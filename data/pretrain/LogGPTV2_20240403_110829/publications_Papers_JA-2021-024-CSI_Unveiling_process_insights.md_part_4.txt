identified in 4.3.3. Notice that both, product and process metrics, have been
computed to obtain the ∆ between t1 and t0.
Table 2: Teams’ Statistics
Task Mode Teams Dev. Ses. Evts. ∆VG PCC
Automatic Refactoring 32 65 150 10443 7.81% 166.5
Manual Refactoring 39 52 170 22676 2.69% 300.3
Total 71 117 320 33119
Dev - Developers, Ses - Sessions, Evts - Events,
∆VG - McCabe Cyclomatic Complexity Reduction %(mean),
PCC - Process Cyclomatic Complexity(mean)
21
Table 3: Teams’ Refactoring Results
Metric Name Min. 1st Qu. Median Mean 3rd Qu. Max.
Automatic Refactoring
∆VG 2.68% 5.87% 6.95% 7.81% 8.84% 16.77%
PCC 24.0 77.0 168.5 166.5 218.2 407.0
Manual Refactoring
∆VG 0.32% 0.62% 0.94% 2.69% 3.92% 13.98%
PCC 53.0 152.0 275.0 300.3 407.0 738.0
Data Partition
VG LEVEL LOW = [0%, 4%]; MEDIUM = [4.1%, 9%]; HIGH = [>9%]
PCC LEVEL LOW = [0, 285]; HIGH = [>285]
∆VG - McCabe Cyclomatic Complexity Reduction %,
PCC - Process Cyclomatic Complexity
We had 32 teams performing automatic refactoring using the JDeodor-
ant plugin, and 39 doing manual refactoring supported only by the Eclipse
native features and/or driven by the developers experience and skills. Table
2 shows the total number of developers and their activities, here referred as
development sessions. In Table 3 we show measures of central tendency and
measures of variability regarding the distribution of ∆VG and PCC, together
with how both were partitioned.
Figure 3 provides evidence for selecting the optimal number of clusters
to partition the data according to LOW or HIGH levels of process cyclo-
matic complexity used in Figure 4. The same clustering method was used
to partition the different levels of software cyclomatic complexity as LOW,
MEDIUM or HIGH.
22
Using the Elbow Method
erauqS
60 fo
muS
nihtiW
40 latoT
20
0
1 2 3 4 5 6 7 8 9 10
Number of Clusters
Using the Silhouette Method
Optimal number of clusters : 2
htdiW
0.6
etteuohliS
0.4
0.2
0.0
1 2 3 4 5 6 7 8 9 10
Number of Clusters
Average Silhouette Width : 0.61
Median Silhouette Width : 0.68
1.00
0.75
0.50
0.25
0.00
4515653461124460202646233547572431928219225556814255137163718668394 311584117324921595127635064716740662915370383630624348525469104233
cluster 1 2
Figure 3: Detecting optimal partitions of PCC
Observation 1: Automatic Refactoring achieves higher levels of
McCabe Cyclomatic complexity reduction. Consider relevant in Ta-
ble 2, how the mean of code cyclomatic complexity reduction (∆VG) for
automatic refactoring is almost three times the reduction when doing man-
ual refactoring. It is also relevant to mention, by looking at Figure 4, that
only four teams had high complexity levels in their work sessions when do-
ing refactoring using JDeodorant. Furthermore, from those, one team had
the major software complexity reduction(16.77%), whilst other had near the
lowest value of reduction(2.68%) within the automatic refactoring practice.
The observation of such different results raised the doubt about the com-
prehension, focus and behaviour of those two teams in the given task. This
demandedfurtherinvestigationontheirefficiency,forwhich,weprovidesome
evidences later using Figures 6 and 7.
Observation 2: Manual refactoring practices have higher process
23
Teams
(n=71)
)%(
16.77% noitcudeR
15%
ytixelpmoC
13.98%
citamolcyC
10% ebaCcM
8.84%
6.95%
5.87%
5%
3.92%
2.68%
0.94%
0.62%
0.32%
0%
AUTOMATIC REFACTORING MANUAL REFACTORING
Process Cyclomatic Complexity Level : LOW HIGH
Figure 4: Refactoring Practices Comparison
cyclomatic complexity. We observe that teams doing manual refactor-
ing almost double the mean of process cyclomatic complexity (PCC), when
compared with the ones using the automatic features of JDeodorant. Being
deprived of the code smell detection plugin, these teams had to do more
manual work to potentially achieve the same results as the ones doing auto-
matic refactoring. This suggest that the refactoring plugin was working as
expected, thus reducing software complexity with less effort simply because
several code snippets may have been introduced automatically.
On the contrary, teams doing the task manually needed to do more code,
and therefore, more actions within the IDE to detect and correct the code
smells. As shown earlier in section 1, manual refactoring tasks can introduce
24
Teams
(n=71)
)%(
11A noitcudeR
15%
17B 26B
1A ytixelpmoC
HIGH
6B 18B 17A citamolcyC
10% 7 11A 24A
14B
3B 24A
5A 29A ebaCcM
22B 20B 24B 17A
5B 2A 22A 11B
MEDIUM 8B 13B 91 B6B 20A 13A 32A 10B 21B 22B
5% 16A 18A 21A 14B
14A 21B 23A 19A
15A
6A 51
LOW 16A 10A11B 2A21A 1 1A 6B 17B 225 AB 4A 3B9A 6 5B 1 3 1A 0B8B 23B7 18A 13B 4B 6A 26A
0% 29A 31A
LOW HIGH
0 200 400 600
Process Cyclomatic Complexity
Task Mode : AUTOMATIC REFACTORING MANUAL REFACTORING
Figure5: Plottingteamsaccordingtolevelsofsoftwareandprocesscyclomaticcomplexity
non expected defects in the code and is seen as a practice to avoid.
Figure 4 plot the percentage of McCabe Cyclomatic Complexity per
method reduction obtained after both refactoring sessions. The different
colors plot the different levels of process cyclomatic complexity as discovered
from mining each team events log.
25
6.0 6.0
0 20 40 60 80 100 0 20 40 60 80 100
Activitiy Frequency Transition Frequency
2
/jasml_0.10/src/com 40/jas (3m 7.l 6/h me inlp se )r/IntegerArray.java 2 in3 stant
13 11
instant instant
/jasml_0.10/src/com/jasm2l7/he (3lp me ir n/ sIn )tegerArrayProduct.java 1 in4 stant 3 instant
1 instant 1 instant 1
/jasml_0.10/src/com/jasml5/d6ec (9o .m 8 mpi inle sr )/JavaClassParser.java 4 114 5.3 secs 1
2 10.5 mins 2 115.3 secs 2 instant 1
/jasml_0.10/src/com/jasml/c7o5mp (1il 6e .4r/ C mio nn s)stantPoolGenerator.java 4 in1 stant
1 1
instant instant
1 in1 stant /jasml_0.10/src/com/j 6as (m 3 l s/ ec cla s)sses/JavaClass.java 2 instant 1 instant
1 1 instant 2 instant 3 instant 1 instant
55(3.3 mins) 4 in2 stant /jasml_0.10/src/com/jasml5/c3om (3p .5il e mr in/J sa )vaClassDumpper.java 4 in6 stant 2 instant
2 2 1
instant instant 23.5 secs
/jasml_0.10/src/com/jasm8l/3com (46p .1il e mr i/ nS so )urceCodeParser.java 7 in5 stant /jasml_0 2.1 30/ (s 4 r mc/ inja s)sml.java 1 in7 stant
1 1 instant
1 1 /jasml_0.10/src/com/jasml/1d5eco (2m 5.p 6 i sle er c/ sS )ourceCodeBuilder.java 1 231 .5 secs
1
Figure6: Team11A:HighPCCandHighVGreduction(20%activities/files,80%paths)
1 1
/jasml_0.10/src/com/jasml/comp3ile0r/ConstantPoolGenerator.java 19 /Teste/src/com/jasml/h4elper/IntegerArray.java 2
6 4 2 1 1 2
1 /jasml_0.10/src/com/jasml/compiler/C2o8nstantPoolGeneratorProduct.java 22 /jasml_0.10/src/com/jasm11l/helper/IntegerArray.java 8 /Teste/src/com/jasml/he6lper/OpcodeHelper.java 4
2 1
/jasml_0.10/src/com/jasml/he1l0per/IntegerArrayProduct.java 8 2 /jasml_0.10.zip_expanded/src/com/9jasml/classes/Attribute_Code.java 8
1 1 1
/jasml_0.10/src/com/jasml/dec1o0m5piler/JavaClassParser.java 80 /jasml_0.10.zip_expanded/src/com/jas2m9l/compiler/SourceCodeParser.java 28
2 1 1
1 /jasml_0.10/src/com/ja4sml/decompiler/I.java 1 1 /jasml_0.10.zip_expanded/src/com/jas1m6l/decompiler/JavaClassParser.java 15
2 1 1
1 1 /jasml_0.10/src/com/jasml/deco4mpiler/AttributeSourcefile.java 1 1 /jasml_0.10/src/com/jasml/decompil5er/JavaClassParserProduct2.java 3 2 1
2 1 1 1
1 /jasml_0.10/src/com/jasml/decomp4iler/AttributeConstantvalue.java 1 /jasml_0.10/src/com/jasml/decomp4iler/JavaClassParserProduct.java 2
2 2 4 1 1 /jasml_0.10.zip_expanded/src/com/jasml2/decompiler/SourceCodeBuilder.java 1
/jasml_0.10/src/com/jasml/d3e1compiler/AttributeCode.java 22 1 1
3 1 2 1
/jasml_0.10/src/com/jasml/decom3piler/AttributeDeprecated.java 1 /jasml_0.10/src/com/jasml/deco1m1piler/AttributeExceptions.java 8 1
1 1 2 2 2 1
1 /jasml_0.10/src/com/jasml/decompile4r/AttributeLocalvariabletable.java 1 /jasml_0.10/src/com/jasml/com7p4iler/SourceCodeParser.java 54 1
3 2 1 3 1
/jasml_0.10/1s5rc/jasml.java 10 /jasml_0.10/src/com/jasml/decompi1le3r/AttributeLinenumbertable.java 7 /jasml_0.10/src/com/jasml/deco6m2piler/SourceCodeBuilder.java 42
1 1 1 1 1
/jasml_0.10/src/com/jas2m3l/compiler/Scanner.java 16 /jasml_0.10/src/com/jasml/deco3mpiler/AttributeSynthetic.java 1 /jasml_0.10/src/com/jasml/com1p8iler/JavaClassDumpper.java 12
1 1 1 1 6
/jasml_0.10/src/com/jasml2/h7elper/OpcodeLoader.java 19 /jasml_0.10/src/com/jasml/decom10piler/AttributeInnerclasses.java 6 2 /jasml_0.10/src/com/jasml/classes8/Attribute_LineNumberTable.java 4 1 1
1 1 4 1
/jasml_0.10/src/com/9jasml/helper/Util.java 6 1 /jasml_0.10/src/com/ja1sm0l/classes/Method.java 1
1 2
/jasml_0.10/src/com/jasm8l/classes/JavaClass.java 2 /jasml_0.10/src/com/jasml/decompiler/S2o1urceCodeBuilderConfiguration.java 18
Figure 7: Team 51 : High PCC but Low VG reduction (20% activities/files, 80% paths)
Observation 3: Even using JDeodorant, similar work efforts
does not mean the same level of gains in software complexity re-
duction. If it is apparent that, when using JDeodorant, the processes tend
26
to have lower levels of complexity and obtained globally more gains in prod-
uct complexity reductions, the same cannot be said for teams doing manual
refactoring. These teams have a more heterogeneous process behavior since
they were free to apply refactoring functionalities without any guidelines
in detection and correction from a dedicated plugin. Figure 5 identifies all
teams and distributes them according to their levels of software and process
complexity.
From Figure 4, we can also observe that the team (11A) with the highest
reduction in code complexity (≈ 16.77%), had also a high level of process
complexity even if they were using the JDeodorant plugin. We can also
identify a team(51) doing automatic refactoring with high levels of process
complexity but having instead, very low gains in code cyclomatic complexity
reduction (≈ 2.68%). As such we investigated the activities of both teams in
order to identify potential reasons for this substantial variation.
Figures 6 and 7, represent the process flow views of both individual teams
regarding the files browsed and/or changed during the refactoring practice15.
Based on the same values for the activities and paths, we can clearly identify
that the team with high gains in VG reduction worked in less files (number
of nodes) and was focused evenly on all of them (dark blue nodes means more
actions on those files).
On the contrary, the team with low gains in VG, visited more files but
worked frequently on only 3 of them. This fuzzy behavior suggests lack of
focusand/orknowledgeaboutthetasktoaccomplish,andpresentagoodway
to measure efficiency on development teams or individual developers. That
can be confirmed by comparing both teams statistics in Figure 8, where we
present product metrics, process metrics and extended process metrics scaled
to represent their position to the mean value of each action for both teams.
We highlight in the extended process metrics the fact that the team with
bigger VG reduction was the one with less frequencies in commands such as
: Undo, Cut, File Open, File Close plus other navigational and less produc-
tive actions. This team had also bigger frequencies in commands to detect
and fix code smells, such as: God Class, Duplicated Code and Type Check-
ing. However, the gains in the VG reduction were achieved at the cost of
increasing 28% the number of classes(NOC) and the lack of cohesion of meth-
ods(LCOM) by ≈72%. On the process side, despite the fact that this team
had more work sessions(7), they touched less files, meaning their activities
15Weacknowledgethatthelabelsinthesetwodiagrams,producedbytheDiscotool,are
illegible in a printing version. However, since the figures are in vectorial format, they can
be zoomed in easily if this paper is read in its electronic version (pdf), the most probable
access medium.
27
scirteM scirteM
MLOC -19.15% -3.03% 305 396
PCC
TLOC
0.82% 6.04% tcudorP ssecorP
NOC 4.00% 28.00% 1069 1405
NOT
SIX
-21.56% -3.67%
NSM -17.25% -0.10% NCS 153 193
NOM
-0.52% 2.50%
NSF -21.88% -3.85% NSS 762 1007
NOF