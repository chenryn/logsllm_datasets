前面示例中的配置是基本配置，满足定义 EC2 自动缩放组的最低要求，如下所示:
*   `LaunchConfigurationName`:应该应用于组中每个实例的启动配置的名称。在前面的例子中，我们使用了`Ref`内部函数的简写语法，并结合了一个名为`ApplicationAutoscalingLaunchConfiguration`的资源的名称，我们将很快定义这个资源。
*   `MinSize`、`MaxSize`和`DesiredCapacity`:自动缩放组中实例的绝对最小值、绝对最大值和所需数量。EC2 自动缩放组将始终尝试保持所需的实例数量，尽管它可能会根据您自己的标准在`MinSize`和`MaxSize`属性的范围内临时放大或缩小实例数量。在前面的示例中，您引用了一个名为`ApplicationDesiredCount`的参数来定义所需的实例数量，该参数能够缩小到零个实例或最多缩小到四个实例。
*   `VPCZoneIdentifier`:自动扩展组中的 EC2 实例应部署到的目标子网列表。在前面的示例中，您引用了一个名为`ApplicationSubnets`的输入参数，它被定义为`List`类型的参数。这可以简单地以逗号分隔列表的形式提供，您将很快看到定义这样一个列表的示例。
*   `Tags`:定义一个或多个要附加到自动缩放组的标签。至少，定义`Name`标签是有用的，这样您可以清楚地识别您的 EC2 实例，并且在前面的示例中，您使用了`Fn::Sub`内部函数的简短形式来动态地注入由`AWS::StackName`伪参数定义的栈名称。`PropagateAtLaunch`标签将标签配置为在启动时附加到每个 EC2 实例，确保配置的名称对每个实例可见。
Refer to the AWS CloudFormation documentation ([https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html)) for more information on how to configure Auto Scaling group resources.
# 配置云信息输入参数
在前面的示例中，您向名为`ApplicationDesiredCount`和`ApplicationSubnets`的云信息模板添加了参数，您需要在部署模板时提供这些参数的值。
`ApplicationDesiredCount`参数只需要是 configure MinSize 和 MaxSize 属性之间的一个数字(即介于 0 和 4 之间)，但是，要确定帐户中子网 id 的值，可以使用`aws ec2 describe-subnets`命令，如下所示:
```
> aws ec2 describe-subnets --query "Subnets[].[SubnetId,AvailabilityZone]" --output table
-----------------------------------
| DescribeSubnets                 |
+------------------+--------------+
| subnet-a5d3ecee  | us-east-1a   |
| subnet-c2abdded  | us-east-1d   |
| subnet-aae11aa5  | us-east-1f   |
| subnet-fd3a43c2  | us-east-1e   |
| subnet-324e246f  | us-east-1b   |
| subnet-d281a2b6  | us-east-1c   |
+------------------+--------------+
```
Querying subnets using the AWS CLI
在前面的示例中，您使用 JMESPath 查询表达式为每个子网选择`SubnetId`和`AvailabilityZone`属性，并以表格格式显示输出。这里我们只是利用默认 VPC 中为您的帐户创建的默认子网，但是您可以使用您的帐户中可能定义的任何子网，这取决于您的网络拓扑的性质。
对于本例，我们将在`us-east-1a`和`us-east-1b`可用性区域使用两个子网，您的下一个问题可能是，我们如何将这些值传递给云信息栈？AWS 命令行界面目前仅提供了使用命令行标志和`aws cloudformation deploy`命令将输入参数作为键值对提供的能力，但是，当您有大量栈输入并想要保持它们时，这种方法很快变得乏味和笨拙。
我们将采用的一个非常简单的方法是在`todobackend-aws`存储库的根处定义一个名为`dev.cfg`的配置文件中的各种输入参数:
```
ApplicationDesiredCount=1
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f
```
Defining a configuration file for stack parameters in dev.cfg
配置文件的方法是将`=`格式的每个参数添加到新的行中，在本章的后面，您将看到我们如何将该文件与`aws cloudformation deploy`命令结合使用。在前面的示例中，请注意我们将`ApplicationSubnets`参数值配置为逗号分隔的列表，这是配置云信息参数时任何列表类型的标准格式。
Stack parameters are typically environment-specific, hence it makes sense to name your configuration files according to your environments. For example, if you had a development and production environment, you might call your configuration files `dev.cfg` and `prod.cfg`, respectively.
# 定义 EC2 自动缩放启动配置
虽然您已经定义了一个 EC2 自动缩放组资源，但是您还不能部署您的云信息模板，因为自动缩放组引用了一个名为`ApplicationAutoscalingLaunchConfiguration`的资源，该资源尚未定义。
EC2 自动扩展启动配置定义了启动时应用于每个实例的配置，并提供了一种通用方法来确保自动扩展组中的每个实例都是一致的。
以下示例演示了如何在云信息模板中配置自动扩展启动配置:
```
...
...
Parameters:
  ApplicationDesiredCount:
    Type: Number
    Description: Desired EC2 instance count
  ApplicationImageId:
 Type: String
 Description: ECS Amazon Machine Image (AMI) ID
  ApplicationSubnets:
    Type: List
    Description: Target subnets for EC2 instances
Resources:
  ApplicationAutoscalingLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
 Properties:
 ImageId: !Ref ApplicationImageId
 InstanceType: t2.micro
 KeyName: admin
 IamInstanceProfile: !Ref ApplicationAutoscalingInstanceProfile
 SecurityGroups:
 - !Ref ApplicationAutoscalingSecurityGroup
 UserData:
 Fn::Base64:
 Fn::Sub: |
 #!/bin/bash
 /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} \
 --resource ApplicationAutoscalingLaunchConfiguration \
 --region ${AWS::Region}
 /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \
 --resource ApplicationAutoscaling \
 --region ${AWS::Region}
  ApplicationCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: todobackend-cluster
  ApplicationAutoscaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ApplicationAutoscalingLaunchConfiguration
      MinSize: 0
      MaxSize: 4
      DesiredCapacity: !Ref ApplicationDesiredCount
      VPCZoneIdentifier: !Ref ApplicationSubnets
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ApplicationAutoscaling-instance
          PropagateAtLaunch: "true"
```
Defining an EC2 Auto Scaling Launch Configuration
请注意，您指定了一个`AWS::AutoScaling::LaunchConfiguration`资源类型，并为您的启动配置配置了以下属性:
*   `ImageId`:EC2 实例将从其启动的映像的 AMI。对于我们的用例，您将使用您在上一章中创建的 AMI。此属性引用了一个名为`ApplicationImageId`的新参数，因此您需要将此参数与您的自定义机器映像的 AMI 标识一起添加到`dev.cfg`文件中。
*   `InstanceType`:EC2 实例的实例族和类型。
*   `KeyName`:允许 SSH 访问每个 EC2 实例的 EC2 密钥对。
*   `IamInstanceProfile`:要附加到 EC2 实例的 IAM 实例配置文件。正如您在前面几章中所学的，为了支持作为 ECS 容器实例的操作，IAM 实例配置文件必须授予 EC2 实例与 ECS 服务交互的权限。在前面的例子中，您引用了一个名为`ApplicationAutoscalingInstanceProfile`的资源，它将在本章后面创建。
*   `SecurityGroups`:要附加到每个实例的 EC2 安全组。这些定义了应用于网络流量的入口和出口安全规则，并且至少必须允许与 ECS 服务、CloudWatch 日志服务和其他相关 AWS 服务的通信。同样，您引用了一个名为`ApplicationAutoscalingSecurityGroup`的资源，它将在本章后面创建。
*   `UserData`:定义实例创建时运行的用户数据脚本。这必须作为 Base64 编码的字符串提供，您可以使用`Fn::Base64`内部函数让 CloudFormation 自动执行此转换。您定义了一个 bash 脚本，该脚本首先运行`cfn-init`命令，该命令将下载并执行与`ApplicationAutoscalingLaunchConfiguration`引用资源相关联的 CloudFormation Init 元数据，然后运行`cfn-signal`命令，向 CloudFormation 发出信号，表明`cfn-init`是否成功运行(注意，`cfn-signal`引用的是`AutoscalingGroup`资源，而不是`ApplicationAutoscalingLaunchConfiguration`资源)。
请注意使用`Fn::Sub`函数，后跟管道操作符(`|`)，这使您能够输入允许所有换行符的自由格式文本，并允许您使用`AWS::StackName`和`AWS::Region`伪参数引用正确的栈名称和 AWS 区域。
You may notice that the `set -e` flag is not set in the UserData bash script, and this is deliberate as we want the `cfn-signal` script to report the exit code of the `cfn-init` script to CloudFormation (as defined by `-e $?` option, where `$?` outputs the exit code of the last process). If you were to include `set -e`, the script would exit immediately if `cfn-init` returned an error, and `cfn-signal` would not be able to signal CloudFormation of the failure.
```
ApplicationDesiredCount=1 ApplicationImageId=ami-ec957491
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f
```
Adding the ApplicationImageId parameter to the dev.cfg file
# 配置云信息初始化元数据
到目前为止，您在我们的栈中执行的最复杂的配置是`UserData`属性，它被定义为自动缩放启动配置的一部分。
回想一下上一章，当您创建一个自定义机器映像时，您安装了`cfn-bootstrap`cloud information 帮助器脚本，其中包括上一个示例中引用的`cfn-init`和`cfn-signal`脚本。这些脚本旨在使用名为 CloudFormation Init 元数据的功能，我们现在将对其进行配置，如下例所示:
```
...
...
Resources:
  ...
  ...
  ApplicationAutoscalingLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
 AWS::CloudFormation::Init:
 config:
 commands:            05_public_volume:
 command: mkdir -p /data/public
 06_public_volume_permissions:
 command: chown -R 1000:1000 /data/public
 10_first_run:
 command: sh firstrun.sh
 cwd: /home/ec2-user
 env:
                ECS_CLUSTER: !Ref ApplicationCluster
 STACK_NAME: !Ref AWS::StackName
 AUTOSCALING_GROUP: ApplicationAutoscaling
 AWS_DEFAULT_REGION: !Ref AWS::Region
    Properties:
      ImageId: !Ref ApplicationImageId
      InstanceType: t2.micro
      KeyName: admin
      IamInstanceProfile: !Ref ApplicationAutoscalingInstanceProfile
      SecurityGroups:
        - !Ref ApplicationAutoscalingSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} \
              --resource ApplicationAutoscalingLaunchConfiguration \
              --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \