# Privilege Escalation and Driver Analysis on macOS

## Exploit Chain Overview
1. **Jump to Gadget P1**
2. **Run ROP Chain**
3. **Control Program Counter (PC)**
4. **Address of Gadget P2**
5. **New Stack: RAX + 0x50**
6. **RAX**
7. **Address of Gadget “NOP; RET;”**
8. **_current_proc, MOV RDI, RAX**
9. **_proc_ucred, MOV RDI, RAX**
10. **_posix_cred_get, MOV RDI, RAX**
11. **_bzero**
12. **_thread_exception_return**
13. **Privilege Escalation**

### New Vulnerabilities in macOS Drivers
- **macOS 10.13.2**: Alibaba Security identified a new privilege escalation vulnerability.
- **macOS 10.13.3**: Additional vulnerabilities were discovered.
- **macOS 10.13.4**: Bugs were fixed.

## Analyzing Apple Drivers: Obstacles
- **Closed-source**: The drivers are not open for public review.
- **C++ Programming**: The drivers are written in C++, making analysis more complex.
- **Lack of Symbols**: Particularly in iOS, symbols are often missing.

### Binary Code in IDA Pro - macOS
- **Readable**:
  - Many symbols are retained.
  - Vtables and their locations are known.
  - Userclient methods have symbols.
  - Functions have meaningful names (both internal and external).
  - Names can be demangled to reveal argument types.
  - Decompiled code is partially human-readable.
  
- **Challenges**:
  - Not suitable for manual review and static analysis.
  - Object variable types are unknown.
  - Vtable function pointers are used extensively, but IDA Pro cannot recognize them.
  - No structures for classes.
  - Class sizes and member variables are unknown.

### Binary Code in IDA Pro - iOS
- **Unreadable**:
  - Functions lack symbols.
  - Function names are meaningless (e.g., "sub_").
  - Vtables and their locations are unknown.
  - No entry points can be found.
  - Variables and arguments lack type information.
  - No structures for classes.
  - Class sizes and member variables are unknown.

## Ryuk: A New Tool for Driver Analysis
- **Purpose**: Ryuk is a tool designed to recover symbols and solve object-oriented features in macOS and iOS drivers.
- **Name Origin**: Ryuk, a character from the comic series "Death Note," who loves eating apples.
- **Implementation**: Implemented as an IDA Pro Python script.

### Features of Ryuk
- **Class Recognition and Construction**
- **Vtable Recognition and Construction**
- **Recover Function Names**
- **Resolve Variable and Argument Types**
- **UI Support**

### Effects of Ryuk
- **Class Recognition and Construction**:
  - **Size and Class Name** are recognized.
  - **Parent Class Info** is provided.
  - **Note**: Multiple inheritance is excluded in libkern.

- **Vtable Recognition and Construction**:
  - **macOS**: Vtables have symbols and known addresses.
  - **iOS**:
    1. Adjust the __const section.
    2. Find the address of the class’s metaclass object.
    3. Get xrefs to the metaclass object.
    4. Data before vtables is in a specific format.
  - **Effects**: Structures representing vtables are created, and the first member of classes is set as a pointer to their vtable.

- **Recover Function Names (Virtual Functions on iOS)**:
  - Most classes inherit from basic classes in the iokit framework like IOService, OSObject, etc., which have meaningful function names.
  - Replace the class name in the overridden virtual functions.

- **Resolve Variable and Argument Types**:
  - **Step 1**: Figure out the creation of variables.
  - **Step 2**: Decide variable types.

- **UI Support**:
  - **Purposes**:
    - Jump to virtual function’s (or children’s) implementation with a double-click.
    - Maintain name and type consistency between function pointers and their implementations.
  - **Implementation**:
    - Register actions for double-click events, key events, name change events, and type change events.

### Benefits of Ryuk
- **For Manual Review**:
  - Meaningful function names.
  - Recognized function pointers and member variables.
  - Known variable types.
  - Double-click to jump to virtual function’s implementation.
- **For Static Analysis**:
  - Resolved variable types.
  - Known call targets of function pointers.
  - Easy construction of Control Flow Graphs (CFG).

### Conclusion
- **Illustration of New CVEs in macOS Drivers**
- **Exploit Chain for Privilege Escalation on macOS**
- **Innovative Exploitation Techniques on Latest macOS**
- **Ryuk**: A new tool for assisting in the analysis of macOS and iOS drivers.
- **GitHub Repository**: [Ryuk](https://github.com/bxl1989/Ryuk)

**Thank you!**

Alibaba Security