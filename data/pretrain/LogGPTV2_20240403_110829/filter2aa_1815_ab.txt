Jmp to Gadget P1
Run ROP chain
Control PC
Addr of Gadget P2
New Stack: RAX+0x50
RAX
Addr of Gadget “NOP; RET;”
_current_proc, MOV RDI, RAX
_proc_ucred, MOV RDI, RAX
_posix_cred_get, MOV RDI, RAX
_bzero
_thread_exception_return
Privilege Escalation
New Vulns in Drivers on macOS – Privilege Escalation on 10.13.2
• Privilege escalation on the macOS 
On macOS 10.13
On macOS 10.13.2
Alibaba Security
Bugs fixed on macOS 10.13.4
New Vulns in Drivers – Privilege Escalation on macOS 10.13.3
Alibaba Security
Analyze Apple Drivers: Obstacles
• But! Analyzing macOS and iOS kernel drivers is not easy!
• Closed-source
• Programmed in C++
• Lack of Symbols (mainly for iOS)
• Let’s first look at how drivers’ binary code looks like in IDA pro
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – macOS
• Readable
Many 
symbols 
are kept
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – macOS
• Readable
Event better, we 
have symbols of 
vtables and know 
where they are
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – macOS
• Readable
Even sMethods of 
userclients have 
symbols
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – macOS
• Readable
Functions have 
meaningful names 
(for both internal 
and externa). 
These names can 
be demangled to 
know the 
argument types
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – macOS
• Readable
Decompiled code is 
partially human-
readable 
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – macOS
• Readable, but not suitable for manual review and static analysis 
Types of object 
variables are 
unknown 
Classes’ vtable
function pointers are 
used everywhere, IDA 
pro cannot recognize.
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – macOS
• Readable, but not suitable for manual review and static analysis 
No structures for 
classes
Class sizes are 
unknown
Member variables 
cannot be recognized 
by IDA pro
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – iOS
• Messy! Nothing useful there! Unreadable, not to mention further 
analysis
Functions do not have symbols
Function names are all 
meaningless “sub_”
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – iOS
• Messy! Nothing readable, not to mention further analysis
There is no symbol for 
vtables
No clue to know where 
vtables are
No entry can be found
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – iOS
• Messy! Nothing readable, not to mention further analysis
Functions 
cannot be 
recognized 
by IDA pro 
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – iOS
• Messy! Nothing readable, not to mention further analysis
Function names are meaningless
Vtable function pointers are not 
recognized
Variables and arguments do not 
have any type information
Alibaba Security
Analyze Apple Drivers: Obstacles
• How does a driver’s binary look like in IDA pro – iOS
• Messy! Nothing readable, not to mention further analysis
No structures for classes
Class sizes are unknown
Member variables cannot be 
recognized by IDA pro
Alibaba Security
Analyze Apple Drivers: A New Tool
• Ryuk: a new tool to recover symbols and solve object-oriented 
features in macOS and iOS drivers
• Ryuk: character in the comics series Death Note, who loves eating apples.
• Implemented as IDA pro python script
Alibaba Security
Ryuk: Design
• Features of Ryuk:
• Class recognition and construction
• Vtable recognition and construction
• Recover function names
• Resolve variable and argument types
• UI support 
• …
Alibaba Security
Ryuk: Effects
• Class Recognition and Construction
Alibaba Security
Size
Class Name
Ryuk: Effects
• Vtable recognition and construction
Alibaba Security
Ryuk: Effects
• Vtable recognition and construction
Alibaba Security
Ryuk: Effects
• Recover function names
Alibaba Security
Ryuk: Effects
• Recover function names, resolve variable and argument types, 
function pointer and member variable recognition
Alibaba Security
Ryuk: Effects
• UI support
Alibaba Security
Ryuk: Effects
• UI support
Alibaba Security
Ryuk: Effects
• UI support
Alibaba Security
Ryuk: Implementation
• 1. Class recognition and construction 
• Functions in __mod_init_func section register all classes
Alibaba Security
macOS
iOS
Ryuk: Implementation
• 1. Class recognition and construction
• Functions in __mod_init_func section register all classes
macOS
iOS
Class Name
Class Size
Parent Class Info
Alibaba Security
*Note: multiple inheritance is excluded in libkern
Registration
Ryuk: Implementation
• 1. Class recognition and construction
• Functions in __mod_init_func section register all classes 
Alibaba Security
macOS
iOS
Class Name
Class Size
Parent Class Info
*Note: multiple inheritance is excluded in libkern
Ryuk: Implementation
• 1. Class recognition and construction: Effect
• Structures representing classes are created
Alibaba Security
Ryuk: Implementation
• 2. Vtable recognition and construction
• On macOS, vtables have symbols and known addresses, no need to find
Alibaba Security
Ryuk: Implementation
• 2. Vtable recognition and construction
• On iOS, step 1: adjust the __const section
• Vtables are in __const section, but IDA pro makes it disappear
Alibaba Security
Ryuk: Implementation
• 2. Vtable recognition and construction
• On iOS, step 2: find address of class’s metaclass object
• Functions in __mod_init_func section are parsed again
Alibaba Security
Addrss of class’s metaclass object
Ryuk: Implementation
• 2. Vtable recognition and construction
• On iOS, step 3: Get xrefs to metaclass object
• The xref in const section nears the vtable
Alibaba Security
Ryuk: Implementation
• 2. Vtable recognition and construction
• On iOS, step 3: Get xrefs to metaclass object 
• Data before vtables is in some specific format
Xref to metaclass object
Xref to parent’s metaclass
Vtable start preceeding
by 2 zero
Alibaba Security
Ryuk: Implementation
• 2. Vtable recognition and construction: Effects
• Create structures representing vtables and set the first member of classes 
as an pointer to their vtable
Alibaba Security
Ryuk: Implementation
• 3. Recover function names (virtual functions on iOS)
• Most classes inherit from basic classes in iokit framework like IOService, OSObject, 
etc., which have meaningful function names
• Replace the class name in the overriden virtual functions
Overriden
virtual 
functions
Alibaba Security
IOSurfaceRoot::
getMetaCalss
Ryuk: Implementation
• 3. Recover function names (virtual functions on iOS): Effects
Alibaba Security
Ryuk: Implementation
• 4. Resolve variable and argument types
• Step 1: Figure out the creation of variables
Allocation
Cast
Allocation
Constructor
Alibaba Security
Ryuk: Implementation
• 4. Resolve variable and argument types
• Step 2: Variable types are decided
Alibaba Security
Ryuk: Implementation
• 5. UI support 
• Purposes:
• Jump to virtual function’s (or children’s) implementation when double-
click on function pointers
• Keep the name and type consistency between function pointer and their 
implementation
• Implementation:
• Register action to double-click events
• Register action to key events
• Register action to name change events
• Register action to type change events
Alibaba Security
Ryuk: Benefits
• For manual review:
• Function names are meaningful
• Function pointers are recognized
• Member variable are recognized
• Variable types are known
• You can jump to virtual function’s implementation from their pointers 
with just a double-click
• For static analysis:
• Variable types are resolved 
• Call targets of function pointers are known
• Further CFG can be easily constructed
Alibaba Security
• Explanation and illustration of 2 new CVEs in macOS drivers
• Illustration of whole exploit chain of privilege escalation on macOS
• Innovative exploitation techniques on latest macOS
• Ryuk: a new tool for assisting the analysis of macOS and iOS drivers
• Most important! 
• Ryuk: https://github.com/bxl1989/Ryuk
Alibaba Security
Conclusions
Thanks
Alibaba Security