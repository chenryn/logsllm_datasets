Skv. The ﬁrst construction is by Das Sarma et al. [14] which
is itself based on a construction of Thorup and Zwick [48]
and the second is by Cohen et al.
[11]. The two solutions
produce sketches of the same form and distance queries are
answered using the same operation.
Sketch-based oracles. More formally, a sketch-based dis-
tance oracle DO = (Setup, Query) is a pair of eﬃcient algo-
rithms that work as follows. Setup takes as input a graph
G, an approximation factor α and an error bound ε and
outputs an oracle ΩG = {Skv}v∈V . Query takes as input an
oracle ΩG and a shortest distance query q = (u, v). We say
that DO is (α, ε)-correct if for all graphs G and all queries
q = (u, v), Pr [ dist(u, v) ≤ d ≤ α · dist(u, v) ] ≥ 1 − ε, where
d := Query(ΩG, u, v). The probability is over the random-
ness of algorithm Setup.
The Das Sarma et al.
makes σ = (cid:101)Θ(n2/(α+1)) calls to a Sketch sub-routine with
oracle. The Setup algorithm
v1 , . . . , Ski
the graph G. Throughout, we refer to σ as the oracle’s sam-
pling parameter and we note that it aﬀects the size of the
sketches. During the ith call, the Sketch routine generates
and returns a collection of sketches (Ski
vn ), one for
every node vj ∈ V . Each sketch Ski
vj is a set constructed as
follows. During the ith call to Sketch, it samples uniformly
at random λ = log n sets of nodes S0, . . . , Sλ−1 of progres-
sively larger sizes. In particular, for all 0 ≤ z ≤ λ− 1, set Sz
vj then consists of λ pairs {(wz, δz)}0≤z≤λ−1
is of size 2z. Ski
such that wz is the closest node to vj among the nodes in
Sz and δz = dist(vj, wz). Having computed σ collections of
sketches (Ski
vn )i∈[σ], Setup then generates, for each
vj . Finally, it out-
puts a distance oracle ΩG = (Skv1 , . . . , Skvn ). Throughout,
we refer to the nodes stored in the node/distance pairs of
the sketches as seeds.
node vj ∈ V , a ﬁnal sketch Skvj =(cid:83)σ
v1 , . . . , Ski
i=1 Ski
The Cohen et al. oracle. The Setup algorithm assigns
to each node v ∈ V a sketch Skv that includes pairs (w, δ)
chosen as follows. It ﬁrst chooses a random rank function
rk : V → [0, 1]; that is, a function that assigns to each
v ∈ V a value distributed uniformly at random from [0, 1].
Let Nd(v) be the set of nodes within distance d − 1 of v
and let ρ = Θ(n2/(α+1)). Throughout, we refer to ρ as the
oracle’s rank parameter and note that it aﬀects the size of
the sketches. For each node v ∈ V , the sketch Skv includes
pairs (w, δ) such that rk(w) is less than the ρth value in the
sorted set {rk(y) : y ∈ Ndist(u,v)(v)}. Finally it outputs a
distance oracle ΩG = (Skv1 , . . . , Skvn ). Like above, we refer
506to the nodes stored in the node/distance pairs of the sketches
as seeds.
Shortest distance queries. The two oracle constructions
share the same Query algorithm which works as follows.
Given a query q = (u, v), it ﬁnds the set of nodes I in
common between Sku and Skv and returns the minimum
over s ∈ I of dist(u, s) + dist(s, v). If there are no nodes in
common, then it returns ⊥.
Sk(u): {(a, 3), (b, 3), (e, 6), (g, 3), (h, 4)}
Sk(v): {(b, 2), (d, 1), (e, 3), (h, 3), (f, 7)}
Figure 1: Two sketches for nodes u and v. The approximate
shortest distance d = 5.
4 Distance Oracle Encryption
In this section we present the syntax and security deﬁni-
tion for our oracle encryption schemes. There are many
variants of structured encryption, including interactive and
non-interactive, response-revealing and response-hiding. We
consider interactive and response-hiding schemes which de-
note the fact that the scheme’s query operation requires at
least two messages (one from client and a response from
server) and that queries output no information to the server.
Definition 4.1
(Oracle Encryption). A distance
oracle encryption scheme Graph = (Setup, distQuery) con-
sists of a polynomial-time algorithm and a polynomial-time
two-party protocol that work as follows:
• (K, EO) ← Setup(1k, Ω, α, ε):
is a probabilistic algo-
rithm that takes as input a security parameter k, a
distance oracle Ω, an approximation factor α, and an
error parameter ε. It outputs a secret key K and an
encrypted graph EO.
• (d,⊥) ← distQueryC,S
(cid:0)(K, q), EO(cid:1): is a two-party pro-
tocol between a client C that holds a key K and a short-
est distance query q = (u, v) ∈ V 2 and a server S that
holds an encrypted graph EO. After executing the pro-
tocol, the client receives a distance d ≥ 0 and the server
receives ⊥. We sometimes omit the subscripts C and
S when the parties are clear from the context.
For α ≥ 1 and ε < 1, we say that Graph is (α, ε)-correct if
for all k ∈ N, for all Ω and for all q = (u, v) ∈ V 2,
Pr [ d ≤ α · dist(u, v) ] ≥ 1 − ε,
where the probability is over the randomness in com-
puting (K, EO) ← Setup(1k, Ω, α, ε) and then (d,⊥) ←
distQuery(cid:0)(K, q), EO(cid:1).
4.1 Security
At a high level, the security guarantee we require from an
oracle encryption scheme is that: (1) given an encrypted
oracle, no adversary can learn any information about the
underlying oracle; and (2) given the view of a polynomial
number of distQuery executions for an adaptively generated
sequence of queries q = (q1, . . . , qn), no adversary can learn
any partial information about either ΩG or q.
Such a security notion can be diﬃcult to achieve eﬃ-
ciently, so often one allows for some form of leakage. Follow-
ing [13, 7], this is usually formalized by parameterizing the
security deﬁnition with leakage functions for each operation
of the scheme which in this case include the Setup algorithm
and distQuery protocol.
We adapt the notion of adaptive semantic security from
[13, 7] to our setting to the case of distance oracle encryp-
tion.
Definition 4.2. Let Graph = (Setup, distQuery) be an
oracle encryption scheme and consider the following proba-
bilistic experiments where A is a semi-honest adversary, C
is a challenger, S is a simulator and LSetup and LQuery are
(stateful) leakage functions:
IdealA,S (1k):
• A outputs an oracle Ω, its approximation factor α and
its error parameter ε.
• Given LSetup(Ω), 1k, α and ε, S generates and sends
an encrypted graph EO to A.
• A generates a polynomial number of adaptively cho-
sen queries (q1, . . . , qm). For each qi, S is given
LQuery(Ω, qi) and A and S execute a simulation of
distQuery with A playing the role of the server and S
playing the role of the client.
• A computes a bit b that is output by the experiment.
RealA(1k):
• A outputs an oracle Ω, its approximation factor α and
its error parameter ε.
• C computes (K, EO) ← Setup(1k, Ω, α, ε) and sends the
encrypted graph EO to A.
• A generates a polynomial number of adaptively cho-
sen queries (q1, . . . , qm). For each query qi, A and C
execute distQueryC,A
• A computes a bit b that is output by the experiment.
(LSetup,LQuery)-
We
there
(cid:0)(K, q), EO(cid:1).
for all ppt adversaries A,
that Graph
is
adaptively
say
semantically secure if
exists a ppt simulator S such that
(cid:104)
(cid:12)(cid:12)(cid:12)Pr
(cid:105) − Pr
(cid:104)
(cid:105)
(cid:12)(cid:12)(cid:12) = negl(k).
RealA(1k) = 1
IdealA,S (1k)
= 1
The deﬁnition above captures the fact that, given the en-
crypted oracle and its view of the query protocol, an adver-
sarial server cannot learn any information about the oracle
beyond the leakage.
4.2 Leakage
All the distance oracle encryption schemes we discuss in
this work leak information. We describe and formalize these
leakages below.
Setup leakage. The setup leakage of our ﬁrst and sec-
ond constructions, GraphEnc1 and GraphEnc2 in Sections
5.1 and 5.2,
includes the total number of nodes in the
underlying graph n,
the maximum sketch size S =
maxv∈V |Skv| and the maximum distance over all seeds
D = maxv∈V max(w,δ)∈Skv δ. The setup leakage of our third
construction, GraphEnc3 in Section 5.3, includes n, S, D and
the total number of seeds Z =(cid:80)
v∈V |Skv|.
507Query pattern leakage. The query leakage of our
ﬁrst two constructions, GraphEnc1 and GraphEnc2, reveals
whether the nodes in the query have appeared before. We
refer to this as the query pattern leakage and formalize it
below.
Definition 4.3
(Query pattern). For two queries
q, q(cid:48) deﬁne Sim(q, q(cid:48)) = (u = u(cid:48),u = v(cid:48),v = u(cid:48), v = v(cid:48)), i.e.,
whether each of the nodes q = (u, v) matches each of the
nodes of q(cid:48) = (u(cid:48), v(cid:48)). Let q = (q1, . . . , qm) be a non-empty
sequence of queries. Every query qi ∈ q speciﬁes a pair of
nodes ui, vi. The query pattern leakage function LQP (q) re-
turns an m × m (symmetric) matrix with entry i, j equals
Sim(qi, qj). Note that LQP does not leak the identities of
the queried nodes.
We do not claim that it is always reasonable for a graph
encryption scheme to leak the query pattern - it may convey
sensitive information in some settings. Furthermore, Deﬁni-
tion 4.2 does not attempt to capture all possible leakages.
As with many similar deﬁnitions, it does not capture side
channels, and, furthermore, it does not capture leakage re-
sulting from the client’s behavior given the query answers,
which, in turn may be aﬀected by the choice of an approxi-
mation algorithm (see also [16, 22] for a discussion of privacy
of approximation algorithms).
third
pattern
leakage. Our
construction,
Sketch
GraphEnc3,
leaks the query pattern and an additional
pattern we refer to as the sketch pattern. The sketch
pattern reveals which seeds are shared between the diﬀerent
sketches of the oracle and the size of the sketches. We
formalize this below by revealing randomized “pseudo-ids”
of the seeds in each sketch.
Definition 4.4
(Sketch pattern leakage). The
sketch pattern leakage function LSP (ΩG, q) for a graph
G and a query q = (u, v) is a pair (X, Y ), where
X = {f (w) : (w, δ) ∈ Sku} and Y = {f (w) : (w, δ) ∈ Skv}
are multi-sets and f : {0, 1}log n → {0, 1}log n is a random
function.
It is not clear what this leakage implies in practice but
we note that the leakage is not (directly) over the graph but
over the sketches which contain a random subset of nodes.
Therefore, it may be possible to add some form of noise in
the sketches (e.g., using fake sketch elements) to guarantee
some level of privacy to the original graph. We note that
leakage is revealed in all SSE constructions such as [46, 6, 20,
13, 7, 25, 28, 24, 5, 37, 4]. However, in all these constructions
the leakage is over a data structure (e.g., an inverted index)
that holds all of the original data (i.e., all the keywords and
documents). In our case, the leakage is over a structure that
holds only a random subset of the data. This could provide
additional help with respect to privacy but this is a topic
for future work and is not the main focus of this paper.
4.3 Efﬁciency
We evaluate the eﬃciency and practicality of our construc-
tions according to the following criteria:
• Setup time: the time for the client to pre-process and
encrypt the graph;
• Space complexity: the size of the encrypted graph;
• Query time: The time to execute a shortest distance
query on the encrypted graph;
• Communication complexity:
the number of bits ex-
changed during a query operation.
5 Our Constructions
In this section, we describe our three oracle encryption
schemes. The ﬁrst scheme, GraphEnc1, is computationally
eﬃcient, but has high communication overhead. Our second
scheme, GraphEnc2, is communication eﬃcient but has high
space overhead. Our third scheme, GraphEnc3, is compu-
tationally eﬃcient with optimal communication complexity.
GraphEnc1 and GraphEnc2 do not leak anything besides the
Query Pattern, and GraphEnc3 also leaks the Sketch Pattern.
5.1 A Computationally-Efﬁcient Scheme
We now describe our ﬁrst scheme which is quite practical.
The scheme GraphEnc1 = (Setup, distQuery) makes use of
a symmetric-key encryption scheme SKE = (Gen, Enc, Dec)
and a PRP P . The Setup algorithm works as follows. Given
a 1k, ΩG, α and ε:
• It pads each sketch to the maximum sketch size S by
ﬁlling them with dummy values.
• It then generates keys K1, K2 for the encryption
scheme and PRP respectively and sets K = (K1, K2).
For all v ∈ V , it computes a label PK2 (v) and cre-
ates an encrypted sketch ESkv = (c1, ..., cλ), where
ci ← EncK1 (wi(cid:107)δi) is a symmetric-key encryption of
the ith pair (wi, δi) in Skv.
• It then sets up a dictionary DX in which it stores, for
all v ∈ V , the pairs (PK2 (v), ESkv), ordered by the
labels. The encrypted graph is then simply EO = DX.
The distQuery protocol works as follows.
To query
EO on q = (u, v),
the client sends a token tk =
(tk1, tk2) = (PK2 (u), PK2 (v)) to the server which returns
the pair ESku := DX[tk1] and ESkv := DX[tk2]. The
client then decrypts each encrypted sketch and computes
mins∈I dist(u, s) + dist(s, v) (note that the algorithm only
needs the sketches of the nodes in the query).
Security and eﬃciency. It is straightforward to see
that the scheme is adaptively (L,LQP )-semantically secure,
where L is the function that returns n, S and D. We defer
a formal proof to the full version of this work. The com-
munication complexity of the distQuery protocol is linear in
S, where S is the maximum sketch size. Note that even
though S is sub-linear in n, it could still be large in prac-
tice. For example, in the Das Sarma et al. construction
S = O(n2/α · log n). Also, in the case of multiple concurrent
queries, this could be a signiﬁcant bottleneck for the scheme.
In the following Section, we show how to achieve a solution
with O(1) communication complexity and in Section 6 we
experimentally show that it scales to graphs with millions
of nodes.
5.2 A Communication-Efﬁcient Scheme
second scheme GraphEnc2 =
We now describe our
(Setup, distQuery) which is less computationally eﬃcient
508Algorithm 1: Setup algorithm for GraphEnc2
Input : 1k, ΩG, α, ε
Output: EO
1 begin Setup
2
3
4
5
6