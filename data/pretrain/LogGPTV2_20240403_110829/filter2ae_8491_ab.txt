          if ( v7 == 1 || v7 == 8 )
          {
            ERR_put_error(20LL, 523LL, 66LL, "../ssl/ssl_lib.c", 1744LL);
          }
          else
          {
            sub_49588(a1, 0LL);
            if ( (*(_DWORD *)(a1 + 1496) & 0x100) != 0 && !ASYNC_get_current_job() )
            {
              v12 = *(_QWORD *)(a1 + 8);
              v14[0] = a1;
              v14[1] = a2;
              v13 = *(_QWORD *)(v12 + 56);
              v14[2] = a3;
              v15 = 0;
              v16 = v13;
              v6 = sub_32AD8(a1, v14, sub_329A0);
              *a4 = *(_QWORD *)(a1 + 6168);
            }
            else
            {
              return (*(unsigned int (__fastcall **)(__int64, __int64, __int64, _QWORD *))(*(_QWORD *)(a1 + 8) + 56LL))(
                       a1,
                       a2,
                       a3,
                       a4);
            }     // 猜测这里是ctx->method->ssl_read
          }
        }
      }
      else
      {
        v6 = -1;
        ERR_put_error(20LL, 523LL, 276LL, "../ssl/ssl_lib.c", 1733LL);
      }
      return v6;
    }
查看调用`ctx->method->ssl_read`的汇编代码:
    .text:00000000000348A4 loc_348A4                               ; CODE XREF: sub_34830+68↑j
    .text:00000000000348A4                 LDR             X4, [X19,#8]
    .text:00000000000348A8                 MOV             X3, X24
    .text:00000000000348AC                 MOV             X2, X23
    .text:00000000000348B0                 MOV             X1, X22
    .text:00000000000348B4                 MOV             X0, X19
    .text:00000000000348B8                 LDR             X4, [X4,#0x38]
    .text:00000000000348BC                 BLR             X4
    .text:00000000000348C0                 MOV             W21, W0
    .text:00000000000348C4                 LDP             X23, X24, [SP,#0x70+var_40]
    .text:00000000000348C8                 B               loc_348E8
我们能发现，buf被储存在了X22寄存器里，然后当调用完`ctx->method->ssl_read`，这个时候X22寄存器里就是有效的明文数据了，所以我们可以把uprobe插在`0x348C4`，然后我们以字符串输出寄存器X22，这就是明文数据了。
最后我们可以得到以下事件语句：
    ADDR=`python3 -c 'from pwn import ELF,context;context.log_level="error";e=ELF("/lib/aarch64-linux-gnu/libssl.so.1.1");print(hex(e.symbols["SSL_write"]))'`
    p:SSL_write /lib/aarch64-linux-gnu/libssl.so.1.1:$ADDR +0(%x1):string
    p:SSL_read /lib/aarch64-linux-gnu/libssl.so.1.1:0x348C4 +0(%x22):string
然后启动我们的脚本，再另一个终端里使用curl访问百度，我们可以得到以下输出：
    root@ubuntu:~# /tmp/test.sh
    1
    1
                curl-3339154 [001] ..... 1191831.068149: SSL_write: (0xffffa4b5fc70) arg1="GET / HTTP/1.1
    Host: www.baidu.com
    User-Agent: curl/7.68.0
    Accept: */*
    "
                curl-3339154 [001] ..... 1191831.088676: SSL_read: (0xffffa4b5f8c4) arg1="HTTP/1.1 200 OK
    Accept-Ranges: bytes
    ......
## 实际应用场景
### 普通程序
Android设备上的ssl库是`/system/lib64/libssl.so`，如果使用该库，那么uprobe插桩的思路跟上面的例子讲的一样。
### 某信APP
研究中发现，插桩了`libssl.so`，但是却没有办法得到Chrome或者某信的流量。经过一番研究，我发现了这篇文章：自动定位webview中的SLL_read和SSL_write
原来某信用的是webview，其libc位于：`/data/data/com.xxxx/app_xwalk_4317/extracted_xwalkcore/libxwebcore.so`
随后就把这个libc掏出来，丢入IDA，根据上面这篇文章中所说的，去定位`SSL_write`和`SSL_read`。
然后就能成功获取到流量了：
    $ ./uprobe_test.sh
    ......
      NetworkService-19594 [006] .... 338986.936127: SSL_write: (0x75c2f17548) buf="GET /webview/xxxxx
    ......
      NetworkService-19594 [006] .... 338987.021581: SSL_read: (0x75c2f17320) buf="HTTP/1.1 200 OK
    Date: Wed, 02 Nov 2022 10:29:42 GMT
    Content-Type: text/html
    Content-Length: 0
    Connection: keep-alive
    ......
### 解密某信通信流量
上面的例子中，能抓到的都是在某信中访问HTTPS网页的流量，那发消息的流量呢？经过我一番搜索，发现其通信流量是使用`Java_xxx_MMProtocalJni_pack`函数来加密的，但是相关资料很少，估计都被公关掉了。
我就自能自行逆向了，但是没有调试环境，这代码也很难逆，就在我陷入僵局的时候，我发现了一个`compressBound`函数，再其之后还有一个`compress2`函数：
    ......
    if ( *a4 == 1 )
            {
              v11 = compressBound(size);
              v12 = v11;
              v15 = v11;
              sub_3CA68((__int64)v16);
              sub_3CAA4(v16, v12);
              v13 = sub_3CDF8(v16);
              v14 = compress(v13, &v15, a1, size);
              sub_3CCD8(v16, (unsigned int)v15);
    ......
然后我就在该函数下插入uprobe，打印a1变量，果然，这个就是我们发送的消息的明文：
    比如我向好像发送`Test123`消息，可以看到：
      binder:13658_8-15519 [005] .... 328460.408711: SSL_mm: (0x75ad943444) arg1=#
    (好友ID)Test123 ?(???" arg2=0x27
    发送表情：
      binder:13658_8-15519 [000] .... 328488.173019: SSL_mm: (0x75ad943444) arg1=\$
    (好友ID)[发呆] ????(???"" arg2=0x28
    发送图片：
          mars::2961-2961  [005] .... 328527.422874: SSL_mm: (0x75ad943444) arg1="
    %aupimg_xxxxx(好友ID) Z(x2" arg2=0x98
# 其他
Linux内核自带的uprobe事件，可以让我们不需要写任何代码，就监控系统用户态的函数调用，打印数据，功能虽然单一，但十分强大。后续我考虑研究是否能对其进行扩展，还有，我们自己写的uprobe是如何加载的。
# 参考
  1. 
* * *