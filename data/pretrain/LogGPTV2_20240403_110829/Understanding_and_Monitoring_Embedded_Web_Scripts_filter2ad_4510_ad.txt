// DIV[@class=‘ad’]
because another node that has class ‘ad’ is not accessed.
After the threshold is raised to 2 (i.e. the selector is allowed
to match at most twice the number of accessed nodes), this
better permission is proposed.
However, increasing the threshold may adversely cause
PolicyGenerator to generate very broad permissions. For
example, if all the advertisement content are injected into
borderless DIV frames, // DIV[@frameborder=‘0’] could be a
potential permission candidate, but a rather meaningless one
that may match other nodes containing sensitive information.
To avoid this issue, PolicyGenerator normally gives more
weight to attributes like class and id, and propose them
more often; however, if an overly broad permission is indeed
proposed, the administrator may need to ignore the candidate
and look into the DOM structure and ﬁnd identiﬁers from
its parents or children to produce a better permission such
as // DIV[@class=‘ad’].
After changes are made to a permission, Visualizer will
highlight the node collections matching the adjusted per-
mission. The site administrator can examine the highlighted
nodes and determine if the permission should be used.
Another common scenario that requires manual attention
is when the PolicyGenerator over-emphasizes particular at-
tributes. For example, all cnet.com ad placeholders have an
attribute named data−ad, which makes it a good descrip-
tor to use for site-speciﬁc permissions. However, because
PolicyGenerator favors id and class attributes over others, it
generates complex and meaningless policies across different
pages using id and class as selector attribute names.
Site-speciﬁc policy examples. Here we show a few exam-
ples of site-speciﬁc policies to illustrate the integrity and
privacy properties that can be expressed.
Ticketmaster.com is a ticket-selling website. Policy 4
Policy 4 Site-speciﬁc policy for ticketmaster.com
(The getSize action is a special DOM permission, it includes APIs related
to size and position information such as getClientHeight and getScrollWidth.)
−googleadservices.com & doubleclick.net−
// DIV[@class=‘gpt−ad−container’]:AppendChild
// DIV[@class=‘gpt−ad−container’]:getSize
−facebook.net−
Send:ticketmaster.com
shows the site-speciﬁc policy extensions that were needed
for three scripts embedded on this site, one for Facebook
and the other two for Google ad services. The Facebook
permission allows its script to send network requests back to
the host domain, ticketmaster.com. Although this behavior
may be safe and intended by the site administrator, a site-
speciﬁc policy is required because this behavior is not part
of the script’s base policy.
The site-speciﬁc permissions for googleadservices.com
and doubleclick.net scripts are based on the same node
descriptor: // DIV[@class=‘gpt−ad−container’]. This permis-
sion entry is necessary because it is speciﬁc to the web-
site and different from the most popular implementation
// DIV[@id=‘div−gpt−ad−.∗’] covered in the base policy. The
two permissions together give scripts from the Google ad
sites permission to write to the matching nodes, as well as
to read their size information. Other than this, the embedded
scripts are not allowed to read or write any content, offering
strong privacy and integrity for ticketmaster.com.
However, not all permissions match accessed nodes per-
fectly. For example, we added this site-speciﬁc Google ad
permission for theverge.com:
// DIV[@class=‘dfp ad’]:document.write
This entry matches a total of ten nodes in the homepage,
but only four nodes are actually accessed on the page. This
means the selector over-matches six additional nodes. After
a closer examination of the these nodes, we conﬁrmed that
none of them contain any sensitive content and four are
adjacent to nodes that contain the advertisement.
Finally, we are not able to obtain meaningful and ro-
bust site-speciﬁc policies for two sites (forbes.com and
buzzfeed.com), as their advertisement
integration lacks
generalizable node selector patterns. In addition, omtrdc.net
scripts seem to be reading and writing all nodes on certain
pages on lowes.com. In the above cases, whitelisting the
problematic script domain as trusted seems to be the best
solution. This prevents the frequent violations for these
scripts, but enables ScriptInspector to restrict the behavior
of other scripts in the page.
2The getSize action is a special DOM permission, it includes APIs related
to size and position information such as getClientHeight and getScrollWidth.
860860
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply. 
8 POLICY EVALUATION
In this section, we analyze experimentally how many
site-speciﬁc permissions are required for each site, their
distribution in third-party domains, the length of the optimal
training phase (for the deployment scenario described on the
right side of Figure 1), and the robustness of trained policies.
Although our results reveal that producing good policies can
be challenging, they provide reasons to be optimistic that the
effort required to produce robust policies is reasonable for
nearly all websites.
8.1 Policy size
Of the 100 sites tested, 72 sites needed at
least one
site-speciﬁc permission. Table I shows the number of sites
requiring at least one site-speciﬁc permission for particular
script domains (scripts embedded in fewer than ten sites not
included in the table). The table is sorted by the fraction
of sites embedding scripts from a given domain that needed
site-speciﬁc permissions. For example, of the 61 sites from
our sample that embed doubleclick.net, we found 48 of
them needed site-speciﬁc permissions, while 13 of sites only
needed the generic base policy.
Many sites need site-speciﬁc permissions for the advertis-
ing scripts (doubleclick.net, googleadservices.com). This
is not surprising since they are injecting advertisements into
different locations of the page for different sites. Only those
serving as beacons for Google Ad networks (tracking user’s
browsing history as opposed to injecting advertisements) or
those which embed the scripts using the conventions covered
by the base policy do not need site-speciﬁc permissions.
Similarly, social widgets (70% for twitter.com and 32%
for facebook.net) also require a high number of site-
speciﬁc permissions. The reason that Twitter’s number is
signiﬁcantly higher than Facebook’s is partly because Face-
book’s content insertion behavior can be covered by the base
policy // DIV[@id=’fb−root’]>!, while most content insertion
behaviors of Twitter are more ﬂexible and cannot be covered
by a simple base policy.
On the contrary, analytics scripts rarely require site-
speciﬁc policies. Google Analytics is embedded by 83 of
the 100 test sites, but only four sites needed site-speciﬁc
permissions. None of the 25 sites embedding QuantServe
Analytics required any site-speciﬁc permissions. The low
fraction of sites needing speciﬁc permissions for analytics
scripts is consistent with our observations in Section 5.
The overall number of permissions needed is manage-
able per site. We count permissions based on their DOM
node representation (for permissions involving DOM ac-
cess), but not
the API called or arguments used. So
// DIV[@id=‘a’]:GetAttribute and // DIV[@id=‘a’]:SetAttribute
would be counted as one site-speciﬁc permission, but
// DIV[@id=‘b’] and // DIV[@id=‘a’] would count as two.
A total of 436 total site-speciﬁc permissions are added
for all 100 sites, so each of the 72 sites that needed at least
one permission needed an average of 6.1 permissions. The
largest number was for mlb.com which embeds many adver-
tisements and needed 26 site-speciﬁc permissions, followed
by 14 for businessweek.com and people.com.
Very few individual script domains required more than
two permissions on average for embedding sites. The highest
was 4.16 permissions per embedding site for 2mdn.net
scripts (embedded on 17 sites). Other frequently used scripts
requiring more than two permissions per embedding site in-
clude moatads.com, doubleclick.net, krxd.net, facebook.
net, serving-sys.com, and googleadservices.com. Their
site-speciﬁc policies consist of mostly read and write ac-
cesses to designated ad or social content placeholders, with
few additional size and location queries for surrounding
elements.
The number of site-speciﬁc permissions per site gives
some sense of the manual effort required, but the amount of
effort also depends on how close the permissions generated
by PolicyGenerator are to the desired permissions. Of the
436 total site-speciﬁc permissions needed across all tested
sites, 78 (18%) were created manually from scratch. Only 28
of the 100 sites needed any manually-created permissions,
and only ten sites required more than one. Based on this,
we believe the human effort required is low enough to be
reasonable for deployment by major sites.
s
e
t
i
S
googleadservices.com
Script Domain
twitter.com
doubleclick.net
moatads.com
2mdn.net
betrad.com
facebook.net
g
n
i
d
d
e
b
m
E
41
72
61
16
17
16
66
11
14
10
17
google-analytics.com
83
scorecardresearch.com 40
32
25
17
580
newrelic.com
quantserve.com
rubiconproject.com
chartbeat.com
doubleverify.com
adroll.com
g
n
i
d
e
e
N
s
e
t
i
S
s
n
o
i
s
s
i
m
r
e
P
36
57
48
7
6
5
20
2
2
1
1
4
1
0
0
0
207
e
g
a
t
n
e
c
r
e
P
88%
79%
79%
44%
35%
31%
30%
18%
14%
10%
6%
5%
3%
0%
0%
0%
36%
criteo.com
Total (24 domains)
Table I: Scripts needing site-speciﬁc permissions.
861861
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:03:40 UTC from IEEE Xplore.  Restrictions apply. 
8.2 Policy robustness
Since the policies are developed based on the script
behaviors observed for a small number of requests on a few
of the site’s pages, there is a risk that the scripts exhibit
different behaviors on different requests and generate too
many false alarms to be useful in practice. To understand
this, we study the policy convergence speed and alarm rates.
We also selected some suspicious alarms and discuss them in
Section 8.3. Section 8.4 considers several violation scenarios
due to major updates in host sites or third-party scripts.
Figure 5 show all the alarms ScriptInspector reported in
the experiment. Each site corresponds to a vertical coordi-
nate in the ﬁgure, and they are sorted according to the total
number of requests executed (due to different ending stage
of training phase and stoppage time between reported alarm
and manual inspection, the number of requests done averages
to 434 per site but varies from 246 to 579). The horizontal
axis represents the sequence number of requests, and alarms
are marked along this axis to show when they occurred. The
majority of alarms are issued at the beginning of the training
phase. The total number of alarms ScriptInspector reported
for all 100 sites is 301 over 40 days, making the average less
than three alarms per site per month. The highest number
of alarms is the 11 alarms reported from mlb.com. Of the
100 test sites, 28 issued no alarms at all, which means they
do not need site-speciﬁc policies. Policies of more than half
(57) of the 100 sites converge within two policy revisions,
and 83 sites converge within six policy revisions.
Training phase duration. A longer-lasting training phase
observes more behavior but also requires more time and
effort. Figure 6 shows the relationship between training
phase duration and alarm rates. Setting the training phase
to conclude after executing 177 requests without an alarm
will yield 10% of the total alarms. This number is 20%
for 114 requests, and 70% for 80 requests. Based on this,
we conclude that ScriptInspector has observed most relevant
behavior after 200 alarm-free requests and suggest using this
for the convergence threshold after which a learned policy
would be transitions to deployment.
Reasons for alarms. We manually examined all the alarms.
(114, 80%) 
(177, 90%) 
100%
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
0
100
200
300
400
500
600
Figure 6: Training phase duration vs. Alarm rates
862862
Violations can be roughly classiﬁed into two general cat-
egories, with a few exceptional cases. The most common
reason for a violating record (173 out of 301) is that a
new type of advertisement shows up which was not seen
in previous requests. For example, skyscraper (long and
vertical) ads are only shown on a speciﬁc part of the site,
whereas other parts show a banner (long and horizontal) ad.
The second category is because of social network widgets
(93 out of 301). A common scenario is that news sites