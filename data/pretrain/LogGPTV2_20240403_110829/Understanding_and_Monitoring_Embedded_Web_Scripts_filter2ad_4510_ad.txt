### Optimized Text

#### XPath Selector and Node Access
The XPath selector `//DIV[@class='ad']` is used to target a specific node with the class 'ad'. However, if another node with the same class is not accessed, the threshold for the number of allowed matches can be increased. For instance, raising the threshold to 2 allows the selector to match up to twice the number of accessed nodes. This adjustment can improve the permission's effectiveness.

However, increasing the threshold may lead to overly broad permissions. For example, if all advertisement content is injected into borderless `DIV` frames, the selector `//DIV[@frameborder='0']` could be proposed, but it might be too broad and match other nodes containing sensitive information. To mitigate this, the PolicyGenerator typically gives more weight to attributes like `class` and `id`, proposing them more frequently. If an overly broad permission is generated, the administrator should manually review the DOM structure and identify more specific identifiers from parent or child nodes to refine the permission, such as `//DIV[@class='ad']`.

#### Visualizer and Permission Adjustment
After modifying a permission, the Visualizer highlights the node collections that match the adjusted permission. The site administrator can then examine these highlighted nodes to determine if the new permission is appropriate.

#### Over-Emphasis on Attributes
Another common issue is when the PolicyGenerator over-emphasizes certain attributes. For example, all ad placeholders on cnet.com have a `data-ad` attribute, making it a good descriptor for site-specific permissions. However, because the PolicyGenerator favors `id` and `class` attributes, it may generate complex and meaningless policies across different pages. In such cases, the administrator should manually adjust the policy to use more relevant attributes.

#### Site-Specific Policy Examples
**Ticketmaster.com:**
- **Google Ad Services (`googleadservices.com` & `doubleclick.net`):**
  - `//DIV[@class='gpt-ad-container']:AppendChild`
  - `//DIV[@class='gpt-ad-container']:getSize`
- **Facebook (`facebook.net`):**
  - `Send:ticketmaster.com`

These site-specific policies are necessary for three embedded scripts on Ticketmaster.com. The Facebook permission allows the script to send network requests back to the host domain, which is safe and intended by the site administrator. The Google ad services permissions allow the scripts to write to and read size information from nodes with the class `gpt-ad-container`.

**TheVerge.com:**
- `//DIV[@class='dfp ad']:document.write`

This permission matches ten nodes on the homepage, but only four are actually accessed. Upon closer inspection, it was confirmed that the additional six nodes do not contain sensitive content and are adjacent to advertisement nodes.

**Forbes.com and BuzzFeed.com:**
For these sites, obtaining meaningful and robust site-specific policies is challenging due to the lack of generalizable node selector patterns. For `omtrdc.net` scripts on `lowes.com`, which read and write all nodes on certain pages, whitelisting the problematic script domain as trusted is the best solution. This prevents frequent violations while allowing ScriptInspector to restrict other scripts' behavior.

#### Policy Evaluation
**8.1 Policy Size:**
- **Overview:**
  - Of the 100 tested sites, 72 required at least one site-specific permission.
  - Table I shows the number of sites requiring site-specific permissions for particular script domains, sorted by the fraction of sites needing such permissions.

- **Advertising Scripts:**
  - Many sites need site-specific permissions for advertising scripts (e.g., `doubleclick.net`, `googleadservices.com`), as they inject ads into different locations on different sites.
  - Scripts serving as beacons for Google Ad networks or those using conventions covered by the base policy do not need site-specific permissions.

- **Social Widgets:**
  - Social widgets (e.g., `twitter.com`, `facebook.net`) also require many site-specific permissions. Twitter's higher requirement is due to its more flexible content insertion behaviors compared to Facebook.

- **Analytics Scripts:**
  - Analytics scripts rarely require site-specific policies. For example, only four out of 83 sites embedding Google Analytics needed site-specific permissions.

- **Overall Permissions:**
  - A total of 436 site-specific permissions were added for all 100 sites, with an average of 6.1 permissions per site.
  - The highest number was for `mlb.com`, which needed 26 site-specific permissions.

- **Manual Effort:**
  - Only 78 (18%) of the 436 total site-specific permissions were created manually from scratch.
  - Only 28 of the 100 sites needed any manually-created permissions, and only ten sites required more than one.

**8.2 Policy Robustness:**
- **Policy Convergence:**
  - Policies are developed based on observed script behaviors for a small number of requests on a few pages. There is a risk of false alarms if scripts exhibit different behaviors.
  - Figure 5 shows the alarms reported by ScriptInspector. Most alarms occur at the beginning of the training phase, with an average of less than three alarms per site per month.
  - Policies of more than half (57) of the 100 sites converge within two revisions, and 83 sites converge within six revisions.

- **Training Phase Duration:**
  - A longer training phase observes more behavior but requires more time and effort.
  - Setting the training phase to conclude after 200 alarm-free requests is suggested as a convergence threshold.

- **Reasons for Alarms:**
  - The most common reason for alarms (173 out of 301) is the appearance of new types of advertisements.
  - The second category (93 out of 301) involves social network widgets, often seen on news sites.

By addressing these issues and refining the policies, the system can provide strong privacy and integrity for the websites.