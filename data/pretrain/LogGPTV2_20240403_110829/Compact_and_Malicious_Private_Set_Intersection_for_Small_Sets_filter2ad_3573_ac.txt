𝑚1 and 𝑚2 can be sent simultaneously (or in either order), and we
say that the key agreement protocol is one-round.
3.1 Security Properties
Different instantiations of our PSI protocol will require the fol-
lowing security properties of a key agreement protocol. Note that
Definition 3.4 and strongly uniform KA (SU-KA) [22] are similar,
but our definition is specialized to 1-round KA.
Party 1
𝑎 ← KA.R
𝑚1 = KA.msg1(𝑎)
Party 2
𝑚1
𝑏 ← KA.R
𝑚2 = KA.msg2(𝑏, 𝑚1)
output KA.key2(𝑏, 𝑚1)
output KA.key1(𝑎, 𝑚2)
Figure 3: Generic 2-round key agreement protocol
𝑚2
Definition 3.1. A KA scheme is correct if, when executed hon-
estly as shown in Figure 3, the two parties give identical output. In
other words, for all 𝑎, 𝑏 ∈ KA.R:
KA.key1(𝑎, KA.msg2(𝑏, KA.msg1(𝑎))) = KA.key2(𝑏, KA.msg1(𝑎))
Definition 3.2. A KA scheme is secure against an eavesdropper
if the following distributions are indistinguishable:
𝑎, 𝑏 ← KA.R
𝑚1 = KA.msg1(𝑎)
𝑚2 = KA.msg2(𝑏, 𝑚1)
𝑘 = KA.key2(𝑏, 𝑚1)
return (𝑚1, 𝑚2, 𝑘)
𝑎, 𝑏 ← KA.R
𝑚1 = KA.msg1(𝑎)
𝑚2 = KA.msg2(𝑏, 𝑚1)
𝑘 ← KA.K
return (𝑚1, 𝑚2, 𝑘)
Definition 3.3. A KA scheme is non-malleable if it is secure
(in the sense of Definition 3.2) against an eavesdropper that has
oracle access to KA.key1(𝑎, ·), provided the eavesdropper never
queries the oracle on 𝑚2. Formally, the following distributions are
indistinguishable, for every PPT A that never queries its oracle on
input 𝑚2:
𝑎, 𝑏 ← KA.R
𝑎, 𝑏 ← KA.R
𝑚1 = KA.msg1(𝑎)
𝑚1 = KA.msg1(𝑎)
𝑚2 = KA.msg2(𝑏, 𝑚1)
𝑚2 = KA.msg2(𝑏, 𝑚1)
𝑘 = KA.key2(𝑏, 𝑚1)
𝑘 ← KA.K
return AKA.key1(𝑎,·)(𝑚1, 𝑚2, 𝑘)
return AKA.key1(𝑎,·)(𝑚1, 𝑚2, 𝑘)
Definition 3.4. A KA scheme has pseudorandom second mes-
sages if 𝑚2 is indistinguishable from random, even to someone
who chooses 𝑚1 adversarially. Formally, the following distributions
are indistinguishable for all PPT A:
(𝑣𝑖𝑒𝑤,(cid:101)𝑚1) ← A
𝑚2 = KA.msg2(𝑏,(cid:101)𝑚1)
𝑏 ← KA.R
return (𝑣𝑖𝑒𝑤, 𝑚2)
(𝑣𝑖𝑒𝑤,(cid:101)𝑚1) ← A
𝑚2 ← KA.M
return (𝑣𝑖𝑒𝑤, 𝑚2)
3.2 Diffie-Hellman Instantiation
The classic Diffie-Hellman key agreement protocol is a one-round
KA protocol (meaning that the two messages can be sent simulta-
neously). It is parameterized by a cyclic group G = ⟨𝑔⟩ of order 𝑞,
and defined as:
• KA.R = Z𝑞 (space of private randomness)
• KA.M = G (space of second party’s protocol messages)
• KA.msg1(𝑎) = 𝑔𝑎
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1170CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Mike Rosulek and Ni Trieu
• KA.msg2(𝑏) = 𝑔𝑏
In this work we consider the “hashed” variant of DH which is secure
under the computational Diffie-Hellman (CDH) assumption in the
random oracle model. Let 𝐻 : G → {0, 1}ℓ be a random oracle,
then:
• KA.K = {0, 1}ℓ (space of output keys)
• KA.key1(𝑎, 𝑔𝑏) = 𝐻((𝑔𝑏)𝑎)
• KA.key2(𝑏, 𝑔𝑎) = 𝐻((𝑔𝑎)𝑏)
Elligator DHKA. Modern applications of DHKA use elliptic curves
for the underlying cyclic group, due to their compact size (e.g.,
group elements with representations roughly 2𝜅 bits, for 𝜅 bits of
security). However, encodings of elliptic curve elements are rather
conspicuous, and can easily be distinguished from uniformly dis-
tributed strings. Our PSI protocols require the KA protocol messages
(specifically, 𝑚2) to be pseudorandom as strings.
In [6], Bernstein et al. explicitly consider the question of encoding
elliptic curve elements so that the resulting Diffie-Hellman protocol
has pseudorandom messages (viewed as strings). Formally, they
define an encoding mechanism called elligator with the following
properties:
• There are efficient encoding/decoding functions dec, enc which
are inverses, where im(enc) ⊆ {0, 1}𝑡 is a set of strings and
im(dec) ⊆ E is a subset of elliptic curve points.
• The size of im(enc) is very close to 2𝑡, so that the uniform dis-
tribution over encodings is indistinguishable from the uniform
distribution over {0, 1}𝑡
• The size of im(dec) is a constant fraction (typically close to 1/2)
• It is possible to efficiently test for membership in im(enc) (and
of the size of the elliptic curve.
hence also in im(dec)).
After defining such an elligator encoding method for Edwards
curves, Bernstein et al. propose to modify Diffie-Hellman key agree-
ment as follows:
• KA.R = {𝑟 ∈ Z𝑞 | 𝑔𝑟 ∈ im(dec)}.
• KA.M = {0, 1}𝑡
• KA.msg1(𝑎) = enc(𝑔𝑎)
• KA.msg2(𝑏) = enc(𝑔𝑏)
• KA.key1(𝑎, 𝑠𝑏) = 𝐻(dec(𝑠𝑏)𝑎)
• KA.key2(𝑏, 𝑠𝑎) = 𝐻(dec(𝑠𝑎)𝑏)
In other words, the parties condition their randomness to always
sample a point in the “elligator subset” im(dec) of the curve. In prac-
tice, each party would repeatedly sample an exponent 𝑟 ← Z𝑞 and
retry until finding one in the elligator subset. Since |im(dec)|/|E| is
constant, only a constant number of trials is needed before success-
fully hitting im(dec). Furthermore, the concrete security of DHKA
is degraded by only a small constant factor.
Due to the desired properties of the elligator encoding, the pro-
tocol messages are uniform in im(enc) and hence pseudorandom
in {0, 1}𝑡.
Security properties. The security of hashed DHKA against an eaves-
dropper (Definition 3.2) is standard and follows from the CDH
assumption.
The “pseudorandom second messages” property (Definition 3.4)
of the elligator-DHKA protocol follows from the properties of el-
ligator discussed above. Note that in DHKA, 𝑚2 doesn’t depend
on 𝑚1, so the adversary’s ability to choose 𝑚1 in Definition 3.4 is
irrelevant.
Finally, the “non-malleable” property (Definition 3.3) of hashed
DHKA is equivalent to the oracle DH (ODH) assumption proposed
by Abdalla, Bellare, and Rogaway [2]. Roughly speaking, the ODH
assumption is that 𝑔𝑎, 𝑔𝑏, 𝐻(𝑔𝑎𝑏) is indistinguishable from random
in the presence of an oracle for 𝑋 ↦→ 𝐻(𝑋 𝑎), as long as the distin-
guisher doesn’t query that oracle on 𝑔𝑏. Here 𝐻 is the hash function
/ random oracle used in hashed DHKA. In [2] it is shown that the
ODH assumption holds in the generic group model when 𝐻 is a
random oracle.
4 MALICIOUS PSI FROM KEY AGREEMENT
In this section we present our main result, a malicious 2-party PSI
protocol. Our protocol requires the following building blocks:
• A 2-round KA protocol KA. Recall that KA.M is the space of
possible protocol messages. We require KA.M = F for some finite
field F, and that the KA protocol has pseudorandom messages in
this field. We also require the KA protocol to be non-malleable
in the sense of Definition 3.3.
• Parties have oracle access to an ideal permutation Π, Π−1 defined
over the same field F. We write Π± to refer to the two functions
Π, Π−1 collectively. Parties also have access to random oracles
𝐻1, 𝐻2.
As a concrete example, we can choose hashed DHKA with elligator
encodings (see Section 3.2), whose protocol messages are pseudo-
random in {0, 1}ℓ, and then set F be to the field 𝐺𝐹(2ℓ). Under the
ODH assumption, hashed DHKA is also non-malleable. We give
more details about instantiating our protocol with Diffie-Hellman
in Section 5.
Protocol Overview. Following the overview given in Section 1, the
sender sends the first KA message. Intuitively, the receiver prepares
a polynomial 𝑃 such that 𝑃(𝑦𝑖) is a KA response that it chooses,
for each 𝑦𝑖 in its set. If KA responses are pseudorandom then the
polynomial 𝑃 hides the identities of the 𝑦𝑖-values.
However, for technical reasons we make the receiver prepare a
polynomial such that 𝑃(𝐻1(𝑦𝑖)) = Π−1(𝑚𝑖) where 𝐻1 is a random
oracle, Π is an ideal permutation, and 𝑚𝑖 is the KA response. The
presence of random oracle 𝐻1 helps the simulator extract from a
corrupt receiver (from observing its 𝐻1-queries). The presence of
the ideal permutation helps the simulator (against both corrupt
parties), by programming Π to output KA messages chosen by the
simulator.
Finally, the sender can interpret Π(𝑃(𝐻1(𝑥𝑖))) as a KA response,
for each 𝑥𝑖 in its set, and compute the corresponding KA output
𝑘𝑖. For each 𝑥𝑖, the sender sends 𝐻2(𝑥𝑖, 𝑘𝑖) to the receiver. The
presence of this random oracle again helps the simulator extract
from a corrupt sender.
The protocol is described formally in Figure 4. interpolF denotes
polynomial interpolation over field F, as discussed in Section 2.3.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1171Compact and Malicious Private Set Intersection for Small Sets
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Parameters: finite field F
KA protocol KA with KA.M = F and |KA.K| ≥ 2𝜅
ideal permutation Π, Π−1 : F → F
random oracles 𝐻1 : {0, 1}∗ → F,
𝐻2 : {0, 1}∗ × F → {0, 1}2𝜅
Receiver
𝑌 = {𝑦1, . . . , 𝑦𝑛} ⊆ {0, 1}∗
Sender
𝑋 = {𝑥1, . . . , 𝑥𝑛} ⊆ {0, 1}∗
1. 𝑎 ← KA.R
2. 𝑚 = KA.msg1(𝑎)
𝑚
3.
4.
𝑃
for 𝑖 ∈ [𝑛]:
𝑏𝑖 ← KA.R
𝑚′
𝑖 = KA.msg2(𝑏𝑖, 𝑚)
𝑓𝑖 = Π−1(𝑚′
𝑖)
𝑃 = interpolF
(cid:16){(𝐻1(𝑦𝑖), 𝑓𝑖) | 𝑦𝑖 ∈ 𝑌}(cid:17)
(abort if deg(𝑃) < 1)
5. for 𝑖 ∈ [𝑛]:
𝑘𝑖 = KA.key1(𝑎, Π(𝑃(𝐻1(𝑥𝑖))))
𝑘′
𝑖 = 𝐻2(𝑥𝑖, 𝑘𝑖)
1, . . . , 𝑘′
𝑛} (shuffled)
𝐾
6. 𝐾 = {𝑘′
output(cid:110)𝑦𝑖
(cid:12)(cid:12)(cid:12) 𝐻2
(cid:16)𝑦𝑖,KA.key2(𝑏𝑖, 𝑚)(cid:17) ∈ 𝐾(cid:111)
7.
Figure 4: Our malicious PSI protocol.
Lemma 4.1. The protocol of Figure 4 is UC-secure against a mali-
cious sender, if KA has pseudorandom messages (Definition 3.4), Π±
is an ideal permutation, and 𝐻2 is a random oracle.
Before giving the proof, we first sketch the main idea of the
simulator. When the simulator sees the set 𝐾 provided by the ad-
versary, it needs to extract a set of items that “explains” the effect
of 𝐾 on the honest party. The elements of 𝐾 are supposed to have
the form 𝐻2(𝑥𝑖, 𝑘𝑖), where 𝑘𝑖 is the “correct” KA output for item
𝑥𝑖. The simulator observes all queries to 𝐻2, so it can see which
𝐻2-outputs are placed into 𝐾 — but how can the simulator check
that some 𝑘𝑖 is the “correct” KA output corresponding to item 𝑥𝑖?
To do this, we let the simulator program Π so that every output of
Π is a KA message for which it knows the randomness. Now for
any 𝑥, the simulator can compute the corresponding KA output,
using the KA randomness it associates with Π(𝑃(𝐻1(𝑥))).
Proof. We first describe the behavior of the simulator.
• The simulator honestly plays the role of random oracle 𝐻2. For ev-
ery query 𝐻2(𝑥, 𝑘) made by the adversary, the simulator records
the input-output tuple (𝑥, 𝑘, 𝐻2(𝑥, 𝑘)) in a set O2.
• For every query of the form Π(𝑓 ) made after the message 𝑚 is
sent, the simulator chooses a random 𝑏 𝑓 ← KA.R and simulates
KA.msg2(𝑏 𝑓 , 𝑚) as the output of Π(𝑓 ).
• In step 4, the simulator sends a uniform polynomial 𝑃.
• Upon receiving 𝐾 in step 6, the simulator defines the set
˜𝑋 = {𝑥 | ∃𝑘′ :(cid:16)𝑥, KA.key2(𝑏𝑃 (𝐻1(𝑥)), 𝑚), 𝑘′(cid:17) ∈ O2 and 𝑘′ ∈ 𝐾}
and sends ˜𝑋 to the ideal PSI functionality (which causes the
honest receiver to obtain output ˜𝑋 ∩ 𝑌).
We prove that this simulation is indistinguishable from the real
interation via the following sequence of hybrids.
Hybrid 0: The real interaction, with the receiver running honestly
with input 𝑌 and giving its output to the environment according to
the protocol specification.
Hybrid 1: Same as the previous hybrid, except for how Π± is
simulated. A query to Π (resp. Π−1) is fresh if it was never made
before, and its value is not determined by previous queries to Π−1
(resp. Π) and the fact that Π/Π−1 are inverses. In this hybrid, all
fresh queries (by either the adversary or honest party) to Π and Π−1
are answered with a uniformly random response. The interaction
aborts if this leads to Π or Π−1 repeating an output. This change is
indistinguishable from the standard permutation switching lemma.
Hybrid 2: Same as the previous hybrid, except for how 𝑃 is gen-
erated. In step 3, 𝑃 is generated by interpolating through points
of the form Π−1(KA.msg2(𝑏𝑖, 𝑚)). In this hybrid we abort if these
queries to Π−1 are not fresh — i.e., if KA.msg2(𝑏𝑖, 𝑚) previously
occurred as either an adversary’s query to Π−1 or as an output of
an adversary’s query to Π.
If the KA.msg2(𝑏𝑖, 𝑚) terms were independently and uniformly
random, then this abort would happen with probability bounded by
𝑛𝑞/|F|, when the adversary makes 𝑞 oracle queries. By the pseudo-
random property of the KA scheme, each KA.msg2(𝑏𝑖, 𝑚) is indistin-
guishable from random, so the abort probability is negligibly close
to 𝑛𝑞/|F|. Either way, the probability is negligible, so the hybrids
are indistinguishable.
Now conditioned on not aborting, we have that each Π−1(KA.msg2(· · ·))
is a fresh and uniform value. Hence, 𝑃 is distributed as a uniform
polynomial, independent of the 𝑦𝑖 values. Then this interaction is
identical to one in which we first choose a uniform polynomial 𝑃
and then later program Π(𝑃(𝐻1(𝑦𝑖))) = KA.msg2(𝑏𝑖, 𝑚) for each
𝑦𝑖 ∈ 𝑌 (aborting if Π is already programmed on this point).
Hybrid 3: Same as the previous hybrid, except for how Π is simu-
lated. For every fresh query Π(𝑓 ) made after the adversary sends 𝑚,
sample 𝑏 𝑓 ← KA.R and respond with KA.msg2(𝑏 𝑓 , 𝑚) (instead of
responding with a uniform result). This change is indistinguishable
by the pseudorandomness property of KA.
Note that we have already been simulating Π(𝑃(𝐻1(𝑦𝑖))) in this
way for 𝑦𝑖 ∈ 𝑌, but with different variable names (randomness 𝑏𝑖
rather than 𝑏 𝑓 for 𝑓 = 𝑃(𝐻1(𝑦𝑖))). If we rename randomness 𝑏𝑖 (for
𝑦𝑖 ∈ 𝑌) to 𝑏𝑃 (𝐻1(𝑦𝑖)) then we program Π in the same way for all
inputs, with no special case for the elements of 𝑌. In doing so, the
honest party’s output is computed via:
(cid:16)𝑦𝑖, KA.key2(𝑏𝑃 (𝐻1(𝑦𝑖)), 𝑚)(cid:17) ∈ 𝐾}
{𝑦𝑖 ∈ 𝑌 | 𝐻2
Hybrid 4: The honest receiver queries 𝐻2 to determine its final
output (in the expression above). In this hybrid we abort if one of
those 𝐻2 queries is fresh (meaning that the adversary did not make
that query) and yet the result is in 𝐾. The probability of a fresh
query’s output being an element of 𝐾 is |𝐾|/|F| = 𝑛/|F|, which is
negligible. Therefore this change is indistinguishable.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1172CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Mike Rosulek and Ni Trieu
Suppose the final hybrid maintains the list O2 as described earlier
— i.e., (𝑥, 𝑘, 𝑘′) ∈ O2 means that the adversary queried 𝐻2(𝑥, 𝑘) and
got a result 𝑘′. Since the receiver only “recognizes” values that the
adversary has already queried to 𝐻2, this final hybrid is identical
to one in which the receiver’s output is computed as:
{𝑦𝑖 ∈ 𝑌 | ∃𝑘′ :(cid:16)𝑦𝑖, KA.key2(𝑏𝑃 (𝐻1(𝑦𝑖)), 𝑚), 𝑘′(cid:17) ∈ O2 and 𝑘′ ∈ 𝐾}
𝑌 ∩ {𝑥 | ∃𝑘′ :(cid:16)𝑥, KA.key2(𝑏𝑃 (𝐻1(𝑥)), 𝑚), 𝑘′(cid:17) ∈ O2 and 𝑘′ ∈ 𝐾}
(cid:124)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:123)(cid:122)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:125)
But this is logically equivalent to:
˜𝑋
Here ˜𝑋 is the set that the simulator can define. Hence this hybrid
is identical to the ideal interaction involving the simulator defined
earlier.
□
Lemma 4.2. The protocol of Figure 4 is UC-secure against a ma-
licious receiver, if KA is non-malleable (Definition 3.3), |KA.K| ≥ 2𝜅,