# Towards Scalable SDN Switches: Enabling Faster Flow Table Entries Installation

**Authors:** Roberto Bifulco and Anton Matsiuk  
**Affiliation:** NEC Laboratories Europe, Germany – E-mail: @neclab.eu

## Abstract
Software-Defined Networking (SDN) applications impose new operational requirements on switching hardware, revealing strict constraints in current devices. One such constraint is the large flow table entries installation time, which limits the applicability of hardware SDN switches, especially in reactive control plane scenarios. This performance limitation stems from the use of Ternary Content Addressable Memory (TCAM) in current ASICs, which, while providing fast lookups, has slow write operations. We propose ShadowSwitch (sSw), an OpenFlow switch prototype that combines software and hardware forwarders to reduce flow table entry installation time. Our approach leverages the fast update capabilities of software tables and the high throughput of TCAM-based hardware tables, ensuring correct priority ordering through a combination of software updates and selective deletions from hardware.

## 1. Introduction
SDN applications operate switching hardware in novel ways, uncovering limitations in current devices. The significant flow table entry installation time is a major constraint, particularly for reactive control plane applications. This performance issue arises from the use of TCAM in current ASICs, which, although enabling fast and flexible lookups, has slow write operations. Additionally, implementing flexible lookups often requires writing multiple entries in a specific order, further increasing installation time.

Inspired by previous work suggesting the combination of software and hardware forwarders [2], and noting the trend of integrating powerful CPUs into commodity white box switches, we propose a hybrid software-hardware switch, ShadowSwitch (sSw). This design aims to reduce flow table entry installation time and complements existing work that uses similar hybrid architectures to increase switch flow table size [2, 1].

ShadowSwitch is based on two key observations:
1. Software tables can be updated very quickly, so forwarding table updates are initially performed in software.
2. Partially overlapping entries can disrupt forwarding decisions, as hardware entries always have higher priority than software entries. To maintain correct priority ordering, sSw may delete entries from the hardware tables, which is generally faster than adding them.

## 2. ShadowSwitch Architecture
The sSw architecture, shown in Figure 1, introduces a high-performance software switching layer (SwSw) in the switch's fast path. The SwSw runs on a general-purpose system with a CPU, SRAM caches, DRAM central memory, and a high-speed system bus. The ShadowSwitch Logic (sSwLogic) manages the flow table entries (FTEs) installation in the slow path.

### 2.1. Flow Mod Handling
An OpenFlow `flow_mod` message is used to install, delete, or modify FTEs. In sSw, new FTEs are first installed in the SwSw, where the installation time is typically sub-millisecond and constant. Once the FTE is placed in the SwSw, packet forwarding begins in the fast path.

If the HwSw contains lower-priority FTEs that overlap with the newly installed FTE, sSwLogic performs additional actions. It either deletes the overlapping FTEs from the HwSw or installs the new FTE in the HwSw. Deletion is preferred because it is generally faster and simpler. However, if deleting FTEs would cause excessive load on the SwSw, sSw falls back to installing the new FTE in the HwSw.

When a `flow_mod` message requests FTE deletion, sSwLogic deletes the FTE from the software switching layer or both layers if the FTE was moved to hardware.

## 3. Prototype and Evaluation
We implemented a sSw prototype using a commercial hardware OpenFlow switch (HwSw) and an OpenvSwitch (OVS) instance running on a HP DL380G7 server with an Intel Xeon L5640 (6 cores @ 2.26 GHz). The server is connected to the HwSw via the switch’s control port and two 1Gbit data plane ports. The sSwLogic, implemented as a user-level application, acts as a proxy between the switches and an OpenFlow controller (POX) running on the same server. A second server, connected to two switch ports, serves as a traffic generator and receiver.

### 3.1. Flow Mod Performance
We measured the FTE installation performance of the hardware switch with different FTE priority patterns. As shown in Figure 2, the FTE installation time increases almost exponentially with the number of already installed entries when FTEs are installed in ascending priority order, indicating TCAM reordering. When FTEs have the same priorities or are installed in descending priority order, the installation time increases linearly. FTE deletion time is much lower and does not depend on FTE priorities.

Our sSw prototype shows a constant FTE installation time, improving hardware switch performance by 1 to 3 orders of magnitude. If there are dependencies, sSw deletes the dependent FTEs from the HwSw, and the installation time grows linearly with the number of FTEs deleted. As shown in Figure 3, deleting several FTEs is generally faster than adding a single higher-priority FTE to the HwSw. If deletion is not possible, sSw falls back to the hardware switch performance.

### 3.2. Reactive Flow Installation
In a second test, we measured the installation delay of 10,000 network flows handled by a switch port using a reactive logic. The POX controller installs a new FTE for each new flow. All FTEs have the same priority and define non-overlapping flows, generated at a rate of 1,000 flows per second over 10 seconds.

Figure 4 shows the measured flow installation delays. The hardware switch drops about 75% of the 10,000 generated flows, with installation delays ranging from 5 ms to 1.1 s. Using sSw, no flows are dropped, and 95% of the flows have an installation delay within 22 ms. Variations in delay (5 ms-20 ms) are likely due to our testbed setup.

## 4. Future Work
ShadowSwitch demonstrates that a fast software switching layer can reduce flow table entry installation time. Future work will evaluate the system behavior under varying parameters and develop smart algorithms to select which entries should be moved to the hardware flow table.

## 5. Acknowledgment
This work was partly funded by the EU in the context of the "BEBA" project (Grant Agreement: 644122).

## 6. References
[1] N. Katta, J. Rexford, and D. Walker. Infinite CacheFlow in software-defined networks. Proceedings of ACM SIGCOMM HotSDN, 2014.

[2] N. Sarrar, S. Uhlig, A. Feldmann, R. Sherwood, and X. Huang. Leveraging Zipf’s law for traffic offloading. SIGCOMM Comput. Commun. Rev., 2012.

---

**Figures:**
- **Figure 1:** High-level ShadowSwitch design.
- **Figure 2:** Cumulative execution time for forwarding table updates when installing/deleting a variable number of entries.
- **Figure 3:** Time to delete a variable number of FTEs compared to the time to install a single FTE.
- **Figure 4:** Flow installation delay (in log scale).