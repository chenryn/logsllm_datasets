# APP加固与脱壳攻击测试

随着技术的进步，当前的APP加固方案已经相当成熟。市面上大部分反编译工具和脱壳工具已被有效屏蔽。然而，针对各厂商的加固措施，仍可以通过人工逆向分析、突破反调试保护等手段来获取原始Dex代码。

### 脱壳攻击测试示例

**案例一：**
- **步骤**：
  1. 以调试模式启动已加固的应用程序。
  2. 在SO代码解密函数处设置断点。
  3. 解密`jni_onload`函数，并在其上设置新的断点。
  4. 在`mmap`函数处设置断点，然后dump解密后的原始Dex文件。

**案例二：**
- **步骤**：
  1. 同样以调试模式运行加固后的应用。
  2. 设置断点于`fgets`函数，通过逆向工程找到反调试的关键点。
  3. 强制修改这些关键点的返回值。
  4. 在`dvmdex`函数处设置断点，并dump即将加载的原始Dex内容。

---

## 对APP加固的思考

尽管存在被脱壳的风险，但对APP进行加固仍然是必要的。就像我们为住宅安装防盗门一样，虽然不能完全阻止盗窃行为，但它大大增加了入侵难度。同理，即使无法绝对防止所有攻击，高质量的加固服务也能显著提高应用程序的安全性。因此，选择一个高安全性的加固产品至关重要。

---

# 移动APP安全评估

移动应用程序的安全性评估通常涵盖以下十个方面：

1. 终端能力调用安全性
2. 终端资源访问控制
3. 数据传输安全
4. 键盘输入防护
5. Activity组件保护
6. 反逆向工程机制
7. 抗调试与注入能力
8. 防盗版策略
9. 敏感信息管理
10. 认证系统强度

---

## 安全检测工具及使用方法

| 检测项             | 工具                                            |
|------------------|-----------------------------------------------|
| 反编译              | Dex2jar, jd-gui, apktool                          |
| 反汇编与调试           | IDA Pro, Android_server                         |
| 二次打包             | Apk改之理, Androidkiller                        |
| 签名验证             | APKSign, 上上签                                 |
| 通信数据分析            | Tcpdump, Fiddler                                |
| 十六进制编辑           | WinHex, Ultraedit                               |
| 进程注入与Hook        | inject, hook                                    |
| 页面劫持             | hijack                                         |
| 敏感信息与本地数据处理      | DDMS, Root Explorer, SQLite Developer          |
| 截屏                | Screencap                                      |
| 脱壳                | Gdb, ZjDroid                                   |

---

## IDA调试技巧

### 附加调试

**前提条件**:
- 目标进程无防调试机制。
- 设备（手机）拥有ROOT权限。

**操作步骤**:
1. 将IDA目录下的`android_server`推送至手机的指定目录（例如：`data/`），必要时可更改文件名。
2. 如果推送失败，请尝试赋予目标目录写入权限（`chmod 777 data/`）。
3. 推送成功后，给予`android_server`执行权限（`chmod 777 android_server`）。
4. 建立端口转发（`adb forward tcp:23946 tcp:23946`）。
5. 启动IDA并选择`Debugger -> Attach -> RemoteArmLinux -> Android Debugger`。
6. 输入主机名（`Hostname=localhost`）和端口号（`Port=23946`）。
7. 选择目标进程名称，开始附加调试过程。

### 启动调试

**前提条件**:
- `ro.debuggable`属性值设为1（可通过`adb shell getprop ro.debuggable`命令查看）。
- 设备（手机）具备ROOT权限。

**操作步骤**:
[重复上述附加调试步骤，仅在第5步有所不同]
5. 使用ADB命令启动应用的特定页面（如`adb shell am start –D –n 包名/页面`），并通过DDMS开启调试会话。

### DEX文件调试

**前提条件**:
- `ro.debuggable`属性值设为1。
- 设备（手机）具备ROOT权限。

**操作步骤**:
1. 先将apk安装到手机上。
2. 在PC端解压缩apk包，用IDA打开其中的`classes.dex`文件并完成初步分析。
3. 在需要调试的位置设置断点（如`.MainActivity.onCreate`），按下F2键。
4. 从菜单中选择`Debugger -> Debugger options...`，设置具体选项。
5. 指定ADB路径，填写apk的包名和Activity，最后点击F9运行。如果一切正常，则会在刚设定的断点处暂停执行。

---

## APP安全专题

### 终端能力调用安全性

Android提供了丰富的SDK供开发者构建各种功能的应用。但是，为了访问某些系统资源或执行特定任务，应用必须请求相应的权限。这种开放性既方便了开发工作，也带来了潜在的安全风险——尤其是当权限被滥用时，可能导致用户隐私泄露等问题。

### 通信安全性

App与服务器之间的通信应当采用强加密协议（如HTTPS），并对服务器证书进行严格校验以避免中间人攻击（MITM）。未经过充分加密或缺乏证书验证机制的数据传输容易遭受拦截和篡改。

### 密码保护

许多银行类应用采用了自定义键盘来替代标准输入法，以此减少键盘监听攻击的可能性。然而，部分应用可能忽略了对截屏行为的防御，使得敏感信息仍然面临被非法获取的风险。

### 反逆向与反调试

通过对Dex文件进行整体加密或抽取核心逻辑进行独立加密等方式，可以有效阻碍恶意用户的逆向分析活动。同时，强化反调试机制也是抵御外部威胁的重要手段之一。

### 双因素认证

真正的双因素认证要求两个认证要素之间具有高度独立性，这样才能最大限度地降低被攻破的概率。但在某些情况下，如果两种认证方式都依赖于同一设备，则其安全性会大打折扣。

---

以上仅为部分内容摘要，更多关于移动应用安全的知识点及相关实践案例请参阅完整文档或加入我们的交流群（Q群号: 383345594）进行深入探讨。