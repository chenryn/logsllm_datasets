APP加固 – 脱壳攻击测试 
目前加固技术已日渐成熟，市面上的反编译工具，脱壳工具基本被屏
蔽，对于当前各厂商加固脱壳攻击只能通过人工逆向分析，突破反调试等
防护，截获原始dex代码 
以某应用为例，进行脱壳攻击测试: 
某加固应用１:以调试模式启动加固后的程序，下断点于SO代码解密
函数，解密jni_onload函数后，对其下断点，最后下断点于mmap函数
， dump解密后的原始dex 
某加固应用２:以调试模式启动加固后的程序，下断点于fgets函数，
以逆推方法找出判断反调试关键点，对其暴力修改返回值，下断dvmdex
函数， dump解密后准备加载的原始dex 
Your site here 
LOGO 
APP加固 – 脱壳攻击测试案例 
Your site here 
LOGO 
APP加固的疑惑? 
App采用加固(加壳)的最终目的是为了防止盗版、反编译、动
态调试以及恶意注入行为等，但经过脱壳攻击测试后也可证明，加
固后仍有被脱壳的风险，可能这个时候大家可能就有疑惑了，还有
必要进行加固吗?答案是肯定的，我们举个例子:我们的房子都会安
装防盗门，但全世界几乎每天都会有一些家庭失窃，但人们并没有
因为安装了防盗门还被小偷偷了东西，从此放弃安装防盗门，加固
其实就好比防盗门，并不能百分百保证不被脱壳，当然加固技术也
在不断的提高和更新，我们需要选择一款安全性高的加固产品. 
Your site here 
LOGO 
移动APP安全测评 
App安全测评项主要分为以下十项： 
 终端能力调用安全 
 终端资源访问安全 
 通信安全 
 键盘输入安全 
 Activity组件安全 
 反逆向安全 
 反调试反注入能力 
 反盗版能力 
 敏感信息安全 
 认证因素安全 
Your site here 
LOGO 
移动APP安全测评工具及使用 
检测项 
工具 
反编译 
Dex2jar、jd-gui、apktool 
反汇编与调试 
IDA pro、Android_server 
二次打包 
Apk改之理、Androidkiller 
签名（APKSign、上上签） 
通信数据分析 
Tcpdump、Fiddler 
十六进制 
WinHex、Ultraedit 
进程注入与hook 
inject、hook 
页面劫持 
hijack 
敏感信息与本地数据 
DDMS、Root Explorer、 
数据库（SQLite Developer） 
截屏 
Screencap 
脱壳 
Gdb、ZjDroid 
Your site here 
LOGO 
IDA调试之附加调试 
前提： 
1. 调试目标进程不具备防调试机制； 
2. 设备（手机）需ROOT权限。 
 调试步骤： 
① 把IDA目录下的android_server push到手机目录，如：data目录，
android_server可改名 
② Push失败时，可对data目录进行写操作（chmod 777 data） 
③ Push成功后，对android_server赋于执行权限（chmod 777 
android_server） 
④ 端口转发（adb forward tcp:23946 tcp:23946） 
⑤ 启动IDA—选择菜单Debugger—Attach—RemoteArmLinux—
AndroidDebugger 
⑥ 写入参数Hostname=localhost,Port=23946 
⑦ 选择目标进程名，进行附加调试 
Your site here 
LOGO 
IDA调试之启动调试 
前提： 
1. ro.debuggable值＝1（可用adb shell getprop ro.debuggable查看）； 
2. 设备（手机）需ROOT权限。 
调试步骤： 
① 把IDA目录下的android_server push到手机目录，如：data目录，
android_server可改名 
② Push失败时，可对data目录进行写操作（chmod 777 data） 
③ Push成功后，对android_server赋于执行权限（chmod 777 
android_server） 
④ 端口转发（adb forward tcp:23946 tcp:23946） 
⑤ 反编译APP（应用程序）启动页面（可用反编译工具查看）并启动该页面，如
adb shell am start –D –n 包名/页面 
⑥ 开启DDMS 
⑦ 启动IDA—选择菜单Debugger—Attach—RemoteArmLinux—
AndroidDebugger 
⑧ 写入参数Hostname=localhost,Port=23946 
⑨ 选择目标进程名，进行附加调试 
Your site here 
LOGO 
IDA调试之dex调试 
前提： 
1. ro.debuggable值＝1（可用adb shell getprop ro.debuggable查看）； 
2. 设备（手机）需ROOT权限。 
调试步骤： 
① 首先把apk安装到手机 
② 在电脑端把apk解压,用IDA打开解压后的classes.dex文件并完成分析(The in
itial autoanalysis has been finished.), 
③ 选择需要调试的断点进行F2下断,如下断在. MainActivity.onCreate 
④ 选择Debugger菜单下的Debugger options…里面的Set specific options选
择 
⑤ 设置adb路径,填写apk的package name和Acitivty,最后F9运行.正常的话断
在刚下的断点处. 
Your site here 
LOGO 
APP安全 – 终端能力调用安全检测 
      终端能力调用包括短信、彩信、通话、邮件、录音
、截屏、摄像头以及推送等 
      Android提供了丰富的SDK，开发人员可以根据开发Android
中的应用程序。而应用程序对Android系统资源的访问需要有相应
的访问权限，应用程序要想使用某种权限就必须进行明确申请，这
种开放性一方面为开发带来了便利，另一方面权限的滥用也会产生
很大的隐患，可能造成私人信息的泄漏等风险，如一款游戏app具
有通讯录访问权限 
Your site here 
LOGO 
APP安全 – 终端能力调用安全检测 
 Sms短信拦截部分代码 
Your site here 
LOGO 
APP安全 – 终端资源访问安全检测 
      终端资源主要包括通讯录、通话记录、位置信息、
终端基本信息、应用信息、系统权限、用户文件、收藏
夹、快捷方式、系统设置、系统资源以及无线外围接口
等 
 GPS位置获取部分代码 
Your site here 
LOGO 
APP安全 – 通信安全一 
  App通信安全，主要是指客户端与服务器通信过程中，采用的
什么协议，如：http简单加密、http安全加密、https加密，其中
，http简单加密容易被劫持或破解；当采用https协议，是否对服
务器证书进行校验，是否可导致中间人攻击风险。 
      上图引自红黑联盟网对于中间人攻击的基本原理图：由于客户端没有对服务端的证书进行验证，也就是没
有验证与其通信的服务端的身份，即客户端默认信任所有的服务端。利用这种信任，mitmproxy作为一个中
间人，中转了SSL/TLS的握手过程。所以实际上，与客户端通信的并不是服务端而是mitmproxy。
mitmproxy知道用于通信加密的对称密钥，可以对HTTPS的通信数据进行窃听：mitmproxy将自己的证书提
供给客户端，而客户端在不进行校验的情况下，信任并使用此证书对要传输的数据进行加密，之后再传给
mitmproxy。 
Your site here 
LOGO 
APP安全 – 通信安全二 
中间人攻击实例： 
  可通过Fiddler工具来模拟服务器与客户端进行通信，如果客
户端对服务器证书进行校验的话，模拟过程将会失败；但如果客户
端没有对服务器证书进行校验的话，模拟服务器过程就能通过。 
Your site here 
LOGO 
APP安全 – 密码安全 
以手机银行例，大多数银行采用自绘键盘代替系统键盘，防止
了系统键盘监听行为，但有些开发者忽略了截屏保护，以用户体验
来看，按下密码后会有”阴影”效果，能够使用截屏功能截获该密码
，如下图中通过截屏截获的密码 
Your site here 
LOGO 
APP安全 – 组件安全 
  有部分应用未对自身进程处于后台运行时提醒客户,可导致页
面钓鱼攻击风险，窃取用户敏感信息 
Your site here 
LOGO 
APP安全 – 反逆向安全一 
      逆向分析主要为dex是否能够反编译分析与so能够反汇编分析
，未加固app一般对dex采用代码混淆，而加固app目前大多使用
dex整体加密或方法代码抽取加密两种。 
Your site here 
LOGO 
APP安全 – 反逆向安全二 
      so则采用代码加密以及AOP技术。从静态的角度来看，加固
app均无法进行反编译与反汇编分析。 
Your site here 
LOGO 
APP安全 – 反调试反注入安全 
     大部分app开发者，通常情况下不会对app增加反调试反注入
防护功能，因此app具有被逆向分析、注入拦截、数据篡改、敏感
信息截获等风险。 
  当app采用加固方案，应当检测该app是否能够防止以ptrace
注入行为，检测加固后的app是否能够提高攻击者分析hook关键
点难度。 
Your site here 
LOGO 
APP安全 – 反盗版安全 
  大部分app开发者，通常情况下不会对app增加反盗版防护能
力，也有少数app采用了简单的反盗版防护，如在java层校验app
完整性或在c层校验app完整性，由于app并未具备反编译防护能
力或反汇编防护能力，因此简单的校验强度较弱，不能够保护app
二次打包风险。这就需要采用专业的app加固方案。 
Your site here 
LOGO 
APP安全 – 敏感信息安全一 
由于开发者的疏忽，具有敏感信息的调试信息开关忘记关闭，
导致发布版本应用造成敏感信息泄漏风险 
Your site here 
LOGO 
APP安全 – 敏感信息安全二 
少数应用对存储于本地的敏感数据未进行加密保存，可导致本
地敏感数据泄漏 
Your site here 
LOGO 
APP安全 – 敏感信息安全三 
一款未加固的APP,毫无疑问风险相当大，以手机银行app为例
，轻易截获用户敏感信息(登录密码) 
目前大多数手机银行app密码类敏感信息采用了C层加密处理
，常规风险:处理密码so库命名暴露了自身模块功能，同样的，密
码加密函数命名暴露了自身的功能，通过这两点可轻易分析并截获
密码明文 
实例: 
分析工具:IDA 
攻击方法:分析密码加密SO库以及加密函数，进行动态调试并
验证 
Your site here 
LOGO 
APP安全 – 密码风险案例 
案例一: 
Your site here 
LOGO 
APP安全 – 密码风险案例 
案例二: 
Your site here 
LOGO 
APP安全 – 密码风险案例 
案例三: 
Your site here 
LOGO 
APP安全 – 认证因素安全 
  双因素认证安全性取决于两个认证信息之间的独立性，越是相
互独立的越不容易被攻击截获。当我们使用pc网银时，验证信息
发往移动设备，这样就增加了攻击者截获的难度，使用Ｕ盾、动态
口令等设备都能满足双因素谁安全。 
  伪双因素认证存在于移动设备中，如用户在使用手机银行进行
支付操作时，该手机设备同时需要接收验证信息，这样就限制了短
信信息的独立性。 
Your site here 
LOGO 
APP安全 – 其它风险 
  由于每款app功能不一致，故风险也各有不同，除上述十项风
险以外，还会有其它一些风险问题，如业务风险、登录无限制、登
录数据重放、验证码重复使用、短信验证码随通信数据下发至客户
端、转账交易数据劫持等。 
Your site here 
LOGO 
Thank you ! 
交流Q群:383345594