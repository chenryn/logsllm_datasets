  * returns：返回值将是解析完毕的函数的实际加载地址
  * rtype：返回类型是int整型
​ 之后还有就是一些常用的辅助功能函数
    def is_symbol_hooked(self, symbol_name):
            """
            Check if a symbol is already hooked.
            :param str symbol_name: Name of the symbol.
            :return: True if the symbol can be resolved and is hooked, False otherwise.
            :rtype: bool
            """
            sym = self.loader.find_symbol(symbol_name)
            if sym is None:
                l.warning("Could not find symbol %s", symbol_name)
                return False
            hook_addr, _ = self.simos.prepare_function_symbol(symbol_name, basic_addr=sym.rebased_addr)
            return self.is_hooked(hook_addr)
    def unhook_symbol(self, symbol_name):
            """
            Remove the hook on a symbol.
            This function will fail if the symbol is provided by the extern object, as that would result in a state where
            analysis would be unable to cope with a call to this symbol.
            """
            sym = self.loader.find_symbol(symbol_name)
            if sym is None:
                l.warning("Could not find symbol %s", symbol_name)
                return False
            if sym.owner is self.loader._extern_object:
                l.warning("Refusing to unhook external symbol %s, replace it with another hook if you want to change it",
                          symbol_name)
                return False
            hook_addr, _ = self.simos.prepare_function_symbol(symbol_name, basic_addr=sym.rebased_addr)
            self.unhook(hook_addr)
            return True
    def rehook_symbol(self, new_address, symbol_name, stubs_on_sync):
            """
            Move the hook for a symbol to a specific address
            :param new_address: the new address that will trigger the SimProc execution
            :param symbol_name: the name of the symbol (f.i. strcmp )
            :return: None
            """
            new_sim_procedures = {}
            for key_address, simproc_obj in self._sim_procedures.items():
                # if we don't want stubs during the sync let's skip those, we will execute the real function.
                if not stubs_on_sync and simproc_obj.is_stub:
                    continue
                if simproc_obj.display_name == symbol_name:
                    new_sim_procedures[new_address] = simproc_obj
                else:
                    new_sim_procedures[key_address] = simproc_obj
            self._sim_procedures = new_sim_procedures
###  2.4 execute
​ 为符号执行提供的 API，十分方便。它被设计为在 hook 后执行，并将执行结果返回给模拟管理器
​ 主要是就为了Hook后符号执行还能征程运行，查看相关的状态，这个函数主要有三种不同的工作方式：
  * 当不带参数执行时，该函数从程序入口点开始
  * 当指定了参数 `state` 为一个 SimState 时，从该 state 开始
  * 另外，它还可以接受所有传递给 `project.factory.full_init_state` 的任意关键字参数
    def execute(self, *args, **kwargs):
            """
            This function is a symbolic execution helper in the simple style
            supported by triton and manticore. It designed to be run after
            setting up hooks (see Project.hook), in which the symbolic state
            can be checked.
            This function can be run in three different ways:
                - When run with no parameters, this function begins symbolic execution
                  from the entrypoint.
                - It can also be run with a "state" parameter specifying a SimState to
                  begin symbolic execution from.
                - Finally, it can accept any arbitrary keyword arguments, which are all
                  passed to project.factory.full_init_state.
            If symbolic execution finishes, this function returns the resulting
            simulation manager.
            """
            if args:
                state = args[0]
            else:
                state = self.factory.full_init_state(**kwargs)
            pg = self.factory.simulation_manager(state)
            self._executing = True
            return pg.run(until=lambda lpg: not self._executing)
###  2.5 load_shellcode
​ 主要是提供了可以根据一串原始字节码加载一个新的 Project功能
    def load_shellcode(shellcode, arch, start_offset=0, load_address=0, thumb=False, **kwargs):
        """
        Load a new project based on a snippet of assembly or bytecode.
        :param shellcode:       The data to load, as either a bytestring of instructions or a string of assembly text
        :param arch:            The name of the arch to use, or an archinfo class
        :param start_offset:    The offset into the data to start analysis (default 0)
        :param load_address:    The address to place the data in memory (default 0)
        :param thumb:           Whether this is ARM Thumb shellcode
        """
        if not isinstance(arch, archinfo.Arch):
            arch = archinfo.arch_from_id(arch)
        if type(shellcode) is str:
            shellcode = arch.asm(shellcode, load_address, thumb=thumb)
        if thumb:
            start_offset |= 1
        return Project(
                BytesIO(shellcode),
                main_opts={
                    'backend': 'blob',
                    'arch': arch,
                    'entry_point': start_offset,
                    'base_addr': load_address,
                },
            **kwargs
            )
​ 我们来看看参数：
  * shellcode：加载的数据
  * arch：架构
  * start_offset：分析的起始偏移量（默认0）
  * load_address：数据加载的内存地址 (默认0)
  * thumb：这个是否是ARM架构的Thumb模式下的代码，默认False
  * kwargs：同之前的解释
###  2.6 预告
​ 我们分析了一个angr项目的加载过程，我们不难看出其中基石的关键是CLE，我们接下来将前往CLE的实现源码一探究竟
## 三、番外：Factory简介
angr中最重要的Factory组件，factory有几个方便的构造函数，用于经常使用的常见对象
这里建议安装一个monkeyhex 库，这个库可以使得自动十六进制格式化数值结果，便于内存分析，在需要的时候导入即可
###  3.1 Block
Blocks：`project.factory.block()`用于通过给定的地址提取一个基本块（basic
block）的代码，angr以基本块为单位来分析代码
  * `block = proj.factory.block(proj.entry)`：从程序的入口处提取一个代码块
  * `block.pp()`：打印反汇编代码
  * `block`：查看block对象
  * `block.instructions`：块里有多少条指令
  * `block.instruction_addrs`：块里所有指令对应的地址
  * `block.capstone`：capstone 反汇编
  * `block.vex`：VEX IRSB
下面这些指令在具体实践中的结果就是：
    >>> block = proj.factory.block(proj.entry)
    >>> block.pp()
    0x401050:    endbr64    
    0x401054:    xor    ebp, ebp
    0x401056:    mov    r9, rdx
    0x401059:    pop    rsi
    0x40105a:    mov    rdx, rsp
    0x40105d:    and    rsp, 0xfffffffffffffff0
    0x401061:    push    rax
    0x401062:    push    rsp
    0x401063:    mov    r8, 0x4011d0
    0x40106a:    mov    rcx, 0x401160
    0x401071:    mov    rdi, 0x401136
    0x401078:    call    qword ptr [rip + 0x2f72]
    >>> block
    >>> block.instructions
    12
    >>> block.instruction_addrs
    [4198480, 4198484, 4198486, 4198489, 4198490, 4198493, 4198497, 4198498, 4198499, 4198506, 4198513, 4198520]
    >>> block.capstone
    >>> block.vex
    IRSB > at 0x401050
> block的概念是： **只有一个入口和一个出口的一段代码，入口就是其中的第一个语句，出口就是其中的最后一个语句** ，block
> **之间的联通叫做edge**
###  3.2 States
States：：Project对象只代表程序的一个“初始化镜像”，即Project
对象仅表示程序一开始的样子。而当我们再使用angr做执行操作时，实际上操作的是一个表示模拟的程序状态（simulated program
state）的特殊对象SimState。SimState代表程序的一个实例镜像，模拟执行某个时刻的状态
  * `state =proj.factory.entry_state()`：程序的入口点的状态
  * `state`：查看state对象
  * `state.regs.eip`：访问eip，获取当前指令的地址
  * `state.regs.eax`：访问eax寄存器
指令在具体实践中的结果就是：
    >>> state = proj.factory.entry_state()
    >>> state
    >>> state.regs.rip
    >>> state.regs.rax
在这之前我们在CTF的应用中说过angr中使用的数不是传统的Python整数，而是bitvector（位向量）。可以把bitvector看成是一串比特序列表示的整数，angr使用bitvector来表示CPU数据。每个bitvector都有一个.length属性来描述它的位宽。angr中也提供了相关的方法来进行Python整数和位向量的转换
现在我们就来试一下转换rip的值
    >>> hex(state.solver.eval(state.regs.rip))
    '0x401050'
我们也可以自己生成位向量
    >>> bv = state.solver.BVV(2021, 32)
    >>> bv
    >>> bv.length
    32
我们可以把bitvector存储到寄存器和内存中；或者直接存储一个python整数，它会进行自动转换，把python整数转换为合适大小的bitvector
    >>> state.regs.rsi = state.solver.BVV(3, 32)
    >>> state.regs.rsi
    >>> state.mem[0x1000].long = 66
    >>> state.mem[0x1000].long.resolved
    >>> state.mem[0x1000].long.concrete
    66
对于mem接口：
  * 使用`array[index]`的形式来指定地址
  * 使用`.`来指定内存需要把数据解释成什么样的类型（char, short, int, long, size_t, uint8_t, uint16_t…）
  * 存储一个值，这个值可以为bitvector或者python整数
  * 使用`.resolved` 来将数据输出为bitvector
  * 使用`.concrete` 来将数据输出为python整数
###  3.3 Simulation Managers
Simulation Manager（仿真管理器）在angr中是对state进行操作的基本接口
首先，我们创建一个simulation manager。构造函数可以接受一个state或者state列表。单个 Simulation Manager
可以包含多个存放state的 stash， 默认的stash 是 `active stash`，是使用我们传入的 `state`初始化的
  * `simgr = proj.factory.simulation_manager(state)`：用构造函数进行创建
  * `simgr`：查看simgr对象
  * `simgr.active`：查看active，也就是目前模拟执行到的代码（基本块）内存地址
  * `simgr.step()`： 一个基本块的符号执行
  * `simgr.active[0].regs.eip`：查看从我们传入的初始state后第一次执行step后的active
指令在具体实践中的结果就是：
    >>> state = proj.factory.entry_state()
    >>> simgr = proj.factory.simulation_manager(state)
    >>> simgr
    >>> simgr.active
    []
    >>> simgr.step()
    >>> simgr.active
    []
    >>> simgr.active[0].regs.rip
    >>> state.regs.rip
## 四、参考资料
在此感谢各位作者或者译者的辛苦付出，特此感谢
  * [angr源码分析——angr.Project类](https://blog.csdn.net/doudoudouzoule/article/details/79336706)
  * [angr 系列教程(一）核心概念及模块解读](https://xz.aliyun.com/t/7117)
  * [Angr文档-顶层接口](https://docs.angr.io/core-concepts/toplevel#basic-properties)
  * [angr 源码分析](https://www.dazhuanlan.com/2020/01/17/5e210fb912a00/#project-%E7%B1%BB)
  * [angr学习（一）](https://bbs.pediy.com/thread-264775.htm)