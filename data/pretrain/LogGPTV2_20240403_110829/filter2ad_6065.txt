title:Scaling Out the Performance of Service Monitoring Applications with
BlockMon
author:Davide Simoncelli and
Maurizio Dusi and
Francesco Gringoli and
Saverio Niccolini
Scaling Out the Performance
of Service Monitoring Applications
with BlockMon
Davide Simoncelli1, Maurizio Dusi2,
Francesco Gringoli1, and Saverio Niccolini2,(cid:2)
1 University of Brescia – CNIT, Brescia, Italy
PI:EMAIL, PI:EMAIL
2 NEC Laboratories Europe, Heidelberg, Germany
{maurizio.dusi,saverio.niccolini}@neclab.eu
Abstract. To cope with real-time data analysis as the amount of data
being exchanged over the network increases, an idea is to re-design al-
gorithms originally implemented on the monitoring probe to work in a
distributed manner over a stream-processing platform. In this paper we
show preliminary performance analysis of a Twitter trending algorithm
when running over BlockMon, an open-source monitoring platform which
we extended to run distributed data-analytics algorithms: we show that
it performs up to 23.5x and 34.2x faster on BlockMon than on Storm
and Apache S4 respectively, two emerging stream-processing platforms.
1
Introduction
Due to the tremendous growth of data exchanged on the Internet, the traditional
(monolytic) approach to data monitoring showed to be inadequate for collecting
and processing measurements on the ﬂy and alternative designs based on dis-
tributed computing are being explored. While Hadoop and MapReduce [1,2] are
well-known frameworks oriented to the oﬀ-line (batch) processing of data, brand
new frameworks are emerging for the analysis of unbound streams of data, such
as Storm and Apache S4.
In this paper we evaluate the performance of Twitter trending, an applica-
tion that monitors and ranks on-the-ﬂy topics discussed by Twitter users over
time. We run this application on top of Storm and Apache S4, platforms that
have been built around this use case, and on top of BlockMon [3], an open source
monitoring platform that we extended to execute distributed applications.
Here follows a quick overview of these three stream-processing systems.
BlockMon is an open-source modular system for ﬂexible, high-performance
traﬃc monitoring and analysis, implemented in C++11 under BSD license, being
designed to run on a single multi-core machine. We added interfaces for connect-
ing blocks running on diﬀerent machines, which allow to (de)serialize messages
(cid:2) This work was supported in part by a grant from the European Commission, under
the EU FP7 project DEMONS (contract-no. 257315).
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 253–255, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013
254
D. Simoncelli et al.
inside TCP sessions, so that users can now implement distributed applications
for monitoring unbound streams of data on top of it. We release improved Block-
Mon to the public [4].
Storm runs on Java Virtual Machine, is written in Clojure and Java and
supports multi-language programmability. Data are exchanged in form of tuples
through ZMQ sockets, which handle local and remote transmission on top of
TCP. We used release v0.8 of the software, available under the EPL license [5].
Apache S4 is written in Java. An external adapter converts data into
Apache S4 events and injects them into the cluster through the put method:
elements then exchange events using TCP (or UDP as well). We used version
v0.5 of the software, available under the Open Source Apache 2.0 license [6].
2 Experimental Analysis
We considered a dataset of around 20 million tweets in JSON format: as the
performance measures do not depend on actual data, we plan to not disclose
the dataset due to privacy concern. Our testbed is composed of 14 commodity
machines, each one hosting two AMD Opteron(tm) Processors 246 (single core)
and 4GB RAM. A 16-port switch connects the 1GbE interfaces of all machines.
We opted for a design with multiple JSON parsers (Hashtag Finder), one per
each Tweet Source, and a single Hashtag Counter as reported in Figure 1a.
2.1 Performance Tests
For every experiment, we assigned only one task per machine, and run the con-
troller of the platform under test on a dedicated machine, to avoid the load
introduced by the controller to aﬀect our measurements. We also assumed no
failure during the experiments.
probes
aggregation point
Tweet 
Source
Tweet 
Source
Tweet 
Source
Hashtag 
Finder
Hashtag 
Finder
Hashtag 
Finder
Hashtag 
Counter
105
104
103
d
n
o
c
e
s
r
e
p
t
s
g
a
h
s
a
h
d
e
s
s
e
c
o
r
P
BlockMon
Storm
Apache S4
Theoretical
23.5x 34.2x
102
1
2
3
#Hashtag finders
4
5
6
(a) Design: probes parse tweets and send the
hashtags to a central counter.
(b) Scalability (y-axis is in log scale).
Fig. 1. Performance of Twitter trending when running over the three platforms
Scaling Out the Performance of Service Monitoring Applications
255
Figure 1b reports performance of Twitter trending with an increasing number
of hashtag ﬁnders (HF): on all the platforms, the application scales linearly
(dashed line is the theoretical trend). BlockMon outperforms Storm (Apache S4)
with a gain in performance of 23.5x (34.2x). The CPU load of the hashtag counter
is in the worst case (with six HFs on Storm) below 4% (not shown here), thus
suggesting that one is enough to cope with multiple HFs, which account in turn
for around 75% of the total CPU resources. We note that in Apache S4 the source
is already a limiting factor; a look at the source code shows that sending out an
event requires nested copies, thus aﬀecting performance: compared with Storm,
the other Java-based platform, the tweet source is 10x slower. As for Storm, the
bottleneck is related to the way the platform extracts messages coming from the
network and passes them to the HFs, as we veriﬁed that the rate of the sources
is higher than the one of the HFs, and that jackson, the Java-based JSON parser
library that we used in Storm, has the same performance of jsmn, the one used
in BlockMon, when they are used stand-alone. Users should consider this pitfall
in applications like Twitter trending, where moving data among nodes is crucial.
3 Conclusions
We believe this work can provide developers of monitoring applications with a
better insight of the distributed architecture to use, to target on-the-ﬂy data pro-
cessing. Our preliminary results point out some pitfalls in the existing platforms,
and show that BlockMon achieves the best performance.
As future work, we plan to extend the analysis with more applications and
use specialized hardware, e.g., equipped with 10Gb/s network cards, to remove
the bottleneck represented by the network.
References
1. Apache Hadoop, http://hadoop.apache.org (accessed September 01, 2012)
2. Dean, J., Ghemawat, S.: Mapreduce: simpliﬁed data processing on large clusters.
Commun. ACM 51(1), 107–113 (2008)
3. di Pietro, A., Huici, F., Bonelli, N., Trammell, B., Kastovsky, P., Groleat, T., Vaton,
S., Dusi, M.: Blockmon: Toward high-speed composable network traﬃc measure-
ment. In: Proceedings of the IEEE Infocom Conference, Mini-conference (2013)
4. BlockMon, http://blockmon.github.com/blockmon (accessed August 30, 2012)
5. Storm, http://storm-project.net (accessed August 30, 2012)
6. Apache S4, http://incubator.apache.org/s4 (accessed August 30, 2012)