\s
让我们分别看一下这个字符申的每一部分所表示的意思：
序列
行动
八
开始一个非打印字符序列。其真正的目的是为了让bash能
够正确地计算提示符的大小。如果没有这个转义字符的话，
命令行编辑功能会弄错光标的位置。
存储光标位置。这个用来使光标能回到原来提示符的位置，
当长条和时钟显示到屏幕上方之后。当心一些终端仿真器
不推崇这个编码。
H0:0]c20\
把光标移到屏幕左上角，也就是第零行，第零列的位置。
\033[0;41m
把背景设置为红色。
清空从当前光标位置到行末的内容。因为现在背景颜色是
红色，则被清空行背景成为红色，以此来创建长条。注意虽
然一直清空到行末，但是不改变光标位置，它仍然在屏幕左
上角。
把文本颜色设为黄色。
\t
显示当前时间。虽然这是一个可“打印”的元素，但我们仍
把它包含在提示符的非打印部分，因为我们不想bash在计
算可见提示符的真正大小时包括这个时钟在内。
171
---
## Page 173
关闭颜色设置。这对文本和背景都起作用。
n]eso
恢复到之前保存过的光标位置处。
结束非打印字符序列。
\$
提示符字符串。
14.5保存提示符
显然地，我们不想总是入那个怪物，所以我们将要把这个提示符存储在某个地方。通过把它
添加到我们的.bashrc文件，可以使这个提示符永久存在。为了达到目的，把下面这两行添加
到.bashrc 文件中。
PS1=*\[\033[≤\033 [0 ;0B\033[0; 41n\033[K\033 [1; 33m\t\033[0m033[u\] \$
export PS1
14.6总结归纳
不管你信不信，如果加上我们在这里没有论及的shell西数和脚本，还有许多事情可以由提示
符来完成。但这是一个好的开始。并不是每个人都会花心思来更改提示符，因为通常默认的提
示符就很让人满意。但是对于我们这些喜欢思考的人们来说，shell却提供了许多制造项辞乐趣
的机会。
14.7拓展阅读
·TheBashPromptHOWTO来自于Linux文档工程，对shell提示符的用途进行了相当
完备的论述。可在以下链接中得到：
http://tldp.org/HOWTO/Bash-Prompt-HOWTO/
·Wikipedia上有一篇关于ANSI EscapeCodes 的好文章：
http://en.wikipedia.org/wiki/ANSI_escape_code
172
---
## Page 174
15”
软件包管理
如果我们花些时间在Linux社区里，我们会看到很多像Linux发行版中哪一个是“最佳”之类
的观点。这些讨论通常非常可笑，集中在一些像桌面背景的漂亮程度（一些人不使用Ubuntu，
只是因为Ubuntu默认主题颜色是棕色的！）和其它的现碎东西上。
Linux发行版本质量最重要的决定因素是软件包管理系统和其支持社区的持久性。随着我
们花更多的时间在Linux上，我们会发现它的变化是非常快的。大多数一线Linux发行版每隔
六个月发布一个新版本，并且许多独立的程序每天都会更新。为了能和这些如暴风雪一般多的
软件保持联系，我们需要一些好工具来进行软件包管理
软件包管理是指系统中一种安装和维护软件的方法。今天，通过从Linux发行版中安装的
软件包，已能满足许多人所有的软件需求。这不同于早期的Linux，人们需要下载和编译源码
来安装软件。编译源码没有任何问题，事实上，拥有对源码的访问权限是Linux的伟大奇迹。
理起来要相对容易快速些。这章中，我们将查看一些用于包管理的命令行工具。虽然所有主流
Linux发行版都提供了强大且精致的图形管理程序来维护系统.但是学习命令行程序也非常重
要。因为它们可以完成许多让图形化管理程序处理起来困难（或者不可能）的任务。
15.1打包系统
不同的Linux发行版使用不同的打包系统，一般而言，大多数发行版分别属于两大包管理技术
阵营：Debian的“deb”，和红帽的"rpm”。也有一些重要的例外，比方说Gentoo，Slackware，
和Foresight，但大多数会使用这两个基本系统中的一个。
包管理系统
发行版（部分列表）
Debian Style (.deb)
Debian, Ubuntu, Xandros, Linspire
Red Hat Style (.rpm)
Fedora, CentOS, Red Hat Enterprise Linux
OpenSUSE, Mandriva, PCLinuxOS
表15-1：主要的包管理系统家族
173
---
## Page 175
15.2软件包管理系统是怎样工作的
在商业化软件中，获取软件的最新版本通常需要买一张安装媒介，比方说“安装盘”，然后运行
一个“安装向导”，来在系统中安装新的应用程序。
Linux不是这样。Linux系统中几乎所有的软件都可以在互联网上找到。其中大多数软件由
发行商以包文件的形式提供，剩下的则以源码形式存在，可以手动安装。在后面章节里，我们
将会谈谈怎样通过编译源码来安装软件。
15.3包文件
在包管理系统中软件的基本单元是包文件。包文件是一个构成软件包的文件压缩集合。一个软
件包可能由大量程序以及支持这些程序的数据文件组成。除了安装文件之外，软件包文件也包
括关于这个包的元数据，如软件包及其内容的文本说明。另外，许多软件包还包括预安装和安
装后脚本，这些脚本用来在软件安装之前和之后执行配置任务。
软件包文件是由软件包维护者创建的，他通常是（但不总是）一名软件发行商的雇员。软件
维护者从上游提供商（程序作者）那里得到软件源码，然后编译源码，创建软件包元数据以及
所需要的安装脚本。通常，软件包维护者要把所做的修改应用到最初的源码当中，来提高此软
件与Linux发行版其它部分的融合性。
15.4资源库
虽然某些软件项目选择执行他们自己的打包和发布策略，但是现在大多数软件包是由发行商和
如，通常会有一个“测试”资源库，其中包含刚刚建立的软件包，它们想要勇敢的用户来使用，
在这些软件包正式发布之前，让用户查找错误。系统发行版经常会有一个“开发”资源库，这
个资源库中保存着注定要包含到下一个主要版本中的半成品软件包。
一个系统发行版可能也会拥有相关第三方的资源库。这些资源库需要支持一些因法律原因
比如说专利或者是DRM反规避问题，而不能被包含到发行版中的软件。可能最著名的案例就
是对加密DVD的播放支持，在美国这是不合法的。第三方资源库在一些软件专利和反规避法
案不生效的国家中设立并分发资源。这些资源库通常完全地独立于它们所支持的资源库，要想
使用它们，你必须了解它们，手动地把它们包含到软件包管理系统的配置文件中。
174
---
## Page 176
15.5依赖性
程序很少独立工作：他们需要依靠其他程序的组件来完成他们的工作。程序所共有的活动，如
输入/输出，就是由一个被多个程序调用的子例程处理的。这些子例程存储在动态链接库中。动
态链接库为多个程序提供基本服务。如果一个软件包需要一些共享的资源，如一个动态链接库
它就被称作有一个依赖。现代的软件包管理系统都提供了一些依赖项解析方法，以确保安装软
件包时，其所有的依赖也被安装。
15.6上层和底层软件包工具
软件包管理系统通常由两种工具类型组成：底层工具用来处理这些任务，比方说安装和删除软
件包文件，和上层工具，完成元数据搜索和依赖解析。在这一章中，我们将看一下由Debian风
格的系统（比如说Ubuntu，还有许多其它系统）提供的工具，还有那些由RedHat产品使用
的工具。虽然所有基于RedHat风格的发行版都依赖于相同的底层程序（rpm），但是它们却
使用不同的上层工具。在我们的讨论中，我们将研究Fedora，RedHat企业版，和CentOs所
使用的yum。其它RedHat风格的发行版提供了带有类似yum的其他上层工具。
发行版
底层工具
上层工具
Debian-Style
dpkg
apt-get, aptitude
Fedora, Red Hat Enterprise Linux, CentOS
rpm
yum
表15-2:包管理工具
15.7常见软件包管理任务
通过命令行软件包管理工具可以完成许多操作。我们将会看一下最常用的工具。注意底
"package_name”这个术语是指软件包实际名称，而不是指“package_file"，它是包含在软件包
中的文件名。
15.8查找资源库中的软件包
使用上层工具来搜索资源库元数据，可以根据软件包的名字和说明来定位它。
风格
命令
175
---
## Page 177
Debian
apt-get update; apt-cache search search_string
Red Hat
yum search search_string
表15-3:软件包查找工具
例如：搜索一个yum资源库来查找emacs文本编辑器，使用以下命令：
yun search enacs
15.9
从资源库中安装一个软件包
上层工具允许从一个资源库中下载一个软件包，并经过完全依赖解析来安装它。
风格
命令
Debian
apt-get update; apt-get install package_name
Red Hat
yum install package_name
表15-4:软件包安装命令
例如：从一个apt资源库来安装emacs文本编辑器：
ssewoTte4sut4o8de1a4epdnsa34de
15.10
通过软件包文件来安装软件
如果从某处而不是从资源库中下载了一个软件包文件，可以使用底层工具来直接（没有经过依
赖解析）安装它。
风格
命令
Debian
dpkg --install package_file
Red Hat
rpm -i package_file
表15-5：底层软件包安装命令
176
---
## Page 178
例如：如果已经从一个并非资源库的网站下载了软件包文件emacs-22.1-7.fc7-i386.rpm，则
可以通过这种方法来安装它：
rpn -1 enacs-22.1-7.fc7-i386 .rpa
注意：因为这项技术使用底层的rpm程序来执行安装任务，所以没有运行依赖解析。如果
rpm程序发现缺少了一个依赖，则会报错井退出。
15.11
卸载软件
可以使用上层或者底层工具来卸载软件。下面是可用的上层工具。
风格
命令
Debian
apt-get remove package_name
Red Hat
yum erase package_name
表15-6：软件包删除命令
例如：从Debian风格的系统中卸载emacs软件包：
apt-get renove emacs
15.12
经过资源库来更新软件包
最常见的软件包管理任务是保持系统中的软件包都是最新的。上层工具仅需一步就能完成这个
至关重要的任务。
风格
命令
Debian
apt-get update; apt-get upgrade
Red Hat
yum update
177
---
## Page 179
表15-7：软件包更新命令
例如：更新安装在Debian风格系统中的软件包：
ape.x3dn 4o8de 1a4epdn sa34de
15.13
经过软件包文件来升级软件
如果已经从一个非资源库网站下载了一个软件包的最新版本，可以安装这个版本，用它来替代
先前的版本：
风格
命令
Debian
dpkg --install package_file
Red Hat
rpm -U package_file
表15-8：底层软件包升级命令
例如：把RedHat系统中所安装的emacs的版本更新到软件包文件emacs-22.1-7.fc7-
i386.rpmz所包含的emacs 版本。
rpn -U enacs=22.1-7 .fc7-i386 .rpa
注意：rpm程序安装一个软件包和升级一个软件包所用的选项是不同的，而dpkg程序所用
的选项是相同的。
15.14列出所安装的软件包
下表中的命令可以用来显示安装到系统中的所有软件包列表：
178
---
## Page 180
风格
命令
Debian
dpkg --list
Red Hat
rpm -qa
表15-9:列出所安装的软件包命令
15.15
确定是否安装了一个软件包
这些底端工具可以用来显示是否安装了一个指定的软件包：
风格
命令
Debian
dpkg --status package_name
Red Hat
rpm -q package_name
表15-10:软件包状态命令
例如：确定是否Debian风格的系统中安装了这个emacs软件包：
dpkg --status enacs
15.16
显示所安装软件包的信息
如果知道了所安装软件包的名字，使用以下命令可以显示这个软件包的说明信息：
风格
命令
Debian
apt-cache show package_name
Red Hat
yum info package_name
表15-11：查看软件包信息命令
例如：查看Debian风格的系统中emacs软件包的说明信息：
apt-cache shov emacs
179
---