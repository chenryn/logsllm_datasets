pivot-chain blocks computed by honest parties, and QP
r to equal
u = 0 for all r  0. Similarly define Di
chain (1 ≤ i ≤ m in Prism and 1 ≤ i ≤ m − 1 in OHIE). For a set
r and
Regarding the adversary, for a set of J adversarial queries to the
oracle, let T(J) be target associated with the first query in J. Define
the real random variable AP(J), as the sum of difficulties of all the
adversarial blocks created during queries in J with difficulty less
than τ/T(J). For all i, define Ai(J) as the sum of difficulties of all the
adversarial blocks created during queries in J with difficulty less than
bi(J) = maxj∈J sup{Ai
j−1|Ej−1 = Ej−1}, a function associated
with the set of queries J (defined according to Theorem 8.1 in [8]).
is the difficulty of the pivot-chain block with difficulty at most
AP
j
τ/T(J) obtained at the jth query of J. Ai
is the difficulty of the block
j
obtained at jth query of J for non-pivot chain i.
r and Qi
r ∈S DP
r for all i.
Let E denote the entire execution and let Er be the execution just
before round r +1. To obtain meaningful concentration of our ran-
dom variables, we should be considering a sufficiently long sequence
of at least
j − Ai
r ,Y i
ℓ ≜
2
consecutive rounds.
ε
4(1+3ε)
f [1−(1+δ)γ
2
f ]∆+1 max{∆,τ}γ
3
λ
(3)
We require Φ the duration of an epoch to be large enough in order
to obtain meaningful security bounds:
(4)
In order for the proofs for the security analysis to work, the pa-
Φ≥ 4(1+δ)γ
f (ℓ+3∆)/ε.
2
rameters of the protocol should satisfy the following conditions:
2
[1−(1+δ)γ
f ]∆ ≥ 1−ε, 8ε ≤ δ ≤ 1.
(5)
Note that Equations (4) and (5) can always be satisfied by setting
Φ to be large enough and f to be small enough. Also note that (4)
and (5) are not tight bounds on the parameters and are just sufficient
conditions for the analysis to work.
We now define what a typical execution, which will help us bound
the random variables in our analysis.
Definition 6.10 (Typical Execution). For any set S of at least
ℓ consecutive good rounds, any set of J consecutive adversarial queries
and α(J) =2( 1
ε
2
3)λ/T(J), an execution E is typical if
+ 1
(1−ε)[1−(1+δ)γ
AP(J) <p|J| +max{εp|J|,τ α(J)},
Ai(J) <p|J| +max{εp|J|,bi(J)λ(1
where bi(J) =maxj∈J sup{Ai
j−1|Ej−1 = Ej−1}.
1
3)},
j −Ai
+
ε
f ]∆pn(S) <Qi/P(S)≤ Di/P(S) <(1+ε)pn(S),
We now show that a typical execution is a high-probability event.
Theorem 6.11. For an execution E of rmax rounds, in a (γ , s)-
respecting environment, the probability of the event “E not typical” is
bounded by O(r
max)e−λ.
2
The proof for Theorem 6.11 can be found in Appendix C.1
6.4 Non-pivot chain properties
Pivot chain behaves similar to the Bitcoin chain and its properties
can be found in Appendix B
Next we prove some desired properties for the non-pivot chains.
Lemma 6.12 (Chain growth for non-pivot chain, from [13]).
Suppose that at round u of an execution E, an honest party broad-
casts a i-th non-pivot chain of difficulty d. Then, by round v, every
honest party receives a chain of difficulty at least d + Qi(S), where
S ={r :u +∆≤ r ≤v−∆}.
The proof of Lemma 6.12 is identical to Lemma B.3.
At round r, to mine on a non-pivot chain block, an honest party
picks a target from the tip of a pivot chain in SP
r which has good
targets at round r because of Lemma B.4. So, as a consequence of
M1, all the targets used by the honest parties on a non-pivot chain
also satisfies f /2γ
2 ≤pnrTr ≤ f (1+δ)γ
2.
Lemma 6.13 (Common prefix for non-pivot chains). For a typ-
ical execution in a (γ ,2(1 + δ)γ
Φ/f )-respecting environment, each
non-pivot chain satisfies the common-prefix property with parameter
ℓcp = ℓ+2∆.
2
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1709Hence at least one honest proposer block B mined after r0 is per-
manent in the leader sequence at round r. Since either B or some
proposer block referred by B will contain tx, in both case we can
conclude the proof.
□
7 EVALUATION
In our evaluation, we answer the following questions.
ficulty and the miner hash power?
• Is the proposed scheme effective in matching the mining dif-
• Doestheblockchainforkingrateremainlowunderourscheme,
• Does our scheme ensure that non-pivot chains adopt the dif-
ficulty of pivot chains, even with presence of the adversary?
• Does our scheme cause major computation and communica-
even with changing miner hash power?
tion overhead when applied?
7.1 Experimental Setup
Simulator. To evaluate our scheme, we build a mining simulator
for parallel-chain protocols in Golang. The simulator uses a round-
by-round model with an adjustable round interval. In each round,
blocks are mined on each of the parallel chains, and the number of
blocks mined is determined by drawing from independent Poisson
random variables with mean set to the product of the round interval
and the per-chain mining rate. Miners receive newly-mined blocks
after an adjustable network latency.
Simulated protocol. Our simulator does not consider the inter-
pretation of the chains, such as transaction confirmation, ledger
formation, etc. We only simulate the mining process. As a result,
our evaluation is not tied to any particular protocol. Meanwhile, it
is meaningful broadly to all PoW parallel-chain protocols, because
they share this mining process.
There are 1 pivot chain and 1000 non-pivot chains. We simulate
PoW mining on each of the chains at the same mining rate f . Each
pivot-chain block contains its timestamp, difficulty, and parent. Each
non-pivot-chain block also contains all these fields, plus a reference
to a pivot-chain block (M1). We simulate two parties of miners: hon-
est and adversary. Honest miners follow the general methodology
described in section 1 by always referring to the best block in the
pivot chain. They enforce the rules M1, M2 by rejecting any non-
compliant block . We design different adversarial miners to simulate
attacks, and we provide more details later in Section 7.3.
Parameters. The round interval and the network latency are set to
2 seconds according to data collected in large-scale experiments of
Prism [26]. The target mining rate f is set to 0.1 block per second
per chain according to [26]. The epoch length Φ is set to 2016 blocks,
and the dampening filter τ is set to 4 according to Bitcoin . We replay
the historical Bitcoin mining power data [1] during the simulation.
7.2 Adaptation to Changing Miner Power
The main purpose of our scheme is to ensure the mining difficulty
adapts to changing mining power. To show that, we simulate our
scheme while varying the mining power according to the histori-
cal Bitcoin miner hash rate trace from Jan 2, 2019 to Feb 20, 2020.
Figure 14 shows that even though the miner hash power has tripled
during the simulated period, the mining difficulty of every chain
Figure 10: The leader blocks at each difficulty level in the
proposer tree.
The proof of Lemma 6.13 is in Appendix C
Lemma 6.14 (Chain qality for non-pivot chains). For a typ-
Φ/f )-respecting environment, each
ical execution in a (γ ,2(1 + δ)γ
non-pivot chain satisfies the chain-quality property with parameter
ℓcq = ℓ+2∆ and µ =δ−3ε.
2
The proof of Lemma 6.14 is in Appendix C.3.
6.5 Persistence and Liveness of Prism
Lemma 6.15 (Leader seqence common prefix). For a typical
Φ/f )-respecting environment, the leader
execution in a (γ ,2(1+δ)γ
sequence satisfies the leader-sequence-common-prefix property with
parameter ℓlscp =2ℓ+4∆.
2
Lemma 6.16 (Leader seqence qality). For a typical execution
in a(γ ,2(1+δ)γ
Φ/f )-respecting environment, the leader sequence sat-
isfies the leader-sequence-quality property with parameter ℓlsq = ℓ+2∆
and µ =δ−3ε.
2
The proofs of Lemma 6.15 and Lemma 6.16 are in Appendix C.4.
Theorem 6.17 (Persistence and liveness of Prism). For a typ-
Φ/f )-respecting environment, Prism
4(1+ε)γ 2(ℓ+2∆)
.
(δ−3ε)(1−ε)2
ical execution in a (γ ,2(1+δ)γ
satisfies persistence and liveness with parameter u =
2
Proof. By our definition, the persistence of Prism is equivalent to
the leader sequence common prefix property proved in Lemma 6.15.
We next prove the liveness property. Suppose a transaction tx
is received by all honest nodes before or at round r0. Let r ≥ r0 +u
be current time and we shall prove that tx is contained in the per-
manent leader sequence of all honest nodes at round r. As shown
in Figure 10, let S1 = {r0,···,r}, S2 = {r −2ℓ−4∆,···,r}, and J be the
adversarial queries in S2. By Lemma 6.15, for a difficulty level d, if d is
covered by an honest block mined in S1\S2, then the block covering
d will be permanent in the leader sequence at round r. We know that
the difficulty level grows at least QP(S1)≥(1−ε)2
pnr u/γ in S1. By
Lemma 6.16, we have that among the chain growth in S1, different
pnr u/γ is covered by
difficulty levels with size at least (δ−3ε)(1−ε)2
honest leader blocks (which may not be permanent at round r). On
the other hand, the proposer blocks that are not permanent (mined
in S2) cover different difficulty levels with size at most
DP(S2)+AP(S2) <2DP(S2)≤ 2(1+ε)pγnr(2ℓ+4∆)
=4(1+ε)pγnr(ℓ+2∆).
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1710Figure 11: Forking rate of all parallel
chains in two simulations, one using our
scheme and one using fixed difficulty.
Figure 12: Frequency histogram of the
delay where non-pivot chains update
their difficulty to follow that of the pivot
chain. Note the y-axis is log scale.
Figure 13: Frequency of difficulty change
on a non-pivot chain where 30% of miner
power is adversarial.
Figure 14: Miner hash power and mining difficulty of each
chain when simulating our scheme over the historical Bitcoin
miner power trace. Difficulty is plotted as a region to show
the max and min difficulty across all chains. Both metrics
are normalized over their initial values.
keeps tracking the miner hash power very closely. Also, at any point
in time, the max and min difficulty of all chains are very close. This
demonstrates that the mining difficulty of all chains are always
closely coupled, and no single chain experiences unstable difficulty
or vulnerability.
As mentioned in Section 1, support for variable miner power is
crucial to keeping the blockchain secure. If the miner hash power
increases while the mining difficulty stays the same, the forking rate
will increase due to decreased block inter-arrival time. To show our
scheme is effective in keeping the blockchain secure, we compare the
forking rate of two simulations: one using our scheme and one using
a fixed mining difficulty. We use the same Bitcoin mining power data
as in the previous experiment, and Figure 11 shows the results. Here,
we report the forking rate as the ratio of the number of blocks not
on the longest chain, to the number of blocks on the longest chain.
If a fixed difficulty is used, the forking rate quickly increases as the
miner power increases, to almost tripling towards the end of the
simulation. In comparison, our scheme keeps the forking rate low
across all parallel chains for the whole simulation. This is because
the mining difficulty and the miner hash power are closely matched
under our scheme, so the block mining rate stays at a safe level.
7.3 Difficulty Update on Non-pivot Chains
One major challenge in designing our scheme is to ensure non-pivot
chains adopt the pivot chain difficulty quickly after a new epoch
begins, and we achieve it with the M2 (Monotonicity, cf. Section 1).
To show that adversarial miners cannot delay this process, we sim-
ulate our scheme where 30% of miners are adversarial. Adversarial
miners do not voluntarily refer to the latest block on the pivot chain
after a new epoch begins, but rather try to stay in the previous epoch
(and mining difficulty) for as long as possible. We also simulate an
all-honest scenario for comparison. We measure how soon non-pivot
chains adopt new difficulty by tracking the delay from the last block
of the previous epoch on the pivot chain to the first block of the new
epoch of the non-pivot chain. Figure 12 shows the results. In either
scenario, the difficulty of non-pivot chains is updated within 1–5
block intervals (0–50 seconds in real time). Although adversarial
presence does delay the update of difficulty, the delay is not signifi-
cant. This demonstrates that our mechanism ensures in-time update
of non-pivot-chain difficulty.
We demonstrate that M2 is essential to ensuring the mining diffi-
culty does not vary too frequently on non-pivot chains. We compare
two simulations where 30% of miner power is adversarial. In one
case, we apply our full scheme. In the other case, we disable M2
so that the adversary is free to choose whatever block on the pivot
chain to refer when mining non-pivot chain blocks. Specifically,
the adversary always tries to mine blocks with the lowest difficulty
possible by referring to the genesis pivot-chain block. We focus on
one non-pivot chain, and track the frequency of difficulty change.
Difficulty change is defined as a block on the longest chain having
different difficulty than its parent. Figure 13 shows the results. Under
our scheme, non-pivot chain difficulty does not change for most of
the time, and only changes swiftly at the beginning of new epochs,
so the curve for our scheme stays close to zero. On the contrary, if
we disable M2, the difficulty oscillates violently, as frequently as 0.2
times per second on average. This shows that our design is essential
to maintain stable mining difficulty of non-pivot chains.
7.4 Analysis of Overhead
Finally, we analyze and show that our schemes will cause minimal
overhead when implemented on existing parallel-chain protocols.
Communicationandstorage.Everyblockonthenon-pivotchains
needs to refer to a block on the pivot chain (M1), which takes the size
of a hash (usually 32 bytes). This is a very small overhead compared
to the size of the blockchain. For example, in Prism, the size of a voter
(non-pivot-chain) block is 534 bytes [26]. The pivot-chain reference
constitutes to an increase of 6% in communication and storage cost
for voter blocks. Notice that voter blocks themselves only make up
for 0.21% of the size of the Prism blockchain [26], so the overhead of
pivot-chain referencing is negligible, regardless of the parameters.
Computation. Our scheme changes the mining and the transaction
confirmation process of parallel chain protocols. For mining, notice
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1711Table 2: Confirmation overhead vs epoch length Φ
Φ
Overhead
100
10
2016