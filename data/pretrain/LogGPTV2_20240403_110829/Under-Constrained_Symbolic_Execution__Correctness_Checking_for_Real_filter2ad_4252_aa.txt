title:Under-Constrained Symbolic Execution: Correctness Checking for Real
Code
author:David A. Ramos and
Dawson R. Engler
Under-Constrained Symbolic Execution: 
Correctness Checking for Real Code
David A. Ramos and Dawson Engler, Stanford University
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/ramos
This paper is included in the Proceedings of the 24th USENIX Security SymposiumAugust 12–14, 2015 • Washington, D.C.ISBN 978-1-939133-11-3Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXUnder-Constrained Symbolic Execution:
Correctness Checking for Real Code
David A. Ramos
PI:EMAIL
Dawson Engler
PI:EMAIL
Stanford University
Abstract
Software bugs are a well-known source of security vul-
nerabilities. One technique for ﬁnding bugs, symbolic
execution, considers all possible inputs to a program but
suffers from scalability limitations. This paper uses a
variant, under-constrained symbolic execution, that im-
proves scalability by directly checking individual func-
tions, rather than whole programs. We present UC-KLEE,
a novel, scalable framework for checking C/C++ systems
code, along with two use cases. First, we use UC-KLEE
to check whether patches introduce crashes. We check
over 800 patches from BIND and OpenSSL and ﬁnd 12
bugs, including two OpenSSL denial-of-service vulner-
abilities. We also verify (with caveats) that 115 patches
do not introduce crashes. Second, we use UC-KLEE as a
generalized checking framework and implement check-
ers to ﬁnd memory leaks, uninitialized data, and unsafe
user input. We evaluate the checkers on over 20,000
functions from BIND, OpenSSL, and the Linux kernel,
ﬁnd 67 bugs, and verify that hundreds of functions are
leak free and that thousands of functions do not access
uninitialized data.
1 Introduction
Software bugs pervade every level of the modern soft-
ware stack, degrading both stability and security. Cur-
rent practice attempts to address this challenge through
a variety of techniques, including code reviews, higher-
level programming languages, testing, and static analy-
sis. While these practices prevent many bugs from being
released to the public, signiﬁcant gaps remain.
One technique, testing, is a useful sanity check for
code correctness, but it typically exercises only a small
number of execution paths, each with a single set of in-
put values. Consequently, it misses bugs that are only
triggered by other inputs.
Another broad technique, static analysis, is effective
at discovering many classes of bugs. However, static
analysis generally uses abstraction to improve scalability
and cannot reason precisely about program values and
pointer relationships. Consequently, static tools often
miss deep bugs that depend on speciﬁc input values.
One promising technique that addresses the limitations
of both testing and static analysis is symbolic execu-
tion [4, 5, 40]. A symbolic execution tool conceptually
explores all possible execution paths through a program
in a bit-precise manner and considers all possible input
values. Along each path, the tool determines whether any
combination of inputs could cause the program to crash.
If so, it reports an error to the developer, along with a
concrete set of inputs that will trigger the bug.
Unfortunately, symbolic execution suffers from the
well-known path explosion problem since the number of
distinct execution paths through a program is often ex-
ponential in the number of if-statements or, in the worst
case, inﬁnite. Consequently, while symbolic execution
often examines orders of magnitude more paths than tra-
ditional testing, it typically fails to exhaust all interest-
ing paths. In particular, it often fails to reach code deep
within a program due to complexities earlier in the pro-
gram. Even when the tool succeeds in reaching deep
code, it considers only the input values satisfying the few
paths that manage to reach this code.
An alternative to whole-program symbolic execution
is under-constrained symbolic execution [18, 42, 43],
which directly executes an arbitrary function within the
program, effectively skipping the costly path preﬁx from
main to this function. This approach reduces the number
and length of execution paths that must be explored. In
addition, it allows library and OS kernel code without a
main function to be checked easily and thoroughly.
This paper presents UC-KLEE, a scalable framework
implementing under-constrained symbolic execution for
C/C++ systems code without requiring a manual speci-
ﬁcation or even a single testcase. We apply this frame-
work to two important use cases. First, we use it to check
whether patches to a function introduce new bugs, which
may or may not pose security vulnerabilities. Ironically,
patches intended to ﬁx bugs or eliminate security vulner-
abilities are a frequent source of them. In many cases,
USENIX Association  
24th USENIX Security Symposium  49
UC-KLEE can verify (up to a given input bound and with
standard caveats) that a patch does not introduce new
crashes to a function, a guarantee not possible with ex-
isting techniques.
Second, we use UC-KLEE as a general code checking
framework upon which speciﬁc checkers can be imple-
mented. We describe three example checkers we im-
plemented to ﬁnd memory leaks, uses of uninitialized
data, and unsanitized uses of user input, all of which
may pose security vulnerabilities. Additional checkers
may be added to our framework to detect a wide vari-
ety of bugs along symbolic, bit-precise execution paths
through functions deep within a program. If UC-KLEE
exhaustively checks all execution paths through a func-
tion, then it has effectively veriﬁed (with caveats) that the
function passes the check (e.g., no leaks).
We evaluated these use cases on large, mature, and
security-critical code. We validated over 800 patches
from BIND [3] and OpenSSL [36] and found 12 bugs,
including two OpenSSL denial-of-service vulnerabili-
ties [12, 16]. UC-KLEE veriﬁed that 115 patches did not
introduce new crashes, and it checked thousands of paths
and achieved high coverage even on patches for which it
did not exhaust all execution paths.
We applied our three built-in checkers to over 20,000
functions from BIND, OpenSSL, and the Linux kernel
and discovered 67 new bugs, several of which appear to
be remotely exploitable. Many of these were latent bugs
that had been missed by years of debugging effort. UC-
KLEE also exhaustively veriﬁed (with caveats) that 771
functions from BIND and OpenSSL that allocate heap
memory do not cause memory leaks, and that 4,088 func-
tions do not access uninitialized data.
The remainder of this paper is structured as follows:
§ 2 presents an overview of under-constrained symbolic
execution; § 3 and § 4 discuss using UC-KLEE for val-
idating patches and generalized checking, respectively;
§ 5 describes implementation tricks; § 6 discusses related
work; and § 7 concludes.
2 Overview
This paper builds upon our earlier work on UC-KLEE
[43], an extension to the KLEE symbolic virtual ma-
chine [5] designed to support equivalence veriﬁcation
and under-constrained symbolic inputs. Our tool checks
C/C++ code compiled as bitcode (intermediate represen-
tation) by the LLVM compiler [29]. As in KLEE, it per-
forms bit-accurate symbolic execution of the LLVM bit-
code, and it executes any functions called by the code.
Unlike KLEE, UC-KLEE begins executing code at an ar-
bitrary function chosen by the user, rather than main.
With caveats (described in § 2.2), UC-KLEE provides
veriﬁcation guarantees on a per-path basis. If it exhausts
all execution paths, then it has veriﬁed that a function has
represent external
Directly invoking functions within a program presents
new challenges. Traditional symbolic execution tools
input
generate input values that
sources (e.g., command-line arguments, ﬁles, etc.).
In
most cases, a correct program should reject invalid ex-
ternal inputs rather than crash. By contrast, individual
functions typically have preconditions imposed on their
inputs. For example, a function may require that pointer
arguments be non-null. Because UC-KLEE directly exe-
cutes functions without requiring their preconditions to
be speciﬁed by the user, the inputs it considers may
be a superset (over-approximation) of the legal values
handled by the function. Consequently, we denote UC-
KLEE’s symbolic inputs as under-constrained to reﬂect
that they are missing preconditions (constraints).
the checked property (e.g. that a patch does not introduce
any crashes or that the function does not leak memory)
up to the given input size.
While this technique allows previously-unreachable
code to be deeply checked, the missing preconditions
may cause false positives (spurious errors) to be reported
to the user. UC-KLEE provides both automated heuristics
and an interface for users to manually silence these errors
by lazily specifying input preconditions using simple C
code. In our experience, even simple annotations may si-
lence a large number of spurious errors (see § 3.2.5) and
this effort is orders of magnitude less work than eagerly
providing a full speciﬁcation for each function.
2.1 Lazy initialization
UC-KLEE automatically generates a function’s symbolic
inputs using lazy initialization [26, 46], which avoids
the need for users to manually construct inputs, even for
complex, pointer-rich data structures. We illustrate lazy
initialization by explaining how UC-KLEE executes the
example function listSum in Figure 1(a), which sums
the entries in a linked list. Figure 1(b) summarizes the
three execution paths we explore. For clarity, we elide er-
ror checks that UC-KLEE normally performs at memory
accesses, division/remainder operations, and assertions.
UC-KLEE ﬁrst creates an under-constrained symbolic
value to represent the sole argument n. Although n is a
pointer, it begins in the unbound state, not yet pointing to
any object. UC-KLEE then passes this symbolic argument
to listSum and executes as follows:
Line 7 The local variable sum is assigned a concrete
value; no special action is taken.
Line 8 The code checks whether the symbolic variable
n is non-null. At this point, UC-KLEE forks execution
and considers both cases. We ﬁrst consider the false path
where n = null, (Path A). We then return to the true path
where n ̸= null (Path B). On Path A, UC-KLEE adds n =
null as a path constraint and skips the loop.
Line 12 Path A returns 0 and terminates.
50  24th USENIX Security Symposium 
USENIX Association
int val;
struct node *next;
1 : struct node {
2 :
3 :
4 : };
5 :
6 : int listSum(node *n) {
int sum = 0;
7 :
8 : while (n) {
9 :
10:
11:
12:
13: }
sum += n−>val;
n = n−>next;
}
return sum;
(a) C code
7 : int sum = 0;
8 : while (n) {
true
9 :   sum += n->val;
10:   n = n->next;
8 : while (n) {
true
9 :   sum += n->val;
10:   n = n->next;
8 : while (n) {
true
false
12: return sum;
Path C
n ≠ null
n = &node1
node1.next ≠ null
node1.next = &node2
node2.next = null
...
Figure 1: Example code fragment analyzed by UC-KLEE.
(b) Paths explored
Path constraints:
Symbolic inputs:
false
12: return sum;
Path A
n = null
false
12: return sum;
Path B
n ≠ null
n = &node1
node1.next = null
null
node1
val
next
null
node1
val
next
node2
val
next
null
n
n
n
We now consider Path B.
Line 8 UC-KLEE adds the constraint n ̸= null and enters
the loop.
Line 9 The code dereferences the pointer n for the ﬁrst
time on Path B. Because n is unbound, UC-KLEE allo-
cates a new block of memory, denoted node1, to sat-
isfy the dereference and adds the constraint n = &node1
to bind the pointer n to this object. At this point, n is
no longer unbound, so subsequent dereferences of that
pointer will resolve to node1 rather than trigger addi-
tional allocations. The (symbolic) contents of node1
are marked as unbound, allowing future dereferences of
pointers in this object to trigger allocations. This recur-
sive process is the key to lazy initialization. Next, sum is
incremented by the symbolic value node1.val.
Line 10 n is set to the value node1.next. Path B then
returns to the loop header.
Line 8 The code tests whether n (set to node1.next) is
non-null. UC-KLEE forks execution and considers both
cases. We ﬁrst consider node1.next = null, which we
still refer to as Path B. We will then return to the true
path where node1.next ̸= null (Path C). On Path B,
node1.next = null is added as a path constraint and exe-
cution exits the loop.
Line 12 Path B returns node1.val and terminates.
We now consider Path C.
Line 8 UC-KLEE adds node1.next ̸= null as a path con-
straint, and Path C enters the loop.
Line 9 Path C dereferences the unbound symbolic
pointer node1.next, which triggers allocation of a new
object node2. This step illustrates the unbounded nature
of many loops. To prevent UC-KLEE from allocating an
unbounded number of objects as input, the tool accepts
a command-line option to limit the depth of an input-
derived data structure (k-bounding [17]). When a path
attempts to exceed this limit, our tool silently terminates
it. For this example, assume a depth limit of two, which
causes UC-KLEE to terminate Path D (not shown) at line
9 during the next loop iteration.
Line 10 n is set to the value node2.next.
Line 8 UC-KLEE forks execution and adds the path con-
straint node2.next = null to Path C.
Line 12 Path C returns node1.val +node2.val and exits.
This example illustrates a simple but powerful recur-
sive technique to automatically synthesize data struc-
tures from under-constrained symbolic input. Figure 2
shows an actual data structure our tool generated as in-
put for one of the BIND bugs we discovered (Figure 5).
The edges between each object are labeled with the ﬁeld
names contained in the function’s debug information and
included in UC-KLEE’s error report.
2.2 Limitations
Because we build on our earlier version of UC-KLEE, we
inherit its limitations [43]. The more important exam-
ples are as follows. The tool tests compiled code on a
speciﬁc platform and does not consider other build con-
ﬁgurations. It does not handle assembly (see § 4 for how
we skip inline assembly), nor symbolic ﬂoating point op-
erations. In addition, there is an explicit assumption that
input-derived pointers reference unique objects (no alias-
ing, and no cyclical data structures), and the tool assigns
distinct concrete addresses to allocated objects.
When checking whether patches introduce bugs, UC-
KLEE aims to detect crashing bugs and does not look for
performance bugs, differences in system call arguments,
or concurrency errors. We can only check patches that
do not add, remove, or reorder ﬁelds in data structures or
change the type signatures of patched functions. We plan
to extend UC-KLEE to support such patches by imple-
menting a type map that supplies identical inputs to each
version of a function in a “ﬁeld aware” manner. How-
isc_event_t*
event
*
struct isc_event
uc_isc_event1
struct dns_zone
uc_dns_zone1
ev_arg
a r g
_
b
d
v
uc_char_ptr1
char*
*
char[8]
uc_char_arr1
struct dns_rbtdb
uc_dns_rbt1
common.
methods
struct dns_dbmethods
uc_dns_dbmethods1
[88]
Figure 2: BIND data structure allocated by UC-KLEE.
USENIX Association  