AS7018
AS18881
AS55410
First, it can be seen that the way we ranked the ASes change the
order in the three columns of the table, but there is a signiﬁcant
overlap between the top-20 of each rank, showing that, in general,
there are heavy-hitter actors that trigger many large, re-occurring
events. Second, in all three ranks, it is possible to identify some
large ASes, which peer other large ASes and are important parts of
the Internet core. For example, AS174 (Cogent), AS6939 (Hurri-
cane Electric), AS3549 (GBLX) and AS3356 (Level3) are in the
top-20 of each list. This suggests that some ASes in the core are
responsible for a large amount of the reorganization that happens
in the network. However, it is important to remember that our
strategy to sample ASes may have inﬂuence in this result, and ul-
timately that our original dataset does not cover the complete AS-
level topology of the Internet (which in fact motivated our sampling
strategy).
7.3 Case studies
In this section we present three case studies in order to show the
ability of PathMiner to identify actors of high impact events. Case
studies I and II were chosen to illustrate typical scenarios where
PathMiner is able to identify a network element (or set of elements)
whose actions would explain, in a simple way, the occurrence of
the event. We remark that many events share the same structure
(this can be seen in the online supplementary material). Case study
III, on the other hand, shows that PathMiner is not guaranteed to
always work. In that case, we discuss the reason and show that the
assumptions under which PathMiner was build are not satisﬁed.
In the representation of each case study, Figures 8, 9 and 10,
ASes in gray hosts a destination preﬁx. Red (dashed) edges are
those present only at day k, green (dotted) edges are present only
at day k + 1 and black (solid) edges are present in both days. Inside
each node we have: the AS identiﬁer; the number of paths passing
through the AS at day k, with a negative sign; and the number of
paths passing through the AS at day k + 1, with a positive sign.
Only paths passing through an AS in the event towards a preﬁx in
the event are counted.
7.3.1 Case study I
Our ﬁrst case study is related to the second event for the year of
2009 presented in Table 4. In this event we have 90 ASes changing
their next-hops towards one preﬁx over 91 days during the year.
Among those, we picked 2 pairs of consecutive days in order to
illustrate the nature of the event. Following the same convention
used in Section 2, Figures 8(a) and 8(b) picture the most impor-
tant part of the network for our needs. From Feb-08 to Feb-09
many ASes stopped using AS15412 as next-hop and started using
431AS6939 -2 +2
AS6539 -1 +1
AS1280 -1 +1
AS6939 -4 +4
AS1280 -1 +1
AS6539 -1 +1
AS3549 -37 +6
AS4637 -2 +280
AS4637 -294 +4
AS15412 -143 +0
AS18101 -143 +0
AS15412 -0 +142
AS18101 -0 +142
AS10029 -143 +280
AS10029 -294 +145
(a) Path changes between Feb-08-2009 and Feb-09-2009
(b) Path changes between Feb-10-2009 and Feb-11-2009
Figure 8: Representation of case study I.
AS4637 instead. Just from that observation it is possible to conjec-
ture that one of these two ASes was responsible for the changes,
and in fact, considering Feb-08 and Feb-09, both ASes have the
same ∆F value. On the next day almost the reverse event hap-
pens, with ASes leaving AS4637 and starting to use AS15412 as
next-hop. But it can be seen that AS4637 still has a path towards
the preﬁx and it still is used by some ASes as next-hop. This fact
indicates that AS4637 is probably not the actor responsible for the
event.
It is also necessary to observe that AS15412 and AS18101 are
not seen in our dataset at Feb-09 and Feb-10 (no paths passing
through them). Hence we cannot say exactly if the cause is one
or the other or even a link leaving one of them, narrowing down the
set of candidates to AS15412, AS18101 and AS10029 (and links).
However, in other days of the event the same structure of the ﬁgures
was observed, but there were paths passing through AS15412 and
AS18101. This indicates that in fact many paths left (preferred)
AS15412 as next-hop due its actions, not AS18101 or AS10029.
Following the majority rule, PathMiner selected AS15412 as sin-
gle actor of the event and therefore, it was able to capture the dis-
cussion presented above.
7.3.2 Case study II
In this case study we explore the second event for the year of
2012 shown in Table 4. The event involves 4 preﬁxes, 65 ASes, and
occurs on 44 days during the year. Figures 9(a) and 9(b) present
the simpliﬁed dynamics of the changes for 2 days, Jan-10-2012
and Jan-11-2012. This case study seems similar to the previous
one, since we can observe that over the time ASes are alternating
their next-hops (towards the four preﬁxes) between AS35320 and
AS29632. Simply looking at those ﬁgures it is possible to narrow
down the cause to one of these two ASes (or the links between them
and AS42418). The question that arises is: why did PathMiner
chose AS29632? It turns out that for many of the 44 days of the
event, some of ASes leaving next-hop AS29632 started reaching
two of the four destinations by paths not passing through AS35320.
Therefore, either AS29632 or two other ASes (at the same time)
are the causes. PathMiner identiﬁes AS29632 as actor, capturing
the idea that the simplest explanation is the most likely one.
7.3.3 Case study III
Our last case study discusses an event for which PathMiner was
not able to identify a single network element responsible for the
whole event. The event is the one on the ﬁrst row of Table 4 for
the year of 2005. The event involves 2 preﬁxes, 54 ASes and it
happens on 200 days of the year. However PathMiner was not able
to ﬁnd a single network element responsible for changes in at least
100 days. Why did that happen? A closer look at the event shows
us that the assumptions over which PathMiner is built are not valid.
In fact, this is a strange case. Figures 10(a) and 10(b) present two
typical subgraphs describing the changes over the days of the event.
First, we note that the structure of the graph is completely differ-
ent of our two previous case studies. The second, and key, fact is
that the event contains only two preﬁxes, but we can see three gray
nodes in the ﬁgures (gray nodes are those hosting the preﬁxes of
the event). Denoting those two preﬁxes by preﬁx 1 and preﬁx 2,
through data examination it was possible to see that: i) at Jan-11
preﬁxes 1 and 2 were being hosted at AS23918 and AS29257 re-
spectively; ii) at Jan-12 preﬁx 1 was being hosted at AS29257 and
at AS31050 (which does not seem to be a normal situation) and
preﬁx 2 was being hosted at AS23918; and iii) at Jan-13 preﬁxes
are hosted as at Jan-11.
Over the 200 days of the event this alternating state was repeated.
In summary, it can be seen that is hard to ﬁnd one network element
that can be responsible for these changes. More speciﬁcally, our
assumption of a single actor causing the event does not seem to be
valid here – it appears that a set of coordinated changes is being
implemented through actions of multiple ASes.
8. RELATED WORK
There is a considerable amount of literature about BGP due to its
importance to the global Internet. In this section we discuss how
PathMiner differs from existing work.
BGP event detection: BGP event detection has been studied in
a variety of ways. Most work on event detection relies on BGP
update messages in order to analyze path changes. For example,
the authors in [20] proposed a methodology to identify high impact
BGP routing changes. However their scope is different from ours,
since in their context the term high impact is related to the impact
in the network trafﬁc leaving a speciﬁc ISP and not in terms of
changes propagating throughout the network.
In [17, 16] the authors propose a way to identify temporal event
boundaries in the stream of update messages and a visualization
tool that allows users to narrow down and infer root causes. Our
work, on the other hand, does not rely on inferring the state of the
routing system by using update messages (in fact this is a hard task,
since in most cases internal AS policies are unknown). Instead, we
432AS3356 -131 +0
AS8468 -4 +4
AS6939 -20 +16
AS13237 -4 +4
AS3356 -0 +133
AS8468 -4 +4
AS6939 -16 +20
AS13237 -4 +4
AS35320 -470 +0
AS29632 -6 +667
AS35320 -0 +462
AS29632 -667 +6
AS43418 -476 +667
AS43418 -667 +468
AS50723 -115 +153
AS39307 -116 +154
AS39322 -131 +186
AS50723 -153 +113
AS39307 -154 +114
AS39322 -186 +129
(a) Path changes between Jan-10-2012 and Jan-11-2012
(b) Path changes between Jan-11-2012 and Jan-12-2012
Figure 9: Representation of case study II.
AS1299 -3 +75
AS1239 -70 +18
AS6939 -31 +2
AS6939 -2 +29
AS1299 -75 +2
AS1239 -18 +74
AS286 -86 +85
AS4725 -0 +28
AS286 -85 +85
AS29257 -150 +8
AS1273 -5 +0
AS209 -1 +3
AS31050 -0 +157
AS31050 -157 +0
AS209 -3 +1
AS29257 -8 +153
AS1273 -0 +4
AS4694 -6 +0
AS2516 -7 +24
AS4725 -30 +0
AS2516 -24 +9
AS4694 -0 +5
AS17675 -42 +21
AS4716 -69 +94
AS4716 -94 +68
AS17675 -21 +41
AS23918 -111 +115
AS23918 -115 +109
(a) Path changes between Jan-11-2005 and Jan-12-2005
(b) Path changes between Jan-12-2005 and Jan-13-2005
Figure 10: Representation of case study III.
use real daily snapshots of the network to perform a large scale
event identiﬁcation.
The authors of [11] use tensor factorization techniques (real, not
boolean) to infer events in the stream of BGP updates. However,
since they use a path-based representation they are restricted to a
small set of monitors. Moreover, since they work with data ob-
tained at the granularity of minutes their strategy is not able to
identify large scale events involving hundreds of sources, possibly
months apart.
Finally, it is important to mention that working with BGP up-
dates demands extra processing in order to clean the data. In our
approach we use BGP RIBs, i.e., snapshots of the interdomain rout-
ing system , which avoids the complex process of update messages
cleaning and allows PathMiner to scale over long timescales.
Root cause analysis: the second component of PathMiner, de-
scribed in Section 7, consists of a technique to identify (or at least
narrow down) possible ASes (or links) triggering large scale events.
Although sounding related to root cause analysis, as in [14] and
[10], it is important to remark that our requirements and assump-
tions differ signiﬁcantly. On one hand, general root cause iden-
tiﬁcation systems are real time, work with BGP update messages
(sometimes with information coming from external sources) and
are interested at identifying causes of any path changes. On the
other hand, differently of PathMiner, those systems are not capa-
ble, of identifying large events and narrowing down causes using
just routing tables.
BGP path discovery: as mentioned in Section 8 our datasets
do not contain paths from every source to every destination and
even for those we have, the issue of missing data arises. Therefore,
we note that PathMiner could beneﬁt from techniques that allow it
to have better snapshots of the global interdomain routing system.
Among recent works on this direction are [15], [13] and [12].
Boolean Tensor Factorization: in this work we did not aim at a
general approach for solving instances of the BTF problem coming
from an abitrary application. In fact, among recent works trying to
solve the general BTF problem are [7] and [9]. The former is de-
signed to ﬁnd blocks of closed relations (i.e., equivalent to blocks
with density 1), which is too strong a requirement for our appli-
cation. The latter would suit our needs, but although it does not
impose any formal requirement for volume and density, unfortu-
nately the available implementation did not scale for our datasets
due to the amount of data analyzed by PathMiner.
9. CONCLUSIONS AND FUTURE WORK
In this work we presented PathMiner, a system capable of identi-
fying and analyzing high impact events in the interdomain routing
system of the Internet. We started by giving a formal deﬁnition of
the problem and discussing how to prepare the data and how to deal
with missing data. In its ﬁrst phase PathMiner has the advantage
of working with a next-hop representation of the AS-level Internet,
which allows PathMiner to naturally combine paths obtained from
multiple sources.
In order to identify events we proposed a new heuristic to solve
the Boolean Tensor Factorization problem, since algorithms cur-
rently available in the literature were not scalable to our datasets.
Using datasets spanning 9 years of routing in the Internet we
showed that PathMiner is able to ﬁnd many large and dense events.
Next, we addressed the challenge of discovering network ele-
ments (ASes or AS-links) that were likely the actors responsible
for the event occurrence. Our methodology, based on concepts bor-
rowed from classiﬁcation theory, was able to identify possible event
causes in most of the events we found. One key aspect of Path-
Miner is its ability to look at the same event re-occurring many
times, which helps the process eliminating event cause candidates.
Finally, we presented 3 case studies, for large events, exemplifying
all these aspects of PathMiner.
433To the best of our knowledge, PathMiner is the ﬁrst system ca-
pable of exploring the amount of information we analyzed, ﬁnding
daily large routing events and recognizing that such events re-occur
many times during the period of one year, in some cases months
apart.
In future work we intend to address the need to better under-
stand cases where PathMiner is not capable of ﬁnding a single ac-
tor responsible for an event (as exempliﬁed in our third case study).
Moreover, we are interested in the possibility of using PathMiner to
explore persistent routing changes, i.e., considering only changes
that were not quickly undone in the system. Such studies might
have the potential to expose interesting structural reorganization of
the AS-level Internet.
10. ACKNOWLEDGEMENTS
This material is based upon work supported by the National
Science Foundation under grant numbers CNS-0905565, CNS-
1018266, CNS-1012910, and CNS-1117039, and supported by the
Army Research Ofﬁce under grant W911NF-11-1-0227. We are
grateful to the anonymous reviewers and to our shepherd, Alex
Snoeren, for their valuable comments. We also thank Evimaria
Terzi and Dora Erdos for the helpful discussions.
11. REFERENCES
[1] Hadoop. http://hadoop.apache.org.
[2] Ripe’s routing information service raw data project.
http://www.ripe.net/data-tools/stats/
ris/ris-raw-data.
[3] Spark. http://spark.apache.org.
[4] University of oregon route views project.
http://www.routeviews.org.
[5] Michael W. Berry, Murray Browne, Amy N. Langville,
V. Paul Pauca, and Robert J. Plemmons. Algorithms and
applications for approximate nonnegative matrix
factorization. Computational Statistics & Data Analysis,
52(1):155–173, September 2007.
[6] A. Broido and kc claffy. Analysis of RouteViews BGP data:
policy atoms. In NRDM, 2001.
[7] Loïc Cerf, Jérémy Besson, Céline Robardet, and
Jean-François Boulicaut. Closed Patterns Meet n-ary
Relations. ACM Trans. Knowl. Discov. Data, 3(1), 2009.
[8] Andrzej Cichocki, Rafal Zdunek, Anh Huy Phan, and
Shun-ichi Amari. Nonnegative Matrix and Tensor
Factorizations: Applications to Exploratory Multi-way Data
Analysis and Blind Source Separation. Wiley Publishing,
2009.
[9] Dóra Erdös and Pauli Miettinen. Walk ’n’ Merge: A Scalable
Algorithm for Boolean Tensor Factorization. In Proceedings
of the 13th International Conference on Data Mining, ICDM
’13, pages 1037–1042. IEEE, 2013.
[10] Anja Feldmann, Olaf Maennel, Z. Morley Mao, Arthur
Berger, and Bruce Maggs. Locating Internet Routing
Instabilities. In Proceedings of SIGCOMM Conference,
SIGCOMM ’04, pages 205–218. ACM, 2004.
[11] K. Glass, R. Colbaugh, and M. Planck. Automatically
identifying the sources of large Internet events. In
Intelligence and Security Informatics (ISI), 2010 IEEE
International Conference on, pages 108–113, 2010.
[12] Enrico Gregori, Alessandro Improta, Luciano Lenzini,
Internet Measurement Conference, IMC ’12, pages 253–264.
ACM, 2012.
[13] Yihua He, Georgos Siganos, Michalis Faloutsos, and
Srikanth Krishnamurthy. Lord of the Links: A Framework
for Discovering Missing Links in the Internet Topology.
IEEE/ACM Trans. Netw., 17(2):391–404, April 2009.
[14] Umar Javed, Italo Cunha, David Choffnes, Ethan
Katz-Bassett, Thomas Anderson, and Arvind Krishnamurthy.
PoiRoot: Investigating the Root Cause of Interdomain Path
Changes. In Proceedings of SIGCOMM Conference,
SIGCOMM ’13, pages 183–194. ACM, 2013.
[15] Akmal Khan, Taekyoung Kwon, Hyun-chul Kim, and
Yanghee Choi. AS-level Topology Collection Through
Looking Glass Servers. In Proceedings of the 2013 Internet
Measurement Conference, IMC ’13, pages 235–242. ACM,
2013.
[16] Mohit Lad, Dan Massey, and Lixia Zhang. Visualizing
Internet Routing Changes. IEEE Transactions on
Visualization and Computer Graphics, 12(6):1450–1460,
November 2006.
[17] Mohit Lad, Lixia Zhang, and Daniel Massey. Link-rank: A
Graphical Tool for Capturing BGP Routing Dynamics. In
Proceedings of the Network Operations and Management
Symposium, NOMS ’04, pages 627–640. IEEE, 2004.
[18] Pauli Miettinen. Boolean Tensor Factorizations. In
Proceedings of the 11th International Conference on Data
Mining, ICDM ’11, pages 447–456. IEEE, 2011.
[19] Y. Rekhter and T. Li. A Border Gateway Protocol (BGP-4).
RFC Editor, 1995.
[20] Jian Wu, Zhuoqing Morley Mao, Jennifer Rexford, and Jia
Wang. Finding a Needle in a Haystack: Pinpointing
Signiﬁcant BGP Routing Changes in an IP Network. In
Proceedings of the Symposium on Networked Systems
Design & Implementation, NSDI’05, pages 1–14. USENIX
Association, 2005.
Appendix A - 3D-FACTORIZATION Algorithm
Algorithm 3: 3D-FACTORIZATION
Data: S, set of triples of the form (I, J, K), and thresholds
γ and β
1 F ← ∅
2 while S 6= ∅ do
3
4
5
s ← pick and do not remove an element of S
S′ ← {x : x ∈ S and dB(x, s) ≤ γ}
ﬁnd maximal S′′ ⊆ S′ such that max
x,y∈S ′′
dB(x, y) ≤ γ
6
7
8
9
10
11
12
13
14
15
16
17
if |S′′| > 1 then
y ← COMBINE-UNION(S′′)
S ← S\S′′
S ← S ∪ {y}
else
F ← F ∪ {s}
S ← S\{s}
S′ ← {x : x ∈ S, sB(x, s) ≥ β and
COMBINE-INTER(s, x) 6= s}
if |S′| > 0 then
s′ ← arg maxx∈S ′ sB(s, x)
y ← COMBINE-INTER(s, s′)
S ← S ∪ {y}
Lorenzo Rossi, and Luca Sani. On the incompleteness of the
as-level graph: A novel methodology for bgp route collector
placement. In Proceedings of the 2012 ACM Conference on
18 return F
434