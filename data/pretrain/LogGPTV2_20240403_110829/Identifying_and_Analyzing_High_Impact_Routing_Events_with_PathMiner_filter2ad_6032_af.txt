### AS7018, AS18881, AS55410

First, it is evident that the ranking of Autonomous Systems (ASes) influences the order in the three columns of the table. However, there is a significant overlap among the top-20 ASes in each ranking, indicating that certain major actors frequently trigger large, recurring events. Second, across all three rankings, we can identify several large ASes that peer with other large ASes and are integral parts of the Internet's core. For example, AS174 (Cogent), AS6939 (Hurricane Electric), AS3549 (GBLX), and AS3356 (Level3) are consistently in the top-20 of each list. This suggests that some ASes in the core are responsible for a substantial amount of network reorganization. It is important to note that our sampling strategy for ASes may influence these results, and our original dataset does not cover the complete AS-level topology of the Internet, which was the motivation behind our sampling approach.

### 7.3 Case Studies

In this section, we present three case studies to demonstrate PathMiner's ability to identify high-impact event actors. Case studies I and II illustrate typical scenarios where PathMiner can identify a network element (or set of elements) whose actions explain the occurrence of an event. Many events share similar structures, as shown in the online supplementary material. Case study III, however, highlights a scenario where PathMiner does not always succeed, and we discuss the reasons why the assumptions underlying PathMiner are not satisfied.

#### 7.3.1 Case Study I

Our first case study examines the second event for the year 2009, as presented in Table 4. In this event, 90 ASes changed their next-hops towards one prefix over 91 days during the year. We selected two pairs of consecutive days to illustrate the nature of the event. Figures 8(a) and 8(b) depict the most relevant part of the network. From February 8, 2009, to February 9, 2009, many ASes stopped using AS15412 as their next-hop and started using AS4637 instead. This observation suggests that one of these two ASes was responsible for the changes. On the next day, the reverse occurred, with ASes leaving AS4637 and returning to AS15412. However, AS4637 still had paths towards the prefix, indicating that it was likely not the actor responsible for the event.

It is also worth noting that AS15412 and AS18101 were not seen in our dataset on February 9 and 10 (no paths passing through them). Therefore, we cannot determine if the cause is one or the other, or even a link leaving one of them. The candidates are narrowed down to AS15412, AS18101, and AS10029 (and links). In other days of the event, the same structure was observed, but with paths passing through AS15412 and AS18101, suggesting that many paths left (preferred) AS15412 due to its actions, not AS18101 or AS10029. Following the majority rule, PathMiner selected AS15412 as the single actor of the event, capturing the discussion above.

#### 7.3.2 Case Study II

This case study explores the second event for the year 2012, as shown in Table 4. The event involves four prefixes, 65 ASes, and occurs over 44 days during the year. Figures 9(a) and 9(b) present the simplified dynamics of the changes for January 10, 2012, and January 11, 2012. Similar to the previous case, ASes alternated their next-hops between AS35320 and AS29632. By examining these figures, we can narrow down the cause to one of these two ASes (or the links between them and AS42418).

The question arises: why did PathMiner choose AS29632? For many of the 44 days of the event, some ASes leaving next-hop AS29632 started reaching two of the four destinations by paths not passing through AS35320. Therefore, either AS29632 or two other ASes (at the same time) are the causes. PathMiner identified AS29632 as the actor, capturing the idea that the simplest explanation is the most likely one.

#### 7.3.3 Case Study III

Our final case study discusses an event where PathMiner was unable to identify a single network element responsible for the entire event. The event, as shown in the first row of Table 4 for the year 2005, involves two prefixes, 54 ASes, and occurs over 200 days of the year. PathMiner could not find a single network element responsible for changes in at least 100 days. Why did this happen? A closer look at the event reveals that the assumptions underlying PathMiner are not valid in this case.

Figures 10(a) and 10(b) present two typical subgraphs describing the changes over the days of the event. First, the structure of the graph is different from the previous case studies. Second, and key, the event contains only two prefixes, but we see three gray nodes in the figures (gray nodes host the prefixes of the event). Denoting these two prefixes as prefix 1 and prefix 2, we observed:
- On January 11, prefixes 1 and 2 were hosted at AS23918 and AS29257, respectively.
- On January 12, prefix 1 was hosted at AS29257 and AS31050 (an unusual situation), and prefix 2 was hosted at AS23918.
- On January 13, the prefixes returned to their original hosts.

This alternating state was repeated over the 200 days of the event. It is challenging to find a single network element responsible for these changes. Our assumption of a single actor causing the event does not seem valid here; it appears that a set of coordinated changes is being implemented through the actions of multiple ASes.

### 8. Related Work

There is a considerable body of literature on BGP due to its importance to the global Internet. In this section, we discuss how PathMiner differs from existing work.

#### BGP Event Detection

BGP event detection has been studied in various ways. Most work relies on BGP update messages to analyze path changes. For example, the authors in [20] proposed a methodology to identify high-impact BGP routing changes. However, their scope differs from ours, as they define "high impact" in terms of network traffic leaving a specific ISP rather than changes propagating throughout the network.

In [17, 16], the authors propose a method to identify temporal event boundaries in the stream of update messages and a visualization tool to help users infer root causes. Our work, on the other hand, does not rely on inferring the state of the routing system using update messages. Instead, we use real daily snapshots of the network to perform large-scale event identification.

The authors of [11] use tensor factorization techniques to infer events in the stream of BGP updates. However, since they use a path-based representation, they are restricted to a small set of monitors. Additionally, their data granularity is at the minute level, making it difficult to identify large-scale events involving hundreds of sources, possibly months apart.

Finally, working with BGP updates requires extra processing to clean the data. In our approach, we use BGP RIBs (snapshots of the interdomain routing system), which avoids the complex process of cleaning update messages and allows PathMiner to scale over long timescales.

#### Root Cause Analysis

The second component of PathMiner, described in Section 7, consists of a technique to identify (or at least narrow down) possible ASes (or links) triggering large-scale events. Although related to root cause analysis, as in [14] and [10], it is important to note that our requirements and assumptions differ significantly. General root cause identification systems are real-time, work with BGP update messages (sometimes with information from external sources), and aim to identify causes of any path changes. In contrast, PathMiner is not capable of identifying large events and narrowing down causes using just routing tables.

#### BGP Path Discovery

As mentioned in Section 8, our datasets do not contain paths from every source to every destination, and missing data is a common issue. PathMiner could benefit from techniques that provide better snapshots of the global interdomain routing system. Recent works in this direction include [15], [13], and [12].

#### Boolean Tensor Factorization

In this work, we did not aim for a general approach to solving instances of the BTF problem from arbitrary applications. Among recent works trying to solve the general BTF problem are [7] and [9]. The former is designed to find blocks of closed relations (i.e., equivalent to blocks with density 1), which is too strong a requirement for our application. The latter would suit our needs, but the available implementation did not scale for our datasets due to the amount of data analyzed by PathMiner.

### 9. Conclusions and Future Work

In this work, we presented PathMiner, a system capable of identifying and analyzing high-impact events in the interdomain routing system of the Internet. We provided a formal definition of the problem, discussed data preparation, and addressed missing data. In its first phase, PathMiner uses a next-hop representation of the AS-level Internet, allowing it to naturally combine paths obtained from multiple sources.

To identify events, we proposed a new heuristic to solve the Boolean Tensor Factorization problem, as existing algorithms were not scalable to our datasets. Using datasets spanning nine years of Internet routing, we showed that PathMiner can find many large and dense events. Next, we addressed the challenge of discovering network elements (ASes or AS-links) likely responsible for event occurrence. Our methodology, based on classification theory, identified possible event causes in most of the events we found. A key aspect of PathMiner is its ability to recognize recurring events, which helps eliminate event cause candidates.

We presented three case studies, exemplifying large events and demonstrating all these aspects of PathMiner. To the best of our knowledge, PathMiner is the first system capable of analyzing such a large amount of information, finding daily large routing events, and recognizing that such events recur many times during a year, sometimes months apart.

In future work, we intend to address cases where PathMiner cannot find a single actor responsible for an event (as exemplified in our third case study). Additionally, we are interested in using PathMiner to explore persistent routing changes, i.e., considering only changes that were not quickly undone in the system. Such studies might have the potential to expose interesting structural reorganizations in the AS-level Internet.

### 10. Acknowledgements

This material is based upon work supported by the National Science Foundation under grant numbers CNS-0905565, CNS-1018266, CNS-1012910, and CNS-1117039, and supported by the Army Research Office under grant W911NF-11-1-0227. We are grateful to the anonymous reviewers and to our shepherd, Alex Snoeren, for their valuable comments. We also thank Evimaria Terzi and Dora Erdos for the helpful discussions.

### 11. References

[1] Hadoop. http://hadoop.apache.org.
[2] RIPE’s Routing Information Service Raw Data Project. http://www.ripe.net/data-tools/stats/ris/ris-raw-data.
[3] Spark. http://spark.apache.org.
[4] University of Oregon Route Views Project. http://www.routeviews.org.
[5] Michael W. Berry, Murray Browne, Amy N. Langville, V. Paul Pauca, and Robert J. Plemmons. Algorithms and Applications for Approximate Nonnegative Matrix Factorization. Computational Statistics & Data Analysis, 52(1):155–173, September 2007.
[6] A. Broido and kc claffy. Analysis of RouteViews BGP Data: Policy Atoms. In NRDM, 2001.
[7] Loïc Cerf, Jérémy Besson, Céline Robardet, and Jean-François Boulicaut. Closed Patterns Meet n-ary Relations. ACM Trans. Knowl. Discov. Data, 3(1), 2009.
[8] Andrzej Cichocki, Rafal Zdunek, Anh Huy Phan, and Shun-ichi Amari. Nonnegative Matrix and Tensor Factorizations: Applications to Exploratory Multi-way Data Analysis and Blind Source Separation. Wiley Publishing, 2009.
[9] Dóra Erdös and Pauli Miettinen. Walk 'n' Merge: A Scalable Algorithm for Boolean Tensor Factorization. In Proceedings of the 13th International Conference on Data Mining, ICDM '13, pages 1037–1042. IEEE, 2013.
[10] Anja Feldmann, Olaf Maennel, Z. Morley Mao, Arthur Berger, and Bruce Maggs. Locating Internet Routing Instabilities. In Proceedings of SIGCOMM Conference, SIGCOMM '04, pages 205–218. ACM, 2004.
[11] K. Glass, R. Colbaugh, and M. Planck. Automatically Identifying the Sources of Large Internet Events. In Intelligence and Security Informatics (ISI), 2010 IEEE International Conference on, pages 108–113, 2010.
[12] Enrico Gregori, Alessandro Improta, Luciano Lenzini, Lorenzo Rossi, and Luca Sani. On the Incompleteness of the AS-Level Graph: A Novel Methodology for BGP Route Collector Placement. In Proceedings of the 2012 ACM Conference on Internet Measurement Conference, IMC '12, pages 253–264. ACM, 2012.
[13] Yihua He, Georgos Siganos, Michalis Faloutsos, and Srikanth Krishnamurthy. Lord of the Links: A Framework for Discovering Missing Links in the Internet Topology. IEEE/ACM Trans. Netw., 17(2):391–404, April 2009.
[14] Umar Javed, Italo Cunha, David Choffnes, Ethan Katz-Bassett, Thomas Anderson, and Arvind Krishnamurthy. PoiRoot: Investigating the Root Cause of Interdomain Path Changes. In Proceedings of SIGCOMM Conference, SIGCOMM '13, pages 183–194. ACM, 2013.
[15] Akmal Khan, Taekyoung Kwon, Hyun-chul Kim, and Yanghee Choi. AS-Level Topology Collection Through Looking Glass Servers. In Proceedings of the 2013 Internet Measurement Conference, IMC '13, pages 235–242. ACM, 2013.
[16] Mohit Lad, Dan Massey, and Lixia Zhang. Visualizing Internet Routing Changes. IEEE Transactions on Visualization and Computer Graphics, 12(6):1450–1460, November 2006.
[17] Mohit Lad, Lixia Zhang, and Daniel Massey. Link-Rank: A Graphical Tool for Capturing BGP Routing Dynamics. In Proceedings of the Network Operations and Management Symposium, NOMS '04, pages 627–640. IEEE, 2004.
[18] Pauli Miettinen. Boolean Tensor Factorizations. In Proceedings of the 11th International Conference on Data Mining, ICDM '11, pages 447–456. IEEE, 2011.
[19] Y. Rekhter and T. Li. A Border Gateway Protocol (BGP-4). RFC Editor, 1995.
[20] Jian Wu, Zhuoqing Morley Mao, Jennifer Rexford, and Jia Wang. Finding a Needle in a Haystack: Pinpointing Significant BGP Routing Changes in an IP Network. In Proceedings of the Symposium on Networked Systems Design & Implementation, NSDI'05, pages 1–14. USENIX Association, 2005.

### Appendix A - 3D-FACTORIZATION Algorithm

**Algorithm 3: 3D-FACTORIZATION**

**Data:** S, set of triples of the form (I, J, K), and thresholds γ and β

1. F ← ∅
2. while S ≠ ∅ do
3.   s ← pick and do not remove an element of S
4.   S′ ← {x : x ∈ S and dB(x, s) ≤ γ}
5.   find maximal S′′ ⊆ S′ such that max<sub>x,y∈S′′</sub> dB(x, y) ≤ γ
6.   if |S′′| > 1 then
7.     y ← COMBINE-UNION(S′′)
8.     S ← S \ S′′
9.     S ← S ∪ {y}
10.  else
11.    F ← F ∪ {s}
12.    S ← S \ {s}
13.    S′ ← {x : x ∈ S, sB(x, s) ≥ β and COMBINE-INTER(s, x) ≠ s}
14.    if |S′| > 0 then
15.      s′ ← arg max<sub>x∈S′</sub> sB(s, x)
16.      y ← COMBINE-INTER(s, s′)
17.      S ← S ∪ {y}
18. return F