29 mov [data], r1
31 inc data
32 dec r4
34 push r4
36 mov r4, r4
38 jnz $+2
40 GG
41 pop r4
43 jmp $-22
45 GG
for i in xrange(0x1b):
    flag[i] = (flag[i] * 0x3f + 0x7b) % 0x80
0  mov r4, r0
2  jnz $+2
4  GG
5  push 0x3E
8  push 0x1a
11 push 0x56
14 push 0x0d
17 push 0x52
20 push 0x13
23 push 0x58
26 push 0x5a
29 push 0x6e
32 push 0x5c
35 push 0x0f
38 push 0x5a
41 push 0x46
44 push 0x07
47 push 0x09
50 push 0x52
53 push 0x25
56 push 0x5c
59 push 0x4c 
62 push 0x0a
65 push 0x0a
68 push 0x56
71 push 0x33
74 push 0x40
77 push 0x15
80 push 0x07
83 push 0x58
86 push 0x0f
89 mov r0, 0
93 mov r3, 0x1c
97 mov r1, [data]
99 pop r2
101 cmp r1, r2
103 jz $+3
105 GG
106 inc data
107 dec r3
109 mov r4, r3
111 jnz $+5
113 mov r0, 1
117 GG
118 jmp $-21
120 GG
……
Qt
correct=DQYHTONIJLYNDLA
...
b2w
import string
a = [i for i in xrange(0x80)]
b = [(i * 0x3f + 0x7b) % 0x80 for i in a]
a = ''.join(map(chr, a))
b = ''.join(map(chr, b))
t = string.maketrans(b, a)
correct = [0x0f, 0x58, 0x07, 0x15, 0x40, 0x33, 0x56, 0x0a, 0x0a, 0x4c, 
0x5c, 0x25, 0x52, 0x09, 0x07, 0x46, 0x5a, 0x0f, 0x5c, 0x6e, 0x5a, 0x58, 
0x13, 0x52, 0x0d, 0x56, 0x1a, 0x3e]
flag = ''.join(map(chr, correct)).translate(t)
print flag
AEEEEEEEEEEEEEE => AGIKMOQSUWYACEG
BEEEEEEEEEEEEEE => BGIKMOQSUWYACEG
DAAAAAAAAAAAAAA => DCEGIKMOQSUWYAC
DBAAAAAAAAAAAAA => DDEGIKMOQSUWYAC
DOBAAAAAAAAAAAA => DQFGIKMOQSUWYAC
>>> a = 'AEEEEEEEEEEEEEE'
>>> b = 'AGIKMOQSUWYACEG'
>>> c = 'DQYHTONIJLYNDLA'
>>> flag  = ''.join(map(chr, [((ord(c[i]) - 65) - (ord(b[i]) - ord(a[i])) % 
26) % 26 + 65 for i in xrange(15)]))
>>> flag
'DOUBLEBUTTERFLY'
400E66 
400F38 
402C7F
matlab
from pwn import *
key = 'LCTF{LcTF_1s_S0Oo0Oo_c0o1_6uT_tH1S_iS_n0t_fL4g}'
f = open('out.wav','rb')
d = f.read()
f.close()
res = ''
def de1(a,k):
    t = k * 0x101
    t = t & 0xffff
    return a ^ t
j = 0
h = []
r = []
for i in xrange(len(d)/2):
    t = d[i*2:i*2+2]
    tt = u16(t)
    tt = (de1(tt,ord(key[j % len(key)])))
    if tt >= 0x8000:
        tt -= 0x10000
    j += ord(key[j % len(key)])
    if i %2 == 0:
        h.append(tt/200.0)
    else:
        r.append(tt/200.0)
for i in xrange(len(h)):
    print h[i],r[i]
 Lunatic Game 
GHChaskell binary
ip4023C8ﬂag
  Lunatic 
b16
8B7A
aaaa4457415d baaa4457415e
LCTF
ﬂag
d = load("C:\Users\pzhxbz\Desktop\lctf\test_out");
x=d(:,1);
y=d(:,2);
hold on;
for i = 1:44
    for j = 1:2000
            index = i*2000+j;
            plot(x(index) + i*200,-y(index),'r.','markersize',30);
    end
end
hold off;
%LCTF{NOW_YOU_GOT_A_OSCILLOSCOPE_MEDIA_PLAYER}
from pwn import *
table = 'QWERTYUIOP!@#$%^'
def b16decode(s):
    res = ''
    for i in s:
        a = table.index(i)
        res += hex(a)[-1]
    return res.decode('hex')
de1 = (b16decode('IQURUEURYEU#WRTYIPUYRTI!WTYTE!WOR%Y$W#RPUEYQQ^EE')) 
for i in xrange(len(de1)/4):
    print(hex(u32(de1[i*4:(i+1)*4])))
MSP430
RC4
mainkeygen
LCTFLCTFﬂag
misc
 emmmm
LCTF{5d7b9adcbe1c629ec722529dd12e5129}
osu!
https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/?tdsourcetag=s_pctim_ai
omsg
ﬂag LCTF{OSU_1S_GUUUD}
gg bank
checkfriend
from Crypto.Cipher import ARC4
from pwn import *
s = 
'2db7b1a0bda4772d11f04412e96e037c370be773cd982cb03bc1eade'.decode('hex')
k = 'LCTF'
for i in xrange(255):
    kk = k
    kk += chr(i * 3 & 0xff)
    kk += chr(i * 2 & 0xff)
    kk += chr( ((i & 0x74 )  0:
            break
        else:
            time.sleep(1)
    transaction_dict2["from"] = Web3.toChecksumAddress(addr)
    now_nouce = 
runweb3.eth.getTransactionCount(Web3.toChecksumAddress(addr))
    transaction_dict2["nonce"] = now_nouce
    r = runweb3.eth.account.signTransaction(transaction_dict2, priv)
    try:
        runweb3.eth.sendRawTransaction(r.rawTransaction.hex())
    except Exception as e:
        print("error2", e)
        print(args)
        return
    transaction_dict3["nonce"] = now_nouce + 1
    transaction_dict3["from"] = Web3.toChecksumAddress(addr)
    r = runweb3.eth.account.signTransaction(transaction_dict3, priv)
    try:
        runweb3.eth.sendRawTransaction(r.rawTransaction.hex())
    except Exception as e:
        print("error3", e)
        print(args)
        return
    print(args, "Done")
def main():
    account_set = run_account()
    while True: