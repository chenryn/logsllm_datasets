CRASHFINDER and the exhaustive fault
injections. More
speciﬁcally, for each benchmark, we measure the total time
used for (1) CRASHFINDER STATIC, (2) CRASHFINDER,
which includes CRASHFINDER STATIC, CRASHFINDER DY-
NAMIC and selective fault injections to identify LLCs and, (3)
exhaustive fault injections to ﬁnd LLCs.
457457
2) Precision: The precision is an indication of
the
false-positives produced by CRASHFINDER STATIC and
CRASHFINDER. To measure the precision, we inject 200
faults randomly at each static program location identiﬁed by
CRASHFINDER STATIC or CRASHFINDER, and measure the
latency. If none of the injections at the location result in
an LLC, we declare it to be a false positive. Note that we
choose 200 fault injections per location to balance time and
comprehensiveness. If we increase the number of faults, we
may ﬁnd more LLC causing locations, thus decreasing the
false positives. Thus, this method gives us a conservative upper
bound on the false-positives of the technique.
3) Recall: The recall is an indication of the false-negatives
produced by CRASHFINDER STATIC and CRASHFINDER.
To measure the recall of CRASHFINDER STATIC and
CRASHFINDER, we randomly inject 3,000 faults for each
benchmark and calculate the fraction of the observed LLCs that
were covered by CRASHFINDER STATIC and CRASHFINDER
respectively. Thus 30,000 faults in total are injected over ten
benchmark applications for this experiment. Note that this is
in addition to the 1,000 fault injection experiments performed
in the initial study, which were used to develop the two
techniques. We do not include the initial injections in the recall
measurement to avoid biasing the results.
4) Heuristics for Sampling: As mentioned in Section V,
there are two heuristics used by CRASHFINDER to reduce
the space of fault injections it has to perform. The ﬁrst is
to limit the chosen instances to unique dynamic instances of
control-ﬂow patterns in which the static instructions appear,
and the second is to limit the number of faults injected in the
dynamic instances to two faults per instance. These heuristics
may lead to loss in coverage. We investigate the efﬁcacy of
these heuristics by varying the parameters used in them and
measure the resulting recall.
VIII. RESULTS
This section presents the results of our experiments for
evaluating CRASHFINDER STATIC and CRASHFINDER. Each
subsection corresponds to a research question (RQ).
A. Performance (RQ1)
We ﬁrst present the results of running CRASHFINDER and
CRASHFINDER STATIC in terms of the number of instructions
in each benchmark, and then examine how much speedup can
CRASHFINDER achieve over exhaustive fault injections.
Table II shows the numbers of instructions for each bench-
mark. In the table, columns Total S.I and Total D.I show
the total numbers of static instructions and dynamic instruc-
tions of each benchmark. Columns CRASHFINDER STATIC
S.I and CRASHFINDER STATIC D.I indicate the numbers of
static instructions and dynamic instructions corresponding to
the static instructions that were found by CRASHFINDER
STATIC as LLC causing locations. Columns CRASHFINDER
S.I and CRASHFINDER D.I show the numbers of static in-
structions and dynamic instances of the static locations that
CRASHFINDER identiﬁed as LLC causing locations. As can
be seen from the table, on average, CRASHFINDER STATIC
identiﬁed 2.99% of static instructions as LLC causing, which
corresponds to about 5.87% of dynamic instructions. In com-
parison, CRASHFINDER further winnowed the number of static
LLC-causing locations to 0.89%, and the number of dynamic
instructions to just 0.385%, thereby achieving a signiﬁcant
reduction in the dynamic instructions. The implications of this
reduction are further investigated in Section IX.
Figure 8 shows the orders of magnitude of time reduction
achieved by using CRASHFINDER STATIC and CRASHFINDER
to ﬁnd LLCs, compared to exhaustive fault
injections,
for each benchmark. In the ﬁgure, CRASHFINDER STATIC
refers to the time taken to run CRASHFINDER STATIC.
CRASHFINDER refers to the time taken to run all three com-
ponents of CRASHFINDER, namely CRASHFINDER STATIC,
CRASHFINDER DYNAMIC and the selective fault
injection
phase. Note that the exhaustive fault injection times are an
estimate based on the number of dynamic instructions that
need to be injected, and the time taken to perform a single
injection. We emphasize that the numbers shown represent the
orders of magnitude in terms of speedup. For example, a value
of 12 in the graph, means that the corresponding technique was
1012 times faster than performing exhaustive fault injections.
In summary, on average CRASHFINDER STATIC achieves a
total of 13.47 orders of magnitude of time reduction whereas
CRASHFINDER achieves 9.29 orders of magnitude of time
reduction over exhaustive fault injecton to ﬁnd LLCs.
We also measured the wall clock time of the different
phases of CRASHFINDER. The geometric means of time taken
for CRASHFINDER STATIC are 23 seconds, for CRASHFINDER
DYNAMIC the time taken is 3.1 hours, while it takes about 3.9
days for the selective fault injection phase. Overall, it takes
about 4 days on average for CRASHFINDER to complete the
entire process. While this may seem large, note that both the
CRASHFINDER DYNAMIC and selective fault injection phases
can be parallelized to reduce the time. We did not however do
this in our experiments.
Fig. 8: Orders of Magnitude of Time Reduction by
CRASHFINDER STATIC and CRASHFINDER compared to ex-
haustive fault injections
B. Precision (RQ2)
Figure 9 shows the precision of CRASHFINDER STATIC
and CRASHFINDER for each benchmark. The average pre-
cision of CRASHFINDER STATIC and CRASHFINDER are
25.42% and 100% respectively. The reason CRASHFINDER
458458
Benchmarks
libquantum
h264ref
blackscholes
hmmer
mcf
ocean
sad
sjeng
cutcp
stencil
Average
Total S.I.
15319
189157
758
92287
4086
21300
3176
33931
3868
2193
36608
Total D.I.
(in million)
870
116
0.13
4774
6737
1061
1982
137
11389
7168
3423
TABLE II: Comparison of Instructions Given by CRASHFINDER and CRASHFINDER STATIC
Metrics
CRASHFINDER
STATIC S.I (%)
1.85%
0.85%
3.29%
0.51%
6.29%
3.46%
4.47%
1.70%
3.13%
4.38%
2.99%
CRASHFINDER
STATIC D.I (%)
9.27%
3.92%
1.81%
3.53%
8.75%
3.11%
5.56%
15.55%
6.35%
0.84%
5.87%
CRASHFINDER S.I
(%)
0.18%
0.14%
0.66%
0.13%
2.62%
0.53%
0.69%
0.16%
0.39%
0.41%
0.89%
CRASHFINDER D.I
(%)
0.011%
0.150%
0.004%
0.437%
1.383%
0.003%
0.473%
0.567%
0.001%
0.819%
0.385%
9:
Precision
Fig.
CRASHFINDER for ﬁnding LLCs in the program
of CRASHFINDER
STATIC
and
Fig. 10: Recall of CRASHFINDER STATIC and CRASHFINDER
has a precision of 100% is that all the false-positives produced
by the static analysis phase (CRASHFINDER STATIC) are
ﬁltered out by the latter two phases, namely CRASHFINDER
DYNAMIC, and selective fault injections. The main reason
why CRASHFINDER STATIC has low precision is because
it cannot statically determine the exact runtime behavior of
variables. For example, a pointer can be saved and loaded
to/from memory in very short intervals, and would not result
in an LLC. This behavior is determined by its runtime control
ﬂow, and cannot be determined at compile time, thus result-
ing in false positives by CRASHFINDER STATIC. However,
CRASHFINDER does not have this problem as it uses dynamic
analysis and selective fault injection.
C. Recall (RQ3)
Figure 10 shows the recall of CRASHFINDER STATIC and
CRASHFINDER. The average recall of CRASHFINDER STATIC
and CRASHFINDER are 92.47% and 90.14% respectively.
Based on the results, we can conclude that (1) CRASHFINDER
STATIC is able to ﬁnd most of the LLC causing locations
showing that the code patterns we identiﬁed are comprehensive
and, (2) our heuristics used in CRASHFINDER DYNAMIC and
selective fault injections do not ﬁlter out many legitimate LLC
locations since there is only a 2.33% difference between the re-
calls of CRASHFINDER STATIC and CRASHFINDER (however,
they ﬁlter out most of the false positives as evidenced by the
high precision of CRASHFINDER compared to CRASHFINDER
STATIC). We will discuss this further in the next subsection.
There are two reasons why CRASHFINDER STATIC does
not achieve 100% recall: (1)There are a few cases as mentioned
in Section IV that do not fall into the three dominant patterns.
(2) While CRASHFINDER STATIC is able to ﬁnd most of the
common cases of LLCs, it does not ﬁnd some cases where the
dependency chain spans multiple function calls. For example,
the return value of an array index calculation can be propagated
through complex function calls and ﬁnally used in the address
offset operations in a loop. This makes the pointer analysis in
LLVM return too many candidates for the pointer target, and
so we truncate the dependence chain. However, there is no
fundamental reason why we cannot handle these cases. Even
without handling the cases, CRASHFINDER ﬁnds 92.47% of
the cases leading to LLCs in the program.
Note that we did not observe any LLCs in the two
benchmark programs stencil and cutcp. This may be because
they have fewer LLC causing locations, and/or they have a
small range of bits which may result in LLCs. This was also
the case in the initial study IV.
D. Efﬁcacy of Heuristics (RQ4)
As mentioned earlier, there are two heuristics used by
CRASHFINDER DYNAMIC to speed up the injections. First, in
the dynamic analysis phase (CRASHFINDER DYNAMIC), only
a few instruction instances are chosen for injection. Second, in
the selective fault injection phase, only a few bits in each of
the chosen locations are injected. We examine the effectiveness
of these heuristics in practice.
In order to understand the LLC-causing errors that are
covered by CRASHFINDER STATIC but not CRASHFINDER,
we manually inspected these injections. We found that all of
459459
the missed errors are due to the second heuristic used by
the selective fault injection phase. None of the missed errors