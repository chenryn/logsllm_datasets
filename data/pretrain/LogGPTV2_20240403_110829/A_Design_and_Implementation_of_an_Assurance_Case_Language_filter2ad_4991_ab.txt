Functional Hazard Analysis (FHA). In addition, it is also
necessary to put forward (and develop) the claim that either
all the identiÔ¨Åed functions are independent, and therefore
have no interactions that could give rise to hazards (G4)
or that any interactions that have been identiÔ¨Åed are non-
hazardous (G3). Figure 3 includes main GSN extensions for
GSN patterns [14]:
‚Ä¢ Parameterized expressions. {System X} and {Function
Y } are parametrized expressions. We can instantiate X
and Y by appropriate (possibly safety critical) system
and function, respectively.
Figure 3. An example of GSN patterns [1]
‚Ä¢ Uninstantiated. Triangles ((cid:2)) attached to nodes indi-
cate that the nodes contain uninstantiated parametrized
expressions. To instantiate the GSN pattern as an as-
surance case, we need to instantiate the expressions.
‚Ä¢ 1 to many expressions (multiplicity). Number of func-
tions are different based on the target system. We can
instantiate the number of functions (n) for the target
system.
‚Ä¢ Choice. The user can select arbitrary sub goals from
the set of sub goals depending on the user system.
A loop construct is also introduced. Figure 4 is a simpli-
Ô¨Åed pattern containing a loop construct in [15]. The loop
Figure 4. A GSN pattern with loop
is represented by the back edge from G2 to S1. Loop
instantiation is done by recursively unfolding the back edge.
For example, in Figure 4, one step unfolding is shown.
632
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
However, the deÔ¨Ånition of loop constructs has not been
well developed, such as the loop counter (n) is given in
an informal way.
D. GSN Modules
In the GSN community standard [14], GSN module
system is deÔ¨Åned. Figure 5 shows the three main constructs













	






 
Figure 5. Main constructs of GSN modules [14]
of GSN modules: module reference, away goal, and contract
module. If a goal G in a module A is supported by the top
goal of module B, then G is linked to the module node
representing B. An away goal is used to refer to a goal in a
module to support a goal in another module. Also, contract
modules are introduced for describing the relationship be-
tween two modules. In the GSN community standard, it is
stated that ‚Äúa contract module containing a deÔ¨Ånition of the
relationships between two modules, deÔ¨Åning how a claim in
one supports the argument in the other. ‚Äù However, there is
insufÔ¨Åcient explanation of contract modules in [14]. There
are several studies of GSN contracts such as [12], but those
are not included in the GSN community standard.
III. A FORMAL DEFINITION OF GSN AND ITS
EXTENSIONS
A. GSN: Basic DeÔ¨Ånitions
We Ô¨Årst deÔ¨Åne the GSN term as follows. Let g, e,
and st be meta-variables for goals, evidence (solution) and
strategies, respectively. For simplicity, we omit other GSN
nodes including context, assumption, and justiÔ¨Åcation nodes.
Each node contains a description string such as ‚ÄúSystem is
dependable.‚Äù This structured deÔ¨Ånition of GSN terms Ô¨Årst
appeared in [27].
DeÔ¨Ånition 1 (GSN term T ):
T ::= ‚ô¶ | (g, ‚ô¶) | (g, e) | (g, st, (T1, . . . , Tn))
‚ô¶ implies an empty GSN term. (g, ‚ô¶) is a GSN term for
a top goal g with no supporting argument. (g, e) is a GSN
term whose top goal g is supported by a direct evidence
633
e. (g, st, (T1, . . . , Tn)) is a GSN term with top goal g
which is supported by sub trees T1, . . . , Tn via strategy
st. This deÔ¨Ånition normalizes current GSN deÔ¨Ånitions in
several ways. For example, in the GSN Community Standard
[14], strategy nodes can be omitted among goal nodes, and
multiple strategies can be connected from the same goal.
These node links can be incorporated into our deÔ¨Ånition by
adding a few other nodes (Figure 6). Also, we add sibling
order in sub goals of a goal as in [7].
Figure 6. Normalization of GSN Link
B. GSN Patterns
We formalize the following construct of GSN patterns:
parameterized expressions, multiplicity, choice, and loop.
In [27], Matsuno and Taguchi introduced types and deÔ¨Åne
the scope of variables that appear in expressions. These two
are not new and are fairly basic notions in programming lan-
guages. However, the current GSN [14] neither incorporates
types nor provides a precise account of the scope of vari-
ables. As explained in Section II-C, the intended meaning of
the parameterized expression {System X} in Figure 3 is to
instantiate the variable X by some particular instance which
belongs to the System class. Introducing types and giving a
precise account of the scope of variables will help to avoid
misuses of parameterized expressions and to detect errors
in early stages. For example, we can automatically avoid
mis-placement of variables by type checking. In Figure 3,
if a user instantiates X with e.g., ‚ÄúRailway hazards‚Äù, then
the argument does not make sense. It is fairly obvious that
type checking prevents such a mis-placement. If the scoping
rules are not precisely deÔ¨Åned, we cannot Ô¨Ågure out where
variables in a node are declared in the Ô¨Årst place.
We introduce parameter context as a sub-class of context
node of the form [x : œÑ = v] where x is a parameter of type
œÑ to which a value v is assigned (we use x, y, z, . . . for
parameters and v for values). Parameter context is attached
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
to a goal. In Figure 7, a parameter x is deÔ¨Åned in the
parameter context. x can be used in the goal G1 and its sub-
trees. x is deÔ¨Åned as a parameter of type string, and assigned
a value ‚Äúcar.‚Äù In the current implementation, a parameter
can be used in GSN nodes as ‚Äú[x] is dependable‚Äù where
parameters are enclosed by ‚Äú[].‚Äù If a parameter is assigned
a value, then the occurrence of the parameter in the scope
is replaced with the value such as ‚Äú[car] is dependable.‚Äù
Currently, types œÑ are deÔ¨Åned as follows.
œÑ ::= int | double | string | enum | raw,
where raw types mean other than int, double, string, and
enum types. Also, the set of values includes ‚ä• for unas-
signed parameters. In [14], node ‚Äúuninstantiated‚Äù is attached
to a goal node to indicate a parameter is unassigned in the
goal node. In our formalization, we use ‚ä• for unassigned
parameters.
d is the parameter context. Without loss of generality, we
assume that at most one parameter can be deÔ¨Åned in one
parameter context. We omit d if d is , i.e., no parameter is
deÔ¨Åned in the goal. Œ± is a variable for patterns which is used
for loop constructs. (g, st, c[i, j](P1, . . . , Pn), d) is a choice
construct where [i, j] is the range of pattern instantiation.
The user can choose k (1 ‚â§ i ‚â§ k ‚â§ j ‚â§ n) patterns
from P1, . . . , Pn. A multiplicity construct
is represented
by (g, st, m[i, j](P ), d), where [i, j] is the range of pattern
instantiation. The user selects the number of multiplicity
k (1 ‚â§ i ‚â§ k ‚â§ j), and the construct is instantiated with k
copies of P . ŒºŒ±.P represents loop construct. Œ± is a binding
variable within the body P . Œ± possibly appears as sub terms
of P such as P1 = (g1, st1, (Œ±, (g1, e1))). We say P is
closed if there is no free occurrence of Œ± within the body
of P (note that P1 is not closed).
form P1 ‚àí‚Üí P2 (Figure 8).
Pattern Instantiation is deÔ¨Åned as a binary relation of the
(g, ‚ô¶, [x : œÑ = ‚ä•])
(g, e, [x : œÑ = ‚ä•])
(g, st, (P1, . . . , Pn),[x : œÑ = ‚ä•])
v‚àí‚Üí (g[v/x], ‚ô¶, [x : œÑ = v])
v‚àí‚Üí (g[v/x], e[v/x], [x : œÑ = v])
v‚àí‚Üí
Figure 7. An example of parameter context
Next, we deÔ¨Åne choice constructs. Following [7], we
regard the semantics of choice construct as follows. Given an
integer k within the range, a choice construct is instantiated
with k sub GSN terms (we use i, j, k, . . . for integers). For
example, if a choice construct has 4 sub GSN terms, and the
user chooses 2 for k and the Ô¨Årst and third sub GSN terms
to be instantiated, then the choice construct is instantiated
with the Ô¨Årst and third sub GSN terms.
Third, we deÔ¨Åne multiplicity constructs. Given an integer
k within the range, a multiplicity construct is instantiated
with k copies of a GSN term.
DeÔ¨Ånition 2 states the syntax of a GSN pattern.
DeÔ¨Ånition 2 (GSN pattern P ):
d ::=  | [x : œÑ = v]
P ::= Œ± | ‚ô¶ | (g, ‚ô¶, d)
| (g, e, d) | (g, st, (P1, . . . , Pn), d)
| (g, st, c[i, j](P1, . . . , Pn), d)
| (g, st, m[i, j](P ), d) | ŒºŒ±.P
(g[v/x], st[v/x], (P1[v/x], . . . , Pn[v/x]), [x : œÑ = v])
(g, st, c[i, j](P1, . . . , Pn), d)
(g, st, m[i, j](P ), d)
{s1,...,sk}‚àí‚Üí (g, st, (Ps1 , . . . , Psk
k‚àí‚Üí (g, st, (P, . . . , P ), d)
), d)
(P repeats k times)
Œº‚àí‚Üí P [ŒºŒ±.P/Œ±]
‚ô¶‚àí‚Üí ‚ô¶
ŒºŒ±.P
ŒºŒ±.P
Figure 8. Pattern instantiation relation P1 ‚Üí P2
The Ô¨Årst three relations are instantiation by parameter
assignment. For example, in (g, ‚ô¶, [x : œÑ = ‚ä•]), if the user
selects value v for x (v should have the same type of x.
The current D-Case Editor only accepts a value of the same
type for the parameter), then the pattern is instantiated with
(g[v/x], ‚ô¶, [x : œÑ = v]), with all occurrences of x in g is
replaced with v. The user-selected value v is annotated to the
v‚àí‚Üí. This corresponds to non-deterministic evalu-
arrow as
ation in programming languages. The fourth relation is for
choice construct instantiation. The user chooses the number
of sub GSN terms k within the range, and the construct is
instantiated by k sub GSN terms. {s1, . . . , sk} ‚äÜ {1, . . . , n}
are index of sub patterns selected by the user. Similarly,
the Ô¨Åfth relation is for multiplicity construct instantiation. If
the user selects the multiplicity number k, the construct is
instantiated with k copies of P as sub GSN terms of the
goal g. The last two relations are for loop constructs. If the
user wants to unfold the loop constructs, the occurrence of Œ±
within the body P is replaced with ŒºŒ±.P . This represents the
634
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:04:27 UTC from IEEE Xplore.  Restrictions apply. 
unfolding of loop construct as shown in Figure 4. Otherwise
(the last rule), the loop construct is replaced with ‚ô¶. Note
that a loop construct can be unfolded as many times as the
user wants.
Next, we generalize the pattern instantiation relation by
environmental context E. An environmental context is a
pattern where multiple holes [] are possible. For exam-
then E[(g3, ‚ô¶)] =
ple,
(g1, st, ((g3, ‚ô¶), (g2, e2)), d).
if E = (g1, st, ([], (g2, e2)), d),
DeÔ¨Ånition 3 (Environmental Context E):
E ::= [] | Œ± | ‚ô¶ | (g, ‚ô¶, d)
| (g, e, d) | (g, st, (E1, . . . , En), d)
| (g, st, c[i, j](E1, . . . , En), d)
| (g, st, m[i, j](E), d) | ŒºŒ±.E
Using E, the pattern instantiation rules also include:
P1 ‚àí‚Üí P2
E[P1] ‚àí‚Üí E[P2].
The following deÔ¨Ånitions state the relationship between a
pattern and its instances.
DeÔ¨Ånition 4 (elim(P )): elim(P ) is a function that returns
(cid:2) in which all parameter contexts are eliminated from P .
P
For example, if P = (g, e, [x : œÑ = v]), then elim(P ) =
(g, e).
DeÔ¨Ånition 5 (Normal Form): A pattern P is said to be in
normal form if and only if there does not exist P1 such that
P ‚àí‚Üí P1.
DeÔ¨Ånition 6 (Instances of a Pattern): Let P be a closed
pattern and I be a pattern. elim(I) is an instance of P if
and only if
P ‚àí‚Üí‚àó I
and I is a normal form.
Thanks to the functional programming language formal-
ization, a pattern instantiation algorithm can be deÔ¨Åned in
both a straight and a recursive way. The algorithm is shown
in Figure 9. We denote the algorithm as Œ†(P ). In the
algorithm, u = v,{s1, . . . , sk}, k, Œº, ‚ô¶ are user inputs. Note
that v is other than ‚ä• in the algorithm.
The correctness of the algorithm is stated as follows.
Theorem 1: Let P be a closed GSN pattern. If
Œ†(P ) = I,
then elim(I) is an instance of P .
Proof Sketch
The proof is done by induction on the number of the
applications of Œ†.
Base Case
Cases of only one time application of Œ†(P ) are P =
(g, ‚ô¶, ), (g, e, ), (g, ‚ô¶, [x : œÑ = ‚ä•]), (g, e, [x : œÑ = ‚ä•]), and
ŒºŒ±.P (u = ‚ô¶). (g, ‚ô¶, ), (g, e, ) are already normal forms.
635
Œ†(P ) =