+14.1
+5.5
+7.9
+14
+28.6
Random Upper
+8.9
+11.1
+12.4
+23.4
+15.0
+6.0
+8.3
+14.4
+28.8
+4.0
+8.6
+8.0
+7.3
+5.4
+2.5
+4.2
+6.6
+1.3
Random Upper
+9.0
+11.2
+12.5
+23.5
+15.3
+6.0
+8.4
+15.0
+33.4
+4.3
+8.8
+8.1
+7.6
+5.8
+2.7
+4.3
+6.8
+1.3
Random
+4.4
+8.8
+8.2
+7.6
+5.8
+2.7
+4.4
+6.8
+1.5
Table 2: The effectiveness of credential stuffing attacks when typo-tolerance is disabled (CNone) compared with using the CTop1
through CTop5 typo-tolerance policies, across different leak datasets. For each leak, we evaluate attack success at the email
granularity, using the upper bound, lower bound, and random attack success metrics. For CTop3 to CTop5, we elide the lower
bound values as they do not increase compared to CTop2, because the additional correctors applied in those policies are non-
symmetric. For ease of comparison, the CTopX attack success metrics are the percentage point increases/deltas (as indicated by
the + sign) in credential stuffing success over CNone, rather than the total attack success rate.
represents a (leaked, targeted) password pair. For a given password
pair, the credential stuffing attack succeeds if the leaked password
matches, or is corrected to if applying typo-tolerance, the targeted
password. Considering all (leaked, targeted) password pairs per
email, we assess the success rate of credential stuffing by compar-
ing all five typo-tolerance policies and no typo-tolerance, using the
upper bound, lower bound, and random attack success metrics.
Note that the pair ordering is important (i.e., identifying which
password is the leaked one versus the targeted one) because when
we consider typo-tolerance, the rm_first, rm_last, and n2s_last pass-
word correctors (as discussed in Section 2.1) are not symmetric
functions. For example, password1 corrects to password under the
rm_last corrector, but not vice versa. For any email with a pass-
word pair where credential stuffing succeeds only when applying
a non-symmetric corrector, that email contributes to the upper
bound attack success rate but not to the lower bound rate, as the
inverted pair would not exhibit a successful stuffing attack (as the
corrector is non-symmetric). As a consequence, the lower bound
attack metric does not increase for policies more permissive than
CTop2 (i.e., CTop3 through CTop5), as these policies only incorporate
additional non-symmetric correctors.
Analysis Results. In Table 2, we show the effectiveness of cre-
dential stuffing attacks across different leak datasets and different
typo-tolerance policies. We list the upper bound, lower bound, and
random attack success metrics, showing the percentage point in-
creases in attack success when a typo-tolerant policy is enabled,
compared to no typo-tolerance.
When typo-tolerance is not enabled (CNone), we find that creden-
tial stuffing attacks are successful at targeting a large portion of
emails, with the random attack success metric primarily ranging
from 6.3% to 44.1% of emails. The exception is the Collection#1
NEW_csp_EUcombo leak, where only a small but non-zero num-
ber (less than 0.1%) of emails exhibited password reuse. As we do
not know the origin of this leak, it is unclear why the password
reuse rate is so low, although it is possible that some (but not all)
password reuse cases were deduplicated. The observed credential
stuffing success rates are commensurate with prior studies [10, 32]
that analyzed the password reuse rates between distinct website
password dumps, which found reuse rates mostly between 9-20%
but rising as high as 43%. The high success rates also reflect the
reality that credential stuffing attacks have been damaging in prac-
tice [1, 24, 30].
Once enabling the simplest and most limited typo-tolerance
policy (CTop1), we observe an increase in the random credential
stuffing success rate by up to 1.8pp, which already exceeds the
largest increase in upper bound password spraying success rate seen
in Table 7 (1.24pp, when using the CTop5 typo-tolerance policy under
password spraying attacks with 1000 guesses). The upper bound
metrics reflect credential stuffing success increases by 1pp or more
for all leaks except one (Collection#1’s OC_BTCcombos, with an
upper bound increase of 0.2pp). Thus, even with the most restrictive
typo-tolerance password policy, we already see a noticeable impact
from typo-tolerance on credential stuffing attacks.
As we expand the typo-tolerance policy, the attack metrics in-
crease, with the largest increases occurring when expanding from
CTop1 to CTop2, and CTop2 to CTop3. With the most tolerant policy
(CTop5), we find that credential stuffing is significantly more success-
ful than without typo-tolerance. Under the random attack success
Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea257metric, enabling CTop5 allows the credential stuffing success rate to
increase by 1.5–8.8pp, with the majority of leak datasets exhibiting
a delta of over 5pp. In the worst-case scenario for the typo-tolerant
system, the upper bound credential stuffing success rate increases
by between 6–33.4pp. Thus, a significant portion of users become
newly susceptible to credential stuffing attacks once typo-tolerance
is enabled. Furthermore, the relative strength of credential stuffing
increases notably through enabling typo-tolerance. For example,
under the random attack success metric with CTop3, credential stuff-
ing is 23% more effective in the BreachCompilation dataset and 67%
more effective in the Collection#1 OC_UKcombos dataset.
Our evaluation here demonstrates empirically that typo-tolerance
can actually severely reduce password security in practice, by em-
powering credential stuffing attacks. The underlying issue is that
users often use minor variations of a password across online ser-
vices [10], and these variations are closely related to the type of
transformations applied by typo-tolerance correctors. Thus, dur-
ing a credential stuffing attack, a user’s leaked password often can
be corrected to their password on a target service. Our findings
counter the initial security analysis of typo-tolerant password au-
thentication [7], which concluded that such systems could increase
authentication usability with negligible security degradation. To
be clear though, we do not find an error with the prior work’s anal-
ysis. Rather, the existing analysis only considered a threat model of
password spraying attacks, whereas in our evaluation, we expand
the threat model to include credential stuffing, a realistic inclusion
given prominent credential stuffing attacks in the wild [1, 24, 30].
4.4 Credential Tweaking Attacks
With credential stuffing, an attacker only attempts one guess at a
target password (i.e., the leaked password). However, as observed
in prior work [10, 25] as well as our credential stuffing attack anal-
ysis in Section 4.3, users often use similar but distinct passwords
across websites, frequently applying several common categories
of variations. As a consequence, an attacker could apply similar
variations to a leaked password in order to generate additional
fruitful login attempts (in addition to testing the leaked password
itself). Prior work has demonstrated that such credential tweaking
attacks can be significantly stronger than credential stuffing. Here,
we explore the degree to which typo-tolerant password authentica-
tion schemes exacerbate credential tweaking attacks, compared to
credential stuffing attacks (as analyzed in Section 4.3).
Analysis Method. For this analysis, we rely on a state-of-the-
art credential tweaking model developed by Pal et al. [25]. This
model, which is open-sourced [3], takes a leaked password as an
input and generates password variations for further login attempts.
Our attack evaluation is similar to that of credential stuffing
(as discussed in Section 4.3). However, given a (leaked, targeted)
password pair, we do not only check if the leaked password matches
or is corrected to the targeted password (simulating a successful
credential stuffing attack). Instead, we also apply the credential
tweaking model to the leaked password to generate nine additional
unique password variations (for a total attack strength of 10 guesses,
the weakest attack evaluated by Pal et al. [25])1. We consider the
1We ignore the 21 emails (out of 100K) with a password where the model could not
generate nine unique variants.
Policy Upper
37.8
CNone
+5.0
CTop1
+6.7
CTop2
CTop3
+13.9
+15.0
CTop4
CTop5
+15.1
Random Lower
20.1
+0.7
+1.9
+2.3
+2.3
+2.3
26.1
+2.3
+3.7
+6.8
+7.3
+7.4
Table 3: The effectiveness of credential tweaking attacks
when typo-tolerance is disabled (CNone) compared with us-
ing the CTop1 through CTop5 typo-tolerance policies. Due to
computational constraints, we use a randomly selected set
of 100K multi-password emails from the BreachCompila-
tion dataset. We evaluate the upper bound, lower bound, and
random attack success metrics. For ease of comparison, the
CTopX values are the percentage point increases/deltas (as in-
dicated by the + sign) in credential tweaking success over
CNone, rather than the total attack success rate.
credential tweaking attack successful if the leaked password or any
of its nine variants (for a total of 10 password guesses) match or
are corrected to the targeted password. As before, we compute the
upper bound, lower bound, and random attack success rates.
The credential tweaking model is computationally intensive and
time consuming though, as documented by the model authors [25].
Hence, we limit our evaluation to a randomly chosen set of 100K
emails associated with multiple passwords from the BreachCom-
pilation dataset2. We note that Pal et al. [25] analyzed their model
using a random sample of the same size on the same source dataset,
thus we are adhering to the same analysis parameters.
Analysis Results. Table 3 shows the upper bound, lower bound,
and random attack success rates for credential tweaking attacks
across different typo-tolerance password policies (including no
typo-tolerance). Comparing credential tweaking and credential
stuffing attacks (in Table 2) without typo-tolerance (CNone), we
observe that credential tweaking is significantly more effective,
as expected. With the random attack success metric, credential
tweaking succeeds with 26.1% of emails, compared to 17.1% for
credential stuffing. This 9.0pp difference is commensurate with the
findings by Pal et al. [25], who observed a 9.9pp delta between
the two attacks during their evaluation3. In the best-case scenario
for the attacker, over a third of emails (37.8%) can be successfully
attacked; in the worst-case scenario for the attacker, 20.1% of emails
are still susceptible.
When enabling typo-tolerance, we observe that credential tweak-
ing becomes notably more effective. Using the random attack suc-
cess metric, credential tweaking’s success rate increases by 6.8pp
under the CTop3 policy, up to 7.4pp under the CTop5 policy (a 28%
gain). Even enabling the least permissive typo-tolerance policy
2Even for our small sample of emails, it took four hours to generate the credential
tweaking model’s attack guesses for our evaluation, using 20 cores on a server with
256 GB of memory.
3We note that the credential tweaking analysis by Pal et al. [25] is not identical to
ours, making a direct comparison inexact. Our analysis simulates both credential
stuffing and tweaking attacks, and compares their effectiveness. In contrast, the prior
evaluation removed password reuse cases (essentially eliminating the effectiveness of
credential stuffing), and analyzed the effectiveness of credential tweaking. However, as
both analyses isolate the impact of credential tweaking from that of credential stuffing,
we believe the comparison remains fair and meaningful.
Session 1D: Authentication and Click Fraud CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea258CTop1 still results in a 2.3pp increase in attack success. In the up-
per bound case (the best-case scenario for the attacker), credential
tweaking is able to successfully attack an additional 15.1% of users
under CTop5, a 40% gain in attack potency compared to CNone.
Our findings here reinforce the conclusion from our credential
stuffing attack analysis (Section 4.3). We again empirically observe
that typo-tolerance can result in consequential degradation in pass-
word security, once considering a broader attack model than that
of the prior security analysis of typo-tolerant password authen-
tication systems [7]. We also note that our evaluation is of the
weakest credential tweaking attack considered by Pal et al. [25],
who investigated tweaking attacks consisting of between 10 to 1000
total guesses, finding that using more generated password guesses
resulted in more effective tweaking attacks. Thus, our findings
on the impact of typo-tolerance on credential tweaking attacks
can be viewed as lower bounds, meaning tweaking attacks with
a higher number of guesses should be even more effective with
typo-tolerance enabled.
5 HARDENING TYPO-TOLERANT
PASSWORD AUTHENTICATION
In Section 4, we evaluated typo-tolerant password authentication
under a more comprehensive threat model than considered in the
existing security analysis [7]. We identified that, counter to the prior
findings, typo-tolerance can result in notable security degradation
in practice, as credential stuffing and tweaking attacks are signifi-
cantly more effective when typo-tolerance is enabled. We concluded
that typo-tolerance increases password usability (as demonstrated
by Chatterjee et al. [7]) but at a security cost.
In this section, we investigate whether we can reduce typo-
tolerance’s security loss while maintaining its functionality. In
particular, we aim to predict if a given password is newly suscepti-
ble to credential stuffing once typo-tolerance is enabled. We will
call such affected passwords susceptible passwords. With such a
capability, an online service could identify and selectively disable
typo-tolerance for users predicted to be negatively impacted by the
authentication scheme (i.e., using a susceptible password), while
preserving typo-tolerance for other users.
We first consider using existing techniques that assess password
security, specifically password strength meters (PSMs). Our hy-
pothesis is that weak passwords correlate with susceptible ones,
as perhaps users who use minor variants of a password across
sites may more likely choose weaker passwords. In Section 5.1, we
evaluate whether we can use the popular and open-source zxcvbn
PSM [12] to accurately predict password susceptibility.
However, identifying weak passwords is an inherently different
task from determining password susceptibility, a notion that will be
reinforced by our PSM evaluation results in Section 5.1. As an alter-
native, we explore a machine learning approach to develop a binary
classifier for susceptible passwords. Given the specific transforma-
tions performed by typo-tolerance correctors, our intuition is that
susceptible passwords exhibit specific structure which a classifier
could potentially identify. In Section 5.2, we discuss how we design
such a classifier, and in Section 5.3, we evaluate its performance,
demonstrating practical value.
Strength Score Users w/ Weak Password
Policy
CTop1
CTop2
CTop3
CTop4
CTop5
<2
<3
<2
<3
<2
<3
<2
<3
<2
<3
0.73
0.90
0.73
0.90
0.73
0.90
0.73
0.90
0.73
0.90
FPR
0.73
0.90
0.73
0.90
0.73
0.90
0.72
0.90
0.72
0.90
FNR
0.27
0.10
0.26
0.09
0.19
0.06
0.19
0.06
0.19
0.06
Table 4: The effectiveness of disabling typo-tolerance
for users of weak passwords. On the BreachCompilation
dataset, we evaluate the proportion of users with weak pass-
words for different weakness thresholds, representing the
population with typo-tolerance disabled. Across the typo-
tolerance policies, we also evaluate credential stuffing at-
tack success and the proportions of users for whom typo-