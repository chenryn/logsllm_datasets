意，在为其他人编写查询时也要注意。一定要仔细倾听别人对查询内容的描述，不能将他们的
事实上，你也不能让NULL与其自身进行比较，因为两个“未知值”的比较结果是无法确
NULL值很特殊。其含义是“无值”或“未知值”，所以不能采用两个“已知值”的比较方
当在组织可以查找到多个独立值的查询语句时，你可能会发现，使用IN（)运算符更简洁。
mysql> SELEcT last_name, first_name, state FROM president
Empty set(0.01 sec)
mysql> SELECT last_name, first_name, state FROM president
1NULL=NULLINULL<>NULL1
mySql> SELECT NULL = NULL, NULL <> NULL;
当把一个列与大量值进行比较时，使用IN（)会特别方便。
WHERE State IN(VA','MA');
请大家务必注意日常语言与SQL语言之间的差异，不只是在自己编写查询语句时要引起注
NULL01NULL>0
Wilson
last_name
第1章MySQL入门
Bush
Kennedy
Taylor
ryler
Adams
Monroe
Madison
Jefferson
Adams
Washington
NULL值
NULL
| first_name
George H.W.
John F
Woodrow
Zachary
John
John Quincy
James
James
Thomas
John
George
NULL
1state
NULL
NULL
---
## Page 57
指定顺序。要想结果有序，需要在查询语句后面增加一条ORDER BY子句。
际情况并非这样。因为在表数据初始加载完之后，删除和插入行都会改变服务器返回行的顺序。
很符合人们的思维习惯，人们自然会认定查询出的行的顺序与插入它们时的顺序是相同的。但实
用“SELECT＊FROM tbl_name”语句查询出的行，其顺序通常与插入它们时的顺序一致。
1.4.9.3对查询结果排序
用这个运算符的查询语句：
字：
会按姓的字母顺序返回美国总统的姓名：
NULL。如果想要找到他们，可以使用下面这条查询语句：
用=、<>或者！=。例如，对于目前仍然健在的美国总统，其逝世日期在 president 表里表示为
关于行检索顺序，请记住这样一条原则：服务器不会保证返回行的先后顺序，除非你自己
每位MySQL用户最终都会注意到这样一种情况：在你创建一个表，并存入一些行之后，
mysql> SELECT last_name, first_name FROM president
SELECT last_name, first_name FROM president WHERE death  NULL;
MySQL特有的比较运算符可用于 NULL 与 NULL 的比较。将前面两个查询语句改写成使
FROM president WHERE NOT (suffix  NULL);
mysql> SELEcT last_name, first_name,
IS NOT NULL可以用来查找非 NULL值。下面这条查询语句可以找到那些具有后缀名的名
mysql> SELECT last_name, first_name FROM president WHERE death IS NULL;
如果需要测试多个NULL值是否相等，那么必须使用IS NULL或IS NOT NULL，而不能使
I last_name
SELECTlast_name,
last_name | first_name | suffix
Buchanan
Arthur
Adams
Adams
Carter
Clinton
last_name | first_name
Bush
Bush
Carter
->ORDERBY1ast_name;
-> FROM president WHERE suffix IS NOT NULL;
NULL
IJames E.
Ifirst_name
-+-
Barack
George
William J.
George H.W.
James E.
James
Chester A.
John
John Quincy
first_name,
W.
NULL
1Jr.
suffix
suffix
1.4MySOL 教程
，下面这条查询语句
37
这
使
---
## Page 58
那些总统就应该出现在结果顺序的末尾。而如果想让他们出现在开头，就要使用下面这条查询
值的排序列。例如，想按逝世日期降序排列所有总统，那么当前健在的(逝世日期为NULL的)
president 表里的行，先按出生地所在州进行逆序排列，然后在每一个相同的州里再按姓升序
语句：
排列显示，那么就要使用DESC关键字：
可以指定是按照升序排列还是按照降序排列。例如，想让美国总统的姓名按姓的逆序 (降序)
尾
。为确保NULL值出现在指定排列顺序的末尾，需要额外增加一个可以区分NULL值和非NULL
mysql>
你可以对多列进行排序，而且每一列单独地按升序或降序排列。
mysql> SELECT last_name, first_name FROM president
ORDER BY子句的默认排序方式是升序排列。在其中的列名后面加上关键字ASC 或 DESC，
在一个列里，对于升序排列，NULL值总是出现在开头；而对于降序排列，它总是出现在末
mysql>
last_name
Ilast_name
Adams
Nixon
Reagan
Bush
Bush
last_name
Ford
Obama
Carter
Johnson
Eisenhower
Wilson
Washington
Tyler
Taylor
Monroe
Madison
Harrison
Coolidge
Arthur
Tyler
Van Buren
Washington
Wilson
第1章MySQL入门
SELECT last_name,
ORDER BY state DESC,last_name ASC;
SELECT last_name,
1first_name
Ifirst_name
John
John
Martin
George
Richard M.
Ronald
Gerald
Barack
William
James E.
George H.W.
George
Lyndon
Dwight.
Woodrow
George
John
Zachary
James
James
Thomas
William H.
Calvin
Chester A.
Woodrow
R
H.
J.
first_name,death FROM president
first_name,state FROM president
11826-07-04
death
state
1994-04-22
2006-12-26
NULL
NULL
NULL
NULL
NULL
红江以以以以以以以以以以
death DEsc,last_name;
下面的查询语句用于检索
---
## Page 59
RAND（)子句：
条很相似，但它返回的是跳过前面10行之后的5行：
查询结果的开头部分跳过的行数目；第二个，需要返回的行数目。下面这条查询语句与前面那
的行数，只输出结果中前面的n行。下面的查询语句将把按出生日期排在前5位的总统列出来：
LIMIT子句。如果将它与ORDER BY子句联合使用，效果会特别好。MySQL允许限制查询输出
1.4.9.4限制查询结果
姓继续进行排序。
NULL 值放到非 NULL 值的前面。同时，对于 death 值相同的行，将last_name 作为辅助列按
值时，IF（）函数的计算结果为0；当遇到非NULL值时，它计算结果为1。最终结果会把所有的
决定是返回第二个参数（为真），还是返回第三个参数（为假）。对于这条查询语句，当遇到NULL
其中，IF（）函数的作用是计算第一个参数给出的那个表达式的值，然后根据计算结果的真假来
如果想从某个表里随机抽取出一行或几行，那么可以联合使用LIMIT子句和ORDER BY
mysql> SELECT last_name, first_name,birth FROM president
LIMIT子句还允许从查询结果的中间抽出部分行。
如果用DESC来逆序排列查询结果，那么可以得到最晚出生的那5位总统：
mysql> SELECT last_name, first_name,birth FROM president
查询结果往往有很多行，如果只想看到其中的一小部分，那么可以在查询命令里增加一条
mysql>
Coolidge
Hoover
Roosevelt
Eisenhower| Dwight D.
Truman
Bush
Carter
Bush
Clinton
Obama
Monroe
Madison
Jefferson
Adams
Washington
last_name
Washington
Jefferson
-> ORDER BY birth DESC LIMIT 10,
-> ORDER BY birth DESC LIMIT 5;
-> ORDER BY birth LIMIT 5;
SELECT last_name, first_name, birth FROM president
+
Calvin
first_name
William J.
Barack H.
Herbert C.
Franklin D.
George H.W.
James E.
IThomas
James
James
Thomas