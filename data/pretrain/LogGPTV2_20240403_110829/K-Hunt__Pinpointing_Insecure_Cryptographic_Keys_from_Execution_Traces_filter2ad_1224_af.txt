Cryptohunt [68]
Dispatcher [32]
Kerckhoffs [43]
MovieStealer [65]
ReFormat [66]
K-Hunt
C1
✗
✓
✗
✗
✓
✗
✓
✓
✓
C2
✓
✓
✗
✓
✗
✓
✓
✗
✓
C3
✓
✓
✓
✓
✓
✓
✓
✓
✓
C4
✓
✓
✓
✓
✓
✓
✓
✓
✓
C5
✓
✓
✓
✓
✓
✓
✗
✓
✓
C6
✗
✓
✓
✓
✓
✗
✓
✓
✓
C7
✓
✓
✗
✗
✗
✓
✗
✗
✓
C8
✗
✗
✗
✗
✗
✗
✗
✗
✓
C1: No need of crypto template
C3: Detecting block cipher
C5: Detecting public-key cipher
C7: Identifying crypto key
C2: Obfuscation resilient
C4: Detecting stream key cipher
C6: Detecting proprietary cipher
C8: Detecting insecure key
Table 4: Comparison with the closely related works.
cannot identify the crypto keys. Only CipherXRay and K-Hunt can
identify both proprietary ciphers and crypto keys, but CipherXRay
did not make any attempt to identify the insecure keys. Moreover,
a substantial difference between K-Hunt and CipherXRay is that K-
Hunt focuses on the core part of a crypto algorithm and identifies
keys from only several crypto blocks. In contrast, CipherXRay needs
to recover both input and output parameters of the entire crypto
algorithm. Thus it still suffers from the issue of how to accurately
identify the boundary of parameter buffers and faces both false
positives and false negatives [51].
An important requirement for the crypto identification is that
the analysis should not affect the normal execution of the pro-
gram. ReFormat, Dispatcher, MovieStealer, and our K-Hunt utilize
lightweight heuristics, which do not impose much overhead to the
normal execution. Kerckhoffs, Cryptohunt and Aligot use an offline
analysis strategy. Crypto-DFG performs a purely static Data Flow
Graph (DFG) isomorphism based detection and thus does not af-
fect the execution either. Only CipherXRay adopts a heavyweight
dynamic taint analysis and may affect the execution. For instance,
it takes CipherXRay about 40 minutes to recover a 1024-bit RSA
private key, which is unacceptable for establishing normal network
connection.
We also compared the accuracy of each system. We found that
if the approach requires a very precise criteria to judge the crypto
function, it yields false negative. For instance, Kerckhoffs uses I/O
comparison with known cryptographic functions to identify spe-
cific ciphers. However, this comparison is very sensitive to the
implementation variation. Moreover, we also found that only us-
ing one heuristic feature to detect crypto algorithm is often not
accurate. Dispatcher, for example, has both false positives and false
negatives [43, 58]. Another case is CipherXRay, which only checks
whether all bits of the output buffer are affected by each bit of the
input buffer. For the cryptographic avalanche effect, however, the
criteria becomes if one bit of the input buffer is flipped, the output
buffer changes significantly (e.g., half the output bits flip). As a
result, CipherXRay does not check the intrinsic properties of the
avalanche effect and may suffer from false positives. In contrast,
K-Hunt focuses on the intrinsic properties of crypto operations,
does not require any templates or signatures, and is thus crypto
implementation agnostic.
Finally, since binary executables can be obfuscated, the identifica-
tion of crypto primitives must also consider the code obfuscations.
Among the compared systems, Dispatcher, ReFormat, and Crypto-DFG
can be easily cheated by changing the instructions with alternatives
and thus are not obfuscation-resilient. For obfuscation-resilient sys-
tems such as Kerckhoffs, Aligot, CipherXRay, and Cryptohunt, they
are based on semantics of crypto. For K-Hunt, it utilizes the fact
that even if the crypto basic blocks are obfuscated, e.g., certain
arithmetic instructions are replaced by other equivalent arithmetic
instructions, the runtime features of execution number and high
entropy/randomness cannot be removed. Therefore, K-Hunt can
still work against obfuscated crypto code.
9 CONCLUSION
We have presented K-Hunt, a dynamic analysis system to identify
insecure keys in an input executable. K-Hunt first pinpoints the
crypto keys by leveraging general properties of crypto operations.
Then, it identifies insecure keys, namely, deterministic generated
keys, insecurely negotiated keys, and recoverable keys by tracking
how the crypto keys are generated and propagated. We have imple-
mented K-Hunt and tested it with 10 cryptographic libraries and 15
applications that contain crypto operations. Our evaluation results
show that K-Hunt pinpoints the crypto keys used by symmetric
ciphers, asymmetric ciphers, stream ciphers, and digital signatures.
More importantly, K-Hunt discovers insecure keys in 22 out of 25
evaluated programs, including in well-established crypto libraries
such as LibSodium, Nettle, TomCrypt, and WolfSSL. We have responsi-
bly disclosed the vulnerabilities to the affected software vendors
and patches are under development.
10 AVAILABILITY
The source code of K-Hunt and also the tested benchmark will be
made public available at https://github.com/gossip-sjtu/k-hunt/.
ACKNOWLEDGMENTS
The authors would like to thank anonymous reviewers for their
valuable comments and helpful suggestions. The work was par-
tially supported by the Key Program of National Natural Science
Foundation of China under Grant No.:U1636217, the National Key
Research and Development Program of China under Grant No.:
2016YFB0801200. This research was also partially supported by the
Regional Government of Madrid through the N-GREENS Software-
CM project S2013/ICE-2731, the Spanish Government through the
DEDETIS grant TIN2015-7013-R, and the European Union through
the ElasTest project ICT-10-2016-731535. We specially thank the
Ant Financial Services Group for the support of this research within
the SJTU-AntFinancial joint Institution of FinTech Security.
REFERENCES
[1] 7-Zip. http://www.7-zip.org/.
[2] Best password manager for iOS, Android, Windows, Linux, Mac | Enpass. https:
//www.enpass.io/.
[3] Botan: Crypto and TLS for C++11. https://botan.randombit.net/.
[4] ccrypt. http://ccrypt.sourceforge.net/.
[5] Cryptcat Project. http://cryptcat.sourceforge.net/.
[6] Crypto++ Library 5.6.5 | Free C++ Class Library of Cryptographic Schemes.
https://www.cryptopp.com/.
[7] GnuTLS. http://www.gnutls.org/.
[8] Imagine: Freeware Image & Animation Viewer for Windows. http://www.nyam.
pe.kr/dev/imagine/.
[9] IP Messenger. https://ipmsg.org/index.html.en.
[10] KeePass Password Safe. https://keepass.info/index.html.
[11] Libgcrypt. https://gnupg.org/software/libgcrypt/index.html.
[12] libsodium. https://download.libsodium.org/doc/.
[13] libtomcrypt. http://www.libtom.net/LibTomCrypt/.
[14] Manpages of aeskeyfind in Debian jessie. https://manpages.debian.org/jessie/
aeskeyfind/index.html.
[15] MuPDF. https://mupdf.com/.
[16] Nettle - a low-level crypto library. https://www.lysator.liu.se/~nisse/nettle/.
[17] OpenSSL. https://www.openssl.org/.
[18] PuTTY: a free SSH and Telnet client. https://www.chiark.greenend.org.uk/
~sgtatham/putty/.
[19] Sage ransomware - Malwarebytes Labs.
https://blog.malwarebytes.com/
threat-analysis/2017/03/explained-sage-ransomware/.
[20] Source Code of CryptoChief. https://github.com/ctfs/write-ups-2014/tree/master/
hack-lu-ctf-2014/cryptochief.
[21] SSL Library mbed TLS / PolarSSL. https://tls.mbed.org/.
[22] Ultrasurf and Ultrareach - Internet Freedom, Privacy, and Security. https://
ultrasurf.us/.
rarlab.com/.
[23] WannaCry ransomware attack - Wikipedia. https://en.wikipedia.org/wiki/
WannaCry_ransomware_attack.
[24] Wget - GNU Project. https://www.gnu.org/software/wget/.
[25] WinRAR archiver, a powerful tool to process RAR and ZIP files. https://www.
[26] wolfSSL Embedded SSL/TLS Library. https://www.wolfssl.com/.
[27] Intel® 64 and ia-32 architectures software developer’s manual. Combined Volumes,
1, 2A, 2B, 2C, 2D, 3A, 3B, 3C, 3D and 4, 2018.
ch/random/.
[28] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos. An In-Depth
Analysis of Disassembly on Full-Scale x86/x64 Binaries. In Proc. 25th Usenix
Security Symposium, 2016.
[29] A. Apvrille and M. Pourzandi. Secure Software Development by Example. IEEE
Security & Privacy, 3(4):10–17, 2005.
[30] J.-P. Aumasson.
Should Curve25519 keys be validated?
https://research.
kudelskisecurity.com/2017/04/25/should-ecdh-keys-be-validated/, 2013.
[31] E. Barker and A. Roginsky. Recommendation for Cryptographic Key Generation.
NIST Special Publication, 800(133), 2012.
[32] J. Caballero, P. Poosankam, C. Kreibich, and D. Song. Dispatcher: Enabling Active
Botnet Infiltration using Automatic Protocol Reverse-Engineering. In Proc. 16th
ACM Conference on Computer and Communications Security (CCS), 2009.
[33] J. Calvet, J. M. Fernandez, and J.-Y. Marion. Aligot: Cryptographic Function
In Proc. ACM Conference on
Identification in Obfuscated Binary Programs.
Computer and Communications Security (CCS), 2012.
[34] Y. Chen, M. Khandaker, and Z. Wang. Secure In-cache Execution. In Proc. 20th
International Symposium on Research in Attacks, Intrusions, and Defenses (RAID),
2017.
[35] A. Costin, J. Zaddach, A. Francillon, D. Balzarotti, and S. Antipolis. A Large
Scale Analysis of the Security of Embedded Firmwares. In Proc. USENIX Security
Symposium, 2014.
[36] Y. Dodis, D. Pointcheval, S. Ruhault, D. Vergniaud, and D. Wichs. Security
Analysis of Pseudo-random Number Generators with Input:/dev/random is not
Robust.
In Proc. ACM Conference on Computer and Communications Security
(CCS), 2013.
[37] T. Duong and J. Rizzo. Cryptography in the Web: The Case of Cryptographic
Design Flaws in ASP.NET. In Proc. IEEE Symposium on Security and Privacy (S&P),
2011.
[38] Z. Durumeric, J. Kasten, D. Adrian, J. A. Halderman, M. Bailey, F. Li, N. Weaver,
J. Amann, J. Beekman, M. Payer, et al. The matter of heartbleed. In Proceedings
of the 2014 Conference on Internet Measurement Conference, pages 475–488. ACM,
2014.
[39] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An Empirical Study of
Cryptographic Misuse in Android Applications. In Proc. ACM Conference on
Computer and Communications Security (CCS), 2013.
[40] ENT: A Pseudorandom Number Sequence Test Program. http://www.fourmilab.
[41] A. Everspaugh, Y. Zhai, R. Jellinek, T. Ristenpart, and M. Swift. Not-so-random
numbers in virtualized linux and the whirlwind rng. In Security and Privacy (SP),
2014 IEEE Symposium on, pages 559–574. IEEE, 2014.
[42] fail0verflow.
PS3 Epic Fail.
https://events.ccc.de/congress/2010/Fahrplan/
attachments/1780_27c3_console_hacking_2010.pdf, 2010.
[43] F. Gröbert, C. Willems, and T. Holz. Automated Identification of Cryptographic
In Proc. International Symposium on Recent
Primitives in Binary Programs.
Advances in Intrusion Detection (RAID), 2011.
[44] L. Guan, J. Lin, B. Luo, and J. Jing. Copker: Computing with Private Keys without
RAM. In Proc. 21st Annual Network and Distributed System Security Symposium
(NDSS), 2014.
[45] A. Guinet. Wannacry in-memory key recovery for WinXP. https://github.com/
aguinet/wannakey, 2017.
[46] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino,
A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest We Remember: Cold Boot
Attacks on Encryption Keys. Communications of the ACM, 52(5):91–98, 2009.
[47] C. Hargreaves and H. Chivers. Recovery of Encryption Keys from Memory Using
a Linear Scan. In Proc. International Conference on Availability, Reliability and
Security (ARES), 2008.
[48] K. Harrison and S. Xu. Protecting Cryptographic Keys from Memory Disclosure
Attacks. In Proc. 37th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN), 2007.
[49] N. Heninger and H. Shacham. Reconstructing RSA Private Keys from Random
Key Bits. In Halevi S. (eds) Advances in Cryptology - CRYPTO 2009. Lecture Notes
in Computer Science, vol 5677. Springer, Berlin, Heidelberg, 2009.
[50] D. Lazar, H. Chen, X. Wang, and N. Zeldovich. Why does cryptographic software
fail?: a case study and open problems. In Proc. Asia-Pacific Workshop on Systems
(APSys), 2014.
[51] P. Lestringant. Identification of Cryptographic Algorithms in Binary Programs.
PhD thesis, Université Rennes, 2017.
[52] P. Lestringant, F. Guihéry, and P.-A. Fouque. Automated Identification of Cryp-
tographic Primitives in Binary Code with Data Flow Graph Isomorphism. In
Proc. ACM Symposium on Information, Computer and Communications Security
(AsiaCCS), 2015.
[53] P. Lestringant, F. Guihéry, and P.-A. Fouque. Assisted Identification of Mode of
Operation in Binary Code with Dynamic Data Flow Slicing. In Proc. International
Conference on Applied Cryptography and Network Security (ACNS), 2016.
[54] X. Li, X. Wang, and W. Chang. CipherXRay: Exposing Cryptographic Operations
and Transient Secrets from Monitored Binary Execution. IEEE Transactions on
Dependable and Secure Computing, 11(2):101–114, 2012.
[55] Y. Li, Y. Zhang, J. Li, and D. Gu. iCryptoTracer: Dynamic Analysis on Misuse of
Cryptography Functions in iOS Applications. In Proc. International Conference
on Network and System Security (NSS), 2014.
[56] C. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. Reddi, and
K. Hazelwood. Pin: Building Customized Program Analysis Tools with Dynamic
Instrumentation. In Proc. ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI), 2005.
[57] C. Maartmann-Moe, S. E. Thorkildsen, and A. Årnes. The persistence of memory:
Forensic identification and extraction of cryptographic keys. Digital Investigation,
6:132–140, 2009.
[58] F. Matenaar, A. Wichmann, F. Leder, and E. Gerhards-Padilla. CIS: The Crypto
Intelligence System for Automatic Detection and Localization of Cryptographic
Functions in Current Malware. In Proc. International Conference on Malicious and
Unwanted Software (Malware), 2012.
[59] J. Newsome and D. Song. Dynamic Taint Analysis for Automatic Detection,
Analysis, and Signature Generation of Exploits on Commodity Software. In Proc.
12th Annual Network and Distributed System Security Symposium (NDSS), 2005.
[60] S. Rahaman and D. Yao. Program analysis of cryptographic implementations for
security. In Proc. IEEE Secure Development Conference (SecDev), 2017.
[61] B. Schneier. Cryptography: The Importance of Not Being Different. Computer,
32(3):108–109, 1999.
[62] B. Schneier. Schneier on Security: The Doghouse: KRYPTO 2.0. https://www.
schneier.com/blog/archives/2006/06/the_doghouse_kr.html, 2006.
[63] E. J. Schwartz, T. Avgerinos, and D. Brumley. All You Ever Wanted to Know
About Dynamic Taint Analysis and Forward Symbolic Execution (but might have
been afraid to ask). In Proc. 31st IEEE Symposium on Security and Privacy (S&P),
2010.
[64] A. Shamir and N. Van Someren. Playing “hide and seek” with stored keys. In
Proc. International conference on Financial Cryptography (FC), 1999.
[65] R. Wang, Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Steal This Movie: Automat-
ically Bypassing DRM Protection in Streaming Media Services. In Proc. USENIX
Security Symposium, 2013.
[66] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace. Reformat: Automatic reverse
engineering of encrypted messages. In Proc. 14th European Symposium on Research
in Computer Security. 2009.
[67] H. Wu. The Misuse of RC4 in Microsoft Word and Excel. IACR Cryptology ePrint
Archive, 2005.
[68] D. Xu, J. Ming, and D. Wu. Cryptographic function detection in obfuscated
binaries via bit-precise symbolic loop mapping. In Security and Privacy (SP), 2017
IEEE Symposium on, pages 921–937. IEEE, 2017.
[69] Z. Yang, B. Johannesmeyer, A. T. Olesen, S. Lerner, and K. Levchenko. Dead Store
Elimination (Still) Considered Harmful. In Proc. 26th Usenix Security Symposium,
2017.
[70] R. Zhao, D. Gu, and J. Li. Detection and Analysis of Cryptographic Data Inside
Software. In Proc. Information Security Conference (ISC), 2011.