# Comparison with Related Works

The following table compares K-Hunt with other related works in the field of cryptographic key and algorithm detection. The systems are evaluated based on their ability to detect different types of ciphers, keys, and their resilience to obfuscation.

| Tool              | C1  | C2  | C3  | C4  | C5  | C6  | C7  | C8  |
|-------------------|-----|-----|-----|-----|-----|-----|-----|-----|
| Cryptohunt [68]   | ✗   | ✓   | ✓   | ✓   | ✓   | ✓   | ✗   | ✗   |
| Dispatcher [32]   | ✓   | ✓   | ✓   | ✓   | ✓   | ✓   | ✗   | ✗   |
| Kerckhoffs [43]   | ✗   | ✓   | ✓   | ✓   | ✓   | ✓   | ✓   | ✗   |
| MovieStealer [65] | ✓   | ✓   | ✓   | ✓   | ✓   | ✓   | ✗   | ✗   |
| ReFormat [66]     | ✓   | ✓   | ✓   | ✓   | ✓   | ✓   | ✗   | ✗   |
| K-Hunt            | ✓   | ✓   | ✓   | ✓   | ✓   | ✓   | ✓   | ✓   |

- **C1: No need for a crypto template**
- **C3: Detecting block cipher**
- **C5: Detecting public-key cipher**
- **C7: Identifying crypto key**
- **C2: Obfuscation resilient**
- **C4: Detecting stream cipher**
- **C6: Detecting proprietary cipher**
- **C8: Detecting insecure key**

### Key Differences and Capabilities

**CipherXRay and K-Hunt** are the only tools that can identify both proprietary ciphers and crypto keys. However, CipherXRay does not attempt to identify insecure keys. A significant difference between K-Hunt and CipherXRay is that K-Hunt focuses on the core part of a cryptographic algorithm and identifies keys from a few cryptographic blocks. In contrast, CipherXRay requires the recovery of both input and output parameters of the entire cryptographic algorithm, leading to challenges in accurately identifying the boundaries of parameter buffers and resulting in false positives and false negatives [51].

### Execution Overhead

An essential requirement for cryptographic identification is that the analysis should not affect the normal execution of the program. **ReFormat, Dispatcher, MovieStealer, and K-Hunt** use lightweight heuristics, which do not impose much overhead. **Kerckhoffs, Cryptohunt, and Aligot** use an offline analysis strategy, and **Crypto-DFG** performs purely static Data Flow Graph (DFG) isomorphism-based detection, thus not affecting execution. **CipherXRay** adopts a heavyweight dynamic taint analysis, which can significantly impact execution. For example, it takes CipherXRay about 40 minutes to recover a 1024-bit RSA private key, making it impractical for normal network connections.

### Accuracy

We also compared the accuracy of each system. Tools requiring very precise criteria to judge cryptographic functions often yield false negatives. For instance, **Kerckhoffs** uses I/O comparison with known cryptographic functions, but this method is sensitive to implementation variations. Additionally, using a single heuristic feature for detection, as in **Dispatcher**, can lead to both false positives and false negatives [43, 58]. **CipherXRay** checks if all bits of the output buffer are affected by each bit of the input buffer, but this does not account for the intrinsic properties of the avalanche effect, leading to potential false positives. In contrast, **K-Hunt** focuses on the intrinsic properties of cryptographic operations, does not require templates or signatures, and is agnostic to the implementation.

### Obfuscation Resilience

Binary executables can be obfuscated, so the identification of cryptographic primitives must consider code obfuscations. **Dispatcher, ReFormat, and Crypto-DFG** can be easily bypassed by changing instructions with alternatives, making them non-obfuscation-resilient. **Kerckhoffs, Aligot, CipherXRay, and Cryptohunt** are based on the semantics of cryptography and are more resilient to obfuscation. **K-Hunt** utilizes the fact that even if basic blocks are obfuscated, the runtime features of execution number and high entropy/randomness remain, allowing it to work against obfuscated code.

## Conclusion

We have presented **K-Hunt**, a dynamic analysis system for identifying insecure keys in executable files. K-Hunt first pinpoints cryptographic keys by leveraging general properties of cryptographic operations. It then identifies insecure keys, such as deterministically generated keys, insecurely negotiated keys, and recoverable keys, by tracking how the keys are generated and propagated. We implemented and tested K-Hunt with 10 cryptographic libraries and 15 applications containing cryptographic operations. Our evaluation results show that K-Hunt can pinpoint keys used in symmetric, asymmetric, stream ciphers, and digital signatures. More importantly, K-Hunt discovered insecure keys in 22 out of 25 evaluated programs, including well-established libraries like LibSodium, Nettle, TomCrypt, and WolfSSL. We have responsibly disclosed the vulnerabilities to the affected software vendors, and patches are under development.

## Availability

The source code of K-Hunt and the tested benchmark will be made publicly available at https://github.com/gossip-sjtu/k-hunt/.

## Acknowledgments

The authors would like to thank anonymous reviewers for their valuable comments and helpful suggestions. This work was partially supported by the Key Program of National Natural Science Foundation of China (Grant No.: U1636217), the National Key Research and Development Program of China (Grant No.: 2016YFB0801200), the Regional Government of Madrid through the N-GREENS Software-CM project S2013/ICE-2731, the Spanish Government through the DEDETIS grant TIN2015-7013-R, and the European Union through the ElasTest project ICT-10-2016-731535. We specially thank the Ant Financial Services Group for supporting this research within the SJTU-AntFinancial joint Institution of FinTech Security.

## References

[References listed here, formatted as provided in the original text]

This optimized version aims to make the text more coherent, professional, and easier to understand.