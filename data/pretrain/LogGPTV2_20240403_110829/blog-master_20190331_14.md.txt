## PostgreSQL 12 preview - query rewrite API 增强 - Allow extensions to generate lossy index conditions - SupportRequestIndexCondition  
### 作者                                                                                  
digoal                                                                                  
### 日期                                                                                  
2019-03-31                                                                                  
### 标签                                                                                  
PostgreSQL , query rewrite , API , extension , lossy index 重写 , 放大范围 , 改写where条件走索引 , lossy 化 , recheck , filter      
----                                                                                  
## 背景        
在数据库中QUERY REWRITE是一种常用的SQL优化方法。  
我们看一个QUERY REWRITE的例子。  
```  
   1 /*-------------------------------------------------------------------------  
   2  *  
   3  * like_support.c  
   4  *    Planner support functions for LIKE, regex, and related operators.  
   5  *  
   6  * These routines handle special optimization of operators that can be  
   7  * used with index scans even though they are not known to the executor's  
   8  * indexscan machinery.  The key idea is that these operators allow us  
   9  * to derive approximate indexscan qual clauses, such that any tuples  
  10  * that pass the operator clause itself must also satisfy the simpler  
  11  * indexscan condition(s).  Then we can use the indexscan machinery  
  12  * to avoid scanning as much of the table as we'd otherwise have to,  
  13  * while applying the original operator as a qpqual condition to ensure  
  14  * we deliver only the tuples we want.  (In essence, we're using a regular  
  15  * index as if it were a lossy index.)  
  16  *  
  17  * An example of what we're doing is  
  18  *          textfield LIKE 'abc%def'  
  19  * from which we can generate the indexscanable conditions  
  20  *          textfield >= 'abc' AND textfield = 'abc'::text) AND (info = 'abc'::text) AND (info SupportRequestRows request type.  
+  
+     
+    For target functions that return boolean, it may be possible to  
+    convert a function call appearing in WHERE into an indexable operator  
+    clause or clauses.  The converted clauses might be exactly equivalent  
+    to the function's condition, or they could be somewhat weaker (that is,  
+    they might accept some values that the function condition does not).  
+    In the latter case the index condition is said to  
+    be lossy; it can still be used to scan an index,  
+    but the function call will have to be executed for each row returned by  
+    the index to see if it really passes the WHERE condition or not.  
+    To create such conditions, the support function must implement  
+    the SupportRequestIndexCondition request type.  
+     
```  
## 小结  
query rewrite API 增强 - Allow extensions to generate lossy index conditions - SupportRequestIndexCondition ，实际上就是让SQL改写成可以走索引（lossy化,通常是放大WHERE 条件，同时采用二次check来过滤放大的记录。）  
同样具有lossy思想的还包括：  
1、bloom index，放大搜索范围，再进行二次check。  
2、bitmap scan，放大搜索范围，再进行二次check。  
使用索引扫描降低了IO开销，但是二次check(Filter)需要一定的CPU开销，总体成本还是下降的。  
如果要同时消除IO与check，可以使用精准索引（或者partial index）。  
源码请参考  
```  
src/include/nodes/supportnodes.h:typedef struct SupportRequestIndexCondition  
src/include/nodes/supportnodes.h:} SupportRequestIndexCondition;  
src/include/nodes/nodes.h:      T_SupportRequestIndexCondition  /* in nodes/supportnodes.h */  
src/backend/optimizer/path/indxpath.c:  SupportRequestIndexCondition req;  
src/backend/optimizer/path/indxpath.c:  req.type = T_SupportRequestIndexCondition;  
src/backend/utils/adt/like_support.c:   else if (IsA(rawreq, SupportRequestIndexCondition))  
src/backend/utils/adt/like_support.c:           SupportRequestIndexCondition *req = (SupportRequestIndexCondition *) rawreq;  
src/backend/utils/adt/network.c:        if (IsA(rawreq, SupportRequestIndexCondition))  
src/backend/utils/adt/network.c:                SupportRequestIndexCondition *req = (SupportRequestIndexCondition *) rawreq;  
```  
## 参考  
https://www.postgresql.org/docs/devel/xfunc-optimization.html  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=74dfe58a5927b22c744b29534e67bfdd203ac028  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/adt/like_support.c;h=b001dde5fc7d73b24853296ebc27e20044fae2c7;hb=74dfe58a5927b22c744b29534e67bfdd203ac028  
[《PostgreSQL bitmap scan的IO放大的原理解释和优化》](../201801/20180119_03.md)    
[《Recheck Cond filter IO\CPU放大 原理与优化CASE - 含 超级大表 不包含(反选) SQL优化》](../201712/20171207_02.md)    
[《PostgreSQL multipolygon 空间索引查询过滤精简优化 - IO，CPU放大优化》](../201711/20171122_03.md)    
[《索引顺序扫描引发的堆扫描IO放大背后的统计学原理与解决办法 - PostgreSQL index scan enlarge heap page scans when index and column correlation small.》](../201404/20140426_01.md)    
[《PostgreSQL bloom filter index 扩展 for bigint》](../201810/20181003_02.md)    
[《PostgreSQL 11 preview - BRIN索引接口功能扩展(BLOOM FILTER、min max分段)》](../201803/20180323_05.md)    
[《PostgreSQL 9.6 黑科技 bloom 算法索引，一个索引支撑任意列组合查询》](../201605/20160523_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")