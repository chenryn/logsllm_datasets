title:Improving the Packet Send-Time Accuracy in Embedded Devices
author:Ricky K. P. Mok and
Weichao Li and
Rocky K. C. Chang
Improving the Packet Send-Time Accuracy
in Embedded Devices
Ricky K.P. Mok(B), Weichao Li, and Rocky K.C. Chang
Department of Computing, The Hong Kong Polytechnic University,
{cskpmok,csweicli,csrchang}@comp.polyu.edu.hk
Hong Kong, China
Abstract. A number of projects deploy Linux-based embedded systems
to carry out large-scale active network measurement and network exper-
iments. Due to resource constrains and the increase of network speed,
obtaining sound measurement results from these low-end devices is very
challenging. In this paper, we present a novel network primitive, OMware,
to improve the packet send-time accuracy by enabling the measurement
application to pre-dispatch the packet content and its schedule into the
kernel. By this pre-dispatch approach, OMware can also reduce the over-
heads in timestamp retrievals and sleeping, and the interference from
other application processes.
Our evaluation shows that OMware can achieve a microsecond-level
accuracy (rather than millisecond-level in a user-space tool) in the inter-
departure time of packet trains, even under heavy cross traﬃc. OMware
also oﬀers optimized call for sending back-to-back packet pairs, which
can reduce the minimum inter-packet gap by 2 to 10 times. Further-
more, OMware can help reduce the error of replaying archived traﬃc from
40 % to at almost 19 %.
1 Introduction
Linux-based embedded devices are ubiquitous. For example, many homes use
home routers or WiFi APs for sharing the residential broadband access. Some of
them run OpenWrt [27], a popular Linux distribution for networked embedded
devices, which allows developers to re-use the software tools implemented for
the PCs via cross compilation. Due to their low cost, several projects, such as
BISMark [1], SamKnows [8], and RIPE Atlas [6], employ them as vantage points
to measure the Internet performance or gauge the network service quality of
residential broadband. ARM-based single-board computers, such as Raspberry
Pi [5], are also used in sensor network and embedded cloud research.
Obtaining sound measurement results from these resource-constrained devices
is however very challenging. A fundamental requirement is to send out (probe
or archived) packets onto the wire according to their pre-determined schedules.
Inaccurate packet send times will distort the scheduled probe patterns (e.g., Pois-
son, periodic, and Gamma renewal) in active measurement which may result in
non-optimal probing [9]. Inaccurate packet send times can also directly aﬀect the
c(cid:2) Springer International Publishing Switzerland 2015
J. Mirkovic and Y. Liu (Eds.): PAM 2015, LNCS 8995, pp. 332–344, 2015.
DOI: 10.1007/978-3-319-15509-8 25
Improving the Packet Send-Time Accuracy in Embedded Devices
333
measurement results for timing-sensitive measurement, notably packet-pair
capacity [12,20] and available bandwidth [19].
A major source of send-time inaccuracy is the high overhead for these devices
to move packets between user and kernel space and in executing the sleep and
timestamping function calls. These overheads will widen the gap between the
scheduled send time and the actual time of delivering the packet to the wire.
Another problem is to contend resources with other running processes (E.g.,
ﬁrewall, NAT, and DNS request forwarding in a residential broadband router).
Due to the CPU context switching, the measurement tool will experience highly
ﬂuctuated overheads which cannot be calibrated easily. A traﬃc generator may
even fail to send the expected pattern when the CPU consumption is high [10].
In this paper, we propose OMware, a new network primitive to improve the
send-time accuracy. Its main novelty is on utilizing the sleep period typically
required for a packet sending process to copy packets from user space to ker-
nel and construct the sk buff structure [24] for the network card driver. As a
result, the ﬁrst pre-dispatching phase “absorbs” these operations’ overheads. In
addition, OMware oﬀers optimized function calls for sending back-to-back packet
pairs, which can improve the accuracy of capacity and available bandwidth mea-
surement [11,12,20,21].
We evaluate OMware with two OpenWrt routers (NETGEAR WNDR 3800
and TP-LINK WR1043ND) and perform a set of experiments under diﬀerent
levels of cross traﬃc to investigate the improvement in network measurement.
The results show that OMware can achieve a microsecond-level accuracy (rather
than millisecond-level in a user-space tool) in the inter-departure time (IDT) of
packet trains even under heavy cross traﬃc. Besides, the packet sending delay
can be signiﬁcantly reduced by 0.2 ms. Furthermore, OMware can reduce the IDT
in a back-to-back packet pair by 2 to 10 times, therefore enabling the embedded
device to measure a much higher capacity.
2 Related Works
There are generally two approaches to increase the packet I/O performance—
hardware and kernel. The hardware approach adopted by SoNIC [23], NetFPGA
[4], and [14] uses programmable network interface cards to improve the precision
of packet sending time and receiving timestamp. However, these cards are usually
expensive, thus prohibiting them from being used in embedded devices, such as
residential broadband routers. Intel recently proposes the DPDK library [18] to
boost packet processing performance. However, this library is only supported by
their Xeon series CPU which is not available in many embedded systems.
The kernel approach runs on commercial PCs and optimizes the operating
system’s kernel to increase the performance. Examples include PF RING [15]
for improving packet capturing performance, and nCap [16], netmap [29], and
kTRxer [30] for improving both sending and receiving speed. Epoll in Linux and
kqueue in FreeBSD are mainly for improving the event notiﬁcation mechanism,
which can enhance the performance of packets reception. On the other hand,
334
R.K.P. Mok et al.
pktgen [26] aims at a high-speed packet sending. However, they do not consider
the accuracy of packet send time. Using real-time Linux (RTLinux [7]) is a possi-
ble solution to increase the packet send-time accuracy. For example, Kiszka et al.
propose RTnet [22] for hard real-time networking. However, running RTLinux on
residential broadband router may signiﬁcantly aﬀect the performance of running
other network services.
In wireless sensor network community, ¨Osterlind and Dunkels [28] proposed
to pre-copy packet to improve the packet forwarding throughput in 802.15.4
networks, but the application cannot send packets at any dedicated time.
3 Background
Linux-based embedded devices, such as home routers and private NASes (Net-
work Access Storage), can be found in many homes today and of low cost. Some
of them support OpenWrt, which is one of the popular and active Linux distri-
butions speciﬁcally for embedded devices. Furthermore, the packages of several
network measurement tools, including D-ITG, httping, and hping, are readily
available on public repositories. Developers can also run their own tools via cross
compilation. However, the computational power of these devices are far lower
than commodity PCs. Table 1 shows the detailed conﬁgurations of three testing
devices, including NETGEAR WNDR 3800, which has the same conﬁgurations
as a BISMark-enabled router, and a reference PC.
Table 1. The conﬁgurations of the testing devices.
Device Model
Raspberry Pi
TP-LINK WR1043ND
AR9132 (400 MHz)
NETGEAR WNDR3800 AR7161 (680 MHz)
CPU/Chipset (Clock Freq.) RAM
BCM2835 (700 MHz)
512 MB
32 MB
128 MB
Reference PC
Intel Core2Duo (1.86 GHz)
2 GB
Note: All embedded devices are running OpenWrt 12.09.1.
All devices expect Raspberry Pi support 1 Gbps Ethernet.
Due to resource limitations, the performance and accuracy of these devices
are not satisfactory, especially in today’s high speed network. We have identiﬁed
three basic operations—timestamp retrieval, sleep, and packet transmission—
could cause performance degradation. These operations are commonly used in
network tools. In the following, due to page limitation, we can only show the per-
formance issues in packet transmission, which cause the most signiﬁcant impact.
3.1 Packet Sending Performance
We deﬁne the packet sending performance by the time period between the calling
of sendto() and the packet is put on wire, because some tools may regard the
Improving the Packet Send-Time Accuracy in Embedded Devices
335
s
/
T
D
I
t
e
k
c
a
P
.
g
v
A
10−4
10−5
10−6
40 200
Reference PC
TP−link
Netgear
Raspberry Pi
1500
500
1000
IP packet size /bytes
Fig. 1. The average packet IDT against packet size on all devices.
calling of sendto() as the packet sending time. Previously, Rizzo showed that
the time period 950 ns in his high-end FreeBSD host (Intel i7-870 with 10 Gbit
NIC) [29]. However, we found that tens of microseconds are required in the
embedded devices.
Instead of forcing the functions to return early [29], our benchmark pro-
gram repeatedly ﬂushes out 100,000 identical TCP packets using the raw socket
(i.e., sendto()). Besides, the packet’s TCP/IP header and checksums are pre-
computed to mitigate any overhead from these operations. We repeat the exper-
iment with ﬁve packet sizes, which are {40, 200, 500, 1000, and 1500} bytes.
All the packets are captured by an endace DAG card directly connected to the
device. We then analyze the IDTs between packets to estimate the overall send-
ing performance.
Figure 1 shows the average packet IDTs against the packet sizes. We can see
that the performance of the three embedded devices is about one order of mag-
nitude slower than a commodity PC. For example, the average packet IDT for
40-byte packets is 2.64 µs, while the NETGEAR router is 41.7 µs. The Rasp-
berry Pi performs the worst among the embedded device, because the Rasp-
berry Pi’s ethernet interface connects to CPU via the USB interface and results
in poor performance. Unlike the reference PC, the performance is fairly stable
across the packet sizes in all three embedded devices. The average packet IDTs
for TP-LINK and NETGEAR only respectively increase by 5 % and 8 % as the
packet size increases from 40 bytes to 1500 bytes.
4 Pre-dispatch Programming Model
We survey several network tools listed in Table 2. We ﬁnd that these tools are
often implemented with similar kind of function calls in packet I/O, sleep and
timestamp retrieval. We further investigate their source code and programming
ﬂows. These tools often adopt a sequential programming model to schedule the
sending of packets. Figure 2(a) and (b) illustrate a timeline comparison between
the sequential model and our proposed pre-dispatch model, respectively. The
application in the ﬁgures refers to a network tool running on the user space.
For both model, at time t0, we assume the application has prepared the packet
content to be sent at a future time, ts. The packet appears on the wire at
336
R.K.P. Mok et al.
Table 2. Examples of function calls used in network tools.
Tools
Packet I/O
Sleep
Timestamp Retrieval
D-ITG [13] POSIX Socket select() and polling gettimeofday()
httping [2] POSIX Socket usleep()
Iperf [3]
POSIX Socket nanosleep()
gettimeofday()
gettimeofday()
Fig. 2. Timeline comparison between the sequential and pre-dispatch approaches.
{tw, t(cid:3)
are (ts − t0) or (t(cid:3)
w} in {sequential, pre-dispatch} model. Therefore, the sending time errors
s − t0) for sequential or pre-dispatch model, respectively.
We ﬁrst consider the sequential model in Fig. 2(a). The applications using
this model are usually implemented using POSIX socket for packet I/O and a
family of sleep() functions for spacing out packets. We summarize this model
into three major steps.
(1) The application prepares the packet content, computes the sleep period (i.e.,
ts − t0, for ts > t0) and goes into sleep mode.
(2) After the sleep period is over, the packet content is copied to the kernel using
(3) The packet headers are ﬁlled by the TCP/IP stack and ﬁnally sent to the
socket.
network card.
On the other hand, our pre-dispatch model, as shown in Fig. 2(b), divides
the packet sending process into two major phases. The tool ﬁrst prepares and
copies the packet to the OMware before the scheduled sending time, ts. Then, the
OMware sends the packet when ts arrives. We can describe the details with ﬁve
steps:
(i) Once the packet is ready and the sending time is determined, the application
can immediately invoke the packet sending call in the OMware API, which
takes the pointer of packet and the sending time as the input.
(ii) The OMware processes the packet, which includes adding ethernet header
and constructing sk buff structure.
Improving the Packet Send-Time Accuracy in Embedded Devices
337
(iii) If the packet sending time does not arrive (i.e., current time < ts), OMware
will add the packet sending operation as a kernel task triggered by a high
resolution timer. Otherwise, the packet should be sent immediately.
(iv) When the scheduled send time ts arrives, an interrupt will be generated to
trigger the callback routine of sending the processed packet.
(v) As the packet has been processed, it can be put onto the wire quickly. The
OMware API then acknowledges the application on whether the process is
successful.
The major diﬀerence between the two models is when the program starts to
wait (i.e., (1) and (iii)) for the scheduled time. The pre-dispatch model utilizes
part of the sleep time to handle time consuming operations, such as (i) and (ii).
Therefore, the system can take a shorter critical path in sending packets and
improve the throughput.
5 Evaluation
In this section we evaluate the packet send-time accuracy, pre-dispatching period,
packet-pair accuracy, and packet send timestamp accuracy on a testbed. To sup-
port the pre-dispatch model, we have implemented OMware, which is a loadable
kernel module for Linux. OMware provides a set of APIs for network tools. We
cross-compile OMware, so that our experiments can run on two home routers,
NETGEAR WND3800 and TP-LINK WR1043ND, both of which are installed
with OpenWrt 12.09.1.
5.1 Testbed and Test Suite
We setup a testbed, as shown in Fig. 3, to emulates a network environment with
cross traﬃc. The WAN port of the OpenWrt router, D0, is directly connected
to an endace DAG Card 4.5G2 [17] with 1 Gbps Ethernet for capturing the
traﬃc sending from D0. The server installed with the DAG card, S0, runs the
dagfwddemo program, so it can forward the traﬃc from D0 to a Linux host, S1,
and the cross traﬃc. X0 and X1 are two Linux hosts for generating cross traﬃc
using D-ITG, where X0 is behind the NAT provided by D0. The cross traﬃc is
unidirectional UDP ﬂows generated by D-ITG [13]. Each ﬂow is conﬁgured with
Pareto distributed packet inter-arrival times and uniform distribution of packet
Fig. 3. Testbed for the performance tests.
338
R.K.P. Mok et al.
Table 3. The test suite for evaluating OMware.
Methods Packet pattern Library Model
OIR
Packet train
OMware OMware (initial
pre-
dispatching)
Description
The tool prepares all the
probe packets and their
sending timestamps in
advance and sends them
to OMware for pre-
dispatching the sending of
the packets
OFR
Packet train
OMware OMware (on-the-
The tool uses
ﬂy pre-
dispatching)
OSM
Packet train
OMware Sequential
clock nanosleep() with
absolute timestamp to
sleep until φ μs before the
scheduled send time.
Then, it prepares the
probe packets and sends
them to OMware for
pre-dispatching the
sending of the packets
This method is a special case
of OFR method where φ
is zero
RSM
Packet train
POSIX Sequential
This method uses raw socket
for sending packets.
Similar to OSM,
clock nanosleep() with
absolute timestamp is
used for spacing the probe
packets
TOM
Packet pairs
OMware OMware
This method employs the
packet pair sending
function in OMware to send
a sequence of packet pairs
with initial
pre-dispatching
TRW
Packet pairs
POSIX Sequential
This method uses raw socket
to send a sequence of
packet pairs
size over {40, 1500} bytes. The bitrate for each ﬂow is about 2200 kbps, and the
packet sending rate is about 352 packets/s.
We have implemented a simple network measurement tool running with
OMware and diﬀerent programming models for comparing the performance and
timing accuracy between our approach and raw socket. Table 3 lists the details
of a test suite. The packet train tests send a train of evenly spaced TCP data
Improving the Packet Send-Time Accuracy in Embedded Devices
339
packets to the WAN port. According to their memory capacities, the train has
100 packets for the NETGEAR router and 50 packets for the TP-LINK router.
The packet pair tests send 50 and 25 pairs of back-to-back packets to the WAN
port. Both tests use diﬀerent packet sizes, inter-departure times between packets
or packet pairs, and degree/ direction of cross traﬃc. The parameters used are
listed in Table 4. The packet send time is recorded by both the measurement
tool using OMware and the DAG card.
Table 4. The parameters used in evaluating packet sending performance.
Parameters
No. of cross traﬃc ﬂows, ρ
Direction of cross traﬃc, ρ
IP packet size, λ (bytes)
Expected inter-departure time, α (μs)
Pre-dispatching period for the OFR method, φ (μs) 0, 100, 500, 1000
0, 1, 5, 10, 20, 30
WAN→LAN, WAN←LAN
40, 200, 500, 1000, 1500
Values
0, 10, 100, 1000, 10000, 100000
5.2 Packet Send-Time Accuracy
We use the timestamps from the packet capture to compute the actual packet
IDT sent from the router by IDT = tsn+1 − tsn, where tsn represents the
timestamp of the nth packet in the packet train. Figure 4 shows a log-log plot of
average packet IDT against the expected IDT, α, in the idle NETGEAR router.
The error bars plot the 95 % conﬁdence interval of data. We can see that the OIR
method outperforms the other three, especially in very small packet IDT (10 and
100 µs). But the variation for 10 µs case is quite large, as this IDT is close to the
limit of the system. The OFR method becomes more accurate when the expected
IDT increases to 100 µs as the pre-dispatching can take place after sending the
ﬁrst fesw packets. The OSM and RSM methods improve their accuracy when
the IDT is larger than 1 ms.
10−1
10−2
10−3
10−4
10−5
s
/
T
D
I
t
e
k
c
a
P
e
g
a
r
e
v
A
10−5
Ideal
OIR
OFR
OSM
RSM
10−1
10−4
10−3
Assigned Packet IDT /s
10−2
Fig. 4. The log-log plot of measured average packet IDT against assigned one for OIR,
OFR (φ = 1000 µs), OSM, and RSM (ρ = 0, λ = 40 bytes, α ≥ 10 µs, NETGEAR).
340
R.K.P. Mok et al.
x 10−4
x 10−3
s
/
T
D
I
t
e
k
c
a
P
10.2
10
9.8
9.6
s
/
T
D
I
t
e
k
c
a
P
20
15
10
5
0
s
/
T
D
I
t
e
k
c
a
P
2
1.5
1
0.5
0
0
5
−
0
−
R
O
I
0
4
−
0
−
R
O
I
0
0
5
1
−
0