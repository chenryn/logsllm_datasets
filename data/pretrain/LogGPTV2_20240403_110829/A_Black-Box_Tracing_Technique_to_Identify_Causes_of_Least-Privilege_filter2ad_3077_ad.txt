information already has Admin privileges. The second rea-
son we considered is that some code path we did not execute
generates a failure when the user lacks Admin privileges.
On balance, we believe the evidence points to the check for
Admin privileges being an explicit decision by the applica-
tion developers to require Admin privileges.
5 Related Work
A common approach to increasing system security is to
sandbox applications or users, so that the scope of individ-
ual compromises is decreased. Common sandboxing tech-
niques include virtual machines [15], system call interposi-
tion [1, 14, 30], and restricted ﬁle systems [12]. Our work
differs from this prior art in that we are not inventing a new
sandbox or developing a new technology to better imple-
ment an existing sandbox. Instead, our tracing technique
is designed to help developers and system administrators
make use of an existing and well-understood sandbox: the
unprivileged user.
Other previous work has investigated technologies for
Security Function
Access-Check
Access-Check
Process
explorer.exe
Game.exe
Access-Check
Game.exe
Object Name
\Program Files\Diablo II\Diablo II.exe
\REGISTRY\MACHINE\SYSTEM\ControlSet001\Control\
MediaProperties\PrivateProperties\Joystick\Winmm
\Device\CdRom0
Table 6. Log Entries for Diablo II
building or re-building systems so that they better conform
to the principle of least privilege [13, 25, 32]. Provos et
al show how separating OpenSSH into privileged and un-
privileged parts (privilege separation) would have reduced
its vulnerability to several security holes that were later dis-
covered [26]. Brumley and Song describe the Privtrans tool
which signiﬁcantly automates this process using static anal-
ysis and annotations on privileged operations [5]. Our tech-
nique is complementary to Privtrans, and our tracing tech-
nique could potentially be used to automatically produce the
annotations required by Privtrans.
A common assumption in much of this earlier work is
that some part of the program under investigation (e.g.,
OpenSSH) legitimately requires the ability to perform a
privileged operation.
In contrast, our investigation into
Windows applications suggests that in many cases, the re-
quirement that the application run in a privileged context is
a trivial bug. In other cases, the requirement that the ap-
plication run in a privileged context reﬂects a larger design
ﬂaw. There was only an argument for the application requir-
ing Admin privileges in two of the eight cases we evaluated,
RAS and Power Conﬁg.
Some previous research has focused on new models for
access control, e.g., Role Based Access Control, Type En-
forcement, and Mandatory Access Control [20]. The de-
velopment of policies for such systems, and in particular
the retroﬁtting of policies to existing applications, has been
recognized to require a signiﬁcant amount of work [28]. A
tracing approach likes ours might help in policy develop-
ment for such systems by providing insight as to why par-
ticular applications do or do not violate particular access
control policies.
We now consider previous work that has used static anal-
ysis [2, 34], a commonly cited alternative to dynamic trac-
ing techniques such as our own. A major strength of static
analysis is that it can achieve code-coverage trivially, while
dynamic techniques often require sophisticated test-case
generation strategies to exercise all code paths, if exercising
all code paths is possible at all. However, no one has pre-
viously attempted to apply static analysis to this problem,
and indeed, we believe static analysis would be difﬁcult or
impossible for at least three reasons. First, the underlying
property being checked is a function of all ACLs on the
system, and this is not a ﬁxed target. It is standard practice
to reconﬁgure ACLs based on the deployment environment
[24], and the actual ACLs can depend on runtime state, e.g.,
virtual directories such as “My Documents” will be mapped
to different directories (with different ACLs) depending
on the current user. Second, our investigation shows that
privilege failures sometimes occur after the ﬂow of con-
trol passes through multiple libraries, and static analysis
becomes increasingly difﬁcult as the scope of the analysis
increases. Lastly, static analysis typically requires source
code, and sometimes additional annotations, and so can not
be used if portions of the code are only available in binary
format. This is a common situation for system adminis-
trators, and also for developers due to the common use of
third-party components.
The most closely related previous work is the cur-
rent developer practice of identifying privilege failures by
tracing the ﬁle system or registry and grepping for AC-
CESS DENIED [17]. Our technique goes beyond this by
monitoring a complete set of functions within the Windows
security subsystem and implementing a more sophisticated
noise ﬁltering strategy. Our evaluation in Section 4 justi-
ﬁes the importance of both of these advances for identifying
least-privilege incompatibilities. On UNIX systems, system
call tracing is sometimes similarly used to debug access fail-
ures. Our tracing technique differs from system call tracing
in its more sophisticated noise ﬁltering, and the signiﬁcantly
smaller code base that must be correctly understood in order
to correctly capture all access failures. System call tracing
must monitor all functions that have security implications
and are exposed by the OS API, while we only need to mon-
itor ﬁve functions in the Windows security subsystem.
A recently proposed alternative approach to eliminating
least-privilege incompatibilities is to encourage developers
to run without Admin privileges [27]. Initiating this prac-
tice helps with code bases being developed from scratch,
but is difﬁcult to incorporate into large pre-existing code
bases. Even in the development of new software, our tracing
technique provides several additional beneﬁts to developers
running without Admin privileges:
individual test passes
can uncover multiple least-privilege incompatibilities; these
least-privilege incompatibilities are identiﬁed as such (not
just as bugs with unknown causes); and additional help-
ful debugging information is provided, such as complete
call stacks (if symbol ﬁles are present), object names, and
ACLs.
6 Conclusion and Future Directions
Least-privilege incompatibilities cause many Windows
users to run with Admin privileges. This signiﬁcantly in-
creases the vulnerability of Windows systems: any com-
promise of a user level application becomes a system com-
promise. To address this problem, we introduce a black-
box tracing technique that identiﬁes the causes for least-
privilege incompatibilities. Our technique catches all least-
privilege incompatibilties on exercised code paths.
We evaluated our tracing technique using eight least-
privilege incompatible applications. These eight applica-
tions span a variety of user types, and exhibit a variety of
reasons for the underlying least-privilege incompatibilities.
Based on these evaluations and subsequent discussions with
developers, we conclude that the tracing technique makes
ﬁxing or mitigating least-privilege incompatibilities signiﬁ-
cantly easier.
In the future, our tracing technique would provide even
more value if it was integrated with other development tech-
nologies, such as the ability to set breakpoints. Also, we
believe that our log validation technique highlights the need
for a utility to conﬁgure security permissions associated
with objects other than ﬁles and registry keys. In addition
to aiding system administrators in mitigating some least-
privilege incompatibilities, such a utility would be conve-
nient for developers debugging these incompatibilities. Fi-
nally, we speculate that a tracing technique like ours could
be fruitfully applied to some least-privilege problems on
other operating systems.
Acknowledgements
We thank our colleagues at Microsoft and Microsoft Re-
search for their assistance and insightful comments, and
in particular Doug Beck, Bill Bolosky, Brad Daniels, Jon
Howell, Jon Pincus, Dan Simon, Helen Wang, Rich Ward,
and Alec Wolman.
References
[1] A. Acharya and M. Raje. MAPbox: Using Parameter-
ized Behavior Classes to Conﬁne Untrusted Applications.
USENIX Security 2000.
[2] K. Ashcraft and D. Engler. Using Programmer-Written
Compiler Extensions to Catch Security Holes. IEEE Secu-
rity and Privacy 2002.
[3] T. Ball. Abstraction-guided Test Generation: A Case Study,
Microsoft Research Technical Report, MSR-TR-2003-86,
November 2003.
[4] K. Brown.
Keith’s Security Hall
of Shame.
http://www.pluralsight.com/keith/hallofshame/default.htm.
[5] D. Brumley and D. Song. Privtrans: Automatically parti-
tioning Programs for Privilege Separation. USENIX Secu-
rity 2004.
[6] M. E. Carson. Sendmail without the Superuser. USENIX
Security 1993.
[7] CERT.
Advisory CA-2004-02 Email-borne Viruses.
http://www.cert.org/advisories/CA-2004-02.html.
[8] CERT. AOL Instant Messenger client for Windows con-
tains a buffer overﬂow while parsing TLV 0x2711 packets.
http://www.kb.cert.org/vuls/id/907819.
[9] CERT.
Critical Vulnerabilities in Microsoft Windows.
http://www.us-cert.gov/cas/techalerts/TA04-212A.html.
[10] CERT.
Internet Explorer Update
ADODB.Stream
Control.
cert.gov/cas/techalerts/TA04-184A.html.
ActiveX
to Disable
http://www.us-
[11] H. Chen, D. Wagner, and D. Dean. Setuid demystiﬁed.
USENIX Security 2002.
[12] C. Cowan, S. Beattie, G. Kroah-Hartman, C. Pu, P. Wagle,
and V. Gligor. SubDomain: Parsimonious Server Security.
LISA 2000.
[13] C. Evans. Very secure FTP daemon. http://vsftpd.beasts.org.
[14] T. Garﬁnkel. Traps and Pitfalls: Practical Problems in Sys-
tem Call Interposition Based Security Tools. NDSS 2003.
[15] T. Garﬁnkel, B. Pfaff, J. Chow, M. Rosenblum, and
D. Boneh. Terra: A Virtual Machine-Based Platform for
Trusted Computing. SOSP 2003.
[16] A. Gotlieb, B. Botella, and M. Rueher. Automatic test data
generation using constraint solving techniques. In Proceed-
ings of the International Symposium on Software Testing
and Analysis, pages 53-62. ACM, 1998.
[17] D. GUI.
Permissions
http://msdn.microsoft.com/library/default.asp?
url=/library/en-us/dnaskdr/html/askgui03272001.asp.
Debugging
Problems.
[18] M. Howard, J. Pincus, and J. Wing. Measuring Relative At-
tack Surfaces. Proceedings of Workshop on Advanced De-
velopments in Software and Systems Security, Taipei, De-
cember 2003. Also CMU-CS-03-169 Technical Report, Au-
gust 2003.
[19] D. Jackson and M. Vaziri. Finding bugs with a constraint
solver. In Proceedings of the International Symposium on
Software Testing and Analysis, pages 14-25. ACM, 2000.
[20] P. A. Loscocco and S. D. Smalley. Meeting Critical Security
Objectives with Security-Enhanced Linux. In the Proceed-
ings of the 2001 Ottawa Linux Symposium, July 2001.
[21] Microsoft.
Certain Programs Do Not Work Cor-
rectly If You Log On Using a Limited User Account.
http://support.microsoft.com/default.aspx?scid=kb;en-
us;307091.
[22] Microsoft.
Retrieving the Properties of a Connec-
tion
http://msdn.microsoft.com/library/
default.asp?url=/library/en-us/ics/ics/retrieving the proper-
ties of a connection vbscript .asp.
(VBScript).
[23] T.
Oetiker.
MSI
Packaging
How-to.
http://isg.ee.ethz.ch/tools/realmen/det/msi.en.html.
[24] P. Proctor.
Hardening Windows NT Against At-
http://www.secinf.net/windows security/ Harden-
tack.
ing Windows NT Against Attack.html.
[25] N. Provos. Improving Host Security with System Call Poli-
cies. USENIX Security 2003.
[26] N. Provos, M. Friedl, and P. Honeyman. Preventing Privi-
lege Escalation. USENIX Security 2003.
[27] P. Provost. Non-Admin Development in VS.NET 2003.
http://www.peterprovost.org/archive/2004/11/01/2040.aspx.
15:
Rhodes.
Handbook,
[28] T.
ter
Access
http://www.freebsd.org/doc/en US.ISO8859-
1/books/handbook/mac.htmlciteseer.nj.nec.com/
ganesh03peertopeer.html.
FreeBSD
Mandatory
Chap-
Control,
[29] S. Saroiu, S. D. Gribble, and H. M. Levy. Measurement and
Analysis of Spyware in a University Environment. NSDI
2004.
[30] M. R. Tal Garﬁnkel, Ben Pfaff. Ostia: A Delegating Archi-
tecture for Secure System Call Interposition. NDSS 2004.
[32] W.
Venema.
Postﬁx
Overview.
http://www.postﬁx.org/motivation.html.
[33] Y.-M. Wang, R. Roussev, C. Verbowski, A. Johnson, M.-
W. Wu, Y. Huang, and S.-Y. Kuo. Gatekeeper: Monitoring
Auto-Start Extensibility Points (ASEPs) for Spyware Man-
agement. In Proceedings of Usenix LISA, Nov. 2004.
[34] J. Yang, T. Kremenek, Y. Xie, and D. Engler. MECA: an
Extensible, Expressive System and Language for Statically
Checking Security Properties. ACM CCS 2003.
[31] Toups.
Tax?!?!
mark,9732454 mode=ﬂat.
Administrator
Privileges
for
http://www.dslreports.com/forum/
Turbo-
re-