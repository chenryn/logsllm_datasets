polynomially bounded t, ǫ is negligible.
2.2 Authenticated Encryption
A symmetric key authenticated encryption AE = (SEnc, SDec)
consists of two deterministic algorithms that are associated
with a key space K.
• SEnc, an encryption algorithm, takes an encryption
key dk ∈ K and a message m as input, and outputs a
ciphertext c, denoted as c ← SEnc(dk, m).
• SDec, a decryption algorithm, takes a decryption key
dk ∈ K and a ciphertext c as input, and outputs a mes-
sage m ( or a special symbol ⊥ indicating “invalid”),
denoted as m ← SDec(dk, c).
We require that ∀ dk ∈ K, m = SDec(dk, SEnc(dk, m)).
Definition 3. A is an adversary and AE is a symmetric
key authenticated encryption scheme. Consider the following
experiment:
Advae
A,AE(k) = |Pr[K ← K; b ← {0, 1};
b′ ← ASEOb ,SDOb (k) : b = b′] − 1/2|
Here SEOb(m0, m1) is a Left-or-Right encryption oracle that
returns c ← SEnc(K, mb), and can be accessed only once.
SDO is a Left-or-Right decryption oracle, where SDO1(c)
returns m ← SDec(K, c) and SDO0(c) always returns “⊥”
(reject). The input for SDO must be diﬀerent from the out-
put of SEO. We say a symmetric key authenticated encryp-
tion scheme is (ǫ, t)-secure, if for any adversary A with run-
ning time at most t has advantage in the above game at most
ǫ. Furthermore, we say AE is secure, if for any polynomially
bounded A, ǫ is negligible.
The above deﬁnition is simpliﬁed and equivalent to the
two separate notions of indistinguishability and authentic-
ity (according to [21]). An easy way to construct such sym-
metric key authenticated encryption is to use an encrypt-
then-mac generic composition [1] of a semantically secure
encryption and a message authentication code (MAC) (re-
viewed in Appendix A.1).
2.3 Number Theoretic Assumptions
Decisional Bilinear Diﬃe-Hellman (DBDH) Assump-
tion.
Let G1, G2 be two multiplicative cyclic groups of prime
order q and g be a generator of G1. A bilinear map e :
G1 × G1 → G2 satisﬁes the following properties. For all
(a, b) ∈ Z2, e(ga, gb) = e(g, g)ab, and e(g, g) 6= 1. The
(ǫ, t)-DBDH assumption holds in (G1, G2) if no t-time al-
gorithm has advantage at least ǫ, where for an algorithm
A, A’s advantage ǫ is deﬁned as ǫA = 1
2 | Pr[A(g, ga, gb, gc,
e(g, g)abc) = 1] − Pr[A(g, ga, gb, gc, e(g, g)z) = 1]|.
Decisional Quadratic Residue (DQR) Assumption.
N ) = 1}, where ( x
For a positive integer N , we use J(N ) to denote the set
{x ∈ ZN : ( x
N ) is the Jacobi symbol of x in
ZN . We use QR(N ) to denote the set of quadratic residues
in J(N ). Let q1, q2 be two large primes of equal size. The
(ǫ, t)-DQR assumption holds for Z ∗
N , if no t-time algorithm
has advantage at least ǫ, where A’s advantage is deﬁned as
ǫA = | Pr[N ← q1q2, V ← QR(N ) : 1 ← A(N, V )] − Pr[N ←
q1q2, V ← J(N ) \ QR(N ) : 1 ← A(N, V )]|.
3. THE MODEL OF USEFUL CLIENT PUZ-
ZLE
We give the syntax of useful client puzzles, and deﬁne
its security requirements, namely, security, computational
intensity, reliability, usefulness, and non-dependability. Our
model is exactly based on [10], hence our scheme achieves
the same level of security as [10]. We are aware that there
may be some situations where the DoS attack may not be
completely solved by adopting such UCPs in a real network,
e.g. against a distributed DoS (DDoS) attack. We note that
the previous research [10, 16] has similar problem in such
scenarios. Actually this was already recognized and some
possible countermeasures have been proposed in [10, 16]. In
this paper, we only focus on the construction of UCPs here
and refer to [10, 16] for more detailed issues when applying
such UCPs.
Definition 4. A useful client puzzle UCP = (S, X, G, R,
C, H) consists of 6 polynomial-time algorithms.
• S, a probabilistic setup algorithm, takes a security pa-
rameter k as input and produces a pair (mpk, msk) of
corresponding (long-term) public encryption and pri-
vate decryption keys, denoted as (mpk, msk) ← S(k).
• X, a probabilistic auxiliary secret key generation algo-
rithm, takes the server’s decryption key msk as input,
generates a pair (pk, sk) of auxiliary public encryption
and private decryption keys, denoted as (pk, sk) ←
X(msk).
• G, a probabilistic client puzzle generation algorithm,
takes encryption keys mpk and pk, and a message m
72as input and produces a ciphertext c of two parts c0
and c1, denoted as c ← G(mpk, pk, m).
Denote the advantage of an adversary A in the following
experiment as:
• R, a deterministic recovery algorithm, takes a private
decryption key msk, an auxiliary public key pk and a
ciphertext c as input, and recovers a message m (or
“⊥” for rejection.), denoted as m ← R(msk, pk, c).
• C, a deterministic client algorithm, takes c0 and an
auxiliary private key sk, and produces a value p, de-
noted as p ← C(sk, c0).
• H, a deterministic checking algorithm, takes c0 and p
as input, and produces a message m or (“⊥” for re-
jection), denoted as m ← H(p, c0). Particularly, H is
much faster than R.
We additionally require the standard correctness, namely,
∀ (mpk, msk) ← S(k) and ∀ (pk, sk) ← X(msk): (i) R(msk, pk,
G(mpk, pk, m)) = m, (ii) If (c0, c1) = c ← G(mpk, pk, m)
and p ← C(sk, c0), we have m = H(p, c0).
Discussions.
The above formulation of useful client puzzles slightly dif-
fers from that in [10]. While previously there was one algo-
rithm for both long-term server key generation and auxiliary
key generation, we use two diﬀerent algorithms. Moreover,
we insist that the auxiliary key generation algorithm X takes
the input of the server’s secret key, to emphasize the asym-
metric positions of a server and a client, since it brings more
advantage in key management.
Figure 1 depicts the mechanism of a client useful puzzle,
where a server is to process Client A’s log-in request in co-
operation of Client B. In the protocol, the server executes
algorithm (S, X, R, H), Client A executes algorithm G, and
Client B executes algorithm C. We elaborate the algorithms
in Figure 2.
3.1 Security Deﬁnitions
For the convenience of comparisons, we will adopt all the
security requirements in [10], namely computational inten-
sity, reliability, usefulness, non-dependability, and puzzle se-
curity. In this paper, we formally consider two aspects for
puzzle security: semantic security of ciphertexts (security
between Client A and the server), and privacy of the puz-
zles (security between the server and Client B). We elaborate
them below.
Semantic Security of Ciphertexts.
Since the system is a public key cryptosystem, we consider
the security against an adversary holding a public key of the
server and trying to infer the content inside a ciphertext from
Client A. Formally, we require:
Definition 5. Denote X O as an auxiliary key genera-
tion oracle that with msk as input, generates auxiliary pub-
lic key and secret key pair (pki, ski) and appends pki to an
auxiliary public key list L that is available to all parties. De-
note EO as an exposure oracle that with input pki returns
the corresponding auxiliary secret key ski. The restriction is
that A cannot query EO on pk∗. Without loss of generality,
A can access X O for at most q +1 times and EO for at most
q times.
Advss
A,UCP(k) = Pr[(mpk, msk) ← S(k);
(m0, m1, pk∗, s) ← AX O,EO (mpk); b ← {0, 1};
c∗ ← G(mpk, pk∗, mb); b′ ← AX O,EO (c, s) : b = b′] − 1/2
We say a useful client puzzle provides (ǫ, t)-semantic se-
curity of ciphertexts against adaptive chosen ciphertext and
adaptive chosen auxiliary public key attack if for the advan-
tage of any A is at most ǫ with running time at most t.
In the above security deﬁnitions, similar to the previ-
ous work [10], we do not require chosen ciphertext security
(CCA) [18, 19]. For an honest user, a session key dk is ran-
domly chosen each time and used only once, while for an
dishonest user, any invalid ciphertext will be rejected by
the authenticated encryption. We remark that there is no
chosen ciphertext attack on dk.
Privacy of Puzzles.
This notion captures the security that a computationally
unbounded adversary only listens to its own channel, it can-
not have any information of the ciphertext even with a cho-
sen ciphertext attack (CCA) on a puzzle (a partial cipher-
text).
Definition 6. Consider the advantage of an adversary
A in the following experiment.
Advind
A,UCP(k) = Pr[(mpk, msk) ← S(k);
(m0, m1, pk, sk, s) ← AX O,EO,DO(k); b ← {0, 1};
c∗ ← G(mpk, pk, mb), where c∗ = (c0, c1);
b′ ← AX O,EO,DO(c1, s) : b = b′] − 1/2
We say a useful client puzzle scheme provides information-
theoretic privacy of puzzles if for the advantage of any com-
putationally unbounded A is exactly 0. Here X O is an aux-
iliary key generation oracle and EO is an exposure oracle,
which are similar as in Deﬁnition 5. DO is a partial de-
cryption oracle that returns the corresponding message m on
input a ciphertext c1. Especially A can access X O and DO
polynomial times. The restriction is that A cannot query
DO on c1.
3.2 Other Requirements
We require a useful client puzzle should also have the fol-
lowing properties (per [10]):
• Computational intensity: The puzzle should be a mod-
erate but serious computational task, assuring a cer-
tain slow-down of the accessing client.
• Reliability: It should be computationally eﬃcient for
the challenger (the server) to verify the result of the
puzzle (much easier to check than to compute).
• Usefulness: The result of the computation should be
useful to the server.
• Non-dependability: If the puzzle is not actually solved
by the client, the server should still be able to solve it.
4. OUR GENERIC CONSTRUCTION
73† Usually the Setup of the server is done oﬄine in advance. In the above ﬁgure, Client A starts
the log-in process, and there exists another Client B waiting for his challenge.
Figure 1: The Mechanism of a Client Useful Puzzle
Design Ideas.
Actually, in the previous decryption-based useful client
puzzle scheme ([10]), the secret key of the client puzzle is
exactly generated and managed by the server. As we have
mentioned, a dual receiver cryptosystem can be used to build
a useful client puzzle, where the position of a client is sym-
metric to that of a server. However, such setting sometimes
is not necessary. Our key observation is that the server can
fully control the secret key generation for the client. Fur-
thermore, explicitly rejection functionality on invalid cipher-
texts of authenticated encryption (AE) schemes will help to
achieve veriﬁability of client puzzles. Based on these ideas,
we construct the decryption-based client puzzle as follows.
4.1 The Construction
We give our generic construction in Figure 2. Let IDKEM =
(Kg, Ext, Enc, Dec) be an ID-KEM scheme and AE = (SEnc,
SDec) be a symmetric key authenticated encryption scheme.
For syntactic and operational convenience, we only give
our construction based on ID-KEMs. Actually, chosen iden-
tity security (of ID-KEM) is not fully exploited because the
auxiliary public key pk is not selected by the adversary. In
fact, based on this crucial observation, we can construct
UCPs from weaker primitives such as public key encryp-
tion schemes. For lack of space, further details will be in-
cluded in the full version. We also remark that assuming
ID-KEMs, the key management can become easier. Once
can take the local time as the auxiliary public key, which
can be updated periodically while the long-term public key
is left unchanged. We analyze the security of our generic
construction in Theorem 1.
Theorem 1. Our generic construction is a secure useful
client puzzle (UCP) scheme, provided that both IDKEM and
AE are secure.
4.2 Proof of Theorem 1
The correctness of the generic construction can be easily
veriﬁed from the correctness of the underlying ID-KEM and
AE schemes. Particularly, We prove semantic security of
ciphertexts in Lemma 1 and information-theoretic privacy
of UCP in Lemma 2.
Lemma 1. The generic construction depicted in Figure 2
provides (ǫ1 + ǫ2, t1 + t2 + O(k))-semantic security of ci-
phertexts, if A queries EO at most q times, the underlying
IDKEM is (ǫ1, q, t1)-IND-ID-CPA secure and the underlying
AE is (ǫ2, t2)-authenticated encryption.
Proof. We use the game hopping proof technique [24].
Denote Ei as the event that the adversary succeeds in a
speciﬁc game Game i. We demonstrate a sequence of games
and bound the probability diﬀerence of each game, which
ﬁnally leads to our result. We will use the following fact in
our proof.
Fact 1
([24]). Let A, B, F be events deﬁned in some