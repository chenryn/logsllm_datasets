To determine the veracity of this assumption, we evaluated whether we often
see multiple diﬀerent egresses for a given next-hop AS and for a given ingress.
We performed the evaluation on our 25 ASes (see Table 1) containing altogether
90,009 (ingress, next-hop AS) pairs, and found that for 30% of the cases, an
ingress does see more than one egress when crossing over the same AS. Note that
the initial evaluation made by Rocketfuel was conducted on a smaller dataset,
i.e., only one AS and 2,500 (ingress, next-hop AS) pairs, and found that the
early-exit assumption was violated in only 7% of the cases [40].
To go further, we also simulated the Next-hop AS Reduction on our dataset
and found that, in the worst case, this reduction can lead up to a decrease
in the discovery of 32% for links, 18% for IP addresses, and 29% for routers.
These results conﬁrm that Next-hop AS Reduction now leads to too much false
negatives. This can be explained by an increase in peering relationships between
ASes [7], notably with IXPs, leading therefore to a ﬂatter but more diverse
Internet [8,49].
4.3 Ingress Reduction
The idea of Ingress Reduction is that routes taken through a network are usually
destination-speciﬁc. As such, when traceroutes from diﬀerent VPs to the same
destination enter the ISP at the same ingress, the path through the ISP is likely
to be the same. Therefore, only one traceroute from one of the VP would be
required.
The ﬁrst consideration to have is that purely destination-oriented routing is
not necessarily the only default rule in use when it comes to forwarding packets,
given the rise of TE in the last few years [45]. TE strategies take into account
other parameters (such as the type of traﬃc, its origin, or its ﬂow-id with mul-
tipath routing3) to optimize the network traﬃc delivery performance.
Secondly, Ingress Reduction was applicable for Rocketfuel because of its prob-
ing design, that initially assigns the complete target list to each VP (meaning
that all targets are probed from each VP if no reduction applies). In our case
however, our reference dataset subdivides the target list among VPs in order
to speed up the probing process (by design, the same destination is not probed
from two VPs or more), as it has little impact on the overall quality of discovered
data [15].
3 In theory, the transit traﬃc ﬂows can be load balanced among multiple (possibly
inter-domains) routes according to congestion control algorithms.
Anaximander
449
Fig. 1. Anaximander two steps process.
For those two reasons, we will not consider Ingress Reduction for our study,
or any other optimization that could be done on VP placement or targets speciﬁc
balancing among VPs.
5 Anaximander
This section introduces Anaximander4, our new ISP mapping framework. In
a nutshell, given a set of vantage points and a targeted ISP X , Anaximander
aims at discovering the most complete map of X using the minimum amount of
probes to enable a quick and eﬃcient measurement campaign.
Figure 1 illustrates the overall behavior of Anaximander. As Rocketfuel,
Anaximander starts by collecting RIBs. Afterwards comes the Strategy phase,
which is run completely oﬀ-line and has no probing cost. In this step, Anaximan-
der relies on three core principles: (i) ﬁnding an initial pool of targets expected
to transit the ISP of interest (Sect. 5.1); (ii) applying pruning techniques to this
initial pool to reduce the number of probes before probing (Sect. 5.2 and 5.3);
(iii) sorting and scheduling the targets in preparation for the discovery phase
(Sect. 5.4). Those three steps are run in sequence (the output of one is used as
input for the subsequent). At the end, the Strategy phase produces an ordered
list of targets for probing the ISP of interest.
Secondly comes the Discovery phase (Sect. 5.5), in which Anaximander
will send probes based on the target list, taking advantage of the scheduling of
the targets to speed up the discovery progression and possibly stop the probing
4 Anaximander (610–546 BC) is known to be the ﬁrst to have published a map of the
world. See https://en.wikipedia.org/wiki/Anaximander.
450
E. Marechal et al.
in some portions when the discovery becomes marginal in said portions. Once
IP interfaces have been collected, Anaximander can run alias resolution for
generating a router-level map of the ISP, using for instance the combination of
Midar [22] and Apple [28].
5.1 Initial Pool of Targets
Rocketfuel’s Initial Pool of Targets. We start our investigation with the
same initial pool of targets as Rocketfuel, but without applying any of their
reduction techniques, as we have shown they do not oﬀer a good trade-oﬀ between
coverage and eﬃciency for the current shape of the Internet.
The core principle for selecting targets likely to transit the ISP of interest
(i.e., directed probing) is to take advantage of the routing information contained
in BGP routing tables. A BGP entry is composed of a preﬁx (of any length)
associated to several attributes, in particular the AS_PATH attribute. If the AS
of interest appears in the AS_PATH attribute, sending a probe to this preﬁx is
likely to traverse the ISP (in particular if there exists a vantage point co-located
to one of the BGP collectors). The number of targets in the initial pool for each
AS can be found in Table 1, in the “Raw number” column.
/24 Internal Preﬁxes. Anticipating on the results presented in Sect. 6.2,
we actually need to expand Rocketfuel’s initial pool with additional targets in
order to complete our exploration, given the rather low coverage resulting from
it (especially for Stubs and small Transit).
A natural lead to discover most of a given intra-domain AS map is to sim-
ply add the AS’s internal preﬁxes to the pool of targets. This time however,
we consider a ﬁner granularity and divide the raw preﬁxes into /24 preﬁxes
(e.g., with preﬁx 109.75.120.0/22, we split it into four /24 preﬁxes within the
range 109.75.120.0/24-109.75.123.0/24). Basically, our initial pool of target is
thus composed, on the one hand, of the AS’s internal preﬁxes (broken down into
/24 preﬁxes); and on the other hand, of the raw5 directed preﬁxes found in the
RIBs.
Limitations. The public BGP information we rely on is already known to be
incomplete [32]. As a result, some valid targets may be skipped (i.e., false nega-
tives) because of this limitation of the data, although they would have traversed
the ISP.
Another important principle in BGP is that there is no single authoritative
view of the Internet’s inter-domain routing table – all views are in fact relative
to the perspective of each BGP speaker [19]. Obviously, the ideal scenario would
be to have a VP co-located to each BGP collector, in order to get the exact
BGP view from the VP. But since this option is not conveniently available at
5 Understand: not broken down into /24 preﬁxes.
Anaximander
451
large scale, we rather combine together multiple RIBs and use this merging as
an approximation.
The result of this merging can entail false positives, i.e., traceroutes that
do not traverse the ISP and waste the probing budget. Indeed, the BGP collector
that provided the target can be located in a very distant part of the network
from the VP that will actually launch the traceroute. As their network views
potentially do not match (for ﬁrst AS hops in particular), the probe may not
traverse the ISP – even though it would have, had it been launched from the
BGP collector instead. These false positives sacriﬁce the probing budget but not
the accuracy, and can be reduced later thanks to our reduction techniques (see
Sects. 5.2, 5.3, and 5.4).
5.2 Best Directed Preﬁxes
This section introduces our ﬁrst reduction technique, which is based on a simple
observation of the workings of BGP routing tables. The BGP information we
have access to from the RouteViews [38] and RIPE RIS [43] projects comes
in the form of routing tables (RIBs), and not forwarding tables (Forwarding
Information Bases – FIBs). In normal BGP operation, BGP routers typically
receive multiple paths to the same preﬁx. All local routing information learned
by a BGP speaker is maintained in the RIB. As such, a preﬁx can appear multiple
times (and with diﬀerent AS_PATH) in the RIB if it has been advertised by
multiple BGP neighbors (see Table 2 for an example of this).
For each preﬁx in the RIB, the route that will actually be used to forward
packets and installed into the FIB is determined by the BGP route selection
process. BGP has multiple criteria for selecting the best route among a set of
routes towards a preﬁx. The ﬁrst selection criteria is based on local policies
deﬁned by network operators, which reﬂect selﬁsh objectives. Second usually
comes the shortest AS_PATH criteria, a globally safe criteria, which will select the
route with the shortest AS_PATH, in order not to burden the network uselessly.
If necessary, other more or less arbitrary rules are applied until a tie break is
reached. Therefore, when looking at a given RIB to build our initial pool of
targets, we are wasting probes on preﬁxes that could be reached through the AS
of interest, but that never will, as the route inserted into the FIB can be one
that potentially does not go through the AS of interest.
This situation presents the opportunity to perform a ﬁrst reduction on the
initial pool of targets, by building reﬁned FIBs from the collected RIBs. Having
no access to the operators’ local policy, we approximate it with the no-valley and
prefer customer routing policy [12], which is a current practice in today’s Inter-
net. This policy speciﬁes to prefer a route through a customer AS, over a route
through a peer AS, over a route through a provider AS, for economical reasons.
In case the routing policy cannot be applied, or if we need a tie-break between
two RIB entries, we use the second criteria and select preﬁxes only if the AS of
interest is present in the shortest AS_PATH. More precisely, we apply this process
individually for each preﬁx in each RIB, before merging the results together. For
example, based on the use-case presented in Table 2 (and considering that the
452
E. Marechal et al.
Table 2. Routing Table – Example of multiple paths towards the same preﬁx. AS 3223
is a pivot AS where traﬃc can either go towards AS 8262 or AS 3356. If AS 8262 is a
customer of AS 3223, and if AS 3356 is a peer of AS 3223 (for example), entry n◦3 will
be discarded, according to our BGP decision heuristic. Next, entry n◦1 will be discarded
in proﬁt of the entry with the shortest AS_PATH, i.e., entry n◦2. AS 3356 being Anaxi-
mander’s target, this preﬁx will not be selected for Anaximander’s target list.
# Preﬁx
1
2
3
72.249.184.0/21 9050
72.249.184.0/21
72.249.184.0/21
AS_PATH
BGP heuristic
6762 3223 8262 36024
1230 3223 8262 36024 X
39737 3223 3356 36024
AS of interest is the AS3356), we would not select the preﬁx 72.249.184.0/21 for
Anaximander’s target list, as it is not present in the prefered path. We call
this strategy Best Directed Preﬁx (BDP).
5.3 Overlay Reduction
In this section, we present Anaximander’s second reduction technique, relying
on a more in-depth analysis of the routing tables.
Forwarding in the Internet is usually done on a longest preﬁx match basis.6
As such, a router will always prefer to forward a packet towards the most speciﬁc
entry to its intended destination. For instance, a router may contain entries for
preﬁx 10.0.0.0/8 as well as a more speciﬁc preﬁx 10.0.5.0/24. Packets towards
10.0.5.12 (or any other address drawn from the more speciﬁc preﬁx) will always
be forwarded towards 10.0.5.0/24.
It is thus possible, through BGP, to announce more speciﬁc preﬁxes. Given
that not all more speciﬁc advertisements serve the same purpose, Huston has
proposed a classiﬁcation of these more speciﬁc preﬁxes into three categories,
based on the relationship between the more speciﬁc and its immediately enclosing
aggregate advertisement [18].
The ﬁrst category is that of the Hole Punching more speciﬁcs. These more
speciﬁcs are used traditionally to advertise reachability information, in the case
where a block of the aggregate preﬁx has been attributed to a customer AS. In
the routing table, this corresponds to the case where the origin AS of the more
speciﬁc route is diﬀerent from the origin AS of the covering aggregate.
The second category covers Traﬃc Engineering use cases. Network operators
take advantage of the longest preﬁx match rule to control the route choices made
by other BGP speakers to direct traﬃc on more speciﬁc constrained paths (e.g.,
towards links with greater capacity, lower latency, or lower cost). In the routing
table, this corresponds to the case where the origin AS of the more speciﬁc route
and its covering aggregate are the same, but where the AS paths diﬀer.
6 If we do not take into account MPLS forwarding [45], for instance.
Table 3. Routing Table – Example of Overlay category with more speciﬁc preﬁxes.
AS 3356 is Anaximander’s target.
Anaximander
453
AS_PATH
Preﬁx
1.0.4.0/22 4608 4826 3356 56203
1.0.4.0/24 4608 4826 3356 56203
1.0.5.0/24 4608 4826 3356 56203
1.0.6.0/24 4608 4826 3356 56203
1.0.7.0/24 4608 4826 3356 56203
Finally, the third category is called the Overlays. In this category, the more
speciﬁc and its aggregate share the exact same AS_PATH (see Table 3 for an
example of this). These more speciﬁc advertisements actually serve no purpose
at all, as the handling of packets in the aggregate or in the more speciﬁc will
be the same.7 For this reason, the Overlays category is of particular interest for
Anaximander: because there is no variation in the path towards the ISP of
interest, it naturally allows us to reduce the number of probes by selecting a
single preﬁx within a group of overlays.
We thus apply Overlay Reduction (OR) to BDP obtained earlier (see
Sect. 5.2). To do so, we ﬁrst compute the overlays groups for all the RIBs we
have and combine them together to get the most complete view of the Internet.
After this, we cycle through the targets in the pool and randomly select only
a single preﬁx per group of overlays and per VP8. For example, based on the
use-case presented in Table 3 (and considering that the AS of interest is the
AS3356), we would only select one of the preﬁxes present in the table – preﬁx
1.0.6.0/24 for instance.
5.4 Targets Scheduling
After having exploited all that we can regarding routing information (with BDP
and OR), we now start investigating scheduling of our targets, instead of ran-