# IDA
---
## 免责声明
`本文档仅供学习和研究使用,请勿使用文中的技术源码用于非法用途,任何人造成的任何负面影响,与本人无关.`
---
**相关文章 & Reference**
- [萌新学逆向——T1 IDA的正确开启姿势](https://mp.weixin.qq.com/s/I9vJp8fp7RcCls0tz8Dvlg)
- [分析实战读书笔记3_IDA小知识](https://mp.weixin.qq.com/s/Cktu1sK0PILbO0-QJb9Y6A)
- [ida字符串存储的小端序陷阱](https://blog.csdn.net/amber_o0k/article/details/120659054)
- [恶意样本分析精要及实践8-IDA使用（一）](https://mp.weixin.qq.com/s/qaHEUW1uybkHhTAdzC96Hw)
**相关资源 & 教程**
- [VulnTotal-Team/IDA-Pro-tips](https://github.com/VulnTotal-Team/IDA-Pro-tips) - IDA Pro 每周小技巧
**相关扩展**
- [lcq2/riscv-ida](https://github.com/lcq2/riscv-ida) - risc-v 插件
    ```
    Just copy riscv.py into procs folder of IDA. Start ida.exe and not ida64.exe, 64bit support is still missing
    ```
- [hackflame/ida_python_extractCode](https://github.com/hackflame/ida_python_extractCode) - ida 提取特征码脚本
    ```
    1. 把 tq.py 放到 ida/python 目录下
    2. 在 ida/python 中找到 init.py ，打开此初始化脚本，然后拖到最下边
        找到
        from idc import *
        from idautils import *
        import idaapi
        #在下面加一行
        import tq
    3. 打开 ida 测试。快捷键为 ALT+Z
    ```
- [SentineLabs/AlphaGolang](https://github.com/SentineLabs/AlphaGolang) - go 逆向插件
    ```
    Requirements: IDA Pro (ideally v7.6+) and Python3 (ew) The first two steps (recreate_pclntab and function_discovery_and_renaming) will work on IDA v7.5- but scripts beyond that require IDAv7.6+. Newer versions are the ideal target for newer scripts going forward.
    ```
- [t3ls/mipsAudit](https://github.com/t3ls/mipsAudit) - IDA MIPS 静态扫描脚本，汇编审计辅助脚本
    ```
    将 mipsAudit.py 拷贝到 \IDA 7.5\plugins 目录
    启动后在 Edit - Plugins 下点击 mipsAudit 即可（快捷键 Ctrl+Alt+M）
    ```
- [CheckPointSW/Karta](https://github.com/CheckPointSW/Karta) - 识别并匹配给定代码中的开源代码库
    ```
    git clone https://github.com/CheckPointSW/Karta.git
    cd Karta
    setup.py install
    ```
- [aliyunav/Finger](https://github.com/aliyunav/Finger) - A tool for recognizing function symbol
    ```
    Now, Finger support python 2.7 and python 3, and requires IDA version >= 7.0.
    pip install finger_sdk
    Copy plugin/finger_plugin.py to your IDA_PATH/plugins path.
    ```
- [REhints/HexRaysCodeXplorer](https://github.com/REhints/HexRaysCodeXplorer) - Hex-Rays Decompiler plugin for better code navigation
- [gaasedelen/patching](https://github.com/gaasedelen/patching) - An Interactive Binary Patching Plugin for IDA Pro
---
**简介**
IDA 是最有影响力且流行的商业反编译调试工具；常被用于逆向工程，恶意病毒分析以及脆弱性研究。IDA 可以运行在不同平台（macOS、Linux 和 windows）支持分析不同的文件类型（PE/ELF/Macho-O）。
除商业版本之外，IDA 还提供 2 个其他版本：IDA demo 版本（评估版本）和 IDA 免费版本；两个版本都有一定的限制，都可以反编译 32 和 64 位 windows 程序，但是免费版无法调试二进制，demo 版本无法调试 64 位二进制，demo 版本也无法保存数据库，并且 demo 版本和免费版都无法支持 IDApython。
**目录结构**
IDA 主程序有2个: ida.exe 和 ida64.exe
- ida.exe 用于分析 32 位应用程序
- ida64.exe 用于分析 64 位应用程序
如果无法判断目标程序是 32 位还是 64 位的，可以直接打开, 会有相应提示。
ida64 可以反汇编 32 位应用程序，但是无法生成 32 位应用程序的伪代码。
**在 IDA 中加载二进制**
IDA 会像 windows 一样加载文件到内存中。IDA 可以通过判断文件头确定最可能适合的加载器。在选择文件后 IDA 会加载对话框，用于确认合适的加载起和进程类型。文件设置（file option）选项是用于加载未识别的文件，一般使用该选项处理 shellcode。默认情况下 IDA 不会在反编译中加载 PE 头和源部分。通过使用手动加载 checkbox 选项，可以手动选择加载基址和加载位置，IDA 将会在加载的每个部分包括 PE 头给予相应的提示。点击 OK，IDA 将文件加载到内存，并且开始反编译相关代码。
## 界面组成
### 反汇编窗口
当二进制文件被加载，IDA 展示的窗口就是反汇编编辑窗口（也叫做IDA-view窗口），这是个主要窗口，用于分析和展示反汇编代码，并且可以用于分析反汇编二进制。
![](../../../assets/img/Security/安全工具/IDA/1.png)
**函数窗口 function widnow**
左侧的窗口是函数列表，包含了该程序中的所有函数，这里的函数名几乎都是以 `sub_XXXX`  开头，这是因为源程序编译之后，函数的符号名属于无用数据，被删除掉了，函数代码所在的内存地址就成为了唯一标识一个函数的数据。对于无符号名的函数，IDA 采用 sub_ + 函数所在的内存地址对函数进行命名。这个窗口可以拉大一些,后面还有开始地址，结束地址，长度、类型等。
该窗口同时也显示每个函数可以被找到的虚拟地址，每个函数的大小，以及其他函数相关信息。双击可以定位跳转到对应函数的位置。每个函数与大量的标志相关联（例如 R、F、L 等等标志）。通过 F1 按钮可以获取更多关于相关标志的帮助信息。一个有用的标志 L 标志，代表函数的库函数。库函数是编译器产生而非恶意软件作者编写的函数；
![](../../../assets/img/Security/安全工具/IDA/9.png)
**代码窗口**
右侧是代码窗口，目前正在显示的是汇编代码。
![](../../../assets/img/Security/安全工具/IDA/2.png)
代码窗口中，左边 .radata 代表内存地址，aHiCtferxxxx 是 IDA 为该地址对应数据生成的一个标识符 (别名)，行末是该内存对应的数据
这里的标识符是 IDA 为方便阅读，按照一定规则自动生成的，实际程序运行时，直接使用实际内存地址引用数据，但内存地址不便于记忆，所以 IDA 按可读性进行了生成。
IDA 可以使用两个模式展示反编译的代码：Graph view（graph diassembly view）和 Text view（实际应该叫 text diassembly view）, 默认进入的是 graph view，这里可以使用空格快捷键进行切换。
**输出窗口 out window**
底侧是输出信息日志的窗口，输出窗口展示的是 IDA 以及 IDA 插件输出的相关信息。这些对于分析恶意样本以及样本对系统操作分析提供很多信息。可以通过查看输出在 output 窗口的内容可以获取 IDA 执行加载过程中的相关信息。
![](../../../assets/img/Security/安全工具/IDA/15.png)
**十六进制窗口 Hex view window**
通过点击 HexView-1 标签可以展示 Hex 窗口。Hex 窗口可以展示一系列的十六进制转储内容以及 ASCII 字符。默认情况下，十六进制窗口（hex window）。默认情况下十六进制窗口同步反编译窗口（disassembly window）内容；也就是在反汇编窗口中选择了一部分字节的数据，相应的在十六进制窗口中同样的会进行标记高亮相关的内容，这对于标记内存地址很有帮助。
![](../../../assets/img/Security/安全工具/IDA/16.png)
**结构窗口 structures window**
点击 structures windows 标签，可以进入借口窗口。结构窗口展示程序使用的标准的数据结构，并且允许创建自建的数据结构。
![](../../../assets/img/Security/安全工具/IDA/17.png)
**引用窗口 imports window**
引用窗口是所有二进制程序引用的函数的列表。展示了引用的函数以及相关函数引用的库函数内容。
![](../../../assets/img/Security/安全工具/IDA/18.png)
**出口窗口 exports window**
出口窗口展示的是程序出口函数的列，出口函数通常在 DLL 动态链接库中，因此对于分析恶意样本 DLL 时有用。
![](../../../assets/img/Security/安全工具/IDA/19.png)
**名字窗口 (Shift+F4)**
![](../../../assets/img/Security/安全工具/IDA/10.png)