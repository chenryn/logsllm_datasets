The tables must be re-created.
FDW
For additional details:
https://www.postgresql.org/docs/current/static/postgres-fdw.html
Oracle Database Links vs. PostgreSQL DBLink
Description Oracle PostgreSQL DBlink
Create a permanent CREATE DATABASE LINK Not Supported.
“named” database remote
link CONNECT TO username You have to manually open the
IDENTIFIED BY password connection to the remote database in
USING 'remote'; your sessions / queries:
SELECT
dblink_connect('myconn',
'dbname=postgres
port=5432
host=hostname
user=username
password=password');
Query using a SELECT * FROM SELECT * FROM
database link employees@remote; dblink('myconn','SELECT *
FROM employees') AS p(id
int,fullname text,
address text);
DML using INSERT INTO SELECT * FROM
database link employees@remote dblink('myconn',$$INSERT
(employee_id, into employees VALUES
last_name, email, (45,'Dan','South side
hire_date, job_id) 7432, NY')$$) AS t(id
VALUES (999, 'Claus', int, name text, address
'PI:EMAIL', text);
SYSDATE, 'SH_CLERK');
Heterogeneous Supported. create extension
database link not supported by
oracle_fdw
connections, such Amazon RDS.
as Oracle to
211
Description Oracle PostgreSQL DBlink
PostgreSQL or vice-
versa
Run DDL via a Not supported directly, but you can SELECT * FROM
database link run a procedure or create a job on dblink('myconn',$$CREATE
the remote database and executes table my_remote_tbl
the desired DDL commands. (a int, b text)$$) AS t(a
text);
PI:EMAIL(
l_job, 'execute immediate
''create table t ( x int
)''' );
commit;
Delete a database drop database link Not supported.
link remote; Close the DBLink connection instead.
SELECT
dblink_disconnect('myconn
');
PostgreSQL DBLink vs. FDW
Description PostgreSQL DBlink PostgreSQL FDW
Create a permanent Not supported After creating:
reference to a
remote table using - DFW Server definition.
a database link - User Mapping.
- Run:
CREATE FOREIGN TABLE
foreign_emp_tbl (id int,
name text, address text
)
SERVER foreign_server
OPTIONS (schema_name
'hr', table_name
'employees');
Query remote data SELECT * FROM SELECT * FROM
dblink('myconn','SELECT * foreign_emp_tbl;
FROM employees') AS p(id
int,fullname text,
address text);
DML on remote data SELECT * FROM INSERT into
dblink('myconn',$$INSERT foreign_emp_tb VALUES
into employees VALUES (45,'Dan','South side
(45,'Dan','South side 7432, NY');
7432, NY')$$) AS t(id
int, name text, address (Regular DML)
text);
Run DDL on remote SELECT * FROM Not Supported
objects dblink('myconn',$$CREATE
table my_remote_tbl
212
(a int, b text)$$) AS t(a
text);
213
Migrating from: Oracle Inline Views
[Back to TOC]
Overview
Inline views refer to a statement located in the clause of secondary (or more)
SELECT FROM SELECT
statement. Inline views can help make complex queries simpler by removing compound calculations or
eliminating join operations while condensing several separate queries into a single simplified query.
Example
Inline View in the Oracle database:
SELECT A.LAST_NAME, A.SALARY, A.DEPARTMENT_ID, B.SAL_AVG
FROM EMPLOYEES A,
(SELECT DEPARTMENT_ID, ROUND(AVG(SALARY)) AS SAL_AVG
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID)
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;
The SQL statement marked in red represents the inline view code. In our example above, the query will return
each employee matched to their salary and department id. In addition, the query will return the average
salary for each department, using the inline view column - .
SAL_AVG
Migration to: PostgreSQL Inline Views
Overview
PostgreSQL semantics may refer to inline views as “Subselect” or as “Subquery”. In either case, the
functionality is the same. Running the Oracle inline view example above, as is, will result in an error: “ERROR:
subquery in FROM must have an alias”. This is because Oracle supports omitting aliases for the inner statement
while in PostgreSQL the use of aliases is mandatory. “B” will be used as an alias in the example provided
below.
Mandatory aliases are the only major difference when migrating Oracle inline views to PostgreSQL.
Example
SELECT A.LAST_NAME, A.SALARY, A.DEPARTMENT_ID, B.SAL_AVG
FROM EMPLOYEES A,
(SELECT DEPARTMENT_ID, ROUND(AVG(SALARY)) AS SAL_AVG
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID) B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID;
214
Migrating from: Oracle Database Hints
[Back to TOC]
Overview
Oracle provides users with the ability to influence how the query optimizer behaves and the decisions made to
generate query execution plans. Controlling the behavior of a database optimizer is done via the use of special
“Database Hints”. These can be defined as a directive operation to the optimizer and as such, alter the
decisions on how execution plans are generated.
The Oracle Database supports over 60 different database hints and each database hint can receive 0 or more
arguments. Database hints are divided into different categories such as optimizer hints, join order hints,
parallel execution hints, etc.
Note: Database hints are embedded directly into the SQL queries immediately following the keyword
SELECT
using the following format:
/*  */
Example
1. Force the Query Optimizer to use a specific index for data access using a database hint embedded into the
query:
SQL> SELECT /* INDEX(EMP, IDX_EMP_HIRE_DATE)*/ * FROM EMPLOYEES EMP
WHERE HIRE_DATE >= '01-JAN-2010';
Execution Plan
----------------------------------------------------------
Plan hash value: 3035503638
--------------------------------------------------------------------------------------------
| Id | Operation | Name | Rows | Bytes | Cost (%CPU)| Time
|
--------------------------------------------------------------------------------------------
| 0 | SELECT STATEMENT | | 1 | 62 | 2 (0)| 00:00:01
| 1 | TABLE ACCESS BY INDEX ROWID| EMPLOYEES | 1 | 62 | 2 (0)| 00:00:01
|* 2 | INDEX RANGE SCAN | IDX_HIRE_DATE | 1 | | 1 (0)| 00:00:01
--------------------------------------------------------------------------------------------
Predicate Information (identified by operation id):
---------------------------------------------------
2 - access("HIRE_DATE">=TO_DATE(' 2010-01-01 00:00:00', 'syyyy-mm-dd hh24:mi:ss'))
For additional details:
http://docs.oracle.com/cd/E25178_01/server.1111/e16638/hintsref.htm#CHDIDIDI
https://docs.oracle.com/database/121/TGSQL/tgsql_influence.htm#TGSQL246
215
Migration to: PostgreSQL DB Query Planning
[Back to TOC]
Overview
PostgreSQL does not support “database hints” to influence the behavior of the query planner and we cannot
influence how execution plans are generated from within SQL queries. Although database hints are not
directly supported, session parameters (also known as “Query Planning Parameters”) can influence the
behavior of the query optimizer at a session level.
Example
1. Set the query planner to use indexes instead of full table scans (disable ):
SEQSCAN
psql=> SET ENABLE_SEQSCAN=FALSE;
2. Sets the query planner’s estimated “cost” of a disk page fetch that is part of a series of sequential fetches
( ) and set the planner's estimate of the cost of a non-sequentially-fetched disk page
SEQ_PAGE_COST
( ). Reducing the value of relative to
RANDOM_PAGE_COST RANDOM_PAGE_COST SEQ_PAGE_COST
will cause the query planner to prefer index scans, while raising the value will make index scans more
“expensive”.
psql=> SET SEQ_PAGE_COST to 4;
psql=> SET RANDOM PAGE COST to 1;
3. Enables or disables the query planner's use of nested-loops when performing joins. While it is impossible
to completely disable the usage of nested-loop joins, setting the to an value
ENABLE_NESTLOOP OFF
discourages the query planner from choosing nested-loop joins compared to alternative join methods.
psql=> SET ENABLE_NESTLOOP to FALSE;
For additional details:
https://www.postgresql.org/docs/9.6/static/runtime-config-query.html
216
Migrating from: Oracle Recovery Manager (RMAN)
[Back to TOC]
Overview
RMAN, or Oracle Recovery Manager, is Oracle’s primary backup and recovery tool. RMAN provides its own
scripting syntax, which can be used to take full or incremental backups of your Oracle database.
1. Full RMAN backup – you can take a full backup of an entire database or individual Oracle data files. For
example, a level 0 full backup.
2. Differential incremental RMAN backup – performs a backup of all database blocks that have changed
from the previous level 0 or 1 backup.
3. Cumulative incremental RMAN backup – perform a backup all of the blocks that have changed from the
previous level 0 backup.
Notes
• RMAN supports online backups of your Oracle database if your database has been configured to run in
Archived Log Mode.
• RMAN is used to take backups of the following files:
Database data files.
o
Database control file.
o
Database parameter file.
o
Database Archived Redo Logs.
o
Examples
1. Connect using the RMAN CLI to the Oracle database you wish to back-up:
export ORACLE_SID=ORCL
rman target=/
2. Perform a full backup of the database and the database archived redo logs:
BACKUP DATABASE PLUS ARCHIVELOG;
3. Perform an incremental level 0 or level 1 backup of the database:
BACKUP INCREMENTAL LEVEL 0 DATABASE;
BACKUP INCREMENTAL LEVEL 1 DATABASE;
217
4. Restore the database using RMAN:
RUN {
SHUTDOWN IMMEDIATE;
STARTUP MOUNT;
RESTORE DATABASE;
RECOVER DATABASE;
ALTER DATABASE OPEN;
}
5. Restore a specific pluggable database (Oracle 12c):
RUN {
ALTER PLUGGABLE DATABASE pdbA, pdbB CLOSE;
RESTORE PLUGGABLE DATABASE pdbA, pdbB;
RECOVER PLUGGABLE DATABASE pdbA, pdbB;
ALTER PLUGGABLE DATABASE pdbA, pdbB OPEN;
}
6. Restore a database to a specific point in time:
RUN {
SHUTDOWN IMMEDIATE;
STARTUP MOUNT;
SET UNTIL TIME "TO_DATE('20-SEP-2017 21:30:00','DD-MON-YYYY
HH24:MI:SS')";
RESTORE DATABASE;
RECOVER DATABASE;
ALTER DATABASE OPEN RESETLOGS;
}
7. Report (list) on all current database backups created via RMAN:
LIST BACKUP OF DATABASE;
For additional details:
https://docs.oracle.com/database/121/BRADV/toc.htm
218
Migration to: Amazon Aurora Snapshots
[Back to TOC]
Overview
The primary backup mechanism for Amazon Aurora is using snapshots. Taking a snapshot is an extremely fast
and non-intrusive operation for your database. Both taking snapshots and restoring your database from a
snapshot can be done using the Amazon RDS Management Console or using the AWS CLI. Unlike RMAN, there
is no need for incremental backups. You can choose to restore your database to the exact time when a
snapshot was taken, or to any other point in time.
• Automated backups. Always enabled on Amazon Aurora. Backups do not impact database performance.
• Manual backups. You can create a snapshot at any given time. There is no performance impact when
taking snapshots of your Aurora database. Restoring data from snapshots requires you to create a new
instance. Up to 100 manual snapshots are supported per database.
Example:
Enable Aurora automatic backups and configure the backup retention window as part of the database creation
process. Doing this is equivalent to setting the Oracle RMAN backup retention policy (using the “
configure
command).
retention policy to recovery window of X days”
1. Go to the Amazon RDS page in your AWS Management Console:
2. Click Instances
219
3. Select Launch DB Instance.
220
4. Select the Aurora PostgreSQL-compatible database engine.
5. Configure your database settings and parameters.
6. On the next page, you can configure a backup retention policy for your Aurora database,
defined as the number of days for Amazon RDS to automatically to retain your snapshots:
221
Region Default Backup Window
US West (Oregon) Region 06:00–14:00 UTC
US West (N. California) Region 06:00–14:00 UTC
US East (Ohio) Region 03:00–11:00 UTC
US East (N. Virginia) Region 03:00–11:00 UTC
Asia Pacific (Mumbai) Region 16:30–00:30 UTC
Asia Pacific (Seoul) Region 13:00–21:00 UTC
Asia Pacific (Singapore) Region 14:00–22:00 UTC
Asia Pacific (Sydney) Region 12:00–20:00 UTC
Asia Pacific (Tokyo) Region 13:00–21:00 UTC
Canada (Central) Region 06:29–14:29 UTC
EU (Frankfurt) Region 20:00–04:00 UTC
EU (Ireland) Region 22:00–06:00 UTC
EU (London) Region 06:00–14:00 UTC
South America (São Paulo) Region 23:00–07:00 UTC
AWS GovCloud (US) 03:00–11:00 UTC
Example:
Perform a manual snapshot backup of your Aurora database, equivalent to creating a full Oracle RMAN
backup (“ ”).
BACKUP DATABASE PLUS ARCHIVELOG
1. Go to the Amazon RDS page in your AWS Management Console:
2. Click Instances.
222
3. Select your Aurora PostgreSQL instance, click Instance actions and select Take snaphot:
Example
Restore an Aurora database from a snapshot. Similar to Oracle RMAN “ ” and
RESTORE DATABASE
“ ” commands. However, note that instead of running in-place, restoring an
RECOVER DATABASE
Amazon Aurora database will create a new cluster.
1. Navigate to the Amazon RDS page in your AWS Management Console:
2. Click on the Snapshots link on the left-hand menu to see the list of snapshots you have available
across your database instances.
223
3. Select Snapshots.
4. Select the snapshot to restore.
5. Click Snapshot Actions on the context menu and select Restore snapshot.
Note: This creates a new instance.
6. You will be presented with a wizard for creating your new Aurora database instance from the
selected snapshot. Fill the required configuration options and click Restore DB Instance.
224
Example
Restore an Aurora PostgreSQL database backup to a specific previous point in time, similar to running
an Oracle RMAN “ command, before running RMAN
SET UNTIL TIME "TO_DATE('XXX')"
and
RESTORE DATABASE RECOVER DATABASE.
1. Navigate to the Amazon RDS page in your AWS Management Console.
225
2. Click Instances.
3. Select your Aurora instance and click Instance Actions.
4. Select Restore to Point in Time on the context menu.
5. This process will launch a new instance. Select the date and time to which you want to restore your
database. The selected date and time must be within the configured backup retention for this
instance.
226
Example
Modify your Aurora backup retention policy after a database was already created. You need to
configure how long your Aurora database backups should be stored. When restoring an Aurora
database to a previous point in time, the selected time must be within the configured backup retention
window.
1. Navigate to the Amazon RDS page in your AWS Management Console.
2. Click Instances.
227
3. Select your Aurora instance, click Instance Actions.
4. Select Modify from the menu.
5. Configure the desired backup retention policy (maximum retention allowed is up to 35 days).
228
Using the AWS CLI for Amazon Aurora backup and restore operations
In addition to using the AWS web console user-interface to backup and restore your Aurora instance to
a previous point in time or using a specific snapshot, you can also use the AWS CLI to perform the same
actions. This is especially useful in case you need to convert your existing automated Oracle RMAN
scripts to an Amazon Aurora environment.
Examples
1. Use to view all current Aurora PostgreSQL snapshots.
describe-db-cluster-snapshots
2. Use to create a snapshot (“Restore Point”).
create-db-cluster-snapshot
3. Use to restore a new cluster from an existing database
restore-db-cluster-from-snapshot
snapshot.
4. Use to add new instances to the restored cluster.
create-db-instance
aws rds describe-db-cluster-snapshots
aws rds create-db-cluster-snapshot --db-cluster-snapshot-iden
tifier Snapshot_name --db-cluster-identifier Cluster_Name
aws rds restore-db-cluster-from-snapshot --db-cluster-identifier
NewCluster --snapshot-identifier SnapshotToRestore --engine aurora-
postgresql
aws rds create-db-instance --region us-east-1 --db-subnet-group default -
-engine aurora-postgresql --db-cluster-identifier NewCluster --db-
instance-identifier newinstance-nodeA --db-instance-class db.r4.large
5. Use to perform point-in-time recovery.
restore-db-instance-to-point-in-time
aws rds restore-db-cluster-to-point-in-time --db-cluster-identifier
clustername-restore clustername
--source-db-cluster-identifier --restore-
to-time 2017-09-19T23:45:00.000Z
aws rds create-db-instance --region us-east-1 --db-subnet-group default -
-engine aurora-postgresql --db-cluster-identifier clustername-restore --
db-instance-identifier newinstance-nodeA --db-instance-class db.r4.large
229
Oracle RMAN vs. Aurora snapshot backups
Description Oracle Amazon Aurora
Scheduled backups Create job that Automatic
DBMS_SCHEDULER
will execute your RMAN script on a
scheduled basis.
Manual full database BACKUP DATABASE PLUS Use Amazon RDS dashboard or the AWS CLI
backups ARCHIVELOG; command to take a snapshot on the cluster:
aws rds create-db-cluster-
snapshot --db-cluster-snapshot-
identifier Snapshot_name --db-
cluster-identifier Cluster_Name
Restore database RUN { Create new cluster from a cluster snapshot:
SHUTDOWN IMMEDIATE;
STARTUP MOUNT; aws rds restore-db-cluster-
RESTORE DATABASE; from-snapshot --db-cluster-
RECOVER DATABASE; identifier NewCluster --
ALTER DATABASE OPEN; snapshot-identifier
} SnapshotToRestore --engine
aurora-postgresql
Add a new instance to the new/restored
cluster:
aws rds create-db-instance --
region us-east-1 --db-subnet-
group default --engine aurora-
postgresql --db-cluster-