ing the Setup procedure.
This procedure (see Alg. 2) takes as input the z documents
in D to compute a single string s obtained concatenating the
documents, interleaved with $ (lines 2–3). The additional
input λ is an integer number representing the computational
security level employed to instantiate the underlying cryp-
tographic primitives. Subsequently, the procedure computes
the (|Σ|+1)×(n+1) matrix representation of L=BWT(s), de-
noted as M in Algorithm 1, the corresponding 1 × (n + 1)
suffix array, SA, and the Rank dictionary with size |Σ|+1, con-
taining pairs (c, l), where l=Rank(c), 0≤l≤n+1 is the num-
ber of characters in s alphabetically smaller than c. As the
rows of M are indexed by characters in Σ ∪ {$}, a bijective
function Order : Σ ∪ {$} (cid:55)→ {0, 1, . . . , |Σ|}, is employed to
build a dictionary including pairs (c, o), where c∈Σ∪{$} and
o=Order(c) is the unique numerical index corresponding to
the character indexing a row of M. At lines 4–6, the integer
matrix M is converted into a (|Σ|+1)·(n+1) array of integers,
C, built as the concatenation of the rows of M in ascending
order of the numerical index obtained via the Order func-
tion. We note that Rank(c) is summed to M[c][j] at line 6 of
Algorithm 2 to save the additions that should be executed
later as per lines 5–6 of Algorithm 1.
As the data structures C and SA are sufficient to recon-
struct s, and thus the document collection D, they are cell-
wise encrypted, obtaining arrays ⟨C⟩ and ⟨SA⟩, before being
outsourced. To this end, any secure cipher E can be em-
ployed; we choose a symmetric block cipher for efficiency
reasons. The algorithms referring to the mentioned cipher
are denoted as (E.KeyGen, E.Enc, E.Dec), where the KeyGen
procedure yields a pair of public and private keys, i.e.: pkE,
skE (line 7), where pkE = skE if E is a symmetric-key cipher.
Since an adversary with partial knowledge of the content
of the document collection will infer the content of some of
the cells in SA or C, the cell-wise encrypted arrays ⟨SA⟩ and
⟨C⟩ are randomly shuffled at lines 8–11 by employing two
keyed Pseudo Random Permutations (PRPs) [2], denoted as
πSA, πM, respectively, which are defined as follows:
πSA : {0, 1}λ × {1, . . . , n+1} (cid:55)→ {1, . . . , n+1}
with πSA(k, i)=j, 1≤i, j≤n+1; while,
πC : {0, 1}λ×{1, . . . ,(|Σ|+1)·(n+1)}(cid:55)→{1, . . . ,(|Σ|+1)·(n+1)}
with πC(k, i)=j, 1≤i, j≤(|Σ|+1)·(n+1). The same key K gen-
erated at line 7 is employed for both the PRPs. At line 12,
the secret information kept by the client auxs is computed
as the dictionary Order, the secret key of cipher E and key
K employed in the PRPs. Finally, the Setup procedure in
Algorithm 2 returns the secret data to be kept by the client,
auxs =(Order, skE, K), and the privacy-preserving represen-
tation [[D]] of the indexing structure of the document collec-
tion to be outsourced, as the pair of encrypted data structures
(⟨C⟩, ⟨SA⟩).
The Query procedure takes as input the m-character string
to be searched q, the secret parameters of the client auxs =
(Order, skE, K), and the privacy-preserving representation
[[D]] = (⟨C⟩, ⟨SA⟩).
The operations performed during the execution of the
Query procedure are grouped in two phases. The first phase,
labeled as Qnum (lines 2–11), corresponds to lines 1–6 in
Algorithm 1, and allows to evaluate as β −α the total number
of occurrences of q in the remotely stored documents. In
particular, all memory look-ups performed on the matrix
representation M of the BWT of the document collection
in Algorithm 1 are realized accessing the cells of the array
⟨C⟩. As the cells of ⟨C⟩ are shuffled w.r.t. the cells over C,
the client needs to compute the position of an entry C[α]
(C[β] resp.) in ⟨C⟩, by employing the keyed PRP as shown in
line 5 (line 9 resp.). Realizing each access via the primitives of
Algorithm 2: Setup Procedure of our PPSS Protocol
Function Setup(D,λ):
security parameter λ
Input: Document Collection D = {D1, . . . , Dz},
Output: [[D]], privacy-preserving representations of
the indexing structure of D;
auxs, secret auxiliary information employed
by the client to perform search requests
begin
n ←z
s ← concat(D1, $, D2, $, . . . , Dz, $)
i =1 len(Di) + 1
1
2
3
4
5
6
7
8
9
10
11
12
13
14
/* Compute the suffix array SA, the
*/
/* Compute the dictionary
matrix M and the Rank dictionary for
string s (see Section 3.1)
Order : Σ ∪ {$} (cid:55)→ {0, 1, . . . , |Σ|},
containing pairs (c, o) where c∈Σ∪{$},
and o=Order(c) is a unique numerical
index.
foreach c ∈ Σ ∪ {$} do
for j ← 1 to n + 1 do
C[Order(c)·(n+1)+j] ← Rank(c)+M[c][j])
*/
R← {0, 1}λ, (pkE, skE) ← E.KeyGen(λ)
K
for i ← 1 to n + 1 do
⟨SA⟩[πSA(K, i)] ← E.Enc(pkE, SA[i])
for i ← 1 to (n + 1) · (|Σ| + 1) do
⟨C⟩[πC(K, i)] ← E.Enc(pkE, C[i])
auxs ← (Order, skE, K)
[[D]] ← (⟨C⟩, ⟨SA⟩)
return (auxs ,[[D]])
any PIR protocol allows to hide the position of the array cell
requested by the client thus, providing search pattern privacy
of the retrieved content. Indeed, without the PIR protocol the
adversary, i.e., the server, would be able to infer the similarity
between the strings searched in two separate queries due to
deterministic access to the same positions of the array ⟨C⟩. In
our proposal, the Lipmaa PIR protocol described in in Section
3.2 is adopted due to its efficiency in terms of communication
complexity. Finally, as each cell ⟨C⟩[h] stores an encrypted
content, the client needs to further decrypt the material
returned by the PIR-retrieve procedure, as shown in line 7
(line 11 resp.).
The second phase, labeled as Qocc (lines 12–16), corre-
sponds to lines 7–9 in Algorithm 1, and allows to compute
the set of positions, in the remotely stored documents, where
the leading characters of the occurrences of q are found. Sim-
ilarly to the previous phase, each memory look-up to the
suffix array data structure in Algorithm 1 is realized by ac-
cessing privately the cells of the array ⟨SA⟩.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Algorithm 3: Query Procedure of our PPSS Protocol
Function Query(q, auxs , [[D]]):
Input: q, m-character string to be search;
auxs, secret auxiliary information employed by
the client to perform search requests containing
(Order, skE, K);
[[D]], remotely accessed privacy-preserving
representations of the indexing structure of D,
containing (⟨C⟩, ⟨SA⟩).
Output: Rq, set of positions of occurrences of q in D
Data: (pk, sk), public and private Paillier FLAHE
keypair;
b, radix employed to represent in positional
notation an integer index in the Lipmaa PIR
protocol
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
begin
α←0, β←n+1 // start of the 1st phase: Qnum
for i ← m downto 1 do
α ← α + Order[q[i]] · (n + 1)
⟨h⟩ ← PIR−Trapdoor(pk, b, πC(K, α))
ctx ← PIR−Search(⟨h⟩, b, ⟨C⟩)
// ciphertext of ⟨C⟩[πC(K, α)]
α ← E.Dec(skE, PIR−Retrieve(sk, ctx))
β ← β + Order[q[i]] · (n + 1)
⟨h⟩ ← PIR−Trapdoor(pk, b, πC(K, β))
ctx ← PIR−Search(⟨h⟩, b, ⟨C⟩)
// ciphertext of ⟨C⟩[πC(K, β)]
β ← E.Dec(skE, PIR−Retrieve(sk, ctx))
Rq ← ∅ // start of the 2nd phase: Qocc
for i ← α + 1 to β do
⟨h⟩ ← PIR−Trapdoor(pk, b, πSA(K, i))
ctx ← PIR−Search(⟨h⟩, ⟨SA⟩)
// ciphertext of ⟨SA⟩[πSA(K, i)]
Rq←Rq∪E.Dec(skE, PIR−Retrieve(sk, ctx))
return Rq
Informally, the security of our protocol is based on the
security of the PIR protocol employed and on the semantic
security of the encryption scheme used to encrypted the
array ⟨C⟩ and the suffix array ⟨SA⟩, as the server observes
only PIR queries on arrays encrypted with a semantically
secure encryption scheme. The only information leaked to
the server is the size of the array ⟨C⟩ and of the suffix array
⟨SA⟩, which are both proportional to the size of the docu-
ment collection, while the length m of the substring q and the
number of occurrences |Rq| are leaked by the number of iter-
ations required by the execution of the phases in Algorithm 3
labeled as Qnum and Qocc, respectively.
Concerning the computational and communication com-
plexities of the Setup and Query procedures, we note that
the former costs O(n) bit operations, while storing [[D]]
on the server requires O(n) storage space. The cost of the
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
b
latter procedure is split between the client and the server
obtaining, respectively, O((m + |Rq|)·b log3(N) log4
b(n)) cost,
where N is the modulus employed in the FLAHE Paillier
keypair, and O((m + |Rq|) · n
log3(N)) cost. The amount of
data exchanged between the client and the server amounts
to O((m + |Rq|) · log(N)b log2
b(n)).
Multi-user Extension. Differently from many of the cur-
rent PPSS protocols, our approach can be promptly and effi-
ciently adapted to a multi-user scenario where a data-owner
outsources the indexing data structure to a service provider,
and multiple users equipped with their own Pailler FLAHE
key-pair access the data structure running the PIR primitives
simultaneously.
In such a setting, each user is guaranteed to perform its
own substring search without leaking any information to
both other users and the service provider itself. Indeed, the
search and access pattern privacy of the queries of a user are
guaranteed even in case of collusion between other users
and the service provider.
From an operational point of view the data owner runs
the Setup procedure shown in Algorithm 2, computing the
pair of arrays [[D]]=(⟨C⟩, ⟨SA⟩) to be outsourced and shares
the secret auxiliary information auxs ← (Order, skE, K)
with the authorized users. Each authorized user in turn can
independently run a modified version of the Query proce-
dure shown in Algorithm 3 to find occurrences of a sub-
string of her/his choice. The modifications to the Query
procedure consists in replacing the use of the original Lip-
maa PIR−Search primitive with the one reported in Al-
gorithm 4, which aims to reduce the memory consump-
tion of the Lipmaa PIR−Search procedure when multiple
queries are simultaneously performed. Indeed, each run of
the PIR−Search procedure in Lipmaa’s protocol (Section 3.3)
b(n)⌉ iterations, with the i-th iteration comput-
runs t = ⌈log
ing an array Ahi−1 with ⌈ n
bi ⌉ elements. In particular, the first
iteration computes an array Ah0 with ⌈ n
b ⌉ entries, in turn re-
quiring O(n) memory to be allocated. Therefore, if u queries
are performed simultaneously, the memory consumption of
Lipmaa’s protocol is O(n + u · n), providing poor scalability
in case of multiple queries. To address this scalability issue,
we propose to schedule differently the operations performed
in the PIR protocol. Specifically, the PIR−Search procedure
serializes the computation of the entire arrays Ah0, . . . , Aht−1.
Nonetheless, it is possible to compute the element Ah1[0] as
soon as the b elements Ah0[0], . . . , Ah0[b−1] are computed,
and, similarly, compute Ah1[1] as soon as the b elements
Ah0[b], . . . , Ah0[2b−1] are computed. Considering a generic
Ahi[j], 0≤i≤t−1, 0≤j≤⌈ n
bi +1⌉ element, we can compute it
as soon as the b elements Ahi−1[b·j], . . . , Ahi−1[b·j+b−1] are
available. This schedule of the operations is achieved by the
recursive computation in Algorithm 4.
Algorithm 4: Optimized PIR-Search algorithm
Function PIR−Search(⟨h⟩, b, A):
Input: ⟨h⟩, obfuscated value of the position h,
represented as the concatenation of the bit-wise
encryptions of each b-bit string in the sequence
hdigit0, . . . , hdigitt−1, with t =(cid:6)logb(n)(cid:7)
(see Section 3.3);
b ≥ 2, radix chosen by the client to construct
⟨h⟩;
A, remote array with n entries.
Output: content of the cell A[h]
return RecursiveRet (⟨h⟩, A, ⌈t⌉, 1, n, b)
Function RecursiveRet(⟨h⟩, A, l, begin, end, b):
if end − begin = 0 then
size ←(cid:106) end−begin
return A[begin]
(cid:107), acc ← 1
b
for i ← 1 to b do
el ←
RecursiveRet(⟨h⟩, A, l − 1, begin, begin + size)
begin ← begin + size + 1
acc ← (acc · ⟨h⟩[(l · b + i]el) mod N l +1
return acc