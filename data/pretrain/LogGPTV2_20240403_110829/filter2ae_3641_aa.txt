# 前言
作为云原生管理与编排系统的代表，Kubernetes（简称K8S）正受到越来越多的关注，有报告[1]显示，96% 的组织正在使用或评估
K8S，其在生产环境下的市场占有率可见一斑。
K8S 的功能十分强大，其系统复杂性也同样较高，一般而言，程序越复杂则越容易存在安全问题，自然而然地，K8S 集群也同样面临着严重的安全威胁，如 K8S
组件的未授权访问、容器逃逸和横向攻击等。我们说攻和防是相互促进、相伴而生的，作为相关安全人员首先应该从整体上把握业务架构可能面临的安全威胁才有可能做好防护。本文就以攻击者的视角来聊一聊在
K8S 集群架构下可能存在哪些可攻击的点。
根据以往的渗透测试经验，我们梳理了 K8S 集群架构下可能存在的安全问题，并在如图1的 K8S 集群基础架构图中标注了潜在的攻击点：
图1- K8S集群攻击点
本文将从图 1 出发，在介绍图中标注的攻击点的同时，总结一些在对 K8S 集群进行实际渗透测试的过程中常用的攻击方法。
本文共分为上、下两篇，本篇为上篇，主要介绍对 K8S 组件、节点对外服务、业务 pod
的攻击，以及容器逃逸，即对应图1的攻击点1~7。其余内容将在下篇介绍。
# K8S集群攻击点（1~7）
## 1\. 攻击点 1~4：攻击K8S组件
K8S 组件的问题主要是指各组件的不安全配置，攻击点1~4罗列了4个比较有代表性的组件问题，即 API Server 未授权访问、etcd
未授权访问、kubelet 未授权访问、kube-proxy 不安全配置。
除此之外，还有很多组件都存在着类似的安全问题，比如 dashboard、docker 等组件也存在未授权访问的隐患，这些都是 K8S
集群的重要系统组件，一旦被攻击成功，都是可以直接获得相应集群、节点或容器的权限的。
表1搜集了各个组件存在隐患的默认端口，供参考：  
表1- K8S 各组件默认端口
## 2\. 攻击点5：攻击节点对外服务
除了正常的对外业务，可能还会有一些“隐藏”的对外开放服务，这些服务本不该暴露在外网，这种情况或是管理员疏忽所致，亦或是为了方便管理而故意留的一些接口，总之也是一个潜在的攻击点。
比如笔者之前遇到过 Mysql 对外服务存在弱口令登录的问题：目标系统的其中一个节点通过 NodePort 对外映射了 Mysql
服务端口，且经过尝试，通过弱口令可登录。这种情况就属于是管理员的安全意识不足。
说到对 Mysql 的攻击，我们在之前的渗透测试过程中总结了三条 Mysql 的攻击路径可供参考，如图2：
图2- Mysql 攻击路径
  1. 通过 NodePort 等对外暴露的接口直接访问 Mysql，并通过弱口令登录数据库；（对应图2中步骤1）
  2. 攻击应用程序，获取 pod 的 shell，在 pod 内通过环境变量发现 Mysql 服务的内网地址，然后尝试通过弱口令登录；（对应图2中步骤2-1、2-2）
  3. 攻击应用程序，获取 pod 的 shell，并成功逃逸到节点，利用 docker inspect 查看或直接进入当前节点运行的Mysql 容器，可以看到其环境变量保存着数据库名、root密码和数据库的登录地址等信息（前提是 Mysql 容器要和应用容器部署在同一节点上，另外环境变量中是否会保存数据库密码等敏感信息取决于 Mysql 容器的具体配置）。（对应图2中步骤3-1、3-2、3-3）
## 3\. 攻击点6：攻击业务 pod
在云原生环境下，上层应用程序对攻击者来说就像是集群的一个个入口，攻击应用程序的目标就是突破入口，拿到业务环境也就是业务所在 pod 的 shell。
Web安全发展这么多年，可利用的漏洞非常之多，远的不说，就比如 2021 年年底曝出的 Log4j2-RCE
漏洞（CVE-2021-44228）以及前不久的 Spring-RCE漏洞（CVE-2022-22965），其危害非常之大，且其利用也很简单（比如
Log4j2 漏洞，虽然在高版本和低版本的JDK环境下利用方法不同，但网上都已经分别有非常多的现成EXP可用），一旦成功利用即可以完全接管整个业务pod。
尽管进入 pod
后的权限仍然是受限的，但总算是进入了集群内部，接下来可以通过尝试更多攻击手法，比如横向、逃逸等，逐步扩大战果，直至控制整个集群。在那之前，我们对 pod
本地也可以实施一些攻击，如信息搜集、提权、拒绝服务。
### 3.1 信息搜集
进入一个新 pod 中，首先要做的应该是搜集当前环境的信息。
一是搜集环境信息，为后续攻击做准备。如下是一些比较有价值的信息，可供参考：
  * OS、Kernel、User 基本信息
  * 可用的 Capabilities
  * 可用的 Linu- x 命令
  * 挂载情况
  * 网络情况
  * 云厂商的 metadata API 信息
二是敏感服务发现和敏感信息扫描。敏感服务发现可以通过扫描内网指定网段的端口，除了 K8S 组件的端口外，还有如下的常见服务端口：
  * ssh：22
  * http：80/8080
  * https：443/8443
  * mysql：3306
  * cAdvisor：4194
  * nodeport-service：30000-32767
敏感信息则包括业务相关的敏感文件（比如代码、数据库、业务涉及的 AK/secret 或者重要的配置文件等）、环境变量（可能暴露一些敏感服务信息）、K8S
的ServiceAccount 信息（默认保存在 /run/secrets/kubernetes.io/serviceaccount/
目录下）、进程信息（有无敏感服务）等。
### 3.2 提权
K8S 中有两种提权，一种是 pod 内提权，一种是 K8S 提权。
（一）Pod 内提权