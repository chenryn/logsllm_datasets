of its two 32-byte coordinates, is then used as the ID.
7.1.3 VCEK Derivation. To derive the VCEK, a 48-byte secret value
is used. This secret is modified to incorporate the Trusted Comput-
ing Base (TCB) version string (see Section 3.1.3). The TCB version
string consists of eight different one-byte security version num-
bers (SVNs), four of which are currently reserved (see Table 1). We
use 𝑣0, 𝑣1, . . . , 𝑣7 to denote these SVNs and 𝑠𝑒𝑐_255 to denote the
initial secret. To incorporate 𝑣0 into this secret, we use 255 − 𝑣0
successive SHA384 operations:
𝑠𝑒𝑐_255 SHA384→ 𝑠𝑒𝑐_254 SHA384→ . . . SHA384→ 𝑠𝑒𝑐_(𝑣0 + 1) SHA384→ 𝑠𝑒𝑐_𝑣0
By prefixing 𝑠𝑒𝑐_𝑣0 with eight zero-bytes and applying SHA384
again, the algorithm “locks” the first SVN and prepares it for the
incorporation of the next SVN:
𝑠𝑒𝑐_𝑣0_255 := 𝑆𝐻𝐴384(‘\0\0\0\0\0\0\0\0’ || 𝑠𝑒𝑐_𝑣0)
As suggested by this notation, we now apply 255 − 𝑣1 successive
SHA384 operations to 𝑠𝑒𝑐_𝑣0_255 to generate 𝑠𝑒𝑐_𝑣0_𝑣1 and “lock”
the second SVN using the prefix and SHA384 operation:
𝑠𝑒𝑐_𝑣0_255 SHA384→ 𝑠𝑒𝑐_𝑣0_254 SHA384→ . . . SHA384→ 𝑠𝑒𝑐_𝑣0_𝑣1
𝑠𝑒𝑐_𝑣0_𝑣1_255 := 𝑆𝐻𝐴384(‘\0\0\0\0\0\0\0\0’ || 𝑠𝑒𝑐_𝑣0_𝑣1)
This process is continued with the remaining six SVNs, and we are
left with the secret 𝑠𝑒𝑐_𝑣0_𝑣1_𝑣2_𝑣3_𝑣4_𝑣5_𝑣6_𝑣7, which is hashed
one more time with SHA384 to obtain the final secret
𝑠𝑒𝑐_𝑓 𝑖𝑛𝑎𝑙 = 𝑆𝐻𝐴384(𝑠𝑒𝑐_𝑣0_𝑣1_𝑣2_𝑣3_𝑣4_𝑣5_𝑣6_𝑣7)
( = 𝑠𝑒𝑐_𝑣0_𝑣1_𝑣2_𝑣3_𝑣4_𝑣5_𝑣6_(𝑣7 − 1) ) .
(1)
We then use 𝑠𝑒𝑐_𝑓 𝑖𝑛𝑎𝑙 to generate the VCEK similarly to how
the CEK is derived from its secret. Using the label “sev-versioned-
chip-endorsement-key” and the key 𝑠𝑒𝑐_𝑓 𝑖𝑛𝑎𝑙 as inputs to the same
KDF as described in Section 7.1.1, we again derive 56 pseudorandom
bytes, which are turned into an ECDSA key on the secp384r1 curve
using the same algorithm used in Section 7.1.1.
7.2 VCEK Design
The goal of the VCEK, as described in Section 3.1.3, requires that
from a given secret (e.g. 𝑠𝑒𝑐_(𝑣0 − 1)), we are not able to derive a
secret for a higher SVN (e.g. 𝑠𝑒𝑐_𝑣0). The cryptographic properties
of SHA384 assure this, since SHA384 is practically infeasible to
invert.
The SEV-SNP API allows TCB downgrades (see Section 3.1.3). If,
for example, we want to downgrade 𝑠𝑒𝑐_𝑓 𝑖𝑛𝑎𝑙’s last SVN by one,
we can apply one SHA384 operation to 𝑠𝑒𝑐_𝑓 𝑖𝑛𝑎𝑙 and generate the
ECDSA key from the resulting secret. However, this mechanism
can only be used to downgrade the last SVN. To allow downgrades
of all SVNs, the SEV firmware has access to all of the secrets in (2).
𝑠𝑒𝑐_(𝑣0 − 1)
𝑠𝑒𝑐_𝑣0_(𝑣1 − 1)
𝑠𝑒𝑐_𝑣0_𝑣1_(𝑣2 − 1)
. . .
𝑠𝑒𝑐_𝑣0_𝑣1_𝑣2_𝑣3_𝑣4_𝑣5_𝑣6_(𝑣7 − 1) = 𝑠𝑒𝑐_𝑓 𝑖𝑛𝑎𝑙
(2)
For example, to derive the VCEK for the TCB version string
(𝑣0, 𝑣1 − 2, 𝑣′
2, . . . , 𝑣′
7) ,
we can apply one SHA384 operation to 𝑠𝑒𝑐_𝑣0_(𝑣1 − 1) and then
continue the VCEK derivation algorithm with the SVNs 𝑣′
2, . . . , 𝑣′
7.
A potential issue is that we can choose values for 𝑣′
2, . . . , 𝑣′
7, which
are higher than the original values 𝑣2, . . . , 𝑣7. We can, for example,
derive the secret
𝑠𝑒𝑐_𝑣0_(𝑣1 − 2)_0_0_0_0_255_254 ,
(3)
which would result in a valid VCEK with the SVN 255 for both
the SEV application and µCode patch level. However, this does not
constitute a security vulnerability as the downgraded SVN belongs
to an insecure firmware component with a higher privilege level
than the firmware components with upgraded SVNs. In the exam-
ple above, the SVN 𝑣1 − 2 refers to an insecure PSP OS firmware,
whose security vulnerabilities could potentially be used to leak the
secret (3).
7.3 Implementation on the AMD-SP
Both the ID and the CEK derivation algorithms described above
are implemented by the SEV application. Their shared secret value
is derived by the ROM bootloader, which passes the secret to the
PSP OS in a readable buffer of the CCP. The SEV application can
then access the secret through the syscall interface of the PSP OS.
The SEV application is also responsible for deriving the VCEK,
but the secrets derivation algorithm is split up between ROM boot-
loader, the PSP OS, and the SEV application. The ROM bootloader
derives the initial VCEK secret 𝑠𝑒𝑐_255 from the fuses of the AMD-SP.
The first SVN, i.e., the SVN labeled BOOT_LOADER in Table 1, is part
of the header of the PSP OS binary on the SPI flash. The ROM
bootloader uses this first SVN 𝑣0 to derive the secrets:
and 𝑠𝑒𝑐_(𝑣0 − 1) .
𝑠𝑒𝑐_𝑣0_255
(4)
Once it has verified the PSP OS signature (the header is included
in this signature), both secrets (4) are passed onto the PSP OS.
According to the SEV-SNP API specifications [8], the second
SVN corresponds to the “trusted execution environment.” In the
firmware image we analyzed, the PSP OS binary was responsible
for the boot process and acted as an operating system running
on the AMD-SP. As a result, this second SVN and the next four
“reserved” SVNs are set to zero by the PSP OS. Every time a SEV
application is loaded, its SVN, 𝑣6, and the hardcoded SVNs, 𝑣1 to 𝑣5,
are used to derive all the first seven secrets of (2) and
𝑠𝑒𝑐_𝑣0_ . . . _𝑣6_255 .
These secrets are then passed to the SEV application, which incor-
porates the last SVN – the µCode patch level.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea28857.4 CEK/VCEK Derivation and Fault Attacks
With the glitching attack presented in Section 5, an attacker can
not only execute an arbitrary PSP OS firmware component, but
also, choose an arbitrary SVN for its header. By creating a payload
with the highest possible SVN, 255, the attacker forces the ROM
bootloader to derive the secrets
𝑠𝑒𝑐_255_255
and 𝑠𝑒𝑐_254 .
We extracted these secrets, together with the CEK secret, using
payloads described in Section 5.6. With these secrets and the algo-
rithms described in Section 7.1, we were able to derive the CEKs
and IDs for all our target CPUs, as well as the VCEKs of our AMD
Epyc Zen 3 CPU for all possible TCB component versions.
8 DISCUSSION
In this section we evaluate the feasibility and impact of our attack,
and propose potential mitigations.
8.1 Attack Evaluation
To evaluate the real-world applicability of our attack, we compare
an attacker’s capabilities with the attack requirements. We focus
on attack scenarios relevant in cloud environments, as presented
in Section 4.
For the “Debug Override” attack, the attacker first replaces the
original SEV firmware with a custom firmware and re-signs the
firmware image, see Section 5.6. To mount the glitching attack
described in the previous sections, the attacker then prepares the
target host as described in Section 5. As the Teensy µController is
small enough to fit into a standard server enclosure, the physical
setup introduces no additional requirements regarding the instal-
lation into the datacenter. This initial preparation, including the
determination of the glitching parameters, does not pose a seri-
ous challenge for the attacker. We were able to prepare our target
system for attacking the Epyc 72F3 in under four hours.
The attacker will then boot the target system, and the µController
will perform the actual glitching via the SVI2 packet injection. The
µController will automatically reset the target if the glitch attempt
failed, leading to an increased boot time of the target. Once the
target is fully booted, the attacker can leverage SEV’s debug API to
decrypt a VM’s memory. As described in Section 5, a attack machine
is required to control the µController. While in a cloud scenario, a
neighboring host could be used to control the µController. However,
with minor firmware modifications, the Teensy µController would
be capable of automatically performing the glitching attack on its
own. As the manipulation of the SEV firmware image does not
change a VM’s measurement, the validation of attestation reports
will succeed even though the target host does not execute a genuine
AMD SEV firmware.
For the second scenario, instead of preparing a system to host
the targeted VMs, the attacker prepares and then extracts the en-
dorsement key of an arbitrary SEV capable CPU. The endorsement
key is then used to fake attestation reports. In the case of SEV-SNP,
the faked attestation report allows an attacker to migrate the vic-
tim VM to a host with a malicious MA, see Section 3.1.4. Using
the exported Offline Encryption Key (OEK), the malicious MA can
decrypt the victim’s memory pages. For pre-SEV-SNP targets, the
extracted endorsement key allows to mount the migration attack
as described in [15]. Compared to the first scenario, this approach
relaxes the requirements for the attacker as the glitching attack can
be performed in a controlled environment, and the extracted keys
can then be used to target remote systems.
Either attack scenario poses a threat for SEV-protected VMs, as
they can be carried out by insider attackers such as system admin-
istrators and require only cheap and easily available hardware.
8.2 Implications for the SEV Ecosystem
The two attack scenarios presented in Section 4 allow an attacker
to overcome SEV’s protection guarantees. However, for the first
scenario, the attacker must have physical access to the system
running the targeted VM. While it is possible to migrate the target
VM to a host under the attacker’s control, the requirement to have
physical access to the targeted system still poses a challenge for the
attacker given that modern data centers employ several physical
security measures such as access control and 24h surveillance.
In contrast, the extraction of SEV’s endorsement keys allows an
attacker to create valid attestation reports and requires only physi-
cal access to an arbitrary SEV-capable CPU. The SEV-technology
offers no mechanism to limit the lifetime of the endorsement keys.
Even with the Versioned Chip Endorsement Key (VCEK), intro-
duced with SEV-SNP, the endorsement keys are still built on a
chip-unique secret that, once extracted, can be used to derive all
possible VCEKs for that CPU.
The attestation reports play a central role in the trust-model of
SEV. They provide the VM owner with the guarantee that the VM
was not tampered with during deployment and that the remote
host uses a genuine AMD CPU with SEV protection in place.
By extracting the endorsement keys, we showed that a valid
signature over SEV attestation reports is not sufficient to prove
that the report originates from an authentic AMD system. Without
trusting the remote party, VM owners cannot verify the integrity
of their VM or the associated Migration Agent (MA).
Thus, based on the results presented in this paper, the remote
attestation feature of SEV must be considered broken on Zen 1, Zen
2, and Zen 3 AMD Epyc CPUs.
8.3 Potential Mitigations
We see two different strategies that can be pursued to mitigate our
attack. On the one hand, one could try to prevent the adversary from
achieving code execution (Section 8.3.1). On the other hand, one
could try to protect the architecture keys from being extracted, even
if the adversary manages to achieve code execution (Section 8.3.2).
8.3.1 Prevent adversarial code execution. The threat of fault injec-
tion for gaining adversarial code execution can be tackled from
different directions. One could try to detect malicious voltage drop-
s/glitches, and as a consequence, shut down the system to prevent
further damage. Alternatively, one could try to prevent faulty ex-
ecution in the presence of glitches, for instance, by introducing
redundancy. Both approaches might imply the need for changes in
the hardware or software design.
Hardware-based detection/prevention. Voltage monitoring circuits
– as commonly implemented in modern smartcards – could help to
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2886detect glitches. A recent patent by NVIDIA [45] proposes a cross-
domain voltage glitch detection circuit, which can be implemented
into a SoC. The main idea is that circuits in different independent
voltage domains monitor the voltage levels in the other domains,
and if there is a glitch on a specific rail, an alert signal is asserted.
In our opinion, this is a promising approach. However, it should
be kept in mind that there might exist voltage glitch shapes that
can cause faulty behavior but can not be detected by a particular
protection circuit.
We share the opinion with the authors of the VoltPillager at-
tack [17] that voltage glitching can not be prevented by protecting
the VR bus/protocol through cryptographic authentication. Fur-
thermore, although the VR bus is an easy access point for injecting
voltage glitches, the adversary could also inject glitches by other
means, e.g., by altering the PWM signal output of the VR or entirely
replacing the VR with a custom injection setup.
One might think that fully integrating the VR into the SoC could
be the ultimate solution. However, faults can not only be induced
by glitching the supply voltage. In the past couple of years, elec-
tromagnetic (EM) fault injection techniques against modern CPUs
have been examined to inject faults in a more targeted and con-
tactless way [52, 53]. Consequently, a holistic view is necessary to
prevent all kinds of fault injection techniques that can lead to code
execution on the target device.
Software-based detection/prevention. Hardening the ROM boot-
loader might be another option to prevent the adversary from
gaining code execution. However, this is a complex task since the
characteristics and potentials of faults are not well understood.
Particularly, there is no model which covers all possible faults.
Though, there are generic countermeasures that can decrease
the probability of successful attacks [10, 59]. For instance, constants
with large hamming distance make it hard to flip one valid value
to another, double checks protect branch conditions, loop integrity
checks make sure that the loop exits as intended, and a global
counter can be used to monitor the program flow and detect anom-
alies. For assessing software countermeasures against fault attacks,
different simulation-based frameworks have been proposed [25, 48].
In our opinion, the general approach of software-based mitigations
is promising because they can protect not only against fault at-
tacks by voltage glitching. Nevertheless, these countermeasures
come at the cost of some overhead in execution time, and therefore,
performance reduction.
8.3.2 Prevent key extraction. One of the key insights from [15] is
that the CEK should depend on TCB components versions. In this
case, CEKs extracted using firmware issues are no longer valid after
the firmware has been updated. With SEV-SNP, a similar model has
been adopted by AMD in the form of the VCEK.
The VCEK is derived from a secrets that depend on TCB com-
ponent versions. However, as we have shown in this work, this
dependency still allows an attacker to extract valid VCEKs for all
possible TCB versions. Although the VCEK is bound to firmware
versions, it does not depend on the functionality of the respective
firmware component. The dependency between the firmware ver-
sion, represented by a field in a component’s header, and the its
functionality is only implicit. Components, including their firmware