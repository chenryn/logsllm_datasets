（有些存储引擎可以通过表选项AUTO_INCREMENT来设定起始编号值。请参考下面对表选项
其中插人NULL值时，实际插入的数据值将是列序列的下一个编号值。它通常等于该列里的
AUTO_INCREMENT属性的列。除了TIMESTAMP和DATETIME（自MySQL5.6.5起），列的默
用来表明该列是否允许包含NULL值。如果这两个关键字都没有给出，则默认为NULL。
[PRIMARY]KEY
义col_definition的开头是一个数据类型data_type，后面通常还会有几个可选的关
是InnoDB表除外。
附录ESQL语法参考
前最大编号值再加上1。默认情况下，AUTO_INCREMENT列的实际取值将从1开始编号。
值都必须是一个常数，并且可以指定为数字、字符串或者NULL。在没有包含DEFAULT子
含彼此相同的值。新索引会根据index_columns里给出的列来创建，这些列
一个UNIQUE索引。
：index_option的取值与 CREATE INDEX条目所述的取值完全一致。与索
-与之相关的规则，参考3.2.3节。
FULLTEXT和 SPATIAL的用途是创建索引I。子
。FOREIGNKEY子句的处理方式相
---
## Page 687
储引擎，除非有特别说明。各个设置值之间可以用空白或逗号隔开。
引创建有关的更多信息请参考2.6.4节。
表选项。每个 table_option值指定一个表特性，如下所示。每个选项设置都能应用于所有存
口1
口
口
口
口
AUTO_INCREMENT[=]n
如果此选项被设置为1，表的键缓存将只是偶尔刷新，而不是每次插入操作之后都立刻刷新。
DELAY_KEY_WRITE[=]{O11}
keep_files_on_create，那么当指定目录里已存在该表的.MYD 文件时，会发生一个错误。
的，并且默认是被禁用的。对于分区表，
--skip-Symlink-links 选项启动的场合里。在某些 Unix变体上，符号链接不是线程安全
目录里去。‘dir_name'必须是一个完整的路径名。此选项只能工作在服务器未使月
此选项只适用于MyISAM表和Unix。它用来规定数据文件（即.MYD文件）必须写到指定的
DATA DIRECTORY [=]'dir_name'
语句可以查看注释内容。
表的描述性注释（最大为 2048个字符）。通过 SHOW CREATTE TABLE 和 SHOW TABLE STATUS
COMMENT[=]'Str
使用表的字符集的默认排序规则）。
表的默认字符集排序规则。collation 可能是一个排序规则名称，也可能是 DEFAULT（即
[DEFAULT]COLLATE[=]collation
于MyISAM表。）
会给表的更新操作稍微增加一点儿开销，但能提高表检查操作的工作效率。（此选项只适用
如果此选项被设置为1，MySQL将为表生成一个校验和；修改表时也会修改校验和。校验和
CHECKSUM [=] (OI1}
字符型列定义时产生的)。
这个表选项也会应用到后续的表修改操作（它是ALTER TABLE 在更改未明确指明字符集的
CREATE TABLE t
值将使用本选项所确定的字符集。在下面示例里，c1和c2 将分别使用字符集sjis和ujis:
的字符集)。如果在定义字符串列时没有显式表明它使用哪一个字符集，那么该列里的数据
表的默认字符集。charset 可以是某个字符集的名字，也可以是 DEFAULT（即使用数据库
如果要直接设置数据指针的大小，可以在创建表之前设置系统变量myisam_data_pointer_
寸的表，则累积起来的节省总量会非常可观。
越小。如果表本身的尺寸比较小，那么这种做法也不能节省多少空间，但是如果有很多小尺
的行指针的宽度也就越大，文件的大小可高达65536TB。反之，乘积越小，可使用的指针
操作系统也支持如此之大的文件），可以利用MAX_ROWS和AVG_ROW_LENGTH表选项来调整
这个指针的默认宽度足以创建出长度高达256TB的表来。如果需要用到更大的表（并且你的
表的行平均长度。对于MyISAM表，MySQL将根据AVG_ROW_LENGTH和MAX_ROWS的乘积
AVG_ROW_LENGTH [=] n
InnoDB表，如果在生成任意AUTO_INCREMENT 值之前重启服务器，这个项将失效。
为表生成一个起始编号值。此选项可用于 InnoDB 表、MyISAM 表和 MEMORY 表。对于
[DEFAULT]CHARACTER SET[=]charSet
size。
MyISAM存储引擎内部使用的行指针的宽度。这两个选项值的乘积越大，存储引擎内部使用
来确定数据文件的最大长度。MyISAM存储引擎内部使用的行指针的宽度可以是2~7个字节
，此选项会被忽略。如果启用了系统变
E.1SQL语句语法（非复合语句）
667
用
---
## Page 688
将使用该子句所返回的结果集来创建新表。对于那些会导致唯一性索引出现重复值的行，MySQL将
668
结尾的 SELECT语句。如果指定了select_stmt子句（作为结尾的 SELECT 命令），则MySQL
口
口F
口
口
口
口
口
口
此选项只适用于MERGE表。它列出了构成MERGE表的各个MyISAM表，以逗号分隔。
UNION[=](tbl_list)
缩功能会增加表更新操作的开销，但能改善检索操作的性能。0表示不压缩。1表示对字符串
MEMORY 存储引擎提供一些内存优化方面的提示。
会将行格式设置为COMPRESSED。
如果使用myisampack 程序来压缩MyISAM表（它也会使其成为只读的），则myisampack
对于MyISAM表，选项值DYNAMIC 或FIXED分别对应于可变长度和固定长度的行格式。
信息请参考5.4节。
innodb_file_format=Barracuda（参考12.5.3.1节的第4小节）。然后，可以将
量，那么还可以选择其他的行存储格式。
对于InnoDB 表，默认格式是 COMPACT。对于更早一点的原始InnoDB 格式，可以使用
则存储引擎可以忽略此选项。例如，如果表包含BLOB或TEXT列，就不能使用FIXED。使月
行存储格式。其中，DEFAULT允许存储引擎选择默认格式。如果指定的行格式不能被使用，
ROW_FORMAT[=]
长字符串列进行压缩。
此选项控制着MyISAM表中的索引压缩功能，即是否需要对相似的索引值进行压缩。索引压
PACK_KEYS[=]{OI1IDEFAULT}
向存储引擎表明打算存放到表里的行的最小个数。此选项主要用于 MEMORY表，它能向
MIN_ROWS [=]n
这个值的使用情况，请参考对AVG_ROW_LENGTH选项的描述。
向存储引擎表明打算存放到表里的行的最大个数。表在创建之后将至少允许这么多行。关于
MAX_ROWS[=]n
索引定义了自己的KEY_BLOCK_SIZE选项，该选项的设置值将取代相应的表级默认值。
建议存储引擎使用n个字节作为索引的键块长度。n值为0表示使用默认的长度。如果某个
KEY_BLOCK_SIZE [=]n
表示行将被插到构成该MERGE表的那些MyISAM表中的第一个或最后一个。
此选项用来设定 MERGE表将如何插入行。NO 表示根本不允许插入行。FIRST 或LAST 则
INSERT_METHOD [=] {NO 丨 FIRST |LAST}
的目录。
此选项与DATADIRECTORY相似(并且拥有相同的限制)，但指定的是编写索引文件（.MYI)
INDEX DIRECTORY[=]'dir_name'
引擎的描述请参考2.6.1节。
用，则此语句的执行效果取决于对SQL模式NO_ENGINE_SUBSTITUTION的设置。对各种存储
于查询给定的MySQL服务器所支持的存储引擎。如果在创建某个表时为它指定的存储引擎不可
在启用服务器时使用另一种默认引擎，可以参考12.5.2节的相关指导。SHOWENGINES语句可用
为表指定一种存储引擎。如果未对MySQL服务器进行配置，则默认存储引擎为InoDB。如果想
ENGINE[=]engine_name
这能提高性能，但如果发生崩溃，可能需要修复数据库。（此选项只适用于MyISAM表。）
ROW_FORMAT的值指定为COMPRESSED或DYNAMIC。更多与这些行格式的特点相关的
（CHAR、VARCHAR、BINARY和VARBINARY）值以及数值型索引值压缩。DEFAULT表示只对
{DEFAULT
附录ESQL语法参考
ICOMPACT | COMPRESSED | DYNAMIC 丨 FIXED 丨 REDUNDANT}
---
## Page 689
将被创建的那个表。
或多个列构成的表达式，col_list是一个由1~16个以逗号分隔的列名构成的列表。列名只能来自
下面这些可选的组成部分。
或者是一个列名列表。行的函数值或列值可用来确定把行存储到哪一个分区。分区定义还可以包含
示例请参考2.6.2.5节，更多信息请参考MySQL参考手册。
到不同的分区。接下来的讨论将对表分区的定义语法进行简要的描述。对此问题的深入讨论和相关
整个定义都将被忽略。
因为它会导致ON DELETE 和ON UPDATE 被忽略。）如果为InnoDB 之外的存储引擎定义了外键，则
会报告出错。
和 SET NULL（把相应的子表行中的外键列设置为NULL）。SET DEFAULT动作没有实现，InnoDB
和ONUPDATE可用于指定显式动作。InnoDB实现的动作是CASCADE（删除或更新相应的子表行）
这会危害引用的整体性。动作 RESTRICT和NO ACTION 都表示不指定任何动作。子句ON DEFAULT
表和列，并规定父表中的行被删除时应该采取什么动作。默认动作是防止删除或更新父表或子表
也就是说，fk_name 将成为索引名称。在外键的 REFERENCES 定义里，需要列出该外键所用到的父
是一个 REFERENCES 定义。外键 ID 即使给出也会被忽略，除非InnoDB 自动为外键创建一个索引，
关键字进行定义，在这个关键字的后面是一个可选的外键ID，然后是构成这一外键的列清单，最)
义和表选项，但是不会复制DATADIRECTORY和INDEX DIRECTORY 表选项，也不复制外键定义。
表的一个空白副本。你必须拥有tbl_name2表的 SELECT 权限。新表将包括同样的列定义、索引定
现的行替换先出现的行。如果这两个关键字都没有给出，则此语句将异常终止，并报告出错。
按以下原则处理：如果指定了IGNORE，则表示忽略后出现的行；如果指定了REPLACE，则用后出
外键支持。InnoDB 存储引擎提供了外键支持机制。外键必须通过在子表里使用 FOREIGN KEY
口RANGE（expr)分区函数将把每个分区和表达式expr 的可取值范围的一个子集关联在-
PARTITIONSn子句用来表明表有多少个分区，其中，n应该是一个正整数。如果指定了此
在表分区的描述里，开始是
REFERENCE 定义中的MATCH子句可以被解析，但是不会被使用。（不过，应该避免使用MATCH,
分区选项。MySQL支持对表分区。我们可以在定义表的时候对它进行分区并安排其数据被存储
结尾的LIKE子句。如果在结尾指定了LIKEtbl_name2子句，则新创建的表将是tbl_name2
下面列出了将表里的行分配到不同分区的不同方法。在下面的描述里，expr代表由表里的一个
口
口
与外键有关的更多讨论请参考2.13节。
义是所有未落入此前各分区的函数值都将属于这最后一个分区。
是按递增顺序列出的。最后一个分区可以使用 MAXVALUES 关键字作为其分区函数值，其含
将被映射到第一个分区。）对于首尾相连的分区，它们的VALUES子句所给出的上限值必须
起。这种分区函数必须和一个包含着VALUESLESSTHAN子句的分区定义搭配使用，并按
VALUES子句或子分区定义。
subpartition_definition子句与之相似，只不过它用于描述子分区，并且不允许包合
哪些分区函数值将被映射到该分区的VALUES 子句、其他分区选项和一组子分区定义。
子句定义了一个分区特性。除了为分区提供的一个名字，它还可以包括一个用来描述都
一组用来定义各个分区的partition_definition子句。每个partition_definition
一条关于如何把分区进一步划分成子分区的描述。
每个表的最大分区个数是1024，其中包括子分区。
子句，并且还指定了一些partition_definition子句，！
是PARTITIONBY；接着是一个用于为每个表行计算值的分区函数，
E.1.SQL语句语法（非复合语句）
则必须要有n个这样的定义。
每
669
含
有
后
---
## Page 690
670
KEY（col_list)分区函数的效果类似于HASH（）分区函数，但是你可以指定数据列（通过
口
RANGE COLUMNS（col_list)分区函数与RANGE(expr)相似，
LINEAR.
它们来计算散列值），并且MySQL服务器会负责提供散列函数。KEY（）的前面可以加上
时的情况更差。
除分区）变得更有效率。但是，这有可能会让行在各个分区上的分布程度比没有使用LINEAR
可以在 HASH（)形式的分区表达式的前面加上LINEAR，这会使得该函数的算法有所变化。使
的做法是把 HASH（）函数和用来指定创建多少分区的 PARTITION n子句搭配使用。行是基于
HASH（expr)分区函数将根据以行的内容计算出来的expr值把行存储到相应的分区。典型
用LINEAR的一个好处是可以让某些分区管理操作（如通过ALTERTABLE语句来增加或删
expr除以n的余数来进行分配的。
PARTITION BY LIST COLUMNS （i1,i2)
这样使用LISTCOLUMNS：
一个表包含两个INT列，名字分别为i1和i2，并且想要将它们用于分区，那么可以像下面
每个值都必须拥有相同数量的列，
LIST 的差异在于，LIST要求通过整数值来分区，而LIST COLUMNS 的VALUES IN子句可
IN来代替VALUESLESS THAN，但是对于指定的各个值的类型，也有类似的条件要求。（与
里面的那个列表不同。对于允许使用的列类型方面，有类似的条件要求。需要使用VALUES
值，则 VALUES 列表里也必须有一项为 NULL。
的分区。允许使用 NULL，但是不能使用MAXVALUE。如果eXpr表达式的计算结果为NULL
VALUESIN子句的分区定义搭配使用，并按照该子句所给出的整数列表把函数值映射到不同
LIST（expr）分区函数将把每个分区和一列值关联在一起。这种分区函数必须和一个包含着
的数据类型。
SET。VALUESLESS THAN子句里的每一个字面值都必须具有与col_Iist 里的相应列相同
里的每个列的类型都必须是整数、字符串或时态，不能是BIT、BLOB、TEXT、ENUM 或
就为VALUESLESSTHAN（val1，val2，val3），用于指定每个列的最大值。在col_1ist
列列出一个非 NULL字面值，以定义分区允许的上限值。例如，如果分区定义的开始部分是
是一个单个的表达式，而是一个列名列表。每个分区的VALUESLESS THAN 子句会为每
A
附录ESQL语法参考
RTITION
PARTITIONp1VALUES
PARTITION pO VALUES
PARTITION
PARTITION
PARTITION
PARTITION
p3 VALUES
VALUES
VALUES
IN
LESS
（(1，0），
（（0，
((NULL,
THAN MAXVALUE
THAN
THAN
0）
，但每个子句里的列表数量可以各不相同。例如，如果
NULL））
(75000)
(30000)
(1，1）)
（0，
（0，2))，
，但是在分区时，它使用的不
有
K
---
## Page 691
表内容插到该表里以后生效。例如，可以像下面这样把一个选定的列定义为新表里的 PRIMARY KEY：
用的术语是“分区”，但这些操作也可以用在子分区的定义里。）