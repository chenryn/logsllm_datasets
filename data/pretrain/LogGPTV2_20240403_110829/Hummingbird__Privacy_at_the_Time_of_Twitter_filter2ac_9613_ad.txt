### Guarantees and Overhead in Hummingbird

Hummingbird ensures the privacy of both tweeters and followers with minimal computational and communication overhead. Specifically, the cryptographic operations required by tweeters and followers are negligible and imperceptible to end-users. Table I summarizes the overhead for each operation in Hummingbird. Experiments were conducted on a 2011 MacBook Pro with a 2.3 GHz Intel Core i5 CPU, while the server (HS) ran on an Intel Harpertown platform with a 2.5 GHz Xeon CPU.

#### Performance Analysis

**Following a User:**
Following a user involves a three-step protocol as shown in Figure 2. This protocol is asynchronous and does not require users to be simultaneously online. The process includes one OPRF invocation, which involves two modular multiplications, one short exponentiation, two hash evaluations, one RSA signature, and one modular inversion in the RSA setting. The primary computational overhead is the tweeter's computation of one RSA signature per requested hashtag. According to our experiments, an RSA signature with a 1024-bit modulus takes less than 1 ms using Java and the Chinese Remainder Theorem, while modular multiplications take less than 0.01 ms. Therefore, the user-side cryptographic overhead is dominated by the time to perform the web transaction itself. The total communication overhead is 2 integers in the RSA group for each hashtag of interest.

**Tweeting:**
This operation requires one hash and one RSA signature for each hashtag associated with the tweet. Additionally, it involves the computation of one symmetric key encryption (e.g., AES). The computational overhead is once again negligible compared to the time required to complete the web transaction. Communication overhead only amounts to one output of a cryptographic hash function (e.g., SHA-1) for each hashtag. Reading a tweet only requires one AES decryption, which is also negligible.

**Server Overhead:**
The server (HS) does not perform any cryptographic operations. It primarily stores and relays messages, matching tweets to followers by comparing pseudo-random values. For any incoming pair (encrypted tweet, cryptographic token), HS only needs to look up the token against those uploaded by corresponding followers and, if needed, forward the ciphertext. In our implementation, tokens are outputs of the SHA-1 hash function, computed over OPRF evaluations on hashtags. The complexity of the matching function depends on the efficiency of the lookup algorithm. Although we do not detail the Twitter "search" algorithm, we consider that matching hashtags in Twitter is conceptually similar to matching tokens in HS. The performance of HS can be enhanced using techniques such as binary search, replication, and load balancing.

### Discussion and Extensions

**Privacy-Enhanced Microblogging:**
To our knowledge, Hummingbird is one of the first attempts to construct a privacy-enhanced microblogging OSN architecture. Tweeters control who can access their tweets and enforce fine-grained access control. A tweeter authorizes followers to read only tweets with specific hashtags, offering benefits to both tweeters and followers. For example, Alice can subscribe to CNN tweets with the hashtag #CNNTonight and avoid receiving all other CNN tweets. This control also enables new revenue possibilities, such as premium content subscriptions.

**Information Disclosure:**
As discussed in Section III, the operational requirements of HS impose minimal privacy leakage. HS learns the involved parties when a follow request is issued and finalizes the request. HS also learns when a tweet matches a follow request, and when two follow requests for the same tweeter are based on the same hashtag. However, this can be mitigated, as discussed in Section VII-C.

**User Anonymity:**
Our focus is on privacy; user anonymity is beyond the scope of this paper. In Hummingbird, all user identities are assumed to be known. Pseudonymous or anonymization techniques could be used to protect identities. For followers, pseudonymity is the best achievable degree of privacy, as HS forwards tweets to them. Tweeters can achieve real anonymity with system modifications, such as decoupling follower and tweeter roles and using anonymous means like Tor.

**Unlinking Same-Hashtag Tweets:**
We propose a method to prevent HS from learning whether multiple tweets by the same tweeter contain the same hashtag. Instead of depositing a token t, Alice deposits a temporary token tseq = H3(seq, t), where seq is a sequence identifier. This method, while effective, may still allow HS to perform traffic analysis and infer periodicity.

**Collusions:**
HS adheres to the honest-but-curious (HbC) adversarial model. HS can attempt to violate the privacy of tweeters or followers but does not create spurious followers. Collusions between HS and users can disclose interests, but colluding users lose their own privacy.

**Handling Retweets:**
Hummingbird does not allow retweets to maintain privacy. Followers can redistribute decrypted content, but this is beyond the scope of the paper. Similarly, replies to tweets are not allowed to preserve privacy.

**Extending to Mobile Applications:**
Hummingbird's low overhead makes it suitable for resource-constrained devices like smartphones. On a 2010 HTC Nexus One running Android 2.3.6, generating an RSA signature takes less than 20 ms.

**Support for Multiple Hashtags:**
Hummingbird can be extended to support multiple hashtags. Bob can tweet with n hashtags, and anyone with a follow request accepted on any of these hashtags can read the message. The protocol is modified to include multiple parallel Blind-RSA executions.

**Oblivious AES as OPRF:**
Another possibility for realizing OPRFs is to use Oblivious AES. While this removes public-key operations, the overhead of the oblivious evaluation is still high. Improved constructions may make this feasible in the future.

### Related Work

This section reviews related work, distinguishing between different approaches and their contributions to privacy in microblogging systems.