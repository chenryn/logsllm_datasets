6.2 Defending Against Timing Attacks
The target application may use the SoC or external timers
to detect the time elapsed in the secure domain since the
DS affects the performance of the processor and com-
municates with a human analyst. Note that the TS using
ETM does not affect the performance of the processor
and thus is immune to the timing attack.
The ARMv8 architecture deﬁnes two types of timer
components, i.e., the memory-mapped timers and the
generic timer registers [8]. Other than these timers, the
Juno board is equipped with an additional Real Time
Clock (RTC) component PL031 [6] and two dual-timer
modules SP804 [4] to measure the time. For each one of
these components, we manipulate its value to make the
time elapsed of NINJA invisible.
Each of the memory-mapped timer components is
mapped to a pre-deﬁned memory region, and all these
memory regions are writable in EL3. Thus, we record
the value of the timer or counter while entering NINJA
and restore it before existing NINJA. The RTC and dual-
timer modules are also mapped to a writable memory re-
gion, so we use a similar method to handle them.
The generic timer registers consist of a series of
timer and counter registers, and all of these regis-
ters are writable in EL3 except the physical counter
register CNTPCT EL0 and the virtual counter register
CNTVCT EL0. For the writable registers, we use the
same approach as handling memory-mapped timers to
manipulate them. Although CNTPCT EL0 is not directly
writable,
the ARM architecture requires a memory-
mapped counter component to control the generation
of the counter value [8].
the
generic counter is mapped to a controlling memory frame
0x2a430000-0x2a43ffff, and writing to the memory ad-
dress 0x2a430008 updates the value of CNTPCT EL0.
The CNTVCT EL0 register always holds a value equal
to the value of the physical counter register minus the
value of the virtual offset register CNTVOFF EL2. Thus,
the update to the CNTPCT EL0 register also updates the
CNTVCT EL0 register.
In the Juno board,
Note that the above mechanism only considers the
time consumption of NINJA, and does not take the time
consumption of the ATF into account. Thus, to make
it more precise, we measure the average time consump-
tion of the ATF during the secure exception handling (see
Appendix B) and minus it while restoring the timer val-
ues. Besides the timers, the malware may also leverage
the PMU to count the CPU cycles. Thus, NINJA checks
the enabled PMU counters and restores their values in a
similar way to the writable timers.
The external timing attack cannot be defended by
modifying the local timer since external timers are in-
volved. As the instruction tracing in NINJA is immune to
the timing attack, we can use the TS to trace the execu-
tion of the target with DS enabled and disabled. By com-
paring the trace result using the approaches described
in BareCloud [31] and MalGene [30], we may identify
the suspicious instructions that launch the attack and de-
fend against the attack by manipulating the control ﬂow
in EL3 to bypass these instructions. However, the ef-
fectiveness of this approach needs to be further studied.
Currently, defending against the external timing attack is
an open research problem [20, 54].
7 Evaluation
To evaluate NINJA, we ﬁst compare it with existing anal-
ysis and debugging tools on ARM. NINJA neither in-
volves any virtual machine or emulator nor uses the de-
tectable Linux tools like ptrace or strace. Moreover,
to further improve the transparency, we do not modify
Android system software or the Linux kernel. The de-
tailed comparison is listed in Table 1. Since NINJA only
relies on the ATF, the table shows that the Trusted Com-
puting Base (TCB) of NINJA is much smaller than exist-
ing systems.
7.1 Output of Tracing Subsystem
To learn the details of the tracing output, we write a sim-
ple Android application that uses Java Native Interface
to read the /proc/self/status ﬁle line by line (which
can be further used to identify whether ptrace is en-
abled) and outputs the content to the console. We use
instruction trace of the TS to trace the execution of the
application, and also measure the time usage. The status
ﬁle contains 38 lines in total, and it takes about 0.22 ms
to ﬁnish executing. After the execution, the ETF contains
9.92 KB encoded trace data, and the datarate is approxi-
mately 44.03 MB/s. Next, we use ptm2human [26] to de-
code the data, and the decoded trace data contains 1341
signpost instructions (80 in our custom native library and
the others in libc.so). By manually introspect the sign-
post instructions in our custom native library, we can re-
build the whole execution control ﬂow. To reduce the
42    26th USENIX Security Symposium
USENIX Association
Table 1: Comparing with Other Tools. The source lines of code (SLOC) of the TCB is calculated by sloccount [47]
based on Android 5.1.1 and Linux kernel 3.18.20.
ATF = ARM Trusted Firmware, AOS = Android OS, LK = Linux Kernel
NINJA TaintDroid [22] TaintART [44] DroidTrace [56] CrowDroid [15] DroidScope [52] CopperDroid [45] NDroid [38]
No VM/emulator (cid:88)
No ptrace/strace (cid:88)
No modiﬁcation to Android (cid:88)
Analyzing native instruction (cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Trusted computing base ATF
AOS + LK
AOS + LK
SLOC of TCB (K)
27
56,355
56,355
LK
12,723
LK
12,723
QEMU
489
QEMU
489
QEMU
489
storage usage of the ETM, we can use real-time con-
tinuous export via either a dedicated trace port capable
of sustaining the bandwidth of the trace or an existing
interface on the SoC (e.g., a USB or other high-speed
port) [11].
7.2 Tracing and Debugging Samples
We pickup two samples ActivityLifecycle1 and
PrivateDataLeak3 from DroidBench [21] project and
use NINJA to analyze them. We choose these two spe-
ciﬁc samples since they exhibit representative malicious
behavior like leaking sensitive information via local ﬁle,
text message, and network connection.
Analyzing ActivityLifecycle1. To get an overview
of the sample, we ﬁrst enable the Android API tracing
feature to inspect the APIs that read sensitive informa-
tion (source) and APIs that leak information (sink), and
ﬁnd a suspicious API call sequence.
In the sequence,
the method TelephonyManager.getDeviceId and
method HttpURLConnection.connect are invoked in
turn, which indicates a potential ﬂow that sends IMEI to a
remote server. As we know the network packets are sent
via the system call sys sendto, we attempt to intercept
the system call and analyze the parameters of the system
call. In Android, the system calls are invoked by corre-
sponding functions in libc.so, and we get the address
of the function for the system call sys sendto by disas-
sembling libc.so. Thus, we use NINJA to set a break-
point at the address, and the second parameter of the sys-
tem call, which is stored in register X1, shows that the
sample sends a 181 bytes buffer to a remote server. Then,
we output the memory content of the buffer and ﬁnd that
it is a HTTP GET request to host www.google.de with
path /search?q=353626078711780. Note that the dig-
its in the path is exactly the IMEI of the device.
Analyzing PrivateDataLeak3. Similar to the previ-
ous analysis, the Android API tracing helps us to ﬁnd a
suspicious API call sequence consisting of the methods
TelephonyManager.getDeviceId, Context.openF-
ileOutput, and SmsManager.sendTextMessage. As
the Android uses the system calls sys openat to open a
ﬁle and sys write to write a ﬁle, we set breakpoints at
the address of these calls. Note that the second parame-
ter of sys openat represents the full path of the target
ﬁle and the second parameter of sys write points to a
buffer writing to a ﬁle. Thus, after the breakpoints are hit,
we see that sample writing IMEI 353626078711780 to
the ﬁle /data/data/de.ecspride/files/out.txt.
The API SmsManager.sendTextMessage uses binder
to achieve IPC with the lower-layer SmsService in An-
droid system, and the semantics of the IPC is described
in CopperDroid [45]. By intercepting the system call
sys ioctl and following the semantics, we ﬁnally ﬁnd
the target of the text message “+49” and the content of
the message 353626078711780.
7.3 Transparency Experiments
7.3.1 Accessing System Instruction Interface
To evaluate the protection mechanism of the system in-
struction interface, we write an Android application that
reads the PMCR EL0 and PMCNTENSET EL0 registers via
MRS instruction. The values of these two registers rep-
resent whether a performance counter is enabled. We
ﬁrst use the application to read the registers with NINJA
disabled, and the result is shown in the upper rectan-
gle of Figure 7a. The last bit of the PMCR EL0 regis-
ter and the value of the PMCNTENSET EL0 register are 0,
which means that all the performance counters are dis-
abled. Then we press a GPIO button to enable the An-
droid API tracing feature of NINJA and read the regis-
ters again. From the console output shown in Figure 7b,
we see that the access to the registers is successfully
trapped into EL3. And the output shows that the real
values of the PMCR EL0 and PMCNTENSET EL0 registers
are 0x41013011 and 0x20, respectively, which indicates
that the counter PMEVCNTR5 EL0 is enabled. However,
the lower rectangle in Figure 7a shows that the value of
the registers fetched by the application keep unchanged.
USENIX Association
26th USENIX Security Symposium    43
(a) Reading PMU Register in an Application.
(b) EL3 Output in the Secure Console.
Figure 7: Accessing System Instruction Interface.
This experiment shows that NINJA effectively eliminates
the footprint on the system instruction interface.
Table 2: The TS Performance Evaluation Calculating 1
Million Digits of π.
7.3.2 Accessing Memory Mapped Interface
In this section, we take ioremap function as an exam-
ple to evaluate whether the interception to the memory-
mapping functions works. As the ioremap function can
be called only in the kernel space, we write a kernel mod-
ule that remaps the memory region of the ETM by the
ioremap function, and print the content of the ﬁrst 32
bytes in the region. Similar to the approach discussed
above, we ﬁrst load the kernel module with NINJA dis-
abled, and the output is shown in the upper rectangle in
Figure 8a. Note that the 5th to the 8th bytes are mapped
as the TRCPRGCTLR register and the EN bit, which indi-
cates the status of the ETM, is the last bit of the register.
In the upper rectangle, the EN bit 0 shows that the ETM is
disabled. Next, we enable the instruction tracing feature
of NINJA and reload the kernel module. The lower rect-
angle in Figure 8a shows that the content of the memory
fetched by the module remains the same. However, in the
Figure 8b, the output from EL3 shows that the memory
of the ETM has changed. This experiment shows that we
successfully hide the ETM status change to the normal
domain, and NINJA remains transparent.
7.3.3 Adjusting the Timers
To evaluate whether our mechanism that modiﬁes the
local timers works, we write a simple application that
launches a dummy loop for 1 billion times, and calculate
the execution time of the loop by the return values of the
API call System.currentTimeMillis(). In the ﬁrst
experiment, we record the execution time with NINJA
disabled, and the average time for 30 runs is 53.16s with
a standard deviation 2.97s.
In the second experiment,
we enable the debugging mode of NINJA and pause the
execution during the loop by pressing the GPIO button.
To simulate the manual analysis, we send a command rr
to output all the general purpose registers and then read
them for 60s. Finally, a command c is sent to resume
Mean
STD
# Slowdown
Base: Tracing disabled
2.133 s
0.69 ms
Instruction tracing
System call tracing
Android API tracing
2.135 s
2.134 s
149.372 s
2.79 ms
5.13 ms
1287.88 ms
∼ 1x
∼ 1x
∼70x
the execution of the target. We repeat the second exper-
iment with the timer adjusting feature of NINJA enabled
and disabled for 30 times each, and record the execu-
tion time of the loop. The result shows that the average
execution time with timer adjusting feature disabled is
116.33s with a standard deviation 2.24s, and that with
timer adjusting feature enabled is 54.33s with a standard
deviation 3.77s. As the latter result exhibits similar exe-
cution time with the original system, the malware cannot
use the local timer to detect the presence of the debug-
ging system.
7.4 Performance Evaluation
In this section, we evaluate the performance overhead of