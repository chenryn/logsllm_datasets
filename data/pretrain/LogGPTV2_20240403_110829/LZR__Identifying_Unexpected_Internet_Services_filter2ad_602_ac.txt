65.7%
67.1%
0.001%
32.8%
2.65%
0.05%
97.3%
Table 3: Impact of Handshake Options—Handshake pa-
rameters inﬂuence the services that send back identiﬁable
data. For example, an HTTP OPTIONS request on port 8081
results in 7.3% more IPs to respond with data than an HTTP
GET request. 65.7% of IPs will respond to both types of
requests on port 8081.
3120    30th USENIX Security Symposium
USENIX Association
An HTTP OPTIONS request discovers an additional 7.3%
IPs that speak HTTP compared to a GET request on port 8081.
Responsive IPs will acknowledge data and close the connec-
tion after receiving a GET request, hindering a scanner’s abil-
ity to ﬁngerprint the service as HTTP. However, by sending
an OPTIONS request, 72% of IPs will respond with a 501
status (method not implemented) and 17% will respond with
a 405 status (method not allowed), thereby conﬁrming they
do speak HTTP. IPs that exclusively respond to an OPTIONS
request are not constrained to a particular network and are
present across 5.3% of ASes. The discrepancy is less pro-
nounced on port 80 where only 0.02% of IPs will respond to
an OPTIONS request but not GET and only 1.1% of IPs will
respond to GET but not an OPTIONS request.
For TLS, per RFC 8446 [57], a handshake failure should
generate an error message and notify the application before
closing the connection. However, 2.65% of IPs will simply
close the connection without any application-layer error when
an incompatible cipher is given. As expected for PPTP, speci-
fying an incorrect magic cookie results in 67.1% of IPs failing
to respond (Table 3). Hosts practicing their own Layer 7 ﬁlter-
ing depending upon certain handshake options—and thereby
not sending any data to the client—presents an unavoidable
challenge for any L7 scanner to guess the perfect parameters
to speak the appropriate Layer 7 with every single host. In
Figure 6, we estimate all unknown services to be due to not
having the expected handshake options.
4.3 Consequences of Handshake Order
Similar to how handshake options might prevent a server from
responding, trying repeated incorrect handshakes prior to the
correct one might also prevent the identiﬁcation of services.
We evaluate whether hosts ﬁlter or refuse connections after
receiving incorrect L7 messages by (1) sending successive
HTTP GET and TLS Client Hello messages to all IANA-
assigned ports for 1% of the IPv4 space and (2) comparing
the number of hosts that successfully complete a follow-up
handshake when being sent the expected L7 data to the num-
ber of hosts that successfully complete a follow-up handshake
when being sent unexpected L7 data.
Depending on the protocol, we ﬁnd that sending unexpected
L7 data causes up to 30% of follow-up handshakes to fail
compared to the hosts found when directly scanning for the
protocol (Figure 11). For example, sending non-Telnet data to
Telnet servers causes 17% to fail a follow-up handshake; 65%
send a TCP RST and 35% do not SYN-ACK to a follow up TCP
handshake. Sending an HTTP GET request to TLS servers
causes 29% of follow-up TLS handshakes to fail. We ﬁnd this
behavior to be similar to a Cisco IOS feature, Login Block,
which allows administrators to temporarily block connections
to L7 services after unsuccessful login attempts [33]. Sur-
prisingly, this phenomenon only affects hosts after they send
protocol-identifying data—likely because this is when they
ﬁrst store server-side application-layer state about the connec-
tion. As such, this blocking does not prevent any servers from
being ﬁngerprinted. It only prevents a follow-up handshake af-
ter identifying data has been sent back to the scanner. Failure
is generally temporary: 75% of hosts will successfully com-
plete the L7 handshake within 5 seconds and 99% of hosts
will take less than 2 minutes. Nonetheless, waiting between
ﬁngerprinting and completing the follow-up handshake can
reduce this ﬁltering effect.
Figure 11: Impact of Sending Incorrect Handshakes—
Sending unexpected data to hosts causes some services to
fail the follow-up expected handshake even when ﬁngerprint-
ing was successful. For example, only 71% of TLS hosts
successfully complete a handshake when initially being sent
an HTTP handshake message. We provide the fraction of total
hosts successfully ﬁngerprinted in the third column.
4.4 Summary and Implications
One fundamental limitation of L7 scanning is that services
may require speciﬁc handshake options to respond. Nonethe-
less, our results indicate that the vast majority of identiﬁable
Internet services can be easily identiﬁed during scans. Many
hosts respond to the “wrong” L7 handshake and send data
that help ﬁngerprint the service: 16 of 30 protocols can be
detected with a single HTTP GET request and 99% of unex-
pected services can be identiﬁed with ﬁve handshakes. We
use these optimizations to build a scanner (LZR) dedicated to
accurate and efﬁcient unexpected service discovery.
5 LZR: A System for Identifying Services
In this section, we introduce LZR, a scanner that accurately
and efﬁciently identiﬁes Internet services based on the lessons
learned from Sections 2–4. LZR can be used with ZMap to
quickly identify protocols running on a port, or as a shim
between ZMap and an application-layer scanner like ZGrab,
to instruct the scanner what follow-up handshake to perform.
LZR’s novelty and performance gain is primarily due to its
USENIX Association
30th USENIX Security Symposium    3121
“fail-fast” approach to scanning and “ﬁngerprint everything”
approach to identifying protocols. It builds on two main ideas:
Ignore non-acknowledging hosts. About 40% of services
that send a SYN-ACK never acknowledge data. None of these
services can complete an L7 handshake and can be safely
ignored during Internet scans. Quickly identifying and ig-
noring these services can signiﬁcantly reduce costs because
non-acknowledging services force stateful scanners to open
an OS socket and wait for the full timeout period to elapse,
which typically takes much longer than completing a normal
handshake. Non-acknowledging hosts can be ﬁltered out by
sending a single packet—an ACK with data —similar to how
ZMap statelessly SYN scans.
Listen more. Up to 96% of services per port run unexpected
protocols. In 8 of the 30 protocols we scanned, the server
sends data ﬁrst, and 10 protocols send ﬁngerprint-able data
when sent an incorrect L7 handshake. By always waiting and
then ﬁngerprinting invalid server responses, we can identify
up to 16 of the 30 protocols by sending a single packet. A
scanner only needs to perform minimal computation to ﬁn-
gerprint a service: the ﬁrst packet from a server identiﬁes the
running protocol, which does not require a full TCP/IP stack.
5.1 Scan Algorithm
We outline LZR’s logic in Figure 12. LZR accepts a stream
of SYN-ACK packets from ZMap or tuples of (IP, port) to scan.
In the case that LZR has full connection details from ZMap,
LZR will start by ﬁltering hosts that send SYN-ACKs with
a zero window. Otherwise, it will initiate a new connection.
For non-zero windows, LZR will continue the connection by
sending an ACK packet containing the expected protocol’s
ﬁrst-packet handshake data. If LZR receives any type of data
in response from the host, it will ﬁngerprint the data and close
the connection. If a host neither acknowledges the data nor
closes the connection, LZR re-transmits the data with the
PUSH ﬂag (further discussed in Section 5.3). If a host does
not acknowledge the data (e.g., never responds or RSTs the
connection without an acknowledgement), LZR ﬁngerprints
the host as likely not hosting a real service and does not pro-
ceed with further connection attempts. Otherwise, if a host
acknowledges the data but does not send any data in response
(i.e., server is unresponsive or closes the connection immedi-
ately afterwards), LZR proceeds to close the connection, start
a new connection, and send the next handshake. The process
continues until LZR identiﬁes the running protocol or runs
out of additional handshakes to try. LZR can also optionally
ﬁlter IPs that respond on nearly every port (Section 3.1) by si-
multaneously sending SYN packets to a user-speciﬁed number
of random ephemeral ports and checking for a SYN-ACK.
5.2 Architecture
LZR is written in 3.5K lines of Go and implements all unique
protocols (i.e., handshakes) in Appendix A. Similar to ZMap,
LZR uses libpcap [68] to send and receive raw Ethernet pack-
ets rather than rely on the OS TCP/IP stack. This allows LZR
to efﬁciently ﬁngerprint services because a single socket can
be used for the duration of a scan and it allows LZR to adopt
and continue connections initiated by a stateless scanner like
ZMap. Because LZR only needs to send and receive a single
packet to ﬁngerprint services, a full TCP stack is not needed.
LZR takes as input a command-line argument list of proto-
cols to test and a stream of SYN-ACKs from ZMap or IP/ports
to scan. Internally, a small pool of Go routines send followup
ACK packets containing handshake messages and ﬁngerprint
their responses. Adding new protocols/handshakes to LZR is
easy; each handshake implements a Handshake interface that
speciﬁes (1) the data to attach to the ACK packet and (2) what
to search for in a response packet to ﬁngerprint the protocol.
Once LZR receives data to ﬁngerprint, LZR ﬁrst checks if the
data matches the ﬁngerprint (speciﬁed using the Handshake
interface) of the protocol being attempted. If not, LZR checks
all the remaining ﬁngerprints for a match. We note that be-
cause ZMap sends probes using a raw Ethernet socket, LZR
users need to install an iptables rule to prevent the Linux ker-
nel from sending RST packets in response to the SYN-ACKs
it receives. Otherwise, LZR cannot adopt and continue these
connections. We have released LZR under the Apache 2.0
license at https://github.com/stanford-esrg/lzr.
5.3 Evaluation
We evaluate both the accuracy and performance of LZR by
comparing protocol-speciﬁc ZGrab handshakes with four
LZR conﬁgurations. The ﬁrst two are the expected use cases:
1. ZMap/LZR: We use LZR with ZMap to identify the
service running on a port that ZMap ﬁnds.
2. ZMap/LZR + ZGrab: We use LZR as a shim between
ZMap and ZGrab to instruct ZGrab what full L7 hand-
shake to complete for hosts that ZMap ﬁnds.
During experiments with these conﬁgurations at 1gbE, we
ﬁnd that LZR is able to ﬁlter hosts much faster than ZMap is
able to ﬁnd hosts—especially on ephemeral ports with low
hitrates. ZMap artiﬁcially limits how fast LZR and ZGrab
operate. As such, we introduce two additional metrics that
approximate LZR’s performance under the premise of ZMap
ﬁnding hosts inﬁnitely quickly. This allows us to compute
how quickly LZR can ﬁnd hosts as scan speeds increase and
how much time ZGrab can save in an environment where there
are many hosts to scan because the researcher is investigating
multiple ports simultaneously.
3. Ofﬂine ZMap/LZR + ZGrab: We perform scans in two
phases. In the ﬁrst, we use ZMap and LZR to identify
3122    30th USENIX Security Symposium
USENIX Association
Figure 12: LZR Algorithm—LZR efﬁciently identiﬁes real Internet services by sending application-layer data with the ACK of
a TCP handshake to ﬁlter out non-acknowledging hosts and ﬁngerprint the responding protocol.
Internet hosts that speak a known protocol and exclude
this phase from our benchmarking. Then, in a second
phase, we allow ZGrab to process services at full speed.
4. Ofﬂine ZMap + LZR: We perform scans in two phases.
In the ﬁrst, we ﬁnd candidate services with ZMap, and
exclude this phase from our benchmarking. In the second
phase, we benchmark how quickly LZR can ﬁngerprint
services operating at full speed.
We report L4 and L7 behavior breakdown, CPU time, and
bandwidth savings of LZR from 100% scans of the IPv4
address space completed during June 2020 in Table 4. We cal-
culate runtime performance using CPU cycles per second for
ZGrab and LZR as both tools are CPU bound: ZGrab’s com-
pletion of a full handshake (e.g., encryption/decryption for
TLS) and LZR’s ﬁngerprinting (e.g., pattern matching) create
the biggest performance bottlenecks for each. When bench-
marking LZR, we receive complaints from seven different
organizations, but there is no indication that the complaints
are the result of a particular LZR optimization; we follow-
up with all responsive network operators and learn that the
complaints are simply due to the 100% coverage of the scans.
How many additional services does LZR ﬁnd? One of
LZR’s key features is that it can identify additional services,
while ﬁltering out unresponsive ones by analyzing the re-
sponse to the data included in the ACK packet. Using the
keyword-ﬁngerprinting strategy, LZR identiﬁes an average
of 12 additional unique protocols across ports in our exper-
iment by using only the expected 1–2 handshakes; for ex-
ample, 1.3 million IPs hosting an additional 16 protocols
on port 443 and 238,000 IPs hosting an additional 18 pro-
tocols on port 80 are found with just the single expected
handshake. Furthermore, LZR ﬁnds over 2 times more unex-
pected than expected services when sending a single AMQP
handshake to 5672/AMQP. The breakdown of the unexpected
services is, unsurprisingly, nearly identical to the distribu-
tion in Figure 6 (i.e., HTTP and TLS dominate). Across all
ports in Appendix A, LZR identiﬁes 88% of all identiﬁable
services with just a single HTTP handshake message. The
exact signatures LZR uses for ﬁngerprinting services can
be found at https://github.com/stanford-esrg/lzr/
tree/master/handshakes.
Does LZR ﬁlter out appropriate hosts? LZR does
not ﬁnd a statistically signiﬁcantly different set of hosts
than scanning with just ZMap and ZGrab (Table 4). The
Kolmogorov–Smirnov (KS) test [40] ﬁnds p > 0.05, rejecting
the hypothesis that the approaches ﬁnd a different number
of services for all tested ports. We also verify that sending
data with an ACK during the handshake does not produce
a statistically signiﬁcant difference in the total number of
hosts that acknowledge data or the total number of IPs that
send back data across three trials of 1% IPv4 samples for
80/HTTP, 443/TLS and 27017/MongoDB. However, we do
ﬁnd that an additional average of 0.18% of hosts respond
when setting the PUSH ﬂag during the retransmission. Though
the addition of the PUSH ﬂag causes the follow-up packet to
not qualify as an exact TCP retransmission per RFC 793 [54],
we conﬁrm that there is no increase in the number of closed
connections when re-transmitting with a PUSH ﬂag compared
to an identical retransmission. We do not set the PUSH ﬂag
immediately during the handshake as that causes about 0.6%
of IPs to close the connection.
How much faster is L7 scanning with LZR? ZMap/LZR
performance is always faster than ZGrab due to LZR’s ability
to identify service presence without completing an L7 hand-
shake, which often requires a large number of CPU cycles for
USENIX Association
30th USENIX Security Symposium    3123
NoWindow 0?ZMapS/AReceive ACK?YesTry all Fingerprinting ModulesNoReceiveData?YesNoYesMax retransmits reached?Receive RST?NoReceive FIN?NoMore handshakes given at runtime?YesYesYesNoSend Ackw/ Handshake[i]i++Send RSTEndSend SYNReceive S/A?NoEndYesYesEndNoSend Ack w/ PSHw/ Handshake[i]Filter Unknown Service Across Ports?From Random Ephemeral Port?NoYesSend SYN on eph_limit # of random ephemeral portsNoEndMax retransmits reached? YesNonum_received>= eph_limit ?NoYesYesi== 1YesNoPort
Protocol(s)
(Consecutively Scanned)
Number of Hosts Found
SYN-ACK
Zero Window
RST
ACKs Data
L7 Handshake
Expected (LZR)
Expected (ZGrab)
Unexpected (LZR)
Unique Unexpected
80
HTTP
443
TLS
21
FTP
23
TEL
5672
AMQP VNC Mongo HTTP HTTP
27017
62220
5900
80
TLS
443
TLS
HTTP
47808
HTTP
TLS
62.6M
1.3M
1.7M
55M
51.8M 14M 6.4M
2.1M
2.3M
45M
1.7M 1M
1.1M 673K
9.5M 4.6M
3.5M
899K
502K
1.4M
3.5M 2.4M
1.2M 695K
730K
166K
1.4M 505K
51.6M 2.8M
2.6M 63M
742K
1.8M
1.2M
737K
31K
1.3M
349K
1.9M
56.3M 45M
628K
1.1M
54.66M 43.7M 9.2M 2.71M 123K
54.63M 43.7M 9.3M 2.73M 123K
260K
238K
18
11
113K 230K
10
1.3M
16
10
277K
277K
56K
8
73.3K
73.6K
23K
14
38K
36K
23K
12
56M
56M
207K
18
44.3M 22.6K
44.4M 22.7K
26.5K
758K
16
14
Speed Up (Time)
ZMap/LZR
ZMap/LZR + ZGrab
Ofﬂine ZMap/LZR + ZGrab
Ofﬂine ZMap + LZR
Bandwidth Savings
ZMap/LZR
ZMap/LZR + ZGrab
Ofﬂine ZMap/LZR + ZGrab
Ofﬂine ZMap + LZR
3.3×
1.2×
1.1×
4.1×
60%
-28%
12%
49%
4.7×
1.1×
1.1×
4.1×
75%
-16%
10%
60%
2.8× 3.9×
1.2× 2.5×
2.1× 1.6×
5×
1.9×
1.8×
3.3×
10.7× 11.4×
1.6×
2×
1.9×
1.4×
7×
4×
13.3× 55×
3.3×
2.7×
2.6×
1.1×
1.1×
5.4×
25.3× 5.6×
2×
6.3×
0.95× 2×
1.1×
2.5×
3.4×
29×
67%
3%
36%
56%
78%
3%
67%
69%
70%
41%
72%
75%
79%
46%
68%
78%
66%