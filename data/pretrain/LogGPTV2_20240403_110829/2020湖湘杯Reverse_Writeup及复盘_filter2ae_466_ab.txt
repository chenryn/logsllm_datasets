     '874992ac91866ce1430687aa9f7121fc']
    def func(num):
        result = []
        while num != 1:
            num = num * 3 + 1 if num % 2 else num // 2
            result.append(num)
        return result
    if __name__ == '__main__':
        flag = ''
        '''
        print('Your input is not the FLAG!')
        inp = input()
        if len(inp) != 27:
            print('length error!')
            sys.exit(-1)
        for i, ch in enumerate(inp):
        '''
        for i in range(len(check)):
            for ch in range(32,128):
                ret_list = func(ch)
                s = ''
                for idx in range(len(ret_list)):
                    s += str(ret_list[idx])
                    s += str(ret_list[(len(ret_list) - idx - 1)])
                md5 = hashlib.md5()
                md5.update(s.encode('utf-8'))
                if md5.hexdigest() == check[i]:
                    flag += chr(ch)
        print(flag)
        '''
        md5 = hashlib.md5()
        md5.update(inp.encode('utf-8'))
        print('You win!')
        print('flag{' + md5.hexdigest() + '}')
        '''
    # okay decompiling 2.pyc
## 0x02 easy_c++
签到题，最基本的逆向。
这里可以看到最关键的三个地方，就是很常见的，密文，加密算法，比较，而算法又是最基础的xor。直接上脚本就行
    >>> a = '7d21e>> flag = ''
    >>> for i in range(len(a)):
    ...     flag += chr(ord(a[i])^i)
    ...
    >>> flag
    '7e02a9c4439056df0e2a7b432b0069b3'
## 0x03 easyZ
这题其实才是最有意思的一题。至于为什么要放最后，是因为我比赛过程中没有做出来，这里留做记录，有师傅指点之后就行修改。s390是一个很不常见的架构，之前在CTF中出现过没有超过三次，我知道的有分别是2018年的一个国外的比赛和2019的bytectf。有幸参加了其中一场，那场的s390是可以qemu模拟并且调试的。而今天的不能，不知道是自己环境的问题还是题目的问题（基本上确定是自己环境的问题，但是自己环境和之前的没变，可能是还差一些什么）。而IDA7.4以下是不支持反编译s390的。知道比较好用的，也只有objdump。
附件给出了各个区段和汇编代码，我们需要找到关键位置。而常见的寻找关键位置就是查找字符串，一般字符串是在data段。在rodata段，找到了关键的信息。对照指令手册，审代码就行。
这部分可以看到一些有用的信息。please这句话的偏移是0x1071064，如果想要调用，汇编代码中一定有这个字符串的地址，直接查找。
可以找到关键的地方，而通过字符串，也可以确定一些库函数。
     1000b38:    eb bf f0 58 00 24     stmg    %r11,%r15,88(%r15)      #main
     1000b3e:    e3 f0 ff 20 ff 71     lay    %r15,-224(%r15)
     1000b44:    b9 04 00 bf           lgr    %r11,%r15
     1000b48:    b2 4f 00 10           ear    %r1,%a0
     1000b4c:    eb 11 00 20 00 0d     sllg    %r1,%r1,32
     1000b52:    b2 4f 00 11           ear    %r1,%a1
     1000b56:    d2 07 b0 d8 10 28     mvc    216(8,%r11),40(%r1)
     1000b5c:    c0 20 00 03 82 84     larl    %r2,0x1071064           ;Please input
     1000b62:    c0 e5 00 00 40 43     brasl    %r14,0x1008be8          ;printf
     1000b68:    ec 1b 00 a6 00 d9     aghik    %r1,%r11,166
     1000b6e:    b9 04 00 31           lgr    %r3,%r1
     1000b72:    c0 20 00 03 82 87     larl    %r2,0x1071080           ;%s
     1000b78:    c0 e5 00 00 3a 5c     brasl    %r14,0x1008030          ;scanf
     1000b7e:    ec 1b 00 a6 00 d9     aghik    %r1,%r11,166
     1000b84:    b9 04 00 21           lgr    %r2,%r1                     ;load r1,r2
     1000b88:    c0 e5 ff ff fe c4     brasl    %r14,0x1000910          ;call func1  规定格式，0-9a-f
     1000b8e:    b9 04 00 12           lgr    %r1,%r2
     1000b92:    12 11                 ltr    %r1,%r1
     1000b94:    a7 84 00 17           je    0x1000bc2
     1000b98:    ec 1b 00 a6 00 d9     aghik    %r1,%r11,166
     1000b9e:    b9 04 00 21           lgr    %r2,%r1
     1000ba2:    c0 e5 ff ff ff 33     brasl    %r14,0x1000a08          ;call func2
     1000ba8:    b9 04 00 12           lgr    %r1,%r2
     1000bac:    12 11                 ltr    %r1,%r1
     1000bae:    a7 84 00 0a           je    0x1000bc2
     1000bb2:    c0 20 00 03 82 69     larl    %r2,0x1071084           ;You win!
     1000bb8:    c0 e5 00 00 40 18     brasl    %r14,0x1008be8          ;printf
     1000bbe:    a7 f4 00 08           j    0x1000bce
     1000bc2:    c0 20 00 03 82 66     larl    %r2,0x107108e           ;You lose!
     1000bc8:    c0 e5 00 00 40 10     brasl    %r14,0x1008be8          ;printf
     1000bce:    a7 18 00 00           lhi    %r1,0
     1000bd2:    b9 14 00 11           lgfr    %r1,%r1
     1000bd6:    b9 04 00 21           lgr    %r2,%r1
     1000bda:    b2 4f 00 10           ear    %r1,%a0
     1000bde:    eb 11 00 20 00 0d     sllg    %r1,%r1,32
     1000be4:    b2 4f 00 11           ear    %r1,%a1
     1000be8:    d5 07 b0 d8 10 28     clc    216(8,%r11),40(%r1)
     1000bee:    a7 84 00 05           je    0x1000bf8
     1000bf2:    c0 e5 00 00 e5 2b     brasl    %r14,0x101d648
     1000bf8:    e3 40 b1 50 00 04     lg    %r4,336(%r11)
     1000bfe:    eb bf b1 38 00 04     lmg    %r11,%r15,312(%r11)
     1000c04:    07 f4                 br    %r4
审一下main可以看到，主要有两个函数，0x1000910和0x1000a08，接下来可以一个一个看。
    # func1
     1000910:    eb bf f0 58 00 24     stmg    %r11,%r15,88(%r15)
     1000916:    e3 f0 ff 50 ff 71     lay    %r15,-176(%r15)
     100091c:    b9 04 00 bf           lgr    %r11,%r15
     1000920:    e3 20 b0 a0 00 24     stg    %r2,160(%r11)
     1000926:    e3 20 b0 a0 00 04     lg    %r2,160(%r11)
     100092c:    c0 e5 ff ff ff 02     brasl    %r14,0x1000730      ;strlen
     1000932:    b9 04 00 12           lgr    %r1,%r2
     1000936:    a7 1f 00 20           cghi    %r1,32  ;Compare Halfword
     100093a:    a7 84 00 06           je    0x1000946   ;bin(32) = 100000b
     100093e:    a7 18 00 00           lhi    %r1,0
     1000942:    a7 f4 00 56           j    0x10009ee   ;不能走这个
     1000946:    e5 4c b0 ac 00 00     mvhi    172(%r11),0 ;
     100094c:    a7 f4 00 49           j    0x10009de
     1000950:    e3 10 b0 ac 00 14     lgf    %r1,172(%r11)
     1000956:    e3 10 b0 a0 00 08     ag    %r1,160(%r11)
     100095c:    43 10 10 00           ic    %r1,0(%r1)
     1000960:    b9 94 00 11           llcr    %r1,%r1
     1000964:    c2 1f 00 00 00 2f     clfi    %r1,47  ;0
     100096a:    a7 c4 00 11           jle    0x100098c
     100096e:    e3 10 b0 ac 00 14     lgf    %r1,172(%r11)
     1000974:    e3 10 b0 a0 00 08     ag    %r1,160(%r11)