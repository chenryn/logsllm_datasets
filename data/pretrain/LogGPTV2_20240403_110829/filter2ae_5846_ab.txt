* * *
接下来，让我们来了解一下Windows
x64平台下的调用约定。根据[维基百科](https://en.wikipedia.org/wiki/X86_calling_conventions#Microsoft_x64_calling_convention
"维基百科")：
    在Microsoft x64平台下的调用约定中，调用者负责在调用函数之前在堆栈上分配32个字节的“影子空间”（不管实际使用的参数数量是多少），并在调用后将其弹出堆栈。该影子空间用于存放RCX、RDX、R8和R9寄存器的值，[16]同时，必须对所有函数可用，即使是参数少于四个的函数，也是如此。
重点在于，对于每个函数调用，都会为被调用函数创建0x20字节的空间（即"影子空间"），无论被调用函数实际上是否会耗尽分配的所有影子空间（调用者并不关心）。如果仅使用了部分影子空间的话，则剩余部分将保持未初始化状态。
**堆栈喷射**
* * *
2011年，[j00ru](https://j00ru.vexillium.org/2011/05/windows-kernel-stack-spraying-techniques/
"j00ru")发明了一种非常强大的技术，即使用nt!NtMapUserPhysicalPages进行堆栈喷射。使用这种技术，我们至少可以在内核堆栈上喷射0x2000字节的任意数据。这意味着，只要影子空间位于喷射范围内，我们就可以将任意数据植入影子空间的未初始化部分。
**影子ROP**
* * *
实际上，影子ROP的理论非常简单。我们将ROP链的各个片段放入影子空间的未初始化部分，然后将各个片段链接起来，从而达到我们的目标：就本文来说，就是禁用SMEP，并跳转到shellcode。
需要注意的是，千万不要在使用nt!NtMapUserPhysicalPages进行喷射与触发漏洞这段时间内调用任何系统调用，因为这有可能会破坏喷射到内核堆栈上的数据和我们的ROP链。如果我们使用诸如Python之类的脚本语言来进行漏洞利用的话，这可能会很棘手，因为它们会在底层调用系统调用，例如访问堆的时候，而这会破坏ROP链，从而破坏我们的漏洞利用过程。
**PoC**
* * *
为了便于读者进行理解，这里将以[HackSysTeam](https://twitter.com/HackSysTeam
"HackSysTeam")出品的[HEVD
v2.00](https://github.com/hacksysteam/HackSysExtremeVulnerableDriver/blob/master/Exploit/TypeConfusion.c
"HEVD
v2.00")中的一个类型混淆漏洞的利用过程为例进行演示。之所以选择这个漏洞，是因为它是HEVD实现的最简单的漏洞之一，当然，这里介绍的技术也适用于HEVD中的其他漏洞。其实，这个漏洞的利用方法非常简单，只需通过DeviceIoControl调用用户提供的函数指针即可(当然，着要借助于类型混淆漏洞)。就这里来说，虽然控制指令指针非常容易，但是，它却没有为我们提供直接将有效载荷复制到内核池的内核堆栈的方法。这时候，我们的方法就派上用场了。
我们的攻击计划是:
    NtMapUserPhysicalPages (喷射) -> DeviceIoControl (触发) -> ROP (pwn)