



















tors, Barros [1] proposes a modiÔ¨Åcation to the ICMP
Traceback messages. In his reÔ¨Ånement, routers sometimes
send ICMP Traceback messages to the source.
In Fig-
ure 1, A3 launches a DDoS attack by sending TCP SYN
segments to the reÔ¨Çector H3 specifying V as the source
address. H3, in turn, sends SYN ACK segments to the
victim V: According to the modiÔ¨Åcation, routers on the
path A3 ! H3 will send ICMP messages to the source,
i.e., to V: This reverse trace enables the victim to iden-
tify the attacking agent from these trace packets. The re-
verse trace mechanism depends only on the number of
attacking agents, and not on the number of reÔ¨Çectors [20].
This achieves scalability because the number of available
reÔ¨Çectors is much higher than the number of attacking
agents on the Internet.
Snoeren et al. [23] propose an attractive hashed-based
system that can trace the origin of a single IP packet deliv-
ered by a network in the recent past. The system is called
source path isolation engine (SPIE). The SPIE uses an ef-
Ô¨Åcient method to store information about packets travers-
ing through a particular router. The method uses n bits of
the hashed value of the packet to set an index of a 2n-bit
digest table. When a victim detects an attack, a query is
sent to SPIE, which queries routers for packet digests of
the relevant time periods. Topology information is then
used to construct the attack graph from which the source
of the attack is determined.
2.2.2. Packet Marking
Instead of having routers send separate messages for the
sampled packets, Burch and Cheswick [5] propose to in-
scribe some path information into the header of the pack-
ets themselves. This marking can be deterministic or
probabilistic. In the deterministic marking, every router
marks all packets. The obvious drawback of the determin-
istic packet marking is that the packet header grows as the
number of hops increases on the path. Moreover, signif-
icant overhead will be imposed on routers to mark every
packet.
The probabilistic packet marking (PPM) encodes the
path information into a small fraction of the packets. The
assumption is that during a Ô¨Çooding attack, a huge amount
of trafÔ¨Åc travels towards the victim. Therefore, there is a
great chance that many of these packets will be marked
at routers throughout their journey from the source to
the victim. It is likely that the marked packets will give
enough information to trace the network path from the
victim to the source of the attack.
Savage et al. [21] describe efÔ¨Åcient mechanisms to en-
code the path information into packets. This information
contains the XOR (exclusive OR) of two IP addresses and
a distance metric. The two IP addresses are for the start
and the end routers of the link. The distance metric rep-
resents the number of hops between the attacker and the
victim. To illustrate the idea, consider the attacker A1 and
the victim V in Figure 1. Assume there is only one hop
between routers R3 and R4: If Router R1 marks a packet,
it will encode the XOR of R1 and R2 addresses into the
packet and sets the distance metric to zero, that is, it will
encode the tuple . Other routers on the
path just increase the distance metric of this packet, if they
don‚Äôt decide to mark it again. When this packet reaches
the victim, it provides the tuple . Similarly,
some packets may get marked at routers R2; R3; R4; R5;
and R6 and they will provide the tuples ;
; ; ;
; respectively, when they reach the victim. The
victim can retrieve all routers on the path by XORing
the collected messages sorted by distance.
(Recall that
Rx (cid:8) Ry (cid:8) Rx = Ry.) This approach can reconstruct
most network paths with 95% certainty if there are about
2,000 marked packets available and even the longest path
can be resolved with 4,000 packets [21]. For DoS attacks,
this amount of packets is clearly obtainable because the
attacker needs to Ô¨Çood the network to cause a DoS attack.
(Moore et al. [16] report that some severe DoS attacks had
a rate of thousands of packets per second.) The authors
describe ways to reduce the required space and suggest
to use the identiÔ¨Åcation Ô¨Åeld (currently used for IP frag-
mentation) of IP header to store the encoding of the path
information. They also propose solutions to handle the
co-existence of marking and fragmentation of IP packets
[21].
The main limitation of the PPM approaches stems from
the fact that, nothing prevents the attacker from marking
packets. If a packet marked by the attacker does not get
re-marked by any intermediate router, it will confuse the
victim and make it harder to trace the real attacker. Park
and Lee [17] show that for single-source DoS attacks,
PPM can identify a small set of sources as potential can-
didates for a DoS attack. For DDoS attacks, however, the
attacker can increase the uncertainty in localizing the at-
tacker. Therefore, PPM is vulnerable to distributed DoS
attacks [17].
2.3. Prevention Approaches
Preventive approaches try to stop a DoS attack by iden-
tifying the attack packets and discarding them before
reaching the victim. We summarize several packet Ô¨Ålter-
ing techniques that achieve this goal.
2.3.1. Ingress Filtering
Incoming packets to a network domain can be Ô¨Åltered by
ingress routers. These Ô¨Ålters verify the identity of pack-
ets entering into the domain, like an immigration security
system at the airport. Ingress Ô¨Åltering, proposed by Fargu-
son and Senie [10], is a restrictive mechanism that drops
trafÔ¨Åc with IP address that does not match a domain preÔ¨Åx
connected to the ingress router. As an example, in Figure
1, the attacker A1 resides in domain D1 with the network
preÔ¨Åx a.b.c.0/24. The attacker wants to launch a DoS at-
tack to the victim V that is connected to domain D4. If the
attacker spoofs the IP address of host H5 in domain D5,
which has the network preÔ¨Åx x.y.z.0/24, an input trafÔ¨Åc
Ô¨Ålter on the ingress link of R1 will thwart this spooÔ¨Ång.
R1 only allows trafÔ¨Åc originating from source addresses
within the a.b.c.0/24 preÔ¨Åx. Thus, the Ô¨Ålter prohibits an
attacker from using spoofed source addresses from outside
of the preÔ¨Åx range. Similarly, Ô¨Åltering foils DDoS attacks
that employ reÔ¨Çectors. In Figure 1, ingress Ô¨Ålter of D2
will discard packets destined to the reÔ¨Çector H3 and spec-
ifying V 0s address in the source address Ô¨Åeld. Thus, these
packets will not be able to reach the reÔ¨Çector.
Ingress Ô¨Åltering can drastically reduce the DoS attack
by IP spooÔ¨Ång if all domains use it. It is hard, though,
to deploy ingress Ô¨Ålters in all Internet domains. If there
are some unchecked points, it is possible to launch DoS
attacks from that points. Unlike ingress Ô¨Ålters, egress Ô¨Ål-
ters [13] reside at the exit points of a network domain and
checks whether the source address of exiting packets be-
long to this domain. Aside from the placement issue, both
ingress and egress Ô¨Ålters have similar behavior.
2.3.2. Route-based Filtering
Park and Lee [18] propose route-based distributed packet
Ô¨Åltering, which rely on route information to Ô¨Ålter out
spoofed IP packets. For instance, suppose that A1 be-
longs to domain D1 and is attempting a DoS attack on
V that belongs to domain D4. If A1 uses the spoofed ad-
dress H5 that belongs to domain D5, the Ô¨Ålter at domain
D1 would recognize that a packet originated from domain
D5 and destined to V should not travel through domain
D1. Then, the Ô¨Ålter at D1 will discard the packet. Route-
based Ô¨Ålters do not use/store individual host addresses for
Ô¨Åltering, rather, they use the topology information of Au-
tonomous Systems (ASes). The authors of [18] show that
with partial deployment of route-based Ô¨Ålters, about 20%
in the Internet AS topologies, it is possible to achieve a
good Ô¨Åltering effect that prevents spoofed IP Ô¨Çows reach-
ing other ASes. These Ô¨Ålters need to build route informa-
tion by consulting BGP routers of different ASes. Since
routes on the Internet change with time [19], it is a chal-
lenge for route-based Ô¨Ålters to be updated in real time.
Finally, all Ô¨Ålters proposed in the literature so far fall
short to detect IP address spooÔ¨Ång from the domain in
which the attacker resides. For example, in Figure 1, if A1
uses some unused IP addresses of domain D1; the Ô¨Ålters
will not be able to stop such forged packets to reach the
victim V .
3. Monitoring to Detect Service Violations
and DoS Attacks
In this section, we show how network monitoring tech-
niques can be used to detect service violations and to infer
DoS attacks. We believe that network monitoring has the
potential to detect DoS attacks in early stages before they
severely harm the victim. Our conjecture is that a DoS
attack injects a huge amount of trafÔ¨Åc into the network,
which may alter the internal characteristics (e.g., delay
and loss ratio) of the network. Monitoring watches for
these changes and our proposed techniques can identify
the congested links and the points that are feeding them.
We describe the monitoring schemes in the context of a
QoS-enabled network, which provides different classes of
service for different costs. The schemes are also applica-
ble to best effort (BE) networks to infer DoS attacks, but
not to detect service violations because there is no notion
of service differentiation in BE networks.
To monitor a domain, we measure three parameters:
delay, packet loss ratio, and throughput. We refer to
these parameters collectively as the service level agree-
ment (SLA) parameters, since they indicate whether a user
is achieving the QoS requirements contracted with the net-
work provider. In our discussion, delay is the end-to-end
latency; packet loss ratio is deÔ¨Åned as the ratio of num-
ber of dropped packets from a Ô¨Çow2 to the total number of
packets of the same Ô¨Çow entered the domain; and through-
put is the total bandwidth consumed by a Ô¨Çow inside the
domain. Delay and loss ratio are good indicators for the
current status of the domain. This is because, if the do-
main is properly provisioned and no user is misbehaving,
the Ô¨Çows traversing through the domain should not expe-
rience high delay or loss ratio inside that domain.
It is
worth mentioning that delay jitter, i.e., delay variation, is
another important SLA parameter. However, it is Ô¨Çow-
speciÔ¨Åc and therefore, is not suitable to use in network
monitoring.
The SLA parameters can be estimated with the involve-
ment of internal (core) routers in a network domain or can
be inferred without their help. We describe both core-
assisted monitoring and edge-based (without involvement
of core routers) monitoring in the following subsections.
2A Ô¨Çow can be a micro Ô¨Çow with Ô¨Å ve tuples (addresses, ports, and
protocol) or an aggregate one that is a combination of several micro
Ô¨Çows.
0
k
R
1
R2
Figure 2. Inferring loss ratio from the source 0
to receivers R1 and R2.
3.1. Core-based Monitoring
A core-based monitoring scheme for QoS-enabled net-
work is studied in [11]. In this scheme, the delay is mea-
sured by having the ingress routers randomly copy the
header of some of the incoming packets. The copying
depends on a pre-conÔ¨Ågured probability parameter. The
ingress router forms a probe packet with the same header
as the data trafÔ¨Åc, which means that the probe packet will
likely follow the same path as the data packet. The egress
router recognizes these probe packets and computes the
delay.
This monitoring scheme measures the loss ratio by col-
lecting packet drop counts from core routers. It then con-
tacts the ingress routers to get the total number of packets
for each Ô¨Çow. The loss ratio is computed from these two
numbers. To measure the throughput, the scheme polls the
egress routers. The egress routers can provide this infor-
mation because they already maintain this information for
each Ô¨Çow. This scheme imposes excessive overhead on
the core routers, therefore, it is not scalable. Other moni-
toring schemes that involve both core and edge routers are
proposed in the literature, see for example [4, 7, 8].
3.2. Edge-based Monitoring
We describe two edge-based monitoring schemes:
stripe-based and distributed. Both schemes measure delay
and throughput using the same techniques as the previous
core-based scheme. They differ, however, in measuring
the packet loss ratio.
Stripe-based Monitoring. The stripe-based scheme in-
fers loss ratio inside a domain without relying on core
routers. We show how to infer loss ratios for unicast traf-
Ô¨Åc as explained in [9] and refer the reader to [6] for the
multicast trafÔ¨Åc case. The scheme sends a series of probe
packets, called a stripe, with no delay between them. Usu-
ally, a stripe consists of three packets. To simplify the dis-
cussion, consider a two-leaf binary tree spanning nodes 0,
k, R1, R2, as shown in Figure 2. The loss ratio of the link
k ! R1, for instance, can be estimated by sending stripes
from the root 0 to the leaves R1 and R2. The Ô¨Årst packet
of a 3-packet stripe is sent to R1, while the last two are
sent to R2. If a packet reaches to any receiver, we can in-
fer that the packet must have reached the branching point
k. Further, if R2 gets the last two packets of a stripe, it is
likely that R1 receives the Ô¨Årst packet of that stripe. The
packet loss probability is calculated based on whether all
packets sent to R1 and R2 reach their destination. Simi-
larly, the loss ratio of the link k ! R2 is inferred using
a complementary stripe, in which the Ô¨Årst packet is sent
to R2 and the last two are sent to R1. The loss ratio of
the common path from 0 ! k can be estimated by com-
bining the results of the previous two steps. For general
trees, this inference technique sends stripes from the root
to all ordered pairs of the leaves of the tree. Finally, this
technique is extended in [11] for routers with active queue
management in a QoS domain.
Distributed Monitoring. The distributed monitoring ap-
proach is proposed in [12] to further reduce the monitoring
overhead. In this mechanism, the edge routers of a domain
form an overlay network on top of the physical network.
Figure 3(a) shows the spanning tree of the domain‚Äôs topol-
ogy. The edge routers form an overlay network among
themselves, as shown in Figure 3(b). This overlay is used
to build tunnel for probe packets on speciÔ¨Åed paths. The
internal links for each end-to-end path in the overlay net-
work are shown in Figure 3(c). In the distributed moni-
toring approach, an SLA monitor sits at any edge router.
The monitor probes the network regularly for unusual de-
lay patterns. The delay and throughput measurements are
the same as described in stripe-based scheme. The two
schemes differ in measuring loss. Since service violation
can be detected without exact loss values, we need only to
determine whether a link has higher loss than the speciÔ¨Åed
threshold or not. The link with high loss is referred to as a
congested link. The goal of the distributed monitoring is
to detect all congested links.
When delay goes high, the SLA monitor triggers agents
at different edge routers to probe for loss. Each edge
router probes its neighbors. Let X(cid:26) be a boolean random
variable that represents the output of probe (cid:26). X(cid:26) takes on
value 1 if the measured loss exceeds the threshold in any
link throughout the probe path, and takes on 0 otherwise.
For example, if the outcome of E1 ! E3 probing path
is 1, it means either E1 ! C1, C1 ! C3, C3 ! E3,
or a combination of them is congested. If the outcome is
0, then deÔ¨Ånitely all internal links are not congested. In
this way, we write equations to express all internal links
in terms of the probe outcomes. Solving these equations
and identifying the congested links are detailed in [12].
The distributed monitoring scheme requires less num-
ber of total probes, O(n), compared to the stripe-based
E1
C1
C2
C5
E2
C3
C4
E3
E4
E6
E7
E5
E3
E4
E1
E1
C1
C3
C2
E2
E2
E3
C4
C5
E6
E7
E5
E4
E6
E7
E5
Edge Router
Core Router
Peers (Edge Router)
Edge Router
Core Router
(a) The spanning tree of the domain‚Äôs
topology.
(b) An overlay constructed over all edge
routers.
(c) Direction of probing the internal
links.
Figure 3. Network monitoring using the distributed mechanism.
scheme, which requires O(n2); where n is the number of
edge routers in the domain. The distributed scheme is able
to detect violation in both directions of any link in the
domain, whereas the stripe-based can detect a violation
only if the Ô¨Çow direction of the misbehaving trafÔ¨Åc is the
same as the probing direction from the root. To achieve
same ability like distributed one, the stripe-based needs to
probe the whole tree from several points, which increases
the monitoring overhead substantially.
3.3. Violation and DoS Detection
In both the stripe-based and distributed-based monitor-
ing schemes, when delay, loss, and bandwidth consump-
tion exceed the pre-deÔ¨Åned thresholds, the monitor de-
cides on possible SLA violation. The monitor knows the
existing trafÔ¨Åc classes and the acceptable SLA parameters
per class. High delay is an indication of abnormal behav-