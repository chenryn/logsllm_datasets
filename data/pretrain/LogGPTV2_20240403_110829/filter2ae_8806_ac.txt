随后`gtr_sync`使用0x201400指令退出了`EL1_Guard level`，转而执行`el1
_fleh_synchronous`函数，这是el1内核异常处理的主要函数，这说明`EL1_Guard
level`的主要处理逻辑会使用el1内核代码，这也就解释了ppl为什么能保护内核态和用户态的数据。以前我们在使用el2做保护时，只能保护el1的数据，因为el1的使用的代码和数据都已经是映射好的，而el0层用户的代码和数据会涉及到很多缺页异常处理的逻辑，比如页表不存在，或者页表被交换到磁盘上，这会使el2的异常处理逻辑非常复杂。`EL1_Guard
level`使用el1内核代码的处理逻辑就简化了自身的代码逻辑，性能也会提升不少。
    __TEXT_EXEC:__text:FFFFFFF0081315CC _fleh_synchronous
    BL        _sleh_synchronous
`_fleh_synchronous`又调用了`_sleh_synchronous`，这个函数是异常处理逻辑的主要处理函数。
    CMP       X26, XZR
    B. EQ       loc_FFFFFFF00813161C
注意`_fleh_synchronous`是el1内核代码的处理逻辑，`EL1_Guard
level`是借用了它的代码，在前面看到`gtr_sync`把x26设置为了1，在`_fleh_synchronous`函数里表示此次请求来自`EL1_Guard
level`。
    MOV       X15, #0
    MOV       W10, #3
    DCB 0x20, 0x14, 0x20, 0
然后将x15设置为0，w10设置为3，最后调用0x201420再次进入`EL1_Guard
level`，此时就会跳转到`_ppl_trampoline_start`的异常处理请求路径里：
    CMP       W9, #3  ; PPL_STATE_EXCEPTION
    B.NE       loc_FFFFFFF00980D9AC
    CMP       W10, #3 ; PPL_STATE_EXCEPTION
    B.NE       loc_FFFFFFF00980D9AC
    MOV       W9, #1
    STR       W9, [X12,#0x18] ; PPL_STATE_DISPATCH
    LDR       X0, [X12,#0x10] ; _pmap_cpu_data_array->save_area
    MOV       SP, X0
    B        _return_to_ppl
`_return_to_ppl`恢复`EL1_Guard level`异常处理时保存的全部寄存器值，恢复cpsr,
`ELR_EL1`设置原来的调用地址，恢复bp,sp，通过eret返回原来的el1路径中。
## ppl服务
`_ppl_handler_table`数组保存的是ppl服务函数地址。
    _ppl_handler_table：
    _arm_force_fast_fault_internal
    _mapping_free_prime_internal
    _phys_attribute_clear_internal
    _phys_attribute_set_internal
    _pmap_batch_set_cache_attributes_internal
    _pmap_change_wiring_internal
    _pmap_create_options_internal
    _pmap_destroy_internal
    _pmap_enter_options_internal
    _pmap_find_pa_internal
    _pmap_insert_sharedpage_internal
    _pmap_is_empty_internal
    _pmap_map_cpu_windows_copy_internal
    _pmap_mark_page_as_ppl_page_internal
    _pmap_nest_internal
    _pmap_page_protect_options_internal
    _pmap_protect_options_internal
    _pmap_query_page_info_internal
    _pmap_query_resident_internal
    _pmap_reference_internal
    _pmap_remove_options_internal
    _pmap_return_internal
    _pmap_set_cache_attributes_internal
    _pmap_set_nested_internal
    _pmap_set_process_internal
    _pmap_switch_internal
    _pmap_switch_user_ttb_internal
    _pmap_clear_user_ttb_internal
    _pmap_unmap_cpu_windows_copy_internal
    _pmap_unnest_options_internal
    _pmap_footprint_suspend_internal
    _pmap_cpu_data_init_internal
    _pmap_release_ppl_pages_to_kernel_internal
    _pmap_set_jit_entitled_internal
    _pmap_load_legacy_trust_cache_internal
    _pmap_load_image4_trust_cache_internal
    _pmap_is_trust_cache_loaded_internal
    _pmap_lookup_in_static_trust_cache_internal
    _pmap_lookup_in_loaded_trust_caches_internal
    _pmap_cs_cd_register_internal
    _pmap_cs_cd_unregister_internal
    _pmap_cs_associate_internal
    _pmap_cs_lookup_internal
    _pmap_cs_check_overlap_internal
    _pmap_iommu_init_internal
    _pmap_iommu_iovmalloc_internal
    _pmap_iommu_map_internal
    _pmap_iommu_unmap_internal
    _pmap_iommu_iovmfree_internal
    _pmap_iommu_ioctl_internal
    _pmap_iommu_grant_page_internal
    _pmap_update_compressor_page_internal
    _pmap_trim_internal
    _pmap_ledger_alloc_init_internal
    _pmap_ledger_alloc_internal
    _pmap_ledger_free_internal
    _pmap_sign_user_ptr_internal
    _pmap_auth_user_ptr_internal
    _phys_attribute_clear_range_internal
可以看到ppl服务代码是非常复杂的，覆盖了物理内存和虚拟内存管理的方方面面。
### _pmap_mark_page_as_ppl_page_internal
我们先看下如何将一个物理页标记为ppl使用的物理页。
    _pmap_mark_page_as_ppl_page_internal：
    MOV       X19, X0
    ADRP       X23, #_vm_first_phys@PAGE ; x0(pa) > vm_first_phys && x0 tte`，这个页表保存的是内核使用的页表地址，在内核启动时进行初始化。然后找到虚拟地址对应的l3
table地址，
循环遍历它的每个页表项，在这之前还需要将虚拟地址转换为物理地址，然后找到物理地址对应的`pv_head_table`表项，将其上锁。然后开始提取l3页表项的原始权限，请看如下代码逻辑：
    LDR       X8, [X20] ; 获得pte的内容
    TBZ       W8, #1, loc_FFFFFFF007B598C4 ;判断页表有效位
    TBNZ       X8, #0x34, loc_FFFFFFF007B598FC ; '4' ; ARM_PTE_HINT_MASK
    LSR       X9, X8, #4 
    AND       X9, X9, #0xC ; (*pte >> 4) & 0xc; 提取ap权限
    LSR       X10, X8, #0x35 ; '5' ; *pte >> 53，提取xn和pxn权限
    BFXIL      X9, X8, #0x35, #1 ; '5'
    AND       X10, X10, #2 ; (*pte >> 53) & 2
    ORR       X9, X9, X10
    CMP       X9, X26 ; 与函数的第三个参数expected_perm比较
    B. NE       loc_FFFFFFF007B59938
通过上面的提取后获得一个4bit的权限值，高2位代表ap权限，最低位代表pxn权限，第2bit代表xn权限。
所以可以推断出ppl新的权限模型为4个bit：
    new_perm
    X XXX
                /  /  \ \
    /  /     \ \
           54  53      7  6
    +-------------------------------------------------------    
    |      |xn|pxn| ...  |ap| |          |
    --------------------------------------------------------
El1和`EL1_Guard level`对应的权限关系可以参考m1n1的dock：
    HW: SPRR and GXF · AsahiLinux/docs Wiki · GitHub
通过搜索代码，发现有以下几个函数调用了`_pmap_set_range_xprr_perm`：
    _pmap_mark_page_as_kernel_page:
    MOV       W2, #1
    MOV       W3, #3
    B        _pmap_set_range_xprr_perm
    _pmap_mark_page_as_ppl_page_internal:
    MOV       W2, #3
    MOV       W3, #1
    BL        _pmap_set_range_xprr_perm
可以看到将普通的内核权限转化为ppl权限，是将3替换为1。反过来则是1替换为3。我们可以推测3为RW读写权限，1则为R只读权限。
    _pmap_static_allocations_done:
    MOV       W2, #3
    MOV       W3, #0xB
    BL        _pmap_set_range_xprr_perm
将`_bootstrap_pagetables`从0x3设置为0xb，`_bootstrap_pagetables`是内核启动时用到的临时页表。
    MOV       W2, #3
    MOV       W3, #1
    BL        _pmap_set_range_xprr_perm ;
将`_BootArgs`从0x3设置为0x1，`_BootArgs`是iboot加载内核时传给内核的参数。
    MOV       W2, #0x3
    MOV       W3, #1
    BL        _pmap_set_range_xprr_perm ;
将`_segPPLDATAB`从0x3设置为0x1，`_segPPLDATAB`为ppl的data段。
    MOV       W2, #0xA
    MOV       W3, #0x8
    BL        _pmap_set_range_xprr_perm ;
将`_segPPLTEXTB`从0xA设置为0x8，`_segPPLTEXTB`为ppl的text段。
    MOV       W2, #0xB
    MOV       W3, #0xB
    BL        _pmap_set_range_xprr_perm ;
将`_segPPLDATACONSTB`从0xB设置为0xB，`_segPPLDATACONSTB`为ppl的dataconst段。
    MOV       W2, #0x1
    MOV       W3, #0xB
    BL        _pmap_set_range_xprr_perm ;
将`_pmap_stacks_start_pa`从0x1设置为0xB，`_pmap_stacks_start_pa`为ppl使用的stack区域。
    _pmap_ledger_alloc_internal:
    MOV       W2, #1
    MOV       W3, #3
    BL        _pmap_set_range_xprr_perm ;
    _pmap_load_image4_trust_cache_internal:
    MOV       W2, #0xB
    MOV       W3, #1
    BL        _pmap_set_range_xprr_perm
    MOV       W2, #1
    MOV       W3, #0xB
    BL        _pmap_set_range_xprr_perm
    ### _pmap_release_ppl_pages_to_kernel_internal
它与`_pmap_mark_page_as_ppl_page_internal`是一个相反的操作，读者朋友可以自行阅读相关代码。
* * *