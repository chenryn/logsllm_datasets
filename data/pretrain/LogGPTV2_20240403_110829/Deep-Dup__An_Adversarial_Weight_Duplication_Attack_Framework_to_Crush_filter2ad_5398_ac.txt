5.2 P-DES Searching Algorithm
This section delineates the proposed vulnerable weight
searching algorithm, called Progressive Differential Evolu-
tion Search (P-DES), to generate a set of weight data package
index for AWD to attack, given attack objective. To formally
deﬁne the problem, let us ﬁrst consider a L layer network with
weight parameters-W L
l=1. Then, the after-attack (i.e. perturbed)
weight of the target DNN model executed in FPGA will be-
come ˆW L
l=1. We model different attack objectives aiming to
minimize the difference between W L
l=1 for deriving
the minimal number of required AWD attacks performing
both deﬁned un-targeted and targeted attack objectives.
l=1 and ˆW L
To clearly describe the searching algorithm, we start from
modeling of white-box attack, assuming attacker knows the
exact model parameters (i.e. weight values and architecture).
The black-box attack will leverage a similar searching algo-
rithm and its corresponding adaption will be described in the
end-to-end attack framework section. We assign each weight
package in the target DNN with two indexes (p, q); where p
denotes the layer index and q denotes the index of weight at
layer p after ﬂattening the weight matrix W (W ∈ Rm×n×a×kw)
into a 1D array. Note that, here the weight package refers to
one data package that is transmitted in one clock cycle. In the
following, we may just call it weight for simpliﬁcation. The
proposed search algorithm is general and applicable for both
attack objectives described in Sec. 4.
P-DES is a progressive search algorithm integrating with
the concept of differential evolution [84–86]. The goal is to
progressively search for one weight index at each iteration
to guide AWD attack until the attacker-deﬁned malicious ob-
jective is satisﬁed. The ﬂow chart of the proposed P-DES is
shown in Fig. 5. For nthiteration, it starts by initializing a set
of random weight candidates (i.e. population set - S) for at-
tacker to perform AWD attack and evaluate each attack effect
(i.e. ﬁtness function) at current iteration. Then it runs through
a succession of evolutionary steps: mutation, crossover and
selection for z times (known as the number of evolution, ’500’
in this work) to gradually replace original candidates with bet-
1924    30th USENIX Security Symposium
USENIX Association
TDC sensorEnablePower-plundering circuitTriggering BRAMAttacker zoneTriggering strategy file2100…0011111000…Victim zoneFPGAtriggering delaytriggering periodtargetindexStarting pointprofiling……weight transmission periodYOLOv2 timing diagram…0011111000……0011111000…Start nth iteration
(n+1)th 
iteration
Initialization Step                                                                                                                                        
No
Fitness Function Evaluation                                                                                                                                       
Terminate
where Lu is un-taregeted attack loss and Lt is targeted at-
tack loss. Note that, the after each evaluation of Fl, attacker
needs to restore the original weight values W by reloading
the weights, to guarantee each ﬁtness function is evaluated
only based on one corresponding attack weigh index.
i = i +1
NO
Crossover Step                                                                                                                                        
Selection Step                                                                                                                                        
set S
Perform AWD 
Attack at 
Winner Index 
with Best F in 
Start a Loop: i =1
Attack 
YES
Objective 
Satisfied?
Select the ith weight in set S                                                                                                                                      
Mutation Step                                                                                                                                        
Mutation Step. For each weight index candidate in pop-
ulation set S, the mutation step generates new candi-
dates using speciﬁc mutation strategy to improve cur-
rent population set. In this work, we integrate four pop-
ular mutation strategies [87, 88], where each one gener-
ates one mutant vector. Thus, a mutant vector ( {pmut , qmut }
={(pmut1 , qmut1);(pmut2 , qmut2);(pmut3 , qmut3);(pmut4 , qmut4} ))
is generated for each weight index candidate:
Strategy 1:
pmut1 = pa + α1(pb − pc);
qmut1 = qa + α1(qb − qc)
Strategy 2:
pmut2 = pa + α1 × (pb − pc) + α2 × (pd − pe);
qmut2 = qa + α1 × (qb − qc) + α2 × (qd − qe)
Strategy 3:
(5)
(6)
(7)
(8)
pmut3 = pa + α1(pbest − pa) + α2(pb − pc) + α3(pd − pe);
(9)
qmut3 = qa + α1(qbest − qa) + α2(qb − qc) + α3(qd − qe)
(10)
Strategy 4:
pmut4 = pa + α1(pbest − pworst );
qmut4 = qa + α1(qbest − qworst )
(11)
(12)
α2 ,
where α1 ,
α3 are the mutation factors sampled randomly
in the range of [0,1] [87]. a, b, c, d , e are random numbers (a 6=
b 6= c 6= d 6= e) generated in the range of [0,z]. (pbest , qbest )
and (pworst , qworst ) are the indexes with the best and worst
ﬁtness function values. Note that, both p and q for each layer
are normalized to the range of [0,1], which is important since
the amount of weights at each layer is different.
Crossover Step.
In the crossover step, attacker mixes each
mutant vector (pmut , qmut ) with current vector (pi , qi) to gen-
erate a trial vector(ptrail , qtrial):
i f pmut ∈ [0, 1] : ptrial = pmut ;
i f qmut ∈ [0, 1] : qtrial = qmut ;
else : ptrial = pi
else : qtrial = qi
(13)
(14)
The above procedure guarantees attacker only chooses
the mutant feature with a valid range of [0,1]. Then,
the ﬁtness function is evaluated for each trial vector (i.e.,
Ftrial1,Ftrial2,Ftrial3,Ftrial4). This crossover step ensures the at-
tacker can generate a diverse set of candidates to cover most
of the DNN weight search space.
Is it the zth evolution?
YES
Figure 5: Overview of proposed adversarial weight index
searching (P-DES) algorithm.
ter ones for achieving the attacker deﬁned malicious objective.
When z times evolution is ﬁnished in one search iteration, the
attacker picks one best candidate (weight index with highest
ﬁtness function value- F) among the ﬁnal survived population
set S and conduct an AWD attack on this winner weight loca-
tion to duplication data package as described in the previous
sub-section. The detailed description of each step is as follow:
Initialization Step. As described above, the objective of
differential evolution is to improve population set S over time
to gradually reach the attacker-deﬁned malicious objective.
To initialize, S will start with a set of random values, con-
taining z weights whose indexes located at (pl , ql) ; where
l = 1, 2, 3, .., z. Here, z is the size of S, deﬁned as the num-
ber of evolution. Ideally, a larger population set (i.e., higher
z) would result in a better attack performance at the cost of
increased searching time.
Fitness Function Evaluation. Fitness function - Fl is an
important step of an evolutionary algorithm to evaluate the
attack effect of each proposed candidate in the population set
S. In our Deep-Dup attack, as deﬁned in Eq. 1 and Eq. 2, we
assign the DNN loss function as ﬁtness function. Thus we
could evaluate the attack effect (i.e. Fl) of each candidate in
set S in terms of DNN loss. Note that, for a white-box attack,
such evaluation (i.e. ﬁtness function) could be computed in an
off-line replicated model. For black-box attack, the loss will
be directly evaluated in FPGA by conducting AWD attack
in the proposed candidate index pointed data package clock.
In the next sub-section, a detailed Deep-Dup framework for
both white-box and black-box attacks will be discussed. In
P-DES, the attacker’s goal is to maximize the ﬁtness function
- Fl to achieve un-targeted (Eq. 1) or targeted attack (2):
Fl ∈ {Lu ,
Lt }
(4)
USENIX Association
30th USENIX Security Symposium    1925
Selection Step. The selection step selects only the best can-
didate (i.e. winner with the highest ﬁtness function value)
between the trial vector set ({ptrial , qtrial} with four trial vec-
tors) and current candidate (pi , qi). Then, the rest four will
be eliminated. The above discussed mutation, crossover and
selection will repeat z times to cover all candidates in the pop-
ulation set S. As a result, the initial randomly proposed S will
evolve over time to gradually approach the attacker-deﬁned
malicious objective. When z times evolution is ﬁnished, the
attacker could perform AWD attack at the winner (with the
highest ﬁtness function value in S) weight package during
transmission. P-DES will check if the attack objective has
been achieved. If yes, it stops. If not, it goes to the next itera-
tion for a new round of attack iteration.
5.3 End-to-End Deep-Dup Attack
This sub-section discusses the proposed end-to-end Deep-Dup
attack framework integrating training software (i.e. search-
ing) utilizing P-DES algorithm and hardware fault injection
through AWD, i.e. fault triggering. We also experimentally
demonstrate the success of our end-to-end attack framework
from the attacker’s input end to the victim’s output end for
white-box and black-box attack. Note that, the fault injection
reliability (i.e. fault injection success rate) and detection anal-
ysis will be discussed in detail in the experimental section
7.1 and 7.5. The main mechanism of our Deep-Dup attack
framework could succeed even with real-world un-reliable
hardware fault injection (i.e., with probability to succeed) is
based on the fact that the vulnerable weight sets that our P-
DES searching algorithm identiﬁes are not static or unique,
meaning the targeted attack index set could be progressively
expanded based on real measured attack effect, for the same
malicious objective. This is possible due to that deep learn-
ing model parameter training is a high dimension optimiza-
tion process and many different fault injection combinations
could lead to the same effect, which is also observed in prior
works [27, 28, 89]. Thus, our proposed progressive evolution-
ary searching algorithm could take care of such fault injection
uncertainty and randomness through redundant attack itera-
tions to greatly improve the overall attack success rate, which
is also experimentally validated in Sec.7.3 and 7.5.
5.3.1 White-Box Attack Framework
Training through P-DES. As we discussed in the threat
model, white-box attack assumes adversary knows all the
details of target DNN model in victim FPGA, including archi-
tecture, weight values, gradients, weight package transmission
over FPGA I/O protocol IP. . As shown in Fig. 6, knowing
these execution details of the target DNN model, the adver-
sarial can build an off-line simulator (i.e. model replicate) to
emulate the execution of target DNN in FPGA. Meanwhile,
prior proﬁling should be conducted to estimate the fault injec-
tion success rate f p (84.84% and 58.91% for our measured
RO and LRO based power plundering circuits), which will
add randomness to the off-line simulated fault-injected DNN
model and thus the ﬁtness function evaluation (Eq.4). Note
that, this f p does not need to be very accurate. In general,
smaller f p will force the progressive P-DES algorithm to gen-
erate a more redundant attack index to compensate for higher
uncertainty of fault injection. More experiment results demon-
strating the co-relation between f p and attack iterations are
provided in Sec. 7.5 (Tab. 5). With the help of this off-line
simulator, the P-DES searching algorithm will generate the at-
tack index 1 , i.e. model weight package index to be attacked
during data communication.
Triggering AWD. In the next step 2 , the P-DES gener-
ated attack index will be sent to our AWD triggering system to
implement actual fault injection on those locations to achieve
the deﬁned malicious objective. More details of triggering
system implementation are described in Sec.5.1.4. To summa-
rize, the attacker proﬁles the targeted DNN weight package
indexes through the TDC sensor and embeds the received
attack index from the last step into the attacking strategy
ﬁle (Fig. 4), which automatically triggers and controls the
power-plundering circuits to implement the fault injection in
the designed locations. After that, if the attack objective is
not achieved (i.e., due to un-successful fault injection), the
attacker will repeat the steps 1 and 2 to re-generate a more
redundant attack index until successful.
5.3.2 Black-Box Attack Framework
Fig. 7 shows the overview of Deep-Dup black-box attack
framework. Instead of constructing an off-line replicate to
search vulnerable weights in white-box attack, in black-box
attack, Deep-Dup directly utilizes run-time victim DNN in
target FPGA to evaluate the attack effectiveness (i.e. ﬁtness
function) of our searching algorithm P-DES proposed weight
candidate in mutation step for every attack iteration. Thus,
the un-reliable fault injection phenomenon is automatically
considered and evaluated in the framework since the ﬁtness
function is directly evaluated in the victim FPGA using the
real fault injection attack.
In this black-box setting, for every attack iteration, the at-
tacker ﬁrst utilizes the mutation function deﬁned in our P-DES
algorithm to propose a potential attack index candidate 1 .
Next, it will be sent to the AWD triggering component (Fig.4)
to implement fault injection 2 in current evolution. There-
fore, the current DNN model in FPGA is executed based on
the fault-injected model, where its DNN output 3 will be
read out by the attacker to be recorded as attack effectiveness
(i.e. ﬁtness function evaluation). Note that, during this pro-
cess, the fault injection may succeed, or not. As for an attacker,
since it is a black-box, he/she does not know about it. Only the
victim DNN output response w.r.t. currently proposed attack
index will be recorded and sent back to our P-DES software.
Then, this step 1 - 2 - 3 will repeat z evolution times to select
one winner attack index to ﬁnish the current attack iteration.
After that, a new attack iteration will be started to ﬁnd the
next winner attack index until the deﬁned attack objective is
achieved.
1926    30th USENIX Security Symposium
USENIX Association
White-Box Deep Dup Attack Fr amewor k
FPGA Accelarator 
Running DNN
Training 
Attack Index
 Triggering             
Injecting  Fault
P-DES
1
AWD
2
More Attack Iteration