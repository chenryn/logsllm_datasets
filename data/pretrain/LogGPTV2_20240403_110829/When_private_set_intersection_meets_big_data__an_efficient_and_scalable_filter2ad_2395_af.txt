# Bandwidth Consumption and Performance Comparison of PSI Protocols

## Bandwidth Consumption: 256-bit Security
### Figure 5: Bandwidth Consumption Comparison
- **Set Size**: 262144
- **Bandwidth Consumption**: 0.1024 GB (for 256-bit security)

## Performance Evaluation and Comparison

We compared our protocol with two other semi-honest Private Set Intersection (PSI) protocols:
1. **De Cristofaro’s RSA-OPRF Protocol** (implemented in C)
2. **Huang’s Sort-Compare-Shuffle with Waksman Network Protocol** (implemented in Java)

These protocols were previously the fastest, and their code has been optimized by the authors.

### Testing Environment
- **Hardware and OSes**: The same as used for our protocol.
- **De Cristofaro’s C Implementation**:
  - Compiled with OpenSSL 1.0.1e and GMP 5.1.1 using gcc.
  - RSA public exponent set to 3.
- **Huang’s Java Code**:
  - Run using Java 1.7.0_12.
  - Element bit length set to 32.

### Performance Measurement
- **Total Running Time**: Measured for all protocols.
- **De Cristofaro’s Code**: Outputs running time directly.
- **Huang’s Code**: Running time measured for the `execution()` function in the `Program` class.

### Results
- **Table 3** shows that in all settings, both modes of our protocol outperform the other two protocols.
- **Pipelined Mode**: Both De Cristofaro’s and Huang’s implementations use pipelining, similar to our pipelined mode, allowing direct comparison.
- **Performance at 80-bit Security**:
  - De Cristofaro’s protocol is close to ours and faster than Huang’s.
- **Performance at 256-bit Security**:
  - De Cristofaro’s protocol becomes significantly slower due to its reliance on public key operations.
  - Our protocol and Huang’s rely more on symmetric key operations, making them faster.

### Specific Comparisons
- **Symmetric Key Operations**:
  - At 80-bit security with a 2^20 input size, our protocol requires 0.4 billion symmetric key operations, while Huang’s requires 8.5 billion.
- **Memory and Time Constraints**:
  - **De Cristofaro’s Protocol**: Skipped the test with 2^20 input size at 256-bit security due to an estimated 131-hour runtime.
  - **Huang’s Protocol**: JVM ran out of memory (16 GB) during testing with 2^20-element sets at 80-bit security. Estimated 27-hour runtime based on 2^18-element sets, which differs from the authors' reported 6 hours.

### Bandwidth Consumption
- **Figure 5** shows that:
  - Bandwidth consumption for De Cristofaro’s and our protocol is almost linear.
  - Our protocol consumes more bandwidth than De Cristofaro’s but less than Huang’s.

## Further Parallelization

### GPGPUs
- **Parallel Computing**: Modern GPUs provide ample computation cycles and high memory bandwidth.
- **Implementation**: We are implementing our protocol on top of OpenCL.
- **Preliminary Results**: On an ATI Radeon HD 5770, 1 million hash operations take 37.5 milliseconds, about 5 times faster than a single 2.4 GHz CPU core.

### Extremely Big Data Sets & Cloud Computing
- **Distributed Task Execution**: Our protocol can be deployed on cloud platforms.
- **MapReduce Implementation**:
  - **High-Level Overview**: Client and server use a hash function to distribute elements into bins. Each side builds Bloom filters and garbled Bloom filters for each bin.
  - **Parameter Determination**: Parameters k and m are determined by the desired false positive probability and bin size.
  - **Transfer and Query**: Server uses OT to transfer garbled Bloom filters to the client, who queries elements against these filters.
  - **MapReduce Example** (Figure 6): Depicts the MapReduce procedure with 3 bins, where the map function maps elements to key-value pairs, and the reduce function generates garbled Bloom filters.

## Conclusion and Future Work

- **Efficiency and Scalability**: Our protocol is highly efficient and scalable, utilizing symmetric key operations and parallel processing.
- **Future Work**: Ongoing prototyping on GPGPUs and MapReduce, with encouraging preliminary results.
- **Research Direction**: Investigate and design better data structures for more efficient cryptographic protocols.

## Acknowledgements
- **Support**: Changyu Dong and Zikai Wen are supported by grants from the University of Strathclyde.
- **Thanks**: To Emiliano De Cristofaro and Yan Huang for sharing their PSI source code, and to anonymous reviewers for their comments.

## References
[References listed here as per the original text]

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.