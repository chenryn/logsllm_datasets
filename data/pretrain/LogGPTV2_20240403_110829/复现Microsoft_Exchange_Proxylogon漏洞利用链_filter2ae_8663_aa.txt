# 复现Microsoft Exchange Proxylogon漏洞利用链
[Anthony Weems](https://www.praetorian.com/author/anthony-weems/) 和 [Dallas
Kaman](https://www.praetorian.com/author/dallas-kaman/) 于2021年3月9日发表
* * *
## 介绍
最近几周，在全球无处不在网络攻击中,微软已经检测多个0-day漏洞EXP用于攻击本地版本的Microsoft Exchange
Server。ProxyLogon是CVE-2021-26855的名称,它是一个存在于Microsoft Exchange
Server的漏洞，可以使攻击者绕过身份验证并模拟用户。在观察到的攻击中，威胁行动者使用该漏洞去访问本地Excange服务器，从而可以访问邮箱账号，并且安装了其他恶意软件对受害机器进行长期的控制。
Praetorian Labs team 团队对初始安全公告和后续补丁进行了逆向分析，成功地发现了功能全面的end to
end漏洞。把本文概述这样做的方法，但是有意地决定省略关键的概念验证组件以防止不成熟的参与者将漏洞武器化。尽管我们选择不发布完整的利用程序，但是我们知道在安全社区将不久会发布完整的利用程序。一旦剩下的步骤成为人尽皆知的知识，我们会更开放地讨论我们对于end-to-end的解决方案。我们相信之间的时间/天数将为我们的客户，公司和其他国家/地区提供更多时间来修补此严重漏洞。
Microsoft已快速开发并发布了脚本，指示工具和紧急的补丁程序，以帮助缓解这些漏洞。Microsoft安全响应中心[在此处](https://msrc-blog.microsoft.com/2021/03/05/microsoft-exchange-server-vulnerabilities-mitigations-march-2021/)已经发布了一篇博客文章，详细介绍了这些缓解措施。值得注意的是,URL重写模块可以成功地阻止利用无需紧急修补，并且被证明是应对Proxylogon的快速有效策略。然而，正如其他地方讨论那样，对Proxylogon的利用已经非常广泛，对于对外部提供服务的Exchange服务器的操控者来说，现在必须专注于事件响应和降低风险。
## 方法
对于逆向工程，我们实现了以下步骤,去使我们能够执行对Exchange和它的补丁静态与动态的分析。
  * 差异 **：** 查看易受攻击的版本和修补的版本之间的区别
  * **测试：** 部署易受攻击版本的完整测试环境
  * **观察：** 部署工具来了解典型的网络通信
  * **研究：** 遍历每个CVE，将补丁差异连接到网络流量，并构造概念验证exp
## 差异
通过检查补丁前的二进制文件和补丁后的二进制文件间的差异，我们可以确定进行了那些更改。然后对这些更改进行逆向分析，以帮助重现原始的bug。
[微软的更新目录](https://www.catalog.update.microsoft.com/)在获取补丁用于确定差异时很有帮助。快速搜索相关软件的版本会返回一个安全补丁汇总列表，我们使用这些列表将最新的安全补丁与其前身进行了比较。例如，通过搜索[“
Exchange Server 2013
CU23的安全更新”，](https://www.catalog.update.microsoft.com/Search.aspx?q=Security
Update For Exchange Server 2013 CU23)我们找到了特定版本的Exchange的修补程序。之所以选择Exchange
2013，是因为它是易受CVE-2021-26855攻击的Exchange版本的最小补丁集，因此最容易进行diff。
**Microsoft Update 更新目录有助于根据日期来排序,因此所需的文件是前两个条目**
* * *
首先,
我们下载最新的(3/2/2021)和以前的(12/2/2021)的安全更新汇总。通过从.cab文件提取.msp文件，并使用7zip去解压缩.msp文件，我们剩下了两个存放二进制文件的文件夹用于比较。
**.msp 更新包含了几百个二进制文件-大部分是.NET应用程序**
* * *
因为大多数二进制文件都是.NET应用程序，因此我们使用 [dnSpy](https://github.com/dnSpy/dnSpy)
去反编译为一系列源文件，为了加快分析的速度，我们自动反编译，并通过将每一个版本作为单独的提交到github进行比较，来使用github的源代码管理的比较功能。
> PS. 很棒的trick
**在Github上寻找差异有助于突出重要的变化，一目了然**
* * *
我们也发现有用的另一个寻找差异的工具选择是[Telerik’s
JustAssembly](https://www.telerik.com/justassembly)..
> _JustAssembly简洁地显示整个dll的更改_
* * *
准备工作完成后, 我们需要启动目标Exchange服务器再次进行测试。
## 测试
首先,我们使用Microsoft的[ADDSDeployment](https://docs.microsoft.com/en-us/powershell/module/addsdeployment/?view=win10-ps)模块来设置标准域控制器。然后，我们下载了相关的Exchange程序(ex: for Exchange 2013 CU23) 并且执行了标准的安装程序。
对于基于Azure的Excahnge环境，我们跟随[here](https://docs.microsoft.com/en-us/exchange/plan-and-deploy/deploy-new-installations/create-azure-test-environments?view=exchserver-2019)的步骤进行操作，将在"Install
Exchange"的步骤8中下载的安装程序替换为上面链接中找到的正确的Exchange安装程序。此外,我们修改了服务器配置脚本中的PowerShell代码以启动2012-R2
Datacenter服务器而不是2019 服务器版本
    $vm=Set-AZVMSourceImage -VM $vm -PublisherName MicrosoftWindowsServer -Offer `
    WindowsServer -Skus 2012-R2-Datacenter -Version "latest"
这样可以快速部署独立的域控制器和Exchange服务器， 并具有适当的网络安全组，以防止不必要的基于Internet的利用尝试。
## 观察
Microsoft
Exchange由几个后端组件组成，这些组件在服务器正常工作期间进行相互通信。从用户的角度来看，对前端Exchange服务器的请求将通过IIS流到Exchange
HTTP Proxy代理，后者评估mailbox路由逻辑，将请求发送到合适的后端服务器。如下图所示:
_Microsoft Exchange 2016客户端访问协议体系结构图（_
* * *
我们感兴趣的是观察从HTTP代理发送到Exchange后端的所有流量，因为其中包括来自真实服务的许多示例请求，以帮助我们更好地了解源代码和漏洞利用程序中的请求。Excahnge是部署在IIS上的，因此我们可以对Exchange的后端绑定做一个小修改，更新端口从444为4444。下一步，我们部署一个代理在444端口用来转发数据到新的绑定地址。
Exchange HTTP代理验证Exchange后端的tls证书,因此为了使我们的代理正常运行，我们想要导出计算机本地证书中的“ Microsoft
Exchange”证书。由于此证书的私钥在Exchange安装过程中被标记为不可导出，因此我们使用mimikatz提取了密钥和证书。
    mimikatz# privilege::debug
    mimikatz# crypto::certificates /export /systemstore:LOCAL_MACHINE
> PS.这里真的长知识了。
_使用mimikatz从我们的测试机中提取Exchange证书和密钥。_
* * *
手头有了证书和密钥，
我们使用了类似于socat的工具(一种多功能网络中继工具),去使用Exchange的证书监听端口444，并将链接中继到端口4444(实际的Exchange后端)。socat命令可能如下所示:
    # export the certificate and private key (password mimikatz)
    openssl pkcs12 -in 'CERT_SYSTEM_STORE_LOCAL_MACHINE_My_1_Microsoft Exchange.pfx' -nokeys -out exchange.pem
    openssl pkcs12 -in 'CERT_SYSTEM_STORE_LOCAL_MACHINE_My_1_Microsoft Exchange.pfx' -nocerts -out exchange.pem
    # launch socat, listening on port 444, forwarding to port 4444
    socat -x -v openssl-listen:4444,cert=exchange.pem,key=exchange-key.pem,verify=0,reuseaddr,fork openssl-connect:127.0.0.1:444,verify=0
配置了代理后，我们便开始正常使用Exchange来生成HTTP请求并了解有关这些内部连接的更多信息。此外，几个后端服务器进程将请求发送到端口444，从而使我们能够观察到定期的运行状况检查，Powershell远程处理请求等。
## 研究
尽管每个CVE都不同，但我们对特定CVE进行分类的一般方法包括五个阶段:
1.审查指标
2.查看补丁差异
3.联系指标与差异
4.关联代码路径与代理流量
5.发起请求触发代码路径
6.重复操作