ciﬁc types, like TYPE_NOTIFICATION_STATE_CHANGED, there
is no SourceNode property, which results in that assistive
apps cannot identify the original senders.
Impact. All assistive apps implementing the accessibility-
based notiﬁcation obtaining suffer from the security risk
of notiﬁcation phishing. This attack method and the design
shortcoming on custom AccessibilityEvent have been re-
ported to the Android security team and assigned tracking id
AndroidID-79268769. At present, they have acknowledged
our report and rewarded us with $200. They mentioned it
was also “reported by an internal Google engineer”. In other
words, they conﬁrmed we discovered the problem indepen-
dently. Also, a CVE-ID has been assigned – CVE-2018-9376.
Besides, after our report, the vulnerable app Super Status Bar
(com.firezenk.ssb) was removed from Google Play.
7 Discussions and Limitations
Here we discuss some attack conditions and the limitations
existing in our experiment and analysis.
Attacks without accessibility services. To the installation hi-
jacking attack, if the accessibility service is not presented,
the user will be involved in the installation process. To an
experienced user, she may notice the unusual permission re-
quests (see Figure 7(b)) and rejects the installation. To the
notiﬁcation phishing attack, if the accessibility service is not
presented, how to select the time of showing the phishing
(a) Original status bar (b) Phishing notiﬁcation (c) Phishing Activity
Figure 8: Notiﬁcation phishing attack.
stallations, such as Super Status Bar7 (com.firezenk.ssb),
Status (com.james.status), and Material Notiﬁcation Shade
(com.treydev.msb).
As an essential function, status bar apps need to obtain sys-
tem notiﬁcations and notify the user. After Android 4.3 (API
level 18), third-party apps could obtain system notiﬁcations
through the NotificationListenerService [15] with the
BIND_NOTIFICATION_LISTENER_SERVICE permission. How-
ever, for the devices equipped with old Android versions, the
only method of obtaining system notiﬁcations is to utilize
the accessibility service. Due to the Android fragmentation
problem and the consideration of backward compatibility,
this accessibility-based notiﬁcation obtaining method is still
very popular. This observation also has been conﬁrmed by
our study in the accessibility purpose analysis, say 30.8%
usage (see Section §4.3). Again, such implementation is not
designed for disabled users and disobeys the mission of the
accessibility APIs [DS#1].
Logic Analysis. Here we describe the execution logic of
accessibility-based notiﬁcation obtaining. First, the status bar
app ﬁlters the received accessibility events for notiﬁcations.
If the EventType is TYPE_NOTIFICATION_STATE_CHANGED,
it will believe the system just dispatches a new notiﬁcation
[DS#2]. Then the status bar app further extracts the properties
of this event, and parses the necessary information, like the
notiﬁcation title, content, parcelable data. However, we ﬁnd
this process is vulnerable. A zero-permission malicious app
could construct a custom AccessibilityEvent with phish-
ing information and cheat the event receiver.
Attack. As preparation, our zero-permission malicious app
has been installed on the user’s phone and runs in the back-
ground. Taking Super Status Bar as an example (Figure 8), the
attack app intends to send a phishing notiﬁcation disguised as
a message from a bank app. Therefore, it needs to construct
7At present, this app is unavailable on Google Play, see the “Impact” part
of this subsection for more details.
270          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationActivity will become a problem. This is the primary technical
challenge of Activity phishing attacks on Android.
APK dataset. The dataset for app scanning experiment con-
tains 91,605 samples, and 337 assistive apps (containing
342 accessibility services) were identiﬁed. Also, due to anti-
analysis protection and legacy code, only 334 service samples
could be used for subsequent analysis. Our dataset could be
extended to obtain more apps for analysis.
Dishonest descriptions. In Section §4.3, our analysis is based
on the accessibility service descriptions provided by assistive
apps. Though these apps are legitimate, it is still possible that
their descriptions are not honest. They may conceal (parts of)
their true intentions for some reasons. Such a situation may
affect the accuracy of our purpose analysis.
Misuse Identiﬁcation.
is difﬁcult
to judge whether the usage behaviors are misuse, es-
pecial executing auto-actions. For example, Automate
(com.llamalab.automate) could help users create their au-
tomations using ﬂowcharts. The supported actions include
automatically sending SMS or E-mail, copy ﬁles to FTP or
Google Drive, play music or take photos, etc. According to
the introduction on its website [10], we believe this app is not
designed for disabled users, but it is difﬁcult to judge based
on its usage descriptions or behaviors.
In some cases, it
8 Recommendations to More Secured Accessi-
bility APIs and Framework
In this paper, we systematically analyze the usage and security
risks of the accessibility APIs. Given the design shortcomings
of Section §5, we propose some possible improvements to
mitigate these security risks.
At the high level, the accessibility APIs are very special be-
cause they are designed for the users with disabilities. There-
fore, the usability is essential in the framework design. It
cannot be too complicated for disabled people. The trade-
off between security and usability is still an open question.
The shortcomings (DS#1, DS#2, and DS#3) discovered in
this paper are the fundamental design issues of the event-
driven accessibility framework. A new architecture may be
needed to completely solve them. At this moment, it is out
of the scope of this paper, and here we discuss some targeted
improvements for each shortcoming.
To DS#1, ideally, if an app is not designed for disabled
users, it should not invoke the accessibility APIs. The
problem is that some assistive apps belong to the killer
apps with millions of installations, and (parts of) their core
functionalities rely on the accessibility service, such as
LastPass (com.lastpass.lpandroid) and Universal Copy
(com.camel.corp.universalcopy). On November 2017,
Google required the assistive app developers must explain
how their apps are using the accessibility APIs to help users
with disabilities, or their apps will be removed from the Play
Store [32]. However, according to our observation, this plan
was not be executed smoothly, and Google gave up due to
the public outcry about favorite apps will stop working [27].
The lesson to be learned here is that whether something is a
“misuse” is mostly determined if the users are happy with how
that something is used.
We recommend designing new APIs for the requirements
of misuse cases. The existence of misuse cases reﬂects the
current Android APIs cannot meet the requirements of de-
velopers. New APIs and permissions could be added to
make developers give up using the accessibility APIs. Such
an improvement will be once and for all. Google also has
made such an attempt. On Android 8.0, a new permission
BIND_AUTOFILL_SERVICE is added, and password manager
apps could utilize this new permission to achieve the auto-ﬁll
feature [41]. Due to Android fragmentation, it may take a long
time before all relevant issues are ﬁxed. On the other hand,
the introduction of new APIs will bring some compatibility
problems inevitably. For example, the apps developed with
the new APIs cannot run on old devices directly. As a result,
the developers have to use the Android Support Library [22]
to achieve backward compatibility. Even so, due to the lim-
itations of the host device platform version, the full set of
functionality may still be unavailable.
To DS#2, under the current architecture, it is nearly impos-
sible to ﬁx this design shortcoming. Since the accessibility
event senders and receivers do not interact directly, it is difﬁ-
cult for an assistive app (receiver) to identify the event sender.
We recommend improving the execution logic of assistive
apps as short-term mitigation. For example, in the case of
installation hijacking, the store app should save the down-
loaded APK ﬁles to its private data folder (i.e., internal stor-
age) [19], which would signiﬁcantly reduce the chance of
being identiﬁed what APK ﬁle is being downloaded. Also, in
the case of notiﬁcation hijacking, the status bar app should
not launch the (unreliable) Intent contained in the received
TYPE_NOTIFICATION_STATE_CHANGED events.
To DS#3, the basic information of custom accessibility
events should not be ﬁlled by third-party apps, including
SourceNode, ClassName, and PackageName. Only the OS
could ﬁll such information. This restriction ensures the sender
information cannot be tampered with.
On the other hand, a new permission could be added for
restricting sending custom accessibility events. Since this
functionality is provided to developers to make their custom
views accessible, it should not be used by any app without
restrictions. At least, more restrictions should be applied to
the allowed types and numbers of custom events.
9 Related Work
Assistive technologies do not come at no cost. In this sec-
tion, we review the related works on the security issues of
accessibility techniques.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 271Jang et al. [36] presented the ﬁrst security evaluation of ac-
cessibility support for four mainstream platforms (Microsoft
Windows, Ubuntu Linux, iOS, and Android). Their study
demonstrated that inadequate security checks on I/O paths
make it possible to launch attacks from accessibility interfaces.
It is the closest work to us. The difference is that this study
focused on the accessibility module I/O and did not touch the
underlying design of Android accessibility framework.
On the Android platform, Kraunelis et al. [37] ﬁrst
noticed the possibility of attacks leveraging the Android
accessibility framework. More recently, Fratantonio et
al. [35] designed the “cloak and dagger” attack. Their at-
tack combines the capabilities of the SYSTEM_ALERT_WINDOW
and BIND_ACCESSIBILITY_SERVICE permissions, which
achieves the complete control of the UI feedback loop. Aonzo
et al. [28] uncovered the design issues of mobile password
managers and mentioned the misuse of the accessibility ser-
vice (though it is not the focus of this work). Naseri et al. [43]
investigated the sensitive information leakage through the
accessibility service. They found 72% of the top ﬁnance and
80% of the top social media apps are vulnerable. Different
from our work, previous works focused on exploring what
kinds of attacks could be achieved through a malicious app
with the BIND_ACCESSIBILITY_SERVICE permission. Our
study focused on evaluating the usage of the accessibility
APIs and the design of their supporting architecture. Also, the
demonstrated attacks do not need any sensitive permission.
To the security risks of voice control, Diao et al. [33]
ﬁrst discovered the Android built-in voice assistant module
(Google Now) could be injected malicious voice commands
by a zero-permission app. Some subsequent improved attacks
are designed, like hidden voice commands [25,29,46,48] and
inaudible voice commands [45, 49]. The corresponding de-
fense mechanisms also have been proposed, like articulatory
gesture-based liveness detection [50], tracking the creation of
audio communication channels [44], using the physical char-
acteristics of loudspeaker for differentiation [30], utilizing the
wireless signals to sense the human mouth motion [42].
In this paper, we present installation hijacking and notiﬁca-
tion phishing as showcases. Some other works also achieve
similar attacks on Android with different approaches or ad-
versary models, such as abusing the notiﬁcation services [47],
exploiting push-messaging services [39], ghost installer at-
tack [38], and UI redressing attacks [26].
10 Conclusion
In this paper, we systematically studied the usage of the acces-
sibility APIs and the design of their supporting architecture.
Through code analysis and a large-scale apps scanning study,
we identiﬁed a series of fundamental design shortcomings
that may bring serious security risks. As showcases, we pre-
sented two concrete attacks exploiting these shortcomings:
installation hijacking and notiﬁcation phishing. As mitiga-
tions, we also propose improvement recommendations. We
believe the security threats reported in this paper are not just
isolated incidents. A new accessibility architecture may be
needed to completely solve these ﬂaws.
Acknowledgements
We are grateful to our shepherd Jason Polakis and the anony-
mous reviewers for their insightful comments. This work was
partially supported by National Natural Science Foundation
of China (NSFC) under Grant No. 61902148, No. 61572415,
Hong Kong S.A.R. Research Grants Council (RGC) Gen-
eral Research Fund No. 14217816, and Qilu Young Scholar
Program of Shandong University.
References
[1] 1Mobile. http://www.1mobile.com/.
[2] AccessibilityEvent.
https://developer.android.
com/reference/android/view/accessibility/
AccessibilityEvent.html.
[3] AccessibilityEvent.java.
https://android.
googlesource.com/platform/frameworks/base/
+/android-8.1.0_r27/core/java/android/view/
accessibility/AccessibilityEvent.java.
[4] AccessibilityService. https://developer.android.
com/reference/android/accessibilityservice/
AccessibilityService.
[5] AccessibilityServiceInfo.
developer.android.com/reference/
android/accessibilityservice/
AccessibilityServiceInfo.html.
https://
[6] Amazon Appstore.
androidapp.
https://www.amazon.com/
[7] Android
accessibility
overview.
https:
//support.google.com/accessibility/android/
answer/6006564.
[8] APKPure. https://apkpure.com/.
[9] Apktool.
Apktool/.
https://ibotpeaches.github.io/
[10] Automate. https://llamalab.com/automate/.
[11] Building Accessibility
Services.
https:
//developer.android.com/guide/topics/ui/
accessibility/services.html.
[12] Building Accessible Custom Views.
https: