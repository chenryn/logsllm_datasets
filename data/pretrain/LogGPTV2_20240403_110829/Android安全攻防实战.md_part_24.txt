Int checkSignatures(int, int) :
int checkSignatures (java.lang.String, java, lang.String) :
android.content -pm.PackageInfo getPackageInfo (java . lang-String,
int) :
-accessthroughreflection class android. content .pm.Signature [
byte []  toByteArray () :
chaz []toChars () 
java,lang.String toCharsString() /
5.最后一步是在release模式下生成/导出，确保DexGuard的保护被应用到最终
的.apk 文件上。
171
---
## Page 190
Android安全攻防实战
 Eelipse:在你的项目上单击右键，选择 Android Tools|Export Optimized and
Obfuscated Application Package ... (DexGuard)
Ant:在终端窗口里，切换到你的项目的根目录下，运行“ant release”命
令。
口Gradle:在终端窗口里，切换到你的项目的根目录下，运行“gradle
releaseCompile”命令。
进一步信息
表5.1是DexGuard与ProGuard各项性能的逐个对比。
表5.1
ProGuard
DexGuard
减少代码尺寸
X
X
优化
X
X
名称混淆
X
X
字符串加密
X
类加密
X
反射
X
加密Asset 文件
X
资源XML混淆
X
转换成 Dalvik 字节码
X
打包（Packaging)
X
签名
X
代码修改检测
X
代码募改检测一直受到用户喜爱，该功能使用了一个实用库（utilitylibrary），遵
循的也是一些与这一章里其他实验中介绍过的相同原理。而且它只需一行代码，实
现起来非常方便，也使它广受欢迎。
从ProGuard升级到 DexGuard是无缝的，因为所有为ProGuard 编写的定制配置
都是完全兼容的。这一兼容性的另一个好处是：有一些ProGuard社区能为你提供技
术支持和专家指导，
拓展阅读
●DexGuard 的官网地址是:http://www.saikoa.com/dexguard。
172
---
## Page 191
第6章逆向app
在这一章里，我们将要做的实验有：
·把Java 源码编译成 DEX文件：
·解析DEX文件的格式：
°解释Dalvik字节码：
·把DEX反编译国Java
·反编译app 的原生库（native library）：
·使用GDB server调试Android进程。
6.1简介
第5章中讨论了app中的各种缺陷，在无需准确地了解app到底是如何工作的前
提下，就能找到并利用它们，尽管我们是用一些常见的源代码来详细解释这些问题
到底是如何产生的，但是无需阅读源码，我们就知道可能会存在SQL注入问题。大
多数情况下，成功编写一个漏洞利用代码（exploit）的第一步，往往是在对支持app
行为的各类细节一无所知的情况下，去分析它的行为。面这一章中讨论的逆向工程
则是为了利用 app 中的漏洞，而去搞清 app某些特定的内部实现细节。
逆向工程，当它被用在计算机软件上时，是指为了使用或滥用某些信息，而去
弄清其工作和开发方式的过程。例如，阅读某个内核驱动程序的源代码，可能会发
现诸如缓冲区边界检查错误之类的、潜在的内存溢出漏洞。知道了这个事，或许能
让你根据漏润所在的上下文环境，写出一个漏洞利用代码。不论是对哪类安全专家
而言，逆向工程技术都是最基本的技巧，而且真要编写漏洞利用代码的话，逆向工
程也是必不可少的。在成功实施漏洞利用的各个环节中，无论是在编写漏润利用代
码时，还是在寻找漏洞时，都会要用上逆向工程。
---
## Page 192
Android安全攻防实战
Androidapp与其他类型的计算机软件并无不同，因此，它们也是可以被逆向的。
要逆向一个app，你需要理解它们是如何生成的，相关的格式以及为什么要这样设计。
不了解这些，fuzzing测试和暴力攻击就会变得漫无边际的，占据你无数个不眠之夜，
而这一切又会最终变成无尽的挫折。在这一章里，我们将做一些可以用来从app中提
取关于其内部工作方式的信息的实验。此外，还将讨论一些恶意软件开发者和安全
审计人员可以用来滥用或者逆向app的新奇技巧。
在我们开始实验之前，我想请你先回答一个问题：你为什么要逆向一个Android
a6 dde
这个问题的答案可能会是如下。
·为了阅读源码：通常，许多漏洞没被攻击者找到的原因只是：在app的“黑
盘”评估阶段，没有测到这些漏润，但这并不意味者可供利用的漏润就不存
在了。昔人云：“没找到证据并不意味着没有证据！”，阅读app的源码是找出
其中漏洞的最有效方法，面且多半还能让你比用纯黑盒分析的方式，找到更
多的漏洞。阅读源码也还是理解app的唯一具体方法。不读一下源码，你就
不能相信任何事。换句话说，文档有时也会撒谎，只有源码才是真相！
·为了获取信息：app中的某些漏洞并不是针对代码的行为的，而是针对存储
在 app 中的某类信息的。例如，静态形式存放的私钥和口令，c-mail 地址，
登录令牌，URI以及其他敏感信息。破解开一个aPp，你就能得到它的所有
秘密。
·为了分析防御机制：通常，app中的常见漏洞都是以最荒谬的方式被保护起
来的。尽管能够对付最常见的攻击方式，但是一个app是不是真能对抗某种
攻击，完全是由其源码和配置所决定的。通常，在没有源码和内部配置的情
况下，要搞清它是如何保护自身的，将会是极端困难的，或者时间上是不可
行的。阅读大量同类app的源码会给你相当的思考深度和灵感，去洞察保护
app 的最好的和最坏的方法。以使用登录机制的 app 为例，阅读大量的这类
app的源码，会教会你开发者是如何创建对抗用户认证暴力攻击，噢探登录
过程等攻击方式，以及其他针对某种具体登录方式的防御机制的。
·为了分析攻击技术：你或许关心的是最新最棒的Android恶意软件都被用在
在哪些app和系统层面上。要真正搞明白这一问题，并让自己置身于Android
安全研究的前沿的唯一办法，就是去逆向Androidapp。
牢记这些目标，我们现在就开始做实验。
174
---
## Page 193
第6章逆向app
6.2把Java源码编译成DEX文件
在接下来的实验中，我们将要详解DEX文件的格式，但是在深入分析DEX文
件之前，先来了解一下，一个Java程序被解释/编译成DEX程序的过程还是很有用
的。我们之所以要演示Java程序是怎样被编译成DEX的关键原因之一是：我们这个
实验里使用的演示程序，将在下个实验里被用来阐释DEX文件的格式。
准备工作
在开始之前，我们先得做好以下准备工作。
·Java开发包：我们要用它把Java代码编译成.class文件。
·Android SDK：这个包中的一些工具，能把Java 的.class 文件转换成DEX文
件。
·文本编辑器：我们要用文本编辑器写一段示例用的Java程序，然后才有东西
能被转成DEX程序。
准备好了这些东西之后，我们开始来准备一个示例DEX文件。
准备工作
要把一个Java程序编译成一个DEX程序，你要按下列步骤进行操作。
1.打开你的文本编辑器，创建一个文件，并输入下列代码：
pub1lc class Example {
public statlc void main (String []args){
System.out ,printf (*Hel1o World1\n") ;
2.把上面这个文件保存为“Example.java”，并在你的终端窗口或命令行提示符
下，输入下面这条命令进行编译。
javac -source 1.6 target 1.6 Example.java
3.如果编译通过，就得到了.class文件，你现在可以掏出一个名为dx的工具。
它位于如下。
[SDK path] /sdk/platform-tools/dx
如果你的SDK版本是4.4，那么你可以在下面这个目录中找到它，如图6.1
所示。
/sdk/bui1t-tools/android- [version] /dx
175
---
## Page 194
Android安全攻防实战
sdxh
no comand spectfled
no-fttes][--core-ltbrary]
[f(le>.class|f
lesat
图 6.1
4.你需要执行下面这条命令，来制备一个DEX文件，如图6.2所示。
[SDK path] /sdk/platform-tools/dx --dex --output=Example dex
Example. class
[0]k317emakangB14ckwLdw:~/AndroldSecur Lty/ReverseEnglneer Lng/dexRev
[e]k3176makangB14ckwtdew:~/AndrotdSecurLty/ReverseEngLneerLng/dexRev
x
--dex
 --output=Exarple.dex Exanple.class
total20
ls-al
x2k3170nakan
W-rW-r--1k3170akan k3170akan110 Aug 20 20:26 Exanple.java
图 6.2
上述命令执行完毕之后，在你的当前目录中就有了一个名为“Exampl.dex”
的文件，这就是 DEX版本的 Example.class 文件。
工作原理
在步骤1里，我们做的就是Java程序员每天都做的事，描述了Java对象，我们
的对象的名字叫做Example。
在步骤2里，我们把Example.java 编译到一个.class文件。在这一步里，Java编
译器获得了我们上一步中编写的完全符合语法规则的代码，并把它解析成一串Java
虚拟机里的基于栈的指令。
在步骤3里，我把.class文件，也就是其中的Java元数据和基于栈的指令，转成
一系列Dalvik虚拟机能理解的资源、数据结构以及基于寄存器的指令，并把它们放
到一个DEX文件中。我们来详解一下我们刚才使用的dx命令。
·-dex:这个参数告诉dx你希望生成一个DEX文件。
·-output=Example.dex:这个参数告诉dx我们想要把处理的结果输出到一个名
176
---
## Page 195
第6章逆向app
为“Example.dex”的文件中。
·Example.class:这是输入文件，即，我们在步骤2中编译得到的.class 文件。
6.3解析DEX文件的格式
DEX 文件，或称 Dalvik 可执行文件（Dalvik Executable file），其实就是Android
上的Java .class 文件。其中含有编译好的Java 字节码，它决定了Android app 的行为。
作为一名安全专家，你自然应该关心这些文件是如何工作的以及它们到底是怎么回
事。在对许多app 做安全评估时，解析DEX文件的格式是其中必不可少的一部分。
它们是Androidapp的行为的良好信息源，并能让你从一个纯源码视角无法企及的角
度一窥app的开发细节。对DEX文件格式以及如何解析它有一个深入的理解，或许
能够让你能找到新的漏润，或者想出新的或改进已有的、针对Android平台和 Dalvik
虚拟机的漏洞利用方法。
可能在不久之后，恶意软件就会利用DEX文件的解析方式，来隐藏与其行为相
关的细节了。而且只有安全狂热分子才会了解新的Android恶意软件的混淆技术，并
拥有搞定它们所必需的技巧，成为少数真正了解DEX是如何工作的高手。这个实验
包括对DEX文件格式的详细闸述，并描述了DEX文件中每个字段（field）是如何被
使用和解析的。然后，转而去讨论如何把一个DEX文件反编译回Java 源码的形式，
以方便我们对它的阅读和逆向工程分析。
理解DEX文件格式
这个实验专门用来详解DEX文件，并描述其中每个重要的区段（section）。我们
会介绍其中的每个字段，并直接给出用来解析DEX文件的Dalvik源码。
在下面几段中，提供的是关于DEX文件中各个区段（scction）中相关信息的存
储位置，比如说应该去哪儿寻找可打印字符串，去邮儿能找到各个编译好了的类的
DEX代码。DEX文件拥有一个相当简单和易于理解的格式，DEX文件的结构如下所
小
struct DexFile (
/* di.rectly-mapped *opt" header */
const DexOpt.Header* pOptHeader1
/* pointers to directly-mapped structs and arrays in base DEX */
const DexHeader* pHeader;
const DexStringId* pStringIdsj
const DexTypeId* pTypeIds;
177
---
## Page 196
Android安全攻防实战
const DexFieldId* pFieldIds
const DexMethodId* pMethodIds
const DexProtoId* pProtoIds;
const 
DexClassDef* pClassDefs
const DexLink* pLinkData;
 / *
• These are mapped out of the *auxiliary* section, and may notbe
*included in the file,
const DexClassLookup* pClassLookup
const void* pRegisterMapPoo1; //
RegisterMapClassPoo1
/* points to start of DEx file data */
const ul* baseAddr,
Lnt overhead;
additiona1 
* /
//void* auxData;
} /
以上代码摘自 ：https://github.com/android/platform_dalvik/blob/
master/libdex/DexFile.h
DEX文件头
DEX文件的第一个区段被称为DEX文件头。下面是Dalvik虚拟机的 libdex文
件中关于DEX文件头的定义。
struct DexHeader {