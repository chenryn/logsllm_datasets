# 【技术分享】基于jemalloc的Android漏洞利用技巧——CENSUS

## 译文声明
本文为翻译文章，原文来源：census-labs.com。具体表达及含义以原文为准。

**翻译者**: arnow117  
**预估稿费**: 300RMB  
**投稿方式**: 发送邮件至linwei#360.cn 或通过网页版在线投稿

## 背景介绍

### jemalloc的相关研究
- **2012年Phrack发表的文章**: argp与huku在FreeBSD上对jemalloc内存分配器进行了独立利用，并提供了POC。
- **2012年BlackHat大会**: argp与huku展示了如何破坏Firefox中的jemalloc元数据。
- **2015年INFILTRATE大会**: argp提出了jemalloc漏洞利用的方法论。

### Android堆漏洞利用的相关研究
- Hanan Be'er: 对CVE-2015-3864（stagefright中整形溢出导致堆破坏）的漏洞利用。
- Aaron Adams: 对同一漏洞的再次利用。
- Joshua Drake: 对stagefright漏洞利用的相关工作。

## 配合jemalloc使用的插件：Shadow
Shadow是由CENSUS开发的一个基于jemalloc的堆漏洞利用框架，开源在GitHub上([链接](https://github.com/CENSUS/shadow))。该框架可以作为GDB、WINDBG和lldb的插件使用，提供jemalloc分配器的内部结构信息。

**主要优点**:
- 无需附加额外源文件。
- 在Android和Firefox平台上使用相同的指令。
- 简化的调试引擎。
- 提供堆快照支持。

示例命令：
```gdb
(gdb) jeparse -f
(gdb) jestore /tmp/snapshot1
```

单独使用时的示例：
```python
$ python shadow.py /tmp/snapshot1 jeruns -c
listing current runs only
[arena 00 (0x0000007f85680180)] [bins 36]
[run 0x7f6ef81468] [region size 08] [total regions 512] [free regions 250]
[run 0x7f6e480928] [region size 16] [total regions 256] [free regions 051]
[run 0x7f6db81888] [region size 32] [total regions 128] [free regions 114]
...
```

解析堆中内存排布的脚本示例：
```python
import jemalloc
heap = jemalloc.jemalloc("/tmp/snapshot1")
for chunk in heap.chunks:
    print("chunk @ 0x%x" % chunk.addr)
```
运行结果：
```bash
$ python print_chunks.py
chunk @ 0x7f6d240000
chunk @ 0x7f6db00000
chunk @ 0x7f6db40000
chunk @ 0x7f6db80000
chunk @ 0x7f6dbc0000
...
```

## jemalloc

### jemalloc的一些特性
- 使用位图管理堆分配，而不是通过内存利用率。
- 广泛应用于FreeBSD libc、Firefox、Android libc、MySQL、Redis以及Facebook内部。
- 设计原则包括最小化元数据开销、基于每个线程进行缓存以避免同步问题，以及减少连续分配内存的碎片化问题。

### Android中的jemalloc
- Android 6 使用版本4.0.0，Android 7 使用版本4.1.0-4-g33184bf69813087bf1885b0993685f9d03320c69。
- 通过宏定义开关控制代码块，并附有`/* Android change */`注释。
- `Android.mk` 文件中限制了仅使用两个arenas，并开启了线程缓存（讨论基于64位架构）。

### jemalloc内部结构

#### 概念：Region
- 实际返回给用户的内存。
- 在内存中连续分布且不包含元数据。
- 根据大小分为三种类型：Small（最大0x14336字节）、Large（最大0x38000字节）、Huge（大于0x38000）。

示例命令：
```gdb
(gdb) jebininfo
[bin 00] [region size 008] [run size 04096] [nregs 0512]
[bin 01] [region size 016] [run size 04096] [nregs 0256]
...
```

#### 概念：Run
- 存放连续的大小相同的region的容器。
- 一系列连续的页集合，内部存放small/large类型的region。
- 没有元数据。

示例命令：
```gdb
(gdb) jerun 0x7f931c0628
[region 000] [used] [0x0000007f931cc000] [0x0000000070957cf8]
[region 001] [used] [0x0000007f931cc008] [0x0000000070ea78b0]
...
```

#### 概念：Chunk
- 存放run的容器，大小固定相同。
- 操作系统返回的内存被划分到chunk中管理。
- 存储着关于自身及其管理的run的元数据。

#### 不同Android版本下的jemalloc变化
- Chunk大小的变化。
- 元数据的变化，增加了mapbias与mapbits flags。

### 堆中的jemalloc
```bash
root@bullhead/: cat /proc/self/maps | grep libc_malloc
7f81d00000-7f81d80000 rw-p 00000000 00:00 0 [anon:libc_malloc]
7f82600000-7f826c0000 rw-p 00000000 00:00 0 [anon:libc_malloc]
...
```

示例命令：
```gdb
(gdb) jechunks
[shadow] [chunk 0x0000007f81d00000] [arena 0x0000007f996800c0]
[shadow] [chunk 0x0000007f81d40000] [arena 0x0000007f996800c0]
...
```

### jemalloc的内存排布
- 溢出region、run和chunk的示意图。
- chunk头部包含元数据。

### 基于jemalloc的堆喷
- Region和run都没有元数据。
- 堆喷时，chunk的第一个和最后一个页不可喷。
- Chunk地址可预测。
- 可预测的chunk地址意味着可预测的run和region地址，有助于更精确的堆喷。

### jemalloc的内存管理
- 更详细的内存管理机制将在后续章节中讨论。

希望这篇优化后的文本能够更加清晰、连贯和专业。