        vm_arr[i] ^= value;
    }
}
function decode_message(vm_arr, from_index) {
    to_index = vm_arr[from_index+1]
    res = ""
    for(i = 0; i >> a[17251]
5
```
This is the stop condition. We can emulate what would happen by calling:
```
_f1(a, 17251)
"UNAUTHORIZED LOGIN!"
```
So this is the failure branch, and we want `user_input[3] % 71 == 0` to be false in this case.
Let's continue analyzing what would happen in case the condition is false.
We then (might) reassign a new value to `user_input[3]`, and continue by reading an action from the current operation. In our example, the action index is `1`, so the action from the action array is `subtract_from_arr`. The rest of the logic is related to executing the action on a slice of the array (and moving to the next operation). This action actually decodes the next operation that will be executed.
Before decoding, the next action is:
```
17254, 17276, 17330, 34502, 17252, 18012, 17263
```
But after decoding (in our example, by subtracting `17251` from the array members between index `7` and `4074`), we get:
```
3, 25, 79, 17251, 1, 761, 12
```
To conclude:
 * Every iteration of the loop decodes part of the array
 * If the `(user_input[user_input_index] % _g9 == 0) == (4 - _g7)` condition evaluates to true with `vm_arr[index+3] = 17251` then the login is unauthorized.
Given these insights, we can implement a solver using `z3`:
```python
from pwn import *
from z3 import *
from arr import a
import math
import itertools
STEP_SIZE = 7
FAILURE_ADDRESS = 17251
def add_to_arr(vm_arr, from_index, to_index, value):
    for i in range(from_index, to_index):
        vm_arr[i] += value
def subtract_from_arr(vm_arr, from_index, to_index, value):
    for i in range(from_index, to_index):
        vm_arr[i] -= value
def xor_arr(vm_arr, from_index, to_index, value):
    for i in range(from_index, to_index):
        vm_arr[i] ^= value
def decode_message(vm_arr, _p0):
    to_index = vm_arr[_p0+1]
    res = ""
    for i in range(to_index):
        res += chr(vm_arr[_p0+2+i] ^ 0x37)
    return res
action_arr = [add_to_arr, subtract_from_arr, xor_arr]
def crack_password(vm_arr, solver, key, progress):
    index = 0
    while(index = ord('!'))
                solver.add(key[i][0] <= ord('~'))
            crack_password(a.copy(), solver, key, progress)
            progress.status("Trying to solve the constraints...")
            if solver.check() == sat:
                model = solver.model()
                res = ""
                for i in range(key_len):
                    res += chr(model[key[i][0]].as_long())
                break
    except IndexError:
        pass
log.success("Found the following password: '{}'".format(res))
```
Running it, we get:
```console
[-] Trying a key of length 36: Failed
[-] Trying a key of length 37: Failed
[-] Trying a key of length 38: Failed
[-] Trying a key of length 39: Failed
[-] Trying a key of length 40: Failed
[+] Trying a key of length 41: Done
[+] Found the following password: 'CSA{w0w_th4t_wa$_re@lly_s1mpLe_wasn7_1t}q'
```
Of course, the accepted flag was `CSA{w0w_th4t_wa$_re@lly_s1mpLe_wasn7_1t}` (without the `q` at the end). For some reason, the VM instructions try to access index #41 of the user input, and that's why the solver had to add an extra character to the solution. In the Javascript implementation, accessing an extra character after the user input is not as fatal as in Python though...