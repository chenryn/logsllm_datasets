Go,butwecreatedapackagewhereyoucanfindthebook-
friendlyversionathttps://github.com/blackhat-
go/bhg/blob/master/ch-6/smb/.Althoughwewon’tshowyou
everydetailofthispackageinthischapter,you’llstilllearn
thebasicsofinterpretingtheSMBspecificationinorderto
createthebinarycommunicationsnecessaryto“speakSMB,”
unlikeinpreviouschapters,whereyousimplyreusedfully
compliantpackages.You’llalsolearnhowtouseatechnique
calledreflectiontoinspectinterfacedatatypesatruntimeand
definearbitraryGostructurefieldtagstomarshaland
unmarshalcomplicated,arbitrarydata,whilemaintaining
scalabilityforfuturemessagestructuresanddatatypes.
WhiletheSMBlibrarywe’vebuiltallowsonlybasic
client-sidecommunications,thecodebaseisfairlyextensive.
You’llseerelevantexamplesfromtheSMBpackagesothat
youcanfullyunderstandhowcommunicationsandtasks,such
asSMBauthentication,work.
UNDERSTANDINGSMB
SMBisanapplication-layerprotocol,likeHTTP,thatallows
networknodestocommunicatewithoneanother.Unlike
HTTP1.1,whichcommunicatesusingASCII-readabletext,
SMBisabinaryprotocolthatusesacombinationoffixed-and
variable-length,positional,andlittle-endianfields.SMBhas
severalversions,alsoknownasdialects—thatis,versions2.0,
2.1,3.0,3.0.2,and3.1.1.Eachdialectperformsbetterthanits
predecessors.Becausethehandlingandrequirementsvary
fromonedialecttothenext,aclientandservermustagreeon
whichdialecttouseaheadoftime.Theydothisduringan
initialmessageexchange.
Generally,Windowssystemssupportmultipledialectsand
choosethemostcurrentdialectthatboththeclientandserver
support.MicrosofthasprovidedTable6-1,whichshows
whichWindowsversionsselectwhichdialectduringthe
negotiationprocess.(Windows10andWS2016—notshown
inthegraphic—negotiateSMBversion3.1.1.)
Table6-1:SMBDialectsNegotiatedByWindowsVersions
Operating
system
Window
s8.1WS
2012R2
Window
s8WS
2012
Window
s7WS
2008R2
Window
sVista
WS
2008
Previous
versions
Windows
8.1
SMB
3.02
SMB3.0
SMB2.1
SMB2.0
SMB1.0
WS2012R2
Windows8
WS2012
SMB3.0
SMB3.0
SMB2.1
SMB2.0
SMB1.0
Windows7
WS2008R2
SMB2.1
SMB2.1
SMB2.1
SMB2.0
SMB1.0
Windows
Vista
WS2008
SMB2.0
SMB2.0
SMB2.0
SMB2.0
SMB1.0
Previous
versions
SMB1.0
SMB1.0
SMB1.0
SMB1.0
SMB1.0
Forthischapter,you’llusetheSMB2.1dialect,because
mostmodernWindowsversionssupportit.
UnderstandingSMBSecurityTokens
SMBmessagescontainsecuritytokensusedtoauthenticate
usersandmachinesacrossanetwork.Muchliketheprocessof
selectingtheSMBdialect,selectingtheauthentication
mechanismtakesplacethroughaseriesofSessionSetup
messages,whichallowclientsandserverstoagreeona
mutuallysupportedauthenticationtype.ActiveDirectory
domainscommonlyuseNTLMSecuritySupportProvider
(NTLMSSP),abinary,positionalprotocolthatusesNTLM
passwordhashesincombinationwithchallenge-response
tokensinordertoauthenticateusersacrossanetwork.
Challenge-responsetokensarelikethecryptographicanswer
toaquestion;onlyanentitythatknowsthecorrectpassword
cananswerthequestioncorrectly.Althoughthischapter
focusessolelyonNTLMSSP,Kerberosisanothercommon
authenticationmechanism.
SeparatingtheauthenticationmechanismfromtheSMB
specificationitselfallowsSMBtousedifferentauthentication
methodsindifferentenvironments,dependingondomainand
enterprisesecurityrequirementsaswellasclient-server
support.However,separatingtheauthenticationandtheSMB
specificationmakesitmoredifficulttocreatean
implementationinGo,becausetheauthenticationtokensare
AbstractSyntaxNotationOne(ASN.1)encoded.Forthis
chapter,youdon’tneedtoknowtoomuchaboutASN.1—just
knowthatit’sabinaryencodingformatthatdiffersfromthe
positionalbinaryencodingyou’lluseforgeneralSMB.This
mixedencodingaddscomplexity.
UnderstandingNTLMSSPiscrucialtocreatinganSMB
implementationthatissmartenoughtomarshalandunmarshal
messagefieldsselectively,whileaccountingforthepotential
thatadjacentfields—withinasinglemessage—maybe
encodedordecodeddifferently.Gohasstandardpackagesthat
youcanuseforbinaryandASN.1encoding,butGo’sASN.1
packagewasn’tbuiltforgeneral-purposeuse;soyoumusttake
intoaccountafewnuances.
SettingUpanSMBSession
Theclientandserverperformthefollowingprocessto
successfullysetupanSMB2.1sessionandchoosethe
NTLMSSPdialect:
1. TheclientsendsaNegotiateProtocolrequesttotheserver.Themessage
includesalistofdialectsthattheclientsupports.
2. TheserverrespondswithaNegotiateProtocolresponsemessage,which
indicatesthedialecttheserverselected.Futuremessageswillusethatdialect.
Includedintheresponseisalistofauthenticationmechanismstheserver
supports.
3. Theclientselectsasupportedauthenticationtype,suchasNTLMSSP,anduses
theinformationtocreateandsendaSessionSetuprequestmessagetotheserver.
Themessagecontainsanencapsulatedsecuritystructureindicatingthatit’san
NTLMSSPNegotiaterequest.
4. TheserverreplieswithaSessionSetupresponsemessage.Thismessage
indicatesthatmoreprocessingisrequiredandincludesaserverchallengetoken.
5. Theclientcalculatestheuser’sNTLMhash—whichusesthedomain,user,and
passwordasinputs—andthenusesitincombinationwiththeserverchallenge,
randomclientchallenge,andotherdatatogeneratethechallengeresponse.It
includesthisinanewSessionSetuprequestmessagethattheclientsendstothe
server.Unlikethemessagesentinstep3,theencapsulatedsecuritystructure
indicatesthatit’sanNTLMSSPAuthenticaterequest.Thisway,theservercan
differentiatebetweenthetwoSessionSetupSMBrequests.
6. Theserverinteractswithanauthoritativeresource,suchasadomaincontroller
forauthenticationusingdomaincredentials,tocomparethechallenge-response
informationtheclientsuppliedwiththevaluetheauthoritativeresource
calculated.Iftheymatch,theclientisauthenticated.TheserversendsaSession
Setupresponsemessagebacktotheclient,indicatingthatloginwassuccessful.
Thismessagecontainsauniquesessionidentifierthattheclientcanusetotrack
sessionstate.
7. Theclientsendsadditionalmessagestoaccessfileshares,namedpipes,printers,
andsoon;eachmessageincludesthesessionidentifierasareferencethrough
whichtheservercanvalidatetheauthenticationstatusoftheclient.
YoumightnowbegintoseehowcomplicatedSMBisand
understandwhythereisneitherastandardnorathird-partyGo
packagethatimplementstheSMBspecification.Ratherthan
takeacomprehensiveapproachanddiscusseverynuanceof
thelibrarieswecreated,let’sfocusonafewofthestructures,
messages,oruniqueaspectsthatcanhelpyouimplementyour
ownversionsofwell-definednetworkingprotocols.Insteadof
extensivecodelistings,thischapterdiscussesonlythegood
stuff,sparingyoufrominformationoverload.
Youcanusethefollowingrelevantspecificationsasa
reference,butdon’tfeelobligatedtoreadeachone.AGoogle
searchwillletyoufindthelatestrevisions.
MS-SMB2TheSMB2specificationtowhichweattempted
toconform.Thisisthemainspecificationofconcernand
encapsulatesaGenericSecurityServiceApplication
ProgrammingInterface(GSS-API)structureforperforming
authentication.
MS-SPNGandRFC4178TheGSS-APIspecification
withinwhichtheMS-NLMPdataisencapsulated.The
structureisASN.1encoded.
MS-NLMPThespecificationusedforunderstanding
NTLMSSPauthenticationtokenstructureandchallenge-
responseformat.Itincludesformulasandspecificsfor
calculatingthingsliketheNTLMhashandauthentication
responsetoken.UnliketheouterGSS-APIcontainer,
NTLMSSPdataisn’tASN.1encoded.
ASN.1ThespecificationforencodingdatabyusingASN.1
format.
Beforewediscusstheinterestingsnippetsofcodefromthe
package,youshouldunderstandsomeofthechallengesyou
needtoovercomeinordertogetworkingSMB
communications.
UsingMixedEncodingofStructFields
Aswealludedtoearlier,theSMBspecificationrequires
positional,binary,little-endian,fixed-andvariable-length
encodingforthemajorityofthemessagedata.Butsomefields
needtobeASN.1encoded,whichusesexplicitlytagged
identifiersforfieldindex,type,andlength.Inthiscase,many
oftheASN.1subfieldstobeencodedareoptionalandnot
restrictedtoaspecificpositionororderwithinthemessage
field.Thismayhelpclarifythechallenge.
InListing6-1,youcanseeahypotheticalMessagestructthat
presentsthesechallenges.
typeFoostruct{
Xint
Y[]byte
}
typeMessagestruct{
Aint//Binary,positionalencoding
BFoo//ASN.1encodingasrequiredbyspec
Cbool//Binary,positionalencoding
}
Listing6-1:Ahypotheticalexampleofastructrequiringvariablefieldencodings
Thecruxoftheproblemhereisthatyoucan’tencodeall
thetypesinsidetheMessagestructbyusingthesameencoding
schemebecauseB,aFootype,isexpectedtobeASN.1
encoded,whereasotherfieldsaren’t.
WritingaCustomMarshalingandUnmarshalingInterface
Recallfrompreviouschaptersthatencodingschemessuchas
JSONorXMLrecursivelyencodethestructandallfieldsby
usingthesameencodingformat.Itwascleanandsimple.You
don’thavethesameluxuryhere,becauseGo’sbinarypackage
behavesthesameway—itencodesallstructsandstructfields
recursivelywithoutacareintheworld,butthiswon’tworkfor
youbecausethemessagerequiresmixedencoding:
binary.Write(someWriter,binary.LittleEndian,message)
Thesolutionistocreateaninterfacethatallowsarbitrary
typestodefinecustommarshalingandunmarshalinglogic
(Listing6-2).
❶typeBinaryMarshallableinterface{
❷MarshalBinary(*Metadata)([]byte,error)
❸UnmarshalBinary([]byte,*Metadata)error
}
Listing6-2:Aninterfacedefinitionrequiringcustommarshalingandunmarshaling
methods
Theinterface❶,BinaryMarshallable,definestwomethodsthat
mustbeimplemented:MarshalBinary()❷andUnmarshalBinary()❸.
Don’tworrytoomuchabouttheMetadatatypepassedintothe
functions,asit’snotrelevanttounderstandthemain
functionality.
WrappingtheInterface
AnytypethatimplementstheBinaryMarshallableinterfacecan
controlitsownencoding.Unfortunately,it’snotassimpleas
justdefiningafewfunctionsontheFoodatatype.Afterall,
Go’sbinary.Write()andbinary.Read()methods,whichyouusefor
encodinganddecodingbinarydata,don’tknowanything
aboutyourarbitrarilydefinedinterface.Youneedtocreatea
marshal()andunmarshal()wrapperfunction,withinwhichyou
inspectthedatatodeterminewhetherthetypeimplementsthe
BinaryMarshallableinterface,asinListing6-3.(Allthecode
listingsattherootlocationof/existundertheprovidedgithub
repohttps://github.com/blackhat-go/bhg/.)
funcmarshal(vinterface{},meta*Metadata)([]byte,error){
--snip--
bm,ok:=v.(BinaryMarshallable)❶
ifok{
//Custommarshallableinterfacefound.
buf,err:=bm.MarshalBinary(meta)❷
iferr!=nil{
returnnil,err
}
returnbuf,nil
}
--snip--
}
--snip--
funcunmarshal(buf[]byte,vinterface{},meta*Metadata)(interface{},error){
--snip--
bm,ok:=v.(BinaryMarshallable)❸
ifok{
//Custommarshallableinterfacefound.
iferr:=bm.UnmarshalBinary(buf,meta)❹;err!=nil{
returnnil,err
}
returnbm,nil
}
--snip--
}
Listing6-3:Usingtypeassertionstoperformcustomdatamarshalingand
unmarshaling(/ch-6/smb/smb/encoder/encoder.go)
Listing6-3detailsonlyasubsectionofthemarshal()and
unmarshal()functionstakenfromhttps://github.com/blackhat-
go/bhg/blob/master/ch-6/smb/smb/encoder/encoder.go.Both
functionscontainasimilarsectionofcodethatattemptsto
assertthesuppliedinterface,v,toaBinaryMarshallablevariable
namedbm❶❸.Thissucceedsonlyifwhatevertypevis
actuallyimplementsthenecessaryfunctionsrequiredbyyour
BinaryMarshallableinterface.Ifitsucceeds,yourmarshal()function
❷makesacalltobm.MarshalBinary(),andyourunmarshal()function
❹makesacalltobm.UnmarshalBinary().Atthispoint,your
programflowwillbranchoffintothetype’sencodingand
decodinglogic,allowingatypetomaintaincompletecontrol
overthewayit’shandled.
ForcingASN.1Encoding
Let’slookathowtoforceyourFootypetobeASN.1encoded,
whileleavingotherfieldsinyourMessagestructas-is.Todo
this,youneedtodefinetheMarshalBinary()andUnmarshalBinary()
functionsonthetype,asinListing6-4.
func(f*Foo)MarshalBinary(meta*encoder.Metadata)([]byte,error){
buf,err:=asn1.Marshal(*f)❶
iferr!=nil{
returnnil,err
}
returnbuf,nil
}
func(f*Foo)UnmarshalBinary(buf[]byte,meta*encoder.Metadata)error{
data:=Foo{}
if_,err:=asn1.Unmarshal(buf,&data)❷;err!=nil{
returnerr
}
*f=data
returnnil
}
Listing6-4:ImplementingtheBinaryMarshallableinterfaceforASN.1encoding
Themethodsdon’tdomuchbesidesmakecallstoGo’s
asn1.Marshal()❶andasn1.Unmarshal()❷functions.Youcanfind
variationsofthesefunctionswithinthegsspackagecodeat
https://github.com/blackhat-go/bhg/blob/master/ch-
6/smb/gss/gss.go.Theonlyrealdifferencebetweenthemis
thatthegsspackagecodehasadditionaltweakstomakeGo’s
asn1encodingfunctionplaynicelywiththedataformatdefined
withintheSMBspec.
Thentlmssppackageathttps://github.com/blackhat-
go/bhg/blob/master/ch-6/smb/ntlmssp/ntlmssp.gocontainsan
alternativeimplementationoftheMarshalBinary()and
UnmarshalBinary()functions.Althoughitdoesn’tdemonstrate
ASN.1encoding,thentlmsspcodeshowshowtohandle
encodingofanarbitrarydatatypebyusingnecessary
metadata.Themetadata—thelengthsandoffsetsofvariable-
lengthbyteslices—ispertinenttotheencodingprocess.This
metadataleadsustothenextchallengeyouneedtoaddress.
UnderstandingMetadataandReferentialFields
IfyoudigintotheSMBspecificationalittle,you’llfindthat
somemessagescontainfieldsthatreferenceotherfieldsofthe
samemessage.Forexample,thefields—takenfromthe
Negotiateresponsemessage—refertotheoffsetandlengthof
avariable-lengthbyteslicethatcontainstheactualvalue:
SecurityBufferOffset(2bytes):Theoffset,inbytes,from
thebeginningoftheSMB2headertothesecuritybuffer.
SecurityBufferLength(2bytes):Thelength,inbytes,of
thesecuritybuffer.
Thesefieldsessentiallyactasmetadata.Laterinthe
messagespec,youfindthevariable-lengthfieldwithinwhich
yourdataactuallyresides:
Buffer(variable):Thevariable-lengthbufferthatcontains
thesecuritybufferfortheresponse,asspecifiedby
SecurityBufferOffsetandSecurityBufferLength.Thebuffer
SHOULDcontainatokenasproducedbytheGSSprotocol
asspecifiedinsection3.3.5.4.IfSecurityBufferLengthis0,
thisfieldisemptyandclient-initiatedauthentication,with
anauthenticationprotocoloftheclient’schoice,willbe
usedinsteadofserver-initiatedSPNEGOauthentication,as
describedin[MS-AUTHSOD]section2.1.2.2.
Generallyspeaking,thisishowtheSMBspecconsistently
handlesvariable-lengthdata:fixed-positionlengthandoffset
fieldsdepictingthesizeandlocationofthedataitself.Thisis
notspecifictoresponsemessagesortheNegotiatemessage,
andoftenyou’llfindmultiplefieldswithinasinglemessage
usingthispattern.Really,anytimeyouhaveavariable-length
field,you’llfindthispattern.Themetadataexplicitlyinstructs
themessagereceiveronhowtolocateandextractthedata.
Thisisuseful,butitcomplicatesyourencodingstrategy
becauseyounowneedtomaintainarelationshipbetween
differentfieldswithinastruct.Youcan’t,forexample,just
marshalanentiremessagebecausesomeofthemetadatafields
—forexample,lengthandoffset—won’tbeknownuntilthe
dataitselfismarshaledor,inthecaseoftheoffset,allfields
precedingthedataaremarshaled.
UnderstandingtheSMBImplementation
Theremainderofthissubsectionaddressessomeoftheugly
detailsregardingtheSMBimplementationwedevised.You
don’tneedtounderstandthisinformationtousethepackage.