except for p2.  More formally, if for all  ( p ,  1)  E A, p  # pz 
and for all authmaps m, l(m) = l(m fl  [p2 -i]), then 
7  Conclusion 
M,w,"n,(A U (R(a1, . 2 ) } )  
= [ ~ 2  HI] n MA,w,m(A U (a11 Q}) 
For a particular trust management system, the language 
for writing licenses might not be expressive enough to allow 
certificate reduction.  That is, there may  be license expres- 
sions el and e2  denoting licenses 11  and 12, but no license 
expression denoting 1, where (PI, 1) = R( (PI, 11), ( ~ 2 . 1 2 ) ) .  
In  the  case  of  SPKI, with  the  minor exception  of  the  in- 
tersection  of  *range and  * p r e f i x  actions,  the  license 
language is expressive enough.  One principle designers of 
new trust management systems should keep in mind is mak- 
ing the license language powerful enough to express all of 
the  monotone functions  that  are  needed  for certificate  re- 
duction. 
6.2  Proof checking vs. proof construction 
One  way  to  view  an  implementation  of  M,,,,q,,, is  that 
U ,  A )  = true, the engine has constructed a 
when MEnRlnr(p, 
proof that U  M ,,,, en,un., ( A )  ( p ) .  For several reasons, it may 
make more sense to require the client of the trust engine to 
provide the  proof  and  have  the  trust  engine  simply  check 
that  the  proof  is  valid  (as is done in  [2]).  First,  the  trust 
engine can be smaller and faster because proof checking is 
easier than computing the entire fixpoint.  Also, third-party 
modules can  be  introduced  that  find  the  proof  using  effi- 
cient, complex, or new methods. Finally, as part of a trusted 
computing base, having a simpler and more reliable engine 
increases overall security. 
We can model this approach within our framework using 
a slightly modified trust engine, MEnpmrPro,,,, 
that takes as in- 
put a ,finite sequence of  assertions  instead of an  unordered 
set of assertions. 
: Principal x Auth x Assertion* - Boo1 
MEnplnsPru,,, 
To  decide  if  M,,,,,,, =,", ( p , ~ ,  
[ a l , .  ..,a,]),  where  U ,   = 
( p l ,  1;),  the  trust  engine computes an  increasing sequence 
of authmaps mo, . . . , m, in the AuthMup lattice: 
mo  =I 
m2 = m,-1  U  [ P ~  H 4(m8-1)1 
The engine returns true if  U  5 m,(p).  It is easy to see that 
for all i, m, C M,,,cn,onJ(A), where A = { a l ,  . . . ,a,}.  That 
is, M,,,g,nepmru 
computes a lower bound to the fixpoint needed 
by  M,,,,,,.  By  the  pointwise  ordering  on  authmaps,  if 
nz  C MAAAer,,an,(A) 
From this it follows that if M,nw,nrpm&, U ,  [ a l ,  . . , a,]) then 
Mnx&, U ,  {al, .  . , a,}).  Thus,  MFnglnrPru0, 
never  autho- 
rizes a request unless M,,,,.,  would have authorized it. 
and U  C m(p) then U  C M,,,,,,,,,,,(A)(P). 
The framework in this paper can be used to explain exist- 
ing trust management systems and to help design new ones. 
It can provide a precise specification  of  the semantics of  a 
trust management system,  which  is important for building 
correct, interoperable implementations.  The least  fixpoint 
semantics  leads  to  implementations  of  trust  management 
engines.  The framework can  concisely  specify trust man- 
agement systems  by  an  authorization lattice and  language 
for licenses.  This makes it possible to compare the expres- 
siveness  of  systems.  It  also  makes  it  easier  to  assess  the 
applicability  of  a  system  to  a  given  situation  and  to  ana- 
lyze design tradeoffs among current and new systems.  The 
framework can also help to improve existing languages for 
expressing licenses by making them more regular and more 
expressive. 
There are some aspects of trust management systems that 
do not fit well within the framework. One example is REF- 
EREE  [8], in  which  the  trust  management engine directly 
interprets policies and credentials, without finding a fixpoint 
meaning.  It  is  also  impossible  to  express  non-monotonic 
systems.  It would be  interesting to explore generalizations 
of the framework that could encompass these systems. 
The  most  interesting technical  question  that  this  work 
raises is what are the right Aurh lattices to choose and what 
collections of monotone license functions should be used so 
that the trust management system is expressive enough and 
so that the trust management engine can efficiently approxi- 
mate the least fixpoint. In answering this question, there are 
likely to be useful insights from the field of abstract inter- 
pretation  [ IO],  a program analysis technique based  on  fix- 
point computation. 
8  Acknowledgements 
I  would  like  to  thank  Jim  Donahue, Neal  Clew,  Stu- 
art Haber, Jim Homing, Umesh Maheshwari, Jeff McDow, 
Radek Vingralek, and Andrew Wright for helpful comments 
on this work and on early drafts of the paper.  I would  also 
like to thank  Xavier  Serret-Avila  for  helping  me  to  learn 
SPKI and  for collaborating  on  the  SPKI implementation. 
Finally, I  would  like to  thank  the  anonymous referees  for 
helpful suggestions that provided the basis of Section 6. 
A  Notation and mathematical background 
This section  introduces  the  notation  and  mathematical 
background used  throughout the paper.  Capitalized names 
in italic font indicate sets, for example, Int is the set of inte- 
gers. Lower case letters typically denote elements of sets, as 
in i  E Int. The power set of the integers is denoted 'P(1nt). 
103 
Upper case letters typically range over elements of a power 
set, as in I  E  P ( 1 n t ) .  The cardinality  of a set A is denoted 
curd(A).  If  A  and  B  are sets, then  A + B, A  x  B, and 
A  -+  B are the  disjoint sum, Cartesian product, and  set 
of partial functions from A to B, respectively.  If A is a set, 
then A* denotes the set of finite sequences of elements of A. 
In expressions denoting sets, the operator precedence (in de- 
creasing order) is *,  x, -,  +. An element of A x B x C is 
denoted (a, b, c). An element of A* is denoted [an, a l ,  az]. 
The expression  [a1 H b l ,  a2  H bz, . . .] denotes the  func- 
f ( a 2 )  = bz, .... 
tion f in A - 
B such that  f ( a 1 )  = b ~ ,
- B that 
The expression Xu. e denotes the function in A 
when applied to an argument a  E  A, returns the result  of 
expression e, which may refer to a, and denotes an element 
of  B. For example, X i .  i + 1 is the  function that  adds one 
to its argument.  The expression f(a) denotes the applica- 
tion of function f to argument a. The inner () is dropped in 
f ( ( a ,  b, c ) ) ,  which is written as f ( a ,  b, c). Function applica- 
tion associates to the left and 
associates to the right. For 
example, i f f   = X i .  X j .  i - j ,  then f  E Int 
Int 
and f ( 7 ) ( 5 )  = 2. 
- 
- 
- 
Int 
A  binary  relation  5 on  A  is  a  subset of  A  x  A.  The 
a’  denotes (a,a’)  E C. The relation  C is 
expression a 
a for all U  E A, transitive if a  5 a”  when- 
reflexive if a 
ever a  C: a’  and  a’  &  a”,  and anti-symmetric if  a  = a’ 
whenever a C a’  and a’  5 a. A partial order is a set A and 
a relation C that is reflexive, transitive, and anti-symmetric. 
In a partial  order,  U  is an upper bound of a subset A’  C A 
if  for all a’  E  A’,  a’  C: a.  A  least upper bound of A’, de- 
noted  UA’, is an  upper bound  U of  A’  such that  a  5 an 
bound, denoted n, is defined  analogously.  A  lattice  is  a 
whenever a0  is  an upper bound of  A’. The greatest lower 
partial  order  in  which  every  subset  A’  C A  has  a  least 
upper bound.  The least element of  a  lattice  is denoted by 
I, and is equal to U{}. If  A  is a set then  P ( A )  is a lat- 
tice,  where A’  C: A”  iff A’  C A’’  and U {Ai  I i E I }  = 
U {Ai  I i  E I } .  If A and B are lattices then A x B is a lat- 
tice,  where  ( a , b )  C_  (a’,b’) iff  a  C a’  and  b  &  b’,  and 
U{(.z,bi) 
l i E I ) , U { b ,   I i E I ) ) .  
the pointwise ordering, where f 5 g iff f(a) C g(a) for all 
a  E  A and where U { f z  I  i  E I }  = Xa. U { f z ( a )  I  i  E I } .  
A function f  from a partial order A to a partial  order B 
f ( a ’ )  whenever a  C_ a’.  The set of 
is nzonofone if  f ( a )  
monotone functions from A to B is written  A -, B. If 
f  E  A  -+  A, then a  is a fixpoint o f f   if  f(a) = a. If  A 
is a partial  order, then a leastjixpoint of  f ,  written  Ifp(f), 
is a fixpoint a such that a C a’ whenever a’ is a fixpoint of 
f .  I f f   has a least fixpoint, it is unique. If A is a lattice and 
f  E  ,4 -, A, then f always has a least fixpoint. 
A chain in a partial order (A, &) is a sequence of a, E  A 
such that for all a, a, C az+l. If A and B are partial  orders 
and f  E  A -, B, then f  is continuous if for every chain 
If A is a set and B is lattice, then A - B is a lattice under 
I i E I )   =  (U{.i 
a , i n A , f ( U { a ,   I i E I } )  = u { f ( a 2 )  l i E I } .  Define 
f’(u)  = f ( a )  and for all i, f”+’(u)  = f ( f ’ ( a ) ) .  Then, if 
f is continuous, the least fixpoint of j  is given by I f p ( f )  = 
U { f z ( ( l )  I i  E Int }.  If  the  elements of  the  lattice  A  are 
representable and  f  is  computable  and  for some i, f’(1. 
)  = f 2 + l ( l ) ,  then  this gives  us a method  for computing 
f2(1), f3(1), etc.  until 
~ f p ( f ) ;  namely,  compute fl(l), 
the sequence converges. 
References 
[ I ]   M. Abadi, M. Burrows, B. Lampson, and G. Plotkin. A cal- 
culus for access control in distributed systems. In J. Feigen- 
baum, editor, Advances in Cryptology -  CRYPT0  ’91, 11th 
Annual  International  Cryptology  Conference, pages  1-23, 
Aug. 1991. LNCS 576. 
[2]  A.  W.  Appel  and E. W.  Felten.  Proof-carrying authentica- 
tion.  In 6th ACM  Conference on Computer and  Communi- 
cations Security, Nov.  1999. 
[3]  D. Balfanz, D. Dean, and M. Spreitzer. A security infrastruc- 
ture for distributed Java applications. In Proceedings of the 
21st IEEE Symposium on Security and Privacy, May 2000. 
[4]  M. Blaze, J. Feigenbaum, J. Ioannidis, and A. D. Keromytis. 
The  KeyNote  trust-management system version  2.  RFC 
2704, Sept. 1999. 
[5] M. Blaze, J. Feigenbaum, and A.  D. Keromytis.  KeyNote: 
Trust  management  for public-key  infrastructures.  Lecture 
Notes in Computer Science, 155059-63,  1999. 
[6]  M. Blaze, J. Feigenbaum, and  J.  Lacy.  Decentralized trust 
management.  In  Proceedings of  the IEEE Symposium  on 
Research  in  Security  and  Privacy,  Research  in  Security 
and Privacy, Oakland, CA, May  1996. IEEE Computer So- 
ciety,Technical Committee on  Security and  Privacy, IEEE 
Computer Society Press. 
[7]  M. Blaze, J.  Feigenbaum, and  M.  Strauss.  Compliance- 
checking in the PolicyMaker trust-management system.  In 
Proc.  2nd  Financial  C r y t o  Conference,  pages  25 1-265. 
Springer-Verlag, 1998. LNCS 1465. 
[8]  Y.-H.  Chu, J. Feigenbaum, B.  LaMacchia, P.  Resnick, and 
M.  Strauss.  REFEREE: Trust  management  for  Web  ap- 
plications.  Computer Networks and  ISDN  Systems, 29(8- 
13):953-964, Sept. 1997. 
[9]  D.  Clarke,  J.-E.  Elien,  C.  M.  Ellison,  M.  Fre- 
Certfi- 
Available  at 
NOV. 
dette,  A.  Morcos,  and  R.  L.  Rivest. 
cate  chain  discovery  in  SPKUSDSI. 
h t t p / / t h e o r y . l c s . m i t . e d u / ” r i v e s t / ,  
1999. 
[IO]  P.  Cousot and R. Cousot.  Abstract interpretation: a unified 
lattice model  for  static analysis of  programs  by  construc- 
tion or approximation of  fixpoints.  In ACM  Symposium on 
Principles of Programming  Languages, pages 238-252,  Jan. 
1977. 
[ 1 I ]   J.-E. Elien.  Certificate discovery using SPKIlSDSI 2.0 cer- 
tificates.  Master’s thesis, Massachusetts Institute of  Tech- 
nology, May  1998. 
[I21  C. M. Ellison. SPKI requirements. RFC 2692, Sept. 1999. 
104 
[I31  C. M.  Ellison, B. Frantz, B. Lampson, R. L. Rivest, B. M. 
Thomas, and T. Ylonen. SPKI certificate theory.  RFC 2693, 
Sept. 1999. 
[14]  C.  M.  Ellison,  B.  Frantz,  B.  Lampson,  R.  L. 
Sim- 
Available  at 
Rivest,  B. M.  Thomas, 
ple  public  key  certificate,  July  99. 
http://www.pobox.com/-cme/spki.txt. 
and  T.  Ylonen. 
[ 151  J. Howell and D. Kotz.  A formal semantics for SPKI. Tech- 
nical  Report  2000-363,  Department  of  Computer  Science, 
Dartmouth College, Hanover, NH, Mar. 2000. 
[ 161  N. Li. Local names in SPKI/SDSI 2.0. In Proceedings of  the 
13th IEEE Cornputer Security Foundations  Workshop, July 
2000. 
[I71  N. Li,  B.  N.  Grosof,  and  J.  Feigenbaum.  A  logic-based 
knowledge representation for authorization with  delegation 
(extended abstract).  In Proceedings  of the 121h IEEE Corn- 
puter Security Foimd(ztions Workshop, pages 162-1 74. IEEE 
Computer Society Press, 1999. 
[IS]  Y.  Mass  and  A.  Herzberg. 
Access  control:  meets 
Assigning  d e s   to. 
infrastructure  or: 
public  key 
In  Proceedings  of  d e   2lst:  IEEE  S:ympo- 
strangers. 
siirrn  on  Security  arid  Privacy;  May. 200@  Avaidable at 
http://www.hxl.iil.ibm..corm/: 
TrustEstabIlsKment/default.asp. 
11931 R  L.. Rivest  and  B. Lampsan. 
SDSI  - A  simple  dis- 
tributed  security  infrastructure,  Oct.  1996.  Available  at 
http://theory.lcs.mit.edu/lcis/sdsi.html. 
[20]  1.  T.  Union.  ITU-T recommendation  X.509  (08/97) - in- 
formation technology - open systems interconnection - the 
directory: Authentication framework, Aug.  1997. 
[21]  E. Wobber,  M.  Abadi,  M. Burrows, and E. Lampson.  Au- 
thentication  in  the Taos operating  system.  ACiZ.1 Transnc- 
rims on Conzpurer Systeiiis,  12( l):3-32,  Feb. 1994. 
[22]  P. Zimmerman.  The Qficial PCP User's Guide. MIT Press, 
Cambridge, 1995. 
105