.\" we don't have an rpc_secure.3 page in the set at the moment -- mtk, 19 sep 05
.\" .br rpc_secure (3),
.br xdr (3)
.pp
the following manuals:
.rs
remote procedure calls: protocol specification
.br
remote procedure call programming guide
.br
rpcgen programming guide
.br
.re
.pp
.ir "rpc: remote procedure call protocol specification" ,
rfc\ 1050, sun microsystems, inc.,
usc-isi.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"   iso/iec 9899:1999
.\"
.th wcscmp 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
wcscmp \- compare two wide-character strings
.sh synopsis
.nf
.b #include 
.pp
.bi "int wcscmp(const wchar_t *" s1 ", const wchar_t *" s2 );
.fi
.sh description
the
.br wcscmp ()
function is the wide-character equivalent
of the
.br strcmp (3)
function.
it compares the wide-character string pointed to by
.i s1
and the
wide-character string pointed to by
.ir s2 .
.sh return value
the
.br wcscmp ()
function returns zero if the wide-character strings at
.i s1
and
.i s2
are equal.
it returns an integer greater than zero if
at the first differing position
.ir i ,
the corresponding wide-character
.i s1[i]
is greater than
.ir s2[i] .
it returns an integer less than zero if
at the first differing position
.ir i ,
the corresponding wide-character
.i s1[i]
is less than
.ir s2[i] .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br wcscmp ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh see also
.br strcmp (3),
.br wcscasecmp (3),
.br wmemcmp (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1993 by thomas koenig (PI:EMAIL)
.\" and copyright 1999 by bruno haible (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" modified sat jul 24 18:20:12 1993 by rik faith (PI:EMAIL)
.\" modified tue jul 15 16:49:10 1997 by andries brouwer (PI:EMAIL)
.\" modified sun jul  4 14:52:16 1999 by bruno haible (PI:EMAIL)
.\" modified tue aug 24 17:11:01 1999 by andries brouwer (PI:EMAIL)
.\" modified tue feb  6 03:31:55 2001 by andries brouwer (PI:EMAIL)
.\"
.th setlocale 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
setlocale \- set the current locale
.sh synopsis
.nf
.b #include 
.pp
.bi "char *setlocale(int " category ", const char *" locale );
.fi
.sh description
the
.br setlocale ()
function is used to set or query the program's current locale.
.pp
if
.i locale
is not null,
the program's current locale is modified according to the arguments.
the argument
.i category
determines which parts of the program's current locale should be modified.
.ad l
.nh
.ts
lb lb
lb lx.
category	governs
lc_all	all of the locale
lc_address	t{
formatting of addresses and
geography-related items (*)
t}
lc_collate	string collation
lc_ctype	character classification
lc_identification	t{
metadata describing the locale (*)
t}
lc_measurement	t{
settings related to measurements
(metric versus us customary) (*)
t}
lc_messages	t{
localizable natural-language messages
t}
lc_monetary	t{
formatting of monetary values
t}
lc_name	t{
formatting of salutations for persons (*)
t}
lc_numeric	t{
formatting of nonmonetary numeric values
t}
lc_paper	t{
settings related to the standard paper size (*)
t}
lc_telephone	t{
formats to be used with telephone services (*)
t}
lc_time	t{
formatting of date and time values
t}
.te
.hy
.ad
.pp
the categories marked with an asterisk in the above table
are gnu extensions.
for further information on these locale categories, see
.br locale (7).
.pp
the argument
.i locale
is a pointer to a character string containing the
required setting of
.ir category .
such a string is either a well-known constant like "c" or "da_dk"
(see below), or an opaque string that was returned by another call of
.br setlocale ().
.pp
if
.i locale
is an empty string,
.br """""" ,
each part of the locale that should be modified is set according to the
environment variables.
the details are implementation-dependent.
for glibc, first (regardless of
.ir category ),
the environment variable
.b lc_all
is inspected,
next the environment variable with the same name as the category
(see the table above),
and finally the environment variable
.br lang .
the first existing environment variable is used.
if its value is not a valid locale specification, the locale
is unchanged, and
.br setlocale ()
returns null.
.pp
the locale
.b """c"""
or
.b """posix"""
is a portable locale;
it exists on all conforming systems.
.pp
a locale name is typically of the form
.ir language "[_" territory "][." codeset "][@" modifier "],"
where
.i language
is an iso 639 language code,
.i territory
is an iso 3166 country code, and
.i codeset
is a character set or encoding identifier like
.b "iso\-8859\-1"
or
.br "utf\-8" .
for a list of all supported locales, try "locale \-a" (see
.br locale (1)).
.pp
if
.i locale
is null, the current locale is only queried, not modified.
.pp
on startup of the main program, the portable
.b """c"""
locale is selected as default.
a program may be made portable to all locales by calling:
.pp
.in +4n
.ex
setlocale(lc_all, "");
.ee
.in
.pp
after program initialization, and then:
.ip \(bu 2
using the values returned from a
.br localeconv (3)
call for locale-dependent information;
.ip \(bu
using the multibyte and wide character functions for text processing if
.br "mb_cur_max > 1" ;
.ip \(bu
using
.br strcoll (3)
and
.br strxfrm (3)
to compare strings; and
.ip \(bu
using
.br wcscoll (3)
and
.br wcsxfrm (3)
to compare wide-character strings.
.sh return value
a successful call to
.br setlocale ()
returns an opaque string that corresponds to the locale set.
this string may be allocated in static storage.
the string returned is such that a subsequent call with that string
and its associated category will restore that part of the process's
locale.
the return value is null if the request cannot be honored.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br setlocale ()
t}	thread safety	mt-unsafe const:locale env
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c89, c99.
.pp
the c standards specify only the categories
.br lc_all ,
.br lc_collate ,
.br lc_ctype ,
.br lc_monetary ,
.br lc_numeric ,
and
.br lc_time .
posix.1 adds
.br lc_messages .
the remaining categories are gnu extensions.
.sh see also
.br locale (1),
.br localedef (1),
.br isalpha (3),
.br localeconv (3),
.br nl_langinfo (3),
.br rpmatch (3),
.br strcoll (3),
.br strftime (3),
.br charsets (7),
.br locale (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/termios.3
.so man3/pow.3
.\" copyright (c) 1990, 1991 the regents of the university of california.
.\" and copyright (c) 2020 arkadiusz drabczyk 
.\" all rights reserved.
.\"
.\" this code is derived from software contributed to berkeley by
.\" chris torek and the american national standards committee x3,
.\" on information processing systems.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"     @(#)fread.3	6.6 (berkeley) 6/29/91
.\"
.\" converted for linux, mon nov 29 15:37:33 1993, PI:EMAIL
.\" sun feb 19 21:26:54 1995 by faith, return values
.\" modified thu apr 20 20:43:53 1995 by jim van zandt 
.\" modified fri may 17 10:21:51 1996 by martin schulze 
.\"
.th fread 3  2021-03-22 "gnu" "linux programmer's manual"
.sh name
fread, fwrite \- binary stream input/output
.sh synopsis
.nf
.b #include 
.pp
.bi "size_t fread(void *restrict " ptr ", size_t " size ", size_t " nmemb ,
.bi "             file *restrict " stream );
.bi "size_t fwrite(const void *restrict " ptr ", size_t " size \
", size_t " nmemb ,
.bi "             file *restrict " stream );
.fi
.sh description
the function
.br fread ()
reads
.i nmemb
items of data, each
.i size
bytes long, from the stream pointed to by
.ir stream ,
storing them at the location given by
.ir ptr .
.pp
the function
.br fwrite ()
writes
.i nmemb
items of data, each
.i size
bytes long, to the stream pointed to by
.ir stream ,
obtaining them from the location given by
.ir ptr .
.pp
for nonlocking counterparts, see
.br unlocked_stdio (3).
.sh return value
on success,
.br fread ()
and
.br fwrite ()
return the number of items read or written.
this number equals the number of bytes transferred only when
.i size
is 1.
if an error occurs, or the end of the file is reached,
the return value is a short item count (or zero).
.pp
the file position indicator for the stream is advanced by the number
of bytes successfully read or written.
.pp
.br fread ()
does not distinguish between end-of-file and error, and callers must use
.br feof (3)
and
.br ferror (3)
to determine which occurred.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br fread (),
.br fwrite ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c89.
.sh examples
the program below demonstrates the use of
.br fread ()
by parsing /bin/sh elf executable in binary mode and printing its
magic and class:
.pp
.in +4n
.ex
$ \fb./a.out\fp
elf magic: 0x7f454c46
class: 0x02
.ee
.in
.ss program source
\&
.ex
#include 
#include 
#define array_size(arr) (sizeof(arr) / sizeof((arr)[0]))
int
main(void)
{
    file *fp = fopen("/bin/sh", "rb");
    if (!fp) {
        perror("fopen");
        return exit_failure;
    }
    unsigned char buffer[4];
    size_t ret = fread(buffer, sizeof(*buffer), array_size(buffer), fp);
    if (ret != array_size(buffer)) {
        fprintf(stderr, "fread() failed: %zu\en", ret);
        exit(exit_failure);
    }
    printf("elf magic: %#04x%02x%02x%02x\en", buffer[0], buffer[1],
           buffer[2], buffer[3]);
    ret = fread(buffer, 1, 1, fp);
    if (ret != 1) {
        fprintf(stderr, "fread() failed: %zu\en", ret);
        exit(exit_failure);
    }
    printf("class: %#04x\en", buffer[0]);
    fclose(fp);
    exit(exit_success);
}
.ee
.sh see also
.br read (2),
.br write (2),
.br feof (3),