is a call state, all preconditions
of rule Equation (C1)
αs(s′′, c∗.addr, cℓ′′) ∪
isfied. More
MStates′′.µ .pc+1 ((|s′′.µ.s|
δ(c∗)
⊢
−
6, stackToArray(s′′.µ.s)[|s′′.µ.s| − 7
→
⊤]), λx . ⊤, λx . ⊤)
p. We know additionally
that αs(s′′′, c∗.addr, cℓ′′) = MStates′′′.µ .pc ((|s′′′.µ.s|,
stackToArray(s′′′.µ.s)), toWordMem(s′′′.µ.m),
s′′′.µ.σ(c∗.addr).stor) Since s′′′.µ.pc = s′′.µ.pc + 1,
|s′′′.µ.s|
|s′′.µ.s| − 6 and for all
∈
{0, . . . , |s′′.µ.s| − 8} we have s′′.µ.s[i] = s′′.µ.s[i],
it holds that p ≥ αs(s′′′, c∗.addr, cℓ′′) (since λx . ⊤
is the top element for mappings f ∈ N → ˆD
and ⊤ ≥ s′′′.µ.s[0], cf. Lemma B.4). So since
α(S∗) ∪ δ(c∗) ⊢ p there is by the monotonicity of δ(c∗)
(Theorem B.17) some ∆p such that ∆S∗ ∪ δc∗ ⊢ ∆p and
∆p ≥ p. Consequently we can conclude the proof:
∆S∗ ∪ δ(c
precisely
=
=
i
∗) ⊢ ∆p ∪ ∆S∗
≥ {p} ∪ α(S
′′′
∗
≥ αs(s
, c
′)
= α(S
∗)
.addr, cℓ
′′) ∪ α(S
†)
The same arguments apply for returning from exceptional
halting.
□
C CHECKING SECURITY PROPERTIES WITH
ETHOR
In this section, we discuss how the security properties presented
in § 2.3 are implemented in eThor using HoRSt. In particular, we
explain how reachability properties can be abstracted as queries
using the example of the call reachability property. Afterwards ,
we illustrate the infrastructure for proving functional correctness
queries as well as the one for automated soundness and precision
testing.
∗) ⊢ ∆S∗ ∪ ∆H ∪ δ(c
∗)
⊢ ∆S∗ ∪ ∆x
≥ α(S
= α(S
∗) ∪ αs((µ
′)
′
′
, ι
, σ
′
, η), c
∗
.addr,(S
∗ (cid:44) ϵ))
∆S∗ ∪ δ(c
12See Footnote 11
C.1 From reachability properties to queries
All reachability properties introduced in § 3.5 can be seen as in-
stances of properties of the following form:
R(P, R) := ∀s . P([s]) =⇒ ¬∃S′
, Γ ⊨ sc∗ :: S →∗ S′ ++ S ∧ R(S′)
13See Footnote 11
25
Accepted for ACM CCS, 2020
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
where s is assumed to be strongly consistent with c∗ and S′ is
assumed to be non-empty. We will refer to properties of this form
in the following as unreachability properties.

S′∈R αc∗(S′) and αc∗(P) for[sc∗]∈P αc∗([sc∗]).
For the sake of presentation, we will in the following inter-
pret predicates P, R as the sets of those elements satisfying these
predicates. Additionally, we will overload the abstraction function
α to operate on sets of configurations hence writing αc∗(R) for
Following Theorem 3.1 for proving such properties it is sufficient
to give some set ∆P such that ∆P ≥ αc∗(P) and to show, for any set
∆R over-approximating αc∗(R) that ∆P ̸⊢ ∆R. Instead of showing
this property for all possible sets ∆R, it is sufficient to find a query
set ∆query that shares at least one element with all possible sets ∆R:
(7)
∀∆R . ∆R ≥ αc∗(R) =⇒ ∆R ∩ ∆query (cid:44) ∅
Proving ∆R , δ(c∗) ̸⊢ ∆query then implies that R(P, R) holds.
Under certain conditions, such a set can be easily constructed
from R as follows:
∆query(R) := {p′ | ∃p . p ∈ αc∗(R) ∧ p ≤p p′}
(8)
Intuitively, it is sufficient to query for the most concrete abstraction
(as given by α∗
c ) of the concrete configurations in R and all predicate-
wise (≤p) coarser abstractions of those. The set ∆query(R) however
is only a valid query set for R if for some S′ ∈ R it holds that
αc∗(S′) is non-empty. Otherwise Equation (7) is trivially violated.
Intuitively this means that that only postconditions R that make
some restrictions on those callstack components that are modeled
by the analysis (namely executions of contract c∗) can be reasonably
analyzed using this technique. We formally state this property in
the following lemma:
Lemma C.1. Let Ss ⊆ C × C be a small step semantics and
(D,S, α, Λ) a sound abstraction thereof. Furthermore let P, R ⊆ C
be predicates on configurations and ∆P be an abstract configuration
such that ∆P ≥ α(P). Then if there is some c′ ∈ R such that α(c′) (cid:44) ∅
it holds that
∆P , Λ ̸⊢ ∆query(R) =⇒ R(P, R)
As a consequence, it is generally sufficient to query for the reach-
ability of ∆query(R) in order to prove an unreachability property
R(P, R).
We will next show how this theoretical result can be used in
practice and in particular at the level of HoRSt.
Initialization. For checking an unreachability property R(P, R),
we need to show the non-derivability of a valid query set ∆query
from some abstract configuration ∆P ≥ α(P). Hence we need to
axiomatize such an abstract configuration ∆P . This can be easily
done in HoRSt by providing rules having true as a single premise. For
axiomatizing that the execution starts in an initial machine state
as required for the call unreachability property defined in Defini-
tion 3.2 we can add the following rule to the analysis specification:
1 rule initOp :=
2
3
clause
true => MState {0}(0 , [ @V (0) ], [ @V (0) ], [ @T ], false );
As the precondition P of the call unreachability property requires
the top state s (that also serves as the zero-bar for the call level) to
be initial, α(s) can contain only predicate applications of the form
MState0((0, λx . 0), λx . 0, m, 0) where m is some memory mapping.
However, λx . ⊤ (corresponding to [@T]) over-approximates all mem-
ory arrays and hence ∆P = {MState0((0, λx . 0), λx . 0, λx . ⊤, 0)} ≥
α(P).
Queries. In addition to syntax for writing an analysis specification,
HoRSt also provides mechanisms for the interaction with the under-
lying SMT-solver. More precisely it supports syntax for specifying
queries and tests. Syntactically, queries consist of a list of premises
(as in a clause). A query leads to the invocation of the SMT solver
to test whether conjunction of those premises is derivable from the
given initialization using the specified rules. The query will result
in SAT in case that all premises are derivable and in UNSAT in case
that the conjunction of premises can be proven to be non-derivable.
In order to check for reachability of abstract configurations,
HoRSt allows for the specification of (reachability) queries that can
also be generated from selector functions. The query shown in
Figure 15 for instance checks for reentrancy by checking if any
CALL instruction is reachable at call level 114. It therefore is an
implementation of the reachability property introduced in § 3.5.
This query can be obtained from the call unreachability property
defined in Definition 3.2 which is of the form R(P, R) with R :=
{sc∗ :: S′ | |S′| > 0 ∧ c∗.code[s, µ.pc] ∈ Instcall}. Intuitively, we can
split this property into a set of different properties R(P, Ri) where
i ranges over the set of CALL instructions in c∗. More precisely, let
Ri := {sc∗ :: S′ | |S′| > 0 ∧ s, µ.pc = i} then it holds that
.code[i] ∈ Instcall}. R(P, Ri)
R(P, R) ⇔ ∀i ∈ {i | c∗
.
Then each instance of the reentrancyCall query specifies one query set
∆iquery that satisfies Equation (7) for Ri. Hence showing the underiv-
ability of all those sets from ∆P proves the claim. Intuitively, ∆iquery
satisfies Equation (7) for Ri because α∗
c(Ri) contains an application
of a predicate MStatei with argument cℓ = 1 and so it needs to con-
tain all abstractions of ∆Ri ≥ α∗
c(Ri) as the cℓ component ranging
over B cannot further be abstracted. Consequently, the set ∆iquery,
which contains all predicates of that form, has a trivial intersection
with ∆Ri
C.2 Functional correctness
For checking functional correctness, some modifications to the
abstract semantics are necessary.
This is as the different contract executions need to be bound the
the corresponding input data of the call and since we want to reason
about return data. We will in the following shortly overview the
relevant changes and motivate that similar modifications can easily
be incorporated for reasoning about other dependencies with the
execution or blockchain environment. We will present the relevant
modifications in HoRSt syntax so that the explanations serve as a
guide to the enhanced version of the semantics [6].
First, the relevant predicates need to be enriched with a corre-
sponding representation of the call data. We decided to represent
call data as a word array with the particularity that the array’s first
element represents only 4 bytes. This is due to the call conventions
enforced by the Solidity compiler which interpret the first 4 bytes of
input data as the hash of the called function’s signature to properly
14To be fully correct there are also corresponding queries for the other relevant call
instructions CREATE and STATICCALL.
26
eThor: Practical and Provably Sound Static Analysis
of Ethereum Smart Contracts
dispatch function calls. In addition to the call data, we introduce a
new predicate representing the return data of a call.
Formally, we arrive at the following predicate definitions:
1 datatype CallData := @D  >;
2 pred MState { int * int }: int * array  * array  *
array  * bool * CallData ;
3 pred Exc { int }: bool ;
4 pred Halt { int }: array  * AbsDom * bool * CallData ;
5 pred ReturnData { int }: int * AbsDom * bool * CallData ;
Note that we represent call data as a tuple of its size and an array
of abstract words. Also, we added to the Halt predicate an argument
representing the return data size. This argument stems from the
abstract domain with @T indicating that the concrete size of the
return data is unknown. The ReturnData predicate maps the positions
of the return data (word) array to the corresponding values that it
holds.
The existing rules simply propagate the the call data array with
the only addition that the CALLDATALOAD instruction now ac-
cesses the call data array instead of over-approximating the loaded
value. The new rule for CALLDATALOAD is depicted in Figure 16.
The CALLDATALOAD operation takes as argument a value from
the stack that specifies the byte position starting from which one
word of the call data byte array shall be loaded (to the stack). The
rule is split into two clauses for taking advantage of the pre-analysis.
More precisely, in case that the position of call data to is known up-
front, the call data array ?call can be assessed more precisely. Since
we model the call data as a word instead of a byte array (similar
to our memory abstraction), either a word loaded from it consists
of a full word in the word array or needs to be composed out of
two neighboring words. Composing to integers (interpreting them
as byte arrays) however requires exponentiation as defined in the
append function in § B.2. z3 is not able to handle general exponen-
tiation - for this reason we can only compute such exponentiations
(by unfolding to multiplications) whose exponent is known upfront.
Consequently, the first rule in Figure 16 handles the case where the
argument to the call is known upfront: the accessWordCallData function
expects the position as a parameter and computes the accessed
word precisely from the call data array since exponentiation can
be unrolled. The second rule handles the case where the argument
to the call is not known upfront. In case that during the analysis
it can be detected to be concrete (by the function isConcrete), the
accessWordCalldataEven function is used to access the call data at the cor-
responding position. This function however only yields a precise
result in case that the provided position corresponds to the begin-
ning of a word in the calldata array, otherwise it over-approximates
the result as T.
The ReturnData predicate is inhabited by the rules that model regu-
lar halting. We exemplarily show the rule of the RETURN opcode
depicted in Figure 17.
The RETURN instruction in EVM reads a memory offset and
length from the stack and returns the corresponding memory frag-
ment as byte array. In our abstraction the return data is modeled
by an own predicate that holds words instead of bytes. This design
choice follows the one made for the word-indexed memory and
the call data array which hold words instead of bytes as well for
performance reasons. The RETURN semantics is closely reflected
in the abstract RETURN rule: the first clause of the rule inhabits
the Halt predicate, reading the size of the return data from the stack.
Accepted for ACM CCS, 2020
The next three clauses inhabit the ReturnData predicate, differentiating
depending on how much information on the return data (size and
memory offset) are known: If both memory offset and length of the
data are known, for each word position ?p the corresponding mem-
ory word is read from the memory array ?mem (using the function
accesswordMemoryEven) and written into the ReturnData predicate. The next
clause describes the case where the memory offset is unknown,
but the size of the return data is known. In this case we cannot
know which (concrete values) form the return data, but can only
approximate all possible return data words (as determined by the
size of the array) with @T. The last clause covers the case where the
length of the return data is not known. Since it is fully unclear in
this case whether data should be returned in the first place (since
the length could be 0), all potential positions of the return data
array are over-approximated by @T.
Finally, the functional correctness queries for the addition func-
tion of the SafeMath library can be posed as follows:
1 op callAdd (x: int , y: int ): CallData :=
2 @D (68 , store ( store ( store [ @T ] 0 @V (1997931255) ) 1 ( @V (x))) 2
( @V (y)));
3
4
5 test addOverflowNoHalt expect UNSAT
6
7
for (! id : int ) in ids ()
rdsize : AbsDom ]
[? x: int , ?y: int , ?z: int , ?p: int , ? stor : array , ?
?x >= 0,
?y >= 0,
?x = MAX ,
Halt {! id }(? stor , ? rdsize , false , callAdd (?x , ?y));
8
9
10
11
12
13
14
15 test addNoOverflowCorrect expect SAT
16
17
for (! id : int ) in ids ()
[? res : AbsDom , ?x: int , ?y: int , ?z: int , ? rdsize : AbsDom , ?
stor : array ]
?x >= 0,
?y >= 0,
?x + ?y < MAX ,
ReturnData {! id }(0 , ? res , false , callAdd (?x , ?y)) ,
Halt {! id }(? stor , ? rdsize , false , callAdd (?x , ?y)) ,