546
现在我们准备写HeartController
547
MVC与Web
549
设计模式和Model2
557
设计箱内的工具
560
习题解答
561
xxiv
---
## Page 35
13
与设计模式相处
真实世界中的模式
现在你已经准备好迎接一个充满设计模式的崭新世界。但
是，在你打开所有的机会大门之前，我们需要告诉你一些即将在真实世界中
遇到的细节一一没错，外面的世界比对象村来得复杂。来吧！从下页开始，我
们会指引你的方向
对象村指南
578
定义设计模式
579
更近地观察设计模式的定义
581
愿力与你同在
582
模式类目
583
如何创建模式
586
与设计模式相处
想当一个设计模式作家吗？
587
组织设计模式
589
用模式思考
594
使用模式的心智
597
别忘了共享词汇的威力
599
sEue*et *tie' 9hRR8.
共享词汇的五种方式
600
和四人组一同巡游对象村
601
你的旅途刚刚开始…
602
其他设计模式资源
603
模式动物园
09
以反模式歼灭恶势力
606
设计箱内的工具
608
离开对象村…
609
四人组
A
PDG
XXV
---
## Page 36
A
附录A：剩下的模式
并非每个人都广受欢迎。过去10年来，事情改变了许多。自从《设计模
式：可复用面向对象软件的基础》一书出版之后，开发人员就开始大量地采用这
些模式。我们在此附录中所介绍的模式，都是成熟、典型、正式的四人组模式，
只不过可能不像前面章节所探索的模式那么经常地被使用。但是这些模式本身也
有相当可取之处，而如果你遇到了合适的情形，也应当毫不犹豫地采用它们。我
们在此的目标，是希望能够让你通盘了解这些模式的意义。
桥接
612
做的基情、就是加入=个
μrStateO(不a
生成器
614
责任链
616
蝇量
618
A
解释器
620
+
请问者
中介者
622
备忘录
624
原型
626
访问者
628
料
索引
631
!AXX
---
## Page 37
1设计模式入门
欢迎来到
设计模式世界
我们已经搬到对象村，刚刚开始幕
手设计模式这里每个人都在
使用设计模式。很快我们就会通
过设计模式路身上该社会。
有些人已经解决你的问题了。在本章，你将学到为何（以及如何）
利用其他开发人员的经验与智慧。他们遭遇过相同的问题，也顺利地解决过这些
问题。本章结束前，我们会看看设计模式的用途与优点，再看一些关键的O0设计
原则，并通过一个实例来了解模式是如何运作。使用模式最好的方式是：“把模
式装进脑子里，然后在你的设计和已有的应用中，寻找何处可以使用它们。”以
往是代码复用，现在是经验复用。
这是新的一章
---
## Page 38
模拟鸭子
先从简单的模拟鸭子应用做起
Joe上班的公司做了一套相当成功的模拟鸭子游戏：
SimUDuck。游戏中会出现各种鸭子，一边游泳戏水，一边呱
呱叫。此系统的内部设计使用了标准的OO技术，设计了一个鸭
子超类（Superclass），并让各种鸭子继承此超类。
所有的鸭子都会弧呱
Duck
叫（Quack）也会游泳
quack0
（Swim），所以由超类
swim(
负责处理这部分的实
因为每一种鸭子的
display()
现代码。
外观都不同，所以
Ⅱ鸭子的其他方法
display()方法是抽象的。
每个鸭子子类
MallardDuck
RedheadDuck
许多其他类型的鸭子继承
型
(subtype)
display0 (
display() {
Duck类。
责实现自己的
外观是绿头}
I外观是红头}
display(）行为在
妮。
去年，公司的竞争压力加剧。在为期一周的高尔夫假期兼头脑风
暴会议之后，公司主管认为该是创新的时候了，他们需要在“下
周”毛伊岛股东会议上展示一些“真正”让人印象深刻的东西来振
奋人心。
PDG
2
第1章
---
## Page 39
设计模式入门
现在我们得让鸭子能飞
主管们确定，此模拟程序需要会飞的鸭子来将竞争者抛在
后头。当然，在这个时候，Joe的经理拍胸脯告诉主管们，
Joe只需要一个星期就可以搞定。“毕竞，Joe是一个OO程序
员这有什么困难？
我只需要在Vuek类中加上
flyl方法，然后所有鸭子都会继永
flyl。这是我大显身手，展示00才
华的时候了。
我们想要的
Duck
quack()
swim()
display0
fly()
oe加上的
所有的子
I鸭子的其他方法….…
类都会继
承ly()
MallardDuck
RedheadDuck
其他的鸭子类型
} (Kejdsip
display0 (
Ⅱ外观是绿头]
外观是红头}
PDG
你现在的位置
3
---
## Page 40
事情出错了
但是，可怕的问题发生了····
Joe，我正在股东会议上，
刚刚看了一下展示，有很
多“橡皮鸭子”在扉幕上飞来飞去，
这是你在开玩笑吗？你可能要开始去趣
速Monster.com（编注：美国最大的求职
网站）了.….
怎么回事？
Joc忽略了一件事：并非Duck所有的子
类都会飞。Joe在Duck超类中加上新
好吧！我承认设计中有一点小
疏失。但是，他们怎么不干把
的行为，会使得某些并不适合该行为
这当成一种“特色”，其实还挺
的子类也具有该行为。现在可好了！
有趣的呀..·
SimUDuck程序中有了一个无生命的会
飞的东西。
对代码所做的局部修改，影响层面可
。
不只是局部（会飞的橡皮鸭）！
他体会到了一件
事：当涉及“维
护”时，为了“复
Duck
用”（reuse）目
quack()
的而使用继承，
swim()
()ejdsip
结局并不完美。
在超类中加（y（）.
连郡些
fly0
就会导致所有的子类
鸭子的其他方法
都具条y().
A
区
不该具备y（）的子类
也无法免除。
标皮腔子不会
MallardDuck
RedheadDuck
RubberDuck
呱叫，所以
display( (
quack() {
把quack）的定
C
display0 {
覆盖成吱吱叫
义覆盖成“吃
PD
外观是绿头
I外观是红头
(sgueak)
display( (
I外观是橡皮鸭
4
第1章
---
## Page 41
设计模式入门
Joe想到继承
我可以把橡皮鸭类中
可是，如果以后我加入诱
的fly()方法覆盖掉，就好像
饵鸭（VecoyVuck），又会
覆盖quaek()的做法一样.…..
如何？诱饵鸭是木头假鸭，
不
会飞也不会叫
RubberDuck
quack(){//岐叫}
display0{//橡皮鸭}
fly0{
Ⅱ覆盖，变成什么事都不做
DecoyDuck
quack() {
Ⅱ覆盖，变成什么事都不做
display0{//诱饵鸭}
这是继承层次中的另一个
fly0 {
类。注意，诱饵鸭既不会飞
覆盖，变成什么事都不做
也不会叫，可是橡皮聘不会
飞但会叫。
Sharpen yourpencil
利用继承来提供Duck的行为，这会导致下列哪些缺点？（多选）
A.代码在多个子类中重复。
口D.很难知道所有鸭子的全部行为。
B.运行时的行为不容易改变。
E鸭子不能同时又飞又叫。
PD
C.我们不能让鸭子跳舞。
F.改变会牵一发动全身，造成其他鸭子不想
要的改变。
你现在的位置
5
---
## Page 42
继承并不是答案
利用接口如何？
Joe认识到继承可能不是答案，因为他刚刚拿到来自
主管的备忘录，希望以后每六个月更新产品（至于
我可以把fly（）从超类中取出来
更新的方法，他们还没想到）。Joe知道规格会常常
放进一个“Flyable接”中。这
改变，每当有新的鸭子子类出现，他就要被迫检查
么一来，只有会飞的鸭子才实现此
并可能需要覆盖flyO和quark().…这简直是无穷无
接口。同样的方式，也可以用来设计
个“Quackable接”，因为不是所有
尽的梦。
的鸭子都会叫。
所以，他需要一个更清晰的方法，让“某些”（而
不是全部）鸭子类型可飞或可叫。
Duck
Quackable
swim0
Flyable
quack()
display0)
fy0
鸭子的其他方法
MallardDuck
RedheadDuck
RubberDuck
DecoyDuck
display0
display0
display0
display0
fly(
fly()
quack()
quack)
quack()
你觉得这个设计如何？
PDG
6
第1章
---
## Page 43
设计模式入门
这真是一个超笨的主意，你没发现这
么一亲重复的代码会变多吗？如累你
认为覆盖几个方法就算是差劲，那么对于
48个Vuck的子类都要稍微修改一下飞
行的行为，你又怎么说？！
如果你是Joe，你要怎么办？
我们知道，并非“所有”的子类都具有飞行和呱呱叫的行为，所以继承
并不是适当的解决方式。虽然Flyable与Quackable可以解决“一部分”问
题（不会再有会飞的橡皮鸭），但是却造成代码无法复用，这只能算是
从一个恶梦跳进另一个恶梦。甚至，在会飞的鸭子中，飞行的动作可能
还有多种变化
此时，你可能正期盼着设计模式能骑着白马来解教你离开苦难的一天。
但是，如果直接告诉你答案，这有什么乐趣？我们会用老方法找出一个