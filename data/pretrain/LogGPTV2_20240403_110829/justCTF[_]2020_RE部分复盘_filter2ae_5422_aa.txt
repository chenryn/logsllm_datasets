# justCTF[*]2020 RE部分复盘
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
最近复盘了一下`justCTF[*]2020`，分享一下我的收获  
官网 
## rusty
> Looking at Rust code in disassembler/decompiler hurts, so… look somewhere
> else.
看到这个标题，打消了直接分析反汇编代码的念头，我有如下思路
  * 像Ruby打包exe工具ocra一样，exe文件包含了源代码脚本和脚本解析工具ruby.exe，但是rusty应该没有这个特性
  * 程序运行中，有源代码文件在某个路径生成
  * github上有源代码
  * exe文件本身有源代码
尝试过后都失败了，最后发现这个PE文件的DOS Stub非常庞大，这是有端倪的地方
###  DOS Stub
每个PE文件都有DOS部分，DOS部分 分为 `IMAGE_DOS_HEADER结构` 和 `DOS Stub`
DOS
Stub相当于DOS下的可执行文件，是windows为了向后兼容设计的，如果用户尝试在DOS打开Windows二进制文件，那么就会执行这个文件，一般会显示`This
program cannot be run in DOS Mode.`
我用`010editor`把PE文件的DOS部分提取出来，利用DOSBox运行，发现是有动画的
当我们键盘有输入的时候，会有火花生成
有思路了，于是用 IDA 以DOS文件方式打开，分析其汇编代码
###  分析start函数
跟踪`INT
16H`指令，这是键盘I/O中断，详细可以看这里
，`INT 21H`指令是输出字符串的指令
用python重写代码，基本逻辑如下（注意，DOS字符串以`$`结尾）
    input = [] # 60h
    output = [0x3E, 0x49, 0x26, 0x52, 0x45, 0x22, 0x42, 0x10, 0x66, 0x0B, 0x6C, 0x06, 0x0D, 0x50, 0x0F, 0x4C, 0x25, 0x4C, 0x3F, 0x12, 0x56, 0x03, 0x20, 0x5A, 0x14, 0x61, 0x4A, 0x3F, 0x5D, 0x51, 0x12, 0x5C, 0x18, 0x05, 0x43, 0x39, 0x4F, 0x32, 0x0A] # 34h
    for i in range(len(input)):
        for j in range(i,len(input)):
            output[j] ^= input[i]
    assert(sum(input)==0xD9F)
    assert(sum(output)==0xFD9)
    print(bytes(output))
至此，由于input和output我们没办法知道，已经没办法往下推导了
首先我猜测 `input` 是flag，利用前8位是
`justCTF{`，算出来`output`非常奇怪，尝试`output`是flag，算出来`input`为`This
pro`，明显的可读文本，说明`output`确实是flag
如果`input`不是已知的话，没办法解了，爆破不实际，在ida和010editor里搜寻字符串，发现有一串非常符合的字符串
作为input计算发现`assert(sum(input)==0xD9F)`成立，这个input一定就是正确的了，计算output 即可得到flag
    input = list(map(ord,'This program cannot be run in DOS mode.'))
    # b'justCTF{just_a_rusty_old_DOS_stub_task}'
## That’s not crypto
###  pyc反编译
python作为一门脚本语言(解释型语言)，首先会将我们写的代码转化成二进制码，这些二进制码由 Python虚拟机解释并运行。所生成的二进制代码文件 即是
.pyc 文件
编译（.py转.pyc）
    >>> import py_compile
    >>> py_compile.compile('py file path')
反编译（.pyc转.py）：使用 uncompyle6
    uncompyle6 -o data.py data.pyc 
    其中 data.py 是导出文件，data.pyc是要反编译的pyc文件
反编译后的python代码，虽然数字很大，但是逻辑清晰，容易逆向
解密爆破即可
    # a列表很大，在脚本中没有贴出
    def poly(a, x):
        value = 0
        for ai in a:
            value *= x
            value += ai
        return value
    data = []
    for i in range(32,0x7f * 57):
        x = i * 69684751861829721459380039
        value = poly(a, x)
        if value == 24196561:
            data.append(i)
    print(len(data))
    for i in range(len(data)-1,0,-1):
        data[i] -= data[i-1]
    print(bytes(data))
    # b'justCTF{this_is_very_simple_flag_afer_so_big_polynomails}'
## REmap
题目描述
> Recently we fired our admin responsible for backups. We have the program he
> wrote to decrypt those backups, but apparently it’s password protected. He
> did not leave any passwords and he’s not answering his phone. Help us crack
> this password!
exe文件，需要输入password，ida分析
在字符串窗口发现了很多py开头的字符串
###  pyinstaller
python作为一门解释型语言，可以利用工具把python脚本打包为exe，主流工具就是pyinstaller
在 ida 中找到 PyInstaller 相关字符串，可以确定这个exe是pyinstaller打包的了
利用 **pyinstxtractor** 脚本将.exe文件转为.pyc文件（pyinstxtractor脚本在github上下载）
    python pyinstxtractor.py exe文件路径
注意python的版本一定要和 pyinstaller打包所用python版本一致，否则虽然转化成功，但是会有一些提取错误(extraction
errors)，并且跳过了重要的步骤pyz extraction
    [+] Processing D:\CTF_time\justCTF\backup_decryptor.exe
    [+] Pyinstaller version: 2.1+
    [+] Python version: 38
    [+] Length of package: 5598412 bytes
    [+] Found 31 files in CArchive
    [+] Beginning extraction...please standby
    [+] Possible entry point: pyiboot01_bootstrap.pyc
    [+] Possible entry point: pyi_rth_multiprocessing.pyc
    [+] Possible entry point: backup_decryptor.pyc
    [!] Warning: This script is running in a different Python version than the one used to build the executable.
    [!] Please run this script in Python38 to prevent extraction errors during unmarshalling
    [!] Skipping pyz extraction
    [+] Successfully extracted pyinstaller archive: D:\CTF_time\justCTF\backup_decryptor.exe
这里它使用了Python38
于此我们得到了backup_decryptor.exe_extracted文件夹，里面有很多pyc文件，还有python38.dll
###  pyc混淆加密
我常规地利用uncompyle6将pyc文件转化为py文件，失败了，起初我以为是pyc文件的 image num 没有补齐，但是无论怎么修改image
num，都是失败
后面看了tips
>   1. Extrace `PyInstaller` packed executable with
> [pyinstxtractor.py](https://github.com/extremecoders-re/pyinstxtractor) ->
> See entry point at `backup_decryptor.pyc`.
>   2. Try to decompile/disassemble it -> Fail because of invalid arg count.
>   3. Recognize that it has remapped all the python opcodes -> Find a way to
> find the mapping back to the original.
>   4. Write code to convert the mapped `pyc` to the original -> Decompile it.
>   5. Analyze the decompiled python code -> Get flag.
>
联系到题目 名称 REmap，这个题目混淆了python opcode，需要我们 重新映射 remap
**修改opcode**
我们获取python源代码，修改opcode对应值，这样编译出来的python解释器是独一无二的，其在把python代码转化成二进制码(pyc)时，opcode对应的值也被改变，可以达到正常的python解释器无法解析我们python编译的pyc文件的目的
本题就是如此，我们要做的是修复这些opcode
###  Remap
这里有一篇文章讲得不错 
在python官网上下载正常的python38环境，运行如下代码即可得到 opcode 键值对
    >>> import opcode
    >>> opcode.opmap
得到如下
    py38_opcode = {'POP_TOP': 1, 'ROT_TWO': 2, 'ROT_THREE': 3, 'DUP_TOP': 4, 'DUP_TOP_TWO': 5, 'ROT_FOUR': 6, 'NOP': 9, 'UNARY_POSITIVE': 10, 'UNARY_NEGATIVE': 11, 'UNARY_NOT': 12, 'UNARY_INVERT': 15, 'BINARY_MATRIX_MULTIPLY': 16, 'INPLACE_MATRIX_MULTIPLY': 17, 'BINARY_POWER': 19, 'BINARY_MULTIPLY': 20, 'BINARY_MODULO': 22, 'BINARY_ADD': 23, 'BINARY_SUBTRACT': 24, 'BINARY_SUBSCR': 25, 'BINARY_FLOOR_DIVIDE': 26, 'BINARY_TRUE_DIVIDE': 27, 'INPLACE_FLOOR_DIVIDE': 28, 'INPLACE_TRUE_DIVIDE': 29, 'GET_AITER': 50, 'GET_ANEXT': 51, 'BEFORE_ASYNC_WITH': 52, 'BEGIN_FINALLY': 53, 'END_ASYNC_FOR': 54, 'INPLACE_ADD': 55, 'INPLACE_SUBTRACT': 56, 'INPLACE_MULTIPLY': 57, 'INPLACE_MODULO': 59, 'STORE_SUBSCR': 60, 'DELETE_SUBSCR': 61, 'BINARY_LSHIFT': 62, 'BINARY_RSHIFT': 63, 'BINARY_AND': 64, 'BINARY_XOR': 65, 'BINARY_OR': 66, 'INPLACE_POWER': 67, 'GET_ITER': 68, 'GET_YIELD_FROM_ITER': 69, 'PRINT_EXPR': 70, 'LOAD_BUILD_CLASS': 71, 'YIELD_FROM': 72, 'GET_AWAITABLE': 73, 'INPLACE_LSHIFT': 75, 'INPLACE_RSHIFT': 76, 'INPLACE_AND': 77, 'INPLACE_XOR': 78, 'INPLACE_OR': 79, 'WITH_CLEANUP_START': 81, 'WITH_CLEANUP_FINISH': 82, 'RETURN_VALUE': 83, 'IMPORT_STAR': 84, 'SETUP_ANNOTATIONS': 85, 'YIELD_VALUE': 86, 'POP_BLOCK': 87, 'END_FINALLY': 88, 'POP_EXCEPT': 89, 'STORE_NAME': 90, 'DELETE_NAME': 91, 'UNPACK_SEQUENCE': 92, 'FOR_ITER': 93, 'UNPACK_EX': 94, 'STORE_ATTR': 95, 'DELETE_ATTR': 96, 'STORE_GLOBAL': 97, 'DELETE_GLOBAL': 98, 'LOAD_CONST': 100, 'LOAD_NAME': 101, 'BUILD_TUPLE': 102, 'BUILD_LIST': 103, 'BUILD_SET': 104, 'BUILD_MAP': 105, 'LOAD_ATTR': 106, 'COMPARE_OP': 107, 'IMPORT_NAME': 108, 'IMPORT_FROM': 109, 'JUMP_FORWARD': 110, 'JUMP_IF_FALSE_OR_POP': 111, 'JUMP_IF_TRUE_OR_POP': 112, 'JUMP_ABSOLUTE': 113, 'POP_JUMP_IF_FALSE': 114, 'POP_JUMP_IF_TRUE': 115, 'LOAD_GLOBAL': 116, 'SETUP_FINALLY': 122, 'LOAD_FAST': 124, 'STORE_FAST': 125, 'DELETE_FAST': 126, 'RAISE_VARARGS': 130, 'CALL_FUNCTION': 131, 'MAKE_FUNCTION': 132, 'BUILD_SLICE': 133, 'LOAD_CLOSURE': 135, 'LOAD_DEREF': 136, 'STORE_DEREF': 137, 'DELETE_DEREF': 138, 'CALL_FUNCTION_KW': 141, 'CALL_FUNCTION_EX': 142, 'SETUP_WITH': 143, 'LIST_APPEND': 145, 'SET_ADD': 146, 'MAP_ADD': 147, 'LOAD_CLASSDEREF': 148, 'EXTENDED_ARG': 144, 'BUILD_LIST_UNPACK': 149, 'BUILD_MAP_UNPACK': 150, 'BUILD_MAP_UNPACK_WITH_CALL': 151, 'BUILD_TUPLE_UNPACK': 152, 'BUILD_SET_UNPACK': 153, 'SETUP_ASYNC_WITH': 154, 'FORMAT_VALUE': 155, 'BUILD_CONST_KEY_MAP': 156, 'BUILD_STRING': 157, 'BUILD_TUPLE_UNPACK_WITH_CALL': 158, 'LOAD_METHOD': 160, 'CALL_METHOD': 161, 'CALL_FINALLY': 162, 'POP_FINALLY': 163}
以上获得了正常python得opcode，现在我们要找题目的opcode键值对了
我们利用pyinstxtractor获得的`backup_decryptor.exe_extracted`文件夹下`PYZ-00.pyz_extracted`
文件夹，有一个名为`opcode.pyc`的文件，这个pyc文件有 `python汇编码名称:opcode值` 这样的结构
我们利用opcode name修复这个映射
    # py38_opcode = {正常python的opcode键值对，前面有，这里不再列出}
    with open('./pyc/extracted_opcode.pyc','rb') as f:
        extracted = f.read()
    mapping = {}
    for keyword in py38_opcode:
        value = py38_opcode[keyword]
        keyword = keyword.encode()
        co_code = extracted[extracted.find(keyword)+len(keyword)+1]
        if extracted.find(keyword) != -1:
            if extracted[extracted.find(keyword)+len(keyword)] == 0xE9:
                mapping[co_code] = value
        else:
            print(keyword)
    print(mapping)
###  pyc文件格式
获取映射之后要开始修复backup_decryptor.pyc文件了，首先要了解pyc文件格式（以下都是对于python38而言）
  * 首先是4字节特征值 image ，之后是12字节的时间戳，这两部分组成了pyc文件头header  
  * header之后是一个或多个的`code_object`，`code_object` 包含 `co_code` 和 `co_consts` 两部分，而 `co_consts` 可能包含另一个`code_object` ，所以要使用递归来还原
  * python38的pyc文件`code_object` 的 `co_code` 固定两字节，就算没有操作数 （operands）
    import marshal
    with open('./pyc/backup_decryptor.pyc','rb') as f:
        magic = f.read(4)
        date = f.read(12)
        decryptor = marshal.load(f)
    def convert(decryptor,mapping):