    `kmk`{.literal} 的 32 字节长值是从 `/dev/urandom`{.literal}
    文件中随机字节生成的，并放置在用户 (`@u`{.literal})
    密钥环中。密钥序列号是位于前面输出的第二行。
5.  根据 `kmk`{.literal} 密钥创建一个加密的 EVM 密钥：
    ``` literallayout
    # keyctl add encrypted evm-key "new user:kmk 64" @u
    641780271
    ```
    命令使用 `kmk`{.literal} 生成并加密 64 字节长用户密钥（名为
    `evm-key`{.literal}）并将其放置在用户 (`@u`{.literal})
    密钥环中。密钥序列号是位于前面输出的第二行。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    用户密钥必须命名为 [**evm-key**]{.strong}，因为它是 EVM
    子系统预期使用的且正在使用的名称。
    :::
6.  为导出的密钥创建一个目录：
    ``` literallayout
    # mkdir -p /etc/keys/
    ```
7.  搜索 `kmk`{.literal} 键并将其值导出到文件中：
    ``` literallayout
    # keyctl pipe $(keyctl search @u user kmk) > /etc/keys/kmk
    ```
    命令将内核主密钥 (`kmk`{.literal}) 的未加密值放在之前定义的位置
    (`/etc/keys/`{.literal}) 的文件中。
8.  搜索 `evm-key`{.literal} 用户密钥并将其值导出到文件中：
    ``` literallayout
    # keyctl pipe $(keyctl search @u encrypted evm-key) > /etc/keys/evm-key
    ```
    命令将用户 `evm-key`{.literal}
    密钥的加密值放在任意位置的文件中。`evm-key`{.literal}
    已在早期由内核主密钥加密。
9.  另外，还可查看新创建的密钥：
    ``` screen
    # keyctl show
    Session Keyring
    974575405   --alswrv     0        0      keyring: _ses
    299489774   --alswrv     0    65534       \_ keyring: _uid.0
    748544121   --alswrv     0        0           \_ user: kmk
    641780271   --alswrv     0        0           \_ encrypted: evm-key
    ```
    您应该可以看到类似的输出。
10. 激活 EVM:
    ``` literallayout
    # echo 1 > /sys/kernel/security/evm
    ```
11. （可选）验证 EVM 是否已初始化：
    ``` literallayout
    # dmesg | tail -1
    […​] evm: key initialized
    ```
:::
::: itemizedlist
**其它资源**
-   [扩展的验证模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#extended-verification-module_enhancing-security-with-the-kernel-integrity-subsystem){.link}
-   [完整性测量架构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#integrity-measurement-architecture_enhancing-security-with-the-kernel-integrity-subsystem){.link}
-   [内核完整性子系统](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#the-kernel-integrity-subsystem_enhancing-security-with-the-kernel-integrity-subsystem){.link}
-   [可信和加密的密钥](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#trusted-and-encrypted-keys_enhancing-security-with-the-kernel-integrity-subsystem){.link}。
:::
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_security-hardening.html#collecting-file-hashes-with-integrity-measurement-architecture_enhancing-security-with-the-kernel-integrity-subsystem}使用完整性测量架构收集文件哈希 {.title}
:::
完整性测量架构 (IMA)
的第一级操作是[*测量*]{.emphasis}阶段，它允许创建文件哈希并将其存储为这些文件的扩展属性
(xattrs)。下面的部分论述了如何创建和检查文件的哈希。
::: itemizedlist
**先决条件**
-   启用完整性测量架构(IMA)和扩展的验证模块(EVM)，如
    [启用完整性测量架构和扩展的验证模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#enabling-integrity-measurement-architecture-and-extended-verification-module_enhancing-security-with-the-kernel-integrity-subsystem){.link}
    中所述。
-   验证是否已安装 `ima-evm-utils`{.literal}、`attr`{.literal} 和
    `keyutils`{.literal} 软件包：
    ``` literallayout
    # yum install ima-evm-utils attr keyutils
    Updating Subscription Management repositories.
    This system is registered to Red Hat Subscription Management, but is not receiving updates. You can use subscription-manager to assign subscriptions.
    Last metadata expiration check: 0:58:22 ago on Fri 14 Feb 2020 09:58:23 AM CET.
    Package ima-evm-utils-1.1-5.el8.x86_64 is already installed.
    Package attr-2.4.48-3.el8.x86_64 is already installed.
    Package keyutils-1.5.10-7.el8.x86_64 is already installed.
    Dependencies resolved.
    Nothing to do.
    Complete!
    ```
:::
::: orderedlist
**流程**
1.  创建测试文件：
    ``` literallayout
    # echo  > test_file
    ```
    IMA 和 EVM 确保分配了示例文件
    `test_file`{.literal}，哈希值存储为其扩展属性。
2.  检查文件的扩展属性：
    ``` literallayout
    # getfattr -m . -d test_file
    # file: test_file
    security.evm=0sAnDIy4VPA0HArpPO/EqiutnNyBql
    security.ima=0sAQOEDeuUnWzwwKYk+n66h/vby3eD
    security.selinux="unconfined_u:object_r:admin_home_t:s0"
    ```
    前面的输出显示了与 SELinux 以及 IMA 和 EVM 哈希值相关的扩展属性。EVM
    主动添加 `security.evm`{.literal} 扩展属性，并检测对其他文件（如
    `security.ima`{.literal} ）的 xattrs
    的任何脱机篡改，它们与文件的内容完整性直接相关。`security.evm`{.literal}
    字段的值位于基于 Hash 的消息身份验证代码 (HMAC-SHA1)
    中，该身份验证代码由 `evm-key`{.literal} 用户密钥生成。
:::
::: itemizedlist
**其它资源**
-   [*[[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/index){.link}]{.citetitle}*]{.emphasis}
-   [扩展的验证模块](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#extended-verification-module_enhancing-security-with-the-kernel-integrity-subsystem){.link}
-   [完整性测量架构](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/managing_monitoring_and_updating_the_kernel/index#integrity-measurement-architecture_enhancing-security-with-the-kernel-integrity-subsystem){.link}
:::
:::
::: section
::: titlepage
# []{#enhancing-security-with-the-kernel-integrity-subsystem_security-hardening.html#related-information-enhancing-security-with-the-kernel-integrity-subsystem}其它资源 {.title}
:::
::: itemizedlist
-   [*[[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/index){.link}]{.citetitle}*]{.emphasis}
-   [*[[完整性测量架构
    (IMA)](https://sourceforge.net/p/linux-ima/wiki/Home/){.link}]{.citetitle}*]{.emphasis}
-   [Security-Enhanced
    Linux（SELinux）的基本和高级配置](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/using_selinux/index){.link}
:::
:::
:::
[]{#encrypting-block-devices-using-luks_security-hardening.html}
::: chapter
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#encrypting-block-devices-using-luks_security-hardening}第 12 章 使用 LUKS 加密块设备 {.title}
:::
磁盘加密通过加密来保护块设备中的数据。要访问设备的解密内容，用户必须提供密语或密钥来作为身份验证。这对于移动计算机和可移动介质而言尤为重要：即使已从系统上物理移除，它也有助于保护设备的内容。LUKS
格式是 RHEL 中块设备加密的默认实现。
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#luks-disk-encryption_encrypting-block-devices-using-luks}LUKS 磁盘加密 {.title}
:::
Linux Unified Key
Setup-disk-format(LUKS)允许您加密块设备，并提供一组简化加密设备管理的工具。LUKS
允许多个用户密钥解密主密钥，用于批量加密分区。
RHEL 使用 LUKS
执行块设备加密。默认情况下，在安装过程中取消选中加密块设备的选项。如果您选择加密磁盘的选项，则系统会在每次引导计算机时提示您输入密码短语。这个密码短语将["[解锁]{.quote}"]{.quote}用于加密您的分区所使用的加密密钥。如果您选择修改默认的分区表，可以选择加密哪个分区。这是在分区表设置中设定的。
::: itemizedlist
**LUKS 做什么**
-   LUKS
    对整个块设备进行加密，因此非常适合保护移动设备的内容，如可移动存储介质或笔记本电脑磁盘驱动器。
-   加密块设备的底层内容是任意的，这有助于加密交换设备。对于将特殊格式化块设备用于数据存储的某些数据库，这也很有用。
-   LUKS 使用现有的设备映射器内核子系统。
-   LUKS 增强了密码短语，防止字典攻击。
-   LUKS 设备包含多个密钥插槽，允许用户添加备份密钥或密码短语。
:::
::: itemizedlist
**LUKS [*不能*]{.emphasis}做什么**
-   LUKS 等磁盘加密解决方案仅在您的系统关闭时保护数据。当系统处于 on
    状态并且 LUKS
    解密了磁盘后，该磁盘上的文件将可供通常具有访问权限的任何人使用。
-   LUKS 不适用于需要许多用户具有同一设备的不同访问密钥的情况。LUKS1
    格式提供八个关键插槽，LUKU2 最多提供 32 个密钥插槽。
-   LUKS 不适用于需要文件级加密的应用程序。
:::
::: title
**加密系统**
:::
LUKS 使用的默认密码是 `aes-xts-plain64`{.literal}。LUKS 的默认密钥大小为
512 字节。[**[Anaconda]{.application}**]{.strong} （XTS 模式）的 LUKS
的默认密钥大小为 512 位。可用的加密系统包括：
::: itemizedlist
-   AES - 高级加密标准
-   Twofish（128 位块加密）
-   Serpent
:::
::: itemizedlist
**其它资源**
-   [LUKS
    项目主页](https://gitlab.com/cryptsetup/cryptsetup/blob/master/README.md){.link}
-   [LUKS On-Disk Format
    规格](https://gitlab.com/cryptsetup/LUKS2-docs/blob/master/luks2_doc_wip.pdf){.link}
-   [FIPS PUB 197](https://doi.org/10.6028/NIST.FIPS.197){.link}
:::
:::
::: section
::: titlepage
# []{#encrypting-block-devices-using-luks_security-hardening.html#luks-versions-in-rhel_encrypting-block-devices-using-luks}RHEL 中的 LUKS 版本 {.title}
:::
在 RHEL 中，LUKS 加密的默认格式是 LUKS2。旧版 LUKS1
格式仍然被完全支持，它是作为与早期 RHEL 版本兼容的格式提供的。
LUKS2 格式旨在启用各个部分的未来更新，而无需修改二进制结构。LUKS2
在内部对元数据使用 JSON
文本格式，提供元数据冗余，检测元数据的损坏，允许从元数据副本进行自动修复。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
不要在必须与只支持 LUKS1 的传统系统兼容的系统中使用 LUKS2。请注意，RHEL
7 从版本 7.6 起支持 LUKS2 格式。
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
LUKS2 和 LUKS1 使用不同的命令加密该磁盘。对 LUKS
版本使用错误的命令可能会导致数据丢失。
::: informaltable
  LUKS 版本   加密命令
  ----------- ----------------------------------
  LUKS2       `cryptsetup reencrypt`{.literal}
  LUKS1       `cryptsetup-reencrypt`{.literal}
:::
:::
::: title
**在线重新加密**
:::
LUKS2
格式支持在设备正在使用时重新加密加密设备。例如：您不必卸载该设备中的文件系统来执行以下任务：
::: itemizedlist
-   更改卷密钥
-   更改加密算法
:::
加密未加密的设备时，您仍然必须卸载文件系统。您可以在简短初始化加密后重新挂载文件系统。
LUKS1 格式不支持在线重新加密。
::: title
**转换**
:::
LUKS2 格式由 LUKS1 实现。在某些情况下，您可以将 LUKS1 转换为
LUKS2。在以下情况下无法进行转换：
::: itemizedlist
-   LUKS1 设备被标记为由基于策略的解密(PBD -
    Clevis)解决方案使用。当检测到 `luksmeta`{.literal}
    元数据时，`cryptsetup`{.literal} 工具会拒绝转换设备。
-   设备正在活跃。该设备必须处于不活跃状态，才能进行转换。
:::
:::
::: section
::: titlepage