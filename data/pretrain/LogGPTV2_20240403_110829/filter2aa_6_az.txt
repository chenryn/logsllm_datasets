下面是运行结果：
19.1.3 原子：分组
分组语法如下：
（«pattern»）是捕获组。任何匹配pattern的内容都可以通过反向引用访问或作为匹配操作的结果。
（?:«pattern»）是非捕获组。pattern仍就匹配输入，但不保存捕获的内容。因此，这种分组没有数字可以引用（例如，通过反向引用）。
\1,\2,依此类推称为反向引用；它们指向之前匹配的分组。反斜线后的数字可以是任何大于或等于1的整数，但第一个数字必须不是0。
在这个例子中，反向引用保证破折号前后字符数量一致。
这个例子使用反向引用来匹配HTML标签（显然，通常你应该使用合适的解析器来处理HTML）：
19.1.4 量词
量词可以跟随在任何原子（包括字符类和分组）后。
?表示从未匹配或只匹配一次。
*表示匹配零次或多次。
+表示匹配一次或多次。
{n}表示完全匹配n次。
{n,}表示匹配n次或多次。
{n,m}表示匹配最少n次，最多匹配m次。
默认情况下，量词是贪婪匹配的，也就是说，它们尽可能多地匹配。你可以勉强匹配（尽可能少），通过后面添加上述任何量词（包括在大括号的范围内）和问号（？）。例如：
因此，*？是十分实用的模式，它可以匹配一切，直到后面的原子出现。例如，下面是正则表达式匹配刚刚所示的HTML标记的更精简的版本（用于[^1是捕获的分组N。
（2）属性
input是输入的完整字符串。
index是找到匹配处的索引。
19.6.1 首次匹配（不设置标识/g）
如果不设置标识/g，则只返回第一次的匹配结果：
19.6.2 全部匹配（设置标识/g）
如果设置了标识/g，会反复调用exec()返回所有的匹配项。返回值null表示没有任何匹配。属性lastIndex表示下次匹配从哪儿继续：
这里我们可以循环遍历所有的匹配项：
然后，我们得到以下输出：
19.7 String.prototype.match：捕获分组或返回所有匹配的子字符串
下面的方法对str匹配regex：
如果regex没有设置/g标识，则该方法类似于RegExp.prototype.exec()：
如果设置了/g标识，则该方法返回str中含有所有匹配的子字符串的数组；如果没有任何匹配，则返回null。
19.8 String.prototype.replace：查找和替换
replace()方法在字符串str中进行查找，匹配search并用replacement替换匹配项：
这个方法中的两个参数，有几种方式可以指定。
search
字符串或正则表达式。
字符串：在输入字符串中找到匹配的字面量。请注意只替换字符串中第一次出现的匹配项。如果你想替换多次出现的匹配项，必须使用正则表达式的/g标识。这是意想不到的一大缺陷。
正则表达式：对输入字符串进行匹配。警告：请使用global标识，否则只会尝试匹配一次正则表达式。
replacement
字符串或函数。
字符串：描述如何替换找到的匹配项。
函数：执行替换并通过参数提供匹配信息。
19.8.1 Replacement为字符串的情况
如果replacement是字符串，它的内容用来逐字替换匹配项。唯一的例外是特殊字符美元符号（$），它会启动所谓的替换指令。
分组：$n在匹配中插入分组n。n必须至少为1（$0没有任何特殊含义）。
匹配的子字符串：
$'（反引号）插入匹配项前的文本。
$＆插入完整的匹配项。
$`（单引号）插入匹配项后的文本。
$$插入单个$字符。
下面这个例子涉及匹配的子字符串及其前缀和后缀：
下面这个例子涉及分组：
19.8.2 当Replacement为函数时
如果replacement是函数，它对需要替换匹配项的字符串进行处理。该函数具有以下签名：
completeMatch与前面介绍的$&相同，offset表示找到匹配项的位置，inputStr是正在被匹配的字符串。因此，你可以使用特殊变量argument来访问分组（通过arguments[1]访问分组1，以此类推）。例如：
19.9 标识/g的一些问题
正则表达式设置了/g标识，在调用某些方法时，必须多次调用此方法才能返回所有结果，这时可能会有问题。有两个方法存在这种情况。
RegExp.prototype.test()
RegExp.prototype.exec()
于是，在JavaScript中，正则表达式作为迭代器成为结果序列的指针时，会被不正确地使用。这导致的问题如下。
（1）问题1：带有/g的正则表达式不能内联
例如：
上面例子中的循环是无限的，因为每个循环迭代都会创建一个新的正则表达式，这样导致重新开始迭代。因此，必须对代码进行改写：
还有另一个例子：
调用上面的函数会再次导致无限循环。正确的做法是（稍后解释为什么lastIndex要设置为0）：
调用函数：
提示：
 最好的解决方法是，不使用内联（即给正则表达式提供一个描述性的名称）。但是你必须要意识到不能使用内联这种方法，即使是在紧急修复bug时。
（2）问题2：带有/g的正则表达式作为参数
需要多次调用test()和exec()时，把正则表达式作为参数传递给方法时必须要小心。必须设置/g标识，为了安全起见，应该设置lastIndex为0（下一个示例中会给出解释）。
（3）问题3：共享带有/g的正则表达式（例如，常量）
当你引用不是新创建的正则表达式时，在把它作为迭代器前，你需要把lastIndex属性设置为零（下一个示例中会给出解释）。由于迭代依赖lastIndex，这种正则表达式不能同时用于多个迭代。
下面的例子演示了问题2。这是一个简单的函数实现，它计算了在字符串str中有多少子字符串匹配正则表达式regex：
下面是使用这个函数的例子：
第一个问题：如果正规表达式没有设置/g标识，该函数会进入无限循环。例如：
第二个问题：如果regex.lastIndex不为0，该函数无法正常工作，因为该属性指示从哪里开始查找。例如：
下面的实现修复了这两个问题：
更简单的解决方案是使用match()：
可能会有一个缺陷：如果设置了/g标识，但没有任何匹配，str.match()会返回null。如果match()的结果不为真，我们需要使用[]避免上面代码中的缺陷。
19.10 提示与技巧
本节介绍了JavaScript正则表达式的一些提示和技巧。
19.10.1 引用文本
有时，你想用给定的字符串拼装正则表达式。这意味着，任何特殊字符（如*，[）都不应理解为其本身，所有这些特殊字符都需要进行转义。JavaScript没有对这种引用的内置处理，但你可以自己编写函数quoteText，类似下面这样工作：