我们将从*常规*部分开始。请选择它。
接下来，写`% of actual vs reserved CPU`作为标题，下面的文字作为描述。
```
 1  The percentage of actual CPU usage compared to reserved. The
    calculation excludes Pods with reserved CPU equal to or smaller than
    $minCpu. Those with less than $minCpu of requested CPU are ignored.
```
请注意描述中`$minCpu`变量的用法。当我们回到仪表板时，它将扩展到它的价值。
接下来，请切换到*指标*选项卡。那才是真正的行动发生的地方。
我们可以定义多个查询，但是对于我们的用例，一个就足够了。请在 *A* 右侧的字段中键入以下查询。
For your convenience, the query is available in the `grafana-actual-vs-reserved-cpu` ([https://gist.github.com/vfarcic/1b027a1e2b2415e1d156687c1cf14012](https://gist.github.com/vfarcic/1b027a1e2b2415e1d156687c1cf14012)) Gist.
```
 1  sum(label_join(
 2      rate(
 3          container_cpu_usage_seconds_total{
 4              namespace!="kube-system",
 5              pod_name!=""
 6          }[5m]
 7      ),
 8      "pod",
 9      ",",
10      "pod_name"
11  )) by (pod) /
12  sum(
13      kube_pod_container_resource_requests_cpu_cores{
14          namespace!="kube-system",
15          namespace!="ingress-nginx"
16      }
17  ) by (pod) and 
18  sum(
19      kube_pod_container_resource_requests_cpu_cores{
20          namespace!="kube-system",
21          namespace!="ingress-nginx"
22      }
23  ) by (pod) > $minCpu
```
该查询与我们在[第 3 章](3.html)、*收集和查询指标并发送警报*中使用的查询几乎相同。唯一不同的是`$minCpu`变量的用法。
在输入查询后的几分钟内，我们应该会看到图表变得活跃起来。可能只有一个 Pod 包含在内，因为我们的许多应用被定义为使用 5 个 CPU 毫秒(即`$minCpu`的值)，或者更少。
![](img/3a7042c2-ba76-4ad8-904d-ef3d72c99c47.png)
Figure 6-8: Grafana's panel based on a graph
接下来，我们将调整图表左侧的单位。请单击轴选项卡。
展开*左侧 Y 单位*，选择无，然后是百分比(0.0-1.0)。由于我们没有使用*右 Y* 轴，请取消勾选*显示*复选框。
下一节是*图例*。请选择它。
勾选*选项为表格*、*选项右侧*和*值>当前*复选框。更改会立即应用到图表中，您应该不难推断出每一个更改的作用。
只少了一件事。我们应该定义上限和下限，以提供结果超出预期范围的明确指示。
请单击警报选项卡。
单击“创建警报”按钮，将“高于”条件更改为“超出范围”。将接下来两个字段的值设置为`0,5`和`1,5`。应该通知的是，与保留值相比，实际 CPU 使用率是低于 50%还是高于 150%。
![](img/460539bf-a465-4596-a883-26a441295b05.png)
Figure 6-9: Grafana's graph with alerts
我们已经完成了图表，所以请回到仪表板享受“漂亮的颜色”。您可能需要拖动图形的右下角来调整其大小。
我们可以看到请求的 CPU 使用率和实际 CPU 使用率之间的差异。我们还有阈值(用红色标记)，它会告诉我们使用是否超出了既定的界限。
现在来了一个大问题。这样的图有用吗？答案取决于我们要用它来做什么。
如果目标是盯着它，等待其中一个 Pods 开始使用过多或过少的 CPU，我只能说你在浪费你的才能，而这些才能可以用于更有效率的任务。毕竟，我们在普罗米修斯中已经有了一个类似的警报，当满足条件时，它会向我们发送一个 Slack 通知。它比我们在该图中看到的更高级，因为只有在给定时间段内 CPU 使用率达到峰值时，它才会通知我们，从而避免可能在几秒钟或几分钟后解决的临时问题。我们应该把那些案例当作假警报丢掉。
该图的另一种用法可能更被动。我们可以忽略它(关闭格拉夫纳)，只有当上面提到的普罗米修斯警报被触发时，我们才能回到它。这可能更有意义。即使我们可以在普罗米修斯中运行一个类似的查询并得到相同的结果，拥有一个预定义的图形也可以避免我们编写这样的查询。您可以将它看作是一种拥有带有相应图形表示的查询注册表的方法。这确实更有意义。我们可以在需要的时候回到仪表板上，而不是盯着仪表板(选择网飞)。虽然在某些情况下，这可能是一个合理的策略，但它只会在非常简单的情况下起作用。当出现问题时，单个预定义的图形可以解决问题，或者更准确地说，可以清楚地指出问题的原因，图形确实具有重要价值。然而，通常情况下，找到问题的原因并没有那么简单，我们将不得不求助于普罗米修斯来开始更深入地挖掘度量标准。
Looking at dashboards with graphs is a waste of time. Visiting dashboards after receiving a notification about an issue makes a bit more sense. Still, all but trivial problems require deeper digging through Prometheus metrics.
尽管如此，我们刚刚制作的图表可能会证明自己是有用的，所以我们会保留它。在这种情况下，我们可能想做的是更改普罗米修斯警报的链接(我们目前在 Slack 中收到的链接)，以便它直接将我们带到 Graph(而不是仪表板)。我们可以通过单击面板名称旁边的箭头并选择查看选项来获得该链接。
我相信，如果我们将面板的类型从图形改为色彩不那么丰富的东西，线条更少，轴更少，并且没有其他漂亮的东西，我们可以使我们的仪表板更加有用。
# 创建信号量仪表板
如果我声称仪表板给表带来的价值比我们想象的要低，那么从本章开始，您可能会问自己同样的问题。为什么我们要讨论仪表板？嗯，我已经把我的说法从“仪表盘没用”改成了“仪表盘有些价值”。它们可以作为查询的注册表。通过仪表板，我们不需要记住我们在普罗米修斯中需要写的表达式。在我们深入挖掘度量标准之前，它们可能是我们寻找问题原因的一个很好的起点。但是，我将仪表板纳入解决方案还有另一个原因。
我喜欢大型展览。进入一个大屏幕显示重要内容的房间是非常令人满意的。通常有一个房间，操作员坐在里面，四面墙上都有监视器。那通常是令人印象深刻的景象。然而，许多这样的情况都有一个问题。一堆显示大量图表的显示器可能只不过是一幅美丽的景象。在最初的几天后，没有人会盯着图表看。如果这不是真的，你也可以解雇那个人，因为你知道他在伪造他的作品。
让我再重复一遍。
Dashboards are not designed for us to stare at them, especially not when they are on big screens where everyone can see them.
所以，如果拥有大屏幕是一个好主意，但是图形不是装饰它们的好选择，我们应该怎么做呢？答案在于信号量。它们类似于警报，应该提供系统状态的清晰指示。如果屏幕上的一切都是绿色的，我们就没有理由做任何事情。其中一个变红是我们应该做点什么来纠正这个问题的信号。因此，我们必须努力避免假阳性。如果某样东西变红了，而这不需要任何行动，我们很可能在未来开始忽略它。当这种情况发生时，我们正在冒着这样的风险:当我们忽略一个真正的问题时，认为它只是另一个假阳性。因此，每次出现警报后都应该采取行动。
这可以是纠正系统的修复，也可以是使其中一个信号灯变红的条件变化。无论是哪种情况，我们都不应该忽视它。
信号量的主要问题是它们对首席技术官和其他决策者没有吸引力。它们不是彩色的，也没有显示很多框、线和数字。人们经常把有用性和看起来有多讨人喜欢混为一谈。然而，我们并不是在建造一些应该卖给首席技术官的东西，而是一些对我们的日常工作有帮助的东西。
Semaphores are much more useful than graphs as a way to see the status of the system, even though they do not look as colorful and eye-pleasing as graphs.
让我们创建第一个信号量。
请点击屏幕右上角的*添加面板*图标，选择 Singlestat。点击*面板标题*旁边的箭头图标，选择编辑。
在大多数情况下，创建一个单一的 stat(一个信号量)与创建一个图没有太大区别。最大的区别在于应该产生单个值的度量(查询)。我们很快就会到达那里。现在，我们将更改面板的一些一般信息。
请选择常规选项卡。
键入`Pods with $cpuReqPercentMax% actual compared to reserved CPU`作为标题，键入以下文本作为描述。
```
 1  The number of Pods with less than $cpuReqPercentMin% or more than
    $cpuReqPercentMax% actual compared to reserved CPU
```
这个单一的统计将使用一个类似于我们之前制作的图表的查询。但是，虽然图表显示的是与保留的 CPU 相比的当前使用情况，但该面板应该显示有多少 Pods 的实际 CPU 使用量超出了基于保留的 CPU 的界限。这反映在我们刚刚输入的标题和描述中。正如你所看到的，这一次我们依靠更多的变量来表达我们的意图。
现在，让我们将注意力转向查询。请单击度量选项卡，并在 *A* 旁边的字段中键入以下表达式。
For your convenience, the query is available in the `grafana-single-stat-actual-vs-reserved-cpu` ([https://gist.github.com/vfarcic/078674efd3b379c211c4da2c9844f5bd](https://gist.github.com/vfarcic/078674efd3b379c211c4da2c9844f5bd)) Gist.
```
 1  sum(
 2      (
 3          sum(
 4              label_join(
 5                  rate(container_cpu_usage_seconds_total{
 6                      namespace!="kube-system",
 7                      pod_name!=""}[5m]),
 8                      "pod",
 9                      ",",
10                      "pod_name"
11              )
12          ) by (pod) /
13          sum(
14              kube_pod_container_resource_requests_cpu_cores{
15                  namespace!="kube-system",
16                  namespace!="ingress-nginx"
17              }
18          ) by (pod) and
19          sum(
20              kube_pod_container_resource_requests_cpu_cores{
21                  namespace!="kube-system",
22                  namespace!="ingress-nginx"
23              }
24          ) by (pod) > $minCpu
25      ) < bool ($cpuReqPercentMin / 100)