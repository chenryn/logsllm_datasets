problem is that the above attack cannot be ruled out via a reduc-
tionist argument to the security of the digital signature scheme.
Exchanging a signature with a new one on the same message does
not violate the standard security definition of digital signatures. As
a result, Alice and Bob still share the same session key after this
attack but they do not have matching conversations anymore. Next,
the attacker asks a Reveal-query to Bob’s oracle to obtain the secret
session key. Finally, A uses that key to successfully answer the
Test-query to Alice’s oracle.
The straight-forward solution is to require the signature scheme
to be strongly-secure, meaning that in the signature security ex-
periment the adversary is also allowed to output a new signature
on a message that has already been queried to the signature oracle.
In this way, A can directly be used to break the security of the
signature scheme and the proof can go through.
Figure 1: Protocol Execution in the Presence of a Passive Ad-
versary (left) and under a No-Match Attack (right).
2.2 No-Match Attacks with Advice
The above attack only serves as an introductory example to no-
match attacks and the problem they pose in formal security analyses.
In the sequel, we will present a new class of (more subtle) no-
match attacks which to the best of our knowledge have not been
considered before. The crucial difference to the above example is
that the adversary will always be able to efficiently obtain the key
or some other valuable information of the cryptographic primitive
(i.e. the signature scheme in our example) via the queries granted
in the security definition. We generally refer to this information as
advice. Correspondingly, we call these attacks ‘no-match attacks
with advice’ as opposed to the above ‘no-match attacks without
advice’. Interestingly, our work shows that for some primitives
no-match attacks with advice are much harder to protect against
than no-match attacks without advice. For example, in our running
example it turns out that requiring strong security is not sufficient
to fix the security proof.
For the introduction of no-match attacks with advice we consider
the same setting as before. Instead of a concrete signature we more
generally consider a cryptographic value v. Again the general attack
proceeds in three steps:
(1) A intercepts the last message. This message contains a cryp-
tographic value v.
(2) The adversary uses the queries granted in the security game
to efficiently compute a distinct cryptographic value v′ (cid:44) v
that makes Bob compute the same key as when using v.
(3) Finally, A replaces v with v′ in the last message and sends
it to Bob.
The difference between no-match attacks with and without ad-
vice is in Step 2 of the general attack pattern. Roughly, in a no-
match attack with advice the adversary may, solely by the use of
her access to the attack queries of the key exchange experiment,
obtain secret information that allows her to compute v′ efficiently
whereas in no-match attacks without advice no such information
is available. This information can include the secret signing key of
a signature scheme, cryptographic message authentication code, or
public key encryption scheme, or the plaintext message in case v is
a PKE-ciphertext on some secret message.
This new type of no-match attacks is often applicable to proto-
cols that are shown to provide security against key compromise
AliceBobAcceptAcceptLastMessage:(...,v)AliceBobAcceptAcceptLastMessage:(...,v)LastMessage:(...,v(cid:48))............Attackergenerates:(v(cid:48)(cid:54)=v)kkkkSession F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1348impersonation (KCI), exposure of the session states (e.g. ephemeral
secret keys or intermediate values), or (full) perfect forward secrecy
(PFS). In these scenarios the adversary is additionally provided with
at least one long-term key or with secret session state information,
either directly of the Test-oracle or of the oracle it communicates8
with. Note that many widely-used models [14, 29, 35–37] allow the
adversary to perform these actions.
In the following, for simplicity of exposition and due to their
high relevance to existing security analyses, we concentrate on
no-match attacks on the last protocol message. We emphasize that
no-match attacks may also be launched against earlier protocol
messages (as exemplified in Appendix B).
passive attacks
active attacks
Test-oracle has partner oracle
there is an oracle that shares
original key with Test-oracle
no partner oracle
no oracle shares original
key with Test-oracle
no-match attacks
Figure 2: Attack spectrum and corresponding states of the
Test-oracle when relying on partnering definitions based on
matching conversations.
2.3 Exploiting No-Match Attacks and Scope
Finding a no-match attack on some protocol in some security model
does not per se lead to a successful attack. To turn a no-match into
a successful attack on the protocol we additionally need that the
security model is exploitable.
Definition 2.3 (Exploitable Security Model). We say that a security
model S is exploitable if the following holds for every protocol π
analyzed in S: every adversary that launches a successful no-match
attack on π can efficiently be used to break the security of the
protocol with respect to the security definition of S.
In traditional security models, no-match attacks can be exploited
in two ways. The most general way (that we already used before)
is to ask a Reveal-query to the oracle with the same original key
as the Test-oracle. Next we use this key to answer the Test-query.
By the definition of a no-match attack, the two oracles are not part-
nered, and thus this constitutes a valid (as defined by the winning
condition) attack in the security model.
Another way to exploit no-match attacks is by breaking explicit
mutual [6] (or unilateral/server-only [24]) authentication, a secu-
rity property that is not common in every security model for key
exchange. Essentially, the requirement says that if an oracle accepts
(i.e. computes some key), then there must always be another accept-
ing oracle that has matching conversations to this oracle. It is clear
that our no-match attacks directly break authentication as they can
make two oracles accept (even with the same key) although they
do not have matching conversations.9 In combination, these two
approaches for exploiting no-match attacks make them applicable
to a broad class of security protocols (and their respective security
models). This class contains key-exchange protocols that are based
on models which only (explicitly) formalize key-indistinguishability
like the CK [17] or eCK [37] model, and combinations of both, i.e.
protocols secure in models which besides key-indistinguishability
also explicitly require authentication (in the sense of [6]). Moreover,
no-match attacks can also be launched against protocols that are
secure under the notion of ACCE protocols [29]. In general, our
no-match attacks can theoretically be applicable to all protocols
that rely on matching conversations to define partnering, including
for example password-based key exchange protocols like [5].
2.4 Strong Security and Deterministic
Computation of v
It is relatively obvious that our no-match attacks can succeed if v
is computed using a probabilistic algorithm. For example, if v is a
digital signature, an attacker that obtains the secret signing key can
simply re-sign the message to compute v′. With high probability
we have v′ (cid:44) v. What is more subtle is that our attacks also work
if the signature scheme used to compute v provides strong security
or even is deterministic. This is exactly the point where many
security proofs fail. Let us go into more detail for our running
example, signed Diffie-Hellman. Recall that the security definition
of strongly secure signatures gives the adversary access to the
public key and a signing oracle. The winning condition is that the
adversary can produce a new message/signature pair. Now consider
an attempt to reduce the security of signed Diffie-Hellman to the
strong security of the signature scheme. The crucial point is that
in no-match attacks with advice the adversary is also given the
secret key. In particular, the security definition of strongly secure
signatures does not exclude that the adversary produces a new
signature on a previously queried message when the secret key is
given.
Quite similarly, it is not enough to require that the signature
scheme has a deterministic signing procedure. The problem is that
this only guarantees that the signing algorithm specified by the sig-
nature scheme outputs a single signature v per message m. However,
there may exist other algorithms that output, given m, a signature
v′ (cid:44) v such that both m, v and m, v′ pass the signature verification
positively. At this point we remark that the very same argument
on deterministic signatures can be made for the case of no-match
attacks without advice as well showing that deterministic sign-
ing does not guarantee strong security. So in sum requiring deter-
ministic signatures, or more generally deterministic cryptographic
primitives that compute the protocol messages, is not helpful at all.
3 NO-MATCH ATTACKS ON EXISTING
PROTOCOLS
As sketched before many security proofs of key exchange protocols
fail to cover no-match attacks. At the same time, it can be hard to
find out where the exact problem is. In this section, we therefore
8We want to avoid the term ‘partnered’ here because we consider no-match attacks
after which two oracles are essentially not partnered.
9For simplicity we assume that there is no potential third oracle having matching
conversations. (An active attacker, that controls the inputs to all oracles, can easily
make any oracle not have matching conversation to some other oracle.)
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1349present a diverse list of examples of existing protocols together with
concrete descriptions of successful no-match attacks. Note that all
our no-match attacks with advice apply to security models that
also claim to model perfect forward secrecy (PFS), key compromise
impersonation (KCI) attacks, or state (or ephemeral key) reveal at-
tacks. Intuitively, security against key impersonation attacks means
that key indistinguishability even holds if the adversary is provided
with the long-term secret of the Test-oracle at the beginning of the
security game. Perfect forward secrecy, in contrast, usually means
that the adversary is also allowed to obtain the long-term keys of
some oracle – which now even may be the Test-oracle or an oracle
partnered to the Test-oracle – after the oracle has accepted and
computed the session key. In stronger security models (like eCK)
the adversary is even allowed obtain the long-term keys before
the oracles accept. In the following we have classified the affected
protocols (in their corresponding security models) with respect to
the cryptographic mechanisms they rely on in the last message. We
provide a detailed example of a no-match attack in Appendix B.
3.1 Integrity Protection – MACs
The classical definition of MACs is deterministic. However, recently
Dodis, Kiltz, Pietrzak and Wichs [21] and Blazy, Kiltz, and Pan [11]
introduced efficient probabilistic and provably secure MACs that
have a variety of useful applications. We show that employing prob-
abilistic MACs for integrity protection in key exchange protocols
can be problematic. The first class of attacks deals with protocols
where Alice and Bob (i.e. their oracles) use their long-term secret
keys to derive a secret MAC key that is used to protect the in-
tegrity of the previous protocol messages. Assume that Alice sends
a probabilistically computed tag over all previous messages in the
last protocol message v. As in the general description of no-match
attacks, the attacker intercepts this message and computes a new
message v′ (cid:44) v that instead is sent to Bob. This works as follows:
By the power of the queries granted when modeling KCI and PFS se-
curity, the attacker can obtain Alice’s secret key (at the latest) after
she has sent v. In the next step, the attacker can compute the MAC
key used for the last protocol message. Finally, the attacker uses
this MAC key to compute a new tag v′. Both Alice and Bob accept
with the same key although they are not partnered since Alice has
sent v while Bob has received v′. A protocol which allows the use
of probabilistic MACs that is susceptible to our attacks is the Jeong-
Kwon-Lee KAM protocol (CANS’06) [31]. For concreteness, let us
assume that Alice’s oracle is the Test-oracle. The attack succeeds
since, in the KAM protocol, the MAC key can be computed from
the secret long-term key of Alice. However, in the KAM protocol
the MAC key can also be computed from the secret ephemeral key
of Bob’s oracle which in turn can be obtained via a RevealState
query. Thus there is a second way to launch a no-match attack
that utilizes the RevealState query. The attack proceeds exactly in
the same way except that the MAC key is computed using Bob’s
ephemeral secret key.
3.2 Authentication via Digital Signatures
In the following we will concentrate on protocols where Alice sends
a digital signature on message m to Bob as the last protocol message.
Our no-match attack proceeds exactly as outlined in our introduc-
tory example Signed Diffie-Hellman: the adversary first intercepts
Alice’s signature and uses her secret signing key to generate a new
signature on m. With overwhelming probability this signature will
differ from the original one. Finally, it sends the new signature to
Bob who checks its validity (and, on success, possibly sends some
other values to Alice). At the end of the protocol, Alice will accept
although there is no matching conversation with Bob. Protocols that
are susceptible to this attack are the signed Diffie-Hellman protocol
by Sarr et al. [39] that relies on the NAXOS transformation [37]
(SCN’10), the signature-based compiler [20] by Cremers and Feltz
which achieves perfect forward secrecy (PFS) in two-message or
one-round key exchange protocols (ESORICS’12)10, the signature-
based protocol [2] by Alawatugoda et al. (ASIACSS’14), and the
recent signature-based protocol [9] by Bergsma et al. (PKC’15). The
security models of these works all allow the adversary to obtain
Alice’s long-term secret before the last protocol message is received
by Bob’s oracle. At the same time the signature schemes used are ei-
ther probabilistic or deterministic. We remark that since the authors
of [2] do not require strong security, their protocol can also simply
be attacked by a no-match attack without advice. We provide a
detailed illustration of our attack on the compiler by Cremers and
Feltz (when applied to the NAXOS protocol) in Appendix B. We
remark that our no-match attack leads to the odd situation that this
compiler, which is designed to increase the security of the input
protocol, actually outputs a theoretically insecure protocol even if
the input was secure to begin with.
3.3 Authentication via Public Key Encryption
In the following, we consider a no-match attack that can be launched
if Bob sends an encrypted message to Alice that has to be decrypted
and checked using Alice’s secret key. In the following, Alice’s oracle
will serve as the Test-oracle. Recall that in the KCI security experi-
ment the adversary is given Alice’s secret key. It can thus intercept
the ciphertext, decrypt it and compute a new ciphertext on the same
message. If the encryption system is probabilistic (what is required
to guarantee mere CPA security) the ciphertext will differ from
the original one with high probability. However, Alice will accept
the new ciphertext without having a matching conversation with
Bob. Our no-match attacks can be applied to the recent protocol
by Alawatugoda, Boyd, and Stebila [1] (ACISP’14) which presents
a key exchange protocol that relies on a public key encryption
scheme that is secure under adaptively chosen ciphertext attacks in
the presence of after-the-fact leakage (CCLA2) [22]. (Essentially the
10The authors of [20] consider four models: Mw , eCKw , M-PFS, and eCK-PFS. In
contrast to (eCKw , eCK-PFS), Mw and M-PFS do not consider EphemeralKey queries
which reveal the ephemeral secret keys of protocol sessions. Note that in [20], Cremers
and Feltz require that the signature scheme does not reveal the long-term keys even
if the random coins are revealed (via an EphemeralKey-query). This can be realized
using a deterministic signature scheme. In fact, in their security theorem Cremers
and Feltz explicitly specify the signature scheme to be deterministic. The authors also
claim (Remark 1 in [20]) that the signature-based compiler could use a randomized
(strongly) unforgeable signature scheme if the security model does not allow to ask
a EphemeralKey-query. However, we can show that even if the security models are
restricted in one of these ways (deterministic signature scheme vs. probabilistic sig-
nature scheme with no EphemeralKey-query), the signature-based compiler is still
vulnerable to our no-match attacks. (Moreover, the attack also works if the random
coins involved in the signature generation cannot be revealed by a EphemeralKey.)
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1350definition is like IND-CCA security but the adversary can obtain
bounded information on the secret key.)
3.4 The BPR Framework (EC’00)
Under certain circumstances, no-match attacks can be launched
against the password-based key exchange protocol of Bellovin and
Merrit [8] that was provided by Bellare et al. (BPR) [5]. BPR analyze
a two message protocol EKE2, where the last message consists of a
single ciphertext c. Also, the derived session key does not depend
on c but only on the plaintext encrypted in c. For the concrete
instantiation of the encryption scheme they refer to [10], which
proposes several deterministic ciphers with arbitrary finite domains.
We observe that using any of the ciphers in [10] to instantiate EKE2
does not prevent no-match attacks if i) two distinct ciphertexts are
mapped to the same plaintext by the decryption routine, as it, for
example, is the case in the cycle-walking cipher of [10] and ii) the
receiver of the ciphertexts does not check if the ciphertexts are in
the correct domain. However, none of the ciphers in [10] explicitly
check ii) in the decryption algorithm.
3.5 Further Primitives
The above list of possible no-match attacks is by no means complete.
We have focused on the most popular cryptographic primitives used
in key exchange protocols. Also our selection of no-match attacks
should exemplify the diversity of possible no-match attacks.
There are many primitives that when used in key exchange