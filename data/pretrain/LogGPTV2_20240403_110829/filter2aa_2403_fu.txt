.text:00541418  
test    esi, esi 
.text:0054141A  
jnz    short loc_54142E 
.text:0054141C  
push    offset aCannotOpenIn_0 ; "Cannot open input file!\n" 
.text:00541421  
call    _printf 
.text:00541426  
add    esp, 4 
.text:00541429  
pop    edi 
.text:0054142A  
pop    esi 
.text:0054142B  
pop    ebp 
.text:0054142C  
pop    ebx 
.text:0054142D  
retn 
.text:0054142E 
.text:0054142E loc_54142E:   
; CODE XREF: decrypt_file+1A 
.text:0054142E  
push    2            
; Origin 
.text:00541430  
push    0            
; Offset 
.text:00541432  
push    esi          
; File 
.text:00541433  
call    _fseek 
.text:00541438  
push    esi          
; File 
.text:00541439  
call    _ftell 
.text:0054143E  
push    0            
; Origin 
.text:00541440  
push    0            
; Offset 
.text:00541442  
push    esi          
; File 
.text:00541443  
mov    ebp, eax 
.text:00541445  
call    _fseek 
.text:0054144A  
push    ebp          
; Size 
.text:0054144B  
call    _malloc 
.text:00541450  
push    esi          
; File 
.text:00541451  
mov    ebx, eax 
.text:00541453  
push    1            
; Count 
.text:00541455  
push    ebp          
; ElementSize 
.text:00541456  
push    ebx          
; DstBuf 
.text:00541457  
call    _fread 
.text:0054145C  
push    esi          
; File 
.text:0054145D  
call    _fclose 
.text:00541462  
add     esp, 34h 
.text:00541465  
mov     ecx, 3 
.text:0054146A  
mov     edi, offset aQr9_0 ; "QR9" 
.text:0054146F  
mov    esi, ebx 
.text:00541471  
xor    edx, edx 
.text:00541473  
repe cmpsb 
.text:00541475  
jz 
   short loc_541489 
.text:00541477  
push    offset aFileIsNotCrypt ; "File is not encrypted!\n" 
.text:0054147C  
call    _printf 
.text:00541481  
add    esp, 4 
.text:00541484  
pop    edi 
.text:00541485  
pop    esi 
.text:00541486  
pop    ebp 
.text:00541487  
pop    ebx 
.text:00541488  
retn 
.text:00541489 
.text:00541489 loc_541489:    
; CODE XREF: decrypt_file+75 
.text:00541489  
mov    eax, [esp+10h+Src] 
.text:0054148D  
mov    edi, [ebx+3] 
.text:00541490  
add    ebp, 0FFFFFFF9h 
.text:00541493  
lea    esi, [ebx+7] 
.text:00541496  
push    eax              
; Src 
.text:00541497  
push    ebp              
; int 
.text:00541498  
push    esi              
; int 
.text:00541499  
call    decrypt 
.text:0054149E  
mov    ecx, [esp+1Ch+arg_4] 
.text:005414A2  
push    offset aWb_0  
; "wb" 
.text:005414A7  
push    ecx          
; Filename 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
763 
.text:005414A8  
call    _fopen 
.text:005414AD  
mov    ebp, eax 
.text:005414AF  
push    ebp         
; File 
.text:005414B0  
push    1  
; Count 
.text:005414B2  
push    edi          
; Size 
.text:005414B3  
push    esi          
; Str 
.text:005414B4  
call    _fwrite 
.text:005414B9  
push    ebp          
; File 
.text:005414BA  
call    _fclose 
.text:005414BF  
push    ebx   
; Memory 
.text:005414C0  
call    _free 
.text:005414C5  
add    esp, 2Ch 
.text:005414C8  
pop    edi 
.text:005414C9  
pop    esi 
.text:005414CA  
pop    ebp 
.text:005414CB  
pop    ebx 
.text:005414CC  
retn 
.text:005414CC decrypt_file 
endp 
笔者在分析过程中逐步添加了各标签的名称。 
我们从文件头开始分析。第一个函数读取两个文件名和一个密码： 
.text:00541320 ; int __cdecl crypt_file(int Str, char *Filename, int password) 
.text:00541320 crypt_file       proc near 
.text:00541320 
.text:00541320 Str                = dword ptr  4 
.text:00541320 Filename          = dword ptr  8 
.text:00541320 password          = dword ptr  0Ch 
.text:00541320 
如果不能成功打开明文文件，程序就会进行异常处理： 
.text:00541320     
     mov      eax, [esp+Str] 
.text:00541324     
     push     ebp 
.text:00541325     
     push     offset Mode    
; "rb" 
.text:0054132A     
     push     eax          
; Filename 
.text:0054132B     
     call     _fopen       
; open file 
.text:00541330     
     mov      ebp, eax 
.text:00541332     
     add      esp, 8 
.text:00541335     
     test     ebp, ebp 
.text:00541337     
     jnz      short loc_541348 
.text:00541339     
     push     offset Format  
; "Cannot open input file!\n" 
.text:0054133E     
     call     _printf 
.text:00541343     
     add      esp, 4 
.text:00541346     
     pop      ebp 
.text:00541347     
     pop      ebp 
.text:00541348 
.text:00541348 loc_541348: 
通过 fseek()/ftell()函数获取文件大小： 
.text:00541348 push    ebx 
.text:00541349 push    esi 
.text:0054134A push    edi 
.text:0054134B push    2       
; Origin 
.text:0054134D push    0      
; Offset 
.text:0054134F push    ebp    
; File 
; move current file position to the end 
.text:00541350 call    _fseek 
.text:00541355 push    ebp           
; File 
.text:00541356 call    _ftell       
; get current file position 
.text:0054135B push    0             
; Origin 
.text:0054135D push    0             
; Offset 
.text:0054135F push    ebp           
; File 
.text:00541360 mov     [esp+2Ch+Str], eax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
764 
逆向工程权威指南（下册） 
; move current file position to the start 
.text:00541364 call    _fseek 
上述指令把文件大小向 64 字节边界对齐。程序所采用的加密算法只能处理 64 字节消息块。它的算法
相当直白：把文件尺寸除以 64，舍弃余数，然后把整除结果乘以 64。下述指令的“与”运算起到整除 64 并
清除余数的作用，然后加法运算指令把上述整除的商再加上 64。这组指令将使文件大小向 64 字节边界对齐。 
.text:00541369 mov     esi, [esp+2Ch+Str] 
; reset all lowest 6 bits 
.text:0054136D and     esi, 0FFFFFFC0h 
; align size to 64-byte border 
.text:00541370 add     esi, 40h 
接下来按照上述结果分配缓冲区： 
.text:00541373         
push    esi            
; Size 
.text:00541374         
call    _malloc 
调用memset()，即清除缓冲区数据：
①
① 实际上 calloc()函数可替代 malloc()和 memset()两个函数。 
.text:00541379 mov     ecx, esi 
.text:0054137B mov     ebx, eax   
; allocated buffer pointer -> to EBX 
.text:0054137D mov     edx, ecx 
.text:0054137F xor     eax, eax 
.text:00541381 mov     edi, ebx 
.text:00541383 push    ebp         
; File 
.text:00541384 shr     ecx, 2 
.text:00541387 rep stosd 
.text:00541389 mov     ecx, edx 
.text:0054138B push    1           
; Count 
.text:0054138D and     ecx, 3 
.text:00541390 rep stosb     
; memset (buffer, 0, aligned_size) 
调用标准 C 函数 fread()读取文件： 
.text:00541392    
mov      
eax, [esp+38h+Str] 
.text:00541396    
push     
eax      
; ElementSize 
.text:00541397    
push     
ebx      
; DstBuf 
.text:00541398    
call     
_fread   
; read file 
.text:0054139D    
push     
ebp      
; File 
.text:0054139E    
call     
_fclose 
调用 crypt()函数，并且向这个函数传递缓冲区、缓冲区尺寸及密码字符串： 
.text:005413A3     
mov      
ecx, [esp+44h+password] 
.text:005413A7     
push     
ecx    