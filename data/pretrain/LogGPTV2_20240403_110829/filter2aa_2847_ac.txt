# Houdini Emulator Detection and Security Analysis

## CPU Information
```
Processor: ARMv8 processor rev 1 (aarch64)
processor: 0
processor: 1
BogoMIPS: 24.00
Features: neon vfp half thumb fastmult edsp vfpv3 vfpv4 idiva idivt tls aes sha1 sha2 crc32
CPU implementer: 0x4e
CPU architecture: 8
CPU variant: 0x02
CPU part: 0x000
CPU revision: 1
Hardware: placeholder
Revision: 0000
Serial: 0000000000000000
```

## Houdini Emulator — Detection
© NCC Group 2021. All rights reserved

### Java Architecture Checking
- `System.getProperty("os.arch")`
- `/proc/cpuinfo`

### Memory Mapping Checking
- `/proc/self/maps`
- Dual x86/ARM shared libraries

### Detection from Noisy to Quiet
- The best implementation is one that issues no otherwise discernable syscalls.
- Houdini hides these:
  - `System.getProperty("os.arch") -> armv7l`

### Example Output
```
$ cat /proc/cpuinfo
Processor: ARMv8 processor rev 1 (aarch64)
processor: 0
processor: 1
BogoMIPS: 24.00
Features: neon vfp half thumb fastmult edsp vfpv3 vfpv4 idiva idivt tls aes sha1 sha2 crc32
CPU implementer: 0x4e
CPU architecture: 8
CPU variant: 0x02
CPU part: 0x000
CPU revision: 1
Hardware: placeholder
Revision: 0000
Serial: 0000000000000000
```

## Houdini Emulator — Escape to x86
© NCC Group 2021. All rights reserved

- `mprotect(2) + overwrite code`
- Not subtle
- x86 stack manipulation
- Find and clobber x86 stack with ROP payloads

## Security Concerns — RWX + Other Interesting Pages
© NCC Group 2021. All rights reserved

### Multiple RWX
- We can write x86 code to these pages and jump to it.
- Shared memory, which means we can write code from either x86/ARM.

### Example Memory Mappings
```
00008000-0000a000 rw-p [anon:Mem_0x10000002]
0e094000-10000000 rwxp [anon:Mem_0x20000000]
10000000-10003000 rw-p [anon:Mem_0x10002002]
10003000-10004000 ---p [anon:Mem_0x10002002]
10004000-10015000 rw-p [anon:Mem_0x10002002]
10015000-10016000 ---p [anon:Mem_0x10002002]
...
10128000-12000000 rw-p [anon:Mem_0x10002000]
12000000-12100000 rwxp [anon:Mem_0x10001000]
12100000-12122000 rw-p [anon:Mem_0x10001000]
1215a000-12193000 rw-p [anon:Mem_0x10001000]
ca6e8000-ca6e9000 ---p [anon:Mem_0x10000004]
ca6e9000-caae8000 rw-p [anon:Mem_0x10000004]
caae8000-caae9000 ---p [anon:Mem_0x10000004]
caae9000-cabe8000 rw-p [anon:Mem_0x10000004]
...
e4f99000-e4f9a000 ---p [anon:Mem_0x10000004]
e4f9a000-e4f9f000 rw-p [anon:Mem_0x10000004]
e8cb4000-e8cb6000 rwxp [anon:Mem_0x10000000]
```

## Security Concerns — NX Ignored
© NCC Group 2021. All rights reserved

- Houdini ignores the execute bit entirely.
- ARM libraries are loaded without the execute bit on their pages.
- No DEP/NX for ARM.
- Trivial to abuse (write to anywhere writable, and jump/return to it).

### Example Code
```c
#include <stdio.h>

int main() {
    unsigned int code[512] = {0};
    code[0] = 0xE2800001; // add r0, r0, #1
    code[1] = 0xE12FFF1E; // bx lr
    printf("code(1) returned: %d\n", ((int (*)(int))code)(1)); // Normally, this causes a segfault
    printf("code(5) returned: %d\n", ((int (*)(int))code)(5));
}
```

### Compilation and Execution
```
$ arm-linux-gnueabi-gcc nx-stack.c -static -Wl,-z,noexecstack -o nx-stack-static
$ file nx-stack-static
nx-stack-static: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 3.2.0, not stripped
$ ./nx-stack-static
code(1) returned: 2
code(5) returned: 6
```

## Libhoudini-aware Malware
© NCC Group 2021. All rights reserved

- App stores and security researchers often run apps in sandboxed environments to check for malicious behaviors.
- Mainly 3 different environments for running/analyzing apps:
  - Real ARM devices
  - Fully virtualized ARM environment (like QEMU)
  - x86 Android emulators (VMs)
- Apps that express different behaviors depending on which environment they are running in can, for example, be benign during analysis but malicious otherwise.
- Harder to detect.
- Inconsistent behavior is harder to analyze.

### Using JNI-loaded Native Android Code
- Using one of the detection methods discussed earlier, we can write JNI-loaded native Android code that does different things based on whether or not it is running through libhoudini.
- x86 Android emulator VMs, such as ones based on Android-x86, may use libhoudini for ARM compatibility.
- This is one possible approach used by app stores, so any form of fingerprinting can become a problem.
- If you know that your apps are only going to be analyzed in such environments, you could key malicious behaviors to the lack of libhoudini.

### Malicious Behavior with Libhoudini
- Conversely, a malicious app could do bad things only when it detects the presence of libhoudini, then abuse libhoudini to further obfuscate itself.
- For example, while we don’t know what the Play Store actually uses these days, its automatic app testing did not appear to run ARM APKs on x86 with libhoudini.

## Recommendations to Vendors and Platforms
© NCC Group 2021. All rights reserved

### Drop RWX Pages
- Where necessary, perform fine-grained page permission control.
- Implement efficient NX/userland page table implementation.
- Checking page permissions for each instruction would incur significant overhead.
- Instead, keep track of mappings and permissions in-process.
- Perform checks if the instruction is from a different page than the previous instruction’s, e.g., jumps or serial instructions across a page boundary.

### Use Virtualization
- Ensure that ASLR is implemented/used to protect sensitive structures.

### Custom NX Validation
- This could be done in a couple of ways:
  1. Trust only ARM `.so` `.text` sections on load.
  2. Check `/proc/self/maps` on each "new" page that hasn’t been added to the data structure.
  3. Instrument memory mapping-related syscalls (e.g., `mmap`, `mprotect`) to track page permissions.
- An ideal solution combines 2 and 3, with the checks for 2 performed as a catch-all.
  - Supports dynamic `.so` loading via `dlopen(3)`.
  - Supports legitimate JITing.
  - Removes JIT pages when cleared/reset/freed to prevent page reuse attacks.
- This data structure acts as a page table and should be heavily protected (writable only when being updated, surrounded by guard pages, not accessible to ARM, etc.).

### For Anyone Doing Analysis of Android Applications
- Dynamic analysis should also run apps through libhoudini.
- Static analysis should look for access to Houdini RWX pages and attempts to execute from non-executable pages.
- Look for anything scanning the JNIEnv function pointers.

## Conclusion
© NCC Group 2021. All rights reserved

- Houdini introduces a number of security weaknesses into processes using it.
- Some of these impact the security of the emulated ARM code, while some also impact the security of host x86 code.
- These issues overall undermine core native code hardening.
- Houdini not being well-documented publicly nor easily accessible may have prevented wider security analysis and research into it that could have caught these issues earlier.

## Disclosure — Timeline
© NCC Group 2021. All rights reserved

- [04/24/21] Findings (discussed in this talk) sent to Intel PSIRT via PI:EMAIL.
- [05/05/21] Intel PSIRT confirms receipt of findings and sends a few questions.
- [05/07/21] NCC Group sends a response answering Intel's questions.
- [05/07/21] Intel PSIRT confirms receipt of the additional information.
- [05/17/21] Intel PSIRT provides an update that the product team is looking into the findings.
- [06/25/21] Intel PSIRT provides an update that a fix release is planned for the end of July.
- [07/16/21] Additional findings (not discussed in this talk) sent to Intel PSIRT.
- [07/19/21] Intel PSIRT confirms receipt of the additional findings and that they will be sent to the Houdini team.
- [07/21/21] NCC Group previews this talk for Intel PSIRT.

## Big Special Thanks to...
© NCC Group 2021. All rights reserved

- Jeff Dileo
- Jennifer Fernick
- Effi Kishko

## Questions?
PI:EMAIL
@im_eningeer