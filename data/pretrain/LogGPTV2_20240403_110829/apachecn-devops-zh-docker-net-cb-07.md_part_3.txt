172.16.16.0/24 10.10.10.101
9bfb1cb0295ba87fe88b7373a8ff502b1f90149741b2f43487d66898ffad775d
user@docker2:~$
```
请注意，我再次将同一个子网传递给了 Weave。运行 Weave 的每台主机上的 IP 分配范围必须相同。只有同意相同 IP 分配范围的主机才能正常运行。现在让我们检查 Weave 服务的状态:
```
user@docker2:~$ weave status
……
Connections: 1 (1 established)
          Peers: 2 (with 2 established connections)
 TrustedSubnets: none
        Service: ipam
         Status: idle
          Range: 172.16.16.0/24
  DefaultSubnet: 172.16.16.0/24 
…… 
user@docker2:~$
```
输出显示两个对等体，表明我们对`docker1`的对等是成功的。请注意，IPAM 服务显示状态为`idle`。`idle`的地位意味着 Weave 在决定哪些主机将获得什么 IP 分配之前，正在等待更多的对等机加入。让我们看看当我们运行一个容器时会发生什么:
```
user@docker2:~$ weave run -dP --name=web2 jonlangemak/web_server_2
379402b05db83315285df7ef516e0417635b24923bba3038b53f4e58a46b4b0d
user@docker2:~$
```
如果我们再次检查 Weave 状态，我们应该看到 IPAM 现在已经从**空闲**变为**准备好**:
```
user@docker2:~$ weave status
…… 
    Connections: 1 (1 established)
          Peers: 2 (with 2 established connections)
 TrustedSubnets: none
        Service: ipam
         Status: ready
          Range: 172.16.16.0/24
  DefaultSubnet: 172.16.16.0/24 
…… 
user@docker2:~$
```
运行连接到 Weave 网络的第一个容器迫使 Weave 达成共识。此时，Weave 已决定集群大小为 2，并已尽最大努力在主机之间分配可用的 IP 地址。让我们在主机`docker1`上运行一个容器，然后检查分配给每个容器的 IP 地址:
```
user@docker1:~$ weave run -dP --name=web1 jonlangemak/web_server_1
fbb3eac421159308f41d795638c3a4689c92a9401718fd1988083bfc12047844
user@docker1:~$ weave ps
weave:expose 12:d2:fe:7a:c1:f2
fbb3eac42115 02:a7:38:ab:73:23 172.16.16.1/24
user@docker1:~$
```
使用 **weave ps** 命令，我们可以看到我们刚刚在主机`docker1`上生成的容器收到了一个`172.16.16.1/24`的 IP 地址。如果我们检查主机`docker2`上的容器`web2`的 IP 地址，我们会看到它有一个`172.16.16.128/24`的 IP 地址:
```
user@docker2:~$ weave ps
weave:expose e6:b1:90:cd:76:da
dde411fe4c7b c6:42:74:89:71:da 172.16.16.128/24
user@docker2:~$
```
这说得很有道理。Weave 知道它在网络中有两个成员，所以它直接将分配分成两半，本质上是给每个主机自己的`/25`网络分配。`docker1`从`/24`的上半场开始分配，`docker2`从下半场开始。
尽管完全分配了整个空间，但这并不意味着我们现在没有知识产权空间了。这些初始分配更像是保留，可以根据 Weave 网络的大小进行更改。例如，我们现在可以将主机`docker3`添加到 Weave 网络中，并在其上启动另一个`web1`容器实例:
```
user@docker3:~$ weave launch-router --ipalloc-range \
172.16.16.0/24 10.10.10.101
8e8739f48854d87ba14b9dcf220a3c33df1149ce1d868819df31b0fe5fec2163
user@docker3:~$ weave run -dP --name=web1 jonlangemak/web_server_1
0c2193f2d7569943171764155e0e93272f5715c257adba75ed544283a2794d3e
user@docker3:~$ weave ps
weave:expose ae:af:a6:36:18:37
0c2193f2d756 76:8d:4c:ee:08:db 172.16.16.224/24
user@docker3:~$ 
```
因为网络现在有更多的成员，Weave 只是进一步将初始分配分成更小的块。根据分配给每台主机上的容器的 IP 地址，我们可以看到 Weave 试图将分配保持在有效的子网内。下图显示了当第三和第四台主机加入 Weave 网络时，IP 分配会发生什么情况:
![How to do it…](img/B05453_07_05.jpg)
重要的是要记住，虽然分配给每台服务器的分配是灵活的，但是当它们将 IP 地址分配给容器时，它们都使用与初始分配相同的掩码。这确保了所有容器都假设它们在同一个网络上，并且彼此之间具有直接连接，从而消除了路由指向其他主机的需要。
为了证明所有主机的初始 IP 分配必须相同，我们可以尝试使用不同的子网加入最后一台主机`docker4`:
```
user@docker4:~$ weave launch-router --ipalloc-range 172.64.65.0/24 10.10.10.101
9716c02c66459872e60447a6a3b6da7fd622bd516873146a874214057fe11035
user@docker4:~$ weave status
……
        Service: router
       Protocol: weave 1..2
           Name: 42:ec:92:86:1a:31(docker4)
     Encryption: disabled
  PeerDiscovery: enabled
        Targets: 1
 Connections: 1 (1 failed)
……
user@docker4:~$
```
如果我们检查 Weave 路由器的容器日志，我们会发现它无法加入现有的 Weave 网络，因为定义了错误的 IP 分配:
```
user@docker4:~$ docker logs weave
…… 
INFO: 2016/10/11 02:16:09.821503 ->[192.168.50.101:6783|ae:af:a6:36:18:37(docker3)]: connection shutting down due to error: Incompatible IP allocation ranges (received: 172.16.16.0/24, ours: 172.64.65.0/24) 
…… 
```
加入现有 Weave 网络的唯一方法是使用与所有现有节点相同的初始 IP 分配。
最后，需要强调的是，以这种方式使用 Weave IPAM 并不是必须的。您可以通过在`weave run`期间指定一个 IP 地址来手动分配 IP 地址，如下所示:
```
user@docker1:~$ weave run 1.1.1.1/24 -dP --name=wrongip \
jonlangemak/web_server_1
259004af91e3b0367bede723c9eb9d3fbdc0c4ad726efe7aea812b79eb408777
user@docker1:~$
```
指定单个 IP 地址时，可以选择任意喜欢的 IP 地址。正如您将在后面的菜谱中看到的，您还可以指定一个子网进行分配，并让 Weave 跟踪 IPAM 的子网分配。从子网分配 IP 地址时，子网必须是初始 Weave 分配的一部分。
如果您希望手动将 IP 地址分配给某些容器，明智的做法是在初始 Weave 配置期间配置一个额外的 Weave 参数，以限制动态分配的范围。您可以在启动期间将`--ipalloc-default-subnet`参数传递给 Weave，以限制动态分配给主机的 IP 地址的范围。例如，您可以传递这个:
```
weave launch-router --ipalloc-range 172.16.16.0/24 \
--ipalloc-default-subnet 172.16.16.0/25
```
这将把 Weave 子网配置为`172.16.16.0/25`，让更大网络的其余部分可供手动分配。我们将在后面的食谱中看到，这种类型的配置在 Weave 如何处理整个 Weave 网络的网络隔离中起着重要作用。
# 使用 Weave 域名系统
自然，IPAM 之后要考虑的下一件事是名称解析。无论规模大小，通过除了 IP 地址之外的方式来定位和识别容器成为一种必要。很像 Docker 的更新版本，Weave 提供了自己的 DNS 服务来解析存在于 Weave 网络上的容器名称。在这份食谱中，我们将回顾 Weave 域名系统的默认配置，并展示它是如何实现的，以及一些相关的配置设置来帮助您启动和运行。
## 做好准备
假设您正在构建我们在本章第一个食谱中创建的实验室。还假设主机安装了 Docker 和 Weave。Docker 应该处于默认配置，Weave 应该在所有四个主机成功对等的情况下安装，就像我们在本章的第一个食谱中所做的那样。
## 怎么做…
如果您一直关注到本章的这一点，那么您已经提供了 WeaveDNS。Weave 域名系统与 Weave 路由器容器一起提供，默认情况下是启用的。我们可以通过查看 Weave 状态看到这一点:
```
user@docker1:~$ weave status
……
        Service: dns
         Domain: weave.local.
       Upstream: 10.20.30.13
            TTL: 1
        Entries: 0
……
```
当 Weave 提供 DNS 服务时，它以一些合理的默认值开始。在这种情况下，它检测到我的主机域名系统服务器是`10.20.30.13`，因此它将其配置为上游解析器。还选择了`weave.local`作为域名。如果我们使用 weave run 语法启动一个容器，weave 将确保以允许容器使用该 DNS 服务的方式提供容器。例如，让我们在主机`docker1`上启动一个容器:
```
user@docker1:~$ weave run -dP --name=web1 jonlangemak/web_server_1
c0cf29fb07610b6ffc4e55fdd4305f2b79a89566acd0ae0a6de09df06979ef36
user@docker1:~$ docker exec –t web1 more /etc/resolv.conf
nameserver 172.17.0.1
user@docker1:~$
```
启动容器后，我们可以看到 Weave 配置容器的`resolv.conf`文件的方式与 Docker 不同。回想一下，默认情况下，在非用户定义的网络中，Docker 将为容器提供与 Docker 本身相同的 DNS 配置。在这种情况下，Weave 给了容器一个名称服务器`172.17.0.1`，默认情况下，这是分配给`docker0`桥的 IP 地址。您可能想知道 Weave 如何期望容器通过与`docker0`桥对话来解析自己的域名系统。解决方法很简单。Weave 路由器容器在主机模式下运行，并且有一个绑定到端口`53`的服务:
```
user@docker1:~$ docker network inspect host
…… 
"Containers": {        "03e3e82a5e0ced0b973e2b31ed9c2d3b8fe648919e263965d61ee7c425d9627c": {
                "Name": "weave",
……
```
如果我们检查绑定在主机上的端口，我们可以看到 Weave 路由器正在暴露端口`53`:
```
user@docker1:~$ sudo netstat -plnt
Active Internet connections (only servers)
……
Proto Local Address State       PID/Program name
tcp   172.17.0.1:53 LISTEN      2227/weaver
```
这意味着 Weave 容器中的 WeaveDNS 服务将在`docker0`桥接口上监听 DNS 请求。让我们在主机`docker2`上启动另一个容器:
```
user@docker2:~$ weave run -dP --name=web2 jonlangemak/web_server_2
b81472e86d8ac62511689185fe4e4f36ac4a3c41e49d8777745a60cce6a4ac05
user@docker2:~$ docker exec -it web2 ping web1 -c 2
PING web1.weave.local (10.32.0.1): 48 data bytes
56 bytes from 10.32.0.1: icmp_seq=0 ttl=64 time=0.486 ms
56 bytes from 10.32.0.1: icmp_seq=1 ttl=64 time=0.582 ms