uid=1000(±e) gid=1000(ne)
groups=4(adn) ,20 (dia1out) ,24 (cdrom) , 25 (f1oppy) , 29 (audio) ,30 (dip) , 44 (v
ideo) ,46 (plugdev) , 108(1padmin) , 114(admin) , 1000 (me)
103
---
## Page 105
正如我们能看到的，两个系统中用户的uid和gid号码是不同的。原因很简单，因为Fedora
系统从500开始进行普通用户帐户的编号，而Ubuntu从1000开始。我们也能看到Ubuntu
的用户属于更多的用户组。这和Ubuntu管理系统设备和服务权限的方式有关系。
那么这些信息来源于哪里呢？像Linux系统中的许多东西一样，来自一系列的文本文件。
用户帐户定义在/etc/passwd文件里面，用户组定义在/etc/group文件里面。当用户帐户和用
户组创建以后，这些文件随着文件/etc/shadow的变动而修改，文件/etc/shadow包含了关于用
户密码的信息。对于每个用户帐号，文件/etc/passwd定义了用户（登录）名uidgid、帐号
的真实姓名、家目录和登录shell。如果你查看一下文件/etc/passwd和文件/etc/group的内容，
你会注意到除了普通用户帐号之外，还有超级用户（uid0）帐号，和各种各样的系统用户。
在下一章中，当我们讨论进程时，你会知道这些其他的“用户”是谁，实际上，他们相当忙
碌。
然而许多像Unix的系统会把普通用户分配到一个公共的用户组中，例如“users”，现在的
Linux会创建一个独一无二的，只有一个成员的用户组，这个用户组与用户同名。这样使某种
类型的权限分配更容易些。
10.2读取、写入和执行
对于文件和目录的访问权力是根据读访问、写访问和执行访问来定义的。如果我们看一下Is命
令的输出结果，我们能得到一些线索，这是怎样实现的：
[ne@linuxbox -]$ > foo.txt
[ne@linuxbox-]$ ls -1 foo.txt
rv-rv-r-- 1 mene0 2008-03-06 14:52 foo.txt
列表的前十个字符是文件的属性。这十个字符的第一个字符表明文件类型。下表是你可能
经常看到的文件类型（还有其它的，不常见类型）：
属性
文件类型
二
一个普通文件
d
一个目录
一个符号链接。注意对于符号链接文件，剩余的文件属性总
是"rwxrwxrwx”，而且都是虚拟值。真正的文件属性是指符
号链接所指向的文件的属性。
104
---
## Page 106
C
一个字符设备文件。这种文件类型是指按照字节流来处理
数据的设备。比如说终端机或者调制解调器
6
一个块设备文件。这种文件类型是指按照数据块来处理数
据的设备，例如一个硬盘或者CD-ROM盘。
表10-1:文件类型
剩下的九个字符叫做文件模式，代表着文件所有者、文件组所有者和其他人的读、写和执
行权限。
Owner
Group
World
rwx
rwx
rwx
图1：权限属性
当设置文件模式后，rw和x模式属性对文件和目录会产生以下影响：
属性
文件
目录
允许打开并
允许列出目录中的内容，前提是目录必须设置了可执
读取文件内
行属性（x）。
容。
允许写入文
允许在目录下新建、删除或重命名文件，前提是目录
件内容或截
必须设置了可执行属性（x）。
断文件。但
是不允许
对文件进行
重命名或删
除，重命名
或删除是由
目录的属性
决定的。
105
---
## Page 107
允许将文件允许进入目录，例如：cddirectory。
作为程序来
执行。使用
脚本语言编
写的程序必
须设置为可
读才能被执
行。
表10-2:权限属性
下面是权限属性的一些例子：
文件属性
含义
-rWx-—
一个普通文件，对文件所有者来说可读、可写、可执行。其
他人无法访问。
-rW-
一个普通文件，对文件所有者来说可读可写。其他人无法访
问。
J--II
一个普通文件，对文件所有者来说可读可写，文件所有者的
组成员可以读该文件，其他所有人都可以读该文件。
-IWXT-XI-X
一个普通文件，对文件所有者来说可读、可写、可执行。也
可以被其他的所有人读取和执行。
-IW-IW-
一个普通文件，对文件所有者以及文件所有者的组成员来说
可读可写。
lrwxrwxrwx
一个符号链接，符号链接的权限都是虚拟的，真实的权限应
该以符号链接指向的文件为准。
drwxrwx-
一个目录，文件所有者以及文件所有者的组成员可以访问该
目录，并且可以在该目录下新建、重命名、删除文件。
drwxr-x--
一个目录，文件所有者可以访问该目录，并且可以在该目录
下新建、重命名、删除文件，文件所有者的组成员可以访问
该目录，但是不能新建、重命名、删除文件。
表10-3:权限属性示例
106
---
## Page 108
10.3chmod-更改文件模式
更改文件或目录的模式（权限），可以利用chmod命令。注意只有文件的所有者或者超级用户
才能更改文件或目录的模式。chmod命令支持两种不同的方法来改变文件模式：八进制数字表
示法或符号表示法。首先我们讨论一下八进制数字表示法。
究竟什么是八进制？
八进制（以8为基数）及其亲戚十六进制（以16为基数）都是数字系统，通常
被用来表示计算机中的数字。我们人类，因为（或者至少大多数人）天生有十个手
指的事实，利用以10为基数的数字系统来计数。计算机，从另一方面讲，生来只有
一个手指，因此它以二进制（以2为基数）来计数。它们的数字系统只有两个数值
0和1。因此在二进制中，计数看起来像这样：
0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011.
在八进制中，逢八进一，用数字0到7来计数，像这样：
0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21.
十六进制中，使用数字0到9.加上大写字母“A”到"F”来计数，逢16进一：
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, 10, 11, 12, 13.
虽然我们能知道二进制的意义（因为计算机只有一个手指），但是八进制和十六
进制对什么有好处呢？答案是为了人类的便利。许多时候，在计算机中，一小部分
数据以二进制的形式表示。以RGB颜色为例来说明。大多数的计算机显示器，每
个像素由三种颜色组成：8位红色，8位绿色，8位蓝色。这样，一种可爱的中蓝色
就由24位数字来表示：
010000110110111111001101
我不认为你每天都喜欢读写这类数字。另一种数字系统对我们更有帮助。每个
十六进制数字代表四个二进制。在八进制中，每个数字代表三个二进制数字。那么
代表中蓝色的24位二进制能够压缩成6位十六进制数：
436FCD
色，“6F”代表绿色，“CD”代表蓝色。
现在，十六进制表示法（经常叫做“hex"）比八进制更普遍，但是我们很快会看
到，用八进制来表示3个二进制数非常有用处.
107
---
## Page 109
通过八进制表示法，我们使用八进制数字来设置所期望的权限模式。因为每个八进制数字
代表了3个二进制数字，这种对应关系，正好映射到用来存储文件模式所使用的方案上。下表
展示了我们所要表达的意思：
Octal
Binary
File Mode
0
000
1
001
-X
2
010
-W-
3
011
-WX
4
100
I--
5
101
r-x
6
110
rw-
7
111
IWX
通过使用3个八进制数字，我们能够设置文件所有者、用户组和其他人的权限：
[neglinuxbox -]$ > foo.txt
[ne@linuxbox -]$ ls -1 foo.txt
-rv-rv-r-- 1 mene02008-03-06 14:52 foo.txt
[ne@linuxbox -]$ chnod 600 foo.txt
4xoog [-  s[- xoqmutoou]
ne0 2008-03-06 14:52 foo.txt
通过传递参数“600”，我们能够设置文件所有者的权限为读写权限，而删除用户组和其他人
的所有权限。虽然八进制到二进制的映射看起来不方便，但通常只会用到一些常见的映射关系：
7 (rwx). 6 (rw-), 5 (r-x), 4 (r--). 和 0 (-) 
chmod命令支持一种符号表示法，来指定文件模式。符号表示法分为三部分：更改会影响
谁，要执行哪个操作，要设置哪种权限。通过字符“u”、“g”、“o”和“a”的组合来指定要影
响的对象，如下所示：
"user”的简写，意思是文件或目录的所有者。
g
用户组。
0
"others”的简写，意思是其他所有的人。
a
"all"的简写，是"u”，"g"和“o”三者的联合。
表10-4:chmod命令符号表示法
108
---
## Page 110
如果没有指定字符，则假定使用“all"。执行的操作可能是一个“+”字符，表示加上一个
权限，一个“一”，表示删掉一个权限，或者是一个“=”，表示只有指定的权限可用，其它所有
的权限被删除。
权限由“r”、“w”和“x”来指定。这里是一些符号表示法的实例：
11+x
为文件所有者添加可执行权限。
11-x
删除文件所有者的可执行权限。
+x
为文件所有者，用户组，和其他所有人添加可执行权限。等
价于 a+x°
MI-0
除了文件所有者和用户组，删除其他人的读权限和写权限。
go=rW
给文件所属的组和文件所属者/组以外的人读写权限。如果
文件所属组或其他人已经拥有执行的权限，执行权限将被移
除。
u+x,go=rw
给文件拥有者执行权限并给组和其他人读和执行的权限。
多种设定可以用逗号分开。
表10-5:chmod符号表示法实例
一些人喜欢使用八进制表示法，而另一些人则非常喜欢符号表示法。符号表示法的优点是，
允许你设置文件模式的某个属性，而不影响其他的属性。
看一下chmod命令的手册页，可以得到更详尽的信息和chmod命令的各个选项。要注意
"--recursive”选项：它可以同时作用于文件和目录，所以它并不是如我们期望的那么有用处，因
为我们很少希望文件和目录拥有同样的权限。
10.4借助GUI来设置文件模式
现在我们已经知道了怎样设置文件和目录的权限，这样我们就可以更好的理解GUI中的设置
权限对话框。在Nautilus（GNOME)和Konqueror（KDE）中，右击一个文件或目录图标将会
弹出一个属性对话框。下面这个例子来自KDE3.5：
109
---
## Page 111
Properties for pws-read-? ×
General
Permissions
Access Permissions
JauMo
Can Read & Write
Group:
Forbidden
Others: Forbidden
 Is executable
 Agvanced Permissions
Ownership
User:  bshotts
Group: bshotts
图2:KDE 3.5文件属性对话框
从这个对话框中，我们看到可以设置文件所有者、用户组和其他人的访问权限。在KDE
中，右击“AdvancedPermissions”按钮，会打开另一个对话框，这个对话框允许你单独设置各
个模式属性。这也可以通过命令行来理解！
10.5
umask一设置默认权限
当创建一个文件时，umask命令控制着文件的默认权限。umask命令使用八进制表示法来表达
从文件模式属性中删除一个位掩码。大家看下面的例子：
[ne@linuxbox -]$ rn -f foo.txt
[ne@linuxbox -]$ unask
0002
[nellinuxbox -]$ > foo.txt
[ne@linuxbox -]$ ls -1 foo.txt
rv-rv-r-- 1 mene0 2008-03-06 14:53 foo.txt
首先，删除文件foo.txt，以此确定我们从新开始。下一步，运行不带参数的umask命令
看一下当前的掩码值。响应的数值是0002（0022是另一个常用值），这个数值是掩码的八进制
表示形式。下一步，我们创建文件foo.txt，并且保留它的权限。
110