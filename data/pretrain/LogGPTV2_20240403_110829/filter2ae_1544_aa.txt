翻译自：  
翻译：聂心明
这篇文章我将介绍如何去构建CVE-2018-11776的利用链。首先我将介绍各种缓解措施，这些措施是Struts 安全团队为了限制OGNL
的能力而设置的，并且我也会介绍绕过这些措施的技术。我将重点介绍[SecurityMemberAccess](https://github.com/apache/struts/blob/STRUTS_2_5_18/core/src/main/java/com/opensymphony/xwork2/ognl/SecurityMemberAccess.java)
类的一般改进，这个类就像一个安全管理系统，它决定OGNL 能做什么，也会限制OGNL
的执行环境。我将忽略很多特殊组件的特殊的措施，例如ParametersInterceptor类中改进了白名单机制。
# 在Struts中利用OGNL 的简短历史
在介绍CVE-2018-11776之前，我先说明一些背景并且介绍一些概念以帮助理解OGNL利用过程。我将利用TextArea中的 [double
evaluation
bug](https://lgtm.com/blog/apache_struts_double_evaluations)说明利用过程，因为TextArea
可以更方便的显示OGNL（可能这是一种特性）。首先我来介绍一些OGNL的基本概念。
## OGNL 执行环境
在Struts的中，OGNL可以使用#符号访问全局对象。这个[文档](https://cwiki.apache.org/confluence/display/WW/OGNL)
主要介绍那些可以被访问的对象。那里会有一个对象列表，其中有两个对象对于构建exp非常关键。首先是
_memberAccess，这个对象在SecurityMemberAccess对象中被用来控制OGNL 行为，并且另一些是context，这些context
map可用访问更多的其他的对象。这对于漏洞的利用非常有用。你可以通过 _memberAccess非常容易的修改SecurityMemberAccess
的安全设置。比如，许多容易的利用开始于：
    #_memberAccess['allowStaticMethodAccess']=true
通过_memberAccess修改完设置后，就可以执行下面代码
    @java.lang.Runtime@getRuntime().exec('xcalc')
弹出了计算器
## SecurityMemberAccess
上面那一节已经解释过，Struts 通过_memberAccess去控制OGNL所能执行的东西。最初，使用一个Boolean
变量（allowPrivateAccess, allowProtectedAccess, allowPackageProtectedAccess and
allowStaticMethodAccess)去控制OGNL所能访问的方法和Java类成员对象。默认情况下，所有的设置都是false。在最近的版本中，有三个黑名单（excludedClasses,
excludedPackageNames 和 excludedPackageNamePatterns）被用来禁用一些特殊的类和包。
## 没有静态函数，但是允许使用构造函数(在2.3.20之前)
但是默认情况下，_memberAccess被配置用来阻止访问静态，私有和保护函数。可是，在2.3.14.1之前，它可以更容易通过
`#_memberAccess`绕过并且改变这些设置。许多exp就是用到了这一点，比如 ：
    (#_memberAccess['allowStaticMethodAccess']=true).(@java.lang.Runtime@getRuntime().exec('xcalc'))
在2.3.14.1和更新的版本，allowStaticMethodAccess已经没有用了并且已经没法再修改了。可是，依然可以通过_memberAccess使用类的构造函数并且访问公共函数，实际上没有必要改变_memberAccess中的任何设置来执行任意代码
    (#p=new java.lang.ProcessBuilder('xcalc')).(#p.start())
这个方法一直到2.3.20这个版本为止  
## 没有静态方法，没有构造函数，但是允许直接访问类 （ 2.3.20-2.3.29 ）
在2.3.20,在一些类中引入了黑名单excludedClasses, excludedPackageNames 和
excludedPackageNamePatterns。另外一些重要的改变是阻止了所有构造函数的调用。这就不能用ProcessBuilder这个payload。从这一点来看，静态函数和构造函数都没有权限去调用了，这对于OGNL
有相当强的限制。可是，_memberAccess仍然可以访问而且还可以做更多的东西。还有静态对象
[DefaultMemberAccess](https://github.com/jkuhnert/ognl/blob/OGNL_3_1_15/src/java/ognl/OgnlContext.java#L59)
可以访问。默认情况下，在SecurityMemberAccess类中的DefaultMemberAccess
也是很脆弱的版本，它可以访问静态函数和构造函数。所以，很简单，直接用DefaultMemberAccess替换 _memberAccess的值
    (#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(@java.lang.Runtime@getRuntime().exec('xcalc'))
这种方法一直到2.3.29之前都可以用，并且这种技巧依然是最近exp中常常使用到的
## 有限的类访问和_memberAccess都被禁止了（2.3.30/2.5.2+）
最后，
_memberAccess没有用了，所以上面说到的一些小技巧也没有用了。更重要的是，ognl类，MemberAccess和ognl.DefaultMemberAccess也被加入了[黑名单](https://github.com/apache/struts/commit/016b8eedd5ca47fce95e2a16069e640e3842906d)，怎样去绕过他们呢？让我们看看S2-045的payload
    (#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.excludedClasses.clear()).(#ognlUtil.excludedPackageNames.clear()).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('xcalc'))
注意到的第一件事是，这个exp没有试图访问_memberAccess。代替它的是，它试图获得
[OgnlUtil](https://github.com/apache/struts/blob/STRUTS_2_5_10/core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java)的实例，并且清理了所有的黑名单。所有它是怎么工作的？这个exp首先从
context map中获得一个
[Container](https://github.com/apache/struts/blob/STRUTS_2_5_18/core/src/main/java/com/opensymphony/xwork2/inject/Container.java)
，这个map中包含下面的keys：  
在OGNL执行环境中 com.opensymphony.xwork2.ActionContext.container这个keys给我一个
Container实例。  