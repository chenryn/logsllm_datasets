# babyaeg——自动化之路初探

##### 译文声明
本文是翻译文章，具体内容表达及含义以原文为准。

babyaeg 是强网杯的一道 pwn 题目。与常见的 pwn 题目不同，本题并不是提供一个静态的二进制文件供分析和攻击，而是随机生成二进制文件，并将其 base64 编码后发送给解题者。解题者必须在五秒内提供有效的 payload 进行攻击。如果在这段时间内未能成功执行任意代码，则连接将被关闭，需要重新开始。因此，我们需要实现对二进制文件的自动化分析。

## IO 处理

作为解题的第一步，我们首先来看如何与远程服务器进行交互：

```
Welcome to QWB BABYAEG->

I will send you a newly compiled binary (probably exploitable) in base64 format.
After you get the binary, I will be waiting for your input as plain text.
When your input is given, I will execute the binary with your input as argv[1].
You have 5 seconds to build an exploit payload.
Hint: base64 -d 1.bin | gunzip > 1.elf
wait…

H52Qf4owMSIgQAAACBMmFADAB4CDCSGFMKAQiMKEsIJBvIjQIg4ACgBY3ABAAwCKCAkktMjRIsuVIi/CYCiTpkIEHAEMSKgSIRybCX++9ClgKAAOOZFy3Khw…

Here, get this binary and give me some crafted argv[1] for exploitation.
Remember, you only have 5 seconds… hurry up!
Time expired! bye!
```

从上面的信息可以看出，我们接收到的是一个 base64 编码后的字符串。为了简化处理过程，我们需要编写脚本来自动获取这些二进制文件并保存到本地。以下是一个简单的 Python 脚本示例：

```python
from pwn import *
import os

def get_binary():
    p = remote('***.**.**.***', 40005)
    tmp = p.recvuntil(b'wait...\n')
    res = p.recvuntil(b'\n')[:-1]
    i = 0
    while True:
        if os.path.exists(f'binaries/binary{i}'):
            i += 1
            continue
        with open(f'tmpbinary{i}', 'wb') as f:
            f.write(res)
        break
    os.system(f'base64 -d tmpbinary{i} | gunzip > binaries/binary{i}')
    os.remove(f'tmpbinary{i}')

get_binary()
```

通过反复运行此脚本或添加循环，我们可以在 `binaries` 文件夹中收集多个二进制文件，以便进一步分析。

## 静态分析

接下来，我们对这些二进制文件进行静态分析。首先查看程序的基本信息：

- 该题目没有启用 Stack Canary。
- 没有开启 PIE（Position Independent Executable）。
- 启用了 NX（No-eXecute），这意味着我们需要生成 ROP（Return-Oriented Programming）链来绕过这一限制。

我们选取其中一个二进制文件使用 IDA Pro 打开，观察其流程。主函数如下所示：

```c
__int64 __fastcall main(int a1, char **a2, char **a3)
{
    __int64 result; // rax
    unsigned int v4; // eax
    int v5; // eax
    int v6; // eax
    int v7; // eax
    char v8; // [rsp+15h] [rbp-1Bh]
    char v9; // [rsp+16h] [rbp-1Ah]
    char v10; // [rsp+17h] [rbp-19h]
    int i; // [rsp+18h] [rbp-18h]
    int v12; // [rsp+1Ch] [rbp-14h]
    int v13; // [rsp+20h] [rbp-10h]
    int v14; // [rsp+24h] [rbp-Ch]
    int v15; // [rsp+28h] [rbp-8h]
    int v16; // [rsp+2Ch] [rbp-4h]

    if (a1 == 2)
    {
        v4 = sub_26095B9(1LL, 2LL, 3LL, 4LL, 5LL, 6LL);
        srand(v4);
        dword_280BC5C = strlen(a2[1]) >> 1;
        if (dword_280BC5C < 0x10)
        {
            // 进一步处理
        }
    }
}
```

从上述代码片段可以看出，程序检查了命令行参数的数量，并调用了一个名为 `sub_26095B9` 的子函数。随后，它使用 `srand` 初始化随机数生成器，并计算输入字符串长度的一半。如果长度小于 0x10，则继续执行其他操作。

通过进一步分析这些二进制文件，我们可以找到更多的共同点，并构建相应的利用方法。