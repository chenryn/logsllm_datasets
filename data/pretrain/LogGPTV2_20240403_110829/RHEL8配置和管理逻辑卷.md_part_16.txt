::: section
::: titlepage
## []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc-removing-integrity-from-raid-lv_using-dm-integrity-with-RAID-LV}从 RAID LV 中删除完整性 {.title}
:::
在 RAID LV 中添加完整性限制了您可以在那个 RAID LV
上执行的一些操作。因此，您必须在执行某些操作前删除完整性。
::: itemizedlist
**先决条件**
-   您必须有 root 访问权限。
:::
::: itemizedlist
**流程**
-   从 RAID LV 中删除完整性：
    ``` screen
    # lvconvert --raidintegrity n /
    ```
    其中
    ::: variablelist
    [``{.literal}]{.term}
    :   指定要在其中创建 RAID LV 的卷组名称。
    [``{.literal}]{.term}
    :   指定您要创建的 LV 的名称。
    :::
:::
:::
::: section
::: titlepage
## []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#viewing-dm-integrity-information_using-dm-integrity-with-RAID-LV}查看 DM 完整性信息 {.title}
:::
当您创建有完整性的 RAID LVS 或者在现有 RAID LV
中添加完整性时，使用以下命令查看有关完整性的信息：
``` screen
# lvs -a 
```
这里的 [*\*]{.emphasis} 是包含有完整性的 RAID LV
的卷组名称。
以下示例显示在 `test-vg`{.literal} 卷组中创建的 `test-lv`{.literal} RAID
LV 的信息。
``` screen
# lvs -a test-vg
  LV                        VG      Attr       LSize   Origin                   Cpy%Sync
  test-lv                   test-vg rwi-a-r--- 256.00m                          2.10
  [test-lv_rimage_0]        test-vg gwi-aor--- 256.00m [test-lv_rimage_0_iorig] 93.75
  [test-lv_rimage_0_imeta]  test-vg ewi-ao----   8.00m
  [test-lv_rimage_0_iorig]  test-vg -wi-ao---- 256.00m
  [test-lv_rimage_1]        test-vg gwi-aor--- 256.00m [test-lv_rimage_1_iorig] 85.94
  [test-lv_rimage_1_imeta]  test-vg ewi-ao----   8.00m
  [test-lv_rimage_1_iorig]  test-vg -wi-ao---- 256.00m
  [test-lv_rmeta_0]         test-vg ewi-aor---   4.00m
  [test-lv_rmeta_1]         test-vg ewi-aor---   4.00m
```
::: title
**同步**
:::
当您创建一个带有完整性的 RAID LVS 或者在现有 RAID LV
中添加完整性时，我们建议您在使用 LV 前等待完整性同步和 RAID
元数据完成。否则，在后台进行的初始化可能会影响 LV
的性能。`Cpy%Sync`{.literal} 列显示了顶层 RAID LV 和每个 RAID
镜像的同步进度。RAID 镜像在 LV 列中由 `raid_image_N`{.literal}
显示。请参阅 LV 列，以确保同步进度为顶层 RAID LV 和每个 RAID 镜像显示
`100%`{.literal}。
::: title
**使用完整性的 RAID 镜像**
:::
在 `Attr`{.literal} 列中列出的属性中的 `g`{.literal} 属性表示 RAID
镜像使用了完整性。完整性校验和保存在 `_imeta`{.literal} RAID LV 中。
要显示每个 RAID LV 的类型，在 `lvs`{.literal} 命令中添加
`-o+segtype`{.literal} 选项：
``` screen
# lvs -a my-vg -o+segtype
  LV                       VG      Attr       LSize   Origin                   Cpy%Sync Type
  test-lv                  test-vg rwi-a-r--- 256.00m                          87.96    raid1
  [test-lv_rimage_0]       test-vg gwi-aor--- 256.00m [test-lv_rimage_0_iorig] 100.00   integrity
  [test-lv_rimage_0_imeta] test-vg ewi-ao----   8.00m                                   linear
  [test-lv_rimage_0_iorig] test-vg -wi-ao---- 256.00m                                   linear
  [test-lv_rimage_1]       test-vg gwi-aor--- 256.00m [test-lv_rimage_1_iorig] 100.00   integrity
  [test-lv_rimage_1_imeta] test-vg ewi-ao----   8.00m                                   linear
  [test-lv_rimage_1_iorig] test-vg -wi-ao---- 256.00m                                   linear
  [test-lv_rmeta_0]        test-vg ewi-aor---   4.00m                                   linear
  [test-lv_rmeta_1]        test-vg ewi-aor---   4.00m                                   linear
```
::: title
**完整性不匹配**
:::
有一个增量的计数器，它计算在每个 RAID 镜像上检测到的不匹配数。要查看特定
RAID 镜像的完整性所检测到的数据不匹配，运行以下命令：
`# lvs -o+integritymismatches /_raid-image_`{.literal}
其中
::: variablelist
[``{.literal}]{.term}
:   指定要在其中创建 RAID LV 的卷组名称。
[``{.literal}]{.term}
:   指定您要创建的 LV 的名称。
[``{.literal}]{.term}
:   指定您要查看完整性不匹配信息的 RAID 镜像。
:::
您必须为每个要查看的 RAID 镜像运行该命令。在以下示例中，可以查看
`test-vg/test-lv`{.literal} 下的 `rimage_0`{.literal}
来查看数据不匹配的信息。
``` screen
# lvs -o+integritymismatches test-vg/test-lv_rimage_0
  LV                 VG      Attr       LSize   Origin                      Cpy%Sync IntegMismatches
  [test-lv_rimage_0] test-vg gwi-aor--- 256.00m [test-lv_rimage_0_iorig]    100.00                 0
```
可以看到，完整性还没有检测到任何不匹配的数据，因此
`IntegMismatches`{.literal} 计数器会显示零(0)。
::: title
**内核消息日志中的完整性不匹配**
:::
您还可以在内核消息日志中查找数据完整性信息，如下例所示。
[**dm-integrity 与内核消息日志中不匹配的示例**]{.strong}
``` screen
device-mapper: integrity: dm-12: Checksum failed at sector 0x24e7
```
[**dm-integrity 数据从内核消息日志中更正示例**]{.strong}
``` screen
md/raid1:mdX: read error corrected (8 sectors at 9448 on dm-16)
```
:::
::: section
::: titlepage
## []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#_additional_resources_3}其它资源 {.title}
:::
::: itemizedlist
-   有关所有可用选项的详情请参考 `lvmraid`{.literal} 命令 man page。
:::
:::
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc_controlling-raid-initialization-configure-manage-raid}控制 RAID 卷初始化的频率 {.title}
:::
当您创建 RAID10 逻辑卷时，使用 `sync`{.literal}
操作初始化逻辑卷所需的后台 I/O 可能会对 LVM 设备排除其他 I/O
操作，如卷组元数据更新，特别是在创建大量 RAID 逻辑卷时。这会导致其它 LVM
操作速度下降。
您可以通过实施节流来控制初始化 RAID 逻辑卷的速度。您可以通过使用
`lvcreate`{.literal} 命令的 `--minrecoveryrate`{.literal} 和
`--maxrecoveryrate`{.literal} 选项为那些操作设置最小和最大 I/O
速率来控制执行 `sync`{.literal} 操作的速率。如下所示指定这些选项。
::: itemizedlist
-   `--maxrecoveryrate Rate[bBsSkKmMgG]`{.literal}
    为 RAID 逻辑卷设置最大恢复率，使其不会阻断其他小的 I/O
    操作。这个[*比率*]{.emphasis}被指定为"数量/每秒/阵列中的每个设备"。如果没有给出后缀，则会假定为
    kiB/sec/device。将恢复率设置为 0 表示它将不被绑定。
-   `--minrecoveryrate Rate[bBsSkKmMgG]`{.literal}
    为 RAID 逻辑卷设置最小恢复率来确保 `sync`{.literal} 操作的 I/O
    获得最小吞吐量，即使存在大量
    I/O。这个[*比率*]{.emphasis}被指定为"数量/每秒/阵列中的每个设备"。如果没有给出后缀，则会假定为
    kiB/sec/device。
:::
下面的命令创建了双向 RAID10 阵列，有三个条带，大小为 10GB，最大恢复率为
128 kiB/sec/device。这个数组名为 `my_lv`{.literal}，且位于卷组
`my_vg`{.literal} 中。
``` literallayout
# lvcreate --type raid10 -i 2 -m 1 -L 10G --maxrecoveryrate 128 -n my_lv my_vg
```
您还可以为 RAID 清理操作指定最小和最大恢复率。
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc_converting-linear-to-raid-configure-manage-raid}将线性设备转换为 RAID 设备 {.title}
:::
您可以使用 `lvconvert`{.literal} 命令的 `--type`{.literal}
参数将现有线性逻辑卷转换成 RAID 设备。
下面的命令将卷组 `my_vg`{.literal} 中的线性逻辑卷 `my_lv`{.literal}
转换为双向 RAID1 阵列。
``` literallayout
# lvconvert --type raid1 -m 1 my_vg/my_lv
```
因为 RAID 逻辑卷由元数据和数据子卷对组成，因此当您将线性设备转换成 RAID1
阵列时，会生成一个新的元数据子卷，并关联到线性卷所在的同一物理卷中的原始逻辑卷之一。额外的镜像在
metadata/data 子卷对中添加。例如：如果原始设备如下：
``` literallayout
# lvs -a -o name,copy_percent,devices my_vg
  LV     Copy%  Devices
  my_lv         /dev/sde1(0)
```
转换为双向 RAID1 阵列后，该设备包含以下数据和元数据子卷对：
``` literallayout
# lvconvert --type raid1 -m 1 my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices
  my_lv            6.25   my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sde1(0)
  [my_lv_rimage_1]        /dev/sdf1(1)
  [my_lv_rmeta_0]         /dev/sde1(256)
  [my_lv_rmeta_1]         /dev/sdf1(0)
```
如果无法将与原始逻辑卷对映的元数据镜像放在同一个物理卷中,
`lvconvert`{.literal} 将失败。
:::
::: section
::: titlepage
# []{#assembly_configure-mange-raid-configuring-and-managing-logical-volumes.html#proc-converting-raid1-to-linear-configure-manage-raid}将 LVM RAID1 逻辑卷转换为 LVM 线性逻辑卷 {.title}
:::
您可以使用 `lvconvert`{.literal} 命令将现有 RAID1 LVM 逻辑卷转换为 LVM
线性逻辑卷，方法是指定 `-m0`{.literal} 参数。这会删除所有 RAID
数据子卷以及构成 RAID 阵列的所有 RAID 元数据子卷，保留顶层 RAID1
镜像作为线性逻辑卷。
下面的例子显示了现有的 LVM RAID1 逻辑卷。
``` literallayout
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sde1(1)
  [my_lv_rimage_1]        /dev/sdf1(1)
  [my_lv_rmeta_0]         /dev/sde1(0)
  [my_lv_rmeta_1]         /dev/sdf1(0)
```
下面的命令可将 LVM RAID1 逻辑卷 `my_vg/my_lv`{.literal} 转换成 LVM
线性设备。
``` literallayout
# lvconvert -m0 my_vg/my_lv
# lvs -a -o name,copy_percent,devices my_vg
  LV      Copy%  Devices
  my_lv          /dev/sde1(1)
```
当您将 LVM RAID1 逻辑卷转换成 LVM
线性卷，,您可以指定要删除的物理卷。以下示例显示了由两个镜像组成的 LVM
RAID1 逻辑卷布局： `/dev/sda1`{.literal} 和
`/dev/sdb1`{.literal}。在这个示例中, `lvconvert`{.literal}
命令指定要删除 `/dev/sda1`{.literal}，并将 `/dev/sdb1`{.literal}
保留为组成线性设备的物理卷。
``` literallayout
# lvs -a -o name,copy_percent,devices my_vg
  LV               Copy%  Devices
  my_lv            100.00 my_lv_rimage_0(0),my_lv_rimage_1(0)
  [my_lv_rimage_0]        /dev/sda1(1)
  [my_lv_rimage_1]        /dev/sdb1(1)
  [my_lv_rmeta_0]         /dev/sda1(0)
  [my_lv_rmeta_1]         /dev/sdb1(0)
# lvconvert -m0 my_vg/my_lv /dev/sda1