---
author: 硬核老王
category: 软件开发
comments_data:
- date: '2020-05-25 17:04:05'
  message: "ID=身份或标识\r\n..."
  postip: 182.240.114.225
  username: 来自云南曲靖的 Chrome 81.0|Windows 10 用户
- date: '2023-10-18 16:13:48'
  message: "clean也可译作“清理”\r\n哈希是普通话版的音译，意译还有另外一个词“散列码”\r\ntag没提到，可以考虑译为“（打）标记”，与label区别开\r\nwatch可译为“关注”"
  postip: 14.24.214.238
  username: 来自广东广州的 Chrome 117.0|GNU/Linux 用户
count:
  commentnum: 2
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 9714
date: '2020-05-24 00:20:00'
editorchoice: false
excerpt: 我们根据 GitHub 等文档，收集整理了部分常用的 Git 和 GitHub 中的术语的中文定名及其解释。
fromurl: ''
id: 12245
islctt: false
largepic: /data/attachment/album/202005/24/001727th95ra0zwl7avqql.jpg
permalink: /article-12245-1.html
pic: /data/attachment/album/202005/24/001727th95ra0zwl7avqql.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 我们根据 GitHub 等文档，收集整理了部分常用的 Git 和 GitHub 中的术语的中文定名及其解释。
tags:
- Git
thumb: false
title: Git/GitHub 中文术语表
titlepic: true
translator: ''
updated: '2020-05-24 00:20:00'
---
![](/data/attachment/album/202005/24/001727th95ra0zwl7avqql.jpg)
Git 和 GitHub 已经成为了开发者的基础工具，尤其是参与开源软件开发时经常会使用它们。但是在 Git 和 GitHub 使用过程中遇到的很多术语并没有标准的或约定俗成的中文译名，因此，我们根据 [GitHub](https://help.github.com/cn/github/getting-started-with-github/github-glossary) 、[Git](https://mirrors.edge.kernel.org/pub/software/scm/git/docs/gitglossary.html) 等文档，并结合我们的翻译惯例，收集整理了 Git 和 GitHub 中常用术语的中文译名及其解释。
这里值得注意是术语有复刻、挂钩、议题、星标、变基、仓库等，这些术语之前要么经常中英文混杂使用，要么中文译法不确定，我们根据多年的翻译和开发经验，在 GitHub 译法的基础上进行斟酌，整理了如下的术语表供大家使用参考。此外，“复刻”这个翻译应该是我们 [LCTT 首倡](/article-7877-1.html)的；而“议题”这个对 issue 的译法也比之前的一些其它译法更为精准；“仓库”一词还有存储库、版本库等译法，但是仓库一词似乎更加合适。
#####  受让人   （    assignee    ） 
分配到某个议题的用户。
#####  追溯   （    blame    ） 
Git 中的“追溯”功能描述对文件每行的最新修改，一般会显示修订、作者和时间。这很有用，例如，可以跟踪何时添加了功能，或者哪个提交导致了特定漏洞。
#####  分支   （    branch    ） 
分支是仓库的平行版本。它包含在仓库中，但不影响主要或 master 分支，可让你自由工作而不中断“即时”版本。在执行所需的更改后，可以将分支合并回 master 分支以发布更改。
#####  检出   （    checkout    ） 
你可以在命令行上使用 `git checkout` 创建新分支，将当前的工作分支更改为不同的分支，甚至使用 `git checkout [branchname] [path to file]`从不同的分支切换到不同版本的文件。“检出”操作会使用对象数据库中的树对象或 blob 更新工作树的全部或部分，以及更新索引和 HEAD（如果整个工作树指向新分支）。
#####  优选   （    cherry-picking    ） 
从一系列更改（通常是提交）中选择一部分更改，并在不同的代码库上将它们记录为新的更改系列。在 Git 中，这通过 `git cherry-pick` 命令来执行，在另一个分支上解压缩现有提交引入的更改，并根据当前分支的提示将其记录为新提交。
#####  清洁   （    clean    ） 
工作树在对应当前头部引用的版本时是清洁的。另请参阅“脏”。
#####  克隆   （    clone    ） 
克隆是指存在于计算机上而非网站服务器其他位置的仓库副本，或者是复制的操作。在克隆时，可在首选编辑器中编辑文件，使用 Git 跟踪更改而无需保持在线。你克隆的仓库仍与远程版本连接，以便当你在线时将本地更改推送到远程，以保持同步。
#####  行为准则   （    code of conduct    ） 
为如何参与社区制定标准的文档。
#####  代码所有者   （    code owner    ） 
被指定为部分仓库代码所有者的个人。当有人打开对代码所有者拥有的代码进行更改的拉取请求（非草稿模式）时，会自动申请代码所有者审查。
#####  协作者   （    collaborator    ） 
协作者是受仓库所有者邀请参与，对仓库拥有读取和写入权限的人。
#####  提交   （    commit    ） 
提交或“修订”是对一个文件（或一组文件）的个别更改。在进行提交以保存工作时，Git 会创建唯一的 ID（也称为 "SHA" 或“哈希”），用于记录提交的特定更改以及提交者和提交时间。提交通常包含一条提交消息，其中简要说明所做的更改。
#####  提交作者   （    commit author    ） 
进行提交的用户。
#####  提交 ID   （    commit ID    ） 
也称为 SHA。用于识别提交的 40 字符校验和的哈希。
#####  提交消息   （    commit message    ） 
随附于提交的简短描述性文字，用于沟通提交引入的更改。
#####  持续集成   （    continuous integration    ） 
也称为 CI。在个人对 GitHub 上配置的仓库提交更改后运行自动化构建和测试的过程。CI 是软件开发中一种帮助检测错误的常用最佳实践。
#####  贡献指南   （    contribution guidelines    ） 
说明人们应如何参与项目的文档。
#####  贡献   （    contributions    ） 
GitHub 上的特定活动。
#####  贡献者   （    contributor    ） 
贡献者是指对仓库没有协作者权限但参与过项目，并且他们打开的拉取请求已合并到仓库的人员。
#####  默认分支   （    default branch    ） 
仓库中的基本分支，除非你指定不同的分支，否则会自动对它完成所有拉取请求和代码提交。此分支通常称为 `master`。
#####  游离的 HEAD   （    detached HEAD    ） 
如果你操作的是游离的 HEAD，Git 将会警告你，这意味着 Git 不指向某个分支，并且你的任何提交都不会出现在提交历史记录中。例如，在检出并非任何特定分支最新提交的任意提交时，你操作的是“游离的 HEAD”。
#####  差异   （    diff    ） 
差异是指两个提交之间的更改或保存的更改之间的区别，它将从视觉上描述文件自上次提交后添加或删除的内容。
#####  脏   （    dirty    ） 
工作树如果包含尚未提交到当前分支的更改，将被视为“脏”。
#####  快进   （    fast-forward    ） 
快进是一种特殊类型的合并，在其中你有修订以及“合并”另一个分支的更改作为现有分支的子系。在这种情况下，你无法进行新的合并提交，而只是更新此修订。这在远程仓库的远程跟踪分支中经常发生。
#####  功能分支   （    feature branch    ） 
用于试验新功能或修复未正式使用的议题的分支。也称为主题分支。
#####  围栏代码块   （    fenced code block    ） 
你可以在代码块前后使用三个反引号 `````，通过 GitHub Flavored Markdown 创建缩进代码块。