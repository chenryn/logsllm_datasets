53/domain
443/https
5000/upnp
1900/upnp
49152/unknown
2602/ripd
5555/freeciv
# Vendor(s)
9
7
6
1
7
2
1
4
2
3
TABLE IV: Breakdown of listening network services by number
of ﬁrmware images and number of vendors.
10
in the last paragraph of §IV-B can also affect success of
the initial emulation. Since we only extract the ﬁrst UNIX-
like ﬁlesystem from ﬁrmware images that contain multiple
ﬁlesystems, it is likely that only part of the ﬁlesystem has been
extracted, leading to a boot failure. Reassembling such systems
into a single ﬁlesystem is not straightforward because each
ﬁlesystem can potentially be mounted on top of another at
arbitrary locations.
Of the 8,591 ﬁrmware images that entered the “learning”
phase, only 32.3% (2,797) had their networking conﬁguration
successfully inferred. We believe that this decrease occurred
due to failures in the boot process while attempting to infer the
network conﬁguration. As we previously discussed in the last
paragraph of §IV-C1, problems with NVRAM emulation are
a signiﬁcant contributor to these failures. For example, some
routers may not initialize correctly if our NVRAM implemen-
tation was not able to override the built-in implementation,
if insufﬁcient default NVRAM values were loaded by our
implementation, or if the built-in NVRAM implementation
expected different semantics from NVRAM-related functions.
These manifest as various crashes or hangs during the boot
process, especially if memory or string manipulation functions
(memcpy(), strcpy(), etc.) are called on NULL values
returned by our NVRAM implementation for nonexistent
keys. Additionally, it is also possible that some images do
not use a NVRAM hardware peripheral, but instead write
conﬁguration values directly to a MTD partition, which we
may not successfully emulate.
Other potential sources of networking failures include
different naming conventions for networking devices. For
example, devices that utilize Atheros or Ralink chipsets may
expect platform networking devices to be named similarly
to ath0 or ra0, respectively, instead of the generic eth0.
Likewise, other devices may expect the presence of a wireless
networking interface such as wlan0, and fail otherwise. In
addition, since our ARM little-endian emulation platform
currently supports only up to one emulated Ethernet device, this
may prevent some ﬁrmware images from correctly conﬁguring
networking.
Only 70.8% (1,971) of the 2,797 images with an inferred
network conﬁguration are actually reachable from the network
using ping. This may be caused by ﬁrewall rules on the
emulated guest that ﬁlter ICMP echo requests, resulting in
false negatives, or various other network conﬁguration issues.
For example, our system may have mistakenly assigned the
host TAP interface in QEMU to the WAN interface of the
emulated device instead of a LAN interface, or identiﬁed the
default IP address of the WAN interface instead of the LAN
interface. Similarly, ﬁrmware may change the MAC address of
the emulated network device after it has booted, resulting in
stale ARP cache entries and a machine that appears unreachable.
Surprisingly, our results show that 45% (887 out of 1,971
ﬁrmware images) of the network reachable ﬁrmware images
are vulnerable to at least one exploit. We discuss this further
in §V-B, where we give a breakdown by exploit.
Fig. 2: Breakdown of ﬁrmware images by emulation progress,
colored by vendor.
interface (HTTP or HTTPS). Of these, only 9.5% supported
HTTPS for the conﬁguration interface, which is 19.8% of the
devices that support HTTP.
Remote shell access is supported by 37.4% of devices over
either the Telnet or SSH protocols. Note, however, that SSH
is not among the top ten results; in fact, it ranks 13th at 2.2%,
or 1.9% of the devices that support Telnet. This is worse
than the percentage of devices supporting HTTPS out of the
devices that support HTTP.
Based on the presence of the DNS service, it appears that
at least 27.2% of these ﬁrmware images are routers, which
typically act as a local DNS proxy. Another 16.4% ship with
Universal Plug and Play (UPnP) enabled by default, which
allows LAN devices to automatically conﬁgure port forwarding
from the WAN interface.
Port 2602 is known to be used by the Routing Informa-
tion Protocol (RIP) protocol, which is typically enabled on
enterprise-class routers for automatic network routing.
According to various customer support forums, ports 3333
and 5555 are known to be open on certain Netgear devices,
although we have not checked our Netgear ﬁrmware images
to identify the responsible service. Port 49152 is known to be
the ﬁrst port in the dynamic port address range forwarded by
various applications through UPnP, though we do not have any
UPnP clients in our network conﬁguration and are uncertain
of the default forwarding state.
5) Emulation Progress: As shown in Fig. 2, of the 8,617 ex-
tracted ﬁrmware images for which we identiﬁed an architecture,
our system initially emulated 96.6% (8,591) successfully. The
failures can be attributed to a number of causes, including the
lack of an init binary in a standard location (/bin/init,
/etc/init, or /sbin/init), or an unbootable ﬁlesystem.
For example, certain images containing Ralink chipsets are
known to name their init binary ralink_init, which we
currently do not support. Likewise, extraction failures discussed
11
ArchitectureIdentified0200040006000800010000InitiallyEmulatedNetworkInferredNetworkReachableExploitedExploit ID # Images
# Products
Affected Vendor(s)
21, 22, 37
16, 21, 35
12, 21, 37
12, 16, 21, 36, 37, 42
7, 12, 19, 21, 37
21
12
21
21
21
12
12
21
21
12
12
21
21
12
12
21
42
21
21
19, 42
47
56
64
45
43
202
207
60
205
206
203
59
200
201
210
4
24
213
214
39
209
212
61
204
211
282
169
169
136
88
49
35
31
16
14
13
9
8
7
7
6
5
4
4
3
3
3
2
1
1
16
14
27
13
10
11
6
9
5
4
5
1
1
2
1
1
1
1
1
1
1
N/A
N/A
N/A
N/A
TABLE V: Breakdown of exploits by number of affected
ﬁrmware images, number of affected products, and affected
vendor(s), indexed into Table VII. Note: N/A indicates that we
do not have sufﬁcient metadata to compute a lower-bound on
affected products.
# Exploits
5
4
3
2
1
0
Total
# Images
2
8
30
86
761
1,910
2,797
# Vendor(s)
1
1
2
5
9
22
42
# Products
1
3
10
14
77
263
322
TABLE VI: Breakdown of successful exploits by number of
ﬁrmware images, number of vendor(s), and number of affected
products.
B. Results
In Table V, we provide a breakdown of all successful
exploits by exploit. Exploits in the range #0 – #100 are sourced
from the Metasploit Framework, whereas most exploits greater
than or equal to #200 are previously-unknown vulnerabilities for
which we developed proof-of-concepts (POC’s). This excludes
#202, which is a known vulnerability but not sourced from
the Metasploit Framework. Each of these previously-unknown
vulnerabilities has been reported to the respective vendor,
following the policies of responsible disclosure. We discuss
a few speciﬁc vulnerabilities below in greater detail as case
studies.
12
By tabulating the results from Table V for each ﬁrmware
image, we obtain Table VI, which provides a breakdown of
the ﬁrmware images by the number of successful exploits.
This shows that a small number of these ﬁrmware images are
vulnerable to more than two exploits, with the least secure
image suffering from ﬁve exploits. Interestingly, all 40 of these
ﬁrmware images vulnerable to more than two exploits are
routers and access points manufactured by D-Link and Netgear;
however, this data may be skewed by the distribution of our
exploits and ﬁrmware images, which is not uniform. These
results initially seem to decay exponentially, with less than half
(39.8%) of ﬁrmware images vulnerable to zero exploits being
vulnerable to one exploit, but then there is a long-tail in the
vulnerability distribution, with only 4.5% (126) of ﬁrmware
images affected by more than one exploit.
1) Command Injection (#200, #201, #204 – #206, #208):
While analyzing the aggregate results of our automated
accessible webpages analysis (§IV-D1), we discovered six
previously-unpublished command injection vulnerabilities that
affect 24 ﬁrmware images for wireless routers and access points
manufactured by Netgear. All six vulnerabilities were within
PHP server-side scripts that provided debugging functionality
but appeared to be accidentally included within production
ﬁrmware releases. In particular, ﬁve of these were used to
change system parameters such as the MAC address of the
WLAN adapter, and the region of the ﬁrmware image (e.g.,
World Wide [WW], United States [US], or Japan [JP]). The
remaining one was used to write manufacturing data such as
MAC address, serial number, or hardware version into ﬂash
memory. Our manual analysis of the PHP source code revealed
that all were straightforward command injection vulnerabilities
through the $_REQUEST super-global and unsafe use of the
exec() function. After discovering these potential vulnera-
bilities, we leveraged FIRMADYNE to automatically verify
their exploitability across our entire dataset.
2) Buffer Overﬂow (#203): Another new vulnerability that
we manually discovered, using the results of our automated
accessible webpages analysis, was a buffer overﬂow vulnera-
bility within ﬁrmware images for certain D-Link routers. To
implement user authentication, the webserver sets a client-side
cookie labeled dlink_uid to a unique value that is associated
with each authenticated user. Instead of verifying the value
of this cookie within the server-side scripting language of the
webpage, this authentication functionality was actually hard-
coded within the webserver, which uses the standard library
functions strstr(), strlen(), and memcpy() to copy
the value of the cookie. As a result, we were able to set the value
of this cookie to an overly-long value to cause the webserver
to crash at 0x41414141, another poisoned argument that we
monitor for.
3) Information Disclosure (#207, #209 – #214): Using the
automated webpage analysis, we also discovered seven new
information disclosure vulnerabilities across our dataset that
affect 51 ﬁrmware images for various routers manufactured
by both D-Link and Netgear. One of these (#207) was within
an unprotected webpage that provides diagnostic information
for the router, including the WPS PIN and passphrases for all
locally-broadcast wireless networks.
The remaining six vulnerabilities (#209 – #214) were within
the Simple Network Management Protocol (SNMP) daemon of
both manufacturers. This feature was enabled by default likely
because these routers were targeted towards small businesses
rather than home users. To interpret results obtained from
SNMP queries, one needs access to a Management Information
Base (MIB) ﬁle that describes the semantics of each individual
object (OID) ﬁeld. As discussed in §III-B, our crawlers record
links to MIB ﬁles in the collected metadata, enabling manual
veriﬁcation of the obtained results.
Our automated exploit veriﬁcation showed that
these
ﬁrmware images would respond to unauthenticated SNMP
v2c queries for the public and private communities, and
return values for the OID’s that contain web-based access
credentials for all users on the device, and wireless credentials
for all locally-broadcast wireless networks.
4) Sercomm Conﬁguration Dump (#47): This exploit, re-
ported as CVE-2014-06595 and sourced from the Metasploit
Framework, attacks undocumented and badly-designed features
of the scfgmgr service to remotely dump system conﬁguration
variables from NVRAM and obtain a shell. Public documenta-
tion for this vulnerability suggests that, as of 2015-01-28, it was
known to affect ﬁrmware for networking devices manufactured
by Cisco, Linksys, Netgear, and a variety of smaller vendors.
This is corroborated by our automated analysis, which also
conﬁrmed the presence of this vulnerability within devices
manufactured by On Networks and TRENDnet. More precisely,
our results suggest that this single vulnerability affects 14.3%
of all network reachable ﬁrmware images from our dataset.
This is because Sercomm Corporation is likely the original
equipment manufacturer (OEM) for these devices, which were
then re-branded and re-sold by various vendors.
5) MiniUPnPd Denial of Service (#56): Reported as CVE-
2013-02296, this exploit takes advantage of parsing ﬂaws for the
Simple Service Discovery Protocol (SSDP) within MiniUPnP7,
an open-source UPnP daemon implementation, to trigger a
denial of service attack on this service.
According to our results, 8.5% of all network reachable
ﬁrmware images from our dataset are vulnerable to this attack,
which was ﬁxed on 2009-10-30 with the release of MiniUPnP
1.4. Affected vendors include Huawei, Netgear, and Tomato by
Shibby, which is a community-developed third-party ﬁrmware
for various wireless routers. Statistics released by Rapid7,
the developers of the Metasploit Framework and the original
reporters of this vulnerability, indicate that as of 2013-01-
29, 332 products used MiniUPnP 1.0, with over 69% of all
MiniUPnP ﬁngerprints corresponding to version 1.0 or older.
Again, these results emphasize the prevalence of cross-vendor
vulnerabilities due to shared software components, whether
open-source or proprietary.
6) OpenSSL ChangeCipherSpec (#64): This vulnerability
was reported as CVE-2014-02248, and takes advantage of a
bad state machine implementation for the SSL/TLS handshake
5https://github.com/elvanderb/TCP-32764
6https://community.rapid7.com/servlet/JiveServlet/download/2150-1-
16596/SecurityFlawsUPnP.pdf
7http://miniupnp.free.fr/
8http://ccsinjection.lepidum.co.jp/
process in all versions of OpenSSL before 0.9.8za, 1.0.0m,
and 1.0.1h. Exploitation of this vulnerability allows an attacker
to downgrade the cipher speciﬁcation between a client and
a server, potentially permitting a man-in-the-middle (MITM)
attack. Our results show that 8.5% of all network reachable
ﬁrmware images are vulnerable to this attack, which is 89.9%
of all ﬁrmware images that accept HTTPS connections. This
exploit also affects 8.4% of all products in our dataset, the most
out of all exploits. Affected vendors include D-Link, Netgear,
and TRENDnet.
C. Discussion and Limitations
Although FIRMADYNE performed well in our experi-
ments, there is certainly room for improvement. As discussed
previously in §IV-B, §IV-C1, and §IV-C2, additional manual
effort can improve the system by, e.g., ﬁxing extraction failures,
adding support for additional hardware architectures, or cor-
recting emulation failures. These changes require an analyst to
manually classify failures by root cause and perform the changes
that are necessary to increase compatibility. Implementing a
new analysis pass also requires manual labor, though we can
potentially reap a large beneﬁt from it because each newly-
implemented analysis can be automatically executed on all
supported ﬁrmware images from our dataset.
In addition, as mentioned in §V, our results can be difﬁcult
to evaluate due to the lack of a mechanism for quantifying real-
world impact in terms of unique products (instead of unique
ﬁrmware images). Likewise, our results are affected by skew
caused by differences in vendor composition of our dataset,
and of network reachable ﬁrmware images.
Other limitations of FIRMADYNE include the usage of
custom pre-built kernels, which currently do not load out-
of-tree kernel modules from the ﬁlesystem. As a result, our
system cannot be used to conﬁrm vulnerabilities in kernels or
kernel modules shipped by the vendor within ﬁrmware images.
For example, we are unable to assess the prevalence of the
KCodes NetUSB kernel module buffer-overﬂow across our
dataset because of this limitation.
Likewise, we do not identify which network port is used
as the uplink (or WAN) port, and which network port(s) are
used for the downlink (or LAN) port(s). This prevents us from
determining whether detected vulnerabilities are exploitable
from the Internet, or only by locally-connected clients.
Nevertheless, a number of techniques can be used by remote
attackers to pivot from the WAN interface to the LAN interface
over a web browser, including Cross-Site Request Forgery
(CSRF), Cross-Site Scripting (XSS), or even DNS rebinding
attacks. Additionally, with the increasing deployment of IPv6,
local machines are now being assigned globally-routable IP
addresses. This potentially allows attackers to access the LAN
interface of consumer devices, even though routers can still
act as ﬁrewalls. An increasing number of wireless routers and
access points also now support network isolation or client
isolation features, which can segregate trafﬁc between various
wireless or physical interfaces. However, the presence of these
vulnerabilities within the gateway router clearly compromises
this protection.
13
VI. RELATED WORK
With the increasing prevalence of embedded devices, several
related works have performed large-scale analyses of ﬁrmware
images, using a variety of analysis techniques. For exam-
ple, Heffner9 performed large-scale extraction of embedded
ﬁrmware images to gather a database of over 2, 000 hardcoded
SSL private keys. Likewise, Rapid710 used a similar analysis
for hardcoded SSH private keys, albeit on a smaller scale.
Using static analysis, Costin et al. [8] recently analyzed
a dataset of approximately 32, 000 ﬁrmware images. They
discovered a total of 38 previously-unknown vulnerabilities,
including hard-coded back-doors, embedded private key-pairs,
and XSS vulnerabilities, all of which were obtained “without
performing sophisticated static analysis”.
Another effective technique for large-scale measurement of
embedded device security is network scanning, which avoids
direct analysis of ﬁrmware images. Using tools such as Nmap,
Cui and Stolfo [10] identiﬁed approximately 540, 000 publicly-
accessible embedded devices with default access credentials.
Over the course of a 4-month longitudinal study, they discovered
that less than 3% of access credentials were changed, which
suggests that user awareness is lacking. Likewise, using the
ZMap [13] network scanner, Heninger et al. [14] showed that
embedded devices can also suffer from entropy problems.
Their results indicate that 2.45% of TLS certiﬁcates may
be vulnerable to brute-force attacks due to faulty RSA key
generation, and that 1.03% of DSA private keys are factorable
due to nontrivial common factors.
Additionally, previous work has discovered speciﬁc vul-
nerabilities that affect various classes of embedded devices.
Using HP LaserJet printers as a case study, Cui et al. [9]
demonstrated that remote ﬁrmware update functionality can
be exploited by attackers to insert malware. Weinmann [18]
showed that deployed cellular baseband implementations suffer
from remotely exploitable memory corruption vulnerabilities,
which can be used to execute arbitrary code on the baseband
processor. Similarly, Bonkoski et al. [6] showed that remote
management functionality on server motherboards is riddled
with security vulnerabilities, allowing a remote attacker to take
control of the system. Finally, Maskiewicz et al. [16] and Nohl
et al. [17] showed that malicious functionality can be inserted
into the ﬁrmware of USB peripherals, allowing an attacker to
take control of host systems and exﬁltrate data.
To defend against
this attack vector, several different
techniques have been developed to ﬁnd vulnerabilities in
embedded devices. For example, Davidson et al. [11] have
developed a symbolic executor using the KLEE [7] symbolic
execution engine to detect vulnerabilities in embedded devices.
Their work discovered 21 memory safety bugs across a corpus
of 99 open-source ﬁrmware programs for the MSP430 family
of 8-bit embedded micro-controllers. At a lower level, Li
et al. [15] ported the QEMU emulator into the BIOS to model
hardware peripherals for validation of an embedded SoC during
development.
Recently, Zaddach et al. [19] have also developed a
framework for performing dynamic analysis of embedded
ﬁrmware by forwarding I/O accesses from within an emulator
the actual hardware for execution. However, this approach does
not scale in terms of analysis cost and time, which is why
we have designed FIRMADYNE to perform robust hardware
emulation and vulnerability veriﬁcation in an automatic manner.
VII. CONCLUSION & FUTURE WORK
By developing FIRMADYNE, our automated dynamic
analysis framework, we hope to lower the bar for discovering
new vulnerabilities within embedded systems. At the same time,
FIRMADYNE implements an automated approach to assess
the prevalence of newly-discovered security vulnerabilities
in a large population of embedded device ﬁrmware images.
Given the weak security posture of these devices, we believe
that greater attention to these devices by security researchers,
hobbyists, and other interested parties can motivate device
manufacturers to address security issues in their products more
swiftly. This is especially true for OEMs, who are responsible
for a signiﬁcant fraction of the vulnerabilities in existing
deployed devices.
As shown in Fig. V-A, the next-largest category (after
Linux) of embedded ﬁrmware from our dataset are from
various proprietary real-time operating systems (RTOS) such
as VxWorks. This presents a potential avenue for future work,
especially given the existence of published vulnerabilities that
affect these platforms. In particular, we would be interested in
developing a compatibility layer for these applications using
existing real-time Linux development frameworks such as
Xenomai on our emulation platform.
A considerable number of source code releases are available
for many Linux-based embedded ﬁrmware due to the terms
of common open-source software licenses. Since our dataset
includes links to applicable source code for each ﬁrmware
image, this could provide a mechanism for implementing
effective static analysis,
in conjunction with our existing
framework for performing dynamic analysis.
Finally, statistical analysis techniques could be utilized to
improve the ﬁrmware extraction component of our framework.
Firmware images that appear obfuscated or encrypted could be
handled by a separate extraction pathway. For example, it is
well-known that ﬁrmware for Buffalo LinkStation devices are
encrypted, but passwords and decryption utilities are publicly
available.11 The same applies to various ﬁrmware distributed
for QNAP devices.12
Acknowledgment: This work was supported in part by
grants from the Department of Defense through the National
Defense Science & Engineering Graduate Fellowship Program
and under contract no. N66001-13-2-4040, and the Ofﬁce of
Naval Research under grant N00014-15-1-2948. Any opinions,
ﬁndings and conclusions or recommendations expressed in this
material are those of the authors and do not necessarily reﬂect
those of the sponsor.
9https://github.com/devttys0/littleblackbox
10https://github.com/rapid7/ssh-badkeys
11http://buffalo.nas-central.org/wiki/Firmware_update
12http://pastebin.com/KHbX85nG
14
REFERENCES
[1] “Binwalk.” [Online]. Available: http://binwalk.org/
[2] “Metasploit.” [Online]. Available: http://www.metasploit.
[3] “Nmap security scanner.” [Online]. Available: https:
com/
//nmap.org/
[4] F. Bellard, “QEMU, a fast and portable dynamic translator,”
in Proceedings of the USENIX 2005 Annual Technical
Conference. USENIX, 2005, pp. 41–46.