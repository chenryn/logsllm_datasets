UNIX 平台上的一个编辑器。这个软件推出后受到广大 UNIX 用户 的热烈欢迎，由于它同
时提供源代码，大家都热心地替它排除错误，增加功能，它的功能越来越强大，终于成为
UNIX 平台上最好的编辑器，上至 CRAY 超级计算机，下至最普遍的 PC 机，从 DOS 到
Windows，从 VMS 到 UNIX 都可以使用这个 Emacs。受到这个软件成功的鼓励，Stallman
成立了自由软件基金会，以推广 GNU 计划。基金会成立之后，主要靠一些厂家的捐献和
出售 GNU 程序的使用手册，以及拷贝 GNU 软件的电脑磁带和光盘来维持，不过许多硬件
厂家开始基金会提供高性能的工作站，这其中包括 HP 和 SONY，AT&T 这样的国际性大
公司。
1.5.3  Linux 的特色
Linux 具有以下的特色：
1．多工系统——同时执行多个进程。
2．多人使用——同一部机器可供多人同时使用。
3．须在 386 protected mode 下执行。
4．采用保护模式的方式执行各个进程, 所以个别的进程失控不会造成系统死机。
5．Linux 在磁盘上只读取程序中实际用到的部份（动态联结 dynamic linking）。
6．各程序可使用 copy-on-write pages 上的资料，意即多个程序可以使用同一块内存区。
最初几个程序共用一块内存区域，但当某个程序尝试写入这段内存时, 该 page（4KB）就
被拷贝一份到别的地方, 以后该程序的那 4KB 就指向新的 page。如此一来可增加速度并减
少内存的使用。
7．Linux 可使用虚拟内存，但须在硬盘上规划一块区域作置换用的 partition。
8．Linux 符合 POSIX 定义, 原代码与 System V、及一部份的 BSD 和 SVR4 完全兼容。
9．透过 iBCS2 模拟可执行大部份 SCO UNIX、SVR3、SVR4 的程序。
10．所有的原代码都是可免费获得的，包括所有的核心程序、驱动程序、发展工具程
序、使用者的程序。目前尚有些商用程序提供给 Linux 的使用者使用，但并无附上原代码。
11．支持多国语言键盘且易新增。
12．多重虚拟的 consoles——可使用热键作更换。
- 14 -
Linux 网络编程
13．支持数种常见的文件系统 minix-1、Xenix、System V filesystems, DOS，FAT, OS/2
的 HPFS（read-only）。本身支持两种 file system：EXT2 and XIAFS，且文件名称长度
可至 256 个字。
14．“ UMSDOS（Unix-like MSDOS）” 可在 DOS partition 中安装 Linux。
15．支持的 CD-ROM 文件系统，可读取各种标准 CD-ROM 格式, 如 ISO 9660。
16．TCP/IP 网络，包含 ftp ，telnet ，NFS 等。
1.5.4  硬件需求
Linux 对硬件并不挑剃，可以在很多机器上运行，只是效率可能会差很多。
1．最少的设备需求
386SX、2 MB RAM、1.44 MB or 1.2 MB 软驱、支持的 video card，以上这些仅可供你
测试 Linux 是否可在此部机器上执行。若有 5 MB 至 10 MB 的硬盘空间，则可安装一些公
用程序、shells、系统管理程序等。
2．较佳的设备需求
若你要去执行一些较需计算的程序，如 gcc,X,Tex 等，那则需要比 386SX 更快的 CPU，
否则你就要多点耐心了。至少你将需要 4MB RAM，若要执行 X-Window 或让多人同时使
用，则至少将需 8MB RAM 才足够。
假若使用较少的内存，虽然还是能执行，因它将使用虚拟内存（那需用到硬盘），但
其速度之慢会让人情绪不好．．．较多的内存对 DOS 而言虽无太大的帮助，但对 Linux 可就
有其相当的价值的。
至于硬盘的容量需求则要看你要存储多少东西而定。一般需要 10MB 的空间来装一些
公用程序、shells、系统管理程序等。一个较完备的系统则需要 Slackware，MCC，Debian
或 Linux/PRO，及其他共享软件，这些东西需要 60MB 至 200MB 的空间才够。
1.5.5  Linux 可用的软件
大部分常用的 Unix 工具和程序已经移植到 Linux 上了，包含大部分的 GNU 程序和许
多 X client。其实移植这些软件到 Linux 上是很容易的事，大部分的程序原代码在 Linux 上
重新编译时都不须修改或是只要修改一些即可，因为 Linux 几乎完全符合 POSIX 的标准。
可惜的是目前 Linux 上供一般 user 用的套装软件并不很多，以下将列出已知可在 Linux 上
使用的软件：
基本的 Unix 命令。ls，tr，sed，awk 等一般 Unix 都有的命令。
软件发展工具。gcc，gdb，make，bison，flex，perl，rcs，cvs，gprof。
X-Window 环境。X11R5（XFree 2.1.1），X11R6（XFree 3.1）。
文字编辑器。GNU Emacs，Lucid Emacs，MicroEmacs，jove，epoch，elvis（GNU
vi），vim，vile，joe，pico，jed。
Shells。Bash（h-compatible），zsh（与 ksh 相容），pdksh，tcsh，csh，rc，ash。
通讯程序。Taylor（BNU 兼容）UUCP，kermit，szrz，minicom，pcomm，xcomm，
term，Seyon。
News 和 mail。C-news，innd，trn，nn，tin，smail，elm，mh，pine。
第 1 章  概论
- 15 -
文字处理排版。Tex，groff，doc，ez。
PostScript 软件。Ghostscript, GhostView（X-Window）。
WWW。NCSA Mosaic，Netscape。
GAME。Nethack，一些 Mud 和 X-Window 上的 game。
套装软件。AUIS，the Andrew User Interface System。
以上这些软件程序当然也都是免费的。
1.5.6  为什么选择 Linux ？
下面是一些选择 Linux 的原因：
Linux 是“ 免费” 的，上面又有那么多“ 免费” 的软件，为什么不用？
瘟都死实在太不稳定了，受不了，换个平台吧。
我想学习 Unix，可是钱包里钞票不多，先从 Linux 开始吧。
我想学习操作系统，哪里有开放原代码的 OS？而且还要很活跃，有前途。
我对网络并行计算有兴趣，基于 Linux 的并行计算不但费用低廉而且功能强大有
潜力，重要的是有源码。
我是（或想成为）一名 Hacker,Linux 当然是最好的工具之一。
Linux 这么热，潜在的商业价值不可限量，尽早转移以便在未来有较好的一席之
地。
惊奇地发现 Linux 性能相当的好，稳定性也很好，用它替换商业操作系统真是明
智的选择。
Oracle,Infomix,Sysbase,IBM 都支持 Linux 了，用它来做数据库平台也挺不错。
烦了一次又一次去买许可证（奸商经常设这样的陷阱）,Linux 遵循公共版权许可
证(GPL)正合我意。
Linux 太适合 Internet/Intranet，它本身就是通过网络来协同开发的，网络时代为
什么不用 Linux？
采用 Linux 可以极大地降低拥有者总成本（TCO）。
等待商业操作系统补丁的耐心是有限度的，更受不了总被商家牵着鼻子走，开放
原代码的 Linux 使我至少有一定的控制权。
开放原代码使我可以按照自己的需要添加或删除某些功能，用户可定制性真是太
好了！！
利用开放原代码的 Linux 还可以来开发路由器，嵌入式系统，网络计算机，个人
数字助理等等，GNU 真是巨大的知识宝库，何乐而不用？（中国的 IT 业者真该仔细考虑
这个问题）
我崇尚自由软件的精神，自由程序员是我的梦想，愿意为之贡献自己的力量！！
不为什么⋯ ⋯
1.6  Linux 和 Unix 的发展
很多年中，贝尔实验室一直是开发 Unix 的中心机构，1990 年，AT&T 更新组建了一
个机构，称为 Unix 系统实验室，称为 USL，来控管这项工作，1993 年 6 月，AT&T 将 USL
- 16 -
Linux 网络编程
卖给了 NOVELL 公司，1993 年 10 月，NOVELL 公司将“ Unix” 改为 X/open,它是一个国
际标准化组织.
   现在 Unix 有很多版本，但是它们都有两个显著的特点:多任务多用户的分时系统。多
用户指在同一时刻可以支持多个用户，多任务指在同一时刻可以执行多道程序。
Unix 的一个重要分支来源于加利福尼亚大学的贝克利分校（Berkeley）。最初，Berkeley
Unix 基于 AT&T Unix,但最新的版本设计的程序要比 AT&T System V 灵活的多。Berkeley
Unix 的正规名称是 BSD，是 Berkeley Software Distribution 的词头缩写。
虽然 Unix 有多种版本（表 1-4），担实际上它们或基于 BSD，或基于 System V，或者
基于二者之上。
表 1-4  Unix 的各种版本
Unix 的名称
公司或组织，机构名称
386BSD
internet 免费提供
AIX
IBM
A/UX
Apple
BSD
加利福尼亚大学的贝克利分校
BSD-LITE
加利福尼亚大学的贝克利分校
Goherent
BSDI
Dynix
Scquent
FreeBSD
internet 免费提供
HP-UX
HP
Hurd(GNN)
FSF
Interactive
Graphics
Linux
internet 免费提供
Mach
Carnegie-Mellon
Minix
AndyTanenbaum
MKSToolkit
MorticeKer
NetNSD
internet 免费提供
Nextstep
Next
OSF/1
DEC
SCOUnix
SarctaCruzOperation
Solaris
SunMicrosystem
SunOs
SunMicrosystem
SystemVUnix
pc 机上的各种版本
Unicos
CrayResearch
Unixware
Novell
UNIX/Linux 模型
- 17 -
第二章  UNIX/Linux 模型
2.1  UNIX/Linux 基本结构
图 2-1 绘出了 UNIX 系统的高层次的体系结构。图中心的硬件部分向操作系统提供基
本服务。操作系统直接与硬件交互，向程序提供公共服务，并使他们同硬件特性隔离。当
我们把整个系统看成层的集合时，通常将操作系统成为系统内核，或简称内核，此时强调
的是它同用户程序的隔离。因为程序是不依赖于其下面的硬件的，所以，如果程序对硬件
没做什么假定的话，就容易把它们在不同硬件上运行的 UNIX 系统之间迁移。比如，那些
假定了机器字长的程序比起没假定机器字长的程序来就较难于搬到其它机器上。
外层的程序，诸如 shell 及编辑程序（vi），是通过引用一组明确定义的系统调用而与
内核交互的。这些系统调用通知内核为调用程序做各种操作，并在内核与调用程序之间交
换数据。图中出现的一些程序属于标准的系统配置，就是大家所知道的命令。但是由名为
a.out 的程序所指示的用户私用程序也可以存在于这一层。此处的 a.out 是被 C 编译程序产
生的可执行文件的标准名字。其它应用程序能在较低的程序层次之上构筑而成，因此它们
存在于本图的最外层。比如，标准的 C 编译程序 cc 就处在本图的最外层；它引用 C 预处
理程序、两次编译程序、汇编程序及装入程序（称为连接—编译程序），这些都是彼此分开
的低层程序。虽然该图对应用程序只描绘了两个级别的层次，但用户能够对层次进行扩从，
直到级别的数目适合于自己的需要。确实，为 UNIX 系统所偏爱的程序设计风格鼓励把现
存程序组合起来去完成一个任务。
图 2- 1  UNIX 系统的高层次的体系结构
一大批提供了对系统的高层次看法的应用子程序及应用程序，诸如 shell、编辑程序、
SCCS（Source Code Control System）及文档准备程序包等，都逐渐变成了“ UNIX 系统”
这一名称的同义语。然而，它们最终都使用由内核提供的底层服务，并通过系统调用（System
Call）的集合利用这些服务。系统调用的集合及其实现系统调用的内部算法形成了内核的
 18 -
Linux 网络编程
主体。简言之，内核提供了 UNIX/Linux 系统全部应用程序所依赖的服务，并且内核的定
义了这些服务。下面我们将进一步介绍内核，对内核的体系结构提出一个总的看法，勾画
出它的基本概念和结构，这将帮助读者更好的学习以后的内容。
图 2-2  Unix 系统内核结构
图 2-2 给出了内核的框图，示出了各种模块及他们之间的相互关系，特别的，它示出
了内核的两个主要成分：左边的文件子系统和右边的进程控制子系统。虽然，在实际上，
由于某些模块同其它模块的内部操作进行交互而使内核偏离该模型，但该图仍可以作为观
察内核的一个有用的逻辑观点。
在图 2-2 中我们看到了三个层次：用户、内核及硬件。系统调用与库接口体现了图 2-1
中描绘的用户程序与内核间的边界。系统调用看起来象 C 程序中普通的函数调用，而库把
这些函数调用映射成进入操作系统所需要的源语。然而，汇编语言程序可以不经过系统调
用库而直接引用系统调用。程序常常使用像标准 I/O 库这样一些其它的库程序以提供对系
统调用的更高级的使用。由于在编译期间把这些库连接到程序上，因此，以这里的观点来
说，这些库是用户程序的一部分。
图 2-2 把系统调用的集合分成与文件子系统交互作用的部分及与进程控制子系统交互
作用的部分。文件子系统管理文件，其中包括分配文件空间，管理空闲空间，控制对文件
的存取，以及为用户检索数据。进程通过一个特定的系统调用集合，比如通过系统调用
open,close,read,write,stat,chown 以及 chmod 等与文件子系统交互。
文件子系统使用一个缓冲机制存取文件数据，缓冲机制调节在核心与二级存储设备之
UNIX/Linux 模型
- 19 -
间的数据流。缓冲机制同块 I/O 设备驱动程序交互作用，以便启动往核心去的数据传送及
从核心的来的数据传送。设备驱动程序是用来控制外围设备操作的核心模块。块 I/O 设备
是随机存取存储设备，或者说，它们的设备驱动程序似的它们的设备驱动程序使得它们对
于系统的其它部分来说好像是随机存取存储设备。例如，一个磁带驱动程序可以允许核心
把一个磁带装置作为一个随机存取存储设备看待。文件子系统和可以在没有缓冲机制干预
的情况下直接与“ 原始” I/O 设备驱动程序交互作用。原始设备，有时也被成为字符设备，
包括所有非块设备的设备。
进程控制子系统负责进程同步、进程间通讯，存储管理及进程调度。当要执行一个文
件而把该文件装入存储器中时，文件子系统与进程控制子系统交互：进程子系统在执行可
执行文件之前，把它们读到内存中。输入输出存储管理模块控制存储分配。在任何时刻，
只要系统没有足够的屋里存储供所有进程使用，核心就在内存与二级存储之间对进程进行
交换，以便所有的进程都得到公平的执行机会。
调度程序模块把 CPU 分配给进程。该模块调度各进程依次运行，直到它们因等待资源
而自愿放弃 CPU，或者知道它们最近一次的运行时间超出一个时间量，从而核心抢占它们。
于是调度程序选择最高优先权的合格进程投入运行；当原来的进程成为最高优先权的合格
进程时，还会再次投入运行。进程间通信有几种形式，从时间的异步软中断信号到进程间
消息的同步传输，等等。本书中主要的讲的网络通信，也是进程间通信的一种。
最后，硬件控制负责处理中断及与及其与机器通信。象磁盘或终端这样的设备可以在
一个进程正在执行时中断 CPU。如果出现这种情况，在对中断服务完毕之后核心可以恢复
被中断了的进程的执行。中断不是由特殊的进程服务的，而是由核心中的特殊函数服务的。
这些特殊函数是在当前运行的进程上下文中被调用的。
2.2  输入和输出
输入和输出是交互式的操作系统的一个重要的组成部分。在 UNIX/Linux 中，采用了
以抽象文件为基础的输入/输出系统，减少了系统对硬件的依赖性，简化了输入/输出的操作，
同时又增加了代码的灵活性。但是，由于使用了抽象的概念，所以在理解和掌握上有一定
的难度，需要认真的体会。下面，我们就简要介绍一下 UNIX 的文件系统。
2.2.1  UNIX/Linux 文件系统简介
UNIX 的文件系统有如下的特点：
层次结构
对文件数据的一致对待
建立与删除文件的能力
文件的动态增长
文件数据的权限保护