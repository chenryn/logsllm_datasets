运行应用程序时，可以看到第一个元素的这些值：
    Outer XML: Benjamin
      Franklin
    Inner XML: BenjaminFranklin
    Next sibling outer XML: 8.99
    Previous sibling outer XML:
      The Autobiography of Benjamin Franklin
    First child outer Xml: Benjamin
    Parent name: book
27.3.3 使用XmlDocument插入节点
前面的示例使用XmlWriter类新建一个文档。其局限性是它不能把节点插入到当前文
档中。而使用XmlDocument类可以做到这一点。
下面的代码示例使用CreateElement创建元素book，增加了一些属性，添加一些子元
素，在创建元素book后，将其添加到XML文档的根元素中（代码文件
XmlDocumentSample/Program.cs）：
    public static void CreateXml()
    {
      var doc = new XmlDocument();
      using (FileStream stream = File.OpenRead("books.xml"))
      {
        doc.Load(stream);
      }
      //create a new 'book' element
      XmlElement newBook = doc.CreateElement("book");
      //set some attributes
      newBook.SetAttribute("genre", "Mystery");
      newBook.SetAttribute("publicationdate", "2001");
      newBook.SetAttribute("ISBN", "123456789");
      //create a new 'title' element
      XmlElement newTitle = doc.CreateElement("title");
      newTitle.InnerText = "Case of the Missing Cookie";
      newBook.AppendChild(newTitle);
      //create new author element
      XmlElement newAuthor = doc.CreateElement("author");
      newBook.AppendChild(newAuthor);
      //create new name element
      XmlElement newName = doc.CreateElement("name");
      newName.InnerText = "Cookie Monster";
      newAuthor.AppendChild(newName);
      //create new price element
      XmlElement newPrice = doc.CreateElement("price");
      newPrice.InnerText = "9.95";
      newBook.AppendChild(newPrice);
      //add to the current document
      doc.DocumentElement.AppendChild(newBook);
      var settings = new XmlWriterSettings
      {
        Indent = true,
        IndentChars = "\t",
        NewLineChars = Environment.NewLine
      };
      //write out the doc to disk
      using (StreamWriter streamWriter = File.CreateText(NewBooksFileName))
      using (XmlWriter writer = XmlWriter.Create(streamWriter, settings))
      {
        doc.WriteContentTo(writer);
      }
      XmlNodeList nodeLst = doc.GetElementsByTagName("title");
      foreach (XmlNode node in nodeLst)
      {
        WriteLine(node.OuterXml);
      }
    }
运行应用程序时，下面的book元素添加到bookstore中，写入文件newbooks.xml：
      Case of the Missing Cookie
        Cookie Monster
      9.95
在创建文件之后，应用程序将所有标题节点写入控制台。可以看到，目前包括添加的
元素：
    The Autobiography of Benjamin Franklin
    The Confidence Man
    The Gorgias
    Case of the Missing Cookie
在希望随机访问文档时，可以使用XmlDocument类。在希望有一个流类型的模型时，
可以使用基于XmlReader的类。基于XmlNode的XmlDocument类的灵活性要求的内存比较
多，读取文档的性能也没有使用XmlReader类好。遍历XML文档还有另一种方式：使用
XPathNavigator类。
27.4 使用XPathNavigator类
XPathNavigator类使用XPath语法从XML文档中选择、迭代和查找数据。
XPathNavigator类可以从XmlDocument中创建，XmlDocument不能改变；它用于提高性能
和只读。与XmlReader类不同，XPathNavigator类不是一个流模型，所以文档只读取和分
析一次。与XmlDocument类似，它需要把完整的文档加载到内存中。
NuGet包System.Xml.XPath中的System.Xml.XPath名称空间建立在速度的基础上，由
于它提供了XML文档的一种只读视图，因此它没有编辑功能。这个名称空间中的类可以
采用光标的方式在XML文档上进行快速迭代和选择操作。
表27-1列出了System.Xml.XPath名称空间中的重要类，并对每个类的功能进行了简单
的说明。
表27-1
类名
说明
XPathDocument
提供整个XML文档的视图，只读
XPathNavigator
提供XPathDocument的导航功能
XPathNodeIterator
提供节点集的迭代功能
XPathExpression
表示编译好的XPath表达式，由SelectNodes、
SelectSingleNodes、Evaluate和Matches使用
示例代码使用了以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Xml.XmlDocument
    System.Xml.XPath
名称空间：
    System.IO
    System.Xml
    System.Xml.XPath
    static System.Console
27.4.1 XPathDocument类
XPathDocument类没有提供XmlDocument类的任何功能，它唯一的功能是创建
XPathNavigator。因此，这是XPathDocument类上唯一可用的方法（除了其他由Object提供
的方法）。
XPathDocument类可以用许多不同的方式创建。可以给构造函数传递XmlReader或基
于流的对象，其灵活性非常大。
27.4.2 XPathNavigator类
XPathNavigator包含移动和选择元素的方法。移动方法把迭代器的当前位置设置为应
该移动到的元素。可以移动到元素的具体特性：MoveToFirstAttribute方法移动到第一个特
性，MoveToNextAttribute方法移动到下一个特性。MoveToAttribute允许指定一个具体的
特性名称。使用MoveToFirst、MoveToNext、MoveToPrevious和MoveToLast可以移动到同
级节点。也可以移动到子元素（MoveToChild、MoveToFirstChild），移动到父元素
（MoveToParent），直接移动到根元素（MoveToRoot）。
可以使用XPath表达式和Select方法来选择方法。为了根据树中具体的节点和当前位置
过滤选项，需要使用其他方法。SelectAncestor只过滤出祖先节点，SelectDescendants过滤
出所有后代节点。SelectChildren过滤出直接子节点。SelectSingleNode接受一个XPath表达
式，返回一个匹配的节点。
如果CanEdit属性返回true, XPathNavigator还允许使用Insert方法之一修改XML树。可
用于.NET 
Core的XPathNavigator总是返回false，这些方法通过抛出
NotImplementedException异常来实现。在.NET 
4.6中，使用XmlDocument类创建
XPathNavigator时，导航器的属性CanEdit返回true，从而允许使用Insert方法进行修改。
27.4.3 XPathNodeIterator类
XPathDocument代表完整的XML文档，XPathNavigator允许选择文档中的节点，把光
标移动到指定的节点，XPathNodeIterator允许遍历一组节点。
XPathNodeIterator类由XPathNavigators类的Select（）方法返回，使用它可以迭代
XPathNavigator类的Select（）方法返回的节点集。使用XPathNodeIterator类的
MoveNext（）方法不会改变创建它的XPathNavigator类的位置。然而，使用
XPathNodeIterator的Current属性可以得到一个新的XPathNavigator。Current属性返回一个
设置为当前位置的XPathNavigator。
27.4.4 使用XPath导航XML
要理解这些类的用法，最好是查看一下迭代books.xml文档的代码，弄清楚导航是如
何工作的。
第一个例子迭代所有定义为小说类型的书。首先创建一个XPathDocument对象，在构
造函数中接收XML文件名。这个对象包含了XML文件的只读内容，提供了
CreateNavigator（）方法来创建一个XPathNavigator。使用这个导航器时，可以把XPath表
达式传递到Select（）方法。使用XPath时，可以在层次结构之间使用/，来访问元素
树。/bookstore/book检索bookstore元素内的所有book节点。@genre是一种访问genre属性的
速记符号。Select（）方法返回一个XPathNodeIterator，允许遍历匹配表达式的所有节
点。第一个while循环调用MoveNext（）方法，迭代所有匹配的book元素。在每次迭代
中，在当前的XPathNavigator上调用另一个Select（）方法SelectDescendants。
SelectDescendants返回所有的后代节点，这意味着子节点、子节点的子节点，以及在完整
的层次结构中这些子节点的所有子节点。对于SelectDescendants（）方法，其重载版本只
匹配元素节点，去除了book元素本身。第二个while循环迭代这个集合，把名称和值写到
控制台（代码文件XPathNavigatorSample / Program.cs）：
    public static void SimpleNavigate()
    {
      //modify to match your path structure
      var doc = new XPathDocument(BooksFileName);
      //create the XPath navigator
      XPathNavigator nav = doc.CreateNavigator();
      //create the XPathNodeIterator of book nodes
      // that have genre attribute value of novel
      XPathNodeIterator iterator = nav.Select("/bookstore/book[@genre='novel']");
      while (iterator.MoveNext())
      {
        XPathNodeIterator newIterator = iterator.Current.SelectDescendants(
          XPathNodeType.Element, matchSelf: false);
        while (newIterator.MoveNext())
        {
          WriteLine($"{newIterator.Current.Name}: {newIterator.Current.Value}");
        }
      }
    }
运行应用程序，只会显示匹配小说类别的书的内容及其所有子节点，因为first-name
和last-name元素包含在author中：
    title: The Confidence Man
    author: HermanMelville
    first-name: Herman
    last-name: Melville
    price: 11.99
27.4.5 使用XPath评估
XPath不仅允许快速访问树中的XML节点，它还定义了一些用于数字的函数，例如
ceiling、floor、number、round和sum。下面的示例与前一个示例有些相似；它访问所有的
book元素，而不只是匹配小说类型的book元素。迭代book元素时，只把当前位置移动到第
一个子title节点来访问title子元素。在title节点中，把名称和值写入控制台。最后一个语句
定义了非常特殊的代码。在/bookstore/book/price元素的值上调用XPath函数。这些函数可
以通过调用XPathNavigator的Evaluate（）方法来执行（代码文件XPathNavigatorSample 
/
Program.cs）：
    public static void UseEvaluate()
    {
      //modify to match your path structure
      var doc = new XPathDocument(BooksFileName);
      //create the XPath navigator
      XPathNavigator nav = doc.CreateNavigator();
      //create the XPathNodeIterator of book nodes
      XPathNodeIterator iterator = nav.Select("/bookstore/book");
      while (iterator.MoveNext())
      {
        if (iterator.Current.MoveToChild("title", string.Empty))
        {
        WriteLine($"{iterator.Current.Name}: {iterator.Current.Value}");
        }
      }
      WriteLine("=========================");
      WriteLine($"Total Cost = {nav.Evaluate("sum(/bookstore/book/price)")
}");
    }
运行应用程序时，可以看到所有书的标题和总价：
    title: The Autobiography of Benjamin Franklin
    title: The Confidence Man
    title: The Gorgias
    =========================
    Total Cost = 30.97
27.4.6 用XPath修改XML
接下来，使用XPath进行一些更改。这部分仅适用于完整的.NET Framework，所以使
用预处理器指令处理代码的区别。为了创建一个可变的XPathNavigator，在.NET 
4.6中使
用XmlDocument类。在.NET Core中，XmlDocument没有提供CreateNavigator（）方法，因
此导航器始终是只读的。在.NET 
4.6中，XPathNavigator的CanEdit属性返回true，因此可
以调用InsertAfter方法。使用InsertAfter添加一个折扣，作为price元素后面的同级节点。使
用导航器的OuterXml属性访问新创建的XML文档，保存一个新的XML文件（代码文件
XPathNavigatorSample / Program.cs）：
    public static void Insert()
    {
    #if DNX46
      var doc = new XmlDocument();
      doc.Load(BooksFileName);
    #else
      var doc = new XPathDocument(BooksFileName);
    #endif
      XPathNavigator navigator = doc.CreateNavigator();
      if (navigator.CanEdit)
      {
        XPathNodeIterator iter = navigator.Select("/bookstore/book/price");
        while (iter.MoveNext())
        {
        iter.Current.InsertAfter("5");
        }
      }
      using (var stream = File.CreateText(NewBooksFileName))
      {
        var outDoc = new XmlDocument();
        outDoc.LoadXml(navigator.OuterXml);
        outDoc.Save(stream);
      }
    }
用.NET 4.6运行应用程序，新生成的XML元素包含disc元素：
        The Autobiography of Benjamin Franklin
        Benjamin
        Franklin
        8.99
        5
        The Confidence Man
        Herman
        Melville
        11.99
        5
        The Gorgias
        Plato
        9.99
        5
27.5 在XML中序列化对象
序列化是把一个对象持久化到磁盘中的过程。应用程序的另一部分，甚至另一个应用
程序都可以反序列化对象，使它的状态与序列化之前相同。.NET 