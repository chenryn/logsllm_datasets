#将ARGV[1]赋给 SPELLFILE
else {
#不多于两个参数
delete ARGV[2]
delete ARGV[1]
#删除 args 以便 awk 不会将它当作文件打开
SPELLFILE = ARGV[2]
#将 ARGV[2]赋给 SPELLFILE
SPELLDICT = "+" ARGV[1]
#并将ARGV[1］赋给 SPELLDICT
#测试dict是否用“+”指定
else
SPELLDICT = ARGV[1]
if (ARGV[1]~ /^\+.*/)
if (ARGC > 2）{
QQ群：
50192241
309
第十二章 
综合应用
---
## Page 292
" " IS  S, = 
print "Running spell checker .
#现在运行拼写程序，输出发送到单词列表
system("cp " SPELLFILE " " spellsource)
#将 SPELLFILE 复制到临时输入文件
spellout = "sp_out"
wordlist = "sp_wordlist"
#创建临时文件名，每个都以 sp_开始
# 处理命令行参数结束
"ilt [op+] yoauollads asesn. ausd
if (SPELLDICT)
spellsource = "sp_input'
exit 1
else {
#如果参数不大于1，那么打印 shel命令用法
”#如果参数大于-1〉1，处理结束
SPELLDICT = "+d
if (reply ~ /[yy](es)?/
#如果回答是，使用"dict"
QQ群：
50192241
- 310 -
第十二章 
综合应用
---
## Page 293
继续。也就是说，除了“nawk”之外，必须给出文件名。这个文件名指定了
BEGIN过程的第一部分处理命令行参数。它检测如果“ARGC”比1大，则程序
printf("%s", responseList)
"+!not\u\. as!esuodsau = is!nasuodsau
'diehe\u, as!nasuodsa, = as!nesuodsan
'o!a ot ppvs\u\. is!lasuodsau = is!esuodsad
responseList = responseList "\n\tGlobal change,"
ausuanooo yoea aaueuotu\ :sssuodsa., = is!iasuodsad
#显示用户响应的列表
ARGV[1] = wordlist
#给ARGV[1] 赋单词列表，以便 awk 读取它。
exit
print "No misspelled words found."
#如果单词列表为空（或拼写命令失败），退出
if （ system("test -s" wordlist））{
#测试单词列表，看看是否发生了拼写错误的单词
}# BEGIN 过程结束
system(SPELLCMD spellsource " >" wordlist )
SPELLCMD = "spell "
else
QQ群：
50192241
-311-
第十二章
综合应用
---
## Page 294
这个主过程很小，仅显示一个拼错的单词和提示用户输入适当的回答。这个过
主过程
BEGIN过程的最后一部分的任务是当显示一个拼错的单词时，定义和显示用户
正拼写错误。
在命令行中指定文件名的办法，
问的输入文件提供文件名的办法。注意，当 awk 被调用时，这个文件并不存
个文件名作为ARGV 数组的第二个元素。
者没有发现拼错的单词，文件wordlist 将是空的。如果这个文件存在，
否存在访问之前确保文件中包含内容。如果由于一些原因 spel程序失败了，
这个过程的第三部分执行 spelI程序并建立一个单词列表。我们测试这个文件
文件都是以“sp_”开始且在退出程序前被删除。
作。
BEGIN过程的第二部分建立了一些临时文件，
文件名参数。
如果存在，
接口。如果没有给出字典，
命令并不支持 spelI的任何隐含选项，
要分析的文件。一个可选的字典文件名可以被作为第二个参数。尽管
spell
-旦处理了这个参数。我们将从ARGV 数组中删除它们，
程
开两行）。
在主菜单输入“help”时显示。将这个列表赋给一个变量，
能做出的响应的列表。
更
在！
或
是
时
在这个程序的末尾，
H
在。
容易些，但所有字符串太长，在这本书中不能显示（不能将一个字符串分
要时在程序的不同点访问它
，提示用户确定利用这个文件作为字典文件。
QQ群：
 用户将选择保存或放弃在临时文件上所做的工作。临
。这个列表在程序开始运行时显示一次，以及当用户
50192241
，那么程序执行test 命令以确定文件dict 是否存
它，
而且利用一个 while 循环来读取文件以发现并
不再存在于 ARGV数组中。我们不利用 awk 的主
以避免重复。对responseList 的赋值可以更
312-
但 spellcheck 程序遵循 spelI 的命令行
因为我们不想直接在原始文件上
第十二章
，这将防止它们被解释成
，可以使我们必
综合应用
则将这
---
## Page 295
的用户自定义函数来处理，
这个过程短小的一个原因是因为中心操作（更正拼错的单词），它们由两个较
对每个拼错的单词都执行。
printf("\n%d - Found %s (C/G/A/H/Q/):", word, misspelling)
#目的是显示拼写错误的单词并提示用户
#主过程，对单词列表中的每一行都执行
printf("\n%d - Found %s (C/G/A/Q/):", word, misspelling)
#现在处理用户的响应
misspelling = $1 
#将单词赋给 misspelling
#适当的动作
大
printf("%s", responseList)
#再次显示响应列表和提示
if (response ~ /[Hh] (elp)?/) {
#帮助
# CR－ 回车忽略当前的单词
while (response ! /(^[cCgGaAhHqQ])|^$/ ） {
#打印拼错的单词并提示响应
++word
response = 1 
QQ群：
50192241
，我们将在最后一部分看到它们。
313
第十二章 
综合应用
---
## Page 296
#结束临时输入和临时输出文件
close(spel lsource)
#读完所有的行
close(spel lout)
print > spellout 
# 所有的行都转到临时的输出文件
make_change ($0)
#调用显示拼错单词的行的函数
if （response ~
#改变每次出现
dict[++dictEntry] = misspelling 
if ( response ~ /[Aa] (dd)?/) {
#添加到字典
#并提示用户进行每个校正
while( (getline 0){
#读取正在纠正的文件的每一行
if (response ~ /[Qq](uit)?/) exit 
#出
getline response < "-" 
QQ群：
 /[cC] (hange)?/) [
50192241
314
第十二章 
综合应用
---
## Page 297
的值：
misspelling。我们构造了一个while循环，在其中我们将拼错的单词显示给用
户并提示用户作出响应。仔细观察下面的正则表达式，它用于测试response 
Wordlist中的每个输入行的第一个字段，包含着拼错的单词并被赋给
whi le (response ! /( [cCgGaAhHqQ])I^$/)
 make_g lobal _change ()
confirm_changes ()
#显示被改变的行
#在保存之前询问用户确认所有的改变
#并显示被改变的每一行
#调用提示校正的函数
if (response ~ /[gG] (lobal)?/)
#全局改变
# 在保存之前给出确认的函数
printf ("%d lines changed. ", changes)
print changedLines[j] 
for (j = 1; j <= changes; ++j)
if (changes){
#如果做了改变
#主过程结束
QQ群：
50192241
- 315-
第十二章 
综合应用
---
## Page 298
·用户输入“quit”作为提示的响应。
·拼错单词的列表已取尽。
·spell命令失败或没有发现任何拼错的单词。
当然，
END 过程
是主输入循环的默认操作，
这些都是有效的响应。回车表示忽略拼错的单词并得到列表中的下一个单词。
make_global_change（）,这两个函数我们将在最后一部分看到。除了一种情况
户确认每个修改。这个工作主要由两个函数来处理，make_change（)和
提示用户做修改。
用户输入“c”或“change”时，将显示文档中遇到的第一个拼错的单词。然后
外添加到本地字典中。
如果用户输入“add”
过程。
下一个响应是“quit”。和 quit 相关的操作是 exit，用于退出主过程并转到
主过程的余下的部分由条件语句组成，用于测试用户指定的响应并执行相应的
“global”时，提示用户立即修改，并且将一次修改所有的错误，
作。
一个小写或大写字母c或以“c”开头的单词，例如“Change”
利用正则表达式测试用户的输入有助于编写简单灵活的程序。
用户只能通过输入任意指定的字符或键入回车键（一个空行）退出的这个循
“Change”
例
END
操
环。
END 过程的目的是允许用户确认对文档或字典的任何永久性修改。
这
外。
用
宗
第一个响应是“help”，
#END过程生成永久的改变
下列情况之一将进入 END 过程：
和“Global”响应使程序真正开始工作。理解它们的区别很重要。
QQ群：
。这将在文档中每个出现错误的地方发生。
，拼错的单词将被加入到数组dict中，并将被作为一个
50192241
因此不需要为它设置条件。
，作用是再次显示响应列表和重新显示提示。
316-
第十二章
用户可以输入
。
且没有提示
综合应用
---
## Page 299
system("rm " spellsource)
if (saveAnswer ~ /^[nN]/)
#如果答案是否定的，那么rm临时输入文件
#保存I旧的 SPELLFILE，以防万一
#如果答案是肯定的，那么 mv 临时输入文件为 SPELLFILE
getline saveAnswer < "-"
while (saveAnswer ! /([yY] (es)?) | ([nN]o?)/ ） {
#用户必须确认保存对文件的校正
if (NR <= 1） exit
#改变，因此退出
#如果读取一条记录后到达这里没有产生
if (saveAnswer ~ /^[yy]/) {
printf "Save corrections in %s (y/n)? ", SPELLFILE
END{
#它还删除临时文件
#添加单词
#他改写原始文件，并向字典中
QQ群：
50192241
317
第十二章 
综合应用
---
## Page 300
况。如果产生这种情况，END 过程将当作没有可保存的工作而退出。接着，
序没有产生单词列表或当用户看到第一个记录之后输入“quit”时将产生这种
END 过程以一个条件语句开始来测试记录的个数是否小于或等于1。当 spel丨程
情
system("rm sp_wordlist")
#删除单词列表
#排序字典文件
close (SPELLDICT)
for （item in dict)
sub(/^\+/， ""， SPELLDICT)
# 循环使用数组并将单词添加到字典中
. = I (lT ) 
#如果没有定义字典，
if (response ~ /^[yy]/){
getline response < "-"
if (dictEntry）{
#如果单词已经添加到字典数组中，那么提示确定保存在当前字典中
”# END 过程结束
QQ群：
，那么使用"dict"
50192241
318 -
第十二章
综合应用
我
---
## Page 301
拼错的单词。如果有，
档的一行（这行成为$O）。通过调用 make_change（）函数来确定这行中是否包
当用户想在文档中“改变每个错误”时，主过程利用一个while循环每次读取
函数用于确定用户想要保存的所做的修改。
这里有3个支持函数，其中两个很大，用于完成文档的大多数修改工作。第三
支持函数
件将在后面的处理中覆盖原文件。
中，如果不同意，则添加到本地dict 文件中。因为被 spel丨读取的字典必须排
如果用户同意将它们加入到字典中，
答的是“n”，临时文件被删除。不接受其他的响应。
答“y”或“n”。如果回答是“y”，临时输入文件将代替原始文档文件。如果
创建一个while循环来询问用户将所做的修改保存到文档。这需要用户对提示
下一步，
，因此将被执行一个 sort 命令对送到临时文件的输出进行排序，这个临时文
# stringToChange－初始为 $O；然后是 $O 中不匹配的字串
# make_change－提示用户纠正当前输入
含
文
词。
function make_change (stringToChange,
# 假设定义了拼写错误.
#len－从$O 的开始处到被匹配的字符串末尾的长度
们
Iine,
我们测试数组 dict 中是否有内容。它的元素是要添加到字典中的单
OKmakechange，printstring，carets）#局部变量
QQ群：
显示这行并提示用户输入相应单词的正确拼写。
50192241
319
，这些单词将添加到上面所定义的当前字典