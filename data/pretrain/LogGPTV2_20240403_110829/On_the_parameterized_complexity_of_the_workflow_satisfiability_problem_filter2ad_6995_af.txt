of execution (OR-joins and AND-joins) [16]. A variety of
computational models and languages have been used to rep-
resent such workﬂows, including Petri nets and temporal
logic. To our knowledge, the only complexity results for
richer workﬂow patterns are those of Basin et al. described
above, which can handle cycles. We will consider the ﬁxed-
parameter tractability of EPEP, and WSP for richer work-
ﬂow patterns, in our future work.
lation P ⊆ Σ
A parameterized problem P can be represented as a re-
In partic-
∗ × N over a ﬁnite alphabet Σ.
866(cid:3)
(cid:3)
(cid:3)
+|x
ular, WSP is a parameterized problem with parameter k,
the number of steps. The idea of input reduction prior to
solving the parameterized problem under consideration is
captured in the following deﬁnition. Given a parameterized
problem P , a kernelization of P is a polynomial-time algo-
(cid:3)
(cid:3)
rithm that maps an instance (x, k) to an instance (x
, k
)
such that (i) (x, k) ∈ P if and only if (x
) ∈ P and
, k
(cid:3)| ≤ g(k) for some function g; (x
(cid:3)
(cid:3)
(ii) k
, k
) is the kernel
and g is the size of the kernel. It is well-known and easy to
prove that a decidable parameterized problem is FPT if and
only if it has a kernel. It is easy to see that polynomial-size
kernels will be particularly useful in practice. Unfortunately,
many ﬁxed-parameter tractable problems have no such ker-
nels, unless NP ⊆ coNP/poly (which is highly unlikely);
see [4], for example.
We can show that, in general, WSP(=,(cid:2)=) has no poly-
nomial kernel unless NP ⊆ coNP/poly. However,
if all
constraints in WSP(=,(cid:2)=) involve only singletons, then
WSP(=,(cid:2)=) admits a kernel with at most k users. For a
canonical organizational 3-hierarchy even the restriction to
singletons does not help: there is no polynomial kernel unless
NP ⊆ coNP/poly. We will provide proofs of these results in
a journal version of this paper.
7. REFERENCES
[1] D.A. Basin, S.J. Burri, and G. Karjoth.
Obstruction-free authorization enforcement: Aligning
security with business objectives. In Proc. 24th IEEE
Symp. on Comput. Sec. Foundations, 99–113, 2011.
[2] E. Bertino, E. Ferrari, and V. Atluri. The speciﬁcation
and enforcement of authorization constraints in
workﬂow management systems. ACM Trans. Inf. Syst.
Secur. 2(1): 65–104, 1999.
[3] A. Bj¨orklund, T. Husfeldt, and M. Koivisto. Set
partitioning via inclusion-exclusion. SIAM J. Comput.
39(2): 546–563, 2009.
[4] H.L. Bodlaender, R.G. Downey, M.R Fellows, and
D. Hermelin, On problems without polynomial
kernels. J. Comput. Sys. Sci. 75 (2009), 423–434.
[5] J. Crampton. A reference monitor for workﬂow
systems with constrained task execution. In Proc. 10th
ACM Symp. on Access Control Models and
Technologies 38–47, 2005.
[6] J. Crampton and M. Huth. Synthesizing and verifying
plans for constrained workﬂows: transferring tools
from formal methods. In Proc. 3rd ICAPS Workshop
on Veriﬁcation and Validation of Planning and
Scheduling Systems, 2011.
[7] R. Crowston, G. Gutin, M. Jones, V. Raman, and
S. Saurabh. Parameterized complexity of MaxSat
above average. Proc. LATIN 2012, Lect. Notes
Comput. Sci. 7256 (2012), 184–194.
[8] R.G. Downey and M.R. Fellows. Parameterized
Complexity, Springer Verlag, 1999.
[9] J. Flum and M. Grohe. Parameterized Complexity
Theory, Springer Verlag, 2006.
[10] M. Fellows, T. Friedrich, D. Hermelin, N. Narodytska,
and F. Rosamond. Constraint satisfaction problems:
Convexity makes AllDiﬀerent constraints tractable. In
Proc. 27th Intern. Joint Conf. on Artif. Intell.
522-527, 2011.
[11] R. Impagliazzo, R. Paturi and F. Zane. Which
problems have strongly exponential complexity?
J. Comput. Sys. Sci. 63(4): 512–530, 2001.
[12] T. Kaufman, M. Krivelevich, and D. Ron. Tight
bounds for testing bipartiteness in general graphs.
SIAM J. Comput. 33(6): 1441–1483, 2004.
[13] D. Lokshtanov, D. Marx, and S. Saurabh. Slightly
superexponential parameterized problems. In
Proceedings of SODA’2011, 760–776, 2011.
[14] J. Moﬀett and E.C. Lupu. The uses of role hierarchies
in access control. In Proceedings of Fourth ACM
Workshop on Role-Based Access Control, 153–160,
1999.
[15] E. Tsang. Foundations of Constraint Satisfaction,
Academic Press, 1993; available at
http://en.scientificcommons.org/43256499.
[16] W.M.P. van der Aalst, A. ter Hofstede,
B. Kiepuszewski, and A. Barros. Workﬂow patterns.
Distributed and Parallel Databases 14(1): 5–51, 2003.
[17] Q. Wang and N. Li. Satisﬁability and resiliency in
workﬂow authorization systems. ACM Trans. Inf.
Syst. Secur. 13(4): 1–35, 2010.
APPENDIX
In this appendix, we provide proofs of Theorems 3 and 5.
Before proving Theorem 3, we deﬁne two problems related
to 3-Sat and prove two preparatory lemmas.
c-Linear-3-Sat
Input: A 3-CNF formula φ with m clauses, and n
variables such that m ≤ cn, where c is a
positive integer.
Output: Decide whether there is a truth assignment
satisfying φ.
Let φ be a CNF formula. A truth assignment for φ is a
NAE-assignment if, in each clause, it sets at least one literal
true and at least one literal false. We say φ is NAE-satisﬁable
if there is a NAE-assignment for φ.
Not-All-Equal-3-Sat (NAE-3-Sat)
Input: A CNF formula φ in which every clause has
exactly three literals.
Output: Decide whether φ is NAE-satisﬁable.
The ﬁrst of our lemmas, which we state without proof, is
due to Impagliazzo et al. [11] (see also [7]).
Lemma 1. Assuming the Exponential Time Hypothesis,
there exist a positive integer L and a real number δ > 0 such
that L-Linear-3-SAT cannot be solved in time O(2δn).
Lemma 2. Assuming the Exponential Time Hypothesis,
there exists a real number  >0 such that NAE-3-SAT with
n variables cannot be solved in time O(2n), where n is the
number of variables.
Proof. Let L be an integer and δ be a positive real such
that L-Linear-3-SAT cannot be solved in time O(2δn).
Such constants L and δ exist by Lemma 1. Suppose we
have a polynomial time reduction from L-Linear-3-SAT to
NAE-3-SAT and a positive integer c
such that if a formula
in L-Linear-3-SAT has n variables then the corresponding
formula in NAE-3-SAT has n
n. Let
variables and n
(cid:3) ≤ c
(cid:3)
(cid:3)
(cid:3)
867(cid:3)
 = δ/c
time O(2n(cid:2)
L-Linear-3-SAT can be solved in timeO (2n(cid:2)
a contradiction to the deﬁnition of δ.
and suppose that NAE-3-SAT can be solved in
is the number of variables. Then
) = O(2δn),
), where n
(cid:3)
It remains to describe the required polynomial time reduc-
tion from L-Linear-3-SAT to NAE-3-SAT. Recall that for
every formula in L-Linear-3-SAT we have m ≤ Ln, where
m and n are the numbers of clauses and variables, respec-
(cid:3) ≤ 2(1 + L).
tively. We will show that our reduction gives c
Let φ be a formula of L-Linear-3-SAT. Replace every
clause C = (u ∨ v ∨ w) in φ by
(u ∨ v ∨ xC ) ∧ (w ∨ xC ∨ yC ) ∧ (xC ∨ yC ∨ z)
(1)
to obtain a formula ψ of NAE-3-SAT. Here variables xC
and yC are new for every clause C and z is a new variable
but it is common for all clauses of φ. We will show that φ is
satisﬁable if and only if ψ is NAE-satisﬁable. This will give
us c
n ≤ n + 2m + 1 ≤ 2(1 + L)n implying c
(cid:3) ≤ 2(1 + L).
(cid:3)
Let Vφ and Vψ be the sets of variables of φ and ψ, respec-
tively. Hereafter 1 stands for true and 0 for false.
Assume that φ is satisﬁable and consider a truth as-
signment τ : Vφ → {0, 1} that satisﬁes φ. We will ex-
tend τ to Vψ such that the extended truth assignment is
a NAE-assignment for ψ. We set τ (z) = 1. For each
clause C = (u ∨ v ∨ w) ofφ, we set
τ (yC ) = 0 and
τ (xC ) = 1− max{τ (u), τ (v)}. Consider (1). Since τ (yC ) = 0
and τ (z) = 1, τ is a NAE-assignment for the third clause in
(1). Since max{τ (u), τ (v)} (cid:2)= τ (xC ), τ is a NAE-assignment
for the ﬁrst clause of (1). Also, τ is a NAE-assignment for
the second clause of (1) because either τ (xC ) = τ (yC ) = 0
or τ (u) = τ (v) = 0 and, hence, τ (w) = 1.
(cid:3)
(cid:3)
(cid:3)(cid:3)
Since τ
Now assume that ψ is NAE-satisﬁable and consider a
Vψ → {0, 1} for ψ.
NAE-assignment τ :
:
Vψ → {0, 1} is a NAE-assignment for ψ if and only if
(t), t ∈ Vψ, we may assume that
(t) = 1 − τ
so is τ
τ (z) = 1. Since τ is a NAE-assignment for the third clause
of (1), we have min{τ (xC ), τ (yC )} = 0. If τ (xC ) = 0
then max{τ (u), τ (v)} = 1; otherwise τ (xC ) = 1 and
τ (yC ) = 0 implying that τ (w) = 1. Therefore, either
max{τ (u), τ (v)} = 1 or τ (w) = 1 and, thus, C is satisﬁed
by τ .
Proof of Theorem 3. Consider a CNF formula φ,
which is an instance of NAE-3-SAT. Let {s1, . . . , sn} be
the variables of φ and let us denote the negation of si by
si+n for each i ∈ [n]. For example, a clause (s1 ∨ s2 ∨ s3)
will be written as (s1 ∨ sn+2 ∨ sn+3). For j ∈ [2n], we write
sj = 1 if we assign true to sj and sj = 0, otherwise.
Now we construct an instance of WSP. The set of steps
is {s1, . . . , sk}, where k = 2n, and there are two users, u0
and u1. We will assign user ui to a step sj if and only if
sj is assigned i in φ. For each j ∈ [n] we set constraint
((cid:2)=, sj, sj+n). For every clause of φ with literals s(cid:2), sp, sq
we set constraint ((cid:2)=, s(cid:2),{sp, sq}). We also assume that each
user can perform every step subject to the above constraints.
Observe that the above instance of WSP is satisﬁable if
and only if φ is NAE-satisﬁable. Thus, we have obtained a
polynomial time reduction of NAE-3-SAT to WSP with (cid:2)=
being the only binary relation used in the workﬂow and with
just two users. Now our theorem follows from Lemma 2.
Proof of Theorem 5. The result follows from a very
similar argument to that used in the proof of Theorem 4. No-
tice that our method for identifying ineligible sets for Type
2 constraints of the form ((cid:2)∼i, s, S
) works equally well for
Type 3 constraints of the form ((cid:2)∼i, S1, S2) (since a set F is
ineligible if S1 ∪ S2 ⊆ F ).
(cid:3)
(cid:3)
However, we cannot use our method for constraints in
C∼.8 Nevertheless, we can rewrite the set of constraints
in C∼ as Type 2 constraints, at the cost of
introduc-
ing additional workﬂow steps. Speciﬁcally, we replace an
Type 3 constraint (∼i, S1, S2) with two Type 2 constraints,
(∼i, S1, snew) and (∼i, snew, S2), where snew is a “dummy”
step. Every user is authorized for snew. This construction re-
quires the replacement of c
Type 2
constraints and the creation of c
new steps. Finally, we solve
straints, which has complexity (cid:2)O((c + 2c
WSP for a workﬂow with n users, k+c
con-
+ n23k+c(cid:2)
).
We may assume without loss of generality that for all con-
straints of the form (∼i, S1, S2) in C∼, S1 ∩ S2 = ∅. (The
constraint is trivially satisﬁed if there exists s ∈ S1 ∩ S2,
since we assume there exists at least one authorized user for
every step.) Hence the number of constraints having this
form is no greater than
steps and c+2c
)n2k+c(cid:2)
(cid:3)
Type 3 constraints by 2c
2k−j = 3k.
(cid:3)k
(cid:4)
(cid:5)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
k
j
j=1
for
example,
8Consider,
constraint
(=,{s1, s2} ,{s3, s4}):
then (in the absence of other
constraints) {si} is eligible for i ∈ [4]; but any plan
π(si) = ui such that ui = uj if and only if i = j does not
satisfy the constraint (and is, therefore, invalid).
the Type
3
868