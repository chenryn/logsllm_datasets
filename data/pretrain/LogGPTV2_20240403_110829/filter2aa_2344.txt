ScriptEngineManager代码执行
ScriptEngineManager 是用于 java 与 js 之间的相互调用。这个类在 jdk6 中存在。
初始化
ScriptEngineManager 类有两个初始化方法，一个有参，一个无参。有参的初始化方法是传递一
个 ClassLoader ，无参的构造方法是使用进程本身的 CLassLoader 。
这里可以回顾一下 SnakeYaml 反序列化，其中就用到了 ScriptEngineManager 类，传递一个
URLClassLoader ，然后利用 SPI 机制达到代码执行。所以此处可以先回顾一下这个利用过程。
SnakeYaml 反序列化中的初始化
SPI
SPI ，全称为 Service Provider Interface ，是一种服务发现机制。它通过在 ClassPath 路径
下的 META-INF/services 文件夹查找文件，自动加载文件里所定义的类。参考文章：深入理解SPI
机制
举个例子
首先定义接口，完成两个实现类
在 classpath 中添加SPI搜索文件
通过 ServiceLoader.load 或者 Service.providers 两个方法来拿到实现类的实例。
ScriptEngineManager 中 SPI 的过程
首先要创建一个类实现接口 javax.script.ScriptEngineFactory ，至于为啥先按下不表。然后
和上面一样添加一个 SPI 的搜索文件。注意这个文件名是实现的接口的全类名。然后上一个实验的
内容最后清空一下，免得出错。之后打包成 jar
通过 ScriptEngineManager 触发 SPI 机制，然后弹计算器。
成功远程加载了 jar 包，弹出计算机
debug 一下
new ScriptEngineManager(urlClassLoader) -> init(loader); -> initEngines(loader); -
> getServiceLoader(loader)   整个流程便是这个样子的，并不复杂，在
getServiceLoader(loader) 中通过 ServiceLoader.load 的方式去获取实现类实例。这里可以
看到传递的类对象是 ScriptEngineFactory ，所以要实现的接口也是这一个。
之后遍历这个迭代器，操作和实验上的一样，在 next() 方法中会创建类对象，并且创建一个对
象。这就可以触发我们写的恶意代码了。
好了，这个我们研究完了，之后来看看怎么通过 ScriptEngineManager 执行命令吧。
ScriptEngineManager 的使用
js 风格的 java 。。。。。人麻了