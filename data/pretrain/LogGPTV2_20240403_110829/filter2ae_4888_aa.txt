#### 0x00 写在前面
最近一直在开发公司内部使用的，在涉及端口扫描这块，为了保证速度和准确性，方案是使用Masscan+Nmap：Masscan速度快，先使用Masscan进行一遍全端口探测。再使用Nmap对已经探测出来的端口进行复扫和Banner识别，Nmap的准确性较高，但速度较慢，所以通过这种方式保证端口扫描的准确性。
这是我对于端口扫描过程中寻找速度与准确度之间平衡点的浅显思路。前几天刚好看到一篇国外的文章，介绍的东西远比我理解的更深入，故翻译出来一起学习。
如下内容为翻译内容，原文链接如下：  
[inding the Balance Between Speed & Accuracy During an Internet-wide Port
Scanning](https://captmeelo.com/pentest/2019/07/29/port-scanning.html)
#### 0x01 介绍
侦察是每个bug
bounty(漏洞赏金)和渗透测试过程中最重要的阶段，一次好的侦察能决定成败。侦察可以分为两类：主动和被动。在主动侦察期间主要使用的方法之一就是端口扫描。渗透测试人员和bug
hunters(漏洞赏金猎人)使用端口扫描确定目标主机和网络上的哪些端口是开放的，以及识别在这些端口上运行的服务。
但是，端口扫描总是需要在速度和精度之间进行权衡。在渗透测试期间，测试人员的时间都是有限的；而在bug
bounty过程中，大家都是争先恐后的发现并提交漏洞，拼的是速度。这些原因迫使我们在端口扫描时优先考虑的是速度，而不是精度。而在于时间赛跑的过程中，我们可能会错过一些开放的端口，而恰巧这些端口可能就存在漏洞，并且能成功利用。
本次研究旨在利用开源和大家熟知的工具在端口扫描期间找到速度和准确度之间的平衡。
#### 0x02 端口扫描概述
端口扫描是侦察期间最常用的技术之一。渗透测试人员和bug bonty用于识别主机上可用的开放端口，以及识别这些开放端口上运行的服务。
端口扫描器可以根据他们的操作方式分类为：面向连接（同步模式）扫描器和无连接的（异步模式）扫描器。
##### 面向连接（同步模式）
这种类型的扫描器想目标端口发送请求并等待响应，直到超时时间到期。这种类型扫面器的缺点是性能比较慢，因为扫描器在当前连接关闭之前不会去扫描下一个目标端口或ip。
面向连接的扫描器好处是它们更准确，因为它们可以识别丢弃的数据包。  
面向连接扫描器最流行就是我们熟知的 **Nmap** 。
##### 无连接（异步模式）
无连接扫描器不依赖于当前被探测端口的完成来启动下一个端口，因为它们有单独的发送和接受线程。这允许它们进行高速扫描。但是，这些扫描器的结果可能不太准确，因为它们无法检测丢失的数据包。
**Masscan** 和 **Zmap** 是目前最流行的两种无连接扫描器。
#### 0x03 Nmap VS Masscan
>
> 本次研究只包括Nmap和Masscan。虽然Zmap是一个快速的扫描器，并且扫描结果还不错。但是根据经验，即使同时运行多个扫描任务，Zmap的扫描速度仍然很慢。
虽然Nmap和Masscan都提供了良好的性能、特性和扫描结果。但它们 仍然有自己的弱点。下表展示了这两种工具的优缺点。
| Nmap | Masscan  
---|---|---  
优点 | -两者对比起来，它更精确（使用同步模式）  
-有很多功能  
-同时接受域名和IP地址（IPv4和IPv6） | -速度非常快（使用异步模式）  
-语法与Nmap非常相似  
缺点 | -扫描数十万目标的时候速度非常慢 |
-在高速率(rates)扫描大端口范围时结果不太准确[[1]](https://github.com/robertdavidgraham/masscan/issues/365)  
-不接受域名作为目标输入  
-不能根据自身环境自动调整传输速率  
#### 0x04 研究思路
基于上面列出的工具的有点和缺点，在试图找到速度和准确度之间的平衡时，确定了一下解决方案和问题。
##### 解决方案
以下是基于工具的优点而形成的：
  1. 将Nmap的准确性及其其他的功能与Masscan的速度相结合。
  2. 使用Masscan执行初始端口的扫描，以识别开放的端口和开端口的主机。
  3. 使用Masscan的结果（已识别的开放端口和主机）作为Nmap的输入，以进行详细的端口扫描。
##### 问题
虽然上面列出的想法很好，但是我们仍然需要解决每个工具的缺点。具体来说，我们需要解决的有：
  1. 当扫描数数万个目标的时候，Nmap的速度很慢。
  2. Masscan在高速(rates)扫描大端口范围时的不准确性（参见Github的[Issues 365](https://github.com/robertdavidgraham/masscan/issues/365)）。
#### 0x05 研究配置
##### 目标网络
选择一下子网作为本次研究的网络目标：
目标 | 子网  
---|---  
A | A.A.0.0/16  
B | B.B.0.0/16  
C | C.C.0.0/16  
D | D.D.0.0/16  
##### 测试用例
对于本次研究，两种工具都有自己的一些测试用例。这些测试用例是每种工具中可用的不同选项（参数）的变化。这些测试用例旨在解决工具的缺点，并利用它们的优点在速度和准确性之前找到平衡点。
###### Masscan:
  1. 以不同的速率(rates)定期扫描所有的TCP端口。
  2. 将/16的目标子网差分为/20，并运行X个并发masscan任务，每个任务的速率为Y。
  3. 将1-65535的端口范围划分为几个范围，并运行X个并发的Masscan任务，每个任务的速率为Y。
###### Nmap:
  1. 定期扫描所有的TCP端口。
  2. 使用X并发任务扫描所有的TCP端口。
  3. 扫描Masscan识别的开放端口和主机的组合列表。
  4. 扫描Masscan识别特定主机上的特定开放端口。
> 在有限的时间内不可能涵盖所有选项的每个变化/组合，因此仅涵盖上述内容。
对于使用并发任务的测试用例，使用了工具[GNU
Parallel](https://www.gnu.org/software/parallel/)。如果你对这个工具还是个新手，请查看详细的[教程](https://www.gnu.org/software/parallel/parallel_tutorial.html)。
#### 0x06 范围和限制
  * 该研究使用以下版本的工具进行：Nmap v7.70和Masscan v1.0.5-51-g6c15edc；
  * 该研究仅涉及IPv4地址；
  * 不包括扫描UDP端口；
  * 仅使用了最流行和开源的工具（不包括Zmap，因为它一次只能扫描一个端口；即使运行多个任务，也会导致扫描速度非常慢）；
  * 仅探测了4个目标网络，都是/16；
  * 端口扫描仅来自一台机器，且这台机器的ip地址是固定ip；
  * 由于扫描机器不支持PF_RING，因此Masscan的速率仅限于 **250kpps(每秒数据包)** ；
  * 并不是所有的测试用例都是由有限的资源而进行的（这样做非常耗时）。
#### 0x07 Masscan的测试用例和测试结果
本节详细介绍了使用Masscan执行的不同测试用例和其测试结果。
##### 测试用例 #1：使用不同的速率定期扫描所有的TCP端口
这个测试用例没啥特别之处，这只是Masscan的正常扫描，只是速率不同而已。
以下命令用于启动此扫描用例的扫描任务：
    masscan -p 1-65535 --rate RATE--wait 0 --open TARGET_SUBNET -oG TARGET_SUBNET.gnmap
rate(扫描速率)参数的设置：
  * 1000000 (1M)
  * 100000 (100K)
  * 50000 (50K)
在实验过程中，我得VPS可以运行的最大速率仅为250kpps左右。这是因为扫描的机器不支持PF_RING。  
**_图表（由于最大速率是250kpps，故图表中的为250k、100k和50k的对比）：_**  
**_观察：_**
慢速率会导致发现更多的开放端口，但是代价就是扫描花费的时间更长。
##### 测试用例 #2：将/16的目标子网拆分为/20，并运行X个Masscan并发任务，每个任务的速率为Y
为了能够运行并发任务，我觉得将/16的目标子网拆分为更小的子网。你可以将其分为更小的子网，例如/24。本次研究我拆分为/20。
要将目标网络拆分为更小的子网，使用的python代码如下：
    #!/usr/bin/python3
    import ipaddress, sys
    target = sys.argv[1]
    prefix = int(sys.argv[2])
    for subnet in ipaddress.ip_network(target).subnets(new_prefix=prefix):