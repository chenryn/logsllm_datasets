# Title: Enforcing Least Privilege Memory Views for Multithreaded Applications

## Authors
- Terry Ching-Hsiang Hsu, Purdue University
- Kevin J. Hoffman, eFolder Inc.
- Patrick Eugster, Purdue University and TU Darmstadt
- Mathias Payer, Purdue University

## Abstract
Inadequate isolation of components within the same address space has led to numerous vulnerabilities. Enforcing the least privilege principle for memory accesses can selectively isolate software components, thereby reducing the attack surface and preventing unintended cross-component memory corruption. However, the boundaries and interactions between software components are difficult to manage, and existing approaches have failed to prevent attackers from exploiting poor isolation.

We introduce the Secure Memory Views (SMV) model, a practical and efficient approach for secure and selective memory isolation in monolithic multithreaded applications. SMV is a third-generation privilege separation technique that provides explicit access control for memory, allowing concurrent threads within the same process to partially share or fully isolate their memory space in a controlled and parallel manner, according to application requirements. Our prototype evaluation in the Linux kernel (TCB 100 ∆ LOC), FUSE (8K LOC), and Firefox (13M LOC) demonstrates the effectiveness and efficiency of SMV.

### Key Challenges
- **Ease of Use (EU)**: Programmers prefer high-level APIs for implementing security policies rather than low-level, error-prone memory management tools. Porting legacy software, such as Firefox (13M LOC), should be straightforward with minimal code refactoring.
- **No Hardware Modifications (NH)**: The model must run on today's commodity hardware without requiring specific CPU brands or models.
- **Low Runtime Overhead (LO)**: The model should incur negligible runtime overheads, especially in multithreaded applications, to maintain parallelism and performance.

### Solution: Secure Memory Views (SMV)
To address these challenges, we propose the SMV model, which efficiently enforces differential security and fault isolation policies in monolithic multithreaded applications with minimal overhead. SMV divides the shared process address space into dynamic memory protection domains. Each thread container (SMV) maintains a collection of these domains, defining the memory view for its associated threads. Access privileges to these domains are explicitly defined and strictly enforced by the SMV model.

The SMV model provides a well-defined interface for programmers to apply the least privilege principle to arbitrary software objects within a multithreaded process. For example, a server’s worker thread can be configured to access its thread stack and part of the global server configuration but not the private key within the same process address space.

### Implementation and Evaluation
We implemented the SMV model in the Linux kernel, including a trusted kernel component for enforcement and an untrusted user-space library for the SMV API. Our evaluation shows:
- Negligible runtime overhead in highly concurrent benchmarks using the general producer-consumer pattern.
- Efficient software component isolation in popular web servers (Cherokee and Apache httpd) and the Firefox web browser.
- Performance metrics: 
  - PARSEC: 2% runtime overhead with 2 LOC changes.
  - Cherokee: 0.69% throughput overhead with 2 LOC changes.
  - Apache httpd: 0.93% throughput overhead with 2 LOC changes.
  - Firefox: 1.89% runtime overhead with 12 LOC changes.

### Contributions
- Design of the SMV model, providing fine-grained control over privileges in a shared address space.
- Specification of an SMV API to facilitate porting existing pthread applications.
- Implementation of the SMV model, including a trusted Linux kernel component and an untrusted user-space library.
- Evaluation demonstrating the practical and efficient enforcement of least privilege memory views in multithreaded applications.

### Threat Model and Objectives
#### Threat Model
We assume an unprivileged attacker can control a thread in a vulnerable multithreaded program, allocate memory, and fork more threads up to resource limits. The adversary may attempt to escalate privileges by reading or writing data of another module or executing code of another module. We assume the OS kernel and user-space libraries installed by root users are trusted, and access permissions for memory views and kernel APIs are correctly set.

#### Objectives
The primary objective of the SMV model is to protect memory references of threads, preventing unintentional or malicious accesses to privileged memory areas. Threads can communicate through mutually shared memory areas set up by the programmer via SMVs. Without SMVs, an untrusted thread (e.g., a compromised worker thread) could access arbitrary software objects (e.g., the private key) within the same address space.

For more details, see our GitHub repository: [https://github.com/terry-hsu/smv](https://github.com/terry-hsu/smv)