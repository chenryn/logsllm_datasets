Column-Stores vs. Row-Stores: How Different Are They
Really?
Daniel J. Abadi Samuel R. Madden Nabil Hachem
YaleUniversity MIT AvantGardeConsulting,LLC
NewHaven,CT,USA Cambridge,MA,USA Shrewsbury,MA,USA
PI:EMAIL PI:EMAIL PI:EMAIL
ABSTRACT GeneralTerms
Therehasbeenasignificantamountofexcitementandrecentwork Experimentation,Performance,Measurement
on column-oriented database systems (“column-stores”). These
database systems have been shown to perform more than an or- Keywords
derofmagnitudebetterthantraditionalrow-orienteddatabasesys-
tems(“row-stores”)onanalyticalworkloadssuchasthosefoundin C-Store,column-store,column-orientedDBMS,invisiblejoin,com-
datawarehouses,decisionsupport,andbusinessintelligenceappli- pression,tuplereconstruction,tuplematerialization.
cations. The elevator pitch behind this performance difference is
straightforward:column-storesaremoreI/Oefficientforread-only 1. INTRODUCTION
queriessincetheyonlyhavetoreadfromdisk(orfrommemory)
Recentyearshaveseentheintroductionofanumberofcolumn-
thoseattributesaccessedbyaquery.
orienteddatabasesystems,includingMonetDB[9,10]andC-Store[22].
This simplistic view leads to the assumption that one can ob-
Theauthorsofthesesystemsclaimthattheirapproachoffersorder-
taintheperformancebenefitsofacolumn-storeusingarow-store:
of-magnitudegainsoncertainworkloads,particularlyonread-intensive
eitherbyverticallypartitioningtheschema, orbyindexingevery
analyticalprocessingworkloads,suchasthoseencounteredindata
columnsothatcolumnscanbeaccessedindependently.Inthispa-
warehouses.
per,wedemonstratethatthisassumptionisfalse. Wecomparethe
Indeed,papersdescribingcolumn-orienteddatabasesystemsusu-
performanceofacommercialrow-storeunderavarietyofdiffer-
allyincludeperformanceresultsshowingsuchgainsagainsttradi-
entconfigurationswithacolumn-storeandshowthattherow-store
tional,row-orienteddatabases(eithercommercialoropensource).
performance is significantly slower on a recently proposed data
Theseevaluations,however,typicallybenchmarkagainstrow-orient-
warehouse benchmark. We then analyze the performance differ-
edsystemsthatusea“conventional”physicaldesignconsistingof
enceandshowthattherearesomeimportantdifferencesbetween
acollectionofrow-orientedtableswithamore-or-lessone-to-one
thetwosystemsatthequeryexecutorlevel(inadditiontotheobvi-
mappingtothetablesinthelogicalschema. Thoughsuchresults
ousdifferencesatthestoragelayerlevel). Usingthecolumn-store,
clearly demonstrate the potential of a column-oriented approach,
wethenteaseapartthesedifferences,demonstratingtheimpacton
theyleaveopenakeyquestion: Aretheseperformancegainsdue
performanceofavarietyofcolumn-orientedqueryexecutiontech-
tosomethingfundamentalaboutthewaycolumn-orientedDBMSs
niques,includingvectorizedqueryprocessing,compression,anda
areinternallyarchitected,orwouldsuchgainsalsobepossiblein
new join algorithm we introduce in this paper. We conclude that
aconventionalsystemthatusedamorecolumn-orientedphysical
while it is not impossible for a row-store to achieve some of the
design?
performanceadvantagesofacolumn-store,changesmustbemade
Often,designersofcolumn-basedsystemsclaimthereisafunda-
toboththestoragelayerandthequeryexecutortofullyobtainthe
mentaldifferencebetweenafrom-scratchcolumn-storeandarow-
benefitsofacolumn-orientedapproach.
store using column-oriented physical design without actually ex-
ploringalternatephysicaldesignsfortherow-storesystem.Hence,
one goal of this paper is to answer this question in a systematic
way. OneoftheauthorsofthispaperisaprofessionalDBAspe-
CategoriesandSubjectDescriptors
cializinginapopularcommercialrow-orienteddatabase. Hehas
carefullyimplementedanumberofdifferentphysicaldatabasede-
H.2.4[DatabaseManagement]:Systems—Queryprocessing,Re-
signsforarecentlyproposeddatawarehousingbenchmark,theStar
lationaldatabases
SchemaBenchmark(SSBM)[18,19],exploringdesignsthatareas
“column-oriented”aspossible(inadditiontomoretraditionalde-
signs),including:
Permissiontomakedigitalorhardcopiesofallorpartofthisworkfor • Verticallypartitioningthetablesinthesystemintoacollec-
personalorclassroomuseisgrantedwithoutfeeprovidedthatcopiesare tionoftwo-columntablesconsistingof(tablekey,attribute)
notmadeordistributedforprofitorcommercialadvantageandthatcopies pairs,sothatonlythenecessarycolumnsneedtobereadto
bearthisnoticeandthefullcitationonthefirstpage.Tocopyotherwise,to
answeraquery.
republish,topostonserversortoredistributetolists,requirespriorspecific
permissionand/orafee.
• Using index-only plans; by creating a collection of indices
SIGMOD’08,June9–12,2008,Vancouver,BC,Canada.
Copyright2008ACM978-1-60558-102-6/08/06...$5.00. thatcoverallofthecolumnsusedinaquery, itispossible
1
forthedatabasesystemtoansweraquerywithoutevergoing 1. Weshowthattryingtoemulateacolumn-storeinarow-store
totheunderlying(row-oriented)tables. doesnotyieldgoodperformanceresults, andthatavariety
oftechniquestypicallyseenas”good”forwarehouseperfor-
• Usingacollectionofmaterializedviewssuchthatthereisa mance (index-only plans, bitmap indices, etc.) do little to
viewwithexactlythecolumnsneededtoanswereveryquery improvethesituation.
inthebenchmark. Thoughthisapproachusesalotofspace,
it is the ‘best case’ for a row-store, and provides a useful 2. Weproposeanewtechniqueforimprovingjoinperformance
pointofcomparisontoacolumn-storeimplementation. incolumnstorescalledinvisiblejoins. Wedemonstrateex-
perimentallythat,inmanycases,theexecutionofajoinus-
Wecomparetheperformanceofthesevarioustechniquestothe ingthistechniquecanperformaswellasorbetterthanse-
baselineperformanceoftheopen-sourceC-Storedatabase[22]on lecting and extracting data from a single denormalized ta-
theSSBM,showingthat,despitetheabilityoftheabovemethods blewhere the join hasalready beenmaterialized. Wethus
to emulate the physical structure of a column-store inside a row- conclude that denormalization, an important but expensive
store,theirqueryprocessingperformanceisquitepoor.Hence,one (inspacerequirements)andcomplicated(indecidinginad-
contributionofthisworkisshowingthatthereisinfactsomething vance what tables to denormalize) performance enhancing
fundamentalaboutthedesignofcolumn-storesystemsthatmakes techniqueusedinrow-stores(especiallydatawarehouses)is
thembettersuitedtodata-warehousingworkloads. Thisisimpor- notnecessaryincolumn-stores(orcanbeusedwithgreatly
tantbecauseitputstorestacommonclaimthatitwouldbeeasy reducedcostandcomplexity).
forexistingrow-orientedvendorstoadoptacolumn-orientedphys-
3. Webreak-downthesourcesofcolumn-databaseperformance
icaldatabasedesign. Weemphasizethatourgoalisnottofindthe
onwarehouseworkloads,exploringthecontributionoflate-
fastest performing implementation of SSBM in our row-oriented
materialization, compression, block iteration, and invisible
database, buttoevaluatetheperformanceofspecific, “columnar”
joins on overall system performance. Our results validate
physical implementations, which leads us to a second question:
previousclaimsofcolumn-storeperformanceonanewdata
Which of the many column-database specific optimizations pro-
warehousingbenchmark(theSSBM),anddemonstratethat
posedintheliteraturearemostresponsibleforthesignificantper-
simplecolumn-orientedoperation–withoutcompressionand
formanceadvantageofcolumn-storesoverrow-storesonwarehouse
latematerialization–doesnotdramaticallyoutperformwell-
workloads?
optimizedrow-storedesigns.
Prior research has suggested that important optimizations spe-
cifictocolumn-orientedDBMSsinclude: Therestofthispaperisorganizedasfollows: webeginbyde-
scribing prior work on column-oriented databases, including sur-
• Latematerialization(whencombinedwiththeblockiteration veyingpastperformancecomparisonsanddescribingsomeofthe
optimizationbelow, thistechniqueisalsoknownasvector- architecturalinnovationsthathavebeenproposedforcolumn-oriented
izedqueryprocessing[9,25]),wherecolumnsreadoffdisk DBMSs(Section2); then, wereviewtheSSBM(Section3). We
are joined together into rows as late as possible in a query thendescribethephysicaldatabasedesigntechniquesusedinour
plan[5]. row-orientedsystem(Section4),andthephysicallayoutandquery
executiontechniquesusedbytheC-Storesystem(Section5). We
• Block iteration [25], where multiple values from a column then present performance comparisons between the two systems,
are passed as a block from one operator to the next, rather first contrasting our row-oriented designs to the baseline C-Store
thanusingVolcano-styleper-tupleiterators[11]. Iftheval- performanceandthendecomposingtheperformanceofC-Storeto
uesarefixed-width,theyareiteratedthroughasanarray. measurewhichofthetechniquesitemploysforefficientqueryex-
ecutionaremosteffectiveontheSSBM(Section 6).
• Column-specificcompressiontechniques,suchasrun-length
encoding,withdirectoperationoncompresseddatawhenus-
2. BACKGROUNDANDPRIORWORK
inglate-materializationplans[4].
Inthissection,webrieflypresentrelatedeffortstocharacterize
• We also propose a new optimization, called invisible joins, column-storeperformancerelativetotraditionalrow-stores.
whichsubstantiallyimprovesjoinperformanceinlate-mat- Although the idea of vertically partitioning database tables to
erializationcolumnstores,especiallyonthetypesofschemas improveperformancehasbeenaroundalongtime[1, 7, 16], the
foundindatawarehouses. MonetDB[10]andtheMonetDB/X100[9]systemspioneeredthe
design of modern column-oriented database systems and vector-
However, because each of these techniques was described in a izedqueryexecution. Theyshowthatcolumn-orienteddesigns–
separate research paper, no work has analyzed exactly which of due to superior CPU and cache performance (in addition to re-
these gains are most significant. Hence, a third contribution of duced I/O) – can dramatically outperform commercial and open
thisworkistocarefullymeasuredifferentvariantsoftheC-Store sourcedatabasesonbenchmarkslikeTPC-H.TheMonetDBwork
databasebyremovingthesecolumn-specificoptimizationsone-by- doesnot, however, attempttoevaluatewhatkind ofperformance
one(ineffect,makingtheC-Storequeryexecutorbehavemorelike ispossiblefromrow-storesusingcolumn-orientedtechniques,and
arow-store),breakingdownthefactorsresponsibleforitsgoodper- tothebestofourknowledge,theiroptimizationshaveneverbeen
formance. Wefindthatcompressioncanofferorder-of-magnitude evaluatedinthesamecontextastheC-Storeoptimizationofdirect
gainswhenitispossible,butthatthebenefitsarelesssubstantialin operationoncompresseddata.
othercases,whereaslatematerializationoffersaboutafactorof3 The fractured mirrors approach [21] is another recent column-
performancegainacrosstheboard. Otheroptimizations–includ- storesystem,inwhichahybridrow/columnapproachisproposed.
ingblockiterationandournewinvisiblejointechnique,offerabout Here, the row-store primarily processes updates and the column-
afactor1.5performancegainonaverage. store primarily processes reads, with a background process mi-
Insummary,wemakethreecontributionsinthispaper: grating data from the row-store to the column-store. This work
2
alsoexploresseveraldifferentrepresentationsforafullyvertically tionabouttheirrespectiveentitiesintheexpectedway. Figure 1
partitioned strategy in a row-store (Shore), concluding that tuple (adaptedfromFigure2of[19])showstheschemaofthetables.
overheads in a naive scheme are a significant problem, and that AswithTPC-H,thereisabase“scalefactor”whichcanbeused
prefetchingoflargeblocksoftuplesfromdiskisessentialtoim- toscalethesizeofthebenchmark. Thesizesofeachofthetables
provetuplereconstructiontimes. aredefinedrelativetothisscalefactor.Inthispaper,weuseascale
C-Store [22] is a more recent column-oriented DBMS. It in- factorof10(yieldingaLINEORDERtablewith60,000,000tuples).
cludes many of the same features as MonetDB/X100, as well as
optimizations for direct operation on compressed data [4]. Like
CUSTOMER LINEORDER PART
the other two systems, it shows that a column-store can dramati-
CUSTKEY ORDERKEY PARTKEY
callyoutperformarow-storeonwarehouseworkloads,butdoesn’t NAME LINENUMBER NAME
carefully explore the design space of feasible row-store physical ADDRESS CUSTKEY MFGR
designs. Inthispaper,wedissecttheperformanceofC-Store,not- CITY PARTKEY CATEGOTY
NATION SUPPKEY BRAND1
inghowthevariousoptimizationsproposedintheliterature(e.g.,
REGION ORDERDATE COLOR
[4,5])contributetoitsoverallperformancerelativetoarow-store PHONE ORDPRIORITY TYPE
onacompletedatawarehousingbenchmark,somethingthatprior MKTSEGMENT SHIPPRIORITY SIZE
workfromtheC-Storegrouphasnotdone. Size=scalefactor x QUANTITY CONTAINER
30,0000 EXTENDEDPRICE Size=200,000 x
Harizopoulosetal.[14]comparetheperformanceofarowand
O DIR SD CT OO UT NA TLPRICE (1 + log2 scalefactor)
column store built from scratch, studying simple plans that scan SUPPLIER
datafromdiskonlyandimmediatelyconstructtuples(“earlyma- SUPPKEY REVENUE DATE
terialization”). This work demonstrates that in a carefully con- NAME SUPPLYCOST DATEKEY
ADDRESS TAX DATE