service providers will always return consistent output results. How-
ever, it is challenging to perform replay-based consistency check
on stateful functions, such as windowed aggregation and join [4].
Even if the same input data is used for attestation, two benign
service providers at different states may produce different results.
Thus, for stateful functions, both input data and the states have to be
replayed. We propose two methods to attest stateful functions. One
method is called indirect state recovery, which relies on replaying
a sequence of historic input data to indirectly bring back the state.
For sliding-window stream operators, we record the data tuples sent
to one service provider and resend them to another service provider
to form the exact same window. The other method is called dif-
ference check, which derives consistency relationship between two
stateful service components by comparing result difference pro-
duced by two consecutive input data. For example, the state can be
a counter to to count the number of received tuples. Even though
the counters of two service components may have different values,
they both will increase by one when accepting a new input data.
In this paper, we focus on window-based stateful service func-
tions, which is adopted by IBM System S [4]. We adopt a master-
slave mechanism for data attestation. For each function, the por-
tal randomly designates a service provider as the master and the
rest as slaves. The portal sends all the data to the master ser-
vice provider and sends only attestation data to the slave service
providers. Speciﬁcally, the portal duplicates a data tuple di with
a probability Pdup, and buffers a window size w of continuous
tuples di, di−1, ..., di−w+1, which serve as the state on the master
service provider. After the portal receives the processing result of
di from the master, it sends the buffered window to a randomly
selected subset of slave service providers. Results from the master
and the slave service providers can then be compared to derive the
consistency / inconsistency relationships.
Attestation Graph Model. Consistency/inconsistency relation-
ships are stored in graphs for further analysis. For each service
function, we maintain a consistency graph, which is an undirected
graph, with all the attested service providers that provide the same
service function as the vertex set and consistency relationship as
the edges, as shown in Figure 2. Note that two service providers
that are consistent in one function may be inconsistent in another
function. Consistency graphs alone cannot efﬁciently reﬂect the
relationship between service providers. Thus, we also maintain a
global inconsistency graph, with all the service providers in the sys-
tem as the vertex set and inconsistency relationship as the edges, as
shown in Figure 3. The graphs reﬂect the consistency/inconsistency
relationships across multiple service providers over time.
Pinpointing Malicious Service Providers. We leverage both
per-function consistency graphs and global inconsistency graph to
pinpoint malicious service providers. With consistency graphs, we
adopt the method proposed in our previous work [3]. The intuition
is that benign service providers always give the same correct re-
sults, thus can form a clique in the consistency graph. If the number
of benign service providers is larger than that of malicious ones,
673f1
f2
p1
p2
p6
p2
p3
p4
p5
p7
p8
p5
p1
p3
p4
p6
p7
p8
p2
p5
y
c
a
r
u
c
c
A
1
0.8
0.6
0.4
0.2
0
detection rate
false positive rate
ROSIA
CG
ICG
Figure 2: Per-function consis-
tency graphs.
Figure 3: Global inconsis-
tency graph.
Figure 4: Comparison between ROSIA, the consistency graph
(CG) scheme and the inconsistency graph (ICG) scheme.
we can identify nodes that fall outside of the maximum clique as
malicious.
Note that malicious service providers can escape from being de-
tected by trying to form a majority clique in the per-function con-
sistency graph. However, if attackers try to maximize their damage
by attacking multiple functions, we can still detect them by lever-
aging the global inconsistency graph. Intuitively, given two service
providers that are inconsistent, we can claim that at least one of
them is malicious. Thus, we can conclude that the number of mali-
cious service providers in the inconsistency graph G should be no
less than the size of the minimum vertex cover of the inconsistency
graph, denoted by |CG|.
If we assume that the total number of
malicious service providers in the whole system is no more than
K, we can pinpoint those nodes that are deﬁnitely malicious by
examining each individual node p in G [9]. The intuition is that
if a node p is benign, its neighbors must be malicious. Then total
number of malicious nodes, which is the sum of p’s neighbor size
|Np| and the number of malicious nodes in the residual graph after
removing p and its neighbors from the inconsistency graph, should
be no less than K. The latter has a lower bound equal to the
minimum vertex cover of the residual graph, denoted by |CG(cid:2)
|.
Thus, node p is a malicious service provider if and only if |Np| +
|CG(cid:2)
| > K. This method forces the attackers to limit the number
of inconsistency links in order to escape from being detected.
p
p
Our algorithm ﬁnalizes the list of malicious service providers
based on the results of both consistency graphs and inconsistency
graphs. The idea is that any node identiﬁed through inconsistency
graph is deﬁnitely malicious. If the node is also identiﬁed as mali-
cious in a consistency graph, which may indicate that benign nodes
form the majority in this function. Then the rest nodes that are
outside of the majority clique may also be malicious. In summary,
the consistency graph based pinpointing method forces malicious
attackers to form majority in every service function they participate
in, while the inconsistency graph based pinpointing method limits
the number of functions malicious service providers can attack. By
considering both consistency graphs and inconsistency graph, we
can detect malicious service providers with a higher probability.
The damage of malicious attacks is also bounded.
4. EXPERIMENTAL EVALUATION
We have implemented the ROSIA system in C++ on top of the
IBM System S stream processing system [4], and deployed it on
the NCSU virtual computing lab (VCL) [1], which consists of hun-
dreds of blade servers and provides similar virtual resources as
Amazon EC2. We compare our scheme with two other schemes:
the consistency graph (CG) scheme and the inconsistency graph
(ICG) scheme, which identify malicious nodes based on consis-
tency graphs only and inconsistency graph only, respectively. Fig-
ure 4 shows one of our initial results, the advantages of ROSIA in
terms of higher detection rate and lower false positive rate in certain
attack scenarios.
5. CONCLUSION
In this paper, we have presented the design and implementation
of ROSIA, a robust service integrity attestation system for pro-
cessing stateful dataﬂow applications in cloud systems. ROSIA
employs replay-based consistency check to efﬁciently verify the in-
tegrity of dataﬂow processing service components and pinpoint ma-
licious service providers. ROSIA supports both stateless and state-
ful service functions and performs integrated analysis over both
per-function consistency graphs and global inconsistency graph to
effectively pinpoint colluding attackers. We have implemented ROSIA
on top of the IBM System S stream processing system and tested it
on the NCSU virtual computing lab. Our experimental results show
that ROSIA is effective and imposes low overhead for dataﬂow
processing in cloud infrastructures.
Acknowledgment: This work was sponsored in part by U.S. Army
Research Ofﬁce (ARO) under grant W911NF-08-1-0105 managed
by NCSU Secure Open Systems Initiative (SOSI), NSF CNS-0915567,
and NSF IIS-0430166.
6. REFERENCES
[1] Virtual Computing Lab. http://vcl.ncsu.edu/.
[2] S. Berger, R. Caceres, and et. al. TVDc: Managing security in
the trusted virtual datacenter. ACM SIGOPS Operating
Systems Review, 42(1):40–47, 2008.
[3] J. Du, W. Wei, X. Gu, and T. Yu. Runtest: Assuring integrity
of dataﬂow processing in cloud computing infrastructures. In
ACM Symposium on Information, Computer and
Communications Security (ASIACCS), 2010.
[4] B. Gedik, H. Andrade, and et. al. SPADE: the System S
Declarative Stream Processing Engine. Proc. of SIGMOD,
April 2008.
[5] X. Gu, K. Nahrstedt, and et. al. QoS-Assured Service
Composition in Managed Service Overlay Networks. Proc. of
ICDCS, 194-202, 2003.
[6] T. Ho, B. Leong, R. Koetter, and et. al. Byzantine modiﬁcation
detection in multicast networks using randomized network
coding. In IEEE ISIT, 2004.
[7] I. Roy, S. Setty, and et. al. Airavat: Security and privacy for
MapReduce. In NSDI, April 2010.
[8] E. Shi, A. Perrig, and L. V. Doorn. Bind: A ﬁne-grained
attestation service for secure distributed systems. In
Proceedings of the IEEE Symposium on Security and Privacy,
Oakland, CA, May 2005.
[9] Q. Zhang, T. Yu, and P. Ning. A framework for identifying
compromised nodes in wireless sensor networks. ACM
TISSEC, 11(3), 2008.
674