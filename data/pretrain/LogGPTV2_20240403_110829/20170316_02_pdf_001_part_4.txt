being set have the corresponding bit set in the traps field, a trap is raised (regardless of whether the bit
is already set in the status field). Only one trap is raised even if more than one bit is being set.
The arguments are:
context (decContext *) Pointer to the structure whose status is to be set.
status (uint32_t) Any 1 (set) bit in this argument will cause the corresponding bit to be set in
the context status field.
Returns context.
Normally, only library modules use this function. Applications may clear status bits but should not set
them (except, perhaps, for testing).
Note that a signal handler which handles a trap raised by this function may execute a C long jump, and
hence control may not return from the function. It should therefore only be invoked when any state
and resources used (such as allocated memory) are clean.
decContextSetStatusFromString(context, string)
This function is used to set a status bit in the status field of a decContext, using the name of the bit as
returned by the decContextStatusToString function. If the bit being set has the corresponding bit set in
the traps field, a trap is raised (regardless of whether the bit is already set in the status field).
The arguments are:
context (decContext *) Pointer to the structure whose status is to be set.
string (char *) A string which must be exactly equal to one that might be returned by
decContextStatusToString. If the string is “No status”, the status is not changed and
no trap is raised. If the string is “Multiple status”, or is not recognized, then the call
is in error.
Version 3.68 Module descriptions 27
Returns context unless the string is in error, in which case NULL is returned.
Normally, only library and test modules use this function. Applications may clear status bits but
should not set them (except, perhaps, for testing).
Note that a signal handler which handles a trap raised by this function may execute a C long jump, and
hence control may not return from the function. It should therefore only be invoked when any state
and resources used (such as allocated memory) are clean.
decContextSetStatusFromStringQuiet(context, string)
This function is identical to decContextSetStatusFromString except that the context traps field is
ignored (i.e., no trap is raised).
decContextSetStatusQuiet(context, status)
This function is identical to decContextSetStatus except that the context traps field is ignored (i.e., no
trap is raised).
decContextStatusToString(context)
This function returns a pointer (char *) to a human-readable description of a status bit. The string
pointed to will be a constant.
The argument is:
context (decContext *) Pointer to the structure whose status is to be returned as a string. The
bits set in the status field must comprise only bits defined in the header file.
If no bits are set in the status field, a pointer to the string “No status” is returned. If more than one
bit is set, a pointer to the string “Multiple status” is returned.
Note that the content of the string pointed to is a programming interface (it is understood by the
decContextSetStatusFromString function) and is therefore not language- or locale-dependent.
decContextTestEndian(quiet)
This function checks that the DECLITEND tuning parameter (see page 70) is set correctly.
The argument is:
quiet (uint8 t) If 0, a warning message is displayed (using printf) if DECLITEND is set
incorrectly. If 1, no message is displayed.
Returns 0 if the DECLITEND parameter is correct, 1 if it is incorrect and should be set to 1, and -1 if it
is incorrect and should be set to 0.
decContextTestSavedStatus(status, mask)
This function is used to test one or more status bits in a saved status field.
The arguments are:
status (uint32_t) A saved status field (as saved by decContextSaveStatus or retrieved by
decContextGetStatus).
28 Module descriptions Version 3.68
mask (uint32_t) Any 1 (set) bit in this argument will cause the corresponding bit in status to
be included in the test.
Returns the uint32_t which is the logical And of status and mask.
decContextTestStatus(context, mask)
This function is used to test one or more status bits in a context.
The arguments are:
context (decContext *) Pointer to the structure whose status is to be tested.
mask (uint32_t) Any 1 (set) bit in this argument will cause the corresponding bit in context
status field to be included in the test.
Returns the uint32_t which is the logical And of the context status field and mask.
decContextZeroStatus(context)
This function is used to clear (set to zero) all the status bits in the status field of a decContext.
The argument is:
context (decContext *) Pointer to the structure whose status is to be zeroed.
Returns context.
Version 3.68 Module descriptions 29
decNumber module
The decNumber module defines the data structure used for representing numbers in a form suitable for
computation, and provides the functions for operating on those values.
The decNumber structure is optimized for efficient processing of relatively short numbers (tens or
hundreds of digits); in particular it allows the use of fixed sized structures and minimizes copy and
move operations. The functions in the module, however, support arbitrary precision arithmetic (up to
999,999,999 decimal digits, with exponents up to 9 digits).
The essential parts of a decNumber are the coefficient, which is the significand of the number, the
exponent (which indicates the power of ten by which the coefficient should be multiplied), and the sign,
which is 1 if the number is negative, or 0 otherwise. The numerical value of the number is then given
by: (-1)sign × coefficient × 10exponent.
Numbers may also be a special value. The special values are NaN (Not a Number), which may be quiet
(propagates quietly through operations) or signaling (raises the Invalid operation condition when
encountered), and ±infinity.
These parts are encoded in the four fields of the decNumber structure:
digits The digits field contains the length of the coefficient, in decimal digits.
digits is of type int32_t, and must have a value in the range 1 through 999,999,999.
exponent The exponent field holds the exponent of the number. Its range is limited by the
requirement that the range of the adjusted exponent of the number be balanced and fit
within a whole number of decimal digits (in this implementation, be -999,999,999
through +999,999,999). The adjusted exponent is the exponent that would result if the
number were expressed with a single digit before the decimal point, and is therefore
given by exponent+digits-1.
When the extended flag in the context is 1, gradual underflow (using subnormal values) is
enabled. In this case, the lower limit for the adjusted exponent becomes -999,999,999-
(precision-1), where precision is the digits setting from the context; the adjusted exponent
may then have 10 digits.
exponent is of type int32_t.
bits The bits field comprises one bit which indicates the sign of the number (1 for negative, 0
otherwise), 3 bits which indicate the special values, and 4 further bits which are unused
and reserved. These reserved bits must be zero.
If the number has a special value, just one of the indicator bits (DECINF, DECNAN, or
DECSNAN) will be set (along with DECNEG iff the sign is 1). If DECINF is set digits must
be 1 and the other fields must be 0. If the number is a NaN, the exponent must be zero
and the coefficient holds any diagnostic information (with digits indicating its length, as
for finite numbers). A zero coefficient indicates no diagnostic information.
bits is of type uint8_t (an unsigned byte). Masks for the named bits, and some useful
macros, are defined in the header file.
lsu The lsu field is one or more units in length (of type decNumberUnit, an unsigned
integer), and contains the digits of the coefficient. Each unit represents one or more of the
digits in the coefficient and has a binary value in the range 0 through 10n-1, where n is the
number of digits in a unit, set by the compile-time definition DECDPUN (see page 71).
30 Module descriptions Version 3.68
The size of a unit is the smallest of 1, 2, or 4 bytes which will contain the maximum
value held in the unit.
The units comprising the coefficient start with the least significant unit (lsu). Each unit
except the most significant unit (msu) contains DECDPUN digits. The msu contains from
1 through DECDPUN digits, and must not be 0 unless digits is 1 (for the value zero).
Leading zeros in the msu are never included in the digits count, except for the value zero.
The number of units predefined for the lsu field is determined by DECNUMDIGITS, which
defaults to 1 (the number of units will be DECNUMDIGITS divided by DECDPUN, rounded
up to a whole unit).
For many applications, there will be a known maximum length for numbers and
DECNUMDIGITS can be set to that length, as in Example 1 (see page 11). In others, the
length may vary over a wide range and it then becomes the programmer’s responsibility
to ensure that there are sufficient units available immediately following the decNumber
lsu field. This can be achieved by enclosing the decNumber in other structures which
append various lengths of unit arrays, or in the more general case by allocating storage
with sufficient space for the other decNumber fields and the units of the number.
lsu is an array of type decNumberUnit (an unsigned integer whose length depends on
the value of DECDPUN), with at least one element. If digits needs fewer units than the size
of the array, remaining units are not used (they will neither be changed nor referenced).
For special values, only the first unit need be 0.
It is expected that decNumbers will usually be constructed by conversions from other formats, such as
strings or decimal64 structures, so the decNumber structure is in some sense an “internal”
representation; in particular, it is machine-dependent.9
Examples:
If DECDPUN were 4, the value -1234.50 would be encoded with:
digits = 6
exponent = -2
bits = 0x80
lsu = {3450, 12}
the value 0 would be:
digits = 1
exponent = 0
bits = 0x00
lsu = {0}
and -∞ (minus infinity) would be:
digits = 1
exponent = 0
bits = 0xC0
lsu = {0}
9 The layout of an integer might be big-endian or little-endian, for example.
Version 3.68 Module descriptions 31
Definitions
The decNumber.h header file defines the decNumber data structure described above. It also
includes:
• The tuning parameter DECDPUN.
This sets the number of digits held in one unit (see page 30), which in turn alters the
performance and other characteristics of the library. Further details are given in the tuning
section (see page 71).
If this parameter is changed, the decNumber.c source file must be recompiled for the change
to have effect.
• The decClass enumeration (and corresponding strings) which is used to classify decNumbers
with the decNumberClass function (see page 41).
• Constants naming the bits in the bits field, such as DECNEG, the sign bit.
• Definitions of the public functions and macros in the decNumber module.
Functions
The decNumber.c source file contains the public functions defined in the header file. These
comprise conversions to and from strings, the arithmetic and logical operations, and some utility
functions.
The functions all follow some general rules:
• Operands to the functions which are decNumber structures (referenced by an argument) are
never modified unless they are also specified to be the result structure (which is always
permitted).
Often, operations which do specify an operand and result as the same structure can be carried
out in place, giving improved performance. For example, x=x+1, using the decNumberAdd
function, can be several times faster than x=y+1.
• Each function forms its primary result by setting the content of one of the structures referenced
by the arguments; a pointer to this structure is returned by the function.
• Exceptional conditions and errors are reported by setting a bit in the status field of a referenced
decContext structure (see page 22). The corresponding bit in the traps field of the decContext
structure determines whether a trap is then raised, as also described earlier.
• If an argument to a function is corrupt (it is a NULL reference, or it is an input argument and the
content of the structure it references is inconsistent), the function is unprotected (may “crash”)
unless DECCHECK is enabled (see the next rule). However, in normal operation (that is, no
argument is corrupt), the result will always be a valid decNumber structure. The value of the
decNumber result may be infinite or a quiet NaN if an error was detected (i.e., if one of the
DEC_Errors bits (see page 24) is set in the decContext status field).
• For best performance, input operands are assumed to be valid (not corrupt) and are not checked
unless DECCHECK (see page 72) is 1, which enables full operand checking. Whether DECCHECK
is 0 or 1, the value of a result is undefined if an argument is corrupt. DECCHECK checking is a
diagnostic tool only; it will report the error and prevent code failure by ensuring that results are
32 Module descriptions Version 3.68
valid numbers (unless the result reference is NULL), but it does not attempt to correct arguments.
Conversion functions
The conversion functions build a decNumber from a string, or lay out a decNumber as a character
string. Additional Utility functions (see page 41) are included in the package for conversions to and
from BCD strings and binary integers.
decNumberFromString(number, string, context)
This function is used to convert a character string to decNumber format. It implements the to-number
conversion from the arithmetic specification.
The conversion is exact provided that the numeric string has no more significant digits than are
specified in context.digits and the adjusted exponent is in the range specified by context.emin
and context.emax. If there are more than context.digits digits in the string, or the exponent is
out of range, the value will be rounded as necessary using the context.round rounding mode. The
context.digits field therefore both determines the maximum precision for unrounded numbers
and defines the minimum size of the decNumber structure required.
The arguments are:
number (decNumber *) Pointer to the structure to be set from the character string.
string (char *) Pointer to the input character string. This must be a valid numeric string, as
defined in the appropriate specification. The string will not be altered.
context (decContext *) Pointer to the context structure whose digits, emin, and emax fields
indicate the maximum acceptable precision and exponent range, and whose status field is
used to report any errors. If its extended field is 1, then special values (±Inf,
±Infinity, ±NaN, or ±sNaN, independent of case) are accepted, and the sign and
exponent of zeros are preserved. NaNs may also specify diagnostic information as a
string of digits following the name.
Returns number.
Possible errors are DEC_Conversion_syntax (the string does not have the syntax of a number,
which depends on the setting of extended in the context), DEC_Overflow (the adjusted exponent of the
number is larger than context.emax), or DEC_Underflow (the adjusted exponent is less than
context.emin and the conversion is not exact). If any of these conditions are set, the number
structure will have a defined value as described in the arithmetic specification (this may be a
subnormal or infinite value).
decNumberToString(number, string)
This function is used to convert a decNumber number to a character string, using scientific notation if
an exponent is needed (that is, there will be just one digit before any decimal point). It implements the
to-scientific-string conversion.
The arguments are:
number (decNumber *) Pointer to the structure to be converted to a string.
string (char *) Pointer to the character string buffer which will receive the converted number.
Version 3.68 Module descriptions 33
It must be at least 14 characters longer than the number of digits in the number
(number->digits).
Returns string.
No error is possible from this function. Note that non-numeric strings (one of +Infinity,
-Infinity, NaN, or sNaN) are possible, and NaNs may have a - sign and/or diagnostic information.
decNumberToEngString(number, string)
This function is used to convert a decNumber number to a character string, using engineering notation
(where the exponent will be a multiple of three, and there may be up to three digits before any decimal
point) if an exponent is needed. It implements the to-engineering-string conversion.
The arguments and result are the same as for the decNumberToString function, and similarly no error
is possible from this function.
Arithmetic and logical functions
The arithmetic and logical functions all follow the same syntax and rules, and are summarized below.
They all take the following arguments:
number (decNumber *) Pointer to the structure where the result will be placed.
lhs (decNumber *) Pointer to the structure which is the left hand side (lhs) operand for the
operation. This argument is omitted for monadic operations.
rhs (decNumber *) Pointer to the structure which is the right hand side (rhs) operand for
the operation.
context (decContext *) Pointer to the context structure whose settings are used for
determining the result and for reporting any exceptional conditions.
Each function returns number. The decNumberFMA function (see page 36) also takes a third numeric
operand fhs (decNumber *), a pointer to the structure which is the “far hand side” operand for the
operation.
Some functions, such as decNumberExp, are described as mathematical functions. These have some
restrictions: context.emax must be  -106, and context.digits
must be < 106. Non-zero operands to these functions must also fit within these bounds.
The precise definition of each operation can be found in the specification document.
decNumberAbs(number, rhs, context)
The number is set to the absolute value of the rhs. This has the same effect as decNumberPlus unless
rhs is negative, in which case it has the same effect as decNumberMinus.
decNumberAdd(number, lhs, rhs, context)
The number is set to the result of adding the lhs to the rhs.
34 Module descriptions Version 3.68
decNumberAnd(number, lhs, rhs, context)
The number is set to the result of the digit-wise logical and of lhs and rhs.
decNumberCompare(number, lhs, rhs, context)
This function compares two numbers numerically. If the lhs is less than the rhs then the number will be
set to the value -1. If they are equal (that is, when subtracted the result would be 0), then number is set