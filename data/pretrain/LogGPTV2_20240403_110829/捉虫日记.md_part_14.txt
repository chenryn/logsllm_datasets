+
FieEditVw DebugWindHslp
口日
ModLoad
77c100D0
77c68000
fodLoad
e41000D
7e4a100D
fodI
77f10000
77f59000
INDOVSsysten32GDI32.d11
7dd0000
77e6b000
odl
77e70D00
77f02000
E,Co05ys0:PrcO0015s4Thd
图5-5WinDbg显示NewObject（)方法的内存地址
5.1.4第四步：找到用户控制的输入数值
接下来，我用IDAPro反汇编了二进制的C:ProgramFiles\WebEx\WebEx\
---
## Page 92
5.1探寻漏洞77
824\atucfobj.dll。在IDA中，atucfobj.dll的映像基址（imagebase）是ox10ooo0o0。
所以New0bject()在反汇编中位于地址0x1000767f（映像基址+NewObject()的偏
移：0x10000000+0x767F）（见图5-6）
ENW
188787
1000767F
Rtteibutes: bp-based frane
1000767F;int _stdca1I sab_10B0767F(int,LPcwSTR 1pWideCharStr,int
1000767F
1000767F
sub_1880767F pracnear
1000767F
1008767Fuar_10-byte ptr-10h
1008767Fuar_h=duordptr-4
10a8767Fvar_8=dwordptr-B
1000767F 1pvidecharStr- duard ptr pCh
1000767F
arg_8=dwordptr1ah
1000767F
10007688nou
1000767F push
ebp
ebp.
10007682Sub
10007685
push
10007686
xor
ebx,ebx
10007688
cnp
[ebp+lpuidecharStr],ebx
esi
10007680
push
1000768p jnz
short1oc_18007693
HINU
ENU
10887691jm
1888768F
XO!
eax,eax
10807693
short 1oc18076c3
1e807693 1oc_10087693:
:1pstring
10007693 push
[ebp+lpvidecharstr]
图5-6IDAPro中反汇编NewObject（)方法
开始读汇编代码之前，我必须确定代码清单5-1中VBScript代码提供的用户
控制字符串值保存在哪个函数参数中。因为这个参数是一个字符串，我猜测它将
在IDA显示的第二个参数lpWideCharStr中。但我想确定这一点，因此我在
NewObject（)方法上定义了一个新的断点，并在调试器里看了看函数参数（以下调
试命令的详细描述见B.2节）
如图5-7所示，我在NewObject()的地址处定义了一个新的断点（o:00o9>bp
01d5767f），继续执行IE（o:009>g），然后再次导向http://www.webex.com/域。
断点触发时，我检查了函数NewObject()第二个参数的值（o:ooo>ddpoi(esp+8）和
0:00o>dupoi（esp+8））。正如调试器输出所示，用户控制值（由12个字符A组
成的宽字符字符串）的确通过第二个参数传递给函数了。
最终，我得到了所需的全部信息，可以检查这个方法来寻找安全bug了。
---
## Page 93
78第5章浏览即遭劫持
FleEdtV Debug WindowHelp
05790000 05796000C:ProgranFiles\VebExVebEx824atkbet1.d11
push
ebp
ebx-01d5e6b0 ecx=01d5767fedx=001abbc2esi=001abb74edi=00000000
nvupei plnz
s=001b
f1-0000202
1d5767
55
push
ebp
101d3834
D+R)
D041004100410041-00410041
00410041
DD410041
001c0750
00000000
80004000
00000000
7e29b0f0
e29e44c
001d38a8
00000000
00000000
00080006
0O009100
po1(esp+8)
000
LnD,Cal0SysQiProc0DO5aThrd:4c4
图5-7定义一个新的断点后NewObject（）函数的用户控制参数
5.1.5第五步：逆向工程这个对象方法
回顾一下，我找到了一个明显的漏洞，当ActiveX控件处理NewObject（传过
来的用户提供的字符串值时触发。图5-8展示了到达这个漏洞函数的代码路径。
sub_1000767F
sub_10009826
sub_1EuNb42
sub_1uuUybUu
sub_1000B370
图5-8到达这个漏洞函数的代码路径（IDAPro生成）
---
## Page 94
5.1探寻漏洞79
在sub_1000767F，用户提供的宽字符字符串通过WideCharToMultiByte（)函数
转换为一个多字节字符串。之后，调用sub_10009642，用户控制字符串复制到另
一个缓冲区。sub_10009642中的代码允许最多256个用户控制字节复制到这个新
的字符缓冲区（C伪代码：strncpy(new_buffer，user_controlled_string，256））。
函数sub_10009826得以调用，它又调用sub_100096D0，这个函数调用了漏洞函数
sub_1000B37D。
代码清单5-3漏洞函数sub_1000B37D的反汇编码（IDAPro生成）
[..]
.text:1000B37D；int_cdecl sub_1000B37D（DwORD cbData,LPBYTE 1pData，int，int，int)
.text:1000B37D sub_1000B37D pr0c near
.text:1000B37D
.text:1000B37D SubKey= byte ptr -10Ch
.text:1000B37D Type= dword ptr -8
.text:1000B37D hKey= dword ptr -4
.text:1000B37DcbData=dwordptr8
.text:1000B37D 1pData= dword ptr 0Ch
.text:1000B37Darg_8=dwordptr10h
.text:1000B37D arg_C=dwordptr14h
.text:1000B37D arg_10= dwordptr 18h
.text:1000B37D
.text:1000B37D push
ebp
.text:1000B37E mov
ebp，esp
.text:1000B380 sub
esp，10Ch
text:1000B386
5push
edi
.text:1000B387
lea
eax,[ebp+SubKey]；the address of SubKeyis saved in eax
.text:1000B38D push
[ebp+cbData]
；4th parameter of sprintf():cbData
text:1000B390 x0r
edi，edi
.text:1000B392 push
offset aAuthoring；3rdparameter of sprintf():"Authoring"
.text:1000B397 push
offset aSoftwarewebexU；2nd parameter of sprintf():"SoFTwARE\\.
.text:1000B397
；.Webex\\UCF\\Components\\%s\\%s\\Instal1"
.text:1000B39C push
eax
；1stparameter of sprintf():addressof SubKey
.text:1000B39D cal1
ds:sprintf
；call to sprintf()
[..]
data:10012228；char aSoftwarewebexU[]
data:10012228aSoftwareWebexU db'SOFTwARE\Webex\UCF\Components\%s\%s\Install',0
[..]
sub_1000B37D的第一-个参数叫作cbData，它包含一个指向保存在新的字符缓
冲区（图5-8的介绍中提到的那个newbuffer）中用户控制数据的指针。我之前
说过，用户控制的宽字符数据以多字节字符串的形式保存在这个新缓冲区中，缓冲
区的最大长度是256字节。代码清单5-3显示，地址.text：100oB39D处的sprintf（）
函数复制cbData指向的用户控制数据到栈缓冲区Subkey中（见.text：100oB387
和.text:1000B39C）
---
## Page 95
80第5章浏览即遭劫持
然后，我试图取得栈缓冲区SubKey的大小。按下CTRL-K打开IDAPro的默
认栈帧显示。如图5-9所示，栈缓冲区Subkey固定大小为260字节。如果把代码
清单5-3中的反汇编码显示的信息与这个漏洞函数的栈布局信息结合起来，
sprintf()的调用就可以表示为代码清单5-4中的C语言代码。
Stackframe
EitJumpSerc
-B0e010C SubKey
db268 dup（?)
;stack buffer
000eonns Type
onooooak hkey
pp
pp
dbadup(？)
;offset
80000004
00888080
dadup(？)
;savedreturnaddress
+80000008 cbData
dd
+onooeoac 1pData
+ggeee010 arg_8
dd.?
dd?
Struct field size
3fap
pp
pp
Luen4
00000018 arg_10
Naatdefinedtemat:000000106
0000001C
0800001C
:endofstackuariables
Aaylement wth1
Maximalossible size260
SP++00000004
Aize260
(neleents)