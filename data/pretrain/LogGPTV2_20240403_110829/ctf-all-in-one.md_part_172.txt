Pre-Process: src → (B , B ).
gcc llvm
The source program (src) is compiled down to 1) a binary B , for which
gcc
AEG will try to generate a working exploit and 2) a LLVM bytecode file
B , which will be used by our bug finding infrastructure.
llvm
Src-Analysis: B → max.
llvm
AEG analyzes the source code to generate the maximum size of
symbolic data max that should be provided to the program. AEG
determines max by searching for the largest statically allocated buffers
of the target program.
Bug-Find: (B , φ, max) → (Π , V).
llvm bug
Bug-Find takes in LLVM bytecode B and a safety property φ, and
llvm
outputs a tuple (Π , V) for each detected vulnerability. Π contains
bug bug
the path predicate. V contains source-level information about the
detected vulnerability.
DBA: (B , (Π , V)) → R.
gcc bug
DBA performs dynamic binary analysis on the target binary B with a
gcc
concrete buggy input and extracts runtime information R.
Exploit-Gen: (Π , R) → Π ∧Π .
bug bug exploit
Exploit-Gen receives a tuple with the path predicate of the bug (Π )
bug
and runtime information (R), and constructs a formula for a control flow
hijack exploit. The output formula includes constraints ensuring that: 1) a
possible program counter points to a user-determined location, and 2)
the location contains shellcode (Π ). The resulting exploit formula is
exploit
the conjunction of the two predicates.
Verify: (B , Π ∧Π ) → {ε, ⊥}.
gcc bug exploit
Verify takes in the target binary executable B and an exploit formula
gcc
Π ∧Π , and returns an exploit ε only if there is a satisfying
bug exploit
1695
8.10 AEG: Automatic Exploit Generation
answer. Otherwise, it returns ⊥.
The high-level algorithm for solving the AEG challenge:
Bug-Find: 以漏洞利用生成为目的的程序分析
Bug-Find finds bugs with symbolic program execution, which explores the
program state space one path at a time. However, there are an infinite number of
paths to potentially explore. AEG addresses this problem with two novel
algorithms:
First, we present a novel technique called preconditioned symbolic execution
that constrains the paths considered to those that would most likely include
exploitable bugs.
Second, we propose novel path prioritization heuristics for choosing which
paths to explore first with preconditioned symbolic execution.
Preconditioned Symbolic Execution
Preconditioned symbolic execution is a novel method to target symbolic execution
towards a certain subset of the input state space. The state space subset is
determined by the precondition predicate (Π ); inputs that do not satisfy Π
prec prec
will not be explored.
In AEG, we have developed and implemented 4 different preconditions for
efficient exploit generation:
1696
8.10 AEG: Automatic Exploit Generation
None. There is no precondition and the state space is explored as normal.
Known Length. The precondition is that inputs are of known maximum length.
We use static analysis to automatically determine this precondition.
Known Prefix. The precondition is that the symbolic inputs have a known
prefix.
Concolic Execution. Concolic execution can be viewed as a specific form of
preconditioned symbolic execution where the precondition is specified by a
single program path as realized by an example input.
Consider the example program above. Suppose that the input buffer contains
42 symbolic bytes. Lines 3-4 represent a tight symbolic loop that will eventually
spawn 42 different interpreters with traditional symbolic execution, each one
having a different path predicate. Each path predicate will describe a different
condition about the string length of the symbolic input buffer.
Preconditioned symbolic execution avoids examining the loop iterations that will
not lead to a buffer overflow by imposing a length precondition. Thus, we only
need a single interpreter to explore the entire loop.
Path Prioritization: Search Heuristics
All pending paths are inserted into a priority queue based on their ranking, and the
next path to explore is always drawn out of the priority queue. We present two
new path prioritization heuristics we have developed: buggy-path-first and loop
exhaustion.
Buggy-Path-First. Exploitable bugs are often preceded by small but
unexploitable mistakes. The observation that one bug on a path means
subsequent statements are also likely to be buggy (and hopefully exploitable)
led us to the buggy-path-first heuristic.
Loop Exhaustion. The loop-exhaustion strategy gives higher priority to an
1697
8.10 AEG: Automatic Exploit Generation
interpreter exploring the maximum number of loop iterations, hoping that
computations involving more iterations are more promising to produce bugs
like buffer overflows.
Environment Modelling: Vulnerability Detection in
the Real World
AEG models most of the system environments that an attacker can possibly use
as an input source. Therefore, AEG can detect most security relevant bugs in real
programs. Our support for environment modeling includes file systems, network
sockets, standard input, program arguments, and environment variables.
Additionally, AEG handles most common system and library function calls.
DBA, Exploit-Gen and Verify: 漏洞利用生成
DBA: Dynamic Binary Analysis
DBA takes in three inputs: 1) the target executable (Bgcc) that we want to exploit;
2) the path constraints that lead up to the bug (Πbug); and 3) the names of
vulnerable functions and buffers.
It then outputs a set of runtime information: 1) the address of the return address of
the vulnerable function (&retaddr); 2) the address of the vulnerable buffer where
the overwrite starts (bufaddr); and 3) the stack memory contents between them
(µ).
Exploit-Gen
Exploit-Gen takes in two inputs to produce an exploit: the unsafe program state
containing the path constraints (Πbug) and low-level runtime information R.
It generates exploit formulas (Πbug∧Πexploit) for four types of exploits: 1) stack-
overflow return-to-stack, 2) stack-overflow returnto-libc, 3) format-string return-to-
stack, 4) format-string return-to-libc.
1698
8.10 AEG: Automatic Exploit Generation
Verify
VERIFY takes in two inputs: 1) the exploit constraints Π ∧Π , and 2) the
bug exploit
target binary. It outputs either a concrete working exploit, i.e., an exploit that
spawns a shell, or ⊥, if AEG fails to generate the exploit.
1699
8.11 Address Space Layout Permutation (ASLP): Towards Fine-Grained
Randomization of Commodity Software
8.11 Address Space Layout Permutation
(ASLP): Towards Fine-Grained
Randomization of Commodity Software
paper
简介
1700
8.12 ASLR on the Line: Practical Cache Attacks on the MMU
8.12 ASLR on the Line: Practical Cache
Attacks on the MMU
paper
简介
1701
8.13 New Frontiers of Reverse Engineering
8.13 New Frontiers of Reverse Engineering
paper
What is your take-away message from this
paper
This paper briefly presents an overview of the field of reverse engineering,
reviews main achievements and areas of application, and highlights key open
research issues for the future.
What are motivations for this work
What is reverse engineering
The term reverse engineering was defined as:
the process of analyzing a subject system to
(i) identify the system's components and their inter-relationships and
(ii) create representations of the system in another form or at a higher level of
abstraction.
So, the core of reverse engineering consists two parts:
1. deriving information from the available software artifacts
2. translating the information into abstract representations more easily
understandable by humans
Why we need reverse engineering
Reverse engineering is a key supporting technology to deal with systems that
have the source code as the only reliable representation.
1702
8.13 New Frontiers of Reverse Engineering
Previous reverse engineering
Reverse engineering has been traditionally viewed as a two step process:
information extraction and abstraction.
The discussion of the main achievements of reverse engineering in last 10 years
is organized three main threads:
program analysis and its applications
design recovery
1703
8.13 New Frontiers of Reverse Engineering
software visualization
Program analysis and its applications
Several analysis and transformation toolkits provide facilities for parsing the
source code and performing rule-based transformations.
alternative source code analysis approaches
extract fact even without the need for a thorough source code parsing,
relevant information from the source code
incorporating reverse engineering techniques into development environments
or extensible editors
deal with peculiarities introduced by object-oriented languages
deal with the presence of clones in software systems
Architecture and design recovery
the diffusion of object-oriented languages and UML introduced the need of
reverse engineering UML models from source code
identifying design patterns into the source code aims at promoting reuse and
assessing code quality
techniques using static analysis, dynamic analysis, and their combination,
were proposed
the need for reverse engineering techniques tied to Web Applications
Visualization
Software visualization is a crucial step for reverse engineering.
straightforward visualization: UML diagrams, state machines, CFGs
highlight relevant information at the right level of detail
Future trends of reverse engineering
program analysis
1704
8.13 New Frontiers of Reverse Engineering
high dynamicity
many programming languages widely used today allow for high
dynamicity which make analysis more difficult
e.g. reflection in Java that can load classes at run-time
cross-language applications
more cross-language applications today
e.g. Web Applications: HTML, SQL, scripts
mining software repositories
a new, important research area
So, Reverse engineering research has highlighted the dualism between static and
dynamic analysis and the need to complement the two techniques, trying to
exploit the advantages of both and limit their disadvantages. And recent years the
third dimension named historical analysis added.
static analysis
when it is performed, within a single system snapshot, on software
artifacts without requiring their execution
must deal with different language variants and non-compilable code
fast, precise, and cheap
many peculiarities of programming languages, such as pointers and
polymorphism, or dynamic classes loading, make static analysis difficult
and sometimes imprecise
dynamic analysis
when it is performed by analyzing execution traces obtained from the
execution of instrumented versions of a program, or by using an
execution environment able to capture facts from program execution
extracts information from execution traces
since it depends on program inputs, it can be incomplete
challenge: ability to mine relevant information from execution traces
(execution traces tend to quickly become large and unmanageable, thus
a relevant challenge is to filter them and extract information relevant for
the particular understanding task being performed)
historical analysis
when the aim is to gain information about the evolution of the system
under analysis by considering the changes performed by developers to
software artifacts, as recorded by versioning systems
1705
8.13 New Frontiers of Reverse Engineering
design recovery
design paradigms
a lot work needs to be done in particular for what regards the extraction
of dynamic diagrams and also of OCL pre and post- conditions
new software architectures that have characteristics of being extremely
dynamic, highly distributed, self-configurable and heterogeneous
e.g. Web 2.0 applications
incomplete, imprecise and semi-automatic
the reverse engineering machinery should be able to learn from expert
feedbacks to automatically produce results
e.g. machine learning, meta-heuristics and artificial intelligence
visualization
Effective visualizations should be able to :
1. show the right level of detail a particular user needs, and let the user choose
to view an artifact at a deeper level or detail, or to have a coarse-grain, in-the-
large, view
2. show the information in a form the user is able to understand. Simpler
visualizations should be favored over more complex ones, like 3D or
animations, when this does not necessarily bring additional information that
cannot be visualized in a simpler way
Reverse engineering in emerging software
development scenarios
The challenges for reverse engineering:
1. on the one hand, the analysis of systems having high dynamism, distribution
and heterogeneity and, on the other hand, support their development by
providing techniques to help developers enable mechanisms such as
automatic discovery and reconfiguration
2. the need for a full integration of reverse engineering with the development
process, which will benefit from on-the-fly application of reverse engineering
1706
8.13 New Frontiers of Reverse Engineering
techniques while a developer is writing the code, working on a design model,
etc.
Final
1707
8.14 Who Allocated My Memory? Detecting Custom Memory Allocators in C
Binaries
8.14 Who Allocated My Memory? Detecting
Custom Memory Allocators in C Binaries
paper
简介
1708
8.15 EMULATOR vs REAL PHONE: Android Malware Detection Using Machine
Learning
8.15 EMULATOR vs REAL PHONE: Android
Malware Detection Using Machine
Learning
paper
What is your take-away message from this