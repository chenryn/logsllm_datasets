### Integration of Algorithm 3 and Algorithm 4

When integrating Algorithm 3 with Algorithm 4, the function \( S_{rp} \) called in Algorithm 3 corresponds to line 7 of Algorithm 4. Similarly, the function \( T_{rp} \) called in Algorithm 3 refers to lines 9 through 17 of Algorithm 4. The functions \( S_r \) and \( T_r \) in Algorithm 4 correspond to the sending phase and state transition phase of Algorithm 1, respectively.

### Minimal Duration of a Good Period

We now compute the minimal duration of a good period, ensuring that \( otr(\pi_0) \) is not a trivial alternative. To achieve this, we consider the following steps:

1. **Initial Macro-Rounds:**
   - We need \( f + 1 \) rounds to satisfy \( P_k(-, -, -) \), which implements one macro-round to achieve \( P_{su}(-, -, -) \) (as per Algorithm 4).
   
2. **Additional Round:**
   - After the initial macro-rounds, we need one additional round to satisfy \( P_k(-, -, -) \).

In the worst-case scenario, the good period starts immediately after the beginning of a macro-round. In this case, \( P_{su}(-, -, -) \) requires two macro-rounds. Since each macro-round consists of \( f + 1 \) rounds, the worst-case scenario requires \( 2(f + 1) \) rounds. Adding the one additional round from step 2, the total minimal duration is \( 2f + 3 \) rounds.

Applying Theorem 6, the minimal length of a good period is:
\[
(2f + 5)[(2\delta + n\phi + \phi)\phi + \delta + 2n\phi + 2\phi] + (2\delta + n + n\phi + \phi)\phi
\]

### Algorithm 4: Ensuring \( P_{su}(\pi_0, -, -) \) with \( P_k(\pi_0, -, -) \)

**Variables:**
- `Listen_p`: Initially set to \(\Pi\) (set of processes)
- `NewHO_p`: Set of processes
- `R_p`: Set of messages
- `Known_p`: Initially set to \{h\(S_p(sp), p\)\} (set of message-process pairs)

**Round r:**

1. **Sending Phase \( S_r \):**
   - Send `Known_p` to all processes.
   
2. **Transition Phase \( T_r \):**
   - Update `Listen_p` by intersecting it with the set of processes from which `Known_q` was received.
   - If \( r \not\equiv 0 \pmod{f + 1} \):
     - Update `Known_p` by adding `Known_q` for all processes \( q \) in `Listen_p`.
   - Otherwise:
     - Set `NewHO_p` to the set of processes \( s \) such that \( h-, si \in Known_q \) for \( n - f \) processes \( q \) in `Listen_p`.
     - Set `R` to \{hmsg, si | s ∈ NewHO_p\}.
     - Reset `Listen_p` to \(\Pi\).
     - Reset `Known_p` to \{h\(S_p(sp), p\)\}.
     - Return (R, sp).

### Related Work

This paper addresses several issues in the literature and highlights key differences. The Heard-Of (HO) model, proposed in [6], establishes relationships among various communication predicates and identifies the weakest predicate for solving consensus. It also expresses well-known consensus algorithms and new ones in the HO model, demonstrating its expressiveness.

The implementation of communication predicates and the ability to handle both crash-stop and crash-recovery models uniformly are not addressed in [6]. In [7], the HO model is used to express a new consensus algorithm.

The HO model generalizes the round model of [12] but does not reintroduce failure detectors as in [14] and [17]. The implementation in [12] relies on a distributed clock synchronization algorithm, unlike our approach.

It has been claimed that the partial synchrony model has been superseded by the failure detector model [5]. However, this claim is only partially correct. Models extending the failure detector model, such as [14] and [17], inherit limitations of failure detectors.

The performance of consensus following asynchronous periods is considered in [11] and [17]. [17] focuses on the number of rounds, while [11] considers time. [17] suggests that quantifying the time to reach round synchronization after system stabilization is an interesting subject, which we address here. [11] and [17] define synchronous periods based on link properties, assuming processes are always synchronous. Our definition of \(\pi_0\)-arbitrary good periods allows for a subset of processes to be synchronous, opening the door to analyzing durations with Byzantine processes. Our algorithm shares similarities with Byzantine clock synchronization in [23], but [23] assumes reliable links, and adapting it to message loss results in the algorithm from [12].

The notion of good and bad periods appears in [8], but the length of a good period for consensus is not addressed. Restricting the scope of synchrony, as in our good periods, has been considered in other settings, such as [15] and [2, 3], but these papers implicitly restrict synchrony to links, not processes.

The Paxos algorithm [19] works under the crash-recovery model with stable storage but does not assume reliable links. The condition for liveness is not expressed by a clean abstraction as in the HO model. The same applies to [11], where the system must stabilize before reaching consensus. With \(\pi_0\)-arbitrary good periods, system stabilization is not required, providing a clean separation between the HO algorithmic layer and the predicate implementation layer, allowing for finer timing analysis.

The notion of transmission faults was suggested in [21], but only in synchronous systems. Varying quorums for "init" and round messages in the context of \(\pi_0\)-arbitrary good periods was first done in [20, 24] for other fault scenarios.

### Conclusion

Abstractions are essential for solving complex problems. Failure detectors provide a useful abstraction for consensus, explaining their widespread adoption. However, transient and dynamic faults highlight the limitations of failure detectors. The HO model offers a different abstraction, "communication predicates," which handles static, dynamic, transient, and permanent faults uniformly, overcoming the limitations of failure detectors. The HO model also allows for concise and elegant expression of consensus algorithms.

Like failure detectors, the HO model distinguishes between the "algorithmic" layer and the "abstraction" layer. While failure detectors are based on process crash faults, communication predicates are based on the more general notion of transmission faults, defining a larger "playground" for addressing more issues. Specifically, the communication predicate approach has allowed us to quantify the time to reach round synchronization after system stabilization, answering the question raised in [17].

### Acknowledgments

We thank Bernadette Charron-Bost, Nicolas Schiper, Martin Biely, Josef Widder, Nuno Santos, Sergio Mena, and the anonymous reviewers for their valuable comments, which helped improve the paper.

### References

[1] M. Aguilera, W. Chen, and S. Toueg. Failure detection and consensus in the crash-recovery model. Distributed Computing, 13(2):99–125, 2000.

[2] M. K. Aguilera, C. Delporte-Gallet, H. Fauconnier, and S. Toueg. On implementing Omega with weak reliability and synchrony assumptions. In Proc. PODC’03. ACM Press, 2003.

[3] M. K. Aguilera, C. Delporte-Gallet, H. Fauconnier, and S. Toueg. Communication-efficient leader election and consensus with limited link synchrony. In Proc. PODC’04, pages 328–337. ACM Press, 2004.

[4] R. Boichat, P. Dutta, S. Frolund, and R. Guerraoui. Reconstructing Paxos. ACM SIGACT News, 34(1):47–67, 2003.

[5] T. D. Chandra and S. Toueg. Unreliable failure detectors for reliable distributed systems. Journal of ACM, 43(2):225–267, 1996.

[6] B. Charron-Bost and A. Schiper. The “Heard-Of” model: Unifying all benign faults. Technical Report TR, EPFL, June 2006.

[7] B. Charron-Bost and A. Schiper. Improving fast Paxos: being optimistic with no overhead. In Pacific Rim Dependable Computing, Proceedings, 2006.

[8] F. Cristian and C. Fetzer. The timed asynchronous distributed system model. IEEE Transactions on Parallel and Distributed Systems, 10(6):642–657, 1999.

[9] A. Doudou and A. Schiper. Muteness Failure Detectors for Consensus with Byzantine Processes. TR 97/230, EPFL, Dept d’Informatique, October 1997.

[10] A. Doudou and A. Schiper. Muteness detectors for consensus with Byzantine processes (Brief Announcement). In Proc. PODC’98, Puerto Vallarta, Mexico, July 1998.

[11] P. Dutta, R. Guerraoui, and L. Lamport. How fast can eventual synchrony lead to consensus? In Proc. DSN’05, pages 22–27, Los Alamitos, CA, USA, 2005.

[12] C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in the presence of partial synchrony. Journal of ACM, 35(2):288–323, April 1988.

[13] M. Fischer, N. Lynch, and M. Paterson. Impossibility of Distributed Consensus with One Faulty Process. Journal of ACM, 32:374–382, April 1985.

[14] E. Gafni. Round-by-round fault detectors: Unifying synchrony and asynchrony. In Proc of the 17th ACM Symp. Principles of Distributed Computing (PODC), pages 143–152, Puerto Vallarta, Mexico, June-July 1998.

[15] R. Guerraoui and A. Schiper. “Gamma-accurate” failure detectors. In Proceedings of the 10th International Workshop on Distributed Algorithms (WDAG’96), pages 269–286, London, UK, 1996. Springer-Verlag.

[16] M. Hutle and A. Schiper. Communication predicates: A high-level abstraction for coping with transient and dynamic faults. Technical Report LSR-REPORT-2006-006, EPFL, 2006. http://infoscience.epfl.ch/search.py?recid=97290.

[17] I. Keidar and A. Shraer. Timeliness, failure-detectors, and consensus performance. In Proc. PODC’06, pages 169–178, New York, NY, USA, 2006. ACM Press.

[18] K. P. Kihlstrom, L. E. Moser, and P. M. Melliar-Smith. Solving consensus in a Byzantine environment using an unreliable fault detector. In Proceedings of the International Conference on Principles of Distributed Systems (OPODIS), pages 61–75, Chantilly, France, Dec. 1997.

[19] L. Lamport. The Part-Time Parliament. ACM Trans. on Computer Systems, 16(2):133–169, May 1998.

[20] G. Le Lann and U. Schmid. How to implement a timer-free perfect failure detector in partially synchronous systems. Technical Report 183/1-127, Technische Universität Wien, Department of Automation, Jan. 2003.

[21] N. Santoro and P. Widmayer. Time is not a healer. In Proceedings of the 6th Symposium on Theor. Aspects of Computer Science, pages 304–313, Paderborn, Germany, 1989.

[22] F. B. Schneider. What Good are Models and What Models are Good. In S. Mullender, editor, Distributed Systems, pages 169–197. ACM Press, 1993.

[23] T. K. Srikanth and S. Toueg. Optimal clock synchronization. Journal of the ACM, 34(3):626–645, 1987.

[24] J. Widder. Booting clock synchronization in partially synchronous systems. In Proceedings of the 17th International Conference on Distributed Computing (DISC’03), pages 121–135, 2003.