When combining Algorithm 3 and Algorithm 4, the func-
tion Srp
p ( ) called in Algorithm 3 refers to line 7 of Algo-
rithm 4. Similarly, the function T rp
p ( ) called in Algorithm 3
refers to the lines 9 to 17 of Algorithm 4. The functions Sr
p
and T r
p in Algorithm 4 refer to the sending phase and state
transition phase of Algorithm 1.
We compute now the minimal duration of a good period
otr (π0) is not a
otr (π0) (considering instead P 1/1
to ensure P 2
valuable alternative here):
1. We need ﬁrst f + 1 rounds that satisfy Pk (−, −, −)
satisﬁes
one macro-round
that
implement
to
Psu (−, −, −) (Algorithm 4).
2. Then we need one round that satisﬁes Pk (−, −, −).
For 1, the worst case happens when the good period starts
immediately after the beginning of a macro-round.
In
this worst case, Psu (−, −, −) requires two macro-rounds.
Since one macro-round consists of f +1 rounds, in the worst
case we need 2(f +1) rounds. Item 2 adds one round. So we
end up with a minimal duration of 2f + 3 rounds. Applying
Theorem 6, we get the minimal length of a good period:
(2f +5)[(2δ+nφ+φ)φ+δ+2nφ+2φ]+(2δ+n+nφ+φ)φ.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:59 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Algorithm 4 Ensuring Psu (π0, −, −) with Pk (π0, −, −)
(adapted from [6]).
1: Variables:
2:
Listen p, initially Π
NewHO p
3:
Rp
4: Known p, initially {hS
p
{set of processes}
{set of processes}
(sp), pi}
{set of hmessage, processi }
5: Round r:
6:
Sr
p :
send hKnown pi to all processes
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
T r
p :
Listen p ← Listen p ∩ {q | hKnown qi received}
if r 6≡ 0 (mod f +1) then
Known p ← Known p ∪ Sq∈Listen
p
Known q
else
N ewHOp ← {s | h−, si ∈ Known q for n − f
processes q ∈ Listen p}
R ← {hmsg, si | s ∈ N ewHOp}
Rp
sp ← T
p
Listen p ← Π
Rp
Known p ← {hS
p
(sp), pi}
(R, sp)
5 Related work
The paper addresses several issues that appear in the lit-
erature. We now point out the key differences.
The HO model was proposed in [6]. The paper es-
tablishes relationship among several communication pred-
icates and identiﬁes the weakest predicate, among the class
of predicates with non-empty kernel rounds, for solving
consensus. The paper also expresses well-known consen-
sus algorithms (or variants) and new ones in the HO model,
with the goal of showing the expressiveness of the model.
The implementation of communication predicates is not ad-
dressed in [6], nor is the ability of the model to handle uni-
formly crash-stop and crash-recovery models, and the rea-
son for that. In [7] the HO model is used to express a new
consensus algorithm.
The HO model generalizes the round model of [12], but
does not reintroduce failure detectors as done in [14] and
in [17]. The implementation in [12], contrary to ours, ex-
plicitly refers to some “common notion of time” and relies
on a distributed clock synchronization algorithm.
It has been sometimes claimed that the partial syn-
chrony model has been superseded by the failure detector
model [5]. In out opinion this claim is only partially cor-
rect. The models that extend the failure detector model, e.g.,
[14, 17], all inherit from the limitations of failure detectors
pointed out in Section 1.
The issue of performance of consensus following asyn-
chronous periods is considered in [11, 17]. In [17] the fo-
cus is on number of rounds rather than time; [11] considers
time. Moreover, in [17] the authors write that being able
to quantify the time it takes the environment to reach round
synchronization after the system has stabilized is an inter-
esting subject for further studies. This question is answered
here. In [11] and [17] the synchronous period is deﬁned
only by properties of links: Processes are always considered
to be synchronous. This is in contrast to our deﬁnition of
π0-arbitrary good period, where only a subset of processes
are assumed to be synchronous. This deﬁnition opens the
door to the analysis of the duration of good periods with
Byzantine processes. Our algorithm shares some similari-
ties with the Byzantine clock synchronization of [23]. How-
ever, the algorithm in [23] assumes reliable links; adapting
the algorithm to message loss, we end up with the algorithm
of [12].
The notion of good and bad period appears in [8], but the
issue of the length of a good period for solving consensus
is not addressed. Restricting the scope of synchrony, as we
do in good periods, has been considered in other settings,
e.g., [15] and [2, 3]. However, in all these papers the issue
of synchrony is implicitly restricted to links (i.e., process
synchrony is not addressed). This is not the case in our
deﬁnition of π0-arbitrary good period.
The Paxos algorithm [19] does not assume reliable links
and, because of this, works under the crash-recovery model
with stable storage. However, the condition for liveness is
not expressed by a clean abstraction as done by communi-
cation predicates in the HO model (a consensus algorithm `a
la Paxos in the HO model can be found in [6]). The same
comment applies to [11], where the system must stabilize
before consensus is reached. System stabilization is not re-
quired with π0-arbitrary good periods: the HO model pro-
vides a clean separation of concerns between the HO algo-
rithmic layer and the predicate implementation layer, which
allows a ﬁner deﬁnition of good periods, and so a ﬁner tim-
ing analysis. As pointed out in Section 3, we have chosen
here an algorithm that is simpler than Paxos to illustrate as
simply as possible the approach based on communication
predicates.
The notion of transmission faults was suggested in [21],
however only in the context of synchronous systems. Vary-
ing the quorums for “init” and round messages — in the
context of π0-arbitrary good periods — was to our knowl-
edge done ﬁrst in [20, 24], but for other fault scenarios.
6 Conclusion
Abstractions are essential when solving difﬁcult prob-
lems. Failure detectors provide a nice abstraction for solv-
ing the difﬁcult consensus problem; this explains why they
have been widely adopted. However, transient and dynamic
faults show the limitations of the failure detector approach:
For example, solving consensus in the crash-stop model and
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:59 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007in the crash-recovery model leads to signiﬁcantly different
solutions. The HO model provides a different abstraction,
namely the “communication predicates”, which allow us to
handle uniformly static, dynamic, transient, and permanent
faults and so overcome the limitations of failure detectors.
Moreover, the HO model allows a nice and concise expres-
sion of consensus algorithms.
Similarly to failure detectors, solving consensus in the
HO model leads to distinguish two layers: The “algorith-
mic” layer and the “abstraction” layer (the layer at which
the abstraction is implemented). In the case of failure de-
tectors, the abstraction layer must ensure the properties of
the failure detectors, based on assumptions of the underly-
ing system. The same holds for communication predicates.
However, while communication predicates are based on the
very general notion of transmission faults, failure detector
assume the limited notion of process crash faults. The com-
munication predicate layer deﬁnes a larger “playground”
than the failure detector playground, in which more issues
can be addressed. Speciﬁcally, the communication predi-
cate approach has allowed us to bring an answer the ques-
tion raised in [17], about quantifying the time it takes to
reach round synchronization after the system has stabilized.
Acknowledgments We like to thank Bernadette Charron-
Bost, Nicolas Schiper, Martin Biely, Josef Widder, Nuno
Santos, Sergio Mena, and the anonymous reviewers for their
valuable comments that helped us to improve the paper.
References
[1] M. Aguilera, W. Chen, and S. Toueg. Failure detection and
consensus in the crash-recovery model. Distributed Com-
puting, 13(2):99–125, 2000.
[2] M. K. Aguilera, C. Delporte-Gallet, H. Fauconnier, and
S. Toueg. On implementing Omega with weak reliabil-
ity and synchrony assumptions. In Proc. PODC’03. ACM
Press, 2003.
[3] M. K. Aguilera, C. Delporte-Gallet, H. Fauconnier, and
S. Toueg. Communication-efﬁcient leader election and con-
sensus with limited link synchrony.
In Proc. PODC’04,
pages 328–337. ACM Press, 2004.
[4] R. Boichat, P. Dutta, S. Frolund, and R. Guerraoui. Recon-
structing Paxos. ACM SIGACT News, 34(1):47–67, 2003.
[5] T. D. Chandra and S. Toueg. Unreliable failure detectors for
reliable distributed systems. Journal of ACM, 43(2):225–
267, 1996.
[6] B. Charron-Bost and A. Schiper. The “Heard-Of” model:
Unifying all benign faults. Technical Report TR, EPFL, June
2006.
[7] B. Charron-Bost and A. Schiper. Improving fast paxos: be-
ing optimistic with no overhead. In Paciﬁc Rim Dependable
Computing, Proceedings, 2006.
[8] F. Cristian and C. Fetzer. The timed asynchronous dis-
tributed system model. IEEE Transactions on Parallel and
Distributed Systems, 10(6):642–657, 1999.
[9] A. Doudou and A. Schiper. Muteness Failure Detectors for
Consensus with Byzantine Processes. TR 97/230, EPFL,
Dept d’Informatique, October 1997.
[10] A. Doudou and A. Schiper. Muteness detectors for con-
sensus with byzantine processes (Brief Announcement). In
Proc. PODC’98, Puerto Vallarta, Mexico, July 1998.
[11] P. Dutta, R. Guerraoui, and L. Lamport. How fast can even-
tual synchrony lead to consensus? In Proc. DSN’05, pages
22–27, Los Alamitos, CA, USA, 2005.
[12] C. Dwork, N. Lynch, and L. Stockmeyer. Consensus in the
presence of partial synchrony. Journal of ACM, 35(2):288–
323, April 1988.
[13] M. Fischer, N. Lynch, and M. Paterson.
Impossibility of
Distributed Consensus with One Faulty Process. Journal of
ACM, 32:374–382, April 1985.
[14] E. Gafni. Round-by-round fault detectors: Unifying syn-
In Proc of the 17th ACM Symp.
chrony and asynchrony.
Principles of Distributed Computing (PODC), pages 143–
152, Puerto Vallarta, Mexico, June-July 1998.
[15] R. Guerraoui and A. Schiper.
”gamma-accurate” failure
detectors.
In Proceedings of the 10th International Work-
shop on Distributed Algorithms (WDAG’96), pages 269–
286, London, UK, 1996. Springer-Verlag.
[16] M. Hutle and A. Schiper. Communication predicates: A
high-level abstraction for coping with transient and dynamic
faults. Technical Report LSR-REPORT-2006-006, EPFL,
2006. http://infoscience.epﬂ.ch/search.py?recid=97290.
[17] I. Keidar and A. Shraer. Timeliness, failure-detectors, and
consensus performance. In Proc. PODC’06, pages 169–178,
New York, NY, USA, 2006. ACM Press.
[18] K. P. Kihlstrom, L. E. Moser, and P. M. Melliar-Smith. Solv-
ing consensus in a byzantine environment using an unre-
liable fault detector.
In Proceedings of the International
Conference on Principles of Distributed Systems (OPODIS),
pages 61–75, Chantilly, France, Dec. 1997.
[19] L. Lamport. The Part-Time Parliament. ACM Trans. on
Computer Systems, 16(2):133–169, May 1998.
[20] G. Le Lann and U. Schmid. How to implement a timer-
free perfect failure detector in partially synchronous sys-
tems. Technical Report 183/1-127, Technische Universit¨at
Wien, Department of Automation, Jan. 2003.
[21] N. Santoro and P. Widmayer. Time is not a healer. In Pro-
ceedings of the 6th Symposium on Theor. Aspects of Com-
puter Science, pages 304–313, Paderborn, Germany, 1989.
[22] F. B. Schneider. What Good are Models and What Mod-
els are Good. In S. Mullender, editor, Distributed Systems,
pages 169–197. ACM Press, 1993.
[23] T. K. Srikanth and S. Toueg. Optimal clock synchronization.
Journal of the ACM, 34(3):626–645, 1987.
[24] J. Widder. Booting clock synchronization in partially syn-
chronous systems. In Proceedings of the 17th International
Conference on Distributed Computing (DISC’03), pages
121–135, 2003.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:50:59 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007