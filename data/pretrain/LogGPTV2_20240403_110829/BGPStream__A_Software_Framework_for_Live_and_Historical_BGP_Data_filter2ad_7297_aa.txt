title:BGPStream: A Software Framework for Live and Historical BGP Data
Analysis
author:Chiara Orsini and
Alistair King and
Danilo Giordano and
Vasileios Giotsas and
Alberto Dainotti
A Framework for Live Software Upgrade
Lizhou Yu1
Gholamali C. Shoja
 Hausi A. M ller
Anand Srinivasan2
Department of Computer Science
University of Victoria
P.O. BOX 3055, STN CSC
Victoria B.C. Canada V8W 3P6
PI:EMAIL {gshoja, hausi}@cs.uvic.ca   PI:EMAIL
Abstract
1.  Introduction
The demand for continuous service in mission- and safety-
critical  software  applications  is  increasing.    For  these
applications,  it  is  unacceptable  to  shutdown  and  restart
the system during software upgrade. This paper examines
issues relating to on-line upgrades for mission- and safety-
critical  software  applications.  We  believe  that  a  dynamic
architecture  and  communication  model  provides  an
excellent  foundation  for  runtime  software  evolution.  To
solve  the  problems  mentioned  above,  we  designed  and
implemented  a  framework,  which  addresses  four  main
areas:  dynamic  architecture  and  communication  model,
reconfiguration  management,  the  upgrade  protocol,  and
the upgrade technique. The framework can be used for on-
line  upgrading  of  multi-task  software  applications,  which
provide multiple mission-critical services.
In  the  framework  discussed  in  the  paper,  the  ability  to
make runtime modifications is considered at the  software
architecture-level.  The  dynamic  architecture  and
communication  model  makes  it  possible  for  software
applications to add, remove, and hot swap modules on the
fly.  The  transition  scenario  is  specified  by  the  upgrade
protocol. The framework also provides the mechanism for
maintaining  state  consistency.  In  order  to  ensure  a
reliable upgrade, a two-phase commit protocol is utilized
to implement the atomic upgrade transactions. In addition,
a  command  line  interface  facilitates  the  reconfiguration
management.  A  simulation  study  of 
the  proposed
framework  was  carried  out  for  live  software  upgrade  of
several  practical  applications.  The  results  of 
the
simulation are also presented.
1  At present with Fujitsu Network Communication, Texas, U.S.A.
2  Formerly  at  Nortel  networks  Ottawa,  Canada.  At  present  with  Sion
International, Ottawa, Canada
The  demand  for  continuous  service  in  mission-  and
safety-critical  software  applications,  such  as  Internet
infrastructure,  aerospace, 
telecommunication,  military
defense  and  medical  applications,  is  expanding.  Live
software upgrade techniques, which are deployed  for  on-
line maintenance and upgrades, can meet the demand for
high levels of system availability and serviceability.
The  evolutionary  change  of  software  is  unavoidable
due  to  changes  in  the  environment  or  in  the  application
requirements  that  cannot  be  completely  predicted  during
the design phase, or due to bug-correction or enhancement
of  functionality.    For  these  mission-  and  safety-critical
applications, it is unacceptable to shutdown and restart the
system  during  software  upgrade,  since  monetary  loss,
interruption of service, and damage can be caused with a
traditional 
network
communications industry, the criteria for high availability
require that the services must be provided 24 hours a day,
7 days a week with near 99.99% uptime. The objective of
on-line software upgrade  is  to  be  able  to  add,  remove  or
replace  any  relevant  components  without  significantly
affecting other parts of the application.
installation 
process. 
In 
the 
Upgrading  a  non-stop  application  is  a  complex
process. The new and the old component may differ in the
functionality,  interface,  and  performance.  Only  selected
components of an application are changed while the other
parts  of  the  application  continue  to  function.  It  is
important to safeguard the software application’s integrity
when  changes  are  implemented  at  runtime.  A  runtime
software upgrade cannot be done at any time, since it may
halt  or  crash  the  application.  The  techniques  of  runtime
upgrade are quite dependent on the operating system and
the  programming  language  in  which  the  application  is
written.  The  ability  to  deal  with  failure  of  upgrade
transactions significantly influences the  applicability  of  a
live software upgrade technique.
Proceedings of the 13 th International Symposium on Software Reliability Engineering (ISSRE’02) 
1071-9458/02 $17.00 © 2002 IEEE 
We  believe 
that  a  dynamic  architecture  and
communication  model  provides  an  excellent  foundation
for  runtime  software  evolution.  To  solve  the  problems
mentioned  above,  we  designed  and 
implemented  a
framework,  which  addresses  four  main  areas:  dynamic
architecture  and  communication  model,  reconfiguration
management,  the  upgrade  protocol,  and  the  upgrade
technique.  The  framework  can  be  used  for  on-line
upgrading  of  multi-task  software  applications,  which
provide multiple mission-critical services.
This  paper  is  organized  in  the  following  manner:
Section  2  compares  the  related  research;  Section  3
outlines  the  design  of  a  dynamic  software  upgrade
framework;  Section  4  examines  some  implementation
issues  related  to  the  framework;  Section  5  describes  the
simulation  results;  Section  6  makes  the  discussion  and
presents 
finally,  Section  7
summarizes the paper.
the  experience;  and, 
2.  Related work
This  section  discusses  selected  approaches  to  the
problem of live software upgrade.
Hardware-based  approach:  In  a  primary-standby
system  [1],  two  devices  run  the  equivalent  program  and
back each other up for  continuity  of  service.  To  perform
the update, the first device is stopped at a safe point in the
program and simultaneously the second one is started up.
After  the  first  one  is  upgraded,  it  takes  the  role  of  the
second device. So the second device is taken off-line and
is ready to be upgraded as well.
language 
for 
is 
describing 
Component-based  dynamic  architecture:  Darwin,
is  a
proposed  by  Jeff  Kramer  and  Jeff  Magee, 
dynamic
configuration 
architecture  [2].  It  is  a  declarative  language,  which  is
intended  to  specify  the  structure  of  distributed  systems
composed 
from  diverse  components  using  diverse
interaction  mechanisms.  It  separates  the  description  of
structure  from  that  of  computation  and  interaction.  C2-
style 
component-based
architecture,  which  highlights  the  role  of  connectors  in
supporting runtime change [3][4]. Connectors are explicit
entities 
together  and  act  as
mediators  among  them.  Components  communicate  by
through  connectors.
passing  asynchronous  messages 
for  adding  and
Connectors  provide  a  mechanism 
modifying  component  bindings 
to  support
reconfiguration.
that  bind  components 
architecture 
in  order 
another 
Process-based  approach:  Deepak  describes  an
approach  to  modeling  change  at  statement  level  for  a
simple  imperative  programming  language  [5].  The  state
transfer  takes  place  when  the  stack  is  guaranteed  to
contain no routine, which  is  to  be  changed.    The  replace
module then copies the data and stack of the first process
onto  the  second  one.  The  machine  registers  are  copied
next.
Analytic  redundancy  based  approach:  Hercules  [6]
and  Simplex  [7][8]  permit  safe  on-line  upgrading  of
software  despite  residual  errors  in  the  new  components.
Analytic  redundancy  facilitates  extensive  testing  for
reliable incremental evolution of safety critical systems. It
focuses  on  how  to  rollback  when  a  new  unit  does  not
satisfy  explicit  performance  and  accuracy  requirements
after replacement. However, it does not illustrate well how
to deal with the failure during the upgrade transition.
Distributed  object-based  approach:  In  CORBA  [9]
and  COM+  [10],  client  IDL  stubs  and  server  IDL
skeletons  are  generated  at  the  compilation  of  IDL
interface so that a client object can transparently invoke a
method  on  a  server  object  across  the  network.  Eternal
[11][12]  extends  the  CORBA  standard  with  the  object
replication and fault tolerance. The method invocation will
be handled by a group of objects, so that if in a distributed
application  one  replica  object  fails  or  is  being  upgraded,
another  object 
to  operate  normally.  The
intermediate  code  can  be  generated  to  facilitate  the  live
upgrade  after  comparison  of  the  versions  of  class.  This
approach  requires  basic  CORBA  architecture,  reliable
group  communication  such  as  totally  ordered  protocol,
and  frequent  checkpoint  mechanism  in  order  to  maintain
the  state  consistency  in  the  object  replicas  during  the
running of CORBA applications.
is  able 
the 
from  computing,  and 
As  indicated  above,  researchers  have  employed
different  tactics  to  solve  the  problem  of  live  software
upgrade. The primary standby method relies on redundant
hardware  and  software.  Dynamic  architecture  and
dynamic  language  facilitate  separation  of  component
communication 
they  enable
reconfiguration  and 
incremental  evolution  of
application  software.  The  process-based  and  procedure-
based  approaches  achieve  run-time  change 
through
indirection  of  function  call  and  state  transfer  between
processes.  Analytic  redundancy  enables  on–line  testing
and  reliable  upgrading.  The  distributed  object-based
approach  can  be  implemented  via  extensions  of  CORBA
standard  and  object  replication.  In  next  section,  a
framework based on a unique dynamic architecture and an
upgrade protocol is proposed, which provides a novel and
integrated  solution 
live  software  upgrade.  This
framework 
software
applications  to  perform  live  upgrade  at  software  module
level in a centralized environment.
for  multi-task 
is  appropriate 
to 
Proceedings of the 13 th International Symposium on Software Reliability Engineering (ISSRE’02) 
1071-9458/02 $17.00 © 2002 IEEE 
3.  A dynamic software upgrade framework
3.1  Overview
Figure  1  depicts  a  dynamic  software  upgrade
framework,  which  provides  a  solution  to  deal  with
upgrading  non-stop  applications  at  run-time.  It  can  be
divided  into  two  parts.  The  first  part  is  the  dynamic
configuration  service,  which  includes  a  Command  Line
Interface, a Software Upgrader, a Name Service, an Event
Manager,  a  Version-control  Repository  and  a  Module-
Proxy.  The  dynamic  modules,  which  consist  of  module-
implementations,  constitute  the  second  part.  Dynamic
modules are those upgradeable components, which can be
disabled, enabled, loaded, unloaded, and hot swapped.
3.2  Dynamic Architecture and Communication
Model
 A dynamic architecture described as follows provides
an  ability  to  change  module  interaction  and  dependency
and notify the rest of software components of the change
of a module.
Dynamic configuration service
Command Line Interface
Software Upgrader
Name Service
Event Manager
Version-control Repository
Module-Proxy
Module-
Implementation
Module-
Implementation
Module-
Implementation
Dynamic Module
Figure 1. A dynamic software upgrade framework
3.2.1  The  addressing  problem  and  the  decomposition
of  modules.  Usually,  modules  communicate  with  each
other  through  message  passing.  In  direct  addressing,  the
sender  needs  to  know  specific  destination  reference.
However, after an existing module is replaced with a new
one, re-linking other modules with the new one becomes a
big  issue.  The  alternative  is  indirect  addressing.  In  this
case, the messages are not sent directly from the sender to
the receiver, but instead to a well-known port, which has a
shared  data  structure  consisting  of  queues  that  can
temporarily hold messages. Using indirect addressing can
decouple  the  sender  and  the  receiver,  providing  great
flexibility in dynamically updating the existing modules.
To  extend  indirect  addressing,  we  split  an  ordinary
module into two parts. One component is a module-proxy
restricted  to  one  per  module;  the  other  is  a  module-
implementation.  A  module-proxy  is  used  for  minimizing
coupling  between  modules.  This  idea  is  similar  to  the
notion  of  decoupling  definition  and  implementation  of  a
module  in  some  programming  languages  and  distributed
architectures.  (e.g.,  Modula-2,  ADA,  C++,  CORBA,
COM+).  Since 
in  a  non-
distributed environment, the purpose of proxy is to prevent
the implementation modules from directly referencing one
another  during  local  communication.  When  a  module-
implementation  is  in  the  Service  state,  its  module-proxy
forwards  all  the  incoming  requests  to  it  as  depicted  in
Figure 2.
the  framework  operates 
Module
A
Module
B
Module C
Module
 Proxy
Module
Implementation
Figure 2. Communication among modules
3.2.2  Module-proxy  and  module-implementation.  A
module-proxy is given a module name and is dynamically
associated with its module-implementation. It serves as a
port  forwarding  all  the  incoming  requests.  In  addition,
when  updating  its  module-implementation,  the  module-
proxy  controls  the  consistency  of  state  between  two
versions  of  the  module-implementation,  and  swaps  its
reference to the new version. In case of an upgrade failure,
the  module-proxy  enforces  recovery  and  brings  back  the
old version.
A  module-implementation,  as  a  dynamic  module,
encapsulates  all  the  application  specific  implementation
and runs as a task. Besides, it can be updated on the fly. It
has the following characteristics:
• 
It provides a certain amount of functional behavior to
participate  in  a  runtime  change.  To  support  runtime
evolution, 
a  module-implementation  must  be
packaged in a form, such as shared libraries, that can
be  loaded  and  unloaded  dynamically  in  a  runtime
environment.
•  There  is  an  input-message  queue  associated  within
each  module-implementation 
asynchronous
communication. It internally dispatches the functions
based  on  the  received  message’s  type.  The  interface
for 
Proceedings of the 13 th International Symposium on Software Reliability Engineering (ISSRE’02) 
1071-9458/02 $17.00 © 2002 IEEE 
dependency  among  modules  lies  in  the  message
protocol used.
3.2.3  Name  service.  Our  dynamic  software  upgrade
framework provides a uniform name service where
• 
• 
any module can be bound to any name (i.e., a string),
the name service can be used to register and resolve
the reference to a module at runtime.
Instead  of  direct  addressing,  the  reference  to  a  module-
proxy is registered with the name service and bound to the
name of the module. To send messages to a module, other
software  modules  firstly  search  the  name  service  for  the
reference to the module-proxy. And then the messages can
be  sent  to  this  module  via  its  proxy,  which  internally
appends  these  messages  to  the  queue  of  the  module-
implementation.  Finally, 
its  module-implementation
further  processes  the  messages.  Therefore,  removal  and
replacement of a module-implementation within a module
become transparent to other modules.
3.2.4  Publisher  and  subscriber  communication  model.
The  publisher  and  subscriber  model  is  an  event-driven
architecture used for communication between modules. A
module  can  be,  at  the  same  time,  both  publisher  and
subscriber. At any given time, the publishers do not need
to know the subscribers and vice-versa. When one module
joins  or  is  deleted  from  an  event  tag,  it  does  not  affect
other  modules.  By  holding  all  the  event  information  and
centralizing  the  management  of  module  communication,
the model can reduce the overhead of software evolution
at runtime. An event manager contains all the information
on registered event tags and interested subscribers. After a