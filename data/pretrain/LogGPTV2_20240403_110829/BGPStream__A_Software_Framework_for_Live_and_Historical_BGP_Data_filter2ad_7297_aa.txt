# BGPStream: A Software Framework for Live and Historical BGP Data Analysis

**Authors:**
- Chiara Orsini
- Alistair King
- Danilo Giordano
- Vasileios Giotsas
- Alberto Dainotti

## A Framework for Live Software Upgrade

**Authors:**
- Lizhou Yu<sup>1</sup>
- Gholamali C. Shoja
- Hausi A. MÃ¼ller
- Anand Srinivasan<sup>2</sup>

**Department of Computer Science, University of Victoria**
- P.O. BOX 3055, STN CSC
- Victoria, B.C., Canada V8W 3P6
- **Email:** {gshoja, hausi}@cs.uvic.ca

---

### Abstract

The demand for continuous service in mission- and safety-critical software applications is increasing. For these applications, it is unacceptable to shut down and restart the system during a software upgrade. This paper examines issues related to online upgrades for mission- and safety-critical software applications. We believe that a dynamic architecture and communication model provide an excellent foundation for runtime software evolution. To address the problems mentioned above, we designed and implemented a framework that addresses four main areas: dynamic architecture and communication model, reconfiguration management, the upgrade protocol, and the upgrade technique. The framework can be used for online upgrading of multi-task software applications that provide multiple mission-critical services.

---

### 1. Introduction

The demand for continuous service in mission- and safety-critical software applications, such as those in Internet infrastructure, aerospace, telecommunications, military defense, and medical applications, is expanding. Live software upgrade techniques, which are deployed for online maintenance and upgrades, can meet the demand for high levels of system availability and serviceability.

Evolutionary changes in software are unavoidable due to changes in the environment or application requirements that cannot be completely predicted during the design phase, or due to bug corrections or functionality enhancements. For mission- and safety-critical applications, it is unacceptable to shut down and restart the system during a software upgrade, as this can cause monetary loss, interruption of service, and potential damage. In the network communications industry, high availability criteria require that services must be provided 24/7 with near 99.99% uptime. The objective of online software upgrades is to add, remove, or replace relevant components without significantly affecting other parts of the application.

Upgrading a non-stop application is a complex process. The new and old components may differ in functionality, interface, and performance. Only selected components of an application are changed while the rest continue to function. It is crucial to safeguard the software application's integrity when changes are implemented at runtime. A runtime software upgrade cannot be done at any time, as it may halt or crash the application. The techniques for runtime upgrades are highly dependent on the operating system and the programming language in which the application is written. The ability to handle failures during upgrade transactions significantly influences the applicability of live software upgrade techniques.

We believe that a dynamic architecture and communication model provide an excellent foundation for runtime software evolution. To solve the problems mentioned above, we designed and implemented a framework that addresses four main areas: dynamic architecture and communication model, reconfiguration management, the upgrade protocol, and the upgrade technique. The framework can be used for online upgrading of multi-task software applications that provide multiple mission-critical services.

This paper is organized as follows:
- Section 2 compares related research.
- Section 3 outlines the design of a dynamic software upgrade framework.
- Section 4 examines some implementation issues related to the framework.
- Section 5 describes the simulation results.
- Section 6 provides a discussion and presents the experience.
- Finally, Section 7 summarizes the paper.

---

### 2. Related Work

This section discusses selected approaches to the problem of live software upgrades.

#### 2.1 Hardware-Based Approach

In a primary-standby system [1], two devices run the equivalent program and back each other up for continuity of service. To perform the update, the first device is stopped at a safe point in the program, and the second one is started simultaneously. After the first device is upgraded, it takes the role of the second device, and the second device is taken offline and ready to be upgraded.

#### 2.2 Component-Based Dynamic Architecture

Darwin, proposed by Jeff Kramer and Jeff Magee, is a declarative language for specifying the structure of distributed systems composed from diverse components using various interaction mechanisms [2]. It separates the description of structure from computation and interaction. The C2-style component-based architecture highlights the role of connectors in supporting runtime change [3][4]. Connectors are explicit entities that bind components together and act as mediators among them. Components communicate by passing asynchronous messages through connectors, which provide a mechanism for adding and modifying component bindings to support reconfiguration.

#### 2.3 Process-Based Approach

Deepak describes an approach to modeling change at the statement level for a simple imperative programming language [5]. The state transfer occurs when the stack is guaranteed to contain no routine that is to be changed. The replace module then copies the data and stack of the first process onto the second one, followed by copying the machine registers.

#### 2.4 Analytic Redundancy Based Approach

Hercules [6] and Simplex [7][8] permit safe online upgrading of software despite residual errors in the new components. Analytic redundancy facilitates extensive testing for reliable incremental evolution of safety-critical systems. It focuses on how to roll back when a new unit does not satisfy explicit performance and accuracy requirements after replacement. However, it does not illustrate well how to deal with failures during the upgrade transition.

#### 2.5 Distributed Object-Based Approach

In CORBA [9] and COM+ [10], client IDL stubs and server IDL skeletons are generated at the compilation of the IDL interface, allowing a client object to transparently invoke a method on a server object across the network. Eternal [11][12] extends the CORBA standard with object replication and fault tolerance. Method invocations are handled by a group of objects, so if one replica fails or is being upgraded, another object can operate normally. Intermediate code can be generated to facilitate live upgrades after comparing class versions. This approach requires basic CORBA architecture, reliable group communication (such as a totally ordered protocol), and frequent checkpoint mechanisms to maintain state consistency in object replicas during the running of CORBA applications.

As indicated, researchers have employed different tactics to solve the problem of live software upgrades. The primary standby method relies on redundant hardware and software. Dynamic architecture and dynamic languages facilitate the separation of component communication and enable reconfiguration and incremental evolution of application software. Process-based and procedure-based approaches achieve runtime change through indirect function calls and state transfers between processes. Analytic redundancy enables online testing and reliable upgrading. The distributed object-based approach can be implemented via extensions of the CORBA standard and object replication. In the next section, a framework based on a unique dynamic architecture and an upgrade protocol is proposed, providing a novel and integrated solution for live software upgrades. This framework is appropriate for multi-task software applications to perform live upgrades at the software module level in a centralized environment.

---

### 3. A Dynamic Software Upgrade Framework

#### 3.1 Overview

Figure 1 depicts a dynamic software upgrade framework that provides a solution for upgrading non-stop applications at runtime. It can be divided into two parts: the dynamic configuration service and the dynamic modules. The dynamic configuration service includes a Command Line Interface, a Software Upgrader, a Name Service, an Event Manager, a Version-control Repository, and a Module-Proxy. The dynamic modules, which consist of module-implementations, make up the second part. Dynamic modules are upgradeable components that can be disabled, enabled, loaded, unloaded, and hot-swapped.

#### 3.2 Dynamic Architecture and Communication Model

A dynamic architecture, as described below, provides the ability to change module interactions and dependencies and notify the rest of the software components of the change.

##### 3.2.1 Addressing Problem and Decomposition of Modules

Modules typically communicate with each other through message passing. In direct addressing, the sender needs to know the specific destination reference. However, after an existing module is replaced with a new one, re-linking other modules with the new one becomes a significant issue. The alternative is indirect addressing, where messages are sent to a well-known port with a shared data structure consisting of queues that can temporarily hold messages. Indirect addressing decouples the sender and receiver, providing great flexibility in dynamically updating existing modules.

To extend indirect addressing, we split an ordinary module into two parts: a module-proxy and a module-implementation. A module-proxy, restricted to one per module, minimizes coupling between modules. This idea is similar to decoupling the definition and implementation of a module in some programming languages and distributed architectures (e.g., Modula-2, ADA, C++, CORBA, COM+). In a non-distributed environment, the proxy prevents implementation modules from directly referencing one another during local communication. When a module-implementation is in the Service state, its module-proxy forwards all incoming requests to it, as depicted in Figure 2.

##### 3.2.2 Module-Proxy and Module-Implementation

A module-proxy is given a module name and is dynamically associated with its module-implementation. It serves as a port forwarding all incoming requests. Additionally, when updating its module-implementation, the module-proxy controls the state consistency between two versions of the module-implementation and swaps its reference to the new version. In case of an upgrade failure, the module-proxy enforces recovery and brings back the old version.

A module-implementation, as a dynamic module, encapsulates all the application-specific implementation and runs as a task. It can be updated on the fly and has the following characteristics:
- It provides a certain amount of functional behavior to participate in a runtime change. To support runtime evolution, a module-implementation must be packaged in a form, such as shared libraries, that can be loaded and unloaded dynamically in a runtime environment.
- There is an input-message queue associated with each module-implementation for asynchronous communication. It internally dispatches functions based on the received message type. The interface for dependency among modules lies in the message protocol used.

##### 3.2.3 Name Service

Our dynamic software upgrade framework provides a uniform name service where:
- Any module can be bound to any name (i.e., a string).
- The name service can be used to register and resolve the reference to a module at runtime.

Instead of direct addressing, the reference to a module-proxy is registered with the name service and bound to the name of the module. To send messages to a module, other software modules first search the name service for the reference to the module-proxy. The messages are then sent to this module via its proxy, which internally appends these messages to the queue of the module-implementation. Finally, the module-implementation processes the messages. Therefore, the removal and replacement of a module-implementation within a module become transparent to other modules.

##### 3.2.4 Publisher and Subscriber Communication Model

The publisher and subscriber model is an event-driven architecture used for communication between modules. A module can be both a publisher and a subscriber at the same time. At any given time, publishers do not need to know the subscribers and vice versa. When a module joins or is deleted from an event tag, it does not affect other modules. By holding all event information and centralizing the management of module communication, the model can reduce the overhead of software evolution at runtime. An event manager contains all the information on registered event tags and interested subscribers. After a module subscribes to an event tag, the event manager notifies it of any events.

---

### 4. Implementation Issues

This section examines some implementation issues related to the framework.

### 5. Simulation Results

A simulation study of the proposed framework was carried out for live software upgrades of several practical applications. The results of the simulation are presented in this section.

### 6. Discussion and Experience

This section provides a discussion and presents the experience gained from the implementation and testing of the framework.

### 7. Summary

This paper proposes a framework for live software upgrades based on a unique dynamic architecture and an upgrade protocol. The framework addresses the challenges of maintaining high availability and serviceability in mission- and safety-critical applications. The design and implementation of the framework, along with the simulation results, demonstrate its effectiveness in enabling seamless online upgrades.

---

**References:**

[1] Primary-standby system reference
[2] Darwin: A Declarative Language for Specifying the Structure of Distributed Systems
[3] C2-Style Component-Based Architecture
[4] Connectors in C2-Style Architecture
[5] Deepak's Approach to Modeling Change at Statement Level
[6] Hercules: Safe Online Upgrading of Software
[7] Simplex: Fault-Tolerant System Design
[8] Incremental Evolution of Safety-Critical Systems
[9] Common Object Request Broker Architecture (CORBA)
[10] Component Object Model Plus (COM+)
[11] Eternal: Extending CORBA with Object Replication and Fault Tolerance
[12] Reliable Group Communication in CORBA

---

**Footnotes:**
<sup>1</sup> Currently with Fujitsu Network Communication, Texas, U.S.A.
<sup>2</sup> Formerly at Nortel Networks Ottawa, Canada. Currently with Sion International, Ottawa, Canada

---

**Proceedings of the 13th International Symposium on Software Reliability Engineering (ISSREâ02)**
- 1071-9458/02 $17.00 Â© 2002 IEEE