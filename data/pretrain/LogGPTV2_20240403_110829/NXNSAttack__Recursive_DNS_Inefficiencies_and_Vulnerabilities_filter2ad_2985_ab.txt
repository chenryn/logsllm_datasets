As a result, the resolver has to redo the corresponding
resolution(s).
The gap between the number of resolution packets
per query expected in theory and the number observed
in practice raises several issues that we address in the
following sections:
1. In §3 we expose a new vulnerability and correspond-
ing attack, the NXNSAttack.
2. In §5 a solution to mitigate the NXNSAttack by not
resolving all the missing name server IP addresses in
the ﬁrst client query is suggested. The extra queries
are amortized over future client queries.
3. In §5 we evaluate our solution, and present our
experiments and measurements.
4. In §6 we measure the prevalence of Out-of-
Bailiwick domains, and measure the overhead of
additional Out-of-Bailiwick resolutions on two dif-
ferent datasets: (i) the top million domains list; (ii)
a campus DNS trace.
3 NXNSAttack
Here we show how the multi-name server referral response
and the resulting extra resolutions may be used to mount
a new attack, NXNSAttack, on diﬀerent elements of the
DNS infrastructure.
As shown in the previous section, for each name server
name without an associated IP address, in the NS re-
ferral response, the recursive resolver initiates a new
resolution procedure. This is the core of our attack. The
attacker uses an authoritative server that it owns to craft
a response to a resolver with a referral that contains n
new and nonexistent name server names without an as-
sociated IP address, thereby causing the resolver to start
the process of F new resolutions. As shown later, the
maximum F can be in the range, 74 ≤ F ≤ 2· n, where
n is the number of name server names in the referral
response (in the BIND implementation, 2n requests to
resolve the IPv4 and IPv6 address of each). When the at-
tacker generates many such referral responses repeatedly,
this results in a DDoS attack on either the resolver or
on a corresponding authoritative server, with an ampli-
ﬁcation factor of O(F) packets, sometimes much larger
than F. There are several parameters and variants of
this basic principle that we investigate in this paper.
3.1 Threat Model
To mount a NXNSAttack on either a recursive resolver
or an authoritative server, an attacker should:
1. Have access to one or more DNS clients on the
Internet. The attacker may use a botnet, like the
Mirai IoT botnet [4], or an ad network [17].
2. Own or compromise an authoritative name server.
An adversary who acts as an authoritative server
has the ability to craft any NS referral response as
an answer to diﬀerent DNS queries. It controls the
information that appears in the referral response,
such as the number of name servers, their names,
and their glue records (as well as the absence of glue
records).
Controlling and acquiring a huge number of clients and
a large number of authoritative NSs is not diﬃcult. Au-
thoritative name servers are easily and cheaply acquired
by ﬁrst buying and registering new domain names (for
our experiments, we purchased several domain names for
less than $1 each in less than 5 minutes). These acquired
domain names can be dynamically associated with any
authoritative server in the Internet. Alternatively, at-
tackers today are able to compromise DNS operators’
credentials and manipulate zone-ﬁles, sometimes even
gaining access to their registrar records, as exempliﬁed by
recent DNS hijacking attacks [10, 23]. It should be noted
that recent attacks have also utilized capabilities that
are much harder to acquire, such as [4, 31] IoT botnets,
Booters (DDoS for hire services [16]) and dynamic C&C
servers.
3.2 The Ampliﬁer
The core building block of the NXNSAttack is the
amplif ier (Figure 3), which is composed of two attacker
components and one innocent recursive resolver. The
USENIX Association
29th USENIX Security Symposium    635
Figure 3: The ampliﬁer: components and operation steps.
Figure 4: A diﬀerent view of the messages exchanged in
the steps of the ampliﬁer operation in Figure 3.
two attacker components are a client and an authori-
tative name server. The attacker issues many requests
for sub-domains of domains authorized by its own au-
thoritative server (step 1). Each such request is crafted
to have a diﬀerent sub-domain in order to bypass the
resolver’s cache, thus forcing the resolver to query the
attacker’s authoritative server in order to resolve each
of these sub-domains (step 2). The authoritative name
server then returns an NS referral response with n name
server names without their glue records (step 3), i.e.,
without their associated IP addresses. This forces the
resolver to start a resolution query for each one of the
name server names in the response, regardless of whether
they are in-bailiwick or out-of-bailiwick, because it does
not have their IP addresses in its cache (step 4). The
attacker’s authoritative referral response issues n new
and diﬀerent delegated name server names each time
it receives a query for a sub-domain from the recursive
resolver.
The attacker can use the ampliﬁer to generate diﬀerent
attacks on diﬀerent targets by combining the following
(a)
(b)
Figure 5: NXNSAttack targeting the authoritative server
(a) and the recursive resolver (b)
three ingredients in a variety of ways:
The bogus name server domains placed by the at-
tacker authoritative in the referral response deter-
mine the target authoritative server, which could
be at diﬀerent levels of the DNS hierarchy.
Multiplicity of clients and/or resolvers to target
a single authoritative (Fig. 5a), or multiplicity
of authoritatives to target a particular recursive
resolver (Fig. 5b).
Self delegation by the attacker that places n1 self-
delegations to fake name servers in its own domain,
in the ﬁrst malicious referral response. The resolver
then sends F1 = 2n1 new requests to the attacker
authoritative, which then crafts and issues F1 new
referral responses (see Fig. 6), each of which con-
tains n2 delegations of the attacker’s choosing. This
results in a total of 2n2 · F1 name server resolution
requests issued by the resolver, thus doubling the
attack fan out.
Here we focus on three basic attacks: against a recur-
sive resolver, against an authoritative SLD victim (e.g.,
victim.com name server), and against the ROOT/TLD
servers (.com, and “.” ). See Table 1 for a summary of
the ampliﬁcation factors.
Recursive resolver attack. (Fig. 5b) Here the max-
imum packet ampliﬁcation factor (PAF) is 1620x (both
according to our model and empirically; see §4), achieved
when the referral delegations are to diﬀerent TLD name
servers (e.g., fake1.com, fake2.com, ...,fake1.net, ...).
For each two packets – one from the client and one from
the authoritative name server – that the attacker com-
ponents generate, the victim recursive resolver processes
3,242 packets, out of which 1,081 are DNS packets and
the rest are TCP connection control packets. The cor-
responding bandwidth ampliﬁcation (BAF) is 132x; see
§4.3.
Authoritative SLD attack. (Fig. 5a) In this attack,
all the name servers in the malicious referral are sub-
636    29th USENIX Security Symposium
USENIX Association
AuthoritativeNS 2 IPv4AttackerAmplifierF=2n  resolutionsAuthoritative NS 1 IPv6Authoritative NS n IPv6Authoritative       NS 1 IPv4Authoritative name-server4ClientResolver3recursive resolverattacker.com authoritative name‐serverRequest sd1.attacker.comvictim.com authoritative name‐serverReferral Response messageSectionRecordAuthoritysd1.attacker.com.  NS   fake‐1.victim.com sd1.attacker.com.  NS   fake‐2.victim.com ...sd1.attacker.com.  NS   fake‐n.victim.com AdditionalNo Glue RecordsnxReferral responsemessage2nx2nxRequest IPv6  fake‐n.victim.com RequestIPv6  fake‐1.victim.com RequestIPv4  fake‐1.victim.com Response NXResponse NXResponse NXIPv4 IPv6pResolverResolvResolvClntClntAttack AuthAth3F  Ath2AthFAth1Attack AuthClntClntClientAttack AuthF  Victim AuthoritativeAttack AuthAttacker AuthoritativeAttacker AuthoritativeClientResolverResolverResolverResolvResolvClntClntAttack AuthAth3F  Ath2AthKAth1Attack AuthClntClntClientAttack AuthF  Victim AuthoritativeAttack AuthAttacker AuthoritativeAttacker AuthoritativeClientResolverResolverpresent the corresponding numbers that were measured
in our testbed setup and an analysis that explains them.
Recall that if the recursive resolver receives a referral
response that delegates the original request to n name
server names, without providing their IP address (no
glue records), it then generates – in theory – 2n requests
to resolve IPv4 and IPv6, for each of these n names.
However, two parameters limit this number. The ﬁrst is
the maximum number of delegation names that ﬁt into
the referral response, denoted nmax or just n. Our exper-
iments show that nmax is a function of the DNS packet
size (including EDNS(0) extensions [6] and DNS over
TCP) and the number of characters in the domain names.
In our tests nmax turned out to be 135. The second pa-
rameter is the max-recursion-queries parameter that, in
Bind, sets the maximum number of requests a recursive
resolver can send when resolving one client request. As
stated in the BIND 9.12 manual [1]: “max-recursion-
queries: Sets the maximum number of iterative queries
that may be sent while servicing a recursive query. If
more queries are sent, the recursive query is terminated
and returns SERVFAIL. Queries to look up top level
domains such as ‘.com’ and ‘.net’ and the DNS root zone
are exempt from this limitation. The default is 75”. We
denote max-recursion-queries as M ax_rq.
Since in step 3 in Fig. 3 the recursive sends one request,
the remaining M ax_rq budget is 74. This is suﬃcient
to resolve 37 names, requesting separately the IPv4 and
IPv6 address of each, resulting in F = 74, unless the
requests are sent to either the root or a TLD name
server, in which case, nmax is the only limiting factor,
yielding F = 2nmax = 270.
4.2 Experimental Setup
We deployed an experimental setup like the one shown
in Figure 3, on the AWS cloud in Ohio. Note that testing
which involves attacking live operational name servers
is not permissible. The setup includes a client, a recur-
sive resolver, and two authoritative servers: one for the
attacker and one for the victim. For each component,
we used a large EC2 machine with 16Gb RAM and 4
vCPUs. The authoritative and recursive resolver servers
run BIND 9.12.3 in authoritative and recursion operation
mode respectively. The client is deployed on a diﬀerent
machine, conﬁgured to send DNS requests directly to
our recursive resolver.
We chose BIND because it is the most prevalent DNS
server implementation [15, 25] and is considered as the
de facto standard for DNS servers. Moreover, a recent
work [18] shows that the majority of open DNS resolvers
operate BIND. We tested multiple versions of BIND in
our experiments (diﬀerent minor versions of 9.11 and
9.12), with no notable diﬀerences.
Figure 6: Illustration of the double ampliﬁcation attack
using self delegations in the ﬁrst referral response. This
attack variant (c) reaches a ﬁrepower of F = F1 · F2 =
37·2·135·2 = 19,980 (see §4.1).
domains of a victim SLD (second-level domain, e.g., fake-
1.victim.com, fake-2.victim.com, ...). The maximum
packet ampliﬁcation factor is 74x, and the corresponding
bandwidth ampliﬁcation factor is 21x; see §4.3 for the
cost and ampliﬁcation factor analysis.
ROOT/TLD attack: Here the attacker uses the self-
delegations technique (Fig. 6) to increase the number
of concurrent referrals to the ROOT name servers. In
our empirical tests, the victim processes up to 81,428
packets (14,126,945 bytes) for each client request (and
corresponding 75 referral packets) that the attacker gen-
erates (it is “only” 81,428 because many were lost). The
high victim cost is because the ﬁrst referral response from
the attacker contains delegations to 37 new and diﬀerent
sub-domains of the attacker (e.g., sd1.attacker.com, ...,
sd37.attacker.com), which results in 74 more requests
(IPv4 and IPv6 for each delegated ns) to the attacker
from the recursive resolver. The attacker’s authorita-
tive name server then responds with 74 crafted referrals,
each containing 135 delegations to the ROOT server
(e.g., domain.fake or domain.tld, where the TLD name
servers are not cached in the recursive resolver), which
in turn receives 18,980 concurrent requests; see §4.3 for
the cost and ampliﬁcation factor analysis.
4 NXNSAttack Analysis Evaluation
4.1 F, the Ampliﬁer Firepower
The traﬃc fan-out of the ampliﬁer as a result of one client
request is measured by either the number of generated
resolution requests, or the number of packets sent, or the
number of bytes (bandwidth, bw) sent. In this section we
USENIX Association
29th USENIX Security Symposium    637
AuthoritativeNS 2AttackerDouble AmplifierF1xF2=4 n1n2resolutionsAuthoritative NS 1Authoritative IPv6 NS F1xn2Authoritative       IPv4     NS 14ResolverF1=2n1 referrals65ClientAuthoritative name-server3To show that the vulnerability is not unique to BIND,
we also provide in §4.4 our results on open recursive
resolvers including Google, CloudFlare, Dyn and others.
All the open resolvers that we tested exhibited consider-
able ampliﬁcation when sending a single NXNSAttack
request.
4.3 Cost and Ampliﬁcation Analysis
In Subsection 4.1 we computed F, the ampliﬁer ﬁrepower,
which is the total number of DNS requests generated by
the ampliﬁer, which was 2(min(n,(M ax_rq −1)/2)) if
the attack is on an SLD domain, and 2n if the attack is
on a TLD or on root servers (results in F = 74 and 270
respectively). The 2 factor here is due to requesting the
IPv4 address and IPv6 separately. But how many packets
and bytes does it translate into? We measure it in our
setup and explain (calculate) the observed numbers by
analyzing the BIND protocol.
We claim that the cost to the victim in packets, de-
, as a result of one client request, as a function
noted Cpkt
v
of F, is:
v = 2· F ·(1+5· T C),
Cpkt
(1)
where T C, the value of the truncate bit in the DNS pro-
tocol, equals 1 if the F requests fall back to TCP, and 0
otherwise. The T C bit indicates whether the UDP DNS
request/response failed due to UDP packet size limita-
tion and is retried in TCP. This often happens when the
delegated name servers support DNSSEC signing (e.g.,
TLD servers, as we observed in our evaluation in §4.3).
In such cases, the resolver retry (request and response)
involves additional TCP control packets. In our evalua-
tion in §4.3 we observe that each such request response
exchange over TCP involves a total of 10 packets: DNS
request, DNS response, and 8 TCP control packets (3
for handshake, and 5 for session termination).
The 2 factor in (1) is because we count both the packets
sent and received by the recursive resolver or the author-
itative victim towards their attack-cost. Traditionally, in
DDoS bandwidth attacks, the packets/bytes ampliﬁca-
tion factor is the number of packets/bytes that are sent
to the victim divided by the number of packets/bytes
the attacker has sent. The victim name server is forced
to receive many packets, process them, access memory,
consume cache/memory capacity, and respond with a
new DNS request or response packets including TCP
connections. Therefore, our analysis of the ampliﬁcation
factor considers the packets the victim (the recursive or
the authoritative) receives and sends.
v
Equation (1) provides Cpkt
, the cost incurred by the
victim (recursive resolver or authoritative server) when
attacked by the ampliﬁer. The packet ampliﬁcation factor
(PAF) of the diﬀerent attacks is calculated by dividing
the victim cost by that incurred by the attacker, denoted
v
a
v
a
a . In attacks a and b (following Fig. 3) the attacker
Cpkt
sends two messages, the client request and the referral
response from the attacker-controlled authoritative name
server. In attack c, Fig. 6, the attacker’s authoritative
server sends 74 packets, yielding Cpkt
a = 75.
, where Cbw
PAF is the ratio between the number of packets pro-
cessed by the victim and the number of packets sent by
the attacker, i.e., P AF = Cpkt
. Similarly, the bandwidth
Cpkt
ampliﬁcation factor is BAF = Cbw
a denotes
Cbw
the number of bytes that the attacker must send and
v denotes the number of packets that the victim must
Cbw
process.
The costs discussed above are incurred with every
client request because the attacker’s authoritative server
issues referral requests with new and diﬀerent fake
(nonexistent) names each time. In addition, there are
one-time costs that we ignore but will show up in our
measurements. These represent the packets exchanged
between the recursive resolver and the ROOT/TLD au-
thoritative name servers in resolving the attacker and
the victim name servers, respectively. Since these name
servers are cached after the ﬁrst client request, we do
not consider them in the packet cost analysis.
In Table 2 and below we analyze each attack variant,
describing it and comparing its measured cost to its
calculated cost according to the model above.
(a) Recursive resolver attack (row a in Table 2).
Here each attacker’s referral (step 3 in Figure 3; see also
Figure 4) contains delegations to many new and diﬀerent
name servers of the .com zone. The zone ﬁle contains
millions of NS records and looks like this:
ORIGIN sd0.attacker.com.
sd0.attacker.com. IN NS ns1.fakens0.com.
sd0.attacker.com. IN NS ns1.fakens1.com.
...
sd0.attacker.com. IN NS ns1.fakens-n.com.
Considering that .com and other TLD name servers are
external to our setup, we initiated only a few requests
for sd*.attacker.com, while monitoring the recursive
resolver behavior.
In our setup, nmax turned out to be 135.
The
resulting ﬁrepower is thus 270 requests that are sent
to one of the .com TLD name servers, asking ‘who is
ns1.fakens*.com?’. The .com name server responds with
negative responses (NXDOMAIN). However, all TLD re-
sponses also contain a SOA record, RRSIG and multiple
NSEC3 signatures (DNSSEC signatures), thus exceeding
the maximum response size of 512 bytes. As a result,
the TC bit is set to on, forcing the resolver to repeat
the 270 queries over TCP (which also creates a lot of
overhead on the resolver and the authoritatives to handle
638    29th USENIX Security Symposium
USENIX Association
Victims
a
b
c
recursive resolver,
TLD name server
SLD name sever,
e.g., victim.com
ROOT or TLD NS
Firepower
(F )
270
TC bit
retry TCP
1
Attacker
Cpkt
2
a
Cost Factors
Packets Cost
74
19,980
=74x270
0
1
2
76
v
Victim
Cpkt
C 3,240
M 3,243
C 148
M 150
C239,760
M 81,428
PAF
1620x
74x
3154x
1071x
Bytes Cost
Attacker
Cbw
3,967
a
1,049
Victim
Cbw