is negligible in λ, where this game is defined as follows:
i =1)
main U-KSNDA,XA(λ)
srs ← ⊥
(ϕ, π) r←− AH,U-Os(1λ)
$←− XA(srs, r)
w
return Verify(srs, ϕ, π) ∧ (srs, ϕ, w) (cid:60) R
U-Os(intent, srsn,(ρi)n
if srs (cid:44) ⊥ return ⊥
if intent = setup
(srs′, ρ′) $←− Setup(1λ)
Q ← Q ∪ {ρ′}
return (srs′, ρ′)
if intent = update
b ← VerifySRS(1λ, srsn,(ρi)n
if b = 0 return ⊥
(srs′, ρ′) $←− Update(1λ, srsn,(ρi)n
Q ← Q ∪ {ρ′}
return (srs′, ρ′)
if intent = final
i =1)
b ← VerifySRS(1λ, srsn,(ρi)n
if b = 0 or Q ∩ {ρi}i = ∅ return ⊥
srs ← srsn; return srs
i =1)
i =1)
else return ⊥
To argue about the soundness of Sonic, we consider an inter-
active definition. We do not use the standard definition of special
soundness because our verifier provides two challenges, but rather
the generalized notion of witness-extended emulation [53]. We adapt
the definition given by Bootle et al. [22] as follows:
Definition 3.4. Let P be an argument for the relation R. Then it
satisfies updatable witness-extended emulation if for all DPT P∗ there
exists an expected PT emulator E such that for all PPT algorithms
5
A:
Pr[(srs′
, ρ
′) $←− Setup(1λ) ;
(srs,(ρi)i , ϕ, w) $←− A(srs′
view ← ⟨P∗(srs, ϕ, w), V(srs, ϕ)⟩ :
VerifySRS(1λ, srs,(ρi)i) ∧ A(view) = 1]
′) ;
, ρ
≈ Pr[(srs′
i)i) $←− Setup(1λ) ;
′
,(ρ
i =1, ϕ, w) $←− A(srs′
′) ;
(srs,(ρi)n
(view, w) ← E⟨P∗(srs,ϕ,w),V(srs,ϕ)⟩
VerifySRS(1λ, srs,(ρi)i) ∧ A(view) = 1 ∧
if view is accepting then (ϕ, w) ∈ R],
, ρ
:
where the oracle called by E⟨P∗(srs,ϕ,w),V(srs,ϕ)⟩ permits rewind-
ing to a specific point and resuming with fresh randomness for the
verifier from this point onwards.
This definition uses a slightly different setup from the one in
Definition 3.3: rather than interact arbitrarily with an update oracle
to set the SRS, the adversary is instead given an initial one and is
then allowed to update that in a one-shot fashion. Following Groth
et al. [46, Lemma 6], these two definitions are equivalent for Sonic,
so we opt for the simpler one.
4 BUILDING BLOCKS
4.1 Bilinear Groups
Let BilinearGen(1λ) be a bilinear group generator that given the se-
curity parameter 1λ produces bilinear parameters bp = (p, G1, G2,
GT , e, д, h), where G1, G2, GT are groups of prime order p with gen-
erators д ∈ G1, h ∈ G2 and e : G1×G2 → GT is a non-degenerative
bilinear map. That is, e(дa, hb) = e(д, h)ab ∀a, b ∈ Fp and e(д, h)
generates GT .
We require bilinear groups such that the maximum size of our
2 ≤ (p − 1)/32. In practice we expect that
circuit is bounded by d
2 ≪ (p − 1)/32.
d
We employ bilinear group generators that produce what Gal-
braith, Paterson and Smart [38] classify as Type III bilinear groups.
For such groups no efficiently computable homomorphism between
G1 and G2 exist. These are currently the most efficient bilinear
groups.
4.2 The Algebraic Group Model
Sonic is proven secure in the algebraic group model (AGM) by
Fuchsbauer et al [37], who used it to prove (among other things)
that Groth’s 2016 scheme [45] is secure under a “q-type” variant
of the discrete log assumption. Previously the only security proof
for this scheme was provided in the generic group model (GGM).
Although proofs in the GGM can increase our confidence in the
security of a scheme, its scope is limited since it does not capture
group-specific algorithms that make use of its representation (such
as index calculus approaches).
6
The AGM lies between the standard model and the GGM, and
it is a restricted model of computation that covers group-specific
attacks while allowing a meaningful security analysis. Adversaries
are assumed to be restricted in the sense that they can output
only group elements obtained by applying the group operation to
previously received group elements. Unlike the GGM, in the AGM
one proves security implications via reductions to assumptions
(just as in proofs in the standard model).
It is so far unknown how the AGM relates to knowledge-of-
exponent (KOE) assumptions, which have been used to build every
known SNARK that has been proven secure in the standard model
(and indeed it is known that SNARKs cannot be proven secure
under more standard falsifiable assumptions [41]). The format of
these KOE assumptions is similar to the AGM in the sense that
proving the assumption incorrect would require showing that there
is an adversary that can compute group elements of a given format
but that cannot extract an algebraic representation. Popular KOE
assumptions in asymmetric bilinear groups all require the adversary
to compute elements in the second source group. As we would like
to avoid introducing proof elements in the second source group (as
these are typically more expensive due to current implementations
of asymmetric bilinear groups), we instead decided to work with
the AGM.
An algorithm Aalg is called algebraic if whenever it outputs an
element Z in G, it also outputs a representation (z1, . . . , zt) ∈ Ft
where L = {д1, . . . , дt} is the list of all
group elements given to Aalg in its execution thus far. Unlike the
GGM, in the AGM one proves security implications via reductions.
To prove our scheme secure in the algebraic group model we use
the q discrete log assumption (q-DLOG), as follows:
such that Z =t
zi
i =1 д
i
Assumption 4.1 (q-DLOG assumption). Suppose that A is an
p
algebraic adversary. Then
 bp ← BilinearGen(1λ); x
x′ $←− A(bp, {дx i
, hx i }q
Pr
$←− Fp;
i =−q) : x = x′
i =−d , e(д, hα) (cid:111)
is negligible in 1λ.
4.3 Structured Reference String
In all of the following we require a structured reference string with
unknowns x and α of the following form
i =−d,i(cid:44)0, {hx i
(cid:110) {дx i }d
i =−d , {дα x i }d
, hα x i }d
for some large enough d to support the circuit depth n.
This string is designed so that дα is omitted from the reference
string. Thus we can, when necessary, force the prover to demon-
strate that a committed polynomial (in x) has a zero constant term.
4.4 Polynomial Commitment Scheme
Sonic uses two main primitives as building blocks: a polynomial
commitment scheme and a signature of correct computation. A
polynomial commitment scheme is defined by three DPT protocols:
• F ← Commit(bp, srs, max, f (X)) takes as input the bi-
linear group, the structured reference string, a maximum
degree, and a Laurent polynomial with powers between
−d and max. It returns a commitment F.
• (f (z),W ) ← Open(bp, srs, max, F , z, f (X)) takes as input
the same parameters as the commit algorithm in addition
to a commitment F and a point in the field z. It returns an
evaluation f (z) and a proof of its correctness.
• b ← pcV(bp, srs, max, F , z, v,W ) takes as input the bilin-
ear group, the SRS, a maximum degree, a commitment, a
point in the field, an evaluation and a proof. It outputs a
bit indicating acceptance (b = 1), or rejection (b = 0).
We require that this scheme is evaluation binding; i.e., given a
commitment F, an adversary cannot open F to two different eval-
uations v1 and v2 (more formally, that it cannot output a tuple
(F , z, v1, v2,W1,W2) such that pcV returns 1 on both sets of eval-
uations and proofs). We also require that it is bounded polyno-
mial extractable; i.e., any adversary that can provide a valid evalua-
tion opening also knows an opening f (X) with powers −d ≤ i ≤
max, i (cid:44) d − max (more formally, that this is true for any adversary
that outputs a tuple (F , z, v,W ) that passes verification). For both
properties, we require that they hold with respect to an adversary
that can update the SRS; i.e., that has access initially to the oracle
in Definition 3.3.
In Section 6.2 we provide a polynomial commitment scheme sat-
isfying these two properties. We prove its security in the algebraic
group model in Theorem 6.3.
4.5 Signature of Correct Computation
A signature of correct computation is defined by two DPT protocols:
• (s(z, y), sc) ← scP(bp, srs, s(X , Y),(z, y)) takes as input
the bilinear group, the SRS, a two-variate polynomial s(X , Y),
and two points in the field (z, y). It returns an evaluation
s(z, y) and a proof sc.
• b ← scV(bp, srs, s(X , Y),(z, y), s, sc) takes as input the
same parameters as the scP algorithm in addition to an
evaluation and a proof. It outputs a bit indicating accep-
tance (b = 1), or rejection (b = 0).
We require that this scheme is sound; i.e., given (z, y) and s, an
adversary can convince the verifier only if s = s(z, y).
We provide two competing constructions: one in Section 8 and
the other in Section 7. The first has linear verifier computation, but
can be aggregated by an untrusted helper to achieve constant veri-
fier computation in the batched setting. The second has constant
verifier computation but higher concrete overhead. Both construc-
tions have constant size.
5 SYSTEM OF CONSTRAINTS
Sonic represents circuits using a form of constraint system proposed
by Bootle et al. [22]. We make several modifications so that their
approach is practical in our setting.
Our constraint system has three vectors of length n: a, b, c rep-
resenting the left inputs, right inputs, and outputs of multiplication
constraints respectively, so that
a ◦ b = c.
We also have Q linear constraints of the form
a · uq + b · vq + c · wq = kq
7
where uq, vq, wq ∈ Fn are fixed vectors for the q-th linear con-
straint, with instance value kq ∈ Fp. For example, to represent the
constraint x
2 + y
2 = z, one would set
• a = (x, y), b = (x, y), c = (x
2
, y
• u1 = (1, 0), v1 = (−1, 0), w1 = (0, 0), k1 = 0
• u2 = (0, 1), v2 = (0,−1), w2 = (0, 0), k2 = 0
• u3 = (0, 0), v3 = (0, 0), w3 = (1, 1), k3 = z
2)
Any arithmetic circuit can be represented with our constraint sys-
tem by using the multiplication constraints to determine the multi-
plication gates and the linear constraints to determine the wiring
of the circuit and the addition gates. Thus the constraint system
covers NP.
We proceed to compress the n multiplication constraints into an
equation in formal indeterminate Y, as
In order to support our later argument, we (redundantly) encode
these constraints into negative exponents of Y, as
n
i =1
n
i =1
(aibi − ci)Y i = 0.
(aibi − ci)Y
−i = 0.
We compress the Q linear constraints similarly, scaling by Y n to
preserve linear independence.
(cid:0)a · uq + b · vq + c · wq − kq
(cid:1) Y q+n = 0.
Q
q=1
Let us define the polynomials
Q
Q
q=1
q=1
Q
q=1
ui(Y) =
vi(Y) =
Y q+nuq,i
Y q+nvq,i
wi(Y) = −Y i − Y
−i +
k(Y) =
Y q+nkq
Q
q=1
Y q+nwq,i
and combine our multiplicative and linear constraints to form the
equation
a · u(Y) + b · v(Y) + c · w(Y)
+
aibi(Y i + Y
−i) − k(Y) = 0.
(1)
n
i =1
Given a choice of (a, b, c, k(Y)), we have that Equation 1 holds at all
points if the constraint system is satisfied. If the constraint system
is not satisfied the equation fails to hold with high probability, given
a large enough field.
We apply a technique from Bootle et al. [22] to embed the left
hand side of Equation 1 into the constant term of a polynomial
t(X , Y) in a second formal indeterminate X. We design the polyno-
mial r(X , Y) such that r(X , Y) = r(XY , 1).
−iY
−i−n(cid:17)
−i + vi(Y)X i + wi(Y)X i +n(cid:17)
n
n
ai X iY i + bi X
r(X , Y) =
−i + ci X
−i−nY
(cid:16)
(cid:16)
i =1
ui(Y)X
s(X , Y) =
′(X , Y) = r(X , Y) + s(X , Y)
t(X , Y) = r(X , 1)r
i =1
′(X , Y) − k(Y)
r