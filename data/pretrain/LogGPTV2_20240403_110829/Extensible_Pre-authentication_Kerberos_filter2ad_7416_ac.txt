by the AS before returning a successful AS reply with an appropriately encrypted
session key:
1. epakvno must be a valid version number
2. epakauth must be valid as in RFC 4120
3. epakticket realm must match the realm of the AS
4. epakticket starttime ≤ now
5. epakticket endtime > now
6. epakticket principal must exist in Kerberos database
19
CHAPTER 3. EPAK DESIGN
7. epakticket and AS request principals must match
8. epakticket principal must appear in ACL (if used)
Rule 6 maintains harmony with current Kerberos implementations, and its ab-
sence would necessitate dynamic creation of principals, or modiﬁcations to later
phases of Kerberos to handle unknown principals. Such changes would have far-
reaching eﬀects into the systems built around Kerberos.
The lifetime of the TGT is limited so as not to extend beyond the lifetime of the
epakticket.
3.4 EPAK Beneﬁts
EPAK beneﬁts both Kerberos and the authentication systems that can now be
incorporated into Kerberos.
EPAK improves Kerberos by facilitating the incorporation of new authentication
schemes, which can be added without further modiﬁcation to the Kerberos client
(e.g., kinit) or AS (e.g., kdc). EPAK also provides a clear separation between the
pre-authentication and authentication phases, thus enabling loose integration of
diverse systems.
Incorporating attribute-based authentication schemes into Kerberos enables it to
operate as an open system and consequently allows services built on Kerberos to be
manageably expanded to larger communities. Also, when Kerberos operates as an
open system the need for a shared key between the AS and each client is eliminated.
Moreover, the risk of compromise to the client keys central repository is removed.
Authentication systems with complex interactions, or long execution times, ben-
eﬁt from the SSO feature of Kerberos as authentications occur only once per session.
Only having to authenticate once per session limits these potential performance bot-
tlenecks.
20
3.5. BACKWARD COMPATIBILITY
EPAK lowers the barriers to integrating alternative authentication mechanisms
into Kerberos, allowing newer or lesser-known schemes to enjoy a faster adoption
rate.
3.5 Backward compatibility
As with other Kerberos extensions, a Kerberos server with EPAK still supports
normal Kerberos password-based authentication.
A Kerberos server without EPAK support fails gracefully with a “pre-auth type
not supported” error when it receives an EPAK authentication request.
3.6 Limitations
One drawback of EPAK is that it requires at least one extra round of communi-
cation. The PAC must communicate with the PAS to obtain the epakticket. Other
Kerberos extensions, such as PKINIT [33], can provide pre-authentication data in
the AS request without needing a previous phase.
21
CHAPTER 3. EPAK DESIGN
22
Chapter 4 — Open Systems in EPAK
To demonstrate the generality and ﬂexibility of EPAK, we have chosen two authen-
tication systems to integrate into Kerberos: Simple Authentication for the Web
(SAW) and trust negotiation. Both SAW and trust negotiation build on the EPAK
framework to enable Kerberos to operate as an open system.
4.1 SAW
Simple Authentication for the Web (SAW) [28] leverages email (or other personal
messages, e.g., text and instant messages) to authenticate users. SAW signiﬁcantly
improves upon the basic technique employed by the “Forgot your password?” link
common to many web sites.
In SAW, users must demonstrate their ability to retrieve two short-lived, single-
use Authentication Tokens (see Figure 4.1).
If a user-supplied email address is
authorized, a random secret, AuthT okencomplete, is generated and split into two
shares as follows:
AuthT okencomplete ⊕ AuthT okenemail = AuthT okenuser
where AuthT okenemail is another randomly generated value. AuthT okenuser is re-
turned directly to the user over the secure link used to initiate the authentication
process (e.g., HTTPS) while AuthT okenemail is emailed. If the user returns both
tokens then the authentication is successful.
Since the AuthT okenuser is returned over a secure link, passively observing the
AuthT okenemail is worthless.
Vulnerability to Active Impersonation By submitting a victim’s email ad-
dress to a site an attacker obtains a valid AuthT okenuser. Consequently, by observ-
23
CHAPTER 4. OPEN SYSTEMS IN EPAK
Figure 4.1: The SAW protocol. Based on the user’s email address, submitted in
(1), a server distributes two authentication tokens. AuthTokenuser (2a) is returned
directly to the user while AuthTokenemail (2b) is emailed. Both tokens must be re-
turned (3) to successfully authenticate. Each login attempt involves its own unique,
short-lived, single-use tokens.
ing the victim’s incoming email messages, the attacker acquires the corresponding
AuthT okenemail and is able to authenticate as the victim. This is called an active
impersonation attack.
SAW’s threat analysis argues that SAW provides an acceptable level of risk,
even in light of this attack, because sites that employ email-based password resets
(EBPR) are also susceptible to a similar attack in which an attacker requests a
password reset for the victim and then observes the resulting email message sent by
the site. The proliﬁc adoption of EBPR indicates that these risks are manageable.
One-Round SAW Step 3 of SAW is eliminated in one-round SAW by setting
AuthT okencomplete, normally a random value, to the item requested by the user.
Since only authentic users can reconstruct AuthT okencomplete, only those users will
be able to obtain the item. As the token splitting used by SAW creates two shares
of equal size to the secret it splits, it is advised for a large item to encrypt the
24
4.2. SAWK NA¨IVE APPROACH
item, split the encryption key, and then deliver the encrypted item with one of the
encryption key shares.
Group-Based SAW SAW is often used in closed systems, i.e., an ACL speciﬁes
all authorized email addresses. This works well for sites (e.g., forums or photo-
sharing) willing to provision accounts for each user.
Unfortunately, this one-to-one speciﬁcation of users to permissions is insuﬃcient
for open systems. For example, this approach requires Business A, from the scenario
described in Chapter 1, to maintain an ACL containing some or all of the employee
emails of its aﬃliate, Company B.
For more ﬂexibility, SAW can be modiﬁed to use ACLs that contain wildcards
or regular expressions. This is known as group-based SAW. With this enhance-
ment, Business A can specify that anyone with a Company B email address (e.g.,
*@companyB.com) is allowed access.
4.2 SAWK Na¨ıve Approach
A na¨ıve approach to integrating SAW into Kerberos would be to send an email
address in the AS request, inside the padata of type PA-SAW-AS-REQ. The AS
would reply with the AuthT okenuser and the session key Kc,tgs encrypted with the
AuthT okencomplete, and would email AuthT okenemail to the user, who would be able
to reconstruct AuthT okencomplete and unlock the session key.
As with most Kerberos extensions, the adoption of SAW with this na¨ıve approach
would be impeded until it was approved and integrated into popular Kerberos im-
plementations. Before integration, a patch ﬁle would have to be maintained, and
Kerberos would have to be built manually to enable this functionality.
In addition, this approach provides no mechanism for securing AuthT okenuser,
making it susceptible to eavesdropping.
25
CHAPTER 4. OPEN SYSTEMS IN EPAK
Figure 4.2: The SAWK protocol uses EPAK to enable SAW authentication in Ker-
beros. The SAWK Server (SAWK-S) and SAWK Client (SAWK-C) embody the
PAS and PAC, respectively. In phase 0, one-round, group-based SAW authentica-
tion is used to obtain an EPAK-REP. The resulting ticket and session key are stored
in the credential cache, after which phase 1 (AS authentication) is performed.
4.3 SAWK Protocol
Simple Authentication for the Web in Kerberos (SAWK) is an EPAK-based
protocol that enables ﬂexible, email-based authentication in Kerberos, and avoids
the limitations of the na¨ıve approach.
Pre-Authentication Phase The protocol for SAWK pre-authentication is shown
in Figure 4.2, phase 0:
a) The SAWK-C sends an EPAK-REQ and email address to the SAWK-S
b) If the address is allowed to authenticate as the principal speciﬁed in the
EPAK-REQ, the SAWK-S responds with AuthT okenuser and an EPAK-REP
26
 0c 0c Email Provider1b  1c0a (Credential Cache)0d 1a  0bASACSAWK-SSAWK-C4.4. TRUST NEGOTIATION
encrypted with the random AuthT okencomplete
c) AuthT okenemail is emailed to the speciﬁed address and is used to reproduce
AuthT okencomplete and decrypt the EPAK-REP
d) The epakticket and session key Kc,as of the EPAK-REP are stored in the
client’s credential cache
The communication between the SAWK-C and SAWK-S in steps 0a and 0b is
performed over a secure channel (e.g., TLS) to thwart eavesdropping and imperson-
ations of the SAWK-S.
SAWK uses group-based SAW for a ﬂexible mapping of email addresses to prin-
cipals. The addresses are speciﬁed as regular expressions, which provide an m-n
mapping with a high level of scalability.
AS Authentication Phase The protocol for AS authentication following SAWK
pre-authentication is shown in Figure 4.2, phase 1. This phase is identical to phase
1 of EPAK. As previously mentioned, EPAK-based authentication protocols can be
integrated into Kerberos without further modiﬁcation to the Kerberos client and
server programs.
4.4 Trust Negotiation
Trust negotiation [29, 1] is a protocol for establishing trust between strangers
with no preexisting relationship. Automated trust negotiation works by exchanging
digital credentials until enough trust has been established to gain access to a service
or resource. If each party has the required credentials, and their policies allow them
to be shown to each other, then trust negotiation will succeed and the resource will
be granted.
27
CHAPTER 4. OPEN SYSTEMS IN EPAK
Digital credentials used for trust negotiation serve the same purpose as paper
credentials one might carry in a wallet, such as a driver’s license, insurance card, or
a student ID. Unlike most authentication systems, which are identity-based, trust
negotiation is attribute-based, which provides the ﬂexibility to authenticate based
on credential properties. For example, Bob can use his digital driver’s license to
prove that he is old enough to register for a community college.
An access control policy deﬁnes what credentials must be supplied before access
to a resource is granted. Policies can also be used to protect credentials, because
credentials themselves may be sensitive. For instance, a credit card credential can be
protected so that it won’t be disclosed unless the other party has a Better Business
Bureau credential.
4.5 TNK Protocol
Trust Negotiation in Kerberos (TNK) is an EPAK-based protocol that uses trust
negotiation to authenticate clients.
Pre-Authentication Phase The protocol for TNK pre-authentication is shown
in Figure 4.3, phase 0:
a) The TNK-C sends an EPAK-REQ to the TNK-S
b) Trust negotiation is performed until the policy has been satisﬁed, or trust
negotiation fails
c) If the policy is satisﬁed, an EPAK-REP is returned
d) The epakticket and session key Kc,as of the EPAK-REP are stored in the
client’s credential cache
28
4.5. TNK PROTOCOL
Figure 4.3: The TNK protocol uses EPAK to enable trust negotiation in Kerberos.
The TNK Server (TNK-S) and TNK Client (TNK-C) embody the PAS and PAC,
respectively. In phase 0, trust negotiation is performed to obtain an EPAK-REP.
The resulting ticket and session key are stored in the credential cache, after which
phase 1 (AS authentication) is performed.
29
0a 0b 0c AS1b  1cACTNK-STNK-C(Credential Cache)0d 1a CHAPTER 4. OPEN SYSTEMS IN EPAK
The principal name in the EPAK-REQ serves as the role the user must satisfy
before the EPAK-REP is disclosed. By its very nature, trust negotiation provides a
scalable, attribute-based mapping of users to principals.
The communication between the TNK-C and TNK-S is performed over a secure
TLS connection to protect potentially sensitive credentials (step 0b), provide server
authentication, and to prevent an eavesdropper from viewing the session key Kc,as
in the EPAK-REP (step 0c).
AS Authentication Phase The protocol for AS authentication after TNK pre-
authentication is shown in Figure 4.3, phase 1. This phase is identical to phase 1 of
EPAK.
4.6 TNK vs PKINIT
PKINIT [33] is a Kerberos extension that uses public-key cryptography for initial
authentication in Kerberos. Similar to TNK, only phase 1 of the Kerberos protocol
changes. But unlike TNK, PKINIT authentication is handled completely in the AS
request and AS reply, and does not require additional rounds.
In PKINIT, the user sends a certiﬁcate to the AS. After verifying the validity of
the certiﬁcate (signed by a trusted CA and not revoked or expired), the AS responds
with the TGT and session key. The session key is encrypted with the user’s public
key extracted from the certiﬁcate, instead of a password-derived key. PKINIT also
allows a key generated through a Diﬃe-Hellman key exchange to be used for this
encryption.
PKINIT relies on trusted CAs to issue certiﬁcates for users. The principal names
are usually speciﬁed directly in the certiﬁcates, creating a one-to-one mapping be-
tween certiﬁcates and principals. This limits PKINIT’s ability to operate as an
open system, since the CAs must work directly with the Kerberos administrator in
30
4.6. TNK VS PKINIT
managing principals.
PKINIT can function as an open system if the AS is modiﬁed to use a diﬀer-
ent binding mechanism from certiﬁcate properties to Kerberos principals. A nice
approach would be to modify PKINIT to use a form of credential mapping to map
large groups to principal names. For example, the subject name of the certiﬁcate
maps to a principal name via regular expression mapping, similar to the SAWK ACL
list. Other certiﬁcate properties could also be involved in the mapping to provide
an even more ﬂexible, attribute-based solution, similar to TNK.
31
CHAPTER 4. OPEN SYSTEMS IN EPAK
32
Chapter 5 — EPAK Implementation
The ﬂow of messages in EPAK is shown in Figure 5.1. EPAK is implemented as a
patch to Heimdal Kerberos [12], and this section is geared towards those familiar
with Kerberos implementations.
Changes to the client include modifying kinit to support EPAK, and adding
helper programs genpatrequest and savepat. Changes to the server include mod-
ifying kdc to support EPAK, and adding the helper program genpatreply.
genpatrequest This utility program is used by the PAC to generate an EPAK-
REQ. The principal name is speciﬁed (if diﬀerent from the user’s name), as well as
the desired ticket lifetime and start time.
Usage: genpatrequest [-l time] [-s time] file
[principal]
genpatreply This utility program is used by the PAS to generate an EPAK-REP
from an EPAK-REQ. An EPAK-REP is only generated if the EPAK-REQ is valid.
The rules speciﬁed in Section 3.3 are enforced. The existence of the client principal
is not enforced because:
1. The PAS may not have access to the Kerberos database, especially if the PAS
is running on a diﬀerent machine.
2. The principal name will be veriﬁed later, by the kdc when it receives the AS
request.
33
CHAPTER 5. EPAK IMPLEMENTATION
Figure 5.1:
EPAK Implementation. The kinit and kdc programs support
EPAK. The new helper programs genpatrequest, genpatreply, and savepat cre-
ate and process the EPAK-REQ and EPAK-REP messages. The PAC invokes
genpatrequest to obtain an EPAK-REQ (steps 1-2) that is sent to the PAS (step
3). Additional steps are then performed, as necessary, to authenticate the user. The
PAS generates an EPAK-REP by invoking genpatreply (steps 4-5) and transmits
it securely (e.g., TLS) to the PAC (step 6) to be stored in the client’s credential
cache (step 7). AS authentication is then performed (steps 8-10).
34
kdc1 kinit --epakPASPACgenpatrequestsavepatgenpatreply(Credential Cache)2 3 4 5 6 7 8 9 10 7 genpatreply must be run by a privileged user with access to the EPAK key
(Kepak) stored in the krb5.keytab ﬁle. Kepak is used to encrypt the epakticket in
the EPAK-REP.
Usage: genpatreply requestfile replyfile
savepat To save an EPAK-REP to the client credential cache, the PAC uses the
savepat utility. The epakticket, session key Kc,as, and pasrealm from the EPAK-
REP are formatted into a krb5 creds which is then stored into the credential cache
with krb5 cc store cred(). The credential can be viewed by running the existing
klist program.
Usage: savepat [-c ccache] replyfile
kinit The kinit program supports a new option, --epak. When run with this