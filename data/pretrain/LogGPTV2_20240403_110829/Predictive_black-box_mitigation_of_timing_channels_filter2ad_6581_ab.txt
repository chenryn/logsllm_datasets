(BOUNDING MITIGATOR LEAKAGE). Given a
mitigator M, and a leakage bound B(T ), we say that the leakage
of M is bounded by B(T ) if for all T , we have log M(T ) ≤ B(T ).
3.2 Epoch-based mitigation
In this work we focus on a speciﬁc class of mitigators that we
dub epoch-based mitigators. An epoch represents a period of time
during which the behavior of the mitigator meets the epoch sched-
ule.
An epoch schedule is a sequence of epoch predictions, one for
each slot. Epoch predictions can be either positive or negative. A
positive prediction, denoted by [t]+, means the mitigator expects to
be able to deliver an event at time t. A negative prediction, denoted
by [t]−, says that no source events are expected to be available for
delivery at time t. We may simply write t when the sign of the pre-
diction is not important for the context. A prediction is an element
of R×{+,−}, because times t are real-valued. An epoch schedule
S is therefore a function from slot indices (from the natural num-
bers N) to predictions.
DEFINITION 3
(EPOCH SCHEDULE). An epoch schedule is a
function S : N → R × {+,−}, where S(n) is a prediction for the
n-th slot in the epoch.
We say that a positive prediction S(n) = [t]+ holds or is valid if
at time t the mitigator can deliver an event; in this case, this is also
the n-th event in the epoch. A negative prediction S(n) = [t]−
holds when no source events are available at time t.
Conversely, failing a positive prediction [t]+ means that there are
no events (available or buffered) to be delivered at time t. Failing a
negative prediction [t]− means that there are buffered source events
that have not yet been delivered by time t.
When a mitigator prediction S(n) fails at the n-th slot, we ob-
serve an epoch transition.
In addition to prediction failure, an
epoch transition may be caused by mitigator adjustments. For ex-
ample, the mitigator might adjust for a faster rate of source events,
or might improve performance by ﬂushing or partially ﬂushing the
buffer queue. We can now formally deﬁne an epoch:
DEFINITION 4
(EPOCH). An epoch is a triple (τ, τ(cid:48), S) where
timestamps τ and τ(cid:48) correspond to the beginning and the end of the
epoch, and S is the epoch schedule.
When the number of the epoch is important we write SN for the
schedule in epoch N.
Example.
Revisiting the basic doubling scheme from Section 2.3, we see
that the prediction for every N-th epoch that starts at time t is given
by the function SN (i) = [t + i · 2N ]+.
299For the slow doubling scheme of Section 2.4, every odd pre-
diction is positive—it expects the events to be delivered at regu-
lar intervals, and every even prediction is negative—no events are
expected from the source. These predictions can be expressed as
follows:
(cid:40)
SN (i) =
[t + i · 2k]+ if N = 2k − 1
[t + i · 2k]− if N = 2k
On the form of schedules.
Most of the examples of schedules in this paper are constant-
quantum functions, where prediction times depend linearly on the
epoch sequence number of the events. However, when timing pat-
tern of the source events is well-understood, a ﬁner prediction, de-
scribed by an arbitrary function, could yield better performance.
From the standpoint of security, the form of the schedule is irrele-
vant as long as the mitigator satisﬁes the leakage bound discussed
in Section 3.4.
3.3 Leakage of epoch-based mitigators
Epoch-based design allows us to reduce the analysis of epoch-
based mitigation to the analysis of individual epochs and of the
transitions between them.
Variations within an epoch.
Because prediction times during an epoch are deterministic, the
only source of timing variation within an epoch is the number of
valid predictions. The latter is the key element in bounding the
number of possible event sequences within an epoch. The number
of valid predictions is bounded by the duration of the epoch, which
itself is bounded by the current running time T + 1. Therefore the
current running time T + 1 is a bound on the number of variations
within each epoch.
Transition variations.
Epoch transitions may depend on source events too. Therefore,
one needs to take into account the number of possible schedules for
the next epoch. We denote by ΛN the number of possible schedules
when transitioning from epoch N to epoch N + 1.
The exact number of transition variations depends on the partic-
ular mitigation scheme. In the two schemes described thus far, the
transition into a new epoch occurs only when a miss occurs, and
only one new schedule is possible; hence, for all epochs N, we
have ΛN = 1.
An example mitigator for which ΛN is greater than 1 is an adap-
tive scheme that uses the average rate of the previously received
source events to choose the new schedule. In this case, ΛN can be
bounded by the current running time T + 1.
Section 4.1 describes the convergence experiment where the num-
ber of possible predictions for a given epoch is chosen from a ﬁxed
table and is exactly 2.
Bound on the number of total variations.
Consider an epoch-based mitigator at time T that has reached
at most N epochs. Assume that within each epoch the number of
variations is at most T + 1, and the number of possible transition
variations into epoch i is Λi, where i ranges from 1 to N. We
include ΛN to accommodate the transition from epoch N to epoch
N + 1 at time T . We can bound the number of possible variations
of such a mitigator by a function M(T, N ):
M(T, N ) = (T + 1)N · Λ1 · Λ2 · . . . · ΛN
The leakage of this mitigator is bounded by the logarithm
N(cid:88)
N(cid:88)
log M(T, N ) = N log(T + 1) +
log Λj
(1)
j=1
We refer to the term log(T + 1) as epoch leakage and to the
terms log Λi as transition leakage.
Basic schemes revisited.
Revisiting the simple mitigators from Section 2, we see that be-
cause ΛN = 1, the leakage of such mitigators is bounded by
N log(T + 1).
3.4 Bounding leakage
Using Deﬁnition 2 and Equation 1 we may derive a leakage
bound for epoch-based mitigation.
N log(T + 1) +
log Λj ≤ B(T )
(2)
j=1
Furthermore, if we consider mitigators where the transition varia-
tions are ﬁxed—that is, there is λmax ≥ log Λj for all j—then the
leakage bound criterion for such mitigators can be expressed as a
bound on the number of epochs.
N ≤
B(T )
log(T + 1) + λmax
(3)
Deﬁne the deferral point DN for epoch N to be the solution to
the equation N = B(T )/(log(T + 1) + λmax). The importance
of DN is that until DN there must be at most N epochs; that is, the
start of the N +1-th epoch has to be deferred until DN . Because the
N +1-th epoch starts with the misprediction at the N-th epoch, this
leads us to the only security constraint for the choice of schedule
SN . Namely, for all events i, we should have ∀ N ≥ 1 . SN (i) ≥
DN , and consequently,
∀N ≥ 1 . SN (1) ≥ DN
(4)
Example.
Consider the basic scheme from Section 2.3, which has predic-
tion function SN (i) = [t + i · 2N−1]+. For this scheme, we have
λmax = 0. Consider bound log2(T + 1), which leads to deferral
points DN for N-th epoch DN = 2N − 1. The leakage bound
requires SN (1) ≥ DN . Since in the basic scheme, the N-th epoch
i=0 2i for all N ≥ 2,
therefore the leakage bound follows from SN (1) = 0 + 20 = 1 ≥
i=0 2i + 2N−1 =
2N−1 − 1 + 2N−1 = 2N − 1 = DN for all N ≥ 2.
starts at 0 for N = 1, and at least at time(cid:80)N−2
21 − 1 = DN for N = 1, and SN (1) ≥ (cid:80)N−2
Figure 2 shows the deferral points for the basic scheme from Sec-
tion 2. Here the bound is B(T ) = log2 T , λmax = 0, and the de-
ferral points correspond to the intersections of the curves N log T
with the bound curve.
Adaptive mitigators.
the difference B(T ) − N log(T + 1) −(cid:80)N
When a misprediction does not occur for a sufﬁciently long time,
j=1 log Λj may allow
an extra epoch transition. Say that an epoch transition is adaptive
when it is initiated by the mitigator rather than by a misprediction.
Equations 2 and 3 can also be used to design criteria for adaptive
transitions. In particular, an adaptive transition is secure when
300of bounds such as kT + logn T , for n ≥ 2 and small (or zero)
k. We have not explored such bounds in this work, though it is
possible that a linear, albeit slowly growing, bound may be useful
in bringing deferral points closer in practice.
3.5 Mixing storage and timing
A variety of information ﬂow control techniques have been de-
veloped for controlling leakage through storage channels. We can
now show that these techniques combine well with timing mitiga-
tion.
We use the information theoretic measure of mutual information,
to measure leakage. Given random variables A and B, their mu-
tual information I(A; B) is the information that A conveys about
B, and vice versa. It is deﬁned as I(A; B) = H(A) + H(B) −
H(A, B), where the function H gives the entropy of a distribution.
Note that the entropy of a variable with n possible values is maxi-
mized when all n outcomes are equally probable, in which case it
is log n bits.
Assume X is a random variable that corresponds to secret input,
Y is a random variable that corresponds to the storage channel, and
Z is a random variable that corresponds to the timing channel. The
amount of information that the attacker gains by observing both
storage and timing channel is the mutual information between the
secret and the joint distribution of Y and Z: that is, I(X; Y, Z).
Similarly, the amount of information that the attacker gains by ob-
serving just the storage channel is I(X; Y ).
The following easy theorem says that the information leaked by
the combination of timing and storage channels is bounded by the
information leaked by the storage channel, plus the maximum in-
formation content of the timing channel. The proof is in the ap-
pendix.
B(T ) − N log(T + 1) − N(cid:88)
j=1
log Λj ≥ log(T + 1) + log ΛN +1
THEOREM 1
(SEPARATION OF STORAGE CHANNEL).
I(X; Y, Z) ≤ H(Z) + I(X; Y )
Figure 2: Target bound, capacity approximation for individual
epochs, and deferral points
Here ΛN +1 is the number of possible new predictions for epoch
number N + 1.
One use for adaptive transitions is to help reduce the size of the
event buffer. Past deferral points, the mitigator can choose to re-
lease more than one event from the buffer. The number of choices
for how many events can be ﬂushed from the buffer then contribute
to ΛN for the mitigation scheme at that deferral point. Prudent
mitigator design probably avoids completely emptying the buffer,
since an empty buffer may risk an unpredicted miss.
A second example of using adaptive transitions to improve per-
formance is given in Section 4.1.
On the choice of bound functions.
Because the epoch-based mitigation scheme is parametric on the
choice of the bound function B(T ), we brieﬂy discuss possible
choices for practical bounds.
Recall that we assume the number of processed events in an
epoch may leak information. Under this assumption, the most dra-
conian bound possible is log T . Enforcing such a bound effectively
restricts output to a single epoch for the entire run of the program.
In case of a misprediction, all subsequent events would have to be
delayed until the end of the program.
Our simple and adaptive mitigators use the polylogarithmic bound
log2 T , which appears to make a reasonable trade-off between per-
formance and security. However, as this section illustrates, even
with this more relaxed bound, the distance between deferral bounds
increases exponentially.
A third choice corresponds to a larger, more permissive, class
A symmetric theorem can be stated for the timing channel, but
seems less useful because of the difﬁculty of estimating I(X; Z).
A direct corollary to this theorem is that if the system enforces
noninterference [12, 24] on the storage channel, the total secret in-
formation leaked from the system is bounded by the entropy of the
timing channel.
3.6 Input
Event sources often communicate with the external world by ac-
cepting input, and block waiting for input when no input is avail-
able. Let us assume that the timing of input does not contain sensi-
tive information, or at least that it is the responsibility of the input
provider to control the input timing channel. The time spent by a
computing system waiting for input clearly does not communicate
anything about its internal state provider. Therefore, the system
comprising the event source and mitigator should not be penalized
for time spent blocked waiting for input. For the purposes of miti-
gation, the clock controlling the scheduling of slots can be stopped
while the event course is blocked waiting for input. This reﬁnement
is particularly helpful when the event source is a service whose ser-
vice time does not ﬂuctuate much.
3.7 Leakage with beliefs about execution time
Finally, we consider a particular case of server applications that
handle client requests. In this special case, a tighter, albeit proba-
bilistic, bound on leakage can be established than is possible with
the general framework presented thus far.
For many real applications that handle sequential client requests,
such as RSA encryption and simple web services (see Section 4.4),
24682468102468102468246810246810y = B(t)y = 3 log(t)y = 2 log(t)y = log(t)D2D1D3301execution times fall within a narrow range, regardless of the val-
ues of secrets. We show that under the assumption that the distri-
bution of execution times is approximately as expected, expected
mitigated leakage can be given a tighter bound than O(log2 T ).
Suppose that with probability at least p, the execution time for a
single request is at most Tbig. That is, the adversarial insider con-
trols execution time but cannot make the probability of exceeding
Tbig greater than 1 − p. For some computations, such as blinded
cryptographic operations on sufﬁciently isolated computers, p can
be gained by sampling with randomly generated inputs. Given Tbig,
a corresponding number of epochs Nbig can be calculated, giv-
ing the number of transitions that must occur before executions
of length Tbig are possible. For instance, in the basic doubling
scheme, Nbig = (cid:100)log(Tbig)(cid:101). Under these assumptions, expected
leakage L(Nbig, T ) is derived using conditional entropy:
L(Nbig, T ) = p · log M(T, Nbig) + (1 − p) · M(T, N )
where, as before, M(T, Nbig) is the bound on the number of pos-
sible variations of a mitigator when N is at most Nbig.
Example.
For the basic doubling scheme, given Tbig, we know that Nbig ≤
(cid:100)log(Tbig + 1)(cid:101). Using the formula for M(T, N ), we can derive
L(Nbig, T ) ≤ p · (Nbig · log(T + 1) − Nbig(Nbig − 1)/2)
(log2(T + 1) + log(T + 1))
1 − p