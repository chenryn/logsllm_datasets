# 一、与 Kubernetes 交互
本章包含对容器编排的解释，包括它的优点、用例和流行的实现。我们还将简要回顾 Kubernetes，包括架构组件的布局，以及关于授权、认证和与 Kubernetes 的一般通信的入门知识。到本章结束时，您将知道如何使用 Kubernetes API 进行身份验证和通信。
在本章中，我们将涵盖以下主题:
*   容器编排入门
*   忽必烈的建筑
*   Kubernetes 上的身份验证和授权
*   使用库比特和 YAML 文件
# 技术要求
为了运行本章中详细介绍的命令，您需要一台运行 Linux、macOS 或 Windows 的计算机。本章将教你如何安装`kubectl`命令行工具，你将在后面的章节中使用。
本章中使用的代码可以在本书的 GitHub 存储库中找到，链接如下:
[https://github . com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/chapter 1](https://github.com/PacktPublishing/Cloud-Native-with-Kubernetes/tree/master/Chapter1)
# 引入容器编排
不介绍它的目的，我们就不能谈论 Kubernetes。Kubernetes 是一个容器编排框架，所以让我们在本书的上下文中回顾一下这意味着什么。
## 什么是容器编排？
容器编排是在云中和数据中心运行现代应用的流行模式。通过使用容器(具有捆绑依赖关系的预配置应用单元)作为基础，开发人员可以并行运行应用的许多实例。
## 容器编排的优势
容器编排提供了相当多的好处，但我们将重点介绍主要的好处。首先，它允许开发人员轻松构建**高可用性**应用。通过让一个应用的多个实例运行，容器编排系统可以以一种方式进行配置，这意味着它将自动用新实例替换该应用的任何失败实例。
这可以通过将应用的多个实例分布在物理数据中心来扩展到云中，因此，如果一个数据中心宕机，应用的其他实例将保留下来，并防止停机。
其次，容器编排允许高度**可伸缩的**应用。由于可以轻松创建和销毁应用的新实例，因此编排工具可以自动上下扩展以满足需求。无论是在云环境还是数据中心环境中，都可以将新的**虚拟机** ( **虚拟机**)或物理机添加到编排工具中，为其提供更大的计算池进行管理。该过程可以在云环境中完全自动化，从而允许在微观和宏观层面上完全不用手进行缩放。
## 流行的编排工具
生态系统中有几种非常流行的容器编排工具:
*   **Docker Swarm**:Docker Swarm 是由 Docker 容器引擎背后的团队创建的。与 Kubernetes 相比，它更容易设置和运行，但灵活性稍差。
*   **Apache Mesos**:Apache Mesos 是一个较低级别的编排工具，可在数据中心和云环境中管理计算、内存和存储。默认情况下，Mesos 不管理容器，但是 Marathon——一个运行在 Mesos 之上的框架——是一个成熟的容器编排工具。甚至有可能在 Mesos 之上运行 Kubernetes。
*   **Kubernetes** :截至 2020 年，容器编排方面的大部分工作已经围绕 Kubernetes (koo-bur-net-ees)进行了整合，通常会缩短为 k8s。Kubernetes 是一个开放的源容器编排工具，最初是由谷歌创建的，借鉴了内部编排工具博格和欧米茄，这些工具已经在谷歌使用了多年。自从 Kubernetes 成为开源之后，它越来越受欢迎，成为在企业环境中运行和编排容器的实际方式。这有几个原因，包括 Kubernetes 是一个成熟的产品，有一个非常大的开源社区。操作起来也比 Mesos 简单，比 Docker Swarm 灵活。
从这种比较中最重要的一点是，尽管容器编排有多个相关的选项，并且有些选项在某些方面确实更好，但 Kubernetes 已经成为事实上的标准。考虑到这一点，让我们来看看 Kubernetes 是如何工作的。
# 忽必烈建筑
Kubernetes 是一个编排工具，可以在云虚拟机、数据中心运行的虚拟机或裸机服务器上运行。通常，Kubernetes 运行在一组节点上，每个节点都可以是虚拟机或物理机。
## 不可变节点类型
Kubernetes 节点可以是许多不同的东西——从虚拟机到裸机主机，再到树莓 Pi。Kubernetes 节点分为两个不同的类别:第一，主节点，运行 Kubernetes 控制平面应用；其次是工作节点，它运行您部署到 Kubernetes 上的应用。
一般来说，为了获得高可用性，Kubernetes 的生产部署应该至少有三个主节点和三个工作节点，尽管大多数大型部署的工作节点比主节点多得多。
## Kubernetes 控制飞机
Kubernetes 控制平面是在主节点上运行的一套应用和服务。有几项高度专业化的服务正在发挥作用，它们构成了 Kubernetes 功能的核心。它们如下:
*   **kube-apiserver** :这是 Kubernetes API 服务器。该应用处理发送给 Kubernetes 的指令。
*   **kube-调度器**:这是 Kubernetes 调度器。该组件处理决定将工作负载放在哪些节点上的工作，这可能会变得相当复杂。
*   **kube-控制器-管理器**:这是 Kubernetes 控制器管理器。该组件提供了一个高级控制回路，确保实现集群和运行在其上的应用的所需配置。
*   **etcd** :这是一个包含集群配置的分布式键值存储。
通常，所有这些组件都采用在每个主节点上运行的系统服务的形式。如果您想完全手动引导您的集群，可以手动启动它们，但是通过使用集群创建库或云提供商管理的服务，如**弹性 Kubernetes 服务(EKS)** ，这通常会在生产环境中自动完成。
## 不灭 API 服务器
Kubernetes 应用编程接口服务器是一个接受 HTTPS 请求的组件，通常在端口`443`上。它提供了一个可以自签名的证书，以及身份验证和授权机制，我们将在本章后面介绍。
当向 Kubernetes API 服务器发出配置请求时，它将在`etcd`中检查当前集群配置，并在必要时进行更改。
Kubernetes API 通常是一个 RESTful API，每个 Kubernetes 资源类型都有端点，还有一个在查询路径中传递的 API 版本；比如`/api/v1`。
为了扩展 Kubernetes(参见 [*第 13 章*](13.html#_idTextAnchor289)*用 CRDs* 扩展 Kubernetes)，该 API 还具有一组基于 API 组的动态端点，可以向自定义资源公开相同的 RESTful API 功能。
## 不可思议的调度程序
Kubernetes 调度程序决定工作负载的实例应该在哪里运行。默认情况下，此决策受工作负载资源需求和节点状态的影响。您也可以通过在 Kubernetes 中可配置的放置控制来影响调度程序(参见 [*第 8 章*](08.html#_idTextAnchor186)*Pod 放置控制*)。这些控件可以作用于节点标签(其他 pod 已经在节点上运行)和许多其他可能性。
## Kubernetes 控制器管理器
Kubernetes 控制器管理器是一个运行多个控制器的组件。控制器运行控制循环，确保集群的实际状态与存储在配置中的状态相匹配。默认情况下，这些包括以下内容:
*   节点控制器，确保节点启动并运行
*   复制控制器，确保每个工作负载都得到适当扩展
*   端点控制器，处理每个工作负载的通信和路由配置(参见 [*第 5 章*](05.html#_idTextAnchor127) *、服务和入口-与外界通信*)
*   服务帐户和令牌控制器，处理 API 访问令牌和默认帐户的创建
## etcd
etcd 是一个分布式键值存储，以高可用性的方式存储集群的配置。一个`etcd`副本在每个主节点上运行，并使用 Raft 共识算法，该算法确保在允许对密钥或值进行任何更改之前保持仲裁。
## Kubernetes 工人节点
每个 Kubernetes 工作节点包含允许其与控制平面通信并处理网络的组件。
首先是 **kubelet** ，它确保容器按照集群配置的指示在节点上运行。其次， **kube-proxy** 为每个节点上运行的工作负载提供了网络代理层。最后，**容器运行时**用于在每个节点上运行工作负载。
## 忽必烈
kubelet 是一个在每个节点(包括主节点)上运行的代理，尽管它在该上下文中有不同的配置。它的主要目的是接收 PodSpecs 列表(后面会有更多)，并确保它们规定的容器在节点上运行。kubelet 通过几种不同的可能机制获得这些 PodSpecs，但主要方式是通过查询 Kubernetes API 服务器。或者，kubelet 可以从一个文件路径开始，它将监控该路径中的 PodSpecs 列表、要监控的 HTTP 端点或自己接收请求的 HTTP 端点。
## 多维数据集代理
kube-proxy 是一个在每个节点上运行的网络代理。其主要目的是对其节点上运行的工作负载进行 TCP、UDP 和 SCTP 转发(通过流或循环)。kube-proxy 支持 Kubernetes `Service`构造，我们将在 [*第 5 章*](05.html#_idTextAnchor127) *、服务和入口–与外部世界通信*中讨论。
## 容器运行时
容器运行时运行在每个节点上，是实际运行您的工作负载的组件。Kubernetes 支持 CRI-O、Docker、containerd、rktlet 和任何有效的**容器运行时接口** ( **CRI** )运行时。从 Kubernetes v1.14 开始，RuntimeClass 特性已经从 alpha 迁移到 beta，并允许特定于工作负载的运行时选择。
## 阿登
除了核心集群组件之外，典型的 Kubernetes 安装还包括附加组件，它们是提供集群功能的附加组件。
例如，**容器网络接口** ( **CNI** )插件如`Calico`、`Flannel`或`Weave`提供符合 Kubernetes 网络要求的覆盖网络功能。
另一方面，CoreDNS 是一个流行的插件，用于集群内 DNS 和服务发现。还有一些工具，如 Kubernetes Dashboard，它提供了一个用于查看和与集群交互的图形用户界面。
此时，您应该对 Kubernetes 的主要组件有一个高层次的了解。接下来，我们将回顾用户如何与 Kubernetes 交互来控制这些组件。
# Kubernetes 上的认证和授权
名称空间在 Kubernetes 中是一个极其重要的概念，由于它们会影响 API 访问和授权，我们现在将介绍它们。
## 命名空间
Kubernetes 中的一个名称空间是一个构造，它允许您将集群中的 Kubernetes 资源分组。它们是一种分离方法，有许多可能的用途。例如，您可以在集群中为每个环境(开发、转移和生产)设置一个命名空间。
默认情况下，Kubernetes 将创建默认命名空间、`kube-system`命名空间和`kube-public`命名空间。没有指定命名空间创建的资源将在默认命名空间中创建。`kube-system`包含集群服务，如`etcd`、调度程序以及任何由 Kubernetes 本身而不是用户创建的资源。`kube-public`默认为所有用户可读，可用于公共资源。
## 用户
Kubernetes 中有两类用户——普通用户和服务账户。
常规用户通常由群集外的服务管理，无论他们是私钥、用户名和密码，还是某种形式的用户存储。然而，服务帐户是由 Kubernetes 管理的，并且仅限于特定的名称空间。要创建一个服务帐户，Kubernetes API 可能会自动创建一个，也可以通过调用 Kubernetes API 手动创建。
对 Kubernetes API 的请求有三种可能的类型——与普通用户相关的请求、与服务帐户相关的请求和匿名请求。
## 认证方式
为了认证请求，Kubernetes 提供了几种不同的选项:HTTP 基本认证、客户端证书、承载令牌和基于代理的认证。
为了使用 HTTP 认证，请求者发送带有`Authorization`报头的请求，该报头将具有值载体`"token value"`。
为了指定哪些令牌有效，当应用开始使用`--token-auth-file=filename`参数时，可以向应用接口服务器应用提供一个 CSV 文件。一个新的测试版特性(在撰写本书时)被称为*引导令牌*，允许在应用编程接口服务器运行时动态交换和更改令牌，而无需重新启动它。
基本用户名/密码认证也可以通过`Authorization`令牌，使用头值`Basic base64encoded(username:password)`进行。
## Kubernetes 用于 TLS 和安全性的证书基础架构
为了使用客户端证书(X.509 证书)，必须使用`--client-ca-file=filename`参数启动 API 服务器。该文件需要包含一个或多个**证书颁发机构** ( **证书颁发机构**)，这些证书颁发机构将在验证通过 API 请求传递的证书时使用。
除了 **CA** 之外，还必须为每个用户创建一个**证书签署请求** ( **CSR** )。此时，用户`groups`可以包含，我们将在*授权*选项部分讨论。
例如，您可以使用以下内容:
```
openssl req -new -key myuser.pem -out myusercsr.pem -subj "/CN=myuser/0=dev/0=staging"
```
这将为用户`myuser`创建一个企业社会责任，该用户属于名为`dev`和`staging`的组。
一旦创建了 CA 和 CSR，就可以使用`openssl`、`easyrsa`、`cfssl`或任何证书生成工具来创建实际的客户端和服务器证书。此时也可以为 Kubernetes API 创建 TLS 证书。
由于我们的目标是让您尽快开始在 Kubernetes 上运行工作负载，因此我们将把所有可能的证书配置都从本书中删除，但是 Kubernetes 文档和文章 *Kubernetes The Hard Way* 都有一些关于从头开始设置集群的优秀教程。在大多数生产设置中，您不会手动执行这些步骤。
## 授权选项
Kubernetes 提供了几种授权方法:节点、网络钩子、RBAC 和 ABAC。在本书中，我们将重点介绍 RBAC 和 ABAC，因为它们是最常用于用户授权的两个国家。如果您使用其他服务和/或自定义功能扩展集群，其他授权模式可能会变得更加重要。
## RBAC
**RBAC** 代表**基于角色的访问控制**，是常用的授权模式。具体在 Kubernetes 中，RBAC 的角色和用户是使用四个 Kubernetes 资源实现的:`Role`、`ClusterRole`、`RoleBinding`和`ClusterRoleBinding`。要启用 RBAC 模式，可以使用`--authorization-mode=RBAC`参数启动应用编程接口服务器。