The cron string format is described (together with the cron tool) at [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).
# 计划的构建
调度触发器意味着 Jenkins 定期运行构建，不管是否有提交到存储库。
如下图所示，不需要与任何系统通信:
![](img/a7ecf582-38bd-4402-98f3-b28700ff392a.png)
计划构建的实现与轮询配置管理完全相同。唯一的区别就是用了关键字`cron`而不是`pollSCM`。这种触发方法很少用于提交管道，但很好地适用于夜间构建(例如，夜间执行的复杂集成测试)。
# 通知
Jenkins 提供了许多方法来宣布其构建状态。此外，与 Jenkins 中的所有内容一样，可以使用插件添加新的通知类型。
让我们浏览一下最受欢迎的类型，以便您可以选择适合您需求的类型。
# 电子邮件
通知 Jenkins 构建状态的最经典方式是发送电子邮件。这种解决方案的优点是每个人都有一个邮箱；每个人都知道如何使用邮箱；每个人都习惯于通过邮箱接收信息。缺点是通常电子邮件太多，Jenkins 发来的邮件很快就被过滤掉了，再也不会被阅读。
电子邮件通知的配置非常简单；这足以:
*   配置 SMTP 服务器
*   在 Jenkins 中设置其详细信息(在管理 Jenkins|配置系统中)
*   在管道中使用`mail to`指令
管道配置如下:
```
post {
     always {
          mail to: 'PI:EMAIL',
          subject: "Completed Pipeline: ${currentBuild.fullDisplayName}",
          body: "Your build completed, please check: ${env.BUILD_URL}"
     }
}
```
请注意，所有通知通常在管道的`post`部分调用，该部分在所有步骤之后执行，无论构建成功还是失败。我们使用了`always`关键字；但是，有不同的选项:
*   **始终:**执行，无论完成状态如何
*   **已更改:**仅当管道更改其状态时执行
*   **故障:**仅当管道处于**故障**状态时执行
*   **成功:**仅当管道具有**成功**状态时执行
*   **不稳定:**仅当管道处于**不稳定**状态时执行(通常由测试失败或代码违规引起)
# 群聊
如果群组聊天(例如，Slack 或 HipChat)是您团队中的第一种沟通方式，那么值得考虑在那里添加自动构建通知。无论您使用哪种工具，配置它的过程总是相同的:
1.  为你的群聊工具找到并安装插件(例如**松弛通知**插件)。
2.  配置插件(服务器网址、通道、授权令牌等)。
3.  将发送指令添加到管道中。
让我们看一个示例管道配置，让 Slack 在构建失败后发送通知:
```
post {
     failure {
          slackSend channel: '#dragons-team',
          color: 'danger',
          message: "The pipeline ${currentBuild.fullDisplayName} failed."
     }
}
```
# 团队空间
伴随敏捷文化而来的是这样一种想法，即最好让一切都发生在团队空间中。与其写邮件，不如一起见面；与其在网上发消息，不如过来聊聊；用白板代替任务跟踪工具。持续交付和 Jenkins 也有同样的想法。目前在团队空间安装大屏幕(也叫**搭建散热器**)非常普遍。然后，当你来到办公室，你首先看到的是管道的当前状态。建造辐射器被认为是最有效的通知策略之一。它们确保每个人都意识到失败的构建，并且作为副作用，它们增强了团队精神并有利于面对面的交流。
由于开发人员是有创造力的人，他们发明了许多其他的想法，这些想法起到了与散热器相同的作用。一些团队悬挂大型扬声器，当管道出现故障时会发出嘟嘟声。还有一些玩具在建造完成后会闪烁。我最喜欢的是管道状态不明飞行物，它是作为 GitHub 上的开源项目提供的。在它的页面上，你可以找到如何打印和配置悬挂在天花板下并发出管道状态信号的不明飞行物的描述。你可以在[https://github.com/Dynatrace/ufo](https://github.com/Dynatrace/ufo)找到更多。
Since Jenkins is extensible by plugins, its community wrote a lot of different ways to inform about the build statuses. Among them, you can find RSS feeds, SMS notifications, mobile applications, desktop notifiers, and much more.
# 团队发展战略
我们已经描述了关于持续集成管道应该是什么样子的一切。然而，它到底应该在什么时候运行？当然，它是在提交到存储库之后触发的，但是在提交到哪个分支之后呢？只对树干还是对每一根树枝？或者它应该在提交之前运行，而不是提交之后运行，这样存储库才会一直健康？或者，完全没有分支的疯狂想法怎么样？
这些问题没有单一的最佳答案。实际上，您使用持续集成过程的方式取决于您的团队开发工作流。因此，在我们继续之前，让我们描述一下可能的工作流。
# 开发工作流程
开发工作流是您的团队将代码放入存储库的方式。当然，这取决于许多因素，如源代码管理工具、项目细节或团队规模。
因此，每个团队开发代码的方式略有不同。但是，我们可以将它们分为三种类型:基于主干的工作流、分支工作流和分叉工作流。
All workflows are described in detail with examples at [https://www.atlassian.com/git/tutorials/comparing-workflows](https://www.atlassian.com/git/tutorials/comparing-workflows).
# 基于主干的工作流
基于主干的工作流是最简单的策略。其概述如下图所示:
![](img/dfd60182-ccde-4fba-aec5-e01d4fb677af.png)
有一个中央存储库，其中包含对项目的所有更改的单个条目，称为主干或主条目。团队的每个成员都克隆中央存储库，以拥有自己的本地副本。更改直接提交到中央存储库。
# 分支工作流
分支工作流，顾名思义，意味着代码被保存在许多不同的分支中。这个想法如下图所示:
![](img/18d4bcff-09cf-42c4-8e90-b88268349bee.png)
当开发人员开始开发一个新特性时，他们会从主干中创建一个专用分支，并在那里提交所有与特性相关的更改。这使得多个开发人员可以在不破坏主代码库的情况下轻松地开发一个特性。这就是为什么在分支工作流的情况下，保持主节点健康没有问题。当功能完成时，开发人员重新调整主功能分支的基础，并创建包含所有与功能相关的代码更改的拉取请求。它会打开代码审查讨论，并留出空间来检查更改是否不会打扰到主服务器。当代码被其他开发人员接受并进行自动系统检查时，它就会被合并到主代码库中。然后，构建在 master 上再次运行，但应该永远不会失败，因为它在分支上没有失败。
# 工作流程
分叉工作流在开源社区中非常流行。其理念如下图所示:
![](img/83ff827e-d29b-4e4e-8449-cb5d979dc6a2.png)
每个开发人员都有自己的服务器端存储库。它们可能是也可能不是正式的存储库，但是从技术上讲，每个存储库都是完全相同的。
分叉意味着从另一个存储库中创建一个新的存储库。开发人员推送到他们自己的存储库，当他们想要集成代码时，他们创建一个到另一个存储库的拉请求。
分叉工作流的主要优点是集成不一定通过中央存储库。它也有助于所有权，因为它允许接受来自其他人的拉请求，而不给予他们写访问权限。
在面向需求的商业项目中，团队通常在一个产品上工作，因此有一个中央存储库，所以这个模型可以归结为具有良好所有权分配的分支工作流，例如，只有项目负责人可以将拉取请求合并到中央存储库中。
# 采用持续集成
我们描述了不同的开发工作流，但是它们如何影响持续集成配置？
# 分支策略
每个开发工作流都意味着不同的持续集成方法:
*   **基于主干的工作流程**:意味着不断与断裂的管道作斗争。如果每个人都提交到主代码库，那么管道经常会失败。在这种情况下，旧的持续集成规则说，“*如果构建被破坏，那么开发团队停止他们正在做的任何事情，并立即修复问题*”
*   **分支工作流**:解决了断干问题但引入了另一个问题:如果每个人都在自己的分支发展，那么集成在哪里？一个特性的开发通常需要几周或几个月的时间，而在这段时间里，分支并没有集成到主代码中，因此不能真正称之为“持续”集成；更不用说不断需要合并和解决冲突。
*   **分叉工作流**:意味着由每个存储库所有者管理持续集成流程，这通常不是问题。然而，它与分支工作流有着相同的问题。
没有灵丹妙药，不同的组织选择不同的策略。最接近完美的解决方案是使用分支工作流技术和基于主干的工作流原理。换句话说，我们可以创建非常小的分支，并经常将它们集成到 master 中。这似乎是两者的最佳结合，然而，需要要么拥有微小的特征，要么使用特征切换。由于特性切换的概念非常适合持续集成和持续交付，让我们花点时间来探索一下。
# 功能切换
功能切换是一种替代维护多个源代码分支的技术，这样可以在功能完成并准备发布之前对其进行测试。它用于为用户禁用该功能，但在测试时为开发人员启用它。特征切换本质上是条件语句中使用的变量。
特征切换最简单的实现是标志和`if`语句。与功能分支开发相反，使用功能切换的开发如下所示:
1.  必须实施一项新功能。
2.  创建新标志或配置属性`feature_toggle`(而不是`feature`分支)。
3.  每个与特性相关的代码都被添加到`if`语句中(而不是提交到`feature`分支)，例如:
```
        if (feature_toggle) {
             // do something
        }
```
4.  在功能开发过程中:
    *   用`feature_toggle = true`在 master 中编码(而不是在特征分支中编码)
    *   通过`feature_toggle = false`从主机上释放
5.  当特征开发完成后，所有`if`语句被移除，并且`feature_toggle`从配置中移除(而不是合并`feature`来掌握和移除`feature`分支)。
功能切换的好处是所有的开发都在`trunk`中完成，这使得真正的持续集成成为可能，并减轻了合并代码的问题。
# Jenkins 多牧场
如果您决定使用任何形式的分支，长功能分支或推荐的短生命分支，那么在将代码合并到 master 之前了解代码是否健康是很方便的。这种方法导致主代码库始终保持绿色，幸运的是，有一种简单的方法可以让 Jenkins 做到这一点。
为了在我们的计算器项目中使用多分支，让我们继续以下步骤:
1.  打开 Jenkins 主页。
2.  点击新项目。
3.  输入`calculator-branches`作为项目名称，选择多分支管道，点击确定。
4.  在分支源部分，单击添加源，并选择 Git。
5.  在项目存储库中输入存储库地址。
![](img/612d9172-f32d-4de6-93b8-d050718945ea.png)
6.  如果不运行，请定期打勾，并将 1 分钟设置为间隔。
7.  点击保存。
每分钟，该配置都会检查是否有任何分支被添加(或删除)，并创建(或删除)由 Jenkinsfile 定义的专用管道。
我们可以创建一个新的分支，看看它是如何工作的。让我们创建一个名为`feature``push`的新分支，并将其放入存储库中:
```
$ git checkout -b feature
$ git push origin feature
```
过了一会儿，您应该会看到一个新的分支管道自动创建并运行:
![](img/1d029385-1907-49ca-8a47-6869c12edbfd.png)
现在，在将特征分支合并到 master 之前，我们可以检查它是否是绿色的。这种方法永远不应该破坏主构建。
In the case of GitHub, there is an even better approach, using the `GitHub Organization Folder` plugin. It automatically creates pipelines with branches and pull requests for all projects.
一个非常相似的方法是为每个拉请求构建一个管道，而不是为每个分支构建一个管道，这给出了相同的结果；主代码库总是健康的。
# 非技术要求
最后但并非最不重要的一点是，持续集成并不完全与技术有关。相反，技术排在第二位。詹姆斯·肖尔在他的文章*每天一美元的持续集成*中描述了如何在没有任何额外软件的情况下设置持续集成流程。他只用了一只橡皮鸡和一个铃铛。这个想法是让团队在一个房间里工作，并建立一个单独的电脑和一张空椅子。把橡皮鸡和铃铛放在电脑前面。现在，当你计划签入代码时，拿着橡胶鸡，签入代码，去空的计算机，签出新的代码，在那里运行所有测试，如果一切都通过了，放回橡胶鸡并按门铃，这样每个人都知道有东西被添加到存储库中。
*Continuous Integration on a Dollar a Day* by *James Shore* can be found at: [http://www.jamesshore.com/Blog/Continuous-Integration-on-a-Dollar-a-Day.html](http://www.jamesshore.com/Blog/Continuous-Integration-on-a-Dollar-a-Day.html).
这个想法有点过于简单，自动化工具很有用；然而，主要的信息是，没有每个团队成员的参与，即使是最好的工具也于事无补。Jez Humble 在他的巨著*持续交付*中提到了持续集成的先决条件，可以用以下几点来重新表述:
*   **定期签到**:引用*迈克·罗伯茨、*T4【持续比你想象的要多】，最低一天一次。
*   **创建全面的单元测试**:不仅仅是测试覆盖率高，有可能没有断言，仍然保持 100%的覆盖率。
*   **保持流程快速**:持续整合必须要短时间，最好在 5 分钟以下。10 分钟已经很多了。
*   **监控构建**:可以是共同负责，也可以是适应每周轮换的**构建大师**角色。
# 练习
您已经学习了很多关于如何配置持续集成流程的知识。既然*熟能生巧*，我们建议做以下练习:
1.  创建一个 Python 程序，将作为命令行参数传递的两个数字相乘。添加单元测试并在 GitHub 上发布项目:
    *   创建两个文件`calculator.py`和`test_calculator.py`
    *   你可以在 https://docs.python.org/library/unittest.html 使用`unittest`图书馆
    *   运行程序和单元测试
2.  为 Python 计算器项目构建连续集成管道:
    *   使用 Jenkins 文件指定管道
    *   配置触发器，以便管道在提交到存储库时自动运行
    *   管道不需要`Compile`步骤，因为 Python 是一种可解释的语言
    *   运行管道并观察结果
    *   尝试提交破坏管道每个阶段的代码，并观察它在 Jenkins 中是如何可视化的
# 摘要
在本章中，我们介绍了持续集成管道的所有方面，这始终是持续交付的第一步。这一章的重点是:
*   管道为组织任何自动化过程提供了通用机制；然而，最常见的用例是持续集成和持续交付
*   Jenkins 接受定义管道的不同方法，但推荐的方法是声明性语法
*   提交管道是最基本的持续集成过程，顾名思义，它应该在每次提交到存储库之后运行
*   管道定义应该作为 Jenkins 文件存储在存储库中
*   提交管道可以随着代码质量阶段而扩展
*   无论项目构建工具如何，Jenkins 命令都应该始终与本地开发命令保持一致
*   Jenkins 提供了广泛的触发器和通知
*   开发工作流应该在团队或组织内部仔细选择，因为它会影响持续集成过程，并定义开发代码的方式
在下一章中，我们将重点关注持续交付流程的下一阶段，自动化验收测试。可以认为这是最重要的一步，在许多情况下，也是最难实施的一步。我们将探索验收测试的想法和使用 Docker 的示例实现。