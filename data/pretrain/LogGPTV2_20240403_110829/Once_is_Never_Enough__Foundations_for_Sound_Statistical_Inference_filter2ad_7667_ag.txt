these categorizations are based on controlled Tor experiments;
more observational research (e.g., the measurements done on
Tor Metrics [67]) would have a different perspective, primar-
ily manifesting as many properties shifting from independent
to dependent variables. Even with this particular point of ref-
erence, however, some properties can concurrently exist as
both independent and dependent variables in one experiment.
Packet loss, for example, is something that can be conﬁgured
as a property of the network (i.e., a particular link can be
conﬁgured to drop packets with some probability), but will
also occur as a result of the natural behavior of TCP stacks es-
tablishing a stable connection and can therefore be measured.
The rest of this section is dedicated to describing the ele-
ments of our ontology. The properties of these elements are
enumerated and classiﬁed in Table 6. While most of the terms
are self-explanatory, they are also brieﬂy described in Table 7
to alleviate any confusion.
Network: The network element represents the connections
between other elements, as well as meta-properties that are not
directly measurable on individual nodes (though analogues
may be). Latency and bandwidth, for example, are properties
directly instantiated in the links between the other elements.
The time to a steady state, on the other hand, is something
that can be measured, but not as an actual property of any
particular element, so much as a measurement of a constructed
representation of the network itself.
Network Nodes: Network nodes are all endpoints in the net-
work (i.e., every client, relay, and server). While we could
assign their common properties to each of the elements dis-
cussed in the remainder of this section, we group them to-
gether to reﬂect their commonality (and to conserve space).
Some properties, such as control overhead, could arguably
be positioned as part of the network itself, but are in this
ontology considered part of the network nodes. The deciding
factor was whether the variable could be directly conﬁgured
or measured as a property of a particular node. For example,
while packet loss requires knowledge of the link between
two relays, control overhead can be measured on only one
end; therefore, we place the former as a network property
and the latter as a property of the network node. From a more
empirical perspective, tools such as Shadow and NetMirage
would conﬁgure/measure packet loss on the edges of a
network graph, while control overhead would be measured
using data collected from the node.
Clients: Clients are the subclass of network nodes that run
applications proxied via Tor; they represent both normal Tor
clients, as well as onion services. Client properties include
those relating to the Tor application itself, as well as the ap-
plication(s) being proxied through it.
Relays: Relays are the subclass of network nodes that run
Tor relays. As above, relay properties include those of the Tor
application, as well as the environment in which it runs.
Servers: Servers are the subclass of network nodes that repre-
sent non-Tor network entities; e.g., web servers and non-Tor
clients. Because they do not run Tor, and will typically be
creating requests or responding to requests created elsewhere,
they add few properties not already captured above.
USENIX Association
30th USENIX Security Symposium    3431
Table 6: Classiﬁcation of the experimentation properties in our Tor ontology into Independent and Dependent variables, organized by element.
An arrow indicates a subproperty.
Tor relayselectionalgorithm
maxdurationofcircuits
durationofconnections
maxnum.opencircuits
numberofconnections
connections(numberof:)
Torrelayconﬁguration
streamsandcircuits
timetoTorconsensus
connectingclients
timetoﬁrst/lastbyte
CPU/memoryusage
circuitbuildtime
timetosteadystate
retransmissions
processing(stack)
controloverhead
processing(Tor)
socketsopen
behaviormodel
behaviormodel
packetloss
trafﬁctype
stack OS/kernel
packetdelay
path/routing
hardware
idletime
geolocation
throughput
congestion
congestion
IPaddress
errors
quantity
goodput
errors
port
bandwidth
reliability
jitter
latency
Indep.
Dep.
-
-
-
-
-
-
-
-
-
-
Network
-
-
-
Common
-
-
-
-
-
-
-
-
-
-
-
Clients
Network Nodes
-
-
-
-
-
-
-
-
-
-
-
Relays
-
-
Servers
Table 7: Description of properties from the ontology. Arrows denote subproperties.
k
r
o
w
t
e
N
n
o
m
m
o
C
s
e
d
o
N
k
r
o
w
t
e
N
s
t
n
e
i
l
C
Property
latency
jitter
bandwidth
reliability
packet loss
path/routing
congestion
time to Tor consensus
time to steady state
quantity
IP address
geolocation
stack
OS/kernel
hardware
CPU/memory usage
throughput
goodput
control overhead
retransmissions
behavior model
number of connections
duration of connections
trafﬁc type
idle time
time to ﬁrst byte
time to last byte
Tor
relay selection algorithm
max number of open circuits
max duration of circuits
circuit build time
errors
s
y
a
l
e
R
Tor relay conﬁguration
packet delay
congestion
processing (Tor)
processing (stack)
connections (number of:)
sockets open
streams and circuits
connecting clients
errors
s behavior model
r
e
v
r
e
S
port
Description
The amount of time it takes for a packet to traverse from one network node to another.
The variation in latency.
The amount of data a network connection can transfer in a given amount of time.
The probability of a network connection successfully transferring data.
The probability of a packet on an existing connection not arriving at the destination.
The set of network nodes a packet passes through to arrive at its destination.
The amount of trafﬁc load exceeding the capacity of the link or network node.
The amount of time until the Tor network generates a valid consensus ﬁle (the ﬁle directory authorities
publish containing information about every relay).
The amount of time until the network displays consistent behavior.
The amount of this particular type of node in the network.
The external IP address of the node.
Where the node is geographically located.
What Tor and associated processes are running on.
The operating system, especially the network stack.
The computer components and their characteristics, such as CPU speed and memory capacity.
The amount of CPU time and RAM used.
The total network trafﬁc seen in a given amount of time, including overhead such as packet headers and
retransmissions.
The total amount of usable trafﬁc seen in a given amount of time, therefore not including overhead from
headers or retransmissions.
The amount of trafﬁc that is spent on protocol data, rather than payload data.
The amount of trafﬁc that was duplicated as a result of TCP acknowledgements not being received (in time).
How the client behaves.
How many network connections the client creates (typically to servers, via Tor relays).
How long network connections last before being closed.
The protocol and trafﬁc properties (e.g., web pages, large downloads).
The time spent not sending any trafﬁc, either because there is nothing being sent over a currently active
connection, or because the client has completed all connections and has not yet started another.
The amount of time it takes to receive the ﬁrst byte of a download. Also known as round trip time (RTT).
The amount of time it takes to complete a download.
How Tor chooses which relays to route through.
The maximum number of Tor circuits simultaneously open.
The maximum amount of time circuits remain open.
How long it takes to construct a circuit.
The number and characteristics of errors encountered.
The conﬁguration of the Tor relay, whether in conﬁguration ﬁles or changes to the Tor application.
The amount of additional time it takes for a packet to enter and leave the entire relay.
Network congestion speciﬁcally as a result of the Tor relay process.
The amount of time spent processing packets within the Tor process.
The amount of time spent processing packets outside the Tor process (primarily the OS).
The number of network sockets the relay has open.
The number of TCP streams and Tor circuits.
The number of clients that connect to this relay.
The number and characteristics of errors encountered.
How the server interacts with the client application communicating with it.
The network ports the server is listening on. This is distinct from the behavior model in that Tor relays
interact with it (via exit policies), not just the client.
3432    30th USENIX Security Symposium
USENIX Association