## 行为、审计日志 (实时索引/实时搜索)建模 - 最佳实践 1          
### 作者                                                                                       
digoal                                     
### 日期                                       
2017-05-16                                   
### 标签                                     
PostgreSQL , ES , 搜索引擎 , 全文检索 , 日志分析 , 倒排索引 , 优化 , 分区 , 分片 , 审计日志 , 行为日志                         
----                                    
## 背景            
在很多系统中会记录用户的行为日志，行为日志包括浏览行为、社交行为、操作行为等。          
典型的应用例如：数据库的SQL审计、企业内部的堡垒机（行为审计）等。          
行为、审计日志的量与业务量或者操作量有关，为了满足企业实时查询的需求，通常需要构建搜索引擎，比如使用ES或者使用PostgreSQL的全文检索功能来实现。          
如果使用PostgreSQL来构建，有几个优势，可以满足多个需求：          
1\. 明细存储的需求，除了需要建立索引的字段，明细字段也可以存储在PostgreSQL中。          
2\. 索引的需求，即建立日志行为字段的全文索引。          
3\. 多维度索引的需求，除了日志行为字段的索引，还可以建立其他字段的索引，例如时间维度，属性维度的索引。这些索引可以组合使用，满足多个维度的搜索需求。          
4\. 不需要同步到搜索引擎，满足了实时搜索的需求。          
## 例子          
### 测试机          
磁盘，使用空间大、廉价的SATA盘，使用一块SSD作为BCACHE写缓存。            
```          
12 * N TB          
```          
目录规划，每块盘一个目录          
```          
/disk[1-12]          
```          
### 操作系统配置          
略          
### 编译PostgreSQL          
```          
wget https://ftp.postgresql.org/pub/snapshot/dev/postgresql-snapshot.tar.bz2          
tar -jxvf postgresql-snapshot.tar.bz2          
cd postgresql-10beta1          
LIBS=-lpthread CFLAGS="-O3" ./configure --prefix=/home/digoal/pgsql10_8k --with-blocksize=8 --with-wal-segsize=1024          
LIBS=-lpthread CFLAGS="-O3" make world -j 128           
LIBS=-lpthread CFLAGS="-O3" make install-world           
```          
### 环境变量          
```          
vi env_pg10.sh           
export PS1="$USER@`/bin/hostname -s`-> "          
export PGPORT=$(($1+1920))          
export PGDATA=/disk$1/digoal/pgdata/pg_root$(($1+1920))          
export LANG=en_US.utf8          
export PGHOME=/home/digoal/pgsql10_8k          
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH          
export LD_RUN_PATH=$LD_LIBRARY_PATH          
export DATE=`date +"%Y%m%d%H%M"`          
export PATH=$PGHOME/bin:$PATH:.          
export MANPATH=$PGHOME/share/man:$MANPATH          
export PGHOST=127.0.0.1          
export PGUSER=postgres          
export PGDATABASE=postgres          
alias rm='rm -i'          
alias ll='ls -lh'          
unalias vi          
```          
### 初始化集群          
创建12个数据库集群，对应到每一块磁盘。可以充分利用磁盘的IO。          
```          
vi init.sh          
for ((i=1;i $PGDATA/pg_hba.conf          
  echo "host    all             all             127.0.0.1/32            trust" >> $PGDATA/pg_hba.conf          
  echo "host    all             all             ::1/128                 trust" >> $PGDATA/pg_hba.conf          
  echo "host    all             all             0.0.0.0/0               trust" >> $PGDATA/pg_hba.conf          
done          
```          
```        
. ./init.sh        
```        
### 配置参数          
```          
postgresql.auto.conf          
# Do not edit this file manually!
# It will be overwritten by the ALTER SYSTEM command.
listen_addresses = '0.0.0.0'
max_connections = 400
unix_socket_directories = '.'
shared_buffers = 32GB
maintenance_work_mem = 2GB
dynamic_shared_memory_type = posix
vacuum_cost_delay = 0
bgwriter_delay = 10ms
bgwriter_lru_maxpages = 500
bgwriter_lru_multiplier = 5.0
bgwriter_flush_after = 0  
max_parallel_workers_per_gather = 0
fsync=on
synchronous_commit = off
full_page_writes = off
wal_buffers = 128MB
wal_writer_delay = 2s
wal_writer_flush_after = 0  
checkpoint_timeout = 10min
max_wal_size = 32GB
min_wal_size = 4GB
checkpoint_completion_target = 0.5
checkpoint_flush_after = 128kB  
max_wal_senders = 0
random_page_cost = 1.5
effective_cache_size = 48GB
log_destination = 'csvlog'
logging_collector = on
log_truncate_on_rotation = on
log_checkpoints = on
log_connections = on
log_disconnections = on
log_error_verbosity = verbose
log_timezone = 'PRC'
autovacuum = on
log_autovacuum_min_duration = 0
autovacuum_freeze_max_age = 500000000
autovacuum_multixact_freeze_max_age = 600000000
vacuum_freeze_table_age = 400000000
vacuum_multixact_freeze_table_age = 400000000
datestyle = 'iso, mdy'
timezone = 'PRC'
lc_messages = 'C'
lc_monetary = 'C'
lc_numeric = 'C'
lc_time = 'C'
default_text_search_config = 'pg_catalog.english'
autovacuum_work_mem = 2GB
autovacuum_max_workers = 6 
autovacuum_naptime = 20s
autovacuum_vacuum_scale_factor = 0.2
autovacuum_analyze_scale_factor = 0.2
autovacuum_vacuum_cost_delay = 0
autovacuum_vacuum_cost_limit = 0
zero_damaged_pages = on  
```          
```          
cp postgresql.auto.conf /disk1/digoal/pgdata/pg_root1921/          
...          
...          
cp postgresql.auto.conf /disk12/digoal/pgdata/pg_root1932/          
```          
### 启动集群          
将数据库实例绑定到不同的CPU核        
```          
vi start.sh          
for ((i=1;i<13;i++))          
do          
  . /home/digoal/env_pg10.sh $i          
  if [ $i -eq 12 ]; then          
  numactl --physcpubind=56-63 pg_ctl start -o "-c port=$PGPORT"          
  else          
  numactl --physcpubind="$((($i-1)*(5)+(1)))"-"$(($i*5))" pg_ctl start -o "-c port=$PGPORT"          
  fi          
done          
```          
```        
. ./start.sh        
```        
### 停止集群          
```          
vi stop.sh           
for ((i=1;i<13;i++))          
do          
  . /home/digoal/env_pg10.sh $i          
  pg_ctl stop -m fast          
done          
```          
```        
. ./stop.sh        
```        
### 建模    
#### 表结构  
4个字段，分别存储PK(对应原始明细数据的PK)，时间，用户ID，用户行为（tsvector字段）。          
#### 检索需求	  
检索时可能按照时间区间，用户ID，以及分词条件进行检索。          
#### 保留时长  
日志保留一段时间（例如1个月）后清除。          
#### 分区  
每个集群中，创建若干个分区表，例如本例使用了12个分区表。          
如果条件允许，建议每个小时一个分区表，这样的话可以不建时间索引，查询时间区间的数据使用分区即可。          
如果单个用户的数据量很庞大，那么建议按UID再建立哈希或LIST分区，这样的话，按照UID查询，不需要使用索引（可以省去在UID建立索引，甚至省去存储UID这个字段）。          
#### 索引  
行为字段，全文索引。  
用户ID，B-TREE索引。  
时间字段，brin块级索引。  
#### 模拟数据  
时间，时序产生。  
用户ID，在一个范围内随机产生。  
用户行为数据，长约512字符的字符串，拆分成若干个TOKEN，例如本例为40个长度不等的TOKEN。  
### 初始化数据表          
```          
vi init.sql          
drop table bptest cascade;          
do language plpgsql $$          
declare          
begin          
  for i in 1..12 loop          