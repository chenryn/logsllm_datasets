uado
→用来打开设备的函数
图21-2
21.3字符设备驱动程序示例：Schar
我们来看一个字符设备驱动程序示例，我们给它起名为Schar。这个设备以它自已杜撰的方
式实现了读、写功能，它假装从一个以固定时间间隔准备好数据的字符设备那里取得数据再提
供给应用程序。应用程序对设备的响应机制是由内核提供的定时器来管理的，我们将在下一小
节对此做出详细的解释。
Schar.c以函数的预声明部分开始，这些提前声明了的函数组成了我们将要实现的该设备的
file_operations结构。我们将分阶段编写出这些文件操作函数来。
/* forward declarations for _fops */
offset):
static int schar_ioctl(struct inode *inode, struct file *file, unsigned int cmd.
unsigned Iong arg1:
static int schar_mmap(struct file *file, struct vm_area_struct *vma);
加入jaVa编程群：524621833
---
## Page 713
696
Linux程序设计
static int schar_release(struct inode *inode, struct file *file);
static struct file_operations schar_fops = [
NULL,
/*llseek *
schar_read,
schar_write,
NULL,
schar_poll,
/* readdir *
schar_ioct1,
schar_open.
NULL,
/* ap */
NULL,
schar_release.
'* flush */
NULL,
NULL
/*fsync */
NULL
/* 1ock */
tasync *;
有些人喜欢把file_operations结构放在模块的最开始，有些人喜欢把它们放在最后面。如果
采用后一种办法，我们就不需要非得在文件的开始部分对它们进行预定义。但这都是些个人习
惯方面的问题。现在不要去管那些头文件，我们会随着内容的展开把它们介绍给大家。
21.3.1MSG宏命令
在深人Schar.c的源代码之前，我们先要把我们将在这一章反复用到的MSG宏命令介绍给大
家。它替代打印语句来输出调试信息，但用起来更方使。为了不让代码里面到处都是“丑随”
的“#ifder”语句，我们把MSG的定义放在schar.h文件里去，如下所示：
define DZBUG
ifdef DEBUG
#define MSG(strang. args...)
feise
fendif
这会使代码看起来很整洁，并且会在每一条调试信息之前加上模块的名字。为各种事件定
义一个掩码也很容易做到；如果愿意的话，你可以用这种办法对调试信息的记录功能做更精细
的控制。Schar很简单，所以把一些都记录下来还是可以做到的。如果编译时没有定义DEBUG标
志，MSG就将是一个空操作。有时候，在调试语句里加上更多的信息是有好处的，特别是大型
设备驱动程序项目更是如此。我们也可以在调试信息里加上行号和文件名信息，这样我们就能
在源代码里快速地找到与某条信息对应的位置。这应该是下面这样的一些语句：
defane MSG(gtring, args-) printk(KERN_DEBUG 1
'schar:__FILE_.-_LINE_.:string. #args)
具体选择哪个宏定义完全在于你个人的决定。书中的模块都使用前一种定义，因为这个模
块比较简单，不需要额外的信息。
21.3.2字符设备的注册
类似十hello模块，Schar自然也需要用一个init_module人口点。它还将完成许多工作，比如
分配内存、初始化定时器和变量，等等。但现在我们先来看看设备的注册问题。
加入jaVva编程群：524621833
---
## Page 714
第21章设备驱动程序
697
int init_module(void)
Int res;
if (schar_name *e NULL)
schar_name = *scher*;
res = register_chrdev [SCHAR_MAJOR, schar_nane, &schar_fops) ;
/*register device wath kernel *.
if (res}（
MSG(*can't register Gevice wath kernel\n′1;
return res:
schar_name可以做为-个参数传递到模块里去-我们稍后再讨论它。代码先检查有没有一
个给定的名字，如果没有，就把它设置为缺省值
SCHAR_MAJOR在schar.h文件里被定义为42，我们前面已经说过这是一个系统保留给本地
使用的设备主编号。其实，只要没有被其他活跃的设备使用，你选哪个编号都没关系。但既然
是自已做实验，还是选一个保留的主编号更安全。
define SCHAR_KAJOR42
动态分配主编号也可以考虑。这个办法的好处是你不必操心主编号方面的事情，但坏处是
（至少在我们这个例子里）我们每次加载这个模块的时候都要在创建了新的设备特殊文件后才能
使用这个模块（如果模块每次加载时返回的主编号都不同的话）因为这个原因，我们还是使用
静态主编号吧。动态注册实现起来并不难，它应该和下面这段代码差不多：
int major • 0, res;
MSGi*can't register device with kernel\n*);
return res;
}else {
MSGt*device registered vith major 8d\n*. major1;
major = res;
这一章的所有设备示例使用的都是静态主编号方法，我们把向动态分配方法的转换留给读
者做练习。
在成功调用register_chrdev之后，设备注册到了内核，设好的文件操作结构添加到了字符切
换表里。在/proc/devices的字符设备部分也应该能够看到我们的设备名了。
21.3.3模块的使用计数
内核需要记录加载到系统里的每一个模块的使用情况。如果不是这样，它就无法知道什么
时候移掉一个模块是安全的。如果在你正在向硬盘拷贝文件的时候一个硬盘驱动程序从内核里
被去掉了，会有什么样的后果？它会给硬盘带来灾难并使文件系统处于个不可靠的状态。大
家背定不希望发生这样的问题。
修改模块使用计数器需要用到两个宏命令，它们一个是MOD_INC_USE_COUNT，另个
是MOD_DEC_USE_COUNT。前者给计数器加上“1”，而后者给它减去“1”。维护模块使用计
数器的责任完全落在编写驱动程序的程序员身上，他既要保证模块不会被意外地加载，还要保
加入jaVa编程群：524621833
---
## Page 715
698
Linux程序设计
证当模块不再被使用时能够安全地从内核里去掉。MOD_IN_USE宏命令能够求出模块当前的使
用计数，但这几乎没有什么必要，因为内核自己在尝试去掉一个模块之前是会对这个数字进行
检查的。
21.3.4open和release：设备的打开和关闭
现在模块已经被加载，它会在系统上等待有人打开与之关联的设备。当设备被一个进程打
开的时候，schar_open将被调用。模块的使用计数就是在这里得到增加的，这可以防止设备在忙
于工作的时候被意外地从内核里删除掉。请看下面这段代码：
static int schar_open(struct inode *inode, struct file *file)
MOD_INC_USE_COUNT;
uno 
这告诉内核现在至少已经有一个进程在使用若这个模块了。如果此时有用户执行了一个
“rmmodmodule_name”命令，内核就会对所有使用计数大于零的模块（即它们正在使用中）返
回一个“-EBUSY”错误。保持使用计数处于最新状态的责任完全在于模块自已。我们在
schar_open里增加使用计数以保证有进程打开模块的时候它不会被意外删除。当有进程关闭设备
的时候，我们再减少使用计数以保持其平衡。
传递给schar_open的file参数是内核对返回给应用程序的文件描述符的-个内部描述。file结
构里有关于设备打开模式的信息。下面这个代码段可以用来测试设备是不是以读方式打开的，
如下所示：
if (file->f_mode& FMODE_READ)(
MSG1*opened for readingn*);
file结构里还有下一个读操作发生位置等其他信息。下面给出的是该结构与我们这个模块有
关的东西（当然还有许多其他的数据项）：
struct file [
node_t
loff_t
f_node:
unsigned intfflags;
f_mode是表示的打开模式，可以是读、写或者读写。f_flags提供了更多的信息，其中有一
些是与设备模块有关的，比如O_NONBLOCK或O_NDELAY等。这些标志是从用户空间应用程
序传递给open调用的，它们控制着设备在读和写方面的操作行为。所有有关资料都可以在
asm/fcntl.h文件里查到。f_pos是将要进行读写操作的下一个位置。
我们再回到schar_open函数上来，下一步是设置定时器—我们将在下一小节对它进行详细
的讨论。schar_open最后会把被打开设备的主、辅编号打印出来，这两个编号是从传递给它的
inode那里提取出来的。我们现在还用不着它们，但在后面对模块进行检查的部分将利用这个信
息区分这个驱动程序的不同实例。我们在第3章里介绍过inode的概念，它标识出磁盘或内存中的
加入jaVva编程群：524621833
---
## Page 716
第21章设备驱动程序
669
文件，里面有属主、访问时间、长度、文件系统类型等许多有用的信息、stat系统调用可以把
inode里的信息提取出来。如果对一个文件执行stat命令，就可以查到诸如这个inode提供了什么
数据之类的许多线索（stat命令是stat系统调用的内核外对应事物）。详细资料请查阅linux/fs.h文
件-—注意文件系统的类型是如何在一个union类型的数据结构u里被定义的。Linux支持许多种
文件系统！
schar_release除了将使用计数减1之外没有其他事情可做。也没有什么事情需要它做，这是
因为Schar设备在每次被打开时既不保有通过malloc分配到的内存，也没有需要刷新的其他状态
信息。
statie int schar_release(struct inode *inode, struct file *fi1e)
MOD_DEC_USE_COUNT;
return 0;
21.3.5文件操作read：从设备读出数据
schar_read函数假装从设备读取了数据（实际上它是从一个内部数据队列里读到的），然后
把数据传递到用户空间去。Schar用一个全局变量对数据队列进行记录：当有数据可用的时候，
变量schar_pool里保存的是设备可以供应的数据字节数。这就意味着如果在调用函数schar_read
的时候变量schar_pool是零或是一个负数，读进程就必须转人非活联状态直到有数据可读为止。
static ssize_t schar_read(struct file *file, char *buf, size_t count,
loff_t *offset)
while（count >schar_pool){
/ if less data than requested is here, put process to sleep */
MSG(*putting process with pid fu to sleep\n*, current->pid):
interruptible_sleep_on(&schar_wq) ;
/*go to sleep, but wake up on signals */
if(signal_pending(current))(
MSG(*pid u got signal\n*,(unsigned)current->pid);
/*tell vfs about the signal*/
reLurn -EINTR;
* copy the data fram our buffer */
if (copy_to_user(buf, schar_buffer, count))
return -EPAULT;
-oo
schar ,data read += count;
NSG(*want to read eu bytes, tld bytes in queue\n*, (unsigned)count,
schar_pool) ;
/*return data written */
file->f_pos +e count:
return count;
！
这看起来挺人，我们来一步一步地讲解它：count变量是读进程请求的数据总量。如果
count大于schar_pool，这个读请求就无法满足，我们就必须把读进程挂起来直到它请求的数据充
加入jaVa编程群：524621833
---
## Page 717
700Linux程序设计
足为止。interrupible_sleep_on的作用是改变进程的状态并把它添加到schar_wq等待队列里去。
我们很快就会讲到等待队列了—它向我们提供了这样一种手段：把对设备进行读操作的进程设
置为一-个非执行状态，再通过调度器程序选择-个新进程去执行。来自我们内部缓冲区的数据
在copy_to_user的帮助下拷贝回应用程序，这个概念我们也要过一会儿才能详细讨论。
在schar_read函数的结束部分，我们从缓冲池里（以字节计算的长度保存在schar_pool变量
里）减去count字节，然后返回已经读取的字节数。在这个例子里返回的将是count，这是因为我
们假定此时已经精确地写了应用程序所请求的那么多字节。它与dd命令合作的很好，因为我们
可以指令dd准确地请求读取我们需要的字节数。我们一会还会在Schar设备上试试cp命令，到那
时大家就会明白我们的意思了一一在我们的系统！，cp以4KB的数据块为单位请求数据直到读
操作返间o字节为止。也就是说，你可以向Schar设备提供尽可能多的数据，而cp命令则永不满足
地请求更多的东西。
如果你现在对schar_read函数的许多地方还弄不明白，请不要着急。我们将在后面这儿个小
节里把它的各个部分分开来讲解。
21.3.6current任务
在schar_read函数里的好几处地方出现了current宏定义。这个宏定义代表着当前运行中的进
程，是一个任务结构的数据项。也就是说，我们在schar.read里处理的那个叫做current的东西代
表的就是正在做读设备操作的当前进程。任务结构有许多元素一一它完整的清单可以在
linux/sched.h头文件里查到。下面是我们直接或间接地用到了的几个数据域：
struct task_struct{
volatile 1ong state:
int sigpending:
pyd 2°pfd
sigset_t 8lgna1. blocked:
正如大家看到的，系统里的所有任务其实是链接在一个双向链接列表里的。state给出的是进
程的当前状态，即它是正在运行、被停止、还是正在被切换。我们将在讨论等待队列的那一小
节对这一向题组深人探讨。pid是该进程的程序标识码。signal保存着与发送给该进程的一切信号
有关的信息，而blocked是进程本身决定屏蔽的信号掩码。最后，sigpending保存着与是否有一个
非阻塞信号发送给了该进程有关的信息，signal_pending函数检查的就是这个变量。因此，如果
signal_pending返回的是真值，我们就通知VFS并让它重新开始数据传输过程。
21.3.7等待队列
当没有数据可读的时候，我们利用等待队列把current任务设置为休眠状态：当有新的数据拷
贝到Schar设备来的时候，我们再把它唤醒。这就解放了系统，使它可以去运行其他的进程、操
作系统的进程调度器在我们唤醒任务之前是不会去考虑它的，而我们只有在使它休眠的条件得
加入jaVa编程群：524621833
---
## Page 718
第21章设备服动程序701
到了满足的前提下才会去唤醒它。这使内核代码对那些访问自已的用户空间应用程序拥有了极
大的控制权。
schar_read就使用了这个技术，我们过一会儿还会再看到它。现在先来看看它的具体实现过
程。下面是等待队列的数据结构定义：
struct wait_queve u
struct task_struct *task
struct wait_queue *next;
 ;