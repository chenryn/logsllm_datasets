leverage VSA to locate the definition of parameter of our interest
and obtain its computation path to the destination. In particular,
for a given list of target APIs and their parameters of our interest,
our VSA runs as follows:
• Backward slicing. Program slicing [38] is a technique to iden-
tify program code of interest based on slicing criteria (e.g., control
dependence or data dependence), which has been widely used
to tackle important program analysis problems. Given the target
system APIs and parameters, the backward slicing algorithm
starts from constructing a control flow graph (CFG) where each
node of the graph represents a block, which contains a set of
instructions without transfers, and every edge connecting blocks
indicates a transfer of program control flow. Based on the CFG,
the backward slicing starts tracing from the instruction which
contains our targeted APIs (i.e., the sink) backwardly to the defi-
nition (i.e., the source) of the interested parameter. Specifically,
it iterates each instruction within each block and records the in-
structions that either have data dependency with the interested
parameter (i.e., modifying its value) or control dependency with
recorded instructions (i.e., preceding condition). These recorded
instructions and parameters are maintained in the instruction
stack and parameter stack respectively. We implement our back-
ward slicing in a flow-sensitive and context-sensitive manner,
where we fork the instruction stack at each branch, and maintain
each stack separately.
• Value computation. With the sliced instructions, the value of
each target parameter can be computed by following the execu-
tion path from its source to its sink. This process is automated
by continuously popping the top instruction on the stack and
simulating its execution of the instructions if it is data-arithmetic
or well-known APIs according to its definition provided by the
official documentation until the stack is empty.
The extraction of the UUIDs, their hierarchy and the vulnerability
identification are all built atop our backward slicing and value
computation. In the following, we describe how we configure it to
achieve these.
5.2 UUID Extraction and Hierarchy
Reconstruction
The first step for UUID extraction and the hierarchy reconstruction
is to acquire a list of target APIs that are related to the UUID
generation and its hierarchy. We have identified seven system APIs
according to the documentation from official Android framework,
and the details of these APIs and their parameters are presented
in Table 1, where the target parameters are highlighted in the last
column. In particular, the extraction of UUID depends on all seven
APIs listed in Table 1 for the corresponding category of UUID, while
the hierarchy reconstruction relies only on the first three of them.
Unlike the extraction of UUID that can be resolved by the stan-
dard procedure of value-set analysis, the reconstruction of hierarchy
requires extra processes. To systematically solve this problem, we
designed and implemented a hierarchy reconstruction algorithm,
which is presented in algorithm 1. More specifically, the algorithm
starts with the initialization process (line 2-3), where the value-
set analysis (VSA) procedure is triggered when encountering the
two functions getDescriptor() and getCharacteristic(). Note
that the VSA is invoked with a focus on the base of the function (i.e.,
the variable v0 of v0.getDescriptor(v1)), to obtain the program
slice of the descriptor and characteristic instances. A tree node T
is initialized to record the hierarchy of the UUIDs (line 4). Next,
the algorithm iterates through all the program slices obtained from
API getCharacteristic() (line 5). For each value-set result of the
slice SD, the algorithm adds all the (characteristic, descriptor) pairs
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1475Category
UUID
BLE
Cryptography
Parameters
API Name
BluetoothGatt: BluetoothGattService getService
UUID uuid
BluetoothGattService: BluetoothGattCharacteristic getCharacteristic UUID uuid
BluetoothGattCharacteristic: BluetoothGattDescriptor getDescriptor UUID uuid
ScanFilter.Builder: ScanFilter.Builder setServiceUuid
ScanFilter.Builder: ScanFilter.Builder setServiceUuid
ScanFilter.Builder: ScanFilter.Builder setServiceData
ScanFilter.Builder: ScanFilter.Builder setServiceData
BluetoothGattCharacteristic: boolean setValue
BluetoothGattCharacteristic: boolean setValue
BluetoothGattCharacteristic: boolean setValue
BluetoothGattCharacteristic: boolean setValue
Cipher: byte[] doFinal
Mac: byte[] doFinal
MessageDigest: byte[] digest
ParcelUuid serviceUuid
ParcelUuid serviceUuid, ParcelUuid uuidMask
ParcelUuid serviceDataUuid,byte[] serviceData
ParcelUuid serviceDataUuid,byte[] serviceData,byte[] serviceDataMask
String value
int value,int formatType,int offset
byte[] value
int mantissa,int exponent,int formatType,int offset
byte[] data
byte[] data
byte[] data
Table 1: Targeted APIs for BleScope
Algorithm 1: UUID hierarchy reconstruction.
Input
Output:T : A hierarchy tree
:G: The control flow graph
SD ← V SA(G, SIG_GET DESCRI PT OR, base)
SC ← V SA(G, SIG_GET CH ARACT ERI ST IC, base)
T ← New TreeNode
for slice ∈ SD do
for (char acteristic, descriptor) ∈ slice .valueset do
Add the characteristic-descriptor UUID binding to T
1 Function HierarchyReconstuction(G)
2
3
4
5
6
7
8
9
10
11
12
13
14
15
end
for slice ∈ SC do
end
return T
end
end
for (service, char acteristic) ∈ slice .valueset do
Add the service-characteristic UUID binding to T
to T (line 6-9). Similarly, the service-characteristic hierarchy can
also be reconstructed (line 10-14). Finally, the algorithm outputs a
tree node T that stores all the hierarchical information (line 15).
5.3 Vulnerability Identification
The focus of this step is to identify vulnerable implementations
in term of absent cryptographic usage and flawed authentication.
In addition, the precondition of these two vulnerable implementa-
tion is that a BLE IoT device uses the “Just Works” paring, which
indicates that the BLE channel is insecure due to the fact that the
long term encryption key can be sniffed by nearby attackers. There-
fore, the first step in this procedure is to recognize whether such
precondition exists in an app.
To recognize the existence of such precondition, BleScope has
to look into how an app pairs with its BLE IoT devices. Accord-
ing to the official Android BLE developer guide, there are two
ways for an app to implement a secure pairing process: one is
to invoke the createBond() API and the other one is to define
responses when receiving a system broadcast event that carries
ACTION_BOND_STATE_CHANGED, a constant value indicating a change
in the bond state [5]. If neither of these two implementations exists
in the app code, then the app can be concluded for using “Just
Works” paring with the peripheral. Therefore, BleScope recognizes
an app implementing the “Just Works” paring if no such pairing
process can be identified.
Absent cryptographic usage detection. The detection of this
vulnerable implementation depends on identifying whether the
data exchanging between an app and its BLE IoT device is en-
crypted. In other words, we have to check whether the generation
of the data for exchanging involves encryption. To this end, we
first create a list of four system APIs whose parameters carry the
data for communication, which is shown in Table 1 under the cat-
egory of “BLE”. With this list of target APIs and parameters, we
backward iterate each instruction that is related to them, which can
be obtained by backward slicing in the value-set analysis, to detect
whether it involves encryption or hashing by comparing with the
list of cryptographic APIs, part of which are shown in Table 1. If
no encryption or hashing is detected, then the app is recognized as
vulnerable.
Flawed authentication. The identification of flawed authentica-
tion is to detect if all the data sent out to the peripheral is generated
with hardcoded sources, which means it is possible to recover the
value based on the program code. For this regard, the target APIs
and parameters are the same as that for absent cryptographic usage
detection. Unlike the algorithm to detect the existence of crypto-
graphic operation, here we only focus on all the sources, which can
be identified by the backward slicing, that contribute to the final
data sent to the BLE IoT device. If all sources are hardcoded (no
external input), then the final data should definitely be considered
hardcoded.
6 EVALUATION
We have implemented a prototype of BleScope with a number
of open source tools and hardware components. In particular, we
implemented the Android app analysis component atop Soot [9],
which is a powerful and popular static analysis framework for
reverse engineering of Android apps. We implemented ou BLE
devices sniffer with Raspberry-PI running Linux connected with
a SIM7000A GPS module, and a special Bluetooth adapter, Parani-
UD100, with an amplified Patch Antenna RP-SMA-R/A. In this
section, we present our evaluation results. We first describe how
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1476we setup the experiment (§6.1), then present our analysis results
with mobile apps (§6.2), followed by the field test result (§6.3).
6.1 Experiment Setup
BLE IoT Apps Collection. In this work, we focus on analyzing
BLE IoT apps that are available from the Google Play. However, the
Google Play does not provide information that directly indicates an
app is of BLE IoT type. Therefore, we apply a heuristic to find these
apps. In particular, we first checked whether an app has Bluethooth
related permissions in its manifest file, and we found 135, 359 of
them out of 2 million free apps crawled from the Google Play as
of April 2019. Since we only focus on BLE related apps, not the
classic Bluetooth apps, so we checked each of them to see if the
app invokes BLE related APIs (shown in Table 2) and we found
68, 908 apps. However, many of them are beacon apps, e.g., Macy’s,
which only invoke scanning related APIs (the first 6 APIs in Table 2),
which means these devices will not be connected (are not within
our attack scope). Consequently, we further identified the apps
supporting BLE connection by searching for after-connection BLE
APIs (the 7th to 11th APIs in Table 2). Eventually, we found 18, 166
BLE IoT apps for our analysis, as reported in the first row of Table 3.
Environment setup. Our evaluation consists of two sets of experi-
ments: the static analysis of mobile apps, and the passive sniffing of
advertisement UUIDs in the field (due to ethics considertion, we did
not perform any active operations with the devices). In particular,
the static analysis including value-set analysis and vulnerability
identification was conducted on a Linux server running Ubuntu
16.04 equipped by two Intel Xeon E5-2695 CPUs. The advertisement
UUIDs sniffing was conducted by the sniffer we built.
6.2 Mobile App Analysis Result
It took approximately 96 hours to finish the analysis with these
18, 166 BLE IoT apps. At a high level, the experiment results of the
static analysis are broken down into two parts: (1) UUID extraction
and hierarchy reconstruction, and (2) Vulnerable app identification.
The statistics and descriptions are presented in the following.
Results of UUID extraction and hierarchy reconstruction. In
total, BleScope has extracted 168, 093 UUIDs from 18, 166 IoT com-
panion apps. Many of these UUIDs are repeated , and only 13, 566 of
them are unique. In addition to the UUIDs extraction, BleScope also
reconstructed their hierarchies which are used for active fingerprint-
ing. As shown in Table 3, our system reconstructed 316, 379 (58.5%)
UUID hierarchy service edges and 224, 418 (41.5%) UUID hierarchy
characteristic edges, which indicate 316, 379 service-characteristic
pairs and 224, 418 characteristic-descriptor pairs. During the UUID
analysis procedure, there are multiple UUIDs that cannot be directly
identified because their generation involves computations, such
as concatenation and shifting. In order to identify these UUIDs,
BleScope has to use VSA to compute them. The statistics of these
computations is presented in Table 4.
In addition, we also report the mapping between the UUIDs and
the apps, since there could be multiple apps using the same UUID
(that is why UUID hierarchy and active fingerprinting is needed).
This result is presented in Table 5, where we group the UUIDs based
on the number of apps they are mapped to. As shown in the table,
a majority (65.4%) of the UUIDs can be uniquely mapped to only 1
app, which shows the corresponding devices can be easily passively
fingerprinted. As for the remaining 34.6% UUIDs, they are mapped
to multiple apps (which requires further active fingerprinting if
needed to narrow them down).
We investigated the reasons of why multiple apps could use the
same UUID and discovered that (i) multiple apps from the same
vendors (e.g., HP) could manage the same single device (e.g., the
printer); (ii) different apps (e.g., fitness apps) from different vendors
can manage the same device as well (e.g., a wrist band); (iii) apps
can reuse standard service UUIDs; (iv) apps accidentally share the
same UUIDs. Therefore, while some UUIDs are mapped to several
apps, they actually represent a specific kind of devices or those from
the same manufacture, which still can be passively fingerprinted
(and we can actually connect to these devices to fetch next layer
UUIDs to uniquely fingerprint them if needed).
Vulnerable mobile app identification. The statistics of the apps
whose BLE IoT devices are vulnerable to sniffing (both passive
and active) and unauthorized access is summarized in Table 6. The
identification process strictly follows the analysis steps defined
in §4.1. Overall, from the 18, 166 apps we analyzed, BleScope has
reported that 11, 141 (61.3%) apps adopt “Just Works” pairing which
indicates that their BLE channel is insecure. Among the 11, 141 inse-
cure apps, we further discovered that 1, 510 (13.6%) of them do not
use any cryptographic function to encrypt BLE-related data, 1, 434
(12.9%) have implemented flawed authentication (i.e., hard-code
their authentication credentials) or no authentication. Even worse,
1, 187 (10.7%) apps have both vulnerabilities, directly implying that
their IoT devices are vulnerable to traffic sniffing and unauthorized
access attacks. Note that we applied a very strict rule (e.g., to make
sure each data to be sent is hardcoded) to identify vulnerable apps.
Therefore, we can have false negatives in our result.
We categorized the vulnerable apps according to their categories
on Google Play, and the distribution of vulnerable apps is shown in
Table 7. Interestingly, we find that health and fitness apps contribute
most to all the vulnerable apps, followed by tool apps, lifestyle apps
and business apps. In addition, we further break down the statistics
according to different vulnerabilities, which reveals that a majority
apps adopt insecure pairing (“Just Works”), and it is equally common
for apps to be vulnerable to sniffing attack (absent cryptographic
usage) and unauthorized access (flawed authentication).
6.3 Field Test Result
Our mobile app analysis only tells “what are those vulnerable IoT
apps and their corresponding devices”. Then the next question is
“where are they located”. To answer this question and also for the
demonstration of our attack, we took our long-range BLE adver-
tisement packet sniffer and drove around a small area nearby our
campus for a field test. To precisely locate where these devices are,
we added a GPS location record to the first appeared UUIDs in our
sniffer, along with the received MAC address to uniquely identify a
particular BLE device. The summary of the scanned UUID statistics
is shown in Table 8.
Overall, we have collected 30, 862 unique Bluetooth devices
(based on the MAC address), and 5, 822 of them contain UUIDs,
Session 7A: Internet of ThingsCCS ’19, November 11–15, 2019, London, United Kingdom1477API Name
BluetoothAdapter: void startLeScan
BluetoothAdapter: void startLeScan
ScanFilter.Builder: ScanFilter.Builder setServiceUuid
ScanFilter.Builder: ScanFilter.Builder setServiceUuid
BluetoothLeScanner: void startScan
BluetoothLeScanner: void startScan