# 二、学习 Docker 命令
在本章中，我们将学习一些基本的 Docker 命令。当我们关注最重要的命令之一`container run`命令时，我们也将涵盖您每天将使用的许多其他命令。这些命令包括列表容器命令、停止容器命令和移除容器命令。在此过程中，我们还将发现其他容器命令，如日志、检查、统计、附加、执行和提交。我想你会发现这一章是 Docker 教育的极好基础。
BIC: The Bureau of International des Containers was founded in 1933 as a neutral, non-profit, international organization whose mission is to promote the safe, secure, and sustainable expansion of containerization and intermodal transportation.
到本章结束时，您将了解以下内容:
*   当前和以前的命令行语法
*   使用版本命令的两种方式
*   如何使用`container run`命令及其许多可选参数
*   如何启动和停止容器，查看关于容器的信息，与正在运行的容器进行交互，以及如何保存和重用对容器所做的更改
# 技术要求
您将从 Docker 的公共 repo 中获取 Docker 映像，并安装 jq 软件包，因此需要基本的互联网访问来执行本章中的示例。
本章代码文件可在 GitHub:
[https://GitHub . com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/chapter 02](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter02)
查看以下视频，查看正在运行的代码:
[http://bit.ly/2P43WNT](http://bit.ly/2P43WNT)
# 关于命令语法的信息
在我们深入学习 Docker 命令及其众多选项之前，我想告诉您 2017 年 1 月发生的对 Docker CLI 的更改。
随着 Docker 的每一个新版本，命令和相关选项的数量都在增加。Docker 认为这种复杂性需要解决。所以，随着 Docker 1.13 版本的发布(Docker 也在 2017 年改变了版本号方案)，CLI 命令被划分到了管理功能组。例如，现在有一个命令容器管理组和一个命令映像管理组。这将改变您运行 Docker 命令的方式。下面是使用新旧`run`命令的一个例子:
```
# the new command syntax...
docker container run hello-world
# the old command syntax...
docker run hello-world
```
这一更改提供了更好的命令组织，但也增加了命令行的冗长性。这是一种交换。目前，据我所知，旧的命令语法仍然适用于所有 Docker 命令，但是对于本书的其余示例，我计划使用新的语法。至少我会努力，因为旧习惯很难改掉。
我想在这里说明的另一点是，大多数命令选项都有短格式和长格式。我将尝试在我的例子中至少分享一次长格式作为选项，这样你就会知道短版本代表什么。如果您安装了 Docker 命令行补全，它将是一个有用的资源，有助于记住新的基于 Docker 管理的命令以及可以与它们一起使用的参数。下面是容器命令的顶层命令完成帮助:
![](img/f5fa4bbe-0891-4883-8c95-ddb910ca7e9a.png)
该命令列表为我们提供了本章中要复习的一些命令的预览，因此让我们开始学习 Docker 命令。在[第 1 章](1.html)、*设置 Docker 开发环境*中，我们使用了两个非常常见的 Docker 命令:`version`命令和`run`命令。当你认为你知道关于`version`命令的几乎所有事情时，你可能会惊讶地发现它还有另一个锦囊妙计。Docker 的版本命令还有另一个版本。
# 版本命令
您已经使用`docker --version`命令作为快速测试来确认 Docker 已安装。现在尝试不带破折号的命令:
```
docker version
```
该命令版本为您提供了系统上安装的 Docker 版本的更多详细信息。值得注意的是，我们稍后将讨论的 docker-compose 命令也有两个版本的 version 命令——一个带有提供单行响应的破折号，另一个不带破折号，提供更多细节。
Remember that all the Docker commands have a rich help system built in. Try it by entering any part of a Docker command and using the `--help` parameter. For example, `docker container run --help`.
# Docker 运行命令
既然我们会经常使用`run`命令，我们现在应该看看。您已经以最基本的形式使用了`run`命令:
```
# new syntax
# Usage: docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]
docker container run hello-world
# old syntax
docker run hello-world
```
该命令告诉 Docker，您希望基于描述为 hello-world 的映像运行一个容器。你可能会问自己，当我安装 Docker 时，hello-world 容器映像安装了吗？答案是否定的，`docker run`命令将查看本地容器映像缓存，看是否有与所请求容器的描述相匹配的容器映像。如果有，Docker 将从缓存的映像运行容器。如果在缓存中没有找到所需的容器映像，Docker 将联系 Docker 注册表来尝试下载容器映像，并在此过程中将其存储在本地缓存中。Docker 将从缓存中运行新下载的容器。
Docker 注册表只是一个存储和检索 Docker 映像的集中位置。稍后我们将具体讨论注册表和 Docker 注册表。现在，只需了解有一个本地映像缓存和一个远程映像存储。当我们在[第 1 章](1.html)*中运行 hello-world 容器时，您看到了在本地找不到容器的过程。*以下是 Docker 在本地缓存中找不到容器映像，必须从注册表下载时的情况:
![](img/8d336a4c-94d9-4a62-832f-c6a370eb84de.png)
您可以使用 docker `pull`命令为本地 docker 缓存预植入您计划运行的容器映像；例如:
```
# new syntax
# Usage: docker image pull [OPTIONS] NAME[:TAG|@DIGEST]
docker image pull hello-world
# old syntax
docker pull hello-world
```
如果用`pull`命令预取容器镜像，当执行 docker `run`命令时，它会在本地缓存中找到镜像，不需要再次下载。
您可能在前面的截图中注意到，您请求了 hello-world 容器映像，Docker 搜索本地缓存失败，然后从存储库中下载了`hello-world:latest`容器映像。每个容器映像描述由三部分组成:
*   docker registry host name
*   斜线分隔的名称
*   标签名
第一部分，注册表主机名，我们还没有看到或使用，但它是通过公共 Docker 注册表的默认值包含的。只要不指定注册表主机名，Docker 就会不可见地使用公共 Docker 注册表。该注册表主机名为`docker.io`。Docker 注册表的内容可以在[https://hub.docker.com/explore](https://hub.docker.com/explore)浏览。这是 Docker 映像的主要公共商店。可以建立和使用其他公共或私有的映像注册中心，许多公司都会这样做，建立他们自己的私有 Docker 映像注册中心。我们将在第 8 章*Docker 和 Jenkins* 中对此进行更多的讨论。现在，请理解 Docker 映像描述的第一部分是托管容器映像的注册表主机名。值得注意的是，注册表主机名可以包括端口号。这可用于配置为在非默认端口值上提供数据的注册表。
容器映像描述的第二部分是斜线分隔的名称。这部分类似于容器映像的路径和名称。某些官方容器映像不需要指定路径。对于这些映像，您可以简单地指定斜线分隔名称的名称部分。在我们的例子中，这是描述的 hello-world 部分。
容器映像描述的第三部分是标签名。这一部分被认为是映像的版本标签，但它不需要仅由数字组成。标签名称可以是任意一组 ASCII 字符，包括大小写字母、数字、破折号、下划线或句点。关于标签名的唯一限制是不能以句点或破折号开头，并且必须少于或等于 128 个字符。标记名与斜杠分隔的名称之间用冒号隔开。这就把我们带回了之前看到的`hello-world:latest`映像描述。与注册表主机名一样，标记名也有默认值。该默认值为`latest`。在我们的例子中，使用的标签名是默认的，它在搜索和下载中显示为`hello-world:latest`。在下面的示例中，您可以看到所有这些操作:
![](img/8e50f5e2-4ba1-4a13-962d-84665c6b3369.png)
我们用`docker images`命令确认我们的本地映像缓存是空的，然后我们提取完全合格的 hello-world 映像将其预取到我们的本地缓存中。然后，我们使用了与前面所有 hello-world 示例中相同的简短描述，Docker 无需再次下载即可运行容器，显示使用了默认值，并且它们与完全限定的值相匹配。
好了，现在我们已经了解了 Docker `run`命令的所有基础知识，让我们更深入地研究一下您可以使用`run`命令的一些可选参数。如果您查看完整的`run`命令语法，您将看到以下内容:
```
# Usage: docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]
```
注意命令的最后部分是`[COMMAND] [ARG...]`。这告诉我们`container run`命令有一个可选的命令参数，也可以包含自己的可选参数。Docker 容器映像是用默认命令构建的，该命令在您基于映像运行容器时执行。对于 hello-world 容器，默认命令是`/hello`。对于一个完整的 Ubuntu OS 容器，默认命令是`bash`。每当您运行一个 Ubuntu 容器并且没有指定一个命令在容器中运行时，将使用默认命令。如果这还没有多大意义，不要担心——我们将在本章后面的*回到 Docker 运行命令*部分介绍默认命令并在运行时覆盖它。现在，只要知道当您运行一个容器时，它将执行一个命令就足够了，该命令要么是默认命令，要么是要在运行的容器中执行的覆盖命令(如果提供给`container run`命令)。最后一个注意事项:当正在运行的容器(默认或覆盖)正在执行的命令终止时，容器将退出。在我们使用 hello-world 容器的示例中，一旦`/hello`命令在容器内终止，hello-world 容器就会退出。稍后，您将了解更多关于运行容器和已退出容器之间的区别。
现在，我们将使用我最喜欢的可选参数之一`--rm`继续我们的`run`命令讨论。这里需要一点背景信息。您可能还记得[第 1 章](1.html)、*建立 Docker 开发环境*时，Docker 的形象是由层组成的。每当您运行 docker 容器时，它实际上只是使用本地缓存的 docker 映像(这是一个层的栈)，并在顶部创建一个新的层，即读/写层。容器运行期间发生的所有执行和更改都存储在它自己的读/写层中。
# 列表容器命令
可以使用以下命令显示正在运行的容器的指示:
```
# Usage: docker container ls [OPTIONS]
docker container ls
```
这是 list containers 命令，没有任何附加参数，它将列出当前运行的容器。我说的当前运行是什么意思？容器是系统上运行的特殊进程，与系统上的其他进程一样，容器可以停止或退出。但是，与系统上的其他类型的进程不同，容器的默认行为是在停止时留下其读/写层。这是因为如果需要，您可以重新启动容器，保留它退出时的状态数据。举个例子，假设你运行一个作为操作系统的容器，比如 Ubuntu，在那个容器中你安装`wget`。容器退出后，可以重启，仍然会安装`wget`。请记住，每个运行的容器都有自己的读/写层，所以，如果你运行一个 Ubuntu 容器并安装`wget`，那么你运行另一个 Ubuntu 容器，它就不会有`wget`。容器之间不共享读/写层。然而，如果你重启一个安装了`wget`的容器，它仍然会被安装。
因此，正在运行的容器和停止的容器之间的区别在于，进程要幺正在运行，要么已经退出，留下了自己的读/写层。list containers 命令有一个参数，允许您列出所有容器，包括正在运行的容器和已经退出的容器。你可能已经猜到了，是`--all`参数，看起来是这样的:
```
# short form of the parameter is -a
docker container ls -a
# long form is --all
docker container ls --all
# old syntax
docker ps -a
```
现在，让我们回到我最喜欢的可选运行命令参数之一，`--rm`参数:
```
# there is no short form of the --rm parameter
docker container run --rm hello-world
```
此参数指示 Docker 在容器退出时自动移除容器的读/写层。当您运行没有`--rm`参数的 docker 容器时，容器退出时会留下容器数据，以便容器以后可以再次重新启动。但是，如果在运行容器时包含`--rm`参数，则容器退出时，容器的所有读/写数据都会被删除。该参数提供了一个对`exit`功能的简单清理，你会发现它非常有用。让我们用刚才讨论的 run 和`container ls`命令来看一个快速的例子:
![](img/537bbccb-96a6-49ac-8ed4-f80ef15988f7.png)
首先，我们确认本地缓存中有 hello-world 映像。接下来，我们列出了系统中所有的容器，包括运行的和退出的。请注意映像和容器之间的区别。如果您熟悉 VMware，这个类比有点像模板和虚拟机。接下来，我们使用`--rm`参数运行 hello-world 容器。hello-world 容器打印它的消息，然后立即退出(我们将输出重定向到`/dev/null`以保持示例输出简短)。接下来，我们再次列出容器，因为我们看到 hello-world 容器的读/写数据在容器退出时被自动移除。之后，我们再次运行 hello-world 容器，但这次没有使用`--rm`参数。当我们这次列出容器时，我们看到了(退出的)容器的指示。通常你会运行一个容器，知道以后再也不需要重启了，使用`--rm`参数自动清理就很得心应手了。但是如果不使用`--rm`参数呢？你是否被不断增长的容器清单所困扰？当然不是。Docker 对此有命令。这是`container rm`命令。
# 移除容器命令
remove container 命令如下所示:
```
# the new syntax
# Usage: docker container rm [OPTIONS] CONTAINER [CONTAINER...]
docker container rm cd828234194a
# the old syntax
docker rm cd828234194a
```
该命令需要唯一标识容器的值；在本例中，我使用了我们刚刚运行的 hello-world 容器的完整容器 ID。您可以使用容器标识的前几个字符，只要它在系统上的所有容器之间提供唯一的标识符。唯一识别容器的另一种方法是通过分配给它的`name`。Docker 将在您运行它时为您的容器提供一个唯一的随机生成的名称。在前面的例子中，随机分配的名字是`competent_payne`。所以我们可以像这样使用 remove 命令:
```
# using the randomly generated name docker container rm competent_payne
```
虽然 docker 提供的随机生成的名称比它分配的容器标识更容易让人阅读，但它们可能仍然没有您想要的那么相关。这就是为什么 docker 为`run`命令提供了一个可选参数来命名您的容器。下面是一个使用`--name`参数的例子:
```
# using our own name docker container run --name hi-earl hello-world