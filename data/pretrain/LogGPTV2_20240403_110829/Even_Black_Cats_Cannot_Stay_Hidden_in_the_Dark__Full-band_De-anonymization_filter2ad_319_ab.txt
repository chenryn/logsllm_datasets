should be within wireless reception range of the victim
devices, while this range could be potentially extended
by employing directional antennas. We expect attackers
to have some knowledge of signal processing, familiarity
with the BT wireless communications standard, and
reasonable command of computer programming.
B. Adversarial Scenarios
We distinguish three main types of attacks that are en-
abled through exploitation of BT device re-identiﬁcation:
(1) user tracking and surveillance; (2) stalking and
espionage; and (3) compromising physical assets.
1) User tracking and surveillance: It is conceivable
that policing agencies and state-sponsored entities would
deploy BT snifﬁng and de-anonymization tools on pub-
lic transport and in key transport hubs (airports, train
stations, bridge crossings,
tunnels, etc.) to (i) gauge
footfall or trafﬁc ﬂow; (ii) identify movement patterns
of groups of individuals; or (iii) track the precise where-
abouts of a sensitive asset. BT device identity could
be linked to individuals via sales databases, car plate
recognition software, or CCTV and face recognition al-
gorithms. Likewise, commercial actors would use similar
infrastructure in theaters, caf´es, shopping malls, etc. to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:21 UTC from IEEE Xplore.  Restrictions apply. 
537
two such boards. We tune the central frequency of the
two boards on 2,421.5 MHz and 2,460.5 MHz respec-
tively, and conﬁgure them with 44 MHz of receiving
bandwidth each. We allow a small overlap (5 MHz)
between the bandwidths of the two receivers, to facilitate
output trace synchronization without the need for an
expensive external clock.
Synchronization across channels is of paramount im-
portance to our system, as de-anonymizing BT addresses
requires to analyze frames captured by different SDRs
with a common time reference. This is further needed
for debugging purposes, to be able to explain a sequence
of messages transmitted over different channels at dif-
ferent time instants. Hence, we devise a μs granularity
synchronization method that doesn’t require coherent
capture. In essence, we use an external BT dongle to
transmit periodically (every 1 s), on a channel that is
captured by both interfaces, a reference frame with a
known address and whitening parameters, in which we
embed a Sequence Number. Should such a dongle not
be available, we allow for transmitting the sync frame
with one of the SDRs used for capture, given their
common full-duplex capabilities. The sync frame shall
be received by both SDR boards and therefore be present
in both traces. Reception should be simultaneous, hence
the timing offset between captures is easily compensated.
SDRs usually employ a complex sampling technique;
this means that with a 44 MHz sampling frequency
we can effectively acquire 44 MHz of spectrum. Two
values are recorded with each sampling interval, each
corresponding to a component of a complex sample and
generally referred to as in-phase (I) and quadrature (Q)
components. The complex samples are also called I/Q
samples. We quantize with 1 byte the I/Q sample com-
ponents, which results in an 88 Msamples/s sampling
rate. In turn, this translates into a 176 MB/s data rate
that the host system must handle. This can be managed
if writing to ramdisk or to an m.2 SSD (which supports
at least twice the required rate).
C. Data Processing
Channelizer: To be able to separate the spectral
components of the wideband signal acquired previously
and distinguish the frames transmitted on the different 79
BT channels, the ﬁrst component of the data processing
chain we implement is a channelizer. This comprises a
digital down-converter scheme, by which the complex
input signal is ﬁrst shifted to baseband, then passed
through a Finite Impulse Response (FIR) ﬁlter [22] with
1 MHz bandwidth. Since high-frequency components are
Fig. 5: Proposed full-band BT snifﬁng system. Raw
signal is captured using SDR front-end while channel-
ization, demodulation and frame decoding are performed
on host computer. BT master re-identiﬁcation is achieved
by reversing HEC computation and whitening.
to output the Radio Frequency (RF) signals observable
on a precise set of individual BT channels, depending on
the computational capabilities of the host and whether
these allow for real-time or off-line sample processing
and analysis. The signals on each acquired channel are
transferred to Gaussian Frequency-shift Keying (GFSK)
demodulation blocks, which output the corresponding bit
sequences. A separate module identiﬁes for each channel
the beginning of BT frames, based on the bit streams
resulting from demodulation. The structure of the system
makes it easy to implement in parallel the demodulation
and frame decoding pipeline.
Depending on the number of channels selected for
capture and the computing power, the BT frames ac-
quired are stored in RAM or on PCI Express Solid State
Drive (SSD), together with a timestamp, to aid frame
sequence reconstruction. Data acquisition and processing
can either work sequentially (“off-line” functionality), or
concurrently, if the time required to process ﬁxed-length
traces is less than the time needed to acquire the same
trace (“on-line” operation). The latter is dependent on
platform computational power and achievable, e.g., with
a double-buffer approach (where a buffer is ﬁlled with
new data while data in the other one is processed).
A separate module that we describe in Sec. V fetches
from memory the sniffed frames and exploits weaknesses
in the HEC computation and header whitening to re-
identify the BT master devices of target connections.
B. Data Acquisition
The ﬁrst task performed by our system is sampling
from the full 79 MHz band used by BT. Different
SDR platforms are suitable for this operation. For our
experiments we adopt two Ettus B210 boards. Each of
these supports full-duplex operation with up to 56 MHz
of real-time bandwidth, which is not sufﬁciently wide to
capture all BT channels. Hence, the need for deploying
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:21 UTC from IEEE Xplore.  Restrictions apply. 
538
removed by the ﬁlter, the output signal is decimated
to reduce the data rate. By tuning the local oscillator
onto the central frequency of each target BT channel,
we extract the corresponding narrowband I/Q symbols.
Channelizer speed can be greatly increased by using
polyphase ﬁlters to directly separate all the narrowband
BT channels from the wideband signal [23].
All channels are subsequently processed by 79 de-
modulation and frame decoding blocks, fed with the
corresponding baseband signals.
Demodulation: The I/Q samples for a single channel
are fed into a GFSK demodulation block that outputs the
corresponding binary data. GFSK is a digital frequency
modulation technique whereby symbols are ﬁrst ﬁltered
by a Gaussian ﬁlter and then used to modulate the carrier
signal. BT employs a binary modulation scheme with
bandwidth-bit period product of 0.5.
A well-known technique for demodulating FSK sig-
nals is based on measuring the phase difference Δφ
between two consecutive samples of the corresponding
baseband signal. Assuming that the high frequency com-
ponents are ﬁltered out by the channelizer, Δφ will have
the same sign as the frequency deviation of the signal
from the carrier and will satisfy the relation −π <
Δφ < π. Given two successive I/Q samples (I1, Q1)
and (I2, Q2), the phase difference between them can be
measured using some simple trigonometric computation.
However, since what is relevant to our task is only the
sign of Δφ, we can avoid trigonometry by verifying that
for −π < Δφ < π the following holds:
sign (Δφ) = sign [sin(Δφ)] = sign (I1Q2 − I2Q1) .
Frame decoding: Once the demodulation step is
completed, we can detect and decode BT frames on
each channel. Recall that every bit stream output by
demodulators contains two samples per bit period; this
oversampling proves necessary to counteract phase noise
effects at
the receiver. Instead of recovering one bit
value from the samples within the same bit period, the
decoder will treat each binary sample as a bit. All the
processing performed here is intended to be repeated
for each sample. The following and preceding bits are
evaluated, advancing in a two by two fashion in the
stream of binary samples.
By examining possible preambles with candidate sync
words that follow, we can detect with high conﬁdence
the boundaries of BT frames, which we subsequently
examine for re-identifying masters of target connections.
Fig. 6: Processing logic for inferring the UAP of a BT
master from the whitened header.
V. RE-IDENTIFYING BLUETOOTH DEVICES
BT has been long considered to provide good user
privacy, because (i) devices stop responding to Inquiry
frames after establishing a connection, (ii) they change
channels every 625 μs following a “secret” pattern that
is only known to communicating peers (hopping), and
(iii) their identity remains ambiguous, as the frames
exchanged only contain half of the BDADDR (the LAP)
of the master and the contents are obfuscated using a
per-frame “pseudo-key” that depends on the master’s
UAP and part of its clock (whitening). Our full-band
snifﬁng system presented in the previous section breaks
the ﬁrst two identity protection features, as it enables
adversaries, which supposedly neither know the channel
nor the pseudo-key, to capture frames in a target session.
In what follows, we show that it is possible to re-identify
devices by exploiting weaknesses in the design of the
header error check and header whitening mechanisms.
These enable us to derive the master’s UAP.2
To ﬁnd the UAP of a device, we need to (i) ﬁrst
identify which 6-bits of the master clock were used to
whiten a frame header and de-whiten it, and (ii) infer
what UAP value produces a HEC value that matches
the HEC in the de-whitened header. We illustrate this
logic in Fig. 6. Note that the HEC is produced using
a polynomial that is initialized with the UAP. For any
given 6 bits of the master clock (clk), only one UAP will
recover a valid HEC. With this in mind, we ﬁrst employ
Algorithm 1 to identify the (UAP, clk) pairs that could
be valid. In general, for each sniffed WhitenedHeader
wh, we look for (ui, clki) pairs and the corresponding
DeWhitened HeaderData hdi, with 0 ≤ i < 64 such that
the following holds:
wh = [hdi | HEC(hdi, ui)] ⊕ w(clki),
2Recall that the 2-byte Non-signiﬁcant Address Part (NAP) is
never used, but merely present for compliance with EUI-48 standards.
Knowing the LAP and UAP, the NAP can be inferred using L2CAP
echo requests.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:21 UTC from IEEE Xplore.  Restrictions apply. 
539
where | is the concatenation operator, HEC(hdi, ui) is
the bilinear map that generates the 8-bit HEC sequence
and w(clki) is the map that generates the whitening
sequence. In the following we will express the latter as
w(clki) = w’(clki ⊕ 26), where w’ is the linear map
implemented by a LFSR that is identical to the one that
generates the whitening sequence but without the static
initialization of the internal state’s Most Signiﬁcant Bit
(MSB), and 26 makes such initialization explicit. We also
introduce notation for this mapping’s upper and lower
parts, i.e., w(cid:2)
hec, which whiten respectively
the HeaderData and the HEC that are concatenated in
the above equation. Let (u, clk) be the actual UAP
and clock value, and hd the actual HeaderData. We
can use the following equation to compute the other
valid (albeit incorrect) UAP values from the (also incor-
rect) corresponding clocks and the associated (incorrect)
HeaderData values:
HEC(hdi, ui) = HEC(hd, u) ⊕ w
hec(clki ⊕ clk)
(cid:2)
hd|w(cid:2)
= w(cid:2)
hdi = hd ⊕ w
hd(clki ⊕ clk).
(cid:2)
After introducing clki = clki ⊕ clk and reworking the
equations, we obtain
HEC(0, ui) = HEC(w
hd(clki), u) ⊕ w
(cid:2)
(cid:2)
hec(clki).
The above shows that values ui of the UAP that our
search algorithm computes can be obtained by taking
all possible values of the clock 0 ≤ clki < 64, they
depend only on the correct value of the UAP, and they
do not change over consecutive (and likely different)
transmitted HeaderData. We also note that
the UAP
values for clocks that are each the 1’s complement of
the other are the same. After observing that the 1’s
complement of clock clki can be written as clki⊕(26−1)
(remember that these are 6-bit values), the above follows
from the following equality:
hd(26 − 1), 0) = w
hec(26 − 1).
(cid:2)
(cid:2)
HEC(w
Finally,
let u be the correct UAP and clk(n) the
sequence of actual clock values. The search algorithm
cannot distinguish them from incorrect candidates u(cid:2) and
clk(cid:2)
(n) that verify the following equalities:
clk(cid:2)
(n) = clk(n) + 32,
hd(32), u) ⊕ w
(cid:2)
(cid:2)
hec(32).
) = HEC(w
HEC(0, u(cid:2)
The dewhitened HeaderData corresponding to the can-
didate can be easily determined from the “correct” one,
hd(32) = hd⊕0xC0. This means that
as hd(cid:2)
after dewhitening, the incorrect candidate would have
= hd ⊕ w(cid:2)
Header = DeWhiten (WhitenedHeader, clk)
for UAP = 0:255 do
Algorithm 1 Identifying plausible (UAP,clk) pairs.
1: set good list = []
2: for clk = 0:63 do
3:
4:
5:
6:
7:
8:
9:
10: end for
HEC’ = ComputeHEC(HeaderData, UAP)
if HEC’ == HEC then
push (UAP, clk) into good list
end for
end if
a different MSB in the packet type and different ﬂow
control bit. This could be later used for discriminating
such incorrect candidate from the real UAP.
One key observation is then that in this list of 64 pairs
there are only 32 different UAPs. From this list, we can
remove wrong candidates by executing Algorithm 2 on
successive frames with the same LAP, until the list is
reduced to u, u(cid:2). This algorithm veriﬁes the consistency
between the timestamps of the frames and the clock
values that are associated to a candidate UAP. It is also
worth noting that the execution of Algorithm 2 on the
ﬁrst two frames received allows us to discard at least
the 1’s complement of the clock for any candidate UAP,
unless the time difference between the received packets
is exactly 64 · 625 μs. Thus, with only two frames we
can effectively reduce our search space from 256 to 32
unique pairs (UAP,clk) or less. When only two possible
clock values (with the 32 tick delay as demonstrated
above) remain (and hence two possible UAPs), further
ambiguity can be resolved only by examining the Header
data de-whitened with the two possible clocks and keep-
ing the UAP for which the inferred Header makes sense.
VI. TESTBEDS
We implement
the designed full-band BT snifﬁng
system using two Ettus USRP B210 SDR boards, con-
nected to the same antenna using a splitter and to the
host via separate USB 3.0 controllers. The host runs
a GNU/Linux operating system and is equipped with a
quad-core Intel Xeon W-2123 CPU, 32 GB of memory,
and a Samsung NVMe SSD with 480 GB of storage.
To evaluate the potential of the devised system to
intercept BT trafﬁc, its ability to compromise user pri-
vacy through re-identiﬁcation and sustain tracking, we
employ the following three set-ups: a controlled indoor
multi-device testbed, a controlled single-connection set-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:42:21 UTC from IEEE Xplore.  Restrictions apply. 
540
Algorithm 2 Removing implausible UAPs from candi-
date list.
1: set t1, t2 the times in μs when consecutive frames
with same LAP were received
2: ΔT = round((t2 − t1)/625)
3: for (UAP, clk) ∈ good list do
clk’ = (clk + ΔT ) mod 64
4:
Header = DeWhiten(WhitenedHeader, clk’)
5:
HEC’ = ComputeHEC(HeaderData, UAP)
6:
if HEC’ == HeaderHEC then
7:
8:
9:
10:
11:
12: end for
remove (UAP, clk) from good list
update (UAP, clk) = (UAP, clk’)
else
end if
up, and an “in the wild” environment. We detail the
particularities of each of these testbeds next.
A. Controlled Multi-device Testbed
We conduct
the ﬁrst set of experiments using 26
Raspberry Pi 3 (RP) embedded boards, which have
an integrated Broadcom Bluetooth chipset. We further
attach a YBLNTEK Bluetooth USB dongle with CSR
chipset to 24 of them. We establish two BT sessions
between each pair of devices with two BT interfaces
(internal plus dongle), and a single session between
the remaining two RPs. This allows us to establish 25