### 实时进程与资源限制

#### 实时进程管理
在Linux系统中，实时进程的调度和处理是关键任务之一。实时进程需要确保在指定时间内完成任务，因此其CPU调度策略尤为重要。

**示例代码：**

```c
cpu_set_t set;
int ret;

// 清空所有CPU设置
CPU_ZERO(&set);

// 获取当前进程的CPU亲和性
ret = sched_getaffinity(0, sizeof(cpu_set_t), &set);
if (ret == -1) {
    perror("sched_getaffinity");
    return 1;
}

// 禁用CPU #1
CPU_CLR(1, &set);

// 设置新的CPU亲和性
ret = sched_setaffinity(0, sizeof(cpu_set_t), &set);
if (ret == -1) {
    perror("sched_setaffinity");
    return 1;
}
```

上述代码展示了如何通过`sched_getaffinity`和`sched_setaffinity`函数来修改进程的CPU亲和性，从而控制进程在哪些CPU上运行。这在实时系统中尤为重要，以确保进程能够按时完成任务。

#### 资源限制
Linux提供了多种资源限制机制，以防止进程消耗过多系统资源。这些限制可以通过`getrlimit`和`setrlimit`函数进行获取和设置。

**资源限制类型：**

- **RLIMIT_AS**：进程地址空间的最大值。
- **RLIMIT_CORE**：核心转储文件的最大大小。
- **RLIMIT_CPU**：进程可使用的最大CPU时间。
- **RLIMIT_DATA**：数据段的最大大小。
- **RLIMIT_FSIZE**：文件的最大大小。
- **RLIMIT_LOCKS**：进程可以持有的文件锁数量。
- **RLIMIT_MEMLOCK**：锁定在内存中的最大字节数。
- **RLIMIT_MSGQUEUE**：消息队列的最大大小。
- **RLIMIT_NICE**：进程的优先级上限。
- **RLIMIT_NOFILE**：进程可以打开的最大文件数。
- **RLIMIT_NPROC**：用户可以创建的最大进程数。
- **RLIMIT_RSS**：进程的常驻集大小（物理内存使用量）。
- **RLIMIT_RTPRIO**：实时进程的优先级上限。
- **RLIMIT_SIGPENDING**：挂起信号的最大数量。
- **RLIMIT_STACK**：栈的最大大小。

**示例代码：**

```c
struct rlimit rlim;
int ret;

// 获取核心转储文件大小限制
ret = getrlimit(RLIMIT_CORE, &rlim);
if (ret == -1) {
    perror("getrlimit");
    return 1;
}

printf("RLIMIT_CORE limits: soft=%ld hard=%ld\n", rlim.rlim_cur, rlim.rlim_max);

// 设置核心转储文件大小为32MB
rlim.rlim_cur = 32 * 1024 * 1024; // 32 MB
rlim.rlim_max = RLIM_INFINITY; // 不改变硬限制

ret = setrlimit(RLIMIT_CORE, &rlim);
if (ret == -1) {
    perror("setrlimit");
    return 1;
}
```

上述代码展示了如何使用`getrlimit`和`setrlimit`函数来获取和设置核心转储文件的大小限制。

### 文件与目录管理

#### 文件及其元数据
在Linux系统中，每个文件都有一个唯一的inode号，用于存储文件的元数据信息。这些信息包括文件的所有者、权限、大小、修改时间等。

**示例代码：**

```c
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    struct stat sb;
    int ret;

    if (argc != 2) {
        printf("Usage: %s <file>\n", argv[0]);
        return 1;
    }

    // 获取文件的stat信息
    ret = stat(argv[1], &sb);
    if (ret) {
        perror("stat");
        return 1;
    }

    // 打印文件大小
    printf("%s is %ld bytes\n", argv[1], sb.st_size);

    return 0;
}
```

上述代码展示了如何使用`stat`函数来获取文件的元数据，并打印文件的大小。

通过这些工具和方法，我们可以有效地管理和控制Linux系统中的进程和文件资源。