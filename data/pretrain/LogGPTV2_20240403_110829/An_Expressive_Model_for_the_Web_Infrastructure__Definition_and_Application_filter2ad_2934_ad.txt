to several restrictions.3
cmd = IFRAME: Similar to HREF, but opens the document in
a new subwindow of the given window (when same origin).
cmd = FORM: Similar to HREF, but allows for methods
other than GET and request body data. For this request, an
Origin header is set if the method is POST. Its value is the
origin of the document.
cmd = SETSCRIPT, SETSCRIPTSTATE, BACK, FORWARD,
CLOSE: These commands change the browser’s state such
that the script (state) in a document is changed or the window
is navigated back/forward or closed (if the document is same
origin or the window is navigable, respectively).
cmd = XMLHTTPREQUEST (parameters: URL u, method
md, data d, nonce xhrreference): Initiate a request with
method md and data d for u, if u is same origin. The
reference (for pendingRequests) used for this request is
(cid:5)r, xhrreference(cid:6), where r is the reference of the script’s
document and xhrreference is a nonce chosen by the script
(for later correlation). The Origin header is set as in the
case of FORM.
cmd = POSTMESSAGE (parameter: message msg, window
reference w, origin o): msg,
the origin of the sending
document, and a reference to its window are appended to the
input history of the active document in w if that document’s
origin matches o or if o = ⊥.
E. Web Servers
While the modeling of DNS servers and browsers is
independent of speciﬁc web applications, and hence, forms
the core of the model of the web infrastructure, the modeling
of a web server heavily depends on the speciﬁc web
application under consideration. Conversely, the model of
a speciﬁc web application is determined by the model of the
web server. We therefore do not and cannot ﬁx a model for
web servers at this point. Such a model should be provided
as part of the analysis of a speciﬁc web application, as
illustrated by our case study (see Section IV and following).
F. Limitations
We now brieﬂy discuss main limitations of the model. As
will be illustrated by our case study, our model is formulated
on a level of abstraction that is suitable to capture many
security relevant features of the web, and hence, a relevant
class of attacks. However, as with all models, certain attacks
are out of the scope of our model. For example, as already
mentioned, we currently cannot reason about language details
(e.g., how two JavaScripts running in the same document
interact). Also, we currently do not model user interface
details, such as frames that may overlap in Clickjacking
3We follow the rules deﬁned in [18]: A window A can navigate a
window B if the active documents of both are same origin, or B is an
ancestor window of A and B is a top-level window, or if there is an
ancestor window of B whose active document has the same origin as the
active document of A (including A itself). Also, A may navigate B if B
is an auxiliary window and A is allowed to navigate the opener of B.
attacks. Being a Dolev-Yao-style model, our model clearly
does not aim at lower-level cryptographic attacks. Also, byte-
level attacks, such as buffer overﬂows, are out of scope.
IV. THE BROWSERID SYSTEM
BrowserID [23] is a new decentralized single sign-on
(SSO) system developed by Mozilla for user authentication
on web sites. It is a complex full-ﬂedged web application
deployed in practice, with currently ∼47k LOC (excluding
code for Sideshow/BigTent, see below, and some libraries).
It allows web sites to delegate user authentication to email
providers, where users use their email addresses as identities.
The BrowserID implementation makes use of a broad variety
of browser features, such as XHRs, postMessage, local- and
sessionStorage, cookies, etc.
We ﬁrst, in Section IV-A, provide a high-level overview
of the BrowserID system. A more detailed description of the
BrowserID implementation is then given in Sections IV-B
to IV-D.
A. Overview
The BrowserID system knows three distinct parties: the
user, which wants to authenticate herself using a browser, the
relying party (RP) to which the user wants to authenticate
(log in) with one of her email addresses (say, user@eyedee.
me), and the identity/email address provider IdP. If the email
provider (eyedee.me) supports BrowserID directly, it is called
a primary IdP. Otherwise, a Mozilla-provided service, a so-
called secondary IdP, takes the role of the IdP. In what
follows, we describe the case of a primary IdP, with more
information on secondary IdPs given in Section IV-D.
A primary IdP provides information about its BrowserID
setup in a so-called support document, which it provides at
a ﬁxed URL derivable from the email domain, e.g., https:
//eyedee.me/.well-known/browserid.
A user who wants to log in at an RP with an email
address for some IdP has to present two signed documents:
A user certiﬁcate (UC) and an identity assertion (IA). The
UC contains the user’s email address and a public key. It
is signed by the IdP. The IA contains the origin of the
RP and is signed with the private key corresponding to the
user’s public key. Both documents have a limited validity
period. A pair consisting of a UC and a matching IA is
called a certiﬁcate assertion pair (CAP) or a backed identity
assertion. Intuitively, the UC in the CAP tells the RP that
(the IdP certiﬁed that) the owner of the email address is (or
at least claimed to be) the owner of the public key. By the
IA contained in the CAP, the RP is ensured that the owner
of the given public key wants to log in. Altogether, given
a valid CAP, RP would consider the user (with the email
address mentioned in the CAP) to be logged in.
The BrowserID authentication process (with a primary
IdP) consists of three phases (see Figure 2 for an overview):
681
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
RP
Browser
IdP
LPO
IdP
RP-Doc
Browser
1 open
LD
A gen. key pair
B pkb, email
C create UC
D UC
E gen. IA
F CAP
G pkIdP
I
II
III
H verify CAP
Figure 2. BrowserID authentication: basic overview
provisioning of the UC,
I
veriﬁcation of the CAP.
II CAP creation, and III
In Phase I
, the (browser of the) user creates a public/pri-
vate key pair A . She then sends her public key as well as
the email address she wants to use to log in at some RP to
IdP B . IdP now creates the UC C , which is then sent to the
user D . The above requires the user to be logged in at IdP.
With the user having received the UC, Phase II can start.
The user wants to authenticate to an RP, so she creates the
IA E . The UC and the IA are concatenated to a CAP, which
is then sent to the RP F .
In Phase III , the RP checks the authenticity of the CAP.
For this purpose, the RP could use an external veriﬁcation
service provided by Mozilla or check the CAP itself as
follows: First, the RP fetches the public key of IdP G , which
is contained in the support document. Afterwards, the RP
checks the signatures of the UC and the IA H . If this check
is successful, the RP can, as mentioned before, consider the
user to be logged in with the given email address and send
her some token (e.g., a session ID), which we refer to as an
RP service token.
B. Implementation Details
We now provide a more detailed description of the
BrowserID implementation (see also Figure 3). Since the
system is very complex, with many HTTPS requests, XHRs,
and postMessages sent between different entities (servers
as well as windows and iframes within the browser), we
here describe mainly the phases of the login process without
explaining every single message exchange done in the
implementation.
In addition to the parties mentioned in the rough overview
in Section IV-A, the actual implementation uses another
party, login.persona.org (LPO). The role of LPO is as follows:
First, LPO provides the HTML and JavaScript ﬁles of
the implementation. Thus, the BrowserID implementation
2 GET LD
3 ready
4 request
5 GET session_context
7 GET address_info
6 email address
8 GET wk
9
11 GET PIF
10 create
PIF
12 PMs
13 close
/PIF
14 auth IdP
15 gen. key pair
PIF
repeat
i
i
i
t
a
e
p
e
r
18 create UC
17 pkb, email
19 UC
16 pkb, email
20 UC
/PIF
22 POST auth_with_assertion (CAPLPO)
21 gen. IALPO
23 GET list_emails
24 GET address_info
25 gen. IARP
26 response (CAPRP)
27 close
/LD
i
ii
iii
iv
v
vi
vii
Figure 3. BrowserID implementation overview. Black arrows (open
tips) denote HTTPS messages, blue arrows (ﬁlled tips) denote XHRs
(over HTTPS), red (dashed) arrows are postMessages, snake lines
are commands to the browser.
mainly runs under the origin of LPO.4 When the JavaScript
implementation running in the browser under the origin of
LPO needs to retrieve information from the IdP (support
document), LPO acts as a proxy to circumvent cross-origin
restrictions.
Before explaining the login process, we provide a quick
overview of the windows and iframes in the browser. By
RP-Doc we denote the window (see Figure 3) containing
the document loaded from some RP, a web page on which
the user wants to log in with an email address of some
IdP. This document typically includes JavaScript from LPO
4It is envisioned by Mozilla to integrate the part of LPO directly into
the browser in the future.
682
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:20 UTC from IEEE Xplore.  Restrictions apply. 
and contains a button “Login with BrowserID”. (Loading of
RP-Doc from the RP and the JavaScript from LPO is not
depicted in Figure 3). The LPO JavaScript running in RP-
Doc opens an auxiliary window called the login dialog (LD).
Its content is provided by LPO and it handles the interaction
with the user. During the login process, a temporary invisible
iframe called the provisioning iframe (PIF) can be created
in the LD. The PIF is loaded from IdP. It is used by LD to
communicate (cross-origin) with IdP. Temporarily, the LD
may navigate itself to a web page at IdP to allow for direct
user interaction with the IdP.
Now, in order to describe the login process, for the time
being we assume that the user uses a “fresh” browser, i.e.,
the user has not been logged in before. As mentioned, the
process starts by the user visiting a web site of some RP.
After the user has clicked on the login button in RP-Doc, the
LD is opened and the interactive login ﬂow is started. We
can divide this login ﬂow into seven phases: In Phase i ,
the LD is initialized and the user is prompted to provide
her email address. Then LD fetches the support document
(see Section IV-A) of IdP via LPO. In Phase ii , LD creates
the PIF from the provisioning URL provided in the support
document. As (by our assumption) the user is not logged in
yet, the PIF notiﬁes LD that the user is not authenticated
to IdP yet. In Phase iii , LD navigates itself away to the
authentication URL which is also provided in the support
document and links to IdP. Usually, this document will
show a login form in which the user enters her password to
authenticate to the IdP. After the user has been authenticated
to IdP (which typically implies that IdP sets a session cookie
in the browser), the window is navigated to LPO again. (This
is done by JavaScript loaded from LPO that the IdP document
is supposed to include.)
Now, the login ﬂow continues in Phase iv , which basically
repeats Phase
i . However, the user is not prompted for
her email address (it has previously been saved in the
localStorage under the origin of LPO along with a nonce,
where the nonce is stored in the sessionStorage). In Phase v ,
which basically repeats Phase ii , the PIF detects that the
user is now authenticated to IdP and the provisioning phase
is started ( I
in Figure 2): The user’s keys are created by
LD and stored in the localStorage under the origin of LPO.
The PIF forwards the certiﬁcation request to IdP, which then
creates the UC and sends it back to the PIF. The PIF in turn
forwards it to the LD, which stores it in the localStorage
under the origin of LPO.
by setting a cookie browserid_state (in Step 5
in
Figure 3) on the client-side. LPO considers such a session
authenticated after having received a valid CAP (in Step 22
in Figure 3). In future runs, the user is presented a list of
her email addresses (which is fetched from LPO) in order
to choose one address. Then, she is asked if she trusts the
computer she is using and is given the option to be logged in
for one month or “for this session only” (ephemeral session).
In order to use any of the email addresses, the user is required
to authenticate to the IdP responsible for that address to get
an UC issued. If the localStorage (under the origin LPO)
already contains a valid UC, then, however, authentication
at the IdP is not necessary.
Automatic CAP Creation. In addition to the interactive
login presented above, BrowserID also contains an automatic,