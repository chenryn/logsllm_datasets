***---Chad Todd***
◆ ◆ ◆
当你用 SLO 来驱动时，SRE 就是
DevOps。两者都追求相同的目标，但走不同的路。SLO 有助于引导努力和投资，在
DevOps 中没有类似的工具。
DevOps
在初创公司中更为常见，在初创公司中，尽可能快地达到生产目标的积极性明显超过可靠性或可用性。当创新与可靠性之间的冲突开始出现时，SRE
对成熟的企业更有意义。 
***---Luis Mineiro，首席站点可靠性工程师，Zalando***
◆ ◆ ◆
在我看来，DevOps
是组织可以采用的一套实践，以便更好地实现产品的操作和交付给客户。 这些实践的最简单总结总结在
CAMS
中，它代表文化、自动化、测量和共享。SRE（站点或服务可靠性工程）通常是由个人或团队担任的角色。根据我的经验，这些人广泛关注一个组织内产品的稳定性和运行情况。总的来说，大多数
SRE 专业人员都依赖 CAMS 的四大支柱来开展工作，并影响组织以满足运维需求。
值得注意的是，并非所有组织都以同样的方式"执行"SRE，尤其是因为它与组织结构有关。我熟悉的两个主要形式是"横向"SRE
集成和"纵向"SRE 集成。具有横向集成 SRE
人员的组织通常拥有一个或多个独立团队，由为组织执行 SRE
工作的人员组成。纵向整合的员工通常直接与工程团队集成，并始终服务于该团队。 
***---Aaron Blew，服务可靠性工程（SRE）总监，iovation***
◆ ◆ ◆
十年前，DevOps
对我来说是一种表达需要更好的、非功能性的和非政治协议。协议双方是软件的构造和修改方，以及软件的运维方。DevOps
现在是一种描述在技术上有主动性和知识的人，也就是服务于技术团队，并且对所用技术游刃有余的人。可悲的是，DevOps
现在是一个术语，用于表示一套技能，并愿意成为负责 Ansible 或 Jenkins
的开发人员之一，或倾向于帮助修复包存储库，而不是有人使所谓的"孤岛"消失。
SRE 对我来说是一种方法和一组具有反向能量的角色，如 DevOps 或 SRE
保持系统正常运行，并掌握生产的所有权、预算和最终决定权，以及我前面提到的所有方面需要注意的内容。正是我们在过去十年中看到运维团队的变革，适合能够处理这一问题并更好地适应康威定律的公司。从本质上讲，我们都希望开发人员知道他们的软件是如何工作的，深入了解其技术组件，但这与负责维护服务的人所做的相去甚远。 
***---Gleicon Moraes，工程总监***
◆ ◆ ◆
有趣的是，随着 SRE 这个词的引用次数不断增长，有些人认为它与 DevOps
一词相冲突。在大多数情况下，这似乎需要对这两个词中至少一个（当然最好两个都）有一个准确的定义，因为它们实际上只是对一个共同问题的不同反应；公司在更快速的迭代中构建和部署软件的压力不断增加。在这两种情况下，认识到老方法是行不通的，虽然
SRE 模型采取了更战术化、更注重工程的方法来解决问题，而 DevOps
更侧重于从文化方面处理，但两者仍然有一个共同想法：减少摩擦，让人们跨越文化障碍工作。
这两种观点的一个有趣方面是，它们受到其目前的采用模式的影响。在 DevOps
方面，我们看到围绕该术语的一些野心，以及许多公司试图扭曲 DevOps
以适应他们自己的（通常是基于销售的）定义，以至于它淡化了 DevOps
的本来含义。具有讽刺意味的是，在
SRE方面，这个词现在被谷歌发布的关于这个术语的信息所支配，以至于那些不像谷歌的公司（也就是绝大多数公司）可能无法开始这种做法。作为一家近十年前开始采用
SRE
风格的运营方法的公司，因为人们的期望转变为寻找一套特定的做法，而不是商定的方法，因此我们招聘这些职位变得更加困难，不论是运维还是其他的职位。我希望围绕这些主题的对话将继续增长，以便其他人能够以为组织工作的方式获得一些好处，无论这些组织采取什么形式。 
***---Robert Treat, CEO, OmniTI***
◆ ◆ ◆
SRE
的核心是整体性的：开发和运维上的所有内容都是互通的，方法是通过深入了解开发人员和运维人员的低级和高级技术问题来识别、理解和执行上述连接，并帮助团队部署实施提供帮助。
不幸的是，SRE
经常被解释为监督者的职位，就好像他是等待人们咨询的预言家，其实不应该这么想。在日常工作中，SRE
可以是你的组织所需的任何功能，以确保你能提供尽可能最好的服务，并将团队聚集在一起。 
***---Manuel Fernandez, SRE, VividCortex***
◆ ◆ ◆
DevOps 是一个文化术语，它体现了运维和开发团队的精神、支持和问责制。遵循
DevOps
理念的典型团队将服务所有权的运营理念引入开发团队，并为他们提供必要的指导和工具，以便他们在其整个生命周期内更有效地维护产品。SRE
是一类运维用户，具有强大的开发背景，对操作原则和设计有深刻的理解。
SRE 团队应紧密体现 DevOps
理念，利用其基本原则通过与服务所有者和其他运营团队联系，为其环境提供运维完整性和稳定性。 
***---Matt Jones，高级基础设施安全运营工程师***
◆ ◆ ◆
我在一家中型初创公司工作，实际上我同时担任 SRE 和 DevOps
职位。对我来说，成为 SRE
就是管理生产系统，使其可靠，处理规模，自动化等。而对于 DevOps
的立场，我宁愿认为这是我们的开发和生产之间的交汇点。作为这个角色，它包括在许多方面帮助开发人员：具有可用的登台环境、CI/CD
管道、自动测试等。总体而言，我认为 DevOps
工程师应该尽一切可能来简化开发人员的生活，以便他们可以专注于编码。
虽然这两种立场在范围上不同，但它们在实施方面相似。SRE
构建登台和预生产环境，使其提供给开发人员，这是有道理的，他有资格完成
DevOps 任务（同样简化了开发人员的工作）。可以实现的自动化也是如此。 
***---Julien Avenet, SRE, Kiwi.ki Gmbh***
◆ ◆ ◆
DevOps
团队成员是熟悉在负责的系统上安装和维护软件的人员。他们知道即将进行的次要数据库升级，以及哪些
Bug
修复和新功能是该升级的一部分。他们知道磁盘空间的情况并不可怕，但需要在未来三到六个月内解决，要么修剪数据库，要么至少对一些表进行分区。我们目前使用的交换机已足够，但也可能进行升级。通常情况下，一切都很好，但在高流量的情况下，它一直会有点挣扎。
SRE
团队成员正在考虑如何将新软件与其他系统集成。在某些情况下，数据库中需要额外的表空间，并且需要与
DevOps
人员讨论这一要求。两类服务器需要具有低延迟和冗余网络连接，这应该不成为问题，但将是另一个需要提高的问题。代码评审应该很有趣------我们希望确保算法尽可能聪明，但这不是超越一切的重点。 
***---Alex Beamish，独立软件开发人员***
◆ ◆ ◆
我认为 DevOps 是一种方法，而 SRE 是一种角色。DevOps
是基础设施世界需要的临门一脚。它的核心信息很简单：构建和测试基础设施是我们能够而且应该自动化的东西。它不是关于如何构建团队的描述，尽管它肯定鼓励支持产品和基础设施工程师之间协作的结构。
SRE 是一个角色，其原则与 DevOps 的目标基本一致。在组织中拥有专门的 SRE
有点奢侈。也就是有一群人，他们唯一的工作重点是让你的服务运行得更好。并不是每个组织都需要整个团队来执行此操作！将工作分布到更通用的工程团队周围是完全正确的，尤其是在公司的早期。 
***---Chris Sinjakli，站点可靠性工程师，GoCardless***
◆ ◆ ◆
面向基础架构的开发人员和 SRE 的共同之处："DevOps
是一种理念，而不是一个职称。"DevOps 和 SRE
的核心是让开发人员负责运营，其区别在于所有权。小型开发团队可以使用 CI/CD
的自动化和频繁推出、全面的监控和警报以及共享的轮值来培养出色的
DevOps，而开发人员本身仍拥有这些服务。当生产环境的可靠性对组织至关重要时，SRE
是让单独的开发人员组拥有生产环境的一种方式。
区别在于 SRE 是结构化的、有组织的、定义良好的，而 DevOps
更难确定。在我看来，想要实践 DevOps 的组织最适合让开发人员团队阅读 SRE
书籍，并考虑一些组件来集成整个团队，而不仅仅是招聘一两个 DevOps
人员。只要DevOps 可以是 SRE
的超集，他们可以（而且应该）在一个健康的组织中和平共处，承认所有开发人员和
SRE 之间对可靠性的共同责任。   
***---Jason Gwartz，软件开发者***