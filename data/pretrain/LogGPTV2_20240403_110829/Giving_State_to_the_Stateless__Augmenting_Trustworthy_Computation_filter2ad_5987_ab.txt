construction, however.
3
EnclaveHostLedgerkEnclaveHostLedgerkEnclaveHostkEnclaveHostk(a)(b)Program inputs/outputsProgram inputs/outputsdone in plaintext, although for privacy we will use a secure
commitment scheme. It labels the resulting commitment C
with a unique identiﬁer CID that identiﬁes the enclave, and
sends the pair (C, CID) to the ledger.
Following publication, the host can obtain a copy of the
full ledger L as well as the proof of publication σ. It sends all
of the above values (including the commitment randomness
R) to the enclave, along with the most recent value of the
encrypted state (or ε if this is the ﬁrst step of the program).
The enclave decrypts the encrypted state internally to obtain
the program state and counter (S, i).4 It veriﬁes the following
conditions:
1)
2)
3)
4)
σ is a valid proof of publication for L.
The ledger L contains exactly i tuples (·, CID).
The most recent tuple embeds (C, CID).
C is a valid commitment to the input I using random-
ness R.
If all conditions are met, the enclave can now execute
the program on state and input (S, I). Following execution, it
encrypts the new output state and updated counter (Si+1, i+1)
and sends the resulting ciphertext to the host for storage.
Remark. Like our previous attempts, the protocol described
above does not prevent the host from replaying old versions
of L (along with the corresponding encrypted state). Indeed,
such replays will still cause the enclave to execute P and
produce an output. Rather, our purpose is to prevent the host
from replaying old state with different
inputs. By forcing
the host to commit to its input on the ledger before L is
obtained, we prevent a malicious host from changing its
program input during a replay, ensuring that the host gains no
new information from such attacks. However, there remains
a single vulnerability in the above construction that we must
still address.
Attempt #4: Deriving randomness. While the protocol above
prevents the attacker from changing the inputs provided to the
program, there still remains a vector by which the malicious
host could fork program execution. Speciﬁcally, even if the
program input is ﬁxed for a given execution step, the program
execution may fork if the random coins provided to P change
between replays. This might prove catastrophic for certain
programs.5
To solve this problem, we make one ﬁnal change to the
construction of the enclave code. Speciﬁcally, we require that
at each invocation of P , the enclave will derive the random
coins used by the program in a deterministic manner from the
inputs, using a pseudorandom function (similar to the classical
approach of Canetti et al. [20]). This approach ﬁxes the random
coins used at each computation step and effectively binds them
to the ledger and the host’s chosen input.
Limitations of our pedagogical construction. The construction
above is intended to provide an intuition, but is not the ﬁnal
protocol we describe in this work. An astute reader will note
4If no encrypted state is provided, then i is implicitly set to 0 and S = ε.
5For example, many interactive identiﬁcation and oblivious RAM protocols
become insecure if the program can be rewound and executed different
randomness.
that this pedagogical example has many limitations, which
must be addressed in order to derive a practical ELI protocol.
We discuss several extensions below.
Extension #1: Reducing ledger bandwidth. The pedagogical
protocol above requires the host and enclave to parse the entire
ledger L on each execution step. This is quite impractical,
especially for public ledgers that may contain millions of
transactions. A key contribution of this work is to show that the
enclave need not receive the entire ledger contents, provided
that the ledger can be given only modest additional capabilities:
namely (1) the ability to organize posted data into sequences
(or chains), where each posted string contains a unique pointer
to the preceding post, and (2) the ability for the Ledger to
calculate a collision-resistant hash chain over these sequences.
As we discuss in §II-B and §V-B, these capabilities are already
present in many candidate ledger systems such as public (and
private) blockchain networks.
Extension #2: Adding public input and output. A key goal
of our protocol is to allow P to condition its execution on
inputs and outputs drawn from (resp. sent to) the ledger. This
can be achieved due to the fact that the enclave receives an
authenticated copy of L. Thus the enclave (and P ) can be
designed to condition its operation on e.g., messages or public
payment data found on the ledger.
To enforce public output, we modify the interface of P to
produce a “public output string” as part of its output to the
host, and we record this string with the program’s encrypted
state. By structuring the enclave code (or P ) appropriately, the
program can require the host to post this string to the ledger
as a condition of further program execution. Of course, this is
not an absolute guarantee that the host will publish the output
string. That is, the enclave cannot force the host to post such
messages. Rather, we achieve a best-possible guarantee in this
setting: the enclave can simply disallow further execution if
the host does not comply with the protocol.
Extension #3: Specifying the program. In the pedagogical
presentation above, the program P is assumed to be ﬁxed
within the enclave. As a ﬁnal extension, we note that the en-
clave can be conﬁgured to provide an environment for running
arbitrary programs P , which can be provided as a separate
input at each call. Achieving this involves recording (a hash) of
P within the encrypted state, although the actual construction
requires some additional checks to allow for a security proof.
We include this capability in our main construction.
Modeling the ledger Several recent works have also used
ledgers (or bulletin boards) to provide various security prop-
erties [29], [22]. In these works,
the ledger is treated as
possessing an unforgeable proof of publication. The protocols
in this work can operate under this assumption, however
our construction is also motivated by real-world decentralized
ledgers, many of which do not have possess such a property.
Instead, many “proof-of-work” blockchains provide a weaker
security property, in that it is merely expensive to forge a
proof that a message has been posted to the blockchain. This
notion may provide sufﬁcient security in many real-world
applications, and we provide a detailed analysis of the costs
in §V-B
4
B. Applications
To motivate our techniques, we describe a number of
practical applications that can be implemented using the ELI
paradigm, including both constructive and potentially destruc-
tive techniques. Here we provide several example applications,
and provide a more complete discussion in §IV.
Synchronizing private smart contracts and step functions.
Smart contract systems and cloud “step functions” [24], [31]
each employ a distributed network of compute nodes that
perform a multi-step interactive computation. To enable private
computation, some production smart contract systems [31]
have recently proposed incorporating TEEs. Such distributed
systems struggle to synchronize state as the computation
migrates across nodes. Motivated by an independent effort of
Bowman et al. [19] we show that our ELI paradigm achieves
the necessary guarantees for security in this setting.
Mandatory logging for local ﬁle access. Corporate and
enterprise settings often require users to log access to sensitive
ﬁles, usually on some online system. We propose to use the
ELI protocol to mandate logging of each ﬁle access before the
necessary keys for an encrypted ﬁle can be accessed by the
user.
Limiting password guessing. Cryptographic access control
systems often employ passwords to control access to encrypted
ﬁlesystems [12], [52] and cloud backup images (e.g., Apple’s
iCloud Keychain [40]). This creates a tension between the
requirement to support easily memorable passwords (such as
device PINs) while simultaneously preventing attackers from
simply guessing users’ relatively weak passwords [18], [61].6
Attempts to address this with tamper-resistant hardware [12],
[52], [14], [40] lead to expensive systems that provide no
security against rewind attacks. 7 We show that ELI can
safely enforce passcode guessing limits using only inexpensive
hardware without immutable state [57].
Autonomous ransomware. Modern ransomware, malware
that encrypts a victim’s ﬁles, is tightly integrated with cryp-
tocurrencies such as Bitcoin, which act as both the ransom
currency and a communication channel to the attacker [56].
Affected users must transmit an encrypted key package along
with a ransom payment to the attacker, who responds with the
necessary decryption keys. The ELI paradigm could potentially
enable the creation of ransomware that operates autonomously
– from infection to decryption – with no need for remote
parties to deliver secret keys. This ransomware employs local
trusted hardware or obfuscation to store a decryption key for
a user’s data, and conditions decryption of a user’s software
on payments made on a public consensus network.
II. DEFINITIONS
Protocol Parties: A Enclave-Ledger Interaction is a proto-
col between three parties: the enclave E, the ledger L, and a
6This is made more challenging due to the fact that manufacturers have
begun to design systems that do not include a trusted party – due to concerns
that trusted escrow parties may be compelled to unlock devices [13].
7See [57] for an example of how such systems can be defeated when state
is recorded in standard NAND hardware, rather than full tamper-resistant
hardware.
host application H. We now describe the operation of these
components:
The ledger L. The ledger functionality provides a public
append-only ledger for storing certain public data. Our main
requirement
the ledger is capable of producing a
publicly-veriﬁable authentication tag σi over the entire ledger
contents, or a portion of the ledger.
is that
The enclave E. The trusted enclave models a cryptographic
obfuscation system or a trusted hardware co-processor conﬁg-
ured with an internal secret key K. The enclave may contain
the program P , or this program may be provided to it by the
host application. Each time the enclave is invoked by the host
application H on some input, it calculates and returns data to
the host.
The host application H. The host application is a (possibly
adversarial) party that invokes both the enclave and the ledger
functionalities. The host determines the inputs to each round
of computation – perhaps after interacting with a user – and
receives the outputs of the computation from the enclave.
A. The Program Model
Our goal in an ELI is to execute a multi-step interactive
computation that runs on inputs that may be chosen adaptively
by an adversary. Expanding on our initial description, we
deﬁne this program P : I × S × R → O × P × S as having
the following input/output interface:
P (Ii, Si; ¯ri) → (Oi, Pubi, Si+1).
When a user inputs Ii, the current program state Si, and random
coins ¯ri, this algorithm produces a program output Oi, as well
as an optional public broadcast message Pubi and new state
Si+1.
In our main construction, we will allow the host application to
provide the program P that the enclave will run. This is useful
in settings such as smart contract execution, where a given
enclave may execute multiple distinct smart contract programs.
As a result of this change, we will assume that P is passed as
input to each invocation of the enclave.
Maximum program state size and runtime. We assume in
this work that the runtime of each P can be upper bounded
by a polynomial function of the security parameter. We also
require that for any program P used in our system there exists
an efﬁciently-computable function Max(·) such that Max(P )
indicates the maximum length in bits of any output state Si
produced by P , and that Max(P ) is polynomial in the security
parameter.
One-Time vs. Multi-Use Programs. In this work we consider
two different classes of program. While all of our programs
may involve multiple execution steps, one-time programs can
be initiated only once by a given enclave. Once such a program
has begun its ﬁrst step of execution, it can never be restarted.
By contrast, multi-use programs can be executed as many times
as the user wishes, and different executions may be interwoven.
However each execution of the program is independent of
the others, receives different random coins and holds different
state. In our model, an execution of a program will be uniquely
identiﬁed by a session identiﬁer, which we denote by CID.
Thus, the main difference between a one-time and many-time
5
program is whether the enclave will permit the re-initiation of
a given program P under a different identiﬁer CID.
it
We note that
is possible to convert any multi-time
program to a one-time program by having the enclave generate
the value CID deterministically from its internal key K and
the program P (e.g., by calculating a pseudorandom function
on these values), and then to enforce that each execution of
the program P is associated with the generated CID. This
enforcement algorithm can be instantiated as a “meta-program”
P (cid:48) that takes as input a second program P and is executed
using our unmodiﬁed ELI protocol.
While our pedagogical example in the introduction dis-
cussed one-time programs,
in the remainder of this work
we will focus on multi-use programs, as these are generally
sufﬁcient for our proposed applications in §IV.
B. Modeling the Ledger
The ledger models a public append-only bulletin board that
allows parties to publish arbitrary strings. On publishing a
string S to the ledger, all parties obtain the published string
(and perhaps the full ledger contents) as well as a publicly-
veriﬁable authentication tag to establish the string was indeed
published.
The pedagogical examples examined thus far have been
very bandwidth-intensive, potentially transmitting the entire
contents of the ledger with each authentication tag. Such
implementations would be be impractical, especially as the
ledger may incorporate posts from many different users. In
our main constructions we will assume a ledger with some
enhanced capabilities, including the ability to reference speciﬁc
chains of posts made as part of a related execution, and
to compute a collision-resistant hash chain over the posted
strings. (Later in this section we will demonstrate that this
interface can be constructed locally given access to a na¨ıve
ledger that returns the full ledger contents. As such we are not
truly adding new requirements.)
The Ledger Interface. Our ideal ledger posts an arbitrary
string S as part of speciﬁc a chain of posted values. As
an abstraction, we will require each post to identify a chain
identiﬁer CID. While the host may generate many such iden-
tiﬁers (and thus create an arbitrary number of distinct chains),
our abstraction assumes that other parties (e.g., other host
machines) will not be allowed to post under the same identiﬁer.
The exact nature of the identiﬁer CID depends on the speciﬁc
Ledger instantiation, which we discuss in detail in §V-B.
The advantage of our interface is that similar checks
and chaining are natural properties to achieve when using
blockchain-based consensus systems to instantiate the ledger,
since many consensus systems perform the necessary checks as
part of their consensus logic. Indeed, we can signiﬁcantly re-
duce the cost of deploying our system by using existing ledger
systems, including Bitcoin and Ethereum, as they provide these
capabilities already, as we discuss in §V-B.
We now deﬁne our ledger abstraction, which has the following
interface.8 Let HL be a collision-resistant hash function:
8We omit the ledger setup algorithm for this description, although many
practical instantiations will include some form of setup or key generation.
•
Ledger.Post(Data, CID) → (post, σ).
When a party wishes to post a string Data onto the
chain identiﬁed by CID, the ledger constructs a data
structure post by performing the following steps:
1)
2)
3)
4)
5)
found,
it
was
postprev
It ﬁnds the most recent postprev on the Ledger
that is associated with CID (if one exists).
If