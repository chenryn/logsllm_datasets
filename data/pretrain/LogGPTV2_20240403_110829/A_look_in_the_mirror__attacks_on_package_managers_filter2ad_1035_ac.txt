age signature feature of Stork. While far from conclusive,
this implies that package metadata signatures and package
signatures are redundant. We reason that when multiple sig-
nature mechanisms are provided, either package metadata
signatures or package signatures are suﬃcient for usability
purposes, but it is unnecessary to support both.
To conclude, since no one scheme works well from both a
security and a usability standpoint, we propose that pack-
age managers should use multiple security mechanisms. It is
clear that root metadata signatures should be included be-
cause of their security beneﬁts. It also seems advantageous
to have either package metadata signing or package signa-
tures for usability. By combining root metadata signatures
with either signed package metadata or signed packages, a
package manager can obtain a high degree of security and
excellent usability without signiﬁcant performance impact.
7. PACKAGE MANAGERS IN PRACTICE
This section examines additional functionality that is pro-
vided by some of the most popular distributions (Ubuntu,
Debian, Red Hat Enterprise Linux, Fedora, CentOS, open-
SUSE, and SUSE Enterprise Linux) that impacts the secu-
rity of package managers in practice. It should be noted that
we did a cursory examination of other popular distributions
(Gentoo, Mandriva, LinuxMint, Sabayon Linux, Slackware,
KNOPPIX, Arch Linux, and MEPIS Linux) and did not ﬁnd
any additional security practices that signiﬁcantly altered
the security over that provided by their package manager.
We did not survey any smaller distributions, but we strongly
suspect that the majority of them are at least as vulnerable
as their package manager is by default.
In this section, we ﬁrst examine the feasibility of an at-
tacker obtaining an oﬃcial mirror for a distribution. We
examine this by setting up mirrors for ﬁve popular distri-
butions that have oﬃcial mirrors run by outside parties
(Ubuntu, Debian, Fedora, CentOS, and openSUSE). We
then examine the security pitfalls in using a security repos-
itory for package updates and a set of untrusted mirrors for
the core distribution. Next, we examine how the mecha-
nisms by which requests are distributed to diﬀerent mirrors
impacts security. We then examine the use of HTTPS to
try and determine its eﬀect and applicability. The section
concludes with a look at the discussed distributions and a
comparison of their security characteristics.
7.1 Obtaining a Mirror
To evaluate the feasibility of controlling mirrors of popular
distributions, we set up public mirrors for the CentOS, De-
bian, Fedora, openSUSE, and Ubuntu distributions. A ﬁc-
titious company (Lockdown Hosting) with its own domain,
website, and ﬁctitious administrator (Jeremy Martin) were
used as the organization maintaining the mirrors. A server
with a monthly bandwidth quota of 1500 GB was leased for
$200 per month through The Planet (www.theplanet.com).
Setting up a public mirror for each distribution involved
acquiring the packages and metadata from an existing mir-
ror and then notifying the distribution maintainers that the
mirror was online and available for public usage. The distri-
butions varied in terms of the degree of automation in the
public mirror application and approval process as well as
whether newly listed mirrors have traﬃc immediately and
automatically directed to them. In all cases, the distribu-
tions accepted our mirror and added it to the oﬃcial mirror
list for use by outside users. We saw traﬃc on our mirrors
from a variety of clients, including military and government
computers. More detail about our mirrors can be found in
a tech report [5].
7.2 Security Repository
Debian and Ubuntu both use an oﬃcial repository that
serves security updates (packages that ﬁx vulnerabilities).
This prevents a mirror from launching a replay attack be-
cause the package manager will use the latest version of a
package which will be available from the security reposi-
tory. However, this protection does not extend to a man-
in-the-middle attacker since the repositories do not support
HTTPS.
Both Debian and Ubuntu use several mirrors beside the
security repository. In the case where the security repository
is down, an attacker can use a mirror to serve outdated
content that was originally from the security repository to
perform a replay attack. In addition, using multiple mirrors
makes Ubuntu and Debian users much more vulnerable to
endless data attacks.
7.3 Mirror Selection
In many distributions, not every source of data is created
equal. For example, openSUSE distributes all of the meta-
data from a central source and only outsources package re-
quests to mirrors.
In this section we examine the impact
that these practices have on the security of diﬀerent distri-
butions.
OpenSUSE uses a download redirector that sends some
requests to mirrors. However, the download redirector serves
package metadata and root metadata directly. This means
that the client gets the metadata from a trusted source (not a
mirror). While this doesn’t protect against all of the attacks
a client may face (such as endless data attacks by mirrors
or replay attacks by a man-in-the-middle attacker), it does
make it much more diﬃcult to launch an attack.
On CentOS, clients contact a central service which redi-
rects the client’s requests to oﬃcial mirrors. Requests for
all types of content (packages, package metadata, and root
metadata) are directed to mirrors that are not controlled by
CentOS. The speciﬁc mirror a client is redirected to may be
diﬀerent for each ﬁle requested. The result is that an aver-
age CentOS client contacts many more mirrors than would
normally be the case. This makes it much easier for an at-
tacker to conduct an endless data attack on many clients
but complicates replay or freeze attacks because the same
repository may not be contacted for packages and metadata.
However, an attacker can still eﬀectively launch an extrane-
ous dependencies attack.
On Fedora, by default clients contact a central service
called MirrorManager that is very similar to the CentOS
service. However, MirrorManager allows a mirror adminis-
trators to specify that clients in an IP address range should
use only their mirror. This allows easy targeting of attacks
(to a speciﬁc country or organization) and reduces the num-
ber of other parties who will consume resources on the mir-
ror. Note that the mirror need not have an IP address in
the IP address range that it targets.
Online mirror redirectors handle failures diﬀerently than
a security repository. If a mirror redirector fails, the clients
will stop trying to communicate and fail (as opposed to
“failing-open” by skipping the failed repository).
Many distributions including Gentoo, KNOPPIX, Arch
Linux, Debian, and Ubuntu also have mirror selection tools
that ﬁnd a nearby mirror. These tools do not improve the
security of users since they are only used to select a sin-
gle mirror to download all content from. In fact, it should
be noted that popular mirror selection tools for Debian and
Ubuntu (such as netselect-apt or Software Sources) do not
preserve the oﬃcial security repository. This means that
users who have used these tools to ﬁnd faster or more reli-
able mirrors are unlikely to use the security repository for
updates!
7.4 Verifying Mirrors
Many distributions use an automated mechanism to verify
that mirrors are staying up-to-date. While we did not at-
tempt to deviate from the correct, up-to-date status on our
mirrors, we posit that an attacker can determine the IP ad-
dress of the checking server and serve up-to-date content to
the checking server while serving malicious content to users
it is attacking. Note that this is trivial on distributions like
Fedora that allow a mirror administrator to selectively tar-
get users, because the only references coming from outside
the targeted range should be the checking server. It is pub-
licly acknowledged by some distributions [13] that detecting
and tricking these bots is trivial and so we do not feel this
is a viable security mechanism.
7.5 HTTPS
Red Hat Enterprise Linux (RHEL) and SUSE Linux En-
terprise are the only distributions that we found which widely
support or use HTTPS. When investigating how YUM uses
HTTPS, we discovered it does not validate SSL certiﬁcates.
This means that while the communication uses HTTPS,
there is no validation that the endpoint YUM communicates
with is correct (allowing a man-in-the-middle to pose as the
repository).
However, the Red Hat security team informed us that
on RHEL, YUM communicates with the Red Hat Network
servers using a special plug-in instead. During our discus-
sion with the Red Hat security team, they realized there
were issues in how SSL was used in the plug-in as well and
began working on a ﬁx for it.
7.6 Comparison
We examine the additional security mechanisms provided
by diﬀerent distributions and comment on their eﬀectiveness
against attack.
• SUSE Linux Enterprise doesn’t use mirrors hosted by
outside parties and uses HTTPS so it is not vulnerable
to the attacks described in this paper.
• OpenSUSE, by using a download redirector, provides
signiﬁcant protection from malicious mirrors. How-
ever, any other attacker, such as a man-in-the-middle,
that can respond to client requests can perform replay
or freeze attacks.
If the download redirector fails or
is unreachable (e.g. due to a denial-of-service attack),
users cannot get updates but are not at risk of replay
attacks. Despite the download redirector protecting
users from replay or freeze attacks from malicious mir-
rors, users are still vulnerable to endless data attacks
from mirrors.
• Ubuntu and Debian have similar security to openSUSE
with the additional problem that if the security repos-
itory fails, they become vulnerable to replay or freeze
attacks from mirrors.
• Red Hat Enterprise Linux is not at risk from malicious
mirrors (since it uses no mirrors hosted by outside par-
ties) but is vulnerable to man-in-the-middle attackers
because of ﬂaws in their HTTPS implementation. A
malicious party who can act as a man-in-the-middle
can launch any of the attacks that YUM is vulnerable
to.
• With a man-in-the-middle attacker, CentOS is vulner-
able to every attack (much like RHEL). In the case
of a malicious mirror, their download redirector makes
it more diﬃcult to launch attacks that require the at-
tacker to provide a snapshot of packages (like a replay
or freeze attack), but the potential for abuse from end-
less data and extraneous dependencies attacks is still
large.
• Fedora has the same vulnerabilities as CentOS but
with the additional problem that an attacker can tar-
get attacks to a speciﬁc IP range. This also allows an
attacker to launch attacks that require the attacker to
provide a snapshot of the repository.
• Other distributions such as Gentoo, Mandriva, Lin-
uxMint, Sabayon Linux, Slackware, KNOPPIX, and
MEPIS Linux do not signiﬁcantly alter the protection
provided by their package manager.
8. RESULTS
To understand the impact of an attacker that controls
a mirror, a trace of package requests was conducted on a
CentOS mirror and used to estimate the number of clients
that could be compromised or crashed by an attacker. For all
of the popular distributions our mirror could have launched
Package Requests
Unique IPs
160000
140000
120000
100000
80000
60000
40000
20000
s
t
s
e
u
q
e
R
e
g
a
k
c
a
P
e
v
i
t
a
u
m
u
C
l
    0
    0
   50   100   150   200   250   300
Time (in hours)
 6000
 5000
 4000
 3000
 2000
 1000
 0
s
P
i
I
e
u
q
n
U
e
v
i
t
a
u
m
u
C
l
i
d
e
s
m
o
r
p
m
o
C
s
t
n
e
i
l
C
e
v
i
t
a
u
m
u
C
l
 3500
 3000
 2500
 2000
 1500
 1000
  500
    0
    0
Arbitrary
Mismatched
Snapshot
   50
  100
  150
  200
  250
  300
Time (in hours)
This ﬁgure
Figure 4: CentOS Mirror Traﬃc.
presents the cumulative package downloads and re-
quests from unique IP addresses for the CentOS mir-
ror over a 13 day period.
an endless data attack to crash all of the clients that visited
it. The number of unique IP addresses that contacted our
mirror represents an upper bound on the number of clients
that could be crashed each week.
8.1 Mirror Traces