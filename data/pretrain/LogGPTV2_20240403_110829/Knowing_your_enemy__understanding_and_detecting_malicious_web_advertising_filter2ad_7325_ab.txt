To collect ad-related traces, we build a crawler as a Firefox add-
on. We conﬁgure its user-agent string to make it look like IE-6
and have it automatically clear cookies after visiting a Web page.
We deploy the crawler using 12 Windows virtual machine (VM)
instances on 12 different IP addresses from 3 subnets. These in-
stances continuously crawl the home pages of Alexa’s top 90,000
Web sites from Jun 21st to Sep 30th, 2011. Our crawler visits each
of the pages once every three days. During each visit, a browser
refreshes a page three times, in an attempt to obtain different ads.
Since we primarily study display ads, the crawler just follows the
automatic redirections triggered by the visit and does not click on
any links, including the ad links embedded in the crawled pages.
Our crawler could thus miss the cases when the malicious code is
triggered only when an ad link is clicked.
For each visited page, we record all network requests, responses,
browser events, and the code retrieved. Then, we reconstruct ad
redirection chains by identifying the causal relations among the set
of HTTP requests (URLs) originated from the page. Recall the ad
delivery process illustrated in Figure 1: the publisher’s Web page
 Publisher freeonlinegames.com Ad Syndicator googleadservices.com Ad Syndicator doubleclick.net Malicious Ad Network adsloader.com Redirector enginedelivery.com Fake Virus Scanner eafive.com 676ﬁrst redirects the audience’s browser to an ad network, which either
returns an ad directly or performs a further redirection. The redirec-
tions are typically implemented through JavaScript, HTML code,
or HTTP redirection (e.g., through status code 302 in response).
To reconstruct redirection chains, we can connect two HTTP re-
quests through a request’s Referral ﬁeld (the page downloaded by
Request A generates Request B) or the Location ﬁeld of a request’s
response (Request A’s response redirects the browser to URL B).
However, for the redirections caused by scripts, we are unable to
use Referrer and Location to establish such a causal relation. Our
solution is to extract the URLs from the script code and match them
to those used by the HTTP requests observed after the execution of
the script: once a script is found to contain the URL to which the
browser produces a request, we have reasons to believe that the
request may come from the script. This approach fails when the
script actually concatenates several strings to build a redirection
link and therefore does not contain a complete URL. We address
this problem by simply identifying the domain names from each
script code and assume that follow-up requests to these domains
are produced by the corresponding script. In this way, we obtain
24,801,406 unique redirection chains and 21,944,174 unique URLs
during the data collection. A similar approach has also been used
by Google Safe Browsing [27]. We acknowledge that our current
way to build the redirection chains may be less effective in the pres-
ence of Javascript obfuscation, but this problem can be addressed
through analyzing the behavior of the code dynamically, which has
been used for XSS detection [24].
3.2 Node, Path, and Domain-Path
Figure 4: An example illustrating node, path, and domain path.
The large set of redirection chains provide us with a collective
view on both the individual parties in advertising and the overall
topologies of the entire infrastructure. Below we deﬁne the entities
that we study in this paper.
tered during the data crawling.
• Node: We use the term node to refer to each URL encoun-
• Path: We call a reconstructed URL redirection chain a path.
A path consists of a set of nodes (i.e., URLs), ordered by
their redirection relations based on inferred causality.
• Domain-path: We observe that different crawls sometimes
result in slightly different URLs along ad redirection (e.g.,
for user tracking purpose, or the delivery of different ads),
but these URLs correspond to the same set of Web domains.
So for each path, we extract its corresponding URL domains
to build a unique domain-path. Note that one publisher may
be associated with multiple domain paths.
The aforementioned concepts are illustrated in Figure 4. Pub-
lisher pages always correspond to source nodes. While paths de-
scribe the dynamic interactions between URLs, domain-paths are
more stable and capture the business relationships between domains.
3.3 Role Marking
Not all the paths collected by our crawler are related to ads. To
identify ad-delivery paths, we inspect individual nodes on each path
using two well-known lists EasyList [26] and EasyPrivacy [26].
EasyList includes domains and URL patterns for ad-related hosts,
and is used by the popular browser plugin Adblock plus [1] to block
ads. EasyPrivacy is a list complementary to EasyList for identify-
ing Web sites that track users. With these two lists, we further
classify nodes as follows:
• Publisher node: We mark nodes from the publisher domains
as publisher nodes. Publisher nodes are usually from the
landing domains (the source nodes). However, they can ap-
pear at other locations on a path as well, for example, when
they perform redirections. In our data, we ﬁnd that 2.25% of
the paths contain publisher nodes in the middle.
• Ad node: We label a non-publisher node as an ad node if it
matches the features reported by EasyList or EasyPrivacy [26].
In addition, we label nodes showing images or SWFs [4] as
ad nodes if they share a path with other identiﬁed ad nodes.
These nodes were mostly used for delivering graphical ads.
• Unknown node: If a node is neither a publisher nor an ad
node, we label it as unknown.
Paths
Nodes
24,801,406
21,944,174
Publisher
Nodes
393,569
Ad
Nodes
20,036,475
Domain-
Paths
2,396,271
Table 1: Crawling statistics.
Accordingly, we treat a path as ad-related if it includes at least
one ad node. Out of the 90,000 crawled publisher pages, 53,100
of them led to ad-related paths 2. Among these paths, we marked
93.1% of the nodes as either publishers or ad nodes. Table 1 shows
the statistics of the data collected and the ad-related roles marked.
3.4 Problem Statement and Challenges
Our goal is to broadly detect malicious and fraudulent activities
that exploit display ads. In particular, if any node on an ad-delivery
path performs malicious activities (e.g., delivering malicious con-
tent, illicitly redirecting user click trafﬁc, etc.), we call the node
a malicious node. Correspondingly, we call any path containing
a malicious node a malvertising path, and the source node (i.e.,
the publisher’s URL) of a malvertising path an infected publisher.
Note that once we identify a malicious node, the following nodes
on the same path are not always malicious. For example, when a
malicious node cloaks, it may redirect a user to a legitimate Web
site. In addition, click-fraud attacks use malicious nodes to redirect
trafﬁc to legitimate ad networks.
Malvertising detection is a challenging task. First, the partner
relations of ad entities are often determined in real time by ad-
exchange and are thus highly dynamic. From external observations,
both legitimate and malicious ads can be delivered through multi-
ple dynamic redirections, with new interactions coming up all the
time, making it hard to distinguish malicious behaviors from legit-
imate ones. Further, this challenge cannot be effectively addressed
by inspecting the contents of individual nodes or their features (e.g.,
URL or domain features): attackers not only use sophisticated code
packing techniques to obfuscate content, but also compromise le-
gitimate Web sites and turn them into malicious ad networks; it
is thus difﬁcult to differentiate between malicious and legitimate
entities in isolation. Finally, malvertising attacks are of diverse cat-
egories (e.g., drive-by-downloads, phishing, and click frauds), each
exhibiting different behaviors, making detection even harder.
To address these challenges, we perform a measurement study
on the malvertising cases we encountered and compare them with
legitimate cases. Based on our ﬁndings, we derive a simple and
novel representation of the ad infrastructure that captures a variety
of malvertising attacks in the wild. We present our measurement
study and the detection methodology in the follow-up sections.
2Not all Alexa top Web site include ads on their home pages (e.g.,
http://www.google.com).
 Node C Node B Node A Path f.com/index.html d.com/adtag.html a.com/impression.jpg Domain-Path f.com d.com a.com 6774. MEASUREMENT RESULTS
Using the dataset we collected, we analyze the malvertising ac-
tivities and their infrastructure features in this section.
4.1 Malvertising Attacks Encountered
We scan all the nodes on the identiﬁed ad paths using the Google
Safe-Browsing API and Microsoft Forefront 2010 to detect malver-
tising.
If any node is ﬂagged by either of the two scanners, we
assume that it is a malicious node and ﬂag its publisher as an in-
fected publisher page. Among our data, Forefront detects 89 in-
fected publisher pages and Safe Browsing detects 199. In total we
identify 286 infected pages, with 543 malicious nodes coming from
263 domains, resulting in 938 malicious domain-paths.
We further classify attacks into three categories (drive-by-down-
load, scam, and click fraud) as follows: if Forefront reports a node
as “Exploit” or “Trojan”, we label the attack as drive-by-download;
if Forefront reports “Rogue”, we treat it as scam. For the remaining
cases, we manually examine the traces to determine the natures of
the attacks.
Table 2 shows the statistics of identiﬁed malvertising attacks. We
observe several distinguishing features. First, each of these three
types of malvertising attacks takes a signiﬁcant portion of all the
attacks detected, suggesting attackers extensively exploit online ad-
vertising in multiple ways. Several publisher pages were associated
with more than one type of attacks. For example, the porn Web site
privatepornclips.net was exploited for both click frauds
and drive-by-downloads. The domain-path via gesttube.com
→ heatube.com led to a pay-per-click ad network clickpayz
.com for click fraud attacks, while domain-path gesttube.com
→ sexyadultdating.net led to drive-by-download attacks3.
Second, the average malvertising path length is 8.11 nodes, much
longer than the average crawled ad path length of 3.59 nodes, pos-
sibly due to both the existence of multiple entities (e.g., exploit
servers and redirectors) and the use of ad syndication. We further
investigate the correlations between malvertising and ad syndica-
tion in Section 4.3.
Third, the average life time of a particular malicious domain in
our data is relatively short, ranging from 1 to 5 days, while the
overall campaign can last for months (Section 2.2 shows an exam-
ple campaign). Thus the individual malvertising domains can be
more dynamic and harder to detect due to their transient nature and
the use of domain rotations by attackers.
Finally, the infected publisher sites have large variations in their
rankings at Alexa, suggesting that attackers target both large and
small domains. Popular, trusted domains may also become victims.
This feature is quite different from previously reported SEO attacks
that primarily target small domains [16].
4.2 Properties of Malvertising Nodes
Through analyzing the malicious nodes captured by Safe Brows-
ing and Forefront, we discover the following features that could be
used to distinguish malicious nodes from legitimate ones.
Node roles: While a vast majority (93.1%) of the nodes on ad
paths can be labeled as either a publisher or an ad node, most
(91.6%) of the malicious nodes detected are marked as unknown.
This comes with little surprise, as malicious nodes are often ex-
ploit servers whose URLs do not conform to well-known ad URL
conventions.
Domain registration: The registration times of malicious node
domains also differ signiﬁcantly from the remaining ones. Figure 5
shows that most of the malicious domains expire within one year
of registration. Further, many of them are newly registered in 2011.
3The URLs were ﬂagged as “delivering malware” by the scanners.
Our manual examination shows that they performed click frauds as
well.
Figure 5: CDF of the durations between the registration dates
and the expiration dates of Web domains.
Since malicious domains usually get blacklisted quickly, attackers
may have no incentives to register long-living domains.
In con-
trast, normal nodes have longer expiration dates as their business
is expected to operate for years. This observation is more promi-
nent for advertisting business: only 0.4% of legitimate ad nodes
use newly registered domains comparing to 3.6% from legitimate
none-ad nodes.
URL patterns: Many malicious domains belong to free do-
main providers such as.co.cc. Moreover, many of the exploit
servers and redirectors have distinctive URL features. For example,
the URL pattern /showthread\.php\?t=\d{8} matches the
URLs of 34 different malicious nodes, suggesting that attackers
have used templates or scripts to generate URLs.
(a) Node frequency
(b) Pair frequency
Figure 6: Two frequency features.
In addition to the above features extracted from individual mali-
cious nodes in isolation, we also observe the following two features
that describe a node based on our global crawling results.
Node frequency: This metric measures the popularity and stabil-
ity of node domains. For each node, we identify its domain and
count the number of different publishers that are associated with
this domain on each day. We then compute the total number of
such occurrences over the days to ﬁnd out the frequency of the
node. Figure 6 (a) shows that most (nearly 80%) of the malicious
nodes belong to the low frequency category, quite different from
those within the legitimate category. This observation suggests that
attackers usually create new ad networks or hijack small, unpopular
ones, rather than directly targeting large, popular ad networks that
are better managed and harder to compromise.
Node-pair frequency: This metric describes the stability of the
business partnerships among different entities. We examine the fre-
quency of two neighboring nodes on ad paths (referred to as node
pairs) in a similar way by computing the corresponding domain
pair popularity. Frequent pairs indicate stable partnerships (e.g.,
youtube.com to doubleclick.net). We ﬁnd popular pairs
are less likely associated with malicious nodes (Figure 6 (b)). In
0510152025303500.10.20.30.40.50.60.70.80.91Expiration Year − Registration YearCDF  MaliciousNormal00.10.20.30.40.50.60.70.80.9(1,3)(4,10)(11,:)Fraction of Node Frequency %Good%Bad00.10.20.30.40.50.60.70.80.9(1,3)(4,10)(11,:)Fraction of Tuples Frequency %Good%Bad678Drive-by-download
Scam
Click-fraud
All
# of publisher pages
168
66
63
286
Avg path length
6.94
6.52
12.61
8.11
3.00
1.21
5.75
2.96
Avg malicious domain life time (days) Max ranking Min ranking
89814
85994
89814
89814
314
400
7659
314
Table 2: Malvertising attacks captured by Google Safe Browsing and Microsoft Forefront from June to September.
contrast, malicious nodes are more likely to appear in new, infre-
quent pairs (e.g., doubleclick.net to adsloader.com).
The above two features are tightly associated with the ad infras-
tructure and the relations among different nodes. They are more
robust to the attacker’s possible counter strategies than individual
node features. However, these features by themselves cannot be
used straightforwardly for detection. For example, ad partnerships
sometimes are determined in realtime by ad-exchange, so it is also
common to see newly appeared, legitimate node pairs in Figure 6
(b).
4.3 Properties of Malvertising Paths
In addition to individual nodes, our measurement study further
examines malvertising paths to understand the infrastructure be-
hind those malicious activities.
One ad network Multiple ad networks
With DoubleClick
Without DoubleClick
8
330
93
507
Table 3: The number of domain-paths vs. the number of ad
networks on the malvertising paths.
The use of ad syndication: We ﬁnd that 64% of the malvertising
domain-paths involve more than one ad networks on the paths (Ta-
ble 3). These paths may be associated with ad syndication, where
large ad networks such as DoubleClick resell ad spaces to small ad
networks that are more vulnerable. Indeed, we ﬁnd that 86 well