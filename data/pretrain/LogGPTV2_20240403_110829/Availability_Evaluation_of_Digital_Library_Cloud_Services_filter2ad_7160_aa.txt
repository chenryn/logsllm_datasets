title:Availability Evaluation of Digital Library Cloud Services
author:Julian Araujo and
Paulo Romero Martins Maciel and
Matheus Torquato and
Gustavo Rau de Almeida Callou and
Ermeson C. Andrade
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Availability Evaluation of Digital Library Cloud
Services
Julian Araujo∗, Paulo Maciel∗, Matheus Torquato∗, Gustavo Callou† and Ermeson Andrade†
∗ Informatics Center, Federal University of Pernambuco (UFPE), Recife, PE, Brazil
† Department of Statistics and Informatics, Federal Rural University of Pernambuco (UFRPE), Recife, PE, Brazil
Email: cjma, prmm, PI:EMAIL
Email: gustavo,PI:EMAIL
Abstract—Cloud computing is a new paradigm that provides
services through the Internet. Such paradigm has the inﬂuence of
the previous available technologies (e.g., cluster, peer-to-peer and
grid computing) and has been adopted to reduce costs, to provide
ﬂexibility and to make management easier. Companies like
Google, Amazon, Microsoft, IBM, HP, Yahoo, Oracle, and EMC
have conducted signiﬁcant investments on cloud infrastructure
to provide services with high availability levels. The advantages
of cloud computing allowed the construction of digital libraries
that represent collections of information. This system demands
high reliability and studies regarding analysis of availability are
important due to the relevance of conservation and dissemination
of the scientiﬁc and literature information. This paper proposes
an approach to model and evaluate the availability of a digital
library. A case study is conducted to show the applicability of
the proposed approach. The obtained results are useful for the
design of this system since missing data can lead to various errors
and incalculable losses.
Keywords—Cloud computing; Digital Library; Accelerated Life
Testing; Petri net; Reliability Block Diagram; Availability;
I.
INTRODUCTION
The increasing development and utilization of services
based on cloud computing has quickly emerged in the recent
years. Several corporations and institutions have demonstrated
interest in cloud computing, and also many platforms have
been proposed. Google, Amazon, Microsoft, IBM, HP, Apple,
Oracle, and Salesforce are a few examples of companies
that are making a massive investment on cloud services [1].
More speciﬁcally, the U.S. National Institute of Standards and
Technology (NIST) deﬁnes “cloud computing as model for
enabling ubiquitous, convenient, on-demand network access
to a shared pool of conﬁgurable computing resources (e.g.,
networks, server, storage, application, and services)” [2].
Five essential functional characteristics for cloud computing
are: on-demand self-service, broad network access, resource
pooling, rapid elasticity, and measured service [2]. In addition,
others common characteristics that directly impact the avail-
ability and reliability service of such systems are the virtual-
ization, geographic distribution, resilient computing, security,
scalability, and homogeneity.
technology. Information can be accessed from remote places
using devices that support access to the Internet. Therefore,
cloud computing is a relevant tool for the dissemination of
scientiﬁc information and literature.
The digital libraries around the world have become funda-
mental, not merely to protect thousands of articles, collections
and books, but also in sharing knowledge for the society.
More people come to recognize the importance of digital
libraries and the convenience they can bring to the society.
Many educational institutions, like schools, universities, col-
leges, and companies have demonstrated interest to digitize
their books and have their own digital libraries and provide
services for theirs members. However, these services demand
a lot of computing resources to achieve the high levels of
reliability, availability, scalability, and security needed by the
infrastructure.
In order to provide uninterrupted services through cloud
computing, it is important to evaluate and improve the de-
pendability parameters of the underlying infrastructure. Some
services might be regarded as digital library depending on the
educational institution or company and the number of data
operations involved. If an infrastructure suffers a server outage
due to database deadlocks, loss of data or network failure
may bring an incalculable damage. In addition, there is a cost
associated for the recovering of data, and in some cases, it
may not be possible to fully recover it [4].
This paper proposes an availability model of a digital cloud
library in order to estimate downtime levels. A free and open-
source cloud computing manager (OpenNebula) and library
service (DSpace) were deﬁned and deployed as the environ-
ment to conduct the analysis. Measurements were performed
to obtain the availability parameters of the library service
deployed in a private cloud. An accelerated failure testing
(AFT) approach for achieving the availability parameters was
conducted. Besides, a reliability block diagrams (RBD) and
stochastic Petri nets (SPNs) were used to model and assess
the digital library environment. Strategies are discussed aiming
to improve the design as well as to compare digital library
availability through cloud infrastructures.
Services such as web-hosting, e-commerce, and social net-
working have been developed due to the beneﬁts of cloud com-
puting. An important advantage is the possibility to preserve
and share knowledge through digital libraries [3]. Collections
of digital libraries are becoming more popular around the
globe due to the application of information and communication
The remaining sections are organized as follows. Section II
describes the architecture of the private cloud system analyzed
in this paper. Section III exposes the models developed to
represent the library cloud environment. Section IV presents
the results obtained through model analysis, with focus on
the metric availability. Section V presents the related work.
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.65
666
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 06:04:37 UTC from IEEE Xplore.  Restrictions apply. 
Section VI concludes the paper and also presents some possible
future works.
II. ARCHITECTURE OVERVIEW
This study considers a private cloud hosting a digital
library service. The service is a digital asset management
system that allows educational institutions to collect, preserve
and disseminate the scholarly and intellectual endeavor of
the academy. The library service is composed by: a system
mechanism that securely identiﬁes its users; work-ﬂow process
for item submission; import and export collections; statistical
reports/summary and searchable engine. Users can access bib-
liographic information such as articles, papers, thesis, books,
and dissertations. The user interface is responsible for inter-
facing between user and digital library management system.
Figure 1 presents a digital library service hosted in a private
cloud. The service provides submission of contents to the
database by a manager, so then users can have access to them.
Fig. 1. Digital Library Overview.
The private cloud is composed of three main components:
the Main and Standby nodes as well as the Management
(M gn) server (See Figure 2). The Main node is composed by
the main host of the environment containing a Virtual Machine
Monitor (V M M) and a Virtual Machine (V M) hosted in the
Main Node. The application (app) running in the V M is a dig-
ital library service. There is a Standby node, in order to ensure
high levels of availability. It is a spare host which assumes the
Main node role when a failure occurs. The management server
is the component responsible to supervise and control the entire
cloud environment through a speciﬁc cloud management tool.
Figure 2 depicts the mentioned architecture. Additionally, it
is important to stress that the remote storage volume can be
accessed by the V M and its management is conducted through
the Management server. All the components are interconnected
by a private network.
The cloud operational mode is described as follows. The
Main node (and its V M) and the Management server must be
working in order to let the system be operational. However, in
case the Standby node fails, the availability of the cloud goes
down. It is worth highlighting that the roles of Standby node
and Main node are swapped when the V M restores, therefore
the host availability becomes essential to cloud availability as
soon as an incoming recover is completed. The objective of
the Standby Node is to maximize the availability of the cloud
settling constraints that can be established through service level
agreement.
III. MODELS
This section presents the adopted AFT, SPN and RBD mod-
els to compute the availability of the private cloud environment
667
Fig. 2. Architecture Overview.
regarding the digital library service. An hierarchical model
has been created to estimate the availability of the previously
presented architecture.
A. Accelerated Life Testing
Accelerated life testing (ALT) has been used to reduce
lifetime of products through the acceleration of performance
degradation features. This method aims to obtain data from
experiments under higher stress conditions than the usual
ones [5]. The accelerated exponential model [6], [7] is adopted
when the time to failure under stress condition is exponentially
distributed with a constant failure rate λs. The failure rate
is calculated by the Equation 1, where λo is the failure rate
under normal conditions, λs is the failure rate under stress
conditions, and AF (acceleration factor) is the ratio of normal
and accelerated conditions.
λo = λs/AF
(1)
The Weibull distribution gives the distribution of lifetimes
of devices. It was originally proposed to quantify weary data.
The accelerated Weibull model [6] is proved by the distributed
relationships between failure time and normal conditions. The
Mean time to failure under normal conditions is represented
by the Equation 2.
M T T Fo = θ
1/γΓ(1 + 1/γ)
(2)
B. Reliability Block Diagram
The Reliability block diagram (RBD) [8] is a combinatorial
model initially proposed as a technique for calculating the
reliability of a system using intuitive block diagrams. Such
technique has also been extended to calculate other depend-
ability metrics, such as availability and maintainability [9].
Figure 3 illustrates two examples, in which independent blocks
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 06:04:37 UTC from IEEE Xplore.  Restrictions apply. 
















Fig. 5. Node RBD Model.

Fig. 3. Reliability block diagram.
are arranged in parallel (Figure (3a)) and series (Figure (3b))
structures.
In an arrangement series, the whole system is no longer
operational if a single component fails. If a system with n
independent components is considered, the reliability (instan-
taneous availability or steady state availability) is obtained by:
(cid:2)n
Ps(t) =
Pi
i=1
(3)
where P i is the reliability - Ri(t) (instantaneous availability
(Ai(t)) or steady state availability (Ai)) of block bi.
In a parallel arrangement (see Figure (3a)),
the whole
system is operational if only a single component is operational.
For a system with n independent components, the reliability
(instantaneous availability or steady state availability) is ob-
tained by:
Ps(t) = 1 −
(1 − Pi)
(4)
(cid:2)n
i=1
3) Composition Model: After modeling the front-end and
node subsystems, a composition model is adopted to represent
the whole system. Figure 6 shows the composition model in
which each subsystem is represented by a block interconnected
in a serial arrangement.




Fig. 6. Frontend and Node RBD Model.
4) Front-end and Redundant Node: This model is com-
posed of a front-end and two redundant node subsystems in
a hot standby arrangement. Figure 7 shows the correspondent
RBD model. This redundancy increases the availability of the
environment due to the fact that when a node fails, another
one automatically takes the place.





where Pi is the reliability - Ri(t) (instantaneous availability
(Ai(t)) or steady state availability (Ai)) of block bi.
Fig. 7. Frontend + Redundant Node RBD Model.
A k-out-of-n system functions if and only if k or more
of its n components are functioning. Let p be the success
probability of each of those blocks. The system success
probability (reliability or availability) is calculated by:
(cid:4)
(cid:5)
n
i
n(cid:3)
i=k
k(1 − p)n−k
p
(5)
1) Front-end Model: Figure 4 depicts the RBD model that
represents the front-end. The front-end is composed of three
serial components: hardware (Hw), operational system (OS)
and the Management server (Mng). The machine that runs
the Management server is the front-end [X]. Considering the
architecture depicted in Figure 2, the Front-end is represented
by M gnServer.





Fig. 4. Frontend RBD Model.
2) Node Model: Figure 5 shows the RBD model
that
represents the Node. The Node is composed of ﬁve serial com-
ponents: hardware, operational system, Management server,
virtual machine (VM) and the digital library service (DL).
As depicted the architecture in Figure 2, the Node Model is
represented by M ainN ode.
668
C. Stochastic Model
SP N Models: This work adopts a particular Petri net
extension, namely, Stochastic Petri Nets (SPN) [10], which
allows the association of probabilistic delays to transitions us-
ing the exponential distribution, and the respective state space
is isomorphic to continuous time Markov chains (CTMC) [10].
Besides, SP N allows the adoption of simulation techniques
for obtaining dependability metrics as an alternative to the
Markov chain generation. The following subsection brieﬂy
presents the proposed SP N building block for obtaining the
metric availability.
1) Cold Standby Redundant Model: A cold standby redun-
dant system is composed of a non-active spare module that
waits to be activated when the main active module fails. Fig-
ure 8 depicts the SP N model of this system, which includes
four places, namely V M 1 ON, V M 1 OF F , V M 2 ON,
V M 2 OF F that represent the operational and failure states
of both the main and spare modules, respectively. The spare
module (V M 2) is initially deactivated, hence no tokens are
initially stored in places V M 2 ON and V M 2 OF F . When
the main module fails, the transition T ACT is ﬁred to activate
the spare module. The redundancy model was adopted to the
digital library environment in order to represent a situation
when a V M goes down, and the activation of the spare V M
restores the service.
Table I presents the M T T F and M T T R parameters used
in order to analyze the RBD models. The values are based
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 06:04:37 UTC from IEEE Xplore.  Restrictions apply. 
To deﬁne performance-intensive scenarios, all the HTTP
requests generated by the browser while navigating through
library service were recorded by the Jmeter tool [15]. A load
test with just one user was used to determine the response time
of performance intensive requests. In addition to this, three
measurement experiments were deﬁned to obtain the response
time of the digital library service. The data were collected
during the period of 48 hours until failures started to occur.
This study considers it a failure when the response time
is greater than 6 seconds. From the collected data, the ab-
normalities or errors (outliers) in the measurements were
removed. The next step was to ﬁt
the failure data to an
appropriate probabilistic distribution. It is important to note
that the environment was conﬁgured under the same conditions
after each measurement occurred.
B. Numerical Results
It was necessary to accomplish the ATF planning before the
measurements. The test plan was adopted with the following
characteristics. Type of stress: HTTP requests; Stress Loading:
Constant stress test. After that, the accelerating stress factor
was deﬁned (Table II. The acceleration factor (AF ) was based
on the ratio between normal conditions under accelerated
the normal conditions are 0.03
conditions. For this study,
request/s and the accelerated conditions consider 4 request/s.
TABLE II.
FACTOR AND LEVEL VALUES
Workload Parameter
Request
Request rate (req/s)
Regular
High
0.034
4
After deﬁning the plan, it was possible to deﬁne the statis-
tical parametric model. Thus, the failure times at each stress
level were used to determine the most appropriate failure time
probability distribution. The following models are commonly
used: exponential, Weibull, Gamma and log-normal. Following
the ﬁt failures times collected during 48 hours, it was possible
to conclude that
the accelerated Weibull model was more
appropriate to describe the behavior of the obtained data. Thus,
the Weibull parameters were calculated in order to describe
the mean time to failure (MTTF). Table III depicts the mean
time to repair (MTTR) and mean time to failure (MTTF). The
MTTR used to recover a Virtual Machine was estimated from
observation on analyzed infrastructure.