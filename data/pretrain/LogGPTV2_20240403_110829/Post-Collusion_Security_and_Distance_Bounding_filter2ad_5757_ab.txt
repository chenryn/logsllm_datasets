The first formalisation of terrorist fraud within a symbolic model
appeared in a recent work by Chothia et al. [20]. The authors define
collusion actions in the form of a cryptographic oracle similar to
weak-compromise in [23]. In their model for terrorist fraud, the
adversary queries a distant prover’s oracle to obtain the required
messages to falsely prove that such prover is co-located with the
verifier. In Section 6.2 we discuss differences between Chothia et
al.’s approach and ours, and show that Chothia et al.’s framework
delivers incorrect results for some protocols.
3 MODELLING SECURITY PROTOCOLS
This section describes the security model we use throughout this
paper. It is based on the multiset rewriting theory employed by
the Tamarin verification tool [47, 55]. Protocols are specified as
transition rules, and the associated transition system describes the
protocol executions. The states of the system are composed of facts.
Transition rules model how the protocol participants, as well as the
adversary, behave and interact.
3.1 Preliminaries
Notation. Given a set S, we denote by S ♯ the set of finite multi-
sets with elements from S, and by S∗ the set of finite sequences
of elements from S. The power set of S is denoted by P(S). For
any operation on sets, we use the superscript ♯ to refer to the
corresponding operation on multisets.
Given a (multi)set S and a sequence s ∈ S∗, |s| denotes the
length of s, si the i-th element of s with 1 ≤ i ≤ |s|, and λ the
empty sequence. We write s indistinctly as [s1, . . . , sn] or s1 · · · sn
(the choice depends on presentation). The concatenation of the
sequences s and s′ is denoted by s · s′. We use set(s) and multiset(s)
to denote the set and multiset of elements from s, respectively.
Given a ∈ S and s ∈ S∗, we write a ∈ s for ∃i ∈ {1, . . . , |s|}. a = si
and a (cid:60) s for the opposite.
Cryptographic Messages. To model cryptographic messages, we
use an order-sorted term algebra (S, ≤, TΣ(V)) where S is a set of
sorts, ≤ a partial order on S, Σ is a signature, and V is a countably
infinite set of variables. We consider three sorts: msg, fresh, pub ∈ S,
where fresh ≤ msg and pub ≤ msg. That is, msg is the super sort
of two incomparable sub-sorts fresh and pub, denoting fresh and
public names, respectively. We use Vs ⊆ V to denote the set of
term variables of sort s and write x : s to indicate that x is a variable
of sort s.
Each function symbol f ∈ Σ has a type (w, s) ∈ S∗ × S, where
w is the arity and s the sort. If w is the empty sequence λ, then f
denotes a constant of sort s. We use Σw ,s ⊆ Σ to denote the family
of function symbols of type (w, s). Special function families are
Σλ,fresh and Σλ,pub, denoting fresh names (a.k.a. nonces) and public
names, respectively. Public names include constants (often written
in between quotations, e.g. ‘hello’), and agents’ names.
We provide next a list of reserved function symbols:
• ⟨ , ⟩ ∈ Σmsg×msg,msg to pair two terms.
• fst, snd ∈ Σmsg,msg to extract the first and second term from
a pair, respectively.
• senc, sdec ∈ Σmsg×msg,msg for symmetric encryption and
decryption, respectively. The second argument is the key.
• aenc, adec ∈ Σmsg×msg,msg for asymmetric encryption and
decryption, respectively.
• pk ∈ Σmsg,msg to indicate the asymmetric public key of the
argument.
• sign ∈ Σmsg×msg,msg and verify ∈ Σmsg×msg×msg,pub to cre-
ate and verify signatures, respectively.
The semantics of the function symbols above is formalised by
an equational theory E, which is in turn defined by the following
set of equations over Σ, where true ∈ Σλ,msg:
(cid:8)fst(⟨x, y⟩) = x, snd(⟨x, y⟩) = y,
verify(sign(x, y), x, pk(y)) = true(cid:9).
sdec(senc(x, y), y) = x,
adec(aenc(x, pk(y)), y) = x,
1, . . . , t′
We use t =E t′ to indicate that terms t and t′ are equal modulo E.
Terms in our term algebra without free variables are called ground
terms. A substitution is a well-sorted function σ : V → TΣ(V), i.e.
(σ(x) = y ∧ x : s) =⇒ y : s, from variables to terms. We use tσ to
denote the application of the substitution σ to the term t.
Multiset Rewriting System. We model the execution of a proto-
col as a labelled transition system. A state in the system is a multiset
of facts, and a fact is a term of the form F(t1, . . . , tn) where F is
a symbol from an unsorted signature Γ and t1, . . . , tn are terms
in TΣ(V). For n ≥ 0 we denote by Γn ⊆ Γ the set of fact sym-
bols with n arguments. The application of a substitution function
σ to a fact F(t1, . . . , tn), denoted F(t1, . . . , tn)σ, results in the fact
F(t1σ, . . . , tnσ). The set of all facts is denoted F and the set G ⊆ F
denotes the set of ground facts, which are facts with only ground
terms as arguments.
F(t1, . . . , tn) =E G(t′
ti =E t′
are extended to sequences of facts in the trivial way.
We extend equality modulo E from terms to facts as follows:
m) if and only if F = G, and n = m, and
i for all i ∈ {1, . . . , n}. Substitution and equality modulo E
A fact symbol is either linear or persistent. Linear fact symbols
model resources that are exhaustible, such as a message sent to the
network. Persistent fact symbols model inexhaustible resources,
such as the adversary knowledge or long-term encryption keys.
We reserve the linear fact symbols In, Out, Fr ∈ Γ1. The facts
In(m) and Out(m) denote the reception and sending of m, respec-
tively. Fr(m) indicates that m is a fresh name.
The persistent fact symbols K ∈ Γ1, Ltk ∈ Γ2, Shk ∈ Γ3 and
Compromise ∈ Γ1 are also reserved. K(m) indicates that the mes-
sage m is known to the adversary. Facts with symbols Shk and Ltk
are used to associate agents to their long-term cryptographic keys.
Shk(A, B, k) indicates that k is the long-term symmetric key shared
by A and B, and Ltk(A, sk) indicates that A holds the long-term
asymmetric private key sk. We say that an agent A is compromised
if the agent has revealed at least one of their long-term keys; and
we use the fact Compromise(A) to indicate so.
Given a sequence of facts s ∈ F ∗, we write linear(s) and persist(s)
to denote the multiset of linear facts from s, and the set of persistent
facts from s, respectively.
The execution of a protocol starts with the empty multiset of
facts, and evolves through multiset rewriting rules. A multiset rewrit-
ing rule is a tuple (p, a, c), written as(cid:2)p(cid:3) a−→(cid:2)c(cid:3), where p, a and c are
A ground instance of a rule r :=(cid:2)p(cid:3) a−→(cid:2)c(cid:3) is obtained via appli-
cation of a substitution function σ to result in rσ :=(cid:2)pσ(cid:3) aσ−−→(cid:2)cσ(cid:3)
sequences of facts called the premises, the actions, and the conclu-
sions of the rule, respectively. Each term in a multiset rewriting
rule is assumed to be of sort msg, unless otherwise indicated.
where pσ, aσ and cσ consist of ground facts only. Given a set of
rules R, we denote ginsts(R) the set of ground instances of the rules
from R. We write д ∈E G, where д is a (possibly ground) rule and G
is a set of (possibly ground) rules, to indicate that ∃д′ ∈ G. д =E д′.
A set R of multiset rewriting rules defines a multiset rewriting
system: an LTS whose set of states is G♯ and whose transition
relation →R ⊆ G♯ × P(G) × G♯ is defined by:
S
′ ⇐⇒
l−→R S
∃(p, a, c) ∈E ginsts(R).
l = set(a) ∧ linear(p) ⊆♯ S ∧ persist(p) ⊆ set(S) ∧
S
′ =(cid:0)S \♯ linear(p)(cid:1) ∪♯ multiset(c).
nating states and labels such that:
(1)
A transition is performed by applying a ground instance of a
transition rule. The rule is applicable if the current system state
contains all facts in the premises of the rule. The rule application
removes the linear facts from the state, keeps the persistent facts,
and adds the facts from the conclusions.
An execution of R is a finite sequence [S0, l1, S1, . . . , ln, Sn] alter-
• S0 = ∅♯,
• Si−1
• if Si +1 \♯ Si = {Fr(x)}♯ for some i and x, then j (cid:44) i does not
exist such that Sj+1 \♯ Sj = {Fr(x)}♯.
once. The set of all executions of R is denoted(cid:74)R(cid:75).
The third condition guarantees that fresh names are generated
li−→R Si for 1 ≤ i ≤ n, and
3.2 Protocol Specification
A protocol is specified as a set of multiset rewriting rules, called
protocol rules, with the following restrictions: (1) fresh names and K
facts are not used, (2) In and Fr facts do not occur in the conclusions,
and (3) every variable occurring in the actions or conclusions either
occurs in the premises or is of sort pub. The universe of all rules
that satisfy these conditions is denoted R.
Example 1 (The Toy protocol). Figure 1 shows a message se-
quence chart (MSC) [25] of the Toy protocol, an example protocol
which we will use for illustration throughout the paper. The initiator
I creates a nonce1 ni, and sends it to the responder agent R, encrypted
with their shared long-term symmetric key. Upon reception, R de-
crypts the received message to learn ni. Then, R creates his own nonce
nr, encrypts it using the nonce ni as a key, and sends that encrypted
message to I. Upon reception of senc(nr, ni), I learns nr and sends
back to R a hash of nr. Such a value allows R to be convinced that I
has executed the protocol with R and agrees on the nonces nr and ni.
The protocol rules are depicted in Figure 2.
The specification of the Toy protocol uses fact symbols that are
reserved, such as Shk. Indeed, we assume that all protocol specifi-
cations use reserved fact symbols with the intended meaning. The
remaining facts are used to enrich execution traces with informa-
tion that will be later used to analyze trace properties.
For example, RState1(I, R, ni, nr) appears in the conclusion of R1
and in the premises of R2, allowing to establish an order between R1
1We will indistinctly use “nonce” and “fresh name”, though they mean the same thing:
a number generated once.
Learn :=(cid:2)Out(x)(cid:3)−→(cid:2)K(x)(cid:3)
Inject :=(cid:2)K(x)(cid:3) K(x)−−−−→(cid:2)In(x)(cid:3)
AdvFresh :=(cid:2)Fr(x)(cid:3)−→(cid:2)K(x)(cid:3)
Public :=(cid:2) (cid:3)−→(cid:2)K(x)(cid:3) where x : pub
Funct :=(cid:2)K(x1), . . . , K(xn)(cid:3)−→(cid:2)K(f (x1, . . . , xn))(cid:3)
Figure 3: Dolev-Yao rules.
which we will explain in the next paragraph. We remark that the
compromise capabilities of the adversary are part of the protocol
specification (e.g. KeyCompI and KeyCompR in the Toy protocol). We
will extend this model with collusion actions in the next section.
The rules Learn and Inject model the adversary’s ability to
learn messages being sent and to inject any of their known mes-
sages, respectively. The rule AdvFresh declares that the adversary
can generate their own fresh names. The rule Public states that the
adversary knows all public messages and the rule Funct indicates
that the adversary can evaluate any function, provided that they
know the inputs.
We denote by I the set of intruder rules in Figure 3 together with
the rule Fresh, which will form part of every protocol specification.
(cid:74)Proto ∪ I(cid:75). Moreover, given an execution [S0, l1, S1, . . . , ln, Sn] of
Hence, the set of all executions of a set Proto of protocol rules is
Proto, the sequence l1 · · · ln is called the trace. The set of all traces
of Proto is denoted Traces(Proto).
3.4 Security Properties
Security properties are verified on execution traces. Certain facts
on the traces indicate a security claim, e.g. the Commit fact in the
Toy protocol. A security claim denotes a belief (traditionally of an
agent) about the protocol execution that led to the claim. Formally,
we define a security property φ as a relation on traces and integer
numbers such that φ(t1 · · · tn, i) means that security claims in ti are
valid. Recall that a trace is a sequence of labels, which in turn are
sets of ground facts.
For illustration purposes, let us instantiate φ with the authenti-
cation property non-injective agreement, as defined by Lowe in [43].
Following Lowe’s notation, we use the fact symbols Running and
Commit as markers in the traces to indicate those execution steps
where agreement is expected to be satisfied, e.g. as used by rules
I2 and R2 in Figure 2.
Non-injective agreement on a message m is guaranteed to an
agent A, if whenever A completes a run apparently with B, denoted
by the claim Commit(A, B, m), then B has previously performing a
run apparently with A and they both agree on m, denoted by the
fact Running(A, B, m):
ni_agreement(t, i) ⇐⇒
∀A, B, m. Commit(A, B, m) ∈ ti =⇒
(cid:0)∃j. Running(B, A, m) ∈ tj
(cid:0)∃j. Compromise(A) ∈ tj ∨ Compromise(B) ∈ tj
(cid:1) ∨
(2)
(cid:1) .
Figure 1: The Toy protocol.
KeyGen :=(cid:2)Fr(k)(cid:3)−→(cid:2)Shk(I, R, k)(cid:3)
−−−−−−−−−−−−→(cid:2)Out(k)(cid:3)
ShkCompI :=(cid:2)Shk(I, R, k)(cid:3) Compromise(I)
−−−−−−−−−−−−−→(cid:2)Out(k)(cid:3)
ShkCompR :=(cid:2)Shk(I, R, k)(cid:3) Compromise(R)
(cid:20)Out(senc(ni, k)),
(cid:21)
I1 :=(cid:2)Fr(ni), Shk(I, R, k)(cid:3) Start(ni)
(cid:21)
(cid:20) Out(senc(nr, ni)),
(cid:21) Start(nr)
(cid:20)Fr(nr), In(senc(ni, k)),
(cid:21) Running(I ,R,⟨‘I’,‘R’,ni ,nr ⟩),
(cid:20)IState1(I, R, ni),
−−−−−−−−−−−−−−−−−−−−−−−−→(cid:2)Out(h(nr))(cid:3)
(cid:20)RState1(I, R, ni, nr),
(cid:21) Commit(R,I ,⟨‘I’,‘R’,ni ,nr ⟩),
−−−−−−−−−−−−−−−−−−−−−−−−→(cid:2) (cid:3)
RState1(I, R, ni, nr)
In(senc(nr, ni))
IState1(I, R, ni)
Shk(I, R, k)
R1 :=
I2 :=
R2 :=
End(nr)
−−−−−−−→
−−−−−−−→
End(ni)
In(h(nr))
Figure 2: Specification rules of the Toy protocol.
and R2. The facts of the form Start(x) and End(x) denote the start
and the end of a protocol run by an agent, respectively. The term
x denotes the run identifier. We delay the discussion of the fact
symbols Commit and Running until the introduction of security
properties in Section 3.4.
For the remainder of this article, the fact symbols Start and End
are reserved to mark the start and end of the protocol execution.
Also we assume that the protocol specification is consistent with
the usage of Start and End. In particular, we assume that all End