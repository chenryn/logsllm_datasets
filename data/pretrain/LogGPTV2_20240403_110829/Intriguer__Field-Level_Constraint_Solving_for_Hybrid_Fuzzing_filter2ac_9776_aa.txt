title:Intriguer: Field-Level Constraint Solving for Hybrid Fuzzing
author:Mingi Cho and
Seoyoung Kim and
Taekyoung Kwon
Intriguer: Field-Level Constraint Solving for Hybrid Fuzzing
Mingi Cho
Yonsei University
PI:EMAIL
Seoyoung Kim
Yonsei University
PI:EMAIL
Taekyoung Kwon
Yonsei University
PI:EMAIL
ABSTRACT
Hybrid fuzzing, which combines fuzzing and concolic execution,
is promising in light of the recent performance improvements in
concolic engines. We have observed that there is room for further
improvement: symbolic emulation is still slow, unnecessary con-
straints dominate solving time, resources are overly allocated, and
hard-to-trigger bugs are missed.
To address these problems, we present a new hybrid fuzzer
named Intriguer. The key idea of Intriguer is field-level constraint
solving, which optimizes symbolic execution with field-level knowl-
edge. Intriguer performs instruction-level taint analysis and records
execution traces without data transfer instructions like mov. In-
triguer then reduces the execution traces for tainted instructions
that accessed a wide range of input bytes, and infers input fields to
build field transition trees. With these optimizations, Intriguer can
efficiently perform symbolic emulation for more relevant instruc-
tions and invoke a solver for complicated constraints only.
Our evaluation results indicate that Intriguer outperforms the
state-of-the-art fuzzers: Intriguer found all the bugs in the LAVA-
M(5h) benchmark dataset for ground truth performance, and also
discovered 43 new security bugs in seven real-world programs. We
reported the bugs and received 23 new CVEs.
CCS CONCEPTS
• Security and privacy → Software security engineering.
KEYWORDS
fuzzing; hybrid fuzzing; constraint solving
ACM Reference Format:
Mingi Cho, Seoyoung Kim, and Taekyoung Kwon. 2019. Intriguer: Field-
Level Constraint Solving for Hybrid Fuzzing. In 2019 ACM SIGSAC Con-
ference on Computer and Communications Security (CCS ’19), November
11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 16 pages.
https://doi.org/10.1145/3319535.3354249
1 INTRODUCTION
Fuzzing is an automated bug-finding technique that iteratively
feeds malformed test inputs to a target program [21]. Fuzzers (or
fuzzing tools) have become a popular research topic in the computer
security community for their successes and challenges: a coverage-
based fuzzer named AFL [34] has successfully found a great number
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354249
of bugs in real programs, but it is no good at rendering inputs that
lead to deeper execution paths with complex branch conditions.
For example, AFL is effective at loose constraints, e.g., x > 0, by
applying random mutations, but gets stuck when encountering
tight constraints like magic bytes, e.g., x == 0x0f365c01. On the
other hand, symbolic/concolic execution [14, 17] is good at finding
exact or narrow range values for tight constraints. Thus, a hybrid
fuzzer like Driller[29], combining both methods, can take advantage
of them; however, this promising approach still suffers from the
expensive and slow nature of symbolic emulation in real programs.
Recently, a state-of-the-art approach named Qsym [33] presented
a fast concolic execution engine to support hybrid fuzzing to miti-
gate this problem. Qsym implemented instruction-level symbolic
emulation integrated with native execution using dynamic binary
translation, and leveraged invaluable heuristics, such as basic block
pruning and optimistic solving, for performance improvement in
test case generation. To assess the improved penetration power,
Qsym demonstrated its performance on the benchmark dataset
called LAVA-M [11], which is a synthetic test suite that artificially
injects hard-to-reach bugs into four Linux utilities. Note that many
other modern fuzzers [8, 19, 26, 27] also used LAVA-M for bench-
marking; and this is significant in terms of assessing the ground
truth performance of fuzzing [17].
The result is a bit disappointing, however: Qsym reported that a
great number of bugs (42.1% in who binary) were still unreachable
within the limited time budget (5h per program). It was good at the
other three smaller programs, but not good enough at who, which
contains a larger number of hard-to-reach bugs in LAVA-M. Inter-
estingly, most of the path constraints were multibyte constraints,
e.g., 0x6c616a93 == (lava_get(3022)), that would be a serious
problem for AFL but should not have been for Qsym. As noted,
fuzzing time is a priceless resource for scaling to complicated real
programs.
In this paper, (§2) we scrutinize the performance of hybrid fuzzing
for hard-to-reach bugs, and (§3) we present a new hybrid fuzzer
named Intriguer to address the following problems that we ob-
serve: (§2.1) symbolic emulation is still slow due to data transfer in-
structions and input field-agnostics; (§2.2) unnecessary constraints,
which can be filtered out, dominate solving time; (§2.3) resources
are overly allocated to constraints; (§2.4) hard-to-trigger bugs that
are triggered only when arithmetic/branch boundary conditions
are simultaneously met, are frequently (or always) missed.
(§3.1) The key idea of Intriguer is field-level constraint solving,
which optimizes symbolic execution with field level knowledge.
(§3.2) Intriguer performs instruction-level dynamic taint analysis
(DTA), and records execution traces without data transfer instruc-
tions like mov. Intriguer further reduces the execution traces (e.g.,
tainted instructions that accessed a wide range of input bytes) in
advance, minimizing symbolic emulation. (§3.3) Intriguer infers
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom515fields from unknown input formats, and constructs a field transi-
tion tree for each inferred field to lighten symbolic emulation and
compose minimized constraints. (§3.4) Thanks to these optimiza-
tions, Intriguer significantly reduces symbolic emulation to target
relevant instructions only, and runs a constraint solver minimally
but effectively. Intriguer uses a symbolic solver for complicated
(truly complex) constraints only, and directly solves uncomplicated
constraints by the tree. Moreover, Intriguer deals with both branch
and arithmetic boundary conditions without loss of generality.
This paper makes the following contributions:
We implement Intriguer and perform experiments to evaluate
its effectiveness. To account for the random nature of fuzzing, we
refer to the recent guideline of [17]. We directly compare Intriguer
with Qsym, VUzzer [27], and AFL in our experiments. We use
LAVA-M [11] for ground truth benchmark tests, and real-world pro-
grams such as objdump, nm, readelf, ffmpeg, avconv, tiff2pdf,
and bsdtar.
• Efficient hybrid fuzzing through field-level approach. We
further improved the performance of hybrid fuzzing by novel
techniques like trace reduction and field-level constraint solving
based on our thorough analysis. We evaluated how much those
techniques improve hybrid fuzzing and how practical it is.
• Effectiveness to find hard-to-reach and hard-to-trigger bugs.
Intriguer can dig into fast and trigger both types of bugs, e.g.,
Intriguer found all the bugs in LAVA-M(5h) benchmark programs.
• Real-world bugs. Intriguer discovered 43 new bugs in seven real
programs, including a new one in ffmpeg that has been missed
by OSS-Fuzz for four years, and received 23 new CVEs.
• Open source. For further research, we release our tool at publi-
Organization: §2 analyzes hybrid fuzzing. §3 and §4 describe In-
triguer’s design and implementation, respectively. §5 evaluates
Intriguer on benchmarks and real programs. §6 discuss limitations
and further directions. §7 explains related work. §8 concludes this
paper. The appendix (§A∼§E) contains supplementary material.
2 MOTIVATION
In this section, we describe the motivation of our study by thor-
oughly analyzing the performance of hybrid fuzzing, e.g., Qsym.
We enumerate four findings and explain the details.
cation time at https://github.com/seclab-yonsei/intriguer.
2.1 Symbolic Emulation Is Still Slow
Qsym is an elegant approach of relaxing the performance bottle-
necks in hybrid fuzzing by realizing fast, instruction-level concolic
execution along with heuristics like optimistic solving and block
pruning. Qsym selectively emulates only the instructions necessary
to generate symbolic constraints, unlike existing approaches that
emulate all instructions in the tainted basic blocks [33].
Table 1 compares the time for emulation and constraint solv-
ing, improved by Qsym, with the time for native execution and
DTA for a single execution of two LAVA-M programs and three real
programs. In programs other than objdump, we observe that the em-
ulation time is still significantly slower. Symbolic emulation needs
management (generation, modification, and deletion) of symbolic
expressions whenever a tainted instruction is executed, resulting
in a high overhead. Thus, it is always desirable to further reduce
Table 1: Qsym’s symbolic emulation time is compared with native
execution, DTA, and constraint solving time for a single execution.
Program
Native (s) DTA (s)
md5sum (LAVA)
who (LAVA)
ffmpeg
tiff2pdf
objdump
0.009
0.004
0.009
0.001
0.003
4.3
3.9
21.0
2.4
3.1
Qsym
Emulation (s)
48.0
24.6
501.7
493.8
49.6
Solving (s)
7.4
0.6
108.3
106.2
550.4
Figure 1: The number of instructions executed by each program:
mov-like instructions vs. other instructions. (log scale)
Table 2: Qsym’s single execution: objdump for 600s, default timeout
(10s) per constraint. (# total queries: 2413, total solving time: 527s)
Function
bfd_hash_hash()
bfd_hash_lookup()
bfd_hash_insert()
# of timeouts
14
2
9
# of queries
150
19
100
Total time (s)
190
25
209
the emulation time. Figure 1 shows the number of tainted instruc-
tions (mov-like vs. others). Those instructions will be symbolically
emulated unless removed. Interestingly, Qsym stops generating
constraints from frequently repeated blocks in its block pruning
except for mov instructions. Qsym’s design decision is understand-
able because mov instructions are used for input data propagation,
affecting data flow; however, we observed that they resulted in a
significant slowdown in symbolic emulation (§A in appendix).
Our key observation is that we can avoid emulating mov-like
instructions to further reduce symbolic emulation time because by
comparing tainted instructions, before and after mov, along with
their information (e.g., concrete values) in the inferred field level,
we could track where data moves. Unlike other approaches that are
field-agnostic, we can optimize symbolic execution with inferred-
field knowledge. (§3.4.1)
Our approach. Use light-weight DTA in instruction level to
record tainted offsets and concrete values in the execution
traces except for mov-like instructions, and use the traces for
field-level constraint solving. (§3.2, §3.4)
2.2 Unnecessary Constraints Dominate Solving
In Table 1, unlike the rest of the programs, objdump took more time
for constraint solving than emulation. This indicates that there were
a huge number of timeouts (note: we used a default timeout) in using
a solver and these situations, requiring repetitive measures, might
have caused performance bottlenecks. In basic block pruning, Qsym
does not prune constant instructions (e.g., shifting and masking) or
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom516...
hashp != NULL ;
hashp = hashp -> next )
{
struct bfd_hash_entry *
bfd_hash_lookup (...)
{
hash = bfd_hash_hash ( string , & len ); // compute hash
_index = hash % table -> size ;
for ( hashp = table -> table [ _index ];
1
2
3
4
5
6
7
8
9
10
11
12
13
Listing 1: A part of bfd_hash_lookup() used in binutils for
hash lookup. The hash comparison part is not repeatedly
executed, but complex constraints are generated by repeated
instructions for hashing, making the solving time long.
// compare hash
&& strcmp ( hashp -> string , string ) == 0)
return hashp ;
if ( hashp -> hash == hash
...
Figure 2: The number of tainted instructions executed by each pro-
gram according to the input range (bytes). The number above each
bar represents the number of unique instructions removing dupli-
cates. Many instructions are repeated over a wide input range.
the mov instructions as we already mentioned. These instructions
are, however, frequently used in many cryptographic functions,
such as hash functions, and apt to generate complex constraints.
We observe in objdump, that a lot of solving time was needed and
repeatedly led to timeout in this context.
Table 2 shows the result of solver timeout (10s), i.e., unsat, when
Qsym runs objdump with an elf format input for 600s timeout. We
observe that every branch with a timeout is associated with a hash
as can be seen from the function name of objdump. Qsym wasted
80.5% of its solving time on complex1 constraints that are unneces-
sary, in three hash functions for a single execution of objdump. As
shown in Listing 1, a hash is computed by an input (line 5) and so
accompanies very complex constraints; and therefore, when this
hash is compared (line 11) in branch decisions, a timeout occurs.
Our key observation is that the code in which we expect to find
bugs is a part of checking the size of data to obtain a hash rather
than a part of computing such a hash, or a part that is executed after
a hash check; and therefore, it is necessary to lower the priority of
the instructions that use a wide range of input offsets (Figure 2).
Our approach. Group the DTA-produced execution traces by
instruction, and reduce the traces of the group that accessed
a wide range of input bytes. (§3.2).
2.3 Resources Are Overly Allocated
Modern fuzzers treat tight constraints, such as magic bytes, as com-
plex constraints and adopt sophisticated techniques to resolve them.
Hybrid fuzzers like Qsym also uses a symbolic solver to deal with
such constraints, and other fuzzers like VUzzer and Steelix leverage
1At only three branches, 11.1% of total queries were used for those constraints.
Figure 3: The number of symbolic branches executed. Uncompli-
cated means a branch that makes a direct comparison with an input,
such as loose (a > 0) and tight (b == 0x0f365c01) constraints. Such a
great portion of branches can be solved without using a solver.
height > 0 x5FFF ){
int main ( int argc , char * argv []) {
error (" width or height too large .");
exit (1) ;
unsigned int width , height , count , size ;
unsigned char * data ;
unsigned char header [4];
read ( stdin , header , 4) ;
...
read ( stdin , & width , 4) ;
read ( stdin , & height , 4) ;
if ( width > 0 x5FFF
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20