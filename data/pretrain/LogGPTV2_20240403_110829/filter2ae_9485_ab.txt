            System.out.println();
            long jtime1 = System.currentTimeMillis();
            byte[] jdata = jdkSerialize(stu);
            long jtime2 = System.currentTimeMillis();
            System.out.println("jdk serialize result length = " + jdata.length + "," + "cost time：" + (jtime2 - jtime1));
            long jtime3 = System.currentTimeMillis();
            Student jstudent = jdkDeserialize(jdata);
            long jtime4 = System.currentTimeMillis();
            System.out.println("jdk deserialize result：" + jstudent + "," + "cost time：" + (jtime4 - jtime3));
        }
    }
结果如下：
    hessian serialize result length = 64,cost time：45
    hessian deserialize result：Student(id=1,name=hessian,gender=null),cost time：3
    jdk serialize result length = 100,cost time：5
    jdk deserialize result：Student(id=1,name=hessian,gender=null),cost time：43
通过这个测试可以简单看出Hessian反序列化占用的空间比JDK反序列化结果小，Hessian序列化时间比JDK序列化耗时长，但Hessian反序列化很快。并且两者都是基于Field机制，没有调用getter、setter方法，同时反序列化时构造方法也没有被调用。
#### Hessian概念图
下面的是网络上对Hessian分析时常用的概念图，在新版中是整体也是这些结构，就直接拿来用了：
  * Serializer：序列化的接口
  * Deserializer ：反序列化的接口
  * AbstractHessianInput ：hessian自定义的输入流，提供对应的read各种类型的方法
  * AbstractHessianOutput ：hessian自定义的输出流，提供对应的write各种类型的方法
  * AbstractSerializerFactory
  * SerializerFactory ：Hessian序列化工厂的标准实现
  * ExtSerializerFactory：可以设置自定义的序列化机制，通过该Factory可以进行扩展
  * BeanSerializerFactory：对SerializerFactory的默认object的序列化机制进行强制指定，指定为使用BeanSerializer对object进行处理
Hessian Serializer/Derializer默认情况下实现了以下序列化/反序列化器，用户也可通过接口/抽象类自定义序列化/反序列化器：
序列化时会根据对象、属性不同类型选择对应的序列化其进行序列化；反序列化时也会根据对象、属性不同类型选择不同的反序列化器；每个类型序列化器中还有具体的FieldSerializer。这里注意下JavaSerializer/JavaDeserializer与BeanSerializer/BeanDeserializer，它们不是类型序列化/反序列化器，而是属于机制序列化/反序列化器：
  1. JavaSerializer：通过反射获取所有bean的属性进行序列化，排除static和transient属性，对其他所有的属性进行递归序列化处理(比如属性本身是个对象)
  2. BeanSerializer是遵循pojo bean的约定，扫描bean的所有方法，发现存在get和set方法的属性进行序列化，它并不直接直接操作所有的属性，比较温柔
#### Hessian反序列化过程
这里使用一个demo进行调试，在Student属性包含了String、int、List、Map、Object类型的属性，添加了各属性setter、getter方法，还有readResovle、finalize、toString、hashCode方法，并在每个方法中进行了输出，方便观察。虽然不会覆盖Hessian所有逻辑，不过能大概看到它的面貌：
    //people.java
    public class People {
        int id;
        String name;
        public int getId() {
            System.out.println("Student getId call");
            return id;
        }
        public void setId(int id) {
            System.out.println("Student setId call");
            this.id = id;
        }
        public String getName() {
            System.out.println("Student getName call");
            return name;
        }
        public void setName(String name) {
            System.out.println("Student setName call");
            this.name = name;
        }
    }
    //Student.java
    public class Student extends People implements Serializable {
        private static final long serialVersionUID = 1L;
        private static Student student = new Student(111, "xxx", "ggg");
        private transient String gender;
        private Map> innerMap;
        private List friends;
        public void setFriends(List friends) {
            System.out.println("Student setFriends call");
            this.friends = friends;
        }
        public void getFriends(List friends) {
            System.out.println("Student getFriends call");
            this.friends = friends;
        }
        public Map getInnerMap() {
            System.out.println("Student getInnerMap call");
            return innerMap;
        }
        public void setInnerMap(Map innerMap) {
            System.out.println("Student setInnerMap call");
            this.innerMap = innerMap;
        }
        public String getGender() {
            System.out.println("Student getGender call");
            return gender;
        }
        public void setGender(String gender) {
            System.out.println("Student setGender call");
            this.gender = gender;
        }
        public Student() {
            System.out.println("Student default constructor call");
        }
        public Student(int id, String name, String gender) {
            System.out.println("Student custom constructor call");
            this.id = id;
            this.name = name;
            this.gender = gender;
        }
        private void readObject(ObjectInputStream ObjectInputStream) {
            System.out.println("Student readObject call");
        }
        private Object readResolve() {
            System.out.println("Student readResolve call");
            return student;
        }
        @Override
        public int hashCode() {
            System.out.println("Student hashCode call");
            return super.hashCode();
        }
        @Override
        protected void finalize() throws Throwable {
            System.out.println("Student finalize call");
            super.finalize();
        }
        @Override
        public String toString() {
            return "Student{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    ", gender='" + gender + '\'' +
                    ", innerMap=" + innerMap +
                    ", friends=" + friends +
                    '}';
        }
    }
    //SerialTest.java
    public class SerialTest {
        public static  byte[] serialize(T t) {
            byte[] data = null;
            try {
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                HessianOutput output = new HessianOutput(os);
                output.writeObject(t);
                data = os.toByteArray();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return data;
        }
        public static  T deserialize(byte[] data) {
            if (data == null) {
                return null;
            }
            Object result = null;
            try {
                ByteArrayInputStream is = new ByteArrayInputStream(data);
                HessianInput input = new HessianInput(is);
                result = input.readObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return (T) result;
        }
        public static void main(String[] args) {
            int id = 111;
            String name = "hessian";
            String gender = "boy";
            Map innerMap = new HashMap>();
            innerMap.put("1", ObjectInputStream.class);
            innerMap.put("2", SQLData.class);
            Student friend = new Student(222, "hessian1", "boy");
            List friends = new ArrayList();