    ```
    $ cat prometheus-rolebinding.yaml
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      name: prometheus
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: prometheus
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: monitoring
    ```
3.  普罗米修斯使用配置映射来指定刮擦规则。以下规则-刮擦`kube-apiserver`。可以定义多个废料来获取度量:
    ```
    $ cat config_prometheus.yaml apiVersion: v1
    kind: ConfigMap
    metadata:
      name: prometheus-server-conf
      labels:
        name: prometheus-server-conf
      namespace: monitoring
    data:
      prometheus.yml: |-
        global:
          scrape_interval: 5s
          evaluation_interval: 5s
      scrape_configs:    - job_name: 'kubernetes-apiservers'
          kubernetes_sd_configs:
          - role: endpoints
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
    ```
4.  为普罗米修斯
    ```
    spec:
          containers:
            - name: prometheus
              image: prom/prometheus:v2.12.0
              args:
                - "--config.file=/etc/prometheus/prometheus.yml"
                - "--storage.tsdb.path=/prometheus/"
              ports:
                - containerPort: 9090
              volumeMounts:
                - name: prometheus-config-volume
                  mountPath: /etc/prometheus/
                - name: prometheus-storage-volume
                  mountPath: /prometheus/
          volumes:
            - name: prometheus-config-volume
              configMap:
                defaultMode: 420
                name: prometheus-server-conf
            - name: prometheus-storage-volume
              emptyDir: {}
    ```
    创建部署
5.  Once deployment is successful, port forwarding or Kubernetes services can be used to access the dashboard:
    ```
    $ kubectl port-forward  8080:9090 -n monitoring
    ```
    这将启用普罗米修斯 Pod 的端口转发。现在，您可以使用端口`8080`上的集群 IP 来访问它:
![Figure 10.5 – Prometheus Dashboard ](img/B15566_10_005.jpg)
图 10.5–普罗米修斯仪表板
查询可以作为表达式输入，结果可以作为**图形**或**控制台**消息查看。使用普罗米修斯查询，集群管理员可以查看普罗米修斯监控的集群、节点和服务的状态。
让我们看一些对集群管理员有帮助的普罗米修斯查询的例子:
*   立方 CPU 使用量:
    ```
    sum(rate(container_cpu_usage_seconds_total{container_name!="POD",pod_name!=""}[5m]))
    ```
*   命名空间占用的 CPU 数量:
    ```
    sum(rate(container_cpu_usage_seconds_total{container_name!="POD",namespace!=""}[5m])) by (namespace)
    ```
*   Pod 的中央处理器请求:
    ```
    sum(kube_pod_container_resource_requests_cpu_cores) by (pod)
    ```
让我们按名称空间来看一下演示集群的 CPU 使用情况:
![Figure 10.6 – CPU usage by namespace ](img/B15566_10_006.jpg)
图 10.6–按名称空间划分的 CPU 使用情况
普罗米修斯还允许集群管理员使用配置图设置警报:
```
prometheus.rules: |-
    groups:
    - name: Demo Alert
      rules:
      - alert: High Pod Memory
        expr: sum(container_memory_usage_bytes{pod!=""})  by (pod) > 1000000000
        for: 1m
        labels:
          severity: high
        annotations:
          summary: High Memory Usage
```
当容器内存使用量在`1`分钟内大于`1000`兆字节时，此警报触发标签严重度为`high`的警报:
![Figure 10.7 – Prometheus Alerts ](img/B15566_10_007_New.jpg)
图 10.7–普罗米修斯警报
将`Alertmanager`用于 Prometheus 有助于对来自 Prometheus 等应用的警报进行重复数据消除、分组和路由，并将其路由到集成的客户端，包括电子邮件、OpsGenie 和 PagerDuty。
普罗米修斯将与其他增强数据可视化和警报管理的第三方工具很好地集成在一起。Grafana 就是这样一个工具。Grafana 允许可视化、查询和对从普罗米修斯公司检索到的数据发出警报。
现在让我们看看我们是如何把格拉夫娜和普罗米修斯联系起来的:
1.  Grafana 需要一个用于摄取的数据源；在这种情况下，它就是普罗米修斯。可以使用用户界面添加数据源，也可以使用配置图指定数据源:
    ```
    $ cat grafana-data.yaml                                   apiVersion: v1
    kind: ConfigMap
    metadata:
      name: grafana-datasources
      namespace: monitoring
    data:
      prometheus.yaml: |-
        {
            "apiVersion": 1,
            "datasources": [
                {
                   "access":"proxy",
                    "editable": true,
                    "name": "prometheus",
                    "orgId": 1,
                    "type": "prometheus",
                    "url": "http://192.168.99.128:30000",
                    "version": 1
                }
            ]
        }
    ```
2.  为格拉夫纳创建部署:
    ```
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: grafana
      namespace: monitoring
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: grafana
      template:
        metadata:
          name: grafana
          labels:
            app: grafana
        spec:
          containers:
          - name: grafana
            image: grafana/grafana:latest
            ports:
            - name: grafana
              containerPort: 3000
            volumeMounts:
              - mountPath: /var/lib/grafana
                name: grafana-storage
              - mountPath: /etc/grafana/provisioning/datasources
                name: grafana-datasources
                readOnly: false
          volumes:
            - name: grafana-storage
              emptyDir: {}
            - name: grafana-datasources
              configMap:
                  name: grafana-datasources
    ```
3.  然后，可以使用端口转发或 Kubernetes 服务来访问仪表板:
    ```
    apiVersion: v1
    kind: Service
    metadata:
      name: grafana
      namespace: monitoring
      annotations:
          prometheus.io/scrape: 'true'
          prometheus.io/port:   '3000'
    spec:
      selector:
        app: grafana
      type: NodePort
      ports:
        - port: 3000
          targetPort: 3000
          nodePort: 32000
    ```
4.  The dashboard, by default, has `admin` as a username and password. Once logged in, you can either set up a new dashboard or import one from Grafana. To import one, you can click **+ > Import**, where you will be presented with the following screen. Enter `315` in the first textbox to import dashboard 315 from Grafana:
    ![Figure 10.8 – Importing a dashboard in Grafana ](img/B15566_10_009.jpg)
    图 10.8–在格拉夫纳导入仪表板
5.  This dashboard was created by Instrumentisto Team. On import, all fields on the next screen will be filled up automatically:
    ![Figure 10.9 – Grafana Dashboard – 315 ](img/B15566_10_010.jpg)
    图 10.9–grafana 控制板–315
6.  A new dashboard can also be created with custom Prometheus queries:
    ![Figure 10.10 – Custom dashboard ](img/B15566_10_011.jpg)
    图 10.10–定制仪表板
7.  与普罗米修斯类似，您可以在每个仪表板上设置警报:
![Figure 10.11 – New alerts in Grafana ](img/B15566_10_012.jpg)
图 10.11–格拉夫纳的新警报
还有与普罗米修斯集成的其他工具，使其成为 DevOps 和集群管理员的宝贵工具。
# 总结
在这一章中，我们讨论了可用性作为中央情报局三位一体的重要组成部分。我们从安全的角度讨论了资源管理和实时资源监控的重要性。然后我们介绍了资源请求和限制，这是 Kubernetes 中资源管理的核心概念。接下来，我们讨论了资源管理以及集群管理员如何主动确保 Kubernetes 对象不会出现问题。
我们深入研究了名称空间资源配额和限制范围的细节，并查看了如何设置它的示例。然后我们转向资源监控。我们查看了作为 Kubernetes 一部分的一些内置监视器，包括仪表板和度量服务器。最后，我们看了一些第三方工具——Prometheus 和 Grafana——它们功能更强大，更受大多数集群管理员和 DevOps 工程师的青睐。
使用资源管理，集群管理员可以确保 Kubernetes 集群中的服务有足够的资源可用于操作，并且恶意或行为不端的实体不会占用所有资源。另一方面，资源监控有助于实时识别问题和症状。警报管理与资源监控结合使用，一旦出现症状(如磁盘空间减少或内存消耗高)，风险承担者就会得到通知，确保停机时间最少。
在下一章中，我们将详细讨论深度防御。我们将研究集群管理员和 DevOps 工程师如何通过分层的安全方法来补充安全配置、资源管理和资源监控。深度防御将引入更多工具包，以确保在生产环境中能够轻松检测和减轻攻击。
# 问题
1.  资源请求和限制之间有什么区别？
2.  定义一个资源配额，将内存限制限制为 500 mi。
3.  限制范围与资源配额有何不同？
4.  Kubernetes Dashboard 推荐的身份验证方法是什么？
5.  最广泛推荐的资源监控工具是哪个？
# 进一步参考
有关本章主题的更多信息，您可以参考以下链接:
*   电气系统拒绝服务攻击:[https://www . CNBC . com/2019/05/02/DDOS-攻击-导致-电力系统中断-操作-doe.html](https://www.cnbc.com/2019/05/02/ddos-attack-caused-interruptions-in-power-system-operations-doe.html)
*   亚马逊 Route53 DDOS:[https://www . cpomagazine . com/cyber-security/DDOS-攻击亚马逊-网络服务-引发-云-安全-关注/](https://www.cpomagazine.com/cyber-security/ddos-attack-on-amazon-web-services-raises-cloud-safety-concerns/)
*   Limit Ranger 设计文档:[https://github . com/kubernetes/community/blob/master/投稿人/设计-提案/资源-管理/接纳 _ 控制 _limit_range.md](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/resource-management/admission_control_limit_range.md)
*   忽必烈控制板:【https://github . com/kubricks/dashboard/blob/master/docs/readme . MD】
*   使用 Kubernetes 仪表板进行权限升级:[https://sysdig . com/blog/权限-升级-Kubernetes-仪表板/](https://sysdig.com/blog/privilege-escalation-kubernetes-dashboard/)
*   度量服务器:[https://github.com/kubernetes-sigs/metrics-server](https://github.com/kubernetes-sigs/metrics-server)
*   聚合 API 服务器:[https://github . com/kubernetes/community/blob/master/投稿人/设计-提案/API-机械/聚合-API-服务器. md](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/aggregated-api-servers.md)
*   普罗米修斯查询:[https://Prometheus . io/docs/Prometheus/latest/query/examples/](https://prometheus.io/docs/prometheus/latest/querying/examples/)
*   Grafana 文档:[https://grafana . com/docs/grafana/latest/](https://grafana.com/docs/grafana/latest/)