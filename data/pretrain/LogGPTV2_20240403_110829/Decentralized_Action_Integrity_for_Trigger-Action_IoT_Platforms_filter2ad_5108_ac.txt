security guarantees for trigger-action platforms. We also discuss
challenges in applying this concept to real platforms.
A. Threat Model
We adopt a strong but realistic attacker model—we assume
that
the trigger-action platform is untrusted, and can be
compromised. An attacker can leak OAuth tokens, and then
attempt to invoke actions arbitrarily. An attacker can also
try to manipulate any triggering data passing through the
platform. We assume that the online services of the user such
as Facebook, Samsung SmartThings etc., are not compromised.
If they are compromised, then an attacker can achieve its goals
independently of the trigger-action platform.
The following aspects are outside our threat model. We do
not prevent leakage of sensitive data (e.g., the fact that a trigger
has happened, or an attacker eavesdropping rule execution)
from a compromised trigger-action platform (§VII contains a
discussion of techniques to enable data conﬁdentiality). We
also do not prevent denial of service attacks.
B. Design Space Exploration
Under the above threat model, we discuss candidate designs
to mitigate the security risks of a compromised trigger-action
platform. We also highlight where these candidate designs
fall short of providing necessary security and functionality
properties. Our goal is to prevent attackers who have stolen
the platform’s OAuth tokens from arbitrarily invoking actions.
We are concerned with actions because they have the ability
to change the state of data and devices. In a physical setting,
this can have dangerous physical consequences.
Short-Lived OAuth Tokens. One option is for online services
to issue OAuth tokens that must be refreshed frequently. If the
trigger-action platform is compromised, the online services can
simply stop processing refresh requests from the trigger-action
platform, and it can expire all issued tokens. This technique
reduces the useful attack window to the refresh interval plus
the time it takes for the knowledge that the platform was
compromised to propagate to the online services. However, it
relies on timely detection of the compromise. The strategy also
depends on the existence of a separate signaling mechanism
that the platform operator can use to contact the online services,
as the platform itself is under the control of the attacker in the
worst case.
Fine-Grained Tokens and Per-Rule Permission Prompts. If
online services support very ﬁne-grained tokens, trigger-action
platforms could request tokens whenever a user programs a rule.
Therefore, the trigger-action platform only has the amount of
privilege necessary to execute rules. However, this increases the
number of permission prompts for users, leading to usability
issues. Additionally, attackers can still misuse ﬁne-grained
tokens. As we discuss later, our work improves on this basic
approach by solving the misuse and usability issues.
Avoiding Bearer Tokens. Another solution is to use OAuth 1.0
tokens because these are not immediately useful to attackers if
they are stolen in isolation. It requires stealing the signing key
as well. However, if the trigger-action platform is compromised,
then the attacker gains access to the signing key as well.
Fully Decentralized Platform Construction. A different
approach would be to avoid amassing OAuth tokens in a cloud
platform and provide trigger-action functionality to each user
through a client that executes rules on their own machine (e.g.,
mobile phone, voice-enabled assistant, or smart home hub for
IoT scenarios). While this model removes the trigger-action
platform as the single valuable target, it does not provide the
beneﬁts of cloud services such as fault tolerance, convenience,
and availability.
Rule Analytics/Anomaly Detection. An analytics or anomaly
detection system could potentially determine if certain opera-
tions are inconsistent with the set of user rules. Although this
is a good defense-in-depth measure, it does not address the
root of the problem—until a detection occurs, the attacker can
cause harm. Furthermore, such systems typically require ﬁne
tuning of false positives and negative rates.
C. Decentralized Action Integrity
None of the above candidate designs prevent a compromised
trigger-action platform from arbitrarily manipulating data
and devices. In this section, we introduce the principle of
Decentralized Action Integrity. A trigger-action platform that
adheres to this principle drastically reduces the power of an
attacker who compromises the cloud service component of a
trigger-action platform: It prevents arbitrary misuse of action
functions, and it prevents all users from being affected if the
platform is compromised, even with leaked OAuth tokens. This
concept manifests itself through the following four elements:
• Rule-speciﬁc OAuth tokens: If attackers obtain rule-speciﬁc
tokens, they can only use the tokens to execute operations
on the online services speciﬁc to rules that a user explicitly
creates. For example, consider the rule “IF smoke is detected
THEN turn off oven.” The trigger-action platform would
need two rule-speciﬁc OAuth tokens. One token allows it to
only setup a callback for the smoke event. The second token
allows it to only turn off the oven. Therefore, rule-speciﬁc
tokens only allow the bearer to execute a REST APIs in
the online service that are speciﬁc to a given rule. A rule-
speciﬁc token can also constrain the arguments of an API
6
call. For example, it is possible to mint a rule-speciﬁc token
that only allows the bearer to set a thermostat to 68 degrees
Fahrenheit.
• Timely and veriﬁable triggers: The bearer of a rule-speciﬁc
OAuth token can only execute an action function if it can
prove that the corresponding triggering event was true within
a reasonable (conﬁgurable) time period. Considering our
example rule above, the bearer of the rule-speciﬁc token for
the oven online service can only turn off the oven if it can
prove to the oven service that the triggering event (smoke
was detected) is true. If the platform attempts to turn off
the oven without the proof of trigger occurrence, then the
operation is denied.
• Data integrity: Any triggering data passing through the
cloud service of the trigger-action platform should not be
tampered with. Consider the rule “IF new NASA Instagram
post, THEN save the picture to my Dropbox.” It should not be
possible for a compromised cloud service of a trigger-action
platform to replace the Instagram image with malware.
• Decentralized tokens: Compromise of the cloud service of
the platform should not imply that all tokens are leaked.
There should not be a single point of failure.
The above four elements prevent an attacker with access
to the OAuth tokens of a rule from arbitrarily invoking the
action function, and they prevent a compromise of the platform
from affecting all users of the platform. Rule-speciﬁc OAuth
tokens combined with timely and veriﬁable triggers provide
the security property of action function misuse prevention and
trigger misuse prevention (§V-A).
Supporting Decentralized Action Integrity in a practical
trigger-action platform requires overcoming several challenges.
We discuss them next.
• Rule-speciﬁc tokens will drastically increase the number
of OAuth permission prompts because the platform can
only negotiate such tokens when the user is programming
a rule. Connecting a channel to a user account will not
involve negotiating any rule-speciﬁc tokens as the user is
not programming any rules at channel connection time.
The challenge is to maintain the same number of OAuth
permission prompts while supporting rule-speciﬁc tokens.
• Verifying that a triggering event was true can introduce
an undesirable dependency between the trigger and action
service. In a na¨ıve design, a way to support this proof would
be to make the trigger service send an out-of-band signal
to the action service whenever a trigger event occurs. This
completely defeats the purpose of trigger-action platforms,
which is to connect online services that have no common
connections.
V. DECENTRALIZED TRIGGER-ACTION PLATFORM DESIGN
In this section, we discuss the design and implementation of
Decentralized Trigger-Action Platform, a trigger-action platform
that embodies Decentralized Action Integrity. We also discuss
how our design overcomes the challenges discussed above.
Our design introduces extensions to the OAuth protocol to
ensure that a compromised trigger-action platform only has
the necessary amount of privilege to execute the set of rules
of a given user and that it cannot execute any actions that
Fig. 3: High-level comparison between (a) insecure trigger-
action platforms and (b) DTAP. Instead of storing the over-
privileged tokens in the cloud, each user takes advantage of
a DTAP-Client to secure his tokens. Only recipes and recipe-
speciﬁc tokens reside in the DTAP-Cloud. DTAP guarantees
that no other action other than the one speciﬁed in the recipes
can be performed using the recipe-speciﬁc tokens. We note that
the DTAP-Clients are not created or managed by the DTAP-
Cloud. They are independent entities—a compromise of the
DTAP-Cloud does not compromise a DTAP-Client.
are inconsistent with a user’s rules. Where applicable, we cite
IFTTT as a prototypical trigger-action platform.
Figure 3 provides a high-level comparison between Decen-
tralized Trigger-Action Platform and current insecure designs.
Decentralized Trigger-Action Platform splits the logically
monolithic trigger-action architecture into a cloud service
(DTAP-Cloud) that users do not trust, and one client per user,
(DTAP-Client), that is trusted by its user. The DTAP-Cloud
provides computational infrastructure to execute rules at large
scale, similar to a trigger-action platform’s cloud infrastructure.
Each user must install a DTAP-Client on a device such as a
smartphone. Users connect channels to their accounts and setup
trigger-action rules with the help of the their clients. A user
trusts its own client to manage highly-privileged access to their
online services. The client can use hardware-backed secure
storage (e.g., secure keystore available on both iOS [19] and
Android [34]) to ensure the security of these tokens.
Trust Model. We designed the OAuth protocol extensions for
7
UserUserTrigger-Action PlatformOnline ServicesTokensRecipesTokensRecipesUserUserDTAP- CloudOnline ServicesXTokensDTAP ClientXTokensDTAP ClientRecipesRecipesRecipeTokensRecipeTokens(b) DTAP(a) Insecure Trigger-Action Platform OAuth negotiation RecipeExecution RecipeExecution OAuthnegotiation OAuthnegotiationRecipeSetupRecipeSetupRecipe SetupRecipe Setup OAuth negotiationDTAP to be open allowing anyone to implement the client
portion of the protocol. Our design requires the clients to
not be implemented by the same entity implementing the
untrusted cloud service. Instead, we envision a community
of developers building client applications and hosting them
at various market places, e.g., Android or Apple store. These
app market models naturally result in a few well-built apps
emerging, thus making it easy for users to install relatively good
and secure implementations of the DTAP-Client. An example
of such behavior exists with widely-used protocols—there are
hundreds of SSH apps on Google Play, but only a handful have
the highest ratings and installations. We see this kind of behavior
for other protocols as well—Telnet, FTP, etc. We envision a
similar model for the trusted clients. Additionally, the open
source community can independently vet open source clients.
Our design also requires the online services (e.g., Facebook,
Dropbox, SmartThings REST services) to not be compromised
and to be trusted by the user. Finally, our design requires
a method for an online service to cryptographically verify
statements generated by another online service. The current
prototype leverages the existing certiﬁcates (keypairs) in the
public key infrastructure already in place for online services.
However, this is merely a deployment convenience.3 As we
discuss in §VII, from the viewpoint of key re-use, a cleaner
implementation is to use self-signed certiﬁcates, as one of the
basic properties of our protocol is to ensure that a statement
from an online service has not been forged or tampered with.
As is the case with a typical trigger-action platform, there
are two phases to create a rule: Channel Connection, and Rule
Setup.4 We will discuss how these two phases work in our
design, with the help of an example rule shown below. Without
loss of generality, and for simplicity, this rule: (1) does not
contain predicates in the condition. See §V-C for an explanation
of how DTAP handles predicates securely; (2) contains a single
trigger and single action. Although this is the most widely used
and supported type of rule, there are trigger-action platforms
that support multiple actions (including IFTTT) and sometimes
multiple triggers. Handling extra triggers and actions does
not affect our protocol—the trusted client and online service
endpoints simply have to repeat the steps for a single-trigger
single-action rule.
IF new_item added to ShoppingList THEN
email new_item to PI:EMAIL
Decentralized Trigger-Action Platform introduces two types
of OAuth tokens:
• Rule-Speciﬁc Token: This token is ﬁne-grained, and only
allows the bearer to execute a single function with speciﬁc
parameters on an online service. The DTAP-Client transmits
this token to the untrusted DTAP-Cloud, where it is used to
execute a user’s rules. We introduce rule-speciﬁc tokens to
limit the abilities of an attacker who steals them.
• Transfer Token (XToken): This token is coarse-grained,
and it permits the bearer to negotiate a rule-speciﬁc token
3Our measurements of 297 IFTTT channels indicate that only 2 used HTTP,
while all others used HTTPS.
4We discuss channel signup after these two steps even though Fig. 4 depicts
signup before these two steps because signup is an activity performed by
online service developers instead of users.
without creating an OAuth permission prompt. It is never
provided to the untrusted cloud platform and is only used by
a DTAP-Client to acquire rule-speciﬁc tokens directly from
an online service. When available, our design leverages a
trusted-hardware-backed keystore to encrypt XToken storage
when they are not in main memory (§VI). We introduce the
notion of an XToken to maintain the usability experience of
one-time authorizations of channels, and to gain the security
of rule-speciﬁc tokens.
Channel Connection. In our system, a user connects channels
using the user-speciﬁc client,
typically running on user’s
smartphone or a trusted hub within the user’s home. To create
the above rule, the user ﬁrst connects the ShoppingList and
Email channels (assuming they haven’t been connected before).
This involves the usual step of the user logging in to the services
corresponding to the channels with a username and password,
and eventually accepting the OAuth scopes being requested.
During the subsequent OAuth negotiation, the DTAP-Client
requests and receives an XToken.
Rule Setup. Once the user has connected the trigger and action
channels, the next step is to setup the trigger part of the rule.
This involves navigating a UI and eventually clicking on one of
the trigger functions that the channel offers (see Figure 5). The
DTAP-Client retrieves a list of trigger and action names from the
trigger and action services during channel connection, and then
displays them in the UI. There is a one-to-one correspondence
between trigger and action names displayed in the UI, and
the actual scopes that are eventually requested by the DTAP-
Client on behalf of the user. Therefore, the process of inferring
the trigger or action scope the user intends on granting is
straightforward.
For our example rule, OnNewItem is a trigger that ﬁres
whenever a new item is added to the user’s shopping list.
DTAP-Client will treat the physical act of the user clicking
a speciﬁc trigger function in the trusted client UI as an
implicit authorization for it to obtain a rule-speciﬁc token
that can only execute OnNewItem. In this way, our design
avoids introducing additional permission prompts even though
it uses ﬁne-grained tokens (see §IV-B). It transmits the XToken
it obtained earlier to the trigger online service including
information about the speciﬁc function for which it wants
a rule-speciﬁc token. As a return value, the trigger service
will also transmit its X509 certiﬁcate to the client and the
rule-speciﬁc token (Figure 4).
Rule-speciﬁc token example. Assume that the ShoppingList
service offers two functions that external parties may call:
test(), and OnNewItem(String URL). The XToken
allows the bearer to obtain a rule-speciﬁc token for any of