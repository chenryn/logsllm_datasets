# Literature Study on Disassembly and Binary Analysis

## Table 6: Set of Papers Discussed in the Literature Study
| Conference | Year |
|------------|------|
| NDSS       | 2015 |
| ACSAC      | 2015 |
| USENIX Sec | 2014 |
| NDSS       | 2014 |
| NDSS       | 2015 |
| USENIX Sec | 2013 |
| NDSS       | 2015 |
| NDSS       | 2013 |
| USENIX Sec | 2014 |
| NDSS       | 2013 |
| USENIX Sec | 2015 |
| NDSS       | 2015 |
| USENIX Sec | 2014 |
| NDSS       | 2013 |
| USENIX Sec | 2015 |
| NDSS       | 2014 |
| NDSS       | 2013 |
| USENIX Sec | 2015 |
| NDSS       | 2015 |
| USENIX Sec | 2014 |
| NDSS       | 2013 |
| USENIX Sec | 2015 |
| NDSS       | 2015 |
| USENIX Sec | 2014 |
| NDSS       | 2014 |
| USENIX Sec | 2013 |
| NDSS       | 2015 |
| USENIX Sec | 2015 |
| NDSS       | 2014 |
| NDSS       | 2013 |
| USENIX Sec | 2015 |

## Discussion of Primitives and Error Handling

### Windows and Linux Papers
- **Windows Papers**: At best, only 50% of the papers discuss what happens if the primitive is not recovered perfectly. This number applies to top-tier papers; overall, the number is even lower.
- **Linux Papers**: The situation is slightly better, with a small majority of papers devoting significant attention to potential problems.

### Function Starts
- **Windows Papers**: Only 25% of top-tier papers that require function start information consider potential errors, despite the challenges in accurately recovering this information.
- **Linux Papers**: The percentage is higher but still low, with 33% to 50% of top-tier papers discussing these issues.

### Complex Cases
- **Windows Papers**: The discussion of complex cases such as inline data varies from 31% overall to 42% for top-tier papers.
- **Linux Papers**: The numbers are even lower, but this causes fewer issues as complex cases in ELF binaries are rare.

### Correlation Between Errors and Error Handling
- There is a strong correlation between the discussion of errors and the implementation of error handling mechanisms.
- Papers that discuss errors tend to implement some mechanism to handle them, while those that do not implement error handling often fail to discuss errors at all.

### Categories of Error Handling Mechanisms
1. **Overestimation**: Popular in papers building binary-level security, it minimizes the risk of prohibiting valid edges but may reduce the precision of security policies.
2. **Underestimation**: Used where soundness is more important than completeness.
3. **Runtime Augmentation**: Uses static analysis to approximate a primitive and low-cost runtime checks to fix errors where needed.

- **Usage Frequency**: Overestimation is the most popular, used in around 30% of top-tier papers, followed by underestimation and runtime augmentation.

## Discussion

### Dualism in Disassembly Stance
- **Exaggeration of Difficulty**: The difficulty of pure (instruction-level) disassembly is often exaggerated, leading to an underestimation of the effectiveness of binary-based research.
- **Accuracy in Non-Obfuscated Binaries**: Unless binaries are deliberately obfuscated, instruction recovery is extremely accurate, especially in ELF binaries generated with gcc or clang.
- **Complex Constructs**: Complex constructs like overlapping basic blocks, inline data, and overlapping instructions are rare in non-obfuscated code.

### Inaccuracies in Primitives
- **Function Signatures**: Extremely inaccurate in 64-bit code, though rarely used in the literature.
- **Function Starts**: Regularly needed, but the false negative rate can be as high as 20% even for the best disassemblers. False positive function starts are also common.

### Attention to Problems
- **Windows Papers**: Only 20% to 25% of top-tier papers that use function starts discuss these problems.
- **Linux Papers**: 33% to 50% of top-tier papers devote attention to these issues.

### Effective Error Handling
- Three effective classes of error handling have been proposed: overestimation, underestimation, and runtime augmentation.

## Conclusion

- **Contradiction of Beliefs**: Our study contradicts the widespread belief that complex constructs severely limit the usefulness of binary-based research.
- **Disassembler Accuracy**: Modern disassemblers achieve close to 100% instruction disassembly accuracy for compiler-generated binaries.
- **Future Research**: By analyzing discrepancies between disassembler capabilities and the literature, our work provides a foundation for guiding future research.

## Acknowledgements

- We thank the anonymous reviewers for their valuable input to improve the paper.
- We also thank Mingwei Zhang and Rui Qiao for their proofreading and feedback.
- This work was supported by the European Commission through project H2020 ICT-32-2014 “SHARCS” under Grant Agreement No. 644571, and by the Netherlands Organisation for Scientific Research through grant NWO CSI-DHS 628.001.021 and the NWO 639.023.309 VICI “Dowsing” project.

## References

[1] ANDRIESSE, D., VAN DER VEEN, V., G ¨OKTAS¸ , E., GRAS, B., SAMBUC, L., SLOWINSKA, A., BOS, H., AND GIUFFRIDA, C. Practical Context-Sensitive CFI. In Proceedings of the 22nd Conference on Computer and Communications Security (CCS’15) (Denver, CO, USA, October 2015), ACM.

... (and so on for the rest of the references)

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.