### PWN基础入门

#### 堆漏洞利用
##### 堆溢出利用--unlink
堆溢出利用中，`unlink`是一种常见的技术。以下是其基本结构和利用方法：

1. **Chunk 结构**：
   - `Prev_size`
   - `Size`
   - `fd`
   - `Bk`

2. **示例**：
   ```
   . . . . . .
   P
   FD
   BK
   Prev_size
   size
   fd
   Bk 
   . . . . . .
   Prev_size
   size
   fd
   Bk 
   . . . . . .
   free_addr
   free_addr - 12
   Shellcode_addr
   (free_addr – 12) ->bk = shellcode_addr
   shellcode_addr -> fd =  free_addr – 12
   free_addr = shellcode_addr
   P->fd->bk = P->bk.
   P->bk->fd = P->fd.
   ```

3. **利用过程**：
   - 当程序再次执行`free`时，会转而执行`shellcode`。
   - 在较低版本的glibc中，没有校验机制，攻击者可以正常获得shell执行命令。
   - 新版本的glibc增加了安全检查机制，如`Double Free`检测、`next size`非法检测和双链表冲突检测。

4. **新版本glibc的安全检测机制**：
   - **Double Free检测**：不允许释放一个已经处于free状态的chunk。相关代码如下：
     ```c
     if (chunk_is_free(chunk)) {
         // 报错
     }
     ```
   - **next size非法检测**：检测`next size`是否在8到当前arena的整个系统内存大小之间。相关代码如下：
     ```c
     if (next_size < 8 || next_size > arena_system_mem) {
         // 报错
     }
     ```
   - **双链表冲突检测**：在执行`unlink`操作时，检测链表中前一个chunk的`fd`与后一个chunk的`bk`是否都指向当前需要unlink的chunk。相关代码如下：
     ```c
     if (P->fd->bk != P || P->bk->fd != P) {
         // 报错
     }
     ```

   尽管如此，依然有办法可以绕过这些安全检测机制（比如伪造chunk等）。

#### UAF（Use After Free）
##### HITCON-training 示例
- **程序功能**：
  - `add_note`菜单项最多可以添加5个note。
  - 每个note有两个字段：`put`和`content`，其中`put`会被设置为一个函数，该函数会输出`content`的内容。
  - `print_note`根据给定的note索引输出对应索引的note内容。
  - `delete_note`根据给定的索引释放对应的note。删除时只是单纯进行了`free`，而没有设置为`NULL`，存在UAF漏洞。

- **如何利用UAF**：
  - 从`add_note`函数可以看出，一个note是8个字节，分别存放`put`和`content`两个指针。
  - 程序根据输入的`size`来申请指定大小的内存，然后用来存储`content`。
  - `put`会被赋值为`print_note_content`函数地址。由于程序里自带`magic`函数（读取flag），思路是修改note的`put`字段为`magic`函数的地址，这样当调用`print note`的时候就会直接执行`magic`函数，打印出flag。

- **利用步骤**：
  1. `Malloc note0, size=16, content='aaaa'`.
  2. `Malloc note1, size=16, content='bbbb'`.
  3. `Free note0`.
  4. `Free note1`.
  5. `Malloc note2, size=8, content=addr(magic)`.
  6. `Print note0, got the flag`.

#### Double Free
##### 原理
- `double free`的原理类似于堆溢出，都是通过`unlink`宏来利用的，但`double free`需要由自己来伪造整个chunk并欺骗操作系统。
- 在堆漏洞利用中，很多都是基于触发`unlink`来实现任意代码执行的。不同于`unlink`的是，`double free`一般需要至少获得三个连续的chunk，再全部`free`。之后再重新分配两个大chunk（能够覆盖前面`free`的三个chunk），通过伪造`p`（利用绕过`unlink`的检查的技术伪造）chunk和一个引导触发`unlink`的chunk即可。

#### Off-By-One
##### 利用思路
- **溢出字节为可控制任意字节**：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据，也可使用`NULL`字节溢出的方法。
- **溢出字节为`NULL`字节**：在`size`为`0x100`的时候，溢出`NULL`字节可以使得`prev_in_use`位被清，这样前一堆块会被认为是`free`块。
  - 可以选择使用前面提到的`unlink`方法进行处理。
  - 另外，这时`prev_size`域就会启用，就可以伪造`prev_size`，从而造成块之间发生重叠。此方法的关键在于`unlink`的时候没有检查按照`prev_size`找到的块的后一块（理论上是当前正在`unlink`的块）与当前正在`unlink`的块大小是否相等。

#### Chunk Extend and Overlapping
##### 利用方法
- `chunk extend`是堆漏洞的一种常见利用手法，通过`extend`可以实现`chunk overlapping`的效果。
- 这种利用方法需要以下的时机和条件：
  - 程序中存在基于堆的漏洞。
  - 漏洞可以控制`chunk header`中的数据。

#### Malloc Maleficarum
##### 堆溢出利用
- 从2004年末开始，glibc malloc变得更加可靠，类似`unlink`的技巧已经废弃。但是在2005年末，Phantasmal Phatasmagoria带来了以下技巧，用于成功利用堆溢出：
  - House of Prime
  - House of Mind
  - House of Force
  - House of Lore
  - House of Spirit
  - ...

#### Fast-Bin-Attack
##### 利用方法
- `fastbin attack`是一类基于`fastbin`机制的漏洞利用方法。
- 这类利用的前提是：
  - 存在堆溢出、use-after-free等能控制chunk内容的漏洞。
  - 漏洞发生于`fastbin`类型的chunk中。
- 如果细分的话，可以做如下的分类：
  - **Fastbin Double Free**
  - **House of Spirit**
  - **Alloc to Stack**
  - **Arbitrary Alloc**
- 其中，前两种主要漏洞侧重于利用`free`函数释放真的chunk或伪造的chunk，然后再申请chunk进行攻击；后两种侧重于故意修改`fd`指针，直接利用`malloc`申请指定位置的chunk进行攻击。

### PWN实例讲解与演示
- 第四部分：PWN解题总结
- 第五部分：PWN题目类型总结

#### PWN题目类型总结
- **Level 1: Basic Security Vulnerabilities**
  - 栈溢出
  - 整数溢出
  - Off-By-One (栈)
- **Level 2: Bypassing Exploit Mitigation Techniques**
  - 绕过Canary、NX、PIE/ASLR
- **Level 3: Heap Vulnerabilities**
  - 使用`unlink`的堆溢出
  - 使用`Malloc Maleficarum`的堆溢出
  - Off-By-One (堆)
  - Use After Free

### 联系方式
- 北京朝阳区酒仙桥路6号院2号楼 100015
- Building 2, 6 Haoyuan, Jiuxianqiao Road, Chaoyang District, Beijing, P.R.C. 100015
- Tel: +86 10 5682 2690
- Fax: +86 10 5682 2000

谢谢！