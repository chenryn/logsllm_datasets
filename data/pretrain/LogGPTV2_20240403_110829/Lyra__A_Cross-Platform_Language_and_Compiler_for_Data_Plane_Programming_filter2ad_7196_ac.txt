function calls that commonly exist in the state-of-the-art chip-
specific languages. For example, both NPL and P4 have functions
that extract the queue length, so that Lyra offers a predefined library-
function call get_queue_len(), as shown in Line 31 in Figure 4.
Header definition. The programmers should specify the packet
header and parser for each deployed algorithm. This part is sim-
ilar to the header and parser definitions in P4. In Lyra, we use
header_type and parser_node to define the header type and
parser, respectively.
Figure 5: Lyra program V.S. P4, chip-specific program.
3 LYRA LANGUAGE
Lyra introduces a high-level abstraction for the network program-
mers to express their algorithms without the hassle of low-level
details. Figure 6 shows the grammar.
3.1 Why Lyra is High-Level?
Compared with current chip-specific languages (e.g., P4 and NPL),
Lyra’s abstraction is easier to use for the following two reasons.
First, Lyra programming only relies on simple semantics (e.g., if-
else) to express packet processing logic rather than “mandatory”
built-in data structures such as tables and registers in P4 and NPL. In
other words, using Lyra, the programmer does not need to take into
account how many tables they need to create, what functions should
be put in which tables, or how to assign registers to different stateful
variables. Second, Lyra is an architecture-independent language,
which allows the programmer to program without considering
chip-specific resource limitation (e.g., how many bits each stage can
support) or architecture constraints (e.g., how many shared register
between stages and can the same stages be accessed multiple times
or just once). In some sense, the relationship between Lyra and chip-
specific languages can be compared to the relationship between C
language and processor-specific assembly languages.
Figure 5 shows two examples to illustrate the difference between
Lyra and P4. In Figure 5(a), the programmer wants to check whether
the source MAC address, smac, is equal to the destination MAC
address, dmac. While P4 language itself does not limit the maxi-
mum bit width in such a comparison, some of programmable ASICs,
say ASIC-X, cannot support the comparison of longer-than-44-bit
variables.2 In P414, the programmer has to address this restriction
by creating two additional tables: one for subtract(tmp, smac,
dmac) and another one for checking tmp is zero or not; in P416,
2We use examples from real ASICs, but omit the ASIC names.
  /* P4_14 Program */action a_get_tmp() {   subtract(tmp, smac, dmac);}action a_com_zero() {   // do something}table get_tmp {   actions { a_get_tmp; }}table com_zero {   reads {tmp: exact}  actions { a_com_zero; }}control com_smac_dmac {  apply(get_tmp);  apply(com_zero);} /* P4_14 Program */action a_get_v16_1() {   shift_left(v16, v8_a, 8);}action a_get_v16_2() {  bit_or(v16, v16, v8_b); }table get_v16_1 {   reads {src_ip: exact}  actions { a_get_v16_1; }  size: 10;}table get_v16_2 {  actions { a_get_v16_2; }}control get_v16 {  apply(get_v16_1){    hit { apply(get_v16_2);}}}/* Lyra Program */if (smac == dmac){    // do something}/* Lyra Program */extern list[10] get_v16_1;if(src_ip in get_v16_1){  v16 = (v8_a  str )*
algorithm str {pBody}
cmd*
func str(para ){funBody}
type str ( , type str )*
item*
cmd*
extern tableType
...
Lyra program
Header type
One big pipeline
Algorithm
Function
Commands
String
Header type
Header body
Header field
One big pipeline
A list of algorithms
Network algorithm
Functions
Define a function
Parameters
Table items
Commands
External variables
Figure 6: Lyra language grammar.
3.3 Specifying Algorithm Scope
Lyra allows the programmers to specify the fine-grained scope
for each algorithm in a given pipeline. The algorithm scope is
designed for extensibility and composition. Note that specifying
such a scope should be the main job of network operators rather
than programmers, so that Lyra allows either programmers or
operators (or both) to define each algorithm’s scope. Due to different
business needs and deployments, we should use the scope to “tailor”
the underlying data plane in a specific way for each of DCNs.
The algorithm scope can be specified as:
algorithm_name: [ region | deploy | direct ]
Region. For an algorithm 𝐴, we use region to specify a set of
switches for 𝐴’s potential placement, e.g., all ToR switches or a
single switch Agg 3.
Deploy. The programmers may want to deploy the copies of 𝐴 on
multiple switches. In Figure 1 example, the copies of int_in are
deployed on the four ToR switches, respectively. On the other hand,
the programmers may use multiple switches to realize one single
algorithm. For example, loadbalancer in Figure 1 is deployed on
four switches. The programmers can distinguish the above two
cases by specifying deploy field in the algorithm scope specification.
The value of the deploy field is either PER-SW or MULTI-SW. PER-
SW means copying the algorithm on each of the specified switches,
and MULTI-SW means realizing the algorithm across the specified
switches. In Figure 7, we use PER-SW for INT’s three algorithms.
ToR* and Agg* denote all ToR and Agg switches.
Direct. When an algorithm is deployed on a set of switches, we
need to specify the direction of the packet flow via the direct
field. As shown in Figure 7, because the algorithm loadbalancer
specifies MULTI-SW, we should define the packet flow direction via
direct; thus, direct is (Agg3,Agg4->ToR3,ToR4), which means
the load balancer algorithm needs to handle the packet flow entering
Agg 3 and Agg 4 and leaving from ToR 3 and ToR 4. This information
is critical for the compiler because it restricts the possible paths the
packet could take, so that the compiler can decide where to deploy
the program. For example, in Figure 7, a packet traverses the load
balancer could never take a path from ToR 4 to Agg 4.
int_in: [ ToR* | PER-SW | - ]
int_transit: [ Agg* | PER-SW | - ]
int_out: [ ToR* | PER-SW | - ]
loadbalancer:
[ ToR3,ToR4,Agg3,Agg4 | MULTI-SW | (Agg3,Agg4->ToR3,ToR4) ]
Figure 7: An example for algorithm scope example.
3.4 Variables in Lyra Programs
Lyra defines three types of variables: internal variable, global vari-
able, and external variable.
Internal variable. The internal variable is straightforward. It is
created when a packet comes in the pipeline and destroyed when the
packet leaves. Internal variable is fixed-width and single-element.
For example, bit[8] in Line 3 in Figure 4 is an internal variable.
Global variable. The global variable provides an index-based array
interface. Different from internal variables, global variables keep
the information across packets. They are created when the Lyra
program is burnt into the programmable switching ASIC, and last
until the switch is down or the program is replaced by another.
For example, global bit[32][1024] pkt_counter in Line 11 in
Figure 4 defines a global variable, pkt_counter, which has 1024
elements, and each element is 32 bit wide. The global variable
supports read and write on the data plane.
External variable. The external variable exposes an “table inter-
face” bridging the data plane and control plane. To define an ex-
ternal variable, we need to define its type, input type, output type,
and element number, such as extern list[1024]
known_ip. The external variable also allows the value (both input
and output) to be a tuple:
extern dict,bit[8] p>[1024] route
We discuss how to translate the external variables into the tables
exposed to the control plane in §5.8.
4 LYRA’S FRONT-END
The front-end of Lyra takes in a Lyra program and outputs a context-
aware intermediate representation (or context-aware IR). Lyra’s
front-end, as shown in Figure 3, has three key modules: (1) given a
Lyra program P, checker checks the syntax and semantics of P
(§4.1); (2) Preprocessor enriches and optimizes P to generate an
IR (§4.2); and (3) Code analyzer (§4.3) analyzes IR’s context infor-
mation (e.g., instruction dependency and deployment constraints)
to form a context-aware IR for post synthesizing.
4.1 Checker
Similar to any compiler, Lyra uses a checker for the syntax and
semantic correctness checking. Suppose a Lyra program, P, is input.
We check P with grammar defined in §3.
4.2 Preprocessor
The preprocessor translates P (e.g., Figure 8(a)) into an IR (e.g.,
Figure 8(c)). IR is crucial for post synthesizing, because high-level
Lyra program P hides too many details, which makes it hard to
directly synthesize chip-specific code from P. In this section, we
use Figure 8 to illustrate how preprocessor generates the IR.
Step 1: Function inlining. We iterate all the algorithms in the
Lyra program. In each algorithm, we inline all the functions with
their function bodies. For example, we expand int_info(int_info)
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
stage; if there is no dependency between 𝑎 and 𝑏, we can parallelize
their executions in different ALUs even in the same stage.
Since IR has been a straight-line code with only read-after-write
dependency, it is straightforward to build an IR instruction depen-
dency graph, where each node represents an IR instruction, and
a directed edge from node 𝑎 to node 𝑏 means the instruction 𝑏
reads one or more variables written by instruction 𝑎. For example
in Figure 8(c), there are three dependencies: (1) Line 3 → Line 4; (2)
Line 4 → Line 6; and (3) Line 5 → Line 6.
Deployment constraints generation. Given the network topol-
ogy information and algorithm scope specification, as shown in Fig-
ure 3, we can generate the following data: (1) target network topol-
ogy with the algorithm-scope tags, such as the Agg 4 in Figure 1 is
tagged with algorithms int_transit and loadbalancer; and (2) poten-
tial flow paths in each scope, such as in the Load Balancer scope
there are four possible flow paths: Agg3 → ToR3, Agg3 → ToR4,
Agg4 → ToR3, and Agg4 → ToR4.
5 LYRA’S BACK-END
By taking in the context-aware IR, Lyra’s back-end synthesizes
chip-specific code. Specifically, this section first models our prob-
lem (§5.1). Then, we describe how to synthesize conditional imple-
mentations for P4 (§5.2) and NPL (§5.3). Next, we use the public
RMT architecture [16, 26] as an example to illustrate how to en-
code chip-specific constraints for the portability (§5.4). We further
present how to encode deployment constraints for the composi-
tion (§5.5) and resource extensibility (§5.6). We put all the above
encoded constraints in the set of conditional placement constraints,
and call an SMT solver to solve the formulas, obtaining a solution
which can be translated into chip-specific code (§5.7). Finally, we
present the control plane interfaces exposed by Lyra in §5.8.
5.1 Problem Modeling
A Lyra program contains a list of algorithms G. For an algorithm
𝑎 ∈ G, it has a specified algorithm scope, S𝑎, e.g., Figure 7, which
represents a group of switches. §4 describes how does the front-end
transform 𝑎 to a collection of IR instructions, defined as 𝐼𝑎. We use
𝐼𝑎( 𝑗) to denote the 𝑗th IR instruction in 𝐼𝑎. We define 𝑓𝑠(𝐼𝑎( 𝑗)) as a
boolean function, which indicates whether the IR instruction 𝐼𝑎( 𝑗)
should be deployed on the switch 𝑠 ∈ S𝑎. The goal of this section
is to find a feasible combination of 𝑓𝑠 that meets the constraints in
the target network. Note that an IR instruction can be deployed on
multiple switches, as long as the correctness of the program holds.
5.2 Conditional P4 Synthesis
This section synthesizes conditional P4 implementation based on
the context-aware IR. Intuitively, conditional P4 synthesis aims
to map the instructions in IR representation to tables in P4 by
analyzing the dependencies among those IR instructions.
Before describing the details of the synthesis algorithm, we need
to define several important terminologies.
• Potentially deployed IR. We define R𝑠 as a set containing all
IR instructions potentially deployed on switch 𝑠. We learn R𝑠
because we know the scope of the algorithm any IR instruction
belongs to.
• Predicate blocks. A predicate block is a set containing IR instruc-
tions, where (1) IR instructions have the same predicate, and (2)
Figure 8: Example. (a) is a Lyra program, (b) is the result of
function expansion, and (c) is the generated IR.
(Line 10 in Figure 8(a)) with its body (Line 2-4 in Figure 8(a)), ob-
taining Line 5-7 shown in Figure 8(b).
Step 2: Branch removal. A Lyra program may contain conditional