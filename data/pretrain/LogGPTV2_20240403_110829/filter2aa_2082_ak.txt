card. App developers may write sensitive data to the logcat log while under the impression that their 
messages will be private and unobtainable. Information disclosure from the logcat log can be damaging 
depending on the nature of the data written to the log. Appendix B contains a username and password pair 
being written to the log from a major bank’s Android app. 
This vulnerability is present in the same app (com.android.modem.service) that allows the modem log 
to be written to the SD card. A third-party app can use the ModemService to activate the logcat logs being 
written to the SD card. As mentioned previously, the ModemService provides access to five different 
services through interfaces to these services. The com.android.modem.service.IAssistantService 
service interface allows any app on the device to programmatically enable the writing of the logcat logs to 
the SD card. The writing of the logcat logs are inactive by default, although simply enabling their logging 
to the SD card can be performed by an app with zero permissions. As mentioned with the modem logs, an 
app that wants to read from the log files on the SD card, will need to request the READ_EXTERNAL_STORAGE 
permission. 
The 
IAssistantService 
service 
interface 
is 
obtained 
by 
calling 
the 
getAssistantInterface() method on the 
IModemService interface. Method calls to the 
IAssistantService 
service 
interface 
will 
be 
delivered 
to 
the 
com.android.modem.service.AssistantService 
class. 
The 
methods 
exported 
by 
the 
IAssistantService service interface mostly cover logging functions. To enable the logcat logs being 
written to the SD card, the following two methods need to be called on the IAssistantService service 
interface: enableDeamonProcess(boolean) and enableAdbLog(Boolean), where both Boolean values as 
parameters to the methods have a value of true. Proof of Concept code is provided in Appendix I. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Once the logcat logs have been activated, they will get written, by default, to the 
/sdcard/sd_logs/AdbLog/logcat directory. Within this directory, there are four files matching the 
names of the different log buffers: logcat_events.txt, logcat_main.txt, logcat_radio.txt, and 
logcat_system.txt. These log files are in plaintext and can be parsed for known-formats of log messages 
that contain sensitive data. Since these logs are written by default to a directory within the 
/sdcard/sd_logs directory. The same method as previously, leveraging the deleteAllLog() method 
from the ISdlogService method, provides a way of deleting the log files periodically 
11. Making Devices Inoperable 
We found two interesting cases where the sending of a single intent message can render an Android device 
inoperable in the general case. The two devices are the MXQ Android 4.4.2 TV Box and the ZTE Zmax 
Champ sold by Total Wireless.  
11.1 MXQ TV Box – Making Devices Inoperable 
The MXQ TV Box has added in a broadcast receiver application component in the core Android package 
(i.e., android). This is part of the Android framework that runs in the system_server process. The MXQ 
TV Box device has a build finger print of MBX/m201_N/m201_N:4.4.2/KOT49H/20160106:user/test-
keys. Any app on the device can send an intent to an exported broadcast receiver application component 
that will make the device inoperable. After the device wouldn’t boot properly, we performed a factory reset 
of the device in recovery mode, and the device would still not boot properly. This leads us to believe that 
the system partition was modified as a result of the actions taken by the broadcast receiver that received an 
intent. Specifically, the package name of the app is android (versionCode=19, versionName=4.4.2-
20170213), 
and 
it 
contains 
an 
exported 
broadcast 
receiver 
named 
com.android.server.SystemRestoreReceiver. 
Below 
is 
the 
declaration 
of 
the 
SystemRestoreReceiver app component in the app’s AndroidManifest.xml file. 
Internally, the SystemRestoreReceiver app component, after receiving a broadcast intent addressed to it, 
calls the androidos.RecoverySystem.rebootRestoreSystem(android.content.Context) method. 
This is a custom method that was added into the android.os.RecoverySystem AOSP class. This custom 
method writes a value of --restore_system\n--locale= to the /cache/recovery/command 
file and boots into recovery mode. It appears that when booting into recovery mode, possibly the system 
partition gets formatted or modified, which would explain the device not booting. We did not examine the 
recovery partition to examine what actually occurs, but we did verify that the device is not functional after 
the SystemRestoreReceiver component executes. Below is the source code to send the broadcast intent 
that will make the device not boot properly. We believe that the user can recover the device by flashing 
clean firmware images to the SD card and flashing them in recovery mode. We have not tried this method, 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
but generally Android TV boxes allow the owner of the device to flash firmware images that are present on 
the SD card. 
Intent intent = new Intent(); 
intent.setClassName("android", "com.android.server.SystemRestoreReceiver"); 
sendBroadcast(intent); 
11.2 ZTE Zmax Champ – Making Devices Inoperable 
We purchased a Total Wireless ZTE Zmax Champ device from Best Buy. This device contains an pre-
installed app with a package name of com.android.zte.hiddenmenu. This ZTE device has a build 
fingerprint of ZTE/Z917VL/fortune:6.0.1/MMB29M/20170327.120922:user/release-keys. Any app 
co-located on the ZTE ZMAX Champ device can make the device generally unusable by sending a single 
broadcast intent with a specific action string. Once this is received, the phone will continually enter recovery 
mode and crash in a cycle. We are not exactly sure why this occurs, but we have destroyed two phones 
using it. The phone will boot into recovery mode, try to perform a factory reset, fail, reboot, and then 
continually repeat all of the previous steps in a never-ending cycle. The device comes with a pre-installed 
app with a package name of com.android.zte.hiddenmenu (versionCode=23, versionName=6.0.1). 
This app executes as the system user and is privileged platform app. In the app’s AndroidManifest.xml 
file, a broadcast receiver named com.android.zte.hiddenmenu.CommandReceiver is declared that 
statically registers to receive broadcast intents with an action of android.intent.action.FD_RESET. 
Sending a broadcast intent with this action will cause the device to enter recovery mode and crash. The 
code to send the broadcast intent is provided below. 
sendBroadcast(new Intent("android.intent.action.FD_RESET")); 
The CommandReceiver broadcast receiver component is exported and accessible to any app co-located on 
the 
device. 
Once 
the 
component 
receives 
a 
broadcast 
intent 
with 
an 
action 
of 
android.intent.action.FD_RESET, the component internally sends a broadcast intent with an action of 
android.intent.action.MASTER_CLEAR_DATA_CARRIER. 
The 
com.android.server.MasterClearReceiver class (running in the system_server process) dynamically 
registers 
a 
broadcast 
receiver 
to 
receive 
broadcast 
intents 
with 
an 
action 
of 
android.intent.action.MASTER_CLEAR_DATA_CARRIER. Once this action string is received by the 
broadcast 
receiver 
it 
will 
call 
the 
android.os.RecoverySystem.rebootWipeUserDataAndCarrier(android.content.Context, 
boolean, java.lang.String) method. This method will write a string value of the contents, shown 
below, to a file with a file path of /cache/recovery/command and then boot into recovery mode. 
--shutdown_after 
--wipe_carrier 
--reason= 
--locale= 
The phone boots into recovery mode and then starts to perform a factory reset and quickly fails and repeats 
the process. We are unable to tell exactly why the fault is occurring since we do not have access to the 
recovery logs. It could be that the command written to the /cache/recovery/command file is malformed 
and causes a crash when in recovery mode and the command in the file keeps being read in and processed, 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
causing another fault, where this cycle continues forever. When the device is continually crashing, we were 
unable to boot into an alternate mode (e.g., system or bootloader). The --wipe_carrier command is not 
in AOSP code, so this command would have to be handled in recovery mode. The standard commands that 
are accepted in the /cache/recovery/command file are provided here in Google’s AOSP source code35. 
Our hypothesis is that --wipe_carrier command or a different command causes the fault in recovery 
mode and this process repeats and always hits the same fault. 
12. Taking Screenshots using system_server 
Certain Android devices will take a screenshot write it to the SD card when a broadcast intent with a specific 
action string is sent. On the vulnerable devices, the system_server process dynamically registers a 
broadcast receiver with this specific action string (the specific action string depends on the device, as it is 
not constant across devices). The contents of the screen buffer are regarded as sensitive. All of the devices 
we examined that allow a third-party app to indirectly take a screenshot perform some animation when a 
screenshot is taken, so it is not transparent to the user. Table 7 provides the devices that we found that allow 
any app co-located on the device to utilize an open interface in the system_server process to take a 
screenshot and write it to external storage. Furthermore, a notification is created indicating that a screenshot 
was taken. If all caution is thrown to the wind, a malicious app may open interesting apps, take screenshots, 
and exfiltrate them. Although the screenshot capability cannot be disabled due to it residing in the 
system_server process, this approach is aggressive. A more guileful approach is to take screenshots while 
the user has been inactive for a period of time. This can be accomplished by running a service in the 
background and dynamically registering for the SCREEN_ON and SCREEN_OFF broadcast intents. The 
attacking app can create an activity that will come to the foreground and turn on the screen even when a 
screen 
lock 
is 
present. 
This 
can 
be 
accomplished 
by 
setting 
the 
WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON 
and 
WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON flags on the current window in the 
activity when it is started. If the app requests the EXPAND_STATUS_BAR permission, the app can expand the 
status bar to show the current notifications and take a screenshot. The attacking app can then use a generic 
approach to cause a system crash to remove the notification that a picture was taken. All Android devices 
that run Android 5.0 to Android 6.0.1 have a vulnerable component where a single intent message can cause 
a system crash due to inadequate exception handling in the system_server process. We developed a 
generic method to cause a system crash on all Android API levels by causing the system_server process 
to exhaust all of its heap memory. An open-source PoC app we developed is available here36.  
Table 7. Android Devices that Allow Any App to Take a Screenshot. 
Device 
Broadcast Action 
Build Fingerprint 
Asus ZenFone 
3 Max 
ACTION_APP_TAKE_SCREENSHOT 
asus/US_Phone/ASUS_X008_1:7.0/NRD
90M/US_Phone-14.14.1711.92-
20171208:user/release-keys 
Asus ZenFone 
V Live 
ACTION_APP_TAKE_SCREENSHOT 
asus/VZW_ASUS_A009/ASUS_A009:7.1.
1/NMF26F/14.0610.1802.78-
20180313:user/release-keys 
Alcatel A30 
android.intent.action.THREE_POINT
ER_SCREENSHOT 
TCL/5046G/MICKEY6US:7.0/NRD90M/J6
3:user/release-keys 
35 https://android.googlesource.com/platform/bootable/recovery/+/master/recovery.cpp 
36 https://github.com/Kryptowire/daze 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Nokia 6 TA- 
1025 
com.fih.screen_shot 
Nokia/TA-
1025_00WW/PLE:7.1.1/NMF26F/00WW_3
_32F:user/release-keys 
Sony Xperia 
L1 
com.sonymobile.intent.action.SCRE
EN_CAPTURE 
Sony/G3313/G3313:7.0/43.0.A.6.49/
2867558199:user/release-keys 
Leagoo P1 
com.android.screen.shot 