### KERNEL WARS: KERNEL-EXPLOITATION DEMYSTIFIED

#### Introduction to Kernel-Mode Vulnerabilities and Exploitation

**Why Exploit Kernel-Level Vulnerabilities?**
- **Challenge and Fun**: Exploiting kernel-level vulnerabilities is a challenging and engaging task.
- **Uncommon Practice**: Few individuals or groups focus on this area, making it a niche field.
- **Bypassing Defenses**: Kernel-level exploits can bypass many security mechanisms and restrictions.
- **Low-Level Attack**: These attacks target the core of the system, often at the lowest level.
- **Independence from Applications**: Exploits do not depend on specific applications being installed.
- **Configuration Independence**: They are not influenced by how applications are configured.
- **Permission Independence**: They do not rely on file or registry permissions.

**Reasons Not to Exploit Kernel-Level Vulnerabilities**
- **Reliability**: Kernel exploits often have only one chance to succeed, requiring high reliability.
- **Complexity**: Setting up kernel debugging can be tedious and time-consuming.
- **Knowledge Requirement**: A deep understanding of kernel internals is necessary.

**Common Targets for Kernel-Mode Attacks**
- **System Calls**
- **I/O and IOCTL Messages via Device Files**
- **Pseudo Filesystems (e.g., procfs)**
- **Network Data Handling (wired/wireless)**
- **Hardware Interaction (e.g., USB, Firewire)**
- **Executable File Format Loaders (e.g., ELF, PE)**

**Payload Strategy**
- **Privilege Elevation**
  - **Unix**: Altering the UID field
  - **Windows**: Stealing access tokens
- **Bypassing Restrictions**
  - **Chroot/Jail/SELinux**: All restrictions can be bypassed in kernel mode.
  - **Ring 0**: The highest privilege level, allowing complete control.
- **Injecting Backdoors**
  - **Stealth**: Operating entirely within the kernel to avoid detection.

**Payload Techniques**
- **Address and Offset Determination**
  - **Symbol Resolution**
  - **Pattern Matching**
  - **Hardcoding (as a last resort)**

- **OS/Architecture-Specific Techniques**
  - **Windows/x86**: ETHREAD-pointer at 0xFFDFF124 (fs:0x124)
  - **FreeBSD/x86**: Proc-pointer at [fs:0]
  - **Linux/x86**: Task_struct-pointer at esp & 0xffffe000
  - **NetBSD/x86**: Proc-pointer [[fs:4]+20]+16
  - **Solaris/AMD64**: _kthread-pointer at [gs:0x18]
  - **Solaris/i386**: _kthread-pointer at [gs:0x10]
  - **Solaris/SPARC**: _kthread-pointer in g7

**Exploitation Best Practices**
- **Minimal Overwrite**: Avoid overwriting more data than necessary.
- **Cleanup**
  - **Stack Rewinding**
  - **Heap Repair**
  - **Data Restoration**

**About the Bug: GDI Shared Handle Table**
- **Description**: A memory section containing GDI handle data, shared between user-mode and kernel-mode.
- **Mapping**: Mapped read-only into every GUI process.
- **Vulnerability**: Can be remapped to read-write after brute-forcing the shared memory section handle.
- **Impact**: Trivial to cause a Blue Screen of Death (BSOD), but can it be exploited further?

**Windows Local GDI Kernel Memory Overwrite**
- **Discovery**: Found by Cesar Cerrudo from Argeniss.
- **Disclosure**: Made public on November 6, 2006 (MoKB).
- **Notification**: Microsoft was notified on October 22, 2004.
- **Affected Systems**: All Windows 2000 and Windows XP systems.
- **Patch**: Released a few weeks after the Blackhat Europe presentation.

**Reliably Determining the GDI Section Handle**
- **GDI Section Structure**:
  - `pKernelInfo`: Pointer to kernel-space GDI object data.
  - `ProcessID`: Process ID.
  - `_nCount`: Reference count.
  - `nUpper`: Upper 16 bits of GDI object handle.
  - `nType`: GDI object type ID.
  - `pUserInfo`: Pointer to user-space GDI object data.
  - Each entry: 16 bytes.

- **Size**:
  - **Windows 2000**: 0x4000 entries, size ≥ 0x40000 bytes.
  - **Windows XP**: 0x10000 entries, size ≥ 0x100000 bytes.

- **Handle Interpretation**:
  - Lower 16 bits: Index into the array in the GDI section.
  - Upper 16 bits: Value of the `nUpper` field in the struct.

- **Final Method**:
  - Create a GDI object, handle value = H.
  - Index into table = H & 0xFFFF.
  - `nUpper` = H >> 16.
  - For each valid shared memory section handle, check:
    - Section size ≥ 0x40000 (W2K) / 0x100000 (WXP).
    - `pGDI[(H & 0xffff)].ProcessID == ExploitPID`.
    - `pGDI[(H & 0xffff)].nUpper == H >> 16`.
    - `pGDI[(H & 0xffff)].nType == ...`.

**Finding a Way to Exploit the Bug**
- **Attack Points**:
  - `pKernelInfo`: Used in kernel context.
  - `pUserInfo`: Used in a privileged process.
- **Goal**: Write to an arbitrary memory address, leading to arbitrary code execution.

- **Challenges**:
  - Exploiting through a privileged process is difficult and not portable.
  - Direct kernel attack bypasses hardening measures and is more fun.

**Attacking the pKernelInfo Pointer**
- **Naive Approach**: Overwrite with trash and hope it ends up in EIP.
- **Realistic Approach**:
  - Test different GDI objects (windows, fonts, brushes, etc.).
  - Point `pKernelInfo` into valid user-mode memory.
  - Fill that memory with a recognizable pattern.
  - Call GDI-related system calls and analyze crashes.
  - Use WinDBG and IDA Pro to find dereferences of data in the fake struct.

**Final Attack**
- **Steps**:
  - Create a BRUSH object.
  - Point `pKernelInfo` into user-mode data.
  - Call `NtGdiDeleteObjectApp()`.
  - Result: 0x00000002 is written to a specific location, reliably across all vulnerable systems.

**Next Steps**
- **Function Pointer Overwrite**:
  - Find a suitable function pointer and determine its address.
  - Only write the fixed value 2 (byte sequence: 02 00 00 00).
  - Use two partial overwrites to construct a high address.
  - Or use `NtAllocateVirtualMemory()` to map the NULL page and place code there.

**Determining Where to Write**
- **Conditions**:
  - Reliably determine the address.
  - Called in the context of the exploit process.
  - Rarely used, not called during the exploit setup.

- **System Call Tables**:
  - `KiServiceTable`: Native NT API, read-only text segment.
  - `W32pServiceTable`: Win32 subsystem, writable data segment.

- **Address Determination**:
  - **KiServiceTable**: Documented methods, but not reliable under Windows XP SP1.
  - **W32pServiceTable**: Search for 600 consecutive pointers or the call to `KeAddSystemServiceTable()` in the "INIT" section of WIN32K.SYS.

**Payload**
- **Objective**: Elevate privileges of the exploit process.
- **Method**: Steal an existing access token from a privileged process.
- **Issues**: Occasional BSODs, seemingly related to the method.