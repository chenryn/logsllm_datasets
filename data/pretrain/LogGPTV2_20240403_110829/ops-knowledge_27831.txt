It sounds like you are experiencing a `PATH` environment variable issue, which is causing the root user to not recognize the newly installed Python 3.4. Hereâ€™s a more detailed and professional explanation of your situation and how to resolve it:

---

I previously had Python 2.6 installed on my Linux system, but I recently installed Python 3.4 to use some new modules. I used `sudo` to install Python 3.4, and it was installed in `/usr/local/bin`. Without root access, I can use Python 3.4 by simply typing `python3.4` in the command line or by using a shebang in my `.py` files, such as `#!/usr/local/bin/python3`.

However, when I try to install a module that requires `sudo` access, I encounter an issue. When I switch to the root user and run `python3.4`, I get the error "command not found." Running `whereis python` as root shows that the path to Python 2.6 is in `/usr/bin`, and running `whereis python3.4` as root returns "not found" in `/usr/bin`, which is correct since Python 3.4 is installed in `/usr/local/bin`. If I exit from the root user, I have no trouble using Python 3.4.

This seems to be a `PATH` environment variable issue. When I tried to install a module, it was installed in the old Python 2.6 `site-packages` directory instead of the Python 3.4 `site-packages` directory.

**Solution:**

To resolve this, you need to ensure that the `PATH` environment variable for the root user includes `/usr/local/bin`. You can do this by adding the following line to the root user's shell configuration file (e.g., `~/.bashrc` or `~/.profile`):

```sh
export PATH=$PATH:/usr/local/bin
```

Alternatively, you can temporarily set the `PATH` for the current session by running:

```sh
export PATH=$PATH:/usr/local/bin
```

After setting the `PATH`, verify that the root user can now find Python 3.4 by running:

```sh
which python3.4
```

If the output is `/usr/local/bin/python3.4`, then the `PATH` has been correctly updated.

Next, you can proceed with installing the module using `pip` for Python 3.4. Ensure you use the correct `pip` version by specifying `pip3.4`:

```sh
sudo pip3.4 install <module_name>
```

This should install the module in the correct `site-packages` directory for Python 3.4.

---

By following these steps, you should be able to resolve the `PATH` issue and successfully install the module for Python 3.4.