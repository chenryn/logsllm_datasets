device driver we want to test. When the test suite begins to
execute, we issue TESTON to notify DRIP of the start of the
test. When the test ﬁnishes successfully or terminates due to
an assertion failure, it also notiﬁes our system with the result
through TESTSUCC/TESTFAIL respectively. We denote it as
one Testing Cycle from the beginning of a test to the end.
We record all the transitions that are issued through call/jump
instructions from the driver to the kernel in one Testing Cycle
and we treat them as kernel API invocations.
After recording kernel API invocations from the driver to
the kernel, we need to capture the return value of each invo-
cation because it may be used by subsequent instructions. We
Fig. 1: Workﬂow of DRIP
API invocations, and cluster them according to their execution
context. The output of this phase is the Proﬁling Data and
it is organized in the structure presented in Figure 1(c). In
the testing phase, we select and remove a subset of these
kernel API invocations and test their inﬂuence on the correct
execution of the test suite. The Testing Data shares the same
structure as the Proﬁling Data. The only difference is that
we mark testing status on every entry in the Testing Data. For
example, in Figure 1(c), shaded entries in Testing Data indicate
that they have been tested. This is an iterative process, and we
feed the Intermediate Testing Data back as input to the testing
phase. The testing phase terminates when all the entries in the
Testing Data have been tested. In the last rewriting phase, we
summarize the testing result, apply the changes on the trojaned
binary, and generate a puriﬁed driver.
III. DETAILED DESIGN
In this section, we describe DRIP following the workﬂow
of the driver puriﬁcation procedure and discuss the design
of key DRIP components in detail. First, we describe the
setup of the Testing Environment. Then we demonstrate the
proﬁling, testing and rewriting phases respectively to explain
the procedure of generating a puriﬁed driver. Finally, we
present the technical details of the prototype implementation.
A. Environment Setup
Before the puriﬁcation procedure, we set up the Testing
Environment, prepare the trojaned driver and design a com-
munication channel to send test statuses from the test suite to
DRIP.
Testing Environment: As shown in Figure 1(b), the Testing
Environment consists of a guest virtual machine (VM) and its
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:27 UTC from IEEE Xplore.  Restrictions apply. 
API 1 and API 2. When returning from API 2 (dashed red path
10), the current process context is Process 1 and it can map the
return to API 2 in Process 1’s call stack and pop API 2 from
call stack. For the execution in Process 2’s context, both API 2
and API 3 in two interrupt handlers have returned (dashed blue
path 9 and 12) and popped from the call stack. There is only
API 1 in the call stack. When API 1 returns from the kernel
(dashed blue path 13), its current process context is Process
2 and then we can map the return value to API 1 and pop it
from the call stack.
Context-Sensitive Clustering: After recording all kernel
API invocations in one Testing Cycle linearly, we ﬁnd that
invocations in different process contexts may interleave with
each other due to multitasking and kernel preemption. In
Figure 3(a), we present recorded invocations of a trojaned
E1000 NIC driver. It is compromised by the module injection
technique [5] and the payload is a DR rootkit. Each entry
contains a symbol name (just used for clear demonstration,
symbols of the driver are not needed by DRIP), funcaddr and
apiaddr. Funcaddr is the function invocation’s call site address
in the driver and apiaddr is the API’s entry address in the core
kernel. Interleaved invocations make it difﬁcult to design an
efﬁcient removal strategy in the later phase because there is
no information of connections between invocations.
We design a technique called Context-Sensitive Clustering
to de-interleave kernel API invocations recorded during the
proﬁling phase. It is based on the observation that, for the
trojaned driver, each function in the driver either belongs to the
benign logic or to the malicious logic and we can group kernel
API invocations issued under the same function together.
Thus after clustering according to each function address in
the driver, interleaved kernel API invocations belonging to
benign/malicious logic are naturally separated and become
easier to process in the next phase.
In Figure 3(b), we present the result after applying Context-
Sensitive Clustering and organize the kernel API invocations
in reverse chronological order. The entries in red are function
invocations from the DR rootkit and those in blue are from
the E1000 NIC driver. We denote the group clustered as a
Context Group and present one speciﬁc example in the red
rectangle. This Context Group is headed with hook execve
entry addr:0xf81f08b0 and it contains three function invo-
cations, ptregs execve, strstr and getname. It means during
the execution of function hook execve whose entry address is
0xf81f08b0 in the driver, it invokes these three kernel APIs. We
combine the clustered kernel API invocations with the return
values to generate the Proﬁling Data and transfer to the testing
phase.
C. Testing Phase
In the testing phase, DRIP eliminates kernel API invo-
cations that do not affect the correct execution of the test
suite, which ensures the preservation of the driver’s benign
functionalities. We obtain the Proﬁling Data that contains
clustered kernel API invocations from the preceding proﬁling
phase and rename it as Testing Data. Initially, entries in the
Testing Data are not marked with any status.
When the Testing Cycle begins, we load the snapshot to
execute the test suite from a deterministic state. Upon receiving
Fig. 2: Function Return Value Mapping
record the transitions that are issued through the ret instruction
from the kernel to the driver and we treat them as kernel API
returns. The return value is stored in a general register, e.g.,
EAX under x86. Some kernel APIs are void functions or the
return values are not used any further. We check the def-use
of EAX in subsequent instructions to determine whether the
return value is used or not. If EAX is deﬁned ﬁrst, it indicates
that the return value is not used and has no effect on later
instructions. If EAX is used ﬁrst, we need to record this value
and map it to the function invocations recorded before.
Due to multitasking in the operating system, a kernel
driver’s code can be executed concurrently in different process
contexts. Most operating systems also enable the feature of
kernel reentrancy and kernel preemption, which means all
processes can be interrupted in kernel mode and resumed
from a previous checkpoint when the interrupt is handled.
These properties make it complicated to create one-to-one
mapping from the kernel API return to its invocation. Fortu-
nately, the starting address of the kernel stack for different
processes/threads is different and can be used to uniquely
identify the process context. We leverage this property to
identify the current context of the driver code being executed.
Processes may be interrupted to handle hardware interruptions
and nested interrupts are possible. It conforms to the Last
In First Out (LIFO) order in the same process context. We
maintain a call stack for every active process to record the last
function invocation and its expected return address. When a
function returns, we can ﬁnd the call stack according to the
current process context and map the return value to the last
function invocation stored in this call stack and pop it.
We give a simpliﬁed example in Figure 2. We assume
processes 1 and 2 are running simultaneously in the system
and both request the same service of the device driver (dotted
red paths 1 and 4 for process 1 and dotted blue paths 2 and
3 for process 2). For the execution of driver code in Process
1’s context, it invokes API 1 (solid red path 6) of the kernel
and is interrupted before returning from API 1. Then it calls
API 2 (solid red path 8) in the handler of interrupt 1. Before
returning from API 2, the call stack of Process 1 contains both
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:27 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 3: Context-Sensitive Clustering
TESTON, a subset of kernel API invocations that have not
been marked will be selected and removed from the memory.
As aforementioned, we cluster kernel API invocations in the
proﬁling phase into different Context Groups. Selection of
candidates for removal is based on the clustering. First we
select one Context Group that is marked as UNTESTED and
try to remove all function invocations in it. Then we change
its status to TESTING. We maintain a FuncStack to record the
current function invocation list that is being tested. Then we
enter the VM to resume executing the test suite. If it runs
to completion successfully, we mark the current kernel API
invocations as UNNEC, which means that they do not violate
the correct execution of the test suite and can be removed
before the next Testing Cycle. If the removal causes failure
of the test suite, we utilize a divide and conquer approach
to split the Context Group into two equal subsets and push
them into the FuncStack. Then we recover current invocations
being tested in memory and re-launch the next Testing Cycle.
If the current set contains only one function invocation, which
cannot be divided any further, we mark this function invocation
as CRITICAL if test fails. If all kernel API invocations in the
same Context Group have been tested, we mark this context
group as TESTED and continue to process the next one. We
will iterate this process until all kernel API invocations in the
Testing Data are marked. The detailed algorithm is presented
in the Test-and-Reduce Algorithm 1.
Recall that we list every function invocation in the Context
Group using reverse chronological order. The reason is that the
result of earlier function invocations will probably impact the
later function invocations. But removing the later invocation
ﬁrst will not impact the earlier ones. In Figure 4, we present
the function h4x unlink from KBeast, which is one of the
malicious payloads in our evaluation. h4x unlink is used to
hijack the sys unlink system call from Linux. It analyzes the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:46:27 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 Test-and-Reduce Algorithm in Testing Phase
Input:
ContextGroupListhead ⇐ FirstContextGroup
FuncStack ⇐ EmptyStack
CurrContextGroup ⇐ NULL
CurrFuncList ⇐ NULL
ENTRYFUNC ⇐ DISPATCH(signal)
else if signal = TESTSUCC then
MARKCURRFUNCLIST(UNNEC)
LOADSNAPSHOT()
1: procedure DISPATCH(signal)
2:
if signal = TESTON then
3:
PATCHTESTEDFUNCS()
4:
PATCHCURRFUNCLIST()
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
LOADSNAPSHOT()
else
else if signal = TESTFAIL then
if SIZE(CurrFuncList) = 1 then
MARKFUNCLIST(CRITICAL)
RECOVERCURRFUNCLIST()
{F uncList1, F uncList2} ⇐ SPLITLIST()
PUSHSTACK(FuncStack, {F uncList1, F uncList2})
(cid:46) Dispatch based on signal
(cid:46) Load Snapshot of VM
Fig. 4: Reverse Chronological Order
if ContextGroupIter.status = TESTED or TESTING then
REMOVEFUNC(Func)
for all Func in ContextGroupIter.funclist do
if Func.status = UNNEC then
16: procedure PATCHTESTEDFUNCS(void)
ContextGroupIter ⇐ ContextGroupListhead
17:
while ContextGroupIter (cid:54)= NULL do
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
ASSERT(CurrFuncList (cid:54)= NULL)
return
if ContextGroupIter.status = UNTESTED then
CurrContextGroup ⇐ ContextGroupIter
CurrFuncList ⇐ ContextGroupIter.funclist
ContextGroupIter.status ⇐ TESTING
return
ContextGroupIter ⇐ ContextGroupIter.next
if ContextGroupIter.status = TESTING then
(cid:46) Remove the invocation in Memory
(cid:46) Init CurrContextGroup
(cid:46) Init CurrFuncList
32: procedure PATCHCURRFUNCLIST(void)
33:
34:
for all Func in CurrFuncList do
REMOVEFUNC(Func)
(cid:46) Mark statuses in the CurrFuncList
if status = UNNEC then
for all Func in CurrFuncList do
Func.status ⇐ UNNEC
else if status = CRITICAL then
35: procedure MARKCURRFUNCLIST(status)
36:
37:
38:
39:
40:
41:
42: