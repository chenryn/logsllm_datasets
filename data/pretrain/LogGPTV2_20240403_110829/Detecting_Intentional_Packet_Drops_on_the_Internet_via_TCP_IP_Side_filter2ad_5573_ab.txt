### 3. Experimental Setup

Each experiment was designed to last less than five minutes, allowing for ten experiments to be completed within an hour. At any given time, each client and server participated in only one experiment. Each client-server pair was tested once per hour over a 24-hour period to ensure replication and to minimize the impact of diurnal patterns. The source and destination ports for all packets were carefully chosen and matched to minimize assumptions about the ports on which the client responds.

### 4. Analysis

In this section, we provide an overview of our intervention analysis based on ARMA (AutoRegressive Moving Average) modeling. For more detailed information, please refer to the extended version of the paper [5].

We model each time series \( y_1, \ldots, y_n \) as a linear regression with ARMA errors, combining an autoregressive-moving-average (ARMA) model with external linear regressors. An ARMA(p, q) model integrates an AR (autoregressive) model of order p and an MA (moving average) model of order q. We use a linear regression with ARMA errors to model our time series data. This specifies that every element in a time series can be written as a constant plus the linear combination of regressors \( x_1, \ldots, x_r \) with an ARMA-modeled error term, \( e_t \):

\[
y_t = c + \sum_{i=1}^r \beta_i x_{it} + e_t,
\]
\[
e_t = z_t + \sum_{i=1}^p \phi_i e_{t-i} + \sum_{i=1}^q \theta_i z_{t-i},
\]

where \( z_t \) is a white noise series, and \( \phi_i, \theta_i, \) and \( \beta_i \) are ARMA model parameters to be fitted. We use the regressors \( x_i \) for intervention analysis, i.e., to analyze the experimental effect on the time series at specific times.

For each experiment, we select regressors based on the times when the server (re)transmits SYN/ACKs in response to SYNs. If a server (re)transmits \( r \) SYN/ACKs in response to each SYN, we have \( r \) regressors. We define \( t_1 \) as the time of the first transmission in response to the first of our forged SYNs, and \( t_{i+1} \) as the time the server would send the \( i \)-th retransmission in response to that SYN. The regressor \( x_i \) is then defined as the indicator variable:

\[
x_{ij} =
\begin{cases}
1 & \text{if } t_i \leq j \text{ and either } j < t_{i+1} \text{ or } i = r, \\
0 & \text{otherwise.}
\end{cases}
\]

In other words, \( x_1 \) is zero until the server transmits the first SYN/ACK, then ones until the server begins retransmitting SYN/ACKs. The remaining \( x_i \) are zeros until the time the server would begin retransmitting its \( i \)-th SYN/ACK, then ones until the \( (i + 1) \)-th SYN/ACK begins being retransmitted. This definition allows us to model any possible level shifts in the case of packet drops as a linear combination of all \( x_i \). See Figure 2 for an illustration.

For intervention analysis, we use hypothesis testing over a value \( \beta_r \), which represents the difference in IPID differences between when we do or do not send forged SYN packets to the server. We determine the case by a series of one-sided hypothesis tests performed with significance \( \alpha = 0.01 \) according to the following breakdown, where \( k_1 \) and \( k_2 \) are thresholds between cases:

- **Server-to-client-dropped** if we reject the null hypothesis that \( \beta_r \geq k_1 \).
- **No-packets-dropped** if we reject the null hypotheses that \( \beta_r \leq k_1 \) and \( \beta_r \geq k_2 \).
- **Client-to-server-dropped** if we reject the null hypothesis that \( \beta_r \leq k_2 \).
- **Error** if none of the above cases can be determined.

For details about the linear regression step, removal of outliers, and how we choose the thresholds, see the extended version of the paper [5].

### 5. Results

Table 1 shows the results from 5 days of data collection, where S → C indicates Server-to-client-dropped, None indicates No-packets-dropped, C → S indicates Client-to-server-dropped, and Error indicates an undetermined case. CN is China, Asia-CN is other Asian countries, EU is Europe, and NA is North America. For server types, Tor-dir is a Tor directory authority, Tor-bri is a Tor bridge, and Web is a web server.

Our expectation was to observe Server-to-client-dropped for clients in China and Tor servers due to Winter and Lindskog's observation that SYN/ACKs are statelessly dropped by the "Great Firewall of China" (GFW) based on source IP address and port [8]. We expected to see No-packets-dropped for most web servers from clients in China, unless they host popular websites that are censored in China. Similarly, we expected No-packets-dropped for clients outside of China, regardless of server type. A few exceptions were anticipated due to censorship outside of China and the GFW's occasional ineffectiveness. Our results align with these expectations.

In 5.9% of the client/server pairs tested, multiple cases were observed in the same day. In some instances, it appears that noise caused the wrong case to be detected, but other cases may be due to route changes throughout the day [9]. The overall congruence of the data with our expectations demonstrates the efficacy of our approach. Some data points outside our expectations show patterns suggesting real effects rather than errors. For example, of the 28 data points where web servers were blocked from the server to the client in China, 20 of those data points are the same client/server pair.

38% of the collected data does not appear in Table 1 because it did not pass liveness tests. Each 5-minute data point has three associated liveness tests. If a server sends fewer than 2.5 SYN/ACKs in response to SYNs from the measurement machine, a client responds to less than \( \frac{3}{5} \) of our SYN/ACKs, or a measurement machine sending thread becomes unresponsive, that 5-minute data point is discarded.

Two out of the ten Tor directory authorities never retransmitted enough SYN/ACKs to be included in our data. Of the remaining eight, two more account for 98.8% of the data points showing blocking from client to server. These same two directory authorities also account for 72.7% of the Error cases for directory authorities tested from clients in China, and the case of packets being dropped from server to client (the expected case for China) was never observed for these two directory authorities.

When Winter and Lindskog [8] measured Tor reachability from a virtual private server in China, there were eight directory authorities at that time. One was completely accessible, and the other seven were completely blocked in the IP layer by destination IP (i.e., Client-to-server). In our results, six out of ten are at least blocked Server-to-client and two out of ten are only blocked Client-to-server (two had all results discarded). Winter and Lindskog also observed that Tor relays were accessible 1.6% of the time, and we observed that directory authorities were accessible 0.63% of the time. Our results have geographic diversity, and their results serve as a ground truth because they tested from within China. Both studies observed the special treatment of directory authorities compared to relays or bridges, as well as a small percentage of cases where filtering that should have occurred did not.

To evaluate the assumption that clients with a global IPID are easy to find in a range of IP addresses that we desire to measure from, take China as an example. On average, 10% of the IP addresses in China responded to our probes so that we could observe their IPID, and of those, 13% were global. Therefore, roughly 1% of the IP address space of China can be used as clients for measurements with our method, enabling experiments with excellent geographic and topological diversity.

### 6. Related Work

Related work directly related to idle scans [2,3,4] was discussed in Section 1. Other advanced methods for inferring remote information about networks have been proposed. Qian et al. [10] demonstrate that firewall behavior with respect to sequence numbers can be used to infer sequence numbers and perform off-path TCP/IP connection hijacking. Chen et al. [11] use the IPID field to perform advanced inferences about the amount of internal traffic generated by a server, the number of servers in a load-balanced setting, and one-way delays. Morbitzer [12] explores idle scans in IPv6.

iPlane [13] sends packets from PlanetLab nodes to carefully chosen hosts and then compounds loss on specific routes to estimate the packet loss between arbitrary endpoints without access to those endpoints. This does not detect IP-address-specific packet drops. Our technique, in contrast, can be used to detect intentional drops of packets based on IP address and requires no commonalities between the measurement machine’s routes to the server or client and the routes between the server and client. Queen [14] utilizes recursive DNS queries to measure the packet loss between a pair of DNS servers and extrapolates from this to estimate the packet loss rate between arbitrary hosts.

### 7. Conclusion

We have presented a method for detecting intentional packet drops (e.g., due to censorship) between two almost arbitrary hosts on the Internet, assuming the client has a globally incrementing IPID and the server has an open port. Our method can determine which direction packets are being dropped in and is resistant to noise due to our use of an ARMA model for intervention analysis. Our measurement results are congruent with current understandings about global Internet censorship, demonstrating the efficacy of the method.

### Acknowledgments

We would like to thank the anonymous PAM 2014 reviewers and our shepherd, Jelena Mirkovic, as well as Terran Lane, Patrick Bridges, Michalis Faloutsos, Stefan Savage, and Vern Paxson for helpful feedback on this work. This material is based upon work supported by the National Science Foundation under Grant Nos. #0844880, #1017602, #0905177, and #1314297.

### References

1. arma: Research problem: Five ways to test bridge reachability. Tor Blog (December 1, 2011), https://blog.torproject.org/blog/research-problem-five-ways-test-bridge-reachability
2. Antirez: new tcp scan method. Posted to the bugtraq mailing list (December 18, 1998)
3. Lyon, G.: Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning. Insecure.Org LLC, Sunnyvale, CA, USA (2009)
4. Ensaﬁ, R., Park, J.C., Kapur, D., Crandall, J.R.: Idle port scanning and non-interference analysis of network protocol stacks using model checking. In: Proceedings of the 19th USENIX Security Symposium, USENIX Security 2010. USENIX Association (2010)
5. Ensaﬁ, R., Knockel, J., Alexander, G., Crandall, J.R.: Detecting intentional packet drops on the Internet via TCP/IP side channels: Extended version CoRR abs/1312.5739 (2013), http://arxiv.org/abs/1312.5739
6. Alexa: Alexa top 1,000,000 sites, http://www.alexa.com/topsites
7. MaxMind: How accurate are your GeoIP databases? http://www.maxmind.com/en/faq#accurate
8. Winter, P., Lindskog, S.: How the Great Firewall of China is Blocking Tor. In: Free and Open Communications on the Internet. USENIX Association (2012)
9. Paxson, V.: End-to-end internet packet dynamics. SIGCOMM Comput. Commun. Rev. 27(4), 139–152 (1997)
10. Qian, Z., Mao, Z.M.: Off-path TCP sequence number inference attack - how firewall middleboxes reduce security. In: Proceedings of the 2012 IEEE Symposium on Security and Privacy, SP 2012, pp. 347–361. IEEE Computer Society, Washington, DC (2012)
11. Chen, W., Huang, Y., Ribeiro, B.F., Suh, K., Zhang, H., de Souza e Silva, E., Kurose, J., Towsley, D.: Exploiting the IPID field to infer network path and end-system characteristics. In: Dovrolis, C. (ed.) PAM 2005. LNCS, vol. 3431, pp. 108–120. Springer, Heidelberg (2005)
12. Morbitzer, M.: TCP Idle Scans in IPv6. Master’s thesis, Radboud University Nijmegen, The Netherlands (2013)
13. Madhyastha, H.V., Isdal, T., Piatek, M., Dixon, C., Anderson, T., Krishnamurthy, A., Venkataramani, A.: iPlane: an information plane for distributed services. In: Proceedings of the 7th Symposium on Operating Systems Design and Implementation, OSDI 2006, pp. 367–380. USENIX Association, Berkeley (2006)
14. Wang, Y.A., Huang, C., Li, J., Ross, K.W.: Queen: Estimating packet loss rate between arbitrary internet hosts. In: Moon, S.B., Teixeira, R., Uhlig, S. (eds.) PAM 2009. LNCS, vol. 5448, pp. 57–66. Springer, Heidelberg (2009)