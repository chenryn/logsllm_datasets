+3*(~(x|~z));
return c;
}
return c;
}
(a) Original program.
(b) MBA obfuscated program.
Figure 1: An example of MBA obfuscation for x+y, which is
transformed into a complex expression mixing both arithmetic
and boolean operations with a redundant variable z. A human
analyst has a hard time to understand the new, obfuscated
form.
hard-to-solve predicates, which hence become a major obsta-
cle to their approach [50, 51]. In our evaluation, we use the
state-of-the-art theorem solver, Z3 [52], to check the equiva-
lence of the original expression and its MBA obfuscated form,
but Z3 fails to return a result in ﬁve hours.
Cost. The cost of an obfuscation scheme includes two parts:
instrumentation cost and run-time overhead. Instrumentation
cost represents the time and resources for conducting the ob-
fuscation transformation; run-time overhead refers to the slow-
down and extra resource costs when the obfuscated program is
running. MBA obfuscation adds very little overhead in terms
of both types of cost. During obfuscation time, MBA transfor-
mations just rewrite the target expression with a new, complex
but still equivalent MBA expression, without introducing any
additional jump tables, function calls, or system calls. The
obfuscation process can be directly applied to source code
and easily combined with the normal compilation and linker
workﬂow. The run-time overhead incurred by MBA obfusca-
tion is also low because only simple boolean and arithmetic
operations are involved. The new variables are directly lo-
cated on the stack, so no extra cost comes from managing the
heap memory blocks.
Correctness. Correctness means that the obfuscated pro-
gram must behave exactly the same as the original program.
Initially, correctness is easily guaranteed by designing indi-
vidual obfuscation methods as a semantic-preserving trans-
formation. However, as obfuscation methods are developed
more and more complex, it becomes challenging to preserve
program semantics after obfuscation. For instance, as one of
the most sophisticated obfuscation techniques, code virtual-
ization [8, 9] transforms part of a program to the bytecode
in a new, custom virtual instruction set, and the bytecode is
emulated by an embedded virtual machine at run time. Wang
et al.’s study [53] points out that virtualization obfuscation
results in program crash or incorrect output when 30% of the
program is virtualized. Instead, MBA obfuscation is built on
a solid mathematical basis, guaranteeing the correctness of
obfuscation result. Recent work [42] has veriﬁed the correct-
ness of a set of MBA obfuscation rules by using the formal
proof system Coq [54].
2.4 Deobfuscation of MBA Expressions
On the other side of this arms race, researchers have explored
the direction of reverse engineering and simplifying MBA
expressions. Eyrolles’ PhD thesis is the ﬁrst work to go into
this subject at full length [39]. Her experiments show that
popular symbolic computation software such as Maple [55],
Wolfram Mathematica [56], SageMath [57], and Z3 [52] fail
to simplify MBA expressions because they do not support
reduction rules for mixed bitwise and arithmetic operators.
Furthermore, LLVM compiler optimizations [58] also have
very limited effect on MBA simpliﬁcation. Guinet et al. [33]
present Arybo, a tool that normalizes MBA expressions to
bit-level symbolic expressions with only ⊕ and ∧ operations.
However, the bloated size of bit-level expressions cause severe
performance penalty, so Arybo can only deal with small-size
MBA expressions. SSPAM [34] simpliﬁes MBA expressions
by a pattern matching algorithm. This method performs well
on simplifying existing MBA examples and a real-world ex-
ample [30]. As a common limitation of pattern matching
techniques, it uses limited known rules to discover and reduce
MBA expressions so it cannot handle generic MBA obfusca-
tion. Biondi [35] presents an algebraic simpliﬁcation to reduce
the MBA complexity, but the method only works for speciﬁc
MBA patterns, thus is also not generically effective. Blazytko
et al. [21] leverage program synthesis techniques [59] to sim-
plify MBA expressions by generating another simpler but
equivalent expression. Due to the non-determinism and sam-
pling mechanism of program synthesis, the correctness of
simpliﬁcation result is not always guaranteed.
The common limitation of existing deobfuscation efforts is
that they treat MBA obfuscation as a black box, rather than
investigate the mechanism under the hood. We also ﬁnd that
the lack of a standard and comprehensive MBA benchmark
creates an obstacle: without a ground-truth benchmark, it is
not clear how to compare these different methods.
3 How MBA Obfuscation Works: from One-
bit to N-bit
In this section, we demystify the detailed underlying mecha-
nism of MBA obfuscation. Zhou et al. [24] propose a system-
atic method to automatically generate MBA equations. By
checking the truth table for t 1-bit variables, their method ﬁrst
seeks an MBA identity equation that holds for the t 1-bit vari-
ables, and then it deduces that the MBA equation also holds
for any-length integer variables. In particular, for any 2t × k
Boolean matrix with linearly dependent column vectors, it
1704    30th USENIX Security Symposium
USENIX Association
generates an MBA identity for t variables and k terms. The
following example elaborates the procedure. Given a 22 × 5
Boolean matrix M (t = 2 and k = 5 ), we derive a bitwise
expression for each column. The bitwise expressions involve
two 1-bit variables, x and y. M essentially shows the truth
table enumerating all possible values of x, y, and the bitwise
expressions.
M =
0
0
1
1
x
0
1
0
1
y
0
1
1
1
0
1
0
0
0
0
1
0
x ∨ y ¬x ∧ y
x ∧ ¬y
Then we solve the linear equation system M~v = 0 and get the
solution vector ~v.
~v =
1
1
−2
1
1
Regarding ~v as the coefﬁcients, we produces an MBA identity
as follows. The equation holds because the matrix M, treated
as the truth table, exhaustively enumerates all possible values
of the expressions.
x + y − 2(x ∨ y) + (¬x ∧ y) + (x ∧ ¬y) = 0
From this identity, an MBA obfuscation rule is easily con-
structed as follows:
x + y → 2(x ∨ y) − (¬x ∧ y) − (x ∧ ¬y)
Although so far this method only guarantees that the MBA
identity holds for 1-bit variables, Zhou et al. [24] further prove
it also holds for integers of any length. For simplicity, here we
ignore the formal mathematical proof and give an imprecise
description. For n-bit integers, every bit is treated separately
when calculating the MBA expression. Because the identity
holds for every bit, the whole calculation result also holds.
Let X and Y be n-bit integers. x0, y0, x1, y1, . . . represent every
bit of the integer. The following calculation shows how the
1-bit identity is extended to an n-bit MBA expression:
X +Y − 2(X ∨Y ) + (¬X ∧Y ) + (X ∧ ¬Y ) =
20 · (x0 + y0 − 2(x0 ∨ y0) + (¬x0 ∧ y0) + (x0 ∧ ¬y0))
21 · (x1 + y1 − 2(x1 ∨ y1) + (¬x1 ∧ y1) + (x1 ∧ ¬y1))
. . .
2n−1 · (xn−1 + yn−1 − 2(xn−1 ∨ yn−1) + (¬xn−1∧
∑
This method provides a systematic approach for construct-
ing MBA equations. It is generic to cover simple cases such
as shown in Hacker’s Delight [37] and also the complex cases
in Eyrolles [39] and Tigress [41].
4 Our Finding: “N-bit to One-bit” Also Holds
In this section, we present an exciting ﬁnding: the existing
MBA obfuscation design actually implies a two-way transfor-
mation feature between 1-bit and n-bit variables. This ﬁnding
paves the way for our deobfuscation method.
The approach in Section 3 successfully extends MBA iden-
tity from 1-bit space to integer space. Interestingly, the authors
also vaguely mention that the reverse direction is also “plainly”
correct. That means, if an MBA identity exists in integer space,
then it must also hold in 1-bit space, which can be represented
by the Boolean matrix described in § 3. However, the descrip-
tion provided by the authors was too brief to fully understand
the proof procedure. It is not a trivial question because nor-
mal math reduction rules do not work by default within the
context of MBA calculation. Eyrolles [39] also admitted that
“we keep only one direction of the equivalence—this is the
only direction we were able to prove, despite the other one
being described as ‘plain’ by Zhou et al.”
We wish to highlight that the correctness of n-bit to one-
bit transformation is a matter of utmost importance: it will
shatter the foundation of MBA obfuscation. If this proposition
is proved as true, an integer MBA identity is the sufﬁcient and
necessary condition for the same form of MBA identity in
1-bit space. This implies that any integer MBA identity can be
reduced to 1-bit space for simpliﬁcation. Since 1-bit space is
signiﬁcantly smaller than integer space, the solution space for
simpliﬁcation and veriﬁcation will be exponentially reduced,
as we demonstrate later.
We prove the above proposition regarding n-bit to 1-bit
transformation is true using proof by contradiction. To the
best of our knowledge, we are the ﬁrst to verify the correctness
of this proposition. The detailed proof is shown as follows.
Deﬁnition 2. Let E =
s−1
∑
j=0
a je j be an MBA expression, where
a j are integers and e j are boolean functions f j(X1, X2, . . . , Xt )
taking t variables X1, X2, . . . , Xt as input. Each variable has n
bits. We use Xk,i to represent the ith bit of the kth input variable
in e j. Let M be the 2t × s boolean matrix representing the truth
table of e0, e1, . . . , es−1. ~v =
a0
a1
. . .
as−1
is an s dimension vector
= 20 · 0 + 21 · 0 + · · · + 2n−1 · 0
= 0
yn−1) + (xn−1 ∧ ¬yn−1))
consisting of all the coefﬁcients in E.
Theorem 1. E ≡ 0 if and only if the linear system M~v = 0.
Proof. The sufﬁciency is proved in the MBA construction
method [24], that is, if M~v = 0, then E ≡ 0. Now we prove
USENIX Association
30th USENIX Security Symposium    1705
the necessity, namely, if E ≡ 0, then M~v = 0.
If E ≡ 0, then
E = 20 · E0 + 21 · E1 + . . . + 2n−1 · En−1 ≡ 0
where Ei is the calculation of E on the ith bit of input vari-
ables:
Ei =
a j · f j(X1,i, . . . , Xt,i)
s−1
∑
j=0
We prove Ei = 0 by contradiction.
Suppose ∃k, Ek =
s−1
∑
j=0
a j f j(X1,k, . . . , Xt,k) = ¯e 6= 0. We con-
struct a group of inputs X ′
1, X ′
2, . . . , X ′
t where
X ′
1,i = X1,k
X ′
2,i = X2,k
. . .
X ′
t,i = Xt,k
i = 1, 2, . . . , n
Feed X ′
1, X ′
2, . . . , X ′
t to E, then ∀i = 1, 2, . . . , n, Ei = ¯e
E = 20 · E0 + 21 · E1 + . . . + 2n−1 · En−1
= 20 · ¯e + 21 · ¯e + . . . + 2n−1 · ¯e
= (2n − 1) ¯e
Because E ≡ 0,
(2n − 1) ¯e = 0
¯e = 0
This contradicts the supposition that ¯e 6= 0. Hence, our suppo-
sition is false, so for any input X1,i, X2,i, . . . , Xt,i,
Ei =
s−1
∑
j=0
a j · f j(X1,i, . . . , Xt,i) = 0
a0e0 + a1e1 + . . . + as−1es−1 = 0
Therefore,
M~v = 0
Essentially our proof shows that, if an n-bit MBA identity
E(X1, X2, . . . , Xt ) ≡ 0
holds, the same identity also holds in one-bit space
E(x1, x2, . . . , xt ) ≡ 0
This conclusion completes the “ two-way transformation”
feature in MBA obfuscation, which sheds a light on our new
approach to reversing MBA obfuscation.
Figure 2: The logic ﬂow of MBA-Blast simpliﬁcation. (1)
Transform the Obfuscated MBA expression from n-bit to 1-
bit space. (2) Simplify the MBA in 1-bit space. (3) Transform
the simpliﬁed MBA from 1-bit to n-bit space.
5 MBA-Blast
The “two-way” feature in current MBA obfuscation implies
that any n-bit obfuscated MBA expression can be simpliﬁed in
1-bit space. Consequently, the MBA reduction in 1-bit space
is equivalent to that in n-bit space. This idea enlightens us to
design a novel method, called MBA-Blast, to simplify n-bit
MBA expression.
5.1 Approach
Our key idea is to develop MBA simpliﬁcation rules in 1-
bit space and use them to simplify any n-bit complex MBA
expression. Figure 2 shows the logic ﬂow. Given an n-bit ob-
fuscated MBA expression En, our goal is to ﬁnd a simple and
equivalent n-bit expression E′
n as the simpliﬁed result (as indi-
cated by the dashed arrow). Theoretically, our simpliﬁcation
includes three steps as follows.
(1) Transform En in n-bit space to E1 in 1-bit space.
(2) Find a simpliﬁed MBA expression E′
1 in 1-bit space,
such that E1 − E′
1 ≡ 0.