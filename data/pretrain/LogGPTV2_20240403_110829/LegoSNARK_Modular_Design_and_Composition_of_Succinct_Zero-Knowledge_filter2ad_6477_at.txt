; (c(cid:96)(1),·) ← HomEval(cvk, (1, . . . , 1),{c(cid:96)j}si+1
(cid:0)ck, (cR, c(cid:96)(0)); (vR, oR, o(cid:96)0 )(cid:1) ; CPeq
i ) ; ti+1 ← ˜Vi+1(ri+1) ; (ci+1,oi+1)← HomEval(cid:0)ck,(1, r
si+1 ),{c(cid:96)j}j∈[0,si+1],·(cid:1)
(cid:0)ck, (cL, c(cid:96)(1)); (vL, oL, o(cid:96)(1))(cid:1)
j=0 ,·)
i|r
(cid:48)
(cid:48)(cid:48)
(cid:48)(cid:48)
(cid:48)(cid:48)
i , ..., r
i
si+1 ),{c(cid:96)j , o(cid:96)j}j∈[0,si+1]
(cid:1)
P : ri+1 ← (r
i|r
(cid:48)
22 :
23 : endfor
24 : P → V : y ; (oyj )j∈{1...m} ; o0
25 : V : {VerCommit(cvk, cyj , yj, oyj )}m
j=1 ; VerCommit(cvk, c0, t0, o0)
26 : V : (c
y) ← ComVal(ck, ˜Vy(rd)) where MLE(Vy(j) = yj) = ˜Vy
∗
∗
y, o
27 : V → P : o
∗
y
28 : P and V run CPeq
(cid:0)ck, (c
∗
y, cd); ( ˜Vy(rd), o
y, od)(cid:1)
∗
Figure 18: Thaler’s tree of multiplications over homomorphic commitment schemes. Main diﬀerences
from [ZGK+17b, Construction 3] in blue
[ZGK+17b] except for a few simpliﬁcations due to the fact that in our case the input and output of
the circuit are assumed to be already committed and these commitments are known to the veriﬁer,
and that all the input is committed (i.e., there is no public input). Basically, the idea is that prover
and veriﬁer run the TTMCom protocol until they get to the end of the last round (line 23). Then
the last lines of TTMCom, in which the prover opens the commitments to input and output and
the veriﬁer gets convinced that cd opens to ˜y(rd), are replaced with a step that does the same:
the prover uses CPpoly to prove that cd opens to ˜y(rd) with respect to the commitment cy. For the
66
SuccinctZK − TTM :
Preprocessing: generate the commitment key
(ck, cvk) ← PolyCom.Setup(1λ) for m-variate multilinear polynomials.
(ek, vk) ← CPpoly.Setup(ck)
Evaluation: on common input (cy, cz) ; P input (z, ˜y, oy)
V : CheckCom(vk, cy) ∧ CheckCom(vk, cz)
P,V : Execute TTMCom until line 23 :
Both hold rd, cd;P holds an opening od of ˜Vd(rd) = ˜y(rd)
P → V : πy ← CPpoly.Prove(ek, rd, (cy,cd), (˜y,˜y(rd)), (oy,od))
V : CPpoly.VerProof(vk, rd, c ˜Vd
, cd, πd)
Figure 19: Succinct zero-knowledge argument for TTMCom
polynomial commitments and the proof system for their evaluations we use our notation of Section
F.
Efficiency. Our CPipd is a succinct zero-knowledge argument for Rprd that uses a variant of
Thaler’s protocol for trees of multiplications [Tha13] over homomorphic commitment schemes
[ZGK+17b, Construction 4]. Here, we compute a proof of the product of the elements of a vec-
tor y ∈ Fm where m = 2µ. This is encoded as a depth−µ circuit C of size S = (m − 1) with m
inputs and 1 output element. By the regularity of the circuit, here the number of gates of each layer
is double the size of the previous one Si = 2Si−1, meaning that log Si+1 = si+1 = si + 1 where si is
the number of variables of the target polynomial at layer i. Since the polynomial used inside CPsc
is a product of three polynomials, each of its si variables will be at most degree 3. Considering that
the output layer has an only gate, then the sum for the whole circuit of the number of variables
. The SuccinctZK − TTM
construction shows that the proof consists of ( µ2−µ
2 + 3µ) CPeq proofs, µ CPprd proofs, 1 CPpoly
proofs and 5µ2−µ
commitments. The prover requires linear time in the circuit size and the veriﬁer
runs in quadratic time in the circuit depth. Its crs has length (2 · 2µ + 3)G1 + (µ + 3)G2. We refer
the reader to Table 2 for a summary.
of all target polynomials can be computed as(cid:80)µ−1
i=0 si =(cid:80)µ−1
2
i=0 i = µ2−µ
2
H Commit and Prove SNARKs from existing schemes
In this section we give details supporting our claims of Section 3.4.
Background on Quadratic Arithmetic Programs. Since several of the SNARKs considered in
this section rely on quadratic arithmetic programs [GGPR13] here we recall this notion.
Deﬁnition H.1 (QAP [GGPR13]). A Quadratic Arithmetic Program (QAP) Q = (A,B,C, t(Z))
i=0,B :=
of size m and degree d over a ﬁnite ﬁeld F is deﬁned by three sets of polynomials A := {ai(Z)}m
i=0 of degree ≤ d − 1, and a target degree-d polynomial t(Z). Given Q we
{bi(Z)}m
i=0,C := {ci(Z)}m
67
(cid:32) m(cid:88)
(cid:33)
(cid:32) m(cid:88)
(cid:33)
(cid:32) m(cid:88)
(cid:33)
deﬁne a relation RQ over pairs (x, w) ∈ Fn × Fm−n that holds iﬀ there exists a polynomial h(X)
(of degree at most d − 2) such that:
yk · ak(Z)
·
yk · bk(Z)
=
yk · ck(Z)
+ h(Z)t(Z)
(9)
k=0
k=0
k=0
where y0 = 1, yk = xk for all k = 1 to n, and yk = wk−n for k = n + 1 to m.
H.1
“Adaptive Pinocchio” [Vee17]
The Adaptive Pinocchio scheme proposed in [Vee17] yields a CP-SNARK for QAP relations RQ(x, u, ω).
First, note that [Vee17] already presents the scheme as a commit-and-prove SNARK for QAP re-
lations RQ(u1, . . . , u(cid:96), ω), and for an extractable trapdoor commitment scheme, which is the one
proposed by Groth in [Gro10]. Second, observe that the commitment key consists of two vectors
S := [1, s, s2, . . . , sd]1, S(cid:48) := [α, αs, αs2, . . . , αsd]2, for random s, α ←$ Zq, and the commitment to
j ) · (S, S(cid:48)). To see how this implies a CP-SNARK for RQ(x, u, ω), con-
uj is a pair (C, C(cid:48)) = (r, u(cid:62)
sider (cid:96) = 2 so that the ﬁrst input u1 is used for the public input x (the corresponding commitment
can be a dummy one) and the second one for the actual committed value u. Also, to ﬁt our syntax
let C be the actual commitment whereas C(cid:48) is part of the proof.
H.2 Lipmaa’s Hadamard Product Argument [Lip16]
where, for m a power of two and ω the m-th root of unity modulo q, Z(X) = (cid:81)m
The product argument proposed by Lipmaa in [Lip16] is a commit-and-prove SNARK for the
Hadamard product relation Rhad(a, b, c). In this case the commitment key ck are two vectors
2 , for random χ, γ ←$ Zq,
S := [Z(χ), (cid:96)1(χ), . . . , (cid:96)m(χ)](cid:62)
i=1(X − ωi−1)
and (cid:96)i(X) is the i-th Lagrange basis polynomial (such distribution of ck guarantees binding under
the m-PDL assumption [Lip12, Lip16]). A commitment to a is a pair (A1, A2) = (ra, a(cid:62)) · (S, S(cid:48))
(and similarly to b, c). As in the previous section, to ﬁt our CP-SNARK syntax we can think of
A1, B1, C1 as the actual commitments and let their “knowledge components” as part of the proof.
:= [γZ(χ), γ(cid:96)1(χ), . . . , γ(cid:96)m(χ)](cid:62)
1 and S(cid:48)
zk-vSQL [ZGK+17b]
H.3
The zk-vSQL protocol [ZGK+17b] is a CP-SNARK for relations R((uj)j∈[(cid:96)])27 where R is an arith-
metic circuit (that we assume to output some constant, e.g., 0, on acceptance), and for the com-
mitment scheme PolyCom introduced in [ZGK+17b] and recalled in Appendix E.28 The commit
and prove capability is immediate by the construction and security of [ZGK+17b]. In what follows
we observe that their commitments can also be seen as a variant of extended Pedersen commit-
ment. This observation is crucial to see that we can apply our lifting transformation using our
CPlink scheme to zk-vSQL. Let us recall that for an input u ∈ Zm
q (for some m = 2µ), its commit-
ment is ComPoly(ck, ˜u) where ˜u is the multilinear extension of u (cf. Section 5.1 about multilinear
extensions). In particular, such MLE is the following µ-variate multilinear polynomial:
27 Precisely, although the scheme in [ZGK+17b] is described with a single u, the same technique used in its predecessor
[ZGK+17a] trivially allows to let it work with multiple commitments.
28 Here we are considering the non-interactive version in the random oracle model obtained after applying the Fiat-
Shamir transform.
68
˜u(X1, . . . , Xµ) =
m−1(cid:88)
i=0
χi(X1, . . . , Xµ) · ui+1
string includes the monomials [(cid:81)
Since c returned by ComPoly(ck, ˜u, ρ) is deﬁned as [˜u(s1, . . . , sµ)+ρsµ+1]1 and the common reference
j∈W sj]1 for all possible subsets of indices W needed to evaluate
such a ˜u, c can also be seen as a Pedersen commitment c = (ρ, u(cid:62)) · [sµ+1, χ0(s1, . . . , sµ), . . . ,
1 = (ρ, u(cid:62))·ck, where the elements [χi(s1, . . . , sµ)]1 can be publicly computed from
χm−1(s1, . . . , sµ)](cid:62)
the existing key. Note that this commitment is binding. This can be seen via a simple reduction
to the soundness of the polynomial delegation protocol in [ZGK+17b]. The idea is that from an
adversary that opens the commitment to two diﬀerent polynomials ˜u1, ˜u2 one can sample a random
t such that with overwhelming probability y1 = ˜u1(t) (cid:54)= ˜u2(t) = y2, honestly compute a proof for
the evaluation of y1 = ˜u1(t) and then claim this is an evaluation for ˜u2(t).
H.4 Geppetto [CFH+15]
The Geppetto scheme [CFH+15] yields a cc-SNARK for QAP relations RQ(x, w) where x ∈ Zn
and w = (u, ω) with u ∈ Zn(cid:48)
for some integers n, n(cid:48). We recall that Geppetto is
a SNARK for MultiQAP relations. A polynomial MultiQAP is a tuple MQ = ((cid:96),J ,A,B,C, t(Z))
such that (A,B,C, t(Z)) is a QAP, and J = {I0, . . . , I(cid:96)−1} is a partition of [m]. Let RMQ denote
the relation corresponding to MQ. To model RQ(x, u, ω) we consider a MultiQAP where (cid:96) = 3
and where the partition J consists of I0 = [n], I1 = {n + 1, . . . , n + n(cid:48)} and I2 = {n + n(cid:48) + 1, . . . , m}
such that I0 and I1 are in the binding subset S.
q , ω ∈ Zm−n−n(cid:48)
To see how Geppetto yields a cc-SNARK for such family of relations, we consider the following
q
q
1
.
1 ∈ Gn(cid:48)+1
straightforward modiﬁcation:
ccGep.KeyGen(RQ) → (ck, ek, vk): run (EK, V K) ← Geppetto.KeyGen(RMQ); set ek = EK,
vk = V K and let ck be subset of EK consisting of [ryt(s), rccn+1(s), . . . , rccn+n(cid:48)(s)](cid:62)
ccGep.VerCommit(ck, c, u, o) → b: output 1 iﬀ (o, u(cid:62)) · ck = c.
ccGep.Prove(ek, x, u, ω) → (c, π; o):
Compute commitments:
C0 ← Geppetto.Commit(EK0, x, 0),29 C1 ← Geppetto.Commit(EK1, u, o1), C2 ← Geppetto.Commit(EK2, ω, o2)
Compute the proof π(cid:48) ← Geppetto.Prove(EK, (x, u, ω), (0, o1, o2)).
Parse C1 as (C1,1, C1,α, C1,β) ∈ G3
1.
Output c = C1,1, π = (C1,α, C1,β, C2, π(cid:48)), and o = o1.
ccΠ.VerProof(vk, x, c, π) → b: recompute C0 ← Geppetto.Commit(EK0, x, 0); reconstruct C1 ←
(c, C1,α, C1,β); check Geppetto.Verify(V Kj, Cj)j=1,2; check Geppetto.Verify(V K, C0, C1, C2, π(cid:48)).
We claim that assuming Geppetto is a commit-and-prove SNARK for MultiQAPs (according to the
commit-and-prove deﬁnition in [CFH+15]), then the scheme ccGep described above is a cc-SNARK
for QAP relations RQ(x, u, ω).
The correctness of ccGep immediately follows from the one of Geppetto, and the same holds for
knowledge soundness. Indeed, notice that the knowledge soundness satisﬁed by Geppetto provides
extractability of the commitment’s openings. The perfect zero-knowledge of ccGep follow from the
zero-knowledge of Geppetto and the perfect hiding of its commitments. Finally, we observe that by
29 Setting randomness 0 here is essentially a trick to let this commitment correspond to the public input of the
relation.
69
Def. 10 in [CFH+15] the polynomials {ck(x)}k∈I1 are linearly independent; thus for a random s, the
vector [rct(s), rccn+1(s) , . . . , rccn+n(cid:48)(s)]1 deﬁnes a Pedersen commitment key whose distribution
guarantees the binding property under the d-SDH assumption.
H.5
cc-SNARKs based on Groth’s SNARK
In this section we show that the SNARK of [Gro16] is a weak cc-SNARK, and then that it can be
modiﬁed to obtain an eﬃcient cc-SNARK (with binding commitments). Below we start by giving a
background on non-interative linear proofs, that are instrumental for presenting the scheme.
2 , π(cid:62)
Split Non-Interactive Linear Proofs of Degree 2. This notion, dubbed NILP for brevity, was
introduced by Groth [Gro16] as a reﬁnement of the linear interactive proofs deﬁned in [BCI+13]. A
NILP is a triple of algorithms (LinSetup, ProofMatrix, Test) working as follows. LinSetup takes in a
relation R (e.g., a QAP) and outputs two vectors σ1 ∈ Fµ1, σ2 ∈ Fµ2. ProofMatrix on input a relation
R and a pair (x, w) outputs two matrices (Π1, Π2) ∈ Fk1×µ1 × Fk2×µ2 so that a proof (π1, π2) is
computed as (Π1 · σ1, Π2 · σ2). Test on input a relation R and a statement x outputs a collection
of matrices T1, . . . Tη ∈ F(µ1+k1)×(µ2+k2) such that a proof (π1, π2) is accepted iﬀ (σ(cid:62)
1 ) · Ti ·
(σ(cid:62)
2 ) = 0 for all i = 1 to η. A NILP is required to satisfy completeness, statistical knowledge
soundness and zero-knowledge. Informally, completeness says that honestly computed proofs for true
statements are accepted. Knowledge soundness says that there must exist an extractor algorithm
that on input R, x and a prover strategy (Π1, Π2) outputs a witness w such that the probability
that (Π1 · σ1, Π2 · σ2) is accepted while R(x, w) = 0 is negligible (over the random choices of
LinSetup). Finally, (perfect) zero-knowledge states requires to show a simulator that with knowledge
of (σ1, σ2, R, x)) outputs proofs (π1, π2) that have the same distribution as honestly generated ones.
Groth’s zkSNARK [Gro16] is a weak cc-SNARK for QAP relations RQ(u). First, we
recall the scheme from [Gro16]: this scheme is obtained by instantiating the generic pairing-based
construction of Figure 20 with the Non-Interactive Linear Proof (NILP) in Figure 21.
1 , π(cid:62)
First, let the commitment c to u be the value [A]1 = r[δ]1 +(cid:80)m
Recall that for our claim we only consider the case of QAP relations where x is void and the
witness is w = u (i.e., the commitment is to the entire witness). This is enough to instantiate our
compiler of Section 3.5. To see why this scheme is a weak cc-SNARK for QAP relations RQ(u) we
make the following observations.
k=0 uk · [ak(τ )]1 + [α]1; this means
that ck is [δ,{ak(τ )}, α]1 where α, δ, τ are random. Second, for knowledge soundness we observe that