○
Exposed gitlab instance, not up-to-date
○
Post image, analized by exiftools
○
Support of weird & unsecure formats ❤
●
Sources
○
https://gitlab.com/gitlab-org/gitlab/-/issues/327121 
○
https://github.com/mr-r3bot/Gitlab-CVE-2021-22205 
●
Fun Fact
○
First seen as post-auth with a friend
○
“Why can’t I ﬁnd login logs???”
○
2 days later, update for a pre-auth RCE on gitlab...
32
Laravel, SQLi, SELECT INTO OUTFILE
●
Why & How
○
Laravel on windows
○
Custom code offers SQLi
○
 --secure-ﬁle-priv=""
○
SELECT * FROM osef INTO OUTFILE /var/www/html/webshell.php
●
Sources
○
https://sebhastian.com/mysql-ﬁx-secure-ﬁle-priv-error/ 
●
 Fun fact
○
“Prod” was a dev laptop kept open
33
Java stacktrace to RCE
●
Why & How
○
Fuzz path, ﬁnd Java StackTrace
○
Extract package name
○
Google “$PACKAGE_NAME”
○
Sources pushed on maven (nexus)
○
Hardcoded tomcat creds
○
Login && Deploy .war
●
Sources
○
https://fr.sonatype.com/products/nexus-repository
○
https://beanstack.io/ 
34
Viewstate encrypted with default key
●
Why & How
○
Crawl, grep, ﬁnd __VIEWSTATE
○
Bruteforce weak secret with Blacklist3r
○
ForEach gadget with ysoserial.net
○
Reverse shell with pyfuscation
●
Sources
○
https://book.hacktricks.xyz/pentesting-web/deserialization/exploiting-__viewstate-parameter
○
https://github.com/NotSoSecure/Blacklist3r/tree/master/MachineKey/AspDotNetWrapper
○
https://github.com/pwntester/ysoserial.net 
○
https://github.com/CBHue/PyFuscation 
35
SSTI Dotnet, razor template
●
Why & How
○
Crawl... Aggressively!
○
query=%22foo%22 -> 200
○
query=” -> 400
○
query=”%2B”foo”%2B” -> 200
○
B-Y-O-Payload
●
Sources
○
https://docs.microsoft.com/fr-fr/aspnet/core/mvc/views/razor 
○
https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/ 
"
36
Lotus notes hashs & QuickConsole
●
Why & How
○
Lotus notes, like, really old
○
CVE-2005-2428 -> leak all user hashs
○
hashcat + rockyou2021.txt
○
Login as Admin + QuickConsole
○
/webadmin.nsf/agReadConsoleData$UserL2?
OpenAgent&Mode=QuickConsole&Command=cmd.exe+/c+$CMD
●
Sources
○
https://www.exploit-db.com/exploits/39495 CVE-2005-2428
○
https://github.com/coldfusion39/domi-owned 
37
Spip 0-day, write cache-ﬁle into include
●
Why & How
○
Setup Spip
○
Fuzz spip (sulfateuse ❤❤❤)
○
cd logs && grep -riF sulf
○
Output reﬂected in 1337_cache.php
○
Add some quotes in there, insert code
○
Payload reﬂected in included cache ﬁle
○
Query for shell?
●
Sources
○
https://discuter.spip.net/t/mise-a-jour-critique-de-securite-spip-3-2-8-et-spip-3-1-13/150707 
38
Spip 0-day, Weak creds, custom “SSTI”
●
Why & How
○
Find Spip
○
Login to Spip - admin:admin
○
Set article title to 
○
Bump article state
○
Email(eval(Article X submitted))
○
Enjoy shell
●
Sources
○
¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯
○
TBD - php-Internalog
○
https://github.com/laluka/pty4all 
39
Magento2 SSTI, n-day
●
Why & How
○
Magento2 - Pre-auth SSTI
○
CVE-2022-24086 & CVE-2022-24087
○
🤐🤐🤐🤐🤐🤐🤐🤐🤐🤐🤐🤐🤐
○
Used 3 times
●
Sources
○
https://sansec.io/research/magento-2-cve-2022-24086 
40
Liferay unserialize
●
Why & How
○
Liferay old-ish
○
Unserialize known issues
○
2 rce, different gadgets
●
Sources
○
https://medium.com/@knownsec404team/
Liferay-portal-json-web-service-deserialization-vulnerability
-cve-2020-7961-analysis-ca9f24478274
○
https://codewhitesec.blogspot.com/2020/03/liferay-portal-json-vulns.html
○
https://www.synacktiv.com/publications
/how-to-exploit-liferay-cve-2020-7961-quick-journey-to-poc.html 
41
ALM misconﬁguration & Mbeans
●
Why & How
○
ALM/Quality Center misconﬁg
○
Exposed /qcbin/debug, enable jmx-console
○
/qcbin/jmx-console is now exposed
○
Heapdump heapdump-shell.jsp in webroot
●
Sources
○
https://github.com/laluka/jolokia-exploitation-toolkit
/blob/main/exploits/ﬁle-write-to-rce-vhost-jfr.md
○
https://eyeontesting.com/answers/how-do-i-get-to-the-almquality
-center-debug-page-where-it-tells-me-about-java-heap-use/ 
42
Adminer, rogue sql server, DUMPFILE
●
Why & How
○
/adm redirects to adminer.php
○
Default creds - adminer:adminer
○
Connect to sql 127.0.0.1:3306
○
SELECT INTO DUMPFILE “shell.php”
●
Sources
○
https://github.com/p0dalirius/CVE-2021-43008-AdminerRead 
43
Weird upload & LFI
●
Why & How
○
File upload on app, not stored in webroot :(
○
Empty ﬁlename outputs /tmp/smth/RANDOMMM.png
○
App contains LFI, classic ?style=foo.css
○
LFI(/tmp/smth/RANDOMMM.png) = webshell
●
Sources
○
https://github.com/roughiz/lﬁto_rce 
○
https://insomniasec.com/
cdn-assets/LFI_With_PHPInfo_Assistance.pdf 
44
Actuator env & Postgresql
●
Why & How
○
Exposed /actuator/env
○
env contains postgres credentials
○
Connect to postgres
○
COPY * FROM PROGRAM “id”;
●
Sources
○
https://github.com/rapid7/metasploit-framework
/blob/master/modules/exploits/multi/postgres/
postgres_copy_from_program_cmd_exec.rb 
45
SAP - Virtualjdbc
●
Why & How
○
/virtualjdbc/ is 403, forbidden
○
//virtualjdbc/ - direct unserialize rce
○
/v%69rtualjdbc/ - direct unserialize rce
●
Sources
○
https://wiki.scn.sap.com/wiki/pages
/viewpage.action?pageId=523998017 
○
http://vjdbc.sourceforge.net/ 
○
https://pyn3rd.github.io/2022/06/02/Make-JDBC-Attacks-Brilliant-Again/ 
payload
46
Tomcat CVE, Trailing Slash
●
Why & How
○
/%ff gives an error 500 with stacktrace
○
Tomcat version vulnerable to known CVE
○
readonly initialization parameter set to false
○
Try that good old’ PUT webshell.jsp/
○
It Works... O_o
●
Sources
○
https://www.infosecmatter.com/metasploit-module-library
/?mm=exploit/multi/http/tomcat_jsp_upload_bypass
○
https://developpaper.com/question/modify-the-initialization-
parameter-of-tomcat-embedded-in-springboot-readonly/ 
47
File upload, webshell in jsp|php|asp
●
Why & How
○
Weak creds OR pre-auth ﬁle upload
○
Upload a dead-simple webshell : jsp|php|asp
○
2 times with “Jquery ﬁle upload” in subdirs
○
2 times with various custom code
○
1 time with war upload to tomcat auto-deploy path
●
Sources
○
https://github.com/xl7dev/WebShell
○
https://www.webucator.com/article/
how-to-use-the-autodeploy-attribute-in-apache-tomc/
Before           ->           𝖆𝖊𝖙𝖊𝖗
48
Oracle 11g, SQLi & Custom “features”
●
Why & How
○
SQLI on login feature, password ﬁeld... AGAIN...
○
DBMS Oracle 11g on windows
○
SELECT DBMS_JAVA.RUNJAVA('oracle/aurora/util/Wrapper
cmd.exe /c ping $DOMAIN') FROM DUAL; 
●
Sources
○
http://www.davidlitchﬁeld.com/HackingAurora.pdf 
○
https://owasp.org/www-pdf-archive/ASDC12-
New_and_Improved_Hacking_Oracle_From_Web.pdf 
49
Oracle, XXE, Path traversal & feature abuse
●
Why & How
○
Click Click, browse the website, ﬁnd a SOAP xml endpoint
○
Pre-auth XXE in SOAP endpoint
○
Turn XXE into OOB SSRF read
○
Find open port http port 7401
○
Enumerate, ﬁnd a Weblogic console
○
Use bypass-url-parser to reach console.portal
●
Sources
○
SOAP XXE https://gist.github.com/staaldraad/01415b990939494879b4 
○
https://github.com/laluka/bypass-url-parser 
●
Fun fact
○
URL bypass found was already known, CVE-2020-14882 🎉🎉🎉
50
Weblogic, xmlpserver/ReportTemplateService
●
Why & How
○
Weblogic, fuzz, ﬁnd /xmlpserver/ReportTemplateService
○
Known pre-auth XXE with CVE-2019-2616
○
File Read on admin hashs
○
Crack weak hashs & login
○
RCE in JDBC URI handler
●
Sources
○
https://github.com/vah13/OracleCVE/blob/master/
Oracle%20Business%20Intelligence/XXE/CVE-2019-2616_PoC.txt 
○
https://pyn3rd.github.io/2022/06/02/Make-JDBC-Attacks-Brilliant-Again/ 
51
Exposed git, ﬁle write on authorized_keys2
●
Why & How
○
Fuzz, /.git/HEAD goes 403
○
/;//.git/HEAD goes 200, DUMP IT!!
○
Django admin creds in readme.md
○
Login as admin, “write logs to X” feature
○
[junk]\n[ssh-rsa ...]\n[junk] in authorized_keys2
○
Ssh on “your” server 🙃
●
Sources
○
https://github.com/django/django
○
http://man.he.net/man5/authorized_keys 
52
Symfony Fragment
●
Why & How
○
Fuzz, /_fragment found with various error codes
○
Default APP_SECRET used (good wordlist in the exploit)
○
OR read APP_SECRET in /_proﬁler/phpinfo (debug)
○
Send a signed and serialized Monolog object in path
○
Now, repeat 4 times...
●
Sources
○
https://www.ambionics.io/blog/symfony-secret-fragment
○
https://github.com/ambionics/symfony-exploits
○
https://twitter.com/cfreal_ 
53
Outdated vbulletin, code injection
●
Why & How
○
Crawl, grep for version numbers, ﬁnd an old vbulletin
○
Google “exploit vbulletin 5.5.3” -> CVE-2019-16759
○
Textbook php code injection...
●
Sources
○
https://www.cvedetails.com/cve/CVE-2019-16759/
○
https://github.com/jas502n/CVE-2019-16759
54
Command injection in pdf rendering ﬁlename
●
Why & How
○
Custom java code
○
Renders html to pdf with Wkhtmltopdf!!!
○
No xss, no redirect, no javascript 😭😭😭
○
Actually, nickname gives nickname.pdf
○
Register with nick;ping$IFS$DOMAIN;name
○
Command execution in ﬁlename BEFORE rendering...
●
Sources
○
https://wkhtmltopdf.org/
○
https://lmgtfy.app/?q=should+i+sanitize+user+inputs
○
https://lmgtfy.app/?q=is+it+bad+to+concatenate+strings 
55
Log4shell binance.cn  & SOC
●
Why & How
○
Wake up one day, Log4Shell is now a thing
○
Spray payloads with various custom nuclei templates
○
Pwn a SOC 1 week later
○
Pwn binance.cn in BugBounty
■
Duplicate, 10mn late
■
Do not receive 10k$
■
Sad Soup
●
Sources
○
https://github.com/kozmer/log4j-shell-poc
○
https://www.lunasec.io/docs/blog/log4j-zero-day/
○
https://bishopfox.com/blog/identify-and-exploit-log4shell 
●
Fun fact
○
Some sings are SUPER WEIRD to trigger
○
Some callbacks spawn 1 WEEK LATER
56
[CENSORED] - CVE-XXXX-XXXXX :)
●
Why & How
○
Pre-auth ﬁle write through “weird SSRF”
○
Autoload included before a call to is_dir
○
Guzzle with phar://
●
Sources
○
https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserializat
ion-Vulnerability-Jim-But-Not-As-We-Know-It.pdf
○
https://vickieli.dev/insecure%20deserialization/unserialize/ 
57
3. Takeaways
58
Let’s apply Pareto’s rule:
20% effort == 80% efficiency
1.
Do not mix routing & ﬁlesystem
2.
Avoid to the maximum PHP & JAVA
3.
Keep your software up-to-date
4.
Be super careful with
a.
Serialization (Unserialize for the win <3)
b.
PDF rendering (browser exploit, ﬁle read, XSS, SSRF)
c.
File-Write & Upload features (WebShell, ssh keys)
d.
String Concatenations (SSRF/CMD/SQLi)
e.
Stacktraces (Not a joke, it’s often the ﬁrst sin)
59
Then, what would be a safe prod?
1.
Golang or Rust backend (API only), compiled into a single stripped binary
2.
A react frontend that mitigates most of the XSS
3.
An ORM used in the backend for every database request
4.
Increase segmentation, one service by minimalistic container
5.
A strong Web Application Firewall (Cloudﬂare, Sqreen, Imperva)
6.
A strong Software Update Policy (bump everything twice a month)
7.
Frequent security audits, and security trainings for the developers
60
@TheLaluka
thinkloveshare.com
1001 ways to PWN prod
A tale of 60 RCE in 60 minutes
61