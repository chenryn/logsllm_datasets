65, 88, 95, 104] is that we offer succinct proofs for everything while
only relying on a single, untrusted log server. In contrast, previous
work either has large proofs [59, 65], requires users to “collectively”
verify the log [88, 104] (which assumes enough honest users and
can make detection slow), or makes some kind of trust assumption
about one or more actors [8, 55, 59, 95]. On the other hand, previ-
ous work only relies on collision-resistant hash functions, digital
signatures and verifiable random functions (VRFs) [71]. This makes
previous work much cheaper computationally, but since bandwidth
is more expensive than computation, we believe this is not necessar-
ily the right trade-off. In contrast, our bilinear construction requires
trusted setup, large public parameters, and non-standard assump-
tions. Unlike previous work, our construction is not yet practical
due to high append times and memory usage (see Sections 6.1.1
and 6.1.4). Finally, previous work [8, 55, 95, 104] addresses in more
depth the subtleties of log-based PKIs, while our work is focused
on improving the transparency log primitive itself by providing
succinct proofs with no trust assumptions.
CT and ECT. Early work proposes the use of Merkle trees for
public-key distribution but does not tackle the append-only prob-
lem, only offering succinct lookup proofs [23, 56, 75]. Accumulators
are dismissed in [23] due to trusted setup requirements. Certifi-
cate Transparency (CT) [59] provides succinct append-only proofs
via history trees (HTs). Unfortunately, CT does not offer succinct
lookup proofs, relying on users to download each update to the
log to discover fake PKs, which can be bandwidth-intensive (see
Section 6.2.1). Alternatively, users can look up their PKs via one
or more CT monitors, who download and index the entire log. But
this introduces a trust assumption that a user can reach at least
one honest CT monitor. Enhanced Certificate Transparency (ECT)
addresses CT’s shortcomings by combining a lexicographic tree
with a chronologic tree, with collective verification by users (as
discussed before). Alternatively, ECT can also rely on one or more
“public auditors” to verify correspondence of the two trees, but this
introduces a trust assumption.
A(RP)KI and PoliCert. Accountable Key Infrastructure (AKI) [55]
introduces a checks-and-balances approach where log servers man-
age a lexicographic tree of certificates and so-called “validators”
ensure log servers update their trees in an append-only fashion.
Unfortunately, AKI must “assume a set of entities that do not collude:
CAs, public log servers, and validators” [55]. At the same time, an ad-
vantage of AKI is that validators serve as nodes in a gossip protocol,
which helps detect forks. ARPKI [8] and PoliCert [95] extend AKI by
providing security against attackers controlling n−1 out of n actors.
Unfortunately, this means ARPKI and PoliCert rely on an anytrust
assumption to keep their logs append-only. On the other hand, AKI,
ARPKI and PoliCert carefully consider many of the intricacies of
PKIs in their design (e.g., certificate policies, browser policies, de-
ployment incentives, interoperability). In addition, ARPKI formally
verifies their design.
CONIKS and DTKI. CONIKS [65] uses a hash chain to periodi-
cally publish a digest of a lexicographic tree. However, users must
collectively verify the tree remains append-only. Specifically, in
every published digest, each user checks that their own public key
has not been removed or maliciously changed. Unfortunately, this
process can be bandwidth-intensive (see Section 6.2.1). DTKI [104]
observes that relying on a multiplicity of logs (as in CT) creates
overhead for domain owners who must check for impersonation
in every log. DTKI introduces a mapping log that associates sets of
domains to their own exclusive transparency log. Unfortunately,
like ECT, DTKI also relies on users to collectively verify its many
logs. To summarize, while previous work [8, 55, 95, 104] addresses
many facets of the transparent PKI problem, it does not address
the problem of building a transparency log with succinct proofs
without trust assumptions and without collective verification.
Byzantine Fault Tolerance (BFT). If one is willing to move away
from the single untrusted server model, then a transparency log
could be implemented using BFT protocols [25, 57, 72]. In fact,
BFT can trivially keep logs append-only and provide lookup proofs
via sorted Merkle trees. With permissioned BFT [25], one must
trust that 2/3 of BFT servers are honest. While we are not aware
of permissioned implementations, they are worth exploring. For
example, in the key transparency setting, it is conceivable that CAs
might act as BFT servers. With permissionless BFT [72, 102], one
needs a cryptocurrency secured by proof-of-work or proof-of-stake.
Examples of this are Namecoin [73], Blockstack [4] and EthIKS [18].
Formalizations. Previous work formalizes Certificate Transparency
(CT) [27, 34] and general transparency logs [27]. In contrast, our
work formalizes append-only authenticated dictionaries (AAD) and
sets (AAS), which can be used as transparency logs. Our AAD
abstraction is more expressive than the dynamic list commitment
(DLC) abstraction introduced in [27]. Specifically, DLCs are append-
only lists with non-membership by insertion time, while AADs
are append-only dictionaries with non-membership by arbitrary
keys. Furthermore, AADs can be easily extended to support non-
membership by insertion time. Finally, previous work carefully
formalizes proofs of misbehavior for transparency logs [27, 34]. Al-
though misbehavior in AADs is provable too, we do not formalize
this in the paper. Neither our work nor previous work adequately
models the network connectivity assumptions needed to detect
forks in a gossip protocol. Lastly, previous work improves or ex-
tends transparency logging in various ways but does not tackle the
append-only problem [31, 37, 83].
2 PRELIMINARIES
Notation. Let λ denote our security parameter. Let H denote a
collision-resistant hash function (CRHF) with 2λ-bits output. We
use multiplicative notation for all algebraic groups in this paper.
Let Fp denote the finite field “in the exponent” associated with a
group G of prime order p. Let poly(·) denote any function upper-
bounded by some univariate polynomial. Let log x be shorthand for
log2 x. Let [n] = {1, 2, . . . , n} and [i, j] = {i, i + 1, . . . , j − 1, j}. Let
PPq (s) = ⟨дs , дs2
, . . . , дsq⟩ denote q-SDH public parameters. and
PPq (s, τ ) = ⟨дs , дs2
, . . . , дτ sq⟩ denote q-PKE
public parameters (see Appendix A). Let ε denote the empty string.
Cryptographic assumptions. Our work relies on the use of pair-
ings or bilinear maps [51, 67]. Recall that a bilinear map e (·,·) has
useful algebraic properties: e (дa, дb ) = e (дa, д)b = e (д, дb )a =
e (д, д)ab. To simplify exposition, throughout the paper we assume
, дτ s , дτ s2
, . . . , дsq
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1301symmetric (Type I) pairings (although our implementation in Sec-
tion 6 uses asymmetric pairings). Our assumptions can be re-stated
in the setting of (the more efficient) asymmetric (Type II and III) pair-
ings in a straightforward manner. Our AAS and AAD constructions
from Sections 3 and 5 are provably secure under the q-SBDH [46]
and q-PKE assumptions [47], which we define in Appendix A.
The q-PKE assumption is non-standard and often referred to as
“non-falsifiable” in the literature. This terminology can be confusing,
since previous, so-called “non-falsifiable” assumptions have been
falsified [9]. Naor explored the nuance of these types of assumptions
and proposed thinking of them as “not efficiently falsifiable” [74].
For example, to falsify q-PKE one must find an adversary and math-
ematically prove that all extractors fail for it.
2.1 Bilinear Accumulators
A bilinear accumulator [33, 76] is a cryptographic commitment to a
set T = {e1, e2, . . . , en}, referred to as the accumulated set.
Committing to a set. Let CT (x ) = (x − e1)(x − e2) · · · (x − en )
denote the characteristic polynomial of T and s denote a trapdoor
that nobody knows. The accumulator acc(T ) of T is computed as
acc(T ) = дCT (s ) = д(s−e1)(s−e2)···(s−en ). The trapdoor s is gen-
erated during a trusted setup phase after which nobody knows s.
Specifically, given an upper-bound q on the set size, this phase re-
turns q-SDH public parameters PPq (s) = ⟨дs , дs2
, . . . , дsq⟩. This
can be done via MPC protocols [20, 21, 54] as detailed in Section 7.
Given coefficients c0, c1, . . . , cn of CT (·) where n ≤ q, the accumu-
lator is computed without knowing s as follows:
acc(T ) = дc0 (дs )c1 (дs2
)c2 · · · (дs n
)cn = дc0+c1s +c2s2···cns n
= д
CT (s )
In other words, the server computes a polynomial commitment [53,
76] to the characteristic polynomial ofT . Since the accumulator only
supports elements from Fp, we assume a function HF : D → Fp
that maps elements to be accumulated from any domain D to values
in Fp. If |D| > |Fp|, then HF can be a CRHF.
Membership proofs. A prover who has T can convince a veri-
fier who has acc(T ) that an element ei is in the set T . The prover
simply convinces the verifier that (x − ei ) | CT (x ) by presenting
a commitment π = дq (s ) to a quotient polynomial q(·) such that
CT (x ) = (x − ei )q(x ). Using a bilinear map, the verifier checks the
property above holds at x = s, which is secure under q-SDH [53]:
e (д, acc(T ))
?= e (π , дs /дei ) ⇔ e (д, д)
CT (s ) ?= e (д, д)q (s )(s−ei )
Subset and disjointness proofs. To prove that A ⊆ B, the prover
shows that CA (x ) | CB (x ). Specifically, the prover presents a com-
mitment π = дq (s ) of a quotient polynomial q(·) such that CB (x ) =
q(x )CA (x ). The verifier checks that e (д, acc(B)) = e (π , acc(A)).
To prove that A∩ B = ∅, the prover uses the Extended Euclidean
Algorithm (EEA) [98] to compute Bézout coefficients y(·) and z(·)
such that y(x )CA (x ) + z(x )CB (x ) = 1. The proof consists of com-
mitments to the Bézout coefficients γ = дy (s ) and ζ = дz (s ). The
verifier checks that e (γ , acc(A))e (ζ , acc(B)) = e (д, д). By setting
B = {e}, we get another type of non-membership proof for e (cid:60) A.
Figure 1: Our model: a single malicious server manages a set
and many clients query the set. Clients will not necessarily
have the digest of the latest set. The clients can (1) append a
new element to the set, (2) query for an element and (3) ask
for an updated digest of the set.
Fast Fourier Transform (FFT). We use FFT [99] to speed up
polynomial multiplication and division. For polynomials of degree-
bound n, we divide and multiply them in O (n log n) field opera-
tions [85]. We interpolate a polynomial from its n roots in O (n log2 n)
field operations [100]. We compute Bézout coefficients for two poly-
nomials of degree-bound n using the Extended Euclidean Algorithm
(EEA) in O (n log2 n) field operations [98].
3 APPEND-ONLY AUTHENTICATED SETS
We begin by introducing a new primitive called an append-only
authenticated set (AAS). An AAS can be used for Revocation Trans-
parency (RT) as proposed by Google [58]. In Section 5, we modify
our AAS into an append-only authenticated dictionary (AAD), which
can be used for generalized transparency [36].
Overview. An AAS is a set of elements managed by an untrusted
server and queried by clients. The server is the sole author of the
AAS: it can append elements on its own and/or accept elements
from clients. Clients can check membership of elements in the set
(see Steps 3-5 in Figure 1). Clients, also known as users, are mutually-
distrusting, potentially malicious, and do not have identities (i.e., no
authorization or authentication). Initially, the set starts out empty
at version zero, with new appends increasing its size and version
by one. Importantly, once an element has been appended to the set,
it remains there forever: an adversary cannot remove nor change
the element. After each append, the server signs and publishes a
new, small-sized digest of the updated set (e.g., Step 2).
Clients periodically update their view of the set by requesting a
new digest from the server (e.g., Step 6 and 7). The new digest could
be for an arbitrary version j > i, where i is the previous version of
the set (not just for j = i + 1). Importantly, clients always ensure
the set remains append-only by verifying an append-only proof πi, j
between the old and new digest (e.g., Step 8). This way, clients can
be certain the malicious server has not removed any elements from
the set. Clients will not necessarily have the latest digest of the
set. Finally, clients securely check if an element k is in the set via a
(non)membership proof (e.g., Steps 3-5 in Figure 1).
A malicious server can fork clients’ views [60], preventing them
from seeing each other’s appends. To deal with this, clients maintain
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1302a fork consistent view [60, 61] of the set by checking append-only
proofs. As a consequence, if the server ever withholds an append
from one client, that client’s digest will forever diverge from other
clients’ digests. To detect such forks, clients can gossip [28, 32, 94, 96]
with one another about their digests. This is crucial for security in
transparency logs.
This model is the same as in history trees (HTs) [29], assuming
only a gossip channel and no trusted third parties. It also arises in
encrypted web applications [39, 52, 84], Certificate Transparency
(CT) [59] and software transparency schemes [38, 78]. Unlike the
2- and 3-party models [6, 82, 86], there is no trusted source that
signs appends in this model. A trusted source trivially solves the
AAS/AAD problem as it can simply vouch for the data structure’s
append-only property with a digital signature. Unfortunately, this
kind of solution is useless for transparency logs [59, 65, 88], which
lack trusted parties.
Server-side API. The untrusted server implements:
Setup(1λ, β ) → pp, V K. Randomized algorithm that returns public
parameters pp used by the server and a verification key V K used
by clients. Here, λ is a security parameter and β is an upper-
bound on the number of elements n in the set (i.e., n ≤ β).
Append(pp,Si , di , k ) → Si +1, di +1. Deterministic algorithm that
appends a new element k to the version i set, creating a new
version i +1 set. Succeeds only if the set is not full (i.e., i +1 ≤ β).
Returns the new authenticated set Si +1 and its digest di +1.
ProveMemb(pp,Si , k ) → b, π. Deterministic algorithm that proves
(non)membership for element k. When k is in the set, generates
a membership proof π and sets b = 1. Otherwise, generates a
non-membership proof π and sets b = 0.
ProveAppendOnly(pp,Si ,Sj ) → πi, j. Deterministic algorithm that
proves Si ⊆ Sj. In other words, generates an append-only proof
πi, j that all elements in Si are also present in Sj. Importantly,
a malicious server who removed elements from Sj that were
present in Si cannot construct a valid append-only proof.