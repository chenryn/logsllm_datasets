    #define POISON_END           0xa5    /* end-byte of poisoning */
参考：
###  FORTIFY_SOURCE
检查内存拷贝类函数的目的缓冲区是否存在溢出。检测的函数包括：`memcpy`, `mempcpy`, `memmove`, `memset`,
`strcpy`,`stpcpy`, `strncpy`, `strcat`,
`strncat`,`sprintf`,`vsprintf`,`snprintf`,`vsnprintf`,`gets`。
参考：
###  UBSAN_BOUNDS
这是一个ubsan的配置选项，用于执行数组指针越界的检查。选项开启之后能够检测出在编译期间已知数组长度的越界访问漏洞，但这个选项也有较大的局限性，它不能保护因为内存拷贝类函数造成的数组溢出。这个缺点可以用`FORTIFY_SOURCE`来解决。
参考：
###  SLAB_FREELIST_HARDENED
加固slab
freelist的元数据的防御，许多内核堆的攻击都尝试针对slab的缓存元数据和其他基础结构，这个选项能以较小的代价加固内核slab分配器，使得通用的freelist利用方法更加难以使用。具体的做法是修改了保存在每个释放的空间的数据,
也就是freelist那个链表不再是直接取数据就能用的, 需要进行逆运算才能得到下一个空间的地址，运算过程在freelist_ptr函数中。
参考：  
###  PAGE_POISONING
和`PAX_MEMORY_SANITIZE`类似的功能，在释放的页上做内存数据擦除工作。在`free_pages()`之后填入特殊的数据，在分配页之前会验证这个数据，以达到防御`use
after free`的效果，而填充的数据能减少信息泄露。这个选项对内核的执行效率会有一定的影响。
参考：
###  PAX_MEMORY_SANITIZE
这个是一个用于将已被释放的内存，进行全面的擦除的特性。实现思路很简单但效果很好，能够有效防御`use after
free`的攻击和减少部分信息泄露问题。整个擦除的过程是放在`slab`对象释放时进行，通过检测一开始设置好的`SLAB_`的标志位来确定是否对内存执行擦除。
参考：
###  init_on_free/init_on_alloc
这两个选项的目标是阻止信息泄露和依赖于未初始化值的控制流漏洞。开启两个选项之一能保证页分配器返回的内存和SL[A|U]B是会被初始化为0。SLOB分配器现在不支持这两个选项，因为它的kmem仿真缓存让`SLAB_TYPESAFE_BY_RCU`缓存的处理变得复杂。开启`init_on_free`也能保证页和堆对象在它们释放之后能立即初始化，因此无法使用悬挂指针访问原始数据。
参考：
###  X86: X86_INTEL_UMIP
用于intel的用户模式指令防护（User Mode Instruction
Prevention，UMIP），UMIP是一个intel新CPU推出的安全特性。如果开启，在用户模式下执行了`SGDT`，`SLDT`，`SIDT`，`SMSW`，`STR`指令就会出现报错，这些指令会泄露硬件状态信息。这些指令很少会有程序使用，大多只会出现在软件仿真上。
参考：
###  kptr_restrict
内核提供的控制变量`/proc/sys/kernel/kptr_restrict`可以用来控制内核的一些信息输出。默认情况值为0，root和普通用户都能读取内核地址，值为1时只有root用户有权限获取，值为2时所有用户都没有权限获得。
参考：
###  GRKERNSEC_HIDESYM
隐藏内核符号的配置选项，如果开启选项，获取加载模块的信息和通过系统调用显示所有内核符号的操作都会被`CAP_SYS_MODULE`限制。而为了兼容性，`/proc/kallsyms`能限制root用户。
参考：
###  SECURITY_DMESG_RESTRICT
用来限制未授权访问内核syslog，内核syslog包含着对漏洞利用非常有效的调试信息，例如：内核堆地址。这个方案比清除数百上千的调试信息更好，而且不会破坏这些重要的调试信息。开启选项之后只有`CAP_SYS_ADMIN`能够读取内核syslog。类似的还有`GRKERNSEC_DMESG`。
参考：
###  INIT_STACK_ALL_ZERO
这个选项开启之后会把新分配的栈上的所有数据都初始化为0，这样就消除了所有的未初始化栈变量的漏洞利用以及信息泄露。初始化为0能让字符串，指针，索引等更安全。
参考：
###  STRUCTLEAK_BYREF_ALL
和`PAX_MEMORY_STRUCTLEAK`类似，只初始化那些在栈上被传输引用的变量，而剩下的没被传输出去的变量不做初始化操作。
参考：
###  PAX_MEMORY_STRUCTLEAK
开启选项后，内核会对之后要复制到用户态的局部变量初始化为0，这样做同样是防止未初始化的变量泄露信息。它的代价相比`PAX_MEMORY_STACKLEAK`更小，而覆盖的范围也相对更小。
参考：
###  bpf_jit_harden
开启选项之后能加固BPF JIT编译器，能够支持eBPF
JIT后端。启用后会牺牲部分性能，但能减少JIT喷射攻击。一共有三个选项，0表示关闭，1表示针对非特权用户会做加固，2表示针对所有用户都会做加固。这个加固的实现方法是把JIT生成的立即数全部做拆分，生成一个随机数与原来的立即数做异或得到一个值，随后在使用之前再通过异或来还原原始立即数。这样攻击者想利用的立即数就会拆解，导致JIT喷射失败。
    mov    $0xa8909090,%eax
    =>
    mov    $0xe1192563,%r10d
    xor    $0x4989b5f3,%r10d
    mov    %r10d,%eax
参考：  
###  GRKERNSEC_JIT_HARDEN
如果开启选项，则将对内核的BPF
JIT引擎生成的代码做加固，用来防止JIT喷射攻击。JIT喷射会将对攻击者有用的指令放入JIT生成的32位立即数字段中，通过跳转进生成指令的中间部分来执行攻击者构造的指令序列。而这个选项可以把JIT产生的32位立即数做拆分以此来防御攻击。
参考：
###  MODULE_SIG*
一个检查模块签名的选项，内核提供了`SHA1`，`SHA224`，`SHA256`，`SHA384`，`SHA512`五种hash算法。需要注意的是在签名完成之后不要做去除符号表等修改操作。
参考：
###  SECURITY_LOADPIN
LoadPin是一个用来确保所有内核加载的文件都是没有被篡改的Linux安全模块，整体的实现方法是利用新的内核文件加载机制去中断所有尝试加载进内核的文件，包括加载内核模块，读取固件，加载镜像等等，然后会把需要加载的文件与启动之后第一次加载使用的文件作比较，如果没有匹配，那么这次的加载操作会被阻止。
参考：
###  LDISC_AUTOLOAD is not set
这个是一个控制自动加载TTY行规程的选项，在历史上当有用户要使用`TIOCSETD
ioctl`或者其他方法加载内核模块时，内核总是会自动加载内核模块中的任何行规程。如果你之后不会使用一些古老的行规程，最好是把自动加载选项关闭或者设置`CAP_SYS_MODULE`权限来限制一般用户。在系统运行时还可以设置`dev.tty.ldisc_autoload`的值来改变选项。
参考：
###  GRKERNSEC_MODHARDEN
这是一个加固模块自动加载的选项，开启之后会限制非特权用户使用模块自动加载功能，主要目的是保护内核不要自动加载一些容易受攻击的模块。
参考：
###  DEBUG_WX
在启动的时候对`W+X`执行权限的映射区域产生警告，这个选项的开启能够有效的发现内核在应用`NX`之后遗留的`W+X`映射区域，而这些映射都是高风险的利用区域。需要注意的是这个选项只会在内核启动时检查一次，不会在启动之后再次检查。
参考：
###  ARM: RODATA_FULL_DEFAULT_ENABLED
这是ARM版Linux内核中的一个选项，开启之后会把只读的属性应用到虚拟内存的其他线性别名上，这样可以防止代码段或一些只读数据通过其他的内存映射页被修改。这个额外的加固能够在运行时传输`rodata=off`关闭选项。如果想要在选项开启时对只读区域做修改，可以临时设置一个新的可写内存映射，做出修改之后再取消映射完成更新。
参考：
###  STRICT_{KERNEL,MODULE}_RWX
一共两个选项，一个是`STRICT_KERNEL_RWX`，开启选项之后，内核的`text`段和`rodata`段内存将会变成只读，并且非代码段的内存将会变成不可执行。这个保护防御了堆栈执行和代码段被修改的攻击。另外一个`STRICT_MODULE_RWX`，主要目的是设置加载的内核模块数据段不可执行和代码段只读，基本情况和`STRICT_KERNEL_RWX`一样。
参考：  
###  PAX_KERNEXEC
`PAX_KERNEXEC` 是 PaX 针对内核的 No-execute 实现，可以说是内核空间版的 pageexec/mprotect。由于
PAGEEXEC 的实现已经完成了一部分工作（实际上内核的内存访问同样也是透过 page-fault
去处理），`KERNEXEC`选项的代码实现主要包括这几方面：
  * 对内核空间的内存属性进行设置（RO & NX）
  * 内核态的内存访问的控制
  * 可加载内核模块（W^X）和 bios/efi 内存属性的控制
  * 透过 gcc-plugin 的配合实现
参考：
###  STACKPROTECTOR
检查栈缓冲区溢出的保护，这个选项开启之后会产生大家都很熟悉的`canary`，在函数开头部分一个值会被放进栈的返回地址之前。当发成栈溢出覆盖到`canary`，在函数返回时会检查先前放入的值，如果与前面生成的值不匹配则会终止程序。`canary`产生的条件是栈空间大于等于8字节，需要gcc
4.2版本以上。
参考：
###  ARM: SHADOW_CALL_STACK
这个选项会开启Clang的影子调用栈，它会用一个影子栈来保存函数的返回地址，这样即使攻击者修改了返回地址也无法劫持控制流，但它只能用在Clang作为编译语言的情况下。然而当攻击者知道影子栈的位置，并拥有写入的权限，那么这个防护将会失效。
参考：
###  Control Flow Integrity
为了缓解各种控制流劫持攻击而提出的一种防御手段，在最原始的设计中是通过分析程序的控制流图，获取间接转移指令（包括间接跳转、间接调用、和函数返回指令）目标的白名单，并在运行过程中，核对间接转移指令的目标是否在白名单中。但这种检查针对系统中的每一个跳转和调用就会造成极大的系统开销，而粗粒度的检查又会导致安全性的下降。所以现在的安全研究员在探索新的CFI技术，使其在可接受的开销下能获得高安全性。
####  ARM: ARM64_PTR_AUTH + ARM64_BTI_KERNEL