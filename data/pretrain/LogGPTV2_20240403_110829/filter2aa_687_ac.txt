# 样本 Bug 分析与 BSD 内核安全性评估

## 样本 Bug 2
- **问题描述**：由文件系统数据引发的 `panic()`。
- **操作系统**：FreeBSD 11。
- **存在时间**：自 FreeBSD 8.1（2010年1月14日）以来一直存在。
- **涉及代码**：Ext2 文件系统代码。

### 网络相关问题
- **Wi-Fi 攻击面入口点**：
  - 栈本身。
  - 802.11 网络数据解析。
  - 信息泄露。
  - Wi-Fi 驱动程序。
  - 设备发送给主机的数据。

### 802.11 协议栈
- **特点**：
  - 所有 Wi-Fi 驱动程序共享一个 802.11 协议栈。
  - 维护更加容易，发现 bug 时只需修复一处。
  - `ieee80211_input()` 是主要的输入解析函数，被所有 Wi-Fi 驱动程序调用。

#### 示例代码
```c
void ieee80211_eapol_key_input(struct ieee80211com *ic, struct mbuf *m, struct ieee80211_node *ni) {
    struct ifnet *ifp = &ic->ic_if;
    struct ether_header *eh;
    struct ieee80211_eapol_key *key;

    eh = (struct ether_header *)mtod(m, caddr_t);
    
    if (m->m_len < sizeof(*key)) {
        goto done;
    }

    key = (struct ieee80211_eapol_key *)mtod(m, caddr_t);

    // 检查 key 数据长度
    int totlen = sizeof(*key) + BE_READ_2(key->paylen);
    if (m->m_pkthdr.len < totlen) {
        goto done;
    }

    // 确保 key 数据字段是连续的
    if (m->m_len < totlen) {
        goto done;
    }

    // 处理四次握手消息
    ieee80211_recv_4way_msg3(ic, key, ni);

done:
    return;
}
```

### 802.11 协议栈示例 Bug
- **问题**：mbuf 处理不当，导致崩溃。
- **原因**：无法保证拉取足够的 mbuf 数据。
- **操作系统**：OpenBSD 6.1。
- **存在时间**：近9年。
- **涉及代码**：EAPOL 帧解析。

### 802.11 驱动程序
- **类型**：PCI 或 USB。
- **信任问题**：假设 PCI 卡可能导致完全的系统妥协（因为它们可以进行 DMA）。但实际上，有了 IOMMU 后这种情况不再成立。
- **USB**：基于包的协议。主机 USB 解析器应能够安全地解析数据。目前 BSD 的 Wi-Fi 驱动程序尚未做到这一点，导致了简单的堆溢出。

#### 示例代码
```c
void run_rx_frame(struct run_softc *sc, uint8_t *buf, int dmalen) {
    struct rt2860_rxwi *rxwi = (struct rt2860_rxwi *)buf;
    uint16_t len = letoh16(rxwi->len) & 0x7FF; // 最多 2047 字节

    MGETHDR(m, M_DONTWAIT, MT_DATA);
    if (m == NULL) {
        ifp->if_ierrors++;
        return;
    }

    if (len > MHLEN) {
        MCLGET(m, M_DONTWAIT);
        if ((m->m_flags & M_EXT) == 0) {
            ifp->if_ierrors++;
            m_freem(m);
            return;
        }
    }

    memcpy(mtod(m, caddr_t), wh, len);
    m->m_pkthdr.len = m->m_len = len;
}

void atu_rxeof(struct usbd_xfer *xfer, void *priv, usbd_status status) {
    struct atu_rx_hdr *h = (struct atu_rx_hdr *)c->atu_buf;
    int len = UGETW(h->length) - 4; // XXX 魔法数字

    struct mbuf *m = c->atu_mbuf;
    memcpy(mtod(m, char *), c->atu_buf + ATU_RX_HDRLEN, len); // 需要在复制前验证 len

    usbd_setup_xfer(c->atu_xfer, sc->atu_ep[ATU_ENDPT_RX], c, c->atu_buf, ATU_RX_BUFSZ, USBD_SHORT_XFER_OK | USBD_NO_COPY, USBD_NO_TIMEOUT, atu_rxeof);
    usbd_transfer(c->atu_xfer);
}

void otus_sub_rxeof(struct otus_softc *sc, uint8_t *buf, int len) {
    uint8_t *plcp = buf;
    int mlen = len - AR_PLCP_HDR_LEN - sizeof(*tail);
    mlen -= IEEE80211_CRC_LEN; // 剥离 802.11 FCS

    struct ieee80211_frame *wh = (struct ieee80211_frame *)(plcp + AR_PLCP_HDR_LEN);

    MGETHDR(m, M_DONTWAIT, MT_DATA);
    if (m == NULL) {
        ifp->if_ierrors++;
        return;
    }

    if (align + mlen > MHLEN) {
        MCLGET(m, M_DONTWAIT);
        if ((m->m_flags & M_EXT) == 0) {
            ifp->if_ierrors++;
            m_freem(m);
            return;
        }
    }

    m->m_data += align;
    memcpy(mtod(m, caddr_t), wh, mlen); // mlen 可能为 8k，可能导致内存损坏
}

void rsu_event_survey(struct rsu_softc *sc, uint8_t *buf, int len) {
    struct ndis_wlan_bssid_ex *bss = (struct ndis_wlan_bssid_ex *)buf;

    if (len < sizeof(*bss) + bss->ieslen) {
        return;
    }

    int pktlen = sizeof(*wh) + letoh32(bss->ieslen);
    if (pktlen > MCLBYTES) {
        return;
    }

    MGETHDR(m, M_DONTWAIT, MT_DATA);
    if (m == NULL) {
        return;
    }

    if (pktlen > MHLEN) {
        MCLGET(m, M_DONTWAIT);
        if ((m->m_flags & M_EXT) == 0) {
            m_free(m);
            return;
        }
    }

    struct ieee80211_frame *wh = mtod(m, struct ieee80211_frame *);
    memcpy(&wh[1], (uint8_t *)&bss[1], letoh32(bss->ieslen)); // 内存损坏
}
```

### 802.11 驱动程序示例 Bug
- **问题**：广泛的攻击面。
- **受影响设备**：
  - Atmel AT76C50x IEEE 802.11b 无线网络设备 [atu(4)]。
  - Atheros USB IEEE 802.11a/b/g/n 无线网络设备 [otus(4)]。
  - Realtek RTL8188SU/RTL8192SU USB IEEE 802.11b/g/n 无线网络设备 [rsu(4)]。
  - Ralink Technology/MediaTek USB IEEE 802.11a/b/g/n 无线网络设备 [run(4)]。
  - Atheros USB IEEE 802.11a/b/g 无线网络设备 [uath(4)]。
- **操作系统**：所有 BSD。
- **原因**：未考虑攻击面。

### 其他问题
- **空指针解引用**。
- **内存分配问题**：使用 `malloc(len, type, M_NOWAIT/M_CANFAIL)` 时不检查返回值。
- **常见问题**：`M_WAITOK`（即永远不会失败）是一种非常常见的用法，开发者经常将 `M_NOWAIT/M_CANFAIL` 代码当作 `M_WAITOK` 来处理。
- **DRM/DRI 代码库**：作为 Linux 内核源代码树的一部分，BSD 社区对其进行了 fork。代码质量与 Linux DRM/DRI 代码库相当。

### 结果
- **总 Bug 数量**：约 115 个内核 Bug。
  - FreeBSD：约 30 个。
  - OpenBSD：约 25 个。
  - NetBSD：约 60 个。
- **Bug 类型**：
  - 直接堆/栈破坏。
  - 竞态条件。
  - 过期指针。
  - 重复释放。
  - 递归问题。
  - 整数问题（下溢、上溢、符号问题）。
  - 引用计数问题。
  - 信息泄露。
  - 越界读取。
  - 空指针解引用。
  - 逻辑错误。
  - 拼写错误。
  - 除零错误。
  - 用户空间驱动的内核 panic。
  - 内存泄漏。

### 结论
- **总体情况**：在所有三个检查的 BSD 中都发现了 Bug。
- **优胜者/落后者**：
  - **OpenBSD**：显著减少了攻击面，代码质量较高。
  - **NetBSD**：遗留和兼容代码较多，安全代码质量一致性较差。
  - **FreeBSD**：介于两者之间。

### 安全团队响应
- **OpenBSD**：大约一周内响应，几天内修复 Bug。
- **FreeBSD**：大约一周内响应，内部记录 Bug，但状态未知。
- **NetBSD**：几乎立即修复了提交的所有 Bug，令人印象深刻。

### 更多结论
- **代码库大小**：
  - OpenBSD：2863505 行。
  - NetBSD：7330629 行。
  - FreeBSD：8997603 行。
- **代码质量**：OpenBSD 代码质量最为一致。
- **代码审查**：Linux 内核代码的审查人员数量远多于 BSD，这在 Bug 数量上有所体现。

### 问题与评论
- **Defcon 发布演讲前的问题**：提前发布演讲内容有些令人烦恼。
- **为什么不对 Linux 进行同样的分析**：之前的数据显示 Linux 在某些方面表现更好。
- **建议增加 Linux 和 BSD 之间的保护机制比较**：虽然有趣，但超出了本次演讲的范围。
- **DragonFlyBSD 和 HardenedBSD**：考虑过，但由于时间限制选择了最常见的三个 BSD。

### 相关链接
- 如何在一晚上找到 FreeBSD 代码中的 56 个潜在漏洞：PVS-Studio 对 FreeBSD 内核的深入研究。
- FreeBSD 默认设置不佳的教训。

### 问题
- 请提出您的问题或评论。