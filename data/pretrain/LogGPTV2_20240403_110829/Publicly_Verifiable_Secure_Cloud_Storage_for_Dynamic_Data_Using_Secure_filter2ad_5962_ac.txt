simply removes the corresponding tag from the skip
list. Finally, the server sends to the client a proof of
performing the required update properly. We brieﬂy
discuss, in Section 3.2, about rank-based authenticated
skip lists that we use in our construction described in
Section 3.3.
In addition to the requirements mentioned above, it is
often desired that a DSCS protocol (an SCS protocol, in
general) satisﬁes the following properties.
4. Public veriﬁability For a publicly veriﬁable DSCS
protocol, the auditing task can be delegated to a third
party auditor (TPA). In a secure network coding pro-
tocol built on homomorphic MACs, the secret key (for
example, the secret keys of the pseudorandom genera-
tor and the pseudorandom function in [1]) is needed to
verify the authenticity of an incoming packet. This
property restricts the secure cloud storage protocol
built on such an SNC protocol to be privately veri-
ﬁable only.
5. Privacy-preserving audits
In privacy-preserving
audits (for a publicly veriﬁable DSCS protocol), the
third party auditor (TPA) cannot gain the knowledge
of the challenged vectors.
Definition 3.1. A secure cloud storage protocol for dy-
namic data (DSCS) consists of the following algorithms.
• DSCS.KeyGen(1λ): This algorithm generates a secret
key-public key pair K = (sk, pk) for the client.
• DSCS.Outsource(F, K, m, fid): The client divides the
ﬁle F associated with the ﬁle identiﬁer fid into m seg-
ments and computes authentication tags for these seg-
ments using her secret key sk. Then, she constructs an
authenticated data structure M on the authentication
tags (for checking freshness of the data) and computes
some metadata dM for M . Finally, the client uploads
the ﬁle F (cid:48) (the ﬁle F and the authentication tags) along
with M to the cloud storage server and stores dM (and
m) at her end.
• DSCS.InitUpdate(i, updtype, dM , m, fid): The value
of the variable updtype indicates whether the update
is an insertion after or a modiﬁcation of or the dele-
tion of the i-th segment. Depending on the value of
updtype, the client modiﬁes (m, dM ) at her end and
asks the server to perform the required update on the
ﬁle associated with fid (related information speciﬁed
in info).
• DSCS.PerformUpdate(i, updtype, F (cid:48), M, info, m, fid):
The server performs the update on the ﬁle associated
with fid and sends the client a proof Π.
• DSCS.VerifyUpdate(i, updtype, Π, m, fid): On receiv-
ing the proof Π for the ﬁle associated with fid from
the server, the client checks whether Π is a valid proof.
• DSCS.Challenge(pk, l, fid): During an audit, the ver-
iﬁer sends a challenge set Q of cardinality l = O(λ) to
the server.
• DSCS.Prove(Q, pk, F (cid:48), m, fid): The server, after re-
ceiving the challenge set Q, computes a proof of stor-
age T corresponding to Q and a proof of freshness Π.
Then, it sends (T, Π) to the veriﬁer.
• DSCS.Verify(Q, T, K, m, fid): The veriﬁer checks if T
is a valid proof of storage corresponding to the chal-
lenge set Q and Π is a valid proof of freshness. The
veriﬁer outputs 1 if both the proofs pass the veriﬁca-
tion; she outputs 0, otherwise.
A DSCS protocol can be privately veriﬁable if the algo-
rithm DSCS.Verify described above involves the secret key
sk of the client; it is publicly veriﬁable, otherwise. There-
fore, in publicly veriﬁable DSCS protocols, a third party
auditor (TPA) can audit the client’s data on behalf of the
client who delegates her auditing task to the TPA.
Security of a DSCS Protocol.
In addition to the authenticity and extractability prop-
erties (as required by an SSCS protocol), a DSCS protocol
must satisfy another property called freshness which guar-
antees that the server is storing an up-to-date version of the
ﬁle F . The detailed discussion on the security of a DSCS
protocol is deferred to Section 3.4.
3.2 Rank-Based Authenticated Skip Lists
For dynamic data, we need some tool to verify the fresh-
ness along with the authenticity of each of the vectors. Sev-
eral data structures like Merkle hash trees [27], rank-based
authenticated skip lists [18] and rank-based RSA trees [31,
18] are found in the literature which serve the purpose. Er-
way et al. [18] propose rank-based authenticated skip lists
based on labeled skip lists [20, 32]. In our construction, we
use this data structure since the number of levels in a skip
list is logarithmic in m with high probability [32]. We give
a brief introduction to the procedures of rank-based authen-
ticated skip lists stored remotely in a server as follows.
112• ListInit(t1, . . . , tm): Let {t1, . . . , tm} be an ordered
list of m elements on which a rank-based authenticated
skip list M is to be built. These elements are kept in
the bottom-level nodes of the skip list in an ordered
fashion. For each node z of the skip list: right(z)
and down(z) are two pointers to the successors of z,
rank(z) is the number of bottom-level nodes reachable
from z (including z if z itself is a bottom-level node),
high(z) and low(z) are the indices of the leftmost and
rightmost bottom-level nodes reachable from z, f (z)
is the label associated with the node z, and l(z) is the
level of z (l(z) = 0 for a bottom-level node z).
Initially, all these information (except the label) are
computed for each node in the skip list. In addition,
the i-th bottom-level node z contains x(z) = ti,∀i ∈
[1, m]. Finally, for each node z, the label f (z) is com-
puted using a collision-resistant hash function h as
0,
f1,
f2,
f (z) =
if z is null
if l(z) = 0
if l(z) > 0
with f1 = h(l(z)||rank(z)||x(z)||f (right(z))) and f2 =
h(l(z)||rank(z)||f (down(z))||f (right(z))).
The skip list along with all the associated information
are stored in the server. The client only stores the
value of m and the label of the root node r (that is,
f (r)) as the metadata dM .
• ListAuthRead(i, m): When the client wants to read
the i-th element ti, the server sends the requested el-
ement along with a proof Π(i) to the client. Let the
veriﬁcation path of the i-th element be a sequence of
nodes z1, . . . , zk, where z1 is the bottom-level node
storing the i-th element and zk = r is the root node of
the skip list. Then, the proof Π(i) is of the form
Π(i) = (A(z1), . . . , A(zk)),
where A(z) = (l(z), q(z), d(z), g(z)). Here, l(z) is the
level of the node z, d(z) is 0 (or 1) if down(z) (or
right(z)) points to the previous node of z in the se-
quence, and q(z) and g(z) are the rank and label (re-
spectively) of the successor node of z that is not present
on the veriﬁcation path.
• ListVerifyRead(i, dM , ti, Π(i), m): Upon receiving the
proof (ti, Π(i)) from the server, the client checks if the
proof corresponds to the latest metadata dM stored at
her end. The client outputs 1 if the proof matches with
the metadata; she outputs 0, otherwise.
Due to the collision-resistance property of the hash
function h that is used to generate the labels of the
nodes of the skip list, the server cannot pass the veriﬁ-
cation without storing the element ti properly, except
with some probability negligible in the security param-
eter λ.
• ListInitUpdate(i, updtype, dM , t(cid:48)
i, m): An update can
be an insertion after or a modiﬁcation of or the dele-
tion of the i-th bottom-level node. The type of the up-
date is stored in a variable updtype. The client deﬁnes
j = i (for an insertion or modiﬁcation) or j = i− 1 (for
a deletion). She calls ListAuthRead(j, m) for the ex-
isting skip list M and veriﬁes the response sent by the
server by calling ListVerifyRead(j, dM , tj, Π(j), m). If
the proof does not match with the metadata dM (the
label of the root node of the existing skip list M ), she
aborts. Otherwise, she updates the value of m, com-
putes the new metadata d(cid:48)
M using the proof and stores
it at her end temporarily. Then, the client asks the
server to perform the update specifying the location i,
updtype (insertion, deletion or modiﬁcation) and the
new element t(cid:48)
i (null for deletion).
• ListPerformUpdate(i, updtype, t(cid:48)
i, M ): Depending on
the value of updtype, the server performs the update
asked by the client, computes a proof Π similar to the
one generated during ListAuthRead and sends Π to
the client.
i, d(cid:48)
• ListVerifyUpdate(i, updtype, t(cid:48)
M , Π, m): On receiv-
ing the proofs from the server, the client veriﬁes the
proof Π and computes the new metadata dnew based
on Π. If d(cid:48)
M = dnew and Π is a valid proof, the client
sets dM = d(cid:48)
M and
outputs 1. Otherwise, she changes m to its previous
value, deletes the temporary value d(cid:48)
M and outputs 0.
M , deletes the temporary value d(cid:48)
Due to the properties of a skip list [32], the number of
levels in a skip list is logarithmic in m with high probability.
For this reason, the size of a proof, the computation time
for the server and the veriﬁcation time for the client are
O(log m) with high probability.
3.3 Construction of a DSCS Protocol from an
SNC Protocol
In this section, we construct a secure cloud storage proto-
col for dynamic data (DSCS) from the secure network coding
(SNC) protocol proposed by Catalano et al. [11] which is se-
cure in the standard model. This construction exploits a
rank-based authenticated skip list (discussed in Section 3.2)
to ensure the freshness of the dynamic data. This DSCS
protocol consists of the following procedures. Let h be the
collision-resistant hash function used in the rank-based au-
thenticated skip list we use in our construction. We assume
that the ﬁle F to be outsourced to the server is a collection
of m vectors where each of the vectors consists of n blocks.
• KeyGen(1λ, m, n): The client selects two random safe
primes p, q of length λ/2 bits each and takes N = pq.
The client chooses another random prime e of length
λ+1 (in bits) and sets the ﬁle identiﬁer fid to be equal
to e. She selects g, g1, . . . , gn, h1, . . . , hm
N . The
secret key sk is (p, q), and the public key pk consists
of (N, e, g, g1, . . . , gn, h1, . . . , hm, dM , m, n). Initially,
dM is null. Let K = (sk, pk).
R←− Z∗
• Outsource(F, K, fid): As mentioned above, the ﬁle F
(associated with the identiﬁer fid) consists of m vec-
tors each of them having n blocks. We assume that
each of these blocks is an element of Fe. Then, for
each 1 (cid:54) i (cid:54) m, the i-th vector vi is of the form
[vi1, . . . , vin] ∈ Fn
e . For each vector vi, the client se-
R←− Fe and computes xi such
lects a random element si
that
xe
i = gsi (
gvij
j
)hi mod N.
(1)
n(cid:89)
j=1
113Now, ti = (si, xi) acts as an authentication tag for the
vector vi. The client constructs a rank-based authenti-
cated skip list M on the authentication tags {ti}1(cid:54)i(cid:54)m
and computes the metadata dM (the label of the root
node of M ). Finally, the client updates dM in the pub-
lic key and uploads the ﬁle F (cid:48) = {(vi, ti)}1(cid:54)i(cid:54)m along
with M to the cloud server.
• InitUpdate(i, updtype, dM , pk, fid): The value of the
variable updtype indicates whether the update is an in-
sertion after or a modiﬁcation of or the deletion of the
i-th vector. The client performs one of the following
operations depending on the value of updtype.
1. If updtype is insertion, the client selects h(cid:48) R←−
Z∗
N and generates the new vector-tag pair (v(cid:48), t(cid:48)).
She runs ListInitUpdate on (i, updtype, dM , t(cid:48), m)
and sends (h(cid:48), v(cid:48)) to the server.
2. If updtype is modiﬁcation, the client generates
the new vector-tag pair (v(cid:48), t(cid:48)). Then, she runs
ListInitUpdate(i, updtype, dM , t(cid:48), m) and sends v(cid:48)
to the server.
3. If updtype is deletion, the client runs the pro-
cedure ListInitUpdate on (i, updtype, dM , t(cid:48), m),
where t(cid:48) is null.
The client stores the value of the new metadata d(cid:48)
temporarily at her end.
M
• PerformUpdate(i, updtype, F (cid:48), M, h(cid:48), v(cid:48), t(cid:48), pk, fid):
We assume that, for eﬃciency, the server keeps a local
copy of the ordered list of hj values for 1 (cid:54) j (cid:54) m.
Based on the value of updtype, the server performs
one of the following operations.
1. If updtype is insertion, the server sets m = m + 1,
inserts h(cid:48) in the (i + 1)-th position in the list of
hj values (for 1 (cid:54) j (cid:54) m) and inserts v(cid:48) after the
i-th vector. The server runs ListPerformUpdate
on the input (i, updtype, t(cid:48), M ).
2. If updtype is modiﬁcation (h(cid:48) is null), the server
modiﬁes the i-th vector to v(cid:48) and runs the proce-
dure ListPerformUpdate on (i, updtype, t(cid:48), M ).
3. If updtype is deletion (h(cid:48), v(cid:48) and t(cid:48) are null), the
server sets m = m − 1, deletes the particular hi
value from the list of hj values (j ∈ [1, m]) and
runs ListPerformUpdate(i, updtype, null, M ).
• VerifyUpdate(i, updtype, t(cid:48), d(cid:48)
M , Π, pk, fid): After re-
ceiving the proof from the server, the client performs
ListVerifyUpdate(i, updtype, t(cid:48), d(cid:48)
M , Π, m). If the out-
put of ListVerifyUpdate is 1, the client outputs 1 and
updates her public key (the latest values of m, dM and
hj for j ∈ [1, m]) accordingly. Otherwise, the client
outputs 0.
• Challenge(pk, l, fid): During an audit, the veriﬁer se-
lects I, a random l-element subset of [1, m]. Then, she
generates a challenge set Q = {(i, νi)}i∈I , where each
R←− Fe. The veriﬁer sends the challenge set Q to
νi
the cloud server.
• Prove(Q, pk, F (cid:48), M, fid): The cloud server, after re-
ceiving the challenge set Q = {(i, νi)}i∈I , computes
i∈I νisi − s)/e. The
server, for each i ∈ I, forms ui = [vi ei] ∈ Fn+m
by
augmenting the vector vi with the unit coeﬃcient vec-
i∈I νi · ui mod e ∈
i∈I νisi mod e and s(cid:48) = ((cid:80)
s =(cid:80)
tor ei. Then, it computes w = (cid:80)
, w(cid:48) = ((cid:80)
gs(cid:48)(cid:81)n
i∈I νi · ui − w)/e ∈ Fn+m
mod N.
(2)
(cid:81)m
i∈I xνi