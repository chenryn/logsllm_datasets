that delays the operation in the critical service to make it exceed
the preset timer, watchdog kills the whole system server to go
through a soft-reboot. One would wonder why it kills the whole
system server instead of the relevant service process. In fact, it has
been pointed out that such design can be utilized to maliciously
shut down the system server by tricking the watchdog to reboot
the Android (version 4.0 to 5.0.2) userspace including the system
server, the Zygote and other processes [22]. We speculate that
from Android 8.0, there is an improvement in such design that the
watchdog thread no longer blindly kills the whole system server.
This speculation is based on the system log information which
shows tremendous effort in restarting the dead critical services but
all are unfortunately end up with “start timeout”. This effort is not
sufficient to recover the system from our attack, which means that
the frozen system is out of service until the battery is empty unless
there is human interruption forcing a reboot. If the device does not
have a battery, such as the TV box, it requires to unplug the device
to shut down the system forcibly. This observation motivates us to
explore more about attack consequences later in Section 4.3, which
reveal fruitful findings.
4.3 Quantitative Attack Consequences
This section demonstrates the quantitative measurement of the
attack consequences exploiting the identified vulnerability. We
select Google phones Pixel and Pixel 2 as the testing devices
according to the Google vulnerability reward program.
4.3.1 Temperature Surge. Different from the existing DoS attacks
on Android systems that would lead to an automatic system
recover [22], we notice that the late Android versions 8.0 and 9.0
fail in automatically recovering from our attack. This observation
motivates us to explore the attack consequence due to the long-
time system freeze. One of the immediate effects is that the device
temperature significantly rises compared to that under the normal
condition. In this subsection, we conduct experiments to measure
the surface temperature of the Google Pixel under both normal
conditions and attack conditions.
Under the attack condition, the testing device runs one of the
PoC applications that would lead to a system freeze, whereas under
the normal condition, it runs an endless loop of AES encryption
and decryption which simulates the processing load of normal user
operations. For each condition, we measure both temperatures
when the device is connected to a charger and when it is not.
All the other running settings are identical for both normal and
attack conditions, for example, the screens are both lighted and
the air temperatures while testing are both 28 °C. The temperature
of the device surface is measured using a contactless industrial
infrared thermometer (Hong Kong Xima AS380). We record the
device temperature at its front center or back center whichever is
higher.
We run the test for 3 hours and record the temperatures during
the whole test. Each test condition is repeated 10 times for us to
obtain an average temperature value. The results are shown in
Figure 2. We can see that under the normal condition, the device
temperature maintains a stable level during the whole test and
reaches no more than 45 °C even if the device is constantly running
heavy computing tasks, i.e., AES encryption and decryption.
However, under the attack condition, the device temperature
continuously rises as time goes on and reaches as high as 60 °C
after 3 hours of testing. The measurement at 180 minutes is not
available for “attack not charging” condition, because the attack
has drained the battery before reaching 180 minutes. Regarding the
influence of the charging, given the same normal/attack condition,
the temperatures for charging and not charging are generally
similar, which implies the influence to device temperature from
charging is negligible.
Figure 2: Device temperature measurements.
4.3.2 Persistent Battery Degeneration. Since Android cannot au-
tomatically recover from the attack freeze, it is feasible to observe
the gradual impact on the device from the long-term attack. In this
experiment, we attack the charging devices for 7 hours per day
(simulating the scenario that the attack happens when the device is
charging overnight) and 20 days in total. After every 7-hour attack,
we reboot the system to stop the attack application and start our
battery life measurement experiments. For the rest of the day, we
leave the device standby in normal condition.
The battery life is measured as the time it takes from the full
battery charge to auto power off. We keep the screen on and run
the same application, which has an endless loop of AES encryption
and decryption, on all the testing devices to simulate the user usage.
We have two sets of devices under test, one set is under attack
and the other is under normal use. Each set has two models, i.e.,
Google Pixel and Google Pixel 2. In order to provide a clear view of
the comparison, we normalize the battery life to [0,1] for each set,
i.e., Pixel and Pixel 2, respectively. The results are demonstrated in
Figure 3. After 20 days of normal use, the battery lives of the two
device models do not change much. In comparison, it can be seen
that battery life is reducing gradually since the attack is launched.
After 20 days of the attack, the battery life of Pixel reduces 13% (29
minutes) and Pixel 2 reduces 22% (54 minutes), which indicates that
the battery life is reduced significantly under continuous attacks.
0510203060120180Normal	Charging31.264142.0243.0843.3844.344.6644.64Normal	Not	Charging31.1438.140.141.8442.724444.1444.14Attack	Charging3144.9247.8250.953.2856.1858.3459.84Attack	Not	Charging30.74547.250.4652.455.558.33035404550556065Temperature	°CAttack	application	running	time	in	minutes5 POC ATTACKS AND HAZARDS
In this section, we analyze the potential hazard of the identified
vulnerability by engineering several representative PoC attacks,
including the attack scenario, the design of the attack, as well as the
consequences, which demonstrate the easily-exploitable nature of
the identified vulnerability. The PoC attack apps have successfully
passed the security screening mechanism in the Google Play 2.
5.1 DoS Attacks against Android System
Besides dominating 85% of smartphone market share [12], Android
systems are also widely used in IoT devices and critical tasks, such
as medical devices and on-vehicle/aircraft devices. Any failure, no
matter temporary or long-term, in the critical tasks could lead to
severe consequences which could be a matter of life and death
in some of the applications. Unfortunately, one straightforward
way to exploit the vulnerability identified by NativeX is to perform
DoS attacks. The critical tasks performed in the system could be
suspended by a system freeze or a system soft-reboot, which makes
the identified vulnerability an ideal tool for sabotaging attackers
especially the ransomware attackers. The severe consequences of
DoS attacks may seem alike, the DoS attacks leveraging on our
newly-discovered vulnerability is stealthier since it does not require
any permission above the “normal” level.
Attack PoC design and attack consequences. Android
broadcasts an Intent message including a system-defined action
string android.intent.action.BOOT_COMPLETED when the sys-
tem has finished booting either from a soft-reboot or a complete
restart. The PoC is designed to listen to the booting broadcast by
registering a broadcast receiver. A sabotaging attacker can start the
attack once the PoC app gets notified that the system has finished
booting. For a ransomware attacker, he/she can instead pop up
an activity with his/her ransom payment information before the
launch of the actual attack. The activity can also be designed in a
manner that the PoC app would exit if the device owner has paid
the ransom, otherwise launch the attack. Both sabotaging attack
and ransomware attack will not allow the user to interact with the
system3.
5.2 DoS Attacks against Android App
By exploiting the identified vulnerability, an attacker is able to
disturb the functioning of a victim app that has already been
installed on the device. This is a type of highly targeted attack.
The DoS attack is triggered only when the user is performing a
certain operation or interacting with a certain app. It is difficult
to detect the source of such an attack since it is triggered by the
legitimate behaviors of the victim app and it requires no specific
permission for the attack app to receive the trigger timing. From
the user’s perspective, it would appear as the system freezes or
reboots once the user intends to interact with the victim app. In
this case, an attacker, e.g., a vicious app competitor, may purposely
launch such an attack against its rival to frame the rival app and
further mislead the user to uninstall the rival app.
2The PoC apps are available in the following link: https://play.google.com/store/apps/
details?id=com.hou.ndkdemo. We clearly mark this app as an academic PoC for a
research paper to avoid misleading normal users.
3The DoS attack against the Android system demo is available at https://youtu.be/
VmvJW-6rGmQ
Figure 3: Battery life changes under attack or normal use
for 20 days. The vertical axis is normalize to [0,1] for two
devices, respectively.
4.3.3 Persistent Computing Performance Decrease. This experiment
is to measure the potential impact on the computing performance
when the device is under attack for a period of time, i.e., 20
days in our setting. The setting of this experiment is the same
as the previous battery degeneration experiment in Section 4.3.2.
The test devices are rebooted before every measurement. The
computing performance is measured by the processing time of
running a program piece. The shorter the time it takes, the better
the performance is. The device is charging during the performance
measurement to avoid the influence of the battery level. In our
experiment, we run AES encryption/decryption 1000 times and
measure its time cost. Figure 4 illustrates the results of the two
models, i.e., the Pixel and Pixel 2, after days of attack and normal
use. We can see from Figure 4 the fluctuation in the processing
time for both models under normal use is tiny. In contrast, when
the device is under attack, the processing time increases generally
as the attack carries on. The decrease in milliseconds of running
the test program piece may be negligible to humans, however, it is
worth noting that the decrease is about 10% in 20 days. Though we
have observed the decrease in computing performance, it is difficult
to pinpoint the root of the decrease in computing performance
because the computing performance is determined by a number of
factors such as CPU and RAM.
(a) AES 1000 times on Pixel.
(b) AES 1000 times on Pixel 2.
Figure 4: The device computing performance under attack
and normal use measured by the processing time of AES
encryption/decryption (1000 times) on Pixel and Pixel 2.
Pixel	2	under	attack0.70.750.80.850.90.9511.051.1125101520Battery	life	changesDaysPixel	under	normal	usePixel	under	attackPixel	2	under	normal	usePixel	2	under	attack1201251301351401451500125101520Timecost	in	millisecondDaysUnder	attackNormal	use60657075800125101520Timecost	in	millisecondDaysUnder	attackNormal	use1201251301351401451500125101520Timecost	in	millisecondDaysUnder	attackNormal	use60657075800125101520Timecost	in	millisecondDaysUnder	attackNormal	useAttack PoC design and attack consequences. Instead of
listening to the system booting broadcast, this PoC listens to the
broadcast from the victim app. It requires that the target app sends
any broadcast that can be received by other third-party apps, which
is in fact very common in Android apps. Apps usually send out
implicit broadcasts to notify other apps on the same device of its
operation or status, such as the app launch and the user login. The
PoC app thus can register a receiver to receive the broadcast from
the target app. If the broadcast is protected by permission (not at the
signature level), the receiver app needs to apply for the permission
and easily tricks the user to approve the permission application [34].
Otherwise, no permission is required. The PoC app is designed in
the way that it launches the attack once its receiver receives the
broadcast from the victim app.
We have conducted a preliminary experiment to verify the above
attack design using popular apps with billions of downloads. The
apps and their broadcasts that can be used by the attack PoC are
listed in Table 5. The metadata of the app is from the Tencent App
Store which is one of the largest app stores in China. We only list
the broadcasts that are triggered by user operations in Table 5. By
listening to different broadcast actions, the attack can be launched at
different points, for example, when the user is in the login process.
When the attack PoC launches DoS attack upon receiving such
broadcasts, it gives users the impression that it is some function in
the victim app that causes the system to freeze and reboot, such
as logging in the app. This attack disturbs the users when they are
interacting with the victim app, and further mislead the users to
uninstall the victim app4.
5.3 Physical Harm to Users
The experiments in Section 4.3.1 reveal that the temperature of the
device under attack reaches as high as 60 °C when the environment
temperature is 28 °C. However, the environment temperature could
be much higher than our controlled environment temperature 28 °C.
For example, one case could be that an Android smartphone is in an
enclosed space such as a car parking in the summer sun (the in-car
temperature can reach up to 70 °C, after parking in the sun on a 38 °C
day [4]), or surrounded by daily thermal insulation materials such
as under a pillow in the bed. In such cases, the device temperature
under attack might be even higher than 60 °C which may not be
immediately but potentially cause physical harm to users.
Attack PoC design and attack consequences. This PoC app
is designed to overheat the victim Android device to cause any
harm to the device or users. Android provides temperature sensor
APIs for apps to acquire temperature. The PoC app first creates
an instance of the SensorManager and use the sensor manager
instance to further get an instance of a temperature sensor. After
registering a sensor listener, the PoC app can start handling the
sensor data in the onSensorChanged() callback. The PoC app has a
preset temperature threshold, reaching which will trigger the attack.
We have not conducted repeat attack experiments to get an average
device temperature as we have done in Section 4.3.1 to avoid any
harm from the overheat. We do have a test when the environment
temperature is 42.9 °C which is the temperature on a hot summer
4The DoS attack triggered by Taobao login broadcast is demoed in the link: https:
//youtu.be/HJR_r4DH-DE
day. After 200 minutes attack, despite the CPU throttling technique
in modern CPUs, the device temperature still reaches 70.4 °C 5. The
temperature is far beyond the suggested charging (0 °C to 45 °C)
and discharging temperature (-20 °C to 60 °C) of the lithium-ion
batteries [2]. Not to mention the degeneration to the battery [33],
the overheat is also able to suffer users from burns [8].
6 DEFENSE APPROACHES
One way to stop this type of attack is to remove the attack app
from the system. Android safe mode is such a special runtime
environment where no third-party app is allowed to run so
that users can uninstall any identified attack app without any
attack interference. Unfortunately, it is usually a challenging task
for ordinary users to recognize the attack app. The attack app
can disguise itself as a functional app. It may launch attacks
intentionally on various occasions. Other than the occasions we
explained in Section 5.1 and Section 5.2, the attack apps can be
triggered by other permission-free indicators, such as a preset time,
battery level, or system running time, which makes it difficult for
users to identify the sources of such attacks. Alternatively, a factory
reset, which may erase all the useful applications and data, can
stop the attack, however, at the cost of unnecessary labor work to
restore the previous system settings and user data. Therefore, it
is preferred to solve the problem by amending the management
mechanism for native processes instead of burdening users with
the professional security challenge.
Due to the weak management of the native processes, any app
can starve or slow down the critical system services by invoking
the Android commands that share the system resources with these
services in its native processes. Native programming is an effective
method to achieve extra performance as well as to defend the core
algorithm against reverse engineering. The native API used in the
attack PoC app, i.e., system(), is widely used in command-line
shell apps. It is recommended to regulate the usage of such native
APIs instead of crudely forbidding them. In this section, we briefly
discuss the possible defense approaches from the Android system
angle.
Introduce Permission Control. Unlike the established per-
mission control in the framework programming, there is no
such control on the NDK programming. As a consequence, any
application can invoke any native API without any restriction. We
suggest introducing permission control to the native APIs, which
follows the uniform security mechanism in the framework layer.
Similarly, the app that intends to issue Android commands via
framework APIs, e.g., Runtime.getRuntime().exec(), or native
APIs, e.g., system(), shall request for the corresponding permission
before such operation. On one hand, permission control is able
to restrict the usage of the target APIs/resources by informing
the system as well as the users of such access. On the other
hand, it provides extra permission information to conduct malware
detection using the traditional permission-based approach.
On the downside, users may not understand the concept
of permission controlling the execution of commands, which
may require the specification of such permission to be intuitive.
Moreover, introducing extra permission control to the native layer,
5The overheat attack demo video is available at: https://youtu.be/kZbCWNlKARA
Table 5: DoS attack against popular apps. The listed broadcast actions can be used to trigger the DoS attacks.
App
Taobao
Wechat