3、 数据同步的表需要有单列主键。  
4、 支持对主键进行修改。   
5、 暂时不支持异构数据库的 DDL 同步。  
6、 支持指定表镜像方式同步到 PostgreSQL 或 Greenplum（配置文件方式）。  
7、 支持指定模式的表同步。  
### 1.2 mysql2gp 实现架构  
mysql2gp 的实现方式：  
1、 在客户端主机（也可以部署在其他主机）上启动一个临时 PG 数据库，用于临时存放从 MySQL 拉去到的 binlog 数据。  
2、 binlog_miner 从源 MySQL 的一个 binlog 文件开始，拉取和解析 binlog 并存放到临时 PG 中。  
3、 binlog_loader 从临时 PG 中读取增量数据，并做适当的处理(主要是合并单条记录的多次操作，减少目标端的压力，提高性能)，最终批量写入到目标 PostgreSQL 或 Greenplum 中去。  
### 1.3 mysql2gp 模块介绍  
mysql2gp 分为5个部分  
1、 binlog_miner 用于拉取MySQL 目标库中的 binlog, 并保存到临时 PGSQL DB 中。  
2、 binlog_loader 用于读取临时 PGSQL DB 中的 binlog 数据并加载到目标库中。  
3、 my.cfg 配置文件，设置需要同步数据的源和目标数据库的链接信息和相关参数。  
4、 loader_table_list.txt 配置文件，设置需要同步的表名列表，用回车符隔开。  
5、 临时 PGSQL DB，用户保存增量数据的临时数据库。这个DB建议和 binlog_miner binlog_loader 部署在同一个主机。  
## 二 mysql2gp 部署  
建议临时 PGSQL DB 和客户端二进制部署在同主机  
部署步骤：  
### 2.1 部署临时 PGSQL DB  
在目标主机部署一个临时 PGSQL DB 用户存放临时数据，主机需要为临时数据预留足够的保存增量数据的空间。部署完成后获得一个连接临时 PG DB 的连接串，如   
```  
dbname=test port=5432 user=test password=pgsql  
```  
### 2.2 配置文件  
#### 2.2.1 MySQL 相关  
my.cnf  
```  
[src.mysql]  
host = "192.168.1.1"  
port = "3301"  
user = "test"  
password = "123456"  
db = "test"  
encodingdir = "share"  
encoding = "utf8"  
binlogfile = "mysql-bin.000001"  
```  
注意：  
1、 连接MySQL 的数据库用户需要有 select 权限和拉取 binlog 的权限。  
2、 binlogfile 为读取 binlog 的启始文件，必须设置。该配置和全量数据同步工具配合使用。  
通常在开始同步全量 MySQL 数据时记录当前正在写的 binlog 文件名，并配置到增量同步的 my.cnf 中。  
下次启动，不需要解析binlogfile，解析到的binlog偏移信息会记录在临时 PGSQL DB中。  
如果要删除增量任务，需要清空临时 PGSQL DB库。每个任务，需要一个临时 PGSQL DB库。  
#### 2.2.2 临时PGSQL DB数据库  
my.cnf  
```  
[local.pgsql]  
connect_string = "dbname=test host=127.0.0.1 port=5432 user=test password=pgsql"  
```  
注意：  
1、 连接本地数据库可以不指定 host 信息(默认使用/tmp下的unix socket连，这个需要在临时PGSQL DB库的postgresql.conf中设置它的unix_socket_directories参数，并选择/tmp目录)，这样的链接模式效率较高。  
#### 2.2.3 目的数据库  
my.cnf  
```  
[desc.pgsql]  
connect_string = "host=192.167.1.2 dbname=postgres port=5432 user=test password=pgsql"  
target_schema = "test"  
```  
注意:   
1、 target_schema 用于指定目标表存在的 schema，也可以不指定，不指时默认 schema 为 public。  
#### 2.2.4 设置需要同步的表  
1、 my.cnf  
```  
[binlogloader]  
loader_table_list = "loader_table_list.txt"  
```  
2、 loader_table_list.txt  
```  
a  
b  
```  
### 2.3 启动同步进程  
#### 2.3.1 启动 binlog 拉取进程  
推荐命令行：  
```  
	nohup ./binlog_miner 1>minner.log 2>&1 &  
```  
#### 2.3.2 启动 binlog 写入进程  
推荐命令行：  
```  
	nohup ./binlog_loader 1>loader.log 2>&1 &  
```  
#### 定时任务和监控  
监控binlog_miner, binlog_loader的进程状态，如果进程异常，自动重启。  
```  
crontab -e  
* * * * * 包含监控+启动逻辑的shell脚本  
```  
## 下载
https://downloads.mysql.com/archives/community/  
https://github.com/aliyun/rds_dbsync/releases  
https://www.postgresql.org/ftp/source/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")