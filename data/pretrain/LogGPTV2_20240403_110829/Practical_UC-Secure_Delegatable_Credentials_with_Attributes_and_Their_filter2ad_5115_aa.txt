title:Practical UC-Secure Delegatable Credentials with Attributes and Their
Application to Blockchain
author:Jan Camenisch and
Manu Drijvers and
Maria Dubovitskaya
Practical UC-Secure Delegatable Credentials with Attributes
and Their Application to Blockchain
Jan Camenisch
IBM Research - Zurich
PI:EMAIL
Manu Drijvers
IBM Research - Zurich & ETH Zurich
PI:EMAIL
Maria Dubovitskaya
IBM Research - Zurich
PI:EMAIL
ABSTRACT
Certification of keys and attributes is in practice typically realized
by a hierarchy of issuers. Revealing the full chain of issuers for
certificate verification, however, can be a privacy issue since it
can leak sensitive information about the issuer’s organizational
structure or about the certificate owner. Delegatable anonymous
credentials solve this problem and allow one to hide the full dele-
gation (issuance) chain, providing privacy during both delegation
and presentation of certificates. However, the existing delegatable
credentials schemes are not efficient enough for practical use.
In this paper, we present the first hierarchical (or delegatable)
anonymous credential system that is practical. To this end, we
provide a surprisingly simple ideal functionality for delegatable
credentials and present a generic construction that we prove secure
in the UC model. We then give a concrete instantiation using a
recent pairing-based signature scheme by Groth and describe a
number of optimizations and efficiency improvements that can be
made when implementing our concrete scheme. The latter might be
of independent interest for other pairing-based schemes as well. Fi-
nally, we report on an implementation of our scheme in the context
of transaction authentication for blockchain, and provide concrete
performance figures.
KEYWORDS
Credentials, Delegation, Hierarchical issuance, Privacy-preserving
authentication, Composable Security, Zero-knowledge, Blockchain
1 INTRODUCTION
Privacy-preserving attribute-based credentials (PABCs) [6], orig-
inally introduced as anonymous credentials [10, 21], allow users
to authenticate to service providers in a privacy-protecting way,
only revealing the information absolutely necessary to complete
a transaction. The growing legal demands for better protection of
personal data and more generally the increasingly stronger security
requirements make PABCs a primary ingredient for building secure
and privacy-preserving IT systems.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134025
An (attribute-based) anonymous credential is a set of attributes
certified to a user by an issuer. Every time a user presents her cre-
dential, she creates a fresh token which is a zero-knowledge proof
of possession of a credential. When creating a token, the user can
select which attributes she wants to disclose from the credential or
choose to include only predicates on the attributes. Verification of
a token requires knowledge of the issuer public key only. Despite
their strong privacy features, anonymous credentials do reveal the
identity of the issuer, which, depending on the use case, still leaks
information about the user such as the user’s location, organiza-
tion, or business unit. In practice, credentials are typically issued
in a hierarchical manner and thus the chain of issuers will reveal
even more information. For instance, consider governmental issued
certificates such as drivers licenses, which are typically issued by a
local authority whose issuing keys are then certified by a regional
authority, etc. So there is a hierarchy of at least two levels if not
more. Thus, when a user presents her drivers license to prove her
age, the local issuer’s public key will reveal her place of residence,
which, together with other attributes such as the user’s age, might
help to identify the user. As another example consider a (permis-
sioned) blockchain. Such a system is run by multiple organizations
that issue certificates (possibly containing attributes) to parties that
are allowed to submit transactions. By the nature of blockchain,
transactions are public or at least viewable by many blockchain
members. Recorded transactions are often very sensitive, in par-
ticular when they pertain to financial or medical data and thus
require protection, including the identity of the transaction origi-
nator. Again, issuing credential in a permissioned blockchain is a
hierarchical process, typically consisting of two levels, a (possibly
distributed) root authority, the first level consisting of CAs by the
different organizations running the blockchain, and the second
level being users who are allowed to submit transactions.
Delegatable anonymous credentials (DAC), formally introduced
by Belenkiy et al. [3], can solve this problem. They allow the owner
of a credential to delegate her credential to another user, who, in
turn, can delegate it further as well as present it to a verifier for
authentication purposes. Thereby, only the identity (or rather the
public key) of the initial delegator (root issuer) is revealed for verifi-
cation. A few DAC constructions have been proposed [3, 17, 20, 26],
but none is suitable for practical use for the following reasons:
• While being efficient in a complexity theoretic sense, they are
not practical because they use generic zero-knowledge proofs
or Groth-Sahai proofs with many expensive pairing operations
and a large credential size.
• The provided constructions are described mostly in a black-
box fashion (to hide the complexity of their concrete instantia-
tions), often leaving out the details that would be necessary for
their implementation. Therefore, a substantial additional effort
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA683would be required to translate these schemes to a software
specification or perform a concrete efficiency analysis.
• The existing DAC security models do not consider attributes,
which, however, are necessary in many practical applications.
Also, extending the proposed schemes to include attributes
on different delegation levels is not straightforward and will
definitely not improve their efficiency.
• Finally, the existing schemes either do not provide an ideal
functionality for DAC ([20]) or are proven secure in standalone
models ([3, 17, 26]) that guarantee security only if a protocol is
run in isolation, which is not the case for a real environment.
In other words, no security guarantees are provided if they are
used to build a system, i.e., the security of the overall system
would have to be proved from scratch. This usually results in
complex monolithic security proofs that are prone to mistakes
and hard to verify.
The main reason why the existing schemes are sufficiently ef-
ficient, is that they hide the identities of the delegator and dele-
gatee during credential delegation. Thus privacy is ensured for
both delegation and presentation of credentials. While this is a
superior privacy guarantee, we think that privacy is not neces-
sary for delegation. Indeed, in real-world scenarios a delegator and
a delegatee would typically know each other when an attribute-
based credential is delegated, especially in the most common case
of a hierarchal issuance. Therefore, we think that ensuring privacy
only for presentation is a natural way to model delegatable cre-
dentials. Furthermore, revealing the full credential chain including
the public keys and attribute values to the delegatee would allow
us to avoid using expensive cryptographic building blocks such
as generic zero-knowledge proofs, re-randomizable proofs, and
malleable signatures.
1.1 Our Contribution
Let us look at delegatable credentials with a different privacy as-
sumtions for delegation in mind and see how such system would
work.
The root delegator (we call it issuer) generates a signing and a
corresponding verification key and publishes the latter.
User A, to whom a credential gets issued on the first level (we
call it a Level-1 credential), generates a fresh credential secret and a
public key and sends the public key to the issuer. The issuer signs
this public key together with the set of attributes and sends the
generated signature to user A.
User A can then delegate her credential further to another user,
say B, by signing B’s freshly generated credential public key and
(possibly another) set of attributes with the credential secret key of
user A. A sends her signature together with her original credential
and A’s attributes to user B. User B’s credential, therefore, consists
of two signatures with the corresponding attribute sets, credential
public keys of user A and user B, and B’s credential secret key.
User B, using his credential secret key, can delegate his credential
further as described above or use it to sign a message by generating
a presentation token. The token is essentially a non-interactive
zero-knowledge (NIZK) proof of possession of the signatures and
the corresponding public keys from the delegation chain that does
not reveal their values. The signed attributes can also be only selec-
tively revealed using NIZK. Verification of the token requires only
the public key of the issuer and, thus, hides the identities of both
users A and B and (selectively) their attributes. Since all attributes,
signatures, and public keys are revealed to the delegatee during
delegation, we can use the most efficient zero-knowledge proofs
(Schnorr proofs) that would make a protocol practical.
Contribution Summary. In this paper, we propose the first practi-
cal delegatable anonymous credential system with attributes that
is well-suited for real-world applications.
More concretely, we first provide a (surprisingly simple) ideal
functionality ℱdac for delegatable credentials with attributes. At-
tributes can be different on any level of delegation. Each attribute at
any level can be selectively revealed when generating presentation
token. Tokens can be used to sign arbitrary messages. Privacy is
guaranteed only during presentation, during delegation the delega-
tee knows the full credential chain delegated to her.
Second, we propose a generic DAC construction from signature
schemes and zero-knowledge proofs and prove it secure in the
universal composability (UC) framework introduced by Canetti [14].
Our construction can be used as a secure building block to build a
higher-level system as a hybrid protocol, enabling a modular design
and simpler security analysis.
Third, we describe a very efficient instantiation of our DAC
scheme based on a recent structure-preserving signature scheme by
Groth [29] and on Schnorr zero-knowledge proofs [34]. We further
provide a thorough efficiency analysis of this instantiation and
detailed pseudocode that can be easily translated into a computer
program. We also discus a few optimization techniques for the type
of zero-knowledge proofs we use (i.e., proofs of knowledge of group
elements under pairings). These techniques are of independent
interest.
Finally, we report on an implementation of our scheme in the con-
text of a privacy-preserving membership service for permissioned
blockchains and give concrete performance figures, demonstrating
the practicality of our construction. For instance, generating an
attribute token with four undisclosed attributes from a delegated
credential takes only 50 miliseconds, and verification requires only
40 miliseconds, on a 3.1GHz Intel I7-5557U laptop CPU.
1.2 Related Work
There is only a handful of constructions of delegatable anonymous
credentials [3, 17, 20, 26]. All of them provide privacy for both del-
egator and delegatee during credential delegation and presentation.
The first one is by Chase and Lysyanskaya [20] which uses generic
zero-knowledge proofs. The size of a credential in their scheme is
exponential in the number of delegations, which, as authors admit
themselves, makes it impractical and allows only for a constant
number of delegations. Our ideal functionality for DAC is also quite
different from the signature of knowledge functionality that they
use to build a DAC system. For example, we distinguish between
the delegation and presentation interfaces and ping the adversary
for the delegation. We also do not require the extractability for
the verification interface, which makes our scheme much more
efficient.
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA684The construction by Belenkiy et al. [3] employs Groth-Sahai
NIZK proofs and in particular their randomization property. It
allows for a polynomial number of delegations and requires a com-
mon reference string (CRS). Fuchsbauer [26] proposed a delegatable
credential system that is inspired by the construction of Belenkiy
et al. and supports non-interactive issuing and delegation of cre-
dentials. It is based on the commuting signatures and Groth-Sahai
proofs and is at least twice as efficient as the scheme by Belenkiy
et al. [3]. Our construction also requires a CRS, but still outper-
forms both schemes. For example, without attributes, the token
size increases with every level by 4 group elements (G2
2) for
1 × G18
our scheme versus G50
2
for Fuchsbauer [26]. Due to our optimization techniques, the num-
ber of expensive operations (exponentiations and pairings) is also
minimized.
1 × G2
2 for Belenkiy et al. [3] and G20
1 × G40
Finally, Chase et al. [17, 19] propose a DAC instantiation that is
also non-interactive and scales linearly with the number of delega-
tions. Their unforgeability definition is a bit different from the one
by Belenkiy et al. [3] and implements the simulation extractability
notion. However, none of the schemes accommodate attributes in
their security definitions. As we mentioned above, it is hard to
derive the exact efficiency figures from the “black-box”-type con-
struction of [17], which is built from malleable signatures, which,
in turn, are built from the malleable proofs. The efficiency of their
scheme depends on the concrete instantiation of malleable proofs:
either Groth-Sahai proofs [16], which would be in the same spirit
as [26], or non-interactive arguments of knowledge (SNARKs) and
homomorphic encryption [18], which, as the authors claim them-
selves, is less efficient.
Hierarchical group signatures, as introduced by Trolin and Wik-
ström [35] and improved by Fuchsbauer and Pointcheval [27], are
an extension of group signatures that allow for a tree of group
managers. Users that received a credential from any of the man-
agers can anonymously sign on behalf of the group, as is the case
with delegatable credentials. However, in contrast to delegatable
credentials, parties can serve either as manager or as user, but not
both simultaneously. Additionally, hierarchical group signatures
differ from delegatable credentials in the fact that signatures can
be deanonymized by group managers.
2 PRELIMINARIES
This section introduces the notation and recalls well-known build-
ing blocks used in our delegatable credential scheme, such as signa-
ture schemes and zero-knowledge proofs. In addition, it defines a
new primitive we call sibling signatures, that allow for two different
signing algorithms sharing a single key pair. Finally, we give a brief