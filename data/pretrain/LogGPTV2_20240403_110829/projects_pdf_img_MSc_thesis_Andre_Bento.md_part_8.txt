### Component Diagram and System Overview

**Zipkin:**
- **Functionality:** Ingests tracing data from local files or an external system.
- **Purpose:** Enables the retrieval of tracing data for analysis and extraction of relevant metrics.

**Data Analyser:**
- **Functionality:** Utilizes JSONL/HTTPS to ingest and process tracing data.
- **Components:**
  - **Graph Processor (NetworkX):** Handles graph structures and performs graph algorithms.
  - **Metric Extractor (NumPy/Pandas, Scikit-learn):** Identifies outliers in metrics extracted from tracing data.

**Metrics Repository:**
- **Functionality:** Manages time-series metrics data.
- **Components:**
  - **OpenTSDB Client:** Reads from and writes to OpenTSDB for time-series data storage.
  - **Container (Time-Series Database):** Stores time metrics extracted from span trees and graphs.

**Graphs Repository:**
- **Functionality:** Manages graph data.
- **Components:**
  - **ArangoDB Client:** Handles graph data retrieval and persistence.
  - **Container (Graph Database):** Stores graphs extracted from span trees presented in tracing data.

**Metrics Visualizer:**
- **Functionality:** Provides a human-readable view of metrics.
- **Component:**
  - **Browser (Grafana):** Displays metrics in a user-friendly format.

**Subtitle:**
- **Component Container Database Container External Software**

**Figure 4.5: Component diagram.**

---

### Chapter 5: Implementation Process

This chapter details the implementation process of the proposed solution, as outlined in the previous chapter. It is divided into three main sections:

1. **Section 5.1: Huawei Tracing Data Set**
   - **Overview:** Presentation and analysis of the data set provided by Huawei.
   - **Access:** The data set was provided under a Non-disclosure Agreement (NDA).
   - **Content:** Contains tracing data from an experimental OpenStack cluster, covering two days of operation.
   - **Format:** JSONL, with each line representing a single span in JSON format.
   - **Fields:** Defined by the OpenTracing specification, including `traceId`, `name`, `timestamp`, `id`, `parentId`, and `duration`.

2. **Section 5.2: OpenTracing Processor Component (OTP)**
   - **Overview:** Detailed explanation of the OTP component, which collects and stores metrics from tracing data.
   - **Functional Requirements:**
     - **FR-1 to FR-2:** Communication with distributed tracing tools (e.g., Zipkin) to obtain tracing data and service dependency graphs.
     - **Data Sources:** Local files or Zipkin via HTTP requests.
     - **Configuration:** Configurable through a provided configuration file.
   - **Data Processing:**
     - **Tracing Collector:** Collects tracing data from specified sources.
     - **Tracing Processor:** Maps data into in-memory structures and extracts defined metrics.
     - **Graph Processor (NetworkX):** Processes service dependency graphs and extracts graph metrics.
     - **Algorithm 1:** High-level algorithm for metrics extraction from tracing data and service dependency graphs.
     - **Service Dependency Graphs:** Obtained from Zipkin and parsed into NetworkX graph structures.
     - **SpanTrees:** Representation of traces in tree format, created using Algorithm 2.

3. **Section 5.3: Data Analysis Component**
   - **Overview:** Methods and approaches for analyzing the stored observations.
   - **Visualizations:** Provided to illustrate the metrics extracted from tracing data.

---

### 5.1 Huawei Tracing Data Set

The initial data set for this project was provided by Huawei, facilitated by Professor Jorge Cardoso. Access to this data required signing a Non-disclosure Agreement (NDA). The data set includes tracing data from an experimental OpenStack cluster used for testing, covering two days of operation. Two files were provided, one for each day, generated on July 10, 2018. Some fields were obfuscated for protection.

**Table 5.1: Huawei Tracing Data Set Details**

| File Date       | Spans Count | Traces Count |
|-----------------|-------------|--------------|
| 2018-06-28      | 190,202     | 64,394       |
| 2018-06-29      | 239,693     | 74,331       |

**File Format:**
- **JSONL:** Each line contains a single span in JSON format.
- **Span Fields:**
  - `traceId`: Unique ID of a trace (128-bit string).
  - `name`: Human-readable title of the instrumented function.
  - `timestamp`: UNIX epoch in milliseconds.
  - `id`: Unique ID of the span (64-bit string).
  - `parentId`: Reference to the ID of the parent span.
  - `duration`: Span duration in microseconds.
  - `binaryAnnotations`: Protocol (HTTP or RPC), URL, status code.
  - `annotations`: Position in trace, timestamp, endpoint.

**Notes:**
1. Time units are inconsistent, with some fields in milliseconds and others in microseconds.
2. Trace spans may contain additional or fewer fields beyond those listed.

**Visualization:**
- **Graphy OTP Tool:** Used to generate charts showing the count of traces and spans per hour for each day.
- **Figures 5.1 and 5.2:** Present the distribution of traces and spans over time, highlighting a "pit" in quantity from 2 AM to 10 AM on June 28, 2018.

**Summary:**
- **Average Metrics:** Approximately 5,000 traces and 15,000 spans per hour.
- **Data Consistency:** More consistent data on June 29, 2018, making it better for analysis.

---

### 5.2 OpenTracing Processor Component (OTP)

**Overview:**
- **Functional Requirements:**
  - **FR-1 to FR-2:** Communication with distributed tracing tools to obtain tracing data and service dependency graphs.
  - **Data Sources:** Local files or Zipkin via HTTP requests.
  - **Configuration:** Configurable through a provided configuration file.

**Data Flow:**
1. **Tracing Collector:**
   - Collects tracing data from local files or exports them to Zipkin.
2. **Tracing Processor:**
   - Maps data into in-memory structures.
   - Extracts defined metrics from tracing data.
3. **Graph Processor (NetworkX):**
   - Processes service dependency graphs.
   - Extracts graph metrics and stores them in the time-series database.

**Algorithm 1: Metrics Extraction from Tracing Data**

```plaintext
Data: Trace files/Trace data.
Result: Trace metrics written in the time-series database.

1. Connect to Time-Series database;
2. Read time_resolution, start_time, and end_time from configuration;
3. Read traces from trace files/trace data;
4. Post traces to Zipkin;
5. Get services from Zipkin;
6. Calculate time_intervals using start_time, end_time, and time_resolution;
7. while time_interval in time_intervals do
    8. Get service_dependencies from Zipkin;
    9. Build service_dependency_graph using service_dependencies;
    10. Extract graph_metrics from service_dependency_graph;
    11. while service in services do
        12. Get traces from Zipkin;
        13. Map traces in SpanTrees;
        14. Extract service_metrics from SpanTrees;
    15. Post graph_metrics to Time-Series database;
    16. Post service_metrics to Time-Series database;
```

**Service Dependency Graphs:**
- **Source:** Zipkin `/dependencies` endpoint.
- **Format:** JSON array of objects, each representing a relationship between services.
- **Processing:** Parsed into NetworkX graph structures for further analysis.

**SpanTrees:**
- **Definition:** Tree representation of a trace.
- **Algorithm 2: SpanTree Mapping from Spans**

```plaintext
Data: Span list.
Result: Spans mapped into SpanTrees.

1. Index spans by ids from span list into SpanIndex;
2. while span in span list do
    3. Read parentId from span;
    4. Index span using parentId into SpanIndex;
```

**Conclusion:**
- **Objective:** Transform unordered traces into a structured format for easier analysis and metric extraction.
- **Next Steps:** Further details and visualizations of metrics extracted from tracing data will be provided in the next section.