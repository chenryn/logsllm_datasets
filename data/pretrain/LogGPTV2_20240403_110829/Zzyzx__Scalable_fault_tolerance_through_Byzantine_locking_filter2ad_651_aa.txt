title:Zzyzx: Scalable fault tolerance through Byzantine locking
author:James Hendricks and
Shafeeq Sinnamohideen and
Gregory R. Ganger and
Michael K. Reiter
20lO IEEEIIFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Zzyzx: Scalable Fault Tolerance through 
Byzantine Locking 
James Hendricks 
t* Shafeeq Sinnamohideen 
tCamegie Mellon University 
+University 
t Gregory R. Gangert Michael K. Reiter+ 
of North Carolina 
at Chapel Hill 
Abstract 
Zzyzx is a Byzantine 
fault-tolerant 
state ma­
replicated 
and pro­
to 
scaling. 
Locking, 
throughput 
state machine 
prior approaches 
This second protocol requires 
Using a new tech­
Zzyzx allows a client 
replicated 
chine protocol that outperforms 
vides near-linear 
nique called Byzantine 
extract state from an underlying 
and access it via a second protocol specialized 
for use by a 
single client. 
just one round­
trip and 2 f  + 1 responsive 
this results 
of2.2-2.9x higher throughput. 
state can be transferred 
overlapping 
sets of servers 
Zzyzx allows throughput 
when concurrent 
sharing 
derlying 
is common, performance 
replicated 
allowing 
non­
to manage different state. 
Thus, 
to be scaled by adding servers 
in 39-43% lower response 
servers-compared 
is not common. When data 
state machine protocol. 
to other servers, 
Furthermore, 
can match that of the un­
times and a factor 
data sharing 
the extracted 
to Zyzzyva, 
1. Introduction 
grow in size and importance, 
in addition 
to simple crashes 
protocols 
systems 
complex software 
As distributed 
they must tolerate 
misbehavior 
sages. Byzantine 
trary problems, 
but system designers 
overheads 
research 
to improve common cases, 
continue 
and scalability 
fault-tolerant 
limitations 
performance 
has improved 
bugs and hardware 
and lost mes­
can tolerate 
arbi­
making them an attractive 
building 
block, 
are too great. Recent 
by exploiting 
optimism 
exists. 
called 
fault­
(e.g., 
Locking.
replicated 
Zzyzx  narrows  that 
gap with a new technique 
!  Layered atop a Byzantine 
PBFT [7] 
state machine protocol 
gives a 
Byzantine 
Locking temporarily 
access to state in the replicated 
state ma­
state machine pro­
Byzantine 
tolerant 
or Zyzzyva [20]), 
client 
exclusive 
chine. It uses the underlying 
tocol to extract 
it. Unlike locking 
Byzantine 
liveness, locked state is kept on servers, 
tries to access objects 
replicated 
state and, later, 
tool. To ensure 
and a client 
client 
Locking is only a performance 
in non-Byzantine 
locked by another 
the relevant 
that 
can request 
fault-tolerant 
systems, 
to re-integrate 
* James Hendricks 
1 Pronounced zai-ziks, 
like Isaac's, 
is currently affiliated 
with Google. 
Zzyzx is a populated settlement 
in 
San Bernardino 
County, California. 
scalability 
on distinct  physical 
concur­
back to the 
forcing 
both clients 
replicated 
which can execute 
unprecedented 
Locked state is extracted 
state machine to ensure consistency. 
Locking provides 
for the common case of infrequent 
to a set of 
com­
replicated 
state 
each running 
that the locks be revoked, 
underlying 
Byzantine 
and efficiency 
rent data sharing. 
log servers, 
puters from the replicas 
machine. 
Thus, multiple 
on distinct  physical  computers, 
locked state, 
to be scaled by adding 
computers. 
same computers, 
operations 
only 2f+ 1 responses, 
share the 
to execute 
one round-trip 
with 
f faulty servers. 
6, show that Zzyzx 
throughput 
Even when log servers 
much more efficiently-just 
access allows clients 
for the underlying 
while tolerating 
Experiments, 
log server groups, 
and replicas 
described 
exclusive 
in Section 
allowing 
can manage independently 
on locked objects.  Postmark 
and Zzyzx provides 
[18] 
compared 
of 2.2-2.9 
and a factor 
for operations 
39-43% lower latency 
file sys­
on a Zzyzx-based 
a factor 
x 
when using the same servers, 
60% more transactions 
can provide 
higher throughput 
to Zyzzyva, 
completes 
tem than one based on Zyzzyva, 
of 1.6x higher throughput for 
a trace-based 
load. The benefits 
outweigh 
ing after as few as ten operations. 
rently 
layer--clients just 
Thus, except when transitioning 
objects 
shared, 
mal efficiency and 
the underlying 
shared data objects 
execute 
do not use the Byzantine 
protocol 
from unshared 
the cost of unlock­
on concur­
the uncommon case is no worse off than 
to 
with maxi­
the underlying 
Operations 
protocol. 
metadata 
work­
of locking 
Locking 
directly. 
PBFT and Zyzzyva under any workload, 
beneficial 
for services 
This 
whose 
that are rarely shared. 
Locking is  most 
ness guarantees  as 
Byzantine 
state consists of many objects 
characterizes 
many critical 
bility 
ple, the metadata 
contains 
current 
a distinct 
sharing 
and Byzantine 
is rare [3, 22]. 
services 
fault tolerance 
for which both scala­
is  desirable. 
of most  distributed 
service 
object for each file or directory, 
and con­
For exam­
file systems 
2. Context and related work 
Recent years have seen something 
of an arms race among 
researchers 
seeking 
ficient Byzantine 
tentionally, 
application 
substrates. 
Castro and Liskov [7] initiated 
fault-tolerant 
to provide 
writers 
this race by 
Perhaps unin­
with ef­
to worry that the performance 
the common case  (unshared)  proceeds 
but a significant 
gap still 
Though Zzyzx provides 
the same correctne
ss and live­
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
363 
DSN 2010: Hendricks 
et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:03:40 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP International 
Conference 
on Dependable 
Systems & Networks (DSN) 
required 
Total servers 
Responsive servers 
MAC ops at bottleneck 
Critical-path  network  I-way  latencies 
Throughput scales 
required 
server 
per request 2+(8f+I)/B 2+8f 4+4f 2+3 fiB  2 
2 
3f+l  5f+1  3f+l  3f+l  3f+l 
2f+l  4f+1 2f+l  3f+1 2f+l 
No  Some' Some'  No  Yes 
with added servers 
per req.  4 
4 
3 
2 
2f+1 
I 
2 
-
PBFT  Q/U  HQ  Zyzzyva Zzyzx RSM  Lower 
Bound 
3f+ 1 [28] 
Figure I: Comparison of Byzantine fault-tolerant 
with commonly accepted lower bounds. Data for PBFT, Q/U, HQ, and Zyzzyva are taken from [20]. Bold entries 
values.  f denotes 
refers 
protocols is limited 
the request 
good performance.  'The 
identif
Section 6). "Responsive 
scalability 
faults tolerated, 
and B denotes 
in order to achieve 
for overlap between 
by the requirement 
that must respond 
the number of server 
number of servers 
batch size (see 
state machine protocols in the absence of faults and contention, 
valid quorums [23 ] .  
throughput 
provided 
replicated 
servers 
to the 
along 
by quorum 
needed" 
y best-known 
spond to avoid extra work precludes 
duce the number of servers 
ple, if only 2J +  I servers 
responsive" 
techniques 
that re­
For exam­
the J "non­
can be shared by neighboring 
needed in practice. 
need be responsive, 
servers 
clusters. 
Byzantine 
fault-tolerant 
repli­
Singh et al. concluded 
that 
may be hard if not impossible 
note that "different 
per­
Indeed, 
the total number of replicas, 
design choices 
there are several 
within 
param­
the 
for good per­
that must be responsive 
the number of message delays in the common 
In a recent study 
of several 
trade-offs 
[26].  They 
lead to different 
cated state machine protocols, 
"one-size-fits-all 
protocols 
to design in practice" 
formance 
given network conditions." 
eters to consider,  including 
number of replicas 
formance, 
case, the performance 
which is roughly 
operations 
of the above protocols 
as shown in Figure I. PBFT requires 
and all-to-all 
cas, HQ requires 
under contention, 
nodes are responsive. 
and messages per request. 
communication, 
a function 
four message delays 
additional 
repli­
four message delays and performs 
poorly 
and Zyzzyva performs  poorly 
QIU requires 
unless all 
of the numbers of cryptographic 
Unfortunately, 
none 
operations 
on a collection 
of ob­
under contention, 
and the throughput, 
or failures. 
Fortunately, 
concur­
score well on all of these  metrics, 
it "practi­
replaces 
a new protocol, 
it performed 
with Byzantine 
the digital 
proposing 
cal," because 
be achieved 
protocol 
ous  protocols 
and also increases efficiency 
level broadcast, 
requires 
for mutating 
operations, 
leaving 
PBFT, and labeling 
better 
fault-tolerant 
signatures 
than most expected 
systems. 
could 
Their 
common in previ­
codes (MACS) 
batching, 
link­
with request 
and optimistic  reads 
four message delays and all-to-all 
[6]. Still, 
with message authentication 
room for improvement. 
the protocol 
communication 
Abd-el-Malek 
et al. [1] proposed 
QIU, a quorum-based 
speculation 
that exploits 
to provide 
that can 
throughput 
of servers.  QIU 
provides 
are optimistically 
executed 
are used to resolve 
in just one 
issues 
and object histories 
somewhat 
by concurrency 
Byzantine 
fault-tolerant 
protocol 
and quorum constructions 
increase 
with addition 
Byzantine 
fault-tolerant 
jects. Operations 
round-trip, 
created 
rency and failures 
tant usages, 
concrete 
ing conventional 
partmental 
a single 
client 
always only one client 
are expected 
and that, 
examples 
such as the file servers 
wisdom, analysis 
in papers on this topic (e.g., 
[7]). Match­
server [11] confirms that most  files 
of NFS traces 
from a de­
are used by 
when a file is shared, 
using it at a time. 
there is almost 
to be rare in many impor­
that have been used as 
increasing 
Cowling et al. [8] proposed 
the benefits 
HQ, which uses a hybrid ap­
of QIU without 
(3J+ 1 for HQ vs. 5J+ 1 for 
quorum protocol 
or failures 
proach to achieve 
the minimum number of servers 
QIU). An efficient 
less concurrency 
that encounters 
to achieve 
HQ increases the common case number of message delays 
for mutating operations 
operations 
Each operation 
a second protocol 
the number of servers, 
executes 
are detected. 
such issues then executes 
ss. In reducing 
correctne
to four. 
un­
Kotla et al. [20] proposed 
without 
communication 
Zyzzyva, 
additional 
which avoids all­
servers, 
to-all 
better than HQ under contention, 
message delays. 
requires 
achieve 
slowest 
and requires 
however, 
that all 3J +  I nodes are responsive 
good performance, 
server. 
in order to 
making Zyzzyva as slow as the 
Unlike other protocols, 
Also, requiring 
that all 3J + 1 servers 
only three 
Zyzzyva 
re-
performs 
How Zzyzx fits in: Like prior systems, 
Zzyzx is  opti­
where faults 
are rare 
while providing 
correct 
op­
conditions. 
During benign periods, 
than all of the prior ap­
the minimum possible numbers of mes­
equals one round-trip), 
responsive 
requiring 
under harsher 
and scales better 
well in environments 
is uncommon, 
mized to perform 
and concurrency 
eration 
Zzyzx performs 
proaches, 
sage delays (two, which 
servers 
unprecedented 
quorums as in prior protocols 
lapping 
provide 
any scaling; 
used for frequently 
common, Zzyzx performs 
col (e.g., 
and total servers 
scalability, 
because 
similarly 
Zyzzyva). 
(2J+I), 
non-overlapping 
un shared state. When concurrency 
(HQ and QIU) that 
server sets can be 
is 
to its underlying 
proto­
(3J+1).  Zzyzx 
it does not require 
over­
provides 
Zzyzx takes  inspiration 
used by many distributed 
mance in benign environments. 
distributed 
clients 
to provide 
systems 
locking 
For example, 
byte-range 
GPFS uses 
locks that 
from the locking 
to achieve 
mechanisms 
high perfor­
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 