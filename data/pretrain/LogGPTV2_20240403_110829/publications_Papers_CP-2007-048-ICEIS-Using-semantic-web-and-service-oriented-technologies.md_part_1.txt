USING SEMANTIC WEB AND SERVICE ORIENTED
TECHNOLOGIES TO BUILD LOOSELY COUPLED SYSTEMS
SWOAT – A Service and Semantic Web Oriented Architecture Technology
Bruno Caires
Department of Communications and Computing, University of Madeira, Penteada, Funchal, Portugal
PI:EMAIL
Jorge Cardoso
Department of Mathematics and Engineering, University of Madeira, Penteada, Funchal, Portugal
PI:EMAIL
Keywords: Information Integration, Semantic Web, Ontology, Web Services, Middleware
Abstract: The creation of loosely coupled and flexible applications has been a challenge faced by most organizations.
This has been important because organization systems need to quickly respond and adapt to changes that
occur in the business environment. In order to address these key issues, we implemented SWOAT, a
‘Service and Semantic Web Oriented Architecture Technology’ based middleware. Our system uses
ontologies to semantically describe and formalize the information model of the organization, providing a
global and integrated view over a set of database systems. It also allows interoperability with several
systems using Web Services. Using ontologies and Web services, clients remain loosely coupled from data
sources. As a result, data structures can be changed and moved without having to change all clients, internal
or external to the organization.
1 INTRODUCTION two emerging technologies: Semantic Web
Technologies (SWT) and Service Oriented
Architectures (SOA).
A middleware for data integration should allow
Several reasons motivated the use o SWT in our
users to focus on ‘what’ information is required and
middleware. The four main reasons are (Noy and
leave the details on ‘how’ to obtain and integrate
McGuinness, 2001): (1) To share common
information hidden from users. Thus, in general,
understanding of the structure of information among
data integration must provide mechanisms to
people or software agents. This way, the model can
communicate with data sources, handle queries
be understood by humans and computers; (2) to
across heterogeneous data sources and combine the
enable reuse of already specified domain knowledge.
results in an interoperable format, returning it to the
(3) To make domain assumptions explicit; this
clients (Silva and Cardoso, 2006). During the
means that concepts defined in the model have a
software lifetime, several changes that occur are
well defined an unambiguous meaning; (4) Analyze
caused by maintenance tasks, either corrective,
domain knowledge is possible once a declarative
adaptative, preventive or perfective (Vliet, 2000).
specification of the terms is available.
Client applications, when directly connected to the
To prove that SWT has already some successful
database system, remain vulnerable to database
and useful projects implemented, ten application
changes, most of them motivated by maintenance
areas have been identified and described (Cardoso
tasks. To address these issues, we needed a solution
and Sheth, 2006). Five examples are: (1) Semantic
that takes all the advantages from the data
Web Services; (2) Semantic Integration of Tourism
integration middleware, decoupling client
Information Sources; (3) Semantic Digital Libraries;
applications from database systems. We believe that
(4) Semantic Enterprise Information Integration; (5)
in order to achieve the above-mentioned objectives,
Semantic Web Search.
the solution resides in developing middleware with
Ontologies, applied on middleware, in spite of not In the next section, we are going to describe the
having been identified as one of the ten potential scenario that motivated the development of
application areas, can be used in order to provide a SWOAT.
global virtual view over a set of database servers
(Alexiev et al., 2005). Our implementation has
shown that the use of SWT added value to our 2 MOTIVATING SCENARIO
middleware system, semantically describing
(focussing on ‘how’ and not on ‘what’) and
Let us consider an organization with three
centralizing the information model of the
thousand users, where more than ninety percent of
organization.
them use the organization main information systems.
The other emerging technology used in SWOAT
The organization owns several systems, either
is SOA. It provides a universal access mechanism to
developed internally or externally (COTS), and all
all systems via Web Services (WS) and a universal
of them store their data on relational databases.
data representative via XML (Taylor, 2004). Based
Examples of COTS are the human resource
on Web technologies, WS gain several advantages.
management system and accounting system. The
One of them is that being based on SOAP-over-
organization core business is developed in-house
HTTP (Web based protocols), WS are designed to
work over public Internet. Another Web aspect is and because it is the main organization’s system,
that interoperability is achieved using SOAP that needs to extract and use data stored in several other
defines a common standard allowing differing database systems (like the human resource
systems to interoperate. Also, the XML is a standard management system and the accounting system).
framework for creating machine-readable documents The core business system has two types of clients:
(Fremantle et al., 2002). The Service (Web + GUI and Web. GUI applications are typically
Service) main aspects of WS are that services are developed in java and used by organization
available to all systems that wish to use them. employees in order to perform specific tasks (like
Another aspect is that services have a machine- insert the personal data in the human resource
readable description that can be used to identify the management system). On the other side, Web
interface of the service, its location and access applications are typically developed using languages
information. Finally, the service interface is such as php, asp, etc. These are used in specific
available independently of the ultimate system
cases in other to allow access to applications for all
implementation (Fremantle et al., 2002).
authenticated users, from internally or externally of
Taking advantage of SWT and SOA, we
the organization.
implemented SWOAT in order to use the synergy of
these two technologies. Using SWOAT to deploy
Information Systems (IS) we have identified three
main advantages:
• The request done by clients, formulated to
get the required data, specifies ‘what
information is needed’ and nothing about
‘how’ information is obtained. ‘How’
related aspects like database location and
SQL statements are transparent to the
clients.
• Changes that occur in the database are not
necessarily propagated to all clients. In this
way, clients are not aware of the database
changes, either syntactic (ex.: change of a
table name) or structural (added or deleted Figure 1: Connections between clients and relational
databases
table).
• Hides the local databases vocabulary,
As illustrated in Figure 1, in the current scenario
providing a common vocabulary across
clients are directly connected to databases, which
several databases. This way semantic
mean that are vulnerable to database changes. For
heterogeneity (Cardoso and Sheth, 2006) is
example, changes in a table name may require
solved.
changes in several application clients and/or in Several languages that allow to query ontologies
several database views. exist, namely: RQL, RDQL, N3, SeRQL, SPARQL,
In this scenario, SWOAT will provide a global Versa, Triple, SquishQL, RxPath and RDFQL
and integrated view over the set of relational (Haase et al., 2004). In SWOAT, we use SPARQL,
databases and an abstraction layer, decoupling which is an effort of standardization to OWL query
clients (either GUI or Web) from database servers. languages, by W3C. A standardized query language
offers developers and end users a way to write and
Client applications either distributed geographically
to consume the results of queries across this wide
or not can interact with databases mediated by
range of information (SPARQL-W3C, 2005).
SWOAT, using WS.
SWOAT uses SPARQL to extract information from
the OWL instances in order to generate the SQL
statement that allows getting the required data from
3 SWOAT TECHNOLOGIES
the database. This is going to be illustrated in more
detail in the following sections.
SWOAT middleware is based on Semantic Web SWOAT allows interoperability through Web
(Lassila and Swick, 1999), that is an extension of the services. SWOAT has an interface described in a
current Web in which information is given well machine-processable format (specifically WSDL,
defined meaning, better enabling computers and which describes the services provided). Other
people to work in cooperation (Berners-Lee et al., systems interact with SWOAT using SOAP
2001). From the middleware perspective, SW messages (which is intended for exchanging
definition contains concepts that are particularly structured information in a decentralized, distributed
useful in providing a global virtual view over a set environment), typically conveyed using HTTP.
of databases: ‘well defined meaning’ and ‘enabling
computer and people’. In order to achieve the above-
mentioned concepts, ontologies are the solution 4 SWOAT ARCHITECTURE
proposed. An ontology is specification of a
conceptualization (Gruber, 1993). A
SWOAT is the middle-tier that is deployed
conceptualization is the way we think about a
between the database tier and the client tier, as
specific domain and a specification provides a
illustrated in Figure 2. The database tier contains the
formal way of writing it down. Ontology represents
databases that store the data and the client tier
agreement and common terminology / nomenclature
represents the client applications, internal or external
and is in turn the centre price that enables resolution
to the organization that invokes the services
of semantic heterogeneity. Ontology defines a
available by SWOAT, which is the middle-tier.
common vocabulary for researchers who need to
SWOAT middle-tier is organized in three layers:
share information in a domain, including machine-
Data Source Layer (DSL), Business Layer (BL) and
interpretable definitions of basic concepts in the
Presentation Layer (PL). As illustrated in Figure 2,
domain and relations among them. Our system
DSL is identified by (1), BL by (4) and DSL by (11).
represents ontologies using the Web Ontology
We are going to describe each layer separately,
Language (OWL), a semantic mark-up language for
referring to the numbers illustrated in Figure 2 to
publishing and sharing ontologies on the World
facilitate the presentation.
Wide Web. Other alternative formal languages can
also be used to express ontologies, for instance CycL
4.1 Data Source Layer
(CyCorp, 2006), KIF (Genesereth, 2006) or RDF
(Lassila and Swick, 1999). We choose OWL
This layer (1) is responsible for the
because it is a W3C recommendation, designed for
communication with the relational database
use by applications that need to process the content
management systems. In SWOAT, this layer is
of information instead of just presenting information
implemented using Hibernate (Hibernate, 2006),
to humans (McGuinness and Harmelen, 2004).
which is an open-source product developed in java.
How are ontologies, specified in OWL, used in
It increases the developer productivity enabling
SWOAT? An ontology is used to provide a unified
developers to focus more on the business problem
view over a set of relational database systems,
(Hibernate, 2006). It is interoperable with any JDBC
providing a common vocabulary. The ontology is
compliant database and supports more than 20
stored in the middleware, therefore centralized and
popular dialects of SQL including Oracle, DB2,
used by all applications that intent to extract data
Sybase, MS SQL Server, PostgreSQL, MySQL,
from databases. As is going to be described in the
HypersonicSQL, Mckoi SQL, SAP DB, Interbase,
following sections, the mappings from the ontology
to the database are stored in the ontology instances.
Figure 2: SWOAT Architecture
Pointbase, Progress, FrontBase, Ingres, Informix and the ‘Domain Transformation’ (8), and structured in a
Firebird (Hibernate, 2006). format that reflects the OWL model. For example, if
The Query Executer (2) allows executing SQL in the domain model is specified that one person has
queries on the databases. The returned data from the at least one address, the result XML will reflect this
‘Query Executer’ (2) is then transformed to XML in hierarchical structure. This is going to be illustrated
the ‘XML Transformation’ (3). Two main reasons in the running example section.
motivated this transformation. The first one is that The ‘Domain Validator’ (9) is responsible for
having the data structured in XML is easier to validating the data accordingly to the specified
manipulate it in the ‘Business Layer’ (4), with the business rules (ex. one person must have at least one
final objective of returning XML to the clients. The address, which means that a person record without
other reason is that with XML we decouple the DSL the address is not a valid record). In this case, the