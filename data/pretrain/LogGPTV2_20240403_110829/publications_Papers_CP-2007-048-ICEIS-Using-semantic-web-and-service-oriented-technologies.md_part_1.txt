### Using Semantic Web and Service-Oriented Technologies to Build Loosely Coupled Systems

**SWOAT: A Service and Semantic Web Oriented Architecture Technology**

**Authors:**
- Bruno Caires
  - Department of Communications and Computing, University of Madeira, Penteada, Funchal, Portugal
  - Email: [PI:EMAIL]
- Jorge Cardoso
  - Department of Mathematics and Engineering, University of Madeira, Penteada, Funchal, Portugal
  - Email: [PI:EMAIL]

**Keywords:** Information Integration, Semantic Web, Ontology, Web Services, Middleware

**Abstract:**
The creation of loosely coupled and flexible applications has been a significant challenge for many organizations. This is crucial because organizational systems must quickly respond and adapt to changes in the business environment. To address these issues, we developed SWOAT, a middleware based on 'Service and Semantic Web Oriented Architecture Technology.' Our system uses ontologies to semantically describe and formalize the organization's information model, providing a global and integrated view over multiple database systems. It also enables interoperability with various systems through Web Services. By leveraging ontologies and Web services, clients remain loosely coupled from data sources, allowing data structures to be modified or moved without affecting all clients, whether internal or external to the organization.

### 1. Introduction

Two emerging technologies, Semantic Web Technologies (SWT) and Service-Oriented Architectures (SOA), are at the core of our approach. A middleware for data integration should allow users to focus on the required information ('what') while abstracting the details of how to obtain and integrate this information ('how'). Data integration must provide mechanisms to communicate with data sources, handle queries across heterogeneous data sources, and return results in an interoperable format to clients (Silva and Cardoso, 2006).

During the software lifecycle, various changes occur, often due to maintenance tasks such as corrective, adaptive, preventive, or perfective actions (Vliet, 2000). Directly connecting client applications to the database system makes them vulnerable to database changes. To mitigate this, we needed a solution that leverages data integration middleware, decoupling client applications from the database systems.

To demonstrate the success and utility of SWT, ten application areas have been identified and described (Cardoso and Sheth, 2006). Five examples include:
1. Semantic Web Services
2. Semantic Integration of Tourism Information Sources
3. Semantic Digital Libraries
4. Semantic Enterprise Information Integration
5. Semantic Web Search

Ontologies, when applied to middleware, can provide a global virtual view over a set of database servers (Alexiev et al., 2005). Our implementation shows that using SWT adds value to the middleware by semantically describing and centralizing the organization's information model.

The other key technology used in SWOAT is SOA, which provides universal access to systems via Web Services (WS) and a universal data representation via XML (Taylor, 2004). WS, based on SOAP-over-HTTP, are designed to work over the public Internet and achieve interoperability using SOAP, a common standard for differing systems. XML, a standard framework for creating machine-readable documents, further enhances interoperability (Fremantle et al., 2002).

By combining SWT and SOA, we implemented SWOAT to leverage the synergy of these technologies. Using SWOAT to deploy Information Systems (IS) offers three main advantages:
- Clients specify 'what' information is needed, not 'how' it is obtained.
- Database changes do not necessarily propagate to all clients, reducing the impact of syntactic and structural changes.
- Hides local database vocabularies, providing a common vocabulary across databases, thus solving semantic heterogeneity (Cardoso and Sheth, 2006).

### 2. Motivating Scenario

Consider an organization with three thousand users, where more than ninety percent use the organization's main information systems. The organization owns several systems, both internally developed and commercial off-the-shelf (COTS) products, all storing data in relational databases. Examples of COTS include human resource management and accounting systems. The core business system, developed in-house, needs to extract and use data from these various systems.

The core business system has two types of clients: GUI and Web. GUI applications, typically developed in Java, are used by employees for specific tasks, such as entering personal data into the human resource management system. Web applications, developed using languages like PHP or ASP, allow authenticated users, both internal and external, to access the system.

In the current scenario, clients are directly connected to the databases, making them vulnerable to database changes. For example, a change in a table name may require updates in multiple client applications and database views. SWOAT addresses these issues by providing a global and integrated view over the relational databases and an abstraction layer, decoupling clients from the database servers.

### 3. SWOAT Technologies

SWOAT is based on the Semantic Web, an extension of the current Web where information is given well-defined meaning, enabling better cooperation between computers and people (Berners-Lee et al., 2001). From a middleware perspective, ontologies, specified in OWL, provide a global virtual view over a set of databases. OWL, a W3C recommendation, is designed for applications that need to process information content (McGuinness and Harmelen, 2004).

### 4. SWOAT Architecture

SWOAT is the middle-tier deployed between the database tier and the client tier, as shown in Figure 2. The database tier contains the databases, and the client tier represents the client applications, both internal and external to the organization. SWOAT is organized into three layers: Data Source Layer (DSL), Business Layer (BL), and Presentation Layer (PL).

#### 4.1. Data Source Layer (DSL)

This layer (1) is responsible for communication with the relational database management systems. In SWOAT, this layer is implemented using Hibernate, an open-source product in Java that increases developer productivity by focusing on business problems (Hibernate, 2006). Hibernate is interoperable with any JDBC-compliant database and supports over 20 popular SQL dialects.

The Query Executer (2) allows executing SQL queries on the databases. The returned data is transformed into XML in the 'XML Transformation' (3) for easier manipulation in the Business Layer (4). This transformation also decouples the DSL from the BL, facilitating the return of XML to the clients.

#### 4.2. Business Layer (BL)

The Business Layer (4) processes the XML data and performs domain transformations (8) to reflect the OWL model. For example, if the domain model specifies that a person must have at least one address, the resulting XML will reflect this hierarchical structure.

The 'Domain Validator' (9) ensures that the data adheres to specified business rules. If a person record lacks an address, it is considered invalid.

#### 4.3. Presentation Layer (PL)

The Presentation Layer (11) interacts with the client applications, providing the necessary interfaces and services.

### 5. Conclusion

SWOAT leverages the strengths of Semantic Web Technologies and Service-Oriented Architectures to create a robust, flexible, and loosely coupled middleware. By decoupling clients from data sources and providing a unified and integrated view of the organization's information, SWOAT addresses the challenges of rapid and efficient data integration and interoperability.