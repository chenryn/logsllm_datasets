#Nodes
659,981
989,236
69,619
1503
2612
98
Fig. 4. NFA-OBDD construction results
and the time taken and memory consumed by nfa2obdd. For the NFA-OBDDs cor-
responding to the HTTP signature sets, the vectors x and y had 18 Boolean variables
each, while the vector i had 8 Boolean variables to denote the 256 possible ASCII char-
acters. For the NFA-OBDD corresponding to the FTP signature set, the vectors x and
y had 15 Boolean variables each. We also tried to determinize these NFAs to produce
DFAs, but the determinizer ran out of memory in all three cases.
Performance of NFA-OBDDs. Figure 5 depicts the performance of NFA-OBDDs.
Figures 5(a) and 5(b) show the performance for each of the 33 HTTP traces, while
Figure 5(c) shows the performance for both FTP traces. Figure 5(d) also presents the
raw throughput and memory consumption of NFA-OBDDs observed for each signa-
ture set. The throughput and memory consumption of NFA-OBDDs varies across dif-
ferent traces for each signature set; this variance can be attributed to the size and
shapes of OBDD(F) (the OBDD of the NFA’s frontier) observed during execution.
We also observed that larger traces are processed more efﬁciently on average than
smaller traces. For example, in Figure 5(a), the 1.24GB trace was processed at 7,935
cycles/byte, whereas a 20MB trace was processed at 19,289 cycles/byte. We hypothe-
size that the improved throughput observed for larger traces is because of cache effects.
As exec nfaobdd executes, it is likely that NFA-OBDDs that are frequently observed
will be cached, therefore producing improved throughput for larger traces.
Comparison with NFAs. We compared the performance of NFA-OBDDs with an
implementation of NFAs that uses Thompson’s algorithm. This algorithm maintains a
frontier F , and operates as follows: for each state s in the frontier F , fetch the set of
targets Ts of the transitions labeled σ and compute the new frontier F (cid:4)
Our implementation of NFAs makes heavy use of the C++ standard template library.
It stores the transition table as an array of |Q| multimaps. The entry for state s denotes
the set of outgoing transitions from s, where each transition is of the form (σ, t). There
may be multiple entries with the same input symbol σ in each multimap, corresponding
to all the states reachable from s via transitions labeled σ. The performance and memory
consumption of our NFA implementation was relatively stable across the traces used for
each signature set. Figure 5 therefore reports only the averages across these traces.
s ∈ F Ts.
(cid:2)
=
As Figure 5 shows, NFA-OBDDs outperform NFAs for all three sets of signatures
by approximately three orders of magnitude for the HTTP signatures, and two orders
of magnitude for the FTP signatures. In Figure 5(a), for example, NFA-OBDDs are
between 570×–1645× faster than NFAs, while consuming approximately the same
amount of memory. The difference in the performance gap between NFA-OBDDs and
NFAs for the HTTP and FTP signatures can be attributed to the number and structure
of these signatures. As discussed in Section 3, the beneﬁts of NFA-OBDDs are more
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
69
250
200
150
100
50
)
B
M
(
e
g
a
s
u
y
r
o
m
e
M
0
102
103
NFA
NFA−BDD
MDFA
PCRE
500
400
300
200
100
)
B
M
(
e
g
a
s
u
y
r
o
m
e
M
NFA
NFA−BDD
MDFA−2604−sigs
PCRE
104
105
106
Processing time (cycles/byte)
107
108
0
104
105
107
Processing time (cycles/byte)
106
108
(a) HTTP/1503 regular expressions
(b) HTTP/2612 regular expressions
100
80
60
40
20
)
B
M
(
e
g
a
s
u
y
r
o
m
e
M
0
103
NFA
NFA−BDD
MDFA−95−sigs
PCRE
104
105
Processing time (cycles/byte)
Sig. Set
Processing time
NFA-OBDDs
Memory
HTTP/1503 7,935–22,895 cycles/byte
39–59MB
HTTP/2612 22,968–51,215 cycles/byte 54–61MB
8MB
53MB
73MB
29MB
FTP/98
HTTP/1503
HTTP/2612
5,095 cycles/byte
NFAs
1.3 × 107 cycles/byte
2.1 × 107 cycles/byte
5.6 × 105 cycles/byte
PCRE
FTP/98
HTTP/1503 2.1–6.2 × 105 cycles/byte
HTTP/2612 1.3–2.8 × 107 cycles/byte
5.9–6.2MB
FTP/98
2,210–6,185 cycles/byte
MDFA (partial signature sets in Figure 5(b) and (c))
HTTP/1503 1,000–15,951 cycles/byte 71–232MB
HTTP/2604 15,891–49,296 cycles/byte 335–426MB
54–82MB
1,160–1,386 cycles/byte
3.6MB
3.9MB
FTP/95
(c) FTP/98 regular expressions
(d) Raw performance numbers
Fig. 5. Comparing memory versus processing time of (1) NFA-OBDDs, (2) traditional NFAs,
(3) the PCRE package, and (4) different MDFAs for the Snort HTTP and FTP signature sets.
The x-axis is in log-scale. Note that Figure 5(b) and Figure 5(c) only report the performance of
MDFAs with 2604 and 95 regular expressions, respectively.
pronounced if larger frontiers are to be processed. Since there are a larger number of
HTTP signatures, the frontier for the corresponding NFAs are larger. As a result, NFA-
OBDDs are much faster than the corresponding NFAs for HTTP signatures than for
FTP signatures. Nevertheless, these results clearly demonstrate that OBDDs can im-
prove the time-efﬁciency of NFAs without compromising their space-efﬁciency.
Comparison with the PCRE package. We compared the performance of NFA-
OBDDs with the PCRE package used by a number of tools, including Snort and Perl.
The PCRE package represents regular expressions using a tree structure, and matches
input strings against this structure using a backtracking algorithm. For a given input
string, this algorithm iteratively explores paths in the tree until it ﬁnds an accepting
state. If it fails to ﬁnd an accepting state in one path, it backtracks and tries another path
until all paths have been exhausted.
Figure 5 reports three numbers for the performance of the PCRE package, corre-
sponding to different values of conﬁguration parameters of the package. In both
70
L. Yang et al.
Figure 5(a) and (b), NFA-OBDDs outperform the PCRE package. The throughput of
NFA-OBDDs is about an order of magnitude (9×–26×) better than the fastest conﬁg-
uration of the PCRE package for the set HTTP/1503. The difference in performance
is more pronounced for the set HTTP/2612, where NFA-OBDDs outperform the most
time-efﬁcient PCRE conﬁguration by 248×–554×. The poorer throughput of the PCRE
package for the second set of signatures is likely because the backtracking algorithm
that it employs degrades in performance as the number of paths to be explored in the
NFA increases. However, in both cases, the PCRE package is more space-efﬁcient than
NFA-OBDDs, and consumes between 3.7MB–4MB memory.
For the FTP signatures (Figure 5(c)), NFA-OBDDs are about 2× slower than the
fastest PCRE conﬁguration. However, unlike NFA-OBDDs which report all substrings
of an input packet that match signatures, this PCRE conﬁguration only reports the ﬁrst
matching substring. The performance of the PCRE conﬁgurations that report all match-
ing substrings is comparable to that of NFA-OBDDs.
Note that in all cases, the PCRE package outperforms our NFA implementation,
which use Thompson’s algorithm [13] to parse input strings. Despite this gap in perfor-
mance, Cox [17] shows that Thompson’s algorithm performs more consistently than the
backtracking approach employed by PCRE. For example, the backtracking approach is
vulnerable to algorithmic complexity attacks, where a maliciously-crafted input can
trigger the worst-case performance of the algorithm [18].
Comparison with DFA variants. We compared the performance of NFA-OBDDs
with a variant of DFAs, called multiple DFAs (MDFAs), produced by set-splitting [4].3
An MDFA is a collection of DFAs representing a set of regular expressions. Each DFA
represents a disjoint subset of the regular expressions. To match an input string against
an MDFA, each constituent DFA is simulated against the input string to determine
whether there is a match. MDFAs are more compact than DFAs because they result
in a less than multiplicative increase in the number of states. However, MDFAs are also
slower than DFAs because all the constituent DFAs must be matched against the input
string. An MDFA that has a larger number of constituent DFAs will be more compact,
but will also have lower time-efﬁciency than an MDFA with fewer DFAs.
Using Yu et al.’s algorithms [4], we produced several MDFAs by combining the
Snort signatures in several ways, each with different space/time utilization. Each point
in Figure 5 denotes the performance of one MDFA (again, averaged over all the input
traces), which in turn consists of a collection of combined DFAs as described above.
Producing MDFAs for the HTTP/2612 and FTP/98 signature sets was more challeng-
ing, primarily because these sets contained several structurally-complex regular expres-
sions that were difﬁcult to determinize efﬁciently. For example, they contained several
signatures with large counters (i.e., sequences of repeating patterns) often used in com-
bination with the alternation (i.e., re1|re2) operator. Our determinizer frequently ran
out of memory when attempting to construct MDFAs for such regular expressions. As
an example, consider the following regular expression in HTTP/2612:
/.*\x2FCSuserCGI\x2Eexe\x3FLogout\x2B[ˆ\s]{96}/i
3 We were unable to compare the performance of NFA-OBDDs against DFAs because DFA con-
struction ran out of memory. However, prior work [3] estimates that DFAs may offer through-
puts of about 50 cycles/byte.
Improving NFA-Based Signature Matching Using Ordered Binary Decision Diagrams
71
Our determinizer consumed 1.6GB of memory for this regular expression alone, before
aborting. Producing a DFA for such regular expressions may require more sophisticated
techniques, such as on-the-ﬂy determinization [19] that are not currently implemented
in our prototype. We therefore decided to exclude problematic regular expressions, and
constructed MDFAs with the remaining ones (2604 for HTTP/2612 and 95 for FTP/98).
Note that the MDFAs for these smaller sets of regular expressions may be more time-
efﬁcient and much more space-efﬁcient than corresponding MDFAs for the entire set of
regular expressions.
Figure 5 shows that in many cases NFA-OBDDs can provide throughputs compa-
rable to those offered by MDFAs while utilizing much less memory. For example, the
fastest MDFA in Figure 5(b) (constructed for a subset of 2604 signatures) offered about
50% more throughput than NFA-OBDDs, but consumed 7× more memory. The remain-
ing MDFAs for this signature set had throughputs comparable to those of NFA-OBDDs,
but consumed 270MB more memory than NFA-OBDDs. The performance gap between
NFA-OBDDs and MDFAs was largest for FTP signature set, where the MDFAs (for a
subset of 95 signatures) were about 4× faster than the NFA-OBDD; however, the MD-
FAs consumed 46MB-74MB more memory.
These results are signiﬁcant for two reasons. First, conventional wisdom has long
held that traditional NFAs operate much slower than their deterministic counterparts.
This is supported by our experiments, which show that the time-efﬁciency of NFAs is
three to four orders of magnitude slower than that of MDFAs. However, our results show
that OBDDs can drastically improve the performance of NFAs and even make them
competitive with MDFAs, which are a determinstic variant of ﬁnite automata. We believe
that further enhancements to improve the time-efﬁciency of NFA-OBDDs can make
them operate even faster than MDFAs (e.g., by relaxing the OBDD data structure, and
thereby eliminating several graph operations in the APPLY and RESTRICT operations).
Second, processing the set of regular expressions to produce compact yet performant
MDFAs is a non-trivial exercise, often requiring time-consuming partitioning heuristics
to be applied [4]. Some of the partitioning heuristics described by Yu et al. also require
modiﬁcations to the set of regular expressions, thereby changing their semantics. Our
own experience constructing MDFAs for HTTP/2612 and FTP/98 shows that this pro-
cess is often challenging, especially if the regular expressions contain complex structural
patterns. In contrast, NFA-OBDDs can be constructed automatically in a straightforward
manner from regular expressions, including those with counters and other complex struc-
tural patterns, yet are competitive in performance and more compact than MDFAs.
Finally, we also attempted to compare the performance of NFA-OBDDs with a vari-
ant of DFAs, called hybrid ﬁnite automata (HFA) [20]. HFAs are constructed by inter-
rupting the determinization algorithm when it encounters structurally-complex patterns
(e.g., large counters and .* patterns) that are known to cause memory blowups when
determinized. We used Becchi and Crowley’s implementation [20] in our experiments,
but found that it ran out of memory when trying to construct HFAs from our signature
sets. For example, the HFA construction process exhausted the available memory on
our machine after processing just 106 regular expressions in the HTTP/1503 set.
Deconstructing NFA-OBDD Performance. We further analyzed the performance
of NFA-OBDDs to understand the time consumption of each OBDD operation. The
72
L. Yang et al.
Operation
ANDABSTRACT
AND
MAP
Acceptance check
Fraction
50%
39%
4%
7%
Fig. 6. Fraction of
OBDD operations
time spent performing
Fig. 7. 2-stride NFA for Figure 2
results reported in this section are based upon the ﬁrst set of 1503 signatures; the results
with the other signature sets were similar.
Figure 6 shows the fraction of time that exec nfaobdd spends performing various
OBDD operations as it processes a single input symbol. As discussed earlier,
exec nfaobdd uses the Cudd package to manipulate OBDDs. Although Cudd imple-
ments the OBDD operations described in Section 2, it also implements composite op-
erations that combine multiple Boolean operations; the composite operations are often
more efﬁcient than performing the individual operations separately. ANDABSTRACT is
one such operation, which allows two OBDDs to be combined using an AND operation
followed by an existential quantiﬁcation. ANDABSTRACT takes a list of Boolean vari-
ables to be quantiﬁed, and performs the OBDD transformations needed to eliminate all
these variables. The MAP operation allows variables in an OBDD to be renamed, e.g., it
can be used to rename the y variables in G(y) to x variables instead.
We implemented the Boolean operations required to obtain a new frontier (described
in Section 3) using one set of AND, ANDABSTRACT and MAP operations. Each AND-
ABSTRACT step existentially quantiﬁes 26 Boolean variables (the x and i variables).
To check whether a frontier should be accepted, we used another AND operation to
combine OBDD(F) and OBDD(A); the cost of an acceptance check appears in the last
row of Figure 6.
Figure 6 shows that the cost of processing an input symbol is dominated by the cost
of the ANDABSTRACT and AND operations to compute a new frontier. This is because
the sizes of the OBDDs to be combined for frontier computation are bigger than the OB-
DDs that must be combined to check acceptance. Moreover, computing new frontiers
involves several applications of APPLY and RESTRICT, as opposed to an acceptance
check, which requires only one APPLY, thereby causing frontier computation to domi-
nate the cost of processing an input symbol.
These results suggest that an OBDD implementation that optimizes the ANDAB-