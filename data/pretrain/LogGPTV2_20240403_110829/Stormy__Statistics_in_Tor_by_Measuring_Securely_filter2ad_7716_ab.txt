in 2018-10 at most 48.3% of Tor’s advertised bandwidth is used.
3 SYSTEM MODELS
3.1 Deployment Models
Stormy, our system enabling Tor to securely measure and monitor
itself, can be deployed in two models: (1) the Authority Model
(AuthMode) in which a small set of authorities (e.g. the Direc-
tory Authorities) is dedicated to receiving inputs and performing
the secure computation, and (2) the Relay Model (RelMode) in
which Tor relays themselves are used to perform the secure com-
putation. The advantage of the Authority Model is efficiency. The
Relay Model has the advantage of not requiring bandwidth beyond
that provided already by Tor. Additionally, the Relay Model will
only use Tor’s existing trust assumption that a large fraction of
relays by weight is honest. In contrast, while the Directory Au-
thorities are already entrusted with significant power, using them
as computation parties would give them a new ability to covertly
learn private information about the past. The Relay Model is also
more consistent with designs that decentralize the functions of
the DirAuths [55, 58, 59]. These reasons may justify using the Re-
lay Model of Stormy despite its relative inefficiency.
3.2 Network and Adversary Model
We model the communication network and its hosts based on Tor
as it currently exists. We assume the hosts participating in the
protocols, the hosts’ public keys, and the hosts’ relay weights are
publicly known and agreed upon (all this information is in the Tor
consensus). We further assume that hosts communicate directly
over confidential and authenticated channels, and that maximum
delays between hosts on these channels are known.
The adversary we consider is malicious (i.e. active) and in control
of some Tor hosts. In the Authority Model, we assume at least one
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom617of the authorities is honest. This is similar to (and weaker than)
the existing assumption of an honest majority of DirAuths. In the
Relay Model, we instead assume that the adversary controls relays
with at most 25% of total relay weight. As discussed in Section 2,
this is a commonly-used limit on a reasonable Tor adversary, as
it represents a basic security assumption in Tor. Also, without
it, many of the inputs to Stormy would be observed before any
secure computation even began. Note that we do not assume that
a majority of relays (by number) is honest because this is neither
necessary nor sufficient for the security of Tor itself. We allow the
adversary to passively observe all of the communication channels
between hosts (a threat that Tor itself is actually not secure against).
4 SECURE COMPUTATION PROTOCOLS
Our computation consists of several stages divided between offline
and online phases. The offline phase includes those stages that can
be completed before the inputs are known. Once the inputs are
available, the online phase can begin. We describe the stages in the
Relay Model, as the Authority Modelis a special case in which a
single committee consisting of the authorities runs all components.
First, committees are elected to run different components of
the system (Section 4.1). We sample large enough committees to
ensure (with all but negligible probability) that each committee
has at least one honest participant. Next, a designated committee
generates secret-shared, authenticated, random bits, while the rest
of the committees each run a protocol to generate secret-shared,
authenticated, AND triples. These bits and triples will be used dur-
ing the online phase (Section 4.2). An important feature of this
process is that a triple-generating committee can abort (e.g., due
to host failure) without requiring the other committees to abort.
After enough bits and triples have been generated, the online phase
begins when the relays’ inputs are available. To start it, a desig-
nated committee executes the input-sharing protocol with each
relay, receiving encoded inputs (Section 4.3). An important and
novel feature of this protocol is that it does not allow a malicious
input party to cause the overall computation to fail, while also
preventing malicious committee members from excluding honest
inputs. Finally, the same committee runs the computation protocol
to evaluate a Boolean circuit on the supplied inputs (Section 4.4).
We will show that each protocol run by a committee is secure
against a malicious adversary as long as at least one committee
member is honest. Moreover, we prove in the Relay Model that
the composed system is secure against an adversary that controls
a fraction f < 1 of the total bandwidth. Composed security in the
Authority Model holds following similar arguments assuming at
least one authority is honest.
Our protocols follow the paradigm for secure computation of
computing on authenticated shares. In the following protocol de-
scriptions, we denote the global MAC key by ∆. We denote a value
v that is additively secret-shared among a set of parties C as [v]C ;
v(i) denotes Pi ’s share of [v]C for Pi ∈ C. We indicate a value v and
its MAC µ = ∆v that have been secret-shared among C as [[v]]C
(i.e. [[v]]C = ([v]C , [µ]C)). We often omit the subscript when the
set C is clear from context. We denote by [[x]](i) the shares party
Pi has of x and its MAC µ, that is, [[x]](i) = (cid:0)x(i), µ(i)(cid:1). We use H to
denote a cryptographic hash function. We use x ← S to indicate
that x is chosen uniformly at random from S. Finally, we let λ de-
note a statistical security parameter and κ denote a computational
security parameter. These are set to 40 and 256 respectively in our
experiments.
4.1 Committee Election
We describe how committees are elected in the Relay Model.
4.1.1 Generating Randomness. All parties begin by agreeing on a
random string, which they will use to locally run the committee-
assignment algorithm described below. To securely obtain unbiased
random bits for committee election, we use the randomness already
generated by the Directory Authorities and included in the consen-
suses [7]. The security of this randomness relies on the assumption
that a majority of the DirAuths are honest. Using this assumption
for secure computation on network data does increase the conse-
quences of violating it, including in particular a new power to reveal
information about the activity in the network from before the point
of compromise. To avoid relying on the randomness generated
by the Directory Authorities, the relays themselves may perform
commit-reveal randomness generation using a consensus protocol
suitable for large distributed systems (i.e. with low-communication
complexity and responsiveness to latency [57, 71]).
4.1.2 Committee Assignments. We use the securely-generated shared
randomness to elect a set of committees to perform the secure com-
putation. Two types of committees are used: (1) Triple Committees
(TCs) that generate AND triples during the offline phase, and (2)
Computation Committees (CCs) that generate authenticated ran-
dom bits offline and perform the online computation. All relays
know the committees because they are generated locally from the
shared randomness and using the same consensus document (see
Section 5 for further discussion). The committees are used for all
computations within a given time period, after which new commit-
tees are selected using fresh shared randomness.
We wish to choose committees such that, with probability at
least 1−2−λ , all of them have at least one honest member. To accom-
plish this, we fix a committee size c and then select each committee
independently by choosing c members at random (with replace-
ment) with probability proportional to their consensus weights.
Since we sample committee members with replacement, parties
may be selected onto multiple committees, and the parties with
more bandwidth will be assigned to more committees. We sample
a large number mTC of Triple Committees, many of which will
be used in parallel to exploit Tor’s available bandwidth. We also
sample a smaller number mCC of Computation Committees, of
which we will only use one at a time, but keep several in reserve to
recover from node failures. For now, we focus on the case where
only one Computation Committee is used; see Section 5 for how
multiple committees are used. Let m = mTC + mCC. Then, using
Tor’s security assumption that the adversary controls at most a
small fraction f of the network bandwidth, we have the following
claim.
Claim 1. If m committees are sampled, and each is of size c =
⌈(λ + log2(m))/ log2(1/f )⌉, then the probability that some committee
contains c malicious parties is at most 2−λ .
Proof. Since each party is sampled independently, the proba-
bility that a committee of size c is entirely malicious is f c . Using
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom618s.t. for all j, Pk ∈TCj
∆(i)(k) = ∆(i).
b. Send ∆(i)(k) to Pk . Let ∆(k) = Pi ∈CC
share of the MAC key ∆ held by Pk ∈ TCj .
∆(i)(k) be the
Protocol ΠPre
Notation:
• Let CC be the Computation Committee.
• Let TC1, . . . , TCmTC be the Triple Committees.
Initialize:
1. Generate ∆ and ∆j : Each Pi ∈ CC chooses ∆(i) ← F
defining global MAC key ∆ = c
generates ∆j ← F2κ .
a. For each TCj and each Pk ∈ TCj , choose ∆(i)(k) ← F
2. Transfer ∆: Each party Pi ∈ CC does the following:
2λ ,
∆(i). Each TCj similarly
i =1
2λ
Random(F, b):
1. Generate random bits: If F = F2, each Pi ∈ CC calls
ΠaShare(cid:0)∆(i), b(cid:1) and aborts if this call aborts. CC receives
bits ([[r1]] . . . [[rb]]) as output.
2λ , each Pi ∈ CC
calls ΠaShare(cid:0)∆(i), b λ(cid:1) and aborts if this call aborts. CC re-
ceives bits ([[r1]] . . . [[rb λ]]) as output and combines each
consecutive λ bits to produce F
2λ elements ([[s1]] . . . [[sb]]).
2λ elements: If F = F
2. Generate random F
Triples(ℓ): (Let TCj be the TC calling the protocol.)
1. Generate triples: Each Pi ∈ TCj runs ΠaAND(cid:0)∆(i)j
, ℓ(cid:1), and
then, for each value in the resulting triples, Pi executes
ΠMACSwitch with ∆(i)j
and ∆(i) and produces triple shares
(cid:0)[[xk]](i), [[yk]](i), [[zk]](i)(cid:1), 1 ≤ k ≤ ℓ. If the call to ΠaAND
aborts, Pi informs each Pj ∈ CC and aborts.
2. Transfer triples: For each triple component [[w]](i) held by a
h ← F2κ ,1 ≤ h ≤ c − 1, sends zi =
h) to Qi ∈ CC, and sends each s i
CC computes
Pi ∈ TCj :
a. Pi chooses s i
[[w]](i) c−1
to a distinct remaining Pk ∈ CC.
∈
zk h,k PRG(s h
k ).
3. Check triples: Each Pi ∈ CC calls ΠMACCheck with ∆ and the
set of all triple component shares [[w]](i). If the call aborts,
Pi informs each Pk ∈ TCj , causing each Pk ∈ TCj to abort,
and Pi rejects this and future triple transfers from TCj .
h =1 PRG(s i
b. Each Pk
[[w]](k)
h
=
Figure 1: Protocols for offline preprocessing.
a union bound over m committees, we require that m f c ≤ 2−λ .
Solving for c yields the claim.
4.2 Offline Preprocessing Protocols
The offline preprocessing protocols provide authenticated secret-
shared random bits and AND triples. A random bit is needed for
each input bit in the circuit, and a triple is needed for each AND gate
in the circuit. Therefore, the preprocessing protocols can provide
sufficient bits and triples for the online computation knowing only
upper bounds on the number of input bits and the number of AND
gates in the circuit.
The preprocessing protocols make use of the ΠaShare and ΠaAND
protocols of Wang et al. (Figures 15 and 18 of [68], respectively).
These protocols produce pairwise authenticated shared bits. We
denote a bit x authenticated and shared in this way as ⟨x⟩C ,∆, where
C is the group holding the shares, and ∆ ∈ F2κ is the MAC key used
for authentication. We omit the C or ∆ subscript when it is clear
from the context. Under the pairwise authentication, the bit value
is shared as [x]C , and, for each Pi , Pj , Pi holds an authentication
tag Mj[x(i)] ∈ F2κ on its share x(i) under a key Kj[x(i)] ∈ F2κ
held by Pj . The key is uniformly random (i.e. Kj[x(i)] ← F2κ ), and
the authentication tag is produced such that Mj[x(i)] = Kj[x(i)] +
x(i)∆(j). We denote the share of ⟨x⟩ held by Pi as ⟨x⟩(i), that is,
⟨x⟩(i) = (cid:0)x(i), (cid:8)Mj[x(i)], Ki[x(j)](cid:9) j ,i(cid:1). A pairwise-authenticated
value ⟨x⟩ can easily be turned into a globally-authenticated value
[[x]] under the first λ bits of ∆. To do so, each party Pi sets its global
MAC share µ(i) to the first λ bits of x(i)∆(i) + j ,i (cid:0)Mj[x(i)] +
Ki[x(j)](cid:1).
The preprocessing protocols are given as subprotocols of the com-
bined preprocessing protocol ΠPre, shown in Figure 1. ΠPre is run
by the Computation Committee (CC) and the Triple Committees
(TC1, . . . , TCmTC). We will show that ΠPre realizes the functional-
ity FPre (Figure 6 in Appendix A). The ΠPre subprotocols work as
follows:
Initialize. CC initially generates the global MAC key ∆ and
4.2.1
distributes shares of it to each TCi .
4.2.2 Random. This protocol is run by the CC to generate secret-
2λ . It uses ΠaShare
shared, random, authenticated elements in F2 or F
to generate random bits. To instead generate an element of F
2λ ,
it uses the technique of Keller et al. [49] to combine λ random
bits. The protocol takes as input a field F and the number b of
random field elements to produce. It outputs to CC the secret-
shared authenticated random field elements ([[r1]]CC, . . . , [[rb]]CC).
4.2.3 Triples. The protocol is run by CC and a TCj . It takes as
input the number ℓ of triples to produce. It outputs to CC ℓ triples
([[x]]CC, [[y]]CC, [[z]]CC), where x, y, z, ∈ F2 and x ∧ y = z. TCj runs
the ΠaAND protocol to generate triples. However, our use of that
protocol raises an issue that we must address. Specifically, ΠaAND
allows a selective failure attack wherein A can learn a few bits
of the MAC key ∆. Wang et al. can deal with this by using the
randomness extraction technique of Nielsen et al. [60]. However,
the situation is more challenging for us because we need to allow for
offline committees to abort without halting the overall computation.
If they all use the same global ∆, then each offline committee could
attempt to learn some bits of ∆, and even if some are detected, the
computation would proceed despite a large leakage of ∆ overall.
We make an important addition to ΠaAND to allow a triple com-
mittee to abort without leaking any bits of the global MAC key ∆,
thus allowing the other committees to continue. We achieve this by
first having each TCj generate authenticated triples using its own
MAC key ∆j . Then each committee calls ΠMACSwitch (Figure 2) on
each triple to change the authentication tags to be under the global
∆. This protocol uses the MAC switch technique of Wang et al. [68]
(Step 5, Figure 8 of [68]). Because different keys are used by each
committee, the leakage cannot accumulate across committees, and
so the randomness extraction in ΠaAND prevents leaking any bits
of ∆. If the ΠaAND call aborts, each member of TCj informs each
member of CC, and then TCj aborts.
Session 3C: Secure Computing IICCS ’19, November 11–15, 2019, London, United Kingdom619Protocol ΠMACSwitch
Protocol ΠMACCheck
Notation:
• Let C = {P1, . . . , Pc } be the committee executing the pro-
•
•
•
tocol.
[∆1]C ∈ F2κ is input as the current MAC key.
2λ is input as the desired MAC key.
[∆2]C ∈ F
⟨x ⟩C, ∆1 , x ∈ F2, is input as the value on which to perform
the MAC switch.
Protocol:
1. For each Pi , Pj ∈ C, Pi , Pj :
H (cid:0)Ki[x(j)] ⊕ ∆(i)1 (cid:1) ⊕ K′
a. Pi computes K′
b. Pi sends Ui , j to Pj .
i[x(j)] = H (cid:0)Ki[x(j)](cid:1) and Ui , j =
i[x(j)] ⊕ ∆(i)2 .
2. Pj computes M′
3. The
output
i[x(j)] = x(j)Ui , j ⊕ H (cid:0)Mi[x(j)](cid:1).
to
C is
(cid:0)x(i), (cid:8)K′
i[x(j)], M′
∈
Pi
j[x(i)](cid:9) j ,i(cid:1).
⟨x ⟩(i)C ,∆2
=
Figure 2: MAC switching protocol.
1