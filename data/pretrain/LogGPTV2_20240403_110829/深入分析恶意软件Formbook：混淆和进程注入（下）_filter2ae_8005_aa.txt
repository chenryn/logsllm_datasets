# 深入分析恶意软件Formbook：混淆和进程注入（下）
|
##### 译文声明
本文是翻译文章，文章原作者 RÉMI JULLIAN，文章来源：thisissecurity.stormshield.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
传送门：[深入分析恶意软件Formbook：混淆和进程注入（上）](https://www.anquanke.com/post/id/103403)
Formbook是用C语言和x86汇编语言编写的窗体捕获和窃取的恶意软件。这是一个已经准备售卖的恶意软件，可以被任何不具备恶意软件开发技能的犯罪分子所使用。在通过邮件分发Formbook样本的期间，我们捕获到一个Word文档样本，并作为本文的分析样本。我们使用了基于云的沙盒引擎Breach
Fighter（ 
）对该样本进行了捕获，并且使用该引擎对样本文件进行了分析。在上篇文章中，我们重点分析了该恶意软件的动态函数加载过程，以及其具有的反调试、反分析技巧。在下篇中，我们对该恶意软件如何进行进程注入展开详细的分析。
## 三、进程注入
在本章中，我们将重点关注Formbook是如何执行其进程注入过程，以便在属于Microsoft的进程中进行迁移。为了简化这一问题，我们假定Formbook是在32位版本的Windows上运行。如前文所说，Formbook可以从运行在WOW64模式下的32位进程迁移到本地64位进程，但这也意味着需要修改.text段中的很多地方。我们此前分析的窗体捕获恶意软件（
）使用了一个常用的方法，该软件使用WriteProcessMemory()和CreateRemoteThread()来注入目标进程。而在这里，Formbook使用了另一种不太常见的方法，可以归纳为3个阶段：  
1、Explorer主线程劫持和APC注入；  
2、Explorer劫持的线程或注入的APC创建一个挂起的进程；  
3、在新创建的挂起态进程中实现迁移（借助进程镂空Process Hollowing技术）。  
这种方法的主要优点在于，在Explorer的进程中没有创建新的线程，并且新创建的挂起态进程的父进程是Explorer。
###  3.1 劫持Explorer主线程
####  3.1.1 调整进程权限
Formbook会对Explorer的进程执行一些操作，例如映射进程地址空间内的代码段，或挂起/恢复其主线程。由于Explorer进程使用与当前登录用户相同的用户账户运行，所以Formbook不需要额外的权限就能够执行类似调试的操作。事实上，如果对非系统进程进行调试，是没有必要授予或启用SeDebugPrivilege的。然而，恶意软件作者好像没有意识到这一点，为了启用SeDebugPrivilege，Formbook更新了其权限。为此，它使用NtOpenProcessToken()获取自己进程的句柄，然后使用ConvertSidToSidW()和NtAdjustTokenPrivileges()函数。恶意软件不会检查其权限是否已经成功更新，无论如何都会继续执行。
###  3.1.2 在Formbook的地址空间内映射修补后的Image Base
Formbook按照以下步骤，将其运行进程的副本映射到其自身的地址空间中：  
1、使用NtCreateSection()创建一个新节，其大小为Formbook的SizeOfCode + SizeOfHeaders；  
2、使用NtMapViewOfSection()在地址空间内映射此节；  
3、将Formbook基地址的标题复制到新映射部分（SizeOfHeaders字节）；  
4、将Formbook基地址+ SizeOfHeaders中的代码复制到新映射部分（SizeOfCode字节）。  
作为一种反取证技术，新映射部分的头部会被随机32位整数的SHA-1值覆盖。因此，Formbook的PE头部不会在镂空过程的地址空间中出现，也不会在这些进程中映射。然而，在一个我们称之为get_base_address_from_text()的函数中出现了一些问题，该函数尝试在内存中找到字符串“This
program cannot”以及MZ头部，以此来检索Formbook的基地址。  
因此，我们可以通过修补来自get_base_address_from_text()函数的指令来保存随机值，以便通过在内存中搜索预期SHA-1值得方法来查找PE基地址。要将这些修补内容应用在get_base_address_from_text()函数上，我们就要使用“Egg
Hunting”技术在整个映射部分上执行循环，从而找到字节序列“40 41 49 48 B8 88”：  
在修补之前，我们可以从函数get_base_address_from_text()中找到如下指令：
    .text:00417D91 40                    inc     eax
    .text:00417D92 41                    inc     ecx
    .text:00417D93 49                    dec     ecx
    .text:00417D94 48                    dec     eax
    .text:00417D95 B8 88 88 88 88        mov     eax, 888888888 ; patched immediate value
    ..
    .text:00417DA1 89 45 FC              mov     [ebp+patched_imm], eax
    ..
    ;; if eax equals 0x88888888 (not patched) search for 'This program cannot'
    ;; otherwise use eax to computes its SHA-1 and search for this value
    .text:00417DA9 81 7D FC 88 88+       cmp     [ebp+patched_imm], 88888888h;
    ..
    .text:00417DB2 74 4B                 jz      short loc_417DFF
由于Hex-Rays反编译器无法猜测将要被修补的字节码，因此它会将cmp指令评估为True，因此不会预测错误分支：
###  3.1.3 找到explorer.exe的PID和主线程ID
在修补完成后，Formbook尝试使用与检查运行进程是否匹配黑名单相同的方法，来查找explorer的PID和主线程ID。该过程会使用SystemProcessInformation类的NtQuerySystemInformation()函数，遍历每个SYSTEM_PROCESS_INFORMATION条目，计算进程映像名称的哈希值，直到找到与“explorer.exe”相关的哈希值。
###  3.1.4 劫持explorer.exe的主线程和APC注入
在检索explorer.exe的PID之后，Formbook将会检索该进程的一个句柄，这一过程用到了NtOpenProcess()函数并会进行如下所需的访问：  
PROCESS_VM_OPERATION  
PROCESS_VM_READ  
PROCESS_VM_WRITE  
PROCESS_QUERY_INFORMATION  
随后，它就可以在explorer.exe地址空间内映射修补后的代码部分。这个新映射部分将用于在Explorer的主线程中执行Formbook代码，以及在Formbook和explorer进程之间提供一个共享的缓冲区。  
使用NtOpenThread()可以获得explorer主线程的句柄，在这里需要以下访问权限：  
THREAD_SUSPEND_RESUME  
THREAD_GET_CONTEXT  
THREAD_SET_CONTEXT  
至此，Formbook可以使用NtSuspendThread()挂起explorer.exe的主线程，并使用NtGetContextThread()在CONTEXT结构中检索它的指令指针。  
然后，另一个补丁会应用在explorer执行的Formbook代码段之中。未修补的指令如下所示：
    .text:00041C17 68 88 88 88 88        push    88888888h            ; patched with CONTEXT.Eip
    .text:00041C1C 60                    pusha
    .text:00041C1D E8 1E 03 00 00        call    formbook_main_explorer32_hijacked
    .text:00041C22 61                    popa
    .text:00041C23 C3                    retn    ; end of the shellcode execution, return to CONTEXT.Eip
该修补内容中包括用前面从CONTEXT结构中提取的Eip字段替换立即值（Immediate
Value）0x88888888。这是用于保存explorer.exe指令的指针，以便在Formbook代码执行结束时对其进行恢复。正如我们所见，对formbook_main_explorer32_hijacked()的调用被pusha和popa指令所包围，这样一来当explorer的进程检索其寄存器值时，就不会发现其线程已经被劫持。  
通过添加到explorer.exe并在其进程地址空间中搜索这段代码，我们可以发现修补内容如下：
在应用修补内容之后，会调用NtSetContextThread()以更新Explorer的主线程指令指针，目前该指针已经被我们控制，指向了Explorer中的Formbook代码。此时，线程仍处于挂起状态。然后，在调用formbook_main_explorer32_hijacked()之前，通过调用NtQueueApcThread()来注入APC，并将到用户APC例程的入口点指向pusha指令。这个过程是非常完美的，因为同一段代码被两个上下文调用，一个来自于劫持的线程，另一个来自注入的APC例程。  
最后，执行对NtResumeThread()的调用。  