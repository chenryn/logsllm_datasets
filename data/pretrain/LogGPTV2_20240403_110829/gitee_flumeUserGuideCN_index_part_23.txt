以下是可选的参数
  选项             解释
  ---------------- ------------------------------------------
  h/help           显示帮助信息
  **l/dataDirs**   校验工具会校验的目录列表，多个用逗号分隔
### Event校验工具
Event验证器工具可用于按照预定好的逻辑验证文件channel中的Event。
该工具会在每个Event上执行用户自定义的验证逻辑，并删除不符合校验逻辑的Event。
::: hint
::: title
Hint
:::
简单说就是一个自定义的Event校验器，只能用于验证文件channel中的Event。实现的方式就是实现
EventValidator 接口，没有被校验通过的Event会被丢弃。
多bb一句：目前还没想到这个工具有哪些用途，感觉可以用自定义拦截器来实现这种功能，说起拦截器又很奇怪在拦截器章节中居然没有介绍自定义拦截器。
:::
这个工具可以通过下面这种方式开启：
``` none
$bin/flume-ng tool --conf ./conf FCINTEGRITYTOOL -l ./datadir -e org.apache.flume.MyEventValidator -DmaxSize 2000
```
datadir 是即将被校验的用逗号分隔的目录列表。
以下是可选的参数
  选项               解释
  ------------------ ---------------------------------------------------------------------
  h/help             显示帮助信息
  **l/dataDirs**     校验工具会校验的目录列表，多个用逗号分隔
  e/eventValidator   自定义验证工具类的全限定类名，这个类的jar包必须在Flume的classpath中
自定义的Event验证器必须实现 *EventValidator*
接口，建议不要抛出任何异常。其他参数可以通过-D选项传递给EventValitor实现。
让我们看一个基于简单的Event大小验证器的示例，它将拒绝大于指定的最大size的Event。
``` java
public static class MyEventValidator implements EventValidator {
  private int value = 0;
  private MyEventValidator(int val) {
    value = val;
  }
  @Override
  public boolean validateEvent(Event event) {
    return event.getBody() <= value;
  }
  public static class Builder implements EventValidator.Builder {
    private int sizeValidator = 0;
    @Override
    public EventValidator build() {
      return new DummyEventVerifier(sizeValidator);
    }
    @Override
    public void configure(Context context) {
      binaryValidator = context.getInteger("maxSize");
    }
  }
}
```
## 拓扑设计注意事项
Flume非常灵活，可以支持大量的部署方案。如果你打算在大型生产部署中使用Flume，建议你花些时间来思考如何拓扑Flume来解决你的问题。本小节会介绍一些注意事项。
### Flume真的适合你吗？
如果你需要将文本日志数据提取到Hadoop /
HDFS中，那么Flume最合适不过了。但是，对于其他情况，你最好看看以下建议：
Flume旨在通过相对稳定，可能复杂的拓扑部署来传输和收集定期生成的Event数据。"Event数据"定义非常广泛，对于Flume来说一个Event就是一个普通的字节数组而已。
Event大小有一些限制，它不能比你的内存或者服务器硬盘还大，实际使用中Flume
Event可以是文本或图片的任何文件。关键的是这些Event应该是以连续的流的方式不断生成的。
如果你的数据不是定期生成的（比如你将大量的数据批量加载到Hadoop集群中），虽然Flume可以做这个事情，但是有点"杀鸡用牛刀"的感觉，这并不是Flume所擅长和喜欢的工作方式。
Flume喜欢相对稳定的拓扑结构，但也不是说永远一成不变，Flume可以处理拓扑中的更改而又不丢失数据，还可以处理由于故障转移或者配置的定期重新加载。如果你的拓扑结构每天都会变动，
那么Flume可能就无法正常的工作了，毕竟重新配置也是需要一定思考和开销的。
::: hint
::: title
Hint
:::
可以这样理解，Flume就像一个高速公路收费站，适合干那种例行性、重复的工作，别今天还全是人工收费出口，明天加一个ETC出口，后天就全改成ETC出口，
大后天又改回大部分人口收费出口，计费又不准导致大家有ETC也不敢用，整个系统的吞吐能力不升反降，这样的情况就别用Flume了\[doge\]，
不要总是变来变去，虽然Flume具备一些"随机应变"能力，但是也别太频繁了。
:::
### Flume中数据流的可靠性
Flume
流的可靠性取决于几个因素，通过调整这几个因素，你可以自定这些Flume的可靠性选项。
1.  **使用什么类型的channel。**
    Flume有持久型的channel（将数据保存在磁盘上的channel）和非持久化的channel（如果机器故障就会丢失数据的channel）。持久化的channel使用基于磁盘的存储，存储在这类channel中的数据不受机器重启或其他非磁盘故障影响。
2.  **channel是否能充分满足工作负载。**
    channel在Flume中扮演了数据流传输的缓冲区，这些缓冲区都有固定容量，一旦channel被占满后，就会将压力传播到数据流的前面节点上。如果压力传播到了source节点上，此时Flume将变得不可用并且可能丢失数据。
3.  **是否使用冗余拓扑。**
    冗余的拓扑可以复制数据流做备份。这样就提供了一个容错机制，并且可以克服磁盘或者机器故障。
在设计一个可靠的Flume拓扑时最好的办法就是把各种故障和故障导致的结果都提前想到。如果磁盘发生故障会怎么样？如果机器出现故障会怎么样？如果你的末端sink（比如HDFS
sink）挂掉一段时间遭到背压怎么办？拓扑的设计方案多种多样，但是能想到的常见问题也就这么多。
### Flume拓扑设计
拓扑设计第一步就是要确定要使用的 source 和
sink（在数据流中最末端的sink节点）。这些确定了你Flume拓扑集群的边缘。下一个要考虑的因素是是否引入中间的聚合层和Event路由节点。
如果要从大量的source中收集数据，则聚合数据以简化末端Sink的收集挺有帮助的。
聚合层还可以充当缓冲区来缓解突发的 source 流量 和 sink
的不可用情况。如果你想路由不同位置间的数据，你可能还希望在一些点来分割流：这样就会创建本身包含聚合点的子拓扑。
### 计算Flume部署所需要的节点
一旦你对自己如何拓扑部署Flume集群节点有了大致的方案，下一个问题就是需要多少硬件和网络流量。首先量化你会产生多少要收集的数据，这个不太好计算，因为大多数情况下数据都是突发性的（比如由于昼夜交换）并且可能还不太好预测。
我们可以先确定每个拓扑层的最大吞吐量，包括每秒Event数、每秒字节数，一旦确定了某一层的所需吞吐量，就可以计算这一层所需的最小节点数。要确定可达到的吞吐量，最好使用合成或采样Event数据在你的硬件上测试Flume。通常情况下，
文件channel能达到10MB/s的速率，内存channel应该能达到100MB/s或更高的速率，不过硬件和操作系统不同，性能指标也会有一些差异。
计算聚合吞吐量可以确定每层所需最小节点数，需要几个额外的节点，比如增加冗余和处理突发的流量。
## 故障排除
### 处理Agent失败
如果Flume的Agent挂掉，则该Agent上托管的所有流都将中止。
重新启动Agent后，这些流将恢复。
使用文件channel或其他可靠channel的流将从中断处继续处理Event。
如果无法在同一硬件上重新启动Agent，则可以选择将数据库迁移到另一个硬件并设置新的Flume
Agent， 该Agent可以继续处理db中保存的Event。
利用数据库的高可用特性将Flume Agent转移到另一个主机。
### 兼容性
#### HDFS
Flume目前支持HDFS 0.20.2 和 0.23版本。
#### AVRO
待完善。（不是没翻译，是原文档上就没有）
#### Additional version requirements
待完善。（不是没翻译，是原文档上就没有）
### Tracing
待完善。（不是没翻译，是原文档上就没有）
### More Sample Configs
待完善。（不是没翻译，是原文档上就没有）
## 内置组件
::: hint
::: title
Hint
:::
基本上你能想到的常见的数据来源（source）与目的地（sink）Flume都帮我们实现了，下表是Flume自带的一些组件和它们的别名，这个别名在实际使用的时候非常方便。看一遍差不多也就记住了，记不住也没关系，知道大概有哪些就行了。
这些别名不区分大小写。
:::
  组件接口                                                        别名                  实现类
  --------------------------------------------------------------- --------------------- -----------------------------------------------------------------------
  org.apache.flume.Channel                                        memory                org.apache.flume.channel.MemoryChannel
  org.apache.flume.Channel                                        jdbc                  org.apache.flume.channel.jdbc.JdbcChannel
  org.apache.flume.Channel                                        file                  org.apache.flume.channel.file.FileChannel
  org.apache.flume.Channel                                        \--                   org.apache.flume.channel.PseudoTxnMemoryChannel
  org.apache.flume.Channel                                        \--                   org.example.MyChannel
  org.apache.flume.Source                                         avro                  org.apache.flume.source.AvroSource
  org.apache.flume.Source                                         netcat                org.apache.flume.source.NetcatSource
  org.apache.flume.Source                                         seq                   org.apache.flume.source.SequenceGeneratorSource
  org.apache.flume.Source                                         exec                  org.apache.flume.source.ExecSource
  org.apache.flume.Source                                         syslogtcp             org.apache.flume.source.SyslogTcpSource
  org.apache.flume.Source                                         multiport_syslogtcp   org.apache.flume.source.MultiportSyslogTCPSource
  org.apache.flume.Source                                         syslogudp             org.apache.flume.source.SyslogUDPSource
  org.apache.flume.Source                                         spooldir              org.apache.flume.source.SpoolDirectorySource
  org.apache.flume.Source                                         http                  org.apache.flume.source.http.HTTPSource
  org.apache.flume.Source                                         thrift                org.apache.flume.source.ThriftSource
  org.apache.flume.Source                                         jms                   org.apache.flume.source.jms.JMSSource
  org.apache.flume.Source                                         \--                   org.apache.flume.source.avroLegacy.AvroLegacySource
  org.apache.flume.Source                                         \--                   org.apache.flume.source.thriftLegacy.ThriftLegacySource
  org.apache.flume.Source                                         \--                   org.example.MySource
  org.apache.flume.Sink                                           null                  org.apache.flume.sink.NullSink
  org.apache.flume.Sink                                           logger                org.apache.flume.sink.LoggerSink
  org.apache.flume.Sink                                           avro                  org.apache.flume.sink.AvroSink
  org.apache.flume.Sink                                           hdfs                  org.apache.flume.sink.hdfs.HDFSEventSink
  org.apache.flume.Sink                                           hbase                 org.apache.flume.sink.hbase.HBaseSink
  org.apache.flume.Sink                                           hbase2                org.apache.flume.sink.hbase2.HBase2Sink
  org.apache.flume.Sink                                           asynchbase            org.apache.flume.sink.hbase.AsyncHBaseSink
  org.apache.flume.Sink                                           elasticsearch         org.apache.flume.sink.elasticsearch.ElasticSearchSink
  org.apache.flume.Sink                                           file_roll             org.apache.flume.sink.RollingFileSink
  org.apache.flume.Sink                                           irc                   org.apache.flume.sink.irc.IRCSink
  org.apache.flume.Sink                                           thrift                org.apache.flume.sink.ThriftSink
  org.apache.flume.Sink                                           \--                   org.example.MySink
  org.apache.flume.ChannelSelector                                replicating           org.apache.flume.channel.ReplicatingChannelSelector
  org.apache.flume.ChannelSelector                                multiplexing          org.apache.flume.channel.MultiplexingChannelSelector
  org.apache.flume.ChannelSelector                                \--                   org.example.MyChannelSelector
  org.apache.flume.SinkProcessor                                  default               org.apache.flume.sink.DefaultSinkProcessor
  org.apache.flume.SinkProcessor                                  failover              org.apache.flume.sink.FailoverSinkProcessor
  org.apache.flume.SinkProcessor org.apache.flume.SinkProcessor   load_balance \--      org.apache.flume.sink.LoadBalancingSinkProcessor
  org.apache.flume.interceptor.Interceptor                        timestamp             org.apache.flume.interceptor.TimestampInterceptor\$Builder
  org.apache.flume.interceptor.Interceptor                        host                  org.apache.flume.interceptor.HostInterceptor\$Builder
  org.apache.flume.interceptor.Interceptor                        static                org.apache.flume.interceptor.StaticInterceptor\$Builder
  org.apache.flume.interceptor.Interceptor                        regex_filter          org.apache.flume.interceptor.RegexFilteringInterceptor\$Builder
  org.apache.flume.interceptor.Interceptor                        regex_extractor       org.apache.flume.interceptor.RegexFilteringInterceptor\$Builder
  org.apache.flume.channel.file.encryption.KeyProvider\$Builder   jceksfile             org.apache.flume.channel.file.encryption.JCEFileKeyProvider
  org.apache.flume.channel.file.encryption.KeyProvider\$Builder   \--                   org.example.MyKeyProvider
  org.apache.flume.channel.file.encryption.CipherProvider         aesctrnopadding       org.apache.flume.channel.file.encryption.AESCTRNoPaddingProvider
  org.apache.flume.channel.file.encryption.CipherProvider         \--                   org.example.MyCipherProvider
  org.apache.flume.serialization.EventSerializer\$Builder         text                  org.apache.flume.serialization.BodyTextEventSerializer\$Builder
  org.apache.flume.serialization.EventSerializer\$Builder         avro_event            org.apache.flume.serialization.FlumeEventAvroEventSerializer\$Builder
  org.apache.flume.serialization.EventSerializer\$Builder         \--                   org.example.MyEventSerializer\$Builder
## 配置命名约定
本文档之前给出的例子都按照下面的别名规范来命名，以使所有示例中的名称保持简短和一致。
::: hint
::: title
Hint
:::
前面的每个配置范例里面的Agent都叫做a1，就是遵循了下表的约定。
:::
  别名   代表组件
  ------ -----------------
  a      **a**gent
  c      **c**hannel
  r      sou**r**ce
  k      sin**k**
  g      sink **g**roup
  i      **i**nterceptor
  y      ke**y**
  h      **h**ost
  s      **s**erializer
::: hint
::: title
Hint
:::
下表示译者加的，1.9新增的 [配置文件过滤器](#配置文件过滤器)
这个功能的范例中使用的命名是f，猜测可能因为Flume官方文档不是一个人维护，写某一小节文档的人一时也没想起来要将别名列在这里。
:::
  别名   代表组件
  ------ ---------------------------
  f      Configuration **F**ilters