  and     ebx, -16 
  mov     DWORD PTR [esp+20], 3 
  mov     DWORD PTR [esp+16], 2 
  mov     DWORD PTR [esp+12], 1 
  mov     DWORD PTR [esp+8], OFFSET FLAT:.LC0  ; "hi! %d, %d, %d\n" 
  mov     DWORD PTR [esp+4], 600 
  mov     DWORD PTR [esp], ebx 
  mov     eax, DWORD PTR gs:20;  
  mov     DWORD PTR [ebp-12], eax 
  xor     eax, eax 
  call    _snprintf 
  mov     DWORD PTR [esp], ebx 
  call    puts 
  mov     eax, DWORD PTR [ebp-12] 
  xor     eax, DWORD PTR gs:20；  
  jne     .L5 
  mov     ebx, DWORD PTR [ebp-4] 
  leave 
  ret 
.L5: 
  call    __stack_chk_fail 
随机值位于 gs:20。在函数启动的时候，程序在栈里写入这个百灵鸟，并且在函数退出之前检测它是否
异步社区会员 dearfuture(15918834820) 专享 尊重版权
236 
逆向工程权威指南（上册） 
发生了变化、是否与 gs:20 一致。如果其值发生了变化，将会调用__stack_chk_fail，在 Ubuntu 13.04 x86 下，
我们会在控制台看见下述报错信息： 
*** buffer overflow detected ***: ./2_1 terminated 
======= Backtrace: ========= 
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x63)[0xb7699bc3] 
/lib/i386-linux-gnu/libc.so.6(+0x10593a)[0xb769893a] 
/lib/i386-linux-gnu/libc.so.6(+0x105008)[0xb7698008] 
/lib/i386-linux-gnu/libc.so.6(_IO_default_xsputn+0x8c)[0xb7606e5c] 
/lib/i386-linux-gnu/libc.so.6(_IO_vfprintf+0x165)[0xb75d7a45] 
/lib/i386-linux-gnu/libc.so.6(__vsprintf_chk+0xc9)[0xb76980d9] 
/lib/i386-linux-gnu/libc.so.6(__sprintf_chk+0x2f)[0xb7697fef] 
./2_1[0x8048404] 
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf5)[0xb75ac935] 
======= Memory map: ======== 
08048000-08049000 r-xp 00000000 08:01 2097586 /home/dennis/2_1 
08049000-0804a000 r--p 00000000 08:01 2097586 /home/dennis/2_1 
0804a000-0804b000 rw-p 00001000 08:01 2097586 /home/dennis/2_1 
094d1000-094f2000 rw-p 00000000 00:00 0         ［heap］ 
b7560000-b757b000 r-xp 00000000 08:01 1048602 /lib/i386-linux-gnu/libgcc_s.so.1 
b757b000-b757c000 r--p 0001a000 08:01 1048602 /lib/i386-linux-gnu/libgcc_s.so.1 
b757c000-b757d000 rw-p 0001b000 08:01 1048602 /lib/i386-linux-gnu/libgcc_s.so.1 
b7592000-b7593000 rw-p 00000000 00:00 0 
b7593000-b7740000 r-xp 00000000 08:01 1050781 /lib/i386-linux-gnu/libc-2.17.so 
b7740000-b7742000 r--p 001ad000 08:01 1050781 /lib/i386-linux-gnu/libc-2.17.so 
b7742000-b7743000 rw-p 001af000 08:01 1050781 /lib/i386-linux-gnu/libc-2.17.so 
b7743000-b7746000 rw-p 00000000 00:00 0 
b775a000-b775d000 rw-p 00000000 00:00 0 
b775d000-b775e000 r-xp 00000000 00:00 0          [vdso] 
b775e000-b777e000 r-xp 00000000 08:01 1050794 /lib/i386-linux-gnu/ld-2.17.so 
b777e000-b777f000 r--p 0001f000 08:01 1050794 /lib/i386-linux-gnu/ld-2.17.so 
b777f000-b7780000 rw-p 00020000 08:01 1050794 /lib/i386-linux-gnu/ld-2.17.so 
bff35000-bff56000 rw-p 00000000 00:00 0        
[stack] 
Aborted (core dumped) 
gs开头的寄存器就是常说的段寄存器。在MS-DOS和基于DOS的系统里，段寄存器的作用很广泛。但是，
今天它的作用发生了变化。简单地说，Linux下的gs 寄存器总是指向TLS（参见第 65 章）——存储线程的多种
特定信息。（Win32 环境下的fs寄存器起到Linux下gs寄存器的作用。Win32 的fs寄存器指向TIB
①
18.3.1  Optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
） 
如需详细了解 gs 寄存器的作用，请在 3.11 以上版本的 Linux 源代码中查阅文件（arch/x86/include/ 
asm/stackprotector.h）。这个文件的注释详细描述了有关变量的功能。 
我们使用 LLVM 编译本章开头的数组程序，看看它是如何使用百灵鸟的： 
_main 
var_64           = -0x64 
var_60           = -0x60 
var_5C           = -0x5C 
var_58           = -0x58 
var_54           = -0x54 
var_50           = -0x50 
var_4C           = -0x4C 
var_48           = -0x48 
var_44           = -0x44 
var_40           = -0x40 
var_3C           = -0x3C 
var_38           = -0x38 
① TIB 是 Thread Information Block。请参见 https://en.wikipedia.org/wiki/Win32_Thread_Information_Block。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
237 
var_34           = -0x34 
var_30           = -0x30 
var_2C           = -0x2C 
var_28           = -0x28 
var_24           = -0x24 
var_20           = -0x20 
var_1C           = -0x1C 
var_18           = -0x18 
canary           = -0x14 
var_10           = -0x10 
    PUSH        {R4-R7,LR} 
    ADD          R7, SP, #0xC 
    STR.W        R8, [SP,#0xC+var_10]! 
    SUB       
SP, SP, #0x54 
    MOVW      
R0, #aObjc_methtype ; "objc_methtype" 
    MOVS      
R2, #0 
    MOVT.W    
R0, #0 
    MOVS      
R5, #0 
    ADD       
R0, PC 
    LDR.W     
R8, [R0] 
    LDR.W     
R0, [R8] 
    STR       
R0, [SP,#0x64+canary] 
    MOVS      
R0, #2 
    STR       
R2, [SP,#0x64+var_64] 
    STR       
R0, [SP,#0x64+var_60] 
    MOVS      
R0, #4 
    STR       
R0, [SP,#0x64+var_5C] 
    MOVS      
R0, #6 
    STR       
R0, [SP,#0x64+var_58] 
    MOVS      
R0, #8 
    STR       
R0, [SP,#0x64+var_54] 
    MOVS      
R0, #0xA 
    STR       
R0, [SP,#0x64+var_50] 
    MOVS      
R0, #0xC 
    STR       
R0, [SP,#0x64+var_4C] 
    MOVS      
R0, #0xE 
    STR       
R0, [SP,#0x64+var_48] 
    MOVS      
R0, #0x10 
    STR       
R0, [SP,#0x64+var_44] 
    MOVS      
R0, #0x12 
    STR       
R0, [SP,#0x64+var_40] 
    MOVS      
R0, #0x14 
    STR       
R0, [SP,#0x64+var_3C] 
    MOVS      
R0, #0x16 
    STR       
R0, [SP,#0x64+var_38] 
    MOVS      
R0, #0x18 
    STR       
R0, [SP,#0x64+var_34] 
    MOVS      
R0, #0x1A 
    STR       
R0, [SP,#0x64+var_30] 
    MOVS      
R0, #0x1C 
    STR       
R0, [SP,#0x64+var_2C] 
    MOVS      
R0, #0x1E 
    STR       
R0, [SP,#0x64+var_28] 
    MOVS      
R0, #0x20 
    STR       
R0, [SP,#0x64+var_24] 
    MOVS      
R0, #0x22 
    STR       
R0, [SP,#0x64+var_20] 
    MOVS      
R0, #0x24 
    STR       
R0, [SP,#0x64+var_1C] 
    MOVS      
R0, #0x26 
    STR       
R0, [SP,#0x64+var_18] 
    MOV       
R4, 0xFDA ; "a[%d]=%d\n" 
    MOV       
R0, SP 
    ADDS      
R6, R0, #4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
238 
逆向工程权威指南（上册） 
    ADD       
R4, PC 
    B         
loc_2F1C 
; second loop begin 
loc_2F14 
    ADDS      
R0, R5, #1 
    LDR.W     
R2, [R6, R5, LSL#2] 
    MOV       
R5, R0 
loc_2F1C  
    MOV 
R0, R4 
    MOV       
R1, R5 
    BLX 
_printf 
    CMP       
R5, #0x13 
    BNE       
loc_2F14 
    LDR.W     
R0, [R8] 
    LDR 
R1, [SP,#0x64+canary] 
    CMP       
R0, R1 
    ITTTT EQ         ;  
    MOVEQ   
R0, #0 
    ADDEQ     
SP, SP, #0x54 
    LDREQ.W   
R8, [SP+0x64+var_64],#4 
    POPEQ     
{R4-R7,PC} 
    BLX       
___stack_chk_fail 
这段 Thumb-2 模式程序最显著的特点就是循环体被逐一展开了。LLVM 编译器判定这样的效率较高。
另外，ARM 模式下这种指令的效率可能更高。本书就不再进行有关验证了。 
函数尾声检测了“百灵鸟”的状态。如果栈内的值没被修改（和 R8 寄存器所指向的值相等），则会执行 ITTTT 
EQ 后面的 4 条指令——令 R0 为 0、运行函数尾声并且退出函数。如果“百灵鸟”发生了变化，程序将跳过 ITTTT 
EQ 后面的 4 条带“－EQ”的指令，转而调用___stack_chk_fail 进行异常处理，实际上会终止个程序。 
18.4 其他 
现在我们应该可以理解为什么C/C++编译不了下面的程序了。
①
18.5 字符串指针 
void f(int size) 
{ 
    int a[size]; 
... 
}; 
在编译阶段，编译器必须确切地知道需要给数组分配多大的存储空间，它需要事先明确分配局部栈或
数据段（全局变量）的格局，所以编译器无法处理上述这种长度可变的数组。 
如果无法事先确定数组的长度，那么我们就应当使用 malloc()函数分配出一块内存，然后直接按照常
规变量数组的方式访问这块内存；或者遵循 C99 标准（参见 ISO07，6.7.5/2）进行处理，但是遵循 C99 标
准而设计出来的程序，内部实现的方法更接近 alloca()函数（详情请参阅 5.2.4 节）。 
本节以下述程序为例。 
指令清单 18.8  查询月份名称 
#include  
const char* month1[]= 
① 但是根据 C99 标准[ISO07，pp 6.7.5/2]这种可变长数组是合法数据，可以被编译。GCC 确实可以使用栈处理动态数组。这时
候，它实现数组的方式和 5.2.4 节介绍过的 alloca（）函数的实现方式相近。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
239 
{ 
  "January", 
  "February", 
  "March", 
  "April", 
  "May", 
  "June", 
  "July", 
  "August", 
  "September", 
  "October", 
  "November", 
  "December" 
}; 
// in 0..11 range 
const char* get_month1 (int month) 
{ 
  return month1[month]; 
}; 
18.5.1 x64 
指令清单 18.9  Optimizing MSVC 2013 x64 
_DATA   SEGMENT 
month1  DQ      FLAT:$SG3122 
         DQ      FLAT:$SG3123 
         DQ      FLAT:$SG3124 
         DQ      FLAT:$SG3125 
         DQ      FLAT:$SG3126 
         DQ      FLAT:$SG3127 
         DQ      FLAT:$SG3128 
         DQ      FLAT:$SG3129 
         DQ      FLAT:$SG3130 
         DQ      FLAT:$SG3131 
         DQ      FLAT:$SG3132 
         DQ      FLAT:$SG3133 
$SG3122 DB     'January', 00H 
$SG3123 DB     'February', 00H 
$SG3124 DB     'March', 00H 
$SG3125 DB     'April', 00H 
$SG3126 DB     'May', 00H 
$SG3127 DB     'June', 00H 
$SG3128 DB     'July', 00H 
$SG3129 DB     'August', 00H 
$SG3130 DB     'September', 00H 
$SG3156 DB     '%s', 0aH, 00H 
$SG3131 DB     'October', 00H 
$SG3132 DB     'November', 00H 
$SG3133 DB     'December', 00H 
_DATA   ENDS 