we deﬁne a reasonably large number p (e.g., 109) as the
maximum number of traversed elements in 2A to terminate
the recursive traversal in the smart meter initialization such
that the approximated G, R and ∀ω ∈ G, c(ω) are generated.
As will be demonstrated in Section VI, such an approximation
leads to satisfactory results in terms of generating candidate
rate/reading sets.
• Dynamic Reading Conversion (DRC): dynamically up-
date every input reading with the previous reading re-
mainder and then ﬁnd the closest safe reading based on
the updated input reading.
With these two options of handling the reading remainders
(which result from the conversion from input readings to safe
readings), we detail our streaming algorithm in Algorithm 2.
C. Privacy Preserving Streaming (Online)
Assuming that the smart meter originally collects K read-
ings in the input stream ~Rin, our streaming algorithm privately
streams K output readings ~Rout. Our algorithm incrementally
generates and outputs safe readings based on the input readings
in ~Rin where billing and aggregation errors can be extremely
low while reading errors can also be minimized to some extent
in the output stream. The basic idea is – for each input reading,
our algorithm ﬁrst looks up the closest safe reading in R
(which is a key building block of our streaming algorithm),
and outputs it in different fashions to achieve good utility of
the stream, shown as below.
1) Closest Safe Reading Lookup
Algorithm 1 presents the details of closest safe reading
lookup. While the smart meter captures an input reading,
it iteratively ﬁnds the closest reading r in R and examine
whether r is safe or not: whether the output stream with r
satisﬁes (ǫ, δm)-Uncertainty or not.
Algorithm 2: Privacy Preserving Reading Streaming
Input
: an input reading stream ~Rin; candidate reading
set R; privacy parameters ǫ, δ, m
Output: output safe reading stream ~Rout
1 initialize a reading remainder λ = 0
/* (1) if CRC (roll over remainders) */
2 foreach ~Rin[i] ∈ ~Rin, i ∈ [1, K] do
3
if i = K then
/* at the last reading
~Rin[K] = ~Rin[K] − λ
call Algorithm 1 to get ~Rin[K]’s closest safe
reading closest
Return closest as ~Rin[K]
*/
else
call Algorithm 1 to get closest as ~Rin[i]’s closest
safe reading
λ+ = (closest − ~Rin[i])
~Rout[i]
Return closest as
4
5
6
7
8
9
10
Algorithm 1: Closest Safe Reading Lookup
Input
: an input reading ~Rin[i]; current output readings
~Rout = h ~Rout[1], . . . , ~Rout[i − 1]i; candidate
reading set R; privacy parameters ǫ, δ, m
Output: an output safe reading ~Rout[i]
1 initialize
2 while
3
~Rout[i] = argmin∀r∈R |r − ~Rin[i]| (closest)
~Rout ∪ ~Rout[i] is not (ǫ, δm)-Uncertain do
R′ = R − ~Rout[i]
~Rout[i] = argmin∀r∈R′ |r − ~Rin[i]| (next closest)
check whether ~Rout ∪ ~Rout[i] satisﬁes
(ǫ, δm)-Uncertainty with Equations 11, 12 and 13
4
5
6 Return the safe reading ~Rout[i]
2) Streaming Algorithm
In order to minimize the aggregation and billing errors,
while streaming every safe reading (converted from the in-
put reading), our algorithm rolls over the reading remainder
( ~Rout[i] − ~Rin[i] can be positive or negative) to the either (1)
the last reading, or (2) the next input reading of the stream.
We propose two roll over options as below:
• Cyclic Reading Conversion (CRC): ﬁnd the closest safe
reading for each input reading, aggregate all the input
readings’ remainders (either positive or negative) together
and roll over the aggregated remainder to the last reading.
“Cyclic” means every reading remainder is cyclically
reset to 0 (does not affect the next reading) and the ag-
gregated remainder will be subtracted in the last reading.
/* (2) if DRC (roll over remainders) */
11 foreach ~Rin[i] ∈ ~Rin, i ∈ [1, K] do
12
~Rin[i] = ~Rin[i] − λ
run Algorihtm 1 to get closest as ~Rin[i]’s closest
safe reading
λ = closest − ~Rin[i]
Return closest as
~Rout[i]
13
14
15
CRC Option. Given the ith reading ~Rin[i] in the stream, CRC
ﬁrst veriﬁes whether it is the last reading. If yes, CRC will
sum up the aggregated reading remainder λ to the current
reading ~Rin[K] and return its closest safe reading. Otherwise,
the algorithm returns the original input reading ~Rin[i]’s closest
safe reading closest, and λ is updated with the difference
closest − ~Rin[i]. In summary, Algorithm 2 with the CRC
option has the following characteristics:
• Aggregation Error: since the aggregated reading re-
mainder λ is integrated into the last reading, the overall
aggregation error would be the difference between one
single reading ( ~Rin[K] − λ) and its closest safe reading.
It has high possibility of being close to 0, as shown in
experimental section.
• Billing Error: assuming the time frame for ∀i ∈ [1, K],
~Rin[i]
is the billing cycle, if the tariff function f (·)
of electricity bill is a constant, the difference between
aggregating the readings in ~Rin and
~Rout results from
the last reading (since reading remainders have been
integrated in the aggregation). Thus, CRC option’s billing
error is identical to its aggregation error (close to 0).
JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015
8
• Reading Error: since all K readings in the stream except
the last reading can achieve its local optimum towards
minimizing the reading error with its closest safe reading,
the reading error can be minimized to some extent.
• Privacy: ~Rout satisﬁes (ǫ, δm)-Uncertainty.
DRC Option. DRC dynamically updates each reading by
integrating the previous reading remainder λ, then returns the
updated reading’s closest safe reading, and ﬁnally generates a
new reading remainder for the next reading. Also, Algorithm
2 with the DRC option has the following characteristics:
• Aggregation Error: since every reading remainder is
integrated into the next reading, the aggregation error
is the last remainder which is well balanced by all the
readings into a very small number. Then, the aggregation
error is extremely close to 0.
• Billing Error: similar to the aggregation error, the billing
error (with constant tariff) is also extremely close to 0.
• Reading Error: since each reading integrates the pre-
vious remainder, the reading error of DRC is relatively
higher than CRC. Nevertheless, after integrating the
previous remainder, each reading can also achieve its
local optimum towards minimizing the reading error by
converting the reading to the closest safe reading.
• Privacy: ~Rout satisﬁes (ǫ, δm)-Uncertainty.
Furthermore, our privacy preserving algorithm outputs safe
readings which are associated with large number of possible
combinations of appliances in real world (by ensuring (ǫ, δm)-
Uncertainty). Thus, our proposed approach could also prevent
the privacy risks against NILM algorithms (both supervised
[9], [8], [25] and unsupervised [24], [22]) for two reasons.
First, safe readings are converted from the true readings,
and the aggregated consumption have been changed from
the original readings. Second, the output safe readings in
our algorithm are associated with large number of possible
combinations of appliances in real world by satisfying the
privacy notion, such large number of appliance combinations
would increase the estimated consumption amount of more
appliances (compared to the true readings) and greatly reduce
the learning accuracy.
V. ANALYSIS
A. Privacy Analysis
We now analyze the privacy leakage in the output
~Rout,
assuming that the adversary can possess the some or all of the
background knowledge described in Section III-B3.
Lemma 1: The output reading stream of Algorithm 2: ~Rout
satisﬁes (ǫ, δm)-Uncertainty.
Proof. Since ∀i ∈ [1, K], ~Rout[i] are generated in time series
sequence, and each newly streamed output reading together
with the most recent m − 1 readings in the stream strictly
satisfy the three groups of conditions (Equations 11, 12 and
13), it is straightforward to see that all the output readings in
the stream satisﬁes (ǫ, δm)-Uncertainty.
⊡
B. Complexity Analysis
Our approach consists of two phases (1) the ofﬂine smart
meter initialization phase, and (2) the online streaming phase.
First, the ofﬂine phase recursively traverses the power set of A
(exponential) to identify the candidate reading set and possible
rates’ candidate appliance sets. For a large size A, the recursive
traversal is terminated with a sufﬁciently large number of
traversed elements in 2A (denoted as p). Second, the online
phase streams K readings: for each reading, it
iteratively
looks up a closest safe reading from R (say, O(n) readings
are returned to identify a safe reading) and examines all the
appliances in every candidate reading’s candidate appliance
set (at most |A| appliances) to check whether the information
leakage meets (ǫ, δm)-Uncertainty or not for the most recent
m output readings. Thus, the computational complexity of the
online streaming phase is O(K|A|nm), which is polynomial.
C. Implementation and Scalability
Our streaming algorithm can be easily integrated into a
smart meter. Speciﬁcally, the appliance set A and privacy
parameters ǫ, δ and m can be loaded into the smart meter via
a web interface or a mobile application for generating G, R
and ∀c(ω) in the initialization. Privacy parameter ǫ is speciﬁed
to bound the information leakage in single readings while δ
and m are speciﬁed to bound the information leakage from
the correlations of energy usage in one or multiple readings.
The CRC and DRC can be implemented as different privacy-
aware running modes in the smart meter. Once a new reading
is captured by the smart meter, a safe reading is generated
immediately and transmitted to the utility company.
Speciﬁcally, the consumers can locally adjust their privacy
parameters ǫ, δ and m based on their levels of privacy demand
at any time, but they do not need to change the (CRC and
DRC based) privacy preserving streaming algorithm (which
is integrated in the smart meter). For better functioning some
emerging services (e.g., energy saving recommendation, and
non-intrusive load monitoring [15]), the utility company can
keep a detailed inventory of each appliance, which will not
pose additional privacy concerns to our streaming algorithm
(since we assume that adversaries could possess the appliance
list as background knowledge in our privacy model). Upon ad-
dition and/or removal of appliances (e.g., purchasing/replacing
a new appliance, house owners move out, renting the houses to
tenants, and houses with visitors who bring their own devices),
the consumers can locally reset the smart meter with an up-
dated list of appliance set A (running smart meter initialization
once) and inform the utility company if necessary. Notice
that the consumers do not necessarily change the streaming
algorithm, and they can switch from CRC to DRC (and vice-
versa), as well as specify a new group of privacy parameters
ǫ, δ and m according to their privacy demand.
Finally, after implementing our privacy preserving stream-
ing algorithm in the smart meters, the utility can offer such
privacy-aware smart metering services to the consumers. Since
both CRC and DRC based streaming algorithm would result
in small billing errors (less than ±4% in general), if the
consumers pay 4% more, this is the price traded for better
privacy protection; if they pay less, the utility can charge
a small amount of service fee to tackle such non-technical
losses. In the meanwhile, there are two alternative approaches
JOURNAL OF LATEX CLASS FILES, VOL. 14, NO. 8, AUGUST 2015
9
that can reduce the billing errors to as low as 0: (1) rolling over
the remainder of the last reading in the current billing cycle
to the next billing cycle (instead of discarding it), and (2)
we can let the consumers locally calculate the billed amount
without leaking private information. Such approaches would
need relatively more trust on the consumers, and indeed match
the fact that utilities in many countries (e.g., US and Canada)
allow consumers to submit their readings by themselves.
VI. EXPERIMENTS
A. Experimental Setup
Datasets. Richardson et al. [28] collected 22 dwellings’ power
consumption over two years in East Midlands, UK. Each
of the 22 smart meters has reported 1,051,200 readings (1
reading per minute). Furthermore, in UMass Trace Reposi-
tory (http://traces.cs.umass.edu/), Barker et al. [5] collected 3
smart meters’ consumption data over three months in 2012,
respectively (1 reading per second).
We conducted the experiments on these two datasets (de-
noted as “UK” and “UMass”, respectively), and averaged
the results of multiple smart meters in each dataset. The
characteristics of the two datasets are presented in Table IV.
TABLE IV
CHARACTERISTICS OF THE DATASETS
Datasets Meters # Average # of Readings #
1,051,200
UK Data
7,776,000
Appliances
24.0
35.7
UMass Data
22
3
Time
2 years
3 months
Parameters. ǫ is selected from 0.01 to 0.2 while δ is selected
from 0.01 to 0.1 in the experiments. In the evaluation of
heuristic smart meter initialization, we run additional tests by
letting the number of appliances be |A| = 20, 40, 100 and
each appliance’s consumption rate (watts) is selected from
a real-world list of appliances and consumption rates [1].
For the tariffs of energy usage, we set the rates per the real
world energy pricing plans offered by Paciﬁc Gas and Electric
Company (PG&E) [2].
Platform. All the experiments were performed on a DELL PC
with Intel Core i7-4790 CPU 3.60GHz and 16G RAM running
Microsoft Windows 8.1 Operating System.
70000
60000
50000
40000
30000
20000
10000
0
|A|=20
|A|=40
|A|=100
0
1
0
2
0
3
0
4
0
5
R
r
o
G
f
o
e
z
i
S
0
6
0
9
0
8
0
7
0
4
1
Termination Threshold 
0
0
1
0
1
1
0
2
1
0
3
1
0
5
1
0
6
1
0
7
1
0
8
1
0
9
1
(x 10,000)
0
0
2
Fig. 1. Smart Meter Initialization
B. Smart Meter Initialization (Ofﬂine)
Both UK and UMass Data include speciﬁc appliances and
their time series consumption information. We can obtain
the exact candidate rate G, candidate reading set R and
the candidate appliance sets ∀ω ∈ G, c(ω). However, if the
number of appliances m reaches 50, we may not be able
to obtain the exact result within a reasonable time due to
the exponential increase of the computational cost. In these
cases, we set a termination threshold p in the heuristic safe
candidate rate set generation, which runs only once for every
smart meter and requires a one-time ofﬂine computational cost.
Figure 1 presents the experimental results for smart meter
initialization. As p tends close to 106, the exact results of
G, R and ∀ω ∈ G, c(ω) for |A| = 20 can be derived, and the
results of |A| = 40 and |A| = 100 become relatively stable.
Therefore, if |A| increases, the approximated results G, R and
∀ω ∈ G, c(ω) can be sufﬁciently accurate.
C. Utility Evaluation
In the experiments, we have evaluated all three error rates
(billing, aggregation and reading) for both CRC and DRC
options with constant tariff.1 Speciﬁcally, we conduct exper-
iments using both UK and UMass datasets to test CRC and
DRC’s utility on varying ǫ, δ and m, respectively.
We select ǫ ∈ [0.1, 0.3], δ ∈ [0.05, 0.15] and m ∈ [10, 30].
While testing every privacy parameter, the other two param-