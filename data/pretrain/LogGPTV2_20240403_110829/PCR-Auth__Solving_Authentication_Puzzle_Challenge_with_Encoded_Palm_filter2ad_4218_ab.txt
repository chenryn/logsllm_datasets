combined signal at the microphone should present individu-
ally distinctive patterns. Moreover, the hand-grip biometric is
implicit and hard to imitate. Even if an adversary perfectly
replicates the hand geometry and the holding position, he/she
could hardly repeat the body-fat ratio and gripping strength.
It is important to note that all the amplitude attenuation
factors and the phase changes are also related to the signal’s
frequency. Such a frequency-selective nature motivates us to
use the signal with richer spectral points to capture higher
resolution of the user’s hand-grip biometric. Furthermore, we
can use the different combinations of the frequencies to extract
dynamic biometric features for CR authentication. Even if
an adversary eavesdrops on one authentication session, it is
hard to cheat the new session by reusing the previous data.
Therefore, we deﬁne Palm Contact Response (PCR) as
pcr = (cid:104)Hd, Hr, Hv, F(cid:105),
(3)
which describes the gripping hand’s biometric with three
signal components regarding the signal frequencies F .
B. Motivational Study
We conduct a feasibility study to show how ultrasonic
signals are impacted by the gripping hand. Speciﬁcally, we
play a short 18k-22kHz chirp signal in 25 ms using a smart-
phone’s speaker. Figure 2 shows the received signals at the
smartphone’s microphone, when it is held in the user’s hand
and placed on a table, respectively. From the comparison, we
observe that the user’s gripping hand suppresses the speaker’s
sound by an average of 3 dB. Moreover, when the chirp signal
sweeps from 18k to 22kHz, the signal amplitudes are degraded
by the gripping hand with different scales, which illustrates the
Fig. 3: Distinguishing users by palm contact responses.
PCR’s frequency-selective nature. Furthermore, we ﬁnd that
while the direct-path signals dominate the microphone data
before 25ms, the speaker sound reﬂections and the induced
surface vibration sounds become signiﬁcant after the speaker’s
sound stops. They degrade over 20 dB after 75 ms. We thus
propose to leverage the 0 − 75ms sounds for the gripping-
hand sensing. It is also worth noting that the sounds in the
25 − 75ms range are the residue of the speaker sound, which
are harder to forge via a speaker than direct-path signals.
We then study the feasibility of using PCRs to distinguish
users. Figure 3 shows the spectrograms of the received chirp
signals, when two users grab a smartphone twice, respectively.
It is evident that the time-frequency images are consistent
for the same user but are distinctive between them. Specif-
ically, not only the dominant direct-path chirp signal but also
the sounds after it show distinct patterns between the two
users. All these signals present frequency-selective features.
These results indicate that we can leverage the temporal and
frequential information to achieve robust user authentication.
Furthermore, as mobile devices are usually embedded with
two microphones for noise cancellation and stereo recording,
we can use the two acoustic channels to capture more aspects
of the user’s PCR. When the speaker sounds travel across
different routes to reach the two mics, they are impacted
differently by the gripping hand. Such a spatial diversity also
adds difﬁculties for an adversary to cheat the system.
C. Challenge-Response Model
Our system model
is shown in Figure 4, which is an
integration of a CR protocol and the PCR coding/decoding
modules. The handshake authentication process is between the
handheld device user and the PCR-Auth. The PCR decoder
Duser{} is created for each user, which is pre-trained with all
of the user’s hand-grip biometric features at the registration
phase. The system works in a mechanism that each challenge
expects a unique PCR code for veriﬁcation. When a user sends
an authentication request, PCR-Auth generates an OTC Code
(i.e., nonce). The handheld device plays the OTC-encoded
stimulus signal using its own speaker, and in the meanwhile,
its microphones record the signals to obtain the encoded
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
31036
Smartphone speaker’s sound stops020406080Time (ms)1819202122Frequency (kHz)-100-95-90-85-80-75-70-65-60Power/frequency (dB/Hz)User 1020406080Time (ms)1819202122Frequency (kHz)-100-95-90-85-80-75-70-65-60Power/frequency (dB/Hz)User 1020406080Time (ms)1819202122Frequency (kHz)-100-95-90-85-80-75-70-65-60Power/frequency (dB/Hz)User 2020406080Time (ms)1819202122Frequency (kHz)-100-95-90-85-80-75-70-65-60Power/frequency (dB/Hz)User 2E. Framework Overview
Based on the above CR model, we design the PCR-Auth
framework as shown in Figure 5. Upon each authentication
request, the microphone access permission is acquired, which
is revoked after authentication through auto-reset. The PCR
encoder ﬁrst detects whether the device is under intentional ul-
trasonic interference by examining the ultrasonic band against
a Sound Pressure Level (SPL) threshold, which is introduced
in Section V-F2. If no dedicated ultrasound is detected, the
PCR encoder generates an OTC, and the OTC-based Stimulus
Signal Modulator selects ultrasonic pulses accordingly to
encode the user hand-grip biometric into a PCR code.
The microphone data is the input of the PCR decoder, which
ﬁrst performs Data Preprocessing to denoise, synchronize and
segment the audio data. The preprocessed data is fed into the
Channel-Filtering-Based PCR Code Extraction to pick up PCR
digits from the audio. In particular, we derive spectrogram
to describe the PCR code in both the time and frequency
domains. The OTC-controlled Channel Filter sets the cutoff
frequencies according to the OTC-indexed channels to extract
each PCR digit. Any incorrectly encoded PCR digit (i.e., not
on the right channel) is ﬁltered out at this stage, leaving a low
SNR. The obtained PCR digits are sent to the CNN-based PCR
Decoder for veriﬁcation, which is a per-user model, trained
with the user and a set of other users and stored in the device.
The CNN-based PCR Decoder exploits one CNN model
with ﬁve convolutional layers to decode each PCR digit from
its spectrogram. The CNN scores (i.e., probabilities) of all
PCR digits are returned. We further develop a cluster-based
method to verify the PCR code by integrating the CNN scores
and the SNRs of all PCR digits. Based on that, we compute
the PCR code’s Euclidean distance to the user’s cluster and
verify the user using a threshold, which examines both the
user’s biometric features and the coding sequence. The access
permission is granted only when the PCR code successfully
recovers the OTC code.
F. Threat Model
We investigate the potential attacks to PCR-Auth. The ad-
versary’s goal is to cheat PCR-Auth to pass the authentication.
We assume the adversary can physically access the user’s
handheld device when it is left unattended or stolen. But
the adversary can not compromise the device hardware and
software, whose integrity is the minimum requirement for
authentication and is protected via encryption, memory foren-
sics and circuit security. Unfortunately, the acoustic channel
eavesdropping threat is a critical issue for all acoustic systems,
because the acoustic channel is open. This is the major reason
that most acoustic systems suffer from replay attacks. While
it would not be surprising to see our CR authentication defeat
replay attacks, we take one step further to study new attacks.
For example, the adversary could listen via a side-channel to
obtain not only the biometric data but also the chirp signal
frequencies (i.e., OTC digit). In particular, we consider the
following attacks:
Fig. 4: Our challenge-response authentication model.
PCR EOT C{P CR}. Next, PCR-Auth applies the PCR decoder
Duser{} to verify the PCR code and make the authentication
decision, which examines both the biometric and the coding
sequence by Duser{EOT C{P CR}}.
D. Biometric Encoding and PCR Code.
As mentioned above, the proposed biometric CR authentica-
tion is achieved based on the encoded PCR. The authentication
function can be expressed by Equation 4,
ˆK = Duser{EOT C{P CR}}.
(4)
The decoded result ˆK matches with the OTC code, only when
the presented biometric features and the coding sequence are
both correct. This is more secure than the traditional methods
that only rely on static biometric features. We now introduce
the biometric encoding, which serves as the basis of PCR-Auth
and creates a huge response universe to support everyday CR
authentications. The basic idea is to leverage the frequency-
selective nature of PCR. By using the short stimulus signal
pulses at different frequencies, we obtain n non-overlapped
PCRs and map them to decimal and hexadecimal values (i.e.,
n = 10 or 16) as coding units, which can be used to express
more complicated strings. The PCR encoder EOT C{} selects
the signal pulses in a sequence according to the OTC code.
The PCR Code is then extracted by the encoded signals to be
the biometric representation of an m-digit OTC as
EOT C{P CR} = (pcr1, pcr2, ..., pcrm),
(5)
where pcri, i = 1, 2, ...m is the i-th PCR digit.
The PCR decoder Duser{} is trained at the registration
phase with the user’s all n unique PCR digits. During the
authentication, the PCR decoder ﬁrst examines whether the
PCR digits are all at
the correct frequencies indexed by
the OTC code and then veriﬁes the biometric presented by
each PCR digit separately. A successfully veriﬁed PCR digit
reconstructs one OTC digit. By encoding the user’s hand-grip
biometric with n coding units into m-digit PCR codes, our
biometric encoding technique expands the biometric response
universe exponentially from n to nm based on the same
training effort of the prior biometric CR method [19]. As
a result, the user does not need to reﬁll the response pool
periodically with new biometric features.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
41037
1) Authentication requestHandhelddevicePCR-Auth3) PCR Encoding  !"#$%&’()*+ !"#$%&=OTCUser2-a) One Time Challenge(OTC)2-b) OTC-encoded stimulus signal?5) Grant/deny the accessGripping Hand,()*+4) PCR DecodingFig. 5: The architecture of PCR-Auth.
1) Impersonation Attack:
In this scenario, the adversary
uses his/her own hand to cheat PCR-Auth. The coding se-
quence is ensured to be correct, and the adversary expects
to further imitate the victim’s biometric features. Speciﬁcally,
random impersonation attacker arbitrarily grips the victim’s
device to cheat PCR-Auth; knowledgeable impersonation
attacker has the prior knowledge of how the victim grips
the device, so that he/she can imitate the gripping-hand pose
when in possession of the device; We further consider a
knowledgeable fake-hand attacker, who uses a silicone fake
hand to imitate the victim’s hand with more freedom.
2) Replay Attack: The adversary may have eavesdropped
on the victim’s authentication data and attempt to use the same
data to cheat a new session. To attack, the adversary needs to
mute the target device and use a second speaker to replay
the prior sounds. This type of attack only aims to present the
user’s biometric features. But a challenge is to predict the
precise time to start the replay, which is only a short period
(e.g., 400ms for 4-digit OTC) when the mic is on. A possible
solution is to turn the target device volume to be low to detect
the start of the stimulus signal and then attack immediately.
3) Listen-and-synthesis Attack: We design new attacks
by assuming that the adversary could capture the OTC by
listening to the acoustic channel and immediately stitching
prior PCR digits in a correct sequence. This attack aims to
forge both the code and the biometric. We also assume the
adversary could obtain the victim’s all PCR digits beforehand
to attack with full freedom, which may be achieved through
eavesdropping on the registration process or the disclosure of
the stored biometric data. However, the implementation of this
attack is still challenging. If playing the synthesized sound
after waiting to eavesdrop on all OTC digits, it would be
rejected because the microphone is off just after the speaker
sound stops (e.g., with 80ms delay). So the only way is to
listen and forge each PCR digit separately. In this scenario,
each synthesis digit is still unavoidably delayed by at least
tams because the attacker needs this period for observation
(buffer), A/D and D/A conversions, Fast Fourier Transform
(FFT), cache accesses and the CPU scheduling time. The
last item alone can be over 100ms and unpredictable. But
the success of such attacks requires the short delay (less
than one digit) and the strict synchronization. Otherwise, each
synthesized digit may be corrupted by the speaker’s next digit
or partially segmented due to poor synchronization, resulting
in a rejection.
To our knowledge, no prior work has implemented such
attacks due to the strict real-time synchronization requirement.
But we ﬁnd that if using a Field Programmable Gate Ar-
ray (FPGA) for the attack system implementation, the CPU
scheduling time can be removed, and a determined delay might
be achieved as low as 10ms for each synthesized digit. While
implementing the FPGA-based attack system is beyond this
paper’s scope, we assume its feasibility and further investi-
synchronization
gate two new attacks based on simulation:
disturbance attack overwhelms or replaces each original digit
with louder delayed adversarial digits, which aims to fool the
synchronization method into picking up the delayed adversar-
real-time perturbation attack
ial digits for authentication;
attempts to generate perturbation noises based on adversarial
learning and modify the original digit sounds to present correct
biometric features.
4) DoS Attack: The Denial of Service (DoS) attack aims
to cause authentication errors and rejections by overriding the
working frequencies of PCR-Auth via dedicated ultrasounds.
III. APPROACH DESIGN
A. Palm Contact Response Encoder
1) Stimulus Signal Design: The stimulus signal is used
the PCR for
to interact with the user’s palm and extract
authentication. In order to acoustically obtain sufﬁcient bio-
metric information, we exploit the upward frequency sweeping
signals to capture the user’s biometric in a frequency range
rather than a single frequency. Intuitively, a wider frequency
band enables describing more aspects of the user’s biometric,
and a longer time period means more audio samples and thus
higher resolutions. However, to facilitate biometric encoding,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
51038
(a) PCR encoder 𝑬𝑶𝑻𝐂{}OTC-based Stimulus Signal ModulationOTC Code GeneratorPCR code 𝑬𝑶𝑻#{𝑷𝑪𝑹}Data Preprocessing(Denoise, Synch, Segment)Channel Filtering-based PCR Code Extraction\OTC-controlled Channel FilteringPCR Spectrogram DerivationCNN-based PCRCode VerificationConvolutional Neural Network\CNN ScoresCluster-based PCR Code VerifierABCDPermit or RejectSNRs of all PCR digitsPCR Digit Extraction(b) PCR decoder𝑫𝒖𝒔𝒆𝒓{}SPL threshold-based Ultrasound Attack Detection(e.g., 9207)If no intentional interference detectedwe design the stimulus signals in narrow bands and short
periods. The reasons are two-fold. First, the secure biometric
encoding requires all PCR digits to have non-overlapping
biometric information, making it necessary for us to divide the
available frequency range into a number of exclusive narrow
bands (i.e., channels) and extract the frequency-separable PCR
digit. Second, the time period of the stimulus signal is directly
related to the waiting time and must be short.
Besides the function-level requirements, a critical considera-
tion is that the signal must be non-invasive and do little harm to
humans and animals. Thus, we propose to use the ultrasounds
easily generated by off-the-shelf handheld devices, whose
frequency range complies with the Federal Communications
Commission (FCC) Rules & Regulations Title 47 Part 18 to
ensure low risks to human and animals [21]. In particular, we
apply the signals within the range 17k-22kHz, which has been
demonstrated to be hardly audible [22] and widely applied
in prior ultrasonic sensing work [23], [24], [25], [26]. We
further reduce disturbances by designing the stimulus signal
with millisecond-level short periods, hundred-Hz-level narrow
bands and the low energy (e.g., 50% volume).
To balance the above considerations, we design the stimulus
signals as a number of 25ms long and 350Hz wide chirp
pulses within the range 17k − 22kHz. The signal frequency
bands are 10 times narrower than the prior acoustic sensing
work (i.e., 4 − 6kHz wide [23], [24], [25], [26]), which
means more challenge for our sensing. But we show that
such narrow-band pulse signals are sufﬁcient to distinguish
people’s palms. Moreover, we add a 75ms silent period after
each chirp for leveraging the reﬂected signals and the induced
surface vibration sounds in this period and reduce the inter-
chirp interference. We further apply a Hamming window to
both ends of each chirp to suppress the spectral leakages
caused by sudden frequency changes and the hardware noises
of the speaker. The complete stimulus signals used for both
the registration and authentication are illustrated in Figure 6.
2) PCR Encoding: The purpose of PCR encoding is to
encode the user’s hand-grip biometric into a unique PCR
code based on the OTC, which can be generated by existing
methods [27], [28], [29]. For simplicity of description, we
select 10 exclusive narrow-band channels from the range 17k-
22kHz to represent decimal digits. These coding channels
are all 350Hz wide and separated by a gap (e.g., 50Hz). It
is important to note that not all channels are suitable for
encoding, and we conduct extensive experiments to identify
the good channels, which is introduced in Section V-A2.
Chirp pulse is used as the basic unit to encode the user’s
PCR onto the corresponding channel. When training the PCR
decoder, the user’s PCRs at all coding channels are collected
as shown in Figure 6 (a). During the authentication, the PCR
encoder scopes down to each coding channel indexed by the
OTC to extract the corresponding PCR digit. Figure 6 (b)
illustrates the stimulus signals for encoding a 4-digit PCR
code, when the OTC code is “9207” and the selected chirp
pulses are 21.6-21.95kHz, 18.8-19.15kHz, 21.6-21.95kHz and
20.8-21.15kHz in a sequence. When the stimulus signals
(a) Collecting all PCR digits during registration for training
(b) Spectrogram of PCR code
(c) Stimulus signal for PCR code
Fig. 6: Stimulus signals for training and authentication.
interact with the user’s contacting palm, a unique PCR code
is contained in the received audio. As many as 104 unique 4-
digit PCR codes can be generated, which are disposed of after
being used. A longer code creates an exponentially greater
response universe but at the cost of a longer waiting time.
B. Palm Contact Response Decoder
1) Denoising, Synchronization and Segmentation: The raw
audio data is ﬁrst preprocessed for denoising, synchronization
and segmentation. In particular, a bandpass ﬁlter with the
pass-band 17-22kHz is used to remove the noises out of the
stimulus signals’ frequency range, including the low-frequency
mechanical noises caused by the gripping hand and the audible
ambient noises. Next, the synchronization is performed by
leveraging the evenly spaced chirp pulses. Speciﬁcally, we
use the original pulse sequence signal as the reference and
calculate its cross-correlation with the received audio to ﬁnd
the time shift synch shif t that corresponds to the maximum
correlation coefﬁcient as expressed by
synch shif t = argmax
xcor(d).
(6)
d
We then use this shift to align the two signals and refer to
the reference signal to localize the coding chirps in the audio
for segmentation. Each resulted segment contains one 25ms
coding chirp and a 75ms stop period to represent a PCR digit.
2) PCR Code Extraction: Because each PCR digit is en-
coded onto one of the predeﬁned coding channels by the