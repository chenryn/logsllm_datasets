title:VMHunt: A Verifiable Approach to Partially-Virtualized Binary Code
Simplification
author:Dongpeng Xu and
Jiang Ming and
Yu Fu and
Dinghao Wu
VMHunt: A Verifiable Approach to Partially-Virtualized Binary
Code Simplification
Dongpeng Xu
Pennsylvania State University
University Park, PA 16802, USA
PI:EMAIL
Yu Fu
Pennsylvania State University
University Park, PA 16802, USA
PI:EMAIL
Jiang Ming
University of Texas at Arlington
Arlington, TX 76019, USA
PI:EMAIL
Dinghao Wu
Pennsylvania State University
University Park, PA 16802, USA
PI:EMAIL
ABSTRACT
Code virtualization is a highly sophisticated obfuscation technique
adopted by malware authors to stay under the radar. However,
the increasing complexity of code virtualization also becomes a
łdouble-edged swordž for practical application. Due to its perfor-
mance limitations and compatibility problems, code virtualization
is seldom used on an entire program. Rather, it is mainly used only
to safeguard the key parts of code such as security checks and
encryption keys. Many techniques have been proposed to reverse
engineer the virtualized code, but they share some common lim-
itations. They assume the scope of virtualized code is known in
advance and mainly focus on the classic structure of code emula-
tor. Also, few work verifies the correctness of their deobfuscation
results.
In this paper, with fewer assumptions on the type and scope of
code virtualization, we present a verifiable method to address the
challenge of partially-virtualized binary code simplification. Our
key insight is that code virtualization is a kind of process-level vir-
tual machine (VM), and the context switch patterns when entering
and exiting the VM can be used to detect the VM boundaries. Based
on the scope of VM boundary, we simplify the virtualized code.
We first ignore all the instructions in a given virtualized snippet
that do not affect the final result of that snippet. To better revert
the data obfuscation effect that encodes a variable through bitwise
operations, we then run a new symbolic execution called multiple
granularity symbolic execution to further simplify the trace snippet.
The generated concise symbolic formulas facilitate the correctness
testing of our simplification results. We have implemented our idea
as an open source tool, VMHunt, and evaluated it with real-world
applications and malware. The encouraging experimental results
demonstrate that VMHunt is a significant improvement over the
state of the art.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15ś19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10.
https://doi.org/10.1145/3243734.3243827
CCS CONCEPTS
· Security and privacy → Software reverse engineering;
KEYWORDS
Code Virtualization, Binary Analysis, De-obfuscation, Multiple
Granularity Symbolic Execution
ACM Reference Format:
Dongpeng Xu, Jiang Ming, Yu Fu, and Dinghao Wu. 2018. VMHunt: A
Verifiable Approach to Partially-Virtualized Binary Code Simplification. In
2018 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’18), October 15ś19, 2018, Toronto, ON, Canada. ACM, New York, NY,
USA, 17 pages. https://doi.org/10.1145/3243734.3243827
1 INTRODUCTION
Virtualization, a general technique that runs a virtual machine on
versatile platforms [63], has become an important technique for
software protection to obfuscate code [5, 23, 62]. When applied
to code obfuscation, virtualization transforms the selected parts
of a program to bytecode in a new, custom virtual instruction set
architecture (ISA). At execution time, the bytecode is emulated
by an embedded virtual machine (or interpreter) on the real ma-
chine. The new ISA can be designed independently, and thus the
bytecode and interpreter greatly differ from those in every pro-
tected instance. In this way, the program’s original code never
reappears. Moreover, the bytecode is typically implemented in a
RISC-like style, in which a source x86 instruction will be translated
to a sequence of bytecode operations. Consequently, the number
of native instructions executed increases significantly [36], and
extracting the semantics of the custom ISA is like finding a nee-
dle in a haystack. Furthermore, virtualization obfuscation can be
seamlessly integrated with other obfuscation schemes such as data
encoding [16, 86], metamorphism [1, 85], and control flow obfusca-
tion [17, 74], rendering traditional static and dynamic analysis tech-
niques ineffective [13, 32]. Over the last decade virtualization obfus-
cation, generally recognized as one of the most advanced techniques
to impede reverse engineering [39, 50], has been developed as a set
of commercial software protection products [45, 46, 66, 69, 73] and
research tools [15, 53, 68].
The potency of virtualization obfuscation has definitely attracted
the attention of malware developers, who are highly motivated
to seek more sophisticated techniques for disguising their mali-
cious code and circumventing anti-virus solutions [43, 54]. An
increasing number of malware are armored by virtualization such
as Virus.Win32.Goblin [47] and Trojan.Win32.Clampi [26]. How-
ever, the heavy-weight obfuscation strength also comes with a cost
of performance and compatibility. Because the virtualized code
does not execute natively, its runtime overhead is considerably
high. A recent study shows that the slowdown varies from 1.9X
to 660.9X when only 10% of the code is virtualized [77]. The user
manual of Code Virtualizer [44] recommends that users only pro-
tect a short, core code snippet and avoid program hot spots such
as loop structures that iterate many times. Another limitation is
the compatibility issue. Some complicated program structures (e.g.,
switch/case statements and exception handlers) and x86 instruc-
tions (e.g., SIMD and AES instruction set) might not be correctly
translated by the virtualization tools [55]. The same study [77] also
confirms the compatibility problem in that most test programs exit
exceptionally when virtualization obfuscation level reaches 30%.
Therefore, unlike the binary packers, another common obfuscation
scheme for whole binary code protection [56, 71], malware devel-
opers only virtualize selected, key parts of the malicious code in
practice [78].
Most of existing work relies on dynamic analysis to deobfuscate
virtualized program. The first category of work attempts to reverse
engineer the bytecode interpreter [29, 30, 51, 55, 59]. Dynamic anal-
ysis is used to identify the decode-dispatch based interpretation,
which is the classic way to implement an instruction set virtualiza-
tion [63]. The distinguishing feature is a central loop that fetches a
piece of bytecode based on the current value of a virtual program
counter (i.e., decode), and then dispatches to the corresponding
handler which contains the machine code to emulate the bytecode.
Since bytecode handlers themselves are usually heavily obfuscated,
they need to be further simplified, e.g., by program synthesis [9],
symbolic execution [10, 37], or compiler optimizations [22, 57, 80].
The second category tries to strip off the virtualization obfuscation
layer from the tedious execution instructions [19, 40, 67, 83]. In this
category, dynamic taint analysis or concolic execution is applied
to identify the instructions that contribute to the real program be-
havior. However, a common limitation in both categories is that
they assume the scope of virtualization-obfuscated code is already
known. None of them discusses how to automatically extract the
virtualized code part from an obfuscated program. Besides, the way
of designing ground truth dataset in prior evaluations is biased
either: they perform whole program virtualization on very tiny,
synthetic programs [9, 19, 30, 59, 83]. Unfortunately, this assump-
tion may not be tenable for real-world applications where only part
of the code is virtualized.
Automatic detection of the virtualized code is an indispensable
step before deobfuscation procedures. Accurate boundaries can
quickly locate virtualized code and significantly reduce the over-
head, as deobfuscation procedures are generally quite expensive.
However, locating accurate boundaries is a nontrivial task. First,
decode-dispatch loops appear in many normal applications such
as web servers and user interfaces. Second, advanced code emu-
lators have adopted alternative interpretation structures, such as
threaded interpretation [8, 24], to hide the decode-dispatch fea-
tures. In threaded interpretation, the dispatch loop is inlined to the
individual handler functions. Worse still, we have observed fake
decode-dispatch loops that look very similar to real ones. Those
loops usually contain an increasing integer variable, which mimics
the virtual program counter inside the dispatcher. Their purpose is
to mislead the deobfuscation methods that rely on looking for the
decode-dispatch loop [29, 30, 37, 51, 55, 59].
In this paper, we propose a novel method, called VMHunt, to au-
tomatically identify and simplify virtualized code sections from an
execution trace. VMHunt does not assume any particular structure
of the bytecode interpreter in use. Instead, it locates the boundary
of partially-virtualized code based on an inherent property of stan-
dard virtual machine (VM) design: context switches occur between
virtualization application and native OS to ensure isolation [33]. The
code snippet inside a virtualized context is the virtualized code.
With the boundary information, VMHunt extracts the core part of
virtualized code by slicing the instructions that affect the native
context. Finally, VMHunt includes a new method called multiple
granularity symbolic execution to further simplify the sliced code.
Compared to the traditional symbolic execution, our design can
better revert data encoding effect and lead to more concise symbolic
formulas, which represent the original semantics of the virtualized
code. Furthermore, with the unprotected version of code, we can
use the generated symbolic formulas to verify the correctness of
VMHunt. Any semantic discrepancy may indicate that VMHunt is
not implemented perfectly right.
We have evaluated VMHunt on the latest version of well-known
virtualization obfuscators such as Code Virtualizer [45], VMPro-
tect [73], EXECryptor [66], and Themida [46] in benign and ma-
licious scenarios. Our experiment shows that VMHunt correctly
extracts the virtualized section from a tedious execution trace with-
out false positives. VMHunt’s trace simplification can reduce the
number of inflated instructions by several orders of magnitude,
and multiple granularity symbolic execution delivers a significantly
concise form which accurately reveals the semantics of the vir-
tualized code. Our experiments demonstrate VMHunt enables an
accurate analysis and understanding of virtualization-obfuscated
binary code, and it is essential for rapid response to emerging mal-
ware threats.
Scope and Contributions. VMHunt does not attempt to super-
sede existing virtualization deobfuscation methods, but rather com-
plements them by narrowing down the search scope for virtual-
ized code snippets, and then providing a simplified view of those
snippets. Other state-of-the-art techniques such as program syn-
thesis [9] and compiler optimizations [57] can work directly on
VMHunt’s simplified trace and achieve better reverse engineering
result. In summary, we make the following contributions.
• We propose a general method to detect the virtualized code
section from a program execution trace. This challenging
problem has been largely overlooked by the existing work
which relies on an over-simplistic assumption.
• We design a new optimization method to simplify the exe-
cution trace based on boundary information. Our multiple
granularity symbolic execution extends the capability of sym-
bolic execution in analyzing malicious binary code.
• Our approach is capable of performing correctness test-
ing to the deobfuscation results, which is rarely done by
2.3 Virtualization-Obfuscated Malware
The strength of code virtualization comes with the problems of
high performance penalty and poor compatibility. Whole program
virtualization may not be an optimal option to cyber-criminals, as
it can add new telltale signs such as high CPU usage and delay mal-
ware propagation. In practice, malware developers opt to virtualize
the core parts of malware. For example, FinSpy malware applies
custom code virtualization to protect command-and-control infor-
mation [52, 70]; SpyEye uses VMProtect to protect the malware
builder [65]; some malware samples choose to virtualize stolen
code to evade user-level API hooking [31, 78]. However, none of
the previous deobfuscation work studies the problem of partially-
virtualized code, and many of them can only deal with the classic
code emulator structure. Our approach will bridge this gap.
3 OVERVIEW
Figure 3 shows an overview of VMHunt’s workflow, which contains
three key components.
(1) Virtualized Snippet Boundary Detection. Given a virtualized
program, we first run it to record an execution trace. Then
we identify the virtualized snippet boundary in the trace
by detecting context switch instructions. Those instructions
switch context between the native environment and the
virtualized environment.
(2) Virtualized Kernel Extraction. After the boundary is detected,
we analyze and extract the kernel of the virtualized snippet.
The kernel refers to instructions in the virtualized snippet
that affect native program environment. It reveals the se-
mantics of the virtualized snippet.
(3) Multiple Granularity Symbolic Execution. We propose a new
symbolic execution called łmultiple granularity symbolic
executionž to simplify virtualized snippets. Our method rep-
resents the semantics of kernel virtualized code as concise
symbolic formulas.
4 VIRTUALIZED TRACE BOUNDARY
DETECTION
4.1 Trace Logging
VMHunt’s trace log component is based on Intel Pin [38], a dynamic
binary instrumentation framework. The trace logger can record
all the instructions executed during runtime except those inside
system calls. In addition to the instructions, a trace also includes
plenty of runtime information. Overall, the following information
is recorded in a trace.
(1) The memory address of every instruction
(2) The instruction name (opcode), which describes the opera-
tion that the instruction is performing
(3) The source and destination operands. Usually there are three
types of operands: immediate value, register, or memory
address
(4) Runtime information, including the content in all registers
and memory accessing addresses
4.2 Context Switch Instructions
One of our major observation is that code virtualization is typi-
cally applied to some sensitive code sections, and the rest parts still
run as native code. Therefore, during the execution of a partially-
virtualized program, it will switch between the native environment
and the virtualized environment. Figure 4 presents a trace example
showing the execution of a virtualized program. Before line 1, the
program is running in the native context. The instructions from
line 2 to 9 save the native context by pushing all general registers
and the flag register to stack. After that, the jump instruction at
line 10 transfers the execution to the virtualized environment. From
line 11 to 15, the program is running inside the virtualized context.
After reaching the end of the virtualized part at line 15, the instruc-
tions from line 16 to line 23 restore the context by popping values
from memory to registers. Finally, the jump instruction at line 24
transfers the execution back to the native program and continues
the execution.
In this paper, we define the instructions that save or restore the
context between the native and virtualized environment as context
switch instructions. Specifically, there are two categories of context
switch instructions: context saving instructions and context restor-
ing instructions. Context saving instructions save all registers to
memory (typically stack), such as the instructions from line 2 to
9 in Figure 4. Similarly, context restoring instructions restore all
registers from memory (typically also stack), such as the instruc-
tions from line 16 to 23 in Figure 4. The term łcontextž in this paper
refers to the content in all registers.
Two VM Architectures: Stack vs. Register. A long-running dis-
cussion in VM design is whether an interpreter should be imple-
mented via stack-based architecture1 or register-based architecture,
because these two designs have their own pros and cons [21, 60].
We wish to emphasize here that context switch instructions are
independent of any specific VM architecture. For example, Code Vir-
tualizer [45] provides multiple VMs including both stack-based VM
and register-based VM, and we find context switch instructions are
very common among different VMs. Since all partially-virtualized
programs include context switch instructions, they are significant
symbols for the beginning or end of virtualized snippets. Therefore,
identification of these context switch instructions is the first step
towards the detection of virtualized snippets.
Apparently, for the ideal case shown in Figure 4, identifying
context switch instructions is fairly straightforward. One intuitive
solution is using a pattern match method to match instruction
sequences that push all registers to stack or pop them back. How-
ever, according to our observation, virtualizer developers have
already taken advantage of obfuscation methods such as code mu-
tation [1, 85] to hide context switch instructions. Figure 5(a) shows
an example of obfuscated context saving instructions in Code Vir-
tualizer, and we have trimmed and simplified the example for better
presentation. In Figure 5(a), the instructions from line 4 to 15 is
actually an obfuscated version of push edi. In order to detect
the context switch instructions within an obfuscated execution
trace, which usually contains millions of instructions, we propose
a three-step method to effectively identify them. The three steps
are normalization, simplification, and clustering.