的情况下将共享库载入内存；如果这个库已被加载，则 dlopen 仅增加指向这个库的引用计
数。同样的，dlclose 只是将库的引用计数减一；只有当引用计数到达 0 的时候这个函数才
会真正地将库卸载。 
如果你的共享库是用 C++ 语言写成，则你需要将那些用于提供外界访问的函数和变量
用 extern “C” 链接修饰符进行修饰。假设你的共享库中有一个 C++ 函数 foo，而你希望通
过 dlsym 访问这个函数，你需要这样对它进行声明： 
extern “C” void foo (); 
这样就可以防止 C++ 编译器对函数名称进行修饰。否则，C++ 编译器可能将函数名从
foo 变为另外一个看起来很可笑的名字；这个名字中包含了其它一些与这个函数相关的信息。
C 编译器不会对标识符进行修饰；它会直接使用任何你指定的函数或变量名。 
www.AdvancedLinuxProgramming.com 
36
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
第三章：进程 
一个程序的一份运行中的实例叫做一个进程。如果你屏幕上显示了两个终端窗口，你很
可能同时将一个终端程序运行了两次——你有两个终端窗口进程。每个窗口可能都运行着一
个 shell；每个运行中的 shell 都是一个单独的进程。当你从一个 shell 里面调用一个程序的时
候，对应的程序在一个新进程中运行；运行结束后 shell 继续工作。 
高级程序员经常在一个应用程序中同时启用多个协作的进程以使程序可以并行更多任
务、使程序更健壮，或者可以直接利用已有的其它程序 
本章中将要介绍的各种进程操作函数与其它 UNIX 操作系统中的进程操作函数非常相
似。多数函数都在这个包含文件中声明了原型；检查对应的手册页以确保无误。 
3.1 查看进程 
就算你只是坐在你的电脑前面，进程也在电脑内运行着。每个运行着的程序都会运行着
一个或几个进程。让我们从观察那些正在系统中运行的进程开始。 
3.1.1 进程 ID 
Linux 系统中的每个进程都由一个独一无二的进程 ID（通常也被称为 pid）标识。进程
ID 是一个 16 位的数字，由 Linux 在创建新进程的时候自动依次分配。 
每个进程都有一个父进程（除了将在 3.4.3 节“僵尸进程”中介绍的特殊的 init 进程）。
因此，你可以把 Linux 中的进程结构想象成一个树状结构，其中 init 进程就是树的“根”。
父进程 ID（ppid）就是当前进程的父进程的 ID。 
当需要从 C 或 C++程序中使用进程 ID 的时候，应该始终使用中定义的
pid_t 类型。程序可以通过 getpid()系统调用获取自身所运行的进程的 ID，也可以通过
getppid()系统调用获取父进程 ID。例如下面一段程序（列表 3.1）输出了程序运行时的进程
ID 和父进程 ID。 
代码列表 3.1 (print-pid.c) 输出进程 ID 
#include  
#include  
int main () 
{ 
  printf ("The proces ID is %d\n", (int) getpid ()); 
  printf ("The parent process ID is %d\n", (int) getppid ()); 
  return 0; 
} 
把这个程序运行几次并观察每次的结果，会发现每次都会输出一个不同的进程 ID，因
为每次运行这个程序都建立了一个新进程。但是，如果你每次都从同一个 shell 里面调用，
父进程 ID（也就是 shell 进程的 ID）并不会改变。 
www.AdvancedLinuxProgramming.com 
37
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
3.1.2 查看活动进程 
运行 ps 命令可以显示当前系统中运行的进程。GNU/Linux 版本的 ps 有很多选项，因为
它试图与很多不同 UNIX 版本的 ps 命令兼容。这些选项决定显示哪些进程以及要显示的信
息。 
默认情况下，调用 ps 会显示当前调用 ps 命令的终端或终端窗口所控制的所有进程的相
关信息。例如： 
% ps 
  PID TTY          TIME CMD 
21693 pts/8    00:00:00 bash 
21694 pts/8    00:00:00 ps 
这次调用 ps 显示了两个进程。第一个 bash 就是在这个终端上运行的 shell 程序。第二
个是正在运行的 ps 实例自身。第一列被标记为 PID，分别显示了每个进程的 ID。 
可以利用下面这个命令来仔细的研究你的 GNU/Linux 系统中运行了什么： 
% ps -e -o pid,ppid,command 
这里-e 选项让 ps 命令显示系统中运行的所有进程的信息。而-o pid,ppid,command 选项
告诉 ps 要显示每个进程的哪些信息——这里，我们让 ps 显示进程 ID、父进程 ID 以及进程
运行的命令行。 
www.AdvancedLinuxProgramming.com 
38
ps 输出格式 
当在调用 ps 时附加了-o 选项，你可以用一个逗号分割的列表指定你需要显示的进程
信息。例如，ps -o pid,user,start_time,command 会显示进程 ID，运行该进程的
用户名，进程开始的时间（wall clock time，墙面钟时间），以及进程运行的命令。参考
ps 手册页中列出的完整字段代码列表。你也可以指定-f（完整列表），-l（长列表）或-j
（任务列表）选项以得到三种预定的列表格式。 
这里是我在自己的系统上运行上面这条命令后，得到结果的开始和最后几行。你可能得
到不同的结果；这取决于你系统中运行着的程序。 
% ps -e -o pid,ppid,command 
  PID  PPID COMMAND 
    1     0 init [5] 
    2     1 [kflushd] 
    3     1 [kupdate] 
... 
21725 21693 xterm 
21727 21725 bash 
21728 21727 ps -e -o pid,ppid,command 
注意 ps 命令的父进程 ID，21727，就是我调用 ps 命令的 shell，也就是 bash 的进程 ID。
Bash 的父进程 ID 是 21725，也就是运行着 shell 的 xterm 程序的进程 ID。 
3.1.3 中止一个进程 
你可以用 kill 命令中止一个正在运行的进程。只要将需要中止的进程 ID 作为命令行
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
参数调用 kill 就可以。 
kill命令通过对目标进程发送SIGTERM（中止）
１信号来中止目标进程。在这个程序
没有显式处理或忽略了SIGTERM信号的情况下，这会导致目标进程被终止。3.3 节“信号”
详细介绍了信号。 
3.2 创建进程 
通常有两种方法可以创建进程。第一种方法相对简单，但是在使用之前应慎重考虑，因
为它效率低下，而且具有不容忽视的安全风险。第二种方法相对复杂了很多，但是提供了更
好的弹性、效率和安全性。 
3.2.1 使用 system 
C 标准库中的 system 函数提供了一种调用其它程序的简单方法。利用 system 函数调用
程序结果与从 shell 中执行这个程序基本相似。事实上，system 建立了一个运行着标准 
Bourne shell（/bin/sh）的子进程，然后将命令交由它执行。例如，列表 3.2 节的程序调用 ls 
命令显示根目录的内容，正如你在 shell 中输入 ls -l /一样。 
代码列表 3.2 （system.c）使用 system 函数 
#include  
int main () 
{ 
  int return_value; 
  return_value = system ("ls -l /"); 
  return return_value; 
} 
调用system 函数的返回值就是被调用的 shell 命令的返回值。如果shell自身无法运行，
system 函数返回 127；如果出现了其它错误，system 返回 -1。 
因为 system 函数使用 shell 调用命令，它受到系统 shell 自身的功能特性和安全缺陷的
限制。你不应该试图依赖于任何特定版本的 Bourne shell。许多 UNIX 系统中，/bin/sh 是
一个指向其它 shell 的符号链接。例如，在绝大多数 GNU/Linux 系统中，/bin/sh 指向 bash
（Bourne-Again SHell），并且不同的 Linux 系统使用不同版本的 bash。例如，以 root 权
限通过 system 调用一个程序，在不同的 Linux 系统中可能得到不同结果。因此，fork 和
exec 才是推荐用于创建进程的方法。 
3.2.2 使用 fork 和 exec 
DOS 和 Windows API 都包含了 spawn 系列函数。这些函数接收一个要运行的程序名作
为参数，启动一个新进程中运行它。Linux 没有这样一个系统调用可以在一个步骤中完成这
些。相应的，Linux 提供了一个 fork 函数，创建一个调用进程的精确拷贝。Linux 同时提供
www.AdvancedLinuxProgramming.com 
39
１ kill 命令还可以用于对进程发送其它的信号。3.4 节“进程中止”介绍了这些内容。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
了另外一系列函数，被称为 exec 族函数，使一个进程由运行一个程序的实例转换到运行另
外一个程序的实例。要产生一个新进程，应首先用 fork 创建一个当前进程的副本，然后使
用 exec 将其中一个进程转为运行新的程序。 
调用 fork  
一个进程通过调用 fork 会创建一个被称为子进程的副本进程。父进程从调用 fork 的地
方继续执行；子进程也一样。 
那么，如何区分两个进程？首先，子进程是一个新建立的进程，因此有一个与父进程不
同的进程 ID。因此可以通过调用 getpid 检测自身运行在子进程还是父进程。不过，fork 函
数对父子进程提供了不同的返回值——一个进程“进入”fork 调用，而另外一个则从调用
中“出来”。父进程得到的 fork 调用返回值是子进程的 ID。子进程得到的返回值是 0。因为
任何进程的 ID 均不为 0，程序可以借此很轻松的判断自身运行在哪个进程中。 
列表 3.3 是一个使用 fork 复制进程的例子。需要注意的是，if 语句的第一段将仅在父进
程中运行，而 else 部分则在子进程中运行。 
代码列表 3.3 （fork.c）用 fork 复制程序进程 
#include  
#include  
#include  
int main ()  
{ 
  pid_t child_pid; 
  printf ("the main program process ID is %d\n", (int) getpid 
()); 
  child_pid = fork (); 
  if (child_pid != 0) { 
    printf ("this is the parent process, with id %d\n", (int) 
getpid ()); 
    printf ("the child's process ID is %d\n", (int) child_pid); 
  } 
  else 
    printf ("this is the child process, with id %d\n", (int) 
getpid ()); 
  return 0; 
} 
调用 exec 族函数 
Exec 族函数用一个程序替换当前进程中正在运行的程序。当某个 exec 族的函数被调用
www.AdvancedLinuxProgramming.com 
40
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
时，如果没有出现错误的话，调用程序会被立刻中止，而新的程序则从头开始运行。 
Exec 族函数在名字和作用方面有细微的差别。 
· 名称包含 p 字母的函数（execvp 和 execlp）接受一个程序名作为参数，然
后在当前的执行路径（译者注：环境变量 PATH 指明的路径）中搜索并执行这个
程序；名字不包含 p 字母的函数在调用时必须指定程序的完整路径。 
· 名称包含 l 字母的函数（execl、execlp 和 execle）接收一个字符串数组作
为调用程序的参数；这个数组必须以一个 NULL 指针作为结束的标志。名字包含 v
字母的函数（execv，execvp 和 execve）以 C 语言中的 vargs（译者注：原文为 varargs，
疑为笔误）形式接受参数列表。（译者注：原文中 v 和 l 的部分颠倒，疑为笔误。
已参考 execl(3)手册页进行了更正。） 
· 名称包含 e 字母的函数（execve 和 execle）比其它版本多接收一个指明了
环境变量列表的参数。这个参数的格式应为一个以 NULL 指针作为结束标记的字
符串数组。每个字符串应该表示为“变量=值”的形式。 
因为 exec 会用新程序代替当前程序，除非出现错误，否则它不会返回。 
传递给程序的参数列表和当你从 shell 运行时传递给程序的命令行参数相似。新程序可
以从 main 函数的 argc 和 argv 参数中获取它们。请记住，当一个程序是从 shell 中被调用的
时候，shell 程序会将第一个参数（argv[0]）设为程序的名称，第二个参数（argv[1]）为第
一个命令行参数，依此类推。当你在自己的程序中使用 exec 函数的时候，也应该将程序名
称作为第一个参数传递进去。 
将 fork 和 exec 结合使用 
运行一个子程序的最常见办法是先用 fork 创建现有进程的副本，然后在得到的子进程
中用 exec 运行新程序。这样在保持原程序继续运行的同时，在子进程中开始运行新的程序。 
列表 3.4 中的程序与 3.2 中的作用相似，也是用 ls 命令显示系统根目录下的内容。与前
面例子不同的是，它直接传递-l 和 / 作为参数并调用了 ls 命令，而不是通过运行一个 shell 再