postgres=> select gp_upsert_batch('public', 'test', array['id1','id2'], array['{"id1":1, "id2":2, "info":"digoal  ab", "c1":123, "c2":1.1, "c3":1.9999, "crt_time":"2018-01-01 10:10:10"}'::json, '{"id1":1, "id2":2, "info":"digoal  ab", "c1":123, "c3":2.9999, "crt_time":null}'::json, '{"id1":1, "id2":1, "info":"digoal  ab", "c1":123, "c3":2.9999, "crt_time":null}'::json]);  
 gp_upsert_batch   
-----------------  
(1 row)  
postgres=> select ctid,* from test;  
 ctid  | id1 | id2 |    info    | c1  | c2  |         c3         | c4 | crt_time   
-------+-----+-----+------------+-----+-----+--------------------+----+----------  
 (0,7) |   1 |   2 | digoal  ab | 123 | 1.1 | 2.9998999999999998 |    |   
 (0,4) |   1 |   1 | digoal  ab | 123 |     | 2.9998999999999998 |    |   
(2 rows)  
```  
3、压测  
```  
vi test.sql  
\set id1 random(1,10000)  
\set id2 random(10001,20000)  
\set id3 random(20001,30000)  
\set id4 random(30001,40000)  
\set id5 random(40001,50000)  
\set id6 random(50001,60000)  
\set id7 random(60001,70000)  
\set id8 random(70001,80000)  
\set id9 random(80001,90000)  
\set id10 random(90001,100000)  
\set id11 random(100001,110000)  
select gp_upsert_batch('public', 'test', array['id1','id2'], array['{"id1": :id1, "id2": :id2, :a}'::json, '{"id1": :id1, "id2": :id3, :a}'::json, '{"id1": :id1, "id2": :id4, :a}'::json, '{"id1": :id1, "id2": :id5, :a}'::json, '{"id1": :id1, "id2": :id6, :a}'::json, '{"id1": :id1, "id2": :id7, :a}'::json, '{"id1": :id1, "id2": :id8, :a}'::json, '{"id1": :id1, "id2": :id9, :a}'::json, '{"id1": :id1, "id2": :id10, :a}'::json, '{"id1": :id1, "id2": :id11, :a}'::json]);  
```  
4、压测结果，吞吐确实好一点  
```  
PGOPTIONS='-c gp_session_role=utility' pgbench -M simple -n -r -P 1 -f ./test.sql -c 96 -j 96 -T 120 -D a='"info":"digoal  ab", "c1":123, "c2":1.1, "c3":1.9999, "crt_time":"2018-01-01 10:10:10"'  
transaction type: ./test.sql  
scaling factor: 1  
query mode: simple  
number of clients: 96  
number of threads: 96  
duration: 120 s  
number of transactions actually processed: 108668  
latency average = 106.000 ms  
latency stddev = 46.055 ms  
tps = 905.181364 (including connections establishing)  
tps = 905.489034 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set id1 random(1,10000)  
         0.000  \set id2 random(10001,20000)  
         0.000  \set id3 random(20001,30000)  
         0.000  \set id4 random(30001,40000)  
         0.000  \set id5 random(40001,50000)  
         0.000  \set id6 random(50001,60000)  
         0.000  \set id7 random(60001,70000)  
         0.000  \set id8 random(70001,80000)  
         0.000  \set id9 random(80001,90000)  
         0.000  \set id10 random(90001,100000)  
         0.000  \set id11 random(100001,110000)  
       105.988  select gp_upsert_batch('public', 'test', array['id1','id2'], array['{"id1": :id1, "id2": :id2, :a}'::json, '{"id1": :id1, "id2": :id3, :a}'::json, '{"id1": :id1, "id2": :id4, :a}'::json, '{"id1": :id1, "id2": :id5, :a}'::json, '{"id1": :id1, "id2": :id6, :a}'::json, '{"id1": :id1, "id2": :id7, :a}'::json, '{"id1": :id1, "id2": :id8, :a}'::json, '{"id1": :id1, "id2": :id9, :a}'::json, '{"id1": :id1, "id2": :id10, :a}'::json, '{"id1": :id1, "id2": :id11, :a}'::json]);  
```  
## 参考  
[《Greenplum & PostgreSQL UPSERT udf 实现 - 1 单行模式》](../201806/20180604_01.md)    
### Greenplum, PostgreSQL性能诊断，部署参考
[《Greenplum PostgreSQL --enable-profiling 产生gprof性能诊断代码》](../201601/20160125_01.md)
[《PostgreSQL on Linux 最佳部署手册 - 珍藏级》](../201611/20161121_01.md)
[《PostgreSQL 源码性能诊断(perf profiling)指南 - 珍藏级》](../201611/20161129_01.md)
[《PostgreSQL 代码性能诊断之 - OProfile & Systemtap》](../201505/20150509_01.md) 
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")