### 4.1 Validation

To validate the accuracy of the tool, we cross-verified the packets reported by RILAnalyzer with those captured by `tcpdump`. We conducted ten series of 100 ICMP packets at intervals of 1 second and 10 milliseconds, DNS lookups to `google.com`, and HTTP requests to BBC's front page. Additionally, we ran a full overnight test with real user traffic. Both RILAnalyzer and `tcpdump` logged exactly the same packets.

Accurate packet timing in user space is challenging: Nflog only provides timestamps for outgoing packets as recorded by the Linux kernel. Therefore, these timestamps must be added during user-space processing, which may be significantly later than the actual packet arrival time. This granularity is sufficient for analyzing app traffic and control-plane interactions, given that the baseband polling interval is currently limited to 1 second. To achieve more accurate timing, both modem firmware and the Linux kernel would need enhancements.

### 4.2 Performance and Limitations

The current version of RILAnalyzer is limited to Intel Infineon XGold chipsets, which are used in popular Android devices such as the Samsung Galaxy SII, SIII, Note 2, and Nexus. We tested our system on the SII and SIII versions. Although the same commands work for LTE networks, we could not test them due to limited LTE deployment in Europe. Focusing on single chipsets may introduce specific behaviors and interaction issues due to vendor RIL implementation differences. However, our case study (Section 5) was conducted on devices with the same radio baseband, ensuring accurate discovery of network and application differences. As licensed monitoring tools for Qualcomm chipsets are available, we expect similar features in other product vendors. Supporting other chipsets is constrained by the effort required to reverse-engineer hidden commands. A more efficient solution would be for vendors to expose this information to the OS.

We monitored the CPU and memory consumption of RILAnalyzer under both idle and stress conditions on a Samsung Galaxy S2 (Dual-core 1.2 GHz Cortex-A9). The idle experiment lasted three hours with Google Services, Skype, and Facebook apps active in the background but without any user interaction. Stress conditions were simulated using the Speedtest application. During the idle experiment, RILAnalyzer consumed an average of 0.16% of CPU and 22 MB of physical memory. Applications generated periodic traffic, causing CPU consumption variations that remained below 10%. In the stress test, at the maximum observed download throughput (+5 Mbps), the maximum CPU consumption was 47%, using approximately 42 MB of physical memory. The high memory load is due to the logging of all aspects of the running systems and periodic polling of the radio state.

The increase in resource usage is due to the iptables-based approach, where each packet is duplicated, forwarded to Nflog, annotated with additional information, and recorded. Due to platform limitations, the current version of the tool relies on polling mechanisms to associate applications, network traffic, and cellular state. This adds computational and energy overheads on embedded systems like Android, which have aggressive sleep policies. While such overheads are undesirable, they could be reduced if vendors open their APIs to efficiently gather control plane data within the system.

The current version requires sufficient internal storage to log data for mid-term studies. Each RNC promotion generates 62±2 bytes of log data, and each logged packet (including process name) generates 130±10 bytes. RILAnalyzer is intended for limited-duration studies as a measurement tool in real environments rather than a data collection app for a large user base. However, we plan to extend the control-plane traces using other hidden codes and build an online facility for collecting and processing anonymized data for users, researchers, and developers interested in identifying network and app inefficiencies.

### 5. Case Studies

To demonstrate RILAnalyzer's capabilities, we instrumented eight Samsung Galaxy SII handsets owned by experienced Android users subscribed to different mobile operators. They were asked to run the tool for one complete week with their normal set of apps. The logged data accounts for more than 1200 hours of mobile activity. During this period, 70 applications sent or received more than 2.6 million packets, causing +138,000 RNC transitions (29,000 promotions to connected states such as FACH and DCH). Using the data collected with RILAnalyzer, we characterized the diversity of RNC state machines across different networks and their effects on resource consumption (Section 5.1). Finally, we evaluated the network costs associated with TCP operations to reach the backend infrastructure in four popular applications (Section 5.2).

#### 5.1 RNC State Machine Dynamics

In the past, RNC state machines have been modeled using probes and external power meters, which identified one of the main energy sinks in mobile systems. However, these methods are static and inaccurate as they are obtained "in situ." In contrast, RILAnalyzer records actual device RNC states, demonstrating that RNC state machines are much more diverse, necessitating more complex solutions for improving device performance and energy consumption.

| Application | Heartbeats & FIN (%) | Server-side (%) |
|-------------|----------------------|-----------------|
| AccuWeather | 90.9                 | 10.3            |
| Twitter     | 1.5                  | 0.1             |
| Skype       | 69.2                 | 30              |
| WhatsApp    | 82.5                 | 18.9            |
| Facebook    | 92.7                 | 20.4            |
| Google GCM  | 100                  | 0               |
| All Apps    | 41.0                 | 69.6            |

Using RILAnalyzer, we found that TCP heartbeats and FINs alone account for a significant proportion of RNC promotions. For example, in the case of WhatsApp, a large fraction of RNC promotions associated with these operations are due to TCP heartbeats maintaining connections, while others often include application-level information.

For network-intensive applications like Skype and push notification mechanisms, a large portion of total promotions are triggered by server-side packets, indicating where connection maintenance logic is located. On the other hand, applications like Facebook rely on Google's push notifications, reducing the need to maintain their own TCP connections. These observations suggest that to reduce the energy and network overheads of mobile traffic, it is essential to control downlink traffic (e.g., using middleboxes or enhancement proxies) in addition to controlling uplink on the mobile handset.

### 6. Conclusion

In this work, we presented RILAnalyzer, a tool that facilitates the analysis of cellular network issues without requiring access to the internal components of the cellular network. We prototyped the tool on the Android platform for popular smartphone devices. RILAnalyzer is designed for use outside of laboratory environments, allowing for open and accurate mobile device measurement studies across many users, applications, networks, and geographical regions. We evaluated the tool's performance and discussed its limitations, some of which are inherent to running within a mobile device and not relying on external resources.

We demonstrated RILAnalyzer's ability to perform accurate cross-layer analysis on mobile systems. First, we showed important differences in RNC state machines across four mobile operators in two European countries. Second, we exposed inefficient connection maintenance logic in popular applications, caused by the large number of backend systems they rely on and suboptimal use of TCP. We are releasing the tool publicly [18] for the mobile research community to use, extend, and improve.

### Acknowledgments

This material is based upon work supported by the EPRSC INTERNET Project, the Department of Homeland Security under Contract N66001-12-C-0128, by the NSF under grant 1213157, and by the European Commission under grant agreement FP7-318627 (mPlane). The authors would also like to thank the volunteers, the anonymous reviewers, and our shepherd Aditya Akella (University of Wisconsin-Madison) for their constructive feedback on the preparation of the final version of this paper.