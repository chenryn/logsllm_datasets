### Centralization and Security Benefits

Centralizing security features, such as those provided by OpenSSL, offers several advantages. For instance, updates can be distributed more quickly and easily compared to patching individual applications. Additionally, given the widespread use of OpenSSL, it can act as a single point of failure, as seen with the Heartbleed vulnerability.

Another benefit of centralization is the simplification of the security landscape. Currently, thousands of individual applications must each correctly implement OpenSSL or similar cryptographic libraries. Experience shows that many applications are at risk due to developer errors. Under the Secure Socket API (SSA), these security flaws are likely to be less common. This is because invoking the SSA through the POSIX interface and offloading TLS functionality to the operating system is simpler.

### Configuration and Access Control

Regardless of the underlying implementation, the SSA should protect its configuration files from unauthorized edits. Since configuration can affect the security of TLS connections globally, only superusers should be allowed to make modifications. Developers can still bundle an SSA configuration profile for their application, which can be stored in a standard location and assigned appropriate permissions during installation. Many software packages, such as Apache webserver packages, already follow this model by installing protected configuration files that only administrators can edit.

### Responsibility and Accountability

The SSA highlights an existing issue in security: the delineation of responsibilities among network administrators, operating systems, and developers. Implementation bugs can be attributed to the SSA, similar to OpenSSL bugs. However, vulnerabilities due to improper configurations can be the fault of any of these parties. While we believe administrators should have the final say over their systems, some developers may want to ensure their own security needs are met, especially for legal reasons. In such cases, one solution is for developers to ship their applications with a notice that disclaims any warranty if the administrator lowers TLS security below a specified threshold. This misalignment of security practices between developers and administrators is also present in other areas, such as running software as a privileged user unnecessarily, making configuration files globally writable, or using sensitive software with weak login credentials.

### Limitations and Future Work

Our exploration has revealed several limitations of our approach, implementation, and the SSA itself. These limitations also suggest potential avenues for further research and expansion.

First, our static analysis of code using libssl did not determine what code is actually executed at runtime. Performing rigorous symbolic execution or runtime analysis of such a large corpus of packages was outside the scope of our study. As a result, we may have overestimated or underestimated the prevalence of certain OpenSSL functions. However, static analysis provides insight into the code developers write, leading us to find that many developers express TLS options through compilation controls. We also limited our analysis to applications using OpenSSL, and the usage of GnuTLS and other libraries may differ, potentially affecting our design recommendations.

Since the SSA targets the POSIX socket API, we believe similar implementations can be deployed on operating systems that closely adhere to this standard, such as Android and MacOS. Windows also supports this API, although with minor deviations, so the kernel module component of our implementation would need to be adapted accordingly.

One limitation of the SSA is that it does not easily support asynchronous callbacks. While we did not find a strict need for this feature in TLS management, such a use case might arise. Hypothetically, `setsockopt` could adopt an option that allows a function pointer to be passed as the option value, which could then be invoked by the SSA implementation when the corresponding event is triggered. However, providing arbitrary functions to the kernel for execution is risky, and invoking a process function from the kernel is not straightforward, typically limited to signals and their handlers.

Future work could explore the suitability of the SSA for other network security protocols, such as QUIC. The consolidation of traditionally separate network layers, connection multiplexing, and use of UDP in QUIC would test the flexibility of the POSIX socket API for modern security protocols.

### Related Work

There is extensive research on the insecurity of applications using security libraries and methods to improve certificate validation. Here, we outline related work aimed at simplifying and securing TLS libraries and improving administrator control.

**Simplified TLS Libraries:**
- **libtlssep**: A simplified userspace library for TLS that uses privilege separation to isolate sensitive keys, reducing the payoff for malicious parties exploiting application bugs.
- **LibreSSL**: An OpenSSL fork that includes a simplified userspace library for TLS, removing vulnerable protocols like SSL 3.0.
- **Secure Network Programming (SNP)**: An older security API that predates OpenSSL and SSL/TLS, allowing programs to use the GSSAPI to access security services in a way that resembles the Berkeley sockets API.

**Administrator Control Over TLS:**
- **Fahl et al.**, **MITHYS**, **TrustBase**, and **CertShim**: Provide administrator and operating system control over TLS certificate validation, enabling proper validation enforcement by most, if not all, applications.
- **Appleâ€™s App Transport Security (ATS)**: Mandates that applications use modern TLS standards, with exceptions and disabling options available. The SSA both enforces administrator preferences and provides a means for developers to migrate to modern TLS, without allowing them to decrease security.

### Conclusion

Our work explores the simplification of TLS libraries and enhancing administrator control through the POSIX socket API. Our analysis of OpenSSL and how applications use it revealed that developers often adopt library defaults, make mistakes with custom settings, implement boilerplate functionality, and configure TLS based on compile-time arguments. These findings informed the design of our API, showing that TLS usage fits well within the existing POSIX socket API, requiring only the addition of constant values to three functions (`socket`, `getsockopt`, `setsockopt`). Our prototype implementation demonstrates good performance and ease of porting existing secure applications to the SSA, requiring as little as one line of code. We also find that existing applications can be dynamically forced to use the SSA, enabling greater administrator control. Overall, we feel that the POSIX socket API is a natural fit for a TLS API, with many avenues available for future work, especially with alternative implementations.