Upon receiving a mobile SNMP agent, the hosting system confirms that the agent possesses a resource skeleton and a simplified usage certificate. The online checker is then activated to enforce safety by leveraging the guarantees of the offline checker and through runtime monitoring.

### Static Verification Stage
During the static verification stage, the online checker first validates the provided resource skeleton and usage certificate, identifying any violations of the safety policy concerning resource utilization limits. For scalar agents, the online checker ensures that all resource annotations (e.g., `@B1...@B7`) are correctly inserted and that the loop bound for L4 is specified by the user. If the annotations are valid, the online checker calculates the actual resource bounds using instantiated policies on service calls. This process involves replacing variables such as `tsnmp enable stderrlog`, `msnmp enable stderrlog`, `tds set boolean`, etc., with actual values in the hosting system. The resource usage bound of the post-condition (i.e., POS5) of the `main()` code is checked against the corresponding rule for a session of a mobile agent.

If no violations are detected, the complete usage certificate is restored from the certificate skeleton, and the proof checker verifies the supplied usage certificate against the specifications within the PVS system. The proof checking procedure is straightforward, involving a validation run of PVS in batch mode, which automatically reruns all the proofs in the usage certificate. An invalid usage certificate will generate errors that the proof checker can identify by examining the run log file.

### Untrusted Assertions
Any untrusted user-provided assertions regarding loop bounds and function argument ranges are translated into TINMAN's internal representation. TINMAN has been implemented with a suite of tools that support resource bound prediction, certificate generation, and validation. In this section, we present some experimental results obtained using these tools. We used the example AgentX sub-agents (a.k.a. mobile agents) provided by the NET-SNMP packages as benchmark programs. These are typical mobile agents for SNMP management, and a summary of their properties is given in Table 1.

| Program          | #Services | #Tasks |
|------------------|-----------|--------|
| Scalar int       | 6         | 6      |
| Data set         | 20        | 23     |
| Delayed instance | 26        | 7      |
| Notification     | 14        | 7      |

**Table 1: Program properties of tested mobile code**

We have extended the security policies for mobile agent-based NET-SNMP applications by defining their resource usage of SNMP APIs (library functions). There are eight agent modules with over two hundred APIs, and even more SNMP APIs outside of the agent modules that could be used in mobile agent applications. Currently, we have tested all twenty-five NET-SNMP APIs called in the benchmark. The code was executed on an Intel Pentium III running Debian Linux and analyzed for execution time and memory allocation. The benchmark agents were submitted for analysis to the TINMAN tools, which produced resource bound annotations and a usage certificate for each agent, given the loop bound in `main()` as 1000. The online checker validated the agents by applying the extended policies on services and agent sessions.

### Experimental Results
The purpose of the experiments is to demonstrate the effectiveness and performance of the TINMAN system applied to mobile SNMP agents. The key observations are as follows:

- **Code Size Augmentation**: The insertion of annotations and generation of usage certificates increases the code size by 18.5% to 30.6% depending on the control structure and the number of tasks. Using a certificate skeleton significantly reduces the certificate size by up to 92.9%, with the size of the certificate skeleton being less than 13.7% of the total annotated program size (Table 2).

- **Certificate Generation and Validation**: All example programs' certificates were generated automatically. Certificate validation (verification of resource usage bounds) is an order of magnitude slower than certificate construction (conversion of resource skeleton to PVS-friendly formal specification). The overhead is due to the interactive interpretation of PVS rules and the use of time-consuming prover commands like GRIND. Developing new proof strategies for common coding patterns in SNMP agents could improve automatic proof generation and validation (Table 3).

- **Runtime Overhead**: The overhead of running a mobile program with annotations comes from runtime monitoring of programmer-provided information and communication between the annotated program and the online checker during execution. All observed cases had small monitoring overheads.

### Related Work
Several frameworks have been proposed for integrating SNMP management with mobile agents, but they do not provide resource security at the application level to deter DoS attacks. Some researchers have developed resource management systems for mobile agents at the operating system level, such as Bellavista's work, which monitors and controls resource usage online. However, this approach may incur significant runtime overhead, which is a concern for resource-critical systems like SNMP network devices.

Resource safety efforts for mobile agents typically fall into two levels: programming language and runtime system. For example, Smart Packets checks CPU and memory usage of active packets written in Sprocket, but this often comes at the cost of reduced expressiveness. Our certified-code approach, similar to Proof Carrying Code (PCC) and Typed Assembly Language (TAL), focuses on resource security assurance at a higher level to prevent DoS attacks by buggy or malicious codes. Unlike PCC and TAL, TINMAN provides full coverage through a combination of offline verification and online monitoring, making it flexible and configurable at the code recipient site.

### Conclusions
In this paper, we explain how the TINMAN architecture secures resource safety for mobile SNMP agents. We demonstrate the effectiveness and efficiency of the TINMAN suite of tools, which provide complete coverage for enforcing resource usage bounds. This is achieved through cooperation between the programmer and the hosting code recipient, with the programmer providing certificates for resource safety offline and the recipient validating them online. TINMAN is platform-independent and does not require modifying the underlying library or operating system, making it applicable to various mobile SNMP agent frameworks. Our certified-code approach avoids much of the performance overhead, a critical concern for SNMP management in network nodes.

Future work includes customizing the TINMAN framework for bytecode formats, particularly for C and Java, based on our experience with the current architecture.