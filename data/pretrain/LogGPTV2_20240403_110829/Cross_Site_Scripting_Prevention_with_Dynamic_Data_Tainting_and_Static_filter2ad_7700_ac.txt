4:
5: } else {
6:
7: }
8: if (x == false) {
9:
y = true;
// Line 6 was executed, and x is not tainted
10: }
11: if (y == false) {
12:
13: }
// Line 4 was executed, and y is not tainted
Figure 7. Attack using indirect control depen-
dency.
of both techniques to achieve full protection against XSS
attacks.
4.1 Linear Static Taint Analysis
The basic idea of our static analysis is the following: For
every branch in the control ﬂow that depends on a tainted
value (i.e., for every tainted scope), we have to statically
analyze this scope, since dynamic analysis will only cover
those parts that are executed. This static analysis must make
sure that all variables that are assigned values (no matter
whether these values are tainted or not) inside such a scope
are also tainted. For instance, in the previous example from
Figure 7, this would mean that both x and y are tainted, in-
dependent of the actual branch that is executed. This makes
it impossible for an attacker to extract information about
sensitive values without triggering an XSS alert prompt. To
this end, we perform a simple, but effective linear static
pass through the bytecode of the tainted scope. Since it is
irrelevant for the analysis whether a variable is assigned a
tainted or an untainted value, it is not necessary to employ
a ﬂow-sensitive analysis that understands the actual control
ﬂow. All that matters is whether a variable is modiﬁed or
not. For example, one of the JavaScript instructions respon-
sible for assigning values to variables is setname. If the
static analysis encounters such an opcode during its linear
pass through the tainted scope, it taints the corresponding
variable (which is given as an argument to setname). If
a function call or an eval statement is encountered, the
JavaScript engine is switched into a special conservative
mode where every subsequent executed instruction is con-
sidered as being part of a tainted scope. The reason is that a
precise interprocedural analysis would be prohibitively ex-
pensive in a real-time browser setting. By switching into a
conservative mode, we prevent these additional costs, and
at the same time, provide security for the user. As shown in
our experiments in Section 7, this decision turned out to be
feasible in practice, as only a small number of false warn-
ings is generated.
One difﬁculty for a linear static analysis is that the in-
structions responsible for setting object properties (and ar-
ray elements) do not specify the target object (or array) as
immediate arguments because of the stack-based nature of
the JavaScript interpreter.
Instead, these instructions re-
trieve their target from the stack. As a result, in order to
determine the target of an assignment to an object property,
static analysis requires information about the possible stack
contents at that point in the program. To this end, static taint
analysis has to be supported by an auxiliary stack analysis.
4.2 Stack Analysis
The purpose of stack analysis is to determine, for ev-
ery program point in the analyzed scope, which elements
the stack may contain. To achieve this, we employ a ﬂow-
sensitive, intraprocedural data ﬂow analysis [2]. For each
analyzed operation, we simulate the effects of this opera-
tion on the real stack by modifying an abstract stack ac-
cordingly. For instance, the false opcode is modeled by
pushing an element on the abstract stack that represents a
boolean value. Note that it is not necessary to track the ex-
act boolean value, it is sufﬁcient to know that there is some
boolean value on the stack. For objects and arrays, how-
ever, the stack content is modeled in more detail, so that it
is possible to determine the target objects (and arrays) of
assignment instructions. The data ﬂow analysis is greatly
simpliﬁed by the fact that the JavaScript engine demands
the size of the stack to be the same at control ﬂow merge
points, regardless of the actual program path taken. This
way, the ﬁxpoint iteration algorithm of data ﬂow analysis
terminates quickly, and since stacks cannot grow inﬁnitely
during loop constructs, there is no need for a widening op-
erator to enforce termination [24].
Currently, not all bytecode instructions are modeled in
our implementation. For instance, more complex operations
such as throw or try have been omitted. To achieve safe
results in spite of this limitation, the stack analysis informs
the static taint analysis whenever such an instruction occurs
in the analyzed scope. Subsequently, the static taint anal-
ysis safely assumes that all variables (and objects) that are
loaded onto the stack in this scope will be the target of an
assignment, and taints them as a result. This ensures that
the attacker is not able to leak information due to unmod-
eled instructions, keeping the user secure.
4.3 Justifying Hybrid Analysis
As discussed in the previous sections, our approach to
XSS prevention is to apply dynamic analysis techniques in
general, and static analysis techniques only when it is nec-
essary. An apparent alternative to this technique would be to
perform only static analysis. However, the reasons for using
a hybrid analysis are precision and efﬁciency. It is a well-
known fact that dynamic analysis generates more precise re-
sults than static analysis, which suffers from the conceptual
limitation of undecidability. Besides, precise static analysis
techniques are computationally expensive. This might be
irrelevant for static security analyses performed by appli-
cation developers before the deployment of the application.
However, in real-time settings, dynamic analysis techniques
are more suitable. By switching to a relatively fast type of
static analysis only at those points where it is necessary, we
combine the best of both approaches.
5 Data Transmission
The tainting mechanisms described so far only track the
status of data elements while they are processed by the
JavaScript engine. No steps are taken to prevent the leak-
age of sensitive information. For example, the execution
of JavaScript statements is not prevented in case of tainted
variables, nor is any data or part of it removed during the
processing. For a cross-site scripting attack to be success-
ful, the gathered data needs to be transferred to a site that is
under the attacker’s control. That is, the tainted data has to
be transferred to a third party. This transfer can be achieved
using a variety of methods. Some examples include:
• Changing the location of the current web page by set-
ting document.location.
• Changing the source of an image in the web page.
• Automatically submitting a form in the web page.
• Using special objects, such as the XMLHttpRequest
object.
To successfully foil a cross-site scripting attack, we prevent
the transfer of tainted data to third-party domains with any
of these methods. More precisely, we ask the user whether
this transfer should be allowed.
6 Implementation
Our prototype implementation extends the Mozilla Fire-
fox 1.0pre [20] web browser. There are two different parts
in the web browser that can contain tainted data objects.
One part is the JavaScript engine, which is called Spider-
Monkey [18]. Here, variables, functions, scopes, and ob-
jects can be tainted as a result of sensitive data that is pro-
cessed by JavaScript programs. The other part is the imple-
mentation of the DOM tree (e.g., location.href). To
store the additional tainting information, we modiﬁed data
structures in both parts of the browser. Even though we
were careful not to introduce deep changes to the program
logic and tried to reuse existing facilities, it turned out that a
considerable engineering effort was required to implement
the modiﬁcations.
Every time a JavaScript program attempts to transfer sen-
sitive data, a check is performed to determine whether the
host from which the document is loaded and the host to
which sensitive data is sent are from different domains. If
this is the case, an alert is raised, and the user can decide if
the transfer should be allowed or denied. Alternatively, the
user can choose to permanently allow or deny all transfers
between the two domains, or to permanently allow or deny
all transfers to the offending destination domain, regardless
of the current source domain.
7 Evaluation
To evaluate our system, we took several complementary
approaches. The most immediate step, which was con-
ducted during the development phase of our prototype, was
to perform a wide range of functionality tests by exploit-
ing a variety of small XSS vulnerabilities. These tests were
based on the experiences with cross-site scripting that our
group’s members have collected in the past. As expected,
these tests conﬁrmed that our concepts were indeed capable
of protecting the user against XSS attacks.
In addition to tests with XSS attacks that were de-
signed internally, we veriﬁed that our system was also suit-
able for defending against real-world exploits. To this
end, we installed vulnerable versions of the following pop-
ular open-source web applications: phpBB 2.0.18 [25],
myBB 1.0.2 [9], and WebCal 3.04 [17]. Then, we launched
reported XSS attacks [1, 4, 5] against each of these appli-
cations. Again, our mechanism was successful in detect-
ing these attacks, and in each test the user was reliably
prompted before any sensitive information could be leaked.
Apart from defending against XSS attacks, in order to
be useful in practice a protection scheme must be efﬁcient
and not bother its users with countless false warnings. To
evaluate these aspects, we conducted both manual and auto-
matic tests. For the manual tests, the modiﬁed browser was
used by the authors for web surﬁng on a daily basis. Com-
pared to the amount of processing necessary to fetch and
render web pages, the overhead of our extended JavaScript
engine is negligible. Thus, we did not experience any no-
ticeable slowdown when using our secure browser. Also,
the amount of false positives was low, although we were
regularly prompted with warnings of sensitive data trans-
fers.
Interestingly, although these alerts were not the result of
XSS attacks, they correctly warned about attempts to trans-
fer sensitive information across domain borders. These in-
formation transfers were caused by scripts from companies
that provide web site statistics or that perform user track-
ing. These scripts gather information (URL, referrer, title,
cookie, etc.) about the currently-visited page and transfer
it to a web application hosted on a different domain. Of
course, such information ﬂows are not caused by cross-
site scripting attacks, as the scripts are inserted into the
web page with the consent of the web site owner. How-
ever, we believe that the warnings are actually useful be-
cause they provide the user with additional control over
the transmission of sensitive data. This way, the user is
given the chance to decide whether she regards the collec-
tion of this information as a violation of her privacy. Of
course, in this mode of operation, the level of protection
provided by our system ultimately depends on the user’s
right decisions about the connection attempts. In addition,
our prototype permits to conveniently deﬁne persistent poli-
cies so that the user has to decide for a particular destination
domain only once. For example, if an alert is generated
for an information transfer from www.slashdot.org
to www.google-analytics.com,
the user can in-
struct our prototype to allow or deny transfers be-
tween these two domains forever. Alternatively, she can
also decide to permanently allow or deny transfers to
www.google-analytics.com. This reduces the num-
ber of warning prompts considerably. A higher level of con-
venience for the user can be achieved by pre-conﬁguring the
browser with a number of typical, harmless destination do-
mains. For novice users, who might have problems with
taking the right decisions, the decision procedure can be
made completely automatic by disallowing all suspicious
connection attempts. Even though this might have an im-
pact on legitimate functionality in rare cases, we are conﬁ-
dent that this is a reasonable and safe alternative for techni-
cally unsophisticated users.
The manual testing showed that our approach is effec-
tive and efﬁcient, but we wanted to test our solution on a
more extensive set of data. Therefore, to obtain a com-
prehensive amount of test data, we enhanced the Firefox
browser with a web crawling engine. Using this crawler,
we were able to automatically visit a large number of pages
and determine a more representative estimate of incorrect
warning prompts that a user can expect when browsing.
Note that a traditional crawler would not be suited for our
needs, since it is not sufﬁcient to simply fetch and store
HTML pages.
Instead, it is necessary to take embedded
JavaScript code into account, and to simulate user behav-
ior in a realistic way. Because the crawler is directly us-
ing the Firefox web browser, it is capable of interpreting
JavaScript code so that our protection mechanisms are ac-
tivated automatically. Moreover, to simulate user behavior
and trigger JavaScript that is only activated when input is
typed into form elements, the crawler ﬁlls out all encoun-
tered web forms and submits them. Finally, another im-
portant aspect is the triggering of JavaScript events. Many
Destination Domain
.google-analytics.com
.2o7.net
.hitbox.com
.webtrendslive.com
.statcounter.com
.sitemeter.com
.revsci.net
.blogger.com
.statistik-gallup.net
.sitestat.com
.gemius.pl
.webtrends.com
.urchin.com
.liveperson.net
.intellitxt.com
.atdmt.com
.tribalfusion.com
.espotting.com
.monster.com
.coremetrics.com
.realmedia.com
.hitslink.com
.kontera.com
.adbrite.com
.akamai.net
.247realmedia.com
.estat.com
.seeq.com
.questionmarket.com
.netﬂame.cc
Number of Flows
35,238
11,404
6,458
3,196
2,518
2,099
1,866
1,221
1,119
899
835
690
662
533