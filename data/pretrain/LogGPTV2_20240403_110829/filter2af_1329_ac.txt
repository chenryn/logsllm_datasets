            ma = this.asExpr() and
            m = ma.getMethod() and
            m.getDeclaringType()
                .getASourceSupertype*()
                .hasQualifiedName("org.springframework.web.multipart", "MultipartRequest") and
            m.getName().matches("get%")
          )
        }
        override string getSourceType() { result = "Spring MultipartRequest getter" }
      }
最后将FlowSourceCustom.qll import至
/java/ql/src/semmle/code/java/dataflow/FlowSources.qll就可以使用SpringPath.ql进行Spring的path查询
我们来看一个实际的例子fastjson.java文件:
    package org.joychou.controller;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONObject;
    import com.alibaba.fastjson.parser.Feature;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestMethod;
    import org.springframework.web.bind.annotation.ResponseBody;
    @Controller
    @RequestMapping("/fastjson")
    public class Fastjson {
        @RequestMapping(value = "/deserialize", method = {RequestMethod.POST})
        @ResponseBody
        public String Deserialize(@RequestBody String params) {
            // 如果Content-Type不设置application/json格式，post数据会被url编码
            try {
                // 将post提交的string转换为json
                JSONObject ob = JSON.parseObject(params);
                return ob.get("name").toString();
            } catch (Exception e) {
                return e.toString();
            }
        }
controllerMethod | controllerMethod.getLocation | methodBindPath |
classBindPath | Type  
---|---|---|---|---  
Deserialize | Fastjson:19[19-29] | "/deserialize" | "/fastjson" | Spring
bindPath  
QL对该文件扫描结果如上表
我们可以看到 /fastjson/deserialize 即是该方法的Web Path
## 结合SCA判断fastjson是否可利用
### Fastjson不安全使用
Fastjson不安全的使用需要满足以下三个条件：
1、项目中导入了不安全的Fastjson版本
2、项目中使用了Fastsjon不安全的反序列化方法去反序列化外部传入的Json数据
3、项目中存在利用Fastjson反序列化利用方法的反序列化调用链
1、3
通过SCA的能力去解决，2可以通过QL分析源代码拿到FastJson在项目中的使用情况，下面我们来分析一下如何使用QL查询Fastjson是否在在代码中被安全使用
java-sec-code里的fastjson反序列化demo
    package org.joychou.controller;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONObject;
    import com.alibaba.fastjson.parser.Feature;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestMethod;
    import org.springframework.web.bind.annotation.ResponseBody;
    @Controller
    @RequestMapping("/fastjson")
    public class Fastjson {
        @RequestMapping(value = "/deserialize", method = {RequestMethod.POST})
        @ResponseBody
        public String Deserialize(@RequestBody String params) {
            // 如果Content-Type不设置application/json格式，post数据会被url编码
            try {
                // 将post提交的string转换为json
                JSONObject ob = JSON.parseObject(params);
                return ob.get("name").toString();
            } catch (Exception e) {
                return e.toString();
            }
        }
我们在来看看QL里的Fastjson查询
    /**
     * @name FastJson deserializing of user-controlled data
     * @description FastJson deserializing user-controlled data may allow attackers to
     *              execute arbitrary code.
     * @kind path-problem
     * @problem.severity error
     * @precision high
     * @id java/unsafe-fastjson-deserialization
     * @tags security
     *       external/cwe/cwe-502/Fastjson deserialization
     */
    import java
    import semmle.code.java.dataflow.FlowSources
    import semmle.code.java.security.FastJson
    import DataFlow::PathGraph
    class UnsafeFastJsonSinkConfig extends TaintTracking::Configuration {
      UnsafeFastJsonSinkConfig() { this = "UnsafeFastJsonConfig" }
      override predicate isSource(DataFlow::Node source) { source instanceof RemoteFlowSource }
      override predicate isSink(DataFlow::Node sink) { sink instanceof UnSafeFastJsonSink }
    }
    from DataFlow::PathNode source, DataFlow::PathNode sink, UnsafeFastJsonSinkConfig conf
    where conf.hasFlowPath(source, sink)
    select sink.getNode().(UnSafeFastJsonSink).getMethodAccess(), source, sink,
      "Unsafe fastjson deserialization of $@.", source.getNode(), "user input"
首先我们定义了一个继承Configuration的 UnsafeFastJsonSinkConfig类，其需要满足于
dataFlow里的source满足RemoteFlowSource（远程用户输入）的谓词定义、sink点需要满足UnSafeFastJsonSink（不安全的Fastjson使用）的谓词定义
通过搜索where conf.hasFlowPath(source, sink)
满足UnsafeFastJsonSinkConfig条件的sources和sink并且source和sink之间是可达的，那我们就认为该处存在fastjson的不安全使用
我们再来看看Fastjson.qll是如何定义UnSafeFastJsonSink
    import semmle.code.java.dataflow.DataFlow
    import semmle.code.java.dataflow.DataFlow2
    import semmle.code.java.dataflow.DataFlow3
    import semmle.code.java.frameworks.FastJson
    predicate unsafeFastjson(MethodAccess ma, Expr sink) {
      exists(Method m | m = ma.getMethod() |
        ma.getMethod() instanceof FastJsonParseMethod and
        not fastJsonLooksSafe() and
        sink = ma.getArgument(0)
      )
    }
    class UnSafeFastJsonSink extends DataFlow::ExprNode {
        UnSafeFastJsonSink() { unsafeFastjson(_, this.getExpr()) }
      MethodAccess getMethodAccess() { unsafeFastjson(result, this.getExpr()) }
    }
谓词unsafeFastjson需要满足于存在fastjson的调用方法并且未配置safety配置的方法
我们再来看看 FastJsonParseMethod、和fastJsonLooksSafe是如何编写的
    /**
     * The class `com.alibaba.fastjson.JSON`.
     */
    class FastJson extends RefType {
      FastJson() { this.hasQualifiedName("com.alibaba.fastjson", "JSON") }
    }
    /**
     * A FastJson parse method. This is either `JSON.parse` or `JSON.parseObject`.
     */
    class FastJsonParseMethod extends Method {
      FastJsonParseMethod() {
        this.getDeclaringType() instanceof FastJson and
        this.hasName(["parse", "parseObject"])
      }
    }
    /**
     * A call to `ParserConfig.setSafeMode`.
     */
    class FastJsonSetSafeMode extends MethodAccess {
      FastJsonSetSafeMode() {
        exists(Method m |
          this.getMethod() = m and
          m.hasName("setSafeMode") and
          m.getDeclaringType().hasQualifiedName("com.alibaba.fastjson.parser", "ParserConfig")
        )
      }
可以看到我们将JSON.parse和JSON.parseObject定义为危险函数
而使用setSafeMode配置的，我们认为是安全的
通过查询我们可以成功搜索出代码里的不安全的fastjson使用方式
结合SCA我们可以完成以上三个条件对fastjson安全风险的发现
# 总结
在理解了SAST的一些技术原理以及CodeQL一些实际使用的案例，本次分享附件包含Codeql的官方教程基础语法以及Java模块的中文教程，可自行向运营小姐姐获取。后面我们将分享58SAST在工程化选型以及设计的一些经验。
# 资源
关注58安全应急响应中心公众号，后台发送“58白盒系列2”，获取Codeql教程下载链接