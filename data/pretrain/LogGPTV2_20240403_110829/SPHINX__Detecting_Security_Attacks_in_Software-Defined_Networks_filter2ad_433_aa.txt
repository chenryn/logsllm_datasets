title:SPHINX: Detecting Security Attacks in Software-Defined Networks
author:Mohan Dhawan and
Rishabh Poddar and
Kshiteej Mahajan and
Vijay Mann
SPHINX: Detecting Security Attacks in Software-Deﬁned Networks
Mohan Dhawan
IBM Research
Rishabh Poddar
IBM Research
Kshiteej Mahajan
IBM Research
Vijay Mann
IBM Research
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Software-deﬁned networks (SDNs) allow greater
control over network entities by centralizing the control plane,
but place great burden on the administrator to manually ensure
security and correct functioning of the entire network. We list
several attacks on SDN controllers that violate network topology
and data plane forwarding, and can be mounted by compromised
network entities, such as end hosts and soft switches. We further
demonstrate their feasibility on four popular SDN controllers. We
propose SPHINX to detect both known and potentially unknown
attacks on network topology and data plane forwarding originat-
ing within an SDN. SPHINX leverages the novel abstraction of ﬂow
graphs, which closely approximate the actual network operations,
to enable incremental validation of all network updates and
constraints. SPHINX dynamically learns new network behavior
and raises alerts when it detects suspicious changes to existing
network control plane behavior. Our evaluation shows that
SPHINX is capable of detecting attacks in SDNs in realtime
with low performance overheads, and requires no changes to
the controllers for deployment.
I.
INTRODUCTION
The value of Software-Deﬁned Networks (SDNs) lies
speciﬁcally in their ability to provide network virtualization,
dynamic network policy enforcement, and greater control over
network entities across the entire network fabric at reduced
operational cost. Protocols like OpenFlow [35] focus spe-
cially on the above aspects. However, by centralizing the
control plane, SDNs place great burden on the administrator
to manually ensure security and correct functioning of the
entire network. Compromised network entities can be used to
exﬁltrate sensitive information, implement targeted attacks on
other users, or simply bring down the entire network. This
paper looks at the speciﬁc problem of detecting security attacks
on network topology and data plane forwarding originating
within SDNs in realtime.
Most prior work has looked at development and analysis
of SDN security applications and controllers [22], [25], [26],
[36], [38], [41], [43], and realtime veriﬁcation of network con-
straints [20], [21], [24], [28]–[30], [34] separately. However,
no combination of the above solutions provide an effective de-
fense against the threat of attacks in SDNs due to compromised
end hosts or switches, which can be used to wrest control of the
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23064
entire network or parts of it [31], [32]. This problem is further
exacerbated in the SDN context due to four main reasons.
First, operational semantics of OpenFlow-based SDNs
lower the barrier for mounting sophisticated attacks on both
control and data planes, since they allow any unmatched
packets to be sent to the controller (similar to how a layer-2
switch broadcasts all unknown packets). For example, the SDN
controller propagates and builds network topology using the
OpenFlow PACKET_IN messages. However, even end hosts can
send forged messages that would be relayed to the controller
as PACKET_IN messages by the switches, thereby poisoning its
view of the network. Although OpenFlow supports optional
TLS authentication between switch and controller, TLS by
itself cannot prevent compromised switches from spooﬁng
packets. Thus, there is no built-in security for SDNs (even
with TLS enabled) that prevents malicious switches and hosts
from packet spooﬁng to corrupt controller state.
Second, attacks that affect traditional networks may also
afﬂict SDNs. However, solutions that work for traditional
networks may not be directly applicable for SDNs because
traditional defenses assume switches to be intelligent, whereas
separation of control and data planes forces SDN switches to
be dumb forwarding entities that forward packets based on
the rules installed by the SDN controller. Adapting traditional
defenses for SDNs will require either patching the controller
for speciﬁc vulnerabilities, or a fundamental redesign of the
OpenFlow protocol to provide a comprehensive defense, with-
out which many traditional attacks, including ARP poisoning
and LLDP spooﬁng, will continue to manifest in SDNs.
like Open vSwitches [13]
Third, enterprise network administrators often use pro-
grammable soft switches,
(or
OVSes), to provide network virtualization. These OVSes, just
like hardware switches, must have direct connectivity to the
controller to provide desired functionality. Further, since these
soft switches run atop end host servers, they are attractive
targets for attackers. In contrast, in traditional networks, it is
relatively more difﬁcult for a network attacker to physically
compromise hardware switches and modify routing rules that
govern network communication. Thus, the assumption that all
switches in an SDN are trustworthy does not hold true in
enterprise deployments.
Fourth, apart from potentially malicious switches, even
untrusted end hosts can easily bring down the entire network.
End hosts can initiate control plane ﬂooding which can saturate
the out-of-band network and interrupt the controller, thereby
bringing down the entire network.
We tested four popular controllers: Floodlight [17], Mae-
stro [8], OpenDaylight (ODL) [14] and POX [16], and found
them vulnerable to diverse attacks originating within the
SDN 1. While it
is possible for controllers to implement
defenses against known attacks or speciﬁc vulnerabilities,
such patching does not provide protection against unforeseen
security threats. In this context, we present the design and
implementation of SPHINX—a framework to detect attacks
on network topology and data plane forwarding. SPHINX
leverages the novel abstraction of ﬂow graphs, which closely
approximate the actual network operations, to (a) enable in-
cremental validation of all network updates and constraints,
thereby verifying network properties in realtime,
and (b)
detect both known and potentially unknown security threats
to network topology and data plane forwarding without com-
promising on performance. SPHINX can also be deployed with
minimal modiﬁcations to secure different controllers.
SPHINX analyzes speciﬁc OpenFlow control messages to
learn new network behavior and metadata for both topolog-
ical and forwarding state, and builds ﬂow graphs for each
trafﬁc ﬂow observed in the network. It continuously updates
and monitors these ﬂow graphs for permissible changes, and
raises alerts if it identiﬁes deviant behavior. SPHINX leverages
custom algorithms that incrementally process network updates
to determine in realtime if the updates causing deviant behavior
should be allowed or not. SPHINX also provides a light-weight
policy engine that enables administrators to specify expressive
policies over network resources and detect security violations.
Unlike today’s controllers where each module implements
its own checks making policy enforcement buggy, SPHINX
provides a central point for enforcing complex policies.
We have built a controller agnostic prototype of SPHINX,
which may even be implemented by SDN controllers as an
application. We have evaluated SPHINX with both Open-
Daylight and Floodlight controllers over a physical
three-
tiered network testbed and the Mininet network emulator [10].
SPHINX successfully detected all
the attacks, with a sub-
millisecond average detection time in presence of 1K hosts,
and reported no false alarms with three diverse but benign
real-world network traces [3], [4], [7]. We further evaluated
SPHINX’s performance with up to 10K Mininet hosts, which
is representative of a small enterprise. SPHINX is capable of
verifying 1K policies at every network update in just ∼245µs,
and imposes low CPU (∼6%) and memory overheads (∼14.5%)
in the worst case.
This paper makes the following contributions:
(a) We examine four popular SDN controllers and demon-
strate that they are vulnerable to a diverse array of attacks on
network topology and data plane forwarding (§ III and § VIII).
(b) We present incremental ﬂow graphs (§ IV) as a novel
abstraction for realtime detection of security threats.
(c) We present the design and implementation of SPHINX (§ V
and § VII) and its policy engine (§ VI), which allows network
administrators to specify ﬁne-grained security policies, and
enables easy action attribution.
(d) We evaluate SPHINX to show that
is practical and
involves acceptable overheads (§ IX-A and § IX-B). We also
report on experiences gained using SPHINX in four different
case studies (§ IX-C).
it
1Unless speciﬁed, SDNs imply OpenFlow-based SDNs.
II. BACKGROUND
SOFTWARE-DEFINED NETWORK (SDN). SDNs decouple
network control and forwarding functions enabling (i) the
network to become directly programmable, and (ii) the un-
derlying infrastructure to be abstracted for applications and
network services. Network intelligence is logically centralized
in trusted software-based controllers that maintain a global
view of the network of hosts, and commodity hardware and
software switches, which are dumb forwarding entities.
OPENFLOW. The OpenFlow protocol deﬁnes commands and
messages that enable the controller to interact with the for-
warding plane. Every OpenFlow switch maintains a number
of ﬂow tables, with each table containing a set of ﬂow entries.
Each ﬂow entry consists of (i) match ﬁelds against which
incoming packets are compared, (ii) a set of instructions that
deﬁne the actions to be performed on matched packets, and
(iii) counters for ﬂow statistics [15]. Further, a match ﬁeld
may either contain a speciﬁc value, or it may be wildcarded,
indicating that all packets match against it regardless of value.
When a switch receives a packet for which it has no matching
entry, it sends the packet to the controller as a PACKET_IN
message. The controller then decides how to handle the packet,
and creates one or more ﬂow entries in the switch using
FLOW_MOD commands, directing the switch on how to handle
similar packets in the future.
Other switch-to-controller messages that are relevant to this
paper include FEATURES_REPLY and STATS_REPLY messages. The
FEATURES_REPLY message notiﬁes the controller of a switch’s
capabilities and port deﬁnitions. The controller builds its initial
view of the network topology using these messages, and
updates the view using certain PACKET_IN messages. STATS_REPLY
messages communicate network statistics gathered at
the
switch per port, ﬂow, and table (such as the total number of
packets/bytes sent or received).
III. MOTIVATION
The correct functioning of an SDN requires that
two
key network properties—network topology and data plane
forwarding—must always be preserved. In this section, we
motivate the need for SPHINX, which can detect both known
and potentially unknown security attacks on these two key
SDN properties in realtime.
First, we describe two scenarios that are representative of
the possible attacks on both the network topology and data
plane forwarding, launched from compromised hosts and/or
switches. While there can be other variants of these attacks,
the mechanisms to poison the controller’s view of the network
primarily remain the same. Note that none of these attacks
exploit any OpenFlow vulnerabilities or implementation bugs
in particular controllers.
Second, we argue that
traditional solutions to defend
against known security threats in their exact form are not
portable to SDNs. Any adaptations of these solutions to SDNs
requires patching the controller. While it is possible for all
controllers to implement defenses against known attacks or
speciﬁc vulnerabilities, such selective signature-based security
mechanisms suffer from the same issues that afﬂict anti-virus
solutions and fail to protect against a broad class of malicious
attacks possible on SDNs.
2
A. Host- and Switch-based Attacks
OpenFlow mandates that packets not matching a ﬂow rule
must be sent by the switch to the controller. In spite of the
control and data plane separation, this protocol requirement
opens up possibilities for malicious hosts to tamper with
network topology and data plane forwarding, both of which
are critical to the correct functioning of the SDN. Speciﬁcally,
malicious hosts can (i) forge packet data that would then be
relayed by the switches as PACKET_IN messages, and subse-
quently processed by the controller, (ii) implement denial of
service (DoS) attacks on the controller and switches, and (iii)
leverage side-channel mechanisms to extract information about
ﬂow rules. Compromised soft switches can not only initiate
all the host-based attacks but also trigger dynamic attacks on
trafﬁc ﬂows passing through the switch, resulting in (i) network
DoS, and (ii) trafﬁc hijacking or re-routing.
1) Network topology: SDN controllers process a variety of
protocol packets (ARP, IGMP, LLDP, etc.) sent by switches
as OpenFlow PACKET_IN messages to construct its view of the
network topology. Controllers process LLDP messages for
topology discovery and IGMP messages to maintain multicast
groups, whereas it forwards ARP requests and replies enabling
end hosts to build up ARP caches facilitating network commu-
nication. Compromised hosts can spoof the above messages to
tamper with the controller’s view of the topology, and fool it
into installing ﬂow rules to carry out a variety of attacks on
the network.
EXAMPLE. A fake topology attack can be launched on an
SDN controller to poison its view of the network using
detrimental PACKET_IN messages sent by the switches. These
malicious PACKET_IN messages could be generated by untrusted
switches themselves or by end hosts, which can send arbitrary
LLDP messages spooﬁng connectivity across arbitrary network
links between the switches. When the controller tries to route
trafﬁc over these phantom links, it results in packet loss, and if
this link is on a critical path, it could even lead to a blackhole.
2) Data plane forwarding: Malicious hosts and switches can
mount DoS by ﬂooding the network with trafﬁc to arbitrary
hosts to exhaust resources on vulnerable switches and/or the
SDN controller, thereby affecting forwarding in the data plane.
EXAMPLE. TCAM is a fast associative memory that stores
ﬂow rules. Malicious hosts may target a switch’s TCAM to
perform directed DoS attacks against other hosts. Malicious
hosts may send arbitrary trafﬁc and force the controller into
installing a large number of ﬂow rules, thereby exhausting
the switch’s TCAM. Subsequently, no other ﬂow rules can
be installed on this switch, until the installed ﬂows expire. If
this switch is on a critical path in the network, then it may
result in signiﬁcant latency or packet drops.
In § VIII, we describe in detail several attacks, including
those listed above, that afﬂict popular SDN controllers, like
ODL, Floodlight, POX and Maestro.
B. Traditional attacks manifest in SDNs
Several attacks that afﬂict traditional networks also affect