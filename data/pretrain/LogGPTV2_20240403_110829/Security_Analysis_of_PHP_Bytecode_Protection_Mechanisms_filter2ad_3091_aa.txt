title:Security Analysis of PHP Bytecode Protection Mechanisms
author:Dario Weißer and
Johannes Dahse and
Thorsten Holz
Security Analysis
of PHP Bytecode Protection Mechanisms
Dario Weißer, Johannes Dahse(B), and Thorsten Holz
Horst G¨ortz Institute for IT-Security (HGI), Ruhr-University Bochum,
{dario.weisser,johannes.dahse,thorsten.holz}@rub.de
Bochum, Germany
Abstract. PHP is the most popular scripting language for web appli-
cations. Because no native solution to compile or protect PHP scripts
exists, PHP applications are usually shipped as plain source code which
is easily understood or copied by an adversary. In order to prevent such
attacks, commercial products such as ionCube, Zend Guard, and Source
Guardian promise a source code protection.
In this paper, we analyze the inner working and security of these
tools and propose a method to recover the source code by leveraging sta-
tic and dynamic analysis techniques. We introduce a generic approach
for decompilation of obfuscated bytecode and show that it is possible to
automatically recover the original source code of protected software. As a
result, we discovered previously unknown vulnerabilities and backdoors
in 1 million lines of recovered source code of 10 protected applications.
Keywords: Security · Reverse engineering · Obfuscation · PHP ·
Bytecode
1 Introduction
Protecting intellectual property (IP) in software systems, such as algorithms,
cryptographic keys, serial numbers, or copyright banners, is a challenging prob-
lem: an adversary can study the program with static or dynamic analysis meth-
ods [7,13,19] and attempt to deduce the sensitive information. To impede such
an analysis, many diﬀerent types of obfuscation techniques for binary executa-
bles were developed (e.g., [3,11,15,21]). Although the semantics of the pro-
gram can be reconstructed with diﬀerent (automated) reverse engineering meth-
ods [4,16,20,29], obfuscation provides at least some protection of the source code
and hampers an adversary to a certain extent.
IP protection is more challenging in the web context: PHP, the most popu-
lar server-side scripting language on the web, is an interpreted language. This
implies that an interpreter transforms the PHP source code on demand into
bytecode that is then executed. As such, an adversary who can obtain access
to the source code (e.g., via software bugs or a legitimate trial version) can
directly study or modify the code and reveal sensitive information. To rem-
edy such attacks, diﬀerent tools are available that oﬀer code protection: com-
mercial products like ionCube, Zend Guard, and Source Guardian promise to
c(cid:2) Springer International Publishing Switzerland 2015
H. Bos et al. (Eds.): RAID 2015, LNCS 9404, pp. 493–514, 2015.
DOI: 10.1007/978-3-319-26362-5 23
494
D. Weißer et al.
“prevent unlicensed use and reverse engineering and to safeguard intellectual
property” [30].
All these tools follow the same methodology: They pre-compile PHP source
code into obfuscated bytecode that can then be shipped without the original
source code. On the server side, these tools require a PHP extension that allows
to run the bytecode. Popular PHP software such as NagiosFusion, WHMCS,
and xt:Commerce ship certain ﬁles protected with such tools to safeguard their
IP. As a result, an adversary can at most access the pre-compiled bytecode and
cannot directly access the source code. Unfortunately, it is not documented how
these products work internally and what security guarantees they provide.
In this paper, we address this gap. We study the three most popular commer-
cial PHP code protection products in detail and analyze their security properties.
We ﬁnd that all share the same limitation that enables an adversary to recon-
struct the semantics of the original code. More speciﬁcally, we introduce methods
to recover the code by statically and dynamically analyzing the interpretation of
the bytecode. Since the interpreter needs to transform the encrypted/obfuscated
bytecode back to machine code, we can recover the semantic information during
this phase. We found that all tools can be circumvented by an adversary and we
are able to successfully reconstruct the PHP source code. In this paper, we ﬁrst
present our ﬁndings from manually reverse engineering the diﬀerent PHP code
protection tools. Based on these ﬁndings, we introduce our method to break
the encryption and obfuscation layers using dynamic analysis techniques, and
show how to build a generic decompiler. Note that our techniques can be used
against all PHP bytecode protectors that rely on bytecode interpretation and
our method is not limited to the three analyzed products.
To evaluate our decompiler, we studied several popular protected software
programs. We uncovered critical vulnerabilities and backdoors in some of these
protected programs that would have remained invisible without decompilation
since the identiﬁed ﬂaws were hidden in obfuscated/encrypted bytecode. Fur-
thermore, we detected critical security vulnerabilities in the products themselves
that weaken the encrypted application’s server security. In conclusion, our results
indicate that PHP source code protection tools are not as strong as claimed by
the vendors and such tools might even lead to an increased attack surface.
In summary, we make the following contributions in this paper:
– We analyze and document in detail the inner working of the three most pop-
ular PHP bytecode protectors.
– We propose a method to generically circumvent such protectors based on
the insight that we can recover the semantics of the original code during
the interpretation phase. We present an automated approach to reconstruct
protected PHP source code and implemented a prototype of a decompiler.
– We evaluate our prototype with 10 protected, real-world applications and show
that it is possible to reconstruct the original source code from the protected
bytecode.
Last but not least, we would like to raise awareness about the usage of PHP
bytecode protectors and their eﬀectiveness on protecting sensitive data. We hope
Security Analysis of PHP Bytecode Protection Mechanisms
495
that our research can guide future work on protecting interpreted languages and
that it oﬀers new insights into the limitations of obfuscation techniques.
2 Background
In order to analyze PHP source code protectors, we ﬁrst take a look at several
PHP internals. We provide a brief introduction to PHP’s interpreter, virtual
machine, and instructions. Then, we outline the general concept of PHP source
code protectors and introduce the three most popular tools on the market.
2.1 PHP Interpreter
PHP is a platform independent scripting language that is parsed by the PHP
interpreter. The PHP interpreter is written in C and can be compiled cross-
platform. Unlike low-level languages such as C, no manual compilation into an
executable ﬁle is performed for PHP code. Instead, an application’s code is
compiled to PHP bytecode on every execution by the Zend engine. The Zend
Engine [25] is a core part of PHP and is responsible for the code interpretation.
During the compilation process, a PHP ﬁle’s code is split into tokens by a
tokenizer. The process is initiated by PHP’s core function zend compile file().
After tokenizing the code, the compiler uses the tokens to compile them into
bytecode. Similarly, the core function zend compile string() compiles a string
and is used, for example, to run code within eval(). As we will see in Sect. 4,
PHP core functions play an important role for the dynamic analysis of bytecode
protectors. An overview of the PHP interpreter’s structure is given in Fig. 1.
After the engine parsed and compiled the PHP code into bytecode, its instruc-
tions (opcodes) are executed by PHP’s virtual machine (VM) that comes with
the Zend Engine. It has a virtual CPU and its own set of instructions. These
instructions are more high level than regular machine code and are not executed
by the CPU directly. Instead, the virtual machine provides a handler for each
instruction that parses the VM command and runs native CPU code.
The execution process is initiated by passing the opcode array to the function
zend execute(). It iterates over the opcodes and executes one after another.
Fig. 1. The PHP interpreter with its core, extensions, and the Zend Engine.
496
D. Weißer et al.
Calls to user-deﬁned functions are handled recursively and return to the call
site’s opcode. The function terminates when a return opcode in the main opcode
array is found. In the next section, we look at opcodes in detail.
2.2 PHP Bytecode
The register-based bytecode of PHP consists of opcodes, constants, variables,
and meta information. PHP has around 150 diﬀerent opcodes that cover all
existing language constructs [26]. Basically, each opcode has an opcode number
that is used to ﬁnd the corresponding opcode handler in a lookup table, two
parameter operands, and a result operand to store return values. The parameter
operands of an opcode store the values that are processed in the operation. These
operands can have ﬁve diﬀerent types and there is a variety of use cases. For
example, an operand can be a constant or a variable. Temporary variables are
used for auxiliary calculations or results that are not assigned to a variable.
Since there are diﬀerent operand types, there are multiple instances of opcode
handlers as there are 25 possible operand combinations for each instruction. For
example, the handler function for adding two variables is diﬀerent to the one for
adding two constants. The overall number of handler functions is less than 150∗25
because some combinations are redundant or invalid. The index to retrieve the
handler address from the handler table is calculated using the following formula:
index = opcode number ∗ 25 + op1 type ∗ 5 + op2 type
(1)
Every operand combination for each opcode is stored within this table and links
to the appropriate handler that performs the operation. Invalid combinations
terminate the PHP process with a corresponding error message.
Next to the opcodes, the bytecode contains structures. These hold constant
values, such as numbers or strings, and variable names which are referenced
in operands with a key. Furthermore, meta information, such as line numbers
and doc comments, is available as well as a reserved variable that allows exten-
sions to store additional information. The bytecode of user-deﬁned functions and
methods is stored similarly in opcode arrays. Here, the name and argument infor-
mation is stored additionally. A global function table links to the corresponding
opcode array by function name. Classes have their own method table that links
to the methods. When a method or function call is initiated, PHP uses these
tables to ﬁnd the appropriate opcode array and executes it.
In the following, we take a look at a code sample and its bytecode after compi-
lation. The following three lines of PHP code perform a mathematical operation,
concatenate the result with a static string, and print the result RAID2015.
$year = 2000 + 15;
echo "RAID" . $year;
The disassembly of the compiled code is shown in Table 1. We have already
mapped the opcode numbers to the corresponding handler names as well as vari-
able names to operands. The compilation process converted the script into four
Security Analysis of PHP Bytecode Protection Mechanisms
497
Table 1. Exemplary bytecode.
# Opcode
Operand 1 Operand 2 Result
1 ADD
2000
15
TMP:1
2 ASSIGN $year
3 CONCAT ’RAID’
4 ECHO
TMP:2
TMP:1
$year
TMP:2
operations. First, the ADD opcode handler adds the two constants 2000 and 15
and stores the result in the temporary variable TMP:1. Second, the ASSIGN opcode
handler assigns the temporary variable TMP:1 to the variable $year. Third, the
CONCAT opcode handler concatenates the string ’RAID’ with the variable $year
and stores the result in the temporary variable TMP:2. Fourth, the ECHO opcode
handler prints the value of the temporary variable TMP:2.
2.3 PHP Bytecode Encoder
The general idea to create a closed-source PHP application is to compile a PHP
script once and to dump all opcode arrays. This data can then be directly
deployed to PHP’s executor without another compilation of the source code.
Because PHP has no native solution for this, a custom PHP extension can be
implemented that dumps the bytecode into a ﬁle before it is executed (encoder).
A second extension (loader) then parses the dumpﬁle and deploys the bytecode
to the PHP engine. The process is depicted in Fig. 1 with a dashed arrow. As a
drawback, PHP version speciﬁc extensions have to be provided if the bytecode
format changes with diﬀerent PHP releases.
However, as we have seen in Sect. 2.2, PHP bytecode is still readable, thus,
additional protection mechanisms are reasonable. For example, it is possible to
add several encryption layers around the bytecode. Furthermore, the execution
of the encrypted bytecode can be limited to a speciﬁc user license or hardware
environment by the loader extension. While such mechanisms can increase the
security (or obscurity), the performance of an application might suﬀer. In the
following, we introduce the three most popular commercial PHP bytecode pro-
tection tools. For all three, the loader extension is available for free, while the
encoder extension is commercial. All three products promise bytecode protection
by oﬀering encryption, environment restriction, prevention of ﬁle tampering, as
well as symbol name obfuscation (except for SourceGuardian).
ionCube is probably the most popular and most used software that obfus-
cates PHP scripts since 2003. The vendor describes its product as “the ideal
and only serious no-compromise solution for protecting PHP” [9]. A single-user
license for the latest version 8.3 costs $ 199.
Zend Guard has been developed by Zend Technologies in order to pro-
tect scripts from software pirates. The currently available version 7.0 costs $ 600
annually and is the most expensive solution. The vendor’s online shop claims
498
D. Weißer et al.
“to prevent unlicensed use and reverse engineering and to safeguard your intel-
lectual property through encryption and obfuscation” [30]. However, during our
analysis, no encryption process was identiﬁed.
SourceGuardian exists since 2002 [14] and was merged with phpShield in
2006. Both products are similar with the diﬀerence that SourceGuardian includes
environment restriction features. Encoded ﬁles can be compatible with diﬀerent
versions of PHP at once. The product is advertised as “the most advanced PHP
Encoder on the market” [22]. The latest version 10.1.3 is available for $ 159.
3 Static Analysis of Loader Extensions
In order to reveal the inner working of the introduced tools, we reverse engi-
neered the corresponding loader extensions. In approximately four weeks, we
analyzed the encoders for PHP version 5.4 which was the only common sup-
ported PHP version for the encoders at the time of our analysis. As a result, we
were able to identify protection mechanisms, algorithms, and security vulnera-
bilities. Although new versions of the encoders were released in the meantime,
no signiﬁcant changes in the inner working were introduced to the best of our
knowledge. In this section, we ﬁrst provide a brief overview of the encoder sim-
ilarities and then go into product-speciﬁc details. Due to space limitation and
ethical considerations (see Sect. 8), we focus on our key ﬁndings.
3.1 Overview
Although all analyzed encoders use diﬀerent methods for data encoding and
encryption, the overall structure of a protected ﬁle and its binary data is simi-
lar. We depicted the general workﬂow in Fig. 2. First, each protected ﬁle identiﬁes
itself as encoded (1). Then, native PHP code provides a fallback routine in case
no loader extension was found (2b). It informs the user about the missing exten-
sion and terminates the execution. If the loader is available, the binary data is
parsed (2a) that hides the PHP bytecode in a proprietary binary format. A ﬁrst
unencrypted header is extracted that speciﬁes the PHP and encoder version.
The following second header is encoded or encrypted and stores more detailed
Fig. 2. Workﬂow of a loader extension: it parses the binary data of a protected ﬁle and
extracts the PHP bytecode that is then executed.
Security Analysis of PHP Bytecode Protection Mechanisms
499
Table 2. Overview of the loader extensions’ internals.
File format
ionCube
Zend Guard
SourceGuardian
binary data
@Zend;