### 归档注意事项及脚本编写指南

#### 1. 归档SHOME目录的注意事项
如果你使用的是带图形化桌面的Linux发行版，在归档整个`$HOME`目录时需要特别注意。尽管这个想法看似很有吸引力，但`$HOME`目录中包含许多与图形界面相关的配置文件和临时文件，这会导致生成一个比预期大得多的归档文件。因此，建议选择一个专门用于存储工作文件的子目录，并在归档配置文件中指定该子目录。

为了使脚本能够读取这些配置文件并将每个目录名添加到归档列表中，可以使用`read`命令（参见第14章）。与之前通过管道将`cat`命令输出传递给`while`循环的方法不同，这里推荐使用`exec`命令（同样参见第14章）来重定向标准输入（STDIN），具体用法如下：
```bash
exec < /path/to/config_file
```

---

### 第24章 编写简单的脚本实用工具

#### 2. 运行按日归档脚本
在测试脚本前，请确保修改了脚本文件的权限（详情参见第11章）。必须赋予文件所有者执行权限（`x`），以便能够运行脚本。
```bash
ls -l Daily_Archive.sh
chmod u+x Daily_Archive.sh
```
检查脚本权限是否已正确设置：
```bash
ls -l Daily_Archive.sh
-rwxr-x--- 1 ChxiatIne Chr1acIne 1994 Aug 28 15:58 Daily_Archive.sh
```
测试`Daily_Archive.sh`脚本非常简单：
```bash
./Daily_Archive.sh
/home/Does_not_exist, does not exist.
Obviously, I will not include It in this archive.
Continuing to build archive list...
It is listed on line 3 of the config file.
Starting archive...
Resulting archive file is: /archive/archive140828.tar.gz
Archive completed
ls /archive
archive140828.tar.gz Files_To_Backup
```
如上所示，脚本能识别出不存在的目录（如`/home/Does_not_exist`），并继续构建列表和创建归档文件。

#### 3. 创建按小时归档脚本
对于文件更新频繁的高负载生产环境来说，每日归档可能不够频繁。若需提高至每小时一次，则还需考虑其他因素，例如如何命名归档文件以避免混淆。如果仍然使用`date`命令为每个`.tar.gz`文件添加时间戳，那么很快就会出现大量难以管理的文件名。

解决方法之一是为归档文件创建一个层次化的目录结构，如图24-1所示。首先创建新目录`/archive/hourly`并设置合适的权限：
```bash
sudo mkdir /archive/hourly
[sudo] password for Chrlatine:
sudo chgrp Archivers /archive/hourly
chmod g+rwxs /archive/hourly
```
确认新目录及其权限设置正确：
```bash
ls -ld /archive/hourly
drwxrwxr-x 2 root Archivers 4096 Sep 2 09:24 /archive/hourly
```
接下来，移动按小时归档所需的配置文件`Files_To_Backup`到该目录下：
```bash
mv Files_To_Backup /archive/hourly/
```
现在编写`Hourly_Archive.sh`脚本，它会自动创建对应每月和每天的目录，并且即使目录已经存在也不会报错。这是利用`mkdir`命令中的`-p`选项实现的。以下是脚本的一部分示例代码：
```bash
#!/bin/bash
# Hourly_Archive - Every hour create an archive
CONFIG_FILE=/archive/hourly/Files_To_Backup
BASEDEST=/archive/hourly
DAY=$(date +%d)
MONTH=$(date +%m)
TIME=$(date +%H%M)

# Create Archive Destination Directory
mkdir -p $BASEDEST/$MONTH/$DAY

# Build Archive Destination File Name
DESTINATION=$BASEDEST/$MONTH/$DAY/archive$TIME.tar.gz

### Main Script ###
[...]
```
当`Hourly_Archive.sh`到达主脚本部分时，其逻辑与`Daily_Archive.sh`基本相同。此脚本从`date`命令获取日期、月份及时间戳信息，据此创建相应日期的目录（如果不存在的话），最后使用`tar`命令创建并压缩归档文件。

#### 4. 测试按小时归档脚本
如同对`Daily_Archive.sh`的操作一样，在将`Hourly_Archive.sh`添加进crontab之前也应先进行手动测试。在此之前别忘了调整好脚本的执行权限：
```bash
chmod u+x Hourly_Archive.sh
```
此外，可以通过`date`命令来验证当前时间和分钟数，以确保最终归档文件名准确无误：
```bash
date +%H%M
./Hourly_Archive.sh
Starting archive...
Archive completed
Resulting archive file is: /archive/hourly/09/02/archive1011.tar.gz
```
以上步骤完成后，你就成功实现了基于时间频率的自动化文件归档系统。