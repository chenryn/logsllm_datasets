                this.operation.setBody(body, this.operation.getContentType());
            }
        }
        RestOperationIdentifier.setIdentityFromAuthenticationData(this.operation, new Runnable() {
            public void run() {
                if (!RestServer.trySendInProcess(ReadListenerImpl.this.operation)) {
                    RestServerServlet.failRequest(ReadListenerImpl.this.context, ReadListenerImpl.this.operation, new RestWorkerUriNotFoundException(ReadListenerImpl.this.operation.getUri().toString()), 404);
                }
            }
        });
        RestServer.trace(this.operation);
    }
    跟着先去看一下trySendInProcess
    ```java
        public static boolean trySendInProcess(RestOperation request) {
            try {
                URI uri = request.getUri();
                if (uri == null) {
                    throw new IllegalArgumentException("uri is null");
                }
                if (!RestHelper.isLocalHost(uri.getHost())) {
                    return false;
                }
                RestServer server = getInstance(uri.getPort());
                if (server == null) {
                    return false;
                }
                RestWorker worker = null;
                worker = findWorker(request, server);
                if (worker == null) {
                    String sanatizePath = sanitizePath(uri.getPath());
                    String message = String.format("URI path %s not registered.  Please verify URI is supported and wait for /available suffix to be responsive.", sanatizePath);
                    RestErrorResponse errorResponse = RestErrorResponse.create().setCode(404L).setMessage(message).setReferer(request.getReferer()).setRestOperationId(request.getId()).setErrorStack((List)null);
                    request.setIsRestErrorResponseRequired(false);
                    request.setBody(errorResponse);
                    request.fail(new RestWorkerUriNotFoundException(message));
                    return true;
                }
                try {
                    worker.onRequest(request);
                } finally {
                    ApiUsageData.addUsage(BUCKET.MESSAGE, request.getMethod(), worker.getUri().getPath());
                }
            } catch (Exception var11) {
                LOGGER.severe("e:" + var11.getMessage());
                request.fail(var11);
            }
            return true;
        }
这里，基础的配置设置完成后，会调用worker.onRequest(request)
    protected void onRequest(RestOperation request, String key) {
            if (request != null) {
                boolean toDispatch = this.dispatchOrQueue(request, key);
                if (toDispatch) {
                    this.requestReadyQueue.add(request);
                    this.getServer().scheduleRequestProcessing(this);
                }
            }
        }
将此request加入到requestReadyQueue中去，然后scheduleRequestProcessing
    public void scheduleRequestProcessing(RestWorker worker) {
        if (this.readyWorkerSet.add(worker)) {
            RestThreadManager.getNonBlockingPool().execute(this.processRequestsTask);
        }
    }
然后会调用processRequestsTask来处理这个请求，这个processRequestsTask在前边已经明确定义
    public RestServer(int port, JettyHost jettyHost) {
        this.pathToWorkerMap = new ConcurrentSkipListMap();
        this.workerToCollectionPathsMap = new ConcurrentSkipListMap();
        this.checkRestWorkerShutdownMillis = (int)TimeUnit.MINUTES.toMillis(1L);
        this.supportWorkersStarted = false;
        this.allowStackTracesInPublicResponse = false;
        this.storageUri = null;
        this.configIndexUri = null;
        this.groupResolverUri = null;
        this.deviceResolverUri = null;
        this.forwarderUri = null;
        this.machineId = null;
        this.discoveryAddress = null;
        this.scheduleTaskManager = (new ScheduleTaskManager()).setLogger(LOGGER);
        this.readyWorkerSet = new ConcurrentSkipListSet();
        this.indexRebuildCoordinator = new RunnableCoordinator(1);
        this.forwardRequestValidator = null;
        if (port < 0) {
            throw new IllegalArgumentException("port");
        } else {
            this.listenPort = port;
            this.jettyHost = jettyHost;
            this.processRequestsTask = new Runnable() {
                public void run() {
                    RestServer.this.processQueuedRequests();
                }
            };
        }
    }
所以直接去看processQueuedRequests的处理即可,从队列中依次取出需要处理的request，挨个处理
    private void processQueuedRequests() {
        ArrayList workersWithMoreWork = new ArrayList();
        while(true) {
            RestWorker worker = (RestWorker)this.readyWorkerSet.pollFirst();
            if (worker == null) {
                Iterator i$ = workersWithMoreWork.iterator();
                while(i$.hasNext()) {
                    RestWorker w = (RestWorker)i$.next();
                    this.scheduleRequestProcessing(w);
                }
                return;
            }
            boolean doContinue = false;
            for(int i = 0; i < 100; ++i) {
                RestOperation request = worker.pollReadyRequestQueue();
                if (request == null) {
                    doContinue = true;
                    break;
                }
                worker.callRestMethodHandler(request);
            }
            if (!doContinue && worker.requestAreWaitingInReadyQueue()) {
                workersWithMoreWork.add(worker);
            }
        }
    }
可以看到，队列中取出 request后会调用callRestMethodHandler去处理
    protected final void callRestMethodHandler(RestOperation request) {
            try {
                boolean updateStats = RestHelper.isOperationTracingEnabled() && !this.isHelper();
                RestMethod method = request.getMethod();
                boolean hasParameters = !request.getParameters().isEmpty();
                long startTimeMicroSec = 0L;
                RestWorkerStats stats;
                if (updateStats) {
                    startTimeMicroSec = RestHelper.getNowMicrosUtc();
                    stats = this.getStats();
                    if (stats != null) {
                        stats.incrementRequestCountForMethod(method, hasParameters);
                    }
                }
                this.callDerivedRestMethod(request, method, hasParameters);
                if (updateStats) {
                    stats = this.getStats();
                    if (stats != null) {
                        stats.incrementMovingAverageRequestCountForMethod(method, RestHelper.getNowMicrosUtc() - startTimeMicroSec, hasParameters);
                    }
                }
            } catch (Exception var9) {
                Exception e = var9;
                try {
                    if (e instanceof JsonSyntaxException && (e.getCause() instanceof IllegalStateException || e.getCause() instanceof MalformedJsonException || e.getCause() instanceof EOFException)) {
                        LOGGER.fine("JSON parsing exception error, will execute XSS validation");
                        this.handleXSSAttack(request, e.getLocalizedMessage());
                    }
                    String exceptionMsgWithStack = RestHelper.throwableStackToString(e);
                    LOGGER.warning(String.format("dispatch to worker %s caught following exception: %s", this.getUri(), exceptionMsgWithStack));
                } catch (Exception var8) {
                    LOGGER.severe("Failed to log exception in callRestMethodHandler");
                }
                request.fail(var9);
            }
        }
做一些判断后会调用callDerivedRestMethod函数
    protected void callDerivedRestMethod(RestOperation request, RestMethod method, boolean hasParameters) {
        switch(method) {
        case GET:
            if (hasParameters) {
                this.onQuery(request);
            } else {
                this.onGet(request);
            }
            break;
        case PATCH:
            this.onPatch(request);
            break;
        case POST:
            this.onPost(request);
            break;
        case PUT:
            this.onPut(request);
            break;
        case DELETE:
            this.onDelete(request);
            break;
        case OPTIONS:
            String origin = request.getAdditionalHeader(Direction.REQUEST, "Origin");
            if (origin != null && !origin.isEmpty()) {
                request.getAdditionalHeaders(Direction.RESPONSE).addCORSResponseAllowMethodsHeader(this.getAllowedHttpMethods());
            }
            this.onOptions(request);
            break;
        default:
            request.fail(new UnsupportedOperationException());
        }
    }
根据request_method分发，我们去看onPost的实现
**这里一定要注意一点，此时的this并不是RestWorker对象,而是ForwarderPassThroughWorker对象,具体要向前回溯去看实例化的过程，但是太麻烦，简易直接通过动态调试，一目了然**
    protected void onPost(RestOperation request) {
        this.onForward(request);
    }
继续向下追ForwarderPassThroughWorker中的onForward
    private void onForward(final RestOperation request) {
        final ForwarderWorkerRequest mapping = this.forwarder.findMapping(request.getUri().getPath());
        if (mapping == null) {
            request.setStatusCode(400);
            this.failRequest(request, this.getUriNotRegisteredException(request));
        } else {
            if (this.isExternalRequest(request)) {
                ForwardRequestValidator validator = this.getServer().getForwardRequestValidator();
                if (validator != null) {
                    try {
                        validator.validateRequest(request);
                    } catch (Exception var7) {
                        this.failRequest(request, var7);
                        return;
                    }
                }
                switch(mapping.apiStatus) {
                case DEPRECATED:
                    request.setResourceDeprecated(true);
                    if (!isDeprecatedApiAllowed) {
                        request.setStatusCode(404);
                        this.failRequest(request, this.getUriNotRegisteredException(request));
                        this.logApiNotAvailable(request.getUri().getPath(), "deprecate");
                        return;
                    }
                    this.logApiAccessFailure(isLogDeprecatedApiAllowed, request.getUri().getPath(), "deprecate");
                    break;
                case EARLY_ACCESS:
                    request.setResourceEarlyAccess(true);
                    if (!isEarlyAccessApiAllowed) {
                        request.setStatusCode(404);
                        this.failRequest(request, this.getUriNotRegisteredException(request));
                        this.logApiNotAvailable(request.getUri().getPath(), "earlyAccess");
                        return;
                    }
                    this.logApiAccessFailure(isLogEarlyAccessApiAllowed, request.getUri().getPath(), "earlyAccess");
                    break;
                case TEST_ONLY:
                    if (!isTestOnlyApiAllowed) {
                        request.setStatusCode(404);
                        this.failRequest(request, this.getUriNotRegisteredException(request));
                        this.logApiNotAvailable(request.getUri().getPath(), "testOnly");