结论：使用go 协程后，执行的速度，比普通方法提高至少4倍
16.9 channel 使用细节和注意事项
1) channel 可以声明为只读，或者只写性质 【案例演示】
2) channel 只读和只写的最佳实践案例
3) 使用select 可以解决从管道取数据的阻塞问题
package main
import(
"fmt"
"time"
)
funcmain() {
//使用select 可以解决从管道取数据的阻塞问题
//1.定义一个管道 10个数据int
intChan:=make(chan int, 10)
fori :=0; i  string
fs.SetString("jack") //error
fmt.Printf("%v\n", str)
}
修改如下：
17.7 反射最佳实践
1) 使用反射来遍历结构体的字段，调用结构体的方法，并获取结构体标签的值
package main
import(
"fmt"
"reflect"
)
//定义了一个 Monster 结构体
type Monsterstruct {
Name string`json:"name"`
Age int `json:"monster_age"`
Scorefloat32 `json:"成绩"`
Sex string
}
//方法，返回两个数的和
func(s Monster) GetSum(n1, n2int)int{
return n1+n2
}
//方法， 接收四个值，给 s 赋值
func(s Monster) Set(name string, age int, score float32, sex string){
s.Name= name
s.Age =age
s.Score= score
s.Sex =sex
}
//方法，显示 s 的值
func(s Monster) Print(){
fmt.Println("---start~----")
fmt.Println(s)
fmt.Println("---end~----")
}
funcTestStruct(ainterface{}) {
//获取reflect.Type 类型
typ :=reflect.TypeOf(a)
//获取reflect.Value 类型
val :=reflect.ValueOf(a)
//获取到 a对应的类别
kd:=val.Kind()
//如果传入的不是 struct，就退出
ifkd!= reflect.Struct {
fmt.Println("expect struct")
return
}
//获取到该结构体有几个字段
num:=val.NumField()
fmt.Printf("struct has %d fields\n", num)//4
//变量结构体的所有字段
fori :=0; i <num; i++{
fmt.Printf("Field %d: 值为=%v\n", i, val.Field(i))
//获取到 struct 标签, 注意需要通过reflect.Type 来获取tag 标签的值
tagVal:=typ.Field(i).Tag.Get("json")
//如果该字段于 tag标签就显示，否则就不显示
iftagVal!= "" {
fmt.Printf("Field %d: tag 为=%v\n", i, tagVal)
}
}
//获取到该结构体有多少个方法
numOfMethod :=val.NumMethod()
fmt.Printf("struct has %d methods\n", numOfMethod)
//varparams []reflect.Value
//方法的排序默认是按照 函数名的排序（ASCII 码）
val.Method(1).Call(nil)//获取到第二个方法。调用它
//调用结构体的第 1个方法Method(0)
varparams []reflect.Value //声明了 []reflect.Value
params =append(params, reflect.ValueOf(10))
params =append(params, reflect.ValueOf(40))
res :=val.Method(0).Call(params) //传入的参数是 []reflect.Value, 返回[]reflect.Value
fmt.Println("res=", res[0].Int()) //返回结果, 返回的结果是 []reflect.Value*/
}
funcmain() {
//创建了一个 Monster 实例
varaMonster =Monster{
Name: "黄鼠狼精",
Age: 400,
Score: 30.8,
}
//将Monster 实例传递给TestStruct 函数
TestStruct(a)
}
2) 使用反射的方式来获取结构体的tag 标签, 遍历字段的值，修改字段值，调用结构体方法(要求：
通过传递地址的方式完成, 在前面案例上修改即可)
3) 定义了两个函数test1和test2，定义一个适配器函数用作统一处理接口【了解】
4) 使用反射操作任意结构体类型：【了解】
5) 使用反射创建并操作结构体
17.8 课后作业
第 章 编程
18 tcp
18.1 看两个实际应用
 QQ,迅雷,百度网盘客户端. 新浪网站,京东商城,淘宝..
18.2 网络编程基本介绍
Golang 的主要设计目标之一就是面向大规模后端服务程序，网络通信这块是服务端 程序必不可少
也是至关重要的一部分。
 网络编程有两种:
1) TCPsocket 编程，是网络编程的主流。之所以叫 Tcp socket 编程，是因为底层是基于 Tcp/ip 协
议的. 比如:QQ 聊天 [示意图]
2) b/s 结构的 http 编程，我们使用浏览器去访问服务器时，使用的就是 http 协议，而 http 底层依
旧是用tcpsocket 实现的。[示意图] 比如: 京东商城 【这属于go web 开发范畴 】
18.2.1 网线,网卡,无线网卡
计算机间要相互通讯,必须要求网线,网卡,或者是无线网卡.
18.2.2 协议(tcp/ip)
TCP/IP（Transmission Control Protocol/Internet Protocol)的简写,中文译名为传输控制协议/因特网互
联协议，又叫网络通讯协议，这个协议是 Internet 最基本的协议、Internet 国际互联网络的基础，简单
地说，就是由网络层的IP 协议和传输层的TCP协议组成的。
18.2.3 OSI 与 Tcp/ip 参考模型 (推荐 tcp/ip 协议 3 卷)
18.2.4 ip 地址
概述：每个internet 上的主机和路由器都有一个 ip地址，它包括网络号和主机号，ip地址有 ipv4(32
位)或者ipv6(128 位). 可以通过ipconfig 来查看
18.2.5 端口(port)-介绍
我们这里所指的端口不是指物理意义上的端口，而是特指TCP/IP 协议中的端口，是
逻辑意义上的端口。
如果把IP 地址比作一间房子，端口就是出入这间房子的门。真正的房子只有几个
门，但是一个IP 地址的端口 可以有65536（即：256×256）个之多！端口是通过端
口号来标记的，端口号只有整数，范围是从0 到65535（256×256-1）
18.2.6 端口(port)-分类