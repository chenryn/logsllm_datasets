amplitudes of the ﬁrst and the second multipath components
of the primary user, respectively. According to Equation 2,
Prp1 and Prp2 can be modeled by
Prp1 =pPtpk,
Prp2 =sPtpk(
d0
dp2
)γ ,
where Ptp is the transmit power of the primary user. Hence,
the ratio rp of Prp1 to Prp2 can be written as
rp = pPtpk
qPtpk( d0
dp2
=r(
dp2
d0
)γ .
)γ
The primary user’s signal is wrongly identiﬁed as an at-
tacker’s signal if rp  0, the secondary node needs to future hash ri for i times
and compare H (ri) with r0. If they match, the packet
is also valid. In any case, the secondary node should save
ri for future authentication.
If the secondary node has received and veriﬁed a signature
from the helper node with the same hash chain previously,
it must have saved an authenticated hash value rj (j (rj ) and compare the result with ri. A match
indicates a successful authentication of the packet.
As we can see, the helper node needs to generate one
and only one cryptographic signature for each hash chain.
Similarly, each secondary node only needs to verify one
cryptographic signature once for each hash chain. Thus, this
amortization approach can greatly reduce the computational
overheads on both the helper node and the secondary node.
Defending against Replay Attacks: As discussed earlier,
a critical threat is that the attacker may replay intercepted
training packets from a valid helper node at its own location.
As a result,
the attacker can convince secondary users
the attacker’s link signatures as training link
to accept
signatures. Since the secondary users are not guaranteed
to have received the original transmission, traditional anti-
replay mechanisms such as sequence numbers, which are
intended for detecting replayed packet contents (rather than
replayed signals), will not work.
Fortunately, there are multiple known techniques to handle
replayed signals in wireless networks, such as the hardware-
based, authenticated Medium Access Control (MAC) layer
timestamping [33] and the method for detecting wireless
signals tunneled by a malicious node [20]. These techniques
can be adopted in CRNs to enable a secondary node and the
helper node to detect replayed training packets.
Alternatively, we may take advantage of potentially syn-
chronized clocks between valid secondary users and the
helper node to defend against such threats. According to
IEEE 802.22 standard [9], secondary users and base stations
are “required to use satellite based geo-location technology,
which will also facilitate synchronization among neighbor-
ing networks by providing a global time source.” We can
assign each value in the above hash chain to a speciﬁc
point in time. These times can be pre-scheduled such that all
secondary users know when each hash value should be used.
The helper node then transmits each hash value at the pre-
scheduled point in time, provided that the primary user is not
using the channel. When a secondary user receives a training
packet, it can use its local time and the pre-scheduled time
to estimate the transmission time of this packet. An overly
long transmission time indicates that the packet has been
replayed by the attacker.
Learning Training Link Signatures: To compute the
training link signature, the secondary user samples the re-
ceived signal using an A/D sampler, stores the ﬁrst κ+1 sam-
ples in a buffer, and demodulates the samples of the received
signal into a packet. If the packet can pass authentication,
the secondary user computes the link signature of the packet
using the stored κ + 1 samples. (See the Appendix for how
to compute link signatures.) Otherwise, the secondary user
discards the stored samples. The secondary user typically
needs to obtain a series of training link signatures for
verifying future signals.
B. Verifying Link Signatures
For a newly received signal sN , the secondary user ﬁrst
measures its link signature, which is denoted by h(N ), and
then use training link signatures to verify h(N ).
Let H = {h(n)}N−1
n=1 denote the set of training link
signatures, where h(n) is the link signature measured from
the i-th received training packet. The secondary user can
verify whether sN is transmitted by the primary user or not
using the location distinction algorithm proposed in [23].
Speciﬁcally, the secondary user calculates the distance (i.e.,
difference) between hN and the training set H, and then
compares the distance with a threshold. If the distance is
less than a threshold, sN is marked as the primary user’s
signal. Otherwise, sN may be sent by the attacker and the
secondary user ignores it. The method that can be used to
calculate distance is discussed in [23].
VII. EXPERIMENTAL EVALUATION
Our approach involves two types of authentication: au-
thentication of the primary user’s signal at the helper node,
and authentication of the primary user’s signal at a secondary
user. In this section, we report our experimental evaluation
to show the effectiveness of both methods.
We validate the proposed authentication methods using
the CRAWDAD data set [22], which includes over 9,300
real channel impulse response measurements (i.e., link sig-
natures) in a 44-node wireless network [32]. There are
44 × 43 = 1, 892 pairwise links between the nodes, and