title:Grid-Oriented Process Clustering System for Partial Message Logging
author:Hideyuki Jitsumoto and
Yuki Todoroki and
Yutaka Ishikawa and
Mitsuhisa Sato
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Grid-oriented Process Clustering System for Partial
Message Logging
7-3-1 Hongo, Bunkyo-ku, Tokyo 113-8654, Japan
1-1-1 Tennodai, Tsukuba-City, Ibaraki 305-8577, Japan
Mitsuhisa Sato
Center for Computational Science
University of Tsukuba
Email: PI:EMAIL
Hideyuki Jitsumoto1, Yuki Todoroki2, Yutaka Ishikawa1,2
Information Technology Center1, Dept. of Information Science2
University of Tokyo
Email: PI:EMAIL,
{todoroki, ishikawa}@is.s.u-tokyo.ac.jp
Abstract—In a computer cluster composed of many nodes,
the mean time between failures becomes shorter as the number
of nodes increases. This may mean that lengthy tasks cannot be
performed, because they will be interrupted by failure. Therefore,
fault tolerance has become an essential part of high-performance
computing. Partial message logging forms clusters of processes,
and coordinates a series of checkpoints to log messages between
groups. Our study proposes a system of two features to improve
the efﬁciency of partial message logging: 1) the communication
log used in the clustering is recorded at runtime, and 2) a graph
partitioning algorithm reduces the complexity of the system by
geometrically partitioning a grid graph. The proposed system
is evaluated by executing a scientiﬁc application. The results of
process clustering are compared to existing methods in terms of
the clustering performance and quality.
keyword: fault tolerance, message logging, graph partition
I.
INTRODUCTION
Extreme-scale high-performance computing systems en-
counter high failure ratios. This is because of the number of
computing elements involved, as well as the fact that each
computing element is constructed to be of high density and low
power consumption. As a result, fault tolerance techniques are
indispensable for long-running, massively parallel applications
in extreme-scale environments.
Although rollback recovery with checkpoints (C/R: check-
point/restart) is a popular fault
tolerance method in high-
performance computing systems, recent work suggests that
naive C/R is ineffective, because the C/R cost is larger than
the mean time between failures (MTBF) of the system [1].
Hence, a number of studies have attempted to reduce the
cost of C/R. Broadly speaking, C/R can be classiﬁed into
two approaches, coordinated or uncoordinated. Coordinated
methods form one consistent checkpoint for all processes,
using a coordination mechanism such as synchronization. In
contrast, uncoordinated methods employ many checkpoints for
each process, and select a consistent group of checkpoints on
restarting. Because of complexities in the selection of consis-
tent checkpoints and the domino effect (chained roll-backing
to maintain consistency), feasible uncoordinated checkpoints
use roll-forwarding from the checkpoint to the fail point with
message logging.
Coordinated checkpoints and uncoordinated checkpoints
with message logging, which is called log-based checkpoint-
ing, have strengths and weaknesses. Coordinated checkpoints
only incur a cost at the checkpoint. However, they require
forced roll-backing for all processes when a failure occurs.
Forcing all processes to roll-back increases power consumption
and performance overhead. With log-based checkpointing, only
the failed processs has to restart, but incurs large resource
and performance overheads when recording the log into stable
storage or memory, even if there are no failures. In extreme-
scale high-performance computing, the disadvantages of both
methods cause a critical increase in the C/R cost.
Partial message logging [4] is a hybrid method with co-
ordinated and log-based checkpointing. This method achieves
partial roll-backing and reduces the logging cost. By splitting
processes into a number of groups,
it utilizes coordinated
checkpointing within the same group, and only logs the
communication between groups. Using this method, there is
a trade-off between the granularity of the forced roll-backing
and the size of the communication logs. Basically, this is a
clustering optimization problem that can be solved using a
graph partitioning method. Speciﬁcally, the processes, commu-
nication patterns, and number of communications are treated as
the vertices, edges, and weights of each edge. The method then
splits the graph with the minimum edge-cut. Previous work
uses graph partitioning tools like METIS [5], and analyzes
the communication pattern prior to execution. However, this is
not realistic here, because the pre-execution step would require
signiﬁcant resources and a long execution time to create the
same communication pattern as the performance execution.
We propose an on-the-ﬂy analysis method with limiting
area for enabling checkpoint. Our method, the Runtime Process
Clustering System (RPCS), focuses on the main application
loops, and analyzes the ﬁrst loop execution. We consider graph
partitioning tools to be too high performance, adaptive, and
accurate for partial log-based checkpointing. Thus, we propose
a rough partitioning method with process mapping information
for the grid graph.
II. RELATED WORK
A. Previous Work on Partial Message Logging
Partial message logging or hybrid checkpointing was ﬁrst
mentioned in [4], [6] and others. In [3], a clustering method
for effective partial message logging was studied, and this
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.72
714
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:21:10 UTC from IEEE Xplore.  Restrictions apply. 
is closely related to our work. This study used graph parti-
tioning tools that require the maximum partition size, then
applied a bisection-based method to satisfy this constraint.
Until minimizing evaluation formula which proposed on [3],
the communication graph is repeatedly partitioned as two parts.
The following formula based on [3] evaluates the wasted
computer resources:
Cost = α × L + β × R
(1)
In this formula, α and β are the costs associated with message
logging and restarting processes after failure, respectively.
They are determined by the execution environment. L is the
ratio of logged data, and R is the proportion of processes that
must be restarted after a failure. These are determined by the
application characteristics. RPCS uses the same method, but
employs a different algorithm for partitioning.
B. Graph Partitioning Tools
METIS is a widely used graph partitioning tool. It pro-
vides two algorithms that can be applied to general graph
partitioning problems. These algorithms combine vertices that
are closely connected, and construct graphs that are smaller
than the original. These smaller graphs are then partitioned
into subgraphs using a simple sorting algorithm based on the
edge weights. Both phases depend on the number of edges
E—hence, METIS has O(|E|) computational complexity. The
SCOTCH[7] tool can provide a mapping between two graphs.
It can also consider graph partitioning problems, and uses
almost the same method as METIS by default.
The graph partitioning problem is also used in the ﬁeld of
region segmentation. Recursive graph bisection (RGB) and re-
cursive coordinate bisection (RCB) achieve graph partitioning
by sorting the coordinates of the vertices. Their computational
complexity is O(N logN ) for a graph consisting of N vertices.
RPCS also uses the coordinates of vertices, but only requires
information about vertices on the boundary. The computational
√
complexity of our method is O(
N ) for a 2D grid graph, and
N ) for a 3D grid graph. Therefore, our algorithm is more
O( 3
scalable than the other simple partitioning algorithms discussed
here.
√
III. RPCS: RUNTIME PROCESS CLUSTERING SYSTEM
FOR PARTIAL MESSAGE LOGGING
The proposed RPCS incorporates the runtime analysis of
communication between nodes, and geometrical graph parti-
tioning with a fast/scalable algorithm.
A. Motivation
Previous studies[2] assumed that the communication pat-
tern of an application is given. However, it is difﬁcult to obtain
the communication pattern without executing the application.
Although advance execution can obtain the complete commu-
nication pattern, this requires signiﬁcant resources that do not
contribute to the results of the application. In addition, it is
difﬁcult for application users to estimate the communication
pattern of execution from a small dataset, and it is unrealistic
to expect an application programmer to extract communication
code from an application as a micro-benchmark. Therefore,
Fig. 1. Scenario of partial message logging
we propose a dynamic analysis method that can easily be
employed by application users.
Secondly, previous studies use graph partitioning tools
such as METIS and SCOTCH. These tools can treat various
applications and are highly focused on accuracy. For dynamic
analysis, because the performance execution includes the anal-
ysis cost, the execution time is important. We thus reduce the
accuracy and adaptability to reduce the graph partitioning time.
B. Runtime Analysis of Communication and Partial Message
Logging
iteration,
Figure 1 illustrates the analysis of communication at run-
time. High-performance computing applications usually have
loops that repeat the same calculations and communications on
each iteration. These loops typically take up most of the execu-
tion time of an application. On such a loop, the communication
pattern can be determined from the ﬁrst iteration. Because
RPCS only logs the complete communication pattern on the
ﬁrst
the cost of determining the communication
pattern is less than that using the advance execution method.
Under RPCS, an application user need only insert some
annotation in the application source code as directives that
function as I/O to the graph partitioning tools. The most
important annotation is the declaration of an analysis loop that
includes mainly calculation and communication (Figure 2).
On the ﬁrst
iteration of a declared loop, RPCS logs the
communication and analyzes its graph. Then, on the second (or
later) iteration, RPCS only logs the communication between
different groups. In this study, RPCS does not consider a
process checkpointer; therefore, we need some checkpointing
tool to achieve fault tolerance.
C. Fast and Scalable Geometrical Graph Partitioning
To reduce the graph partitioning cost, we focus on the
geometrical mapping of processes on physical nodes. Many
modern supercomputers support a 2D or 3D torus network
topology. Thus, application programmers distribute processes
to physical nodes according to their connectivity. Therefore,
processes allocated to nearby nodes can be grouped in the
same cluster of partial message logging. RPCS uses a grid
network topology and the geometry of process mapping on the
physical nodes. This grouping method has three advantages in
terms of process based grouping: 1) node-based methods group
715
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:21:10 UTC from IEEE Xplore.  Restrictions apply. 
'
(cid:668)(cid:668)
&
}
(cid:668)(cid:668)
// declaration of main loop
#pragma RPCS MAIN_LOOP
for (i (cid:668)) {
(cid:668)(cid:668)
//calculations
Calc_or_solver();
//communications
MPI_XXXX();
$
%
Fig. 2. Declaration of main loops with directive method
processes faster than process-based methods, because there are
fewer vertices and edges in the communication graph; 2) all
applications executed on a 2D or 3D torus can be treated by
a grid topology model, even if the application does not use
a grid topology (a limitation will be mentioned later); and
3) fewer processes need to be rolled back when node failure
occurs, because processes on failed nodes are included in the
same group. The accuracy of node-based methods depends on
the quality of process allocation on the physical nodes. We can
assume the quality is high, because the optimization of process
allocation is important in improving application performance.
A ﬂowchart of our algorithm to divide the physical node
topology into a grid graph is shown in Figure 3. This ﬁgure
uses a 2D grid topology as an example to simplify the expla-
nation of our algorithm. In most high-performance computing
applications, each process only knows its neighbor processes,
but is aware of the whole process mapping of the application.
RPCS detects (roughly) the whole process mapping, and
divides it using the following bisectional method:
1)
2)
Detect nodes executing processes using the hostname
table, such as(cid:672) machineﬁle (cid:673)of MPI[8], and convert
process communication log to node communication
log.
Determine a temporal reference vertex (in our imple-
mentation, the temporal start vertex corresponds to
the physical node running process rank 0).
3) Measure the width along the X-axis.
4) Move reference vertex to the middle vertex of the line
along the X-axis determined in step 3.
5) Measure the width along the Y-axis from the new
reference point.
6) Move reference vertex to the middle vertex of the line
along the Y-axis determined in step 5.
7) Measure the width along the X-axis again from the
new reference point.
Bisect the graph by crossing the axis that has the
narrower width.
8)
Some region splitting methods, such as RGB and RCB,
use a concept that is similar to our method. However, these
methods have O(N logN ) computational complexity for a
graph of N nodes, because all of the nodes must be sorted. The
method used in RPCS has O(
N ) computational complexity
under an ideal process mapping on a 2D grid topology, because
the proposed method checks the vertices as it crosses the whole
graph object. The basic idea of this algorithm can easily be
√
716
Fig. 3.
Flow of partitioning algorithm; Finding center vertex (left): Node1
is result of Step2, Node2 is result of Step3 to Step4 and Node3 is result of
Step5 to Step6. And measureing width along each axis and bisection (right)
applied on a 3D grid topology. Speciﬁcally, we add a Z-axis,
measure its width, and use the surface as a border between
√
partitions, instead of the border line used in 2D. In this case,
the computational complexity is O( 3
N ).
i.e.,
The RPCS method cannot be easily applied to general
graph partitioning, which is often represented as a process
communication graph. This is because our algorithm cannot
deal with edge weights,
the number and volume of
communications. Our method can be used in applications
that have similar edge weights between neighbor nodes. The
most common application that can use this method is the
stencil computation of a simply shaped object. However, the
stencil model is a very basic method for high-performance
applications because of the physical node topology. In addition,
if the process mapping of an application has a well-optimized
communication pattern, our method can be effective.
IV. PROTOTYPE IMPLEMENTATION
A. Message Logging for Graph Partitioning
On the ﬁrst iteration of the main loop, RPCS accesses
the communication log by hooking MPIs through PMPI.
Therefore, the application user need only set the environmental
value, LD PRELOAD, or links with the hooking library. RPCS
only includes a wrapper for point-to-point MPI communica-
tion, because logging collective communication with PMPI is
difﬁcult, and does not have the capability of MPI implemen-
tation. However, communication in an application that has a
stencil model is almost point-to-point because of its algorithm.
Thus, we can currently tolerate this limitation. Furthermore,
the message contents are not logged (though logging the con-
tents of point-to-point communication is possible), because that
information is not necessary for process clustering. For overall
fault tolerance with partial message logging, we will combine
a log-based checkpointer that includes a fault/recovery model
and content
logging that satisﬁes fault/recovery model of
combined checkpointer.
B. Communication Between RPCS and Application
Tentatively, we communicate information between the sys-
tem and application through ﬁles. We assume a shared parallel
ﬁle system for this communication. However, our design is
such that this method of communication is replaceable.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:21:10 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I.
EXPERIMENTAL ENVIRONMENT
SYSTEM
CPU
Memory
OS
Network
Oakleaf FX-10
SPARC64TM IXfx
(1.848 GHz, 16 cores, 12 MB L2 cache)
32 GB/Node
RedHat Enterprise Linux for FX10
Kernel Linux 2.6.25.8
Tofu interconnect (5 GB/sx2)
Fig. 4.
(left), and group ID is propagated to another border (right)
Flow of broadcasting group ID: Border vertices receive group ID
C. Broadcasting the Grouping Result
When using some common graph partitioning tools, the
processes need only broadcast a group number corresponding
to the processes, but this approach presents a problem in our
method. Because our algorithm only determines the border
between groups, RPCS must convert border information to
group information for each process.
The ﬂow of 2D broadcasting for RPCS is shown in
Figure 4, and proceeds as follows:
1)
2)
3)
On partitioning, RPCS saves group ID 1 for the Y-
axis that was calculated as the edge of the grid.
RPCS also saves later group IDs appropriately for
each bisectional partitioning.
Processes that have a group ID send their ID to the
next process along the X-axis until the information
reaches a process that already has a group ID.
In 3D grouping,
the same broadcasting technique can be
used by applying a similar modiﬁcation as for the clustering
algorithm for a grid graph.
V. EVALUATION
We evaluate the performance of the proposed RPCS by
three methods. First, we measure the partitioning time required
for a 2D grid graph. Second, we conﬁrm the size of the edge-
cut message to evaluate the accuracy of RPCS with an actual
application. Third, we estimate the cost of partial logging-
based fault tolerance using the evaluation method of a previous
study. We use GEOFEM[9] as the actual application. This
provides several common functionalities of FEM applications.
In this evaluation, we run an elastic analysis of a rectangular