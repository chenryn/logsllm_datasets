As we had no intention of doing anything wrong with this, 
and our goal was to do an experiment to see what kind of 
things were done through the Internet Proxy servers, only 
started a couple of payloads. 
1) Identification of bot, and theft of cookies that were 
not HTTP Only and its URL. 
2) Theft of data sent by loaded HTTP forms. 
Identifying bot and URL of connection 
We left out of the payloads the HTTPs connections and 
HTTPOnly cookies, because we had no actual real target, 
and because it was sufficient as sample to obtain that 
information. 
Thus, the first payload identification only did this: 
document.write(“"); 
Allowing us to know which URL was connecting and if he 
had any unsafe session cookie. This information allows us to 
find things very juicy and discover a new Internet full of 
URLs that we had not visited before. 
Grabbig data from the forms 
To get data filed from forms, a small script was generated 
which hook submit events of the forms, with this simple 
JavaScript code. 
Figure 12: Script to hook submits fields of the forms 
And the rest was to discover what is done through an 
Anonymous Proxy Server on the Internet ... What did we 
found there? 
Who uses the Internet Proxy server? 
The main reasons to use an Internet Proxy Server are usually 
two. The first of these is obviously hiding the source IP 
address of the connection. Such users are seeking will 
certainly not leave the IP address of the initial connection to 
a log file that can point directly to them. The second reason 
is often to jump/avoid access restrictions on the network 
connection, i.e. users who want to bypass any security 
restriction in any organization in order to connect to sites 
not allowed by the network administrator. 
With this type of base motives, the type of users of our 
Proxy Server was the most colourful, leaving a good 
collection of data that is worthy to study deeply. Between 
the most striking we found the following: 
Scam artists: The Nigerian scammer 
One of the users of such Internet Proxy Services proved to 
be a man that allegedly was selling Visa Cards for working 
at UK, with IP address from India. To do that, he was 
making an intense campaign of spam with an e-mail 
message requesting payment for Western Union. 
Figure 13: Spam scam campaign and request money 
Of course, some recipients of the messages were quite 
sceptical and their responses were very negative, but we 
could see how some people paid and sent all data to obtain a 
Visa that would never come. 
Figure 14: Victim sending all his documentation 
Scam artists:  The horny chick you get off with tonight 
Another type of scam artists with whom we met are 
dedicated to keeping fake profiles of women in different 
social networks of sentimental contacts. In each, the 
location, name and age of women were different. 
In fact, the same person kept profiles with different types of 
women, allowing it to open the range of victims. 
Figure 15: Rogue profile number 1 
For reasons of space I show you only a couple of profiles of 
all we found that are maintained by the same person. 
Figure 16: False profile number 2 
In this case, its business model was very similar. Making a 
working day, this German crock, is dedicated to linking 
people and ask for money through Western Union to pay for 
the trip to where the victim lives and spend a night of mad, 
wild, nasty love. 
As had many chance encounters, he organised conversations 
and stores them. Some are like this, in which insistently 
sought money in exchange for some alleged "nicked" 
(naked) photos. In the chat you can see that, as it should be 
chatting with several at once, sometimes it plays dirty tricks 
and puts things in their native language. 
Figure 17: A chat log talking to a victim 
The number of chats, and requests for money by Western 
Union did was very high, making this system a real work 
night shift. 
These two types of scams are among the many we saw, 
where we found that it made all kinds of scams, such as 
sales of dogs, fake vehicles, etcetera. A real amount of 
business, we did not know previously. Financial crisis what? 
Worried about anonymity 
Many of the users who came to do something "illegal", the 
first thing they did was check their IP address with websites 
such as Whatismyip.com checking whether they are 
anonymous or not or using others similar websites, but in 
the end, apparently seen, not only should check their IP 
addressing. 
Hacked hackers hacking 
One of the issues that caught our attention as we hoped was 
to find many hackers using WebShell through Proxy Servers 
to deface websites. Among them, we have chosen this 
defacement that we saw how it was made in real-time. 
Figure 18: Hacker’s defacement 
When we look at why he had been infected, we realized that 
he was using an infected WebShell loading a JavaScript file 
to report the URL of the WebShell. This JavaScript file was 
also infected by our Proxy Server, and allows us to discover 
where the webshell was. 
Figure 19: Webshell requesting the infected JavaScript 
So far, everything has been obtained by passive observation 
of navigation, but ... Could we make an active infection by 
selecting to infect websites that are not reached by browsing 
via our Proxy Server? The answer is yes. 
Coming into the intranet 
One of the things that caught our attention when reviewing 
the collected data, was the possibility of finding information 
about machines that were not published on the Internet, that 
is, applications that are being used internally on an Intranet, 
as can be seen the following data in an internal ERP System. 
Figure 20: Data of Intranet web application 
Reasons to collect Intranet application data by a Javascript 
botnet such as ours are simple: 
1) At any time this person configured our Proxy 
Server and was infected. 
2) At some point requested a JavaScript file on 
Internet that was also in use by the Intranet 
application. 
This makes it clear that use remote JavaScript files on an 
Intranet may not be desirable and opens the door to potential 
attacks of this kind. 
Seeing this, we thought it would be easy to prepare a 
targeted attack to any application in the Intranet or the 
Internet, analysing previously the JavaScript files that are 
loaded, and forcing customers to load these files from any 
domain, so the caching is forced. 
Analysing the JavaScript files of a web 
To prepare a targeted attack to a specific site, i.e. to ensure 
that a user who is part of the botnet is infected when he 
visits a particular site, it must be known what are the 
JavaScript files that loads that site. 
To do this, you can make use of network inspection in 
Google Chrome or Firefox Firebug, and select the one to 
infect. 
Figure 21: Loaded JavaScript files loaded in login website 
For example, in this site it can be seen that in the login page, 
JavaScript files are being loaded statically, that is, it always 
loads the same files, allowing attackers to force a pre-
caching of all of them to all the victims they want to infect.  
To do this, the control panel would have a payload in 
JavaScript to do something like: 
document.write(); 
This file will be also infected, and the attacker could run any 
payload in the future within the targeted domain, even if the 
bot is disconnected form the Rogue Proxy Server. 
Dynamic JavaScript files 
Sites like Facebook load javascript files using names that 
change dynamically, which prevents it from caching the 
JavaScript file previously, so this attack cannot be done. 
Figure 22: JavaScript files loaded in Facebook’s login 
However, the list of sites that use static JavaScript files, in 
login pages of banks, institutions, companies, etcetera, is 
huge, and it should not be a security vulnerability if users 
are not infected, but it helps Javascript botnets to perform 
targeted attacks. 
Previously cached JavaScript files and HTTPs 
One of the things that we did not implemented in this proof 
of concept was to force to cache the infected file if it was 
already in the browser cache. Assuming that a site loads a 
JavaScript file that the browser has already cached, the 
client will not request that file, so it would not become 
infected. However, playing with HTTP Etags options would 
be possible to force the browser to request the new files, but 
this wasn´t implemented in this proof of concept. 
Moreover, to avoid arousing the slightest suspicion, we 
decided not to intercept HTTPs communications, leaving 
out of reach any secure connection and any cookie marked 
with the “Secure” flag. Do not forget that this was just a 
POC. 
Final recommendations 
Both the TOR networks and Proxy systems represent “Man 
in the Middle” schemes, in which you must trust to use 
them. Put a malicious server on Internet is too easy as to 
think that there is not being made, in a massive way, by 
people with the worst of the intentions of all, so if you use 
any of these facilities, it is best to get ready to be attacked. 
No surfing with out dated systems for these networks, 
firewalls and anti-malware always in alert, and remember 
when you finish to use of them should take precautions for 
disinfection. As recommended by default, clear the cache for 
each browser session, and always use the private browsing 
mode. 
Greetings 
We would like to say thanks, to Jon, Antonio, Pedro and 
Isabel of JAPI Tracing, to people working on BeEF, 
colleagues form Informatica64 and Manu and Frank for 
helping us to improve the security of the C&C. 
References 
[1] JS / Redirector.GA 
https://www.microsoft.com/security/portal/Threat/Encyclop
edia/Entry.aspx?Name=Trojan%3AJS%2FRedirector.GA&
ThreatID=-2147328473 
[2] XST Attack 
http://jeremiahgrossman.blogspot.com.es/2007/04/xst-lives-
bypassing-httponly.html 
[3] Apache HTTP Only Cookie Disclosure 
http://fd.the-wildcat.de/apache_e36a9cf46c.php 
[4] Gaining Access to HTTP Only Cookies in 2012 
http://seckb.yehg.net/2012/06/xss-gaining-access-to-
httponly-cookie.html 
[5] BeEF Project 
http://beefproject.com/ 
[6] RootedCON 
http://www.rootedcon.es