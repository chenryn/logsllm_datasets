• The diﬃculty di of Xi can not be lower than the hy-
pothetical diﬃculty yielded by reducing the last check-
point diﬃculty by the factor of 4 every 8 weeks, i.e. the
minimal diﬃculty that is possible if the network slows
down.
Alternative block chain.
Alternative chain is constructed as follows. First, we select
the ﬁrst block Xi after the last checkpoint such that 2016
divides i: i = 2016k, i.e.
the diﬃculty is recomputed at
this point. We create an alternative block with the same
transactions but the date changed to the current date, which
will decrease the diﬃculty of the subsequent blocks by the
factor of 4. The next 2015 blocks we create with arbitrary
times, possibly immediately one after another, with Xi+1
and later possibly close to Xi−1.
The date of block Xi+2016 we set again to the current time
so that the total diﬃculty would drop as much as possible.
10The real formula is complicated, but the total computa-
tional complexity of generating the chain is a good approx-
imation.
Figure 8: Percentage addresses forwarded by entry
node over non-attacker connections
function of pAvg
addr. Then we compute the total probability
that the adversary detects at least M = 3 nodes among
those appeared in top-10, and we get the following estima-
tion (details in Appendix A):
Psuccess(3) ≈ 0.11.
When we restrict to 2-tuples, the success rate increases to
0.35.
In the testnet we managed to achieve pAvg
addr = 0.86 and the
success rate for M = 3 being close to 60%. An attacker may
achieve such high rates if he ﬁrst saturates servers’ connec-
tions and then gradually replaces the expired connections
from other nodes with his own ones. However, this may
cause degradation of QoS as some clients will be unable to
connect to all their entry nodes.
Thus a careful attacker that follows the 3-tuple rule only
and establishes 50 connections at maximum to each server
can catch about 11% of transactions generated by clients.
Given 70,000 transactions per day, this results in 7,700 trans-
actions per day. This also means that a user needs to send
9 transactions in average in order to reveal his public IP
address.
9. ALTERNATIVE REALITY
In this section we show how to create and maintain an
alternative block chain while keeping the Bitcoin protocol,
existing wallets and transactions untouched. This procedure
can be used by the Bitcoin community if the current diﬃ-
culty becomes too high and impossible to sustain.
It can
also be an attack vector for a malicious admininstrator of
the Bitcoin code project.
For motivation, suppose that the mining stops being prof-
itable so that the most powerful miners quit the network in
order to stop paying large electricity costs. As a result, the
total computational power drops and the network outputs
blocks at a slower rate.
The Bitcoin protocol is quite reactive to the rise of the
hashrate, but has large latency in the opposite case. The
maximum diﬃculty drop is the factor of 4 and requires the
2016 blocks to be produced within at least 8 weeks. Not
only it is a long recovery period, but also the network might
be so slow that the necessary number of blocks might not be
produced at all. Our solution creates an alternative reality
 0 1 2 3 4 5 6 7 8 0 200 400 600 800 1000 1200% of wrong propagationsDelay, secondsn=50, m=20n=50, m=50n=60, m=20n=90, m=3510. FURTHER LEARNING THE TOPOLOGY
In this section we continue learning the topology of the
Bitcoin network and show how to learn server-to-server con-
nections. Bitcoin peers share information only about other
peers they know, but not about their direct connections. In
this section we ﬁrst provide a method to estimate a node’s
degree (the number of connections) and then show how to
determine to which servers it is connected to.
Some of the attacks exploit the following feature of ad-
dress propagation mechanism. Each forwarded address is
accompanied with a timestamp. If this timestamp is older
than 10 minutes, the address is not retransmitted anymore.
Thus in order to avoid false positives in some attacks de-
scribed below an attacker should set the timestamps of the
marker addresses to values close to 10 minutes to the past.
10.1 Estimating number of connections
Our ﬁrst method is based on the way a Bitcoin peer for-
wards addresses received in ADDR messages (see section 2 for
more details). Suppose that a Bitcoin node A is connected
to k nodes P1, P2, . . . , Pk. We show now how to estimate k.
First, we connect our node X to peer A and send it a set
of fake11 marker addresses S = {ip1, ip2, . . . , ipn} in por-
tions of 10 addresses per ADDR message. At the same time
we listen (either on the same connection or on a separate
connection) for received marker addresses. As instructed by
the Bitcoin protocol, node A forwards marker addresses to
its peers including X. As the number of marker addresses
increases the number of addresses received by X converges
2
1+k if marker addresses are considred reachable by A or
to
1
1+k otherwise, from which we estimate k. We increase the
accuracy by 1) running several listening nodes, 2) repeating
the same experiment several times. We can reuse the same
marker addresses: when we reconnect our listening nodes,
peer A revokes their histories and allocates new data struc-
tures for this nodes. We note that all connections can be
established from the same IP address.
We implemented this method and carried out several ex-
periments. Our target nodes have 10, 30, 70, or 100 connec-
tions. For diﬀerent number of connections we used diﬀerent
number of marker addresses and diﬀerent number of listen-
ing connections (2, 3, 7, and 10 correspondingly). For each
number of connections we conducted a series of experiments;
Table 1 shows ﬁve random runs for each series.
10.2 Determining connections between servers
The method to determine connections of a Bitcoin servers
is similar to the method of estimating the node’s degree. It
is based on sending marker addresses to a peer which should
then forward them to its neighbours. The number of Bitcoin
servers is estimated to be about 10% of the total number of
Bitcoin peers. Note however that clients can connect to the
Bitcoin network only through connecting to servers which
means that all Bitcoin messages even those generated by
clients should travel along at least one link between two
Bitcoin servers. We ﬁrst describe a probabilistic method to
determine if two given peers A and B are connected which
consists of two phases.
11By fake me mean that no Bitcoin nodes are running at
these addresses.
Figure 9: Schematic view of the alternate reality
creation over 8064 blocks. Vertical axis denotes the
block index, horizontal axis denotes the timestamp
(in days) and the diﬃculty.
The next blocks will be again older than Xi+2016. We re-
peat this procedure further and further until the resulting
diﬃculty contradicts the diﬃculty of the checkpoint. If Tc is
the date (in days) and Qc is the diﬃculty of the last check-
point the client has in memory, T is the date and Q is the
diﬃculty of the processed block, than the lower bound is
Q ≥ Qc
T −Tc
.
2
28
Currently, a new checkpoint is added every 25000 blocks,
which amounts to the period of about 140 days with the
current diﬃculty increase rate. Therefore, the diﬃculty may
drop by the factor of 210 compared to the previous check-
point.
As a result, we create an alternative reality where all the
participants have the same balance. However, the new chain
is not accepted by clients since it would have the smaller to-
tal diﬃculty compared to the original chain. To ﬁnish the
switch to the new reality, a new checkpoint must be chosen
on the new chain and distributed among the clients. Alter-
natively, high-diﬃculty blocks can be added to the beginning
of the alternate chain to make it more diﬃcult than the orig-
inal one. Higher granularity achieved by lower diﬃculty at
the end of the alternative chain would allow to surpass the
original chain even if the last checkpoint is not set.
Let us estimate the amount of computational power needed
for this operation. Suppose that we have waited for 25000
blocks after the last checkpoint. This occurred in Dec 15th,
2013 with the block 275000, with the checkpoint block 250000
generated on August 3d, i.e., 134 days before. It has diﬃ-
culty smaller by the factor of 30, let us denote it by D. In
turn, the diﬃculty in our new history can be even lower by
28 ≈ 30. To obtain that, we would have to
approximately 2
create 2016 blocks with diﬃculty D/4 and 2016 blocks with
diﬃculty D/16. The other 23000 blocks must be created
with diﬃculty D/30. This amounts to about 1400 blocks
with diﬃculty D, or less than 50 blocks with current dif-
ﬁculty. This means that a mining pool with only 10% of
the network computational power would need only 3 days
to make this happen.
134
Real connections (k) Markers sent
10
30
70
100
500
1000
1000
2000
Estimates using our formula
Try #1 Try #2 Try #3 Try #4 Try #5 Average
10.69
31.92
72.92
102.63
9.57
30.88
76.84
109.12
9.34
35.47
70.65
104.27
10.6
36.26
64.16
103.28
11.38
30.48
77.36
95.66
10.32
33
72.39
103
Table 1: Estimation of number of connections
During the ﬁrst phase the attacker estimates the number
of connections of peer A. This number is used to compute the
number of marker addresses that will be forwarded to the
peer’s neighbours. In the second phase the attacker chooses
a set of fake marker addresses S = {ip1, ip2, . . . , ipn} and
sends them in ADDR messages to peer A (10 addresses per
message). She then sends GETADDR messages to peer B. If the
number of marker addresses known to B corresponds to the
number estimated in the ﬁrst phase, node B is marked as a
neighbour.
An attacker can enhance this method to reveal a peer’s
connections by applying it to each node in the list of run-
ning Bitcoin nodes (this information is available to the at-
tacker since running nodes advertise their addresses). This
is easily parallelized since the attacker needs to send marker
addresses just once. The drawbacks of the method is that it
does not allow to reveal connections to nodes which don’t ac-
cept incoming connection (e.g. located behind a NAT) since
an attacker cannot send GETADDR messages to such nodes.
Bitcoin network discovery protocol is designed in such a
way so that newly advertised addresses should be delivered
to the majority of the nodes. Thus one of the key ingredients
of the method proposed in this section is how to reduce the
propagation radius. This is achieved by that each forwarded
address is accompanied with a timestamp. If this timestamp
is older than 10 minutes, the address is not retransmitted
anymore. Thus in order to avoid false positives an attacker
should set the timestamps of the marker addresses to values
close to 10 minutes to the past.
We implemented the method and carried out several ex-
periments with our own Bitcoin nodes which had 59, 53, 73,
and 81 connections. As a list of candidates we used 400 ran-
domly chosen running Bitcoin nodes plus the nodes’ current
connections. The results of the experiments are summarized
in Table 10.2. In all our experiments we had zero false pos-
itives.
In order to estimate how probable false positives are we
chose 30 random Bitcoin nodes and sent them marker ad-
dresses with timestamps set to 9 minutes 58 seconds in the
past relative the nodes’ adjusted time. For each node we
generated a unique set of 1000 marker addresses. At the
same time we were monitoring for received addresses at two
of our nodes which had 83 and 85 connections. At the end
of the experiment no marker addresses arrived at our nodes
which indicated that false positives are quite unlikely.
Finally in order to estimate the number of GETADDR mes-
sages suﬃcient to learn addresses known to a peer we adopt
a ﬁnite state discrete time Markov Chain model [8]. Each
state in the model represents number of addresses learned
by the attacker. At each step the attacker sends a GETADDR
message and gets back 2500 random addresses from the to-
tal of maximum 20480 (note that some of those addresses
Connections Not behind
Candidates Discovered
59
53
73
81
NAT
25
22
8
17
459
453
473
481
25
22
8
17
Table 2: Discovering Bitcoin node connections
may already be known to the attacker from the previous
requests). The chain has one absorbing state which is ”all
addresses are known to the attacker”. By computing funda-
mental matrix we get the average number of transitions be-
fore the absorbing state is reached which corresponds to the
number of messages the attacker needs to send. If the max-
imum number of addresses stored at node is 20480, it takes
in average approximately 80 GETADDR messages to learn all
those addresses. Indeed, the probability for a single address
30000 .
This estimation shows however an upper bound of the num-
ber of GETADDR messages. Our experiments showed that it
is suﬃcient to retrieve 5 ADDR message from a peer in or-
der to conﬁrm that a connections exists, which signiﬁcantly
reduces the number of GETADDR messages.
to not be discovered is upper bounded by(cid:0) 2500
(cid:1)80 ≈ 1
20480
11. CONCLUSION
We have presented the ﬁrst method that correlates pseudonyms
of Bitcoin users behind NAT with the public IP address of
the host where the transaction is generated. The crucial
idea of our attack is to identify each client by an octet of
outgoing connections it establishes. This octet of Bitcoin
peers (entry nodes) serves as a unique identiﬁer of a client
for the whole duration of a user session and will diﬀerenti-
ate even those users who share the same NAT IP address.
We showed that most of these connections can be learned if
the attacker maintains connections to a majority of Bitcoin
servers. Then we show that the transaction propagation
rules imply that the entry nodes will be among the ﬁrst
that report the transaction to the attacker. As soon as the
attacker receives the transaction from just 2-3 entry nodes
he can with very high probability link the transaction to a
speciﬁc client. Moreover a sequence of successfully mapped
transactions can help the attacker to track dynamic changes
in the entry node set, to keep the client identiﬁer fresh. The
cost of the deanonymisation attack on the full Bitcoin net-
work is under 1500 EUR.
We demonstrate that the use of Tor does not rule out
the attack as Tor connections can be prohibited for the en-
tire network. Our technique is orthogonal to the transac-
tion graph de-anonymisation techniques and can be used in
combination with them. It shows that the level of network
anonymity provided by Bitcoin is quite low. Several features
of the Bitcoin protocol makes the attack possible. In partic-
ular, we emphasize that the stable set of only 8 entry nodes
is too small, as the majority of these nodes’ connections can
be captured by an attacker. A countermeasure could be to
randomize and regularly rotate these nodes, and to submit
transactions via another set of nodes. We suggested several
other countermeasures to mitigate this problem.