We employ two strategies to detect AT functions:
1) Function pointers in disassembled code. When a program
assigns a function pointer to a variable, instructions are gener-
ated to obtain its address and store it in memory or a register. The
address of the function is either directly used as an immediate
(mostly on 32-bit systems) or expressed using PC-relative address-
ing (x86-64). Nibbler scans the disassembled code for move (MOV)
and load-effective address (LEA) instructions, looking for operands
that match function addresses. Since the set of function addresses is
known, this heuristic works very well, especially on x86-64 where
PC-relative addressing is used extensively. However, an optimizing
compiler could perform arithmetic to compute target addresses,
and detecting such cases would require data-flow (e.g. value set)
analysis. We do look at operands for ADD/SUB arithmetic instruc-
tions, because they may occasionally contain function references.
But in our experiments we never saw an address computation split
between multiple instructions (and hence data-flow analysis was
not required).
2) Function pointers via relocation information. Relocations
are usually created to facilitate relocating code and data at load-time
(e.g., for enabling ASLR). Each entry corresponds to a particular
offset in the binary, typically a pointer to a function or global data
object. Relocation entries describe how that address should be ad-
justed when the target entity is relocated. Modern systems support
multiple relocation types [30, Chapter 4.4], which define different
ways of calculating the “fix” to the targeted offset. Nibbler parses
them to identify any function pointers that were not discovered
in the previous step, mainly, in data sections. Relocations of type
R_X86_64_IRELATIVE require more complex handling, as they spec-
ify that the targeted address should be patched based on the return
value of a resolver function. Nibbler handles them by scanning the
body of resolver functions, adding any code pointers referenced
there in the list of targets that could be potentially returned at run
time. Essentially, it connects all of the implementations to the FCG
to retain support for indirectly-invoked functions.
Figure 2: call to function in shared library in crypt_r(),
libcrypt-2.19.so.
3.3 Library FCG Reconstruction
We use the disassembly and symbol information to statically recon-
struct the FCG of each library. The goal is to resolve the targets of
function calls. On x86, compilers use two classes of instructions to
perform this task, specifically CALL and JMP instructions; we handle
both the same way. Function calls are further classified into three
categories: (i) calls targeting library-local functions, (ii) calls target-
ing functions in other shared libraries, and (iii) indirect calls that
use pointers. We ignore cases where the targeted function is the
same function (recursion)—i.e., multiple edges between functions
are collapsed to a single one.
3.3.1 Calls to Local Functions. To resolve these calls, we go over the
disassembled code and search for CALL and JMP instructions with
an immediate value (i.e., a constant) as operand/argument. During
execution, the CPU adds the value of the immediate to the address
of the next instruction to calculate the address to transfer control
to (PC-relative addressing). When the target address matches the
starting address of a function, we add an edge between these two
functions (caller-callee) in the FCG.
3.3.2 Calls to Functions in Shared Libraries. These calls are (usu-
ally) resolved lazily at run time, when a function is first invoked. The
mechanism employed on Linux and other Unix-like systems uses
two specially crafted sections called the Procedure Linkage Table
(PLT) and the Global Offset Table (GOT) [38]. Without going into
too many details, calls to external functions are performed through
the PLT. For example, in Figure 2, the call at address 0x0f35 targets
an entry in the PLT that corresponds to the strnpy() function.
PLT entries are also code, which on the first invocation call the
dynamic linker/loader to resolve the desired symbol. Subsequent
calls direct control into the resolved function.
The dynamic linker/loader (ld.so(8)) resolves external func-
tions by name (e.g., strnpy in the example above). The name of
the targeted function is indicated by the second instruction of a
PLT entry, the one at address 0x0ba6 in Figure 2. This instruction
pushes an offset in another table onto the stack, 0x02 in our exam-
ple. That table essentially contains a list of references to symbol
names (i.e., the string “strncpy” in our example). We have analyzed
the steps taken by the loader and mirrored the steps in Nibbler to
link such functions calls with symbol names. Resolution of these
symbols occurs during the FCG composition step.
Relocation section '.rela.plt'   Offset          Info           Type           Sym. Value   Sym.Name+Addend000000208018  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __open + 0000000208020  000300000007 R_X86_64_JUMP_SLO 0000000000000000 free + 0000000208028  000400000007 R_X86_64_JUMP_SLO 0000000000000000 strncpy + 0:ba0:   ff 25 82 74 20 00       jmpq   *0x207482(%rip)  # strncpy@GOTba6:   68 02 00 00 00          pushq  $0x2bab:   e9 c0 ff ff ff          jmpq   b70              # PLT0:ea0:   41 55                   push   %r13...f35:   e8 66 fc ff ff          callq  ba0 Nibbler: Debloating Binary Shared Libraries
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
3.4 Unreachable Code Detection
We analyze the application binaries and compose the FCGs of used
libraries to conservatively estimate the library functions that are
needed by the applications. Assuming the set of used libraries
is known, our algorithm is complete by design and ensures that
unused functions can be safely removed. Applications that manually
load additional libraries at runtime are discussed in Sec. 3.7.
Identification of Required Symbols. At this stage, Nibbler cal-
3.4.1
culates which library symbols are required by the input applications.
It does so by processing them to determine the library symbols they
refer to. These are obtained by scanning the PLT sections of the bi-
naries to obtain the required symbol names, similarly to the process
described in Sec. 3.3.2. Initialization and cleanup routines defined in
libraries are also added in the set of required symbols, since they are
called by the dynamic linker/loader during library loading or un-
loading. Such functions are defined (as arrays of function pointers)
in special sections in binaries. Some of these are: .preinit_array,
.init, .init_array, .ctors, .fini, .fini_array, and .dtors.
Nibbler essentially manages to capture the non-trivial startup pro-
cedure of x86 ELF-compliant systems [29]. At this stage, we still
consider that all AT functions are required.
3.4.2 Composition of Function-Call Graphs. We compose the FCGs
of libraries, adding edges between callers and callees, the same
way the dynamic linker/loader does when a program executes. To
connect the various graphs, we start by resolving each graph’s calls
to external functions. In the simplest case, this requires looking for
a function symbol with the same name as the one referenced by a
call site. At load-time this process is performed by ld.so, which
enforces various rules that Nibbler replicates faithfully.
In particular, we enforce the following: (a) LOCAL symbols are
ignored; (b) GLOBAL symbols have precedence over WEAK ones; and
(c) when the particular version of a symbol requested is not found,
we use the one defined as default. Default symbols are denoted by
the two ’@@’ characters (e.g., putwchar@@GLIBC_2.2.5). Note that
there can only be one default version [21]. When resolving symbols,
it is possible that multiple symbols with the same name exist. There
may be multiple local symbols with the same name, or a local
symbol with the same name as a global one. For inter-library symbol
resolution, all symbols except weak or global ones are ignored. The
dynamic linker/loader resolves WEAK and GLOBAL symbol references
according to library load order. We did not implement all intricacies
of library load order—a complex process, e.g., dependencies can be
recursive—but rather create links to all weak/global functions of
the same name in our graph. This approach produces a super-graph
that may include more code than necessary, but it is guaranteed to
include all functions that could be possibly used.
3.4.3 Collection of Unused Functions. At this point, we can use the
composed FCG and the required symbols extracted in the previous
steps to create an over-approximated set of used functions. The
graph actually consists of multiple, potentially disconnected, sub-
graphs; we focus on the ones that include required symbols, such as
library functions invoked by one of the applications or AT functions.
These nodes act as starting points that allow us to designate their
whole sub-graph as used. All other functions are unreachable code
that we can remove from libraries.
Listing 1: AT functions within function defined in
crypto/bn/bn_exp.c:of openssl-1.1.0j.
int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, ...)
{
...
static const bn_mul_mont_f mul_funcs[4] = {
bn_mul_mont_t4_8, bn_mul_mont_t4_16,
bn_mul_mont_t4_24, bn_mul_mont_t4_32
};
...
}
3.5 AT Function Pruning
To reduce the number of AT functions included in the FCG, we
introduce an analysis that takes into account the location a code
pointer was found. Initially, we separate pointers found in data
(e.g., .rodata) and code (e.g., .text) segments. For the latter, we
iterate every function that has been classified as unused by our
algorithm, and check if an AT function’s address is only taken
within unused functions. If this condition is true, we mark the
respective AT function as unused. Note that this may result in
additional (function) sub-graphs to be deemed unused, and so we
iteratively perform this process until no additional functions can
be classified as unused. For example, consider the function shown
in Listing 1, which defines and uses the static array of function
pointers bn_mul_mont_f[]. If Nibbler detects that the function is
unused, the pointers contained in the array, which will actually be
stored in the data segment, can also be ignored.
To eliminate AT functions in data segments (e.g., in .(ro)data),
we proceed as follows. First, we leverage symbol information to
identify the bounds ([OBJ_BEGIN – OBJ_END]) of global data objects
(i.e., symbols of type OBJECT/GLOBAL). Next, we check for relocation
entries that: (a) correspond to AT functions; and (b) fall within
the bounds of any global object. Our approach basically identifies
statically-initialized arrays of function pointers or data structures
that contain function pointers. Lastly, like before, we iterate every
function that has been classified as unused by our algorithm, and
check if OBJ_BEGIN is taken only within unused functions. Again,
if this condition is true, we mark the AT functions that correspond
to the object beginning at OBJ_BEGIN as unused, and we iteratively
perform this process until no additional function sub-graphs can
be classified as unused. Note that the above process is complete; it
only excludes AT functions that are used by unreachable code.
3.6 Function Erasure
Nibbler erases functions that are not part of the application FCG
by overwriting them with a single byte instruction, namely int3,
which causes a trap and interrupts execution.1 Attempts to use the
removed code will lead to termination of the running process [17].
3.7 Application-loaded Libraries
Application-loaded libraries are libraries which are explicitly loaded
through calls to dlopen(). Pointers to functions in such a library
1Both int3 and hlt [76] are used in related work for “erasing” code. We chose int3 as
it raises a SIGTRAP, rather than a SIGSEGV, signal; SIGSEGV has many potential causes.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
I. Agadakos, D. Jin, D. Williams-King, V. P. Kemerlis, and G. Portokalidis
Figure 3: A fall-through function reuses another’s code.
can be dynamically retrieved using dlsym(). It is very hard to stati-
cally determine the set of libraries and functions that are invoked in
this way, and, as such, all the libraries and symbols that are required
by the program. Nibbler cannot guarantee the safety of debloating
an application which calls dlopen. However, in our experience,
profiling the application with common workloads reveals the addi-
tional dependencies. Previous approaches concur with this [53].
As an alternative, we can be conservative and avoid debloating
any applications that manually load libraries, or leverage software
packaging semantics to include additional code in scope (e.g., all
the .so files included in a particular package). To determine how
frequently application-loaded libraries are used, we examined the
source code of 25,526 Debian (v9) packages, using apt-src. After
processing, we determined that 9,792 contain at least one file of C
or C++ code, and 1,351 of them (13.8% of the C/C++ packages) call
dlopen()/dlsym() and hence may perform manual library loading.
3.8 Challenges
Function Aliases. One function may be encompassed by many
symbols of the same size (but often different type or scope), in
effect creating aliases for the same function. We treat all aliases as
a single entity and a reference to any name is sufficient to prevent
the function from being removed.
Fall-through Functions. Some symbols share code (or overlap)
with other symbols. This requires that we employ caution when
erasing an unused function, as its bytes may be shared by another
symbol. A frequent case in GNU libc is fall-through functions,
shown in Figure 3, where one function performs a few checks and
then drops into the beginning of another function. We carefully
identify each function which does not terminate in a control-flow
transfer, forming a reference to the following function and prevent-
ing its removal if the previous function is used.
Noreturn Functions. Functions that the compiler knows will
terminate can be marked with the __noreturn__ GCC attribute,
which will be recursively propagated if possible. When generat-
ing a call to such a function, like __fortify_fail, the compiler
may simply stop generating code afterwards (which would be un-
reachable). Luckily, we always observed the compiler generating
a nop following the CALL in this case, which allows us to avoid
(incorrectly) classifying this case as a fall-through function.
GNU libc Sub-libraries. While we view libc as a single library
that is used by C/C++ programs, its most popular version, GNU
libc (glibc), actually consists of sub-libraries that implement
back-ends to common interfaces. For example, different name ser-
vices, like the Network Information Service (NIS) and the Domain
Name Service (DNS), are implemented in shared libraries (libnss_-
dns.so and libnss_nis.so in this case). These are loaded by libc
at run time, when a particular API is accessed. To avoid erasing any
libc functions that may be used by functions in those libraries, we
include all their symbol requirements in our analysis.
Zero-sized Symbols. Certain internal functions, like _start (GCC-
inserted), have a symbol of size zero. These functions have known
semantics (e.g., _start calls __libc_start_main), and so we add
them to the FCG for completeness, marking them as non-removable.
4 NIBBLER IMPLEMENTATION
We developed a prototype of Nibbler using Python on Linux. In this
section, we provide some information on the implementation of Nib-
bler’s core components, and discuss certain noteworthy challenges
that we had to overcome.
4.1 Components
The disassembly and static analysis components of Nibbler were
written in Python (≈7 KLOC). We used the objdump Linux utility for
linear disassembly and symbol information, and the pyelftools
Python package to access ELF files. The algorithms described in
Sec. 3, regarding FCG reconstruction and AT function elimination,
were developed from scratch.
Obtaining Symbols. Since by default all binaries installed on
Linux are stripped of symbols, we developed a tool for fetching
the debug packages corresponding to the binaries and libraries
we want to process. It uses the build-id of an installed library to
find a corresponding match in the debug repositories, and auto-
matically download it using Debian’s package management tools
(i.e., apt(8)).
4.2 Application-loaded Libraries
We implemented a tool to collect the libraries and symbols which
are manually loaded by programs with dlopen(). We exploited the
linker’s auditing interface in Linux [39] to introduce “hooks” that
are called before any operation is performed, such as searching
and opening a library, resolving a symbol, etc. Specifically, we
developed a shared library that sets up hooks to receive all pertinent
information from the loader, filters events unrelated to dynamic
loading, and logs the rest. The tool can be easily activated by setting
the LD_AUDIT environment variable before running an application.
5 EVALUATION
We evaluate Nibbler, using the following application suites on
Debian GNU/Linux x86-64 (v9, Stretch): Coreutils (v8.26), Nginx
(v1.10.3), MySQL (v5.5.8), and SPEC CINT2006; we also used the
stock GNU libc (v2.24). We applied Nibbler on Nginx and MySQL
individually, as well as on all the binaries in Coreutils and SPEC
CINT20062, treating them as sets of applications. In addition, we
applied Nibbler on all the above applications, considering them as a
single set totaling 117 binaries. The end result is five sets of thinned
libraries. Note that for every application set, we generate one set of
libraries to satisfy the requirements of all the included binaries.
We verified if Nibbler correctly removes only unused code by
running the following tests; they all completed successfully.
2Excluding perlbench that did not compile successfully.
:dbbf0:       83 3d dd eb 2c 00 00    cmpl   $0x0,0x2cebdd(%rip)  dbbf7:       75 10                   jne    dbc09 Nibbler: Debloating Binary Shared Libraries
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
• Coreutils: We run the built-in high-coverage test suite, in-
voked through ‘make check’.
• Nginx: We used Siege [33] to perform requests on a running
• MySQL: We used the officially-provided test suite, invoked
• SPEC: We used the ‘ref’ workload.
server, as well as Nginx’s official test suite.
through ‘mysql-test-run.pl’.
5.1 Debloating
Library-code Reduction with Nibbler. Table 1 summarizes the
5.1.1
code reduction achieved by Nibbler on the application sets that
do not manually load libraries. It performs the best with Nginx,
where 55.95% of library code, in terms of bytes, is removed. On
the other hand, for Coreutils, which include a large number of
diverse utilities, we are able to eliminate 32.85% of library code. If
we combine all 117 applications (last row), we achieve a reduction
of 47.80%. If we instead focus on removed functions, reduction is
between 58.81% – 81.57%, as many smaller functions are removed.
Bloat is not equally distributed in libraries. In the worst case
(libcrypto), we found that 93.82% of its functions are not used
by any of the four application sets. In the best case (libpcre), we
removed 13.29% of its functions, however, this was also one of the
smallest libraries in our set. Table 2 highlights the per-library code
reduction achieved by Nibbler in libraries used by all four applica-
tion sets. We think that these results demonstrate the heavy bloat
in certain libraries, making their thinned versions great candidates
even for system-wide replacement.
Comparison with Piece-wise [53]. While direct comparison is
not possible, because Quach et al. focus on debloating individual
programs, we highlight our differences using Coreutils and SPEC
to provide some perspective to the reader. The mean reduction, in
the number of functions, Piece-wise achieves, with respect to these
two program sets, is 79% and 85%, respectively; Nibbler achieves
58.81% and 73.37%. This difference is primarily due to the fact that
we debloat libraries for sets of applications, instead of individual
binaries. In addition, the lack of semantics in binary code prevents
us from effectively using analyses to eliminate more AT functions,
while we preserve multiple versions of a used symbol in thinned
libraries (Piece-wise keeps only one).
5.1.2 Reduction with Application-loaded Libraries. Chromium (web
browser; v57) is a large, complex application that performs manual
library loading. To debloat it, we profile it by: i) visiting the top
sites in Alexa’s “Top 500 Global Sites” list [2], exercising a broad
range of functionality, such as video playback, animations, etc., and
ii) using Chromium’s comprehensive test suite [67], which includes