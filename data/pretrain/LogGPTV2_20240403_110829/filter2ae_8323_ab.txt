有回显的情况可以直接在页面中看到`payload`的执行结果或现象，无回显的情况又称为`blind
xxe`（类似于布尔盲注、时间盲注），可以使用外带数据(OOB)通道提取数据
下面就通过构造一些简单的环境来了解一下各个攻击方法究竟是如何利用的
### **一、读取任意文件（有回显与无回显）**
**测试源码：**
**构造payload：**
    ]>
    &file;
将payload进行 **url编码** ，传入即可读取任意文件  
根据结果我们可以看到通过构造 **内部实体的payload** ,在 `xml` 中 `&file ;`
已经变成了外部文件`1.txt`中内容，导致敏感信息泄露。
下面通过靶场来进行练习 **有回显读取文件和无回显读取文件** ，抓包发现通过XML进行传输数据  
发现响应包的内容为`usrename`  
构造payload
    ]>
      &test;
      hack
将`file:///d:/1.txt`改为`file:///c:/windows/win.ini`等其他重要文件都是可以读取的，也可以读取`PHP`文件等。  
解码后即是PHP代码的内容  
上面利用 **内部实体** 和 **外部实体** 分别构造了不同的payload，而且我们发现这个靶场是有回显的，通过 **回显的位置**
我们观察到了响应包的内容，以此为依据进行构造`payload`，从而达到任意读取文件的目的。
但这种攻击方式属于传统的XXE，攻击者只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，那如果对方服务器没有回显应该如何进行注入
下面就将源码修改下，将输出代码和报错信息禁掉，改成 **无回显**  
再次进行注入，发现已经没有回显内容  
下面就利用这个靶场来练习 **无回显的文件读取** ,遇到无回显这种情况，可以通过`Blind
XXE`方法加上外带数据通道来提取数据，先使用`php://filter`获取目标文件的内容，然后将内容以`http`请求发送到接受数据的服务器来读取数据。虽然无法直接查看文件内容，但我们仍然可以使用易受攻击的服务器作为代理，在外部网络上执行扫描以及代码。
这里我使用的攻击服务器地址为`192.168.59.132`,构造出如下payload：
    %dtd;
    %send;
    ]>
**evil.xml**
    "> %payload;
    //%号要进行实体编码成&#x25
**evil.xml** 放在攻击服务器的web目录下进行访问  
这里如果不是管理员，需要更改一下对目录的管理权限等，这里偷个懒权限全调至最高  
至此准备工作完毕，下面就监控下`apache`的访问日志  
请求几次，发现  
接下来就`base64`解码即可
实验完成，但为什么那，简单的解释下:
从 `payload` 中能看到 连续调用了三个参数实体 `%dtd;%file;%send;`，这就是利用先后顺序，`%dtd` 先调用，调用后请求
**远程服务器(攻击服务器)** 上的`evil.xml`，类似于将`evil.xml`包含进来，然后再调用 `evil.xml`中的 `%file`,
`%file` 就会去获取 **对方服务器** 上面的敏感文件，然后将 `%file` 的结果填入到 `%send` ，再调用 `%send;`
把我们的读取到的数据发送到我们的远程主机上，这样就实现了外带数据的效果，完美的解决了 `XXE` 无回显的问题。
无回显的构造方法也有几种固定的模板，如：  
**一、第一种命名实体+外部实体+参数实体写法**
    %dtd; %all; 
    ]> 
    &send;
`evil.xml`文件内容为
    ">
**二、第二种命名实体+外部实体+参数实体写法**
    %dtd;
    %send;
    ]>
`evil.xml`文件内容为：
    "> %payload;
### **二、DOS攻击（Denial of service：拒绝服务）**
几乎所有可以控制服务器资源利用的东西，都可用于制造DOS攻击。通过XML外部实体注入，攻击者可以发送任意的`HTTP`请求，因为解析器会解析文档中的所有实体，所以如果实体声明层层嵌套的话，在一定数量上可以对服务器器造成`DoS`。
例如常见的XML炸弹
    ]>
    &lol9;
XML解析器尝试解析该文件时，由于DTD的定义指数级展开（即递归引用），`lol` 实体具体还有 `“lol”` 字符串，然后一个 `lol2` 实体引用了
10 次 `lol` 实体，一个 `lol3` 实体引用了 10 次 `lol2` 实体，此时一个 `lol3` 实体就含有 `10^2 个 “lol”`
了，以此类推，lol9 实体含有 `10^8 个 “lol”` 字符串,最后再引用`lol9`。
所以这个1K不到的文件经过解析后会占用到`3G`的内存,可见有多恐怖，不过现代的服务器软硬件大多已经抵御了此类攻击。
防御`XML`炸弹的方法也很简单 **禁止DTD** 或者是 **限制每个实体的最大长度** 。
### **三、命令执行**
在php环境下，xml命令执行需要php装有`expect`扩展，但该扩展默认没有安装，所以一般来说命令执行是比较难利用，但不排除有幸运的情况咯，这里就搬一下大师傅的代码以供参考：
    ]>
    &f;
    EOF;
    $data = simplexml_load_string($xml);
    print_r($data);
    ?>
### **四、内网探测**
    ]>
后面的403禁止就很明显的说明了该端口是开放状态的
如果这里再尝试一下没有开放的端口，发现  
因此也可以利用这种方法来探测内网端口以及对内网进行攻击等
## 总结：
通过这次学习，有get的新的知识，继续努力学习吧！
**参考博客：**  
[XXE漏洞攻防原理](http://www.mchz.com.cn/cn/service/safety-lab/info_26_itemid_2772.html)  
[XXE漏洞](http://note.youdao.com/ynoteshare1/index.html?id=b41700dbd75216812521ad5179e7291b&type=note)  
**推荐靶场：**  
[phpaudit-XXE](http://github.com/vulnspy/phpaudit-XXE)  
[xxe-lab](http://github.com/c0ny1/xxe-lab)