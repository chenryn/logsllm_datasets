### Preventing Bitcoin Clients from Using Non-Attacker’s Servers

There are several methods an attacker can use to prevent Bitcoin clients from connecting to non-malicious Bitcoin servers, instead forcing them to connect to the attacker's servers. This document discusses two primary techniques: exhausting connection limits and port poisoning.

#### A. Exhausting Connection Limits

As outlined in Section II, a Bitcoin server typically accepts up to 117 incoming connections by default. When this limit is reached, all new incoming connections are dropped. Importantly, a Bitcoin server does not verify if multiple connections originate from the same IP address, nor does it require proof-of-work from clients. Consequently, a low-resource attacker can establish numerous connections to all Bitcoin servers except their own, thereby occupying all available connection slots. If a client attempts to connect directly to a Bitcoin server with all slots occupied, the connection will be immediately dropped, leading the client to eventually connect to a malicious peer. This straightforward attack has been known within the Bitcoin community.

#### B. Port Poisoning Attack

A more subtle but less effective attack exploits the fact that Bitcoin clients do not consider the port number when adding a peer address to their database. For example, if a client receives an address (IP0, PORT1) and already has an entry (IP0, PORT0), the client will retain (IP0, PORT0) and discard (IP0, PORT1). An attacker can leverage this by flooding clients with addresses of legitimate Bitcoin servers but with incorrect port numbers. If the attacker is the first to send such addresses, the client will be unable to connect to legitimate nodes.

### Estimating Client Delays

The steps described in Section III imply that once a client decides to use the Bitcoin network over Tor, they will only be able to connect through either one of the attacker’s Exit nodes or one of the attacker’s Bitcoin peers. For the attack to be practical, the user should not experience significant increases in connection delays. Otherwise, the user may abandon the connection, assuming the Tor-Bitcoin bundle is malfunctioning. This section estimates the number of Bitcoin peers and the amount of bandwidth of Tor Exit relays required to ensure the attack does not degrade the user's experience.

#### 1. Handling Unreachable Bitcoin Peers

When a client connects to an unreachable Bitcoin server and a non-attacker’s Exit node, the Exit relay can respond in three ways:
1. **END cell with "timeout" error code**: The client receives a "TTL expired" SOCKS error message and tries another Bitcoin peer.
2. **END cell with "resolve failed" error code**: The current circuit is dropped, and the client attempts to connect through a different Exit node. After three failed resolves, the client receives a "Host unreachable" SOCKS error and tries another peer.
3. **No response for 10-15 seconds**: The circuit is dropped, and the client tries a different circuit. If no connection is established within 125 seconds, the client receives a "General failure" SOCKS error and tries another peer.

#### 2. Estimating Delays

The high fraction of unreachable peers in the client’s database (approximately 2/3 to 3/4) significantly increases the likelihood of choosing a malicious Exit node. The attacker needs this to happen only once, as subsequent connections will be made through the same Tor circuit. However, unreachable nodes increase the delay before the first successful connection. This delay depends on the number of the attacker’s Bitcoin peers and the frequency of circuit changes.

To estimate this, we conducted an experiment where a Bitcoin client was run over Tor, and the duration of each attempt to connect to an unreachable node was measured. On average, a Bitcoin client spends 39.6 seconds trying to connect to an unreachable peer and attempts to establish a new circuit every 8.6 seconds, resulting in 4.6 circuits per unreachable peer.

We used a simple discrete-time absorbing Markov chain model with three states to estimate the average time to establish the first connection. The results, presented in Figure 4, show that an attacker with 100,000 units of consensus Exit bandwidth and 1000 Bitcoin peers can carry out the attack while keeping the average delay below 5 minutes. An attacker with 400,000 units of bandwidth and fewer peers can reduce the average delay to about two minutes.

#### 3. Clients with Empty Addresses Cache

If a client's address database is empty and all seed nodes are banned, the client can only connect to hidden services. This is a limitation of our approach.

### Attack Costs

#### A. Tor Exit Nodes

During July 2014, running a non-Exit Tor relay cost approximately 30 USD per month, with a bandwidth limit of 5 MB/s. The consensus bandwidth fluctuated between 5,000 and 10,000 units. Assuming a similar setup for an Exit node, the probability of being chosen for an Exit position by a user would be 0.08%-0.17%. With 10 TB of traffic included and 2 EUR per additional 1 TB, an attacker could achieve 180 TB of traffic per month for 360 USD. Running six such relays would provide 400,000 units of bandwidth weight for under 2500 USD, making it feasible for an economy-level attacker.

#### B. Bitcoin Peers

The attack requires the injection of multiple Bitcoin peers, but the Bitcoin network allows only one peer per IP address. Renting IP addresses at 1 cent per hour results in 7200 USD per 1000 IPs per month. Therefore, an attacker would likely invest more in Exit bandwidth rather than running Bitcoin peers, unless they control a small botnet. The main limitation is avoiding detection.

By carefully balancing these factors, an attacker can effectively manipulate the Bitcoin network without significantly impacting the user experience.