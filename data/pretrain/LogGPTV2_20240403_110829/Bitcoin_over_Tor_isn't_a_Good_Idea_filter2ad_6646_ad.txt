the attacker there are a couple of ways to prevent Bitcoin
clients from using non-attacker’s Bitcoin servers (and choose
an attacker’s one instead).
A. Exhausting connections limit
As described in section II, by default a Bitcoin server ac-
cepts up to 117 connections. Once this limit is reached all new
incoming connections are dropped. At the same time a Bitcoin
server neither checks if some of these connections come from
the same IP address18, nor forces clients to provide proof-of-
work. As a result a low-resource attacker can establish many
connections to all but his Bitcoin servers19 and occupy all
free connection slots. If a client connects directly to a Bitcoin
server connection slots of which are occupied, the connection
will be dropped immediately, thus the client will soon end up
connecting to a malicious peer. This straightforward attack has
been known in the Bitcoin community.
B. Port poisoning attack
A less effective but much stealthier new attack exploits
the following fact. Peer addresses are of the following form
(IP,PORT). However when a client decides if to add a received
address to the database, he does not take the port number
into account. For example assume a client receives an address
(IP0, P ORT1) and there is already an entry in the client’s
database (IP0, P ORT0). In such case the client will keep
(IP0, P ORT0) and will not store (IP0, P ORT1).
The attacker can use this fact to ﬂood with clients with ad-
dresses of legitimate Bitcoin servers but wrong port numbers.
If the attacker is the ﬁrst to send such addresses, the client
will not be able to connect to legitimate nodes.
VI. ESTIMATING CLIENT’S DELAYS
The steps described in section III imply that once a client
decides to use Bitcoin network over Tor, he will only be
able to do this by choosing either one of the attacker’s Exit
nodes or one of the attacker’s Bitcoin peers. However for the
attack to be practical a user should not experience signiﬁcant
increases in connection delays. Otherwise the user will just
give up connecting and decide that Tor-Bitcoin bundle is
malfunctioning. In this section, we estimate the number of
Bitcoin peers and the amount of bandwidth of Tor Exit relays
which the attacker needs to inject, so that the attack does not
degrade the user’s experience.
18One explanation is that if clients are behind the same NAT they will share
the same IP address.
19The list of all running Bitcoin servers can be obtained from e.g. [6].
129129
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
Once the attacker completes the steps described in sec-
tion III, for each user connecting to the Bitcoin network
through Tor there are several possibilities (see Fig. 1).
1)
2)
3)
4)
The user chooses one of the attacker’s Bitcoin peers.
The attacker does nothing in this case: the attacker
automatically gains control over the information for-
warded to the user.
The user chooses one of the attacker’s Exit nodes.
The attacker can use the fact that Bitcoin connections
are not encrypted and not authenticated and redirect
the client’s request to Bitcoin peers under her control.
The user chooses a non-attacker’s Exit relay and a
running non-attacker’s Bitcoin peer. In this case, due
to the ban the user’s connections will be rejected. And
the user will try to connect to a different Bitcoin peer.
The user chooses a non-attacker’s Exit relay and
a non-attacker’s Bitcoin peer which went ofﬂine20.
In this case the Bitcoin client will wait until the
connection times-out which can be up to two minutes
(see section II-B1). This delay on the surface looks
like taking prohibitively long time. However since
during these two minutes Tor rebuilds new circuits
every 10-15 seconds, trying new Exits at random, it
actually makes the attacker’s life easier. It increases
the chances that malicious Exit relay will be chosen.
...
3
1
...
2
Client 1
Client 2
Fig. 1. Client’s state after the main steps of the attack
A. Handling unreachable Bitcoin peers
Before estimating the delays we consider case 4 in more
detail. Our experiments show that for a Bitcoin client which
was already used several times prior to the connection over
Tor, the address database contains 10,000 – 15,000 addresses
and the fraction of unreachable Bitcoin peers among them
is between 2/3 and 3/4. Abundance of unreachable addresses
means that case 4 is the most frequent scenario for the client.
20Or never really existed: Bitcoin allows storing fake addresses in client
addresses database.
130130
Consider a client which chose an unreachable Bitcoin server
and a non-attacker’s Exit node.
The Exit relay can send either:21
1) An END cell with a “timeout” error code. In case of a
“timeout” message, Tor sends a “TTL expired” SOCKS error
message to the Bitcoin application which then tries another
Bitcoin peer.
2) An END cell with “resolve failed” error code22. In case of
“resolve failed” message, Tor drops the current circuit and tries
to connect to the unreachable Bitcoin peer through a different
Exit node. After 3 failed resolves, Tor gives up and sends a
“Host unreachable” SOCKS error code, which also results in
Bitcoin trying a different peer.
3) The third and the most common option is that the exit relay
will not send any cell at all during 10-15 seconds. As was
described in the Background section that in case the Exit node
does not send any reply within 10 or 15 seconds (depending
on the number of failed tries) along the circuit attached to the
stream, Tor drops the current circuit and attaches the stream to
another circuit (or to a newly built one if no suitable circuits
exist). In case Tor cannot establish connections during 125
seconds, it gives up and notiﬁes Bitcoin client by sending a
“General failure” SOCKS error message. Bitcoin client then
tries another peer.
B. Estimating delays
The facts that a) Tor tries several different circuits while
connecting to unreachable peers and b) the fraction of unreach-
able peers in the client’s database is very large, signiﬁcantly
increases the chances that a malicious Exit node is chosen.
The attacker only needs this to happen once, since afterwards
all connections to the other Bitcoin peers will be established
through this Tor circuit; Bitcoin client will work even with one
connection. On the other hand, unreachable nodes increase the
delay before the user establishes its ﬁrst connection. This delay
depends on the number of attacker’s Bitcoin peers and on how
often the user chooses new circuits.
In order to estimate the latter, we carried out the following
experiment. We were running a Bitcoin client over Tor and
for each connection to an unreachable Bitcoin client we were
measuring the duration of the attempt and the number of
new circuits (and hence different Exit nodes). The cumulative
distribution function of the amount of time a Bitcoin client
spends trying to connect to an unreachable node is shown in
Fig. 2. On the average a Bitcoin peer spends 39.6 seconds
trying to connect to an unreachable peer and tries to establish a
new circuit (and hence a different Exit node) every 8.6 seconds.
This results in 4.6 circuits per unreachable peer on the average.
We now estimate how long it will take a user on the
average to establish his ﬁrst connection to the Bitcoin network.
This delay obviously depends on the number of the attacker’s
Bitcoin peers and the amount of bandwidth of her Tor Exit
relays. We adopt a simple discrete time absorbing Markov
chain model with only three states (see Fig. 3):
21This is based on the Tor source code analysis and monitoring a running
22We observed this behaviour not only for hostnames but also for IP
Tor instance.
addresses.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
%
,
F
D
C
 100
 80
 60
 40
 20
 0
 0
 20
 40
 60
 80
 100
 120
Time, seconds
s
d
n
o
c
e
s
,
y
a
e
d
l
e
g
a
r
e
v
A
 1000
 800
 600
 400
 200
 0
100 peers
1000 peers
1500 peers
2000 peers
4000 peers
20K 50K
100K
200K
400K
Attacker’s aggreated consensus Exit bandwidth
Fig. 2. Time spent connecting to an unreachable node
Fig. 4. Average time before the ﬁrst connection
•
•
•
tries to connect
to an
the Bitcoin client
State 1:
unreachable peer;
State 2: the Bitcoin client tries to connect to a reach-
able Bitcoin peer banned by the attacker;
State 3: the Bitcoin client tries to connect to an at-
tacker’s Bitcoin peer or chooses an attacker’s Tor Exit
node. State 3 is absorbing state, once it is reached, the
user thinks that he connected to the Bitcoin network
(while he is now controlled by the attacker).
0.482
1
0.336
0.248
0.651
2
0.270
0.013
3
Fig. 3. Markov chain with probabilities for 400K of Exit capacity and 100
malicious Bitcoin peers. The client spends about 0.5 seconds in State 2 and
about 40 seconds in State 1
After composing the fundamental matrix for our Markov chain,
we ﬁnd the average number of steps in two non-absorbing
states. Taking into account the average amount of time spent
by the user in each of the states (we use our experimental data
here), we ﬁnd the average time before the absorbing state.
We compute this time for different number of Bitcoin peers
and Tor Exit relay bandwidth. The results are presented in
Fig 4. We have taken a conservative estimate that the fraction
of unreachable Bitcoin peers in the client’s database is 2/3 =
66%, also the client spends only about 0.5 seconds in State 2
and about 40 seconds in State 1.
Fig. 4 shows that an attacker having 100,000 of consensus
Exit bandwidth and 1000 Bitcoin peers is able to carry out
the attack while keeping the average delay below 5 minutes.
For example an attacker controlling a small botnet can afford
that many peers (she will need 1000 peers with public IPs
or supporting UPnP protocol). An attacker having consensus
weight of 400,000 and very few peers can decrease the average
delay to about two minutes. Such a bandwidth is achievable
by an economy level attacker as will be shown in section VII.
131131
The line corresponding to 4000 attacker’s Bitcoin peers
in Fig. 4 is not as unrealistic as it may seem. Recall (see
Section II-A4) that each Bitcoin peer address can go to up
to 4 “new” buckets at client’s side. This can be used by a
persistent attacker to increase the choice probability for her
peers by a factor 4 (in the best case) which means an attacker
can have signiﬁcantly less than 4000 peers.
C. Clients with empty addresses cache
As was pointed in Section II-A3, all IPv4 and IPv6 ad-
dresses received from DNS-oneshots are dropped by a Bitcoin
client if Tor is used. If the addresses database of a client is
empty and all the seed nodes are banned, the client can connect
to hidden services only. This is a limitation of our approach.
VII. ATTACK COSTS
A. Tor Exit nodes
During July 2014 we were running a non-Exit Tor relay
for 30 USD per month. We set the bandwidth limit of the
relay to 5 MB/s which resulted in trafﬁc of less than 15GB
per hour. The consensus bandwidth of this relay ﬂuctuated
between 5,000 and 10,000 units23. While the total weighted
consensus bandwidth of all exit nodes was about 7 million
units, the weighted consensus bandwidth of relays allowing
exiting at port 8333 was about 5.7 million units. Assuming
that we could achieve 5,000 – 10,000 units in the consensus
for an Exit node this gives the probability of 0.08%-0.17%
for our relay to be chosen for Exit position by a user. Given
that 10 TB of trafﬁc is included into the server’s price and
one has to pay 2 EUR per additional 1 TB, it would cost an
attacker 360 USD to have 180 TB of trafﬁc per month. The
corresponding speed is 69 MB/s (69,000 consensus bandwidth
units). By running 6 such relays the attacker can achieve 400K
of bandwidth weight in total for the price below 2500 USD
(2160 USD for the trafﬁc and 240 for renting fast servers).
Thus having a consensus weight close to 400,000 is possi-
ble for an economy-level attacker. The attacker can also decide
to play unfair and mount a bandwidth cheating attack which
would allow her to have a high consensus weight while keeping
the budget of the attack even lower [22]. This is especially
23A unit roughly corresponds to 1 KB/s of trafﬁc.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:31 UTC from IEEE Xplore.  Restrictions apply. 
possible since Bitcoin trafﬁc by itself is rather lightweight and
high bandwidth would be needed only in order to drive Tor
path selection algorithm towards attacker’s nodes.
B. Bitcoin peers
The attack described in sections III and IV suggests the
attacker injects a number Bitcoin peers; at the same time
Bitcoin network allows only one peer per IP address. Thus
the attacker is interested in getting as many IP addresses as
possible. Currently there are several options. The cheapest
option would be to rent IP addresses on per hour basis. The
market price for an IP address is 1 cent per hour [21]. This
results in 7200 USD per 1000 IP’s per month. From these
computations it is clear that an attacker would do better by
investing in Exit bandwidth rather than running Bitcoin peers
(unless she controls a small botnet), and the only limitation
for her would be not to become too noticeable. An attacker