### 云虚拟化安全：QEMU的安全探索与防御

#### 作者
**钱文祥 (@leonwxqian)**
- **职位**：腾讯 Blade Team 高级安全研究员
- **研究领域**：云虚拟化、物联网（IoT）、浏览器等安全研究
- **主要发现**：
  - NVIDIA vGPU 逃逸漏洞
  - Amazon Echo 和 Google Home 音箱中的漏洞
  - 浏览器中的“麦哲伦”（SQLite）漏洞
  - Curl 的多个远程代码执行漏洞
- **演讲经历**：多次在著名会议上发表演讲

#### 关于 Tencent Blade Team
- **成立时间**：2017年底
- **隶属**：腾讯安全平台部
- **研究方向**：AIoT、移动互联网、云虚拟化技术、可信计算等前沿领域的安全技术研究
- **报告漏洞**：向Google、Microsoft、Apple、Amazon、Huawei等国际知名公司报告了200多个安全漏洞
- **研究成果**：多次入选BlackHat、DEFCON、CanSecWest、HITB、POC、Xcon等顶级安全大会
- **团队官网**：[https://blade.tencent.com](https://blade.tencent.com)

### 云虚拟化

#### 背景
- **需求**：许多云服务需要从一个物理硬件系统创建多个模拟环境。
- **核心技术**：虚拟化，特别是Hypervisor层。
- **定义**：Hypervisor是一种运行在基础物理服务器和操作系统之间的中间软件层，允许多个guest操作系统和应用共享硬件。
- **典型代表**：QEMU-KVM、Xen、VMware、Hyper-V等。

#### Hypervisor的位置
- **角色**：Hypervisor是用户（Guest）和云服务提供商的“边缘”。
- **管理**：Host是总管理员，可以运行大量虚拟机。
- **用户体验**：对用户而言，Guest就像一台独立的计算机，用户可以完全控制它。
- **安全风险**：如果存在漏洞允许用户从Guest中穿透到Host上，则会对主机的隐私性和安全性造成极大危害。

### QEMU中的存储

#### 存储的重要性
- **攻击面**：存储一直是各虚拟机/容器的重要攻击面。
- **常见模式**：PATA、SATA、virtio-blk、virtio-sata等。
- **性能**：Virtio方式是QEMU默认支持功能中性能最高的存储使用方式。
- **备选方案**：如果无法使用virtio驱动程序，x86通常可以使用AHCI (SATA)以提高效率。

#### 漏洞发现
- **问题**：在QEMU的AHCI模块中发现了一个任意长度越界读写的问题。
- **CVE编号**：CVE-2020-29443
- **参考链接**：[https://qemu.org/2021/01/19/virtio-blk-scsi-configuration/](https://qemu.org/2021/01/19/virtio-blk-scsi-configuration/)

### AHCI（高级主机控制接口）设备简介

#### 定义
- **开发**：由Intel开发，用于提速SATA设备的数据处理。
- **接口**：AHCI是SATA的技术，SATA是从PATA（原称ATA）演变而来的接口。
- **源码**：PATA/SATA/AHCI在QEMU源码树中共享一部分源码。
- **访问方式**：AHCI可使用MMIO直接访问磁盘，而无需像IDE那样使用复杂的PMIO命令序列。
- **控制器**：AHCI控制器是具有总线主控能力的PCI设备，是系统内存和SATA设备之间的数据传输引擎。
- **文档**：AHCI的文档较少，常用的参考资料是Intel AHCI规范和Linux源码。

### FIS（帧信息结构）

#### 作用
- **数据传输**：SATA使用FIS包在主机和设备之间传输数据。
- **命令集**：SATA使用与PATA相同的命令集，但FIS是SATA/PATA控制上的主要区别。
- **指令类型**：
  - Register FIS - host to device
  - Register FIS - device to host
  - DMA activate FIS - device to host
  - DMA setup FIS - bidirectional
  - Data FIS - bidirectional
  - BIST activate FIS - bidirectional
  - PIO setup FIS - device to host
  - Set device bits FIS - device to host

### ATAPI Command

#### 定义
- **功能**：ATAPI是一种向连接到ATA总线的光驱或磁带驱动器发出SCSI命令的方法。
- **重要命令**：
  - PACKET 命令 (0xA0)
  - IDENTIFY PACKET DEVICE (0xA1)
- **PACKET格式**：由1个字节的SCSI命令后跟11个字节的数据组成。
- **QEMU实现**：在QEMU中称为“WIN_PACKETCMD（0xA0）”。

### PRDT（物理区域描述表）

#### 结构
- **定义**：全称为物理区域描述表（Physical Region Descriptor Table）。
- **项目大小**：每个PRDT项为16字节，包括以下字段：
  - DBA（数据基地址）
  - DBC（字节计数）
- **组织形式**：PRDT按链表的形式组织，最多可以包含65535个项目。

### 漏洞触发位置

#### 代码审计
- **设计理念**：IO密集型代码注重性能，底层设计理念应是“无必要，不检查”，检查应在代码早期阶段进行。
- **审计过程**：从IO操作的最底层代码开始自底向上进行审计，发现了一个可疑的位置，类似于循环中的memcpy。
- **拷贝对象**：s->io_buffer是一个预先分配的固定长度缓冲区。
- **参数来源**：Source和size都是客户机提供的输入，看起来并不安全。

### 污点追踪——ide_atapi_cmd_read_pio

#### 追踪过程
- **污点源头**：source和size作为污点向上溯源。
- **计算过程**：packet_transfer_size由nb_sectors和sector_size计算而来。
- **新污点**：nb_sectors是从某个buf中读取出来的。

#### 调用顺序
- **调用链条**：
  - (hw/ide/atapi.c) cmd_read 或 cmd_read_cd -> ide_atapi_cmd_read -> ide_atapi_cmd_read_pio
- **复杂性**：进一步回溯时，污点源头越来越多，变量参与链条，分支路径复杂。

### 理解AHCI的核心——Command Table

#### FIS指令结构体布局
- **整体结构**：整个Command Table是一体的，但为了方便介绍，先只提FIS部分。
- **端口**：AHCI由6个port构成，设备使用的port是固定的，FIS等和port绑定。
- **内存选择**：选择低地址物理内存如0x20000放置cmd_fis结构体。
- **回调函数**：ahci_mem_write中也为PMIO预留了一部分内存区域，因此MMIO/PMIO读写都可以通过MMIO完成。

#### 内存布局
- **设置**：通过MMIO→PMIO写回调设置lst的地址为0x20000，这是整个Command Table的地址。
- **触发**：通过AHCI_PORT_REG_CMD_ISSUE触发FIS指令处理器。
- **状态信息**：在lst开头，例如0x20000处，按FIS格式设置好状态信息，包括最重要的feature字段。