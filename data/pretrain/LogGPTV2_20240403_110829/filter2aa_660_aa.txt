# Anti-RE Techniques in DRM Code

## Introduction
- **Speaker**: Jan Newger
- **Event**: Seminar on Advanced Exploitation Techniques, DEF CON 16 (2008), i4, RWTH Aachen, Germany

## Outline
1. **Introduction**
   - Legal Issues
   - About DRMs
   - Approaching the DRM
2. **SEH Basics**
   - Overview
   - Exception Dispatching
3. **Anti-RE Techniques**
   - Overview
   - Trampolines
   - Debug Registers
   - P-Code Machine
4. **Decrypting the Content**
   - The Algorithm
   - Demo

## 1. Introduction
### Legal Issues
- **Legal Concerns**: Publishing DRM research is likely illegal in most countries due to legal uncertainty.
- **EFF Support**: The Electronic Frontier Foundation (EFF) provided a potential solution through the "Encryption Research" loophole in the DMCA, but it was still too risky for the speaker.

### Consequences
- **Stripped Details**: Key setup and decryption algorithm details are removed.
- **Anonymity**: The identity of the DRM is not revealed.

### What This Talk Is and Is Not
- **Focus**: Show some uncommon Anti-RE techniques and strategies to defeat them.
- **Not Covered**: How to hack a specific DRM or tutorials for writing decryption tools.

### What is DRM?
- **Definition**: Digital Rights Management (DRM) restricts access to content, often encrypting it.
- **Key Binding**: Keys are often bound to user/hardware to prevent copying.
- **Hardware Change**: Changing hardware requires a new license.
- **Keys**: Media key, hardware key, player key, content key, etc.
- **Vulnerability**: Every DRM can be broken.

### Possible Strategies
- **Ultimate Goal**: Find the code for content decryption and the associated key setup.
- **Obvious Approach**:
  1. Set breakpoints (BPs) on file I/O APIs (e.g., CreateFile, ReadFile, MMF).
  2. Set breakpoint memory (BPM) on the file buffer.
  - **Outcome**: Stops on copy operation or breaks on decryption.
- **Limitation**: The DRM system blocks debug registers, making this approach impossible.

- **Code Coverage**:
  - **Definition**: Runtime analysis to spot relevant code by recording the execution of basic blocks/functions.
  - **Limitation**: Impossible to find the DRM code itself using code coverage, but it provides good starting points.

- **Basic Approach Summary**:
  - Use code coverage to identify areas to investigate.
  - Use the obvious approach to find the decryption code.

## 2. SEH Basics
### Overview
- **Structured Exception Handling (SEH)**: Dispatches exceptions on a per-thread basis using a linked list of handlers starting at `fs:[0]`.
- **Handler Actions**:
  - Handle the exception and ask the OS to continue execution.
  - Refuse to handle the exception.

### SEH Handler
- **Function Signature**:
  ```c
  EXCEPTION_DISPOSITION _except_handler(_EXCEPTION_RECORD* ExceptionRecord, void* EstablisherFrame, _CONTEXT* ContextRecord, void* DispatcherContext);
  ```

### SEH Handler Invocation
- **Simplified View**:
  - No stack unwinding.
  - No collided unwind, nested exceptions.
  - Handler can decide not to return (C++, try...except).
  - Good enough for our analysis.

## 3. Anti-RE Techniques
### Overview
- **Control Flow Obfuscation**:
  - Use fake exceptions to interrupt control flow.
  - Handlers change thread context.
  - Inter-/intra-modular calls through call tables.
  - Use dynamically allocated trampolines.
  - P-Code machine.

- **Anti-Debugging**:
  - Check PEB flag.
  - Scan APIs for `0xCC`.
  - Usage of debug registers (no BPM/BPX).
  - Special files contain code uncompressed at runtime.
  - Use fake exceptions to detect debugger.

### Trampolines
- **Definition**: Copy code at runtime to a randomized location (RDTSC) and execute from there.
- **Execution**:
  1. Change control flow via fake exceptions (single step exception).
  2 - Exception handler modifies EIP based on debug register values.
  3. Execution resumes at the next trampoline.
- **Control Flow**:
  - Trampoline A transfers control flow to trampoline B.
  - Control flow depends on jumps and exceptions.
  - No `call` or `ret` instructions, no direct control flow between trampolines.
  - Call hierarchy emulation is implemented.

### Trampoline Details
- **Trampoline0**:
  - TrampolineA copies trampoline0 and jumps to it.
  - Manages internal call hierarchy.
  - Puts destination trampoline on the stack.
  - Copies the next trampoline to a random location.

- **Trampoline1**:
  - Copies trampoline0 to a random location.
  - Installs SEH frame and triggers a single-step exception.
  - **Trigger Exception**:
    ```assembly
    pushf
    pop eax
    or eax, 100h
    push eax
    popf
    ```

- **Exception Handler**:
  - Changes EIP based on debug register values.
  - Clears TF bit, removes SEH frame, cleans the stack.

- **Trampoline2**:
  - Copies the destination trampoline.
  - Jumps to the destination trampoline.

- **Call Stack Emulation**:
  - The `ret` instruction is emulated by a similar mechanism.
  - Special exception handler removes trampoline from the internal call stack.
  - Modifies context, and execution resumes.

## 4. Decrypting the Content
### The Algorithm
- **Details**: [To be filled with the specific algorithm details]

### Demo
- **Demonstration**: [To be filled with the specific demo details]

---

This optimized version provides a clear, structured, and professional presentation of the content, making it easier to follow and understand.