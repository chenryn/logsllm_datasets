comparable to LEDBAT.
Overall, in these environments, our latency noise tolerance tech-
niques allow Proteus-P and Proteus-S to each be among the best in
their class (primary and scavenger respectively). Specifically, they
each have close to the best throughput while being much more
latency-aware (Fig. 3(b)) than the other high-throughput protocols.
This helps show our design is generally successful in achieving a
single codebase which can be either a primary or scavenger. While
there might still be room for improvement (such as closing the
moderate throughput gap between Proteus-P and BBR), a tradeoff
between throughput and latency is to be expected.
We move now to the scavenger goal of yielding to primary flows,
quantified by the CDF of primary flow throughput ratio in the same
WiFi environments (Fig. 10). When competing with LEDBAT, BBR
and CUBIC’s median throughput ratios are 80.0% and 76.1% respec-
tively. With Proteus-S as the scavenger, they respectively achieve
17.6% and 19.2% higher throughput ratios. Meanwhile, Proteus-S
enables BBR and CUBIC to have at least 90% throughput ratio in
71.8% and 51.3% of all cases, respectively, which are 1.2× and 81.9%
higher than LEDBAT. Considering BBR and CUBIC are today the
most widely adopted primary protocols, and LEDBAT is perhaps
the only deployed scavenger protocol on the Internet, this is an im-
portant improvement. Furthermore, Proteus-S has more significant
performance gain when the competing primary protocol is latency-
aware. Specifically, when competing with Proteus-S, the median
throughput ratios of COPA, Proteus-P, and Vivace are 39.3%, 41.0%,
and 44.1% higher than achieved when competing with LEDBAT.
These results are consistent with those in Fig. 6.
6.2.2 Application Performance Benchmarks. To demonstrate the
significance of a congestion control scavenger in practice, we use
624
(a) DASH Video
(b) Webpage Load
Figure 11: Scavenger with Applications on Internet
the live Internet to compare the influence of Proteus-S, LEDBAT,
and CUBIC on two popular applications, DASH video streaming
and webpage loading. We use a wired Xfinity downlink of about
100 Mbps. For DASH video streaming, we use the default dash.js
(version 3.0.1) and request the Big Buck Bunny sample video from
Akamai. For webpage loading, we randomly request the top 30 sites
in United States from Alexa.com in a 10-minute run, with a Poisson
rate of 1 request per 10 seconds. The Chrome browser is used for
both applications. A single scavenger flow may run simultaneously
from an AWS server in Virginia to our laptop in the background.
Fig. 11(a) presents the average video chunk bitrate with different
number of concurrent videos (started simultaneously). The results
when CUBIC runs in the background are included for reference.
We can see that although LEDBAT has smaller impact to DASH
performance than CUBIC, it still dramatically falls behind Proteus-
S. For example, with 8 videos, Proteus-S enables DASH with 2.5×
higher bitrate than LEDBAT. Then, Fig. 11(b) presents the CDF of
webpage loading time. Proteus-S has almost no impact on page load-
ing, while achieving 48.2% (median) and 33.3% (average) speed-up
compared with LEDBAT. Thus, even in a single house with a single
router, a congestion scavenger for background flows (e.g., system
update, cloud storage synchronization) can still increase compet-
ing applications’ performance. (That said, we note that Proteus-S’s
performance gains in Fig. 11 are in part due to the fact that it is
latency-aware, rather than specifically because of our scavenger
mechanisms.)
6.3 Flexibility of Hybrid Utility
Next, we evaluate our novel capability of supporting a hybrid utility
function. As an example application, we compare Proteus-H and
Proteus-P in a video streaming test using our emulated adaptive
BOLA agent. For that purpose, we generate a corpus of 10 4K and
 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1Cumulative FractionPrimary Flow Throughput Ratiovs Proteus-Svs LEDBAT 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1Cumulative FractionPrimary Flow Throughput Ratiovs Proteus-Svs LEDBAT 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1Cumulative FractionPrimary Flow Throughput Ratiovs Proteus-Svs LEDBAT 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1Cumulative FractionPrimary Flow Throughput Ratiovs Proteus-Svs LEDBAT 0 0.2 0.4 0.6 0.8 1 0 0.2 0.4 0.6 0.8 1Cumulative FractionPrimary Flow Throughput Ratiovs Proteus-Svs LEDBAT04812161248Average Bitrate (Mbps)Number of Concurrent VideosDASH onlyDASH + Proteus-SDASH + LEDBATDASH + CUBIC02040608010003691215Cumulative Distribution (%)Page Loading Time (sec)Chrome onlyChrome + Proteus-SChrome + LEDBATChrome + CUBICPCC Proteus: Scavenger Transport And Beyond
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
(a) Video Bitrate
Figure 14: Extend RTT Deviation to BBR
significantly lower rebuffer ratios for both 4K and 1080P videos.
For example, with 110 Mbps bandwidth, the 4K and 1080P rebuffer
ratios are reduced by 68.0% and 33.5%, respectively. The only excep-
tion is under 70 Mbps bandwidth, when Proteus-P does not even
try the highest 4K bitrate due to low fair share.
Considering that the above rebuffer ratios are small because of
adaptation by BOLA, we force the agent at the highest bitrates, and
repeat the above experiments. Fig. 13 shows the achieved rebuffer
ratios, which are consistent with Fig. 12(b). Specifically, under the
same 110 Mbps bandwidth, Proteus-H has 34.0% lower rebuffer
ratio for 4K video. Therefore, the support for an adaptive hybrid
mode can indeed increase utilization efficiency of restricted network
resources.
7 DISCUSSION
We have seen that Proteus-S has robust performance against various
primary protocols, and can help improve network-wide utility, both
on emulated networks and in the wild. Nevertheless, much remains
to explore in scavenger transport. In this section, we discuss several
important insights for practical implementation and future work.
7.1 Real-World Adoption
Proteus can be implemented at the server side without involving the
client, consistent with most existing transport designs [13, 16, 17].
Current Linux kernel mechanisms make it difficult (though, we
think, not impossible) to implement some aspects of our utility
module. But other options exist, such as the CCP platform [29], or
a fully user-space transport stack as used in QUIC [25] (there is
already a QUIC-based prototype of PCC Vivace [3], and we adopted
QUIC-compatible APIs for our implementation of Proteus). Thus,
we see several low-overhead paths to adoption for Proteus.
In more advanced deployments, client-side participation may
help, including necessary messages required by applications (as in
bitrate adaptation) and voluntary feedback by users (e.g., concrete
deadline requirements). We leave a full design to the future, but
note this feedback can be transmitted through Proteus’s APIs and
does not necessitate protocol changes like reserved header bits.
The basic idea behind utility design in Proteus, i.e., selection
of control signals, can potentially be extended to other primary
protocols. For example, any protocol can lower its priority by react-
ing to RTT deviation. For illustration, we modify the kernel BBR
implementation such that whenever the smoothed RTT deviation
is larger than 20 ms, the BBR sender is forced into its minimum
(b) Rebuffer Ratio
Figure 12: Hybrid mode in adaptive video streaming
Figure 13: Consistently low rebuffer by hybrid mode
10 1080P videos, all composed of 3-second chunks and at least 3
minutes long, with highest bitrates of above 40 Mbps and 10 Mbps,
respectively.
We first use an Emulab bottleneck with 30 ms RTT, 900 KB buffer
and varying bandwidth. For both Proteus variants, we randomly
select one 4K and three 1080P videos, start them simultaneously
and let them stream for 3 minutes. Fig. 12 presents the average
bitrates and rebuffer ratios of 4K and 1080P videos separately. Com-
pared with Proteus-P, when all flows use Proteus-H, the average
bitrate per 4K video chunk is increased by up to 3 Mbps and up
to 11%, without obviously impacting 1080P videos. With 3-second
chunk duration and 3-minute streaming period, this increment
corresponds to almost half a minute longer duration staying at
the highest 4K bitrate. Meanwhile, the 4K bitrate gain comes with
625
010203040 70 80 90 100 110 120Avg. Chunk Bitrate (Mbps)Bottleneck Bandwidth (Mbps)Proteus-HProteus-P1080P1080P4K4K00.51.01.52.0 70 80 90 100 110 120Average Rebuﬀer Ratio (%)Bottleneck Bandwidth (Mbps)Proteus-HProteus-P1080P1080P4K4K0510152025 90 100 110 120 130 140Average Rebuﬀer Ratio (%)Bottleneck Bandwidth (Mbps)Proteus-HProteus-P1080P1080P4K4K 0 10 20 30 40 50 0 50 100 150 200Throughput (Mbps)Time (Sec)BBR vs. BBR-SBBR-S   vs.BBR-SCUBIC   vs.BBR-SBBRBBR-SBBR-SCUBICSIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
Tong Meng, Neta R. Schiff, Brighten Godfrey, and Michael Schapira
RTT probing phase for at least 40 ms,7 which is a phase when BBR
effectively stops further transmission, and maintains minimum in-
flight packets to probe for clean channel RTT. We let the modified
BBR, denoted BBR-S, compete with BBR, CUBIC, and BBR-S on an
Emulab bottleneck with 50 Mbps bandwidth, 30 ms RTT, and 375 KB
buffer. Fig. 14 shows the throughput across time. Apparently, BBR-S
is able to yield against BBR and CUBIC, while sharing the bottle-
neck fairly with BBR-S itself. This validates that our techniques
may be of interest beyond Proteus itself.
7.2 Robustness in Noise Tolerance
The current Proteus architecture (as well as the utility framework in
[16, 17]) relies on a relatively ideal model, i.e., the utility functions
and their equilibrium analysis do not formally model inherent RTT
fluctuation. Although Proteus mitigates this with noise tolerance
mechanisms, they are not perfect. According to results from the
live Internet, the relatively more aggressive protocols (BBR and CU-
BIC) still have better performance as primary flows compared with
Proteus-P. Additionally, there are high-fluctuation environments
we have not yet tested, such as LTE. Although those networks
provide better user isolation using fine-grained resource alloca-
tion [41], it is important to consider them in future work on a
full-fledged transport design. Thus, we envision designs to deal
with noise on a more fundamental level, as well as theoretical tools
to analyze these designs. That may involve quantifying confidence
in inputs to the utility function, including a specific noise term in
the utility function, or turning to alternative methods like neural
networks [30].
8 RELATED WORK
The surge of data intensive applications such as online video stream-
ing has driven research on Internet congestion control in both indus-
try and academia. Recent work [8, 13, 17] has shown that traditional
TCP variants (e.g., [10, 21, 27], etc.) cannot consistently deliver high
performance. These variants, and various improvements such as
Remy [40], usually correlate packet losses with congestion, which
is not always the case, and thus, they cannot tolerate random packet
losses. In addition, the widely used TCP CUBIC can cause significant
inflation and bufferbloat, which harms the quality of experience
for latency-sensitive applications. To solve TCP’s inherent perfor-
mance issues, numerous protocols have been introduced. The idea
of performance-oriented congestion control (PCC) was proposed in
[16], leveraging a sending rate control logic based on an empirical
utility function constructed from observed performance metrics.
However, PCC Allegro [16], the first protocol in the PCC family,
uses a loss-based utility function, and also suffers from bufferbloat.
PCC Vivace [17] has better latency awareness and convergence
speed with its latency-aware utility function and gradient-ascent
rate control. TCP BBR [13] tries to build a network model from
recent measurements of network bandwidth and minimum RTT,
so as to maintain high sending rate and avoid excessive inflation.
COPA [8] leverages the observed minimum RTT to achieve a tar-
get rate that optimizes a natural function of throughput and delay
under a Markov packet arrival model. In addition, there are works
7We use fixed thresholds such as 20 ms RTT deviation for illustration. That said, we
are not claiming BBR-S could be a robust scavenger in practice.
focusing on congestion control in specific Internet environments
such as LTE (e.g., [41, 43]), or for specific flow characteristics such
as short flows (e.g., [26]). However, all the above works aim at a
fair-sharing equilibrium. Some works such as BBR and COPA ex-
plicitly try to achieve fair share when competing with TCP CUBIC
for the purpose of TCP friendliness.
The most important work targeting a non-fair scavenger equi-
librium is LEDBAT [34]. It tries to control the induced extra delay
to the network within a threshold, so that it can back off when
competing with other primary flows. However, as shown in our
experiments, it often significantly reduces throughput of primary
flows – even CUBIC, but to a larger degree for protocols that include
some latency awareness – and has a known latecomer advantage
issue when competing with itself [5, 14, 32].
Minerva [37] was proposed as an end-to-end transport to im-
prove QoE fairness in video streaming. It differs from our work in
that it tries to compete fairly with TCP, but is related in its devia-
tion from fair sharing among video flows to optimize overall QoE.
We believe Proteus’s and Minerva’s ideas could be relevant to a
full-fledged cross-layer design for QoE optimization.
Our work is orthogonal to, but may utilize, platforms that ease
implementation of new transport protocols, including QUIC’s user-
space transport which modifies the traditional HTTPS stack [25],
and CCP’s universal off-datapath congestion controller design [29].
A separate category of congestion control protocols improves
performance via the combination of protocol changes and in-network
(router/switch) support, either in data centers (e.g., [36, 39]) or in
the Internet (e.g., [12, 19, 24]). While this approach can be feasible
in some data centers, adoption across the public Internet is difficult.
9 CONCLUSION
We propose PCC Proteus, an architecture for Internet congestion
control. Proteus supports interaction from application to transport
layer, to tailor congestion control to application requirements, and
in particular, to realize a congestion control scavenger. Specifically,
based on an online-learning utility framework [16], we design a
protocol that can act as either a primary protocol (Proteus-P) or as
a scavenger (Proteus-S) using a dedicated scavenger utility func-
tion. Through comprehensive experiments on emulated networks
and the live Internet, we show the robustness of Proteus-S as a
scavenger against various competing protocols. We also extend Pro-
teus to a hybrid scavenger/primary design which achieves higher
application-level utility for adaptive bitrate video delivery and web
page loading, and demonstrates the flexibility of our approach. We
believe this line of research will be increasingly important to deal
with Internet environments where constrained bandwidth must
be shared between high-priority and traffic with more elastic time
requirements.
ACKNOWLEDGEMENTS
We thank Praveen Balasubramanian for insightful discussions about
the importance of scavenger transport. We also thank our shepherd,
Mohammad Alizadeh, and SIGCOMM reviewers for their valuable
comments. This research was supported by Huawei and the Israel
Science Foundation.
626
PCC Proteus: Scavenger Transport And Beyond
SIGCOMM ’20, August 10–14, 2020, Virtual Event, USA
REFERENCES
[1] [n.d.]. dash.js. https://github.com/Dash-Industry-Forum/dash.js.
[2] [n.d.]. 𝜇Torrent Transport Protocol library. http://github.com/bittorrent/libutp.
[3] [n.d.]. PCC QUIC Implementation. https://github.com/netarch/PCC_QUIC.
[4] [n.d.]. Proteus Implementation. https://github.com/PCCproject/PCC-Uspace.
[5] 2017.
dows.
ledbat-low-priority-tcp-congestion-control-in-windows-01.
in Win-
LEDBAT++: Low priority TCP Congestion Control
https://datatracker.ietf.org/meeting/100/materials/slides-100-iccrg-
[6] 2018. Vivace Full Proof of Theorems.
http://www.ttmeng.net/pubs/
vivace_proof.pdf.