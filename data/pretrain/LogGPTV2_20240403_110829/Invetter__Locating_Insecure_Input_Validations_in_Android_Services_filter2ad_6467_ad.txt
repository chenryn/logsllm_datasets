### Analysis and Findings

- **Protection Status**: Only 643 (34.48%) of the identified branches are protected by app-level permissions, while the remaining can be exploited without any permission.

- **Validation and False Positives**: We randomly selected 800 branches (100 for each of the 8 system images) and manually checked them, identifying 71 false positives. Our tool incorrectly identifies all constant-returning branches as input validations, leading to these false positives. This is because not all branches that return constants are part of input validation; some may be hard-coded constant returns.

- **Sensitive Input Validations**: From the 1,865 input validations, Invetter identified 749 as sensitive after learning. After the vulnerability discovery phase, Invetter located 103 potentially insecure input validations. Manual verification confirmed 86 true positives, while some seemingly sensitive validations did not lead to any sensitive subsequent actions (e.g., returning a true/false status).

- **Completeness Evaluation**: Evaluating the completeness (i.e., false negatives) of our approach is extremely challenging due to the vast size of the Android framework codebase (more than 100,000 conditional branches). This limitation is common in similar static analysis tools like Kratos [26] and AceDroid [33]. A small-scale experiment on 5 Android services (StatusBarManagerService, MmsServiceBrokers$BinderService, LocationManagerService, TextServiceManagerService, MediaSessionService$SessionManagerImpl) in AOSP 7.1 showed that Invetter successfully identified their sensitive and insecure input validations, indicating decent coverage.

### Categorization of Identified Input Validations

To better understand the input validations in the Android framework and SDK, we conducted a measurement study. Table 3 shows the distribution of these validations:

| Category                     | Android Framework | Android SDK |
|------------------------------|-------------------|-------------|
| Verify caller identity        | 258               | 30          |
| Restrict usage of sensitive resources | 497             | 72          |
| Security irrelevant validations | 130              | 232         |
| **Total**                    | 885               | 334         |

- **Identity Verification**: Approximately 36% of input validations in the Android framework and 12% in the SDK are used to verify the caller's identity (e.g., uid, package name, or critical permissions). Bypassing these checks can have serious security implications.

- **Resource Usage Restrictions**: About 10% of the input validations in the Android framework and 31% in the SDK restrict the usage of sensitive system resources. For example, checking if a message type is permitted. Bypassing these checks can also lead to security flaws, though less severe than identity checks.

- **Overall Security Impact**: More than 40% of the input validations in Android ensure the secure usage of sensitive resources.

### Tool Effectiveness

- **Exploitable Vulnerabilities**: Out of the 86 identified insecure sensitive input validations (true positives), we manually investigated and confirmed at least 20 exploitable vulnerabilities. These range from privilege escalation and privacy leakage to the clearance of system files. Admittedly, our analysis may not be exhaustive, and there may be cases that are difficult to trigger but could become exploitable with more effort. Therefore, our estimate of exploitable vulnerabilities is a lower bound.

- **Examples of Exploits**:
  - **Incorrect Identity Checks**: 11 input validations incorrectly check the caller's identity using app-supplied data. One example is illustrated in ยง3 (Figure 5). Another case involves an app-supplied userId being used to verify the caller's identity.
  - **Confused Deputy Example**: In one instance, a native service was properly protected, but its Java-level wrapper service was left unprotected. A regular app directly accessing the native service would be denied, but accessing the Java service allows indirect access to the native service.
  - **Misplaced Access Control**: One access control is misplaced only in the Android SDK and not in Android services. There are 4 other similar cases that do not seem exploitable currently but are potential problems.

### Summary Table of Exploitable Vulnerabilities

| Class Name                   | AOSP Version | Attack Detail                                                                 | Affected Frameworks | Vendor Response |
|------------------------------|--------------|------------------------------------------------------------------------------|---------------------|-----------------|
| AccessibilityManagerService  | 5.0, 6.0, 7.0, 7.1, 8.0 | Interrupt all accessibility services                                         | Third Party ROM     | N               |
| NetworkManagerService        | 5.0, 6.0, 7.0, 7.1, 8.0 | Modify VPN configurations                                                    | Third Party ROM     | N               |
| AccessibilityManager         | 5.0, 6.0, 7.0, 7.1, 8.0 | Expose all hidden interfaces to user                                         | Third Party ROM     | N               |
| WindowManagerService         | 5.0, 6.0, 7.0, 7.1, 8.0 | Create phishing toast window                                                 | Third Party ROM     | F               |
| AccessibilityManagerService  | 5.0, 6.0, 7.0, 7.1, 8.0 | Send arbitrary accessibility event                                           | Third Party ROM     | N               |
| InputManagerService          | 5.0, 6.0, 7.0, 7.1, 8.0 | Send crafted physical key event                                              | Third Party ROM     | N               |
| MediaSessionService          | 5.0, 6.0, 7.0, 7.1, 8.0 | Send crafted media key event                                                 | Third Party ROM     | N               |
| DropBoxManagerService        | 5.0, 6.0, 7.0, 7.1, 8.0 | Clear kernel logs                                                             | Third Party ROM     | N               |
| Atfwd#                       | 5.0, 6.0, 7.0, 7.1, 8.0 | Send arbitrary keyword/touch event, erase SD card content, etc.              | Third Party ROM     | N               |

This table provides a detailed overview of the exploitable vulnerabilities, their impact, and the vendor responses.