最近忍者师傅因为某件事情，寝食不安，所以给他写篇星球文，安抚他寂寞的心灵。
https://my.oschina.net/9199771/blog/5085337 
书接上文，之前提到我们可以用java版的libinjection进行sql注入防护。
那么我今天花了一天的时间，在sqlmap的level=5 和 risk=3的情况下对拼接的sql进行安全测试，本文不涵盖tamper，否则本文的内容会异常复杂。
在试验过程中我发现，其实很多的报错情况，以及一些sql报错，可以看到一些 libinjection 没有对应防护策略的端倪。
上文中提到了GTID_SUBSET注入问题。
testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)' 
其实还有一个JSON_KEYS注入问题。
testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)' 
除此之外，我们还能发现利用存储过程、sleep函数、SELECT CASE WHEN等绕过 libinjection语义策略的问题。
所以我在上文的基础上，经过了反复的试验，得出了在语义检查前使用正则表达式进行安全防护的一些注意要点，其中我们要注意 rasp 默认阻断sql
报错的请求。
（以下正则均来自于modsecurity的内置正则）
@RequestMapping("list5") 
  public User getList5(String name) { 
    if (name == null) { 
      name = "dato"; 
    } 
    String pattern = "\\W{4}"; 
    if(Pattern.compile(pattern).matcher(name).find()){ 
      // 很有用的规则，阻断四个连续的特殊字符能拦截很多明显的payload 
      return null; 
    } 
    pattern = "((?:[~!@#$%^&*()\\-+={}\\[\\]|:;\"'´’‘`<>][^~!@#$%^&*()\\-+={}\\[\\]|:;\"'´’‘`<>]*?){6})"; 
    if(Pattern.matches(pattern, name)) { 
      // 一个变量超过6个特殊字符就很可能是sql注入 
      return null; 
    } 
    pattern = "(?i:sleep\\(\\s*?\\d*?\\s*?\\)|benchmark\\(.*?,.*?\\))"; 
    if(Pattern.compile(pattern).matcher(name).find()){ 
      // 这条可以不加入，因为rasp或常见的数据库中间件都阻断了sleep、benchmark等常见的恶意函数，这里加入的原因是语义引擎拦截sleep注入时不全面 
      // 这条语句是存在 bypass 的，建议不用使用正则拦截，本文是为了演示,所以增加该语句 
      return null; 
    } 
    pattern = "(?i:(?:create\\s+(?:procedure|function)\\s*?\\w+\\s*?\\(\\s*?\\)\\s*?-|;\\s*?(?:declare|open)\\s+[\\w-]+|procedure\
    if(Pattern.compile(pattern).matcher(name).find()){ 
      // 这条可以不加入，不少工作场景中的数据库已不支持存储过程，这里加入的原因是语义引擎拦截对 procedure analyse 注入基本拦截不到 
      // 这条语句是存在 bypass 的，建议不用使用正则拦截，本文是为了演示,所以增加该语句 
      return null; 
    } 
    if(SQLParse.isSQLi(name)){ 
      return null; 
    } 
    // 执行sql select * from user where name='${name}' 
除了上文提到的在rasp中内置语义检测的思路，其实今天我还发现能将安全过滤做到fastjson之中，也就是对用户输入数据进行自动化的处理。
那我们如何将该思路进行拓展呢。
参考以上代码，我们可以修改fastjson的源码，对反序列化数据的 parse parseObject parseArray 方法进行重写，将数据输入进行过滤。
这种解决思路主要针对安全编码能力普遍很弱的团队，而执行力强的团队可以很好的使用预编译避免sql注入。
也就是利用将安全过滤嵌入到每一个变量中而不是每一次http请求中，利用这种思路：
防止攻击者利用各种编码手段导致的sql注入绕过，后续还能增加xss的防护策略
降低整体环境的算力支出，间接降低waf的运维成本
只要没有研究出绕过防护策略的注入语句，可以保证研发单位快速和安全的迭代
作者: k4n5ha0
    return userMapper.getUserByName3(name); 
  } 
//json字符串转json对象 
public static void jsonToJsonBean() { 
String s ="{\"action\":\"add\",\"id\":\"1\",\"ordinal\":8,\"organUnitFullName\":\"testJSON\",\"parent\":\"0\",\"suborderNo\":\"589
JSONObject jsonObject = JSON.parseObject(s); 
String action = jsonObject.getString("action"); 
String id = jsonObject.getString("id"); 
System.out.println("action ="+action);//add 
System.out.println("id ="+id);//1 
System.out.println("jsonObject ="+jsonObject); 
//action =add 
//id =1 
//jsonObject ={"parent":"0","organUnitFullName":"testJSON","action":"add","id":"1","suborderNo":"58961","ordinal":8}