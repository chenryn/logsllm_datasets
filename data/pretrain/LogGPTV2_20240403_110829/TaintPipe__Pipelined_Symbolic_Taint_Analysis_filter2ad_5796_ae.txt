bolic memory index. We plan to extend our symbolic
memory index handling in the future. TaintPipe recovers
the straight-line code by logging basic block entry ad-
dress. However, with malicious self-modifying code, the
entry address may not uniquely identify a code block. To
address this issue, we can augment TaintPipe by logging
the real executed instructions at the expense of runtime
performance overhead.
Our focus is to demonstrate the feasibility of pipelined
symbolic taint analysis. We have not fully optimized
the symbolic taint analysis part which we believe can
be greatly improved in terms of performance based on
our current prototype. As our taint analysis engine simu-
lates the semantics of taint operations, the speed of taint
analysis is slow. One future direction is to execute con-
crete taint analysis natively like micro execution [16] and
switch to the interpretation-style when performing sym-
bolic taint analysis. Currently TaintPipe requires large
share memory to reduce communication overhead be-
tween different pipeline stages. Therefore, our approach
is more suitable for large servers with sufﬁcient memory.
3http://www.cryptopp.com/
4libdft does not support multi-tag taint analysis.
USENIX Association  
24th USENIX Security Symposium  77
7 Related Work
In this section we ﬁrst present previous work on static
and dynamic taint analysis. Our work is a hybrid of
these two analyses. Then we introduce previous efforts
on taint logic code optimization, which beneﬁts our taint
operation generation. Finally, we describe recent work
on decoupling taint tracking logic from original program
execution, which is the closest to TaintPipe’s method.
Static and Dynamic Taint Analysis. Since static taint
analysis (STA) is performed prior to execution by con-
sidering all possible execution paths, it does not affect
application runtime performance. STA has been applied
to data lifetime analysis for Android applications [1], ex-
ploit code detection [36], and binary vulnerability test-
ing [28]. Dynamic taint analysis (DTA) is more pre-
cise than static taint analysis as it only propagates taint
following the real path taken at run time. DTA has
been widely used in various security applications, includ-
ing data ﬂow policy enforcement [25, 40, 27], revers-
ing protocol data structures [33, 38, 6], malware anal-
ysis [39] and Android security [14]. However, an in-
trinsic limitation of DTA is its signiﬁcant performance
slowdown. Schwartz et al. [32] formally deﬁned the op-
erational semantics for DTA and forward symbolic exe-
cution (FSE). Our approach is in fact a hybrid of these
techniques. Worker thread conducts concrete taint anal-
ysis (like DTA) whenever explicit taint information is
available; otherwise symbolic taint analysis (like STA
and FSE) is performed.
Taint Logic Optimization. Taint logic code, deciding
whether and how to propagate taint, require additional in-
structions and “context switches”. Frequently executing
taint logic code incurs substantial overhead. Minemu [3]
achieved a decent runtime performance at the cost of sac-
riﬁcing memory space to speed up shadow memory ac-
cess. Moreover, Minemu utilized spare SSE registers to
alleviate the pressure of general register spilling. As a
result, Minemu only worked on 32-bit program. Tain-
tEraser [49] developed function summaries for Windows
programs to propagate taint at function level. Libdft [20]
introduced two guidelines to facilitate DBI’s code inlin-
ing: 1) tag propagation code should have no branch; 2)
shadow memory updates should be accomplished with
a single assignment. Ruwase et al. [30] applied com-
piler optimization techniques to eliminate redundant taint
logic code in hot paths. Jee et al. [19] proposed Taint
Flow Algebra to summarize the semantics of taint logic
for basic blocks. All these efforts to generate optimized
taint logic code are orthogonal and complementary to
TaintPipe.
Decoupling Dynamic Taint Analysis. A number
of researchers have considered the high performance
penalty imposed by inlined dynamic taint analysis. They
proposed various solutions to decouple taint tracking
logic from application under examination [24, 31, 26, 15,
17, 9], which are close in spirit to our proposed approach.
Speck [26] forked multiple taint analysis processes from
application execution to spare cores by means of specula-
tive execution, and utilized record/replay to synchronize
taint analysis processes. Speck required OS level support
for speculative execution and rollback. Speck’s approach
sacriﬁces processing power to achieve acceleration. Sim-
ilar to TaintPipe’s segmented symbolic taint analysis,
Ruwase et al. [31] proposed symbolic inheritance track-
ing to parallelize dynamic taint analysis. TaintPipe dif-
fers from Ruwase et al.’s approach in three ways: 1)
Their approach was built on top of a log-based archi-
tecture [10] for efﬁcient communication with idle cores,
while TaintPipe works on commodity multi-core hard-
ware directly. 2) To achieve better parallelization, they
adopted a relaxed taint propagation policy to set a bi-
nary operation as untainted, while TaintPipe performs
full-ﬂedged taint propagation so that we provide stronger
security guarantees. 3) They used a separate “master”
processor to update each segment’s taint status sequen-
tially, while TaintPipe resolves symbolic taint states be-
tween two consecutive segments. Our approach could
achieve better performance when there are more than a
few “worker” processors.
Software-only approaches [15, 17, 9] are the most re-
lated to TaintPipe. They decouple dynamic taint anal-
ysis to a shadow thread by logging the runtime values
that are needed for taint analysis. However, as we have
pointed out, these methods [15, 9] may suffer from high
overhead of frequent communication between the appli-
cation thread and shadow thread. Recent work Shad-
owReplica [17] ameliorates this drawback by adopting
ﬁne-grained ofﬂine optimizations to remove redundant
taint logic code.
In principle, it is possible to remove
redundant taint logic by means of static ofﬂine optimiza-
tions. Unfortunately, even static disassembly of stripped
binaries is still a challenge [22, 35]. Therefore, the
assumption by ShadowReplica that an accurate control
ﬂow graph can be constructed may not be feasible in cer-
tain scenarios, such as analyzing control ﬂow obfuscated
software. We take a different angle to address this issue
with lightweight runtime information logging and seg-
mented symbolic taint analysis. We demonstrate the ca-
pability of TaintPipe in speeding up obfuscated binary
analysis, which ShadowReplica may not be able to han-
dle. Furthermore, ShadowReplica does not support bit-
level and multi-tag taint analysis, while TaintPipe han-
dles them naturally.
78  24th USENIX Security Symposium 
USENIX Association
8 Conclusion
We have presented TaintPipe, a novel tool for pipelin-
ing dynamic taint analysis with segmented symbolic taint
analysis. Different from previous parallelization work on
taint analysis, TaintPipe uses a pipeline style that relies
on straight-line code with very few runtime values, en-
abling lightweight online logging and much lower run-
time overhead. We have evaluated TaintPipe on a num-
ber of benign and malicious programs. The results show
that TaintPipe rivals conventional inlined dynamic taint
analysis in precision, but with a much lower online ex-
ecution slowdown. The performance experiments indi-
cate that TaintPipe can speed up dynamic taint analysis
by 2.43 times on a set of common utilities and 2.38 times
on SPEC2006, respectively. Such experimental evidence
demonstrates that TaintPipe is both efﬁcient and effective
to be applied in real production environments.
9 Acknowledgments
We thank the Usenix Security anonymous reviewers and
Niels Provos for their valuable feedback. This research
was supported in part by the National Science Foun-
dation (NSF) grants CNS-1223710 and CCF-1320605,
and the Ofﬁce of Naval Research (ONR) grant N00014-
13-1-0175. Liu was also partially supported by ARO
W911NF-09-1-0525.
References
[1] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL,
A., KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL,
P. FlowDroid: Precise context, ﬂow, ﬁeld, object-sensitive and
lifecycle-aware taint analysis for android apps. In Proceedings of
the 35th ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI’14) (2014).
[2] BALAKRISHNAN, G., AND REPS, T. WYSINWYX: What You
See Is Not What You eXecute. ACM transactions on program-
ming languages and systems 32, 6 (2010).
[3] BOSMAN, E., SLOWINSKA, A., AND BOS, H. Minemu: The
world’s fastest taint tracker.
In Proceedings of the 14th Inter-
national Symposium on Recent Advances in Intrusion Detection
(RAID’11) (2011).
[4] BRUENING, D., GARNETT, T., AND AMARASINGHE, S. An in-
frastructure for adaptive dynamic optimization. In Proceedings
of the 2003 international symposium on code generation and op-
timization (CGO’03) (2003).
[5] BRUMLEY, D., JAGER, I., AVGERINOS, T., AND SCHWARTZ,
E. J. BAP: A binary analysis platform.
In Proceedings of
the 23rd international conference on computer aided veriﬁcation
(CAV’11) (2011).
[7] CABALLERO, J., POOSANKAM, P., MCCAMANT, S., BABI ´C,
D., AND SONG, D.
Input generation via decomposition and
re-stitching: Finding bugs in malware.
In Proceedings of the
17th ACM Conference on Computer and Communications Secu-
rity (CCS’10) (2010).
[8] CHA, S. K., AVGERINOS, T., REBERT, A., AND BRUMLEY, D.
Unleashing mayhem on binary code. In Proceedings of the 2012
IEEE Symposium on Security and Privacy (2012).
[9] CHABBI, M., PERIYANAYAGAM, S., ANDREWS, G., AND DE-
BRAY, S. Efﬁcient dynamic taint analysis using multicore ma-
chines. Tech. rep., The University of Arizona, May 2007.
[10] CHEN, S., GIBBONS, P. B., KOZUCH, M., AND MOWRY, T. C.
Log-based architectures: Using multicore to help software be-
have correctly. ACM SIGOPS Operating Systems Review 45, 1
(2011), 84–91.
[11] CHENG, W., ZHAO, Q., YU, B., AND HIROSHIGE, S. Taint-
Trace: Efﬁcient ﬂow tracing with dynamic binary rewriting. In
Proceedings of the 11th IEEE Symposium on Computers and
Communications (ISCC’06) (2006).
[12] CHRISTODORESCU, M., JHA, S., AND KRUEGEL, C. Mining
speciﬁcations of malicious behavior. In Proceedings of the 6th
Joint Meeting of the European Software Engineering Conference
and the ACM SIGSOFT Symposium on The Foundations of Soft-
ware Engineering (ESEC-FSE’07) (2007).
[13] CLAUSE, J., LI, W. P., AND ORSO, A. Dytan: A generic dy-
namic taint analysis framework. In Proceedings of the ACM SIG-
SOFT International Symposium on Software Testing and Analysis
(ISSTA 2007) (2007).
[14] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG,
J., MCDANIEL, P., AND SHETH, A. N.
TaintDroid: An
information-ﬂow tracking system for realtime privacy monitoring
on smartphones. In Proceedings of the 2010 USENIX Symposium
on Operating Systems Design and Implementation (OSDI’10),
(2010).
[15] ERMOLINSKIY, A., KATTI, S., SHENKER, S., FOWLER, L. L.,
AND MCCAULEY, M. Towards practical taint tracking. Tech.
rep., EECS Department, University of California, Berkeley, Jun
2010.
[16] GODEFROID, P. Micro execution.
In Proceedings of the 36th
International Conference on Software Engineering (ICSE’14)
(2014).
[17] JEE, K., KEMERLIS, V. P., KEROMYTIS, A. D., AND POR-
TOKALIDIS, G. ShadowReplica: Efﬁcient parallelization of dy-
namic data ﬂow tracking.
In Proceedings of the 2013 ACM
SIGSAC conference on Computer & communications security
(CCS’13) (2013).
[18] JEE, K., PORTOKALIDIS, G., KEMERLIS, V. P., GHOSH, S.,
AUGUST, D. I., AND KEROMYTIS, A. D. A general approach
for efﬁciently accelerating software-based dynamic data ﬂow
tracking on commodity hardware.
In Proceedings of the 19th
Internet Society (ISOC) Symposium on Network and Distributed
System Security (NDSS) (2012).
[19] JEE, K., PORTOKALIDIS, G., KEMERLIS, V. P., GHOSH, S.,
AUGUST, D. I., AND KEROMYTIS, A. D. A general approach
for efﬁciently accelerating software-based dynamic data ﬂow
tracking on commodity hardware.
In Proceedings of the 2012
Network and Distributed System Security Symposium (NDSS’12)
(2012).
[6] CABALLERO, J., POOSANKAM, P., KREIBICH, C., AND SONG,
D. Dispatcher: Enabling active botnet inﬁltration using automatic
protocol reverse-engineering.
In Proceedings of the 16th ACM
Conference on Computer and Communication Security (CCS’09)
(2009).
[20] KEMERLIS, V. P., PORTOKALIDIS, G.,
JEE, K., AND
libdft: Practical dynamic data ﬂow track-
KEROMYTIS, A. D.
ing for commodity systems.
In Proceedings of the 8th ACM
SIGPLAN/SIGOPS International Conference on Virtual Execu-
tion Environments (VEE’12) (2012).
USENIX Association  
24th USENIX Security Symposium  79
[21] LI, X., WANG, X., AND CHANG, W. CipherXRay: Exposing
cryptographic operations and transient secrets from monitored bi-
nary execution. IEEE Transactions on Dependable and Secure
Computing 11, 2 (2014).
[22] LINN, C., AND DEBRAY, S. Obfuscation of executable code to
improve resistance to static disassembly. In Proceedings of the
10th ACM Conference on Computer and Communications Secu-
rity (CCS’03) (2003).
[23] LUK, C.-K., COHN, R., MUTH, R., PATIL, H., KLAUSER, A.,
LOWNEY, G., WALLACE, S., REDDI, V. J., AND HAZELWOOD,
K. Pin: building customized program analysis tools with dy-
namic instrumentation.
In Proceedings of the 2005 ACM SIG-
PLAN conference on Programming language design and imple-
mentation (PLDI’05) (2005).
[24] NAGARAJAN, V., KIM, H.-S., WU, Y., AND GUPTA, R. Dy-
namic information ﬂow tracking on multicores. In Proceedings of
the 2008 Workshop on Interaction between Compilers and Com-
puter Architectures (2008).
[25] NEWSOME, J., AND SONG, D. Dynamic taint analysis for auto-
matic detection, analysis, and signature generation of exploits on
commodity software. In Proceedings of the 2005 Network and
Distributed System Security Symposium (NDSS’05) (2005).
[26] NIGHTINGALE, E. B., PEEK, D., CHEN, P. M., AND FLINN,
J. Parallelizing security checks on commodity hardware.
In
Proceedings of the 13th International Conference on Architec-
tural Support for Programming Languages and Operating Sys-
tems (ASPLOS’08) (2008).
[27] QIN, F., WANG, C., LI, Z., SEOP KIM, H., ZHOU, Y., AND
WU, Y. LIFT: A low-overhead practical information ﬂow track-
ing system for detecting security attacks. In Proceedings of the
39th Annual IEEE/ACM International Symposium on Microar-
chitecture (MICRO’06) (2006).
[28] RAWAT, S., MOUNIER, L., AND POTET, M.-L. Static taint-
analysis on binary executables.
http://stator.imag.fr/
w/images/2/21/Laurent_Mounier_2013-01-28.pdf, Oc-
tober 2011.
[29] RENIERIS, M., RAMAPRASAD, S., AND REISS, S. P. Arith-
metic program paths. In Proceedings of the 10th European soft-
ware engineering conference held jointly with 13th ACM SIG-
SOFT international symposium on Foundations of software engi-
neering (ESEC/FSE-13) (2005).
[30] RUWASE, O., CHEN, S., GIBBONS, P. B., AND MOWRY, T. C.
Decoupled lifeguards: Enabling path optimizations for online
correctness checking tools. In Proceedings of the ACM SIGPLAN
2010 Conference on Programming Language Design and Imple-
mentation (PLDI’10) (2010).
[31] RUWASE, O., GIBBONS, P. B., MOWRY, T. C., RAMACHAN-
DRAN, V., CHEN, S., KOZUCH, M., AND RYAN, M. Paralleliz-
ing dynamic information ﬂow tracking lifeguards.
In Proceed-
ings of the 20th ACM Symposium on Parallelism in Algorithms
and Architectures (SPAA’08) (2008).
[32] SCHWARTZ, E. J., AVGERINOS, T., AND BRUMLEY, D. All you
ever wanted to know about dynamic taint analysis and forward
symbolic execution (but might have been afraid to ask). In Pro-
ceedings of the 2010 IEEE Symposium on Security and Privacy
(2010).
[33] SLOWINSKA, A., STANCESCU, T., AND BOS, H. Howard: A
dynamic excavator for reverse engineering data structures.
In
Proceedings of the 2011 Network and Distributed System Secu-
rity Symposium (NDSS’11) (2011).
[34] VACHHARAJANI, N., BRIDGES, M. J., CHANG, J., RANGAN,
R., OTTONI, G., BLOME, J. A., REIS, G. A., VACHHARAJANI,
M., AND AUGUST, D. I. RIFLE: An architectural framework
for user-centric information-ﬂow security. In Proceedings of the
37th Annual IEEE/ACM International Symposium on Microar-
chitecture (MICRO’37) (2004).
[35] WANG, S., WANG, P., AND WU, D. Reassembleable disassem-
bling. In Proceedings of the 24th USENIX Security Symposium
(2015), USENIX Association.
[36] WANG, X., JHI, Y.-C., ZHU, S., AND LIU, P. STILL: Ex-
ploit code detection via static taint and initialization analyses. In
Proceedings of the 24th Annual Computer Security Applications
Conference (ACSAC’08) (2008).
[37] WHELAN, R., LEEK, T., AND KAELI, D. Architecture-
independent dynamic information ﬂow tracking. In Proceedings
of the 22nd international conference on Compiler Construction
(CC’13) (2013).
[38] WONDRACEK, G., COMPARETTI, P. M., KRUEGEL, C., AND
KIRDA, E. Automatic network protocol analysis. In Proceed-
ings of the 15th Annual Network and Distributed System Security
Symposium (NDSS’08) (2008).
[39] XU, M., MALYUGIN, V., SHELDON, J., VENKITACHALAM,
G., AND WEISSMAN, B. ReTrace: Collecting execution trace
with virtual machine deterministic replay.
In Proceedings of
the 2007 Workshop on Modeling, Benchmarking and Simulation
(2007).
[40] XU, W., BHATKAR, S., AND SEKAR, R. Taint-enhanced pol-
icy enforcement: A practical approach to defeat a wide range of
attacks. In Proceedings of the 15th Conference on USENIX Secu-
rity Symposium (USENIX’06) (2006).
[41] YADEGARI, B., AND DEBRAY, S. Bit-level taint analysis.
In
Proceedings of the 14th IEEE International Working Conference
on Source Code Analysis and Manipulation (2014).
[42] YADEGARI, B., JOHANNESMEYER, B., WHITELY, B., AND
DEBRAY, S. A generic approach to automatic deobfuscation of
executable code. In Proceedings of the 36th IEEE Symposium on
Security and Privacy (2015).
[43] YIN, H., AMD M. EGELE, D. S., KRUEGEL, C., AND KIRDA,
E. Panorama: Capturing system-wide information ﬂow for mal-
ware detection and analysis. In ACM Conference on Computer
and Communications Security (CCS’07) (2007).
[44] YIN, H., AND SONG, D.
TEMU: Binary code analysis
via whole-system layered annotative execution.
Tech. Rep.
UCB/EECS-2010-3, EECS Department, University of California,
Berkeley, Jan 2010.
[45] YIP, A., WANG, X., ZELDOVICH, N., AND KAASHOEK, M. F.
Improving application security with data ﬂow assertions. In Pro-
ceedings of the ACM SIGOPS 22nd symposium on Operating sys-
tems principles (2009), ACM, pp. 291–304.
[46] ZHAO, Q., CUTCUTACHE, I., AND WONG, W.-F.
PiPA:
Pipelined proﬁling and analysis on multi-core systems. In Pro-
ceedings of the 2008 International Symposium on Code Genera-
tion and Optimization (CGO’08) (2009).
[47] ZHAO, Q., SIM, J. E., RUDOLPH, L., AND WONG, W.-F. DEP:
Detailed execution proﬁle.
In Proceedings of the 15th Inter-
national Conference on Parallel Architectures and Compilation
Techniques (PACT’06) (2006).
[48] ZHAO, R., GU, D., LI, J., AND ZHANG, Y. Automatic detection
and analysis of encrypted messages in malware. In Proceedings
of the 9th China International Conference on Information Secu-
rity and Cryptology (INSCRYPT’13) (2013).
[49] ZHU, D. Y., JUNG, J., SONG, D., KOHNO, T., AND WETHER-
ALL, D. TaintEraser: Protecting sensitive data leaks using
application-level taint tracking. ACM SIGOPS Operating Sys-
tems Review 45 (January 2011), 142–154.
80  24th USENIX Security Symposium 
USENIX Association