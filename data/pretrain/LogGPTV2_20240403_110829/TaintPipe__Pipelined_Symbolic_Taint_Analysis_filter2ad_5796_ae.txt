### Symbolic Memory Index and Future Enhancements

TaintPipe currently recovers straight-line code by logging the entry address of basic blocks. However, this method may fail to uniquely identify a code block in the presence of malicious self-modifying code. To address this, we propose augmenting TaintPipe to log the actual executed instructions, although this will introduce additional runtime performance overhead.

Our primary goal is to demonstrate the feasibility of pipelined symbolic taint analysis. While our current prototype has not been fully optimized for performance, we believe there is significant room for improvement. The taint analysis engine simulates the semantics of taint operations, which can be slow. One potential future direction is to natively execute concrete taint analysis, similar to micro-execution [16], and switch to an interpretation-style approach when performing symbolic taint analysis.

Currently, TaintPipe requires a large shared memory to minimize communication overhead between different pipeline stages. This makes our approach more suitable for large servers with ample memory resources.

### Related Work

#### Static and Dynamic Taint Analysis

Static taint analysis (STA) is performed before execution and considers all possible execution paths, thus not affecting application runtime performance. STA has been applied to various security tasks, such as data lifetime analysis for Android applications [1], exploit code detection [36], and binary vulnerability testing [28].

Dynamic taint analysis (DTA), on the other hand, is more precise as it only propagates taint along the actual execution path. DTA has been widely used in security applications, including data flow policy enforcement [25, 40, 27], protocol data structure reversal [33, 38, 6], malware analysis [39], and Android security [14]. However, DTA suffers from significant performance slowdowns. Schwartz et al. [32] formally defined the operational semantics for DTA and forward symbolic execution (FSE). Our approach combines these techniques: the worker thread performs concrete taint analysis (like DTA) when explicit taint information is available; otherwise, it performs symbolic taint analysis (like STA and FSE).

#### Taint Logic Optimization

Taint logic code, which determines whether and how to propagate taint, often incurs substantial overhead due to additional instructions and context switches. Minemu [3] achieved decent runtime performance by sacrificing memory space to speed up shadow memory access and using spare SSE registers to reduce general register spilling, but it only works on 32-bit programs. TaintEraser [49] developed function summaries for Windows programs to propagate taint at the function level. Libdft [20] introduced guidelines to facilitate dynamic binary instrumentation (DBI) code inlining, such as avoiding branches in tag propagation code and updating shadow memory with a single assignment. Ruwase et al. [30] applied compiler optimization techniques to eliminate redundant taint logic code in hot paths. Jee et al. [19] proposed Taint Flow Algebra to summarize the semantics of taint logic for basic blocks. These efforts to generate optimized taint logic code are complementary to TaintPipe.

#### Decoupling Dynamic Taint Analysis

Several researchers have addressed the high performance penalty of inlined dynamic taint analysis by proposing methods to decouple taint tracking logic from the application under examination [24, 31, 26, 15, 17, 9]. Speck [26] forked multiple taint analysis processes to spare cores using speculative execution and record/replay for synchronization, requiring OS-level support for speculative execution and rollback. TaintPipe differs from Speck in that it operates directly on commodity multi-core hardware, performs full-fledged taint propagation, and resolves symbolic taint states between consecutive segments, potentially achieving better performance with more worker processors.

Software-only approaches [15, 17, 9] are closely related to TaintPipe. They decouple dynamic taint analysis to a shadow thread by logging runtime values needed for taint analysis. However, these methods may suffer from high overhead due to frequent communication between the application and shadow threads. ShadowReplica [17] mitigates this issue through fine-grained offline optimizations to remove redundant taint logic code. Despite this, static disassembly of stripped binaries remains challenging [22, 35], making the assumption of an accurate control flow graph infeasible in certain scenarios, such as analyzing obfuscated software. TaintPipe addresses this by using lightweight runtime information logging and segmented symbolic taint analysis, demonstrating its capability in speeding up obfuscated binary analysis, which ShadowReplica may not handle. Additionally, TaintPipe naturally supports bit-level and multi-tag taint analysis, unlike ShadowReplica.

### Conclusion

We have presented TaintPipe, a novel tool for pipelining dynamic taint analysis with segmented symbolic taint analysis. Unlike previous parallelization work, TaintPipe uses a pipeline style that relies on straight-line code with minimal runtime values, enabling lightweight online logging and lower runtime overhead. We evaluated TaintPipe on several benign and malicious programs, showing that it rivals conventional inlined dynamic taint analysis in precision but with significantly lower online execution slowdown. Performance experiments indicate that TaintPipe can speed up dynamic taint analysis by 2.43 times on common utilities and 2.38 times on SPEC2006, respectively. This evidence demonstrates that TaintPipe is both efficient and effective for real production environments.

### Acknowledgments

We thank the Usenix Security anonymous reviewers and Niels Provos for their valuable feedback. This research was supported in part by the National Science Foundation (NSF) grants CNS-1223710 and CCF-1320605, and the Office of Naval Research (ONR) grant N00014-13-1-0175. Liu was also partially supported by ARO W911NF-09-1-0525.

### References

[References listed as in the original text]

---

This version of the text is more structured, clear, and professional, with improved coherence and readability.