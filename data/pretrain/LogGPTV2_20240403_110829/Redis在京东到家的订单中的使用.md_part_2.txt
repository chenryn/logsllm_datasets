1 3 Long oldTimeLong = Long.valueOf(oldTimeStr);
1 4 // 当前的时间戳
1 5 Long currentTimeLong = System.currentTimeMillis();
1 6 // (2)如果oldTimeLong小于当前时间了，说明之前持有锁的线程执行时间大于5秒了，就强制忽略该线程所持有的锁，重新设置自己的锁
1 7 if (oldTimeLong 读缓存数据–>判断当前订单状态是否允许变更为别的状态–>更新缓
存中的订单状态–>释放锁。
缓存防穿透和雪崩
缓存为我们挡住了80-90%甚至更多的流量，然而当缓存中的大量热点数据恰巧在差不多的时间过期时，或者当有人恶意伪造一些缓存中
根本没有的数据疯狂刷接口时，就会有大量的请求直接穿透缓存访问到数据库（因为查询数据策略是缓存没有命中，就查数据库），给数
据库造成巨大压力，甚至使数据库崩溃，这肯定是我们系统不允许出现的情况。我们需要针对这种情况进行处理。下图是处理流程图：
代码示例：
/1/ 代码段1
/2/ 锁的数量 锁的数量越少 每个用户对锁的竞争就越激烈，直接打到数据库的流量就越少，对数据库的保护就越好，如果太小，又会影响系统吞吐量，可根据实际情况调整锁的个数
p3u blic static final String[] LOCKS = new String[128];
/4/ 在静态块中将128个锁先初始化出来
s5t atic {
6 for (int i = 0; i  getOrderVOList(String userId) {
1 3 List list = null;
1 4 // 1.先判断缓存中是否有这个用户的数据，有就直接从缓存中查询并返回
1 5 if (orderRedisCache.isOrderListExist(userId)) {
1 6 return getOrderListFromCache(userId);
1 7 }
1 8 // 2.缓存中没有，就先上锁，锁的粒度是根据用户Id的hashcode和127取模
1 9 String[] locks = OrderRedisKey.LOCKS;
2 0 int index = userId.hashCode() & (locks.length - 1);
2 1 try {
2 2 // 3.此处加锁很有必要，加锁会保证获取同一个用户数据的所有线程中，只有一个线程可以访问数据库，从而起到减小数据库压力的作用
2 3 orderRedisCache.lock(locks[index]);
2 4 // 4.上锁之后再判断缓存是否存在，为了防止再获得锁之前，已经有别的线程将数据加载到缓存，就不允许再查询数据库了。
2 5 if (orderRedisCache.isOrderListExist(userId)) {
2 6 return getOrderListFromCache(userId);
2 7 }
2 8 // 查询数据库
2 9 list = getOrderListFromDb(userId);
3 0 // 如果数据库没有查询出来数据，则在缓存中放入NULL，标识这个用户真的没有数据，等有新订单入库时，会删掉此标识，并放入订单数据
3 1 if(list == null || list.size() == 0) {
3 2 jdCacheCloud.zAdd(OrderRedisKey.getListKey(userId), 0, null);
3 3 } else {
3 4 jdCacheCloud.zAdd(OrderRedisKey.getListKey(userId), list);
3 5 }
3 6 return list;
3 7 } finally {
3 8 orderRedisCache.unlock(locks[index]);
3 9 }
4}0
防止穿透和雪崩的关键地方在于使用分布式锁和锁的粒度控制。首先初始化了128（0-127）个锁，然后让所有缓存没命中的用户去竞争这128个
锁，得到锁后并且再一次判断缓存中依然没有数据的，才有权利去查询数据库。没有将锁粒度限制到用户级别，是因为如果粒度太小的话，某一
个时间点有太多的用户去请求，同样会有很多的请求打到数据库。比如：
在时间点T1有10000个用户的缓存数据失效了，恰恰他们又在时间点T1都请求数据，如果锁粒度是用户级别，那么这10000个用户都会有各自的
锁，也就意味着他们都可以去访问数据库，同样会对数据库造成巨大压力。而如果是通过用户id去hashcode和127取模，意味着最多会产生128个
锁，最多会有128个并发请求访问到数据库，其他的请求会由于没有竞争到锁而阻塞，待第一批获取到锁的线程释放锁之后，剩下的请求再进行
竞争锁，但此次竞争到锁的线程，在执行代码段2中第4步时：orderRedisCache.isOrderListExist(userId)，缓存中有可能已经有数据了，就不用
再查数据库了，依次类推，从而可以挡住很多数据库请求，起到很好的保护数据库的作用。
总结
1. 缓存中存放了用户的部分订单，且是以下单时间+订单号最后三位算出分数（这样做是为因为下单时间只精确到秒，为了防止同一秒下多个
订单导致排序分数相同），进行排序的有序集合。
2. 数据库更新成功，缓存更新失败，这样导致数据不一致，可以通过更新缓存失败后发mq的策略进行缓存更新尝试，比定时任务更高效，更
及时。
3. Redis分布式锁实现，2.6版本前，通过setNx和getSet两个命令实现，2.6版本之后，Redis提供了SET key value [EX seconds] [NX]这个
命令可以实现。
4. 防穿透和雪崩依赖了分布式锁，值得注意的是锁粒度不能细到用户级别，可以根据数据库性能和业务要求，算出合适的锁的数量，让所有
未命中缓存的用户通过hashCode和锁数量取模，去竞争锁，得到锁的才获得查库权利。
#Redis
 JVM安全退出