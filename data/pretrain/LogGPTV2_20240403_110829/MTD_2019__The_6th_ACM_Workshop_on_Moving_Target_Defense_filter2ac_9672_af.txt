m
u
N
2
1
0
3
4
2
2
0
0
0
0
0
0
Web-related
Worm
Buffer-overﬂow Reconnaissance
DoS
5
5
0
APT
0
0
1
0
Side-channel
Fig. 5. Different Attacks considered by shufﬂing, diversity, or redundancy-based MTD approaches.
attacks include the use of hidden proxies, IP/port shufﬂing
and/or address mapping [13, 34, 51, 61, 82, 83, 88, 93, 142,
145, 158, 105]. For example, Meier et al. [105] proposed
a novel network obfuscation approach and implemented a
framework named ‘NetHide’ which can successfully battle
against the possible attacks such as Link-Flooding Attacks
(LFAs) launched by even advanced attackers. The MTD
strategy behind the NetHide is to change and modify path
tracing probes in the data plan. They showed that NetHide
can hold a trade-off between security (i.e., creating dif-
ﬁculties for attackers) and usability (e.g., high accuracy
and low network functionality degradation). Their results
showed that NetHide can mitigate the probability of attack
success by 1% while it provides 90% and 72% accuracy
and utility, respectively. Moreover, MOTAG [83] mitigates
the ﬂooding DDoS attacks using hidden proxies as moving
targets to secure service access for authenticated clients.
• Buffer overﬂow attacks: This kind of attack usually hap-
pens due to a lack of buffer boundary checking. Common
memory protection techniques, such as Address Space-
Layout Randomization (ASLR) [135], and Address Space
Layout Permutation (ASLP) [89], are proposed to thwart
the buffer overﬂow attack. These techniques randomize the
memory position of data and program segment,
library,
and so forth. Manadhata [103] and Manadhata and Wing
[102] also considered a buffer overﬂow, leveraging the attack
surface of a defense system and proposed a countermeasure
against it by reducing or shifting the attack surface in terms
of the system’s methods, channels, and/or data items.
• Worm attacks: A worm is a malicious software (malware)
that replicates itself and employs a network to spread itself
to other machines by relying on existing bugs or holes
in the target system. The worms cause damages, such as
consuming bandwidth or turning a worm-infected computer
into a botnet that can be used by the worm’s programmer
to proﬁt by sending spam or conducting DDoS attacks. A
countermeasure against worm attacks is Network Address
Space Randomization (NASR) [3, 10, 80] that randomizes
the host IP address (i.e., IP shufﬂing).
• APT attacks: APT attacks are well known as one of
the sophisticated attack types aiming to access system
resources, control
them, and perform exﬁltration attacks
(e.g., leaking sensitive or conﬁdential information out to
unauthorized parties) by performing stealthy, persistent, and
adaptive attacks [1, 9, 24, 25, 30, 49]. The behaviors of
APT attackers can be observed in the cyber kill chain,
which is described in Section V-B. APT attacks are also
called ‘multi-stage attacks’ that refer to attackers performing
multiple attacks across multiple stages. For example, the
attacks range from network scanning and packet snifﬁng
to illegitimate authentication and service interruption (e.g.,
Stuxnet virus) [20, 43, 46, 125, 168].
• Side channel attacks on VMs: Attackers perform attacks
over side channels based on the shared CPU cache of a VM
in order to obtain sensitive information [165].
• Attacks on Web applications: Diverse types of attacks can
be performed on web applications, such as SQL injection,
directory traversal, and cross site scripting which breach the
key security goals that are conﬁdentiality, integrity, and/or
availability. These types of attacks can be countermeasured
by software stack diversity and/or redundancy [109, 132,
159].
We summarized the main attack types considered in existing
MTD approaches with 36 papers published for 2010-2018 in
Fig. 5. Note that more than one technique or attack can be
considered in each work. The three major attacks the existing
MTD techniques have mainly addressed are reconnaissance
attacks, DoS attacks, and APT attacks. In addition, most
proposed approaches are shufﬂing-based MTD while diversity-
based MTD techniques are often combined with the shufﬂing-
based techniques. But redundancy-based techniques are rarely
discussed to deal with the attack behaviors addressed above
because the redundancy-based approaches have been studied in
the dependability domain (e.g., reliability, availability) rather
than for the purpose of MTD and often used in combi-
nation with either shufﬂing-based or diversity-based MTD
techniques.
D. Limitations of the Current Attack Models
From the survey of attack types considered by existing MTD
approaches, we can identify the following limitations in the
current attack models:
KEY MODELING AND SOLUTION TECHNIQUES OF MTD AND THEIR PROS AND CONS.
TABLE V
Approach
Game Theoretic
(GT) MTD
Genetic
Algorithm
(GA)-based
MTD
Machine Learning
(ML)-based MTD
Technique
General Game
Theoretic Approach
Bayesian Stackelberg
Game
Stochastic Game
General GA
General ML
Classiﬁcation-based
Reinforcement learning
Pros
Capability to effectively model
interactions between players;
identifying optimal solution under
complex interactions between
multiple parties
Fast method to ﬁnd good solutions;
providing good understanding of
how good a given solution is
based on a ﬁtness function;
Cons
Issues associated with players’
bounded rationality (or irrationality)
and/or misperception; high solution
complexity;
Scalability problem in a large
number of generators; it may not
ﬁnd the optimal solution;
uncertainty to ﬁnd ﬁtness
Capturing an evolving attacker;
high scalability and applicability
Needing a large amount of data for
training and modeling
15
[24, 25, 36, 51, 83, 109,
[34, 49, 117, 118, 132,
Ref.
158, 168]
165, 169]
[103, 137]
[38, 40, 84, 172]
[154]
[35, 36]
[149, 167]
• Smart, intelligent attackers are signiﬁcantly less con-
sidered. Most MTD techniques are shufﬂing-based to deal
with attacks. If attackers are intelligent such that they are
able to detect defense patterns by using learning mechanisms
(e.g., machine learning or cognitive learning), then they can
easily capture what types of MTD techniques are used and
what the patterns are to trigger an MTD operation. However,
highly intelligent, learning attackers are not really consid-
ered. Generally, it is assumed that attackers have certain
attack patterns, rather than that they learn and can launch
adaptive attacks. Whereas the contrary is true for defenders;
they are often permitted to take proactive, adaptive defense
actions based on an assumed highly intelligent learning ca-
pability. This assumption may not be true; even the attackers
are often smarter than the defenders in practice [75].
• Few scenarios are considered to deal with multiple
strategies by attackers and defenders. A speciﬁc attack
type can be easily mitigated or prevented by a particular
MTD technique. However, if an attacker identiﬁes an exploit
that is not covered by the deployed MTD technique, the
attacker can even use the exploit and successfully launch
its attack to penetrate into the system. Unfortunately, most
MTD approaches focus on a single or a small set of attacks,
and few scenarios have considered multiple strategies that
can be taken by attackers or defenders. For example, the
attacker may need to decide which system vulnerability it
needs to target while the defender may want to determine
which defense mechanism needs to be used, where both par-
ties aim to choose a cost-effective decision under resource-
constrained, time-sensitive settings.
• An attacker has been less considered as a rational
decision maker with learning ability. The smart attackers
can leverage how MTD works and what side-effect the MTD
can introduce. In addition, they can capture the defense
patterns for an adaptive MTD which aims to realize a cost-
effective MTD. However, attackers with learning capability
and their mental models have been rarely studied while high
intelligence with the defender and corresponding intelligent
MTD (e.g., machine learning-based MTD) is easily assumed
and has been proposed [36, 149, 154, 167].
VI. MODELING AND SOLUTION TECHNIQUES OF MTD
MTD techniques have been proposed by using various types
of modeling and solution techniques. In this work, we discuss
key modeling and solution techniques of MTD based on the
following theoretical approaches: (1) game theory; (2) genetic
algorithms; and (3) machine learning.
A. Game Theory-based MTD
The fundamental mechanism behind MTD techniques is to
add another layer of defense by manipulating the attack surface
that aims to increase the level of protection provided to a
system while incurring additional cost (i.e., reconﬁguration
cost) and causing potential service unavailability to normal
users. In this context, the clear concepts of gain and loss make
the use of game theoretic approaches highly relevant to design
and analyze cyberdefense as a game between an attacker and
defender. Game theory can appropriately model decisions and
actions by the defender and attacker, where they are assumed
rational and aim to seek optimal strategies to maximize their
utilities. Hence, in terms of the defender’s perspective, the key
goal of an MTD strategy is to identify a set of optimal system
conﬁguration policies in order to shift the attack surface, which
can minimize risk and/or damage introduced by an action
by the attacker [168]. On the other hand, the attacker aims
to successfully launch its attack with minimum effort / time
and maximum effectiveness in achieving its objectives. Hence,
a two-player game well models the competition scenario
between the attacker and the MTD-based defender.
In this section, we discuss common game theoretic ap-
proaches used to develop MTD techniques, including a general
game theoretic approach (i.e., not based on a speciﬁc game),
a Bayesian Stackelberg Game, and a stochastic game. In
addition, we discuss the cons and pros when game theory
inspires the development of MTD techniques.
1) General Game Theoretic Approaches: Many MTD tech-
niques have been developed using a general game framework
where an attacker and defender are assumed to be rational
and aim to maximize their respective utility. Although no
speciﬁc game theory is mentioned, if authors say they take a
game theoretic approach for their MTD by using the concept
of payoff (or utility) based on estimated gain and loss in
choosing the best strategy, in response to an action taken by
its respective opponent, we categorized it as a game theoretic
MTD approach.
Zhu and Bas¸ar [168] investigated a tradeoff between security
and usability based on the security enhanced by the MTD
and the performance degraded by the MTD, such as service
unavailability or system reconﬁguration cost. The authors
modeled a game between an attacker and defender where
the defender aims to minimize risk and maintain service
availability while the attacker dynamically exploits vulnera-
bilities of system components with the goal of introducing a
maximum damage on the system. The defender performs MTD
by continuously changing their defensive strategies based
on dynamically learned information in a highly uncertain
environment. Ge et al. [51] provided an incentive-compatible
MTD technique based on server location migrations and a
user-server mapping mechanism to enhance resilience and
agility of a system along with high network timeliness and
throughput. Carter et al. [24, 25] used a game theory to
derive an optimal migration strategy. Those works analyzed
temporal platform migration patterns and identiﬁed an optimal
strategy for selecting the next platform. This demonstrates the
following: (1) although platform diversity is effective against
some persistent attacks, it may have a negative impact on
the ability to defend against fast and local attacks [24]; (2)
increasing diversity in platform selection is more effective
than randomization; and (3) ensuring high diversity between
available platforms has a stronger impact on security than
having a large number of available platforms.
In contrast, Colbaugh and Glass [36] found that uniform
randomization is an optimal strategy for diversity-based MTD.
The differences between optimal strategies can be explained
by the attack model each study used and more speciﬁcally
whether the attacker’s goal required a persistent foothold in
the system. Neti et al. [109] used an anti-coordination game
to capture the interplay of choice, diversity, and scalability of
risk in software-deﬁned networking (SDN)-based MTD. This
study evaluated a scenario where one node in a network is
compromised while the rest of the nodes use a game theoretic
approach to decide whether to switch or not per distinct
platform. Jia et al. [83] proposed an approach to counteract
DDoS attacks where the approach uses a pool of redundant
proxies between the clients and the web application. To evalu-
ate this concept, Wright et al. [158] conducted a game theoretic
analysis where two players try to inﬂuence the quality of
service experienced by users of a web application, at a minimal
cost. Their investigation demonstrated how the effectiveness
of mitigating DDoS strategies changes depending on various
conditions (e.g., migration cost, a number of attacker bots,
and/or information provided by an insider).
2) Bayesian Stackelberg Game: Bayesian Stackelberg
games [117, 118] have been used in modeling an attack-
defense game to solve various cybersecurity problems. In
a Stackelberg game, there are two players, a leader and a
follower where the leader takes an action ﬁrst and then the
follower takes its action by investigating the impact of the
leader’s action to its payoff. Hence,
the follower aims to
optimize the payoff of its action based on the leader’s action.
Hence, in this context, what action to take by the leader is
16
critical to leading the follower’s action. The Stackelberg game
has been popularly used in modeling interactions between an
attacker and defender in a system with MTD techniques as
explained below.
Hasan and Rahman [64] proposed a game theoretic model
using Nash equilibrium named Co-resident Attacks Mitiga-
tion and Prevention (CAMP) to detect co-resident attack
and mitigate the malicious VM co-location in a co-resident
environment. Through simulation, they showed that their game
model can provide optimal defensive strategies for the VM
which can effectively fail the co-resident attack. Feng et al.
[49] investigated how the strategies of information disclosure