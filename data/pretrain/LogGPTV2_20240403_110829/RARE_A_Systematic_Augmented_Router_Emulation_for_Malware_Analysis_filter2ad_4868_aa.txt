title:RARE: A Systematic Augmented Router Emulation for Malware Analysis
author:Ahmad Darki and
Chun-Yu Chuang and
Michalis Faloutsos and
Zhiyun Qian and
Heng Yin
RARE: A Systematic Augmented Router
Emulation for Malware Analysis
Ahmad Darki(B), Chun-Yu Chuang(B), Michalis Faloutsos(B),
Zhiyun Qian(B), and Heng Yin(B)
{adark001,cchua010}@ucr.edu, {michalis,zhiyunq,heng}@cs.ucr.edu
University of California, Riverside, CA, USA
Abstract. How can we analyze and proﬁle the behavior of a router
malware? This is the motivating question behind our work focusing on
router. Router-speciﬁc malware has emerged as a new vector for hackers,
but has received relatively little attention compared to malware on other
devices. A key challenge in analyzing router malware is getting it to acti-
vate, which is hampered by the diversity of ﬁrmware of various vendors
and a plethora of diﬀerent platforms. We propose, RARE, a systematic
approach to analyze router malware and proﬁle its behavior focusing on
home-oﬃce routers. The key novelty is the intelligent augmented opera-
tion of our emulation that manages to fool malware binaries to activate
irrespective of their target platform. This is achieved by leveraging two
key capabilities: (a) a static level analysis that informs the dynamic exe-
cution, and (b) an iterative feedback loop across a series of dynamic exe-
cutions, whose output informs the subsequent executions. From a prac-
tical point of view, RARE has the ability to: (a) instantiate an emulated
router with or without malware, (b) replay arbitrary network traﬃc, (c)
monitor and interact with the malware in a semi-automated way. We
evaluate our approach using 221 router-speciﬁc malware binaries. First,
we show that our method works: we get 94% of the binaries to acti-
vate, including obfuscated ones, which is a nine-fold increase compared
to the 10% success ratio of the baseline method. Second, we show that
our method can extract useful information towards understanding and
proﬁling the botnet behavior: (a) we identify 203 unique IP addresses
of C&C servers, and (b) we observe an initial spike and an overall 50%
increase in the number of system calls on infected routers.
1 Introduction
Compromising routers is emerging as a new type of threat with potentially dev-
astating eﬀects [24]. For example, on October 2016, in Mirai botnet attack there
has been a series of DDoS attacks on Dyn, Inc. servers using IoT devices includ-
ing routers [2]. The lack of mature protection technologies makes this a fertile
ground for attacks. We argue that a compromised router provides signiﬁcant
new capabilities to an attacker, beyond those of a compromised end-device. By
compromising a router, the attacker can: (a) access or block the network packets
c(cid:2) Springer International Publishing AG, part of Springer Nature 2018
R. Beverly et al. (Eds.): PAM 2018, LNCS 10771, pp. 60–72, 2018.
https://doi.org/10.1007/978-3-319-76481-8_5
RARE: A Systematic Augmented Router Emulation for Malware Analysis
61
going through it, (b) steal cookies and session IDs [25] to impersonate the user or
compromise her privacy, and (c) hijack and redirect communication via a DNS
redirection to rogue DNS server.
Attacking and protecting routers is signiﬁcantly diﬀerent compared to laptops
and desktops, therefore new methods and tools are needed. First, routers have
limited resources in terms of CPU, and memory. Therefore, malware developers
have less resources in their disposition. However, the same challenges apply to the
security solutions as well. Second, routers have variable device conﬁgurations [16]
that decreases the applicability of both malware, and system analysis tools. The
former is a challenge for malware authors, while the latter is a challenge for any
emulation capability, which needs to pretend to be many diﬀerent conﬁgurations
in order to get ﬁrmware and malware to run. Finally, many, if not most, router
ﬁrmware are proprietary, and thus diﬃcult to emulate [6].
Our goal in this paper is to fully understand router malware binaries and
their operation focusing on oﬀ-the-self home-oﬃce routers. The desired output
of this work is two-fold. First, we want to analyze the malware in order to create
an environment that will “fool” it to activate and reveal its behavior. Second, we
want to proﬁle and distinguish the behavior of an infected router from that of
a benign one. The overarching challenge is the plethora of proprietary ﬁrmware
and hardware router conﬁgurations, as we mentioned above. In addition, there
is a scarcity of tools for static analysis for MIPS and ARM architectures, which
are the most common platforms for routers. Such tools could have helped inform
the emulation environment. As we will see below, a straightforward emulation
attempt could have a very low success rate in fooling the malware to activate.
Fig. 1. RARE gets the router malware to activate and communicate with the C&C
server in the 3rd run of its iterative operation. We plot the number of system calls for
each 1300 s of a run. The baseline approach is shown ﬁrst. The 1st run of RARE is
an emulation informed by the static analysis only. Each subsequent run is informed by
the previous run.
62
A. Darki et al.
Router malware has received relatively little attention compared to malware
on other devices. We can distinguish the following areas of research: (a) devel-
oping emulator capabilities [4,13,17,27], (b) vulnerability analysis for embedded
devices, [6,10,11,14], and (c) malware analysis focusing on PC and smartphone
based malware [9,20–22]. We discuss related work in Sect. 4.
We propose, RARE (Riverside’s Augmented Router Emulator), a systematic
approach to analyze router malware and understand its behavior in depth. The
key novelty is the augmented operation of our approach, which fools malware
binaries to activate irrespective of their preferred target platform. In other words,
instead of trying to guess the right router platform for each malware, we start
with a generic one and we carefully and iteratively “adapt” it to fool the malware.
This is achieved by leveraging two key capabilities: (a) a static level analysis that
informs the dynamic execution, and (b) an iterative feedback loop across a series
of dynamic runs, the output of which informs the subsequent run. We provide
an overview of our approach in Fig. 2.
From a practical point of view, RARE has the ability to run the malware
on an emulated router and consists of the following modules, whose goal is to:
(a) extract information for malware execution by analyzing the binary statically,
(b) create an emulated router enhanced with the appropriate conﬁgurations that
a malware needs for its execution, (c) inject malware into the router and fool it
to activate, (d) replay pre-recorded network traﬃc with crafted C&C responses
to malware requests, (e) enhance the emulation using information derived from
the previous runs. This process works in an iterative fashion to enhance the
emulation using information from previous runs in order to have the malware to
activate itself.
We evaluate our approach using 221 router-speciﬁc malware binaries from a
community-based project, which requested to be anonymous. Our results can be
summarized in the following points.
a. Achieving 94% malware activation success ratio, and 88.8% for
obfuscated malware. We show that our system is successful in fooling malware
to activate, as 94% of our binaries become active. We say that a malware binary
activates, when the malware attempts to communicate with the C&C server.
By contrast, an emulation without any of our augmented functions, which we
refer to as baseline, can activate only 10% of the binaries. Furthermore, our
approach manages to activate 88.8% of our obfuscated binaries, which are the
types of binaries that are especially crafted to outplay static analysis techniques.
We show the iterative operation of our approach in Fig. 1, where we plot the
number of system calls for each run. Note that the malware is activated within
a sandboxed environment and thus does not pose any threat to real devices.
b. Extracting useful information: IP addresses, and domains. Having this
powerful capability, we are able to extract useful information for the malware.
We ﬁnd 203 malicious IP addresses and domains, and we naturally consider
these addresses to be malicious, since they are or have been used for botnet com-
munications. Note that using just static analysis, we ﬁnd less than 25% of these
C&C communication addresses and domain names.
RARE: A Systematic Augmented Router Emulation for Malware Analysis
63
c. Developing infected router proﬁles. We identify features for detecting
infected routers. Speciﬁcally, we observe an initial spike and a 50% increase in
the number of system calls in infected routers. We also observe an initial large
spike and a subsequent slight increase in the number of active processes.
Our emulation capability is a powerful building block towards understanding
router malware. As a preview of the capabilities provided by RARE, we discuss
how we assumed the botmaster role for two malware binaries at the end of
Sect. 3. Finally, we intend to make our tool, the malware binaries, and the data
traces available upon request to researchers.
2 System Design and Implementation
We present an overview and highlight the novel capabilities of our approach.
Philosophy. We adopt the following approach: we start with a general purpose
platform and learn what the malware needs to activate through a sequence of
executions.
A visual depiction of RARE is shown in Fig. 2. The key capabilities of the sys-
tem are listed below: (a) it can perform static analysis on the malware to extract
information for its execution, (b) it can instantiate an emulated router with hints
on what conﬁgurations the malware wants to “see”, (c) it can replay arbitrary
network traﬃc and response to malware requests, and (d) it can monitor the
malware and provide information to subsequent runs of the same malware. If
the malware fails to activate, we repeat the process, and the last step provides
information that guides the new execution.
Deﬁning success: malware activation. We set as our goal for the emulation
the activation of malware: we want the malware to feel “comfortable” within the
emulator, so as to attempt to contact its bot-master. After reaching this point,
Fig. 2. Overview of the key components of our approach. A key novelty is the feedback
loop that enables previous runs of the malware to inform the subsequent run in order
to fool the malware to activate.
64
A. Darki et al.
we enter a new stage: if the C&C server responds, the malware will enter a stand
by mode waiting for C&C commands. We deﬁne this stage as “activated” stage
of the malware. A subsequent goal is to turn one’s self into the bot-master, by
reverse engineering the communication protocol with the bot, which we achieve
for some of our binaries (see the discussion in Sect. 3).
We present the key functionality, novelty and challenges of each module.
a. Static Analysis Module. The ﬁrst step is to analyze a given malware binary
statically to extract as much information as possible. The purpose is dual: (a)
we want to inform the dynamic execution, and (b) we want to understand as
much about the malware, which could have independent interest. Speciﬁcally,
this module provides the following information to the dynamic execution: (a)
IP addresses and domains that malware will possibly contact, and (b) ﬁles and
resources that the malware will attempt to access. This information is collected
by the Intelligent Execution module and is provided to the Emulation Engine
module. In more detail, we currently use IDA-Pro [18] for the static analysis,
but one could envision using other tools with similar capabilities. In addition,
we developed an initial capability to extract the high level structure of the code
by lifting the binaries to Intermediate Representation [26], which could provide
data dependencies. The IDA-Pro tool is an excellent foundation, but so some
of the desired functionality was missing. Therefore, we developed several non-
trivial plug-ins, speciﬁcally for MIPS and ARM architectures, such as extensions
to extract communication tokens, and control ﬂow information which are the
main components that assists this module. Naturally, we will make our plugins
available to the community.
b. Emulation Engine Module. This module provides the basic capabilities