### Optimized Text

#### Dynamic Allocation and Metadata Propagation
In the given code, the field `f->bar` is aliased to the pointer `*p`. This aliasing necessitates metadata table accesses for propagation, as the pointer is embedded within a struct. Execution then continues in the `testMetadataTable` function. The assignment of a numerical value to the array member of the struct `foo_t bla` at line 14 is translated by Clang into a sequence of `GetElementPtr` statements. When required, these instructions are instrumented with dynamic runtime checks and metadata table lookups.

#### Code Example
```c
typedef struct foo {
    int a;
    int *bar;
} foo_t;

foo_t myfoo;

foo_t *testMT_aux(int *p) {
    foo_t *f = &myfoo;
    f->bar = p;
    return f;
}

void testMetadataTable(int *p) {
    foo_t *f = testMT_aux(p);
    (f->bar)[2] = 13;
}

void assignLoop(int *p) {
    int i;
    for (i = 0; i < 4; i++) {
        *(p + i) = i;
    }
}

void testDynamicAliasing(int n) {
    int *p;
    int a[4];
    int b[12];
    if (n < 1) {
        p = a;
    } else {
        p = b;
    }
    assignLoop(&(p[1]));
}

int main() {
    int *arr = malloc(5 * sizeof(int));
    testMetadataTable(arr);
    testDynamicAliasing(0);
}
```
**Figure 4: Representative example for the stress-intensive microbenchmark.**

This example demonstrates common dynamic aliasing scenarios. Initially, it is instrumented with explicit metadata variables, as described in Section 4.1.2. The `assignLoop` function attempts to assign numeric values to the first four elements of the array, potentially causing an out-of-bounds memory violation. However, a dynamically injected runtime check at line 19 will detect the out-of-bounds access to the fourth element and divert execution to a trap function.

### Implementation
The implementation of `nesCheck` leverages the existing TinyOS compiler toolchain and extends it with custom components built on Clang [5] and optimization passes from the LLVM suite [18]. The technologies used are highlighted next to each pipeline block in Figure 1.

1. **Source Code Processing**: The `nesC` source code is initially processed by `ncc`, the `nesC` compiler, which links different `nesC` components through their interfaces and translates the result into a single C source code file.
2. **Intermediate Representation (IR)**: The C source is then transformed into the LLVM Intermediate Representation (IR) language. This IR provides an abstraction layer between the source programming language (nesC/C) and the target platform code.
3. **Static Analysis**: The IR is passed to the `nesCheck Static Analyzer`, which is based on an LLVM target-independent Optimization Pass.
4. **Analysis State Manager**: The `Analysis State Manager` component maintains the analysis state throughout the different steps and propagates information between the various components. Most metadata is kept in memory and looked up or injected only when necessary.
5. **Runtime Checks**: Finally, the minimal set of required runtime checks for memory-manipulating instructions is computed, and the code is instrumented accordingly. The LLVM IR uses two separate instructions for pointer dereferencing: `GetElementPtr` to calculate the memory address and `Load` or `Store` to access the memory location. `nesCheck` adds a bounds check conditional branch before the `GetElementPtr` instruction and a trap function to be invoked if the runtime check fails, terminating the execution and rebooting the node to prevent memory corruption.

If `nesCheck` statically determines that any execution of the instrumented instruction will always fail the check, it alerts the user about a constant memory bug, providing insights to inspect and fix the issue.

The rest of the pipeline resumes the original TinyOS compilation toolchain, with the instrumented code going through the GCC compiler to produce the final native binary for the desired target platform.

### Evaluation
The TinyOS development platform includes several sample applications, such as radio communication, sensing, and hardware interaction. These applications are used as a benchmark suite to evaluate `nesCheck`. In our experiments, we instrument all executed code, including that of the TinyOS operating system itself. Table 1 provides details on each program in our benchmark suite.

1. **Performance Overhead**: We first use these applications as-is to evaluate the performance overhead. Then, we inject memory bugs randomly into the benchmark applications to verify that all are caught statically or at runtime.
2. **Metrics**: We evaluate `nesCheck` using static metrics (e.g., number of pointer variables, type classification, and number of dynamic check instrumentations) and dynamic metrics (e.g., overhead in terms of program size, memory, execution performance, and energy consumption).

**Evaluation Environment**: To evaluate performance, we compiled the applications for TOSSIM [20], a discrete event simulator that accurately simulates TinyOS behavior down to a very low level. Each evaluation result is obtained by averaging 25 independent runs of each test.

**Type Inference**: On average, 81% of the variables are classified as Safe, 13% as Sequence, and 6% as Dynamic. A large number of dynamic runtime checks can thus be skipped due to the type system inference. The average total number of analyzed variables across all TinyOS sample applications is 3,633, supporting our design choice of whole-program static analysis.

**Code Size and Performance Overhead**: The results are shown in Figure 6. The programs in the benchmark total 57,610 lines of code. The uninstrumented programs average 228,761 bytes, and the instrumentation adds only 12,201 bytes (5.3%) of overhead on average. This shows that `nesCheck` is suitable for deploying on devices with constrained ROM.

**Memory Overhead**: As discussed in Section 4.1.3, some pointers require entries in a separate metadata table. Figures 7 and 8 present the memory overhead of `nesCheck` for the TinyOS applications. On average, `nesCheck` added 90 metadata table entry lookup instrumentation points, amounting to 2% of the total number of variables analyzed. When compared to the Dynamic pointers, it amounts to 41%, still representing a significant memory saving. Only 32 distinct entries are needed on average in the metadata table, constituting approximately 1/3 of the total lookup instrumentations for each program. The average RAM overhead is 16%, and in all cases, the total memory requirement remains significantly below the 10kb RAM limit.

**Figures and Tables**:
- **Figure 5**: Pointer classification results for the TinyOS sample apps benchmark.
- **Figure 6**: Code size and performance overhead for the instrumented TinyOS apps, including TOSSIM.
- **Figure 7**: Metadata table entry lookups vs. actual metadata table entries required by the instrumentation.
- **Figure 8**: RAM occupation of uninstrumented programs and memory overhead of `nesCheck` (all in bytes).
- **Table 1**: TinyOS standard applications used as a benchmark for `nesCheck`'s evaluation.