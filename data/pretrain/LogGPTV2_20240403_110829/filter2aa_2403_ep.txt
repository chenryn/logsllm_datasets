12 
         2: anewarray  
#3   
// class java/lang/String 
         5: dup 
         6: iconst_0 
         7: ldc   
#4   
// String January 
         9: aastore 
        10: dup 
        11: iconst_1 
        12: ldc   
#5   
// String February 
        14: aastore 
        15: dup 
        16: iconst_2 
        17: ldc   
#6   
// String March 
        19: aastore 
        20: dup 
        21: iconst_3 
        22: ldc   
#7   
// String April 
        24: aastore 
        25: dup 
        26: iconst_4 
        27: ldc   
#8   
// String May 
        29: aastore 
        30: dup 
        31: iconst_5 
        32: ldc   
#9   
// String June 
        34: aastore 
        35: dup 
        36: bipush  
6 
        38: ldc   
#10   
// String July 
        40: aastore 
        41: dup 
        42: bipush  
7 
        44: ldc   
#11   
// String August 
        46: aastore 
        47: dup 
        48: bipush  
8 
        50: ldc   
#12   
// String September 
        52: aastore 
        53: dup 
        54: bipush  
9 
        56: ldc   
#13   
// String October 
        58: aastore 
        59: dup 
        60: bipush  
10 
        62: ldc   
#14   
// String November 
        64: aastore 
        65: dup 
        66: bipush  
11 
        68: ldc   
#15   
// String December 
        70: aastore 
        71: putstatic  
#2   
// Field months:[Ljava/lang/String; 
        74: return 
指令 anewarray 负责创建一个指定大小的数组，并将对象的引用指针推送入栈（字母 a 表示返回值为
引用指针）。anewarry 指令的操作数声明了目标数组的数据类型，在上面的指令里这个操作数是
java/lang/String。在此之前的 bipush 12 则设置了数组的大小（这个值会被 anewarrary 指令 pop 出栈），而这
个大小正好是一年的月份总数。后面出现的 dup 指令是在栈计算机领域非常著名的栈顶复制指令（在 Forth
等基于堆栈的编程语言里都有这条指令）。它将复制数组的引用指针。这是因为 aastore 指令会从栈顶 pop
出引用指针，而后面的 aastore 指令还需要再次读取该引用指针。显而易见的是，Java 编译器认为在存储数
组元素时分配 dup 指令比分配 getstatic 指令更为稳妥，否则它也不会一口气派发了 12 个 dup 指令。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
604 
逆向工程权威指南（下册） 
aastore 指令从 TOS 里依次提取（即 POP）元素值、数组下标和数组的引用指针，并将指定值存储到
指定的数组元素里。 
最后的 putstatic 指令将栈顶的数据出栈并把它存储到常量解析池的#2 号位置。因此它把新建数组的引
用指针保存到了整个实例的第二个字段，也就是给 months 字段赋值。 
54.13.5  可变参数函数 
可变参数函数利用了数组的数据结构。 
        public static void f(int... values) 
        { 
                for (int i=0; i<values.length; i++) 
                        System.out.println(values[i]); 
        } 
        public static void main(String[] args) 
        { 
                f (1,2,3,4,5); 
        } 
  public static void f(int...); 
    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS 
    Code: 
      stack=3, locals=2, args_size=1 
         0: iconst_0 
         1: istore_1 
         2: iload_1 
         3: aload_0 
         4: arraylength 
         5: if_icmpge  
23 
         8: getstatic  
#2   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        11: aload_0 
        12: iload_1 
        13: iaload 
        14: invokevirtual #3   
// Method java/io/PrintStream.println:(I)V 
        17: iinc  
1, 1 
        20: goto  
2 
        23: return 
在 f()函数中，偏移量为 3 的 aload_0 指令提取了整数数组的指针。此后的指令依次提取数组大小等信息。 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=4, locals=1, args_size=1 
         0: iconst_5 
         1: newarray   
int 
         3: dup 
         4: iconst_0 
         5: iconst_1 
         6: iastore 
         7: dup 
         8: iconst_1 
         9: iconst_2 
        10: iastore 
        11: dup 
        12: iconst_2 
        13: iconst_3 
        14: iastore 
        15: dup 
        16: iconst_3 
        17: iconst_4 
        18: iastore 
        19: dup 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
605 
        20: iconst_4 
        21: iconst_5 
        22: iastore 
        23: invokestatic  #4   
// Method f:([I]V 
        26: return 
main()函数通过 newarray 指令构造了一个数组，接着填充这个数组，随后调用了 f()函数。 
虽然 newarray 属于某种构造函数，但是在 main()结束之后整个数组没有被析构函数释放。实际上 Java
没有析构函数。JVM 具有自动的垃圾回收机制。 
另外，当函数 main()退出后，数组对象的值其实是未消失的。其实在 JAVA 环境中就没有清除这个指
令，原因是 JAVA 的内存机制会自动清理不用内存的功能，当然是在其认为必要时进行。 
系统自带的 format()方法又是如何处理可变参数的呢？它把输入参数分为了字符串对象和数组型对象
两大部分： 
        public PrintStream format(String format, Object... args) 
参考链接：http://docs.oracle.com/javase/tutorial/java/data/numberformat.html。 
我们再来看看下面的例子： 
        public static void main(String[] args) 
        { 
                int i=123; 
                double d=123.456; 
                System.out.format("int: %d double: %f.%n", i, d); 
        } 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=7, locals=4, args_size=1 
         0: bipush  
123 
         2: istore_1 
         3: ldc2_w  
#2   
// double 123.456d 
         6: dstore_2 
         7: getstatic  
#4   
// Field java/lang/System.out:Ljava/io/PrintStream; 
        10: ldc   
#5   
// String int: %d double: %f.%n 
        12: iconst_2 
        13: anewarray  
#6   
// class java/lang/Object 
        16: dup 
        17: iconst_0 
        18: iload_1 
        19: invokestatic  #7   
// Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer; 
        22: aastore 
        23: dup 
        24: iconst_1 
        25: dload_2 
        26: invokestatic  #8   
// Method java/lang/Double.valueOf:(D)Ljava/lang/Double; 
        29: aastore 
        30: invokevirtual #9   
// Method java/io/PrintStream.format:(Ljava/lang/  
     String;[Ljava/lang/Object;]Ljava/io/PrintStream; 
        33: pop 
        34: return 
可见，int 型数据和 double 型数据首先经由各自的 valueOf 方法处理、返回相应的数据值。format()方
法的输入值应当为 Object 型实例。而 Integer 和 Double 类是超类 Object 的子类，所以这种实例可以作为
format()函数参数里的数组元素。另外一方面，所有数组都是均质的，也就是说它不能保存不同类型的数据
元素，因此 int 和 double 类的数据类型不可能是超类数组以外任何类型数组的数据元素。 
偏移量为 13 的指令构造了一个 Object 型的数组实例，而偏移量为 22、29 的指令，分别把整型 Integer 对象，
和双精度 Double 型对象添加到超类对象的数组里。 
整个程序的倒数第二行指令 pop、即清除了栈顶 TOS 中的元素数值，因此在执行最后一个指令 return 时，
异步社区会员 dearfuture(15918834820) 专享 尊重版权
606 
逆向工程权威指南（下册） 
该方法的数据栈已经被彻底释放（又称作平衡/balanced）。 
54.13.6  二维数组 
在 Java 中，二维数组其实就是一个存储着另一维度数组引用指针的一维数组。 
        public static void main(String[] args) 
        { 
                int[][] a = new int[5][10]; 
                a[1][2]=3; 
        } 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=2, args_size=1 
         0: iconst_5 
         1: bipush  
10 
         3: multianewarray  #2, 2  
// class "[[I" 
         7: astore_1 
         8: aload_1 
         9: iconst_1 
        10: aaload 
        11: iconst_2 
        12: iconst_3 
        13: iastore 
        14: return 
为了展示效果，我们在这里创建一个大小为 10×5 的整型二维数组，采用的指令是 new int[5][10]。 
Java 采用 multinewarray 指令构造多维数组。本例先通过 iconst_5 和 bipush 指令将各纬度的长度值推送
入栈，再使用 multinewarray 指令声明数据类型（常量解析池#2）和数组维度(2)。 
偏移量为 9、10 的 iconst_1 和 aaload 指令用于加载第 1 行的引用指针。偏移量为 11 的 iconst_2 指令则
声明了指定列。偏移量为 12 的指令明确该元素的取值。偏移量为 13 的 iastore 指令最终完成元素赋值。 
二维数组的读取操作又是如何实现的呢？ 
        public static int get12 (int[][] in) 
        { 
                return in[1][2]; 
        } 
  public static int get12(int[][]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=2, locals=1, args_size=1 
         0: aload_0 
         1: iconst_1 
         2: aaload 
         3: iconst_2 
         4: iaload 
         5: ireturn 
从这个程序我们可以看到：偏移量为 2 的 aaload 指令读入了指定行的引用指针，而偏移量为 3 的 iconst_2
指令声明了列编号。最终 iaload 指令读取了指定元素的数值。 
54.13.7  三维数组 
三维数组可视为存储了二维数组引用指针的一维数组。 
        public static void main(String[] args) 
        { 
                int[][][] a = new int[5][10][15]; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 54 章  Java 
607 
                a[1][2][3]=4; 
                get_elem(a); 
        } 
  public static void main(java.lang.String[]); 
    flags: ACC_PUBLIC, ACC_STATIC 
    Code: 
      stack=3, locals=2, args_size=1 
         0: iconst_5 
         1: bipush  
10 
         3: bipush  
15 
         5: multianewarray  #2, 3  
// class "[[[I" 
         9: astore_1 
        10: aload_1 
        11: iconst_1 
        12: aaload 
        13: iconst_2 
        14: aaload 
        15: iconst_3 
        16: iconst_4 
        17: iastore 
        18: aload_1 
        19: invokestatic    #3   
// Method get_elem:([[[I]I 
        22: pop 
        23: return 
我们这里举的例子中，三个维度的数值分别是 5、10 以及 15。 
它需要使用两次 aaload 指令才能找到最后一维数组的引用指针。 
        public static int get_elem (int[][][] a) 