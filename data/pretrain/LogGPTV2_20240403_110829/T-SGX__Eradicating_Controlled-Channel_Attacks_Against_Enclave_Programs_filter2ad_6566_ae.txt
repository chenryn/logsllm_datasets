The overhead of T-SGX ranges from 4% to
118%
50%. While this overhead is
with a geometric mean of
TABLE III: Rate and type of transaction aborts for the nbench
applications for T-SGX.
significant, it does not appear prohibitive. The table also
demonstrates the effectiveness of the optimizations of §V-D.
Without these optimization techniques, the overhead would
have been significantly higher (as high as 17.9×). It seems that
additional optimization could reduce the overhead even further.
2) Transaction Properties: Table III displays the rate at
which T-SGX transactions are aborted and the reason, as
indicated by the value of the eax register at the time of the abort.
We observe up to about 500 aborted transactions per second
with an eax value of 0, indicating an interrupt or exception.
This rate follows closely the per-core interrupt arrival rate,
which we observed using Windows performance counters.
We observed no transaction abort with eax bit 3 set (CAP).
This bit is set if an “internal buffer overflowed,” which includes
the case when a transaction’s read or write set does not fit
into the corresponding caches. This confirms the conservative
nature of our cache model. We also observed small numbers
of aborted transactions with eax bits 1 and 2 set (CON). These
bits indicate "transaction may succeed on retry" and "another
logical processor conflicts with read or write set," respectively.
3) Transaction Duration: Figure 11 displays the distribution
of transaction durations. We measured the duration of each
transaction by instrumenting the springboard code that begins
and ends transactions with rdtsc instructions. As the rdtsc in-
struction is illegal under SGX and entering and leaving enclaves
add significant noise to the measurement, we performed this
experiment by running the applications outside SGX enclaves.
11
s
k
c
o
l
B
n
o
i
t
u
c
e
x
E
l
l
a
g
n
o
m
a
e
g
a
t
n
e
c
r
e
P
100
80
60
40
20
0
0
-
1
k
2
k
3
k
4
k
5
k
6
k
7
k
8
k
9
k
1
k
1
1
1
2
1
3
1
4
1
k
-
-
-
-
-
-
-
-
-
2
k
3
k
4
k
5
k
6
k
7
k
8
k
9
k
1
0
k
k
k
k
-
-
-
-
-
k
0
1
1
1
2
k
k
1
3
k
1
4
1
5
k
k
Application
numeric sort
string sort
bitfield
fp emulation
fourier
assignment
idea
huffman
neural net
lu decomposition
GEOMEAN
libjpeg
Hunspell
FreeType
GEOMEAN
Baseline
12,682 iter/s
8,872.3 iter/s
516,000,000 iter/s
319.8 iter/s
186,000 iter/s
1,741.9 iter/s
3,814.1 iter/s
3,264.7 iter/s
45.7 iter/s
1,197.6 iter/s
TSX-basic
1,149.1 iter/s
1,991.1 iter/s
26,100,000 iter/s
25.3 iter/s
31,847 iter/s
82.6 iter/s
275.3 iter/s
162.6 iter/s
3.8 iter/s
82.4 iter/s
6,784.5 kB/s
176,000 word/s
37,747.2 char/s
846.4 kB/s
36,333.3 word/s
3,047.7 char/s
(overhead)
(9.1×)
(4.1×)
(17.9×)
(11.9×)
(5.4×)
(18.4×)
(13.0×)
(16.6×)
(11.1×)
(13.6×)
11.0×
(8.0×)
(4.9×)
(12.4×)
7.8×
T-SGX
8,390.1 iter/s
7,218.7 iter/s
443,000,000 iter/s
146.4 iter/s
98,847 iter/s
1,196 iter/s
3,665.7 iter/s
1,641.5 iter/s
27.3 iter/s
883.4 iter/s
4,674.1 kB/s
114,000 word/s
28,394.5 char/s
(overhead)
(1.5×)
(1.2×)
(2.1×)
(2.2×)
(1.9×)
(1.5×)
(1.0×)
(2.0×)
(1.7×)
(1.4×)
1.5×
(1.5×)
(1.6×)
(1.3×)
1.4×
TABLE II: Run-time overhead of TSX-basic and T-SGX over baseline.
Number of aborts
Percentage
TSX-basic
T-SGX
0
1
2
3
4
99.9%
1.7 · 10-3%
9.8 · 10-6%
3.7 · 10-7%
0 %
TABLE IV: Distribution of the number of times a transaction aborts
before it succeeds.
5) Multiple instances: The next experiment analyzes the
performance of multiple T-SGX-protected enclaves running
side by side. Our goal is to analyze whether T-SGX scales to
multiple protected enclaves.
We measured the running time of baseline and T-SGX for
the nbench applications, varying the number of concurrent
instances from one to eight. For each measurement, we created
n identical enclaves in n separate Windows processes (n ∈
{1, . . . , 8}) running one of the 10 nbench applications for
baseline or T-SGX and recorded the timing output of nbench
for one of the enclaves. We repeated the measurement for
n from 1 to 8, for all 10 nbench applications and for both
configurations (baseline and T-SGX).
Figure 12 displays the results. The x-axis displays the
number of concurrent instances. Each line corresponds to one
nbench application. The y-value is the ratio of the number
of iterations per second for T-SGX and for baseline. In other
words, it is the inverse of the overhead. All lines are roughly
constant, indicating that one can run multiple T-SGX-protected
enclaves without affecting the overhead.
IX. DISCUSSION
In this section we explain limitations of T-SGX and possible
approaches to overcome them. Also, we explain other potential
attacks against T-SGX and show how we can cope with them.
A. Limitations
One limitation of T-SGX is that it cannot correctly identify
what causes an exception. A transactional execution aborts when
an exception has been generated, but it does not let a program
Cycles per Execution Block
Fig. 11: Distribution of transaction times: Most transactions take less
than 3,000 cycles.
Figure 11 shows the distribution of transaction duration
for T-SGX and TSX-basic. For TSX-basic, most transactions
take less than 1,000 cycles. As a result of the optimizations, a
typical transaction for T-SGX takes between 1,000 and 2,000
cycles. Still, the transaction duration is short enough to easily
meet the execution time constraint imposed by the interrupt
frequency. For example, our 4 GHz processor should be able to
complete 2,000-cycle-transactions even for interrupt rates of up
to 2 million interrupts per second per core. Such a rate is orders
of magnitude higher than the interrupt rates we have observed
under normal conditions (thousands of interrupts per second
per core). This observation is also consistent with Table III.
4) Transaction Abort Counts: We study the number of
times a transaction aborts before it succeeds. We gather these
counts by instrumenting the TSX management code on the
springboard.
Table IV displays the distribution of abort counts across
the 10 nbench applications. The overwhelming majority of
transactions succeeds on the first
try. A tiny fraction of
transactions requires up to three retries. After executing many
millions of transactions, we observed no transaction requiring
more than three retries to complete. This observation can be
used as the basis for a mechanism to detect attacks or anomalies.
12
)
%
(
e
n
i
l
e
s
a
B
r
e
v
o
X
G
S
-
T
100
80
60
40
20
0
1
2
3
4
5
6
7
8
Number of Instances
numeric sort
string sort
bitfield
fp emulation
fourier
assignment
idea
huffman
neural net
lu decomposition
Fig. 12: Overhead with increasing number of parallel instances. It
shows that T-SGX can be scaled for system-wide uses in practice.
know the vector number of the exception (§II-C2). T-SGX can
distinguish a synchronous exception from an asynchronous
exception by repeatedly executing a transactional region, but
it cannot know whether the synchronous exception is a page
fault, a divide-by-zero error, or something else. This could be a
problem because T-SGX may mistake errors in the enclave
software for an attack by the OS. To avoid this problem,
we plan to develop an application exception handler (§II-C1)
running inside an enclave that dynamically inspects the code
and execution status to know the exception reason and to fix
it to ensure continuous execution. Another limitation is that