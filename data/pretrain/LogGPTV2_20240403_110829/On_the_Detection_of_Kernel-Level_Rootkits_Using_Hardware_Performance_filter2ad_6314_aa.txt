title:On the Detection of Kernel-Level Rootkits Using Hardware Performance
Counters
author:Baljit Singh and
Dmitry Evtyushkin and
Jesse Elwell and
Ryan Riley and
Iliano Cervesato
On the Detection of Kernel-Level Rootkits Using Hardware
Performance Counters
Baljit Singh
Department of Computer
Science and Engineering
Qatar University
PI:EMAIL
Dmitry Evtyushkin
Department of Computer
Science
State University of New York
at Binghamton
PI:EMAIL
Jesse Elwell
Vencore Labs
PI:EMAIL
Ryan Riley
Department of Computer
Science and Engineering
Qatar University
PI:EMAIL
Iliano Cervesato
Computer Science
Department
Carnegie Mellon University
PI:EMAIL
ABSTRACT
Recent work has investigated the use of hardware perfor-
mance counters (HPCs) for the detection of malware run-
ning on a system. These works gather traces of HPCs for a
variety of applications (both malicious and non-malicious)
and then apply machine learning to train a detector to dis-
tinguish between benign applications and malware. In this
work, we provide a more comprehensive analysis of the ap-
plicability of using machine learning and HPCs for a speciﬁc
subset of malware: kernel rootkits.
We design ﬁve synthetic rootkits, each providing a single
piece of rootkit functionality, and execute each while collect-
ing HPC traces of its impact on a speciﬁc benchmark ap-
plication. We then apply machine learning feature selection
techniques in order to determine the most relevant HPCs for
the detection of these rootkits. We identify 16 HPCs that
are useful for the detection of hooking based roots, and also
ﬁnd that rootkits employing direct kernel object manipula-
tion (DKOM) do not signiﬁcantly impact HPCs. We then
use these synthetic rootkit traces to train a detection system
capable of detecting new rootkits it has not seen previously
with an accuracy of over 99%. Our results indicate that
HPCs have the potential to be an eﬀective tool for rootkit
detection, even against new rootkits not previously seen by
the detector.
Keywords
Rootkits; Hardware Performance Counters; Intrusion Detec-
tion; Machine Learning
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 4–6, 2017, Abu Dhabi, United Arab Emirates.
c(cid:13) 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00.
DOI: http://dx.doi.org/10.1145/3052973.3052999
1.
INTRODUCTION
Recently, work has been done investigating the use of
hardware performance counters (HPCs) for the detection
of malware [6, 18, 27, 29]. The goal of these works is to
detect malware based on a proﬁle of the way it impacts per-
formance counters that are included in the processor of the
machine. This is a form of behavioral detection. Existing
work has focused on running malware binaries while collect-
ing performance counter information and using that data
to train a malware detector using various machine learning
techniques. Initial results have been very promising, demon-
strating detection rates of over 90%.
One type of malware detection that has thus far not shown
promising results is the detection of kernel rootkits. Rootk-
its are a special type of malware that modiﬁes parts of
the running operating system kernel in order to hide the
presence of an attacker on a machine. There are a variety
of attack methodologies a rootkit might use such as code-
injection, direct kernel object manipulation, function pointer
hooking, and more. One thing that makes rootkit analysis
unique when compared to traditional malware is that the
rootkit’s functionality does not execute in its own process
context, instead the functionality executes in the context of
other processes that access kernel information. In [6] a pre-
liminary set of tests were performed to detect rootkits, but
the results were not encouraging and were not investigated
deeply.
In this work, we aim to provide a more comprehensive
analysis of the applicability of hardware performance coun-
ters to the detection of kernel rootkits. We experimentally
demonstrate how various types of rootkit functionality and
attack mechanisms impact HPCs and determine the most
signiﬁcant HPCs for use in detecting rootkits. Our results
indicate that the HPCs are most impacted by the mecha-
nism of attack (function pointer hooking, system call hook-
ing, etc.) and less impacted by the rootkit functionality (ﬁle
hiding, process hiding, etc.)
We then design, train, and test a machine learning based
rootkit detector capable of detecting rootkits attacks against
a Windows 7 computer. Our results indicate that a system
trained on a variety of rootkit attack mechanisms can detect
483new rootkits that use those same mechanisms, even if they
are not variants of each other.
The contributions of this work are as follows:
• We provide an evaluation of the impact on HPCs of ﬁve
diﬀerent types of rootkits employing the three most
common attack techniques. We identify 16 HPCs (from
over 400) that are the most signiﬁcant for rootkit de-
tection.
• We ﬁnd that one class of rootkits, those employing di-
rect kernel object manipulation (DKOM), do not have
a signiﬁcant impact on HPCs and thus cannot be de-
tected by this technique.
• We design, train, and test a machine learning based
rootkit detection system capable of detecting rootkits.
This demonstrates the eﬃcacy of HPCs for the detec-
tion of hooking based rootkits.
• Our detector is able to detect previously unseen rootk-
its based on their attack mechanisms, implying that
HPCs can be used to detect zero-day rootkit attacks
as long as those attacks employ known attack mecha-
nisms.
• We discuss the practical limitations of using HPCs
for rootkit detection and provide recommendations for
hardware modiﬁcations that would address these lim-
itations.
2. BACKGROUND
In this section we will present a brief background on hard-
ware performance counters, rootkits and the use of hardware
performance counters for malware detection.
2.1 Hardware Performance Counters
Performance monitoring [26] is an essential feature of a mi-
croprocessor. Access to the performance monitoring hard-
ware is usually provided in the form of hardware perfor-
mance counters (HPCs), a collection of conﬁgurable, special-
purpose registers in recent microprocessors. Such counters
can be found in many microarchitectures. Today, all of
the major processor platforms have support for HPCs [2].
These counters are used to obtain low-level information on
events happening in the hardware during program execution.
HPCs are most often utilized in order to ﬁnd bottlenecks in
critical parts of programs, for ﬁne-grained application tun-
ing, compiler optimizations, or to study peculiarities of pro-
gram behavior on various CPUs. HPCs are capable of count-
ing events associated with many types of hardware-related
activities such as clock cycles, cache hits/misses, branch be-
havior, memory resource access patterns and pipeline stalls,
etc.
Each HPC register can be conﬁgured to count events of
a particular type. After the conﬁguration, each time the
hardware event detector detects a speciﬁc event, the counter
will be incremented. Access to the counter registers is per-
formed using special purpose instructions. Usage of HPCs
is beneﬁcial for program behavior analysis, since they oﬀer
very high accuracy [31] and normally do not introduce slow-
down to program execution. HPCs are also used for other
purposes; for example, they can be used for power [25] and
temperature [12] analysis. Another beneﬁcial use is moni-
toring program behavior for malware detection [6, 18, 27,
29] and integrity checking [14].
Despite the large number of possible events that HPC reg-
isters can be conﬁgured to count, there is a limitation com-
mon to all platforms: the limited number of conﬁgurable
registers. For example, the Intel Ivy-bridge and Intel Broad-
well CPUs used in this work can be conﬁgured to capture
468 and 519 events respectively, but the number of counter
registers is limited to only four per processor core, mean-
ing that only four HPCs can be captured simultaneously.
This limitation can be mitigated by multiplexing perfor-
mance counters [16], but at the cost of accuracy. Finally,
there are many libraries and software toolkits available for
accessing HPCs, such as [3, 5] and [13].
2.2 Kernel Rootkits
Kernel rootkits (referred to as simply rootkits in this pa-
per) are a type of malware that modiﬁes the running OS
kernel with the intention of hiding the malware’s presence
on a system. Frequently a rootkit author wants to hide a
running process, conceal an installed driver, mask the exis-
tence of a ﬁle on the ﬁle system, hide incoming and outgoing
network connections, etc. The methodology used by rootkits
to accomplish these goals varies as well. They can use sys-
tem call table hooking [9], function pointer hijacking [30],
direct kernel object manipulation (DKOM) [9], and more.
Even the ways in which they execute their malicious logic
can vary from kernel-level code injection to return-oriented
programming [10] to not executing code in the kernel at
all [21, 22].
2.3 Hardware Performance Counters for In-
trusion Detection
Recently, work has been done applying HPCs to intrusion
detection.
In this section we discuss the piece of seminal
work in the area, but a more complete handling of related
work can be found in Section 6.
Work by Demme et al. [6] shows the feasibility of using
HPCs to detect malware. They used micro-architectural
features from ARM and Intel processors to successfully de-
tect malware on Android. Their approach involves capturing
multi-dimensional, time-series traces of running applications
by interrupting periodically and capturing all performance
counters for the current thread of control. After training
on existing malware, they were able to detect variants with
high accuracy: Over 90% with a false positive rate (FPR)
less than 10%. In addition to their Android based results,
they provided a brief set of experiments attempting to de-
tect rootkits on Linux, but the results were not nearly as
promising: Around 70% accuracy at a 10% FPR. In com-
menting about their rootkit results, they say the following:
“... we believe our rootkit detection shows promise but will
require more advanced classiﬁcation schemes and better la-
beling of the data to identify the precise dynamic sections
of execution that are aﬀected.”
Motivated by their experiments and hypothesis, in our
work we provide a more comprehensive set of experiments
spanning a variety of rootkit types and demonstrate that
HPCs can be signiﬁcantly more eﬀective for rootkit detection
that their initial results indicate.
484Table 1: Synthetic Rootkits Used for Testing
Name
SR1
SR2
SR3
SR4
SR5
Functionality
Attack Mechanism
prevents
applications
Hides targeted outgo-
ing TCP connections
them
and
visible
from being
to
like
netstat
Hides speciﬁc ﬁles by
preventing them from
appearing in any ﬁle
listings or ﬁle man-
agers
Hides processes, pre-
venting them from be-
ing listed in process
listings
Hides speciﬁc ﬁles by
preventing them from
appearing in any ﬁle
listings or ﬁle man-
agers
Hides processes, pre-
venting them from be-
ing listed in process
listings
IRP Hooking
IRP Hooking
SSDT Hooking
SSDT Hooking
DKOM
3. LINKING PERFORMANCE COUNTERS
TO ROOTKIT FUNCTIONALITY
Given that a modern processor has access to over 400
performance counters, a prudent ﬁrst step toward detecting
rootkits using HPCs is to determine which of those 400 are
most signiﬁcantly impacted by rootkits. In this section we
describe a set of experiments designed to determine which
HPCs are most impacted by rootkits.
An overall diagram of our approach can be found in Fig. 1.
We start with a set of custom designed, synthetic rootkits.
These are rootkits that we created that each implement a
single piece of rootkit functionality using one attack mecha-
nism. From there, a rootkit is chosen and installed on a Win-
dows 7 virtual machine. Inside that virtual machine a pro-
ﬁling benchmark is executed. This benchmark is a program
designed to make use of various pieces of OS functionality
that a rootkit will typically impact. (For example, showing
a listing of all running processes.) While the benchmark is
running we use Intel’s VTune [11] to capture traces of all the
possible HPCs during the execution of the benchmark. We
then process our traces using the Gain Ratio feature selec-
tion technique from the WEKA machine learning toolkit[8]
to determine which features are the most signiﬁcant for each
synthetic rootkit.
3.1 Synthetic Rootkits
Synthetic rootkits are small rootkits which are designed
to make use of a single attack mechanism to accomplish
a speciﬁc rootkit goal. Most real-world rootkits make use