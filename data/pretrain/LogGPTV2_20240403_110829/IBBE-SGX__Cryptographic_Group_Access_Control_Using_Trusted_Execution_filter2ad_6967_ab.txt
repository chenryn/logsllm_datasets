against attacks from privileged code (e.g. infected operating
system) and certain physical attacks. A unit of code protected
by SGX is called an enclave. Computations done inside the
enclave cannot be seen from the outside [18]. SGX seamlessly
encrypts memory so that plaintext data is only present inside
the CPU package. The assumption is that opening the CPU
package is difﬁcult for an attacker, and leaves clear evidence
of the breach. Encrypted memory is provided in a processor-
reserved memory area called the Enclave Page Cache (EPC),
which is limited to 128 MB in the current version of SGX.
Intel provides a way for enclaves to attest each other [19].
After the attestation process, enclaves will be sure that each
other is running the code that they are meant to execute. The
attestation process can be extended to remote attestation that
allows a piece of software running on a different machine
to make sure that a given enclave is running on a genuine
Intel SGX-capable CPU. An Intel-provided online service —
the Intel Attestation Service (IAS) — is used to check the
signature afﬁxed to a quote created by the CPU [19]. As part
of the attestation process, it is possible to provision the enclave
with secrets. They will be securely transmitted to the enclave
if and only if the remote attestation process succeeds.
The Trusted Computing Base (TCB) of an SGX enclave is
composed of the CPU itself, and the code running within. The
assumption is that we trust Intel for securely implementing
SGX. Nevertheless, it has been shown that SGX is vulnerable
to side-channel attacks [20]. We consider this ﬂaw to be
orthogonal to our research, and hence do not consider it in
our security evaluation.
B. A Naive Approach to Group Access Control
Suppose that we want to come up with a simple, yet secure,
cryptographic scheme to protect a group key gk. We can make
use of an asymmetrical encryption primitive [21], based on
RSA or Elliptic Curve Cryptography (ECC). As each user in
the system possesses a public-private key pair, the scheme
consists in encrypting gk using the public key of each member
in the group. A member of the group can then deduce gk by
decrypting the resulting ciphertext using her private key. This
construction is sometimes referred to as Hybrid Encryption
(HE) [3], or Trivial Broadcast Encryption Scheme [22].
To achieve the zero knowledge requirement, administrators
thus
could be asked to run HE within an SGX enclave,
protecting the discovery of gk. However, before discussing
the cost of such an integration between HE and SGX, we
point out a number of prior weaknesses of HE.
First, the amount of group metadata grows linearly with
the number of members in the group, making it impractical
in the context of very large groups. Second, when revoking
group members, a new key gk needs to be created;
the
entire group metadata also needs to be generated again by
encrypting the latest value of gk. As the group size increases,
the computational cost of the scheme grows linearly. Likewise,
the latency incurred for putting, getting and storing the group
metadata on the cloud storage will also seriously expand.
Furthermore, when performing group membership opera-
tions, the administrators need to entrust the authenticity of
the public keys linked to the identity of the members. Public
Key Infrastructures (PKIs) [21] can be used to solve this
issue. Besides the trust risks that the PKI brings [23], one
needs to account for the practical costs of setting up, running
and accessing a PKI. To mitigate these risks, one could
choose to substitute public-key primitives with identity-based
ones. Identity Based Encryption (IBE) [5], [24] makes use
of arbitrary strings as public keys; we can therefore use a
user name directly as a public key. The user secret key is
generated at setup phase or later by a Trusted Authority (TA).
Obviously, both HE-PKI and Hybrid Encryption with Identity-
based Encryption (HE-IBE) have the same inner functioning,
when making abstraction of the key methodology choice.
Integrating SGX with HE-PKI and HE-IBE is required
in order to guarantee the zero knowledge property against
administrators. As hybrid encryption is causing a high group
metadata expansion, it has a direct impact on the memory
space that is used inside the SGX enclave. Accessing memory
in SGX enclaves can induce an overhead of up to 19.5 %
for write accesses and up to 102 % for read accesses [25].
Apprehensive about
the hypothesized SGX degradation in
performance caused by the group metadata expansion, we shift
the focus on ﬁnding a solution with minimal expansion.
C. Broadcast Encryption (BE) and Identity-Based BE
In order to optimize both SGX and cloud transit costs,
we investigate the possibility of cryptographic schemes that
induce a minimal group expansion.
Broadcast Encryption (BE) [26] is a public-key cryptosys-
tem with a unique public key that envelopes the entire system,
contrary to the HE scheme where each user uses a different
public key. However, each user in a BE system has a unique
private key generated by a trusted authority. To randomly
generate a group key gk and the associated group metadata
(named encrypt operation within BE systems), one makes use
3
of the system-wide public key. On the other side, when a user
wants to reveal gk (decrypt in BE systems), she makes use of
her individual private key.
As broadcast encryption schemes come with different con-
textual models, we impose a number of conditions. First, to
maintain the same threat model as HE, we are only investi-
gating the use of fully collusion-resistant BE schemes [27],
in which no coalition of members outside of the group could
reveal gk. Second, the set of users participating in the system
is not initially known, thus we rely on the usage of dynamic
BE schemes [28]. Third, as in the case of HE, we would prefer
constructions that can accommodate the use of IBE.
Piercing through the existing research literature, we iden-
tiﬁed an IBBE scheme [29] that not only fulﬁlls all
the
aforementioned requirements, but also operates with group
metadata expansions and user private keys of constant sizes.
Moreover, the scheme has an additional strategic advantage
that proves beneﬁcial in our context: the system-wide public
key size is linear in the maximal size of any group.
Upon analyzing the computational complexity of the se-
lected IBBE scheme, one can notice that creating gk given a
set of members, as well as decrypting it as a user, are opera-
tions with a quadratic complexity in the number of members.
Therefore, even though the scheme brings a tremendous gain
in the size of group metadata expansion, the computational
cost of IBBE might be excessive for practical use.
Figure 2 exempliﬁes the performance of HE-PKI, HE-IBE
and IBBE schemes in their raw form, before any integration
with SGX is considered. The sub-ﬁgure on the left displays the
total time taken for the operation of creating a group while the
one on the right shows the size occupied by the expansion of
group metadata. The optimality of IBBE regarding the size of
group metadata expansion is immediately obvious. It always
produces 256 bytes of metadata, regardless of the number of
users per group. That is preferable compared to HE-PKI and
HE-IBE, which produce increasingly larger values, as much as
27 MB for groups of 100,000 users, and 274 MB for the largest
benchmarked group size. On the other hand, IBBE performs
much worse than HE-PKI when considering the execution
time. It is 150× and 144× slower for groups of 10,000 and
100,000 users, respectively.
There is no doubt that running the IBBE scheme in this
form is inadequate. In the remainder of this paper, we describe
two original contributions, one that changes a traditional
assumption of the IBBE scheme, and a second that lowers
the user decryption time.
IV. IBBE-SGX
IBBE-SGX can be broadly described in 3 steps: (i) trust
establishment and private key provisioning; (ii) membership
deﬁnitions and group key provisioning; and (iii) membership
changes and key updates.
A. Trust Establishment
IBBE schemes generate a single public key that can be
paired with several private keys, one per user. Users, in turn,
(a) Latency for group creation.
(b) Group metadata expansion.
Fig. 2. Performance of HE-PKI, HE-IBE and IBBE, without zero knowledge.
Fig. 3.
Initial setup.
need to be sure that the private key they receive is indeed
generated by someone they trust, otherwise they would be
vulnerable to malicious entities trying to impersonate the
key issuer. To achieve that, we rely upon a PKI to provide
veriﬁable private keys to users.
Another security requirement of IBBE-SGX is that the key
management must be kept in a TEE. Therefore, there must
be a way of checking whether that is the case. On that front,
Intel SGX makes it possible to attest enclaves. Running this
procedure gives the assurance that a given piece of binary code
is truly the one running within an enclave, on a genuine Intel
SGX-capable processor (Section III-A).
Figure 3 illustrates the initial setup of trust that must be
executed at least once before any key leaves the enclave.
Initially, the enclaved code generates a pair of asymmetric
keys. While the private one never leaves the trusted domain,
the public key is sent along with the enclave measurement
to the Auditor (1), who is both responsible for attesting
the enclave and signing its certiﬁcate, thus also acting as a
Certiﬁcate Authority (CA). Next, the Auditor checks with IAS
(2) if the enclave is genuine. Being the case, it compares the
enclave measurement with the expected one, so that it can
be sure that the code inside the shielded execution context is
trustworthy. Once that is achieved, the CA issues the enclave’s
certiﬁcate (3), which also contains its public key. Finally,
users are able to receive their private keys and the enclave’s
certiﬁcate (4). The key will be encrypted by the enclave’s
private key generated in the beginning. To be sure they are
not communicating with rogue key issuers, users check the
signature in the certiﬁcate and then use the enclave’s public
key contained within. All communication channels described
in this scheme must be encrypted by cryptographic protocols
such as Transport Layer Security (TLS).
4
1k10k100k1M# users per group50 ms1s1m1h10hlatency1k10k100k1M# users per group1 B1 KB1 MB1 GBsizeAdmin serverEnclaveIASAuditor(CA)user private key1234B. From IBBE to IBBE-SGX
Traditionally, the IBBE scheme [7], [29] consists of the
following four operations.
1) System Setup: The system setup operation is run once
by a Trusted Authority (TA) and generates a Master Secret
Key MSK and a system-wide Public Key P K.
2) Extract User Secret: The TA then uses the Master Secret
Key MSK to extract the secret key USK for each user U.
3) Encrypt Broadcast Key: The broadcaster generates a
randomized Broadcast Key bk for a given set of receivers S,
by making use of P K. Together with bk, the operation outputs
a public broadcast ciphertext c. The broadcast ciphertext can
be publicly sent to members of S so they can derive bk.
4) Decrypt Broadcast Key: Any member of S can discover
bk by performing the decrypt broadcast key operation given
her secret key USK and (S, c).
In contrast to traditional IBBE that requires the use of
a TA to perform the System Setup and Extract User Secret
operations, we rely on SGX enclaves. Therefore, the master
secret key MSK used by the two aforementioned operations
can be made available in plaintext exclusively inside the
enclave, and securely sealed if stored outside of the enclave
for persistence reasons.
Similarly to IBBE, the Encrypt Broadcast Key and Decrypt
Broadcast Key operations rely on the system public key P K,
and are thus usable by any user of the system.
As opposed to the traditional
IBBE usage scenario,
our model requires that all group membership changes—
generating the group key and metadata—are performed by
an administrator. Administrators can use the master secret
key MSK to encrypt, set up the system and extract user keys.
The decryption operation, however, remains identical to the
traditional IBBE approach, being executed by any arbitrary
user. In the remainder of this paper, we refer to our new IBBE
scheme as IBBE-SGX.
We now describe the computational simpliﬁcation oppor-
tunities introduced by IBBE-SGX compared to IBBE [29].
First, by making use of MSK inside the enclave, the complexity
of the encryption operation drops from O(|S|2) for IBBE to
O(|S|) for IBBE-SGX, where |S| is the number of users in the
broadcast group set. The reason behind the complexity drop is
bypassing a polynomial expansion of quadratic cost, necessary
in the traditional IBBE assumptions. The reader is directed to
Section A-C for the concrete mathematical inference process.
We argue that this complexity cut is sufﬁcient to tackle the
impracticality of the IBBE scheme emphasized earlier in
Figure 2. Second, by relying on MSK, one can build efﬁcient
access control speciﬁc operations, such as adding or removing
a user from a broadcast group. IBBE-SGX can accommodate
O(1) complexities for both operations, as illustrated in Sec-
tions A-E and A-F.
Unfortunately, IBBE-SGX maintains an O(|S|2) complexity
for the user decrypt operation, during which, similarly to IBBE
encryption, the algorithm performs a polynomial expansion of
quadratic cost. We address this drawback by introducing a
partitioning mechanism as described later in Section IV-C.
Fig. 4. Partitioning mechanism using IBBE-SGX and AES to protect the
Group Key.
Finally, we consider a re-keying operation, for optimally
generating a new broadcast key and metadata when the iden-
tities of users in the group S do not change. The operation can
be performed in O(1) complexity for both IBBE and IBBE-
SGX, as detailed in Section A-G.
C. Partitioning Mechanism for IBBE-SGX
Although IBBE-SGX produces a minimal metadata ex-
pansion and offers an optimal cost for group membership
operations, it suffers from a prohibitive cost when a member
needs to decrypt the broadcast key. To address this issue, we
introduce a partitioning mechanism.
As the decryption time is bound to the number of users
in the receiving set, we split the group into partitions (sub-
groups) and therefore limit the user decryption time to the
number of members in a single partition. Moreover, each
partition broadcast key will wrap the prime group key gk,
so that members of different partitions can communicate by
making use of gk.
The partition mechanism is depicted in Fig 4. The ﬁrst step
consists in splitting the group of users in ﬁxed-size partitions.
The administrator can then use the encrypt functionality of
IBBE-SGX to generate a sub-group broadcast key bk and
ciphertext ck for each partition k. Next, for each partition, the
group key gk is encrypted using symmetric encryption such as