能体会到这里所列的所有事情，而且越有机会直接学到如何处理它
们。
我的第一个灾难发生在1996年，当时我正在做IE3.0的家长控制
（Parentalcontrol）功能。我们正在做支持W3C标准规范的家长控制
670
---
## Page 672
系统，计划做出第一个能够让网站“安全"的网页测览器。我认为项
目进展得很好，直到我们开第一次查看会议。10个人中有9个人对
我回答他们问题的答案很失望，以至于他们不再听我说什么了，会
议慢慢失去了控制。他们都是经验丰富的并发人员和架构师，而且
他们的问题比起我的答案来说要好很多。每件事似乎都错了：大家
都在吼叫，团队的士气受到重挫。会并了10分钟，我就知道这是场
灾难。20分钟后，我希望自己可以消失。1小时后，我几乎连站都
站不起来了。
微软的人有时称此类事情为“火的考验”。意思是说工作压力很大，
却没有好用的装备。我对那天的事情记忆犹新，因为那是我第一次
了解到，要做好一件工作，得需要多少努力啊。我曾经听过有着类
似经历的故事，但直到它发生在我身上，我才彻底明白。但在那之
后，事情就很明确了：我的工作是让一切事情运作顺利，使得那样
的会议绝不会再发生。尽管这很痛苦，但这给了我一次机会来学
习，而这是通过其他方式所无法学习到的。
从我训练其他经理人的经验来看，我发觉，人们难以对尚未体验过
的问题完全感同身受（这就是训练时，为何应该使用模拟的另一原
因）。尽管对其他人经历过的进度落后或需求修改的事应该很轻易
就能感同身受，但不知怎么地，我们多数人都会设法让自己相信，
这类事不会发生在自己身上。或者更明确地讲，我们碰过（或正在
处理）的问题在某方面很独特，从而使它不可避免。
所以，以一种纯粹乐观主义的行为，我要提供给亲爱的读者一份常
见困难情况列表。至少，略读这份列表应该能够帮助你重新思考你
曾有过的经历，以及你目前所处的情况。
如何知道你身处的困滩情况
就项目而言，只要符合下列准则之一，我就把它看作困难情况：
1.现实和当前计划之间有很大的差距。（我们应该在1小时时内发布
到同站，但Fred说整个客户数据库都破坏了，有权的人都外出了，
程序团队都喝醉了。）
2.对差距在哪、原因何在、谁负责解决它，或者可能是否真的存在
这些问题感到困惑。（“什么冰山？我没看见冰山？”）
671
---
## Page 673
3.对如何应用资源来解决差距还不明确。不管是采取行动还是什么
也不做，都担心会让事情变得更糟糕。（“不要光站在那儿，做点
事！等一下，不对....不要做，待在那儿！”）
关于这列表有个恶毒的评论就是，对某些很麻烦的项目而言，这些
特点可能从第一天就并始了。有道理。一个组织的现状，是另一个
组织的消防训练。虽然管理阶层的工作就是把混乱程序降到最低
一希望达到只有在特定时间，才有特定问题的程度，而不是成为
工作环境的一般特性一—我们都知道，有时管理阶层也无力去做他
们的工作（在这里插入第一个恶毒的评论）。也就是说，无论你多
么经常应用本章的建议，这都会很好用。但是，如果你发现你自己
经常读本章，也许该是找个新领导或者新工作的时候了。
困滩情况列表
本章并头提到的粗略性指南可以应用到以下所有情况，不过，涉及
的领域和技巧可能不同。为了参考，我也为每种情况加入了一些值
得考虑的可能回应（这是针对粗略性指南中的第5步“探讨替代方
案"的资料）：
蔬忽或实现。项目出错多半是出于蔬忽。有些几天前所做的决策
行不通，而现在有些事不能运作。问题在于进度表还在一—必须做
一些新的事。可能回应：修改需求、修改进度表来重新实现（砍掉
优先级最低的功能），或者在必要时，探讨新的设计替代方案。如
果你之前做过设计探讨（请参阅第5、6章），可能会有很好的、可
供采纳的替代设计方案，而这方案也已被充分理解。
·你或你的团队被追做些愚蠢的事情。发生这种事可能是管理阶层
或者拒绝承认问题某个方面的客户所做的决策的结果。这很令人沮
丧，因为你知道得比较多，却没有足够的权力来阻止这件事。可能
的响应：承认自己可能身陷于管理阶层的圈套内。如果你成功了，
将来你还是会被置于相同的情况中。如果你失败了，你可能会受责
滩，再也不能让人信赖。所以，如果这是个长期不断的问题，你必
须设法好好应对（请参阅第16章）。把你的反对意见排出优先级，
要有特殊的建议事项，然后运用你的政治和协商技巧（请参阅本章
后面的“冲突解决和协商”）来达成妥协。你不会赢，但在你能找到
更好的管理办法之前，你可以保护你的团队。试着把蠢事隔离到造
成损害最小的功能或里程碑中（请参阅后面的“损害控制”一节）。
672
---
## Page 674
·进度落后或资源乏。当赶上下一个进度日期的可能性低于75%
时，这些日期就不可信了。当然还是有可能的，但却不可信了。可
能的响应：请参阅第2章和第14章。这完全和退出标准及其隐含的
优先级有关。要么删除一些功能，增加时间到进度表上，要么忽略
所有已知的逻辑，详细描述你最后的医院和遗瞩，并且无论如何都
尽力赶上日期。确实要考虑进度风险是否能被隔离，从关键路径
（criticalpath）中移开；或者，是否可以和未来里程碑中的某个认
为不太重要的东西做交换。布鲁克定律3表明，增加人力去处理落
后的进度，可能价值不如预期大。
质量差。如果你不知道什么是质量，就不会知道质量是否差。如
果你用的是每日构建或者有些经常性追踪的测量数据（Bug计数
等），那么你就会早些知道。不良品质有很多种：易损坏的程序代
码、无法满足需求、性能差或不稳定。不良品质的原因有很多种：
工程（核心开发实践）、流程（签入和工具）或者进度/规划。可能
的响应：让团队明确理解什么是好的质量，同时对此设立每日目标
（请参阅第15章）。牺牲一些事情（功能、时间）以提供更好的质
量产品。通常，最好的一步是放慢进展速度，直到达到质量基准，
并且每个人都知道该如何达到，然后再加快进展速度。
·方向改变。管理阶层或市场本身会要求改变。这不见得是件坏事
（这也许是一种进展）一一只是不太可能有趣。预算会被减少，或
者会制定新的高层次目标。可能的响应：改变可以被隔离到特定组
件吗？把规格说明书或者其中可用的部分分离出来，把它们放在并
发管道中（请参阅第14章），然后把必须修改的项目排出优先级。
确定你没被使唤：被告知"做X"和"我们得产生多10%的收入"不同。
前者是命令，而后者是要解决的问题。要争论到找出问题，通过提
出令人愉快的解决方案来参与其中（请参阅本章后面的"冲突解决
与协商”部分）。
团队或人员问题。当一人或多人对某事烦恼时，对团队就有负面
影响。这可以是个人问题（“我不能忍受和Fred一起工作”），也可
能是体制问题（“我讨厌我们查看代码的方式”）。可能的响应：对
涉及其中的人，采取一对一的谈话。问他们发生了什么事以及能够
做些什么（由你或由他们来做）来让事情好转。把问题理清出来，
让大家发泄。找出原因，而不只是症状（请参阅本章后面的“冲突
解决与协商”部分）。
673
---
## Page 675
意见不同和冲突。人们可以公然对该做什么表达不同意见（这很
健康），但现在如果意见不同会阻碍事情发展。应该花更多时间讨
论，不断回头看要做什么事，而不是只理头苦干。在极端情况下，
不同派别会偷偷朝不同方向做事。可能的响应：请参阅本章后面的
“冲突解决与协商”部分。
·缺乏信念。团队就是不相信项目方向。他们虽然在一起工作，相
处也不错，也没有积极反对，但他们认为这条船正朝冰山上并去。
可能的替代方案：了解他们是否正确。如果不是，就运用影响力
（请参阅第16章），帮助在此方向的背后建立支持力量。从小处开
始：谁最有信念？你如何培养他的信念并传达给团队中的其他人？
试着为团队设立较小目标并建立动力。挨门去拜访，寻求人们的信
任：“看，我知道你不相信这点，但我相信。有什么办法能让我说
服你相信呢？如果没办法，能不能无论如何都相信我？至少到下个
礼拜？”
叛乱的威胁。这是暴力，是缺乏信念的激烈形式。这一刻，已经
越过团队的挫折极限，无论问题有多小，他们对浮现的每个新问题
的反应都很糟糕。此外，人们会抱怨很多关于问题的问题（例如，
“为什么管理阶层/测试人员/营销人员一直这么做？”），而不是实
际问题。如果不采取行动，资深人员也可能支持这类抱怨，颠覆性
的小举动或象征举动会开始发生（例如，特定Bug突然变得很难修
正）。必须要有人正面解除危机。公开承认此事，做出一份包括所
有抱怨的列表，并至少把列表上的一些项目明显地解决。
让这几种情况变得困难的原因不是情况本身，而是发生时的上下环
境。问题发生在进度表的越后期，团队（或PM）的士气就会越
低，问题也就越滩处理。到了最后，儿乎没什么有效的方法可用来
解决问题，采取行动所受的阻碍却非常多。有时，指出时间限制的
事实，很容易就能终正争论。在终局阶段，很多问题因为代价太高
而难以改变，人们就会变得比较容易同意现在先忍受这些问题，到
下一版（或里程碑）时再修正它们。但是，要注意一点，拖延问题
并不表示已经解决它了：这只是说你走了一条同意的路来拒绝处理
问题，这对项目而言，可能对也可能错。
困难情况通常会有模糊的起点和终点，理解这一点很重要。你的桌
上不会有红色的警示灯亮起来，告诉你士气低落，或者告诉你刚才
犯了蔬忽。你得注意看着，但即使你做了，也不一定都能百分之百
地清楚现在发生什么事。然后，如果出现一个问题，你决定采取行
674
---
## Page 676
动，你也许只能让减缓它，并将影响降到最低一一你可能无法完全
解决它。这表示到结束前的数周甚至数月，你必须控制由该问题引
发的各种小问题。（例如，管理两个无法相处融洽的程序员或测试
员。你可以帮助平息事情，但你无法完全解决他们的冲突。）所
以，当事情出错时，部分该做的事就是把时间用在解决长期不断发
生的问题上，把它们保持在可以容忍的水平上。你用这种方法管理
越多的问题，你就越需要更多时间来专注于维护和破坏控制。
让练习和训练变得困滩
为项目经理设计的好的培训，必须包括把PM放到模拟这些情况的
练习中。我知道教授人们理想的案例，是学习基本理论的最好方
法，但是，要提高项目管理技巧，理解这些理论，只能在学习失败
和困滩的案例中才能实现。我教过的最成功的课程，就是集中在各
种情况和挑战的练习上，而不是一堆公式和概念。再次冷笑地想一
想，管理项目的挑战并不是在万里无云、风平浪静的大海里航行。
相反地，挑战在于了解如何变戏法、排列优先级和回应所有你面临
的不可预期和困难的事情。（虽然，也许PM的终极技巧，就是在
团队杨帆启航之前，把狂风暴雨的大海变得风平浪静。）
所以，如果你和项目经理共事或者管理其他项目经理，而且你没有
机会接受适当训练，那么当困难情况发生时，利用这些困难情况作
为学习机会，就显得非常重要。尽管这些情况让人感觉压力沉重、
令人沮丧，但是，经历这些情况的经验，就是下次项目的纯金珍品
只要你事后花时间重新查看它们。StewartBrand曾说过：“匆忙
中，错误会不断。从容时，犯错是教导L。"即使是在最惨的灾难
中，PM仍然可以掌控如何响应。除非情况对团队已经无可挽回，
不然在发生之后，总是有机会可以从中学些东西。
关于其他困难情况：有很多不同方法，可以解决你也许会碰到的可
能问题。如果你在寻找更大的学习列表，我看过最好的单一资源是
SteveMcConnell写的《RapidDevelopment》的第三章（Microsof
Press出版，1996年）。第二个最好的资源是反模式目录
（http://c2.com/cgi/wiki?AntiPatternsCatalog），它实际上非常有趣，
有很多精彩的内容，但是很难应用，而且写法也不一致（这并不令
人讶异，因为那是Wiki系统。）
负起责任
675
---