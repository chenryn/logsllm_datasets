        # pvmove /dev/vdb3 /dev/vdb4
          /dev/vdb3: Moved: 33.33%
          /dev/vdb3: Moved: 100.00%
        ```
    :::
3.  从卷组中删除物理卷 [*/dev/vdb3*]{.emphasis}:
    ``` literallayout
    # vgreduce myvg /dev/vdb3
    Removed "/dev/vdb3" from volume group "myvg"
    ```
:::
::: itemizedlist
**验证**
-   验证 [*/dev/vdb3*]{.emphasis} 物理卷是否已从 [*myvg*]{.emphasis}
    卷组中删除：
    ``` literallayout
    # pvs
      PV           VG    Fmt   Attr   PSize        PFree      Used
      /dev/vdb1 myvg  lvm2   a--    1020.00m    0          1020.00m
      /dev/vdb2 myvg  lvm2   a--    1020.00m    0          1020.00m
      /dev/vdb3   	    lvm2   a--    1020.00m   1008.00m    12.00m
    ```
:::
::: itemizedlist
**其他资源**
-   `vgreduce(8)`{.literal}, `pvmove(8)`{.literal}, 和
    `pvs(8)`{.literal} man pages
:::
:::
::: section
::: titlepage
# []{#managing-lvm-volume-groups_configuring-and-managing-logical-volumes.html#splitting-a-lvm-volume-group_managing-lvm-volume-groups}分割 LVM 卷组 {.title}
:::
这个步骤描述了如何分割现有卷组。如果在物理卷中有足够的空闲空间，就可在不添加新磁盘的情况下创建新的卷组。
在初始设置中，卷组 [*myvg*]{.emphasis} 由
[*/dev/vdb1*]{.emphasis}、[*/dev/vdb2*]{.emphasis} 和
[*/dev/vdb3*]{.emphasis} 组成。完成此步骤后，卷组 [*myvg*]{.emphasis}
将包含 [*/dev/vdb1*]{.emphasis} 和 [*/dev/vdb2*]{.emphasis}，第二个卷组
[*yourvg*]{.emphasis} 将包含 [*/dev/vdb3*]{.emphasis}。
::: itemizedlist
**先决条件**
-   卷组中有足够的空间。使用 `vgscan`{.literal}
    命令确定卷组中当前有多少可用空间。
-   根据现有物理卷中的可用容量，使用 `pvmove`{.literal}
    命令将所有使用的物理区块移动到其他物理卷。如需更多信息，请参阅[从卷组中删除物理卷](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_logical_volumes/managing-lvm-volume-groups_configuring-and-managing-logical-volumes#removing-physical-volumes-from-a-volume-group_managing-lvm-volume-groups){.link}。
:::
::: orderedlist
**步骤**
1.  将现有卷组 [*myvg*]{.emphasis} 拆分到新卷组 [*yourvg*]{.emphasis} ：
    ``` literallayout
    # vgsplit myvg yourvg /dev/vdb3
      Volume group "yourvg" successfully split from "myvg"
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果您使用现有卷组创建了逻辑卷，请使用以下命令取消激活逻辑卷：
    ``` literallayout
    # lvchange -a n /dev/myvg/mylv
    ```
    有关创建逻辑卷的更多信息，请参阅[管理 LVM
    逻辑卷](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_logical_volumes/managing-lvm-logical-volumes_configuring-and-managing-logical-volumes){.link}。
    :::
2.  查看两个卷组的属性：
    ``` literallayout
    # vgs
      VG     #PV #LV #SN Attr   VSize  VFree
      myvg     2   1   0 wz--n- 34.30G 10.80G
      yourvg   1   0   0 wz--n- 17.15G 17.15G
    ```
:::
::: itemizedlist
**验证**
-   验证新创建的卷组 [*yourvg*]{.emphasis} 是否由
    [*/dev/vdb3*]{.emphasis} 物理卷组成：
    ``` literallayout
    # pvs
      PV           VG      Fmt   Attr   PSize        PFree      Used
      /dev/vdb1 myvg   lvm2   a--    1020.00m    0          1020.00m
      /dev/vdb2 myvg   lvm2   a--    1020.00m    0          1020.00m
      /dev/vdb3 yourvg lvm2   a--    1020.00m   1008.00m    12.00m
    ```
:::
::: itemizedlist
**其他资源**
-   `vgsplit(8)、`{.literal} `vgs(8)`{.literal} 和 `pvs(8)`{.literal}
    man page
:::
:::
::: section
::: titlepage
# []{#managing-lvm-volume-groups_configuring-and-managing-logical-volumes.html#renaming-lvm-volume-groups_managing-lvm-volume-groups}重命名 LVM 卷组 {.title}
:::
此流程将现有卷组 [*myvg*]{.emphasis} 重命名为 [*myvg1*]{.emphasis}。
::: orderedlist
**步骤**
1.  取消激活卷组。如果是一个集群卷组，在每个这样的节点上使用以下命令取消激活它的所有节点上的卷组：
    ``` literallayout
    # vgchange --activate n myvg
    ```
2.  重命名现有卷组：
    ``` literallayout
    # vgrename myvg myvg1
    Volume group "myvg" successfully renamed to "myvg1"
    ```
    您还可以通过指定设备的完整路径来重命名卷组：
    ``` literallayout
    # vgrename /dev/myvg /dev/myvg1
    ```
:::
::: itemizedlist
**其他资源**
-   `vgrename(8)`{.literal} 手册页
:::
:::
:::
[]{#managing-lvm-logical-volumes_configuring-and-managing-logical-volumes.html}
::: chapter
::: titlepage
# []{#managing-lvm-logical-volumes_configuring-and-managing-logical-volumes.html#managing-lvm-logical-volumes_configuring-and-managing-logical-volumes}第 4 章 管理 LVM 逻辑卷 {.title}
:::
逻辑卷是文件系统、数据库或应用可以使用的虚拟块存储设备。要创建 LVM
逻辑卷，物理卷(PV)合并为一个卷组(VG)。这会创建一个磁盘空间池，用于分配
LVM 逻辑卷（LV）。
::: section
::: titlepage
# []{#managing-lvm-logical-volumes_configuring-and-managing-logical-volumes.html#overview-of-logical-volumes_managing-lvm-logical-volumes}逻辑卷概述 {.title}
:::
管理员可以在不损坏数据的情况下增大或缩小逻辑卷，这与标准磁盘分区不同。如果卷组中的物理卷位于不同的驱动器或者
RAID 阵列中，那么管理员也可以跨存储设备分配逻辑卷。
如果您缩小逻辑卷到比卷中数据所需的容量小的容量时，则可能会丢失数据。此外，某些文件系统无法缩小。为确保最大的灵活性，创建逻辑卷以满足您当前的需求，并使超额存储容量保持未分配。您可以根据需要安全地扩展逻辑卷使用未分配空间。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
在 AMD、Intel、ARM 和 IBM Power Systems 服务器中,引导装载程序无法读取
LVM 卷。您必须为您的 `/boot`{.literal} 分区创建一个标准的非 LVM
磁盘分区。在 IBM Z 中，`zipl`{.literal} 引导装载程序通过线性映射在 LVM
逻辑卷中支持 `/boot`{.literal}。默认情况下，安装过程总是在 LVM 卷中创建
`/`{.literal} 和 swap 分区，物理卷中有一个单独的 `/boot`{.literal}
分区。
:::
以下是不同类型的逻辑卷：
::: variablelist
[线性卷]{.term}
:   线性卷将来自一个或多个物理卷的空间集合到一个逻辑卷中。例如：如果您有两个
    60GB 的磁盘，您可以创建一个 120GB 的逻辑卷。物理存储是连在一起的。
[条带化逻辑卷]{.term}
:   当您向 LVM
    逻辑卷写入数据时，文件系统会在基本物理卷之间部署数据。您可以通过创建一个条状逻辑卷来控制将数据写入物理卷的方法。对于大量连续的读取和写入，这样可以提高数据输入/输出的效率。
    条带化通过以 round-robin
    模式向预定数目的物理卷写入数据来提高性能。使用条带，I/O
    可以并行执行。在某些情况下，这可能会为条带中的每个额外物理卷增加近线性能。
[RAID 逻辑卷]{.term}
:   LVM 支持 RAID 0、1、4、5、6 和 10。RAID
    逻辑卷不是集群感知的。当您创建 RAID 逻辑卷时，LVM
    会创建一个元数据子卷，它是阵列中的每个数据或奇偶校验子卷的大小的一个区块。
[精简配置的逻辑卷（精简卷）]{.term}
:   使用精简配置的逻辑卷，您可以创建大于可用物理存储的逻辑卷。通过创建精简配置的卷集合，系统可以分配您使用的内容，而不是分配请求的完整存储量
[快照卷]{.term}
:   LVM
    快照功能提供在特定时间创建设备的虚拟镜像且不会造成服务中断的功能。在提取快照后，当对原始设备进行修改时，快照功能会生成有变化的数据区域的副本，以便重建该设备的状态。
[精简配置的快照卷]{.term}
:   使用精简配置的快照卷，可以有更多虚拟设备存储在同一个数据卷中。精简置备的快照很有用，因为您不会复制在给定时间要捕获的所有数据。
[缓存卷]{.term}
:   LVM 支持在较慢的块设备中使用快速块设备（比如 SSD
    驱动器）作为写入或者写入缓存。用户可以创建缓存逻辑卷来提高其现有逻辑卷的性能，或者创建由小而快速的设备组成的新缓存逻辑卷，再加上一个大型、较慢的设备。
:::
:::
::: section
::: titlepage
# []{#managing-lvm-logical-volumes_configuring-and-managing-logical-volumes.html#creating-lvm-logical-volume_managing-lvm-logical-volumes}创建 LVM 逻辑卷 {.title}
:::
此流程描述了如何从 [*myvg*]{.emphasis} 卷组中创建 [*mylv*]{.emphasis}
LVM 逻辑卷(LV)，该组使用
[*/dev/vdb1*]{.emphasis}、[*/dev/vdb2*]{.emphasis} 和
[*/dev/vdb3*]{.emphasis} 物理卷创建。
::: itemizedlist
**先决条件**
-   已安装 `lvm2`{.literal} 软件包。
-   已创建卷组。如需更多信息，请参阅[创建 LVM
    卷组](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_and_managing_logical_volumes/managing-lvm-volume-groups_configuring-and-managing-logical-volumes#creating-lvm-volume-group_managing-lvm-volume-groups){.link}。
:::
::: orderedlist
**步骤**
1.  创建逻辑卷：
    ``` literallayout
    # lvcreate -n mylv -L 500M myvg
    ```
    使用 `-n`{.literal} 选项将 LV 名称设置为 [*mylv*]{.emphasis}，并使用
    `-L`{.literal} 选项以 Mb 为单位设置 LV
    的大小，但可以使用任何其他单元。默认情况下 LV
    类型是线性的，但用户可以使用 `--type`{.literal} 选项指定所需的类型。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    如果 VG
    没有足够数量的可用物理扩展用于请求的大小和类型，该命令将失败。
    :::
2.  根据您的要求，使用以下命令之一查看创建的逻辑卷：
    ::: orderedlist
    1.  `lvs`{.literal}
        命令提供了可以对其进行格式配置的逻辑卷信息，每行显示一个逻辑卷。
        ``` literallayout
        # lvs
          LV   VG   Attr         LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert
         mylv myvg -wi-ao----   500.00m
        ```
    2.  `lvdisplay`{.literal}
        命令以固定格式显示逻辑卷属性，如大小、布局和映射：
        ``` literallayout
        # lvdisplay -v /dev/myvg/mylv
          --- Logical volume ---
          LV Path                /dev/myvg/mylv
          LV Name                mylv
          VG Name                myvg
          LV UUID                YTnAk6-kMlT-c4pG-HBFZ-Bx7t-ePMk-7YjhaM
          LV Write Access        read/write
        [..]
        ```
    3.  `lvscan`{.literal} 命令扫描系统中所有逻辑卷并列出它们：
        ``` literallayout
        # lvscan
         ACTIVE                   '/dev/myvg/mylv' [500.00 MiB] inherit
        ```
    :::
3.  在逻辑卷中创建文件系统。以下命令在逻辑卷中创建 `xfs`{.literal}
    文件系统：
    ``` literallayout
    # mkfs.xfs /dev/myvg/mylv
    meta-data=/dev/myvg/mylv       isize=512    agcount=4, agsize=32000 blks
             =                       sectsz=512   attr=2, projid32bit=1
             =                       crc=1        finobt=1, sparse=1, rmapbt=0
             =                       reflink=1
    data     =                       bsize=4096   blocks=128000, imaxpct=25
             =                       sunit=0      swidth=0 blks
    naming   =version 2              bsize=4096   ascii-ci=0, ftype=1
    log      =internal log           bsize=4096   blocks=1368, version=2
             =                       sectsz=512   sunit=0 blks, lazy-count=1