title:Enabling IP Protection for Outsourced Integrated Circuit Design
author:Xingliang Yuan and
Cong Wang and
Kui Ren
Enabling IP Protection for Outsourced Integrated Circuit
Design
Xingliang Yuan
Department of CS
Cong Wang
Department of CS
City University of Hong Kong
City University of Hong Kong
Hong Kong
Hong Kong
PI:EMAIL
PI:EMAIL
Kui Ren
Department of CSE
University at Buffalo
United States
PI:EMAIL
ABSTRACT
As today’s integrated circuit (IC) has easily involved millions
and even billions of gates, known as very large-scale integra-
tion (VLSI), one natural trend is to move such prohibitive in-
house design procedure to the low-cost public cloud. How-
ever, such a migration is also raising a challenging request
on practical and privacy-preserving techniques to safeguard
the sensitive IC design data, i.e., the Intellectual Property
(IP). In this paper, we initiate the ﬁrst study along the direc-
tion, and present a practical system for privacy-preserving
IC timing analysis, which refers to an essential and expen-
sive procedure via repeated evaluations of timing delays on a
gate-level circuit. For privacy protection, our system lever-
ages a key observation that many IP blocks are universally
reused and shared across diﬀerent IC designs, and thus only
a small portion of critical IP blocks need to be protected. By
carefully extracting such critical design data from the whole
circuit, our system only outsources the non-critical data to
the public cloud. As such “data splitting” does not readily
facilitate correct timing analysis, we then develop specialized
algorithms to enable the public cloud to take only the non-
critical data and return intermediate results. Such results
can later be integrated with critical design data by the local
server for fast timing analysis. We also propose a heuristic
algorithm to considerably reduce the bandwidth cost in the
system. Through rigorous security analysis, we show our
system is resilient to IC reverse engineering and protects
both the critical IP gate-level design and functionality. We
evaluate our system over large IC benchmarks with up to a
million of gates to show the eﬃciency and eﬀectiveness.
Categories and Subject Descriptors
B.7 [Integrated Circuits]: Miscellaneous; K.6.5 [Manage-
ment of Computing and Information Systems]: Secu-
rity and Protection
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore, Singapore
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714601 .
Keywords
Secure outsourcing; Integrated circuits; IP protection; Tim-
ing analysis
1.
INTRODUCTION
The steady scaling down of transistor size and remark-
able innovations in electronic design automation (EDA) have
made it possible today to ﬁt millions and even billions of
gates into a single integrated circuit (IC), known as very
large-scale integration (VLSI). To deliver the circuit ﬁnal
physical layout from the design speciﬁcation [25], engineers
have to comply with the rigorous and expensive IC design
procedures over such large-scaled data, including functional
veriﬁcation, circuit equivalence checking, timing and power
analysis, etc. For design optimization, such procedure needs
to be further conducted in an iterative and incremental man-
ner, exacerbating the relentlessly growing design complexity
and the inexorable demand of computing resources. To eco-
nomically keep up with the intensive design processing on
VLSI circuits, one natural trend is to move the in-house
procedures to the public cloud, taking advantages of its low-
cost and scalable computing resources, and parallel batch
processing capabilities [2]. While cloud provides opportuni-
ties and means to deliver greater value with cheaper cost,
such a migration is also demanding practical and privacy-
preserving techniques to safeguard the sensitive IC design
data, i.e., the Intellectual Property (IP)1 [2, 18, 26].
Previous study has shown hardware infringement could re-
sult in dramatic capital loss at least over $5 billion USD per
year [26]. Hence, IP protection is indispensable in IC design.
To defend against IP infringement, various hardware water-
marking [1] and ﬁngerprinting techniques [23] have been pro-
posed, with the goal of tagging and tracking possible illegal
IP usages after physical hardware manufacturing. Mean-
while, some proactive protection approaches, like IC obfus-
cation via camouﬂage gates [21] and splitting manufactur-
ing [15], have also been proposed recently, with the goal of
concealing IP at the stage of manufacturing. Although ef-
fective, we argue that all those designs are focusing on the
IP protection after the IC design procedure has been com-
pletely ﬁnalized. None of them have considered the potential
security challenges, when the overall IC design procedures
are migrated oﬀ premises, i.e., on the public cloud.
1IP block is a reusable unit of hardware description language
(HDL), logic, cell, or layout design that is the intellectual
property of one party.
237Figure 1: IC design ﬂow
In this paper, we initiate the study of this challenging
problem, how to enable secure IC design outsourcing with
privacy-assured IP protection, and present our ﬁrst result
in this eﬀort, a practical system for outsourced privacy-
preserving timing analysis on integrated circuits. As an
essential procedure of IC design shown in Figure 1, tim-
ing analysis evaluates the circuit timing performance and
veriﬁes the timing constraints to guarantee the circuit de-
sign speciﬁcation and runtime reliability before IC fabrica-
tion [25]. To tolerate process variations in fabrication, one
widely adopted approach is statistical timing analysis, which
requires repeated evaluations of the longest path delay on
a gate-level circuit timing graph via Monte Carlo simula-
tions [11]. To predict IC’s timing performance with a mea-
surable conﬁdence, such statistical simulations usually need
to be evaluated more than tens of thousands of times. And
the cost of each simulation is in proportional to the size of
circuits, i.e., the number of gates and interconnects [25]. In
particular, on a modern PC with an Intel 3.6GHz CPU, it
takes nearly an hour on a circuit with about 25, 000 logic
gates to perform 64, 000 Monte Carlo simulations [7]. Since
today’s IC design can easily involve millions and even bil-
lions of gates, the resulting computation cost is prohibitive
even for well-ﬁnanced IC design companies.
Design intuitions. In order to enable practical and privacy-
preserving timing analysis on integrated circuits, our sys-
tem leverages a key observation on IP reuse design philoso-
phy [19, 25]. Namely, many IP blocks are universally reused
and shared across diﬀerent IC designs for the saving of re-
dundant development eﬀort, and thus only a small portion
of critical IP blocks need to be protected, especially those
newly designed ones. The reasons are the following: Firstly,
many IP blocks in IC are standard design units, such as
memory, bus I/O, arithmetic units, etc [25]. They are by
nature non-sensitive design data and do not need to be pro-
tected. Secondly, as indicated by recent surveys [5, 14], the
percentage of the newly designed blocks on a full IC today
is just less than 10% as of 2014. And this percentage will
be continuously decreasing, due to the increasing reuse of
standard or aging IP blocks across diﬀerent IC designs.
Based on above observations, our design intuition is to
carefully extract the small portion of critical design data
from the whole circuit on the local private server, and only
outsource the large portion of non-critical design data to the
public cloud, so as to achieve the IP protection. We argue
that such a design choice, i.e., placing all non-critical IP
blocks on the public cloud, is also beneﬁcial to the IP reuse
philosophy. Many computations over the non-critical design
data can be carried out only once and shared/reused on a
globally available cloud infrastructure.
Design challenges. However, simply splitting the crit-
ical design data from the non-critical one does not readily
facilitate correct timing analysis. This is because most state-
of-the-art algorithms for ﬁnding the longest path delay on
a circuit timing graph require the sequential processing of
each graph vertex2 Directly applying them will inevitably
bring in huge interactions between the public cloud and the
private server due to our “data splitting”. Thus, we have to
develop a new algorithm, which should break the computa-
tion dependency between the critical and non-critical data,
such that cloud can ﬁnish the intensive workloads only based
on the non-critical data and return intermediate results. For
that purpose, we have carefully crafted a splitting algorithm
on the circuit timing graph, by leveraging that the subpaths
of longest paths are also longest paths. The resulting algo-
rithm allows only one-round interaction, where the interme-
diate results can be returned in one batch and integrated by
the local private server for ﬁnalizing timing analysis. The
protection of IP lies in the fact that all critical IPs never
leave the on-premises server.
Besides the new algorithm design, another practical chal-
lenge faced in our system is how to reduce the size of inter-
mediate results returned by the public cloud. Because the
Monte Carlo simulations on VLSI circuits normally need
to be conducted for tens of thousands of times to achieve
suﬃcient conﬁdent timing analysis results, the size of inter-
mediate results can be large. To reduce the bandwidth cost,
we propose a heuristic algorithm that is able to transform
the intermediate results, represented as timing graphs, into
equivalent graphs with much fewer edges.
Contributions. Our contributions are summarized below:
• We propose the ﬁrst practical and privacy-preserving
system to outsource timing analysis, one of the most
expensive and critical IC design procedures, on inte-
grated circuits. The system delicately extracts and
reserves the critical IP blocks and only outsources the
non-critical design data to the public cloud.
• Our design enables cloud to conduct intensive work-
loads on the non-critical data only and return inter-
mediate results, which can later be integrated by the
local server with critical design data for ﬁnalizing tim-
ing analysis. We also design a heuristic algorithm to
considerably reduce the size of the intermediate results
for better communication eﬃciency.
• Our security analysis demonstrates our system is re-
silient to the state-of-the-art IC reverse engineering [24]
on the critical IP gate-level design and functionality.
Especially for the IP functionality protection, we prove
that our system is secure such that the reverse engi-
neering, i.e., I/O pattern analysis reveals the critical
IP functionality with negligible probability.
• We implement our system prototype and evaluate the
system performance on a large scale IC benchmark
IWLS2005 [3], which contains circuits with nearly one
million gates. Our evaluation shows the local compu-
tational saving is up to 91% when the critical IP blocks
are around 10% of the whole IC, as indicated in recent
surveys [5, 14].
Our system makes one-step closer towards secure IC de-
sign migration to the public cloud [2]. It can be considered
as a building-block for other EDA applications to further
encourage IP-protected IC design outsourcing via IP reuse.
2One well-known algorithm is the Program Evaluation and
Review Technique (PERT) [25] which traverses the graph
vertices in the topologically sorted order. Details can be
seen in Section 2 and Appendix.
Design ProcessTiming AnalysisOKLayout to ManufactureYNHardware Specification238(a) Gate-level Design
(b) Timing Graph
Figure 2: Gate-level design and timing graph of half-adder
Figure 3: System design overview
Organization. Section 2 introduces the preliminaries and
notations. Section 3 presents the system model, attack as-
sumptions, and design goals. Afterwards, Section 4 elabo-
rates on our system design. Security analysis is discussed in
Section 5. Prototype evaluations are reported in Section 6.
Section 7 gives a comprehensive overview on related works,
with Section 8 concluding the whole paper.
2. PRELIMINARIES AND NOTATIONS
IC design ﬂow. An overview of IC design ﬂow is shown
in Figure 1: design engineers ﬁrst describe IC’s functional-
ity and behaviour by hardware description language (HDL)
according to design speciﬁcations. The logic-synthesis then
transforms HDL codes to the logic gate-level design. By se-
lecting the logic gates from the standard cell library3, IC’s
gate-level design, also known as netlist [25] is generated with
collections of standard cells and electronic connections. Af-
ter that, timing analysis estimates the expected time for how
long the signal propagates from IC’s inputs to outputs over
its gate-level design. Only if there is no violation on tim-
ing constraints and the timing performance meets the design
speciﬁcation, the circuit layout will be generated and deliv-
ered for fabrication. Timing analysis is supposed to ensure
the circuit performance and runtime reliability.
Timing analysis. Precisely, timing analysis is to evaluate
IC’s longest path delay. The problem is formulated as the
longest path problem on a weighted directed-acyclic graph
(DAG) [7, 11]. The timing graph G(V, E) is derived from
the gate-level netlist, where vertex set V = {vi} represents
gates, inputs, and outputs, directed edge set E = {ei,j} rep-
resents interconnects (electronic wires). Adjacent lists are
used to represent G(V, E), where vi.adjout, vi.adjin denote
vi’s outgoing and incoming neighbors respectively. Edge ei,j
is assigned with a non-negative weight di, which corresponds
to the gate delay4. Figure 2 illustrates the gate-level design
of 1 bit half-adder and its modeled timing graph, where v1
and v2 represent input x and y; v5 and v6 represent output
s and c; v3 is 2-input xor gate and v4 is 2-input and gate;
source S connects to all inputs and sink D is connected from
all outputs. Given the timing graph, one common approach,
the Program Evaluation and Review Technique (PERT), can
be used to obtain the longest path delay through sequen-
tial computations following a vertex-based linear order, i.e.,
topological-order (see Appendix).
To tolerate the eﬀects of process variations in fabrication,
which lead to random delays at logic gates and intercon-
nects, statistical timing analysis (STA) via Monte Carlo sim-
3The standard cell library usually contains the logic gate
schematic, layout, abstract and timing information, etc.
4Following the standard practice [7,11], we ignore the inter-
connect delay as it is usually negligible compared to the gate
delay. We note that it does not aﬀect the design correctness.
ulations are widely adopted. In STA, statistical models of
device parameters and delay are ﬁrst built. Then the proba-
bility distribution of IC’s longest path delay is estimated via
Monte Carlo simulations, which delivers the accurate timing
measurements and encompasses the complicated statistical
models [11]. Within simulations, process or device param-
eters are sampled from their statistical models to generate
the deterministic delays based on the delay model. Then
PERT runs repeatedly through the full-circuit timing graph
to obtain the longest path distribution which is deﬁned as
χ and derived from {D1, . . . , Dn}, where Di is the longest
path delay for the ith simulation. Because our system care-
fully extracts the critical timing graph from the non-critical
one and aims to intentionally separate the computation on
the two part, PERT is no longer directly applicable, because
of its requirement on the sequential processing of vertices.
3. PROBLEM STATEMENT
3.1 System Model
Our system includes two entities, as shown in Figure 3:
the local private server (LS), who may represent IC design
companies; the public cloud servers (CS), who provide com-
puting as services. LS attempts to leverage CS to perform
timing analysis on integrated circuits for cost saving and
productivity improvement, while protecting the critical IPs
from CS.
Our design leverages the IC reuse philosophy and achieves
privacy-preserving by extracting the critical IP design data,
such as those newly designed blocks, from the whole circuit.
LS ﬁrst formulates a full-circuit timing graph G, and then
extracts the critical subgraphs Gc from G to reserve it lo-
cally. Here Gc covers all the critical IP blocks. After that,
the remaining timing graph, denoted as Go, is sent to CS,
who will conduct intensive Monte Carlo simulation work-
loads over Go and return intermediate results, denoted as
Gr. Gr is a reduced size timing graph with multiple weights
per edge derived from multiple Monte Carlo simulations.
Upon receiving Gr, LS integrates Gr with Gc to form a new
graph Gi, and ﬁnalizes timing analysis to derive the longest
path distribution χ.
3.2 Threat Models and Attack Assumptions
In this paper, we assume LS is trustworthy, and mainly
consider an “honest-but-curious” public cloud, which per-
forms the speciﬁed computations faithfully but is interested
in the critical IC design data theft. Typically, two types of
design data protection are considered for critical IP blocks:
1) critical gate-level design; 2) critical IP function-
ality.
In our design, cloud only sees the outsourced non-
critical IP blocks, while the critical IP blocks, especially
their gate-level designs and related computations, never leave
xyscSv1v2v3v4v5v6DComputeExtractIntegrateLSCSGGoGiGr239the local private server. Hence, we mainly focus on the IP
functionality protection against IC reverse engineering.
As widely recognized by the state-of-the-art [21, 24], the
most eﬀective reverse engineering on IP functionality can
be summarized as I/O pattern analysis. Explicitly, given
a suﬃcient number of random input bit sequences and the
corresponding bit outputs (I/O patterns), the IP function-
ality might be inferred or even resolved by ﬁnding the input
sequence and the output sequence matching between the
unknown IP blocks and existing IP blocks with known func-
tionalities. We assume “honest-but-curious” cloud tries to
infer the possible I/O vertices of critical IPs from the non-
critical IPs, which it can see, for I/O pattern analysis. We
want to achieve that such reverse engineering will hardly
succeed with negligible probability.
3.3 Design Goals
With above attack models and assumptions, our system
should achieve the following design goals: 1) Critical data
protection: no critical design data including gate-level de-
sign and functionalities can be leaked or reverse engineered
from the input or the output of the outsourced comput-