title:From Patches to Honey-Patches: Lightweight Attacker Misdirection,
Deception, and Disinformation
author:Frederico Araujo and
Kevin W. Hamlen and
Sebastian Biedermann and
Stefan Katzenbeisser
From Patches to Honey-Patches: Lightweight
Attacker Misdirection, Deception, and Disinformation∗
Frederico Araujo Kevin W. Hamlen
The University of Texas at Dallas
{frederico.araujo, hamlen}@utdallas.edu
Sebastian Biedermann Stefan Katzenbeisser
Technische Universität Darmstadt
{biedermann, katzenbeisser}@seceng.informatik.tu-darmstadt.de
ABSTRACT
Traditional software security patches often have the unfortu-
nate side-eﬀect of quickly alerting attackers that their attempts
to exploit patched vulnerabilities have failed. Attackers greatly
beneﬁt from this information; it expedites their search for
unpatched vulnerabilities, it allows them to reserve their ulti-
mate attack payloads for successful attacks, and it increases
attacker conﬁdence in stolen secrets or expected sabotage
resulting from attacks.
To overcome this disadvantage, a methodology is pro-
posed for reformulating a broad class of security patches into
honey-patches—patches that oﬀer equivalent security but
that frustrate attackers’ ability to determine whether their
attacks have succeeded or failed. When an exploit attempt
is detected, the honey-patch transparently and eﬃciently
redirects the attacker to an unpatched decoy, where the at-
tack is allowed to succeed. The decoy may host aggressive
software monitors that collect important attack information,
and deceptive ﬁles that disinform attackers. An implementa-
tion for three production-level web servers, including Apache
HTTP, demonstrates that honey-patching can be realized for
large-scale, performance-critical software applications with
minimal overheads.
Categories and Subject Descriptors: D.2.7 [Software
Engineering]: Distribution, Maintenance, and Enhancement;
D.4.6 [Operating Systems]: Security and Protection; K.6.5
[Management of Computing and Information Systems]: Secu-
rity and Protection—Unauthorized access
Keywords: Intrusion detection and prevention; Honeypots
1.
INTRODUCTION
Patching continues to be perhaps the most ubiquitous and
widely accepted means for addressing newly discovered security
vulnerabilities in commodity software products. Microsoft
∗This research was supported by ONR grant N00014-14-1-0030,
AFOSR grant FA9550-14-1-0173, NSF grant 1054629, CASED
and EC-SPRIDE Darmstadt, and BMBF grant 01C12S01V.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright 2014 ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660329.
alone released over 100 security bulletins spanning 330 sepa-
rate vulnerabilities in its products during 2013 [33]. However,
despite the increasingly prompt availability of security patches,
a majority of attacks in the wild continue to exploit vulnera-
bilities that are known and for which a patch exists [5, 9, 23].
This is in part because patch adoption is not immediate,
and may be slowed by various considerations, such as patch
compatibility testing, in some sectors.
As a result, even determined, resourceful attackers often
probe and exploit unpatched, patchable vulnerabilities in their
victims. For example, a 2013 security audit of the U.S. De-
partment of Energy revealed that 60% of DoE desktops lacked
critical patch updates, leading to a compromise and exﬁltra-
tion of private information on over 100,000 individuals [22].
The prevalence of unpatched systems has led to tools and
technologies via which attackers can quickly derive unique,
previously unseen exploits from patches [12], allowing them to
inﬁltrate vulnerable systems.
The obvious solution is, of course, to obey the golden rule
of “patch early, patch often.” However, once applied, typical
security patches have a signiﬁcant drawback—they advertise
that the system is patched. For example, a request that
yields garbage output from an unpatched server, but yields
an error message from a patched server, readily divulges
whether the server is vulnerable. Attackers can quickly and
eﬃciently probe such servers for known vulnerabilities to
discover patching lapses and prepare potent attacks.
To misdirect such attackers, we propose patching vulnera-
bilities in such a way that failed exploits appear to succeed.
This frustrates attackers’ ability to discern which apparent
vulnerabilities will actually divulge secrets or do damage
once fully exploited. We refer to such a patch as a honey-
patch. Honey-patches oﬀer equivalent security to conventional
patches, but respond to attempted exploits by transparently
redirecting the attacker’s connection to a carefully isolated
decoy environment. The decoy is unpatched, allowing the
attack to succeed, but gathers information about the threat
(e.g., collecting and analyzing previously unseen malware),
and feeds disinformation to the attacker in the form of falsiﬁed
data (cf., [11, 48, 62]).
As an illustration of where honey-patching could be useful,
consider the digital infrastructure mandated by the U.S. Pa-
tient Protection and Aﬀordable Care (“Obamacare”) Act [52].
The act entails the deployment of federal- and state-level web
servers that sell health care plans. These servers have been
identiﬁed as inviting targets of directed cyber-attacks, since
they receive a wealth of personally identifying information that
could be abused for identity theft and fraud [21]. Patching
these servers in the conventional way protects against known
Listing 1: Abbreviated patch for Heartbleed
Listing 2: Honey-patch for Heartbleed
1 + if (1 + 2 + payload + 16 > s->s3->rrec.length)
2 + return 0; //silently discard
exploits, but facilitates an attacker’s probing eﬀorts until an
unpatched vulnerability is found. Network-level ﬁlters redirect
known malware to honey-servers, but may not catch custom
malware payloads whose exploitive behavior is only detected
at execution.
However, honey-patching the servers and stocking the
decoy environments with false information that has been
red-ﬂagged in identity theft databases greatly increase risk for
attackers who manage to bypass other safeguards to reach
the decoy. Apparently successful attacks may then yield
tainted information that could lead to an arrest when used.
Even if the deception is eventually uncovered, defenders gain
valuable threat information by aggressively monitoring the
most dangerous attacks, and attacker reconnaissance eﬀorts
are impeded.
While the concept of honey-patching is straightforward,
realizing it in practice is not. To demonstrate and evaluate
its feasibility, we present an implementation for three high-
performance web servers: Apache HTTP, Lighttpd, and Nginx.
Our implementation, RedHerring, Redirects Exploits to
Deceptive Honeypot Environments for counteRReconnaissance
and INformation Gathering. We chose Apache as our ﬂag-
ship case-study due to its complexity (2.2M SLOC) and its
use in many security-sensitive contexts. For example, most
Obamacare web sites presently use it.
Our work includes the following contributions:
• We outline a strategy for easily reformulating many
vendor-supplied, source-level patches into equally secure
honey-patches that raise attacker risk and uncertainty.
• We introduce a light-weight, resource-eﬃcient, and
ﬁne-grained approach to transparently fork attacker
connections to a sandboxed decoy devoid of secrets.
• Our decoy generation incorporates a novel technique
for eﬃcient in-memory redaction of secrets that could
otherwise be abused by attackers.
• Implementations and evaluations for three production
web servers demonstrate that the approach is feasible for
large-scale, performance-critical software with minimal
overheads for legitimate users.
Section 2 ﬁrst outlines the honey-patching process and
presents our system design. Section 3 describes the architecture
in greater detail, and Section 4 explores the central challenge
of eﬃcient, live redirection of attacker sessions to decoys. Our
implementation is summarized in Section 5 and evaluated
in Section 6. Discussion and related work are presented in
Sections 7 and 8, respectively, and Section 9 concludes with a
summary of outcomes and future directions.
2. SYSTEM OVERVIEW
We ﬁrst outline the concept of a honey-patch, and then de-
scribe primary challenges and corresponding high-level design
decisions for honey-patching. Finally, we summarize important
technologies that undergird our implementation approach.
2.1 From Patches to Honey-Patches
Listing 1 shows an abbreviated patch in diﬀ style for the
Heartbleed OpenSSL buﬀer over-read vulnerability (CVE-
2014-0160) [14]—one of the most signiﬁcant vulnerability
if (1 + 2 + payload + 16 > s->s3->rrec.length)
hp fork();
return 0; //silently discard
hp skip(return 0); //silently discard
1
2 + {
3 +
4 -
5 +
6 + }
disclosures in recent history, aﬀecting a majority of then-
deployed web servers, including Apache. The patch introduces
a conditional that validates SSL/TLS heartbeat packets,
declining malformed requests. Prior to being patched, attackers
could exploit this bug to acquire sensitive information from
many web servers.
This patch exempliﬁes a common vulnerability mitigation:
dangerous inputs or program states are detected via a boolean
test, with positive detection eliciting a corrective action.
The corrective action is typically readily distinguishable by
attackers—in this case, the attacker request is silently declined.
As a result, the patched and unpatched programs diﬀer only
on attack inputs, making the patched system susceptible to
probing. Our goal in this work is to introduce a strategy
whereby administrators of products such as Apache can
easily transform such patches into honey-patches, whose
corrective actions impede attackers and oﬀer strategic beneﬁts
to defenders.
Toward this end, Listing 2 presents an alternative, honey-
patched implementation of the same patch.
In response
to a malformed input, the honey-patched application forks
itself onto a conﬁned, ephemeral, decoy environment, and
behaves henceforth as an unpatched, vulnerable version of
the software. Speciﬁcally, line 3 forks the user session to
a decoy container, and macro hp_skip in line 5 elides the
rejection in the decoy container so that the attack appears
to have succeeded. Meanwhile, the attacker session in the
original container is safely terminated (having been forked to
the decoy), and legitimate, concurrent connections continue
unaﬀected.
Observe that the diﬀerences between the patch and the
honey-patch are quite minor, except for the ﬁxed cloning
infrastructure that the honey-patch code references, and that
can be maintained separately from the server code. This
allowed us to formulate a Heartbleed honey-patch within
hours of receiving the vulnerability disclosure on April 7,
facilitating a quick, aggressive response to the threat [53]. In
general, only a superﬁcial understanding of many patches is
required to convert them to honey-patches of this form. (A
more systematic study of honey-patchable patches is presented
in §6.) However, the cloning infrastructure required to facilitate
eﬃcient, transparent, and safe redirection to decoys demands
a careful design.
2.2 Challenges & Design Decisions
Although the honey-patching approach described above is
simple on the surface, there are many signiﬁcant security and
performance challenges that must be surmounted to realize
it in practice. For example, a na¨ıve forking implementation
copies any secrets in the victim process’s address space, such as
encryption keys of concurrent sessions, over to the child decoy.
In a honey-patching framework this would be disastrous, since
the attack is allowed to succeed in the decoy, thereby giving
the attacker potential access to any secrets it may contain.
Moreover, practical adoption requires that honey-patches
(1) introduce almost no overhead for legitimate users, (2) per-
form well enough for attackers that attack failures are not
placarded, and (3) oﬀer high compatibility with software that
boasts aggressive multi-processing, multi-threading, and active
connection migration across IPs. Solutions must be suﬃciently
modular and generic that administrators require only a su-
perﬁcial, high-level understanding of each patch’s structure
and semantics to reformulate it as an eﬀective honey-patch.
Speciﬁcally, we envision the following practical requirements:
1. Remote forking of attacker sessions must happen live,
with no perceptible disruption in the target application;
established connections must not be broken.
2. Decoy deployment must be fast, to avoid oﬀering overt,
reliable timing channels that advertise the honey-patch.
3. All sensitive data must be redacted before the decoy
resumes execution.
Together, these requirements motivate three main design
decisions. First, the required time performance precludes
system-level cloning (e.g., VM cloning [13]) for session forking;
instead, we employ a lighter-weight, ﬁner-grained alternative
based on process migration through checkpoint-restart [41].
To scale to many concurrent attacks, we use an OS-level
virtualization technique to deploy forked processes to decoy
containers, which can be created, deployed, and destroyed
orders of magnitude faster than other virtualization techniques,
such as full virtualization or para-virtualization [60].
Second, our approach to remote session forking beneﬁts
from the synergy between mainstream Linux kernel APIs and
user-space tools, allowing for a small freezing time of the target
application. To maintain established connections when forking,
we have conceived and implemented a connection relocation
procedure that allows for transparent session migration.
Third, to guarantee that successful exploits do not aﬀord
attackers access to sensitive data stored in application memory,
we have implemented a memory redaction and light-weight syn-
chronization mechanism during forking. This censors sensitive
data from process memory before the forked (unpatched) ses-
sion resumes. Forked decoys host a deceptive ﬁle system that
omits all secrets, and that can be laced with disinformation to
further deceive, delay, and misdirect attackers.
2.3 Threat Model