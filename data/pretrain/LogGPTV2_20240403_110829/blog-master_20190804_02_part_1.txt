## PostgreSQL 索引推荐 - HypoPG , pg_qualstats         
### 作者                                                                                                                                                                      
digoal                                                                                                                                                                      
### 日期                                                                                                                                                                      
2019-08-04                                                                                                                                                                       
### 标签                                                                                                                                                                      
PostgreSQL , 索引推荐 , pg_qualstats , HypoPG      
----                                                                                                                                                                
## 背景       
从经验来看，数据库超过半数的查询性能问题可能是索引创建不当或未使用索引造成的。索引解决了查询时的IO，CPU放大问题。（全表扫描或放大性范围扫描，以及recheck或filter大量无效数据），又或者是离散IO导致：    
[《PostgreSQL index include - 类聚簇表与应用(append only, IoT时空轨迹, 离散多行扫描与返回)》](../201905/20190503_03.md)     
又或者是index tree放大导致（例如bound box）：    
[《PostgreSQL 空间st_contains，st_within空间包含搜索优化 - 降IO和降CPU(bound box) (多边形GiST优化)》](../201710/20171004_01.md)      
又或者是过滤不精准导致：    
[《HTAP数据库 PostgreSQL 场景与性能测试之 47 - (OLTP) 空间应用 - 高并发空间位置更新、多属性KNN搜索并测（含空间索引）末端配送、新零售类项目》](../201711/20171107_48.md)    
总之，索引非常重要。    
那么如何快速的了解数据库的性能问题在哪？    
[《PostgreSQL Oracle 兼容性之 - performance insight - AWS performance insight 理念与实现解读 - 珍藏级》](../201901/20190125_02.md)     
如何快速的知道数据库通过创建索引可以提速？    
## 例子    
[《PostgreSQL SQL自动优化案例 - 极简，自动推荐索引》](../201801/20180111_02.md)      
[《PostgreSQL 虚拟|虚假 索引(hypothetical index) - HypoPG》](../201710/20171030_03.md)      
[《powa4 PostreSQL Workload Analyzer》](../201905/20190520_01.md)      
[《PostgreSQL 商用版本EPAS(阿里云ppas(Oracle 兼容版)) 索引推荐功能使用》](../201801/20180113_02.md)         
## 原理    
1、全表扫描，平均每次扫描的记录多，返回的记录少。说明可以创建索引解决，使用索引提高过滤性。    
```    
postgres=# create table st1(id int);    
CREATE TABLE    
postgres=# create table st2(id int);    
CREATE TABLE    
postgres=# insert into st1 select generate_series(1,1000000);    
INSERT 0 1000000    
postgres=# insert into st2 select generate_series(1,1000000);    
INSERT 0 1000000    
postgres=# select * from st1 where id=1;    
 id     
----    
  1    
(1 row)    
postgres=# select * from st2 limit 1;    
 id     
----    
  1    
(1 row)    
```    
st1 全表扫描一次，扫描了所有记录来过滤where id=1    
st2 全表扫描一次，但是只扫描了1条记录，因为条件是limit 1    
```    
postgres=# select * from pg_stat_all_tables where relname='st1';    
-[ RECORD 1 ]-------+------------------------------    
relid               | 21423    
schemaname          | public    
relname             | st1    
seq_scan            | 1    
seq_tup_read        | 1000000    
idx_scan            |     
idx_tup_fetch       |     
n_tup_ins           | 1000000    
n_tup_upd           | 0    
n_tup_del           | 0    
n_tup_hot_upd       | 0    
n_live_tup          | 1000000    
n_dead_tup          | 0    
n_mod_since_analyze | 0    
last_vacuum         |     
last_autovacuum     |     
last_analyze        |     
last_autoanalyze    | 2019-08-04 10:19:45.443907+08    
vacuum_count        | 0    
autovacuum_count    | 0    
analyze_count       | 0    
autoanalyze_count   | 1    
postgres=# select * from pg_stat_all_tables where relname='st2';    
-[ RECORD 1 ]-------+------------------------------    
relid               | 21426    
schemaname          | public    
relname             | st2    
seq_scan            | 1    
seq_tup_read        | 1    
idx_scan            |     
idx_tup_fetch       |     
n_tup_ins           | 1000000    
n_tup_upd           | 0    
n_tup_del           | 0    
n_tup_hot_upd       | 0    
n_live_tup          | 1000000    
n_dead_tup          | 0    
n_mod_since_analyze | 0    
last_vacuum         |     
last_autovacuum     |     
last_analyze        |     
last_autoanalyze    | 2019-08-04 10:19:45.522465+08    
vacuum_count        | 0    
autovacuum_count    | 0    
analyze_count       | 0    
autoanalyze_count   | 1    
```    
所以st1有问题，st2没有问题。    
2、索引扫描，平均每次扫描的记录多，占所有记录的比例高，说明用错了索引、或者random_page_cost参数不对（太低）、或者禁止了全表扫描、或者使用hint强制使用了索引、或者使用了绑定变量数据倾斜导致使用了错误的plan。等。    
```    
postgres=# create index idx_st1 on st1(id);    
CREATE INDEX    
postgres=# create index idx_st2 on st2(id);    
CREATE INDEX    
```    
st1使用全表扫描，过滤100万记录。    
```    
postgres=# explain select count(*) from st1 where id  Seq Scan on st1  (cost=0.00..16925.00 rows=999999 width=0)    
-[ RECORD 3 ]----------------------------------------------------------------    
QUERY PLAN |         Filter: (id   Index Only Scan using idx_st2 on st2  (cost=0.42..24945.01 rows=999999 width=0)    
-[ RECORD 3 ]-------------------------------------------------------------------------------------    
QUERY PLAN |         Index Cond: (id < 1000000)    
postgres=# select count(*) from st2 where id<1000000;    
-[ RECORD 1 ]-    
count | 999999    
```    
从统计信息可以看到st2的索引扫描，扫描的记录太多，说明索引过滤下不好，这个索引创建或使用的有问题。    
```    
postgres=# select * from pg_stat_all_tables where relname='st1';    
-[ RECORD 1 ]-------+------------------------------    
relid               | 21423    
schemaname          | public    
relname             | st1    
seq_scan            | 5    
seq_tup_read        | 3000000    
idx_scan            | 2    
idx_tup_fetch       | 2    
n_tup_ins           | 1000000    
n_tup_upd           | 0    
n_tup_del           | 0    
n_tup_hot_upd       | 0    
n_live_tup          | 1000000    
n_dead_tup          | 0    
n_mod_since_analyze | 0    
last_vacuum         |     
last_autovacuum     |     
last_analyze        |     
last_autoanalyze    | 2019-08-04 10:19:45.443907+08    
vacuum_count        | 0    
autovacuum_count    | 0    
analyze_count       | 0    
autoanalyze_count   | 1    
postgres=# select * from pg_stat_all_tables where relname='st2';    
-[ RECORD 1 ]-------+------------------------------    
relid               | 21426    
schemaname          | public    
relname             | st2    
seq_scan            | 4    
seq_tup_read        | 1000001    
idx_scan            | 3    
idx_tup_fetch       | 1000001    
n_tup_ins           | 1000000    
n_tup_upd           | 0    
n_tup_del           | 0    
n_tup_hot_upd       | 0    
n_live_tup          | 1000000    
n_dead_tup          | 0    
n_mod_since_analyze | 0    
last_vacuum         |     
last_autovacuum     |     
last_analyze        |     
last_autoanalyze    | 2019-08-04 10:19:45.522465+08    
vacuum_count        | 0    
autovacuum_count    | 0    
analyze_count       | 0    
autoanalyze_count   | 1    
```    
## 实现    
了解原理之后，我们会发现还少了点东西：    
1、我们并不知道数据库的哪些SQL是TOP SQL ，因为解决TOP SQL的话，性能提速最明显。    
2、我们只知道表有性能问题，并不知道是哪些SQL，哪些过滤条件引起的。    