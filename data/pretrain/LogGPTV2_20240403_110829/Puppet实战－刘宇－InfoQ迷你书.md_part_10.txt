配置信息，并追加如下内容，让Master启动4个进程，监听4个端口，指定 servertype 为
sha1=/usr/lib --with-http_gzip_static_module 
status_module 
 $ vim/usr/local/nginx/conf/vhosts/puppet.domain.com.conf
3）创建 puppet.domain.com.conf 文件，具体如下：
 PUPPETMASTER_EXTRA_OPTS="--Servertype=mongrel
2）修改/etc/sysconfig/puppetmaster文件。Puppet Master 在启动时会加载此文件，读取
location /production/file_content/files/ {
# File sections
upstream puppetmaster {
$ sudo gem install mongrel
安装 Mongrel 的方法如下：
 $ sudo make && make install
$./configure
location ~ /production/file_content/modules/.+/ 
server
 Modules files sections
 sudo
types {}
root /etc/puppet/modules;
alias /etc/puppet/files/;
 default_type application/x-raw
types {
ssl_verify_client
ssl_crl 
ssl_client_certificate /var/lib/puppet/ssl/ca/ca_crt.pem;
Ss1
Ss1
root
listen 8140;
ss1
 vim /etc/sysconfig/puppetmaster
server
l_certificate_key
l_certificate
server
server
_session_timeout
篇
-user=daemon
127.0.0.1:18142;
：127.0.0.1:18141;
127.0.0.1:18143;
--group=daemon 
 /var/lib/puppet/ssl/ca/ca_crl.pem;
 /var/lib/puppet/ssl/private_keys/puppet.domain.com.pem;
 optional;
5m:
on;
/etc/puppet;
--prefix=/usr/local/nginx/ -
--ssl_client_header=HTTP_X_SSL_
--with-http_stub_
---
## Page 65
Port:18142
Port: 18141
Stopping puppetmaster:
$ sudo/etc/init.d/puppetmaster restart
5）重启 Puppet Master，方法如下：
Port: 18143
Port:18140
Starting puppetmaster:
Port: 18140
include
$ sudo/usr/local/nginx/conf/nginx.conf
4）修改 nginx.conf，增加如下配置：
location modules。Puppet 模块目录。
 location files 。
Upstream。每个实例都在配置 Mongrel 时进行了定义。参考步骤1）。
Port:18143
Port: 18142
Port:
口
以上代码中定义了：
^/production/file_content/modules/([~/]+)/(.+)$ /$1/files/$2 break;
交予 Nginx 处理。
ss_certificate。配置 PuppetMaster CA 相关目录，用于处理验证CA 请求。
Issl on。开启 SSL 服务。
rewrite
default_type application/x-raw;
location
# Ask the puppetmaster for everything else
18141
proxy_read_timeout
proxy_temp_file_write_size
proxy_busy_buffers_size
proxy_buffers 
proxy_buffer_size
proxy_set_header
proxy_set_header
proxy_set_header
proxy_set_header
proxy_set_header
proxy_set_header
proxy_redirect
proxy_pass
vhosts/*.conf;
。处理文件请求，
，注意 alias 别名服务，
X-SSL-Issuer
X-SSL-Subject
X-Client-Verify
X-Forwarded-For
X-Real-IP 
Host
off;
http://puppetmaster;
65;
64k;
64k;
8 32k;
16k;
，可以将所有文件统一至此目录后
$ssl_client_i_dn;
$ssl_client_s_dn;
$proxy_add_x_forwarded_for;
$remote_addr;
$host;
第15章Puppet 架构扩展与分布式·237
[FAILED]
[FAILED]
[FAILED]
[FAILED]
---
## Page 66
238第四部分进阶篇
Puppet Agent 的证书是否由 Puppet CA 签发，Apache 会先验证请求。如果授权通过，则调用
验证请求，最后将 Apache 连接到 Puppet Master。在处理 SSL 验证请求时，Apache 会验证
使用 Passenger扩展模式时不需要单独启动 Puppet Master 服务。
此模式拥有极其强大的功能，能够自动增减集群进程的数量、对后续的部署显得非常简单,
Rails，即 Rack 应用内的一个 Web 服务器。Rails 官方推荐的最佳模式为：Apache+Passenger。
15.2.2
domain.com HTTP/1.1" 200 31
modules/nginx/nginx_logrote.sh? HTTP/1.1" 200
为了进一步验证配置的正确性，我们需要查看 Master 的日志与Nginx 服务的日志。
首先我们需要安装好 Apache 和 Passenger，然后配置Apache 处理Puppet Agent 的 SSL
 Passenger 是一个用于将 Ruby 程序嵌入执行的 Apache 2.x 的一个模块，它可以让你运行
到此就配置好了使用 Mongrel 替代 WEBRick 的单台 Puppet Master 扩展。
10.210.213.219
在 Master 端查看 Puppet 服务的日志：
Puppet Agent 并没有任务提示表示 Puppet Master 服务已经从 WEBRick 切换到了Nginx。
10.210.213.219
$ tail /var/log/nginx/access.log
在 Master 端查看 Nginx 服务的日志：
8）在 Puppet 客户端运行 puppet 命令检测配置是否正确，方法如下:
7）确认端口已启动，方法如下:
$ sudo/etc/init.d/nginx start
6）启用Nginx，方法如下:
spuooas to'e ut unz botezeo paustute (zaddna/uos·utewop'auabe//)
$ tail /var/log/message
notice: Finished catalog run in 3.04 seconds
doou- asa4-- woo·utewop·4addnd xaaras-- quabe zaddnd opns $
Starting nginx:
Apache+Passenger 模式
ccp
tcp
tcp
$ sudo netstat -ntlp lgrep ruby
ccp
tcp
D
0 0.0.0.0:3000
0 127.0.0.1:18140
127.0.0.1:18142
- [26/Jan/2013:21:51:10
/60tees/uotonpoxd/ 1s0d [0080+ 90:19:17:8t0z/ue5/97]
+0800]"PUT
0.0.0.0:* LISTEN
0.0.0.0:*
0.0.0.0:*
0.0.0.0:*
0.0.O.O:* LISTEN
"_ "I
LISTEN
LISTEN
LISTEN
 /production/report/agent.
OK
5830/ruby
7579/ruby
7550/ruby
7521/ruby
7492/ruby
---
## Page 67
配置 Apache 加载 Passenger 模块。
例详解讲解安装配置过程。
来配置 Apache。
SSL 证书存放在适当的位置。打开 Passenger 模块并为 Puppet Master 服务创建一个虚拟主机
Master。
在理解此模式的工作流原理后，配置起来将非常容易。我们以 Centos 5、Puppet 2.7为
本例的提示如下，在配置 Apache 虚拟主机时需要增加的 Passenger模块配置文件，具体如下:
运行 passenger-install-apache2-module 后，按回车键，默认会在大量输出提示后显示如何
$ gem sources --remove https://rubygems.org/
建议更换 Gem 镜像，再安装 Passenger，方法如下:
官方镜像经常出现因网络而引起的莫名其妙的问题，可以考虑采用淘宝免费提供的镜像。
$ gem ins tall rails
http://ruby.taobao.org
$ sudo passenger-install-apache2-module
$ sudo gem install rack passenger
2）安装 Passenger，方法如下：
$ sudo yum install httpd httpd-devel mod_ssl ruby-devel rubygems
1）安装 Apache，方法如下:
** CURRENT SOURCES ***
Installing RDoc documentation for passenger-3.0.19...
Installing
Installing
nstalling
Successfully installed passenger-3.0.19 
Successfully installed daemon_controller-1.1.1
Successfully installed rack-1.5.0
1
 gems installed
请确保只有
gem
，与此同时，Apache 会提供给 Puppet Agent一个证书用于验证服务端的真实证，再将
PassengerRuby /usr/bin/ruby
PassengerRoot 
em
em
 sources
sources
ruby.taobao.org
 RDoc
documentation
documentation for 
documentation for
 /usr/lib64/ruby/gems/1.8/gems/passenger-3.0.19
 http://rubygems.org/
rack-1.5.0.
 daemon_controller-1.1.1...
第15章Puppet架构扩展与分布式·239
---
## Page 68
240第四部分进阶篇
apache2/mod_passenger.s0
puppetmasterd/
rack/puppetmasterd/tmp 
认我们采用软件维护者提供的 config.ru 配置文件。
一些常用 API。Rack 适用于 Ruby 类的 HTTP 服务，可以用于多台服务器之间部署服务。默
建一个虚拟主机配置文件。Rack 为 Web 服务器提供了用来和 Puppet 服务交换请求和响应的
提示
创建 Rack 框架目录，并将 config.ru 文件复制至该目录，并赋予该文件 puppet 用户权限,
 $ sudo chown puppet /usr/share/puppet/rack/puppetmasterd/config.ru 
 $ sudo cp /usr/share/puppet/ext/rack/files/config.ru /usr/share/puppet/rack/
/axa/6t'0'e-rabuassed/swab/8't/swab/
Listen 8140
PassengerPoolIdleTime 600
PassengerMaxRequests 1000 
PassengerMaxPoolSize 12 
# Set this to about 1.5 times the number of CPU cores in your master:
PassengerUseGlobalQueue
PassengerHighPerformance On
PassengerRuby /usr/bin/ruby 
$ vim /etc/httpd/conf.d/puppet.domain.com.conf 
创建 Apache 虚拟主机文件，具体如下：
需要在 Puppet Master 创建 Rack 应用，创建一个目录用来存放 confg.ru 配置文件，并创
3）配置 Apache。
$ passenger-config --root 
 Stop processes if they sit idle for l0 minutes
 Recycle master processes after they service 10o0 requests
 sudo mkdir -p /usr/share/puppet/rack/puppetmasterd 
SSLCertificateKeyFile
SSLCertificateFile
SSLCipherSuite
SSLProtocol 
# Only allow high security cryptography. Alter if needed for compatibility.
SSLEngine On
On
/var/lib/puppet/ssl/private_keys/puppet-server.example.pem
HIGH:!ADH:RC4+RSA:-MEDIUM:-LOW:-EXP
All -SSLv2 
/var/lib/puppet/ssl/certs/puppet-server.example.com.pen
： tuning settings:
---
## Page 69
测试刚才的变更了，具体如下：
6）在 Puppet 客户端运行 puppet 命令检测配置是否正确，具体如下:
启动 Apache 服务后最好再确认一下端口与进程是否吻合，具体如下:
5）确认端口及进程。
$ sudo /etc/init.d/httpd start
我们已经完成了 Apache 和 Passenger 的安装和配置。现在可以启动 Apache 服务来准备
$ sudo netstat:
Starting httpd:
4）启动Apache。
SSLCARevocationFile
SSLCACertificateFile
SSLCertificateChainFile
如果所配置的 SSL 目录不一样，需要修改如下几行代码:
RequestHeader 请求的 Header 信息。
 SSL 相关的配置，打开 SSL 并指定 Master 证书。需要确保此配置为 Puppet Master 的
虚拟主机默认监听 8140，在后续扩展时可以监控其他端口释放8140。
加载 Passenger 模块及与模块相关的文件定义。
cp
以上代码中定义了：
主机名或正式域名。
DocumentRoot /usr/share/puppet/rack/puppetmasterd/public/
RackAutoDetect 
RequestHeader 
RequestHeader set X-SSL-Subject %{SSL_CLIENT_S_DN}e
# These request headers are used to pass the client certificate
SSLOptions
SSLVerifyClient
SSLCARevocationFile
SSLCACertificateFile
SSLCertificateChainFile /var/lib/puppet/ssl/ca/ca_crt.pem
Allow from All
Order Allow,Deny
-ntlp lgrep httpd
00.0.0.0:8140