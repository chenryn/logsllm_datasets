### 配置 Puppet Master 以启动多个进程并监听多个端口

1. **安装 Mongrel**
   ```bash
   $ sudo gem install mongrel
   ```

2. **修改 `/etc/sysconfig/puppetmaster` 文件**
   在此文件中添加以下内容，以便 Puppet Master 在启动时加载这些配置：
   ```bash
   PUPPETMASTER_EXTRA_OPTS="--Servertype=mongrel --group=daemon --user=daemon"
   ```

3. **创建 `puppet.domain.com.conf` 文件**
   在 `/usr/local/nginx/conf/vhosts/` 目录下创建 `puppet.domain.com.conf` 文件，并添加以下内容：
   ```nginx
   upstream puppetmaster {
       server 127.0.0.1:18140;
       server 127.0.0.1:18141;
       server 127.0.0.1:18142;
       server 127.0.0.1:18143;
   }

   server {
       listen 8140 ssl;
       ssl_certificate /var/lib/puppet/ssl/certs/puppet.domain.com.pem;
       ssl_certificate_key /var/lib/puppet/ssl/private_keys/puppet.domain.com.pem;
       ssl_client_certificate /var/lib/puppet/ssl/ca/ca_crt.pem;
       ssl_verify_client optional;

       location /production/file_content/files/ {
           root /etc/puppet/files/;
           alias /etc/puppet/files/;
           default_type application/x-raw;
       }

       location ~ /production/file_content/modules/.+ {
           rewrite ^/production/file_content/modules/([~]+)/(.+)$ /$1/files/$2 break;
           root /etc/puppet/modules;
           default_type application/x-raw;
       }

       location / {
           proxy_pass http://puppetmaster;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header X-SSL-Issuer $ssl_client_i_dn;
           proxy_set_header X-SSL-Subject $ssl_client_s_dn;
           proxy_set_header X-Client-Verify $ssl_client_verify;
       }
   }
   ```

4. **修改 `nginx.conf` 文件**
   编辑 `/usr/local/nginx/conf/nginx.conf` 文件，增加如下配置：
   ```nginx
   include vhosts/*.conf;
   ```

5. **重启 Puppet Master 和 Nginx**
   ```bash
   $ sudo /etc/init.d/puppetmaster restart
   $ sudo /etc/init.d/nginx start
   ```

6. **确认端口已启动**
   ```bash
   $ sudo netstat -ntlp | grep ruby
   $ sudo netstat -ntlp | grep httpd
   ```

7. **在 Puppet 客户端运行 `puppet` 命令检测配置是否正确**
   ```bash
   $ puppet agent -t
   ```

8. **查看日志以验证配置的正确性**
   ```bash
   $ tail /var/log/nginx/access.log
   $ tail /var/log/message
   ```

### 使用 Apache + Passenger 模式扩展 Puppet Master

1. **安装 Apache 和 Passenger**
   ```bash
   $ sudo yum install httpd httpd-devel mod_ssl ruby-devel rubygems
   $ sudo gem sources --remove https://rubygems.org/
   $ gem sources -a http://ruby.taobao.org
   $ sudo gem install rack passenger
   $ sudo passenger-install-apache2-module
   ```

2. **配置 Apache 加载 Passenger 模块**
   创建一个目录来存放 `config.ru` 文件，并将该文件复制到该目录：
   ```bash
   $ sudo mkdir -p /usr/share/puppet/rack/puppetmasterd
   $ sudo cp /usr/share/puppet/ext/rack/files/config.ru /usr/share/puppet/rack/puppetmasterd/
   $ sudo chown puppet /usr/share/puppet/rack/puppetmasterd/config.ru
   ```

3. **配置 Apache 虚拟主机**
   编辑 `/etc/httpd/conf.d/puppet.domain.com.conf` 文件，添加以下内容：
   ```apache
   <VirtualHost *:8140>
       ServerName puppet.domain.com
       DocumentRoot /usr/share/puppet/rack/puppetmasterd/public/

       SSLEngine On
       SSLCertificateFile /var/lib/puppet/ssl/certs/puppet-server.example.com.pem
       SSLCertificateKeyFile /var/lib/puppet/ssl/private_keys/puppet-server.example.pem
       SSLCACertificateFile /var/lib/puppet/ssl/ca/ca_crt.pem
       SSLCARevocationFile /var/lib/puppet/ssl/ca/ca_crl.pem
       SSLVerifyClient optional
       SSLCipherSuite HIGH:!ADH:RC4+RSA:-MEDIUM:-LOW:-EXP
       SSLProtocol All -SSLv2

       PassengerRuby /usr/bin/ruby
       PassengerRoot /usr/lib64/ruby/gems/1.8/gems/passenger-3.0.19
       PassengerMaxPoolSize 12
       PassengerMaxRequests 1000
       PassengerPoolIdleTime 600
       PassengerUseGlobalQueue on
       PassengerHighPerformance on

       <Directory /usr/share/puppet/rack/puppetmasterd>
           Allow from all
           Order allow,deny
           Options -MultiViews
       </Directory>

       RequestHeader set X-SSL-Subject %{SSL_CLIENT_S_DN}e
       RequestHeader set X-SSL-Issuer %{SSL_CLIENT_I_DN}e
       RequestHeader set X-Client-Verify %{SSL_CLIENT_VERIFY}e
   </VirtualHost>
   ```

4. **启动 Apache 服务**
   ```bash
   $ sudo /etc/init.d/httpd start
   ```

5. **确认端口及进程**
   ```bash
   $ sudo netstat -ntlp | grep httpd
   ```

6. **在 Puppet 客户端运行 `puppet` 命令检测配置是否正确**
   ```bash
   $ puppet agent -t
   ```

通过以上步骤，您可以配置 Puppet Master 以启动多个进程并监听多个端口，同时使用 Apache + Passenger 模式进行扩展。