In this Appendix, we give proofs for lemmas, theorems, and propositions whose proof is
not given in the paper, and detail some of the proof sketches.
Proof (sketch for Proposition 1). Leveraging the equivalence between simulation and
non-interference (Lemma 2), we prove t-SNI by constructing a simulator that uses at
most |Oint| shares of the gadget’s input to perfectly simulate the joint distribution of
any position set O such that |O| ≤ t. The constructed simulator is very similar to those
previously used in proofs of t-NI.
Let O be a set of positions such that |O| ≤ t, and let d1 = |Oint| and d2 = |Oext|.
Note that d1 + d2 ≤ t. Our goals are: i. to ﬁnd an input set I such that (cid:107)I(cid:107) ≤ d1, ii. to
construct a perfect simulator that uses only input shares ai ∈ I.
First, we identify which variables are internal (and therefore will be considered
in Oint) and which are outputs (in Oext). Internals are the ai, the ri,j (the value of r
sampled at iteration i, j), and the ci,j (resp. cj,i) which correspond to the value of the
variable ci (resp. cj) at iteration i, j of the second loop. Outputs are the ﬁnal values of
ci (i.e. ci,t). Then, we deﬁne I as follows: for each position among ai, ri,j and ci,j
(with j  k) then
s ← s (cid:9) rk,i;
Game 2. We modify R0 in order to i. pre-sample all fresh
randomness using a random function Sample, ii. start by
computing internal observations, and output shares ci such
that i ∈ IO, iii. then compute output shares such that i /∈ IO.
We refer to this new function as R1 and we use EasyCrypt
to prove that R0 and R1 produce equivalent distributions
on the requested observations if their position sets are the
same set O such that |O| ≤ t and their input encodings
agree for each ai where i ∈ IO.
function R1(a,O) :
for i = 0 to t do for j = i + 1 to t do ri,j ← Sample(i, j);
for i = 0 to t do if (ai ∈ O) then ai ← ai;
for i = 0 to t do
if (i ∈ IO) then
for j = 0 to t do
if (ri,j ∈ O) then ri,j ← ri,j;
if (ci,j ∈ O) then ci,j ← SumCij(i, j);
if (ci ∈ O) then ci ← SumCij(i, t);
for i = 0 to t do
if (i /∈ IO ∧ ci ∈ O) then ci ← SumCij(i, t);
return c
return s;
Game 3. We now delay the generation of random val-
ues as much as possible, sampling just before their ﬁrst
use. We refer to this new function as R2. We prove the
equivalence between Games 2 and 3 if the share the
same O such that |O| ≤ t and if they agree on input
shares ai such that i ∈ I. This equivalence leverages
a generic argument equating lazy and eager sampling
when independent from intermediate adversary views.
function SumCij(i, j) :
s ← ai;
for k = 0 to j do
if (i  k) then
s ← s (cid:9) Sample(k, i);
return s;
function R2(a,O) :
for i = 0 to t do if (ai ∈ O) then ai ← ai;
for i = 0 to t do
if (i ∈ IO) then
for j = 0 to d do
if (ri,j ∈ O) then ri,j ← Sample(i, j);
if (ci,j ∈ O) then ci,j ← SumCij(i, j);
if (ci ∈ O) then ci ← SumCij(i, t);
for i = 0 to d do
if (i /∈ IO ∧ ci ∈ O) then ci ← SumCij(i, t);
return c;
Game 4 In this ﬁnal game, we fully simulate the computation of the ci when i /∈ IO by
showing that there exists a non-empty set of indices LO such that ∀(cid:96) ∈ L, ri,(cid:96) is not
assigned yet. Then, instead of computing the ci (for i /∈ I) as in Game 2:
∀(cid:96) ∈ L, ri,(cid:96) ← $; ci ← ai ⊕ i−1(cid:77)
ri,j (cid:9) t(cid:77)
ri,j,
we simulate it by setting the value of ri,k as follows:
j=0
j=i+1
ci ← $; ∀(cid:96) ∈ L\{k}, ri,(cid:96) ← $,
if (i  k), ri,k ← (cid:9)ci ⊕ ai ⊕ i−1(cid:77)
j=0,j(cid:54)=k
ri,j ⊕
ri,j,
j=i+1,j(cid:54)=k
t(cid:77)
t(cid:77)
ri,j (cid:9)
ri,j.
j=0,j(cid:54)=k
j=i+1,j(cid:54)=k
We prove the equivalence between Game 3 and Game 4 with EasyCrypt when functions
R2 and R3 share the same O such that |O| ≤ t and agree on input shares ai with i ∈ I.
The most critical part of this step is undoubtedly to ensure that the subscript L contains
at least one index. To do so, we need to show that the elements ri,(cid:96) with (cid:96) ∈ L were not
already used and won’t be reused anywhere. Finally, we also formally prove that the
results of R3, which represents the ﬁnal simulator, only depends on those input shares
ai such that i ∈ IO for all O such that |O| ≤ t.
function SumCij(i, j) :
s ← ai;
for k = 0 to j do
if (i  k) then s ← s (cid:9) Sample(k, i);
return s;
function SetCi(i);
s ← ai; k ← 0;
while ((k (cid:54) t) ∧ ((i == k) ∨ (k < i ∧ ((i, k) ∈ dom r))∨
(i < k ∧ ((k, i) ∈ dom r))) do