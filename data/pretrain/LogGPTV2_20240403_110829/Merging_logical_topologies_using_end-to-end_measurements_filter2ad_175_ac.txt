(2)
Figures 6(a) and (b) display an estimation of the integral for
a common branching point in the LAN experiment described
in 4.1. The ﬁgure indicates the very small oﬀset region (rel-
ative to D = 2 ms) where reverse-ordering can occur. The
probability of a reverse-ordering event can be estimated by
numerically approximating (2). For the depicted scenario,
the estimated probability is 0.0017. Similar values were ob-
served for all common branching points encountered during
the LAN experiment described below.
)
s
µ
(
1 
d
+
100
2
g
d
e
t
a
m
i
t
s
E
50
0
40
60
80
Estimated  g
100
    (µ s)
 + d
1
1
120
0.3
0.2
)
v
(
f
0.1
−2000 −1500 −1000 −500
0
500
1000
1500
2000
Offset v   (µ s)
(a)
(b)
Figure 6: (a) In the LAN experiment described in Section 4.1, delay diﬀerences were measured at a common
joining point. Based on these delay diﬀerences, we estimate g1(n) + d1 and g2(n) + d1, and display them using a
scatter plot. Here the hashed regions are the areas where an ordering diﬀerence would occur when the oﬀset
v = 80 + d1 microseconds. (b) We estimate f (v) as the fraction of points lying within the equivalent regions
for each v. The estimated function f (v) is displayed for D = 2 milliseconds. In this experiment, the estimated
probability of a reverse-ordering event is 0.0017.
In the unshared scenarios, the arrival times at the join-
ing points remain the same as above, but we must take into
account the fact that dA,1 (cid:1)= dA,2 and dC,1 (cid:1)= dC,2. Pro-
ceeding as before, if packet pA,1(n) arrives before pC,1(n)
then vn > d1 + g1(n). In order for a reverse-ordering event
to occur, packet pA,2(n) must arrive after pC,2(n). This re-
quires that vn  pa
(6)
(7)
For reasonably large N , we can perform this test as a Z-test,
with:
p
dp1,2 − bpa
2bp(1 −bp)/N
.
where dp1,2 = x1,2/N , bpa = xa/N and bp = (x1,2 + xa)/2N .
Z =
(8)
For reasonably large N, distributions can be approximated
as normal, and we can set a threshold for Z such that the
probability of declaring a branching point unshared when
it is in fact shared is equal to a speciﬁed level α.
In our
experiments, we set α = 0.05.
3.5 Multiple Receiver Networks
Thus far, we have concentrated on describing the measure-
ment framework for a two-receiver network. In the two re-
ceiver network, each measurement consists of a pair of pack-
ets sent from each source. The ﬁrst packet from each source
is destined for receiver 1, and the second for receiver 2, and
there is a spacing between them of ∆t. The framework for
an r-receiver network is the natural extension of this. For
each measurement, the two sources send a stream of r pack-
ets, with a spacing of ∆t between successive packets. The
i-th packet in this stream is destined for the i-th receiver.
Each such measurement provides
pairwise measurements
of the form described above, and counts of reverse-ordering
events are collected for each pair of receivers.
`
´
r
2
We perform the test described above for each pair of re-
ceivers to determine if there is only one branching point
for both sources. Let s(i, j) be a binary value, indicating
whether receivers i and j share a common branching point
from the two sources (0 indicating no, 1 indicating yes).
In the simple two-receiver network, if we determined that
the branching point was not shared, then it was impossible
to distinguish between the three unshared entry scenarios
of Figure 3(b)-(d). However, when we have multiple pair-
wise test results, an unshared test result can be useful infor-
mation when used in conjunction with another shared test
result. We apply the following simple logic algorithm to
combine the results of the multiple pairwise tests.
Merging Algorithm
Step 1 The s(i, j) = 1 results are used to place initial
bounds on the deepest points (points as close as pos-
sible to the receivers) at which the paths from A to i
and j can join with the paths from C.
Step 2 Cycle through the unshared cases, s(i, j) = 0, and
check whether or not the bounds determined in Step
1 imply more restrictive bounds on the depths for the
unshared joining points. Repeat this cycle until the
bounds do not change from one cycle to the next and
declare convergence.
The convergence of the algorithm is guaranteed, provided
that the test results do not provide conﬂicting evidence; see
below for a discussion on how such contradictions are re-
solved. The proof of convergence is very simple—bounds
can only be tightened, so no oscillation is possible. How-
ever, convergence of the algorithm does not mean that join-
ing points will be localized to a single logical link. In general,
the points at which the paths from source A join those of
source C may only be localized to within a certain sequence
of consecutive logical links in the source C tree topology.
We say that the two-source network is identiﬁable from
the measurements if each point at which a path from source
A joins a path from source C can be localized to a certain
logical link in the source C tree topology. Conditions for
identiﬁability are stated in the theorem below. The theo-
rem is rather technical and slightly diﬃcult to state, but
the key point is that it demonstrates that there are many
situations (conditions on the s(i, j) indicator variables) in
which networks are identiﬁable. In fact, in our experimental
work described in detail in Section 4.1, the LAN we worked
with was identiﬁable. The conditions of the theorem do not
need to be checked explicitly in practice; one only needs to
apply the merging algorithm above, and if the network is
identiﬁable, then the algorithm will converge to the correct
network topology.
Before stating the theorem, we introduce some necessary
notation. Let R be the set of receivers, and let D(k) be the
descendant receivers of node k; R/D(k) is then the set of
receivers not including D(k). Let C be the label of the source
for which the (tree) topology is known. Let p(k) be the
parent of node k in this tree, and let P(i, j) be the path from
a node i to one of its descendants j in this tree. Let b(i, j)
denote the branching node of the paths from C to receivers i
and j. Finally, denote by bi the ﬁrst encountered branching
point on P(C, i) for which there is a receiver j ∈ R with
b(i, j) = bi and s(i, j) = 1. If s(i, j) = 0 for all j ∈ R/{i},
then set bi = i.
Theorem 1. A two-source network is identiﬁable if and
only if for each receiver i ∈ R one of the two conditions
holds:
(i) p(bi) = C
(ii) there is a receiver j such that p(bi) = b(i, j) and bj ∈
P(C, p(bi)).
These conditions imply the requirement that there is at least
one bi with p(bi) = C.
Proof. Necessity: Suppose neither condition holds for
some receiver i. Speciﬁcally, there is a receiver i such that
p(bi) (cid:1)= C and that for all receivers j with b(i, j) = p(bi),
bj (cid:1)∈ P(C, p(bi)). This implies that s(i, j) = 0 for all such
receivers j. We are now left with two possibilities for the
entry point of the path to i. Either it can enter at or above
p(bi), in which case the paths to each receiver j must enter
below p(bi) and at or above bj, which is possible because bj (cid:1)∈
P(C, p(bi)). Alternatively, it can enter between p(bi) and
bi, in which case the path to receiver j can enter anywhere
above bj.
Suﬃciency: If condition (i) holds, p(bi) = C, then the
path to i enters above the ﬁrst branching point in the logical
tree so it is localized to a single link. If not, then condition
(ii) implies that there is a receiver j with b(i, j) = p(bi)
whose path enters at or above p(bi). Furthermore, s(i, j) is
false (since bi is below b(i, j)). This implies that the path to
i cannot enter above p(bi) (otherwise s(i, j) would be equal
to 1). Therefore, the path enters on the link from p(bi) to
bi. In this way, each entry from source A can be localized
to a single link in the tree of source C, and the network is
identiﬁable in the sense deﬁned above.
A contradiction in test results will result in the algorithm
attempting to make the upper bound of one of the joining
points lower than the lower bound. We resolve these dif-
ferences ﬁrstly by a ‘majority vote’ to eliminate anomalous
test results. If there are equal numbers of conﬂicting results,
then the test results are ranked by conﬁdence (determined
by Z statistics).
3.6 Extensions
The methodology and analysis presented in this paper
focused on the two-source topology identiﬁcation problem.
Extensions to multiple source scenarios are straightforward.
Beginning with a single-source tree, a second source’s topo-
logical relationships are incorporated as described above.
The topologies of subsequent sources can be joined to this
topology, one source at a time. For each new source, the
probing and merging algorithms operate in a similar man-
ner as before, but in this case probing can be performed from
the new source and any one (or all) of the other sources in
the current topology. The sharedness indicators s(i, j) take
a non-zero value if the new source shares the i, j branch-
ing point with any one of the other sources, in which case
a value indicating which source shares the branch can be
assigned. The merging algorithm uses the sharedness indi-
cators as well as their non-zero values and employs a similar
cycling procedure to localize (as much as possible) the join-
ing points for the new source.
Theorem 1 gives conditions under which the acquired mea-
surements provide full identiﬁability. If these conditions are
not met, then certain joining points will only be localized
to within a sequence of two or more consecutive links. It
may be possible to employ a more informative probing of
the portion of the network in question that can help to fur-
ther resolve such cases. Additional information, reﬂective
of link bandwidths, can be gleaned by performing the pro-
cedure used to set the thresholds (Y -topology probing) but
making the second packet from source C consistently much
larger. When all the packets are the same size, the number of
reverse-ordering events can be used to estimate f (0). When
one packet is much larger, however, the number of reverse-
ordering events can be used to form an estimate of a metric
of the path from C to the joining point. This path metric is
the same as the path metric generated by the measurement
procedure used in the identiﬁcation of single source topolo-
gies in [9] (it is reﬂective of the bandwidths of the links
on the path). The measurement framework in [9] can be
used to determine the path metric from the source C to any
branching point in the source C topology. By simply com-
paring the metrics of paths to branching and joining points,
the relative position of all entry points can be determined.
However, forming accurate estimates of the metrics can re-
quire intensive probing. For this reason, we envision that
these extended measurements could form a potential sec-
ondary step, utilized only after the application of the simple
and undemanding probing mechanism we have presented.
4. EXPERIMENTAL RESULTS
Our msprobe multiple-sender probing program implements
the techniques discussed above. There are two source com-
ponents and a receiver component. Source 1 sends UDP
packet probes to the receivers at a regular period. Source 2
controls the experiment and sends at the same period but
adds a uniform random oﬀset to each sending time. The
receiver component simply tracks the order in which probes
arrive, and then sends the results back to source 2 when
the experiment has reached completion. Because the only
important metric is packet arrival order, no special timing
infrastructure is required. After the probes have been sent
the results are collected and processed at source 2. This
source also keeps track of the oﬀset used for each trial. This
information can later be used, along with the outcome for
each trial, to adjust the bounds of the distribution from