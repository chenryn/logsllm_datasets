title:Measuring IPv6 DNS Reconnaissance Attacks and Preventing Them Using
DNS Guard
author:Qinwen Hu and
Muhammad Rizwan Asghar and
Nevil Brownlee
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Measuring IPv6 DNS Reconnaissance Attacks and
Preventing them using DNS Guard
Qinwen Hu
Department of Computer Science
The University of Auckland
New Zealand
Muhammad Rizwan Asghar
Department of Computer Science
The University of Auckland
Nevil Brownlee
Department of Computer Science
The University of Auckland
New Zealand
New Zealand
Email: PI:EMAIL
Email: PI:EMAIL
Email: PI:EMAIL
Abstract—Traditional address scanning attacks mainly rely
on the naive ’brute forcing’ approach, where the entire IPv4
address space is exhaustively searched by enumerating different
possibilities. However, such an approach is inefﬁcient for IPv6 due
to its vast subnet size (i.e., 264). As a result, it is widely assumed
that address scanning attacks are less feasible in IPv6 networks.
In this paper, we evaluate new IPv6 reconnaissance techniques in
real IPv6 networks and expose how to leverage the Domain Name
System (DNS) for IPv6 network reconnaissance. We collected
IPv6 addresses from 5 regions and 100,000 domains by exploiting
DNS reverse zone and DNSSEC records. We propose a DNS
Guard (DNSG) to efﬁciently detect DNS reconnaissance attacks
in IPv6 networks. DNSG is a plug and play component that could
be added to the existing infrastructure. We implement DNSG
using Bro and Suricata. Our results demonstrate that DNSG
could effectively block DNS reconnaissance attacks.
I. INTRODUCTION
The Internet is a network of networks that links billions
of devices around the world. Devices on the Internet have
unique addresses, which are used for ﬁnding and locating
them. Internet Protocol version 4 (IPv4) is one of the most
widely used protocols to establish Internet communication,
the device’s address is called an IPv4 address. The IPv4
protocol dates from the 1980s. It has provided a robust and
interoperable environment for the Internet’s rapid growth since
then. However, the 32-bit address space of the IPv4 protocol is
quite small. The current rate of Internet growth has exhausted
the 4 billion unique IPv4 addresses. To solve this problem,
Internet Protocol version 6 (IPv6) [1] was proposed in 1996.
IPv6 aims to solve the address shortage issue in existing IPv4
networks. The new protocol extended the Internet address
space to 128 bits. The larger address space not only supports
an increased number of connected devices but also makes
some reconnaissance strategies1 less successful in IPv6.
The translational address space scanning strategies in IPv4
network generate a random number to probe new target
addresses, or sequentially increase the host ID ﬁeld2 of the
target network preﬁx to ﬁnd active addresses. The range of
IPv4 subnet addresses numbers hundreds to thousands. If we
1A reconnaissance strategy refers to the initial phase of an attack life cycle,
whereby an unauthorized user tries to gain as much information about the
network as possible before launching other more serious types of attacks
2A host ID is a unique number that is used to identify a network node in
a subnet.
assume an address scanning rate is one address per second,
it will take less than ﬁve minutes to ﬁnd all the addresses
in an /24 IPv4 subnet. While these existing address scanning
attacks are less feasible in IPv6 network due to the large
address space, IPv6 has 264 addresses for each subnet. If
network administrators use unpredictable values to allocate
IPv6 addresses, it will take more than 5 billion years to ﬁnd all
the hosts from one subnet [2]. The larger address space makes
a signiﬁcant contribution to reducing the success of traditional
reconnaissance attacks.
Over the last
two decades, several studies [2], [3], [4]
explored different ways how attackers can launch reconnais-
sance attacks in IPv6 networks. The most common way is
to extract IPv6 addresses from the public Domain Name
System (DNS) [5]. For instance, Fiebig et al. [3] found a DNS
enumeration technique by exploiting the speciﬁc semantics of
reverse lookup responses (i.e., NXDOMAIN or NXERROR).
Peter van Dijk [12] implemented an IPv6 DNSSEC walking
algorithm to extract IPv6 addresses from Next Secure (NSEC)
records. Although both these techniques are well-known, many
studies [3], [7] identiﬁed that network administrators have not
paid attention to this potential issue over the last ﬁve years.
In this paper, we identify the security impacts of not
deploying any protection to the DNS servers. For instance,
attackers can collect IPv6 addresses from public DNS servers
by exploiting the DNS reverse zone or the DNSSEC zone.
For our study, we launched an experiment to probe active
IPv6 addresses from 50 countries that have signiﬁcant IPv6
deployments. Then, we compared our survey results with that
of Hu et al. [7] conducted in 2014. Subsequently, we searched
Alexa’s Top 100,000 domains to investigate the real world
security impact of using NSEC records in the DNSSEC-
enabled domains. Finally, we propose a new solution: DNS
Guard (DNSG). DNSG aims at providing a ﬂexible approach
that allows network administrators to deploy our proposed
solution for their legacy infrastructure. This new solution does
not require any changes in the legacy DNS infrastructure and
can be easily deployed at the local DNS servers.
Our study concludes that the IPv6 address scanning vulner-
abilities still remain in the DNS servers, even though many
previous studies bring these issues to light. In addition, we
conducted a large-scale DNSSEC scanning of 100,000 public
2158-3927/18/$31.00 Â©2018 IEEE
DOI 10.1109/DSN.2018.00045
350
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:20 UTC from IEEE Xplore.  Restrictions apply. 
domain servers and leveraged the NSEC vulnerability [6] to
collect IPv6 addresses. We implemented our solution in Bro3
and Suricata4; our detailed implementation allows network
administrators to apply this solution to their current Bro or
Suricata settings.
The remainder of this paper is organised as follows. In
Section II, we provide some background on the IPv6 address
reconnaissance attack using DNS servers. In Section III, we
discuss how to launch an IPv6 DNS reconnaissance survey
in real IPv6 networks using an active measurement strategy
for searching public DNS servers. Section IV reports results
illustrating how DNS reconnaissance attacks can be launched
in the real IPv6 networks. Section V proposes DNSG that aims
at preventing the IPv6 address reconnaissance attacks. Next,
we discuss our concerns and provide our recommendations in
Section VI. Finally, in Section VII, we conclude our work and
provide some directions for future research.
the response shows the request timed out or the ICMP error
message; otherwise, it shows the response from the destination
node and the Time to Live (TTL). This simple approach can be
used to search the entire IPv4 addresses in the target network.
2) IPv6 Reconnaissance Attack: One of the key contribu-
tions of IPv6 is the larger address space, which introduces
much larger subnet sizes. By default, the lower 64 bits out of
128-bit address space in IPv6 are designed as a host preﬁx.
It is at least 240 to 263 times larger than the host ID bits
in IPv4. In [2], Chown et al. show that scanning the entire
IPv4 address space in a /24 subnet (255 IPv4 addresses) only
takes 5 minutes, assuming an address scanning rate of one
address per second. However, using the same scanning rate in
IPv6 networks, it will take more than 5 billion years to ﬁnd
all the random IPv6 addresses from a /64 subnet. Therefore,
using ping sweep to search the entire network for live hosts
becomes inefﬁcient in IPv6 networks.
II. ADDRESS SCANNING STRATEGIES
B. IPv6 Address Scanning Strategies
A reconnaissance attack is an initial step toward ﬁnding
hosts or system vulnerabilities. In this section, we discuss
the IPv4 reconnaissance technologies and explain why the
existing reconnaissance strategies are less successful in IPv6
networks. We then introduce a novel technique for collecting
IPv6 addresses based on probing the public DNS servers.
A. Reconnaissance Attack
The ﬁrst phase in the life cycle of an attack involves
reconnaissance of a target. Before launching an attack, the
attacker needs to gather as much information about the victim
as possible. Basically, the attacker would strive to know how
many live hosts there are in the target network, which ports
are open, what are the Operating System (OS) vulnerabilities,
and types of services and protocols running on a host. This
information can be leveraged by attackers to determine the
easiest way to penetrate their defences, and even to assess
whether the attacks may succeed.
In the following section, we will introduce how to launch
reconnaissance attacks in IPv4 and IPv6 networks.
1) IPv4 Reconnaissance Attack: To gather host information
in an IPv4 network, attackers start with a target reconnaissance
[8], which is to detect host information within the network.
The target reconnaissance detects liveness of a host, along with
its network address to collect information of the host. A simple
way to ﬁnd a list of live hosts in a target network is using ping
sweep [9]. Attackers can choose a list of IP addresses within
a target network and send ICMP messages to those addresses
in order to ﬁnd live hosts by counting the successful ICMP
responses. Such information about live hosts will be used for
the following attacks to compromise the host. For example,
if the target host network is 192.168.1.0/24, an attacker can
sequentially increase the value of the last 8 bits from the
IPv4 address space and ping the IP range from 192.168.1.1
to 192.168.1.254. If the host is not online or not reachable,
3https://www.bro.org
4https://suricata-ids.org
351
In the previous section, we reviewed address scanning
attacks in IPv4 networks and explain why an attacker cannot
reuse the same strategies in IPv6 networks. Recently, several
studies [2], [3], [7] focus on discovering the feasibility of
launching reconnaissance attacks in IPv6. Chown et al. [2]
found that public DNS servers will be targeted in IPv6
networks for collecting IPv6 addresses. In this section, we
brieﬂy explain the DNS server working procedure and outline
several potential methodologies that leverage DNS servers for
harvesting IPv6 addresses.
Domain Name System (DNS) is the service that translates
a human-readable domain name into an Internet Protocol
(IP) address. It plays an important role in today’s Internet.
However, DNS was designed in the mid 80s and security
was not a primary objective at that time. Therefore, many
well-known DNS vulnerabilities have been identiﬁed in the
last decades, such as DNS reconnaissance [2], DNS cache
poisoning [10] and DNS spooﬁng [11].
1) DNS Reverse Zone Scanning: Because traditional ad-
dress probing techniques had little success in IPv6 networks,
attackers began to search for new ways to gain host address
information. Chown et al. [2] believed that DNS servers would
become a new target for attackers wishing to explore IPv6
addresses. In principle, DNS is designed to translate a domain
name into an IP address; it uses a tree structure to map IP
addresses and domain names.
DNS is not targeted as a resource for exploring addresses
in the IPv4 network because it is possible to search the entire
32-bit address space in few hours. However, it is infeasible
to do such a brute force scan in IPv6. Peter van Dijk [12]
discovered that DNS reverse mappings could be used for
discovering IPv6 nodes. A reverse lookup attempts to map an
IPv4 or IPv6 address to a corresponding domain name record.
In [13], Thomson et al. speciﬁed the format of an IPv6
reverse lookup request. Each query is built by an IPv6 lookup
address and the sufﬁx ‘ip6.arpa’. The IPv6 lookup address
is encoded in the reverse order, the last nibble in the IPv6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:20 UTC from IEEE Xplore.  Restrictions apply. 
address space is encoded ﬁrst, followed by the penultimate
nibble and so on. Each nibble is separated by dots and
represents a hexadecimal digit. An example of reverse lookup
query to the address 4321:0:1:2:3:4:567:89ab would be
b.a.9.8.7.6.5.0.4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.0.0.0.0.1.2.3.4.ip6.
arpa.
Peter van Dijk [12] disclosed that the attacker only needs to
walk through the target ‘ip6.arpa’ zone by issuing queries for
Pointer Record (PTR) records corresponding to the domain
name. He discussed a searching mechanism to extract IPv6
addresses from the ‘ip6.arpa’ zone. First, users need to give a
network preﬁx of the domain from the reverse DNS zone that
they want to search. When the program receives the network
preﬁx, it adds a new nibble (all the new nibbles start with
zero) and appends it to the given domain name. The program
then sends a reverse lookup with this new address block to
DNS servers. In principle, there are three possible responses
from DNS servers:
• ‘NXDOMAIN’ (RCODE 4) means there are no records
for ‘*.ip6.arpa’ in the domain name space. The program
will increase its value for the current nibble and send the
request again. Fig. 1 demonstrates that if the program
receives NXDOMAIN response,
there are no records
below the queried node, the program increases the current
nibble by one and queries the reverse zone again.
User
DNS Server
The Initial nibble
Th
0.0.0.0.0.0.2.6.0.1.0.0.2.ip6.arpa
NXDOMAIN Response
1.0.0.0.0.0.2.6.0.1.0.0.2.ip6.arpa
Increment the current nibble 
by one
Fig. 1: The program receives ‘NXDOMAIN’ responses be-
cause the current nibble is not equal to ‘F’, so it increases the
current nibble value by one.
• ‘NXERROR’ (RCODE 0) means this ‘*.ip6.arpa’ domain
exists in the ip6.arpa domain, but
there are no PTR
records for it. When the program receives this message, it
adds a new nibble and appends it to the previous reverse
query. The initial value of the new nibble is 0. Fig. 2
shows the whole process.
• If the response is the hostname, the program will save
that hostname into its database.
2) DNSSEC Zone Reconnaissance: DNS plays a critical
role in today’s internet. It maintains a relationship between
domain names and relevant Internet Protocol (IP) addresses.
User
DNS Server
The Initial nibble
0.0.0.0.0.0.2.6.0.1.0.0.2.ip6.arpa
NXERROR Response
0.0.0.0.0.0.0.2.6.0.1.0.0.2.ip6.arpa
The new nibble
Fig. 2: If the ‘NXERROR’ response comes back, it will create
a new nibble to add to the existing IPv6 address and this new
nibble starts with zero.
However, there was no security in the existing address reso-
lution procedure. Attackers can easily falsify information in
DNS, e.g., cache poisoning [10] and DNS spooﬁng [11]. The
solution to these problems was to introduce Domain Name
System Security Extensions (DNSSEC). Arends et al. [14]
introduce a security approach that adds authentication and
integrity protection for DNS servers. The DNSSEC address
resolution extends the existing DNS process by adding the key
and signature validation process. DNSSEC uses asymmetric
cryptography and provides public/private key pairs to encrypt
the Resource Records (RRs) in each zone. As a result, the
zone server sends not only the IP address but also the DNS
key and the associated digital signature. This is to make sure
that the received response has not been tampered with. The
Local DNS Server veriﬁes the DNSSEC data from legitimate
DNS servers. First, the Local DNS Server asks the TLD Server
for the public key. When it receives a Delegation Signer (DS)
record from the TLD Server, the Local DNS Server compares
the DS records with the public key from the zone ﬁle. If both
the keys are not identical, an error message will be sent back
to the client. Second, the Local DNS Server will validate the
digital signature by using the veriﬁed public key. Once the
veriﬁcation of the TLD DNS server is complete, the Local
DNS Server sends the key query to the root DNS Server and
veriﬁes the public key and digital signature from the root DNS
server.
Unfortunately, Jakob Schlyter found a potential issue in
the current DNSSEC validation approach [15]. There is no
cryptographic signature for a wild card query. For example, a
user sends a random request to a DNS Authoritative Server. If
the DNS Authoritative Server cannot ﬁnd a relevant record, it
sends back an unauthenticated response, which indicates that
there is no record for this request. However, this is an unsigned
response and can be easily forged by an attacker.
To solve this problem, Jakob Schlyter [15] introduced the
Next Secure Record (NSEC). NSEC builds a trust chain that
expresses what domains exist and what type of records belong
to each domain. Therefore, the DNS Authoritative Server can
352
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:37:20 UTC from IEEE Xplore.  Restrictions apply. 
Start
Insert the IPv6 
address block
No
Save the IPv6 
address 
hostname into 
database
Append zero nibble 
into 
the existing IPv6 
address block
Send reverse
lookup to the 
target DNS
Increase the current 
nibble 
by one
Yes
No
Reached 20 
records?
Found the IPv6 
address
No