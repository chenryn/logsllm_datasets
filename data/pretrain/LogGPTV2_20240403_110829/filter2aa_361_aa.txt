# Information Security Partners, LLC

## Attacking Web Services
### Alex Stamos & Scott Stender
#### Defcon XIII
- **Contact:** PI:EMAIL
- **Website:** [iSECPartners.com](https://www.isecpartners.com/)

---

## Introduction

**About Us:**
- Founding Partners of Information Security Partners, LLC (iSEC Partners)
- Application security consultants and researchers

**Why This Talk?**
- Web Services are increasingly being deployed in various sectors.
- Our insights are based on real-world experiences with enterprise web service applications.
- There are numerous research opportunities in this field.
- Discover the gaps in our current knowledge.

**Resources:**
- The latest version of these slides and tools can be found at: [https://www.isecpartners.com/defcon.html](https://www.isecpartners.com/defcon.html)

---

## What Are Web Services?

**Definition:**
- An overloaded term often used to attract venture capital.
- For our purposes, web services are communication protocols that:
  - Use XML as the base meta-language for defining communication.
  - Facilitate computer-to-computer communication.
  - Utilize standard protocols, often controlled by W3C, OASIS, and WS-I.
  - Are designed to be platform and transport-independent.

**Why They Are Compelling:**
- Built upon well-understood technologies.
- Rapid adoption by major software vendors.
- Often seen as a solution to interoperability issues.
- Easy to implement, as shown in the following example:

```csharp
using System.ComponentModel;
using System.Web.Services;

namespace WSTest {
    public class Test : System.Web.Services.WebService {
        [WebMethod]
        public string HelloWorld() {
            return "Hello World";
        }
    }
}
```

**Value to Corporate Management:**
- Simplifies the exposure of mainframe APIs through SOAP, allowing the use of more common and cost-effective development platforms like Java, C#, Perl, Python, and C++.

---

## What Is This Talk About?

**Objectives:**
- Introduce the security risks associated with Web Services.
- Highlight that many familiar application security issues (e.g., injection attacks, session management) are still relevant.
- Discuss new protocols and attack surfaces specific to Web Services.
- Predict an increase in vulnerabilities related to web services in the coming years.
- Clarify that this talk does not cover WS-Security standards, which, while important, do not eliminate all application vulnerabilities (e.g., SSL does not protect against SQL injection).

---

## Where Are Web Services Being Used?

**B2B (Business-to-Business):**
- Replacing or supplementing older data exchange protocols like EDI.
- Using third-party standards to avoid the "Not Invented Here" syndrome.
- Example: Credit Card Clearer -> Bank -> Credit Bureau -> Lender.
- Offers significant cost savings.

**Internal to Companies:**
- Major corporate software vendors (IBM, Microsoft, SAP, Oracle) offer web service interfaces.
- Web service standards simplify system integration, enhancing IT management and productivity but also posing security challenges.

**In Front of Legacy Systems:**
- Web service gateways provide a modern interface to legacy systems, making it easier to find developers.
- IBM is a key player in this middleware.
- Security in these scenarios is particularly complex.

**Between Tiers of Web Applications:**
- Front-end: HTML/XHTML.
- Back-end: SQL replaced by SOAP.
- Web service-enabled databases consume these streams, making XML injection a significant concern.

**Consumer-Facing Web Pages:**
- AJAX (Asynchronous JavaScript and XML) is widely used (e.g., Google Maps).
- APIs from EBay, Google Search, Amazon, and Bank of America.

---

## Code Breaks Free...

**Historical Context:**
- Initially, rich functionality was freely provided on the public Internet.
- Firewalls were introduced to restrict access, typically allowing only HTTP, HTTPS, and SMTP.
- Web Services now tunnel this functionality through ports deemed "safe," reintroducing rich functionality to the public Internet.

**New Slogan:**
- "We poke holes in your firewall so you donâ€™t have to!"

---

## Attacks on Web Services

**Design Philosophy:**
- Web Services are designed to be agnostic to various technologies.
- This talk focuses on commonly encountered technologies and discusses security issues at three layers: Application, SOAP, and XML.

---

## Application Attacks

**General Considerations:**
- Most applications have something valuable to attack.
- Application-specific flaws, such as design flaws, business logic errors, and "bad idea" methods, persist.
- Common issues (OWASP Top 10) continue to be relevant.

**Specific Vulnerabilities:**
- **SQL Injection:** Databases remain vulnerable, and SOAP/XML can be used to obfuscate malicious characters.
- **Buffer Overflows:** Unmanaged code can still be exploited.
- **Authorization/Authentication Mistakes.**
- **Cross-Site Scripting (XSS):** Rich data representation and technologies like AJAX introduce new XSS possibilities.
- **Creating Well-Formed SOAP Requests:** Difficulties in creating valid requests may lead to attacks on other interfaces, such as internal customer support.

---

## CDATA Field Exploits

**Overview:**
- XML uses CDATA fields to include non-legal characters in data.
- Developers may assume certain data types cannot be embedded, leading to vulnerabilities.
- Standard XML parsers strip CDATA components, leaving dangerous characters unescaped.
- CDATA tags are hidden from developers, complicating input filtering.

**Exploitation:**
- **SQL Injection.**
- **XML Injection.**
- **XSS (Against a separate web interface).**

**Example:**
```xml
<![CDATA[
<script>alert('XSS');</script>
]]>
```

---

## SOAP Attacks

**SOAP Overview:**
- A standard for using XML to exchange data between programs.
- Typically over HTTP/S, but other transports are possible (MQ, SMTP, etc.).
- Ease of deployment can mask deeper security issues, such as serialization and schema validation.

**WSDL (Web Services Description Language):**
- Describes SOAP interfaces.
- Complex and generally auto-generated by frameworks.
- No access controls are usually enforced on WSDLs.
- Attackers can request WSDLs by adding `?WSDL` to the URL, revealing sensitive information and "hidden" methods.

**Example WSDL:**
- EBay Price Watching Service.

**SOAP Headers:**
- Provide instructions on how messages should be handled.
- Can be parsed and obeyed by WS frameworks, introducing potential attack surfaces.
- **DoS in Processing Instructions.**
- **Source routing to bypass security checks.**

**SOAPAction Header:**
- Sometimes required, sometimes filtered, and often not necessary.
- **Attack:** Bypass protections that rely on SOAPAction.

---

For more detailed information and resources, visit: [https://www.isecpartners.com/defcon.html](https://www.isecpartners.com/defcon.html)