be blocked. However, it would allow HTTP connections if they
are initiated by the com.adlib.unsafe ad library. Note how
the ad library can now support occasional HTTP connections
even without knowing the list of domain names a priori and,
more importantly, without aﬀecting the policy of the app.
Implementation. We implemented this new extension by
modifying the isCleartextTrafficPermitted API to
make it aware of the XML policy node. Our modiﬁcation
performs stack trace inspection to determine which package
name has initiated the call. For each package name appearing
in the stack trace, we then check whether the NSP contains
a custom policy for a speciﬁc package name: if yes, we use
that policy. Otherwise, we apply the default. In case the
connection should not be allowed, our implementation raises
a RuntimeError, indicating a policy violation.
Adoption & Backward Compatibility. Our extension can be
trivially adopted by app developers and network libraries. In
fact, since we modify an API that all these libraries already
invoke—and that was a key design choice—they can enjoy
the beneﬁts of our policy without the need to make any
modiﬁcation. We also note that our extension is fully backward
compatible and it can act as a drop-in replacement of the old
version. In fact, apps and policies that are not “aware” about
our extension are supported exactly the same as before.
Performance Considerations. We implemented our exten-
sion on a Pixel 3A running Android Pie (pie-qpr3-b-release).
Our patch consists of less than 30 lines of code and modiﬁes
only two components of the Android framework (the policy
parser and the isCleartextTrafficPermitted API). We
measured the overhead of our extension with a microbench-
mark: we wrote an app that performs 1,000 HTTP requests
using the OkHttp3 library. We then run the app 100 times, with
and without our modiﬁcations, and we compute the diﬀerence.
The average execution time of the isCleartextTrafficPer-
mitted API, without our modiﬁcation, is 0.004 ms with a
standard deviation of 0.006 ms. The average execution time
of the same API with our modiﬁcation is instead 0.30 ms, with
a standard deviation of 0.094 ms. We believe that the overhead
of our defense mechanism is negligible, especially when
compared to the overhead incurred by network I/O operations.
Limitations. Even though our implementation raises the
security bar of the current Network Security Policy, we
acknowledge that it currently suﬀers from some limitations.
First, it is important to mention that, since we operate with
the same threat model of the actual NSP, we do not protect the
application against malicious third-party libraries that want
to evade the policy deﬁned by the developer. We note that this
aﬀects the standard NSP as well: in fact, a malicious library can
bypass even the strictest security policy by performing network
connections with its “custom” API or by using native code.
A second limitation relates to the fact that we rely on
the stack trace to identify which component initiated the
USENIX Association
29th USENIX Security Symposium    355
network connection. We acknowledge that there may be benign
situations where the stack trace cannot be fully trusted and there
might be the risk of losing the real “caller,” for example, when
using dynamic code loading or threading with worker threads.
A very detailed analysis of the potential problems of using the
stack trace to perform “library compartmentalization” has been
studied in FlexDroid [40]. Even if the current threat model of
FlexDroid is considering malicious libraries, we believe that
their proposal of a secure inter-process stack trace inspection
combined to ourdefense mechanism might create a full-ﬂedged
implementation to tackle the compartmentalization problem.
Toconclude,wecurrentlysupportonlythe cleartextTraf-
ficPermitted attribute. However, note that some features
already provide a suﬃcient granularity and do not need to be
sandboxedona“per-package”basis. Forexample,thecertiﬁcate
pinning feature already creates a sort of “per-site sandbox.”
8 Related Work
There are several areas of works that are relevant to this paper:
Network Security, the dangerousness of “code reuse,” and
advertisements.
Network Security. A concept similar to the NSP has been
ﬁrst introduced by Fahl et al. [26]: this work proposed a
completely new approach to handle SSL security, allowing
developers to easily deﬁne diﬀerent SSL conﬁgurations and
options, like certiﬁcate pinning, just by using a XML policy.
Thus, [26] completely prevents the developer to write any code
responsible of handling the validation and veriﬁcation of a
given certiﬁcate, addressing multiple problems at their roots.
Another group of works focuses on the risks of using
unencrypted connections. Vanrykel et al. [46] study how
apps send unique identiﬁers over unencrypted connections
exposing the user to privacy threats, while [16,37] show how
several apps are vulnerable to remote code injection due to
code updating procedures over HTTP.
Several works evaluate the adoption of secure connections
among apps: Razaghpanah et al. [39] measured the adoption
of diﬀerent libraries performing SSL/TLS operations by
ﬁngerprinting their handshake. Oltrogge et al. [34], instead,
measured the adoption of certiﬁcate pinning and, by surveying
the developers they discovered that the implementation of
pinning is considered complex and hard to correctly implement.
Other works focus on identifying SSL problems among
apps. One such example is by Fahl et al. [25], which applied
static code analysis and found multiple applications with
SSL/TLS code that is potentially vulnerable to MITM attacks.
Hubbard et al. [30] and Onwuzurike et al. [35], instead, applied
a combination of static and dynamic analysis to identify SSL
vulnerabilities in popular Android apps.
Toconclude,Damjanetal.[15]proposeanewdefensemecha-
nism to overcome the problem of broken SSL/TLS implementa-
tions named dynamic certiﬁcate pinning, while Zhao et al. [51]
discuss several possible counter-measures against SSLStrip.
Code Reuse. Several works highlighted how developers rely
on online platforms like StackOverﬂow for their development
process. Linares-Vásquez et al. [47] analyzed more than 213k
questions on StackOverﬂow (related to Android) and built a sys-
temtopairagivensnippetofcodeofStackOverﬂowwithagiven
snippet of code within the Android framework. Their work
showed how developers ask questions and change their code
once the behavior of a given API changes. Fischer et al. [27],
instead, measured the proliferation of security-related code
snippets from StackOverﬂow in Android apps available on
Google Play. [27] showed how more than 200k apps contain
copy-pastedsecurity-relatedcodesnippetsfromStackOverﬂow.
A similar work,not focused on Android,is from Verdi et al. [48]
in which they investigated security vulnerabilities in C++ code
snippets shared on StackOverﬂow. They showed how 2,859
GitHub projects are still aﬀected by vulnerabilities introduced
by vulnerable C++ code snippet copied from StackOverﬂow.
Advertisements. Ads on Android have been evaluated both in
termsofprivacyandsecurity. Theﬁrstcategoryofworksstudies
ad libraries to identify the privacy implications for the user.
Book et al. [13] tracked the increase in the use of ad libraries
among apps and highlight how the permissions used by these
libraries maypose particularrisks to userprivacy. Son et al. [42]
demonstrate how malicious ads can leak the PII of the user.
Stevens et al. [43] instead show how users can be tracked across
ad providers due to the amount of personal information sent
from the ads libraries and expose how these libraries checked
for permissions beyond the required ones to obtain more PII.
The second group of works, instead, focuses mostly on the
security impact of ad libraries and proposes diﬀerent solutions
to achieve privilege separation for applications and ads.
AdDroid [36] proposes a new advertisement API to separate
privileged advertising functionality from the app. AFrame [50]
and AdSplit [41], instead, propose a diﬀerent approach to let ad
libraries run in a process separate from that of the application.
9 Conclusion
In this work, we performed the ﬁrst large-scale analysis of Net-
workSecurityPoliciesontheAndroidecosystemandwesystem-
aticallyexploredtheadoptionofthisnewdefensemechanismby
Androidapps. Ouranalysisshowshowdevelopersarestillallow-
ing full cleartext on their application. We investigated why in-
secure communications are still vastly used by applications and
wedeterminedoneoftherootcausestoberelatedtothecomplex
ad ecosystem. Guided by these ﬁndings, we designed and im-
plemented a drop-in extension on the actual NSP, which allows
developers to specify a “per-package” policy, so that they can
embed third-party ad libraries without needing to compromise
their app’s security. We hope this work provides useful insights
to speed up Google’s “HTTPS Everywhere on Android” eﬀort.
356    29th USENIX Security Symposium
USENIX Association
Acknowledgements
We would like to thank our shepherd Ben Andow for his help
in signiﬁcantly improving this paper, and all the anonymous
reviewers for their constructive feedback. We are also grateful
to Dario Nisi and Emanuele Cozzi forhelping with experiments
and graphs. Last,ourthanks obviously also go to Betty Sebright
andherteam: “keeppushing” you once said—we didnotforget.
References
[1] RFC 5280.
Internet X.509 Public Key Infrastruc-
ture Certiﬁcate and Certiﬁcate Revocation List
(CRL). http://tools.ietf.org/html/rfc5280. 2008,
Accessed: June, 2020.
[2] Heather Adkins. An update on attempted man-in-the-middle
attacks. https://security.googleblog.com/2011/08/
update-on-attempted-man-in-middle.html.
2011,
Accessed: June, 2020.
[3] Klyubin Alex.
An Update on Android TLS Adop-
https://security.googleblog.com/2016/04/
2016,
tion.
protecting-against-unintentional.html.
Accessed: June, 2020.
[4] HCL Technologies Alon Galili of Aleph Research. Cordova-
Android MiTM Remote Code Execution, CVE-2017-3160.
https://alephsecurity.com/vulns/aleph-2017013.
2017, Accessed: June, 2020.
[5] Oﬃcial Documentation Android Developers. AndroidManifest
application. https://developer.android.com/guide/
topics/manifest/application-element.html?
#usesCleartextTraffic. 2019, Accessed: June, 2020.
[6] Oﬃcial Documentation Android Developers.
security conﬁguration.
com/training/articles/security-config.
Accessed: June, 2020.
Network
https://developer.android.
2019,
[7] Oﬃcial Documentation Android Developers.
Net-
isCleartextTraﬃcPermitted, API.
workSecurityPolicy
https://developer.android.com/reference/
android/security/NetworkSecurityPolicy.html#
isCleartextTrafficPermitted(). 2016, Accessed: June,
2020.
[8] Platform Documentation Android Developers. Android 8.0
Behavior Changes. https://developer.android.com/
about/versions/oreo/android-8.0-changes.
2020,
Accessed: June, 2020.
[9] AndroidRank. AndroidRank, open android market data since
2011. https://www.androidrank.org. 2011, Accessed:
June, 2020.
[10] AppBrain. AppBrain: Monetize,advertise and analyze Android
apps. Ad Networks. https://www.appbrain.com/stats/
libraries/ad-networks. 2011, Accessed: June, 2020.
[11] AppBrain.
AppBrain: Monetize, advertise and an-
https://
[12] Michael Backes, Sven Bugiel, and Erik Derr.
alyze Android apps. Network Libraries.
www.appbrain.com/stats/libraries/tag/network/
android-network-libraries. 2011,Accessed: June,2020.
Reliable
Third-Party Library Detection in Android and its Security
Applications.
In Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, 2016.
[13] Theodore Book, Adam Pridgen, and Dan S. Wallach. Longi-
tudinal Analysis of Android Ad Library Permissions. 2013.
Changes
[14] Chad Brubaker.
cate Authorities
//android-developers.googleblog.com/2016/
07/changes-to-trusted-certificate.html.
Accessed: June, 2020.
in Android Nougat.
to
Trusted Certiﬁ-
https:
2016,
[15] Damjan Buhov, Markus Huber, Georg Merzdovnik, and
Edgar R. Weippl. Pin it! Improving Android network security
at runtime.
In 2016 IFIP Networking Conference (IFIP
Networking) and Workshops, 2016.
[16] Hyunwoo Choi and Yongdae Kim. Large-Scale Analysis of
Remote Code Injection Attacks in Android Apps. 2018.
[17] Catalin Cimpanu. Over 58,000 Android users had stalkerware
installed on their phones last year. https://www.zdnet.
com/article/over-58000-android-users-had\
-stalkerware-installed-on-their\
-phones-last-year/. 2019, Accessed: June, 2020.
[18] MDM contributors.
Web technology for develop-
https://developer.
ers: Strict-Transport-Security.
mozilla.org/en-US/docs/Web/HTTP/Headers/
Strict-Transport-Security. 2020,Accessed: June,2020.
TrustKit Android: Easy SSL pin-
ning validation and reporting for Android.
https:
//github.com/datatheorem/TrustKit-Android. 2016,
Accessed: June, 2020.
[19] DataTheorem.
[20] Appodeal Android
SDK Developer.
Appodeal
Android SDK Integration Guide.
Android SDK.
https://wiki.appodeal.com/en/android/
2-6-4-android-sdk-integration-guide.
Accessed: June, 2020.
2019,
[21] HeyZapAndroidSDKDeveloper. HeyZapAndroidSDK. http:
//web.archive.org/web/20190615131844/https:
//developers.heyzap.com/docs/android_sdk_
setup_and_requirements. 2019, Accessed: June, 2020.
[22] MoPub SDK Developer. Integrate the MoPub SDK for An-
https://developers.mopub.com/publishers/
droid.
android/get-started/. 2020, Accessed: June, 2020.
[23] Android Developers. AOSP Design Architecture: Con-
https://source.android.com/devices/
2020,
scrypt.
architecture/modular-system/conscrypt.
Accessed: June, 2020.
USENIX Association
29th USENIX Security Symposium    357
[24] Android Developers.
workSecurityPolicy, API.
android.com/reference/android/security/
NetworkSecurityPolicy. 2016, Accessed: June, 2020.
Oﬃcial Documentation Net-
https://developer.
[25] Sascha Fahl, Marian Harbach, Thomas Muders, Matthew
Smith, Lars Baumgärtner, and Bernd Freisleben. Why eve and
mallory love android: an analysis of android SSL (in)security.
In CCS ’12, 2012.
[26] Sascha Fahl, Marian Harbach, Henning Perl, Markus Koetter,
and Matthew Smith. Rethinking SSL development in an
appiﬁed world. In CCS ’13, 2013.
[27] Felix Fischer, Konstantin Böttinger, Huang Xiao, Christian
Stransky, Yasemin Gülsüm Acar, Michael Backes, and Sascha
Fahl. Stack Overﬂow Considered Harmful? The Impact of
CopyPaste on Android Application Security. 2017.
[28] Hogben Giles and Idika Nwokedi.
Protecting against
unintentional regressions to cleartext traﬃc in your Android
apps.
https://android-developers.googleblog.
com/2019/12/an-update-on-android-tls-adoption.
html. 2019, Accessed: June, 2020.
[29] Leonid Grustniy. What’s wrong with “legal” commer-
cial spyware.
https://www.kaspersky.com/blog/
stalkerware-spouseware/26292/. 2019, Accessed: June,
2020.
[30] John Hubbard, Ken Weimer, and Yu Li Chen. A study of SSL
Proxy attacks on Android and iOS mobile applications. 2014.