### Blocking HTTP Connections with Exceptions

Our approach blocks HTTP connections by default. However, it allows HTTP connections if they are initiated by the `com.adlib.unsafe` ad library. This enables the ad library to support occasional HTTP connections without needing a priori knowledge of domain names and, more importantly, without affecting the app's security policy.

### Implementation

We implemented this new extension by modifying the `isCleartextTrafficPermitted` API to recognize the XML policy node. Our modification involves stack trace inspection to determine which package name initiated the call. For each package name in the stack trace, we check whether the Network Security Policy (NSP) contains a custom policy for that specific package. If a custom policy exists, we apply it; otherwise, we use the default policy. If the connection is not allowed, our implementation raises a `RuntimeError` indicating a policy violation.

### Adoption and Backward Compatibility

App developers and network libraries can easily adopt our extension. Since we modify an API that these libraries already invoke, they can benefit from our policy without any additional changes. Our extension is fully backward compatible and can serve as a drop-in replacement for the old version. Apps and policies unaware of our extension will function exactly as before.

### Performance Considerations

We implemented our extension on a Pixel 3A running Android Pie (pie-qpr3-b-release). The patch consists of fewer than 30 lines of code and modifies only two components of the Android framework: the policy parser and the `isCleartextTrafficPermitted` API. We measured the overhead using a microbenchmark: an app that performs 1,000 HTTP requests using the OkHttp3 library. We ran the app 100 times, both with and without our modifications, and computed the difference.

- **Without Modification:**
  - Average execution time: 0.004 ms
  - Standard deviation: 0.006 ms

- **With Modification:**
  - Average execution time: 0.30 ms
  - Standard deviation: 0.094 ms

We believe the overhead of our defense mechanism is negligible, especially when compared to the overhead incurred by network I/O operations.

### Limitations

While our implementation enhances the current Network Security Policy, it has some limitations:

1. **Threat Model:** We operate under the same threat model as the actual NSP, meaning we do not protect against malicious third-party libraries that aim to evade the developer-defined policy. This limitation also applies to the standard NSP, as a malicious library can bypass even the strictest security policy by using its "custom" API or native code.

2. **Stack Trace Reliability:** We rely on the stack trace to identify which component initiated the network connection. There may be benign situations where the stack trace cannot be fully trusted, such as when using dynamic code loading or threading with worker threads. A detailed analysis of potential issues with stack trace-based "library compartmentalization" is provided in FlexDroid [40]. While FlexDroid's threat model considers malicious libraries, combining their secure inter-process stack trace inspection with our defense mechanism could create a comprehensive solution.

3. **Current Support:** We currently support only the `cleartextTrafficPermitted` attribute. Some features, like certificate pinning, already provide sufficient granularity and do not need to be sandboxed on a per-package basis. Certificate pinning, for example, creates a sort of "per-site sandbox."

### Related Work

Several areas of research are relevant to this paper: Network Security, the dangers of "code reuse," and advertisements.

#### Network Security

- **SSL Security Handling:** Fahl et al. [26] introduced a concept similar to the NSP, allowing developers to define different SSL configurations and options, such as certificate pinning, using an XML policy. This approach prevents developers from writing code responsible for certificate validation and verification.
- **Unencrypted Connections Risks:** Vanrykel et al. [46] studied how apps send unique identifiers over unencrypted connections, exposing users to privacy threats. Other works [16, 37] show how apps are vulnerable to remote code injection due to code updating procedures over HTTP.
- **Adoption of Secure Connections:** Razaghpanah et al. [39] measured the adoption of different libraries performing SSL/TLS operations by fingerprinting their handshakes. Oltrogge et al. [34] measured the adoption of certificate pinning and found that developers consider its implementation complex.
- **Identifying SSL Problems:** Fahl et al. [25] used static code analysis to find multiple applications with SSL/TLS code potentially vulnerable to man-in-the-middle (MITM) attacks. Hubbard et al. [30] and Onwuzurike et al. [35] combined static and dynamic analysis to identify SSL vulnerabilities in popular Android apps.
- **Defense Mechanisms:** Damjan et al. [15] proposed dynamic certificate pinning to overcome broken SSL/TLS implementations, while Zhao et al. [51] discussed counter-measures against SSLStrip.

#### Code Reuse

- **Developer Reliance on Online Platforms:** Linares-Vásquez et al. [47] analyzed questions on StackOverflow related to Android and built a system to pair code snippets from StackOverflow with Android framework code. Fischer et al. [27] measured the proliferation of security-related code snippets from StackOverflow in Android apps available on Google Play. Verdi et al. [48] investigated security vulnerabilities in C++ code snippets shared on StackOverflow.

#### Advertisements

- **Privacy Implications:** Book et al. [13] tracked the increase in the use of ad libraries among apps and highlighted the privacy risks posed by the permissions used by these libraries. Son et al. [42] demonstrated how malicious ads can leak personally identifiable information (PII). Stevens et al. [43] showed how users can be tracked across ad providers due to the amount of personal information sent by ad libraries.
- **Security Impact:** AdDroid [36], AFrame [50], and AdSplit [41] propose different approaches to achieve privilege separation for applications and ads, allowing ad libraries to run in a separate process from the application.

### Conclusion

In this work, we conducted the first large-scale analysis of Network Security Policies in the Android ecosystem and explored the adoption of this new defense mechanism by Android apps. Our analysis revealed that many developers still allow full cleartext traffic in their applications. We determined that one root cause is the complex ad ecosystem. Based on these findings, we designed and implemented a drop-in extension to the current NSP, allowing developers to specify a "per-package" policy. This enables them to embed third-party ad libraries without compromising their app's security. We hope this work provides useful insights to accelerate Google's "HTTPS Everywhere on Android" effort.

### Acknowledgements

We would like to thank our shepherd Ben Andow for his help in significantly improving this paper, and all the anonymous reviewers for their constructive feedback. We are also grateful to Dario Nisi and Emanuele Cozzi for their assistance with experiments and graphs. Finally, our thanks go to Betty Sebright and her team: "keep pushing" you once said—we did not forget.

### References

[References listed here]

---

This revised version aims to make the text more coherent, clear, and professional. It also ensures that the structure and flow of the document are improved for better readability.