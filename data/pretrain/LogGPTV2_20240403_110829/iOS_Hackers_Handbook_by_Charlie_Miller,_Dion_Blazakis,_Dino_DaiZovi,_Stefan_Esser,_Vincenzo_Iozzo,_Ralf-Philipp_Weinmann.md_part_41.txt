Chapter 9 n Kernel Debugging and Exploitation 295
ifdemux->datalen = ndrv->length;
return 0;
}
This function takes an ndrv_demux_desc structure from user space and con-
verts it into an ifnet_demux_desc structure for kernel space. These structures
are defi ned as follows:
struct ndrv_demux_desc
{
u_int16_t type;
u_int16_t length;
union
{
u_int16_t ether_type;
u_int8_t sap[3];
u_int8_t snap[5];
u_int8_t other[28];
} data;
};
struct ifnet_demux_desc {
u_int32_t type;
void *data;
u_int32_t datalen;
};
The defi nition of these structures shows that you are limited in what you
can write to the overfl owing buffer. The type fi eld can be fi lled only with
16-bit values larger than DLIL_DESC_ETYPE2, which is defi ned as 4. The datalen
fi eld can only be smaller than 29, and the data fi eld will be a pointer into the
structure copied from user space. This is quite limited, but your goal is to
overwrite a pointer to the next element of the freelist. You, therefore, can con-
struct the exploit in a way that the data pointer within an ifnet_demux_desc
structure overfl ows the address of the next block in the freelist. This means
that once the free block becomes the head of the freelist, the next allocation
returns a memory block that is within the structure copied from user space.
Because you control the content of that memory, you also control the fi rst
four bytes, which are assumed to be a pointer to the next block in the freelist.
Therefore, you control the new head of the freelist. You let it be an address
inside the system call table. The next allocation then returns the address
inside the system call table. You make the kernel fi ll it with data you control.
This results in arbitrary kernel code execution, after you call the overwritten
system call handler.
Because you are limited in what you can write, the exploit is a bit more com-
plicated than a normal heap-based buffer overfl ow. However, because you can
write a pointer to data you control, you just have to add an additional step so
cc0099..iinndddd 229955 44//1166//22001122 55::4477::1111 PPMM
296 Chapter 9 n Kernel Debugging and Exploitation
that you control the head of the freelist after two, instead of one, allocations. The
full source code of this exploit, including a kernel patch that forward-ports this
vulnerability into current kernels for experimentation purposes, is available at
http://github.com/stefanesser/ndrv_setspec.
Summary
In this chapter you stepped into the kernel space of iOS for the fi rst time within
this book. We covered different topics about kernel exploit development, from
extracting and decrypting the kernel binary at fi rst, up to achieving arbitrary
code execution at kernel level.
We introduced you to reversing IOKit kernel drivers contained within the
kernel binary and discussed how to fi nd interesting kernel code that should be
audited for vulnerabilities. We showed you how the iOS kernel can be remotely
debugged with another computer and the KDP protocol, for easier kernel exploit
development.
We also walked you through the exploitation of different types of kernel
vulnerabilities, including the exploitation of arbitrary memory overwrites,
uninitialized kernel variables, stack-based buffer overfl ows, and fi nally, heap-
based buffer overfl ows inside kernel space.
Finally, we discussed the implementation and exploitation of the kernel’s zone
heap allocator and demonstrated how the heap feng shui technique is used in
kernel-level heap buffer overfl ow exploits.
cc0099..iinndddd 229966 44//1166//22001122 55::4477::1111 PPMM
CHAPTER
10
Jailbreaking
If you followed all the examples in this book, you most probably have done
your experiments and also your own research on a jailbroken iPhone. You have
that in common with a large number of people, because nearly all iPhone secu-
rity research is performed on jailbroken devices. However, for the majority of
people, including the security community and iPhone security researchers, the
inner workings of a jailbreak are completely unknown. Many people think of
jailbreaks as black boxes that work — like magic — after they click a jailbreak
button in their tool of choice. This is often because knowing the inner workings
of a jailbreak is not required for the development of things they are working
on, for example userland exploits.
But if you’ve ever wondered how the jailbreaking process works internally,
this chapter will answer a lot of your questions.
After a short introduction of the different jailbreak types, we use the
redsn0w jailbreak as an example, guiding you step by step through the
jailbreak process happening on your device. This chapter also introduces
you to the inner workings of the kernel patches applied by the jailbreak, so
that you can learn which of these patches are actually required and which
are optional.
297
cc1100..iinndddd 229977 44//1166//22001122 55::4477::4422 PPMM
298 Chapter 10 n Jailbreaking
Why Jailbreak?
People jailbreak their iOS devices for many reasons. Some of them want an open
platform for which they can develop software, others like the idea of having
total control over their devices, some require jailbreaks to install software like
ultrasn0w to bypass cellular carrier locks, and some use jailbreaks to pirate
iPhone applications.
Security researchers, on the other hand, are normally motivated to jailbreak
their own iOS devices for other reasons. The fact that normal iPhones are locked
down tightly and do not allow the execution of unsigned code is a big road-
block when it comes to evaluating the security of a system, or trying to discover
security vulnerabilities within it.
Even with an iOS development account from Apple, code running on the iPhone
is limited, due to the sandbox and other restrictions. For example, processes
are not even allowed to execute other processes or to fork. Also, the sandbox
stops researchers from tampering with other applications’ fi les, and attaching
a debugger to MobileSafari to debug it is simply not possible.
Although it is possible to detect the names of running processes from within
a normal iPhone application, a user has no way to stop suspicious processes
from running or to analyze what they are doing. Just remember the incident
with GPS movement profi les that were stored on every iPhone due to a bug.
This problem, which is also known as “locationgate,” would never have been
found without the availability of a jailbreak.
Most importantly, the majority of the research that led to this book would
not have been possible without the availability of public jailbreaks. You may
be surprised to fi nd that the majority of iPhone security researchers leave the
whole work of jailbreaking to groups like the iPhone Dev Team or the Chronic
Dev Team, and are merely users of their tools. However, jailbreaking iOS devices
gets harder and harder with every new hardware and software revision, and
therefore it is important for more people from the security community to help
out the jailbreaking teams. We hope the rest of this chapter raises your appetite
to participate in the development of jailbreaks in the future.
Jailbreak Types
Although people have been able to jailbreak their iPhones for many years across
most of the different iOS versions, not all of these jailbreaks have offered the
same set of features. The major reason for this is that the quality of a jailbreak
depends — in large part — on the security vulnerabilities that can be found and
used to break the restrictions enforced by the device. Naturally, vulnerabilities
exploited once by a jailbreak will be known to Apple and usually fi xed as soon
cc1100..iinndddd 229988 44//1166//22001122 55::4477::4422 PPMM
Chapter 10 n Jailbreaking 299
as possible in the next revision of iOS. Therefore, nearly every new version of iOS
requires a new set of vulnerabilities to jailbreak the device. However, sometimes
vulnerabilities reside in the hardware and cannot be fi xed by Apple with a simple
software upgrade. They require a new set of hardware, which will take Apple a
longer time to fi x, because it requires releasing the next revision of iPhones or iPads.
Jailbreak Persistence
Depending on the vulnerabilities used for jailbreaking, the effects of a jailbreak
might be persistent, or they might disappear the moment a device is switched
off and on again. To describe these two kinds of jailbreaks, the jailbreak com-
munity coined the two terms tethered jailbreak and untethered jailbreak.
Tethered Jailbreaks
A tethered jailbreak is a jailbreak that disappears when a device is restarted. The
jailbroken device requires some form of re-jailbreak after every reboot. This
usually means it has to be connected to a computer, every time it is switched off
and on again. Because of the USB cable required for this procedure, the use of
the term tethered makes sense. However, the term is also used if the re-jailbreak
does not require a USB connection, but does require a visit of a certain website
or execution of a certain application.
If the vulnerability exploited is in some privileged code, a tethered jailbreak
could consist of only a single vulnerability being exploited. An example for
this is the limera1n bootrom exploit that is currently used for most of the iOS
4 and 5 jailbreaks. Another example would be an exploit against a vulnerability
in the USB kernel driver of iOS. However, no such vulnerability or exploit is
currently public.
If no such vulnerability or exploit is available, initial entry into the device
might be accomplished through a vulnerability in an application with fewer
privileges, such as MobileSafari. However, this alone would not be considered
a jailbreak, because without an additional kernel exploit, it is not possible to
disable all the security features.
So a tethered jailbreak consists of one exploit against privileged code,
or one exploit against unprivileged code combined with another privilege
escalation exploit.
Untethered Jailbreaks
Untethered jailbreak is the term coined for capitalizing on a persistent vulner-
ability that will not disappear by rebooting the device. It is untethered because
it does not require a re-jailbreak each time the device is rebooted. It is, therefore,
the better form of a jailbreak.
cc1100..iinndddd 229999 44//1166//22001122 55::4477::4433 PPMM
300 Chapter 10 n Jailbreaking
Naturally, an untethered jailbreak is much harder to accomplish because it
requires vulnerabilities in very specifi c places in the bootchain. In the past,
this was possible because very powerful vulnerabilities in the hardware were
found that allowed for exploiting the device very early in the boot chain. But
these vulnerabilities are now gone, and no vulnerabilities of the same quality
seem to be on the horizon.
Because of this, untethered jailbreaks are often a combination of some form
of tethered jailbreak used in conjunction with additional exploits that allow
persisting on the device. The initial tethered jailbreak is then used to install the
additional exploits on the root fi lesystem of the device. At least two additional
exploits are required, because fi rst arbitrary unsigned code must be executed
and then privileges must be escalated to be able to patch the kernel.
The exact actions required to jailbreak a device completely will become
obvious once you read through the following sections, which introduce you
to the full picture.
Exploit Type
The location of a vulnerability impacts your access level to the device. Some
allow low-level hardware access; others allow limited permissions inside
the sandbox.
Bootrom Level
Bootrom-level vulnerabilities are the most powerful vulnerabilities from the
point of view of a jailbreaker. The bootrom is contained inside the hardware of
the iPhone and vulnerabilities in there cannot be fi xed by pushing a software
update. Instead, the vulnerabilities can be fi xed only within the next hardware
revision. In the case of the limera1n vulnerability, Apple did not produce new
revisions of iPad 1 or iPhone 4, although the vulnerability was known long
before the A5 devices, iPad 2 and iPhone 4S, hit the market.
Bootrom-level vulnerabilities are not only the most powerful because they
cannot be fi xed. They are also powerful because they allow you to replace or
patch every piece of the whole bootchain, including the kernel’s boot arguments.
Also, because the exploit occurs very early in the bootchain, the exploit pay-
load will have full access to the hardware. For example, it is possible to use the
GID key of the AES hardware accelerator to decrypt IMG3 fi les, which allows
decrypting new iOS updates.
iBoot Level
Vulnerabilities inside iBoot are nearly as powerful as vulnerabilities inside the
bootrom when it comes to the features they can provide. These vulnerabilities
cc1100..iinndddd 330000 44//1166//22001122 55::4477::4433 PPMM
Chapter 10 n Jailbreaking 301
have the downside that iBoot is not baked into the hardware and therefore they
can be fi xed by a simple software upgrade.
Aside from this, iBoot is still early enough in the bootchain that boot argu-
ments can be given to the kernel, the kernel can be patched, or the hardware
can be used directly to perform GID key AES operations.
Userland Level
Userland jailbreaks like JBME3 (http://jailbreakme.com) are based com-
pletely on vulnerabilities in userland processes. These processes run either
with the permissions of the root user, if they are system processes; or with the
permissions of a lesser privileged user like the mobile user, in case they are
user applications. In both cases at least two exploits are required to jailbreak
the device. The fi rst exploit has to achieve arbitrary code execution, whereas the
second exploit has to escalate privileges in a way that the kernel-based security
restrictions are disabled.
In previous versions of iOS, code signing could be disabled from user space
as long the exploited process was running as root. Nowadays, kernel memory
corruption or kernel code execution is required to disable the code-signing
enforcement.
Compared to bootrom and iBoot-level vulnerabilities, userland vulnerabili-
ties are less powerful, because even if kernel code execution is possible, certain
hardware features like the GID key of the AES accelerator are not accessible
anymore. Also, userland vulnerabilities are easier for Apple to fi x and remote
userland vulnerabilities are often fi xed very quickly by Apple, because they can
also be used for drive by iPhone infection malware.
Understanding the Jailbreaking Process
This section looks at the inner workings of the redsn0w jailbreaking tool. It was
developed by the iPhone Dev Team and you can download it from their site at
http://blog.iphone-dev.org/. It is the most popular tool available right now
for jailbreaking pre-A5 devices, because it supports the majority of iOS versions,
is very easy to use, seems to be the most stable jailbreak, and comes for both
Windows and OS X.
With redsn0w, jailbreaking is nothing more than clicking a few buttons and
setting your iPhone into DFU (Device Firmware Upgrade) mode. It’s easy enough
that even novice users are tempted to jailbreak their iPhones. Figure 10.1 shows
the welcoming screen of redsn0w.
After you click the Jailbreak button, redsn0w walks you through setting your
iPhone into DFU mode and then, depending on the device you have attached,
offers you a few different jailbreak features that you can select from. You simply
cc1100..iinndddd 330011 44//1166//22001122 55::4477::4433 PPMM
302 Chapter 10 n Jailbreaking
select your choice (for example, multitasking gestures), click the Next button,
and wait for redsn0w to do its work.
Figure 10.1: redsn0w startup screen
Although this is a very simple process from a user’s point of view, many
things are happening under the hood and no one really knows about them
except for a few in the jailbreak community. After you read through the fol-
lowing sections, you will be one of those who know all about the inner work-
ings of redsn0w.
All the information in the following sections has been extracted, with the
permission of the author, from a decompiled version of the redsn0w jailbreak.
Because A5 devices like the iPad 2 or the iPhone 4S do not have a publicly
known bootrom vulnerability, any jailbreak of these devices must be userland
level. However, this simply means the fi rst two steps, exploiting the bootrom
and booting a ramdisk, must be replaced by something like an exploit in
MobileSafari and a kernel vulnerability. The rest of the jailbreaking process
works the same.
Exploiting the Bootrom
The jailbreaking process starts with redsn0w using the limera1n DFU bootrom
exploit to execute code at the highest privilege level possible. The vulnerability
exploited is a heap-based buffer overfl ow in the USB DFU stack of the bootrom
cc1100..iinndddd 330022 44//1166//22001122 55::4477::4433 PPMM
Chapter 10 n Jailbreaking 303
in pre-A5 devices. We will not discuss the specifi cs of this vulnerability here. If
you are interested in this vulnerability, you can fi nd a number of descriptions
and source code to exploit it in various places like THEiPHONEWiKi: http://
theiphonewiki.com/wiki/index.php?title=Limera1n_Exploit.
For our purposes, the only thing you need to know is that this exploit is
used to patch the signature verifi cation inside the bootrom code, which allows
you to boot arbitrary ramdisks and patched versions of Low-Level-Bootloader
(LLB), iBoot, and the kernel. Source code that performs exactly these actions
was released by the Chronic Dev Team on GitHub (https://github.com/
Chronic-Dev/syringe). If you want to write your own jailbreaking tool from
the ground up, this is a good place to start, because the source code of redsn0w
is not publicly available.
Booting the Ramdisk
redsn0w uses the limera1n exploit to boot the system using a patched kernel and
a custom-prepared ramdisk. The kernel is patched with a number of jailbreak
patches to allow the execution of unsigned code. However, it does not contain