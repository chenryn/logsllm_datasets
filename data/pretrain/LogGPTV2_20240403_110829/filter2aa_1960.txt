# Jugaad: Linux Thread Injection Kit

## Introduction
- **Project Website:** [null.co.in](http://null.co.in/), [nullcon.net](http://nullcon.net/)
- **Author:** Aseem Jakhar
- **About the Author:**
  - Founder of null, an open security community in India.
  - Organizer of nullcon, a leading security conference.
  - Chief Researcher at Payatu Labs.
  - Speaker at various security conferences including Blackhat, Xcon, Gnunify, ISACA Blore, Cocon, Clubhack, and Bangalore Cyber Security Summit.

## About null
- **Organization Type:** Registered Non-Profit
- **Focus Areas:** Security research and knowledge sharing.
- **Chapters:** Six chapters across India with monthly meets and security awareness camps.
- **nullcon:** The go-to destination for hackers and security professionals in the Indian subcontinent.

## Agenda
1. What is Jugaad
2. What Jugaad is not
3. Code Injection
   - Windows
   - Linux
4. Ptrace() Primer
5. Library Injection
6. Jugaad
7. Conclusion

## What is Jugaad?
- **Definition:** Jugaad is a Hindi word meaning workaround or hack.
- **Features:**
  - Code injection technique.
  - Threading capability.
  - Customized payload.
  - True to its name, it provides a flexible and adaptable solution.

## What Jugaad is Not
- **Not a Zero-day Exploit.**
- **Not a Vulnerability.**
- **Not a Privilege Escalation Technique.**

## Code Injection
- **Definition:** Injecting executable instructions/code to alter the default flow of execution.
- **Common Techniques:**
  - Buffer overflow
  - SQL injection (SQLi)
  - Cross-site scripting (XSS)
  - XML injection
  - API manipulation

## Windows
- **API Support:** Allows code injection via a defined API, such as `CreateRemoteThread`.
- **Function Signature:**
  ```c
  HANDLE WINAPI CreateRemoteThread(
      __in   HANDLE hProcess,
      __in   LPSECURITY_ATTRIBUTES lpThreadAttributes, 
      __in   SIZE_T dwStackSize,
      __in   LPTHREAD_START_ROUTINE lpStartAddress,
      __in   LPVOID lpParameter, 
      __in   DWORD dwCreationFlags,
      __out  LPDWORD lpThreadId);
  ```
- **Parameters:**
  - `hProcess`: Handle to the process where the thread will be created.
  - `dwStackSize`: Initial size of the stack in bytes.
  - `lpStartAddress`: Pointer to the function to be executed by the thread.
  - For more details, refer to the [MSDN documentation](http://msdn.microsoft.com/en-us/library/ms682437%28v=vs.85%29.aspx).

## Linux
- **API Support:** No direct remote code injection API like `CreateRemoteThread` in Windows.
- **Alternative:** Use `ptrace()` for debugging and tracing capabilities.

## Ptrace() Primer
- **Tracing API:** Used for debugging.
- **Function Signature:**
  ```c
  long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data);
  ```
- **Parameters:**
  - `request`: Operation to perform on the traced process.
  - `pid`: Process identifier of the process being traced.
  - `addr` and `data`: Values depend on the type of operation.
- **Common Requests:**
  - `PTRACE_ATTACH`: Attaches to the specified process.
  - `PTRACE_CONT`: Restarts the stopped child process.
  - `PTRACE_DETACH`: Detaches from the process.
  - `PTRACE_PEEKTEXT`: Reads a word at the specified address.
  - `PTRACE_POKETEXT`: Writes a word to the specified address.
  - `PTRACE_GETREGS`: Copies the general purpose registers.
  - `PTRACE_SETREGS`: Sets the general purpose or floating-point registers.

## Library Injection
- **Technique:** Injecting shared libraries into running processes.
- **Tool:** `injectSo` (open source).
- **Capabilities:**
  - Read/write file descriptors.
  - Intercept I/O operations.
  - Modify functions.
- **Example:**
  ```sh
  cat /proc/1234/maps
  00d74000-00f63000 r-xp 00000000 08:01 8698  /home/victim/evil.so
  ```

## Jugaad
- **Overview:** A thread injection kit for Linux.
- **Features:**
  - In-memory injection.
  - Stealthier than library injection.
  - No traces in `/proc/<pid>/maps`.
- **Components:**
  - Memory Allocation and Execution.
  - Threadification.
  - Payload (Evil code).
  - Implementation.
  - Demo.

### Memory Allocation and Execution
- **System Call:** `mmap2`
  ```c
  void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
  ```
  - `length`: Length of the mapping.
  - `prot`: Desired memory protection.
  - `flags`: Mapping-specific flags.

### Sample Shellcode
```c
"\x31\xdb"                     // xor %ebx,%ebx # Zero out ebx
"\xb9\x10\x27\x00\x00"         // mov $0x2710,%ecx # memory size 10000 bytes
"\xba\x07\x00\x00\x00"         // mov $0x7,%edx # page permissions R|W|E = 7
"\xbe\x22\x00\x00\x00"         // mov $0x22,%esi #flags MAP_PRIVATE|MAP_ANONYMOUS 
"\x31\xff"                     // xor %edi,%edi # Zero out edi
"\x31\xed"                     // xor %ebp,%ebp # Zero out ebp
"\xb8\xc0\x00\x00\x00"        // mov $0xc0,%eax # mmap2 sys call no. 192
"\xcd\x80"                     // int $0x80  # s/w interrupt
"\xcc";                        // int3       # breakpoint interrupt
```

### Threadification
- **System Call:** `clone`
  ```c
  int clone(int (*fn)(void *), void *child_stack, int flags, void *arg, ...);
  ```
  - `fn`: Function to execute.
  - `child_stack`: Stack bottom address.
  - `flags`: Shared resources between parent and child.

### Custom Payload
- **Structure:**
  - `[CLONE_HEAD] [PAYLOAD] [CLONE_TAIL]`
  - `CLONE_HEAD`: `clone` syscall.
  - `PAYLOAD`: Evil code.
  - `CLONE_TAIL`: `exit` syscall.

### libjugaad API
- **Function:**
  ```c
  int create_remote_thread(pid_t pid, int stack_size, unsigned char *tpayload, size_t tpsize, int thread_flags, int mmap_prot, int mmap_flags, void *bkpaddr);
  ```

## Conclusion
- **Achievements:**
  - Stealthy `CreateRemoteThread` equivalent for Linux.
  - Simple debugging functionality can be abused for injection.
  - Library injection is less stealthy due to shared object names in `/proc/<pid>/maps`.
  - Disable `ptrace` functionality using SELinux or AppArmor for enhanced security.

## Project Details
- **Website:** [null.co.in/section/projects](http://null.co.in/section/projects)
- **Version 1:** Supports 32-bit systems.
- **Next Release:** Will include 64-bit support and possibly library injection without traces in `/proc/<pid>/maps`.

## Contribution
- **Local Chapters:** Join null local chapters.
- **Projects:** Contribute to null projects.
- **Jobs:** [jobs.nullcon.net](http://jobs.nullcon.net)
- **Conference:** [nullcon.net](http://nullcon.net)
- **Mailing List:** [groups.google.com/group/null-co-in](http://groups.google.com/group/null-co-in)

## Thanks
- **Contact:**
  - aseemjakhar@gmail.com
  - null@null.co.in
- **Feel free to reach out for contributions or queries.**

For more information, visit [null.co.in](http://null.co.in/) and [nullcon.net](http://nullcon.net/).