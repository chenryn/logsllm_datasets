included in the query objects. Seeing the hash outputs in
the query object provides no advantage at determining the
inputs, beyond using dictionary attacks which are infeasible
for a computationally bounded adversary (in the security
parameter c0), since the inputs all include the random v,
which is c0 bits long.
There is one subtlety here: if the server has some external
knowledge about how recently a given query was last issued,
it can determine that the set of corresponding Bloom ﬁlter
positions at that level are all 1s (and thus, that the values
observed at some positions are in fact Tpos + v mod 2c0 ,
rather than Tpos). However, knowing this still does not give
the server any knowledge of v: all possible values of Tpos
and v are still equally possible and likely.
Lemma 2. For a constant u > 1, a Bloom ﬁlter using k
hashes, with the size-to-contained items ratio of k × u, has
a false positive rate bounded by u
Proof. Suppose a Bloom ﬁlter contains z items and has
a size-to-items ratio of k × u. Thus, the size of the Bloom
ﬁlter in bits is b = z × k × u. The false positive rate is
(Section 3.2)
−k.
(cid:4)
(cid:5)
1 −
r =
1 − 1
b
(cid:7)k
(cid:6)kz
(cid:5)
(cid:6)k
≤
zk
b
−k
= u
Lemma 3. For a security parameter c1, a constant u > 1,
and a number of log n lookups on Bloom ﬁlters with size-to-
contained items ratios of k × u, where k = c1 + logu log n
hashes, the overall false positive rate is negligible in c1.
Proof. From Lemma 2 we know that the false positive
rate for any one lookup is r ≤ u
−k. Taking the union bound
over log n queries, the probability of failure is bounded by
r log n ≤ u
−c1 which is negligible in c1.
Theorem 1. The server can only unlock one path down
the query object, and all paths appear identical to the server.
Proof. (sketch) Each of the 2 log2 n nodes in the query
object, as illustrated in Figure 2, provides simply a list of
Bloom ﬁlter indices, and a set of encrypted values unlocking
edges to one of the two next nodes. The negligible Bloom
ﬁlter false positive rate, established by the base Bloom ﬁlter
ORAM, guarantees that the set of indices will be unique
for every query. Moreover, these indices, chosen by a keyed
secure hash, are indistinguishable from random.
Each edge contains an item label which is again uniquely
requested, only up to once per level. The label is also de-
termined by the keyed secure hash. Since the contents of
any single edge for a given query is indistinguishable from
random, and since these edges are included in the query
object in a random order, unlocking the edge provides no
information to the server about the path.
The contents of the Bloom ﬁlter provide the key and deter-
mine which one edge the server can unlock. Since, as shown
in Lemma 1, the server has no advantage at determining
the blinding value v, the server has no advantage at guess-
ing the alternate value at any position of the Bloom ﬁlter,
and is limited to a dictionary attack against the ciphertexts
of the other edges. Thus, the server can only unlock the
edge corresponding to the Bloom ﬁlter contents.
300Theorem 2. The server learns nothing from the Bloom
ﬁlter construction.
Proof. (sketch) All Bloom ﬁlter construction processes,
for any particular level, appear to the server to be indepen-
dent of which bits are set and which items are represented.
The server sees only the number of bits in the Bloom ﬁlter,
which is known beforehand.
Theorem 3. An honest but curious adversary gains no
non-negligible advantage at guessing the client access pattern
by observing the sequence of requests.
Proof. (sketch) Because of Theorem 1, the adversary
learns nothing it would not learn by observing a standard,
interactive, Bloom ﬁlter-ORAM. We defer to the security
claims of previous ORAMs (e.g.
[19]) and Lemma 3 which
shows the probability of Bloom ﬁlter failure to be negligible
in the considered security parameter.
Theorem 4. An actively malicious adversary has no ad-
vantage over the honest but curious adversary at violating
query privacy.
Proof. (sketch) In the underlying Bloom ﬁlter ORAM
[19], the client detects server protocol deviation, preventing
the server from learning anything new from issuing incorrect
responses. The non-interactive construction creates a slight
diﬀerence in the Bloom ﬁlter authenticity check: the Bloom
ﬁlter correctness check is now implicit. That is, the server
can only unlock the key if the stored value is the one placed
by the client, whereas in previous Bloom ﬁlter ORAMs, the
client had to test the authenticity of the stored Bloom ﬁlter
bits before it was safe to continue the query.
7. ANALYSIS
Following from the construction in Section 5, the query
It consists of 2 log n − 1
object size is O(log n log log n).
nodes, each of which queries k = log log n Bloom ﬁlter po-
sitions. This is transmitted to the server, which performs
k log n decryption attempts (of which log n are successful)
before sending log n blocks back to the client. This yields
the online cost of O(log n log log n).
The amortized oﬄine cost per query considers the time
required to build each level. A level sized z is built twice
every z queries. Shuﬄing these items using a randomized
shell sort costs O(z log z). Since, as shown in Lemma 3, the
Bloom ﬁlter is sized z log log n, and it must also be shuf-
ﬂed, the Bloom ﬁlter construction cost of O(z log z log log n)
dominates asymptotically. Summing over the i levels sized
z = 4i, and amortizing over the queries for each level be-
tween rebuilding, we ﬁnd a total amortized oﬄine cost of
O(log2 n log log n)
A query requires a single online round trip: the client
generates a query object, sends it to the server, and receives
a response containing the answer. The oﬄine shuﬄe process
requires several round trips (as discussed in Section 5.1), but
this cost is amortized over a period corresponding to many
queries, so that the average number of round trips per query
is still well under 2.
We also estimate the cost of querying and shuﬄing for a
sample hardware conﬁguration. The online cost is now lim-
ited by network, disk, and encryption throughput (instead
of, e.g., network round trips in related work). The oﬄine
disk seek cost
total disk throughput
crypto throughput
net throughput
net round trip
0
400 MBytes/sec
200 MBytes/sec
125 MBytes/sec
50 ms
Figure 5: Assumed hardware conﬁg.
Acceptable failure rate
Item block size
Symmetric key size
Bloom ﬁlter hashes
−128
2
10,000 bytes
256 bits
50
Figure 6: Database parameters
cost is limited, as in existing work, by network, disk, and
encryption throughput.
To make the comparison between SR-ORAM and existing
work as general as possible, we consider an ideal storage-
free interactive ORAM, which includes just two core costs
inextricably linked to any pyramidal storage-free ORAM,
and ignores any other costs.
First is the online cost of retrieving an item from an
ORAM interactively, requiring log2 n round trips and the
data transfer cost of log2 n blocks. Second is the oﬄine cost
of obliviously constructing each level, assuming 2i real items
and 2i fakes at each level i, using a randomized shell sort.
Thus, this ideal storage-free interactive ORAM provides a
lower bound for any existing ORAMs that do not assume
super-logarithmic client storage. Existing work, including
[6] and [7], fall into the category of a storage-free interactive
ORAM, but have signiﬁcant other costs, pushing their cost
in fact much above this lower bound.
As discussed in Section 3.2, given an upper bound on ac-
ceptable failure (false positive) rate r, we can calculate the
necessary Bloom ﬁlter size as a function of the number of
hashes used for lookup k.
For example, for a Bloom ﬁlter false positive rate of r =
−64, and constant k = 50 (chosen to optimize a trade-
2
oﬀ between the Bloom ﬁlter construction and online query
costs—see Lemma 3), the resulting optimal Bloom ﬁlter size
is under a third of the item storage size (of 2n blocks), for a
wide variety of database sizes ranging from a megabyte up to
−128, as
a petabyte. For bounding the false positive rate at 2
we assume for the performance analysis below, Bloom ﬁlter
storage of less than the total item storage size still suﬃces.
The target hardware conﬁguration is listed in Figure 5,
and the taret database conﬁguration in Figure 6. Solid state
disks are assumed, resulting in a low disk seek cost. Disk
access time is modeled as a function of the disk throughput;
divergence between this model and reality is examined and
resolved in Section 7.1.
The results are illustrated in Figure 7. The item shuﬄe
cost is unchanged over the ideal ORAM construction, but
the Bloom ﬁlter shuﬄe cost adds a signiﬁcant fraction to
the overall level construction cost. As can be seen, however,
the log2 n round trips imposed by existing work quickly add
up to exceed the SR-ORAM shuﬄe cost, in even moderate
latency networks. In general, the additional oﬄine cost is
small compared to the savings in the online cost.
The SR-ORAM online cost encompasses the cost of trans-
ferring the query object across the network, reading each
301)
c
e
s
(
t
s
o
c
y
r
e
u
q
d
e
z
i
t
r
o
m
A
)
c
e
s
(
t
s
o
c
y
r
e
u
q
d
e
z
i
t
r
o
m
A
Amortized cost per query vs database size, 150ms RTT
Ideal storage-free ORAM amortized cost
SR-ORAM amortized cost
portion of SR-ORAM cost relating to Bloom filter construction
 8
 7
 6
 5
 4
 3
 2
 1
 0
 10000  100000  1e+06  1e+07  1e+08  1e+09  1e+10  1e+11  1e+12  1e+13
Database size (bytes)
Amortized query cost vs latency, 1TB db
Ideal storage-free ORAM amortized cost
SR-ORAM amortized cost