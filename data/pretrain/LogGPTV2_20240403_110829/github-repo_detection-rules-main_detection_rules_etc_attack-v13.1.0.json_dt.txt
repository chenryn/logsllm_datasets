### Windows Management Instrumentation (WMI) Event Subscription

**Description:**
Windows Management Instrumentation (WMI) can be utilized to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may leverage WMI's capabilities to subscribe to an event and execute arbitrary code upon the occurrence of that event, thereby achieving persistence on a system. To evade detection, adversaries might compile WMI scripts into Windows Management Object (MOF) files with a .mof extension. Examples of events that can be subscribed to include wall clock time or the computer's uptime. Several threat groups have reportedly used this technique for maintaining persistence.

**External References:**
- [Dell WMI Persistence](https://www.secureworks.com/blog/wmi-persistence)
- [Kazanciyan 2014](https://www.defcon.org/images/defcon-22/dc-22-presentations/Kazanciyan-Hastings/DEFCON-22-Ryan-Kazanciyan-Matt-Hastings-Investigating-Powershell-Attacks.pdf)
- [Mandiant M-Trends 2015](https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf)

**Detection:**
Monitor WMI event subscription entries and compare current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns can also be used to detect WMI changes that could indicate attempts at persistence.

**Kill Chain Phases:**
- **Persistence**

**Platforms:**
- **Windows**

**Permissions Required:**
- **Administrator, SYSTEM**

---

### Launch Daemon (macOS and OS X)

**Description:**
According to Appleâ€™s developer documentation, when macOS and OS X boot up, `launchd` is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in `/System/Library/LaunchDaemons` and `/Library/LaunchDaemons`. These LaunchDaemons point to the executables that will be launched. Adversaries may install a new launch daemon configured to execute at startup by using `launchd` or `launchctl` to load a plist into the appropriate directories. The daemon name may be disguised by using a name from a related operating system or benign software. Launch Daemons are executed under root privileges, so an adversary may use a service to escalate privileges from administrator to root.

**External References:**
- [AppleDocs Launch Agent Daemons](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html)
- [Methods of Mac Malware Persistence](https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf)
- [OSX Malware Detection](https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf)
- [WireLurker](https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/reports/Unit_42/unit42-wirelurker.pdf)

**Detection:**
Monitor Launch Daemon creation through additional plist files and utilities such as Objective-See's Knock Knock application.

**Kill Chain Phases:**
- **Persistence**
- **Privilege Escalation**

**Platforms:**
- **macOS**

**Permissions Required:**
- **Administrator, root**

---

### Ptrace System Calls

**Description:**
Adversaries may inject malicious code into processes via ptrace (process trace) system calls to evade process-based defenses and potentially elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. It involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process, including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process and then invoking that memory. It can also be done with `PTRACE_POKETEXT/PTRACE_POKEDATA`, which copy data to a specific address in the target process's memory.

**External References:**
- [PTRACE man](http://man7.org/linux/man-pages/man2/ptrace.2.html)
- [Medium Ptrace JUL 2018](https://medium.com/@jain.sm/code-injection-in-running-process-using-ptrace-d3ea7191a4be)
- [BH Linux Inject](https://github.com/gaffe23/linux-inject/blob/master/slides_BHArsenal2015.pdf)

**Detection:**
Monitor for Linux-specific calls such as the ptrace system call, which should not generate large amounts of data due to their specialized nature. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.

**Kill Chain Phases:**
- **Defense Evasion**
- **Privilege Escalation**

**Platforms:**
- **Linux**

**Permissions Required:**
- **User, Administrator, root**

---

### Dynamic API Resolution

**Description:**
Adversaries may obfuscate and dynamically resolve API functions called by their malware to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various native API functions provided by the OS to perform tasks involving processes, files, and other system artifacts. API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may uncover which functions a binary file may execute via an import address table (IAT) or other structures.

To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to software packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime. Various methods may be used to obfuscate malware calls to API functions, such as storing hashes of function names instead of literal strings.

**External References:**
- [Huntress API Hash](https://www.huntress.com/blog/hackers-no-hashing-randomizing-api-hashes-to-evade-cobalt-strike-shellcode-detection)
- [BlackHat API Packers](https://www.blackhat.com/docs/us-15/materials/us-15-Choi-API-Deobfuscator-Resolving-Obfuscated-API-Functions-In-Modern-Packers.pdf)
- [Drakonia HInvoke](https://dr4k0nia.github.io/dotnet/coding/2022/08/10/HInvoke-and-avoiding-PInvoke.html?s=03)
- [IRED API Hashing](https://www.ired.team/offensive-security/defense-evasion/windows-api-hashing-in-malware)

**Detection:**
Monitor for unusual use of API functions and analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.

**Kill Chain Phases:**
- **Defense Evasion**

**Platforms:**
- **Windows**

**Permissions Required:**
- **User, Administrator, SYSTEM**

---

### Remote Desktop Protocol (RDP)

**Description:**
Adversaries may use valid accounts to log into a computer using the Remote Desktop Protocol (RDP). Microsoft refers to its implementation of RDP as Remote Desktop Services (RDS). Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use credential access techniques to acquire credentials to use with RDP. They may also use RDP in conjunction with accessibility features or terminal services DLLs for persistence.

**External References:**
- [TechNet Remote Desktop Services](https://technet.microsoft.com/en-us/windowsserver/ee236407.aspx)
- [Alperovitch Malware](http://blog.crowdstrike.com/adversary-tricks-crowdstrike-treats/)

**Detection:**
Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.

**Kill Chain Phases:**
- **Lateral Movement**

**Platforms:**
- **Windows**

**Permissions Required:**
- **Remote Desktop Users, User, Administrator, SYSTEM**

---

### Logon Script (Windows)

**Description:**
Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done by adding a path to a script to the `HKCU\\Environment\\UserInitMprLogonScript` Registry key. Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.

**External References:**
- [TechNet Logon Scripts](https://technet.microsoft.com/en-us/library/cc758918(v=ws.10).aspx)
- [Hexacorn Logon Scripts](http://www.hexacorn.com/blog/2014/11/14/beyond-good-ol-run-key-part-18/)

**Detection:**
Monitor for changes to Registry values associated with Windows logon scripts, specifically `HKCU\\Environment\\UserInitMprLogonScript`. Monitor running processes for actions that could be indicative of abnormal programs or executables running upon logon.

**Kill Chain Phases:**
- **Persistence**
- **Privilege Escalation**

**Platforms:**
- **Windows**

**Permissions Required:**
- **User, Administrator, SYSTEM**

---

### ListPlanting

**Description:**
Adversaries may abuse list-view controls to inject malicious code into hijacked processes to evade process-based defenses and potentially elevate privileges. ListPlanting is a method of executing arbitrary code in the address space of a separate live process. Code executed via ListPlanting may also evade detection from security products since the execution is masked under a legitimate process.

List-view controls are user interface windows used to display collections of items. Information about an application's list-view settings is stored within the process' memory in a `SysListView32` control. ListPlanting may be performed by copying code into the virtual address space of a process that uses a list-view control and then using that code as a custom callback for sorting the listed items.

**External References:**
- [Microsoft List View Controls](https://docs.microsoft.com/windows/win32/controls/list-view-controls-overview)
- [Modexp Windows Process Injection](https://modexp.wordpress.com/2019/04/25/seven-window-injection-methods/)
- [ESET InvisiMole June 2020](https://www.welivesecurity.com/wp-content/uploads/2020/06/ESET_InvisiMole.pdf)

**Detection:**
Monitor Windows API calls indicative of the various types of code injection, such as `FindWindow`, `FindWindowEx`, `EnumWindows`, `EnumChildWindows`, and those that can be used to modify memory within another process, such as `VirtualAllocEx/WriteProcessMemory`. Consider monitoring for excessive use of `SendMessage` and/or `PostMessage` API functions with `LVM_SETITEMPOSITION` and/or `LVM_GETITEMPOSITION` arguments.

**Kill Chain Phases:**
- **Defense Evasion**
- **Privilege Escalation**

**Platforms:**
- **Windows**

**Permissions Required:**
- **User, Administrator, SYSTEM**

---

### Domain Policy Modification

**Description:**
Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (e.g., computers, user accounts) can act and interact with each other on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts.

With sufficient permissions, adversaries can modify domain policy settings. Since domain configuration settings control many of the interactions within the Active Directory (AD) environment, there are numerous potential attacks that can stem from this abuse. Examples include modifying GPOs to push a malicious scheduled task to computers throughout the domain environment or modifying domain trusts to include an adversary-controlled domain where they can control access tokens that will subsequently be accepted by victim domain resources. Adversaries can also change configuration settings within the AD environment to implement a rogue domain controller.

**External References:**
- [ADSecurity GPO Persistence 2016](https://adsecurity.org/?p=2716)
- [Wald0 Guide to GPOs](https://wald0.com/?p=179)
- [Harmj0y Abusing GPO Permissions](http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/)
- [Microsoft - Customer Guidance on Recent Nation-State Cyber Attacks](https://msrc-blog.microsoft.com/2020/12/13/customer-guidance-on-recent-nation-state-cyber-attacks/)

**Detection:**
It may be possible to detect domain policy modifications using Windows event logs. Group policy modifications, for example, may be logged under a variety of Windows event IDs for modifying, creating, undeleting, moving, and deleting directory service objects. Monitor for modifications to domain trust settings, such as when a user or application modifies the federation settings on the domain or updates domain authentication from Managed to Federated.

**Kill Chain Phases:**
- **Defense Evasion**
- **Privilege Escalation**

**Platforms:**
- **Windows, Azure AD**

**Permissions Required:**
- **Administrator, User, SYSTEM**

---

### XSL Script Processing

**Description:**
Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages.

Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. The Microsoft common line transformation utility binary (`msxsl.exe`) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. Since `msxsl.exe` is not installed by default, an adversary will likely need to package it with dropped files. Another variation of this technique, dubbed "Squiblytwo," involves using Windows Management Instrumentation (WMI) to invoke JScript or VBScript within an XSL file.

**External References:**
- [Reaqta MSXSL Spearphishing MAR 2018](https://reaqta.com/2018/03/spear-phishing-campaign-leveraging-msxsl/)
- [Twitter SquiblyTwo Detection APR 2018](https://twitter.com/dez_/status/986614411711442944)
- [LOLBAS Wmic](https://lolbas-project.github.io/lolbas/Binaries/Wmic/)
- [Microsoft msxsl.exe](https://www.microsoft.com/download/details.aspx?id=21714)
- [Penetration Testing Lab MSXSL July 2017](https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/)
- [XSL Bypass Mar 2019](https://medium.com/@threathuntingteam/msxsl-exe-and-wmic-exe-a-way-to-proxy-code-execution-8d524f642b75)
- [Microsoft XSLT Script Mar 2017](https://docs.microsoft.com/dotnet/standard/data/xml/xslt-stylesheet-scripting-using-msxsl-script)

**Detection:**
Use process monitoring to monitor the execution and arguments of `msxsl.exe` and `wmic.exe`. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity.

**Kill Chain Phases:**
- **Defense Evasion**

**Platforms:**
- **Windows**

**Permissions Required:**
- **User, Administrator, SYSTEM**

---

### Scan Databases

**Description:**
Adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.

Adversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance, establishing operational resources, and/or initial access.

**External References:**
- [Shodan](https://shodan.io)

**Detection:**
Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.

**Kill Chain Phases:**
- **Reconnaissance**

**Platforms:**
- **PRE**

**Permissions Required:**
- **User, Administrator, SYSTEM**

---

### Hidden Files and Directories

**Description:**
Adversaries may set files and directories to be hidden to evade detection mechanisms. Most operating systems have the concept of a 'hidden' file to prevent normal users from accidentally changing special files on a system. These files don't show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches.

On Linux and Mac, users can mark specific files as hidden simply by putting a "." as the first character in the file or folder name. Files and folders that start with a period, '.', are by default hidden from being viewed in the Finder application and standard command-line utilities like `ls`. On Windows, users can mark specific files as hidden by using the `attrib.exe` binary.

Adversaries can use this to their advantage to hide files and folders anywhere on the system and evade a typical user or system analysis that does not incorporate investigation of hidden files.

**External References:**
- [Sofacy Komplex Trojan](https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/)
- [Antiquated Mac Malware](https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/)
- [WireLurker](https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/reports/Unit_42/unit42-wirelurker.pdf)

**Detection:**
Monitor the file system and shell commands for files being created with a leading "." and the Windows command-line use of `attrib.exe` to add the hidden attribute.

**Kill Chain Phases:**
- **Defense Evasion**

**Platforms:**
- **Windows, macOS, Linux**

**Permissions Required:**
- **User, Administrator, SYSTEM**

---

### Create Snapshot

**Description:**
An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure.

An adversary may create a cloud instance, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.

**External References:**
- [Mandiant M-Trends 2020](https://content.fireeye.com/m-trends/rpt-m-trends-2020)
- [AWS Cloud Trail Backup API](https://docs.aws.amazon.com/aws-backup/latest/devguide/logging-using-cloudtrail.html)
- [Azure - Monitor Logs](https://docs.microsoft.com/en-us/azure/backup/backup-azure-monitoring-use-azuremonitor)
- [Cloud Audit Logs](https://cloud.google.com/logging/docs/audit#admin-activity)
- [GCP - Creating and Starting a VM](https://cloud.google.com/compute/docs/instances/create-start-instance#api_2)

**Detection:**
The creation of a snapshot is a common part of operations within many cloud environments. Events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities such as the creation of one or more snapshots and the restoration of these snapshots by a new user account.

**Kill Chain Phases:**
- **Defense Evasion**

**Platforms:**
- **IaaS**

**Permissions Required:**
- **User, Administrator, SYSTEM**

---

### Determine Physical Locations

**Description:**
Adversaries may gather the victim's physical locations that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.

Adversaries may gather this information in various ways, such as direct elicitation via phishing for information. Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets. Gathering this information may reveal opportunities for other forms of reconnaissance, establishing operational resources, and/or initial access.

**External References:**
- [ThreatPost Broadvoice Leak](https://threatpost.com/broadvoice-leaks-350m-records-voicemail-transcripts/160158/)
- [SEC EDGAR Search](https://www.sec.gov/edgar/search-and-access)

**Detection:**
Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.

**Kill Chain Phases:**
- **Reconnaissance**

**Platforms:**
- **PRE**

**Permissions Required:**
- **User, Administrator, SYSTEM**

---

### Office Test

**Description:**
Adversaries may abuse the Microsoft Office "Office Test" Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.

There exist user and global Registry keys for the Office Test feature:
- `HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf`
- `HKEY_LOCAL_MACHINE\Software\Microsoft\Office test\Special\Perf`

Adversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.

**External References:**
- [Hexacorn Office Test](http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/)
- [Palo Alto Office Test Sofacy](https://researchcenter.paloaltonetworks.com/2016/07/unit42-technical-walkthrough-office-test-persistence-method-used-in-recent-sofacy-attacks/)

**Detection:**
Monitor for the creation of the Office Test Registry key. Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Since v13.52, Autoruns can detect tasks set up using the Office Test Registry key.

**Kill Chain Phases:**
- **Persistence**

**Platforms:**
- **Windows, Office 365**

**Permissions Required:**
- **User, Administrator, SYSTEM**

**System Requirements:**
- **Office 2007, 2010, 2013, and 2016**