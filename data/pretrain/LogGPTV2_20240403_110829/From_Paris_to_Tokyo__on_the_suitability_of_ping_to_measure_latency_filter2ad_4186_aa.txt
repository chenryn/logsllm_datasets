title:From Paris to Tokyo: on the suitability of ping to measure latency
author:Cristel Pelsser and
Luca Cittadini and
Stefano Vissicchio and
Randy Bush
From Paris to Tokyo:
On the Suitability of ping to Measure Latency
Cristel Pelsser
Internet Initiative Japan
Tokyo, Japan
PI:EMAIL
Luca Cittadini
Roma Tre University
Rome, Italy
PI:EMAIL
Stefano Vissicchio
Universite catholique de
Louvain
Louvain-la-Neuve, Belgium
PI:EMAIL
Randy Bush
Internet Initiative Japan
Tokyo, Japan
PI:EMAIL
ABSTRACT
Monitoring Internet performance and measuring user qual-
ity of experience are drawing increased attention from both
research and industry. To match this interest, large-scale
measurement infrastructures have been constructed. We be-
lieve that this eﬀort must be combined with a critical review
and calibrarion of the tools being used to measure perfor-
mance.
In this paper, we analyze the suitability of ping for delay
measurement. By performing several experiments on diﬀer-
ent source and destination pairs, we found cases in which
ping gave very poor estimates of delay and jitter as they
might be experienced by an application.
In those cases,
delay was heavily dependent on the ﬂow identiﬁer, even if
only one IP path was used. For accurate delay measure-
ment we propose to replace the ping tool with an adapta-
tion of paris-traceroute which supports delay and jitter
estimation, without being biased by per-ﬂow network load
balancing.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network
Operations—Network monitoring; C.4 [Performance of
Systems]: Measurement techniques
General Terms
Measurement, Performance
Keywords
Ping; delay; jitter; load-balancing
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
IMC’13, October 23–25, 2013, Barcelona, Spain.
Copyright 2013 ACM 978-1-4503-1953-9/13/10 ...$15.00.
http://dx.doi.org/10.1145/2504730.2504765.
1.
INTRODUCTION
With the Internet carrying more and more critical traﬃc,
network performance becomes ever more important. Hence,
network operators need to constantly measure their net-
works in order to detect and troubleshoot performance degra-
dation which can be experienced by users and applications.
Growing interest in network performance measurement
has translated into the deployment of a number of large-
scale end-to-end measurement infrastructures such as the
RIPE Atlas [13], RIPE TTM [14], BISmark [19] and M-Lab
projects [7], and infrastructures such as the one of Sam-
Knows probes [17]. Those infrastructures make the issues
of how we measure Internet performance even more signiﬁ-
cant. For example, few basic measurement tools, like ping,
traceroute, and paris-traceroute, can be used in perfor-
mance measurements from Atlas probes.
We believe that it is imperative to calibrate these basic
tools to ensure accurate characterization of Internet perfor-
mance. We focus on ping, one of the most commonly used
tools to measure delay and jitter.
By running a few manual experiments with ping, we dis-
covered an unexpectedly high variance in the measurements
even when they were conducted within a single ISP. Hence,
we decided to take a more rigorous approach to understand
whether such a surprising delay variability depended on some
speciﬁc features of the network, on some bias of ping itself,
or both.
In this paper, we assume that a set of ﬁelds, identifying the
ﬂow to which a packet belongs, is typically used by network
devices to perform load-balancing. We rely on Augustin et
al. [1] deﬁnition’s of ﬂow. We discovered that most of the
delay variability that ping reported was due to ping sending
probes belonging to diﬀerent ﬂows. This variance is likely
due to diversity and redundancy of paths at diﬀerent layers.
In contrast, the delay variability was much less for probes
belonging to the same ﬂow. From an application perspec-
tive, this means that delay and jitter can vary from ﬂow to
ﬂow, that is, the network may not perform as expected from
ping results on speciﬁc ﬂows. More importantly, applica-
tions that use several transport channels (e.g., to transport
diﬀerent audio, video, and data streams as in videoconfer-
encing) should not assume that delay is consistent across
channels.
The remainder of the paper is structured as follows. We
cover background information and illustrate our measure-
ment methodology in Section 2. We describe the results of
our experiments in Section 3. We compare to related work
in Section 4. Finally, we discuss the implications of our
ﬁndings in Section 5.
2. MEASURING PER-FLOW DELAY
In this section, we describe some background, introduce
the tokyo-ping tool that we developed and reﬁned based on
the work of paris-traceroute [1], and we detail our measure-
ment methods.
2.1 Background
Tuples of source IP address, source port, destination IP
address, and destination port are used to identify TCP ﬂows.
Load-balancing and redundancy mechanisms, such as Equal
Cost Multi-Path (ECMP) and Link Aggregation Group (LAG),
commonly rely on hashes over these tuples to map an in-
coming packet to an outgoing physical interface. Routers
performing layer-4 hashing often use bytes 12-19 of the IP
header and bytes 1-4 of the IP payload [1]. In the follow-
ing, we refer to a single combination of those twelve bytes
as a ﬂow-id. Note that the ﬂow-id of an ICMP packet is
composed of the type, code, and checksum.
Source port
Length
Destination port
Checksum
Figure 1: UDP header [15]. Fields in bold are part
of the ﬂow-id.
Type
Code
Identiﬁer
Checksum
Sequence Number
Figure 2: ICMP echo message [16]. Echo request
messages have type=8 and code=0. Echo reply mes-
sages have type=0 and code=0.
Type
Code
unused (zero)
Checksum
IP Header + 64 bits of payload
Figure 3:
Type and code ﬁelds are both set to 3.
ICMP port unreachable message [16].
In our experiments, we used both UDP and ICMP probes.
Figs. 1 and 2 show the structure of a UDP and an ICMP
probe, respectively. When replying to an ICMP probe, the
target host simply echoes the ICMP payload back in an echo
reply message, which looks exactly the same as the probe
except the type ﬁeld is set to 8 instead of 0 (Fig. 2). When
replying to a UDP probe, a target host generates an ICMP
port unreachable message (Fig. 3) including the oﬀending IP
header and the ﬁrst eight bytes of the oﬀending IP payload,
which map to the UDP header. Classic ping and traceroute
emit probes that do not keep the ﬂow-id constant, so their
output is aﬀected by the presence of load balancing. Paris-
traceroute [1] is a traceroute-like tool which overcomes this
limitation by keeping the ﬁelds that contribute to the ﬂow-id
(i.e., the ﬁelds in bold in Figs. 1 and 2) set to user-speciﬁed
constants.
2.2 Adapting Paris-Traceroute
To isolate delay behavior of diﬀerent ﬂows, we used a
modiﬁed version of paris-traceroute, which we called tokyo-
ping [5]. The tokyo-ping tool reports delay as the Round-
Trip Time (RTT) between a given source-destination pair
using a user-speciﬁed ﬂow-id. The main diﬀerence from
paris-traceroute is that our tool keeps the ﬂow-id of the re-
turn path constant when probing servers. Tokyo-ping sup-
ports both UDP and ICMP probes, and can be conﬁgured
to emit probes with the same length as ping probes.
To measure RTT, tokyo-ping considers the ﬂow-id of both
the probes and the responses. For ICMP probes, responses
are automatically guaranteed to keep a constant ﬂow-id. In
fact, a response to an ICMP probe contains the same pay-
load as the probe, but has a diﬀerent type value, hence a
diﬀerent checksum (Fig. 2). The return ﬂow-id cannot be
controlled by the probe source, making it impossible to ex-
plore the return paths. However, there is a one-to-one map-
ping between the ﬂow-id of the probe and the ﬂow-id of the
response.
In general, the same does not hold for UDP probes. For
UDP probes, the ﬂow-id of the response depends on the pay-
load of the ICMP error message (see Fig. 3), which is the
IP header followed by the ﬁrst eight bytes of the probe, i.e.,
the UDP header (Fig.1). Note that the UDP payload inﬂu-
ences the UDP checksum, which in turn inﬂuences the ICMP
checksum in the response. The original paris-traceroute only
supports control of the return ﬂow-id when targeting routers.
We extend the technique in [1] to predict the ICMP message
generated at a destination host (rather than an intermedi-
ate router) and then craft the UDP payload of the probe to
keep the UDP checksum constant, yielding a constant return
ﬂow-id.
Further, using UDP probes with tokyo-ping, we were able
to isolate the separate contributions of the forward and re-
turn paths to the RTT variability. This has been done by
comparing the RTT on paths with the same forward path
and on paths with the same return path (see Section 3.4).
Unfortunately, tokyo-ping is unable to control the return
ﬂow-id when targeting some operating systems (e.g., Linux)
that include the full IP payload in ICMP error messages [2].
In this case, crafting the UDP payload makes little sense