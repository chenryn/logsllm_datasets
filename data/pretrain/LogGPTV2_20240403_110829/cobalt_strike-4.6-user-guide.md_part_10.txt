Option x86->x64 x64->x86 Notes
CreateRemoteThread Yes No cross-session
NtQueueApcThread
NtQueueApcThread-s This is the “Early Bird”
injection technique.
Suspended processes
(e.g., post-ex jobs) only.
RtlCreateUserThread Yes Yes Risky on XP-era targets;
uses RWX shellcode for
x86 -> x64 injection.
SetThreadContext Yes Suspended processes
(e.g., post-ex jobs) only.
TheCreateThreadandCreateRemoteThreadoptionshavevariantsthatspawnasuspended
threadwiththeaddressofanotherfunction,updatethesuspendedthreadtoexecutethe
injectedcode,andresumethatthread.Use[function]“module!function+0x##”tospecifythe
startaddresstospoof.Forremoteprocesses,ntdllandkernel32aretheonlyrecommended
modulestopullfrom.Theoptional0x##partisanoffsetaddedtothestartaddress.These
variantsworkx86->x86andx64->x64only.
Theexecuteoptionsyouchoosemustcoveravarietyofcornercases.Thesecornercases
includeselfinjection,injectionintosuspendedtemporaryprocesses,cross-sessionremote
processinjection,x86->x64injection,x64->x86injection,andinjectionwithorwithout
passinganargument.Thec2linttoolwillwarnyouaboutcontextsthatyourexecuteblockdoes
notcover.
Controlling Process Injection
CobaltStrike4.5addedsupporttoallowuserstodefinetheirownprocessinjectiontechnique
insteadofusingthebuilt-intechniques.ThisisdonethroughthePROCESS_INJECT_SPAWN and
PROCESS_INJECT_EXPLICIT hookfunctions.CobaltStrikewillcalloneofthesehookfunctions
whenexecutingpostexploitationcommands.Seethesectiononthehookforatableof
supportedcommands.
Thetwohookswillcovermostofthepostexploitationcommands.However,therearesome
exceptionswhichwillnotusethesehooksandwillcontinuetousethebuilt-intechnique.
Beacon Command Aggressor Script function
&bdllspawn
shell &bshell
execute-assembly &bexecute_assembly
Toimplementyourowninjectiontechnique,youwillberequiredtosupplyaBeaconObjectFile
(BOF)containingyourexecutablecodeforx86and/orx64architecturesandanAggressorScript
UserGuide www.helpsystems.com page:116
MalleablePE,ProcessInjection,andPostExploitation/ControllingProcessInjection
filecontainingthehookfunction.SeetheProcessInjectionHookExamplesintheCommunity
Kit.
Sinceyouareimplementingyourowninjectiontechnique,theprocess-injectsettingsinyour
MalleableC2profilewillnotbeusedunlessyourBOFcallstheBeaconAPIfunction
BeaconInjectProcessorBeaconInjectTemporaryProcess.Thesefunctionsimplementthe
defaultinjectionandmostlikelywillnotbeusedunlessitistoimplementafallbacktothe
defaulttechnique.
Process Injection Spawn
ThePROCESS_INJECT_SPAWNhookisusedtodefinethefork&runprocessinjectiontechnique.
Thefollowingbeaconcommands,aggressorscriptfunctions,andUIinterfaceslistedinthetable
belowwillcallthehookandtheusercanimplementtheirowntechniqueorusethebuilt-in
technique.
Note the following:
l Theelevate,runasadmin,&belevate,&brunasadminand[beacon] -> Access ->
ElevatecommandswillonlyusethePROCESS_INJECT_SPAWNhookwhenthespecified
exploitusesoneofthelistedaggressorscriptfunctionsinthetable,forexample
&bpowerpick.
l Forthenet and&bnetcommandthe‘domain’commandwillnotusethehook.
l The‘(useahash)’notemeansselectacredentialthatreferencesahash.
Job Types
Command Aggressor Script UI
chromedump
dcsync &bdcsync
elevate &belevate [beacon] -> Access -> Elevate
[beacon] -> Access -> Golden Ticket
hashdump &bhashdump [beacon] -> Access -> Dump Hashes
keylogger &bkeylogger
logonpasswords &blogonpasswords [beacon] -> Access -> Run Mimikatz
[beacon] -> Access -> Make Token
(use a hash)
mimikatz &bmimikatz
&bmimikatz_small
net &bnet [beacon] -> Explore -> Net View
UserGuide www.helpsystems.com page:117
MalleablePE,ProcessInjection,andPostExploitation/ControllingProcessInjection
Command Aggressor Script UI
portscan &bportscan [beacon] -> Explore -> Port Scan
powerpick &bpowerpick
printscreen &bprintscreen
pth &bpassthehash
runasadmin &brunasadmin
[target] -> Scan
screenshot &bscreenshot [beacon] -> Explore -> Screenshot
screenwatch &bscreenwatch
ssh &bssh [target] -> Jump -> ssh
ssh-key &bssh_key [target] -> Jump -> ssh-key
[target] -> Jump -> [exploit] (use a
hash)
Process Injection Explicit
ThePROCESS_INJECT_EXPLICIThookisusedtodefinetheexplicitprocessinjectiontechnique.
Thefollowingbeaconcommands,aggressorscriptfunctions,andUIinterfaceslistedinthetable
belowwillcallthehookandtheusercanimplementtheirowntechniqueorusethebuilt-in
technique.
Note the following:
l The[ProcessBrowser]interfaceisaccessedby[beacon] -> Explore -> Process
List.Thereisalsoamultiversionofthisinterfacewhichisaccessedbyselectingmultiple
sessionsandusingthesameUImenu.WhenintheProcessBrowserusethebuttonsto
performadditionalcommandsontheselectedprocess.
l Thechromedump,dcsync,hashdump,keylogger,logonpasswords,mimikatz,net,
portscan,printscreen,pth,screenshot,screenwatch,ssh,andssh-keycommands
alsohaveafork&runversion.Tousetheexplicitversionrequiresthepidandarchitecture
arguments.
l Forthenet and&bnetcommandthe‘domain’commandwillnotusethehook.
Job Types
Command Aggressor Script UI
browserpivot &bbrowserpivot [beacon] -> Explore -> Browser
Pivot
UserGuide www.helpsystems.com page:118
MalleablePE,ProcessInjection,andPostExploitation/ControllingPostExploitation
Command Aggressor Script UI
chromedump
dcsync &bdcsync
dllinject &bdllinject
hashdump &bhashdump
inject &binject [Process Browser] -> Inject
keylogger &bkeylogger [Process Browser] -> Log Keystrokes
logonpasswords &blogonpasswords
mimikatz &bmimikatz
&bmimikatz_small
net &bnet
portscan &bportscan
printscreen &bprintscreen
psinject &bpsinject
pth &bpassthehash
screenshot &bscreenshot [Process Browser] -> Screenshot
(Yes)
screenwatch &bscreenwatch [Process Browser] -> Screenshot
(No)
shinject &bshinject
ssh &bssh
ssh-key &bssh_key
Controlling Post Exploitation
LargerCobaltStrikepost-exploitationfeatures(e.g.,screenshot,keylogger,hashdump,etc.)are
implementedasWindowsDLLs.Toexecutethesefeatures,CobaltStrikespawnsatemporary
process,andinjectsthefeatureintoit.Theprocess-injectblockcontrolstheprocessinjection
step.Thepost-exblockcontrolsthecontentandbehaviorsspecifictoCobaltStrike’spost-
exploitationfeatures.Withthe4.5releasethesepost-exploitationfeaturesnowsupportexplicit
injectionintoanexistingprocesswhenusingthe[pid]and[arch]arguments.
post-ex {
# control the temporary process we spawn to
set spawnto_x86 "%windir%\\syswow64\\rundll32.exe";
UserGuide www.helpsystems.com page:119
MalleablePE,ProcessInjection,andPostExploitation/ControllingPostExploitation
set spawnto_x64 "%windir%\\sysnative\\rundll32.exe";
# change the permissions and content of our post-ex DLLs
set obfuscate "true";
# change our post-ex output named pipe names...
set pipename "evil_####, stuff\\not_##_ev#l";
# pass key function pointers from Beacon to its child jobs
set smartinject "true";
# disable AMSI in powerpick, execute-assembly, and psinject
set amsi_disable "true";
}
Thespawnto_x86andspawnto_x64optionscontrolthedefaulttemporaryprocessBeaconwill
spawnforitspost-exploitationfeatures.Hereareafewtipsforthesevalues:
l AlwaysspecifythefullpathtotheprogramyouwantBeacontospawn
l Environmentvariables(e.g.,%windir%)areOKwithinthesepaths.
l Donotspecify%windir%\system32orc:\windows\system32directly.Alwaysuse
syswow64(x86)andsysnative(x64).Beaconwilladjustthesevaluestosystem32where
it’snecessary.
l Foranx86spawntovalue,youmustspecifyanx86program.Foranx64spawntovalue,
youmustspecifyanx64program.
l Thepathsyouspecify(minustheautomaticsyswow64/sysnativeadjustment)mustexist
frombothanx64(native)andx86(wow64)viewofthefilesystem.
Theobfuscateoptionscramblesthecontentofthepost-exDLLsandsettlesthepost-ex
capabilityintomemoryinamoreOPSEC-safeway.It’sverysimilartotheobfuscateanduserwx
optionsavailableforBeaconviathestageblock.Somelong-runningpost-exDLLswillmaskand
unmasktheirstringtable,asneeded,whenthisoptionisset.
Usepipenametochangethenamedpipenamesused,bypost-exDLLs,tosendoutputbackto
Beacon.Thisoptionacceptsacomma-separatedlistofpipenames.CobaltStrikewillselecta
randompipenamefromthisoptionwhenitsetsupapost-exploitationjob.Each#inthe
pipenameisreplacedwithavalidhexcharacteraswell.
ThesmartinjectoptiondirectsBeacontoembedkeyfunctionpointers,likeGetProcAddressand
LoadLibrary,intoitssame-architecturepost-exDLLs.Thisallowspost-exDLLstobootstrap
themselvesinanewprocesswithoutshellcode-likebehaviorthatisdetectedandmitigatedby
watchingmemoryaccessestothePEBandkernel32.dll.
Thethread_hintoptionallowsmulti-threadedpost-exDLLstospawnthreadswithaspoofed
startaddress.Specifythethreadhintas“module!function+0x##”tospecifythestartaddressto
spoof.Theoptional0x##partisanoffsetaddedtothestartaddress.
Theamsi_disableoptiondirectspowerpick,execute-assembly,andpsinjecttopatchthe
AmsiScanBufferfunctionbeforeloading.NETorPowerShellcode.ThislimitstheAntimalware
ScanInterfacevisibilityintothesecapabilities.
UserGuide www.helpsystems.com page:120
MalleablePE,ProcessInjection,andPostExploitation/UserDefinedReflectiveDLL Loader
SetthekeyloggeroptiontoconfigureCobaltStrike'skeystrokelogger.TheGetAsyncKeyState
option(default)usestheGetAsyncKeyStateAPItoobservekeystrokes.TheSetWindowsHookEx
optionusesSetWindowsHookExtoobservekeystrokes.
User Defined Reflective DLL Loader
CobaltStrike4.4addedsupportforusingcustomizedreflectiveloadersforbeaconpayloads.The
UserDefinedReflectiveLoader(UDRL)KitisthesourcecodefortheUDRLexample.GotoHelp
->ArsenalanddownloadtheUDRLKit.Yourlicencekeyisrequired.
NOTE:
Thereflectiveloader'sexecutablecodeistheextracted.textsectionfromauserprovided
compiledobjectfile.Theextractedexecutablecodemustbelessthan100KB.
Implementation
ThefollowingAggressorscripthooksareprovidedtoallowimplementationofUserDefined
ReflectiveLoaders:
Function Description
BEACON_RDLL_GENERATE Hook used to implement basic Reflective Loader
replacement.
BEACON_RDLL_SIZE This hook is called when preparing beacons and
allows the user to configure more than 5 KB
space for their reflective loader (up to 100KB).
BEACON_RDLL_GENERATE_ Hook used to implement advanced Reflective
LOCAL Loader replacement. Additional arguments
provided include Beacon ID, GetModuleHandleA
address, and GetProcAddress address.
ThefollowingAggressorscriptfunctionsareprovidedtoextracttheReflectiveLoader
executablecode(.textsection)fromacompiledobjectfileandinserttheexecutablecodeinto
thebeaconpayload:
Function Description
extract_reflective_loader Extracts the Reflective Loader executable code
from a byte array containing a compiled object
file.
setup_reflective_loader Inserts the Reflective Loader executable code
into the beacon payload.
ThefollowingAggressorscriptfunctionsareprovidedtomodifythebeaconpayloadusing
informationfromtheMalleableC2profile:
UserGuide www.helpsystems.com page:121
MalleablePE,ProcessInjection,andPostExploitation/UserDefinedReflectiveDLL Loader
Function Description
setup_strings Apply the strings defined in the Malleable C2
profile to the beacon payload.
setup_transformations Apply the transformation rules defined in the
Malleable C2 profile to the beacon payload.
ThefollowingAggressorscriptfunctionisprovidedtoobtaininformationaboutthebeacon
payloadtoassistwithcustommodificationstothepayload:
Function Description
pedump Loads a map of information about the beacon
payload. This map information is similar to the
output of the "peclone" command with the
"dump" argument.
ThefollowingAggressorscriptfunctionsareprovidedtoperformcustommodificationstothe
beaconpayload:
NOTE:
Dependingonthecustommodificationsmade(obfuscation,mask,etc...),thereflective
loadermayhavetoreversethosemodificationswhenloading.
Function Description
pe_insert_rich_header Insert rich header data into Beacon DLL
Content. If there is existing rich header
information, it will be replaced.
pe_mask Mask data in the Beacon DLL Content based on
position and length.
pe_mask_section Mask data in the Beacon DLL Content based on
position and length.
pe_mask_string Mask a string in the Beacon DLL Content based
on position.
pe_patch_code Patch code in the Beacon DLL Content based on
find/replace in '.text' section'.
pe_remove_rich_header Remove the rich header from Beacon DLL
Content.
pe_set_compile_time_with_long Set the compile time in the Beacon DLL Content.
pe_set_compile_time_with_string Set the compile time in the Beacon DLL Content.
pe_set_export_name Set the export name in the Beacon DLL Content.
UserGuide www.helpsystems.com page:122
MalleablePE,ProcessInjection,andPostExploitation/UserDefinedReflectiveDLL Loader
Function Description
pe_set_long Places a long value at a specified location.
pe_set_short Places a short value at a specified location.
pe_set_string Places a string value at a specified location.
pe_set_stringz Places a string value at a specified location and
adds a zero terminator.
pe_set_value_at Sets a long value based on the location resolved
by a name from the PE Map (see pedump).
pe_stomp Set a string to null characters. Start at a
specified location and sets all characters to null
until a null string terminator is reached.
pe_update_checksum Update the checksum in the Beacon DLL
Content.
Using User Defined Reflective DLL Loaders
Create/Compile your Reflective Loaders
TheUserDefinedReflectiveLoader(UDRL)KitisthesourcecodefortheUDRLexample.Goto
Help->ArsenalanddownloadtheUDRLKit(yourlicensekeyisrequired).
ThefollowingistheCobaltStrikeprocessforpreppingbeacons:
l TheBEACON_RDLL_SIZEhookiscalledwhenpreparingbeacons.
o Thisgivestheuserachancetoindicatethatmorethan5KBspacewillberequired
fortheirreflectiveloader.
o Userscanusebeaconswithspacereservedforareflectiveloaderupto100KB.
o Whenoverridingavailablereflectiveloaderspaceinthebeacons,thebeaconswill
bemuchlarger.Infact,theywillbetoolargeforstandardartifactsprovidedby
CobaltStrike.Userswillneedtoupdatetheirprocesstousecustomizedartifacts
withlargerreservedspaceforthelargerbeacons.
l Beaconsarepatchedwithrequiredsettingsaspayloaddata.
o ThefollowingarepatchedintoBeaconsforUDRL:
n ListenerSettings
n SomeMalleableC2Settings.
Usingsleepmaskanduserwxrequiresareflectiveloadercapableofcreating
memoryforthe.textexecutablecodewithRWXpermissions,orthebeacon
willcrashwhenmasking/unmaskingwriteprotectedmemory.Thedefault
reflectiveloadersnormallyhandlethis.
UserGuide www.helpsystems.com page:123
BeaconObjectFiles/WhataretheadvantagesofBOFs?
Usingsleepmaskandobfuscaterequiresareflectiveloadercapableof
removingthe1st4Kblock(Header)oftheDLLastheheaderwillnotbe
masked.
o ThefollowingisNOTpatchedintoBeaconsforUDRL:
n PEModifications
l BEACON_RDLL_GENERATEisnormallycalled.BEACON_RDLL_GENERATE_LOCALhook
iscalledwhen:
o Thefollowingdetermineswhichiscalled:
n MalleableC2has“.stage.smartinject”seton.
o Useextract_reflective_loaderfunctiontoextractthereflectiveloader.
o Usesetup_reflective_loaderfunctiontopatchtheextractedreflectiveloaderinto
thereflectiveloaderspaceintheBeacons.
n Iftheloaderistoobigfortheselectedbeacon,youwillseeamessagelike
this:
o ReflectiveDLLContentlength(123456)exceedsavailablespace
(5120).
n Use“BEACON_RDLL_SIZE”touseabeaconswithlargerReflectiveLoaders.
o Thereareadditionalfunctionsavailabletohelpinspectandmakemodificationsto
theBeaconsbasedontheReflectiveLoaderscapabilities.Forexample:
n Provideobfuscation
n Patchinaddressesforsmartinjectsupport
l Beaconsarepatchedintoartifacts.
o Beaconsthathavebeenbuiltwiththelargerreflectiveloaderspace(per“BEACON_
RDLL_SIZE”above)willneedtobeloadedintocustomizedartifactswithspaceto
holdlargebeacons.
o GotoHelp->ArsenalfromalicensedCobaltStriketodownloadtheArtifactKit.
o Seethe“stagesize”referencesintheseartifactkitfilesprovidedbyCobaltStrike:
n See“stagesize”referencesinartifactbuildscript.
n See“stagesize”referencesin‘script.example’
Beacon Object Files
ABeaconObjectFile(BOF)isacompiledCprogram,writtentoaconventionthatallowsitto
executewithinaBeaconprocessanduseinternalBeaconAPIs.BOFsareawaytorapidly
extendtheBeaconagentwithnewpost-exploitationfeatures.
What are the advantages of BOFs?
Oneofthekeyrolesofancommand&controlplatformistoprovidewaystouseexternalpost-
exploitationfunctionality.CobaltStrikealreadyhastoolstousePowerShell,.NET,andReflective
DLLs.ThesetoolsrelyonanOPSECexpensivefork&runpatternthatinvolvesaprocesscreate
andinjectionforeachpost-exploitationaction.BOFshavealighterfootprint.Theyruninsideof
aBeaconprocessandarecleanedupafterthecapabilityisdone.
UserGuide www.helpsystems.com page:124
BeaconObjectFiles/HowdoBOFswork?
BOFsarealsoverysmall.AUACbypassprivilegeescalationReflectiveDLLimplementationmay
weighinat100KB+.Thesameexploit,builtasaBOF,is
#include "beacon.h"
void go(char * args, int alen) {
BeaconPrintf(CALLBACK_OUTPUT, "Hello World: %s", args);
}
Downloadbeacon.h.
TocompilethiswithVisualStudio:
UserGuide www.helpsystems.com page:125
BeaconObjectFiles/DynamicFunctionResolution
cl.exe/c/GS-hello.c/Fohello.o
Tocompilethiswithx86MinGW:
i686-w64-mingw32-gcc-chello.c-ohello.o
Tocompilethiswithx64MinGW:
x86_64-w64-mingw32-gcc-chello.c-ohello.o
Theabovecommandswillproduceahello.ofile.Useinline-executeinBeacontoruntheBOF.
beacon>inline-execute/path/to/hello.othesearearguments