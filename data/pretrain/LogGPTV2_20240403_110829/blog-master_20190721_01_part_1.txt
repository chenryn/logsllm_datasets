## postgresql 控制文件 pg_control 原子写,crc   
### 作者      
digoal      
### 日期      
2019-07-21      
### 标签      
PostgreSQL , pg_control , 控制文件 , crc      
----      
## 背景      
pg_control，记录了数据库奔溃时，应该从检查点的哪个wal lsn开始恢复，但是修改控制文件并不写redo，怎么保证数据的正确性呢？  
原子写！  
## 说明  
src/include/catalog/pg_control.h  
控制文件的内容定义如下，不超过512字节。  
```  
/*  
 * Contents of pg_control.  
 */  
typedef struct ControlFileData  
{  
        /*  
         * Unique system identifier --- to ensure we match up xlog files with the  
         * installation that produced them.  
         */  
        uint64          system_identifier;  
        /*  
         * Version identifier information.  Keep these fields at the same offset,  
         * especially pg_control_version; they won't be real useful if they move  
         * around.  (For historical reasons they must be 8 bytes into the file  
         * rather than immediately at the front.)  
         *  
         * pg_control_version identifies the format of pg_control itself.  
         * catalog_version_no identifies the format of the system catalogs.  
         *  
         * There are additional version identifiers in individual files; for  
         * example, WAL logs contain per-page magic numbers that can serve as  
         * version cues for the WAL log.  
         */  
        uint32          pg_control_version; /* PG_CONTROL_VERSION */  
        uint32          catalog_version_no; /* see catversion.h */  
        /*  
         * System status data  
         */  
        DBState         state;                  /* see enum above */  
        pg_time_t       time;                   /* time stamp of last pg_control update */  
        XLogRecPtr      checkPoint;             /* last check point record ptr */  
        CheckPoint      checkPointCopy; /* copy of last check point record */  
        XLogRecPtr      unloggedLSN;    /* current fake LSN value, for unlogged rels */  
        /*  
         * These two values determine the minimum point we must recover up to  
         * before starting up:  
         *  
         * minRecoveryPoint is updated to the latest replayed LSN whenever we  
         * flush a data change during archive recovery. That guards against  
         * starting archive recovery, aborting it, and restarting with an earlier  
         * stop location. If we've already flushed data changes from WAL record X  
         * to disk, we mustn't start up until we reach X again. Zero when not  
         * doing archive recovery.  
         *  
         * backupStartPoint is the redo pointer of the backup start checkpoint, if  
         * we are recovering from an online backup and haven't reached the end of  
         * backup yet. It is reset to zero when the end of backup is reached, and  
         * we mustn't start up before that. A boolean would suffice otherwise, but  
         * we use the redo pointer as a cross-check when we see an end-of-backup  
         * record, to make sure the end-of-backup record corresponds the base  
         * backup we're recovering from.  
         *  
         * backupEndPoint is the backup end location, if we are recovering from an  
         * online backup which was taken from the standby and haven't reached the  
         * end of backup yet. It is initialized to the minimum recovery point in  
         * pg_control which was backed up last. It is reset to zero when the end  
         * of backup is reached, and we mustn't start up before that.  
         *  
         * If backupEndRequired is true, we know for sure that we're restoring  
         * from a backup, and must see a backup-end record before we can safely  
         * start up. If it's false, but backupStartPoint is set, a backup_label  
         * file was found at startup but it may have been a leftover from a stray  
         * pg_start_backup() call, not accompanied by pg_stop_backup().  
         */  
        XLogRecPtr      minRecoveryPoint;  
        TimeLineID      minRecoveryPointTLI;  
        XLogRecPtr      backupStartPoint;  
        XLogRecPtr      backupEndPoint;  
        bool            backupEndRequired;  
        /*  
         * Parameter settings that determine if the WAL can be used for archival  
         * or hot standby.  
         */  
        int                     wal_level;  
        bool            wal_log_hints;  
        int                     MaxConnections;  
        int                     max_worker_processes;  
        int                     max_wal_senders;  
        int                     max_prepared_xacts;  
        int                     max_locks_per_xact;  
        bool            track_commit_timestamp;  
        /*  
         * This data is used to check for hardware-architecture compatibility of  
         * the database and the backend executable.  We need not check endianness  
         * explicitly, since the pg_control version will surely look wrong to a  
         * machine of different endianness, but we do need to worry about MAXALIGN  
         * and floating-point format.  (Note: storage layout nominally also  
         * depends on SHORTALIGN and INTALIGN, but in practice these are the same  
         * on all architectures of interest.)  
         *  
         * Testing just one double value is not a very bulletproof test for  
         * floating-point compatibility, but it will catch most cases.  
         */  
        uint32          maxAlign;               /* alignment requirement for tuples */  
        double          floatFormat;    /* constant 1234567.0 */  
#define FLOATFORMAT_VALUE       1234567.0  
        /*  
         * This data is used to make sure that configuration of this database is  
         * compatible with the backend executable.  
         */  
        uint32          blcksz;                 /* data block size for this DB */  
        uint32          relseg_size;    /* blocks per segment of large relation */  
        uint32          xlog_blcksz;    /* block size within WAL files */  
        uint32          xlog_seg_size;  /* size of each WAL segment */  
        uint32          nameDataLen;    /* catalog name field width */  
        uint32          indexMaxKeys;   /* max number of columns in an index */  
        uint32          toast_max_chunk_size;   /* chunk size in TOAST tables */  
        uint32          loblksize;              /* chunk size in pg_largeobject */  
        /* flags indicating pass-by-value status of various types */  
        bool            float4ByVal;    /* float4 pass-by-value? */  
        bool            float8ByVal;    /* float8, int8, etc pass-by-value? */  
        /* Are data pages protected by checksums? Zero if no checksum version */  
        uint32          data_checksum_version;  
        /*  
         * Random nonce, used in authentication requests that need to proceed  
         * based on values that are cluster-unique, like a SASL exchange that  
         * failed at an early stage.  
         */  
        char            mock_authentication_nonce[MOCK_AUTH_NONCE_LEN];  
        /* CRC of all above ... MUST BE LAST! */  
        pg_crc32c       crc;  
} ControlFileData;  
```  
控制文件的内容大小不超过一个扇区，确保可以原子写。  
```  
/*  
 * Maximum safe value of sizeof(ControlFileData).  For reliability's sake,  
 * it's critical that pg_control updates be atomic writes.  That generally  
 * means the active data can't be more than one disk sector, which is 512  
 * bytes on common hardware.  Be very careful about raising this limit.  
 */  
#define PG_CONTROL_MAX_SAFE_SIZE        512  
```  
## 写控制文件  
src/common/controldata_utils.c  
```  
/*  
 * update_controlfile()  
 *  
 * Update controlfile values with the contents given by caller.  The  
 * contents to write are included in "ControlFile". "do_sync" can be  
 * optionally used to flush the updated control file.  Note that it is up  
 * to the caller to properly lock ControlFileLock when calling this  
 * routine in the backend.  
 */  
void  
update_controlfile(const char *DataDir,  
                                   ControlFileData *ControlFile, bool do_sync)  
{  
        int                     fd;  
        char            buffer[PG_CONTROL_FILE_SIZE];  
        char            ControlFilePath[MAXPGPATH];  
        /*  
         * Apply the same static assertions as in backend's WriteControlFile().  
         */  
        StaticAssertStmt(sizeof(ControlFileData) crc);  
        COMP_CRC32C(ControlFile->crc,  
                                (char *) ControlFile,  
                                offsetof(ControlFileData, crc));  
        FIN_CRC32C(ControlFile->crc);  
        /*  
         * Write out PG_CONTROL_FILE_SIZE bytes into pg_control by zero-padding  
         * the excess over sizeof(ControlFileData), to avoid premature EOF related  
         * errors when reading it.  
         */  
        memset(buffer, 0, PG_CONTROL_FILE_SIZE);  
        memcpy(buffer, ControlFile, sizeof(ControlFileData));  
        snprintf(ControlFilePath, sizeof(ControlFilePath), "%s/%s", DataDir, XLOG_CONTROL_FILE);  
#ifndef FRONTEND  
        /*  
         * All errors issue a PANIC, so no need to use OpenTransientFile() and to  
         * worry about file descriptor leaks.  
         */  
        if ((fd = BasicOpenFile(ControlFilePath, O_RDWR | PG_BINARY)) < 0)  
                ereport(PANIC,  
                                (errcode_for_file_access(),  
                                 errmsg("could not open file \"%s\": %m",  
                                                ControlFilePath)));  
#else  
        if ((fd = open(ControlFilePath, O_WRONLY | PG_BINARY,  
                                   pg_file_create_mode)) == -1)  
        {  
                pg_log_fatal("could not open file \"%s\": %m", ControlFilePath);  
                exit(EXIT_FAILURE);  
        }  
#endif  
        errno = 0;  
#ifndef FRONTEND  
        pgstat_report_wait_start(WAIT_EVENT_CONTROL_FILE_WRITE_UPDATE);  
#endif  
        if (write(fd, buffer, PG_CONTROL_FILE_SIZE) != PG_CONTROL_FILE_SIZE)  
        {  
                /* if write didn't set errno, assume problem is no disk space */  
                if (errno == 0)  
                        errno = ENOSPC;  
#ifndef FRONTEND  
                ereport(PANIC,  
                                (errcode_for_file_access(),  
                                 errmsg("could not write file \"%s\": %m",  
                                                ControlFilePath)));  
#else  
                pg_log_fatal("could not write file \"%s\": %m", ControlFilePath);  
                exit(EXIT_FAILURE);  
#endif  
        }  
#ifndef FRONTEND  
        pgstat_report_wait_end();  
#endif  
        if (do_sync)  
        {  
#ifndef FRONTEND  
                pgstat_report_wait_start(WAIT_EVENT_CONTROL_FILE_SYNC_UPDATE);  
                if (pg_fsync(fd) != 0)  
                        ereport(PANIC,  
                                        (errcode_for_file_access(),  
                                         errmsg("could not fsync file \"%s\": %m",  
                                                        ControlFilePath)));  
                pgstat_report_wait_end();  
#else  
                if (fsync(fd) != 0)  
                {  
                        pg_log_fatal("could not fsync file \"%s\": %m", ControlFilePath);  
                        exit(EXIT_FAILURE);  
                }  
#endif  
        }  
        if (close(fd) < 0)  
        {  
#ifndef FRONTEND  
                ereport(PANIC,  
                                (errcode_for_file_access(),  
                                 errmsg("could not close file \"%s\": %m",  
                                                ControlFilePath)));  
#else  
                pg_log_fatal("could not close file \"%s\": %m", ControlFilePath);  
                exit(EXIT_FAILURE);  
#endif  
        }  
}  
```  
## 读控制文件内容  
```  
pg_controldata -D $PGDATA  
pg_control version number:            1201  
Catalog version number:               201906161  
Database system identifier:           6711681255296473955  
Database cluster state:               in production  
pg_control last modified:             Sat 20 Jul 2019 10:32:17 AM CST  
Latest checkpoint location:           1/E96F1A50  
Latest checkpoint's REDO location:    1/E96F1A18  
Latest checkpoint's REDO WAL file:    0000000100000001000000E9  
Latest checkpoint's TimeLineID:       1  
Latest checkpoint's PrevTimeLineID:   1  
Latest checkpoint's full_page_writes: on  
Latest checkpoint's NextXID:          0:813  
Latest checkpoint's NextOID:          25544  
Latest checkpoint's NextMultiXactId:  1  
Latest checkpoint's NextMultiOffset:  0  
Latest checkpoint's oldestXID:        479  
Latest checkpoint's oldestXID's DB:   1  
Latest checkpoint's oldestActiveXID:  813  
Latest checkpoint's oldestMultiXid:   1  
Latest checkpoint's oldestMulti's DB: 1  
Latest checkpoint's oldestCommitTsXid:0  
Latest checkpoint's newestCommitTsXid:0  
Time of latest checkpoint:            Sat 20 Jul 2019 10:32:15 AM CST  
Fake LSN counter for unlogged rels:   0/3E8  
Minimum recovery ending location:     0/0  
Min recovery ending loc's timeline:   0  
Backup start location:                0/0  
Backup end location:                  0/0  
End-of-backup record required:        no  
wal_level setting:                    logical  
wal_log_hints setting:                off  
max_connections setting:              1000  
max_worker_processes setting:         128  
max_wal_senders setting:              10  
max_prepared_xacts setting:           2000  
max_locks_per_xact setting:           64  
track_commit_timestamp setting:       off  
Maximum data alignment:               8  
Database block size:                  8192  
Blocks per segment of large relation: 131072  
WAL block size:                       8192  
Bytes per WAL segment:                16777216  