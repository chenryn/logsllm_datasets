2.6.6
Total
16,770,000+
missions. Second, the web browsers have to provide a user-friendly
interface to revoke the granted permissions.
The speciﬁcation also mentions other privacy problems in the non-
normative section: (1) users may inadvertently grant permissions to
web sites, and (2) already-permitted web sites can silently change
their content regardless of a user’s intention.
However, the speciﬁcation mentions no countermeasures against
It leaves to implementers the responsibility of
these problems.
solving the problems.
3. CASE STUDIES
In this section, we conduct case studies on the HTML5 Geolo-
cation API to identify how web browsers and web sites implement
and utilize it. The case studies are helpful to explore the real-world
privacy problems of the Geolocation API.
3.1 Case Study of Web Browsers
3.1.1 Android
We collect and analyze 60 free web browsers for Android on
Google Play Store in August 2014, which had been installed more
than 10,000 times. Except some major web browsers (e.g., Chrome
and Firefox), most web browsers for Android rely on WebView [2]
which allows Android Apps to embed a customized web browser.
We use a Galaxy S III (Android 4.3) and a Galaxy Nexus (Android
4.2) when testing the web browsers.
We ﬁrst investigate how the 60 Android web browsers support
the Geolocation API (Table 1). We detect 39 web browsers that
support the Geolocation API. They consist of 18 web browsers that
support both permanent and temporary (one time) permissions, 7
web browsers that only support permanent permissions, and 14 web
browsers that do not ask for user permissions.
More than 16 million Android users have installed the 14 vulner-
able web browsers that do not ask for permission (Table 2). Their
actual number is certainly larger than 16 million because the number
(a) Stock Android browser (4.2).
(b) Android (Firefox 27).
(c) Android (Chrome 32).
(d) iOS 7.
Figure 2: Dialogs for requesting permissions to access geolocation.
of downloads shown in Google Play Store is a lower bound (Google
does not reveal the exact number of downloads.) For example,
“5,000,000+ downloads” means that the actual number of downloads
is between ﬁve million and 10 million. Furthermore, Android users
may install the vulnerable web browsers via alternative markets or
by using Android application package (APK) ﬁles. If users visit
web sites with the vulnerable browsers, the sites can silently collect
the users’ geolocation by exploiting the browsers. Therefore, we
suggest that the developers of the vulnerable web browsers need to
ﬁx the problem (details: §3.2).
Figures 2a, 2b, and 2c show permission dialogs of the major web
browsers for Android when users attempt to access a web page
that uses the Geolocation API [30]. All of the web browsers give
permissions not to web pages but to domains. Furthermore, the stock
Android browser (Figure 2a) and Firefox for Android (Figure 2b)
support temporary permissions for accessing geolocation whereas
Chrome for Android does not (Figure 2c).
Lastly, we investigate the interfaces to determine which of them
allow users to revoke the granted permissions stored in the Android
web browsers. Among the 25 web browsers that support the Geolo-
cation API and ask for user permission, only six Android Browser,
Chrome Browser, Firefox, iLunascape 2 - Web Browser, Sleipnir
Mobile - Web Browser, and Skyﬁre Web Browser 5.0 allow users to
revoke the granted permissions of each domain. With the remaining
19 web browsers, users must delete all granted permissions even if
they only want to revoke the permission of a single domain.
iOS
3.1.2
We collect and analyze the top 30 free web browsers for iOS on
App Store (e.g., Chrome and Mercury Browser) as of September
2013, and identify that most of the web browsers for iOS use the
same mechanism to manage the Geolocation API and permissions.
The reason is that Apple forces developers to use UIWebView [3]
when rendering web pages to harden security. Exceptions are cloud-
based web browsers (e.g., Opera Mini and Pufﬁn) that have no
JavaScript engine, but they do not support the Geolocation API. We
use iPad (third generation with iOS 7) when testing the browsers.
We conﬁrm that the web browsers for iOS only have the perma-
nent permission model for the Geolocation API. Figure 2d shows
an example of their permission dialog which requests a permanent
geolocation permission for a domain.
Lastly, we identify that users should use the uniﬁed interface
of iOS to reset all location and privacy permission settings when
they want to revoke the geolocation permissions granted to web
sites. After resetting, all apps and web sites must obtain permissions
again to access both geolocation and other private information (e.g.,
calendars, reminders, and photos). Undoubtedly, this is highly
.method public
onGeolocationPermissionsShowPrompt(
Ljava/lang/String;
Landroid/webkit/
GeolocationPermissions$Callback;)V
.locals 2
.parameter
.parameter
.prologue
.line 225
const/4 v0, 0x1
const/4 v1, 0x0
«
invoke-interface {p2, p1, v0, v1},
Landroid/webkit/
GeolocationPermissions$Callback;
->invoke(Ljava/lang/String;ZZ)V
.line 227
return-void
.end method
Figure 3: Decompiled onGeolocationPermissionsShow-
Prompt() of the Maxthon Browser for Android.
inconvenient for users.
3.2 Details of Vulnerable Web Browsers
We analyze the vulnerable Android web browsers to know why
they do not prompt geolocation permission dialogs and ﬁnally detect
that this ﬂaw is due to mis-implemented onGeolocationPermi-
ssionsShowPrompt() methods. The onGeolocationPer-
missionsShowPrompt() method of the WebChromeClient
class is essential to support the Geolocation API in WebView-based
browsers because they call the method when an unseen web site
attempts to use the Geolocation API [1]. This method should in-
voke a callback method to set permissions with three parameters:
(1) a domain name, (2) whether a user allows (true) or blocks
(false) the domain, and (3) whether the granted permission is
permanent (true) or temporary (false). However, if the method
always invokes the callback method with true as the second ar-
gument, web browsers always allow any web site to access the
geolocation without user permissions. Accordingly, we expect that
the onGeolocationPermissionsShowPrompt() method
of the vulnerable browsers always invokes the callback method with
true.
Figure 3 shows the decompiled onGeolocationPermissi-
onsShowPrompt() method of the Maxthon Browser for Android
with apktool (the results of other browsers are similar.) As we
expect, the method has no instructions to pop up a permission dia-
log and invokes a callback method while statically assigning true
(0x1) to the second argument v0 («, p2 is the 0th argument repre-
senting the callback method.)
Consequently, we believe that developers need to carefully imple-
ment onGeolocationPermissionsShowPrompt() meth-
ods and Google has to provide a built-in permission dialog to elimi-
nate such a vulnerability.
We reported the security problem to the browser developers.
Some of them replied that they would patch it in a future release.
3.3 Case Study of Web Sites
We collect 1196 web pages that use the Geolocation API; to do
this we (1) inspect web sites listed on Alexa, (2) use the Google
Table 3: Categories of web pages using the Geolocation API.
Category
Near me
Local information
Weather
Geographic information
Social networking
Trafﬁc information
News
Others
Number %
667
288
55
53
42
32
13
46
55.77
24.08
4.60
4.43
3.51
2.68
1.09
3.85
Table 4: Location sensitivity of web pages using the Geolocation
API.
Sensitivity
Pinpoint
City
State
Country
Unchanged
Number %
593
426
22
18
137
49.58
35.62
1.84
1.51
11.45
search engine with keywords, such as “near me” and “around me”,
and (3) use an HTML code search engine [10] with keywords, such
as “getCurrentPosition” and “watchPosition”, between August 2013
and September 2013, then inspect them. Each of the three sources
contributes 246, 140, and 810 web pages, respectively. When we
visit web sites, we use user-agent strings of Android or iPhone web
browsers and recursively retrieve child web pages. We manually ver-
ify that most of the collected web pages provide “near me” services
to inform point of interest (POI) locations (e.g., stores, buildings,
and the sights) or local information (e.g., local radio and TV chan-
nels)1. Table 3 summarizes the results. We also ﬁnd other web pages,
including those for local weather services, geographic information,
location-based online social networks, local trafﬁc information, and
local news.
We aim to inspect the location sensitivity of the collected web
pages to decide whether they are overprivileged. We manually
perform the following procedure: (1) preparing a number of GPS
coordinates around famous cities, (2) visiting the web pages while
using various geolocations based on the GPS coordinates, and (3)
verifying whether the web pages change according to the given
geolocation. We treat street-level changes are equivalent to pinpoint-
level changes because both levels are sufﬁciently ﬁne grain. We
thereby compare them for verifying pinpoint-, city-, and state-level
geolocation changes, respectively. We also use locations around
famous cities of other countries, such as Calgary (Canada), Paris
(France), Seoul (Korea), and Sydney (Australia), to analyze whether
some web pages work for a speciﬁc country. When visiting the web
pages, we use Developer Tools (Chrome) or User Agent Switcher
and Geolocator extensions (Firefox) to change the user agent strings
and geolocation of web browsers.
Our inspection of the location sensitivity of the collected web
pages reveals that half of them do not need to use exact geolocation
(Table 4). Except for 49.6% of the web pages that demand pinpoint
geolocation, other web pages provide city-, state-, or country-level
information (35.6%, 1.8%, and 1.5%, respectively). For example,
Groupon’s web page for nearby deals provides city-level informa-
tion; it surely does not need to obtain exact geolocation. Interest-
ingly, the content of 137 web pages (11.5%) does not change even
when we alter the geolocation drastically. We conﬁrm that they
unnecessarily demand geolocation by manually investigating them.
1Five graduate students participated in manual inspection. Decisions
were made by majority voting.
(a) At a latitude of 40.71365
and a longitude of -74.00971.
(b) At a latitude of 40.71500
and a longitude of -74.01000.
Figure 4: Mobile web pages of Walmart to ﬁnd the nearest stores
from two places in New York.
3.4 Considerations on “Near Me” Services
Even though the “near me” services include notable LBSs that use
exact geolocation, we expect that many of these services can provide
the same functionalities without relying on such exact geolocation.
As an example, we consider a “near me” service web page of Wal-
mart to ﬁnd the nearest stores as an example (http://mobile.
walmart.com/m/phoenix#location/locate). When we
visit the web page with two slightly different GPS coordinates, lat-
itudes and longitudes are (40.71365, -74.00971) and (40.71500,
-74.01000). Walmart redirects us to two slightly different web pages
(Figures 4a and 4b). Therefore, the “near me” service web page
demands exact geolocation. The URLs of the ﬁnal web pages are
http://mobile.walmart.com/m/phoenix#location/
list/40.713/-74.009 and http://mobile.walmart.
com/m/phoenix#location/list/40.715/-74.010, re-
spectively, so Walmart can know the GPS coordinates of visitors
from GET request parameters.
However, Walmart can use the city-level geolocation for pro-
viding the same service to mitigate privacy threats while reducing
computational overhead. They can provide this service by (1) de-
livering a list of GPS-coordinates of its stores in New York to web
browsers and (2) allowing the web browsers to execute a JavaScript
code to calculate the distances between the stores and the user’s
current geolocation. Walmart does not need to compute and sort the
distances, so it can reduce computational overhead especially when
the number of concurrent users is large. Although each browser
needs to perform some computations instead of Walmart, it can
protect exact geolocation from Walmart. Consequently, we believe
that this approach is good for both web sites and their users.
4. THREAT MODEL AND ASSUMPTIONS
In this section, we explain the threat model and assumptions of
this work before introducing our scheme for mitigating the privacy
threats of the HTML5 Geolocation API.
First, we assume that our attackers are honest-but-curious LBS
providers, who use the Geolocation API in a legitimate but overpriv-
ileged way. They attempt to obtain precise geolocation of users even
when their LBSs demand neither precise nor timely geolocation.
Figure 5: Overview of the proposed scheme.
Therefore, we focus on how to restrict the privilege of web sites in a
ﬁne-grained way.
Second, we assume that the attackers try to implicitly access
the geolocation without user interaction. In the case studies, we
discover some web sites that explicitly demand user interaction