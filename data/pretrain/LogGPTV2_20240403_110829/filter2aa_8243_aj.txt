34     09     Write
35     AF     Push 0x2F
36     10     Jump
37     42     Load 0x02
38     42     Load 0x02
39     80     Push 0x00
3A     A5     Push 0x25
3B     14     CJE
3C     42     Load 0x02
3D     21     Swap 0x01
3E     80     Push 0x00
3F     A0     Push 0x20
40     14     CJE
41     80     Push 0x00
42     21     Swap 0x01
43     44     Load 0x04
44     9B     Push 0x1B
45     14     CJE
46     20     Pop
47     82     Push 0x02
48     42     Load 0x02
49     02     Divide
4A     82     Push 0x02
4B     45     Load 0x05
4C     02     Divide
4D     21     Swap 0x01
4E     22     Swap 0x02
4F     00     Add
50     82     Push 0x02
51     21     Swap 0x01
52     02     Divide
53     21     Swap 0x01
54     20     Pop
55     42     Load 0x02
56     42     Load 0x02
57     A4     Push 0x24
58     80     Push 0x00
59     01     Sub
5A     11     Call
5B     82     Push 0x02
5C     03     Mul
5D     00     Add
5E     22     Swap 0x02
5F     20     Pop
60     20     Pop
61     23     Swap 0x03
62     20     Pop
63     21     Swap 0x01
64     20     Pop
65     12     Ret
```
החלק הראשון בסך הכל
מכין את המחסנית להרצה, ואפשר לדלג עליו לעת עתה.
כך נראה החלק השני,
אחרי הוספת הערות:
```
label4:
26      8B      Push 0x0B
27      18      JSE ; to label1 - jumps only when one value is left on the stack
28      08      Read
29      8C      Push 0x0C
2A      11      Call              ; to label2
2B      41      Load 0x01
2C      8A      Push 0x0A
2D      80      Push 0x00
2E      01      Sub
2F      14      CJE               ; to label4
30      B0      Push 0x30
31      81      Push 0x01
32      10      Jump              ; to label5
label1:
33      B1      Push 0x31
label5:
34      09      Write
35      AF      Push 0x2F
36      10      Jump              ; to label6
label2:
37      42      Load 0x02         ; Take top of payload
38      42      Load 0x02         ; Take input
39      80      Push 0x00
3A      A5      Push 0x25         ; Address of label3
3B      14      CJE ; to label3  ; Jump to label3 if input == 0
3C      42      Load 0x02         ; Take input
3D      21      Swap 0x01         ; Take top of payload
3E      80      Push 0x00         ;
3F      A0      Push 0x20         ; Address of label3
40      14      CJE ; to label3  ; Jump to label3 if top of payload == 0
41      80      Push 0x00
42      21      Swap 0x01         ; Take input
43      44      Load 0x04         ; Take top of payload
44      9B      Push 0x1B         ; Address of label3
45      14      CJE ; to label3  ; Jump to label3 if input == top of payload
46      20      Pop               ; Pop 0
47      82      Push 0x02        
48      42      Load 0x02         ; Take input
49      02      Div               ; input / 2
4A      82      Push 0x02        
4B      45      Load 0x05         ; Take top of payload
4C      02      Div               ; Top of payload  / 2
4D      21      Swap 0x01         ; Take div(top of payload / 2)
4E      22      Swap 0x02         ; Take mod(input / 2)
4F      00      Add               ; div(top of payload / 2) + mod(input / 2)
50      82      Push 0x02        
51      21      Swap 0x01         ; Take div(top of payload / 2) + mod(input / 2)
52      02      Div               ; ( div(top of payload / 2) + mod(input / 2) ) / 2
53      21      Swap 0x01         ; Take div( div(top of payload / 2) + mod(input / 2) ) / 2
54      20      Pop               ; Ignore div( div(top of payload / 2) + mod(input / 2) ) / 2, take mod( div(top of payload / 2) + mod(input / 2) ) / 2
55      42      Load 0x02         ; Take div (input / 2)
56      42      Load 0x02         ; Take div (top of payload / 2)
57      A4      Push 0x24
58      80      Push 0x00
59      01      Sub               ; Offset of label2
5A      11      Call              ; to label2
5B      82      Push 0x02
5C      03      Mul               ; ret * 2
5D      00      Add               ; (ret * 2) + (mod( mod(top of payload / 2) + mod(input / 2) ) / 2)
5E      22      Swap 0x02         ; Take div(input / 2)
5F      20      Pop               ;
60      20      Pop               ; Stack: div (top of payload / 2) * 2
label3:                           ;
61      23      Swap 0x03         ;
62      20      Pop               ;
63      21      Swap 0x01         ;
64      20      Pop               ;
label6:
65      12      Ret               ; Return param[0]?
```
כעת אפשר לנסות
לשחזר את הקוד בשפה עילית:
```python
def unknown_function(input, top_of_payload):
    if input == 0:
        return top_of_payload
    elif top_of_payload == 0:
        return input
    elif top_of_payload == input:
        return 0
    temp = unknown_function(top_of_payload // 2, input // 2)
    temp *= 2
    temp += (( (top_of_payload % 2) + (input % 2) ) % 2)
    return temp
```
הקוד הזה פועל על
ראש המחסנית, ומשווה את הקלט מהמשתמש אל הערך ששמור על המחסנית. אם הערך נכון,
ממשיכים לאיטרציה הבאה, ואם לא – יוצאים.
לכן, כדי לדעת מה
הקלט שהתוכנה מצפה לו, נעתיק את תוכן המחסנית ונריץ Brute Force על כל האפשרויות.
```python
stack = "0F 69 05 64 03 78 20 4F 1D 4F 20 6C 00 69 07 40 12 7D 11 7D 14 7A 1D 4F 20 4C 20 49 07 60 32 02 4E 22 4B 05 42 3F".split(" ")
stack = [int(x, 16) for x in stack]
stack.reverse()
while len(stack) > 1:
    top_of_stack = stack.pop()
    for i in range(256):
        if unknown_function(i, top_of_stack) == stack[-1]:
            sys.stdout.write(chr(i))
            break
```
התוצאה היא:
flag{XoRRoLlinGRollingRolliNgR0LliNG}
&nbsp;
אתגר 11 – Bowsers
Secret Message (קטגוריית Reversing, 85 נקודות)
&nbsp;
תיאור האתגר:
```
We uncovered Bowser’s old laptop!
Everything was wiped except for 3 files, he must have used them to send his evil henchmen ──Steganos & Graphein── a secret message.
Help us!
```
הקבצים המצורפים הם:
1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Secret.gif –
קובץ GIF מונפש
שנפתח ללא בעיה
2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Enc.py –
סקריפט להצפנת מסר סודי בתוך קובץ GIF
3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Lzwlib.py –
סקריפט עזר לביצוע דחיסה
תוכן הקובץ enc.py:
```python
from __future__ import print_function
from random import randint, shuffle
import sys