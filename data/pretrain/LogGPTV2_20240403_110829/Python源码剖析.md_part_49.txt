在LOAD_ATTR指令之后，指令“37CALL_FUNCTIONO”开始了函数调用的动作，
在Python中，将PyFunctionobject对象和一个instance对象通过pyMethodobject
第12章Python虚拟机中的类机制
Pyobject
Pyobject_HEAD
无参函数的调用
一切真相大白，原来那个神秘的对象就是PyMethodobject对象。看到free_list
im->im_class
im->im_self= self;
//诺，这里就是“Be1P”啦～
im->im_func =func;
im->im_weakreflist = NULL;
struct
深度探索动态语言核心技术
>>class A(object):
>
>>>a=A()
*im_weakreflist;
*im_class;
*im_seif
im_func
LGC
a.f
=class;
class
//用于成员函数调用的self参数，instance对象（a）
//class对象（A)
//可调用的PyFunctionobject对象
图12-27
pass
dict
函数绑定的结果
]
下面的图12-27清晰地展示了在访问属性
N
---
## Page 335
对象和instance对象分别提取出来。在i分支中有一处最重要的代码：
[1处的判断成立后，在i分支中又会将PyMethodobject对象中的pyFunctionObject
会成立，其中的PyMethod_GET_SELF被定义为：
是在call_function中，Python虚拟机为PyMethodobject进行了一些参数处理的动作。
虚拟机没有进行参数入栈的动作。而任显然又是需要一个参数的函数，其参数为self，正
[ceval.c]
代码清单12-6
*pfunc= self:
#define PyMethod GET_SELF（meth)(((PyMethodobject *）meth)->Im_self)
[clasaobject.h]
static Pyobject*call_funetion(Pyobject
还记得我们在分析函数机制时看到的ptunc的意义吗？它指向的位置正是运行时栈
当Python虚拟机执行a.f（）时，在cal1_function中，代码清单12-6中[11处的判断
显然，调用成员函数王时，显式传入的参数个数为0，也就是说，调用主时，Pyhon
（PycFuncEion_Check（fumc）&&nk==O）（
Pyobject
else
7/[1]：从PyMethodObject对象中抽取PyFunctIonObject对象和selE参数
xfast_function（func,ppstack,n,na,nk);
X
(PyFunction_Check（func))
n++:
na++y
*pfune
//121:
func
(PyMet
do_call（func.ppstack,na，nk）;
Ha
*funie
**pfunc
(oparg>>8)&0xff;
self参数入栈，调整参数信息变量
ioaCheck（func)
*W:
self
nk;
(ppstack）=n1
PyMethod
GET_SELF(func):
12.5访问inistance对象中的属性
Python源码剖析
**pp_stack,irt oparg）
深度探索动态语言核心技术
305
---
## Page 336
306
Python源码剖析
_localsplus中。还记得我们曾经翻来覆去剖析过的fast_function吗？
快速通道中，运行时栈中的这个instance对象会被拷贝到新的 pyFrameobject对象的
中，由于a.仅仅是一个带位置参数的函数，所以Py山on执行引擎将进入快速通道，在
被Pyton虚拟机压入到了运行时栈中。从第11章的分析我们可以知道，在fast_function
的一般函数的调用。而在fast_function，在图12-27中作为sel参数的f_localsplus:
=n：7/[1]：获得栈项指针
图12-28设置self参数
OPTIMIZED
CO_NEWLOCALSCO_NOFREE))（
作为参数拷贝到函数的参数区
[PyCodeobject for function gl
参数的instance对象的使用：
所需的参数压入到运行时栈中的。这就是带参函数与无参函数的唯一不同之处，想一想无
49
4
[PyCodeobject for claas_O.py]
对于g，真正有趣的地方在于考察函数的实现代码，
可以看到，和调用成员函数E的指令序列几乎完全一致，只是多出了一个LOAD_CONST
Pyhon虚拟机对类中带参的成员函数的调用，其原理和流程都与无参函数的调用是一
在调用fast_function时，参数的数量n已经由执行cALL_FUNCTION时的O变为了
带参函数的调用
POP_TOP
CALI_FUNCTION
LOAD_ATTR
LOAD NAME
LOAD CONST
1215
o（=0：1f_localsplus
STORE_ATIR
LOADLFAST
LOADFAST
PRINT NEWLINE
PRINT_ITEM
LOADATTR
BOAD_FAST
aValue):
aValue
(g)
(value)
(self)
(value)
(self)
YaValue
12.5访问instance对象中的属性
Python源码剖析
从而可以看到对那个作为self
深度探索动态语言核心技术
307
---
## Page 338
Python源码剖析
12.5.6
308
A）完成。因此，虽然A，g也得到了一个PyMethogobject，但是其中的imself却是NULL。
因此也会调用其_get_函数进行转变。在之前剖析a.主时，我们看到这个转变是通过func
里的LOAD_ATTR指令最终会调用type_getattro。在type_getattro中，会在
追溯到LOAD_ATTR中。我们先来看一段使用UnboundMethod的Pyhon代码
当然，对BoundMethod的调用和对UnboundMethod的调用其形式是不同的，其原因可以
a.f这样的形式；而另一种则是通过类进行属性引用，称为UnboundMethod，形式如A.f，
Method，这种形式是通过类的实例对象进行属性引用，就像我们之前花了大力气讨论的
34
class A:
[class_1.py]
使得符号的搜索过程变得复杂，从而实现了面向对象这种编程模式，如此而己。
instance对象也是一个名字空间，不过这些名字空间通过一些特殊的规则联结在一起，
型其实非常简单，可以简化为两条规则：
现其中也有类似于LOAD_ATTR中Pyobject_GenericGetAttr的属性访问算法。
为self参数的instance对象。有兴趣的读者可以分析一下sTORE_ATTR的代码，可以发
.g（a)
V
V
三A（)
其中的关键就在于“34LOAD_ATTR3”指令，在12.5.2节中，我们已经解释过，
在Pyton中，当对作为属性的函数进行引用时，会有两种形式，
抛开面向对象花里胡哨的外表，其实我们会发现，class对象其实就是一个名字空间，
对从名字空间中得到的对象进行某些操作。
其实到了这里，我们可以在更高的层次俯视一下Pyhon的运行模型了，最核心的模
Bound Method和 Unbound Method
在某个名字空间中寻找符号对应的对象：
CALL FUNCPION2
显然，其中的LOAD_PAST、LOAD_ATTR、STORE_ATTR这些字节码指令都涉及到了作
第12章Python虚拟机中的类机制
LOAD_CONST
LOAD_NAME
LOAD_ATTR
LOAD_NAME
10)
print self.value
一深度探索动态语言核心技术
value):
(OT)
7/调用函数g
//入栈
//参数入栈
//获得A中的属性
/参数>>bound.im_self
>
main
unbound.im_self
bound
unbound=A.f
bound
图12-29boundmethod和unboundmethod
deff(self):
使其在创建名为主的PyMethodobject对象时输出调用次数）：
a.f
12.5
Pythan源码剖析
访问instance对象中的属性
一深度探索动态语言核心技术
309
---
## Page 340
Python源码剖折
12.6
310
24STORE NAME
这条语句对应的字节码指令如下：
则会将”g”与一个staticmethod对象关联起来，从而将属性”g”改造成一个staticmethod。
语句，将符号“g"和—个PyFunctionobject对象关联起来，但随后的g=staticmethod（g）
descriptor实现staticmethod的。
的存在给Python的类机制赋予了强大的力量。这一节，我们就来看看Python是如何使用
们可以做任何事情。在Python内部，也存在着各种各样的aescriptor，这些descriptor
性时，我们不光能实现从PyFunctionObject到pyMethodobject对象的转变，实际上我
在，这种转换就自然而然地发生了。将这种aescriptor的思想推而广之，其实在访问属
很自然地融入到Pyhon的类机制中。当我们访问对象中的属性时，由于descriptor的存
对象向PyMethodobject对象的转变，而这个关键的转变被Python中的descriptor概念
21
[PyCodeobject for class A]
中却只会进行一次属性访问和函数绑定的操作。
18
def
[class_2.py]
输出结果
代码
文件名
千变万化的descriptor
CALL_FUNCPION
LOAD NAME
在3.1.1节描述的为A创建动态元信息的过程中，Pyhon虚拟机首先会执行一个def
当我们调用instance对象的函数时，最关键的一个动作就是从PyFunctionobject
在bound_1.py中，一共会进行100次的属性访间和函数绑定操作，而在bound_2.py
第12章Python虚拟机中的类机制
staticmethod(g)
print value
g(value);
9三statlcmethod（g)
def g(valuel:
print value
一深度探索动态语言核心技术