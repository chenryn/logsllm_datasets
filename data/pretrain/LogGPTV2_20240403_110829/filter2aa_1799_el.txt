### MFT Record for a Compressed File

Figure 11-48 illustrates the Master File Table (MFT) record for a compressed file, as shown in Figure 11-47.

**Standard Information:**
- **File Name:**
- **Data:**

| Starting VCN | Starting LCN | Number of Clusters |
|--------------|--------------|--------------------|
| 19           | 113          | 10                 |
| 23           | 10           | 48                 |
| 4            | 8            | 0                  |
| 8            | 97           | 16                 |
| 16           | 32           | 16                 |

**FIGURE 11-48: MFT Record for a Compressed File**

One notable difference between this compressed file and an earlier example of a compressed file containing sparse data is that three of the compressed runs in this file are less than 16 clusters long. By reading this information from the MFT record, NTFS can determine whether the file's data is compressed. Any run shorter than 16 clusters contains compressed data that NTFS must decompress when it first reads the data into the cache. A run that is exactly 16 clusters long does not contain compressed data and thus requires no decompression.

When the data in a run is compressed, NTFS decompresses the data into a scratch buffer and then copies it to the caller's buffer. The decompressed data is also loaded into the cache, making subsequent reads from the same run as fast as any other cached read. When writing to a compressed file, NTFS writes the updates to the cache, and the lazy writer asynchronously compresses and writes the modified data to disk. This strategy ensures that writing to a compressed file does not introduce more significant delays than writing to a non-compressed file.

NTFS strives to keep disk allocations for a compressed file contiguous whenever possible. As indicated by the LCNs, the first two runs and the last two runs of the compressed file in Figure 11-47 are physically contiguous. When multiple runs are contiguous, NTFS performs disk read-ahead, similar to how it handles data in other files. Because the reading and decompression of contiguous file data occur asynchronously before the program requests the data, subsequent read operations can obtain the data directly from the cache, significantly enhancing read performance.

### Sparse Files

Sparse files, which are a specific type of NTFS file, are essentially compressed files where NTFS does not apply compression to the file's nonsparse data. However, NTFS manages the run data of a sparse file's MFT record in the same way it does for compressed files that contain both sparse and nonsparse data.

### Change Journal File

The change journal file, located at \Extend\UsnJrnl, is a sparse file used by NTFS to store records of changes to files and directories. Applications such as the Windows File Replication Service (FRS) and the Windows Search service use the journal to respond to file and directory changes as they occur.

The journal stores change entries in the J data stream and the maximum size of the journal in the Max data stream. Each entry is versioned and includes the following information about a file or directory change:

- **Time of the change**
- **Reason for the change** (see Table 11-9)
- **File or directory attributes**
- **File or directory name**
- **File or directory’s MFT file record number**
- **File record number of the file’s parent directory**
- **Security ID**
- **Update sequence number (USN) of the record**
- **Additional information about the source of the change** (e.g., a user, FRS, etc.)

**TABLE 11-9: Change Journal Change Reasons**

| Identifier                       | Reason                                          |
|----------------------------------|-------------------------------------------------|
| USN_REASON_DATA_OVERWRITE        | The data in the file or directory was overwritten. |
| USN_REASON_DATA_EXTEND           | Data was added to the file or directory.         |
| USN_REASON_DATA_TRUNCATION       | The data in the file or directory was truncated. |
| USN_REASON_NAMED_DATA_OVERWRITE  | The data in a file’s data stream was overwritten. |
| USN_REASON_NAMED_DATA_EXTEND     | The data in a file’s data stream was extended.   |
| USN_REASON_NAMED_DATA_TRUNCATION | The data in a file’s data stream was truncated.  |
| USN_REASON_FILE_CREATE           | A new file or directory was created.             |
| USN_REASON_FILE_DELETE           | A file or directory was deleted.                 |
| USN_REASON_EA_CHANGE             | The extended attributes for a file or directory changed. |
| USN_REASON_SECURITY_CHANGE       | The security descriptor for a file or directory was changed. |
| USN_REASON_RENAME_OLD_NAME       | A file or directory was renamed; this is the old name. |
| USN_REASON_RENAME_NEW_NAME       | A file or directory was renamed; this is the new name. |
| USN_REASON_INDEXABLE_CHANGE      | The indexing state for the file or directory was changed. |
| USN_REASON_BASIC_INFO_CHANGE     | The file or directory attributes and/or the time stamps were changed. |
| USN_REASON_HARD_LINK_CHANGE      | A hard link was added or removed from the file or directory. |
| USN_REASON_COMPRESSION_CHANGE    | The compression state for the file or directory was changed. |
| USN_REASON_ENCRYPTION_CHANGE     | The encryption state (EFS) was enabled or disabled for the file or directory. |
| USN_REASON_OBJECT_ID_CHANGE      | The object ID for the file or directory was changed. |
| USN_REASON_REPARSE_POINT_CHANGE  | The reparse point for a file or directory was changed, or a new reparse point (such as a symbolic link) was added or deleted from a file or directory. |
| USN_REASON_STREAM_CHANGE         | A new data stream was added to or removed from a file or renamed. |
| USN_REASON_TRANSACTED_CHANGE     | This value is added (ORed) to the change reason to indicate that the change was the result of a recent commit of a TxF transaction. |
| USN_REASON_CLOSE                 | The handle to a file or directory was closed, indicating that this is the final modification made to the file in this series of operations. |
| USN_REASON_INTEGRITY_CHANGE      | The content of a file’s extent (run) has changed, so the associated integrity stream has been updated with a new checksum. This Identifier is generated by the ReFS file system. |
| USN_REASON_DESIRED_STORAGE_CLASS_CHANGE | The event is generated by the NTFS file system driver when a stream is moved from the capacity to the performance tier or vice versa. |

### Experiment: Reading the Change Journal

You can use the built-in `%SystemRoot%\System32\Fsutil.exe` tool to create, delete, or query journal information. Here is an example of using `Fsutil` to query the change journal on a volume:

```sh
d:\>fsutil usn queryjournal d:
Usn Journal ID   : 0x01d48f4c3853cc72
First Usn        : 0x0000000000000000
Next Usn         : 0x0000000000000a60
Lowest Valid Usn : 0x0000000000000000
Max Usn          : 0x7fffffffffff0000
Maximum Size     : 0x0000000000a00000
Allocation Delta : 0x0000000000200000
Minimum record version supported : 2
Maximum record version supported : 4
Write range tracking: Disabled
```

The output indicates the maximum size of the change journal on the volume (10 MB) and its current state. To see how NTFS records changes in the journal, you can create a file called `Usn.txt` in the current directory, rename it to `UsnNew.txt`, and then dump the journal with `Fsutil`:

```sh
d:\>echo Hello USN Journal! > Usn.txt
d:\>ren Usn.txt UsnNew.txt
d:\>fsutil usn readjournal d:
...
Usn             : 2656
File name       : Usn.txt
File name length: 14
Reason          : 0x00000100: File create
Time stamp      : 12/8/2018 15:22:05
File attributes : 0x00000020: Archive
File ID         : 0000000000000000000c000000617912
Parent file ID  : 00000000000000000018000000617ab6
Source info     : 0x00000000: *NONE*
Security ID     : 0
Major version   : 3
Minor version   : 0
Record length   : 96
Usn             : 2736
File name       : Usn.txt
File name length: 14
Reason          : 0x00000102: Data extend | File create
Time stamp      : 12/8/2018 15:22:05
File attributes : 0x00000020: Archive
File ID         : 0000000000000000000c000000617912
Parent file ID  : 00000000000000000018000000617ab6
Source info     : 0x00000000: *NONE*
Security ID     : 0
Major version   : 3
Minor version   : 0
Record length   : 96
```

This experiment demonstrates how NTFS records and tracks changes in the change journal.