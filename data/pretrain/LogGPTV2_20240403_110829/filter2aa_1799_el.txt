more likely to occur during random file access.) Figure 11-48 shows the MFT record for the compressed 
file shown in Figure 11-47.
Standard
information File name
Data
19
23
4
8
0
97
16
32
16
Starting
VCN
Starting
LCN
Number of
clusters
113
10
48
FIGURE 11-48 MFT record for a compressed file.
One difference between this compressed file and the earlier example of a compressed file contain-
ing sparse data is that three of the compressed runs in this file are less than 16 clusters long. Reading 
this information from a file’s MFT file record enables NTFS to know whether data in the file is com-
pressed. Any run shorter than 16 clusters contains compressed data that NTFS must decompress when 
it first reads the data into the cache. A run that is exactly 16 clusters long doesn’t contain compressed 
data and therefore requires no decompression.
If the data in a run has been compressed, NTFS decompresses the data into a scratch buffer and 
then copies it to the caller’s buffer. NTFS also loads the decompressed data into the cache, which makes 
subsequent reads from the same run as fast as any other cached read. NTFS writes any updates to the 
file to the cache, leaving the lazy writer to compress and write the modified data to disk asynchro-
nously. This strategy ensures that writing to a compressed file produces no more significant delay than 
writing to a noncompressed file would.
NTFS keeps disk allocations for a compressed file contiguous whenever possible. As the LCNs indi-
cate, the first two runs of the compressed file shown in Figure 11-47 are physically contiguous, as are 
the last two. When two or more runs are contiguous, NTFS performs disk read-ahead, as it does with 
the data in other files. Because the reading and decompression of contiguous file data take place asyn-
chronously before the program requests the data, subsequent read operations obtain the data directly 
from the cache, which greatly enhances read performance.
CHAPTER 11
Caching and file systems
675
Sparse files
Sparse files (the NTFS file type, as opposed to files that consist of sparse data, as described earlier) are 
essentially compressed files for which NTFS doesn’t apply compression to the file’s nonsparse data. 
However, NTFS manages the run data of a sparse file’s MFT record the same way it does for compressed 
files that consist of sparse and nonsparse data.
The change journal file
The change journal file, \Extend\UsnJrnl, is a sparse file in which NTFS stores records of changes to 
files and directories. Applications like the Windows File Replication Service (FRS) and the Windows 
Search service make use of the journal to respond to file and directory changes as they occur.
The journal stores change entries in the J data stream and the maximum size of the journal in the Max 
data stream. Entries are versioned and include the following information about a file or directory change:
I 
The time of the change
I 
The reason for the change (see Table 11-9)
I 
The file or directory’s attributes
I 
The file or directory’s name
I 
The file or directory’s MFT file record number
I 
The file record number of the file’s parent directory
I 
The security ID
I 
The update sequence number (USN) of the record
I 
Additional information about the source of the change (a user, the FRS, and so on)
TABLE 11-9 Change journal change reasons
Identifier
Reason
USN_REASON_DATA_OVERWRITE
The data in the file or directory was overwritten.
USN_REASON_DATA_EXTEND
Data was added to the file or directory.
USN_REASON_DATA_TRUNCATION
The data in the file or directory was truncated.
USN_REASON_NAMED_DATA_OVERWRITE
The data in a file’s data stream was overwritten.
USN_REASON_NAMED_DATA_EXTEND
The data in a file’s data stream was extended.
USN_REASON_NAMED_DATA_TRUNCATION
The data in a file’s data stream was truncated.
USN_REASON_FILE_CREATE
A new file or directory was created.
USN_REASON_FILE_DELETE
A file or directory was deleted.
USN_REASON_EA_CHANGE
The extended attributes for a file or directory changed.
USN_REASON_SECURITY_CHANGE
The security descriptor for a file or directory was changed.
USN_REASON_RENAME_OLD_NAME
A file or directory was renamed; this is the old name.
676
CHAPTER 11
Caching and file systems
Identifier
Reason
USN_REASON_RENAME_NEW_NAME
A file or directory was renamed; this is the new name.
USN_REASON_INDEXABLE_CHANGE
The indexing state for the file or directory was changed (whether or not 
the Indexing service will process this file or directory).
USN_REASON_BASIC_INFO_CHANGE
The file or directory attributes and/or the time stamps were changed.
USN_REASON_HARD_LINK_CHANGE
A hard link was added or removed from the file or directory.
USN_REASON_COMPRESSION_CHANGE
The compression state for the file or directory was changed.
USN_REASON_ENCRYPTION_CHANGE
The encryption state (EFS) was enabled or disabled for this file or directory.
USN_REASON_OBJECT_ID_CHANGE
The object ID for this file or directory was changed.
USN_REASON_REPARSE_POINT_CHANGE
The reparse point for a file or directory was changed, or a new reparse point 
(such as a symbolic link) was added or deleted from a file or directory.
USN_REASON_STREAM_CHANGE
A new data stream was added to or removed from a file or renamed.
USN_REASON_TRANSACTED_CHANGE
This value is added (ORed) to the change reason to indicate that the 
change was the result of a recent commit of a TxF transaction.
USN_REASON_CLOSE
The handle to a file or directory was closed, indicating that this is the 
final modification made to the file in this series of operations.
USN_REASON_INTEGRITY_CHANGE
The content of a file’s extent (run) has changed, so the associated in-
tegrity stream has been updated with a new checksum. This Identifier is 
generated by the ReFS file system.
USN_REASON_DESIRED_STORAGE_
CLASS_CHANGE
The event is generated by the NTFS file system driver when a stream is 
moved from the capacity to the performance tier or vice versa.
EXPERIMENT: Reading the change journal
You can use the built-in %SystemRoot%\System32\Fsutil.exe tool to create, delete, or query jour-
nal information with the built-in Fsutil.exe utility, as shown here:
d:\>fsutil usn queryjournal d: 
Usn Journal ID   : 0x01d48f4c3853cc72 
First Usn
: 0x0000000000000000 
Next Usn
: 0x0000000000000a60 
Lowest Valid Usn : 0x0000000000000000 
Max Usn
: 0x7fffffffffff0000 
Maximum Size     : 0x0000000000a00000 
Allocation Delta : 0x0000000000200000 
Minimum record version supported : 2 
Maximum record version supported : 4 
Write range tracking: Disabled
The output indicates the maximum size of the change journal on the volume (10 MB) and its 
current state. As a simple experiment to see how NTFS records changes in the journal, create a 
file called Usn.txt in the current directory, rename it to UsnNew.txt, and then dump the journal 
with Fsutil, as shown here:
d:\>echo Hello USN Journal! > Usn.txt 
d:\>ren Usn.txt UsnNew.txt 
EXPERIMENT: Reading the change journal
You can use the built-in %SystemRoot%\System32\Fsutil.exe tool to create, delete, or query jour-
nal information with the built-in Fsutil.exe utility, as shown here:
d:\>fsutil usn queryjournal d:
Usn Journal ID   : 0x01d48f4c3853cc72
First Usn
: 0x0000000000000000
Next Usn
: 0x0000000000000a60
Lowest Valid Usn : 0x0000000000000000
Max Usn
: 0x7fffffffffff0000
Maximum Size     : 0x0000000000a00000
Allocation Delta : 0x0000000000200000
Minimum record version supported : 2
Maximum record version supported : 4
Write range tracking: Disabled
The output indicates the maximum size of the change journal on the volume (10 MB) and its 
current state. As a simple experiment to see how NTFS records changes in the journal, create a 
file called Usn.txt in the current directory, rename it to UsnNew.txt, and then dump the journal 
with Fsutil, as shown here:
d:\>echo Hello USN Journal! > Usn.txt
d:\>ren Usn.txt UsnNew.txt
CHAPTER 11
Caching and file systems
677
d:\>fsutil usn readjournal d: 
...
Usn
: 2656 
File name
: Usn.txt 
File name length  : 14 
Reason
: 0x00000100: File create 
Time stamp
: 12/8/2018 15:22:05 
File attributes   : 0x00000020: Archive 
File ID
: 0000000000000000000c000000617912 
Parent file ID    : 00000000000000000018000000617ab6 
Source info
: 0x00000000: *NONE* 
Security ID
: 0 
Major version     : 3 
Minor version     : 0 
Record length     : 96 
Usn
: 2736 
File name
: Usn.txt 
File name length  : 14 
Reason
: 0x00000102: Data extend | File create 
Time stamp
: 12/8/2018 15:22:05 
File attributes   : 0x00000020: Archive 
File ID
: 0000000000000000000c000000617912 
Parent file ID    : 00000000000000000018000000617ab6 
Source info
: 0x00000000: *NONE* 
Security ID
: 0 
Major version     : 3 
Minor version     : 0 
Record length     : 96 
Usn
: 2816 
File name
: Usn.txt 
File name length  : 14 
Reason
: 0x80000102: Data extend | File create | Close 
Time stamp
: 12/8/2018 15:22:05 
File attributes   : 0x00000020: Archive 
File ID
: 0000000000000000000c000000617912 
Parent file ID    : 00000000000000000018000000617ab6 
Source info
: 0x00000000: *NONE* 
Security ID
: 0 
Major version     : 3 
Minor version     : 0 
Record length     : 96 
Usn
: 2896 
File name
: Usn.txt 
File name length  : 14 
Reason
: 0x00001000: Rename: old name 
Time stamp
: 12/8/2018 15:22:15 
File attributes   : 0x00000020: Archive 
File ID
: 0000000000000000000c000000617912 
Parent file ID    : 00000000000000000018000000617ab6 
Source info
: 0x00000000: *NONE* 
Security ID
: 0 
d:\>fsutil usn readjournal d:
...
Usn
: 2656
File name
: Usn.txt
File name length  : 14
Reason
: 0x00000100: File create
Time stamp
: 12/8/2018 15:22:05
File attributes   : 0x00000020: Archive
File ID
: 0000000000000000000c000000617912
Parent file ID    : 00000000000000000018000000617ab6
Source info
: 0x00000000: *NONE*
Security ID
: 0
Major version     : 3
Minor version     : 0
Record length     : 96
Usn
: 2736
File name
: Usn.txt
File name length  : 14
Reason
: 0x00000102: Data extend | File create
Time stamp
: 12/8/2018 15:22:05