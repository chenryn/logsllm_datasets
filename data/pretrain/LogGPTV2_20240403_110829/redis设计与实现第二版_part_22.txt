第10章RDB持久化·129
图10-22无压缩字
符串的保存结构
lenstring
---
## Page 134
130·第二部分单机数据库的实现
以程序会以处理字符串对象的方式来保存和读人集合元素。
个大小知道自己应该读人多少个集合元素。
ENCODING_HT 编码的集合对象，RDB文件保存这种对象的结构如图 10-28 所示。
和第三个列表项，其中：
序会以处理字符串对象的方式来保存和读入列表项。
以通过这个长度知道自己应该读人多少个列表项。
ENCODING_LINKEDLIST 编码的列表对象，RDB文件保存这种对象的结构如图10-26所示。
图中以 item 开头的部分代表列表的项，因为每个列表项都是一个字符串对象，所以程
作为示例，图10-29展示了一个包含四个元素的集合。
图中以 élem开头的部分代表集合的元素，因为每个集合元素都是一个字符串对象，所
第一个元素的长度为 5，值为"apple"。
结构中的第一个数字4记录了集合的大小，之后跟着的是集合的四个元素：
其中，set_size 是集合的大小，它记录集合保存了多少个元素，读入程序可以通过这
如果 TYPE 的值为 REDIS_RDB_TYPE_SET，那么 value 保存的就是一个 REDIS_
口第一个列表项的长度为5，内容为字符串"hello"。
结构中的第一个数字 3 是列表的长度，之后跟着的分别是第一个列表项、第二个列表项
list_length 记录了列表的长度，它记录列表保存了多少个项（item），读人程序可
如果 TYPE 的值为 REDIS_RDB_TYPE_LIST，那么 value 保存的就是一个 REDIS
3. 集合对象 
第三个列表项的长度为1，内容为字符串“!"。
口第二个列表项的长度也为5，内容为字符串＂wor1d"。
作为示例，图10-27展示了一个包含三个元素的列表。
2. 列表对象
"6op.eseo.e“cueuea9aTdde.s
图10-26LINKEDLIST 编码列表对象的保存结构
图10-27保存LINKEDLIST 编码列表的例子
"iuTaptxomssuotrou.sE
图10-28HT 编码集合对象的保存结构
图 10-29 保存 HT 编码集合的例子
---
## Page 135
ENCODING_SKIPLIST 编码的有序集合对象，RDB文件保存这种对象的结构如图10-34所示。
ENCODING_HT 编码的集合对象，RDB 文件保存这种对象的结构如图 10-30 所示：
如果 TYPE 的值为 REDIS_RDB_TYPE_ZSET，那么 value 保存的就是一个 REDIS_
5. 有序集合对象 
口第二个键值对的键是长度为1 的字符串"b"，值是长度为6的字符串"banana"。
口第一个键值对的键是长度为1的字符串"a"，值是长度为 5 的字符串"apple"。
在这个示例结构中，第一个数字2记录了哈希表的键值对数量，之后跟着的是两个键值对：
作为示例，图10-33展示了一个包含两个键值对的哈希表。
因此，从更详细的角度看，图10-30所展示的结构可以进一步修改为图10-32。
结构中的每个键值对都以键紧挨着值的方式排列在一起，如图10-31所示。
 hash_size 记录了哈希表的大小，也即是这个哈希表保存了多少键值对，读人程序
如果 TYPE 的值为 REDIS_RDB_TYPE_HASH，那么value 保存的就是一个 REDIS
hash_size
4.哈希表对象 
口第四个元素的长度为3，值为"dog"。
口第三个元素的长度为3，值为"cat"。
第二个元素的长度为6，值为“banana"。
符串对象，所以程序会以处理字符串对象的方式来保存和读人键值对。
可以通过这个大小知道自己应该读入多少个键值对。
hash_size
sorted_set_size
key_value_pair 1
key1
“eueuea9Trddes
图10-34SKIPLIST编码有序集合对象的保存结构
图10-32更详细的 HT编码哈希表对象的保存结构
value1key2value2key3 value3...
图10-30HT编码哈希表对象的保存结构
图10-33保存HT 编码哈希表的例子
图10-31键值对的保存结构
elementi
 element2
key_value_pair N
，键值对的键和值都是字
第10章RDB持久化·131
---
## Page 136
132·第二部分单机数据库的实现
表对象，RDB文件保存这种对象的方法是：
合对象。
程序会根据TYPE 值的指示，先读人字符串对象，再将这个字符串对象转换成原来的整数集
这个字符串对象保存到 RDB 文件里面。
数集合对象，RDB文件保存这种对象的方法是，先将整数集合转换为字符申对象，然后将
集合元素：
保存起来。
在保存 RDB文件时会先将分值转换成字符串对象，然后再用保存字符串对象的方法将分值
值（score）两部分，成员是一个字符串对象，分值则是一个double类型的浮点数，程序
读人程序需要根据这个值来决定应该读人多少有序集合元素。
如果程序在读人 RDB文件的过程中，碰到由整数集合对象转换成的字符串对象，那么
以element 开头的部分代表有序集合中的元素，每个元素又分为成员（member）和分
7. ZIPLIST 编码的列表、哈希表或者有序集合
如果 TYPE 的值为 REDIS_RDB_TYPE_SET_INTSET，那么value 保存的就是一个整
口第二个元素的成员是长度为1的字符串"e"，分值被转换成字符串之后变成了长度
口 第一个元素的成员是长度为2的字符串"pi"，分值被转换成字符串之后变成了长
在这个示例结构中，第一个数字2记录了有序集合的元素数量，之后跟着的是两个有序
作为示例，图10-37展示了一个带有两个元素的有序集合。
有序集合中的每个元素都以成员紧挨着分值的方式排列，如图10-35所示，
sorted_set_size 记录了有序集合的大小，也即是这个有序集合保存了多少元素，
6. INTSET 编码的集合 
因此，从更详细的角度看，
度为4的字符串＂3.14"。
为3的字符串"2.7"。
memberl
图 10-36更详细的 SKIPLIST 编码有序集合对象的保存结构
2
图10-37保存SKIPLIST编码有序集合的例子
scorel
，图10-34所展示的结构可以进一步修改为图10-36。
图10-35成员和分值的保存结构
member2
score2member3
score3.
memberNscoreN
---
## Page 137
个RDB文件将由以下四个部分组成：
10.4.1 不包含任何键值对的 RDB 文件
令的文档。
给定-x参数可以以十六进制的方式打印输人文件，诸如此类，具体的信息可以参考od 命
（dump）并打印输人文件。比如说，给定-c参数可以以ASCII 编码的方式打印输人文件，
定的了解了，是时候抛开单纯的图片示例，开始分析和观察一下实际的RDB 文件了。
10.4
类型。
压缩列表来保存，RDB读人程序也总可以将读入并转换之后得出的压缩列表设置成原来的
REDIS_RDB_TYPE_ZSET_ZIPLIST，那么压缩列表对象的类型为有序集合。
RDB_TYPE_HASH_ZIPLIST，那么压缩列表对象的类型为哈希表；如果 TYPE 的值为
TYPE_LIST_ZIPLIST，那么压缩列表对象的类型为列表；如果 TYPE 的值为 REDIS
程序会根据 TYPE 值的指示，执行以下操作：
我们使用od命令来分析 Redis 服务器产生的 RDB文件，该命令可以用给定的格式转存
让我们首先从最简单的情况开始，执行以下命令，创建一个数据库状态为空的 RDB 文件:
通过上一节对 RDB 文件的介绍，我们现在应该对 RDB 文件中的各种内容和结构有一
从步骤2可以看出，由于 TYPE 的存在，即使列表、哈希表和有序集合三种类型都使用
五个字节的"REDIS”字符串。
2）根据 TYPE 的值，设置压缩列表对象的类型：如果 TYPE 的值为 REDIS_RDB_
四个字节的版本号（db_version )。
根据之前学习的 RDB 文件结构知识，当一个RDB 文件没有包含任何数据库数据时，这
1）读人字符串对象，并将它转换成原来的压缩列表对象。
如果程序在读人 RDB 文件的过程中，碰到由压缩列表对象转换成的字符串对象，那么
00000
$ od -c dump.rdb
然后调用 od 命令，打印 RDB 文件：
redis> SAVE
2）将转换所得的字符串对象保存到RDB文件。
0000022
1）将压缩列表转换成一个字符串对象。
分析 RDB 文件
R E D I S 0 0 0 6 377 334 263 C 360 Z 334
第10章RDB持久化·133
---
## Page 138
134·第二部分单机数据库的实现
是值 HELLO 的长度。
STRING（这个常量的实际值为整数0），之后的003是键MSG的长度值，再之后的005则
式来储存的。
符串对象，并且字符串在未被压缩前，都是以字符串长度为前缀，后跟字符串内容本身的方
（TYPE）键（key）、值（value）三部分组成：其中类型的长度为一字节，键和值都是字
据库。
现的376代表SELECTDB常量，再之后的\0代表整数0，表示被保存的数据库为0号数
由以下三部分组成：
10.4.2包含字符串键的 RDB文件
节则代表 RDB 文件的校验和。
再之后的一个字节377代表EOF常量，最后的334263C360Z334362V八个字
根据这些特征，我们可以确定\O 就是字符串类型的 TYPE值 REDIS_RDB_TYPE
根据之前学习的键值对结构知识，在RDB文件中，没有过期时间的键值对由类型
在数据库号码之后，直到代表EOF 常量的377为止，RDB文件包含有以下内容：
观察od 命令打印的输出，RDB 文件的最开始仍然是 REDIS 和版本号0006，之后出
\0003MSG005HELLO
口一个或以上数量的键值对（key_value_pairs）。
一个一字节长的特殊值 SELECTDB。
根据之前学习的数据库结构知识，当一个数据库被保存到RDB 文件时，这个数据库将
0000037
0000020005
0000000
再次执行 od命令：
redis> SET MSG "HELLO"
redis> FLUSHALL
这次我们来分析一个带有单个字符串键的数据库：
从od命令的输出中可以看到，最开头的是“REDIS”字符串，之后的0006是版本号，
八个字节的校验和（check_sum）。
一个字节的EOF 常量。
一个长度可能为一字节、两字节或者五字节的数据库号码（db_number）。
L0 377 207
S
6376
\0\0003M
L 343
S
---
## Page 139
10.4.4包含一个集合键的RDB文件
10.4.3
redis> SAVE
redis> FLUSHALL
最后，让我们试试在 RDB 文件中包含集合键：
212231×247252）021306：代表八字节长的校验和。
377：代表EOF 常量。
口 REDIS0006：RDB文件标志和版本号。
根据这些特征，可以得出 RDB 文件各个部分的意义：
根据之前学习的键值对结构知识，一个带有过期时间的键值对将由以下部分组成：
$ od -c dump.rdb
打印 RDB 文件：
现在，让我们来创建一个带有过期时间的字符串键：
口
L
口
D
0000050
redis> SAVE
1005HELLO：005是值的长度，HELLO是值。
000020
\0003M SG：\0表示这是一个字符串键，003是键的长度，MSG是键。
、2365336@001\0\0：代表八字节长的过期时间。
374：代表特殊值EXPIRETIME_MS。
376\0：切换到0号数据库。
一个键（key）和一个值（value）。
一个一字节长的类型（TYPE）。
一个八字节长的过期时间（ms）。
一个一字节长的EXPIRETIME_MS 特殊值。
包含带有过期时间的字符串键的RDB文件
001
x 247 252
10
口
10
S
}021 306
0
63760374
第10章RDB持久化·135
---
## Page 140
136·第二部分单机数据库的实现
得多，后者看起来就像乱码一样。
进制格式打印 RDB 文件：
易看出它的真实值，更好的办法是使用-cx参数调用od命令，同时以 ASCII 编码和十六
ASCII 编码打印 RDB 文件可以很容易地发现文件中的字符串内容。
之后，适当地尝试一下。
可以帮助我们熟悉 RDB文件的结构和格式，如果读者有兴趣的话，可以在理解本章的内容
理 RDB 文件的工具，所以人工分析 RDB 文件的内容并不是学习 Redis 所必须掌握的技能。
10.4.5关于分析 RDB文件的说明
最后要提醒的是，前面我们--直用 od 命令配合-c 参数来打印 RDB 文件，因为使用
现在可以从输出中看出，RDB文件的校验和为0x56f2dc5af043b3dc（校验和
但是，对于 RDB 文件中的数字值，比如校验和来说，通过ASCII 编码来打印它并不容
不过从学习 RDB 文件的角度来看，人工分析 RDB 文件是一个不错的练习，这种练习
因为 Redis 本身带有 RDB 文件检查工具 redis-check-dump，网上也能找到很多处
0000022
0000020 362
$ od -cx dump.rdb 
0000000
202 312r 352346305*023：代表校验和。
口
口003：集合的大小，说明这个集合包含三个元素。
0
D
口 REDIS0006：RDB 文件标志和版本号。
以下是 RDB 文件各个部分的意义：
0000047
0000020
000000
$ od -c dump.rdb
打印输出如下：
口
0000040
377
004
整数2），表示这是一个哈希表编码的集合键，004 表示键的长度，LANG 是键的名字。
002004LANG：002是常量 REDIS_RDB_TYPE_SET（这个常量的实际值为
001
376\0：切换到0号数据库。
：代表常量EOF。
JAVA：集合的第二个元素。
312
56f2
：集合的第三个元素。
R
4552
ED
r 352 346 305
494430533030
IS 
D
*023
0
ff36
Y004J
０6 3760 002 004 L
b3dc
f043
A 001 C 377 202
dc5a
---
## Page 141
10.6参考资料
10.5
 Sripathi Krishnan 编写的《Redis RDB 文件格式》文档以文字的形式详细记录了
 Redis 作者的博文《Redis persistence demystifed》很好地解释了 Redis 的持久化
口对于不同类型的键值对，RDB文件会使用不同的方式来保存它们。
口 RDB 文件是一个经过压缩的二进制文件，由多个部分组成。
口 服务器状态中会保存所有用 save 选项设置的保存条件，当任意一个保存条件被满
口 BGSAVE令由子进程执行保存操作，所以该命令不会阻塞服务器。
口SAVE命令由服务器进程直接执行保存操作，所以该命令会阻塞服务器。
口 RDB 文件用于保存和还原 Redis 服务器所有数据库中的所有键值对数据。
足时，服务器会自动执行BGSAVE命令。
翻译版《解密 Redis 持久化》:http://blog.nosqlfan.com/html/3813.html。
antirez.com/post/redispersistence-demystified.html，NoSQLFan 网站上有这篇文章的