As we discussed, we envision that in addition to website
administrators, users might also use Newton to detect when
2We will make the location of the code public when the paper is published.
10
they are visiting vulnerable websites in real time. To evaluate
the feasibility of this use case, we explore the number of page
fetches, time, and amount of data required to compute the
auth-cookies. The tests in this section were performed from a
laptop on a residential network with downstream throughput
of about 6–7 Mbps in the United States in 2014.
Figure 10a shows a distribution of the number of page
fetches that are required to compute the auth-cookies for a
particular site. Newton can compute auth-cookies for 90% of
sites with fewer than 100 page fetches; the median number
of page fetches to compute auth-cookies for a site is 25. Fig-
ure 10b shows that about 80% of these computations require
less than four minutes to complete, and Figure 10c shows that
about 80% of these computations require the client to down-
load less than 20 MB of data from the webpage for which
Newton is performing the auth-cookie computation. These
results show that Newton is efﬁcient enough to operate in
practice. We have released Newton to a set of alpha users,
who have been using the tool for about three months; none
of these users have experienced any performance problems
or disruptions as a result of running Newton. We will release
Newton, as well as the source code for Newton and the data
from the analysis in this paper when the paper is published.
Another possible concern is that Newton might introduce
excessive server load. As shown in Figure 10a, Newton can
compute auth-cookies for most sites with fewer than 100
HTTP requests; most web applications are designed to handle
many more requests at much higher rates. We also note
that the results of Newton’s auth-cookie computations are
not speciﬁc to each user, so if Newton shares the results of
these computations across users, users can avoid redundant
computation.
6 Case Studies and Recommendations
In this section, we use Newton to investigate how 45 different
popular websites use auth-cookies for client authentication.
Newton uncovered many design ﬂaws and vulnerabilities,
many of which could be exploitable in the context of the
scenarios that we outline in Section 2. Based on these case
studies, we develop a set of “best practice” recommenda-
tions for using auth-cookies for client authentication and also
discuss the “cost” of implementing these recommendations
for site operators. In some ways, this section represents a
much-needed re-appraisal of the recommendations from Fu
et al. more than ten years ago [13], when client authen-
tication on the web was much simpler. In addition to the
speciﬁc recommendations that we offer, we hope that users,
web application developers, and website administrators can
use the auditing functions and recommendations that Newton
provides to improve the security of client authentication on
today’s websites.
6.1 Setting the secure ﬂag
An attacker can gain access to user’s private account if he is
successful in stealing at least one complete auth-cookies com-
(a) Number of page fetches.
(b) Time.
(c) Data.
Figure 10: Page fetches, time, and data required to compute auth-cookies.
bination. As mentioned in Section 2, an attacker who controls
hop in victim’s network path (e.g., as an open WiFi router,
operated as a rogue, unscrupulous ISP, or other untrusted
third party) can induce the victim’s browser into divulging
all cookies for which the secure ﬂag is not set. For this
reason, we recommend that at least one auth-cookie in each
auth-cookies combination should have the secure ﬂag.
Our investigation found nine sites that served at least some
content over HTTPS, which would indicate that the auth-
cookies were likely sensitive. In four of those cases, the site
always served content over HTTPS, but no cookie had the
secure ﬂag set. In these cases, an on-path attacker could
still induce the victim to divulge these presumably sensitive
cookies over an insecure channel.
Another ﬁve sites served content over both HTTP and
HTTPS; some auth-cookies had secure ﬂag set, but others
did not. Unfortunately, in these cases not enough auth-cookies
had secure ﬂag set to prevent theft of a complete auth-
cookies combination. It is likely that these vulnerabilities
exist because web programmers may not have easy ways
to understand how different auth-cookie combinations grant
control to different parts of a website. In the future, the use
of a tool like Newton could help web programmers eradicate
these types of errors.
We study two use cases where web programmers appear to
have used the secure ﬂag incorrectly:
GoDaddy. Newton discovered that GoDaddy has the follow-
ing three auth-cookie combinations, with seven auth-cookies
that grant access to a user’s private account over HTTPS:
OR
(ATL.SID.IDP AND gdCassCluster.F/cCGwbuE8)
(ATL.SID.MYA AND gdCassCluster.osGjBIVhZQ AND
OR
MemAuthId1ANDShopperId1)
(auth_idp)
Of these, only auth_idp has the secure ﬂag set to true.
Thus, an attacker might steal any of the other six auth-cookies
that satisfy either of the ﬁrst two auth-cookie combinations to
gain access to the user’s account.
Yahoo. Newton found that two of the Yahoo’s services have
following auth-cookies combinations:
Yahoo Mail
Yahoo Search
:
:
Y AND T AND SSL
Y AND T
Although both of these services serve content over HTTPS,
only the SSL cookie is protected using the secure ﬂag. This
protects Yahoo Mail from cookie theft, but an attacker can
nonetheless steal a second combination of cookies and still
gain access to the complete past search history of the victim.
Implementing this recommendation: Setting the secure
ﬂag for auth-cookies of sites that are accessed entirely over
HTTPS is easy. For sites that offer mixed content, develop-
ers must ensure that the auth-cookie combinations required
for parts of site served over HTTPS are mutually exclusive
from those required for HTTP parts of the site. Although
implementing this recommendation still requires a thorough
analysis of the website’s services, we believe that this is more
practical than HSTS deployment, which can only be imple-
mented on a much more coarse granularity.
6.2 Setting the HttpOnly ﬂag
An obvious mechanism for protecting the theft of auth-
cookies via attacks such as XSS is to set the HttpOnly
ﬂag, but there may be legitimate reasons why a web program-
mer may not want to set the HttpOnly ﬂag. For example,
some Javascript programs may need to access a cookie. The
programmer should always have one auth-cookie in each
combination for which the HttpOnly ﬂag is set. If a web
programmer does not follow this practice, an XSS exploit
or third-party malicious Javascript can gain access to the
auth-cookies.
Newton found seven sites that serve at least part of the
contents or all contents over HTTPS (suggesting that the
content and the cookies should be considered sensitive), yet
did not set the HttpOnly ﬂag to protect all auth-cookie
combinations. Of these seven vulnerable, it appears that
11
ﬁve of these vulnerabilities result from simple programming
errors, since for those sites, none of the cookies had the
HttpOnly ﬂag. We explore one such use case below.
Amazon. We found that Amazon AWS has the following
auth-cookie combination:
(aws− at− main AND aws− userInfo
AND aws− creds AND aws− x− main) OR
(aws− at− main AND aws− userInfo AND
aws− creds AND
aws− ubid− main AND aws− session− id)
In this case, both auth-cookie combinations are protected
because aws-creds has HttpOnly set to true. Yet, com-
binations to access user’s private account on Amazon’s eCom-
merce site are as follows:
(at− main AND sess− at− main
AND ubid− main AND x− main) OR
(at− main AND sess− at− main AND
ubid− main AND session− id)
None of these cookies have the HttpOnly attribute set, leav-
ing authentication to Amazon’s eCommerce site vulnerable
to cookie-stealing and authentication attacks.
Implementing this recommendation: A site operator can
ensure that setting HttpOnly would not break site func-
tionality by searching over the site’s Javascript code to de-
termine if whether any Javascript accesses the HttpOnly
auth-cookie. In cases where all auth-cookies are accessed by
Javascript code, the operator can secure the site by adding
one more required auth-cookie to each combination that has
the HttpOnly attribute.
6.3 Using auth-cookie entropy across sessions
At least one auth-cookie from each combination should
change its value across the user’s login sessions. If the auth-
cookie values remain unchanged across different sessions,
then a single theft of auth-cookies could enable an attacker
to continue authenticating to a web service as the user for an
indeﬁnite amount of time. We found that six different sites
did not change the client auth-cookies across sessions. Four
of these sites also send auth-cookies in HTTP cleartext and
are thus vulnerable to other attack vectors. We found Twitter
and GoDaddy to be particularly vulnerable:
Twitter. Twitter has only one auth-cookie combination
with a single auth-cookie: auth_token. The value of this
cookie is 40 hex characters that is constant across sessions.
Also because of this, if attacker steals this cookie, then she
can login to victim’s account even if victim is not logged in.
GoDaddy. In the case of GoDaddy, we observed that only
auth_idp changes in its value across sessions. All other
auth-cookies retain their value across sessions, meaning that
even though auth_idp changes, other static auth-cookies
could be used to re-authenticate the user even after a session
has expired.
Invalidating auth-cookies upon logout
Some web applications change auth-cookies across differ-
ent sessions, but the entropy of these changes is low. For
example, Facebook has two auth-cookies, c_user & xs.
The c_user cookie is a user ID that does not change. The
xs cookie appears to change across sessions; this cookie
has 36 characters that has multiple components, as follows:
119:ZHA1W3C7c7aBar:2:1406528127:6694. Only
the second part of this string is truly random; the other com-
ponents are guessable, as they refer to characteristics such as
the time when the user logs in.
Implementing this recommendation: The wide variety of
cryptographic libraries in different web languages make it
possible to use cryptographic primitives to introduce more
entropy into session cookies; the challenge, of course, lies in
selecting good inputs to these functions that serve as reason-
able sources of entropy that are difﬁcult to guess [1].
6.4
When a user explicitly initiates a log out action, it should
invalidate the auth-cookies used in that session.
If a site
does not follow this practice, an attacker who can obtain
the auth-cookies by the methods that we have discussed can
authenticate as the user. If sites do not invalidate auth-cookies
at logout, the logout action is essentially meaningless, and the
user actually has no control over their sessions: a user may
think he or she has logged out, but as long as the auth-cookies
remain present and are not invalidated, the user is logged in.
Newton found 18 sites where past session cookies allowed an
attacker access to an account where the user was logged out.
If auth-cookies are not reset or invalidated when a user logs
out, the cookies may also compromise a user’s anonymity.
Because the auth-cookie still carries the same value from the
time when the user was logged in, all activity from the current
anonymous context can be tracked to the user’s real account
on that site. Newton found ﬁve sites that do not modify their
auth-cookies after the user has logged out, including Amazon,
as described in the example below.
Amazon.
logs out of Amazon, both
session-id and ubid-main retain their values from
logged in session. Because each of them is a 17-digit number,
each of them provides enough entropy to identify each user.
After a user
(at− main AND sess− at − main AND
ubid− main AND x− main) OR
(at− main ANDsess− at− mainAND
ubid− main AND session− id)
Implementing this recommendation: The difﬁculty of im-
plementing this recommendation depends on the complexity
of the website. Invalidating a user’s auth-cookies upon lo-
gout requires deleting state about a user’s past session. The
growing popularity of NoSQL databases that provide only
eventual (rather than strict) consistency, however, means that
a implementing this feature correctly would require some care
in these cases.
12
6.5 Changing auth-cookies when
passwords change
We recommend that at least one auth-cookie in each com-
bination should be derived from user’s password in some
cryptographic way such as HMAC. With this rule, even if
user’s password was leaked to an attacker and if she is using
it to login to victim’s account, as soon as victim realizes this
and changes his password, all the auth-cookie combinations
currently in use by attacker’s session immediately become
invalid. On eight sites (including Monster, Mailchimp, Quora,
OKCupid, GoDaddy, Comcast, and Amazon), we obtained
access to a user’s account after changing the password, using
old auth-cookies that were generated in a past session which
was established after logging in using older password.3 This
vulnerability means that if a user’s auth-cookies are compro-
mised, an attacker can retain access to the user’s account
even after the user discovers a compromise and changes his
password!
Implementing this recommendation: Existing websites al-
ready typically store user passwords as a cryptographic hash.
This existing input could in turn be used to derive an auth-
cookie that changes whenever the user’s password changes.
7 Limitations
We discuss several limitations of Newton and possible areas
for improvement.
7.1
Some of Newton’s tests of a website’s practices depend on
interactions with the user that should be as infrequent as pos-
sible or are not guaranteed to occur in the ﬁrst place. For
example, to test that a site invalidates a user’s auth-cookies
after the user has logged out, Newton would must discover
that user has logged out, restore the previous session cookies,
and test if the user is still logged in. Newton automatically
discovers when a user logs out using various heuristics but to
restore the auth-cookies, we explicitly ask for user permission,
which become annoying if performed repeatedly. Currently
we limit on how many such testing we conduct in a given time
period to reduce this annoyance. Testing whether a website
changes the user’s auth-cookies when the user changes his
or her password requires waiting for the user to ﬁrst change
his or her password. Currently, Newton automatically discov-
ers when a user changes his or her password for a particular
account, at which point it subsequently performs testing. Be-
cause Newton must wait until a user changes his or password
to perform this test, we cannot guarantee that Newton always
performs this test.
Interfering with the User Experience
Because Newton retrieves webpages repeatedly while sup-
pressing different combinations of cookies, a possible con-
cern is that such repeated requests might have unintended
3We performed our tests of stale auth-cookies approximately ten minutes
after changing the user password. It is possible that some of these sites may
invalidate auth-cookies on a slower timescale.
13
or unforeseen side effects. An HTTP GET request is idem-
potent [12], so it should only have an effect the ﬁrst time
the user performs the request. It is possible that repeated
requests might have unintended side-effects, however (e.g.,