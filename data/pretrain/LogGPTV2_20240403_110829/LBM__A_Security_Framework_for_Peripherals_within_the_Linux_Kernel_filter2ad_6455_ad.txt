which effectively physically disconnects the USB data pins
(D+/-) from the USB bus. Unfortunately, this prevents phones
that support USB Battery Charging [63] from drawing extra
power via the data wires. As a result, fully charging a phone
may take 15 times as long due to the lower amperage.
Additionally, a comparable device is not available for USB
Type-C. Using LBM, we could instead implement a software
USB data blocker:
((usb.busnum == 1) && (usb.portnum == 1))
After applying this LBM rule to the RX path, we are able
to drop any data transmission from the physical USB port
1 under bus 1, thus making the port charge-only for any
connections. This LBM rule does not
interfere with USB
Battery Charging, since the data wires are still physically
connected, and can be applied to any physical USB port,
regardless of whether or not it is Type-C.
Securing Bluetooth Invisible Mode: To prevent a Bluetooth
device from being scanned by another (potentially) malicious
device, such as during a Blueprinting [38] or BlueBag [21] at-
tack, Bluetooth introduces discoverable and non-discoverable
modes to devices. A device in non-discoverable mode does not
respond to inquires from other devices, thus hiding its presence
from outsiders. On one hand, the toggling of this mode can be
controlled from the user space, (e.g., using bluetoothctl,
which should require root permission). On the other hand,
any vulnerabilities within these user-space daemons and tools,
once exploited, might put the device into discoverable mode
again. To prevent this, we could deﬁne a LBM rule as follows:
((bt.hci.type == 1) && /* HCI-CMD */
(bt.hci.command.ogf == 3) && /* Discoverable */
(bt.hci.command.ocf == 58))
This rule detects the HCI command used to enable the
discoverable mode on the device. Once applied to the
TX path, the rule drops any request from the user space
attempting to put
the device into discoverable mode. We
could write a similar rule to enforce non-connectable mode,
which is used to prevent any Bluetooth connection to the
device, even if its MAC address is known beforehand.
Controlling Bluetooth/BLE Connections: Along with the
rise of IoT devices, which often rely on Bluetooth Low Energy
(BLE), Android devices began to support BLE since version
4.3 [8], with iOS adding support from the iPhone 4S forward.
The Linux kernel Bluetooth stack (BlueZ [48]) also supports
both classic Bluetooth and BLE at the same time. Although it
is not uncommon to see a dual-mode device supporting both
classic Bluetooth and BLE, it is surprisingly challenging (if
not impossible) to enable only one of them while disabling the
other. [16] With LBM, enabling/disabling Bluetooth or BLE
connections is just a one-liner:
((bt.hci.conn == 1) && /* A link exists */
(bt.hci.conn.type == 0x80)) /* BLE link */
This LBM rule checks the connection type for each
Bluetooth or BLE packet, and drops the packet
the
connection is BLE, thus preventing unfamiliar IoT devices
from establishing a connection while still allowing classic
Bluetooth connections. It also provides a quick workaround
for BleedingBit attacks [12] without waiting for ﬁrmware
updates. Simply changing == 0x80 to != 0x80 achieves
the opposite effect, only permitting BLE connections and thus
providing a temporary defense against BlueBorne attacks [11].
if
2We assume these trusted input devices do not get unplugged and replugged
very often. Using this ﬁeld solely is also possible, although then we can not
limit the USB packet type to include only keystrokes.
Defending Against BlueBorne: BlueBorne attacks exploit
vulnerabilities within Bluetooth protocol stack implementa-
(cid:26)(cid:24)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
tions, by sending either malformed or specially crafted Blue-
tooth packets. Within the Linux kernel,
this vulnerability
resulted from a missing check before using a local buffer. As
a result, a crafted packet could cause a kernel stack overﬂow,
potentially leading to remote code execution. Although the ﬁx
was a straightforward one, adding the missing checks [68], and
applying patches to existing devices still requires additional
steps of rebuilding the kernel and ﬂashing new ﬁrmware. With
LBM, we can write a simple rule to properly defend against
the potential kernel stack overﬂow:
((bt.l2cap.cid == 0x1) && /* L2CAP Signaling */
/* Configuration Response */
(bt.l2cap.sig.cmd.code == 0x5) &&
(bt.l2cap.sig.cmd.len >= 66))
is 60 bytes.
We ﬁrst pinpoint where the vulnerability was triggered,
which is at the L2CAP layer during conﬁguration response.
Because the local buffer is 64 bytes and the ﬁrst 4 bytes
the actual data buffer to hold
are used for the header,
In the rule above,
conﬁguration options
bt.l2cap.sig.cmd.len denotes the total
length of a
L2CAP command packet. Without counting the 6-byte header,
the actual payload size of a command packet is cmd.len
- 6. To defend against BlueBorne attacks, all we need is
to make sure (cmd.len - 6) < 60. Therefore, our rule,
which is written to drop any conﬁguration response larger
than 66 bytes, will put a stop to BlueBorne. The above two
rules demonstrate that LBM provides a dynamic patching
capability to protocol stacks within the kernel, without
waiting for ofﬁcial kernel patches or ﬁrmware updates to be
upstreamed.
NFC Support: To further show the generality of LBM, we
extend LBM to support NFC. Unlike Bluetooth, NFC has three
different standards (software interfaces) for communicating
with NFC modules, including HCI [28], NCI [59], and Dig-
ital [58]. As a proof-of-concept, we focus on NCI, exposing
two protocol ﬁelds and implementing one BPF helper. The
number of additional lines of code added to the kernel and
LBMTOOL to make LBM support NFC is shown in Table IV.
Step 1: Placing LBM hooks. NCI provides unique interfaces
to cover both TX and RX transmission: nci_send_frame
and nci_recv_frame. As for other networking subsystems,
skb is used to carry NFC packets. We place the following
LBM hooks at the two interfaces:
lbm_filter_pkt(LBM_SUBSYS_INDEX_NFC, LBM_DIR_TX,
(void *)skb);
lbm_filter_pkt(LBM_SUBSYS_INDEX_NFC, LBM_DIR_RX,
(void *)skb);
Step 2: Exposing protocol ﬁelds. We expose the packet
length (nfc.nci.len) and message type (nfc.nci.mt)
ﬁelds to the user space. The packet length is a member of
the struct __lbm_nfc exposed in the LBM user-space
header ﬁle. The message type is implemented as a BPF helper
calling other NCI APIs.
Step 3: Enhancing lbmtool. LBMTOOL is easily extensible
for new protocols, as we do for NFC. The internal LBM-
NFC
Kernel
lbmtool
# of lines
85
12
Total
97
Table IV: The number of lines added to support NFC.
LBM Rule
Purpose
# of Insn
Scope
USB-1
USB-2
USB-3
HCI-1
L2CAP-1
Stack Protection
Stack Protection
User Deﬁned
Stack Protection
Stack Protection
72
25
22
81
76
Micro/Macro BM
Micro/Macro BM
Scalability BM
Micro/Macro BM
Micro/Macro BM
Table V: Details about the ﬁve LBM rules used during the
benchmarks.
Subsystem
USB
Bluetooth-HCI
Bluetooth-L2CAP
Min Max
11.18
0.29
8.87
0.12
17.87
1.16
0.27
15.67
25.87
1.32
0.44
23.76
Avg Med
1.26
1.83
0.55
0.28
2.81
2.70
0.98
0.77
2.93
2.99
1.15
1.26
Dev
0.44
0.33
0.62
0.47
0.67
0.53
Table VI: LBM overhead in μs based on processing 10K
packets on the RX path. For each subsystem, the 1st row is
for normal LBM and the 2nd row is for LBM-JIT. In most
cases, the overhead of is within 1 μs when JIT is enabled.
rule code generation backend is abstracted from the speciﬁc
subsystem the rules will apply to. As such, the only changes
required to support NFC are to include a symbol descriptor
table for each variable exposed to the user space by the kernel.
Once these changes are incorporated, LBMTOOL accepts LBM
ﬁlters with NFC protocol ﬁelds and compiles them into eBPF
instructions.
B. Benchmark Setup
We performed all of our benchmarks on a workstation with
a 4-core Intel i5 CPU running at 3.2 GHz and 8 GB memory.
The peripheral used during testing include a 300 Mbps USB
2.0 WiFi adapter, a Bluetooth 4.0 USB 2.0 adapter, and a
500 GB USB 3.0 external storage device. Depending on the
benchmark, some subset of devices were connected.
We list all the LBM rules used during the benchmarks
in Table V. We deploy all the rules on the RX path, since our
protection target is the host machine. In addition to the “Stack
Protection” rules mentioned in the case studies, we include
“USB-3”, a user deﬁned rule similar to usb.serial == "7777"
which drops the USB packet if the sending device’s serial
number is 7777. As no devices that we test have a serial
number matching this pattern, we mainly use this rule for the
scalability benchmark.
C. Micro-Benchmark
For USB testing, we load LBM rules “USB-1” and “USB-
2” into the system. We then capture 10K USB packets on the
RX path from the WiFi adapter. As shown in the ﬁrst two
rows of Table VI, the average overhead is 1.26 μs per packet.
When JIT is enabled, the overhead is reduced to 0.55 μs.
(cid:26)(cid:24)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:45 UTC from IEEE Xplore.  Restrictions apply. 
s
/
B
M
n
i
t
u
p
h
g
u
o
r
h
T
500
400
300
200
100
0
128KB
1MB
Vanilla
LBM
LBM-JIT
s
m
n
i
T
T
R
5
4
3
2
1
0
Vanilla
LBM
LBM-JIT
Figure 6: filebench across different kernel conﬁgurations.
All conﬁgurations achieve similar throughputs, meaning a
minimum performance impact from LBM.
Figure 7: RTT of l2ping in milliseconds (lower is better)
based on 10K pings, across different kernel conﬁgurations. All
conﬁgurations achieve similar throughputs, meaning a minimal
performance impact from LBM.
For Bluetooth testing, we load LBM rules “HCI-1” and
“L2CAP-1” into the system. We implement a simple L2CAP
client/server protocol based on PyBluez [1] to generate 10K
packets on the RX path for the HCI and L2CAP layers,
respectively. As shown in the last four rows of Table VI, the
average overheads are 2.81 μs for HCI and 2.93 μs for L2CAP.
Again, with the help of JIT, we can reduce the overhead to
around 1 μs.
Takeaway: the general overhead introduced by LBM is
around 1 μs for most cases.
D. Macro-Benchmark
For USB, we load the rules “USB-1” and “USB-2" and use
filebench [50] to measure the throughput of the USB 3.0
external storage device. We chose the “ﬁleserver” workload
model with 10K ﬁles, 128KB and 1MB mean ﬁle sizes, 10
working threads, and 10-min running time. This workload
generates roughly 1GB and 10GBs of ﬁles, respectively,
within the storage device. As shown in Figure 6, all kernel
conﬁgurations achieve similar throughput during our testing.
When the mean ﬁle size is 128KB, the total ﬁle size (1 GB)
can easily ﬁt into the system page cache. Thus, we are able
to achieve close to 500 MB/s throughput (faster than the hard
drive’s maximum speed of 150 MB/s). When the mean ﬁle
size is 1MB, the total ﬁle size (10 GB) cannot completely ﬁt
into the page cache, thus resulting in much lower throughput.
For Bluetooth, we load the rules “HCI-1” and “L2CAP-
1” and use l2ping [49] to benchmark the Round-Trip-Time
(RTT) for 10K pings. As with the USB testing, all kernel
conﬁgurations achieve similar RTTs of around 5 ms, as shown
in Figure 7. Because the overhead of LBM is under 1 μs in
general (Section V-C), the overhead contributed to the RTT
measurement is negligible.
To double-check that LBM introduces a minimal overhead
across the whole system, we use lmbench [55] to benchmark
the whole system across different kernel conﬁgurations. The
complete summary is available in Appendix C. In short, LBM
achieves comparable performance with the vanilla kernel.
s
u
n
i
d
a
e
h
r
e
v
O
30
25
20
15
10
5
0
LBM
LBM-JIT
1