    我们现在可以看到输出的差异:
    ```
    docker run vince/test:version2
    This is Version 2 of our service
    ```
    正如您可能已经想到的，您需要指定`version2`标签来运行代码的修改版本。您可能已经预见到了这一点，但是请记住，如果有多个开发人员将映像推送到一个共享注册表中，这将使跟踪变得更加困难。如果您的团队使用编排并使用`latest`版本，您可能会在整个生产环境中运行混合版本的服务。
这些练习给了你如何使用标签的例子，并向你展示了如果你决定只使用`latest`标签会有什么后果。下一节将介绍标记策略以及如何实现自动化流程。
# Docker 映像标记策略
随着开发团队规模的扩大和他们所从事的项目复杂性的增加，一个标准化的标记策略对您的团队来说变得更加重要。如果您的团队没有得到正确的标记，正如我们在前面的部分中所展示的，这可能会导致很多混乱，实际上还会导致更多的问题。尽早决定标记策略是一个好习惯，以确保您不会遇到任何这些问题。
在本章的这一节中，我们将介绍您可以在团队中使用的一些不同的标记策略，并提供一些如何实现这些策略的示例。在设置您的标记策略时，很少有任何正确或错误的答案，但是有必要尽早做出决定，并确保团队中的每个人都同意。
**语义版本化**是一个版本化系统，也可以作为您的标记策略的一部分。如果你不熟悉语义版本化，它是一个可信的版本系统，使用`major_version.minor_version.patch`格式的三分量编号。例如，如果您将应用的语义版本视为 2.1.0，它会将版本 2 显示为主要版本，将版本 1 显示为次要版本，将版本 0 显示为没有修补程序。语义版本控制很容易自动化，尤其是在自动化构建环境中。另一个选择是使用一个哈希值，就像你的代码的`git commit`哈希值一样。这意味着您可以将标签匹配回您的存储库，这样任何人都可以具体地看到自代码实现以来所做的代码更改。您还可以使用日期值，这也可以很容易地自动化。
这里的共同主题是，我们的标记策略应该是自动化的，以确保它被使用、理解和遵守。在下面的练习中，我们将使用哈希值作为标记策略的一部分，然后我们将创建一个脚本来构建我们的 Docker 映像，并将语义版本添加到我们的标记中。
## 练习 3.07:映像标记自动化
在本练习中，您将看到自动标记映像，以限制标记 Docker 映像所需的个人干预量。本练习再次使用`basic-base`映像:
1.  通过创建以下`Dockerfile` :
    ```
    1 FROM alpine
    2
    3 RUN apk update && apk add wget curl
    ```
    再次创建`basic-base`映像
2.  根据前面的`Dockerfile`构建新的基础映像，并将其命名为`basic-base` :
    ```
    docker build -t basic-base .
    ```
3.  创建`basic-base`映像后，设置名为`Dockerfile_ver1`的`Dockerfile`再次构建`basic-app`。在这种情况下，返回到这里列出的先前的`Dockerfile`:
    ```
    1 FROM basic-base
    2
    3 CMD mkdir -p /var/www/html/
    4
    5 WORKDIR /var/www/html/
    6
    7 ADD Dockerfile.tar.gz /var/www/html/
    8 RUN cat Dockerfile
    ```
4.  If you've been using Git to track and commit the changes in your code, you can tag your images with the commit hash from Git using the `git log` command. So, build your new image, as you normally would, with the `docker build` command, but in this instance, add the tag to provide the short commit hash from `git`:
    ```
    docker build -t basic-app:$(git log -1 --format=%h) .
    ...
    Successfully tagged basic-app:503a2eb
    ```
    注意
    如果您是使用 Git 的新手，它是一个源代码控制应用，允许您跟踪您的更改，并与其他用户在不同的编码项目上进行协作。如果您以前从未使用过 Git，以下命令将初始化您的存储库，将`Dockerfile`添加到存储库中，并提交这些更改，因此我们有一个 Git 日志:
    `git init; git add Dockerfile; git commit –m "initial commit"`
5.  在构建映像时，使用`Dockerfile`添加参数。打开您一直用于您的`basic-app`的`Dockerfile`并添加以下两行以将变量设置为未知，然后使用`git-commit`构建参数将`LABEL`设置为构建时提供的值。您的`Dockerfile`现在应该如下所示:
    ```
    1 FROM basic-base
    2
    3 ARG GIT_COMMIT=unknown
    4 LABEL git-commit=$GIT_COMMIT
    5
    6 CMD mkdir -p /var/www/html/
    7
    8 WORKDIR /var/www/html/
    9
    10 ADD Dockerfile.tar.gz /var/www/html/
    11 RUN cat Dockerfile
    ```
6.  使用带有`GIT_COMMIT`参数的`--build-arg`选项再次构建映像，该参数现在等于您的`git commit`哈希值:
    ```
    docker build -t basic-app --build-arg GIT_COMMIT=$(git log -1 --format=%h) .
    ```
7.  Run the `docker inspect` command searching for the `"git-commit"` label:
    ```
    docker inspect -f '{{index .ContainerConfig.Labels "git-commit"}}' basic-app
    ```
    您可以看到在构建时添加的 Git 哈希标签:
    ```
    503a2eb
    ```
    这开始朝着你需要的方向发展，但是如果你的团队已经决定这是你开发的最佳选择，你需要使用语义版本控制呢？本练习的其余部分将设置一个构建脚本来构建标签并将标签设置为语义版本号。
8.  在你的`Dockerfile`旁边，创建一个简单命名为`VERSION`的版本文件。为这个版本的`basic-app`设置新版本为`1.0.0`:
    ```
    echo "1.0.0" > VERSION
    ```
9.  对`Dockerfile`进行更改，删除之前添加的`GIT_COMMIT`细节，并将`VERSION`文件添加为构建的一部分。将它添加到映像本身意味着，如果用户需要验证映像版本号:
    ```
    1 FROM basic-base
    2
    3 CMD mkdir -p /var/www/html/
    4
    5 WORKDIR /var/www/html/
    6
    7 ADD VERSION /var/www/html/
    8 ADD Dockerfile.tar.gz /var/www/html/
    9 RUN cat Dockerfile
    ```
    ，他们可以随时参考`VERSION`文件
10.  创建一个构建脚本来构建和标记您的映像。调用此`build.sh`，它将驻留在与您的`Dockerfile`和`VERSION`文件相同的目录中:
    ```
    touch build.sh
    ```
11.  在`build.sh`增加以下细节。*第 3 行*将是您的 Docker Hub 用户名，*第 4 行*是您正在构建的映像或服务的名称(在以下示例中为`basic-app`)。然后，脚本从你的`VERSION`文件中抓取版本号，并把你所有的变量放在一起，用一个与你的新语义版本相关的漂亮名字和标签来构建你的映像:
    ```
    1 set -ex
    2
    3 USER=
    4 SERVICENAME=basic-app
    5
    6 version=`cat VERSION`
    7 echo "version: $version"
    8
    9 docker build -t $USER/$SERVICENAME:$version .
    ```
12.  确保使用命令行上的`chmod`命令将构建脚本设置为作为可执行脚本运行:
    ```
    chmod +x build.sh 
    ```
13.  Run the build script from the command line. `set -xe` in *line 1* of the script will make sure all commands are output to the console and ensure that if any of the commands cause an error, the script will stop. Run the build script now, as follows:
    ```
    ./build.sh 
    ```
    这里只显示构建脚本的输出，其余的构建过程照常进行:
    ```
    ++ USERNAME=vincesestodocker
    ++ IMAGE=basic-app
    +++ cat VERSION
    ++ version=1.0.0
    ++ echo 'version: 1.0.0'
    version: 1.0.0
    ++ docker build -t vincesestodocker/basic-app:1.0.0 .
    ```
14.  View the image using the `docker images` command:
    ```
    docker images vincesestodocker/basic-app
    ```
    它应该反映作为构建脚本的一部分创建的名称和标签:
    ```
    REPOSITORY                   TAG    IMAGE ID
      CREATED            SIZE
    vincesestodocker/basic-app   1.0.0  94d0d337a28c
      29 minutes ago     8.8MB
    ```
这个练习在自动化我们的标记过程方面有很大的帮助，它允许`build`脚本被添加到源代码控制中，并作为构建管道的一部分轻松运行。这只是一个开始，您将在本章末尾的活动中看到，我们将进一步扩展这个构建脚本。目前，我们已经完成了关于映像标记和命名的这一部分，它与下一部分非常吻合，下一部分涵盖了存储和发布 Docker 映像。
# 存储和发布您的 Docker 映像
自 Docker 的早期历史以来，它的主要吸引力之一一直是一个中心网站，用户可以在这里下载映像，根据自己的目的重用和改进这些映像，并重新发布它们以授予其他用户访问权限。Docker Hub 已经发展壮大，尽管它存在一些安全问题，但当人们需要为他们的项目提供新的映像或资源时，它通常仍然是人们首先关注的地方。
作为一个公共存储库，Docker Hub 仍然是人们首先去研究和使用映像的地方之一，这些映像是精简或改进他们的新开发项目所需要的。对于公司和开发者来说，这也是一个重要的地方来存放他们的开源映像，供公众使用。但是，Docker Hub 并不是您存储和分发 Docker 映像的唯一解决方案。
对于开发团队来说，Docker Hub 上的公共存储库虽然可访问且高度可用，但可能不是最佳选择。目前，您的团队可能希望将生产映像存储在基于云的注册表解决方案中，例如亚马逊弹性容器注册表、谷歌容器注册表，或者，正如您将在本章后面看到的，另一种选择是设置本地注册表。
在本章的这一部分，我们将从了解如何在机器之间移动映像开始，然后进一步了解如何使用 Docker Hub。我们将看到如何开始将我们的映像作为公开存储的映像移动到 Docker Hub。然后，我们将在您的开发系统上建立一个本地托管的 Docker 注册表。
`docker save`命令将用于从命令行保存映像。这里，我们使用`-o`选项来指定我们要将映像保存到的输出文件和目录:
```
docker save -o  
```
然后，当我们在本章前面创建新的基础映像时，我们将能够使用类似于`import`命令的`load`命令，指定我们之前创建的文件:
```
docker load -i 
```
请记住，并非 Docker Hub 上的所有映像都应该以相同的方式处理，因为它混合了 Docker Inc .创建的官方映像和 Docker 用户创建的社区映像。官方图片仍然是开源图片和解决方案，供您添加到项目中。社区图片通常由希望你利用他们技术的公司或个人提供。
注意
采购映像时要小心，即使是从 Docker Hub 采购。尽量限制从信誉不佳且未经大量用户审查或下载的来源提取映像，因为它们可能会带来潜在的安全风险。
## 练习 3.08:手动传输 Docker 映像
有时，无论网络上的防火墙或其他安全措施是否有问题，您都可能需要将映像直接从一个系统复制到另一个系统。幸运的是，Docker 有一种方法可以实现这一点，在本练习中，您将在不使用注册表的情况下将映像从一个系统移动到另一个系统:
1.  Run the `docker save` command with the `-o` option to save the image you created in the last part of this chapter. The command needs the user to specify both the filename and the directory. In the following example, it is `/tmp/basic-app.tar`. Also specify the user, image name, and tag of the image:
    ```
    docker save -o /tmp/basic-app.tar vincesestodocker/basic-app:1.0.0
    ```
    现在您应该在`/tmp`目录中看到打包的映像。当`save`命令创建映像的 TAR 文件时，您使用`.tar`作为文件名的扩展名。您实际上可以使用任何名称作为文件的扩展名。
2.  使用`du`命令验证`basic-app.tar`文件中是否有数据:
    ```
    du -sh /tmp/basic-app.tar 
    8.9M    /tmp/basic-app.tar
    ```
3.  现在，您可以根据需要移动映像，无论是通过`rsync`、`scp`还是`cp`。由于它是一个 TAR 文件，如果您需要在传输过程中节省一些空间，也可以将该文件压缩为 ZIP 文件。在本例中，您只需从当前系统中删除该映像。使用您刚刚保存的映像的标识运行`docker rmi`命令:
    ```
    docker rmi -f 94d0d337a28c
    ```
4.  Load the new image back as a Docker image using the `docker load` command with the `-i` option, pointing to where the packaged image is located. In this case, it is the `/tmp` directory:
    ```
    docker load -i /tmp/basic-app.tar 
    ```
    您应该得到如下输出:
    ```
    Loaded image: vincesestodocker/basic-app:1.0.0
    ```
5.  Use the `docker image` command to bring up the image you have just loaded into your local environment:
    ```
    docker images vincesestodocker/basic-app
    ```
    您应该得到如下输出: