and leaks sensitive information (e.g., GPS location, IMEI
and IMSI) by leveraging the taint analysis component
in DroidScope. Dynamic taint analysis has been pro-
posed as a key technique for analyzing desktop malware
particularly with respect to information leakage behav-
ior [18, 39]. It is worth noting that DroidScope performs
dynamic taint analysis at the machine code level. With
semantic knowledge at both OS and Java levels, Droid-
Scope is able to detect information leakage in Java com-
ponents, native components, or even collusive Java and
native components.
We have implemented DroidScope to support both
ARM and x86 Android systems. Due to the fact that the
ARM architecture is most widely used for today’s mo-
bile platforms, we focus our discussion on ARM support,
which is also more extensively tested.
4 Semantic View Reconstruction
We discuss our methodology for rebuilding the two lev-
els of semantic views in this section. We ﬁrst discuss how
information about processes, threads, memory mappings
and system calls are rebuilt at runtime. This constitutes
the OS-level view. Then from the memory mapping, we
locate the Dalvik Virtual Machine and further rebuild the
Java or Dalvik-level view.
4.1 Reconstructing the OS-level View
The OS-level view is essential for analyzing native com-
ponents. It also serves a basis for obtaining the Java-level
view for analyzing Java components. The basic tech-
niques for reconstructing the OS-level view have been
well studied for the x86 architecture and are generally
known as virtual machine introspection [16, 21, 24]. We
employ similar techniques in DroidScope. We begin by
ﬁrst describing our changes to the Android emulator to
enable basic instrumentation support.
Basic Instrumentation QEMU is an efﬁcient CPU em-
ulator that uses dynamic binary translation. The normal
execution ﬂow in QEMU is as follows: 1) a basic block
of guest instructions is disassembled and translated into
an intermediate representation called TCG (Tiny Code
Generator); 2) the TCG code block is then compiled
down to a block of host instructions and stored in a
code cache; and 3) control jumps into the translated code
block and guest execution begins. Subsequent execution
of the same guest basic blocks will skip the translation
phase and directly jump into the translated code block in
the cache.
To perform analysis, we need to instrument the trans-
lated code blocks. More speciﬁcally, we insert extra
TCG instructions during the code translation phase, such
that this extra analysis code is executed in the execu-
tion phase. For example.
in order to monitor context
switches, we insert several TCG instructions to call a
helper function whenever the translation table registers
(system control co-processor c2 base0 and c2 base1 in
QEMU) are written to.
With basic instrumentation support, we extract the fol-
lowing OS-level semantic knowledge: system calls, run-
ning processes, including threads, and the memory map.
System Calls A user-level process has to make system
calls to access various system resources and thus obtain-
ing its system call behavior is essential for understanding
malicious Apps. On the ARM architecture, the service
zero instruction svc #0 (also known as swi #0) is used to
make system calls with the system call number in register
R7. This is similar to x86 where the int 0x80 instruction
is used to transition into privileged mode and the system
call number is passed through the eax register.
To obtain the system call information, we instrument
these special instructions, i.e. insert the additional TCG
instructions, to call a callback function that retrieves ad-
ditional information from memory. For important sys-
tem calls (e.g. open, close, read, write, connect, etc.), the
system call parameters and return values are retrieved as
well. As a result, we are able to understand how a user-
level process accesses the ﬁle system and the network,
communicates with another process, and so on.
Processes and Threads From the operating system per-
spective, Android Apps are user-level processes. There-
fore, it is important to know what processes are active
and which one is currently running. In Linux kernel 2.6,
the version used in Gingerbread (Android 2.3), the basic
executable unit is the task which is represented by the
task struct structure. A list of active tasks is main-
tained in a task struct list which is pointed to by
init task. To make this information readily available
to analysis tools, DroidScope maintains a shadow task
4
list with select information about each task.
To distinguish between a thread and a process, we
gather a task’s process identiﬁer pid as well as its thread
group identiﬁer tgid. The pgd (the page global di-
rectory that speciﬁes the memory space of a process),
uid (the unique user ID associated with each App), and
the process’ name are also maintained as part of the
shadow task list. Additionally, our experience has shown
that malware often escalates its privileges or spawns
child process(es) to perform additional duties. Thus,
our shadow task list also contains the task’s credentials,
i.e. uid, gid, euid, egid as well as the process’
parent pid.
Special attention is paid to a task’s name since the
comm ﬁeld in task struct can only store up to 15
characters. This is often insufﬁcient to store the App’s
full name, making it difﬁcult to pinpoint a speciﬁc App.
To address this issue, we also obtain the complete appli-
cation name from the command line cmdline, which
is pointed to by the mm struct structure pointed to by
task struct. Note that the command line is located
in user-space memory, which is not shared like kernel-
space memory where all the other structures and ﬁelds
reside. To retrieve it, we must walk the task’s page table
to translate the virtual address into a physical one and
then read it based on the physical address.
According to the design of the Linux kernel,
the
task struct for the current process can be easily
located. The current thread info structure is al-
ways located at the (stack pointer & 0x1FFF), and
thread info has a pointer pointing to the current
task struct. We iterate through all active tasks by
following the doubly linked task struct list. We
also update our shadow list whenever the base informa-
tion changes. We do this by monitoring four system calls
sys fork, sys execve, sys clone and sys prctl, and updat-
ing the shadow task list when they return.
Memory Map The Dalvik Virtual Machine, libraries
and dex ﬁles are all memory mapped and we rely on the
knowledge of their memory addresses for introspection.
Therefore, it is important to understand the memory map
of an App. This is especially true for the latest version of
Android, Ice Cream Sandwich, since address space lay-
out randomization is enabled by default.
To obtain the memory map of a process, we iterate
through the process’ list of virtual memory areas by fol-
lowing the mmap pointer in the mm struct pointed to
by the task struct. To ensure the freshness of the
memory map information, we intercept the sys mmap2
system call and update the shadow memory map when it
returns.
Figure 3: Dalvik Opcode Emulation Layout in mterp
4.2 Reconstructing the Dalvik View
With the OS-level view and knowledge of how the DVM
operates internally, we are able to reconstruct the Java or
Dalvik view, including Dalvik instructions, the current
machine state, and Java objects. Some of the details are
presented in this section.
Dalvik Instructions The DVM’s main task is to exe-
cute Dalvik bytecode instructions by translating them
into corresponding executable machine code. In Ginger-
bread and thereafter, it does so in two ways: interpreta-
tion and Just-In-Time compilation (JIT) [8].
The interpreter, named mterp, uses an offset-
addressing method to map Dalvik opcodes to machine
code blocks as shown in Figure 3. Each opcode has 64
bytes of memory to store the corresponding emulation
code, and any emulation code that does not ﬁt within the
64 bytes use an overﬂow area, dvmAsmSisterStart,
(see instance-of in Figure 3). This design simpli-
ﬁes the emulation of Dalvik instructions. mterp simply
calculates the offset, opcode∗ 64, and jumps to the cor-
responding emulation block.
This design also simpliﬁes the reverse conversion from
native to Dalvik instructions as well: when the pro-
gram counter (R15) points to any of these code re-
gions, we are sure that the DVM is interpreting a byte-
code instruction. Furthermore, it is trivial to determine
the opcode of the currently executing Dalvik instruc-
tion.
In DroidScope we ﬁrst identify the virtual ad-
dress of rIBase, the beginning of the emulation code re-
gion, and then calculate the opcode using the formula
(R15 − rIBase)/64.
rIBase is dynamically calculated
as the virtual address of libdvm.so (obtained from the
shadow memory map in the OS-level view) plus the off-
set of dvmAsmInstructionStart (a debug sym-
bol). If the debug symbol is not available, we can identify
it using the signature for Dalvik opcode number 0 (nop).
5
  rIBase:dvmAsmInstructionStartarray-lengthinstance-ofmove/from16movenopldrhr7, [r4, #2]!andip, r7, #255addpc, r8, ip, lsl #6push{r4,r5,r6,r7,r8,r9,sl,fp,lr}subsp, sp, #4..nopnopnoplsrr3, r7, #12lsrr9, r7, #8ldrr0, [r5, r3, lsl #2]andr9, r9, #15cmpr0, #0..cmpr0, r1beqbOpcode * 0x40  0x00x400x800x8000x840Figure 4: High Level Flowchart of mterp and JIT
Figure 5: Dalvik Virtual Machine State
The Just-In-Time compiler was introduced to improve
performance by compiling heavily used, or hot, Dalvik
instruction traces (consisting of multiple code blocks) di-
rectly into native machine code. While each translation
trace has a single entry point, there can be multiple ex-
its known as chaining cells. These chaining cells either
chain to other translation traces or to default entry points
of the mterp interpreter. Overall, JIT provides an excel-
lent performance boost for programs that contain many
hot code regions, although it makes ﬁne-grained instru-
mentation more difﬁcult. This is because JIT performs
optimization on one or more Dalvik code blocks and thus
blurs the Dalvik instruction boundaries.
An easy solution would be to completely disable JIT
at build time, but it could incur a heavy performance
penalty and more importantly it require changes to the
virtual device, which we want to avoid. Considering
that we are often only interested in a particular section
of Dalvik bytecode (such as the main program but not
the rest of system libraries), we choose to selectively dis-
able JIT at runtime. Analysis plugins can specify the
code regions for which to disable JIT and as a result only
the Dalvik blocks being analyzed incur the performance
penalty. All other regions and Apps still beneﬁt from
JIT.
Figure 4 shows the general ﬂow of the DVM. When
a basic block of Dalvik bytecode needs to be emulated,
the Dalvik program counter is updated to reﬂect the new
block’s address. That address is then checked against
the translation cache to determine if a translated trace for
the block already exists. If it does, the trace is executed.
If it does not then the proﬁler will decrement a counter
for that block. When this counter reaches 0, the block
is considered hot and a JIT compilation requested. To
prevent thrashing, the counter is reset to a higher value
and emulation using mterp commences. As can be seen
in the ﬂow chart, as long as the requested code is not in
the code cache, then mterp will be used to emulate the
code.
The dvmGetCodeAddr function is used to deter-
mine whether a translated trace exists. It returns NULL
if a trace does not exist and the address of the corre-
sponding trace if it does. Thus, to selectively disable
JIT, we instrument the DVM and set the return value of
dvmGetCodeAddr to NULL for any translated trace we
wish to disable. To show that our change to the virtual
machine state does not have any ill side-effects, we make
the following arguments. First, if the original return
value was NULL then our change will not have any side
effects. Second, if the return value was a valid address,
then by setting it to NULL, the proﬁle counter is decre-
mented and if 0, i.e. the code region deemed hot again,
another compilation request is issued for the block. In
this case, the code will be recompiled taking up space in
the code-cache. This can be prevented by not instrument-
ing the dvmGetCodeAddr call from the compiler.
In addition to preventing the translated trace from be-
ing executed, setting the value to NULL also prevents it
from being chained to other traces. This is the desired
behavior. For the special case where a translation trace
has already been chained and thus dvmGetCodeAddr
is not called, we ﬂush the JIT cache whenever the dis-
abled JIT’ed code regions change. This is done by mark-
ing the JIT cache as full during the next garbage collec-
tion event, which leads to a cache ﬂush. While this is not
a perfect solution, we have found it to be sufﬁcient.
In all cases, the only side effect is wasted CPU cy-
cles due to compilation; the execution logic is unaffected.
Therefore, the side effects are deemed inconsequential.
DVM State Figure 5 illustrates how the DVM main-
tains the virtual machine state. When mterp is emulating
Dalvik instructions, the ARM registers R4 through R8
store the current DVM execution context. More speciﬁ-
cally, R4 is the Dalvik program counter, pointing to the
current Dalvik instruction. R5 is the Dalvik stack frame
pointer, pointing to the beginning of the current stack
6
Update Program Counter(PC)Is Code in JIT code cache?Execute JIT code blockEmulate Code Using mterpYesNoDecrement block CounterIs Counter 0?Request JIT Compilation forCode block and reset CounterYesNoV4 (In 2)V3 (In 1)V2 (In 0)V1V0R0:R1:R2:R3:R4: rPCR5: rFPR6: rGLUER7: rINSTR8: rIBASER9:R10:R11:R12:R13:R14:R15: PC+4framework.jar@classes.dexmterpInterpStateInterpState{  …  Jvalue retval;  ...  Thread* self;  …}android.app.ContextImpl.SharedPreferencesImpl.getInt:(Ljava/lang/String;I)I:libdvm.soStringInteger“this”Stack growslow addresshas a pointer to the ClassObject that it is an instance
of plus a tail accumulator array for storing all member
ﬁelds. Dalvik deﬁnes three types of Objects, DataOb-
ject, StringObject and ArrayObject that are all pointed to
by generic Object*s. The correct interpretation of any
Object* fully depends on the ClassObject that it points
to.
We use a simple String (”Hello”) to illustrate the
interpretation process. Figure 6 depicts the different
data structures involved as well as the struct deﬁni-
tions on top. To access the String, we ﬁrst follow the
reference in the virtual register V3. Since Java ref-
erences are simply Object*s, V3 points to an Ob-
ject. To determine the type of the object, we follow
the ﬁrst 4 bytes to the ClassObject structure. This Clas-
sObject instance describes the java.lang.String
class. Internally, Dalvik does not store the String data
inside the StringObject and instead use a char[].
Consequently, instanceData[0] is used to store
the reference to the corresponding char[] object and
instanceData[3] is used to store the number of
characters in the String, 5 in this case.
We then obtain the String’s data by following
instanceData[0] to the character array. Once again
we must follow the Object* within the new object to
correctly interpret it as an ArrayObject. Note that since
ARM EABI requires all arrays to be aligned to its ele-
ment size and u8 is 8 bytes in length, we inserted an im-
plicit 4 byte align pad into the ArrayObject to ensure
that the contents array is properly aligned. Given the
length of the String from the StringObject and the cor-
roborating length in the ArrayObject, the ”Hello” String
is found in the contents array encoded in UTF-16.
4.3 Symbol Information
Symbols (such as function name, class name, ﬁeld name,
etc.) provide valuable information for human analysts to
understand program execution. Thus, DroidScope seeks
to make the symbols readily available by maintaining a
symbol database. For portability and ASLR support, we
use one database of offsets to symbols per module. At