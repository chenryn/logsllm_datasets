可扩展性测试解释了当我们添加更多服务器或服务时，延迟和吞吐量是如何变化的。完美的特性是线性的，这意味着如果我们有一台服务器，当 100 个并行用户使用时，平均请求-响应时间为 500 毫秒，那么添加另一台服务器将保持响应时间不变，并允许我们再添加 100 个并行用户。实际上，由于保持服务器之间的数据一致性，通常很难实现 thsi。
可伸缩性测试应该是自动化的，并且应该提供表示机器数量和并发用户数量之间关系的图表。这样的数据有助于确定系统的极限，以及增加更多机器没有帮助的点。
可伸缩性测试，类似于压力测试，很难放入持续交付管道中，应该分开进行。
# 耐久性测试
耐久性测试，也称为寿命测试，长时间运行系统，查看某段时间后性能是否下降。它们检测内存泄漏和稳定性问题。因为它们需要一个长时间运行的系统，所以在持续交付管道中运行它们是没有意义的。
# 安全测试
安全测试处理与安全机制和数据保护相关的不同方面。一些安全方面是纯粹的功能需求，例如身份验证、授权或角色分配。在验收测试阶段，这些部件的检查方法应与任何其他功能要求相同。还有其他非功能性的安全方面；例如，应该保护该系统免受 SQL 注入的攻击。没有客户可能会指定这样的要求，但这是隐含的。
安全测试应作为管道阶段包含在持续交付中。它们可以使用与验收测试相同的框架编写，也可以使用专用的安全测试框架编写，例如 BDD 安全。
Security should also always be a part the explanatory testing process, in which testers and security experts detect security holes and add new testing scenarios.
# 可维护性测试
可维护性测试解释了系统维护有多简单。换句话说，他们判断代码质量。在提交阶段，我们已经有了检查测试覆盖率和执行静态代码分析的相关阶段。声纳工具也可以给出一些代码质量和技术债务的概述。
# 恢复测试
恢复测试是一种确定系统在因软件或硬件故障而崩溃后恢复速度的技术。最好的情况是，即使部分服务中断，系统也不会出现故障。一些公司甚至故意生产失败，以检查他们是否能在灾难中幸存下来。最著名的例子是网飞和他们的混沌猴子工具，它随机终止生产环境的随机实例。这种方法迫使工程师编写代码，使系统能够抵御故障。
恢复测试显然不是持续交付流程的一部分，而是检查整体运行状况的定期事件。
You can read more about Chaos Monkey at [https://github.com/Netflix/chaosmonkey](https://github.com/Netflix/chaosmonkey).
还有许多非功能测试类型，它们更接近或更远离代码和持续交付过程。其中一些与法律有关，如合规性测试；其他与文档或国际化相关。还有可用性测试和容量测试(检查系统在大量数据的情况下是否表现良好)。然而，这些测试中的大多数都不属于持续交付过程。
# 非功能性挑战
非功能方面对软件开发和交付提出了新的挑战:
*   **长时间测试运行**:测试可能需要很长时间运行，可能需要特殊的执行环境。
*   **递增性质**:当测试失败时很难设置限值(除非 SLA 定义明确)。即使设置了边缘限制，应用也可能会逐渐接近该限制。实际上，在大多数情况下，没有一个代码更改导致测试失败。
*   **模糊需求**:用户通常没有太多关于非功能需求的输入。它们可以提供一些关于请求-响应时间或用户数量的指导方针；然而，他们可能不太了解可维护性、安全性或可伸缩性。
*   **多样性**:有很多不同的非功能测试，选择应该实现哪个需要做一些妥协。
解决非功能方面的最佳方法是采取以下步骤:
1.  列出所有非功能测试类型。
2.  明确划掉系统不需要的测试。不需要一种测试的原因可能有很多，例如:
    *   服务非常小，简单的性能测试就足够了
    *   该系统仅为内部系统，仅可用于只读，因此可能不需要任何安全检查
    *   该系统只为一台机器设计，不需要任何扩展
    *   创建某些测试的成本太高
3.  将您的测试分成两组:
    *   **持续交付**:可以添加到管道中
    *   **分析**:由于其执行时间、性质或相关成本，不可能添加到管道中
4.  对于持续交付组，实施相关的管道阶段。
5.  对于分析组:
    *   创建自动化测试
    *   计划运行它们的时间
    *   安排会议讨论结果并采取行动要点
A very good approach is to have a nightly build with the long tests that don't fit the Continuous Delivery pipeline. Then, it's possible to schedule a weekly meeting to monitor and analyze the trends of system performance.
如前所述，有许多类型的非功能测试，它们给交付过程带来了额外的挑战。然而，为了我们系统的稳定性，这些测试永远不应该被茫然地跳过。技术实现因测试类型而异，但在大多数情况下，它们可以以类似于功能验收测试的方式实现，并且应该针对试运行环境运行。
If you're interested in the topic of nonfunctional testing, system properties, and system stability, then read the book *Release It!* by *Michael T. Nygard*.
# 应用版本控制
到目前为止，在每次 Jenkins 构建期间，我们都创建了一个新的 Docker 映像，将其推入 Docker 注册表，并在整个过程中使用了最新的**版本。然而，这种解决方案至少有三个缺点:**
 ***   如果在 Jenkins 构建期间，在验收测试之后，有人推出了映像的新版本，那么我们最终可以发布未经测试的版本
*   我们总是推一个同名的形象；因此，如此有效地，它在 Docker 注册表中被覆盖
*   仅仅通过散列样式的标识来管理没有版本的映像是非常困难的
与持续交付流程一起管理 Docker 映像版本的推荐方式是什么？在本节中，我们将看到不同的版本控制策略，并了解在 Jenkins 管道中创建版本的不同方式。
# 版本控制策略
有不同的方法来版本化应用。
让我们讨论这些最流行的解决方案，它们可以与持续交付过程一起应用(当每个提交创建一个新版本时)。
*   **语义版本化**:最流行的解决方案是使用基于序列的标识符(通常是 x.y.z 的形式)。这个方法需要 Jenkins 提交到存储库，以便增加当前版本号，该版本号通常存储在构建文件中。这个解决方案得到了 Maven、Gradle 和其他构建工具的很好支持。标识符通常由三个数字组成:
    *   **x** :这是大版本；当这个版本增加时，软件不需要向后兼容
    *   **y** :这是小版本；当版本增加时，软件需要向后兼容
    *   **z:** 这是构建号；这有时也被认为是向后和向前兼容的变化
*   **时间戳**:为应用版本使用构建的日期和时间没有序列号冗长，但是在持续交付过程的情况下非常方便，因为它不需要 Jenkins 提交回存储库。
*   **哈希**:随机生成的哈希版本分享了日期时间的好处，可能是最简单的解决方案。缺点是不可能看两个版本就知道哪个是最新的。
*   **混合**:前面描述的解决方案有很多变体，例如日期时间的主要和次要版本。
所有解决方案都可以用于持续交付流程。然而，语义版本化需要从构建执行到存储库的提交，因此在源代码存储库中版本会增加。
Maven (and the other build tools) popularized version snapshotting, which added a suffix SNAPSHOT to the versions that are not released, but kept just for the development process. Since Continuous Delivery means releasing every change, there are no snapshots.
# Jenkins 管道中的版本控制
如前所述，使用软件版本控制有不同的可能性，每种可能性都可以在 Jenkins 中实现。
例如，让我们使用日期时间。
In order to use the timestamp information from Jenkins, you need to install the Build Timestamp Plugin and set the timestamp format in the Jenkins configuration (for example, to "yyyyMMdd-HHmm").
在我们使用 Docker 映像的每个地方，都需要添加标签后缀:`${BUILD_TIMESTAMP}`。
例如`Docker build`阶段应该是这样的:
```
sh "docker build -t leszko/calculator:${BUILD_TIMESTAMP} ."
```
更改之后，当我们运行 Jenkins 构建时，我们应该在 Docker 注册表中用时间戳版本标记映像。
Note that after explicitly tagging the image, it's no longer implicitly tagged as the latest.
随着版本控制的完成，我们终于准备好完成持续交付管道。
# 完整的持续交付管道
在讨论了 Ansible、环境、非功能测试和版本控制的所有方面之后，我们准备扩展 Jenkins 管道，并最终确定一个简单但完整的持续交付管道。
我们将按如下步骤进行:
*   创建登台和生产环境的清单
*   更新验收测试以使用远程主机(而不是本地主机)
*   将应用发布到生产环境中
*   添加烟雾测试，确保应用成功发布
# 库存
在最简单的形式中，我们可以有两个环境:暂存和生产，每个环境都有一台 Docker 主机。在现实生活中，如果我们希望服务器位于不同的位置或有不同的要求，我们可能希望为每个环境添加更多的主机组。
让我们创建两个可翻译的清单文件。从登台开始，我们可以定义`inventory/staging`文件。假设登台地址是`192.168.0.241`，它会有以下内容:
```
[webservers]
web1 ansible_host=192.168.0.241 ansible_user=admin
```
以此类推，如果生产 IP 地址是`192.168.0.242`，那么`inventory/production`应该是这样的:
```
[webservers]
web2 ansible_host=192.168.0.242 ansible_user=admin
```
It may look oversimplified to have just one machine for each environment; however, using Docker Swarm (which we show later in this book), a cluster of hosts can be hidden behind one Docker host.
定义了清单后，我们可以更改验收测试来使用试运行环境。