有充分的行之有效的测试方法。我们在流程的开始部分加进了一些
审查，改变了选代日程，也对我们组的碰头会的形式进行了修改。
也许到了我该告诉你们阶段测试的时候了。
[1]我今年到现在为止读到的最好的测试书籍是Nassim
Taleb（RandomHouse出版）写的《黑天鹅》。我的这个比喻也来自
于此书。当然他的比喻借助于DavidHume，其比喻义来自于古希腊
的故事...
拼图中的最后一块
一旦通过候选测试，代码就会离开测试组被放到内部阶段环境中。
我们利用自已的软件——排演版wiki，真正去运行我们的业务。[]
我们用它来起草项目计划，跟踪迭代，进行质量跟踪，起草博客和
沟通用的故事。通过这个步骤，排演环境成为产品在投入生产前查
找缺陷的最后一环。有时我们的雇员还真能找到缺陷，但找到更多
的是单元测试或功能测试没有检查出来的使用问题或执行问题。
整个测试拼图包括功能测试、wikitests、运行测试计划、探索性测
试，也包括从阶段环境、使用环境、故事评审、外部测试版程序、
日志和日志评估，以及偶尔的执行调研中得到反馈。如果我们要将
所有的事情都做得完美无缺，我们的测试组估计要扩大若干倍，令
2061
---
## Page 2063
我们的公司无法生存，或令我们的组员很快被拖跨。与此相反，我
们会问多少是足够的和舍弃什么为妙。
我们的目的不是想要知道软件可以做什么，而是对软件是否可以达
到想要达到的目的做出一个快速评估。有儿个关键的问题值得考
虑：“现在我应该做什么？”和“我做完了吗？”
再一次，这些问题被我看作是哲学的问题，也是美学问题。我可以
断定看起来最美的拼图组合最有可能是正确的拼图。[②我会不情愿
地说这样的推测叫做“测试架构”。看来永恒的软件工程经典书籍
《MythicalMan-Month》（Addison-Wesley出版）的作者——Fred
Brooks会同意我的这一想法。在2007年度的OOPSLA（面向对象软件
大会）上他定义了架构的双重角色：
1.首先要作为用户的拥护者。
2.为此，要对整个产品有一个彻底的了解。
在自组织、自我管理的时代，我发现命令与控制并且由设计者包办
的大一统的架构已经显得有些老古董了。尽管如此，拥护用户和理
解产品还是不可或缺的工作。工作时可以站在比开发者更高的层
面，并且目标明确地去寻找并修正软件中的缺陷，我真的认为测试
团队以最有可能的方式，是有能力作为产品架构者为整个团队服务
的。换句话说，我们测试软件，并且完成拼图，创造出能够令用户
满意并为之欢欣鼓舞的产品。
用我们的智慧和技能来满足用户需求......很令人兴奋。
不知不觉，我脑海中出现了我以前的数学教授HomerAustin博士微笑
的样子。
[11我们在产品中保留了一部分销售和应付款功能，并且也通过了排
演中的“最终测试床”。难道你不会这样做吗？
[2]这是奥卡姆剃刀原理（OccamsRazor）的重新叙述。
[3]非常不情愿，因为比喻经常区分思想家和行动家。我认为这样的
区分是有风险的。
致谢
2062
---
## Page 2064
当然我要感谢Salisbury大学的教授们和GrandValley大学的Roger
Ferguson博士及PaulJorgensen博士，因为是他们激发了我对测试的兴
趣，PaulLeidig博士激励了我写作。ChrisMcMahon引导我进入了
Socialtext，也要感谢KenPier、LukeCloss和其他的Socialtext团队的
队友们在我被雇用之前就已经开始了测试流程。能与他们在一起工
作我感到很荣幸。（Ken也为这一章提供了很多重要的、富有洞察力
的同行评审）。StevePoling，作为我的朋友和技术伙伴，很早以前
就一直鼓励我写一些这样的内容。
也感谢我的妻子和孩子们，感谢他们给了我莫大的鼓励、支持和理
解。
第17章高效测试之美AdamGoucher
在我上中学的时候，时常有人会说我做事慢吞吞的。我总会努力地
工作当中一直努力追求高效的测试方法的潜在原因吧。
随着我经历各式各样的软件部门，以及多年工作经验的累积和我在
公司内级别的提开，我的态度也逐渐从单纯地考虑如何测试产品的
质量变为如何“快速”地权衡产品的质量。虽然项目管理部门非常关
注产品质量，但很多情况下他们更关注我或者我的测试团队是否能
以最快的速度告诉他们我们的产品可以发布了。
在这一章，我会与各位分享三种帮助我进行高效测试的方法：
SLIME、脚本以及思维导图。
SLIME
SLIME（Security,Languages,requlrements,Measurement，Existing，安全
语言、必要性、度量、一致性）是一种测试的顺序。通常我会按照
这样的顺序来测试一个新程序或某产品模块。该方法最大的优点在
于可以系统地、有条理地对产品进行测试并且尽量避免产生重复的
工作。（当然，第二个优点也许是你可以酷酷地和你的老板说：我
正在用SLIME方法测试程序！）
安全
2063
---
## Page 2065
我认为软件测试首先要考虑的问题是安全性测试。用户数据的丢失
是多么糟糕的事情！况且很多情况下用户本身并不知道信息在无意
中已经丢失了。安全性测试必须最早考虑，因为安全性的设计是贯
穿在整个产品的架构之中的。换言之，如果架构上有所改变，你儿
乎要重新测试所有的东西。例如，你一旦发现数据库权限设置有问
题，你就不得不重新测试几乎所有与数据库交互有关的测试用例。
或者，一旦程序与操作系统的交互存在安全方面的问题，所有与操
作系统交互有关的测试用例必须重新测试。
安全性对于应用程序的测试来说是儿乎会影响到每一个测试领域
的。你最好不要认为某一个安全测试用例只需要覆盖到应用程序的
部分功能。相反，安全性的测试最好能涉及整个应用程序。目前我
还无法自谢是一个安全方面的专家，因此下文并不是为你提供一个
完全的、非常详细的能够检测出所有应用程序漏洞的方案。偏若你
的环境需要非常深入的安全测试，例如你的程序中涉及财务等敏感
信息，我建议你能够邀请那些专业从事安全研究的信息安全人员提
供高级全面的解决方案。在这里我能给你提供的是一些比较适中的
能够让你的程序在安全性方面不至于漏洞百出的测试用例。在互联
网的应用程序中，我首先会考虑以下儿个方面：
跨站脚本（Cross-site scripting）[1]
当进行跨站脚本的测试时，我首先会寻找所有客户端往Web端应用
程序提交数据的那些接口。永远不要相信客户端对服务器提交的数
据！在进行数据库操作和处理服务端指令之前，所有提交的数据必
须在服务端进行校验。尽量使用编码去解析提交的数据。有些情况
下，你需要在服务端动态生成HTML、JavaScript、CSS等文件，这时
候你最好使用百名单而非黑名单来过滤内容，因为允许什么东西能
被记录永远比禁止什么东西能被记录安全得多。
SQL注入（SQLInjection）[2]
SQL注人也是一种由客户端信任所产生的问题。直接将用户所提供
的原始数据对服务端数据库进行操作是一个致命的错误。我通常会
通过两种方法解决这个问题：其一是手动将前端操作会调用到的数
据库操作全部用代码来实现，这样可以避免用户在客户端提交到服
务器并生成数据库操作语句；其二是用脚本对所有的数据库操作语
句中的非法文字进行过滤。事实上SQL注入已经有了一个众所周知
2064
---
## Page 2066
的解决办法：参数化SQL语句或强制转义。因此代码上的检测是一
个避免此类问题的高效的测试方法。
越权访问
当一个用户被授予某个安全权限的时候，他是否可以进行相应的操
作？如果可以，他是否只被允许这一安全级别的操作？
信息泄露
是否用户可以访问、查看、修改他并没有被授权的数据？设想一个
多租户（Multitenant）系统，可口可乐和百事可乐公司都是这一系统
的客户。显然，可口可乐公司的员工不应该允许查看百事公司的企
业信息，反之亦然。
语言
第二个测试的重点是对语言支持进行测试。之前我所带领的小组测
试了一个可以支持多国语言的产品，最后这个产品几乎没有产生任
何程序崩溃的问题。总结当时的经验，我认为语言测试最好能在对
产品进行第一轮测试的时候就应该被关注起来。此外，语言的处理
在程序逻辑中是比较基础的，因为文本数据几乎贯穿在整个产品的
流程之中。我认为成功的语言测试需要符合以下条件：
1.允许用户输入任何语言的字符。
2.能够存储这些字符。
3.内部处理这些字符。
4.检索这些字符。
5.显示这些字符。
这些条件看似苛刻，但实际上语言测试并不是非常复杂的。
在Windows中，你可以运行Charmap来显示所有在操作系统上已经安
装的字符集。如果你安装了很多Unicode的字体，你就可以试着将那
些你觉得比较有趣的字符复制粘贴到你的程序中去。在OSX中，字
符键盘（character palette）（在系统设置的国际化设置中）提供了类
2065
---
## Page 2067
似的功能。在你这样操作的时候，关键并不是你选择了什么样的测
试数据，而是关注这些数据在应用程序流程上是如何被处理的。
在语言支持方面你还需要注意的一点是：在你的程序中，字符是否
均被编码为Unicode。要测试这一点，你可以做两个快速的检查：
1）检查当用浏览器浏览网站时，选择的默认语言是否是Unicode。
2）检查数据库中存储文字的表中，字符是否是Unicode。
必要性
请不要介意我没有用必要性（Requirements）这个英文单词的首字
母，我只是为了构成SLIME这个容易记住的单词。这一阶段的测试
是考虑产品中由于模块的新增而必须引入的测试。当测试人员开始
考虑测试的时候，通常他们会直接进入到这一环节。
必要性测试是指那些新增加的、之前从来没有测试过的部分。如果
你的产品在新版本中要增加一个新的功能一—“密码重置”，那么这
就是必须要测试的部分。而不是对那些已经存在的与密码相关的代
码进行（直接的和有针对性的）测试。通常开发小组都是比较小心
的，他们都会测试那些新代码，并开发一系列的单元测试来避免因
为他们新增加的代码导致产品其他部分出现问题。当我们在这一环
节忽略那些对于这些新增功能进行的回归测试时，开发人员的敬业
至少可以让我们感觉稍好一些。
在任何情况下，修改一段代码总会有引入问题的可能，或者暴露一
个以前所潜在的问题。特别是当这一改变是设计一个新产品功能的
时候，问题出现的概率将大大增加。
度量
到目前为止，对于产品功能是否像我们设想的那样正常工作，我们
已经有了相当的自信。现在我们需要测试的是产品是否在合理的但
比较苛刻的限制下仍正常工作。
在度量测试方面有许多的优秀的分类方法。我个人是这样定义的：
Load（负载）
2066
---
## Page 2068
持续使用受限的资源（CPU、内存、网络带宽等）直至系统瘫痪的
问题出现。接着修复这一瘫痪的问题并反复使用受限资源进行系统
初始化。直到产品能稳定地在受限的资源下正常运行。
Performance（性能）