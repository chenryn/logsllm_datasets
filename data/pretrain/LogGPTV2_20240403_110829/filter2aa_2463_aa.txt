Windows GDI Local Kernel Memory Overwrite 
Vulnerability researched and exploit developed by 
Joel Eriksson 
About the bug 
The Graphics Device Interface, GDI, is part of the Win32-subsystem and is responsible for displaying 
graphics on devices such as video displays as well as printers. 
Basic information about all GDI objects on the system are stored in a shared memory section named 
GdiSharedHandleTable. This table is automatically mapped read-only into every GUI-process on the 
system and its contents are only updated by the kernel. 
Well, that is how it was supposed to be anyway. If one is able to determine the handle to the 
GdiSharedHandleTable shared memory section, it is possible to make an alternate mapping with full 
read-write access. Being able to write to data which only the kernel is supposed to write to can never be 
a good thing, depending on ones perspective of course. 
This bug was found and reported to Microsoft by Cesar Cerrudo from Argeniss over two and a half 
years ago now (2004-10-22), but was not made public until the “Month of Kernel Bugs” project [1] in 
November 2006. Windows 2003 and Vista is not vulnerable, but all releases of Windows 2000 and XP 
were, until a couple of weeks after our talk at BlackHat Europe when a patch was released. ;) 
When Cesar made the bug public, he made a PoC exploit available for crashing the system by filling 
the entire table with 0x58-chars. I expected a real exploit for the bug to be released shortly afterwards, 
but time went by and neither an exploit nor a patch was released. In January I decided to give it a try 
myself. 
By this time I had no idea whether it was even possible to reliably exploit this vulnerability, since it 
was far from obvious judging from the PoC exploit and the crash it produced due to a read from NULL 
pointer. 
Reliably determining the GDI section handle 
The first problem I faced was to come up with a reliable way for determining the handle to the shared 
memory section. The PoC exploit bruteforced the handle and assumed that the first valid handle it 
found was to the GDI section, which was far from a safe assumption and actually wasn’t the case on 
any of the systems I tested it on initially. 
To come up with a more reliable method I first had to learn more about the contents of 
GdiSharedHandleTable. After googling around and learning more about GDI in general, reading 
various MSDN-articles [2] and other resources I could find I learned that GdiSharedHandleTable is an 
array of these structs: 
typedef struct { 
    DWORD pKernelInfo; // Pointer to kernelspace GDI object data 
    WORD ProcessID; 
// Process ID 
    WORD _nCount;  
// Reference count? 
    WORD nUpper;  
// Upper 16 bits of GDI object handle 
    WORD nType; 
// GDI object type ID 
    DWORD pUserInfo; 
// Pointer to userspace GDI object data 
} GDITableEntry;
The GdiSharedHandleTable array contains 0x4000 entries in Windows 2000 and 0x10000 entries in 
Windows XP. Since each entry occupies 16 bytes, the size of the GDI shared memory section is at least 
0x40000 or 0x100000 bytes in Windows 2000 and Windows XP respectively. 
Just checking that the size of memory section is at least 0x40000 / 0x100000 bytes large is actually 
often enough for reliably finding the GDI section, but not reliable enough for my taste. By examining 
the contents of the GDI table entries I should be able to determine whether I’ve really found the GDI 
table. 
During my googling-session I had learned that a handle to a GDI object actually consisted of a 16-bits 
index into GdiSharedHandleTable, in the lower 16 bits, combined with a random 16-bit value, in the 
upper 16 bits, that should match the nUpper-field of the GDI table entry. 
By creating a GDI object (like a window for instance, not necessarily a visible one though) I could 
sanity check each potential GDI section mapping by verifying that the nUpper-, ProcessID- and nType-
fields for the GDI object I had created have the expected values. 
Selected parts of the code I made for finding the GDI section: 
hWnd = CreateWindow(0,0,0,0,0,0,0,0,0,0,0); 
hDC  = GetDC(hWnd); 
wIdx = (WORD) (((DWORD) hDC) & 0xffff); 
wUpr = (WORD) (((DWORD) hDC) >> 16); 
nPID = GetCurrentProcessId();    
... 
for (hMap = (HANDLE) 0; hMap  
 FakeKernelObj[2] = 1 
 FakeKernelObj[9] =  
 Call syscall NtGdiDeleteObjectApp() 
 Boom! 0x00000002 is written to  
Determining where to write 
At this point the only remaining step is to find a suitable function pointer to overwrite. While there 
probably are many function pointers in the kernel that potentially could be used, we specifically need to 
find one which fulfills these conditions: 
• It should be possible to reliably determine its address 
• It should be called in the context of our exploit process 
• It should be rarely used, specifically it must not be used during the time between us overwriting 
it and us triggering a call to it within the context of our exploit (which would lead to a BSoD) 
The obvious choice is to overwrite the syscall pointer for a rarely used system call. Triggering a call to 
it is then just a matter of triggering the 0x2E interrupt with EAX being set to the syscall number. If we 
need to pass arguments to the syscall we can pass a pointer to them in the EDX register. Here is code 
for doing it in with GCC/MinGW: 
DWORD DoSysCall(DWORD dwSysCall, PDWORD pdwArgs) 
{ 
    __asm__( 
        “mov   %0,%%eax\n\t” 
        “mov   %1,%%edx\n\t” 
        “int   $0x2e\n\t” 
        “add   $4,%%esp\n\t” 
        : 
        : “m”(pdwArgs), “m”(dwSysCall) 
        : “eax”, “edx” 
    ); 
} 
So, where are the syscall pointers stored and how can we determine the address to them? Well, there 
are actually two kinds of syscalls, which are stored in two separate tables. First there is the native NT 
API provided by the core kernel NTOSKRNL.EXE, with its syscall pointers being stored in a table 
named KiServiceTable. Then there are the syscalls for the Win32 subsystem, which includes the GDI 
related syscalls. These are stored in a table in WIN32K.SYS which is called W32pServiceTable. 
My first choice was using a pointer in KiServiceTable, which was quite convenient since there are 
documented ways to determine its address. Specifically, I used a method posted to the rootkit.com 
message board under the pseudonym 90210 [5] which should be very reliable. 
This worked like a charm for Windows XP SP2 and Windows 2000, but then mysteriously failed and 
caused a BSoD for Windows XP SP1. When checking it out with WinDbg I was surprised to see that it 
crashed on the write to the syscall pointer. Turns out KiServiceTable actually resides in the read-only 
text segment of NTOSKRNL but no Windows release (of the ones I tested) except XP SP1 actually 
enforces read-only kernel pages. 
To my surprise, W32pServiceTable resided in the writable data segment of WIN32K.SYS and not its 
read-only text segment. This was perfect for our purposes, but unlike for KiServiceTable I did not 
know a reliable way to determine its address. It is not an exported symbol. 
My first idea was searching for at least 600 consecutive pointers to the WIN32K.SYS text segment 
from within its data segment, since there are over 600 syscalls provided by WIN32K.SYS. This method 
worked fine in some cases, but not in the case that there are unrelated pointers to the text segment right 
before the start of W32pServiceTable. 
The second and final idea was searching for the call to KeAddSystemServiceTable() withing the INIT-
section of WIN32K.SYS, which is used for registering W32pServiceTable in NTOSKRNL. The entire 
code for looking this up is 200+ lines, but here are selected parts of it. 
First we need to find to find the KeAddSystemServiceTable IAT-entry: 
for (i = 0; i ImageBase; 
dwIAT += pid[i].FirstThunk; 
dwIAT += j * sizeof(ptd[0]); 
Then we search for the call to this IAT-entry, from within the INIT-section: 
for (p = pInit; p  pInit; p--) 
if (p[0] == 0x68) { 
DWORD x = *((PDWORD) &p[1]); 
if (x >= dwDataMin && x <= dwDataMax) { 
dwW32pServiceTableAddr = x; 
break; 
} 
} 
Payload 
Kernel-mode privilege escalation in Windows are not quite as simple as in Unix, instead of just setting 
an UID-field we need to either make or steal an access token, which is a rather complicated variable-
sized structure. The easiest way to escalate ones privileges is to “steal” an existing access token from a 
privileged process (e.g. running with SYSTEM-privileges). 
The process of doing this is rather well understood, or so I thought. My first approach was using the 
same approach as other privilege escalation payloads I’ve seen [6]. This usually worked fine, especially 
when just triggering the exploit once, but occasionally it resulted in a BSoD. 
I knew it was related to the payload, since when I used a payload that just immediately returned I could 
trigger the exploit in a loop all day long without crashing the system. By examining the crashes with 
WinDbg I noticed that the crashes seemed to be related to the reference counting of access tokens. The 
lowest three bits of the access token pointer was actually being used as a reference counter. 
No matter what I tried, which included incrementing the reference count of the original token, setting 
the reference count of the stolen access token to zero and so on, I always ended up crashing if I 
repeatedly trigger the exploit. This was not good enough for me. 
My final solution was very simple and also had the advantage of not leaking memory due to discarding 
the original access token. At the end of my exploit, after doing whatever I wanted to do with elevated 
privileges (like executing a privileged cmd.exe process), I trigger a restore-payload. 
The restore-payload restores the original access token and also the original value of the overwritten 
syscall pointer. After this modification I’ve finally reached my goal, a reliable and stable local privilege 
escalation exploit for all Windows 2000 and Windows XP systems.
The full and commented payload(s), suitable for compiling with NASM, follows: 
[BITS 32] 
OFF_ETHREAD  
equ 0x124 
; ETHREAD offset from fs 
OFF_EPROCESS 
equ 0x44 
; EPROCESS offset in ETHREAD 
%ifdef W2K 
PID_SYSTEM  