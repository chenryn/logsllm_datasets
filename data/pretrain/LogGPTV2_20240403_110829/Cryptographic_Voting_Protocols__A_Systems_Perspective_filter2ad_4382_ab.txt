Neff’s scheme is easily extensible to elections with
multiple races, but for the sake of simplicity assume
there is a single race with candidates C1, . . . , Cn. Af-
ter a voter communicates her choice Ci to the DRE, the
DRE constructs an encrypted electronic ballot represent-
ing her choice and commits to it. Each ballot is assigned
a unique BSN. The voter is then given the option of in-
teracting with the DRE further to obtain a receipt.
In
Figure 1, we show an example of a receipt taken from
the VoteHere website. This receipt enables the voter to
verify with high probability that her vote is accurately
represented in the tallying process.
After the voter communicates her intended choice Ci
to the DRE, it constructs a veriﬁable choice (VC) for Ci.
A VC is essentially an encrypted electronic ballot repre-
senting the voter’s choice Ci (see Figure 2). A VC is a
n × ` matrix of ballot mark pairs (BMPs), one row per
candidate (recall that ` is a security parameter). Each
BMP is a pair of El Gamal ciphertexts. Each ciphertext
is an encryption of 0 or 1 under the trustees’ joint public
key, written 0 or 1 for short. Thus, each BMP is a pair
b1
b2 , an encryption of (b1, b2).
The format of the plaintexts in the BMPs differs be-
tween the row corresponding to the chosen candidate Ci
(i.e., row i) and the other (“unchosen”) rows. Every BMP
in row i should take the form 0 0 or 1 1 . In con-
trast, the BMPs in the unchosen rows should be of the
form 0
0 . Any other conﬁguration is an
1 or 1
36
14th USENIX Security Symposium
USENIX Association
1
10
1 1
1 0
C1
C2
C3
2
1 0
11
0 1
3
0 1
0 0
0 1
`
10
1 1
1 0
Cn
1 0
1 0
0 1
01
Figure 3: An opened veriﬁable choice (OVC) in Neff’s
scheme. b represents an encryption of bit b, and b rep-
resents an opened encryption of bit b. An opened encryp-
tion of b contains both b and the randomness ω used to
encrypt b in the VC.
to b, and b is opened by revealing b along with the ran-
domness used during encryption. If this BMP has been
b , the DRE can always convince
correctly formed as b
the voter by using the value b as a pledge; however, if the
BMP contains either 0
0 , the voter has a
1
2 probability of detecting this. By repeating the proto-
col for each of the ` BMPs in row i, the probability that
2)`.
a malformed row escapes detection is reduced to ( 1
The role of the interactive protocol is to ensure that the
receipt will be convincing for the person who was in the
voting booth but useless to anyone else.
1 or 1
In practice, it is unrealistic to assume the average voter
will be able to parse the VC and carry out this proto-
col unassisted within the polling station. Instead, Neff’s
scheme enables the voter to execute it later with the as-
sistance of a trusted software program. The DRE ﬁrst
prints the pledges on the receipt, and then receives and
prints the voter’s challenge. The challenge ci for the row
i is represented as a bit string where the k-th bit equal
to 0 means open the left element of the k-th BMP and 1
means open the right element.
The DRE then constructs an opened veriﬁable choice
(OVC) according to the voter’s challenge and submits it
to the bulletin board. In Figure 3, we show an example
of an OVC constructed from the VC in Figure 2. We rep-
resent an opened encryption of bit b in an half-opened
BMP by b . In the OVC, the opened BMPs in row i are
opened according to ci, so that each half-opened BMP
b0 (if ci,k = 0) or b b0
contains a pair of the form b
(if ci,k = 1). To ensure that the OVC does not reveal
which candidate was selected, the BMPs in the uncho-
sen rows are also half-opened. In unchosen row j, the
DRE selects an `-bit challenge cj uniformly at random
and then opens this row according to cj. Thus, an OVC
consists of an n × ` matrix of half-opened BMPs. Con-
sequently, the usual invocation of the receipt formation
protocol is as follows:
1. Voter → DRE :
2. DRE → Printer :
3. DRE → Printer :
4. Voter → DRE :
5. DRE → Printer :
6. DRE → B. Board : OV C
i
BSN, hash(V C)
commit(p1, . . . , pn)
ci
c1, . . . , cn
Here we deﬁne pi,k = xi,k and pj,k = xj,k⊕cj,k (j 6= i).
While at the voting booth, the voter only has to check that
the challenge ci she speciﬁed does indeed appear on the
printed receipt in the i-th position (i.e., next to the name
of her selected candidate). Later, the voter can check
that the OVC printed in step 5 does appear on the bul-
letin board and matches the hash printed in step 2 (and
that the candidates’ names are printed in the correct or-
der), and that the OVC contains valid openings of all the
values pledged to in step 3 in the locations indicated by
the challenges printed in step 5. Note that the VC can be
reconstructed from the OVC, so there is no need to print
the VC on the receipt or to post it on the bulletin board.
To prevent vote buying and coercion, the voter is op-
tionally allowed to specify challenges for the unchosen
rows between steps 2 and 3, overriding the DRE’s default
random selection of cj (j 6= i). If this were omitted, a
vote buyer could tell the voter in advance to vote for can-
didate Ci and to use some ﬁxed value for the challenge
ci, and the voter could later prove how she voted by pre-
senting a receipt with this prespeciﬁed value appearing
as the i-th challenge.
After the election is closed, the trustees apply a univer-
sally veriﬁable mix net to the collection of posted ballots.
Neff has designed a mix net for El Gamal pairs [21, 24],
and it is used here.
In VoteHere’s implementation of Neff’s scheme, vot-
ers are given the option of taking either a detailed or ba-
sic receipt. The detailed receipt contains all the infor-
mation described in this section (Figure 1), but a basic
receipt contains only the pair (BSN, hash(V C)). This
decision is made separately for each race on a ballot,
and for each race that a voter selects a detailed receipt
she must independently choose the choice and unchosen
challenges for that race.
A basic receipt affords a voter only limited veriﬁ-
cation capabilities. Since a basic receipt foregoes the
pledge/challenge stage of Neff’s scheme, a voter cannot
verify her ballot was recorded accurately. However, a
basic receipt does have some value. It enables the voter
to verify that the ballot the DRE committed to in the
poll booth is the same one that appears on the bulletin
board. Since the DRE must commit to the VC before
it knows whether the voter wants a detailed or basic re-
ceipt, a DRE committing a VC that does not accurately
represent the voter’s selection is risking detection if the
USENIX Association
14th USENIX Security Symposium
37
i
1. Voter → DRE :
2. DRE → Printer : BSN, hash(V C)
3. DRE → Voter :
basic or detailed?
4. Voter → DRE :
r, where r ∈ {basic, detailed}
5a. DRE → Printer :
commit(p1, . . . , pn)
5b. Voter → DRE :
ci
5c. DRE → Printer :
c1, . . . , cn
6. DRE → B. Board : OV C
Figure 4: Summary of receipt generation in Neff’s
scheme with the option of basic or detailed receipts.
Steps 5a, 5b, and 5c happen only if r = detailed.
Pres: Polk
Sen: Adams
...
z
Top layer
}|
{
z
Bottom layer
}|
{
Figure 5: Representation of the printed ballot and trans-
parencies. The top two images show the ballot as well as
a zoomed in portion of the two overlayed transparencies
portrayed below.
voter chooses a detailed receipt. The receipt protocol
augmented with this additional choice is summarized in
Figure 4.
3.2 Chaum’s Visual Crypto Scheme
David Chaum uses a two-layer receipt based on transpar-
ent sheets for his veriﬁable voting scheme [4, 5, 29]. A
voter interacts with a DRE machine to generate a ballot
image B that represents the voter’s choices. The DRE
then prints a special image on each transparency layer.
The ballot bitmaps are constructed so that overlaying
the top and bottom transparencies (T and B) reveals the
voter’s original ballot image. On its own, however, each
Encoding for Transparency
Encoding for Overlay
⊕v Truth Table
0 ⊕v 1 = ˆ1
0 ⊕v 0 = ˆ0
1 ⊕v 1 = ˆ0
1 ⊕v 0 = ˆ1
1:
ˆ1:
0:
ˆ0:
or
⊕v
⊕v
⊕v
⊕v
=
=
=
=
Figure 6: Visual Cryptography. A printed pixel on a sin-
gle transparency has a value in {0, 1}, encoded as shown
in the ﬁrst row. We apply the visual xor operator ⊕v
by stacking two transparencies so that light can shine
through areas where the subpixels are clear. The pixels
in the overlay take values from {ˆ0, ˆ1}. The bottom table
shows the truth table for the visual xor operator and its
parallels to the binary xor operator.
layer is indistinguishable from a random dot image and
therefore reveals nothing about the voter’s choices (see
Figure 5).
The DRE prints cryptographic material on each layer
so that the trustees can recover the original ballot image
during the tabulation phase. The voter selects either the
top or bottom layer, and keeps it as her receipt. A copy
of the retained layer is posted on the bulletin board, and
the other layer is destroyed. The voter can later verify
the integrity of their receipt by checking that it appears
on the bulletin board and that the cryptographic material
is well formed.
for a 0-valued pixel and
Visual cryptography exploits the physical properties
of transparencies to allow humans to compute the xor
of two quantities without relying on untrusted software.
Each transparency is composed of a uniform grid of pix-
els. Pixels are square and take values in {0, 1}. We print
for a 1-valued pixel. We
refer to each of the four smaller squares within a pixel
as subpixels. Overlaying two transparencies allows light
to shine through only in locations where both subpixels
are clear, and the above encoding exploits this so that
overlaying performs a sort of xor operation. Pixels in the
overlay take values in {ˆ0, ˆ1}. Pixels in the overlay have
a different appearance than those in the individual trans-
, while ˆ1 appears as
parency layer: ˆ0 appears as
. Using ⊕v to represent the visual overlay operation,
we see that 0 ⊕v 0 = ˆ0, 0 ⊕v 1 = ˆ1, and in general if
a ⊕ b = c then a ⊕v b = ˆc (see Figure 6).
or
Chaum’s protocol satisﬁes three properties:
1. Visual Check: Given the desired ballot image B,
the DRE must produce two transparencies T and
B so that T ⊕v B = B. This property allows
the voter to verify the correct formation of the two
transparencies.
38
14th USENIX Security Symposium
USENIX Association
2. Recovery: Given a single transparency T or B and
the trustee keys, it must be possible to recover the
original ballot image B.
3. Integrity: T and B contain a commitment. There
is a way to open T or B and to verify the opening
so that for all other top and bottom pairs T 0 and B0
such that T 0 ⊕v B0 ≈ B and T 0 (or B0) does not
decrypt to B, then B0 (or T 0) is unopenable. In other
words, for a pair of transparencies that overlay to
form B (or a close enough approximation for the
voter to accept it as B), the DRE should only be
able to generate a witness for a transparency if the
other transparency decrypts to B.
We will consider each pixel to have a type ∈ { P ,
E } in addition to its value ∈ {0, 1}. The pixel’s type
will determine how we compute the value. We label
pixels on the transparency so that no pixels of the same
type are adjacent to each other, forming a repeating grid
of alternating pixel types. Additionally, when the two
transparencies are stacked, we require that P -pixels are
only atop E -pixels and E -pixels are only atop P -
pixels. The upper left corner of the top transparency
looks like: E P E
E P E
P E P
, and the upper left corner of the bottom
P E P
E P E
transparency looks like: P E P
. The P -pixels in a layer
come from a pseudorandom stream. The stream is com-
posed of n separate streams, one from each trustee. Each
of these trustee streams is based on the trustee number
and the voter’s BSN; the seed will be encrypted using
each trustee’s public key requiring the trustee to partici-
pate in the decryption process. The value of the E -pixel
is set so that overlaying it with the corresponding P -
pixel in the other layer yields a ballot pixel. An E -pixel
alone reveals no information: it is the xor of a P -pixel
and the ballot image.
3.2.1 Details on Transparency Formation
Next, we present the details on transparency formation
for the interested reader. This section may be safely
skipped on ﬁrst reading.
The pseudorandom stream for a given transparency is
composed of n pseudorandom streams, each of which
is seeded by a different value. For each of the top and
bottom transparencies, there is one stream per trustee.
The ith trustee’s seed for the top is
sti
  h(signkt
(BSN), i)
(1)
where BSN represents the unique ballot sequence num-
(·) is a signature using
ber assigned to the voter and signkt
kt, a key speciﬁc to the DRE, and h(·) is a hash function.
The ith trustee’s seed for the bottom is
sbi
(BSN), i)
  h(signkb
(2)
The hash expansion function h0(·) is used to generate the
trustee stream. Trustee streams are xored together to pro-
duce the pseudorandom stream for the top layer:
P T  
0(sti)
h
(3)
nM
i=1
nM
The corresponding bottom stream uses the bottom seeds:
P B  
0(sbi)
h
(4)
i=1
We can now deﬁne each pixel’s value. We view the
ballot as a stream of pixels B, and B[i] denotes the ith
pixel. A P -pixel i on the top transparency is assigned
the value P T [i]. The E -pixel i on the bottom trans-
parency is deﬁned to have value P T [i] ⊕ B[i]. When
viewing the two transparencies in alignment, then, the
voter sees the original ballot stream B because P T [i] ⊕v
(P T [i] ⊕ B[i]) = P T [i] ⊕ (P T [i] ⊕ B[i]) = B[i]. When
taken alone, neither transparency reveals any informa-