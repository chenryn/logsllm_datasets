A sequence of states of M(cid:2) project to a sub-sequence of
a sequence of states of M. If this sequence of states of M
satisfy L, then it may be extended by inputs (cid:5)x maintaining L.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
125
Given inputs (cid:5)x causing M to transition from S to S(cid:2) out-
(cid:2), π, Δ, πΔ) causing
putting (cid:5)y, the prover can compute a ((cid:5)y, d
M(cid:2) to transition from (S,H(S)) to (S(cid:2),H(S(cid:2))) and output
(cid:5)y (Lemma 3.1). So the sequence of states of M(cid:2) may be
extended maintaining L, and R(cid:2) maintains L.
Corollary 3.2. If R maintains a liveness property L for all
state machines, then R(cid:2)
maintains L for all state machines.
4 Applying Piperine to Ethereum
We discuss how Piperine enhances Ethereum, starting with a
primer on the base system.
A primer on Ethereum. Ethereum is a blockchain network
that instantiates a large-scale RSM. In Ethereum, state con-
sists of a set of accounts, each of which possesses a balance in
a currency (ether). Optionally, each account can possess byte-
code written for the Ethereum Virtual Machine (EVM) and
internal persistent storage. Such bytecode is called a smart
contract and can be deployed to an account by a developer;
this facility can be used to implement decentralized applica-
tions such as payment services, games, auctions, etc. State
transitions (also known as transactions) in Ethereum consist
of transfers of balances between accounts, deploying new
smart contracts, and calls to methods exposed by smart con-
tracts (which in turn can make calls to other smart contracts).
Nodes in the Ethereum network reach consensus on an
append-only ledger of blocks containing transactions. The
execution of transactions is replicated across the network, i.e.,
each node executes every transaction in the ledger.
Each operation supported by the EVM is assigned a
complexity-based cost in a currency called gas, which is
derived from ether and hence fungible in USD (§6.3). For
example, the cost of executing arithmetic operations or read-
ing transaction data inside a contract is in single digits of
gas, whilst the cost of updating state or calling a contract is
many thousands of gas [86]. When a transaction invokes a
method exposed by a smart contract, the call is supplied by its
caller with some amount of gas, and each operation consumes
gas from this supply. If the execution of the smart-contract
call requires more gas than is supplied, the execution termi-
nates. This policy bounds the computational resources that
nodes in the network must expend to execute state transitions
in Ethereum; this is a key mechanism to prevent denial of
service attacks. The gas consumption of all smart contract
calls in a block is the block size, which is currently capped by
Ethereum to ≈ 8 · 106 and is routinely saturated in practice.
Enhancing Ethereum with Piperine. Piperine enhances
Ethereum at the level of an application. While the enhance-
ment requires several changes to the execution logic of the
application, these changes do not require any modiﬁcation
to the underlying Ethereum mechanisms and can be applied
transparently. Speciﬁcally, instead of specifying the applica-
tion as an on-chain smart contract, developers implement it
off-chain as a program Ψ using Piperine’s toolchain. Clients
who wish to invoke the application submit their transactions
to a Piperine prover. The prover accumulates transactions,
executes them in batches, and produces proofs that are then
sent to a veriﬁer. The veriﬁer is implemented as a smart con-
tract that runs natively on Ethereum. The veriﬁer contract is
generic to Ψ and implements the veriﬁcation of proofs, the ag-
gregation of changes to the state digests, and the veriﬁcation
of the purported state changes. As the veriﬁer keeps track of
the application state and incorporates cryptographic material
for proof veriﬁcation, it is deployed on a per-application basis.
All inputs processed by the veriﬁer are recorded on-chain
since the prover invokes the veriﬁer by submitting a regular
Ethereum transaction with these inputs as arguments.
Deployment and fault-tolerance. Recall from Section 3
that Piperine’s prover is untrusted for both safety and live-
ness. Thus, the prover can run on any untrusted infrastructure.
Furthermore, the prover has no private state, and all state
necessary to instantiate a new prover is persistently recorded
on-chain (in blockchain terms, there are no “data availability”
issues). Hence, any entity (a client, a miner, or a third-party
service) can act as a prover at any point—without requiring
coordination with any other instance of a prover that might
exist in the system.2 There can theoretically be an unlimited
number of provers per application (e.g., each miner can be-
come a prover for an application of its choice). In practice,
an efﬁcient deployment option is for the prover to be offered
as a commercial service that provides decentralized applica-
tions with reduced per-transaction costs—without giving up
the beneﬁts of decentralization. In our experiments (§6), we
deploy the prover on a cluster of machines in the cloud.
Bootstrapping and interoperability. We facilitate inter-
operability between Piperine-enhanced applications and na-
tive smart contracts. As an example, in the context of an
ERC-20 token [79], the main requirements are that clients
can bootstrap account balances by sending currency to the
smart contract, and can withdraw their funds unilaterally—
without trusting any prover. To support this, the smart contract
implementing the veriﬁer keeps a list of pending payments to
and from the Piperine-enhanced token. When clients wish to
bootstrap a balance, they use a traditional ERC-20 transaction
to send funds to the veriﬁer contract. The veriﬁer contract
adds the hash of this transaction to the list of pending pay-
ments to the token. When the prover wishes to issue currency
to an account on its state, it releases a transaction hash to the
veriﬁer, which rejects the state transition if the hash is not
present in the pending list. If not, it updates the pending list
to prevent a prover from double issuance.
Similarly, to withdraw funds, the prover executes a trans-
action that burns tokens in the Piperine-managed state and
whose public outputs direct the smart contract to approve
a token withdrawal, which can be collected by an ERC-20
2An alternate option is to obtain a snapshot of the state from another node.
In this case, if the snapshot is incorrect, proofs produced by the new prover
will not be accepted by the veriﬁer on-chain due Piperine’s safety properties.
126
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
transaction. Since any party can act as the Piperine prover, any
party can unilaterally withdraw funds by producing proofs of
execution for such a burn transaction and can then transition
state on the on-chain veriﬁer smart contract.
Status checks. Piperine’s prover sends a hash of each ex-
ecuted transaction to the chain as part of inputs to the veri-
ﬁer. As a corollary, any client (or a new prover) can check
whether some transaction has already been executed by check-
ing whether the hash of their transaction has appeared as an
input to the Piperine veriﬁer contract.
Choice of an elliptic curve. For efﬁciency, Piperine uses a
different elliptic curve for ECDSA signatures than Ethereum.
Thus, transactions generated for a Piperine-enhanced appli-
cation cannot be sent directly to the Ethereum chain.3 The
above interoperability mechanism alleviates this constraint
by enabling currency transfers from ether to per-application
tokens and vice versa. Moreover, the use of cryptographic
primitives that are friendly to proof machinery is often an
acceptable optimization in practice [4, 34, 85].
Details of the veriﬁer running as a smart contract. To
implement the logic of the veriﬁer, we need to build three
high-level primitives: a primitive to verify proofs produced by
the proof machinery, the MiMC hash function, and functions
to update set-digests with deltas. By default, the EVM
provides basic elliptic-curve point addition (150 gas) and
scalar multiplication (6,000 gas), in the form of precompiled
contracts (i.e., as libraries). Using these library operations,
we implement a primitive that can verify proofs produced
by the proof machinery. In our implementation, verifying a
single proof of a computation costs ≈ 201,000 + 6,150· I gas
where I is a number of inputs and outputs to the computation.
Observe that the cost of verifying a proof is independent of
the complexity of the computation for which the proof is pro-
duced. Furthermore, our design limits the size of inputs and
outputs of a computation using GetBlock/PutBlock APIs,
so I is a constant in our context. However, the veriﬁer incurs
a cost linear in the number of hash operations, as it uses the
block store optimization (which, recall, replaces exponentia-
tions with hash operations). In our context, the hash function
is MiMC, which we implement using the EVM’s primitive
modulo operations along with custom assembly. The resulting
cost of a hash operation is ≈ 200 gas/byte. Our functions to
update set-digests are implemented directly with mulmod and
addmod, directly ported from the C implementation.
5
We build Piperine atop Spice [73], which provides a compiler
from a subset of C augmented with storage primitives to
algebraic constraints. For producing succinct cryptographic
proofs, it invokes libsnark [57], an implementation of a
state-of-the-art proof machinery [47]. We extend Spice with
techniques described in Section 3 including ΨΔ, a high-speed
Implementation
3The curve is deﬁned in Section 3.2, and has parameters of similar size to
Ethereum’s secp256k1, so it provides a similar security.
127
struct Txn {
// Type of the transaction
int type;
Pk pk_c, pk_r; // Public keys: caller, recipient
int v;
int sig;
// Amount of currency
// Signature on the transaction
// Delta to set-digest
}
struct Delta
struct Account { int balance };
static PK organiser;
// creates currency
Delta create(Txn txn) {
Delta d; Account recipient;
// Check the type of transaction and signature
assert(txn.type == CREATE);
assert(verify_sig(txn.pk_c, txn, txn.sig))
// Only the organiser can create tokens
assert(txn.pk_c == organiser)
// Lock and read account of txn.pk_c, update d
beg_txn(&d, [txn.pk_r], [&recipient]);
recipient.balance += txn.v;
// Write and unlock account, update d
end_txn(&d, [txn.pk_c], [recipient]);
return d;
}
// transfers currency between accounts
Delta transfer(Txn txn) {
Delta d; Account caller, recipient;
// Check the type of transaction and signature
assert(txn.type == TRANSFER);
assert(verify_sig(txn.pk_c, h, txn.sig))
// Lock and read account of txn.pk_c, txn.pk_r, update d
beg_txn(&d, [txn.pk_c, txn.pk_r], [&caller, &recipient]);
if (caller.balance >= txn.v && txn.v >= 0) {
caller.balance -= txn.v;
recipient.balance += txn.v;
}
// Write and unlock accounts, update d
end_txn(&d, [txn.pk_c, txn.pk_r], [caller, recipient]);
return d;
}
FIGURE 3—Pseudocode for ERC-20’s create and transfer op-
erations using Piperine’s API. We abstract details of the use of block
store and internal details of signature veriﬁcation. Other ERC-20
operations are programmed similarly.
library for signature veriﬁcation, etc. This adds about 375
SLOC to Spice. We implement the additional portions of
Piperine’s veriﬁer (§3.2; batching paragraph) in Python, along
with orchestration for execution on our cluster, in about 725
lines of Python. This code parallelizes the prover’s work
(executing transactions, producing proofs, etc.).
To demonstrate Piperine in action, we implement a pay-
ment processing service with a standardized interface (called
an ERC-20 token [79]) using 380 lines of C. Although we
implement our approach for only one contract, ERC-20 is a
popular standardized interface for contracts, whose implemen-
tations account for over 50% of transactions on Ethereum [33].
Figure 3 depicts pseudocode for various state transitions
in the payment state machine. The main transaction is the
transfer, which moves fungible tokens between two ac-
counts. To apply Piperine to Ethereum, we implement the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:37:25 UTC from IEEE Xplore.  Restrictions apply. 
veriﬁer as a smart contract in Solidity, a language for writ-
ing state machines. In particular, we implement machinery
for verifying cryptographic proofs (which builds on an open-
source library [70] for elliptic curve pairings) and the MiMC
hash function in 500 lines of Solidity.
6 Evaluation
Our experimental evaluation of Piperine answers the follow-
ing questions:
1. What are the beneﬁts of Piperine’s techniques on end-to-
end costs of the prover and the veriﬁer in VSMs?
2. What are the regimes in which delegation via veriﬁable
state machines is better than local reexecution?
3. Does Piperine reduce costs in large-scale RSMs?
Methodology and baselines. We report our results in the
context of a state machine for processing payment transac-
tions (§5). To answer the ﬁrst question, we measure the impact
of our reﬁnements (described in §3) on the prover’s and veri-
ﬁer’s CPU costs. To answer the second question, we consider
a baseline state machine that executes the above state ma-
chine’s payment transactions by just authenticating them (i.e.,
it does not execute transitions in entirety, which is pessimistic
to Piperine). We implement the optimistic baseline using
libsodium [38], a high-speed cryptographic library. We re-
port the per-transaction costs in terms of CPU and network
costs for a system with and without Piperine.
To answer the last question, we compare Piperine-enhanced
Ethereum to native Ethereum, in both cases implementing the
above state machine. For this, we report end-to-end costs of
the two variants by using a uniﬁed metric (that accounts for
network, storage, and CPU costs). We also report the size of
a transaction in bytes in both cases.
Setup. We use a cluster of Azure D64s v3 instances (32
physical cores, 2.30 GHz Intel Xeon E5-2673 v4, 256 GB
RAM) running Ubuntu 18.04. We measure CPU-time for
the prover P and a veriﬁer V. We run parallel instances of
P on as many physical cores as are available, and compute
totals across all instances. We restrict the native V to a single
physical core for ease of comparison to the baselines, which
are single-threaded in each case.
To compare to the ERC-20 baseline, we run Piperine
against a private instance of the Ethereum RSM, using the
Web3 Python library [3] for interaction and the Ganache
suite [2] for deployment. We measure gas consumption of the
veriﬁer and the size in bytes of signed transactions using the