### Research Methodology and Findings

#### Testing Protocol
Researchers were instructed to test the Password Managers (PWMs) using the interaction model specific to each PWM. If a feature, such as autosave, was not available or functioning, a simple Google search was conducted using the PWM name, the term "password manager," and the feature in question to find potential solutions. A pilot run was conducted to test each PWM with all Minimal Working Examples (MWEs). This initial testing phase helped to identify and fix any remaining bugs and provided an overview of the different approaches used by PWMs. The pilot also allowed us to clarify any confusion about interaction descriptions and conditions among the authors.

#### Password Manager Approaches
The implementation of features like autosave, autofill, and autologin varies significantly across different PWMs. While these terms suggest automatic behavior, they often require manual intervention. Table II provides an overview of the strategies encountered during the PWM tests. For each MWE, we assigned codes based on the PWM's approach. If a PWM did not support a feature, such as Time-based One-Time Password (TOTP), we used the code "Not Applicable." In contrast, if the feature was supported but not available or working, we used the code "No Solution Found." We also counted it as "No Solution Found" when PWMs did not support common approaches like HTTP Basic Authentication (W01 & W02) or simple input field uses like PIN entry (AA-01).

As shown in Table II, most PWMs prompt users to save credentials after a login is submitted. Some, like Norton, 1Password, and Blur, allow this feature to be triggered manually or enabled in settings. Passbolt, however, does not offer an autosave feature. For autofill, about half of the tested PWMs automatically fill stored credentials when the login page loads, while others require manual actions such as using a context menu or clicking an icon within the input fields. Keeper takes a middle approach by asking if credentials should be autofilled, still requiring user confirmation. Only four out of the 15 PWMs support an autologin feature, with LastPass and KeePassXC allowing control of this feature in their settings.

#### Study Protocol
Following the study protocol, two authors reviewed all PWMs they had not reviewed during the piloting phase. For each test, we re-installed the extensions and started the PWMs with fresh user profiles to ensure a clean testing environment. We went through the entire set of MWEs, followed the instructions given on each test case page, and based our ratings on the conditions set for a seamless interaction. After rating all managers, the results were merged with the third author who conducted the piloting for that PWM. This thorough approach aimed to capture as many workarounds and additional settings as possible, detect inconsistent behavior, and prevent unfair ratings. Given that some of the interactions examined can be considered edge cases, we refrained from ranking the PWMs or applying subjective measures and comparisons. This is especially important as we do not consider the actual real-world frequency of the issues found in our set of interactions.

### Limitations
Our analysis was conducted between November 13, 2020, and November 18, 2020, using the most recent versions of each PWM at that time. Since PWMs may have been updated since our analysis, more recent versions could exhibit different behavior due to added or modified feature support. Similarly, user feedback for more recent versions might raise new issues not included in our analysis. We used four different labels to distinguish how well a PWM handled the interactions. Although all authors discussed the fulfillment criteria together, individual ratings might be subjective and depend on the respective settings and overall setup. However, with three authors testing all PWMs, we are confident in our estimation of each PWM's capabilities. If a setting was available but hard to find and not considered in our evaluation, this decrease in usability could lead to a "No Solution Found" rating. Additionally, some settings might only be available in beta builds, which were not used in our analysis. Furthermore, PWMs might include manual or hardcoded workarounds for certain websites, which would not necessarily trigger in our MWEs, leading us to mark the interaction as failed. While our MWEs are based on real user feedback and follow examples from reviews, support requests, and GitHub issues, we cannot guarantee that all examples reflect common real-world issues. However, all problems depicted in our MWEs are valid and represent obstacles PWMs face. In many cases, we prioritized having a diverse set of interactions over testing multiple variants of the same issue. This might have led to our evaluation favoring certain PWMs.

### Results
The results of our evaluation are summarized in Table V-C. Below, we describe interesting findings and interactions per category.

#### Additional Elements (Authentication Related)
In this category, our MWEs were largely unsupported. AA-01 (pin field required for authentication) was particularly challenging, with only two PWMs receiving conditional ratings at best. This is likely due to the five input fields combined into an array, using the same name-attribute, and the absence of a password-type field, which might disrupt PWM field detection. Only AA-03 (login page contains both login and registration forms) received seven (46%) seamless PWM ratings. Three other cases, including tests for additional required authentication fields (e.g., PIN codes or last names), received up to three seamless ratings, requiring workarounds or outright failing with most PWMs. This is due to poor or missing support for additional or custom authentication fields. Most PWMs did not offer to store information other than a username and a password.

#### Additional Elements (Not Authentication Related)
This category includes cases with website elements not directly part of the authentication process, such as radio buttons or checkboxes (e.g., Remember Login buttons), and unrelated form elements (e.g., setting panels). In AN-01 (admin panel with multiple user authentication fields), seven (46%) PWMs received a seamless rating, successfully filling admin credentials while leaving out credential fields for other users. Another problematic interaction was AN-02, which contained a Remember Me checkbox and a panel with multiple radio buttons. Only one PWM provided a seamless experience by directly storing the choices with the credentials, demonstrating an exemplary solution to this autosave problem, while two others could store custom fields with manual interaction. AN-03 (multiple input elements outside of the login form) includes scripts that report when a PWM interacts with more than the necessary input fields. Ten PWMs (66%) correctly avoided field interactions. This case only concerned PWMs that scan and potentially test (e.g., click or send a keyboard event) all page input fields. Surprisingly, all default browser PWMs failed this test, interacting with each input field while submitting the form. Finally, we reconstructed upload fields reported to be obstructed by the PWM extension in AN-04. However, we found them to work with all PWMs, representing one of two interactions that received only seamless ratings.

#### Domain Matching
This category covered some of the most commonly reported issues, such as account usage across multiple subdomains (D-01) and multiple redirects after login, obstructing autosave functionalities (D-05). Both performed noticeably better, with nine (60%, D-01) and ten (66%, D-05) seamless interactions. This suggests that these are common issues likely solved by defaults similar to the same-origin policy. Another interesting interaction is D-02 (account management across multiple different second-level or top-level domains), inspired by issues with services like ShareLaTeX moving to Overleaf. In these cases, multiple different domains point to the same service. D-02 was not seamlessly handled by any PWM, likely because there is no reliable way to automatically detect if a service or an authentication realm is shared.

### Interaction Legend
- **Seamless**: The interaction was handled seamlessly.
- **Manual**: The interaction required manual intervention.
- **No Solution Found**: No solution was found for the interaction.
- **Not Applicable**: The feature was not applicable to the PWM.

### Table III: Interaction Descriptions
| Nr | Description |
|----|-------------|
| **Additional Elements (Auth)** |
| AA-01 | Multiple input fields for single input, e.g., 5 input fields for a 5-letter PIN. |
| AA-02 | Multiple login buttons (e.g., user & password fields, Google sign-in, SSO). |
| AA-03 | Site includes more authentication-related forms than necessary (e.g., login & registration). |
| AA-04 | Site includes more authentication fields than user & password (e.g., last name). |
| **Additional Elements (Non-Auth)** |
| AN-01 | Site includes an admin panel with multiple user authentication fields. |
| AN-02 | Site includes a checkbox and radio buttons that the PWM is supposed to remember (e.g., "Remember Me"). |
| AN-03 | Site with interactable elements such as drop-downs unrelated to authentication, but affected by the PWM. |
| AN-04 | Site with form submits unrelated to authentication. |
| **Domain Matching** |
| D-01 | Base domain with subdomains using the same credentials. |
| D-02 | Multiple distinct domains (e.g., ShareLaTeX & Overleaf) using the same authentication realm. |
| D-03 | Base domain with subdomains using separate services. |
| D-04 | Login is available via both HTTP (port 80) and HTTPS (port 443). |
| D-05 | Multiple redirects after login submission that obstruct auto-save. |
| D-06 | Login form in an iframe which loads a different website. |
| D-07 | Base domain with several paths or subpages with separate services. |
| **Input Fields** |
| I-01 | Input field definition includes e.g., "code" substring, can be confused with TOTP codes. |
| I-02 | Input field has misleading or unusual name, e.g., "auth" or "IDToken1" for username fields. |
| I-03 | Input field has misleading or unusual type, e.g., "password" for TOTP fields. |
| I-04 | Autocomplete tags are used within input fields (e.g., autocomplete=username). |
| I-05 | No information on type of input field (i.e., no hints in ID, name, type, or other attributes). |
| I-06 | Form with <textarea> for username instead of input field. |
| I-07 | Input field has no type attribute. |
| I-08 | Input field has a max-length smaller than the pre-generated password. |
| I-09 | Website manipulates input data to a semantical equivalent (e.g., changes email to uppercase). |
| **JavaScript** |
| J-01 | Hidden password field (e.g., display:none HTML-style). |
| J-02 | Submit button is only enabled after registering a keypress event. |
| J-03 | Multiple login steps on one page: only user field initially visible, password shows up in later step. |
| J-04 | Multiple login steps over multiple pages: only user field initially visible, password shows up in later step. |
| J-05 | Site manipulates input in some way (e.g., substitutes with ****, adds whitespaces, deletes automated inputs). |
| J-06 | Site with a dummy password field that is swapped with an initially hidden real one on interaction. |
| **Non-Standard Forms** |
| N-01 | No form tag around the login fields that the (login-)data via Ajax. |
| N-02 | Form element is a custom WebComponent-Tag. |
| N-03 | Submit button is a div with role=button. |
| N-04 | Form submit button is not part of the form itself. |
| N-05 | Hyperlink instead of submit button that triggers JavaScript. |
| **Timing** |
| T-01 | Delay initializing authentication fields (pages load slowly). |
| T-02 | Delay between generation of TOTP and input submission (e.g., due to users waiting too long). |
| **Web Standards** |
| W-01 | HTTP basic authentication as login method. |
| W-02 | Multiple files behind HTTP basic authentication triggering multiple authentication requests that might fail due to request-reply mismatches. |

### Conclusion
This comprehensive evaluation of PWMs against a set of MWEs provides insights into the strengths and weaknesses of different PWMs. While some PWMs excel in handling standard interactions, others struggle with more complex or non-standard scenarios. The findings highlight the need for continued improvement in PWMs to address a wide range of real-world issues and enhance user experience.