title:Non-intrusive IP traceback for DDoS attacks
author:Vrizlynn L. L. Thing and
Morris Sloman and
Naranker Dulay
Non-Intrusive IP Traceback for DDoS Attacks 
Vrizlynn L. L. Thing 
PI:EMAIL 
Naranker Dulay 
PI:EMAIL 
Morris Sloman 
PI:EMAIL 
Imperial College London 
180 Queen’s Gate, London, SW72HR 
ABSTRACT 
The paper describes a Non-Intrusive IP traceback scheme which 
uses  sampled  traffic  under  non-attack  conditions  to  build  and 
maintains caches of the valid source addresses transiting network 
routers. Under attack conditions, route anomalies are detected by 
determining  which  routers  have  been  used  for  unknown  source 
addresses,  in  order  to  construct  the  attack  graph.  Results  of 
simulation  studies  are  presented.  Our  approach  does  not  require 
changes  to  the  Internet  routers  or  protocols.  Precise  information 
regarding  the  attack  is  not  required  allowing  a  wide  variety  of 
DDoS  attack  detection  techniques  to  be  used.  Our  algorithm  is 
simple and efficient, allowing for a fast traceback and the scheme 
is scalable due to the distribution of processing workload.   
Keywords 
Distributed Denial of Service Attacks, IP Traceback  
1.  INTRODUCTION 
Attackers use spoofed source addresses to hide their identity and 
location  in  Distributed  Denial  of  Service  (DDoS)  attacks  [1].  
Some service providers do perform ingress filtering to check for 
valid source IP addresses coming into access routers, but this is 
not  completely  effective.  Recent  studies  show  source  address 
spoofing  is  still  a  major  network  problem  [2],  [3].  Traceback 
mechanisms [4-6] trace the true source of the attackers to stop the 
attack at the point nearest to its source to reduce waste of network 
resources and to find the attackers’ identities.  
Packets belonging to a particular source-destination pair typically 
follow  a  relatively  static  path  through  the  network  as  routing 
tables  are  not  updated  very  frequently  under  normal  conditions. 
When an attacker spoofs a legitimate source address, the packet 
may  pass  through  routers  which  are  not  on  the  normal  source-
destination  routing  path  and  this  anomaly  can  be  used  to 
determine the attack path. Based on this rationale, we propose a 
Non-Intrusive  IP  traceback  scheme.  Our  scheme  builds  and 
maintains  caches  of  valid  source  addresses  for  routers  in  the 
network from sampled traffic under non-attack conditions. Under 
attack conditions, we determine which routers have been used for 
unknown source addresses, to construct the attack graph within an 
administrative  domain.  The  strengths  of  this  scheme  are  its 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ASIACCS’07, March 20–22, 2007, Singapore. 
Copyright 2007 ACM 1-59593-574-6/07/0003. 
371
scalability  due  to  the  distribution  of  processing  workload  and 
speed  due  to  the  simple  computation  for  the  attack  graph 
construction. There is no need to modify existing routers, victim 
or  internet  protocols  to  support  the  traceback,  so  it  is  “non-
intrusive”unlike  many  other  existing  techniques  [4-6].  This 
scheme supports the tracing of both internal (e.g. zombies within 
the victim network) and external attackers.  
the 
time  periods  over  which 
2.  KEY ASSUMPTION 
Our design makes the key assumption that end-to-end routes are 
relatively  stable  as  indicated  by  analysis  of  40000  end-to-end 
routes  between 37 Internet sites, in [7]. Prevalence of a dominant 
route  (i.e.  the route that appears most often) is computed as the 
ratio of the number of times the dominant route is observed to the 
total  number  of  traceroutes  measuring  a  particular  path.  The 
median value of prevalence is 82%, 97% and 100% at host, city 
and  autonomous  system  granularity  respectively.  This  indicated 
that  Internet  paths  were  strongly  dominated  by  a  single  route. 
Although 
routes  persisted 
demonstrated  a  wide  variation,  ranging  from  seconds  to  days, 
about 2/3 of the Internet paths had routes persisting for either days 
or weeks. 
Routing  stability  based  on  data  captured  from  the  National 
Internet  Measurement  Infrastructure  (NIMI)  and  a  set  of  189 
public traceroute servers was studied in [8]. Of the NIMI paths, 
78% always exhibited the same route, and 86% of the routes had a 
prevalence  of  90%  or  higher.  For  the  public  servers,  the 
corresponding figures are 73% and 85% respectively. It was also 
shown that routes often persist for at least a day. In general, 1/3 of 
the Internet routes and 1/6 of the NIMI routes are short-lived.  
A  study  on  routing  fluctuations  [9]  concluded  that  the  vast 
majority  of  Internet  routing  instability  stems  from  only  a  small 
number of unpopular destinations. Popular destinations, which are 
responsible  for  the  bulk  of  the  Internet,  have  remarkably  stable 
routes  lasting  days  or  weeks,  probably  due  to  the  fact  that  they 
have reliable and well-managed connections to the Internet. 
The  above  studies  showed  that  the  Internet  routes  exhibit 
relatively  high  stability  so  our  approach  to  caching  routing 
information in white lists should not result in very frequent and 
erratic changes to the lists.  
3.  NON-INTRUSIVE TRACEBACK 
If node A spoofs node B’s address to send traffic to node C, an 
“incorrect”  path  (or  anomalous  intermediate  routers)  can  be 
detected.  The  routers  on  the  A-C  path  will  suddenly  ”see”  B’s 
source address rather than the routers on the valid B-C path. By 
performing source IP address validation checks on whether transit 
packets are supposed to arrive at particular routers, these packets 
could be identified as from legitimate or illegitimate users, with a 
low  false  positive  rate.  Therefore,  even  seemingly  legitimate 
packets, used in attacks would still be traceable. 
In  our  scheme,  network  routers  use  standard  flow  sampling  and 
reporting mechanisms such as Netflow [10] and IPFIX [11, 12], to 
update  their  assigned  White  List  (WL)  caching  device.  The 
required  fields  of  the  flow  include  the  source  and  destination 
addresses  from  the  original  data  packets.  Each  cached  record 
consists of the above fields, the address of the router that sent the 
data and the time of receipt to expire the record.  
The WL caching devices will update the white lists for the routers 
during  the  learning  stage,  i.e.  only  when  there  is  no  ongoing 
DDoS  attack,  to  prevent  spoofed  source  addresses  from  being 
included  in  the  caches.  We  assume  a  DDoS  attack  would  be 
detected using mechanisms such as TCP SYN flood [13]. During 
the attack, traffic sampling from the routers is still sent to the WL 
caches,  but  the  white  list  generation  and  updates  are  suspended 
upon  attack  detection.  The  WL  caching  devices  search  for 
mismatches  between  the  sampled  traffic  and  cache  data.  These 
anomalies  are  sent  to  the  Traceback  Manager  to  generate  the 
attack graphs. 
One of the main goals of traceback is to locate the points closest 
to the attack sources in order to mitigate the attack by effective 
filtering or rate-limiting. Therefore, instead of having coverage of 
all routers within a domain such as a campus network, it is suffice 
to  perform  monitoring  at  strategic  points  such  as  nodes  in  the 
network  where  incoming  and  outgoing  traffic  will  definitely 
traverse.  To  pin-point  the  strategic  points,  we  classify  attackers 
into internal (e.g. zombies within the victim network) or external. 
Ingress  routers  are the strategic points to perform monitoring or 
traffic  sampling  to  trace  external  attackers.  However,  for  the 
internal  attackers,  we  have  to  know  the  network  topology  to 
perform monitoring on the routers one hop away from the victim. 
By  reducing  the  number  of  routers  participating  in  the  traffic 
sampling and flow exporting, the workload and overhead traffic is 
significantly  reduced.  This  is  a  very  important  enhancement 
considering  that  traceback  is  to  be  performed  during  the 
occurrence of a DDoS attack when the victim’s network is under 
heavy load. Another advantage of this scheme is due to the small 
number  of  routers  involved,  a  single  Traceback  Manager  with 
built-in WL caching functionality could be in charge of the whole 
network,  therefore  consolidating  the  information  storage  and 
processing at a central point. This would allow faster processing 
and  a  global  view  of  the  traffic  flows  in  the  domain,  making  it 
easier to identify anomalous flows.  
4.  DEPLOYMENT CONSIDERATIONS 
Our traceback approach is non-intrusive, in that it is not necessary 
to  make  any  changes  to  the  routers  assisting  in  the  traceback 
process. Built-in traffic sampling/monitoring and exporting tools 
in  routers  could  be  used  to  sample  and  report  the  required 
information to the WL caching devices. If such tools are not built 
in the routers, we can instead make use of monitoring devices by 
installing them along the network paths.  
An  important  issue  is  when  to  suspend  the  learning  process  in 
order to prevent records of the attack traffic flow being included 
in the white list, thereby corrupting it. The DDoS attack detection 
mechanism triggers  traceback and  stops the learning  process. As  
372
there  will  always  be  a  finite  delay  in  detecting  an  attack,  the 
records of sampled traffic are first written in to a whitelist buffer. 
The  interval  for  the  buffer  to  confirm  entries  into  the  white  list 
cache depends on the attack detection speed. For example, if the 
attack  detection  mechanism  takes  x  secs  and  the  time  to  inform 