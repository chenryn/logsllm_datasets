    class CustomFactory(ModelFactory[Any]):
        """Tweak the ModelFactory to add our custom mocks."""
        @classmethod
        def get_mock_value(cls, field_type: Any) -> Any:
            """Add our custom mock value."""
            if str(field_type) == "my_super_rare_datetime_field":
                return cls._get_faker().date_time_between()
            return super().get_mock_value(field_type)
    ```
    Where `cls._get_faker()` is a `faker` instance that you can use to build your
    returned value.
* New: [Solve W1514 pylint error.](python_code_styling.md#w1514-set-encoding-on-open)
    ```python
    with open('file.txt', 'r', encoding='utf-8'):
    ```
* Correction: Deprecate in favour of Streamlit.
    [Streamlit](https://docs.streamlit.io/) is a much more easy, beautiful
    and clean library for the same purpose.
* New: [Running process in background.](python_sh.md#running-in-background)
    By default, each running command blocks until completion. If you have
    a long-running command, you can put it in the background with the `_bg=True`
    special kwarg:
    ```python
    sleep(3)
    print("...3 seconds later")
    p = sleep(3, _bg=True)
    print("prints immediately!")
    p.wait()
    print("...and 3 seconds later")
    ```
    You’ll notice that you need to call `RunningCommand.wait()` in order to exit
    after your command exits.
    Commands launched in the background ignore `SIGHUP`, meaning that when their
    controlling process (the session leader, if there is a controlling terminal)
    exits, they will not be signalled by the kernel. But because `sh` commands launch
    their processes in their own sessions by default, meaning they are their own
    session leaders, ignoring `SIGHUP` will normally have no impact. So the only time
    ignoring `SIGHUP` will do anything is if you use `_new_session=False`, in which case
    the controlling process will probably be the shell from which you launched
    python, and exiting that shell would normally send a `SIGHUP` to all child
    processes.
    If you want to terminate the process use `p.kill()`.
* New: [Output callbacks.](python_sh.md#output-callbacks)
    In combination with `_bg=True`, `sh` can use callbacks to process output
    incrementally by passing a callable function to `_out` and/or `_err`. This callable
    will be called for each line (or chunk) of data that your command outputs:
    ```python
    from sh import tail
    def process_output(line):
        print(line)
    p = tail("-f", "/var/log/some_log_file.log", _out=process_output, _bg=True)
    p.wait()
    ```
    To “quit” your callback, simply `return True`. This tells the command not to call
    your callback anymore. This does not kill the process though see [Interactive
    callbacks](#interactive-callbacks) for how to kill a process from a callback.
    The line or chunk received by the callback can either be of type str or bytes. If the output could be decoded using the provided encoding, a str will be passed to the callback, otherwise it would be raw bytes.
### [HTML](python_package_management.md)
* New: Tweak Poetry evaluation and add PDM.
    Check [PDM's](python_package_management.md#pdm) review, it's awesome!
* New: Sum up the W3 HTML tutorial.
* New: [HTML beautifier.](html.md#html-beautifier)
    If you encounter html code that it's not well indented  you can use [html beautify](https://htmlbeautify.com).
### [CSS](css.md)
* New: Sum up the W3 CSS tutorial.
* New: [CSS Flexbox layout.](css.md#flexbox-layout)
    The Flexbox Layout aims at providing a more efficient way to lay out, align and
    distribute space among items in a container, even when their size is unknown
    and/or dynamic.
### [Javascript](fastapi.md)
* New: [Resolve the 307 error.](fastapi.md#resolve-the-307-error)
    Probably you've introduced an ending `/` to the endpoint, so instead of asking
    for `/my/endpoint` you tried to do `/my/endpoint/`.
* New: [Resolve the 422 error.](fastapi.md#resolve-the-422-error)
    You're probably passing the wrong arguments to the POST request, to solve it see
    the `text` attribute of the result. For example:
    ```python
    result = client.post(
        "/source/add",
        json={"body": body},
    )
    result.text
    ```
    The error is telling us that the required `url` parameter is missing.
* New: [Resolve the 409 error.](fastapi.md#resolve-the-409-error)
    Probably an exception was raised in the backend, use `pdb` to follow the trace
    and catch where it happened.
* New: Use ternary conditional operator.
    It's defined by a condition followed by a question mark `?`, then an
    expression to execute if the condition is truthy followed by a colon `:`, and
    finally the expression to execute if the condition is falsy.
    `condition ? exprIfTrue : exprIfFalse`
    ```javascript
    function getFee(isMember) {
      return (isMember ? '$2.00' : '$10.00');
    }
    console.log(getFee(true));
    // expected output: "$2.00"
    console.log(getFee(false));
    // expected output: "$10.00"
    console.log(getFee(null));
    // expected output: "$10.00"
    ```
* New: [Filter the contents of an array.](javascript.md#filter-the-contents-of-an-array)
    The `filter()` method creates a new array filled with elements that pass a test
    provided by a function.
    The `filter()` method does not execute the function for empty elements.
    The `filter()` method does not change the original array.
    For example:
    ```javascript
    const ages = [32, 33, 16, 40];
    const result = ages.filter(checkAdult);
    function checkAdult(age) {
      return age >= 18;
    }
    ```
* New: [Interacting with HTML.](javascript.md#interacting-with-html)
* New: [Add endpoints only on testing environment.](fastapi.md#add-endpoints-only-on-testing-environment)
    Sometimes you want to have some API endpoints to populate the database for end
    to end testing the frontend. If your `app` config has the `environment`
    attribute, you could try to do:
    ```python
    app = FastAPI()
    @lru_cache()
    def get_config() -> Config:
        """Configure the program settings."""
        # no cover: the dependency are injected in the tests
        log.info("Loading the config")
        return Config()  # pragma: no cover
    if get_config().environment == "testing":
        @app.get("/seed", status_code=201)
        def seed_data(
            repo: Repository = Depends(get_repo),
            empty: bool = True,
            num_articles: int = 3,
            num_sources: int = 2,
        ) -> None:
            """Add seed data for the end to end tests.
            Args:
                repo: Repository to store the data.
            """
            services.seed(
                repo=repo, empty=empty, num_articles=num_articles, num_sources=num_sources
            )
            repo.close()
    ```
    But the injection of the dependencies is only done inside the functions, so
    `get_config().environment` will always be the default value. I ended up doing
    that check inside the endpoint, which is not ideal.
    ```python
    @app.get("/seed", status_code=201)
    def seed_data(
        config: Config = Depends(get_config),
        repo: Repository = Depends(get_repo),
        empty: bool = True,
        num_articles: int = 3,
        num_sources: int = 2,
    ) -> None:
        """Add seed data for the end to end tests.
        Args:
            repo: Repository to store the data.
        """
        if config.environment != "testing":
            repo.close()
            raise HTTPException(status_code=404)
        ...
    ```
* New: [Coalescent operator.](javascript.md#coalescent-operator)
    Is similar to the Logical `OR` operator (`||`), except instead of relying on
    truthy/falsy values, it relies on "nullish" values (there are only 2 nullish
    values, `null` and `undefined`).
    This means it's safer to use when you treat falsy values like `0` as valid.
    Similar to Logical `OR`, it functions as a control-flow operator; it evaluates to the first not-nullish value.
    It was introduced in Chrome 80 / Firefox 72 / Safari 13.1. It has no IE support.
    ```js
    console.log(4 ?? 5);
    // 4, since neither value is nullish
    console.log(null ?? 10);
    // 10, since 'null' is nullish
    console.log(undefined ?? 0);
    // 0, since 'undefined' is nullish
    // Here's a case where it differs from
    // Logical OR (||):
    console.log(0 ?? 5); // 0
    console.log(0 || 5); // 5
    ```
### [Qwik](python_profiling.md)
* New: Added memray profiling tool.
    [memray](https://bloomberg.github.io/memray/) looks very promising.
* New: Introduce Qwik.
    [Qwik](https://qwik.builder.io) is a new kind of web framework that can deliver
    instantly load web applications at any size or complexity. Your sites and apps
    can boot with about 1kb of JS (regardless of application complexity), and
    achieve consistent performance at scale.
    You can see a good overview in the [Qwik
    presentation](https://www.youtube.com/watch?v=0dC11DMR3fU&t=154s).
### [JWT](jwt.md)
* New: Introduce JWT.
    [JWT](https://en.wikipedia.org/wiki/JSON_Web_Token) (JSON Web Token) is
    a proposed Internet standard for creating data with optional signature and/or
    optional encryption whose payload holds JSON that asserts some number of claims.
    The tokens are signed either using a private secret or a public/private key.
### [Pytest](pytest_httpserver.md)
* New: Introduce `pytest-httpserver`.
    [pytest-httpserver](https://pytest-httpserver.readthedocs.io/en/latest/index.html)
    is a python package which allows you to start a real HTTP server for your tests.
    The server can be configured programmatically to how to respond to requests.
* New: [Add issue when using `updated_parser`.](feedparser.md#issues)
    [Deprecation warning when using `updated_parsed`](https://github.com/kurtmckee/feedparser/issues/151)
* Correction: Update the tmpdir_factory type hints.
    You should now use `TempPathFactory` instead of `TempdirFactory`
* Correction: [Use `pytest-freezegun` globally.](pytest.md#global-usage)
    [Most of the tests](https://medium.com/@boxed/flaky-tests-part-3-freeze-the-world-e4929a0da00e)
    work with frozen time, so it's better to freeze it by default and unfreeze it on
    the ones that actually need time to move.
    To do that set in your `tests/conftest.py` a globally used fixture:
    ```python
    if TYPE_CHECKING:
        from freezegun.api import FrozenDateTimeFactory
    @pytest.fixture(autouse=True)
    def frozen_time() -> Generator['FrozenDateTimeFactory', None, None]:
        """Freeze all tests time"""
        with freezegun.freeze_time() as freeze:
            yield freeze
    ```
* New: Ignore a warning of a specific package.
    In the `pyproject.toml`
    ```toml
    filterwarnings = [
      "error",
      # Until https://github.com/ktosiek/pytest-freezegun/issues/35 is merged
      "ignore::DeprecationWarning:pytest_freezegun.*"
    ]
    ```
* New: [Run tests in a random order.](pytest.md#run-tests-in-a-random-order)
    `pytest-random-order` is a pytest plugin that randomises the order of tests.
    This can be useful to detect a test that passes just because it happens to run
    after an unrelated test that leaves the system in a favourable state.
    To use it add the `--random-order` to your pytest run.
    It [can't yet be used](https://github.com/jbasko/pytest-random-order/issues/46)
    with `pytest-xdist` though :(.
* New: [Enforce serial execution of related tests.](pytest.md#enforce-serial-execution-of-related-tests)
    Implement a `serial` fixture with a session-scoped file `lock` fixture using the
    `filelock` package. You can add this to your `conftest.py`:
    ```python
    import contextlib
    import os
    import filelock
    @pytest.fixture(scope='session')
    def lock(tmp_path_factory):
        base_temp = tmp_path_factory.getbasetemp()
        lock_file = base_temp.parent / 'serial.lock'
        yield filelock.FileLock(lock_file=str(lock_file))
        with contextlib.suppress(OSError):
            os.remove(path=lock_file)
    @pytest.fixture()
    def serial(lock):
        with lock.acquire(poll_intervall=0.1):
            yield
    ```
    Then inject the `serial` fixture in any test that requires serial execution. All
    tests that use the serial fixture are executed serially while any tests that do
    not use the fixture are executed in parallel.
* New: [Using fixtures at class level.](pytest.md#using-fixtures-at-class-level)
    Sometimes test functions do not directly need access to a fixture object. For
    example, tests may require to operate with an empty directory as the current
    working directory but otherwise do not care for the concrete directory.
    ```python
    @pytest.mark.usefixtures("cleandir")
    class TestDirectoryInit:
        ...
    ```
    Due to the `usefixtures` marker, the `cleandir` fixture will be required for the
    execution of each test method, just as if you specified a `cleandir` function
    argument to each of them.
    You can specify multiple fixtures like this:
    ```python
    @pytest.mark.usefixtures("cleandir", "anotherfixture")
    ```
* Correction: Improve the snippet to run some tests in serial instead of parallel.
* New: [Parse a feed from a string.](feedparser.md#parse-a-feed-from-a-string)
    ```python
    >>> import feedparser
    >>> rawdata = """
    Sample Feed
    """
    >>> d = feedparser.parse(rawdata)
    >>> d['feed']['title']
    u'Sample Feed'