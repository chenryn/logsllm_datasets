# Web Service Interoperability: An Experimental Evaluation

## Introduction
This document evaluates the interoperability of different web service frameworks through a comprehensive experimental campaign. The study covers three major server-side WS frameworks and eleven client-side frameworks, deploying thousands of services with various native data types for input and output variables.

## Results and Observations

### Generation Process
The generation process either proceeds without warnings or fails due to serious issues in the artifact code. Most compilation failures are attributed to incorrect variable names, naming collisions, or duplicate variables within specific groups of services.

### Tool Maturity and Behavior
- **Mature Tools**: The client artifact generation tools provided with Metro, JBossWS, Apache CXF, gSOAP, and C# .NET are quite mature. They fail almost exclusively when encountering non-WS-I compliant WSDL documents and do not produce code that results in compilation errors.
- **Immature Tools**: PHP and Python tools exhibit similar behavior but lack a compilation step. Their performance will be further tested during the Communication and Execution steps.
- **Problematic Tools**: The JScript .NET client artifact generator is particularly problematic, often failing to generate necessary functions for server communication. This issue was observed with JBoss, GlassFish, and .NET framework services, indicating inter-operation problems even within the same platform. The Visual Basic .NET tool also had issues with variable naming collisions for some services on its own platform.

### Specific Tool Issues
- **gSOAP and JScript .NET**: These tools produce generation errors for WSDL documents that pass the WS-I check. For gSOAP, this is due to inconsistent inter-operation between the two client artifact generation tools. However, artifacts generated by gSOAP compile without errors or warnings.
- **Axis Frameworks**: Axis 1 is less mature, possibly due to a lack of recent updates. Axis 2 shows some compilation errors with services that have passed WS-I tests and are consumed by other platforms without issues. These errors are due to the incorrect generation of code containing duplicate variables.

### Technical Examples of Disclosed Issues

#### 1) WSDL Generation
- **GlassFish and JBoss**: Successfully deploy two services that do not pass the WS-I check, causing warnings or errors in all client artifact generators except Zend (which produces an uncommon data structure).
- **JBoss**: Deploys two other services that pass the WS-I check but provide no operations to be invoked. These services are unusable by several platforms, while Zend and Suds generate client objects without methods.

#### 2) Client Artifact Generation
- **.NET Platform**: Eighty services fail the WS-I compliance test, with seventy-six producing errors that prevent client generation for Metro, Apache CXF, and JBoss. These errors can be resolved with manual customization of data type bindings, but require precise knowledge from the developer.
- **WS-I Compliant Services**: Two services that pass the WS-I tests produce similar errors due to the use of the `s:any` tag.

#### 3) Client Artifact Compilation
- **Axis1**: Artifacts generated for Metro and JBossWS services result in 889 compilation errors, primarily due to incorrect naming of attributes inside the generated class. Renaming the attribute fixes the issue.
- **Axis2**: Shows five compilation errors, with two related to the `javax.xml.datatype.XMLGregorianCalendar` class, caused by wrong parameter naming.
- **VB.Net**: Fails to compile four services on the .NET framework due to a collision where a parameter and a method share the same name.

## Conclusion and Future Work
The main motivation behind web service technologies is to achieve inter-operation among different service providers and consumers. Our results show that full inter-operation is not yet achieved, with 1583 situations leading to interoperability errors. Even interactions within the same framework were not always possible, highlighting serious failures in claimed interoperability. Future work will include testing WS frameworks during the communication and execution phase and expanding the setup to cover more complex services and additional server-side frameworks.

## Acknowledgements
This work was partially supported by several projects, including ICIS, CECRIS, IAPP, and DEVASSES, under the EU Seventh Framework Programme (FP7).

## References
[References listed as in the original text]

---

This version of the text is more structured and professional, with clear headings and subheadings for better readability and coherence.