0 
0 
0 
0 
0 
- 
- 
0 
2248 
2248 
0 
0 
0 
0 
0 
0 
0 
0 
1a) 
1a) 
1a) 
1a) 
1a) 
2 a),b) 
2 a),b) 
2 a),b) 
1b) 
0 
1a) 
3g) 
3 
0 
3g) 
3g) 
0 
0 
0 
13f) 
0 
0 
0 
477 
1 
0 
0 
0 
1 
50 
0 
- 
- 
0 
412 
1 
0 
0 
0 
1 
50 
0 
0 
0 
0 
0 
1h) 2g) 
0 
0 
0 
4 
301 
- 
- 
328328328
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:26:18 UTC from IEEE Xplore.  Restrictions apply. 
This shows that either the generation process goes perfectly 
(and  also  without  warnings),  or  it  fails  in  result  of  serious 
problems  in  the  artifacts  code.  Most  of  the  compilation 
failures detected are due to wrong variables names, naming 
collisions or duplicate variables in within specific groups of 
services (see next section for examples of disclosed issues).  
We  would  also  like  to  emphasize  the  huge  behavior 
differences  shown  by  the  different  tools.  The  client  artifact 
generation tools provided with the tested versions of Metro, 
JBossWS, Apache CXF, gSOAP, and C# .NET appear to be 
quite mature as they fail almost only in presence of non WS-
I  compliant  WSDL  documents.  Moreover,  failures  are 
always  in  the  generation  phase  and  these  tools  never 
produced  code  that  later  results  in  compilation  errors  or 
warnings. In addition, the two client artifact generation tools 
for PHP and Python have a similar behavior, but they lack 
the  compilation  step.  Their  behavior  will  be  more 
extensively  tested  when  we  assess  the  Communication  and 
Execution steps (see the future work section for details).  
(although 
they  are  being  used 
Some of the tested tools appear to be at a quite immature 
stage 
in  production 
environments).  One  of  the  most  problematic  tools  was  the 
JScript .NET client artifact generator, where in many cases 
the tool did not produce the necessary functions to provide 
communication with the server. The interesting aspect is that 
we  observed  this  behavior  when  generating  artifacts  for 
some  of  the  JBoss  and  GlassFish  services,  but  also  for  the 
.NET  framework  services  (including  tool  crashes  in  this 
latter case). This indicates that inter-operation problems can 
sometimes  occur,  even  within  the  same  platform  (and 
although  using  different  languages).  Similarly,  the  Visual 
Basic  .NET  tool  had  issues  with  4  services  of  its  own 
platform,  generating  code  with  variable  naming  collisions. 
We  would  expect  good  inter-operation  between  the  client 
subsystem and the server subsystem of the same framework, 
but this is not always the case. 
The  gSOAP  client  artifact  generator,  along  with  the 
JScript .NET generation tool, are the only tools that produce 
generation  errors  for  WSDL  documents  that  pass  the  WS-I 
check. In the case of gSOAP, the error is due to inconsistent 
inter-operation  between  the  two  client  artifact  generation 
tools.  On  the  other  hand,  the  artifacts  generated  by  this 
framework are always compiled without errors or warnings. 
The Axis frameworks are quite mature and well known 
among  researchers  and  practitioners.  Axis  1  appears  to  be 
among 
tools, 
probably  due  to  the  lack  of  recent  updates.  The  Axis  2 
platform  shows  some  compilation  errors  that  occur  with 
services that have successfully passed the WS-I tests and are 
consumed  by  other  platforms  without  encountering  similar 
problems. These errors are due to the incorrect generation of 
code containing duplicate variables. 
B.  Technical Examples of Disclosed Issues 
interoperable  client  generation 
less 
the 
In addition to the issues described in the previous section, 
we  now  describe  a  few  technical  examples  of  problems 
found during the 3 key steps of our experimental evaluation. 
1)  WSDL generation  
GlassFish and JBoss successfully deploy two services that 
do not pass the WS-I check. All the client artifacts generators 
produce warnings or errors with these two services, with the 
exception of Zend (that nevertheless produces an uncommon 
data  structure  in  the  generated  client,  which  may  be 
problematic  in  the  following  steps  of  the  inter-operation). 
JBoss  also  deploys  two  other  services  that  pass  the  WS-I 
check  but  provide  no  operations  to  be  invoked.  These  two 
services are unusable by Metro, Axis2, .NET (for C# Visual 
Basic  and  JScript),  and  gSOAP  while  the  Zend  and  Suds 
platforms  generated  client  objects  without  methods.  It  is 
worth noting GlassFish refused to deploy these two services. 
2)  Client artifact generation 
Eighty of the services deployed in the .NET platform fail 
the WS-I compliance test (all services based on classes from 
the  same  packages).  Seventy-six  of  these  services  produce 
errors  that  prevent  generation  of  clients  for  Metro,  Apache 
CXF and JBoss (while Suds only has problems with one of 
these  services).  These  tools  have  problems  in  the  Client 
Artifact Generation Step because some XML tags used in the 
WSDL (s:schema, s:lang) are not recognized. It is interesting 
to  note  that  two  other  services  that  pass  the  WS-I  tests 
produce very similar errors for the use of the s:any tag. We 
have also to highlight that all the errors in this group (those 
resulting from the 76 non WS-I compliant services and also 
from  3  WS-I  compliant  services)  can  be  solved  by  using 
manual  customization  of  the  data  type  bindings  [29], 
however  the  client  developer  has  to  know  precisely  which 
binding 
in  an 
interoperability problem. 
to  define,  which  may  again 
3)  Client artifact compilation 
Axis1  artifacts  generated  for  Metro  and  JBossWS 
services  resulted  in  889  artifact  compilation  errors.  The 
services that use Java Exception and Error classes result in a 
compilation issue that appears to be caused by the incorrect 
naming of an attribute inside the generated class that should 
wrap the Error or Exception. Renaming the attribute fixes the 
compilation  issue  (although  obviously  we  would  need  the 
Communication and Execution steps to verify the correctness 
of  the  bug  fix).  The  Axis2  platform  shows  5  compilation 
errors,  of  which  2  account  for  the  services  that  use  the 
javax.xml.datatype.XMLGregorianCalendar  class.  Also  in 
this case the error seems to be caused by the wrong naming 
of a parameter. Parameters in artifacts linked to classes in the 
same 
convention 
“local_suffixName”,  while  in  this  case  the  parameter  is 
missing the suffix. Similarly, the VB.Net client artifacts fail 
to  compile  4  services  on  the  .NET  framework  (that  use 
classes  from  the  System.Web.UI.WebControls  namespace). 
The  problem  seems  to  be  an  erroneous  generation  of  the 
code of the artifacts where a parameter and a method share 
the same name leading to a collision. 
package 
naming 
follow 
result 
the 
V.  CONCLUSION AND FUTURE WORK 
The main motivation behind web service technologies is 
based  on  the  concept  of  inter-operation  of  different  service 
providers  and  consumers.  In  this  work  we  test  the  inter-
operation of different web service frameworks and perform a 
329329329
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:26:18 UTC from IEEE Xplore.  Restrictions apply. 
massive  experimental  campaign  involving  3  major  server 
side WS frameworks subsystems and eleven different client 
side  frameworks  subsystems.  We  deployed  thousands  of 
different  services  covering  the  widest  range  possible  of 
native  data  types  for  the  input  and  output  variables  of  the 
services,  resulting  in  79629  tests  covering  interoperability-
critical steps in typical WS environments.  
Results  show  that  inter-operation  between  different 
frameworks is not yet fully achieved and that there are many 
cases where inter-operation is not possible due to errors both 
on the server and client side of the frameworks. Even though 
our  tests  use  only  services  with  a  simple  structure  we 
encountered  1583  situations  that  led  to  interoperability 
errors.  We  have  also  encountered  many  cases  (307)  where 
even  the  interaction  of  clients  and  services  of  the  same 
framework  was  not  possible.  It  is  very  important  to 
emphasize  that  each  of  the  errors  we  have  identified 
represents a serious failure of the claimed interoperability of 
the web service technologies. In this context, even a single 
interoperability error should be considered unacceptable, as 
it  represents  a  situation  where  a  client  is  prevented  from 
using  a  service  because  of  a  flaw  in  one  of  the  involved 
frameworks. Moreover we observed that all the three server 
platforms under test, deployed services that do not pass WS-I 
compliance  checks  and  among  those  that  pass,  some  still 
present interoperability issues. 
In future work we intend to test WS frameworks during 
the  communication  and  execution  phase  to  test  the  whole 
inter-operation  lifecycle.  Moreover,  we  plan  to  widen  our 
setup  by  increasing  the  number  of  server  side  frameworks 
and use services with a higher level of complexity to cover 
more elaborate patterns of inter-operation. 
VI.  ACKNOWLEDGEMENT 
This  work  has  been  partially  supported  by  the  Project 
ICIS  -  Intelligent  Computing  in  the  Internet  of  Services, 
number 4774, of the program  CENTRO-SCT-2011-02, and 
by the projects CErtification of CRItical Systems (CECRIS), 
Marie  Curie  Industry-Academia  Partnerships  and  Pathways 
(IAPP)  number  324334;  and  DEsign,  Verification  and 
VAlidation  of 
large-scale,  dynamic  Service  SystEmS 
(DEVASSES),  Marie  Curie  International  Research  Staff 
Exchange Scheme (IRSES) number 612569, both within the 
context of the EU Seventh Framework Programme (FP7). 
REFERENCES 
[1]  A. Stevenson and M. Waite, Eds., Concise Oxford English dictionary. 
Oxford; New York: Oxford University Press, 2011.  
in 
for 
[2]  S.  Szykman,  S.  J.  Fenves,  W.  Keirouz,  and  S.  B.  Shooter,  “A 
foundation 
product 
development systems,” Comput.-Aided Des., vol. 33, no. 7, pp. 545–
559, Jun. 2001.  
next-generation 
interoperability 
[3]  F.  Curbera,  M.  Duftler,  R.  Khalaf,  W.  Nagy,  N.  Mukhi,  and  S. 
Weerawarana, “Unraveling the Web services web: an introduction to 
SOAP, WSDL, and UDDI,” IEEE Internet Comput., vol. 6, no. 2, pp. 
86–93, Apr. 2002.  
[4]  K.  M.  Senthil  Kumar,  Akash  Saurav  Das,  and  Srinivas 
Padmanabhuni, “WS-I Basic Profile: a practitioner’s view,” in IEEE 
International  Conference  on  Web  Services  (ICWS  2004),  2004,  pp. 
17–24.  
[5]  P.  Ramsokul  and  A.  Sowmya,  “A  Sniffer  Based  Approach  to  WS 
in  The  Fifth  International 
Protocols  Conformance  Checking,” 
Symposium  on  Parallel  and  Distributed  Computing,  2006.  ISPDC 
’06, 2006, pp. 58–65.  
[6]  A. Bertolino and A. Polini, “The audition framework for testing Web 
services  interoperability,”  in  31st  EUROMICRO  Conference  on 
Software  Engineering  and  Advanced  Applications,  2005,  2005,  pp. 
134–142.  
[7]  H.  R.  M.  Nezhad,  B.  Benatallah,  F.  Casati,  and  F.  Toumani,  “Web 
services interoperability specifications,” Computer, vol. 39, no. 5, pp. 
24–32, 2006.  
[8]  C.  Pautasso,  O.  Zimmermann,  and  F.  Leymann,  “Restful  Web 
Services  vs.  ‘Big’’  Web  Services:  Making  the  Right  Architectural 
Decision,”  in  Proceedings  of  the  17th  International  Conference  on 
World Wide Web, New York, NY, USA, 2008, pp. 805–814  
[9]  “Web  Services 
Interoperability  Organization 
(WS-I),”  2002.  
[Online]. Available: http://www.ws-i.org/.  
[10]  Oracle, “Metro,” 2013.  [Online]. Available: https://metro.java.net/.  
[11]  Red  Hat  Middleware,  “JBoss  Web  Services  (JBossWS).”    [Online]. 
Available: http://www.jboss.org/jbossws. 
[12]  D.  Chappell,  “Introducing  Windows  Communication  Foundation  in 
Available: 
.NET 
[Online]. 
http://msdn.microsoft.com/en-us/library/ee958158.aspx. 
Framework 
2009. 
[13]  “GlassFish”  [Online]. Available: https://glassfish.java.net 
[14]  Red  Hat  Middleware,  “JBoss  Application  Server,”  2013.    [Online]. 
4,” 
Available: http://www.jboss.org/jbossas/. 
[15]  Microsoft Corporation, “IIS 8.0 Express,” 2013.  [Online]. Available: 
http://www.microsoft.com/en-us/download/details.aspx?id=34679.  
[16]  Apache  Software  Foundation,  “Apache  Axis,”  2008.    [Online]. 
Available: http://ws.apache.org/axis/. 
[17]  Apache  Software  Foundation,  “Apache  Axis2,”  2012.    [Online]. 
Available: http://axis.apache.org/axis2/java/core/. [Accessed: 07-Dec-
2013] 
[18]  Apache  Software  Foundation,  “Apache  CXF,”  2013.    [Online]. 
Available: http://cxf.apache.org/. [Accessed: 07-Dec-2013] 
[19]  R.  van  Engelen,  “gSOAP:  SOAP  C++  Web  Services,”  2013.  
http://www.cs.fsu.edu/~engelen/soap.html. 
[Online].  Available: 
[Accessed: 07-Dec-2013] 
[20]  Zend Technologies, “Zend Framework,” 2013.  [Online]. Available: 
[22]  I.  A.  Elia,  N.  Laranjeiro,  and  M.  Vieira,  “Interoperability  Tool  and 
Results.”  [Online]. Available: http://eden.dei.uc.pt/~ivanoe/DSN14/ 
[23]  K.  Ballinger,  D.  Ehnebuske,  M.  Gudgin,  M.  Nottingham,  and  P. 
Yendluri,  “WS-I  Basic  Profile  -  Version  1.0,”  2004.    [Online]. 
Available: http://www.ws-i.org/Profiles/BasicProfile-1.0.html.  
[24]  Massimo  Pezzini,  Yefim  V.  Natis,  Kimihiko  Iijima,  Daniel  Sholler, 
and  Raffaella  Favata,  “Gartner’s  Magic  Quadrant  for  Enterprise 
Application  Servers,”  Gartner,  Sep.  2011  [Online].  Available: 
https://www.gartner.com/doc/1804114/magic-quadrant-enterprise-
application-servers 
[25]   “GNU 
Wget.” 
[Online]. 
Available: 
http://www.gnu.org/software/wget/manual/wget.html 
[26]  Oracle,  “Java  SE  7  API  Specification,”  2013.    [Online].  Available: 
http://docs.oracle.com/javase/7/docs/api/.  
[27]  “.NET  Framework  Class  Library  (C#).” 
  [Online].  Available: 
http://msdn.microsoft.com/en-us/library/gg145045(v=vs.100).aspx 
[28]  E. Christensen, F. Curbera, G. Meredith, and S. Weerawarana, “Web 
Service  Definition  Language  (WSDL),”  2001.    [Online].  Available: 
http://schemas.xmlsoap.org/wsdl/.  
[29]  V.  Pandey,  “How  to  deal  with  unresolved  xs:schema  references  in 
Available: 
WSDL.” 
https://weblogs.java.net/blog/vivekp/archive/2007/05/how_to_deal_w
it.html.  
[Online]. 
[21]  J.  Ortel,  “Suds  -  Lightweight  SOAP  client.”    [Online].  Available: 
http://framework.zend.com/. 
https://fedorahosted.org/suds. 
330330330
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:26:18 UTC from IEEE Xplore.  Restrictions apply.