# 【技术分享】如何枚举Windows中的进程、线程以及映像加载通知回调例程
|
##### 译文声明
本文是翻译文章，文章来源：triplefault.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
****
大多数人都知道，Windows包含内核模式下的各种回调例程，驱动开发者可以使用这些例程接收各种事件通知。本文将介绍其中某些函数的工作机制。具体说来，我们会研究进程创建及终止回调例程（[nt!PsSetCreateProcessNotifyRoutine](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559951\(v=vs.85\).aspx)、
[nt!PsSetCreateProcessNotifyRoutineEx](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559953\(v=vs.85\).aspx)和[nt!PsSetCreateProcessNotifyRoutineEx2](https://msdn.microsoft.com/en-us/library/windows/hardware/mt805891\(v=vs.85\).aspx)）、线程创建及终止回调例程（[nt!PsSetCreateThreadNotifyRoutine](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559954\(v=vs.85\).aspx)和[nt!PsSetCreateThreadNotifyRoutineEx](https://msdn.microsoft.com/en-us/library/windows/hardware/dn957857\(v=vs.85\).aspx)）以及映像加载通知回调例程（[nt!PsSetLoadImageNotifyRoutine](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559957\(v=vs.85\).aspx)）的内部工作原理。此外，我们也会提供一个便于操作的WinDbg脚本，你可以利用这个脚本枚举这几种回调例程。
如果你想跟随本文的脚步，我建议你跟我一样使用Windows x64
10.0.15063（创造者更新版）中的系统文件。本文所使用的伪代码以及反汇编代码都是在这个发行版的基础上编写的。
如果你还没有搭建内核调试环境，不要担忧，我们给出了一个[教程](http://www.triplefault.io/2017/07/setting-up-kernel-debugging-using.html)，一步一步教你如何使用WindDbg以及VMware搭建基本的内核调试环境。
**二、回调例程的作用**
****
在某些事件发生时，驱动开发者可以使用这些回调例程来接收事件的通知。比如，[nt!PsSetCreateProcessNotifyRoutine](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559951\(v=vs.85\).aspx)这个基本的进程创建回调会注册一个用户定义的函数指针（“
**NotifyRoutine**
”），每当进程创建或者删除时，Windows都会调用这个函数指针。作为事件通知的一部分，用户提供的这个处理函数可以获得大量信息。在我们的演示案例中，这些信息包括父进程的PID（如果父进程存在的话）、实际进程的PID以及一个布尔值，标识进程处于创建还是终止状态。
安全软件可以利用这些回调来仔细检查主机上运行的代码。
**三、深入分析**
****
**3.1 已公开的API**
万事开头难，我们先得找个出发点。没有什么比官方文档中的函数更适合上手，我们选择的是[nt!PsSetCreateProcessNotifyRoutine](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559951\(v=vs.85\).aspx)这个函数。MSDN称这个例程自Windows
2000起就一直存在。[ReactOS](https://www.reactos.org/)似乎很早以前就已经[实现](https://doxygen.reactos.org/dd/dbe/psnotify_8c.html#a3253d05870ac48d9fa4c0886343d12cb)了这个例程。接下来，我们会具体分析从Windows
2000到现在的这17年中，这个函数发生过什么变化（如果这么多年这些函数的确发生过变化的话）。
    NTSTATUS __stdcall PsSetCreateProcessNotifyRoutine(PVOID NotifyRoutine, BOOLEAN Remove)
    {
      return PspSetCreateProcessNotifyRoutine(NotifyRoutine, Remove != 0);
    }
这个函数似乎会调用一个nt!PspSetCreateProcessNotifyRoutine例程。实际上，其他类似的函数（[nt!PsSetCreateProcessNotifyRoutineEx](https://msdn.microsoft.com/en-us/library/windows/hardware/ff559953\(v=vs.85\).aspx)及[nt!PsSetCreateProcessNotifyRoutineEx2](https://msdn.microsoft.com/en-us/library/windows/hardware/mt805891\(v=vs.85\).aspx)）也会调用这个例程：
唯一的区别在于传递给nt!PspSetCreateProcessNotifyRoutine的第二个参数。这些参数属于有效的标识符。在基础函数（
**nt!PsSetCreateProcessNotifyRoutine**
）中，根据“Remove”参数的状态，这些标识的值为1或者0。如果“Remove”为TRUE，那么Flags=1。如果“Remove”为FALSE，那么Flags=0。在扩展函数（
**nt!PsSetCreateProcessNotifyRoutineEx** ）中，这些标识的值为2或者3。
    NTSTATUS __fastcall PsSetCreateProcessNotifyRoutineEx(PVOID NotifyRoutine, BOOLEAN Remove)
    {
      return PspSetCreateProcessNotifyRoutine(NotifyRoutine, (Remove != 0) + 2);
    }
对于 **nt!PsSetCreateProcessNotifyRoutineEx2** 而言，这些标识的值为6或者7：
    NTSTATUS __fastcall PsSetCreateProcessNotifyRoutineEx2(int NotifyType, PVOID NotifyInformation, BOOLEAN Remove)
    {
      NTSTATUS result; // eax
      if ( NotifyType )                             // Only PsCreateProcessNotifySubsystems is supported.
        result = STATUS_INVALID_PARAMETER;
      else
        result = PspSetCreateProcessNotifyRoutine(NotifyInformation, (Remove != 0) + 6);
      return result;
    }
因此，我们可以推测出传递给nt!PspSetCreateProcessNotifyRoutine函数的标识符具体定义如下：
    #define FLAG_REMOVE_FROM_ARRAY 0x1
    // This is why flags from PsSetCreateProcessNotifyRoutineEx can have a value of 2 or 3
    // FLAG_IS_EXTENDED = 0x2
    // FLAG_IS_EXTENDED | FLAG_REMOVE_FROM_ARRAY = 0x3
    #define FLAG_IS_EXTENDED 0x2
    // This is why flags from nt!PsSetCreateProcessNotifyRoutineEx2 can have a value of 6 or 7
    // FLAG_IS_EXTENDED2 = 0x6
    // FLAG_IS_EXTENDED2 | FLAG_REMOVE_FROM_ARRAY = 0x7
    #define FLAG_IS_EXTENDED2 (0x4 | FLAG_IS_EXTENDED)
**3.2 未公开文档**
**nt!PspSetCreateProcessNotifyRoutine**
稍微有点复杂，该函数的具体定义如下，我建议你还是在另一个[窗口](https://gist.github.com/nmulasmajic/a14b2d51596a4c6fb261fc8f8e83b279)中好好阅读这段代码，便于理解。
    NTSTATUS __fastcall PspSetCreateProcessNotifyRoutine(PVOID NotifyRoutine, DWORD Flags)
    {
      BOOL bIsRemove;
      BOOL bIsExRoutine;
      DWORD UpperFlagBits;
      DWORD LdrDataTableEntryFlags;
      _EX_CALLBACK_ROUTINE_BLOCK *NewCallBackBlock;
      _ETHREAD *CurrentThread;
      size_t Index;
      _EX_CALLBACK_ROUTINE_BLOCK *CallBackBlock;
      // Copy over everything to UpperFlagBits from Flags, but bit 0.
      UpperFlagBits = ((DWORD)Flags & 0xFFFFFFFE);
      // Check if bit 1 is set. This will only be true if the caller is PsSetCreateProcessNotifyRoutineEx
      // or PsSetCreateProcessNotifyRoutineEx2.
      bIsExRoutine = (Flags & 2);
      // Bit 0 will be set if "Remove" == TRUE from the caller.
      bIsRemove = (Flags & 1);
      // Bit 0 is set. We want to remove a callback.
      if (bIsRemove)
      {
        // Disable APCs.
        CurrentThread = (_ETHREAD *)KeGetCurrentThread();
        --CurrentThread->Tcb.KernelApcDisable;
        Index = 0;
        while ( 1 )
        {
          CallBackBlock = ExReferenceCallBackBlock(&PspCreateProcessNotifyRoutine[Index]);
          if ( CallBackBlock )
          {
            if ( /* Is it the same routine? */ 
                 ExGetCallBackBlockRoutine(CallBackBlock) == NotifyRoutine
                 /* Is it the same type? e.g. PsSetCreateProcessNotifyRoutineEx vs PsSetCreateProcessNotifyRoutineEx2 vs PsSetCreateProcessNotifyRoutine. */
                 && (_DWORD)ExGetCallBackBlockContext(CallBackBlock) == (_DWORD)UpperFlagBits
                 /* Did we successfully NULL it out? */
                 && ExCompareExchangeCallBack(&PspCreateProcessNotifyRoutine[Index], NULL, CallBackBlock) )
            {
              // Decrement global count.
              if ( bIsExRoutine )
                _InterlockedDecrement(&PspCreateProcessNotifyRoutineExCount);
              else
                _InterlockedDecrement(&PspCreateProcessNotifyRoutineCount);
              ExDereferenceCallBackBlock(&PspCreateProcessNotifyRoutine[Index], CallBackBlock);
              KiLeaveCriticalRegionUnsafe(CurrentThread);
              ExWaitForCallBacks(CallBackBlock);
              ExFreePoolWithTag(CallBackBlock, 0);
              return STATUS_SUCCESS;
            }
            ExDereferenceCallBackBlock(&PspCreateProcessNotifyRoutine[Index], CallBackBlock);
          }
          Index++;
          // Maximum callbacks == 64
          if ( Index >= 0x40 )
          {
            KiLeaveCriticalRegionUnsafe(CurrentThread);
            return STATUS_PROCEDURE_NOT_FOUND; // Could not find entry to remove.
          }
        }
      }
      else // We want to add a callback.
      {
        if ( bIsExRoutine )
          LdrDataTableEntryFlags = 0x20; // "Ex" routine must have _KLDR_DATA_TABLE_ENTRY.IntegrityCheck bit set.
        else
          LdrDataTableEntryFlags = 0;
        if ( !MmVerifyCallbackFunctionCheckFlags(NotifyRoutine, LdrDataTableEntryFlags) )