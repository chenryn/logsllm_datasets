10000
d
e
d
u
l
c
n
i
s
e
g
d
e
t
c
n
i
t
s
i
d
f
o
r
e
b
m
u
N
0
0
distinct edges in BGP table
edges each vantage point contributes
5
10
15
20
25
30
35
Cumulative number of vantage points
Figure 2: Number of distinct edges in PG as a function of van-
tage points, using RouteViews data set.
ing table. For single-homed sites, we assume the routing table is
retrieved from the site’s ISP since the local table is likely to be un-
interesting. Both are possible by conﬁguring the router to treat the
overlay node as a read-only peer. The relevance of the site being
multi-homed (as opposed to single-homed) is that the routing table
on a multi-homed router contains roughly 120k preﬁxes, spanning
the roughly 15k autonomous systems in the Internet. This table,
therefore, can be treated as a source-rooted tree of autonomous sys-
tem (AS) paths to every other AS in the Internet.
3.1 Peering Graph
The ﬁrst primitive returns the peering graph (PG) for the Inter-
net.
PG = GetGraph()
This graph represents the coarse-grain (AS-level) connectivity of
the Internet, where each vertex in PG corresponds to an AS, and
each edge represents a peering relationship between ASes. The
Internet does not currently publish the complete PG, but it is easy to
construct an approximation of the PG by aggregating BGP routing
tables from multiple vantage points in the network, as is currently
done by sites like RouteViews [6] and FixedOrbit [1]. That is, an
edge exists between any two vertices X and Y in PG if some BGP
routing table contains a path in which ASes X and Y are adjacent.
Given access to a modest number of BGP routing tables, this
approximation contains nearly all the vertices (ASes) but is likely
to be incomplete in the number of edges (peering relationships) it
contains. For example, RouteViews aggregates BGP tables from
64 sites. One snapshot of BGP tables obtained from RouteViews
contains roughly 120k routes, from which we are able to produce
a PG with 14,381 vertices and 59,988 edges (29,944 bi-directional
edges). Since a BGP table contains downstream AS paths—i.e. AS
paths from the local router to arbitrary destinations—our strategy
to construct PG is to add bi-directional edges between X and Y
whenever we detect a path in either direction.
Although we could implement the GetGraph primitive by hav-
ing all the overlay nodes send the BGP table they acquire to a cen-
tralized aggregation point (similar to RouteViews), and then down-
load the result, it is possible for each overlay node to construct its
own version of PG independently, simply by exchanging its PG
with a small set of neighbors. As suggested by Figure 2—coupled
with our knowledge of the full RouteViews data set and the total
number of ASes in the Internet—aggregating BGP routing infor-
mation from 30-35 vantage points results in a fairly complete peer-
ing graph. This argues that the PG can be constructed using a ﬁxed
number of probes, independent of the number of overlay nodes in
the network. In addition, since the PG is only an approximation
and peering relationships change infrequently, this exchange can
be done with very low frequency, on the order of once a week.
3.2 Path Probe
A path between a pair of nodes in the PG represents a possible
route that packets might traverse from one AS to another, but only
one such path is actually selected by BGP routers. The second
primitive
Path = GetPath(src, dst)
returns the veriﬁed AS path traversed by packets sent from IP ad-
dress src to IP address dst. Note that this primitive maps a pair
of network preﬁxes to the sequence of AS numbers that connect
them, much like a BGP routing table maps a network preﬁx to an
AS path. Also, as will be seen shortly, we must limit the src and dst
to addresses of overlay nodes because we need a point-of-presence
within an AS in order to resolve this query.
Determining the actual AS path takes advantage of the BGP table
we assume is exported by the underlying Internet. A node consults
the local BGP table to answer queries for the case where src resides
in the local AS. In case the local AS is so large that it has several
BGP routers that use different BGP tables, src needs to be resolved
into clusters sharing the same BGP table. For a src that does not
reside in the local AS, the node forwards the query to an overlay
node in the corresponding AS that contains src. This has the cost of
a single probe. The local node also caches the reply for subsequent
requests.
In both cases, we need to translate IP addresses to AS num-
bers. This can be done by selecting the route in the BGP table
that matches a given IP address, and then inferring that the last AS
number on the path in that route is the AS that contains the node
with the given address.
3.3 Distance Probe
The ﬁnal primitive reports the distance from the local node to
some remote node target:
Distance = GetDistance(target, metric)
This query can report the latency using one of three metrics. First,
based on the locally available BGP table it can respond with the
number of AS hops from the local node to the remote node. Count-
ing AS hops is weakly correlated with actual latency [20], but it
may also be appropriate for applications that want to minimize
peering points traversed. Plus, it can be implemented at no cost.
Second, the local node can run traceroute to the target node (or
consult a Rocketfuel-generated network map) and report the num-
ber of router hops. The value in doing this is that router hop count is
more strongly correlated with latency than is AS hop count. Third,
the local node can ping the target node, and return the correspond-
ing round-trip time. The last two operations have the cost of one
probe, although the result can be cached and used to respond to
subsequent queries. Thus, this primitive is useful for discriminat-
ing among a set of nodes, but it may not be suitable for measuring
the instantaneous round-trip time.
3.4 Remarks
Note that the GetDistance primitive is parameterized to reﬂect
the resolution (accuracy) of the desired response: AS-hop-count,
router-hop-count, or RTT. Similar generalizations are also possi-
ble for the GetGraph and GetPath primitives. For example, Get-
Graph could be parameterized by both resolution (possible values
are AS-level, router-level, and physical-level) and scope (possi-
ble values are root, AS, and network). Our prototype implementa-
tion supports only the AS-level resolution and root scope, although
an implementation that exploited ISP mapping tools like Rocket-
fuel might be able to do better [29].
Similarly, GetPath could be parameterized by resolution, with
the same possible values as for GetGraph. In this case, the kernel
might take advantage of traceroute to implement the router-level
resolution. There is currently no good way to implement GetPath
with resolution at the physical-level.
The rest of this paper assumes AS-level resolution, with the goal
of understanding how much can be accomplished by exploiting the
BGP information already collected by the Internet.
4. LIBRARY OF ROUTING SERVICES
This section suggests three library services that can be built on
top of the topology probing layer. These services should be inter-
preted as representative examples, not a complete set. In particular,
we elect to focus on services that can be provided at relatively low
cost, where the interesting question to ask is how much information
they provide at little cost. We believe that these services provide a
useful foundation for a variety of overlay networks, as described in
Section 2.1.
4.1 Finding Disjoint Paths
Our ﬁrst routing service ﬁnds AS paths between two nodes that
do not share a peering point with the default Internet route between
the nodes. More speciﬁcally,
PathSet = DisjointPaths(u, v, N, k)
for a given pair of overlay nodes u and v and a set of candidate
intermediate nodes N, the service returns k paths between u and
v that (1) are edge-disjoint with respect to the default AS path be-
tween nodes u and v, and (2) pass through one of the intermediate
nodes in N. We refer to these k paths simply as disjoint paths. Dis-
joint paths can provide both resilience and performance to higher-
level overlay services, since it is unlikely that a disjoint path would
share a bottleneck or a single point of failure with the default AS
path. Additionally, paths involving a smaller number of AS hops
should be more resilient to BGP failure or route changes so our
service favors these paths over longer ones.
Note that, consistent with the results reported in [9], our expe-
rience is that single hop indirection gives us a good opportunity to
ﬁnd disjoint paths without complicating both disjoint path search
and actual routing. That is, using multiple intermediate nodes al-
most always resulted in longer paths.
4.1.1 Implementation
Our service implementation involves three phases: inferring AS
hop counts for indirect paths, trimming indirect paths that are not
disjoint based on local information, and querying remote nodes to
verify the inferences. Our goal is to minimize the number of queries
to a small subset of candidate nodes based on the results of earlier
phases.
First, we use the graph returned by GetGraph to guess the short-
est disjoint paths (u; w; v), i.e., the paths from u to v through some
node w such that w 2 N. We assume that the route chosen by BGP
always has the shortest number of AS hops. This is not always true
due to the administrative policy of each BGP router [25], but we
)
%
(
n
o
i
t
u
b
i
r
t
s
i
D
e
c
n
e
r
r
u
c
c
O
18
16
14
12
10
8
6
4
2
0
100
80
60
40
20
)
%
(
n
o
i
t
u
b
i
r
t
s
i
D
e
v
i
t
a
l
u
m
u
C
0
5
10
15
20
25
Number of Shortest Disjoint Paths
0
0
5
10
random
our method
20
15
Number of Candidates
25