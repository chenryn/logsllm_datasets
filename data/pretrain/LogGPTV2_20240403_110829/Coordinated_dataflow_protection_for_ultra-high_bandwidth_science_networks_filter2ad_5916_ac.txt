3) SciMon: The SciMon module builds contextual information at
host-process level to tag the flows originating from host DTNs and
enforces host and process-specific data policies in DTNs. It tracks
file’s accesses with each process instantiation and imposes file
access and network data-flow restrictions according to the rules in
process policy table. It continuously monitors the host processes, file
system accesses, and network IO events using open-source utilities,
such as psutils [37] and osquery [34]. As shown in Figure 16
(Appendix A.3), the process flow table consists of policy flow rules
Our threat model broadly considers various attacks such as data
exfiltration, spoofing attacks, and DDoS. CoordiNetZ protects the
SDMZ network from such attacks at switch (i.e., at the immediate
first-hop network node) with the help of tags inserted by the SciMon
application and context gathered from within the host and network.
These security use cases are described in more detail in Appendix A.2.
3.2 Threat Model
We adopt a simple threat model which assumes that: (i) a subset of
SDMZ users and administrators who program the SDMZ ecosystem
could be malicious resulting in embedding rogue policies within
a project, (ii) the applications inside the host DTN such as GridFTP
and other data transfer applications could be compromised. We
attempt to address issues that arise from flaws in the implementation
of traditional SDMZ policies as well as vulnerabilities introduced
by malicious users.
CoordiNetZ proposes to use a conservative approach by which
administrators can program dataflow policies from specific users
and for specific set of host DTNs such that their capabilities are
givenhigherprecedencecomparedtosecurityandprivacypoliciesof
others. Though the precedence is completely programmable, it solely
dependsonadministrator’sabilitytocorrectlyspecifyit,whichcould
at times mask the conflicts. Hence, precedence operator need to be
used diligently by administrators for auto-resolving the conflicts
that are detected by CoordiNetZ, which could otherwise be safely
resolved by administrators.
4
(cid:14)(cid:45)I(cid:46)(cid:46)(cid:4)(cid:25)CM(cid:33)(cid:1)(cid:14)II(cid:45)(cid:32)CH(cid:29)MI(cid:45)(cid:1)(cid:34)I(cid:45)(cid:1)(cid:14)IHM(cid:33)(cid:51)M(cid:4)(cid:29)P(cid:29)(cid:45)(cid:33)(cid:1)(cid:26)(cid:29)AACHA(cid:1)(cid:29)H(cid:32)(cid:1)(cid:25)(cid:33)(cid:31)N(cid:45)CMR(cid:1).H(cid:34)I(cid:45)(cid:31)(cid:33)G(cid:33)HM5(cid:45)ID(cid:33)(cid:31)M(cid:8)5(cid:45)ID(cid:33)(cid:31)M(cid:21)(cid:22)(cid:44)(cid:33)H(cid:46)M(cid:29)(cid:31)E0I(cid:45)CSIH(cid:1)-(cid:29)(cid:46)B(cid:30)I(cid:29)(cid:45)(cid:32)(cid:1)(cid:6)(cid:1)/(cid:45)(cid:29)(cid:44)BC(cid:31)(cid:29)(cid:40)(cid:1)(cid:27)1(cid:13)I(cid:45)(cid:32)(cid:33)(cid:45)(cid:1)(cid:24)INM(cid:33)(cid:45)(cid:13)I(cid:45)(cid:32)(cid:33)(cid:45)(cid:1)(cid:24)INM(cid:33)(cid:45)(cid:25)-2:(cid:1)(cid:14)I(cid:45)(cid:33)(cid:1)(cid:2)MC(cid:33)(cid:45)(cid:7)(cid:6)(cid:8) (cid:1)(cid:25)CM(cid:33)(cid:46)-(cid:26)(cid:21)(cid:46)(cid:25)-2:(cid:1)(cid:25)CM(cid:33)(cid:9)-(cid:26)(cid:21)(cid:46)1-(cid:25)1-(cid:25)(cid:14)(cid:21):(cid:1)(cid:14)IHM(cid:45)I(cid:40)(cid:40)(cid:33)(cid:45)(cid:25)-(cid:21)(cid:1)(cid:14)IHM(cid:45)I(cid:40)(cid:40)(cid:33)(cid:45)(cid:14)(cid:21):(cid:1)(cid:14)IHM(cid:45)I(cid:40)(cid:40)(cid:33)(cid:45)(cid:1)(cid:25)-(cid:21)(cid:1)(cid:14)IHM(cid:45)I(cid:40)(cid:40)(cid:33)(cid:45)(cid:25)-2:(cid:1)(cid:25)CM(cid:33)(cid:8)(cid:25)-(cid:21)(cid:1)(cid:14)IHM(cid:45)I(cid:40)(cid:40)(cid:33)(cid:45)(cid:24)(cid:33)(cid:46)(cid:33)(cid:29)(cid:45)(cid:31)B(cid:33)(cid:45)(cid:1)(cid:12)(cid:40)C(cid:31)(cid:33)(cid:1)5I(cid:40)C(cid:31)R(cid:1)1HM(cid:33)HM)(cid:1)(cid:25)B(cid:29)(cid:45)(cid:33)(cid:1)IH(cid:40)R(cid:1)(cid:32)(cid:29)M(cid:29)(cid:1)INM(cid:31)IG(cid:33)(cid:46)(cid:1)(cid:34)(cid:45)IG(cid:1)(cid:33)(cid:51)(cid:44)(cid:33)(cid:45)CG(cid:33)HM(cid:8)(cid:1)MI(cid:1)(cid:13)I(cid:30)(cid:1)MB(cid:29)M(cid:1)(cid:29)(cid:45)(cid:33)(cid:1)HIM(cid:1)(cid:46)(cid:33)H(cid:46)CMCO(cid:33)(cid:1)I(cid:45)(cid:1)(cid:44)(cid:45)CO(cid:29)M(cid:33)(cid:5)(cid:24)(cid:33)(cid:46)(cid:33)(cid:29)(cid:45)(cid:31)B(cid:33)(cid:45)(cid:1)(cid:13)I(cid:30)(cid:1)5I(cid:40)C(cid:31)R(cid:1)1HM(cid:33)HM)(cid:25)B(cid:29)(cid:45)(cid:33)(cid:1)(cid:29)(cid:40)(cid:40)(cid:1)MB(cid:33)(cid:1)(cid:32)(cid:29)M(cid:29)(cid:1)PCMB(cid:1)(cid:12)(cid:40)C(cid:31)(cid:33)(cid:1)(cid:46)(cid:44)(cid:33)(cid:31)C(cid:34)C(cid:31)(cid:1)MI(cid:1)5(cid:45)ID(cid:33)(cid:31)M(cid:1)((cid:1)PCMB(cid:1)--I(cid:25)(cid:1)(cid:29)H(cid:32)(cid:1)-(cid:29)M(cid:29)(cid:1)(cid:12)H(cid:29)(cid:40)RMC(cid:31)(cid:46)(cid:1)(cid:34)(cid:45)IG(cid:1)-I.(cid:1)MC(cid:33)(cid:45)(cid:1)(cid:7)(cid:1)(cid:46)CM(cid:33)(cid:5)(a) Abstraction tree for exper-
imental data outcome (AM =
data{*}.experiment {Exp1}).
(b) Abstraction tree for dynamic
host security (AM = security-
state{*}.site {Site1}:hosts{*}).
Figure 5: Infrastructure abstraction trees and mappings.
4 Dataflow-based Policy Framework
CoordiNetZ, provides following key capabilities for addressing
the security policy requirements of SDMZ networks: (i) effec-
tively isolates the policies specified across different administrative-
domains, across sites and projects, using a tree-based abstractions,
(ii) graph-based policy specification mechanism that captures multi-
dimensional policies (e.g., temporal dynamics, security states, spatial
attributes), and (iii) provides efficient policy-conflict detection and
resolution mechanisms across the shared network infrastructure.
4.1 Infrastructure Abstractions
In this section, we present an approach called abstraction mapping
that allows a global site administrator to delegate policy respon-
sibilities of SDMZ infrastructure to SDMZ network administrators
and project users. Abstraction mappings allow users and admin-
istrators to visualize an isolated view of the infrastructure (i.e., as
infrastructure abstraction trees), over which the user may specify
policies. Figure 5 and Figure 13 (Appendix A.1) illustrates examples
of infrastructure abstractions exposed to administrators/users and
abstraction-mappings specific to each abstraction tree is also shown.
Administrators provide abstraction-mappings as input to the
CNZ Coordinator for facilitating the construction of abstraction
trees (see Figure 5). Abstraction mappings enable CoordiNetZ
to stitch together different types of abstractions within the same
tree. For example, in Figure 5b the security states and list of
hosts of Site1 are combined. Here, each level of infrastructure
abstraction-type is separated using the colon operator (‘:’), while
the dot operator (‘.’) denotes the properties of each level of
abstraction-type. Each dot-separated abstraction narrows the list
of host DTNs captured within the abstraction tree. List of few
system-defined abstraction-type-mapping parameters includes
locations{}, buildings{}, networks{}, sites{}, security-states{}, which
captures the spatio-temporal, security and network properties and
their relation with the hosts, which allows the policies to be naturally
expressed using intuitive heterogeneous types of abstraction trees.
Figure 13d shows few more infrastructure abstractions generally
used in SDMZ network infrastructures for configuring the policies.
4.2 Policy Specification
CoordiNetZ provides a graphical drag-and-drop user interface for
specifying the graph-based dynamic dataflow-based policy intents,
while the existing techniques supports only static policies that are
flow-based[2,19,36].Policygraphsconstitutesofnodesfromvarious
infrastructure abstraction trees that are assigned to each administra-
tor (see Figure 6a). An equivalent policy specification syntax for con-
figuring large scale policies bypassing the graphical user interface
(a) Graph-based ACL policy specification (P1 – P3).
(b) Equivalent ACL policy specification syntax for P1 – P3.
Figure 6: Graph-based policy specification & syntax.
(shown in Figure 6b) is also provided. CoordiNetZ’s policy specifica-
tion framework supports three types of static and dynamic policies to
accommodate the needs of SDMZ network: (i) temporal-and-spatial
policies, (ii) data-specific policies, and (iii) network-security policies.
The policy specification syntax used for representing graph-based
policies is shown in Figure 6. In this ACL-based policy specification
syntax, the permissions to allow or deny communication between
source and target nodes are specified using => (i.e., for ALLOW),
! => (i.e., for DENY), and !X=>(i.e., for QUARANTINE) operators.
Sequential (>>) or parallel (||) operators specify the sequence of
network functions through which the traffic from specific source
node should traverse. The → operator used in the parent-path
key-value pair is used to define the path of the node (i.e., used in
policy specification) from its root node, which is required to capture
the relation among the nodes of same abstraction tree.
Dataflow-based Policies: The current SDMZ infrastructure does
not provide any capabilities for enforcing cross-site dataflow policies
(discussed in § 2.1). While prior work discussed dataflow tracking
within a host and across hosts [23, 28, 32, 48], these frameworks
are heavyweight and do not address the performance requirements
of the SDMZ. Hence, we implement a lightweight forensic tracker
and use the CNZ Coordinator to support two key data-tracking
capabilities: (i) ability to capture all read/write operations carried
out on the data within a host (shown in Figure 5a) and (ii) ability
to effectively capture the dataflow across hosts and associated data
transformation restrictions (shown in Figure 7).
We define the following properties and capabilities to track the
data across SDMZ sites: (i) unique data identifier across sites within a
project and (ii) mechanism to capture the relation between “original”
and “transformed” data. The unique data identifier is required to
identify multi-site dataflows and capture their transformation in the
future. This also allows SDMZ project users to effectively query the
dataflow and data transformation details over a temporal window.
The relation between the original and the transformed data is
captured at each of the SDMZ project hosts and shared with the CNZ
Coordinator for building data flow graphs. Dataflow tracking helps
to restrict dataflow violations using a high-level policy specification
language (as shown in Figure 7).
5
Original data (D)D1D2Da1Db1Dx2Dy2OutEXP2OutEXP1OutEXP2OutEXP2OutEXP3OutEXP1(cid:4)(cid:18)(cid:21)(cid:20)(cid:12)(cid:1)(cid:13)(cid:17)(cid:18)(cid:11)(cid:12)(cid:8)(cid:12)(cid:11)(cid:21)(cid:18)(cid:14)(cid:20)5(cid:8)(cid:20)(cid:10)(cid:20)(cid:12)1(cid:9)(cid:8)(cid:14)(cid:20)(cid:12)(cid:2)(cid:5)(cid:5)(cid:17)(cid:8)(cid:6)(cid:22)(cid:13)(cid:14)(cid:15)(cid:20)(cid:18)(cid:10)(cid:20)(cid:14)(cid:17)(cid:16)(cid:7)(cid:17)1(cid:20)(cid:2)(cid:7)(cid:17)1(cid:20) (cid:7)(cid:17)1(cid:20)(cid:2)(cid:2)(cid:7)(cid:17)1(cid:20)(cid:2) 7(cid:34)H(cid:33)(cid:5)7(cid:34)H(cid:33)(cid:4)(cid:18)F(cid:34)>/(cid:26)6(cid:16)(cid:4) (cid:2)(cid:28)I1DGHG(cid:29)6FDA(cid:33)=H(cid:4)(cid:44)I1DGHG(cid:29)6FDA(cid:33)=H(cid:4)(cid:44)(cid:23)(cid:33)H(cid:4)(cid:2)(cid:23)(cid:33)H(cid:7)(cid:26)(cid:34)B(cid:33)(cid:6)(cid:1)(cid:11)(cid:1)*(cid:9)6(cid:22)(cid:1)(cid:10)(cid:8)(cid:13)(cid:22)7H(cid:16)62I1DGHG(cid:29)7(cid:34)H(cid:33)(cid:4)(cid:44)I1DGHG(cid:29)7(cid:34)H(cid:33)(cid:4)(cid:44)(cid:14)3(cid:16)(cid:18)(cid:4)(cid:2)2CH(cid:33)FC(cid:33)H9(cid:13)(cid:23)(cid:1)(cid:13)(cid:15)(cid:15)/9I1DGHG(cid:29)7(cid:34)H(cid:33)(cid:4)(cid:44)(cid:23)G(cid:30):(cid:47)(cid:23)(cid:34)(cid:44)(cid:30) (cid:13)(cid:29)D(cid:34)(cid:39)N(cid:10)(cid:1)IH: (cid:39)F(cid:29)(cid:30)(cid:47)(cid:14)2-/(cid:6)N(cid:4)G(cid:27)H(cid:30)(cid:39)(cid:44) G(cid:27)(cid:44)(cid:33)(cid:47)(cid:18)FI(cid:44)I(cid:26)(cid:23)(cid:34)(cid:44)(cid:30)(cid:6)N(cid:4)(cid:44)H(cid:27)==(cid:34): (cid:44)LG(cid:30)(cid:47)(cid:2)N(cid:1)**(cid:1).(cid:25)(cid:1)**(cid:1)(cid:25)(cid:13)3 (cid:13)::(cid:30)(cid:37)(cid:30)H(cid:27)(cid:44)FH(cid:1)(cid:11)*(cid:1)(cid:44)(cid:27)H>(cid:30)(cid:44) (cid:39)F(cid:29)(cid:30)(cid:47)1(cid:39)(cid:44)(cid:30)H(cid:39)(cid:30)(cid:44)N(cid:4)G(cid:27)H(cid:30)(cid:39)(cid:44) G(cid:27)(cid:44)(cid:33)(cid:47)(cid:39)(cid:30)(cid:44)(cid:45)FHBIN(cid:23)G(cid:30):(cid:47)(cid:23)(cid:34)(cid:44)(cid:30) (cid:13)(cid:29)D(cid:34)(cid:39)N(cid:10)(cid:1)IH: (cid:39)F(cid:29)(cid:30)(cid:47)3(cid:30)(cid:44)(cid:6)N(cid:4)G(cid:27)H(cid:30)(cid:39)(cid:44) G(cid:27)(cid:44)(cid:33)(cid:47)(cid:18)FI(cid:44)I(cid:26)(cid:23)(cid:34)(cid:44)(cid:30)(cid:6) *(cid:14)2-/(cid:6)N(cid:4)(cid:44)H(cid:27)==(cid:34): (cid:44)LG(cid:30)(cid:47)(cid:2)N(cid:4)(cid:44)(cid:34)D(cid:30)(cid:47)6(cid:34)D(cid:30)(cid:8)N(cid:4)I(cid:44)(cid:27)(cid:44)(cid:30)(cid:47):FDGHFD(cid:34)I(cid:30)(cid:29)N(cid:1)**(cid:1)-(cid:22)1(cid:1)(cid:11)*(cid:1)(cid:44)(cid:27)H>(cid:30)(cid:44) (cid:39)F(cid:29)(cid:30)(cid:47)3(cid:30)(cid:44)(cid:9)N(cid:4)G(cid:27)H(cid:30)(cid:39)(cid:44) G(cid:27)(cid:44)(cid:33)(cid:47)(cid:18)FI(cid:44)I(cid:26)(cid:23)(cid:34)(cid:44)(cid:30)(cid:6) *(cid:14)2-/(cid:7)N(cid:23)G(cid:30):(cid:47)(cid:22)HFA(cid:30):(cid:44) (cid:13)(cid:29)D(cid:34)(cid:39)N(cid:10)(cid:1)IH: (cid:39)F(cid:29)(cid:30)(cid:47)(cid:23)(cid:34)(cid:44)(cid:30)(cid:6)N(cid:4)G(cid:27)H(cid:30)(cid:39)(cid:44) G(cid:27)(cid:44)(cid:33)(cid:47)(cid:18)FI(cid:44)I(cid:26)(cid:22)HFA(cid:30):(cid:44)(cid:6)N(cid:4)(cid:1)(cid:44)H(cid:27)==(cid:34): (cid:44)LG(cid:30)(cid:47)/H(cid:34)(cid:29).6(cid:22)N(cid:4)(cid:29)(cid:27)(cid:44)(cid:27)(cid:47)-(cid:6)(cid:5)(cid:2)N(cid:1)(cid:49)(cid:11)*(cid:1)(cid:44)(cid:27)H>(cid:30)(cid:44) (cid:39)F(cid:29)(cid:30)(cid:47)(cid:23)(cid:34)(cid:44)(cid:30)(cid:7)N(cid:4)G(cid:27)H(cid:30)(cid:39)(cid:44) G(cid:27)(cid:44)(cid:33)(cid:47)(cid:18)FI(cid:44)I(cid:26)(cid:22)HFA(cid:30):(cid:44)(cid:6)NAlgorithm 1: Graph-based Policy Composition
1 L ← list of policies for composition;
2 s(p)←source node of policy p;
3 t(p)←target node of policy p;
4 a(p)←action of policy p;
5 bp(s,t)←edge properties for the policy p between nodes (s,t);
6 G ←Composed k-partite graph;
7 S(G)←source node of the GraphG;
8 E(S(G))←edges associated with the node source S on the Graph G;
9 T(E)←target associated with edge;
10 A(E)←action on the Edge;
11 forall Policy p ∈ L do
foreach source node S(G) ∈G do
if s(pi) overlaps Sj(G) then
foreach edge E(G) ∈ Sj(G) do
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
Figure 7: Project-specific graph- and syntax-based policy
specification for data-flow policies.
CoordiNetZ’s abstraction trees and graph-based specification al-
lows the administrators to specify the policies explicitly using the