### 3. SciMon Module

The SciMon module constructs contextual information at the host-process level to tag data flows originating from host DTNs and enforces host and process-specific data policies within these nodes. It tracks file accesses for each process instantiation and imposes restrictions on file access and network data flows based on the rules in the process policy table. The module continuously monitors host processes, file system accesses, and network I/O events using open-source utilities such as `psutils` [37] and `osquery` [34]. As illustrated in Figure 16 (Appendix A.3), the process flow table contains policy flow rules.

Our threat model considers various attacks, including data exfiltration, spoofing, and DDoS. CoordiNetZ protects the SDMZ network from these threats at the switch (i.e., the immediate first-hop network node) by leveraging tags inserted by the SciMon application and context gathered from both the host and network. These security use cases are detailed in Appendix A.2.

#### 3.2 Threat Model

We adopt a simple threat model that assumes:
1. A subset of SDMZ users and administrators who program the SDMZ ecosystem could be malicious, leading to the embedding of rogue policies within a project.
2. Applications inside the host DTN, such as GridFTP and other data transfer applications, could be compromised.

CoordiNetZ aims to address issues arising from flaws in the implementation of traditional SDMZ policies and vulnerabilities introduced by malicious users. It proposes a conservative approach where administrators can program data flow policies for specific users and sets of host DTNs, giving their capabilities higher precedence compared to the security and privacy policies of others. Although this precedence is programmable, it depends entirely on the administrator's ability to specify it correctly, which can sometimes mask conflicts. Therefore, administrators must use the precedence operator diligently to auto-resolve conflicts detected by CoordiNetZ, which could otherwise be safely resolved manually.

### 4. Dataflow-based Policy Framework

CoordiNetZ provides the following key capabilities to address the security policy requirements of SDMZ networks:
1. Effectively isolates policies specified across different administrative domains, sites, and projects using tree-based abstractions.
2. Offers a graph-based policy specification mechanism that captures multi-dimensional policies (e.g., temporal dynamics, security states, spatial attributes).
3. Provides efficient policy conflict detection and resolution mechanisms across shared network infrastructure.

#### 4.1 Infrastructure Abstractions

In this section, we introduce an approach called abstraction mapping, which allows a global site administrator to delegate policy responsibilities of SDMZ infrastructure to SDMZ network administrators and project users. Abstraction mappings enable users and administrators to visualize an isolated view of the infrastructure (i.e., as infrastructure abstraction trees), over which they may specify policies. Examples of infrastructure abstractions exposed to administrators/users and the corresponding abstraction-mappings are shown in Figure 5 and Figure 13 (Appendix A.1).

Administrators provide abstraction-mappings as input to the CNZ Coordinator to facilitate the construction of abstraction trees (see Figure 5). Abstraction mappings enable CoordiNetZ to combine different types of abstractions within the same tree. For instance, in Figure 5b, the security states and list of hosts for Site1 are combined. Each level of infrastructure abstraction-type is separated using the colon operator (‘:’), while the dot operator (‘.’) denotes the properties of each level of abstraction-type. Each dot-separated abstraction narrows the list of host DTNs captured within the abstraction tree. Some system-defined abstraction-type-mapping parameters include `locations{}`, `buildings{}`, `networks{}`, `sites{}`, and `security-states{}`, which capture spatio-temporal, security, and network properties and their relation with the hosts. This allows policies to be naturally expressed using intuitive, heterogeneous types of abstraction trees. Additional infrastructure abstractions generally used in SDMZ network infrastructures for configuring policies are shown in Figure 13d.

#### 4.2 Policy Specification

CoordiNetZ provides a graphical drag-and-drop user interface for specifying graph-based dynamic dataflow-based policy intents, unlike existing techniques that support only static, flow-based policies [2, 19, 36]. Policy graphs consist of nodes from various infrastructure abstraction trees assigned to each administrator (see Figure 6a). An equivalent policy specification syntax for configuring large-scale policies without using the graphical user interface (shown in Figure 6b) is also provided.

CoordiNetZ’s policy specification framework supports three types of static and dynamic policies to meet the needs of SDMZ networks:
1. Temporal-and-spatial policies
2. Data-specific policies
3. Network-security policies

The policy specification syntax used for representing graph-based policies is shown in Figure 6. In this ACL-based policy specification syntax, permissions to allow or deny communication between source and target nodes are specified using `=>` (for ALLOW), `! =>` (for DENY), and `!X=>` (for QUARANTINE) operators. Sequential (`>>`) or parallel (`||`) operators specify the sequence of network functions through which traffic from a specific source node should traverse. The `→` operator used in the parent-path key-value pair defines the path of the node (used in policy specification) from its root node, capturing the relationship among nodes of the same abstraction tree.

**Dataflow-based Policies:**

The current SDMZ infrastructure lacks capabilities for enforcing cross-site dataflow policies (discussed in § 2.1). While prior work has discussed dataflow tracking within and across hosts [23, 28, 32, 48], these frameworks are heavyweight and do not meet the performance requirements of SDMZ. Therefore, we implement a lightweight forensic tracker and use the CNZ Coordinator to support two key data-tracking capabilities:
1. Capturing all read/write operations carried out on data within a host (Figure 5a)
2. Effectively capturing dataflow across hosts and associated data transformation restrictions (Figure 7)

We define the following properties and capabilities to track data across SDMZ sites:
1. Unique data identifier across sites within a project
2. Mechanism to capture the relationship between "original" and "transformed" data

The unique data identifier is essential for identifying multi-site dataflows and capturing their transformations. This also enables SDMZ project users to query dataflow and data transformation details over a temporal window. The relationship between the original and transformed data is captured at each SDMZ project host and shared with the CNZ Coordinator for building data flow graphs. Dataflow tracking helps restrict dataflow violations using a high-level policy specification language (as shown in Figure 7).

### 5. Graph-based Policy Composition

Algorithm 1 outlines the process for composing graph-based policies:

```plaintext
Algorithm 1: Graph-based Policy Composition
1 L ← list of policies for composition;
2 s(p) ← source node of policy p;
3 t(p) ← target node of policy p;
4 a(p) ← action of policy p;
5 bp(s, t) ← edge properties for the policy p between nodes (s, t);
6 G ← Composed k-partite graph;
7 S(G) ← source node of the Graph G;
8 E(S(G)) ← edges associated with the node source S on the Graph G;
9 T(E) ← target associated with edge;
10 A(E) ← action on the Edge;
11 for all Policy p ∈ L do
12   for each source node S(G) ∈ G do
13     if s(pi) overlaps Sj(G) then
14       for each edge E(G) ∈ Sj(G) do
15         // Further processing to compose the graph
```

CoordiNetZ’s abstraction trees and graph-based specification allow administrators to explicitly specify policies using the provided tools and interfaces.