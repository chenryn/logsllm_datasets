步上下文，则必须调用Task方法ConfigureAwait （continueOnCapturedContext:false）。例
如，一个WPF应用程序，其await后面的代码没有用到任何的UI元素。在这种情况下，避
免切换到同步上下文会执行得更快。
15.3.5 使用多个异步方法
在一个异步方法里，可以调用一个或多个异步方法。如何编写代码，取决于一个异步
方法的结果是否依赖于另一个异步方法。
1．按顺序调用异步方法
使用await关键字可以调用每个异步方法。在有些情况下，如果一个异步方法依赖另
一个异步方法的结果，await关键字就非常有用。在这里，GreetingAsync异步方法的第二
次调用完全独立于其第一次调用的结果。这样，如果每个异步方法都不使用await，那么
整个MultipleAsyncMethods异步方法将更快地返回结果，如下所示：
    private async static void MultipleAsyncMethods()
    {
      string s1 = await
 GreetingAsync("Stephanie");
      string s2 = await
 GreetingAsync("Matthias");
      WriteLine("Finished both methods.\nResult 1: {s1}\n Result 2: {s2}");
    }
2．使用组合器
如果异步方法不依赖于其他异步方法，则每个异步方法都不使用await，而是把每个
异步方法的返回结果赋值给Task变量，就会运行得更快。GreetingAsync方法返回
Task。这些方法现在可以并行运行了。组合器可以帮助实现这一点。一个组合器
可以接受多个同一类型的参数，并返回同一类型的值。多个同一类型的参数被组合成一个
参数来传递。Task组合器接受多个Task对象作为参数，并返回一个Task。
示例代码调用Task.WhenAll组合器方法，它可以等待，直到两个任务都完成。
    private async static void MultipleAsyncMethodsWithCombinators1()
    {
      Task t1
 = GreetingAsync("Stephanie");
      Task t2
 = GreetingAsync("Matthias");
      await Task.WhenAll(t1, t2);
      WriteLine("Finished both methods.\n " +
        $"Result 1: {t1.Result}\n Result 2: {t2.Result}");
    }
Task类定义了WhenAll和WhenAny组合器。从WhenAll方法返回的Task，是在所有传
入方法的任务都完成了才会返回Task。从WhenAny方法返回的Task，是在其中一个传入方
法的任务完成了就会返回Task。
Task类型的WhenAll方法定义了几个重载版本。如果所有的任务返回相同的类型，那
么该类型的数组可用于await返回的结果。GreetingAsync方法返回一个Task，等待
返回的结果是一个字符串（string）形式。因此，Task.WhenAll可用于返回一个字符串数
组：
    private async static void MultipleAsyncMethodsWithCombinators2()
    {
      Task t1 = GreetingAsync("Stephanie");
      Task t2 = GreetingAsync("Matthias");
      string[] result =  await Task.WhenAll(t1, t2);
      WriteLine("Finished both methods.\n " +
        $"Result 1: {result[0]}\n Result 2: {result[1]}");
    }
15.3.6 转换异步模式
并非.NET 
Framework的所有类都引入了新的异步方法。在使用框架中的不同类时会
发现，还有许多类只提供了BeginXXX方法和EndXXX方法的异步模式，没有提供基于任
务的异步模式。但是，可以把异步模式转换为基于任务的异步模式。
首先，从前面定义的同步方法Greeting中，借助于委托，创建一个异步方法。Greeting
方法接收一个字符串作为参数，并返回一个字符串。因此，Func委托的变
量可用于引用Greeting方法。按照异步模式，BeginGreeting方法接收一个string参数、一个
AsyncCallback参数和一个object参数，返回IAsyncResult。EndGreeting方法返回来自
Greeting方法的结果——一个字符串——并接收一个IAsyncResult参数。这样，同步方法
Greeting就通过一个委托变成异步方法。
    private Func greetingInvoker = Greeting;
    private IAsyncResult BeginGreeting(string name, AsyncCallback callback,
      object state)
    {
      return greetingInvoker.BeginInvoke(name, callback, state);
    }
    private string EndGreeting(IAsyncResult ar)
    {
      return greetingInvoker.EndInvoke(ar);
    }
现在，BeginGreeting方法和EndGreeting方法都是可用的，它们都应转换为使用async
和await关键字来获取结果。TaskFactory类定义了FromAsync方法，它可以把使用异步模式
的方法转换为基于任务的异步模式的方法（TAP）。
示例代码中，Task类型的第一个泛型参数Task定义了调用方法的返回值类
型。FromAsync方法的泛型参数定义了方法的输入类型。这样，输入类型又是字符串类
型。FromAsync方法的前两个参数是委托类型，传入BeginGreeting和EndGreeting方法的地
址。紧跟这两个参数后面的是输入参数和对象状态参数。因对象状态没有用到，所以给它
分配null值。因为FromAsync方法返回Task类型，即示例代码中的Task，可以使用
await，如下所示：
    private static async void ConvertingAsyncPattern()
    {
      string s = await Task.Factory.FromAsync(
        BeginGreeting, EndGreeting, "Angela", null);
      WriteLine(s);
    }
15.4 错误处理
第14章详细介绍了错误和异常处理。但是，在使用异步方法时，应该知道错误的一些
特殊处理方式。
所有ErrorHandling示例的代码都使用了如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    System.Threading.Tasks
    static System.Console
从一个简单的方法开始，它在延迟后抛出一个异常（代码文件
ErrorHandling/Program.cs）：
    static async Task ThrowAfter(int ms, string message)
    {
      await Task.Delay(ms);
      throw new Exception(message);
    }
如果调用异步方法，并且没有等待，可以将异步方法放在try/catch块中，就会捕获不
到异常。这是因为DontHandle方法在ThrowAfter抛出异常之前，已经执行完毕。需要等待
ThrowAfter方法（用await关键字），如下所示：
    private static void DontHandle()
    {
      try
      {
        ThrowAfter(200, "first");
        // exception is not caught because this method is finished
        // before the exception is thrown
      }
      catch (Exception ex)
      {
        WriteLine(ex.Message);
      }
    }
  警告： 返回void的异步方法不会等待。这是因为从async void方法抛出的异常
无法捕获。因此，异步方法最好返回一个Task类型。处理程序方法或重写的基类方法
不受此规则限制。
15.4.1 异步方法的异常处理
异步方法异常的一个较好处理方式，就是使用await关键字，将其放在try/catch语句
中，如以下代码块所示。异步调用ThrowAfter方法后，HandleOneError方法就会释放线
程，但它会在任务完成时保持任务的引用。此时（2s后，抛出异常），会调用匹配的catch
块内的代码。
    private static async void HandleOneError()
    {
      try
      {
        await ThrowAfter(2000, "first");
      }
      catch (Exception ex)
      {
        WriteLine($"handled {ex.Message}");
      }
    }
15.4.2 多个异步方法的异常处理
如果调用两个异步方法，每个都会抛出异常，该如何处理呢？在下面的示例中，第一
个ThrowAfter方法被调用，2s后抛出异常（含消息first）。该方法结束后，另一个
ThrowAfter方法也被调用，1s后也抛出异常。事实并非如此，因为对第一个ThrowAfter方
法的调用已经抛出了异常，try块内的代码没有继续调用第二个ThrowAfter方法，而是在
catch块内对第一个异常进行处理。
    private static async void StartTwoTasks()
    {
      try
      {
        await ThrowAfter(2000, "first");
        await ThrowAfter(1000, "second"); // the second call is not invoked
                                          // because the first method throws
                                          // an exception
      }
      catch (Exception ex)
      {
        WriteLine($"handled {ex.Message}");
      }
    }
现在，并行调用这两个ThrowAfter方法。第一个ThrowAfter方法2s后抛出异常，1s后
第二个ThrowAfter方法也抛出异常。使用Task.WhenAll，不管任务是否抛出异常，都会等
到两个任务完成。因此，等待2s后，Task.WhenAll结束，异常被catch语句捕获到。但是，
只能看见传递给WhenAll方法的第一个任务的异常信息。没有显示先抛出异常的任务（第
二个任务），但该任务也在列表中：
    private async static void StartTwoTasksParallel()
    {
      try
      {
        Task t1 =
 ThrowAfter(2000, "first");
        Task t2
 = ThrowAfter(1000, "second");
        await Task.WhenAll(t1, t2);
      }
      catch (Exception ex)
      {
        // just display the exception information of the first task
        // that is awaited within WhenAll
        WriteLine($"handled {ex.Message}");
      }
    }
有一种方式可以获取所有任务的异常信息，就是在try块外声明任务变量t1和t2，使它
们可以在catch块内访问。在这里，可以使用IsFaulted属性检查任务的状态，以确认它们是
否为出错状态。若出现异常，IsFaulted属性会返回true。可以使用Task类的
Exception.InnerException访问异常信息本身。另一种获取所有任务的异常信息的更好方式
如下所述。
15.4.3 使用AggregateException信息
为了得到所有失败任务的异常信息，可以将Task.WhenAll返回的结果写到一个Task变
量中。这个任务会一直等到所有任务都结束。否则，仍然可能错过抛出的异常。15.4.2小
节中，catch语句只检索到第一个任务的异常。不过，现在可以访问外部任务的Exception
属性了。Exception属性是AggregateException类型的。这个异常类型定义了InnerExceptions
属性（不只是InnerException），它包含了等待中的所有异常的列表。现在，可以轻松遍
历所有异常了。
    private static async void ShowAggregatedException()
    {
      Task taskResult = null;
      try
      {
        Task t1 = ThrowAfter(2000, "first");
        Task t2 = ThrowAfter(1000, "second");
        await (taskResult = Task.WhenAll(t1, t2));
      }
      catch (Exception ex)
      {
        WriteLine($"handled {ex.Message}");
        foreach (var ex1 in taskResult.Exception.InnerExceptions)
        {
        WriteLine($"inner exception {ex1.Message}");
        }
      }
    }
15.5 取消
在一些情况下，后台任务可能运行很长时间，取消任务就非常有用了。对于取消任
务，.NET提供了一种标准的机制。这种机制可用于基于任务的异步模式。
取消框架基于协助行为，不是强制性的。一个运行时间很长的任务需要检查自己是否
被取消，在这种情况下，它的工作就是清理所有已打开的资源，并结束相关工作。
取消基于CancellationTokenSource类，该类可用于发送取消请求。请求发送给引用
CancellationToken类的任务，其中CancellationToken类与CancellationTokenSource类相关
联。15.5.1小节将修改本章前面创建的AsyncPatterns示例，来阐述取消任务的相关内容。
15.5.1 开始取消任务
首先，使用MainWindow类的私有字段成员定义一个CancellationTokenSource类型的变
量cts。该成员用于取消任务，并将令牌传递给应取消的方法（代码文件
AsyncPatterns/MainWindow.xaml.cs）：
    public partial class MainWindow : Window
    {
      private SearchInfo _searchInfo = new SearchInfo();
      private object _lockList = new object();
      private CancellationTokenSource _cts;
      //. . .
新添加一个按钮，用于取消正在运行的任务，添加事件处理程序OnCancel方法。在这
个方法中，变量cts用Cancel方法取消任务：
    private void OnCancel(object sender, RoutedEventArgs e)
    {
      _cts? .Cancel();
    }
CancellationTokenSource类还支持在指定时间后才取消任务。CancelAfter方法传入一
个时间值，单位是毫秒，在该时间过后，就取消任务。
15.5.2 使用框架特性取消任务
现在，将CancellationToken传入异步方法。框架中的某些异步方法提供可以传入
CancellationToken的重载版本，来支持取消任务。例如HttpClient类的GetAsync方法。除了
URI字符串，重载的GetAsync方法还接受CancellationToken参数。可以使用Token属性检索
CancellationTokenSource类的令牌。
GetAsync方法的实现会定期检查是否应取消操作。如果取消，就清理资源，之后抛出
OperationCanceledException异常。如下面的代码片段所示，catch处理程序捕获到了该异
常：
    private async void OnTaskBasedAsyncPattern(object sender, RoutedEventArgs e)
    {
      _cts = new CancellationTokenSource();
      try
      {
        foreach (var req in GetSearchRequests())
        {
        var clientHandler = new HttpClientHandler
        {
          Credentials = req.Credentials;
        };
        var client = new HttpClient(clientHandler);
        var response = await client.GetAsync(req.Url, _cts.Token);
        string resp = await response.Content.ReadAsStringAsync();
        //. . .
        }
      }
      catch (OperationCanceledException ex)
      {
        MessageBox.Show(ex.Message);
      }
    }
15.5.3 取消自定义任务
如何取消自定义任务？Task类的Run方法提供了重载版本，它也传递
CancellationToken参数。但是，对于自定义任务，需要检查是否请求了取消操作。下例
中，这是在foreach循环中实现的，可以使用IsCancellationRequsted属性检查令牌。在抛出
异常之前，如果需要做一些清理工作，最好验证一下是否请求取消操作。如果不需要做清
理工作，检查之后，会立即用ThrowIfCancellationRequested方法触发异常：
    await Task.Run(() =>
    {
      var images = req.Parse(resp);
      foreach (var image in images)
      {
        _cts.Token.ThrowIfCancellationRequested();
        _searchInfo.List.Add(image);
      }
    }, _cts.Token);
现在，用户可以取消运行时间长的任务了。
15.6 小结
本章介绍了async和await关键字。通过几个示例，介绍了基于任务的异步模式，
比.NET早期版本中的异步模式和基于事件的异步模式更具优势。