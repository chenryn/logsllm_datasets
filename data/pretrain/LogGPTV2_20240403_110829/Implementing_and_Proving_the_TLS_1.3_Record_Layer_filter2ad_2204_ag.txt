The game has oracles Init and InitD for generating multi-
stream encryptors and decryptors in their initial state, in-
dexed by n and m, respectively. We assume that their ar-
guments determine the record algorithm. Their state consist
of a current context, a current stream number j, and a local
map I from stream numbers to the value of the context when
they were installed. We use variables ctx, j, and I to refer
to the ﬁelds of E[m] and D[n], respectively.
Oracles Extend and ExtendD allow the local context to be
extended (concatenated) with new information at any time.
Oracles Install and InstallD install an LHSE instance (al-
locating it if it does not exist) for encryption and decryption,
477
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
Game Recordb(Lhseb(LHSE))
E ← ∅ D ← ∅
SE.Gen, SE.GenD, SE.Encrypt, SE.Decrypt
return {Gen, Extend, Install, Encrypt,
GenD, ExtendD, InstallD, Decrypt}
$← Multi(Lhseb)
Oracle Init(n)
if E[n] = ⊥
E[n] ← {ctx ← n; j ← 0;
I ← ∅}
Oracle InitD(m, ctx0)
if D[m] = ⊥
D[m] ← {ctx ← ctx0;
j ← 0; I ← ∅}
Oracle Extend(n, δ)
if E[n] exists
ctx ← ctx + δ
Oracle ExtendD(m, δ)
if D[m] exists
ctx ← ctx + δ
Oracle Install(n)
if E[n] exists with I[j] = ⊥
I[j] ← (ctx, j)
SE.Gen(I[j])
Oracle InstallD(m)
if D[m] exists with I[j] = ⊥
I[j] ← (ctx, j)
SE.GenD(I[j])
Oracle Encrypt(n, (cid:3), f )
if E[n] exists with I[j] (cid:5)= ⊥
v ← SE.Encrypt(I[j], (cid:3), f )
if (ﬁnal f ) j ← j + 1
return v
Oracle Decrypt(m, v)
if D[m] exists with I[j] (cid:5)= ⊥
f ← SE.Decrypt(I[j], d, v)
if f (cid:5)= ⊥ ∧ ﬁnal f
j ← j + 1
return f
Figure 5. The TLS 1.3 Record Game
respectively. Recall that calls to SE.Gen are memoized, so
that an encryptor and a decryptor share the same stream if
and only if they agree on the stream sequence number and
context.
Oracles Encrypt and Decrypt apply encryption and de-
cryption to the currently-installed stream. Some fragments
are ﬁnal: they terminate the stream and signal the need to
install a new stream before continuing.
Deﬁnition 9 (Record): Let Record(A[qe, qd, qi]) be the
advantage of an adversary A that makes at most qe encryp-
tion queries and qd decryption queries for each of the qi
LHSE instances created using install queries in the game of
Figure 5.
Theorem 5 (Record reduces to Lhse):
Record(A[qe, qd, qi]) ≤ qi Lhse(B[qe, qd]).
Our game complies with the idealized interface for LHSE
and relies on its conditional idealization. If b = 0, then
the oracles operate purely on local state, and simply im-
plement a real sequence of encrypted streams, under the
control of the record state machine. If b = 1, then we
get perfect authentication of (a preﬁx of) the whole se-
quence of streams of fragments. (This property is veriﬁed
by typing our idealized record implementation.) The ctx
ﬁeld of encryptors and decryptor represents their implicitly
authenticated shared context: unless there is an encryptor
with a matching context, the ideal encryption log is empty
hence decryption will fail. In particular, as soon as the
context includes ServerCert-Finished, and thus the
fresh TLS nonces nC and nS, we know that there is at most
one encryptor and one decryptor.
(cid:3)] for any j
(cid:3)
(cid:3)] = D[m].I[j
If E[n].I[j] = D[m].I[j]
More precisely, consider encryptor and decryptor states
E[n] and D[m].
then also
E[n].I[j
< j. Thus, for instance,
when D[m] receives a ﬁnal fragment, we know that E[n]
and D[m] agree on the whole sequence of communicated
fragment for the ﬁrst j streams. By Theorem 5 these guaran-
tees also hold for the real record for any game adversary A,
except with probability Record(A).
Application to 0-RTT We brieﬂy show how to control
our game to model 0-RTT and 0.5-RTT. For 0-RTT, the
client is the encryptor and the server is the decryptor. Both
use the encryptor index n as initial context, representing
the content of ClientHello, notably the fresh client
random nC. Conversely, the decryptor index m (including
the fresh server random nS) is not included in the initial
context of InitD. As both parties install their ﬁrst stream
(j = 0) for 0-RTT, this reﬂects that the underlying TLS
key derivation (kc
0 in Figure 4) depends only on client-side
information. Thus, although 0-RTT trafﬁc is protected, it
may be decrypted by multiple server instances with different
indexes m.
1, kc
h, kc
Calls to ExtendD and Extend reﬂect handshake com-
munications in the other direction, as the ServerCert-
Finished stream is sent and received, causing ctx to be
extended with (at least) m. Afterwards, as the two parties
successively install streams for the TLS keys kc
2, . . . ,
successful decryption guarantees agreement on a context that
includes the pair n, m. Thus, in this usage of our Record
game at most one server will successfully decrypt the ﬁrst
encrypted handshake fragment from the client, and from this
point all streams are one-to-one.
Application to 0.5-RTT The server is the encryptor, the
client the decryptor and, since they both have initial access
to the ﬁrst message exchange, we may select as index n
that
includes the client hello and server hello messages
and implicitly authenticate the pair nC, nS. Thus,
there
is at most one honest client decryptor for 0.5-RTT and,
from the client’s viewpoint, successful decryption of the
ﬁrst handshake fragment ensures agreement on this context.
Still (at least from the record’s viewpoint) the server is not
guaranteed there is a matching decryptor until it receives
ClientCert-Finished in the other direction and tran-
sitions to 1-RTT.
Veriﬁed Implementation for miTLS (Outline) Our TLS
Record implementation supports sequences of streams for
the full protocol described in Figure 4 and its TLS 1.2
counterpart.
Stream Sequences As described in the game above,
it
478
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
maintains a current stream for each direction, and it receives
‘extend’ and ‘install’ commands from the handshake proto-
col as the connection gets established. Its indexes (ctx in
the game) consist of a summary of the handshake context
available at the time of key derivation (always including the
algorithms to use). In contrast with our game, which models
all communications in a single direction, our code supports
‘duplex’ communications. This is necessary, for instance, for
synchronizing key updates and connection closure between
clients and servers. Our code also maintains a small (type-
based) state machine that controls the availability of the
current streams for sending application data.
Re-keying and Corruption The state machine enforces a
limit on the maximum number of fragments that can be
sent with one key to prevent sequence number overﬂows and
account for the birthday bound weakness of AES-GCM. On
key updates we delete old keys and model the corruption of
individual streams using leak and coerce functions for keys.
This is in keeping with the static corruption modeling of
MITLS, e.g. to account for insecure handshake runs.
Fragment API Our code for the record is parameterized by
a type of abstract application-data plaintexts, indexed by a
unique stream identiﬁer and an apparent fragment length.
Type abstraction guarantees that, if the stream identiﬁer is
safe (a property that depends on the handshake and key
derivation process), the idealized TLS implementation never
actually accesses their actual length and contents, a strong
and simple conﬁdentiality property.
Our API has a conﬁguration to control 0-RTT and 0.5-
RTT as the connection is created. In particular, 0-RTT
plaintexts have their own type, (indexed by an identiﬁer that
describe their 0-RTT context) which should help applications
treat it securely. Conversely, 0.5-RTT is modeled simply by
enabling earlier encryption of 1-RTT trafﬁc.
Message API Our code also has a higher-level API with
messages as (potentially large) bytestrings instead of indi-
vidual fragments. As usual with TLS, message boundaries
are application speciﬁc, whereas applications tend to ignore
fragment boundaries. Nonetheless, our code preserves ap-
parent message boundaries, never caches or fragments small
messages, and supports message length-hiding by taking as
inputs both the apparent (maximal) size (cid:2)max of the message
and its private (actual) size (cid:2)m. It has a simple fragmentation
loop, apparently sending up to 214 bytes at each iteration,
starting with (cid:2)max − (cid:2)m bytes of padding follows by the
actual data. (This ensures that an application that waits
for the whole message never responds before receiving the
last fragment.) We do not model de-fragmentation on the
receiving end; our code delivers fragments as they arrive
in a buffer provided by the application for reassembling its
messages.
The correctness and security of this construction on top of
the fragment API is veriﬁed by typing, essentially abstract-
ing sequences of fragments into sequences of bytes for the
beneﬁt of the application, and turning close-notify alert frag-
ments into end-of-ﬁles. (See also [22] for a cryptographic
treatment of fragmentation issues.)
IX. EXPERIMENTAL EVALUATION
We evaluate our reference implementation of the TLS
record layer both qualitatively (going over the veriﬁed goals
of the various modules and how they relate to the games
presented in the paper, and checking that our implementation
interoperates with other TLS libraries) and quantitatively
(measuring the veriﬁcation and runtime performance).
Veriﬁcation evaluation Table II summarizes the modular
structure of our code, and evaluates the veriﬁcation costs and
the extracted OCaml and C implementations. Since proofs
and implementations are tightly interleaved in F(cid:2) source
code, it is difﬁcult to accurately measure a precise source
overhead. The reported annotation percentages ﬁgure in the
table are rough manual estimates, but they can be compared
to the size of extracted implementations.
Most of the veriﬁcation burden comes from the security
proof of AEAD (totaling approximately 4,500 lines of
annotation out of a total of about 5,500 lines of F(cid:2)) and the
functional correctness proof of the MAC implementations
(totaling over 4,000 lines of annotations and lemmas). For
the latter, we extended F(cid:2) with a new big number library
to verify the low-level implementations of various mathe-
matical operations (such as point multiplication on elliptic
curves or multiplication over ﬁnite ﬁelds) using machine-
sized integers and buffers. We use it to prove the correctness
of the polynomial computations for Poly1305 and GHASH.
Current limitations Our record layer implementation is
part of miTLS in F(cid:2): a larger, partially veriﬁed codebase
that intends to provide a secure, efﬁcient implementation for
both TLS 1.2 and TLS 1.3. We leave a complete veriﬁcation
of the TLS 1.3 handshake and its integration with our code
as future work.
Our implementation also includes the ﬁrst miTLS com-
ponent implemented in a lower level fragment of F(cid:2) that
enables its extraction to C code. In contrast, the rest of
miTLS is still extracted to OCaml and, until it is similarly
adapted, relies on an unveriﬁed OCaml/C wrapper to call our
extracted C code. Currently, this runtime transition is done
at the level of the AEAD interface, enabling us to switch
to other generic cryptographic providers more easily (e.g.
to compare performance with OpenSSL). Hence, the TLS-
speciﬁc stateful encryption in StreamAE is veriﬁed on top
of an idealized AEAD interface that slightly differs from the
one exported by our idealized Crypto.AEAD construction.
For instance, the former represents fragments as sequences
of bytes, whereas the latter uses a lower level memory
479
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
Module Name
StreamAE
AEADProvider
Crypto.AEAD
Crypto.Plain
Crypto.AEAD.Encoding
Crypto.Symmetric.PRF
Crypto.Symmetric.Cipher
Crypto.Symmetric.AES
Crypto.Symmetric.ChaCha20
Crypto.Symmetric.UF1CMA
Crypto.Symmetric.MAC
Crypto.Symmetric.GF128
Crypto.Symmetric.Poly1305
Hacl.Bignum
FStar.Buffer.*
Total
Veriﬁcation Goals
Game StAEb from §VI
Safety and AEAD security (high-level interface)
Proof of Theorem 2 from §V
Plaintext module for AEAD
AEAD encode function from §V and injectivity proof
Game PrfCtrb from §IV
Agile PRF functionality
Safety and correctness w.r.t pure speciﬁcation
Game MMac1b from §III
Agile MAC functionality
GF (128) polynomial evaluation and GHASH encoding
GF (2130−5) polynomial evaluation and Poly1305 encoding
Bignum library and supporting lemmas
for the functional correctness of ﬁeld operations
A veriﬁed model of mutable buffers (implemented natively)
LoC % annot ML LoC
318
354
497
412
2,738
5,253
95
133
280
478
587
522
237
193
4,672
1,254
296
965
277
617
239
488
306
335
231
604
3,136
1,310
40%
30%
90%
40%
60%
40%
30%
30%
80%
60%
50%