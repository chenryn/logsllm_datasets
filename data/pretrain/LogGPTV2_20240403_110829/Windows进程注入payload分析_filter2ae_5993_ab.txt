    0:001> u USER32!_fnCOPYDATA
    USER32!_fnCOPYDATA:
    00007ffd6af62bd0 4883ec58        sub     rsp,58h
    00007ffd6af62bd4 33c0            xor     eax,eax
    00007ffd6af62bd6 4c8bd1          mov     r10,rcx
    00007ffd6af62bd9 89442438        mov     dword ptr [rsp+38h],eax
    00007ffd6af62bdd 4889442440      mov     qword ptr [rsp+40h],rax
    00007ffd6af62be2 394108          cmp     dword ptr [rcx+8],eax
    00007ffd6af62be5 740b            je      USER32!_fnCOPYDATA+0x22 (00007ffd6af62bf2)
    00007ffd6af62be7 48394120        cmp     qword ptr [rcx+20h],rax
在这个函数上设置断点并继续执行。
    0:001> bp USER32!_fnCOPYDATA
    0:001> g
下面的代码将把WM_COPYDATA消息发送到记事本。编译并运行它。
    int main(void){
      COPYDATASTRUCT cds;
      HWND           hw;
      WCHAR          msg[]=L"I don't know what to say!n";
      hw = FindWindowEx(0,0,L"Notepad",0);
      if(hw!=NULL){   
        cds.dwData = 1;
        cds.cbData = lstrlen(msg)*2;
        cds.lpData = msg;
        // copy data to notepad memory space
        SendMessage(hw, WM_COPYDATA, (WPARAM)hw, (LPARAM)&cds);
      }
      return 0;
    }
一旦该代码执行，它将在发送WM_COPYDATA消息之前尝试查找记事本的窗口句柄，这将触发调试器中的断点。调用堆栈显示调用的发源地，在本例中是来自KiUserCallbackDispatcherContinue。根据调用约定，参数放在RCX、RDX、R8和R9中。
    Breakpoint 0 hit
    USER32!_fnCOPYDATA:
    00007ffd6af62bd0 4883ec58        sub     rsp,58h
    0:000> k
     # Child-SP          RetAddr           Call Site
    00 0000009832caf618 00007ffd6c03dbc4 USER32!_fnCOPYDATA
    01 0000009832caf620 00007ffd688d1144 ntdll!KiUserCallbackDispatcherContinue
    02 0000009832caf728 00007ffd6af61b0b win32u!NtUserGetMessage+0x14
    03 0000009832caf730 00007ff79cc13bed USER32!GetMessageW+0x2b
    04 0000009832caf790 00007ff79cc29333 notepad!WinMain+0x291
    05 0000009832caf890 00007ffd6bb23034 notepad!__mainCRTStartup+0x19f
    06 0000009832caf950 00007ffd6c011431 KERNEL32!BaseThreadInitThunk+0x14
    07 0000009832caf980 0000000000000000 ntdll!RtlUserThreadStart+0x21
    0:000> r
    rax=00007ffd6af62bd0 rbx=0000000000000000 rcx=0000009832caf678
    rdx=00000000000000b0 rsi=0000000000000000 rdi=0000000000000000
    rip=00007ffd6af62bd0 rsp=0000009832caf618 rbp=0000009832caf829
     r8=0000000000000000  r9=00007ffd6afc3070 r10=0000000000000000
    r11=0000000000000244 r12=0000000000000000 r13=0000000000000000
    r14=0000000000000000 r15=0000000000000000
    iopl=0         nv up ei pl nz na po nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    USER32!_fnCOPYDATA:
    00007ffd6af62bd0 4883ec58        sub     rsp,58h
将第一个参数的内容转储到RCX寄存器中，显示了示例程序发送的一些可识别数据。notepad!NPWndProc显然是与接收WM_COPYDATA的目标窗口相关联的回调过程。
    0:000> dps rcx
    0000009832caf678  00000038000000b0
    0000009832caf680  0000000000000001
    0000009832caf688  0000000000000000
    0000009832caf690  0000000000000070
    0000009832caf698  0000000000000000
    0000009832caf6a0  0000029258bbc070
    0000009832caf6a8  000000000000004a       // WM_COPYDATA
    0000009832caf6b0  00000000000c072e
    0000009832caf6b8  0000000000000001
    0000009832caf6c0  0000000000000001
    0000009832caf6c8  0000000000000034
    0000009832caf6d0  0000000000000078
    0000009832caf6d8  00007ff79cc131b0 notepad!NPWndProc
    0000009832caf6e0  00007ffd6c039da0 ntdll!NtdllDispatchMessage_W
    0000009832caf6e8  0000000000000058
    0000009832caf6f0  006f006400200049
传递给fnCOPYDATA的结构不是调试符号的一部分，但是下面是我们所看到的:
    typedef struct _CAPTUREBUF {
        DWORD cbCallback;
        DWORD cbCapture;
        DWORD cCapturedPointers;
        PBYTE pbFree;              
        DWORD offPointers;
        PVOID pvVirtualAddress;
    } CAPTUREBUF, *PCAPTUREBUF;
    typedef struct _FNCOPYDATAMSG {
        CAPTUREBUF     CaptureBuf;
        PWND           pwnd;
        UINT           msg;
        HWND           hwndFrom;
        BOOL           fDataPresent;
        COPYDATASTRUCT cds;
        ULONG_PTR      xParam;
        PROC           xpfnProc;
    } FNCOPYDATAMSG;
继续并检查寄存器的内容。
    0:000> r
    r
    rax=00007ffd6c039da0 rbx=0000000000000000 rcx=00007ff79cc131b0
    rdx=000000000000004a rsi=0000000000000000 rdi=0000000000000000
    rip=00007ffd6af62c16 rsp=0000009832caf5c0 rbp=0000009832caf829
     r8=00000000000c072e  r9=0000009832caf6c0 r10=0000009832caf678
    r11=0000000000000244 r12=0000000000000000 r13=0000000000000000
    r14=0000000000000000 r15=0000000000000000
    iopl=0         nv up ei pl nz na po nc
    cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    USER32!_fnCOPYDATA+0x46:
    00007ffd6af62c16 498b4a28        mov     rcx,qword ptr [r10+28h] ds:0000009832caf6a0=0000029258bbc070
    0:000> u rcx
    notepad!NPWndProc:
    00007ff79cc131b0 4055            push    rbp
    00007ff79cc131b2 53              push    rbx
    00007ff79cc131b3 56              push    rsi
    00007ff79cc131b4 57              push    rdi
    00007ff79cc131b5 4154            push    r12
    00007ff79cc131b7 4155            push    r13
    00007ff79cc131b9 4156            push    r14
    00007ff79cc131bb 4157            push    r15
我们看到一个指向COPYDATASTRUCT的指针被放置在R9中。
    0:000> dps r9
    0000009832caf6c0  0000000000000001
    0000009832caf6c8  0000000000000034
    0000009832caf6d0  0000009832caf6f0
    0000009832caf6d8  00007ff79cc131b0 notepad!NPWndProc
    0000009832caf6e0  00007ffd6c039da0 ntdll!NtdllDispatchMessage_W
    0000009832caf6e8  0000000000000058
    0000009832caf6f0  006f006400200049
    0000009832caf6f8  002000740027006e
    0000009832caf700  0077006f006e006b
    0000009832caf708  0061006800770020
    0000009832caf710  006f007400200074
    0000009832caf718  0079006100730020
    0000009832caf720  00000000000a0021
    0000009832caf728  00007ffd6af61b0b USER32!GetMessageW+0x2b
    0000009832caf730  0000009800000000
    0000009832caf738  0000000000000001
这个结构是在调试符号中定义的，所以我们可以转储它，显示它包含的值。
    0:000> dt uxtheme!COPYDATASTRUCT 0000009832caf6c0
       +0x000 dwData           : 1
       +0x008 cbData           : 0x34
       +0x010 lpData           : 0x0000009832caf6f0 Void
最后，检查应该包含从进程A发送的字符串的lpData字段。
    0:000> du poi(0000009832caf6c0+10)
    0000009832caf6f0  "I don't know what to say!."
我们可以看到这个地址属于创建线程时分配的堆栈。
    0:000> !address 0000009832caf6f0
    Usage:                  Stack
    Base Address:           0000009832c9f000
    End Address:            0000009832cb0000
    Region Size:            0000000000011000 (  68.000 kB)
    State:                  00001000          MEM_COMMIT
    Protect:                00000004          PAGE_READWRITE
    Type:                   00020000          MEM_PRIVATE
    Allocation Base:        0000009832c30000
    Allocation Protect:     00000004          PAGE_READWRITE
    More info:              ~0k
检查位于线程环境块(Thread Environment Block/TEB)中的线程信息块(Thread Information
Block/TIB)为我们提供了StackBase和StackLimit。
    0:001> dx -r1 (*((uxtheme!_NT_TIB *)0x9832e4a000))
    (*((uxtheme!_NT_TIB *)0x9832e4a000))                 [Type: _NT_TIB]
        [+0x000] ExceptionList    : 0x0 [Type: _EXCEPTION_REGISTRATION_RECORD *]
        [+0x008] StackBase        : 0x9832cb0000 [Type: void *]
        [+0x010] StackLimit       : 0x9832c9f000 [Type: void *]
        [+0x018] SubSystemTib     : 0x0 [Type: void *]
        [+0x020] FiberData        : 0x1e00 [Type: void *]
        [+0x020] Version          : 0x1e00 [Type: unsigned long]
        [+0x028] ArbitraryUserPointer : 0x0 [Type: void *]
        [+0x030] Self             : 0x9832e4a000 [Type: _NT_TIB *]
好的，我们可以使用WM_COPYDATA将payload部署到一个目标进程(如果它有一个附加的GUI)，但是除非我们能够执行它，否则它是没有用的。此外，堆栈是一个易变的内存区域，因此不可靠，无法用作code
cave。要执行它，需要找到确切的地址并使用ROP链。当ROP链被执行时，不能保证payload仍然是完整的。因此，在这种情况下，我们可能不能使用WM_COPYDATA，但需要记住的是，可能有许多方法可以使用合法API与另一个进程共享payload，这些API比使用WriteProcessMemory或NtWriteVirtualMemory更不可疑。
对于WM_COPYDATA，仍然需要确定payload堆栈中的确切地址。可以使用ThreadBasicInformation类通过NtQueryThreadInformationAPI检索线程环境块(TEB)的内容。读取TebAddress后，可以读取StackLimit和StackBase值。在任何情况下，堆栈的波动性意味着在执行之前payload可能会被覆盖。
## 总结
避免使用用于部署和执行payload的常规API都会增加检测的难度。PowerLoader在现有的section object中使用了一个code
cave，并使用了一个ROP链来执行。PowerLoaderEx是一个PoC，它使用桌面堆栈，而AtomBombing的PoC使用DLL的.data部分中的一个code
cave。
审核人：yiwang 编辑：边边