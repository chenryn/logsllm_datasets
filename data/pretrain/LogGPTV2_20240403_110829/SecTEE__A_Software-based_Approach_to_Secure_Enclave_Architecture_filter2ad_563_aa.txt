title:SecTEE: A Software-based Approach to Secure Enclave Architecture
Using TEE
author:Shijun Zhao and
Qianying Zhang and
Yu Qin and
Wei Feng and
Dengguo Feng
SecTEE: A Software-based Approach to Secure Enclave
Architecture Using TEE
Shijun Zhao
Institute of Software Chinese
Academy of Sciences
Beijing, China
Qianying Zhang∗
College of Information Engineering,
Capital Normal University
Beijing, China
Yu Qin
Institute of Software Chinese
Academy of Sciences
Beijing, China
Wei Feng
Institute of Software Chinese
Academy of Sciences
Beijing, China
Dengguo Feng
Institute of Software Chinese
Academy of Sciences
Beijing, China
ABSTRACT
Secure enclaves provide a practical solution to secure computation,
and current approaches to secure enclaves are implemented by
extending hardware security mechanisms to the CPU architecture.
Therefore, it is hard for a platform to offer secure computation if its
CPU architecture is not equipped with any secure enclave features.
Unfortunately, ARM CPUs, dominating mobile devices and having
increasing momentum in cloud markets, do not provide any security
mechanisms achieving the security equivalent to modern secure
enclave architectures. In this paper, we propose SecTEE, a software-
based secure enclave architecture which is based on the CPU’s
isolation mechanism and does not require specialized security
hardware of the CPU architecture such as memory encryption
engines. SecTEE achieves a high level of security even compared
with hardware-based secure enclave architectures: resistance to
privileged host software attacks, lightweight physical attacks,
and memory access based side-channel attacks. Besides, SecTEE
provides rich trusted computing primitives for enclaves: integrity
measurement, remote attestation, data sealing, secrets provisioning,
and life cycle management. We implement a SecTEE prototype
based on the ARM TrustZone technology, but our approach can
be applied to other CPU architectures with isolation mechanisms.
The evaluation results show that most overhead comes from the
software encryption and the runtime overhead imposed by trusted
computing primitives is acceptable.
KEYWORDS
Secure enclave, TEE, ARM TrustZone, Board-level physical attacks,
Memory access based side-channel attacks
∗Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363205
ACM Reference Format:
Shijun Zhao, Qianying Zhang, Yu Qin, Wei Feng, and Dengguo Feng. 2019.
SecTEE: A Software-based Approach to Secure Enclave Architecture Using
TEE. In 2019 ACM SIGSAC Conference on Computer and Communications
Security (CCS’19), November 11–15, 2019, London, United Kingdom. ACM,
New York, NY, USA, 18 pages. https://doi.org/10.1145/3319535.3363205
1 INTRODUCTION
Board-level physical attacks are becoming practical threats to
computer systems, such as cold boot attacks [42], bus monitoring
attacks [44, 46, 59, 78] and DMA attacks [19, 105]. These attacks
only require inexpensive attack tools, most of which are publicly
available [25, 76, 78, 97], resulting in that hackers can easily
reproduce these attacks. As a result, these attacks present a big
challenge to the security of computer systems, which are usually
equipped with security measures only against software attacks. To
tackle this challenge, academic and industrial communities propose
the secure enclave architecture, which supports secure computation
under physical attacks and privileged software attacks.
Secure enclaves are implemented as secure isolated execution
environments. Usually, their security is guaranteed by hardware
security mechanisms of CPUs. A specialized memory encryption
engine on the CPU encrypts DRAM regions belonging to secure
enclaves, and thus no code/data is stored outside CPU in plaintext
form. This mechanism prevents physical attacks against hardware
components outside CPU die, such as DRAM and buses. Besides, the
isolation mechanism of CPU isolates address spaces of secure en-
claves to prevent software attacks from the host OS and applications.
This paper mainly considers the security and functionality of secure
enclave architectures, so we refer to “secure enclave architecture”
meaning all the technologies that help to achieve the above security
level, no matter whether the isolated execution environment is
within the address space of its host application or not.
Since secure enclaves provide a high level of security, most
CPU giants deploy this feature to their products. Apple extends
a secure enclave coprocessor within its SoC. Intel proposes the
Software Guard Extensions (SGX) technology and deploys it to
all Core Processors (6th-generation and later). SGX is the most
widely used secure enclave technology, and a variety of SGX-based
security solutions [3, 4, 10, 18, 23, 54, 58, 90, 93, 95, 106, 111] have
been proposed. AMD implements its secure enclave architecture by
Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1723incorporating a coprocessor called AMD Secure Processor (AMD-
SP) into the processor. The weakness of AMD’s secure enclave
architecture is that it does not provide integrity for enclaves’ DRAM
regions. IBM proposes the SecureBlue [87] and SecureBlue++ [6]
technologies that can be built into its processors to protect devices
from physical attacks.
ARM CPUs, which dominate mobile devices and gain increasing
momentum in cloud platforms, however, do not support secure
enclaves. Unfortunately, mobile devices could be lost easily and
cloud platforms could be tampered with by cloud server providers,
so ARM platforms have a strong requirement for a secure enclave
architecture. Current approaches to secure enclaves require modify-
ing the CPU and cannot be applied to commodity ARM platforms.
There are two issues to address when building a secure enclave
architecture for ARM platforms. The first one is the security
problem. ARM proposes TrustZone [2] as the security pillar
of its CPU architecture, which separates a secure world called
trusted execution environment (TEE) for security-critical code, but
TrustZone is designed to only resist software attacks and is unable
to resist physical attacks. Besides, software side-channel attacks
are also becoming practical threats to secure enclaves, especially
the page fault based side-channel attacks and the cache based side-
channel attacks [9, 14, 24, 32, 41, 73, 110, 114], which we refer to in
this paper as the “memory access based side-channel attacks". This
paper focuses on the memory access based side-channel attacks
because of two reasons. First, these attacks are the most threatening
ones against ARM platforms [68, 98, 99, 112], which even have been
developed against ARM TrustZone [68, 122]. Although there are
other kinds of software side-channel attacks, such as side channels
based on speculative execution (Foreshadow [107], SgxPectre [13],
et al.), based on page directory [115], based on branch prediction
(BranchScope [21], Branch Shadowing [61], et al.), based on TLB
[33], these attacks usually target Intel CPUs, and it is better to
protect against them in hardware. Second, Ge et al. [27] have found
that side channels are caused by the inherent insecurity of the
hardware, and that OS itself is powerless to close all side channels
and it can prevent side-channel attacks only when the hardware
provides it with sufficient protection mechanisms. For existing ARM
platforms, it is difficult to prevent all kinds of side-channel attacks
under current hardware protection mechanisms. Therefore, we only
consider resisting memory access based side-channel attacks in this
paper, and our resistance to these side-channel attacks can be seen
as an instance of preventing side-channel attacks by leveraging
CPU’s partition mechanism for memory management and caches.
The second issue is that ARM platforms lack necessary trusted
computing features required by secure enclaves. For example, an
enclave should be able to attest itself to a remote user that it is
issued by a legal entity, runs on a genuine platform, and its state is
trustworthy enough to be provisioned with secrets.
In this paper, we design a software-based secure enclave ar-
chitecture for ARM platforms, named SecTEE. We achieve our
goal by leveraging software-based security primitives of resisting
physical attacks and side-channel attacks, and do not require
modifications to the CPU hardware and only require some basic
security hardware resources which are common on commodity
CPUs. In contrast to specious arguments that software-based
approaches are unable to offer the same security guarantees as
Although there are some solutions that leverage the page
coloring technique to resist cache based side-channel attacks
[31, 55, 92], their approaches cannot be used directly in the ARM
TrustZone context. In their contexts, there exists a privileged system
(the hypervisor, for instance) controlling and managing the whole
physical memory, so they can divide the physical memory into
pieces that are guaranteed to not contend in the cache. However,
in the context of ARM TrustZone, the host OS in the normal
world and the TEE OS in the secure world manage the normal
memory and the secure memory respectively, and the normal world
and the secure world share caches, therefore, the host OS, which
can be compromised in the ARM TrustZone’s threat model, can
always perform cache based side-channel attacks by manipulating
a piece of normal memory sharing the same cache with the victim’s
memory in the secure world. Especially, when the attacker and the
victim run on separate CPU cores, the attacker can monitor the
cache lines of the victim while the victim is running, so cleaning
the victim’s cache during the victim’s context switch is useless.
Therefore, it is a technical difficulty to resist cache based side-
channel attacks in the context of ARM TrustZone.
SecTEE is designed to be incorporated into the TrustZone
software architecture. Compared to Intel SGX, a main difference
of the SecTEE architecture is that there is a specialized OS, i.e.,
TEE OS, for enclave management, and all enclave management
functionality, such as memory management, enclave loading, and
initialization, is moved from host system software to the TEE OS.
This approach allows system designers not to expose memory
management and scheduling of enclaves to host system software,
and further allows us to deploy a mechanism of resisting memory
access based side-channel attacks in the memory management
service. Another benefit of this approach is that it reduces host
applications’ complexity and allows host application developers
to focus on the software logic and ignore the burden of enclave
management.
hardware-based approaches [70], SecTEE illustrates a software-
based approach to a secure enclave architecture providing strong
security execution environments: 1) based on the SoC-bound
execution environment technology and TEE’s isolation capability,
SecTEE offers the same security properties as Intel SGX, namely
resistance to privileged host software attacks and lightweight
physical attacks; 2) based on the page coloring technique [55, 84]
and CPU’s hardware support on cache maintenance, SecTEE
protects ARM TrustZone from memory access based side-channel
attacks, including cross-core cache attacks.
SecTEE extends to the TEE OS critical trusted computing features
required by secure enclaves, including enclave identification, enclave
measurement, remote attestation, data sealing, secrets provisioning,
and life cycle management of enclaves. Secure enclaves run as
trusted applications (TA) on the security-enhanced TEE OS. The
extended trusted computing features expose their interfaces to
enclaves as system calls. When an enclave is going to be loaded
into the system, the security-enhanced TEE OS verifies the enclave’s
identity, measures and checks its integrity. After loaded, the enclave
could invoke the extended system calls to store its sensitive data
and attest its identity and integrity to an external entity. After the
attestation, the external entity can provision secrets to the enclave.
Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1724From an enclave developer’s perspective, SecTEE is a security-
enhanced TEE architecture. A developer builds his enclave like
programming a TA and exposes the interfaces of the enclave to host
applications as TA commands. Host applications use the services of
the enclave by invoking the corresponding TA commands. Besides,
the developer needs to compute the initial measurement of the
enclave and signs the measurement using his signing key. The
measurement and identity of the enclave will be verified when it is
loaded into SecTEE.
We have implemented SecTEE on a TrustZone-enabled platform,
NXP i.MX6Q development platform. We evaluate the performance
overhead introduced by SecTEE using a mature TEE test suite tool
Xtest [67] and some security enclaves. The evaluation results show
that the overhead mainly comes from software encryption and that
the trusted computing features only introduce acceptable overhead.
In summary, the key contributions of this paper include
• A new secure enclave architecture for commodity ARM plat-
forms, SecTEE, which can be incorporated into ARM TrustZone
software architecture and achieves the highest level of security
for secure enclaves, that is, resistance to board-level physical
attacks, strong isolation, and resistance to memory access based
side-channel attacks.
• The page coloring technique cannot prevent cache based side-
channel attacks against TrustZone, especially the cross-core
attacks. To address this technical difficulty, we design a locking
mechanism which locks the enclave pages in the cache and
combine it with the page coloring technique to resist memory
access based side-channel attacks against TrustZone. This
approach demonstrates that hiding the memory management
of secure enclaves from host software is a practical way to
eliminate memory side channels.
• An approach to adding rich trusted computing features to TEE
systems, which enables TEE systems to identify, measure, attest
security applications, seal sensitive data, and enables users to
provision secrets to them.