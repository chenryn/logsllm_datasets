被使用的最小的文件句柄（记住，句柄是一个整型量）作为重定向的新句柄。请看下面的
例子：
        ⋯ ⋯
        ⋯ ⋯
pipe(fd);
childpid = fork();
if(childpid == 0)
        {
/* 关闭子进程的文件句柄 0(stdin) */
close(0);
/* 将管道的读句柄定义到 stdin */
dup(fd[0]);
execlp(“sort”, “sort”, NULL);
                ⋯ ⋯
        }
在上例中巧妙的利用了 dup()函数的特性。因为文件句柄 0（stdin）被关闭了，对 dup
函数的调用就将管道读句柄 fd[0]定向到了 stdin（因为句柄 0 是最小的未用句柄）。然后我
们调用 execlp 函数，用外部过程 sort 覆盖了子进程的代码。因为它继承了子进程的基本输
第四章  进程间通信
- 69 -
入/输出，所以它就将管道作为了它的输入。现在，我们在父进程里向管道写入的任何数据
都将自动被 sort 接受进行排序⋯ ⋯
3．使用 dup2()函数
在 Linux 系统中还有一个系统函数 dup2()。单从函数名上我们也可以判断出它和 dup()
函数的渊源。下面是它的原型：
系统调用：
dup2();
函数声明：
int dup2( int oldfd, int newfd );
返回值：
new descriptor on success
-1 on error: errno = EBADF (oldfd is not a valid descriptor)
            EBADF (newfd is out of range)
                EMFILE(too many descriptors for the process)
注意:
旧句柄将被 dup2()自动关闭
显然，原来的 close 以及 dup 这一套调用现在全部由 dup2()来完成。这样不仅简便了程
序，更重要的是，它保证了操作的独立性和完整性，不会被外来的信号所中断。在原来的
dup()调用中，我们必须先调用 close()函数。假设此时恰好一个信号使接下来的 dup()调用不
能立即执行，这就会引发错误（进程没有了 stdin）。使用 dup2()就不会有这样的危险。下
面的例子演示了 dup2()函数的使用：
⋯ ⋯
pipe(fd);
.        childpid = fork();
if(childpid == 0)
{
                /* 将管道的读入端定向到 stdin */
                dup2(0, fd[0]);
execlp("sort", "sort", NULL);
⋯ ⋯
}
4．使用 popen()/pclose()函数
看了 dup2()函数，一定有人会想，既然能把 close 和 dup 合成一个函数，那么有没有把
fork、exec 和 dup()结合的函数呢？答案是肯定的。它就是 linux 的系统函数 popen()：
库函数：
popen();
函数声明：
FILE *popen ( char *command, char *type);
返回值：
new file stream on success
NULL on unsuccessful fork() or pipe() call
NOTES：
creates a pipe, and performs fork/exec operations using "command"
popen()函数首先调用 pipe()函数建立一个管道，然后它用 fork()函数建立一个子进程，
运行一个 shell 环境，然后在这个 shell 环境中运行"command"参数指定的程序。数据在管道
中流向由"type"参数控制。这个参数可以是"r"或者"w"，分别代表读和写。需要注意的是，
"r"和"w"两个参数不能同时使用！在 Linux 系统中，popen 函数将只使用"type"参数中第一
个字符，也就是说，使用"rw"和"r"作为"type"参数的效果是一样的，管道将只打开成读状态。
使用 popen 打开的管道必须用 pclose()函数来关闭。还记得 fopen 和 fclose 的配对使用
吗？这里再次显示了管道和文件的相似性。
库函数：
pclose();
函数声明：
int pclose( FILE *stream );
- 70 -
Linux网络编程
返回值：
exit status of wait4() call
             -1 if "stream" is not valid, or if wait4() fails
NOTES:
waits on the pipe process to terminate, then closes the stream.
下面是一个使用 popen/pclose 的例子：
#include 
#define MAXSTRS 5
int main(void)
{         
int  cntr;
FILE *pipe_fp;
char *strings[MAXSTRS] = { "roy", "zixia", "gouki","supper", "mmwan"};
        /* 用 popen 建立管道 */
if (( pipe_fp = popen("sort", "w")) == NULL)
{
    perror("popen");
exit(1);
}
        /* Processing loop */
for(cntr=0; cntr /tmp/zixia", "w");
popen("sort | uniq | more", "w");
下面是一个稍微复杂一点的例子，在里面建立了两个管道：
#include 
int main(void)
{        
FILE *pipein_fp, *pipeout_fp;
char readbuf[80];
第四章  进程间通信
- 71 -
        /* 用 popen 建立一个通向"ls:的读管道 */
        if (( pipein_fp = popen("ls", "r")) == NULL)
{
                perror("popen");
exit(1);
}
        /* 用 popen 建立一个通向"sort"的写管道 */
        if (( pipeout_fp = popen("sort", "w")) == NULL)
{
                perror("popen");
   exit(1);
         }
        /* 进程循环 */
        while(fgets(readbuf, 80, pipein_fp))
                fputs(readbuf, pipeout_fp);
        /* 关闭打开的管道 */
        pclose(pipein_fp);
        pclose(pipeout_fp);
        return(0);
}
最后，为了更好的理解管道，我们给出一个 popen()和 fopen()混合使用的例子，请读者
与上例对照，自行分析管道与文件处理的异同：
#include 
int main(int argc, char *argv[])
{
        FILE *pipe_fp, *infile;
        char readbuf[80];
        if( argc != 3) {
                fprintf(stderr, "USAGE:  popen3 [command] [filename]\n");
                exit(1);
        }
        /* 打开输入文件 */
        if (( infile = fopen(argv[2], "rt")) == NULL)
        {
                perror("fopen");
                exit(1);
        }
- 72 -
Linux网络编程
        /* 建立写管道 */
        if (( pipe_fp = popen(argv[1], "w")) == NULL)
        {
                perror("popen");
                exit(1);
        }
        /* Processing loop */
        do
                fgets(readbuf, 80, infile);
                if(feof(infile)) break;
                fputs(readbuf, pipe_fp);
        } while(!feof(infile));
        fclose(infile);
        pclose(pipe_fp);
        return(0);
}
4.3.2  需要注意的问题
以下是一些在管道的使用中需要注意的问题：
1． pipe()的调用必须在 fork()之前；
2．及时关闭不需要的管道句柄；
3．使用 dup()之前确定定向的目标是最小的文件句柄；
4．管道只能实现父子进程间的通信，如果两个进程之间没有 fork()关系，就必须考虑
其他的进程通信方法。
4.4  有名管道
为了解决管道不能提供非父/子关系进程间通信的缺陷，在管道的基础上发展了有名管
道（FIFOs）的概念。我们知道，尽管管道在 Linux 系统内部是以文件节点（inode）的形
式存在的，但是由于其对外的不可见性（“ 无名” 性），我们无法创建新的句柄对其进行访
问。而有名管道在 Linux 系统中以一种特殊的设备文件的形式存在于文件系统中。这样它
不仅具有了管道的通信功能，也具有了普通文件的优点（可以同时被多个进程共享，可以
长期存在等等），有效的解决了管道通信的缺点。
4.4.1  有名管道的创建
因为有名管道是存在于文件系统中的文件节点，所以我们可以用建立文件节点的方式
第四章  进程间通信
- 73 -
来建立有名管道。在 shell 中我们可以用下面的命令：
#mknod sampleFIFO p
#mkfifo – m 0666 sampleFIFO
以上的两个命令是等价的，它们都会在当前的文件系统中建立一个名字为 samlpeFIFO
的有名管道。不过，在细节上他们还是有差别的。mkfifo 命令可以用“ -m” 选项指定所建
立的有名管道的存取权限，而 mknod 则需要之后使用 chmod 来改变有名管道的存取权限。
通过文件列表信息中的 p 指示符我们可以迅速的辨认出有名管道。例如：
#ls -l
prw-r--r--   1 root     root            0 May 14 16:25 sampleFIFO|
在 C 中我们通过系统函数 mknod 来建立有名管道：
库函数：
mknod();
函数声明：
int mknod( char *pathname, mode_t mode, dev_t dev);
返回值：
0 on success,
-1 on error: errno = EFAULT (pathname invalid)
                EACCES (permission denied)
                ENAMETOOLONG (pathname too long)
                ENOENT (invalid pathname)
                ENOTDIR (invalid pathname)
                (see man page for mknod for others)
NOTES:
Creates a filesystem node (file, device file, or FIFO)
下面是个简单的例子：
mknod(“/tmp/sampleFIFO”,s_IFIFO|0666,0)
这条语句在文件系统中建立了一个名为”/tmp/sampleFIFO”的有名管道，其读写权限是
0666（当然，最终的权限还和你的 umask 值有关）。mknod 的第三个参数在创建有名管道
时被忽略，一般都填零。
4.4.2  有名管道的 I/O 使用
有名管道和管道的操作是相同的，只是要注意，在引用已经存在的有名管道时，首先
要用系统中的文件函数来打开它，才能接下来进行其他的操作。例如，我们可以用操作文
件流的 fopen()和 fclose()来打开一个有名管道。下面是一个 server 方的例子：
/* fifoserver.c */
#include 
#include 
#include 
#include 
#include 
#define FIFO_FILE  "sampleFIFO"
int main(void)
{
        FILE *fp;
        char readbuf[80];
        /* Create the FIFO if it does not exist */
- 74 -
Linux网络编程
        umask(0);
   /*在文件系统中创建有名管道*/
        mknod(FIFO_FILE, S_IFIFO|0666, 0);
        while(1)
        {
                /*打开有名管道*/
   fp = fopen(FIFO_FILE, "r");
   /*从有名管道中读取数据*/
                fgets(readbuf, 80, fp);