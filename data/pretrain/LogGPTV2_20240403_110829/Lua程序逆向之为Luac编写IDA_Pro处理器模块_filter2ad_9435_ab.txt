        """
        OP_LOADK,/*    A Bx    R(A) := Kst(Bx)                    */
        """
        insn.Op1.type = o_reg
        insn.Op1.reg = a
        insn.Op1.dtype = dt_dword
        insn.Op2.type = o_displ
        insn.Op2.reg = bx
        insn.Op2.dtype = dt_dword
        return True
这一次，Op2的类型不为o_reg，而是o_displ，这是指针类型的数据，这里在最终解码时，我们会判断它操作的是否为Upvalue，来进一步确定它是UpValue，还是Constant常量，如果是前者，我们输出时会指定U开头，如果是后者，输出时会指定K开头。至于具体的判断方法，则是将指令的Op的specval值设置为1。如decode_SETUPVAL()的实现：
    def decode_SETUPVAL(self, insn, a, b, c, ax, bx, sbx):
        """
        OP_SETUPVAL,/*    A B    UpValue[B] := R(A)                */
        """
        insn.Op1.type = o_reg
        insn.Op1.reg = a
        insn.Op1.dtype = dt_dword
        insn.Op2.type = o_displ
        insn.Op2.reg = b
        insn.Op2.dtype = dt_dword
        insn.Op2.specval = 1
        return True
接下来就是一条条的实现每一条指令的解码回调，这就是一个体力活。
接着是初始化寄存器的部分，代码如下：
    def init_registers(self):
        """This function parses the register table and creates corresponding ireg_XXX constants"""
        # Registers definition
        self.reg_names = [
            # General purpose registers
            # #define MAXSTACK    250
            # >>> for i in xrange(250):
            # ...     print("\"R%d\"," % i)
            "R0",
            "R1",
            "R2",
            "R3",
            "R4",
            "R5",
            "R6",
            "R7",
            "R8",
            ...
            # Fake segment registers
            "CS",
            "DS"
        ]
        # Constants definition
        self.constant_names = [
            # #define MAXSTACK    250
            # >>> for i in xrange(250):
            # ...     print("\"K%d\"," % i)
            "K0",
            "K1",
            "K2",
            "K3",
            "K4",
            "K5",
            "K6",
            "K7",
            "K8",
            ...
        ]
        # Upvalues definition
        self.upvalue_names = [
            # #define MAXSTACK    250
            # >>> for i in xrange(250):
            # ...     print("\"U%d\"," % i)
            "U0",
            "U1",
            "U2",
            "U3",
            "U4",
            "U5",
            "U6",
            "U7",
            "U8",
            ...
        ]
        # Create the ireg_XXXX constants
        for i in xrange(len(self.reg_names)):
            setattr(self, 'ireg_' + self.reg_names[i], i)
        # Create the iconst_XXXX constants
        for i in xrange(len(self.constant_names)):
            setattr(self, 'iconst_' + self.constant_names[i], i)
        # Create the iupval_XXXX constants
        for i in xrange(len(self.upvalue_names)):
            setattr(self, 'iupval_' + self.upvalue_names[i], i)
        # Segment register information (use virtual CS and DS registers if your
        # processor doesn't have segment registers):
        self.reg_first_sreg = self.ireg_CS
        self.reg_last_sreg  = self.ireg_DS
        # number of CS register
        self.reg_code_sreg = self.ireg_CS
        # number of DS register
        self.reg_data_sreg = self.ireg_DS
主要是定义了寄存器名称表reg_names，常量名称表constant_names，UpValue名称表upvalue_names。以及为这些表各自设置名称属性。
完成了这两卡的初始化，接着就是实现处理器模块的回调了。重要的有，notify_ana()，作用是解码每一条指令，它的实现代码如下：
    def notify_ana(self, insn):
        """
        Decodes an instruction into insn
        """
        # take opcode byte
        b = insn.get_next_dword()
        # the 6bit opcode
        opcode = b & 0x3F
        arg_a = GET_BITS(b, 6, 13)
        arg_b = GET_BITS(b, 23, 31)
        arg_c = GET_BITS(b, 14, 22)
        arg_ax = GET_BITS(b, 6, 31)
        arg_bx = GET_BITS(b, 14, 31)
        arg_sbx = GET_BITS(b, 14, 31) - 131071
        print("opcode:%x, a:%x, b:%x, c:%x, ax:%x, bx:%x, sbx:%d" % (opcode, arg_a, arg_b, arg_c, arg_ax, arg_bx, arg_sbx))
        # opcode supported?
        try:
            ins = self.itable[opcode]
            # set default itype
            insn.itype = getattr(self, 'itype_' + ins.name)
        except:
            return 4
        # call the decoder
        return insn.size if ins.d(insn, arg_a, arg_b, arg_c, arg_ax, arg_bx, arg_sbx) else 0
解析32位的指令，取它的opcode、arg_a、arg_b、arg_c、arg_ax、arg_bx、arg_cx等值，然后根据不同的opcode索引查表，设置指令的itype字段，最后返回指令的长度即可。
notify_out_insn()用于输出完整指令，out_mnem()用于输出助记符，notify_out_operand()用于输出操作数，后两个回调是前一个回调的两个拆分，这几个回调加在一起，可以处理指令输出的全部细节。notify_out_insn()与out_mnem()的实现对于多数的反汇编引擎部分是一样的，这里不去细究，主要看看notify_out_operand()，它的实现如下：
    def notify_out_operand(self, ctx, op):
        """
        Generate text representation of an instructon operand.
        This function shouldn't change the database, flags or anything else.
        All these actions should be performed only by u_emu() function.
        The output text is placed in the output buffer initialized with init_output_buffer()
        This function uses out_...() functions from ua.hpp to generate the operand text
        Returns: 1-ok, 0-operand is hidden.
        """
        #print("notify_out_operand called. op:%x" % op.type)
        optype = op.type
        fl     = op.specval
        def_arg = is_defarg(get_flags(ctx.insn.ea), op.n)
        if optype == o_reg:
            ctx.out_register(self.reg_names[op.reg])
        elif optype == o_imm:
            # for immediate loads, use the transfer width (type of first operand)
            if op.n == 1:
                width = self.dt_to_width(ctx.insn.Op1.dtype)
            else:
                width = OOFW_32 if self.PTRSZ == 4 else OOFW_64
            ctx.out_value(op, OOFW_IMM | width)
        elif optype in [o_near, o_mem]:
            r = ctx.out_name_expr(op, op.addr, idc.BADADDR)
            if not r:
                ctx.out_tagon(COLOR_ERROR)
                ctx.out_btoa(op.addr, 16)
                ctx.out_tagoff(COLOR_ERROR)
                remember_problem(PR_NONAME, ctx.insn.ea)
        elif optype == o_displ:
            is_upval = fl
            if is_upval:
                ctx.out_register(self.upvalue_names[op.reg])    #Upvalues
            else:
                ctx.out_register(self.constant_names[op.reg])   #Constants
            #if op.addr != 0 or def_arg:
            #    ctx.out_value(op, OOF_ADDR | (OOFW_32 if self.PTRSZ == 4 else OOFW_64) | signed | OOFS_NEEDSIGN)
        else:
            return False
        return True
根据不同的操作数类型，调用不同的方法进行输出。ctx.out_register负责输出寄存器；ctx.out_value负责输出立即数；而对于UpValue与Constant的输出，这里借用了ctx.out_register来输出，只是使用了不同的名称组。
取这里，指令的基本的反汇编就算完成了，IDA
Pro在应用该处理器模块时，会线性的扫描所有的CODE类型的代码段，进行反汇编处理。由于篇幅的原因，这篇就到此这止了，有兴趣的读者，可以在此基础上，实现函数的创建、代码与数据的交叉引用、自动添加注释等功能。最终实现的效果如图所示：
完整的luac_proc.py文件可以在这里找到：。