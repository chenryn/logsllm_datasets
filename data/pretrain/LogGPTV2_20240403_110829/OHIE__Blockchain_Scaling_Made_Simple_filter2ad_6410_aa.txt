title:OHIE: Blockchain Scaling Made Simple
author:Haifeng Yu and
Ivica Nikolic and
Ruomu Hou and
Prateek Saxena
2020 IEEE Symposium on Security and Privacy
OHIE: Blockchain Scaling Made Simple
Haifeng Yu
Ivica Nikoli´c
Ruomu Hou
Prateek Saxena
PI:EMAIL PI:EMAIL PI:EMAIL PI:EMAIL
Department of Computer Science, National University of Singapore
Abstract—Many blockchain consensus protocols have been
proposed recently to scale the throughput of a blockchain with
available bandwidth. However, these protocols are becoming
increasingly complex, making it more and more difﬁcult to
produce proofs of their security guarantees. We propose a novel
permissionless blockchain protocol OHIE which explicitly aims for
simplicity. OHIE composes as many parallel instances of Bitcoin’s
original (and simple) backbone protocol as needed to achieve
excellent throughput. We formally prove the safety and liveness
properties of OHIE. We demonstrate its performance with a
prototype implementation and large-scale experiments with up to
50, 000 nodes. In our experiments, OHIE achieves linear scaling
with available bandwidth, providing about 4-10Mbps transaction
throughput (under 8-20Mbps per-node available bandwidth con-
ﬁgurations) and at least about 20x better decentralization over
prior works.
I. INTRODUCTION
Blockchain protocols power several open computational
platforms, which allow a network of nodes to agree on the
state of a distributed ledger periodically. The distributed ledger
provides a total order over transactions. Nodes connect to
each other via an open peer-to-peer (P2P) overlay network,
which is permissionless: it allows any computer to connect
and participate in the computational service without registering
its identity with a central authority. A blockchain consensus
protocol enables every node to conﬁrm a set of transactions
periodically, batched into chunks called blocks. The protocol
ensures that honest nodes all agree on the same total ordering
of the conﬁrmed blocks, and that the set of conﬁrmed blocks
grow over time. The earliest such protocol was in Bitcoin [39],
and has spurred interest in many blockchain platforms since.
The seminal Bitcoin protocol, published about a decade
ago [39],
laid some of the key foundations for modern
blockchain protocols. But as Bitcoin gained popularity, its
low throughput has been cited as glaring concern resulting
in high costs per transaction [10]. Currently, Ethereum and
Bitcoin process only about 5KB or 10 transactions per second
on average, which is less than 0.2% of the average available
bandwidth in their respective P2P networks [19]. Many recent
research efforts have thus focused on improving the transaction
throughput, resulting in a series of beautiful designs for
permissionless blockchains [2], [12], [13], [20], [27], [28],
[32], [33], [45], [47].
core
Bitcoin’s
consensus protocol—called Nakamoto
consensus—still stands out in one critical aspect: it is remark-
ably simple. Nakamoto consensus can be fully described in a
few dozens of lines of pseudo-code. Such simplicity makes
it extensively amenable to re-parameterization in hundreds
of deployments, and more importantly, a series of formal
proofs on its security guarantees have been carefully and
independently established in several research works [17], [18],
[24], [26], [40].
The importance of keeping constructions simple enough
to allow such formal proofs and cross validations cannot be
over-emphasized. Consensus protocols are notoriously difﬁcult
to analyze in the presence of byzantine failures. Formal
proofs/analysis are especially important to protocols that are
difﬁcult to upgrade once deployed: Upgrades of blockchain
protocols after deployment (i.e., “hard forks”) cause both
philosophical disagreements and ﬁnancial impact.
Some recent high-throughput blockchain protocols do strive
to retain the simplicity of Nakamoto consensus. Unfortunately,
many of them do not come with formal end-to-end secu-
rity proofs. As an example, Conﬂux [32] is a recent high-
throughput blockchain protocol with an elegant design. But
it has only provided informal security arguments (Section 3.3
in [32]). Our extended technical report [46] shows that in our
simulation, as the throughput of Conﬂux increases, the security
properties of Conﬂux deteriorate.1 Such an undesirable prop-
erty of Conﬂux is hard to discover via informal arguments.
The Conﬂux paper itself also presented effective attacks on a
prior protocol (Phantom [45]) that comes without proofs.
Our goal. This work aims to develop a simple blockchain con-
sensus protocol, which should admit formal end-to-end proofs
on safety and liveness, while retaining the high throughput
achieved by state-of-the-art blockchain protocols. Speciﬁcally,
we aim to achieve:
1) Near-optimal resilience: Tolerate an adversarial compu-
2, which is near-
tational power fraction f close to 1
optimal;
2) Throughput approaching a signiﬁcant fraction of the raw
network bandwidth: The raw available network band-
width in the P2P network constitutes a crude throughput
upper bound for all blockchain protocols. We aim to
achieve a throughput, in terms of transactions processed
per second, that approaches a signiﬁcant fraction of this
raw network bandwidth.2
1Related observations on Conﬂux have also been independently made by
Bagaria et al. [5] and Fitzi et al. [15].
2Note that the raw available bandwidth is only a rather crude upper bound,
and hence in practice it is unlikely for the throughput to reach this upper
bound. For example, this crude upper bound does not take into account factors
such that TCP slow start, probabilistic block generation, probabilistic hot-spots
in the P2P overlay network, overheads for determining which blocks to gossip,
and so on.
© 2020, Haifeng Yu. Under license to IEEE.
DOI 10.1109/SP40000.2020.00008
90
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
3) Decentralization: Many dynamically selected block pro-
posers should be able to add blocks to the blockchain per
second, rather than for example, having one leader or a
small committee add blocks over a long period of time.
More block proposers make transactions less susceptible
to censorship [34], [36], and a DoS attack against a small
number of nodes will no longer impact the availability
of the entire system [23].
Our approach. This work proposes OHIE,3
a novel
blockchain protocol for the permissionless setting. Specif-
ically, OHIE composes many parallel
the
Nakamoto consensus protocol. OHIE ﬁrst applies a simple
mechanism to force the adversary to evenly split its adversarial
computational power across all these chains (i.e., Nakamoto
consensus instances). Next, OHIE proposes a simple solution
to securely arrive at a global order for blocks across all the
parallel chains, hence achieving consistency.
instances of
The modularity of OHIE enables us to prove (under any
given constant f < 1
2) its safety and liveness properties via
a reduction from those of Nakamoto consensus. Our proof
invokes existing theorems on Nakamoto consensus, making
the proof modular and streamlined [40]. By running as many
(e.g., 1000) chains as the network bandwidth permits, OHIE’s
throughput scales with available network bandwidth. Finally,
the parallel chains in OHIE lead to excellent decentralization,
since many miners can simultaneously add new blocks.
Our results. We have implemented a prototype of OHIE,
the source code of which is publicly available [1]. We have
evaluated it on Amazon EC2 with up to 50, 000 nodes, under
similar settings as in prior works [20], [32]. Our evaluation ﬁrst
shows that OHIE’s throughput scales linearly with available
bandwidth, as is the case with state-of-the-art protocols [13],
[20], [28], [33], [47]. For example, under conﬁgurations
with 8-20Mbps per-node bandwidth, OHIE achieves about 4-
10Mbps transaction throughput. This translates to close to
1000 to 2500 transactions per second, assuming 500-byte
average transaction size as in Bitcoin. Such throughput is
about 550% of the throughput of AlgoRand [20] and 150%
of the throughput of Conﬂux [32] under similar available
bandwidth. This suggests that while explicitly focusing on
simplicity, OHIE retains the high throughput property of mod-
ern blockchain designs. Second, regardless of the throughput,
the conﬁrmation latency for blocks in OHIE is always below
10 minutes in our experiments, under security parameters
comparable to Bitcoin and Ethereum deployments. (The con-
ﬁrmation latencies in Bitcoin and Ethereum are 60 minutes
and 3 minutes, respectively.) Finally, our experiments show
that the decentralization factor of OHIE is at least about 20x
of all prior works.
II. SYSTEM MODEL AND PROBLEM
System model. Our system model and assumptions directly
follow several prior works (e.g., [26], [40]). We model hash
3The word “ohie” comes from the Maori language and means “simple”.
functions as random oracles, and assume that some random
genesis blocks are available from an initial trusted setup. We
consider a permissionless setting, where nodes have no pre-
established identities. We use standard proof-of-work (PoW)
puzzles, a form of sybil resistance, to limit the adversary by
computation power. We assume that the entire network has
total n units of computational power, and some reasonable
estimation of n is known. Out of this, the adversary con-
trols f n units of computational power, with f being any
constant below 1
2. The adversary can deviate arbitrarily from
the prescribed protocol, and hence is byzantine. We assume
that some procedure to estimate the total computation power
exists a-priori [18]. Standard PoW schemes help ascertain this
periodically. For instance, in Bitcoin, the rate of PoW solutions
is adjusted (periodically) to be approximately 10 minutes, and
the PoW difﬁculty essentially maps to the estimated total
computation power in the network. We can use the same
mechanism in our design.
Given a ﬁxed block size (e.g., 20 KB), we assume that
honest nodes form a well-connected synchronous P2P overlay
network, so that an honest node can broadcast (via gossiping)
such a block with a maximum latency of δ to other honest
nodes. Our protocol, much like Bitcoin, can tolerate variations
in the actual propagation delay. Network partitioning attacks
can delay block delivery arbitrarily and can cause honest
nodes to lose inter-connectivity [4]. Defences to mitigate these
attacks are an important area of research; however, they are
outside the scope of the design of the consensus protocol.
If the network becomes completely asynchronous, blockchain
consensus is considered impossible [40]. In the presence of
partitions, the CAP theorem suggests that protocols can either
choose liveness or safety, but not both [21], [22]; we choose
liveness—the same as Nakamoto consensus. The adversary
sees every message as soon as it is sent. The adversary can
arbitrarily inject its own messages into the system at any
time (this captures the selﬁsh mining attack [14], where newly
mined blocks are injected at strategic points of time).
in the Bitcoin protocol,
Problem deﬁnition. A blockchain protocol should enable
any node at any time to output a sequence of total-ordered
blocks, which we call the sequence of conﬁrmed blocks (or
SCB in short). For example,
the
SCB is simply the blockchain itself after removing the last
6 blocks. Safety and liveness, in the context of blockchain
protocols, correspond to the consistency and quality-growth
properties of the SCB. Informally, these two properties mean
that the SCB’s on different honest nodes at different time are
always consistent with each other, and that the total number
of honest blocks (i.e., blocks generate by honest nodes) in the
SCB grows over time at a healthy rate. We leave the formal
deﬁnitions of these properties to Section V.
Having consistency and quality-growth is sufﬁcient
to
enable a wide range of different applications. For example,
consistency prevents double-spending in a cryptocurrency—if
two transactions spend the same coin, all nodes honor only the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:19:07 UTC from IEEE Xplore.  Restrictions apply. 
91
ﬁrst transaction in the total order 4. Similarly, any “conﬂicting”
state updates by smart contracts running on the blockchain
can be ordered consistently by all nodes, by following the
ordering in the SCB. In fact, ensuring a total order is key to
support many different consistency properties [6], [29], [30]
for applications, including for smart contracts [3].
Finally,
if the same transaction is included in multiple
blocks in the SCB, then the ﬁrst occurrence will be processed,
while the remaining occurrences will be ignored. To avoid
such waste, miners should ideally pick different transactions
to include in blocks. For example, among all transactions, a
miner can pick those transactions whose hashes are the closest
to the hash of the miner’s public key. Note that this does
not impact safety or liveness at all; it simply reduces the
possibility of multiple inclusions (in different blocks) of the
same transaction.
III. CONCEPTUAL DESIGN
OHIE composes k (e.g., k = 1000) parallel instances of
Nakamoto consensus. Intuitively, we also call these k parallel
instances as k parallel chains. Each chain has a distinct genesis
block, and the chains have ids from 0 to k − 1 (which
can come from the lexicographic order of all the genesis
blocks). Within each instance, we follow the longest-path-rule
in Nakamoto consensus.5 The miners in OHIE extend the k
chains concurrently.
A. Mining in OHIE
Consider any ﬁxed block size (e.g., 20 KB), and the
corresponding block propagation delay δ (e.g., 2 seconds).
Existing results [26], [40] on Nakamoto consensus show that
for any given constant f < 1
2, there exists some constant c
such that if the block interval (i.e., average time needed to
generate the next block on the chain) is at least c · δ, then
Nakamoto consensus will offer some nice security properties.
(Theorem 2 later makes this precise.) As an example, for
f = 0.43, it sufﬁces [40] for c = 5. Such c · δ, together
with n, then maps to a certain PoW difﬁculty p in Nakamoto
consensus, which is the probability of mining success for one
hash operation. (Theorem 2 gives the precise mapping.) Given
p, the hash of a valid block in Nakamoto should have log2
1
p
leading zeros.
In OHIE, to tolerate the same f as above, the hash of a valid
kp leading zeros, where the value p is
block should have log2
chosen to be the same as in the above Nakamoto consensus
protocol. Next, the last log2 k bits of the hash6 of the OHIE
block will index to one of the k chains in OHIE, and the block
1
4Transactions spending the same coin as earlier ones in the total order can