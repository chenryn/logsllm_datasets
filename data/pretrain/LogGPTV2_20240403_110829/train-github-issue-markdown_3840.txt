#### Summary
When submitting a `POST` request of relatively small size,
    import * as qs from "querystring";
    import axios from "axios";
    const requestConfig = {
        url : myUrl,
        method : "POST",
        headers : {
            "Content-Type" : "application/x-www-form-urlencoded",
        },
        data : qs.stringify({ test : "data" });
    };
    const response = await axios.request(requestConfig);
    console.log(
        requestConfig.method,
        requestConfig.url,
        response.status,
        response.statusText,
        typeof response.data
    );
    console.log(response.request._header);
    //Output: "POST", myUrl, 200, "OK", "string"
    //Output: "POST myUrl HTTP/1.1/*snip*/
However, when I `stringify()` a larger object, giving a string of about 55k
characters,
    //Output: "POST", myUrl, 200, "OK", "string"
    //Output:  "GET / HTTP/1.1 /*snip*/
I expected `POST myUrl` but got `GET /`.
So, while my config says "POST" and gives a URL that is not the root, it seems
like axios is doing its own thing.
#### Context
  * axios version: 0.16 and 0.18.0
  * Environment: node v6.11.0, ts-node v3.3.0, TS v2.7.2, Ubuntu 16.04.2
* * *
I tried `fetch()` on my browser and the request works fine.
I also tried the `request` npm package and it worked fine. For now, I'll use
`request` for `POST`-ing "large" amounts of data. It just seems weird that
axios works most of the time, except for "large" chunks of data.