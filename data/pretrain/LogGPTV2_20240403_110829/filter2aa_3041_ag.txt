 "log" 
08 
 "net/http" 
09 
 "regexp" 
10 
11 
 "github.com/goinaction/code/chapter2/sample/search" 
12 ) 
和其他代码文件一样，第 1 行定义了包名。这个代码文件处于名叫 matchers 的文件夹中，
所以包名也叫 matchers。之后，我们从标准库中导入了 6 个库，还导入了 search 包。再一次，
我们看到有些标准库的包是从标准库所在的子文件夹导入的，如 xml 和 http。就像 json 包一
样，路径里最后一个文件夹的名字代表包的名字。 
为了让程序可以使用文档里的数据，解码 RSS 文档的时候需要用到 4 个结构类型，如代码
清单 2-49 所示。 
代码清单 2-49 matchers/rss.go：第 14 行到第 58 行 
14 type ( 
15 
 // item 根据 item 字段的标签，将定义的字段 
16 
 // 与 rss 文档的字段关联起来 
17 
 item struct { 
18 
 XMLName 
 xml.Name `xml:"item"` 
19 
 PubDate 
 string   `xml:"pubDate"` 
20 
 Title   
 string   `xml:"title"` 
21 
 Description string   `xml:"description"` 
22 
 Link 
 string   `xml:"link"` 
23 
 GUID 
 string   `xml:"guid"` 
24 
 GeoRssPoint string   `xml:"georss:point"` 
25 
 } 
26 
27 
 // image 根据 image 字段的标签，将定义的字段 
28 
 // 与 rss 文档的字段关联起来 
29 
 image struct { 
30 
 XMLName xml.Name `xml:"image"` 
31 
 URL     string   `xml:"url"` 
32 
 Title   string   `xml:"title"` 
33 
 Link    string   `xml:"link"` 
34 
 } 
35 
36 
 // channel 根据 channel 字段的标签，将定义的字段 
37 
 // 与 rss 文档的字段关联起来 
38 
 channel struct { 
39 
 XMLName 
 xml.Name `xml:"channel"` 
40 
 Title   
 string   `xml:"title"` 
41 
 Description    string   `xml:"description"` 
42 
 Link    
 string   `xml:"link"` 
43 
 PubDate 
 string   `xml:"pubDate"` 
44 
 LastBuildDate   string   `xml:"lastBuildDate"` 
45 
 TTL    
 string   `xml:"ttl"` 
46 
 Language 
 string   `xml:"language"` 
47 
 ManagingEditor string   `xml:"managingEditor"` 
48 
 WebMaster 
 string   `xml:"webMaster"` 
49 
 Image    
 image    `xml:"image"` 
50 
 Item    
 []item   `xml:"item"` 
51 
 } 
52 
53 
 // rssDocument 定义了与 rss 文档关联的字段 
54 
 rssDocument struct { 
55 
 XMLName xml.Name `xml:"rss"` 
56 
 Channel channel  `xml:"channel"` 
57 
 } 
58 ) 
如果把这些结构与任意一个数据源的 RSS 文档对比，就能发现它们的对应关系。解码 XML
的方法与我们在 feed.go 代码文件里解码 JSON 文档一样。接下来我们可以看看 rssMatcher 类
型的声明，如代码清单 2-50 所示。 
代码清单 2-50 matchers/rss.go：第 60 行到第 61 行 
60 // rssMatcher 实现了 Matcher 接口 
61 type rssMatcher struct{} 
再说明一次，这个声明与 defaultMatcher 类型的声明很像。因为不需要维护任何状态，
所以我们使用了一个空结构来实现 Matcher 接口。接下来看看匹配器 init 函数的实现，如代
码清单 2-51 所示。 
代码清单 2-51 matchers/rss.go：第 63 行到第 67 行 
63 // init 将匹配器注册到程序里 
64 func init() { 
65 
 var matcher rssMatcher 
66 
 search.Register("rss", matcher) 
67 } 
就像在默认匹配器里看到的一样，init 函数将 rssMatcher 类型的值注册到程序里，以备
后用。让我们再看一次 main.go 代码文件里的导入部分，如代码清单 2-52 所示。 
代码清单 2-52 main.go：第 07 行到第 08 行 
07 
 _ "github.com/goinaction/code/chapter2/sample/matchers" 
08 
 "github.com/goinaction/code/chapter2/sample/search" 
main.go 代码文件里的代码并没有直接使用任何 matchers 包里的标识符。不过，我们依旧
需要编译器安排调用 rss.go 代码文件里的 init 函数。在第 07 行，我们使用下划线标识符作为
别名导入 matchers 包，完成了这个调用。这种方法可以让编译器在导入未被引用的包时不报
错，而且依旧会定位到包内的 init 函数。我们已经看过了所有的导入、类型和初始化函数，现
在来看看最后两个用于实现 Matcher 接口的方法，如代码清单 2-53 所示。
代码清单 2-53 matchers/rss.go：第 114 行到第 140 行 
114 // retrieve 发送 HTTP Get 请求获取 rss 数据源并解码 
115 func (m rssMatcher) retrieve(feed *search.Feed) (*rssDocument, error) { 
116 
 if feed.URI == "" { 
117 
 return nil, errors.New("No rss feed URI provided") 
118 
 } 
119 
120 
 // 从网络获得 rss 数据源文档 
121 
 resp, err := http.Get(feed.URI) 
122 
 if err != nil { 
123 
 return nil, err 
124 
 } 
125 
126 
 // 一旦从函数返回，关闭返回的响应链接 
127 
 defer resp.Body.Close() 
128 
129 
 // 检查状态码是不是 200，这样就能知道 
130 
 // 是不是收到了正确的响应 
131 
 if resp.StatusCode != 200 { 
132 
 return nil, fmt.Errorf("HTTP Response Error %d\n", resp.StatusCode) 
133 
 } 
134 
135 
 // 将 rss 数据源文档解码到我们定义的结构类型里 
136 
 // 不需要检查错误，调用者会做这件事 
137 
 var document rssDocument 
138 
 err = xml.NewDecoder(resp.Body).Decode(&document) 
139 
 return &document, err 
140 } 
方法 retrieve 并没有对外暴露，其执行的逻辑是从 RSS 数据源的链接拉取 RSS 文档。在
第 121 行，可以看到调用了 http 包的 Get 方法。我们会在第 8 章进一步介绍这个包，现在只
需要知道，使用 http 包，Go 语言可以很容易地进行网络请求。当 Get 方法返回后，我们可以
得到一个指向 Response 类型值的指针。之后会监测网络请求是否出错，并在第 127 行安排函
数返回时调用 Close 方法。
在第 131 行，我们检测了 Response 值的 StatusCode 字段，确保收到的响应是 200。任
何不是 200 的请求都需要作为错误处理。如果响应值不是 200，我们使用 fmt 包里的 Errorf 函数
返回一个自定义的错误。最后 3 行代码很像之前解码 JSON 数据文件的代码。只是这次使用 xml
包并调用了同样叫作 NewDecoder 的函数。这个函数会返回一个指向 Decoder 值的指针。之后调
用这个指针的 Decode 方法，传入 rssDocument 类型的局部变量 document 的地址。最后返
回这个局部变量的地址和 Decode 方法调用返回的错误值。
最后我们来看看实现了 Matcher 接口的方法，如代码清单 2-54 所示。
代码清单 2-54 matchers/rss.go: 第 69 行到第 112 行 
 69 // Search 在文档中查找特定的搜索项 
 70 func (m rssMatcher) Search(feed *search.Feed, searchTerm string) 
 ([]*search.Result, error) { 
 71 
 var results []*search.Result 
 72 
 73 
 log.Printf("Search Feed Type[%s] Site[%s] For Uri[%s]\n", 
 feed.Type, feed.Name, feed.URI) 
 74 
 75 
 // 获取要搜索的数据 
 76 
 document, err := m.retrieve(feed) 
 77 
 if err != nil { 
 78 
 return nil, err 
 79 
 } 
 80 
 81 
 for _, channelItem := range document.Channel.Item { 
 82 
 // 检查标题部分是否包含搜索项 
 83 
 matched, err := regexp.MatchString(searchTerm, channelItem.Title) 
 84 
 if err != nil { 
 85 
 return nil, err 
 86 
 } 
 87 
 88 
 // 如果找到匹配的项，将其作为结果保存 
 89 
 if matched { 
 90 
 results = append(results, &search.Result{ 
 91 
 Field:   "Title", 
 92 
 Content: channelItem.Title, 
 93 
 }) 
 94 
 } 
 95 
 96 
 // 检查描述部分是否包含搜索项 
 97 
 matched, err = regexp.MatchString(searchTerm, channelItem.Description) 
 98 
 if err != nil { 
 99 
 return nil, err 
100 
 } 
101 
102 
 // 如果找到匹配的项，将其作为结果保存 
103 
 if matched { 
104 
 results = append(results, &search.Result{ 
105 
 Field:   "Description", 
106 
 Content: channelItem.Description, 
107 
 }) 
108 
 } 
109 
 } 
110 
111 
 return results, nil 