title:Crosscheck: Hardening Replicated Multithreaded Services
author:Arthur Martens and
Christoph Borchert and
Tobias Oliver Geissler and
Daniel Lohmann and
Olaf Spinczyk and
R&quot;udiger Kapitza
2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Crosscheck:
Hardening replicated multithreaded services
Arthur Martens
TU Braunschweig
Christoph Borchert
TU Dortmund
Tobias Oliver Geißler
TU Braunschweig
Daniel Lohmann
FAU Erlangen-N¨urnberg
Olaf Spinczyk
TU Dortmund
R¨udiger Kapitza
TU Braunschweig
Abstract—State-machine replication has received widespread
attention for the provisioning of highly available services in data
centers. However, current production systems focus on tolerating
crash faults only and prominent service outages caused by state
corruptions have indicated that this is a risky strategy. In the
future, state corruptions due to transient faults (such as bit
ﬂips) become even more likely, caused by ongoing hardware
trends regarding the shrinking of structure sizes and reduction
of operating voltages.
In this paper we present CROSSCHECK, an approach to
tolerate arbitrary state corruption (ASC) in the context of fault-
tolerant replication of multithreaded services. CROSSCHECK is
able to detect silent data corruptions ahead of execution, and
by crosschecking state changes with co-executing replicas, even
ASCs can be detected. Finally, fault tolerance is achieved by a ﬁne-
grained recovery using fault-free replicas. Our implementation is
transparent to the application by utilizing ﬁne-grained software-
hardening mechanisms using aspect-oriented programming. To
validate CROSSCHECK we present a replicated multithreaded
key-value store that is resilient to state corruptions.
I. INTRODUCTION
State-machine replication (SMR) is an established means
for implementing highly available services in data centers.
Prominent examples are coordination services [1], highly
available data storage [2], but also wide-area replication of
databases [3]. Existing production systems are usually limited in
that they tolerate only faults that lead to crash faults. Prominent
service outages due to state inconsistencies1 causing faulty
service behavior as well as recent studies [4], [5] indicate that
state corruptions need to be addressed for providing highly
available services. The latter gains even more importance given
that future hardware will be even less reliable due to the
shrinking structure sizes, increased clock frequencies, and
reduced operating voltages [6].
One way to cope with these problems is tolerating arbitrary
tolerance (BFT) [7].
faults by means of Byzantine fault
However, despite recent research progress, BFT is more
complex and resource demanding than plain crash-tolerant
replication schemes and goes far beyond tolerating arbitrary
state corruptions [8], [9], [10]. To provide a tailored solution
there is a trend to make crash-tolerant systems resilient to
state corruptions [11], [12]. In production systems, this is
1http://status.aws.amazon.com/s3-20080720.html
usually handled in an ad-hoc manner by manually introducing
checksums for guarding critical data. However,
this is a
laborious task and incidences, like the Amazon S3 outage
in 2007, indicate that in some cases important data has not
been protected against state corruptions. Recently, Correia et.
al. [11] proposed to cure such problems by extending replicas
using mechanisms that contain and detect errors locally by
checksums and redundant execution. A successive work by
Behrens et. al. [12] focuses on reducing the memory overhead
of the previous approach, but still relies on double execution
per replica. Both works are not strictly tied to state-machine
replication. Therefore, they do not exploit the full potential of
co-executing replicas.
This paper presents CROSSCHECK, an approach that hard-
ens state-machine replication against ASCs and explicitly
handles replicated multithreaded services, thereby enabling
the implementation of resilient highly available services for
data centers. Our approach is transparent to the replicated
service by utilizing aspect-oriented programming [13] and
is speciﬁcally tailored to state-machine replication. Ahead
of executing, CROSSCHECK detects silent data corruption
(SDC) by introducing checksums into data structures, that is,
objects in the terminology of object-oriented programming.
However, this only protects objects in memory and fails
guarding objects during modiﬁcation. But, if deterministic
execution is enforced, the generated checksums can be exploited
to crosscheck state changes with co-executing replicas. Due to
these measures and periodic self-checks, ASCs are detected
in an early stage, thereby preventing corruptions to spread
throughout a service, which reduces the risk of failed replicas.
In case of detected state corruptions, the effected state can be
efﬁciently recovered from fault-free replicas at the granularity
of objects. Finally, CROSSCHECK makes use of STORYBOARD
[14], an infrastructure that enforces deterministic execution in
multithreaded environments based on the concept of schedule
memorization. For validating CROSSCHECK, we present an
early prototype of a replicated multithreaded key-value store
based on a C++ version of memcached that is resilient to
ASC. This was achieved by an automated application of object
checksums using the AspectC++ compiler [15] and a request-
centric memorization of critical sections using STORYBOARD.
Our results indicate that memory-intensive applications, such
978-1-4799-2233-8/14 $31.00 © 2014 IEEE
DOI 10.1109/DSN.2014.98
648
as a key-value store, can efﬁciently be hardened.
in Section II. Next, we present
In the remainder of the paper, we ﬁrst deﬁne a system
model
the core concept
of CROSSCHECK followed by a description of our current
prototype in Section IV. Finally, Section VI details related
approaches and Section VII concludes the paper.
II. SYSTEM MODEL AND ASSUMPTIONS
CROSSCHECK aims at harding multithreaded services against
arbitrary state corruptions. To apply CROSSCHECK, we require
that the in-memory service state is composed of objects, which
we denote as state objects. During the execution of a request,
commands may perform any kind of access (i.e., read, write,
create, and delete) to an arbitrary number of state objects. Such
a structure is commonly provided when an object-oriented
programming language is used.
To address multi-core hardware and recent service im-
plementations, we assume a multithreaded service design
where multiple requests can be executed concurrently. Access
to critical data sections is guarded by atomic locks (i.e.,
mutex locks). As a consequence, without further measures,
the execution order of multiple requests is non-deterministic
in commodity systems, as the order depends on the internal
scheduling policy that is inﬂuenced by the workload at time
of execution. Information is exchanged via message passing,
which may fail completely, corrupt or delay messages. Also,
messages sent may arrive in a different order.
To tolerate faults, such as node crashes, CROSSCHECK
utilizes state-machine replication (SMR) [16]. Thereby, liveness
is ensured while tolerating f crash faults with 2f +1 replicated
instances. Given the same ordered set of requests and the same
initial state, replicas execute the requests in the same order,
transfer into the same state, and externalize the same output.
To implement the requirements of SMR, we need to enforce
total ordering of messages and a deterministic execution of
the service replicas. The former is achieved by an agreement
protocol (e.g., Paxos [17]) or group communication framework
(e.g., Spread [18]) supporting total ordering of messages. The
latter requires deterministic execution of threads. In the case
of CROSSCHECK this is achieved by applying STORYBOARD
that follows the idea of scheduling memorization.
Beside node crashes, CROSSCHECK tolerates state corrup-
tions, which can lead to externalization of faulty results and
control-ﬂow corruption altering the behavior of the service.
In line with previous work, we do not expect this to happen
arbitrarily often [11], that is, at most f out 2f + 1 replicas can
be faulty at the same time. Thereby, we make no assumptions
on the number of state object that can be corrupted. A node
crash represents a special case, where all state objects of the
crashed machine are considered as faulty. As CROSSCHECK
provides means to recover state objects from fault-free replicas,
an arbitrary number of state corruptions can be tolerated over
time.
In accordance to current best practice, we require all data
that is exchanged via messages between replicas and clients to
be protected by checksums as well, to detect corrupt messages
and enforce a retransmit.
Furthermore, ASC may also affect the underlying operating
system and the ordering of messages itself (i.e., the agreement
protocol). As both components are not directly protected by
CROSSCHECK, we assume additional hardening measures for
them [19].
III. THE CROSSCHECK APPROACH
Our approach can be split into three tasks: First, CROSS-
CHECK enables the detection of data corruptions as service
state is accessed. Second, CROSSCHECK is able to track state
changes during request execution by means of checksums,
thereby enabling efﬁcient crosschecking amongst co-executing
replicas. Third, corrupted state objects can be recovered from
the remaining fault-free replicas.
A. Detecting silent data corruptions
As described above, we assume that all in-memory service
state that needs to be protected from data corruptions is captured
by state objects. Robustness against data corruptions is achieved
by generic object protection (GOP) [20], which is an automated,
compiler-based approach using aspect-oriented programming
(AOP). With AOP it is possible to augment the code of an
existing program by giving advice to a pointcut, which deﬁnes
speciﬁc positions in the static structure (classes) and running
control ﬂow (execution of methods). The combination of
advice and pointcut builds an aspect, which, thus, concentrates
functionality in a single module that otherwise would be
scattered and possibly duplicated across multiple locations.
In case of CROSSCHECK, all relevant service classes are
automatically extended by additional data members that store
redundancy. Furthermore, member functions (methods) that
compute (update()) and verify (check()) the redundancy are
introduced. Whenever a call to any original method of a state
object is performed, it is modiﬁed by the aspect compiler, as
depicted in the following listing:
1 s t a t e O b j . check ( ) ;
2 s t a t e O b j . accessMembers ( ) ;
3 s t a t e O b j . u p d a t e ( ) ;
/ / o r i g i n a l
c a l l
The method check() is called before the original method call
is executed. It validates the state object by comparing the
introduced redundancy with the object’s real data. If both
diverge an SDC has been detected and the affected state
object needs to be recovered (see Section III-C). In case no
error is detected, the original call to the method is performed.
Afterwards update() is invoked, which recomputes the state
object’s redundancy and stores it inside the object itself. On a
read-only access (a call to a C++ method qualiﬁed as const), the
update() operation is omitted for performance and reliability
reasons. Likewise, the check() operation may be omitted for
write-only access. However, the developer needs to provide a
speciﬁc pointcut that describes all write-only methods.
The generic object protection offers to choose from various
levels of redundancy, such as an error-detecting checksum or
CRC32 code, full object duplication for instant error correction,
649
and other mechanisms. In this paper, we apply an error-
detecting CRC32 code, implemented by the SSE 4.2 instruction
set provided by recent x86 processors. However, small state
objects can be additionally duplicated without incurring serious
memory overhead. We will use the term “checksum” in
an exchangeable way for describing the CRC32 code – in
conformity with the common use of the term “checksum” – even
if not mathematically accurate.
The recent version of the generic object protection supports
non-blocking synchronization on checksum operations, that is,
no additional locks are needed for multithreaded applications.
B. Crosscheck state changes
this does not protect
Using the aforementioned generic object protection, SDCs
can efﬁciently be detected ahead of execution and, depending
on the severeness, immediately resolved (see Figure 1 1 ).
However,
the service state against
corruptions that take place during execution 2 and, even
more problematic, faults during this phase remain undetected.
To address this issue we crosscheck state changes with co-
executing replicas. As part of the SDC detection, each time
a state object is modiﬁed, its checksum is updated. These
updates incorporate all state changes caused by a request and
can be exploited to validate execution and control ﬂow.
Replica R0
access object
Replica R1
access object
Replica R2
access object
1
check
Object
Object
object
update
check
Object
Object
object
update
n
o
i
t
c
e
l
l
o
c
m
u
s
k
c
e
h
c
add
recover
add