# 十一、处理系统中的变更、依赖和机密
在本章中，我们将描述与多个微服务交互的不同元素。
我们将研究如何让服务描述其版本的策略，以便依赖的微服务能够发现它们，并确保它们已经部署了适当的依赖关系。这将允许我们在依赖服务中定义部署顺序，并且如果不是所有的依赖都准备好了，将停止服务的部署。
本章介绍如何定义集群范围内的配置参数，以便可以在多个微服务之间共享这些参数，并使用 Kubernetes ConfigMap 在一个地方进行管理。我们还将学习如何处理属于机密的配置参数，例如加密密钥，团队中的大多数人都不应该访问这些参数。
本章将涵盖以下主题:
*   了解跨微服务的共享配置
*   处理不可告人的机密
*   定义影响多个服务的新功能
*   处理服务依赖关系
到本章结束时，您将知道如何为安全部署准备依赖服务，以及如何在微服务中包含机密，这些机密在部署之外是无法访问的。
# 技术要求
该代码可通过以下网址在 GitHub 上获得:[https://GitHub . com/packt publishing/动手操作 Python 微服务/树/主/第 11 章](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter11)。请注意，该代码是`Chapter10`中代码的扩展，带有本章所述的额外元素。结构是相同的，一个名为`microservices`的子目录包含代码，另一个名为`kubernetes`的子目录包含 Kubernetes 斯配置文件。
要安装集群，您需要使用以下命令构建每个单独的微服务:
```
$ cd Chapter11/microservices/
$ cd rsyslog
$ docker-compose build
...
$ cd frontend
$ ./build-test.sh
...
$ cd thoughts_backend
$./build-test.sh
...
$ cd users_backend
$ ./build-test.sh
... 
```
这将构建所需的服务。
Note that we use the `build-test.sh `script. We will explain how it works in this chapter.
然后，创建`namespace`示例，并使用`Chapter11/kubernetes`子目录中的配置启动 Kubernetes 集群:
```
$ cd Chapter11/kubernetes
$ kubectl create namespace example
$ kubectl apply --recursive -f .
...
```
这会将微服务部署到集群中。
The code included in `Chapter11` has some issues and **won't** deploy correctly until it is fixed. This is the expected behavior. During the chapter, we will explain the two problems: the secrets not getting configured, and the dependency for Frontend not getting fulfilled, stopping it from starting.
Keep reading the chapter to find the problems described. The solution is proposed as an assessment.
为了能够访问不同的服务，您需要更新您的`/etc/hosts`文件，以包括以下几行:
```
127.0.0.1 thoughts.example.local
127.0.0.1 users.example.local
127.0.0.1 frontend.example.local
```
这样，您将能够访问本章的服务。
# 了解跨微服务的共享配置
一些配置可能对几个微服务通用。在我们的示例中，我们为数据库连接复制了相同的值。我们可以使用 ConfigMap 并在不同的部署之间共享它，而不是重复每个部署文件上的值。
We've seen how to add ConfigMap to include files in [Chapter 10](10.html), *Monitoring Logs and Metrics*, under the *Setting up metrics *section. It was used for a single service, though.
配置映射是一组键/值元素。它们可以作为环境变量或文件添加。在下一节中，我们将添加一个包含集群中所有共享变量的通用配置文件。
# 添加配置映射文件
`configuration.yaml`文件包含系统的常用配置。它位于`Chapter11/kubernetes`子目录中:
```
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: shared-config
  namespace: example
data:
  DATABASE_ENGINE: POSTGRES
  POSTGRES_USER: postgres
  POSTGRES_HOST: "127.0.0.1"
  POSTGRES_PORT: "5432"
  THOUGHTS_BACKEND_URL: http://thoughts-service
  USER_BACKEND_URL: http://users-service
```
与数据库相关的变量`DATABASE_ENGINE`、`POSTGRES_USER`、`POSTGRES_HOST`和`POSTGRES_PORT`在思想后端和用户后端之间共享。
The `POSTGRES_PASSWORD` variable is a secret. We will describe this later in this chapter in the *Handling Kubernetes secrets *section.
前端服务中使用了`THOUGHTS_BACKEND_URL`和`USER_BACKEND_URL`变量。不过，它们在集群中很常见。任何想要连接到思想后端的服务都应该使用与`THOUGHTS_BACKEND_URL`中描述的相同的网址。
即使它只在一个单一的服务中使用，到目前为止，它符合系统范围内的变量描述，应该包含在一般配置中。
One of the advantages of having a shared repository for variables is to consolidate them.
While creating multiple services and developing them independently, it is quite common to end up using the same information, but in two slightly different ways. Teams developing independently won't be able to share information perfectly, and this kind of mismatch will happen.
For example, one service can describe an endpoint as `URL=http://service/api`, and another service using the same endpoint will describe it as `HOST=service PATH=/api`. The code of each service handles the configuration differently, though they connect to the same endpoint. This makes it more difficult to change the endpoint in a unified way, as it needs to be changed in two or more places, in two ways.
A shared place is a good way to first detect these problems, as they normally go undetected if each service keeps its own independent configuration, and then to adapt the services to use the same variable, reducing the complexity of the configuration.
在我们的例子中，配置映射的名称是`shared-config`，正如元数据中定义的那样，并且像任何其他 Kubernetes 对象一样，它可以通过`kubectl`命令进行管理。
# 使用 kubectl 命令
可以使用常用的一组`kubectl`命令来检查配置图信息。这允许我们发现群集中已定义的配置映射实例:
```
$ kubectl get configmap -n example shared-config
NAME               DATA AGE
shared-config      6    46m
```
请注意 ConfigMap 包含的键或变量的数量是如何显示的；在这里，是`6`。要查看配置地图的内容，请使用`describe`:
```
$ kubectl describe configmap -n example shared-config
Name: shared-config
Namespace: example
Labels: 
Annotations: kubectl.kubernetes.io/last-applied-configuration:
 {"apiVersion":"v1","data":{"DATABASE_ENGINE":"POSTGRES","POSTGRES_HOST":"127.0.0.1","POSTGRES_PORT":"5432","POSTGRES_USER":"postgres","THO...
Data
====
POSTGRES_HOST:
----
127.0.0.1
POSTGRES_PORT:
----
5432
POSTGRES_USER:
----
postgres
THOUGHTS_BACKEND_URL:
----
http://thoughts-service
USER_BACKEND_URL:
----
http://users-service
DATABASE_ENGINE:
----
POSTGRES
```
如果您需要更改配置映射，您可以使用`kubectl edit`命令，或者更好的是，使用以下命令更改`configuration.yaml`文件并重新应用它:
```
$ kubectl apply -f kubernetes/configuration.yaml
```
这将覆盖所有值。
The configuration won't be applied automatically to the Kubernetes cluster. You'll need to redeploy the pods affected by the changes. The easiest way is to delete the affected pods and allow the deployment to recreate them.
On the other hand, if Flux is configured, it will redeploy the dependent pods automatically. Keep in mind that a change in ConfigMap (referenced in all pods) will trigger a redeploy on all pods in that situation.
我们现在将看到如何向部署中添加配置映射。
# 向部署添加配置映射
一旦配置映射到位，它就可以用于与不同的部署共享其变量，从而维护一个中心位置来更改变量并避免重复。
让我们看看微服务(思想后端、用户后端和前端)的每个部署是如何利用`shared-config`配置图的。
# 想法后端配置映射配置
思想后端部署定义如下:
```
spec:
    containers:
        - name: thoughts-backend-service
          image: thoughts_server:v1.5
          imagePullPolicy: Never
          ports:
              - containerPort: 8000
          envFrom:
              - configMapRef:
                    name: shared-config
          env:
              - name: POSTGRES_DB
                value: thoughts
          ...
```
完整的`shared-config`配置图将被注入吊舱。请注意，这包括以前在吊舱中不可用的`THOUGHTS_BACKEND_URL`和`USER_BACKEND_URL`环境变量。可以添加更多的环境变量。这里，我们留下了`POSTGRES_DB`而不是将其添加到配置图中。
我们可以用吊舱中的`exec`来确认。
Note that to be able to connect the secret, it should be properly configured. Refer to the *Handling Kubernetes secrets* section.
要检查容器内部，检索容器名称并在其中使用`exec`，如以下命令所示:
```
$ kubectl get pods -n example
NAME                              READY STATUS  RESTARTS AGE
thoughts-backend-5c8484d74d-ql8hv 2/2   Running 0        17m
...
$ kubectl exec -it thoughts-backend-5c8484d74d-ql8hv -n example /bin/sh
Defaulting container name to thoughts-backend-service.
/opt/code $ env | grep POSTGRES
DATABASE_ENGINE=POSTGRESQL
POSTGRES_HOST=127.0.0.1
POSTGRES_USER=postgres
POSTGRES_PORT=5432
POSTGRES_DB=thoughts
/opt/code $ env | grep URL
THOUGHTS_BACKEND_URL=http://thoughts-service
USER_BACKEND_URL=http://users-service
```
`env`命令返回所有的环境变量，但是有很多是由 Kubernetes 自动添加的。
# 用户后端配置映射配置