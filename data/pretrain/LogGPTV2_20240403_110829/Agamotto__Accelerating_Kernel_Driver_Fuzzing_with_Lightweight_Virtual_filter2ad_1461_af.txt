performance beneﬁt that Agamotto can provide, as well as its
adaptability.
Acknowledgments
The authors would like to thank our shepherd, Manuel Egele,
and the anonymous reviewers for their valuable feedback. The
authors also thank Paul Kirth for his help with proofreading
this paper. This material is based upon work partially sup-
ported by the Defense Advanced Research Projects Agency
under contracts FA8750-15-C-0124 and FA8750-15-C-0085,
by the United States Ofﬁce of Naval Research under con-
tract N00014-17-1-2782, by the National Science Founda-
tion under awards CNS-1619211 and CNS-1513837, by the
European Commission under the Horizon 2020 Programme
(H2020) as part of the LOCARD project (G.A. no. 832735),
by the IITP under contract 20190015700021001, and by the
NRF under contract 2017R1A2B3006360. Any opinions, ﬁnd-
ings, and conclusions or recommendations expressed in this
2554    29th USENIX Security Symposium
USENIX Association
material are those of the authors and do not necessarily reﬂect
the views of our funding agencies.
References
[1] QEMU system emulation user’s guide.
[2] TriforceAFL: AFL/QEMU fuzzing with full-system em-
ulation, 2016.
[3] Trinity: Linux system call fuzzer, 2019. https://
github.com/kernelslacker/trinity.
[13] S. Boyd-Wickizer and N. Zeldovich. Tolerating mali-
cious device drivers in Linux. In Proceedings of the
USENIX Annual Technical Conference (ATC), 2010.
[14] O. Chang. Attacking the Windows NVIDIA driver, 2017.
https://googleprojectzero.blogspot.com/
2017/02/attacking-windows-nvidia-driver.
html.
[15] A. Chou, J. Yang, B. Chelf, S. Hallem, and D. Engler.
An empirical study of operating systems errors. In Pro-
ceedings of the ACM Symposium on Operating Systems
Principles (SOSP), 2001.
[4] K. Adams and O. Agesen. A comparison of software and
hardware techniques for x86 virtualization. In Proceed-
ings of the International Conference on Architectural
Support for Programming Languages and Operating
Systems (ASPLOS), 2006.
[16] C. Clark, K. Fraser, S. Hand, J. G. Hansen, E. Jul,
C. Limpach, I. Pratt, and A. Warﬁeld. Live migration of
virtual machines. In Proceedings of the USENIX Sympo-
sium on Networked Systems Design & Implementation,
2005.
[5] S. Angel, R. S. Wahby, M. Howald, J. B. Leners,
M. Spilo, Z. Sun, A. J. Blumberg, and M. Walﬁsh. De-
fending against malicious peripherals with Cinch. In
Proceedings of the USENIX Security Symposium, 2016.
[6] Armis Labs. BlueBorne vulnerabilities, 2017. https:
//armis.com/blueborne.
[7] I. Beer. pwn4fun spring 2014 - Safari - part II, 2014.
https://googleprojectzero.blogspot.com/
2014/11/pwn4fun-spring-2014-safari-part-ii.
html.
[8] F. Bellard. QEMU, a fast and portable dynamic trans-
lator. In Proceedings of the USENIX Annual Technical
Conference, FREENIX Track, 2005.
[9] G. Beniamini. Over the air - vol. 2, pt. 2: Exploiting
https:
the Wi-Fi stack on Apple devices, 2017.
//googleprojectzero.blogspot.com/2017/10/
over-air-vol-2-pt-2-exploiting-wi-fi.html.
[10] G. Beniamini. Over the air - vol. 2, pt. 3: Exploiting
https:
the Wi-Fi stack on Apple devices, 2017.
//googleprojectzero.blogspot.com/2017/10/
over-air-vol-2-pt-3-exploiting-wi-fi.html.
[11] G. Beniamini.
com’s Wi-Fi
//googleprojectzero.blogspot.com/2017/04/
over-air-exploiting-broadcoms-wi-fi_4.html.
Over the air: Exploiting Broad-
https:
stack (part 1), 2017.
Over the air: Exploiting Broad-
https:
[12] G. Beniamini.
com’s Wi-Fi
//googleprojectzero.blogspot.com/2017/
04/over-air-exploiting-broadcoms-wi-fi_11.
html.
stack (part 2), 2017.
[17] A. A. Clements, E. Gustafson, T. Scharnowski,
P. Grosen, D. Fritz, C. Kruegel, G. Vigna, S. Bagchi, and
M. Payer. HALucinator: Firmware re-hosting through
In Proceedings of the
abstraction layer emulation.
USENIX Security Symposium, 2020.
[18] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili,
S. Hao, C. Kruegel, and G. Vigna. DIFUZE: Interface
aware fuzzing for kernel drivers. In Proceedings of the
ACM Conference on Computer and Communications
Security (CCS), 2017.
[19] B. Cully, G. Lefebvre, D. Meyer, M. Feeley, N. Hutchin-
son, and A. Warﬁeld. Remus: High availability via
asynchronous virtual machine replication. In Proceed-
ings of the USENIX Symposium on Networked Systems
Design & Implementation, 2008.
[20] A. Davis. USB – undermining security barriers. Black
Hat USA, 2011.
[21] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and
P. M. Chen. ReVirt: Enabling intrusion analysis through
virtual-machine logging and replay. In Proceedings of
the USENIX Symposium on Operating Systems Design
and Implementation (OSDI), 2002.
[22] B. Feng, A. Mera, and L. Lu. P2IM: Scalable and
hardware-independent ﬁrmware testing via automatic
peripheral interface modeling. In Proceedings of the
USENIX Security Symposium, 2020.
[23] Google.
Found Linux kernel USB bugs, 2019.
https://github.com/google/syzkaller/blob/
master/docs/linux/found_bugs_usb.md.
[24] Google.
syzkaller - kernel fuzzer, 2019. https://
github.com/google/syzkaller.
USENIX Association
29th USENIX Security Symposium    2555
[25] E. Gustafson, M. Muench, C. Spensky, N. Redini,
A. Machiry, Y. Fratantonio, D. Balzarotti, A. Francil-
lon, Y. R. Choe, C. Kruegel, and G. Vigna. Toward the
analysis of embedded ﬁrmware through automated re-
hosting. In Proceedings of the International Symposium
on Research in Attacks, Intrusions and Defenses (RAID),
2019.
[26] H. Han and S. K. Cha.
IMF: Inferred model-based
fuzzer. In Proceedings of the ACM Conference on Com-
puter and Communications Security (CCS), 2017.
[27] J. Hertz and T. Newsham. A Linux system call
fuzzer using TriforceAFL, 2016. https://github.
com/nccgroup/TriforceLinuxSyscallFuzzer.
developer’s manual
- Chapter
to
Intel 64 and IA-32 architectures
23
[28] Intel.
ware
troduction
https://www.intel.com/content/dam/
www/public/us/en/documents/manuals/
64-ia-32-architectures-software-developer-vol-3c-part-3-manual.
pdf.
soft-
In-
Extensions.
Virtual Machine
[36] V. Kuznetsov, V. Chipounov, and G. Candea. Testing
closed-source binary device drivers with DDT. In Pro-
ceedings of the USENIX Annual Technical Conference
(ATC), 2010.
[37] L. Lamport. Specifying concurrent program modules.
ACM Transactions on Programming Languages and
Systems (TOPLAS), 5(2):190–222, 1983.
[38] LLVM Developers. libFuzzer – a library for coverage-
guided fuzz testing, 2019. https://llvm.org/docs/
LibFuzzer.html.
[39] A. T. Markettos, C. Rothwell, B. F. Gutstein, A. Pearce,
P. G. Neumann, S. W. Moore, and R. N. M. Watson.
Thunderclap: Exploring vulnerabilities in operating sys-
tem IOMMU protection via DMA from untrustworthy
peripherals. In Proceedings of the Network and Dis-
tributed System Security Symposium (NDSS), 2019.
[40] M. Mendonça and N. Neves. Fuzzing Wi-Fi drivers to
locate security vulnerabilities. In Proceedings of the
European Dependable Computing Conference (EDCC),
2008.
[29] D. R. Jeong, K. Kim, B. Shivakumar, B. Lee, and I. Shin.
Razzer: Finding kernel race bugs through fuzzing. In
Proceedings of the IEEE Symposium on Security and
Privacy, 2019.
[30] A. Kadav, M. J. Renzelmann, and M. M. Swift. Fine-
grained fault tolerance using device checkpoints.
In
Proceedings of the International Conference on Archi-
tectural Support for Programming Languages and Op-
erating Systems (ASPLOS), 2013.
[31] A. Kadav and M. M. Swift. Understanding modern
device drivers. In Proceedings of the International Con-
ference on Architectural Support for Programming Lan-
guages and Operating Systems (ASPLOS), 2012.
[32] S. Keil and C. Kolbitsch. Stateful fuzzing of wireless
device drivers in an emulated environment. Black Hat
Japan, 2007.
[33] S. Y. Kim, S. Lee, I. Yun, W. Xu, B. Lee, Y. Yun, and
T. Kim. CAB-Fuzz: Practical concolic testing tech-
niques for COTS operating systems. In Proceedings of
the USENIX Annual Technical Conference (ATC), 2017.
[34] S. T. King, G. W. Dunlap, and P. M. Chen. Debugging
operating systems with time-traveling virtual machines.
In Proceedings of the USENIX Annual Technical Con-
ference (ATC), 2005.
[41] S. Nagy and M. Hicks. Full-speed fuzzing: Reducing
fuzzing overhead through coverage-guided tracing. In
Proceedings of the IEEE Symposium on Security and
Privacy, 2019.
[42] K. Nohl and J. Lell. BadUSB – on accessories that turn
evil. Black Hat USA, 2014.
[43] Open Virtualization Alliance. Linux kernel virtual ma-
chine. https://www.linux-kvm.org.
[44] Open Virtualization Alliance. Virtio. https://www.
linux-kvm.org/page/Virtio.
[45] Open Virtualization Alliance.
Windows guest
https://www.linux-kvm.org/page/
drivers.
WindowsGuestDrivers.
[46] S. Pailoor, A. Aday, and S. Jana. Moonshine: Optimiz-
ing OS fuzzer seed selection with trace distillation. In
Proceedings of the USENIX Security Symposium, 2018.
[47] N. Palix, G. Thomas, S. Saha, C. Calvès, J. Lawall, and
G. Muller. Faults in Linux: Ten years later. In Proceed-
ings of the International Conference on Architectural
Support for Programming Languages and Operating
Systems (ASPLOS), 2011.
[35] A. Konovalov and D. Vyukov. KernelAddressSanitizer
(KASan): A fast memory error detector for the Linux
kernel. LinuxCon North America, 2015.
[48] J. Pan, G. Yan, and X. Fan. Digtool: A virtualization-
based framework for detecting kernel vulnerabilities. In
Proceedings of the USENIX Security Symposium, 2017.
2556    29th USENIX Security Symposium
USENIX Association
[49] J. Patrick-Evans, L. Cavallaro, and J. Kinder. POTUS:
Probing off-the-shelf USB drivers with symbolic fault
injection. In Proceedings of the USENIX Workshop on
Offensive Technologies (WOOT), 2017.
[50] A. Pnueli. Applications of temporal logic to the speciﬁ-
cation and veriﬁcation of reactive systems: A survey of
current trends. In Current trends in Concurrency, pages
510–584. Springer, 1986.
[51] M. J. Renzelmann, A. Kadav, and M. M. Swift. Sym-
Drive: Testing drivers without devices. In Proceedings
of the USENIX Symposium on Operating Systems De-
sign and Implementation (OSDI), 2012.
[52] J. Rutkowska.
do
Why
2009.
BitLocker?,
crosoft
theinvisiblethings.blogspot.com/2009/01/
why-do-i-miss-microsoft-bitlocker.html.
I miss Mi-
http://
[53] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel,
and T. Holz. kAFL: Hardware-assisted feedback fuzzing
for OS kernels. In Proceedings of the USENIX Security
Symposium, 2017.
[54] S. Schumilo, R. Spenneberg, and H. Schwartke. Don’t
trust your USB! how to ﬁnd bugs in USB device drivers.
Black Hat Europe, 2014.
[55] D. Song, F. Hetzelt, D. Das, C. Spensky, Y. Na, S. Vol-
ckaert, G. Vigna, C. Kruegel, J.-P. Seifert, and M. Franz.
PeriScope: An effective probing and fuzzing framework
for the hardware-OS boundary. In Proceedings of the
Network and Distributed System Security Symposium
(NDSS), 2019.
[56] J. V. Stoep and S. Tolvanen. Year in review: Android
kernel security. Linux Security Summit, 2018.
[57] S. M. S. Talebi, H. Tavakoli, H. Zhang, Z. Zhang, A. A.
Sani, and Z. Qian. Charm: Facilitating dynamic analysis
of device drivers of mobile systems. In Proceedings of
the USENIX Security Symposium, 2018.
[58] D. J. Tian, A. Bates, and K. Butler. Defending against
malicious USB ﬁrmware with GoodUSB. In Proceed-
ings of the Annual Computer Security Applications Con-
ference (ACSAC), 2015.
[59] D. J. Tian, G. Hernandez, J. I. Choi, V. Frost, P. C. John-
son, and K. R. B. Butler. LBM: A security framework
for peripherals within the Linux kernel. In Proceedings
of the IEEE Symposium on Security and Privacy, 2019.
[60] D. J. Tian, N. Scaife, A. Bates, K. Butler, and P. Traynor.
Making USB great again with USBFILTER. In Pro-
ceedings of the USENIX Security Symposium, 2016.
[61] M. Tischer, Z. Durumeric, S. Foster, S. Duan, A. Mori,
E. Bursztein, and M. Bailey. Users really do plug in USB
drives they ﬁnd. In Proceedings of the IEEE Symposium
on Security and Privacy, 2016.
[62] D. Vyukov. Syzbot and the tale of thousand kernel bugs.
Linux Security Summit, 2018.
[63] W. Xu, S. Kashyap, C. Min, and T. Kim. Designing new
operating primitives to improve fuzzing performance.
In Proceedings of the ACM Conference on Computer
and Communications Security (CCS), 2017.
[64] W. Xu, H. Moon, S. Kashyap, P.-N. Tseng, and T. Kim.
Fuzzing ﬁle systems via two-dimensional input space
exploration. In Proceedings of the IEEE Symposium on
Security and Privacy, 2019.
[65] M. Zalewski. American Fuzzy Lop, 2019. http://
lcamtuf.coredump.cx/afl.
[66] Y. Zheng, A. Davanian, H. Yin, C. Song, H. Zhu, and
L. Sun. Firm-AFL: High-throughput greybox fuzzing
of IoT ﬁrmware via augmented process emulation. In
Proceedings of the USENIX Security Symposium, 2019.
USENIX Association
29th USENIX Security Symposium    2557