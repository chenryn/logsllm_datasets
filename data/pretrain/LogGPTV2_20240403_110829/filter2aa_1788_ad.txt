#define TRISC   (*(volatile __near unsigned char*)0xF94) 
In order to work with time requirements we need to make some operations in fixed intervals of time, 
mainly decrement the process start counter. These steps were grouped together in one function: KernelClock(). 
The user just need to call this function from its own timer interrupt function. 
void kernelClock(void){ 
 unsigned char i; 
 i = ini; 
 while(i!=fim){ 
if((pool[i].start)>(MIN_INT)){ 
pool[i].start--; 
} 
i = (i+1)%SLOT_SIZE; 
 } 
} 
The other kernel function stays the same as presented. 
24 
char kernelAddProc(process newProc){ 
 //checking for free space 
 if ( ((end+1)%SLOT_SIZE) != start){ 
pool[end] = newProc; 
//increment start timer with period 
pool[end].start += newProc.period; 
end = (end+1)%SLOT_SIZE; 
return SUCCESS; 
 } 
 return FAIL; 
} 
char kernelInit(void){ 
 start = 0; 
 end = 0; 
 return SUCCESS; 
} 
void kernelLoop(void){ 
 unsigned char j; 
 unsigned char next; 
 process tempProc; 
 for(;;){ 
if (start != end){ 
//Findind the process with the smallest start 
j = (start+1)%SLOT_SIZE; 
next = start; 
while(j!=end){ 
//does the next has a smaller time? 
if (pool[j].start 0){ 
//great place to use low power mode 
} 
//checking if need to be repeated 
if ( (*(pool[ini].function))() == REPEAT ){ 
AddProc(&(vetProc[ini])); 
} 
//next process 
ini = (ini+1)%SLOT_SIZE; 
} 
 } 
} 
To declare the interrupt function for SDCC compiler we just need to add ”interrupt 1” at the end of the 
function name. As mentioned it just reset the timer and calls the KernelClock. 
25 
//Interrupt 
void isr1(void) interrupt 1{ 
 ResetaTimer(1000); //reset with 1ms 
 KernelClock(); 
} 
In order to use the kernel we just need to call its initialization function, add the processes with their 
frequency of execution and call the ExecutaKernel() function. 
//Blink led 1 
char tst1(void) { 
 BitFlp(PORTD,0); 
 return REPETIR; 
} 
//Blink led 2 
char tst2(void) { 
 BitFlp(PORTD,1); 
 return REPETIR; 
} 
//Blink led 3 
char tst3(void) { 
 BitFlp(PORTD,2); 
 return REPETIR; 
} 
void main(void){ 
 //declaring the processes 
 process p1 = {tst1,0,100}; 
 process p2 = {tst2,0,1000}; 
 process p3 = {tst3,0,10000}; 
 kernelInit(); 
 kernelAddProc(p1); 
 kernelAddProc(p2); 
 kernelAddProc(p3); 
 kernelLoop(); 
} 
26 
 9  Building the device driver controller 
In order to isolate the drivers from the kernel (consequently from the applications) we will build an device 
driver controller. It will be responsible to load the driver and pass the orders received from the kernel to the 
right driver. 
 9.1  Device Driver Pattern 
All kernels presents some kind of pattern to build your driver driver. This standardization is fundamental 
to the system. Only by having an standard interface, the kernel could communicate with a driver that he knows 
nothing at compile time. 
In order to simplify the pointers usage, we've build several typedefs. ptrFuncDriver is a pointer to a 
function that returns a char (error/success code) and receives a pointer to void as parameter. It is used to call 
each driver's function as all of them must have this signature. 
typedef char(*ptrFuncDrv)(void *parameters); 
The driver struct is composed of the driver id, an array of ptrFuncDrv pointers (represented as a pointer) 
and a special function also of the type ptrFuncDrv. This last function is responsible to initialize the driver once it 
is loaded. 
typedef struct { 
 char drv_id; 
 ptrFuncDrv *functions; 
 ptrFuncDrv drv_init; 
} driver; 
In order to the device driver controller to access the device drivers, it need to get a pointer to a “driver 
structure”. Instead of make a statical linking, we set the links with a pointer to a function that, when called, 
returns the desired device driver. 
typedef driver* (*ptrGetDrv)(void); 
A generic driver needs then to implement at least 2 functions: init() and getDriver(). It also needs to have 
a driver struct and a array of pointers, each position pointing to each function it implements. It also needed to 
build an enumerator defining the positions of each function pointer in the array. 
 9.2  Controller engine 
The device driver controller will need at least to known all available drivers. It is done by a vector of 
ptrGetDriver, in which each position holds the pointer to the driver function that return its driver struct. The 
position which the pointers are stored in the vector is defined by an enumerator, helping identify which pointer 
is for which driver. 
drvGeneric
-thisDriver: driver
-this_functions: ptrFuncDrv[ ]
+availableFunctions: enum = {GEN_FUNC_1, GEN_FUNC_2 }
-init(parameters:void*): char
+getDriver(): driver*
-genericDrvFunc1(parameters:void*): char
-genericDrvFunc2(parameters:void*): char
27 
//it is needed to include all drivers file 
#include "drvInterrupt.h" 
#include "drvTimer.h" 
#include "drvLcd.h" 
//this enumerator helps the developer to access the drivers 
enum { 
 DRV_INTERRUPT, 
 DRV_TIMER, 
 DRV_LCD, 
 DRV_END /*DRV_END should always be the last*/ 
}; 
//the functions to get the drivers should 
//be put in the same order as in the enum 
static ptrGetDrv drvInitVect[DRV_END] = { 
 getInterruptDriver, 
 getTimerDriver, 
 getLCDDriver 
}; 
The device driver controller has one array of drivers and a counter indicating how many drivers are loaded 
at the moment. There are only 3 functions: one to initialize the internal variables, one to load a driver and one 
to that parse the commands from the kernel to the correct driver. 
Loading a driver is pretty straightforward. If the driver DRV_INTERRUPT needs to be loaded, we go to the 
available drivers list and ask for the interrupt driver. Then we call its initialization routine and store it on the 
loaded list. If there is no space for another driver the function returns an error 
char initDriver(char newDriver) { 
 char resp = FIM_FALHA; 
 if(driversLoaded drv_init(&newDriver); 
driversLoaded++; 
 } 
 return resp; 
} 
The call driver routine go through the loaded drivers list to identify the correct driver. When there is a 
match the correct function is called and the parameters passed as a pointer to void (in this moment we do not 
know what are the parameters). 
char callDriver(char drv_id, char func_id, void *parameters) { 
 char i, j; 
 for (i = 0; i drv_id) { 
return drivers[i]->func_ptr[func_id].func_ptr(parameters); 
} 
 } 
 return DRV_FUNC_NOT_FOUND; 
} 
 9.3  Using the controller engine 
In order to use the controller engine we just need to include its header on the main file and make use of 
the enumerators defined in each driver file to access the hardware. 
28 
void main(void) { 
 //system initialization 
 //the kernel also start the controller init function. 
 InicializaKernel();  
 initDriver(DRV_LCD); 
 callDriver(DRV_LCD, LCD_CARACTER, 'U'); 
 callDriver(DRV_LCD, LCD_CARACTER, 'n'); 
 callDriver(DRV_LCD, LCD_CARACTER, 'i'); 
 callDriver(DRV_LCD, LCD_CARACTER, 'f'); 
 callDriver(DRV_LCD, LCD_CARACTER, 'e'); 
 callDriver(DRV_LCD, LCD_CARACTER, 'i'); 
} 
The function LCD_CARACTER in the driver DRV_LCD send a character (ASCII coded) to the LCD attached to 
the microcontroller. If there is any need to modify the LCD or change the port which it is connected, the 
application will be kept intact, the developer needs only to change the driver. 
 9.4  Interesting situations 
There are some interesting solutions that helps the application to keep its high level while still interacting 
with the hardware. One of theses situation is to hide the interrupt routine inside a driver while still allowing to 
the application developer to define its behavior. 
//defining the type of pointer to use as an interrupt 
typedef void (*intFunc)(void); 
//store the pointer to interrupt service routine here 
static intFunc thisInterrupt; 
char setInterruptFunc(void *parameters) { 
 thisInterrupt = (intFunc) parameters; 
 return FIM_OK; 
} 
The interrupt driver will store a pointer inside itself. This pointer can be change via setInterrupFunc() 
function. The actual interrupt function will be passed as a parameter. 
Also inside the file is the compiler verbosity that indicates which function is responsible to call the 
interrupt: 
//SDCC compiler way 
void isr(void) interrupt 1{ 
 thisInterrupt(); 
} 
//C18 compiler way 
void isr (void){ 
 thisInterrupt(); 
}  
#pragma code highvector=0x08 
void highvector(void){ 
 _asm goto isr _endasm 
} 
#pragma code  
By using  the pointer to store the ISR, the low end details of the compiler were hidden from the 
application. 
29 
 9.5  Driver callback 
In some I/O processes, we ask for something and than we need to wait for the answer, generally by 
pooling the end bit. With the device driver controller, we can call the driver asking for it to start its work and 
pass a function that will be called back when it has finished its job. This way we save CPU processing time while 
still getting the result as fast as possible. 
In order to accomplish this, the driver must be able to rise an interruption in the system.  
First the application request the data from driver and pass the callback function. The driver store the 
callback for latter use, start the process and setup the interrupt routine. All this are made in normal/application 
mode. 
//Process called by the kernel 
char adc_func(void) { 
 static process proc_adc_callback = {adc_callback, 0, 0}; 
 callDriver(DRV_ADC,ADC_START,&proc_adc_callback); 
 return REPEAT; 
} 
//function called by the process adc_func (via driver controler) 
char startConversion(void* parameters){ 
 callBack = parameters; 
 ADCON0 |= 0b00000010; 
 //inicia conversao 
 callDriver(DRV_INTERRUPT,INT_ADC_SET,(void*)adcISR); 
 return SUCCESS; 
} 
When the desired interruption happens, the interrupt that was set is called. The driver do all the required 
procedures (copy data, raise flags, etc). Before finish, the driver create an new process in the kernel. Note that 
all whis work is made in Interrupt mode. These function should be fast in order to avoid starvation on the 
normal/application mode. 
30 
//interrupt function 
void isr(void) interrupt 1 { 
 if (BitTst(INTCON, 2)) {//Timer overflow 
 timerInterrupt(); 
 } 
 if (BitTst(PIR1, 6)) {//ADC conversion finished 
//calling ISR stored in the adcInterrupt function pointer 
adcInterrupt(); 
 } 
} 
//function on the ADC driver called by the ISR 
void adcISR(void){ 
 value = ADRESH; 
 value <<= 8; 
 value += ADRESL; 
 BitClr(PIR1,6); 
 kernelAddProc(callBack); 
} 
When the callback became the next on the process pool, the kernel will grant its share on processor time. 
Now, inside the callback process, we can devote more time on processor hungry tasks, as signal filtering, 
permanent data storage, etc. 
//callback function started from the kernel 
char adc_callback(void) { 
 unsigned int resp; 
 //getting the converted value 
 callDriver(DRV_ADC,ADC_LAST_VALUE,&resp); 
 //changing line and printing on LCD 
 callDriver(DRV_LCD,LCD_LINE,1); 
 callDriver(DRV_LCD,LCD_INTEGER,resp); 
 return SUCCESS;