2l∑
= Pr[X ≥ j]  1) in a random and non-repeated manner.
Here, the non-repeatedness means that, a data block is accessed
for at most once between two consecutive shufﬂing processes that
involve the block.
PROOF. When layer l is a T1-layer, there are two cases. Case
1.1. If the query target data block Dt has not been found at any
layer prior to layer l, and layer l contains Dt, Dt is accessed. Due
to the randomness of the hash function Hl(·) used to distribute
data blocks to locations, the location of Dt is randomly distributed
among all the locations of layer l. Hence, the access is random.
Also, Dt must not have been accessed since last time it was in-
volved in data shufﬂing; otherwise, the block must have been a
query target of an earlier query and then moved to layer 1 already.
Hence, the access is also non-repeated. Case 1.2. Otherwise, a non-
access dummy block is randomly selected to access, which makes
the access to be random and non-repeated.
When layer l is a T2-layer, there are following cases. Case 2.1. If
the query target Dt has not been found at any layer prior to layer
l, a segment s = Hl(t) of layer l is picked to access. Due to
the randomness of the hash function Hl(·), the selection of s is
random. Then:
• If Dt is in segment s, the block is accessed. As the shufﬂing
process randomly permutes blocks within the same segment,
the access of Dt within segment s is random. The access is
also non-repeated due to the same reasoning as in Case 1.1.
• If Dt is not in segment s, a non-accessed dummy block is
randomly picked to access in the segment. Hence, the access
is random and non-repeated.
Case 2.2.
If the query target Dt has already been found above
layer l, a segment s is randomly selected and a non-accessed dummy
block is randomly picked from the selected segment to access. Hence,
the access is random and non-repeated.
THEOREM 1. S-ORAM is secure under the security deﬁnition
in Section 3.2.
PROOF. Given any two equal-length sequence ⃗x and ⃗y of data
requests, their corresponding observable access sequences A(⃗x)
and A(⃗y) are computationally indistinguishable, because of the fol-
lowing reasons:
• Firstly, according to the query algorithm, sequences A(⃗x)
and A(⃗y) should have the same format; that is, they contain
the same number of accesses, and each pair of corresponding
accesses have the same format.
• Secondly, all blocks in the storage of S-ORAM are random-
ized encrypted and each block is re-encrypted after each ac-
cess. Hence, the two sequences cannot be distinguished based
on the appearance of blocks.
• Thirdly, according to the query algorithm, the j-th accesses
(j = 1,··· ,|A(⃗x)|) of the A(⃗x) and A(⃗y) are from the same
non-empty layer of the storage; and according to Lemma 3,
the locations accessed from the layer are random and non-
repeated in both sequences.
Also, according to Lemma 2, the S-ORAM construction fails with
− log N ), which is considered negligible and no
probability O(N
larger than the failure probability of existing ORAM constructions [6,
8–11, 13, 15–20].
5.2 Overhead Analysis
We analyze the overhead of S-ORAM including bandwidth con-
sumption (i.e., communication overhead), user-side storage over-
head, and server-side storage overhead.
The server-side storage in S-ORAM is no more than 6N · Z bits.
Note that a storage of at most 6N ·Z bits is needed only when shuf-
ﬂing layer L2, i.e., the bottom layer; for all other layers, a storage
of at most 3N · Z bits is needed. The user-side storage is constant;
speciﬁcally, it is 2 · Z bits.
The bandwidth consumption consists of two parts: query overhead
Q(N ) and shufﬂing overhead S(N ), which are analyzed next. The
query overhead includes the retrieval and uploading of up to four
data blocks for layer 1 and two data blocks (i.e., an index block and
a data block) for each non-empty layer. Hence, the maximum com-
munication cost Q(N ) is the retrieval and uploading of 2 log N +2
blocks per query.
When shufﬂing a T1-layer l of 2l+1 data blocks, each data block is
processed once in the user cache. Hence, the communication cost
is the retrieval and uploading of 2l+1 blocks.
When shufﬂing a T2-layer l of n = 4· 2l data blocks or the bottom
layer L2 of n < 6N data blocks, the shufﬂing process includes
three rounds of scanning and two rounds of oblivious sorting. The
scanning rounds can be integrated into the oblivious sorting rounds.
Speciﬁcally, Round I (scanning round) can be performed side-by-
side with the segment-sorting (line 2 of Algorithm 3) of Round II
(oblivious sorting round). Round III (scanning round) can be per-
formed concurrently with the last step of merging (line 19 of Algo-
rithm 5) in Round II. Similarly, Round V (the third scanning round)
can also be performed concurrently with the last step of merging in
Round IV (oblivious sorting round). This way, the shufﬂing cost
becomes the cost for two rounds of oblivious sorting.
Next, we compute the cost of m-way obliviously sorting n data
blocks. With Algorithm 3, n blocks are divided into n
2m2 subsets
of equal size. These subsets are sorted at the user cache and then
recursively merged into a large sorted set by Algorithm 5. During
each merging phase, every m smaller sorted subsets are merged
− 1
into one larger sorted subset. Thus, there is a total of logm
merging phases needed to form the ﬁnal sorted set. Let G(m, s)
denote the number of times that each block is retrieved and then
uploaded during a merging phase, where m smaller sorted subsets
are merged into one larger sorted subset and each smaller subset
contains s data blocks. We have the following recursive relation:
n
2
G(m, s) = G
m,
+ 2.
(9)
This is because, during the merging phase, each block should (i)
perform another phase of merging in which smaller subsets each
containing s/m blocks are merged into subsets of s blocks (line
10 in Algorithm 5), incurring G(m, s
m ) times of retrieval and up-
loading for each block, and then (ii) perform steps 13-20 in Algo-
rithm 5, incurring 2 times of retrieval and uploading of each block.
Hence, each data block should be retrieved and uploaded for
(
)
s
m
−1∑
n
2
logm
T (n) =
i=1
(
)
2
− 1
n
2
G(m, 2mi+1) =
logm
(10)
times during the entire shufﬂing process.
As shufﬂing is performed periodically at layers, the amortized shuf-
ﬂing overhead consists of the following:
• Each T1-layer l (2 ≤ l ≤ L1) is shufﬂed once every time
when an odd multiple of 2l queries have been made, and
each of the 2l data blocks at T1-layer l is scanned once for
every shufﬂing. Hence, the amortized overhead is Sl(N ) =
2l+1
2l+1 = 1 block scanning per query.
• Each T2-layer l (L1 < l < L2), except the bottom layer L2,
is shufﬂed also once every time when an odd multiple of 2l
queries have been made, and two rounds of oblivious sorting
are performed on 4 · 2l data blocks. Hence, the amortized
= 4 · T (4 · 2l) block
overhead is Sl(N ) = 2·4·2l·T (4·2l)
scannings per query.
2l+1
• The bottom layer L2 is shufﬂed every time when a multi-
ple of N queries have been made, and two rounds of oblivi-
ous sorting are performed. The ﬁrst oblivious sorting is per-
formed on w < 6N blocks and second one is performed on
4N. Hence, the amortized overhead is at most SL2 (N ) =
= 6 · T (6N ) + 4 · T (4N ) block
6N·T (6N )
N
scannings per query.
)
+ 4N·T (4N )
Therefore, amortized shufﬂing overhead S(N ) is:
(
N
L2−1∑
S(N ) =
Sl(N )+
Sl(N )+SL2 (N ) = O
l=L1+1
log3 N
log2 m
.
To summarize, the bandwidth consumption for S-ORAM is Q(N )+
S(N ) = O
.
log3 N
log2 m
L1∑
(
l=2
)
5.3 Overhead Comparison
We now compare the performance of S-ORAM with that of B-
ORAM and P-ORAM from both theoretical and practical aspects.
The theoretical results of bandwidth, user-side storage and server-
side storage overheads are denoted as Tb, Tc, and Ts, and the prac-
tical results as Pb, Pc, and Ps, respectively. The practical settings
used here are as follows: the number of data blocks N ranges from