### 优化后的文本

#### 代码示例
```c
// Listing 16: Substring: Masking Sender
void mask_send(string x) {
    string y, e, r;
    y = rerandomize_string(y);
    send_string("7", y);
    r = receive_string("5");
    e = encrypt_string(x);
    send_string("5", e);
    b = gcdecrypt("compare", (int)x.len, 0);
    e = otread("6", (int)b);
    y = decrypt_string(e);
    for (int i = 0; i < x.len; i++) {
        if (b == 1) {
            x.chars[i] = 0;
        } else {
            x.chars[i] = y.chars[i];
        }
    }
}

// Listing 17: Substring: Masking Receiver
string mask_recv(string x) {
    string y, e, q, pub_y, f[2];
    y = receive_string("5");
    f[0].len = x.len;
    f[1].len = x.len;
    for (int i = 0; i < x.len; i++) {
        f[0].chars[i] = y.chars[i] * y.chars[i];
        f[1].chars[i] = modPow(f[1].chars[i], (int)x.chars[i]);
    }
    b = gcencrypt("bool compare(int x, int y)", x < y);
    if (b == 1) {
        e = f[0];
        f[0] = f[1];
        f[1] = e;
    }
    otsend("7", q);
    q = add(q, (int)x.len, n);
    return q;
}
```

#### 文本说明
**Listing 16: Substring: Masking Sender**
掩码协议创建一个0和1的加密字符串，用于掩码本地共享。需要注意的是，如果子字符串长度的共享值在模数上回绕，则需要准备两种情况：一种是回绕，另一种是不回绕。通过不经意传输选择正确的情况。条件计算通过Yao协议实现的比较来完成。因此，在该协议中也会看到这些原语。

掩码协议执行两次，角色互换。因此，我们将协议的每一方实现为单独的函数。Listing 16显示了一方，而Listing 17显示了另一方。然后，在组合协议（Listing 13的第6-9行）中使用本地输入调用每一方。

**Listing 17: Substring: Masking Receiver**

### 结论
本文讨论了确保特定领域语言实现的安全计算的半诚实安全性问题。目前，要么基于已证明安全的特定协议，要么基于允许实现不安全协议的通用语言。我们首次提出了一种类型系统，限制可实现的协议仅为安全协议，同时允许程序员自由选择协议原语。我们证明了任何良好类型的程序在半诚实模型下都是安全的。这为安全计算的实现提供了一种新的权衡。我们的类型系统能够实现复杂的协议，例如我们在隐私保护字符串处理中的示例。

未来的工作是将安全保证扩展到更强的安全模型，如恶意模型。在恶意模型中，各方可以任意行为，但仍需保持输入的隐私性和输出的正确性。这种安全保证在高度敏感的安全计算（如电子投票）中具有实际意义。

### 参考文献
[1] D. Beaver, S. Micali, and P. Rogaway. The Round Complexity of Secure Protocols. Proceedings of the 22nd ACM Symposium on Theory of Computing, 1990.
[2] A. Ben-David, N. Nisan, and B. Pinkas. FairplayMP: A System for Secure Multi-Party Computation. Proceedings of the 15th ACM Conference on Computer and Communications Security, 2008.
...
[37] A. Yao. Protocols for Secure Computations. Proceedings of the IEEE Symposium on Foundations of Computer Science, 1982.

希望这些优化能帮助你更好地理解和实现你的项目！