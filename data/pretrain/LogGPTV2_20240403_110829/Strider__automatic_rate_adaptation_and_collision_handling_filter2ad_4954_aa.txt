title:Strider: automatic rate adaptation and collision handling
author:Aditya Gudipati and
Sachin Katti
Strider: Automatic Rate Adaptation and Collision Handling
Aditya Gudipati, Sachin Katti
Stanford University
{adityag1,skatti}@stanford.edu
Abstract
This paper presents the design, implementation and evaluation of
Strider, a system that automatically achieves almost the optimal rate
adaptation without incurring any overhead. The key component in
Strider is a novel code that has two important properties: it is rate-
less and collision-resilient. First, in time-varying wireless channels,
Strider’s rateless code allows a sender to effectively achieve almost
the optimal bitrate, without knowing how the channel state varies.
Second, Strider’s collision-resilient code allows a receiver to decode
both packets from collisions, and achieves the same throughput as the
collision-free scheduler. We show via theoretical analysis that Strider
achieves Shannon capacity for Gaussian channels, and our empirical
evaluation shows that Strider outperforms SoftRate, a state of the art
rate adaptation technique by 70% in mobile scenarios and by upto
2:8(cid:2) in contention scenarios.
Categories and Subject Descriptors
C.2 [Computer Systems Organization]: Computer-Communication
Networks
General Terms
Algorithms, Performance, Design
1.
INTRODUCTION
Rate adaptation techniques face two challenging scenarios in wire-
less networks:
time varying wireless channels and contention. To
pick the right bitrate in time-varying wireless channels, nodes have
to continuously estimate channel quality either via probing [2, 13, 21,
15] or by requiring channel state feedback from the receiver [4, 33].
However, probing is inaccurate since packet loss is a coarse measure
of channel strength. Channel state feedback from the receiver is more
accurate but incurs larger overhead, and can still be inaccurate in mo-
bile scenarios when the channel varies every packet. The bitrate adap-
tation decision in contention is the opposite of time-varying wireless
channels, i.e. do not adapt the bitrate due to contention related losses.
Hence in such scenarios, nodes have to use probe packets such as RT-
S/CTS [1, 35] or require explicit notiﬁcation from the receiver [33,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
Copyright 2011 ACM 978-1-4503-0797-0/11/08 ...$10.00.
26] to discern the cause of packet loss and avoid making an incor-
rect bitrate change. Both techniques again incur overhead and reduce
throughput.
Prior work has made considerable progress in reducing the over-
head and improving accuracy of bitrate adaptation, but the conven-
tional wisdom is that there is a fundamental undesirable tradeoff be-
tween accuracy and overhead that cannot be avoided. Higher over-
head lowers network goodput, but inaccurate bitrate adaptation also
signiﬁcantly affects network performance. The performance impact
is especially bad in mobile or high contention scenarios.
In this paper we present Strider (for Stripping Decoder, our de-
coding algorithm), a system that eliminates the undesirable tradeoff
between overhead and accuracy for rate adaptation. Strider designs a
novel coding technique that allows a node to achieve almost the opti-
mal bitrate adaptation possible in any scenario without incurring any
overhead. Strider’s code design has two important characteristics:
(cid:15) Strider’s code is rateless. Hence, senders do not have to per-
form any probing or require any channel state feedback or ad-
just their bitrates, they simply create a continuous stream of
encoded packets using Strider’s algorithm until the receiver de-
codes and ACKs. We show that Strider’s technique achieves
the same effective throughput as the omniscient conventional
scheme which knows the channel state exactly in advance and
always picks the right bitrate to transmit at.
(cid:15) Strider’s code is collision-resilient, i.e.
it can take collided
packets and decode the individual packets from them. Hence
there is no need for the senders to discern the cause of packet
losses and take measures to avoid collisions. We show that
Strider’s collision-resilient code achieves at least the same ef-
fective throughput as the omniscient collision-free scheduler,
i.e. a scheme which knows exactly what nodes are contending
in advance and schedules them in a collision-free manner.
The key intuition behind Strider is the concept of a minimum dis-
tance transformer (MDT). The MDT technique works by transmit-
ting linear combinations of a batch of conventionally encoded sym-
bols (e.g. QPSK symbols encoding bits that have been passed through
a 1=5 rate convolutional code). The intuition is that when we take
a batch of L conventional symbols, and transmit M linear combi-
nations of them, in essence we are mapping points from a L dimen-
sional space (the conventional symbols) to points in a M dimensional
space. Depending on the relative values of M and L, the minimum
distance in this new space can be controlled. Since every channel
code has a threshold minimum distance above which it can be de-
coded correctly, in Strider a sender can transmit linear combinations
until the minimum distance in the new space goes above the required
threshold and the packets are decoded correctly. Moreover, the min-
imum distance adjustment happens without any feedback from the
receiver or probing by the sender. Hence the technique automatically
achieves the best bitrate, since in effect it is ﬁnding the densest con-
stellation possible that still allows correct decoding, which is what
conventional rate adaptation protocols are attempting to accomplish.
The other important component of Strider is collision resilience.
Currently, collided packets are thrown away and receivers wait for
retransmissions, hoping they wont collide again. Instead, Strider de-
codes both (or more) packets from a collision. The key reason for our
collision resilience is Strider’s rateless code: it allows the receiver to
treat the packets from the sender with the weaker channel as noise,
and due to its rateless property, after the receiver has accumulated
sufﬁcient transmissions it can decode the packet from the sender with
the stronger channel. After decoding the ﬁrst packet, we can subtract
its contribution from the received signal and decode the packets from
the other sender. Hence, Strider’s code has the nice beneﬁt of com-
pletely eliminating hidden terminals.
We show theoretically that Strider’s code asymptotically achieves
Shannon capacity for AWGN channels. Further, Strider’s algorithm
has linear-time computational complexity and is efﬁcient to imple-
ment. We have prototyped Strider in the GNURadio [6] SDR plat-
form and evaluated it in an indoor testbed via experiments using
USRP2s, as well as trace drive simulations. We compare Strider to
the omniscient scheme and SoftRate [33], a state of the art conven-
tional rate adaptation scheme. The omniscient scheme has perfect
channel knowledge, and always picks the optimal bitrate and sched-
ules nodes in a collision-free manner. Our evaluation shows that:
(cid:15) Strider achieves a performance that is within 5% of the perfor-
mance of the omniscient scheme across a wide range of SNRs
(5-25dB).
(cid:15) When collisions happen, our results show that Strider does at
least as well as the omniscient collision free scheduler, and
surprisingly in many cases Strider does better! The reason
as we discuss later is that collision free scheduling is actu-
ally sub-optimal and in many cases concurrently transmitting
and applying our technique can deliver even higher through-
put. Strider thus completely eliminates hidden terminals in our
testbed.
(cid:15) In comparison with SoftRate [33], we show that Strider achieves
nearly 70% throughput improvement in mobile scenarios. Fur-
ther in networks with contention/hidden terminals, Strider pro-
vides a 2:8(cid:2) increase over SoftRate.
Strider is related in spirit to prior work on rateless codes such as
fountain codes [19]. However, these rateless codes work only when
the packets are correctly decoded, and cannot handle wireless distor-
tions such as noise and interference. Similarly, prior work on incre-
mental redundancy and hybrid ARQ [29, 18, 7] provides a limited
form of rate adaptation by adaptively providing the right amount of
redundancy needed to enable decoding of partially correct packets.
However, these techniques still have to pick the right modulation,
and further do not work in the presence of collisions or interference.
Strider provides complete rate adaptation, and handles collisions and
interference in a single framework.
2. RELATED WORK
There is a large body of prior work on rate adaptation. Most tech-
niques use one of two approaches: estimate channel strength via di-
rect channel state feedback (in the form of SNR or BER measure-
ments) from the receiver, or infer channel strength based on packet
delivery success/failures [4, 33, 2, 13, 21, 15, 27]. Channel state feed-
back in fast changing mobile channels can be expensive, and worse
yet, inaccurate since by the time the transmitter uses the feedback, the
channel might have changed. Inference based on packet delivery suc-
cess can be highly inaccurate, since packet delivery is a very coarse
measure of channel strength. Further, none of these techniques work
when there are collisions, and therefore often need to augment the
rate adaptation protocol with extra overhead in the form of probing
or feedback from the receiver to discern whether the packet loss was
caused by a collision.
Strider is related to prior work in rateless codes and hybrid ARQ.
Rateless codes such as LT [19] and Raptor codes [28] allow one to au-
tomatically achieve the capacity of an erasure channel without know-
ing the packet loss probability in advance. However these techniques
require whatever packets are received to be correctly decoded, and
do not work in wireless channels where packets are corrupted [28].
Second, hybrid ARQ schemes used in 4G wireless systems based on
punctured turbo codes [18, 29] can be used to selectively provide ex-
tra redundancy in the form of coded bits, to help the receiver decode
an erroneous frame. However, these techniques still need to pick the
correct modulation and further do not work when there are collisions
or external interference.
Strider’s collision resilience component is related to prior work on
interference cancellation [10, 9, 16, 17]. However, all prior tech-
niques require that the colliding packets be encoded at the correct bi-
trate to enable them to decode collisions. For example in SIC, if the
colliding packets have been encoded at a bitrate corresponding to the
idle channel (which will happen because the colliding hidden termi-
nal senders cannot know in advance that they will collide), SIC will
fail to work [9]. Zigzag has a similar but less acute problem, since it
also needs correct decoding of its interference free chunks, which re-
quires the packets to be encoded at the correct bitrate. Further Zigzag
needs the same set of packets to collide across successive collisions.
Strider does not have any of these problems, since its rateless prop-
erty automatically adjusts the effective bitrate to enable its stripping
decoder to decode collisions, and it can decode even if collisions are
between different sets of packets.
Strider’s design is inspired by recent work on uplink power control
in cellular CDMA systems, as well as theoretical work on rateless
code design [3, 34, 23, 5, 24]. As we describe later, Strider treats
each packet transmission as a set of virtual collisions among inde-
pendent blocks, very similar to how multiple packet transmissions
in a CDMA uplink wireless system collide. Hence decoding algo-
rithms that are used in CDMA basestations have a similar structure
to Strider’s algorithm. Speciﬁcally, they need to control how power
is allocated to each uplink transmitter to enable successful decoding,
and we borrow from such algorithms to design Strider’s encoding al-
gorithm. The key contribution of Strider is the application of these
techniques to design a rateless code for wireless channels, as well
as an implementation and detailed evaluation of the technique using
practical software radio experiments. Further, we also design a novel
technique that extends the code design to handle packet collisions.
3.
INTUITION
Senders have to adapt bitrates because of the threshold behavior of
conventional techniques, i.e. they decode only at or above a particular
SNR threshold depending on the coding rate and modulation choice.
Even though it is fairly introductory material, we ﬁrst discuss the
reasons for this thresholding behavior since it provides insight into
our eventual design.
In current schemes, data bits are ﬁrst channel coded to add pro-
tection against noise. The level of protection is parameterized by the
coding rate (e.g a 1=2 rate code implies that every data bit is protected
with one extra bit of redundancy). Coded bits are then modulated, i.e.
they are mapped to points in a complex constellation and transmit-
ted on the wireless channel. For example in BPSK, bits are mapped
P ) (P is the transmission
to two points on the real line (
power) and transmitted. Due to attenuation and additive noise the re-
P ;(cid:0)p
p
p
P = (cid:0) p
ceiver gets y = x + n, where n is Gaussian noise with variance (cid:27)2.
When decoding, the receiver ﬁrst demodulates the received symbol,
i.e. maps it to the nearest constellation point and infers what coded
bit was transmitted. Hence if the Gaussian noise value is greater/-
less than (
P ) the receiver makes a bit error. However, the
channel code decoder can correct a certain number of errors (depend-
ing on the amount of redundancy added) and decode the ﬁnal data.
Thus as long as the number of bit ﬂips at the demodulation (BPSK)
stage are less than the correcting power of the channel code, the data
eventually gets decoded correctly.
p
Assuming the channel code rate is ﬁxed, the key to ensuring de-
coding success is to make sure that the demodulation stage does not
make more bit errors than the channel code can handle. This error
rate is dictated by the minimum distance between any two constella-
P ) and how it compares with the
tion points (e.g. for BPSK it is 2
noise power ((cid:27)2). To get good performance, the minimum distance
has to be sufﬁciently large so that no more than the tolerable number
of bit errors occur. If its too small, the channel code cannot correct,
if its too large, the extra redundancy in the channel code is wasteful.
Modulation schemes have different minimum distances (e.g. BPSK,
QPSK, 16-QAM, 64-QAM have successively decreasing minimum
distances), and depending on the channel SNR, the rate adaptation
module’s job is to pick the combination of modulation and channel
coding that correctly decodes and maximizes throughput. Hence, dif-
ferent modulation and channel coding schemes have different SNR
thresholds above which they begin to decode.