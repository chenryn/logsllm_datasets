91
1035
13
2
2
6
27
63
9
2
12.50%
0.48%
0.97%
2.08%
0.89%
0.29%
3.28%
4.03%
0.11%
0.09%
0.92%
4.55%
VCI
25.00% 100.00%
36.73%
87.50%
61.54%
56.76%
38.82%
6.23%
41.18%
19.51%
29.17%
6.41%
vs. AnyV vs. SameOﬀ
75.00%
83.04%
52.94%
68.29%
48.61%
83.50%
87.50%
98.70%
98.90%
96.61%
98.43%
99.25%
40.00% 100.00%
66.67%
30.00%
29.67%
4.11%
6.09%
0.65%
21.43%
69.23%
28.57% 100.00%
96.72%
93.96%
99.62%
98.54%
98.67%
95.45%
60.00%
55.00%
86.15%
89.32%
69.05%
71.43%
gadget (REC-G). The ML-G gadget represents a linear dis-
patch using a loop that iterates over a list of objects (coun-
terfeit) and calls some virtual function of each object. The
REC-G gadget corresponds to a recursive dispatch using two
consecutive vcalls on diﬀerent objects, where the ﬁrst vcall
dispatches one vfgadget and the second vcall recurses back
into a REC-G.
In a COOP attack, data is passed between vfgadgets ei-
ther explicitly or implicitly. In explicit data ﬂows, the at-
tacker picks vfgadgets that pass data via object ﬁelds or vcall
arguments. In implicit data ﬂows, data is passed via unused
argument registers by chaining vfgadgets that take diﬀerent
numbers of arguments. Note that this is speciﬁc to archi-
tectures that pass arguments in registers by default, such
as x86 64. Explicit data ﬂow via object ﬁelds is achieved
by overlapping objects, in memory, of diﬀerent classes such
that one vfgadget writes to some object ﬁeld, then another
vfgadget reads from the same ﬁeld. On x86 32, this also
requires an initial vfgadget that passes the same ﬁeld to the
dispatched vfgadgets, so that they can read or write to it. In
the following, we discuss how VCI abrogates the attacker’s
ability to satisfy the COOP requirements.
Table 3 shows VCI’s vcall target resolution coverage re-
sults (summary statistic are in Table G.1). VCI fully and
partially resolved 58% plus 26% of all vcall targets, on aver-
age (geometric). Unresolved targets ranged from 0% to 29%,
with an average of 14%. While the percentage of unresolved
calls is not particularly low for some of the test programs,
the percentage of fully and partially resolved targets out-
weighed that of unresolved targets in all programs.
For both fully and partially resolved vcalls, VCI guaran-
tees that all targets of a vcall are at the same vtable oﬀset
and under the same class hierarchy. The targets in this
case correspond to function polymorphs (redeﬁnitions) of
some virtual function in the hierarchy, therefore, all taking
the same number of arguments. This prevents implicit data
ﬂows in COOP. This also means that the targets are func-
tionally related, since they are part of the same hierarchy,
and unlikely to exhibit useful semantics for the attacker.
For explicit data ﬂows, VCI checks the layout of a vcall in-
voking object and all its polymorphic subobjects against the
statically inferred layouts. The checks assert that the con-
tents of all involved vtables and oﬀsets of subobjects from
each this pointer are valid. This means that the attackers
cannot overlap objects unless the objects classes have a suf-
Table 3: Percentage of fully, partially, and unre-
solved vcalls of the C++ SPEC CPU2006 bench-
marks (top) and the C++ Firefox modules (bottom).
Program
444.namd
447.dealII
450.soplex
453.povray
471.omnetpp
483.xalancbmk
liblgbllibs.so
libmozgnome.so
libmozjs.so
libxul.so
libzmq.so
updater
Identiﬁed
Vcalls
2
916
511
127
706
9134
%Resolved Vcalls
Fully Partially Unres.
0%
100%
09%
37%
63%
25%
26%
51%
24%
47%
56%
16%
0%
54%
12%
23%
29%
28%
63
206
3784
79315
133
8
79%
72%
60%
32%
32%
75%
geomean: 58%
21%
22%
28%
39%
52%
13%
26%
0%
06%
12%
29%
16%
12%
14%
ﬁcient number of non-polymorphic subobjects arranged in
a way that allows overlapping without disrupting the lay-
out checks. We argue that this signiﬁcantly complicates
the attacks. Additionally, even if such classes were avail-
able, VCI guarantees the integrity of vtable contents which
consequently prevents the invocation of desired system calls
via counterfeit vtables. This limits the attackers to only
invoking system calls via vfgadgets that invoke an attacker-
controlled indirect call (C-style function pointer), which are
“rare in practice” [34] and outside the scope of this work.
If VCI fails to resolve the targets of some vcall (14% of all
vcalls in Table 3, on average), it resorts to the SameOﬀ pol-
icy for that particular vcall. This might enable an attacker
to deploy a COOP attack by attacking and utilizing only
the unresolved vcalls. Note that the same policy against
counterfeit object overlapping is still in eﬀect for unresolved
vcalls. While attackers might be able to workaround those
constraints, at least in theory, this setup is still signiﬁcantly
constrained compared to unprotected binaries. The reduc-
tion in attack surface is essential to heighten the cost of
building a functional exploit. Complementary solutions that
depend on reference and argument counts (e.g., [39, 42, 45])
can be selectively applied at unresolved vcalls sites to further
shrink the possibility of data ﬂows (see Section 6).
1485.3 Performance Overhead
We benchmarked the runtime overhead of binaries pro-
tected by VCI using 1) the C++ SPEC CPU2006 bench-
marks, and 2) the three industry standard browser speed
benchmarks: JetStream, Kraken and Octane. The results
are tabulated in Table 4. Overall, VCI incurred low overhead
ranging from 2.01% to 10.69% on namd, dealII, soplex, and
povray. omnetpp and xalancbmk incurred higher overhead
(21.11% and 34.80%), which we believe is a side eﬀect of
alignment changes in the modiﬁed binary, as witnessed by
other studies [17, 22, 37]. On browser benchmarks, VCI
incurred very low overhead, ranging from 1% to 7%. Over-
all, VCI incurred a total average (geometric) of 7.79%. The
time it took VCI to analyze each binary is tabulated sepa-
rately in Table 1. We emphasize that we made no attempts
to optimize the performance of VCI’s analysis or policy en-
forcement (see Section 4.6). The overhead incurred by VCI
aligns with the state-of-the-art vtable defenses (10%−18.7%
[30], 0.6% − 103%[17], 2% − 30%[22], 8% − 19.2% [37]).
Table 4: Performance overhead of VCI on the C++
SPEC CPU2006 benchmarks and three industry
standard browser speed benchmarks on Firefox (me-
dian of 3 runs).
Benchmark
444.namd
447.dealII
450.soplex
453.povray
471.omnetpp
483.xalancbmk
JetStream
Kraken
Octance
orig.
739 s
1813 s
565 s
399 s
612 s
1047 s
new overhead
10.69%
9.98%
8.50%
2.01%
34.80%
21.11%
818 s
1994 s
613 s
407 s
825 s
1268 s
146.64 pt
1332.7 ms
27328 pt
135.81 pt
1358.5 ms
25819 pt
7.34%
1.94%
5.52%
geomean: 7.79%
6. DISCUSSION AND IMPROVEMENTS
In this section, we discuss some limitations and improve-
ments of VCI. More technical aspects and complementary
policies are discussed in Appendices E, F and H.
6.1 Position-Independent Code (PIC)
VCI supports position-independent code (PIC), including
executable and shared libraries. For instance, the Firefox
modules used in our experiments were all PIC. To sup-
port PIC, VCI ﬁrst analyzes the binary by searching for a
memory section with a data.rel preﬁx, which is the preﬁx
used to denote relocatable data regions in binaries. If any
such section is identiﬁed, VCI extracts all program counter
thunks (PC thunks) in the binary. A PC thunk is a func-
tion generated by the compiler to load the current PC into
a speciﬁc register when called, which allows memory ac-
cesses as an oﬀset from the PC. VCI identiﬁes PC thunks by
searching for two-instruction functions that move the stack
pointer to a register and immediately return, e.g., the func-
tion get_pc_thunk.cx: mov (%esp),ecx; ret; returns the
PC into the ecx register when called. Recall that the call
instruction pushes the address of the immediately proceed-
ing instruction on the stack, and global data is accessed via
an oﬀset relative to the PC in PIC. Once PC thunks are
identiﬁed, the analysis proceeds as normal, with the only
exception that the PC value returned by PC thunks, and
the PC oﬀset, are taken into consideration when comput-
ing vtable addresses during the extraction of vtables and
constructors.
6.2 Heterogeneous Containers
VCI, like any static analysis solution, has limited visibil-
ity into the semantics of the analyzed programs. Despite
that VCI extracts signiﬁcantly more semantics than prior
solutions, there are cases where the analysis fails to iden-
tify all the class types used by a vcall. The most common
case is objects stored in a heterogeneous container, e.g., a
container of base pointers. Even though VCI performs alias
analysis to some extent during type propagation, the analy-
sis is conservative and cannot trace through containers logic.
For example, without function names, it is not possible to
determine whether a call adds or perhaps removes elements
from some C++ container.
One possible approach to narrow this gap is to learn and
cluster patterns of generated assembly code for common con-
tainers (e.g., the standard C++ containers). Then, iden-
tify those patterns in the assembly of analyzed programs
to map out the semantics of the containers and their func-
tions. Identifying the functions is only the ﬁrst step. In ad-
dition to that, the reference to the container must be traced
through procedures in order to maintain the class types that
the container stores. This becomes even more complicated
with nested containers. Overall, precisely bridging such se-
mantic gaps using only static analysis remains an open, very
challenging, problem.
6.3 Virtual-dispatch-like C Calls
While we have not faced any false positives during our
evaluation of VCI, it is possible that some non-virtual calls
resemble the behavior of a C++ vcall dispatch. For example,
VCI will incorrectly idenﬁty the following call as a vcall: a
->b->foo(a), where a and b are pointers to plain C structs,
and foo is a function pointer. It will also fail to ﬁnd any
constructor that deﬁnes the this pointer since the C struct
types a and b will not have vtables. As a result, VCI will
err in favor of security by limiting the target of foo(.) to
any virtual function at the same oﬀset of foo in b.
In vfGuard [30], the authors proposed a potential solution
to this problem by looking for compiler-speciﬁc patterns in
the assembly code. The authors argued that compilers tend
to dispatch vcalls and nested C struct function pointers dif-
ferently. However, based on our experimentation with the
GCC compiler, there is no speciﬁc pattern that is used over
the other. The authors of T-VIP [17] suggested recording
the actual indirect call targets using a dynamic proﬁling pass
that executes benign test cases that (optimally) cover all in-
direct calls. Then, ﬁlter out misidentiﬁed vcalls if a recorded
target is not in a vtable.4 However, the main challenge is
in coming up with a conclusive benign input set that does
not result in erroneous elimination and PFs at runtime. To
the best of our knowledge, this remains an open research
problem.
7. RELATED WORK
ASLR. Address Space Layout Randomization (ASLR) [3]
is perhaps the most deployed defense against code-reuse at-
4The same approach could be utilized in augmenting the
SameOﬀ and AnyV policies by ﬁltering out vcall targets that
are never called by the benign inputs.
149tacks. Actual deployments, however, are far from perfect,
and it has been shown that various ASLR deployments can
be bypassed (e.g., [31, 35]). Crane et al. [10, 11], proposed
randomization based defenses resilient to memory disclosure
attacks. The two approaches utilized the newly introduced
execute-only memory pages via the Extended Page Tables
(EPT) virtualization technology in Intel processors since the
Nehalem microarchitecture. Both solutions require hard-
ware support, kernel and compiler changes, and source re-
compilation. While randomization increases the attack cost
by increasing the attacker’s uncertainty,
it only provides
probabilistic guarantees.
Control Flow Integrity. Abadi et al. [1] introduced Con-
trol Flow Integrity (CFI), which prevents control ﬂows not
intended by the original program. The idea is to extract
a Control Flow Graph (CFG) from the program and en-
force the CFG at runtime. Unfortunately, CFI is not widely
adopted in practice, because of two main hurdles: 1) build-
ing a complete CFG is a very challenging task, especially
without access to source code or debug symbols; and 2) the
overhead incurred by ideal CFI is rather large. Recent ap-
proaches [42, 45] attempted to address those issues by en-
forcing coarse-grained CFI. However, it has been shown [8,
9, 11, 13, 18, 34] that code reuse is still possible with such
loose notions of CFI in place. Recently, PathArmor [38]
showed that context-sensitive CFI can be enforced with lit-
tle overhead using recent hardware features. However, it
lacked forward-edge context sensitivity which made COOP
attacks still possible. TypeArmor [39] enforced a generic
binary-level policy based on the number of produced and
consumed function arguments. As demonstrated by our
analysis in Appendix H, such policy is imprecise compared
to semantic-aware policies. Nevertheless, generic CFI solu-
tions are complementary to our work, where we only focus
on protecting the integrity of vcalls.
Compiler Solutions. Recent versions of the GCC compiler
support a new vtable veriﬁcation (VTV) [37] feature, which
inserts checks before each vcall that asserts that the vtable
pointer is valid for the invoker object type. Shrinkwrap [19]