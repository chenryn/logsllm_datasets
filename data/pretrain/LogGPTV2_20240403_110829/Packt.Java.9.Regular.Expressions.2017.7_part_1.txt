# Java 9 Regular Expressions

## Zero-length Assertions, Back-references, Quantifiers, and More

### Anubhava Srivastava
**BIRMINGHAM - MUMBAI**

---

## Copyright Information

**Java 9 Regular Expressions**
Copyright Â© 2017 Packt Publishing

All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or transmitted in any form or by any means, without the prior written permission of the publisher, except in the case of brief quotations embedded in critical articles or reviews.

Every effort has been made in the preparation of this book to ensure the accuracy of the information presented. However, the information contained in this book is sold without warranty, either express or implied. Neither the author nor Packt Publishing, and its dealers and distributors will be held liable for any damages caused or alleged to be caused directly or indirectly by this book.

Packt Publishing has endeavored to provide trademark information about all of the companies and products mentioned in this book by the appropriate use of capitals. However, Packt Publishing cannot guarantee the accuracy of this information.

**First published: July 2017**
**Production reference: 1210717**

**Published by Packt Publishing Ltd.**
Livery Place
35 Livery Street
Birmingham
B3 2PB, UK.
ISBN 978-1-78728-870-6
www.packtpub.com

---

## Credits

- **Author:** Anubhava Srivastava
- **Copy Editor:** Muktikant Garimella
- **Reviewer:** Peter Verhas
- **Project Coordinator:** Ulhas Kambali
- **Commissioning Editor:** Merint Thomas
- **Acquisition Editor:** Nitin Dasan
- **Content Development Editor:** Vikas Tiwari
- **Technical Editor:** Jijo Maliyekal
- **Proofreader:** Mathew Safis Editing
- **Indexer:** Francy Puthiry
- **Graphics:** Abhinash Sahu
- **Production Coordinator:** Melwyn Dsa

---

## About the Author

Anubhava Srivastava has over 22 years of professional experience in architecture, design, and software development. He specializes in the J2EE technology stack, web technologies, CICD, test-driven development, and AWS cloud-based development.

Anubhava is an active contributor to the Stack Overflow community, ranking in the top 35 users in terms of reputation out of 7.5 million Stack Overflow users. He is passionate about regular expressions and has answered nearly 10,000 regex questions on Stack Overflow.

He has authored and released a test-driven framework called GenericFixture for FitNesse as open-source software. He maintains a technical blog at [http://anubhava.wordpress.com](http://anubhava.wordpress.com).

You can connect with Anubhava on:
- **LinkedIn:** [https://www.linkedin.com/in/anubhava/](https://www.linkedin.com/in/anubhava/)
- **Twitter:** @anubhava

---

## Acknowledgments

First, I would like to express my gratitude to the entire editing and publishing team at Packt Publishing for offering me the opportunity to write this book. Their support and guidance throughout the process encouraged me to explore more and delve deeper into the subject.

This book would not have been possible without the support and encouragement of my wife and children. I am grateful to my family for trusting in my abilities and understanding my long hours in front of the computer on weekends and holidays.

I also want to acknowledge the immensely knowledgeable Stack Overflow contributors and the open-source community for teaching me advanced regex concepts.

Lastly, I want to thank my management team at AOL for allowing me to embark on this book-writing journey during my off time.

---

## About the Reviewer

Peter Verhas is a senior software engineer and software architect with a background in electrical engineering and economics. He holds an MSc from TU Budapest and an MBA from PTE Hungary. He has also studied at TU Delft and TU Vienna. Peter created his first programs in 1979 and has since been the author of several open-source programs.

He has worked in the telecommunication and finance industries in various positions and was the CIO of the Hungarian startup, index.hu, during its initial days. Peter currently works for EPAM Systems in Switzerland, participating in software development projects at various customer sites. He also supports talent acquisition by interviewing candidates and designs internal mentoring and training programs for developers.

Peter is the author of "Java 9 Programming by Example" and the co-author of "Mastering Java 9" by Packt.

You can follow Peter on:
- **Twitter:** @verhas
- **LinkedIn:** [https://www.linkedin.com/in/peter-verhas/](https://www.linkedin.com/in/peter-verhas/)
- **GitHub:** [https://github.com/verhas](https://github.com/verhas)
- **Blog:** [http://javax0.wordpress.com](http://javax0.wordpress.com)

---

## www.PacktPub.com

For support files and downloads related to your book, please visit [www.PacktPub.com](http://www.PacktPub.com). Did you know that Packt offers eBook versions of every book published, with PDF and ePub files available? You can upgrade to the eBook version at [www.PacktPub.com](http://www.PacktPub.com), and as a print book customer, you are entitled to a discount on the eBook copy. For more details, get in touch with us at [PI:EMAIL](mailto:PI:EMAIL).

At [www.PacktPub.com](http://www.PacktPub.com), you can also read a collection of free technical articles, sign up for a range of free newsletters, and receive exclusive discounts and offers on Packt books and eBooks.

[Mapt](https://www.packtpub.com/mapt)  
Get the most in-demand software skills with Mapt. Mapt gives you full access to all Packt books and video courses, as well as industry-leading tools to help you plan your personal development and advance your career.

### Why subscribe?
- Fully searchable across every book published by Packt
- Copy and paste, print, and bookmark content
- On-demand and accessible via a web browser

---

## Customer Feedback

Thank you for purchasing this Packt book. At Packt, quality is at the heart of our editorial process. To help us improve, please leave an honest review on this book's Amazon page at [https://www.amazon.com/dp/1787288706](https://www.amazon.com/dp/1787288706).

If you'd like to join our team of regular reviewers, you can email us at [customerreviews@packtpub.com](mailto:customerreviews@packtpub.com). We award our regular reviewers with free eBooks and videos in exchange for their valuable feedback. Help us be relentless in improving our products!

---

## Table of Contents

1. **Preface**
2. **Chapter 1: Getting Started with Regular Expressions**
   - Introduction to regular expressions
   - A bit of history of regular expressions
   - Various flavors of regular expressions
   - What type of problems need regular expressions to solve
   - The basic rules of regular expressions
   - Constructs of the standard regular expression and meta characters
   - Some basic regular expression examples
   - Eager matching
   - The effect of eager matching on regular expression alternation
   - Summary
3. **Chapter 2: Understanding the Core Constructs of Java Regular Expressions**
   - Understanding the core constructs of regular expressions
   - Quantifiers
     - Basic quantifiers
     - Examples using quantifiers
     - Greedy versus reluctant (lazy) matching using quantifiers
     - Possessive quantifiers
   - Boundary constructs
     - Examples using boundary constructs
   - Character classes
     - Examples of character classes
     - Range inside a character class
     - Examples of character range
     - Escaping special regex metacharacters and escaping rules inside the character classes
     - Escaping inside a character class
     - Examples of escaping rules inside the character class
     - Literally matching a string that may contain special regex metacharacters
     - Negated character classes
     - Examples of negated character classes
     - Predefined shorthand character classes
     - POSIX character classes
     - Unicode support in Java regular expressions
     - Commonly used Unicode character properties
     - Negation of the preceding regex directives
     - Unicode scripts support
     - Examples of matching Unicode text in regular expressions
     - Double escaping in a Java String when defining regular expressions
     - Embedded regular expression mode modifiers
     - The placement of embedded modes in a Java regular expression
     - Disabling mode modifiers
     - Summary
4. **Chapter 3: Working with Groups, Capturing, and References**
   - Capturing groups
   - Group numbering
   - Named groups
   - Non-capturing groups
   - Advantages of non-capturing groups
   - Back references
   - Back reference of a named group
   - Replacement reference of a named group
   - Forward references
   - Invalid (non-existing) backward or forward references
   - Summary
5. **Chapter 4: Regular Expression Programming Using Java String and Scanner APIs**
   - Introduction to the Java String API for regular expressions' evaluation
   - Method - boolean matches(String regex)
   - Example of the matches method
   - Method - String replaceAll(String regex, String replacement)
   - Examples of the replaceAll method
   - Method - String replaceFirst(String regex, String replacement)
   - Examples of the replaceFirst method
   - Methods - String split methods
   - The limit parameter rules
   - Examples of the split method
   - Example of the split method using the limit parameter
   - Using regular expressions in Java Scanner API
   - Summary
6. **Chapter 5: Introduction to Java Regular Expression APIs - Pattern and Matcher Classes**
   - The MatchResult interface
   - The Pattern class
   - Examples using the Pattern class
   - Filtering a list of tokens using the asPredicate() method
   - The Matcher class
   - Examples using the Matcher class
   - Method Boolean lookingAt()
   - The matches() method
   - The find() and find(int start) methods
   - The appendReplacement(StringBuffer sb, String replacement) method
   - The appendTail(StringBuffer sb) method
   - Example of the appendReplacement and appendTail methods
   - Summary
7. **Chapter 6: Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups**
   - Zero-width assertions
   - Predefined zero-width assertions
   - Regex defined zero-width assertions
   - \G boundary assertion
   - Atomic groups
   - Lookahead assertions
     - Positive lookahead
     - Negative lookahead
   - Lookbehind assertions
     - Positive lookbehind
     - Negative lookbehind
   - Capturing text from overlapping matches
   - Be careful with capturing groups inside a lookahead or lookbehind atomic group
   - Lookbehind limitations in Java regular expressions
   - Summary
8. **Chapter 7: Understanding the Union, Intersection, and Subtraction of Character Classes**
   - The union of character classes
   - The intersection of character classes
   - The subtraction of character classes
   - Why should you use composite character classes?
   - Summary
9. **Chapter 8: Regular Expression Pitfalls, Optimization, and Performance Improvements**
   - Common pitfalls and ways to avoid them while writing regular expressions
   - Do not forget to escape regex metacharacters outside a character class
   - Avoid escaping every non-word character
   - Avoid unnecessary capturing groups to reduce memory consumption
   - However, don't forget to use the required group around alternation
   - Use predefined character classes instead of longer versions
   - Use the limiting quantifier instead of repeating a character or pattern multiple times
   - Do not use an unescaped hyphen in the middle of a character class
   - The mistake of calling matcher.group() without a prior call to matcher.find(), matcher.matches(), or matcher.lookingAt()
   - Do not use regular expressions to parse XML / HTML data
   - How to test and benchmark your regular expression performance
   - Catastrophic or exponential backtracking
   - How to avoid catastrophic backtracking
   - Optimization and performance enhancement tips
     - Use a compiled form of regular expressions
     - Use a negated character class instead of the greedy and slow .* or .+
     - Avoid unnecessary grouping
     - Use lazy quantifiers strategically instead of greedy quantifiers that cause excessive backtracking
     - Make use of possessive quantifiers to avoid backtracking
     - Extract common repeating substrings out of alternation
     - Use atomic group to avoid backtracking and fail fast
   - Summary
10. **Index**

---

## Preface

In today's information technology world, the size of data is growing exponentially. IT organizations are processing and storing vast amounts of textual data collected from various sources, such as user actions, leads, searches, shopping data, page views, page hits, and other forms of user interactions. Search algorithms are used for parsing large texts to extract meaningful information. Regular expressions (or regex) are the backbone of many such search algorithms.

Regular expressions are ubiquitous in modern programming languages, which are typically shipped with a regex module or library. They are a powerful tool in a programmer's toolbox, allowing for pattern matching and text manipulation. This book provides the knowledge and practical examples needed to solve real-world problems using regex in Java.

This easy-to-follow regex book is an excellent resource for familiarizing yourself with the core concepts of regular expressions and mastering their implementation with the new features of Java 9. You will learn to match, extract, and transform text by matching specific words, characters, and patterns. Readers will also learn how to write efficient regular expressions for solving day-to-day problems involving text-based data.

### What This Book Covers

- **Chapter 1: Getting Started with Regular Expressions**
  - Introduces what regular expressions are, the types of problems they can solve, and the rules to follow while writing them.

- **Chapter 2: Understanding the Core Constructs of Java Regular Expressions**
  - Covers quantifiers, anchors, boundary matchers, and all available character classes and properties in Java. Also, discusses Unicode text matching using regex in Java.

- **Chapter 3: Working with Groups, Capturing, and References**
  - Explores how to match and capture text in regex, the various types of groups available, naming and numbering of captured groups, and the use of back-references for captured groups.

- **Chapter 4: Regular Expression Programming Using Java String and Scanner APIs**
  - Introduces Java regex using Java String methods and moves on to regex capabilities in the Java Scanner API.

- **Chapter 5: Introduction to Java Regular Expression APIs - Pattern and Matcher Classes**
  - Discusses the dedicated Java APIs, `java.util.regex.Pattern` and `java.util.regex.Matcher`, for complete regex capabilities.

- **Chapter 6: Exploring Zero-Width Assertions, Lookarounds, and Atomic Groups**
  - Focuses on zero-width assertions in regex, covering various zero-width assertions and their usages. It then moves on to the important topic of lookarounds in regex.

- **Chapter 7: Understanding the Union, Intersection, and Subtraction of Character Classes**
  - Discusses the features of using the intersection and union of character classes in regex.

- **Chapter 8: Regular Expression Pitfalls, Optimization, and Performance Improvements**
  - Explains how to test and optimize poorly performing regex and provides various performance tips.

### What You Need for This Book

The software in this book was tested on Java version 9 on Ubuntu version 16.10. However, all the examples can also be run on Windows and macOS X operating systems.

### Who This Book Is For

This book is for Java developers who want to understand and use regular expressions. If you are dealing with text processing problems, such as text validation, searching, and text manipulation, learning regex is essential to make your job easier. This book does not assume any prior regex knowledge and covers every aspect of regex, starting from the basics. However, a basic knowledge of Java is assumed to be able to write and execute the example programs provided in the book.

### Conventions

In this book, you will find a number of text styles that distinguish between different kinds of information. Here are some examples of these styles and an explanation of their meaning:

- **Code words in text, database table names, folder names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles** are shown as follows: "The next lines of code read the link and assign it to the `BeautifulSoup` function."

- **A block of code** is set as follows:
  ```java
  package example.regex;
  public class StringMatches {
      public static void main(String[] args) {
          // Code here
      }
  }
  ```

- **When we wish to draw your attention to a particular part of a code block, the relevant lines or items are set in bold:**
  ```ini
  [default]
  exten => s,1,Dial(Zap/1|30)
  exten => s,2,Voicemail(u100)
  exten => s,102,Voicemail(b100)
  exten => i,1,Voicemail(s0)
  ```

- **Any command-line input or output** is written as follows:
  ```sh
  C:\Python34\Scripts> pip install --upgrade pip
  C:\Python34\Scripts> pip install pandas
  ```

- **New terms and important words** are shown in bold. Words that you see on the screen, for example, in menus or dialog boxes, appear in the text like this: "In order to download new..."

---

We hope you find this book informative and useful for your regular expression needs in Java!