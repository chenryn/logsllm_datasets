Java 9 Regular Expressions
Zero-length assertions, back-references, quantifiers, and
more
Anubhava Srivastava
BIRMINGHAM - MUMBAI
Java 9 Regular Expressions
Copyright Â© 2017 Packt Publishing
All rights reserved. No part of this book may be reproduced, stored in a retrieval system, or
transmitted in any form or by any means, without the prior written permission of the
publisher, except in the case of brief quotations embedded in critical articles or reviews.
Every effort has been made in the preparation of this book to ensure the accuracy of the
information presented. However, the information contained in this book is sold without
warranty, either express or implied. Neither the author, nor Packt Publishing, and its
dealers and distributors will be held liable for any damages caused or alleged to be caused
directly or indirectly by this book.
Packt Publishing has endeavored to provide trademark information about all of the
companies and products mentioned in this book by the appropriate use of capitals.
However, Packt Publishing cannot guarantee the accuracy of this information.
First published: July 2017
Production reference: 1210717
Published by Packt Publishing Ltd.
Livery Place
35 Livery Street
Birmingham
B3 2PB, UK.
ISBN 978-1-78728-870-6
www.packtpub.com
Credits
Author Copy Editor
Anubhava Srivastava Muktikant Garimella
Reviewer Project Coordinator
Peter Verhas Ulhas Kambali
Commissioning Editor Proofreader
Merint Thomas Mathew Safis Editing
Acquisition Editor Indexer
Nitin Dasan Francy Puthiry
Content Development Editor Graphics
Vikas Tiwari Abhinash Sahu
Technical Editor Production Coordinator
Jijo Maliyekal Melwyn Dsa
About the Author
Anubhava Srivastava has more than 22 years of professional experience in architecture,
design, and software development. He specializes mainly in the J2EE technology stack, web
technologies, CICD, test-driven development, and AWS cloud-based development.
He is an active contributor to the Stack Overflow community. He currently stands in the top
35 users in terms of reputations out of the 7.5 million Stack Overflow users. He is passionate
about regular expressions and is always willing to sharpen his regex skills further. He has
answered close to 10,000 regex questions on Stack Overflow.
He has authored and released a test-driven framework, called GenericFixture, for FitNesse
as an open source software. He maintains a technical blog at http://anubhava.wordpress.
com
Anubhava can be found on LinkedIn at https://www.linkedin.com/in/anubhava/
You can follow him on Twitter at @anubhava.
First, I would like to express my gratitude toward the whole editing and publishing team at
Packt Publishing for offering me an opportunity to write this book. Their support and
guidance throughout this process encouraged me to explore more and dig deep.
This book would not have been possible without the support and encouragement of my wife
and kids. I am really grateful to my family for trusting in my abilities and for
understanding my long hours in front of the computer on weekends and holidays.
I want to acknowledge the immensely knowledgeable Stack Overflow contributors and
open source community for teaching me advanced regex concepts.
Lastly, I want to say big thanks to my management team at AOL for allowing me to
embark on this book writing journey in my off time.
About the Reviewer
Peter Verhas is a senior software engineer and software architect with a background in
electrical engineering and economics. He pursued his MSc from TU Budapest and MBA
from PTE Hungary. He has also studied at TU Delft and TU Vienna. He created his first
programs in 1979, and since then, he has been the author of several open source programs.
He has worked in the telecommunication and finance industries in several positions and
was the CIO of the Hungarian startup, index.hu, during its initial days.
Peter works for EPAM Systems in Switzerland, participating in software development
projects at various customer sites. He also supports talent acquisition by interviewing
candidates and designs internal mentoring programs and training programs for developers.
Peter is the author of Java 9 Programming by Example and the co-author of Mastering Java 9 by
Packt.
You can follow Peter on Twitter at @verhas, LinkedIn, and GitHub. You can also read his
technical blog, Java Deep, at http://javax0.wordpress.com.
www.PacktPub.com
For support files and downloads related to your book, please visit www.PacktPub.com.
Did you know that Packt offers eBook versions of every book published, with PDF and
ePub files available? You can upgrade to the eBook version at www.PacktPub.comand as a
print book customer, you are entitled to a discount on the eBook copy. Get in touch with us
at PI:EMAIL for more details.
At www.PacktPub.com, you can also read a collection of free technical articles, sign up for a
range of free newsletters and receive exclusive discounts and offers on Packt books and
eBooks.
https://www.packtpub.com/mapt
Get the most in-demand software skills with Mapt. Mapt gives you full access to all Packt
books and video courses, as well as industry-leading tools to help you plan your personal
development and advance your career.
Why subscribe?
Fully searchable across every book published by Packt
Copy and paste, print, and bookmark content
On demand and accessible via a web browser
Customer Feedback
Thanks for purchasing this Packt book. At Packt, quality is at the heart of our editorial
process. To help us improve, please leave us an honest review on this book's Amazon page
at https://www.amazon.com/dp/1787288706.
If you'd like to join our team of regular reviewers, you can e-mail us at
customerreviews@packtpub.com. We award our regular reviewers with free eBooks and
videos in exchange for their valuable feedback. Help us be relentless in improving our
products!
Table of Contents
Preface
1
Chapter 1: Getting Started with Regular Expressions
6
Introduction to regular expressions 6
A bit of history of regular expressions 7
Various flavors of regular expressions 7
What type of problems need regular expressions to solve 8
The basic rules of regular expressions 9
Constructs of the standard regular expression and meta characters 10
Some basic regular expression examples 12
Eager matching 14
The effect of eager matching on regular expression alternation 14
Summary 16
Chapter 2: Understanding the Core Constructs of Java Regular
Expressions
17
Understanding the core constructs of regular expressions 18
Quantifiers 18
Basic quantifiers 19
Examples using quantifiers 19
Greedy versus reluctant (lazy) matching using quantifiers 20
Possessive quantifiers 21
Boundary constructs 23
Examples using boundary constructs 24
Character classes 25
Examples of character classes 25
Range inside a character class 26
Examples of character range 26
Escaping special regex metacharacters and escaping rules inside the
character classes 27
Escaping inside a character class 27
Examples of escaping rules inside the character class 28
Literally matching a string that may contain special regex metacharacters 29
Negated character classes 29
Examples of negated character classes 29
Predefined shorthand character classes 30
POSIX character classes 31
Unicode support in Java regular expressions 32
Commonly used Unicode character properties 32
Negation of the preceding regex directives 33
Unicode scripts support 33
Examples of matching Unicode text in regular expressions 35
Double escaping in a Java String when defining regular expressions 36
Embedded regular expression mode modifiers 37
The placement of embedded modes in a Java regular expression 39
Disabling mode modifiers 39
Summary 40
Chapter 3: Working with Groups, Capturing, and References
41
Capturing groups 42
Group numbering 43
Named groups 44
Non-capturing groups 45
Advantages of non-capturing groups 46
Back references 47
Back reference of a named group 48
Replacement reference of a named group 49
Forward references 49
Invalid (non-existing) backward or forward references 51
Summary 52
Chapter 4: Regular Expression Programming Using Java String and
Scanner APIs
53
Introduction to the Java String API for regular expressions' evaluation 54
Method - boolean matches(String regex) 55
Example of the matches method 55
Method - String replaceAll(String regex, String replacement) 57
Examples of the replaceAll method 58
Method - String replaceFirst(String regex, String replacement) 60
Examples of the replaceFirst method 60
Methods - String split methods 61
The limit parameter rules 62
Examples of the split method 62
Example of the split method using the limit parameter 64
Using regular expressions in Java Scanner API 65
Summary 70
Chapter 5: Introduction to Java Regular Expression APIs - Pattern and
Matcher Classes
71
The MatchResult interface 72
The Pattern class 74
[ ii ]
Examples using the Pattern class 75
Filtering a list of tokens using the asPredicate() method 79
The Matcher class 80
Examples using the Matcher class 82
Method Boolean lookingAt() 82
The matches() method 83
The find() and find(int start) methods 85
The appendReplacement(StringBuffer sb, String replacement) method 86
The appendTail(StringBuffer sb) method 87
Example of the appendReplacement and appendTail methods 87
Summary 89
Chapter 6: Exploring Zero-Width Assertions, Lookarounds, and Atomic
Groups
90
Zero-width assertions 91
Predefined zero-width assertions 91
Regex defined zero-width assertions 92
\G boundary assertion 92
Atomic groups 95
Lookahead assertions 97
Positive lookahead 97
Negative lookahead 97
Lookbehind assertions 98
Positive lookbehind 98
Negative lookbehind 98
Capturing text from overlapping matches 105
Be careful with capturing groups inside a lookahead or lookbehind
atomic group 107
Lookbehind limitations in Java regular expressions 108
Summary 109
Chapter 7: Understanding the Union, Intersection, and Subtraction of
Character Classes
110
The union of character classes 110
The intersection of character classes 113
The subtraction of character classes 116
Why should you use composite character classes? 118
Summary 118
Chapter 8: Regular Expression Pitfalls, Optimization, and Performance
Improvements
119
[ iii ]
Common pitfalls and ways to avoid them while writing regular
expressions 119
Do not forget to escape regex metacharacters outside a character class 120
Avoid escaping every non-word character 120
Avoid unnecessary capturing groups to reduce memory consumption 120
However, don't forget to use the required group around alternation 121
Use predefined character classes instead of longer versions 122
Use the limiting quantifier instead of repeating a character or pattern
multiple times 122
Do not use an unescaped hyphen in the middle of a character class 123
The mistake of calling matcher.goup() without a prior call to
matcher.find(), matcher.matches(), or matcher.lookingAt() 123
Do not use regular expressions to parse XML / HTML data 125
How to test and benchmark your regular expression performance 125
Catastrophic or exponential backtracking 126
How to avoid catastrophic backtracking 130
Optimization and performance enhancement tips 132
Use a compiled form of regular expressions 133
Use a negated character class instead of the greedy and slow .* or .+ 133
Avoid unnecessary grouping 133
Use lazy quantifiers strategically instead of greedy quantifiers that cause
excessive backtracking 133
Make use of possessive quantifiers to avoid backtracking 134
Extract common repeating substrings out of alternation 134
Use atomic group to avoid backtracking and fail fast 135
Summary 135
Index
136
[ iv ]
Preface
In today's information technology world, the size of data is growing by leaps and bounds.
IT organizations are processing and storing huge amounts of textual data collected from
various sources, such as user actions, leads, searches, shopping data, page views, page hits,
and various other forms of user interactions. Search algorithms are used for parsing large
texts to extract meaningful pertinent information. Regular expressions are the backbone of
many such search algorithms.
Regular expressions (or regex in short) are everywhere these days. All the modern
programming languages are shipped with a regex module or library to allow programmers
to write regex-based programs. Regular expressions are a powerful tool in the
programmer's toolbox and allow pattern matching. They are also used for manipulating
text and data. This book will provide you with the know-how (and practical examples) to
solve real-world problems using regex in Java.
This easy-to-follow regex book is a great place for you to familiarize yourself with the core
concepts of regular expressions and to master their implementation with the new features
of Java 9. You will learn to match, extract, and transform text by matching specific words,
characters, and patterns. Readers will learn how to write efficient regular expressions for
solving day-to-day problems involving text-based data.
What this book covers
Chapter 1, Getting Started with Regular Expressions, teaches what regular expressions are,
what problems are best solved using regular expressions, and the rules to follow while
writing them.
Chapter 2, Understanding the Core Constructs of Java Regular Expressions, covers quantifiers,
anchors, boundary matchers, and all the available character classes and properties in Java.
We will also learn Unicode text matching using regex in Java.
Chapter 3, Working with Groups, Capturing, and References, explores how to match and
capture text in regex, the various types of groups available to us, the naming and
numbering of a captured group, and how we should use back-reference for the captured
groups.
Chapter 4, Regular Expression Programming Using Java String and Scanner APIs, introduces
Java regex using Java String methods, and we will move on to regex capabilities in the Java
Scanner API.
Preface
Chapter 5, Introduction to Java Regular Expression APIs - Pattern and Matcher Classes,
discusses the dedicated Java APIs, java.util.regex.Pattern and java.util.regex.Matcher, for
complete regex capabilities.
Chapter 6, Exploring Zero-width Assertions, Lookarounds, and Atomic Groups, focuses on zero-
width assertions in regex. The chapter covers various zero-width assertions and their
usages. We will then move on to learn the important topic of lookarounds in regex.
Chapter 7, Understanding the Union, Intersection, and Subtraction of Character Classes, says that
the Java language has added the features of using the intersection and union of character
classes in regex. This chapter covers these features.
Chapter 8, Regular Expression Pitfalls, Optimization, and Performance Improvements, explains
how to test and optimize a poorly performing regex and various other performance tips.
What you need for this book
The software in this book was tested on Java version 9 on Ubuntu version 16.10. However,
all the examples can also be run on the Windows and macOS X operating systems.
Who this book is for
This book is for Java developers who would like to understand and use regular expressions.
If you are dealing with text processing problems, such as text validation, searching, and text
manipulation, then learning regex is very important for you to make your job easier. This
book does not expect readers to have any prior regex knowledge, since the book will cover
every aspect of regex, starting from the absolute basics of regex. However, a basic
knowledge of Java is assumed in order to be able to write and execute the example
programs provided in the book.
Conventions
In this book, you will find a number of text styles that distinguish between different kinds
of information. Here are some examples of these styles and an explanation of their meaning.
Code words in text, database table names, folder names, filenames, file extensions,
pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The next
lines of code read the link and assign it to the to the BeautifulSoup function."
[ 2 ]
Preface
A block of code is set as follows:
package example.regex;
public class StringMatches
{
public static void main(String[] args)
}
When we wish to draw your attention to a particular part of a code block, the relevant lines
or items are set in bold:
[default]
exten => s,1,Dial(Zap/1|30)
exten => s,2,Voicemail(u100)
exten => s,102,Voicemail(b100)
exten => i,1,Voicemail(s0)
Any command-line input or output is written as follows:
C:\Python34\Scripts> pip install -upgrade pip
C:\Python34\Scripts> pip install pandas
New terms and important words are shown in bold. Words that you see on the screen, for
example, in menus or dialog boxes, appear in the text like this: "In order to download new