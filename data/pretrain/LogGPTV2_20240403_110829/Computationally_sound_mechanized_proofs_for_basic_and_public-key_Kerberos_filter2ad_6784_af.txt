Corollary 12 Basic and public-key Kerberos satisfy IND-
CCA2 (strong) key usability for the service key SK , for the
symmetric encryption scheme of Kerberos.
Proof of Theorem 11. Basic Kerberos case:
In the
case X = C, the client process completes its participation
in a CS exchange involving an honest TGS, it stores the
session key SK in keyCSK . From these keys one is drawn
at random and passed to the encryption oracle and decryp-
tion oracle. For the boolean b1 used by the encryption or-
acle, we can, using CryptoVerif, prove the query: secret b1 .
This proof requires the user to inspect the last game, which
CryptoVerif reaches upon the command auto, in order to
verify that terms that are dependent on b1 and which may
help an adversary in guessing b1 occur only in ﬁnd branches
that are never executed. The case X = T is similar, where
the session key SK is stored in keyTSK after the TGS sent
the TS reply. And an analogous result holds for X = S,
where the proof requires the following commands before the
manual inspection of the last game: auto, SArename SK_33,
simplify, and auto (formatted and entered as described
above). The command SArename SK_33 is used when the
variable SK 33 is deﬁned several times in the game. It in-
structs CryptoVerif to rename each deﬁnition of this variable
to a diﬀerent name, which subsequently allows to distinguish
cases depending on the program point at which the variable
has been deﬁned.
Public-key Kerberos case: analogously to the basic Ker-
beros case, the secrecy of the bit b1 can be concluded by
inspecting the last game that CryptoVerif reaches after a
sequence of commands. If X = C or X = T , the interactive
commands are just the ones from the public-key Kerberos
case of Theorem 1. If X = S, the secrecy of b1 can be con-
cluded after the sequence of commands: crypto sign rkCA,
crypto sign rkCs, crypto penc rkC, crypto sign rkKs,
crypto keyderivation, simplify, crypto keyderivation,
simplify, auto, SArename SK_55, simplify, and auto (for-
matted and entered as described above).
4.4 Varying the Strength of Cryptography
We observe that the symbolic proofs of security for Ker-
beros in, e.g., [17] do not rely on the secrecy of the encrypted
C}SK )
data within the authenticators ({C, tC}AK and {C, t(cid:48)
sent by the client to the TGS and end server. CryptoVerif is
also able to prove security properties for Kerberos without
relying on the secrecy of the authenticator data. In partic-
ular, we can modify CryptoVerif scripts so that the client
sends a second, unencrypted copy of the authenticator con-
tents alongside the authenticator and CryptoVerif can still
prove security properties for Kerberos. For the case that the
client sends a subsession key in the CS exchange authenti-
cator, we make this modiﬁcation only in the TG exchange;
if the server sends the subsession key (but not the client),
then we may make this modiﬁcation in both the TG and CS
exchanges. Using CryptoVerif, we can then prove the fol-
lowing theorem about authentication and secrecy when the
authenticator contents are leaked as just described.
Theorem 13 If
• the client sends the contents of the authenticator, unen-
crypted, along with the encrypted authenticator in both
the TG and CS exchanges when she does not include a
subsession key in the authenticator for the CS exchange;
or• the client sends the contents of the authenticator, un-
encrypted, along with the encrypted authenticator in the
TG exchange only when she includes a subsession key
in the authenticator for the CS exchange
then Theorems 1–5 and 8 hold for both basic and public-key
Kerberos.
Proof. If we modify the CryptoVerif scripts to expose
the authenticator contents as described, CryptoVerif proves
the queries needed for proving Theorems 1–5 and 8; in the
case of public-key Kerberos, the interactive commands are
the same as before.
Similar results might be achieved by suitably relaxing the
assumptions about the encryption function used for the au-
thenticators. That, and studies of other ways in which the
cryptographic assumptions can be weakened without com-
promising the protocol, remains a topic of ongoing work.
4.5 Improvements of CryptoVerif
This case study enabled us to ﬁnd and ﬁx two bugs in
CryptoVerif, which did not aﬀect the proof of simpler pro-
tocols of the literature on which it was previously tested.
This case study also led to an improvement in CryptoVerif
simpliﬁcation algorithm, which was useful in order to han-
dle the pseudo-random key derivation function. It also sug-
gested future improvements of CryptoVerif that would make
it easier to use. In particular,
• Improvements in the proof strategy should allow us to
fully automate the proof in many more cases, in par-
ticular for public-key protocols. The prover should au-
tomatically distinguish cases in which the public key
belongs to a honest principal or to the adversary.
• CryptoVerif is sometimes sensitive to the ordering of
instructions, although the semantics of the game does
not depend on this ordering. This problem could be
solved by automatically moving let x = . . . and new x
instructions under tests (duplicating them if necessary);
this transformation would allow CryptoVerif to distin-
guish cases depending on which branch assigns x. (This
transformation is currently performed only for new.)
• An additional game transformation would be helpful in
order to prove some secrecy properties, in particular for
key usability: tests if b then P else P (cid:48) should be trans-
formed into P when P and P (cid:48) make indistinguishable
actions, which would allow us to prove the secrecy of
b. A ﬁrst step would be to perform this transformation
when P and P (cid:48) are equal up to renaming of variables.
5. CONCLUSIONS
We have formalized and mechanically analyzed all three
rounds of the Kerberos 5 protocol, both with and without
its public-key extension PKINIT, using version 1.06pl3 of
the CryptoVerif tool. This is the ﬁrst mechanical security
proof of an industrial protocol at the computational level.
The success of CryptoVerif in proving security properties
for Kerberos—and especially for PKINIT, the use of which
makes Kerberos particularly complex—provides evidence of
its utility for analyzing industrial protocols. This also ex-
tends other work on analyzing Kerberos to include mechan-
ical analysis tools. In carrying out this work, we extended
the idea of key usability to a new notion of strong key usabil-
ity; this deﬁnition was helpful here, and we are interested in
exploring its utility elsewhere.
We are currently broadening our study of how the cryp-
tographic assumptions made here may be varied and how
CryptoVerif copes with such changes. From our work with
CryptoVerif thus far, we see that the use of this tool sharp-
ens the user’s understanding of the cryptographic subtleties
involved in a protocol.
In the present work we have veriﬁed that the authenti-
cation keys and session keys are strongly usable for IND-
CCA2 encryption. As the encryption scheme is assumed to
also guarantee INT-CTXT security, it would be interesting
to use CryptoVerif in order to ﬁnd out whether the authen-
tication keys and session keys are also (strongly) usable for
INT-CTXT encryption.
Since the speciﬁcations of Kerberos and PKINIT [34, 23]
are actually more complicated than our formalization, we
would like utilize CryptoVerif on formalizations of basic and
public-key Kerberos that are closer to the speciﬁcations, e.g.,
by using a key derivation function for all symmetric keys.
Another area for future work is the mechanized analysis
of PKINIT’s Diﬃe-Hellman mode, which we did not study
here. As noted in [13], the language of equivalences used
by CryptoVerif will need to be extended in order to han-
dle Diﬃe-Hellman key exchange, so this problem holds both
theoretical and practical interest.
Acknowledgements. We are grateful to Michael Backes,
Ricardo Corin, John Mitchell, Kenny Paterson, and Arnab
Roy for helpful discussions.
6. REFERENCES
[1] M. Abadi and P. Rogaway. Reconciling two views of
cryptography (the computational soundness of formal
encryption). In First IFIP, volume 1872 of LNCS.
Springer, Aug. 2000.
[2] M. Abdalla, P.-A. Fouque, and D. Pointcheval.
Password-Based Authenticated Key Exchange in the
98
Three-Party Setting. IEE Proc. Information Security,
153(1), 2006.
[3] A. Armando et al. The Avispa tool for the automated
[20] V. Cortier and B. Warinschi. Computationally sound,
automated proofs for security protocols. In ESOP’05,
volume 3444 of LNCS. Springer, Apr. 2005.
validation of internet security protocols and
applications. In CAV 2005, volume 3576 of LNCS.
Springer.
[21] A. Datta, J. Mitchell, and B. Warinschi.
Computationally Sound Compositional Logic for Key
Exchange Protocols. In CSFW’06, July 2006.
[4] M. Backes, I. Cervesato, A. D. Jaggard, A. Scedrov,
[22] C. He, M. Sundararajan, A. Datta, A. Derek, and
and J.-K. Tsay. Cryptographically Sound Security
Proofs for Basic and Public-key Kerberos. In
ESORICS 2006, volume 4189 of LNCS. Springer,
September 2006.
[5] M. Backes, B. Pﬁtzmann, and M. Waidner. A
Composable Cryptographic Library with Nested
Operations. In CCS’03. ACM, 2003.
J. C. Mitchell. A modular correctness proof of TLS
and IEEE 802.11i. In CCS’05. ACM, November 2005.
[23] IETF. Public Key Cryptography for Initial
Authentication in Kerberos, 1996–2006. RFC 4556.
Preliminary versions available as a sequence of
Internet Drafts at http://tools.ietf.org/wg/
krb-wg/draft-ietf-cat-kerberos-pk-init/.
[6] G. Bella and L. C. Paulson. Using Isabelle to Prove
[24] A. D. Jaggard, A. Scedrov, and J.-K. Tsay.
Properties of the Kerberos Authentication System. In
DIMACS’97, Workshop on Design and Formal
Veriﬁcation of Security Protocols (CD-ROM), 1997.
Computationally Sound Mechanized Proof of PKINIT
for Kerberos. Abstract presented at FCC’07.
[25] P. Laud. Secrecy Types for a Simulatable
[7] G. Bella and L. C. Paulson. Kerberos Version IV:
Cryptographic Library. In CCS 2005, May 2005.
Inductive Analysis of the Secrecy Goals. In
ESORICS’98, volume 1485 of LNCS. Springer, 1998.
[8] M. Bellare, R. Canetti, and H. Krawczyk. Keying hash
functions for message authentication. In CRYPTO’96,
volume 1109 of LNCS. Springer, 1996.
[9] M. Bellare and C. Namprempre. Authenticated
encryption: Relations among notions and analysis of
the generic composition paradigm. In ASIACRYPT
2000, volume 1976 of LNCS. Springer, December 2000.
[10] S. M. Bellovin and M. Merritt. Limitations of the
Kerberos Authentication System. In USENIX
Conference Proceedings, Winter 1991.
[11] B. Blanchet. A computationally sound mechanized
prover for security protocols. IEEE Transactions on
Dependable and Secure Computing. To appear.
Technical report version available at
http://eprint.iacr.org/2005/401.
[12] B. Blanchet. An eﬃcient cryptographic protocol
veriﬁer based on Prolog rules. In CSFW-14, June 2001.
[13] B. Blanchet. A Computationally Sound Mechanized
Prover for Security Protocols. In IEEE Symposium on
Security and Privacy, May 2006.
[14] B. Blanchet. Computationally sound mechanized
proofs of correspondence assertions. In CSF 2007, July
2007.
[15] B. Blanchet and D. Pointcheval. Automated Security
Proofs with Sequences of Games. In CRYPTO 2006,
volume 4117 of LNCS. Springer, Aug. 2006.
[16] A. Boldyreva and V. Kumar. Provable-security
analysis of authenticated encryption in Kerberos. In
IEEE Symp. Security and Privacy, 2007.
[17] F. Butler, I. Cervesato, A. D. Jaggard, A. Scedrov,
and C. Walstad. Formal Analysis of Kerberos 5.
Theoretical Computer Science, 367(1–2), 2006.
[18] R. Canetti and J. Herzog. Universally composable
symbolic analysis of mutual authentication and key
exchange protocols. In TCC’06, volume 3876 of LNCS.
Springer, March 2006.
[26] P. D. Lincoln, J. C. Mitchell, M. Mitchell, and
A. Scedrov. A probabilistic poly-time framework for
protocol analysis. In CCS-5, November 1998.
[27] P. D. Lincoln, J. C. Mitchell, M. Mitchell, and
A. Scedrov. Probabilistic polynomial-time equivalence
and security protocols. In FM’99, volume 1708 of
LNCS. Springer, Sept. 1999.
[28] G. Lowe. Breaking and Fixing the Needham-Schroeder
Public-Key Protocol using FDR. In TACAS’96,
volume 1055 of LNCS. Springer, 1996.
[29] C. Meadows. Analysis of the Internet Key Exchange
Protocol using the NRL Protocol Analyzer. In IEEE
Symp. Security and Privacy, 1999.
[30] C. A. Meadows. The NRL protocol analyzer: An
overview. Journal of Logic Programming, 26(2), 1996.
[31] Microsoft. Security Bulletin MS05-042.
http://www.microsoft.com/technet/security/
bulletin/MS05-042.mspx, August 2005.
[32] J. Mitchell, A. Ramanathan, A. Scedrov, and
V. Teague. A Probabilistic Polynomial-Time Process
Calculus for the Analysis of Cryptographic Protocols.
Theoretical Computer Science, 353(1–3), 2006.
[33] J. C. Mitchell, V. Shmatikov, and U. Stern.
Finite-State Analysis of SSL 3.0. In 7th USENIX
Security Symp., pages 201–216, 1998.
[34] C. Neuman, T. Yu, S. Hartman, and K. Raeburn. The
Kerberos Network Authentication Service (V5), July
2005. http://www.ietf.org/rfc/rfc4120.
[35] K. Raeburn. Encryption and Checksum Speciﬁcations
for Kerberos 5.
http://www.ietf.org/rfc/rfc3961.txt, Feb. 2005.
[36] A. Roy, A. Datta, A. Derek, and J. C. Mitchell.
Inductive proofs of computational secrecy. In
ESORICS 2007, volume 4734 of LNCS. Springer,
Sept. 2007.
[37] A. Roy, A. Datta, and J. C. Mitchell. Formal proofs of
cryptographic security of Diﬃe-Hellman-based
protocols. In TGC’07, Nov. 2007. To appear.
[19] I. Cervesato, A. D. Jaggard, A. Scedrov, J.-K. Tsay,
[38] C. Sprenger, M. Backes, D. Basin, B. Pﬁtzmann, and
and C. Walstad. Breaking and ﬁxing public-key
Kerberos. Information and Computation,
FCS-ARSPA’06 Special Issue. To appear.
M. Waidner. Cryptographically Sound Theorem
Proving. In CSFW 2006, July 2006.
99