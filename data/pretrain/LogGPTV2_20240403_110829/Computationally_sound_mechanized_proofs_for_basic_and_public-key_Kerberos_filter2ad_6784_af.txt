### Corollary 12: IND-CCA2 Key Usability in Kerberos

**Statement:** Both the basic and public-key versions of Kerberos satisfy IND-CCA2 (strong) key usability for the service key \( SK \), with respect to the symmetric encryption scheme used in Kerberos.

**Proof of Theorem 11: Basic Kerberos Case**

- **Case \( X = C \):** When the client completes its participation in a Client-Server (CS) exchange involving an honest Ticket Granting Server (TGS), it stores the session key \( SK \) in \( \text{keyCSK} \). One of these keys is randomly selected and passed to both the encryption and decryption oracles. For the boolean \( b_1 \) used by the encryption oracle, we can use CryptoVerif to prove the query `secret b1`. This proof requires the user to inspect the final game that CryptoVerif reaches upon the command `auto`, ensuring that terms dependent on \( b_1 \) and which might help an adversary in guessing \( b_1 \) occur only in find branches that are never executed.
- **Case \( X = T \):** Similar to the case \( X = C \), the session key \( SK \) is stored in \( \text{keyTSK} \) after the TGS sends the TS reply.
- **Case \( X = S \):** The proof is analogous, requiring the following commands before the manual inspection of the final game: `auto`, `SArename SK_33`, `simplify`, and `auto`. The command `SArename SK_33` is used when the variable \( \text{SK_33} \) is defined multiple times in the game, instructing CryptoVerif to rename each definition to a different name, allowing the distinction of cases based on the program point at which the variable was defined.

**Public-key Kerberos Case:**

- **Case \( X = C \) or \( X = T \):** The secrecy of the bit \( b_1 \) can be concluded by inspecting the final game that CryptoVerif reaches after a sequence of commands, similar to the basic Kerberos case.
- **Case \( X = S \):** The secrecy of \( b_1 \) can be concluded after the sequence of commands: `crypto sign rkCA`, `crypto sign rkCs`, `crypto penc rkC`, `crypto sign rkKs`, `crypto keyderivation`, `simplify`, `crypto keyderivation`, `simplify`, `auto`, `SArename SK_55`, `simplify`, and `auto`.

### 4.4 Varying the Strength of Cryptography

We observe that symbolic security proofs for Kerberos, such as those in [17], do not rely on the secrecy of the encrypted data within the authenticators \(\{{C, t_C}\}_{AK}\) and \(\{{C, t_C'}\}_{SK}\) sent by the client to the TGS and end server. CryptoVerif can also prove security properties for Kerberos without relying on the secrecy of the authenticator data. Specifically, we can modify CryptoVerif scripts so that the client sends a second, unencrypted copy of the authenticator contents alongside the authenticator, and CryptoVerif can still prove security properties for Kerberos.

- **Modification for CS Exchange:** If the client sends a subsession key in the CS exchange authenticator, we make this modification only in the TG exchange.
- **Modification for TG and CS Exchanges:** If the server sends the subsession key (but not the client), we may make this modification in both the TG and CS exchanges.

Using CryptoVerif, we can then prove the following theorem about authentication and secrecy when the authenticator contents are leaked as described.

**Theorem 13:**

- If the client sends the contents of the authenticator, unencrypted, along with the encrypted authenticator in both the TG and CS exchanges when she does not include a subsession key in the authenticator for the CS exchange; or
- If the client sends the contents of the authenticator, unencrypted, along with the encrypted authenticator in the TG exchange only when she includes a subsession key in the authenticator for the CS exchange,

then Theorems 1–5 and 8 hold for both basic and public-key Kerberos.

**Proof:**

If we modify the CryptoVerif scripts to expose the authenticator contents as described, CryptoVerif proves the queries needed for proving Theorems 1–5 and 8. For public-key Kerberos, the interactive commands are the same as before.

Similar results might be achieved by suitably relaxing the assumptions about the encryption function used for the authenticators. Further studies on weakening cryptographic assumptions without compromising the protocol remain a topic of ongoing work.

### 4.5 Improvements of CryptoVerif

This case study enabled us to find and fix two bugs in CryptoVerif, which did not affect the proof of simpler protocols previously tested. It also led to improvements in CryptoVerif's simplification algorithm, particularly for handling pseudo-random key derivation functions. Future improvements suggested include:

- **Automated Proof Strategy:** Enhancements in the proof strategy should allow for full automation in many more cases, especially for public-key protocols. The prover should automatically distinguish cases where the public key belongs to an honest principal or an adversary.
- **Instruction Ordering Sensitivity:** CryptoVerif is sometimes sensitive to the ordering of instructions, although the semantics of the game do not depend on this ordering. This problem could be solved by automatically moving `let x = ...` and `new x` instructions under tests (duplicating them if necessary), allowing CryptoVerif to distinguish cases based on which branch assigns \( x \).
- **Game Transformation for Secrecy Properties:** An additional game transformation would be helpful for proving some secrecy properties, particularly for key usability. Tests like `if b then P else P'` should be transformed into \( P \) when \( P \) and \( P' \) make indistinguishable actions, allowing us to prove the secrecy of \( b \). A first step would be to perform this transformation when \( P \) and \( P' \) are equal up to renaming of variables.

### 5. Conclusions

We have formalized and mechanically analyzed all three rounds of the Kerberos 5 protocol, both with and without its public-key extension PKINIT, using version 1.06pl3 of the CryptoVerif tool. This is the first mechanical security proof of an industrial protocol at the computational level. The success of CryptoVerif in proving security properties for Kerberos, especially for PKINIT, provides evidence of its utility for analyzing industrial protocols. This work also extends other analyses of Kerberos to include mechanical analysis tools.

In our work, we extended the idea of key usability to a new notion of strong key usability, which was helpful here and may be useful elsewhere. We are currently broadening our study of how cryptographic assumptions can be varied and how CryptoVerif copes with such changes. Our work with CryptoVerif has sharpened our understanding of the cryptographic subtleties involved in the protocol.

We have verified that the authentication keys and session keys are strongly usable for IND-CCA2 encryption. As the encryption scheme is assumed to also guarantee INT-CTXT security, it would be interesting to use CryptoVerif to determine whether the authentication keys and session keys are also (strongly) usable for INT-CTXT encryption.

Since the specifications of Kerberos and PKINIT [34, 23] are more complex than our formalization, we aim to use CryptoVerif on formalizations closer to the specifications, such as using a key derivation function for all symmetric keys. Another area for future work is the mechanized analysis of PKINIT’s Diffie-Hellman mode, which we did not study here. Extending the language of equivalences used by CryptoVerif to handle Diffie-Hellman key exchange holds both theoretical and practical interest.

### Acknowledgements

We are grateful to Michael Backes, Ricardo Corin, John Mitchell, Kenny Paterson, and Arnab Roy for their helpful discussions.

### References

[References listed as in the original text]

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the technical accuracy and depth of the original text.