``` 代码无行号
 请登录 
用户名 
密码 
">
```
> **代码清单 /47/47-002.php**
``` 代码无行号
用户名或密码错误
 重新登录 
```
> **代码清单 /47/47-003.php**
``` 代码无行号
 认证成功 
登录成功
```
47-001.php、47-002.php、47-003.php
为极度简化后的登录脚本。由于仅用于演示，47-002.php
中没有检验用户名和密码。登录认证成功后会重定向至 POST 参数 `url`
所指定的 URL。重定向处理的内容即为输出 Location 消息头。图 4-60
展示了页面的跳转。
![{%}](Image00106.jpg)
**图 4-60 重定向范例的页面跳转**
正常情况下，重定向目标应该为
47-003.php。但是，如果攻击者精心准备了能跳转到恶意网站的 URL
来让用户点击会怎样呢？
假设此处恶意网站的 URL 为 
。以下为 47-900.php 的源代码。
> **代码清单 /47/47-900.php**
``` 代码无行号
 登录错误 
用户名或密码错误。请再次登录。
用户名 
密码 
```
攻击者会给用户发送邮件或在用户的博客中发表评论，想方设法地使用户浏览以下
URL。
``` 代码无行号
http://example.jp/47/47-001.php?url=http://trap.example.com/47/47-900.php
```
由于域名没有问题，并且 HTTPS 的情况下证书也没有出错 [41]{.注释编号}
，因此多数用户都会毫无防备地输入用户名和密码。这时，应用程序在
47-002.php 认证成功后，就会跳转到图 4-61 所示的恶意网页。
[41]{.注释编号下} 本例中没有涉及 HTTPS。
![{%}](Image00107.jpg)
**图 4-61 恶意网页**
虽然用户输入的确实是正确的用户名和密码，但看到这个页面后还是不免会产生疑惑而再次输入。由于用户已经进入到了恶意网站，因此，点击登录按钮后用户名和密码就会被发送给恶意网站，而如果随后又能跳转至正规页面（47-003.php），那么用户就在毫不知情的情况下被窃取了重要信息。
#### **安全隐患的产生原因**
自由重定向漏洞产生的原因有以下两点。
-   重定向的目标 URL 能够由外界指定
-   没有对重定向的目标域名进行校验
以上两点是 AND
条件，也就是说只有同时满足这两点时才会形成自由重定向漏洞，因此，只要使其中一项无法满足也就消除了安全隐患。
-   **允许自由重定向的情况**
    上面讲述的都是自由重定向导致安全隐患的情况，但并非所有的自由重定向都会造成安全隐患。例如，满足以下两个条件时就不会造成安全隐患。
    -   根据应用的需求本来就应该跳转至外部域名
    -   用户自己清楚会跳转至外部域名
    满足上述条件的一个重定向的例子就是横幅广告。虽然多数横幅广告都使用了应用内部的重定向功能，但只要用户能分辨出自己点击的是广告，那么即使有自由重定向功能也不会造成安全隐患。
#### **对策**
自由重定向漏洞的根本性防范策略有下列三项，实施时任选其一即可。
> 1\. 固定重定向的目标 URL
>
> 2\. 使用编号指定重定向的目标 URL
>
> 3\. 校验重定向的目标域名
下面我们就来依次解说。
-   **固定重定向的目标 URL**
    重新评估应用的需求，探讨是否能够固定 URL
    的跳转去向，而不是由外界指定。只要能够固定重定向的目标，就能成功根除自由重定向漏洞。
-   **使用编号指定重定向的目标 URL**
    由于某些原因而不得不采用可变的重定向目标时，可以采用"页面编号"的形式来指定目标
    URL。页面编号和 URL
    的对应表应该保存在外界无法访问的脚本源码或文件、数据库中。
    使用此方法后外界就无法任意指定域名，因此也就消除了自由重定向漏洞。
-   **校验重定向的目标域名**
    如果使用编号来指定重定向目标的方法也行不通，那么就只能通过校验重定向目标来防止跳转至任意域名了。然而，由于该校验处理陷阱重重，因此推荐尽量使用上面两种方法。
    首先我们来看一个校验 URL 的失败案例。
    **失败例 1**
    ``` 代码无行号
    if (mb_ereg('example\.jp', $url)) {
      // 校验通过
    ```
    该例子虽然确保了 URL 中包含
    example.jp，但是还远远不够。比如，以下包含了 example.jp 的 URL
    就成功通过了验证，并使攻击得以成功。
    **混过校验的 URL**
        http://trap.example.com/example.jp
        .php
    **失败例 2**
    ``` 代码无行号
    if (mb_ereg('^/', $url)) {
      // 校验通过
    ```
    该例子确保了 URL 以 `/`
    开头。换言之，该校验的思路为，如果只允许指定相对
    URL，就能杜绝重定向至外部域名。
    但是，以下 URL 就能够通过该校验。
    **混过校验的 URL**
    ``` 代码无行号
    //trap.example.com/47/47-900.php
    ```
    以 `//` 开头的 URL 被称为"网络路径引用"，这种形式的 URL
    指定主机名（FQDN）以下的内容。也就是说，该校验无法完全禁止跳转至外部域名
    [42]{.注释编号} 。
    **失败例 3**
    ``` 代码无行号
    if (mb_ereg('^http://example\.jp/', $url)) {
      // 校验通过
    ```
    第 3 个失败例的正则表达式使用前方一致匹配来确保 URL 以
     开头。但是，如果仅进行该校验的话就有可能会招致
    HTTP 消息头注入攻击。而通过 HTTP
    消息头攻击，有时还能够重定向至其他域名，因此，该方法也不能完全杜绝自由重定向漏洞。
    关于 HTTP 消息头注入的详情请参考下一小节。
    **推荐写法**
    ``` 代码无行号
    if (mb_ereg('\Ahttps?://example\.jp/[-_.!~*\'();\/?:@&=+\$,%#a-zA-Z0-9]*\z', $url)) {
      // 校验通过
    ```
    推荐写法中确保了 URL 以 http://example.jp/
    开头，并且还保证了后面仅包含能被用于 URL（URI）的字符。另外，如 4.2
    节中讲述的一样，此处使用了 `\A` 和 `\z`
    匹配字符串的开头和结尾。而正则表达式 `https?` 则是为了能够同时匹配
    http 和 https。
[42]{.注释编号下} 虽然 HTTP/1.1 的规格 RFC2616 中规定了 Location
消息头中指定的 URL（URI）必须为绝对 URL（10.30
项），但主流浏览器都允许相对 URL 的形式。
> **专栏：警告页面**
>
> 在拍卖网站及社交网站等用户输入的 URL
> 会以链接形式显示的网站中，攻击者通常会利用这个特性将用户诱导至钓鱼网站。
>
> 而为了防止该攻击手段，可以添加一个叫作警告页面的网页，使用户无法直接跳转至外部域名的网站。在警告页面上提醒用户即将跳转至外部网站，以此来防止钓鱼式攻击。下图为雅虎拍卖网站的警告页面。通过显示该页面让用户提高警惕，然后再跳转至外部网站。
>
> ![{%}](Image00108.jpg)
>
> **图 4-62 雅虎拍卖网站的警告页面**
>
> 重定向中也能使用警告页面。而即使是在允许重定向至外部网站的情况下，也不建议直接跳转，而是应该考虑是否能插入警告页面来防止钓鱼式攻击。
>
> 此外，由于警告页面还能够防止会话 ID
> 泄漏，因此在面向手机的应用中也有着广泛的应用。详情请参考 7.4 节。
### **4.7.2 HTTP 消息头注入** {#text00000.html#nav_point_36}
本节讲述 HTTP 消息头注入。HTTP
消息头注入漏洞除了会发生在重定向处理中，在 Cookie 输出等所有输出 HTTP
响应头的处理中也都有可能发生。
#### **概要**
HTTP 消息头注入漏洞是指在重定向或生成 Cookie 等基于外部传入的参数输出
HTTP
响应头时所产生的安全隐患。输出响应消息头时，攻击者通过在参数中插入换行符，就可以在受害人的浏览器上实现下列操作。
-   任意添加响应消息头