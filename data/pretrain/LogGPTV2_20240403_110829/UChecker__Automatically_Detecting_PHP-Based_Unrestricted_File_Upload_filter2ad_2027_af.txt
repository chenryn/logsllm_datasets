9
10
11
12
13 }
590
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply. 
C. Comparison With Other Detection Solutions
We have experimented with two publicly available
PHP vulnerability scanners including RIPS [22], [23] and
WAP [24], where both of them offer options to detect
unrestricted ﬁle uploading vulnerabilities. Speciﬁcally, RIPS
detects sensitive sinks as potential vulnerable functions if
they are tainted by untrusted inputs. While taint analysis
concerns the source of the uploaded ﬁle, it does not model
the name or the extension of this ﬁle, thereby being likely
to introduce false positives. WAP integrates taint analysis
and machine learning for detection without particularly
modeling the uploaded ﬁle. By scanning 28 vulnerability-
free samples, 13 known vulnerable scripts, and 3 newly
detected vulnerable plugins, RIPS detected 15 out of 16
vulnerable samples (missing “the WooCommerce Custom
Proﬁle”) with a high false positive rate of 27/28. WAP led
to a detection rate of 4/16 with a false positive rate of
1/28. We acknowledge that UChecker currently only focuses
on unrestricted ﬁle uploading vulnerability while RIPS and
WAP offer options to cover more types. Nevertheless, these
systems can complement each other in practical usage.
V. RELATED WORK
Static program analysis has been adopted to detect
variety of vulnerabilities [25], [26], [27], [9], [28], [29] [30],
[31], [23]. Speciﬁcally, Zheng et. al [25], [26] and Xie et.al [27]
leverage static program analysis to detect PHP web applica-
tions that are vulnerable to SQL injection and XSS attacks.
Son et. al [9] proposed a method to identify PHP web
applications with semantic vulnerabilities such as inﬁnite
loops and the missing of authorization checks. Dahse et.
al [28] designed a system to detect SQL injections and
XSS using data ﬂow analysis. Barth et. al [29] designed a
system to detect XSS attacks by analyzing the structure of
the content submitted to the server. Compared to these
methods, UChecker focuses on a different vulnerability, the
unrestricted ﬁle upload vulnerability. Staicu et. al [31] stud-
ied Node.js applications vulnerable to injection attacks that
exploit exec or eval APIs. Similar to UChecker, this method
also interprets the AST of a web application for analysis.
However, it uses template matching rather than symbolic
execution to detect vulnerabilities. In addition, it targets
at detecting different vulnerabilities. Dahse et. al [23] pro-
posed novel block and function summaries to detect taint-
style vulnerabilities. Unfortunately, taint-analysis alone is
insufﬁcient to model unrestricted ﬁle uploading vulnera-
bilities, thereby likely introducing false positives. Samimi
et. al [32] designed a system to automatically repair HTML
generation errors in PHP applications. This system also used
string constraint solving technique. However, this system
addresses a different problem. Nunes et. al [33] conducted
benchmark-based assessments to compare capabilities of
publicly-available static vulnerability detection tools.
Many methods detect vulnerable PHP applications [34],
[35], [36] and JavaScript applications [37] using dynamic
program analysis, which fundamentally differs from the
analysis methodology employed by UChecker. Although dy-
namic analysis tends to be more efﬁcient compared to static
analysis, it commonly suffers from low coverage of pro-
gram paths and high uncertainties introduced by runtime
environment. In UChecker, we have compensated for the
possible performance bottleneck rooted-in static analysis by
designing a vulnerability-oriented locality analysis.
A few existing projects [38], [39], [5], [28], [40] involve
the study of unrestricted ﬁle upload vulnerabilities. For
example, Canali et. al built a honey pot [40] to study
actual malicious upload attempts. Despite insights gained
from these studies, a systematic solution, which can detect
vulnerable web applications before their deployment, is still
missing. UChecker aims to deliver this very capability.
VI. DISCUSSION
The current implementation of UChecker has a few
limitations. First, UChecker now focuses on vulnerabilities
that allow the uploading of PHP ﬁles (i.e., those with
“.php” and “.php5”). However, variant vulnerabilities may
allow ﬁles with other potential harmful extensions such as
“.asa” and “.swf”. UChecker can easily cover these variants
by verifying more extensions. Second, as demonstrated in
Section IV-A, false positives are mainly attributed to the fact
that UChecker does not model WordPress’s built-in func-
tion namely add_action(‘‘admin_menu’’,
func_name).
However, this does not represent a design ﬂaw. In fact,
modeling a platform-dependent function is constrained by
the awareness of this function. Nevertheless, this indeed
might be a practical challenge if the variety and dynamics
of built-in functions are high. Third, UChecker’s interpreter
does not cover all
language features of PHP. For exam-
ple, UChecker does not precisely model loops, which may
lead to false negatives and false positives. Nevertheless,
performing effective symbolic execution for loops is an
intrinsic challenge of static program analysis, which is not
a speciﬁc ﬂaw of our design. In addition, PHP is a dynamic
language. Although UChecker’s translation rules partially
address challenges introduced by PHP’s dynamic types, it
does not tackle executable content that is generated by a
PHP script at runtime. As a consequence, scripts analyzed
by UChecker might be incomplete,
leading to detection
inaccuracy. A potential solution is to integrate dynamic
analysis to access all executables produced at runtime.
Finally, UChecker does not model PHP regular expression
matching operations considering their high complexity.
A potential solution is to leverage Z3’s built-in regular-
expression-enabled solver. Unfortunately, such solver may
not sufﬁciently cover all cases that can be expressed by
PHP regular expressions. Another potential solution is to
integrate dynamic analysis into the interpretation process,
assigning concrete values to certain symbols.
VII. CONCLUSION
We have built UChecker to automatically detect PHP-
based web programs with unrestricted ﬁle upload vulner-
abilities. UChecker
interprets abstract syntax trees of PHP
source code for symbolic execution, whose performance is
improved by a novel vulnerability-oriented locality analy-
sis algorithm. We model vulnerabilities using constraints
and verify them using an SMT solver. Experiments have
demonstrated that UChecker detected 3 vulnerable web
applications that have not been publicly reported.
591
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] O. Starov,
J. Dahse, S. S. Ahmad, T. Holz, and N. Nikiforakis,
“No honor among thieves: A large-scale analysis of malicious
web shells,” in Proceedings of the 25th International Conference
on World Wide Web, ser. WWW ’16. Republic and Canton of
Geneva, Switzerland: International World Wide Web Conferences
Steering Committee, 2016, pp. 1021–1032.
[Online]. Available:
https://doi.org/10.1145/2872427.2882992
[2] W.
contributors,
“Unrestricted
ﬁle
upload,”
[Online;
https://www.owasp.org/index.php/Unrestricted_File_Upload
22-July-2018].
accessed
[Online].
2018,
Available:
[3] D. S., “How to protect site from malware upload by ﬁle upload form,”
https://blog.threatpress.com/protect-site-malware-upload/, 2018.
[4] B. Williams, D. Damstra, and H. Stern, Professional WordPress: design
[5]
John Wiley & Sons, 2015.
and development.
I. Riadi and E. I. Aristianto, “An analysis of vulnerability web against
attack unrestricted image ﬁle upload,” Computer Engineering and
Applications Journal, vol. 5, no. 1, pp. 19–28, 2016.
[6] Patrick,
[Online;
https://hackerone.com/reports/343726
“Unrestricted
accessed
22-July-2018].
ﬁle
upload
(rce),”
[Online].
2018,
Available:
[7] C. Barrett and C. Tinelli, “Satisﬁability modulo theories,” in Handbook
of Model Checking. Springer, 2018, pp. 305–343.
[8] L. De Moura and N. Bjørner, “Z3: An efﬁcient smt solver,” in
International conference on Tools and Algorithms for the Construction
and Analysis of Systems. Springer, 2008, pp. 337–340.
[9] S. Son and V. Shmatikov, “Saferphp: Finding semantic vulnerabilities
in php applications,” in Proceedings of
the ACM SIGPLAN 6th
Workshop on Programming Languages and Analysis for Security, ser.
PLAS ’11. New York, NY, USA: ACM, 2011, pp. 8:1–8:13. [Online].
Available: http://doi.acm.org/10.1145/2166956.2166964
[10] Y. Zheng and X. Zhang, “Path sensitive static analysis of web applica-
tions for remote code execution vulnerability detection,” in Software
Engineering (ICSE), 2013 35th International Conference on.
IEEE,
2013, pp. 652–661.
[11] C. Cadar and K. Sen, “Symbolic execution for software testing: three
decades later,” Communications of the ACM, vol. 56, no. 2, pp. 82–90,
2013.
[12] G. C. Murphy, D. Notkin, W. G. Griswold, and E. S. Lan, “An empirical
study of static call graph extractors,” ACM Transactions on Software
Engineering and Methodology (TOSEM), vol. 7, no. 2, pp. 158–191,
1998.
[13] B. Dutertre and L. De Moura, “The yices smt solver,” Tool paper at
http://yices. csl. sri. com/tool-paper. pdf, vol. 2, no. 2, pp. 1–2, 2006.
[14] Y. Zheng, X. Zhang, and V. Ganesh, “Z3-str: a z3-based string solver
for web application analysis,” in Proceedings of the 2013 9th Joint
Meeting on Foundations of Software Engineering. ACM, 2013, pp.
114–124.
[15] N. Popov, “Php parser,” URl: https://github. com/nikic/PHP-Parser
(visited on 2014-03-28), 2014.
[16] B. Williams, O. Richard, and J. Tadlock, Professional WordPress Plugin
Development. Wrox Press Ltd., 2011.
[17] C. Report, “Unrestricted ﬁle upload vulnerability in the joomla
[Online].
[Online; accessed 30-July-2018].
content editor,” 2018,
Available: https://www.cvedetails.com/cve/CVE-2012-2902/
[18] ——, “Unrestricted ﬁle upload vulnerability in the avatar uploader
module before 6.x-1.3,” 2018,
[Online; accessed 30-July-2018].
[Online]. Available: https://www.cvedetails.com/cve/CVE-2015-2087/
picture,”
Available:
2017,
https://wordpress.org/plugins/woo-custom-proﬁle-picture/
custom
30-July-2018].
proﬁle
[Online].
[19] Ecomerciar,
“Woocommerce
accessed
[Online;
[23]
[24]
J. Dahse and T. Holz, “Simulation of built-in php features for precise
static code analysis.” in NDSS, vol. 14. Citeseer, 2014, pp. 23–26.
I. Medeiros, N. Neves, and M. Correia, “Detecting and removing web
application vulnerabilities with static analysis and data mining,” IEEE
Transactions on Reliability, vol. 65, no. 1, pp. 54–69, 2016.
[25] G. Wassermann and Z. Su, “Sound and precise analysis of web
applications for injection vulnerabilities,” in ACM Sigplan Notices,
vol. 42, no. 6. ACM, 2007, pp. 32–41.
[26] W. Gary and Z. Su, “Static detection of cross-site scripting vulnera-
bilities,” in 2008 ACM/IEEE 30th International Conference on Software
Engineering.
IEEE, 2008, pp. 171–180.
[27] Y. Xie and A. Aiken, “Static detection of security vulnerabilities in
scripting languages.” in USENIX Security Symposium, vol. 15, 2006,
pp. 179–192.
J. Dahse and T. Holz, “Static detection of second-order vulnerabilities
in web applications,” in USENIX Security Symposium, 2014, pp. 989–
1003.
[28]
[29] A. Barth, J. Caballero, and D. Song, “Secure content snifﬁng for web
browsers, or how to stop papers from reviewing themselves,” in 2009
30th IEEE Symposium on Security and Privacy, May 2009, pp. 360–
371.
[30] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, “A
symbolic execution framework for javascript,” in Security and Privacy
(SP), 2010 IEEE Symposium on.
IEEE, 2010, pp. 513–528.
[31] C.-A. Staicu, M. Pradel, and B. Livshits, “Synode: Understanding and
automatically preventing injection attacks on node. js,” in Network
and Distributed System Security (NDSS), 2018.
[32] H. Samimi, M. Schäfer, S. Artzi, T. Millstein, F. Tip, and L. Hendren,
“Automated repair of html generation errors in php applications
using string constraint solving,” in 2012 34th International Conference
on Software Engineering (ICSE).
IEEE, 2012, pp. 277–287.
[33] P. Nunes, I. Medeiros, J. C. Fonseca, N. Neves, M. Correia, and
M. Vieira, “Benchmarking static analysis tools for web security,” IEEE
Transactions on Reliability, vol. 67, no. 3, pp. 1159–1175, 2018.
[34] G. Wassermann, D. Yu, A. Chander, D. Dhurjati, H. Inamura, and
Z. Su, “Dynamic test input generation for web applications,” in
Proceedings of the 2008 international symposium on Software testing
and analysis. ACM, 2008, pp. 249–260.
[35] S. Artzi, A. Kiezun, J. Dolby, F. Tip, D. Dig, A. Paradkar, and M. D.
Ernst, “Finding bugs in dynamic web applications,” in Proceedings of
the 2008 international symposium on Software testing and analysis.
ACM, 2008, pp. 261–272.
[36] A. Petukhov and D. Kozlov, “Detecting security vulnerabilities in
web applications using dynamic analysis with penetration testing,”
Computing Systems Lab, Department of Computer Science, Moscow
State University, pp. 1–120, 2008.
[37] P. Saxena, S. Hanna, P. Poosankam, and D. Song, “Flax: Systematic
discovery of client-side validation vulnerabilities in rich web appli-
cations.” in NDss, 2010.
[38] N. Uddin and M. Jabr, “File upload security and validation in context
of software as a service cloud model,” in IT Convergence and Security
IEEE, 2016, pp. 1–5.
(ICITCS), 2016 6th International Conference on.
[39] O. Andreeva, S. Gordeychik, G. Gritsai, O. Kochetova, E. Pot-
seluevskaya, S. I. Sidorov, and A. A. Timorin, “Industrial control
systems vulnerabilities statistics,” Kaspersky Lab, Report, 2016.
[40] D. Canali and D. Balzarotti, “Behind the scenes of online attacks:
an analysis of exploitation behaviors on the web,” in 20th Annual
Network & Distributed System Security Symposium (NDSS 2013), 2013,
pp. n–a.
[20] dimdavid, “File provider 1.2.3,” 2017, [Online; accessed 30-July-2018].
[21]
[22]
[Online]. Available: https://wordpress.org/plugins/ﬁle-provider/
“Wp demo buddy 1.0.2,” https://wordpress.org/plugins/wp-demo-
buddy, [Online; accessed 05-Dec-2018].
J. Dahse and J. Schwenk, “Rips-a static source code analyser for
vulnerabilities in php scripts,” in Seminar Work (Seminer Çalismasi).
Horst Görtz Institute Ruhr-University Bochum, 2010.
592
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:41 UTC from IEEE Xplore.  Restrictions apply.