notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 332
EDB Postgres Replication Server User’s Guide
pk_value | deptno=50
The conflict entry for synchronization from mmrnode_b to mmrnode_a can be located in
xdb_conflicts with the following query for this example:
mmrnode_a=# SELECT * FROM _edb_replicator_pub.xdb_conflicts
mmrnode_a-# WHERE src_db_id = 4
mmrnode_a-# AND target_db_id = 1
mmrnode_a-# AND src_rrep_sync_id = 1
mmrnode_a-# AND target_rrep_sync_id = 0;
-[ RECORD 1 ]-------+----------------------------------------------------------------
src_db_id | 4
target_db_id | 1
src_rrep_sync_id | 1
target_rrep_sync_id | 0
table_id | 31
conflict_time | 25-AUG-15 10:40:23.726889
resolution_status | P
resolution_strategy |
resolution_time |
alert_status |
conflict_type | II
win_db_id | 0
win_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
pk_value | deptno=50
For uniqueness (insert/insert) conflicts only, the following query can be used to display
both of the preceding entries:
mmrnode_a=# SELECT * FROM _edb_replicator_pub.xdb_conflicts
mmrnode_a-# WHERE pk_value = 'deptno=50'
mmrnode_a-# AND conflict_type = 'II'
mmrnode_a-# AND resolution_status = 'P';
-[ RECORD 1 ]-------+----------------------------------------------------------------
src_db_id | 1
target_db_id | 4
src_rrep_sync_id | 2
target_rrep_sync_id | 0
table_id | 31
conflict_time | 25-AUG-15 10:40:23.685738
resolution_status | P
resolution_strategy |
resolution_time |
alert_status |
conflict_type | II
win_db_id | 0
win_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
| Detail: Key (deptno)=(50) already exists.
pk_value | deptno=50
-[ RECORD 2 ]-------+----------------------------------------------------------------
src_db_id | 4
target_db_id | 1
src_rrep_sync_id | 1
target_rrep_sync_id | 0
table_id | 31
conflict_time | 25-AUG-15 10:40:23.726889
resolution_status | P
resolution_strategy |
resolution_time |
alert_status |
conflict_type | II
win_db_id | 0
win_rrep_sync_id | 0
notes | ERROR: duplicate key value violates unique constraint "dept_pk"
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 333
EDB Postgres Replication Server User’s Guide
| Detail: Key (deptno)=(50) already exists.
pk_value | deptno=50
These entries appear in the Postgres Enterprise Manager Client as shown by the
following:
Figure 6-38 - Pending conflict in xdb_conflicts
Change the value in column resolution_status from P (pending) to C (completed) to
indicate this conflict has been resolved. The value in winning_db_id is changed to 4 to
indicate master node mmrnode_b contains the winning transaction. The value in
winning_rrep_sync_id is changed to the value of rrep_sync_id for the shadow
table entry of the transaction in mmrnode_b since this is the one deemed to be correct.
The SQL statement to perform this update for the mmrnode_a to the mmrnode_b
synchronization conflict is the following:
UPDATE _edb_replicator_pub.xdb_conflicts SET
resolution_status = 'C',
win_db_id = 4,
win_rrep_sync_id = 1
WHERE src_db_id = 1
AND target_db_id = 4
AND src_rrep_sync_id = 2
AND target_rrep_sync_id = 0;
The SQL statement to perform this update for the mmrnode_b to the mmrnode_a
synchronization conflict is the following:
UPDATE _edb_replicator_pub.xdb_conflicts SET
resolution_status = 'C',
win_db_id = 4,
win_rrep_sync_id = 1
WHERE src_db_id = 4
AND target_db_id = 1
AND src_rrep_sync_id = 1
AND target_rrep_sync_id = 0;
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 334
EDB Postgres Replication Server User’s Guide
For uniqueness (insert/insert) conflicts only, the following SQL statement can be used to
update both of the preceding entries simultaneously:
UPDATE _edb_replicator_pub.xdb_conflicts SET
resolution_status = 'C',
win_db_id = 4,
win_rrep_sync_id = 1
WHERE pk_value = 'deptno=50'
AND conflict_type = 'II'
AND resolution_status = 'P';
The following are the updated xdb_conflicts entries:
Figure 6-39 - Resolved conflict in xdb_conflicts
When viewed in the Conflict History tab, the entries now show Resolved instead of
Pending in the Resolution Status column, and the Winning DB column shows the
address of master node mmrnode_b.
Figure 6-40 - Resolved uniqueness conflict
6.6.9.5 Correction Using New Transactions
Another method for bringing all the publication tables to a consistent state is by removing
any changes caused by the conflicting transactions and then issuing new, corrected
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 335
EDB Postgres Replication Server User’s Guide
transactions at one master node, which you allow the multi-master replication system to
synchronize to all other master nodes.
Referring back to the uniqueness conflict on the dept table, instead of correcting the
erroneous row and inserting the row into the master node where it is missing as described
in Section 6.6.9.4, you can delete the conflicting rows from all master nodes, then insert
the correct row in one master node and let the multi-master replication system
synchronize the correct row to all master nodes.
Step 1: Manually delete the inserted row from the publication tables in all master nodes
with session_replication_role set to replica.
On mmrnode_a, delete the erroneous row:
mmrnode_a=# SHOW session_replication_role;
session_replication_role
--------------------------
replica
(1 row)
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | FINANCE | CHICAGO
(5 rows)
mmrnode_a=# DELETE FROM dept WHERE deptno = 50;
DELETE 1
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
On mmrnode_b, delete the row even though the transaction created the correct result:
mmrnode_b=# SHOW session_replication_role;
session_replication_role
--------------------------
replica
(1 row)
mmrnode_b=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 336
EDB Postgres Replication Server User’s Guide
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
mmrnode_b=# DELETE FROM dept WHERE deptno = 50;
DELETE 1
mmrnode_b=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
On mmrnode_c, no changes are required as the conflicting transaction did not insert a
new row into the table on this node:
mmrnode_c=# SET search_path TO edb;
SET
mmrnode_c=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
(4 rows)
Step 2: Rerun the transaction on one master node with the multi-master replication
system running and with session_replication_role set to the default (origin).
For this example, the correct INSERT statement is executed on mmrnode_a:
On mmrnode_a:
mmrnode_a=# SHOW session_replication_role;
session_replication_role
--------------------------
origin
(1 row)
mmrnode_a=# INSERT INTO dept VALUES (50, 'MARKETING', 'LOS ANGELES');
INSERT 0 1
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
Step 3: Perform synchronization replication.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 337
EDB Postgres Replication Server User’s Guide
The same rows now appear in the publication table on all master nodes.
On mmrnode_a;
mmrnode_a=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
On mmrnode_b:
mmrnode_b=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
On mmrnode_c:
mmrnode_c=# SELECT * FROM dept;
deptno | dname | loc
--------+------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | MARKETING | LOS ANGELES
(5 rows)
Step 4: Update the shadow table entries for the conflicting transactions in the master
nodes to indicate that the conflict has been resolved as in Step 2 of Section 6.6.9.4.
Change the rrep_tx_conflict_status column from P (pending) to D (discarded) on
all master nodes.
The resulting change for the shadow table on mmrnode_a is as follows.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 338
EDB Postgres Replication Server User’s Guide
Figure 6-41 - Discarded shadow table entry
Note the second entry for the accepted transaction you ran in Step 2 where
rrep_tx_conflict_status is set to null indicating there was no conflict.
The resulting change for the shadow table on mmrnode_b is as follows.
Figure 6-42 - Discarded shadow table entry
There is no shadow table entry in mmrnode_c, since an insert transaction was not
performed in that master node by the application.
Step 5: In the control schema of the publication database currently designated as the
controller database, modify the entries in the xdb_conflicts table to indicate the
conflict has been resolved as in Step 3 of Section 6.6.9.4.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 339
EDB Postgres Replication Server User’s Guide
Figure 6-43 - Resolved conflict in xdb_conflicts
6.6.9.6 Correction Using Shadow Table Transactions
The final method for bringing all publication tables to a consistent state is by removing
changes caused by the conflicting transactions and then modifying the publication table’s
metadata in such a way that the next synchronization results in the replication of
transactions already stored in the shadow tables. Such transactions may not have been
successfully replicated to all the other master nodes in a prior synchronization for various
reasons.
The following is an example of such a case:
 Applications on two master nodes insert rows with the same primary key value.
This will result in a uniqueness conflict when synchronization replication occurs.
 Following the insert on one master node, the application continues to apply
updates to the newly inserted row. These updates are successfully applied to the
row on this master node and are recorded in the shadow table on this node.
 Synchronization replication is performed.
 Since there is a uniqueness conflict, the rows with the conflicting primary key
value are not replicated into the publication tables on the other master nodes.
 However, the conflicting row on the master node that was not directly updated
will receive those update transactions by the replication, resulting in possibly
inconsistent, updated rows on the two master nodes.
Instead of manually inserting the missing row into the other master nodes and manually
changing the incorrect row; or instead of rerunning the application to reapply the correct
insert and updates, the following option provides a way to reapply the transactions
already recorded in the shadow table of the winning master node.
The example used to illustrate this method is based upon the following transactions on
the emp table.
In mmrnode_b, the following row is inserted:
INSERT INTO emp (empno,ename,job,deptno) VALUES (9001,'SMITH','ANALYST',20);
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 340
EDB Postgres Replication Server User’s Guide
In mmrnode_c, the following row is inserted with the same primary key value 9001 in
the empno column:
INSERT INTO emp (empno,ename,job,deptno) VALUES (9001,'JONES','SALESMAN',30);
In mmrnode_c, this is followed by a series of updates to the newly inserted row:
UPDATE emp SET mgr = 7698 WHERE empno = 9001;
UPDATE emp SET sal = 9500 WHERE empno = 9001;
UPDATE emp SET comm = 5000 WHERE empno = 9001;
Synchronization replication is performed. The resulting content of the emp table is as
follows:
On mmrnode_a the conflicting row has not been replicated:
mmrnode_a=# SELECT * FROM emp;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+-----------+------+--------------------+---------+---------+--------
7369 | SMITH | CLERK | 7902 | 17-DEC-80 00:00:00 | 800.00 | | 20
7499 | ALLEN | SALESMAN | 7698 | 20-FEB-81 00:00:00 | 1600.00 | 300.00 | 30
7521 | WARD | SALESMAN | 7698 | 22-FEB-81 00:00:00 | 1250.00 | 500.00 | 30
7566 | JONES | MANAGER | 7839 | 02-APR-81 00:00:00 | 2975.00 | | 20
7654 | MARTIN | SALESMAN | 7698 | 28-SEP-81 00:00:00 | 1250.00 | 1400.00 | 30
7698 | BLAKE | MANAGER | 7839 | 01-MAY-81 00:00:00 | 2850.00 | | 30
7782 | CLARK | MANAGER | 7839 | 09-JUN-81 00:00:00 | 2450.00 | | 10
7788 | SCOTT | ANALYST | 7566 | 19-APR-87 00:00:00 | 3000.00 | | 20