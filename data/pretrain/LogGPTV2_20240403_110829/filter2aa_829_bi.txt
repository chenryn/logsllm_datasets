### CLSID Mapping and Malicious Handler Deployment

#### CLSID to ProgID Mapping
The following registry entry maps the CLSID `{1CE29631-7A1E-4A36-8C04-AFCCD716A718}` to the ProgID `ExcelWorkBook.16`:
```
HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\{1CE29631-7A1E-4A36-8C04-AFCCD716A718}\ProgID
```
Value: `ExcelWorkBook.16`

This mapping provides the association between the CLSID and the ProgID.

#### Inproc Server32 Path
The following registry entry specifies the path to our malicious handler DLL:
```
HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\{1CE29631-7A1E-4A36-8C04-AFCCD716A718}\InprocServer32
```
Value: `C:\path\to\our\handler.dll`

This entry points to the location of the malicious DLL that will be loaded when the associated ProgID is invoked.

#### Validating COM Object Registration
Before deploying these changes to a live target, it is essential to validate them in a lab environment. The PowerShell commands in Listing 13-2 can be used for this purpose.

**Listing 13-2: Validating COM Object Registration**
```powershell
$type = [Type]::GetTypeFromProgID("Excel.Workbook.16")
$obj = [Activator]::CreateInstance($type)
$obj.GetMembers()
```
These commands retrieve the type associated with the ProgID, create an instance of the COM object, and list the methods supported by the server. This serves as a final sanity check to ensure that everything is working correctly. If successful, the methods implemented in the COM server should be returned via the newly instantiated object.

### Deploying the Handler
To deploy the handler, we need to upload the malicious DLL to the target's filesystem. The executable can be written to any location accessible to the user. While it might be tempting to hide the file in an unrelated folder, this could appear suspicious. Instead, placing the file in a more natural location, such as alongside `excel.exe`, may be less conspicuous. As an administrator, we can write to the directory where Excel is installed. Naming the file something innocuous can further reduce suspicion.

Once the file is on disk, the EDR (Endpoint Detection and Response) system will scan it. We hope that the protections we have put in place will prevent the file from being flagged as malicious. If the file is not quarantined, we can proceed with making the necessary registry changes.

### Registry Modifications
Modifying the registry can be relatively safe if done carefully. Most EDRs monitor only specific keys and subkeys, such as those related to services and protected processes. Our actions will generate some telemetry, but we will avoid touching monitored keys.

**Table 13-4: Registry Keys Modified During Handler Registration**

| Registry Key | Operation |
|--------------|-----------|
| `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.xlsx\UserChoice` | Delete |
| `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.xlsx\UserChoice` | Create |
| `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.xlsx\UserChoice\Hash` | Set value |
| `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.xlsx\UserChoice\ProgId` | Set value |

After these changes, the handler should be functional. Opening a `.xlsx` file will invoke our handler, execute the shellcode, and then open the real Excel application. This allows us to elevate privileges to an administrative account without directly interacting with `lsass.exe`.

### Lateral Movement
With the agent running on a potentially privileged account, the next step is to determine the level of access within the domain. Rather than using broad tools like SharpHound, which can generate significant indicators, we can perform a more targeted examination.

#### Finding a Target
One effective method is to examine the established network connections on the current host. This approach avoids network scanning and helps understand the firewall configuration. Using Seatbelt, we can list existing connections, as shown in Listing 13-3.

**Listing 13-3: Enumerating Network Connections with Seatbelt**
```plaintext
====== TcpConnections ======
Local Address      Foreign Address    State  PID  Service  ProcessName
0.0.0.0:135        0.0.0.0:0          LISTEN 768  RpcSs    svchost.exe
0.0.0.0:445        0.0.0.0:0          LISTEN 4    System
0.0.0.0:3389       0.0.0.0:0          LISTEN 992  TermService  svchost.exe
0.0.0.0:49664      0.0.0.0:0          LISTEN 448  wininit.exe
0.0.0.0:49665      0.0.0.0:0          LISTEN 1012 EventLog  svchost.exe
0.0.0.0:49666      0.0.0.0:0          LISTEN 944  Schedule  svchost.exe
0.0.0.0:49669      0.0.0.0:0          LISTEN 1952 Spooler  spoolsv.exe
0.0.0.0:49670      0.0.0.0:0          LISTEN 548  Netlogon  lsass.exe
0.0.0.0:49696      0.0.0.0:0          LISTEN 548  lsass.exe
0.0.0.0:49698      0.0.0.0:0          LISTEN 1672 PolicyAgent  svchost.exe
0.0.0.0:49722      0.0.0.0:0          LISTEN 540  services.exe
10.1.10.101:139    0.0.0.0:0          LISTEN 4    System
10.1.10.101:51308  52.225.18.44:443   ESTAB  984  edge.exe
10.1.10.101:59024  34.206.39.153:80   ESTAB  984  edge.exe
10.1.10.101:51308  50.62.194.59:443   ESTAB  984  edge.exe
10.1.10.101:54892  10.1.10.5:49458    ESTAB  2544  agent.exe
10.1.10.101:65532  10.1.10.48:445     ESTAB  4    System
```

We can prune this list by removing HTTP/HTTPS and loopback connections, leaving us with a smaller set of potential targets. Notable connections include those over high ports, likely indicating RPC traffic, and a connection over TCP port 445, suggesting SMB (Server Message Block) file sharing.

#### Enumerating Shares
Assuming the connection is SMB, we need to find the name of the shared folder. Several methods are available, each with its pros and cons:

- **Using `net view` command**: Requires launching `net.exe`, which is highly scrutinized by EDRs.
- **Running `Get-SmbShare` in PowerShell**: Built-in cmdlet, but requires invoking `powershell.exe`.
- **Running `Get-WmiObject Win32_Share` in PowerShell**: Queries shares over WMI.
- **Running `SharpWMI.exe action=query query="select * from win32_share"`**: Uses a .NET assembly, allowing operation via `execute-assembly`.
- **Using `Seatbelt.exe network shares`**: Nearly identical to SharpWMI, using the `Win32_Share` WMI class.

Given our previous success with Seatbelt, we can use it again here. Running `Seatbelt.exe network shares` on `10.1.10.48` generates the output in Listing 13-4.

**Listing 13-4: Enumerating Network Shares with Seatbelt**
```plaintext
====== NetworkShares ======
Name  : FIN
Path  : C:\Shares\FIN
Description  :
Type  : Disk Drive
Name  : ENG
Path  : C:\Shares\ENG
Description  :
Type  : Disk Drive
Name  : IT
Path  : C:\Shares\IT
Description  :
Type  : Disk Drive
--snip--
[*] Completed collection in 0.121 seconds
```

This information indicates that we have administrative access to the host, allowing us to browse the `C$` share and other business unit-specific shares. The `ENG` share is particularly interesting and may contain valuable data.

#### File Exfiltration
The final step is exfiltrating the target file. Despite the high impact, this step has a relatively low likelihood of detection by the EDR. However, we should still be cautious.

There are multiple ways to exfiltrate data, depending on factors such as the file's location, content, size, and fault tolerance. For our 4MB `.stl` file, we can use the command-and-control channel over HTTPS. To protect the data, we should assume that the contents will be inspected. The file signature (magic bytes) for `.stl` files is `73 6F 6C 69 64`.

By taking these steps, we can effectively deploy and use our malicious handler, move laterally within the network, and exfiltrate the target data while minimizing the risk of detection.