        [*目标系统进行*]{.emphasis} SSH 连接，才能成功。
    2.  手动：
        ::: orderedlist
        1.  在 [*主机系统*]{.emphasis} 中构建检测模块：
            ``` screen
            # stap -r kernel_version script -m module_name -p 4
            ```
            在这里，[*kernel_version*]{.emphasis} 是指在第 1 步中
            [*确定的目标内核*]{.emphasis} 版本，[*脚本*]{.emphasis}
            引用要转换为检测 [*模块*]{.emphasis} 的脚本，而
            [*module_name*]{.emphasis} 是 [*检测模块*]{.emphasis}
            的所需名称。`p4`{.literal} 选项告知 SystemTap
            不加载并运行编译的模块。
        2.  编译 [*检测模块*]{.emphasis}
            后，将其复制到目标系统中并使用以下命令载入它：
            ``` screen
            # staprun module_name.ko
            ```
        :::
    :::
:::
:::
:::
[]{#monitoring-network-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#monitoring-network-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#monitoring-network-activity-with-systemtap_monitoring-and-managing-system-status-and-performance}第 39 章 使用 SystemTap 监控网络活动 {.title}
:::
在安装
`system tap-testsuite 软件包时，您可以使用 /usr/share/systemtap/testsuite/systemtap`{.literal}.examples/``{=html}
目录中的实用示例 SystemTap 脚本来监控和调查您的系统的网络活动。
::: section
::: titlepage
# []{#monitoring-network-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#profiling-network-activity-with-systemtap_assembly_monitoring-network-activity-with-systemtap}使用 SystemTap 分析网络活动 {.title}
:::
您可以使用 `nettop.stp`{.literal} 示例 SystemTap
脚本对网络活动进行性能分析。该脚本跟踪哪些进程正在系统上生成网络流量，并提供有关每个进程的以下信息：
::: variablelist
[PID ]{.term}
:   列出进程的 ID。
[UID ]{.term}
:   用户 ID.用户 ID 0 是指 root 用户。
[DEV ]{.term}
:   用于发送或接收数据的以太网设备（如 eth0、eth1）。
[XMIT_PK ]{.term}
:   进程传输的数据包数量。
[RECV_PK ]{.term}
:   进程收到的数据包数量。
[XMIT_KB ]{.term}
:   进程发送的数据量，以千字节为单位。
[RECV_KB ]{.term}
:   服务接收的数据量，以千字节为单位。
:::
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 `nettop.stp`{.literal} 脚本：
    ``` screen
    # stap  --example nettop.stp
    ```
    `nettop.stp`{.literal} 脚本每 5 秒提供网络配置集抽样。
    `nettop.stp`{.literal} 脚本的输出类似如下：
    ``` literallayout
    [...]
      PID   UID DEV     XMIT_PK RECV_PK XMIT_KB RECV_KB COMMAND
        0     0 eth0          0       5       0       0 swapper
    11178     0 eth0          2       0       0       0 synergyc
      PID   UID DEV     XMIT_PK RECV_PK XMIT_KB RECV_KB COMMAND
     2886     4 eth0         79       0       5       0 cups-polld
    11362     0 eth0          0      61       0       5 firefox
        0     0 eth0          3      32       0       3 swapper
     2886     4 lo            4       4       0       0 cups-polld
    11178     0 eth0          3       0       0       0 synergyc
      PID   UID DEV     XMIT_PK RECV_PK XMIT_KB RECV_KB COMMAND
        0     0 eth0          0       6       0       0 swapper
     2886     4 lo            2       2       0       0 cups-polld
    11178     0 eth0          3       0       0       0 synergyc
     3611     0 eth0          0       1       0       0 Xorg
      PID   UID DEV     XMIT_PK RECV_PK XMIT_KB RECV_KB COMMAND
        0     0 eth0          3      42       0       2 swapper
    11178     0 eth0         43       1       3       0 synergyc
    11362     0 eth0          0       7       0       0 firefox
     3897     0 eth0          0       1       0       0 multiload-apple
    ```
:::
:::
::: section
::: titlepage
# []{#monitoring-network-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#tracing-functions-called-in-network-socket-code-with-systemtap_assembly_monitoring-network-activity-with-systemtap}使用 SystemTap 跟踪网络套接字代码中调用的功能 {.title}
:::
您可以使用 `socket-trace.stp`{.literal} 示例 SystemTap 脚本跟踪内核的
net/socket.c
文件中调用的功能。这有助于您更详细地识别每个进程在内核级别与网络交互的方式。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 `socket-trace.stp`{.literal} 脚本：
    ``` screen
    # stap  --example socket-trace.stp
    ```
    `socket-trace.stp`{.literal} 脚本输出的 3 秒摘录类似如下：
    ``` literallayout
    [...]
    0 Xorg(3611): -> sock_poll
    3 Xorg(3611):  sock_poll
    3 Xorg(3611):  sock_poll
    5 gnome-terminal(11106):  sock_poll
    3 scim-bridge(3883):  sys_socketcall
    4 scim-bridge(3883):  -> sys_recv
    8 scim-bridge(3883):   -> sys_recvfrom
    12 scim-bridge(3883):-> sock_from_file
    16 scim-bridge(3883): sock_recvmsg
    24 scim-bridge(3883):
# []{#monitoring-network-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#proc_monitoring-network-packet-drops-with-systemtap_assembly_monitoring-network-activity-with-systemtap}使用 SystemTap 监控网络数据包丢弃 {.title}
:::
Linux 中的网络堆栈可能会因为各种原因丢弃数据包。些 Linux
内核包括一个追踪点
`kernel.trace("kfree_skb")'`{.literal}，跟踪数据包被丢弃的位置。
`dropwatch.stp`{.literal} SystemTap 脚本使用
`kernel.trace("kfree_skb")`{.literal} 来跟踪数据包丢弃；该脚本总结了以每
5 秒间隔丢弃数据包的位置。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 `dropwatch.stp`{.literal} 脚本：
    ``` screen
    # stap  --example dropwatch.stp
    ```
    运行 `dropwatch.stp`{.literal} 脚本 15 秒会导致输出类似如下：
    ``` screen
    Monitoring for dropped packets
    51 packets dropped at location 0xffffffff8024cd0f
    2 packets dropped at location 0xffffffff8044b472
    51 packets dropped at location 0xffffffff8024cd0f
    1 packets dropped at location 0xffffffff8044b472
    97 packets dropped at location 0xffffffff8024cd0f
    1 packets dropped at location 0xffffffff8044b472
    Stopping dropped packet monitor
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    要使数据包的位置更合理，请查看
    `/boot/System.map-$(uname -r)`{.literal}
    文件。此文件列出了每个函数的开始地址，以便您可以将
    `dropwatch.stp`{.literal}
    脚本的输出中的地址映射到特定的函数名称。鉴于
    `/boot/System.map-$(uname -r)`{.literal} 文件的以下片段，地址
    `0xffffffff8024cd0f`{.literal} 映射到函数
    `unix_stream_recvmsg`{.literal}，地址 `0xffffff8044b472`{.literal}
    映射到函数 `arp_rcv`{.literal} ：
    ``` literallayout
    [...]
    ffffffff8024c5cd T unlock_new_inode
    ffffffff8024c5da t unix_stream_sendmsg
    ffffffff8024c920 t unix_stream_recvmsg
    ffffffff8024cea1 t udp_v4_lookup_longway
    [...]
    ffffffff8044addc t arp_process
    ffffffff8044b360 t arp_rcv
    ffffffff8044b487 t parp_redo
    ffffffff8044b48c t arp_solicit
    [...]
    ```
    :::
:::
:::
:::
[]{#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance}第 40 章 使用 SystemTap 分析内核活动 {.title}
:::
以下部分展示通过监控功能调用对内核活动进行性能分析的脚本。
::: section
::: titlepage
# []{#assembly_profiling-kernel-activity-with-systemtap_monitoring-and-managing-system-status-and-performance.html#proc_counting-function-calls-with-systemtap_assembly_profiling-kernel-activity-with-systemtap}使用 SystemTap 计算函数调用 {.title}
:::
您可以使用 [**函数callcount.stp**]{.strong} SystemTap
脚本来计算特定的内核函数调用数。您还可以使用此脚本将多个内核功能作为目标。
::: itemizedlist
**先决条件**
-   您已安装了 SystemTap，如 [安装
    SystemTap](#getting-started-with-systemtap_monitoring-and-managing-system-status-and-performance.html#installing-systemtap_getting-started-with-systemtap "安装 SystemTap"){.link}
    中所述。
:::
::: itemizedlist
**流程**
-   运行 [**函数callcount.stp**]{.strong} 脚本：
    ``` screen
    # stap --example functioncallcount.stp 'argument'
    ```
    此脚本将目标内核函数取为参数。您可以使用参数通配符来将多个内核函数作为目标，直到达到一定程度。
    脚本的输出（按字母顺序排列）包含函数的名称以及在示例时间调用的次数。
    考虑以下示例：
    ``` screen
    # stap -w -v --example functioncallcount.stp "*@mm*.c" -c /bin/true
    ```
    其中：
-   -w：压缩警告.
-   -v：使启动内核的输出可见。
-   -c [*命令*]{.emphasis} ：在执行命令期间 Tells SystemTap
    以计算执行命令期间的功能调用，在本例中为 `/bin/true`{.literal}。
    输出应类似于如下：
    ``` screen
    [...]
    __vma_link 97
    __vma_link_file 66
    __vma_link_list 97
    __vma_link_rb 97
    __xchg 103
    add_page_to_active_list 102
    add_page_to_inactive_list 19
    add_to_page_cache 19
    add_to_page_cache_lru 7
    all_vm_events 6
    alloc_pages_node 4630
    alloc_slabmgmt 67
    anon_vma_alloc 62
    anon_vma_free 62
    anon_vma_lock 66