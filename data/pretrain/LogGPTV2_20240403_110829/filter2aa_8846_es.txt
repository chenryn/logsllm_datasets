•内聚 Cohesion：内聚描述了在同一个类中的方法的目的的关系强度，说明某模块可以独
立执行多个少不同的任务。高内聚：可独立执行某个任务，而不影响其它模块。（就干一件事）
•藕合 Coupling：藕合是对象之间相互作用的水平，低藕合意味着较少的相互作用。较低
的藕合提供了更好的软件设计，因为对象更独立。较低的藕合是更容易解决和更新。具有低内
聚的对象为了执行任务需要其他对象的大量的帮助，并且具有高藕合。（谁都别插手）
•延迟承诺/递延承诺 deferred commitment：对象的内部组件改进不需要改变系统的其它
部分。
4.失效安全和失效开放 Fail-secure and fail-open
应用程序故障时，其代码应被设计成能有效应对一般意义上的失败，有两个基本选择：
①失效安全状态：置系统于一个高安全级别(甚至完全关闭禁用它)直到管理员可以诊断问
题和恢复系统正常运行。（微软的蓝屏）
②失效开放状态：允许用户绕过失败的安全控制，忽略错误的发生。
在第七域 K.2 章节也已经讲过了，受信恢复：恢复程序确保系统在发生故障或崩溃之后，
能够还原到之前的状态。
系统可以被预置，使其在损坏时能够处于故障防护状态 fail secure system 或者应急开
放状态 fail open system/fail safe system。故障防护状态的系统会在故障发生时保持在防
护状态，并禁止所有访问；而应急开放状态在发生故障前保持在开放的状态，并允许所有访问。
举个栗子就是，一扇自动门如果停电了，是保持关闭还是开放呢？这个取决于系统的业务运行
—226—
重要还是安全更重要。
在状态机模型中（大多数操作系统中），要实现故障防护（失效安全）。
二、数据库和数据仓库 Databases and Data Warehousing
第三域 E.3 章节就是数据库安全
1.数据库管理系统体系结构
尽管目前存在多种可用的数据库管理系统(DBMS)，最多的是关系数据库管理系统(RDBMS)，
此外，也有层次式的和分布式的。
①层次型数据模型 Hierarchical data model
这是最早的数据库模型，将关联的记录和字段组合为一个逻辑树结构（就是存储了一堆离
散的数据，每个数据有关于父节点和子节点的信息，这样就成了一个树，像 DNS 服务）。一个
父节点有0到N个子节点，类似于组织结构图。数据是以一种树型结构组织的，树由分支(branch)
或者节点(node)构成。可以认为分支就是数据记录，而分支上的叶子就是数据。层次数据库模
型以一种按等级存储数据的方式，对于适合这种模型的特定应用，如生物学是非常有用的。
层次模型的一个缺点是它只能处理单树，不能在树枝或跨多层链接。
最常用的层次模型实现为轻量级目录访问协议(LDAP)模型。
②分布式数据模型 distributed data model
将数据存储在多个数据库中，逻辑上是互联的，形如整体，数据映射关系是多对多。
③关系数据库 Relational Databases
关系数据库是由行和列组成的平面二维表。行和列结构提供了一对一数据映射关系。关系
型数据库的主要构件是表(也被称为关系)。每个表都包含一组相关的记录。
④网络模型 Network database Model
数据以块或记录类型来表述。块包含数据域，块与块间的行可以表述数据之间的关系。与
层次模型的区别是，数据元素可以拥有多个父节点。
⑤面向对象模型 Object-Oriented Model
将面向对象编程中的对象数据模型与 DBMS 结合在一起，可存储图像、语音、视频等数据，
也称为 object-oriented databases(OODBs)。面向对象的数据库使用类来定义其对象的属性
和过程，比关系数据库更具有动态性，因为面向对象的数据库在需要时才创建对象，数据和过
程(调用方法)在对象被请求时运行。在关系数据库中，应用程序必须使用自己的过程从数据库
获得数据，然后根据自己的需求处理这些数据。
⑥对象-关系数据库 object-relational database management system ORDBMS
是一种关系数据库，也是 OODBs 的一个分支。使用面向对象语言编写软件前端，组合了关
系数据库和面向对象的编程的能力，方便了代码重用和故障处理分析，并减少了整体维护工作
量，更适合支持涉及多媒体、CAD、视频、图形和专家系统的复杂应用程序。数据被看作是对
象，对象包括数据项的集合，以及可执行操作的集合。该模型并不需要一个高级语言（函数已
经包含在对象中），用户交互更直接简单。关系模型也相应开始增加面向对象的函数和接口，
从而建立一个“对象—关系”模型。
⑦数据仓库 Data warehousing
数据仓库指的是为了信息检索和数据分析，将多个异构的数据库或数据源集成为一个大的
—227—
数据库，并提供更多扩展的信息检索和分析的功能，可用于支持决策，数据挖掘，大数据运算。
集成的数据一般会分类和聚类，并不做修改，就是只用不改。
数据仓库由数据集市(date mart)构成，数据集市由数据库(data base)构成。
⑧元数据 matadata
“关于数据的数据”被称作元数据(metadata)，描述了数据的结构和相互关系，通常并不
存储在数据仓库 warehouse 中，而是存在具有更高保护级的数据超市/集市(data mart)中，data
mart 可以被看作是建在部门一级的小型的数据仓库。
⑨终端用户数据库 End-User
就是 Dbase、Access 等文件型数据库。
2.表的结构
表就是关系。所有的数据值都是原子的（不能再细分）。
①纵向：列(column)、属性(attributes)、字段(field)，其数量称为度/阶次(degree)；
②横向：行(row)、记录(record,)、元组(tuple)，其数量称为基数/行数(cardinality)。
记录可以使用多种“键”来进行标识。键是表中字段的子集，是可以唯一标识某个记录的
那个字段。搞清三种键：
①候选键 Candidate Keys。
可以用于唯一标识表中记录的属性子集。姓名、学号、身份证号什么的都是候选键。
②主键 Primary Keys。
候选键中选出的用来唯一标识表中记录的键被称为主键。每个表都要选一个唯一的最有代
表性的主键。（主键不为空、主键唯一）
③外键 Foreign Keys。
外键被用于在两个表中建立关系(也称做参照完整性/引用完整性)。如果一个表包含一个
“键”，它是另一个表的主键，那么这个“键”就是这个表的外键。（也就是外部链接）
关系模型有两个完整性规则：实体完整性和引用完整性，重点是主键和外键，这些规则源
于 Clark 和 Wilson 完整性模型。
①实体完整性 Entity integrity 要求元组有一个唯一且非空的主键。
②引用完整性 referential integrity 要求外键在被引用表中必须存在该值主键的元组。
其实还有一个语义完整性 semantic integrity，要求符合数据结构和语言规则。在后面
又把这 3 个完整性讲了一遍。
如果非主键的属性是空值，这在语言上对数据库来说是个问题，但它不是完整性问题。
3.结构化查询语言 Structured Query Language (SQL)
所有关系数据库都使用一种标准语言，即结构化查询语言(SQL)，为用户存储、检索和更
改数据以及管理控制 DBMS 提供了一致的接口。不同供应商的 SQL 版本略有不同，但是都支持
一个核心特性集。
有几个概念：
①模式 Schemas：描述数据库的结构，包括所有用户的访问控制权限。
②表 Tables：数据的行和列。
③视图 Views：定义为用户可查看表中的部分信息。视图为每个用户动态的创建，并提供
—228—
访问控制的粒度。
有几种子语言：
①数据定义语言(DDL)，允许创建和更改数据库的结构(即模式)。用户很少用到。
②数据库操作语言(DML)，允许用户与数据交互，增、查、改、删。
③查询语言(QL)，用户可以对数据库提出查询请求，通过报表生成器(Report generator)
输出数据。
④数据控制语言(DCL），用于控制对数据的访问，提供了对 SQL 的安全管理，要重点关注。
常用 DCL 命令有：提交、快照、回滚、设置事务等。
报表生成器：以用户定义的方式生成数据打印输出。
4.数据库范式化 Database Normalization（标准化、规范化）
使数据库表遵从标准、规范的形式的过程称为范式化。最常见的三种形式是
①第一范式化形式(lNF)。
②第二范式化形式(2NF)。
③第三范式化形式(3NF)。
第三是最好的。这三种形式都满足以下需求：减少表中的冗余，消除错误放置的数据，执
行其他许多内部处理任务。
5. ACID 模型
数据库的事务管理是重要的一项工作，不然数据会乱套了。任何一项数据库事务都必须具
有四个特征：原子性，一致性，隔离性，以及持久性。这些属性合称为 ACID 模型。也是锁控
制机制要实现的目标。
①原子性 Atomicity
数据库事务必须是原子的，也就是说必须是“要么全有，要么全无”。如果事务的任何部
分失败，那么整个事务都要被回滚，就像什么也没发生一样。
②一致性 Consistency
一方面是数据的更改要与规则一致：所有事务都必须符合和遵守数据库的完整性规则等所
有规则(例如所有记录都具有一个唯一的主键)；某个事务执行期间可能临时产生的任何不一致
的数据是不允许被其它事务或应用使用的。另一方面是不同数据库里的数据要一致。
③隔离性 Isolation
隔离性原则要求事务彼此之间独立操作。如果数据库接收到两个更改相同数据的 SQL 事
务，那么在一个事务被允许更改相同数据之前，另一个事务必须完全结束。
④持久性/稳定性 Durability
数据库事务必须是持久的，也就是说一旦被提交给数据库，就会被保留下来。数据库通过
使用备份机制(例如事务日志)确保持久性。
6.数据库完整性
数据库管理系统 DBMS 最关注的是完整性，其次是可用性，最后是保密性。数据要保证实
现 3 种类型的完整性：
①语义完整性(Semantic integrity)：严格遵循结构化规则和语义规则，也就是数据类型、
逻辑值、唯一性约束等等操作什么的都要符合规则。
—229—
②引用完整性/参考完整性(Referential integrity)：外键必须在被引用的表中存在一个
相同值的主键。任何记录（外键）都不能引用一个不存在记录或空值(null value)的主键；如
果一个包含有主键的记录被删除了，被引用的记录也都必须删除掉。
③实体完整性(Entity integrity)：保证了数据实例(tuples)由主键值唯一确定，元组必
须有一个唯一的、非空的主键。
实现完整性可以通过以下操作：
①回滚(rollback)：终止当前事务并取消对数据库的更改，数据库恢复至先前状态。
②提交(commit)：终止当前事务处理并执行用户的修改，如果更改不成功则回滚。
③检查点/保存点(Check point/Save point)：相当于虚拟机里的快照，是系统失效或检
测到错误时，用户可以返回的位置，即系统破坏前的某个点。保存点太多会降低 DB 性能，太
少则增加丢失数据的风险。
④两阶段提交(two-phase commit )：一个事务需要对多个数据库进行操作时，必须确保
所有数据库要么同时都改了，要么都不改，绝不出现数据库没有同步修改的情况。所以要分 2
步走：先提交修改，各数据库临时修改、临时存储结果；然后交易监视器发送“预处理”命令；
最后如果各数据库都响应了命令，监视器就发送“提交”命令，让和数据库真正存储修改后的
数据，否则就发送“回滚”命令。
⑤shadow 恢复是在之前版本的数据库上重新执行事务，要求使用事务日志来识别最后一
次正确的事务。
⑥交易（事务）处理 Transaction processes：用户与数据库间是同时并发多个交互的。
⑦批处理 Batch processing：多处操作按顺序绑定，一次一起执行完。
7.数据库安全
数据库的威胁：（第三域的 E.3 章节详细描述了防范方法）
①聚合 aggregation
组合从不同源获取的非敏感数据生成敏感数据的能力。
②推理 inference
观察可获取的信息推测（推断）出敏感或受限信息的能力。
③旁路攻击
用户试图绕过数据训应用的前端控制访问数据。
④并发
并发相关的问题包括使用旧数据执行过程，不一致的更新，或发生死锁。
⑤死锁
当两个用户同时访问信息而且都被拒绝时就发生死锁。
⑥攻击数据库视图以非法访问
用户可能试图受限视图或修改一个已经存在的视图；在数据库接口设计中经常使用的分层
模型提供了一个相同数据的多条路径，不是所有的路径都受到保护。
⑦拒绝服务
任务类型的可以阻止授权用户共聚信息的攻击或行动。
⑧不当信息修改
—230—
未授权或授权用户可能故意或无意的错误地修改信息。