Second, HILTI’s abstractions enable transparent integration of
non-standard hardware capabilities. Traditionally, integrating cus-
tom hardware elements (e.g., FPGA pattern matchers, dedicated
lookup modules, fast packet classiﬁcation) into a networking appli-
cation requires signiﬁcant effort to manually adapt the code. HILTI,
however, can switch to a different code path as suitable, either at
compile-time or dynamically during execution, without changing
the interface to the host application. For example, preliminary sim-
ulations show that HILTI’s hash tables map well to PLUG [13].
Third, HILTI’s execution model facilities compiler-level code
optimization by providing context for control and dataﬂow anal-
yses [27]. For example, state management can beneﬁt from group-
ing memory operations for improved cache locality, according to
access patterns that the HILTI representation suggests (e.g., con-
tainers could structure memory operations with element expira-
tion times in mind). Also, optimizations can help remove over-
head coming with HILTI’s runtime model, such as skipping un-
necessary exception checks, moving bounds-checking from run-
time to compile time where statically safe, and optimizing memory
management and garbage collection (e.g., BinPAC++-style parsers
could often move intermediary heap objects to less expensive stack
storage). Another powerful technique concerns elimination of un-
needed code at link-time, as in the Bro example we sketch above:
the HILTI linker can remove any code (as well as state) that it can
statically determine as unreachable with the host application’s pa-
rameterization.
Fourth, HILTI has sufﬁcient context available to automatically
infer suitable parallelization strategies for many networking appli-
cations. By analyzing data ﬂows, potentially augmented with feed-
back from runtime proﬁling, it can leverage the typical unit-based
structure of network analysis tasks for scheduling them scalably
across CPUs; see below.
Global State. By design, HILTI does not provide truly global
state that concurrent threads can access directly—a choice that en-
ables safety guarantees and optimizations we deem worth the re-
striction. As a substitute, host applications can generally deploy
message passing for communication between threads, and poten-
tially designate a single “master” thread for managing state that
requires global visibility across the entire system.
In practice, however, we expect the need for global state to re-
main rare in HILTI’s target domain, as typical analyses tend to
structure their logic around inherent units of analysis—such as con-
nections, or IP addresses—with little need for correlation across
independent instances. As a simple example, consider a scan de-
tector that counts connection attempts per source address. As each
individual counter depends solely on the activity of the associ-
ated source, one can parallelize the detector by ensuring, through
scheduling, that the same thread carries out all counter operations
associated with a particular address. That thread can then keep a
local variable to record the current value. We envision such scoped
scheduling to become HILTI’s primary concurrency model, and we
refer to [14] for more exploration of this topic.
Porting Legacy Applications. We consider HILTI primarily a
platform for implementing novel host applications, for which it sig-
niﬁcantly reduces the barrier for developing an efﬁcient and robust
system. However, legacy applications can beneﬁt from HILTI as
well, as long as the porting effort remains tenable. Generally, we
expect that existing systems will prove most amenable to leverag-
ing HILTI if they already represent their analyses in a structured,
customizable way. Indeed, all four of our example applications fall
into this category: they express their functionality in terms of ex-
pressions, rules, grammars, and scripts, respectively. Traditionally,
such applications compile their inputs into custom internal rep-
resentations before beginning their processing—a step that could
now target HILTI instead. We deem HILTI less promising, how-
ever, for porting efforts that involve signiﬁcant hard-coded, low-
level logic, such as a manually written TCP stream reassembler.
While HILTI can certainly express such functionality—indeed, we
envision eventually providing this particular example in the form
of a HILTI library—it remains unclear if porting such code would
provide signiﬁcant beneﬁt, as to a large degree it simply reﬂects
translating code from one language into another.
8. RELATED WORK
By their very nature, existing abstract machine implementations
focus on speciﬁcs of their respective target domains, and to our
knowledge none ﬁts well to the requirements of ﬂexible, high-
performance network trafﬁc analysis. This includes machine mod-
els underlying typical programming languages (e.g., JVM, Par-
471rot VM, Lua VM, Erlang’s BEAM/HiPE [39]). Despite raising
the level of abstraction, these machines do not offer high-level
primitives to efﬁciently express problems of the domain. Conse-
quently, we leverage an existing low-level abstract machine frame-
work, LLVM, in our implementation.
In the networking domain, we ﬁnd a range of efforts that share
aspects with our approach, yet none provides a similarly compre-
hensive platform for supporting a wide range of applications. Many
could however beneﬁt from using HILTI internally. For example,
the C library libnids [1] implements basic building blocks com-
monly used by NIDS, paying particular attention to a design ro-
bust when facing adversaries and evasion [24]. We envision such
libraries to eventually use HILTI for their implementation. Do-
ing so would relieve them from low-level details (e.g., libnids is
not thread-safe and has no IPv6 support), and also beneﬁt from a
tighter semantic link between host applications and library. Net-
Shield [31] aims to overcome the fundamentally limited expres-
siveness of regular expressions by building a custom NIDS engine
on top of BinPAC to match more general vulnerability signatures.
However, implementing the low-level parts of the engine accounts
for a signiﬁcant share of the effort. Using HILTI primitives would
be less time-consuming and also enable other applications to share
the developed functionality. The Click modular router [28] allows
users to compose a software router from elements that encapsulate
predeﬁned primitives, such as IP header extractors, queues, and
packet schedulers. Rather than mapping the custom conﬁguration
language to the underlying C++ engine, Click conﬁgurations could
alternatively compile into HILTI. RouteBricks [18] is a multi-Gbps
distributed software router which uses techniques akin to HILTI’s
concurrency model: per-core packet queues enable a lock-free pro-
gramming scheme with good cache performance. HILTI can easily
express such per-ﬂow analysis (within a single system) by rout-
ing related analysis to the same thread, and its threading model
allows for other scheduling strategies as well. NetPDL [40] is
an XML-based language to describe the structure of packet head-
ers.
It decouples protocol parsing code from protocol speciﬁcs.
The language supports ﬁxed and variable-length protocol ﬁelds as
well as repeated and optional ones. While NetPDL takes a con-
ceptually different approach than BinPAC, it uses similar build-
ing blocks and would nicely map to HILTI. Xplico [7] is a net-
work forensic tool written in C that ships with protocol analyz-
ers and manipulators.The HTTP analyzer, for example, reassem-
bles HTTP payload by writing the packet contents into per-ﬂow
ﬁles on disk, which higher-level analyzers (such as webchat) then
re-read for further analysis. HILTI’s incremental and suspend-
able stream parsing makes it easier to implement such function-
ality efﬁciently. Software-deﬁned networking (SDN) separates a
network’s device control and data planes, allowing operators to
program routers and switches; OpenFlow [33] provides a vendor-
agnostic interface to such functionality, and a number of higher-
level languages [21, 29, 19, 34] use it to control compatible hard-
ware devices. By adding an OpenFlow interface to HILTI, it could
become a corresponding backend to drive the software component
of such systems and dynamically control network policies based
on trafﬁc analysis. NetVM [35] compiles Snort rules into a cus-
tom intermediary representation, and from there just-in-time into
native code. It routes packets through a graph of connected net-
work elements, each of which features a stack-based processor,
private registers, and a memory hierarchy. NetVM’s functionality
has a lower-level focus than HILTI because it primarily attempts
to achieve portability of signature matching. Contrary to the VM
isolation model of NetVM, HILTI’s compilation into LLVM code
enables late and global optimizations, whereas it appears difﬁcult
to optimize across NetVM elements. Similar to our example in §4,
Linux has added support for JIT compiling BPF expressions into
native assembly [11]. FreeBSD 7 also includes experimental BPF
JIT support. Finally, there is a large body of work on accelerating
parts of the network trafﬁc analysis pipeline with custom hardware
elements, targeting for example pattern matching (e.g., [42, 20]),
parallelization on GPUs (e.g., [45, 9, 23]), robust TCP stream re-
assembly [15], and high-speed lookup tables such as PLUG [13].
HILTI’s design allows to transparently ofﬂoad speciﬁc computa-
tions to such specialized hardware when available.
9. CONCLUSION
We present the design and implementation of HILTI, a plat-
form for deep, stateful network trafﬁc analysis. HILTI represents a
middle-layer located between a host application and the hardware
platform that executes the analysis. We argue that while networking
applications tend to share a large set of common functionality, they
typically reimplement it from scratch each time, raising the possi-
bility of falling into pitfalls that others have previously mastered.
HILTI bridges that gap by providing a common substrate to appli-
cations to support their implementation while facilitating reuse of
high-level components built on top of the platform. We developed
a prototype compiler that implements all of HILTI’s functionality,
including rich domain-speciﬁc data types, automatic memory man-
agement, ﬂexible control ﬂow, concurrent execution, proﬁling and
debugging support, and an extensive API for host applications. We
further built four example applications on top of HILTI that demon-
strate its ability to support a range of typical network analyses. We
plan to advance HILTI further into a platform suitable for opera-
tional deployment in large-scale network environments by exploit-
ing its full performance potential through transparent optimization
and integration of non-standard hardware elements. We also envi-
sion HILTI to become a platform for networking research by facil-
itating rapid prototyping of novel network functionality.
Acknowledgments
This work was supported by the US National Science Foundation
under grants CNS-0831535, CNS-0915667, CNS-1228792, and
CNS-1228782. Any opinions, ﬁndings, and conclusions or recom-
mendations expressed in this material are those of the authors or
originators, and do not necessarily reﬂect the views of the National
Science Foundation.
10. REFERENCES
[1] libnids. http://libnids.sourceforge.net.
[2] libtask. http://swtch.com/libtask.
[3] Objective-C Automatic Reference Counting (ARC).
http://clang.llvm.org/docs/
AutomaticReferenceCounting.html.
[4] re2c. http://re2c.org.
[5] Suricata source code - src/flow-hash.c.
https://github.com/inliniac/suricata/
blob/master/src/flow-hash.c.
[6] Web site and source code for HILTI and BinPAC++.
http://www.icir.org/hilti.
[7] Xplico. http://www.xplico.org.
[8] B. Anderson. Abandoning Segmented Stacks in Rust.
https://mail.mozilla.org/pipermail/
rust-dev/2013-November/006314.html.
472[9] M. B. Anwer, M. Motiwala, M. b. Tariq, and N. Feamster.
SwitchBlade: A Platform for Rapid Deployment of Network
Protocols on Programmable Hardware. In Proc. ACM
SIGCOMM, 2010.
[10] A. W. Appel. Compiling with Continuations. Cambridge
University Press, 1992.
[11] J. Corbet. A JIT for packet ﬁlters.
http://lwn.net/Articles/437981/.
[12] S. Das. Segmented Stacks in LLVM.
http://www.google-melange.com/gsoc/
project/google/gsoc2011/sanjoyd/13001.
[13] L. De Carli, Y. Pan, A. Kumar, C. Estan, and
K. Sankaralingam. PLUG: Flexible Lookup Modules for
Rapid Deployment of New Protocols in High-Speed Routers.
ACM SIGCOMM Computer Communication Review,
39:207–218, 2009.
[14] L. De Carli, R. Sommer, and S. Jha. Beyond Pattern
Matching: A Concurrency Model for Stateful Deep Packet
Inspection. In Proc. ACM Computer and Communications
Security (CCS), 2014.
[15] S. Dharmapurikar and V. Paxson. Robust TCP Stream
Reassembly in the Presence of Adversaries. In USENIX
Security, 2005.
[16] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer.
Operational Experiences with High-Volume Network
Intrusion Detection. In Proc. ACM Computer and
Communications Security (CCS), Oct. 2004.
[17] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer.
Predicting the Resource Consumption of Network Intrusion
Detection Systems. In Proc. Recent Advances in Intrusion
Detection (RAID), 2008.
[18] K. Fall, G. Iannaccone, M. Manesh, S. Ratnasamy,
K. Argyraki, M. Dobrescu, and N. Egi. RouteBricks:
Enabling General Purpose Network Infrastructure. SIGOPS
Operating Systems Review, 45:112–125, February 2011.
[19] N. Foster et al. Frenetic: A High-Level Language for
OpenFlow Networks. In Proc. PRESTO, 2010.
[20] R. Franklin, D. Carver, and B. Hutchings. Assisting Network
Intrusion Detection with Reconﬁgurable Hardware. In Proc.
FCCM, 2002.
[21] N. Gude, T. Koponen, J. Pettit, B. Pfaff, M. Casado,
N. McKeown, and S. Shenker. NOX: Towards an Operating
System for Networks. ACM SIGCOMM Computer
Communication Review, 38:105–110, 2008.
[22] P. Gupta and N. McKeown. Algorithms for Packet
Classiﬁcation.
http://yuba.stanford.edu/~nickm/papers/
classification_tutorial_01.pdf, 2001.
[23] S. Han, K. Jang, K. Park, and S. Moon. PacketShader: A
GPU-accelerated Software Router. In Proc. ACM
SIGCOMM, 2010.
[24] M. Handley, C. Kreibich, and V. Paxson. Network Intrusion
Detection: Evasion, Trafﬁc Normalization, and End-to-End
Protocol Semantics. In Proc. USENIX Security, 2001.
[25] S. Ioannidis, K. Anagnostakis, J. Ioannidis, and
A. Keromytis. xPF: Packet Filtering for Lowcost Network
Monitoring. In Proc. IEEE HPSR, pages 121–126, 2002.
[26] R. Jones, A. Hosking, and E. Moss. The Garbage Collection
Handbook: The Art of Automatic Memory Management.
Cambridge University Press, 2011.
[27] K. Kennedy and J. R. Allen. Optimizing Compilers for
Modern Architectures. Morgan Kaufmann, 2002.
[28] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F.
Kaashoek. The Click Modular Router. ACM Transactions on
Computer Systems, 18:263–297, August 2000.
[29] T. Koponen et al. Onix: A Distributed Control Platform for
Large-Scale Production Networks. In USENIX OSDI, 2010.
[30] C. Lattner and V. Adve. LLVM: A Compilation Framework
for Lifelong Program Analysis & Transformation. In Proc.
Symposium on Code Generation and Optimization, 2004.
[31] Z. Li et al. NetShield: Massive Semantics-Based
Vulnerability Signature Matching for High-Speed Networks.
In Proc. ACM SIGCOMM, 2010.
[32] S. McCanne and V. Jacobson. The BSD Packet Filter: A
New Architecture for User-level Packet Capture. In Proc.
USENIX Winter 1993 Conference.
[33] N. McKeown et al. OpenFlow: Enabling Innovation in
Campus Networks. ACM SIGCOMM Computer
Communication Review, 38:69–74, 2008.
[34] C. Monsanto, N. Foster, R. Harrison, and D. Walker. A
Compiler and Run-time System for Network Programming
Languages. In Proc. POPL, 2012.
[35] O. Morandi, G. Moscardi, and F. Risso. An Intrusion
Detection Sensor for the NetVM Virtual Processor. In Proc.
ICOIN, 2009.
[36] R. Pang, V. Paxson, R. Sommer, and L. Peterson. binpac: A
yacc for Writing Application Protocol Parsers. In Proc. ACM
Internet Measurement Conference (IMC), 2006.
[37] V. Paxson. Bro: A System for Detecting Network Intruders
in Real-Time. Computer Networks, 31(23–24), 1999.
[38] V. Paxson, K. Asanovic, S. Dharmapurikar, J. Lockwood,
R. Pang, R. Sommer, and N. Weaver. Rethinking Hardware
Support for Network Analysis and Intrusion Prevention. In
Proc. USENIX Hot Security Workshop, August 2006.
[39] M. Pettersson, K. Sagonas, and E. Johansson. The HiPE/x86
Erlang Compiler: System Description and Performance
Evaluation. In Proc. FLOPS, 2002.
[40] F. Risso and M. Baldi. NetPDL: An Extensible XML-based
Language for Packet Header Description. Computer
Networks, 50:688–706, April 2006.
[41] N. Schear, D. Albrecht, and N. Borisov. High-Speed
Matching of Vulnerability Signatures. In Proc. Recent
Advances in Intrusion Detection (RAID), 2008.
[42] R. Sidhu and V. K. Prasanna. Fast Regular Expression
Matching using FPGAs. In Proc. IEEE FCCM, Apr. 2001.
[43] R. Sommer, V. Paxson, and N. Weaver. An Architecture for
Exploiting Multi-Core Processors to Parallelize Network
Intrusion Prevention. Concurrency and Computation:
Practice and Experience, 21(10):1255–1279, 2009.
[44] M. Vallentin, R. Sommer, J. Lee, C. Leres, V. Paxson, and
B. Tierney. The NIDS Cluster: Scalable, Stateful Network
Intrusion Detection on Commodity Hardware. In Proc.
Recent Advances in Intrusion Detection (RAID), 2007.
[45] G. Vasiliadis, S. Antonatos, M. Polychronakis, E. P.
Markatos, and S. Ioannidis. Gnort: High Performance
Network Intrusion Detection Using Graphics Processors. In
Proc. Recent Advances in Intrusion Detection (RAID), 2008.
[46] D. Zaparanuks, M. Jovic, and M. Hauswirth. Accuracy of
Performance Counter Measurements. In IEEE ISPASS, 2009.
473