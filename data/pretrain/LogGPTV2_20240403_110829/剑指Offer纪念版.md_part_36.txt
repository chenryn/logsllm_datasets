可以看出，这种思路的分析过程尽管非常复杂，但写出的代码却非常简洁，
for
这个公式无论用递归还是用循环，都很容易实现。下面是一段基于循
由于映射之后的序列和最初的序列具有同样的形式，即都是从〇开始
我们把映射定义为p，则p(x)=(x-k-1)%n。它表示如果映射前的数字是
个
个
个
个
(int
int
n-2
n-k
n-k-1
n-k-2
2;iSum(n);
Array[1]=&b;
Array[0]
Aa;
Sum_Solution2(int n)
这种思路是用虚函数来实现函数的选择。当n不为零时，调用函数
return value;
B
virtual unsigned int Sum (unsigned int n)
virtual unsigned int Sum (unsigned int n)
，值为false（0）的时候调用第二个函数。那现在的问题是如何把数值
当n等于0时，调用函数A:Sum。
return Array[!!n]->Sum(n-1) +n;
return 0;
=&a;
第6章面试中的各项能力235
---
## Page 250
236
剑指Offer-
且编译器对递归编译代码的递归深度是有限制的，也就是要求n不能太大。
在编译期间就能确定的常量，不能动态输入，这是该方法最大的缺点。而
到此结束。由于这个过程是在编译过程中完成的，因此要求输入 n 必须是
参数为1的类型，由于该类型已经显式定义，编译器无须生成，递归编译
的代码。但以100为参数的类型需要得到以99为参数的类型，因为Sum
_Solution4时，就会为模板类Sum_Solution4以参数100生成该类型
Cemplate<>structSum_Solution4
template  struct Sum_Solution4
解法四：利用模板类型求解
unsigned int Sum_Solution3(unsigned int n)
enumValue{N=1};
enum Value (N=Sum_Solution4::N+n};
本题考点：
本题完整的源代码详见46_Accumulate项目。
Sum_Solution4:N就是1+2+…+100的结果。当编译器看到Sum
另外我们还可以让编译器帮助完成类似于递归的计算。比如如下代码：
static fun f[2] = {Solution3_Teminator, Sum_Solution3};
测试用例：
源代码：
考查发散思维能力。当习以为常的方法被限制使用的时候，应聘者
边界值测试(输入0和1)。
功能测试（输入5、10求1+2+·+5和1+2+…+10）。
一名企面试官精讲典型编程题（纪念版）
1)：
---
## Page 251
加0、0加1、1加0而言，都不会产生进位，只有1加1时，会向前产生一
的结果是0，而0和1、1和0的异或结果是1。接着考虑第二步进位，对0
我们注意到，这和异或的结果是一样的。对异或而言，0和0、1和1异或
对每一位相加。0加0、1加1的结果都0，0加1、1加0的结果都是1。
制正好是22。由此可见三步走的策略对二进制也是适用的。
制的10；第三步把前两步的结果相加，得到的结果是10110，转换成十进
记下进位。在这个例子中只在最后一位相加时产生一个进位，结果是二进
相加的结果是二进制的10。这一步不计进位，因此结果仍然是0)；第二步
第一步各位相加但不计进位，得到的结果是10100（最后一位两个数都是1
适用。
制的，我们就以二进制再来分析一下前面的三步走策略对二进制是不是也
字做运算，除了四则运算之外，也就只剩下位运算了。位运算是针对二进
第三步把前面两个结果加起来，12+10的结果是22，刚好5+17=22。
数0和1相加结果是1)；第二步做进位，5+7中有进位，进位的值是10；
加不进位，此时相加的结果是12（个位数5和7相加不要进位是2，十位
5+17=22这个结果的。实际上，我们可以分成三步进行：第一步只做各位相
性。首先我们可以分析人们是如何做十进制的加法的，比如是如何得出
能用什么啊？可是问题总是要解决的，我们只能打开思路去思考各种可能
面试题47：不用加减乘除做加法
接下来我们试着把二进制的加法用位运算来替代。第一步不考虑进位
5的二进制是101，17的二进制是10001。还是试着把计算分成三步：
我们一直在想，求两数之和四则运算都不能用，那还能用什么？对数
面试的时候被问到这个问题，很多人在想：四则运算都不能用，那还
X、四则运算符号。
题目：写一个函数，求两个整数之和，要求在函数体内不得使用十、
积薄发的过程。
有深刻理解了相关的概念，才能在需要的时候信手来。这就是厚
静态变量、虚拟函数、函数指针、模板类型的实例化等知识点。只
考查知识面的广度和深度。上面提供的几种解法，涉及构造函数
键所在。
是否能发挥创造力，打开思路想出新的办法，是能否通过面试的关
第6章面试中的各项能力237
---
## Page 252
238剑指Offer
望交换它们的值。有两种不同的办法：
实现的参考代码：
不产生进位为止。
把前两个步骤的结果相加。第三步相加的过程依然是重复前面两步，直到
位。只有两个数都是1的时候，位与得到的结果是1，其余都是0。第三步
个进位。此时我们可以想象成是两个数先做位与运算，然后再向左移动一