in Pi  as mutually independent Bernoulli  variables, with n; 
the  sum  of  these  0’s and  1’s.  According  to  the  Chernoff 
bound  [ 5 ] ,  we have, for all 6, 0  6n/2 
will  be very  high but  small enough to substantially restrict 
the  6 n / 2  size  of  the  range  that  the  ni  can  appear  in).  If 
yes, we keep these  Pi’s and  burn  them  into the device.  If 
no,  we  throw  away  all  of  these  Pi’s and  generate  a  new 
set  of  P1,P:!;..,Pn1.  This  process  will  continue  until 
Ini -n/21    1/2127) is  less  than  that  of  the  strong  keys  (that  is, 
keys with  Q  5  l/2127). As  we  further restrict  the ranges 
for 7 ~ i  and 1, the results improve and (Y will be getting closer 
to 1/2n-’. 
Similarly, for m  =  5  case,  we  are  given  5  Pi’s with 
nl , n2, 123, n4  and 125  1’s respectively and we need to cal- 
culate the probability that  the resulting K  has l  l’s and we 
have 
where Zl ranges from In1 - n 2 l  to max(n1 + n 2 ,  n )  step 2. 
Using the argument from Subsection 6.2, we can choose 
the  range  for  the  ni’s  and  then  calculate  the  probabil- 
ity  for  different  1  1’s in  the  resulting  K.  Once  we  find 
q(n, n l , .  . . , n,, 
l ) ,  then the probability for each individual 
key with 1 1’s is given by 
If  a,,,,  ,...,, zm,i’s do  not  differ  significantly,  then  the  at- 
tacker will  need to almost exhaustively search  all the pos- 
sible keys,  as  no one key  will  appear with  a  significantly 
higher probability. 
A  program  has  been  written  to calculate  the  values  of 
q(n, n l , .  . . , n,,,  l)/Cy, for m  = 3 and the result is  sum- 
marised  in  Table  1.  We  showed  in  property  3  (of  Sec- 
tion  5.3) that  our  protection  scheme  will  give  a  total  of 
2n-1  possible  bit  patterns for a n-bit  K.  If  all  these  pos- 
sible bit patterns are uniformly distributed, the attacker will 
only  have a chance of  1/2127 of  guessing  the  key  K  cor- 
rectly.  Table  1 shows that if the values of ni’s are restricted 
to  a  range from 32 to 96 (which corresponds  to  the Cher- 
noff bound range given by taking 6 = 0.5), the weakest key 
where  11  takes  the  values  of  the  possible  number  of  1’s 
in  the  word  P1  @  P2  @  P3.  Thus,  we  can  calculate 
in  a number of ways.  If we cal- 
q ( n r n l r n 2 , n 3 , n q , n 5 , ~ )  
culate it using equation (7), then we need huge memory (in 
@(n4) space) to keep  the table q(n,  ., ., .)  values.  If, in- 
stead,  we  use  equation  (8) to  do the  computation,  it  will 
take a very  long time (in @ ( n 6 )  
time) for the calculation. In 
However,  equation  (7) has  a  special  form  that  enables 
us to roughly estimate  the performance of the scheme.  As 
Cl, q(n, n1 , n~~71.3, 
11) = 1, we find that 
- - 
I 
Si mi 1 arl y, 
Although  we use n4 and n5  in  the above two expressions, 
they  do not  necessarily  correspond  physically  to  the  last 
two words stored  in  the EEPROM. Actually  these  bounds 
34 
are  true  for  any  two  ni’s  among  the  m  nl’s.  (For ex- 
> 
ample,  it  is  also  true  that,  q ( n l n ~ , ~ ~ l n ~ l n ~ l n ~ l l )  
m h ,  q(n, 11  721 
11.) 
As  q(n,11,n41n511) will  be  close 
to  1/2n-’ 
when  n4  and  n5  are  close  to  n/2,  this  implies  that 
q ( n , n l l n 2 , n 3 , n 4 , n 5 , l )  will  be  close  to  l/2”-’ 
if  any 
two 71,’s are close to n/2. 
The same approach can be  generalised for other values 
of m, and hence the following theorem: 
Theorem 1  For all m  1 3, the probability  that  IKI  = 1 
given the n-bit words PI, PZ . . . P,+1,  Pm+2  having  re- 
spectively  nl1 n2 ] . . . ] n,+1 
q(nlnl,n2;..,n,,n,+l,n,+2,1)  = 
] n,+2  1 ’s  is given by 
q(n, 11, n,+l 
n,+2,  M n ,  711,. . . , nm, 11) 
115‘ 
20 
40 
11 
l 1  
in 
the  values  of 
takes 
the  word  PI @  . . .   @  P,. 
where 
of  1’s 
tion, q(n, nl  722 , . . .  n,,  n,+1  n,+2 
above by 
the  possible  number 
In  addi- 
I  1) is bounded from 
maxq(n,11,n,+l,nm+n,l). 
11 
To get an idea of how the bounds look, we restrict the values 
of n,+1  and n,+2 
in the range from 45 to 83. In such case, 
for each (n,+l,  nm+2) pair, we have 
~ g x q ( n , 1 ~ , n , + i , n , + z 1 ~ )  5 
max 
q(nIllrnm+1,nm+2,1) 
n-+i  ,nm+2E(45,83];ll 
a  program 
to  calculate  all  values  of 
We  used 
loops  from  1  to 
where  11 
q(128,11,n,+l,n,+211) 
128; n,+’ 
and nm+2 loops from 45 to 83; and 1 loops from 
1 to  128.  For each I ,   we find the maximum  and minimum 
values of q( 128,  ., ., 1). 
Definition 3  The bit equivalent of a number U  is dejined as 
- log,  U .  
Fig.  1  shows the bit equivalent of  the maximum and mini- 
mum values  of q(128, ll ] n l 1  n 2 , l )  where n1  and n2  are in 
the range from 45 to 83. The upper curve represents the bit 
equivalent of the minimum value while the lower curve rep- 
resents the bit  equivalent of  the maximum value over I .   It 
shows that  when an attacker  is attempting to guess for the 
key  K  with  1 l’s, it  is  at  least  as difficult  as guessing for 
a randomly chosen b-bits word, where b is bit equivalent of 
the maximum value for q(128,  ., ., 1). From the figure, it is 
observed that for a 128-bit key K, to guess for the weakest 
key  is equivalent to  guessing for a random  key  with  more 
than  115-bit long. If we restrict  the range to a narrower in- 
terval, say, from 50 to 78, the strength for the weakest key 
is equivalent to that of a random key with more than  121-bit 
60 
no. of 1s in key K (I) 
80 
100 
120 
I 
Figure 1. Bit equivalent of the max and min of 
q( 128, ll , nl, n2,l) versus 1  (ni’s E [45,83]). 
long. That is, if any two Pi’s fall into this range, we can be 
sure that the security of the scheme is equivalent to guessing 
for a random key with more than 121-bit long. This strength 
is reasonably good against class I attackers. 
Theorem 1 shows that the overall security niay not be im- 
proved by simply increasing m. Rather, we need to generate 
good Pi’s. In practice, m  = 3 or m = 5 are already good 
enough if  the encoding  is done properly; m  >  5 may  not 
give significant improvement to the security of the scheme 
- it only increases the chance of getting good Pi’s. 
7. Discussion and Conclusion 
In  this  paper,  we  first  introduced  the  modification  at- 
tack and then studied and analysed ways of protecting keys 
stored in the  EEPROM of  tamper-resistant devices against 
the modification attack. We discussed some possible protec- 
tion  schemes such as voting  schemes, and  found that they 
are not  very  satisfactory.  Instead, we  introduced  the  idea 
of encoding the key  rather than leaving it unencoded in the 
device.  Our suggested  scheme can  be further enhanced to 
cover the whole spectrum of key values as discussed in Sec- 
tion 5.4. 
In  the  device,  m n-bit  words  Pi’s are  stored  (together 
with another m n-bit auxiliary words for decoding); the ac- 
M;’Pi  where  Ad,, 
tual  key  K  will  be  decoded  as 
represents the permutation matrix for 7ri implemented phys- 
ically  as hidden  wires  in  the device.  Keys in  this  scheme, 
however, are not uniformly distributed, leading to the pos- 
sibility that the scheme can be broken by checking for high 
35 
Acknowledgements 
The work of the first two authors was partially supported 
by HK RGC CERG grant HKUST 6137/98E 
References 
D. Abraham, G. D o h ,  G. Double, and J. Stevens.  Transac- 
tion  security system.  IBM  System Journal, 30(2):20&229, 
1991. 
R.  Anderson and  M.  Kuhn.  Tamper resistance - a  caution- 
ary  note.  In Proceedings of  the  Second  USENIX  Workshop 
on Electronic Cotnmerce, pages  1-1  1. USENIX Association, 
1996. 
R. Anderson and M. Kuhn. Low cost attacks on tamper resis- 
tant devices.  In Security protocols  : 5th International Work- 
shop, pages 125-136.  Springer-Verlag, 1997. 
T. Cormen, C .  Leiserson, and R. Rivest. Iritroducrion ro algo- 
rithms. MIT Press, 1990. 
R. Motwani and P. Raghavan. Randomized Algorirhms. Cam- 
bridge University Press, 1st edition, 1995. 
D. Stinson. Cyptography : theory and practice. CRC Press, 
1995. 
probability  keys.  We  studied this problem  and  found  that 
the distribution  will  be  practically  close to  uniform,  if  all 
ni’s (the number of  1’s in  Pi) are chosen  properly (that is, 
relatively close to n/2 and furthermore, that it is easy to en- 
sure that  this condition holds).  Theorem  1 asserts  that  for 
m > 3, the probability to break the scheme will be bounded 
above by maxl, q(n, 11, ni, n j ,  I )  where q(n, 11, ni, n j ,  I )  is 
the  probability  that  the  key  K  will  have  1 1 bits  and K  is 
the result of xor’ing three n-bit words with  11, ni  and  nj  1 
bits respectively. In particular, if ni and nj are in the range 
from 45 to 83, breaking the scheme is at least as difficult as 
breaking for a random key with more than  115-bit long.  In 
addition, m = 3 or m = 5 are already good enough practi- 
cally to provide strong security if the encoding is done prop- 
erly and that m > 5 may not give significant improvement 
to the security of the scheme. 
However, there remain  a few areas of  concern.  First,  if 
the attacker succeeds in breaking any one device, the whole 
batch  to which  this device belongs would  become less se- 
cure.  That is,  the  attacker  could  break  any  additional  de- 
vice  belonging  to  the  same  batch  in  O ( n )  time.  This is 
simply  because  tamper-resistant  devices will  be mass pro- 
duced, and the wiring topology  will be the same for all de- 
vices  in  the same batch.  Second, we should  keep in  mind 
that  the scheme is  insecure  against class I1  attackers  (i.e., 
knowledgeable insiders  [I])  who may  have  knowledge of 
the  wiring  topology.  Therefore,  the  device manufacturer 
must  take  appropriate procedures to protect  this  sensitive 
knowledge.  Finally, against class I11 attackers (i.e.,  funded 
organizations [I])  there is really no/little  hope of designing 
a truly  tamper-resistant  device, as they may possess equip- 
ment that makes it possible to completely reverse engineer 
the device. 
Table  1.  Maximum and  minimum  values  of 
for different ranges for 1 ( n  = 128). 
an.n,,n2,ns,l 
36