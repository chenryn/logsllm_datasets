引发的⾎案
Ssrf -
安全脉搏
SecPulse.COM |
“ 这是 酒仙桥六号部队 的第 132 篇⽂
章。
起因
渗透能⼒的体现不只是储备 0day 的多少，许多站点能否
被突破，对本身基础漏洞的熟练的配合利⽤也是⼀场考
验，故事正是因机缘巧合拿到 shell 的⼀次记录总结。
从信息搜集到进⼊后台
客户给定的地址打开之后就只有⼀个登录⻚⾯，留下没有
账号的我在⻛中凌乱。
⼀直怼⼀个登录框也不是事⼉啊，没办法，只能先将端
⼝，⽬录和弱⼝令先探测起来。
端⼝基本都开了感觉有点问题，ping 过之后发现有
cdn。
很不幸，弱⼝令没爆出来，⽬录端⼝也没有太多的发现，
当务之急就是需要⼀个账号进⼊系统。但是账号信息该从
哪⾥搜集？？？
等等，项⽬开始客户是提供了邮箱地址作为报告的提交地
址的，⾸字⺟⼤写 + 名 @xxx 的格式，和许多企业的命
名规则⼀样。
⼀边先把⼈名字典构造起来，⼀边通过 google 语法去搜
索相关邮箱，相关公司名称，运⽓不错，从⼤⼤⼩⼩⼏⼗
个⽹站论坛上⾯发现七⼋个公司邮箱，和⼏个 qq 邮箱。
然后通过⼀些不可告⼈的的⼿段反查到了其中某些 qq 的
绑定⼿机号，以及历史密码信息。
再次构造相关字典，果然⼈们都喜欢⽤类似的密码，撞库
成功。
进⼊后台后，挨个测试了⼀遍功能点都没能发现 getshell
的，上传也没能绕过后缀限制。
都说没有 getshell 的渗透测试是不到位的，只发现⼀些
中低危漏洞可没法满⾜。
简单的权限认证绕过
因为没有太多的收获，于是挨个访问之前 dirbuster 跑出
来的⽬录，其中⼀个⻚⾯访问之后会有⼀道⿊影⼀闪⽽
过，然后跳转到登录⻚⾯，猜测做了权限验证，然后强制
跳转了。
测试中有很多时候都可能遇到⽆权限访问的情况
当我们遇到访问 403，401，302，或是弹框提示⽆权限
可以尝试⼀下以下的办法。
1. GET /xxx HTTP/1.1 à403
Host: test.com
绕过：
GET /xxx HTTP/1.1 à200
Host: test.com
X-Original-URL: /xxx
2. GET /xxx HTTP/1.1 à403
Host: test.com
绕过：
GET /xxx HTTP/1.1 à200
Host: test.com
Referer: http://test.com/xxx
3. 302 跳转：拦截并 drop 跳转的数据包，使其停
留在当前⻚⾯。
4. 前端验证：只需要删掉对应的遮挡模块，或者是
验证模块的前端代码。
这⾥使⽤ burp 拦截⼀下，扔掉后⾯的跳转，看到如下界
⾯，弹窗还是提示没法访问，权限不够，但是和之前的访
问 403 不⼀样了，难道是我使⽤了普通⽤户登录的缘
故？？？
熟练的打开 F12 开发者模式。删掉前端代码看是否能使
⽤他的功能。
删完权限验证模块的前端代码后，运⽓不错，还有部分功
能可以使⽤。
ssrf - 通向 shell 的钥匙
在客户系统后台转了半天，最后在⼀个查看功能处发现了
突破点
抓包发现 post 参数好像有点意思，尝试换掉默认图⽚的
地址，改为 dnslog 地址，返回提示路径不正确。
猜测是做了后缀的限制，应该只能 post png,jpg 等后缀
的地址，先试试读取⼀下远程服务器上的图⽚，成功返
回，果然有东⻄。
⼀个标准的 ssrf，，因为没法改变后缀，应该是不能读
取 passwd 之类的⽂件了，还是先打⼀波 dnslog，记录
⼀下真实 ip 地址。
但是 ssrf 可不只是读个⽂件那么简单，ssrf 通常可以⽤
来打内⽹应⽤，通过它来打个 redis 或者 mysql 岂不美
哉。
先借助 ssrf 探测⼀下开放的端⼝，22，80，443，
6379。
看看攻击 redis ⼀般可以利⽤的 dict 和 gopher 两种协
议，使⽤ gopher 协议的话需要注意⼀些利⽤限制。
gopher 协议规则⽐较复杂，经过查找，找到了⼀款⼯
具，使⽤其⽣成的 payload 很准确，且可⾃定义。
需要的⼩伙伴可以⾃取。
https://github.com/firebroo/sec_tools
需要将内容再进⾏⼀次 url 编码传到 web 的参数中才会
正常运⾏。
Dict 协议敲命令较为直接。
1. 写⼊内容；
dict://127.0.0.1:6379/set❌test
2. 设置保存路径；
dict://127.0.0.1:6379/config:set:dir:/tmp/
3. 设置保存⽂件名；
dict://127.0.0.1:6379/config:set:dbfilename:1.png
4. 保存。
dict://127.0.0.1:6379/save
我们⼀般对 redis 常⻅的攻击⽅式有：
1. 写 webshell；
2. 写密钥；
3. 定时任务反弹。
第⼀种需要 web 路径，后两种⽅法可能需要⼀定的权
限。
攻击的思路有了，但是我们通过 dict 协议访问后并没有
出现回显，不知道是否存在未授权的 redis 服务，盲打⼀
顿可能浪费宝贵的时间，灵光乍现，可以先写⼀个图⽚⽂
件到 tmp ⽬录⾥，再通过 file 协议进⾏读取，出现内容
就表明 redis 是能够利⽤的。
出现回显，说明⽂件成功写⼊了，虽然有乱码，但是影响
不⼤。
为了拿到 shell，当然是先试试⽤ gopher 协议写密钥，
本机⽣成密钥: ssh-keygen -t rsa。再使⽤⼯具将以下
命令转换成 gopher 协议⽀持的形式。
config set dir /root/.ssh
config set dbfilename authorized_keys
set test "xxx"
save
写⼊后尝试连接⼀下⻚⾯啥也没返回，尝试连接⼀下
Wfk，突然想起 nmap 结果好像 ssh 没对外开放，决策
性失误。
尝试反弹计划任务，但是等了半天也没⻅ shell 弹回来，
猜测可能是权限不够，没能够成功写⼊，可惜前期测试中
并没有发现信息泄露暴露出 web ⽬录的路径，不然能写
个 webshell 也是极好的。
没办法，这个只能先搁置⼀边，条条⼤路同罗⻢，既然这
个域名不⾏，看看有没有绑定的其他域名在这个 ip 上。
旁站信息泄露 getshell
通过之前记录的 dnslog 上的 ip 地址进⾏反查，发现了
该 ip 地址下绑定了其他域名。
访问后改掉 url 变量后的默认参数，触发报错，成功爆出
了绝对路径，⼩⼩的报错，却提供了巨⼤的价值。
因为是旁站，现在获取到了 B 站的⽹站路径，如果能通
过 A 站的 ssrf 把 webshell 写到 B 站的 web 路径⾥也
是美滋滋了，说⼲就⼲。
访问 shell，并敲⼊ whoami 命令查看权限，发现是个低
权 www ⽤户。
提权
弹个交互的 shell 出来⽅便进⾏提权，但是远程服务器⼀
直没法正常收到 shell。
切换⼀下端⼝，⽹络管理员可能做了⼀定的限制，尝试通
过 443，53 等经常开放的端⼝弹出 shell。
成功拿到 shell，获取到低权限 SHELL 后⼀般会看看内
核版本，检测当前⽤户权限，再列举 Suid ⽂件，如果都
没发现可能会借助⼀些⾃动化脚本来检查可能存在的提权
⽅式。
通过 find / -perm -u=s -type f 2>/dev/null 看看有 s
属性⽂件。
Python 好像是可以通过 suid 提权的，翻了翻⾃⼰的⼩
笔记，payload ⼀发⼊魂。
这⾥附上 centos 下 suid 提权较为全⾯的总结：
https://www.freebuf.com/articles/system/244627.ht
ml
⾄此测试结束。
总结
整个测试过程遇到很多困难，许多地⽅看似简单，其实是
反复尝试之后才顺利过关。
测试中其实并未使⽤多么⽜逼的攻击⼿段，简单梳理整个
流程：全⽹信息搜集发现⽤户账户 à 撞库拿到部分密码
à 前端验证绕过发现新功能点 àssrf 探测信息 à 旁站获
取 web 绝对路径跨⽹站写⼊ shellà 拿到 shell 后通过
suid 提权
suid 提权。
全⽂完
本⽂由 简悦 SimpRead 优化，⽤以提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看详细说明
|---|--|--|--|--|--|
| 0 |  |  |  |  |  |
| 1 |  |  |  |  |  |
| 2 |  |  |  |  |  |