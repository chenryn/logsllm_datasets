Using LLVM For Program
Transformation
ANDREW RUEF
UNIVERSITY OF MARYLAND
COMPUTER SCIENCE
LLVM Overview
 Research project at UIUC
 Modular compiler tool chain
 Integrated in many open source and commercial
projects
 Licensed under an open-source license
Introduction
Components of LLVM
• Mid-level compiler Intermediate
Representation (IR)
• C/C++ compiler frontend (clang)
• Target-specific (X86, ARM, etc) code
generators
• Divide between ‘clang’ and ‘LLVM’
• Clang is a C/C++ compiler with an
LLVM backend
• LLVM is ‘everything else’
Todays Agenda
 We’ll talk about existing LLVM tools
 We’ll do a few demos using those tools
 We’ll talk about how to build tools on top of LLVM
 We’ll build two analysis tools
 We’ll look at a program re-writing tool
Lab: Where we’re going
 clang – C language frontend, translates C into
LLVM bitcode
 opt – Analyze and transform LLVM bitcode
 llc – Code generator for LLVM bitcode to native
code
Lab: Commands to run
$ clang –c –emit-llvm –o test.bc test.c!
$ opt –O1 –o test.bc test.bc!
$ llc –o test.s test.bc!
$ gcc –o test test.s!
Lab: What just happened?
 Full translation of C program to executable program
 At each stage we can look at what the compiler
infrastructure is doing
C to un-optimized bitcode
¡
Optimized bitcode
¡
Machine code
¡
Executable
¡
 Very good blog post on the life of an LLVM
instruction
http://eli.thegreenplace.net/2012/11/24/life-of-an-
instruction-in-llvm/
LLVM Intermediate
Representation
Lab: Find Non-Constant Format String
 Condition to check for:
Any time the first parameter to printf, sprintf (others?) is non-
¡
constant, alert for potential security badness
 Can we statically detect this in LLVM IR?
Algorithm For Detection
 Visit every call instruction in the program
 Ask if that call instruction is a format-string
accepting routine
 If it is, retrieve the first parameter
 If the first parameter is not a constant global, raise
an alert
Structure of Provided Driver
 Very basic driver that uses a PassManager
 Reads in LLVM bitcode and runs the VarPrintf pass
on it
 Produce bitcode file using clang –c –emit-llvm!
 Using the driver might seem clunky, this is easier
than integrating with opt
 The pass can later be integrated with opt
!
Building the drivers
$ cd tutorial!
$ mkdir build!
$ cd build!
$ cmake –DLLVM_ROOT=/usr/local ..!
$ make!
CMake
 CMake is a “meta make”
Why? Why not
¡
 CMake generates your build environment
Makefiles
¡
XCode solution
¡
Visual Studio solution
¡
 CMake has its own build specification system for
describing building code
It might be saner than what you are used to
¡
 LLVM can be built with cmake or automake/
autoconf
LLVM Intermediate Representation
 Language allows for expression of computation
 Instructions produce unique values
 Collection of statements:
%5 = add nsw i32 %3, %4!
¡
%N – a value!
÷
add – a binary instruction!
÷
nsw – no signed wrap!
÷
 The language is Static Single Assignment (SSA)
 Values defined by statements are never re-defined
Hierarchy of the Language
• A compilation unit is a Module, contains functions
• A function is a Function, contains basic blocks
• A basic block is a BasicBlock, contains instructions
• An instruction is an Instruction
• Instructions can contain operands, each is a Value
• All of the above, except Module, is a Value
Types
 No implicit casting in LLVM IR, all values must be
explicitly converted
 All values have a static type
 Integers are specified at arbitrary bitwidth
i1, i2, i3, … , i32, … i398
¡
 Floating point types
 Derived types specify arrays, vectors, functions
pointers, structures
Structures have types like {i32, i32, i8}!
¡
Pointers have types like “pointer to i32”
¡
Note on Integer Types
 There are no signed or unsigned integers
 LLVM views integers as bit vectors
 Frontends destroyed signed/unsigned information
Really, C programmers destroyed signed/unsigned
¡
information…
 Research prototypes exist that analyze integer
wrapping in LLVM IR (
http://code.google.com/p/wrapped-intervals/ )
 Operations are interpreted as signed or unsigned
based on instructions they are used in
Memory Model
 LLVM has a low level view of memory
Just a key -> value map
¡
Keys are pointer values
¡
Values stored in LLVM memory must be integers, floating
¡
point, pointers, vectors, structures, or arrays
 LLVM has a concept of creating function-local
memory via alloca
The Module
 Highest level concept
 Contains a set of global values
Global variables
¡
Functions
¡
The Function
 Name
 Argument list
 Return type
 Calling convention
 Extends from GlobalValue, has properties of
linkage visibility
The BasicBlock
 Contains a list of Instructions
 All BasicBlocks must end in a TerminatorInst
 BasicBlocks descend from values, and are used as
values in branching instructions
The Instruction
 Terminator instructions
 Binary instructions
 Bitwise instructions
 Aggregate instructions
 Memory instructions
 Type conversion instructions
 Control and misc instructions
Language By Example
Produced with opt –dot-cfg –o fib.bc fib.bc and graphviz
Language By Example, Part 2
Static Single Assignment
 LLVM contains a pass to promote variable-using
functions to value-using functions
 Once transformed by this pass, an LLVM module is
in SSA form
 Most LLVM analyses and transformations expect to
operate on an SSA IR
 SSA allows for Def-Use and Use-Def chain analysis
Simple function
int foo(int a, int b) {!
int i = a;!
int j = b;!
!
return i+j+1;!
}!
Pre-SSA
define i32 @foo(i32 %a, i32 %b) nounwind uwtable ssp {!
entry:!
%a.addr = alloca i32, align 4!
%b.addr = alloca i32, align 4!
%i = alloca i32, align 4!
%j = alloca i32, align 4!
store i32 %a, i32* %a.addr, align 4!
store i32 %b, i32* %b.addr, align 4!
%0 = load i32* %a.addr, align 4!
store i32 %0, i32* %i, align 4!
%1 = load i32* %b.addr, align 4!
store i32 %1, i32* %j, align 4!
%2 = load i32* %i, align 4!
%3 = load i32* %j, align 4!
%add = add nsw i32 %2, %3!
%add1 = add nsw i32 %add, 1!
ret i32 %add1!
}!
Post-SSA
define i32 @foo(i32 %a, i32 %b) nounwind
uwtable ssp {!
entry:!
%add = add nsw i32 %a, %b!
%add1 = add nsw i32 %add, 1!
ret i32 %add1!
}!
The Phi-Node
 To support conditional assignments, we introduce an
imaginary function
 Phi defines a value and accepts a list of tuples as an
argument
 Each tuple is a (BasicBlock * Value)
 Interpret the phi node as defining a value
conditionally based on the previous basic block
Phi node example
int foo(int a, int b) {!
int r;!
!
if( a > b )!
r = a;!
else!
r = b;!
!
return r;!
}!
Phi node example, pre SSA
define i32 @foo(i32 %a, i32 %b) nounwind uwtable ssp {!
entry:!
%a.addr = alloca i32, align 4!
%b.addr = alloca i32, align 4!
%r = alloca i32, align 4!
store i32 %a, i32* %a.addr, align 4!
store i32 %b, i32* %b.addr, align 4!
%0 = load i32* %a.addr, align 4!