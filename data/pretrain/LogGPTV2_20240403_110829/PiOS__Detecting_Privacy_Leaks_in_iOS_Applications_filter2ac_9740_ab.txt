functionality, even without access to the source code of the
original class.
difference
passing. The major
Message
between
Objective-C binaries and binaries compiled from other
programming languages (such as C or C++) is that, in
Objective-C, objects do not call methods of other objects
directly or through virtual method tables (vtables). Instead,
the interaction between objects is accomplished by sending
messages. The delivery of these messages is implemented
through a dynamic dispatch function in the Objective-C
runtime.
To send a message to a receiver object, a pointer to
the receiver, the name of the method (the so-called selec-
tor; a null-terminated string), and the necessary parameters
are passed to the objc_msgSend runtime function. This
function is responsible for dynamically resolving and invok-
ing the method that corresponds to the given selector. To
this end, the objc_msgSend function traverses the class
hierarchy, starting at the receiver object, trying to locate the
method that corresponds to the selector. This method can
be implemented in either the class itself, or in one of its
superclasses. Alternatively, the method can also be part of
a category that was previously applied to either the class,
or one of its superclasses. If no appropriate method can be
found, the runtime returns an “object does not respond to
selector” error.
Clearly, ﬁnding the proper method to invoke is a non-
trivial, dynamic process. This makes it challenging to re-
solve method calls statically. The process is further compli-
cated by the fact that calls are handled by a dispatch func-
tion.
3.2 Mach-O Binary File Format
iOS executables use the Mach-O binary ﬁle format,
similar to MacOS X. Since many applications for these
platforms are developed in Objective-C, the Mach-O for-
mat supports speciﬁc sections, organized in so-called com-
mands, to store additional meta-data about Objective-C pro-
grams. For example, the __objc_classlist section
Step 3: Data-Flow AnalysisStep 1: Reconstruct CFG &Step 2: Reachability Analysis001100101010101011011010101010100101010101010101010101010101contains a list of all classes for which there is an implemen-
tation in the binary. These are either classes that the devel-
oper has implemented or classes that the static linker has
included. The __objc_classref section, on the other
hand, contains references to all classes that are used by the
application. The implementations of these classes need not
be contained in the binary itself, but may be provided by the
runtime framework (the equivalent of dynamically-linked
libraries). It is the responsibility of the dynamic linker to
resolve the references in this section when loading the cor-
responding library. Further sections include information
about categories, selectors, or protocols used or referenced
by the application.
Apple has been developing the Objective-C runtime as
an open-source project. Thus, the speciﬁc memory layout of
the involved data structures can be found in the header ﬁles
of the Objective-C runtime. By traversing these structures
in the binary (according to the header ﬁles), one can recon-
struct basic information about the implemented classes. In
Section 4.1, we show how we can leverage this information
to build a class hierarchy of the analyzed application.
Signatures and encryption.
In addition to speciﬁc sec-
tions that store Objective-C meta-data, the Mach-O ﬁle
format also supports cryptographic signatures and en-
crypted binaries. Cryptographic signatures are stored in
the LC_SIGNATURE_INFO command (part of a section).
Upon invoking a signed application, the operating system’s
loader veriﬁes that the binary has not been modiﬁed. This is
done by recalculating the signature and matching it against
the information stored in the section. If the signatures do
not match, the application is terminated.
The LC_ENCYPTION_INFO command contains three
ﬁelds that
indicate whether a binary is encrypted and
store the offset and the size of the encrypted content.
When the ﬁeld cryptid is set, this means that the pro-
gram is encrypted. In this case, the two remaining ﬁelds
(cryptoffset and cryptsize) identify the encrypted
region within the binary. When a program is encrypted, the
loader tries to retrieve the decryption key from the system’s
secure key chain. If a key is found, the binary is loaded to
memory, and the encrypted region is replaced in memory
with an unencrypted version thereof. If no key is found, the
application cannot be executed.
3.3 iOS Applications
The mandatory way to install applications on iOS is
through Apple’s App Store. This store is typically accessed
via iTunes. Using iTunes, the requested application bundle
is downloaded and stored in a zip archive (with an .ipa
ﬁle extension). This bundle contains the application itself
(the binary), data ﬁles, such as images, audio tracks, or
databases, and meta-data related to the purchase.
All binaries that are available via the App Store are en-
crypted and digitally signed by Apple. When an applica-
tion is synchronized onto the mobile device (iPhone, iPad,
or iPod), iTunes extracts the application folder from the
archive (bundle) and stores it on the device. Furthermore,
the decryption key for the application is added to the de-
vice’s secure key chain. This is required because the appli-
cation binaries are also stored in encrypted form.
As PiOS requires access to the unencrypted binary code
for its analysis, we need to ﬁnd a way to obtain the de-
crypted version of a program. Unfortunately,
it is not
straightforward to extract the application’s decryption key
from the device (and the operating system’s secure key
chain). Furthermore, to use these keys, one would also have
to implement the proper decryption routines. Thus, we use
an alternative method to obtain the decrypted binary code.
Decrypting iOS applications. Apple designed the
iPhone platform with the intent to control all software that
is executed on the devices. Thus, the design does not intend
to give full system (or root) access to a user. Moreover,
only signed binaries can be executed.
In particular, the
loader will not execute a signed binary without a valid
signature from Apple. This ensures that only unmodiﬁed,
Apple-approved applications are executed on the device.
The ﬁrst step to obtain a decrypted version of an applica-
tion binary is to lift the restriction that only Apple-approved
software can be executed. To this end, one needs to jail-
break the device2. The term jailbreaking refers to a tech-
nique where a ﬂaw in the iOS operating system is exploited
to unlock the device, thereby obtaining system-level (root)
access. With such elevated privileges, it is possible to mod-
ify the system loader so that it accepts any signed binary,
even if the signature is not from Apple. That is, the loader
will accept any binary as being valid even if it is equipped
with a self-signed certiﬁcate. Note that jailbroken devices
still have access to the iTunes App Store and can download
and run Apple-approved applications.
One of the beneﬁts of jailbreaking is that the user ob-
tains immediate access to many development tools ready
to be installed on iOS, such as a debugger, a disassembler,
and even an SSH server. This makes the second step quite
straightforward: The application is launched in the debug-
ger, and a breakpoint is set to the program entry point. Once
this breakpoint triggers, we know that the system loader has
veriﬁed the signature and performed the decryption. Thus,
one can dump the memory region that contains the now de-
crypted code from the address space of the binary.
2In July 2010 the Library of Congress which runs the US Copyright
Ofﬁce found that jailbreaking an iPhone is fair use [8].
4 Extracting Control Flow Graphs from
Objective-C Binaries
Using the decrypted version of an application binary
as input, PiOS ﬁrst needs to extract the program’s inter-
procedural control ﬂow graph (CFG). Nodes in the CFG are
basic blocks. Two nodes connected through an edge indi-
cate a possible ﬂow of control. Basic blocks are continuous
instructions with linear control ﬂow. Thus, a basic block is
terminated by either a conditional branch, a jump, a call, or
the end of a function body.
Disassembly and initial CFG.
In an initial step, we need
to disassemble the binary. For this, we chose IDA Pro,
arguably the most popular disassembler. IDA Pro already
has built-in support for the Mach-O binary format, and we
implemented our analysis components as plug-ins for the
IDA-python interface. Note that while IDA Pro supports
the Mach-O binary format, it provides only limited addi-
tional support to analyze Objective-C binaries: For exam-
ple, method names are prepended with the name of the
class that implements the method. Similarly, if load or
store instructions operate on instance variables, the mem-
ory references are annotated accordingly. Unfortunately,
IDA Pro does not resolve the actual targets of calls to the
objc_msgSend dispatch function. It only recognizes the
call to the dynamic dispatch function itself. Hence, the re-
sulting CFG is of limited value. The reason is that, to be
able to perform a meaningful analysis, it is mandatory to
understand which method in which class is invoked when-
ever a message is sent. That is, PiOS needs to resolve, for
every call to the objc_msgSend function, what method
in what class would be invoked by the dynamic dispatch
function during program execution.
Section 4.2 describes how PiOS is able to resolve the
targets of calls to the dispatch function. As this process
relies on the class hierarchy of a given application, we ﬁrst
discuss how this class hierarchy can be retrieved from an
application’s binary.
4.1 Building a Class Hierarchy
To reconstruct the class hierarchy of a program, PiOS
parses the sections in the Mach-O ﬁle that store basic in-
formation about the structure of the classes implemented
by the binary. The code of Apple’s Objective-C runtime
is open source, and thus, the exact layout of the involved
structures can be retrieved from the corresponding header
ﬁles. This makes the parsing of the binaries easy.
To start the analysis, the __objc_classlist section
contains a list of all classes whose implementation is present
in the analyzed binary (that is, all classes implemented by
the developer or included by the static linker). For each of
these classes, we can extract its type and the type of its su-
perclass. Moreover, the entry for each class contains struc-
tures that provide additional information, such as the list
of implemented methods and the list of class and instance
variables. Similarly, the Mach-O binary format mandates
sections that describe protocols used in the application, and
categories with their implementation details.
In principle, the pointers to the superclasses would be
sufﬁcient to recreate the class hierarchy. However, it is im-
portant for subsequent analysis steps to also have informa-
tion about the available methods for each class, as well as
the instance and class variables. This information is neces-
sary to answer questions such as “does a class C, or any of
its superclasses, implement a given method M?”
Obviously, not all classes and types used by an applica-
tion need to be implemented in the binary itself. That is,
additional code could be dynamically linked into an appli-
cation’s address space at runtime. Fortunately, as the iOS
SDK contains the header ﬁles describing the APIs (e.g.,
classes, methods, protocols, . . . ) accessible to iOS appli-
cations, PiOS can parse these header ﬁles and extend the
class hierarchy with the additional required information.
4.2 Resolving Method Calls
the
dispatch
through
performed
As mentioned previously, method calls in Objective-
C are
function
objc_msgSend. This function takes a variable number
of arguments (it has a vararg prototype). However, the ﬁrst
argument always points to the object that receives the mes-
sage (that is, the called object), while the second argument
holds the selector, a pointer to the name of the method.
On the ARM architecture, currently the only architecture
supported by iOS, the ﬁrst two method parameters are
passed in the registers R0 and R1, respectively. Additional
parameters to the dispatch function, which represent the
actual parameters to the method that is invoked, are passed
via registers R2, R3, and the stack.
Listing 1 shows a snippet of Objective-C code that ini-
tializes a variable of type NSMutableString to the
string “Hello.” This snippet leads to two method invoca-
tions (messages). First, a string object is allocated, using the
alloc method of the NSMutableString class. Second,
this string object is initialized with the static string “Hello.”
This is done through the initWithString method.
The disassembly in Listing 2 shows that CPU register
R0 is initialized with a pointer to the NSMutableString
class. This is done by ﬁrst loading the (ﬁxed) address
off_31A0 (instruction: 0x266A) and then dereferencing
it (0x266E). Similarly, a pointer to the selector (alloc,
referenced by address off_3154) is loaded into register
R1. The addresses of the NSMutableString class and
the selector refer to elements in the __objc_classrefs
and __objc_selrefs sections, respectively. That is, the
dynamic linker will patch in the ﬁnal addresses at runtime.
However, since these addresses are ﬁxed (constant) values,
they can be directly resolved during static analysis and as-
sociated with the proper classes and methods. Once R0 and
R1 are set up, the BLX (branch with link exchange) instruc-
tion calls the objc_msgSend function in the Objective-C
runtime. The result of the alloc method (which is the ad-
dress of the newly-created string instance) is saved in regis-
ter R0.
In the next step,
the initWithString method is
called. This time, the method is not calling a static class
function, but an instance method instead. Thus, the address
of the receiver of the message is not a static address. In con-
trast, it is the address that the previous alloc function has
returned, and that is already conveniently stored in the cor-
rect register (R0). The only thing that is left to do is to load
R1 with the proper selector (initWithString) and R2
with a pointer to the static string “Hello” (cfstr_Hello).
Again,
the BLX instruction calls the objc_msgSend
function.
As the example shows, to analyze an Objective-C appli-
cation, it is necessary to resolve the contents of the involved
registers and memory locations when the dispatch function
is invoked. To this end, PiOS employs backward slicing to
calculate the contents of these registers at every call site to
the objc_msgSend function in an application binary. If
PiOS is able to determine the type of the receiver (R0) and
the value of the selector (R1), it annotates the call site with
the speciﬁc class and method that will be invoked when the
program is executed.
4.2.1 Backward Slicing
To determine the contents of registers R0 and R1 at a call
site to the objc_msgSend function, PiOS performs back-
ward slicing [19], starting from those registers. That is,
PiOS traverses the binary backwards, recording all instruc-
tions that inﬂuence or deﬁne the values in the target regis-
ters. Operands that are referenced in such instructions are
resolved recursively. The slicing algorithm terminates if it
reaches the start of the function or if all values can be deter-
mined statically (i.e., they are statically deﬁned). A value is
statically deﬁned if it is a constant operand of an instruction
or a static memory location (address).
In Listing 2, for example,
the slice for the call to
objc_msgSend at address 0x2672 (the alloc call) stops
at 0x2668. At this point, the values for both R0 and R1
are statically deﬁned (as the two offsets off_3154 and
off_31A0). The slice for the call site at 0x267c (the string
initialization) contains the instructions up to 0x2672. The
slicing algorithm terminates there because function calls
and message send operations store their return values in R0.
Thus, R0 is deﬁned to be the result of the message send
operation at 0x2668.
Once the slice of instructions inﬂuencing the values of
R0 and R1 is determined, PiOS performs forward constant