  * 当使用较小的公钥指数 _e_ (比如3)加密较小的明文 _m_ (比如`*m 《孙子算经》：有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？
另外最最重要的一点，由于RSA加密本身没有随机数参与，因此是一种确定性加密算法，即同样的明文加密一定会出现同样的密文。从这点来看，裸RSA加密并不是语义安全的。
非语义安全的加密系统，很有可能会受到[Chosen plaintext
attack](https://en.wikipedia.org/wiki/Chosen-plaintext_attack "Chosen
plaintext attack")攻击的影响。举例来说，RSA的一个特性是两个密文的乘积等于对应明文的乘积：
    m1^e * m2^e ≡ (m1m2)^e (mod n)
如果攻击者想要解密某个特定密文 _c ≡ m^e (mod n)_ ，他可以让私钥持有方去解密一个构造的密文 _c′ ≡ cr^e (mod n)_ ，
_r_ 是攻击者选择的值。由于前面提到的乘积特性，实际上密文 _c'_ 的明文值是 _mr (mod n)_ ，因此如果解密成功，攻击者就可以计算出原本密文
_c_ 的明文 _m_ 。
除了上面介绍的这些，裸加密很存在许多其他隐患。为了缓解这些问题，真实的RSA实现中通常还会在明文加密之前进行一定的填充。填充要求能引入足够的随机性，但是也需要能够方便地对明文进行还原(unpading)。之前对称加密介绍的一种填充`PKCS#5`可以实现后者，但是没有随机性。
`PKCS#1`标准中最初就包含了精心设计的填充方法。虽然是精心设计，但在1998年Bleichenbacher在Crypto会议上对其展示了一种称为[adaptive
chosen ciphertext
attack](https://en.wikipedia.org/wiki/Adaptive_chosen_ciphertext_attack)的攻击方法，两年后在[Eurocrypt](https://en.wikipedia.org/wiki/Eurocrypt)
大会上也有人提出一些潜在的不安全性。这期间`PKCS#1`标准也一直进行修订，比如引入`OAEP`填充方式等。
如果使用过高级语言中封装的RSA加密库，应该也会发现其提供的接口都是可以指定Padding的，比如Python的例子：
    from Crypto.PublicKey import RSA
    from Crypto.Cipher import PKCS1_OAEP
    from Crypto.Hash import SHA256
    def encrypt(key, plainText) 
        pubkey = RSA.importKey(key)
        cipher = PKCS1_OAEP.new(pubkey, hashAlgo=SHA256)
        encrypted = cipher.encrypt(plaintext)
        return base64.b64encode(encrypted)
Java的例子：
    String decrypt(String privateKeyStr, cipherText) {
      byte[] cipherTextBytes = DatatypeConverter.parseBase64Binary(cipherText);
        byte[] privateKeyBytes = DatatypeConverter.parseBase64Binary(privateKeyStr);
      KeyFactory kf = KeyFactory.getInstance("RSA");
        PKCS8EncodedKeySpec ks = new PKCS8EncodedKeySpec(privateKeyBytes);
        PrivateKey privateKey = kf.generatePrivate(ks);
        Cipher c = Cipher.getInstance("RSA/ECB/OAEPWithSHA-256AndMGF1Padding");
        c.init(Cipher.DECRYPT_MODE, privateKey, new OAEPParameterSpec("SHA-256",
            "MGF1", MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT));
        byte[] plainTextBytes = c.doFinal(cipherTextBytes);
        String plainText = new String(plainTextBytes);
      return plainText;
    }
# 基础设施
介绍完了理论，想必很多人也觉得枯燥无味了。诚然，理论与实践结合才是密码学大放异彩的地方，我们日常生活中每天上网用到的`https`，手机系统用到的应用签名、Secure
Boot，各种认证和校验，无不涉及到非对称加密。实践依赖于背后的数学根基，但同时也在易用性和标准化上做了很多工作，在此基础上构建了广泛应用的秘钥基础设施。值得一提的是，这里的基础设施并不是狭义的PKI，而是涉及到的标准和实践，下面会挑一些来进行介绍。
## ASN.1
为了解决高级语言中结构化数据在磁盘、网络中传输后能够进行还原，我们早先有JSON、XML等表示，现在有protobuf、thrift等序列化方法。不过在更早之前就有了跨平台的抽象语法标准ASN.1(Abstract
Syntax Notation One)，ASN.1定义在`X.208`中，提供了标准的IDL接口描述语言，可以用来表示一系列类型和值。
在ASN.1中，类型就是一组值。有些类型包含了有限的值，但是有些类型也可以包含无限的值。ASN.1包含四种类型：
  1. 简单类型，即没有组合的”原子“类型
  2. 结构类型，类型的组合
  3. 标记类型，从其他类型衍生的类型
  4. 其他类型，例如`CHOICE`和`ANY`类型
类型和名称都可以通过赋值符号`::=`进行命名。除了CHIOCE和ANY的每个ASN.1类型都包含一个标记(tag)，tag可以理解成唯一的标识符，当且仅当tag相等时对应类型才相等。tag也有4个种类：
  1. 通用标记(Universal)
  2. 应用标记(Application)
  3. 私有标记(Private)
  4. 上下文标记(Context-Specific)
通用标记是定义在`X.208`中的，具有全局唯一性，其他标记在不同应用中可能会有不同的含义。拥有通用标记的类型大部分是简单类型，如`BIT
STRGING`、`INTEGER`、`IA5String`、`OBJECT
IDENTIFIER`等，也有结构类型如`SEQUENCE`、`SET`等。一个简单的ASN.1文件如下：
    Person ::= SEQUENCE {
        age INTEGER,
        name OCTETSTRING,
        birth Date, -- 注释：这里的组合类型在下面定义
    }
    Date ::= SEQUENCE {
        year INTEGER,
        month INTEGER,
        day INTEGER
    }
ASN.1仅仅是一个抽象的表示方法，编码方式则定义在`X.209`中。常见的编码实现有：
  * BER：Basic Encoding Rules
  * DER：Distinguished Encoding Rules
  * XER：XML Encoding Rules
  * JER：JSON Encoding Rules
  * ...
编码实现多种多样，和RSA相关的主要是DER编码。DER是BER的一个子集，编码方式为TLV(Type-Length-Value)结构，具体定义在`X.509`标准中。
## X.509
在密码学中，X.509定义了公钥证书的标准(RFC5280)，其最常见的应用场景之一就是HTTPS中的TLS/SSL认证中。公钥证书中包括公钥和身份信息(如域名、组织或个人)，并且是经过签名的。权威认证的签名机构CA([certificate
authority](https://en.wikipedia.org/wiki/Certificate_authority)
)公钥证书预置在我们的浏览器或者操作系统中，因此可以认证签名的有效性。
X.509同样使用ASN.1来描述，但经历了多个版本的变化，例如：
  * 
  * 
  * 
>
> 事实上`X.509`是由国际电信联盟(ITU)管理的，权威版本可以在[ITU](https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.509-201210-S!!PDF-E&type=items
> "ITU")的网站上看到，同时ITU也提供了[X.509以及对应拓展包的ASN.1压缩包下载](https://www.itu.int/ITU-T/recommendations/rec.aspx?id=4123&showfl=1
> "X.509以及对应拓展包的ASN.1压缩包下载")。
X509中定义了许多字段，列举一些常见的解释一下：
  1. Serial Number：CA所签名的证书都都包含的一个针对该CA的序列号
  2. Subject：主题名称，CA所签名的目标对象标识符，通常使用X.500或者LDAP格式来描述
  3. Issuer：签发者名称，CA本身的标识符。对于自签名的证书而言，Issuer和Subject是相同的，例如根证书
  4. Subject Public Key Info：Subject的公钥信息，包括公钥算法和对应的公钥，例如RSA公钥则包括之前介绍过的模n和公钥指数e的值
  5. Signature：Issuer对Subject公钥证书的签名
  6. Validity period：Issuer对Subject公钥证书签名的有效时间
以B站的的HTTPS证书为例，我们也可以使用openssl查看公钥详细信息：
    $ openssl s_client -connect bilibili.com:443 -showcerts 2>/dev/null | openssl x509 -noout -text -nameopt multiline,-esc_msb,utf8
    Certificate:
        Data:
            Version: 3 (0x2)
            Serial Number:
                27:6d:f4:81:02:c7:45:53:a7:ee:12:58
        Signature Algorithm: sha256WithRSAEncryption
            Issuer:
                countryName               = BE
                organizationName          = GlobalSign nv-sa
                commonName                = GlobalSign Organization Validation CA - SHA256 - G2
            Validity
                Not Before: Sep 18 09:32:07 2018 GMT
                Not After : Sep 18 09:21:04 2020 GMT
            Subject:
                countryName               = CN
                stateOrProvinceName       = 上海
                localityName              = 上海
                organizationName          = 上海幻电信息科技有限公司
                commonName                = *.bilibili.com
            Subject Public Key Info: