personal information, we propose to not include any (even
shortened) contact identiﬁers and simply set the ﬁelds to a
ﬁxed value, e.g., 0x0000. Then, whenever AirDrop receivers
overhear such an advertisement, they activate their AWDL
interface unconditionally. Coincidentally, this behavior is
already implemented by AirDrop receivers that are discov-
erable by everyone (cf. § 2.2), so we do not expect that this
change will incur any practical hurdles.
5.5 Towards Replacing AirDrop
We implemented a fully-functional PrivateDrop prototype.
The following changes have to be made by Apple for turn-
ing PrivateDrop into a drop-in replacement for AirDrop,
which can be deployed with iOS and macOS updates, and
7We assume an unambiguous mapping of contact identiﬁers to contact
entries in a user’s address book. If a user assigned the same identiﬁer to
multiple contacts, then having multiple validation records could help to
resolve the ambiguity. In any case, if AirDrop is unable to uniquely identify
the other party, it should inform the user, e.g., by displaying an appropriate
message. Note that Apple validates ownership of contact identiﬁers via
veriﬁcation emails or SMS (cf. § 2.1), which prevents multiple registrations,
e.g., when users share an ofﬁce phone number.
Figure 5: PrivateDrop protocol; changes to the original AirDrop
protocol (cf. Fig. 1) highlighted in blue.
Integration with the HTTPS Handshake
5.3
In order to integrate PrivateDrop into AirDrop’s HTTPS pro-
tocol, we introduce two new HTTPS messages into the au-
thentication phase that we depict in Fig. 5.
In particular,
we introduce StartPSI and FinishPSI that include the three
messages M1, M2, and M3 from our optimized PSI proto-
col (cf. Fig. 4) as payload. The protocol is performed imme-
diately after the mDNS discovery is completed and replaces
the original HTTPS Discover exchange. Since the AirDrop
sender acts as the HTTPS client in the protocol, the ini-
tial HTTPS request contains no payload and simply signals
the receiver to initiate the PSI protocol.
Selecting Individual Validation Records. The output
of the PSI protocol determines which individual validation
records VRσ,i are included in the follow-up requests. If the PSI
3586    30th USENIX Security Symposium
USENIX Association
Sender SReceiver RregularlyperformBLE scansif any advertisement received,activate AWDL(1b) AWDL synchronization(1a) AirDrop BLE advertisementwithout hashed identifiersEstablish TLS connection withclient and server certificatesAll subsequentcommunication  uses AWDLFor every service discovered, start HTTPS discoveryR’s icon appears in sharing paneSelect S’s individual validation record based on PSI outputTLS teardown(1c) Ask for service AirDropService informationService discovery via mDNS(1) DISCOVERY(2) AUTHENTICATIONHTTPS POST /StartPSI HTTPS 200 OKwith PSI message M1HTTPS POST /FinishPSIwith PSI message M2HTTPS 200 OKwith PSI message M3with R’s individual validation recordSelect R’s individual validation record based on PSI outputInitiate PSI protocol as in Figure 4HTTPS POST /Askwith S’s individual validation recordHTTPS POST /Uploadwith fileSelect receiverPrompt to decide whether to accept fileEstablish TLS connection withclient and server certificatesHTTPS 200 OKStart file transfer TLS teardownHTTPS 200 OK(3) DATA TRANSFERTable 3: Experiment parameters.
6.2 Experimental Setup
Protocols
Set sizes
AirDrop, PrivateDrop
# identiﬁers m
# address book
entries n
1, 10, 20
100, 1 000, 5 000,
10 000, 15 000
Hardware
Network
connection
Sender (macOS 11) MacBook Pro 15" 2019
Receiver (iOS 14)
Apple Wireless Direct Link (AWDL) [90],
USB cable
iPhone 12 mini
requires no hardware modiﬁcations: (a) To ensure limited
backward compatibility with the orignal AirDrop protocol,
PrivateDrop-enabled devices should support AirDrop’s Dis-
cover request but never include AirDrop’s validation record
to protect themselves against identiﬁer leakage (cf. § 3).
PrivateDrop devices would then always appear as non-con-
tacts to AirDrop devices. Note that downgrade attacks, i.e.,
forcing two PrivateDrop devices to use the legacy AirDrop
protocol, will hence merely result in unauthenticated con-
nections as PrivateDrop devices will never exchange their
validation records with AirDrop devices. (b) Apple’s CA
infrastructure must be extended to issue VRσ,i and Yσ,i val-
ues. (c) PrivateDrop should use the system’s Contact API
to provide input for the contact discovery. For evaluation
purposes, we use randomly generated contacts. (d) Our im-
plementation currently does not integrate BLE discovery, be-
cause iOS hides Apple-speciﬁc advertisements in the scan
responses and prohibits emitting them for third-party applica-
tions. (e) Finally, PrivateDrop currently does not implement
individual validation records but uses the AirDrop validation
records VRσ to match the Apple-signed TLS certiﬁcates.
6 Experimental Evaluation
We evaluate the performance of PrivateDrop based on our
implementation for AirDrop (cf. § 5). To this end, we conduct
an extensive experimental evaluation using different Apple
devices and variable input sizes over the devices’ AWDL
interface. We show that the median discovery delay is well
below one second in any practical setting. In the following,
we explain our evaluation metrics and experimental setup. We
then present and discuss the evaluation results.
6.1 Evaluation Metrics
We assess the protocol’s performance in terms of runtime
or delay. In particular, we time the protocol ﬂow at several
reference points to measure (a) computational overhead, i.e.,
time spent for calculating cryptographic operations, (b) net-
work overhead, i.e., time spent for transmitting data over
the data channel, and (c) overall runtime, i.e., time spent for
executing the complete discovery process.
We conduct all experiments using our PrivateDrop
and AirDrop implementations (cf. § 5) and summarize all
other experiment parameters such as set sizes, hardware, and
network environments in Tab. 3.
Set Sizes. Our complexity analysis in § 4.6 shows that
the online PSI overhead depends on the number of identi-
ﬁers m and address book entries n. A previous online study
found that Apple users have n = 136 contacts on average [92].
Therefore, we select values for n in this order of magnitude
but also include values up to n = 15000 to assess potential
scalability limits. Similarly, we select m to cover moderate
and extreme limits (1 to 20). For simplicity of presentation,
the input sizes are the same for both sender and receiver in all
our experiments, i.e., m = mS = mR and n = nS = nR.
Hardware and Network Connection. We use up-
to-date Apple devices for the evaluation,
in particular,
an iPhone 12 mini and a MacBook Pro (2019). A mix of iOS
and macOS devices allows us to conduct experiments via a ca-
ble network connection (USB) in addition to AWDL, thereby
measuring the impact of network-induced delays. In all ex-
periments, the MacBook acts as the sender and the iPhone as
the receiver to ensure comparable results.
Environment. We conduct all experiments in a home ofﬁce
environment,8 where we cannot control interfering Bluetooth
and Wi-Fi transmissions. This interference might contribute
to the high variance of our AWDL experiments (cf. Fig. 9),
which was not observed in previous experiments that used a
Faraday tent [90]. We run cable-based experiments to isolate
the impact of PrivateDrop, while the AWDL experiments help
us to understand performance under real-world conditions.
Test Suite. We implemented a benchmark application
for iOS and macOS based on PrivateDrop (cf. § 5) that allows
us to deﬁne a scenario. A scenario is comprised of a ﬁxed
set of experimental parameters such as the set sizes and the
choice of sender and receiver devices (cf. Tab. 3). For each
scenario, we run 100 experiments (Monte Carlo) that each
consist of a complete protocol execution. To avoid systematic
errors introduced by temporal disturbances, we schedule the
individual runs for each scenario in a round-robin fashion.
The bar plots indicate the median delay over all runs, and the
error bars indicate the 0.05 and 0.95 quantiles. Unless other-
wise stated, we measure the delays on the sender side. Each
experiment consists of a full protocol run as well as a prepa-
ration and cleanup phase: (a) Preparation: we generate the
address book at random, precompute the values ui, and wait
until both sender and receiver are ready. (b) Execution: we
run a complete protocol execution starting from the DNS-SD
discovery to the upload of a ﬁle. (c) Cleanup: we shut down
the HTTPS and DNS-SD server to close all connections.
8Our institution mandated home ofﬁce due to the COVID-19 pandemic.
USENIX Association
30th USENIX Security Symposium    3587
Figure 6: Overall authentication delay for AirDrop (baseline)
and PrivateDrop with different set sizes (m,n).
Figure 7: Computation time for the PSI operations on an iPhone 12
with different set sizes (m,n).
6.3 Authentication Delay
the
ﬁrst
empirically measure
We
performance
of PrivateDrop’s online phase for variable set sizes n
and m (cf. Tab. 3). For this, we run a set of experiments
between the MacBook Pro 2019 (sender) and iPhone 12 (re-
ceiver). In order to minimize noise introduced by the wireless
channel, we conduct this experiment via a USB cable
connection between sender and receiver. We later evaluate
the impact of the wireless channel in § 6.4.
Overall Delay. In Fig. 6, we show the delay of the com-
plete authentication phase (phase (2) in Figs. 1 and 5),
for PrivateDrop and AirDrop. AirDrop authentication is in-
dependent of m and n, and, therefore, we include the me-
dian delay as a baseline. In contrast, the PrivateDrop run-
time increases with both m and n as expected. Our results
for PrivateDrop show that for moderate settings (m = 10, n =
1000), the median authentication delay is increased by 2×
compared to AirDrop. Even for extreme scenarios (m =
20, n = 15000), the overall delay stays below 500 ms. This
satisﬁes our user experience requirement as humans perceive
any delay below 1 000 ms as an “immediate response” [22].
Figure 8: Transmission delay of AWDL and cable connections for
the AirDrop (Discover) and PrivateDrop (StartPSI and FinishPSI)
requests for a ﬁxed number of identiﬁers m = 10.
PSI Delay. We closer investigate the impact of the PSI on-
line phase on the overall authentication delay. Fig. 7 shows the
computation time of the individual operations on an iPhone 12.
In fact, only computing the actual intersection depends on the
number of address book entries n (cf. violet parts in Fig. 7)
and is at most 5 % of the total time for n = 15000. All other
arithmetic operations increase linearly with m, which vali-
dates our complexity analysis in § 4.6. In absolute terms, the
median computational overhead is less than 12 ms for m = 1
and stays below 50 ms for m = 20. Note that a complete pro-
tocol execution requires identical operations on both sides.
To get the total PSI overhead, we can double these numbers
if assuming identical hardware for sender and receiver. Still,
the PSI operations alone make up less than half of the total
authentication delay (cf. Fig. 6). The other major component
is networking delay, which we explore next.
6.4 Networking Delay
AirDrop originally uses a wireless connection between sender
and receiver. We want to understand the impact of the net-
working delay and provide a comparison between AWDL and
the cable connection (cf. § 6.3). To this end, we repeat the pre-
vious experiment over AWDL and measure the transmission
delay of the HTTPS requests and replies. In particular, we
record timestamps T1..4 for each request-response pair, i.e.,
T1
T4
Request
−−−−−−−−−−→ T2
←−−−−−−−−−− T3
Response
and calculate the delay as t = T4 − T1 − (T3 − T2) to exclude
the receiver-side processing delay. Fig. 8 shows the median
transmission delays t incurred by StartPSI and FinishPSI ex-
changes for both wireless and cable connections. We add the
median transmission delay of AirDrop’s Discover request for
reference. Qualitatively, we can observe that the number of
address book entries n has a stronger impact on transmission
3588    30th USENIX Security Symposium
USENIX Association
100100050001000015000Numberofaddressbookentriesn0200400Authenticationdelay[ms]Numberofidentiﬁersm11020AirDropbaseline(median)100100050001000015000Numberofaddressbookentriesn02040Computationtime[ms]#identiﬁersm11020PSIoperationziai,c,pc,ypi,ai·zciviIntersectuj=vi100100050001000015000Numberofaddressbookentriesn05001000Duration[ms]PrivateDropFinishPSIStartPSIAWDLCableAirDropAWDLCabledelay for AWDL than for the cable connection and that the
transmission delay constitutes about half of the overall au-
thentication delay. Interestingly, the transmission delay for
both PSI requests is similar over the cable, while the ﬁrst
request takes up signiﬁcantly more time over AWDL. The
reason is that the ﬁrst request includes the time required for
connection setup, which generally takes longer over AWDL
and has a higher variance, as we discuss next.
High Variance of AWDL Transmission Delays. We no-
ticed a high variance of the transmission delays over AWDL
compared to the cable connection (cf. App. A). This effect
can be explained by AWDL’s channel allocation mechanism.
AWDL initially allocates few time slots for transmissions,
i.e., little bandwidth is available, and then dynamically allo-
cates more if there is load on the Wi-Fi interface [90]. Thus,
initial Wi-Fi transmissions are deferred to the next available
time slot, resulting in uncontrollable delays in the order of
one second, which is the length of an AWDL period. The
increase of available bandwidth over time also explains why
the median transmission delay of the ﬁrst message (StartPSI)
is signiﬁcantly larger than the second one (FinishPSI).
6.5 Precomputation
While online performance is most crucial for user experience,
the precomputation of the encrypted address book entries u j
must also be manageable on mobile devices. Therefore, we
evaluate the runtime of calculating the values u j during the
precomputation phase (cf. Fig. 4). As the runtime linearly
depends on n (cf. § 4.6), we run a linear regression on the
results from an iPhone 12 to approximate the runtime as n×
0.331ms. We provide the raw results in App. B. We see that
even for large address books (n = 10k), the single-threaded
precomputation takes only 3.31 s. To save battery, mobile
devices could defer the precomputations to times when they
are charging, e.g., overnight.
7 Related Work
We survey closely related works for private mutual authenti-
cation, complete our overview of available PSI protocols in
addition to our selection process described in § 4.3, review fur-
ther secure computation techniques, and discuss other privacy
leaks in Apple’s wireless ecosystem.
7.1 Private Mutual Authentication
The most closely related work to ours is [96]. The authors
devise a mutual authentication protocol similar to [3, 4, 54],
but geared towards various discovery services, including the
contacts-only mode of Apple AirDrop. Utilizing identity-
based encryption (IBE) [19], the AirDrop sender distributes
encryptions of its identity under a certain “authorization pol-
icy”. This policy states that only the contacts of this party
can decrypt the identity. The authors also implement and
benchmark their approach. On a Nexus 5X smartphone, the
private authentication takes 360.4 ms.
First of all, the work of [96] mainly targets a different
privacy issue in AirDrop, namely the information leakage
caused by exchanging the certiﬁcates for establishing the TLS
connection, which leaks information even to nearby passive
adversaries. However, the authors operate under the assump-
tion that these certiﬁcates contain the device owner’s identity
in the clear and are actually used for verifying that sender and
receiver are mutual contacts. As recently shown in [92], this
is not how AirDrop is currently implemented: the certiﬁcates