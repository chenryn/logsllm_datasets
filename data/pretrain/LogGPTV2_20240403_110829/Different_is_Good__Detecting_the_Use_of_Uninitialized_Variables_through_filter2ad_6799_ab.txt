memory value 0xaa.
trace data flow at runtime. In the following, we will describe how
our tool detects this vulnerability with a high-level description.
First, we leverage the first key technique of our system to re-
play the recorded execution with poisoned kernel stack. During
this process we find a difference of the program state as shown in
Figure 3. Specifically the value at the memory location 0x021afad8
is different in two instances. That means an uninitialized data from
the kernel stack is used. Moreover, we get the stack trace by us-
ing the function symbols and stack information that comes with
TimePlayer. This stack trace helps the manual analysis of the vul-
nerability.
After that, we leverage the second key technique of our system
to locate the source of the uninitialized variable, i.e., where this data
was allocated. To this end, we perform a symbolic taint analysis
starting from the last N (we used 500 in the experiment) kernel stack
frames, and find the source of the leaked kernel data by applying
the taint analysis on the execution trace, as shown in Figure 5 on
page 7.
From Figure 5, we can see that the kernel frame is allocated at
the instruction 0x83c6f838 (sub esp, eax). Our system sets the
memory region ([0x9e12fc44:0x9e12fcbf]) as the taint source
with a symbolic taint tag  2. Then, with
the program execution, the taint tag will be removed from the
memory region if it is initialized (line 2), or propagated to other
memory regions (line 3) and registers (line 4). At last, the use
of the uninitialized variable is detected (line 5). In this example,
the taint tag is first propagated to the ecx register (line 4), and
then leaked to the user space memory ([0x21afad8:0x21afadb])
through the ecx register at the instruction address 0x83e24501
(nt!IopXxxControlFile+418) (line 5). Note that, the symbolic taint
2BV992 denotes the tag that is a bit vector with a length of 992 bits, each one denotes
one tainted memory bit.
rr_icount:302035663pc:83e24501  module:\SystemRoot\system32\ntoskrnl.exe, base:83c18000, offset:0020c501addr1:021afad8        value:[01 00 00 00](Difference) 00 00 00 00   rr_icount:302035663pc:83e24501  module:\SystemRoot\system32\ntoskrnl.exe, base:83c18000, offset:0020c501addr1:021afad8        value:[aa aa aa aa](Difference) 00 00 00 00 8408a7a2 nt!IopXxxControlFile+0x3d983e48b8e nt!NtDeviceIoControlFile+0x2a771f6bb4 nt!KiSystemServicePostCall771f538c ntdll!KiFastSystemCallRet004011e8 ntdll!ZwDeviceIoControlFile+0xcStack traceDifferent program stateSession 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1886Figure 4: The overview of TimePlayer. It leverages the differential replay to detect the use of uninitialized variables, and the
symbolic taint analysis to identify the sources of these variables.
execution. Other user-level tools like PIN and Valgrind will reside
in the program’s memory space, which could change the program’s
behaviors like memory allocation. This non-intrusive requirement
to the target program (or the operating systems) is important to
our system.
Second, our system needs to track the data flow inside the whole
system, since variables could cross different privileged domains.
Hence, we need a full system emulator that can run the OS ker-
nel, system services and user-mode applications. This requirement
excludes user-model instrumentation frameworks, e.g., PIN and
Valgrind.
Third, PANDA is able to perform a system-wide deterministic
replay. It ensures that the instructions, and other non-deterministic
system events like interrupts, inputs can be replayed in a determin-
istic order. This capability enables us to reliably compare program
states to find differences that are affected by the poisoned memory.
In our system, the recording functionality is built upon the
PANDA system. During the implementation, we found and fixed
several bugs in PANDA, such as missing some types of PCI DMA
data, errors of handling syscalls2 in the multi-threading scenario
and etc.
4.2 Poisoning Memory
During the replay, we launch two instances. One instance does not
change any memory, and another one is with poisoned memory
of both the stack and the heap. We call the instance with vanilla
memory as normal record-replay instance (RRNormal in short) in
this paper. For another replay instance, memory regions are initial-
ized with special values upon creation. Such an instance is called
poisoned record-replay instance (RRPoisoned in short). To be spe-
cific, we change initial values of the memory allocated from the
kernel stack and the heap. After that, if the program state is differ-
ent between the RRNormal instance and the RRPoisoned instance, a
use of an uninitialized variable variable is detected.
Poisoning timing To poison the memory allocated from the
kernel stack and the heap, we need to find a way to monitor the
creation of a new stack frame, and the allocation of new memory
regions from the heap.
(1) Stack frame creation: When there is a subtraction operation on
the stack pointer register (the esp register in x86 for instance),
a new stack frame is created and its size could be obtained from
the constant operator of the subtraction instruction. We can
then poison the memory region inside the newly allocated stack
frame accordingly.
(2) Heap memory allocation: When a function is invoked through
a call instruction (or a similar one), we check the callee to
determine whether a heap allocation occurs. For instance, if the
callee is ExAllocatePoolWithTag in Windows, then a new space
is being allocated from the heap, and the size of the memory
can be retrieved from the parameters of these functions.
Poisoning policies Different scenarios have different require-
ments in terms of the granularity and poisoned values. To this end,
TimePlayer supports different memory poisoning policies to fulfill
these needs.
(1) Granularity: Our system supports different poisoning granular-
ity, ranging from fine-grained byte level to coarse-grained word
level. For instance, when using byte-level poisoning granularity,
every poisoned byte will be different from one another. This is
the default granularity of our system.
(2) Poisoned value: By poisoning the kernel memory and comparing
the memory write operation to user space, our system could
Execution RecordingWhole-system Execution TraceDeterministic ReplayNormal MemoryDeterministic ReplayPoisoned Memory(Stack & Heap)Execution ComparisonDetected the Use of Uninitialized Variableat InstructiondiffSymbolic ExecutionTaint AnalysisInstruction0InstructionnInstructiondiff…………InstructiondiffTaint SinkTaint SourcePoisoned Memory(Stack & Heap)Identified Sources ofUninitialized VariablesKey Technique I: Differential ReplayKey Technique II: Symbolic Taint Analysis123456Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1887identify kernel information leak. For instance, we can poison
every byte allocated from the kernel stack with a special value
0xaa.
TimePlayer keeps a record of all the poisoned memory into a list
called poisoning history. This list will be used in the symbolic
taint analysis in Section 5 to help locate the source of uninitialized
variables.
4.3 Comparing Replay Instances
Our system compares the state of the RRPoisoned instance with the
RRNormal instance. It simultaneously checks and compares the exe-
cution of some specific instructions, which are defined as checking
points as follows.
Checking points Remember that TimePlayer is mainly designed
to detect the use of uninitialized variables. Accordingly, we only
perform the comparison at certain instructions, namely checking
points in our system. They include memory read and write instruc-
tions. For instance, for the mov rax, qword ptr [rsi] instruction,
our system compares both the address value in the register rsi
and the memory value fetched from that address in the two replay
instances. However, our system only considers a kernel information
leak when a memory write instruction is executed with the kernel
privilege and the destination address is in user-space area, while at
the same time there is a difference between two replay instances.
Difference comparison We implement the difference compari-
son via the memory R/W callbacks in PANDA. Our system main-
tains a block of shared memory between two replay instances,
which uses a data structure called Checking Points’ Information
Record (CPIR) to log detailed context information, e.g. accessed
memory addresses and contents. All the CPIR entities are main-
tained using a linked list in the shared memory.
Specifically, the two replay instances interact in a producer-
consumer manner. The RRNormal instance replays first. After a
basic block is executed, a corresponding CPIR entity is pushed onto
the top of CPIR list. Once the shared memory is full, the RRPoisoned
instance is notified to start execution and pause the execution itself.
The RRPoisoned instance fetches the CPIR from the shared memory
and compares the accessed memory addresses and contents. It
repeats this process until the shared memory is exhausted. Then it
notifies the RRNormal instance to continue the execution and pauses
itself.
Once a difference is found, our system logs the detailed context
information. In this paper, we name the checking point with differ-
ences as differential point. The context information, along with
the poisoning history will be used to identify the exact location
where the uninitialized data was allocated (Section 5).
Continuation after the differential point After identifying
one differential point, our system needs to continue the execu-
tion to find more. If an uninitialized variable does not affect the
control flow of a program, it is straightforward to continue the
replay. However, uninitialized variables may influence the control
flow. For instance, the control flow of a program may depend on
a comparing operation of the variable with a constant or another
variable. Since the variable has been poisoned, it will lead to a
change in the control flow compared to the original (recorded) one.
This may confuse the replay functionality of the PANDA due to the
misalignment of instruction count number. In this case, we need to
find a solution to fix these side effects to let PANDA continue the
replay process of the program.
Specifically, if we know which conditional branch instruction
would use the uninitialized variable, we can dynamically feed the
instruction at differential point with the data in RRNormal re-
play instance, instead of the data from the RRPoisoned. We can
transparently do this since the execution of the RRNormal is before
the RRPoisoned, and they are synchronized using the shared mem-
ory. Hence, we directly copy the data from the RRNormal instance
and use it in the RRPoisoned instance.
Parallel replay The differential replay will incur high perfor-
mance overhead, since we need to compare the program state at
each checking point. To speed up this process, we introduce the
concept of parallel replay in our system, based on the scissors
plugin of PANDA. Our parallel replay works in the following way.
It first performs a normal replay, but saves multiple snapshots (N1,
N2 and etc.) and non-deterministic events (S1, S2 and etc.) with
numbers of instruction count C1, C2 and etc. After that, we can
replay the saved snapshots (along with the saved non-deterministic
events) in parallel, with each one as a normal replay instance (Sec-
tion 2 illustrates the background information of record and replay
of PANDA.)
The parallel replay may lead to false negatives in theory. For in-
stance, if an instruction in one piece of the snapshot uses a variable
which was allocated from a preceding piece, it will be missed by
our parallel replay, since the poisoning states in different pieces are
separated. Although this problem could be mitigated with a trace
slicing mechanism, which carefully chooses the points where vari-
ables would not be split, our system takes a more straightforward
workaround. When splitting the whole snapshot into pieces, we
expand the range of each piece so that it overlaps with adjacent
ones. Though this mechanism cannot totally solve the problem, it
reduces chances of occurrence. We will show the evaluation result
of parallel replay in Section 6.3.
5 KEY TECHNIQUE II: SYMBOLIC TAINT
ANALYSIS
When a differential point is detected, we need to further de-
termine the source of the uninitialized variable, i.e., the location
where the variable was allocated. The second key technique of our
system, i.e., symbolic taint analysis, aims to fulfill this requirement.
5.1 Preparing Traces and Contexts for Taint
Analysis
Our taint analysis applies to the trace of a program’s execution.
However, for performance concern, our system does not actively
collect the context of the execution trace during the process of
differential replay. Instead, when a differential point is detected, we
look backward a number of instructions (this number is determined
adaptively), and replay the execution from there to the differential
point. We then collect the traces with detailed context information
of each executed instruction accordingly.
We implemented a PANDA plugin to collect the context of exe-
cution traces. Specifically, for each instruction, our system logs the
value of the program counter (PC), the stack pointer, and values of
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1888Figure 5: One example of the symbolic taint analysis. The taint expression (the fifth column) in the table will be applied to the
taint destination (the fourth column), i.e., the register or the memory region.
general purpose registers, the instruction sequence count, accessed
memory addresses, etc. During this process, the semantics of each
instruction is needed to guarantee that only the used operands (ex-
plicit and implicit) are inspected and logged. This is implemented
with aids of Intel XED[23] and Capstone[51] for x86 and ARM re-
spectively. Our system also supports the extension instruction sets,
e.g., x87/MMX/SSE/AVX for x86.
However, how to set the code location where the trace starts, i.e.
how far do we need to look backward, needs a further consideration.
If the location is too far from the differential point, then it will take
a long time to replay from that address and the size of the log file
will be big. In contrast, if the location is too close, we could miss
the location where the uninitialized variable was allocated.
In this paper, we propose a mechanism similar to the sliding
window protocol. Specifically, we define the number of the stack
frame as the window size, and set an initial value of the window size.
Then we adaptively increase the size if the instructions inside the
window do not cover the location where the variable is allocated.
We continue this process until we successfully locate the allocation
point, or when the window size reaches a threshold.
5.2 Symbolic Taint Analysis
After obtaining the trace and context information, we will perform
the symbolic taint analysis. In our system, we define the memory
regions that have been poisoned as taint sources (and assign cor-
responding symbolic expressions), while addresses and contents
of the memory operands of the instruction at the differential
point as taint sinks. After that, symbolic execution is carried out
so that the taint expressions (tags) are propagated along the trace.
Expressions are split or simplified if needed along the execution. In
the following, we will use an example to elaborate this process.
Figure 5 illustrates the taint tag propagation process where an
uninitialized variable gets leaked from the kernel stack into a user-
space program (see the motivating example in Section 2.2). The
main operation is adding or removing taint tags to or from memory
regions and registers. Specifically, in the first line of the figure, a
new kernel stack frame is allocated. Our system assigns a new taint
tag to the whole stack frame memory region, with an expression
. The symbol TAINT_S_0_992 denotes this
is a tainted stack with index 0 and the length of the tainted memory
is 992 bits (124 bytes). Since we will have multiple stack frames
during program execution, our system maintains a mapping table
between the stack index to the concrete memory address. The
second line of the operation is to remove the taint tag from the
memory region [0x9e12fca4: 0x9e12fca4] (1-byte long) because
the 1-byte constant value has been written into that memory. We
continue this process until the fourth instruction in the figure that
propagates the taint tag from memory into ecx register, and the
fifth instruction that propagates the taint tag from ecx register to
memory. It turns out that the destination memory address belongs
to user space, which means a tainted memory value (an uninitialized
variable) has been leaked to a user program. Moreover, with the taint
expression, we can further locate the stack where the variable was
allocated, and the length (32 bits) of the leaked data. In our system,
the symbolic taint analysis is implemented by using SimuVEX [59]
library with the symbolic execution engine on top of the VEX IR.
Note that our system does not need to solve the expression.
5.3 Optimizations
Our system introduces two optimizations, i.e., selective execution
and symbolic expression packing, to improve the performance of
symbolic taint tracking.
 Operation Taint Source Taint Destination Taint Expression Instruction Note 1 Taint Memory / [0x9e12fc44: 0x9e12fcbf]  0x83c6f838 sub esp, eax A new kernel stack frame is allocated. The taint expression is applied to the stack frame (992 bits) …… 2 UnTaint Memory / [0x9e12fca4: 0x9e12fca4]  0x83e24116 mov byte ptr [ebp-0x2c], cl The taint tag is removed from the memory range [0x9e12fca4: 0x9e12fca4] since a constant value (one byte) 0x1 is written into the memory. 3 Taint Memory [0x9e12fca4: 0x9e12fca7] [0x9e12fc28: 0x9e12fc2b]  0x83e24218 push dword ptr [ebp-0x2c] The taint tag from [0x9e12fca4: 0x9e12fca7] is propagated to [0x9e12fc28: 0x9e12fc2b]. After that, the taint expression of the destination memory region comprises of three tainted bytes and one constant byte (valued 0x1). …… 4 Taint Register [0x9e12fc60: 0x9e12fc63] ecx  0x83e244fe mov ecx, dword ptr [ebp-0x70] The taint tag from [0x9e12fc60: 0x9e12fc63] is propagated to ecx register. 5 Taint Memory ecx [0x21afad8: 0x21afadb]  0x83e24501 mov dword ptr [eax+4], ecx The taint tag is propagated from ecx to user-space memory [0x21afad8: 0x21afadb]. The source of the uninitialized variable is located (on kernel stack) and the exact position is also obtained (from bit 256 to bit 289).  Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1889Table 1: The test cases used in the evaluation. We ran these
programs in Windows with our system. User (remote) login
means we record the process of (remote) user login (through
the Microsoft remote desktop protocol.)
Name
ReactOS Test Suite
Firefox
Chrome 32 bits
Version
0.4.9
64.0.2
71.0.3571.98
IE
11.0.9600.19080IS
User Remote Login
Name
Youku
Chrome 64 bits
User Login
Version
7.6.8.12071
70.0.3533.110
-
-
threshold values are obtained through the experiments of multiple
benchmark programs.
Figure 6 shows a real example taken from the taint analysis in
the latest version of Windows 7 kernel. In this example, we firstly
set the kernel stack frame ([0xb1dab99c:0xb1dab9df]) as the taint
source tagged . Then, after three copy instruc-
tions (rep movs/push/mov), 4 bytes from kernel stack are passed
to edx register and remain uninitialized. After multiple arithmetic
and bit-wise operations (Addition, Subtraction, Multiplication, Sign
Extend, Bit Shift, etc.), the complexity of this symbolic expression
will exceed the threshold. Our system packs the expression accord-
ingly and generates a new simple expression used in the subsequent
calculation. To preserve the taint information, our system records
the relationship between the new expression and the original one.
6 EVALUATION
In the following, we present the evaluation result of our system.
Our evaluation aims to answer the following questions.
Q1 - effectiveness: Can TimePlayer detect new vulnerabilities,
and perform better than the state-of-the-art tool?
Q2 - efficiency: Can TimePlayer quickly detect the vulnerabilities?
Q3 - performance overhead: What is the performance overhead
of the key techniques used by TimePlayer and whether proposed
optimizations improve the performance of our system?
During the evaluation, all experiments were performed on a
server with an Intel I7-7700K Quad-core 4.20 GHz processor and
32G bytes RAM, running the Ubuntu 14.04.1 system. TimePlayer is
based on the full-system emulator, i.e., PANDA. Thus all operating
systems evaluated are running as guest OSes, with 2G bytes RAM
allocated to each one.
6.1 Effectiveness
We applied our system to multiple Windows 7 and 10 versions
(both 32 and 64 bits) in a period of seven months (from July 2018 to
January 2019). Specifically, we leveraged 8 test cases and ran them
in windows 7 and 10 systems with the latest patches at that time,
and used our system to record and replay the execution to detect
the information leak from kernel space to user space. The test cases
used in our evaluation are shown in Table 1. During the test, we
poison the kernel memory data using the byte-level granularity.
New vulnerabilities: Table 2 shows the result of newly detected
issues and vulnerabilities 3, and their detailed information. In to-
tal, our system identified 34 cases of kernel information leak in
3In this paper, we use issues to denote findings that have not been confirmed by
Microsoft, and vulnerabilities to denote the ones that have been confirmed.
(a) The code snippet that propagates taint expression. Instructions in bold
denote the ones that affect the register ECX.
The
(b)
win32k!GreGetCharABCWidthsW+1AD
expression
symbolic
of
the
register
ECX
after
Figure 6: The real example of a complicated symbolic expres-
sion that should be packed.
Selective execution Our system does not always use the sym-
bolic execution engine to execute each instruction. If an instruction