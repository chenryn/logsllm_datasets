A direct identification of software packages running on other
cores in a cloud environment based on cache side-channels was
demonstrated by [26, 27]. The measurement requires a local pres-
ence, does not scale and cannot be used on archived datasets. How-
ever, it recovers not only the library, but also a particular version.
Measurements and analyses of the TLS ecosystem have a long
history with large scale scans starting in 2010 with the EFF SSL
Observatory project [2], followed by analyses of both valid cer-
tificates [13, 16, 17, 19, 20] (the majority of papers) as well as in-
valid ones [12]. The significant increase of popularity of Certificate
Transparency servers now provides a view of the certificates that
are otherwise unreachable via IP address based scanning [37]. Re-
searchers usually focus on the properties of the certificates (e.g.,
validity period) or the certificate chain extracted from the TLS hand-
shakes. Chosen cryptographic algorithms and key lengths were
also analyzed [15, 25], showing that more than 85% of currently
6 CONCLUSIONS
A wide-scale accurate measurement of the popularity of crypto-
graphic libraries is an important precursor for a security analysis of
the Internet ecosystem, such as an evaluation of resilience against
security bugs. Yet so far, it was based only on proxy measurements,
like the popularity of web server implementations. We proposed a
measurement method based on statistical inference, which finds a
match between the observed distribution of keys on the Internet
and a specific proportion of reference distributions of RSA public
keys extracted from cryptographic libraries. Our method does not
rely on active communication with a server implementation, hence
it also works when proxy information is not available, such as for
SSH client keys, where direct scanning of clients is not performed.
The analysis is possible thanks to the recently discovered biases in
the implementations of RSA public key generation [36].
The results show an overall increasing reliance on OpenSSL –
its share grew from 56% to 70% between the years 2010 and 2017 as
observed from keys used by TLS servers. The prevalence of OpenSSL
reaches almost 85% within the current Alexa top 1M domains and
more than 96% for client-side SSH keys as used by GitHub users.
The usage trends of Microsoft libraries are mostly stable with a
share of around 20% for TLS serves and a 10% share of the Alexa top
1M domains. The GnuPG Libgcrypt library and statistically similar
implementations are responsible for 85% of all PGP keys. Certificate
Transparency logs provide a different ratio of libraries for recently
added certificates than Internet-wide scans – OpenSSL is down to
60%, Microsoft is at only 3.5% (probably due to longer validity of
certificates) and the remaining libraries account for more than 35%
(while their share in IPv4 TLS scans is lower than 10%).
This method can also capture short-term events, when incremen-
tal datasets are examined (e.g., daily changes). We observed that
many certificates from specific libraries were submitted to Certifi-
cate Transparency logs periodically, coinciding with the validity
of Let’s Encrypt certificates. Our measurement also revealed an
inconsistency between historical datasets, caused by a bug in the
scanning software of Project Sonar, which led to an omission of
more than a million Microsoft servers from IPv4 TLS scans during
the period of 18 months.
ACKNOWLEDGMENTS
We would like to thank our colleagues for fruitful discussions, espe-
cially Marek Sys and Stanislav Katina. We acknowledge the support
of the Czech Science Foundation under project GA16-08565S. The
access to the computing and storage resources of National Grid In-
frastructure MetaCentrum (LM2010005) is also greatly appreciated.
Vashek Matyas thanks Red Hat Czech and CyLab, Carnegie Mellon
University for a supportive sabbatical environment during some of
his work on this paper.
172REFERENCES
[1] DSA-1571-1 openssl – predictable random number generator, 2008. [cit. 2017-09-
20]. Available from https://www.debian.org/security/2008/dsa-1571.
[2] The EFF SSL Observatory, 2010. [cit. 2017-09-20]. Available from https://www.
eff.org/observatory.
[3] Censys TLS Alexa Top 1 Million Scan, 2015. [cit. 2017-09-20]. Available from
https://censys.io/data/443-https-tls-alexa_top1mil.
[4] Censys TLS Full IPv4 443 Scan, 2015. [cit. 2017-09-20]. Available from https:
//censys.io/data/443-https-tls-full_ipv4/historical.
[5] LZ4 Extremely Fast Compression algorithm, 2015. [cit. 2017-09-20]. Available
[6] Rapid 7 Sonar SSL full IPv4 scan, 2015. [cit. 2017-09-20]. Available from https:
from http://www.lz4.org/.
//scans.io/study/sonar.ssl.
[7] Debian quality assurance: Popularity contest statistics, 2017. [cit. 2017-09-20].
Available from https://qa.debian.org/popcon.php.
[8] Albrecht, M. R., Degabriele, J. P., Hansen, T. B., and Paterson, K. G. A
surfeit of SSH cipher suites. In Proceedings of the 2016 ACM SIGSAC Conference
on Computer and Communications Security (2016), CCS ’16, ACM, pp. 1480–1491.
[9] Barbulescu, M., Stratulat, A., Traista-Popescu, V., and Simion, E. RSA weak
public keys available on the Internet. In International Conference for Information
Technology and Communications (2016), Springer-Verlag, pp. 92–102.
[10] Bernstein, D. J. Cache-timing attacks on AES, 2005. [cit. 2017-09-20]. Preprint
available at https://cr.yp.to/antiforgery/cachetiming-20050414.pdf.
[11] Brumley, D., and Boneh, D. Remote timing attacks are practical. In Computer
Networks (2005), vol. 48, Elsevier, pp. 701–716.
[12] Chung, T., Liu, Y., Choffnes, D., Levin, D., Maggs, B. M., Mislove, A., and
Wilson, C. Measuring and applying invalid SSL certificates: The silent majority.
In Proceedings of the 2016 ACM on Internet Measurement Conference (2016), ACM,
pp. 527–541.
[13] Clark, J., and van Oorschot, P. C. SoK: SSL and HTTPS: Revisiting past chal-
lenges and evaluating certificate trust model enhancements. In IEEE Symposium
on Security and Privacy (2013), IEEE, pp. 511–525.
[14] Batch-GCDing Github SSH Keys, 2015. [cit. 2017-09-20]. Available from https:
//cryptosense.com/batch-gcding-github-ssh-keys/.
[15] Durumeric, Z., Adrian, D., Mirian, A., Bailey, M., and Halderman, J. A. A
search engine backed by internet-wide scanning.
In Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security (2015), ACM,
pp. 542–553.
[16] Durumeric, Z., Bailey, M., and Halderman, J. A. An internet-wide view of
internet-wide scanning. In Proceeding of USENIX Security Symposium (2014),
pp. 65–78.
[17] Durumeric, Z., Kasten, J., Adrian, D., Halderman, J. A., Bailey, M., Li, F.,
Weaver, N., Amann, J., Beekman, J., Payer, M., et al. The matter of Heartbleed.
In Proceedings of the 2014 Conference on Internet Measurement Conference (2014),
ACM, pp. 475–488.
[18] Durumeric, Z., Kasten, J., Bailey, M., and Halderman, J. A. Analysis of the
HTTPS certificate ecosystem. In Proceedings of the 13th Internet Measurement
Conference (2013).
[19] Durumeric, Z., Kasten, J., Bailey, M., and Halderman, J. A. Analysis of the
HTTPS certificate ecosystem. In Proceedings of the 2013 ACM Internet Measure-
ment Conference (2013), ACM, pp. 291–304.
[20] Felt, A. P., Barnes, R., King, A., Palmer, C., Bentzel, C., and Tabriz, P. Mea-
suring HTTPS adoption on the web. In 26th USENIX Security Symposium (2017),
USENIX Association, pp. 1323–1338.
[21] Georgiev, M., Iyengar, S., Jana, S., Anubhai, R., Boneh, D., and Shmatikov,
V. The most dangerous code in the world: validating SSL certificates in non-
browser software. In Proceedings of the 2012 ACM Conference on Computer and
Communications Security (2012), ACM, pp. 38–49.
[22] Gustafsson, J., Overier, G., Arlitt, M., and Carlsson, N. A first look at the
CT landscape: Certificate Transparency logs in practice. In Proceedings of the 18th
Passive and Active Measurement Conference (2017), Springer-Verlag, pp. 87–99.
[23] Hastings, M., Fried, J., and Heninger, N. Weak keys remain widespread
in network devices. In Proceedings of the 2016 ACM on Internet Measurement
Conference (2016), ACM, pp. 49–63.
[24] Heninger, N., Durumeric, Z., Wustrow, E., and Halderman, J. A. Mining your
Ps and Qs: Detection of widespread weak keys in network devices. In Proceeding
of USENIX Security Symposium (2012), vol. 8.
[25] The ICSI Certificate Notary, 2017. [cit. 2017-09-20]. Available from https://notary.
icsi.berkeley.edu/.
[26] Inci, M. S., Gulmezoglu, B., Eisenbarth, T., and Sunar, B. Co-location detection
on the cloud. In International Workshop on Constructive Side-Channel Analysis
and Secure Design (2016), Springer-Verlag, pp. 19–34.
[27] Irazoqi, G., IncI, M. S., Eisenbarth, T., and Sunar, B. Know thy neighbor:
crypto library detection in cloud. Proceedings on Privacy Enhancing Technologies
2015, 1 (2015), 25–40.
[28] Kaminsky, A. Parallel Java 2 library (PJ2), 2017. [cit. 2017-09-20]. Available from
https://www.cs.rit.edu/~ark/pj2.shtml.
[29] Klafter, R., and Swanson, E. Evil 32, 2015. [cit. 2017-09-20]. Available from
https://evil32.com.
[30] Lawson, C. L., and Hanson, R. J. Solving Least Squares Problems. SIAM, 1995.
[31] Lazar, D., Chen, H., Wang, X., and Zeldovich, N. Why does cryptographic
software fail?: a case study and open problems. In Proceedings of 5th Asia-Pacific
Workshop on Systems (2014), ACM, pp. 1–7.
[32] Mironov, I. Factoring RSA Moduli II. [cit. 2017-09-20]. Available from https:
//windowsontheory.org/2012/05/17/factoring-rsa-moduli-part-ii/.
[33] NetCraft April 2017 Web Server Survey, 2017. [cit. 2017-09-20]. Available from
https://news.netcraft.com/archives/2017/04/21/april-2017-web-server-survey.
html.
[34] NetCraft operating system detection, 2017. [cit. 2017-09-20]. Available from
http://uptime.netcraft.com/accuracy.html#os.
[35] Nmap Remote OS Detection, 2017. [cit. 2017-09-20]. Available from https://nmap.
org/book/osdetect.html.
[36] Svenda, P., Nemec, M., Sekan, P., Kvasnovsky, R., Formanek, D., Komarek, D.,
and Matyas, V. The million-key question — Investigating the origins of RSA
public keys. In Proceeding of USENIX Security Symposium (2016), pp. 893–910.
[37] VanderSloot, B., Amann, J., Bernhard, M., Durumeric, Z., Bailey, M., and
Halderman, J. A. Towards a complete view of the certificate ecosystem. In
Proceedings of the 2016 ACM on Internet Measurement Conference (2016), ACM,
pp. 543–549.
A ADDITIONAL RESULTS
Table 3 shows the sources considered in the analysis, together with
the relevant biases.
Figure 8 shows the number of keys attributed by us to different
cryptographic libraries in certificates from the Alexa Top 1 million
domains collected by Censys. The number of OpenSSL keys is rising
and the percentage of keys coming from Microsoft implementations
is much smaller than in general TLS scans.
Previous analyses of Internet-wide TLS scans [13, 16, 17, 19] com-
pared various properties of certificates. Valid and invalid certificates
were compared by [12], showing that the majority of certificates
found by scans are invalid and have interesting properties.
We compared self-signed certificates to certificates signed by
third parties in historical datasets from HTTPS Ecosystem and
Rapid7 Project Sonar. Figure 9 shows a significant difference in the
keys coming from such certificates. Most notably, Microsoft keys
are found in self-signed certificates less commonly than OpenSSL
keys. As explained in Section 4.2, the decrease in the number of
certificates between 11/2013 to 06/2015 is caused by an improper
implementation of the TLS v1.2 handshake used by Project Sonar.
Figure 8: More domains from the Alexa Top 1M list use
OpenSSL (Group 7) now than in 2015. Note that the number
of keys does not sum to 1M already in the original dataset
collected by Censys. Some websites do not support HTTPS
[20] or the specific cipher-suite used by the Censys scanner.
09/1510/1511/1512/1501/1602/1603/1604/1605/1606/1607/1608/1609/1610/1611/1612/1601/1702/1703/1704/170.0M0.1M0.1M0.1M0.2M0.2M0.3MEstimated number of keys12345678910111213173Figure 9: Comparison of library popularity for keys coming from certificates signed by a third party (top) and self-signed
certificates (bottom). Self-signed certificates are dominated by OpenSSL. More than 50% of OpenSSL keys observed in 2012
were found in self-signed certificates. For OpenSSL, the number of not self-signed certificates rose faster than the number of
self-signed certificates, and significantly more OpenSSL certificates are now signed by a third party. Fewer than 25% Microsoft
keys were found in self-signed certificates in majority of the scans. Self-signed certificates are implicitly not trusted by web
browsers. Only a subset of the not self-signed certificates have certificates chains leading to a browser-trusted root CA.
07/1210/1201/1304/1307/1310/1301/1404/1407/1410/1401/1504/1507/1510/1501/1604/1607/1610/1601/1704/170.0M1.0M2.0M3.0M4.0MEstimated number of keysHTTPS EcosystemRapid7 SonarGroup  1: G&D SmartCafe 3.2Group  2: G&D SmartCafe 4.x & 6.0Group  3: GNU Crypto 2.0.1Group  4: Gemalto GXP E64Group  5: NXP J2A080 & J2A081                 & J3A081 & JCOP 41 V2.2.1Group  6: Oberthur Cosmo Dual 72KGroup  7: OpenSSL 0.9.7 & 1.0.2g                 & 1.0.2k & 1.1.0eGroup  8: PGPSDK 4 FIPSGroup  9: Infineon JTOP 80K, YubiKey 4 & 4 NanoGroup 10: NXP J2D081 & J2E145G, YubiKey NEOGroup 11: BouncyCastle 1.54 (Java), Crypto++ 5.6.0 & 5.6.3 & 5.6.5,                  Libgcrypt 1.7.6 FIPS, Microsoft CryptoAPI & CNG & .NETGroup 12: BouncyCastle 1.53 (Java), Cryptix JCE 20050328,                  FlexiProvider 1.7p7, HSM Utimaco Security Server Se50,                  Nettle 2.0, PolarSSL 0.10.0, PuTTY 0.67, SunRsaSign OpenJDK 1.8.0,                  mbedTLS 1.3.19 & 2.2.1 & 2.4.2Group 13: Botan 1.5.6 & 1.11.29 & 2.1.0, Feitian JavaCOS A22 & A40,                  Gemalto GCX4 72K, HSM SafeNet Luna SA-1700, LibTomCrypt 1.17,                  Libgcrypt 1.6.0 & 1.6.5 & 1.7.6, Libgcrypt 1.6.0 FIPS & 1.6.5 FIPS,                  Nettle 3.2 & 3.3, Oberthur Cosmo 64, OpenSSL FIPS 2.0.12 & 2.0.14,                  PGPSDK 4, WolfSSL 2.0rc1 & 3.9.0 & 3.10.2, cryptlib 3.4.3 & 3.4.3.107/1210/1201/1304/1307/1310/1301/1404/1407/1410/1401/1504/1507/1510/1501/1604/1607/1610/1601/1704/170.0M0.5M1.0M1.5M2.0M2.5M3.0M3.5MEstimated number of keysHTTPS EcosystemRapid7 SonarGroup  1: G&D SmartCafe 3.2Group  2: G&D SmartCafe 4.x & 6.0Group  3: GNU Crypto 2.0.1Group  4: Gemalto GXP E64Group  5: NXP J2A080 & J2A081                 & J3A081 & JCOP 41 V2.2.1Group  6: Oberthur Cosmo Dual 72KGroup  7: OpenSSL 0.9.7 & 1.0.2g                 & 1.0.2k & 1.1.0eGroup  8: PGPSDK 4 FIPSGroup  9: Infineon JTOP 80K, YubiKey 4 & 4 NanoGroup 10: NXP J2D081 & J2E145G, YubiKey NEOGroup 11: BouncyCastle 1.54 (Java), Crypto++ 5.6.0 & 5.6.3 & 5.6.5,                  Libgcrypt 1.7.6 FIPS, Microsoft CryptoAPI & CNG & .NETGroup 12: BouncyCastle 1.53 (Java), Cryptix JCE 20050328,                  FlexiProvider 1.7p7, HSM Utimaco Security Server Se50,                  Nettle 2.0, PolarSSL 0.10.0, PuTTY 0.67, SunRsaSign OpenJDK 1.8.0,                  mbedTLS 1.3.19 & 2.2.1 & 2.4.2Group 13: Botan 1.5.6 & 1.11.29 & 2.1.0, Feitian JavaCOS A22 & A40,                  Gemalto GCX4 72K, HSM SafeNet Luna SA-1700, LibTomCrypt 1.17,                  Libgcrypt 1.6.0 & 1.6.5 & 1.7.6, Libgcrypt 1.6.0 FIPS & 1.6.5 FIPS,                  Nettle 3.2 & 3.3, Oberthur Cosmo 64, OpenSSL FIPS 2.0.12 & 2.0.14,                  PGPSDK 4, WolfSSL 2.0rc1 & 3.9.0 & 3.10.2, cryptlib 3.4.3 & 3.4.3.110/1001/1104/1107/1110/1101/1204/1207/1210/1201/1304/1307/1310/1301/1404/1407/1410/1401/1504/1507/1510/1501/1604/1607/1610/1601/1704/170M1M2M3M4M5M6M7M8MEstimated number of keysHTTPS EcosystemEFF SSL ObservatoryRapid7 SonarCensys IPv4 TLS scanSonar fixed TLS 1.2 handshakeUnfinished Sonar scanGroup  1: G&D SmartCafe 3.2Group  2: G&D SmartCafe 4.x & 6.0Group  3: GNU Crypto 2.0.1Group  4: Gemalto GXP E64Group  5: NXP J2A080 & J2A081                 & J3A081 & JCOP 41 V2.2.1Group  6: Oberthur Cosmo Dual 72KGroup  7: OpenSSL 0.9.7 & 1.0.2g                 & 1.0.2k & 1.1.0eGroup  8: PGPSDK 4 FIPSGroup  9: Infineon JTOP 80K, YubiKey 4 & 4 NanoGroup 10: NXP J2D081 & J2E145G, YubiKey NEOGroup 11: BouncyCastle 1.54 (Java), Crypto++ 5.6.0 & 5.6.3 & 5.6.5,                  Libgcrypt 1.7.6 FIPS, Microsoft CryptoAPI & CNG & .NETGroup 12: BouncyCastle 1.53 (Java), Cryptix JCE 20050328,                  FlexiProvider 1.7p7, HSM Utimaco Security Server Se50,                  Nettle 2.0, PolarSSL 0.10.0, PuTTY 0.67, SunRsaSign OpenJDK 1.8.0,                  mbedTLS 1.3.19 & 2.2.1 & 2.4.2Group 13: Botan 1.5.6 & 1.11.29 & 2.1.0, Feitian JavaCOS A22 & A40,                  Gemalto GCX4 72K, HSM SafeNet Luna SA-1700, LibTomCrypt 1.17,                  Libgcrypt 1.6.0 & 1.6.5 & 1.7.6, Libgcrypt 1.6.0 FIPS & 1.6.5 FIPS,                  Nettle 3.2 & 3.3, Oberthur Cosmo 64, OpenSSL FIPS 2.0.12 & 2.0.14,                  PGPSDK 4, WolfSSL 2.0rc1 & 3.9.0 & 3.10.2, cryptlib 3.4.3 & 3.4.3.1174Version
2.0rc1, 3.9.0, 3.10.2
1.5.6, 1.11.29, 2.1.0
1.53
1.54
20050328
3.4.3, 3.4.3.1
5.6.0, 5.6.3, 5.6.5
1.7p7
2.0.1
1.6.0, 1.6.5, 1.7.6
1.6.0 FIPS, 1.6.5 FIPS
1.7.6 FIPS
1.17
2.2.1, 2.4.2
2.0
3.2, 3.3
0.9.7, 1.0.2g, 1.0.2k, 1.1.0e
2.0.12, 2.0.14
4
4 FIPS
0.10.0, 1.3.9
0.67
Source
Open-source libraries
Botan
Bouncy Castle (Java)
Bouncy Castle (Java)
Cryptix JCE
cryptlib
Crypto++