runtime checks.
8 Limitations
In this section, we discuss some limitations of our pro-
posed approach.
Components
implementation changes. A static
change of a component’s security conﬁgurations (vis-
ibility or permission protection) might not necessarily
indicate a security risk all the time. In fact, a developer
might intentionally decide to export a component or down-
grade its permission protection in the following cases:
the component’s operations or supplied data are not priv-
ileged anymore or the component’s implementation is
hardened via runtime checks of the caller’s identity (e.g.,
binder.getCallingUid() or Context.checkPermission()
APIs). Our solution pinpoints these possibly unintentional
risky conﬁgurations changes and demands
further
investigation to conﬁrm whether the change was indeed
intentional or not.
Components renaming. Our approach would miss de-
tecting inconsistent conﬁgurations of components which
have been renamed during the customization.
In fact,
as Android relies heavily on implicit intents for inter-app
communication, vendors might rename their components
to reﬂect their organization identity.
9 Related Work
Security risks in Android customization. The exten-
sive Android vendor customization have been proven to
be problematic in prior studies. At the Kernel level, AD-
DICTED [29] ﬁnds under-protected Linux device drivers
on customized ROMs by comparing them with their
counterparts on AOSP images. Our ﬁnding on inconsis-
tent GID to permission mappings demonstrates another
USENIX Association  
25th USENIX Security Symposium  1165
Table 5: Impact of Inconsistent Security Conﬁgurations
Inconsistent Conﬁguration Category
Permission Protection Change
Removed Protected Broadcasts
Impact
Change System / App Wide Settings
Trigger Dangerous Operations and events
Non-Protected Content Providers
Non-Protected Content Providers
Data Pollution
Data Leaks
Non-Protected Services
Non-Protected Activities
Non-Protected Receivers
Trigger Dangerous Operations
Change System wide Settings
Trigger Dangerous Operations
Speciﬁc Examples
Xiaomi Cloud Settings, Activate SIM
Trigger data sync, SMS received
Airplane mode active, SIM is full
Write to system logs, Add contacts
Change instant messaging conﬁgurations
Read emails, Read contacts
Read blocked contact lists
Access Location, Bind to printing services
Kill speciﬁc apps, Trigger backup
Change Telephony settings, Access hidden activities
Send SMS messages, Trigger fake alerts
Alter telephony settings , Issue SIM commands
way that can expose critical device drivers. At the frame-
work/ app level, Harehunter [5] reveals the Hanging At-
tributes References (Hares) vulnerability caused by the
under-regulated Android customization. The Hare vul-
nerability happens when an attribute is used on a device
but the party deﬁning it has been removed. A malicious
app can then ﬁll the gap to acquire critical capabilities,
by simply disguising as the owner of the attribute. Previ-
ous works [13, 14, 25] have also highlighted security is-
sues in the permission and components AC in preloaded
apps. Gallo et al
[13] analyzed ﬁve different devices
and concluded that serious security issues such as poorer
permission control grow sharply with the level of cus-
tomization. Other prominent work [25] analyzes the
pre-installed apps on 10 factory images and reports the
presence of known problems such as over-privilege [11],
permission re-delegation [12], etc. Our study is fun-
damentally different from the above work [25] which
ﬁnds speciﬁc known vulnerabilities on a customized im-
age through conducting a reachability analysis from an
open entry point to privileged sinks. Instead, we lever-
age a differential analysis to point out inconsistencies in
components’ protection, and consequently detect unin-
tentionally exposed ones. Our analysis further gives in-
sights about possible reasons behind the exposure.
Demystiﬁcation of Android security conﬁgurations.
The high ﬂexibility of Android’s security architecture de-
mands a complete understanding of conﬁgurable security
parameters. Stowaway [11] and PScout [7] lead the way
by mapping individual APIs to the required permission.
Understanding these parameters provides the necessary
domain knowledge in our feature selection. This under-
standing has inspired other researchers to detect vulner-
abilities in apps. The prevalence of misconﬁgured con-
tent providers, activities and services is studied in [30, 8],
respectively. These vulnerabilities are due to develop-
ers’ exposing critical components or misinterpreting An-
droid’s security protection. Instead of focusing on ana-
lyzing an individual app to ﬁnd if it is vulnerable, our
approach learns from the conﬁgurations of the same app
on other ROMs to deduct if it should be protected or not.
Android vulnerability analysis. Prior research has
also uncovered security issues rooted in non-customized
AOSP images. PileUp [26] brings to attention the prob-
lematic Android upgrading process. Two recent stud-
ies examine the crypto misuse in Android apps [9, 16].
Other works evaluate the security risks resulting from
design ﬂaws in the push-cloud messaging [18], in the
multi-user architecture [24], in Android app uninstalla-
tion process [28] and in Android’s Clipboard and shar-
ing mechanism [10]. Other researchers
[20, 15] fo-
cused on uncovering vulnerabilities within speciﬁc An-
droid apps in the web landscape. These vulnerabili-
ties are complementary to the security issues detected
in vendor customization, and jointly present a more
complete picture of Android ecosystem’s security land-
scape. To analyze Android vulnerabilities, static and
dynamic analysis techniques have been proposed to ad-
dress the special characteristics of Android platform.
CHEX [19], Epicc [21], and FlowDroid [6] apply static
analysis to perform vulnerability analysis. Other works
[23, 22, 17, 27] employ dynamic analysis to accurately
understand app’s behaviors. Both techniques are bene-
ﬁcial to our research. Dynamic analysis can help us ex-
ploit the likely risky inconsistencies, while static analysis
can bring the control/data ﬂow of framework/ app code
as another security feature into our differential analysis.
We will explore these ideas in future work.
10 Conclusion
In this paper, we make the ﬁrst attempt to systematically
detect security conﬁguration changes introduced by An-
droid customization. We list the security features applied
at various Android layers and leverage differential analy-
sis among a large set of custom ROMs to ﬁnd out if they
are consistent across all of them. By comparing security
conﬁgurations of similar images (from the same vendor,
running the same OS version, etc.), we can ﬁnd critical
security changes that might have been unintentionally in-
troduced during the customization. Our analysis shows
that indeed, customization parties change several conﬁg-
1166  25th USENIX Security Symposium 
USENIX Association
urations that can lead to severe vulnerabilities such as
private data exposure and privilege escalation.
11 Acknowledgement
We would like to thank our anonymous reviewers for
their insightful comments. This project was supported
in part by the NSF grant 1318814.
References
[1] Android Revolution. http://goo.gl/MVigfq.
[2] Factory Images for Nexus Devices.
i0RJnN.
https://goo.gl/
[3] Huawei ROMs. http://goo.gl/dYPTE5.
[4] Samsung Updates. http://goo.gl/RVU84V.
[5] AAFER, Y., ZHANG, N., ZHANG, Z., ZHANG, X., CHEN, K.,
WANG, X., ZHOU, X., DU, W., AND GRACE, M. Hare hunting
in the wild android: A study on the threat of hanging attribute
references. In Proceedings of the 22Nd ACM SIGSAC Conference
on Computer and Communications Security (2015), CCS ’15.
[6] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL,
A., KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL,
P. Flowdroid: Precise context, ﬂow, ﬁeld, object-sensitive and
lifecycle-aware taint analysis for android apps. PLDI ’14.
[7] AU, K. W. Y., ZHOU, Y. F., HUANG, Z., AND LIE, D. Pscout:
Analyzing the android permission speciﬁcation. In Proceedings
of the 2012 ACM Conference on Computer and Communications
Security (New York, NY, USA, 2012), CCS ’12, ACM.
[8] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D.
Analyzing inter-application communication in android. In Pro-
ceedings of the 9th International Conference on Mobile Systems,
Applications, and Services (2011), MobiSys ’11, ACM.
[9] EGELE, M., BRUMLEY, D., FRATANTONIO, Y., AND
KRUEGEL, C. An empirical study of cryptographic misuse in an-
droid applications. In Proceedings of the 2013 ACM SIGSAC con-
ference on Computer & communications security (2013), ACM.
[10] FAHL, S., HARBACH, M., OLTROGGE, M., MUDERS, T., AND
SMITH, M. Hey, you, get off of my clipboard. In In proceeding
of 17th International Conference on Financial Cryptography and
Data Security (2013).
[11] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAG-
NER, D. Android permissions demystiﬁed. In Proceedings of the
18th ACM conference on Computer and communications security
(New York, NY, USA, 2011), CCS ’11, ACM.
[12] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S., AND
In
CHIN, E. Permission re-delegation: Attacks and defenses.
Proceedings of the 20th USENIX Security Symposium (2011).
[13] GALLO, R., HONGO, P., DAHAB, R., NAVARRO, L. C.,
KAWAKAMI, H., GALVÃO, K., JUNQUEIRA, G., AND RIBEIRO,
L. Security and system architecture: Comparison of android cus-
tomizations. In Proceedings of the 8th ACM Conference on Se-
curity & Privacy in Wireless and Mobile Networks (2015).
[14] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic
detection of capability leaks in stock Android smartphones. In
Proceedings of the 19th Network and Distributed System Security
Symposium (NDSS) (Feb. 2012).
[15] JIN, X., HU, X., YING, K., DU, W., YIN, H., AND PERI, G. N.
Code injection attacks on html5-based mobile apps: Characteri-
zation, detection and mitigation. In Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security
(New York, NY, USA), CCS ’14, ACM.
[16] KIM, S. H., HAN, D., AND LEE, D. H. Predictability of android
openssl’s pseudo random number generator.
In Proceedings of
the 2013 ACM SIGSAC Conference on Computer and Communi-
cations Security (New York, NY, USA, 2013), CCS ’13, ACM.
[17] KLIEBER, W., FLYNN, L., BHOSALE, A., JIA, L., AND
BAUER, L. Android taint ﬂow analysis for app sets.
In Pro-
ceedings of the 3rd ACM SIGPLAN International Workshop on
the State of the Art in Java Program Analysis (2014), SOAP ’14.
[18] LI, T., ZHOU, X., XING, L., LEE, Y., NAVEED, M., WANG,
X., AND HAN, X. Mayhem in the push clouds: Understanding
and mitigating security hazards in mobile push-messaging ser-
vices. In Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security (2014), CCS ’14, ACM.
[19] LU, L., LI, Z., WU, Z., LEE, W., AND JIANG, G. Chex: stat-
ically vetting android apps for component hijacking vulnerabili-
ties. In Proceedings of the 2012 ACM conference on Computer
and communications security (2012), CCS ’12.
[20] LUO, T., HAO, H., DU, W., WANG, Y., AND YIN, H. Attacks
on webview in the android system. ACSAC ’11.
[21] OCTEAU, D., MCDANIEL, P., JHA, S., BARTEL, A., BODDEN,
E., KLEIN, J., AND LE TRAON, Y. Effective inter-component
communication mapping in android with epicc: An essential step
towards holistic security analysis.
In Proceedings of the 22Nd
USENIX Conference on Security (2013), SEC’13.
[22] POEPLAU, S., FRATANTONIO, Y., BIANCHI, A., KRUEGEL, C.,
AND VIGNA, G. Execute This! Analyzing Unsafe and Malicious
Dynamic Code Loading in Android Applications. NDSS 14’.
[23] RASTOGI, V., CHEN, Y., AND ENCK, W. Appsplayground: Au-
tomatic security analysis of smartphone applications. In Proceed-
ings of the Third ACM Conference on Data and Application Se-
curity and Privacy (New York, NY, USA, 2013), CODASPY ’13.
[24] RATAZZI, P., AAFER, Y., AHLAWAT, A., HAO, H., WANG,
Y., AND DU, W. A systematic security evaluation of Android’s
multi-user framework. In Mobile Security Technologies (MoST)
2014 (San Jose, CA, USA, 2014), MoST’14.
[25] WU, L., GRACE, M., ZHOU, Y., WU, C., AND JIANG, X. The
impact of vendor customizations on android security. In Proceed-
ings of the 2013 ACM SIGSAC conference on Computer commu-
nications security (New York, NY, USA, 2013), CCS ’13, ACM.
[26] XING, L., PAN, X., WANG, R., YUAN, K., AND WANG, X.
Upgrading your android, elevating my malware: Privilege esca-
lation through mobile os updating. In Proceedings of the 2014
IEEE Symposium on Security and Privacy (2014), SP ’14.
[27] YAN, L. K., AND YIN, H. Droidscope: seamlessly reconstruct-
ing the os and dalvik semantic views for dynamic android mal-
ware analysis. In Proceedings of the 21st USENIX conference on
Security symposium (2012), Security’12.
[28] ZHANG, X., YING, K., AAFER, Y., QIU, Z., AND DU, W. Life
after app uninstallation: Are the data still alive? data residue
attacks on android. In NDSS (2016).
[29] ZHOU, X., LEE, Y., ZHANG, N., NAVEED, M., AND WANG, X.
The peril of fragmentation: Security hazards in android device
driver customizations. In 2014 IEEE Symposium on Security and
Privacy, SP 2014, Berkeley, CA, USA.
[30] ZHOU, Y., AND JIANG, X. Detecting passive content leaks and
pollution in android applications. In NDSS (2013).
USENIX Association  
25th USENIX Security Symposium  1167
12 Appendix
Figure 8: Components Protection Mismatch Breakdown
1168  25th USENIX Security Symposium 
USENIX Association