import NimbleExample/module.
 One exception to this rule is that you can place a single module containing the pri-
mary functionality of your library in the root directory of your package, but it must
share the name of your package. In this case, the module’s filename would be Nimble-
Example.nim. Figure 5.11 shows what the final directory structure of NimbleExample
will look like.
 For the purposes of this example, create the following math.nim file inside the sec-
ondary NimbleExample directory.
proc add*(a, b: int): int = a + b
The code in listing 5.2 is pretty straightforward. It defines a new add procedure that
adds two integers together. Note the * used to export the procedure; it ensures that
the add procedure can be accessed from other modules. Save the code in listing 5.2 as
math.nim in the NimbleExample/NimbleExample directory.
 There’s an additional convention for modules in a package that are destined to be
used only by that package. They should be placed in a private directory, as is the case
for the utils module defined in listing 5.3. Create a new directory named private in
the NimbleExample/NimbleExample directory, and save the following code as
utils.nim in NimbleExample/NimbleExample/private.
proc mult*(a, b: int): int = a * b
Listing 5.2
The math module
Listing 5.3
The utils module
Defines a new add procedure taking two 
integers and returning the sum of those two 
integers. The procedure is exported using the *.
Defines a new mult procedure taking two 
integers and returning the result when those 
numbers are multiplied. The procedure is 
exported using the * that follows its name.
Figure 5.11
The NimbleExample directory 
layout
Licensed to   
141
Creating a Nimble package
The code in listing 5.4 is a bit more complicated. It imports two modules defined in
the NimbleExample package. The first is the math module defined in listing 5.2, and
the other is the utils module defined in listing 5.3. Save the code in the following
listing as data.nim in the NimbleExample/NimbleExample directory.
import NimbleExample/math
import NimbleExample/private/utils
let age* = mult(add(15, 5), 2)
The final directory layout should look like what you saw in figure 5.11. Ensure that
your local directory layout is the same. 
5.6.3
Writing the .nimble file and sorting out dependencies
Now that the modules are all in the correct directories, it’s time to create the Nimble-
Example.nimble file. You can execute nimble init in the outer NimbleExample
directory to create this file automatically. Figure 5.12 shows an example of what
nimble init asks and the answers needed to generate the NimbleExample.nimble
file shown in listing 5.5.
# Package
version
= "0.1.0"
author
= "Your Name"
description
= "Simple package to learn about Nimble"
license
= "MIT"
# Dependencies
requires "nim >= 0.12.0"
Listing 5.4
The data module
Listing 5.5
The beginnings of NimbleExample.nimble
Imports the math module from the 
NimbleExample package
Imports the private utils
module from the
NimbleExample package
Uses the procedures 
defined in the utils and 
math modules to calculate 
the age. The age variable 
is exported using the *.
Figure 5.12
The nimble init command
Licensed to   
142
CHAPTER 5
Package management
After you execute nimble init or save the contents of listing 5.5 as NimbleExample
.nimble, you should be able to execute nimble install. That should successfully
install your package!
 That’s how simple it is to create a Nimble package. But creating a Nimble package
is just a small first step in developing Nimble packages. Packages evolve and require-
ments change, so how can Nimble help you during development?
 For example, while developing a package, you may realize that you need the func-
tionality of another Nim library. In many cases, this library will be a Nimble package.
For example, you may want to create a version of add for very large integers—ones
bigger than the biggest integer type in Nim’s standard library. The bigints package
provides this functionality.
 Open the math.nim file in the NimbleExample package, and change it so that its
contents are the same as those in the next listing. Changes are highlighted in bold.
import bigints
proc add*(a, b: int): int = a + b
proc add*(a, b: BigInt): BigInt = a + b
Now try to compile it by executing nim c NimbleExample/math. The compiler should
output something similar to “math.nim(1, 8) Error: cannot open 'bigints'.” This
points to the line of code that imports the bigints module. The compilation fails
because the bigints package hasn’t been installed. Install it now by executing nimble
install bigints and compile NimbleExample/math again. This time the compilation
should succeed.
 Does this mean that every user of the NimbleExample package will need to install
the bigints package manually? Currently, yes. But this is where the dependency spec-
ification in the NimbleExample.nimble file comes in—it allows Nimble to install the
dependencies automatically.
 When compiling any Nim source code using the Nim compiler, every package that
you’ve installed using Nimble will be available to that source code. This is why import-
ing the bigints module works as soon as you install the bigints package.
 Nimble supports a handy c command that does exactly what the Nim compiler
does: it compiles the specified file. Try compiling the math.nim file using Nimble by
executing nimble c NimbleExample/math and note the results.
 You may be surprised by the failure in execution, but it illustrates the key difference
between compiling with the Nim compiler directly, and compiling with Nimble. Nimble
doesn’t let you import any modules whose packages you haven’t specified as dependen-
cies in your project’s .nimble file, with the exception of the standard library modules.
Listing 5.6
Using the bigints package in the math module
Imports the bigints module from the bigints 
package. There’s no need to explicitly state 
the package name and module name.
Defines an add procedure 
for the BigInt type defined 
in the bigints module
Licensed to   
143
Creating a Nimble package
Let’s change the NimbleExample.nimble file so that it includes the bigints package
as a dependency. The following listing shows what the NimbleExample.nimble file
should now look like, with the differences highlighted in bold.
# Package
version
= "0.1.0"
author
= "Your Name"
description
= "Simple package to learn about Nimble"
license
= "MIT"
# Dependencies
requires "nim >= 0.12.0", "bigints"
The dependency on bigints in listing 5.7 specifies no requirements on the version of
that package. As a result, Nimble will attempt to install the latest tagged version of that
library, assuming one isn’t already installed.
CUTTING-EDGE DEPENDENCIES
Inside your .nimble file’s dependency specifica-
tion, you can write #head after a package’s name, like this: requires
"bigints#head". This will get Nimble to compile your package with the latest
revision of that package available. This is similar to specifying @#head when
installing packages on the command line, as shown in figure 5.9.
Once you change your NimbleExample.nimble file to match listing 5.7, you should be
able to successfully compile the math module using Nimble. Nimble will even automat-
ically install the bigints package for you if it detects that it’s not installed. Figure 5.13
shows the difference between nim c and nimble c, depending on whether the bigints
package has been installed.
 You should now have a basic understanding of how Nimble handles dependencies, and
you should know how to create more Nimble packages. But there’s one piece of knowledge
still missing: the process involved in publishing Nimble packages, which we’ll discuss next.
 But before you move on to the next section, here’s a quick challenge. Write some
simple tests for your Nimble package inside some of the package’s modules. Remem-
ber to put your tests under a when isMainModule: statement; this statement ensures
Listing 5.7
Adding a dependency on the bigints package
Global Nimble packages and the Nim compiler
By default, when installing a package using Nimble, the package is installed into the
current user’s Nimble package store, which is located in ~/.nimble/. Every time you
compile a Nim module using the Nim compiler, that module can import any of the
modules belonging to any of the packages in Nimble’s package store.
If there are two versions of the same package installed, Nim will use the latest one.
Licensed to   
144
CHAPTER 5
Package management
that any code in its body is only executed when the math module is compiled directly.
This ensures that tests aren’t executed when the math module is imported in an appli-
cation. Then, run those tests by using Nimble’s c command. For example, nimble c
-r NimbleExample/math, with the -r flag, will run the resulting executable automati-
cally after compilation. 
$ nim c math 
import bigints 
stdlib
~/.nimble/
Before bigints package is installed  
(1, 8) Error: cannot open 'bigints'.
$ nimble c math 
import bigints 
stdlib
~/.nimble/pkgs/bigints-0.
No
$ nimble install bigints
Compilation successf
$ nim c math 
$ nimble c math 
import bigints 
stdlib
~/.nimble/pkgs/bigints-0.
Yes
Compilation successf
$ nim c math 
After bigints package is installed  
$ nim c math 
import bigints 
stdlib
~/.nimble/
Compilation successf
Searching for
bigints
module
Searching for
bigints
module
Has bigints dependency, specified
in the .nimble file, been installed?
Has bigints dependency, specified
in the .nimble file, been installed?
Searching for
bigints
module
Searching for
bigints
module
Figure 5.13
nim c vs. nimble c
Licensed to   
145
Publishing Nimble packages
5.7
Publishing Nimble packages
The process of publishing a Nimble package to the official package list is fairly
straightforward. But before your package is published, it must first be uploaded to a
Git or Mercurial repository hosting service (such as GitHub or Bitbucket) and go
through an approval process.
 The first thing that you need to do is initialize a Git or Mercurial repository in your
package’s directory. We’ll create a Git repository in this example because Git has been
more widely adopted, but the choice of repository type doesn’t matter much. It’s
mostly a matter of preference.
VERSION CONTROL
The details of distributed version control, Git, and Mercu-
rial are outside the scope of this book. I recommend you read up on these
technologies further if you’re not familiar with them.
Before you get started, you’ll need to create an account on http://github.com if you
don’t already have one.
 After you have an account set up and are logged in, create a new Git repository on
GitHub by clicking the New Repository button. If you can’t find such a button, go to
this URL: https://github.com/new. You should see something similar to the screen-
shot in figure 5.14.
Figure 5.14
Creating a new repository on GitHub
Licensed to   
146
CHAPTER 5
Package management
Specify “NimbleExample” as the Repository Name, and then click the green Create
Repository button. You’ll be shown another web page that will let you know how to
create a repository on the command line. The instructions on the web page are very
generic. Listing 5.8 shows commands similar to the ones on the web page but tailored
to successfully upload the NimbleExample package to GitHub. Execute these com-
mands now.
git init
git add NimbleExample.nimble NimbleExample/data.nim NimbleExample/
➥ math.nim NimbleExample/private/utils.nim
git commit -m "first commit"
git remote add origin PI:EMAIL:/NimbleExample.git
git push -u origin master
Once you successfully execute those commands, navigating to https://github.com/
/NimbleExample should show you a list of files. These files should
include NimbleExample.nimble, the NimbleExample directory, and its contents.
 There’s only one thing left to do. The package is public, but Nimble has no way to
find it yet because it hasn’t been added to its package list. This means you won’t be
able to install it by executing nimble install NimbleExample.
 Nimble can make use of multiple package lists, but the official package list at
https://github.com/nim-lang/packages is the most widely used. A pull request is cre-
ated whenever a user wants to add a package to this package list, and once that’s done,
the Nim community checks that the package can be added to the package list. Certain
aspects of the package are checked, such as the package’s name, to ensure it doesn’t
clash with the names of any other packages already on the list.
 The pull request can be created manually or with the help of Nimble’s publish
command, which creates the pull request for you automatically.
 Before publishing a package, it’s a good idea to ensure that it can be installed suc-
cessfully. Execute nimble install in the package’s directory to verify that it can be
installed successfully.
 The package is then ready to be published. Execute nimble publish now, and fol-
low the on-screen prompts. The process is somewhat complex as it requires you to cre-
ate a new GitHub access token for Nimble. But once you do so, it streamlines the
process of publishing Nimble packages significantly.
 When your package is accepted and is added to the package list, you’ll be able to
install it by executing nimble install NimbleExample.
 Remember that publishing a Nimble package is only done once. You don’t need to
publish the package again when you develop a new version of it. Instead, the version is
tagged, as you’ll see in the next section. 
Listing 5.8
Commands to upload the NimbleExample package to GitHub
Remember to change
to your GitHub username.
Licensed to   
147
Developing a Nimble package
5.8
Developing a Nimble package
Software projects are typically given version numbers to identify their state. As soft-
ware evolves, new developments are marked with increasing version numbers. Nimble
packages are no different.
 The NimbleExample package began its life as version 0.1.0, and if it continues to
be developed, it may someday reach version 1.0 or even 10.3. Versions help the user
distinguish and identify different states of your package.
 Version information for your package is stored in your package’s .nimble file using
the version key. The version must consist of at least one digit, and multiple digits must
be separated by periods. A full line specifying the version could look something like
version = "1.42.5".
5.8.1
Giving version numbers meaning
The way in which version numbers are assigned and incremented differs. In some
cases, the version numbers have little meaning other than signifying that version 1.0
is newer than version 0.5. In others, such as with semantic versioning, the version
numbers tell you more about the API compatibility of different versions of software.
 Semantic versioning is a convention for specifying a three-part version number:
major version, minor version, and patch. The patch is incremented for minor bug fixes
and changes that don’t affect the API of the software. The minor version is incremented
when backward-compatible additions are made to the software. The major version is
incremented when the API of the software changes to something that’s not backward
compatible. The full semantic versioning specification is available at http://semver.org.
 All Nimble packages should use this convention, so if you aren’t familiar with it, be
sure to learn about it. 
5.8.2
Storing different versions of a single package
There are some things you need to keep in mind with versioning and Nimble packages.
 A local Nimble package that doesn’t have a Git or Mercurial repository associated
with it has a specific version associated with it. This is the version in the .nimble file.
 A local Nimble package that does have a Git or Mercurial repository associated
with it is the same, but different versions of it can be retrieved because its repository
contains a full history of the package. The retrieval must be done manually for local
packages, whereas for remote packages, Nimble will automatically retrieve the speci-
fied version. All remote Nimble packages are currently stored in such repositories,
and they can be downloaded to create a local repository containing each version of
the Nimble package. Figure 5.15 shows the difference between a Nimble package with
and without a Git repository.
 When developing Nimble packages, it’s important to remember one thing: Nimble
uses the tags in the Nimble package’s repository to retrieve a certain version.
Licensed to   
148
CHAPTER 5
Package management
Whenever you want to release a new version of a package, you need to follow these
steps:
1
Increment the version number in the .nimble file.
2
Commit these changes into your repository; for example, git commit -am
"Version 0.1.2".
3
Tag the commit you just made, using the new version number as the tag name;
for example, git tag v0.1.2.
4
Upload the changes to the remote repository, making sure you upload the tags
as well; for example, git push origin master --tags.
Performing step 1 first is very important. If the name of the tag doesn’t match the ver-
sion specified in the .nimble file at the point in history that the tag corresponds to,
there will be an inconsistency, and Nimble will refuse to install the package.
 The preceding steps for tagging versions are specific to Git. You’ll find that in
order to develop Nimble packages, you’ll need at least a basic knowledge of Git or
Mercurial. 
5.9
Summary
 The Nim package manager is called Nimble.
 A Nimble package is any directory or repository, compressed or otherwise, con-
taining a .nimble file and some Nim source code.
 A .nimble file contains information about a package, including its version,
author, dependencies, and more.
 Nimble packages are installed using the nimble install command.
 Nimble packages can be installed from various sources, including the local
filesystem, a Git or Mercurial URL, and a curated list of packages identified by
name.
 Installing a package by name or from a URL will install the latest tagged version
of it; the tip or the HEAD can be installed by appending @#head to the URL or
package name.
NimbleExample.nimble
NimbleExample package 
.git
NimbleExample.nimble
NimbleExample package 
Local package with no repository 
Local package with a Git repository 
Version 1.0.0 
Version 1.0.0 
0.1.0 
0.2.0 
0.3.0
Figure 5.15
Local Nimble package with no repository vs. one with a Git repository
Licensed to   
149
Summary
 A Nimble package can be created using the nimble init command.
 A Nimble package can be published using the nimble publish command.
 New versions of packages are released by incrementing the version number in
the .nimble file, creating a new commit, and then tagging it as the new version
in Git or Mercurial.
Licensed to   
150
Parallelism
Every computer program performs one or more computations, and these computa-
tions are usually performed sequentially. That is, the current computation has to com-
plete before the next one starts. For example, consider a simple calculation,
(2 + 2) x 4, in which the addition must be computed first, to give 4, followed by the
multiplication, to give 16. In that example, the calculation is performed sequentially.
 Concurrency allows more than one computation to make progress without wait-
ing for all other computations to complete. This form of computing is useful in
many situations, such as in an I/O application like the chat application you devel-
oped in chapter 3. If executed sequentially, such applications waste time waiting on
input or output operations to complete. Concurrency allows this time to be used
for another task, drastically reducing the execution time of the application. You
This chapter covers
 Exploring the importance of parallelism
 Examining concurrency versus parallelism
 Getting to know threads in Nim
 Advanced parsing of data using regular 
expressions and other means
 Parallelizing the parsing of large datasets
Licensed to   
151
Concurrency vs. parallelism
learned about concurrency in chapter 3; in this chapter, you’ll learn about a related
concept called parallelism.
 Nim offers many built-in facilities for concurrency and parallelism including asyn-
chronous I/O features in the form of futures and await, spawn for creating new
threads, and more. You’ve already seen some of these used in chapter 3.
 Parallelism in Nim is still evolving, which means that the features described in this
chapter may change or be replaced by more-robust features. But the core concepts of