compartment that accessed it most frequently. As can be seen, this
inhibits all high-performance design points.
Importantly, this kind of analysis sets us up to consider refac-
torings that would improve separability. For example, we can run
the compartmentalization algorithms on a moderate domain size
(α = 10−6) and apply the mediation restriction that each object is
owned (unmediated) by the single subject with the most accesses.
The objects responsible for the largest fraction of mediated accesses
from other subjects tells us directly which objects are poorly en-
capsulated and are preventing the algorithms from finding a tight
separation. The worst offending objects of this type, measured
by their fraction of the total dynamic accesses, are task_struct
(responisble for 12.2% of all mediated accesses), ext4_inode_info
(8.7%), seq_file (8.2%) and seq_buf (6.7%); this suggests that large
improvements in seperability are possible through refactoring a
small subset of the overall system, and that µSCOPE analysis can
be used to guide these efforts.
8.5 Highly-Connected Subjects and Localizing
Similarly, there are some subject outliers that access many objects.
The worst offenders were common C library operations (e.g.,memcpy,
strcmp). To improve their separability, we add a new config option to
the kernel to inline these functions into their calling compartments—
this approach of localizing or replicating code is a simple way to
remove the object overprivilege for stateless functions.
Of the remaining high object-degree functions, the worst of-
fenders were related to strings—there are tens of thousands of
read-only string constants in the kernel recording various mes-
sages and names. The function with the highest object degree was
filldir which accepts a char * name argument and performs reads
to 2,093 string constants. Excluding string constants, the highest
object degree functions were sysfs_add_file_mode_ns (169) and
internal_create_group (147), which access many global variables
related to permissions. The functions with the most edges to heap
Figure 7: The Pareto-optimal privilege-performance tradeoff curve for
each enforcement mechanism. The Pareto-optimal curve shows the lowest-
overhead point for each PSR value found from any domain.
objects were __rcu_process_callbacks (81), __call_rcu (80), and
__mutex_init (40). With the help of a human designer to indicate
where it is safe, these functions with high object privilege could be
localized into compartments to produce a more separable design
and µSCOPE can guide these priorities. We note that a majority of
object clustering merges (Sec. 6.3) were combining together read-
only string constants due to their large representation in high object
degree functions. The algorithms intentionally avoid combining
objects used by disparate pieces of code or unnecessarily opening
up read and write permissions due to the large increase in PS that
results from exposing objects to new code or operation types.
8.6 Allocator-Use Patterns
We further see that the allocating subject is often not the subject that
uses the object the most. Object-style constructor/accessor patterns
are common in the kernel. For example, get_empty_filp() is the
sole allocator of struct file objects, but only performs around
~3% of dynamic accesses to such objects. We find that for heap
objects, on average, the allocating function only performs around
~6% of accesses while the function with the most accesses performs
around ~20%. This indicates that the allocator of an object is a poor
predictor of actual dynamic use, and is therefore not a good method
for defining compartments.
8.7 Performance of Various Mechanisms
Fig. 7 shows the privilege-performance Pareto tradeoff curves for
the performance profiles introduced in Sec. 6.6 over our range of
compartmentalizations. Capturing a range of performance over-
heads in our profiles allows us to illustrate how the tradeoffs shift,
and possibly reshape, with different mechanism costs. The pro-
files also illustrate how lightweight mechanisms can enable higher
PSRmin0.11.010.0100.01,000.010,000.00.000100.001000.010000.10000PSRKernel Overhead(%)Separation HypothesisFunc.FileDir.TopDir.a = 1e−2a = 1e−3a = 1e−4a = 1e−5a = 1e−6a = 1e−7a = 1e−8PSRmin0.11.010.0100.01,000.010,000.00.00010.00100.0100PSROverhead(%)Kernel SwitchEPT SwitchCapability HWDirect HWSFISFI (optimized)305µSCOPE: A Methodology for Analyzing Least-Privilege Compartmentalization in Large Software Artifacts
RAID ’21, October 6–8, 2021, San Sebastian, Spain
pointer (in the kernel timer mechanism) is used to call the sensitive
functions that disable SMEP/SMAP (in arch/x86/kernel/cpu/common).
CVE-2017-18344 [40] tracks a vulnerability in one of the POSIX
timer system-call interfaces that enables unprivileged code to read
arbitrary regions of kernel virtual and physical memory. The prob-
lem is that the timer_create system call fails to validate an input,
specifically the sigev_notify field in a k_itimer structure, which
is used to define a POSIX interval timer. The sigev_notify field
is used to index into a global array of strings. The PoC uses the
out-of-bounds read to access user space pages from within a kernel
thread and eventually map arbitrary kernel pages into the user
address space. The existing exploit fails when SMAP is enabled, i.e.,
two large compartments, but event without that, this example hints
at the broader need for compartmentalization and mediated access
within the kernel. The function that executes the overflow only
requires access to six objects, and can thus be restricted to avoid
the corruption. Furthermore, this function is called so rarely that
the clustering algorithms never grouped it with other code, and so
in all of our compartmentalizations the out-of-bounds read is never
permitted access to any other data.
CVE-2017-15649 is a use-after-free vulnerability that is caused
by a race condition in the net kernel subsystem. After the race
condition is triggered, a dangling reference to a freed heap object of
type struct packet_fanout is held by a live structure. An attacker
can manipulate the contents of the freed-but-accessible object by
causing a fresh allocation of a similar size to claim and access
the same memory. The struct packet_fanout contains a function
pointer id_match, which, when overwritten, offers a control-flow
hijack opportunity when the function pointer is later used. In a
system that enforces CAPMAP compartmentalizations, only a small
subset of the functions in the system have write permission to
these objects, meaning that even the initial corruption will be more
complex to execute and must be done through the net subsystem.
Assuming the function pointer can be overwritten successfully,
there is a single instruction that performs the hijacked call. In Tab. 9
we show (1) the |PScall | of the specific indirect call instruction, (2)
the total number of gadgets accessible to the hijacked domain,
(3) the number of distinct registers that can serve as stack pivot
targets, (4) whether or not Ropper can construct a write-what-
where gadget, (5) whether or not Ropper succeeds in constructing
a payload, and (6) the estimated overhead of that separation for
the All-Unmediated case (see Fig. 6 for full tradeoff-curves). To
determine whether Ropper succeeds in constructing a payload, we
add an additional pass to Ropper in which it filters out gadgets
that are made inaccessible to the hijacked domain by µSCOPE. This
shows that the general compartmentalization algorithms based on
PS not only eliminate needed privileges but also that exploiting this
vulnerability without a typical ROP chain significantly increases
the attacker’s work factor as they must perform repeated confused-
deputy attacks [30] to reach their target.
10 RELATED WORK
Early privilege separation approaches reduced privilege by man-
ually decomposing a system [37, 58, 72]; such efforts require sig-
nificant human capital, in the form of time and domain expertise,
and are thus limited in terms of both scalability and the level of
Figure 8: The impact of increasing struct cred’s write weight on its final
write overprivilege. By increasing its weight, the write overprivilege can be
driven lower for the same overhead level, giving a designer an easy tool for
tuning the protection of a chosen object.
privilege separation for lower costs. For example, at an overhead
estimate of only ~1%, direct hardware support allows us to achieve
the same level of separation that would impose a ~50% overhead
for the EPT model. This highlights another reason automated com-
partmentalization that has access to the full compartmentalization
continuum is important—it allows a system to easily adapt to exploit
new hardware support with lower costs for separation.
8.8 Security Tuning
Tab. 2 shows the write exposure of struct cred for various separa-
tion hypotheses and mediation levels; this data is from a default,
fully-automatic compartmentalization flow. A developer can easily
control the overprivilege on objects they deem sensitive (like struct
cred) by increasing their weighting relative to other objects. This
will drive the algorithms (Secs. 6.2-6.4) to reduce the overprivilege
exposure for these items. In Fig. 8 we show the impact of increas-
ing struct cred’s write weight on its final write exposure. This
illustrates the advantages of automation in responding to evolving
threat models and security preferences.
9 EXPLOIT CASE STUDY
The compartmentalization model introduced by µSCOPE can be
qualitatively evaluated by studying concrete kernel exploits. This
section analyzes three CVEs relative to various compartmentaliza-
tions to assess the concrete security implication of the privilege
metric and separation methodology. We leave a more complete and
systematic analysis across all kernel CVEs to future work.
CVE-2017-7308 is a vulnerability in the Linux 4.8 network stack
that allows an unprivileged user to cause a kernel heap out-of-
bounds write that can grant root access to an unprivileged user. The
user facing packet-socket interface provides clients with the ability
to request kernel networking data structures, like ring buffers, but
lacks a critical security check. An adversary can submit a malformed
request to the interface to build a ring buffer and overwrite a kernel
timer function pointer. A common target is to use this to invoke code
in arch/x86/kernel/cpu/common that disables two critical security
protections (SMEP and SMAP [16]) by overwriting CR4. With these
protections disabled, the user process can force the kernel into
reading and executing memory in the user address space, which
can then be used to grant a user full root access to the host.
Directory level compartmentalization (as well as the more fine-
grained separations) would have prevented the exploit detailed
above by removing the attack edge where the overwritten function
131030110100100010000Overhead (%)Write Overprivilege (X)Weight1 (default)101001000Infinite306RAID ’21, October 6–8, 2021, San Sebastian, Spain
Roessler and Dautenhahn, et al.
α=1e-8 α=1e-7 Dir
α=1e-6 α=1e-5 File
TopDir.
Mono.
|PScall |
12,759,707 1,143,488 866,112 16,368
Total Gadgets
796,304
Stack Pivot Target Regs.
6
Write-What-Where
Y
Ropper Payload Succeeds Y
Estimated Overhead
0%
65,215
2
Y
Y
200%
47,291
2
Y
Y
~1%
872
0
N
N
~1%
247,977 5,216
252
17,554
0
1
N
N
N
N
340%
15%
1,440
39
0
N
N
62%
α=1e-4 Func.
1,264
12
0
N
N
1000%
44,132 1,264
3,313
1
N
N
670% 130%
12
0
N
N
Figure 9: CVE-2017-15649 metrics and statistics.
privilege reduction provided. Later approaches introduced various
degrees of automation that reduce, but do not eliminate, the hu-
man capital requirement. This can be achieved through requesting
developer annotation of source code to derive privilege compart-
ments [12, 13, 29, 47, 54], or the combination of partial code anno-
tations with analysis infrastructures to further reduce developer
burden (SMV [35], SOAAP [29], Wedge [12], ACES [15], ERIM [67],
lwC [44], PM [47],[23]). These systems either retain the coarse-
grained, default-allow model of privilege, or, in cases where they
can support many compartments, still depend on experts: they are
“semi-automatic” at best, providing an incomplete and ad hoc explo-
ration of the privilege-performance space. Microkernels [11, 38, 59]
and other manual separation efforts [2, 32, 53, 70] have been ap-
plied to OSs, but lack the automation and exploration advantages