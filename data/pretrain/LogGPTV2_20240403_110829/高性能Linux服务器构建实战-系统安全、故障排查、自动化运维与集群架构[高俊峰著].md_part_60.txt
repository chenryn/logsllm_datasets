以下是优化后的文本，使其更加清晰、连贯和专业：

---

### HAProxy 配置文件示例

```haproxy
global
    log 127.0.0.1 local0 err
    maxconn 4096
    user nobody
    group nobody
    daemon
    pidfile /usr/local/haproxy/logs/haproxy.pid

defaults
    log global
    mode http
    option httplog
    option dontlognull
    retries 3
    timeout connect 5s
    timeout client 30s
    timeout server 30s

frontend http-in
    bind *:80
    acl host_img hdr(host) -i img.tb.com
    acl host_www hdr(host) -i www.tb.com
    use_backend server_img if host_img
    use_backend server_www if host_www
    default_backend webapp

backend server_img
    balance roundrobin
    option forwardfor
    option httpchk HEAD /index.html
    server webimg1 192.168.66.33:80 weight 6 check inter 2000 rise 2 fall 3
    server webimg2 192.168.66.34:80 weight 6 check inter 2000 rise 2 fall 3

backend server_www
    balance roundrobin
    option forwardfor
    option httpchk HEAD /index.php
    server webapp1 192.168.66.31:80 weight 6 check inter 2000 rise 2 fall 3
    server webapp2 192.168.66.32:80 weight 6 check inter 2000 rise 2 fall 3

listen stats
    bind 0.0.0.0:19088
    mode http
    stats enable
    stats uri /haproxy-status
    stats realm Haproxy\ Statistics
    stats auth admin:xxxxxx
```

### Keepalived 配置文件示例

#### haproxy1 主机上的 keepalived.conf

```keepalived
vrrp_script check_haproxy {
    script "killall -0 haproxy"
    interval 2
    weight 2
}

global_defs {
    notification_email_from PI:EMAIL
    notification_email PI:EMAIL
    smtp_server 192.168.200.1
    smtp_connect_timeout 30
}

vrrp_instance HAProxy_HA1 {
    state MASTER
    interface eth0
    virtual_router_id 80
    priority 100
    advert_int 2
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.66.10/24 dev eth0
    }
    track_script {
        check_haproxy
    }
    notify_master "/etc/keepalived/mail_notify.py master"
    notify_backup "/etc/keepalived/mail_notify.py backup"
    notify_fault "/etc/keepalived/mail_notify.py fault"
}
```

#### haproxy2 主机上的 keepalived.conf

```keepalived
vrrp_script check_haproxy {
    script "killall -0 haproxy"
    interval 2
    weight 2
}

global_defs {
    notification_email_from PI:EMAIL
    notification_email PI:EMAIL
    smtp_server 192.168.200.1
    smtp_connect_timeout 30
}

vrrp_instance HAProxy_HA2 {
    state BACKUP
    interface eth0
    virtual_router_id 81
    priority 80
    advert_int 2
    authentication {
        auth_type PASS
        auth_pass 1111
    }
    virtual_ipaddress {
        192.168.66.20/24 dev eth0
    }
    track_script {
        check_haproxy
    }
    notify_master "/etc/keepalived/mail_notify.py master"
    notify_backup "/etc/keepalived/mail_notify.py backup"
    notify_fault "/etc/keepalived/mail_notify.py fault"
}
```

### 负载均衡系统的启动和高可用切换过程

1. **启动HAProxy服务**：
   - 在`haproxy1`和`haproxy2`节点上依次启动HAProxy服务。
   - 观察VIP地址是否正常加载到对应的节点上。

2. **启动Keepalived服务**：
   - 在`haproxy1`和`haproxy2`节点上依次启动Keepalived服务。
   - 观察Keepalived的启动日志，确保两个实例（`HAProxy_HA1`和`HAProxy_HA2`）正常运行，并且`HAProxy_HA1`进入MASTER状态，`HAProxy_HA2`进入BACKUP状态。

3. **测试故障切换功能**：
   - 关闭`haproxy1`节点上的HAProxy服务。
   - 观察`haproxy1`和`haproxy2`节点中Keepalived日志的运行状态，确认`HAProxy_HA1`实例进入FAULT状态，`HAProxy_HA2`实例自动进入MASTER状态并绑定VIP地址192.168.66.10。

### 日志输出示例

#### haproxy1 节点上的Keepalived日志

```plaintext
Apr 5 01:16:22 haproxy1 Keepalived_healthcheckers[29104]: Netlink reflector...
Apr 5 01:16:26 haproxy1 Keepalived_vrrp[29105]: VRRP_Instance(HAProxy_HA1) Entering MASTER STATE
Apr 5 01:16:26 haproxy1 Keepalived_vrrp[29105]: VRRP_Instance(HAProxy_HA1) Transition to MASTER STATE
Apr 5 01:19:18 haproxy1 Keepalived_vrrp[29105]: VRRP_Instance(HAProxy_HA1) Now in FAULT state
Apr 5 01:19:18 haproxy1 Keepalived_vrrp[29105]: VRRP_Instance(HAProxy_HA1) reports IP 192.168.66.10 removed
```

#### haproxy2 节点上的Keepalived日志

```plaintext
Apr 5 01:16:28 haproxy2 Keepalived_healthcheckers[24549]: Netlink reflector...
Apr 5 01:16:28 haproxy2 Keepalived_vrrp[24550]: VRRP_Instance(HAProxy_HA2) Entering BACKUP STATE
Apr 5 01:19:20 haproxy2 Keepalived_vrrp[24550]: VRRP_Instance(HAProxy_HA1) Entering MASTER STATE
Apr 5 01:19:20 haproxy2 Keepalived_vrrp[24550]: VRRP_Instance(HAProxy_HA1) Transition to MASTER STATE
Apr 5 01:19:20 haproxy2 Keepalived_vrrp[24550]: VRRP_Instance(HAProxy_HA1) reports IP 192.168.66.10 added
```

通过上述配置和测试，可以实现双主互备的HAProxy负载均衡集群系统，并确保在单点故障时能够自动切换，保持系统的高可用性。

---