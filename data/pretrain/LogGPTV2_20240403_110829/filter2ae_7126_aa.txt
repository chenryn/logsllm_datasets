**作者：wzt  
原文链接：**
# 1 地址随机化与PIE
## 1.1 pie简介
gcc
的pie选项可以生成对符号的引用变为与位置无关的代码。之前对符号的绝对地址引用变为相对于PC指令或相对于二进制某固定位置的偏移引用。当内核被随机的加载到任意内存地址时，可以简化对符号重定位的处理。
## 1.2 pie验证
我们通过反汇编vmlinux来验证经过pie编译后产生的一些代码是否可以做到位置无关。
### 1.2.1 块间全局变量引用 bss段引用
    1    104  /root/kernel/linux-4.5/kernel/fork.c >
    unsigned long total_forks;
    static int show_stat(struct seq_file *p, void *v)
    fs/proc/stat.c
    ffffffff81291960 :
    ffffffff81291f5a:       4c 8b 05 87 3b d4 00    mov    0xd43b87(%rip),%r8        # ffffffff81fd5ae8 
    [root@localhost build-4.5]# readelf -r vmlinux|grep ffffffff81291f5d
    ffffffff81291f5d  efc100000002 R_X86_64_PC32     ffffffff81fd5ae8 total_forks - 4
R_X86_64_PC32 &&非percpu变量， 不需要重定位。
### 1.2.2 模块内全局变量引用 bss段引用
    int max_threads;                /* tunable limit on nr_threads */
    ffffffff81087ce0 :
    ffffffff81087d43:       89 3d 97 dd f4 00       mov    %edi,0xf4dd97(%rip)        # ffffffff81fd5ae0 
      [56] .bss              NOBITS           ffffffff81f2e000  0132e000
           000000000031b000  0000000000000000  WA       0     0     4096
    76199: ffffffff81fd5ae0     4 OBJECT  GLOBAL DEFAULT   56 max_threads
    [root@localhost build-4.5]# readelf -r vmlinux|grep ffffffff81087d45
    ffffffff81087d45  129a700000002 R_X86_64_PC32     ffffffff81fd5ae0 max_threads - 4
R_X86_64_PC32 &&非percpu变量， 不需要重定位。
### 1.2.3 模块间函数调用 text段引用
    ffffffff81088890 :
    ffffffff810888c5:       e8 56 87 0c 00          callq  ffffffff81151020 
    [root@localhost build-4.5]# readelf -r vmlinux|grep ffffffff810888c6
    Offset          Info           Type           Sym. Value    Sym. Name + Addend
    ffffffff810888c6  11e8900000002 R_X86_64_PC32     ffffffff81151020 ftrace_graph_exit_task - 4
R_X86_64_PC32 &&非percpu变量，不需要重定位。
### 1.2.4 模块内函数调用 text段引用
    ffffffff810888f0 :
    ffffffff8108898a:       e8 01 ff ff ff          callq  ffffffff81088890 
    [root@localhost build-4.5]# readelf -r vmlinux|grep ffffffff8108898b
    ffffffff8108898b  15fc700000002 R_X86_64_PC32     ffffffff81088890 free_task - 4
R_X86_64_PC32 &&非percpu变量， 不需要重定位。
### 1.2.5 Percpu 变量引用 data段引用
    static DEFINE_PER_CPU(struct task_struct *, idle_threads);
    struct task_struct *idle_thread_get(unsigned int cpu)
    {
            struct task_struct *tsk = per_cpu(idle_threads, cpu);
            if (!tsk)
                    return ERR_PTR(-ENOMEM);
            init_idle(tsk, cpu);
            return tsk;
    }
    ffffffff810ada80 :
    ffffffff810ada80:       e8 bb b2 63 00          callq  ffffffff816e8d40 
    ffffffff810ada85:       89 fa                   mov    %edi,%edx
    ffffffff810ada87:       55                      push   %rbp
    ffffffff810ada88:       48 c7 c0 48 de 00 00    mov    $0xde48,%rax
    ffffffff810ada8f:       48 8b 14 d5 40 52 d4    mov    -0x7e2badc0(,%rdx,8),%rdx
    ffffffff810ada96:       81
    ffffffff810ada97:       48 89 e5                mov    %rsp,%rbp
    ffffffff810ada9a:       53                      push   %rbx
    ffffffff810ada9b:       48 8b 1c 10             mov    (%rax,%rdx,1),%rbx
    [root@localhost build-4.5]# readelf -r vmlinux|grep ffffffff810ada93
    ffffffff810ada93  122e20000000b R_X86_64_32S      ffffffff81d45240 __per_cpu_offset + 0
R_X86_64_32S && 非percpu变量，需要重定位。
    [root@localhost build-4.5]# readelf -s  vmlinux|grep   __per_cpu_offset
    74466: ffffffff81d45240 65536 OBJECT  GLOBAL DEFAULT   30 __per_cpu_offset
      [30] .data             PROGBITS         ffffffff81c00000  00e00000
           0000000000165d80  0000000000000000  WA       0     0     4096
      [33] .data..percpu     PROGBITS         0000000000000000  01000000
           0000000000018098  0000000000000000  WA       0     0     4096
    [root@localhost build-4.5]# readelf -s vmlinux|grep percpu|grep 33
    9758: ffffffff810e63b0   337 FUNC    LOCAL  DEFAULT    1 __free_percpu_irq
    11209: 000000000000f1c0   728 OBJECT  LOCAL  DEFAULT   33 tick_percpu_dev
### 1.2.6 引用rodata变量
[root@localhost build-4.5]# readelf -S vmlinux|grep text
    [ 1] .text             PROGBITS         ffffffff81000000  00200000
    [root@localhost build-4.5]# readelf -S vmlinux|grep rodata
      [ 7] .rodata           PROGBITS         ffffffff81800000  00a00000
    ffffffff81d80c98 :
    ffffffff81d80d76:       48 c7 c6 e0 00 80 81    mov    $0xffffffff818000e0,%rsi
[root@localhost build-4.5]# readelf -r vmlinux|grep `ffffffff81d80d79`
    ffffffff81d80d79  10f420000000b R_X86_64_32S      ffffffff818000e0 linux_banner + 0
R_X86_64_32S && 非percpu变量，需要重定位。
    rodata:FFFFFFFF818000E0                 public linux_banner
    .rodata:FFFFFFFF818000E0 linux_banner    db 'Linux version 4.5.0 (root@localhost.localdomain) (gcc version 4.8'
    .rodata:FFFFFFFF818000E0                                         ; DATA XREF: start_kernel+DE↓o
    .rodata:FFFFFFFF818000E0                 db '.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Tue Aug 28 12:48:38'
    .rodata:FFFFFFFF818000E0                 db ' CST 2018',0Ah,0
# 2\. Linux kaslr 实现原理
## 2.1 vmlinux 是如何生成的
由于内核是要把内核符号表一同链接进vmlinux里， 因此需要分三步进行链接： Scripts/ link-vmlinux.sh
第一步：
           ld               nm                   
       *.o---->.tmp_vmlinux1---->.tmp_kallsyms1.o
第二步：
                                  ld                nm
    .tmp_vmlinux1 + .tmp_kallsyms1.o ---->.tmp_vmlinux2-----à.tmp_kallsyms2.o
第三步：
                                      ld
        .tmp_vmlinux2 + .tmp_kallsyms2.o ---->vmlinux
由各种.o文件链接成临时内核 `.tmp_vmlinux1`，然后利用nm提取出内核符号导入到 `.tmp_kallsyms1.o` 文件，在把
`.tmp_vmlinux1` 和 `.tmp_kallsyms1.o` 一起链接为临时内核 `.tmp_vmlinux2`，此时新增了一个
**kallsyms section，里面保存的就是nm导出的内核符号值， 注意对于** kallsyms
section自身产生的符号并没有提取出来，需要在重复上一步的链接处理，此时得到的 `tmp_kallsyms2.o` 已经包含了完整的符号，将其与
`.tmp_vmlinux2` 链接，产生最终的vmlinux。如果内核配置文件开启了
KALLSYMS_EXTRA_PASS，为了避免产生align对齐的一些bug，还需在重复上述步骤一次，产生 `.tmp_vmlinux3`。
## 2.2 vmlinuz 是如何产生的
由于vmlinux即使没有采用pie，所产生的二进制文件仍然很大，所以采用了将vmlinux进行压缩的方案，在bootloader加载内核时，在对其进行解压，有点类似于加壳程序的执行流程。
Linux在链接阶段会产生如下文件： `vmlinux.bin` 经过strip后的二进制，去掉了debug和comment信息。
`vmlinux.bin.all`
由`vmlinux.bin`和`vmlinux.relocs`组成，`vmlinux.relocs`保存的是需要重定位的地址数组。
`vmlinux.bin.(gz|bz2|lzma|...)` 由`vmlinux.bin.all` \+ `u32 size`,
size是一个四字节的数值，保存的是`vmlinux.bin.all`的文件大小，最后由gzip等压缩工具压缩。
举例`vmlinux.bin.gz`是由gzip压缩后的二进制文件。 而vmlinuz则由以下几个部分组成：
      |--------------------piggy.s---------------|
    ----------------------------------------------------------    | uncompress code| asm globals |         vmlinux.bin.gz        |
    ----------------------------------------------------------    | vmlinux.bin | vmlinux.relocs | size |
    ------------------------------
## 2.3 vmlinux.relocs 是什么
Linux没有选择在bootloader阶段对内核进行复杂的重定位工作，
由于内核是pie编译产生的，我们从最前面的反汇编信息来看，大部分符号的重定位工作只需加上内核被随机化产生的偏移值即可完成重定位，而不需要解析x86定义的各种重定位类型。因此只需要在重定位时提供给bootloader需要被重定位的地址即可，这些地址保存在vmlinux.relocs里。
在vmlinux生成后，通过arch/x86/tools/relocs来提取vmlinux rela保存的信息，它的结构如下：
    --------------------------------------------------------------------------       | 0 | 64bit relocation address …| 0 | 32 bit inverse relocation …| 0 | 32 bit relocation …|