    try:
        pid = device.get_process(process_name).pid
        print('[+] Process found')
    except frida.ProcessNotFoundError:
        print('[+] Starting process')
        pid = device.spawn([process_name])
        device.resume(pid)
        time.sleep(1)
    process = device.attach(pid)
    script = process.create_script(jscode)
    script.on('message', on_message)
    script.load()
    while True:
        time.sleep(0.2)
        if encrypted and secretKey:
          script.post({'type':'encrypted','value':decrypt(encrypted, secretKey)})
          break
    sys.stdin.read()
我们更新后的js代码:
    Java.perform(function () {
        var MainActivity = Java.use('com.punsec.demo.MainActivity');
        MainActivity.onCreate.implementation = function(a) {
            this.onCreate(a);
            send({'encrypted':this.getString(2131099669)});
        };
        var base64 = Java.use('android.util.Base64');
        base64.decode.overload('java.lang.String', 'int').implementation = function(x, y) {
            var buf = new Buffer(base64.decode(x, y));
            send({'secretKey': buf.toString()});
            return base64.decode(x, y);
        }
        var Util = Java.use('com.punsec.demo.Util');
        Util.a.overload('java.lang.String', 'javax.crypto.SecretKey').implementation = function(x, y) {
            recv('encrypted', function onMessage(payload) { 
                secret = payload['value']; 
            });
            send('Decrypted : ' + secret)
            return this.a(secret,y);
        }
    });
现在运行我们的python程序:
    $ python punsec.py
    [+] Running
    [+] Process found
    [*] {u'secretKey': u'MySuperSecretL33tPassw0rd'}
    [!] Rotate the device
    [*] {u'encrypted': u'vXrMphqS3bWfIGT811/V2Q=='}
    [*] {u'secretKey': u'MySuperSecretL33tPassw0rd'}
    [*] Decrypted : knb*AS234bnm*0
**用 Inspeckage 来分析**
****
我们将会使用到Inspeckage, Xposed Framework 和 ApkStudio/ByteCodeViewer.
Inspeckage – Android Package Inspector
    Inspeckage is a tool developed to offer dynamic analysis of Android applications. By applying hooks to functions of the Android API, Inspeckage will help you understand what an Android application is doing at runtime.
Inspeckage可以让你来用简单的web接口进行分析。Inspeckage需要你安装Inspeckage Xposed module并且在 Xpose
框架中激活它。在你的android设备上启动Inspeckage App并且选择我们的目标应用并且在Inspeckage Webserver中浏览。
打开自动刷新开关，点击在webserver上的设置按钮并且关闭一些Actvity检测就像下面这张图一样，最后点击 start App 并且刷新页面。
一旦我们的App在手机上运行，就在App上输入测试的数据并点击ok按钮，然后观察Inspeckage webserver上的通知(注意要开启自动刷新):
这两张截图都显示出了我们使用了frida方法。用 Inspeckage分析是相当简单的，你可以检测app执行的文件系统Activities,
SQL队列操作，在这背后使用的是和我们使用frida方法相同的概念:
在加密，文件系统，hash等操作函数上进行hook，但是在这里，我们可以执行函数hook吗?
当然了，正如你在最后一个标签上看到的，它提供了一个hook选项。但是随之而来的问题是：它不像frida那样，Inseckage没有提供对重载的方法的覆盖，现在点击hook标签并且创建一个hook来验证我们的想
法:
所以现在为了能够创建一个有效的hook，我们将会使用 ByteCodeViewer 或者 APKStudio 来修改apk中的
bytecode(字节码)。下面这是我们对字节码的patch:
(注意：当打开apk的时候，取消选择"Decode Resource"，否则你将会遇到下面这些问题)
    ERROR: 9-patch image C:UserslabuserDesktopCrackMeresdrawable-mdpi-v4abc_list_divider_mtrl_alpha.9.png malformed.
           Must have one-pixel frame that is either transparent or white.
    ERROR: Failure processing PNG image C:UserslabuserDesktopCrackMeresdrawable-mdpi-v4abc_list_divider_mtrl_alpha.9.png
    ERROR: 9-patch image C:UserslabuserDesktopCrackMeresdrawable-hdpi-v4abc_list_divider_mtrl_alpha.9.png malformed.
           Must have one-pixel frame that is either transparent or white.
    ERROR: Failure processing PNG image C:UserslabuserDesktopCrackMeresdrawable-hdpi-v4abc_list_divider_mtrl_alpha.9.png
    ERROR: 9-patch image C:UserslabuserDesktopCrackMeresdrawable-xhdpi-v4abc_list_divider_mtrl_alpha.9.png malformed.
           Must have one-pixel frame that is either transparent or white.
    ERROR: Failure processing PNG image C:UserslabuserDesktopCrackMeresdrawable-xhdpi-v4abc_list_divider_mtrl_alpha.9.png
    ERROR: 9-patch image C:UserslabuserDesktopCrackMeresdrawable-xxhdpi-v4abc_list_divider_mtrl_alpha.9.png malformed.
           Must have one-pixel frame that is either transparent or white.
    ERROR: Failure processing PNG image C:UserslabuserDesktopCrackMeresdrawable-xxhdpi-v4abc_list_divider_mtrl_alpha.9.png
在上面那副截图中，可以看到第168行，我们通过识别第168行的参数类型和返回值，成功的识别出了这就是加密函数，在第197行，这个被赋值为1的变量也是我们之前看到的。我们已经把这个函数的名字改成了b
,并且解密函数名称改为c。现在为了保证我们的app可以正常运行，我们需要在MainActivity的字节码上做出相同的更新:
现在我们的任务已经完成了，可以创建一个 **keystore** 来对我们的apk进行签名。
    C:Program FilesJavajdk1.8.0_144bin>keytool -genkey -v -keystore C:userslabuserDesktopmy.keystore -alias alias_na
    me -keyalg RSA -keysize 2048 -validity 10000
    Enter keystore password:
    Re-enter new password:
    What is your first and last name?
      [Unknown]:
    What is the name of your organizational unit?
      [Unknown]:
    What is the name of your organization?
      [Unknown]:
    What is the name of your City or Locality?
      [Unknown]:
    What is the name of your State or Province?
      [Unknown]:
    What is the two-letter country code for this unit?
      [Unknown]:
    Is CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct?
      [no]:  yes
    Generating 2,048 bit RSA key pair and self-signed certificate (SHA256withRSA) with a validity of 10,000 days
            for: CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown
    Enter key password for 
            (RETURN if same as keystore password):
    [Storing C:userslabuserDesktopmy.keystore]
    C:Program FilesJavajdk1.8.0_144bin>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore C:userslabuserDesktopmy.keystore C:userslabuserDesktopCrackMe.apk alias_name
将已经签名的apk安装到设备上。重启Inspeckage，开始hook来验证是否我们的修改已经起作用了。
极好地，我们的修改是完美的，现在我们可以对目标函数 **Util.b()** 下hook。选择这个函数并且点击 Add hook
按钮。现在让我们点击ok按钮并且观察Inspeckage Server的通知。
我们可以看到Inspeckage已经成功地从已经hook的函数中截取到数据并且提供给我们了函数的参数和返回值。现在点击 Replace
按钮并且配置如下的选项。
在这里我们将第一个参数传递给了我们的加密函数，这个函数拥有我们已经用frida识别出来的秘密值。无论什么时候进行输入测试(大小写敏感)，Hook都会替换数据并且传递我们提供的值，然后将Congratulations再一次显示在我们的屏幕上。
**二进制补丁（字节码修改）**
****
在这个方法中，我们将会使用 **ApkStudio** 和 **Jarsigner** 。
我们将会通过修改反编译的Apk，之后重新编译它来修改程序的逻辑。启动 ApkStudio并且再次加载文件( 记住要取消选择"Decode
Resources"复选框)，之后在MainActivity$1.smali中定位到程序代码中进行比较的位置
我们可以在第113行看到程序会比较两个不同的值来执行检测，如果比较失败了，会显示"Umm, Try
Again"。但是如果程序总是将两个相同的值进行比较会怎么样呢？在这种情况下，程序将会跳过else条件直接返回true。所以现在让我们将代码修改后重新编译并对我们的Apk进行签名，然后做测试。
再一次运行应用验证是否程序是否通过了原来的程序逻辑。
**静态分析和代码复制**
****
在这个方法中，我们将会使用 **Android Studio/IntelliJ** 和 **ByteCodeViewer** 来进行静态代码分析。
    Static analysis
    Also called static code analysis, is a method of computer program debugging that is done by examining the code without executing the program. The process provides an understanding of the code structure, and can help to ensure that the code adheres to industry standards.
启动 ByteCodeViewer(BCV)
并且等待它来安装依赖项。一旦安装好了之后，我们将可以直接在它里面打开apk文件。在BCV中，点击File->Add 并且选择
CrackMe.apk，然后让它完成加载这个文件。点击 **View- >Pane1->Procyon->java** 和 **View->Pane2->Smali/Dex->Samli/Dex** 。你的界面将会看起来和下面的一样
在第9行，我们可以看到"final String string2 =
this.this$0.getString(2131099669);"。在当前活动上下文的getString()方法，可以使用"this"，"MainActivity.this
"或者"getApplicationContext() "
通过一个整数值来得到资源值。这些数字id的索引在R类中被创建，所以我们将会在R$string.class 中寻找资源id，BCV可以将内容识别为xml
文件格式。
我们可以看到这个整数值被分配给a，现在我们不得不对a在strings.xml中做一个查找，你可以在BCV中通过展开 **CrackMe.apk->Decoded Resources->res->values->strings.xml **。
有时候BCV打开文件会呈现出二进制形式而不是xml格式，对于这种情况，我们可以点击File->Save As Zip
，然后解压zip并且在编辑器中打开strings.xml。
极好的，我们已经找到了这个字符串。我们将会用这个方法恢复所有的字符串并且保存它们。
    2131099669 -> a -> vXrMphqS3bWfIGT811/V2Q==
    2131099683 -> b -> TXlTdXBlclNlY3JldEwzM3RQYXNzdzByZA==
    2131099685 -> d -> Congratulations
    2131099686 -> e -> Umm, Try again
我们将会使用IntelliJ来写我们的代码来试图实现逆向原始函数的功能，通过从BCV反编译后的文件中复制代码。
当所有的代码让在一块的时候，它将会看起来像下面的代码
    import javax.crypto.Cipher;
    import javax.crypto.SecretKey;
    import javax.crypto.spec.SecretKeySpec;
    import java.security.MessageDigest;
    import java.util.Base64;
    class Decrypt {
        public static void main(String args[]) {
            String a = "vXrMphqS3bWfIGT811/V2Q==";
            String b = "TXlTdXBlclNlY3JldEwzM3RQYXNzdzByZA==";
            String new_b = new String(Base64.getDecoder().decode(b));
            byte[] array = Base64.getDecoder().decode(a);
            String decoded = decrypt(array, getKey(new_b));
            System.out.println("Decoded : " + decoded);
        }
        private static String decrypt(byte[] array, SecretKey secretKey) {
            String decoded = null;
            try {
                Cipher instance = Cipher.getInstance("AES/ECB/PKCS5Padding");
                instance.init(2, secretKey);
                decoded = new String(instance.doFinal(array), "UTF-8");
            }catch (Exception e) {
                // do something
            }
            return decoded;
        }
        private static SecretKey getKey(String s) {
            SecretKeySpec secretKeySpec = null;
            try {
                MessageDigest instance = MessageDigest.getInstance("MD5");
                instance.update(s.getBytes());
                byte[] digest = instance.digest();
                StringBuilder sb = new StringBuilder();
                for (int length = digest.length, i = 0; i < length; ++i) {
                    sb.append(String.format("%02x", digest[i] & 0xFF));
                }
                secretKeySpec = new SecretKeySpec(sb.toString().substring(0, 16).getBytes(), "AES");
            } catch (Exception e) {
                // do something
            }
            return secretKeySpec;
        }
    }
将文件命名为 **Decrypt.java** 并保存文件。我们需要编译这个文件，然后运行它来检测我们的代码是否起作用了。
    // create new file
    $ nano Decrypt.java
    // compile file
    $ javac Decrypt.java
    // run file
    $ java Decrypt
    Decoded : knb*AS234bnm*0
我们可以在python代码中做同样的事情，就像先前frida那样，但是有时候复制代码是更简单的，因为只需要做很小的修改就可以使它运行。
我们已经描述了所提到的所有工具和方法，现在是时候喝杯咖啡了。