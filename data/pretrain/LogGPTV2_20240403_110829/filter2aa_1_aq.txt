aws s3 cp s3://BUCKET_NAME/FILE_NAME/path/to/local/directory
    Gather any useful information leaked via the bucket and use it for future exploitation! If the organization reveals information such as active API keys or personal information, you should report this right away. Exposed S3 buckets alone are often considered a vulnerability. You can also try to upload new files to the bucket or delete files from it. If you can mess with its contents, you might be able to tamper with the web application’s operations or corrupt company data. For example, this command will copy your local file named
     TEST_FILE
    into the target’s S3 bucket:
    收集通过存储桶泄露的任何有用信息并将其用于未来利用！如果组织披露例如活动API密钥或个人信息的信息，您应立即报告。仅暴露的S3桶通常被视为漏洞。您还可以尝试向存储桶上传新文件或从中删除文件。如果您可以干扰其内容，您可能能够篡改Web应用程序的操作或破坏公司数据。例如，此命令将将名为TEST_FILE的本地文件复制到目标的S3存储桶中：
aws s3 cp TEST_FILE s3://BUCKET_NAME/
    And this command will remove the
     TEST_FILE
    that you just uploaded:
    而此命令将删除您刚上传的 `TEST_FILE` 文件:
aws s3 rm s3://BUCKET_NAME/TEST_FILE
    These commands are a harmless way to prove that you have write access to a bucket without actually tampering with the target company’s files.
    这些命令是一种无害的方式，可以证明您具有对一个存储桶的写权限，而不会实际干扰目标公司的文件。
    Always upload and remove your own test files. Don’t risk deleting important company resources during your testing unless you’re willing to entertain a costly lawsuit.
    始终上传和删除您自己的测试文件。除非您愿意承担昂贵的诉讼风险，否则不要在测试期间冒险删除重要的公司资源。
    GitHub Recon
    Search an organization’s GitHub repositories for sensitive data that has been accidentally committed, or information that could lead to the discovery of a vulnerability.
    搜索组织的GitHub存储库，查找意外提交的敏感数据或可能导致漏洞发现的信息。
    Start by finding the GitHub usernames relevant to your target. You should be able to locate these by searching the organization’s name or
    product names via GitHub’s search bar, or by checking the GitHub accounts of known employees.
    从寻找与您目标相关的GitHub用户名开始。您可以通过使用GitHub的搜索栏搜索组织名称或产品名称，或者通过检查已知员工的GitHub帐户来找到这些用户名。
    When you’ve found usernames to audit, visit their pages. Find repositories related to the projects you’re testing and record them, along with the usernames of the organization’s top contributors, which can help you find more relevant repositories.
    当您找到要审计的用户名时，请访问他们的页面。查找与您测试的项目相关的存储库，并记录它们，以及组织顶级贡献者的用户名，这可以帮助您找到更多相关的存储库。
    Then dive into the code. For each repository, pay special attention to the Issues and Commits sections. These sections are full of potential info leaks: they could point attackers to unresolved bugs, problematic code, and the most recent code fixes and security patches. Recent code changes that haven’t stood the test of time are more likely to contain bugs. Look at any protection mechanisms implemented to see if you can bypass them. You can also search the Code section for potentially vulnerable code snippets. Once you’ve found a file of interest, check the Blame and History sections at the top-right corner of the file’s page to see how it was developed (
     Figure 5-8
    ).
    然后深入代码中。对于每个存储库，特别留意问题和提交部分。这些部分充满了潜在的信息泄漏：它们可能指向未解决的漏洞，有问题的代码，并且是最近的代码修复和安全补丁。最近的代码更容易包含错误。查看实施的任何保护机制是否可以绕过它们。您还可以搜索代码部分以查找可能存在漏洞的代码片段。一旦找到感兴趣的文件，请检查文件页面右上角的责难和历史部分以了解它是如何开发的（图5-8）。
       Figure 5-8
      : The History and Blame sections
      图5-8：历史和责任部分。
    We’ll dive deeper into reviewing source code in
     Chapter 22
    , but during the recon phase, look for hardcoded secrets such as API keys, encryption keys, and database passwords. Search the organization’s repositories for terms like
     key
    ,
     secret
    , and
     password
    to locate hardcoded user credentials that you can use to access internal systems. After you’ve found leaked credentials, you can use KeyHacks (
     https://github.com/streaak/keyhacks/
    ) to check if the credentials are valid and learn how to use them to access the target’s services.
    在第22章中，我们将更深入地了解源代码审查，但在侦察阶段，要寻找硬编码的秘密，如API密钥、加密密钥和数据库密码。在组织的存储库中搜索关键词，如key、secret和password，以定位硬编码的用户凭据，您可以使用它们来访问内部系统。找到泄露的凭据后，您可以使用 KeyHacks(https://github.com/streaak/keyhacks/) 来检查凭据是否有效，并学习如何使用它们来访问目标服务。
    You should also search for sensitive functionalities in the project. See if any of the source code deals with important functions such as authentication, password reset, state-changing actions, or private info reads. Pay attention to code that deals with user input, such as HTTP request parameters, HTTP headers, HTTP request paths, database entries, file reads, and file uploads, because they provide potential entry points for attackers to exploit the application’s vulnerabilities. Look for any configuration files, as they allow you to gather more information about your infrastructure. Also, search for old endpoints and S3 bucket URLs that you can attack. Record these files for further review in the future.
    你还应该搜索项目中的敏感功能。查看是否有任何源代码涉及重要功能，例如身份验证、密码重置、状态更改操作或私人信息读取。注意处理用户输入的代码，例如HTTP请求参数、HTTP头部、HTTP请求路径、数据库条目、文件读取和文件上传，因为它们为攻击者利用应用程序漏洞提供了潜在的入口点。查找任何配置文件，因为它们可以让你收集有关基础架构的更多信息。此外，搜索可以攻击的旧端点和S3存储桶URL。记录这些文件以备将来进一步审查。
    Outdated dependencies and the unchecked use of dangerous functions are also a huge source of bugs. Pay attention to dependencies and imports being used and go through the versions list to see if they’re outdated. Record any outdated dependencies. You can use this information later to look for publicly disclosed vulnerabilities that would work on your target.
    过时的依赖和对危险函数的未检查使用也是错误的巨大来源。注意使用的依赖和导入，查看版本列表以查看它们是否过时。记录任何过时的依赖关系。您可以稍后使用此信息查找可在您的目标上运行的公开披露的漏洞。
    Tools like Gitrob and TruffleHog can automate the GitHub recon process.
     Gitrob
    (
     https://github.com/michenriksen/gitrob/
    ) locates potentially sensitive files pushed to public repositories on GitHub.
     TruffleHog
    (
     https://github.com/trufflesecurity/truffleHog/
    ) specializes in finding secrets in repositories by conducting regex searches and scanning for high-entropy strings.
    类似Gitrob和TruffleHog这样的工具可以自动化GitHub侦察过程。Gitrob（https://github.com/michenriksen/gitrob/）可以定位在GitHub公共仓库中推送的潜在敏感文件。TruffleHog（https://github.com/trufflesecurity/truffleHog/）专注于通过进行正则表达式搜索和扫描高熵字符串来查找存储库中的机密信息。
    Other Sneaky OSINT Techniques
    Many of the strategies I discussed so far are all examples of
     open source intelligence (OSINT)
    , or the practice of gathering intel from public sources of information. This section details other OSINT sources you might use to extract valuable information.
    到目前为止，我讨论的许多策略都是公开源情报（OSINT）的例子，或者从公共信息来源收集情报的实践。本节详细介绍了其他可能用于提取有价值信息的OSINT来源。
    First, check the company’s job posts for engineering positions. Engineering job listings often reveal the technologies the company uses. For example, take a look at an ad like this one:
    首先，查看公司发布的工程职位。工程职位列表通常会透露公司使用的技术。例如，看看这样一个广告：
     Full Stack Engineer
    全栈工程师
     Minimum Qualifications:
     Proficiency in Python and C/C++
     Linux experience
     Experience with Flask, Django, and Node.js
     Experience with Amazon Web Services, especially EC2, ECS, S3, and RDS
    From reading this, you know the company uses Flask, Django, and Node.js to build its web applications. The engineers also probably use Python, C, and C++ on the backend with a Linux machine. Finally, they use AWS to outsource their operations and file storage.
    从阅读这篇文章，你知道该公司使用Flask、Django和Node.js构建其网站应用程序。工程师们在后台也可能使用Python、C和C++，并使用Linux机器。最后，他们使用AWS来外包他们的操作和文件存储。
    If you can’t find relevant job posts, search for employees’ profiles on LinkedIn, and read employees’ personal blogs or their engineering questions on forums like Stack Overflow and Quora. The expertise of a company’s top employees often reflects the technology used in development.
    如果您找不到相关的职位发布，请在LinkedIn上搜索员工个人资料，并阅读员工在Stack Overflow和Quora等论坛上的工程问题或个人博客。公司顶尖员工的专业知识通常反映了开发中使用的技术。
    Another source of information is the employees’ Google calendars. People’s work calendars often contain meeting notes, slides, and sometimes even login credentials. If an employee shares their calendars with the public by accident, you could gain access to these. The organization or its employees’ social media pages might also leak valuable information. For example, hackers have actually discovered sets of valid credentials on Post-it Notes visible in the background of office selfies!
    另一个信息来源是员工的谷歌日历。人们的工作日历通常包含会议记录、幻灯片，有时甚至包含登录凭据。如果员工不小心将他们的日历与公众共享，您可能会获得这些信息。该组织或其员工的社交媒体页面也可能泄露有价值的信息。例如，黑客实际上发现了办公室自拍背景中可见的Post-it笔记上的一组有效凭据！
    If the company has an engineering mailing list, sign up for it to gain insight into the company’s technology and development process. Also check the company’s SlideShare or Pastebin accounts. Sometimes, when organizations present at conferences or have internal meetings, they upload slides to SlideShare for reference. You might be able to find information about the technology stack and security challenges faced by the company.
    如果公司有工程邮件列表，请注册进去以了解公司的技术和开发流程。还要检查公司的SlideShare或Pastebin账户。有时，组织在会议上或内部会议时，会上传幻灯片到SlideShare供参考。您可能能找到有关公司的技术堆栈和安全挑战的信息。
    Pastebin (
     https://pastebin.com/
    ) is a website for pasting and storing text online for a short time. People use it to share text across machines or with others. Engineers sometimes use it to share source code or server logs with their colleagues for viewing or collaboration, so it could be a great source of
    information. You might also find uploaded credentials and development comments. Go to Pastebin, search for the target’s organization name, and see what happens! You can also use automated tools like PasteHunter (
     https://github.com/kevthehermit/PasteHunter/
    ) to scan for publicly pasted data.
    Pastebin（https://pastebin.com/）是一个在线粘贴和储存文本的网站，可供短时间内使用。人们可以使用它来在机器之间或与他人分享文本。工程师有时会使用它来与同事共享源代码或服务器日志，以便查看或协作，因此它可能是一个很好的信息来源。您还可能找到上传的凭据和开发注释。前往Pastebin，搜索目标组织名称，看看会发生什么！您还可以使用自动化工具，如PasteHunter（https://github.com/kevthehermit/PasteHunter/），来扫描公开粘贴的数据。
    Lastly, consult archive websites like the Wayback Machine (
     https://archive.org/web/
    ), a digital record of internet content (
     Figure 5-9
    ). It records a site’s content at various points in time. Using the Wayback Machine, you can find old endpoints, directory listings, forgotten subdomains, URLs, and files that are outdated but still in use. Tomnomnom’s tool Waybackurls (
     https://github.com/tomnomnom/waybackurls/
    ) can automatically extract endpoints and URLs from the Wayback Machine.
    最后，可以查阅像 Wayback Machine（https://archive.org/web/） 这样的档案网站（图5-9），它是网络内容的数字记录。它会在不同的时间点记录一个网站的内容。使用 Wayback Machine，可以找到旧的端点、目录列表、被遗忘的子域名、URL 和已经过时但仍在使用的文件。Tomnomnom 的 Waybackurls 工具（https://github.com/tomnomnom/waybackurls/）可以自动从 Wayback Machine 中提取端点和 URL。
       Figure 5-9
      : The Wayback Machine archives the internet and allows you to see pages that have been removed by a website.
      图5-9：Wayback Machine存档了互联网并允许您查看网站删除的页面。
    Tech Stack Fingerprinting
    Fingerprinting techniques can help you understand the target application even better.
     Fingerprinting
    is identifying the software brands and versions that a machine or an application uses. This information allows you to perform targeted attacks on the application, because you can search for any known misconfigurations and publicly disclosed vulnerabilities related to a particular version. For example, if you know the server is using an old version of Apache that could be impacted by a disclosed vulnerability, you can immediately attempt to attack the server using it.
    指纹技术可以帮助你更好地了解目标应用程序。指纹识别是识别机器或应用程序使用的软件品牌和版本的过程。这些信息可以让你对该应用程序进行有针对性的攻击，因为你可以搜索与特定版本相关的任何已知的配置错误和公开披露的漏洞。例如，如果你知道服务器正在使用一个旧版本的Apache，而该版本可能受到已披露的漏洞的影响，那么你可以立即尝试使用该漏洞对该服务器进行攻击。
    The security community classifies known vulnerabilities as
     Common Vulnerabilities and Exposures (
     CVEs)
    and gives each CVE a number for reference. Search for them on the CVE database (
     https://cve.mitre.org/cve/search_cve_list.html
     ).
    安全社区将已知漏洞分类为常见漏洞和暴露（CVEs），并为每个CVE分配一个参考编号。 在CVE数据库上搜索它们（https://cve.mitre.org/cve/search_cve_list.html）。
    The simplest way of fingerprinting an application is to engage with the application directly. First, run Nmap on a machine with the
     -sV
    flag on to enable version detection on the port scan. Here, you can see that Nmap attempted to fingerprint some software running on the target host for us:
    指纹识别应用程序的最简单方法是直接与应用程序互动。首先，在使用-sV标志的机器上运行Nmap以启用端口扫描的版本检测。在这里，您可以看到Nmap尝试为我们指纹识别目标主机上运行的一些软件：。
$ nmap scanme.nmap.org -sV
Starting Nmap 7.60 ( https://nmap.org )
Nmap scan report for scanme.nmap.org (45.33.32.156)
Host is up (0.065s latency).
Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2f
Not shown: 992 closed ports
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)
25/tcp filtered smtp
80/tcp open http Apache httpd 2.4.7 ((Ubuntu))
135/tcp filtered msrpc
139/tcp filtered netbios-ssn
445/tcp filtered microsoft-ds
9929/tcp open nping-echo Nping echo
31337/tcp open tcpwrapped
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
Service detection performed. Please report any incorrect results at https://nmap.org/submit/.
Nmap done: 1 IP address (1 host up) scanned in 9.19 seconds
    Next, in Burp, send an HTTP request to the server to check the HTTP headers used to gain insight into the tech stack. A server might leak many pieces of information useful for fingerprinting its technology:
    接下来，在Burp中发送HTTP请求到服务器，检查所使用的HTTP标头，以获取有关技术栈的信息。服务器可能会泄漏许多有用的信息，有助于指纹识别其技术：
Server: Apache/2.0.6 (Ubuntu)
X-Powered-By: PHP/5.0.1
X-Generator: Drupal 8
X-Drupal-Dynamic-Cache: UNCACHEABLE
Set-Cookie: PHPSESSID=abcde;
    HTTP headers like
     Server
    and
     X-Powered-By
    are good indicators of technologies. The
     Server
    header often reveals the software versions running on the server.
     X-Powered-By
    reveals the server or scripting language used. Also, certain headers are used only by specific technologies. For example, only Drupal uses
     X-Generator
    and
     X-Drupal-Dynamic-Cache
    . Technology-specific cookies such as
     PHPSESSID
    are also clues; if a server sends back a cookie named
     PHPSESSID
    , it’s probably developed using PHP.
    HTTP头像服务器和X-Powered-By是技术指示器的好标志。服务器标头经常显示运行在服务器上的软件版本。X-Powered-By显示了使用的服务器或脚本语言。此外，某些标头仅用于特定技术。例如，只有Drupal使用X-Generator和X-Drupal-Dynamic-Cache。特定于技术的cookie（如PHPSESSID）也是提示;如果服务器发送名为PHPSESSID的cookie，则可能使用PHP开发。
    The HTML source code of web pages can also provide clues. Many web frameworks or other technologies will embed a signature in source code. Right-click a page, select
     View Source Code
    , and press
     CTRL
    -F to search for phrases like
     powered by
    ,
     built with
    , and
     running
    . For instance, you might find
     Powered by: WordPress 3.3.2
    written in the source.
    网页的HTML源代码也可以提供线索。许多Web框架或其他技术都会在源代码中嵌入签名。右键单击页面，选择查看源代码，按CTRL-F搜索诸如powered by、built with和running等短语。例如，你可能会在源码中找到如Powered by: WordPress 3.3.2的字样。
    Check technology-specific file extensions, filenames, folders, and directories. For example, a file named
     phpmyadmin
    at the root directory, like
     https://example.com/phpmyadmin
    , means the application runs PHP. A directory named
     jinja2
    that contains templates means the site probably uses Django and Jinja2. You can find more information about a specific technology’s filesystem signatures by visiting its individual documentation.
    请检查专属于技术的文件扩展名，文件名，文件夹和目录。例如，在根目录下命名为phpmyadmin的文件，例如https://example.com/phpmyadmin，表示该应用程序运行PHP。包含模板的名为jinja2的目录可能意味着该网站使用Django和Jinja2。您可以通过访问其个人文档来获取有关特定技术的文件系统签名的更多信息。
    Several applications can automate this process.
     Wappalyzer
    (
     https://www.wappalyzer.com/
    ) is a browser extension that identifies content management systems, frameworks, and programming languages used on a site.
     BuiltWith
    (
     https://builtwith.com/
    ) is a website that shows you which web technologies a site is built with.
     StackShare
    (
     https://stackshare.io/
    ) is an online platform that allows developers to share the tech they use. You can use it to find out if the organization’s developers have posted their tech stack. Finally,
    Retire.js is a tool that detects outdated JavaScript libraries and Node.js packages. You can use it to check for outdated technologies on a site.
    有几个应用程序可以自动化这个过程。Wappalyzer (https://www.wappalyzer.com/) 是一个浏览器扩展，可以识别站点上使用的内容管理系统、框架和编程语言。BuiltWith (https://builtwith.com/) 是一个网站，可以显示网站使用的网页技术。StackShare (https://stackshare.io/) 是一个在线平台，允许开发人员分享他们使用的技术。您可以使用它来查找组织的开发人员是否已发布他们的技术栈。最后，Retire.js 是一个工具，可以检测过时的 JavaScript 库和 Node.js 包。您可以使用它来检查站点上是否存在过时的技术。
    Writing Your Own Recon Scripts