Resident Set Size:   
  number of pages the process has in real memory.    
  This is just the pages which count toward text, data, or stack space.    
  This does not include pages which have not been demand-loaded in,    
  or which are swapped out.    
```  
显然如果把所有进程RSS的值相加，可能会超过实际的内存大小，原因是RSS统计存在一定的重复部分，例如在共享内存的计算方面，不同的进程会有重复的现象。    
通过smaps可以非常方便的将重复的部分消除掉。    
例如有多个进程加载了同样的库文件，那么会在这些进程间均摊这部分内存，均摊后的共享部分加上进程私有的内存记为Pss。    
```  
Pss:                 374 kB  
```  
私有的内存则在Private里面计算    
```  
Private_Clean:         0 kB  
Private_Dirty:         0 kB  
```  
在linux中有一个工具叫smem，其实就是通过smaps来统计的。    
PSS是Pss的相加    
USS则是Private的相加    
```  
yum install -y smem smemstat  
smem can report proportional set size (PSS), which is a more meaningful representation of the amount of memory used by libraries and applications in a virtual memory system.  
Because large portions of physical memory are typically shared among multiple applications, the standard measure of memory usage known as resident set size (RSS) will significantly overestimate memory usage. PSS instead measures each application's "fair share" of each shared area to give a realistic measure.  
```  
例子   
```  
smem  
  PID User     Command                         Swap      USS      PSS      RSS   
23716 digoal   postgres: postgres postgres        0     4924     5387     7040   
对应的RSS, PSS, USS分别等于以下相加.    
# cat /proc/23716/smaps | grep Rss  
# cat /proc/23716/smaps | grep Pss  
# cat /proc/23716/smaps | grep Private_  
```  
## 其他参考文章    
https://www.selenic.com/smem/  
http://hustcat.github.io/memory-usage-in-process-and-cgroup/  
http://blog.hellosa.org/2010/02/26/pmap-process-memory.html  
首先 ps 看一下我的系统跑着哪些process    
```  
$ ps aux  
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND  
...  
czbug     1980  0.0  1.7 180472 34416 ?        Sl   Feb25   0:01 /usr/bin/yakuake  
...  
```  
我拿 yakuake 这个小程序作例子。    
其中，关于内存的是 VSZ 和 RSS 这两个    
man ps 看看它们的含义：    
```  
rss       RSS    resident set size, the non-swapped physical memory that a task has used (in kiloBytes). (alias rssize, rsz).  
vsz       VSZ    virtual memory size of the process in KiB (1024-byte units). Device mappings are currently excluded; this is subject to change. (alias vsize).  
```  
简单一点说，RSS 就是这个process 实际占用的物理内存，VSZ 就是process 的虚拟内存，就是process 现在没有使用但未来可能会分配的内存大小。    
其实这里的ps 出来的结果，是有点不正确的，如果把所有程序的 RSS 加起来，恐怕比你的实际内存还要大呢。为什么呢？？因为 ps 的结果，RSS 那部分，是包括共享内存的。这里我用 pmap 来看看。    
```  
$ pmap -d 1980  
1980:   /usr/bin/yakuake  
Address   Kbytes Mode  Offset           Device    Mapping  
00110000    2524 r-x-- 0000000000000000 008:00002 libkio.so.5.3.0  
00387000       4 ----- 0000000000277000 008:00002 libkio.so.5.3.0  
00388000      32 r---- 0000000000277000 008:00002 libkio.so.5.3.0  
00390000      16 rw--- 000000000027f000 008:00002 libkio.so.5.3.0  
00394000     444 r-x-- 0000000000000000 008:00002 libQtDBus.so.4.5.2  
00403000       4 ----- 000000000006f000 008:00002 libQtDBus.so.4.5.2  
00404000       4 r---- 000000000006f000 008:00002 libQtDBus.so.4.5.2  
00405000       4 rw--- 0000000000070000 008:00002 libQtDBus.so.4.5.2  
00407000     228 r-x-- 0000000000000000 008:00002 libkparts.so.4.3.0  
00440000       8 r---- 0000000000039000 008:00002 libkparts.so.4.3.0  
00442000       4 rw--- 000000000003b000 008:00002 libkparts.so.4.3.0  
00443000    3552 r-x-- 0000000000000000 008:00002 libkdeui.so.5.3.0  
007bb000      76 r---- 0000000000377000 008:00002 libkdeui.so.5.3.0  
007ce000      24 rw--- 000000000038a000 008:00002 libkdeui.so.5.3.0  
007d4000       4 rw--- 0000000000000000 000:00000   [ anon ]  
....  
mapped: 180472K    writeable/private: 19208K    shared: 20544K  
```  
我略去了一部分输出，都是差不多的，重点在最后那行输出。    
linux 会把一些shared libraries 载入到内存中，在pmap 的输出中，这些shared libraries 的名字通常是 lib*.so 。如 libX11.so.6.2.0 。这个 libX11.so.6.2.0 会被很多process load 到自己的运行环境中，同时，ps 输出的RSS 结果中，每个process 都包含了这个libX11.so.6.2.0 ，而事实上它只被load 了一次，如果单纯把ps 的结果相加，这样就重复计算了。    
而 pmap 的输出中，writeable/private: 19208K ，这个就是yakuake 这个程序真正占用的物理内存，不包含shared libraries 。在这里，它只有19208K，而ps 的RSS 是34416K。    
我在看这方面的资料时，还看到一些关于virtual memory 的，再记录下。    
以下两个命令均可查看 vmsize 。    
```  
$ cat /proc//stat | awk '{print $23 / 1024}'  
$ cat /proc//status | grep -i vmsize  
```  
一般来说，得出来的值，是和 ps 的 VSZ 是一样的，但有一种情况例外，就是查看X server 的时候。    
举个例：   
```  
$ ps aux|grep /usr/bin/X|grep -v grep | awk '{print $2}'   # 得出X server 的 pid   ...  
1076  
$ cat /proc/1076/stat | awk '{print $23 / 1024}'  
139012  
$ cat /proc/1076/status | grep -i vmsize  
VmSize:      106516 kB  
```  
而 ps 的 VSZ 为 106516 ，与后者是一致的。    
据说是因为    
```  
VmSize = memory + memory-mapped hardware (e.g. video card memory).  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")