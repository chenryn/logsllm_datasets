    section_IDAT="IDAT"
    section_IEND="IEND"
    section_IHDR="IHDR"
    section_PLTE="PLTE"
    section_bKGD="bKGD"
    section_cHRM="cHRM"
    section_fRAc="fRAc"
    section_gAMA="gAMA"
    section_gIFg="gIFg"
    section_gIFt="gIFt"
    section_gIFx="gIFx"
    section_hIST="hIST"
    section_iCCP="iCCP"
    section_iTXt="iTXt"
    section_oFFs="oFFs"
    section_pCAL="pCAL"
    section_pHYs="pHYs"
    section_sBIT="sBIT"
    section_sCAL="sCAL"
    section_sPLT="sPLT"
    section_sRGB="sRGB"
    section_sTER="sTER"
    section_tEXt="tEXt"
    section_tIME="tIME"
    section_tRNS="tRNS"
    section_zTXt="zTXt"#
先不使用字典：
    ./libpng_read_fuzzer -max_total_time=60 -print_final_stats=1
    Done 5454409 runs in 61 second(s)
    stat::number_of_executed_units: 5454409
    stat::average_exec_per_sec:     89416
    stat::new_units_added:          512
    stat::slowest_unit_time_sec:    0
    stat::peak_rss_mb:              822
探测到了512个代码单元  
之后使用字典：
    ./libpng_read_fuzzer -max_total_time=60 -print_final_stats=1 -dict=./png.dict
    #2849333    REDUCE cov: 287 ft: 511 corp: 111/19Kb lim: 4096 exec/s: 105530 rss: 682Mb L: 43/3088 MS: 1 EraseBytes-    #2871709    REDUCE cov: 291 ft: 515 corp: 112/19Kb lim: 4096 exec/s: 106359 rss: 682Mb L: 47/3088 MS: 1 ManualDict- DE: "bKGD"-    #2883416    NEW    cov: 293 ft: 520 corp: 113/19Kb lim: 4096 exec/s: 106793 rss: 682Mb L: 48/3088 MS: 2 PersAutoDict-EraseBytes- DE: "sPLT"-    =================================================================
    ==26551==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x62474b42 bytes
        #0 0x51f69d in malloc /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3
        #1 0x5a98a3 in png_read_buffer /home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:310:16
        #2 0x5a98a3 in png_handle_sPLT /home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:1683:13
        #3 0x571b3c in png_read_info /home/admin/libfuzzer-workshop/lessons/09/libpng/pngread.c:225:10
        #4 0x551b3a in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/09/libpng_read_fuzzer.cc:91:3
        #5 0x459a21 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:553:15
        #6 0x459265 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:469:3
        #7 0x45b507 in fuzzer::Fuzzer::MutateAndTestOne() /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:695:19
        #8 0x45c225 in fuzzer::Fuzzer::Loop(std::Fuzzer::vector >&) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:831:5
        #9 0x449fe8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:825:6
        #10 0x473452 in main /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
        #11 0x7f5d84c2fbf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)
    ==26551==HINT: if you don't care about these errors you may set allocator_may_return_null=1
    SUMMARY: AddressSanitizer: out-of-memory /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3 in malloc
    ==26551==ABORTING
    MS: 1 ShuffleBytes-; base unit: 1c223175724dec61e3adf94affb1cceec27d30ae
    0x89,0x50,0x4e,0x47,0xd,0xa,0x1a,0xa,0x0,0x0,0x0,0xd,0x49,0x48,0x44,0x52,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x63,0x1,0x0,0x0,0x0,0x0,0x4,0x0,0x41,0x41,0x62,0x47,0x4b,0x41,0x73,0x50,0x4c,0x54,0x44,0x41,0x41,0x41,0x41,0x41,0xb9,
    \x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00\x10\x00\x00\x00c\x01\x00\x00\x00\x00\x04\x00AAbGKAsPLTDAAAAA\xb9
    artifact_prefix='./'; Test unit written to ./crash-ac5ad67d43ac829fd5148d6930a33c17c2ac7143
    Base64: iVBORw0KGgoAAAANSUhEUgAAABAAAABjAQAAAAAEAEFBYkdLQXNQTFREQUFBQUG5
    stat::number_of_executed_units: 2888597
    stat::average_exec_per_sec:     103164
    stat::new_units_added:          533
    stat::slowest_unit_time_sec:    0
    stat::peak_rss_mb:              682
啊这，直接出crash,有点东西。这也再次说明了好的字典使得我们fuzz时的输入数据更具有针对性，当然也提高了触发更多代码单元和获得crash的可能。  
我使用workshop的#1编译方法在使用dict的情况下cov只有40多，也未能得到crash，因此上面能得到crash也得益于我们的插桩策略。  
在未使用语料库的情况下就得到了crash实属意料之外，如果我们在使用字典的下情况仍然暂时未得到crash，另一个方法可以去寻找一些有效的输入语料库。因为libfuzzer是进化型的fuzz，结合了产生和变异两个发面。如果我们可以提供一些好的seed，虽然它本身没法造成程序crash，但libfuzzer会在此基础上进行变异，就有可能变异出更好的语料，从而增大程序crash的概率。具体的变异策略需要我们去阅读libfuzzer的源码或者些相关的论文。  
workshop给我们提供了一些seed：
    ➜  09 git:(master) ✗ ls seed_corpus 
    anti_aliasing_perspective.png             blue_yellow_alpha.png                green.png                                  offset_background_filter_1x.png
    anti_aliasing.png                         blue_yellow_alpha_translate.png      green_small.png                            offset_background_filter_2x.png
    axis_aligned.png                          blue_yellow_anti_aliasing.png        green_small_with_blue_corner.png           rotated_drop_shadow_filter_gl.png
    background_filter_blur_off_axis.png       blue_yellow_filter_chain.png         green_with_blue_corner.png                 rotated_drop_shadow_filter_sw.png
    background_filter_blur_outsets.png        blue_yellow_flipped.png              image_mask_of_layer.png                    rotated_filter_gl.png
    background_filter_blur.png                blue_yellow_partial_flipped.png      intersecting_blue_green.png                rotated_filter_sw.png
    background_filter_on_scaled_layer_gl.png  blue_yellow.png                      intersecting_blue_green_squares.png        scaled_render_surface_layer_gl.png
    background_filter_on_scaled_layer_sw.png  blur_filter_with_clip_gl.png         intersecting_blue_green_squares_video.png  scaled_render_surface_layer_sw.png
    background_filter.png                     blur_filter_with_clip_sw.png         intersecting_light_dark_squares_video.png  spiral_64_scale.png
    background_filter_rotated_gl.png          checkers_big.png                     mask_bottom_right.png                      spiral_double_scale.png
    background_filter_rotated_sw.png          checkers.png                         mask_middle.png                            spiral.png
    black.png                                 dark_grey.png                        mask_of_background_filter.png              white.png
    blending_and_filter.png                   enlarged_texture_on_crop_offset.png  mask_of_clipped_layer.png                  wrap_mode_repeat.png
    blending_render_pass_cm.png               enlarged_texture_on_threshold.png    mask_of_layer.png                          yuv_stripes_alpha.png
    blending_render_pass_mask_cm.png          filter_with_giant_crop_rect.png      mask_of_layer_with_blend.png               yuv_stripes_clipped.png
    blending_render_pass_mask.png             force_anti_aliasing_off.png          mask_of_replica_of_clipped_layer.png       yuv_stripes_offset.png
    blending_render_pass.png                  four_blue_green_checkers_linear.png  mask_of_replica.png                        yuv_stripes.png
    blending_transparent.png                  four_blue_green_checkers.png         mask_with_replica_of_clipped_layer.png     zoom_filter_gl.png
    blending_with_root.png                    green_alpha.png                      mask_with_replica.png                      zoom_filter_sw.png
使用seed_corpus去fuzz:
    ➜  09 git:(master) ✗ ./libpng_read_fuzzer seed_corpus
    #502095    REDUCE cov: 626 ft: 2025 corp: 450/631Kb lim: 19944 exec/s: 4219 rss: 457Mb L: 821/19555 MS: 2 CMP-EraseBytes- DE: "JDAT"-    #502951    REDUCE cov: 626 ft: 2025 corp: 450/630Kb lim: 19944 exec/s: 4226 rss: 457Mb L: 2710/19555 MS: 1 EraseBytes-    #503447    REDUCE cov: 626 ft: 2025 corp: 450/630Kb lim: 19944 exec/s: 4230 rss: 457Mb L: 467/19555 MS: 1 EraseBytes-    =================================================================
    ==26681==ERROR: AddressSanitizer: allocator is out of memory trying to allocate 0x60000008 bytes
        #0 0x51f69d in malloc /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3
        #1 0x5ad493 in png_read_buffer /home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:310:16
        #2 0x5ad493 in png_handle_sCAL /home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:2323:13
        #3 0x571a4c in png_read_info /home/admin/libfuzzer-workshop/lessons/09/libpng/pngread.c:200:10
        #4 0x551b3a in LLVMFuzzerTestOneInput /home/admin/libfuzzer-workshop/lessons/09/libpng_read_fuzzer.cc:91:3
        #5 0x459a21 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:553:15
        #6 0x459265 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:469:3
        #7 0x45b507 in fuzzer::Fuzzer::MutateAndTestOne() /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:695:19
        #8 0x45c225 in fuzzer::Fuzzer::Loop(std::Fuzzer::vector >&) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:831:5
        #9 0x449fe8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:825:6
        #10 0x473452 in main /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/fuzzer/FuzzerMain.cpp:19:10
        #11 0x7fc8e2ee1bf6 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21bf6)
    ==26681==HINT: if you don't care about these errors you may set allocator_may_return_null=1
    SUMMARY: AddressSanitizer: out-of-memory /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3 in malloc
    ==26681==ABORTING
    MS: 1 ChangeByte-; base unit: 7221de698a693628dcbac00aa34b38a2aca2a905
    0x89,0x50,0x4e,0x47,0xd,0xa,0x1a,0xa,0x0,0x0,0x0,0xd,0x49,0x48,0x44,0x52,0x0,0x0,0x0,0x27,0x0,0x0,0x0,0xc8,0x8,0x2,0x0,0x0,0x0,0x22,0x3a,0x39,0xc9,0x0,0x0,0x0,0x1,0x73,0x52,0x47,0x42,0x0,0xae,0xce,0x1c,0xe9,0x0,0x0,0x0,0x9,0x70,0x48,0x59,0x73,0x0,0x0,0xb,0x13,0x0,0x0,0xb,0x13,0x1,0x0,0x9a,0x9c,0x18,0x60,0x0,0x0,0x7,0x73,0x43,0x41,0x4c,0x7,0xdd,0xed,0x4,0x14,0x33,0x74,0x49,0x0,0x0,0x0,0x0,0xb7,0xba,0x47,0x42,0x60,0x82,
    \x89PNG\x0d\x0a\x1a\x0a\x00\x00\x00\x0dIHDR\x00\x00\x00'\x00\x00\x00\xc8\x08\x02\x00\x00\x00\":9\xc9\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x09pHYs\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18`\x00\x00\x07sCAL\x07\xdd\xed\x04\x143tI\x00\x00\x00\x00\xb7\xbaGB`\x82
    artifact_prefix='./'; Test unit written to ./crash-110b2ad7102489b24efc4899bf7d9e55904eb83b
    Base64: iVBORw0KGgoAAAANSUhEUgAAACcAAADICAIAAAAiOjnJAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGGAAAAdzQ0FMB93tBBQzdEkAAAAAt7pHQmCC
也顺利得到了crash，这次的crash和上面的crash有所不同，上面造成crash时的cov只有293，而且造成crash的输入为`Base64:
iVBORw0KGgoAAAANSUhEUgAAABAAAABjAQAAAAAEAEFBYkdLQXNQTFREQUFBQUG51`，而使用seed的话cov达到了626，而且造成crash的数据为`Base64:
iVBORw0KGgoAAAANSUhEUgAAACcAAADICAIAAAAiOjnJAAAAAXNSR0IArs4c6QAAAAlwSFlzAAALEwAACxMBAJqcGGAAAAdzQ0FMB93tBBQzdEkAAAAAt7pHQmCC`，要长很多。  
多数情况下我们同时使用字典和语料库，从产生和变异两个方面去提高样例的威力，双管齐下。
接下来就要分析crash的原因了：`ERROR: AddressSanitizer: allocator is out of memory trying
to allocate 0x60000008 bytes`，怎么有点眼熟，好像和lesson 09的报错一样。。但也有所不同，它对错误定位在了`in
malloc /local/mnt/workspace/bcain_clang_bcain-ubuntu_23113/llvm/utils/release/final/llvm.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:145:3`，这个是底层malloc的位置，同时有个hint：`if you don't
care about these errors you may set
allocator_may_return_null=1`，提示我们这个crash是由于malloc申请失败造成的，也就是`/home/admin/libfuzzer-workshop/lessons/09/libpng/pngrutil.c:310:16`处的malloc:
    if (buffer == NULL)
       {
          buffer = png_voidcast(png_bytep, png_malloc_base(png_ptr, new_size));  //此处的png_malloc_base
          if (buffer != NULL)
          {
             png_ptr->read_buffer = buffer;
             png_ptr->read_buffer_size = new_size;
          }
          else if (warn < 2) /* else silent */
          {
             if (warn != 0)
                 png_chunk_warning(png_ptr, "insufficient memory to read chunk");
             else
                 png_chunk_error(png_ptr, "insufficient memory to read chunk");
          }
       }
定位到问题出在png_malloc_base(png_ptr,
new_size)处，由于没有对new_size的大小进行严格限制岛主在malloc时`trying to allocate 0x60000008
bytes`导致异常崩溃。
## 总结
这一篇操作下来我感觉到对于提高libfuzzer的效率包括在编译插桩、字典使用、语料库选择方面有了更清楚的认识。模糊测试fuzz在软件诞生时就应运而生了，经过了如此长时间的发展，对人们它的研究也在不断深入，并且根据不同的需求开发出了很多个性化的fuzz工具。正所谓理论结合实践，要想对libfuzzer有更深入的了解，我们还是要去分析它的源码，参考各种研究paper。
初学libfuzzer，有错误疏忽之处烦请各位师傅指正。