products, although the relevance of attacks is starting to be evaluated in post-
mortem commercial analysis products by crossing vulnerability assessment re-
ports with intrusion-detection alerts.
5.4
Impact on Alert Correlation
Alert correlation is currently being pushed heavily in the research community as
being the way to solve the diagnostic accuracy issue exhibited by many current
commercial intrusion-detection systems. Indeed, we also are part of this trend
and working towards alert correlation as a way to reduce the number of alerts
Evaluation of the Diagnostic Capabilities
197
that are being processed by operators and analysts. Adding the feature extrac-
tion in our model pushes some correlation functionalities down in the probes,
thus reducing alert traﬃc and ensuring that the manager is devoted to alert
correlation from diﬀerent probes.
We believe that the extractor layer in the probe is in fact a fairly simple
engine, extracting features from a single event. We do not envision a feature
extraction mechanism that would search for a feature across two events. In such
case, the feature should be split in two sub-features, each of them covering one
event. The aggregation of the two sub-features is implemented by the analyzer.
As such, the analyzer could provide a diagnostic based on a single event as
well as multiple events.
A number of research projects have proposed mechanisms to use existing
intrusion-detection alerts and correlate them to improve the quality of the di-
agnostic and lower the number of false positives. An example of this trend is
the Tivoli RiskManager product [5]. Looking at it from the feature extraction
viewpoint, a much better solution is to improve the probes themselves, for the
following reasons:
– They have more data internally than in the alerts they provide, in particular
for diagnosing that multiple features come from the same data source, and
the same occurrence within the data source such as a single HTTP request
or a single network packet.
– The exchange of
information between the diﬀerent components of an
intrusion-detection system is minimized, enabling remote management on
smaller network links or minimizing bandwidth required for in-band man-
agement.
– Communications with management consoles can be prioritised more easily,
sending only what needs to be acted upon immediately and batching the
alerts related to reporting and trending activities.
With more intelligent probes in place, work on correlation can concentrate
on the most interesting aspects of crossing alerts provided by multiple probes
while resting sure that each probe provides a trustworthy diagnostic.
6 Conclusion
In this paper, we have shown the design of a test bed for comparative evaluation
of intrusion-detection systems. This test bed has been used to compare four com-
mercial intrusion-detection systems with each other and with the open-source
lightweight Snort. The results show that there is room for improvement in the
tested probes. In particular, the probes must improve the alerts they send by
including more relevant information that can be acquired from the data stream
monitored.
Concerning future work, the test bed is under development to introduce
additional applications and services and vary the traﬃc proﬁle in order to make
the task of the tested intrusion-detection systems more diﬃcult. Also, we are
198
H. Debar and B. Morin
developing a prototype probe to validate the extractor concept and verify that
the diagnostic is indeed improved; this prototype will be used as an additional
yardstick along Snort in the test bed.
References
1. Browne, H. K., Arbaugh, W. A., Hugh, J. M., and Fithen, W. L. A trend
analysis of exploitations. In Proceedings of the 2001 IEEE Symposium on Security
and Privacy (Oakland, CA, May 2001).
2. Cert Coordination Center. Multiple intrusion detection systems may be cir-
cumvented via %u encoding. Cert-CC Vulnerability Note VU#548515, July 2001.
3. Curry, D., and Debar, H. Intrusion detection message exchange format data
model and extensible markup language (xml) document type deﬁnition. Internet
Draft (work in progress), December 2001.
4. Debar, H., Dacier, M., and Wespi, A. Reference Audit Information Generation
for Intrusion Detection Systems. In Proceedings of IFIPSEC’98 (Vienna, Austria
and Budapest, Hungaria, August 31–September 4 1998), pp. 405–417.
5. Debar, H., and Wespi, A. Aggregation and correlation of intrusion-detection
alerts. In Proceedings of RAID 2001 (Davis, CA, USA, October 2001), pp. 85–
103.
6. Handley, M., Kreibich, C., and Paxson, V. Network intrusion detection:
Evasion, traﬃc normalization, and end-to-end protocol semantics. In Proceedings
of the 10th USENIX Security Symposium (Washington, DC, August 13–17 2001).
7. Lippman, R., Haines, J. W., Fried, D. J., Korba, J., and Das, K. Analysis
and results of the 1999 darpa oﬀ-line intrusion detection evaluation. In Proceedings
of RAID 2000 (October 2000), pp. 162–182.
8. McHugh, J. The 1998 lincoln laboratory ids evaluation, a critique. In Proceedings
of RAID 2000 (Toulouse, France, October 2000), pp. 145–161.
9. Mueller, P., and Shipley, G. To catch a thief. Network Computing (August
2001). http://www.nwc.com/1217/1217f1.html.
10. Ptacek, T. H., and Newsham, T. N. Insertion, evasion, and denial of service:
Eluding network intrusion detection. Tech. rep., Secure Networks, January 1998.
11. Puketza, N. J., Chung, M., Olsson, R. A., and Mukherjee, B. A software
platform for testing intrusion detection systems. IEEE Software 14, 5 (September–
October 1997), 43–51.
12. Puketza, N. J., Zhang, K., Chung, M., Mukherjee, B., and Olsson, R. A.
A methodology for testing intrusion detection systems. IEEE Trans. Softw. Eng.
22, 10 (October 1996), 719–729.
13. Rain Forest Puppy. A look at whisker’s anti-ids tactics.
http://www.wiretrip.net/rfp/pages/whitepapers/whiskerids.html, 1999.
14. Roesch, M. Snort - lightweight intrusion detection for networks. In Proceedings
of LISA’99 (Seattle, Washington, USA, November 7-12 1999).
15. Wood, M., and Erlinger, M.
Intrusion detection message exchange require-
ments. Internet draft (work in progress), June 2002.
A Stochastic Model for Intrusions
Robert P. Goldman
Smart Information Flow Technologies (SIFT), LLC
2119 Oliver Avenue South
Minneapolis, MN 55405-2440 USA
PI:EMAIL
Abstract. We describe a computer network attack model with two
novel features: it uses a very ﬂexible action representation, the situation
calculus and goal-directed procedure invocation to simulate intelligent,
reactive attackers. Using the situation calculus, our simulator can project
the results actions with complex preconditions and context-dependent
eﬀects. We have extended the Golog situation calculus programming
with goal-directed procedure invocation. With goal-directed invocation
one can express attacker plans like “ﬁrst attain root privilege on a host
trusted by the target, and then exploit the trust relationship to escalate
privilege on the target.” Our simulated attackers choose among methods
that can achieve goals, and react to failures appropriately, by persistence,
choosing alternate means of goal achievement, and/or abandoning goals.
We have designed a stochastic attack simulator and built enough of its
components to simulate goal-directed attack on a network.
1 Introduction
In order to best develop the techniques of cyber defense, we must be able to
explore them in a scientiﬁc way. Practically speaking, we must be able to test
cyber defense components without having to bring on-line special network conﬁg-
urations and then conducting possibly very harmful actions on those networks.
While it is not a substitute for actual experimentation (both in laboratories,
honeypots and on-line), we must be able to simulate internet attacks based on
analytic models, just the way the military must be able to simulate conﬂicts in
the real world.
Our stochastic model design comprises multiple, modular, components that
will allow security researchers and wargamers to repeatably exercise their sensors
and defenses against goal-directed attackers. The core of our stochastic model
is built upon an expressive representation of actions, the situation calculus [21,
23], permitting us to accurately model complex cyberworld processes. We have
augmented the situation calculus, and its process-modeling extension, Golog [20,
13,23], with facilities for goal-directed procedure invocation. These permit con-
venient speciﬁcation of cyber attackers’ plans in terms of the goals they are to
achieve, providing modularity in modeling and permitting us to experiment with
a wide variety of attack techniques.
A. Wespi, G. Vigna, and L. Deri (Eds.): RAID 2002, LNCS 2516, pp. 199–218, 2002.
c(cid:1) Springer-Verlag Berlin Heidelberg 2002
200
R.P. Goldman
Attacker Population
Model
Attacker
Plans
Attacker Simulation
Engine
Event Model/
Event Dictionary
Sense
Model
IDS Model
Defender Plans
Network
Model
Network and System
Simulation Engine
Defender Acts/Events
Background Traffic
Model
Fig. 1. Illustration of the stochastic model components. Note that the arrows are
loosely intended to denote “depends-on” relationships. These are not indications of
interfaces. The shaded, heavily-outlined components are the ones present in our cur-
rent prototype.
In the next section, we present the architecture we propose for a full cyber
warfare simulation. We have developed a proof-of-concept implementation of the
components of that architecture required to simulate a goal-directed attacker.
Discussion of that implementation and its theoretical background consume the
rest of the paper. We present a full example of a simulated attack, and explain
how it was generated by the simulator. Finally, we give proposed future directions
and an account of related work.
2 Architecture
We have designed the architecture for a full network warfare model (see Figure 1).
We have not implemented this entire architecture; we hope to do so in future
work. What we have now is a subset of this architecture suﬃcient to simulate
the actions of a single attacker. We have chosen to focus on attacker simulation
because this provides the greatest theoretical and modeling challenges. The cur-
rent proof-of-concept shows how a single attacker, with a library of plans and
their component exploits, can attack a network.
Attacker population model. In order to determine how a cyber defense will react
“in the wild,” we need to be able to consider how it will react to a wide variety
of possible attackers. One question of great concern at present is whether we
can eﬀectively defend against serious threats like organized crime and terrorists,
A Stochastic Model for Intrusions
201
without having all our resources absorbed in overreaction against nuisances. This
raises the interesting question of whether attackers’ intent can be inferred from
their actions [10].
We propose to meet this need with a simple stochastic generator that is
capable of randomly creating a set of attackers for a scenario. For particular
scenarios, and for “wargaming,” this could be replaced by having a user just state
how many, and of what type, the attackers are, or some combination (randomly
generate ankle-biters operating concurrently with a user-speciﬁed or even user-
controlled team of more serious adversaries). Attackers would be drawn from
a set of n types of attacker, t1 . . . tn. These might include, for example: script-
kiddie, cyber warrior, recreational hacker and cyber terrorist. To experiment with
diﬀerent threat conditions, the probability of appearance of each class could be
varied.
Associated with each of these classes of attacker, we should have distributions
that determine the attacker’s objectives and knowledge. The attacker’s objectives
would be captured in terms of goals achievable by the plan library. It’s not clear
what an appropriate set of candidate goals would be, but some obvious choices
include:
1. denial of service — for various services run at the site;
2. compromise integrity of service — for various services run at the site;1
3. compromise conﬁdentiality of some data at the site;
4. compromise integrity of some data at the site;
5. web site defacement;
6. compromise of root access;
7. springboard for attack on other sites.
Given a ﬁnite set of possible goals, G, then for any given attacker, a, who has
a set of goals, G(a) and goal, g ∈ G, there is a set of probabilities as follows:
P (g ∈ G(a)), which is a function of the type of the attacker, t(a):
t(ai) = t(aj) =⇒ P (g ∈ G(ai)) = P (g ∈ G(aj))
As far as knowledge, each agent will know only a subset of the plans in our
entire plan library. Much of the diﬀerences in knowledge will be in the speciﬁcs of
the plan library. That is, overall how to do cracking attacks is pretty well-deﬁned.
But down below, when we get to particular exploits on particular services, skill
levels get to be radically diﬀerent. Further, each attacker will have only limited
knowledge of the target systems.
Attacker simulation engine. Most of the work to date on the stochastic model has
centered around this component and the attacker action model, and most of this
paper will concern itself with those aspects of the work. We have developed an
extension to the Golog logical representation of procedures. That extension adds
1 Defacement of web site could be categorized as compromising the integrity of the
service, but that’s probably not appropriate, because it’s signiﬁcant as a special kind
of attack.
202
R.P. Goldman
goal-directed invocation facilities, loosely based on reactive planning languages
such as PRS [11,12] and RAPS [9]. The attacker simulation engine is intimately
intwined with the plan library and attacker actions.
Attacker plan library. The attacker plan library is made up not of speciﬁc ex-
ploits, but sub-goaling data structures that capture abstract strategies for achiev-
ing attack goals. For example, to attain access to a host, you can attain access to
a trusted host and then exploit the trust relationship. These would correspond
to the tops of attack trees [26], or the most abstract capabilities in Jigsaw [29].
We have developed a collection of simple attacker plans, primarily based on the
“Frostbite Falls” scenario [15]. We discuss these plans in more detail in Sec-
tion 4.1.
Note that attack plans are modeled separately from the attackers’ individual
actions and from background network traﬃc (the next two items on our list).
There are three reasons to make this separation. First, attacker plans need lit-
tle, if any, direct interaction with the world model. Second, factoring out the
model of individual actions would allow us to experiment with attacker plan
recognition [10] without involving the full weight of a simulation engine and a
sensor model. Finally, we separate out the details of individual actions because
those are the aspects of the model that change most rapidly. Avoiding mention
of speciﬁc exploits makes it easier to maintain the plan library.
Why does the attacker model not need direct interaction with the world
model? Any information consumed (sensing) would come from the model of
the attackers’ beliefs contained in the state of the attacker simulation engine.
That set of beliefs would be populated as a side eﬀect of executing actions. Any
changes to the world model would be made through the execution of actions (for
which see below).
Attacker actions (Event Model). The attacker actions are modeled using the
situation calculus [23]. Attacker actions include not only exploits per se, but
also conventional actions (e.g., writing a .rhosts ﬁle), that are used in attacks.
The actions provide the bridge between the attacker’s plans and the world model.
We model attacker actions in terms of their preconditions and eﬀects. The
situation calculus representation provides a crisp semantics for precondition-
eﬀects modeling of attacker actions [4,29]. The attackers’ actions are invoked in
the plans executed by the attacker simulation engine. Ideally these actions would
also be executable in the real world, permitting us to replicate our simulation
results in real networks. The model of attacker events is the most developed part
of the current system. We have a small but substantial library of exploit actions.
Network simulation. At the moment, we have only a relatively static model that
describes the current conﬁguration of the network. The network is a passive ﬁeld
upon which the attackers’ actions are played out. Eventually we would like to
see the network simulation grow to a timed discrete-event model of a computer
network. This model must be able to be aﬀected by the invocation of attacker
actions in the Event model. It must also provide some kind of time signal that
can be used by other components (especially the attacker simulator so that time
A Stochastic Model for Intrusions
203
is handled correctly. Finally, it must be possible for simulated agents to sense
this model and update their beliefs.
Ideally, the network simulation should be plug-compatible with the real
world. I.e., we should be able to invoke the attack events (or at least a sub-
set thereof) against the real world to replicate simulation results. We should
also be able to have the attacker engine sense the real world and build beliefs
the same way it would sense the network simulation.
Sensor Models. The proposed sensor model component comprises models of
intrusion detectors and other components (e.g. system loggers, ﬁrewalls, etc.)
that would provide information to a defender. We are particularly interested in
developing this component in order to be able to experiment with IDS report
aggregation without having to ﬁeld large suites of IDSes. Such a model would
let us do large numbers of experiments on sensor event fusion without having to
handle actual traﬃc, just alerts.
3 Framework for the Single-Attacker Simulation