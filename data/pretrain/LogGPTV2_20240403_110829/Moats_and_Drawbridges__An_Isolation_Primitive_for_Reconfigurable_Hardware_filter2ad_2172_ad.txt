XC2V40
XC2V500
XC2C2000
XC2V8000
# Frames
Frame Length (32-bit words) R/W time for 1 frame (ICAP@50 Mhz)
404
928
1456
2860
26
86
146
286
5.04 us
14.64 us
24.24 us
46.64 us
extreme case of physical tampering.
The IBM 4758 is an example of a cryptographic copro-
cessor that has been designed to detect tampering and to
disable itself whenever tampering occurs [51]. The device is
surrounded by specialized packaging containing wire mesh.
Any tampering of the device disturbs this mesh, and the de-
vice can respond by disabling itself.
4 Drawbridges: Interconnect Interface Con-
formance with Tracing
In the previous section, we described an effective method
for isolating cores using moats. Our moat methodology
eliminates the possibility for external cores to tap into the
information contained in a core surrounded by the moat.
However, cores do not work in isolation and must commu-
nicate with other cores to receive and send data. Therefore,
we must allow controlled entry into our core. The entry or
communication is only allowed with prespeciﬁed transac-
tions through a “drawbridge”. We must know in advance
which cores we need to communicate with and the location
of those cores on the FPGA. Often times, it is most efﬁ-
cient to communicate with multiple cores through a shared
interconnection (i.e., a bus). Again, we must ensure that
bus communications are received by only the intended re-
cipient(s). Therefore, we require methods to ensure that 1)
communication is established only with the speciﬁed cores
and 2) communication over a shared medium does not re-
sult in a covert channel.
In this section, we present two
techniques, interconnect tracing and a bus arbiter, to handle
these two requirements.
We have developed an interconnect tracing technique for
preventing unintended ﬂows of information on an FPGA.
Our method allows a designer to specify the connections on
a chip, and a static analysis tool checks that each connec-
tion only connects the speciﬁed components and does not
connect with anything else. This interconnect tracing tool
takes a bitstream ﬁle and a text ﬁle that deﬁnes the modules
and interconnects in a simple language which we have de-
veloped. The big advantage of our tool is that it allows us to
perform the tracing on the bitstream ﬁle. We do not require
a higher level description of the design of the core. Per-
forming this analysis during the last stage of design allows
us to catch illegal connections that could have originated
from any stage in the design process including the design
tools themselves.
In order for the tracing to work we must know the loca-
tions of the modules on the chip and the valid connections
to/from the modules. To accomplish this we place moats
around the cores during the design phase. We now know the
location of the cores and the moats, and we use this infor-
mation to specify a text ﬁle that deﬁnes: all the cores along
with their location on the chip, all I/O pins used in the de-
sign, and a list of valid connections. Then our tool uses the
JBits API [13] to analyze the bitstream and check to make
sure there are no invalid connections in the design. The pro-
cess of interconnect tracing is performed by analyzing the
bitstream to determine the status of the switchboxes. We
can use this technique to trace the path that a connection is
routed along and ensure that it goes where it is supposed to.
This tracing technique allows us to ensure that the different
cores can only communicate through the channels we have
speciﬁed and that no physical trap doors have been added
anywhere in the design.
Ensuring that interconnects between modules are secure
is a necessity to developing a secure architecture. This prob-
lem is made more complicated by the abundance of routing
resources on an FPGA and the ease with which they can be
reconﬁgured. Our proposed interconnect tracing technique
allows us to ensure the integrity of connections on a recon-
ﬁgurable device. This tool gives us the ability to perform
checking in the ﬁnal design stage: right before the bitstream
is loaded onto the device.
4.1 Eﬃcient Communication under the
Drawbridge Model
In modern reconﬁgurable systems, cores communicate
with each other via a shared bus. Unfortunately, the shared
nature of a traditional bus architecture raises several secu-
rity issues. Malicious cores can obtain secrets by snooping
on the bus. In addition, the bus can be used as a covert chan-
nel to leak secret data from one core to another. The ease
of reconﬁgurability on FPGAs allows us to address these
problems at the hardware level.
To address this problem of covert channels and bus
snooping, we have developed a shared memory bus with
M1
M2
M3
Mn
M1
M2
M3
Mn
. . .
Arbiter
Arbiter
Arbiter
Arbiter
. . .
Arbiter
Time
Multiplexer
BRAM Block
BRAM Block
Figure 8. Architecture alternative 1. There is
a single arbiter and each module has a dedi-
cated connection to the arbiter.
Figure 9. Architecture alternative 2. Each
module has its own arbiter that prevents bus
snooping and a central time multiplexer that
connects to all the arbiters.
a time division access. The bus divides the time equally
among the modules, and each module can read/write one
word to/from the shared memory during its assigned time
slice. Our approach of arbitrating by time division elimi-
nates covert channels. With traditional bus arbitration, there
is a possibility of a bus-contention covert channel to exist in
any shared bus system where multiple cores or modules ac-
cess a shared memory. Via this covert channel, a malicious
core can modulate its bus references, altering the latency of
bus references for other modules. This enables the transfer
of information between any two modules that can access the
bus [18]. This covert channel could be used to send infor-
mation from a module with a high security clearance to a
module with lower security clearance (write-down), which
would violate a Bell-LaPadula multilevel policy and can-
not be prevented through the use of the reference monitor.
To eliminate this covert channel, we give each module an
equal share of time to use the bus, eliminating the transfer
of information by modulating bus contention. Since each
module can only use the bus during its alloted time slice,
it has no way of changing the bus contention. One module
cannot even tell if any of the other modules are using the
bus. While this does limit performance of the bus, it re-
moves the covert channel. The only other feasible way that
we see to remove this covert channel is to give each mod-
ule a dedicated connection to all other modules. Requiring
a dedicated direct connection between each set of modules
that need to communicate would be inefﬁcient and costly.
Dedicated channels would require a worst case of O(2n)
connections, where n is the number of modules in the de-
sign. Our architecture requires only O(n) connections.
Bus snooping is another major concern associated with a
shared bus. Even if we eliminate the covert channels there
is nothing to prevent bus snooping. For example, let us con-
sider a system where we want to send data from a classiﬁed
module to another and where there are unclassiﬁed modules
on the same bus. We need a way to ensure that these less
trusted modules cannot obtain this information by snooping
the bus. To solve this problem, we place an arbiter between
the module and the memory. The arbiter only allows each
module to read during its time share of the bus. In addition
a memory monitor is required, but for this work we assume
that such a conﬁguration can be implemented on the FPGA
using the results of Huffmire et. al.[19]
4.2 Architecture Alternatives
We devised two similar architectures to prevent snoop-
ing and to eliminate covert channels on the bus. In our ﬁrst
architecture, each module has its own separate connection
to a single arbiter, which sits between the shared memory
and the modules. This arbiter schedules access to the mem-
ory equally according to a time division scheduling (Figure
8). A module is only allowed to read or write during its al-
loted time, and when a module reads, the data is only sent to
the module that issued the read request. The second archi-
tecture is more like a traditional bus. In this design, there
is an individual arbiter that sits between each module and
the bus. These arbiters are all connected to a central timing
module which handles the scheduling (Figure 9). The in-
dividual arbiters work in the same way as the single arbiter
in the ﬁrst architecture to prevent snooping and to remove
covert channels. To make interfacing easy, both of these
architectures have a simple interface so that a module can
easily read/write to the shared memory without having to
worry about the timing of the bus arbiter.
During the design process, we found that the ﬁrst archi-
tecture seemed easier to implement, but we anticipated that
the second architecture would be more efﬁcient. In our ﬁrst
architecture (Figure 8, everything is centralized, making the
design of a centralized memory monitor and arbiter much
easier to design and verify. In addition, a single moat could
be used to isolate this functionality. Our second architec-
ture (Figure 9) intuitively should be more scalable and efﬁ-
cient since it uses a bus instead of individual connections for
each module, but the arbiters have to coordinate, the mem-
ory monitor has to be split (if that is even possible), and
each arbiter need to be protected by its own moat.
To test our hypotheses, we developed prototypes of both
of the architectures. The prototypes were developed in
VHDL and synthesized for a Xilinx Virtex-II device in or-
der to determine the area and performance of the designs
on a typical FPGA. We did not account for the extra moat
or monitor overhead, but with this assumption results of the
analysis of the two architectures, which can be seen in Ta-
ble 2, were not what we ﬁrst expected. During synthesis of
the second architecture, the synthesis tool converted the tri-
state buffers6 in the bus to digital logic. As a result, the sec-
ond architecture used more area than the ﬁrst and only had
a negligible performance advantage. Contrary to what we
expected, the ﬁrst architecture used roughly 15% less area
on the FPGA and is simpler to implement and verify. Since
the peformance difference between the two was almost neg-
ligible, the ﬁrst architecture is the better design choice.
This bus architecture allows modules to communicate se-
curely with a shared memory and prevents bus snooping and
certain covert channels. When combined with the reference
monitor this secure bus architecture provides a secure and
efﬁcient way for modules to communicate.
5 Application: Memory Policy Enforcement
Now that we have described isolation and its related
primitives, we provide an example of the application of iso-
lation to memory protection, an even higher-level primitive.
Saltzer and Schroeder identify three key elements that are
necessary for protection: “Conceptually, then, it is neces-
sary to build an impenetrable wall around each distinct ob-
ject that warrants separate protection, construct a door in
the wall through which access can be obtained, and post a
guard at the door to control its use.” [43]. In addition, the
guard must be able to identify the authorized users. In the
case of protecting cores, our moat primitive is analogous to
the wall, and our drawbridge primitive is analogous to the
door. Our interconnect tracing and secure bus primitives act
as the guard.
One way of protecting memory in an FPGA system is
to use a reference monitor that is loaded onto the FPGA
along with the other cores [19]. Here, the reference monitor
is analogous to the guard because it decides the legality of
every memory access according to a policy. This requires
that every access go through the reference monitor. Without
6tri-state buffers are gates that can output either a 0, 1, or Z – a high
impedance state in which the gate acts as if it was disconnected from the
wire.
our isolation primitive, it is easy for a core to bypass the
reference monitor and access memory directly. Since moats
completely surround a core except for a small amount of
logic (the drawbridge) for communicating with the rest of
the chip, it is much easier to prevent a core from bypassing
the reference monitor.
Saltzer and Schroeder describe how protection mecha-
nisms can protect their own implementations in addition to
protecting users from each other [43]. Protecting the ref-
erence monitor from attack is critical to the security of the
system, but the fact that the reference monitor itself is re-
conﬁgurable makes it vulnerable to attack by the other cores
on the chip. However, moats can mitigate this problem by
providing physical isolation of the reference monitor.
Our isolation primitive also makes it harder for an unau-
thorized information ﬂow from one core to another to oc-
cur. Establishing a direct connection between the two cores
would clearly thwart the reference monitor. If moats sur-
round each core, it is much harder to connect two cores di-
rectly without crossing the moat.
As we described above, a reference monitor approach
to memory protection requires that every memory access
go through the reference monitor. However, cores are con-
nected to each other and to main memory by means of a
shared bus. As we explained in Section 4.1, the data on a
shared bus is visible to all cores. Our secure bus primitive
protects the data ﬂowing on the bus by controlling the shar-
ing of the bus with a ﬁxed time division approach.
A memory protection system that allows dynamic pol-
icy changes requires an object reuse primitive. It is often
useful for a system to be able to respond to external events.
For example, during a ﬁre, all doors in a building should
be unlocked without exception (a more permissive policy
than normal), and all elevators should be disabled (a less
permissive policy than normal). In the case of an embedded
device, a system under attack may wish to change the policy
enforced by its reference monitor. There are several ways to
change polices. One way is to overwrite the reference mon-
itor with a completely different one. Our scrubbing prim-
itive can ensure that no remnants of the earlier reference
monitor remain. Since cores may retain some information
in their local memory following a policy change, our scrub-
bing primitive can also be used to cleanse the cores.
6 Related Work
There has always been an important relationship be-
tween the hardware a system runs on and the security of that
system. Reconﬁgurable systems are no different, although
to the best of our knowledge we are the ﬁrst to address the
problem of isolation and physical interface conformance on
them. However, in addition to the related work we have al-
ready mentioned, we do build on the results of prior related
Table 2. Comparison of Communication Architectures
Architecture 1 Architecture 2
Percent Difference
Slices
Flip Flops
4 Input LUTs
146
177
253
169
206
305
Maximum Clock Frequency
270.93
271.297
15.75
16.38
20.55
0.14
efforts. In particular, we build on the ideas of reconﬁgurable
security, IP protection, secure update, covert channels, di-
rect channels, and trap doors. While a full description of all
prior work in these areas is not possible, we highlight some
of the most related.