0
Figure 3: Interleaving of Streams
mission groups numbered ¡1; 0; 1 and having a proﬂle
similar to the TGs in Figure 2. In general, hash packets
are sent as soon as they are ready while signature and
parity packets are spaced throughout the data and hash
packets of the subsequent transmission group. This in-
terleaving adds robustness to burst loss at the potential
cost of some additional latency.
4 Related Work
There are essentially three approaches to authenticat-
ing broadcast packets. The one we consider in this pa-
per is to use ‘ordinary’ public key signatures to secure
data, hash, and parity information. An alternative is
to use public key signatures on the data and assure that
the signature can be checked by using FEC to achieve
reliability. A ﬂnal alternative is to use symmetric keys
or special kinds of public key signatures. Each of these
approaches oﬁers its own challenges. The ﬂrst approach
is vulnerable to signature (cid:176)oods, the second is vulner-
able to attacks on FEC encoding as well as signature
(cid:176)ooding, and the third requires additional assumptions
such as synchronized clocks or special cryptography.
The idea of amortizing the cost of public key sign-
ing and checking over multiple packets by using hash
chains was suggested in [5]. To deal with packet loss in
authenticated broadcast, one approach that has been
extensively studied is to add more hashes into the pack-
ets [18, 13, 6, 17]. For instance, a packet might contain
the hash of the packet before it and the packet before
that one. If the middle packet is lost, then the extra
hash enables veriﬂcation. This chaining has some prob-
lems, however. First, the choice of the chaining has a
signiﬂcant impact on the reliability that is achieved,
and this impact is subtle to analyze. Second, reliabil-
ity costs bandwidth since multiple hashes are needed
to assure that chains to signature packets remain un-
broken by losses. In any case, adding extra hashes to
packets does not deal with dropped signature packets
so something needs to be done about this too. A hy-
brid approach [24] addresses computation and reliabil-
ity problems by putting a signature into each packet
along with hashes of a collection of other packets. The
signature is applied to a Merkle hash tree [12] created
from this collection and only needs to be checked once
for each collection. This also has the advantage that
each packet can be veriﬂed as soon as it arrives. De-
spite the optimization provided by the Merkle tree, this
approach has a signiﬂcant bandwidth overhead since
space must be allocated for the signature and multiple
hashes in each packet.
The use of coding techniques to limit overhead for
authenticated broadcast appears in the extended hash
chain scheme of [18] based on Rabin’s Independent Dis-
persal Algorithm (IDA). Subsequent work on FEC for
authenticated broadcast has shown that low overheads
can be acheived [14, 15]. These approaches are vulnera-
ble to signature (cid:176)ooding and attacks on FEC encoding.
An FEC-based technique to a address a DoS attack in
which an adversary is able to modify a small number
of sender packets is discussed in [15]. This technique
is not eﬁective when large numbers of invalid packets
can be inserted by an adversary as in the shared chan-
nel model. For instance, suppose we wish to endure a
proportionate attack with a code of n segments that
can be reconstructed if no more than t segments are
lost and no more than ﬁ are modiﬂed. Decoding is
the ﬂrst step in the veriﬂcation phase of [15], so the
receiver will need to look for segments to use in de-
coding from among the segments he receives. Assume
that m ‚ n¡ t of these came as sent by the sender and
another n segments arrive as modiﬂed by an adversary.
To decode, the receiver needs to ﬂnd a set of n¡ t seg-
ments from among n + m possibilities that includes at
most ﬁ segments from among the n adversary-modiﬂed
segments. For reasonable values of n; t; ﬁ; m, testing
these combinations until a good one is found will add
many multiples of processing overhead to the decod-
ing. This problem is the basis of the conventional wis-
dom [19, 9] that unauthenticated FEC-encoded data is
vulnerable to DoS attack.
There are several approaches to broadcast authen-
tication based on symmetric keys or special kinds of
public key signatures. One approach [1] involves se-
lecting a collection G of symmetric keys and distribut-
ing a random subset of G to each receiver; a trusted
sender uses MACs based on all of the keys in G, and
each receiver veriﬂes using the keys they have. Another
approach [18] assumes that the sender and receivers
can synchronize their clocks to within an accpetable
threshold. The sender then sends out data packets
with MACs and later discloses the key for computing
the MAC. Packets received after the disclosure are dis-
carded. The use of MACs helps defeat DoS attacks
becuase of their relatively low processing cost. When
distributing sets of secret keys or synchronizing clocks
is feasible these approaches are robust against DoS at-
tacks. Of course, attention must then be paid to DoS
treats against supporting protocols for time synchro-
nization and key distribution. Another strategy to deal
with DoS is to use less expensive forms of cryptographic
veriﬂcation such as one-time [5, 16] or k-time [21] sig-
nature schemes.
Our contribution in this paper is a technique, se-
lective veriﬂcation, and its application to DoS attacks
on broadcast authentication schemes that use common
kinds of public key signatures. Selective veriﬂcation
can be used with most of the existing approaches to
public key authentication of broadcast packets. Our
speciﬂc instantiation, the BAS protocol, uses a sim-
ple kind of hash tree divided into two authentica-
tion streams. This approach ﬂts well with our use
of RTP [23] and FEC techniques [20] that add parity
packets as a supplementary stream (see also [4]). Our
system achieves the low overheads of FEC-based tech-
niques without the need for new kinds of cryptography
or other assumptions and provides robust protection
against DoS attacks.
5 Protocol Speciﬂcation
As discussed broadly earlier, in order for broadcasts to
be reliably authenticated, our protocol will provide two
fundamental types of protection: (1) a mechanism en-
abling reliable recovery of authentication packets (i.e.,
hash and signature packets) lost at a priori unpre-
dictable locations; and (2) a conﬂguration resilient to
informed DoS attacks that provides computationally
e–cient authentication. We consider each of these is-
sues in turn before providing a formal speciﬂcation and
analysis of the broadcast authentication streams (BAS)
protocol.
5.1 FEC in the Authentication Stream
We refer the reader to Appendix A for a discussion of
forward error correction codes. We summarize here the
speciﬂc variant that we use in our protocol.
Encoding Hash Packets We will use punctured
Reed-Solomon codes to protect the k hash packets for
each transmission group from erasures. While it is
tempting to philosophically think of a packet as a sym-
bol, the size of each packet, say 1500 bytes, makes for
a daunting ﬂeld size. It is computationally much easier
to work in ﬂelds of modest size. Accordingly, we par-
tition each hash packet of N bits into N=m symbols
(neglecting packet overhead bits and integer round-oﬁ
for simplicity), each of m bits. Grouping corresponding
symbols in each of the k hash packets yields a parallel
collection of N=m groups of k source symbols to be fed
in parallel to a punctured Reed-Solomon encoder.
If
erasure protection for losses of up to ‘ authentication
packets in a group is desired, we now create ‘ par-
ity packets, with each packet consisting of N=m parity
symbols resulting in a parallel collection of N=m groups
0 = k+‘ symbols forming the punctured codewords.
of n
Observe that the loss of any packet results in the loss
of a symbol in the same location for each of the N=m
codewords that have been formed. Thus, as long as no
0 Hash/Parity (HP) packets are
more than ‘ of these n
lost, no codewords will have lost more than ‘ symbols
and all symbols, hence all hash packets, can then be
recovered. See Rizzo [20] for details on this approach.
Encoding Signature Packets Each transmission
group creates only one signature packet. Latency con-
siderations prohibit pooling signatures from several
groups and as a consequence we end up coding sig-
natures individually from group to group. In such set-
tings repetition codes yield comparable protection to
more sophisticated codes and we may as well opt for
simplicity of implementation. A second, more subtle
computational factor arises when we consider coding
to protect against DoS signature attacks next.
5.2 DoS Protection via FEC
We consider DoS attacks that attempt to confuse the
recipient by sending a (cid:176)ood of packets mimicking true
packets by usurping their sequence numbers. In what
follows, we describe a paradigm that uses FEC to
severely diminish such attacks. For instance, using our
approach, an adversary launching a DoS signature at-
tack at a rate of 100 Mbps, can be reduced eﬁectively
to a 1 Mbps DoS attack with a very small bandwidth
overhead. As mentioned earlier, there are two varia-
tions of the basic approach. The ﬂrst one, called selec-
tive sequential veriﬂcation, works with repetition codes,
and is well-suited for handling signature attacks since
they only occupy a tiny fraction of the authentication
stream. The second approach, called selective bin ver-
iﬂcation, works with a broad range of FEC schemes,
and is particularly well-suited to handle attacks on the
HP packets.
Signature Attacks The adversary attack in this in-
stance involves (cid:176)ooding the receiver with spurious sig-
nature packets. This is a strong attack since public
key veriﬂcation is the single most computationally ex-
pensive step performed at the receiver end. To cope
with the attack the sender creates a number of copies,
say M, of the ﬂrst signature packet in a transmission
group and interleaves and transmits these copies over
the next transmission group. The copies are identical
barring the packet sequence number so that the com-
putational burden on the sender is kept minimal.
Selective sequential veriﬂcation. For a given compu-
tational budget, say 5% of the processor, the receiver
sequentially samples received packets purporting to be
signatures (i.e., with a valid sequence number). Each
putative signature is examined with a probability …
(determined by the available computational budget and
the maximum number of packets arriving per second)
so as to ensure that the total number of signature veri-
ﬂcations per unit time remains within the budget with
high conﬂdence. A su–cient number of replications of
the signature vis (cid:181)a vis the adversary’s spurious copies
will su–ce to guarantee a high conﬂdence that a valid
signature will, in fact, be discovered. Each time a sig-
nature is veriﬂed the receiver proceeds to verify the
corresponding hashes.
Hash/Parity Attacks An adversary may also at-
tack the HP packets in the authentication stream.
Given the relatively large number of HP packets in
each transmission group, selective veriﬂcation, which
is based on repetition coding, can no longer be e–-
ciently used because of the large per packet overhead.
Selective bin veriﬂcation provides an e–cient way to
counter DoS attacks on HP packets.
Selective bin veriﬂcation. In the absence of a DoS at-
tack, FEC allows us to recover the hash packets for a
transmission group as long as any k of the n hash and
parity packets in the code successfully arrive at the re-
ceiver. Typically, the code parameters are chosen such
that the probability of k packets arriving is very high,
say, 99:99%. We can instead choose a more powerful
code that, with high probability, ensures that at least
ck of the HP packets successfully arrive at the receiver
(where c > 1). Suppose we are searching for k valid
HP packets for transmission group i, and suppose we
have identiﬂed a set W of received packets such that
all valid HP packets for transmission group i must be
contained within W |this set presumably contains a
large amount of adversary tra–c. Since we know the
valid packet sequence numbers for HP stream for trans-
mission group i, we can easily cluster all of the packets
in W by their sequence numbers (i.e., all packets that
share a sequence number are put together in a bin)
thereby forming several bins. The algorithm now pro-
cesses these bins in increasing order of sizes|checking
all packets in each bin until a valid packet is found.
While scanning each bin, we compute the hash of each
packet in the bin and match it against the hash in-
cluded in the signature packet. We stop once we have
collected k valid hash and parity packets. Suppose p
is the loss probability. If at least ck HP packets arrive
and the average size of a bin is W=ck, then searching
[1=(1 ¡ p)]k bins is likely to yield k valid HP packets.
Thus there is a net eﬁect of diminishing the adversary
tra–c by a factor of (1¡ p)c. So, for instance, choosing
c to be 10, can eﬁectively slow down the adversary by
a factor of 10, diminishing the computational load on
the receiver by an order of magnitude.
5.3 The BAS Protocol
We can now put the previous considerations together
to specify the BAS protocol. This protocol uses selec-
tive sequential veriﬂcation to handle a DoS signature
attack and selctive bin veriﬂcation to handle a DoS at-
tack on HP stream. Let Nd; Nh; and Ns respectively
denote the number of data packets, HP packets, and
signature packets in each transmission group. Also, let
N = Nd + Nh + Ns, and let R denote the ratio of max-
imum possible adversary tra–c rate to the maximum
possible sender tra–c rate.
Sender Protocol
(Figure 4)
1. As data packets are produced, collect their hashes
into hash packets. Forward data packets as soon
Collect data
packets, compute
hashes, send
Interleave
No
Enough for
hash pkt?
Yes
Form hash packet,
send
Yes
No
Enough for
TG?
Compute parity
and signature
packets
Buffer putative
data and hash
pkts
Randomly verify
signature pkts
over latency
window
Flush buffer
Find valid data
pkts
Pick most recent
valid signature pkt
Reconstruct hash
stream
Figure 4: Flow Chart for BAS Sender
as their hashes are taken, and send hash packets
as soon as they are complete.
2. When enough data packets have been processed to
make a transmission group, create parity packets
and a signature for the group.
3. While sending the next transmission group, inter-
leave the parity packets and Ns copies of the sig-
nature packet for this group. In this interleaving,
the signature and parity packets should alternate.
Receiver Protocol: Acquisition Phase To ac-
quire a stream the receiver begins searching for sig-
nature packets as indicated in RTP headers. The ac-
quisition phase is vulnerable to a replay attack, and in
order to protect against such an attack, the receiver
ﬂrst buﬁers all candidate signature packets that are
received over a window of time that corresponds to
the time needed to broadcast g transmission groups.
Now it chooses a random subset of packets for veriﬂca-
tion from this set, picking each candidate packet in the
buﬁer with probability …. Among the signature pack-
ets that are successfully veriﬂed, the receiver picks the
one with the most recent time stamp and proceeds to
locate the HP stream corresponding to this packet. At
this point, we say that the stream is acquired. Once a
stream is acquired, the receiver knows the packet num-
bers that correspond to signature packets sent by the
sender since the authentication stream has a repetitive
structure.
Find valid hash
and parity pkts
Figure 5: Flow Chart for BAS Receiver
Receiver Protocol: Stream Processing Phase
(Figure 5)
1. When a valid signature has been found, it is used
to search for the corresponding hash and parity
packets in its TG. This search is carried out over a
collection of packets received before and after the
receipt of the valid signature packet. This collec-
tion is called the HP (HP) veriﬂcation window and
is chosen to consist of 2(R+1)(N) packets received
prior to the packet containing a valid signature and
(R + 1)N packets that are received after that. It
is easy to see that all relevant HP packets must be
contained within this window.
2. The receiver now applies the selective bin veriﬂ-
cation technique to cluster these packets into bins
(based on packet sequence numbers) and processes
these bins in increasing order of sizes. While pro-
cessing a bin, it checks the hash of each candidate
packet against the hash recovered from the signa-
ture packet (using the packet sequence number).
Once the valid hash and parity packets in the HP
veriﬂcation window are found, FEC is used to re-
construct as many missing hash packets as possi-
ble. Those hashes that can be veriﬂed are used
to obtain veriﬂed data packets, which are passed
along or otherwise indicated as authenticated.
3. After a TG has been processed, the receiver con-
tinues searching for the next valid signature by
verifying each incoming signature with probability
…. This process repeats after each valid signature