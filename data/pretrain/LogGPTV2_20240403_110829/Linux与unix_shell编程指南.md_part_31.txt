### 21.2.11 创建精致菜单

在讲解`while`循环时，我们已经创建了一个基本的菜单。现在我们将进一步完善这个菜单脚本，使其具有以下选项：

- 增加记录
- 查看记录
- 修改记录
- 删除记录
- 打印记录
- 退出

此脚本使用`read_char`函数，允许用户在选择菜单选项时不必按回车键。此外，通过`trap`命令（将在本书后面详细说明）忽略信号2、3和15，以防止用户试图跳出菜单。

#### 菜单访问控制

该菜单还具有一些访问控制功能。授权用户可以修改和删除记录，而其他用户只能增加、查看或打印记录。有效的用户列表及其访问级别保存在文件`priv.user`中。如果用户运行菜单时，其用户名不在`priv.user`文件中，则会收到提示并退出程序。

例如，用户`root`、`dave`和`matty`不能修改数据库文件，而`peter`和`louise`则可以。

#### 用户权限检查

为了检查用户的权限，首先需要读取`priv.user`文件，忽略注释行，并将有效行重定向到一个临时文件中。接下来，从临时文件中读取用户名和权限级别，与当前用户的用户名进行匹配。当前用户名是通过`whoami`命令获取的。如果未找到匹配项，则继续查找下一个用户。如果在整个文件中均未找到匹配项，则默认权限级别为1（普通访问），高级访问权限返回0。

当用户选择修改或删除记录时，基于上述函数的返回值进行测试。在这个例子中，`passwd`文件被分类或列出目录清单。

#### 示例输出

图21-2展示了带有访问限制的菜单屏幕概貌，其中用户`dave`试图修改记录但只具有一般权限，因此被提示权限不足。

#### 退出菜单

用户可以通过选择`q`或`Q`来退出菜单。退出时调用一个清屏函数，这样可以随意增加要运行的命令，同时增加脚本的可读性。

### 脚本示例

```bash
#!/bin/bash

# 读取权限文件
read_privileges() {
    # 代码实现
}

# 检查用户权限
check_user_permission() {
    # 代码实现
}

# 主菜单
main_menu() {
    while true; do
        echo "1. 增加记录"
        echo "2. 查看记录"
        echo "3. 修改记录"
        echo "4. 删除记录"
        echo "5. 打印记录"
        echo "6. 退出"
        read -n 1 -s choice
        case $choice in
            1) add_record ;;
            2) view_records ;;
            3) modify_record ;;
            4) delete_record ;;
            5) print_records ;;
            6) exit_menu ;;
            *) echo "无效选项" ;;
        esac
    done
}

# 退出菜单
exit_menu() {
    clear
    exit 0
}

# 其他功能函数
add_record() { ... }
view_records() { ... }
modify_record() { ... }
delete_record() { ... }
print_records() { ... }

# 启动主菜单
main_menu
```

### 21.3 小结

使用`tput`命令可以增强应用外观及脚本的控制。颜色设置可以增加应用的专业性，但不要过度使用，以免影响用户体验。通过使用和读取控制字符，可以增加脚本的灵活性，特别是对于用户击键输入操作更是如此。

### 22.1 增加记录

将记录加入文件包含两个步骤：
1. 确认输入有效。
2. 将记录写入文件。

#### 输入验证

为了确保输入的有效性，我们需要编写一些函数来测试字段是否为数字或字符型，并且长度是否符合要求。这些函数已在前面的章节中编写完毕，可以直接使用。

以下是检测字符串是否为数字的函数示例：

```bash
is_number() {
    if [[ $1 =~ ^[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}
```

#### 写入记录

当所有字段的有效性验证完成后，将提示用户是否保存记录。如果用户选择“Y”，则将记录追加到文件中：

```bash
echo "$NUM:$F_NAME:$S_NAME:$DEPART" >> $DBFILE
```

然后显示信息通知用户记录已存入文件。`sleep`命令将脚本进程挂起1秒，以使用户有足够的时间查看该信息。

### 完整脚本示例

以下是增加一个记录的完整脚本示例：

```bash
#!/bin/bash

# 定义全局变量
DBFILE="staff.db"

# 读取权限文件
read_privileges() {
    # 代码实现
}

# 检查用户权限
check_user_permission() {
    # 代码实现
}

# 检测字符串是否为数字
is_number() {
    if [[ $1 =~ ^[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# 检测字符串长度
check_length() {
    local input=$1
    local max_length=$2
    if [ ${#input} -le $max_length ]; then
        return 0
    else
        return 1
    fi
}

# 检查重复编号
check_duplicate() {
    local code=$1
    if grep -q "^$code:" $DBFILE; then
        return 1
    else
        return 0
    fi
}

# 添加记录
add_record() {
    local NUM F_NAME S_NAME DEPART
    while true; do
        echo "请输入员工编号（10位数字）:"
        read NUM
        if ! is_number $NUM; then
            echo "员工编号必须是数字！"
            continue
        fi
        if ! check_length $NUM 10; then
            echo "员工编号长度不能超过10位！"
            continue
        fi
        if ! check_duplicate $NUM; then
            echo "员工编号已存在！"
            continue
        fi
        break
    done

    while true; do
        echo "请输入员工名字（20个字符以内）:"
        read F_NAME
        if [ -z "$F_NAME" ]; then
            echo "员工名字不能为空！"
            continue
        fi
        if ! check_length $F_NAME 20; then
            echo "员工名字长度不能超过20个字符！"
            continue
        fi
        break
    done

    while true; do
        echo "请输入员工姓氏（20个字符以内）:"
        read S_NAME
        if [ -z "$S_NAME" ]; then
            echo "员工姓氏不能为空！"
            continue
        fi
        if ! check_length $S_NAME 20; then
            echo "员工姓氏长度不能超过20个字符！"
            continue
        fi
        break
    done

    while true; do
        echo "请输入部门（记帐/IT/服务/销售/权利）:"
        read DEPART
        case $DEPART in
            记帐|IT|服务|销售|权利)
                break
                ;;
            *)
                echo "无效的部门名称！"
                ;;
        esac
    done

    echo "确认保存记录？(Y/N)"
    read confirm
    if [ "$confirm" = "Y" ] || [ "$confirm" = "y" ]; then
        echo "$NUM:$F_NAME:$S_NAME:$DEPART" >> $DBFILE
        echo "记录已保存！"
        sleep 1
    else
        echo "记录未保存！"
    fi
}

# 主菜单
main_menu() {
    while true; do
        echo "1. 增加记录"
        echo "2. 查看记录"
        echo "3. 修改记录"
        echo "4. 删除记录"
        echo "5. 打印记录"
        echo "6. 退出"
        read -n 1 -s choice
        case $choice in
            1) add_record ;;
            2) view_records ;;
            3) modify_record ;;
            4) delete_record ;;
            5) print_records ;;
            6) exit_menu ;;
            *) echo "无效选项" ;;
        esac
    done
}

# 退出菜单
exit_menu() {
    clear
    exit 0
}

# 启动主菜单
main_menu
```

希望这些优化后的文本能帮助你更好地理解和实现你的脚本。如果有任何进一步的问题或需要更多的帮助，请随时告诉我！