∗
q and the corresponding
public key Ppub := sP ∈ G1. The system-wide public key is
2
params := {q, G1, G2, P, Ppub, e, H1, H2, G, n, E, D, λ, l}
Keygen: given an user’s identity ID ∈ {0, 1}∗
, the PKG computes QID =
Encrypt: to encrypt a message M using Ppub and an identity ID ∈ {0, 1}∗
,
∗
q and output the ciphertext
where n denotes a bound on the size of plaintexts.
H1(ID) ∈ G1 and returns a private key dID = sQID ∈ G1.
compute QID = H1(ID) ∈ G1, pick a random r R← Z
C = (cid:4)rP, ESK(M )(cid:5)
where SK = H2(QID, rP, e(Ppub, QID)r) ∈ {0, 1}λ
returns M = DSK(B) where SK = H2(QID, A, e(A, dID)) ∈ {0, 1}λ.
Decrypt: upon receiving a ciphertext C = (cid:4)A, B(cid:5) ∈ G1 × {0, 1}n, the recipient
Fig. 1. Hybrid-IBE
1 Phan and Pointcheval showed in [32] that post-challenge queries are not of a signif-
icant additional help to adversaries.
290
Benoˆıt Libert and Jean-Jacques Quisquater
perform a re-encryption in validity checking concerns. Unfortunately, these trans-
formations should be applied to a OW-PCA2 variant of BasicIdent for which a
part of the ciphertext is obtained by multiplying the message with a G2 element.
As those elements have a representation of at least 1024 bits for recommended
parameters (see [10] or [11] for details), ciphertexts would be signiﬁcantly longer
than in our scheme. On the other hand, redundancy-free IBE schemes may also
be obtained with the OAEP 3-round generic construction [33] but the security
could only be proved in a relaxation of the security model of deﬁnition 2 and
ciphertexts would also be longer than those of Hybrid-IBE. The security of the
latter is claimed by the theorem below.
Theorem 1. Let us assume that an IND-ID-CCA2 adversary A has an advan-
tage  against Hybrid-IBE when running in a time τ, asking qhi queries to oracles
hi (i = 1, 2), qD decryption queries and qKE key extraction queries. Then, for
any 0 ≤ ν ≤ , there either exists
– a PPT algorithm B to solve the Gap-BDH problem with an advantage
(cid:3) ≥
1
(cid:1)
 − qD
2k
(cid:2)
− ν
e(qKE + 1)
within time τ(cid:3) ≤ τ + (qh1 + qKE)τmult + qDτsym + qh2Φ
scheme (E, D) with advantage ν within a time τ(cid:3)
– an attacker that breaks the IND-CCA security of the symmetric encryption
where e is the base of the natural logarithm, τmult is the cost of a multiplication in
G1 while τsym and Φ respectively denote the complexity of a symmetric decryption
and the one of a call to the decision oracle.
Proof. Let (aP, bP, cP,ODBDH) be an instance of the Gap-BDH problem where
ODBDH(.) is a decision3 oracle that, on input (P, aP, bP, cP, ω), answers 1 if
ω = e(P, P )abc and 0 otherwise. We describe an algorithm B using A and the
latter oracle to compute e(P, P )abc.
Algorithm B initializes A with the system-wide public key Ppub = aP and
simulates the adversary’s view as explained below. Wlog, we assume that H1
queries on identities are distinct (otherwise, a list may be used to store inputs
and responses) and that any key extraction, decryption or H2 query involving
an identity is preceded by a H1 query on the same identity.
– H1 queries: for such a query on an identity ID, B ﬂips a bit coin ∈ {0, 1}
taking the value 0 with probability ξ and the value 1 with probability 1− ξ.
If coin = 0, B returns uP ∈ G1 for some u R← Z
q and it answers u(bP ) ∈ G1
∗
if coin = 1. In both cases, a triple (ID, u, coin) is stored in a list L1.
2 More precisely, this notion would be an identity based ﬂavored extension of the One-
Wayness against Plaintext-Checking Attacks characterizing schemes that remain
computationally one-way even in the presence of an oracle deciding whether a given
ciphertext encrypts a given message. See [29] for a more formal deﬁnition.
3 In fact, it is a restricted decision oracle as some of its inputs (namely P and aP ∈ G1)
do not change between all queries. The actual assumption is thus slightly weaker than
the Gap-BDH one for which additional degrees of freedom are enabled in queries to
the DBDH oracle.
Identity Based Encryption Without Redundancy
291
– Private key queries: when the private key associated to an identity ID ∈
{0, 1}∗ is requested, B recovers the entry (ID, u, coin) from L1. If coin = 1,
B aborts since it is unable to coherently answer the query. Otherwise, it
returns uPpub as a private key.
– Queries to H2(.): according to a proof technique already used in [17, 18, 36]
for KEMs, these queries are processed using three lists L2,a, L2,b and L2,c
which are initially empty:
• L2,a contains triples (QIDi , Ai, ωi) to which a hash value was previously
assigned and the corresponding digest h2,i ∈ {0, 1}λ.
• L2,b contains triples (QIDi
L2,a for h2,i ∈R {0, 1}λ and ODBDH(P, QIDi
• L2,c will contain triples (QIDi
a value h2,i
ODBDH(P, QIDi
More precisely, when A submits a triple (QID, A, ω) to H2(.),
• B ﬁrst checks if L2,a contains a tuple (QID, A, ω, h2) for some h2 ∈ {0, 1}λ
(meaning the a hash value was previously assigned to the same input).
If it does, h2 is returned to A.
• Otherwise, B submits (P, QID, A, Ppub, ω) to the ODBDH(.) oracle which
, Ai, ωi) such that (QIDi
, Ai, ωi, h2,i) exists in
, Ai, h2,i) for which B has implicitly assigned
, Ai, ωi) although the value ωi such that
, Ai, Ppub, ωi) = 1.
R← {0, 1}λ to H2(QIDi
, Ai, Ppub, ωi) = 1 is unknown.
decides whether it is a valid BDH tuple.
∗ If it is, then:
· If A = cP and coin = 1 (i.e. H1(ID) was deﬁned to be u(bP )), B
halts and outputs ω1/u which is the searched solution. We denote
by AskH2 the event that such a hash query is made .
· Otherwise, B continues and adds (QID, A, ω) in L2,b.
· If L2,c contains an entry (QID, A, h2) for some h2 ∈ {0, 1}λ, the
tuple (QID, A, ω, h2) is stored in L2,a and h2 is returned to A.
Otherwise, B continues.
∗ It selects a string h2
R← {0, 1}λ, inserts the tuple (QID, A, ω, h2) into
L2,a and answers h2 to A.
– Decryption queries: upon receiving a ciphertext C = (cid:4)A, B(cid:5) ∈ G1 × {0, 1}n
and an identity ID, the simulator B does the following:
• it checks if (QID, A, ω) exists in L2,b for some ω ∈ G2. If it does, B
retrieves the tuple (QID, A, ω, h2) that must be in L2,a and returns the
symmetric decryption Dh2(B) of B using h2 ∈ {0, 1}λ as a symmetric
key. Otherwise, it continues.
• It tests whether L2,c contains a triple (QID, A, h2) for some string h2 ∈
{0, 1}λ. In this case, the latter is used to compute a symmetric decryption
R← {0, 1}λ is
Dh2(B) that is returned as a result. Otherwise, a random h2
chosen and (QID, A, h2) is inserted into L2,c (B thereby implicitly assigns
the hash value h2 to the oracle H2 on the unique input (QID, A, ω) for
which ODBDH(P, QID, A, Ppub, ω) = 1 although the relevant ω ∈ G2 is
still unknown) while Dh2(B) is returned to A.
After the ﬁnd stage, A comes with messages M0, M1 ∈ {0, 1}n and a target
identity ID∗
. Let (ID∗, u∗, coin∗) be the corresponding entry in L1. If coin∗ = 0,
292
Benoˆıt Libert and Jean-Jacques Quisquater
2
, B aborts.
) and some h∗
B aborts and reports “failure” because, in such a situation, A is of no help in B’s
endeavour. Otherwise, it sets A∗ = cP ∈ G1, checks whether L2,c contains an
∈ {0, 1}λ (if not, B inserts
2) for QID∗ = h1(ID∗
entry (QID∗, A∗, h∗
R← {0, 1}λ of its choice) to compute a symmetric encryption
it for a string h2
2 (Md), for d R← {0, 1}, and return the challenge C∗ = (cid:4)A∗, B∗(cid:5). In
B∗ = Eh∗
the unlikely event (its probability is less than qD/2k) that C∗ was previously
submitted to the decryption oracle for the identity ID∗
At the second stage, B processes all queries as above and A eventually pro-
duces a bit d(cid:3). In a real game, we have Pr[d(cid:3) = d] = ( + 1)/2 and, provided the
simulation is perfect, the latter equality still holds as A’s view is indistinguish-
able from a real environment. It can be showed that the simulation is imperfect
with a probability smaller than e−1(qKE + 1)−1(1− qD/2k). Indeed, let us deﬁne
the following events:
E1: B does not abort as a result of a private key extraction query.
E2: B does not abort during the challenge phase because A chooses a target
E3: B does not fail because the constructed challenge C∗ was previously queried
Those events are independent. We observed that Pr[E3] ≥ 1 − qD/2k. We also
have Pr[E1] = (1 − 1/(qKE + 1))qKE ≥ 1/e (as shown in the proof technique of
[15]) and Pr[E2] = 1/(qKE + 1). It comes that if Fail = ¬E1 ∨ ¬E2 ∨ ¬E3, we
have Pr[¬Fail] = e−1(qKE + 1)−1(1 − qD/2k).
On the other hand, if AskH2 does not occur and thus if A never makes
the relevant h2(QID∗ , A∗, ω∗) query during the game, the only way for her to
produce a correct guess for d is to succeed in a chosen-ciphertext attack against
the symmetric cipher (E, D): indeed, in the latter case, each decryption query on
a ciphertext C(cid:3) = (A∗, B), with B (cid:12)= B∗, for the target identity ID∗
corresponds
to a symmetric decryption request for a completely random key SK∗. It follows
that, if (E, D) is a chosen-ciphertext secure symmetric encryption scheme, the
event AskH2 is very likely to happen and B is able to extract the Gap-BDH
solution.
ability Pr[E|¬Fail], we have
identity ID∗
to the decryption oracle for the identity ID∗
More formally, for any event E, if we denote by pr[E] the conditional prob-
for which coin∗ = 0.
.
pr[d(cid:3)
= d] = pr[d(cid:3)
= d|AskH2]pr[AskH2] + pr[d(cid:3)
= d|¬AskH2]pr[¬AskH2]
≤ pr[AskH2] + pr[d(cid:3)
= d|¬AskH2](1 − pr[AskH2])
and, since pr[d(cid:3) = d] = ( + 1)/2 and pr[d(cid:3) = d|¬AskH2] ≤ (ν + 1)/2, it comes
that
 + 1
≤ ν + 1
+
2
2
1 − ν
2
pr[AskH2] ≤ ν + 1
2
1
2
+
pr[AskH2]
and hence pr[AskH2] ≥  − ν. When going back to non-conditional probabilities,
we ﬁnd the announced lower bound
(cid:2)
Pr[AskH2 ∧ ¬Fail] ≥
on B’s probability of success.
(cid:1)
 − qD
2k
(cid:1)