alerts). Additional tests are performed to map speciﬁc ser-
vice invocations with observed security sensitive operations.
We also use the names of methods as a heuristic to prioritize
methods for manual investigation. During manual investiga-
tion we can initialize variables with valid values, and we can
optionally use a jailbroken device to monitor system activity
(e.g., ﬁle access logs) while invoking the service.
IV. KOBOLD
Kobold is divided into three tasks. First, it performs a
survey of the entitlements available to third party applica-
tions. Second, it enumerates the NSXPC services accessible
to third party applications. Third, we evaluate the security
sensitivity of accessible NSXPC services in order to high-
light services likely to allow confused deputy attacks.
The ﬁrst and second tasks are automated. We developed
scripts and integrated existing tools to extract application
entitlements and enumerate NSXPC services. The third task
4
Vulnerability AnalysisFirmwareApp DataSandbox RulesMach Services(NSXPC Objects, Methods, Ports)Entitlement Types (public, semi-private)Triage Accessible ServicesAttack SurfaceStaticAnalysisStaticAnalysisStaticAnalysisDynamic Testinguses fuzzing and manual analysis to investigate NSXPC
service methods that are accessible and security sensitive.
A. Identify Semi-Private Entitlements
Since entitlement requirements in the sandbox can de-
termine the set of mach-ports accessible to third party
applications, our ﬁrst step is to enumerate the entitlements
that a third party application can possess. Finding the set of
public entitlements is trivial. We enable all the capabilities
available in Xcode for an iOS app and extract the entitle-
ments from this app’s signature. However, identifying semi-
private entitlements requires scraping applications from the
App Store and surveying their entitlements.
Deﬁnition (Semi-Private Entitlement). An entitlement
is
semi-private if it is possessed by a third party application on
the app store, but not possessed by our experimental Xcode
application with all capabilities enabled.
Kobold’s entitlement surveying framework has two stages.
First, we automatically download the .ipa (iPhone applica-
tion archive) ﬁles representing iOS applications from the
Apple App Store. Second, we extract metadata and entitle-
ment data from each .ipa ﬁle and search for entitlements that
we have not already labeled as public. Finally, we take care
to ignore entitlements from App Store applications that list
“Apple” as the developer. Such applications are not installed
by default on iPhones, but they can still be granted private
entitlements because their code base is owned by Apple.
App Scraper: We developed an app scraper for Kobold,
but we do not claim to have developed the ﬁrst App Store
scraper. Kobold uses accessibility options and AppleScript to
manipulate iTunes on macOS, while prior work by Orikogbo
et al. [25] uses a Windows virtual machine to manipulate
iTunes. We collected our app samples in September 2017.
Apple has ofﬁcially removed the iOS app market from
the default version of iTunes. However, to reproduce our
analysis, it is possible to install6 an alternative version7 of
iTunes and restore the iOS app market functionality.
Modeling Sandbox Entitlement Checks: Kobold expands
upon an existing model of iOS access control called iOra-
cle [9] in two ways: 1) modeling sandbox rules for mach-
port access; and 2) enumerating the entitlements available
to third party applications. By combining an enumeration of
third party entitlements and the model of sandbox rules for
mach-port access, Kobold can automatically map third party
accessible entitlements to sandbox rules that require those
entitlements. This mapping allows us to infer which mach
ports are accessible to a sandboxed third party application
(even if that app possesses semi-private entitlements).
6https://www.macworld.com/article/3230135/software-
entertainment/how-to-install-itunes-1263-and-replace-itunes-127.html
7https://support.apple.com/en-us/HT208079
B. Enumerate Accessible NSXPC Services
To invoke an NSXPC service, a client must correctly
specify two targets: (1) a mach-port name and (2) a remote
method associated with the service. Kobold uses two static
analysis techniques and one dynamic analysis technique to
ﬁnd these mach-ports and methods in order to enumerate
the NSXPC services accessible to third party applications.
First, a mapping of mach ports to the executables that
host them is extracted from a cache of conﬁguration ﬁles
extracted from the iOS ﬁrmware. Second, protocol headers
that contain method names for NSXPC services are extracted
statically from daemon binaries, which were extracted from
iOS ﬁrmware. Third, our internally developed application
attempts to invoke combinations of mach ports and method
names while recording responses from these invocations.
Mapping Mach Ports to Executables: In general, iOS
statically maps mach port names to the executables that host
them. In theory, it is possible for services to be set up at
runtime, but due to the following reasons it is usually done
statically. The static mapping allows launchd to start the
appropriate daemon when a service provided by that daemon
is requested. A static mapping also prevents processes from
pretending to host a mach port
in order to steal IPC
messages. The mapping of mach-ports to executables can
be obtained statically by analyzing a cache of mach-port
name registrations stored in xpcd_cache.dylib. How-
ever, parsing this ﬁle is non-trivial. First, Kobold identiﬁes
a section in the .dylib binary format that represents a .plist
ﬁle and extracts that section using jtool.8 This plist ﬁle is
then converted from a binary format into xml by using the
plutil utility. Finally, the xml formatted plist ﬁle can
be parsed with regular expressions to extract a mapping of
service providing executables to the mach-ports they host.
Mapping Protocols to Executables: Since NSXPC is an
object-oriented interface, both the client and service provider
are expected to have a list of method declarations (method
names and argument types) called a protocol. However, these
protocols are not publicly available and must be extracted
from the binary executables of service providers found on
the iOS ﬁrmware image. We use a static analysis tool called
class-dump9 to extract object-oriented features (i.e., protocol
method declarations) from iOS daemon executable ﬁles.
Using class-dump, we search service providers for inter-
face classes associated with either NSXPCConnection or
NSXPCListener classes. Class-dump extracts the protocols
implemented by these interfaces, and we extract method
declarations from those protocols. The extracted protocols
are not guaranteed to represent NSXPC services, but we treat
them as an over-approximation that can be reﬁned through
dynamic testing. For example, the NSXPCListenerDelegate
protocol appears often, but it seems to act as a utility service
8http://www.newosxbook.com/tools/jtool.html
9http://stevenygard.com/projects/class-dump/
5
supporting connections for other NSXPC services and is not
relevant to our analysis.
Mapping Ports to Protocols: At this point, mach-ports
have been mapped to executables, and protocols have been
mapped to executables. Kobold also removes any mach-
ports that the sandbox blocks access to as discussed in
Section IV-A. However, an executable could use more than
one mach-port and more than one protocol. Therefore, while
we have signiﬁcantly reduced the possible combinations,
we still need to disambiguate invalid mach-port to protocol
combinations within an executable. Kobold addresses this
ambiguity by attempting each combination at run time and
using message feedback to determine which mach-port to
protocol combinations are valid.
Bypassing Compile Time Policies: The Xcode IDE for iOS
forbids developers from calling NSXPC APIs in their code.
However, through reverse engineering we have conﬁrmed
that system programs on iOS do use NSXPC. Therefore, the
libraries for NSXPC exist on the iOS device, but Xcode acts
as a compile-time obstacle to discourage malicious or acci-
dental abuse of low level functionality. To clarify, third party
applications are expected to call libraries that will indirectly
call NSXPC APIs from the third party app’s address space.
If developers directly invoke NSXPC APIs, they are more
likely to call them with invalid or dangerous parameters.
Investigating the NSXPC header ﬁle10 in the iOS SDK (Soft-
ware Development Kit) revealed that the NSXPC API we
needed was augmented with the tag __IOS_PROHIBITED.
Removing these tags from the header ﬁle allowed us to use
Xcode to compile applications using NSXPC APIs.
Completion Responses: Once a client connection to a
mach-port, NSXPC allows it to call associated remote meth-
ods. Many methods contain a special parameter called a
completion handler that contains zero or more arguments
and a block of code to be executed if the remote method
completes. Kobold calls all remote methods associated with
the protocols extracted and assumes that messages which
trigger completion handler responses are accessible unless
those completion handlers return error messages specify-
ing entitlement requirements. If an error occurs, a helpful
message describing the problem may be available in the
error ﬁeld of the method’s completion handler. We speculate
that these error messages were only intended for Apple
developers since third parties are not expected to use the
NSXPC APIs. However, we have found these completion
handler errors to provide valuable insights since they may
specify the entitlement key and value required for the
method being called. An example automatically-generated
completion handler is presented in Figure 3.
10/Applications/Xcode.app/Contents/Developer/Platforms
/iPhoneOS.platform/Developer/SDKs/
iPhoneOS11.3.sdk/System/Library/Frameworks/
Foundation.framework/Headers/NSXPCConnection.h
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
NSXPCInterface *myIf_9;
NSXPCConnection *myConn_9;
initWithMachServiceName:@"com.apple.commcenter.
cupolicy.xpc"options:0];
myConn_9.remoteObjectInterface = myIf_9;
[myConn_9 resume];
myConn_9.interruptionHandler = ˆ{NSLog(@"id 9:
Connection Terminated");};
myConn_9.invalidationHandler = ˆ{NSLog(@"id 9:
Connection Invalidated");};
NSLog(@"id 9: Invocation has a completion handler");
typedef void (ˆobjectOpBlock_9_2)(NSError * var_9_1);
objectOpBlock_9_2 blockH_9_3 = ˆ(NSError * var_9_1) {
NSLog(@"id 9: Completion message");
@try {
NSLog(@"id 9: COMPLETION HANDLER OUTPUT NSError *
var_9_1: %@",var_9_1);
}
@catch (NSException * e) {
NSLog(@"Completion Handler Exception: %@", e);
}
};
@try {
[myConn_9.remoteObjectProxy refreshPlansInfo:
blockH_9_3];
}
@catch (NSException * e) {
NSLog(@"Invocation Exception: %@", e);
}
Figure 3. Example Automatically-Generated Completion Handler
C. Security Sensitivity of NSXPC Services
We use four methods to evaluate the security sensitivity of
each remote method and ﬁlter for candidate attacks: 1) we
use method name semantics and entitlement requirement
inconsistencies to triage methods for manual investigation;
2) we manually investigate values returned via completion
handler arguments; 3) we observe user perceivable changes
on the device; 4) we use a jailbroken device to provide
supplemental insight into ﬁle operations and crash logs.
Method Name Semantics: Apple has not obfuscated the
names of the remote methods, and Objective-C requires each
parameter to be mentioned in the method name. Therefore,
the method names contain a signiﬁcant amount of semantic
information related to their functionality. The method name
of each method with a successful completion handler (in-
cluding the following example) was reviewed manually by
an author with experience investigating iOS access control
policies. For example, we would manually classify the
following method declaration as security sensitive due to
the terms “Recording”, “Dictation”, and “Speech”.
1
2
3
4
5
- (oneway void)startRecordingFor
PendingDictationWithLanguageCode:(NSString *)
arg1 options:(AFDictationOptions *)
arg2 speechOptions:(AFSpeechRequestOptions *)
arg3 reply:(void (ˆ)(NSXPCListenerEndpoint *))
arg4;
Entitlement Inconsistencies: Each remote method is an
opportunity for developers to make access control mistakes.
We assume that each method associated with a mach port
has a similar level of security sensitivity. We also assume
6
that methods requiring entitlements are security sensitive.
Therefore, any method that does not require an entitlement
and shares a port with a method that does require an entitle-
ment is considered to be security sensitive. For example, if a
port has 9 methods that require an entitlement and one that
does not, we assume that a developer may have forgotten to
add an entitlement requirement to the unrestricted method.
Observations Without Jailbreak: A signiﬁcant amount
of system activity can be observed when fuzzing remote
methods on a non-jailbroken device. Many methods contain
parameters that represent return values, and these values
may contain security sensitive data after the method ﬁnishes
executing. In one step, we initialize method parameters to
either simple values such as 0 for numbers or an empty
string. Then we use values previously collected via static
analysis or dynamic analysis, e.g., names of open ﬁles or
ﬁle names and strings used in programs. If invalid method
arguments cause device features to be disrupted (e.g., Inter-
net access, conﬁguration options), a human observer may
detect these changes by manually investigating the device
state. Effects such as sounds or prompts that occur while
running the fuzzing application can also be documented.
Finally, crash reports are visible to iOS users through the
Settings menu. These reports can be used to detect crashes
caused by method invocation on stock or jailbroken devices.
Observations With Jailbreak: We perform two types on
dynamic analysis to observe system activity on a jailbroken
device. First, we use ﬁlemon11 to track all ﬁle operations
(i.e., the process, ﬁle source, ﬁle destination, and operation
type) on the device. Second, we monitor crash log ﬁles.12,13
V. IDENTIFIED SEMI-PRIVATE ENTITLEMENTS
As discussed in Section IV-A, an application’s entitle-
ments play a signiﬁcant role in determining which mach
ports and remote methods the app has access to. Public
entitlements are trivially identiﬁable by assigning them to
an experimental iOS application created in Xcode with all
capabilities toggled on. However, Apple also distributes an
unknown set of semi-private entitlements to a subset of third
party developers. Therefore, we need to answer the research
question: “What semi-private entitlements can be acquired
by third party applications?”. To answer this question, we
performed a survey of the Apple iOS App Store in order to
search for third party applications with entitlements that are
not in our set of known public entitlements. We conducted
the survey in September and October 2017.
Six Thousand Popular Apps: Since semi-private entitle-
ments require an additional amount of trust from Apple, we
assume that popular applications (e.g., Netﬂix and Uber) are
more likely to contain semi-private entitlements. There are
25 app genres listing the top 240 most popular applications
11http://www.newosxbook.com/src.jl?tree=listings&ﬁle=3-ﬁlemon.c
12/private/var/mobile/Library/Logs/AppleSupport/
13/private/var/mobile/Library/Logs/CrashReporter/
for the United States in each genre for a total of 6000 appli-
cations. Of the 6000 popular apps, there is overlap between
genres (e.g., the same app might be listed under Games and
Lifestyle), and only 5873 of the popular applications were
unique. Of the 5873 unique applications, 5716 were free, and
we did not collect any paid applications. Of the 5716 free
applications, 16 gave error messages stating that they were
not currently available in the United States, and we were able
to download the other 5700 applications. We speculate that
these applications were revoked from the US app store, but
are still indexed as popular. Our ﬁnal sample set consisted
of 5700 popular, free applications currently available in the
US. 17 of the 5700 applications list Apple as the developer,
so we label the remaining 5683 as third party applications.
100k Random App Sample: In addition to our survey of
popular applications, we also collected 100 thousand ran-
domly selected applications. This collection was performed
automatically by a tool we developed. It took two weeks
for it to download the applications and another two days to
extract the entitlements used in those applications. However,
within this sample we did not detect any new types of semi-
private entitlement that had not been observed in our sample
of six thousand popular applications. This ﬁnding supports
the assumption that a sample set of popular applications
is sufﬁcient to study semi-private entitlements. Therefore,
quantities listed in this section are with respect to the six
thousand popular apps.
Results: We discovered 17 semi-private entitlements. To
the best of our knowledge, only 4 have clear documentation
from Apple about
the process of requesting them. The
process requires sending an email
to a speciﬁc team
within Apple to request access. The four entitlements
publicly documented as semi-private are pass-presentation-
suppression,14
previous-
application-identiﬁers,16 and HotspotHelper.17 The semi-
private entitlements are listed in Table I.
Vendor Speciﬁc Entitlements: Five of the semi-private
entitlements are vendor-speciﬁc, listing the app developer’s
names in the entitlement key. Flickr, Twitter, Vimeo, and
several Facebook applications all have vendor-speciﬁc, semi-
private entitlements with keys referencing default access and
account data. Nike has three applications with a vendor-
speciﬁc entitlement referencing healthkit and Nike Fuel,
Nike’s proprietary unit of measurement for ﬁtness activity.
Sharing Resources with Daemons: Two applications pos-
sess unique semi-private entitlements that seem to otherwise
be used by system applications. As revealed by Strafach
[6], the Uber application has the explicit-graphics-priority18