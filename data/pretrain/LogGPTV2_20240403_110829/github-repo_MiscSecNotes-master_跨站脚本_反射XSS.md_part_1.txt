## 一、什么是跨站脚本漏洞
跨站脚本漏洞（Cross Site Scripting，常简写作XSS）是Web应用程序在将数据输出到网页的时候存在问题，导致攻击者可以将构造的恶意数据显示在页面的漏洞。跟大多数Web 漏洞一样，此类漏洞的产生的原因也是没有处理好用户的输入。根据类型的不同，可以分为反射型 XSS，存储型 XSS，DOM 型 XSS，这篇先来讲讲反射型 XSS。  
跨站脚本攻击注入的恶意代码运行在浏览器中，所以对用户的危害是巨大的——也需要看特定的场景：跨站脚本漏洞存在于一个无人访问的小站几乎毫无价值，但对于拥有大量用户的站点来说却是致命的。最典型的场景是，黑客可以利用跨站脚本漏洞盗取用户Cookie而得到用户在该站点的身份权限。它会造成的影响绝不仅仅是弹个框这么简单，在漏洞验证中安全测试人员倾向于弹框以证明可以执行 js 表明存在漏洞，只是因为这种行为是无害的，是 poc 而非 exp。  
## 二、常见的缺陷代码
1. 什么都没过滤，直接输出到html    
``` php
```
触发：firefox `http://localhost/test/reflection_xss/xss_simple_html.php?name=%3cscript%3Ealert(11)%3C/script%3E`  
修复：在html标签中输出（使用htmlEncode）    
2. 过滤script、alert关键字  
```  php
```
触发：firefox `http://localhost/test/reflection_xss/xss_remove_script.php?name=%3Cimg%20src=0%20onerror=prompt(1)%3E`   
修复：在html标签中输出（使用htmlEncode）   
3. 输出到js，默认只编码双引号  
``` php
	var a= '';
```
触发：firefox `http://localhost/test/reflection_xss/xss_script_singlequote.php?name=aa%27;alert(11);//`  
修复：在script标签中输出（使用javascriptEncode）  
4. 输出到 js，未做任何过滤  
``` php
	var $a= "";
```
触发：firefox `http://localhost/test/reflection_xss/xss_script_doublequote.php?name=aa%22;alert(1);//`  
场景：  
``` javascript
var  s1mba="http://ke.qq.com/cgi-bin/courseDetail?course_id=109431"+alert(903606738);
var pg_CartoonDetail = new BIU.Page({
name: 'pg_CartoonDetail',
...,
current: '123'-alert(1)-'',
...});
```
修复：在script标签中输出（使用javascriptEncode）  
5. 输出到js，`\` 转义，返回charset 是 gbk  
``` php
    var b = "";
```
触发： firefox 页面编码设置为gbk `http://localhost/test/reflection_xss/xss_script_gbk.php?var=aa%ae%22;alert(11);//`   
修复：在script标签中输出（使用javascriptEncode），但此处不要用`\` 转义的方式，可以用unicode等方式  
6. jsoncallback 接口，返回没有过滤，且content-type 为 text/html  
``` php
'b',
     'c'=>'d',
  );
  echo $q."({".json_encode($arr)."})";
  }else{
    header("location:?q=test");
}
?>
```
触发： firefox `http://localhost/test/reflection_xss/xss_in_jsoncallback.php?q=%3Cscript%3Ealert(11)%3C/script%3E`  
修复：对于传入的callback参数，使用 htmlspecialchars 编码，或者把返回content-type 定为 `application/json`，注意 `text/plain` 在某些浏览器上不可靠，同时添加X-Content-Type-Options: nosniff头    
注意：添加X-Content-Type-Options: nosniff头前，请确认站点下所有接口已设置了与内容相符的Content-type     
7. 输出到标签属性，没有过滤单引号（双引号，没有引号同理）  
``` php
]/i', '', $q);
    echo "";
   }else{
    header("location:?q=test");
}
?>
```
触发：firefox `http://localhost/test/reflection_xss/xss_in_htmlattr_singlequote.php?q=aa%27%20onmouseover=prompt(111)%20bad=%27`  
修复： 这里过滤了，但我们还是可以闭合属性引号进而重设一个属性，故需要 htmlspecialchars 编码下  
8. 输出到html 事件中，有多种过滤情形  
``` php
  '}"/>