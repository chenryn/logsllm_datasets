.br eagain .
.pp
by contrast, when used as a level-triggered interface
(the default, when
.b epollet
is not specified),
.b epoll
is simply a faster
.br poll (2),
and can be used wherever the latter is used since it shares the
same semantics.
.pp
since even with edge-triggered
.br epoll ,
multiple events can be generated upon receipt of multiple chunks of data,
the caller has the option to specify the
.b epolloneshot
flag, to tell
.b epoll
to disable the associated file descriptor after the receipt of an event with
.br epoll_wait (2).
when the
.b epolloneshot
flag is specified,
it is the caller's responsibility to rearm the file descriptor using
.br epoll_ctl (2)
with
.br epoll_ctl_mod .
.pp
if multiple threads
(or processes, if child processes have inherited the
.b epoll
file descriptor across
.br fork (2))
are blocked in
.br epoll_wait (2)
waiting on the same epoll file descriptor and a file descriptor
in the interest list that is marked for edge-triggered
.rb ( epollet )
notification becomes ready,
just one of the threads (or processes) is awoken from
.br epoll_wait (2).
this provides a useful optimization for avoiding "thundering herd" wake-ups
in some scenarios.
.\"
.ss interaction with autosleep
if the system is in
.b autosleep
mode via
.i /sys/power/autosleep
and an event happens which wakes the device from sleep, the device
driver will keep the device awake only until that event is queued.
to keep the device awake until the event has been processed,
it is necessary to use the
.br epoll_ctl (2)
.b epollwakeup
flag.
.pp
when the
.b epollwakeup
flag is set in the
.b events
field for a
.ir "struct epoll_event" ,
the system will be kept awake from the moment the event is queued,
through the
.br epoll_wait (2)
call which returns the event until the subsequent
.br epoll_wait (2)
call.
if the event should keep the system awake beyond that time,
then a separate
.i wake_lock
should be taken before the second
.br epoll_wait (2)
call.
.ss /proc interfaces
the following interfaces can be used to limit the amount of
kernel memory consumed by epoll:
.\" following was added in 2.6.28, but them removed in 2.6.29
.\" .tp
.\" .ir /proc/sys/fs/epoll/max_user_instances " (since linux 2.6.28)"
.\" this specifies an upper limit on the number of epoll instances
.\" that can be created per real user id.
.tp
.ir /proc/sys/fs/epoll/max_user_watches " (since linux 2.6.28)"
this specifies a limit on the total number of
file descriptors that a user can register across
all epoll instances on the system.
the limit is per real user id.
each registered file descriptor costs roughly 90 bytes on a 32-bit kernel,
and roughly 160 bytes on a 64-bit kernel.
currently,
.\" 2.6.29 (in 2.6.28, the default was 1/32 of lowmem)
the default value for
.i max_user_watches
is 1/25 (4%) of the available low memory,
divided by the registration cost in bytes.
.ss example for suggested usage
while the usage of
.b epoll
when employed as a level-triggered interface does have the same
semantics as
.br poll (2),
the edge-triggered usage requires more clarification to avoid stalls
in the application event loop.
in this example, listener is a
nonblocking socket on which
.br listen (2)
has been called.
the function
.i do_use_fd()
uses the new ready file descriptor until
.b eagain
is returned by either
.br read (2)
or
.br write (2).
an event-driven state machine application should, after having received
.br eagain ,
record its current state so that at the next call to
.i do_use_fd()
it will continue to
.br read (2)
or
.br write (2)
from where it stopped before.
.pp
.in +4n
.ex
#define max_events 10
struct epoll_event ev, events[max_events];
int listen_sock, conn_sock, nfds, epollfd;
/* code to set up listening socket, \(aqlisten_sock\(aq,
   (socket(), bind(), listen()) omitted. */
epollfd = epoll_create1(0);
if (epollfd == \-1) {
    perror("epoll_create1");
    exit(exit_failure);
}
ev.events = epollin;
ev.data.fd = listen_sock;
if (epoll_ctl(epollfd, epoll_ctl_add, listen_sock, &ev) == \-1) {
    perror("epoll_ctl: listen_sock");
    exit(exit_failure);
}
for (;;) {
    nfds = epoll_wait(epollfd, events, max_events, \-1);
    if (nfds == \-1) {
        perror("epoll_wait");
        exit(exit_failure);
    }
    for (n = 0; n 
.\" modified 1996-09-08 by arnt gulbrandsen 
.\" modified 1997-01-31 by eric s. raymond 
.\" modified 2001-05-17 by aeb
.\" modified 2004-06-23 by michael kerrisk 
.\"
.th unlink 2 2021-08-27 "linux" "linux programmer's manual"
.sh name
unlink, unlinkat \- delete a name and possibly the file it refers to
.sh synopsis
.nf
.b #include 
.pp
.bi "int unlink(const char *" pathname );
.pp
.br "#include            " "/* definition of " at_* " constants */"
.b #include 
.pp
.bi "int unlinkat(int " dirfd ", const char *" pathname ", int " flags );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br unlinkat ():
.nf
    since glibc 2.10:
        _posix_c_source >= 200809l
    before glibc 2.10:
        _atfile_source
.fi
.sh description
.br unlink ()
deletes a name from the filesystem.
if that name was the
last link to a file and no processes have the file open, the file is
deleted and the space it was using is made available for reuse.
.pp
if the name was the last link to a file but any processes still have
the file open, the file will remain in existence until the last file
descriptor referring to it is closed.
.pp
if the name referred to a symbolic link, the link is removed.
.pp
if the name referred to a socket, fifo, or device, the name for it is
removed but processes which have the object open may continue to use
it.
.ss unlinkat()
the
.br unlinkat ()
system call operates in exactly the same way as either
.br unlink ()
or
.br rmdir (2)
(depending on whether or not
.i flags