4.1 Experiments
We ﬁrst set out to observe over time the rate at which DNS
servers become poisoned. Previous studies [16] have dis-
cussed techniques to map large numbers of open recursives
and evaluate “incorrect” DNS answers obtained from such
hosts (whether done for malicious or commercial gain).
We used this remote monitoring technique as follows: First,
we monitored open recursive DNS servers (O-RDNS) for suc-
cessful poisoning attempts on the 500 most popular domain
names [4]. Our monitoring period overlapped the weeks be-
fore and after the announcements of the Kaminsky vulnera-
bility [23]. After analyzing the data, we were able to detect
successful poisoning attempts and at the same time create a
DNS Black List of commonly used malicious IPs used in poi-
soning. The results showed that attackers were using publicly
available DNS poisoning tools without even changing the de-
fault IP used by the tool (1.0.0.0, 123.123.123.123,
10.15.8.91, etc.). Additionally, we observed a signiﬁcant
number of malicious RRsets pointing to networks in China,
Japan and in the USA.
The timing of the DNS poisonings with the release of a
major DNS vulnerability may of course been coincidental. We
therefore estimated the percentage of O-RDNSs servers that
applied vendor-recommended patches and implemented SPR.
4.2 Successfully Poisoning O-RDNS
We used four scan engines to probe 0.9 million O-RDNS
located in 17 different AS in 10 different countries. The scan
period was selected to be close to the Black Hat 08 confer-
ence. Researcher Dan Kaminsky already had announced that
he would make public a very serious DNS vulnerability. Spec-
ulations and proof of concept code about the attack were al-
ready available in various blogs and underground web sites.
These tools were capable and the O-RDNSs were very easy
“test” targets for this attack. The probing results from the
O-RDNS servers supported our initial worries. In Figure 5,
we can clearly observe the increase in the successful poison-
ing attempts against ﬁnancial institutions (i.e., wamu.com,
bankofamerica.com) and very popular web sites (i.e.,
amazon.com, microsoft.com). Between July 30th and
August 18th, we were able to detect a signiﬁcant number of
DNS poisoning attacks against O-RDNS in various ASs. We
ﬁrst selected the 500 most popular domain names [4] and tried
to resolve them with the O-RDNS servers identiﬁed in previ-
ous work [16]. We found more than 200 unique IPs, which
were present in reply records across various zones. Several
heuristics allowed us to identify poisonous answers in such a
large set of data. For example, it is unlikely that two different
top-500 websites on the Internet share the same IP address.
Yet such a hosting arrangement is commonly used in collo-
cated phishing hosts. Hosts that collided were put onto a list
for hand veriﬁcation. Additionally, we used a voting system
to identify unusual RRsets. It is unlikely that an attacker can
poison millions of open recursives at the same time. Thus,
“unpopular” answers provided by open recursives were simi-
larly ﬂagged for hand veriﬁcation.
Using an IP to autonomous system number (ASN) map-
(a) Poison probabilities across D queries and F packets in the VU model.
(b) Poison probabilities across D queries and F packets in the Comprehen-
sive model, Eqn. 1.
(c) Poison probabilities across D queries and F packets in the Comprehensive
approximation model, Eqn. 2.
(d) Poison probabilities across D queries and F packets in the Hubert model
Figure 4. Comparison of calculated probabilities between the four models. This ﬁgure illustrates the
probability of compromise computed through different models.
In each subﬁgure, we calculate the
probability under different D (i.e. the number of equivalent queries) and F (i.e. the number of spoofed
responses) using one model. (a) shows the results from the VU model; (b) and (c) illustrates the results
the results from our model and its approximation model, respectively; (d) presents the results from the
Hubert model.
00.511.52x 106020004000600080001000000.20.40.60.81Number of spoofed responses (i.e. F)M=1073741824; VUModelNumber of equivalent queries (i.e. D)Probability of compromise (i.e. Ps)00.511.52x 106020004000600080001000000.20.40.60.81Number of spoofed responses (i.e. F)M=1073741824; ComModelNumber of equivalent queries (i.e. D)Probability of compromise (i.e. Ps)00.511.52x 106020004000600080001000000.20.40.60.81Number of spoofed responses (i.e. F)M=1073741824; ComApproxModelNumber of equivalent queries (i.e. D)Probability of compromise (i.e. Ps)00.511.52x 106020004000600080001000000.20.40.60.81Number of spoofed responses (i.e. F)M=1073741824; HubertModelNumber of equivalent queries (i.e. D)Probability of compromise (i.e. Ps)Zone
amazon.com.
bankofamerica.com.
capitalone.com.
chase.com.
microsoft.com.
icicibank.com.
wamu.com.
Successful Attempts
944
351
960
947
827
4416
11050
Poisoned Sub-zones
4
1
3
2
4
7
6
Unique Malicious IPs
11
25
18
27
13
11
24
Table 1. Poisoning evidence in seven popular zones. The ﬁrst column shows the total number of suc-
cessful poisonings found in each zone. The second column presents distinct sub-zones that were also
poisoned. The last column shows the distinct number of IPs found in poisoned resource records (RRs)
in each zone.
Figure 5. Successful poisoning attempts during the reveal of Kaminsky Class of attack Aug-2008.
ping system [39], we created a white list and black list of
IPs. Hosts associated with an organization (e.g., a bank) were
found within ARIN allocations given to the organization and
announced by the unit’s ASN. Our blacklist used the oppo-
site logic: where ASN information could not be associated
with the qname domain zone in any legitimate way (includ-
ing hand veriﬁcation).
In Table 1, we can observe the number of total poisoned
records returned from O-RDNS in the ﬁrst two weeks of Au-
gust 2008. The majority of the poisoned IPs were located in
USA, China and Japan. Figure 5 illustrates the impact of the
DNS vulnerability announcement. Prior to the announcement,
poisoning against O-RDNS was observed, but steady in rate.
In the weeks following the release of automated attack tools,
successful attempts against O-RDNS signiﬁcantly increased.
4.3 Observing the Port Randomization Patch De-
ployment
Although we could verify each suspected poisoning inci-
dent and build a blacklist of malicious IPs, we could not auto-
matically attribute the poisonings to Kaminsky-class attacks.
To gain some insights into likely causes of the poisonings, we
conducted a scan of O-RDNS for port randomization behav-
ior. Conceptually, one could just requery the hosts repeatedly
and measure the standard deviation of port numbers found in
answers. We noted the use of a more elegant technique at
OARC’s self-testing system [45]. A single query is answered
with a lengthy CNAME (and no offered glue), thereby forcing
recursives to requery. Resolution of the CNAME requires walk-
ing a lengthy delegation chain, each located at a different IP
on the multi-homed authority. Thus, using one query, one can
induce a tightly packed set follow-up queries from the recur-
sive. This yields dozens of source ports data samples for the
8/58/68/78/88/98/108/118/128/138/148/158/168/178/188/19020040060080010001200DateNumber of poisoned records  amazon.combankofamerica.comcapitalone.comchase.commicrosoft.comicicibank.comwamu.comAugust 8, 2008BlackHat talk onKaminsky Vulnerabilitycost of merely one outbound open recursive probe.
We implemented a similar technique involving multiple
domains under different TLDs. We describe this technique
in some detail, since it efﬁciently generates multiple queries
from recursives and consumes a minimum number of author-
ity IPs. Using just three domains, (say, experiment.biz,
experiment.org and experiment.info), a series of
CNAMEs forces a query to a different sibling zone. Since we
set the TTLs of all records to zero, the recursive is forced to
revisit each sibling host. Thus, the initial query for any label
under in.experiment.org would result in the following
CNAME storm:
*.in.experiment.org → a.experiment.biz →
a.experiment.info → a.b.experiment.biz →
a.b.experiment.biz → a.b.
experiment.info → ... ... →
a.b.c.d.e.experiment.biz →
a.b.c.d.e.experiment.info : IN A 10.0.0.1
This round-robin sibling delegation continues, forcing the
recursive to requery at each cut, only to be directed to another
sibling. There are limits to how far DNS servers will follow
CNAME chains, but the zero TTL allows one to repeat this pro-
cess and generate large numbers of port number samples for
a host. A single multi-homed host acts as the authority for
all three zones (and all their child zones), so that statistical
studies of port randomization are easily obtained from a sin-
gle capture ﬁle. This approach also avoids the need to create
customized resolvers to suppress glue (e.g., which could po-
tentially short-circuit recursive delegation walking under the
OARC approach.) Thus, we could use robust authority imple-
mentations (e.g., a set of optimized BIND installations) to test
numerous open recursives simultaneously.
With a high-speed measurement platform in place, we
tracked queries from unique O-RDNS by appending a
random 9-character label under the top-most CNAME (or
{RN D}.in.experiment.org). A simple wild-card
conﬁguration for the ﬁrst zone (*.in.experiment.org)
ensures that any query that reaches that zone will be pointed
to the next domain name using a CNAME (in this case the:
a.experiment.biz). This continues until the O-RDNS
reaches the a.b.c.d.e.experiment.info, where our
authoritative name server will respond back to the O-RDNS
with a terminating leaf A record.
After querying 0.9 million active O-RDNS servers we ob-
served that approximately 57% of the O-RNDs always reply
with the same port. A smaller percentage 2% of the O-RDNS
used a round robin port switching approach. For the rest of
the O-RDNS, 41%, we were not able to ﬁnd any patterns in
their source port selection. A non-zero standard deviation of
port numbers suggested the use of random ports within a range
(e.g., above port 1024). We therefore assumed such hosts were
properly patched for SPR.
Our analysis intentionally stopped short of several other in-
quiries. For example, we did not attempt to measure the im-
portance of the open recursives, or count the users behind the
open recursive. This would have allowed us to categorize the
risk posed by each poisoned O-RDNS.
This and related inquires were left for future work or other
researchers. Our focus was on demonstrating that (a) many
DNS servers are still not patched; and (b) many DNS servers
are being poisoned, as shown in previous works [16], us-
ing what appear to be new DNS vulnerabilities. These two
observations (and the large number of O-RDNS servers at
risk) point to the need for interim security improvements.
While DNSSEC, DNSCurve, and other proposals may eventu-
ally provide cryptographic solutions to poisonings, we docu-
mented ample evidence of ongoing attacks to the current DNS
infrastructure.
4.4 Survey of DNS Architectures
Given the need for interim DNS security improvements, we
evaluated how different DNS vendors architected their recur-
sive resolvers and looked for opportunities to measure (using
our model) how selective patching can improve security. A
comprehensive survey of all DNS tools is difﬁcult, since many
are closed-source and even the open source implementations
are complex.
In the course of our survey, we also noted that some DNS
servers had adopted more aggressive security solutions, but
could still beneﬁt from using interim defenses. For exam-
ple, djbdns’s dnscache implements efﬁcient source port ran-
domization, but does not implement birthday protection, dis-
cussed in [24]. The architect of dnscache has observed that,
ultimately, DNS resolution based on 16-bit qid randomiza-
tion can be poisoned if attackers send enough spoofed pack-
ets [12]. With the recent proposal of DNSCurve, we expect
that dnscache may soon have an even stronger defense, po-
tentially ending all DNS poisoning risks. We similarly expect
DNSSEC, if fully deployed, would also remove forgery from
the attacker’s arsenal.
We agree with this perspective, but observe the need
for short-term protections. We submit that there remains
an immediate need to understand interim security improve-
ments. DNS resolvers need birthday protection, DNS-0x20
options, good port randomization, and improved bailiwick
handling logic. Our analysis above observed numerous poi-
soning attacks, and a large population is still at risk for trivial
Kaminsky-class attacks. This evidence suggests that the path
to cryptographically secure resolution must include these in-
terim defenses.
We therefore worked with the djbdns developer commu-
nity to engineer a patch for dnscache2 to provide birth-
2The patch was developed by Jeff King, a PhD student at Georgia Tech
and frequent contributor to the djbdns developer community.
Figure 6. (a) Time-to-poison dnscache without birthday protection.
architectural choices, and improvements in security.
(b) Comparison of various DNS
day protections and made the patch freely available. The
patch generally checks the buffer of outstanding queries for
any matching instance (based on qname, type, class,
bailiwick) and “piggybacks” new requests on any old out-
standing requests. This removes the birthday window. We
have tested the patch in two university networks for several
months and found it worked effectively to reduce the risk of
attack.
Figure 6(a) shows the improvements realized by applying
our patch. Without birthday protection, Figure 6(a) shows it
would be possible (under some conﬁgurations of dnscache)
to poison the resolver in hours or minutes. For example, an
attacker sending a large volley of packets (15K q/s) has a
90% chance of success of poisoning a dnscache server con-
ﬁgured to allow tens of thousands of simultaneous queries.
The attack could completed in minutes. In its default state,
dnscache ships with a fairly small birthday window—the
parameter MAXUDP in dnscache.c is deﬁned at 200. The
dnscache user community, however, sometimes advocates the
use of larger values of MAXUDP to accommodate more si-
multaneous queries. Such conﬁgurations consequently have
a larger birthday window and a signiﬁcantly higher risk, as
illustrated by our model.
To validate the model, we conﬁgured a local network run-
ning instances of stock dnscache 1.05, and altered only
the MAXUDP variable. We then queried over 5000 times for
the authority records for a toy domain, SOA? abcdefghi-
jkl.mn. The large volley of initial queries was needed to
ensure that no other queries occupied any available slot in the
queue. We then spoofed 100 answers, providing 6.6.6.6 as
the malicious IPs for NS1 and NS2. This was repeated until
success.
Figure 7. Successful poisoning attacks on
dnscache 1.05. Each plot indicates the num-
ber of packets required to poison a dnscache
instance with a given MAXUDP setting.
020000400006000080000Time (s)1x10-111x10-101x10-91x10-81x10-71x10-60.000010.00010.0010.010.11Poisoning ProbabilitySports=1, 0x20=0, TTL=0Sports=1, 0x20=0, TTL=3600Sports=1, 0x20=12, TTL=0Sports=1, 0x20=12, TTL=3600Sports=64000, 0x20=0, TTL=0Sports=64000, 0x20=0, TTL=3600Sports=64000, 0x20=12, TTL=0Sports=64000, 0x20=12, TTL=3600For all equations: N=2.5, I=65536, W=100msunpatchedSPRSource Port Randomization (SPR)and 0x200x20KaminskyAttack 10000 100000 1e+06 1e+07 1e+08 1e+092003845127681024 10000 100000 1e+06 1e+07 1e+08 1e+09Number of Attack PacketsNeeded to Poison dnscache-1.05MAXUDP SettingExperimental dnscache-1.05 Poisoning AttackPackets to Successfully PoisonAverage Packet CountWe chose to query for authority records because
dnscache speciﬁcally does not cache SOA records (as noted
in its documentation [11]). This ensured that the test could be
restarted quickly and efﬁciently after a successful poisoning.
A parallel monitoring of the dnscache log ﬁle would observe
acceptance of the malicious answer, and terminate the prop-
agation of additional malicious answers from the attacking
host. Because of latency, both in logging and in the poisoning
client’s kill switch, we may have overcounted the number of
packets needed to successfully poison by approximately 1%.
(This overcounting provides a more conservative estimate of
dnscache’s performance.)
We repeated the process to obtain 16 successful poisonings
for various MAXUDP settings. When MAXUDP was set to 512,
we were able to poison a stock dnscache instance (with-
out a birthday protection patch) in an average of 18,871,764
packets. Note that our attack alternated between spooﬁng the
two authority IP addresses for the toy domain. It’s common
for authority servers to have two addresses. This doubled the
number of attack packets we had to send in our model. (How-
ever, for domains served by a single authority IP, the number
of malicious packets one must send is half what we report in
our experiment.)
When MAXUDP was set to 1024 (also a common conﬁgura-
tion parameter) we were able to poison dnscache in an average
of 5,874,332 packets. Figure 7 shows a plot of the experi-
mental outcomes, and the distribution of packet counts needed
to successfully poison dnscache. When MAXUDP was set to
2048, we found that dnscache would use signiﬁcant amounts
of CPU time, resulting dropped packets. At approximately
10KPPS, about half the trafﬁc was dropped. This is because
dnscache uses list structures to manage open queries, and per-
forms an O(3N) sweep with each response. (By default, the
program sets MAXUDP to 200, so a list is an appropriate data
structure for small query volumes.)
At ﬁrst, there is nothing surprising about these results. The
outcome merely validates what Dan Bernstein has long said
about DNS attacks: given enough packets, any DNS server is
vulnerable. (Indeed, the difﬁculty in securing 16-bit resolution
systems is what motivated the development of DNSCurve).
The importance for our work, however, is that these data points
match the curve provided by our model.
Our model allows us to evaluate the trade-offs in how one
might improve existing DNS architectures, pending a long-
term cryptographic solution, as shown in Figure 6(b). With a
default MAXUDP of 200 (that is, a birthday collision window of
200), dnscache has some reduced forgery resistance; how-
ever, the use of source port randomization (ﬁrst innovated in
dnscache) signiﬁcantly improves security.
Cryptographic DNS resolution would provide a complete
solution. But the history of DNSSEC suggests this process
will continue to be slow. In the interim, our model allows one
to weigh short-term options for improving security.
5 Related Work
Our work ﬁts into the larger body of literature concerned
with DNS poisoning. DNSSEC has been proposed as secu-
rity extensions of DNS [6–8]. DNSSEC provides origin au-
thentication, data integrity, and validated denial of existence.
DNSSEC does not provide conﬁdentiality of data, since the
contents of zones can be enumerated. To address this problem