%rcache 在 buffer cache 中进行逻辑读的百分比（即 100% bread/lreads)
bwrit/s平均每秒从系统buffer向磁盘（或其它块设备）所写的物理块数
lwrit/s平均每秒写到系统buffer的逻辑块数
%wcache 在buffer cache 中进行逻辑写的百分比（即100%-bwrit/lwrit）
pread/sgu平均每秒请求进行物理读的次数
pwrit/s平均每秒请求进行物理写的次数
*所显示的内容反映了目前与系统buffer有关的读，写活。在所报告的数字中，最重要的是rcache
和l%wcache（统称为cache命中率）两列，它们具体体现着系统buffer的效率。衡量cache效率的标准
是它的命中率值的大小。
*如果%rcache 的值小于90或者%wcache的值低于65，可能就需要增加系统buffer的数量。如果
在系统的应用中，系统的I/0活动十分频繁，并且在内存容量配置比较大时，可以增加buffercache，
使%rcache 达到 95 左右，%wcache 达到 80 左右。
*系统buffer cache中，buffer的数量由核心参数NBUF控制。它是一个要调的参数。系统中buffer
数量的多少是影响系统I/0效率的瓶颈。要增加系统buffer数量，则要求应该有较大的内存配置。否
则一味增加buffer数量，势必减少用户进程在内存中的运行空间，这同样会导致系统效率下降
e报告系统调用使用情况
sar c 2 3
SCO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/07/2002
17:02:42 scall/s sread/s swrit/s fork/s exec/s rchar/s wchar/s (c)
17:02:44 2262 169 141 0. 00 0. 00 131250 22159
17:02:46 1416 61 38 0. 00 0. 00 437279 6464
17:02:48 1825 43 25 0. 00 0. 00 109397 42331
Average 1834 91 68 0. 00 0. 00 225975 23651
sca11/s每秒使用系统调用的总数。一般地，当46个用户在系统上工作时，每秒大约30个左右。
---
## Page 94
sread/s每秒进行读操作的系统调用数量。
swrit/s每秒进行写操作的系统调用数量。
exec/s每秒exec系统调用次数。
rchar/s每秒由读操作的系统调用传送的字符（以字节为单位）。
wchar/s每秒由写操作的系统调用传送的字符（以字节为单位）。
*如果scal1/s持续地大于300，则表明正在系统中运行的可能是效率很低的应用程序。在比较典
型的情况下，进行读操作的系统调用加上进行写操作的系统调用之和，约是scal1的一半左右。
-d报告硬盘使用情况
sar d 2 3
SCO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/07/2002
17:27:49 device %busy avque r+w/s blks/s avwait avserv (d)
17:27:51 ida0 6. 93 1. 00 13. 86 259. 41 0. 00 5. 00
ida1 0. 99 1. 00 17. 33 290. 10 0. 00 0. 57
17:27:53 ida0 75. 50 1. 00 54. 00 157. 00 0. 00 13. 98
ida1 9. 50 1. 00 12. 00 75. 00 0. 00 7. 92
17:27:55 ida0 7. 46 1. 00 46. 77 213. 93 0. 00 1. 60
ida1 17. 41 1. 00 57. 71 494. 53 0. 00 3. 02
Average ida0 29. 85 1. 00 38. 14 210. 28 0. 00 7. 83
ida1 9. 29 1. 00 29. 02 286. 90 0. 00 3. 20
device这是sar命令正在监视的块设备的名字。
%busy设备忙时，运行传送请求所占用的时间。这个值以百分比表示。
avque在指定的时间周期内，没有完成的请求数量的平均值。仅在队列被占满时取这个值。
r+w/s每秒传送到设备或者从设备传送出的数据量。
blks/s每秒传送的块数。每块512个字节。
avwait传送请求等待队列空闲的平均时间（以毫秒为单位）。仅在队列被占满时取这个值。
avserv 完成传送请求所需平均时间（以毫秒为单位）
*ida-0和ida-1是硬盘的设备名字。在显示的内容中，如果%busy的值比较小，说明用于处理传
送请求的有效时间太少，文件系统的效率不高。要使文件系统的效率得到优化，应使%busy的数值相对
高一些，而avque的值应该低一些。
rg报告有关串口1/0情况
sar -g 3 3
SCO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/13/2002
11:10:09 ovsiohw/s ovsiodma/s ovc1ist/s (g)
11: 10: 12 0. 00 0. 00 0. 00
11:10:15 0. 00 0. 00 0. 00
11: 10: 18 0. 00 0. 00 0. 00
Average 0. 00 0. 00 0. 00
---
## Page 95
ovsiohw/s每秒在串口I/0硬件出现的溢出。
ovsiodma/s每秒在串口I/0的直接输入，输出信道高速缓存出现的溢出。
ovclist/s每秒字符队列出现的溢出。
m报告进程间的通信活动（IPC消息和信号灯活动）情况
sar m 4 3
SCO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/13/2002
13:24:28 msg/s sema/s (m)
13:24:32 2. 24 9. 95
13:24:36 2. 24 21. 70
13:24:40 2. 00 36. 66
Average 2. 16 22. 76
msg/s每秒消息操作的次数（包括发送消息的接收信息）。
sema/s每秒信号灯操作次数。
*信号灯和消息作为进程间通信的工具，如果在系统中运行的应用过程中没有使用它们，那么由
sar 命令报告的msg 和 sema 的值都将等于0.00.如果使用了这些工具，并且其中或者msg/s大于100，
或者sema/s大于100，则表明这样的应用程序效率比较低。原因是在这样的应用程序中，大量的时间
花费在进程之间的沟通上，而对保证进程本身有效的运行时间必然产生不良的影响。
n报告命名缓冲区活动情况
sar -n 4 3
SCO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/13/2002
13:37:31 c_hits cmisses (hit %) (n)
13:37:35 1246 71 (94%)
13:37:39 1853 81 (95%)
13:37:43 969 56 (94%)
Average 1356 69 (95%)
c_hits cache 命中的数量。
cmisses cache 未命中的数量。
（hit%）命中数量/（命中数理+未命中数量）。
*不难理解，（hit%）值越大越好，如果它低于90%，则应该调整相应的核心参数。
P报告分页活动
sar -p 5 3
SC0_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/13/2002
13:45:26 vflt/s pflt/s pgfi1/s rc1m/s (p)
13: 45:31 36. 25 50. 20 0. 00 0. 00
13:45:36 32. 14 58. 48 0. 00 0. 00
---
## Page 96
13:45:41 79. 80 58. 40 0. 00 0. 00
Average 49. 37 55. 69 0. 00 0. 00
vflt/s每秒进行页面故障地址转换的数量（由于有效的页面当前不在内存中），
pflt/s每秒来自由于保护错误出现的页面故障数量（由于对页面的非法存，取引起的页面故障）。
pgfil/s每秒通过”页一入”满足vflt/s的数量。
rclm/s每秒由系统恢复的有效页面的数量。有效页面被增加到自由页面队列上。
*如果vflt/s的值高于100，可能预示着对于页面系统来说，应用程序的效率不高，也可能分页
参数需要调整，或者内存配置不太合适。
q报告进程队列（运行队列和交换队列的平均长度）情况
sar -q 2 3
SCO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/13/2002
14:25:50 runqsz %runocc swpqsz %swpocc (q)
14:25:52 4. 0 50
14:25:54 9. 0 100
14 : 25:56 9. 0 100
Average 7. 3 100
runq-sz 准备运行的进程运行队列。
%runocc运行队列被占用的时间（百分比）
swPq-sz 要被换出的进程交换队列。
%swpocc交换队列被占用的时间（百分比）。
*如果%runocc大于90，并且runq-sz的值大于2，则表明CPU 的负载较重。其直接后果，可能使
系统的响应速度降低。如果%swpocc大于20，表明交换活动频繁，将严重导致系统效率下降。解决的办
法是加大内存或减少缓存区数量，从而减少交换及页一入，页一出活动。
r报告内存及交换区使用情况（没有使用的内存页面和硬盘块）
sar r 2 3
SOO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/14/2002
10:14:19 freemem freeswp availrmem availsmem (r)
10:14:22 279729 6673824 93160 1106876
10: 14:24 279663 6673824 93160 1106876
10:14:26 279661 6673824 93160 1106873
Average 279684 6673824 93160 1106875
freemem用户进程可以使用的内存页面数，4KB为一个页面。
freeswp用于进程交换可以使用的硬盘盘块，512B为一个盘块。
u CPU利用率
sar -u 2 3
---
## Page 97
SCO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/14/2002
10:27:23 %usr %sys %wio %idle (u)
10:27:25 2 3 8 88
10:27:27 3 3 5 89
10:27:29 0 0 0 100
Average 2 2 4 92
%usrcpu处在用户模式下时间（百分比）
%syscpu处在系统模式下时间（百分比）
%riocpu等待输入，输出完成（时间百分比）
%idle cpu空闲时间（百分比）
*在显示的内容中，%usr和%sys这两个值一般情况下对系统无特别影响，%wio的值不能太高，
如果%wio的值过高，则CPU花在等待输入，输出上的时间太多，这意味着硬盘存在I/0瓶颈。如果%idle
的值比较高，但系统响应并不快，那么这有可能是CPU花时间等待分配内存引起的。%idle的值可以较
深入帮助人们了解系统的性能，在这种情况上，%idle的值处于40~100之间，一旦它持续低于30，则
表明进程竞争的主要资源不是内存而是CPU。
*在有大量用户运行的系统中，为了减少CPU的压力，应该使用智能多串卡，而不是非智能多串卡。
智能多串卡可以承担CPU的某些负担。
★此外，如果系统中有大型的作业运行，应该把它们合理调度，错开高峰，当系统相对空闲时再运
行。
-v报告系统表的内容（进程，i节点，文件和锁表状态）
sar v 2 3
SCO_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/14/2002
10:56:46 procsz ov inodsz ov filesz ov locksz (v)
10:56:48 449/ 500 0 994/4147 0 1313/2048 0 5/ 128
10:56:50 450/ 500 0 994/4147 0 1314/2048 0 5/ 128
10:56:52 450/ 500 0 994/4147 0 1314/2048 0 5/ 128
proc-sz目前在核心中正在使用或分配的进程表的表项数
inod-sz目前在核心中正在使用或分配的i节点表的表项数
file-Sz目前在核心中正在使用或分配的文件表的表项数
ov溢出出现的次数
lock-sz目前在核心中正在使用或分配的记录加锁的表项数
★除ov外，均涉及到unix的核心参数，它们分别受核心参数NPROC,NIMODE,NFILE和FLOCKREC
的控制。
★显示格式为：
实际使用表项/整个表可以使用的表项数
比如，proc-sz一列所显示的四个数字中，分母的100是系统中整个进程表的长度（可建立100个
表项），分子上的24，26和25分别是采样的那一段时间所使用的进程表项。inod-sz，file-sz和1ock-sz
三列数字的意义也相同。
三列ov的值分别对应进程表，i节点表和文件表，表明目前这三个表都没有出现溢出现象，当出
现溢出时，需要调整相应的核心参数，将对应表加大。
---
## Page 98
-系统交换活动
sar w 2 3
SC0_SV scosvr 3. 2v5. 0. 5 PentII (D) ISA 06/14/2002
11:22:05 swpin/s bswin/s swpot/s bswots pswch/s (w)
11:22:07 0. 00 0. 0 0. 00 0. 0 330
11:22:09 0. 00 0. 0 0. 00 0. 0 892
11:22:11 0. 00 0. 0 0. 00 0. 0 1053
Average 0. 00 0. 0 0. 00 0. 0 757
swpin/s每秒从硬盘交换区传送进入内存的次数。
bswin/s每秒为换入而传送的块数。
swpot/s每秒从内存传送到硬盘交换区的次数。
bswots每秒为换出而传送的块数。
pswch/s每秒进程交换的数量。
★swpin/s，bswin/s，swpot/s和bswots描述的是与硬盘交换区相关的交换活动。交换关系到系
统的效率。交换区在硬盘上对硬盘的读，写操作比内存读，写慢得多，因此，为了提高系统效率就应该
设法减少交换。通常的作法就是加大内存，使交换区中进行的交换活动为零，或接近为零。如果swpot/s
的值大于1，预示可能需要增加内存或减少缓冲区（减少缓冲区能够释放一部分自由内存空间）
8、proc文件系统
proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为
访问系统内核数据的操作提供接口。用户和应用程序可以通过proc得到系统的信息，并可以改变内核
的某些参数。
这里将介绍如何从/proc文件系统中获取与防火墙相关的一些性能参数，以及如何通过/proc文件系统
修改内核的相关配置。
1、从/proc文件系统获取相关的性能参数
cpu使用率：/proc/stat
内存使用情况：/proc/meminfo
网络负载信息：/proc/net/dev
相应的计算方法：（摘自：什么是proc文件系统）
处理器使用率
(2）
内存使用率
(3)
流入流出数据包
( 4)
整体网络负载
这些数据分别要从/proc/stat、/proc/net/dev、/proc/meminfo三个文件中提取。如里有间题或对要
提取的数据不太清楚，可以使用manproc来查看proc文件系统的联机手册。
(1)
处理器使用率
这里要从/proc/stat中提取四个数据：用户模式（user）、低优先级的用户模式（nice）、内核模式（system）
以及空闲的处理器时间（idle）。它们均位于/proc/stat文件的第一行。CPU的利用率使用如下公式来
计算。
CPU利用率=100*（user+nice+system）/（user+nice+system
idle)
---
## Page 99
(2)
内存使用率
这里需要从/proc/meminfo文件中提取两个数据，当前内存的使用量（cmem)以及内存总量（amem)。
内存使用百分比
=100*（cmem/umem)
（3）网络利用率
为了得到网络利用率的相关数据，需要从/proc/net/dev文件中获得两个数据：从本机输出的数据包数，
流入本机的数据包数。它们都位于这个文件的第四行。
性能收集程序开始记录下这两个数据的初始值，以后每次获得这个值后均减去这个初始值即为从集群启
动开始从本节点通过的数据包。
利用上述数据计算出网络的平均负载，方法如下：
平均网络负载=（输出的数据包+流入的数据包）
/2
2.通过/proc文件系统调整相关的内核配置
允许 ip 转发/proc/sys/net/ipv4/ip_forward
泰比 ping/proc/sys/net/ipv4/icmp_echo_ignore_a11
可以在命令行下直接往上述两个“文件”里头写入"1"来实现相关配置，如果写入“0”将取消相关配置。
不过在系统重启以后，这些配置将恢复默认设置，所以，如果想让这些修改生效，可以把下面的配置直
接写入/etc/profile文件，或者其他随系统启动而执行的程序文件中。
1. echo 1 > /proc/sys/net/ipv4/ip_forward
2. echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_a11
如果需要获取其他的性能参数，或者需要对内核进行更多的配置，可以参考proc文件系统介绍，也可
以直接通过nan proc查看相关的信息。
十二、系统服务
1、系统服务分类，根据其使用的方法来分，可以被分为三类
a、由init控制的服务：基本都是系统级别的服务，运行级别这一章讲的就是这一类的服务
b、由SystemV启动脚本启动的服务：和我们打交道最多的一种服务，服务器基本都是这个类型的服务
c、由 xinetd 管理的服务
2、SystemV启动脚本启动的服务
/etc/rc.d/init.d/目录下的内容如下：这些常用的服务器都是Systemv的服务，要控制System
V的服务，我们可以使用以下命令
#/etc/rc. d/init. d/script (start |stop| restart |reload | condrestart | status)
stop：停止这个服务。
restart：先停止，再启动，也就是重新启动的意思。
reload：重新加载设定档，这个参数只有在服务已经启动的状况下才能使用，
condrestart：有条件的重新启动，这个服务必须是已经启动的，才会被重新启
动：如果这个服务尚未启动，则无须启动之。
status：察看目前服务的启动状态。
也可以使用 service命令来执行脚本，例如#service network
{start | stop restart |reload condrestart| status)
---
## Page 100
[rootetest init.d]# 1s
ecpid
dnsnasq
dc_server
iscsi
netconsole