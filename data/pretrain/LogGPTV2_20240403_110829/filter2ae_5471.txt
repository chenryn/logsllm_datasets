**作者：启明星辰ADLab  
原文链接：**
4月13日，国外安全研究人员在社交媒体上发布了Chrome 的0Day
漏洞[1]，漏洞编号为CVE-2021-21220，并在github上公开了该漏洞的POC以及利用代码，相关的利用代码在关闭沙盒的情况下可达到远程代码执行。由于chromium
相关框架的广泛应用，该漏洞在其他浏览器或脚本引擎中仍有存在的可能。该漏洞在chrome
90.0.4430.72版本已经修复，提醒广大用户及时更新到最新版本[2]，以规避该漏洞存在的攻击风险。
启明星辰ADLab分析发现，该漏洞存在于Chrome 的JavaScript 解析引擎V8中，POC主要代码如下：
![
](https://images.seebug.org/content/images/2021/04/a108fbb9-f766-4eb8-90f0-62bb880bedc4.png-w331s)
在POC line4执行异或操作,(2**31)^0=-2147483648。根据ECMA标准[3]，异或的结果是32位整数：
![
](https://images.seebug.org/content/images/2021/04/8dfae6b1-7cb6-46ce-9e06-9308d7c4c4a5.png-w331s)
在v8 SimplifiedLowering阶段，增加了对异或的结果执行ChangeInt32ToInt64的操作：
![
](https://images.seebug.org/content/images/2021/04/a13a7f00-5636-401e-b51e-805bfc735ddd.png-w331s)
SimplifiedLowering 执行后，异或的类型被标记为Word32:
![
](https://images.seebug.org/content/images/2021/04/11013a24-a057-47c7-99fe-2b62b524a05b.png-w331s)
在MachineOperatorOptimizer阶段，由于是和0做异或，所以用左操作数代替异或操作。
![
](https://images.seebug.org/content/images/2021/04/b117f056-7f1c-45a0-80d3-4454193da0cb.png-w331s)
此时的结构图如下，可以看出异或的结果是Word32|TypeUint32:
![
](https://images.seebug.org/content/images/2021/04/ade016a2-b8a0-4c9c-b2d7-3d97bc8808ea.png-w331s)
在指令选择时，对于VisitChangeInt32ToInt64操作，根据其输入类型选择操作码：
![
](https://images.seebug.org/content/images/2021/04/89405509-0bd2-40d2-9e0a-226c2303c1ca.png-w331s)
所以，这里的操作码是kX64Movl操作码，该指令在将源操作数移至目的位置时并不做符号扩展，这样在POC
line4中x的值为2147483649，于是在poc line12的位置，编译器其实使用的是x=1的值作为创建数组的长度。这是编译器未曾预料到的情况。
在变量的范围分析中，编译器认为创建的数组长度是0:
![
](https://images.seebug.org/content/images/2021/04/22d256df-6c5c-495c-baa2-96c0fb20144a.png-w331s)
在执行POP时，会先判断数组的长度是否为0，如果不是就会将其长度减1：
![
](https://images.seebug.org/content/images/2021/04/e89d66bf-697a-4527-8428-e6cbd8992ae4.png-w331s)
由于数组长度固定，编译器在LoadElimination
的过程中会进行常量折叠，在代码路径走到这里的时候通过StoreField操作将数组的长度直接赋值为-1：
![
](https://images.seebug.org/content/images/2021/04/4bba0f55-8e0d-4b4b-8460-a0301aea482c.png-w331s)
![
](https://images.seebug.org/content/images/2021/04/20e02d63-2d99-4971-8c8d-6063e87e765d.png-w331s)
由于是smi，所以是0xfffffffe：
![
](https://images.seebug.org/content/images/2021/04/a53129a6-d290-46ea-9c1f-6023aeec9809.png-w331s)
打印数组长度：
![
](https://images.seebug.org/content/images/2021/04/fcfe5fed-f825-42e5-8d5e-4ffb49f0771e.png-w331s)
这时超长的数组就出炉了，任由你玩了。从补丁对比上来看[4]，对于ChangeInt32ToInt64将其输入作为有符号对待，这样就避免了该漏洞通过该路径触发。
![
](https://images.seebug.org/content/images/2021/04/af43a156-5102-4bbd-a6e8-65c9a83a66de.png-w331s)
关于利用的部分，基本是老套路，不再赘述。
参考链接：  
[1]   
[2]   
[3]   
[4] 
* * *