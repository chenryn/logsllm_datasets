3.1. ProVerif
The automatic veriﬁer ProVerif [2, 11, 12, 14] is de-
signed to verify security protocols. The protocol is speci-
ﬁed in an extension of the pi calculus with cryptography, a
dialect of the applied pi calculus [3]. The desired security
properties can be speciﬁed, in particular, as correspondence
assertions [41], which are properties of the form “if some
event has been executed, then other events have been exe-
cuted”. (We illustrate this input language below.) Internally,
the protocol is translated into a set of Horn clauses, and the
security properties are translated into derivability queries
on these clauses:
the properties are proved when certain
facts are not derivable from the clauses. ProVerif uses a
resolution-based algorithm to show this non-derivability.
ProVerif relies on the formal, so-called Dolev-Yao model
of protocols [24], in which messages are modeled as terms
in an algebra. This rather abstract model of cryptography
makes it easier to automate proofs than the more concrete,
computational model, in which messages are modeled as
bitstrings. Consequently, ProVerif can handle a wide vari-
ety of cryptographic primitives speciﬁed by rewrite rules or
equations over terms. Moreover:
• When ProVerif proves a property, the proof is valid for
an unbounded number of sessions of the protocol and
an unbounded message size.
• When the proof fails, ProVerif provides a derivation
of a fact from the clauses. It also tries to reconstruct,
from this derivation, a trace of the protocol that shows
that the property is false [5]. When trace reconstruc-
tion fails, ProVerif gives no deﬁnite answer. Such a
situation is unavoidable due to the undecidability of
the problem. In our study, whenever this situation hap-
pened, manual inspection of the derivation provided by
ProVerif allowed us to reconstruct an attack against the
said property: the failure of the ProVerif proof always
corresponded to an attack.
We now present a model of Plutus in ProVerif; its secu-
rity properties are speciﬁed and studied in Section 4.
3.2.1. Cryptographic primitives, lists, and integers
We abstract cryptographic primitives with function sym-
bols, and specify their properties with rewrite rules and
equations over terms. The term enc(M, K) denotes the re-
sult of encrypting message M with symmetric key K; and
the rewrite rule
dec(enc(x, y), y) → x
models the fact that any term of the form enc(M, K) can
be decrypted with K to obtain M. (Here x and y are vari-
ables that can match any M and K.) The term hash(M)
denotes the hash of message M. The term exp(M, (R, N))
denotes the result of computing M R mod N. We abstract
random RSA seeds as fresh names. The term N(s) denotes
the modulus of seed s. The term e(s, K) denotes the unique
exponent determined by the modulus N(s) and base K by
the algorithm described in Section 2; this fact is modeled by
the rewrite rule:
genExp(N(x), y) → e(x, y)
The term d(s, K) is the inverse exponent, as explained in
Section 2. This fact is modeled by the equations:
exp(exp(z, (d(x, y), N(x))), (e(x, y), N(x))) = z
exp(exp(z, (e(x, y), N(x))), (d(x, y), N(x))) = z
Finally, the rewrite rule
crack(e(x, y), d(x, y), N(x)) → x
models the fact that a modulus N(s) can be efﬁciently “fac-
tored” to obtain the RSA seed s if both exponents e(s, K)
and d(s, K) are known [17].
We model sets of allowed writers and readers with lists:
nil is the empty list, and cons(M, L) is the extension of the
list L with M; we have member(N, L) if and only if N is a
member of the list L. Likewise, we model version numbers
with integers: zero is 0, and the integer succ(M) is the suc-
cessor of the integer M; we have geq(N, M) if and only if
the integer N is greater than or equal to the integer M. The
following clauses deﬁne the predicates member and geq in
ProVerif.
member(x , cons(x , y));
member(x , y) ⇒ member(x , cons(z , y)).
We refer the reader to [14] for detailed information on
ProVerif and the theory behind it.
geq(x , x);
geq(x , y) ⇒ geq(succ(x), y).
For elegance of notations, we sometimes write 0, 1, . . . for
zero, succ(zero), . . . ; M ≥ N for geq(M, N); and M ∈ L
for member(M, L).
3.2.2. The protocol
We model principals as applied pi-calculus processes with
events [14]. Informally:
• out(u, M); P sends the message M on a channel
named u and continues as the process P ; a special case
is the process out(u, M), where there is no continua-
tion.
• in(u, X); P receives a message M on a channel
named u, matches M with the pattern X, and con-
tinues as the process P with variables in X bound to
matching terms in M. Here X may be a variable x,
which matches any message and stores it in x; a pat-
tern =N, which matches only the message N; or even
a more complex pattern like (=N, x), which matches
any pair whose ﬁrst component is N and stores its sec-
ond component in x.
• new m; P creates a fresh name m and continues as
the process P .
• event e(M1, . . . , Mn); P executes the event e(M1,
. . . , Mn) and continues as the process P . A spe-
cial case is the process event e(M1, . . . , Mn), where
there is no continuation. The execution of e(M1, . . . ,
Mn) merely records that a certain program point has
been reached for certain values of M1, . . . , Mn. Such
events are used for specifying security properties, as
explained in Section 4.1.
• if M = M0 then P else Q executes P if M evaluates
to the same term as M0; otherwise it executes Q. A
special case is the process if M = M0 then P , where
there is no else continuation.
• let X = M in P evaluates M, matches it with the
pattern X and, when the matching succeeds, continues
as P with the variables in X bound to matching terms
in the value of M.
• P | Q runs the processes P and Q in parallel.
• !P runs an unbounded number of copies of the process
P in parallel.
In Figures 1, 2, and 3, we deﬁne processes that model the
roles of owners, writers, and readers; the protocol is spec-
iﬁed as the parallel composition of these processes. (The
storage server is assumed to be untrusted at this point, and
therefore not modeled. We study server-veriﬁed writes and
their properties later.) The network is modeled by a public
channel net; as usual, we assume that the adversary con-
trols the network. Likewise, the ﬁle system is modeled by
a public channel fs. On the other hand, private (secure)
channels are not available to the adversary. For instance,
rprivchannel(r) and wprivchannel(w) are private channels
on which an owner sends keys to reader r and writer w, re-
spectively. We limit the number of revocations that are pos-
sible in any group to maxrev. (Thus the number of versions
is bounded. At this level of detail, ProVerif does not termi-
nate with an unbounded number of versions. We managed
to obtain termination with an unbounded number of ver-
sions for a more abstract treatment of cryptography, thanks
to an extension of ProVerif that takes advantage of the tran-
sitivity of geq in order to simplify the Horn clauses. How-
ever, we do not present that abstract model here because
it misses some of the attacks that are found with the more
detailed model below.)
First, Figure 1 shows the code for owners. An owner cre-
ates its private/public key pair (lines 2–5), and then creates
groups on request (lines 7–9). For each group, the owner
maintains some state on a private channel currentstate.
(The current state is carried as a message on this chan-
nel, and the owner reads and writes the state by receiving
and sending messages on this channel.) The state includes
the current version number, the lists of allowed readers and
writers, the lockbox key, and the sign key for that group.
The owner creates the initial version of keys for the group
(lines 12–14), generates at most maxrev subsequent ver-
sions on request (lines 17–21), and distributes those keys
to the allowed readers and writers on request (lines 25–30
and 34–40). The generation and distribution of keys fol-
low the outline in Section 2. Moreover, the owner signs
the modulus of each version with its private key (line 38),
sends the signed modulus to writers of that version (line 40),
and sends its public key to readers so that they may verify
that signature (line 30). Events model runtime assertions in
the code: for instance, isreader(r, g, v) and iswriter(w, g, v)
assert that r is a reader and w is a writer for group g at ver-
sion v.
Next, Figure 2 shows the code for writers. A writer for
group g at version v obtains the lockbox key, the sign key,
and the owner-signed modulus for v from the owner of g
(lines 46–47). To write data, an honest writer encrypts that
data with the lockbox key (line 50), signs the encryption
with the sign key (line 51), and sends the signed encryption
to the ﬁle system with a header that includes the owner-
signed modulus (lines 52–54). The event puts(w, M, g, v)
asserts that an honest writer w for group g sends data M
to the ﬁle system using keys for version v. In contrast, a
dishonest writer leaks the lockbox key, the sign key, and the
owner-signed modulus (line 59); the adversary can use this
information to act for that writer. The event corrupt(w, g, v)
asserts that a writer w for group g is corrupt at version v.
1 let processOwr =
2
3
4
5
6
7
new seed1 ; new seed2 ;
let ownerpubkey = (e(seed1 , seed2 ), N(seed1 )) in
let ownerprivkey = (d(seed1 , seed2 ), N(seed1 )) in
out(net, ownerpubkey);
(
! in(net, (= newgroup, initreaders, initwriters));
(* create owner’s RSA key pair *)
(* publish owner’s RSA public key *)
new g;
out(net, g);
new currentstate;
(
( new initlk;
(* receive a new group creation request;
initreaders and initwriters are the initial lists of allowed readers and writers, respectively *)
(* create the new group g *)
(* publish the group name g *)
(* create a private channel for the current state for group g *)
(* create initial lk *)
(* generate initial sk *)
new seed3 ; let initsk = (d(seed3 , initlk), N(seed3 )) in
out(currentstate, (zero, initreaders, initwriters, initlk , initsk))
(* store state for version 0 on channel currentstate *)
)
|
( in(net, (= revoke, = g, newreaders, newwriters));
(* Next, we move from version 0 to version 1 *)
(* receive a revoke request for group g;
newreaders and newwriters are the new lists of allowed readers and writers *)
(* read state for version 0 *)
(* wind old lk to new lk *)
(* generate new sk *)
in(currentstate, (= zero, oldreaders, oldwriters, oldlk , oldsk));
let newlk = exp(oldlk , ownerprivkey) in
new seed3 ; let newsk = (d(seed3 , newlk), N(seed3 )) in
out(currentstate, (succ(zero), newreaders, newwriters, newlk , newsk))
(* store state for version 1 on channel currentstate *)
)
| . . . |
(
! in(net, (= rkeyreq, r , = g));
in(currentstate, (v , readers, writers, lk , sk));
out(currentstate, (v , readers, writers, lk , sk));
if member(r , readers) then
( event isreader(r , g, v);
out(rprivchannel(r), (g, v , lk , ownerpubkey)) )
)
|
(
! in(net, (= wkeyreq, w , = g));
in(currentstate, (v , readers, writers, lk , sk));
out(currentstate, (v , readers, writers, lk , sk));
if member(w , writers) then
( let ( , n) = sk in let sn = exp(hash(n), ownerprivkey) in
event iswriter(w , g, v);
out(wprivchannel(w), (g, v , lk , sk , sn)))
)
)
).
(* Similarly, we move from version 1 to version 2, and so on *)
(* receive read key request for reader r and group g *)
(* get the current state *)
(* check that the reader r is allowed *)
(* assert that r is a reader for group g and version v *)
(* send lk and owner’s public key to r *)
(* receive write key request for writer w and group g *)
(* get the current state *)
(* check that the writer w is allowed *)
(* sign the modulus *)
(* assert that w is a writer for group g and version v *)
(* send lk, sk, and signed modulus to w *)
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
Figure 1. Code for owners
out(net, (wkeyreq, w , g));
in(wprivchannel(w), (= g, v , lk , sk , sn));
(
( new m;
let encx = enc(m, lk) in
let sencx = exp(hash(encx), sk) in
event puts(w , m, g, v);
let (dx , n) = sk in
out(fs, (g, v , n, sn, encx , sencx))
44 let processWtr =
45 ! in(net, (w , g));
46
47