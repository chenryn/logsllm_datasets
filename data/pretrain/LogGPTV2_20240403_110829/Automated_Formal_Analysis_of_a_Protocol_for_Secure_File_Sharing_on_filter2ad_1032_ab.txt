### 3.1. ProVerif

ProVerif [2, 11, 12, 14] is an automatic verifier designed to analyze security protocols. The protocol is specified using an extension of the pi calculus with cryptographic primitives, which is a dialect of the applied pi calculus [3]. Security properties can be specified as correspondence assertions [41], which are statements of the form "if some event has been executed, then other events have been executed." (We will illustrate this input language later.) Internally, the protocol is translated into a set of Horn clauses, and the security properties are translated into derivability queries on these clauses. Properties are proven when certain facts cannot be derived from the clauses. ProVerif uses a resolution-based algorithm to demonstrate non-derivability.

ProVerif relies on the formal Dolev-Yao model of protocols [24], where messages are modeled as terms in an algebra. This abstract model of cryptography simplifies automation compared to the more concrete computational model, where messages are modeled as bitstrings. Consequently, ProVerif can handle a wide variety of cryptographic primitives specified by rewrite rules or equations over terms. Key features include:

- **Unbounded Sessions and Message Sizes:** When ProVerif proves a property, the proof is valid for an unbounded number of protocol sessions and message sizes.
- **Failure Analysis:** If a proof fails, ProVerif provides a derivation of a fact from the clauses. It also attempts to reconstruct a trace of the protocol that demonstrates the property's falsity [5]. If trace reconstruction fails, ProVerif does not provide a definitive answer, which is unavoidable due to the undecidability of the problem. In such cases, manual inspection of the derivation often reveals an attack against the property.

Next, we present a model of Plutus in ProVerif, with its security properties specified and analyzed in Section 4.

### 3.2.1. Cryptographic Primitives, Lists, and Integers

Cryptographic primitives are abstracted using function symbols, and their properties are specified with rewrite rules and equations over terms. For example:
- `enc(M, K)` denotes the result of encrypting message M with symmetric key K.
- `dec(enc(x, y), y) → x` models the decryption of any term `enc(M, K)` with K to obtain M.
- `hash(M)` represents the hash of message M.
- `exp(M, (R, N))` computes \( M^R \mod N \).
- Random RSA seeds are abstracted as fresh names.
- `N(s)` denotes the modulus of seed s.
- `e(s, K)` and `d(s, K)` represent the unique exponent and its inverse, respectively, determined by the modulus N(s) and base K, as described in Section 2.
- `crack(e(x, y), d(x, y), N(x)) → x` models the efficient factorization of a modulus N(s) to obtain the RSA seed s if both exponents e(s, K) and d(s, K) are known [17].

Sets of allowed writers and readers are modeled using lists, where `nil` is the empty list and `cons(M, L)` extends list L with M. The predicate `member(N, L)` holds if N is a member of L. Version numbers are modeled with integers, where `zero` is 0 and `succ(M)` is the successor of M. The predicate `geq(N, M)` holds if N is greater than or equal to M. The following clauses define `member` and `geq` in ProVerif:

```proverif
member(x, cons(x, y));
member(x, y) => member(x, cons(z, y)).

geq(x, x);
geq(x, y) => geq(succ(x), y).
```

For notation elegance, we sometimes write `0`, `1`, ... for `zero`, `succ(zero)`, ..., `M ≥ N` for `geq(M, N)`, and `M ∈ L` for `member(M, L)`.

### 3.2.2. The Protocol

Principals are modeled as applied pi-calculus processes with events [14]. Informally, the constructs include:
- `out(u, M); P` sends message M on channel u and continues as process P.
- `in(u, X); P` receives a message M on channel u, matches M with pattern X, and continues as process P with variables in X bound to matching terms in M.
- `new m; P` creates a fresh name m and continues as process P.
- `event e(M1, ..., Mn); P` executes event e(M1, ..., Mn) and continues as process P.
- `if M = M0 then P else Q` executes P if M evaluates to the same term as M0; otherwise, it executes Q.
- `let X = M in P` evaluates M, matches it with pattern X, and continues as P with the variables in X bound to matching terms in the value of M.
- `P | Q` runs processes P and Q in parallel.
- `!P` runs an unbounded number of copies of process P in parallel.

In Figures 1, 2, and 3, we define processes for owners, writers, and readers. The protocol is specified as the parallel composition of these processes. The storage server is assumed to be untrusted and is not modeled here. The network is modeled by a public channel `net`, and the file system is modeled by a public channel `fs`. Private channels, such as `rprivchannel(r)` and `wprivchannel(w)`, are secure and not available to the adversary. We limit the number of revocations in any group to `maxrev`.

#### Figure 1: Code for Owners

An owner creates a private/public key pair and manages groups. For each group, the owner maintains state on a private channel `currentstate`. The state includes the current version number, lists of allowed readers and writers, the lockbox key, and the sign key for the group. The owner creates initial keys for the group, generates subsequent versions, and distributes keys to allowed readers and writers. The owner signs the modulus of each version with its private key and sends the signed modulus to writers and its public key to readers for verification. Events model runtime assertions, such as `isreader(r, g, v)` and `iswriter(w, g, v)`.

#### Figure 2: Code for Writers

A writer for group g at version v obtains the lockbox key, sign key, and owner-signed modulus from the owner. An honest writer encrypts data with the lockbox key, signs the encryption with the sign key, and sends the signed encryption to the file system. The event `puts(w, M, g, v)` asserts that an honest writer w sends data M to the file system using keys for version v. A dishonest writer leaks the lockbox key, sign key, and owner-signed modulus, allowing the adversary to act as that writer. The event `corrupt(w, g, v)` asserts that a writer w is corrupt at version v.

```proverif
let processOwr =
  new seed1; new seed2;
  let ownerpubkey = (e(seed1, seed2), N(seed1)) in
  let ownerprivkey = (d(seed1, seed2), N(seed1)) in
  out(net, ownerpubkey);
  (
    ! in(net, (= newgroup, initreaders, initwriters));
    new g;
    out(net, g);
    new currentstate;
    (
      new initlk;
      new seed3; let initsk = (d(seed3, initlk), N(seed3)) in
      out(currentstate, (zero, initreaders, initwriters, initlk, initsk))
    )
    |
    (
      in(net, (= revoke, = g, newreaders, newwriters));
      in(currentstate, (= zero, oldreaders, oldwriters, oldlk, oldsk));
      let newlk = exp(oldlk, ownerprivkey) in
      new seed3; let newsk = (d(seed3, newlk), N(seed3)) in
      out(currentstate, (succ(zero), newreaders, newwriters, newlk, newsk))
    )
    | ...
    (
      ! in(net, (= rkeyreq, r, = g));
      in(currentstate, (v, readers, writers, lk, sk));
      if member(r, readers) then
        ( event isreader(r, g, v);
          out(rprivchannel(r), (g, v, lk, ownerpubkey)) )
    )
    |
    (
      ! in(net, (= wkeyreq, w, = g));
      in(currentstate, (v, readers, writers, lk, sk));
      if member(w, writers) then
        ( let ( , n) = sk in let sn = exp(hash(n), ownerprivkey) in
          event iswriter(w, g, v);
          out(wprivchannel(w), (g, v, lk, sk, sn)) )
    )
  ).
```

#### Figure 2: Code for Writers

```proverif
let processWtr =
  ! in(net, (w, g));
  out(net, (wkeyreq, w, g));
  in(wprivchannel(w), (= g, v, lk, sk, sn));
  (
    new m;
    let encx = enc(m, lk) in
    let sencx = exp(hash(encx), sk) in
    event puts(w, m, g, v);
    let (dx, n) = sk in
    out(fs, (g, v, n, sn, encx, sencx))
  ).
```

This completes the description of the protocol and its components. For detailed information on ProVerif and the underlying theory, refer to [14].