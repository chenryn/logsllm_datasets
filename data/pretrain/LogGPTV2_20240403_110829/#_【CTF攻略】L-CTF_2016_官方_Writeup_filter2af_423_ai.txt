                secretKeySpec = new SecretKeySpec(bytes1, "AES");
                cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            }
            else {
                secretKeySpec = new SecretKeySpec(key, "AES");
                cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            }
        }except{
            //...
        }
    }
从url.png中获得key，然后使用handle函数进行处理（奇偶位互换）作为最终AES加密的key。flag密文:
    byte[] bye = {21,-93,-68,-94,86,117,-19,-68,-92,33,50,118,16,13,1,-15,-13,3,4,103,-18,81,30,68,54,-93,44,-23,93,98,5,59};
    new String(bye);
使用AES/ECB/PKCS5Padding，用key对选手输入进行加密，结果与flag密文进行比对；故解密时只需
init(Cipher.DECRYPT_MODE, secretKeySpec)；
对flag密文进行解密即可。
flag:LCTF{1t's_rea1ly_an_ea3y_ap4}
**  
**
**moblie 200**
首先还是直接放出NDK部分源码…
    std::string secret = "dHR0dGlldmFodG5vZGllc3VhY2VibGxlaHNhdG5hd2k.";
    static const std::string chars =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                    "abcdefghijklmnopqrstuvwxyz"
                    "0123456789+/";
    static inline bool is_base(unsigned char c) {
        return (isalnum(c) || (c == '+') || (c == '/'));
    }
    std::string encrypt(char const* bytes_to_encode, unsigned int in_len) {
        std::string ret;
        int i = 0;
        int j = 0;
        unsigned char char_array_3[3];
        unsigned char char_array_4[4];
        while (in_len--) {
            char_array_3[i++] = *(bytes_to_encode++);
            if (i == 3) {
                char_array_4[0] = (char_array_3[0] & 0xfc) >> 2;
                char_array_4[1] = ((char_array_3[0] & 0x03) > 4);
                char_array_4[2] = ((char_array_3[1] & 0x0f) > 6);
                char_array_4[3] = char_array_3[2] & 0x3f;
                for(i = 0; (i > 2;
            char_array_4[1] = ((char_array_3[0] & 0x03) > 4);
            char_array_4[2] = ((char_array_3[1] & 0x0f) > 6);
            char_array_4[3] = char_array_3[2] & 0x3f;
            for (j = 0; (j GetStringUTFChars(input, false);
        if (pass == NULL ){
            return (jboolean)false;
        }
        char* pas = new char[33];
        strcpy(pas, pass);
        password = handlePasswd(pas);
        env->ReleaseStringUTFChars(input, pass);
        return (jboolean) (password == secret);
    }
本题主要是静态反汇编分析能力。EditText获取选手输入后，将其substring(5,
37)得到flag，亦为即将传入native方法的值，虽然没有检测其前5及后边的字符值，但对输入长度做了限定；native
checkPasswd(String
input)方法则分为两部分，一是对input做简单处理，即倒序；二则是一个base64编码，只是我把'='用'.'来替换了；input编码后直接与密文secret进行比对，所以程序内部并没有解密方法。
Jni_OnLoad函数内部则是简单的ptrace反调试和反模拟器的一些函数以及一个对dex的SMC，即将内存中的form函数的字节码用f0rm函数的来替换（其余两个是我后来觉得只有form和f0rm的话太过直接，于是添加进去的无用函数）。这种对dex字节码的SMC是一种Android低版本的方法（version
< 5），所以高系统版本手机上会crash掉…但由于只使用了AVD的模拟器及一款三星Android
4.4.4手机做测试，没有对其他机型做适配，所以有选手反应说在nexus5
4.4.3上也出了问题…虽然尽量使用了能够静态分析出的SMC方案，但仍在此表示诚挚的歉意…（请务必不要寄刀片…）
分析出encrypt是base64的话就很简单，只需将secret的'.'换为'='，然后base64.b64decode(secret)即可得到倒序的flag，为：iwantashellbecauseidonthaveitttt
**  
**
**crypt 200**
**写在前面……**
这道题本计划让参赛选手自己写脚本爆破的，然而ZZ出题人不小心把密文给的长了……于是几乎所有队伍都是在线解出来的……几乎成了签到题……出题人表示很悲伤……
**出题人计划中的解题思路：**
首先通过自己写脚本/在线工具，查出密钥很可能为两段，分别是 7、13
。然后开始爆破短密码，每爆破一位检查一次是否正确。这里有一个小点：对7位密钥爆破时，只需把第一位预设为'a'，爆破后六位就可以。用python多线程实现，大概需要3-4小时即可得出结果，Ｃ语言会更快。
怨念の出题人：只取密文中的前91个字母，你给我在线解啊在线解啊(〒︿〒)
**crypt 450**
拿到流量包，只有三个http请求：