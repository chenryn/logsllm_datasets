可处理大规模系统的垃圾回收算法必须充分利用系统的多个处理器。如果一个垃圾回收
当将垃圾回收应用到并发或多处理器机器上运行的应用程序时，这一工作变得更具有挑战
为了理解这个算法的设计思想，我们必须牢记这个问题的规模。即使一个并行应用的根集
4）程序员控制的垃圾回收和自动垃圾回收之间的交互。
3）针对类型不安全的语言的垃圾回收。
2）
1）并行环境下的垃圾回收。
我们简要地介绍下面的四个论题，结束我们对垃圾回收的研究：
练习7.7.5：假设堆区恰好由图7-30 中显示的三辆列车(共九节车厢)组成(即忽略其中的省
2）没有来自车厢11之外的指针。
1）只有来自车厢22 和31的引用。
练习7.7.4：在下列情况下重复练习7.7.3。假设对象。
练习7.7.3：假设堆区恰好由图7-30 中显示的三辆列车(共九节车厢)组成(即忽略其中的省
2）事件(2)和(5)在(1)、(3)和(4)之前发生。
1）事件(2)和(5)的顺序互换。
练习7.7.2：按照如下假设重复练习7.7.1：
假设没有更多的指针被覆写，模拟整个增量式垃圾回收过程。哪些对象是垃圾？哪些对象
5）指针B→→C被覆写为B→I。
4）D被扫描。
3）B被扫描。
2）指针 A→D 被覆写为 A→H。
1）A被扫描。
对象的部分重定位。
319
容
是
---
## Page 336
系统中的所有处理器就可以快速找到所有线程的根集。因为大部分可达对象已经被跟踪确定，
并发步骤通常会在完成全部跟踪工作之前就停止。剩下的工作将在下面介绍的最后一步中完成。
次数，或者当未完成扫描的卡片数量减少到某个阈值时停止跟踪。这么做的结果是使得并行和
生。因此，我们需要依照某种标准来停止跟踪过程。比如只允许卡片被再次扫描一次或固定白
扫描过之后，我们重新扫描这些卡片以寻找可达对象。只要增变者继续执行，脏卡片就会不断
将在以后被扫描。后一种处理方法总是可行的，因为存放卡片标记的位数组已经预先分配好了
使得我们无法找到创建这些工作包所需的空间，就直接为保存这些对象的卡片加上标记，使它们
象。这种策略允许在跟踪过程中把工作量平均分配给各个工作线程。如果系统用完了存储空间，
们就被放置到工作包中。等待工作的线程将从队列中取出这些工作包，并跟踪其中的待扫描
（work packet）组成的工作队列。每个工作包保存了一些待扫描对象。当发现待扫描对象时，
没有调用内存分配函数，那么必须暂停这个线程，扫描它的根集。
没
成这一步的最简单的增量式做法是等待一个增变者线程调用内存管理器，如果那时它的根集还
扫描对象指向未被访问对象的引用，存放这个引用的卡片就被标记为脏的，需要重新扫描。
钟周期时，专用的垃圾回收线程才会投人使用。和增量式分析一样，只要增变者写入了一个从已
者线程执行了某个内存分配操作，它同时也会执行一些跟踪计算。只有当计算机中有空闲的日
回收工作。另外，我们也使用一些专门用于回收垃圾的线程。一旦垃圾回收过程启动，只要增变
行各个增变者，使用并行线程来保证找到所有的可达对象。
个增变者线程并发地运行，以跟踪得到大部分可达对象。然后，为了实现第(3)步，我们暂停执
法是并行地扫描其中的某些卡片，同时允许增变者继续并发执行。
变线程数量巨大，在将所有对象扫描--次之后，很多卡片都需要重新扫描。此时，值得推荐的做
然后花费很多时间和空间去访问所有这样的对象是不可行的。同时，因为堆的规模巨大，并且增
引用被覆写)。
分成若干被称为“-卡片"的区段，并维护一个位映射来指明哪个卡片是脏的（即其中有一个或多个
可以选择多种粒度来记录这些引用。在本节中，我们将假定使用基于卡片的方案。我们将堆区
从已扫描对象指向未被访问对象的引用时，我们都会记录这个引用。如7.7.2节中讨论的，我们
增变过程重叠执行。请回顾一下，正如7.7节所讨论的，一个增量式分析完成下列三个步骤：
量也非常大，可达数据的数量同样也很大。增变过程发生速率也比一般的应用高很多。
也要比普通的应用大很多，它由每个线程的栈、寄存器集和全局可访问变量组成。堆区存储的数
4）最后-一步保证所有的可达对象都被标记为已被访问的。随着所有增变者停止执行，使用
没有被扫描，就让它扫描自己的根集。如果所有其他跟踪工作都已经完成，而某个增变者线程还
3）扫描脏卡片中的对象。当工作队列中不再有待扫描对象，并且所有线程的根集都已经
完成第(2)步中跟踪过程的方法是让每个增变者线程在完成其自身工作的同时执行部分垃圾
为了减少停顿时间，我们可以采用原本为增量式分析而设计的基本思想，使垃圾回收和状态
2）扫描处于待扫描状态的对象。为了支持并行计算，我们使用一个由固定大小的工作包
为了并行地实现上面第(2)步中的跟踪过程，我们将使用多个垃圾回收线程。这些线程和各
320
1）扫描每个增变者线程的根集，将所有可以从根集中直接到达的对象设为待扫描状态。完
3）再次暂停增变者的运行，重新扫描所有可能保存了指向未被访问对象的引用的卡片。
下面给出一个并行、并发垃圾回收算法的大概描述：
2）增变者的执行和对可达对象的跟踪交替进行。在这个阶段；每次有-一个增变者写人一
1）找到根集。这个步骤通常是以原语方式完成的，即增变者暂时停止运行。
第7章
它
时
个
---
## Page 337
块保存一个数据映射(data map）。这个映射使我们很容易地找到一-个内存块的起止位置。这两
以它不能修改这些模式并使之指向新的地址。
法是不兼容的。因为保守的垃圾回收器并不能确认某个位模式是否真的指向某个实际地址，月
是正确的，因为这只会使得垃圾回收器保守地回收垃圾，留下的数据包含了所有必要的数据。
存位置，我们就认为它是一个有效地址。这种方案可能会把有些数据错当作地址。然而，这么做
方法是，对于在任意可达存储区域中找到的一个二进制位模式，如果该模式可以被构造成一个内
中某处的地址的情况下得到该存储块的地址。我们可以在程序中找出所有满足这一假设的垃圾。
中它能够很好地完成任务。
以为这一类程序构造出一种保守的垃圾回收器(也就是不一定回收所有垃圾的回收器），在实虽
是不可达的。然而，很多C或C++程序从不按照这种方式随意地构造地址。已经证明，人们可
因为我们总是可以通过算术运算来计算地址，所以在C和C++中，没有任何内存位置可被认为
7.8.
这种方法减少了碎片，又不会因为在每个回收循环中进行重新定位而引起额外的开销。
然而，列车算法的代价和每个区域的被记忆集的大小相关。
在回收成熟对象时比较昂贵。我们可以使用列车算法来限制每次分析时处理的成熟数据的数量。
贵的，对大型堆区来说尤其如此。
每个引用进行转换，要么到最后才移动所有的对象并更新它们的引用。这两种做法都是比较昂
收器在跟踪过程中就找出可达对象的位置。如果跟踪采用增量式执行方式，我们要么对增变者
要不小的开销。压缩回收器需要在垃圾回收结束时移动所有的对象并更新所有的引用。拷贝“
7.8.2部分对象重新定位
这方面做出决策。根据专用垃圾回收线程所做的工作量，可以动态调整跟踪频率。
动回收的时机和跟踪的频率。对前面的各轮垃圾回收中的对象增变速率的估算可以帮助我们在
能继续运行，此时的情况就退化为使用全面停顿式回收器的情形。因此，算法必须适当地选择启
浮垃圾的数量。另一方面，我们又不能等到存储耗尽时才开始跟踪过程。因为这时增变者将
片。在需要进行垃圾回收之前过分频繁地启动跟踪过程是没有必要的，因为这样做将会增加
须被扫描的新对象和新引用，而跟踪过程则试图扫描所有可达对象，并重新扫描同时产生的脏卡
所有卡片的重新扫描。
预计只有少量的对象会被放在待扫描状态中。所有的线程都参与了对其余可达对象的跟踪和对
下面是一个保守的垃圾回收器的工作方式。首先修改内存管理器，使之为所有已分配内存
我们必须控制启动跟踪过程的频率,这很重要。跟踪步骤就像是--场赛跑。增变者创建出必
运行时刻环境
对象重定位需要更新所有指向旧地址的引用，使之指向新地址，因此它和保守的垃圾回收方
保守的垃圾回收器假定我们不可以随意构造出一个地址，或者在没有指向某已分配存储块
如7.5.1节中讨论的，我们不可能构造出一个可以处理所有C和C++程序的垃圾回收器。
有一种混合型的回收方案，它使用并发跟踪来回收所有不可达对象，同时只移动部分对象。
我们可以改用一个拷贝世代垃圾回收器。它在回收年轻对象并减少碎片方面很有效，但是
就像从7.6.4节开始讨论的，拷贝或压缩回收器的优势在于消除碎片。然而，这些回收器需
.3类型不安全的语言的保守垃圾回收
+
1）在跟踪开始之前，选择将被清空的一部分堆区。
最后，清空占据指定区域的可达对象，并修正指向被清空对象的引用。
当跟踪完成时，并行地清扫存储空间以回收被不可达对象占用的空间。
当标记可达对象时，记住所有指向指定区域内的对象的引用。
321
国
K
漂
---
## Page 338
7.9
没有其他指针同时指向该存储块。写出一个这样的程序。
段错误。然而，用C语言可能写出一段代码，使得一个像p这样的变量一定指向某个存储块，且
面，对于上面的代码，更可能发生的情况是p什么地方都不指，执行那个代码会引起一个内存分
回收。因此我们将形如
中某个位置的地址时构造出指向这块内存中某个位置的地址，我们就可以对这个程序进行垃圾
7.8.57.8节的练习
对象，这个对象可能仍然是可达的。
引用前进，也不会将它们指向的对象设置为可达的。当然，如果另有一个不弱的引用指向这一个
们刚刚讨论的散列表中的所有引用。当垃圾回收器扫描一个对象时，它不会沿着该对象内的弱
区存储带来负担。在这样的系统中，允许将某些引用声明为“弱”引用。弱引用的一个例子是
支持程序员依靠自动垃圾回收来解决问题，并且不会因为那些实际不再使用的可达对象而给
时就在散列表中删除对相应对象的所有引用。然而，一种被称为弱引用（weak reference）的技)
被
果
个对象的引用。因为散列表是编译器的根集的一部分，所以这个对象不能作为垃圾被回收。如
也没有来自可能被编译器使用的其他中间结构的引用。然而，在散列表中仍然存在一个指向
表可以在词法分析器碰到一个标识符词法单元时更容易找到对应的对象。
然
对
例7.17
访问。一个来自编译的例子可以说明这一问题。
理部分内存。也就是说，尽管仍然存在一些引用指向某些对象，但程序员知道这些对象不会再被
7.8.4弱引用、（<
并释放所有不可达的内存块。
过程，直到工作列表为空。在完成跟踪工作之后，我们使用上述数据映射来清扫整个堆区，定位
！练习7.8.1：在7.8.3节中，我们说如果一个C语言程序只会在已存在某个指向某存储块
后的整个编译过程中它都是无用的。
皮删除。然而，如果没有遇到词素相同的其他标识符，那么Ⅱ的对象仍然是不可回收的，尽管
是碰到了另一个词素和I相同的标识符，编译器就会发现1已经过时了，指向Ⅱ的对象的引用将
当编译器扫描完标识符1的作用域时，I的符号表对象不再有任何来自语法分析树的引用，
而，以这些标识符的字符串作为键值构造一个散列表有助于对这些对象进行定位。这个散列
寸象。比如，这些对象可能作为词法值被附加于语法分析树中代表这些标识符的叶子结点上。
如果例子7.17中提出的问题很重要，那么编译器的作者可以设法在标识符的作用域一结
有时候，虽然程序员使用了带有垃圾回收机制的语言，但是仍然希望自己管理内存，或者管
322
 第7章总结
建并管理了－个运行时刻环境。该运行时刻环境有一个静态数据区，用于存放对象代码
运行时刻组织。为了实现源语言中的抽象概念，编译器与操作系统及目标机器协同，创
我们已经看到，词法分析器通常会管理一个符号表，为它碰到的每个标识符创建一个
第7章
我
堆
束
在
这
---
## Page 339
运行时刻环境
●标记－清扫式回收器在一开始的跟踪阶段访问并标记所有可达对象，然后清扫堆区，回
根集包括了所有不需要对任何指针解引用就可直接访问的对象。
基于跟踪的垃圾回收器从根集出发，选代地检查或跟踪所有的引用，找出所有可达对象。
即由相互引用的不可达对象组成的垃圾。这些垃圾也可能通过由引用组成的链路相互
成不可达的。这样的回收器带来了维护引用的开销，并且可能无法找出“循环”的垃圾，
引用计数回收器维护了指向一个对象的引用的计数。当这个计数变为〇时，该对象就变
出其余对象都是不可达的。
要么截获一个对象从可达变成不可达的转换，要么周期性地定位所有可达对象，并推导
可达性。垃圾就是不能被引用或者说到达的数据。有两种寻找不可达对象的基本方法：
称为内存泄漏错误；引用已经被删除的数据，这称为悬空指针引用错误。
人工回收。人工存储管理有两个常见的问题：没有删除那些不可能再被引用的数据，这
而言它可能并不是最好的。可以通过合并或者说接合相邻的“窗口"来减少碎片。
且不连续的空闲空间(或称为“窗口”）。best-fit 策略（分配能够满足空间请求的最小可用
减少碎片。随着程序分配和回收存储，堆区可能会变得破碎，或者说被分割成大量细小
性。如果一个程序很可能访问刚刚访问的存储区域附近的位置，该程序就具有空间局
如果一个程序很可能在短期内再次访问刚刚访问过的存储位置，该程序就具有时间局部
它们的大部分时间用于执行相对较小的一部分代码，并且此时只会访问一小部分数据
访问存储的不同区域所花的时间可能从几纳秒到几毫秒不等。幸运的是，大部分程序将
利用局部性。通过更好地利用存储的层次结构，存储管理器可以影响程序的运行时间
间，这些空间可以回收并用于存放其他数据项。对于要求垃圾回收的语言，垃圾回收
储区域。存储管理器分配和回收堆区中的空间。垃圾回收在堆区中找出不再被使用的空
堆管理。堆是用来存放生命周期不确定的，或者可以生存到被明确删除时刻的数据的不
要么是全局的，要么可以在运行时刻栈顶的活动记录中找到。对于带有嵌套过程的语
访问栈中的非局部数据。像C这样的语言不支持嵌套的过程声明，因此一个变量的位
记录对应于活动树中到达当前控制所在活动的路径。当前活动的记录位于栈顶。
局部变量的存储空间可以在运行时刻栈中分配。对于这样的语言，每一个活跃的活动都
栈分配。对于那些允许或要求局部变量在它们的过程结束之后就不可访问的语言而言
动就嵌套在p的活动之内。
原因是过程调用(或者说活动)在时间上是嵌套的。也就是说，如果p调用g，那么α的活
控制栈。过程调用和返回通常由称为控制栈的运行时刻栈管理。我们可以使用栈结构的
1
引用。