# 【技术分享】MSWord：如何混淆域代码绕过基于Yara规则的DDEAUTO检测
|
##### 译文声明
本文是翻译文章，文章来源：staaldraad.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[兴趣使然的小胃](http://bobao.360.cn/member/contribute?uid=2819002922)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
几周前，我和Saif El-Sherei在[SensePost](https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/)博客上发表了一篇文章，介绍了DDE（Dynamic Data
Exchange，动态数据交换）的相关技术，以及如何利用这种技术，在不启用宏功能的MSWord上实现命令执行。我们没有想到这篇文章会吸引那么多人的目光。从那时起，钓鱼及恶意软件攻击行动中开始使用DDE技术，合法的红蓝对抗中也出现了这种技术的身影。随着DDE大规模用于攻击行动中，相应的检测机制也逐步完善，大多数反病毒软件引擎中已经包含基本的DDE检测功能。这类检测技术大多都基于YARA规则，可以识别.docx以及.doc文件中的DDE或者DDEAUTO字符串。在这种情况下，我想知道能否找到混淆文档中DDE特征的方法。现实中已经有人着手尝试过，比如[这篇文章](https://furoner.wordpress.com/2017/10/17/macroless-malware-that-avoids-detection-with-yara-rule/amp/)中，攻击者修改了DDE字符串的大小写状态，将特征字符串切割为多行形式，以规避基于Yara规则的检测技术。
在这篇文章中，我会与大家分享我在混淆特征及绕过检测方面的经验，希望这些经验能给攻防双方提供参考。
本文主要内容为：
**1、如何混淆攻击载荷；**
**2、如何隐藏DDE/DDEAUTO特征；**
**3、应对方法。**
**二、如何混淆攻击载荷**
在研究如何混淆DDE以及DDEAUTO域代码（Field
Code）的方法之前，我想先重点研究一下如何混淆攻击载荷。之所以这么做，主要有两方面原因。其一，攻击载荷为一串简单的字符串，而不是一个保留的域代码，这意味着混淆载荷不大可能会破坏载荷的功能。其二，我们有更多的空间可以用来混淆，隐藏三个字符（DDE）会比隐藏包含255个字符的字符串难度更大。
由于这方面技术会涉及到域代码相关知识，我们可以尝试下能否在这一领域找到其他可用的混淆点。快速搜索“list field codes
word”关键词后，我们找到了微软公布的一份[支持文档](https://support.office.com/en-us/article/List-of-field-codes-in-Word-1ad6d91a-55a7-4a8d-b535-cf7888659a51)，这份文档中列出了Word支持的所有域代码，对我们而言非常有用。花了一些时间遍历这些域代码后，我从中找到了一个可能用得上的代码，即QUOTE域。微软对这个域的描述为：“Quote域可以将特定的文本插入文档中”。这听起来非常有用，因为我们的目的是寻找能够修改载荷字符串的方法，而利用QUOTE域，我们可以修改字符串，并将其插入文档中。
顺便提一句，需要注意的是，我们可以在Word中使用嵌套形式的域代码，例如，关于QUOTE域，我们可以这么使用：
    { QUOTE { IF { DATE @ "M" } = 1 "12" "{= { DATE @ "M" } -1 }/1/03" @ "MMMM"} }
上面例子中包含嵌套形式的域代码，QUOTE域内部包含IF域代码，其内容会取决于FORMULA(=)的处理结果，最终包含DATE或者经过格式化的日期数据。
我们可以向QUOTE域提供某个字符的数字编码，它会将这个编码转换为对应的字符（我并没有找到关于这个技术点的参考资料）。比如，如果我们想要得到数字编码为65所对应的那个字符，我们可以在Word中使用如下域：
    { QUOTE 65 }
这段代码最终会显示为字符A，而不是数字65，这正是我们希望得到的结果。现在我们可以将攻击载荷重新以数字形式进行编码，这样Word在执行我们的DDE之前会自动将数字编码转换为字符串。完整的代码如下：
    {SET c "{QUOTE 65 65 65 65}"}
    {SET d "{QUOTE 71 71 71 71}"}
    {DDE {REF c} {REF d}}
上面这段内容等价于：
    {DDE "AAAA" "GGGG"}
此时，我们可以充分发挥想象力，在载荷中将AAAA以及GGGG替换为前面的那段代码。为了使替换过程更加便捷，我编写了一个python脚本，可以将给定的字符串转换为等效的QUOTE域代码。
    #!/usr/env/python
    print("Converts a string to the {QUOTE} Field code")
    st = raw_input("String to convert: ")
    out = "{ QUOTE "
    for c in st:
        out += (" %s"%ord(c))
    out += " }"
    print(out)
如果想要弹出powershell，我们可以使用如下代码：
    {SET C "{QUOTE 67 58 92 92 80 114 111 103 114 97 109 115 92 92 77 105 99 114 111 115 111 102 116 92 92 79 102 102 105 99 101 92 92 77 83 87 111 114 100 46 101 120 101 92 92 46 46 92 92 46 46 92 92 46 46 92 92 46 46 92 92 119 105 110 100 111 119 115 92 92 115 121 115 116 101 109 51 50 92 92 119 105 110 100 111 119 115 112 111 119 101 114 115 104 101 108 108 92 92 118 49 46 48 92 92 112 111 119 101 114 115 104 101 108 108 46 101 120 101} "}
    {DDE {REF C}  "a"}
**2.1 Dirty链接**
顾名思义，DDEAUTO在文档打开时会自动更新。然而，除非我们在文档上设置了“更新链接（update
links）”属性，否则并不是所有的域代码都会自动更新。为了实现这一点，我们需要将我们所使用的链接标记为“dirty”链接（已过时链接），或者更改文档属性，让文档可以自动更新链接（可能会有其他方法比我的方法更加简单）。
具体方法是，当我们创建.docx文档后，可以使用归档管理器软件打开这个文档，然后编辑其中的document.xml文件。为了将链接标记为待更新的dirty链接，我们需要找到文件中以开头的所有字符串，添加w:dirty="true"字符串，如下所示：
然后，保存 **document.xml** ，更新压缩包。现在当用户打开.docx文档时，所有的链接都会自动更新。同时，用户看到的是更加整洁的“Do
you want to update”对话框，提示是否更新域。
**2.2 处理结果**
最大的问题是，使用QUOTE后，我们是否能达到很好的效果？事实证明的确如此。我们使用了会弹出powershell对话框的Word样本进行测试（我认为如果Word会弹出Powershell对话框，那么这种行为显然是非常可疑的），结果发现VirusTotal上只有1/59的检测率。
通常情况下，将.docx文件重新保存为.doc文件后，我们依然能得到同样的代码执行效果。然而，使用这种方法时，如果你想打开.doc文档，你会看到一个Error!
No application
specified错误对话框，这是因为嵌套的域代码没有正确更新的原因。可能会有一种方法能强制更新所有的域代码，然而受我个人知识面所限，我无法在Word中找到这类方法。
**三、如何隐藏DDE特征**
接下来另一个挑战是，如何隐藏并规避现有的检测机制，这类检测机制包括基于YARA规则以及基于DDE链接提取的技术。
**3.1 YARA规则**
据我所知，大多数YARA规则的原理都是在某个.docx文档的instrText元素中查找DDE或者DDEAUTO特征（我着重研究的是.docx文档，因为这类文档手动修改起来更加方便）。第一个YARA规则由[Nviso
Labs](https://blog.nviso.be/2017/10/11/detecting-dde-in-ms-office-documents/)公布，包含如下正则表达式：
    /.+?b[Dd][Dd][Ee]b.+?/
这条规则能有效检测出第一批恶意文档，然而对于后续出现的多行变种文档而言却无能为力。在多行变种文档出现之前，我还找到了这个正则表达式中存在的另一个问题，并已将其反馈给Didier
Stevens。如果你仔细研究Office Open XML文件格式规范时，你会发现fldChar域为复杂域（Complex
Field）类型，可以包含可选属性。添加可选属性后，我们就能破坏上述YARA规则，无需利用DDEAUTO，只需使用DDE就能实施攻击。这个可选属性为dirty属性，只要将属性值设为true，就能强制更新域代码，因为规范中提到这样一句话：“（属性值为true）表明某个应用程序已标记该域，代表自上次保存以来，当前记录已发生更改，不再有效。”
我在前面提到的QUOTE域中也用到过这个属性，用来强制更新域值。与之前的步骤类似，我们只需要手动修改.docx文档，将该属性添加到文档中即可：
上述正则表达式无法匹配这种可选属性，因此无法检测这类变种。我向Didier提交了新的匹配规则，新的规则可以适配可选属性，也可以适配包含任意空格符的XML数据：