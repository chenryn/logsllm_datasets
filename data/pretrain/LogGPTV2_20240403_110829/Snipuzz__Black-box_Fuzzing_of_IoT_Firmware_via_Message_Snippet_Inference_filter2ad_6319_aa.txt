title:Snipuzz: Black-box Fuzzing of IoT Firmware via Message Snippet Inference
author:Xiaotao Feng and
Ruoxi Sun and
Xiaogang Zhu and
Minhui Xue and
Sheng Wen and
Dongxi Liu and
Surya Nepal and
Yang Xiang
Snipuzz: Black-box Fuzzing of IoT Firmware
via Message Snippet Inference
Xiaotao Feng
Australia
Minhui Xue
Australia
Ruoxi Sun
Australia
Sheng Wen∗
Australia
Xiaogang Zhu∗
Australia
Dongxi Liu
CSIRO Data61
Australia
Swinburne University of Technology
The University of Adelaide
Swinburne University of Technology
The University of Adelaide
Swinburne University of Technology
Surya Nepal
CSIRO Data61
Australia
ABSTRACT
The proliferation of Internet of Things (IoT) devices has made peo-
ple’s lives more convenient, but it has also raised many security
concerns. Due to the difficulty of obtaining and emulating IoT
firmware, in the absence of internal execution information, black-
box fuzzing of IoT devices has become a viable option. However,
existing black-box fuzzers cannot form effective mutation optimiza-
tion mechanisms to guide their testing processes, mainly due to the
lack of feedback. In addition, because of the prevalent use of various
and non-standard communication message formats in IoT devices,
it is difficult or even impossible to apply existing grammar-based
fuzzing strategies. Therefore, an efficient fuzzing approach with
syntax inference is required in the IoT fuzzing domain.
To address these critical problems, we propose a novel automatic
black-box fuzzing for IoT firmware, termed Snipuzz. Snipuzz runs
as a client communicating with the devices and infers message
snippets for mutation based on the responses. Each snippet refers
to a block of consecutive bytes that reflect the approximate code
coverage in fuzzing. This mutation strategy based on message snip-
pets considerably narrows down the search space to change the
probing messages. We compared Snipuzz with four state-of-the-
art IoT fuzzing approaches, i.e., IoTFuzzer, BooFuzz, Doona, and
Nemesys. Snipuzz not only inherits the advantages of app-based
fuzzing (e.g., IoTFuzzer), but also utilizes communication responses
to perform efficient mutation. Furthermore, Snipuzz is lightweight
as its execution does not rely on any prerequisite operations, such
as reverse engineering of apps. We also evaluated Snipuzz on 20
popular real-world IoT devices. Our results show that Snipuzz could
identify 5 zero-day vulnerabilities, and 3 of them could be exposed
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484543
Swinburne University of Technology
Yang Xiang
Australia
only by Snipuzz. All the newly discovered vulnerabilities have been
confirmed by their vendors.
CCS CONCEPTS
• Security and privacy → Software and application security.
KEYWORDS
Fuzzing, IoT Firmware, Mutation, and Vulnerabilities
ACM Reference Format:
Xiaotao Feng, Ruoxi Sun, Xiaogang Zhu, Minhui Xue, Sheng Wen, Dongxi
Liu, Surya Nepal, and Yang Xiang. 2021. Snipuzz: Black-box Fuzzing of IoT
Firmware via Message Snippet Inference. In Proceedings of the 2021 ACM
SIGSAC Conference on Computer and Communications Security (CCS ’21),
November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3460120.3484543
1 INTRODUCTION
The Internet of Things (IoT) refers to the billions of physical de-
vices around the world which are now connected to the Internet, all
collecting and sharing data. As early as 2017, IoT devices have out-
numbered the world’s population [39], and by 2020, every person on
this planet has four IoT devices on average [23]. While these devices
enrich our lives and industries, unfortunately, they also introduce
blind spots and security risks in the form of vulnerabilities. We take
Mirai [25] as an example. Mirai is one of the most prominent types
of IoT botnet malware. In 2016, Mirai took down widely-used web-
sites in a distributed denial of service (DDoS) campaign consisting
of thousands of compromised household IoT devices. In the case
of Mirai, attackers exploited vulnerabilities to target IoT devices
themselves and then weaponized the devices for larger campaigns
or spreading malware to the network. In fact, attackers can also use
vulnerable devices for lateral movement, allowing them to reach crit-
ical targets. For example, in the work-from-home scenarios during
COVID-19, Trend Micro has reported that, introducing vulnerable
IoT devices to the household will expose employees to malware and
attacks that could slip into a company’s network [26]. Considering
the ubiquity of IoT devices, we believe that these known security
incidents and risky scenarios are nothing but a tip of the iceberg.
∗ Corresponding authors: Sheng Wen and Xiaogang Zhu
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea337IoT vulnerabilities are normally about the implementation flaws
within a device’s firmware. To launch new products as soon as
possible, developers always tend to use open-source components in
firmware development without good update plans [1]. This sacri-
fices the security of IoT devices and exposes them to vulnerabilities
that security teams cannot remedy quickly. Even if vendors plan to
fix the vulnerabilities in their products, the over-the-air patching is
usually infeasible because IoT devices do not have reliable network
connectivity [16]. As a result, half of the IoT devices in the market
were reported to have vulnerabilities [28].
It is hence crucial to discover such vulnerabilities and fix them
before an attacker does. However, most IoT software security tests
heavily rely on the assumption of device firmware availability.
In many cases, manufacturers tend not to release their product
firmware and that makes various dynamic analysis methods based
on code analysis [7, 13, 15, 18, 32, 46] (or emulation [8, 10, 20, 50, 51])
difficult. Among the existing defense techniques, fuzz testing has
shown promises to overcome these issues and has been widely
used as an efficient approach in finding vulnerabilities. Moreover,
the ability of IoT devices to communicate with the outside world
offers us a new option, and that is to test device firmware through
exchanging network messages. Therefore, an IoT fuzzer could be
designed to send random communication messages to the target de-
vice in order to detect if it shows any symptoms of malfunctioning.
Potential vulnerabilities could be exposed if crashes are triggered
during execution or the device is pushed to send back abnormal
messages.
However, using network communication to fuzz the firmware of
IoT devices is very challenging. Since obtaining internal execution
information from the device is not possible, most existing network
IoT fuzzers [9, 31, 44] work in a black-box manner. This makes opti-
mizing the mutation strategies very difficult. Because the selection
of mutated seeds is entirely random, existing black-box IoT fuzzing
approaches could become very hard to handle, and sometimes, even
become more like brute force crack testing. In addition, IoT devices
have strict grammatical specifications for inputs in communication.
Most of the messages that are generated by random mutation will
break the syntax rules of the input, and will be quickly rejected
during syntax validation in the firmware before being executed. A
grammar-based mutation strategy [2, 40] can effectively generate
messages that meet the input requirements though. This can be
done by learning the syntax via documented grammatical specifica-
tions or from a labeled training set. However, as shown in Table 1,
many non-standard IoT device communication formats are being
used in practice. Therefore, preparing enough learning materials
for grammar-based mutation strategies is a huge workload, which
makes the deployment of grammar-based IoT fuzzing difficult.
Challenges. In this paper, we focus on detecting vulnerabilities
in IoT firmware by sending messages to IoT devices. To design an
effective and efficient fuzzing method, several challenges have to
be overcome.
• Challenge 1: Lack of a feedback mechanism. Without access to
firmware, it is nearly impossible to obtain the internal execu-
tion information from IoT device to guide the fuzzing process
Table 1: Format requirements of IoT Devices.
# Device Type
Vendor
Model
Format
Smart Bulb
Smart Bulb
Smart Bulb
Smart Bulb
Smart Bulb
Smart Plug
Smart Plug
Smart Plug
Smart Plug
Smart Plug
Smart Plug
Smart Plug
Firmware
Version
1.4.2_0016
1.4.2_0016
1.46.13_r26312
v3.60
35.V7.63.7189-A
1935144040
1.12.2.8_9_fc4b603
1.5.2
1.5.2
2.00.1821
2.1.14
v3.1.3
us1.1.0
v57209
1.0.1.46
ZLM-FX1-3.0.23
1.125.14.0_34_1189
2.21.1.127
4.3.6.0959
v44057
YLDP05YL
YLDP13YL
A60
Mini C
BR30
Hue
Base Station
HS100
HS110
F7C027au
MSS310
B25AUS
Mini US
SP4L-AU
R6400
WL10
Alro Pro 2
F19821W
T-131P
RM mini 3
Yeelight
Yeelight
Philips
LIFX
FloodLight
Philips
Alro
Tplink
Tplink
Belkin WeMo
Meross
Orvibo
Konke
Broadlink
Netgear
ZKteco
Alro
Foscam
QNAP
JSON
JSON
JSON
Custom Byte
Custom Byte
JSON
JSON
JSON
JSON∗
SOAP
JSON∗
JSON
String
Custom Byte
SOAP∗
Custom Byte
JSON∗
JSON∗
Key-value pairs
Custom Byte
1
2
3
4
5
6 Home Bridge
7 Home Bridge
8
9
10
11
12
13
14
15 Router
16 TA Assistant
17 Camera
18 Camera
19 NAS
20 Universal Remote BroadLink
∗: have randomness in response.
(as is done in most typical fuzzers). Therefore, we need a light-
weight solution to obtain feedback from device, and optimize the
generation process.
• Challenge 2: Diverse message formats. Table 1 shows some message
formats that are used in IoT communication, including JSON,
SOAP, Key-value pairs, string, or even customized formats. In
order to be applied to various devices, a solution should be able
to infer the format from a raw message.
• Challenge 3: Randomness in responses. The response messages of
an IoT device may contain random elements, such as timestamps
or tokens. Such randomness results in different responses for
the same message, and diminishes the effectiveness of fuzzing
because the input generation of Snipuzz relies on responses.
Our approach. In this paper, we propose a novel and automatic
black-box IoT fuzzing, named Snipuzz, to detect vulnerabilities in
IoT firmware. Different from other existing IoT fuzzing approaches,
Snipuzz implements a snippet-based mutation strategy which uti-
lizes feedback from IoT devices to guide the fuzzing. Specifically,
Snipuzz uses a novel heuristic algorithm to detect the role of each
byte in the message. It will first mutate bytes in a message one by
one to generate probe messages, and categorize the correspond-
ing responses collected from device. Adjacent bytes that have the
same role in the message form the initial message snippets, which
is the basic unit of mutation. Moreover, Snipuzz utilizes a hier-
archical clustering strategy to optimize mutation strategies and
reduce the misclassification of categories caused by randomness
in the response messages and the firmware’s internal mechanism.
Therefore, Snipuzz, as a black-box fuzzer, can still effectively test
the firmware of IoT devices without the support of grammatical
rules and internal execution information of the device.
Snipuzz resolves Challenge 1 by using responses as the guid-
ance to optimize the fuzzing process. Based on the responses, Snipuzz
designs a novel heuristic algorithm to initially infer the role of each
byte in the message, which resolves Challenge 2. Snipuzz utilizes
edit distance [42] and agglomerative hierarchical clustering [43]
to resolve Challenge 3. We summarize our main contributions as
follows:
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea338• Message snippet inference mechanism. The responses from
IoT devices are related to code execution path in firmware. Based
on responses, we infer the relationship between message snip-