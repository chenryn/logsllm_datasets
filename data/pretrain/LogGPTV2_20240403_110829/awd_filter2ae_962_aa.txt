# 一次"线下awd"心得
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在参加比赛之前，团队大师傅为了让我们知道怎么打，特意给我们搭的环境，在经过了好多天的模拟之后，我也大致了解了awd该怎么去玩。
## 什么是awd
**AWD：Attack With
Defence，译为攻击与守护，是指在比赛中每个队伍维护一台或者多台服务器，服务器中有多个漏洞和一些预留后门，利用漏洞攻击其他队伍可以得分，而修复漏洞看主办方规定，可能加分也可能不加分。**
  * 服务器一般为web服务器，大多数为Linux操作系统，flag一般放在根目录下
  * flag会在规定时间进行一次刷新
  * 每个队伍都有一个自己的初始分数
  * 主办方会对每个队伍服务器进行check，服务器被判定宕机会扣除本轮flag分数
  * 一般会给队伍一个低权限用户，一般不会是直接给root权限，需要每个队伍去进行提权
## 比赛方式
一般比赛会是flag放在根目录，然后通过获取其他队伍的shell进行读取操作，得到flag。  
在比赛中，主办方可能会告诉你其他队伍的IP，也可能不说，一般在同一个B段或者C段，因此可以用nmap扫描工具发现其他队伍的IP。
    nmap -sn 192.168.171.0/24
## 比赛分工
awd模式一般分为三个人，一个人防御，两个人进攻。
## 赛前准备
首先，准备好各种的脚本，批量getflag脚本，批量提交flag脚本(没有这两个，你就需要去手动获得对方shell，然后读取flag，纯手工不仅手累，而且效率低)。然后就是各种的比如文件监控脚本，waf以及其他的一些防御脚本，此外还要准备各种马，一句话，不死马，变种马，冰蝎等等。不至于比赛中耗费时间去写。  
然后就是准备好自己的心态，不要发生心态爆炸的情况。  
最后就是队伍内分好工作，进行详细的沟通以及在测试联系时多沟通。
## 比赛过程
###  防守
把网站根目录文件备份下来，拖到D盾扫描预留后门，然后抓紧时间删除预留后门，然后可以把文件拖到seay中进行审计，逐步排除危险漏洞等文件内容。  
另外可以利用脚本进行防守。一般分为两种脚本：WAF和文件监控  
`WAF：`  
对于waf，GitHub上有许多种类版本的，可以视情况选择。具体使用：
  1. 将waf.php文件上传到要包含的文件目录
  2. 在页面中加入防护。  
可以在所需防护的页面源码中加入requtre_once(‘waf.php’);或者在网站的一个共用文件，例如config.inc.php中加入requtre_once(‘waf.php’);  
然后在这里贴上大师傅的  
常见PHP系统添加文件
> PHPCMS V9 \phpcms\base.php  
>  PHPWIND8.7 \data\sql_config.php  
>  DEDECMS5.7 \data\common.inc.php  
>  DiscuzX2 \config\config_global.php  
>  Wordpress \wp-config.php  
>  Metinfo \include\head.php
在php.ini中找到
    Automatically add files before or after any PHP document.
    auto_prepend_file = 360_safe3.php路径;
特别注意的是：在自己服务器上面挂waf可能会导致网页主页等一些功能显示异常，需要自己详细的考虑。  
`文件监控`  
对于文件监控脚本，GitHub上面也有很多，具体的功能就是会发现服务器新上传的文件并进行拦截，发现被修改的文件会立即修复，可以防止别人的上传shell攻击等。
    # -*- coding: utf-8 -*-    #use: python file_check.py ./
    import os
    import hashlib
    import shutil
    import ntpath
    import time
    CWD = os.getcwd()
    FILE_MD5_DICT = {}      # 文件MD5字典
    ORIGIN_FILE_LIST = []
    # 特殊文件路径字符串
    Special_path_str = 'drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82'
    bakstring = 'bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS'
    logstring = 'log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD'
    webshellstring = 'webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD'
    difffile = 'diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN'
    Special_string = 'drops_log'  # 免死金牌
    UNICODE_ENCODING = "utf-8"
    INVALID_UNICODE_CHAR_FORMAT = r"\?%02x"
    # 文件路径字典
    spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))
    Special_path = {
        'bak' : os.path.realpath(os.path.join(spec_base_path, bakstring)),
        'log' : os.path.realpath(os.path.join(spec_base_path, logstring)),
        'webshell' : os.path.realpath(os.path.join(spec_base_path, webshellstring)),
        'difffile' : os.path.realpath(os.path.join(spec_base_path, difffile)),
    }
    def isListLike(value):
        return isinstance(value, (list, tuple, set))
    # 获取Unicode编码
    def getUnicode(value, encoding=None, noneToNull=False):
        if noneToNull and value is None:
            return NULL
        if isListLike(value):
            value = list(getUnicode(_, encoding, noneToNull) for _ in value)
            return value
        if isinstance(value, unicode):
            return value
        elif isinstance(value, basestring):
            while True:
                try:
                    return unicode(value, encoding or UNICODE_ENCODING)
                except UnicodeDecodeError, ex:
                    try:
                        return unicode(value, UNICODE_ENCODING)
                    except:
                        value = value[:ex.start] + "".join(INVALID_UNICODE_CHAR_FORMAT % ord(_) for _ in value[ex.start:ex.end]) + value[ex.end:]
        else:
            try:
                return unicode(value)
            except UnicodeDecodeError:
                return unicode(str(value), errors="ignore")
    # 目录创建
    def mkdir_p(path):
        import errno
        try:
            os.makedirs(path)
        except OSError as exc:
            if exc.errno == errno.EEXIST and os.path.isdir(path):
                pass
            else: raise
    # 获取当前所有文件路径
    def getfilelist(cwd):
        filelist = []
        for root,subdirs, files in os.walk(cwd):
            for filepath in files:
                originalfile = os.path.join(root, filepath)
                if Special_path_str not in originalfile:
                    filelist.append(originalfile)
        return filelist
    # 计算机文件MD5值
    def calcMD5(filepath):
        try:
            with open(filepath,'rb') as f:
                md5obj = hashlib.md5()
                md5obj.update(f.read())
                hash = md5obj.hexdigest()
                return hash
        except Exception, e:
            print u'[!] getmd5_error : ' + getUnicode(filepath)
            print getUnicode(e)
            try:
                ORIGIN_FILE_LIST.remove(filepath)
                FILE_MD5_DICT.pop(filepath, None)
            except KeyError, e:
                pass
    # 获取所有文件MD5
    def getfilemd5dict(filelist = []):
        filemd5dict = {}
        for ori_file in filelist:
            if Special_path_str not in ori_file:
                md5 = calcMD5(os.path.realpath(ori_file))
                if md5:
                    filemd5dict[ori_file] = md5
        return filemd5dict
    # 备份所有文件
    def backup_file(filelist=[]):
        # if len(os.listdir(Special_path['bak'])) == 0:
        for filepath in filelist: