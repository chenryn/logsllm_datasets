=
= hv(0)+w(0)·m = hx+y·m
h(yili)·m
h(xili)
t(cid:89)i=1
Before veriﬁcation, the veriﬁer collects and aggregates the
veriﬁcations keys of the authorities—this process happens only
once and ahead of time. The algorithms ProveCred and
VerifyCred implement veriﬁcation. First, the users randomize
the credentials by picking a random r(cid:48)
∈ Fp and computing
σ(cid:48) = (h(cid:48), s(cid:48)) = (hr
); then, they compute κ and ν from
the attribute m, a blinding factor r ∈ Fp and the aggregated
veriﬁcation key:
, sr
(cid:48)
(cid:48)
κ = αβmgr
2
and
(cid:48)
ν = (h
)r
3If an adversary A can obtain two credentials σ0 and σ1 on respectively
m0 = 0 and m1 = 1 with the same value h as follows: σ0 =
hx and σ1 = hx+y; then A could forge a new credential σ2 on m2 = 2:
σ2 = (σ0)−1σ1σ1 = hx+2y.
Fig. 2: Coconut threshold credentials protocol exchanges.
Finally, they send Θ = (κ, ν, σ(cid:48), πv) and φ(cid:48) to the veriﬁer
where πv is a zero-knowledge proof asserting the correctness
of κ and ν; and that
the private attribute m embedded
into σ satisﬁes the application-speciﬁc predicate φ(cid:48) (). The
proof πv also ensures that the users actually know m and
that κ has been built using the correct veriﬁcation keys
and blinding factors. The pairing veriﬁcation is similar to