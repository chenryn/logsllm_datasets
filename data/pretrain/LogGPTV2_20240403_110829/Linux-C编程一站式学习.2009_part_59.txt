，使用fgets/fputs 函数时在用户程序中也需要分配缓冲
最终由内核驱动磁盘或设备完成I/O操作。C标准库为
"%d/%d/%d'
另一方面，
而这些库函数要通过系统调用把读写请求传给内核
，C标准库之所以会从内核预读一
，通过文件的FILE结构体可以找到这个缓冲
line);
 C标准库的I/O缓冲区也在用户空间，
只有少数时候需要把读写请求传给内
一个字节时，
 monthname,
，、fputc就通过系统调用把I/O缓冲
，fgetc函数可能通过系统调用
&year） == 3)
把读写位置指
而不需要进内核
一些数据放
==
3)
直接
最
L
---
## Page 477
过_exit系统调用进入内核退出当前进程[35]。
我们知道main函数被启动代码这样调用：
hello world被打印到屏幕上，后面直接跟Shell提示符，中间没有换行。
的while(1);语句再试一次:
运行这个程序，
下面通过一个简单的例子证明标准输出对应终端设备时是行缓冲的。
无缓冲
行缓冲
不同类型的缓冲区具有不同的特性。
C标准库的I/O缓冲区有三种类型：全缓冲、行缓冲和无缓冲。当用户程序调用库函数做写操作时，
全缓冲
如果用户程序写的数据中有换行符就把这一行写回内核，
如果缓冲区写满了就写回内核。常规文件通常是全缓冲的。
的，这样用户程序产生的错误信息可以尽快输出到设备。
用户程序每次调库函数做写操作都要通过系统调用写回内核。标准错误输出通常是无缓冲
核。标准输入和标准输出对应终端设备时通常是行缓冲的。
buf2
buf1
-S
int main()
#include 
fgets(buf2,n,fp);l
fputs(buf1,fp);
world$
 会发现helloworla并没有打印到屏幕上。用Ctrl-C终止它，去掉程序中
用户程序
return 0;
while(i);
printf("hello world");
l/O buffer
C标准/O库
exit(main(argc,
↑
flush
内核
，或者如果缓冲区写满了就写回内
磁盘
---
## Page 478
对前面的例子再稍加改动：
如果用户程序不想完全依赖于自动的Flush操作，可以调fflush函数手动做Flush操作。
虽然调用printf并不会把字符串写到设备，
那么在读取之前会自动Flush所有行缓冲。例如：
除了写满缓冲区、写入换行符之外，行缓冲还有两种情况会自动做Flush操作。如果:
结果也不会把字符串打印到屏幕上，如果把_exit调用改成exit就可以打印到屏幕上。
我们再做个实验，在程序中直接调用_exit退出。
入），在读取之前会自动Flush所有行缓冲，
时就写到终端设备。
印到屏幕上。如果把打印语句改成printf（"helloworld\n");
在上面的例子中，
·或者从行缓冲的文件中读取，并且这次读操作会引发系统调用从内核读取数据
，进程是异常终止的，并没有调用exit，也就没有机会Flush I/O缓冲区，
·用户程序调用库函数从无缓冲的文件中读取
，所以只把字符串写到标准输出的I/O缓冲区中而没有写回内核（写到终端设备)
int main()
#include 
#include  
int main()
#include
#include 
int main()
#include 
printf
char buf[20］;
return 0;
printf("hello world");
exit(0);
由于标准输出是行缓冲的，
:(uTp+s 
，但紧接着调用fgets读一个行缓冲的文件（标准输
，包括标准输出。
printf("helloworld");打印的字符串中没有换行
因为程序退出时会调用exitFlush所有I/O缓冲
有换行符，
，因此字符串最终没有打
 就会立刻写到终端设
如果敲Ctrl-
---
## Page 479
统中Qt程序通常也采用这种格式的配置文件。比如：
2、INI文件是一种很常见的配置文件,
获取当前的系统时间需要调用time(2)函数，返回的结果是一个time_t类型，其实就是一个大整
每次系统启动时acpia进程就以追加方式打开这个文件，当有事件发生时就追加一条记录，包括事
件发生的时刻以及事件描述信息。
这类似于很多系统服务维护的日志文件，
序号能够接续上次的序号，比如：
该程序应该无限循环，
1、编程读写一个文件test.txt，
2.11.本节综合练习请点评
日时分秒，
时间（我们是+8区，
数
用fflush(NULL)可以对所有打开文件的I/O缓冲区做Flush操作。
串。fflush函数用于确保数据写回了内核,
虽然字符串中没有换行，
，其值表示从UTC（CoordinatedUniversal Time）时间1970年1月1日00:00:00（称为UNIX系统
;Configuration of db
port=8080
domain=www.mysite.com
[http]
;Configuration of http
S
12
S
具体用法请查阅Man Page。
un
cat 
2
2
2
2009-
009-
2009-
2009-7.
00
Oct
Oct
oct
6
/var/
1
7-30
while(i);
printf("hello world");
7-30
30
3
30
比UTC多8个小时）并转成structtm类型，
6
0
18:54:39
15:18:43 
 直到按Ctrl-C终止。
15:16:4
15:16:42
10:11:53
但用户程序调用fflush强制写回内核，
/acpi
样：
19:03
9p
3
.................
 每隔1秒向文件中写入一行记录，类似于这样:
2008j
2008]
很多Windows程序都采用这种格式的配置文件，在Linux系
。调用sleep(3)函数可以指定程序睡眠多少秒。
starting up
exiting
 logfile reopened
例如在我的机器上系统服务进程acpid维护一个日志文
下次再启动程序时在test.txt文件末尾追加记录，
以免进程异常终止时丢失数据。作为一个特例，
，该类型的各数据成员分别表示年月
 因此也能在屏幕上打印出字符
.................
调
，并且
---
## Page 480
符的模式，默认是一次一行的模式（本书的实验都是在这种模式下做的），关于终端的配置可参
[34] 这些特性取决于终端的工作模式，
的目录以及系统目录/usr/include中查找。
下第2.2节“头文件"讲过的头文件查找顺序，本题目不必考虑-1选项指定的目录，只在.c文件所在
如果有的头文件找不到，
你的程序读取这个文件，打印出其中包含的所有头文件的绝对路径：
换
现在XML兴起了，
零个或多个空白字符（空格或Tab）的行。INI文件的最后一行后面可能有换行符也可能没有。
每个键值对占一行。
=value形式的键值对（Key-value Pair）
后应该变成这样：
一个配置文件由若干个Section组成，
实现类似gcc的-m选项的功能，
int main()
#include
#include
/home/akaedu/stack.h: cannot find
/usr/include/linux/errno.h
/usr/include/errno.h
S
password
user
server = mysql
[database] 
/usr/include/bits/errno.h
./a.out main.c
 Configuration of http -->
myname
return 0;
toopendatabase
mysql
/cgi-bin
8080www.mysite.com
、INI文件显得有点土。现在要求编程把INI文件转换成XML文件。上面的例子经转
"stack.h"
 = toopendatabase
以;号开头的行是注释。每个Section结束时有一个或多个空行,
port
给定-
，由□括号括起来的是Section名。每个Section下面有若干个key
，终端可以配置成一次一行的模式，
一个.c文件，列出它直接和间接包含的所有头文件，例如有
等号两边可以有零个或多个空白字符（空格或Tab）
，也可以配置成一次一个字
空行是仅包含
480
---
## Page 481
1.字符串操作函数
细介绍，
考[APUE2e]
一页
，读者可参考[APUE2e]。
全国嵌入式人才培训基地
起始页
3.数值字符串转换函数
8
---
## Page 482
strtol是atoi的增强版，
若干空格，例如atoi（"
atoi把一个字符串开头可以识别成十进制整数的部分转换成int型，
3.数值字符串转换函数 请点评
回NULL，
情况，而strtod可以。
如atof("31.4")的返回值是31.4，atof("3.14e+1AB")的返回值也是31.4。atof也不能检查出错的
atof把一个字符串开头可以识别成浮点数的部分转换成double型，
况
用atoi函数不能检查出错的情况。
如atoi("asdf"),
上一页
·如果字符串中的整数值超出long int的表示范围（上溢或下溢），
·endptr是一个传出参数，
·不仅可以识别十进制整数，
，在严格的场合下应该用strtol，
回Ox7ffff并设置erno为ERAANGE。
回0，pos指向字符串开头，可以据此判断这种出错的情况，而这是atoi处理不了的。
头没有可识别的整数，
strtol("123abc",
回0777的值。
因此我们知道需要读errno，
long int strtol(const char *nptr,
#include 
返
double
int atoi(const char *nptr);
#include 
则返回0，
，主要体现在这几方面:
-90.6-")的返回值是-90。如果字符串开头没有可识别的整数，
'sodx
，函数返回时指向后面未被识别的第一个字符。
，还可以识别其它进制的整数，
下面要讲的strtol函数可以设置errno，因此可以检查出错的情
，而atoi用起来更简便，
，但strto1在成功调用时也可能返回0x7fff，我们如何知道需
3.数值字符串转换函数
*nptr, char
全国嵌入式人才培训基地
第25章C标准库
. char **endptr, int base);
== NULL）
--..-..-..--.-..-..-..----..-..-..--.-..-..-..----..-..-..--.-..--
**endptr);
 根据返回值并不能区分这两种情况，
，所以也很常用。
{读取errno}
，取决于base参数，比
，相当于下面要讲的strtod(nptr,
，相当于下面要讲 
，则strto1返回它所能表示
，fopen在出错时会返
则strtol返
 例 
例
所以使
482
---
## Page 483
strtod是atof 的增强版，增强的功能和strtol类似。
要读errno呢？最严谨的做法是首先把errno置0，再调用strtol，再查看errno是否变成了错误
2.标准I/O库函数
二页
例25.10.strtol的出错处理
%s\n"， endptr);
error...
number
LONG_MIN）)
after call
argv[0]);
int main(int argc,
#include 
#include
#include
exit(EXIT_SUCCESS);
printf("strtol(） returned %ld\n", val);
if
if (argc 
(*endptr != '\o')
 If we got here, strtol() successfully parsed a
(endptr == str) 
((errno == ERANGE && (val == LONG_MAX ll val ==
 Check for various possible errors */
 val;
 strtol(str,
*endptr, *str;
 printf("Further characters after number:
(errno != 0 && val == 0)) { 
exit(EXIT_FAILURE);
fprintf(stderr,
exit(EXIT_FAILURE);
exit(EXIT_FAILURE）;
fprintf(stderr,
 char *argv[])
/* To distinguish success/failure
 &endptr, base);
起始页
上一级
"Usage: %s str [base]\n",
"No digits were found\n");
4.分配内存的函数
483
---
## Page 485
空间，类似于C99的变长数组,
有时候用malloc或calloc分配的内存空间使用了一段时间之后需要改变它的大小,
且calloc负责把这块内存空间用字节0填充，而malloc并不负责把分配的内存空间清零。
calloc的参数很像fread/fwrite的参数，分配nmemb个元素的内存空间，
4.分配内存的函数 请点评
3.数值字符串转换函数
属于C标准库，
参数size是请求分配的字节数，
为两个特例，
断，
数size指定新的大小（字节数）
内存空间。使用realloc函数简化了这些步骤，
用malloc分配一块新的内存空间，
由free释放。
除了malloc之外，
（realloc不负责清零）。注意,
间中的数据尽量和原来保持一致，
上一页
，如果size比原来大，
返回值：返回所分配内存空间的首地址，如果size太大导致栈空间耗尽，结果是未定义的
void *alloca(size_t size)i.
返回值：成功返回所分配内存空间的首地址，
#include 
void
void *calloc(size_t nmemb, 
#include 
而是在POSIX标准中定义的。
，C标准库还提供了另外两个在堆空间分配内存的函数，它们分配的内存同样
 则原来的数据全部保留，
当调用者函数返回时自动释放栈帧，所以不需要free。这个函数不
参数ptr要么是NULL，
*ptr
把原内存空间中的数据拷到新的内存空间，然后调用free释放原
 如果size比原来小，
全国嵌入式人才培训基地
全国嵌入式人才培训基地
 size_t size);
4.分配内存的函数
第25章C标准库
起始页
上一级
，出错返回NULL
，后面长出来的一块内存空间未初始化
要么必须是先前调
第 26章链表、二叉树和哈希表
 并释放原内存空间。新内存
，每个元素占size字节，并
后面的数据被截
一种办法是调
下一
---
## Page 486
4.分配内存的函数