declarations
declarations are variable, cursor, type, or subprogram declarations. If
subprogram declarations are included, they must be declared after all other
variable, cursor, and type declarations.
statements
statements are SPL program statements (the BEGIN - END block may contain
an EXCEPTION section).
IMMUTABLE
STABLE
VOLATILE
These attributes inform the query optimizer about the behavior of the function;
you can specify only one choice. VOLATILE is the default behavior.
IMMUTABLE indicates that the function cannot modify the database and always
reaches the same result when given the same argument values; it does not do
database lookups or otherwise use information not directly present in its argument
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 140
Database Compatibility for Oracle® Developers Guide
list. If you include this clause, any call of the function with all-constant
arguments can be immediately replaced with the function value.
STABLE indicates that the function cannot modify the database, and that within a
single table scan, it will consistently return the same result for the same argument
values, but that its result could change across SQL statements. This is the
appropriate selection for function that depend on database lookups, parameter
variables (such as the current time zone), etc.
VOLATILE indicates that the function value can change even within a single table
scan, so no optimizations can be made. Please note that any function that has
side-effects must be classified volatile, even if its result is quite predictable, to
prevent calls from being optimized away.
DETERMINISTIC
DETERMINISTIC is a synonym for IMMUTABLE. A DETERMINISTIC function
cannot modify the database and always reaches the same result when given the
same argument values; it does not do database lookups or otherwise use
information not directly present in its argument list. If you include this clause,
any call of the function with all-constant arguments can be immediately replaced
with the function value.
[ NOT ] LEAKPROOF
A LEAKPROOF function has no side effects, and reveals no information about the
values used to call the function.
CALLED ON NULL INPUT
RETURNS NULL ON NULL INPUT
STRICT
CALLED ON NULL INPUT (the default) indicates that the procedure will be called
normally when some of its arguments are NULL. It is the author's responsibility to
check for NULL values if necessary and respond appropriately.
RETURNS NULL ON NULL INPUT or STRICT indicates that the procedure always
returns NULL whenever any of its arguments are NULL. If these clauses are
specified, the procedure is not executed when there are NULL arguments; instead a
NULL result is assumed automatically.
[ EXTERNAL ] SECURITY DEFINER
SECURITY DEFINER specifies that the function will execute with the privileges of
the user that created it; this is the default. The key word EXTERNAL is allowed for
SQL conformance, but is optional.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 141
Database Compatibility for Oracle® Developers Guide
[ EXTERNAL ] SECURITY INVOKER
The SECURITY INVOKER clause indicates that the function will execute with the
privileges of the user that calls it. The key word EXTERNAL is allowed for SQL
conformance, but is optional.
AUTHID DEFINER
AUTHID CURRENT_USER
The AUTHID DEFINER clause is a synonym for [EXTERNAL] SECURITY
DEFINER. If the AUTHID clause is omitted or if AUTHID DEFINER is specified,
the rights of the function owner are used to determine access privileges to
database objects.
The AUTHID CURRENT_USER clause is a synonym for [EXTERNAL] SECURITY
INVOKER. If AUTHID CURRENT_USER is specified, the rights of the current user
executing the function are used to determine access privileges.
PARALLEL { UNSAFE | RESTRICTED | SAFE }
The PARALLEL clause enables the use of parallel sequential scans (parallel mode).
A parallel sequential scan uses multiple workers to scan a relation in parallel
during a query in contrast to a serial sequential scan.
When set to UNSAFE, the function cannot be executed in parallel mode. The
presence of such a function in a SQL statement forces a serial execution plan.
This is the default setting if the PARALLEL clause is omitted.
When set to RESTRICTED, the function can be executed in parallel mode, but the
execution is restricted to the parallel group leader. If the qualification for any
particular relation has anything that is parallel restricted, that relation won't be
chosen for parallelism.
When set to SAFE, the function can be executed in parallel mode with no
restriction.
COST execution_cost
execution_cost is a positive number giving the estimated execution cost for
the function, in units of cpu_operator_cost. If the function returns a set, this
is the cost per returned row. Larger values cause the planner to try to avoid
evaluating the function more often than necessary.
ROWS result_rows
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 142
Database Compatibility for Oracle® Developers Guide
result_rows is a positive number giving the estimated number of rows that the
planner should expect the function to return. This is only allowed when the
function is declared to return a set. The default assumption is 1000 rows.
SET configuration_parameter { TO value | = value | FROM CURRENT }
The SET clause causes the specified configuration parameter to be set to the
specified value when the function is entered, and then restored to its prior value
when the function exits. SET FROM CURRENT saves the session's current value of
the parameter as the value to be applied when the function is entered.
If a SET clause is attached to a function, then the effects of a SET LOCAL
command executed inside the function for the same variable are restricted to the
function; the configuration parameter's prior value is restored at function exit. An
ordinary SET command (without LOCAL) overrides the SET clause, much as it
would do for a previous SET LOCAL command, with the effects of such a
command persisting after procedure exit, unless the current transaction is rolled
back.
PRAGMA AUTONOMOUS_TRANSACTION
PRAGMA AUTONOMOUS_TRANSACTION is the directive that sets the function as an
autonomous transaction.
Please Note: The STRICT, LEAKPROOF, PARALLEL, COST, ROWS and SET keywords
provide extended functionality for Advanced Server and are not supported by Oracle.
Examples
The following is an example of a simple function that takes no parameters.
CREATE OR REPLACE FUNCTION simple_function
RETURN VARCHAR2
IS
BEGIN
RETURN 'That''s All Folks!';
END simple_function;
The following function takes two input parameters. Parameters are discussed in more
detail in subsequent sections.
CREATE OR REPLACE FUNCTION emp_comp (
p_sal NUMBER,
p_comm NUMBER
) RETURN NUMBER
IS
BEGIN
RETURN (p_sal + NVL(p_comm, 0)) * 24;
END emp_comp;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 143
Database Compatibility for Oracle® Developers Guide
The following example demonstrates using the AUTHID CURRENT_USER clause and
STRICT keyword in a function declaration:
CREATE OR REPLACE FUNCTION dept_salaries(dept_id int) RETURN NUMBER
STRICT
AUTHID CURRENT_USER
BEGIN
RETURN QUERY (SELECT sum(salary) FROM emp WHERE deptno = id);
END;
Include the STRICT keyword to instruct the server to return NULL if any input parameter
passed is NULL; if a NULL value is passed, the function will not execute.
The dept_salaries function executes with the privileges of the role that is calling the
function. If the current user does not have sufficient privileges to perform the SELECT
statement querying the emp table (to display employee salaries), the function will report
an error. To instruct the server to use the privileges associated with the role that defined
the function, replace the AUTHID CURRENT_USER clause with the AUTHID DEFINER
clause.
3.2.4.2 Calling a Function
A function can be used anywhere an expression can appear within an SPL statement. A
function is invoked by simply specifying its name followed by its parameters enclosed in
parenthesis, if any.
name [ ([ parameters ]) ]
name is the name of the function. parameters is a list of actual parameters.
Note: If there are no actual parameters to be passed, the function may be called with an
empty parameter list, or the opening and closing parenthesis may be omitted entirely.
The following shows how the function can be called from another SPL program.
BEGIN
DBMS_OUTPUT.PUT_LINE(simple_function);
END;
That's All Folks!
A function is typically used within a SQL statement as shown in the following.
SELECT empno "EMPNO", ename "ENAME", sal "SAL", comm "COMM",
emp_comp(sal, comm) "YEARLY COMPENSATION" FROM emp;
EMPNO | ENAME | SAL | COMM | YEARLY COMPENSATION
-------+--------+---------+---------+---------------------
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 144
Database Compatibility for Oracle® Developers Guide
7369 | SMITH | 800.00 | | 19200.00
7499 | ALLEN | 1600.00 | 300.00 | 45600.00
7521 | WARD | 1250.00 | 500.00 | 42000.00
7566 | JONES | 2975.00 | | 71400.00
7654 | MARTIN | 1250.00 | 1400.00 | 63600.00
7698 | BLAKE | 2850.00 | | 68400.00
7782 | CLARK | 2450.00 | | 58800.00
7788 | SCOTT | 3000.00 | | 72000.00
7839 | KING | 5000.00 | | 120000.00
7844 | TURNER | 1500.00 | 0.00 | 36000.00
7876 | ADAMS | 1100.00 | | 26400.00
7900 | JAMES | 950.00 | | 22800.00
7902 | FORD | 3000.00 | | 72000.00
7934 | MILLER | 1300.00 | | 31200.00
(14 rows)
3.2.4.3 Deleting a Function
A function can be deleted from the database using the DROP FUNCTION command.
DROP FUNCTION [ IF EXISTS ] name [ (parameters) ]
[ CASCADE | RESTRICT ];
Where name is the name of the function to be dropped.
Note: The specification of the parameter list is required in Advanced Server under certain
circumstances such as if this is an overloaded function. Oracle requires that the parameter
list always be omitted.
Note: Usage of IF EXISTS, CASCADE, or RESTRICT is not compatible with Oracle
databases. See the DROP FUNCTION command in the Database Compatibility for Oracle
Developers Reference Guide for information on these options.
The previously created function is dropped in this example:
DROP FUNCTION simple_function;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 145
Database Compatibility for Oracle® Developers Guide
3.2.5 Procedure and Function Parameters
An important aspect of using procedures and functions is the capability to pass data from
the calling program to the procedure or function and to receive data back from the
procedure or function. This is accomplished by using parameters.
Parameters are declared in the procedure or function definition, enclosed within
parenthesis following the procedure or function name. Parameters declared in the
procedure or function definition are known as formal parameters. When the procedure or
function is invoked, the calling program supplies the actual data that is to be used in the
called program’s processing as well as the variables that are to receive the results of the
called program’s processing. The data and variables supplied by the calling program
when the procedure or function is called are referred to as the actual parameters.
The following is the general format of a formal parameter declaration.
(name [ IN | OUT | IN OUT ] data_type [ DEFAULT value ])
name is an identifier assigned to the formal parameter. If specified, IN defines the
parameter for receiving input data into the procedure or function. An IN parameter can
also be initialized to a default value. If specified, OUT defines the parameter for returning
data from the procedure or function. If specified, IN OUT allows the parameter to be used
for both input and output. If all of IN, OUT, and IN OUT are omitted, then the parameter
acts as if it were defined as IN by default. Whether a parameter is IN, OUT, or IN OUT is
referred to as the parameter’s mode. data_type defines the data type of the parameter.
value is a default value assigned to an IN parameter in the called program if an actual
parameter is not specified in the call.
The following is an example of a procedure that takes parameters:
CREATE OR REPLACE PROCEDURE emp_query (
p_deptno IN NUMBER,
p_empno IN OUT NUMBER,
p_ename IN OUT VARCHAR2,
p_job OUT VARCHAR2,
p_hiredate OUT DATE,
p_sal OUT NUMBER
)
IS
BEGIN
SELECT empno, ename, job, hiredate, sal
INTO p_empno, p_ename, p_job, p_hiredate, p_sal
FROM emp
WHERE deptno = p_deptno
AND (empno = p_empno
OR ename = UPPER(p_ename));
END;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 146
Database Compatibility for Oracle® Developers Guide
In this example, p_deptno is an IN formal parameter, p_empno and p_ename are IN
OUT formal parameters, and p_job, p_hiredate, and p_sal are OUT formal
parameters.
Note: In the previous example, no maximum length was specified on the VARCHAR2
parameters and no precision and scale were specified on the NUMBER parameters. It is
illegal to specify a length, precision, scale or other constraints on parameter declarations.
These constraints are automatically inherited from the actual parameters that are used
when the procedure or function is called.
The emp_query procedure can be called by another program, passing it the actual
parameters. The following is an example of another SPL program that calls emp_query.
DECLARE
v_deptno NUMBER(2);
v_empno NUMBER(4);
v_ename VARCHAR2(10);
v_job VARCHAR2(9);
v_hiredate DATE;
v_sal NUMBER;
BEGIN
v_deptno := 30;
v_empno := 7900;
v_ename := '';
emp_query(v_deptno, v_empno, v_ename, v_job, v_hiredate, v_sal);
DBMS_OUTPUT.PUT_LINE('Department : ' || v_deptno);
DBMS_OUTPUT.PUT_LINE('Employee No: ' || v_empno);
DBMS_OUTPUT.PUT_LINE('Name : ' || v_ename);
DBMS_OUTPUT.PUT_LINE('Job : ' || v_job);
DBMS_OUTPUT.PUT_LINE('Hire Date : ' || v_hiredate);
DBMS_OUTPUT.PUT_LINE('Salary : ' || v_sal);
END;
In this example, v_deptno, v_empno, v_ename, v_job, v_hiredate, and v_sal are
the actual parameters.
The output from the preceding example is shown as follows:
Department : 30
Employee No: 7900
Name : JAMES
Job : CLERK
Hire Date : 03-DEC-81
Salary : 950
3.2.5.1 Positional vs. Named Parameter Notation
You can use either positional or named parameter notation when passing parameters to a
function or procedure. If you specify parameters using positional notation, you must list
the parameters in the order that they are declared; if you specify parameters with named
notation, the order of the parameters is not significant.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 147
Database Compatibility for Oracle® Developers Guide
To specify parameters using named notation, list the name of each parameter followed by
an arrow (=>) and the parameter value. Named notation is more verbose, but makes your
code easier to read and maintain.
A simple example that demonstrates using positional and named parameter notation
follows:
CREATE OR REPLACE PROCEDURE emp_info (
p_deptno IN NUMBER,
p_empno IN OUT NUMBER,
p_ename IN OUT VARCHAR2,
)
IS
BEGIN
dbms_output.put_line('Department Number =' || p_deptno);
dbms_output.put_line('Employee Number =' || p_empno);
dbms_output.put_line('Employee Name =' || p_ename;
END;
To call the procedure using positional notation, pass the following:
emp_info(30, 7455, 'Clark');
To call the procedure using named notation, pass the following:
emp_info(p_ename =>'Clark', p_empno=>7455, p_deptno=>30);
Using named notation can alleviate the need to re-arrange a procedure’s parameter list if
the parameter list changes, if the parameters are reordered or if a new optional parameter
is added.
In a case where you have a default value for an argument and the argument is not a
trailing argument, you must use named notation to call the procedure or function. The
following case demonstrates a procedure with two, leading, default arguments.
CREATE OR REPLACE PROCEDURE check_balance (
p_customerID IN NUMBER DEFAULT NULL,
p_balance IN NUMBER DEFAULT NULL,
p_amount IN NUMBER
)
IS
DECLARE
balance NUMBER;
BEGIN
IF (p_balance IS NULL AND p_customerID IS NULL) THEN
RAISE_APPLICATION_ERROR
(-20010, 'Must provide balance or customer');
ELSEIF (p_balance IS NOT NULL AND p_customerID IS NOT NULL) THEN
RAISE_APPLICATION_ERROR
(-20020,'Must provide balance or customer, not both');
ELSEIF (p_balance IS NULL) THEN
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 148
Database Compatibility for Oracle® Developers Guide
balance := getCustomerBalance(p_customerID);
ELSE
balance := p_balance;
END IF;
IF (amount > balance) THEN
RAISE_APPLICATION_ERROR
(-20030, 'Balance insufficient');
END IF;
END;
You can only omit non-trailing argument values (when you call this procedure) by using
named notation; when using positional notation, only trailing arguments are allowed to
default. You can call this procedure with the following arguments:
check_balance(p_customerID => 10, p_amount = 500.00)
check_balance(p_balance => 1000.00, p_amount = 500.00)
You can use a combination of positional and named notation (mixed notation) to specify
parameters. A simple example that demonstrates using mixed parameter notation
follows:
CREATE OR REPLACE PROCEDURE emp_info (
p_deptno IN NUMBER,
p_empno IN OUT NUMBER,
p_ename IN OUT VARCHAR2,
)