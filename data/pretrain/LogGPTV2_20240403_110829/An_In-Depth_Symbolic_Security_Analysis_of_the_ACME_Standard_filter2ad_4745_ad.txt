### Verification Time and Ambiguities in the ACME RFC

Each module in the ACME protocol is verified separately, with an average verification time of less than 1.5 minutes per module.

One notable ambiguity in the ACME RFC is that it does not explicitly state that all steps within a single ACME flow must be performed using the same account. Specifically, the standard should require the server to verify that all client requests are signed with the same key throughout the flow. Although this requirement is implicit, it is not clearly stated, which can lead developers to overlook this critical check when implementing the protocol.

### Subtle Flaws in Real-World Protocols

Real-world protocols, including ACME, often contain subtle flaws that can stem from both logical errors and low-level ambiguities. These include issues such as state management [54], control flow decisions [9], insufficient checks [29], and incomplete or ambiguous data structures [30, 51, 52]. For critical protocols like ACME, which impact the security of the entire Internet infrastructure, it is essential to conduct a thorough analysis. This involves rigorously following the specification and clarifying any potential ambiguities. Such an approach ensures strong and meaningful security guarantees, and our modeling/implementation artifact can serve as a reference alongside the standard itself, guiding programmers effectively.

### Implementation of ACME in F★

We modeled ACME clients and servers using F★ programs built on top of DY★'s labeled security API. Our model supports an unbounded number of principals, each of which can own multiple domains and can act as a client, server, or both. The model covers most of the ACME standard, including all steps for ordering, verifying, issuing, and retrieving certificates, as well as detailed specifications of relevant data structures. Additionally, it includes the semantics of underlying protocols like HTTP requests and responses, including headers and ACME's special POST-as-GET requests. The comprehensive model consists of approximately 5,500 lines of functional F★ code, excluding the DY★ framework, comments, white space, and lemmas and proofs for security properties (see Table 1). For further coverage details, refer to Appendix C, where we map sections of the ACME specification [5] to F★ modules in our model.

#### Modeling Decisions

To simplify analysis, our model omits certain security mechanisms required by ACME, thus safely over-approximating them. We do not use TLS, meaning ACME messages are exchanged unprotected (without confidentiality or integrity) over the network. The only exception is the verification response (Step 16 in Figure 2), which is sent over an authenticated channel, aligning with the key assumption in the ACME standard (Section 4.1). Our modeled server also does not enforce ACME's replay protection mechanism (DoS protection), which, as our analysis shows, is not necessary for ACME's central security properties. In cases of verification mismatches, our implementation aborts the local execution of the respective protocol step without updating the state machine, allowing the protocol flow to continue and providing more options for the adversary. We also do not model the expiration of ACME orders, authorizations, and challenges.

### Application-Specific Data Structures

Our model closely follows the ACME specification, including real-world message formats. For example, we capture the ACME server directing the client to URLs for subsequent steps, which can potentially lead the client to interact with an unintended ACME server. To avoid cumbersome byte-level modeling, we define ACME-specific high-level data structures as F★ record types and implement functions to convert these high-level data structures to bytes and back. Using F★'s theorem prover, we prove that these conversion functions are inverses of each other (see Appendix A for a full example). This approach provides several benefits: it avoids modeling errors related to inconsistent message serialization and parsing, and it makes writing and comparing the model against the standard much easier. This modeling approach is generally useful for protocols with complex messages.

For instance, here is our high-level data structure for an ACME order, compared with its specification in the standard:

```fsharp
type acme_order = {
    status: option (acme_status { s = Pending || s = Ready || s = Processing || s = Valid || s = Invalid });
    identifiers: doms: (Seq.seq domain) { Seq.length doms > 0 };
    authorizations: option (Seq.seq url);
    finalize: option url;
    certificate: option url
}
```

This defines an F★ record type `acme_order` with five fields. For example, the `identifiers` field holds a value of type `Seq.seq domain`, representing an unbounded sequence of domains, with an additional refinement stating that the sequence cannot be empty. Comparing this type definition with the excerpt from Section 7.1.3 of the ACME specification [5], it is clear that our model closely matches the specification.

### ACME Client & Server APIs

The core of our ACME model is a set of APIs implementing the ACME protocol steps on both the client and server sides. These functions use the DYL effect provided by DY★, allowing us to utilize DY★'s labeled application API for sending and receiving messages. Here is an example function, `acme_server_new_order_nw`, which places a new order on the server side:

```fsharp
val acme_server_new_order_nw:
    acme_server_principal: principal →
    msg_idx: nat →
    DYL nat
(requires (λ t0 → ⊤))
(ensures (λ t0 result t1 → ⊤))
```

This function takes the name of a server principal and an index (`msg_idx`) in the global trace, where it expects to find an HTTP request containing an ACME new order message. It either returns an error (e.g., if the input message is malformed) or adds an HTTP response to the trace and returns an index to this message.

### Functional Tests and Attacks

To test the functional correctness of our ACME model, we use DY★'s symbolic debugging capabilities. We implement several scheduling functions to model different runs of ACME, allowing us to:

1. Empirically verify that our models for ACME clients and servers are functionally correct.
2. Print and inspect the resulting symbolic traces produced by these protocol runs.
3. Check whether protocol steps fail as expected with a faulty/malicious scheduler, i.e., an attacker.

These tests increase confidence in the functional correctness of our model. For example, we found and fixed an error in our server model that prevented it from accepting valid requests. We also used our test framework to simulate attacks based on known implementation flaws, such as the Boulder flaw [35].

### Modeling Limitations

While our ACME model is comprehensive, there are some limitations:

1. We focused on the ACME protocol and omitted certification authority aspects, such as certificate revocation and account creation.
2. The ACME specification only specifies DNS identifiers (domains) but allows extensions for other identifier types, which we did not include.
3. We did not model the optional pre-authorization feature.
4. We modeled DNS as a trusted function mapping domains to principals, and we only implemented the `http-01` challenge type.

### Security Properties and Proof

Our analysis considers several security properties, with the central property being the secure binding property. This property ensures that an honest ACME server only issues certificates to the rightful owner of the domains stated in the certificate. We also state and prove integrity properties for the entire ACME flow.

#### Secure Binding Property

The secure binding property states that if an honest ACME server issues a certificate for a set of domains, at least one of which is owned by an honest client, then the private key corresponding to the public key bound in the certificate is unknown to the adversary. Formally, we define this property as follows:

**Definition 1.** Let \( t \) be a global trace of the DY★ model of ACME, \( s \) be an honest principal (an ACME server) in \( t \), \( D \) be a set of domains, \( k \) be some private key, and \( cert \) some certificate issued by \( s \) in \( t \) for the set \( D \) and the public key corresponding to \( k \). We say that \( t \) fulfills ACME’s secure binding property for \( s \), \( D \), \( k \), and \( cert \) if (in \( t \)) \( k \) is not derivable by the adversary or all domains \( d \in D \) are owned by dishonest principals (the adversary).

Based on this definition, we state the following theorem:

**Theorem 1.** For all possible global traces \( t \) of the DY★ model of ACME, the secure binding property holds.