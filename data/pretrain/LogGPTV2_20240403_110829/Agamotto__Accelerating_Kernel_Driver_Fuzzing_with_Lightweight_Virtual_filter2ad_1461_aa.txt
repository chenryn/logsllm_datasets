title:Agamotto: Accelerating Kernel Driver Fuzzing with Lightweight Virtual
Machine Checkpoints
author:Dokyung Song and
Felicitas Hetzelt and
Jonghwan Kim and
Brent ByungHoon Kang and
Jean-Pierre Seifert and
Michael Franz
Agamotto: Accelerating Kernel Driver Fuzzing with 
Lightweight Virtual Machine Checkpoints
Dokyung Song, University of California, Irvine; Felicitas Hetzelt, 
Technische Universität Berlin; Jonghwan Kim and Brent Byunghoon Kang, 
KAIST; Jean-Pierre Seifert, Technische Universität Berlin; Michael Franz, 
University of California, Irvine
https://www.usenix.org/conference/usenixsecurity20/presentation/song
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Agamotto: Accelerating Kernel Driver Fuzzing with
Lightweight Virtual Machine Checkpoints
Dokyung Song
University of California, Irvine
Felicitas Hetzelt
Technische Universität Berlin
Jonghwan Kim
KAIST
Michael Franz
Brent Byunghoon Kang
KAIST
Jean-Pierre Seifert
Technische Universität Berlin
University of California, Irvine
Abstract
Kernel-mode drivers are challenging to analyze for vulner-
abilities, yet play a critical role in maintaining the security
of OS kernels. Their wide attack surface, exposed via both
the system call interface and the peripheral interface, is often
found to be the most direct attack vector to compromise an OS
kernel. Researchers therefore have proposed many fuzzing
techniques to ﬁnd vulnerabilities in kernel drivers. However,
the performance of kernel fuzzers is still lacking, for reasons
such as prolonged execution of kernel code, interference be-
tween test inputs, and kernel crashes.
This paper proposes lightweight virtual machine check-
pointing as a new primitive that enables high-throughput
kernel driver fuzzing. Our key insight is that kernel driver
fuzzers frequently execute similar test cases in a row, and that
their performance can be improved by dynamically creating
multiple checkpoints while executing test cases and skipping
parts of test cases using the created checkpoints. We built a
system, dubbed Agamotto, around the virtual machine check-
pointing primitive and evaluated it by fuzzing the peripheral
attack surface of USB and PCI drivers in Linux. The results
are convincing. Agamotto improved the performance of the
state-of-the-art kernel fuzzer, Syzkaller, by 66.6% on aver-
age in fuzzing 8 USB drivers, and an AFL-based PCI fuzzer
by 21.6% in fuzzing 4 PCI drivers, without modifying their
underlying input generation algorithm.
1 Introduction
Device drivers are the leading cause of kernel vulnerabili-
ties [15, 47, 56]. A primary reason is the breadth and variety
of driver implementations, which impedes scalable and co-
herent security analysis. Worse, they expose a richer attack
surface than other kernel subsystems: kernel-mode drivers
expose a peripheral attack surface in addition to the system
call attack surface. Consequently, vulnerabilities in device
drivers have been frequently discovered and exploited by ad-
versaries through both attack surfaces in local and remote
attack scenarios [7, 10, 12, 14, 20, 42].
In practice, fuzzing has proven to be effective at ﬁnding vul-
nerabilities in different kernel subsystems, including device
drivers [2,18,24,26,29,46,53,64]. Many techniques have been
proposed to improve kernel fuzzing, e.g., via hand-written
input grammars [24] or various forms of static and dynamic
analysis [2, 18, 26, 29, 46, 53, 64]. For fuzzing device drivers,
Syzkaller represents the state-of-the-art, incorporating many
of the proposed techniques [24]. It recently added support for
fuzzing the peripheral attack surface of USB device drivers
in Linux, which leverages all of its existing smart fuzzing
capabilities such as grammar- and coverage-guidance in input
generation. In its early development stage, Syzkaller already
discovered hundreds of vulnerabilities from a wide range of
device drivers [23], demonstrating its effectiveness.
these
However, despite
recent developments, high-
throughput kernel driver fuzzing still remains challenging. A
driver’s execution can easily be prolonged during its loading
and initialization, or peripheral input processing in general.
Low-priority, time-consuming tasks in kernel space are
typically processed asynchronously and in a deferred manner,
increasing total input processing time. Also, executing each
test case may change the driver’s internal state, which, in turn,
can negatively inﬂuence subsequent test case executions. This
inﬂuence can result in the driver locking itself up [18, 55],
or unstable system state in general, when, for example,
a memory corruption bug corrupts a wider system state.
Unloading and reloading the driver after executing each
test case, and rebooting the system after hitting a bug, can
prevent the interference between test case executions, but
doing so incurs a signiﬁcant reduction in fuzzing throughput.
As an alternative, prior work used a system snapshot created
at system startup to always restore a clean state of the
system for each test case, skipping time-consuming reboots.
However, snapshot techniques at the virtual machine level
without optimizations can be too costly (e.g., QEMU’s VM
snapshot [1]), and user-mode system snapshot techniques
either suffer from similar performance problems [2] or
require extensive driver porting efforts when a user-mode
kernel is used [64].
USENIX Association
29th USENIX Security Symposium    2541
This paper proposes a new primitive—dynamic virtual ma-
chine checkpointing—to address the aforementioned chal-
lenges and enable high-throughput, clean-state kernel driver
fuzzing. The core idea is to continuously create checkpoints
during a fuzzing run in order to skip previously observed,
and checkpointed operations that a kernel driver fuzzer per-
forms. We ﬁnd that test cases generated by fuzzers often have
a substantial amount of similarities between them, leading to
a repeated traversal of identical target driver states. Virtual
machine checkpoints, strategically created by our checkpoint
management policies, can be used to directly restore the vir-
tual machine state established by time-consuming operations
without repeatedly executing them. This primitive reduces the
average test case execution time and, by design, ensures that
no residual states remain after executing a test case; even if
the test case causes a kernel panic, a known virtual machine
state can be quickly restored from an existing checkpoint.
We built a system, called Agamotto1, around this new vir-
tual machine checkpointing primitive, which can transpar-
ently accelerate kernel driver fuzzers regardless of the OS
and the peripheral bus on which a target driver operates. Ag-
amotto abstracts away from the heterogeneity of the device
drivers and OSs, leveraging our virtual machine checkpoint-
ing primitive together with other commodity virtual machine
introspection mechanisms that are readily available for differ-
ent OSs. Agamotto is also fuzzer-agnostic, as it provides an
abstract fuzzer interface that can be implemented to accelerate
any existing kernel driver fuzzers.
Different forms of virtual machine checkpointing mecha-
nisms have been used in many contexts for high availability
(e.g., fault tolerance or live migration) [16, 19], or debugging
and introspection purposes [21, 34]. In these contexts, check-
points are typically created on a single timeline, which to-
gether describe a single execution path that has been realized
in production, debugging, or introspection settings. In con-
trast, checkpoints created during a fuzzing run describe multi-
ple possible execution paths that can be realized in adversarial
settings depending on the input. Under multi-path exploration,
virtual machine checkpoints are frequently created, and used
for virtual machine restoration; therefore, achieving time and
space efﬁciency of checkpointing and restoration mechanisms
becomes a key challenge. To address this, we heavily opti-
mized both virtual machine checkpointing and restoration
mechanisms, making their run-time and space overheads suit-
able for high-throughput fuzzing.
We thoroughly and conservatively evaluated the run-time
and memory overheads of our proposed checkpointing prim-
itives as well as the effectiveness of our system, Agamotto.
The results show that the checkpointing primitive creates a
new promising dimension in the optimization space of kernel
driver fuzzing. In fuzzing 8 USB and 4 PCI drivers, 35.6% of
test case executions on average skipped one or more opera-
1Available at: https://github.com/securesystemslab/agamotto
tions by directly restoring the virtual machine from a check-
point automatically created and managed by Agamotto. The
creation and management of checkpoints incur a run-time
overhead, but their impact on the fuzzing throughput is sig-
niﬁcantly reduced with our controlled checkpoint creation
and optimized checkpointing primitives. Overall, the utility
of multiple checkpoints created by Agamotto outweighed the
cost; Agamotto improved the throughput of USB and PCI
driver fuzzing, on average, by 66.6% and 21.6%, respectively.
Moreover, as fuzzing went deeper, Agamotto became more
effective—the throughput increased by up to 70.5%—thanks
to the checkpoints created in deeper code paths. This is with-
out making any change to the fuzzing algorithm (i.e., input
generation algorithm) of the fuzzers we used. This means that
our approach leverages an overlooked aspect of the fuzzing al-
gorithm; the fuzzing algorithms employed by state-of-the-art
fuzzers produce many similar test cases during a fuzzing run,
and thus can beneﬁt from checkpoints created while executing
earlier test cases. Further improvement could also be possible
by optimizing Agamotto’s dynamic checkpointing policies
together with the fuzzing algorithm itself.
In summary, we make the following contributions:
• A new primitive in kernel driver fuzzing. We intro-
duce dynamic virtual machine checkpointing to accel-
erate kernel driver fuzzing. This new primitive is OS-,
bus- and driver-agnostic, since it operates at the virtual
machine level„ and it opens a new dimension in the
optimization space of kernel driver fuzzing.
• Checkpoint management policies and optimization
techniques. We present checkpoint management poli-
cies that can increase the utility of checkpoints created
during our dynamic checkpointing process. We also
present virtual machine checkpointing and restoration al-
gorithms optimized for fuzzers’ multi-path exploration.
• Improved kernel driver fuzzing throughput. By ap-
plying the proposed techniques to a state-of-the-art USB
fuzzer, Syzkaller, we improved its throughput by 66.6%
on average, without modifying the underlying fuzzing al-
gorithm. We also built a fuzzer for PCI drivers based on
AFL, and improved its throughput by 21.6% on average.
2 Motivation
2.1 Peripheral Attack Surface
Kernel subsystems are typically exposed to adversaries
through the system call interface. Device drivers expose an
additional attack surface: the peripheral interface. This at-
tack surface is subject to physical attacks such as an “evil
maid attack” [52], remote attacks such as an “airborne at-
tack” [6, 10, 12], or even social engineering attacks [61]. An
attacker having physical access to the victim system, e.g., an
2542    29th USENIX Security Symposium
USENIX Association
Table 1: Comparison between kernel fuzzing approaches.
Clean State Compatibility* High Speed
optimized via the copy-on-write mechanism. Several kernel
fuzzers also use different forms of snapshots for a reboot-free
and reproducible fuzzing [2, 64].
No Snapshot [18, 24, 55]
User-mode
Snapshot
VM Snapshot
VM Snapshot with Agamotto
(LibOS) [64]
(Emulation) [2]




* Compatible with kernel-mode drivers.







evil maid, can compromise the system by physically connect-
ing malicious peripherals. A remote attacker, who can reach
communication peripherals such as Wi-Fi or Ethernet con-
trollers, can remotely compromise the system by attacking
these controllers as well as their device drivers.
Scope. This paper investigates the USB and PCI peripheral
attack surfaces of kernel-mode drivers. Our choice was mo-
tivated by (i) their accessibility to potential adversaries, as
exempliﬁed by real-world attacks originating in USB or PCI
devices [10, 12, 20, 42], and (ii) their widespread use. We ﬁnd
that many security-sensitive devices, such as communication
peripherals that have their own external access vector, operate
on USB, PCI, or both. According to a survey on Linux device
drivers [31], more than 70% of drivers target either USB or
PCI devices. Hundreds of bugs already found by Syzkaller’s
USB fuzzer are from a wide range of driver classes [23], which
also reﬂects the prevalence of USB devices. Although this
paper investigates two peripheral buses, we emphasize that
our approach is not bus-speciﬁc. Any fuzzer for a peripheral
attack surface, regardless of its underlying I/O interception
mechanism, can be accelerated with our approach. We provide
more insight on I/O interception in Section 3.6.
2.2 Why Use Snapshots?
Prior work used different snapshot techniques for fuzzing OS
kernel subsystems [2] and user-space programs [63, 65]. The
basic idea is to snapshot the target program before it starts
processing input and run the program from that snapshot for
each test input. This means that every test input executes on
the same, clean state of the target program. No residual state
remains, by construction, after each iteration of the fuzzing
loop. Test inputs do not interfere with each other, increas-
ing the reproducibility of bugs [64]. Even when a test input
corrupts the program state by hitting bugs, a fresh target pro-
gram state can always be restored from an existing snapshot,
which effectively provides crash resilience. Test inputs after a
crash can execute without re-executing time-consuming initial
bootstrap operations (e.g., system reboot in kernel fuzzing).
Fuzzers for user-space programs typically achieve this using
fork(). A new, fresh child process is forked from a single par-
ent process for each test input, the performance of which is
2.3 Why Not Use Snapshots?
Although snapshot techniques ensure clean-state fuzzing, the
snapshot operations themselves may pose a non-negligible
overhead. In particular, system-wide snapshot techniques, e.g.,
using an emulated, user-mode virtual machine with a fork-
based snapshot technique [2], or using a hardware-accelerated
virtual machine with a full memory snapshot technique, can
be expensive. Several fuzzing tools do not use snapshot tech-
niques at all [24, 38, 53], due in part to the overhead. For
example, LibFuzzer [38], an in-process user-space fuzzer, and
Syzkaller [24], a state-of-the-art kernel fuzzer, execute each
test case on the same running instance of the program, and
cleaning the program state is left to the user. The user must
write cleanup routines to clean up global states that may per-
sist across fuzzing loop iterations. To reduce the overhead
associated with virtual machine snapshots, a library OS ap-
proach was proposed [64]. This approach, however, lacks
compatibility with kernel-mode drivers; it requires manual
efforts (or a sophisticated tool [13]) to port device drivers into
user-mode ones.
3 Design
This paper proposes dynamic virtual machine checkpointing
as a key primitive to improve the performance of kernel driver
fuzzing. The key idea is to dynamically create checkpoints
during a fuzzing run, and use these checkpoints to skip time-
consuming parts in the execution of test cases. Recurring
sequences of operations that test cases perform need not be
executed many times; instead, the state of a virtual machine
established by such operations, once checkpointed, can be
directly restored from a checkpoint. This idea underpins the