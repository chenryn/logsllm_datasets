### Opaque Predicates and Stack Tampering Analysis

**RTok (a/d/g)**
- 0 (0/0/0)
- 11 (7/0/7)
- 125 (94/0/94)
- 14 (10/0/10)
- 21 (14/0/14)
- 4 (3/0/3)
- 14 (8/0/8)
- 3 (3/0/3)
- 7 (5/0/5)
- 4 (2/0/2)

**RTko (a/d/s)**
- 48 (45/1/45)
- 6 (1/4/1)
- 78 (0/30/32)
- 0 (0/0/0)
- 1 (0/0/0)
- 3 (0/1/0)
- 0 (0/0/0)
- 1 (0/1/0)
- 1 (0/0/0)
- 0 (0/0/0)

**Key:**
- **opaque pred.:** bound k = 16 – OP: proved opaque – Unk: query returns unknown – TO: timeout (5 sec.)
- **stack tampering:** RTok: #ret runtime genuine - RTko: #ret runtime tampered - a/d/g/s: proved aligned/disaligned/genuine/single target
- **dynamic information:** tr.ok: whether the executed trace was successfully gathered without exception/detection - host: whether the payload was successfully executed - #proc: #process spawned - #th: #threads spawned - #layers: #self-modification layers

### Malware Context

These two malware samples are part of targeted attack campaigns (APT) attributed to the APT28 group, also known as Sednit, Fancy Bear, Sofacy, or Pawn Storm. Active since 2006, this group targets geopolitical entities and is believed to be closely linked to Russian foreign intelligence. Notable targets include NATO, EU institutions, the White House, the German parliament, and the American Democratic National Committee (DNC). The group employs various 0-day exploits in Windows, Flash, Office, Java, and other malwares like rootkits, bootkits, droppers, and Mac OS X malwares.

### Goal

This use-case involves three X-TUNNEL samples over a 5-month period. While Sample #0 is not obfuscated and can be analyzed straightforwardly, Samples #1 and #2 are obfuscated and significantly larger. The primary goals are:
1. **G1:** Identify new functionalities in the obfuscated samples.
2. **G2:** Recover de-obfuscated versions of Samples #1 and #2.

To achieve G1, it is necessary to first address G2 by analyzing the obfuscated binaries. We demonstrate how BB-DSE can solve G2 and provide insights for G1.

### Analysis Context

The obfuscated samples contain a large number of opaque predicates. The goal is to detect and remove these predicates to eliminate dead code and meaningless instructions, leading to a de-obfuscated Control Flow Graph (CFG). This step is essential for identifying new functionalities. The analysis must be performed statically due to the following constraints:
- The malware requires a connection to the Command and Control (CC) server, which is undesirable.
- Many branching conditions are network-event based, making dynamic analysis unreliable and difficult to reproduce.

A quick inspection (dynamic run skipping server connection) confirms that X-TUNNEL does not use self-modification or tricks to hinder static disassembly. Therefore, we use the CFG recovered by IDA and compute the prek of each conditional branch using IDASEC. This approach is realistic when dynamic recovery is not feasible, with IDA being the standard for static disassembly.

### B. Analysis

**OP Detection:**
- Perform BB-DSE on every conditional jump, testing both branches systematically.
- Set the bound k to 16 and use Z3 as the solver with a 6-second timeout.
- If both branches are UNSAT, the predicate is considered dead.

**Code Simplification:**
- **Predicate Synthesis:** Recovers high-level predicates by backtracking logical operations.
- **Liveness Propagation:** Marks instructions as alive, dead, or spurious based on obfuscation-related data.
- **Reduced CFG Extraction:** Extracts the de-obfuscated CFG based on liveness analysis.

### C. Results

**Execution Time:**
- **Sample #1:**
  - DSE: 57m36s
  - Synthesis: 48m33s
  - Total: 1h46m
- **Sample #2:**
  - DSE: 50m59s
  - Synthesis: 40m54s
  - Total: 1h31m

**OP Diversity:**
- Both samples have low diversity, with only two types of opaque predicates: \(7y^2 - 1 \neq x^2\) and \(x^2 + 1 \neq y^2 + 3\).

**Detection Results:**
- **False Negatives (FN):** 3%
- **False Positives (FP):** 8.4% to 8.6%
- **Unknown Conditions:** Both branches are infeasible due to unhandled syscalls.

**Dependency Evaluation:**
- Average distance between an opaque predicate and its variable definitions is 8.7 (less than the bound k = 16).
- Maximum distances are 230 (Sample #1) and 148 (Sample #2).

**Difference with O-LLVM:**
- More interleaving between payload and OP computation.
- Code sharing between predicates and non-independence.
- Use of local function variables for temporary results, increasing dependency chain depth.

**Code Simplification and Reduced CFG Extraction:**
- Dead code represents 1/4 of all program instructions.
- Simplification pass retrieves a program roughly the size of the original one.
- Figure 12 shows the original function, tagged CFG, and extracted CFG.

### D. Conclusion

We successfully detected and removed opaque predicates in the obfuscated X-TUNNEL samples, leading to significant code simplification. This achievement addresses G2, and future work will focus on G1 by comparing the non-obfuscated and simplified samples. The obfuscations in X-TUNNEL are sophisticated but limited by low predicate diversity, allowing for effective pattern matching and symbolic approaches.

### IX. Application: Sparse Disassembly

**Principles:**
- Static and dynamic disassembly methods have complementary strengths and weaknesses.
- BB-DSE is robust for infeasibility questions.
- Sparse disassembly combines recursive disassembly with dynamic traces and BB-DSE information to provide precise disassembly of obfuscated codes.

**Implementation:**
- Integrated into BINSEC, using existing recursive disassembly and BB-DSE information.

**Preliminary Evaluation:**
- Compared with IDA and Objdump on simple programs obfuscated by O-LLVM and Tigress.
- All methods recover legitimate instructions but may be lured into dead instructions introduced by obfuscation.

**Results:**
- Tables XIII and XIV show the number of recovered instructions, indicating the quality of disassembly.

This comprehensive approach enhances the understanding and deobfuscation of complex malware, providing valuable insights into their inner workings.