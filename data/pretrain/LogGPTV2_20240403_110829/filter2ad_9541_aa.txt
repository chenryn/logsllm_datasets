**作者：k1n9@360CERT  
来源：[360CERT](https://cert.360.cn/report/detail?id=c8eed4b36fe8b19c585a1817b5f10b9e
"360-CERT")**
### 0x00 前言
上周出的 WebLogic 反序列漏洞，跟进分析的时候发现涉及到不少 Java 反序列化的知识，然后借这个机会把一些 Java
反序列化漏洞的利用与防御需要的知识点重新捋一遍，做了一些测试和调试后写成这份报告。文中若有错漏之处，欢迎指出。
### 0x01 Java 反序列化时序
Java 反序列化时序对于理解 Java 反序列化的利用或是防御都是必要的，例如有些 Gadget 为什么从 readObject
方法开始进行构造，为什么反序列化防御代码写在 resolveClass 方法中等。先写下三个相关的方法。
#### 1.1 readObject
这个方法用于读取对象，这里要说的 readObject 跟很多同名的这个方法完全不是一回事的，注意下图中的方法描述符跟其它同名方法的区别。
![
](https://images.seebug.org/content/images/2018/10/2cafbc52-9bb0-4e61-80ec-c319cd150384.jpeg-w331s)
java.io.ObjectInputStream
类的注释中有提到，要是想在序列化或者反序列化的过程中做些别的操作可以通过在类中实现这三个方法来实现。比如类 EvilObj 实现了这里的
readObject 方法（方法的描述符需要跟注释提到的一样）的话，在类 EvilObj 的反序列化过程就会调用到这个 readObject
方法，代码例子：
其调用栈如下
![
](https://images.seebug.org/content/images/2018/10/02c0ec74-e0cf-4102-ba84-b0d8bf2327f2.jpeg-w331s)
看下 readSerialData 方法，在读取序列化数据的时候做判断若是该类实现了 readObject 方法，则通过反射对该方法进行调用。
![
](https://images.seebug.org/content/images/2018/10/f8e02e24-1a4c-4886-8bdf-e9a6952a1688.jpeg-w331s)
到这里就能明白为什么有些 Java 反序列化利用的构造是从这里 readObject 方法开始的，然后通过 readObject
中的代码一步一步去构造最终达成利用，这次的 CVE-2018-3191 就是很好的一个例子，后文会讲到 CVE-2018-3191 使用的
Gadget。当然这只是 Java 反序列化利用构造的其中一种方法，更多的可以参考 ysoserial 里的各种 Gadget 的构造。
#### 1.2 resolveClass 和 resolveProxyClass
这两个方法都是在类 java.io.ObjectInputStream 中，resolveClass
用于根据类描述符返回相应的类，resolveProxyClass 用于返回实现了代理类描述符中所有接口的代理类。这两个类的功能使得它们可以被用于 Java
反序列的防御，比如在 resolveClass
方法中可以先对类名进行检测然后决定是否还要继续进行反序列化操作。如果想要在这两个方法中添加一些操作（比如前面提到的做反序列化防御），那处理数据流的类需要继承
java.io.ObjectInputStream ，然后重写下面对应的方法：
    protected Class resolveClass(ObjectStreamClass desc)
    protected Class resolveProxyClass(String[] interfaces)
这里需要避免混淆的一点是这两个方法是在处理数据流的类中重写，而不是在被反序列化的类中重写，代码例子：
![
](https://images.seebug.org/content/images/2018/10/1981238d-f15e-42f0-8d88-81c9802dffbc.png-w331s)
其调用栈如下
![
](https://images.seebug.org/content/images/2018/10/638e567a-0421-432e-afa6-832e4725fc79.jpeg-w331s)
同理 resolveProxyClass 的重写方式也是这样。这里要知道的一点是并非在 Java 的反序列化中都需要调用到这两个方法，看下调用栈前面的
readObject0 方法中的部分代码：
![
](https://images.seebug.org/content/images/2018/10/0b82990e-fcb8-4c50-889a-97f7aa553379.jpeg-w331s)
看 switch 代码块，假如序列化的是一个 String 对象，往里跟进去是用不到 resolveClass 或 resolveProxyClass
方法的。resolveProxyClass
方法也只是在反序列化代理对象时才会被调用。通过查看序列化数据结构非常有助于理解反序列化的整个流程，推荐一个用于查看序列化数据结构的工具：SerializationDumper
#### 1.3 反序列化时序
贴一张廖新喜师傅在“JSON反序列化之殇”议题中的反序列化利用时序图，用于从整体上看反序列化的流程。
![
](https://images.seebug.org/content/images/2018/10/1cb64e8c-e424-4bb4-93ad-f9faaebbf419.jpeg-w331s)
普通对象和代理对象的反序列化走的流程是不一样的，可以看 readClassDesc 方法：
![
](https://images.seebug.org/content/images/2018/10/03d2b171-5364-400b-9827-8c6921b87d68.jpeg-w331s)
对应着前面时序图中实例化的那一步的不同流程。
#### 1.4 小结
这一章主要是介绍了 Java
反序列化相关的三个方法，通过代码跟踪调试的方式来确定其在什么时候会被调用到，再结合反序列化的时序图就可以对反序列化的整个流程有一定的了解。其实去分析了下反序列化的时序主要是为了知道两点，第一个是反序列化的大体流程，第二个是有哪些方法在这流程中有被调用到，为了解
Java 反序列化的利用和防御做一些知识准备。
### 0x02 WebLogi T3 反序列化及其防御机制
T3 从 WebLogic 的启动到对消息进行序列化的调用栈（由下往上）：
    at weblogic.rjvm.InboundMsgAbbrev.readObject(InboundMsgAbbrev.java:73)
    at weblogic.rjvm.InboundMsgAbbrev.read(InboundMsgAbbrev.java:45)
    at weblogic.rjvm.MsgAbbrevJVMConnection.readMsgAbbrevs(MsgAbbrevJVMConnection.java:283)
    at weblogic.rjvm.MsgAbbrevInputStream.init(MsgAbbrevInputStream.java:214)
    at weblogic.rjvm.MsgAbbrevJVMConnection.dispatch(MsgAbbrevJVMConnection.java:498)
    at weblogic.rjvm.t3.MuxableSocketT3.dispatch(MuxableSocketT3.java:348)
    at weblogic.socket.BaseAbstractMuxableSocket.dispatch(BaseAbstractMuxableSocket.java:394)
    at weblogic.socket.SocketMuxer.readReadySocketOnce(SocketMuxer.java:960)
    at weblogic.socket.SocketMuxer.readReadySocket(SocketMuxer.java:897)
    at weblogic.socket.PosixSocketMuxer.processSockets(PosixSocketMuxer.java:130)
    at weblogic.socket.SocketReaderRequest.run(SocketReaderRequest.java:29)
    at weblogic.socket.SocketReaderRequest.execute(SocketReaderRequest.java:42)
    at weblogic.kernel.ExecuteThread.execute(ExecuteThread.java:145)
    at weblogic.kernel.ExecuteThread.run(ExecuteThread.java:117)
这里没有去分析 T3 协议的具体实现，抓了一下 stopWebLogic.sh 在执行过程中的数据包：
![
](https://images.seebug.org/content/images/2018/10/a485feaa-6ea7-4d6d-9254-9d026e0fe40e.jpeg-w331s)
第一个是握手包，然后第二个包中就可以找到带有序列化数据了，包的前 4 个字节为包的长度。替换序列化数据那部分，然后做数据包重放就可以使得 T3
协议反序列化的数据为自己所构造的了。
#### 2.1 WebLogic 的反序列化防御机制
从调用栈可以知道是在哪里做的反序列化，InboundMsgAbbrev 类的 readObject 方法：
![
](https://images.seebug.org/content/images/2018/10/a755d6b4-b747-427e-bbb3-90840795c682.jpeg-w331s)
留意下这里的 readObject 方法的描述符，跟前一章提的 readObject 方法描述符是不一样的，也就是说假如反序列化一个
InboundMsgAbbrev 对象，这里的 readObject 方法是不会被调用到的。这里的 readObject 只是在 T3
协议处理消息的代码流程中被使用到。
可以看到处理输入数据流的类为 ServerChannelInputStream，由前一小节知道输入流是可以被控制的，接下来就是实例化
ServerChannelInputStream 对象然后进行反序列化操作。先看下 ServerChannelInputStream 类：
![
](https://images.seebug.org/content/images/2018/10/f6b85a83-b355-4fef-9ef1-c554f160814a.jpeg-w331s)
ServerChannelInputStream 类的继承图：
![
](https://images.seebug.org/content/images/2018/10/553b1ba2-0d58-47fc-99b7-517ae480a72c.jpeg-w331s)
可以得知 ServerChannelInputStream 类是继承了 ObjectInputstream 类的，并且重写了 resolveClass 和
resolveProxyClass 方法。由上一章的内容可以知道 ServerChannelInputStream
类中的这两个方法在对不同的序列化数据进行反序列化的时候会被调用到，这样就不难理解 WebLogic
为什么会选择在这两个方法中添加做过滤的代码了（其实之前出现的针对反序列化的防御方法也有这么做的，重写 ObjectInputstream 类中的
resolveClass 方法或者直接重写一个 ObjectInputstream）。
先说一下 resolveProxyClass 这个方法里为什么用代理的接口名字和 "java.rmi.registry.Registry" 进行对比，这个是
CVE-2017-3248 漏洞的补丁。CVE-2017-3248 漏洞的利用用到 JRMPClient 这个 Gadget，ysoserial 中的
JRMPClient 用到了动态代理，代理的接口就是
"java.rmi.registry.Registry"。针对这个就出现了不少的绕过方法，比如换一个接口
java.rmi.activation.Activator，或者直接不使用代理都是可以的。这里涉及到了 JRMPClient 这个 Gadget
的具体构造，但这不属于本文的内容，想了解这个的话建议去看 ysoserial 中具体是如何构造实现的。
resolveClass 方法中的 checkLegacyBlacklistIfNeeded 方法是用来针对类名和包名做过滤。
从 checkLegacyBlacklistIfNeeded 方法跟进去直到进入 WebLogicObjectInputFilter 类的
checkLegacyBlacklistIfNeeded 方法：
![