source is code from a web site, and where an attack is
possible provided the web site can be attacked. In other
words, these extensions rely on a trusted web site as-
sumption (e.g., that the code on the Facebook website
is safe). We think that these are valid warnings that users
of an extension (and Mozilla) should be aware of; trusted
web sites can after all be compromised, and the code on
these sites can be changed leading to an attack on all
users of such an extension.
Not all ﬂows lead to attacks – the next set of columns
describe the alerts that we were unable to convert to con-
crete attacks. Some ﬂows were not exploitable as the
input is sanitized correctly (either by the extension or the
browser), preventing JavaScript injection, while others
were not exploitable as the sinks do not turn out to be
chrome executable contexts. These extensions are noted
in the next two columns. Finally, VEX, being a conser-
vative ﬂow-analysis tool, does report alerts about ﬂows
that do not actually exist— there were very few of these,
and are noted under the column “Non-existent ﬂows”. A
discussion on ﬂows that do not lead to attacks is given in
Section 5.5.
As noted in the last column, there were 13 extensions
with VEX alerts that were too complex(or obscurely writ-
ten) for us to manually analyze for an attack; we do not
know whether attacks on these are possible or not.
10
Flow Pattern
grep
Alerts
VEX
Alerts
Attackable
Extensions
Sanitized
input
0
6
0
Attackable Extensions: * WIKIPEDIA TOOLBAR V-0.5.7, WIKIPEDIA TOOLBAR V-0.5.9 ,
Content Doc to eval
Content Doc to innerHTML
RDF to innerHTML
2*
0
4**
430
534
60
13
46
4
Source is
trusted
website
1
14
0
Not Attackable
Non-chrome
sinks
3
6
0
Non-existent
ﬂows
5
9
0
Unanalyzed
2
11
0
** FIZZLE V-0.5, FIZZLE V-0.5.1, FIZZLE V-0.5.2 & BEATNIK V-1.2
Figure 5:
Flows from injectible sources to executable sinks.
Unsafe Programming Practices
evalInSandbox Object to == or !=
Method Call on wrappedJSObject
grep Alerts VEX Alerts
3
144
107
269
Figure 6: Results for unsafe programming practices.
Finding unsafe programming practices:
The results of the second set of experiments for ﬂows
that characterize the two unsafe programming practices
of checking equality on objects evaluated in a sandbox
and calling methods of unwrapped JS objects are shown
in Figure 6.
The ﬁrst column denotes the ﬂow-pattern, the second
column shows the number of extensions that had a grep
pattern for the strings ‘evalInSandbox’ and ‘wrapped-
JSObject’, respectively. The third column shows the
number of extensions that VEX alerts. Note that these
ﬂows correspond to unsafe programming practices de-
clared by Mozilla for extension writers, and hence should
be avoided. We analyzed 15 of the alerts and found that
all of the ﬂows we inspected were feasible and real, but
we were unable to manually conﬁrm the remainder be-
cause there were too many alerts to examine.
5.4 Successful attacks
Attack scripts: All our attack scenarios involve a user
who has installed a vulnerable extension who visits a ma-
licious page, and either automatically or through invok-
ing the extension, triggers script written on the malicious
page to execute in the chrome context. Figure 7 illus-
trates an attack payload that can be used in such attacks:
this script displays the folders and ﬁles in the root di-
rectory. The attack payloads could be much more dan-
gerous, where the attacker could gain complete control
of the affected computer using XPCOM API functions.
More examples of such payloads are enumerated in the
white-paper given in [13].
Let us now explain the various attacks we found on
web extensions:
Wikipedia Toolbar, up to version 0.5.9
If a user visits a web page with the directory display
Figure 7: Attack script to display directories.
attack script in its  tag, and clicks on one of
the Wikipedia toolbar buttons (unwatch, purge, etc.), the
script executes in the chrome context. The attack works
because the extension has the code given in Figure 8 in
its toolbar.js ﬁle.
script = window. content.document.
getElementsByTagName(‘‘script")[0].innerHTML;
eval (script);
Figure 8: Wikipedia toolbar code.
The ﬁrst line gets the ﬁrst  element from the
web page and executes it using eval. The extension de-
veloper assumes the user only clicks the buttons when
a Wikipedia page is open, in which case  may
not be malicious. But the user might be fooled by a ma-
licious Wikipedia spoof page, or accidentally press the
button on some other page, VEX led us to this previ-
ously unknown attack, which we reported to the devel-
11
opers, who acknowledged it, patched it, and released a
new version. This resulted in a new CVE vulnerability
(CVE-2009-41-27). The ﬁx involved inserting a condi-
tional in the program to check if the url of the page is
on the wikipedia domain and evaluating the script only if
this is true.
bookmarks.js:
1. function Bookmarks(){
2. var bookmarks = new Array();
3. this.load = function(){
4.
5.
bookmarks = new Array();
var rdf = Components.classes[
“@mozilla.org/rdf/rdf-service;1”]
.getService(Components.interfaces.nsIRDFService);
var bmds = rdf.GetDataSource(”rdf:bookmarks”);
var iter = bmds.GetAllResources();
while (iter.hasMoreElements()){
var element = iter.getNext();
{name:element.name, url:element.url});
6.
7.
8.
9.
10. bookmarks.push(
11. } } }
sys.js:
12.
13.
14.
15.
16.
17.
18.
19.
20.
ui.js:
21.
22.
23.
24.
25.
26.
27.
28.
var sys = new Sys();
function Sys() {
var bookmarks = null;
this.startup = function() {
bookmarks = new Bookmarks();
bookmarks.load();
ui.buildFeedList(); }
this.getBookmarks(){
return bookmarks; } }
var ui = new Ui();
function Ui() {
this.buildFeedList = function() {
var bm = sys.getBookmarks();
for (var i=0; i mark.name; }
div.innerHTML = html; } }
Figure 9: FIZZLE vulnerability code.
Fizzle versions 0.5, 0.5.1, 0.5.2
FIZZLE is a RSS/Atom feed reader that uses Livemark
bookmark feeds. Vulnerability report CVE-2007-1678
explains that FIZZLE VER.0.5 allows remote attackers
to inject arbitrary web scripts or HTML via RSS feeds.
FIZZLE’s RSS feeds are obtained from the bookmarks’
RDF resource, using the XPCOM RDF service. The au-
thor of FIZZLE purportedly ﬁxed this vulnerability in the
next version; however, VEX signaled the presence of a
ﬂow, and we found that the sanitization routine that the
12
programmer wrote was ﬂawed, and the extension can
be attacked using suitably encoded scripts. These new
attacks for FIZZLE VER 0.5.1 and FIZZLE VER 0.5.2
were not known before, to the best of our knowledge.
Figure 9 gives a highly simpliﬁed version of FIZ-
ZLE, to show its information ﬂows. When the user
clicks on the FIZZLE extension toolbar to see the feeds,
FIZZLE is initialized, i.e., sys.startup() on line
15 is called. This method loads the bookmarks from
the Firefox bookmarks folder. The title and URL of
the feeds are obtained from the bookmarks’ RDF re-
source and then stored in an array in FIZZLE when
bookmarks.load() is called. After the bookmarks
are loaded, ui.buildFeedList() is called. In this
method, the bookmark array is accessed on line 24 and
the elements are added to a variable named html on
line 27. This html variable is then assigned to the
innerHTML property of the (cid:104)div(cid:105) tag of an HTML page.
This page is then displayed in a frame in the browser.
The attack happens when a malicious RDF ﬁle is loaded,
where the name element of the feed contains JavaScript.
Assigning a specially crafted script to the innerHTML
property at line 28 results in the script being executed
under chrome privileges.
To detect this kind of attack, we must be able to deter-
mine that the information that ﬂows into the html vari-
able and eventually into the innerHTML property is from
the bookmarks’ RDF resource. It is difﬁcult to detect this
manually, because most extensions are encoded in many
separate JavaScript ﬁles spread across multiple directo-
ries, and the routines deﬁned in these ﬁles have complex
interactions with each other. Even the example shown
in Figure 9 is spread over three different JavaScript ﬁles,
and we have omitted many lines of code from the func-
tions shown. As mentioned earlier, VEX users can deﬁne
summaries for library functions, or just rely on default
summaries. Given a function summary for the push
method of the Array object deﬁned in the XPCOM li-
brary, VEX detects that FIZZLE has ﬂows from the RDF
service to innerHTML.
Beatnik version 1.2
BEATNIK is another RSS reader with the same kind of
problematic ﬂow as FIZZLE, documented in CVE-2007-
3110 for BEATNIK version 1.0. In the Mozilla add-ons
page for the subsequent version of BEATNIK, the exten-
sion developer said he had sanitized the RSS feed input.
VEX found that there were still ﬂows from the book-
marks’ RDF to the innerHTML property in BEATNIK
version 1.2, because VEX currently does not consider
declassiﬁcation via sanitization. Our manual examina-
tion showed the new sanitization to be inadequate. The
sanitization parses the feed input and checks whether the
nodes contain script. If the feed contains only text nodes,
it is appended to the RSS feed title; otherwise it is dis-
carded. By encoding the (cid:104) and (cid:105) tags as their HTML
entity names, we can fool this routine. If we name the
RSS feed as follows:
Title &lt; /a &gt&lt; img
&quot;&quot; onerror= ’CODE
& gt; Beatnik &lt;/img&gt; &lt; a &gt;
src =
FROM FIGURE
7’
the string is converted into
Title   Beatnik  
and results in an attack. To the best of our knowledge,
this attack has not been reported thus far. One must un-
derstand the extension code to form these attack strings;
in this case, the  tag had to be closed at the begin-
ning of the string and opened again at the end for the
script to work.
5.5 Flows that do not result in attacks
Figure 10 gives several examples of the suspect ﬂows
that we manually analyzed and for which either trusted
sources were assumed by the extension or we could not
ﬁnd attacks.
The ﬁrst set has extensions reading values from web-
sites or sources it trusts, and the values ﬂow to eval,
innerHTML, or evalInSandbox. Of course,
if the
trusted sources are compromised, then the extensions
may become vulnerable.
The second set illustrates examples where the input
was sanitized between the source and the sink (we do
not know for sure that the sanitization is adequate, but
we were unable to attack it). The third set of extensions
had non-chrome sinks. The last two examples show false
positives where the ﬂows reported by VEX do not exist.
These false alarms are because of the way VEX handles
variable dependencies imprecisely. For example, the last
alarm is caused by the rule ASSIGN2 in Figures 3 and 4,
which conservatively adds the dependencies of variable
x to ﬁeld f.
6 Related work
Maffeis et. al. [27] proposed a small-step operational
semantics for JavaScript, using which they analyze se-
curity properties of web applications. This operational
semantics is then useful for generating safe subsets of
JavaScript and to manually prove that the so-called safe
subsets of JavaScript are in fact vulnerable to certain
attacks [28]. Our operational semantics is inspired by
their approach, although we take an alternate approach
of abstracting the primitive values in the program. This
13
helps us in proposing a precise information ﬂow analy-
sis approach for a non-trivial JavaScript program. More
recently, Guha et. al. [18] also provide an operational
semantics for JavaScript (albeit without semantics for
eval) with the goal of making it easier to prove properties
about the JavaScript programs.
Recent work by Ter Louw et al. [25] highlights some
of the potential security risks posed by browser exten-
sions, and proposes run time support for restricting the
interactions between browsers and extensions. Our tech-
niques are complementary to these techniques since, as
our experiments show, even restricted interfaces can still
be susceptible to security vulnerabilities.
Most recent work on the security of browser exten-
sibility mechanisms focuses on plugin security. Plug-
ins are external applications hosted within the browser