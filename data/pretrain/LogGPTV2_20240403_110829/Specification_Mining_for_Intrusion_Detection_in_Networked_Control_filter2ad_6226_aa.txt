title:Specification Mining for Intrusion Detection in Networked Control
Systems
author:Marco Caselli and
Emmanuele Zambon and
Johanna Amann and
Robin Sommer and
Frank Kargl
Specification Mining for Intrusion Detection  
in Networked Control Systems
Marco Caselli, University of Twente; Emmanuele Zambon, University of Twente and 
SecurityMatters B.V.; Johanna Amann, International Computer Science Institute;  
Robin Sommer, International Computer Science Institute and Lawrence Berkeley National 
Laboratory; Frank Kargl, Ulm University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/caselli
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Speciﬁcation Mining for Intrusion Detection
in Networked Control Systems
Marco Caselli
University of Twente
PI:EMAIL
Emmanuele Zambon
University of Twente & SecurityMatters B.V.
PI:EMAIL
Johanna Amann
ICSI
PI:EMAIL
Robin Sommer
ICSI & LBNL
PI:EMAIL
Abstract
This paper discusses a novel approach to speciﬁcation-
based intrusion detection in the ﬁeld of networked con-
trol systems. Our approach reduces the substantial hu-
man effort required to deploy a speciﬁcation-based in-
trusion detection system by automating the development
of its speciﬁcation rules. We observe that networked
control systems often include comprehensive documen-
tation used by operators to manage their infrastructures.
Our approach leverages the same documentation to auto-
matically derive the speciﬁcation rules and continuously
monitor network trafﬁc. In this paper, we implement this
approach for BACnet-based building automation systems
and test its effectiveness against two real infrastructures
deployed at the University of Twente and the Lawrence
Berkeley National Laboratory (LBNL). Our implementa-
tion successfully identiﬁes process control mistakes and
potentially dangerous misconﬁgurations. This conﬁrms
the need for an improved monitoring of networked con-
trol system infrastructures.
1
Introduction
A speciﬁcation-based
Starting from Denning’s seminal work in 1986 [9], in-
trusion detection has evolved into a number of different
approaches. Among them, anomaly-based intrusion de-
tection and, most recently, speciﬁcation-based intrusion
detection have gained attention for their potential to de-
tect previously unknown attacks (e.g., zero-day attacks).
sys-
tem (IDS)
leverages functional speciﬁcations of a
system to model its properties, or features, creating a
reference of correct behavior. Differently from anomaly-
based IDSs, behavior of features is not derived by a
learning phase (prone to false positives) but directly
extracted from documentation. This ensures the quality
of the generated models and improves detection. Several
research efforts in the literature conﬁrm the accuracy of
intrusion
detection
Frank Kargl
Ulm University
PI:EMAIL
speciﬁcation-based intrusion detection [62]. However,
these approaches assume manual (human) analyses,
often focused just on network protocol documentations.
Scaling a speciﬁcation-based approach to an entire in-
frastructure faces three key challenges. First, targeted
systems do not always have consistent features, and thus
constraints, that allow to describe functional rules (e.g.,
common networks do not usually guarantee stable com-
munication patterns or message timing). Second, even
when such constraints are present, bridging the semantic
gap between infrastructure properties and the low-level
features actually observable by an IDS remains hard [22].
Third, deploying a speciﬁcation-based intrusion detec-
tion requires an explicit and unambiguous description of
the features’ behaviors, as well as substantial human ef-
fort in crafting the related speciﬁcation rules.
This work aims to ﬁll this last challenge by automating
speciﬁcation-based intrusion detection to a fairly high
degree. We propose an approach to automatically mine
IDSs’ speciﬁcation rules from available documentation.
Our approach works under the following assumptions:
• Documentation about monitored systems must be
available. No speciﬁcation-based intrusion detec-
tion would be possible without relying on correct
information that describes an infrastructure’s com-
ponents, mechanisms and constraints. Documenta-
tion should be provided in an electronic form to al-
low automated knowledge extraction.
• Information retrieved from the documentation must
be linkable to what an IDS can observe. On a net-
work, information about components, mechanisms
and constraints need to map to features monitored
by the IDS (e.g., information on a whitelist of net-
work services should link to the correct IP address).
We do not claim that these principles can be gener-
ically applied to any system. However, we observe
that environments such as Networked Control Systems
USENIX Association  
25th USENIX Security Symposium  791
(NCSs) [20] suit this approach. NCSs are “systems
whose constituents such as sensors, actuators, and con-
trollers are distributed over a network, and their corre-
sponding control-loops are formed through a network
layer” [30]. Examples of NCSs include: industrial con-
trol systems [65], building automation systems [42] and
in-vehicle networks [31]. NCSs generally have the prop-
erties discussed above. Communications over these net-
works are quite stable [22] (e.g., neither the number of
devices nor the way data is shared change regularly).
Moreover, automation guarantees the presence of control
algorithms and consequently the existence of consistent
features that will eventually become the core of the spec-
iﬁcation rules. These features and their constraints also
represent the most attractive target for an attacker who
wants to manipulate the controlled processes [14].
The two assumptions deﬁned above hold for NCSs.
Information related to system features are often docu-
mented in conﬁguration ﬁles, reference books and man-
uals (e.g., “Substation Conﬁguration Language” ﬁles
for industrial control systems, “Protocol Implementation
Conformance Statement” for building automation sys-
tems, CAN matrixes and corresponding documentation
for in-vehicle networks). Linkability is generally guar-
anteed by the absence of encryption and by the verbosity
of the adopted protocols.
In this paper, we design and discuss a speciﬁcation-
based network intrusion detection system (NIDS) for
BACnet-based building automation systems to demon-
strate and investigate our concept. First, we present
speciﬁcation-based intrusion detection in §2. Then, we
introduce building automation and BACnet in §3. We
outline our approach in §4. Details of the approach in
the context of building automation systems are discussed
in §5 to §7. Finally, we examine the general applicability
of our work in §8.
2 State of the Art
Ko et al. introduce speciﬁcation-based intrusion detec-
tion in [34]. The authors describe their approach towards
automated detection of Unix privileged program misuses
and suggest to “specify programs’ intended behavior” by
modeling their normal execution beforehand. The pro-
posed solution works through the deﬁnition of a Program
Policy Speciﬁcation Language aiming to formally deﬁne
programs’ operations by simple predicate logic and reg-
ular expressions. Later works such as [13] resume and
improve the proposed ideas. Ko et al. improve their in-
troductory research in [35] by deﬁning a formal frame-
work used to deﬁne and detail security-relevant behav-
ior of Unix programs. In [33], the framework gets in-
tegrated into a comprehensive speciﬁcation-based IDS,
called SHIM. SHIM merges several different detection
approaches that apply to both network communications
and operating system activities.
Its use, together with
machine learning techniques, was shown to be an effec-
tive solution towards the development of automated in-
trusion response strategies [3]. From the previous works,
Sekar et al. continue developing the research ﬁeld by
proposing complementary approaches in [52] (based on
the use of the Auditing Speciﬁcation Language) and [54]
(based on a custom language called “Regular Expres-
sions for Events” or REE). The same authors, present
in [53] a hybrid approach aiming to increase the in-
formation of a speciﬁcation-based IDS with the use of
anomaly-based intrusion detection techniques. The au-
thors use Extended Finite State Automata (EFSA) to
model and detail network protocol behavior. Then they
reﬁne the set of monitored features via a learning phase
exploiting statistical analyses on the trafﬁc traces.
Over the years, researchers customized speciﬁcation-
based intrusion detection to ﬁt different infrastructures
such as mobile ad hoc networks [60, 44, 23, 56, 61, 19]
and WLANs [16].
Furthermore, speciﬁcation-based
IDSs were developed for speciﬁc use cases both for
network-based (e.g., VoIP technologies [59], carrier Eth-
ernet [26]) and host-based security (e.g., kernel dynamic
data structures [48], mobile operating systems [7]).
Speciﬁcation-based intrusion detection has gained
a main role in NCSs. Works such as [8], [27],
and [37] present speciﬁcation-based IDSs for Mod-
bus, Zigbee and DNP3 respectively. Hadeli et al. no-
tably apply a semi-automated speciﬁcation approach
to substation automation systems employing MMS and
GOOSE [21]. The authors leverage operator input to
parse infrastructure-related documentation and derive se-
curity checks. Ultimately, Berthier et al. take this ap-
proach a step forward by modeling not just employed
protocols (in this case C12.22) but smart-meter security
constraints and policies as well [4]. This research shows
the feasibility and effectiveness of modeling high-level
infrastructure properties.
State-of-the-art research on speciﬁcation-based intru-
sion detection assumes that protocol and system docu-
mentation is readily available when designing and con-
ﬁguring the IDS. Few thoughts are spent on where and
how to retrieve this information, especially not in an au-
tomated way. Moreover, all the aforementioned works
do not explore the possibility of autonomously extracting
the information needed to build the related IDSs from
documentation, instead relying on human evaluation and
translation to rules. This possibility would allow to ef-
ﬁciently apply speciﬁcation-based approaches to entire
infrastructures. As discussed in the introduction, our re-
search focuses on this key aspect of speciﬁcation-based
intrusion detection with the aim of making its develop-
ment more time-effective and accurate.
792  25th USENIX Security Symposium 
USENIX Association
2
Figure 1: Building automation network layout
3 Case Study: Building Automation
Building automation systems (BASs) or building man-
agement systems (BMSs) are networked infrastructures
controlling operations and services within a building (or
a group of buildings). Among other uses, building au-
tomation systems can monitor and control HVAC (heat-
ing, ventilation, and air conditioning), lighting, energy
consumption, and physical security and safety [42].
A building automation network usually follows a hier-
archical layout [28] (Figure 1). At the bottom, sensors
and actuators directly connect to the monitored phys-
ical processes and send information back and forth to
building automation controllers. Controllers communi-
cate with servers and distributed control systems (DCSs)
to coordinate high-level control procedures and policies.
Finally, operators can access and manage building au-
tomation components connecting through their worksta-
tions and human-machine interfaces (HMIs).
In the last decade, the employment of building au-
tomation solutions has constantly increased (both for
commercial and residential buildings) and its market
share is expected to grow in the following years [39]. De-
spite numerous beneﬁts (e.g., energy efﬁciency, “smart
homes”, etc.) building automation makes several new
threat scenarios not just feasible but realistic [24, 17,
18, 47]. Nevertheless, only few solutions have been
proposed to improve building automation system secu-
rity [18, 6, 45].
3.1 BACnet
The “Building Automation and Control Network” (BAC-
net) protocol [1] facilitates building automation system
communication for a wide array of different devices and
different settings. While exact statistics of the prolifera-
tion of BACnet are difﬁcult to come by, already back in
2003 there were more than 28,000 BACnet installations
in 82 countries [28].
Figure 2: BACnet interaction example
BACnet has a layered protocol architecture, similar to
the ISO/OSI model. The BACnet protocol has an appli-
cation layer, containing the actual application data pay-
load as well as a network layer that abstracts the differ-
ences of the network architectures supported by BACnet
and implements its own routing protocol. Underneath the
network layer, BACnet also speciﬁes how it can be used
with different types of data links.
The BACnet application layer rests on two important
core concepts: objects and services (Figure 2). A Build-
ing Automation and Control System (BACS)1 includes
one or more BACnet objects that are used to represent
its functions. Objects are of a speciﬁc type, like An-
alog Input or Analog Output. BACnet supports a
wide range of high-level object types like Calendars,
Date Value objects, or Credential Data Input ob-
jects. BACnet users and vendors can deﬁne “proprietary”
objects as well to serve speciﬁc functionalities. Ob-
ject types have different attributes that are called prop-
erties, which are extensible for speciﬁc purposes. The
second core concept of the BACnet application layer
are services. While objects describe the different func-
tions that are implemented by a BACS, services deﬁne
how to communicate with the BACS, offering function-
ality such as reading object information from a device.
Their names reﬂect the semantics of the operation (e.g.,
ReadProperty).
Individual BACSs typically only support a small se-
lection of possible objects and services. Manufactur-
ers use a “Protocol Implementation Conformance State-
ment” (PICS) to describe which objects and services are
implemented by a speciﬁc device. The BACnet standard
implies that all BACSs shall have a PICS identifying “all
of the portions of BACnet that are implemented” [1]. In-
formation in PICS includes: a brief description of the de-
1In the remainder of this paper, we will refer to any controller im-
plementing BACnet as BACS.
USENIX Association  
25th USENIX Security Symposium  793
3
vice; a list of supported BACnet Interoperability Build-
ing Blocks (BIBBs) that deﬁne classes of BACnet ser-
vices supported by a device; and a list of supported stan-
dard and proprietary BACnet objects and properties with
their characteristics.
To complete device descriptions, operators may take
advantage of conﬁguration ﬁles such as “Engineering
Data Exchange” (EDE) ﬁles [2]. Generally, operators
compile these documents to represent internal character-
istics of a deployed BACS. EDE ﬁles include detail infor-
mation on devices’ BACnet implementations (e.g., which
BACnet objects a device is currently using) and value
constraints (e.g., in Figure 2, Present Value of Analog
Value 7 must be less than 5.0).
3.2 Attacks on BACnet
BACnet deﬁnes a limited security architecture providing
peer and operator authentication along with data conﬁ-
dentiality and integrity (“Clause 24 — Network Secu-
rity” [1]). However, none of this is implemented in avail-
able products [43]. This leaves BACnet infrastructures
vulnerable to numerous cyber-threats [24, 63, 58, 29].
We categorize attacks on BACnet into three main
groups: snooping, denial of service (DoS), and process
control subverting. This categorization derives from the
list of BACnet protocol threats described in [24].
Snooping attacks concern stealing information about
a speciﬁc building automation system. To achieve this
goal, these attacks require access to the building automa-
tion system network. Once inside, attackers can take
advantage of BACnet services such as ReadProperty
and ReadPropertyMultiple to gain knowledge of the
BACS. This includes device models, locations, status,
and information on their BACnet support (e.g., which
BACnet services and objects they implement). Attackers
may need this information to understand the infrastruc-
ture and pave the way to further intrusions. However,
snooping attacks do not disrupt any process of the build-
ing automation system.
Differently, DoS attacks try to interfere with control
processes by making controllers unreachable for opera-
tors. This category only considers DoS attacks that are
performed through the use of BACnet routing features
(e.g., malicious modiﬁcations to the BACnet routing ta-
bles) and leaves other kinds of DoS out of its scope.
As for the snooping attacks, DoS attacks need malicious
users to have access to the network. Moreover, this kind
of attacks requires information about the network layout.
Attackers can achieve their goal by sending BACnet mes-