        }
        Object.defineProperty(Image.prototype, 'src', {
            set: customiseSrcSet,
        });
    }
    function hookOpen() {
        const nativeOpen = window.open;
        window.open = function (url) {
            // do something
            setCookie('kQpFHdoh', cookieV);
            nativeOpen.call(this, url);
        };
    }
    function hookFetch() {
        var fet = Object.getOwnPropertyDescriptor(window, 'fetch')
        Object.defineProperty(window, 'fetch', {
            value: function (a, b, c) {
                // do something
                setCookie('kQpFHdoh', cookieV);
                return fet.value.apply(this, args)
            }
        })
    }
    // 四个hook函数
    hookAJAX();
    hookImg();
    hookOpen();
    hookFetch();
##### 04 功能演示
  * 首次请求，没有cookieA/B，返回302
  * 浏览器执行js，生成cookieA/B
  * cookie验证成功时，放行
  * cookie验证失败时，返回403
  * 日志记录
#### 2.3 保护网站前端代码
##### 01 方案确定
在网关中配置js混淆器，对上游服务器返回的js文件和网关自身下发的js文件进行动态混淆，[混淆内容](https://xz.aliyun.com/t/10869)有：
  * 改变对象访问方式
  * 标识符unicode编码
  * 字符串加密
  * 数值位异或加密
  * 数组混淆
  * 二项式转花指令
  * 指定行加密
  * 去注释/去空格
##### 02 功能实现
检测用户发来的请求：当请求文件后缀名为js时，将全局变量`JsConfuse`值改变为`true`
    function jsExtDetect()
        if JsProtect then
            local ext = string.match(ngx.var.uri, ".+%.(%w+)$")
            if ext == 'js' then  -- 检查请求文件后缀是否为js
                JsConfuse = true
            end
        end
    end
改变文件响应内容：全局变量`JsConfuse`为`true`时触发`io.popen()`执行系统命令，对原始响应内容`ngx.arg[1]`进行混淆操作
    function jsConfuse()
        if JsConfuse then
            local originBody = ngx.arg[1]  -- 获得原始响应内容
            if #originBody > 200 then  -- 筛选空js
                local s = getRandom(8)  -- 生成一个随机字符串
                local path = '/tmp/'..s  -- 拼接临时文件路径
                writefile(path, originBody, 'w+')  -- 将原始响应保存在临时路径中
                local t = io.popen('export NODE_PATH=/usr/lib/node_modules && node /gate/node/js_confuse.js  '..path)  -- js混淆
                local a = t:read("*all")  -- 读取执行结果
                ngx.arg[1] = a  -- 替换返回内容为混淆后的结果
                os.execute('rm -f '..path)  -- 删除临时文件
            end
            JsConfuse = false  -- 还原全局变量
        end
    end
##### 03 功能演示
  * 访问原站，js未做安全加固
  * 访问保护后的站点，js已被混淆
#### 2.4 防御多源代理请求
##### 01 方案确定
[fingerprintjs](https://github.com/svbailey/fingerprintjs)提供了一种指纹识别方案，通过下发js的方式抓取userAgent、cpuClass、colorDepth等环境数据，然后生成一个哈希指纹作为身份标识
##### 02 功能实现
网关在返回包中插入js，前端生成hash值后写入cookie随下次http请求携带至安全网关
将新生成的数据写入至数组`arr`中，数据位第0位为收集的工具特征，第1位为fingerprintjs
    // webdriver.js
    var arr = [];
    function get_info(){
        str = '' + get_webdriver() + get_awvs() + get_appscan();
        return str;
    }
    function finalCookie(){
        arr.push(get_info())
        let fp = new Fingerprint();
        arr.push(fp.get());
        return arr
    }
    setCookie('kQpFHdoh', aesEncrypt(finalCookie(), tt));  // arr ==> ["111", "2188075175"]
对cookieA/B解密后，得到
    function split( str,reps )  -- 分隔字符串
        local resultStrList = {}
        string.gsub(str,'[^'..reps..']+',function ( w )
            table.insert(resultStrList,w)
        end)
        return resultStrList
    end
    function whiteExtCheck()  -- 白名单后缀名检查
        local reqExt = string.match(ngx.var.uri, ".+%.(%w+)$")  --js
        for _,e in ipairs(whiteExt) do  -- js、css、png
            if reqExt == e then  -- 在白名单里时
                return true
            end
        end
        return false
    end
    function toolsInfoSpider()
        if ToolsProtect and not whiteExtCheck() then  -- 加入一个白名单机制，对后缀为js、css、png、jpg等静态资源不做工具检查
            local clientCookieA = ngx.var.cookie_h0yGbdRv
            local clientCookieB = ngx.var.cookie_kQpFHdoh
            if not (clientCookieA and clientCookieB) then
                local ip = 'xxx'  -- 服务器ip
                local finalPath = 'http://'..ip..'/'..jsPath..'?origin='..encodeBase64(ngx.var.request_uri)
                log('1-tools 无cookieA/B', '')
                ngx.redirect(finalPath, 302)
            else
                local result = xpcall(dencrypT, emptyPrint, clientCookieB, clientCookieA)
                if not result then
                    log('2-tools 解密失败', clientCookieA..', '..clientCookieB)
                    say_html()
                else
                    local result2 = dencrypT(clientCookieB, clientCookieA)
                    if #result2  /usr/local/openresty/lualib/resty  # 软链接过来的库文件
    ├── rsp_body.lua  # 处理返回包体内容，由body_filter_by_lua_file调用
    ├── rsp_header.lua  # 处理返回包头内容，header_filter_by_lua_file调用
    ├── tableXstring.lua  # table与string转换
    └── whiteList.lua  # 白名单相关
### 三、小结
功能小结：
本安全网关相较传统waf更偏向业务层面的防护，得益于nginx的良好扩展性，加入lua规则对请求、响应包做增加、删除、修改等操作，在一定程度上降低因原始站点设计缺陷而存在的潜在安全风险，避免对已上架系统进行二次开发，但整套防护方案基于在前端生成的cookie，js安全便成了一个不可忽视的点，后续的重点方向之一便是加强js混淆强度，同时目前编写的5个功能，还存在cookie可被重放使用、处理逻辑返回500状态码等问题，完善已有功能也是接下来更新的重点之一
后期规划：
  * 增强js混淆能力和反逆向能力
  * 防御xss、sql、xxe等传统web攻击
  * 加入图形化日志分析功能，将日志接入splunk、elk等数据处理平台
项目地址：
  * 