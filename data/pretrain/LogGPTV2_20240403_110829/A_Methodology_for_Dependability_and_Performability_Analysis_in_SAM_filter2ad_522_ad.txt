TAM2
TBM1
TBM3
TCM3
TM1A
TM2A
TM1B
TM3B
TM3C
TM2F 1
TF 1M2
TM1F 2
TF 2M1
TM3F 3
TM3F 3
TF 1F 2
TF 2F 1
TF 1F 3
TF 3F 1
TF 2F 3
TF 3F 2
TS , TF
t7 ∼ t12
Immediate trans.
.
t13
t14
t15
t16
t17
t18
t19
t20
t21
Priorities
Table 3. Rates assignment.
λB1
λB3
λM1F 2
λM2F 1
λF 1F 3
λA1
λA2
λC3
λret
λM3F 3
0.1
0.002
0.003
0.2
1.5
0.9
1.1
1.2
1
1.4
λr
λa1, λb1, λc1
λa2, λb2, λc2
λr1, λr2, λr3
λF 1F 2, λF 2F 3
7 shows the numerical results of reliability with regard
to the failure rate λf of banks based on the rates as-
signment in Table 3. From the numerical results we
know that the reliability requirement is satisﬁed when
λf = 0.001.
1
0.9
1.5
1.5
1.6
4.4. Latency Analysis
bank. If we are only interested in the reliability of a
speciﬁc type of requests, the reliability can be obtained
with the same formula by assigning the corresponding
immediate transition a higher priority than the other
transitions. For example, to get the reliability of the
type of requests from bank A to bank C, we can just
assign t1 a higher priority than t2 through t6. Figure
Latency measures the expected time it takes a ser-
vice request to ﬁnish successfully. To analyze latency of
the payment system, we should revise the SRN model
in order to focus only on the successfully served re-
quests. First, all the transitions lead to the failure
state, PF in our model, are removed. Second, the suc-
cess state, a token in PS in our model, is made an
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:45 UTC from IEEE Xplore.  Restrictions apply. 
O verall R eliability
R eliability of Requests A-B
R eliability of Requests A-C
y
t
i
l
i
b
a
i
l
e
R
0.98
0.96
0.94
0.92
0.9
0.88
0.86
0.84
0.82
0.8
0.001
0.002
0.003
0.004
0.005
Failure rate of banks
Figure 7. Reliability of the payment system.
y
t
i
l
i
b
a
b
o
r
P
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
2
3
4
5
6
7
8
9
Latency
Figure 8. Latency distribution.
absorbing state. A state is said to be absorbing if it
enables no transition whose ﬁring results in the exiting
of the state. In our example, we can make the success
state absorbing by removing the outgoing arcs of PS.
Thus, the expected time it takes a check to clear is the
accumulated time it takes the SRN model to run un-
til absorption. The accumulated time can be obtained
using SPNP tool by assigning a constant reward rate 1
to each transient state (i.e. non-absorbing state) and
then calculating the accumulated reward until absorp-
tion. Figure 8 shows the distribution of overall latency
of the payment system, based on the rates assignment
in Table 3 and by assigning λr to 0.001. The results
show that there is at least 90% probability that a re-
quest is served within 5 time units. That is, the latency
requirement speciﬁed in the SAM model is satisﬁed. By
solving the SRN model, we can also get the expected
latency of the whole payment system or the expected
latency for a speciﬁc type of requests. Based on the
same rates assignment above, the expected latency for
the payment system is 2.65.
5. Conclusion
A methodology for dependability and performability
analysis has been presented using the SAM framework.
After incorporating stochastic information into a SAM
model, a SRN model can be derived from the SAM
model. By solving the SRN model using SPNP tool,
a variety of non-functional properties such as perfor-
mance, dependability and performability can be eval-
uated. With this methodology, the SAM framework
is capable of the analysis of both functional properties
and the majority of non-functional properties. To il-
lustrate the methodology, a simpliﬁed payment system
was modeled and its reliability and latency was evalu-
ated as an example. Due to the diﬀerent assumptions
made on the example system, we cannot compare the
numerical results with those in the literature. The val-
idation of the numerical results is not done yet. To
validate the numerical results, it seems to be a good
way to simulate the simpliﬁed payment system in local
network. This work should be included in our future
work.
The analysis for performability and dependability
using SRNs is not new. Our contribution lies in in-
corporating stochastic techniques into the SAM frame-
work so that both functional properties and non-
functional properties like dependability and performa-
bility can be analyzed under one uniﬁed framework.
There are still some non-functional properties, e.g. se-
curity, which cannot be evaluated using this methodol-
ogy. One direction of our future work will focus on in-
vestigating those non- functional properties and further
extending the SAM framework to allow the analysis of
those properties. We also plan to do the tradeoﬀ anal-
ysis of certain conﬂicting non-functional properties.
Acknowledgements
We are grateful to the anonymous reviewers for their
helpful remarks about this paper.
References
[1] I. F. Akyildiz. On the exact and approximate through-
put analysis of closed queuing networks with blocking.
IEEE Trans. Software Eng., 14(1):62–70, 1988.
[2] M. Bernardo, W. R. Cleaveland, S. T. Sims, and W. J.
Stewart. TwoTowers: A tool integrating functional
and performance analysis of concurrent system.
In
Proc. FORTE/PSTV’98, pages 457–467, 1998.
[3] M. Bernardo and R. Gorrieri. A tutorial on EMPA: A
theory of concurrent processes with nondeterminism,
priorities, probabilities and time. Theoretical Com-
puter Science, 202(1-2):1–54, 1998.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:45 UTC from IEEE Xplore.  Restrictions apply. 
[20] A. R. McSpadden and N. Lopez-Benitez. Stochastic
petri nets applied to the performance evaluation of
static task allocations in heterogeneous computing en-
vironments.
In Proc. 6th Heterogeneous Computing
Workshop (HPC’97), pages 185–194, 1997.
[21] Y. Ren and J. B. Dugan. Design of reliable systems
IEEE Trans.
using static and dynamic fault trees.
Reliability, 47(3):234–244, May 1998.
[22] T. G. Robertazzi. Computer Networks and Sys-
tems: Queuing Theory and Performance Evaluation.
Springer-Verlag, second edition, 1994.
[23] N. S. Rosa, G. R. R. Justo, and P. R. F. Cunha. A
framework for building non-functional software archi-
tectures. In Proc. 2001 ACM symposium on Applied
computing, pages 141–147, 2001.
[24] T. Shi and X. He. Modeling and analyzing the soft-
ware architecture of a communication protocol using
SAM. In Proc. 3rd IEEE/IFIP Conference on Soft-
ware Architecture, pages 63–77, 2002.
[25] K. S. Trivedi. SPNP User’s Manuel, version 6.0. De-
partment of Electronic and Computer Engineering,
Duke University, September 1999.
[26] K. S. Trivedi, G. Ciardo, M. Malhotra, and R. A. Sah-
ner. Dependability and performability analysis. Per-
formance Evaluation of Computer and Communica-
tion Systems, LNCS, 729:587–612, 1993.
[27] K. S. Trivedi, M. Malhotra, and R. M. Fricks. Markov
reward approach to performability and reliability anal-
ysis. In Proc. the Second Int’l Workshop on Modeling,
Analysis, and Simulation On Computer and Telecom-
munication Systems, pages 7–11, 1994.
[28] J. Wang, X. He, and Y. Deng. Introducing software ar-
chitecture speciﬁcation and analysis in SAM through
an example.
Information and Software Technology,
41(7):451–467, 1999.
[29] H. Yu, X. He, Y. Deng, and L. Mo. A formal method
for analyzing software architecture models in SAM. In
Proc. 26th Annual Int’l Computer Software and Appli-
cations Conference, pages 645–652, 2002.
[4] J. T. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt.
Ptolemy: A framework for simulating and prototyp-
ing heterogeneous systems. Int’l Journal of Computer
Simulation, 4:155–182, 1994.
[5] G. Chiola. GreatSPN 1.5 software architecture. Com-
puter Performance Evaluation, pages 121–136, 1992.
[6] G. Ciardo, R. L. Jones, R. M. Marmorstein, A. S.
Miner, and R. Siminiceanu.
SMART: Stochastic
model-checking analyzer for reliability and timing. In
Proc. Int’l Conference on Dependable Systems and
Networks (DSN’02), June 1992.
[7] G. Ciardo, J. Muppala, and K. S. Trivedi. Analyzing
concurrent and fault-tolerant software using stochas-
tic reward nets. Journal of Parallel and Distributed
Computing, 15(3):255–269, 1992.
[8] H. Garavel and H. Hermanns. On combining func-
tional veriﬁcation and performance evaluation using
CADP.
In FME 2002: Formal Methods – Getting
IT Right, Int’l Symposium of Formal Methods Europe,
LNCS 2391, pages 410–429, 2002.
[9] H. J. Genrich. Predicate/transition nets. Lecture
Notes in Computer Science, 254:255–269, 1987.
[10] S. Gilmore and J. Hillston. The PEPA workbench:
A tool to support a process algebra-based approach
to perfomance modeling. In Proc. TOOLS’94, pages
353–368, 1994.
[11] K. K. Goswami, R. K. Iyer, and L. Yong. DE-
PEND: A simulation-based environment for system
level dependability analysis. IEEE Trans. Computers,
46(1):60–74, 1997.
[12] H. Hansson and B. Jonsson. A logic for reasoning
about time and reliability. Formal Aspects of Com-
puting, 6(4):512–535, 1994.
[13] X. He and Y. Deng. A framework for developing and
analyzing software architecture speciﬁcations in SAM.
The Computer Journal, 45(1):111–128, 2002.
[14] H. hermanns, U. Herzog, , U. klehmet, V. Mertsio-
takis, and M. Siegle. Compositional performance mod-
eling with TIPPtool. Perfomance Evaluation, 39(1-
4):5–35, 2000.
[15] H. Hermanns, U. Herzog, and J. P. Katoen. Process
algebra for performance evaluation. Theoretical Com-
puter Science, 247(1-2):43–87, 2002.
[16] G. Huszerl, I. Majzik, A. Pataricza, K. Kosmidis, and
M. D. Cin. Quantitative analysis of UML statechart
models of dependable systems. The Computer Jour-
nal, 45(3):260–277, 2002.
[17] O. Ibe and K. S. Trivedi. Stochastic petri net models
of polling systems. IEEE Journal on Selected Areas in
Communications, 8(9):1649–1657, 1990.
[18] S. Jha and J. M. Wing. Survivability analysis of net-
In Proc. 23rd Int’l Conference on
worked systems.
Software Engineering, pages 307–317, May 2001.
[19] R. H. Klenke, M. Meyassed, J. H. Aylor, B. W. John-
son, R. Rao, and A. K. Ghosh. An integrated de-
sign environment for performance and dependability
analysis. In Proc. 34th annual conference on Design
automation, pages 184–189, 1997.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:28:45 UTC from IEEE Xplore.  Restrictions apply.