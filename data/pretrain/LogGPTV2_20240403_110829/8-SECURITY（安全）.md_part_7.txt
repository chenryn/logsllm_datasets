---

### 文件变更记录

#### 新增文件
- `/root/test.txt` # 新建的文件

#### 删除文件
- `/root/anaconda-ks.cfg` # 删除的文件

#### 修改文件
- `/root/.viminfo` # 修改的文件，Vim操作记录，创建文件时由Vim生成

##### 详细修改信息
- **文件**: `/root/.viminfo`
- **大小**:
  - 原始: 6255 字节
  - 修改后: 6240 字节
- **最后修改时间 (mtime)**:
  - 原始: 2019-03-07 15:00:44
  - 修改后: 2019-03-07 15:29:42
- **最后状态改变时间 (ctime)**:
  - 原始: 2019-03-07 15:00:44
  - 修改后: 2019-03-07 15:29:42
- **inode 号**:
  - 原始: 33574986
  - 修改后: 34198411
- **SHA256 校验和**:
  - 原始: i/ZhxCSZY82D1QNrzZyJ4fD7RuCyCc61
  - 修改后: XztXHvArlOlJrhjQYU9saLyU28Wu5Az1

```bash
[root@client-50 ~]# ls /var/lib/aide/
aide.db.gz
```

### Nmap 扫描工具介绍

#### 扫描目的
- 获取公开与非公开信息
- 检测潜在风险
- 查找可攻击目标
- 收集设备、主机、系统及软件信息
- 发现可利用的安全漏洞

#### 扫描方式
- **主动探测 (Scan)**
- **被动监听/嗅探 (Sniff)**
- **数据包捕获 (Capture)**

#### Nmap 简介
Nmap（Network Mapper）是一款在 Linux 下使用的网络扫描和嗅探工具。它主要用于扫描网络上的计算机开放端口，确定运行的服务，并推断操作系统类型。Nmap 是网络管理员常用的工具之一，用于评估网络安全。同时，黑客也可能利用 Nmap 来搜集目标系统的网络配置信息，从而计划攻击。

Nmap 常被误认为是漏洞评估工具 Nessus。实际上，Nmap 的设计更为隐蔽，能够避开入侵检测系统的监视，并尽量减少对目标系统的影响。

#### 基本用法
```bash
nmap [扫描类型] [选项]
```

#### 常用扫描类型
- `-sS`: TCP SYN 扫描（半开）
- `-sT`: TCP 连接扫描（全开）
- `-sU`: UDP 扫描
- `-sP`: ICMP 扫描
- `-A`: 目标系统全面分析

#### 常用选项
- `-p [端口]`: 指定端口
- `-n`: 不进行域名解析

#### 安装 Nmap
```bash
[root@client-50 ~]# which nmap
/usr/bin/nmap
[root@client-50 ~]# yum -y install nmap
```

#### 示例命令
```bash
[root@client-50 ~]# nmap 192.168.4.51
```

#### 使用 `-sP` 扫描在线主机
```bash
[root@client-50 ~]# nmap -sP 192.168.4.51-55
```

### TcpDump 抓包工具

#### 基本用法
```bash
tcpdump [选项] [过滤条件]
```

#### 常见监控选项
- `-i [接口]`: 指定监控的网络接口，默认为 `br0`
- `-A`: 将数据包转换为 ASCII 码以便阅读
- `-w [文件]`: 将数据包信息保存到指定文件
- `-r [文件]`: 从指定文件读取数据包信息
- `-c [数量]`: 指定抓包数量

#### 安装 TcpDump
```bash
[root@client-50 ~]# yum -y install tcpdump
```

#### 示例命令
```bash
[root@client-50 ~]# tcpdump
[root@client-50 ~]# tcpdump -i eth0
[root@client-50 ~]# tcpdump -i eth0 -c 2
[root@client-50 ~]# tcpdump -i eth0 -c 2 -A
[root@client-50 ~]# tcpdump -i eth0 -c 2 -A -w plj.cap
[root@client-50 ~]# cat plj.cap
[root@client-50 ~]# tcpdump -A -r plj.cap
```

#### 过滤条件
- `host [主机]`: 指定主机
- `net [网段]`: 指定网段
- `port [端口]`: 指定端口
- `portrange [范围]`: 指定端口范围

示例：
```bash
[root@client-50 ~]# tcpdump -i eth0 icmp # 抓取 ICMP 包
[root@client-50 ~]# tcpdump -i eth0 icmp and host 176.52.8.208
[root@client-50 ~]# tcpdump -i eth0 tcp port 80 and host 176.52.8.208
[root@client-50 ~]# tcpdump -i eth0 tcp port 22
```

### Wireshark 图形抓包软件

#### 安装
```bash
[root@client-50 ~]# rpm -qa | grep -i wireshark
[root@client-50 ~]# yum -y install wireshark wireshark-gnome
```

- `wireshark`: 主软件
- `wireshark-gnome`: 图形工具

#### 打开 Wireshark
- 应用程序 -> 互联网 -> Wireshark

#### 使用 Wireshark 打开抓包文件
1. 使用 `tcpdump` 命令抓包并保存到文件
   ```bash
   [root@client-50 ~]# tcpdump -i br1 -A -c 2 -w /tmp/ssh.cap tcp port 22
   ```
2. 使用 Wireshark 打开抓包文件
   - 应用程序 -> 互联网 -> Wireshark -> File -> Open -> /tmp/ssh.cap

### 加密与解密案例

#### 问题
使用 GPG 工具实现加/解密及软件签名等功能，完成以下任务：
- 检查文件的 MD5 校验和
- 使用 GPG 实现文件机密性保护，加密和解密操作
- 使用 GPG 的签名机制，验证数据的来源正确性

#### 方案
- **确保数据机密性的算法**:
  - 对称加密算法 (AES, DES)
  - 非对称加密算法 (RSA, DSA)
- **确保数据完整性的算法**:
  - 信息摘要 (MD5, SHA256, SHA512)

#### 步骤

##### 检查文件的 MD5 校验和
1. 查看文件改动前的校验和
   ```bash
   [root@proxy ~]# vim file1.txt
   abcdef
   123456779
   [root@proxy ~]# cp file1.txt file2.txt
   [root@proxy ~]# cat file1.txt > file3.txt
   [root@proxy ~]# md5sum file?.txt
   b92aa0f8aa5d5af5a47c6896283f3536 file1.txt
   b92aa0f8aa5d5af5a47c6896283f3536 file2.txt
   b92aa0f8aa5d5af5a47c6896283f3536 file3.txt
   ```
2. 对文件内容稍作改动，再次检查校验和
   ```bash
   [root@proxy ~]# echo "x" >> file1.txt
   [root@proxy ~]# md5sum file?.txt
   6be3efe71d8b4b1ed34ac45f4edd2ba7 file1.txt
   b92aa0f8aa5d5af5a47c6896283f3536 file2.txt
   b92aa0f8aa5d5af5a47c6896283f3536 file3.txt
   ```

##### 使用 GPG 对称加密方式保护文件
1. 确保已安装 GnuPG
   ```bash
   [root@proxy ~]# yum -y install gnupg2
   [root@proxy ~]# gpg --version
   gpg (GnuPG) 2.0.22
   ```
2. 使用对称加密算法加密数据
   ```bash
   [root@proxy ~]# gpg -c file2.txt
   ```
   输入两次密码即可。
3. 解密文件
   ```bash
   [root@proxy ~]# gpg -d file2.txt.gpg > file2.txt
   [root@proxy ~]# cat file2.txt
   abcdef
   123456779
   ```

##### 使用 GPG 非对称加密方式保护文件
1. 接收方 UserA 创建公钥和私钥对
   ```bash
   [root@client ~]# gpg --gen-key
   ```
   选择默认设置并确认用户标识。

希望这些优化后的文本更加清晰、连贯和专业。