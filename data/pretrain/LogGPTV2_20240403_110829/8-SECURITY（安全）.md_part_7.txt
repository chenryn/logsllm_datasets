\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
Added files:
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
added: /root/test.txt #新建的文件
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
Removed files:
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
removed: /root/anaconda-ks.cfg #删除的文件
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
Changed files:
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
changed: /root/.viminfo
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
Detailed information about changes:
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
File: /root/.viminfo #修改的文件,vim的操作记录,创建文件是vim创建的
Size : 6255 , 6240
Mtime : 2019-03-07 15:00:44 , 2019-03-07 15:29:42
Ctime : 2019-03-07 15:00:44 , 2019-03-07 15:29:42
Inode : 33574986 , 34198411
SHA256 : i/ZhxCSZY82D1QNrzZyJ4fD7RuCyCc61 ,
XztXHvArlOlJrhjQYU9saLyU28Wu5Az1
\[root@client-50 \~\]# ls /var/lib/aide/
aide.db.gz
# 5扫描nmap
**为扫描需要扫描:**
-   获取一些公开与非公开信息为目的
-   检测潜在的风险
-   查找可攻击目标
-   收集设备/主机/系统/软件信息
-   发现可利用的安全漏洞
**扫描方式**
-   Scan 主动探测
-   Sniff 被动监听/嗅探
-   Capture 数据包捕获(抓包)
## nmap介绍
nmap，也就是Network Mapper，是Linux下的网络扫描和嗅探工具包。
nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统（这是亦称
fingerprinting）。它是网络管理员必用的软件之一，以及用以评估网络系统安全。
正如大多数被用于网络安全的工具，nmap
也是不少黑客及骇客（又称脚本小子）爱用的工具
。系统管理员可以利用nmap来探测工作环境中未经批准使用的服务器，但是黑客会利用nmap来搜集目标电脑的网络设定，从而计划攻击的方法。
Nmap 常被跟评估系统漏洞软件Nessus 混为一谈。Nmap
以隐秘的手法，避开闯入检测系统的监视，并尽可能不影响目标系统的日常操作。
**基本用法**
nmap \[扫描类型\] \[选项\] \
**常用扫描类型**
-sS,TCP SYN扫描(半开) A三次握手B,A-B B-A A不在回应B
-sT,TCP 连接扫描(全开) A三次握手B,A-B B-A A-B
-sU,UDP扫描
-sP,ICMP扫描
-A,目标系统全面分析
**常用选项**
**-p 指定端口**
**-n 不做域名解析**
## 安装软件nmap
\[root@client-50 \~\]# which nmap
/usr/bin/nmap
\[root@client-50 \~\]# yum -y install nmap
## 命令用法:
nmap \[扫描类型\] \[选项\] \
\[root@client-50 \~\]# nmap 192.168.4.51 #可不填写扫描类型与选项
Starting Nmap 6.40 ( http://nmap.org ) at 2019-03-07 16:08 CST
mass_dns: warning: Unable to determine any DNS servers. Reverse DNS is
disabled. Try using \--system-dns or specify valid servers with
\--dns-servers
Nmap scan report for 192.168.4.51
Host is up (0.00032s latency).
Not shown: 997 closed ports
PORT STATE SERVICE
22/tcp open ssh
80/tcp open http
111/tcp open rpcbind
MAC Address: 52:54:00:57:34:54 (QEMU Virtual NIC)
Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds
**-sP,扫描类型(**ICMP扫描)
扫描哪些机器在线,
可扫单个主机,主机范围(51-55),网络段(192.168.4.0)
\[root@client-50 \~\]# nmap -sP 192.168.4.51-55
Starting Nmap 6.40 ( http://nmap.org ) at 2019-03-07 16:17 CST
mass_dns: warning: Unable to determine any DNS servers. Reverse DNS is
disabled. Try using \--system-dns or specify valid servers with
\--dns-servers
Nmap scan report for 192.168.4.51
Host is up (0.00036s latency).
MAC Address: 52:54:00:57:34:54 (QEMU Virtual NIC)
Nmap scan report for 192.168.4.52
Host is up (0.00044s latency).
MAC Address: 52:54:00:25:78:11 (QEMU Virtual NIC)
Nmap done: 5 IP addresses (2 hosts up) scanned in 0.23 seconds
**-P 指定扫描端口(只识别默认的软件服务端口)**
# 6 tcpdump命令抓包
TcpDump可以将网络中传送的数据包完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。
包必须经过主机或者到达这个主机,这个主机才能抓包
## 基本用法
tcpdump \[选项\] \[过滤条件\]
常见监控选项
-i 指定监控的网络接口(网卡) 默认是br0
-A 转换为ACSII码,以方便阅读
-w 将数据包信息保存到指定文件
-r 从指定文件读取数据包信息
-c 指定抓包数量
安装
\[root@client-50 \~\]# yum -y install tcpdump
例子
\[root@client-50 \~\]# tcpdump #抓取所有到达本机的包
\[root@client-50 \~\]# tcpdump -i eth0
\[root@client-50 \~\]# tcpdump -i eth0 -c 2
\[root@client-50 \~\]# tcpdump -i eth0 -c 2 -A
\[root@client-50 \~\]# tcpdump -i eth0 -c 2 -A -w plj.cap
\[root@client-50 \~\]# cat plj.cap
\[root@client-50 \~\]# tcpdump -A -r plj.cap
## 过滤条件
![](media/image3.png){width="4.472222222222222in"
height="2.0729166666666665in"}
host 主机 net 网段 port 端口 portrange
\]# tcpdump -i eth0 icmp #抓ping包
611 tcpdump -i eth0 icmp and host 176.52.8.208
612 tcpdump -i eth0 tcp port 80 and host 176.52.8.208
613 tcpdump -i eth0 tcp port 22
# 7 WireShark图形抓包软件
安装
618 rpm -qa \|grep -i wireshark
619 yum -y install wireshark wireshark-gnome
wireshark 主软件
wireshark-gnome 图形工具
打开转包软件
应用程序\--互连网\-\--软件名
WireShark可以把tcpdump命令的抓包文件打开查看抓包内容
1 使用tcpdump命令 抓包并保存到文件里
\]# tcpdump -i br1 -A -c 2 -w /tmp/ssh.cap tcp port 22
2 使用WireShark打开抓包文件
应用程序\--互连网\-\--软件名\--\> file \-\--\> open \--/tmp/ssh.cap
# 案例
案例1：加密与解密应用
案例2：使用AIDE做入侵检测
案例3：扫描与抓包分析
1 案例1：加密与解密应用
1.1 问题
本案例要求采用gpg工具实现加/解密及软件签名等功能，分别完成以下任务：
检查文件的MD5校验和
使用GPG实现文件机密性保护，加密和解密操作
使用GPG的签名机制，验证数据的来源正确性
1.2 方案
加密算法主要有以下几种分类：
1.为确保数据机密性算法：
a\) 对称加密算法(AES,DES)
b\) 非对称加密算法（RSA，DSA）
2.为确保数据完整性算法：
a\) 信息摘要（MD5，SHA256，SHA512）
1.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：检查文件的MD5校验和
1） 查看文件改动前的校验和，复制为新文件其校验和不变
\[root@proxy \~\]# vim file1.txt
abcdef
123456779
\[root@proxy \~\]# cp file1.txt file2.txt
\[root@proxy \~\]# cat file1.txt \> file3.txt
\[root@proxy \~\]# md5sum file?.txt //文件内容一致，则校验和也不变
b92aa0f8aa5d5af5a47c6896283f3536 file1.txt
b92aa0f8aa5d5af5a47c6896283f3536 file2.txt
b92aa0f8aa5d5af5a47c6896283f3536 file3.txt
2） 对文件内容稍作改动，再次检查校验和，会发现校验和已大不相同
\[root@proxy \~\]# echo \"x\" \>\> file1.txt
\[root@proxy \~\]# md5sum file?.txt
6be3efe71d8b4b1ed34ac45f4edd2ba7 file1.txt
b92aa0f8aa5d5af5a47c6896283f3536 file2.txt
b92aa0f8aa5d5af5a47c6896283f3536 file3.txt
步骤二：使用GPG对称加密方式保护文件
GnuPG是非常流行的加密软件，支持所有常见加密算法，并且开源免费使用。
1）确保已经安装了相关软件（默认已经安装好了）
\[root@proxy \~\]# yum -y install gnupg2 //安装软件
\[root@proxy \~\]# gpg \--version //查看版本
gpg (GnuPG) 2.0.22
2） gpg使用对称加密算法加密数据的操作
执行下列操作：
\[root@proxy \~\]# gpg -c file2.txt
.. ..
根据提示依次输入两次密码即可。如果是在GNOME桌面环境，设置密码的交互界面会是弹出的窗口程序，如图-1所示：
图－1
如果是在tty终端执行的上述加密操作，则提示界面也是文本方式的，如图-2所示。
图-2
根据提示输入两次口令，加密后的文件（自动添加后缀
.gpg）就生成了，传递过程中只要发送加密的文件（比如
file2.txt.gpg）就可以了。
\[root@proxy \~\]# cat file2.txt.gpg //查看加密数据为乱码
3）使用gpg对加密文件进行解密操作
收到加密的文件后，必须进行解密才能查看其内容。
\[root@proxy \~\]# gpg -d file2.txt.gpg \> file2.txt //解密后保存
gpg: 3DES 加密过的数据
.. .. //根据提示输入正确密码
\[root@proxy \~\]# cat file2.txt //查看解密后的文件
abcdef
123456779
步骤三：使用GPG非对称加密方式保护文件
非对称加密/解密文件时，UserA（192.168.4.100）生成私钥与公钥，并把公钥发送给UserB（192.168.4.5），UserB使用公钥加密数据，并把加密后的数据传给UserA，UserA最后使用自己的私钥解密数据。
实现过程如下所述。
1）接收方UserA创建自己的公钥、私钥对(在192.168.4.100操作)
\[root@client \~\]# gpg \--gen-key //创建密钥对
... ...
请选择您要使用的密钥种类：
\(1\) RSA and RSA (default) //默认算法为RSA
\(2\) DSA and Elgamal
\(3\) DSA (仅用于签名)
\(4\) RSA (仅用于签名)
您的选择？ //直接回车默认(1)
RSA 密钥长度应在 1024 位与 4096 位之间。
您想要用多大的密钥尺寸？(2048) //接受默认2048位
您所要求的密钥尺寸是 2048 位
请设定这把密钥的有效期限。
0 = 密钥永不过期
\ = 密钥在 n 天后过期
\w = 密钥在 n 周后过期
\m = 密钥在 n 月后过期
\y = 密钥在 n 年后过期
密钥的有效期限是？(0) //接受默认永不过期
密钥永远不会过期
以上正确吗？(y/n)y //输入y确认
You need a user ID to identify your key; the software constructs the
user ID
from the Real Name, Comment and Email Address in this form:
\"Heinrich Heine (Der Dichter) \\"
真实姓名：UserA
电子邮件地址：PI:EMAIL
注释：UserA
您选定了这个用户标识：
"UserA (UserA) \"
更改姓名(N)、注释(C)、电子邮件地址(E)或确定(O)/退出(Q)？O