## PostgreSQL 14 预览 - 自动分析：预读 - 添加 "IO 读取时间" 日志消息
### 作者
digoal
### 日期
2020-11-10
### 标签
PostgreSQL, 分析, 资源消耗统计, IO 统计

---

## 背景
在 PostgreSQL 中，自动分析功能用于定期收集表的统计信息。本文讨论了在某些配置下，自动分析过程中出现的性能问题，并提出了一种解决方案。

相关链接：
- [Commitfest PostgreSQL 30 #2799](https://commitfest.postgresql.org/30/2799/)
- [PostgreSQL 邮件列表](https://www.postgresql.org/message-id/flat/PI:EMAIL)

---

## 问题描述
Jakub Wartak 在邮件列表中报告了一个关于自动分析性能的问题。他指出，在一个对统计信息新鲜度要求极高的系统中，自动分析被配置得非常激进：

```plaintext
autovacuum_vacuum_cost_delay=0 (使 autovacuum_vacuum_cost_limit 失效)
autovacuum_naptime=1s
autovacuum_max_workers=4
```

某些关键表分区的配置如下：

```plaintext
autovacuum_analyze_scale_factor=0.001
autovacuum_analyze_threshold=50000
```

这导致自动分析作业频繁运行。日志显示以下信息：

```plaintext
automatic analyze of table "t1" system usage: CPU: user: 37.52 s, system: 23.01 s, elapsed: 252.14 s
automatic analyze of table "t2" system usage: CPU: user: 38.70 s, system: 22.63 s, elapsed: 317.33 s
automatic analyze of table "t2" system usage: CPU: user: 39.38 s, system: 21.43 s, elapsed: 213.58 s
automatic analyze of table "t1" system usage: CPU: user: 37.91 s, system: 24.49 s, elapsed: 229.45 s
```

从这些日志可以看出，实际耗时（elapsed）与用户和系统时间之和存在显著差异。根据各种工具的报告，这段时间主要被 I/O 操作占用，而不是 PostgreSQL 的分析过程本身。

通过 `ps(1)` 和 `pidstat(1)` 命令，可以观察到工作进程的 CPU 使用情况：

```plaintext
06:56:12 AM       PID    %usr %system  %guest    %CPU   CPU  Command    
06:56:13 AM    114774    8.00   10.00    0.00   18.00    18  postgres    
06:56:14 AM    114774    8.00   11.00    0.00   19.00    15  postgres    
06:56:15 AM    114774    5.00   13.00    0.00   18.00    18  postgres    
```

以及 I/O 读写速率：

```plaintext
06:56:17 AM       PID   kB_rd/s   kB_wr/s kB_ccwr/s  Command    
06:56:18 AM    114774  63746.53      0.00      0.00  postgres    
06:56:19 AM    114774  62896.00      0.00      0.00  postgres    
06:56:20 AM    114774  62920.00      0.00      0.00  postgres    
```

尽管 I/O 系统的吞吐量不高（总读取速率为 242MB/s，读 IOPS 为 22k，写速率为 7MB/s，写 IOPS 为 7k），但利用率却很高。同时，最多有 3 到 4 个这样的 70-80MB/s 的分析任务并行运行（总计约 300MB/s 用于统计信息收集）。

通过 GDB 反追踪，发现大量时间花费在 `pread` 系统调用上：

```plaintext
#0  0x00007f98cdfc9f73 in __pread_nocancel () from /lib64/libpthread.so.0
#1  0x0000000000741a16 in pread (__offset=811253760, __nbytes=8192, __buf=0x7f9413ab7280, __fd=) at /usr/include/bits/unistd.h:84
#2  FileRead (file=, buffer=0x7f9413ab7280 "\037\005", amount=8192, offset=811253760, wait_event_info=167772173) at fd.c:1883
...
```

进一步的性能分析显示，大部分时间被文件系统的预读操作所占用：

```plaintext
# Children      Self       sys       usr  Command   Shared Object       Symbol    
  63.64%     0.00%     0.00%     0.00%  postgres  [kernel.kallsyms]   [k] entry_SYSCALL_64_after_hwframe
  ...
  61.36%     0.00%     0.00%     0.00%  postgres  postgres            [.] FileRead
  ...
  59.66%     0.00%     0.00%     0.00%  postgres  [kernel.kallsyms]   [k] sys_pread64
  ...
```

---

## 解决方案
为了更好地理解 I/O 读取时间的影响，建议在自动分析过程中添加 "IO 读取时间" 的日志消息。这将帮助我们更准确地识别和优化 I/O 性能瓶颈。

具体实现可以通过在 `analyze.c` 文件中添加适当的日志记录代码来完成。这样，我们可以更清楚地看到每个 I/O 操作的实际耗时，并据此进行优化。

希望这个提议能够帮助改善自动分析的性能。欢迎社区成员提供反馈和建议。

---

如有任何问题或需要进一步讨论，请随时联系我。