title:FRAMER: a tagged-pointer capability system with memory safety applications
author:Myoung Jin Nam and
Periklis Akritidis and
David J. Greaves
FRAMER: A Tagged-Pointer Capability System with Memory
Safety Applications
Myoung Jin Nam
PI:EMAIL
Korea University
Seoul, South Korea
Periklis Akritidis
PI:EMAIL
Niometrics
Singapore
David J Greaves
PI:EMAIL
University of Cambridge
Cambridge, United Kingdom
ABSTRACT
Security mechanisms for systems programming languages, such as
fine-grained memory protection for C/C++, authorize operations
at runtime using access rights associated with objects and point-
ers. The cost of such fine-grained capability-based security models
is dominated by metadata updates and lookups, making efficient
metadata management the key for minimizing performance impact.
Existing approaches reduce metadata management overheads by
sacrificing precision, breaking binary compatibility by changing
object memory layout, or wasting space with excessive alignment
or large shadow memory spaces.
We propose FRAMER, a capability framework with object granu-
larity. Its sound and deterministic per-object metadata management
mechanism enables direct access to metadata by calculating their
location from a tagged pointer to the object and a compact sup-
plementary table. This may improve the performance of memory
safety, type safety, thread safety and garbage collection, or any so-
lution that needs to map pointers to metadata. FRAMER improves
over previous solutions by simultaneously (1) providing a novel
encoding that derives the location of per-object metadata with low
memory overhead and without any assumption of objects’ align-
ment or size, (2) offering flexibility in metadata placement and size,
(3) saving space by removing any padding or re-alignment, and
(4) avoiding internal object memory layout changes. We evaluate
FRAMER with a use case on memory safety.
CCS CONCEPTS
• Security and privacy → Systems security; Software and ap-
plication security.
KEYWORDS
Security, Tagged Pointers, Memory Safety, Bounds Checking, Object-
Capability Model, LLVM
1 INTRODUCTION
Despite advances in software defenses, exploitation of systems
code written in unsafe languages such as C and C++ is still possible.
Security exploits use memory safety vulnerabilities to corrupt or
leak sensitive data, and hijack a vulnerable program’s logic. In
response, several defenses have been proposed for making software
exploitation hard.
Current defenses fall in two basic categories: those that let mem-
ory corruption happen, but harden the program to prevent ex-
ploitation, and those that try to detect and block memory corrup-
tion in the first place. In the first category, for instance, Control-
flow Integrity (CFI) [1, 14, 20, 35, 37, 45–47, 53–55] contains all
control flows in a statically computed Control-flow Graph (CFG),
while Address Space Layout Randomization (ASLR) hides the avail-
able CFG when the process executes. Both approaches can be by-
passed [15, 42], since memory corruption is still possible, albeit
exploitation is much harder.
We focus on the second category, including deterministic ap-
proaches that detect and block memory safety violations by main-
taining runtime metadata for access rights and instrumenting the
program to block unintended accesses at runtime [3, 5, 13, 16, 19, 21–
23, 32–34, 52]. These systems can offer deterministic guarantees by
preventing memory corruption in the first place, however tracking
all objects (or pointers) incurs heavy performance overheads. Per-
formance is critical for adoption since unsafe languages like C/C++
are employed for performance-sensitive applications. Some of these
systems trade accuracy for speed by allowing false negatives, and
hence are more useful for troubleshooting than security.
Some existing techniques trade off compatibility for high locality
of reference, however, it is desirable to minimise the disruption
owing to tacit assumptions by programmers and compatibility with
existing code or libraries that cannot be recompiled. In particular, so-
called fat pointers [34] impose incompatibility issues with external
modules, especially precompiled libraries.
With these limitations in mind, object-capability models [9, 25,
48, 49] using hardware-supported tags become very attractive, be-
cause they can manage compatibility and control runtime costs.
However, they cannot entirely avoid undesirable overheads such
as metadata management related memory accesses just by virtue
of being hardware-based. In turn, some hardware-based solutions
also trade accuracy for acceptable performance [? ].
In this paper, we present FRAMER, a memory-efficient capability
model using tagged pointers for fast and flexible metadata access.
FRAMER provides efficient per-object metadata management that
enables direct access to metadata by calculating their location using
the (currently) unused top 16 bits of a 64-bit pointer to the object
and a compact supplementary table. The key considerations behind
FRAMER are as follows.
Firstly, FRAMER enables the memory manager freedom to place
metadata in the associated header near the object to maximise
spatial locality, which has positive effects at all levels of the memory
hierarchy. Headers can vary in size, unlike approaches that store
the header at a system-wide fixed offset from the object, which
may be useful in some applications. Headers can also be shared
over object instances (although we do not develop that aspect in
this paper). Our evaluation shows excellent D-cache performance
where the performance impact of software checking is, to a fair
extent, mitigated by improved instructions per cycle (IPC).
OBJECT
P
UB
64
64
(a) Fat pointers
LB
64
OBJECT
LB
UB
P
32
32
(b) SGXBounds
Figure 1: Embedded Metadata: P, UB, and LB represent a
pointer itself, upper bound, and lower bound, respectively.
Secondly, the address of the header holding metadata is derived
from tagged pointers regardless of objects’ alignment or size. We
use a novel technique to encode the relative location of the header in
unused bits at the top of a pointer. Moreover, the encoding is such
that, despite being relative to the address in the pointer, the tag
does not require updating when the address in the pointer changes.
A supplementary table is used only for cases where the location
information cannot be directly addressed with the additional 16-bits
in the pointer. The address of the corresponding entry in the table
is also calculated from our tagged pointer. With the help of the
tag, this table is significantly smaller compared to typical shadow
memory implementations.
Thirdly, we avoid wasting memory from any padding and su-
perfluous alignment, whereas existing approaches using shadow
space [3, 17, 25, 32, 39] re-align or group objects to avoid conflicts
in entries, FRAMER provides great flexibility in alignment, that
completely removes constraining the objects or memory. The av-
erage of space overheads of our approach is 20% for full checking
despite the generous size of metadata and the supplementary table
in our current design.
Fourthly, our approach facilitates compatibility. Our tag is en-
coded in otherwise unused bits at the top of a pointer, but the
pointer size is unchanged and contiguity can be ensured.
The contributions of this paper are the following:
∙ We present an efficient encoding technique for relative off-
sets that is compact and avoids imposing object alignment
or size constraints. Moreover, it is favourable for hardware
implementation.
∙ Based on the proposed encoding, we design, implement and
evaluate FRAMER, a generic framework for fast and practical
object-metadata management with potential applications in
memory safety, type safety and garbage collection.
∙ We illustrate the use of FRAMER with a case study on spatial
memory safety that guarantees near-zero false negatives/-
positives, using our framework to allow inexpensive valida-
tion of pointer dereferences by associating pointers to object
metadata containing bounds information. We demonstrate
promising low memory overheads and high instruction-level
parallelism.
2 BACKGROUND AND RELATED WORK
Several approaches have been proposed for tracking memory and
detecting memory-related errors. The overhead is one of the biggest
challenges of run-time protection mechanisms along with detection
coverage. In light of recent hardware-based solutions, memory
Myoung Jin Nam, et al.
bandwidth remains the main performance constraint for a broad
class of applications and additional cache misses or DRAM row
activations, owing to lack of spatial consistency, larger footprint or
poor structure alignment, always needs to be minimised. We review
here trade-offs of systems that either track objects or pointers.
Pointer-based tracking guarantees near complete memory safety.
Its per-pointer metadata hold the valid range that a pointer is al-
lowed to point to. This enables it to detect internal overflows easier,
such as an array out-of-bounds inside a structure, unlike object-
based approaches.
Pointer-based approaches are often implemented using fat point-
ers [5, 34? ]. They define a new pointer representation that carries
metadata with itself, thus increasing locality but sacrificing com-
patibility. Since fat pointers increase the number of bytes used to
hold a pointer (Fig. 1a) they require modification of the memory
layout and this damages compatibility with non-instrumented code.
Moreover, updates to fat pointers spanning multiple words are not
atomic, while some parallel programs rely on this.
Several pointer-based approaches [32] chose memory layout
compatibility over locality. Using disjoint metadata achieves com-
patibility by storing metadata in a separate memory region. In-
tel MPX [19, 31, 36] is an ISA extension that provides hardware-
accelerated pointer-checking using disjoint metadata in a bounds
table holding per-pointer metadata as illustrated in Fig. 2b.
Pointer-tracking approaches’ strong guarantees comes with the
additional runtime overhead from metadata copy and update at
pointer assignment, while object-based approaches update meta-
data only at memory allocation/release. In addition, the number of
pointers is typically larger than that of allocated objects, so pointer-
intensive programs may suffer from heavier runtime overheads.
Hardware support [10, 19, 25, 49? ? ] does not remove this over-
head. Reportedly, MPX suffers due to lack of memory even with
small working sets [24], and has turned out to be slow for pointer-
intensive programs, owing to exhausting the limited number of
special-purpose bounds registers (4 registers), requiring spill opera-
tions from regions of memory that themselves require management
and consume D-cache bandwidth and capacity.
Due to the heavy cost of per-pointer metadata, more techniques
track objects. Object-based approaches [22? ? ] store metadata per
object and also make a trade-off against complete memory safety. By
not changing the memory layout of objects, they offer compatibility
with current source and precompiled legacy libraries.
Modern approaches reduce slowdown using a shadow space that
allows direct array access to metadata [3, 8, 10, 17, 32, 34, 38, 51].
Beyond early techniques’ byte-to-byte mapping of the application
space, recent techniques reduced the size of shadow space with
compact encoding, at the cost of minimum allocation size or loss of
some precision. An example is Baggy bounds checking (BBC) [3].
BBC mandates object alignment to the base of a block, to prevent
metadata conflicts caused by multiple objects in one block. In addi-
tion, it pads each object to the next power of two, so that each one-
byte sized entry stores only 𝑙𝑜𝑔2(padded object size). BBC performs
approximate bounds checking, tolerating going out-of-bounds yet
within the padded bound.
Address Sanitizer [39] (ASan) utilizes shadow space differently.
It re-aligns and pads each object with redzones front and back as
shown in Fig. 2a, and considers access to redzones as out-of-bounds.
FRAMER: A Tagged-Pointer Capability System with Memory Safety Applications
OBJECT
OBJECT
P1
shadow space
(a) Address Sanitizer
OBJECT
LB UB
P1
LB UB
bounds table
P2
(b) MPX
a
. . .
20
21
22
23
24
b
Memory Space
c
. . .
Aligned Frames
Figure 2: Disjoint Metadata
At memory access, ASan derives the address of its corresponding
entry from a pointer, and the entry tells if the address is addressable.
Disadvantage of ASan is that its error detection relies on spatial
distance. It loses track of pointers going far beyond of redzone and
reaching another object’s valid range, so fails to address tracking
intended referents [22]. The wider the redzone, the more errors ASan
detects. ASan detects most errors, but it is less deterministic in
theory and trades-off memory space for detection coverage. In our
experiments, ASan and FRAMER’s normalised memory footprints
are 8.84 and 1.23, respectively.
Rather than fat pointers or shadow space, tagged pointers [23, 24]
can instead be used. SGXBounds [24] trades-off address space for
speed and near-complete memory safety. SGXBounds makes objects
carry their metadata in a footer as shown in Fig. 1b, and utilizes
the higher 32 bits of a pointer to hold the metadata location (upper
bound of its referent at the same time). Storing the absolute address
of bounds frees SGXBounds from false negatives that challenge
many object-tracking approaches. This approach works when there
are enough spare bits in pointers, which is the case with SGX
enclaves, where only 36 bits of virtual address space are currently
supported.
Hardware accelerated tagged pointers are available without sacri-
ficing address space. ARM v8.5 ISA [26, 27] introduces the Memory
Tagging Extension (MTE) assigning a 4-bit tag to each 16 bytes at
memory allocation, and tapping memory accesses with incorrect
tags in the pointer. The memory bandwidth impact will depend
greatly on the underlying hardware architecture and could be close
to zero if the tags are largely implemented in separate hardware
resources and blocks are normally cleared on allocation. However,
this approach has 1/16 chance of false negatives at each memory
access.
In this work, to achieve deterministic memory protection with
data memory efficiency, while preserving the full 48-bit address
space available in contemporary CPUs, we sacrifice dynamic in-
struction counts. We (1) rein in the increase in extra cache misses for
metadata (owing to spatial locality compared with a total shadow
memory approach) and (2) we tolerate an increase in outgrowth of
executed instructions for arithmetic operations. This may sound un-
favourable, but note that we can move to an even sweeter spot in the
future where the instruction overhead for calculation is reduced
via customised ISA. Our framework provides a novel encoding
that derives metadata location from a tagged pointer, lowering both
memory footprint and cache misses. In our experiments, normalised
L1 D-cache miss counts for FRAMER and ASan on average are 1.40
and 2.31, respectively.
Figure 3: Aligned frames in memory space: a memory space
can be divided into frames that are defined by memory
blocks that are 2𝑛-sized and aligned by their size. A memory
object’s wrapper frame is the smallest frame completely con-
taining the object. For instance, the 2-byte sized object a’s
wrapper frame size is 21 (called 1-frame). In the same way,
objects b and c’s wrapper frames are 4-frame and 3-frame,
respectively.
FRAMER can be the base of a solution for both (1) practical
deployment with customised ISA for its efficiency of memory foot-
print and cache memory and (2) sound runtime verification during
development.
3 FRAMER APPROACH
In a nutshell, FRAMER places per-object metadata close to their
object and calculates the location of metadata from only (1) an
inbound pointer and (2) additional information tagged in the oth-
erwise unused, top 16 bits of the pointer. We exploit the fact that
relative addresses can be encoded in far fewer bits than absolute
addresses with assistance from the memory manager to restrict the
distance between the allocation for an object and a separate object
for its metadata. In our case, the metadata can be stored in front
of the object, essentially as a header that an object carries with
itself, requiring only a single memory manager allocation. For the
remaining cases where the relative address cannot fit in a 16-bit tag,
we use a compact supplementary table to locate the header. The tag
encodes when this is the case, and also sufficient information to
locate the supplementary entry.
We are now going to introduce the concept of frames used to
encode relative offsets. We first define frames in Section 3.1 and
show how to calculate an object’s wrapper frame in Section 3.2.
In Section 3.3 we explain how relative location can be encoded
in a tagged pointer using these concepts, and how to exploit this
encoding to reduce the supplementary table’s size.
3.1 Frame Definitions
To record the relative location in the top 16 bits of a 64-bit pointer,
which are spare in contemporary CPUs, we define a logical structure
over the whole data space of a process, including statics, stack, and
heap. The FRAMER structures are based on the concept of frames,