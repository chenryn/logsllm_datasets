/var/spool/mail/root
root#
In Table 3, the attacker ﬁrst creates a temporary copy of csh, /var/spool/
mail/tmp, in the mailbox directory. In step 2, the attacker enables the setuid
bit of the copy of csh and makes it publicly executable. In step 3, the attacker
renames the temporary copy to the mail-box ﬁle of root, in eﬀect creating a
counterfeit mail-box ﬁle of root. Then the attacker does not send mail to root,
but waits until another user sends mail to root. After a user sends mail to root
using mail, the attacker executes the mail-box ﬁle to obtain root accesses.
It is not straightforward to identify all possible sequences of actions that
exploit a given vulnerability. One cannot just examine one attack scenario and
extract the steps in the scenario to form the signature. For example, the signature
extracted from the ﬁrst attack could consist of three key actions: 1) the attacker
creates a counterfeit mail-box ﬁle of root, 2) the attacker changes the permission
of the counterfeit ﬁle, and 3) the attacker changes the ownership of the mail-
box ﬁle. However, such signature will fail to detect the second variation of the
attack. One needs to know the intrinsic problem behind the vulnerability. The
ﬂaw presented in this section allow the system to move into a compromised
state if the mail-box ﬁle of root is setuid and publicly executable when binmail
is run, or more exactly, when binmail performs the chown call to change the
ownership of root’s mail-box ﬁle. Therefore, in order to detect exploitations of
System Health and Intrusion Monitoring Using a Hierarchy of Constraints
195
Table 3. Second Variant of an Intrusion Exploiting /bin/mail.
Step
1.
2.
3.
4.
5.
6.
Command
cp /bin/csh /var/spool/mail/tmp
chmod 4777 /var/spool/mail/tmp
mv /var/spool/mail/tmp
/var/spool/mail/root
other% mail root
/var/spool/mail/root
root#
Comment
Create a temporary copy of C shell
Make the copy setuid
Rename the temporary copy
Another user send mail to root
Execute setuid-to-root shell
Prompt of root shell
this vulnerability, we need to 1) detect the actions by the attacker that result in
a counterfeit mail-box ﬁle of root that is setuid and publicly executable, and 2)
detect when binmail changes the ownership of the ﬁle /var/spool/mail/root to
root while the mode of the ﬁle is setuid and publicly executable.
2.3 Attacks on the Address Resolution Protocol (ARP)
At the application level, computers communicating over the Internet use IP ad-
dressing. Physically, however, computers communicate using devices with hard-
wired hardware addresses. The ARP protocol allows one to map an application-
level IP address into the physical address (e.g., Ethernet address) that the hard-
ware needs to send the electronic signal. Applications using IP address infor-
mation as a basis for trust, then, can be fooled into communicating with an
untrusted machine if this mapping mechanism can be corrupted.
A machine attempting to connect to another will broadcast an ARP address
request to all other machines on its network. The message is of the form
Who-has  Tell 
The remote host with the requested destination IP address will reply with his
hardware address to the speciﬁc machine making the query. The reply looks like
 is-at 
Once a machine’s query has been answered it will typically keep a copy of the
mapping in its local ARP cache, alleviating the need to continually query for
each message. Entries in the cache will timeout after a speciﬁed time interval
after which a remote machine will need to be queried again for further com-
munication. In this manner, a network of computers automatically handles the
physical communications of applications using IP addressing, even when ma-
chines leave or join the domain. Since the ARP protocol is designed with the
assumption that all the hosts on the physical network are all well behaved, a
malicious host on the network could fool other hosts into believing a wrong IP to
physical address mapping. We have identiﬁed four diﬀerent types of ARP cache
poisoning.
196
C. Ko et al.
1. Unsolicited response. Some operating systems blindly accept ARP replies
whether or not they have sent a previous request. Forging a fake response
message poisons that machines ARP cache.
2. Malformed request. Oftentimes, a third party machine will cache the
information contained in a third party broadcast request even though it is
not involved in the protocol transaction. Sending requests with fake source
information poisons these machines cache.
3. Bogus response. Attacker waits to see a request on the network and ex-
ploits the race condition vulnerability by replying ﬁrst with his faked map-
ping.
4. Both fake request and bogus response. Attacker fakes both the re-
quest and response to poison those machines implementing a solution to the
unsolicited malformed request and unsolicited response problem.
In Section 4, we present example constraints that can detect these attacks.
3 Constraint Model
The set of constraints required for monitoring the health of a distributed system
varies depending on the site-speciﬁc security policy, conﬁguration, and usage.
Security oﬃcers should not have to spend a signiﬁcant amount of time and
eﬀort to obtain the constraints for a speciﬁc system. We describe the constraint
model that servers as a framework for developing the constraints for a distributed
system.
In this paper, there is an assumption that the distributed system under con-
sideration exists within a bounded administrative domain. The term “enclave” is
used to describe this bounded domain. An enclave refers to a network protected
by a number of boundary controllers. Typically ﬁrewalls are used as boundary
controllers. Our constraint model should be applicable to any bounded, dis-
tributed system. Figure 1 depicts the constraint model, consisting of 3 diﬀerent
categories and 5 diﬀerent constraint types.
3.1 Constraint Categories
The constraints for a distributed system may be viewed at diﬀerent layers of
abstraction. Each constraint category describes the constraints that can be made
on a distributed system at various layers (See Figure 2). These three constraint
categories are described below:
1. Network-based constraints are based on the network traﬃc within the
enclave. Network sensors are the primary source of audit data for evaluating
the network-based constraints.
2. Host-based constraints are based on the execution of privileged programs
on the designated host. Operating Systems (OS) audit trails and OS kernel
wrappers [11] are the primary source of audit data for evaluating the host-
based constraints.
System Health and Intrusion Monitoring Using a Hierarchy of Constraints
197
HOST
NETWORK
APPLICATION
D
A
T
A
A
C
C
E
S
S
R
E
S
O
U
R
C
E
T
E
M
P
O
R
A
L
O
P
E
R
A
T
I
O
N
A
L
Fig. 1. Constraint Model.
3. Application-based constraints are based on the execution of the desig-
nated applications. OS audit trails, OS kernel wrappers, and application logs
(e.g., syslog) may be used as a source of audit data. In addition, some ap-
plications may be instrumented to provide additional audit data to evaluate
the application-based constraints.
3.2 Constraint Types
For each system under consideration, constraints are speciﬁed for each constraint
category. Individual constraints may be additionally classiﬁed as to a type of
constraints. The ﬁve constraint types are described below:
1. Access constraints are speciﬁed based on the objects (e.g., ﬁles and net-
work ports) that users/programs are allowed to access. Access constraints are
useful in detecting misbehaving programs that perform accesses to objects
beyond what they need to access.
2. Data constraints are concerned with the possible static state of the system.
They deﬁne valid value ranges of speciﬁc ﬁle, data, or network messages.
3. Operational constraints are speciﬁed base on the intended behavior of
a privileged program, protocol, or application. Operational constraints are
useful in detecting invalid protocol behavior.
4. Temporal/Interaction constraints are speciﬁed based on the permitted
interaction between processes and shared resources. This constraint type in-
cludes atomicity, serialization, and mutual exclusion. Temporal/Interaction
constraints are useful in detecting race condition attacks.
5. Resource usage constraints are speciﬁed based on the memory, process
tables, or network connections that a program or network service is allowed
to use. Resource usage constraints are useful in detecting denial of service
attacks.
198
C. Ko et al.
3.3 Development of Constraints
The constraint model provides a framework for development of the constraints
for monitoring a distributed system. Obviously, the constraints required for dif-
ferent environments will be diﬀerent and often depend on the security policy,
the security threats they face, and their conﬁguration. We envision that a set
of generic constraints of general interest can be developed, which can be chosen
and tailored for speciﬁc systems.
We describe the approach for developing constraints in this subsection. Con-
straints should be speciﬁed for each of the three constraint categories: network,
host, and application. Within each of the constraint categories, individual con-
straints may be developed for the ﬁve constraint types: operational, tempo-
ral/interaction, access, and resource usage. Depending upon the protocol or
program under consideration, not all of the constraint types may apply. The
constraints should closely model the valid behavior of the critical entity under
consideration, so that any abnormal behavior involving the entity will likely
cause a violation of the constraints.
Security Policy
Design Principles
Historical
Behavior
Attack/
Vulnerability
Models
Constraint
Model
Generic
Constraints
Fig. 2. Process of Developing Generic Constraints.
The process for developing the generic constraints is shown in Figure 2. The