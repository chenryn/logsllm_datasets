latency average = 0.205 ms  
latency stddev = 0.112 ms  
initial connection time = 22.311 ms  
tps = 48685.030555 (without initial connection time)  
statement latencies in milliseconds:  
         0.205  select id,vec  gen_rand_vector(1024) from tbl_vector order by vec  gen_rand_vector(1024) limit 1;  
```  
`hnsw.ef_search = 10;` 时 TPS: 13831.040378  
`hnsw.ef_search = 1;` 时 TPS: 48685.030555  
#### 对照  
传统数据库不支持向量类型、向量距离计算、向量类型索引.  
PolarDB|PG 支持向量类型、向量距离计算操作符和函数、向量索引. 可以存储向量、进行向量距离计算、快速检索相似向量(向量距离相近).  
- macbook m2 机器上, 4核的docker资源, TPS可以达到数万.   
## 知识点  
1 什么是向量类型  
2 什么是向量索引  
3 向量距离搜索操作符有哪些?  
4 向量搜索算法ivfflat、hnsw  
- [《PostgreSQL 阿里云rds pg发布高维向量索引，支持图像识别、人脸识别 - pase 插件, 以及ivfflat,hnsw搜索算法说明》](../201912/20191219_02.md)
- https://zhuanlan.zhihu.com/p/644056626  
- https://neon.tech/blog/pg-embedding-extension-for-vector-search  
5 向量搜索算法ivfflat、hnsw  支持哪些向量调参?  
- https://github.com/pgvector/pgvector/blob/master/src/hnsw.h  
- https://github.com/pgvector/pgvector/blob/master/src/ivfflat.h  
- https://github.com/pgvector/pgvector  
```  
/* IVFFlat parameters */  
#define IVFFLAT_DEFAULT_LISTS 100  // lists个数越大, 性能越好.  相当于每个list桶内的向量记录更少.  每个桶的向量记录数 = 总条数/lists  
#define IVFFLAT_MIN_LISTS   1  
#define IVFFLAT_MAX_LISTS   32768  
#define IVFFLAT_DEFAULT_PROBES  1   // probe越大, 精准度越高, 性能越差. 相当于搜索时从所有lists对应的若干个中心点中选出N个最近的中心点, 进入对应的这N个桶中进行继续过滤.  
```  
```  
/* HNSW parameters */  
#define HNSW_DEFAULT_M  16  // the max number of connections per layer (16 by default)  
#define HNSW_MIN_M  2  
#define HNSW_MAX_M    100  
#define HNSW_DEFAULT_EF_CONSTRUCTION  64  // the size of the dynamic candidate list for constructing the graph (64 by default)  
#define HNSW_MIN_EF_CONSTRUCTION  4  
#define HNSW_MAX_EF_CONSTRUCTION    1000  
#define HNSW_DEFAULT_EF_SEARCH  40  // Specify the size of the dynamic candidate list for search (40 by default). SET hnsw.ef_search = 100;  
#define HNSW_MIN_EF_SEARCH    1  
#define HNSW_MAX_EF_SEARCH    1000  
```  
```  
postgres=# load 'vector' ;  
LOAD  
postgres=# show ivfflat.probes ;  
 ivfflat.probes  
----------------  
 1  
(1 row)  
postgres=# show hnsw.ef_search ;  
 hnsw.ef_search  
----------------  
 40  
(1 row)  
```  
6 ivfflat和hnsw两种向量索引应该如何选择? 和向量数据量有关吗?  
7 为什么说使用 ivfflat 向量搜索是近似结果, 那么结果的精准度和什么有关? 如何配置?  
8 k-means  
9 向量检索有没有标准或流行的benchmark工具?  
- https://github.com/erikbern/ann-benchmarks  
- https://ann-benchmarks.com/  
10 还有哪些支持向量搜索的数据库? 各自的产品特性如何? 我们的数据库选型标准是什么? 综合哪些因素来进行选择?  
11 还有哪些支持向量搜索的插件?  
- hnsw, embedding, cube, imgsmlr, ... 
## 思考  
1 如何将非结构化的业务数据转换成向量?  
2 如果训练向量和事件的相关性?  
- madlib  
- https://madlib.apache.org/  
3 如何高效过滤已读内容?  
- [《沉浸式学习PostgreSQL|PolarDB 1: 短视频推荐去重、UV统计分析场景》](../202308/20230819_02.md)  
4 除了应用报警, 还有什么业务能使用类似的方法进行预测?  
- 气象、地震灾害、地质灾害? 市场预测?  
5 向量特征相似搜索的性能取决于什么?  
6 当数据库的向量搜索请求并发非常高, 已经达到了数据库性能瓶颈时, 如何解决? 使用PostgreSQL只读实例 还是 PolarDB共享存储|存算分离 更好? 为什么?  
7 pgvector目前支持几种向量距离计算方法? 那种性能最好?  
- Euclidean distance  
- negative inner product  
- cosine distance  
- taxicab distance  
- If vectors are normalized to length 1 (like [OpenAI embeddings](https://platform.openai.com/docs/guides/embeddings/which-distance-function-should-i-use)), use inner product for best performance.  
- https://mathworld.wolfram.com/NormalizedVector.html  
8 如何将向量转换为归一化向量?  下面是chatgpt给的方法, 大家思考一下是否正确?  
- 首先，计算向量的长度（模/范数）。对于二维向量 `(x, y)`，长度可以通过以下公式计算：`len = sqrt(x^2 + y^2)`。对于具有更多维度的向量，需要对每个分量进行平方并求和，然后取平方根。  
- 接下来，将每个向量分量除以其长度，以获得归一化向量的分量。对于二维向量 `(x, y)`，归一化向量可以通过以下公式计算：`normalized_vector = (x/len, y/len)`。对于具有更多维度的向量，将每个分量除以长度即可。  
下面是一个示例代码，演示如何将向量`(x, y)`归一化为长度为1的向量：  
在这个示例中，我们使用CTE（公共表达式）定义了一个包含分量x和y的向量。然后，我们通过计算平方和的平方根来获取向量的长度。最后，我们将每个分量除以长度，得到归一化向量。  
```  
WITH my_table AS (  
  SELECT 2 AS x, 3 AS y  
)  
SELECT  
  x / sqrt(x^2 + y^2) AS normalized_x,  
  y / sqrt(x^2 + y^2) AS normalized_y  
FROM my_table;  
```  
9 如果数据量特别大, 如何提升创建索引的速度?  
- 使用分区表, 并行创建? 有什么负作用?  
- 提升maintenance_work_mem?  
- 内核是否支持并行创建向量索引?  
## 参考  
[《标准知识库 + PostgreSQL或PolarDB + 向量插件 + openai(或其他大模型) 提升通用ai机器人在专业领域的精准度》](../202307/20230726_02.md)  
[《ChatGPT背后的数据库技术体验 - 向量近似搜索之 PostgreSQL+pase(hnsw,ivfflat,ivfpq)》](../202303/20230330_01.md)  
[《ChatGPT背后的数据库技术体验 - 向量近似搜索之 pgvector : 如何用 PolarDB 在不确定世界寻找确定答案 (例如图像相似) - pgvector|pase》](../202212/20221201_02.md)  
[《PostgreSQL 开源 高维向量相似搜索插件 vector - 关联阿里云rds pg pase, cube, 人脸识别》](../202105/20210514_03.md)  
[《PostgreSQL 应用开发解决方案最佳实践系列课程 - 3. 人脸识别和向量相似搜索》](../202105/20210506_01.md)  
[《PostgreSQL 向量相似推荐设计 - pase》](../202004/20200424_01.md)  
[《PostgreSQL+MySQL 联合解决方案 - 第11课视频 - 多维向量相似搜索 - 图像识别、相似人群圈选等》](../202001/20200115_01.md)  
[《PostgreSQL 阿里云rds pg发布高维向量索引，支持图像识别、人脸识别 - pase 插件, 以及ivfflat,hnsw搜索算法说明》](../201912/20191219_02.md)  
https://github.com/pgvector/pgvector/blob/master/src/hnsw.h  
https://github.com/pgvector/pgvector  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")