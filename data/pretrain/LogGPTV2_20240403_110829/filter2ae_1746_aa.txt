# 简介
SROP的全称是`Sigreturn Oriented
Programming`,这是`ROP`攻击方法中的一种,其中`sigreturn`是一个系统调用，在类unix系统发生signal的时候会被间接地调用;在传统的`ROP`攻击中我们需要寻找大量的`gadgets`来对寄存器进行赋值已达到我们的需求,而`SROP`可以减少我们寻找`gadgets`的难度....
# 前置知识
## signal 机制
我们都知道在Linux中,系统被分为了用户态和内核态,通常情况下用户态和内核态是相互隔离开的,而`signal`机制是类unix系统中进程之间相互传递信息的一种方法,常见的信号机制常见的步骤如下图所示:  
  1. 内核向某个进程发送signal机制，该进程会被暂时挂起，进入内核态;
  2. 内核会为该进程保存相应的上下文，主要是将所有寄存器压入栈中，以及压入signal信息,以及指向sigreturn的系统调用地址;此时栈的结构如下图所示,我们称ucontext以及siginfo这一段为Signal Frame.需要注意的是,这一部分是在用户进程的地址空间的;之后会跳转到注册过的signal handler中处理相应的signal.因此,当signal handler执行完之后，就会执行sigreturn代码.  
(此段引用[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop))  
简单的来说就是当一个用户层进程发起`signal`时，控制权就会切到内核层,然后内核保存进程的上下文,即各个寄存器的值到用户的栈上，然后再把`rt_sigreturn`的地址压栈，跳到用户层执行`Signal
Handler`,即调用`rt_sigreturn`;当`rt_sigreturn`执行完了之后就会跳到内核层,进行内核的操作了;最后内核恢复2中保存的进程上下文,控制权再次交还到用户层进程....  
## sigcontext结构体  
64位:
        struct _fpstate
    {
    /* FPU environment matching the 64-bit FXSAVE layout.  */
    __uint16_t        cwd;
    __uint16_t        swd;
    __uint16_t        ftw;
    __uint16_t        fop;
    __uint64_t        rip;
    __uint64_t        rdp;
    __uint32_t        mxcsr;
    __uint32_t        mxcr_mask;
    struct _fpxreg    _st[8];
    struct _xmmreg    _xmm[16];
    __uint32_t        padding[24];
    };
    struct sigcontext
    {
    __uint64_t r8;
    __uint64_t r9;
    __uint64_t r10;
    __uint64_t r11;
    __uint64_t r12;
    __uint64_t r13;
    __uint64_t r14;
    __uint64_t r15;
    __uint64_t rdi;
    __uint64_t rsi;
    __uint64_t rbp;
    __uint64_t rbx;
    __uint64_t rdx;
    __uint64_t rax;
    __uint64_t rcx;
    __uint64_t rsp;
    __uint64_t rip;
    __uint64_t eflags;
    unsigned short cs;
    unsigned short gs;
    unsigned short fs;
    unsigned short __pad0;
    __uint64_t err;
    __uint64_t trapno;
    __uint64_t oldmask;
    __uint64_t cr2;
    __extension__ union
     {
       struct _fpstate * fpstate;
       __uint64_t __fpstate_word;
     };
    __uint64_t __reserved1 [8];
    };
32位:
    struct sigcontext
    {
      unsigned short gs, __gsh;
      unsigned short fs, __fsh;
      unsigned short es, __esh;
      unsigned short ds, __dsh;
      unsigned long edi;
      unsigned long esi;
      unsigned long ebp;
      unsigned long esp;
      unsigned long ebx;
      unsigned long edx;
      unsigned long ecx;
      unsigned long eax;
      unsigned long trapno;
      unsigned long err;
      unsigned long eip;
      unsigned short cs, __csh;
      unsigned long eflags;
      unsigned long esp_at_signal;
      unsigned short ss, __ssh;
      struct _fpstate * fpstate;
      unsigned long oldmask;
      unsigned long cr2;
    };
可以看到这里面保存有很多的寄存器,`signal handler`返回后,内核为执行 sigreturn
系统调用,为该进程恢复之前保存的上下文，其中包括将所有压入的寄存器,重新`pop`回对应的寄存器,最后恢复进程的执行....  
需要注意的是32位的`sigreturn`的调用号为77,64位的系统调用号为15....
# 攻击原理
因为`Signal
Frame`保存在用户的地址空间中,所以用户是可以读写的;利用`rt_sigreturn`恢复`ucontext_t`的机制，我们可以构造一个假的`ucontext_t`,这样我们就能控制所有的寄存器....  
不过在结构体的构建时,我们可以用`pwntools`里面有现成的[库函数](http://docs.pwntools.com/en/stable/rop/srop.html?highlight=srop):  
用法可以这样:
    # 指定机器的运行模式
    context.arch = "amd64"
    # 设置寄存器
    sigframe = SigreturnFrame()
    sigframe.rax = 0x1
    sigframe.rdi = 0x2
    sigframe.rsi = 0x3
    sigframe.rdx = 0x4
但是这个`SROP`并不是单纯只用在一个栈溢出漏洞中,通常我们会结合有些其他的漏洞来使用,因为比较难构造....
# 实例
这里我以2019`UNCTF`的`orwHeap`这道题目来简单感受一下SROP的威力:  
首先,我们先运行查看这个程序的功能:  
我们发现是常规的堆分配,编辑和删除,但是没有输出....  
检查开了哪些保护:  
然后我们打开ida来分析:  
这里明显有溢出了....  
所以这里我们可以利用这个漏洞来修改堆的`size`使得堆其重叠,然后控制堆;  
但是因为这里我们没有`show`功能来泄露地址,所以我们要想办法利用`stdout`函数来泄露地址;  
我们需要在堆上面留下`main_arena`的地址,利用重叠的堆来修改这个地址,让其分配到`stdout`的位置,因为`stdout`的地址和`main_arena`离的很近,所以我们只需要爆破一个字节的地址就可以成功;  
之后我们获得了地址了就可以利用`fastbin
attack`劫持`__free_hook`,利用`setcontex`来进行SROP然后ROP读出`flag`了;  
这里要说一下`setcontext`函数;
    int setcontext(const ucontext_t *ucp);
这个函数的作用主要是用户上下文的获取和设置,可以利用这个函数直接控制大部分寄存器和执行流:
    pwndbg> x/80i 0x7ffff7a7bb50
       0x7ffff7a7bb50 : push   rdi
       0x7ffff7a7bb51 :   lea    rsi,[rdi+0x128]
       0x7ffff7a7bb58 :   xor    edx,edx
       0x7ffff7a7bb5a :  mov    edi,0x2
       0x7ffff7a7bb5f :  mov    r10d,0x8
       0x7ffff7a7bb65 :  mov    eax,0xe
       0x7ffff7a7bb6a :  syscall 
       0x7ffff7a7bb6c :  pop    rdi
       0x7ffff7a7bb6d :  cmp    rax,0xfffffffffffff001
       0x7ffff7a7bb73 :  jae    0x7ffff7a7bbd0 
       0x7ffff7a7bb75 :  mov    rcx,QWORD PTR [rdi+0xe0]
       0x7ffff7a7bb7c :  fldenv [rcx]
       0x7ffff7a7bb7e :  ldmxcsr DWORD PTR [rdi+0x1c0]
       0x7ffff7a7bb85 :  mov    rsp,QWORD PTR [rdi+0xa0]
       0x7ffff7a7bb8c :  mov    rbx,QWORD PTR [rdi+0x80]
       0x7ffff7a7bb93 :  mov    rbp,QWORD PTR [rdi+0x78]
       0x7ffff7a7bb97 :  mov    r12,QWORD PTR [rdi+0x48]
       0x7ffff7a7bb9b :  mov    r13,QWORD PTR [rdi+0x50]
       0x7ffff7a7bb9f :  mov    r14,QWORD PTR [rdi+0x58]
       0x7ffff7a7bba3 :  mov    r15,QWORD PTR [rdi+0x60]