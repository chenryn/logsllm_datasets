### Mounting and Preparing Disk Images

1. **Mount the Disk Image:**
   - Begin by mounting the disk image to make it accessible.

2. **Remove Unnecessary Files:**
   - Remove cache files, host-specific preferences, and virtual memory files. For a list of example files to remove, refer to the `asr` man page.

3. **Unmount and Convert the Image:**
   - Unmount the volume and convert the read-write image to a read-only compressed image using the following command:
     ```sh
     hdiutil convert -format UDZO path/to/image -o compressedimage
     ```

4. **Prepare the Image for Duplication:**
   - Add checksum information to the image to prepare it for duplication:
     ```sh
     sudo asr -imagescan compressedimage
     ```

### Restoring a Volume from an Image

To restore a volume from an image, use the following command:
```sh
sudo asr -source compressedimage -target targetvolume -erase
```
For more details on command syntax, limitations, and image preparation instructions, consult the `asr` man page.

---

### Working with Users and Groups in Mac OS X Server

#### Creating Server Administrator Users

You can use the `serversetup` command to create administrator users for a server. For creating regular users, see "Importing Users and Groups" on page 54.

**To create a user:**
```sh
$ serversetup -createUser "fullname" shortname password
```
- The full name, short name, and password must be entered in the specified order.
- If the full name includes spaces, enclose it in quotes.
- The command will return a 1 if the full name or short name is already in use.

**To create a user with a specific UID:**
```sh
$ serversetup -createUserWithID "fullname" shortname password userid
```
- The full name, short name, password, and UID must be entered in the specified order.
- If the full name includes spaces, enclose it in quotes.
- The command will return a 1 if the full name, short name, or UID is already in use, or if the UID is less than 100.

**To create a user with a specific UID and home directory:**
```sh
$ serversetup -createUserWithIDIP "fullname" shortname password userid homedirpath
```
- The full name, short name, password, and UID must be entered in the specified order.
- If the full name includes spaces, enclose it in quotes.
- The command will return a 1 if the full name, short name, or UID is already in use, or if the UID is less than 100.

---

### Importing Users and Groups

You can use the `dsimportexport` command to import user and group accounts. Note that `dsimportexport` cannot be used to export user records.

**Location of the Utility:**
- The utility is located at `/Applications/Server/Workgroup Manager.app/Contents/Resources`.

**Command Syntax:**
```sh
$ dsimportexport (-g|-s|-p) file directory user password (O|M|I|A) [options]
```

**Steps to Import Users and Groups:**

1. **Create the Import File:**
   - Create a file containing the accounts to import and place it in a location accessible from the importing server.
   - You can export this file from an earlier version of Mac OS X Server or AppleShare IP 6.3, or create your own character-delimited file. See "Creating a Character-Delimited User Import File" on page 55.
   - Open Directory supports up to 100,000 records. For local NetInfo databases, ensure the file contains no more than 10,000 records.

2. **Log In as the Administrator:**
   - Log in as the administrator of the directory domain into which you want to import accounts.

**Parameters:**
- `-g|-s|-p`: Specify the type of file being imported.
  - `-g` for a character-delimited file.
  - `-s` for an XML file exported from Users & Groups in Mac OS X Server version 10.1.x.
  - `-p` for an XML file exported from AppleShare IP version 6.x.
- `file`: Path of the file to import.
- `directory`: Path to the Open Directory node where the records will be added.
- `user`: Name of the directory administrator.
- `password`: Password of the directory administrator.
- `O|M|I|A`: Specifies how user data is handled if a record for an imported user already exists in the directory.
  - `O`: Overwrite the matching record.
  - `M`: Merge the records. Empty attributes in the directory assume values from the imported record.
  - `I`: Ignore the imported record and leave the existing record unchanged.
  - `A`: Append data from the import record to the existing record.
- `options`: Additional command options. To see available options, execute the `dsimportexport` command with no parameters.

3. **Execute the Command:**
   - Open the Terminal application and type the `dsimportexport` command. The tool is located in `/Applications/Utilities/Workgroup Manager.app/Contents/Resources`.
   - To include a space in the path name, precede it with a backslash (`\`). For example:
     ```sh
     /Applications/Utilities/Workgroup\ Manager.app/Contents/Resources/dsimportexport -h
     ```

4. **Create Home Directories (Optional):**
   - Use the `createhomedir` tool to create home directories for imported users. See "Creating a User’s Home Directory" on page 63.

---

### Creating a Character-Delimited User Import File

You can create a character-delimited file manually, using a script, or by using a database or spreadsheet application.

**Record Description:**
- The first record in the file, the record description, describes the format of each account record in the file.
- There are three options for the record description:
  - Write a full record description.
  - Use the shorthand `StandardUserRecord`.
  - Use the shorthand `StandardGroupRecord`.

**Writing a Record Description:**
- The record description specifies the fields in each record in the character-delimited file, the delimiting characters, and the escape character.
- Encode the record description using the following elements in the specified order, separating them with a space:
  - End-of-record indicator (in hex notation)
  - Escape character (in hex notation)
  - Field separator (in hex notation)
  - Value separator (in hex notation)
  - Type of accounts in the file (`DSRecTypeStandard:Users` or `DSRecTypeStandard:Groups`)
  - Number of attributes in each account record
  - List of attributes

**Example Record Description:**
```sh
0x0A 0x5C 0x3A 0x2C DSRecTypeStandard:Users 7
RecordName Password UniqueID PrimaryGroupID RealName NFSHomeDirectory UserShell
```

**Example User Account:**
```sh
jim:Adl47E$:408:20:J. Smith, Jr., M.D.:/Network/Servers/somemac/Homes/jim:/bin/csh
```

**Using Shorthand:**
- **StandardUserRecord:**
  - When the first record in a character-delimited import file contains `StandardUserRecord`, the following record description is assumed:
    ```sh
    0x0A 0x5C 0x3A 0x2C DSRecTypeStandard:Users 7
    RecordName Password UniqueID PrimaryGroupID RealName NFSHomeDirectory UserShell
    ```
  - Example user account:
    ```sh
    jim:Adl47E$:408:20:J. Smith, Jr., M.D.:/Network/Servers/somemac/Homes/jim:/bin/csh
    ```

- **StandardGroupRecord:**
  - When the first record in a character-delimited import file contains `StandardGroupRecord`, the following record description is assumed:
    ```sh
    0x0A 0x5C 0x3A 0x2C DSRecTypeStandard:Groups 4
    RecordName Password PrimaryGroupID GroupMembership
    ```
  - Example group account:
    ```sh
    students:Ad147:88:jones,alonso,smith,wong
    ```

---

### User Attributes

The following table lists standard XML data structures for attributes in user records.

| Attribute         | Format                       | Sample Values                                  |
|-------------------|------------------------------|------------------------------------------------|
| RecordName        | ASCII characters A–Z, a–z, 0–9, _, - | Dave, David Mac, DMacSmith                     |
| RealName          | UTF-8 text                   | David L. MacSmith, Jr.                         |
| UniqueID          | Signed 32-bit ASCII string   | 408                                            |
| PrimaryGroupID    | Unsigned 32-bit ASCII string | 20                                             |
| NFSHomeDirectory  | UTF-8 text                   | /Network/Servers/example/Users/K-M/Tom King    |
| HomeDirectory     | Structured UTF-8 text        | afp://example.com/Users K-M/Tom King           |
| HomeDirectoryQuota| Text for number of bytes     | 1048576                                        |
| MailAttribute     | Structured text              | kAttributeVersion: AppleMail 1.0               |
| PrintServiceUserData| UTF-8 XML plist, single value |                                                |
| MCXFlags          | UTF-8 XML plist, single value |                                                |
| MCXSettings       | UTF-8 XML plist, single value |                                                |
| AdminLimits       | UTF-8 XML plist, single value |                                                |
| Password          | UNIX crypt                   | Adl47E$                                        |
| Picture           | File path                    | /path/to/picture.jpg                           |
| Comment           | UTF-8 text                   | John is in charge of product marketing.        |
| UserShell         | Path name                    | /bin/tcsh, /bin/sh                             |
| AuthenticationAuthority| ASCII text                | ;basic; , ;ApplePasswordServer; HexID, server's public key IPaddress:port, ;ShadowHash; |
| AuthenticationHint | UTF-8 text                   | Your guess is as good as mine.                 |

---

### Mail Attributes in User Records

The following table lists the standard XML data structures for a user mail attribute, part of a standard user record.

| MailAttribute Field | Description                                      | Sample Values                      |
|---------------------|--------------------------------------------------|------------------------------------|
| AttributeVersion    | Required case-insensitive value set to AppleMail 1.0. | kAttributeVersion: AppleMail 1.0  |
| MailAccountState    | Required case-insensitive keyword describing the state of the user’s mail. | kMailAccountState: Enabled        |
| POP3LoginState      | Required case-insensitive keyword indicating whether the user is allowed to access mail via POP. | kPOP3LoginState: POP3Deny         |
| IMAPLoginState      | Required case-insensitive keyword indicating whether the user is allowed to access mail using IMAP. | kIMAPLoginState: IMAPAllowed      |
| MailAccountLocation | Required value indicating the domain name or IP address of the ProductName responsible for storing the user’s mail. | kMailAccountLocation: domain.example.com |
| AutoForwardValue    | Required field only if MailAccountState has the value Forward. | kAutoForwardValue: PI:EMAIL       |
| NotificationState   | Optional keyword describing whether to notify the user whenever new mail arrives. | kNotificationState: NotificationStaticIP |
| NotificationStaticIPValue | Static IP address for notifications. | kNotificationStaticIPValue: [1.2.3.4] |

This structured and detailed guide should help you manage users and groups effectively in Mac OS X Server.