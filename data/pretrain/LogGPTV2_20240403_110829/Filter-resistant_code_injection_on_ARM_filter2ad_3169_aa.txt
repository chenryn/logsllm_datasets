title:Filter-resistant code injection on ARM
author:Yves Younan and
Pieter Philippaerts and
Frank Piessens and
Wouter Joosen and
Sven Lachmund and
Thomas Walter
Filter-resistant Code Injection on ARM
Yves Younan
Pieter Philippaerts
Frank Piessens
Katholieke Universiteit Leuven
Katholieke Universiteit Leuven
Katholieke Universiteit Leuven
Leuven, Belgium
PI:EMAIL
Leuven, Belgium
PI:EMAIL
Leuven, Belgium
PI:EMAIL
Wouter Joosen
Katholieke Universiteit Leuven
Leuven, Belgium
Sven Lachmund
DOCOMO Euro-Labs
Munich, Germany
PI:EMAIL
lachmund@docomolab-
euro.com
Thomas Walter
DOCOMO Euro-Labs
Munich, Germany
walter@docomolab-
euro.com
ABSTRACT
Code injections attacks are one of the most powerful and important
classes of attacks on software. In such attacks, the attacker sends
malicious input to a software application, where it is stored in mem-
ory. The malicious input is chosen in such a way that its represen-
tation in memory is also a valid representation of a machine code
program that performs actions chosen by the attacker. The attacker
then triggers a bug in the application to divert the control ﬂow to
this injected machine code. A typical action of the injected code
is to launch a command interpreter shell, and hence the malicious
input is often called shellcode.
Attacks are usually performed against network facing applica-
tions, and such applications often perform validations or encodings
on input. Hence, a typical hurdle for attackers, is that the shell-
code has to pass one or more ﬁltering methods before it is stored
in the vulnerable application’s memory space. Clearly, for a code
injection attack to succeed, the malicious input must survive such
validations and transformations. Alphanumeric input (consisting
only of letters and digits) is typically very robust for this purpose:
it passes most ﬁlters and is untouched by most transformations.
This paper studies the power of alphanumeric shellcode on the
ARM 32 bit RISC processor. It shows that the subset of ARM ma-
chine code programs that (when interpreted as data) consist only
of alphanumerical characters is a Turing complete subset. This
is a non-trivial result, as the number of instructions that consist
only of alphanumeric characters is very limited. To craft useful ex-
ploit code (and to achieve Turing completeness), several tricks are
needed, including the use of self-modifying code.
Categories and Subject Descriptors
D.4.6 [Operating systems]: Security and Protection
General Terms
Security
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
Keywords
Alphanumeric shellcode, Filter-resistance, Turing completeness
1.
INTRODUCTION
With the rapid spread of mobile devices, the ARM processor has
become the most widespread 32-bit CPU core in the world. ARM
processors offer a great trade-off between power consumption and
processing power, which makes them an excellent candidate for
mobile and embedded devices. About 98% of mobile phones and
personal digital assistants feature at least one ARM processor.
Only recently, however, have these devices become powerful
enough to let users connect over the internet to various services,
and to share information as we are used to on desktop PCs. Unfor-
tunately, this introduces a number of security risks: mobile devices
are more and more subject to external attacks that aim to control
the behavior of the device.
A very important class of such attacks is code injection attacks.
These attacks conceptually consist of two steps. First, the attacker
sends data to the device. This data is stored somewhere in memory
by the software application receiving it. The data is chosen such
that, when stored in memory, it also represents a valid machine
code program: if the processor were to jump to the start address
of the data, it would execute it. Such data is often called shell-
code, since a typical goal of an attacker is launching a command
interpreter shell.
In a second step, the attacker triggers a vulnerability in the device
software to divert the control ﬂow to his shellcode. There is a wide
variety of techniques to achieve this, ranging from the classic stack-
based buffer overﬂow where the return address of a function call is
overwritten, to virtual function pointer overwrites, indirect pointer
overwrites, and so forth. An example of such an attack on a mobile
phone is Moore’s attack [25] against the Apple iPhone. This attack
exploits LibTIFF vulnerabilities [27, 28], and it could be triggered
from both the phone’s mail client and its web browser, making it
remotely exploitable. A similar vulnerability was found in the way
GIF ﬁles were handled by the Android web browser [29].
A typical hurdle for exploit writers, is that the shellcode has to
pass one or more ﬁltering methods before reaching the vulnerable
buffer. The shellcode enters the system as data, and various valida-
tions and transformations can be applied to this data. An example
is an input validation ﬁlter that matches the input with a given regu-
lar expression, and blocks any input that does not match. A popular
regular expression for example is [a-zA-Z0-9] (possibly extended
by “space”). Another example is an encoding ﬁlter that encodes
input to make sure that it is valid HTML.
11Clearly, for a code injection attack to succeed, the data must sur-
vive all these validations and transformations. The key contribution
of this paper is that it shows that it is possible to write powerful
shellcode that passes such ﬁlters. More speciﬁcally, we show that
the subset of ARM machine code programs that (when interpreted
as data) consist only of alphanumerical characters (i.e. letters and
digits) is a Turing complete subset. This is a non-trivial result, as
the ARM is a RISC architecture with ﬁxed width instructions of
32 bits, and hence the number of instructions that consist only of
alphanumeric characters is very limited.
The rest of this paper is structured as follows. In Section 2 we
provide sufﬁcient background information on code injection at-
tacks and on the ARM architecture to understand the rest of the
paper. In Section 3 we identify the instructions that can be used
when one restricts memory to only contain alphanumeric charac-
ters. Section 4 shows by means of a number of examples that this
severely limited instruction set can still do useful things, and Sec-
tion 5 shows that it is actually a Turing complete subset of the ARM
instruction set. Finally, we discuss related work and conclude in
Sections 6 and 7.
2. BACKGROUND
This section provides some background information that is needed
for understanding the rest of the paper.
2.1 Code injection attacks and countermea-
sures
Several vulnerabilities can exist in software written in unsafe lan-
guages such as C that can allow attackers to perform a code injec-
tion attack. During such an attack, control ﬂow is redirected to
memory where the attacker has placed data that the processor will
interpret as code. The most commonly exploited type of vulnera-
bility that allows code injection is the stack-based buffer overﬂow
[2]. However, buffer overﬂows in other memory regions like the
heap [4] or the data segment [6] are also possible. Attackers have
also been able to exploit format string vulnerabilities [35], dangling
pointer references [15] and integer errors [10] to achieve similar re-
sults.
Many different countermeasures [46, 17] focus on defending ap-
plications against these types of attacks. Some aim to prevent the
vulnerability from becoming exploitable by verifying that an ex-
ploitation attempt has occurred: via bounds checking [21, 34, 48];
by inserting secret cookies, which must remain unmodiﬁed, before
important memory locations [14, 18]. Others will make it harder
for an attacker to execute injected code by randomizing the base
address of memory regions [7, 9], encrypting pointers [13], code
[5, 22] or even all objects [8] while in memory and decrypting them
before use. While yet other types of countermeasures will try and
ensure that the program adheres to some predetermined policy [1,
23, 30].
Attackers have found ways of bypassing many of these coun-
termeasures. These bypasses range from overwriting control ﬂow
information not protected by the countermeasure [12, 32], to guess-
ing or leaking the secret associated with countermeasures [37, 43,
44], to executing existing code rather than injecting code [40, 45,
36, 11], to performing intricate attacks that make use of proper-
ties of higher level languages (like JavaScript in the webbrowser)
to create an environment suitable to exploit a low-level vulnerabil-
ity [42]. One example of such an attack is a heap-spraying attack,
that ﬁlls the heap with shellcode via JavaScript, thereby severely
increasing the likelihood of successfully executing injected code
even if address space layout randomization is used [31].
Ensuring that all memory is set to be non-executable would pre-
vent the attacker from executing injected code and would thus pre-
vent the code discussed in this paper from being executed. How-
ever, several attacks exist that can bypass non-executable mem-
ory [38, 3], allowing attackers to mark the memory where they
injected their code as executable. Moreover, setting all memory
non-executable causes incompatibilities with some programs: no-
tably the Java VM expects an executable stack. Some implementa-
tions of non-executable memory also limit this to only set the stack
non-executable, but leave the heap or other memory regions exe-
cutable, providing the attacker with a place to store and execute
injected code. By default, Linux does not set any memory to be
non-executable for compatibility reasons. As a result, code injec-
tion attacks are still realistic threats [41].
2.2 The ARM architecture
The ARM architecture [39] is the dominating processor archi-
tecture for cell phones and other embedded devices. It is a 32-bit
RISC architecture developed by ARM Ltd. and licensed to a num-
ber of processor manufacturers. Due to its low power consumption
and architectural simplicity, it is particularly suitable for resource
constrained and embedded devices.
The ARM processor features sixteen general purpose registers,
numbered r0 to r15. Apart from the program counter register,
r15 or its alias pc, all registers can be used for any purpose. There
are, however, conventional roles assigned to some particular regis-
ters. In addition to these general purpose registers, ARM proces-
sors also contain the Current Program Status Register (CPSR). This
register stores different types of ﬂags and condition values. This
register cannot be addressed directly.
This section will explain some of the features of the ARM archi-
tecture, and the key differences between this and other architectures
such as the Intel x86 architecture.
2.2.1 Function calls
Due to the large number of registers, the ARM application bi-
nary interface stipulates that the ﬁrst four parameters of a function
should be passed via registers r0 to r3. If there are more than four
parameters, the subsequent parameters will be pushed on the stack.
Likewise, the return address of a function is not always pushed on
the stack. The BL instruction, which calculates the return address
and jumps to a speciﬁed subroutine, will store the return address in
a register.
2.2.2 Addressing modes
ARM instructions share common ways to calculate memory ad-
dresses or values to be used as operands for instructions. These
calculations of memory address are called addressing modes. A
number of different addressing modes exist, some of which will be
explained in this section.
The ARM architecture is a 32-bit architecture, hence it is im-
perative that the operands of instructions must be able to span the
entire 32-bit addressing range. However, since ARM instructions
are 32 bits and a number of these bits are used to encode the in-
struction OP code, operands and parameters, operands that repre-
sent immediate values will never be able to store a full 32-bit value.
To overcome this problem, some addressing modes support differ-
ent types of shifts and rotations. These operations make it possible
to quickly generate large numbers (via bit shifting), without having
to specify them as immediate values.
The following subsections will describe a number of addressing
modes that are used on ARM. These addressing modes are selected
because they will be used extensively in the rest of the paper.
12Addressing modes for data processing.
The ﬁrst type of addressing mode is the mode that is used for
the data processing instructions. This includes the instructions that
perform arithmetic operations, the instructions that copy values into
registers, and the instructions that copy values between registers.
In the general case, a data processing instruction looks like this:
  ,  , 
In this example, Rd is a placeholder for the destination register,
and Rn represents the base register.
The addressing mode is denoted in the above listing as the shifter_
operand. It is twelve bits large and can be one of eleven subcate-
gories. These subcategories perform all kinds of different opera-
tions on the operand, such as logical and arithmetic bit shifts, bit
rotations, or no additional computation at all. Some examples are
given below:
MOV r1 , #1
r6 ,
ADD r5 ,
r5 , #1
SUB r3 ,
MOV r0 ,
r3 , ROR r 1
The ﬁrst MOV instruction simply copies the value one into reg-
ister r1. The form of the MOV instruction is atypical for data pro-
cessing instructions, because it doesn’t use the base register Rn.
r1 , LSL #2
The ADD instruction uses an addressing mode that shifts the value
in r1 left by two places. This result is added to the value stored in
r6, and the result is written to register r5.
The SUB instruction uses the same addressing mode as the ﬁrst
MOV instruction, but also uses the base register Rn. In this case, the
value one is subtracted from the value in base register r5, and the
result is stored in r3.
Finally, a second MOV operation rotates the value in r3 right by
a number of places as determined by the value in r1. The result is
stored in r0.
When the optional exclamation mark after the base register is
present, the processor will update the value in Rn to contain the
newly computed memory address.
2.2.3 Conditional Execution
Almost every instruction on an ARM processor can be executed
conditionally. The four most-signiﬁcant bits of these instructions
encode a condition code that speciﬁes which condition should be
met before executing the instruction. Prior to actually executing
an instruction, the processor will ﬁrst check the CPSR register to
ensure that its contents corresponds to the status encoded in the
condition bits of the instruction.
If the condition code does not
match, the instruction is discarded.
The CPSR state can be updated by calling the CMP instruction,
much like on the Intel x86 architecture. This instruction compares
a value from a register to a value calculated in a shifter_operand
and updates the CPSR bits accordingly. In addition to this, every
other instruction that uses the addressing mode for dataprocessing
can also optionally update the CPSR register. In this case, the result
of the instruction is compared to the value 0.
When writing ARM assembly, the conditional execution of an
instruction is represented by adding a sufﬁx to the name of the in-
struction that denotes in which circumstances it will be executed.
Without this sufﬁx, the instruction will always be executed. If the
instruction supports updating the CPSR register, the additional suf-
ﬁx ‘S’ indicates that the instruction should update the CPSR regis-
ter.
The main advantage of conditional execution is the support for
more compact program code. As a short example, consider the
following C fragment:
!= 0 )
( e r r
p r i n t f ( " E r r o r c o d e = %i \ n " ,
e r r ) ;
i f
e l s e
p r i n t f ( "OK! \ n " ) ;
Addressing modes for load/store.
The second type of addressing mode is used for instructions that
load data from memory and store data to memory. The general
syntax of these instructions is:
  , addr_mode
  , addr_mode
The addr_mode operand is the memory address where the data
resides, and can be calculated with one of nine addressing mode
variants. Addresses can come from immediate values and registers
(potentially scaled by shifting the contents), and can be post- or
pre-incremented.
Addressing modes for load/store multiple.