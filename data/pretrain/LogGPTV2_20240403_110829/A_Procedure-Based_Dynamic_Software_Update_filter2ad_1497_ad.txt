### Larger Instructions than 65536

Programmers cannot directly handle instructions larger than 65536. However, a compiler can assist in this process. There are strategies to avoid correcting external symbol references, thereby simplifying the update. For instance, we can design software such that each procedure has additional space. This way, the apparent size of new and old version procedures can be made identical, even if the meaningful code in the new version is larger. Alternatively, we can include dummy procedures with sufficient sizes during software design. Both approaches eliminate the need for address correction, significantly simplifying the update process, but they increase the program size and require changes to existing software.

### 3.4. Dynamic Update Environment

Figure 8 illustrates the dynamic update environment. Consider a user running an old version of an executable file that includes our signal handler library. The software vendor then releases a new version of the executable along with change notes. While major releases are infrequent, many minor changes (e.g., adding functionality or fixing defects) are released as interim versions.

If the user decides to install an interim version using our method, they can review the process map information, version information, and the history of previous dynamic updates before the actual update. Given the target process identification, the target procedure name, and the paths to the old and new version executable files, the update tool handles all necessary actions for the update. During the update, relevant information, such as the procedure version number, update time, and executables involved, is stored in the unmapped area.

- **Successful Update:** If the update is successful, the tool displays detailed information about the update, including the location of the mapped new version procedure, its size, and corrected external symbols.
- **Unsuccessful Update:** If the update fails, the tool logs the cause of the failure and prompts the user to undo the current update.

The update tool, written in C and using Tcl/Tk for a graphical user interface, consists of approximately 2000 lines of source code.

### 4. Illustration of Dynamic Procedure Update

This section demonstrates our method using simulated wireless Internet gateway software. A wireless Internet gateway allows users to access the Internet. For example, when a wireless user makes a request, the service manager in the gateway refers to the user profile in the database and serves the request. If the service manager needs to return data to the user, it converts the format according to the user's device characteristics.

A wireless Internet gateway is a typical application requiring continuous operation. We use a contents converter module to illustrate our method. The contents converter reformats HTML documents based on the userâ€™s wireless device characteristics, such as display size and supported markup languages. For instance, if a user's device supports cHTML, the gateway translates HTML documents to cHTML (Figure 9).

The converter consists of several procedures, such as `remove-tags`, `change-to-cHTML`, and `reform-docu`. These procedures handle different aspects of the conversion process, such as removing unsupported tags, converting attributes, and reforming content to fit the device display.

### Dynamic Update Examples

1. **Change 1 (Figure 10):** This example shows the dynamic update of a single procedure in the contents converter module. Specifically, the `change-to-cHTML` procedure is updated to support the `<BLINK>` tag and additional options in the `<FONT>` tag.
2. **Change 2 (Figure 10):** This example demonstrates the dynamic update of two procedures to support the `<FONT>` tag, which was previously removed in the `remove-tags` procedure.

Our update tools successfully perform these updates while the software is running.

### User Interface of the Update Tool

Figure 11 shows the user interface of our update tool, specifically the update of the `change-to-cHTML` procedure. The figure indicates the PID of the target process (14791), the paths to the old and new version executable files, and the virtual addresses and sizes of the old and new version procedures. The tool confirms each step of the update process, ensuring a smooth and transparent transition.

### 5. Conclusions

This paper presents a method for dynamically updating single or multiple procedures of running software. The key issues addressed are:
1. **Update Sequence:** A well-defined sequence to perform the update while ensuring correct operation and minimal performance loss.
2. **Address Space Management:** A solution to make the new version procedure work correctly in the address space of the old version process.

The method is illustrated in the SUN Solaris environment running on a SPARC machine. Unlike most previous works, our method directly modifies a part of the process address space, making it relatively simple and user-transparent. It can be implemented using only the services provided by an existing operating system and can reduce downtime caused by software upgrades.

A limitation is the inability to use large constants, which a compiler can help mitigate. Future research areas include applying the method to maintain practical large software systems, developing methods to support other update granularities, and investigating the effects of compiler optimization.

### References

[1] M. E. Segal and O. Frieder, "On-The-Fly Program Modification: Systems for Dynamic Updating," IEEE Software, Mar. 1993.
[2] R. S. Fabry, "How to Design a System in Which Modules Can Be Changed on the Fly," Proc. 2nd Int'l Conf Software Eng., 1976.
[3] H. Goullon, R. Isle, and K. Lohr, "Dynamic Restructuring in an Experimental Operating System," IEEE Trans. Software Eng., Vol. 4, No. 4, July 1978.
[4] B. Liskov, "Distributed Programming in Argus," Comm. ACM, Mar. 1988.
[5] T. Bloom, "Dynamic Module Replacement in a Distributed Programming System," Doctoral Dissertation, MIT Press, Cambridge, Mass., 1983.
[6] J. Magee, J. Kramer, and M. Sloman, "Constructing Distributed Systems in Conic," IEEE Trans. Software Eng., Vol. 15, No. 6, June 1989.
[7] J. Kramer and J. Magee, "Dynamic Configuration for Distributed Systems," IEEE Trans. Software Eng., Vol. 11, No. 4, Apr. 1985.
[8] O. Frieder and M. E. Segal, "On Dynamically Updating a Computer Program: from Concept to Prototype," J. System Software, Vol. 14, No. 2, Sep. 1991.
[9] D. Gupta and P. Jalote, "On-Line Software Version Change Using State Transfer Between Processes," Software Practice and Experience, Vol. 23, No. 9, Sep. 1993.
[10] Linkers and Libraries Guide, SUN Microsystems, Inc., 1997.
[11] M. J. Bach, The Design of the Unix Operating System, Prentice Hall, 1990.
[12] UNIX Reference Manual, SUN Microsystems, Inc., 1997.
[13] W. R. Stevens, Advanced Programming in the Unix Environment, Addison Wesley, 1992.
[14] System Interface Guide, SUN Microsystems, Inc., 1997.
[15] R. P. Paul, SPARC Architecture, Assembly Language Programming, &C, Prentice Hall, 1994.