output of these string functions using abstract string
operators.
2) The input generator translates the abstract string opera-
tions into a language of arrays and integers understood
by an off-the-shelf solver [24] by representing strings
as a length variable and an array of some maximum
length.
3) The input generator uses the output of the solver
to build an input that starts a new iteration of the
exploration.
These steps, as well as the abstract string operators, are
detailed in [23].
363
By using string operators, we abstract
the underlying
string representation, letting us use the same framework for
multiple languages. For example, we can apply our frame-
work to the content-snifﬁng algorithm of Internet Explorer 7,
which uses C strings (where strings are often represented as
null-terminated character arrays), as well as to the content-
snifﬁng algorithm of Safari 3.1, which uses a C++ string
library (where strings are represented as objects containing
a character array and an explicit length).
Even though no string constraint solver was publicly
available during the course of this work, we designed our
abstract string syntax so that it could use such a solver
whenever available. Simultaneous work reports on solvers
that support a theory of strings [25]–[27]. Thus, rather than
translating the abstract string operations into a theory of
arrays and integers, we could easily generate constraints in
a theory of strings instead, beneﬁting from the performance
improvements provided by these specialized solvers.
2.4. Content-Snifﬁng Algorithms
We analyze the content-snifﬁng algorithms used by four
browsers: Internet Explorer 7, Firefox 3, Safari 3.1, and
Google Chrome. We discover that the algorithms follow
roughly the same design but that subtle differences between
the algorithms have dramatic consequences for security. We
compare the algorithms on several key points: the number
of bytes used by the algorithm, the conditions that trigger
snifﬁng, the signatures themselves, and restrictions on the
HTML signature. We also discuss the “fast path” we observe
in one browser.
Buffer size. We ﬁnd that each browser limits content snifﬁng
to the initial bytes of each HTTP response but that the
number of bytes they consider varies by browser. Internet
Explorer 7 uses 256 bytes. Firefox 3 and Safari 3.1 use
1024 bytes. Google Chrome uses 512 bytes, which matches
the draft HTML 5 speciﬁcation [5]. To be conservative, a
server should ﬁlter uploaded content based on the maximum
buffer size used by browsers: 1024 bytes.
Trigger conditions. We ﬁnd that some HTTP responses
trigger content snifﬁng but that others do not. Browsers
determine whether to sniff based on the Content-Type
header, but the speciﬁc values that trigger content snifﬁng
vary widely. All four browsers sniff when the response
lacks a Content-Type header. Beyond this behaviour,
there is little commonality. Internet Explorer 7 sniffs if the
header contains one of 35 “known” values listed in Table 4
in the Appendix (of which only 26 are documented in
MSDN [16]). Firefox sniffs if the header contains a “bogus”
value such as */* or an invalid value that lacks a slash.
Google Chrome triggers its content-snifﬁng algorithm with
these bogus values as well as application/unknown
and unknown/unknown.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:06 UTC from IEEE Xplore.  Restrictions apply. 
image/jpeg
IE 7
Firefox 3
Safari 3.1
Chrome
image/gif
IE 7
Firefox 3
Safari 3.1
Chrome
image/png
IE 7
Firefox 3
Safari 3.1
Chrome
image/bmp
IE 7
Firefox 3
Safari 3.1
Chrome
Signature
DATA[0:1] == 0xffd8
DATA[0:2] == 0xffd8ff
DATA[0:3] == 0xffd8ffe0
DATA[0:2] == 0xffd8ff
Signature
(strncasecmp(DATA,“GIF87”,5) == 0) ||
(strncasecmp(DATA,“GIF89”,5) == 0)
strncmp(DATA,“GIF8”,4) == 0
N/A
(strncmp(DATA,“GIF87a”,6) == 0) ||
(strncmp(DATA,“GIF89a”,6) == 0)
Signature
(DATA[0:3] == 0x89504e47) &&
(DATA[4:7] == 0x0d0a1a0a)
DATA[0:3] == 0x89504e47
N/A
(DATA[0:3] == 0x89504e47) &&
(DATA[4:7] == 0x0d0a1a0a)
Signature
(DATA[0:1] == 0x424d) &&
(DATA[6:9] == 0x00000000)
DATA[0:1] == 0x424d
N/A
DATA[0:1] == 0x424d
Table 1. Signatures for four popular image formats.
DATA is the snifﬁng buffer. The nomenclature is
detailed in the Appendix.
Signatures. We ﬁnd that each browser employs different
signatures. Table 1 shows the different signatures for four
popular image types. Understanding the exact signatures
used by browsers, especially the HTML signature, is crucial
in constructing content-snifﬁng XSS attacks. The HTML
signatures used by browsers differ not only in the set of
HTML tags, but also in how the algorithm searches for
those tags. Internet Explorer 7 and Safari 3.1 use permissive
HTML signatures that search the full snifﬁng buffer (256
bytes and 1024 bytes, respectively) for predeﬁned HTML
tags. Firefox 3 and Google Chrome, however, use strict
HTML signatures that require the ﬁrst non-whitespace char-
acter to begin one of the predeﬁned tags. The permissive
HTML signatures in Internet Explorer 7 and Safari 3.1
let attackers construct chameleon documents because a ﬁle
that begins GIF89a matches both the GIF and the
HTML signature. Table 2 presents the union of the HTML
signatures used by the four browsers. These browsers will
not treat a ﬁle as HTML if it does not match this signature.
Restrictions. We ﬁnd that some browsers restrict when
certain MIME types can be sniffed. For example, Google
Chrome restricts which Content-Type headers can
be sniffed as HTML to avoid privilege escalation (see
Section 3). Table 5 in the Appendix shows which
Content-Type header values each browser is willing to
sniff as HTML.
text/html Signature
(strncmp(PTR,"
Although the fast path usually protects GIF images in
Internet Explorer 7, a ﬁle constructed in this way passes
Wikipedia’s upload ﬁlter but is treated as HTML by Internet
Explorer 7. To complete the cross-site scripting attack, the
attacker uploads this ﬁle to Wikipedia and directs the user
to view the ﬁle.
Wikipedia’s PNG signature can be exploited using a sim-
ilar attack because the signature contains only the ﬁrst four
of the eight bytes in Internet Explorer 7’s PNG signature.
Variants on this attack also affect other Web sites that
use PHP’s built-in MIME detection functions and the Unix
file tool. These attacks demonstrate the importance of
extracting precise models because the attacks hinge on subtle
differences between the upload ﬁlter used by Wikipedia and
the content-snifﬁng algorithm used by the browser.
The production instance of Wikipedia mitigates content-
snifﬁng XSS attacks by hosting uploaded content on a
separate domain. This approach does limit the severity of
this vulnerability, but the installable version of Wikipedia,
mediawiki, which is used by over 750 Web sites in the
English language alone [32], hosts uploaded user content on-
domain in the default conﬁguration and is fully vulnerable
to content-snifﬁng XSS attacks. After we reported this vul-
nerability to Wikipedia, Wikipedia has improved its upload
ﬁlter to prevent these attacks.
3. Defenses
In this section, we describe two defenses against content-
snifﬁng XSS attacks. First, we use our models to construct a
secure upload ﬁlter that protects sites against content-snifﬁng
XSS attacks. Second, we propose addressing the root cause
of content-snifﬁng XSS attacks by securing the browser’s
content-snifﬁng algorithm.
Secure ﬁltering. Based on the models we extract from the
browsers, we implement an upload ﬁlter in 75 lines of Perl
that protects Web sites from content-snifﬁng XSS attacks.
Our ﬁlter uses the union HTML signature in Table 2. If
a ﬁle passes the ﬁlter, the content is guaranteed not to be
interpreted as HTML by Internet Explorer 7, Firefox 3,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:16:06 UTC from IEEE Xplore.  Restrictions apply. 
Safari 3.1, and Google Chrome. Using our ﬁlter, Web sites
can block potentially malicious user-uploaded content that
those browsers might treat as HTML.
Securing Snifﬁng. The secure ﬁltering defense requires each
Web site and proxy to adopt our ﬁlter. In parallel with this
effort, browser vendors can mitigate content-snifﬁng XSS
attacks against legacy Web sites by improving their content-
snifﬁng algorithms. In the remainder of this section, we
formulate a threat model for content-snifﬁng XSS attacks
and propose two principles for designing a secure content-
snifﬁng algorithm. We analyze the security and compatibility
properties of an algorithm based on these principles.
3.1. Threat Model
the attacker,
We deﬁne a precise threat model for reasoning about
content-snifﬁng XSS attacks. There are three principals in
the user and the honest
our threat model: