解决问题的思路是：
`Timestamp::normalize`可能应该使用 **`saturating_{add,sub}`** [31]
方法，如果时间戳的`nanos`字段超出了范围，这可能会默默地改变时间戳，最多3秒，但这样的时间戳可以说是无效的，所以这可能是好的。
`SystemTime` 没有`Saturating_{add,sub}`方法，也没有`MIN`和`MAX`常数，应该再次使用
`SystemTime::checked_{add,sub}` 进行转换。
修复 PR：
## RUSTSEC-2021-0078: Vulnerability in hyper[32]
对Content-Length进行宽松的 header 解析，可能会使请求被偷渡（走私，smuggling）。
> 背景：请求偷渡 不合法的请求被夹杂在合法请求中被得到处理。需要通过 `content-length` 和 `Transfer-Encoding`
> 两个header 来构造攻击。
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：http、parsing
  * CVE 编号：CVE-2021-32715
  * 详细：
  * 补丁：`>=0.14.10`
### 漏洞分析
hyper的HTTP/1服务器代码存在一个缺陷，即错误地解析和接受带有前缀加号的Content-Length头的请求，而这一请求本应作为非法请求被拒绝。这与上游HTTP代理不解析这种Content-Length头而转发的情况相结合，可能导致
"请求偷渡（"request smuggling） "或 "去同步攻击（desync attacks）"。
修复代码：
需要判断 content-lenght 是不是可以正常转换为有效数位。
## RUSTSEC-2021-0072: Vulnerability in tokio[33]
当用`JoinHandle::abort`中止一个任务时，对于 `LocalSet`上生成的任务不正确， 容易导致竞态条件。
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：memory-corruption
  * CVE 编号：CVE-2021-32715
  * 详细：
  * 补丁：
`>=1.5.1, =1.6.3, =1.7.2, =1.8.1`
### 漏洞分析
当用`JoinHandle::abort`中止一个任务时，如果该任务当前没有被执行，那么在调用`abort`的线程中，`Future`会被
Drop。这对于在`LocalSet`上生成的任务是不正确的。
这很容易导致竞态条件，因为许多项目在它们的`Tokio`任务中使用`Rc`或`RefCell`以获得更好的性能。
修复 PR：
## RUSTSEC-2021-0070: Vulnerability in nalgebra[34]
`nalgebra` 库中`VecStorage` 的`Deserialize`实现没有保持元素数量必须等于`nrows *
ncols`的不变性。对特制的输入进行反序列化时，可能会允许超出向量分配的内存访问。
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：memory-corruption/ memory-exposure
  * CVE 编号：CVE-2021-32715
  * 详细：
  * 补丁：`>=0.27.1`
### 漏洞分析
这个缺陷是在`v0.11.0(086e6e)`中引入的，因为为`MatrixVec`增加了一个自动派生（derive）的`Deserialize`实现。`MatrixVec`后来在`v0.16.13(0f66403)`中被改名为`VecStorage`，并继续使用自动派生的`Deserialize`实现。
修复 PR ：
在反序列化的过程中，对 `nrows.value() * ncols.value() == data.len()`进行校验。
## CVE-2021-31162: Vulnerability in std[35]
在 Rust 1.52.0之前的Rust标准库中，如果释放元素时出现panic ，在`Vec::from_iter`函数中会出现 double free。
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：memory-corruption
  * CVE 编号：CVE-2021-31162
  * 详细：
  * 补丁：`>=1.52.0`
### 漏洞分析
漏洞复现代码：
    use std::iter::FromIterator;
    #[derive(Debug)]
    enum MyEnum {
        DroppedTwice(Box),
        PanicOnDrop,
    }
    impl Drop for MyEnum {
        fn drop(&mut self) {
            match self {
                MyEnum::DroppedTwice(_) => println!("Dropping!"),
                MyEnum::PanicOnDrop => {
                    if !std::thread::panicking() {
                        panic!();
                    }
                }
            }
        }
    }
    fn main() {
        let v = vec![MyEnum::DroppedTwice(Box::new(123)), MyEnum::PanicOnDrop];
        Vec::from_iter(v.into_iter().take(0));
    }
    // Output : free(): double free detected in tcache 2
因为枚举MyEnum在 析构的时候panic，导致资源泄漏，而引发了双重 free 的问题。
修复 PR：
在 `Vec::from_iter` 中执行
`forget_allocation_drop_remaining`，即，忘记已经被drop的`src`的元素分配的内存，即便 drop 发生了
panic，也不会泄漏资源。
### 参考资料
[1]`RustSecurity` 安全数据库库: __
[2]RUSTSEC-2021-0110: Vulnerability in wasmtime:
__
[3]RUSTSEC-2021-0098: Vulnerability in openssl-src:
__
[4]RUSTSEC-2021-0082: Unsoundness in vec-const:
__
[5]RUSTSEC-2021-0093: Vulnerability in crossbeam-deque:
__
[6]RUSTSEC-2021-0077: Vulnerability in better-macro:
__
[7]RUSTSEC-2021-0106: Vulnerability in bat:
__
[8]RUSTSEC-2021-0073: Vulnerability in prost-types:
__
[9]RUSTSEC-2021-0078: Vulnerability in hyper:
__
[10]RUSTSEC-2021-0072: Vulnerability in tokio：
__
[11]RUSTSEC-2021-0070: Vulnerability in nalgebra:
__
[12]CVE-2021-31162: Vulnerability in std:
__
[13]RUSTSEC-2021-0110: Vulnerability in wasmtime:
__
[14]CVE-2021-39216: __
[15]CVE-2021-39219: __
[16]CVE-2021-39218: __
[17]Use after free passing `externref`s to Wasm in Wasmtime:
__
[18]Out-of-bounds read/write and invalid free with `externref`s and GC
safepoints in Wasmtime:
__
[19]Wrong type for `Linker`-define functions when used across two `Engine`s:
__
[20]RUSTSEC-2021-0098: Vulnerability in openssl-src:
__
[21]openssl-src: __
[22]RUSTSEC-2021-0082: Unsoundness in vec-const:
__
[23]RUSTSEC-2021-0093: Vulnerability in crossbeam-deque:
__
[24]CVE-2021-32810: __
[25]RUSTSEC-2021-0077: Vulnerability in better-macro:
__
[26]RUSTSEC-2021-0106: Vulnerability in bat:
__
[27]bat: __
[28]CVE-2021-36753: __
[29]RUSTSEC-2021-0073: Vulnerability in prost-types:
__
[30]CVE-2021-36753: __
[31]`saturating_{add,sub}`: __
[32]RUSTSEC-2021-0078: Vulnerability in hyper:
__
[33]RUSTSEC-2021-0072: Vulnerability in tokio:
__
[34]RUSTSEC-2021-0070: Vulnerability in nalgebra:
__
[35]CVE-2021-31162：Vulnerability in std:
__
* * *