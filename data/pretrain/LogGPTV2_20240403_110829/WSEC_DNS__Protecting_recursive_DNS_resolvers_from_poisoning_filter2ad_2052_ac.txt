### 授权许可使用限制
授权许可仅限于清华大学。下载时间：2021年3月20日 05:38:34 UTC，来源：IEEE Xplore。适用相关限制。

### 图2：WSECDNS查询过程的简化视图
该图展示了简化的WSECDNS查询过程。说明了以下内容：
- `*.wsecdns.www.example.com` 是 `www.example.com` 的别名。
- `*.test.wsecdns.www.example.com` 是 `test.wsecdns.example.com` 的别名。
这些配置行被称为通配符CNAME记录。

对于每个通配符域名（不包括通配符CNAME记录），引入一个TXT资源记录。例如，在图1中，我们为 `*.web.example.com` 引入了如下行：
```
*.web IN TXT "|wsecdns=enabled|"
```
这些配置行被称为通配符TXT记录。

### 3.2 WSECDNS查询过程
WSECDNS查询过程的简化视图如图2所示。假设一个主机请求 `www.example.com` 的A记录（即IP地址）。此时，递归DNS服务器（RDNS）生成一个长度为N的随机字母数字字符串 `rand`，并查询 `rand.test.wsecdns.www.example.com` 的TXT记录。此查询用于与权威名称服务器（ANS）进行某种“握手”。

如果 `example.com` 区域的ANS启用了WSEC查询（即 `example.com` 区域文件符合第3.1节中的配置要求），则会报告 `rand.test.wsecdns.www.example.com` 是 `test.wsecdns.example.com` 的别名，并且存在一个TXT记录，其值为 `|wsecdns=enabled|`。此时，WSECDNS查询被认为已启用，RDNS将查询 `rand.wsecdns.www.example.com` 的A记录，而不是直接查询 `www.example.com` 的A记录。

由于ANS是WSEC启用的，此查询将匹配通配符 `*.wsecdns.www.example.com`，这表示 `*.wsecdns.www.example.com` 是 `www.example.com` 的别名。根据RFC 1034[18]，ANS的响应将包括：
1. 查询的域名 `rand.wsecdns.www.example.com` 在问题部分；
2. 一个CNAME记录，表明 `rand.wsecdns.www.example.com` 是 `www.example.com` 的别名；
3. 一个A记录，报告 `www.example.com` 的IP地址，这是最初由存根解析器请求的信息。

RDNS首先确保响应中的域名与查询的域名（包括随机前缀 `rand`）匹配。如果不匹配，响应将被丢弃。最后，RDNS通过删除以 `rand.wsecdns.` 开头的CNAME条目来规范化从ANS收到的响应，缓存规范化后的响应，并将其转发给主机。

显然，上述基本版本的WSECDNS查询过程会使RDNS到名称服务器的DNS流量翻倍。在第3.3节中，我们将展示如何利用标准RDNS实现中使用的缓存系统来大大减少由此产生的额外流量。

### 安全收益
WSECDNS保护RDNS缓存免受针对WSEC启用区域（如 `example.com`）中的域名（如 `www.example.com`）的中毒攻击，包括Kaminsky攻击。这是因为攻击者现在需要猜测随机字符串 `rand` 以及随机事务ID（和可能的源UDP端口）。如果攻击者无法伪造带有正确 `rand` 组合的数据包并在真正的权威响应到达之前发送给RDNS，则攻击将失败。这一点适用于WSECDNS查询过程的所有步骤，无论主机原始查询请求的RR类型如何，因为每次WSEC兼容的RDNS向名称服务器发送查询时都会生成一个新的随机前缀 `rand`，包括与根和顶级域名服务器的交互。

在第3.5节中，我们将展示即使使用只有五个字母数字字符的均匀随机字符串，WSECDNS也能使Kaminsky攻击对非常有动机和强大的攻击者来说几乎不可行。

### 透明性属性
由于上述WSEC响应规范化算法，WSECDNS查询过程对主机完全透明。用户将始终看到对原始查询的正确响应，就像RDNS使用标准DNS查询过程一样。需要注意的是，WSECDNS可以处理除A记录以外的其他类型的资源记录查询（如AAAA、CNAME、MX、TXT、NS等）。WSECDNS查询过程独立于主机原始查询请求的RR类型，这得益于为使区域WSEC启用而添加的通配符CNAME。

### 向后兼容性
当某个区域未启用WSEC时，ANS将以NXDOMAIN（不存在）或不包含 `|wsecdns=enabled|` 的字符串来响应WSEC“握手”（即第一个查询 `rand.test.wsecdns.www.example.com TXT?`）。在这种情况下，RDNS将简单地发出第二个查询，使用主机的原始查询 `www.example.com A?`（不带WSEC随机前缀），并将响应转发给主机。负WSEC缓存用于避免对未启用WSEC的区域重复尝试WSEC“握手”，如第3.3节所述。只有在负WSEC缓存条目过期（例如一天后），RDNS才会重新尝试WSEC握手。

向后兼容性允许逐步部署WSECDNS，从而使我们的解决方案更加实用。

### 3.3 正向和负向WSEC缓存
实现WSECDNS查询过程而不使用WSEC缓存系统会导致互联网上的DNS流量翻倍，并增加用户DNS查询与其相关响应之间的平均延迟，因为RDNS和ANS之间的“握手”必须为每个查询重复进行。

为了解决这些问题，我们可以利用正向和负向缓存的概念。希望使用WSECDNS的RDNS解析器必须实现正向和负向缓存，分别存储关于哪些区域已启用或未启用WSEC的信息（即其区域文件是否遵循第3.1节中的配置要求）。

首先描述WSEC正向缓存，然后描述WSEC负向缓存。为了简化起见，我们假设如果某个区域按照WSEC规范进行配置，其所有子区域也将配置支持WSECDNS。这一限制可以轻松放宽，如[22]中所述。

WSEC正向缓存条目应包含以下信息：
1. 区域名；
2. 生存时间（TTL），在此之后需要重新发出WSEC握手的TXT查询。

例如，`example.com` 区域有一个TTL为86400秒（即一天）的TXT记录 `_test._wsecdns 8640中的TXT记录。因此，WSEC正向缓存条目将是“example.com wsecdns=enabled 86400”。一旦某个区域被存储在正向WSEC缓存中，RDNS将不会对该区域中的域名执行WSEC握手，直到正向WSEC缓存的TTL过期。

假设 `example.com` 在正向WSEC缓存中，当下一次主机查询该区域中的某个域名（如 `mail.example.com A?`）时，由于 `example.com` 在正向WSEC缓存中，RDNS只会发出类似 `rand.wsecdns.mail.example.com A?` 的查询。因此，正向缓存限制了由于WSEC握手而导致的DNS流量增加，因为每天只需要为给定区域尝试一次WSEC握手。

由于WSECDNS不要求互联网上的每个权威名称服务器（ANS）及其区域都启用WSEC（一些ANS可能决定不增加对其域名的保护以抵御中毒攻击，从而不需要编辑其区域文件），某些区域可能永远不会出现在正向WSEC缓存中。因此，这将导致RDNS使用TXT查询发起WSEC握手，从而将流量加倍地发送给未启用WSEC的ANS。为了避免这个问题，实施WSECDNS的RDNS解析器还必须实现负向WSEC缓存。

负向WSEC缓存中的每个条目应包含两段信息：
1. 未启用WSEC的区域名；
2. 负向条目的TTL。

例如，假设 `vulnerabledns.com` 区域决定不遵循第3.1节中描述的WSECDNS配置建议。当用户第一次查询该区域中的某个域名（如 `www.vulnerabledns.com`）时，RDNS将发出 `rand.test.wsecdns.www.vulnerabledns.com TXT?` 查询以对该区域进行WSEC握手。此查询将不会匹配 `vulnerabledns.com` 区域文件中的任何条目，RDNS也不会收到 `|wsecdns=enabled|` 字符串。因此，RDNS将把 `vulnerabledns.com` 存储在负向WSEC缓存中（前提是RDNS收到了来自非根或顶级域名服务器的权威响应，否则这意味着该域名未注册，RDNS将简单地返回NXDOMAIN给存根解析器），并将只发出原始查询 `www.vulnerabledns.com A?` 收到的主机。此时，RDNS将不会对 `vulnerabledns.com` 区域中的任何域名发出WSEC握手（即TXT查询），直到负向缓存条目的TTL过期。负向WSEC缓存条目的TTL是RDNS的一个配置参数，建议至少为几小时。

### 3.4 保护顶级域名服务器条目
在查询WSEC启用区域中的域名时，除了保护RDNS缓存免受针对查询域名（如 `www.example.com`）的中毒攻击外，WSECDNS自然还会保护RDNS免受顶级域名（TLD）名称服务器的中毒攻击。原因是随机WSEC前缀（见第3.2节）在整个查询解析过程中都会存在，包括在RDNS与根和TLD名称服务器之间交互以发现查询域名的权威名称服务器（ANS）时。

这种保护机制不需要根和TLD名称服务器显式启用WSECDNS查询。攻击者也可能试图直接在RDNS缓存中注入恶意地址以中毒TLD名称服务器的IP地址。例如，假设攻击者打算通过注入恶意地址来中毒RDNS缓存中的 `.com` TLD的委派名称服务器 `A.GTLD-SERVERS.NET`。需要强调的是，如果 `GTLD-SERVERS.NET` 区域启用了WSEC，则攻击将不会成功，因为攻击者发起的查询将受到WSEC前缀 `rand.wsecdns.` 的“保护”。

然而，我们知道要求更改TLD名称服务器的配置可能会遇到互联网社区的阻力，因为这些服务器具有特殊的角色（要求更改根和TLD名称服务器是DNSSEC未能大规模部署和采用的主要原因之一）。但是，可以通过应用安全的TLD缓存更新策略结合使用WSEC随机前缀来保护TLD名称服务器，而无需在根和TLD名称服务器级别进行任何配置或软件更改。

例如，即使 `GTLD-SERVERS.NET` 区域未启用WSEC，我们也可以通过注意到RDNS的“标准”缓存将包含有关该区域中域名的两段信息来防御 `A.GTLD-SERVERS.NET`：
1. `A.GTLD-SERVERS.NET` 是 `.com` TLD的名称服务器；
2. `A.GTLD-SERVERS.NET` 的IP地址。

合法的TLD名称服务器IP地址变更非常罕见。如果RDNS缓存中的TLD名称服务器的IP地址即将被新的地址覆盖（例如由于中毒攻击），RDNS可以通过向其中一个根名称服务器执行附加查询来验证收到的信息。例如，在覆盖 `A.GTLD-SERVERS.NET` 的IP地址之前，RDNS将查询 `rand.wsecdns.com`。此时，根服务器将响应包含对 `.com` 区域具有权威性的名称服务器列表 [18,19]，包括 `A.GTLD-SERVERS.NET` 及其正确的IP地址（作为“胶水”记录 [18,19]）。RDNS将比较这个IP地址与攻击者的IP地址，发现差异，并因此丢弃攻击者试图覆盖 `A.GTLD-SERVERS.NET` 缓存条目的企图。

由于合法事件很少会覆盖RDNS缓存中的TLD名称服务器的IP地址，且不同TLD名称服务器的数量较少，这种验证过程只会增加少量DNS流量。除非受到中毒攻击，RDNS只需在罕见情况下启动验证过程。值得注意的是，由于TLD验证查询中存在 `rand` 字符串，中毒TLD名称服务器实际上变得不可行（见第3.5节）。这意味着WSEC启用的区域将受到整个解析路径上的中毒攻击的保护，而无需在根和TLD名称服务器上进行任何配置更改。

### 3.5 对中毒攻击的鲁棒性
设技术x引入的搜索空间的基数为Γx。在以下讨论中，我们假设ΓTXID = 2^16（事务ID的完美随机化），Γport = 2^16 - 1024（即所有端口的完美随机化，排除前1024个通常保留的端口）。对于0x20位编码，我们考虑三种情况，具体细节将在第3.5节中详细讨论。

根名称服务器的域名和IP地址硬编码在RDNS软件中 [18]，并且只能通过更新RDNS软件、本地配置或非常不频繁的查询（例如每隔几周）来更新，这些查询不能由攻击者强制或发起。因此，涉及根名称服务器的中毒攻击应始终失败。