### 个人资料与账户信息
- **个人信息**：包括信用卡凭据、地址和结账信息。
- **账户信息**：包含地址簿和结账信息。
- **个人资料**：包括私信和管理员设置。
- **账户信息**：包括地址信息和结账信息。
- **账户和个人资料**：包括结账信息。
- **账户、联系人和设置**：相关信息。

### 漏洞列表
- **3 (CVE-2012-6561: XSS, EDB-ID 17685 and 8993: XSS)**
- **1 (Bug ID 0000535: Reﬂected XSS)**
- **12 (CVE-2013-5646: XSS and CVE-2009-4077: CSRF)**
- **2 (ZSL-2013-5129 and 103810: XSS)**
- **15 (CVE-2013-1942: XSS and CVE-2012-4753: CSRF)**
- **3 (Bug ID 3f143d2: XSS)**
- **1 (CVE-2005-0407: XSS and CVE-2012-1002: XSS)**
- **2 (CVE-2008-6503 and CVE-2011-4544: XSS)**
- **1 (CVE-2010-1610: CSRF)**
- **1 (Bug ID 001: XSS)**
- **1 (CVE-2009-0541: XSS)**
- **4 (CVE-2011-4567 and CVE-2012-1413: XSS)**
- **10 (CVE-2012-1792 and CVE-2012-2935: XSS)**
- **1 (CVE-2012-5798: XSS)**
- **1 (CVE-2008-1550: XSS)**
- **91 (CVE-2013-5738: XSS and CVE-2013-2205: XSS)**
- **45 (CVE-2013-3059 and CVE-2013-3267: XSS)**
- **126 (CVE-2012-0826: CSRF and CVE-2012-2339: XSS)**
- **4 (CVE-2013-1468: CSRF and CVE-2012-2209: XSS)**
- **1 (CVE-2013-5693: XSS)**

### 表3：案例研究及漏洞总结
表3列出了我们的案例研究，并总结了每个应用中的漏洞数量及其对应的CVE编号。在我们研究的20个Web应用程序中，所有应用都至少有一个针对PISE攻击（如XSS或CSRF）的漏洞。其中一些应用甚至有超过十个相同类型的漏洞。例如，PrestaShop有两个严重的漏洞。其中一个漏洞（ID为CVE-2008-6503）允许攻击者在登录页面注入任意脚本；另一个漏洞（ID为CVE-2011-4544）则允许攻击者通过文件管理过程对管理员发起XSS攻击。

由于篇幅限制，我们仅展示了来自八个不同类别的八个应用程序的研究结果。对于全部20个应用程序的研究，请参阅我们的技术报告[20]。

### 5.2 案例研究：Elgg和OpenCart
在本节中，我们将详细介绍如何使用USERPATH来改造现实世界的Web应用程序，以防止PISE攻击。我们评估了USERPATH的以下目标：（1）保护Elgg社交网络中的“添加新用户”功能，该功能存在XSS漏洞；（2）保护OpenCart中的“重置密码”功能，该功能存在CSRF漏洞。基于这些漏洞，我们构建了四个概念验证攻击，篡改了第2.1节中讨论的四个通道。由于篇幅限制，我们在技术报告[20]中详细描述了这些攻击以及USERPATH如何防止它们。

#### 代码更改
首先，我们在Elgg的actions/login.php和OpenCart的account/login.php中进行了小改动，使浏览器能够渲染特殊的凭证框，并在各自的源上启动基于TLS-SRP的身份验证。其次，在Elgg的“添加新用户”页面中，我们将显示用户名、电子邮件地址、密码、管理员标志和表单请求按钮的逻辑分离到一个UFrame部分。这些元素需要从UFrame内动态创建，以便作为安全元素呈现。所有这些更改都在PHP文件forms/useradd.php中进行。同样地，我们通过在UFrame内单独实现此功能来保护两个用于输入新密码和确认按钮的HTML输入元素。所有这些更改都在文件account/password.php中进行。完整的更改详情请参阅[20]。

#### 结果与挑战
我们成功地将USERPATH改造到了Elgg和OpenCart中，分别在这两个应用中添加了270行和266行PHP代码。改造后的Elgg的UFrame的TCB大小比原始Web应用程序的TCB大小减少了46倍和66倍。实施这些更改后，我们成功保护了易受PISE攻击的应用程序中的敏感资源。我们在[21]中提供了演示视频，展示了Elgg中的某些攻击以及USERPATH如何防御这些攻击。

采用USERPATH的主要挑战在于定位需要修改的功能，因为这两个应用都是用各自的工具包构建的。理解工具包后，修改工作变得相对简单。总共花了两天时间在Elgg和OpenCart中启用USERPATH。

### 5.3 Web应用程序适用性及TCB减少
我们成功地将USERPATH改造到了20个Web应用程序中。在这些应用中，我们手动选择了几个对用户敏感的数据和操作（见表3），并对处理这些数据和操作的PHP文件进行了修改。此外，我们通过总结20个改造后的Web应用程序的采用努力和TCB减少情况，展示了USERPATH的实用性（见表4）。我们通过以下几个基准来衡量采用努力：增加的代码行数、修改的文件数以及在修改Web应用程序上花费的天数。此外，我们还通过比较初始TCB大小（即网页大小）和实施USERPATH后的最终TCB大小来衡量TCB减少。

我们发现，USERPATH只需要对现有Web应用程序代码进行少量更改。为了保护表3中列出的一组敏感用户数据和功能免受PISE攻击，我们最多只需添加270行PHP和JavaScript代码。平均而言，每个Web应用程序需要添加167行代码（见表4中的“USERPATH LOC”列）。此外，我们实证表明，在我们的案例研究中，TCB减少了8倍至264倍。我们通过比较最终TCB大小（例如UFrame代码）和整个网页大小来测量这种减少（见表4中的IV列）。我们将网页大小视为初始TCB大小，因为我们需要信任整个网页才能保护我们的敏感数据和操作。

我们还发现，根据USERPATH修改Web应用程序对开发人员来说负担相对较小。平均而言，给定表3中要保护的一组敏感用户资源，开发人员需要在1.3天内修改6个文件，使一个Web应用程序符合USERPATH标准。

### 5.4 性能
影响我们解决方案的主要性能因素包括：基于PAKE的安全委托、UFrame的创建以及引入DOM的新安全元素。正如我们的演示视频[21]所示，在我们对20个Web应用程序的实验中，我们没有观察到用户与应用程序交互时出现任何延迟。由于登录阶段包含了所有三个因素，我们测量了20个应用程序的登录时间开销（取五次运行的平均值）。表5总结了点击登录按钮到下一个页面完成之间的登录时间结果。