Personal info, credit slips,
addresses and checkout info
Account, address book and
checkout information
Proﬁle information, private
message and admin settings
Account info, address
information and checkout info
Account, proﬁle and checkout
information
Account, proﬁle and checkout
information
Account, proﬁle and checkout
information
Account, proﬁle and checkout
information
Account, contact and setting
information
Account, contact and setting
information
Account, contact and setting
information
User’s management,
permission, sensitive proﬁle
Account, contact management
& information
3 (CVE-2012-6561: XSS, EDB-ID
17685 and 8993: XSS)
1 (Bug ID 0000535: Reﬂected
XSS)
12 (CVE-2013-5646: XSS and
CVE-2009-4077: CSRF)
2 (ZSL-2013-5129 and 103810:
XSS)
15 (CVE-2013-1942: XSS and
CVE-2012-4753: CSRF)
3 (Bug ID 3f143d2: XSS)
1 (CVE-2005-0407: XSS and
CVE-2012-1002: XSS)
2 (CVE-2008-6503 and
CVE-2011-4544: XSS)
1 (CVE-2010-1610: CSRF)
1 (Bug ID 001: XSS)
1 (CVE-2009-0541: XSS)
4 (CVE-2011-4567 and
CVE-2012-1413: XSS)
10 (CVE-2012-1792 and
CVE-2012-2935: XSS)
1 (CVE-2012-5798: XSS)
1 (CVE-2008-1550: XSS)
91 (CVE-2013-5738: XSS and
CVE-2013-2205: XSS)
45 (CVE-2013-3059 and
CVE-2013-3267: XSS)
126 (CVE-2012-0826: CSRF and
CVE-2012-2339: XSS)
4 (CVE-2013-1468: CSRF and
CVE-2012-2209: XSS)
1 (CVE-2013-5693: XSS)
Table 3 lists our case study and summarizes the number of vulnerabilities, along with
the CVE ID for the corresponding vulnerability6. Among those 20 web applications that
we study, all of them have at least one vulnerability to a subset of PISE attacks namely
XSS or CSRF attacks. Some of them even have more than ten vulnerabilities of the
same attack vector. To name one of them, PrestaShop has two critical vulnerabilities.
One type of vulnerability (marked by ID CVE-2008-6503) allows an attacker to inject
arbitrary web scripts to the login page. The other vulnerability (marked by ID CVE-
2011-4544) lets the attacker to exploit the ﬁle management process of an administrator
to launch an XSS attack.
6 Due to the page limit, we show the study of 8 applications from 8 different categories. For the
study on all 20 applications, please check our technical report [20].
Enabling Trusted Paths and User Sub-origins in Web Browsers
165
5.2 Case Study : Elgg and OpenCart
In this section, we detail our experience with real-world case studies to illustrate the
steps taken for retroﬁtting web applications with USERPATH. We evaluate USERPATH
with the following goals: (1) protecting the “add new user” feature in Elgg social net-
work, given the presence of XSS vulnerabilities and (2) protecting the “reset password”
feature in OpenCart, given a CSRF vulnerability in the web application. Based on those
vulnerabilities, we thus construct four proof-of-concept attacks that tamper with the
four channels discussed in Section 2.1. Due to space constraints, we describe the attacks
and specify the way USERPATH prevents those attacks in our technical report [20].
Code Changes. First, we made small changes in actions/login.php (Elgg) and
account/login.php (OpenCart) to let the browser render special credential boxes
and initiate a TLS-SRP-based authentication with the server at their respective origins.
Secondly, in the “add new user” page of Elgg, we privilege-separated the logic for
displaying username, email address, password, admin ﬂag, and a form request button
into a UFrame section. Instead of creating those elements using HTML, the elements
need to be dynamically created from within a UFrame to let them be rendered as secure
elements. All the changes were made in a PHP ﬁle forms/useradd.php. Likewise,
we protect two HTML input elements for putting in new password and a conﬁrmation
button by implementing the logic for this feature separately inside a UFrame. All these
changes were made by modifying a ﬁle account/password.php. A complete set
of technical changes is described in [20].
Result and Challenges. We successfully retroﬁtted USERPATH to Elgg and OpenCart
by adding 270 and 266 lines of PHP code in their application code, respectively. The
TCB size of the UFrame in the modiﬁed Elgg is 46x and 66x smaller than the size of
TCB in vanilla web applications. After implementing those changes, we successfully
protect the sensitive resources in the vulnerable applications from PISE attacks. We
demonstrate some of the attacks in Elgg and how USERPATH defends against those
through demo videos available in [21].
The main challenge of adopting USERPATH to web applications is the difﬁculty in
locating the functionality we need to modify, because both applications were built using
their own toolkit. After understanding the toolkit, the modiﬁcation effort is straightfor-
ward. It took 2 days in total for us to enable USERPATH in Elgg and OpenCart.
5.3 Applicability to Web Applications and TCB Reduction
We successfully retroﬁt all 20 web applications to adopt USERPATH. Among these
applications, we manually choose several data and operations that are sensitive to users
(summarized in Table 3) and modify the PHP ﬁles where these data and operations are
processed. In addition, we demonstrate the practicality of USERPATH by summarizing
the adoption effort and TCB reduction of 20 retroﬁtted web applications in Table 4. We
measure the adoption effort by the following benchmarks: number of additional code,
number of modiﬁed ﬁles, and number of days spent in modifying the web application.
Besides, we also measure TCB reduction by comparing the initial TCB size (i.e., the
web page size) and the ﬁnal TCB size after implementing USERPATH.
We ﬁnd that USERPATH requires small changes to the existing web application code.
Given the set of sensitive user-owned data and functionalities that we want to protect
from PISE attacks, we only need to add at most 270 lines of PHP and JavaScript code
166
E. Budianto et al.
Table 4. Adoption Effort and TCB Reduction after Implementing USERPATH in 20 Open-Source
Web Applications
App Name
USERPATH
Original TCB
TCB after
LOC
(JS+PHP)
270
176
96
141
106
139
151
111
266
119
227
130
122
133
118
102
87
72
216
217
(KB)
414.6
1053.8
946.0
53.6
555.2
184.5
55.9
580.3
754.8
67.3
987.0
241.8
425.8
513.8
469.2
308.7
819.3
199.6
673.5
1380.4
Elgg
Friendica
Roundcube
OpenEMR
ownCloud
HotCRP
OpenConf
PrestaShop
OpenCart
AstroSpaces
Magento
Zencart
osCommerce
StoreSprite
CubeCart
WordPress
Joomla
Drupal
Piwigo
X2CRM
implementing
USERPATH (KB)
9.1
5.3
8.0
6.6
2.9
4.6
2.4
5.8
11.5
3.5
11.2
6.5
5.9
4.6
6.2
3.9
3.1
2.6
7.8
6.1
TCB
# of
# of Days
Reduction
Modiﬁed
Spent
Factor
46x
199x
118x
8x
191x
40x
23x
100x
66x
19x
88x
37x
72x
112x
76x
79x
264x
77x
86x
226x
Files
4
13
4
7
4
5
5
5
6
5
4
6
5
4
5
4
3
3
6
10
2
1
2
1.5
1.5
1
1
1
2
1
1.5
1
1
1
1
1
1
1.5
1
2
into the web application, with 167 lines of code added for each web application on an
average (see column “USERPATH LOC” in Table 4 for LOC of all the 20 applications).
Moreover, we empirically show that we achieve the reduction of 8x to 264x in TCB for
our case studies. We measure this reduction by comparing the size of ﬁnal TCB (e.g.,
the UFrame code) with the entire web page size (see column IV in Table 4). We treat
the web page size as the initial TCB size as we need to trust the entire web page in order
to protect our sensitive data and operation.
We also ﬁnd that modifying web applications according to USERPATH incurs rel-
atively small burden on the developer side. On the average, given a set of sensitive
user-owned resources to protect in Table 3, a developer needs to modify 6 ﬁles within
1.3 days for one web application to make it USERPATH-compliant.
5.4 Performance
The main performance factor that impact our solution include: PAKE-based secure del-
egation, the UFrame creation, and new secure elements introduced into DOM. As our
demo video [21] shows, in our experiments with the 20 web applications, we do not
observe any slowdown in user interactions with the applications. Since the login phase
contains all the three factors, we measure the overhead of the login time for 20 appli-
cations from 8 different categories. Table 5 summarizes the results of the login time
(averaged on 5 runs) between the click on the login button and the next page ﬁnishes