vince remote parties that it has done so. These proper-
ties can be achieved using platform security technolo-
gies built on the Trusted Platform Module (TPM) which
is available in many recent commodity platforms [1, 20,
30]. Alternatively, secure coprocessors like the IBM
4758 [27] provide similar properties and stronger resis-
tance to physical attacks, but are more expensive and
not as readily available (the pros and cons of each are
discussed further in Section 8.2). Speciﬁcally, RECAP
will work on any trustworthy computing mechanism that
provides the following properties:
Isolation Isolation allows execution of software com-
ponents to take place in an isolated, veriﬁable envi-
ronment such that any OS, Virtual Machine Mon-
itor (VMM) or BIOS code that is running cannot
affect or observe the execution in the isolated envi-
ronment. Software running in isolation can have
a small, self-contained Trusted Computing Base
(TCB) that does not include the OS, BIOS, or de-
vice ﬁrmware. This is useful because the TCB of
software running on commodity operating systems
is generally very large, usually including the oper-
ating system, BIOS, etc.
Sealed Storage Sensitive data is protected using sealed
storage, whereby data can be encrypted such that
subsequent decryption is only possible if the plat-
form is executing speciﬁc software. For instance,
this can be used with isolation to ensure that sensi-
tive information can only be decrypted by a speciﬁc
software component running in isolation.
Attestation One system can prove to another that it
has loaded certain code for execution within an
isolated environment using attestation. An attes-
tation demonstrates to a remote veriﬁer that the at-
testing platform instantiated an execution environ-
ment with a particular code module, along with
its input and output values. We denote the pro-
cess of creating an attestation of the currently run-
ning code module with input i as GEN ATTEST(i).
A third party can compute the value an attestation
should have for a code module running with input
i as EXP ATTEST(code module, i). Only an attes-
tation from a platform executing the code module
on input i should be equal to the veriﬁer’s, i.e.,
GEN ATTEST(i) = EXP ATTEST(code module, i).
Unique Identiﬁers Each user has a real identity that
is revealed if she violates the contract. For con-
creteness, we assume RECAP uses the unique, un-
spoofable identiﬁer found as part of various trusted
computing platforms, called the endorsement cer-
tiﬁcate. We also refer to the endorsement certiﬁ-
cate as the trusted computing identiﬁer. Section 5
discusses the importance of practical unique iden-
tiﬁers in the context of Sybil attacks.
Since the user and AS both have different roles in
RECAP, it may be desirable to use different trusted
computing implementations for each party. For instance,
since the AS stores sensitive information, it may be
worthwhile to use a secure coprocessor that is designed
to withstand physical attacks for the AS (discussed more
in Section 8.2), but use the more readily available TPM-
based platform for the user.
3 Design Overview
3.1 Contractual Anonymity Requirements
A contractual anonymity protocol should have the
following properties:
Unlinkability We consider a user u to be unlink-
able in an unlinkability set SL if, given any two
messages m1 and m2 such that signer(m1) =
signer(m2) = u, an adversary can determine that
signer(m1) ∈ SL and signer(m2) ∈ SL, but
the probability that the adversary can determine
signer(m1) = signer(m2) is ≤ ǫ, a security pa-
rameter in our system. ǫ = 0.01 means that 1% of
messages from the same user can be linked. A user
is unlinkable unless she breaks her contract.
Note that unlinkability implies the weaker notion
of anonymity, e.g., that an adversary cannot learn
the identity of the user that sent a message.
:
Contract-based The user and SP enter in a con-
tract, and both parties are bound by the con-
tract.
A contract unambiguously speciﬁes
the agreed-upon terms of service with a pol-
{msg1, . . . , msgn} →
icy function f
{ALLOWED, VIOLATION}. If the user signs some
messages m such that f (m) returns VIOLATION,
these signed messages can prove misbehavior to the
AS, who will de-anonymize the user that signed
m. Once a user is de-anonymized, unlinkability
no longer holds for that user. Neither the user nor
the SP can modify an accepted contract; they must
explicitly agree to a new contract if they wish to
change the policy function f .
Revocability The SP is able to obtain a user’s iden-
tity if the SP has proof that the user broke her con-
tract. Speciﬁcally, the proof is a set of messages m
signed by the user such that f (m) returns VIOLA-
TION, where f is the user’s contract policy func-
tion. The SP can then take appropriate action, e.g.,
blacklist the user.
Efﬁciency The protocol should be as efﬁcient as possi-
ble. This includes, but is not limited to, scaling well
with respect to the number of blacklisted users and
not requiring stringent rate limiting.
At a high level, previous approaches fail to meet
these requirements since they do not bind anonymity to
a pre-negotiated contract. For example, many existing
anonymity systems require an unveriﬁable trusted third
party (TTP) that is capable of de-anonymizing users at
will [8, 12, 13]. More recent systems [10, 32] allow
for subjective judgement and anonymous blacklisting,
which allow a SP to blacklist a user for any reason and
at any time without completely de-anonymizing her. In
these systems, the user is never guaranteed unlinkability,
even if she follows the SP’s posted policies.
3.2 RECAP Overview
We propose RECAP, a protocol for achieving the
desired contractual anonymity properties. RECAP in-
volves three parties.
User
Service Provider
Accountability
Server
Registration
Request−Contract
Attestation
Public Key
Attestation, Contract, Anonymous credentials
Contract
Anonymous Communication
Signed message
Breach
Malicious msg
Malicious msg
User’s identity
Figure 1. The three stages of RECAP are
registration, anonymous communication,
and breach.
User The user wants to access the service that is pro-
vided by the service provider. However, she may not
trust the SP or the other users, and thus wants to be anon-
ymous and unlinkable when using the service.
Service Provider The service provider (SP) wants to
provide anonymous and unlinkable access to its service.
However, the SP also wants the ability to blacklist users
who threaten the utility of the service.
Accountability Server The accountability server
(AS) is a veriﬁable third party that manages users’ anon-
ymous credentials and de-anonymizes users that violate
their contracts. Speciﬁcally, the user and SP can ver-
ify that the AS de-anonymizes users if and only if they
break their contract.
An overview of the different stages and participants
of RECAP is shown in Figure 1. We provide an
overview of the stages below, and then discuss them in
greater detail in Section 4.
3.2.1 Protocol Stages
Setup During setup, the parties must generate two
types of keys. The user, AS, and SP must generate pub-
lic/private keypairs that can be used for digital signatures
and asymmetric encryption (e.g., RSA keypairs). The
user only uses these asymmetric keys when registering
with the AS. The AS generates group signature keys for
each group required. The user and AS generate and seal
their keypairs (and related sensitive information) so that
only the trusted RECAP code can decrypt it. The SP
obtains a certiﬁcate that binds its identifying name to its
public key (like a SSL certiﬁcate).
Registration Phase
In the initial registration phase a
SP and user agree on a speciﬁc contract policy. The con-
tract policy stipulates the rules that users are expected
to follow. We discuss policies further in Sections 3.3
and 8.3.
In RECAP, the user receives a contract policy pro-
posed by the SP. If she agrees to the policy, then she
requests a contract containing that policy from the AS.
The AS returns an anonymous credential and a contract
for the user that can be used with the SP.
The contract can be thought of as proof that the AS
has bound together the user’s real identity, anonymous
credential, and the contract policy. It provides assurance
to the SP that the AS knows the true identity of the user
assigned the anonymous credential, and will reveal that
identity if given proof that the user has broken the policy
in her contract.
At the completion of the registration phase, the SP
and user have a contract that guarantees the user’s real
identity will only be revealed by the AS if the SP can
submit a set of messages signed by the user that violate
the contract.
Anonymous Communication Phase
In the anony-
mous communication phase the user uses her anony-
mous credential to interact with the SP. In particular, the
user communicates with the service by digitally signing
a message with her group private key. The SP then ver-
iﬁes that the message was created by a user with a valid
contract by verifying the signed message with the group
public key speciﬁed in the contract.
Since each message must prove it came from an au-
thorized user, we also refer to communicating messages
to the SP as performing an authentication. An anony-
mous communication operation is analogous to the au-
thentication operation of an anonymous authentication
protocol [31, 32].
Contract Breach A breach of contract happens when
the user sends message(s) prohibited by the contract pol-
icy to the SP. The SP can identify which user violated
the contract by presenting the prohibited message(s) to
the AS. Upon conﬁrming that the message(s) violate
the agreed-upon contract, the AS reveals the user’s real
identity and group signature revocation token to the SP.
This allows the SP to identify any subsequent and prior
communication using the anonymous credential.
At the end of the breach phase, the SP has the ca-
pability to identify the user who breached her contract,
and thus can take appropriate action. To be concrete,
we assume the SP will blacklist the user. The blacklist
(BL) is a list of users who have violated the contract and
are no longer allowed to use the service. The SP can
blacklist the user by adding the user’s anonymous cre-
dential to her group signature blacklist. To prevent the
user from obtaining a new anonymous credential, we al-
low the SP to control the AS’s blacklist, which is a list of
real identities that are not allowed to obtain new anon-
ymous credentials. RECAP can easily be extended to
support other actions as well, such as anonymous black-
listing, in which SPs are given the ability to blacklist
users without needing to know their real identities.
3.3 Contract Policies
An anonymity contract is a binding agreement that
states that a user’s real identity may be exposed if she
violates the contract terms. We call those terms the con-
tract policy.
A contract policy is a boolean predicate f : {msg1,
msg2, . . . , msgn} → {ALLOWED, VIOLATION}. The
status VIOLATION indicates that the messages violate
the contract terms, and thus the user is in breach of con-
tract. ALLOWED indicates that the messages do not vio-
late the policy. We do not make any attempt to model a
“morality function”; such policies are outside the scope
of our system. However, there are many classes of poli-
cies that do ﬁt our model, several of which were de-
scribed in Section 1. We discuss policies further in Sec-
tion 8.3.
4 Architecture
4.1 Establishing a Secure Channel
Why is a New Protocol Needed? Many parts of
RECAP rely on the ability to create a secure channel
between the protocol participants. A RECAP secure
channel must be able to provide 1) conﬁdentiality and
integrity of any messages sent inside the channel, and 2)
assurance that the remote party’s private key is sealed so
that only the trusted RECAP software can access it.
Although conﬁdentiality and integrity of messages
inside the channel can be achieved using standard tech-
niques (i.e., SSL/TLS), RECAP has several require-
ments which motivate a new secure channel protocol:
• The user’s endorsement certiﬁcate is used as the
user’s unique identiﬁer and as a required compo-
nent for verifying user attestations. Thus, the se-
cure channel protocol must not require the user to
reveal her endorsement certiﬁcate, which is conﬁ-
dential, until it has been established that only the
trusted RECAP code can access it.
• The untrusted part of the RECAP software (e.g.,
the part not running in trusted computing-enabled
isolation) must demonstrate that it runs the trusted
RECAP software in response to the secure chan-
nel establishment. In addition, the trusted RECAP
software must prove it has access to its trusted long
term RSA key. Thus, two sets of challenges are
needed.
• Any agent running the secure RECAP software in
an isolated, veriﬁable environment is considered to
be trusted. Because of this, it is not only important
to establish conﬁdentiality and integrity among the
possessors of the keys used to setup the channel,
but also establish that these keys are only accessible
by the trusted RECAP software.
RECAP achieves these requirements using the protocol
described below. RECAP’s secure channel protocol is
similar to existing secure channel protocols, modulo the
changes needed to add the above features.
Protocol Details Lines 3–16 of Figure 2 show how we
establish a secure channel in the registration protocol be-
tween the user and AS. A secure channel is established
U-SP registration protocol
1. U → SP:
2. SP → U:
{message, σ = ⊥, contract = ⊥}
{Get-Contract, AS, SP, AddrSP , CP }K−1
SP
U-AS registration protocol
3. U:
4. U → AS:
5. AS:
6. AS:
7. U ← AS:
8. U:
9. U:
10. U → AS:
11. U ← AS:
12. U:
13. U → AS:
14. AS:
15. AS:
16.
17. U → AS:
18. AS:
19. AS:
20. U ← AS:
21. U → SP:
22. SP:
R
← {0, 1}α, RU
NU
{KU , NU }
R
← {0, 1}α
R
R
← {0, 1}α
← {0, 1}α, RAS
NAS
a ← GEN ATTEST(KU |NU |KAS |NAS )
{KAS , NAS , a, CEndorse−AS }
a′ ← EXP ATTEST(Trusted RECAP Code, KU |NU |KAS |NAS )
abort if a 6= a′
{{RU }K−1
{{RU + 1, RAS }K−1
a ← GEN ATTEST(KU |NU |KAS |NAS )
{{RAS + 1, a, CEndorse−U }K−1
}KAS
a′ ← EXP ATTEST(Trusted RECAP Code, KU |NU |KAS |NAS )
abort if a 6= a′
}KAS
}KU
AS
U
U
Setup symmetric encryption and MAC
{Get-Contract, AS, SP, AddrSP , CP }K−1
abort if CEndorse−U on SP’s blacklist
execute key binding protocol
{{CP, KGPK , KSP }K−1
GSK [i]}
, K−1
SP
AS
U-SP anonymous communication protocol
{message, σ = GS SIGN(KGPK , K−1
{CP, KGPK , KSP }K−1
if GS VERIFY(KGPK , message, σ, BL) = VALID, accept message.
GSK [i], message), contract =
AS
}
User knows AS running trusted code.
User knows KAS bound to trusted AS code.
AS knows user running trusted user code and
KU bound to trusted user software.
Secure channel established.
Figure 2. The registration and anonymous communication protocols. The user obtains a con(cid:173)
tract using the registration protocol. The anonymous communication protocol is then used
to send anonymous messages to the service provider (SP). All messages after Line 16 are
implicitly encrypted and MACed using symmetric cryptography.
in the breach protocol as well, but the process is very
similar. On Lines 3–4 of Figure 2, the user generates a
nonce NU and sends the nonce and its public key KU
to the AS. The AS generates its own nonce NAS and an
attestation to prove that is running the RECAP software
in response to the user’s request (Lines 5–6).
A veriﬁed attestation proves several important facts
to the veriﬁer (in this case, the user). First, by includ-
ing NU and NAS in the attestation, the AS proves that it
is responding to the user’s request, which ensures fresh-
ness, i.e., the isolated execution environment ran in re-