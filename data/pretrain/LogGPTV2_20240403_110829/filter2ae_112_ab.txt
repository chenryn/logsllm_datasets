100.0）+ 30cos（4.0πx/ 100.0）+ 6cos（6.0πx/ 100.0），其中[0,0]为画布的左上角，x轴向右增加，y轴增加到底部。
三行的起点和终点是 {[38.4,115.2]，[89.6,204.8]}，{[89.6,89.6]，[153.6,204.8]} 和
{[166.4,89.6]，[217.6,204.8]}。
选择这些特定的线条和曲线，以便测试不同的渐变和形状。
###### 3\. task（f）：光
图（f）中的任务是测试漫射点光和 Suzanne 模型的相互作用。 漫射点光在照亮物体时会引起漫反射。 具体地说，该光是在 RGB
上具有相同值的白色，对于每种原色，光的功率为2，光源位于 [3.0，-4.0，-2.0]。
在这个任务中选择一个白光源，因为纹理是各种颜色的，单色光可能会减少纹理上的一些微妙差异。 光线的强度需要精心设计。非常弱的光线不会照亮 Suzanne
模型，模型就会不可见；非常强的光会使一切变白，减少指纹特征。
在 6 台机器的小规模实验中，功率从 0 增加到 255，我们发现当光功率为2时，这些机器之间的像素差异最大。光照位置可随机选择，不会影响特征指纹识别结果。
可以看出,这些任务深入研究了图片渲染引擎的特征，js
没办法直接获取到显卡的设置和驱动，但是通过这种方法，当不同的显卡渲染同一张图片时，因设置不同，渲染出来的图片 hash 也不同。用这种图片 hash
作为特征，其实是从侧面得到机器显卡的特征，同一台机器在不同的浏览器上用到同一个显卡，所以可以看到这些 task 的跨浏览器稳定性都很高，总共 10 余种
task。
Paper中除了这些task，还有一些其他新颖的东西
###### 1\. CPU内核数量
这个在之前的设备指纹方案中都是没有使用到的，现代浏览器可以用 navigator .hardware Concurrency
来获取。如果不支持这个方法，则可以利用另一种方式获取，具体来说是，当增加 Web Worker 的数量时，可以监视 payload
的完成时间。当计算量达到一定的程度，Web Woker 完成 payload
的时间显著增加，达到硬件并发的限制，从而判断核心的数量。一些浏览器（如Safari）会将 Web Workers
的可用内核数量减少一半，所以在获取跨浏览器指纹时，我们需要将获取到的核心数量加倍。
此处内容，有兴趣的同学可以看看[这篇文章](https://eligrey.com/blog/cpu-core-estimation-with-javascript/)。
###### 2\. writing script(language)
这个其实可以理解为语言，但不是当前浏览器所使用的语言，而是系统支持的所有语言，比如中文简体、中文繁体、英语，js
中并没有接口直接获取这种语言，但是这里作者想到了另一种方法，就是在页面中用所有的语言写两个字，如果系统支持该语言，那么就能正常写出来；如果不支持，显示出来的就是方框。通过这种方法获取系统支持的语言。
###### 3\. AudioContext
能熟悉设备指纹的同学都知道，AudioContext 在很多设备指纹项目上都用到了。具体来说，现有的指纹识别工作使用 OscillatorNode
产生一个三角波，然后将波传 Dynamics Compressor Node，一个调节声音的信号处理模块，产生压缩效果。 然后，经处理的音频信号通过
Analyser Node 转换为频率域。
该 paper
指出，频域在不同的浏览器中是不同的，这个特征受浏览器的影响，不能完全反应出声卡的特征。也就是说，现有的方案只能识别单浏览器。但是他们发现，频率和峰值的比，在浏览器之间是相对稳定的。
因此，在频率和值的坐标系上创建一个间距很小的列表，并将峰值频率和峰值映射到相应的格子。
如果一个格子包含一个频率或值，我们将格子标记为1，否则为0，这样的格子列表用作跨浏览器特征。
除了波形处理外，还能从音频设备上获取以下信息：采样率、最大通道数、输入数、输出数、通道数、通道数模式和通道解释。
这是现有的设备指纹工作没有用到的又一个跨浏览特征。
在 demo 站中，从我电脑上收集到的信息如下
我跨浏览器测试的结果，的确能够跨浏览器识别，看到这里，由衷的佩服该项目。
#### 04\. 查看代码
在我看来，十多个 task，AudioContext，CPU core number，writing
script，跨浏览器稳定性都如此之高，做一些机器学习的分析工作，算一算相似性，真的非常容易达到跨浏览器识别的目的。
但我们来看看后端分析代码，如下：
这是代码中获取到的从前端传来的特征，然后就该通过这些特征计算跨浏览器指纹了。
但是，他只是简单的把这些项目加到一起 hash 了一下，就作为跨浏览器指纹。
虽然 demo 站说明了跨浏览器指纹还在开发中，并没有什么复杂的计算，跟 paper 中提到的分析方式完全不同，跟我预期的什么机器学习的方式也不同。
但是，跨浏览器的特征倒是选用了一些稳定性极高的特征，所以直接 hash 也能进行跨浏览器识别。
Paper 中的思路真的很好，所以沿着这个思路，我们还有很多工作要做。
#### 05\. 最后说一句
该 paper 中一直提到的 IP 不可信的问题，既然是黑客溯源，对面是黑客，提出这个观点也无可厚非，毕竟大家都会挂 VPN 或者用肉鸡。但是 IP
作为一个重要信息，在设备指纹项目中，还是有用武之地的。
我个人的观点：IP 虽然不可信，但是短时间的 IP 是可信的。
各位可以自己去试试 IP+设备指纹的区分度还是很好的，而且很大程度上能解决一部分跨浏览器识别的问题。
本文仅是自己的一些心得分享，欢迎大家在评论区留言，也可关注我的个人微博@chengable。浅知拙见，抛砖引玉，期待与大家的交流。
* * *
**作者简介：**
程进，默安科技影武者实验室安全工程师。主要参与一些安全产品的安全能力推进，包括幻盾的蜜网、黑客溯源技术，SDL雳鉴的漏洞扫描、代码审计等。
* * *