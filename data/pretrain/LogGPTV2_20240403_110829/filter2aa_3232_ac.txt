be modified unconditionally
• If they should, write the relevant memory and abort the syscall with an appropriate value
3. Set contextual state (including original inputs) in an eBPF map indexed by PID/TGID/FD
4. On hooked syscall returns, the eBPF program’s kretprobe should identify if there is saved
contextual state based on the process’s PID/TGID/FD
• If not, return
5. Determine if the legitimate syscall output should be modified
• If not, return
6. Apply the configured modifications
7. Clear the contextual state for the process from the relevant eBPF map
Interdisciplinary Syscall Interdiction — Black Hole
1. Attach a kernel tracing eBPF program to target syscall entries
• This program should be configured with target processes
• This can be done through code generation of the program or by passing data in eBPF maps
2. On hooked syscalls, the eBPF program’s kprobe will abort the syscall
• As applicable, it will abort with an appropriate return value
• It may also write to userspace memory to spoof a successful result before aborting
eBPF Kernel Tracing Primer (3)
• The bpf_probe_write_user() helper function has one main limitation
eBPF Kernel Tracing Primer (3)
• The bpf_probe_write_user() helper function has one main limitation
• It cannot write non-writable pages
eBPF Kernel Tracing Primer (3)
• The bpf_probe_write_user() helper function has one main limitation
• It cannot write non-writable pages
• This means that it cannot write to the text or rodata sections
• At least for properly compiled programs
• This also means that it can only generally write to the stack, heap, and static data sections,
which may contain useful targets:
• Function pointers
• Saved file descriptors
• Scripting language textual content
• Dynamically-generated shell commands
eBPF Kernel Tracing Primer (3)
• The bpf_probe_write_user() helper function has one main limitation
• It cannot write non-writable pages
• This means that it cannot write to the text or rodata sections
• At least for properly compiled programs
• This also means that it can only generally write to the stack, heap, and static data sections,
which may contain useful targets:
• Function pointers
• Saved file descriptors
• Scripting language textual content
• Dynamically-generated shell commands
• But there is no guarantee that at least one such abusable target will exist across all processes
eBPF Kernel Tracing Primer (3)
• The bpf_probe_write_user() helper function has one main limitation
• It cannot write non-writable pages
• This means that it cannot write to the text or rodata sections
• At least for properly compiled programs
• This also means that it can only generally write to the stack, heap, and static data sections,
which may contain useful targets:
• Function pointers
• Saved file descriptors
• Scripting language textual content
• Dynamically-generated shell commands
• But there is no guarantee that at least one such abusable target will exist across all processes
• However, all processes have return addresses
At the Stack with Ebert and ROPer
Precise corruption of the stack to inject generic or dynamic ROP chains
• There are several phases to this technique
0. Payload Pre-Generation (generic ROP chain)
1. Syscall Selection
2. Process Filtration
3. Text Section Identification
• Attaining Address Spacial Awareness (generic ROP chain)
• Stack Skimming (dynamically generated ROP chain)
4. Text Extraction (dynamically generated ROP chain)
5. Payload Generation (dynamically generated ROP chain)
6. Stack Skimming Redux
7. Backup Memory
8. Payload Injection and Execution
9. Coordinated Cleanup
• While they do not necessarily need to be followed serially, it is often simpler to do so
At the Stack with Ebert and ROPer — Setup and TargetAcquisition
0. Payload Pre-Generation
1
Find a commonly loaded shared library with useful gadgets
• For example, glibc has an internal dlopen(3) implementation
• dlopen(3) takes only a char* path and int
• On success it loads a shared library from the path and will automatically execute its constructors
2
Scan for gadgets
3
Assemble a ROP chain
• By hand or with an automatic ROP chain generator
1. Syscall Selection
• Register a generic eBPF kprobe on syscalls regularly invoked by target processes
• If using a generic ROP chain, select only syscalls made by or on behalf of the selected library
2. Process Filtration
• Within the eBPF kprobe program, profile the processes and their syscalls to prevent further
manipulation of unintended targets
At the Stack with Ebert and ROPer — Text Section Identification
3. Attaining Address Spacial Awareness
1
Within the registered eBPF kprobe program, extract the original instruction pointer register value
from the kprobe context
2
Verify that the memory it references is a valid syscall instruction
3
Using a pre-computed offset from the syscall instruction, compute the base address of the library
3. Stack Skimming
1
Within the registered eBPF kprobe program, extract the original stack register value from the
kprobe context
2
Scan the stack for the return address
1
For each valid offset, determine if the value on the stack is an address into the text section
2
If so, shift it backwards and attempt to determine if the previous instruction was a call
3
If so, determine if the call was direct or through a PLT entry
4
If direct, compute and save the call target and caller addresses
5
If PLT-based, parse the PLT jump instruction to compute the target, saving it and the caller address
3
Scan backwards from these text section address to identify the start of their mapped regions
At the Stack with Ebert and ROPer — Text Extraction and Payload Generation
4. Text Extraction
• Using the base addresses identified in the Stack Skimming step, extract their entire mapped
ranges page by page until a page fault it encountered
5. Payload Generation
• Use a ROP chain generator to create a payload that can load and execute arbitrary code, and
finally perform the userland half of the cleanup routine
At the Stack with Ebert and ROPer — Code Execution
6. Stack Skimming Redux
1
Perform the same steps as the original Stack Skimming operation to obtain the address
containing the return address of the syscall stub
2
Using an eBPF map, store the context of the syscall and return from the kprobe
7. Backup Memory
1
In the eBPF kretprobe program of the same syscall, validate that the syscall’s return is to be
overwritten with ROP chain
2
Back up all memory that will be clobbered by the ROP chain’s execution
8. Payload Injection and Execution
1
Write the ROP chain into the stack starting at the location of the syscall stub’s return address
2
Return from the eBPF kretprobe program
3
The syscall stub will eventually return to the beginning of the ROP chain
• This payload should perform desired functionality and then perform the first phase of its cleanup
At the Stack with Ebert and ROPer — Finale
9. Coordinated Cleanup
1
In the first part of the ROP chain’s cleanup routine, the payload should issue a Closed Reading
syscall to an eBPF kprobe program
2
This program, when accessed with a magic value, writes most of original stack back
• However, it should not write over the remaining gadgets in original chain
3
It should also write the final ROP chain cleanup gadgets past the end of original stack
4
The Closed Reader eBPF kprobe program should then return
5
The second part of the ROP chain’s cleanup routine will execute, shifting the stack pointer to
newly written ROP gadgets implementing the last part of cleanup routine
6
The final part of the ROP chain’s cleanup routine will execute, writing back the original stack
values over the last parts of the originally written gadgets
7
The last remaining gadget will set the return value for the original syscall
8
Control flow should return back to the caller of the syscall stub
Defense Against
The Dark Arts
Defense Against The Dark Arts
• Remove/Blacklist the bpf(2) syscall entirely
Defense Against The Dark Arts
• Remove/Blacklist the bpf(2) syscall entirely
• Modern Linux increasingly requires eBPF support, so it will be compiled in
Defense Against The Dark Arts
• Remove/Blacklist the bpf(2) syscall entirely
• Modern Linux increasingly requires eBPF support, so it will be compiled in
• What do you do when someone eventually accesses it?
Defense Against The Dark Arts
• Remove/Blacklist the bpf(2) syscall entirely
• Modern Linux increasingly requires eBPF support, so it will be compiled in
• What do you do when someone eventually accesses it?
• Log all loaded eBPF programs
• eBPF resources (programs, maps, etc) can be enumerated and dumped by privileged users
• bpftool is a (really cool) userland utility for accessing the relevant APIs
Defense Against The Dark Arts
• Remove/Blacklist the bpf(2) syscall entirely
• Modern Linux increasingly requires eBPF support, so it will be compiled in
• What do you do when someone eventually accesses it?
• Log all loaded eBPF programs
• eBPF resources (programs, maps, etc) can be enumerated and dumped by privileged users
• bpftool is a (really cool) userland utility for accessing the relevant APIs
• However, this is still susceptible to Lying Kernel attacks on the bpf(2) syscall
Defense Against The Dark Arts
• Remove/Blacklist the bpf(2) syscall entirely
• Modern Linux increasingly requires eBPF support, so it will be compiled in
• What do you do when someone eventually accesses it?
• Log all loaded eBPF programs
• eBPF resources (programs, maps, etc) can be enumerated and dumped by privileged users
• bpftool is a (really cool) userland utility for accessing the relevant APIs
• However, this is still susceptible to Lying Kernel attacks on the bpf(2) syscall
• Trace syscalls (securely) to detect warning signs
• Any time eBPF maps are being transferred between processes
• Any time eBPF maps are not being used with eBPF programs
• Any time eBPF programs are being transferred between processes
• Any time an unexpected eBPF program is being attached to TCP/UDP/Unix socket
• Any time an unrecognized eBPF tracer program is created
Defense Against The Dark Arts
• Remove/Blacklist the bpf(2) syscall entirely
• Modern Linux increasingly requires eBPF support, so it will be compiled in
• What do you do when someone eventually accesses it?
• Log all loaded eBPF programs
• eBPF resources (programs, maps, etc) can be enumerated and dumped by privileged users
• bpftool is a (really cool) userland utility for accessing the relevant APIs
• However, this is still susceptible to Lying Kernel attacks on the bpf(2) syscall
• Trace syscalls (securely) to detect warning signs
• Any time eBPF maps are being transferred between processes
• Any time eBPF maps are not being used with eBPF programs
• Any time eBPF programs are being transferred between processes
• Any time an unexpected eBPF program is being attached to TCP/UDP/Unix socket
• Any time an unrecognized eBPF tracer program is created
• It’s still unclear how much more common these operations will get
Conclusion
• Mo APIs Mo Problems
Conclusion
• Mo APIs Mo Problems
• Even unprivileged eBPF can enable screwy behaviors
• Privileged eBPF is nigh-impossible to stop
Conclusion
• Mo APIs Mo Problems
• Even unprivileged eBPF can enable screwy behaviors
• Privileged eBPF is nigh-impossible to stop
• A good number of eBPF APIs probably don’t need to require crazy privileges
• If they become unprivileged, they will probably enable some more shenanigans
Conclusion
• Mo APIs Mo Problems
• Even unprivileged eBPF can enable screwy behaviors
• Privileged eBPF is nigh-impossible to stop
• A good number of eBPF APIs probably don’t need to require crazy privileges
• If they become unprivileged, they will probably enable some more shenanigans
• I’m waiting for an eBPF map that can pass arbitrary file descriptors between processes
Greetz
• Andy O
• jkf
You can’t hide secrets
from the future using math
Questions?
PI:EMAIL
@chaosdatumz
Evil eBPF
Practical Abuses of an In-Kernel Bytecode Runtime
Jeff Dileo
DEF CON 27