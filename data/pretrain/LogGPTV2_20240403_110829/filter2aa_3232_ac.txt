### Interdisciplinary Syscall Interdiction and eBPF Kernel Tracing

#### Conditional Syscall Modification
1. **Attach a Kernel Tracing eBPF Program:**
   - Attach an eBPF program to the target syscall entries.
   - Configure the program with target processes, either through code generation or by passing data in eBPF maps.

2. **On Hooked Syscall Entry:**
   - If the syscall should be modified unconditionally:
     - Write the relevant memory.
     - Abort the syscall with an appropriate return value.
   - Set contextual state (including original inputs) in an eBPF map indexed by PID/TGID/FD.

3. **On Hooked Syscall Return:**
   - The eBPF program’s kretprobe should check if there is saved contextual state based on the process’s PID/TGID/FD.
   - If no contextual state is found, return.
   - Determine if the legitimate syscall output should be modified.
   - If not, return.
   - Apply the configured modifications.
   - Clear the contextual state for the process from the relevant eBPF map.

#### Black Hole Interdiction
1. **Attach a Kernel Tracing eBPF Program:**
   - Attach an eBPF program to target syscall entries.
   - Configure the program with target processes, either through code generation or by passing data in eBPF maps.

2. **On Hooked Syscalls:**
   - The eBPF program’s kprobe will abort the syscall.
   - As applicable, it will abort with an appropriate return value.
   - It may also write to userspace memory to spoof a successful result before aborting.

#### eBPF Kernel Tracing Primer
- **bpf_probe_write_user() Helper Function Limitations:**
  - The `bpf_probe_write_user()` helper function cannot write non-writable pages.
  - This means it cannot write to the text or rodata sections, at least for properly compiled programs.
  - It can only generally write to the stack, heap, and static data sections, which may contain useful targets such as:
    - Function pointers
    - Saved file descriptors
    - Scripting language textual content
    - Dynamically-generated shell commands
  - However, there is no guarantee that at least one such abusable target will exist across all processes.
  - All processes have return addresses.

#### At the Stack with Ebert and ROPer
- **Precise Corruption of the Stack:**
  - This technique involves several phases:
    0. **Payload Pre-Generation (generic ROP chain):**
       - Find a commonly loaded shared library with useful gadgets (e.g., glibc).
       - Scan for gadgets.
       - Assemble a ROP chain (manually or with an automatic generator).
    1. **Syscall Selection:**
       - Register a generic eBPF kprobe on syscalls regularly invoked by target processes.
       - If using a generic ROP chain, select only syscalls made by or on behalf of the selected library.
    2. **Process Filtration:**
       - Profile the processes and their syscalls within the eBPF kprobe program to prevent further manipulation of unintended targets.
    3. **Text Section Identification:**
       - Extract the original instruction pointer register value from the kprobe context.
       - Verify that the memory it references is a valid syscall instruction.
       - Compute the base address of the library using a pre-computed offset from the syscall instruction.
    4. **Stack Skimming:**
       - Extract the original stack register value from the kprobe context.
       - Scan the stack for the return address.
       - For each valid offset, determine if the value on the stack is an address into the text section.
       - If so, shift it backwards and attempt to determine if the previous instruction was a call.
       - If the call was direct, compute and save the call target and caller addresses.
       - If PLT-based, parse the PLT jump instruction to compute the target, saving it and the caller address.
       - Scan backwards from these text section addresses to identify the start of their mapped regions.
    5. **Text Extraction and Payload Generation:**
       - Extract the entire mapped ranges page by page using the base addresses identified in the Stack Skimming step.
       - Use a ROP chain generator to create a payload that can load and execute arbitrary code and perform the userland half of the cleanup routine.
    6. **Stack Skimming Redux:**
       - Perform the same steps as the original Stack Skimming operation to obtain the address containing the return address of the syscall stub.
       - Store the context of the syscall and return from the kprobe using an eBPF map.
    7. **Backup Memory:**
       - In the eBPF kretprobe program of the same syscall, validate that the syscall’s return is to be overwritten with the ROP chain.
       - Back up all memory that will be clobbered by the ROP chain’s execution.
    8. **Payload Injection and Execution:**
       - Write the ROP chain into the stack starting at the location of the syscall stub’s return address.
       - Return from the eBPF kretprobe program.
       - The syscall stub will eventually return to the beginning of the ROP chain, which should perform the desired functionality and then the first phase of its cleanup.
    9. **Coordinated Cleanup:**
       - Issue a Closed Reading syscall to an eBPF kprobe program.
       - This program, when accessed with a magic value, writes most of the original stack back but not over the remaining gadgets in the original chain.
       - Write the final ROP chain cleanup gadgets past the end of the original stack.
       - The second part of the ROP chain’s cleanup routine will execute, shifting the stack pointer to newly written ROP gadgets implementing the last part of the cleanup routine.
       - The final part of the ROP chain’s cleanup routine will execute, writing back the original stack values over the last parts of the originally written gadgets.
       - The last remaining gadget will set the return value for the original syscall.
       - Control flow should return back to the caller of the syscall stub.

#### Defense Against the Dark Arts
- **Remove/Blacklist the bpf(2) Syscall:**
  - Modern Linux increasingly requires eBPF support, so it will be compiled in.
  - Log all loaded eBPF programs.
  - eBPF resources (programs, maps, etc.) can be enumerated and dumped by privileged users.
  - Use `bpftool`, a userland utility for accessing the relevant APIs.
  - Trace syscalls (securely) to detect warning signs:
    - Any time eBPF maps are being transferred between processes.
    - Any time eBPF maps are not being used with eBPF programs.
    - Any time eBPF programs are being transferred between processes.
    - Any time an unexpected eBPF program is being attached to TCP/UDP/Unix socket.
    - Any time an unrecognized eBPF tracer program is created.

#### Conclusion
- **Mo APIs Mo Problems:**
  - Even unprivileged eBPF can enable screwy behaviors.
  - Privileged eBPF is nigh-impossible to stop.
  - Many eBPF APIs probably don’t need to require crazy privileges.
  - If they become unprivileged, they will likely enable more shenanigans.
  - An eBPF map that can pass arbitrary file descriptors between processes is anticipated.

#### Greetz
- **Andy O**
- **jkf**

**You can’t hide secrets from the future using math.**

**Questions?**
- PI:EMAIL
- @chaosdatumz

**Evil eBPF: Practical Abuses of an In-Kernel Bytecode Runtime**
- **Jeff Dileo**
- **DEF CON 27**