u
c
c
A
Trace−20, Attack
Trace−20, Causal
Trace−50, Attack
Trace−50, Causal
8
64
Maximum path length d (hop count)
16
32
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
y
c
a
r
u
c
c
A
128
0
200
400
Trace−20, median
Trace−20, 90 percentile
Trace−50, median
Trace−50, 90 percentile
Trace−20, attack
Trace−20, causal
Trace−50, attack
Trace−50, causal
22
20
18
16
14
12
10
8
6
4
s
p
o
h
f
o
r
e
b
m
u
N
800
Sampling window ∆ t (second)
1600
3200
6400
12800
2
200
400
800
1600
3200
6400
12800
Sampling window ∆ t (second)
(a) Detection accuracy vs. (cid:0)
(b) Detection accuracy vs. 
(c) Actual path length vs. 
Figure 15: Impact of parameter selection on performance using both Trace-20 and Trace-50.
(cid:0) Random moonwalk selection: Pick the (cid:2) (cid:0) (cid:1)(cid:2)(cid:2)
edges with the highest frequency after performing (cid:1)(cid:2)(cid:0)
random moonwalks.
(cid:0) Heavy-hitter detection: Find the 800 hosts that gen-
erated the largest number of ﬂows in the trace (the
“heavy-hitters”). Randomly pick 100 ﬂows between
two heavy-hitters. (We select 800 hosts as we know
there are about 800 infected hosts in the traces.)
(cid:0) Super-spreader detection: Find the 800 hosts that
contacted the largest number of distinct destination
hosts (the “super-spreaders”). Randomly pick 100
ﬂows between two super-spreaders.
(cid:0) Oracle selection: Assume an oracle that identiﬁes the
set of infected hosts with zero false positive rate. The
oracle randomly selects 100 ﬂows between these hosts.
(cid:0) Random selection: Randomly pick 100 ﬂows from
each trace.
Both heavy-hitter and super-spreader heuristics have
been traditionally used to detect patterns of malicious ac-
tivity in IDSes [17, 18].
As expected, the detection accuracy for attack edges de-
creases with an increased worm inter-scan duration (Fig-
ure 16 (a)), since a worm that sends attack trafﬁc at a slower
rate will create fewer attack edges in the host contact graph.
Random moonwalk selection and oracle selection have sim-
ilar performance and perform substantially better than the
other strategies. Perhaps surprisingly, heavy-hitter detec-
tion performs even worse than random selection, as the
heavy-hitter method is likely to select servers, and most of
the communication between servers is legitimate trafﬁc.
The real success of the random moonwalk algorithm,
however, is not in picking attack edges. Rather it lies in
its ability to extract causal edges from a large noisy host
contact graph. This is evident from Figure 16 (b), where we
notice that all other techniques, including oracle selection,
have a low detection accuracy for causal edges across all
worm scanning rates. For attacks that spread at rates of one
scan every 10-30 seconds, the causal edge detection accu-
racy of random moonwalk selection is greater than 0.5, im-
plying that roughly 50 out of the top 100 edges are always
causal edges. This establishes the capability of ﬁnding the
causal edges by globally correlating the host trafﬁc patterns
for very stealthy attacks using the random moonwalk algo-
rithm. On the other hand, the poor performance of even the
oracle selection suggests that detecting infected hosts alone
does not help extracting the causal edges to reconstruct the
top level causal tree and trace back the worm origin.
100
7.6 Performance vs. Worm Scanning Method
In this experiment, we study the effectiveness of random
moonwalks using worms with different scanning methods.
Since many existing techniques identify worm scanners by
looking at only ﬂows sent to non-existent hosts [11, 28],
a smart worm can evade such detection by carefully tar-
geting only valid addresses. We therefore evaluate the
performance of our technique using two worms with dif-
ferent scanning methods. The ﬁrst scanning method ran-
domly scans only valid host addresses, while the second
method randomly scans both existent and non-existent host
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
y
c
a
r
u
c
c
a
e
g
d
e
k
c
a
t
t
A
0
10
20
Random walk
Oracle selection
Super−spreader detection
Heavy−hitter detection
Random selection
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
y
c
a
r
u
c
c
a
e
g
d
e
l
a
s
u
a
C
Random walk
Oracle selection
Super−spreader detection
Heavy−hitter detection
Random selection
30
50
75
Worm inter−scan duration (second)
100
0
10
20
30
Worm inter−scan duration (second)
50
75
(a) Attack edges
(b) Causal edges
Figure 16: Detection accuracy vs. worm scanning rate. The
X-axis represents the worm inter-scan duration. For exam-
ple, a window of (cid:3) (cid:0) (cid:3)(cid:2) means an infected host generates
an infection ﬂow every 20 seconds.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
y
c
a
r
u
c
c
A
1
0.8
0.6
0.4
0.2
0
Scan method 1
Scan method 2
C−100
C−500
A−100
A−500
(a)
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
y
c
a
r
u
c
c
A
0.2
0.05
0.1
Causal edges
Attack edges
0.15
0.2
Fraction of hosts vulnerable (F)
0.25
0.3
0.35
0.4
(b)
Figure 17: (a) Comparing detection accuracy using worms
with different scanning methods using Trace-20. (b) Com-
paring detection accuracy using worms targeting different
fraction of vulnerable hosts (cid:0) .
addresses with 50% of host address space being used. For
both worms, an infected host starts scanning at the rate of
one attack ﬂow every 20 seconds.
Figure 17 (a) compares the detection accuracy of the top
(cid:1) (cid:0) (cid:1)(cid:2)(cid:2) and (cid:1) (cid:0) (cid:3)(cid:2)(cid:2) frequency edges for the two different
worms. For both causal edges (represented by C-100 and
C-500) and the attack edges (represented by A-100 and A-
500), random moonwalks achieve better detection accuracy
for the “smart-scanning” worm, which is consistent with our
analytical study in Section 6.2. As random moonwalk sam-
pling identiﬁes the subtle global tree patterns of worm prop-
agation, instead of relying on the scanning behavior of each
speciﬁc infected host, it is inherently more robust to other
worm scanning strategies [25, 28]. Such results are also en-
couraging for detecting those worms that may evade detec-
tion techniques employed by many existing scan-detectors,
which essentially use the number of connections to unused
address chunks as a metric of interest [11, 12, 20].
7.7 Performance vs. Fraction of Hosts Vulnerable
This section studies the performance of the random moon-
walk algorithm with different fraction of hosts infected (i.e.,
we vary (cid:0) ). With a greater number of hosts infected by an
attack, the degree of anonymity provided to the true attacker
is also greater. In this experiment, we ﬁx the worm scanning
rate to be one attack ﬂow per 20 seconds, and vary the frac-
tion of hosts vulnerable (cid:0) during each attack. Figure 17 (b)
shows the performance in terms of the detection accuracies
of both causal edges and attack edges. Within the range of
(cid:0) (cid:0) (cid:4)(cid:2)(cid:2)(cid:2)(cid:3)(cid:3) (cid:2)(cid:2)(cid:5)(cid:6), we observe that the detection accuracies
increase as we increase the fraction of hosts infected. Em-
pirically, our experiments also show that the detection ac-
curacy increases for more slowly propagating attacks (e.g.,
one scan per 50 seconds) as they infect more hosts in the
network along time. We plan to further quantify the impact
of (cid:0) on performance as future work.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
8 Simulation Study
The goal of our simulation study is to evaluate the effec-
tiveness of random moonwalks using different background
trafﬁc models of normal host communication. Our hypothe-
sis is that the simpliﬁed trafﬁc model in our analytical study,
where background (i.e., normal) trafﬁc, modeled as uniform
scanning, is a worst case model for performance of our algo-
rithm. Realistic host contact graphs tend to be much sparser,
meaning the chance of communication between two arbi-
trary hosts is very low since host connectivity patterns usu-
ally display locality in the set of destinations contacted. An
epidemic “tree” structure will more easily stand out in such
scenarios, and thus be detected with higher accuracy.
In particular, we model the host connectivity patterns in