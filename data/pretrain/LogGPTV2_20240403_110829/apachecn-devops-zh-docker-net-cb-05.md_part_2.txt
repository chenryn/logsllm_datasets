```
现在重新启动服务并运行以下容器:
```
user@docker1:~$ sudo systemctl daemon-reload
user@docker1:~$ sudo systemctl restart docker
root@docker1:~#
root@docker1:~# docker run -d -P --name=web8-3 \
jonlangemak/web_server_8_dns
5e380f8da17a410eaf41b772fde4e955d113d10e2794512cd20aa5e551d9b24c
root@docker1:~#
```
因为我们在容器运行时没有提供任何与 DNS 相关的选项，所以我们要检查的下一个地方是服务级别选项。我们的 Docker 服务级别选项包括`lab.external`的 DNS 搜索域。我们希望容器接收到那个搜索域。但是，由于我们没有定义域名系统服务器，我们需要回到 Docker 主机本身上配置的服务器。
现在检查它的`resolv.conf`文件，确保事情按预期进行:
```
user@docker1:~$ docker exec -t web8-3 more /etc/resolv.conf
search lab.external
nameserver 10.20.30.13
user@docker1:~$
```
# 为名称和服务解析配置链接
容器链接为一个容器提供了与同一主机上的另一个容器轻松通信的手段。正如我们在前面的例子中看到的，大多数容器到容器的通信都是通过 IP 地址进行的。容器链接在这方面有所改进，它允许链接的容器通过名称相互通信。除了提供基本的名称解析，它还提供了一种查看链接容器提供什么服务的方法。在这个食谱中，我们将回顾如何创建容器链接，并讨论它们的一些限制。
## 做好准备
在本食谱中，我们将在单个 Docker 主机上演示配置。假设该主机安装了 Docker，并且 Docker 处于默认配置。我们将更改主机上的名称解析设置，因此您将需要根级访问权限。
## 怎么做…
短语*容器链接*可能对某些人意味着它涉及某种网络配置或修改。实际上，容器链接与容器联网关系不大。在默认模式下，容器链接为一个容器提供了解析另一个容器名称的方法。例如，让我们在实验室主机`docker1`上启动两个容器:
```
root@docker1:~# docker run -d -P --name=web1 jonlangemak/web_server_1
88f9c862966874247c8e2ba90c18ac673828b5faac93ff08090adc070f6d2922 root@docker1:~# docker run -d -P --name=web2 --link=web1 \
jonlangemak/web_server_2
00066ea46367c07fc73f73bdcdff043bd4c2ac1d898f4354020cbcfefd408449
root@docker1:~#
```
请注意，当我启动第二个容器时，我使用了一个名为`--link`的新标志，并引用了容器`web1`。我们现在会说`web2`和`web1`有联系。然而，它们并没有真正以任何方式联系在一起。一个更好的描述可能是说`web2`现在意识到`web1`。让我们连接到容器`web2`向您展示我的意思:
```
root@docker1:~# docker exec -it web2 /bin/bash
root@00066ea46367:/# ping web1 -c 2
PING web1 (172.17.0.2): 48 data bytes
56 bytes from 172.17.0.2: icmp_seq=0 ttl=64 time=0.163 ms
56 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.092 ms
--- web1 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.092/0.128/0.163/0.036 ms
root@00066ea46367:/#
```
似乎`web2`容器现在能够通过名称解析容器`web1`。这是因为链接过程将记录插入到`web2`容器的`hosts`文件中:
```
root@00066ea46367:/# more /etc/hosts
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
172.17.0.2      web1 88f9c8629668
172.17.0.3      00066ea46367
root@00066ea46367:/#
```
通过这种配置，`web2`容器可以通过我们在运行时给容器起的名字(`web1`)或者为容器生成的唯一的`hostname`Docker(`88f9c8629668`)到达`web1`容器。
除了正在更新的`hosts`文件，`web2`还生成了一些新的环境变量:
```
root@00066ea46367:/# printenv
WEB1_ENV_APACHE_LOG_DIR=/var/log/apache2
HOSTNAME=00066ea46367
APACHE_RUN_USER=www-data
WEB1_PORT_80_TCP=tcp://172.17.0.2:80
WEB1_PORT_80_TCP_PORT=80
LS_COLORS=
WEB1_PORT=tcp://172.17.0.2:80
WEB1_ENV_APACHE_RUN_GROUP=www-data
APACHE_LOG_DIR=/var/log/apache2
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
PWD=/
WEB1_PORT_80_TCP_PROTO=tcp
APACHE_RUN_GROUP=www-data
SHLVL=1
HOME=/root
WEB1_PORT_80_TCP_ADDR=172.17.0.2
WEB1_ENV_APACHE_RUN_USER=www-data
WEB1_NAME=/web2/web1
_=/usr/bin/printenv
root@00066ea46367:/# 
```
你会注意到许多新的环境变量。Docker 将从被定义为容器一部分的链接容器中复制任何环境变量。这包括:
*   Docker 映像中描述的环境变量。更具体地说，映像文件中的任何`ENV`变量
*   环境变量在运行时通过`--env`或`-e`标志传递给容器
在这种情况下，这三个变量在映像的 Dockerfile 中被定义为`ENV`变量:
```
APACHE_RUN_USER=www-data
APACHE_RUN_GROUP=www-data
APACHE_LOG_DIR=/var/log/apache2
```
因为两个容器映像定义了相同的`ENV`变量，我们将看到本地变量以及来自前缀为`WEB1_ENV_`的容器`web1`的相同环境变量:
```
WEB1_ENV_APACHE_RUN_USER=www-data
WEB1_ENV_APACHE_RUN_GROUP=www-data
WEB1_ENV_APACHE_LOG_DIR=/var/log/apache2
```
此外，Docker 还创建了六个其他环境变量来描述`web1`容器及其任何暴露的端口:
```
WEB1_PORT=tcp://172.17.0.2:80
WEB1_PORT_80_TCP=tcp://172.17.0.2:80
WEB1_PORT_80_TCP_ADDR=172.17.0.2
WEB1_PORT_80_TCP_PORT=80
WEB1_PORT_80_TCP_PROTO=tcp
WEB1_NAME=/web2/web1
```
链接还允许您指定别名。例如，让我们使用稍微不同的链接语法来停止、移除和重生容器`web2`:
```
user@docker1:~$ docker stop web2
web2
user@docker1:~$ docker rm web2
web2
user@docker1:~$ docker run -d -P --name=web2 --link=web1:webserver \
jonlangemak/web_server_2
e102fe52f8a08a02b01329605dcada3005208d9d63acea257b8d99b3ef78e71b
user@docker1:~$
```
请注意，在链接定义之后，我们插入了`a :webserver.`冒号之后的名称代表链接的别名。在这种情况下，我为容器`web1`指定了一个别名`webserver`。
如果我们检查`web2`容器，我们会看到别名现在也列在`hosts`文件中:
```
root@c258c7a0884d:/# more /etc/hosts
…… 
172.17.0.2      webserver 88f9c8629668 web1
172.17.0.3      c258c7a0884d
root@c258c7a0884d:/# 
```
别名还会影响链接过程中创建的环境变量。他们不使用容器名，而是使用别名:
```
user@docker1:~$ docker exec web2 printenv
…… 
WEBSERVER_PORT_80_TCP_ADDR=172.17.0.2
WEBSERVER_PORT_80_TCP_PORT=80
WEBSERVER_PORT_80_TCP_PROTO=tcp
…… 
user@docker1:~$
```
在这一点上，你可能想知道这有多动态。毕竟，Docker 通过更新每个容器中的静态文件来提供这个功能。如果容器的 IP 地址改变了会发生什么？例如，让我们停止容器`web1`并使用相同的映像启动一个名为`web3`的新容器:
```
user@docker1:~$ docker stop web1
web1
user@docker1:~$ docker run -d -P --name=web3 jonlangemak/web_server_1
69fa80be8b113a079e19ca05c8be9e18eec97b7bbb871b700da4482770482715
user@docker1:~$
```
如果你回想一下之前，容器`web1`分配了一个`172.17.0.2`的 IP 地址。由于我停止了容器，Docker 将释放该 IP 地址预留，使其可重新分配给我们启动的下一个容器。让我们检查分配给容器`web3`的 IP 地址:
```
user@docker1:~$ docker exec web3 ip addr show dev eth0
79: eth0@if80:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.2/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:2/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
不出所料，`web3`取得了`172.17.0.2`现在开放的 IP 地址，该地址以前属于`web1`容器。我们还可以验证容器`web2`仍然认为该 IP 地址属于`web1`容器:
```
user@docker1:~$ docker exec –t web2 more /etc/hosts | grep 172.17.0.2
172.17.0.2      webserver 88f9c8629668 web1
user@docker1:~$
```
如果我们再次启动容器`web1`，我们应该看到它将获得一个分配给它的新的 IP 地址:
```
user@docker1:~$ docker start web1
web1
user@docker1:~$ docker exec web1 ip addr show dev eth0
81: eth0@if82:  mtu 1500 qdisc noqueue state UP
    link/ether 02:42:ac:11:00:04 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.4/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:4/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$
```
如果我们再次检查容器`web2`，我们应该会看到 Docker 已经更新了它来引用`web1`容器的新 IP 地址:
```
user@docker1:~$ docker exec web2 more /etc/hosts | grep web1
172.17.0.4      webserver 88f9c8629668 web1
user@docker1:~$
```
然而，虽然 Docker 负责用新的 IP 地址更新`hosts`文件，但它不会负责更新任何环境变量以反映新的 IP 地址: