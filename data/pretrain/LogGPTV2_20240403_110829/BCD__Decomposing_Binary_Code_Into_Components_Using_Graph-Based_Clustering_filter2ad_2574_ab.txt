The algorithm has a time complexity of O((m +n)n), where m is the
number of edges and n the number of vertices in the graph. It opti-
mizes a modularity function, where modularity Q is defined as the
difference between the fraction of edges that fall within the given
cluster and the expected fraction of edges if they were distributed
at random. Modularity is widely used as a goodness measure for
j eij), where
eij is the fraction of edges in the network that connect nodes in
cluster Ci to those in cluster Cj (i.e., component boundaries).
The algorithm follows a bottom-up hierarchical clustering ap-
proach. It begins by considering each node as a separate community.
It then merges the nodes connected with edges having optimal
weights and detects the number of communities by optimizing
the global modularity. Since our decomposition graph captures
the function interactions as edge weights, we expect that related
functions would be grouped inside the same component.
graph clustering, and is computed as Q =
i(eii −
3 EVALUATION
In this section, we first present our experimental setup in Section 3.1
and then the evaluation results of BCD in Section 3.2.
3
Session 9: Software SecurityASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea395Source Code
Binary Code
Program
DynamicDPI.exe
genericucp.exe
Project
Dynamic DPI
UPnP Control Point
WinRT Debug Tool
Ambient Light
BC6HBC7 Encoder
CameraCapture UI
VS 3D Starter Kit
ID
P1
P2
P3 WRTPackageDebug.exe
AmbientLightAware.exe
P4
BC6HBC7EncoderCS.exe
P5
CameraCapture.exe
P6
P7
StarterKit.exe
AsyncDynamicObserver.exe Multithreaded Login
P8
Multithreaded Login
P9
DynamicObserver.exe
P10 DistributorMQ.exe
Multithreaded Login
P11 DynamicShaderLinkage.exe Dynamic Shader
7z.exe
P12
7zG.exe
P13
7zFM.exe
P14
nping.exe
P15
nmap.exe
P16
cppcheck.exe
P17
lzip
P18
tinyXMLTest
P19
P20
gperf
P21 Astyle
P22
P23
P24
P25
7zip
7zip
7zip
Nmap
Nmap
Static analysis tool
LZMA compressor
Tiny XML
Gperf
Astyle
Re2c
Lshw
SMART disk analyzer
Pdf to html converter
Files Type
PE
17
6
PE
PE
7
PE
5
PE
5
PE
11
10
PE
PE
11
PE
8
PE
11
PE
16
69
PE
PE
89
PE
140
PE
18
PE
48
81
PE
ELF
5
ELF
5
ELF
11
ELF
6
22
ELF
ELF
13
ELF
25
87
ELF
Table 1: Programs used in BCD evaluation.
Header C++
Files
19
8
11
6
5
21
18
14
11
14
20
41
56
73
21
50
81
5
2
14
3
23
12
30
87
KLOC
4.6
4.7
1.5
1.6
1.8
3.6
7.0
2.5
1.5
2.5
44.2
27.2
28.8
37.9
23.4
58.3
171.2
3.9
7.1
8.3
18.3
18.8
24.2
53.4
91.4
re2c
lshw
smartctl
pdftohtml
Object
Files
17
6
7
5
5
10
7
11
8
11
14
69
89
140
18
48
78
5
5
11
4
20
13
16
85
Classes Methods
16
7
7
4
16
8
11
10
6
10
14
112
149
182
15
13
78
11
14
19
17
30
7
36
125
171
68
38
31
148
144
133
38
25
43
198
837
890
979
228
572
668
23
138
81
152
133
125
139
1048
Funcs
2,604
634
488
910
905
3,226
2,526
1,082
739
1,093
4,114
2,179
2,530
3,149
2,340
6,265
2,248
33
2,744
58
2,740
285
1,429
457
499
3.1 Experiment Setup
We evaluate BCD using 25 programs. The dataset includes popular
projects (e.g., Nmap, 7zip) collected from the Microsoft sample code
repository [21], SourceForge [28], and the GNU software reposi-
tory [12]. The dataset has executables from 4 projects having a size
greater than 50 KLOC. These projects include multiple executables
that often share code between themselves. In addition, 10 of the
programs are benchmarks used for evaluating the Lego System [30],
which recovers class hierarchies and composition-relationship us-
ing static and dynamic analysis techniques.
For all 25 programs, the source code is publicly available. Each
program’s source code is compiled with debugging information for
extracting the ground truth needed to evaluate BCD. The ground
truth is a mapping of methods in each class obtained from the de-
bugging symbols, with corresponding class information. Since the
source code may not be well structured or may not strictly follow
modular programming principles, we extract the set of functions
in each class and manually verify whether they form a component.
Note that we only use the source code and debugging symbols to
generate the necessary ground truth. BCD operates on the exe-
cutables without access to source code or debugging symbols. For
evaluating the effect of compiler optimization, we include PE (P1-