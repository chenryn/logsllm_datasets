otherwise, ξi returns to “Fall-Back” when the lease expires.
The above conceptual design of Participant ξi (i = 1 ∼
N − 1) is speciﬁed by a hybrid automaton Aptcpnt (see Fig. 5
(b) for the sketch of Aptcpnt) as follows.
1. Aptcpnt’s location set Vptcpnt include the following lo-
cations: “Fall-Back”, “L0”, “Entering”, “Risky Core”,
“Exiting 1”, and “Exiting 2”. V risky
ptcpnt include location
“Risky Core” and “Exiting 1”; all other locations
belong to V safe
ptcpnt.
2.
Initially, Participant ξi dwells in location “Fall-Back”;
and all data state variables initial values are zero.
3. When in location “Fall-Back”, upon receiving event
evtξ0T oξiLeaseReq, ξi transits to a temporary loca-
tion “L0”.
4. When in “L0”, if an application dependent proposi-
tion P articipationCondition sustains, ξi sends event
evtξiT oξ0LeaseApprove and transits to “Entering”;
otherwise, ξi sends event evtξiT oξ0LeaseDeny and
transits back to “Fall-Back”.
5. When
in
location
“Entering”,
event
evtξ0T oξiCancel or evtξ0T oξN Abort is received,
ξi
if ξi dwells
continuously in “Entering” for T max
enter,i, it transits to
“Risky Core”.
transits to “Exiting 2”. Otherwise,
if
6. When
in
location
“Risky Core”,
event
evtξ0T oξiCancel or evtξ0T oξN Abort is received,
ξi
if ξi dwells
continuously in “Risky Core” for T max
run,i,
it also
transits to “Exiting 1”.
transits to “Exiting 1”. Otherwise,
if
7. When in location “Exiting 1” or “Exiting 2”, Partic-
ipant ξi must continuously dwell in the location for
Texit,i, and then transit to “Fall-Back”.
(a)
(b)
(c)
Fig. 4. Flow block diagram at location (a) “Lease ξi” (i = 1 ∼ N − 1); (b)
“Lease ξN ”; (c) “Cancel Lease ξi” (i = 1 ∼ N ).
6. When in location “Risky Core”, the Initializer ξN can
send event evtξN T oξ0Cancel and transit to “Exiting
1”. Secondly, if evtξ0T oξN Abort is received, ξN also
transits to “Exiting 1”. Thirdly, if ξN dwells contin-
uously in “Risky Core” for T max
run,N , it also transits to
“Exiting 1”.
7. When in location “Exiting 1” or “Exiting 2”,
the
Initializer ξN must continuously dwell in the location
for Texit,N , and then transit to “Fall-Back”.
Note that all state variable names and location names are
B. Ensuring Design Pattern Validity
We now analyze the validity of the proposed design pattern.
As mentioned before, the main threat to PTE wireless CPS
is the unreliable wireless communications. Event reception
between the Supervisor, Initializer, and Participants can be
lossy. If some important events are not received, the holistic
system can enter an inconsistent state, which jeopardizes PTE
safety rules.
A main contribution of this paper is that we prove that by
properly conﬁguring the time constants of the aforementioned
Asupvsr, Ainitzr, and Aptcpnt, PTE safety rules are guaranteed
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(b)
(a) Sketch of Hybrid Automaton Ainitzr, the Design Pattern for
Fig. 5.
Initializer; (b) Sketch of Hybrid Automaton Aptcpnt,i, the Design Pattern for
the ith Participant.
despite any communication faults. Speciﬁcally, we have the
following result.
Theorem 1 (Design Pattern Validity): If a hybrid system
H of ξ0 as “Supervisor” (i.e. behaves per Asupvsr), ξN
(N ≥ 2) as “Initializer” (i.e. behaves per Ainitzr), and ξi
(i = 1, 2, . . . , N − 1) as “Participants” (i.e. behaves per
Aptcpnt,i) satisﬁes conditions c1 ∼ c7:
c1.
c2.
c3.
c4.
c5.
All conﬁguration time constants (T max
T max
req,N , T max
positive.
fb,0, T max
LS1 ,
run,i, Texit,i, where i = 1 ∼ N ) are
enter,i, T max
wait, T min
T max
LS1
def
= T max
(N − 1)T max
run,1 + Texit,1 > N T max
wait.
enter,1 + T max
wait  T max
enter,i+1 + T max
run,i+1
wait + T max
+Texit,i+1.
c7.
∀i ∈ {1, 2, . . . , N − 1}, there is Texit,i > T min
safe:i+1→i.
wait +T max
Then H satisﬁes PTE safety rules. Speciﬁcally, every entity’s
continuous dwelling time in risky-locations is upper bounded
by T max
LS1 , and the PTE full ordering of ξ1 < ξ2 < . . . <
ξN is maintained; also, events received through unreliable
communication channels (in the case of our wireless CPS,
these events refer to those between distributed wireless entities)
can be arbitrarily lost.
Proof: The sketch of the proof is as follows.
First we can prove if the given parameters satisfy Con-
ditions c1 ∼ c7, and that all entities start from “Fall-Back”
location, the system will reset itself to “Fall-Back” within
T max
wait + T max
LS1 every time evtξ0T oξ1LeaseReq happens. This
is mainly because of the leases: even if messages are lost,
leases will expire to guarantee the return to “Fall-Back” of the
Initializer and every Participant.
prove
Second, we
consecutive
evtξ0T oξ1LeaseReq events (or
the last such event and
time ∞), any entity can only dwell in the risky-locations for
once.
between
two
any
Third, due to Conditions c1 ∼ c7, for each ξi and ξi+1
(i = 1 ∼ N − 1), the aforementioned single dwelling intervals
of ξi and ξi+1 satisﬁes PTE enter-risky/exit-risky safeguard
interval requirements.
The detailed proof appears at [19].
(cid:4)
C. Methodology to Transform Design Pattern into Speciﬁc
Designs
In this subsection, we propose a methodology to transform
the aforementioned design pattern hybrid automata Asupvsr,
Ainitzr, and Aptcpnt into speciﬁc PTE wireless CPS designs.
The intuition is that every location v of Asupvsr, Ainitzr,
and Aptcpnt can be expanded by a child hybrid automata A′.
However, A′ must be sufﬁciently independent (i.e. orthogonal)
from the rest part of Asupvsr, Ainitzr, and Aptcpnt, so that it
will not interfere the design pattern’s guarantee on PTE safety
rules.
For example, except clock/time variables, the design pat-
tern automata Asupvsr, Ainitzr, and Aptcpnt contains no other
continuous state variables. However, in a speciﬁc PTE wireless
CPS design, there will be various continuous state variables
representing all kinds of physical world properties. For ex-
ample, in laser tracheotomy PTE wireless CPS, there can be
Hvent(t), the height of the ventilator cylinder at time t, which
decides the behavior of the ventilator. Their dynamics are not
totally decided by the cyber-software. When elaborating design
pattern into speciﬁc designs, we must guarantee these details
will not affect the PTE safety rule guarantees.
In the following, we ﬁrst propose the formal concept of
independence between hybrid automata. We then propose a
formal methodology on elaborating locations of design pat-
tern hybrid automata with independent child hybrid automata.
Finally, we prove following the proposed elaboration method,
the resulted speciﬁc designs maintains the PTE safety rules
guarantees.
Unless explicitly denoted, the rest of the paper assumes
every hybrid automaton to be time-block-free and non-zeno3.
We now deﬁne hybrid automata independence.
Deﬁnition 2 (Hybrid Automata Independence): Given hy-
brid automata A = (~x(t), V , inv, F , E, g, R, L, syn, Φ0) and
3Please see [20] for the deﬁnitions of time-block-free and non-zeno. For the
aforementioned design pattern hybrid automata in Fig. 3, 5 (a), 5 (b), as long
as Condition c1 ∼ c7 hold, they are time-block-free and non-zeno. Besides,
time-block-free and non-zeno are well-known concepts in formal modeling,
and most practical hybrid automata are time-block-free and non-zeno. Due
to above reasons, we are not going to elaborate the deﬁnitions of these two
concepts in this paper.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:54:13 UTC from IEEE Xplore.  Restrictions apply. 
A′ = (~x′(t), V ′, inv′, F ′, E ′, g′, R′, L′, syn′, Φ′
and A′ are independent” iff
0), we say “A
1.
2.
3.
elements(~x(t)) ∩ elements(~x′(t)) = ∅;
and V ∩ V ′ = ∅;
and L ∩ L′ = ∅.
Furthermore, we say “a set of hybrid automata A1, A2, . . .,
Ak are mutually independent”, iff ∀i, j ∈ {1, 2, . . ., k} and
i 6= j, Ai and Aj are independent.
We further deﬁne simple hybrid automaton.
Deﬁnition 3 (Simple Hybrid Automaton): A hybrid au-
tomaton A = (~x(t), V , inv, F , E, g, R, L, syn, Φ0) is simple
iff
1.
2.
3.
∀v1, v2 ∈ V , inv(v1) = inv(v2).
∀v ∈ Φ0|V · ∀~s ∈ inv(v) · (v, ~s) ∈ Φ0, where Φ0|V
means Φ0’s projection on V .
∀v ∈ Φ0|V ·(v, 0) ∈ Φ0, where 0 is the zero data state
vector.
Fig. 6 illustrates an example of atomic elaboration of hybrid
automaton. Denote the hybrid automaton of Fig. 2 to be A′
vent.
We use A′
vent to elaborate hybrid automaton A of Fig. 6 (a)
at location “Fall-Back”. The resulted elaboration is the hybrid
automaton A′′ of Fig. 6 (b).
(a)
(b)
Fig. 6.
Atomic Elaboration Example (compare the shaded areas in (a)
and (b)). (a) Hybrid Automaton A, which has one data state variable x; the
shaded location is to be elaborated. (b) Hybrid Automaton A′′, which is the
atomic elaboration of A (see (a)) at location “Fall-Back” with simple hybrid
automaton A′
vent (see Fig. 2); note there is no edge from “Risky” to “PumpIn”
because “PumpIn” is not an initial location of A′
vent.
We can now describe the intuition on the how to elaborate
With the above (atomic) elaboration methodology, we can
a given hybrid automaton.
go further.
Atomic Elaboration of Hybrid Automaton (Intuition):
Given a hybrid automaton A = (~x(t), V , inv, F , E, g, R,
L, syn, Φ0), location v ∈ V , and a simple hybrid automaton
A′ = (~x′(t), V ′, inv′, F ′, E ′, g′, R′, L′, syn′, Φ′
0) such that
A and A′ are independent, then we can create the “(atomic)
elaboration of A at v with A′”, i.e. a hybrid automaton A′′ =
(~x′′(t), V ′′, inv′′, F ′′, E ′′, g′′, R′′, L′′, syn′′, Φ′′
0 ), according
to the following intuitions.
1.
2.
3.
Location v of hybrid automaton A is replaced by
simple hybrid automaton A′.
All former ingress edges to v in A become ingress
edges to A′ (A′’s initial locations to be more speciﬁc).
All former egress edges from v in A become egress
edges from A′.
4. When in A′, the data state variables ~x(t) of A maintain
their continuous behavior as if they are in v.
5. When out of A′, the data state variables ~x′(t) of A′
remain unchanged (until return to A′ again in the
future).
We denote A′′, the elaboration of A at v with A′, as
A′′ = E(A, v, A′).
The rigorous formal description on atomic elaboration of