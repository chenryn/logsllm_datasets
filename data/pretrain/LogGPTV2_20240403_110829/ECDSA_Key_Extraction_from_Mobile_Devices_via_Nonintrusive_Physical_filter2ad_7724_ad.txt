### 3.3 Attacking Other ECDSA Implementations

#### Attacking OpenSSL on Android Devices
Key-dependent leakage, similar to that observed in Figure 2, was also detected on various Android phones (see Figure 3). This suggests that similar attacks can be mounted on these devices. To demonstrate the feasibility of such an attack on an Android device, we extracted a sequence of elliptic curve double and add operations from a Sony-Ericsson Xperia X10 smartphone (Figure 7). The signal in the figure is the result of digital FM demodulation and filtering.

#### Attacking CoreBitcoin
To show the possibility of Bitcoin theft via side-channel attacks on iOS devices, we successfully extracted a key from CoreBitcoin’s low s-value ECDSA implementation running on iOS. We recorded the leakage of 5000 ECDSA secp256k1 signatures executed on an Apple iPhone 3GS. Out of these, 1940 traces were discarded due to measurement noise. From the remaining 3060 traces, 110 were identified as having their DA sequence terminate in at least four elliptic curve double operations, with one false positive. We randomly selected 85 out of the 110 available traces and applied the lattice attack described in Section 2.3. Repeating the attack 20 times (each time choosing a random subset of 85 traces) resulted in successful key extraction in 4 out of the 20 attempts. Similar to Section 3.2, all 20 repetitions of the lattice reduction step were performed offline on the same database of analog traces. Thus, even a single successful lattice reduction leads to a successful key-recovery attack.

#### Attacking Apple’s CommonCrypto ECDSA Implementation
Apple’s CommonCrypto library performs elliptic curve scalar-by-point multiplication using Algorithm 1 with \( w = 1 \). Figure 8 shows scalar-dependent leakage, similar to Figure 2, obtained by measuring an iPhone 3GS when invoking the elliptic curve multiplication operation implemented in Apple’s CommonCrypto library.

### 4. Cheap Attacks

While the results in Section 3 demonstrate the possibility of key extraction via the electromagnetic channel using expensive lab equipment, the low bandwidth nature of our attacks allows for key extraction using a much cheaper experimental setup via both the electromagnetic and power channels.

#### EM Probe
For the electromagnetic channel, we improvised a probe by scavenging a coil from a Qi wireless charging receiver module ($2 on eBay). See Figure 1.

#### Power Probe
To monitor the phone’s current draw, we built a simple USB pass-through adapter with a 0.33Ω resistance in series with the ground line. We connected the phone to a portable USB battery pack through the pass-through adapter and measured the voltage over the resistor; see Figure 9.

#### Digitizer
We connected the improvised EM and power probes to the microphone input of a Creative Tracker Pre sound card ($50, eBay). This card acts as both an amplifier (60dB gain) and a digitizer (192 Ksample/sec).

#### Attack Scenario
Small loops of wire acting as EM probes can be easily concealed inside various objects (such as tabletops, phone cases, or even food items [GPPT15]). See Figure 1. Monitoring the phone’s power consumption can be done by augmenting an aftermarket charger, external battery, or battery case with the requisite equipment. In this context, phone cases with an additional battery are especially dangerous, as they can be augmented to monitor both channels simultaneously, potentially obtaining a cleaner signal. We leave this for future work.

#### Scalar-Dependent Leakage
We measured the EM leakage of an iPhone 4 using our improvised EM probe connected to the Tracker Pre sound card and concealed beneath a glass tabletop (see Figure 10). Similar to Figure 3, Figure 10 (right) presents a spectrogram of five distinct signature operations using the same point \( P \) and five different values of the scalar \( k \). Even though the equipment used to generate Figure 10 is much simpler (and cheaper) than the lab-grade equipment used in Figure 3, the five different scalars can be easily distinguished from their spectral signature. Similar results were obtained using the power probe (see Figure 10 (left)).

#### Extracting the DA-Sequence
After observing the scalar-dependent leakage using our improvised probes and the Tracker Pre sound card, we proceeded to extract the DA-sequence required for our attack. Applying our signal processing techniques on an iPhone 3GS running OpenSSL secp256k1 signature operations, Figure 11 depicts the results of extracting the DA-sequence using EM leakage from a single signature. Notice that the individual double and add operations can clearly be seen. Repeating this process for about 5000 signatures should result in complete key recovery.

### 5. Conclusions

In this paper, we have demonstrated that despite its speed and randomization, ECDSA signatures on mobile devices are vulnerable to physical key extraction attacks. Moreover, these attacks can be mounted cheaply and non-intrusively. Our attack exploits the differences between point addition and point doubling to recover the DA-sequence. Two approaches can be used to protect an implementation from side-channels: decoupling the value of the nonce from the DA-sequence using blinding or modifying the implementation to always use the same DA-sequence, irrespective of the nonce value.

### Nonce Splitting
Clavier and Joye [CJ01] suggest expressing the nonce \( k \) as \( k = k_1 + k_2 \), where \( k_1 \) is random, and then computing \( [k_1]G + [k_2]G \) using a multi-exponentiation algorithm [Möl01a]. However, this approach leaks the least significant bits of \( k_1 \) and \( k_2 \), as well as long, overlapping sequences of repeating bits in \( k_1 \) and \( k_2 \). Splitting the nonce further, i.e., expressing \( k = k_1 + k_2 + k_3 + \cdots \), such that all terms but one are chosen at random, can reduce the probability of overlaps. However, this approach still leaks the least significant bit of \( k \), and as [AFG+14] show, leaks of one bit can be exploitable.

### Nonce Blinding
Coron [Cor99] suggests blinding the nonce by choosing a random \( c \) and calculating \( [k]G + [cn]G \) where \( n \) is the group order. Ciet and Joye [CJ03] note that for groups of order close to a power of two, this method still leaks information about the high-order bits of \( k \), and Van de Pol et al. [Van de PolSY15] show how to exploit such leaks. Combining the two approaches, i.e., calculating \( \sum [k_i]G \) for random \( k_i \)'s and \( c \) such that \( \sum k_i = k + cn \), protects from both types of leaks.

### Constant-time Implementations
Constant-time implementations mitigate many side-channel leaks by ensuring a fixed execution path that does not depend on secret data, to prevent timing attacks [BB05]. Additionally, a constant memory access pattern is desired to avoid cache-based attacks [Ber05, Per05, OST06], as well as cache-induced differences in timing and electromagnetic behavior. For EC scalar-by-point multiplication, the scalar can be represented in a regular way such that the DA-sequence does not depend on the nonce [JT09, Möl01b]; Moller [Möl01b] notes that these encodings may leak information when a point is added to itself, yet with a random scalar, as is the case in ECDSA, the probability of this leak is negligible. A constant-time implementation for some elliptic curves, on some 64-bit platforms, is included in OpenSSL [Käs12]. For Bitcoin’s secp256k1 curve, the libsecp256k1 [Wui] implementation offers a constant-time, constant-memory-access implementation of ECDSA signing.

### Future Work
While this work clearly demonstrates the vulnerability of multiple implementations of ECDSA signatures running on mobile devices to cheap, low-bandwidth key extraction attacks, much work remains to be done. Improving the signal quality, thereby increasing the attack range and reducing the number of required signatures, is an intriguing open problem. To that end, we note that the more advanced lattice techniques of [Van de PolSY15, ABF+15] are of potential use in reducing the number of signatures. However, our signal is too corrupted (due to interrupts) making these techniques inapplicable without significant improvements in signal processing techniques.

### Acknowledgments
Daniel Genkin, Lev Pachmanov, Itamar Pipman, and Eran Tromer are members of the Check Point Institute for Information Security. This work was done in part while Eran Tromer was visiting the Simons Institute for the Theory of Computing, supported by the Simons Foundation and by the DIMACS/Simons Collaboration in Cryptography through NSF grant #CNS-1523467. This work was supported by the Blavatnik Interdisciplinary Cyber Research Center; by a Google Faculty Research Award; by the Israeli Centers of Research Excellence I-CORE program (center 4/11); by the Leona M. & Harry B. Helmsley Charitable Trust; and by NATO’s Public Diplomacy Division in the Framework of "Science for Peace."

### A. Current Status of Targeted Software
This appendix reviews the vulnerability status of the targeted software at the time of writing. See also Table 1.

#### OpenSSL 1.0.x Branch
We conducted most of our experiments on OpenSSL version 1.0.1m, which was the latest version at the time of our research. For ARM processors, all curves over prime fields in the current versions of OpenSSL (1.0.1r and 1.0.2f) use the same underlying elliptic curve implementation and thus appear vulnerable to attacks. While we did not attempt key extraction, scalar-dependent leakage (similar to Figure 2) was empirically observed from these OpenSSL versions. Upon contacting OpenSSL, we were notified that "hardware side-channel attacks are not in OpenSSL’s threat model," so no updates are planned to OpenSSL 1.0.x to mitigate our attacks. Note that OpenSSL 1.0.2 will be supported until the year 2020.

#### OpenSSL 1.1.x Branch
OpenSSL 1.1.0 pre-release 3 includes an ARM-specific constant-time implementation of the NIST P-256 curve, which is unlikely to be vulnerable to similar attacks. All other curves over prime fields, including the secp256k1 curve, still use the vulnerable wNAF implementation.

#### iOS 7.1.2–8.3 CommonCrypto
The ECDSA implementation in the CommonCrypto framework of iOS 7.1.2 appears vulnerable, as it exhibits scalar-dependent leakage (see Section 3.3). Reverse-engineering the code in iOS 8.3 reveals that it uses the same vulnerable implementation (wNAF with \( w = 1 \)).

#### iOS 9.x CommonCrypto
Starting with iOS 9, CommonCrypto uses a new EC implementation, including side-channel mitigation techniques such as operand-independent control flow and Montgomery-ladder multiplication. Our current attacks are not applicable to this new EC implementation, and we have no evidence that it is vulnerable.

#### CoreBitcoin
CoreBitcoin [Cor] (not to be confused with Bitcoin core, below) is currently vulnerable, as discussed in Section 3.3. The CoreBitcoin developers expressed their intention to switch to the libsecp256k1 library [Wui] in the future. This library offers a constant-time, constant-memory-access implementation of ECDSA signing, and we have no evidence that it is vulnerable.

#### Bitcoin Core
The Bitcoin core code [Bita] (not to be confused with the CoreBitcoin, above) has already transitioned to the libsecp256k1 library [Wui] for ECDSA signing, starting from version v0.10.0 (released in February 2015). This library offers a constant-time, constant-memory-access implementation of ECDSA signing, and we have no evidence that it is vulnerable.

### References
[AAF+11] D. Aboulkassimi, M. Agoyan, L. Freund, J. Fournier, B. Robisson, and A. Tria. Electromagnetic analysis (EMA) of software AES on Java mobile phones. In Workshop on Information Forensics and Security (WIFS) 2011, pages 1–6. IEEE Computer Society, 2011.

[AARR02] Dakshi Agrawal, Bruce Archambeault, Josyula R. Rao, and Pankaj Rohatgi. The EM side-channel(s). In Workshop on Cryptographic Hardware and Embedded Systems (CHES) 2002, pages 29–45. Springer, 2002.

[ABC+] M. Albrecht, S. Bai, D. Cadé, X. Pujol, and D. Stehlé. fplll-4.0, a floating-point LLL implementation. URL: http://perso.ens-lyon.fr/damien.stehle.

[ABF+15] Thomas Allan, Billy Bob Brumley, Katrina E. Falkner, Joop van de Pol, and Yuval Yarom. Amplifying side channels through performance degradation. Cryptology ePrint Archive, Report 2015/1141, 2015. http://ia.cr/2015/1141.

[ADMM15] Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, and Lukasz Mazurek. On the malleability of Bitcoin transactions. In Financial Cryptography and Data Security - FC 2015, pages 1–18, 2015.

[AFG+14] Diego F. Aranha, Pierre-Alain Fouque, Benoît Gérard, Jean-Gabriel Kammerer, Mehdi Tibouchi, and Jean-Christophe Zapalowicz. GLV/GLS decomposition, power analysis, and attacks on ECDSA signatures with single-bit nonce bias. In ASIACRYPT 2014, Part I, pages 262–281. Springer, 2014.

[And08] Ross J. Anderson. Security Engineering — A Guide to Building Dependable Distributed Systems. Wiley, 2008.