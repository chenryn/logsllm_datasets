of Netgear (Table 4). For the kernel in version 3.18.20 and 3.18.23,
it takes 534 lines of C code while 180 lines of new code are added.
For kernels in all the left 17 versions, they share the same driver
code. 60 lines of new code are added compared with the one used in
3.18.20. Note that the driver code for the transplanted peripherals
does not need to be developed. Instead, we reuse the existing code.
For example, the driver code for VIC (PL190) is open source [15].
Thus, we just reuse the existing driver code, merge the driver code
into one file, and finally compile it to generate the ECMO driver. In
total, it takes less than one person-hour to build a new customized
driver.
Functionalities of peripherals We successfully boot the Linux
kernel by transplanting designated peripherals (e.g., IC, Timer, and
UART). We admit that the original peripherals may not work prop-
erty as they are not emulated (or transplanted) in QEMU. However,
the functionalities of the transplanted peripherals are guaranteed.
With the transplanted peripherals, ECMO can provide the capability
to introspect the runtime states of the Linux kernel that dynamic
analysis applications can be built upon. Without our system, it’s
impossible to build such applications since the target Linux kernel
cannot be booted in QEMU. The three applications used in the
evaluation have demonstrated the usage scenarios of our system.
We may build or port more complicated applications, e.g., dynamic
taint analysis [60], to further evaluate our system.
Other peripherals Currently, ECMO is evaluated based on trans-
planting three early-boot peripherals (i.e., IC, timer, and UART) as
they are required to boot a Linux kernel. In general, peripheral
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea745transplantation works on all kinds of peripherals. The transplant-
ing process depends on the identification of ECMO pointers. Fortu-
nately, to support the other peripherals, users can install the kernel
modules directly on the rehosted Linux kernel, which does not
need to identify pointers. In this case, all kinds of peripherals can
be supported. Our experiments show that the driver of Ethernet
device, which is rather complex, can be successfully installed and
the network functionality can be guaranteed.
Other architectures Currently, ECMO only supports ARM ar-
chitecture, which is the most popular one in embedded systems [17].
However, the technique peripheral transplantation can be easily
extended to the other architecture as it does not rely on any particu-
lar architecture feature. Specifically, developers need to implement
the module for identifying ECMO Pointers for the new architec-
ture. This requires additional engineering efforts and algorithm 1
is provided.
7 RELATED WORK
Static Firmware Analysis Researchers apply the static analysis
technique to analyze the embedded firmware. For instance, Costin
et al. [30] conduct a large-scale analysis towards the embedded
firmware. By analyzing 32 thousand firmware images, many new
vulnerabilities are discovered, influencing 123 products.
Code similarity is widely used to study the security issue of em-
bedded devices. Feng et al. propose Genius [38], which can identify
many vulnerabilities in a short time. Considering the inaccuracy of
approximate graph-matching algorithm, Xu et al. utilize a neural
network-based approach and build a prototype named Gemini [65].
The result shows Gemini can identify more vulnerable firmware
images compared with Genius. Yaniv et al. introduce Firmup [32],
which has a relatively low false positive ratio and can discover
vulnerabilities efficiently, by considering the relationship between
procedures. In the case that firmware images are not available, Xue-
qiang et al. [63] applies cross analysis of mobile apps to detect the
vulnerable devices. Finally, 324 devices from 73 different vendors
are discovered. Our system is used to analyze the firmware images
of embedded systems with dynamic analysis. Application building
upon ECMO can complement the static analysis ones.
Dynamic Firmware Analysis Besides static analysis, researchers
propose several methods to support the dynamic firmware analysis.
Avatar [69] is proposed to support complex dynamic analysis of em-
bedded devices by orchestrating the execution of an emulator and
real hardware. Charm [62] applies a similar strategy. It introduces
the technique named remote device driver execution by forwarding
the MMIO operation to a real mobile. Avatar2 [54] extends Avatar
to support replay without real devices. However, they both suffer
from the problem of scalability. Inception [29] applies symbolic ex-
ecution based on KLEE [25] and a custom JTAG to improve testing
embedded software. However, it assumes that the source code is
available. IoTFuzzer [27] aims to fuzz the firmware from the mobile
side. However, the code coverage of firmware and the coverage of
attack surface are limited. Pretender [43] is able to conduct automat-
ically rehosting tasks. However, it replies on the debug interface of
specific devices. Jetset [49] utilizes the symbolic execution to infer
the return values of device registers. However, the functionality of
the peripherals cannot be guaranteed. Furthermore, the shell may
not be obtained for further development of different applications.
Besides, many researchers utilize the fuzzing technique to detect
the security issues of embedded firmware. P2IM [37] is proposed
to learn the model of peripherals automatically. DICE [52] focused
on the DMA controller and can extend the P2IM’s analysis cover-
age. Halucinator [28] proposed a new methodology to rehost the
firmware by abstracting the HAL functions. ECMO is different from
them in the aspects to transplant peripherals into the target kernel,
instead of inferring the peripherals models. Besides, all these sys-
tems focus on bare-metal system, which is less complicated than
the Linux kernel. Firmadyne [26] and FirmAE [50] target on Linux-
based firmware. However, they focus on the user-space program,
instead of the Linux kernel.
Applications based on QEMU There are many applications
based on QEMU. For example, researchers have developed new
fuzzing systems [21, 51, 70] based on QEMU. KVM leverages the
device emulation provided by QEMU or the virtio [58] framework
for device virtualization. The idea of virtio is similar to ECMO.
However, virtio requires to change the source code of guest while
ECMO works towards the Linux kernel binary. Virtual machine
introspection tools [24, 33, 34, 39, 40, 64], which are helpful for de-
bugging or forensic analysis, utilize QEMU to introspect the system
states. Furthermore, dynamic analysis frameworks use QEMU to
analyze malware behavior [36, 53, 57, 66–68]. ECMO provides the
capability to rehost Linux kernels, which lays the foundation for
applying these applications on embedded Linux kernels.
8 CONCLUSION
In this work, we propose a novel technique named peripheral trans-
plantation to rehost the Linux kernel of embedded devices in QEMU.
This lays the foundation for applications that rely on the capability
of runtime state introspection. We have implemented this tech-
nique inside a prototype system called ECMO and applied it to 815
firmware images, which consist of 20 kernel versions and 37 device
models. ECMO can successfully transplant peripherals for Linux
kernels in all images. Among them, 710 kernels can be successfully
rehosted, i.e., launching the user-space shell (87.1% success rate).
Furthermore, we successfully install one Ethernet device driver
(i.e., smc91x) on all the rehosted Linux kernels to demonstrate the
capability of ECMO to support more peripherals. We further build
three applications to show the usage scenarios of ECMO.
ACKNOWLEDGEMENT
We would like to thank the anonymous reviewers for their com-
ments that greatly helped improve the presentation of this paper.
We also want to thank Andrew Baumann for shepherding our pa-
per. This work was partially supported by the National Natural
Science Foundation of China (Grant No.61872438), the Fundamen-
tal Research Funds for the Central Universities (Zhejiang University
NGICS Platform ZJUNGICS2021016, K20200019), Leading Innova-
tive and Entrepreneur Team Introduction Program of Zhejiang (No.
2018R01005), HK RGC Project (No. PolyU 152239/18E). Any opin-
ions, findings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily reflect
the views of funding agencies.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea746REFERENCES
[1] angr. https://angr.io/.
[2] ARM Dual-Timer Module (SP804). https://developer.arm.com/documentation/
ddi0271/d/.
[3] Capstone. https://www.capstone-engine.org/.
[4] CVE-2016-9793. https://nvd.nist.gov/vuln/detail/CVE-2016-9793.
[5] CVE-2017-18344. https://nvd.nist.gov/vuln/detail/CVE-2017-18344.
[6] ECMO Online Service. https://blocksecteam.org/ecmo/.
[7] IoT Devices Market. https://www.zionmarketresearch.com/requestbrochure/iot-
devices-market.
[8] Linux Test Project. http://linux-test-project.github.io/.
[9] Linux Test Project test case timer_create03. https://github.com/linux-test-project/
ltp/blob/master/testcases/kernel/syscalls/timer_create/timer_create03.c.
[10] LuaJIT. http://luajit.org/luajit.html.
[11] LuaQEMU. https://github.com/Comsecuris/luaqemu.
[12] Netgear. https://www.netgear.com/.
[13] OpenWRT. https://openwrt.org/.
[14] PrimeCell Vectored Interrupt Controller (PL190). https://developer.arm.com/
documentation/ddi0181/e/introduction/about-the-vic.
[15] PrimeCell Vectored Interrupt Controller (PL190) Source Code. https://elixir.
bootlin.com/linux/v3.18.20/source/drivers/irqchip/irq-vic.c#L445.
[16] QEMU. https://www.qemu.org/.
[17] The Roadshow of ARM. https://group.softbank/system/files/pdf/ir/presentations/
2019/arm-roadshow-slides_q4fy2019_01_en.pdf.
[18] SMC91X Source Code. https://elixir.bootlin.com/linux/v3.18.20/source/drivers/
irqchip/irq-vic.c#L445.
[19] SoC (System on a Chip). https://openwrt.org/docs/techref/hardware/soc.
[20] suterusu. https://github.com/mncoppola/suterusu.
[21] TriforceAFL. https://github.com/nccgroup/TriforceAFL.
[22] Vulnerability Statistics of Linux Kernel. https://www.cvedetails.com/product/47/
Linux-Linux-Kernel.html.
[23] Dennis Andriesse, Asia Slowinska, and Herbert Bos. 2017. Compiler-agnostic
function detection in binaries. In Proceedings of the 2nd IEEE European Symposium
on Security and Privacy.
[24] Sina Bahram, Xuxian Jiang, Zhi Wang, Mike Grace, Jinku Li, Deepa Srinivasan,
Junghwan Rhee, and Dongyan Xu. 2010. Dksm: Subverting virtual machine
introspection for fun and profit. In Proceedings of the 29th IEEE symposium on
reliable distributed systems.
[25] Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE: Unassisted and
Automatic Generation of High-Coverage Tests for Complex Systems Programs.
In Proceedings of the 8th USENIX Conference on Operating Systems Design and
Implementation.
[26] Daming D Chen, Maverick Woo, David Brumley, and Manuel Egele. 2016. To-
wards Automated Dynamic Analysis for Linux-based Embedded Firmware. In
Proceedings of the 23rd Annual Network and Distributed System Security Sympo-
sium.
[27] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin,
XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan
Zhang. 2018. IoTFuzzer: Discovering Memory Corruptions in IoT Through App-
based Fuzzing.. In Proceedings of the 25th Annual Network and Distributed System
Security Symposium.
[28] Abraham A Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen, David
Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer.
2020. HALucinator: Firmware Re-hosting Through Abstraction Layer Emulation.
In Proceedings of the 29th USENIX Security Symposium.
[29] Nassim Corteggiani, Giovanni Camurati, and Aurélien Francillon. 2018. Incep-
tion: System-wide security testing of real-world embedded systems software. In
Proceedings of the 27th USENIX Security Symposium.
[30] Andrei Costin, Jonas Zaddach, Aurélien Francillon, and Davide Balzarotti. 2014.
A Large Scale Analysis of the Security of Embedded Firmwares. In Proceedings of
the 23rd USENIX Security Symposium.
[31] Weidong Cui, Xinyang Ge, Baris Kasikci, Ben Niu, Upamanyu Sharma, Ruoyu
Wang, and Insu Yun. 2018. {REPT}: Reverse Debugging of Failures in Deployed
Software. In Proceedings of the 13th {USENIX} Symposium on Operating Systems
Design and Implementation.
[32] Yaniv David, Nimrod Partush, and Eran Yahav. 2018. FirmUp: Precise Static
Detection of Common Vulnerabilities in Firmware. In Proceedings of the 23rd
International Conference on Architectural Support for Programming Languages and
Operating Systems.
[33] Brendan Dolan-Gavitt, Tim Leek, Michael Zhivich, Jonathon Giffin, and Wenke
Lee. 2011. Virtuoso: Narrowing the semantic gap in virtual machine introspection.
In Proceedings of the 32nd IEEE symposium on security and privacy.
[34] Pavel Dovgalyuk, Natalia Fursova, Ivan Vasiliev, and Vladimir Makarov. 2017.
QEMU-based framework for non-intrusive virtual machine instrumentation and
introspection. In Proceedings of the 11th Joint Meeting on Foundations of Software
Engineering.
[35] Ruian Duan, Ashish Bijlani, Meng Xu, Taesoo Kim, and Wenke Lee. 2017. Iden-
tifying open-source license violation and 1-day security risk at large scale. In
Proceedings of the 2017 ACM SIGSAC Conference on computer and communications
security.
[36] Manuel Egele, Christopher Kruegel, Engin Kirda, Heng Yin, and Dawn Song. 2007.
Dynamic spyware analysis. In Proceedings of the 2007 USENIX Annual Technical
Conference.
[37] Bo Feng, Alejandro Mera, and Long Lu. 2019. P2IM: Scalable and Hardware-
independent Firmware Testing via Automatic Peripheral Interface Modeling. In
Proceedings of the 29th USENIX Security Symposium.
[38] Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa, and Heng
Yin. 2016. Scalable graph-based bug search for firmware images. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communications Security.
[39] Yangchun Fu and Zhiqiang Lin. 2013. Bridging the semantic gap in virtual
machine introspection via online kernel data redirection. ACM Transactions on
Information and System Security (2013).
[40] Tal Garfinkel, Mendel Rosenblum, et al. 2003. A virtual machine introspection
based architecture for intrusion detection.. In Proceedings of the 2003 Annual
Network and Distributed System Security Symposium.
[41] Xinyang Ge, Ben Niu, and Weidong Cui. 2020. Reverse Debugging of Kernel
Failures in Deployed Systems. In Proceedings of the 2020 USENIX Annual Technical
Conference.
[42] Daniel M German and Jesús M González-Barahona. 2009. An empirical study
of the reuse of software licensed under the GNU General Public License. In IFIP
International Conference on Open Source Systems. Springer.
[43] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry,
Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon, Yung Ryn Choe,
Christophe Kruegel, and Giovanni Vigna. 2019. Toward the Analysis of Em-
bedded Firmware through Automated Re-hosting. In Proceedings of the 22nd
International Symposium on Research in Attacks, Intrusions and Defenses.
[44] Lee Harrison, Hayawardh Vijayakumar, Rohan Padhye, Koushik Sen, and Michael
Grace. 2020. PARTEMU: Enabling dynamic analysis of real-world trustzone
software using emulation. In Proceedings of the 29th USENIX Security Symposium.
[45] Grant Hernandez, Farhaan Fowze, Dave Tian, Tuba Yavuz, and Kevin RB Butler.
2017. FirmUSB: Vetting USB device firmware using domain informed symbolic
execution. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security.
[46] Muhui Jiang, Yajin Zhou, Xiapu Luo, Ruoyu Wang, Yang Liu, and Kui Ren. 2020.
An empirical study on ARM disassembly tools. In Proceedings of the 29th ACM
SIGSOFT International Symposium on Software Testing and Analysis.
[47] Xuxian Jiang, Xinyuan Wang, and Dongyan Xu. 2007. Stealthy malware de-
tection through vmm-based" out-of-the-box" semantic view reconstruction. In
Proceedings of the 14th ACM conference on Computer and communications security.
[48] Xuxian Jiang, Xinyuan Wang, and Dongyan Xu. 2010. Stealthy malware de-
tection and monitoring through VMM-based “out-of-the-box” semantic view
reconstruction. ACM Transactions on Information and System Security (2010).
[49] Evan Johnson, Maxwell Bland, YiFei Zhu, Joshua Mason, Stephen Checkoway,
Stefan Savage, and Kirill Levchenko. 2021. Jetset: Targeted Firmware Rehosting
for Embedded Systems. In Proceedings of the 30th {USENIX} Security Symposium.
[50] Mingeun Kim, Dongkwan Kim, Eunsoo Kim, Suryeon Kim, Yeongjin Jang, and
Yongdae Kim. 2020. FirmAE: Towards Large-Scale Emulation of IoT Firmware
for Dynamic Analysis. In Proceedings of the 2020 Annual Computer Security
Applications Conference.
[51] Dominik Maier, Benedikt Radtke, and Bastian Harren. 2019. Unicorefuzz: On
the viability of emulation for kernelspace fuzzing. In Proceedings of the 13rd
{USENIX} Workshop on Offensive Technologies ({WOOT} 19).
[52] Alejandro Mera, Bo Feng, Long Lu, Engin Kirda, and William Robertson. 2021.
DICE: Automatic Emulation of DMA Input Channels for Dynamic Firmware
Analysis. In Proceedings of the 42nd IEEE Symposium on Security and Privacy.
[53] Andreas Moser, Christopher Kruegel, and Engin Kirda. 2007. Exploring multiple
execution paths for malware analysis. In Proceedings of the 28th IEEE Symposium
on Security and Privacy.
[54] Marius Muench, Dario Nisi, Aurelien Francillon, and Davide Balzarotti. 2018.
Avatar2: A Multi-target Orchestration Platform. In Workshop on Binary Analysis
Research.
[55] Nilo Redini, Aravind Machiry, Ruoyu Wang, Chad Spensky, Andrea Continella,
Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2020. KARONTE:
Detecting Insecure Multi-binary Interactions in Embedded Firmware. In Proceed-
ings of the 41st IEEE Symposium on Security & Privacy.
[56] Ryan Riley, Xuxian Jiang, and Dongyan Xu. 2008. Guest-transparent prevention
of kernel rootkits with vmm-based memory shadowing. In Proceedings of the 11st
International Workshop on Recent Advances in Intrusion Detection.
[57] Ryan Riley, Xuxian Jiang, and Dongyan Xu. 2009. Multi-aspect profiling of kernel
rootkit behavior. In Proceedings of the 4th ACM European conference on Computer
systems. 47–60.
[58] Rusty Russell. 2008. virtio: towards a de-facto standard for virtual I/O devices.
ACM SIGOPS Operating Systems Review (2008).
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea747[59] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and
Thorsten Holz. 2017. kafl: Hardware-assisted feedback fuzzing for {OS} kernels.
In Proceedings of the 26th {USENIX} Security Symposium.
[60] Edward J Schwartz, Thanassis Avgerinos, and David Brumley. 2010. All you ever
wanted to know about dynamic taint analysis and forward symbolic execution
(but might have been afraid to ask). In Proceedings of the 31st IEEE symposium on
Security and privacy.
[61] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and
Giovanni Vigna. 2015. Firmalice-automatic detection of authentication bypass
vulnerabilities in binary firmware. In Proceedings of the 22nd Annual Network and
Distributed System Security Symposium.
[62] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang, Zheng
Zhang, Ardalan Amiri Sani, and Zhiyun Qian. 2018. Charm: Facilitating dynamic
analysis of device drivers of mobile systems. In Proceedings of the 27th USENIX
Security Symposium.
[63] Xueqiang Wang, Yuqiong Sun, Susanta Nanda, and XiaoFeng Wang. 2019. Look-
ing from the mirror: evaluating IoT device security through mobile companion
apps. In Proceedings of the 28th USENIX Security Symposium.
[64] Zhi Wang, Xuxian Jiang, Weidong Cui, and Xinyuan Wang. 2008. Countering
persistent kernel rootkits through systematic hook discovery. In Proceedings of
the 11st International Workshop on Recent Advances in Intrusion Detection.
[65] Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. 2017.
Neural network-based graph embedding for cross-platform binary code similarity
detection. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security.
[66] Lok-Kwong Yan, Manjukumar Jayachandra, Mu Zhang, and Heng Yin. 2012. V2e:
combining hardware virtualization and softwareemulation for transparent and
extensible malware analysis. In Proceedings of the 8th ACM SIGPLAN/SIGOPS
conference on Virtual Execution Environments.
[67] Lok Kwong Yan and Heng Yin. 2012. Droidscope: Seamlessly reconstructing
the {OS} and dalvik semantic views for dynamic android malware analysis. In
Proceedings of the 21st {USENIX} Security Symposium.
[68] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda.
2007. Panorama: capturing system-wide information flow for malware detec-
tion and analysis. In Proceedings of the 14th ACM conference on Computer and
communications security.
[69] Jonas Zaddach, Luca Bruno, Aurélien Francillon, and Davide Balzarotti. 2014.
AVATAR: A Framework to Support Dynamic Security Analysis of Embedded
Systems’ Firmwares. In Proceedings of the 21st Annual Network and Distributed
System Security Symposium.
[70] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong Zhu, and
Limin Sun. 2019. FIRMAFL: high-throughput greybox fuzzing of iot firmware
via augmented process emulation. In Proceedings of the 28th USENIX Security
Symposium.
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea748