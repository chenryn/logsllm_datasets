show that, unlike previous work, SNARKBLOCK proofs
scale logarithmically with the number of elements in the
blocklist.
VIII. DISCUSSION
We now discuss real-world performance and possible
extensions.
A. Is SNARKBLOCK practical?
Attestation latency. How long can attestation take in
practice? A client that computes an attestation in the
background while a user drafts their post or comment
adds no latency to the user’s workﬂow. When the expected
time to write a comment is lower than attestation time
(e.g., writing a tweet), then the comment must be queued
and posted by the client software when attestation is
complete. While this is acceptable in many cases, it
renders SNARKBLOCK impractical for real-time chat
when blocklists are large.
Operating Costs. SNARKBLOCK can be used when
1) logging in to a pseudonymous session, or 2) posting
or commenting anonymously. The latter puts more load
on a server. We use it as an estimate for worst-case
performance costs.
English language Wikipedia had 2 edits per second
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
958
213215217219221223225227229Blocklist size0.51248163264128Attestation time (s)Snarkblock attestation time vs. blocklist sizenobuf, cs=1024buf, cs=1024nobuf, cs=8192buf, cs=819213264961281601922240.000.250.500.751.001.25Offline precomputation time (s)buf2244096819212288Num. additions/removals to blocklist tail050100150200Offline precomputation time (s)buf, cs=8192buf, cs=1024Sync time vs. blocklist changes215217219221223225227Blocklist size0102030405060Verifications / sSnarkblock verification throughput vs. Blocklist sizebuf, cs=1024buf, cs=8192217219221223225227Blocklist size020406080100120140160Proof size (KiB)Snarkblock proof size vs. Blocklist sizebuf, cs=8192nobuf, cs=8192Fit to log growthClient Attestation
Server Veriﬁcation
BLAC [TAKS10]
2nMG1
(2n + 4)MG1 + 2P
SNARKBLOCK
(197 + 10c)MG1
+(160 + 10c)MG2 + 2MGT
+(244 + 15c)P
25MG1 + 38P
+(46 + 10log2(c))MGT
Proof Size
(3n + 12)|F| + (n + 3)|G1|
528B + n· 144B
8|F| + 29|G1| + 14|G2|
+(48 + 10log2 c)|GT|
29.3KiB + log2(c)· 5.6KiB
Abs.
Real
Abs.
Real
Legend: n = Blocklist length, c = Num. chunks, MG = Var. base MSM in G, P = Pairing op.,
|G| = Size of group elem.,
|F| = Size of scalar ﬁeld elem.
TABLE I: BLAC and SNARKBLOCK operation counts and proof sizes. SNARKBLOCK operation counts assume a fully
synchronized client and an unbuffered blocklist. The top subcell in the Proof Size column represents abstract element counts.
The bottom subcell represents the byte count when instantiated with BLS12-381.
in 2021 [Wik] and Reddit had 64 comments per second
in 2020 [Red20]. Estimating from event logs for June
through October 2020, English language Wikipedia has
about 2k bans per day, of which 250 (12.5%) were
permanent. Assuming a similar ban rate, Reddit has
at least 8k permanent bans per day and perhaps 32k
temporary.
An Amazon EC2 c5.4xLarge costs about $10 USD
per day if reserved for a year.6 For a blocklist of 224
entries, SNARKBLOCK handles at least 35 attestations per
second. At Reddit’s scale, deployed in the more resource-
intensive attestation-per-comment mode, SNARKBLOCK
costs on the order of $20 per day when pessimistically
assuming full EC2 retail pricing at scale. With gener-
ous allowances for CPU differences and virtualization
overhead, SNARKBLOCK is at most $200 per day in the
worst case. For reference, Facebook pays moderators in
the US $120 a day [Sal19].
A ﬁnal consideration is increased bandwidth usage by
the server. A SNARKBLOCK attestation for a 4M-entry
blocklist is 130KiB, at least two orders of magnitude
larger than an average text comment it would accompany
in the fully anonymous setting. 130KiB, however, is
dwarfed by the size of image and video ﬁles uploaded
to many service providers. Moreover, inbound trafﬁc is
typically a small fraction of total trafﬁc for web services.
So much so that on EC2, for example, it’s free.
B. Client side performance vs BLAC
SNARKBLOCK’s main advantage over BLAC is log-
arithmic server-side scaling. Nonetheless, we brieﬂy
discuss client-side performance. The biggest problem
for BLAC, surprisingly, is proof size. A blocklist with
4M bans yields proofs of 549MiB. In contrast, a SNARK-
BLOCK attestation is less than 200KiB for a 134 million
entry list. On a 50Mbps connection, which is 5× the up-
6With 16 virtual Xeon CPUs and 30GB of memory, this is a decent
analog to our test system since in testing, SNARKBLOCK never exceeded
20 GB of memory for veriﬁcation.
stream bandwidth of the median US household [FCC20],7
uploading a BLAC attestation would take 90s. Even if
both have a 100Mbps ﬁber connection, SNARKBLOCK
can compute and upload the attestation before a BLAC
proof would upload.
What if we ignore proof size? Although Tsang et
al. give benchmarks for BLAC, they are on 10+ year
old hardware using the very dated PBC library [Lyn]
for pairings. Luckily, Tsang et al. also characterize their
system’s performance in terms of group operations. In lieu
of a reimplementation, we report these measurements and
give the equivalent values for SNARKBLOCK in Table I.
SNARKBLOCK pays an initial overhead in terms
of upfront costs (e.g., the 244 pairings). The major
advantage for SNARKBLOCK is that its operations are
per chunk as opposed to per element. Ignoring constants,
SNARKBLOCK is faster for proving whenever 2nMG1 >
10nMG1
, where s = n/c is the chunk size.
Thus, as the blocklist size grows, SNARKBLOCK will
outperform as long as s > 5 + 12.5o where o = P
is
MG1
the overhead for pairings relative to G1 multiplications.8
On our benchmark system, G2 multiplications are about
3 times G1, and pairings twice that. i.e., o ≈ 6.
s + 15nP
s
s +
10nMG2
Unfortunately, giving a precise estimate for the transi-
tion point is impossible with only group operations: we
need to compare runtimes to a full reimplementation of
BLAC. Real-world performance will differ signiﬁcantly
from group operation counts due to parallelization and
other optimizations. Indeed, SNARKBLOCK outperforms
estimates based on group operations and benchmarked
operation times.
SNARKBLOCK has one substantial cost that BLAC
does not: SNARKBLOCK requires periodic sync computa-
tions for blocklist additions and removals. Per Figure 5,
this is less than 200s for every 12k additions, with appro-
priate batching or buffering. For much faster churning
7FCC measurements are a trailing indicator. The latest report, released
in Sep. 2020 [FCC20], is for data as of Dec. 2018. For Oct. 2021,
Speedtest.net reports its US users have upstream averages of 19.18Mbps
for wired connections and 8.81Mbps for mobile.
8Since MG2 < P, we can approximate them as the same.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
959
lists, e.g., 64k additions per day, BLAC would have a
large initial advantage by avoiding these recomputation
costs. But at even 8k additions per day, the service
provider will exceed 222 bans within two years. At
this point, under reasonable bandwidth assumptions,
SNARKBLOCK will outperform BLAC.
C. Cold Start
One signiﬁcant caveat for SNARKBLOCK is that a new
user of a system with a pre-existing blocklist must do
signiﬁcant work to sync the entire blocklist and compute
the chunk proofs.
One option is to leverage the issuance date for a user’s
identity and allow them to skip proving membership in
blocklist chunks whose last entry is before they joined.
This can be done directly now, albeit at the cost of leaking
the user’s approximate join time for, e.g., a particular
forum. Speciﬁcally, a given service provider can use
a custom CRS for their Groth16 chunk proofs. They
can then, using the CRS trapdoor, give each new user
non-membership chunk proofs for earlier portions of the
blocklist. Crucially, proving with a trapdoor is constant-
time, so this process is efﬁcient.
We leave to future work the question of how to build a
general trapdoor for cold start. In particular, it should be
possible skip chunk proofs whose last entry was inserted
before the issuance data of the user’s identity.
IX. RELATED WORK
For a full formalization of privacy preserving blocklists,
we refer the reader to excellent SoK of Henry and
Goldberg [HG11]. This also describes a number of
interesting hybrid systems that can be constructed in
a black-box way from either SNARKBLOCK or BLAC
and allow for pruning of blocklists.
A. Blocklists
The work closest
to ours is the ZKBL approach
introduced in BLAC [TAKS10]. As discussed in prior
sections, by replacing the zero-knowledge proofs in
BLAC with our novel proving system HICIAP, we get a
system that offers logarithmic veriﬁcation time and proof
size, rather than linear. Further, we extend the system to
support federated identities.
Also close to our work is the windowed approach
from PEREA [TAKS08], also by the authors of BLAC.
In PEREA, users are issued a ﬁnite number of one-time-
use identity tickets for use during a revocation window,
e.g., one month. To complete an action, a user must prove
none of those tickets are in the blocklist. A user computes
the same proof to get the next set of tickets. Veriﬁcation
time is proportional to size of the revocation window,
not the total size of the blocklist. It has a number of
drawbacks for broad deployment on the web:
1) Issuing users a small number of tickets is feasible
for individual low-volume sites, but the limit would
apply to all sites in a federated system.
2) The approach is inherently centralized. All blocklists
must be registered with the single identity provider to
ensure non-membership before reissuing identities.
3) Service providers must react quickly to ban users,
since bans expire once the user gets new identities.
The exact time depends on conﬁguration; PEREA
gives the example of a 1-hour window for a site like
Wikipedia.
Finally, a number of
systems provide weaker
anonymity. One line of work relies on a trusted third party
to revoke anonymity, e.g, [Cha85], [Cv91], [BMW03].
Another approach is to leverage blind signatures to
remove the linkage between, e.g., an IP address, and the
pseudonym, e.g., [JKTS07], [TKCS11], [LH10]. These
schemes only provide pseudonymity, allowing the linking
of pseudonymous posts across different platforms. In
contrast, SNARKBLOCK provides anonymity and does
not trust a third party to safeguard user identities.
B. Zero-knowledge proofs
Our HICIAP protocol consists of a non-membership
proof and a proof that a revocation tag has been computed
correctly. Bayer and Groth design a non-membership
proof [BG13] with logarithmic proof size and no trusted
setup, but they have (quasi-)linear prover and veriﬁer
costs. Non-membership proofs can also be constructed in
groups of unknown order [CL02], [BCFK19], and have
constant veriﬁer time and prover time. However, it is
not obvious how to apply these techniques to a blocklist
without requiring a ﬁnite number of tickets per user as
in PEREA.
An alternative and thus far unexplored direction for
proving blocklist non-membership is recent advances in
recursive zero-knowledge proofs using techniques ﬁrst
introduced by Bowe et al. for Halo [BGH19]. Halo-
like schemes, formalized in [BCMS20] as accumulator
schemes, have been extended to a wider variety of
polynomial commitment schemes in [BDFG21]. These
use Bulletproofs [BBB+18] as a building block, which
introduces a linear veriﬁcation time component to the
constructions. This cost is typically small if the individual
computation step is small, but leads to a different set of
design tradeoffs than recursive proofs with fully succinct
veriﬁers. B¨unz et al. [BCL+21] and Kothapalli et al.
[KST21] improve upon these results.
One key challenge to using Halo-like techniques is
the concrete cost of recursion. With SNARKBLOCK,
aggregation costs are less than 8× the cost of native
veriﬁcation, keeping online costs low. For Halo like
systems, these costs depend heavily on the exact approach
taken.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
960
REFERENCES
[Bow17]
[Ar21]
[BB04]
Arkworks-rs. Arkworks Ecosystem Homepage, 2021. https:
//arkworks.rs/.
Dan Boneh and Xavier Boyen. Short signatures without
random oracles. In Christian Cachin and Jan Camenisch,
editors, EUROCRYPT 2004, volume 3027 of LNCS, pages
56–73. Springer, Heidelberg, May 2004.
[BBB+18] Benedikt B¨unz, Jonathan Bootle, Dan Boneh, Andrew
Poelstra, Pieter Wuille, and Greg Maxwell. Bulletproofs:
Short proofs for conﬁdential transactions and more. In
2018 IEEE Symposium on Security and Privacy, pages
315–334. IEEE Computer Society Press, May 2018.
Dan Boneh, Xavier Boyen, and Hovav Shacham.
Short group signatures.
In Matthew Franklin, editor,
CRYPTO 2004, volume 3152 of LNCS, pages 41–55.
Springer, Heidelberg, August 2004.
[BBS04]
[BCD+17] Foteini Baldimtsi, Jan Camenisch, Maria Dubovitskaya,
Anna Lysyanskaya, Leonid Reyzin, Kai Samelin, and
Sophia Yakoubov. Accumulators with applications to
anonymity-preserving revocation.
Cryptology ePrint
Archive, Report 2017/043, 2017. https://eprint.iacr.org/20
17/043.
[BCFK19] Daniel Benarroch, Matteo Campanelli, Dario Fiore, and
Dimitris Kolonelos.
Zero-knowledge proofs for set
membership: Efﬁcient, succinct, modular. Cryptology
ePrint Archive, Report 2019/1255, 2019. https://eprint.iac
r.org/2019/1255.
[BCG+15] Eli Ben-Sasson, Alessandro Chiesa, Matthew Green, Eran
Tromer, and Madars Virza. Secure sampling of public
parameters for succinct zero knowledge proofs. In 2015
IEEE Symposium on Security and Privacy, pages 287–304.
IEEE Computer Society Press, May 2015.
[BCL+21] Benedikt B¨unz, Alessandro Chiesa, William Lin, Pratyush
Mishra, and Nicholas Spooner. Proof-carrying data without
succinct arguments. In Malkin and Peikert [MP21], pages
681–710.
[BCMS20] Benedikt B¨unz, Alessandro Chiesa, Pratyush Mishra, and
Nicholas Spooner. Proof-carrying data from accumulation
schemes. Cryptology ePrint Archive, Report 2020/499,
2020. https://eprint.iacr.org/2020/499.
[BG13]
[BGH19]
[BDFG21] Dan Boneh, Justin Drake, Ben Fisch, and Ariel Gabizon.
Halo inﬁnite: Proof-carrying data from additive polynomial
commitments. In Malkin and Peikert [MP21], pages 649–
680.
Stephanie Bayer and Jens Groth. Zero-knowledge ar-
gument for polynomial evaluation with application to
blacklists. In Thomas Johansson and Phong Q. Nguyen,
editors, EUROCRYPT 2013, volume 7881 of LNCS, pages
646–663. Springer, Heidelberg, May 2013.
Sean Bowe, Jack Grigg, and Daira Hopwood. Halo:
Recursive proof composition without a trusted setup.
Cryptology ePrint Archive, Report 2019/1021, 2019.
https://eprint.iacr.org/2019/1021.
Sean Bowe, Ariel Gabizon, and Ian Miers. Scalable
multi-party computation for zk-SNARK parameters in