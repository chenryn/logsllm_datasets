With predicates as basic constructs, we use a hyper-alert type to encode our knowledge
about each type of attacks.
Deﬁnition 1 A hyper-alert type T is a triple (fact, prerequisite, consequence) where (1)
fact is a set of attribute names, each with an associated domain of values, (2) prerequisite
is a logical formula whose free variables are all in fact, and (3) consequence is a set of
logical formulas such that all the free variables in consequence are in fact.
Intuitively, the fact component of a hyper-alert type gives the information associated
with the alert, prerequisite speciﬁes what must be true for the attack to be successful,
and consequence describes what could be true if the attack indeed succeeds. For brevity,
we omit the domains associated with attribute names when they are clear from context.
Example 1 Consider the buffer overﬂow attack against the sadmind remote admin-
istration tool. We may have the following hyper-alert type for such attacks: Sadmind-
BufferOverﬂow = ({VictimIP, VictimPort}, ExistHost (VictimIP) ∧ VulnerableSadmind
(VictimIP),{GainRootAccess(VictimIP)}). Intuitively, this hyper-alert type says that such
an attack is against the host running at IP address VictimIP. (We expect the actual values
of VictimIP are reported by an IDS.) As the prerequisite of a successful attack, there must
exist a host at the IP address VictimIP and the corresponding sadmind service should be
vulnerable to buffer overﬂow attacks. The attacker may gain root privilege as a result of
the attack.
2
Given a hyper-alert type, a hyper-alert instance can be generated if the corresponding
attack is reported by an IDS. For example, we can generate a hyper-alert instance of type
SadmindBufferOverﬂow from an alert that describes such an attack.
Deﬁnition 2 Given a hyper-alert type T = (fact, prerequisite, consequence), a hyper-
alert (instance) h of type T is a ﬁnite set of tuples on fact, where each tuple is associated
with an interval-based timestamp [begin time, end time]. The hyper-alert h implies that
prerequisite must evaluate to True and all the logical formulas in consequence might
evaluate to True for each of the tuples.
Analyzing Intensive Intrusion Alerts via Correlation
79
The fact component of a hyper-alert type is essentially a relation schema (as in
relational databases), and a hyper-alert is a relation instance of this schema. One may
point out that an alternative way is to represent a hyper-alert as a record, which is
equivalent to a single tuple on fact. However, such an alternative cannot accommodate
certain alerts possibly reported by an IDS. For example, an IDS may report an IPSweep
attack along with multiple swept IP addresses, which cannot be represented as a single
record. Thus, we believe the current notion of a hyper-alert is a more appropriate choice.
A hyper-alert instantiates its prerequisite and consequence by replacing the free
variables in prerequisite and consequence with its speciﬁc values. Note that prerequisite
and consequence can be instantiated multiple times if fact consists of multiple tuples.
For example, if an IPSweep attack involves several IP addresses, the prerequisite and
consequence of the corresponding hyper-alert type will be instantiated for each of these
addresses.
In the following, we treat timestamps implicitly and omit them if they are not nec-
essary for our discussion.
Example 2 Consider the hyper-alert type SadmindBufferOverﬂow deﬁned in example 1.
We may have a hyper-alert hSadmindBOF that includes the following tuples: {(VictimIP
= 152.141.129.5, VictimPort = 1235), (VictimIP = 152.141.129.37, VictimPort = 1235)}.
This implies that if the attack is successful, the following two logical formulas must be
True as the prerequisites of the attack: ExistHost (152.141.129.5) ∧ VulnerableSadmind
(152.141.129.5), ExistHost (152.141.129.37) ∧ VulnerableSadmind (152.141.129.37),
and the following two predicates might be True as consequences of the attack: Gain-
RootAccess (152.141.129.5), GainRootAccess (152.141.129.37). This hyper-alert says
that there are buffer overﬂow attacks against sadmind at IP addresses 152.141.129.5 and
152.141.129.37, and the attacker may gain root access as a result of the attacks.
2
To correlate hyper-alerts, we check if an earlier hyper-alert contributes to the pre-
requisite of a later one. Speciﬁcally, we decompose the prerequisite of a hyper-alert into
parts of predicates and test whether the consequence of an earlier hyper-alert makes
some parts of the prerequisite True (i.e., makes the prerequisite easier to satisfy). If the
result is positive, then we correlate the hyper-alerts. This approach is speciﬁed through
the following deﬁnitions.
Deﬁnition 3 Consider a hyper-alert type T = (fact, prerequisite, consequence). The
prerequisite set (or consequence set, resp.) of T , denoted P (T ) (or C(T ), resp.), is the
set of all such predicates that appear in prerequisite (or consequence, resp.). Given a
hyper-alert instance h of type T , the prerequisite set (or consequence set, resp.) of h,
denoted P (h) (or C(h), resp.), is the set of predicates in P (T ) (or C(T ), resp.) whose
arguments are replaced with the corresponding attribute values of each tuple in h. Each
element in P (h) (or C(h), resp.) is associated with the timestamp of the corresponding
tuple in h.
Deﬁnition 4 Hyper-alert h1 prepares for hyper-alert h2 if there exist p ∈ P (h2) and
C ⊆ C(h1) such that for all c ∈ C, c.end time < p.begin time and the conjunction
of all the logical formulas in C implies p.
if there exists another hyper-alert h(cid:2)
h. Otherwise, h is called an isolated hyper-alert.
Given a sequence S of hyper-alerts, a hyper-alert h in S is a correlated hyper-alert
prepares for
such that either h prepares for h(cid:2)
or h(cid:2)
80
P. Ning, Y. Cui, and D.S. Reeves
Let us further explain the alert correlation method with the following example.
Example 3 Consider the Sadmind Ping attack with which an attacker discovers possibly
vulnerable sadmind services. The corresponding hyper-alert type can be represented by
SadmindPing = ({VictimIP, VictimPort}, ExistsHost (VictimIP), {VulnerableSadmind
(VictimIP)}). It is easy to see that P (SadmindP ing) = {ExistHost(V ictimIP )},
and C(SadmindP ing) = {V ulnerableSadmind(V ictimIP )}.
Suppose a hyper-alert hSadmindP ing of type SadmindPing has the following tu-
ples: {(VictimIP = 152.141.129.5, VictimPort = 1235)}. Then the prerequisite set of
hSadmindP ing is P (hSadmindP ing) = {ExistsHost (152.141.129.5)}, and the conse-
quence set is C(hSadmindP ing) = {VulnerableSadmind (152.141.129.5)}.
Now consider the hyper-alert hSadmindBOF discussed in Example 2. Similar to
hSadmindP ing, we can easily get P (hSadmindBOF ) = {ExistsHost (152.141.129.5),
ExistsHost (152.141.129.37), VulnerableSadmind (152.141.129.5), VulnerableSadmind
(152.141.129.37)}, and C(hSadmindBOF ) = {GainRootAccess (152.141.129.5), Gain-
RootAccess (152.141.129.37)}.
Assume that all tuples in hSadmindP ing have timestamps earlier than every tuple in
hSadmindBOF . By comparing the contents of C(hSadmindP ing) and P (hSadmindBOF ),
it is clear that the element VulnerableSadmind (152.141.129.5) in P (hSadmindBOF )
(among others) is also in C(hSadmindP ing). Thus, hSadmindP ing prepares for, and
should be correlated with hSadmindBOF .
2
The prepare-for relation between hyper-alerts provides a natural way to represent
the causal relationship between correlated hyper-alerts. We also introduce the notion of
a hyper-alert correlation graph to represent a set of correlated hyper-alerts.
Deﬁnition 5 A hyper-alert correlation graph CG = (N, E) is a connected graph, where
the set N of nodes is a set of hyper-alerts and for each pair n1, n2 ∈ N, there is a directed
edge from n1 to n2 in E if and only if n1 prepares for n2.
A hyper-alert correlation graph is an intuitive representation of correlated alerts. It can
potentially reveal intrusion strategies behind a series of attacks, and thus lead to better
understanding of the attacker’s intention. We have performed a series of experiments
with the 2000 DARPA intrusion detection evaluation datasets [7]. Figure 1 shows one of
the hyper-alert correlation graphs discovered from these datasets. Each node in Figure 1
represents a hyper-alert. The numbers inside the nodes are the alert IDs generated by the
IDS. This hyper-alert correlation graph clearly shows the strategy behind the sequence
of attacks. (For details please refer to [7].)
4 Utilities for Analyzing Intensive Alerts
As demonstrated in [7], the alert correlation method is effective in analyzing small
amount of alerts. However, our experience with intrusion intensive datasets (e.g., the
DEF CON 8 CTF dataset [10]) has revealed several problems.
First, let us consider the following scenario. Suppose an IDS detected an Sadmind-
Ping attack, which discovered the vulnerable Sadmind service on host V, and later an
SadmindBufferOverlfow attack against the Sadmind service. Assuming that they were
launched from different hosts, should we correlate them? On the one hand, it is possible
that one or two attackers coordinated these two attacks from two different hosts, trying to
Analyzing Intensive Intrusion Alerts via Correlation
81
67343
Sadmind_Ping
67432
67434
67436
67440
67558
Sadmind_Amslverify_Overflow
67559
67560
Rsh
Attacking Host: 202.77.162.213
Victim Host: 172.16.112.50
67554
67553
67773
67776
Stream_DoS
Mstream_Zombie
Fig. 1. A hyper-alert correlation graph discovered in the 2000 DARPA intrusion detection evalu-
ation datasets
avoid being correlated. On the other hand, it is also possible that these attacks belonged
to two separate efforts. Such a scenario clearly introduces a dilemma, especially when
there are a large amount of alerts.
One may suggest to use time to solve this problem. For example, we may correlate
the aforementioned attacks if they happened within t seconds. However, knowing this
method, an attacker may introduce delays between attacks to bypass correlation.
The second problem is the overwhelming information encoded by hyper-alert cor-
relation graphs when intensive intrusions trigger a large amount of alerts. Our initial
attempt to correlate the alerts generated for the DEF CON 8 CTF dataset [10] resulted
in 450 hyper-alert correlation graphs, among which the largest hyper-alert correlation
graph consists of 2,940 nodes and 25,321 edges. Such a graph is clearly too big for a
human user to comprehend in a short period of time.
Although the DEF CON 8 dataset involves intensive intrusions not usually seen in
normal network trafﬁc, the actual experience of intrusion detection practitioners indicates
that “encountering 10-20,000 alarms per sensor per day is common [9].” Thus, it is
necessary to develop techniques or tools to deal with the overwhelming information.
In this section, we propose three utilities, mainly to address the second problem.
Regarding the ﬁrst problem, we choose to correlate the alerts when it is possible, leaving
the ﬁnal decision to the user. We would like to clarify that these utilities are intended
for human users to analyze alerts interactively, not for computer systems to draw any
conclusion automatically, though some of the utilities may be adapted for automatic
systems. These utilities are summarized as follows.
1. Adjustable graph reduction. Reduce the complexity (i.e., the number of nodes and
edges) of hyper-alert correlation graphs while keeping the structure of sequences
of attacks. The graph reduction is adjustable in the sense that users are allowed to
control the degree of reduction.
2. Focused analysis. Focus analysis on the hyper-alerts of interest according to user’s
speciﬁcation. This may generate hyper-alert correlation graphs much smaller and
more comprehensible than the original ones.
3. Graph decomposition. Cluster the hyper-alerts in a hyper-alert correlation graph
based on the common features shared by the hyper-alerts, and decompose the graph
82
P. Ning, Y. Cui, and D.S. Reeves
Attacking Host: 202.77.162.213
Victim Host: 172.16.112.50
67343
A 001
Sadmind_Ping
Sadmind_Amslverify_Overflow
A 002
Rsh
A003
67773
Mstream_Zombie
Stream_DoS
Fig. 2. A hyper-alert correlation graph reduced from Fig. 1
into smaller graphs according to the clusters. This can be considered to combine a
variation of the method proposed in [3] with our method.
4.1 Adjustable Reduction of Hyper-alert Correlation Graphs
A natural way to reduce the complexity of a hyper-alert correlation graph is to reduce the
number of nodes and edges. However, to make the reduced graph useful, any reasonable
reduction should maintain the structure of the corresponding attacks.
We propose to aggregate hyper-alerts of the same type to reduce the number of
nodes in a hyper-alert correlation graph. Due to the ﬂexible deﬁnition of hyper-alerts,
the result of hyper-alert aggregation will remain valid hyper-alerts. For example, in
Figure 1, hyper-alerts 67432, 67434, 67436, and 67440 are all instances of hyper-alert
type Sadmind Amslverify Overﬂow. Thus, we may aggregate them into one hyper-alert.
As another example, hyper-alerts 67558, 67559, 67560, and 67553 are all instances of
Rsh, and can be aggregated into a single hyper-alert.
Edges are reduced along with the aggregation of hyper-alerts. In Figure 1, the edges
between the Rsh hyper-alerts are subsumed into the aggregated hyper-alert, while the
edges between the Sadmind Ping hyper-alert and the four Sadmind Amslverify Overﬂow
hyper-alerts are merged into a single edge. As a result, we have a reduced hyper-alert
correlation graph as shown in Figure 2.
Reduction of a hyper-alert correlation graph may lose information contained in the
original graph. Indeed, hyper-alerts that are of the same type but belong to different
sequences of attacks may be aggregated and thus provide overly simpliﬁed results.
Nevertheless, our goal is to lose as little information of the structure of attacks as possible.
Depending on the actual alerts, the reduction of a hyper-alert correlation graph may
be less simpliﬁed, or over simpliﬁed. We would like to give a human user more control
over the graph reduction process. In the following, we use a simple mechanism to control
this process, based on the notion of an interval constraint [6].
Deﬁnition 6 Given a time interval I (e.g., 10 seconds), a hyper-alert h satisﬁes interval
constraint of I if (1) h has only one tuple, or (2) for all t in h, there exist another t(cid:2)
in h such
that there exist t.begin time < T < t.end time, t(cid:2).begin time < T (cid:2) < t(cid:2).end time,
and |T − T (cid:2)| < I.
We allow hyper-alert aggregation only when the resulting hyper-alerts satisfy an
interval constraint of a given threshold I. Intuitively, we allow hyper-alerts to be aggre-
gated only when they are close to each other. The larger a threshold I is, the more a
Analyzing Intensive Intrusion Alerts via Correlation
83
hyper-alert correlation graph can be reduced. By adjusting the interval threshold, a user
can control the degree to which a hyper-alert correlation graph is reduced.
4.2 Focused Analysis
Focused analysis is implemented on the basis of focusing constraints. A focusing con-
straint is a logical combination of comparisons between attribute names and constants.
(In our work, we restrict logical operations to AND (∧), OR (∨), and NOT (¬).) For
example, we may have a focusing constraint SrcIP = 129.174.142.2 ∨ DestIP =
129.174.142.2. We say a focusing constraint Cf is enforceable w.r.t. a hyper-alert
type T if when we represent Cf in a disjunctive normal form, at least for one dis-
junct Cf i, all the attribute names in Cf i appear in T . For example, the above focus-
ing constraint is enforceable w.r.t. T = ({SrcIP, SrcP ort}, N U LL,∅), but not w.r.t.
T (cid:2) = ({V ictimIP, V ictimP ort}, N U LL,∅). Intuitively, a focusing constraint is en-
forceable w.r.t. T if it can be evaluated using a hyper-alert instance of type T .
We may evaluate a focusing constraint Cf with a hyper-alert h if Cf is enforceable
w.r.t. the type of h. A focusing constraint Cf evaluates to True for h if there exists a
tuple t ∈ h such that Cf is True with the attribute names replaced with the values of the
corresponding attributes of t; otherwise, Cf evaluates to False. For example, consider the
aforementioned focusing constraint Cf , which is SrcIP = 129.174.142.2∨DestIP =
129.174.142.2, and a hyper-alert h = {(SrcIP = 129.174.142.2, SrcP ort = 80)},
we can easily have that Cf = True for h.
The idea of focused analysis is quite simple: we only analyze the hyper-alerts with
which a focusing constraint evaluates to True. In other words, we would like to ﬁlter
out irrelevant hyper-alerts, and concentrate on analyzing the remaining hyper-alerts. We
are particularly interested in applying focusing constraints to atomic hyper-alerts, i.e.,
hyper-alerts with only one tuple. In our framework, atomic hyper-alerts correspond to
the alerts reported by an IDS directly.
Focused analysis is particularly useful when we have certain knowledge of the alerts,
the systems being protected, or the attacking computers. For example, if we are interested
in the attacks against a critical server with IP address Server IP, we may perform a
focused analysis using DestIPAddress = Server IP. However, focused analysis cannot
take advantage of the intrinsic relationship among the hyper-alerts (e.g., hyper-alerts
having the same IP address). In the following, we introduce the third utility, graph
decomposition, to ﬁll in this gap.
4.3 Graph Decomposition Based on Hyper-alert Clusters
The purpose of graph decomposition is to use the inherent relationship between (the
attributes of) hyper-alerts to decompose a hyper-alert correlation graph. Conceptually,
we cluster the hyper-alerts in a large correlation graph based on the “common features”
shared by hyper-alerts, and then decompose the original correlation graphs into sub-
graphs on the basis of the clusters. In other words, hyper-alerts should remain in the
same graph only when they share certain common features.
We use a clustering constraint to specify the “common features” for clustering hyper-
alerts. Given two sets of attribute names A1 and A2, a clustering constraint Cc(A1, A2)
84
P. Ning, Y. Cui, and D.S. Reeves
is a logical combination of comparisons between constants and attribute names in A1
and A2. (In our work, we restrict logical operations to AND (∧), OR (∨), and NOT
(¬).) A clustering constraint is a constraint for two hyper-alerts; the attribute sets A1
and A2 identify the attributes from the two hyper-alerts. For example, we may have two
sets of attribute names A1 = {SrcIP, DestIP} and A2 = {SrcIP, DestIP}, and
Cc(A1, A2) = (A1.SrcIP = A2.SrcIP ) ∧ (A1.DestIP = A2.DestIP ). Intuitively,
this is to say two hyper-alerts should remain in the same cluster if they have the same
source and destination IP addresses.
A clustering constraint Cc(A1, A2) is enforceable w.r.t. hyper-alert types T1 and T2
if when we represent Cc(A1, A2) in a disjunctive normal form, at least for one disjunct
Cci, all the attribute names in A1 appear in T1 and all the attribute names in A2 appear
in T2. For example, the above clustering constraint is enforceable w.r.t. T1 and T2 if
both of them have SrcIP and DestIP in the f act component. Intuitively, a focusing
constraint is enforceable w.r.t. T if it can be evaluated using two hyper-alerts of types
T1 and T2, respectively.
If a clustering constraint Cc(A1, A2) is enforceable w.r.t. T1 and T2, we can eval-
uate it with two hyper-alerts h1 and h2 that are of type T1 and T2, respectively. A