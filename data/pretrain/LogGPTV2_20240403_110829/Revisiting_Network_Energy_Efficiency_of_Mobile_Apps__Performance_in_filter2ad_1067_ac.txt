### Keeping Users Updated on the Latest Weather: A Trade-Off Between Timeliness and Energy Consumption

There is a trade-off between the timeliness of weather information and the energy consumption of mobile devices. Even among weather widgets, the update frequency can vary significantly between different apps, leading to substantial differences in energy overhead. For example, the Accuweather app is far less efficient than its corresponding widget, primarily because the widget updates less frequently. Widgets and apps developed by the same team can exhibit very different behaviors.

### Examination of Multimedia Streaming Apps

We also analyzed several multimedia streaming apps. Music streaming apps, while not as popular in our dataset as in previous studies, showed a lower update frequency compared to earlier observations [21]. This shift suggests a move from continuous streaming to larger batch downloads, although long update intervals may indicate intermittent use by some users. Podcasts, on the other hand, were more popular. We compared two popular podcast apps: Podcastaddict and Pocketcasts. Podcastaddict consumed more energy overall because it downloads smaller chunks as needed, whereas Pocketcasts downloads an entire podcast in one go. While the chunk-based approach may reduce data consumption if users do not finish listening, it results in higher energy usage.

### What-If Analysis: Preemptively Killing Idle Background Apps

In Section 4, we determined that background traffic has a significant impact on energy consumption, with much of this traffic originating from infrequently used apps. We propose that the operating system (OS) should preemptively kill background apps that have remained inactive for several days. A new permission or whitelist could address corner cases where apps, such as widgets, need to run in the background for extended periods. Additionally, OS feedback on background energy consumption could discourage unnecessary use of this functionality. The preview of Doze in Android M, announced after our submission, appears to add such functionality [15, 5]. Our analysis identified several apps where this approach could greatly reduce background traffic, though we did not evaluate Doze itself in this paper.

To evaluate the effectiveness of this approach, we simulated restricting background traffic after three days and highlighted six apps in Table 2. Row A shows the fraction of days with only background traffic, and Row B shows the maximum number of consecutive days with background traffic, considering only periods with foreground traffic at the beginning and end. These apps are rarely used by certain users, creating opportunities for energy savings if they are preemptively killed. Row C summarizes the average energy savings per user from killing the app after three consecutive days. Notably, Weibo, which we found to be very energy-hungry, could see its network energy consumption reduced by more than half using this method.

Given the large number of apps installed on users' phones, the individual impact of each app on total network consumption was small, resulting in overall network energy savings of less than 1% on average. However, for users running Weibo, disabling the app after just three days of inactivity could reduce their total network energy consumption by 16% on those days. The benefits of this functionality depend on the set of apps and user behavior, making it difficult to draw definitive conclusions about the average benefits of our proposed system or similar systems like Doze. However, such an approach seems particularly promising in protecting users from poorly optimized or buggy apps and reducing the worst-case energy consumption.

### Concluding Remarks and Recommendations

Excessive energy consumption by mobile apps has long been a significant problem, with background traffic being a major battery drain. We examined a previously unstudied phenomenon where network traffic initiated in the foreground persists unnecessarily when the app is sent to the background. Furthermore, we showed that improvements for known inefficiencies have not been universally implemented, even in professionally developed apps with large user bases. We recommend that app developers carefully consider the cost of the traffic they send and adjust network transfers based on the app's foreground/background state. Most crucially, apps should ensure that network transfers are terminated when the app is minimized, where possible.

In Section 5, we demonstrated that more aggressively killing apps that run in the background for days could greatly reduce the energy impact of infrequently used apps. Since submitting this paper, Google announced Android M, which disables all background activity when the device is idle, allowing users to manually specify exemptions for specific apps. Our findings suggest this is a positive step towards improving battery life. Similar tools to manage other aspects of network content overconsumption would also be valuable, such as terminating flows meant to occur only in the foreground.

Finally, the impact of periodic background transfers can be reduced in many cases. Some improvements, such as batching requests, have been implemented with positive effects [18, 21], but background data continues to have a large relative overhead. App developers should continue to batch traffic to minimize the frequency of background updates and tailor updates to reflect the frequency of useful, new data. Our findings also emphasize the importance of previously proposed approaches to reducing the energy consumption of background traffic at the OS level, such as providing explicit OS support for periodic updates or using radio-layer energy-saving features like fast dormancy [7].

### Acknowledgements

We would like to thank our anonymous reviewers and Erich Nahum, our shepherd, for their valuable comments. This research was supported in part by the NSF under CNS-1059372 and CNS-1345226, as well as by an NSERC Canada PGS D scholarship.

### References

[1] App Programming Guide for iOS — Background Execution.
https://developer.apple.com/library/prerelease/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html

[2] Apple’s app store has passed 100 billion app downloads.
http://www.theverge.com/2015/6/8/8739611/apple-wwdc-2015-stats-update

[3] Background agents for Windows Phone 8.
https://msdn.microsoft.com/en-us/library/windows/apps/Hh202942(v=VS.105).aspx

[4] Conserve windows phone battery life by managing background apps.
http://www.windowscentral.com/conserve-windows-phone-battery-life-managing-background-apps

[5] Developer preview - power-saving optimizations.
https://developer.android.com/preview/features/power-mgmt.html

[6] ActivityManager.RunningAppProcessInfo documentation.
https://developer.android.com/reference/android/app/ActivityManager.RunningAppProcessInfo.html

[7] P. K. Athivarapu, R. Bhagwan, S. Guha, V. Navda, R. Ramjee, D. Arora, V. N. Padmanabhan, and G. Varghese. RadioJockey: Mining Program Execution to Optimize Cellular Radio Usage. In Proc. ACM MobiCom, 2012.

[8] A. Aucinas, N. Vallina-Rodriguez, Y. Grunenberger, V. Erramilli, K. Papagiannaki, J. Crowcroft, and D. Wetherall. Staying Online while Mobile: The Hidden Costs. In CoNEXT, 2013.

[9] N. Balasubramanian, A. Balasubramanian, and A. Venkataramani. Energy Consumption in Mobile Phones: A Measurement Study and Implications for Network Applications. In Proc. ACM IMC, 2009.

[10] X. Chen, N. Ding, A. Jindal, Y. C. Hu, M. Gupta, and R. Vannithamby. Smartphone energy drain in the wild: Analysis and implications. In Proc. Sigmetrics, 2015.

[11] E. Cuervo, A. Balasubramanian, D. ki Cho, A. Wolman, S. Saroiu, R. Chandra, and P. Bahl. MAUI: Making Smartphones Last Longer with Code Offload. In Proc. ACM MobiSys, 2010.

[12] H. Falaki, D. Lymberopoulos, R. Mahajan, S. Kandula, and D. Estrin. A First Look at Traffic on Smartphones. In Proc. ACM IMC, 2010.

[13] H. Falaki, R. Mahajan, S. Kandula, D. Lymberopoulos, R. Govindan, and D. Estrin. Diversity in Smartphone Usage. In Proc. ACM MobiSys, 2010.

[14] A. Gember, A. Akella, J. Pang, A. Varshavsky, and R. Caceres. Obtaining In-Context Measurements of Cellular Network Performance. In Proc. ACM IMC, 2012.

[15] R. Holly. Checking out Doze and App standby on the Android M Developer Preview.
http://www.androidcentral.com/checking-out-doze-android-m-developer-preview

[16] J. Huang, F. Qian, A. Gerber, Z. M. Mao, S. Sen, and O. Spatscheck. A Close Examination of Performance and Power Characteristics of 4G LTE Networks. In Proc. ACM MobiSys, 2012.

[17] J. Huang, F. Qian, Y. Guo, Y. Zhou, Q. Xu, Z. M. Mao, S. Sen, and O. Spatscheck. An In-Depth Study of LTE: Effect of Network Protocol and Application Behavior on Performance. In ACM SIGCOMM Computer Communication Review, volume 43, 2013.

[18] J. Huang, F. Qian, Z. M. Mao, S. Sen, and O. Spatscheck. Screen-off Traffic Characterization and Optimization in 3G/4G Networks. In Proc. ACM IMC, 2012.

[19] J. Huang, Q. Xu, B. Tiwana, Z. M. Mao, M. Zhang, and P. Bahl. Anatomizing Application Performance Differences on Smartphones. In Proc. ACM MobiSys, 2010.

[20] M. Martins, J. Cappos, and R. Fonseca. Selectively Taming Background Android Apps to Improve Battery Lifetime. In Proc. Usenix ATC, 2015.

[21] F. Qian, Z. Wang, Y. Gao, J. Huang, A. Gerber, Z. Mao, S. Sen, and O. Spatscheck. Periodic Transfers in Mobile Applications: Network-wide Origin, Impact, and Optimization. In Proceedings of the 21st international conference on World Wide Web, pages 51–60, 2012.

[22] F. Qian, Z. Wang, A. Gerber, Z. M. Mao, S. Sen, and O. Spatscheck. Profiling Resource Usage for Mobile Applications: a Cross-layer Approach. In Proc. ACM MobiSys, 2011.

[23] A. A. Sani, Z. Tan, P. Washington, M. Chen, S. Agarwal, L. Zhong, and M. Zhang. The Wireless Data Drain of Users, Apps, & Platforms. ACM SIGMOBILE Mobile Computing and Communications Review, 17(4), 2013.

[24] I. Singh, S. V. Krishnamurthy, H. V. Madhyastha, and I. Neamtiu. ZapDroid: Managing Infrequently Used Applications on Smartphones. In Proc. UbiComp, 2015.

[25] J. Sommers and P. Barford. Cell vs. WiFi: On the Performance of Metro Area Mobile Connections. In Proc. ACM IMC, 2012.

[26] N. Thiagarajan, G. Aggarwal, A. Nicoara, D. Boneh, and J. P. Singh. Who Killed my Battery?: Analyzing Mobile Browser Energy Consumption. In Proceedings of the 21st international conference on World Wide Web, 2012.

[27] Q. Xu, J. Erman, A. Gerber, Z. Mao, J. Pang, and S. Venkataraman. Identifying Diverse Usage Behaviors of Smartphone Apps. In Proc. ACM IMC, 2011.