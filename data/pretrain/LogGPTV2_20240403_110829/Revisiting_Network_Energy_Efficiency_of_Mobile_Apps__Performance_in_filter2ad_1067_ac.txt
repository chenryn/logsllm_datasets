keep the user updated on the latest weather). There is a tradeoff
between timeliness of information and energy consumption. How-
ever, even just examining weather widgets, the difference in update
frequency between two apps (and the resulting energy overhead)
varies by an order of magnitude. Note also that the Accuweather
app is far less efﬁcient than the corresponding widget, as the widget
updates itself less frequently. Widgets and apps made by the same
developers may have very different behavior.
We also examined several multimedia streaming apps. Music
streaming apps were not as popular in our dataset as in prior work,
but their update frequency was generally much lower than before [21],
having apparently moved away from a continuous streaming model
to larger batch downloads, although particularly long update fre-
quencies may reﬂect users who only intermittently use these apps.
Podcasts were far more popular, and we compare two popular apps.
Podcastaddict consumed more energy overall, as Pocketcasts down-
loads an entire podcast in one chunk whereas Podcastaddict down-
loads smaller chunks as needed. While the latter approach may
reduce data consumption if users don’t ﬁnish listening to a podcast,
it consumes more energy.
5. WHAT-IF ANALYSIS: PREEMPTIVELY
KILLING IDLE BACKGROUND APPS
In §4 we determined that background trafﬁc has a substantial im-
pact on energy consumption, and in some cases much of this trafﬁc
is from apps users are not frequently using. We propose having the
OS kill background apps that have remained in the background for
several days. A new permission or whitelist could address corner
cases where apps (such as widgets) have a legitimate need to run in
the background for an extended period of time, and OS feedback on
background energy consumption could disincentivize unnecessary
use of this functionality. In fact, the preview of Doze in Android M,
a project announced after our submission, appears to add such func-
tionality [15, 5]. We have identiﬁed a number of apps where this
type of functionality has the potential to greatly reduce background
trafﬁc, although we do not evaluate Doze itself in this paper.
To evaluate the effectiveness of this approach, we simulate re-
stricting background trafﬁc after three days, and highlight six apps
343Plus
42
40
14
Weibo
Maps
83
24
54
70
84
39
ESPN
13
10
6.2
Accuweather
Skype
43
18
22
62
49
45
A: % days with only
background trafﬁc
B: Max consecutive
background days
C: Disable after 3 days:
avg.% energy reduction
Table 2: Example trends in background trafﬁc when apps
are infrequently used, and simulated energy savings from sup-
pressing this trafﬁc.
in Table 5.
In row A we show the fraction of days where we
see only background trafﬁc from the app, and in row B we show
the maximum number of such days that we see occurring consec-
utively, considering only time periods where there is foreground
trafﬁc at the beginning and end of the time period. These apps
are rarely used by certain users, creating energy savings oppor-
tunities if the apps were to be preemptively killed. Row C sum-
marizes the average savings per user of killing the app after three
consecutive days. Note in particular that Weibo, which we showed
was very energy-hungry, can have its network energy consumption
more than halved this way.
Due to the large number of apps users in our study had installed
on their phone, the impact of each app individually on a user’s
total network consumption was small. Thus, this would have re-
sulted in total network energy savings of less than 1% on average
overall. However, we found that for the users running Weibo, dis-
abling Weibo alone after just three days of inactivity could have
reduced their total network energy consumption by 16% on those
days. Overall, how much users beneﬁt from this functionality de-
pends greatly on the set of apps involved and on user behavior, so it
is hard to draw deﬁnite conclusions on the average beneﬁts of our
proposed system for or other systems such as Doze, but such an ap-
proach seems especially promising in protecting users from poorly
optimized or buggy apps, and reducing the worst-case energy con-
sumption generally.
6. CONCLUDING REMARKS AND
RECOMMENDATIONS
Excessive energy consumption by mobile apps has long been
known to be a signiﬁcant problem, and background trafﬁc contin-
ues to be a major battery drain. We have examined a signiﬁcant but
previously unstudied phenomenon where network trafﬁc initiated
in the foreground persists unnecessarily when the app is sent to the
background. Furthermore, we have shown that improvements for
known inefﬁciencies have not been universal, even for profession-
ally developed apps with a large user base. While we recommend
that app developers continue to carefully consider the cost of the
trafﬁc they send, more is needed to improve the situation, espe-
cially for background trafﬁc.
We make several recommendations. First, apps should be de-
signed to explicitly account for their foreground/ background state
and adjust network transfers accordingly. Most crucially, apps should
ensure network transfers are terminated when the app is minimized
where possible. In §5 we demonstrate that more aggressively killing
apps that run in the background for days could greatly reduce the
energy impact of infrequently used apps. Since submitting this pa-
per, Google announced Android M, where all background activity
is disabled when the device is idle, and users are able to manually
specify exemptions for speciﬁc apps. Our ﬁndings suggest this is
likely a very positive step towards improving battery life. Similar
tools to manage other aspects of network content overconsumption
would also be valuable, such as to terminate ﬂows meant to only
occur in the foreground.
Finally, the impact of periodic background transfers can also be
reduced in many cases. We have seen that some of the improve-
ments described in prior work, such as batching requests, have been
implemented with positive effect [18, 21], but background data
continues to have a large relative overhead. As proposed in prior
work, app developers should continue to batch trafﬁc to minimize
the frequency of background updates, as well as tailor updates to
reﬂect the frequency with which useful, new data is provided. Our
ﬁndings also emphasize the importance of previously proposed ap-
proaches to reducing the energy consumption of background trafﬁc
at the OS level, such as by providing explicit OS support for pe-
riodic updates or by using radio-layer energy saving features such
as fast dormancy [7]. Even if some apps improve energy consump-
tion, new apps will likely emerge that make the same mistakes.
In this paper, we have focused on background energy issues on
Android. Other systems take different approaches: IOS, for in-
stance, has the OS manage background tasks for applications, re-
stricting the potential impact of suboptimal app designs [1]. Al-
though we have not evaluated these systems, we can speculate as
to how our ﬁndings might apply to these systems. OS manage-
ment allows transfers to be batched, providing opportunities for
energy consumption optimization. However, some of their design
approaches and guidelines may suggest scheduling approaches in-
consistent with our ﬁndings. For instance, prioritizing apps who
download a small amount of data in the background quickly may
incentivize the wrong behavior. Windows Phones also put restric-
tions on background apps [3], restricting resource-intensive tasks
to WiFi and limiting the frequency with which background apps
can run, but there have still been consumer reports of speciﬁc apps
draining the battery when running in the background [4]. Overall,
there is a tradeoff between developer ﬂexibility and the potential
for excessive energy consumption; we leave examining the energy
impact of these alternate approaches to future work.
7. ACKNOWLEDGEMENTS
We would like to thank our anonymous reviewers as well as
Erich Nahum, our shepherd, for their valuable comments. This
research was supported in part by NSF under CNS-1059372 and
CNS-1345226, as well as by an NSERC Canada PGS D scholar-
ship.
8. REFERENCES
[1] App Programming Guide for iOS — Background Execution.
https:
//developer.apple.com/library/prerelease/ios/documentation/
iPhone/Conceptual/iPhoneOSProgrammingGuide/
BackgroundExecution/BackgroundExecution.html.
[2] Apple’s app store has passed 100 billion app downloads.
http://www.theverge.com/2015/6/8/8739611/apple-wwdc-
2015-stats-update.
[3] Background agents for Windows Phone 8.
https://msdn.microsoft.com/en-
us/library/windows/apps/Hh202942(v=VS.105).aspx.
344[4] Conserve windows phone battery life by managing
background apps. http://www.windowscentral.com/conserve-
windows-phone-battery-life-managing-background-apps.
[5] Developer preview - power-saving optimizations. https:
//developer.android.com/preview/features/power-mgmt.html.
[6] ActivityManager.RunningAppProcessInfo documentation.
https://developer.android.com/reference/android/app/
ActivityManager.RunningAppProcessInfo.html.
[7] P. K. Athivarapu, R. Bhagwan, S. Guha, V. Navda,
R. Ramjee, D. Arora, V. N. Padmanabhan, and G. Varghese.
RadioJockey: Mining Program Execution to Optimize
Cellular Radio Usage. In Proc. ACM MobiCom, 2012.
[8] A. Aucinas, N. Vallina-Rodriguez, Y. Grunenberger,
V. Erramilli, K. Papagiannaki, J. Crowcroft, and
D. Wetherall. Staying Online while Mobile: The Hidden
Costs. In CoNEXT, 2013.
[9] N. Balasubramanian, A. Balasubramanian, and
A. Venkataramani. Energy Consumption in Mobile Phones:
A Measurement Study and Implications for Network
Applications. In Proc. ACM IMC, 2009.
[10] X. Chen, N. Ding, A. Jindal, Y. C. Hu, M. Gupta, and
R. Vannithamby. Smartphone energy drain in the wild:
Analysis and implications. In Proc. Sigmetrics, 2015.
[11] E. Cuervo, A. Balasubramanian, D. ki Cho, A. Wolman,
S. Saroiu, R. Chandra, and P. Bahl. MAUI: Making
Smartphones Last Longer with Code Ofﬂoad. In Proc. ACM
MobiSys, 2010.
[12] H. Falaki, D. Lymberopoulos, R. Mahajan, S. Kandula, and
D. Estrin. A First Look at Trafﬁc on Smartphones. In Proc.
ACM IMC, 2010.
[13] H. Falaki, R. Mahajan, S. Kandula, D. Lymberopoulos,
R. Govindan, and D. Estrin. Diversity in Smartphone Usage.
In Proc. ACM MobiSys, 2010.
[14] A. Gember, A. Akella, J. Pang, A. Varshavsky, and
R. Caceres. Obtaining In-Context Measurements of Cellular
Network Performance. In Proc. ACM IMC, 2012.
[15] R. Holly. Checking out Doze and App standby on the
Android M Developer Preview.
http://www.androidcentral.com/checking-out-doze-android-
m-developer-preview.
[16] J. Huang, F. Qian, A. Gerber, Z. M. Mao, S. Sen, and
O. Spatscheck. A Close Examination of Performance and
Power Characteristics of 4G LTE Networks. In Proc. ACM
MobiSys, 2012.
[17] J. Huang, F. Qian, Y. Guo, Y. Zhou, Q. Xu, Z. M. Mao,
S. Sen, and O. Spatscheck. An In-Depth Study of LTE:
Effect of Network Protocol and Application Behavior on
Performance. In ACM SIGCOMM Computer Communication
Review, volume 43, 2013.
[18] J. Huang, F. Qian, Z. M. Mao, S. Sen, and O. Spatscheck.
Screen-off Trafﬁc Characterization and Optimization in
3G/4G Networks. In Proc. ACM IMC, 2012.
[19] J. Huang, Q. Xu, B. Tiwana, Z. M. Mao, M. Zhang, and
P. Bahl. Anatomizing Application Performance Differences
on Smartphones. In Proc. ACM MobiSys, 2010.
[20] M. Martins, J. Cappos, and R. Fonseca. Selectively Taming
Background Android Apps to Improve Battery Lifetime. In
Proc. Usenix ATC, 2015.
[21] F. Qian, Z. Wang, Y. Gao, J. Huang, A. Gerber, Z. Mao,
S. Sen, and O. Spatscheck. Periodic Transfers in Mobile
Applications: Network-wide Origin, Impact, and
Optimization. In Proceedings of the 21st international
conference on World Wide Web, pages 51–60, 2012.
[22] F. Qian, Z. Wang, A. Gerber, Z. M. Mao, S. Sen, and
O. Spatscheck. Proﬁling Resource Usage for Mobile
Applications: a Cross-layer Approach. In Proc. ACM
MobiSys, 2011.
[23] A. A. Sani, Z. Tan, P. Washington, M. Chen, S. Agarwal,
L. Zhong, and M. Zhang. The Wireless Data Drain of Users,
Apps, & Platforms. ACM SIGMOBILE Mobile Computing
and Communications Review, 17(4), 2013.
[24] I. Singh, S. V. Krishnamurthy, H. V. Madhyastha, and
I. Neamtiu. ZapDroid: Managing Infrequently Used
Applications on Smartphones. In Proc. UbiComp, 2015.
[25] J. Sommers and P. Barford. Cell vs. WiFi: On the
Performance of Metro Area Mobile Connections. In Proc.
ACM IMC, 2012.
[26] N. Thiagarajan, G. Aggarwal, A. Nicoara, D. Boneh, and
J. P. Singh. Who Killed my Battery?: Analyzing Mobile
Browser Energy Consumption. In Proceedings of the 21st
international conference on World Wide Web, 2012.
[27] Q. Xu, J. Erman, A. Gerber, Z. Mao, J. Pang, and
S. Venkataraman. Identifying Diverse Usage Behaviors of
Smartphone Apps. In Proc. ACM IMC, 2011.
345