User: 当系统中某个进程超出特定的CPU和内存阈值时，请提供一套针对Ubuntu系统的进程监控和告警方案。
Assistant: 以下是一套针对Ubuntu系统的进程监控和告警方案：

1. 安装和配置监控工具

我们可以使用如下两个常用的监控工具：

- htop：一个类似于top的命令行程序，可以实时监控CPU和内存使用情况。
- nagios：一个专业的监控工具，可设置警报并记录历史数据。

首先，使用以下命令安装htop和nagios：

```
sudo apt-get install htop nagios3 nagios-nrpe-plugin
```

当安装完成后，配置nagios并设置警报阈值。可以参考nagios文档中的说明完成此步骤。

2. 设置脚本

创建一个Python脚本，用于监控特定的进程和资源使用情况。以下是一个简单的脚本示例：

```python
#!/usr/bin/env python

import psutil
import sys

# 配置阈值
CPU_THRESHOLD = 80
MEM_THRESHOLD = 80

# 获取进程ID
pids = psutil.pids()
for pid in pids:
    p = psutil.Process(pid)
    if p.name() == "process_name":
        cpu_percent = p.cpu_percent(interval=1)
        rss, vms = p.memory_info()
        mem_percent = rss / float(psutil.virtual_memory().total) * 100
        if cpu_percent > CPU_THRESHOLD or mem_percent > MEM_THRESHOLD:
            print("CPU: {}%, MEM: {}%, Process:{} (pid {})".format(cpu_percent, mem_percent, p.name(), pid))
            sys.exit(1)

sys.exit(0)
```

这个脚本将会检测特定进程的CPU和内存使用情况，当超出设定的阈值时，将会产生一个警报。在脚本中需要更新CPU_THRESHOLD和MEM_THRESHOLD两个变量，以设置相应的阈值，同时需要将process_name替换为需要监控的进程名。

3. 设置cronjob

现在，将设置一个计划任务来运行Python脚本。使用以下命令编辑cronjob：

```
crontab -e
```

在文件尾部添加以下行：

```
* * * * * /usr/bin/python /path/to/script.py 2>&1 >> /path/to/output.log
```

这行命令将每分钟运行一次脚本，输出到指定的日志文件中。可以根据需求调整计划任务的频率。

4. 设置警报

通过以上步骤，系统将会根据实时进程的资源使用情况产生一个警报。我们可以使用nagios来监控这个警报，并发送电子邮件通知。需要配置nagios告警插件本地代理(nagios-nrpe-plugin)以及邮件通知设置(nagios3)。这些步骤可以参考nagios文档进行设置。

以上就是一套针对Ubuntu系统的进程监控和告警方案。