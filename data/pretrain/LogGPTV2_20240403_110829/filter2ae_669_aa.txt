**作者： 天融信阿尔法实验室**  
**原文链接：**
## 一、前言
在一次`XSS`测试中,往可控的参数中输入`XSS
Payload`,发现目标服务把所有字母都转成了大写,假如我输入`alert(1)`,会被转成`ALERT(1)`,除此之外并没有其他限制,这时我了解到`JavaScript`中可以执行无字母的语句,从而可以绕过这种限制来执行`XSS
Payload`。
## 二、JS基础
先执行两段JS代码看下
    ([][[]]+[])[+!+[]]+([]+{})[+!+[]+!+[]]
    ([][[]]+[])[+!!~+!{}]+({}+{})[+!!{}+!!{}]
两段js代码都输出了字符串"nb",下面来分析下原因.
#### JS运算符的优先级
下面的表将所有运算符按照优先级的不同从高（20）到低（1）排列。
优先级 | 运算类型 | 关联性 | 运算符  
---|---|---|---  
20 | 圆括号 | n/a | ( … )  
19 | 成员访问 | 从左到右 | … . …  
19 | 需计算的成员访问 | 从左到右 | … [ … ]  
19 | new (带参数列表) | n/a | new … ( … )  
19 | 函数调用 | 从左到右 | … ( … )  
19 | 可选链（Optional chaining） | 从左到右 | ?.  
18 | new (无参数列表) | 从右到左 | new …  
17 | 后置递增(运算符在后) | n/a | … ++  
17 | 后置递减(运算符在后) | n/a | … --  
16 | 逻辑非 | 从右到左 | ! …  
16 | 按位非 | 从右到左 | ~ …  
16 | 一元加法 | 从右到左 | \+ …  
16 | 一元减法 | 从右到左 | \- …  
16 | 前置递增 | 从右到左 | ++ …  
16 | 前置递减 | 从右到左 | \-- …  
16 | typeof | 从右到左 | typeof …  
16 | void | 从右到左 | void …  
16 | delete | 从右到左 | delete …  
16 | await | 从右到左 | await …  
15 | 幂 | 从右到左 | … ** …  
14 | 乘法 | 从左到右 | … * …  
14 | 除法 | 从左到右 | … / …  
14 | 取模 | 从左到右 | … % …  
13 | 加法 | 从左到右 | … + …  
13 | 减法 | 从左到右 | … - …  
12 | 按位左移 | 从左到右 | … > …  
12 | 无符号右移 | 从左到右 | … >>> …  
11 | 小于 | 从左到右 | …  …  
11 | 大于等于 | 从左到右 | … >= …  
11 | in | 从左到右 | … in …  
11 | instanceof | 从左到右 | … instanceof …  
10 | 等号 | 从左到右 | … == …  
10 | 非等号 | 从左到右 | … != …  
10 | 全等号 | 从左到右 | … === …  
10 | 非全等号 | 从左到右 | … !== …  
9 | 按位与 | 从左到右 | … & …  
8 | 按位异或 | 从左到右 | … ^ …  
7 | 按位或 | 从左到右 | …|...  
6 | 逻辑与 | 从左到右 | … && …  
5 | 逻辑或 | 从左到右 | …||...  
4 | 条件运算符 | 从右到左 | … ? … : …  
3 | 赋值 | 从右到左 | … = …  
2 | yield* | 从右到左 | yield* …  
1 | 展开运算符 | n/a | ... …  
0 | 逗号 | 从左到右 | … , …  
以这个优先级对JS代码`([][[]]+[])[+!+[]]+([]+{})[+!+[]+!+[]]`来进行分解 |  |  |  
先来看第一个分解的JS`([][[]]+[])`, 在()内[]的优先级高,会先处理,控制台执行看一下
#### JS类型转换
从分解的第一段js可以看到输出了字符串"undefined",这里就涉及到类型转换。在JS中当操作符两边的操作数类型不一致或者不是原始类型,就需要类型转换。JS有5种原始类型,`Undefined`、`Null`、`Boolean`、`Number`
和 `String`。
  * 乘号、除号/、减号-,肯定是做数学运算,就会转换成Number类型的。
  * 加号+,有可能是字符串拼接,也可能是数学运算,所以可能转化成Number或String。
  * 符号!,表示取反,会转换成Boolean类型。
  * 符号~,把操作数转成Number类型,取负运算在减1。