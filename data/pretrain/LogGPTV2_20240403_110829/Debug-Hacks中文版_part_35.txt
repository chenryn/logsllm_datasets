-strace显示的地址
---
## Page 281
上，再传给 grep、less 等（以 bash 为例）。
strace 的输出为标准错误输出，因此可以像下面这样将显示内容输出到标准输出
如下加上-0选项可以将显示内容输出到文件中。
其他方便的用法
且能显示④、③两处出现的错误。按 Ctrl-C 键即可结束程序。
系统调用要用到-p 选项，其结果如下。这样就能跟踪 st2的系统调用，而
首先执行上面这个 st2 程序。该程序不会结束，会一直运行下去。跟踪该程序的
 $ strace -o output.log cormand
nanosleep({3, 0), 
rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
rt_sigaction(SIGCHLD, NULL, [SIG_ DFL}, 8) = 0
rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0
write(l, "Error!\n", 7)
open("/etc/shadow", 0_RDONLY)
nanosleep({3, 0}; {3, 0])
rt_sigaction(SIGCHLD, NULL, 
rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0
write(l, "Error!\n", 7)
open("/etc/shadow", 0_RDONLY)
restart_syscall() = 0
Process 23030 attached - interrupt to quit 
$ strace -p 'pidof st2'
rt_sigprocmask(SIG_SETMASK, [1, NULL, 8) = 0
return EXIT_SUCCESS;
while(1){
sleep(3);
else
if (fp = NULL)
fp = fopen("/etc/shadow", "r"); 
FILE *fp;
close(fp);
printf("Error!\n");
{SIG_DFL}, 8) =
www.TopSage.com
I
》
= -1 EACCES (Permission denied)
: -1 EACCES (Permission denied)
HACK#43 使用 strace 寻找故障原因的线索丨 263
7
?
270
---
## Page 282
271
本 hack 讲述了利用跟踪系统调用的 strace 命令在故障发生时寻找线索的方法。
系统调用的执行时刻可以用-t或-tt选项显示。两者的不同点是，-t以秒为单位，
进程执行 fork()之后，要跟踪fork()之后的进程，可以使用-f 选项。
264|第6章高手们的调试技术
样学习汇编语言”中用到的测试程序。
样将源代码、文件名及行数与汇编代码对应显示。下例中用到了“HACK#13
objdump 的选项-S、-l十分方便。如果二进制文件中带有调试信息，可以像下面这
#
总结
-tt以毫秒为单位。
$ strace -tt command
 $ strace -f command
$ gcc -Wall -00 -g assemble.c -0 assemble
$ strace -t command
 $ strace command 2>&1 | grep map
/home/user/assemble.c:24
80483dd:
/home/user/assemble.c:18
080483cc :
$ objdump -Sl --no-show-raw-insn assemble
804840a:
i = 0xabcd;
unsigned int i = 0;
事半功倍的选项。
本 hack 介绍在利用 objdump 处理带有调试信息的二进制文件时，能让工作 
objdump的方便选项
movl $0x0,-0x10(%ebp)
movl $0xabcd, -0x10(%ebp)
www.TopSage.com
—大和一洋
---
## Page 283
/home/user/assemble.c:29
/home/user/assemble.c:30
/home/user/assemble.c:29
804841a:
/home/user/assemble.c:27
8048418:
8048411:
/home/user/assemble.c:26
8048441:
804843a:
/home/user/assemble.c:35
8048437:
8048435:
8048432:
/home/user/assemble.c:33
804842d:
/home/user/assemble.c:32
804842b:
8048427:
8048423:
8048421:
i = func_pointer();
if (i != 0x1234)
for (i=0; i
i;
je
cmpl $0x0,-0x10(%ebp)
addl  $0x1,-0x10(%ebp)
jmp
movl $0x0,-0x10(%ebp)
movl
je8048427 
mov
mov
cmpl $0x1234,-0x10(%ebp)
call
8048423 
8048427 
8048452 
%eax, -0x10(%ebp)
-0x8(%ebp),%eax
$0x0,-0x10(%ebp)
*%eax
www.TopSage.com
HACK#44 objdump 的方便选项 | 265 
272
---
## Page 284
273
为参考。还有个 addr2line 命令，能输出与 objdump 的-l 选项相同的信息。
项就可以洞察一切，特别是对优化过的二进制文件，结果更是不着边际，只能作
本 hack 介绍了使用 objdump 时的一些让工作事半功倍的选项，但并不是靠这些选
总结
虽然不是完全正确，但十分方便。
汇编语言和源代码总会发生一些偏差，
这种显示方式需要使用调试信息，因此用GCC 编译时必须加上-g选项。而且,
266 1第6章高手们的调试技术
1+：
8048465:
8048462:
8048461:
8048460:
804845d:
/home/user/assemble.c:39
8048458:
/home/user/assemble.c:38
8048456:
8048452:
804844e:
/home/user/assemble.c:35
804844b:
8048446:
8048443:
/home/user/assemble.c:36
 return 0;
for (i=0; i
-0x4(%ecx),%esp
$0x24,%esp
$0x1,-0x10(%ebp)
ebp
secx
$0xe,-0x10(%ebp)
www.TopSage.com
，如上文中的 while语句出现的两个地方。
---
## Page 285
#45
HACK
运行结果如下所示。
示源代码行号等，编译时添加了-g选项。
malloc()之后没有执行free(），是典型的内存泄漏。另外，为了在Valgrind 中显
下面利用程序testl说明一下内存泄漏的检测方法，源代码为testl.c。test1在
检测内存泄漏
的命令。
此外，检测内存非法使用（memcheck）为默认启用的选项，因此也可以只输入下面
序的文件名。
存非法使用的检测方法。基本的使用方法如下所示。这里program为要检查的程
选项，也不需要连接特别的函数库。本hack介绍Valgrind最为典型的用途一内
线程的冲突等。Valgrind的特征之一就是检测对象程序在编译时无须指定特别的
Valgrind能检测出内存的非法使用，对缓存、堆进行评测（profile），检测POSIX
Valgrind是什么
$valgrind --leak-check=yes program
$valgrind --tool=memcheck --Leak-check=yes program
=3125=malloc/free:1allocs,0 frees,10 bytes allocated.
=3125=ERRORSUMMARY:0errors from0contexts(suppressed:4from1)
$valgrind testl
3125=malloc/free:inuse at exit:10 bytesin1blocks.
int main(void)
[test1.c]
returnEXIT_sUCCESS;
char *p=malloc(10);
本hack介绍程序动态分析工具Valgrind的基本使用方法。
/*不释放内存就结束*/
/*内存分配*/
www.TopSage.com
三
274
---
## Page 286
275
执行了写入操作。
用 Valgrind 检查该程序，输出结果如下，可知程序对分配的内存区域之外的地址
接下来介绍访问未分配地址的 bug 的检测方法，比如下面的 test2.c。
检测对非法内存地址的访问
分配的内存泄漏了。对比源代码，可知它正确地检测出了内存泄漏。
信息显示在(B)中，据此可知地址 Bx400489（test1.c的第6行）执行的 malloc()
Valgrind 的输出中，首先要注意的就是 malloc/free 的次数(A)。malloc 执行了
运行都会显示不同的值。所有行都有这个数字，因此十分醒目。这个信息并不是
268|第6章高手们的调试技术
次，而 free运行了O次。LEAK SUMMARY(C)中也显示了 definitely lost。更详细的
很重要。
上面输出的=3125=中的数字部分 3125，是运行的 Valgrind 的进程 ID，因此每次
int main(void)
[test2.c]  
==3125== To see them, rerun with: --show-reachable=yes
==3125= Reachable blocks (those to which a pointer was found) are not shown.
=3125==
-3125
-3125==
=3125==
=3125= LEAK SUMMARY:
3125=
3125=
3125==
=3125= 10 bytes in 1 blocks are definitely lost in loss record 1 of 1 -— (B)
=3125==
==3125== checked 65,416 bytes.
=3125= searching for pointers to I not-freed blocks.
=3125 For counts of detected errors, rerun with: -v
return EXIT_SUCCESS;
free(p);
p[10] = l; 
char *p = malloc(10);
 still reachable: 0 bytes in 0 blocks.
 definitely lost: 10 bytes in 1 blocks
possibly lost: 0 bytes in 0 blocks.
by Ox400489: main (test1.c:6)
at Ox4A05809: malloc (vg_replace_malloc.c:149)
suppressed: 0 bytes in 0 blocks.
www.TopSage.com
/*向已分配的地址(10字节)外写入*/
/*分配10字节*/
6
---
## Page 287
Valgrind 也能检测出对已释放区域的内存访问，以 test4.c 为例测试--下。
访问已释放的区域
编译上述代码后用 Valgrind 检查，能得到下述结果。
还可以检测出对未初始化区域的读取操作，这里用test3.c为例测试一下。
读取未初始化区域
int main(void)
[test4.c]
-3941=
=3941==
=3941==
=-3941== Syscall param exit_group(exit_code) contains uninitialised byte(s)
int main()
[test3.c]
+ 11
=3438=
=3438=
==3438= Address 0x4C3603A is 0 bytes after a block of size 10 alloc'd
=3438= at 0x4004D6: main (test2.c:7)
=3438= Invalid write of size 1
int a = *x + 1;
free(x);
int *x = malloc(sizeof(int));
return a;
free(x);
int a = *x + 1; 
int *x = malloc(sizeof(int));
at 0x4A05809: malloc (vg_replace_malloc.c:149)
by Ox359DE1D8AA: (below main) (in /lib64/libc-2.5.so)
at 0x359DE948CF: _Exit (in /lib64/libc-2.5.s0)
by 0x4004c9: main (test2.c:6)
by 0x359DE32D04: exit (in /lib64/libc-2.5.s0)
www.TopSage.com
/*访问已释放的内存区域*/
/*释放内存*/
/*分配内存*/
*不初始化就使用分配的内存*/
/*分配内存大小为int的大小*/
HACK#45 Valgrind 的使用方法（(基本篇）
1269
276
---
## Page 288
277
非法栈操作
编译上述代码并用 Valgrind 检查，就能指出问题。
下面的test6.c 向比栈指针更低的地址写入数据。