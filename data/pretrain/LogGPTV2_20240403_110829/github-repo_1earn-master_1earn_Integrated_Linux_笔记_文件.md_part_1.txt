# 文件
`Linux 的哲学就是一切皆文件`
> 注 : 笔记中拓扑图 xmind 源文件在其图片目录下
---
## 大纲
* **[文件类型](#文件类型)**
* **[文件权限](#文件权限)**
* **[目录结构](#目录结构)**
  * [/bin](#bin)
  * [/boot](#boot)
  * [/dev](#dev)
  * [/etc](#etc)
  * [/home](#home)
  * [/lib](#lib)
  * [/lost+found](#lostfound)
  * [/media](#media)
  * [/opt](#opt)
  * [/proc](#proc)
  * [/root](#root)
  * [/run](#run)
  * [/sbin](#sbin)
  * [/selinux](#selinux)
  * [/srv](#srv)
  * [/sys](#sys)
  * [/tmp](#tmp)
  * [/usr](#usr)
  * [/var](#var)
* **[inode](#inode)**
---
## 文件类型
* 普通文件 : 例如图片、文本、音乐、可执行程序等
* 目录文件 : 文件夹，例如/home、/root
* 链接文件 : 当创建一个已存在文件的符号链接时，系统就创建一个链接文件，这个链接文件指向已存在的文件
* 设备文件 : 例如鼠标、键盘、网卡、光驱
* 命名管道(FIFO) : 一种特殊类型的文件，linux系统下，进程之间通信可以通过该文件完成
---
## 文件权限
- 权限类型:读、写、执行
- 权限表示方式:模式位
```
drwxr-xr-x  11 root root 1111 Sep 11 11:11  test
| |  |  |   |   |   |     |       |          |__文件名
| |  |  |   |   |   |     |       |__最后修改时间
| |  |  |   |   |   |     |__文件大小
| |  |  |   |   |   |__文件拥有者 GID
| |  |  |   |   |__文件拥有者 UID
| |  |  |   |__链接数
| |  |  |__系统中其他用户权限(O)
| |  |__文件所有者所在组其他用户的权限(G)
| |__文件拥有者的权限(U)
|文件类型:d 为文件夹-是文件
```
**文件类型**
* `d` 文件夹，可以代表目录或文件
* `l` 链接文件，就是类似 Windows 底下的快捷方式
* `-` 文件，就是一般类型的文件
* `b` 块设备，就是一些储存数据，以提供系统存取的接口设备，简单的说就是硬盘
* `s` 套接字
* `c` 字符设备，即是一些串行端口的接口设备，例如键盘、鼠标等
* `p` 命名管道
**权限的数字表示法**
```
rwx r-x r-x
||| ||| |||
111 101 101
 |   |   |
 7   5   5
```
**权限的特殊属性**
* SUID
    ```bash
    -rwsr-xr-x
       |
      SUID 程序
    ```
    当 s 出现在文件拥有者的 x 权限上时,如 `/usr/bin/passwd` 这个文件的权限为 -rwsr-xr-x,此时就被称为 SET UID 简称 SUID.SUID 对于一个文件有什么限制和功能呢？
    * SUID 权限仅对二进制可执行文件有效
    * 执行者对于该文件具有 x 的权限
    * 本权限仅在执行该文件的过程中有效
    * 执行者将具有该文件拥有者的权限
    例如普通用户用 passwd 修改自己的命令，实际上最终更改的是 `/etc/passwd` 文件. 此文件时用户管理配置文件,只有 root 权限才能更改.
    既然是 root 用户才拥有此权限，为什么我们可以通过 passwd 命令来修改密码呢，那这就要归功于 passwd 设置了 suid 权限位了.普通用户通过执行 passwd 命令，临时拥有 root 权限，间接的修改 `/etc/passwd`，以达到修改自己密码的权限.
* SGID
    当 s 出现在目录或文件所属群的 x 权限上时，此时就称为 SET GID 简称 SGID,那 SGID 对文件和目录分部有哪些功能呢？
    * SGID 对目录
        使用者若对于此目录具有 r 与 x 的权限时，该使用者能够进入此目录
        使用者在此目录下的群组将会变成该目录的群组
        若使用者在此目录下具有 w 的权限(可以新建文件)，则使用者所创建的新文件，该新文件的群组与此目录的群组相同
    * SGID 对文件
        SGID 对二进制可执行文件有效
        程式执行者对于该文件来说，需具备 x 的权限
        执行者在执行的过程中将会获得该文件群组的支援(用于改文件群组的权限)
* SBIT(粘滞位)
    粘滞位表示，只有文件所有者才能删除该文件，即使组权限允许该文件可以删除。通常，在 /tmp 这样的通用或协作目录上，此设置最有意义。
    当 t 出现在目录其他用户的 x 权限上时，此时就称为 Sticky Bit 简称 SBIT,那 SBIT 有哪些限制和作用呢?
    仅对目录有效，对文件无效
    当使用者在该目录下建立文件或目录时(有权限的情况下)，仅自己与 root 才有权力删除新建的目录或文件
    我们知道 `/tmp` 目录是这样的权限
    ```bash
    drwxrwxrwt.  13 root root  4096 10月 24 22:16 tmp
    ```
    现在我们来验证下，先用 root 账号在 tmp 文件中创建一个文件 test,然后用 openstack(其他账号)进入该目录,删除 test 文件，看看发生什么情况
    我们看到这样是不能删除文件的.因为 `/temp` 目录有 SBIT 权限.
* 配置 SUID、SGID、Sticky 属性
    ```bash
    chmod u+s test_file    # 给文件增加 SUID 属性
    chmod g+s test_dir     # 给目录增加 SGID 属性
    chmod o+t test_dir     # 给目录增加 Sticky 属性
    ```
* umask
    umask 会屏蔽（或 “阻止”）默认权限集中的位，以定义文件或目录的权限。例如，umask 输出中的 2 表示它至少在默认情况下阻止了文件的“写入” 位。
    使用不带任何参数的 umask 命令可以使我们看到当前的 umask 设置。共有四列：第一列为特殊的suid、sgid 或粘滞位而保留，其余三列代表属主、组和其他人的权限。
    ```bahs
    > umask
    0022
    > umask -S
    u=rwx,g=rx,o=rx
    ```
**linux 下删除一个文件需要的权限**
要删除一个文件，对该文件所在目录需要拥有 write 和 execute 权限，对该文件本身却没有 write 权限要求.
**文件系统类型**
* ext : 第一个专门针对 liunx 的文件系统
* ext2 : 为解决 ext 文件系统缺陷设计的高性能、可扩展的文件系统
* ext3 : 日志文件系统，ext2 的升级版
* ext4 : Ext4 提供了更为可靠性的功能
* swap : Linux 的交换分区
* NFS : Linux 的网络文件系统
* smb : 支持 smb 协议的网络文件系统
* vfat : 与 windows 系统兼容的 linux 文件系统
* ntfs : windows NT 所采用的独特的文件系统结构
* proc : Linux 操作系统中的一种基于内存的伪文件系统
* xfs : 由 SGI 开发的一个全64位、快速、安全的日志文件系统
---
## 目录结构
Linux 文件系统的结构层次鲜明，延展开就是个树形结构，最顶层是其根目录：
![](../../../../assets/img/Integrated/Linux/笔记/文件/1.png)
### /
根目录，位于 Linux 文件系统目录结构的顶层
### /bin
bin 是 Binary 的缩写, 这个目录存放着最经常使用的命令 (ls,cat,mkdir 等).
### /boot
这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件.
**/boot/grub**
开机设定相关
---
### /dev
dev 是 Device(设备)的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的.
**/dev/null**