### MetaSploiter and Armitage Compatibility

**Charles Smith, 5/22/2012**

MetaSploiter includes a `CheckForArmitage` method to determine if Armitage is connected to the RPC server. If Armitage is connected, you can still use MetaSploiter, but you must ensure that no one else uses Armitage while your application is running.

```perl
print "Checking for Armitage... ";
my $arm = $metaSploiter->CheckForArmitage();
if ($arm == -1) { die($metaSploiter->GetLastError()); }
if ($arm == 0) { print "Not using Armitage.\n"; }
if ($arm == 1) { 
    print "WARNING: ARMITAGE DETECTED.\n";
    print "  Armitage and other clients cannot be used on the same session at the same time. \n";
    print "  When using MetaSploiter, do not interact with the session through Armitage, or the client may fail.\n"; 
}
```

### Post-Exploitation Nirvana: Launching OpenDLP Agents over Meterpreter Sessions

#### Overcoming Interaction Issues

To address the challenges of interacting with meterpreter sessions using MetaSploiter and the RPC, a Metasploit post module was developed. This module should be installed in the `windows/gather/opendlp` directory on the Metasploit system. Additionally, the `MetaPostModule` Perl module is installed with the OpenDLP web application. This module overrides MetaSploiter and adds specific functionality for calling our post module.

#### Initial Approach and Improvements

Our initial approach involved creating a post module and executing it via the `module.execute` RPC command. While this worked, it did not provide a way to view status messages. We considered modifying Metasploit to add a new RPC command for output, but this solution was not clean. Instead, we decided to execute the post module from a new console over RPC, which allowed us to download files directly from the target to the OpenDLP system.

#### OpenDLP Post Module Actions

The OpenDLP post module supports six actions:

- **DEPLOY**: Creates a directory, uploads OpenDLP files, executes the self-extracting archive, writes the configuration file, installs and starts the OpenDLP service.
- **START**: Starts the OpenDLP service.
- **STOP**: Stops the OpenDLP service.
- **DELETE**: Uninstalls the OpenDLP service.
- **REMOVE**: Removes the installation files and directory.
- **READFILE**: Reads a file on the target system and prints it to the console.

#### Deployment Process

To deploy, set the following properties:

- **ModuleName**: Should be `"windows/gather/opendlp"`.
- **ConfigString**: Base64-encoded string of the OpenDLP configuration created by OpenDLP in `start-verify.html`.
- **SourcePath**: Path to the OpenDLP files to upload from the Metasploit box.
- **RemotePath**: The installation directory on the target.
- **SessionId**: The session to which you are deploying.

Ensure the module exists on Metasploit by calling `CheckForModule()` before deploying.

```perl
my $metaPostModule = MetaPostModule->new();
$metaPostModule->MetaLogin("192.168.1.109", 55552, "msf", "f00bar", 1);
$metaPostModule->SetModuleName("windows/gather/opendlp");
if ($ret_code = $metaPostModule->CheckForModule()) {
    die "Module \"windows/gather/opendlp\" is not installed on the Metasploit host.";
}

my $configString = encode_base64("OpenDLP-generated configuration string");
$metaPostModule->SetSourcePath("c:/metasploit/OpenDLP_files"); 
$metaPostModule->SetRemotePath("c:/program files/opendlp"); 
$metaPostModule->SetConfigString($configString); 
$metaPostModule->SetSessionId(5); 
$ret_code = $metaPostModule->DeployOpenDLP();
LogMe($metaPostModule->GetCommandResponse()); #log the full results
if ($ret_code) {
    die "Failed to deploy OpenDLP: " . $metaPostModule->GetLastError();
} else {
    print "Successfully deployed OpenDLP.\n";
}
```

#### File Retrieval and Management

Files containing PII can now be retrieved directly without saving them on the Metasploit box. To read a remote file:

```perl
my $ret_code = $postMod->ReadFile("c:\\helloworld.txt");
if ($ret_code) { die "Error: " . $postMod->GetLastError(); }
print $postMod->GetFileData();  
```

#### Web Page Updates for Metasploit Bridge

To support the Metasploit bridge, several web pages were updated or added. Below is a brief overview of the changes:

- **profiles.html**: Added fields for Metasploit Host, Port, User, Password, Path to OpenDLP files, Latency, and Timeout.
- **startscan.html**: Created a new page to list existing sessions and select which ones to deploy to.
- **start-verify.html**: Handles deployment over the Metasploit bridge, loads configuration parameters, and outputs detailed deployment info.
- **viewresults.html**: Verifies session activity and IP address, re-associates scan results with active sessions.
- **download_file.html**: Directly downloads files to the user, bypassing the Metasploit box.
- **deletescan.html**: Allows multiple scans to be deleted simultaneously, including incomplete scans.
- **Metasploit->Manage Agents**: Manages agents outside the normal workflow, allowing start, stop, and uninstall operations.

#### Resources and Contact Information

- **Source Code and Binaries**: http://opendlp.googlecode.com
- **VirtualBox VM**: Available for download.
- **Contact**:
  - Michael Baucom: PI:EMAIL, Twitter: @m_baucom
  - Charles Smith: PI:EMAIL
  - Andrew Gavin: PI:EMAIL, Twitter: @OpenDLP, @andrewgavin

This document provides a comprehensive guide to integrating and using the OpenDLP post module with Metasploit, enhancing post-exploitation capabilities.