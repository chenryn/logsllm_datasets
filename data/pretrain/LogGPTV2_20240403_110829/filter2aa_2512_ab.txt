they've been consumed by someone else. I have not however tried this in team server mode, though.
Charles Smith, 5/22/2012
 MetaSploiter includes a CheckForArmitage method to 
determine if Armitage is connected to the RPC server
◦ If it is connected to an Armitage server, you can still use 
MetaSploiter,  but you must ensure no-one else uses Armitage
while your application is running
◦
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
22
print "Checking for Armitage... ";
my $arm = $metaSploiter->CheckForArmitage();
if ($arm == -1) { die($metaSploiter->GetLastError()); }
if ($arm == 0) { print "Not using Armitage.\n"; }
if ($arm == 1) { 
print "WARNING: ARMITAGE DETECTED.\n";
print "  Armitage and other clients cannot be used on the same \n";
print "  session at the same time. \n";
print "  When using MetaSploiter, do not interact with \n";
print "  the session through Armitage, or the client may fail.\n"; 
}
 Developed in order to overcome the issues 
with interacting with meterpreter sessions 
using MetaSploiter and the RPC
◦ Metasploit post module to be installed on the 
Metasploit system, in windows/gather/opendlp
Metasploit system, in windows/gather/opendlp
◦ MetaPostModule perl module installed with 
OpenDLP web application
 Overrides MetaSploiter, but has additional functionality 
specific to calling our post module
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
23
 Our first pass was to create a Post Module 
and execute via the “module.execute” RPC 
command
◦ Worked great, but no way to view status messages
◦ Considered modifying Metasploit to provide a 
◦ Considered modifying Metasploit to provide a 
mechanism to get the output via a new RPC 
command, but it was not clean
◦ Decided to move to a new console and execute the 
post module from there over RPC
 By using the console, we were able to download files 
from the target directly to the OpenDLP System
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
24
 The OpenDLP post module may execute six different 
actions, detailed below:
 DEPLOY –
 Creates a directory on the target system.
 Uploads the OpenDLP files.
 Executes the self-extracting archive.
 Writes the configuration file.
 Installs the OpenDLP service.
 Installs the OpenDLP service.
 Starts the OpenDLP service.
 START – Starts the OpenDLP service on the target system.
 STOP – Stops the OpenDLP service on the target system.
 DELETE – Uninstalls the OpenDLP service from the target 
system.
 REMOVE – Removes the installation files and directory from the 
target system
 READFILE – Reads a file on the target system and prints it to the 
console
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
25
 MetaPostModule creates a new console and 
executes the post module action in the console
◦ There are no visible interactions with the meterpreter 
session
 To deploy, set the following properties:
◦ ModuleName – should be to “windows/gather/opendlp”
◦ ModuleName – should be to “windows/gather/opendlp”
◦ ConfigString – Base64-encoded string of the OpenDLP 
configuration created by OpenDLP in start-verify.html
◦ SourcePath –Path to the OpenDLP files to upload from 
the Metasploit box
◦ RemotePath – The installation directory on the target
◦ SessionId – The session to which you are deploying
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
26
 Ensure module exists on Metasploit by calling 
CheckForModule
CheckForModule
CheckForModule
CheckForModule()()()()
 Deploy via the DeployOpenDLP
DeployOpenDLP
DeployOpenDLP
DeployOpenDLP()()()()
my $metaPostModule = MetaPostModule->new();
$metaPostModule->MetaLogin("192.168.1.109", 55552, "msf", "f00bar", 1);
$metaPostModule->SetModuleName("windows/gather/opendlp");
if ($ret_code = $metaPostModule->CheckForModule() ) {
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
27
if ($ret_code = $metaPostModule->CheckForModule() ) {
die "Module \"windows/gather/opendlp\" is not installed on the Metasploit host.";  
}     
my $configString = encode_base64("OpenDLP-generated configuration string");
$metaPostModule->SetSourcePath("c:/metasploit/OpenDLP_files"); 
$metaPostModule->SetRemotePath("c:/program files/opendlp"); 
$metaPostModule->SetConfigString($configString); 
$metaPostModule->SetSessionId(5); 
$ret_code = $metaPostModule->DeployOpenDLP();
LogMe($metaPostModule->GetCommandResponse()); #log the full results
if ($ret_code) {
die "Failed to deploy OpenDLP: " . $metaPostModule->GetLastError();
} else {
print "Successfully deployed OpenDLP.\n";
}
 Files containing PII can now be retrieved directly 
◦ It is no longer necessary to save them on the Metasploit 
box as it is with the MetaSploiter module
 To get the contents of a remote file:
my $ret_code = $postMod->ReadFile("c:\\helloworld.txt");
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
28
if ($ret_code) { die "Error: " . $postMod->GetLastError(); }
print $postMod->GetFileData();  
 To add support for the Metasploit bridge to 
OpenDLP, many of the web pages needed to 
be changed or updated, and several new 
pages were added as well. 
The following slides give a brief overview of the 
files that were changed, why they were 
changed, and screen shots to show the 
changes.
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
29
 profiles.html
◦ Added the following fields necessary to login to 
Metasploit and use the RPC bridge:
 Metasploit Host and Port 
Metasploit Host and Port 
Metasploit Host and Port 
Metasploit Host and Port –Metasploit RPC server
 Metasploit User and Password 
Metasploit User and Password 
Metasploit User and Password 
Metasploit User and Password – RPC Login credentials
 Path to OpenDLP files 
Path to OpenDLP files 
Path to OpenDLP files 
Path to OpenDLP files – Location on Metasploit box 
where the OpenDLP installation files are located
 Metasploit Latency 
Metasploit Latency 
Metasploit Latency 
Metasploit Latency – Time in milliseconds spent 
between polling meterpreter for more results
 Metasploit Timeout
Metasploit Timeout
Metasploit Timeout
Metasploit Timeout - Time in seconds to wait for a 
response, before giving up
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
30
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
31
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
32
 startscan.html
◦ A Windows Agent Scan requires manual additions of 
the IP addresses to deploy to in your profile
◦ Deployment via Metasploit uses sessions that can 
change as new boxes are popped, or if Metasploit is 
stopped and reloaded 
stopped and reloaded 
 Created a new page that lists the existing sessions and 
allows you to choose which sessions to deploy to
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
33
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
34
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
35
 start-verify.html
◦ Appears the same as before, but behind the scenes 
this is where all the code for deployment over the 
Metasploit bridge takes place
◦ Metasploit configuration parameters are loaded 
from the database (Metasploit RPC host, port, login, 
from the database (Metasploit RPC host, port, login, 
password, etc)
◦ Deploys either to a Meterpreter-based bridge or a 
post-module-based bridge depending on the scan 
type 
◦ Detailed deployment info is output
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
36
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
37
 viewresults.html
◦ Unlike IP addresses, Meterpreter session ids can 
and do change 
◦ Verifies that the session used for the results is still 
active and the IP address matches the address 
saved in the database
saved in the database
 If the session is different, an error message pops up, 
and you can follow the instructions to re-associate the 
scan result with a currently active session
◦ The database is updated and you can view the 
results
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
38
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
39
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
40
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
41
 download_file.html
◦ MetaSploiter downloads files to the Metasploit box 
instead of the user
 The path used is the “Path to Metasploit files” saved in 
the profile, plus the profile name, session, and IP 
address
address
◦ The OpenDLP Post module implementation does not 
have this restriction.
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
42
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
43
 deletescan.html
◦ Modified to make deleting scans more convenient
◦ Multiple scans can be deleted at the same time, 
using checkboxes instead of radio buttons.
◦ Incomplete scans may be deleted (this is useful if 
you have failed deployments or if you stopped and 
you have failed deployments or if you stopped and 
uninstalled a deployment before it was finished)
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
44
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
45
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
46
 “Metasploit->Manage Agents”
◦ Allows you to start, stop, and uninstall agents 
outside of the normal OpenDLP workflow
◦ If you start a scan but specified incorrect 
credentials for the OpenDLP server in your profile, 
you can manually stop the scan
you can manually stop the scan
◦ stop and uninstall all running OpenDLP clients in a 
single step
◦ If an error occurs when removing the service or 
installation directory you can go back later and try 
again manually
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
47
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
48
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
49
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
50
 http://opendlp.googlecode.com
◦ Source Code and Binaries
◦ VirtualBox VM
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
51
Michael Baucom
◦
PI:EMAIL
◦
Twitter: @m_baucom
Charles Smith 
◦
PI:EMAIL
◦
PI:EMAIL
Andrew Gavin
◦
PI:EMAIL
◦
Twitter: @OpenDLP
◦
Twitter: @andrewgavin
Post-Exploitation Nirvana:Launching OpenDLP Agents over Meterpreter Sessions
52