The overall finite state machine (FSM) is relatively straightforward. Given the critical role of primitive FSMs (pFSMs) in our analysis, it is pertinent to ask: Can a few pFSMs model the majority, if not all, of the studied data? Our analysis reveals that only three types of pFSMs are required to model the full range of studied vulnerabilities, including stack buffer overflow, integer overflow, heap overflow, input validation vulnerabilities, and format string vulnerabilities.

### Object Type Check
This predicate verifies whether the input object is of the type on which the operation is defined. In many cases, performing an operation on an object of an incorrect type results in a fail-secure state [20], meaning the operation fails without compromising security. For example, the object of a ping operation should be an IP address or a hostname. The command "ping /etc/passwd" is meaningless and will result in an error message "unknown host /etc/passwd." However, as seen in examples, failure in object type checks can be exploited by attackers. For instance, rwalld (see Figure 6) does not check whether the file type is a terminal or non-terminal file, and Sendmail (see Figure 3) does not verify whether the input represents an integer or a long integer.

### Content and Attribute Check
This predicate verifies whether the content and attributes of the object meet the required security guarantees. Examples include:
1. IIS filename decoding (Figure 7), where the program should ensure the request does not contain the substring “../”.
2. The system should check for embedded format directives in the input to prevent format string vulnerabilities (#1480).
3. GHTTPD (#5960) should verify that the length of the input string is less than 200 bytes.

### Reference Consistency Check
This predicate verifies whether the binding between an object and its reference is maintained from the time the object is checked until the operation is applied. Examples include the return address referring to the parent function code, a function pointer referring to a function code, and a filename referring to a file. As shown in the FSM models, several conditions may violate reference consistency, such as stack smashing (#5960), signed integer overflow (Figure 3), heap overflow (Figure 4), format string (#1480), and file race condition (Figure 5).

The pFSMs representing these three generic predicates are depicted in Figure 8, which illustrates a typical operation (P) encompassing the three predicates. While not all predicates are involved in every operation, the three suffice to model all the studied vulnerability classes. With the three types of predicates defined, the following lemma is stated. The proof is straightforward and provided in [21].

**Lemma:**
1. To ensure the security of an operation, the predicates (represented by pFSMs) constituting the operation must be correctly implemented.
2. To thwart an exploit consisting of a sequence of vulnerable operations, it is sufficient to secure one of the operations in the sequence.

### Types of pFSMs
| Type of pFSM | Description |
|--------------|-------------|
| Object Type Check | Verifies the type of the input object. |
| Content and Attribute Check | Ensures the content and attributes meet security requirements. |
| Reference Consistency Check | Verifies the binding between an object and its reference. |

### Vulnerabilities and Corresponding pFSMs
| Vulnerability | pFSM1 | pFSM2 | pFSM3 | pFSM4 |
|---------------|--------|--------|--------|--------|
| Sendmail Signed Integer Overflow (Figure 3) | Does the input represent a long integer? | - | - | - |
| NULL HTTPD Heap Overflow (Figure 4) | - | Is the integer in the interval [0, 100]? | Are free-chunk links unchanged? | - |
| Rwall File Corruption (Figure 6) | - | Is the target file a terminal? | - | - |
| IIS Filename Decoding Vulnerability (Figure 7) | Does the filename contain “../”? | - | - | - |
| Xterm File Race Condition (Figure 5) | - | Is the return address unchanged? | - | - |
| GHTTPD Buffer Overflow on Stack [21] | - | length(input) ≤ size(buffer) | - | - |
| rpc.statd Format String Vulnerability [21] | Does the filename contain format directives (e.g., %n, %d)? | Is the return address unchanged? | - | - |

### Conclusions
This paper presents a study of security vulnerabilities in the Bugtraq database. The statistical study identifies leading categories of security vulnerabilities. An in-depth analysis of vulnerability reports and corresponding source code reveals three characteristics of security vulnerabilities:
1. Exploits must pass through a series of elementary activities.
2. Exploiting a vulnerability involves multiple vulnerable operations on several objects.
3. The vulnerability data and code inspections allow us to derive a predicate for each elementary activity, and a security vulnerability is the result of violating the predicate in implementation.

These observations motivate the development of the FSM model to depict and reason about security vulnerabilities. Each vulnerability is modeled as a series of pFSMs, which depict derived predicates. The proposed FSM methodology is exemplified by analyzing various types of vulnerabilities, such as buffer overflow and signed integer overflow. The pFSMs are classified into three types, indicating common causes of the modeled vulnerabilities. These causes reflect different aspects of security and suggest opportunities for providing appropriate checks to protect systems.

Future work includes studying security predicates specific to different software (e.g., Internet services, administrative tools, and TCP/IP implementations) in addition to the generic predicates discussed in this paper. We hope that a comprehensive understanding of these predicates will enable the development of an automatic tool for vulnerability analysis.

### Acknowledgments
This work is supported in part by a grant from Motorola, Inc. as part of the Motorola Center for Communications, and in part by MURI Grant N00014-01-1-0576. We thank Fran Baker for her careful reading of an early draft of this manuscript.

### References
[1] D. E. Bell and L. J. LaPadula. Secure computer systems: A mathematical model. Technical report MTR-2547 Vol II. Mitre Corporation, Bedford, MA, May 1973.
[2] J. Rushby. Security Requirements Specifications: How and What? Symposium on Requirements Engineering for Information Security (SREIS), 2001.
[3] John McLean. Specifying and Modeling of Computer Security. IEEE Computer 23(1) pp. 9-16. Jan. 1989.
[4] John McLean. Security Models. In John Marciniak edited, Encyclopedia of Software Engineering. Wiley Press, 1994.
[5] M. Bishop and D. Bailey, A Critical Analysis of Vulnerability Taxonomies, Technical Report 96-11, Department of Computer Science, University of California at Davis (Sep. 1996).
[6] J. –C. Laprie. Dependable Computing and Fault Tolerance: Concepts and Terminology. Proc. 15th Intl Symposium on Fault-Tolerant Computing (FTCS-15), pages 2-11, June 1985.
[7] T. Aslam, I. Krsul, E. Spafford. Use of A Taxonomy of Security Faults. Proc. 19th NIST-NCSC National Information Systems Security Conference.
[8] C. Landwehr, A. Bull, J. McDermott, W. Choi, A Taxonomy of Computer Program Security Flaws, with Examples, ACM Computing Surveys 26, no. 3 (Sep 1994).
[9] R. P. Abbott, J. S. Chin, J. E. Donnelley, et al. Security Analysis and Enhancement of Computer Operating Systems. NBSIR 76-1041, Institute for Computer Sciences and Technology, National Bureau of Standards, Apr. 1976.
[10] B. Bisbey II and D. Hollingsworth. Protection Analysis Project Final Report. ISI/RR-78-13, DTIC AD A056816, USC/Information Sciences Institute, May 1978.
[11] U. Lindqvist and E. Jonsson. How to Systematically Classify Computer Security Intrusions. In Proc. of the 1997 IEEE Symposium on Security and Privacy, pages 154-163, Oakland, CA, May 4-7, 1997.
[12] M. Howard and D. LeBlanc, Writing Secure Code. Microsoft Press. 2001.
[13] http://www.securityfocus.com
[14] http://www.cert.org
[15] StackGuard Mechanism: Emsi's Vulnerability, http://www.immunix.org/StackGuard/emsi_vuln.html
[16] J. Xu, Z. Kalbarczyk, S. Patel, and R. K. Iyer. Compiler and Architecture Support for Defense against Buffer Overflow Attacks. 2nd Workshop on Evaluating and Architecting System Dependability (EASY), San Jose, CA, October, 2002.
[17] R. Ortalo, Y. Deswarte, and M. Kaaniche, Experimenting with Quantitative Evaluation Tools for Monitoring Operational Security. IEEE Transactions on Software Engineering, vol. 25, no. 5, pp.633-650, Sept. 1999.
[18] O. Sheyner, J. Haines, S. Jha, et al. Automated generation and analysis of attack graphs. Proc. 2002 IEEE Symposium on Security and Privacy. Page(s): 254 –265.
[19] C. Michael, A. Ghosh. Simple, state-based approaches to program-based anomaly detection. ACM Transactions on Information and System Security. Pages: 203-237. Vol.5 No.3. Aug. 2002.
[20] B. Madam, K. Goseva-Popstojanova, et al. Modeling and Quantification of Security Attributes of Software Systems. Proc. 2002 IEEE Intl Conference on Dependable Systems and Networks. Pages: 505-514. June 2002.
[21] S. Chen, Z. Kalbarczyk, J. Xu, R. Iyer. Finite State Machine Models of Security Vulnerabilities. http://ww.crhc.uiuc.edu/~shuochen/data-model-full.pdf

Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 07:06:47 UTC from IEEE Xplore. Restrictions apply.