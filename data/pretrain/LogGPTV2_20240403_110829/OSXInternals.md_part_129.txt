The usimple variant (the "u" stands for uniprocessor) has two implementations: a portable C
implementation [osfmk/ppc/locks_ppc.c] built atop hw_lock and an assembly-language
implementation [osfmk/ppc/hw_lock.s]. The portable implementation also supports interfaces for
debugging and statistics gathering. Unlike a simple lock, which disappears on a uniprocessor, a usimple
lock provides actual locking on a uniprocessor. Acquiring a usimple lock returns with preemption
disabled, whereas releasing a usimple lock reenables preemption.
The simple lock variant is the primary spin-locking mechanism in Mac OS X for multiprocessor systems.
The following primary functions are exported by this lock package:
lck_spin_t *lck_spin_alloc_init(lck_grp_t *grp, lck_attr_t *attr);
void lck_spin_free(lck_spin_t *lck, lck_grp_t *grp);
void lck_spin_init(lck_spin_t *lck, lck_grp_t *grp, lck_attr_t *attr);
void lck_spin_destroy(lck_spin_t *lck, lck_grp_t *grp);
void lck_spin_lock(lck_spin_t *lck);
void lck_spin_unlock(lck_spin_t *lck);
wait_result_t lck_spin_sleep(lck_spin_t *lck,
lck_sleep_action_t lck_sleep_action,
event_t event,
wait_interrupt_t interruptible);
wait_result_t lck_spin_sleep_deadline(lck_spin_t *lck,
lck_sleep_action_t lck_sleep_action,
event_t event,
wait_interrupt_t interruptible,
uint64_t deadline);
When preemption is disabled, the holder of a spinlock must notdirectly or indirectlyacquire a blocking
lock (such as a mutex or a semaphore). Doing so will result in a kernel panic.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 141 of 153
9.18.2.2. Mutexes
Mach mutexes are blocking mutual-exclusion locks. If a thread attempts to acquire a mutex that is
currently locked, it will relinquish the processor and sleep until the mutex is available. In doing so, the
thread will also give up any scheduling time quantum that it may have remaining. Although a thread is
permitted to block[19] while holding a Mach mutex, the mutexes are not recursive: If a thread attempts to
acquire a mutex that it already holds, it will cause a kernel panic.
[19] The safety of blocking still depends on whether blocking is allowed in the given context
and whether the code is written correctly.
The mutex package exports the following functions, whose prototypes are listed in osfmk/kern/locks.h:
lck_mtx_t lck_mtx_alloc_init(lck_grp_t *grp, lck_attr_t *attr);
void lck_mtx_free(lck_mtx_t *lck, lck_grp_t *grp);
void lck_mtx_init(lck_mtx_t *lck, lck_grp_t *grp, lck_attr_t *attr);
void lck_mtx_destroy(lck_mtx_t *lck, lck_grp_t *grp);
void lck_mtx_lock(lck_mtx_t *lck);
void lck_mtx_unlock(lck_mtx_t *lck);
wait_result_t lck_mtx_assert(lck_mtx_t *lck, int type);
wait_result_t lck_mtx_sleep(lck_mtx_t *lck,
lck_sleep_action_t lck_sleep_action,
event_t event,
wait_interrupt_t interruptible);
wait_result_t lck_mtx_sleep_deadline(lck_mtx_t *lck,
lck_sleep_action_t lck_sleep_action,
event_t event,
wait_interrupt_t interruptible
uint64_t deadline);
The mutex package is implemented in osfmk/ppc/locks_ppc.c, osfmk/ppc/hw_lock.s, and
osfmk/kern/locks.c. The lck_mtx_t data type is declared in osfmk/ppc/locks.h.
9.18.2.3. Read/Write Locks
Mach read/write locks are blocking synchronization locks that permit multiple simultaneous readers or a
single writer. Before a writer can acquire the lock for writing, it must wait until all readers have released
the lock. Moreover, if a writer is already waiting on a lock, a new reader attempting to get the read lock
will block until the writer has acquired and released the lock. It is possible to downgrade (write read)
or upgrade (read write) a lock. A read-to-write upgrade is favored over a new writer.
The read/write locks package exports the following functions, whose prototypes are listed in
osfmk/kern/locks.h:
lck_rw_t *lck_rw_alloc_init(lck_grp_t *grp, lck_attr_t *attr);
void lck_rw_free(lck_rw_t *lck, lck_grp_t *grp);
void lck_rw_init(lck_rw_t *lck, lck_grp_t *grp, lck_attr_t *attr);
void lck_rw_destroy(lck_rw_t *lck, lck_grp_t *grp);
void lck_rw_lock(lck_rw_t *lck, lck_rw_type_t lck_rw_type);
void lck_rw_unlock(lck_rw_t *lck, lck_rw_type_t lck_rw_type);
void lck_rw_lock_shared(lck_rw_t *lck);
void lck_rw_unlock_shared(lck_rw_t *lck);
void lck_rw_lock_exclusive(lck_rw_t *lck);
void lck_rw_unlock_exclusive(lck_rw_t *lck);
wait_result_t lck_rw_sleep(lck_rw_t *lck,
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 142 of 153
lck_sleep_action_t lck_sleep_action,
event_t event,
wait_interrupt_t interruptible);
wait_result_t lck_rw_sleep_deadline(lck_rw_t *lck,
lck_sleep_action_t lck_sleep_action,
event_t event,
wait_interrupt_t interruptible,
uint64_t deadline);
The implementation of the read/write locks package is split across the same files as those of the mutex
package.
9.18.2.4. Lock Groups and Attributes
As we saw in the previous three sections, spinlocks, mutexes, and read/write locks all provide similar
interfaces. In particular, the functions in these interfaces deal with lock groups (lck_grp_t) and lock
attributes (lck_attr_t). A lock group is a container for one or more locksthat is, it names a set of locks.
It is allocated separately, after which it can be used to group together lockssay, based on the purpose the
locks are used for. Every lock belongs to exactly one group.
Lock attributes are flagsa collection of bitsthat qualify a lock. Examples of lock attributes are
LCK_ATTR_NONE (no attributes specified) and LCK_ATTR_DEBUG (lock debugging enabled). A lock group
also has its own attributes (lck_grp_attr_t). Figure 970 shows an example of using the lock interfaces.
Figure 970. Using locks in the kernel
lck_grp_attr_t *my_lock_group_attr; // lock group attributes
lck_grp_t *my_lock_group // lock group
lck_attr_t *my_lock_attr // lock attributes
lck_mtx_t *my_mutex;
void
my_init_locking() // set up locks
{
...
// allocate lock group attributes and the lock group
my_lock_group_attr = lck_grp_attr_alloc_init();
my_lock_group = lck_grp_alloc_init("my-mutexes", my_lock_group_attr);
my_lock_attr = lck_attr_alloc_init(); // allocate lock attribute
lck_attr_setdebug(my_lock_attr); // enable lock debugging
my_mutex = lck_mtx_alloc_init(my_lock_group, my_lock_attr);
...
}
void
my_fini_locking() // tear down locks
{
lck_mtx_free(my_mutex, my_lock_group);
lck_attr_free(my_lock_attr);
lck_grp_free(my_lock_group);
lck_grp_attr_free(my_lock_group_attr);
}
9.18.3. BSD Condition Variables
The BSD portion of the kernel implements the msleep(), wakeup(), and wakeup_one() functions
[bsd/kern/kern_synch.c], which provide the semantics of condition variables, with an additional
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 143 of 153
feature that a timeout value can be specified.
9.18.4. Mach Lock Sets
Mach provides an interface for creating and using lock sets, where a set contains one or more ulocks. The
contents of a ulock data structure (struct ulock [osfmk/kern/sync_lock.h]) include a mutex and a
wait queue of blocked threads. Figure 971 shows examples of routines in the lock set interface.
Figure 971. The Mach lock set interface
// create a lock set with nlocks ulocks
kern_return_t
lock_set_create(task_t task, lock_t lock_set, int nlocks, int policy);
// destroy lock set and all of its associated locks
// any blocked threads will unblock and receive KERN_LOCK_SET_DESTROYED
kern_return_t
lock_set_destroy(task_t task, lock_set_t lock_set);
// acquire access rights to the given lock in the lock set
kern_return_t
lock_acquire(lock_set_t lock_set, int lock_id);
// release access rights to the given lock in the lock set
kern_return_t
lock_release(lock_set_t lock_set, int lock_id);
// hand off ownership of lock to an anonymous accepting thread
kern_return_t
lock_handoff(lock_set_t lock_set, int lock_id);
// accept an ownership handoff from an anonymous sending thread
// caller will block if nobody is waiting to hand off the lock
// at most one thread can wait to accept handoff of a given lock
kern_return_t
lock_handoff_accept(lock_set_t lock_set, int lock_id);
// mark the internal state of the lock as stable
// the state destabilizes when a lock-holder thread terminates
kern_return_t
lock_make_stable(lock_set_t lock_set, int lock_id);
9.18.5. Mach Semaphores
Besides the POSIX and System V semaphore interfaces that we have seen earlier, there is another
semaphore interface available in user spaceMach semaphores. In fact, POSIX semaphores in Mac OS X
are implemented atop Mach semaphores. Other parts of the kernel that use Mach semaphores include the
IOCommandQueue, IOService, and IOGraphics classes in the I/O Kit.
A Mach semaphore is represented as a Mach port (semaphore_t) that names a kernel object of type
IKOT_SEMAPHORE. The corresponding kernel structure is struct semaphore
[osfmk/kern/sync_sema.h]. A new Mach semaphore is obtained by calling semaphore_create(),
which returns with a send right naming the new semaphore.
kern_return_t
semaphore_create(task_t task, semaphore_t *semaphore, int policy, int value);
The value argument to semaphore_create() specifies the initial value of the semaphore count, whereas
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 144 of 153
the policy argument specifies the policy (e.g., SYNC_POLICY_FIFO) the kernel will use to select a thread
to wake up from among multiple threads that are blocked on the semaphore.
Given a semaphore, semaphore_wait() decrements the semaphore count, blocking if the count is
negative after decrementing. semaphore_signal() increments the semaphore count, scheduling a waiting
thread to execute if the new count becomes non-negative. semaphore_signal_all() can be used to wake
up all threads blocked on a semaphore, while resetting the semaphore count to zero. Finally,
semaphore_signal_thread() can be used to signal a specific thread.
Figure 972 shows a program that demonstrates the use of Mach semaphores. The main thread creates two
semaphoresboth with an initial value of 0and three threads. It calls semaphore_wait() tHRee times on
one of the semaphores. Each thread calls semaphore_signal() on this semaphore as its first operation.
Therefore, the main thread blocks until all three threads are ready. Each thread then calls
semaphore_wait() on the other semaphore. Since the latter's value is 0, all threads will block. The main
thread first wakes up a specific thread using semaphore_signal_thread() and then wakes up the
remaining two threads using semaphore_signal_all().
Figure 972. Using Mach semaphores
// mach_semaphore.c
#include 
#include 
#include 
#include 
#include 
#define OUT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); goto out; }
#define PTHID() (unsigned long)(pthread_self())
#define SEMAPHORE_WAIT(s, n) \
{ int i; for (i = 0; i < (n); i++) { semaphore_wait((s)); } }
void *
start_routine(void *semaphores)
{
semaphore_t *sem = (semaphore_t *)semaphores;
semaphore_signal(sem[1]);
printf("thread: %lx about to decrement semaphore count\n", PTHID());
semaphore_wait(sem[0]);
printf("thread: %lx succeeded in decrementing semaphore count\n", PTHID());
semaphore_signal(sem[1]);
return (void *)0;
}
int
main(void)
{
pthread_t pthread1, pthread2, pthread3;
semaphore_t sem[2] = { 0 };
kern_return_t kr;
setbuf(stdout, NULL);
kr = semaphore_create(mach_task_self(), &sem[0], SYNC_POLICY_FIFO, 0);
OUT_ON_MACH_ERROR("semaphore_create", kr);
kr = semaphore_create(mach_task_self(), &sem[1], SYNC_POLICY_FIFO, 0);
OUT_ON_MACH_ERROR("semaphore_create", kr);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 145 of 153
(void)pthread_create(&pthread1, (const pthread_attr_t *)0,
start_routine, (void *)sem);
printf("created thread1=%lx\n", (unsigned long)pthread1);
(void)pthread_create(&pthread2, (const pthread_attr_t *)0,
start_routine, (void *)sem);
printf("created thread2=%lx\n", (unsigned long)pthread2);
(void)pthread_create(&pthread3, (const pthread_attr_t *)0,
start_routine, (void *)sem);
printf("created thread3=%lx\n", (unsigned long)pthread3);
// wait until all three threads are ready
SEMAPHORE_WAIT(sem[1], 3);
printf("main: about to signal thread3\n");
semaphore_signal_thread(sem[0], pthread_mach_thread_np(pthread3));
// wait for thread3 to sem_signal()
semaphore_wait(sem[1]);
printf("main: about to signal all threads\n");
semaphore_signal_all(sem[0]);
// wait for thread1 and thread2 to sem_signal()
SEMAPHORE_WAIT(sem[1], 2);
out:
if (sem[0])
semaphore_destroy(mach_task_self(), sem[0]);
if (sem[1])
semaphore_destroy(mach_task_self(), sem[1]);
exit(kr);
}
$ gcc -Wall -o mach_semaphore mach_semaphore.c
$ ./mach_semaphore
created thread1=1800400
created thread2=1800800
created thread3=1800c00
thread: 1800400 about to decrement semaphore count
thread: 1800800 about to decrement semaphore count
thread: 1800c00 about to decrement semaphore count
main: about to signal thread3
thread: 1800c00 succeeded in decrementing semaphore count
main: about to signal all threads
thread: 1800400 succeeded in decrementing semaphore count
thread: 1800800 succeeded in decrementing semaphore count
Figure 973 shows the kernel data structure associated with a Mach semaphore. Note that the semaphore
lock, which exists within the wait queue structure, is an hw_lock_t spinlock.
Figure 973. Internal structure of a Mach semaphore
// osfmk/kern/sync_sema.h
typedef struct semaphore {
queue_chain_t task_link; // chain of semaphores owned by a task
struct wait_queue wait_queue; // queue of blocked threads and lock
task_t owner; // task that owns semaphore
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 146 of 153
ipc_port_t port; // semaphore port
int ref_count; // reference count
int count; // current count value
boolean_t active; // active status
} Semaphore;
// osfmk/mach/mach_types.h
typedef struct semaphore *semaphore_t;
// osfmk/kern/wait_queue.h
typedef struct wait_queue {
unsigned int wq_type : 16, // the only public field
wq_fifo : 1, // FIFO wakeup policy
wq_isrepost: 1, // is waitq preposted?
: 0;
hw_lock_data_t wq_interlock; // interlock
queue_data_t wq_queue; // queue of elements
} WaitQueue;
9.18.6. Pthreads Synchronization Interfaces
The Pthreads library provides functions for using mutexes, condition variables, and read/write locks. The
internal structures of these abstractions are as follows:
A Pthreads mutex includes two Mach semaphores, a spinlock, and other data.
A Pthreads condition variable internally includes a Mach semaphore, a Pthreads mutex, a spinlock,
and other data.
A Pthreads read/write lock internally includes a pair of Pthreads condition variables, a Pthreads
mutex, and other data.
The Pthreads library uses the spinlock implementation that the kernel makes available through the
commpage mechanism.
9.18.7. Locking in the I/O Kit
The I/O Kit is the object-oriented driver subsystem of the xnu kernel. It provides synchronization
primitives that are simple wrappers around the Mach primitives discussed in this chapter.
 IOSimpleLock is a wrapper around Mach spinlocks (specifically, lck_spin_t). When used to
synchronize between interrupt context and thread context, an IOSimpleLock should be locked with