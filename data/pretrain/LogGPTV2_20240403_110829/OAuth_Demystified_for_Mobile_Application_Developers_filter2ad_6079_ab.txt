### OAuth Evolution and Usage Scenarios

Initially, the working group intended to enhance the existing OAuth 1.0 protocol to address new usage scenarios. However, due to a "strong and unbridgeable conflict" between different interest groups, as stated by a departing lead author of OAuth 1.0 [22], the decision was made to completely overhaul the specification, leading to the creation of OAuth 2.0.

#### Key Changes in OAuth 2.0

One of the major changes introduced by OAuth 2.0 is the concept of bearer tokens [28]. Unlike OAuth 1.0, where access tokens were bound to specific relying parties, OAuth 2.0 allows any party in possession of a valid token to access the user's protected resources. Additionally, OAuth 2.0 offers four methods for exchanging access tokens, known as grants. These grants can be viewed as different "versions" of OAuth 2.0. Our study in Section 3 reveals that, out of the four grant types, only two are commonly used in practice: the implicit grant and the authorization code grant. We illustrate these two grants in Figure 2a and Figure 2b, and briefly describe them below.

### Implicit Grant (Figure 2a)

The implicit grant is the simplest OAuth flow, consisting of two steps:
1. The user is redirected to the service provider to grant the relying party access to their protected resource.
2. After permission is granted, the service provider redirects the user back to the relying party along with an access token. The relying party can then use this token to access the user's protected resource.

**Key Features:**
- All messages, except the final protected resource request, are exchanged through the user agent (e.g., using browser redirection).
- The implicit grant does not require the relying party to present a shared secret to the service provider, making it suitable for mobile environments where the relying party resides on an untrusted device.

### Authorization Code Grant (Figure 2b)

The authorization code grant enhances the implicit grant by adding an additional step to authenticate the relying party:
1. The user grants permission to the relying party.
2. The service provider redirects the user back to the relying party with an authorization code (instead of an access token).
3. The relying party uses this authorization code to exchange for the user's access token through a direct server-to-server call.
4. In this exchange, the relying party must include its own identity, allowing the service provider to verify that the authorization code is granted to the same party.

### Our Study

Our study comprises two main components:
1. **Understanding and Comparing Protocol Specifications:**
   - We focus on comparing the protocol specifications of OAuth 1.0 and 2.0 to identify key steps in authentication and authorization. These steps are implemented differently on mobile platforms compared to web platforms, leading to potential security issues. Section 4.2 elaborates on these differences.
   
2. **Real-World Implementation Analysis:**
   - To understand how developers interpret and implement OAuth, we conducted a comprehensive study on 149 popular mobile applications. These included 133 Android applications from the Google Play store and 16 manually selected iOS and Android OAuth applications. 
   - 25 (16.8%) of the applications were service providers, 126 (84.5%) were relying parties, and 2 (1.3%) were both. 52 (41.3%) of the relying parties used OAuth for authorization, while 74 (58.7%) used it for authentication.
   - Our study revealed that 59.7% of these implementations were faulty and vulnerable to attacks, confirming our suspicion that many developers find it challenging to securely use OAuth on mobile applications. Section 5 provides representative cases of these vulnerabilities.

### OAuth Specifications and Mobile Platforms

In this section, we analyze three canonical OAuth protocol flows: OAuth 1.0, OAuth 2.0 implicit grant, and authorization code grant, and their use cases: authorization and authentication. We also provide insights into how to achieve secure authentication using different versions of OAuth and highlight key factors that make OAuth error-prone on mobile platforms.

#### Dissecting the OAuth Specifications

Our analysis focuses on the key elements within the OAuth 1.0 and 2.0 specifications that ensure security for authorization and authentication. We examine the following flows: OAuth 1.0 (Figure 1), OAuth 2.0 implicit grant (Figure 2a), and authorization code grant (Figure 2b).

**Prerequisite:**
- Before any OAuth flow, the relying party must obtain an ID and a secret from the service provider, typically done by registering the application.

#### Authorization

Authorization enables an end-user to grant a relying party access to their protected resource stored on a service provider. The security audience is the service provider, which must verify that the protected resource is sent to the same party the user granted access to.

- **OAuth 1.0:** Every token and protected resource request must be signed by the relying party using the secret obtained during registration. Security is achieved when the service provider verifies the signature of the protected resource request.
- **OAuth 2.0 Implicit Grant:** The relying party must provide a redirection URI during registration. This URI is checked against the registered URI to ensure the user is granting access to the same relying party.
- **OAuth 2.0 Authorization Code Grant:** An additional step allows the service provider to verify the identity of the relying party using its application ID and secret. The service provider then ensures the access token is sent to the correct relying party.

#### Authentication

While OAuth is often used for authentication, the current standards do not specify this use case. For secure authentication, the relying party must ensure:
1. The user ID received from the service provider cannot be tampered with.
2. The OAuth tokens used to retrieve the user ID are granted to the same relying party.

- **OAuth 1.0:** Secure for authentication because the user ID exchange and signature check ensure the access token is used for the same relying party.
- **OAuth 2.0 Implicit Grant:** Insecure for authentication because access tokens are not bound to relying parties, allowing malicious parties to impersonate users.
- **OAuth 2.0 Authorization Code Grant:** Mitigates the issue by using server-to-server API calls and verifying the redirection URI associated with the authorization code.

#### Differences Between Mobile and Web Platforms

The OAuth specifications were primarily designed for the web, and many core concepts essential for security do not easily translate to mobile platforms. This leads to frequent misinterpretations and errors in mobile implementations.

- **Redirection Mechanisms:** Browser redirection (HTTP 302 status code) is well-defined for web but unclear for mobile. Both OAuth specifications label redirection as an implementation detail, leaving mobile developers to use custom schemes (iOS) or Intents (Android).