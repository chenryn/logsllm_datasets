---
title: Mkdocs
date: 20200409
author: Lyz
---
[MkDocs](https://www.mkdocs.org/) is a fast, simple and downright gorgeous
static site generator that's geared towards building project documentation.
Documentation source files are written in Markdown, and configured with a single
YAML configuration file.
Note: I've automated the creation of the mkdocs site in
[this cookiecutter template](https://github.com/lyz-code/cookiecutter-python-project).
# Installation
- Install the basic packages.
  ```bash
  pip install \
      mkdocs \
      mkdocs-material \
      mkdocs-autolink-plugin \
      mkdocs-minify-plugin \
      pymdown-extensions \
      mkdocs-git-revision-date-localized-plugin
  ```
- Create the `docs` repository.
  ```bash
  mkdocs new docs
  ```
- Although there are
  [several themes](https://www.mkdocs.org/user-guide/styling-your-docs/), I
  usually use the [material](https://squidfunk.github.io/mkdocs-material) one. I
  won't dive into the different options, just show a working template of the
  `mkdocs.yaml` file.
  ```yaml
  site_name: {{site_name: null}: null}
  site_author: {{your_name: null}: null}
  site_url: {{site_url: null}: null}
  nav:
    - Introduction: index.md
    - Basic Usage: basic_usage.md
    - Configuration: configuration.md
    - Update: update.md
    - Advanced Usage:
        - Projects: projects.md
        - Tags: tags.md
  plugins:
    - search
    - autolinks
    - git-revision-date-localized:
        type: timeago
    - minify:
        minify_html: true
  markdown_extensions:
    - admonition
    - meta
    - toc:
        permalink: true
        baselevel: 2
    - pymdownx.arithmatex
    - pymdownx.betterem:
        smart_enable: all
    - pymdownx.caret
    - pymdownx.critic
    - pymdownx.details
    - pymdownx.emoji:
        emoji_generator: !%21python/name:pymdownx.emoji.to_svg
    - pymdownx.inlinehilite
    - pymdownx.magiclink
    - pymdownx.mark
    - pymdownx.smartsymbols
    - pymdownx.superfences
    - pymdownx.tasklist:
        custom_checkbox: true
    - pymdownx.tilde
  theme:
    name: material
    custom_dir: theme
    logo: images/logo.png
    palette:
      primary: blue grey
      accent: light blue
  extra_css:
    - stylesheets/extra.css
    - stylesheets/links.css
  repo_name: {{repository_name: null}: null} # for example: 'lyz-code/pydo'
  repo_url: {{repository_url: null}: null} # for example: 'https://github.com/lyz-code/pydo'
  ```
- [Configure your logo](https://squidfunk.github.io/mkdocs-material/getting-started/#logo)
  by saving it into `docs/images/logo.png`.
- I like to show a small image above each link so you know where is it pointing
  to. To do so add the content of
  [this directory](https://github.com/lyz-code/pydo/tree/master/docs/theme) to
  `theme`. and
  [these](https://github.com/lyz-code/pydo/tree/master/docs/docs/stylesheets)
  files under `docs/stylesheets`.
- Initialize the git repository and create the first commit.
- Start the server to see everything is alright.
  ```bash
  mkdocs serve
  ```
## Material theme customizations
### [Color palette toggle](https://squidfunk.github.io/mkdocs-material/setup/changing-the-colors/#color-palette-toggle)
Since 7.1.0, you can have a light-dark mode on the site using a toggle in the
upper bar.
To enable it add to your `mkdocs.yml`:
```yaml
theme:
  palette:
    # Light mode
    - media: '(prefers-color-scheme: light)'
      scheme: default
      primary: blue grey
      accent: light blue
      toggle:
        icon: material/toggle-switch-off-outline
        name: Switch to dark mode
    # Dark mode
    - media: '(prefers-color-scheme: dark)'
      scheme: slate
      primary: blue grey
      accent: light blue
      toggle:
        icon: material/toggle-switch
        name: Switch to light mode
```
Changing your desired colors for each mode
### [Back to top button](https://squidfunk.github.io/mkdocs-material/setup/setting-up-navigation/#back-to-top-button)
Since 7.1.0, a back-to-top button can be shown when the user, after scrolling
down, starts to scroll up again. It's rendered in the lower right corner of the
viewport. Add the following lines to mkdocs.yml:
```yaml
theme:
  features:
    - navigation.top
```
## Add a github pages hook.
- Save your `requirements.txt`.
  ```bash
  pip freeze > requirements.txt
  ```
- Create the `.github/workflows/gh-pages.yml` file with the following contents.
  ```yaml
  name: Github pages
  on:
    push:
      branches:
        - master
  jobs:
    deploy:
      runs-on: ubuntu-18.04
      steps:
        - uses: actions/checkout@v2
          with:
            # Number of commits to fetch. 0 indicates all history.
            # Default: 1
            fetch-depth: 0
        - name: Setup Python
          uses: actions/setup-python@v1
          with:
            python-version: '3.7'
            architecture: x64
        - name: Cache dependencies
          uses: actions/cache@v1
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-
        - name: Install dependencies
          run: |
            python3 -m pip install --upgrade pip
            python3 -m pip install -r ./requirements.txt
        - run: |
            cd docs
            mkdocs build
        - name: Deploy
          uses: peaceiris/actions-gh-pages@v3
          with:
            deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
            publish_dir: ./docs/site
  ```
- Create an
  [SSH deploy key](https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key)
- Activate `GitHub Pages` repository configuration with `gh-pages branch`.
- Make a new commit and push to check it's working.
## Create MermaidJS diagrams
Even though the Material theme
[supports mermaid diagrams](https://squidfunk.github.io/mkdocs-material/reference/diagrams/#fn:2)
it's only giving it for the paid users. The
[funding needs to reach 5000$](https://squidfunk.github.io/mkdocs-material/insiders/#funding)
so it's released to the general public.
The alternative is to use the
[mkdocs-mermaid2-plugin](https://github.com/fralau/mkdocs-mermaid2-plugin)
plugin, which can't be used with `mkdocs-minify-plugin` and doesn't adapt to
dark mode.
To [install it](https://github.com/fralau/mkdocs-mermaid2-plugin#installation):
- Download the package: `pip install mkdocs-mermaid2-plugin`.
- Enable the plugin in `mkdocs.yml`.
  ```yaml
  plugins:
    # Not compatible with mermaid2
    # - minify:
    #    minify_html: true
    - mermaid2:
        arguments:
          securityLevel: loose
  markdown_extensions:
    - pymdownx.superfences:
        # make exceptions to highlighting of code:
        custom_fences:
          - name: mermaid
            class: mermaid
            format: !%21python/name:mermaid2.fence_mermaid
  ```
Check the [MermaidJS](mermaidjs.md) article to see how to create the diagrams.
# [Plugin development](https://www.mkdocs.org/user-guide/plugins/)
Like MkDocs, plugins must be written in Python. It is expected that each plugin
would be distributed as a separate Python module. At a minimum, a MkDocs Plugin
must consist of a
[BasePlugin](https://www.mkdocs.org/user-guide/plugins/#baseplugin) subclass and
an [entry point](https://www.mkdocs.org/user-guide/plugins/#entry-point) which
points to it.
The BasePlugin class is meant to have `on_` methods that run actions
on the MkDocs defined [events](#events).