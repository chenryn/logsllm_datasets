Yes
No
75%
We find that all SUTs accept most of the mutations,
but neither one accepts all of them. While our tests did
not uncover any specific implementation errors (i.e., ei(cid:173)
ther all configuration files created with a class of vari(cid:173)
ations are accepted or none is), we do believe that all
three systems should offer the flexibility of all muta(cid:173)
tions.
5.4. Resilience to Semantic Errors
Internet RFC-1912 defines a list of common DNS
configuration errors;
these occur at multiple levels,
from the choice of names to the relationship between
records on different servers. Many of the described er(cid:173)
rors are related to the structure of records published by
servers. We used ContErr to test the behavior of BIND
and djbdns when faced with such misconfigurations.
We started from a set of configuration files containing
a forward zone with several hosts, the corresponding
mail exchanger records, several TXT, RP and HINFO
records and several aliases, and a reverse zone that maps
IP addresses to their names. We then injected record(cid:173)
level errors described in RFC-1912.
The error generation is system independent; it is
defined on an abstract representation that shows the
DNS records published by each server. A simple trans(cid:173)
formation maps the data parsed from the configuration
files of each SUT into this representation. Another
transformation, that maps the record representation to
the system-specific configuration representation, is used
to construct the faulty configuration files.
Table 3 shows a small subset of the configuration
errors described in the RFC and the corresponding be(cid:173)
havior for both DNS servers. The fault injection was
carried out on a larger set of errors but, for brevity, we
only show some of the more interesting ones here.
Table 3. Resilience to semantic errors
Err#
1.
2.
3.
4.
Description of fault
Missing PTR
PTR pointing to CNAME
dupl name for NS and CNAME
MX pointing to CNAME
BIND
not found
not found
found
found
djbdns
N/A
N/A
not found
not found
The configuration file format used by djbdns allows
the administrator to define with a single directive mul(cid:173)
tiple related records; e.g., it is possible to define the
A (address) record and corresponding PTR record with
1-4244-2398-9/08/$20.00 ©2008 IEEE
164
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
one directive. Our test configuration file uses this direc(cid:173)
tive and therefore the fault injection tool cannot find any
fault to inject for error (1) and (2), because all record
representations containing such faults cannot be trans(cid:173)
formed back to a configuration file.
In BIND, the ad(cid:173)
ministrator has to define each record separately and thus
this system is subject to such errors. This choice of con(cid:173)
figuration is a plus for djbdns.
BIND is effective in detecting errors of class (3)
and (4). It stops loading the zone and signals the opera(cid:173)
tor the reason for this. Running the same tests on djbdns
reveals that, despite its strength resulting from the con(cid:173)
figuration format, it does not check the consistency of
its data from this point of view.
Using ConfErr to inject real world configuration er(cid:173)
rors that go beyond mere syntactical issues enable the
study and testing of whole-system behavior, not just
of the configuration parser. A developer can thus use
ConfErr to identify non-parse-related areas of the sys(cid:173)
tem that require improvement.
5.5. Comparing Error Resilience
A configuration process can be viewed as the trans(cid:173)
formation of an initial configuration file (usually the de(cid:173)
fault one shipped with the system) into a new configu(cid:173)
ration file. Such transformation is achieved by adding,
deleting and/or modifying directives. An ideal system is
able to detect all errors introduced during this transfor(cid:173)
mation. We measure resilience of the system to config(cid:173)
uration errors by simulating multiple times this configu(cid:173)
ration process and determining the percentage of errors
that are detected by the system across all experiments.
ConfErr uses a benchmark script to automatically
transform initial configuration files into new, valid files;
afterward, it creates faulty configuration files based on
these new files, and verifies the system behavior. Errors
are injected in close proximity to the place where the
file has been (validly) modified, thus aiming to simulate
the common way in which errors sneak into configura(cid:173)
tions. This procedure simulates the human configura(cid:173)
tion process, thus constituting a primitive human error
benchmark.
We used this approach to compare Postgres and
MySQL. In order to generate the faulty configuration
files, we iterated through typos in values of all di(cid:173)
rectives. We did not inject errors in directive names,
because all these errors are known to be detected by
both systems (§5.2). For the starting configuration, we
used a file containing most of the available directives,
along with the default values; we skipped all directives
that have no default value. Since neither Postgres nor
MySQL accept typos in directives with boolean values,
we excluded them from the test.
We find that Postgres is more resilient to typos
than MySQL. We ran 20 experiments for each direc(cid:173)
tive.
In each experiment, we injected one typo in the
corresponding directive value. For each directive, we
computed the percentage of experiments in which the
system detected the error. Figure 3 summarizes the dis(cid:173)
tribution of directives across four ranges of detection:
poor (0-25% of faults detected), fair (25%-50%), good
(50%-75%), and excellent (75%-100%). Postgres was
able to detect more than 75% ofthe typos in almost 45%
of its directives, while MySQL detected less than 25%
of the typos in the same fraction of its directives.
100
80
en
(J)>
t5
60
~
~ 40
'0
~
0
20
I i i Excellent
_Good
_Fair
_Poor
0
Postgresql
MySQL
Figure 3. Resilience to typos in MySQL and
Postgres, across all directives
The results can be explained by the fact that Post(cid:173)
gres features a strong constraint checking mechanism
for its numeric parameters, that can detect many typos.
Moreover, the MySQL flaws mentioned in §5.2 increase
the number of typos that go undetected.
Our comparison only gives an estimate ofthe over(cid:173)
all resilience of the systems to typos in directive val(cid:173)
ues. However, using the same procedure, one could do
more focused configuration-task-oriented benchmarks.
Using domain-specific knowledge, it is possible to de(cid:173)
fine a subset of directives that are relevant to the task
of interest, and obtain a more precise comparison of the
task-specific resilience by only taking into account con(cid:173)
figurations with errors in these directives.
For increased thoroughness, the benchmark can in(cid:173)
clude other types of errors as well, like omissions and
duplications. Similarly, a benchmark could include
domain-specific semantic error models (e.g., the one in
§5.4).
6. Related Work
Several researchers have already recognized human
errors as an important factor in system dependability;
here we sample prior work related to ConfErr and con(cid:173)
trast it to our approach.
Brown and Patterson [2] proposed benchmarks that
include the operator as a component of the system
that can either increase or reduce dependability: (s)he
can help the system recover from external faults faster
1-4244-2398-9/08/$20.00 ©2008 IEEE
165
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
or can introduce new faults that degrade dependabil(cid:173)
ity. With ContErr, we directly simulate human errors,
which results in time and cost savings, but may be less
realistic.
Nagaraja et al. [7] described a testbed for fault tol(cid:173)
erance techniques aimed at human errors. They emu(cid:173)
late the operator via test scripts that embody specific
errors observed during tests with real human operators.
This emulation technique allows the reuse offaults, thus
amortizing the initial cost. Our approach extends this
method by synthesizing general error models, thus en(cid:173)
abling the simulation of a wider set of errors than the
ones initially observed, as well as the automatic intro(cid:173)
duction of variations.
Vieira and Madeira [15] aimed to assess recover(cid:173)
ability in DBMSes by emulating both faults and the re(cid:173)
covery procedure carried out by the operator. While
their work assumes the error detection capability of
the system in order to analyze the recovery procedure,
ContErr directly measures this capability.
Brown and Hellerstein [3] introduced a method for
measuring the complexity of configuration processes in
terms of time taken to complete the configuration and
probability of completing without errors. In our work,
instead of focusing on the probability oferror, we focus
on the system's ability to handle the configuration error.
Finally, the field of human-computer interaction
has seen an abundance of work on the design, evalua(cid:173)
tion and implementation of interactive computing sys(cid:173)
tems. For example, Maxion and Reeder [6] analyzed
the genesis of human errors and the impact interfaces
have on them. To our knowledge, no automatic tool for
error generation has been proposed; such existing work
can be leveraged to extend ContErr's models.
7. Conclusion
Configuration errors are dominant causes ofsystem
downtime, but are rarely taken into account when de(cid:173)
signing, testing, and evaluating systems. Direct testing
for this type oferrors traditionally involves real humans,
so it can be complex, subjective, and hard to reproduce.
In this paper we presented ContErr, a tool that auto(cid:173)
matically tests the behavior ofa system when faced with
human configuration errors. Instead of directly relying
on human subjects, the tool relies on models that psy(cid:173)
chologists and linguists have distilled from their stud(cid:173)
ies ofhuman behavior. ContErr automatically generates
realistic configuration errors, injects them in a system(cid:173)
generic fashion, and assesses their impact. ContErr is
designed to be extensible, thus allowing for the addition
of new error generation plugins.
We showed that ContErr enables a system de(cid:173)
veloper to test with little effort the resilience of real
systems-we reported case studies on MySQL, Post(cid:173)
gres, Apache, BIND, and djbdns; testing each SUT took
less than one hour. We found flaws in these popular
server applications and showed how to compare one
system to another, thus taking a further step toward de(cid:173)
pendability benchmarks that include the human factor.
References
[1] Apache HTTP Wiki. http://wikLapache.org/httpd/.
[2] A. Brown, L. C. Chung, and D. A. Patterson. Including
the human factor in dependability benchmarks. In Proc.
DSN Workshop on Dependability Benchmarking, 2002.
[3] A. Brown and 1. Hellerstein. An approach to bench-
marking configuration complexity. In Proc. SIGOPS Eu(cid:173)
ropean Workshop, Leuven, Belgium, Sept. 2004.
[4] J. Gray. Why do computers stop and what can be done
about it? In Proc. 5th Symp. on Reliability in Distributed
Software and Database Systems, 1986.
[5] XML information set. http://w3.org/TR/xml-infoset.
[6] R. A. Maxion and R. W. Reeder.
Improving user(cid:173)
interface dependability through mitigation of human er(cid:173)
ror. Int. 1. Hum.-Comput. Stud., 63(1-2):25-50, 2005.
[7] K. Nagaraja, F. Oliveira, R. Bianchini, R. P. Martin, and
T. D. Nguyen. Understanding and dealing with opera(cid:173)
tor mistakes in Internet services. In Proc. 6th Symp. on
Operating Systems Design & Implementation, 2004.
[8] F. Oliveira, K. Nagaraja, R. Bachwani, R. Bianchini,
R. P. Martin, and T. D. Nguyen. Understanding and vali(cid:173)
dating database system administration. In Proc. USENIX
Annual Technical Conf., 2006.
[9] D. Oppenheimer, A. Ganapathi, and D. Patterson. Why
do Internet services fail, and what can be done about it?
In Proc. 4th USENIX Symposium on Internet Technolo(cid:173)
gies and Systems, 2003.
[10] Oracle. Oracle database 109 release 2 administrator's
guide. B14231-02, May 2006.
[11] Oracle. Oracle database reference 109 release 2, 2006.
[12] S. Pertet and P. Narsimhan.
Causes of failures in
web applications. Technical Report CMU-PDL-05-1 09,
Carnegie Mellon University, 2005.
[13] J. Reason. Human Error. Cambridge University Press,
1990.
[14] B. van Berkel and K. D. Smedt. Triphone analysis: a
combined method for the correction of orthographical
and typographical errors. In Proc. 2nd Con! on Applied
Natural Language Processing, 1988.
[15] M. Vieira and H. Madeira. Recovery and performance
balance of a COTS DBMS in the presence of operator
faults.
In Proc. Inti. Conf. on Dependable Systems and
Networks, 2002.
[16] A. Wool. A quantitative study of firewall configuration
errors. Computer, 37(6):62-67, June 2004.
[17] XML path language (XPath). http://w3.org/TR/xpath.
[18] XSL transformations (XSLT). http://w3.org/TR/xslt.
[19] 1. Xu, Z. Kalbarczyk, and R. K. Iyer. Networked Win-
dows NT system field failure data analysis. In Proc. Pa(cid:173)
cific Rim Inti. Symp. on Dependable Computing, 1999.
1-4244-2398-9/08/$20.00 ©2008 IEEE
166
DSN 2008: Keller et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:49 UTC from IEEE Xplore.  Restrictions apply.