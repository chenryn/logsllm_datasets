and characterized our speech digests.
In this section,
we describe our AuthentiCall client and server imple-
mentation, and in the following section evaluate its
performance.
Server: Our server was implemented in Java, using
Twilio’s Call API to call clients during the registration
phase to share the audio nonce that conﬁrms control of
a phone number. Google Cloud Messaging (GCM) is
used to generate a push notiﬁcation to inform clients of
incoming calls.
Client: Our prototype AuthentiCall client consists of
an Android app, though we anticipate that in the fu-
ture AuthentiCall will be available for all telephony plat-
forms, including smartphones, VoIP phones, PBXs, and
even landlines (with additional hardware similar in con-
cept to legacy Caller ID devices that uses a wireless or
wired LAN data connection).
A TLS connection is used to establish a secure
channel between client and server. We implement the
AuthentiCall protocol in Java using the Spongy Castle
library [1]. The audio digests were implemented in
Matlab, compiled to C, and linked into the app as native
code. In our implementation, digest protocol messages
contain ﬁve seconds of audio digests.
We use RSA-4096 to as our public key algorithm and
SHA-3 for the underlying hash function for HMACs. To
reduce handshake time, we use a standard set of NIST
Difﬁe-Hellman parameters hardcoded into the client.
These are NIST 2048-bit MODP group with a 256-bit
prime order subgroup from RFC5114 [41]. We also use
the HMAC-based key derivation algorithm used by TLS
1.2 described in RFC 5869 [39]. Upon registration, the
584    26th USENIX Security Symposium
USENIX Association
Figure 9: Enrollment takes less than 30 seconds and is a
one time process that may be done in the background.
server issues the client an X509 certiﬁcate. This consists
of a user’s claimed identity, phone number, validity,
public key and signature of the CA.
Audio Nonces: As described in Section 4, the Au-
thentiCall enrollment protocol sends a nonce through the
voice channel to ensure that an client can receive a voice
call. We use a 128-bit random nonce. In our implemen-
tation, the nonce is encoded as touch-tones (DTMF5).
DTMF tones were used because they are faithfully trans-
mitted through every telephone system and were simple
to send and detect. There are 16 possible touch-tone dig-
its 6, so each tone can represent an encoded hexadecimal
digit. These tones are transmitted for 200ms each with a
100ms pause between tones. This provides a bit rate of
13.3 bits per second for a nonce transmission time of 9.6
seconds. This transmission time comprises the bulk of
the time spent in the enrollment protocol.
7 Results
Our AuthentiCall
implementation allows us to test
its performance in enrollment, call handshakes, and
detecting modiﬁed call audio in real phone calls.
7.1 Experiment Setup
Before describing individual experiments, we describe
our experiment testbed. The AuthentiCall server was
placed on an Amazon Web Services (AWS) server
located in Northern Virginia. We used the same network
provider, AT&T, and the same cellular devices, Samsung
Galaxy Note II N7100s, across all experiments. The
enrollment and handshake experiments were carried out
20 times over both WiFi and 3G, and digest exchange
5Dual-Tone Multi-Frequency tones are the sounds made by dialing
digits on a touch-tone phone.
6Four DTMF tones are not available on consumer phones but
provide additional functionality in some special phone systems
Figure 10: AuthentiCall adds 1 to 1.41 seconds to
the phone call establishment, making the overhead
effectively unnoticeable to users.
tests were done 10 times using WiFi. Digest exchange
was done over WiFi as this experiment was used to
validate content protection, not delivery speed.
In all
experiments, calls used a 3G voice channel.
We evaluate 3G and WiFi because our research phones
do not support 2G-only operation. We note that not
all wireless access is created equal, and actual speeds
depend on many factors including network congestion,
transmission power, and interference.
7.2 Enrollment Protocol
Our ﬁrst experiments measure the user enrollment time.
We measure the time from the instant a user begins
enrollment to when the user receives the last protocol
message, including all protocol messages and the audio
nonce. For clients, enrollment is a one-time process that
is done before the ﬁrst call can be placed, analogous to
activating a credit card. Figure 9 shows the average time
of enrollment using 3G and WiFi to exchange protocol
messages. The main contributor to the enrollment time
comes from the transmission of the audio nonce which
is used to establish ownership. Though the enroll-
ment times over 3G and WiFi are 25 and 22 seconds
respectively, this protocol requires no user interaction.
7.3 Handshake Protocol
We next measure the time to complete an entire hand-
shake, including data messages and voice call setup. We
note that voice call setup time is substantial, and requires
many seconds even without AuthentiCall. We believe
the most important performance metric is additional
latency experienced by the end user. As shown in
Figure 10, AuthentiCall only adds 1.07 seconds for WiFi
or 1.41 seconds on 3G data to the total call establishment
time (error bars indicate standard error). We believe that
USENIX Association
26th USENIX Security Symposium    585
this will be unnoticeable to the user for several reasons.
First, call establishment time varies signiﬁcantly. This
is normal network behavior, not an artifact introduced
by AuthentiCall. In our 3G experiments our additional
handshake time is approximately equal to the standard
error in voice call establishment. We also note that our
test phones were in the same location connected to the
same tower, so the voice call setup time is likely lower
than a typical call. In fact, our measured times are very
close to the published estimates of 6.5 seconds for call
setup by the tower between both phones [4]. Finally, we
note that this is substantially faster than Authloop [56]
which takes nine seconds to perform authentication after
call delivery.
7.4 Speech Digest Performance
Our ﬁnal experiments evaluate our speech digest accu-
racy over real call audio. In these 10 calls, we play 10
sentences from 10 randomly selected speakers in the
TIMIT corpus through the call, and our AuthentiCall im-
plementation computed the sent and received digests. In
total this represented 360 seconds of audio. For simplic-
ity, a caller sends audio and digests, and a callee receives
the audio and compares the received and locally com-
puted digests. We also compared these 10 legitimate call
digests with an “adversary call” containing different au-
dio from the hashes sent by the legitimate caller. To com-
pare our live call performance to simulated audio from
Section 5, we ﬁrst discuss our individual-hash accuracy.
Figure 11 shows the cumulative distribution of BER
for digests of legitimate audio calls and audio sent by
an adversary. The dotted line represents our previously
established BER threshold of 0.348.
First, in testing with adversarial audio, we see that
93.4% of the individual fraudulent digests were detected
as fraudulent. Our simulation results saw an individual
digest detection rate of 90%, so this means that our
real calls see an even greater performance. Using our
3-out-of-5 standard for detection, we detected 96.7%.
This test shows that AuthentiCall can effectively detect
tampering in real calls. Next, for legitimate calls, 95.5%
of the digests were properly marked as authentic audio.
Using our 3-out-of-5 standard, we saw no ﬁve-second
frames that were marked as tampered.
While our individual hash performance false positive
rate of 4.5% was low, we were surprised that
the
performance differed from our earlier evaluation on
simulated degradations. Upon further investigation, we
learned that our audio was being transmitted using the
AMR-NB codec set to the lowest possible quality setting
(4.75kbps);
this conﬁguration is typically only used
when reception is exceptionally poor, and we anticipate
this case will be rare in deployment. Nevertheless, there
Figure 11: This ﬁgure shows that 93.4% of individual
digests of adversarial audio are correctly detected while
95.5% of individual digests of legitimate audio are
detected as authentic. Using a 3-out-of-5 detection
scheme, 96.7% of adversarial audio is detected.
are several mechanisms that can correct for this. One
option would be to digest audio after compression for
transmission (our prototype uses the raw audio from
the microphone); such a scheme would reduce false
positives partially caused by known-good transforma-
tion of audio. Another option is to simply accept these
individual false positives. Doing so would result in a
false alert on average every 58 minutes, which is still
acceptable as most phone calls last only 1.8 minutes [3].
8 Discussion
We now discuss additional issues related to AuthentiCall.
Applications and Use Cases: AuthentiCall provides
a mechanism to mitigate many open security problems
in telephony. The most obvious problems are attacks
that rely on Caller ID fraud, like the perennial “IRS
scams” in the United States. Another problem is that
many institutions, including banks and utilities, use ex-
tensive and error-prone challenge questions to authenti-
cate their users. These challenges are cumbersome yet
still fail to stop targeted social engineering attacks. Au-
thentiCall offers a strong method to authenticate users
over the phone, increasing security while reducing the
authentication time and effort.
Another valuable use case is emergency services,
which have faced “swatting” calls that endanger the lives
of ﬁrst responders [73] as well as denial of service attacks
that have made it impossible for legitimate callers to re-
ceive help [8]. AuthentiCall provides a mechanism to al-
low essential services to prioritize authenticated calls in
586    26th USENIX Security Symposium
USENIX Association
sion for most existing devices including smartphones,
VoIP phones, and even landlines if provided with suitable
hardware. As an example, SMS as a transmission carrier
would be impractical. Bandwidth is low, and delivery is
slow and not guaranteed [69]. In particular, the aver-
age time to send one SMS message is 6.4 seconds [53],
meaning that AuthentiCall using SMS would require a
minimum of 38.4 seconds — effectively increasing call
setup time by a factor of 5. If data connections are not
available, users could use a system like Authloop to au-
thenticate their calls. [56]
Why Not Biometrics: Robust speech digests are a su-
perior solution for content integrity than voice biometrics
for several reasons. First, voice authentication is sim-
ply not secure in adversarial settings [38]. Second, voice
biometrics would assume that the call would only con-
sist of a single party (e.g., speakerphones would not be
supported). By contrast, audio digests are speaker inde-
pendent and can be computed locally with no additional
knowledge about the other party.
Denial of Service Adversaries may attempt to break
the security of AuthentiCall by selectively dropping pro-
tocol messages, but AuthentiCall can detect these attacks
and fail to complete a call or end an in-progress call. In
the handshake, the client will not accept a voice call until
the all authentication messages are complete. During the
integrity protocol, the client can enforce tight timeouts
of all messages and alert the user of an attack if expected
messages do not arrive.
User Interface We have developed a complete work-
ing prototype of AuthentiCall for Android, including a
preliminary simple user interface as shown in Figure 12.
Along with previous research [72], this is one of the ﬁrst
interfaces to indicate secure Caller-ID, our prototype in-
terface is intended to simply and clearly alert the user to
the safety of the call. We note that indicating security in
a user interface requires great care [13, 16], and we in-
tend to formally study interface design for AuthentiCall
in future work.
9 Related Work
Authentication has long been a concern in telephony
networks. Chieﬂy motivating that concern has been the
need to identify customers to bill for service usage [69].
The strength of such authentication mechanisms have
varied widely, from easily breakable or weak authentica-
tion (e.g., 1G and 2G cellular) [18, 54] and authorization
[42, 70, 75] to strong mutual authentication (e.g., LTE).
However, all of these mechanisms do not provide
authentication end-to-end.
Researchers have attempted to address the problem
through one of two classes of solutions: heuristics or
cryptography. In the case of the former, researchers have
Figure 12: Before the call is answered, AuthentiCall
indicates if the call is authenticated or unauthenticated
such a scenario while answering other calls opportunisti-
cally. While such a proposal would need to be reviewed
by public policy experts and stakeholders, we provide a
mitigation to a problem with no clear solution.
Server Deployment: AuthentiCall relies on a central-
ized server infrastructure to facilitate authenticated calls
while minimizing abuse. AuthentiCall, including server
infrastructure, could be provided by a carrier or an in-
dependent organization. While a centralized model is
simplest to test our hypothesis that auxiliary data chan-
nels can be used to authenticate traditional voice calls,
we intend to study decentralized and privacy-preserving
architectures in future work.
Cellular Network Load: Systems that make use of
the cellular network must be careful not to increase sig-
naling load on the network in a harmful way [26,40,62].
We believe that AuthentiCall will not cause network
harm because in modern networks (3G and 4G), data sig-
naling is no longer as expensive as a voice call, and si-
multaneous voice and data usage is now commonplace.
Certiﬁcate Management: Any system that relies on
certiﬁcates must address certiﬁcate revocation and ex-
piration. AuthentiCall’s centralized model allows the
server to deny use of any revoked certiﬁcate, drastically
simplifying revocation compared to CRLs or protocols
like OCSP. Similar to Let’s Encrypt [7], AuthentiCall
certiﬁcates can have short lifetimes because certiﬁcate
renewal using our enrollment protocol is fast and requires
no human interaction. Our certiﬁcate authority proposal
is one of many possible designs. As mentioned in Sec-
tion 4, AuthentiCall could also make use of the proposed
Telephony PKI [56]. In this scenario, certiﬁcate lifetime
would be determined by the TPKI, which would also is-
sue a certiﬁcate revocation list.
Why IP data: We chose IP data over other chan-
nels because it provides reliable and fast data transmis-
USENIX Association
26th USENIX Security Symposium    587
(b)(a)explored a wide range of solutions: blacklists of phone
numbers [6, 44, 52], call-back veriﬁcation [47], channel
characterization [57], call data analysis [35, 45, 48, 58],
carrier level ID extraction [68], timing [47], call prove-
nance [17], name registries [22] and biometrics [14, 19,
27, 37]. The difﬁculty with these is that their defenses
are probabilistic in nature and may be weak in various
adversarial settings. Given the increasing number of
attacks on machine learning algorithms [33,49,50], such
techniques offer uncertain security properties.
As for cryptographic solutions, most have been VoIP-
only (e.g., Zfone and Redphone) [2, 9, 21, 43, 77]. Such
solutions not only require high bandwidth at all times,
but also cannot be extended to the heterogeneous global
telephone network. Additionally, they are susceptible
to man-in-the-middle attacks [28, 63] and are difﬁcult
to use [25, 51, 61, 64]. Tu et al. have described how to
modify SS7, the core telephony signaling protocol, to
support authenticated Caller ID [72]. This protocol is not
end-to-end (so the protocol is vulnerable to malicious
network endpoints like IMSI-catchers [23, 24]), requires
both endpoints to call from an SS7-speaking network,
and most importantly would also require modifying core
network entities throughout every network.
The solution closest to our own is Authloop [56].