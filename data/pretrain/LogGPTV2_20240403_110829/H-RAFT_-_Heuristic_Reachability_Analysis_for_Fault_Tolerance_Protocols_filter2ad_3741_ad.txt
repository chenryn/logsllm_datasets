Figure 3 shows - for each input element and each static
weight - the percentage of experiments leading to a fault
tolerance violating path if the respective weight value wi
(i=0 to 4 from left to right) for the displayed input element
has been set. The remaining weight combinations are av-
eraged.
In other words: The average over a “slice” of a
5-dimensional matrix is displayed. The results for the tran-
%
40
Timer
expired
Spont.
trans.
Signal
with
param.
Time−
step
Timer
ready
30
20
10
{{{{{
wi
wi
wi
wi
wi
Figure 3. Input Weights for Successful Detec-
tion.
sition input “timer expired” show a slight preference for a
small weight. The best performance has been observed for
a weight of zero. Through a medium value for the weight
of spontaneous transitions, the highest rate of ﬁnding a fault
tolerance violation is achieved. In constrast, “signals with
parameters” lead best to a fault tolerance violation when as-
signed a high weight. Apart from setting the weight value
of the transition input “timestep” to zero resulting in a very
low success rate, the performance is observed to be equally
distributed among the different weights. For the “timer
ready” input element, a weight of zero shows by far the best
chances to ﬁnd a fault tolerance violating path.
The results depicted in ﬁgure 3 show preferences for val-
ues of each input transition weight independent of the other
weights. In order to ﬁnd a promising combination of the in-
put weight values, we investigated the neighborhood of the
mesh point representing the combination of the weight val-
ues with the highest percentage of fault tolerance violating
paths found. Furthermore, the seemingly optimal weight
combination may be coincidental. With only a slight change
in the ordering of the weights, unsuitable weight combina-
tions may emerge. This is also investigated by considering
the complete neighborhood of the supposed optimum. If
the results in the neigborhood are close-to-optimal, the op-
timum weight combination can be recommended for inves-
tigation of a model. An example for the neighborhood of an
optimum in two dimensions is shown in ﬁgure 4. The inner
black dot represents the combination of the optimum weight
values. The circle comprises the neighbors of that point. By
“hits” (marked by a “+” in ﬁgure 4), we denote the mesh
points representing the weight combinations of an experi-
mental run that has found a fault tolerance violating path.
The other mesh points are referred to as “misses” (marked
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply. 
Spontaneous
Transition
w
4
w
3
w
2
w1
w0
+
+
+
+
+
+
+
+
w
0
w1 w2
w3
w4
Timestep
Figure 4. Neighborhood of Optimum Combi-
nation of Weights (2D-Example).
by a “−”). By counting the hits and misses within the neigh-
borhood we can measure the quality of our results.
For the transition input “timestep”, two optimum weight
values (w1 and w4) have been observed, thus two ﬁve di-
mensional neighborhoods have to be investigated. In both
cases the center-point (i.e. the optimum) has been a “hit”.
For the neighborhood surrounding the weight values w0,
w2, w4, w1, w0 (timer expired, spontaneous transition, sig-
nal with parameters, timestep, timer ready), the hit ratio was
70.37%. For the neigborhood of w0, w2, w4, w4, w0, the hit
ratio was even 95.24%.
The hit-ratios prove that the optimum selection for combin-
ing the weight values is a suitable criterion. Therefore, it is
the preferrable weight combination.
Applying the optimum and its neighborhood weight com-
binations to the FlexRay model, a hit-ratio of 95.24% has
been achieved. This substantiates the generality of the
weight selection.
For comparison, the random algorithm provided a hit-ratio
of only 0.01% for the pendulum protocol model. For the
FlexRay model, no hit out of 10000 tries has been observed.
Both, the exhaustive and bitstate algorithms, did not dis-
cover a fault tolerance violation path within the 48 CPU-
hours runtime limit. The extreme differences clearly under-
line the advantage of well-chosen transition weights.
3.6. Experiment:
Transition Input Weights
and Elimination of Signal-Consumption-Only
Transitions
The setup of the experiments presented in this section
is equal to the one of experiment 3.5. However, signal-
consumption-only transitions are eliminated. The results
for the independent transition input elements are summa-
rized in ﬁgure 5.
For the “timer expired” transition input, chances of ﬁnd-
ing a fault tolerance violating path are almost equally dis-
tributed among the weights. A small value greater than
zero indicates slightly higher chances for encountering such
path. The difference between the performances with (sec.
3.5) and without signal-consumption-only transitions is
Timer
expired
Spont.
trans.
Signal
with
param.
Time−
step
Timer
ready
30
20
10
{{{{{
wi
wi
wi
wi
wi
Figure 5. Input Weights for Successful Detec-
tion - Excluding SCOs.
marginal. Both show a slight preference for small weights.
Comparing the weight distributions of the spontaneous
transitions in the two experiments, the tendencies are equal.
Most violating paths have been found at a medium weight.
Considering signals with parameters as inputs, the re-
sults of the two experiments differ in one case. Assigning
a weight of zero shows unquestionably the lowest chances
of ﬁnding a fault tolerance violating path when signal-
consumption-only transitions are allowed (ﬁg. 3). However,
eliminating those transitions, a weight of zero leads to a
mid-range performance. Nevertheless, assigning the high-
est weight to “signals with parameters” provides the highest
chances in both experiments. Similar to the input “signals
with parameters”, the “timestep” input element shows an
increase from below 10% to over 20% for a weight of zero,
when eliminating signal-consumption-only transitions. The
other weight values are almost equally distributed.
The tendencies w.r.t. the “timer ready” input did not
change with elimination of signal-consumption-only transi-
tions. Lower weights still hit more fault tolerance violating
paths.
Investigation of the neighborhood around the optimum
weight combination (w1, w2, w4, w0, w0) yields a hit-ratio
of 88.98 percent for the pendulum protocol and of 81.48
percent for the FlexRay model. It can be concluded that the
optimum weight combination is indeed suitable for drasti-
cally increasing the chances of ﬁnding a fault tolerance vi-
olation. As mentioned in section 3.5, neither the random
algorithm, nor the bistate or exhaustive algorithm applied
to the FlexRay model discovered a fault tolerance violating
path within the given limit (10000 random repetitions, resp.
48 CPU-hours).
Comparing the total numbers of fault tolerance violating
paths when considering transition input weights, elimina-
tion of signal-consumption-only transitions leads to an in-
crease from 660 to 925 paths. This means 29.6% of the
weight combinations (instead of 21.12% for experiment
3.5) yield a “hit”. Thus, elimination of signal-consumption-
only transitions should be adopted.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply. 
3.7. Summary of Experiments
The experiments presented throughout section 3 show
a clear advantage of exploiting typical properties of fault
tolerance techniques as applied in the new methods of the
H-RAFT algorithm, when compared to the standard algo-
rithms. Width restriction has been shown to perform best,
when chosen small and no depth function df is applied
(sec. 3.1, 3.2). Experiment 3.3 has substantiated the ben-
eﬁts of restricting the number of ﬁring spontaneous tran-
sitions in faulty processes. While elimination of signal-
consumption-only transitions has not exhibited advantages
in experiment 3.4, the beneﬁts were observed if input tran-
sition weights were applied (sec. 3.6). Experiments 3.5 and
3.6 show that combining independent optimal weights dras-
tically increase the chances of ﬁnding a fault tolerance vio-
lation path. This is even true for sub-optimal weights in the
surrounding of the optimal weights. Applying the (sub-)
optimal weight combinations found for the pendulum pro-
tocol model to the FlexRay model yields the same convinc-
ing results. This substantiates the generality of the H-RAFT
algorithm.
4. Conclusion and Future Work
We presented a novel heuristic for efﬁcient reachability
analysis of fault tolerance models. The heuristic exploits
common fault tolerance properties resulting in transition
and global state weights. These weights can be determined
off-line and are independent of the speciﬁc model. The ap-
proach has been implemented within the RAFT tool. It has
been investigated for a small model and a large-scale indus-
trial model and was compared to the performance of stan-
dard algorithms. The results show a clear preference for the
novel H-RAFT algorithm.
Our current work comprises making the RAFT tool more
convenient. Additional models of different protocols will
be considered. Furthermore, the action weights (sec. 2.2)
and additional weight criteria will be investigated as well.
As a special feature, improvements of the weights through
self-learning techniques will be provided.
Acknowledgements
The author likes to thank Klaus Echtle for his continuous
support and many invaluable discussions.
References
[1] D. Avresky, J. Arlat, J.-C. Laprie, and Y. Crouzet. Fault
Injection for the Formal Testing of Fault Tolerance. In Pro-
ceedings of FTCS-22, pages 345–354. IEEE Press, 1992.
[2] S. Ayache, E. Conquet, P. Humbert, C. Rodriguez, J. Sifakis,
and R. Gerlich. Formal Methods for the Validation of Fault
Tolerance in Autonomous Spacecraft. In FTCS, pages 353–
357, 1996.
[3] F. Bause and P. Kritzinger. Stochastic Petri-nets. Viehweg
publishing house, 2nd edition, 2002.
[4] R. Belschner,
J. Berwanger, C. Bracklo, C. Ebner,
B. Hedenetz, W. Kuffner, P. Lohrmann, J. Minuth, M. Peller,
A. Schedl, and V. Seefried. Requirements Towards an Ad-
vanced Communication System for Fault-Tolerant Automo-
tive Applications. In 9th Intl. Conf. on Electronic Systems
for Vehicles, 2000. (in German).
[5] C. Bernardeschi, A. Fantechi, and S. Gnesi. Model checking
fault tolerant systems. Software Testing, Veriﬁcation Relia-
bility, 12(4):251–275, 2002.
[6] S. B¨ohm and K. Echtle. State Space Reduction in SDL
In Proceedings of the
Models of Fault-Tolerant Systems.
IPDPS’04, page 206. IEEE Press, 2004.
[7] E. Clarke, O. Grumberg, and D. Peled. Model Checking.
MIT Press, Cambridge, 1999. Chapter 10.
[8] F. Consortium.
FlexRay International Workshop.
http://www.ﬂexray.com, 2002.
[9] M. Diefenbruch, J. Hintelmann, and B. M¨uller-Closter-
mann. The QUEST approach for the Performance Evalu-
ation of SDL-Systems.
In R. Gotzhein and J. Bredereke,
editors, Proceedings of IFIP TC6. Chapman & Hall, 1996.
[10] K. Echtle. Fault Masking and Sequence Agreement by a
Voting Protocol with Low Message Number. In Proceedings
of the RDS-6, pages 149–160. IEEE Press, 1987.
[11] K. Echtle. Distance Agreement Protocols. In Proceedings
of FTCS’89, pages 191–198, 1989.
[12] K. Echtle and T. Nikolov. Testing Safety Techniques by
Injection of Systematically Selected Errors. In ARCS ’99,
pages 127–140. Universit¨at Jena, 1999.
[13] International Telecommunication Union.
Speciﬁcation
and Description Language (SDL), ITU-T Recommendation
Z.100. Geneva, Switzerland, 1993.
[14] P. Kessler.
Implicit Fault Modeling with the Speciﬁcation
Language SDL. In Proceedings of ARCS’02, pages 81–90,
2002.
[15] J. J. Li and J. R. Horgan. A Tool Suite for Diagnosis and
Testing of Software Design Speciﬁcations. In Proceedings
of DSN’00, pages 295–304. IEEE Computer Society, 2000.
[16] P. Pingree and E. Benowitz. Experiences in Integrating
Auto-Translated State-Chart Designs for Model Checking.
In Proceedings of the DSN’04 (Supplemental), pages W72–
W74. IEEE Press, 2003.
[17] S. Poledna. Fault Tolerance in Safety Critical Automotive
Applications: Cost of Agreement as a Limiting Factor. In
Proceedings of FTCS-25, page 73, 1995.
[18] W. Steiner, J. Rushby, M. Sorea, and H. Pfeifer. Model
Checking a Fault-Tolerant Startup Algorithm: From Design
Exploration To Exhaustive Fault Simulation. In Proceedings
of the DSN’04, pages 189–198. IEEE Press, 2004.
[19] Telelogic AB. Telelogic Tau 4.2 SDL Suite; Getting Started.
Telelogic, Malm¨o Sweden, 2001.
[20] T. Yokogawa, T. Tsuchiya, and T. Kikuno. Automatic Veriﬁ-
cation of Fault Tolerance Using Model Checking. In PRDC,
pages 95–102. IEEE Press, 2001.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:53:01 UTC from IEEE Xplore.  Restrictions apply.