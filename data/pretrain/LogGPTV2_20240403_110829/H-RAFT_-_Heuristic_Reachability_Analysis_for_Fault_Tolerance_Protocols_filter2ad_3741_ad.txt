### Figure 3: Input Weights for Successful Detection

Figure 3 illustrates, for each input element and each static weight, the percentage of experiments that result in a fault tolerance violating path when the respective weight value \( w_i \) (where \( i = 0 \) to 4 from left to right) is set for the displayed input element. The remaining weight combinations are averaged. In essence, the figure displays the average over a "slice" of a 5-dimensional matrix.

The results for the transition input "timer expired" show a slight preference for a small weight, with the best performance observed at a weight of zero. For the "spontaneous transitions," a medium weight value yields the highest rate of finding a fault tolerance violation. Conversely, "signals with parameters" lead to the highest fault tolerance violation rate when assigned a high weight. Setting the weight of the "timestep" transition input to zero results in a very low success rate, while other weights show more evenly distributed performance. For the "timer ready" input, a weight of zero provides the best chances of finding a fault tolerance violating path.

These results indicate preferences for specific values of each input transition weight, independent of the other weights. To identify a promising combination of input weights, we examined the neighborhood of the mesh point representing the combination of weight values with the highest percentage of fault tolerance violating paths. This approach helps to ensure that the optimal weight combination is not coincidental, as even a slight change in the ordering of weights can produce unsuitable combinations.

### Figure 4: Neighborhood of Optimum Combination of Weights (2D-Example)

Figure 4 provides an example of the neighborhood of an optimum in two dimensions. The inner black dot represents the combination of the optimal weight values, and the circle encompasses the neighboring points. "Hits" (marked by a "+") denote the mesh points where a fault tolerance violating path was found, while "misses" (marked by a "-") represent the points where no such path was found. By counting the hits and misses within the neighborhood, we can measure the quality of our results.

For the "timestep" transition input, two optimal weight values (\( w_1 \) and \( w_4 \)) were observed, necessitating the investigation of two 5-dimensional neighborhoods. In both cases, the center-point (the optimum) was a "hit." For the neighborhood surrounding the weight values \( w_0, w_2, w_4, w_1, w_0 \) (corresponding to "timer expired," "spontaneous transition," "signal with parameters," "timestep," and "timer ready"), the hit ratio was 70.37%. For the neighborhood of \( w_0, w_2, w_4, w_4, w_0 \), the hit ratio was even higher at 95.24%.

The high hit-ratios confirm that the optimal selection of combined weight values is a suitable criterion. Applying this optimal and its neighboring weight combinations to the FlexRay model, a hit-ratio of 95.24% was achieved, substantiating the generality of the weight selection.

### Comparison with Other Algorithms

For comparison, the random algorithm provided a hit-ratio of only 0.01% for the pendulum protocol model, and no hits were observed in 10,000 tries for the FlexRay model. Both the exhaustive and bitstate algorithms failed to discover a fault tolerance violation path within the 48 CPU-hour runtime limit. These extreme differences highlight the advantage of well-chosen transition weights.

### Experiment: Transition Input Weights and Elimination of Signal-Consumption-Only Transitions

In this experiment, the setup is identical to the previous one, but signal-consumption-only transitions are eliminated. The results for the independent transition input elements are summarized in Figure 5.

For the "timer expired" transition input, the chances of finding a fault tolerance violating path are almost equally distributed among the weights, with a small value greater than zero indicating slightly higher chances. The difference between the performances with and without signal-consumption-only transitions is marginal, both showing a slight preference for small weights.

The weight distributions for spontaneous transitions in the two experiments are similar, with most violating paths found at a medium weight. For signals with parameters, assigning a weight of zero shows the lowest chances of finding a fault tolerance violating path when signal-consumption-only transitions are allowed. However, eliminating these transitions, a weight of zero leads to mid-range performance. Assigning the highest weight to "signals with parameters" provides the highest chances in both experiments. The "timestep" input element shows an increase from below 10% to over 20% for a weight of zero when signal-consumption-only transitions are eliminated, with other weight values almost equally distributed.

The tendencies for the "timer ready" input did not change with the elimination of signal-consumption-only transitions, with lower weights still yielding more fault tolerance violating paths.

Investigation of the neighborhood around the optimal weight combination (\( w_1, w_2, w_4, w_0, w_0 \)) yields a hit-ratio of 88.98% for the pendulum protocol and 81.48% for the FlexRay model. This confirms that the optimal weight combination significantly increases the chances of finding a fault tolerance violation.

Eliminating signal-consumption-only transitions leads to an increase from 660 to 925 fault tolerance violating paths, meaning 29.6% of the weight combinations (compared to 21.12% in the previous experiment) yield a "hit." Thus, the elimination of signal-consumption-only transitions should be adopted.

### Summary of Experiments

The experiments presented in Section 3 demonstrate the clear advantages of exploiting typical properties of fault tolerance techniques in the H-RAFT algorithm compared to standard algorithms. Width restriction performs best with a small setting and no depth function applied. Restricting the number of firing spontaneous transitions in faulty processes also shows benefits. While eliminating signal-consumption-only transitions did not exhibit advantages in one experiment, combining independent optimal weights drastically increases the chances of finding a fault tolerance violation path. Applying the (sub-)optimal weight combinations found for the pendulum protocol model to the FlexRay model yields similarly convincing results, substantiating the generality of the H-RAFT algorithm.

### Conclusion and Future Work

We have presented a novel heuristic for efficient reachability analysis of fault tolerance models, which exploits common fault tolerance properties to determine transition and global state weights. These weights can be determined offline and are independent of the specific model. The approach has been implemented in the RAFT tool and tested on both a small model and a large-scale industrial model, showing a clear preference for the H-RAFT algorithm.

Future work includes making the RAFT tool more user-friendly, considering additional models of different protocols, and investigating action weights and additional weight criteria. Self-learning techniques will also be explored to improve the weights.

### Acknowledgements

The author would like to thank Klaus Echtle for his continuous support and invaluable discussions.

### References

[1] D. Avresky, J. Arlat, J.-C. Laprie, and Y. Crouzet. Fault Injection for the Formal Testing of Fault Tolerance. In Proceedings of FTCS-22, pages 345–354. IEEE Press, 1992.
[2] S. Ayache, E. Conquet, P. Humbert, C. Rodriguez, J. Sifakis, and R. Gerlich. Formal Methods for the Validation of Fault Tolerance in Autonomous Spacecraft. In FTCS, pages 353–357, 1996.
[3] F. Bause and P. Kritzinger. Stochastic Petri-nets. Viehweg publishing house, 2nd edition, 2002.
[4] R. Belschner, J. Berwanger, C. Bracklo, C. Ebner, B. Hedenetz, W. Kuffner, P. Lohrmann, J. Minuth, M. Peller, A. Schedl, and V. Seefried. Requirements Towards an Advanced Communication System for Fault-Tolerant Automotive Applications. In 9th Intl. Conf. on Electronic Systems for Vehicles, 2000. (in German).
[5] C. Bernardeschi, A. Fantechi, and S. Gnesi. Model checking fault tolerant systems. Software Testing, Verification Reliability, 12(4):251–275, 2002.
[6] S. Böhm and K. Echtle. State Space Reduction in SDL Models of Fault-Tolerant Systems. In Proceedings of the IPDPS’04, page 206. IEEE Press, 2004.
[7] E. Clarke, O. Grumberg, and D. Peled. Model Checking. MIT Press, Cambridge, 1999. Chapter 10.
[8] F. Consortium. FlexRay International Workshop. http://www.flexray.com, 2002.
[9] M. Diefenbruch, J. Hintelmann, and B. Müller-Clostermann. The QUEST approach for the Performance Evaluation of SDL-Systems. In R. Gotzhein and J. Bredereke, editors, Proceedings of IFIP TC6. Chapman & Hall, 1996.
[10] K. Echtle. Fault Masking and Sequence Agreement by a Voting Protocol with Low Message Number. In Proceedings of the RDS-6, pages 149–160. IEEE Press, 1987.
[11] K. Echtle. Distance Agreement Protocols. In Proceedings of FTCS’89, pages 191–198, 1989.
[12] K. Echtle and T. Nikolov. Testing Safety Techniques by Injection of Systematically Selected Errors. In ARCS ’99, pages 127–140. Universität Jena, 1999.
[13] International Telecommunication Union. Specification and Description Language (SDL), ITU-T Recommendation Z.100. Geneva, Switzerland, 1993.
[14] P. Kessler. Implicit Fault Modeling with the Specification Language SDL. In Proceedings of ARCS’02, pages 81–90, 2002.
[15] J. J. Li and J. R. Horgan. A Tool Suite for Diagnosis and Testing of Software Design Specifications. In Proceedings of DSN’00, pages 295–304. IEEE Computer Society, 2000.
[16] P. Pingree and E. Benowitz. Experiences in Integrating Auto-Translated State-Chart Designs for Model Checking. In Proceedings of the DSN’04 (Supplemental), pages W72–W74. IEEE Press, 2003.
[17] S. Poledna. Fault Tolerance in Safety Critical Automotive Applications: Cost of Agreement as a Limiting Factor. In Proceedings of FTCS-25, page 73, 1995.
[18] W. Steiner, J. Rushby, M. Sorea, and H. Pfeifer. Model Checking a Fault-Tolerant Startup Algorithm: From Design Exploration To Exhaustive Fault Simulation. In Proceedings of the DSN’04, pages 189–198. IEEE Press, 2004.
[19] Telelogic AB. Telelogic Tau 4.2 SDL Suite; Getting Started. Telelogic, Malmö Sweden, 2001.
[20] T. Yokogawa, T. Tsuchiya, and T. Kikuno. Automatic Verification of Fault Tolerance Using Model Checking. In PRDC, pages 95–102. IEEE Press, 2001.