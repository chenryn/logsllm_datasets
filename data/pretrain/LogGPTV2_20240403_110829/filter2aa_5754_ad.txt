under \f(CW\*(C`use warnings\*(C'\fR, you can promote the warning to an error.
.PP
.Vb 1
\&        use warnings FATAL => qw(uninitialized);
.Ve
.Sh "为什么找不到包含在同一个文件中的方法？"
.IX Subsection "Why can't a method included in this same file be found?"
一些可能的原因：你用的继承给搞混了、你拼错了该方法的名字，或是物件的类别错误。这些事在 perltoot里都有更详尽的说明。同时你也可以用 \f(CW\*(C`print ref($object)\*(C'\fR 来找出 \f(CW$object\fR 这个物件是被归到哪个类别底下。
.PP
另一个可能的原因是你在 Perl还不知道这个包裹 (package)存在之前便将某个类别名称在间接式物件语法中使用 (例如 \f(CW\*(C`find Guru "Samy"\*(C'\fR)。最好是在开始使用你的包裹前，先确定都已经先把它们定义好了，如果你用的是 use 而非 require的话，这件事便会自动处理好。不然的话，确定你使用箭头式语法 (例如，\f(CW\*(C`Guru\->find("Samy")\*(C'\fR))。在perlobj 里面对于物件的记号有详尽解释。
.PP
Make sure to read about creating modules in perlmod and
the perils of indirect objects in \*(L"Method Invocation\*(R" in perlobj.
.Sh "如何找到当前的包？"
.IX Subsection "How can I find out my current package?"
如果只是一个随意的程式的话，你可以用下面的方法找出目前正被编译的包裹为何：
.PP
.Vb 1
\&    my $packname = __PACKAGE__;
.Ve
.PP
但如果是一个方法的话，而且印出的错误讯息中要包含呼叫此方法的物件 (不见得就是把这个方法编译进去的那个物件)则：
.PP
.Vb 5
\&    sub amethod {
\&        my $self  = shift;
\&        my $class = ref($self) || $self;
\&        warn "called me from a $class object";
\&    }
.Ve
.Sh "如何注释掉大块的 perl 代码？"
.IX Subsection "How can I comment out a large block of perl code?"
用内嵌 POD格式的方法把程式码变注解。将要注释掉的块包含在 \s-1POD\s0 标记内, 例如 \f(CW\*(C`=for nobody\*(C'\fR 和 \f(CW\*(C`=cut\*(C'\fR
(标志着 \s-1POD\s0 块的结束).
.PP
.Vb 1
\&    # 这是程式
.Ve
.PP
.Vb 1
\&    =for nobody
.Ve
.PP
.Vb 1
\&    all of this stuff
.Ve
.PP
.Vb 2
\&    接下来此处所有的文字都会被忽略
.Ve
.PP
.Vb 1
\&    =cut
.Ve
.PP
.Vb 1
\&    # program continues
.Ve
.PP
The pod directives cannot go just anywhere.  You must put a
pod directive where the parser is expecting a new statement,
not just in the middle of an expression or some other
arbitrary grammar production.
.PP
See perlpod for more details.
.Sh "How do I clear a package?"
.IX Subsection "How do I clear a package?"
Use this code, provided by Mark-Jason Dominus:
.PP
.Vb 17
\&    sub scrub_package {
\&        no strict 'refs';
\&        my $pack = shift;
\&        die "Shouldn't delete main package"
\&            if $pack eq "" || $pack eq "main";
\&        my $stash = *{$pack . '::'}{HASH};
\&        my $name;
\&        foreach $name (keys %$stash) {
\&            my $fullname = $pack . '::' . $name;
\&            # Get rid of everything with that name.
\&            undef $$fullname;
\&            undef @$fullname;
\&            undef %$fullname;
\&            undef &$fullname;
\&            undef *$fullname;
\&        }
\&    }
.Ve
.PP
Or, if you're using a recent release of Perl, you can
just use the \fISymbol::delete_package()\fR function instead.
.Sh "How can I use a variable as a variable name?"
.IX Subsection "How can I use a variable as a variable name?"
Beginners often think they want to have a variable contain the name
of a variable.
.PP
.Vb 3
\&    $fred    = 23;
\&    $varname = "fred";
\&    ++$$varname;         # $fred now 24
.Ve
.PP
This works \fIsometimes\fR, but it is a very bad idea for two reasons.
.PP
The first reason is that this technique \fIonly works on global
variables\fR.  That means that if \f(CW$fred\fR is a lexical variable created
with \fImy()\fR in the above example, the code wouldn't work at all: you'd
accidentally access the global and skip right over the private lexical
altogether.  Global variables are bad because they can easily collide
accidentally and in general make for non-scalable and confusing code.
.PP
Symbolic references are forbidden under the \f(CW\*(C`use strict\*(C'\fR pragma.
They are not true references and consequently are not reference counted
or garbage collected.
.PP
The other reason why using a variable to hold the name of another
variable is a bad idea is that the question often stems from a lack of
understanding of Perl data structures, particularly hashes.  By using
symbolic references, you are just using the package's symbol-table hash
(like \f(CW%main::\fR) instead of a user-defined hash.  The solution is to
use your own hash or a real reference instead.
.PP
.Vb 3
\&    $USER_VARS{"fred"} = 23;
\&    $varname = "fred";
\&    $USER_VARS{$varname}++;  # not $$varname++
.Ve
.PP
There we're using the \f(CW%USER_VARS\fR hash instead of symbolic references.
Sometimes this comes up in reading strings from the user with variable
references and wanting to expand them to the values of your perl
program's variables.  This is also a bad idea because it conflates the
program-addressable namespace and the user-addressable one.  Instead of
reading a string and expanding it to the actual contents of your program's
own variables:
.PP
.Vb 2
\&    $str = 'this has a $fred and $barney in it';
\&    $str =~ s/(\e$\ew+)/$1/eeg;             # need double eval
.Ve
.PP
it would be better to keep a hash around like \f(CW%USER_VARS\fR and have
variable references actually refer to entries in that hash:
.PP
.Vb 1
\&    $str =~ s/\e$(\ew+)/$USER_VARS{$1}/g;   # no /e here at all
.Ve
.PP
That's faster, cleaner, and safer than the previous approach.  Of course,
you don't need to use a dollar sign.  You could use your own scheme to
make it less confusing, like bracketed percent symbols, etc.
.PP
.Vb 2
\&    $str = 'this has a %fred% and %barney% in it';
\&    $str =~ s/%(\ew+)%/$USER_VARS{$1}/g;   # no /e here at all
.Ve
.PP
Another reason that folks sometimes think they want a variable to
contain the name of a variable is because they don't know how to build
proper data structures using hashes.  For example, let's say they
wanted two hashes in their program: \f(CW%fred\fR and \f(CW%barney\fR, and that they
wanted to use another scalar variable to refer to those by name.
.PP
.Vb 2
\&    $name = "fred";
\&    $$name{WIFE} = "wilma";     # set %fred
.Ve
.PP
.Vb 2
\&    $name = "barney";
\&    $$name{WIFE} = "betty";     # set %barney
.Ve
.PP
This is still a symbolic reference, and is still saddled with the
problems enumerated above.  It would be far better to write:
.PP
.Vb 2
\&    $folks{"fred"}{WIFE}   = "wilma";
\&    $folks{"barney"}{WIFE} = "betty";
.Ve
.PP
And just use a multilevel hash to start with.
.PP
The only times that you absolutely \fImust\fR use symbolic references are
when you really must refer to the symbol table.  This may be because it's
something that can't take a real reference to, such as a format name.
Doing so may also be important for method calls, since these always go
through the symbol table for resolution.
.PP
In those cases, you would turn off \f(CW\*(C`strict 'refs'\*(C'\fR temporarily so you
can play around with the symbol table.  For example:
.PP
.Vb 5
\&    @colors = qw(red blue green yellow orange purple violet);
\&    for my $name (@colors) {
\&        no strict 'refs';  # renege for the block
\&        *$name = sub { "@_" };
\&    }
.Ve
.PP
All those functions (\fIred()\fR, \fIblue()\fR, \fIgreen()\fR, etc.) appear to be separate,
but the real code in the closure actually was compiled only once.
.PP
So, sometimes you might want to use symbolic references to directly
manipulate the symbol table.  This doesn't matter for formats, handles, and
subroutines, because they are always global\*(--you can't use \fImy()\fR on them.
For scalars, arrays, and hashes, though\*(--and usually for subroutines\*(--
you probably only want to use hard references.
.ie n .Sh "What does ""bad interpreter"" mean?"
.el .Sh "What does ``bad interpreter'' mean?"
.IX Subsection "What does bad interpreter mean?"
The \*(L"bad interpreter\*(R" message comes from the shell, not perl.  The
actual message may vary depending on your platform, shell, and locale
settings.
.PP
If you see \*(L"bad interpreter \- no such file or directory\*(R", the first
line in your perl script (the \*(L"shebang\*(R" line) does not contain the
right path to perl (or any other program capable of running scripts). 
Sometimes this happens when you move the script from one machine to
another and each machine has a different path to perl\-\-\-/usr/bin/perl
versus /usr/local/bin/perl for instance.
.PP
If you see \*(L"bad interpreter: Permission denied\*(R", you need to make your
script executable.
.PP
In either case, you should still be able to run the scripts with perl
explicitly:
.PP
.Vb 1
\&        % perl script.pl
.Ve
.PP
If you get a message like \*(L"perl: command not found\*(R", perl is not in
your \s-1PATH\s0, which might also mean that the location of perl is not
where you expect it so you need to adjust your shebang line.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-2002 Tom Christiansen and Nathan Torkington.
All rights reserved.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.
.SH "译者"
.B 陈彦铭，萧百龄，两只老虎工作室