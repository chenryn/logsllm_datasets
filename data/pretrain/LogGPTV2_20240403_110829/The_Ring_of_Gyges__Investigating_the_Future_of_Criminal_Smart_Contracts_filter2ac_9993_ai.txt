antees through deposits and timeout procedures, while
preventing selective withholding. Figure 17 illustrates
the contract code. The main goal of providing this code
is to illustrate how fast it could be to write such contracts.
The contract in Figure 17 mainly considers a leaker
who announces the ownership of the leaked material (e-
mails, photos, secret documents, .. etc), and reveals a
random subset of the encryption keys at some point to
convince users of the ownership.
Interested users can
then deposit donations. In order for the leaker to get the
reward from the contract, all the rest of the keys must be
provided at the same time, before a deadline.
To ensure incentive compatability, the leaker is re-
quired by the contract in the beginning to deposit an
amount of money, that is only retrievable if complied
with the protocol. Also, for users to feel safe to de-
posit money, a timeout mechanism is used, such that if
the leaker does not provide a response in time, the users
will be able to withdraw the donations.
F.3 Private Secret-Leakage Contracts
In Section 4, we consider a public leakage model in
which C collects donations, and when satisﬁed with total
amount donated, leaks a secret to the public. In a varia-
tion in this appendix, we can consider a private leakage
model in which C leaks a secret privately to a purchaser
P. A simple modiﬁcation to the blackbox protocol sup-
ports this case. In particular, if C accepts P’s bid, it com-
putes the pair (ct,π) as follows:
• ct := Enc(pkP , msk,r), for random coins r and where
pkP denotes purchaser P’s (pseudonymous) public
key.
• π is a NIZK proof for the following statement:
∃(msk,r0,r) s.t. (c0 = Enc(pk, msk,r0))
∧ (ct = Enc(pkP , msk,r))
When C submits (ct,π) to the contract, the contract
veriﬁes the NIZK proof π, and if it is correct, sends P’s
deposited bid to C. At this point, the purchaser P can
decrypt the master secret key msk and then the unopened
segments.
The above private leakage protocol can be proven se-
cure in a similar manner as our public leakage contract.
A practical version for Ethereum. An efﬁcient instan-
tiation of this protocol is possible using a veriﬁable ran-
dom function (VRF). and veriﬁable encryption (VE). We
sketch the construction informally here (without proof).
We then describe a speciﬁc pair of primitive choices
(a VRF by Chaum and Pedersen [31] and VE by Ca-
menisch and Shoup [25]) that can be efﬁciently realized
in Ethereum.
Brieﬂy, a VRF is a public-key primitive with private
/ public key pair (skvrf, pkvrf) and an associated pseudo-
random function F. It takes as input a value i and outputs
a pair (σ ,π), where σ = Fskvrf(i), and π is a NIZK proof
of correctness of σ. The NIZK π can be veriﬁed using
pkvrf.
A VE scheme is also a public-key primitive, with pri-
vate / public key pair (skve, pkve). It takes as input a mes-
sage m and outputs a ciphertext / proof pair (ct,π), where
π is a NIZK proof that ct = encpkve[m] for a message m
that satisﬁes some publicly deﬁned property θ.
Our proposed construction, then, uses a VRF to gener-
ate (symmetric) encryption keys for segments of M such
that κi = Fskvr f (i). That is, msk = skvr f . The correspond-
ing NIZK proof π is used in the Conﬁrm step of the
contract to verify that revealed symmetric keys are cor-
rect. A VE, then, is used to generate a ciphertext ct on
msk = skvr f under the public key pkP of the purchaser.
The pair (ct,π), is presented in the Accept step of the
contract. The contract can then verify the correctness of
ct.
A simple and practical VRF due to Chaum and Peder-
sen [31] is one that for a group G of order p with gen-
erator g (and with some reasonable restrictions on p),
msk = skvr f = x, for x ∈R Zp and pkvr f = gx. Then
Fskvrf (i) = H(i)x for a hash function H : {0,1}∗ → G,
while π is a Schnorr-signature-type NIZKP. (Security re-
lies on the DDH assumption on G and the ROM for H.)
A corresponding, highly efﬁcient VE scheme of Ca-
menisch and Shoup [25] permits encryption of a discrete
log over a group G; that is, it supports veriﬁable encryp-
tion of a message x, where for a public value y, the prop-
erty θG(y) is x = dlog(y) over G. Thus, the scheme sup-
ports veriﬁable encryption of msk = skvr f = x, where π
is a NIZK proof that x is the private key corresponding
to pkvr f = gx. (Security relies on Paillier’s decision com-
posite residuosity assumption.)
Serpent, the scripting language for Ethereum, offers
(beta) support for modular arithmetic. Thus, the Chaum-
Pedersen VRF and Camensich-Shoup VE can be efﬁ-
ciently implemented in Ethereum, showing that private
leakage contracts are practical in Ethereum.
G Calling-Card Crimes
In this appendix, we explain how to construct CSCs for
crimes beyond the website defacement achieved by Sit-
eDeface.
For other crimes,
In SiteDeface, the calling card cc is high-entropy—
drawn uniformly (in the ROM) from a space of size
|CC| = 2256.
the space CC can
be much smaller. Suppose, for example, that cc for
an assassination of a public ﬁgure X is a day and
city. Then an adversary can make a sequence of on-
line guesses at cc with corresponding commitments
vcc(1), vcc(2), . . . , vcc(n) such that with high probability
for relatively small n (on the order of thousands), some
vcc(i) will contain the correct value cc. (Note that com-
mit conceals cc, but does not prevent guessing attacks
against it.) These guesses, moreover, can potentially be
submitted in advance of the calling call cc of a true perpe-
trator P, resulting in theft of the reward and undermining
commission-fairness.
There are two possible, complementary ways to ad-
dress this problem. One is to enlarge the space CC by
tailoring attacks to include hard-to-guess details. For ex-
ample, the contract might support commitment to a one-
time, esoteric pseudonym Y used to claim the attack with
the media, e.g., “Police report a credible claim by a group
calling itself the [Y =] ‘Star-Spangled Guerilla Girls’.”
Or a murder might involve a rare poison (Y = Polonium-
210 + strychnine).
26
Another option is to require a commitment vcc to carry
a deposit $deposit for the contract that is forfeit to C
if there is no successful claim against vcc after a pre-
determined time. Treating cc as a random variable, let
p = 2−H∞[cc]. Provided that $deposit > p× $reward, ad-
versaries are economically disincentivized from brute-
force guessing of calling cards. Commission-fairness
then relies on economic rationality.
Finally, we note that it is also possible to implement
anti-CSCs using calling cards. For example, an anony-
mous reward could be made available for returning a
stolen painting, informing on a criminal, etc.
H Formal Deﬁnition for Calling-Card
Criminal Contracts
We formally describe the ideal program for Calling-Card
Criminal Contracts in Figure 18. We make the simpli-
fying assumption that the trusted data feed DataFeed
emits pre-processed calling-card data that are directly
checked by the program.
It should also be noted that
the Params argument denotes a general list of attributes
that are adapted to the context. For example, in the con-
text of the SiteDeface CSC discussed earlier (Figure 5),
Params will include the service public key, the webpage
URL, and the desired statement.
Ideal-CallingCard
Init: Set state := INIT.
receiving
Create: Upon
DataFeed,Tend) from some contractor C:
(“create”,
$reward, Params,
(“create”,$reward,Params, DataFeed,
Notify
Tend,C) to S.
Assert ledger[C] ≥ $reward.
ledger[C] := ledger[C]− $reward
Set state := CREATED.
Commit: Upon receiving (“commit”, cc) from some perpetra-
tor P:
Assert state = CREATED.
Notify (“commit”,P) to S.
Assert cc was not sent before by any other perpe-
trator.
Assert this is the ﬁrst commit received from P.
Store (P, cc).
Reward: Upon receiving (“reward”, Params(cid:48), cc(cid:48))
from
DataFeed:
Assert state (cid:54)= ABORTED.
Notify (“reward”,Params(cid:48), cc, DataFeed) to S.
Assert Params(cid:48) = Params
Find the Perpetrator P who sent a (“commit”, cc)
such that cc = cc(cid:48).
If P (cid:54)= nil
Set ledger[P] := ledger[P] + $reward
else
Set ledger[C] := ledger[C] + $reward
Set state := ABORTED.
Timer: If state = CREATED and current time T > Tend:
Set ledger[C] := ledger[C] + $reward
Set state := ABORTED.
Figure 18: Ideal program for a generalized calling card
CSC.
27
data l e a k e r _ a d d r e s s
data n u m _ c h u n k s
data r e v e a l e d _ s e t _ s i z e
data T_end
data deposit
data r e v e a l _ b l o c k _ n u m b e r
data s e l e c t e d _ s a m p l e []
data k e y _ h a s h e s []
data d o n a t i o n s []
data s u m _ d o n a t i o n s
data n u m _ d o n o r s
data f i n a l i z e d
def init () :
self . l e a k e r _ a d d r e s s = msg . sender
# A leaker commits to the hashes of the
e n c r y p t i o n keys , and sets the
a n n o u n c e m e n t details
def commit ( k e y _ h a s h e s : arr , r e v e a l e d _ s e t _ s i z e
, r e v e a l _ b l o c k _ n u m b e r , T_end ,
d i s t r i b u t i o n _ a d d r e s s ) :
# A s s u m i n g a deposit of a high value from
the leaker to d i s c o u r a g e a b o r t i n g
if ( msg . value >= 1000000 and msg . sender ==
self . l e a k e r _ a d d r e s s and self . deposit == 0
and r e v e a l e d _ s e t _ s i z e  0 and block . t i m e s t a m p  self . T_end and self .
f i n a l i z e d == 0 and v > 0) :
send ( msg . sender , v + self . deposit / self .
n u m _ d o n o r s )
return (0)
else :
return ( -1)
Figure 17: Public leakage contract implemented on top of Ethereum.
28