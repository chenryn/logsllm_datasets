    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看
    ["基于目录的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#directory-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于目录的存储池参数"){.xref}。
2.  [**创建存储池目标路径**]{.strong}
    使用 `virsh pool-build`{.literal}
    命令为预格式化的文件系统存储池创建存储池目标路径，初始化存储源设备，然后定义数据的格式。
    ``` literallayout
    # virsh pool-build guest_images_dir
      Pool guest_images_dir built
    # ls -la /guest_images
      total 8
      drwx------.  2 root root 4096 May 31 19:38 .
      dr-xr-xr-x. 25 root root 4096 May 31 19:38 ..
    ```
3.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令验证池是否已创建。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_dir     inactive   no
    ```
4.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_dir
      Pool guest_images_dir started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
5.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，使用 `virsh`{.literal}
    命令定义的存储池不会被设置为在每次 libvirtd 启动时自动启动。使用
    `virsh pool-autostart`{.literal} 命令将存储池配置为 autostart。
    ``` literallayout
    # virsh pool-autostart guest_images_dir
      Pool guest_images_dir marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令来验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_dir
      Name:           guest_images_dir
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-disk-based-storage-pools-using-the-cli_assembly_managing-virtual-machine-storage-pools-using-the-cli}使用 CLI 创建基于磁盘的存储池 {.title}
:::
在基于磁盘的存储池中，池基于磁盘分区。这很有用，例如，当您想让整个磁盘分区专用为虚拟机(VM)存储时。您可以使用
`virsh`{.literal} 实用程序创建基于磁盘的存储池。
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于磁盘的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'disk' supported='yes'"
    ```
    如果命令显示任何输出结果，则代表支持基于磁盘的池。
-   准备一个用于基础存储池的设备。因此，首选分区（例如
    `/dev/sdb1）`{.literal}或 LVM 卷。如果您提供对整个磁盘或块设备（例如
    `/dev/sdb`{.literal}）的写入访问权限的虚拟机，则虚拟机可能会对其分区或创建自己的
    LVM 组。这可能导致主机上的系统错误。
    但是，如果您需要将整个块设备用于存储池，红帽建议防止设备中的所有重要分区被
    GRUB 的 `os-prober`{.literal} 功能保护。要做到这一点，请编辑
    `/etc/default/grub`{.literal} 文件并应用以下配置之一：
    ::: itemizedlist
    -   禁用 `os-prober`{.literal}。
        ``` screen
        GRUB_DISABLE_OS_PROBER=true
        ```
    -   防止 `os-prober`{.literal} 发现特定分区。例如：
        ``` screen
        GRUB_OS_PROBER_SKIP_LIST="5ef6313a-257c-4d43@/dev/sdb1"
        ```
    :::
-   创建存储池前备份所选存储设备中的任何数据。根据所使用的
    `libvirt`{.literal}
    版本，在存储池中指定一个磁盘可能会重新格式化并清除当前存储在磁盘设备上的所有数据。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal}
    命令定义和创建磁盘类型存储池。以下示例创建一个名为
    `guest_images_disk`{.literal} 的存储池，它使用
    [**/dev/sdb**]{.strong} 设备并挂载到 /dev 目录。
    ``` literallayout
    # virsh pool-define-as guest_images_disk disk --source-format=gpt --source-dev=/dev/sdb --target /dev
    Pool guest_images_disk defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看
    ["基于磁盘的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#disk-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于磁盘的存储池参数"){.xref}。
2.  [**创建存储池目标路径**]{.strong}
    使用 `virsh pool-build`{.literal}
    命令为预格式化的文件系统存储池创建存储池目标路径，初始化存储源设备，然后定义数据的格式。
    ``` literallayout
    # virsh pool-build guest_images_disk
      Pool guest_images_disk built
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    构建目标路径只适用于基于磁盘、基于文件系统的逻辑存储池。如果
    `libvirt`{.literal}
    检测到源存储设备的数据格式与所选存储池类型不同，则构建将失败，除非指定了
    `覆盖`{.literal} 选项。
    :::
3.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令验证池是否已创建。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_disk    inactive   no
    ```
4.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_disk
      Pool guest_images_disk started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
5.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，使用 `virsh`{.literal}
    命令定义的存储池不会被设置为在每次 libvirtd 启动时自动启动。使用
    `virsh pool-autostart`{.literal} 命令将存储池配置为 autostart。
    ``` literallayout
    # virsh pool-autostart guest_images_disk
      Pool guest_images_disk marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令来验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_disk
      Name:           guest_images_disk
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-filesystem-based-storage-pools-using-the-cli_assembly_managing-virtual-machine-storage-pools-using-the-cli}使用 CLI 创建基于文件系统的存储池 {.title}
:::
当您想在未挂载的文件系统中创建存储池时，请使用基于文件系统的存储池。这个存储池基于给定的文件系统挂载点。您可以使用
`virsh`{.literal} 实用程序创建基于文件系统的存储池。
::: itemizedlist
**先决条件**
-   确保您的管理程序支持基于文件系统的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'fs' supported='yes'"
    ```
    如果该命令显示任何输出结果，则代表支持基于文件的池。
-   准备一个用于基础存储池的设备。因此，首选分区（例如
    `/dev/sdb1）`{.literal}或 LVM 卷。如果您提供对整个磁盘或块设备（例如
    `/dev/sdb`{.literal}）的写入访问权限的虚拟机，则虚拟机可能会对其分区或创建自己的
    LVM 组。这可能导致主机上的系统错误。
    但是，如果您需要将整个块设备用于存储池，红帽建议防止设备中的所有重要分区被
    GRUB 的 `os-prober`{.literal} 功能保护。要做到这一点，请编辑
    `/etc/default/grub`{.literal} 文件并应用以下配置之一：
    ::: itemizedlist
    -   禁用 `os-prober`{.literal}。
        ``` screen
        GRUB_DISABLE_OS_PROBER=true
        ```
    -   防止 `os-prober`{.literal} 发现特定分区。例如：
        ``` screen
        GRUB_OS_PROBER_SKIP_LIST="5ef6313a-257c-4d43@/dev/sdb1"
        ```
    :::
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal}
    命令定义和创建文件系统类型的存储池。例如，要创建一个名为
    `guest_images_fs`{.literal} 的存储池，它使用
    [**/dev/sdc1**]{.strong} 分区，并挂载到 /guest_images 目录中：
    ``` literallayout
    # virsh pool-define-as guest_images_fs fs --source-dev /dev/sdc1 --target /guest_images
    Pool guest_images_fs defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看
    ["基于文件系统的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#filesystem-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于文件系统的存储池参数"){.xref}。
2.  [**定义存储池目标路径**]{.strong}
    使用 `virsh pool-build`{.literal}
    命令为预格式化的文件系统存储池创建存储池目标路径，初始化存储源设备，然后定义数据的格式。
    ``` literallayout
    # virsh pool-build guest_images_fs
      Pool guest_images_fs built
    # ls -la /guest_images
      total 8
      drwx------.  2 root root 4096 May 31 19:38 .
      dr-xr-xr-x. 25 root root 4096 May 31 19:38 ..
    ```
3.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令验证池是否已创建。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_fs      inactive   no
    ```
4.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_fs
      Pool guest_images_fs started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}