### 优化后的文本

#### 默认分支处理
```php
break;
default:
    // 为默认分支（default），我们不对结果进行任何排序。
    // 由于未提供排序设置，因此不对查询进行排序。
    return $search_query;
    // 像从前一样返回$search_query，不过这一次最后会有一个ORDER BY子句。
```

---

## 第582页
### 测试修改后的 `search.php` 脚本

**运行测试**
1. 改造 `search.php` 脚本，使用这两个新的自定义函数。
2. 在 `search.php` 脚本中创建 `generate_sort_links()` 函数，并向 `build_query()` 函数添加新代码，使其生成一个提供有序结果的查询。
3. 不要忘记在脚本中调用 `generate_sort_links()` 函数来取代回显输出结果标题的代码。

**测试步骤**
1. 将脚本上传到你的Web服务器。
2. 在浏览器中打开 `search.html` 页面，尝试完成一个搜索。
3. 点击搜索结果上面的标题，根据不同数据对职位进行排序。多次点击同一个标题来切换升序和降序。

**示例**
- **Risky Jobs - Search**
- **危险！你梦想的工作就在那里**
- **Risky Jobs - Search Results**

**`generate_sort_links()` 函数**
- 生成可点击的列标题，并在各个链接的URL中加入排序选项。

**`build_query()` 函数**
- 取用户输入的搜索项，将这个查询分解为一个数组，清除数组中的空串，并用搜索项和对应的排序值（如果有的话）构建一个SQL查询。

**示例搜索结果**
- **职位标题** | **描述** | **州** | **发布日期**
- Matador | 斗牛士 | VT | 2008-11-03
- Fisher | 渔夫 | VT | 2008-05-22
- Electric Bull Repairer | 电动公牛修理员 | VT | 2008-11-14

**注释**
现在我可以看到最近发布的那些职位，可以看到，佛蒙特州非常迫切想要聘请一位斗牛士。

---

## 第583页
### 字符串与自定义函数

**问题**
但是有时我试图在更大范围内搜索，结果实在太多了。

**示例**
- **Risky Jobs - Search Results**
- **职位标题** | **描述** | **州** | **发布日期**
- Custard Walker | 我们需要愿意测试可以在奶油上行走的人 | NM | 2008-07-24
- Shark Trainer | 训练鲨鱼为观众表演可爱的把戏 | FL | 2008-04-28
- Voltage Checker | 在现场检测交流电和直流电电压 | NC | 2006-06-28
- Antenna Installer | 安装天线和其他金属广播接收设备 | FL | 2008-09-04
- Elephant Proctologist | 需要经验丰富的前列腺专家与大象合作 | CA | 2008-07-29
- Airplane Engine Cleaner | 需要清洁喷气式飞机发动机 | TX | 2008-08-17
- Matador | 忙碌的奶牛场寻找兼职斗牛士 | VT | 2008-03-11
- Paparazzo | 顶级名人摄影公司寻找有经验的狗仔队 | CA | 2008-03-24
- Tightrope Walker | 新兴马戏团寻找有1-2年经验的专业走钢丝演员 | TX | 2008-11-14
- Crocodile Dentist | 鳄鱼农场需要牙医 | FL | 2008-07-14
- Brain Plaque Remover | 移除大脑斑块 | NY | 2008-11-02
- Pet Food Tester | 帮助我们改进宠物食品的味道 | MO | 2008-11-09
- Non-Violent Bullfighter | 寻找非暴力斗牛士 | ID | 2008-11-14
- Electric Bull Repairer | 维修电动公牛 | NJ | 2008-07-27
- Firefighter | 杜塔维尔市招聘消防员 | OH | 2008-05-22

**其他网站如何避免在一个页面上显示大量搜索结果？**

---

## 第584页
### 使用分页显示结果子集

**分页技术**
- 当前我们将所有结果都显示在一个页面上，如果与搜索匹配的职位过多，这就会成问题。
- 可以使用一种称为分页的技术来显示搜索结果。对结果分页时，会把匹配的职位集合分组，然后分别在单独的Web页面上显示各组职位。
- 每页显示5个结果，并提供访问其他结果页的链接。用户可以很容易地点击各个结果页，并避免滚动页面。

**示例**
- **Risky Jobs - Search Results**
- **职位标题** | **描述** | **州** | **发布日期**
- Curtanl Walker | 我们需要愿意测试可以在奶油上行走的人 | MN | 2008-07-24
- Shark Trainer | 训练鲨鱼为观众表演可爱的把戏 | FL | 2008-04-28
- Voltage Checker | 在现场检测交流电和直流电电压 | NC | 2006-06-28
- Antenna Installer | 安装天线和其他金属广播接收设备 | FL | 2008-09-04
- Elephant Proctologist | 需要经验丰富的前列腺专家与大象合作 | CA | 2008-07-29

**用户可以利用这些链接在多个结果页之间导航。当前页不是链接。**

**问题**
很不错，但怎样把结果分解为这样的组呢？要知道，我们的SQL查询会返回与搜索字符串匹配的所有结果。

**解决方案**
- 分页将查询结果分组，并分别在单独的Web页面上显示各组结果。
- 我们需要只返回一个结果子集的查询，而不是返回全部结果。
- 幸运的是，SQL已经为此提供了一个方法：LIMIT 子句。

---

## 第585页
### 使用LIMIT只获取你需要的行

**控制显示的行数**
- 要控制在给定页面上显示哪些行，关键是要为搜索查询再增加一个子句：LIMIT 子句。
- 如果要得到最多5行，可以在查询的最后增加 `LIMIT 5`，如下所示：

```sql
SELECT * FROM riskyjobs
ORDER BY job_title
LIMIT 5
```

**示例**
- 这个查询会返回前5个匹配结果。

**进一步抽取结果集中的数据行**
- 为了进一步抽取结果集中的数据行，必须对LIMIT稍做修改。
- 例如，利用以下查询可以得到第6行到第10行，这正是第3个结果页：

```sql
$query = build_query($user_search, $sort);
$query = $query . " LIMIT 10, 5";
```

**参数解释**
- 第一个参数告诉LIMIT跳过多少行，即跳过前10行。
- 第二个参数控制返回多少行，这里是5行。

---

## 第586页
### 使用LIMIT来帮助对结果分页

**用LIMIT控制页面链接**
- 分页的一个重要部分是提供链接，从而允许用户在不同结果页之间来回转移。
- 可以利用LIMIT子句在每个结果页最下方建立导航链接，例如“下一页”和“上一页”链接各自都有自己的LIMIT。
- 数字链接也是如此，允许用户直接跳至某一个特定的结果页。

**示例**
- 对应前3个搜索结果页的LIMIT子句：
  - 第1页：`LIMIT 0, 5`
  - 第2页：`LIMIT 5, 5`
  - 第3页：`LIMIT 10, 5`

**问题**
没问题。我们只需要编写一大堆查询，各个查询分别包含不同的LIMIT子句，这样就可以了，是吗？

**回答**
- 也算是吧。根据页面和链接不同，我们需要一个不同的LIMIT，不过LIMIT可以生成，而不必编写多个查询。
- 所要做的就是进一步稍稍修改 `build_query()` 函数，在它构建的查询最后增加正确的LIMIT。

---

## 第587页
### 跟踪分页数据

**变量说明**
- `$cur_page`：通过 `$_GET` 从脚本URL中获取当前页。如果未通过URL传递当前页，则设置为第1页（1）。
- `$results_per_page`：这是每一页上显示的结果数，可以根据页面的外观来选择，另外要考虑页面采用这种布局时放多少个搜索结果才合适。LIMIT子句的第2个参数就由这个变量确定。
- `$skip`：计算开始当前页面上的行之前要跳过的行数。这个变量会控制每一页的结果从哪里开始，并为LIMIT子句提供第一个参数。
- `$total`：运行一个不带LIMIT获取所有行的查询，然后统计结果数并存储在 `$total` 中。换句话说，这是搜索结果总数。
- `$num_pages`：用 `$total` 除以 `$results_per_page` 计算页数。对于给定的搜索，总共有 `$total` 个匹配行，不过一次显示一页，每页包含 `$results_per_page` 个匹配行。共有 `$num_pages` 页，当前页由 `$cur_page` 标识。

**当前位置**
- 你现在的位置：550

希望这些优化后的文本能够更好地传达信息，并且更加清晰、连贯和专业。