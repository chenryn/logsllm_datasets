---
author: Oliver Flaggl
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 5127
date: '2018-09-01 22:59:02'
editorchoice: false
excerpt: 有些时候，混用响应式和非响应式代码似乎很有用。然后大家就开始热衷流的创造。不论是在编写异步代码或者是数据处理时，流都是一个不错的方案。
fromurl: https://blog.angularindepth.com/the-extensive-guide-to-creating-streams-in-rxjs-aaa02baaff9a
id: 9973
islctt: true
largepic: /data/attachment/album/201809/01/225906f2vnvoglzjzmn37l.jpg
permalink: /article-9973-1.html
pic: /data/attachment/album/201809/01/225906f2vnvoglzjzmn37l.jpg.thumb.jpg
related: []
reviewer: wxy
selector: ''
summary: 有些时候，混用响应式和非响应式代码似乎很有用。然后大家就开始热衷流的创造。不论是在编写异步代码或者是数据处理时，流都是一个不错的方案。
tags:
- stream
- RxJS
thumb: false
title: 全面教程：在 RxJS 中创建流
titlepic: true
translator: BriFuture
updated: '2018-09-01 22:59:02'
---
![](/data/attachment/album/201809/01/225906f2vnvoglzjzmn37l.jpg)
对大多数开发者来说，与 RxJS 的初次接触是通过库的形式，就像 Angular。一些函数会返回 流   stream ，要使用它们就得把注意力放在操作符上。
有些时候，混用响应式和非响应式代码似乎很有用。然后大家就开始热衷流的创造。不论是在编写异步代码或者是数据处理时，流都是一个不错的方案。
RxJS 提供很多方式来创建流。不管你遇到的是什么情况，都会有一个完美的创建流的方式。你可能根本用不上它们，但了解它们可以节省你的时间，让你少码一些代码。
我把所有可能的方法，按它们的主要目的，放在四个分类当中：
* 流式化现有数据
* 生成数据
* 使用现有 API 进行交互
* 选择现有的流，并结合起来
注意：示例用的是 RxJS 6，可能会以前的版本有所不同。已知的区别是你导入函数的方式不同了。
RxJS 6
```
import {of, from} from 'rxjs';
of(...);
from(...);
```
RxJS    生成函数    generator function 。当你调用一个生成函数时，它返回一个对象，该对象同时遵循 *可迭代的对象* 接口和 *迭代器* 接口。
```
// 自定义的数据结构
class List {
  add(element) ...
  get(index) ...
  get size() ...
  ...
}
function* listIterator(list) {
  for (let i = 0; i console.log("foo");
// 5 秒后打印 foo
```
大多数定时器将会用来周期性的处理数据：
```
interval(10000).pipe(
  flatMap(i => fetch("https://server/stockTicker")
).subscribe(updateChart)
```
这段代码每 10 秒获取一次数据，更新屏幕。
#### 生成（`generate`）
这是个更加复杂的函数，允许你发送一系列任意类型的对象。它有一些重载，这里你看到的是最有意思的部分：
```
generate(
  0,           // 从这个值开始
  x => x  x*2     // 迭代：前一个值加倍
).subscribe();
```
```
// 结果
// 1 2 4 8 |
```
你也可以用它来迭代值，如果一个结构没有实现 *可迭代的对象* 接口。我们用前面的列表例子来进行演示：
```
const myList = new List();
myList.add(1);
myList.add(3);
generate(
  0,                  // 从这个值开始
  i => i  ++i,           // 迭代：获取下一个索引
  i => list.get(i)    // 选择器：从列表中取值
).subscribe();
```
```
// 结果
// 1 3 |
```
如你所见，我添加了另一个参数：选择器。它和 `map` 操作符作用类似，将生成的值转换为更有用的东西。
### 空的流
有时候你要传递或返回一个不用发送任何数据的流。有三个函数分别用于不同的情况。你可以给这三个函数传递调度器。`empty` 和 `throwError` 接收一个调度器参数。
#### `empty`
创建一个空的流，一个值也不发送。
```
empty()
  .subscribe();
```
```
// 结果
// |
```
#### `never`
创建一个永远不会结束的流，仍然不发送值。
```
never()
  .subscribe();
```
```
// 结果
// ...
```
#### `throwError`
创建一个流，流出现错误，不发送数据。
```
throwError('error')
  .subscribe();
```
```
// 结果
// X
```
### 挂钩已有的 API
不是所有的库和所有你之前写的代码使用或者支持流。幸运的是 RxJS 提供函数用来桥接非响应式和响应式代码。这一节仅仅讨论 RxJS 为桥接代码提供的模版。
你可能还对这篇出自 [Ben Lesh](https://medium.com/@benlesh) 的 [全面的文章](https://medium.com/@benlesh/rxjs-observable-interop-with-promises-and-async-await-bebb05306875) 感兴趣，这篇文章讲了几乎所有能与 promises 交互操作的方式。
#### `from`
我们已经用过它，把它列在这里是因为，它可以封装一个含有 observable 对象的 promise 对象。
```
from(new Promise(resolve => resolve(1)))
  .subscribe();
```
```
// 结果
// 1 |
```
#### fromEvent
fromEvent 为 DOM 元素添加一个事件监听器，我确定你知道这个。但你可能不知道的是，也可以通过其它类型来添加事件监听器，例如，一个 jQuery 对象。
```
const element = $('#fooButton'); // 从 DOM 元素中创建一个 jQuery 对象
from(element, 'click')
  .subscribe();
```
```
// 结果
// clickEvent ...
```
#### fromEventPattern
要理解为什么有 fromEvent 了还需要 fromEventPattern，我们得先理解 fromEvent 是如何工作的。看这段代码：
```
from(document, 'click')
  .subscribe();
```
这告诉 RxJS 我们想要监听 document 中的点击事件。在提交过程中，RxJS 发现 document 是一个 *EventTarget* 类型，因此它可以调用它的 `addEventListener` 方法。如果我们传入的是一个 jQuery 对象而非 document，那么 RxJs 知道它得调用 *on* 方法。
这个例子用的是 *fromEventPattern* ，和 *fromEvent* 的工作基本上一样：
```
function addClickHandler(handler) {
  document.addEventListener('click', handler);
}
function removeClickHandler(handler) {
  document.removeEventListener('click', handler);
}
fromEventPattern(
  addClickHandler,
  removeClickHandler,
)
.subscribe(console.log);
// 等效于
fromEvent(document, 'click')
```
RxJS 自动创建实际的监听器（ *handler* ）你的工作是添加或者移除监听器。*fromEventPattern* 的目的基本上是告诉 RxJS 如何注册和移除事件监听器。
现在想象一下你使用了一个库，你可以调用一个叫做 *registerListener* 的方法。我们不能再用 *fromEvent*，因为它并不知道该怎么处理这个对象。
```
const listeners = [];
class Foo {
  registerListener(listener) {
    listeners.push(listener);
  }
  emit(value) {
    listeners.forEach(listener => listener(value));
  }
}
const foo = new Foo();
fromEventPattern(listener => foo.registerListener(listener))
  .subscribe();
foo.emit(1);
```
```
// 结果
// 1 ...
```
当我们调用 `foo.emit(1)` 时，RxJS 中的监听器将被调用，然后它就能把值发送到流中。
你也可以用它来监听多个事件类型，或者结合所有可以通过回调进行通讯的 API，例如，WebWorker API:
```
const myWorker = new Worker('worker.js');
fromEventPattern(
  handler => { myWorker.onmessage = handler },
  handler => { myWorker.onmessage = undefined }
)
.subscribe();
```
```
// 结果
// workerMessage ...
```
#### bindCallback
它和 fromEventPattern 相似，但它能用于单个值。就在回调函数被调用时，流就结束了。用法当然也不一样 —— 你可以用 bindCallBack 封装函数，然后它就会在调用时魔术般的返回一个流：
```
function foo(value, callback) {
  callback(value);
}
// 没有流
foo(1, console.log); //prints 1 in the console
// 有流
const reactiveFoo = bindCallback(foo); 
// 当我们调用 reactiveFoo 时，它返回一个 observable 对象
reactiveFoo(1)
  .subscribe(console.log); // 在控制台打印 1
```