### References

1. A. N. Bessani, R. Mendes, T. Oliveira, N. F. Neves, M. Correia, M. Pasin, and P. Verissimo, “SCFS: A shared cloud-backed file system,” in *USENIX Annual Technical Conference*, 2014, pp. 169–180.

2. W. C. Garrison, A. Shull, S. Myers, and A. J. Lee, “On the practicality of cryptographically enforcing dynamic access control policies in the cloud,” in *2016 IEEE Symposium on Security and Privacy (SP)*, 2016, pp. 819–838. DOI: 10.1109/SP.2016.54.

3. E.-J. Goh, H. Shacham, N. Modadugu, and D. Boneh, “SiRiUS: Securing remote untrusted storage,” in *NDSS*, vol. 3, 2003, pp. 131–145.

4. D. Boneh and M. Franklin, “Identity-based encryption from the Weil pairing,” in *CRYPTO 2001*, Springer, 2001, pp. 213–229.

5. V. Goyal, O. Pandey, A. Sahai, and B. Waters, “Attribute-based encryption for fine-grained access control of encrypted data,” in *CCS’06*, ACM, 2006, pp. 89–98.

6. R. Sakai and J. Furukawa, “Identity-based broadcast encryption,” *IACR Cryptology ePrint Archive*, vol. 2007, p. 217, 2007.

7. M. Green and G. Ateniese, “Identity-based proxy re-encryption,” in *Applied Cryptography and Network Security*, 2007, pp. 288–306.

8. C. Delerablée, “Identity-based broadcast encryption with constant size ciphertexts and private keys,” in *ASIACRYPT’07*, 2007, pp. 200–215.

9. B. Lynn et al., “PBC library,” [Online]. Available: https://crypto.stanford.edu/pbc/.

10. T. Granlund et al., “GMP: The GNU multiple precision arithmetic library,” 1991.

11. R. S. Sandhu and P. Samarati, “Access control: Principle and practice,” *IEEE Communications Magazine*, vol. 32, no. 9, pp. 40–48, 1994.

12. T. Mayberry, E.-O. Blass, and A. H. Chan, “Efficient private file retrieval by combining ORAM and PIR,” in *NDSS*, 2014.

13. S. Devadas, M. van Dijk, C. W. Fletcher, L. Ren, E. Shi, and D. Wichs, “Onion ORAM: A constant bandwidth blowup oblivious RAM,” in *Theory of Cryptography Conference*, Springer, 2016, pp. 145–174.

14. D. Apon, J. Katz, E. Shi, and A. Thiruvengadam, “Verifiable oblivious storage,” in *Public Key Cryptography*, 2014, pp. 131–148.

15. T. Alves and D. Felton, “TrustZone: Integrated hardware and software security - enabling trusted computing in embedded systems,” in *Whitepaper*, 2004.

16. V. Costan, I. A. Lebedev, and S. Devadas, “Sanctum: Minimal hardware extensions for strong software isolation,” in *USENIX Security Symposium*, 2016, pp. 857–874.

17. V. Costan and S. Devadas, “Intel SGX explained,” *IACR Cryptology ePrint Archive*, vol. 2016, p. 86, 2016.

18. Intel, “Intel Software Guard Extensions SDK Developer Reference for Linux OS, version 1.9,” 2017. [Online]. Available: https://download.01.org/intel-sgx/linux-1.9/docs/Intel_SGX_SDK_Developer_Reference_Linux_1.9_Open_Source.pdf.

19. F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-R. Sadeghi, “Software grand exposure: SGX cache attacks are practical,” in *11th USENIX Workshop on Offensive Technologies (WOOT 17)*, Vancouver, BC: USENIX Association, 2017.

20. N. Ferguson and B. Schneier, *Practical Cryptography*. Wiley New York, 2003, vol. 23.

21. D. R. Stinson, *Cryptography: Theory and Practice*. CRC Press, 2005.

22. C. Ellison and B. Schneier, “Ten risks of PKI: What you’re not being told about public key infrastructure,” *Computer*, vol. 16, no. 1, pp. 1–7, 2000.

23. B. Waters, “Efficient identity-based encryption without random oracles,” in *Eurocrypt*, Springer, vol. 3494, 2005, pp. 114–127.

24. O. Weisse, V. Bertacco, and T. Austin, “Regaining lost cycles with HotCalls: A fast interface for SGX secure enclaves,” in *Proceedings of the 44th Annual International Symposium on Computer Architecture*, ACM, 2017, pp. 81–93.

25. A. Fiat and M. Naor, “Broadcast encryption,” in *Annual International Cryptology Conference*, Springer, 1993, pp. 480–491.

26. D. Boneh, C. Gentry, and B. Waters, “Collusion resistant broadcast encryption with short ciphertexts and private keys,” in *Crypto*, Springer, vol. 3621, 2005, pp. 258–275.

27. C. Delerablée, P. Paillier, and D. Pointcheval, “Fully collusion secure dynamic broadcast encryption with constant-size ciphertexts or decryption keys,” *Pairing-Based Cryptography–Pairing 2007*, pp. 39–59, 2007.

28. C. Delerablée, “Identity-based broadcast encryption with constant size ciphertexts and private keys,” in *Advances in Cryptology – ASIACRYPT 2007*, K. Kurosawa, Ed. Springer, 2007, pp. 200–215. DOI: 10.1007/978-3-540-76900-2_12.

29. Intel, “Intel Software Guard Extensions SSL,” [Online]. Available: https://github.com/intel/intel-sgx-ssl.

30. P. Schmidt et al., “Linux kernel git revision history,” [Online]. Available: https://www.kaggle.com/philschmidt/linux-kernel-git-revision-history.

31. A. Sahai, B. Waters, et al., “Fuzzy identity-based encryption,” in *Eurocrypt*, Springer, vol. 3494, 2005, pp. 457–473.

32. J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-policy attribute-based encryption,” in *Security and Privacy, 2007. SP’07. IEEE Symposium on*, IEEE, 2007, pp. 321–334.

33. D. Boneh, X. Boyen, and E.-J. Goh, “Hierarchical identity based encryption with constant size ciphertext,” in *EUROCRYPT’15*, 2005, pp. 440–456.

34. D. Boneh, A. Sahai, and B. Waters, “Functional encryption: Definitions and challenges,” *Theory of Cryptography*, pp. 253–273, 2011.

35. B. A. Fisch, D. Vinayagamurthy, D. Boneh, and S. Gorbunov, “Iron: Functional encryption using Intel SGX.”

36. G. Ateniese, K. Fu, M. Green, and S. Hohenberger, “Improved proxy re-encryption schemes with applications to secure distributed storage,” *ACM Transactions on Information and System Security (TISSEC)*, vol. 9, no. 1, pp. 1–30, 2006.

37. M. Green, S. Hohenberger, B. Waters, et al., “Outsourcing the decryption of ABE ciphertexts,” in *USENIX Security Symposium*, vol. 2011, 2011.

38. A. Sahai, H. Seyalioglu, and B. Waters, “Dynamic credentials and ciphertext delegation for attribute-based encryption,” in *Advances in Cryptology–CRYPTO 2012*, Springer, 2012, pp. 199–217.

39. R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas, “Multicast security: A taxonomy and some efficient constructions,” in *INFOCOM’99*, IEEE, vol. 2, 1999, pp. 708–716.

40. D. Wallner, E. Harder, and R. Agee, “Key management for multicast: Issues and architectures,” Tech. Rep., 1999.

41. M. Naor and B. Pinkas, “Efficient trace and revoke schemes,” in *International Conference on Financial Cryptography*, 2000, pp. 1–20.

42. R. A. Popa, J. R. Lorch, D. Molnar, H. J. Wang, and L. Zhuang, “Enabling security in cloud storage SLAs with CloudProof,” in *USENIX Annual Technical Conference*, vol. 242, 2011, pp. 355–368.

43. J. Li, C. Qin, P. P. Lee, and J. Li, “Rekeying for encrypted deduplication storage,” in *DSN’16*, IEEE, 2016, pp. 618–629.

44. F. Wang, J. Mickens, N. Zeldovich, and V. Vaikuntanathan, “Sieve: Cryptographically enforced access control for user data in untrusted clouds,” in *NSDI*, 2016, pp. 611–626.

45. J. Behl, T. Distler, and R. Kapitza, “Hybrids on steroids: SGX-based high performance BFT,” in *Proceedings of the Twelfth European Conference on Computer Systems, ser. EuroSys ’17*, Belgrade, Serbia: ACM, 2017, pp. 222–237. DOI: 10.1145/3064176.3064213.

46. R. Pires, M. Pasin, P. Felber, and C. Fetzer, “Secure content-based routing using Intel Software Guard Extensions,” in *Middleware ’16*, Trento, Italy: ACM, 2016, 10:1–10:10. DOI: 10.1145/2988336.2988346.

47. N. El Mrabet and M. Joye, *Guide to Pairing-Based Cryptography*. CRC Press, 2017.

### Appendix A: Mathematical Implications of Adapting IBBE to IBBE-SGX

This appendix details the mathematical implications of adapting Identity-Based Broadcast Encryption (IBBE) to IBBE-SGX. In typical IBBE schemes, Trusted Authorities (TAs) only execute the operations of system setup and extracting user secret keys. In IBBE-SGX, however, the administrator agent executes all membership operations by executing them inside an SGX enclave.

#### A. System Setup

The initial operation is identical for both IBBE and IBBE-SGX. The algorithm receives \((\lambda, m)\) as input, where \(\lambda\) represents the security strength level of the cryptosystem, and \(m\) encapsulates the largest envisioned group size. The output consists of the Master Secret Key (MSK) and the system Public Key (PK).

To build the MSK, the algorithm randomly picks \(g \in G_1\) and \(\gamma \in \mathbb{Z}_p^*\):
\[ \text{MSK} = (g, \gamma) \]

To construct the PK, the algorithm computes:
\[ w = g^\gamma \]
\[ v = e(g, h) \]
where \(h \in G_2\) was randomly picked:
\[ \text{PK} = (w, v, h, h^\gamma, h^{\gamma^2}, \ldots, h^{\gamma^m}) \]

The computational complexity of the system setup algorithm is linear with respect to \(m\).

#### B. User Key Extraction

The key extraction operation is identical for both IBBE and IBBE-SGX. For a given user identity \(u\), the operation uses the MSK and computes:
\[ \text{USK} = g^{(\gamma + H(u))^{-1}} \]

#### C. Encrypt Broadcast Key

The algorithm for constructing a broadcast key differs based on the specific usage assumption. For IBBE, the algorithm relies on the PK, while for IBBE-SGX, it can use the MSK. In both cases, the group broadcast key is randomly generated by choosing a random value \(k \in \mathbb{Z}_p^*\) and computing:
\[ b_k = v^k \]

A group broadcast ciphertext \((C_1, C_2)\) is then constructed as follows:
\[ C_1 = w^{-k} \prod_{u \in S} (g^{\gamma + H(u)}) \]
\[ C_2 = h^k \]

For IBBE, \(\gamma\) cannot be used directly for computing \(C_2\). Instead, the computation is carried out with a polynomial expansion of the exponent that uses the public key elements:
\[ C_2 = \left( \prod_{n=0}^{m-1} (h^{\gamma^n})^{E_n} \right)^k \]
where:
\[ E_1 = \sum_{u \in S} H(u) \]
\[ E_2 = \sum_{u_1, u_2 \in S, u_1 \neq u_2} H(u_1) \cdot H(u_2) \]
\[ \vdots \]
\[ E_{m-1} = \prod_{u \in S} H(u) \]

Computing all \(E\) values requires a quadratic number of operations \(O(|S|^2)\).

In the case of IBBE-SGX, having access to the MSK allows computing \(C_2\) directly using the formula above, requiring a linear number of operations.

Additionally, we augment the ciphertext values with \(C_3\), which will prove useful for subsequent operations:
\[ C_3 = \prod_{u \in S} h^{\gamma + H(u)} \]

Note that \(C_3\) can be stored publicly as it can be computed entirely from the PK.

#### D. Decrypt Broadcast Key

The decrypt operation is executed identically for both IBBE and IBBE-SGX and relies on the PK. A user can use her secret key \(\text{USK}\) to compute \(b_k\), given \((S, C)\). The intricate formula is maintained in its original form, as shown in [29].

#### E. Add User to Broadcast Key

When adding a user \(u_{\text{add}}\) who is allowed to decrypt group secrets prior to joining, there is no need for a re-key operation by changing the value of \(b_k\). The only required change is to incorporate \(u_{\text{add}}\) into \(S\) and \(H(u_{\text{add}})\) into \(C_2\).

For IBBE, including \(H(u_{\text{add}})\) into all \(E\) values requires a quadratic number of operations. For IBBE-SGX, by making use of the MSK, one has access to \(\gamma\), thus the new user is included in constant time:
\[ C_2 \leftarrow (C_2)^{\gamma + H(u_{\text{add}})} \]

#### F. Remove User from Broadcast Key

Whenever removing a user \(u_{\text{rem}}\), all group elements \(b_k\), \(S\), and \(C\) need to change. \(b_k\) and \(C_1\) can be computed by Formulas 1 and 2, once a new random value for \(k \in \mathbb{Z}_p^*\) is picked.

Within the traditional assumption, \(C_2\) is computed similarly to encrypting the group key, consuming a quadratic number of operations. Within IBBE-SGX, having access to \(\gamma\) through the MSK allows first changing \(C_3\) and then \(C_2\) in constant time:
\[ C_3 \leftarrow (C_3)^{(\gamma + H(u_{\text{rem}}))^{-1}} \]
\[ C_2 \leftarrow (C_3)^k \]

#### G. Re-key Broadcast Key

Sometimes, it is necessary to change the value of \(b_k\) without performing any group membership changes. This re-keying operation can be performed optimally in constant time under both usage model assumptions, by making use of \(C_3\).

First, a new random \(k \in \mathbb{Z}_p^*\) is generated, and the new key is computed by Formula 1. \(C_1\) can be computed by Formula 2, while \(C_2\) is computed from \(C_3\) by Formula 7.