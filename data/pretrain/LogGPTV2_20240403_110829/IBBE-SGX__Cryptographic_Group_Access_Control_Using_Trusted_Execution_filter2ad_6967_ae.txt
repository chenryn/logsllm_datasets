[2] A. N. Bessani, R. Mendes, T. Oliveira, N. F. Neves, M. Correia, M.
Pasin, and P. Verissimo, “SCFS: A shared cloud-backed ﬁle system.,”
in USENIX Annual Technical Conference, 2014, pp. 169–180.
[3] W. C. Garrison, A. Shull, S. Myers, and A. J. Lee, “On the practicality
of cryptographically enforcing dynamic access control policies in the
cloud,” in 2016 IEEE Symposium on Security and Privacy (SP), 2016,
pp. 819–838. DOI: 10.1109/SP.2016.54.
E.-J. Goh, H. Shacham, N. Modadugu, and D. Boneh, “SiRiUS: Se-
curing remote untrusted storage,” in NDSS, vol. 3, 2003, pp. 131–145.
[5] D. Boneh and M. Franklin, “Identity-based encryption from the Weil
[4]
pairing,” in CRYPTO 2001, Springer, 2001, pp. 213–229.
[6] V. Goyal, O. Pandey, A. Sahai, and B. Waters, “Attribute-based en-
cryption for ﬁne-grained access control of encrypted data,” in CCS’06,
ACM, 2006, pp. 89–98.
[7] R. Sakai and J. Furukawa, “Identity-based broadcast encryption,” IACR
Cryptology ePrint Archive, vol. 2007, p. 217, 2007.
[8] M. Green and G. Ateniese, “Identity-based proxy re-encryption,” in
Applied Cryptography and Network Security, 2007, pp. 288–306.
[9] C. Delerabl´ee, “Identity-based broadcast encryption with constant size
ciphertexts and private keys,” in ASIACRYPT’07, 2007, pp. 200–215.
[10] B. Lynn et al. (2006). PBC library, [Online]. Available: https://crypto.
stanford.edu/pbc/.
T. Granlund et al., GMP,
library, 1991.
the GNU multiple precision arithmetic
[11]
[13]
[14]
[16]
[19]
[20]
[12] R. S. Sandhu and P. Samarati, “Access control: Principle and practice,”
IEEE communications magazine, vol. 32, no. 9, pp. 40–48, 1994.
T. Mayberry, E.-O. Blass, and A. H. Chan, “Efﬁcient private ﬁle
retrieval by combining ORAM and PIR,” in NDSS, 2014.
S. Devadas, M. van Dijk, C. W. Fletcher, L. Ren, E. Shi, and D. Wichs,
“Onion ORAM: A constant bandwidth blowup oblivious RAM,” in
Theory of Cryptography Conference, Springer, 2016, pp. 145–174.
[15] D. Apon, J. Katz, E. Shi, and A. Thiruvengadam, “Veriﬁable oblivious
storage,” in Public Key Cryptography, 2014, pp. 131–148.
T. Alves and D. Felton, “Trustzone: Integrated hardware and software
security - enabling trusted computing in embedded systems.,” in
Whitepaper, 2004.
[17] V. Costan, I. A. Lebedev, and S. Devadas, “Sanctum: Minimal hard-
ware extensions for strong software isolation.,” in USENIX Security
Symposium, 2016, pp. 857–874.
[18] V. Costan and S. Devadas, “Intel SGX explained,” IACR Cryptology
ePrint Archive, vol. 2016, p. 86, 2016.
Intel, Intel software guard extensions SDK developer reference for
Linux OS, version 1.9, 2017. [Online]. Available: https://download.01.
org/intel-sgx/linux-1.9/docs/Intel SGX SDK Developer Reference
Linux 1.9 Open Source.pdf.
F. Brasser, U. M¨uller, A. Dmitrienko, K. Kostiainen, S. Capkun,
and A.-R. Sadeghi, “Software grand exposure: SGX cache attacks
are practical,” in 11th USENIX Workshop on Offensive Technologies
(WOOT 17), Vancouver, BC: USENIX Association, 2017.
[21] N. Ferguson and B. Schneier, Practical cryptography. Wiley New
York, 2003, vol. 23.
[22] D. R. Stinson, Cryptography: Theory and practice. CRC press, 2005.
[23] C. Ellison and B. Schneier, “Ten risks of PKI: What you’re not being
told about public key infrastructure,” Computer, vol. 16, no. 1, pp. 1–7,
2000.
[24] B. Waters, “Efﬁcient identity-based encryption without random ora-
cles,” in Eurocrypt, Springer, vol. 3494, 2005, pp. 114–127.
[25] O. Weisse, V. Bertacco, and T. Austin, “Regaining lost cycles with
HotCalls: A fast interface for SGX secure enclaves,” in Proceedings
of the 44th Annual International Symposium on Computer Architecture,
ACM, 2017, pp. 81–93.
[26] A. Fiat and M. Naor, “Broadcast encryption,” in Annual International
Cryptology Conference, Springer, 1993, pp. 480–491.
[27] D. Boneh, C. Gentry, and B. Waters, “Collusion resistant broadcast en-
cryption with short ciphertexts and private keys,” in Crypto, Springer,
vol. 3621, 2005, pp. 258–275.
[28] C. Delerabl´ee, P. Paillier, and D. Pointcheval, “Fully collusion secure
dynamic broadcast encryption with constant-size ciphertexts or de-
cryption keys,” Pairing-Based Cryptography–Pairing 2007, pp. 39–59,
2007.
[29] C. Delerabl´ee, “Identity-based broadcast encryption with constant size
ciphertexts and private keys,” in Advances in Cryptology – ASIACRYPT
2007, K. Kurosawa, Ed. Springer, 2007, pp. 200–215. DOI: 10.1007/
978-3-540-76900-2 12.
Intel. (2017). Intel software guard extensions SSL, [Online]. Available:
https://github.com/intel/intel-sgx-ssl.
P. Schmidt et al. (2017). Linux kernel git revision history, [Online].
Available: https : / / www. kaggle . com / philschmidt / linux - kernel - git -
revision-history.
[32] A. Sahai, B. Waters, et al., “Fuzzy identity-based encryption,” in
[30]
[31]
Eurocrypt, Springer, vol. 3494, 2005, pp. 457–473.
J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-policy attribute-
based encryption,” in Security and Privacy, 2007. SP’07. IEEE Sym-
posium on, IEEE, 2007, pp. 321–334.
[34] D. Boneh, X. Boyen, and E.-J. Goh, “Hierarchical identity based
encryption with constant size ciphertext,” in EUROCRYPT’15, 2005,
pp. 440–456.
[35] D. Boneh, A. Sahai, and B. Waters, “Functional encryption: Deﬁnitions
and challenges,” Theory of Cryptography, pp. 253–273, 2011.
[36] B. A. Fisch, D. Vinayagamurthy, D. Boneh, and S. Gorbunov, “Iron:
[33]
Functional encryption using Intel SGX,”
[37] G. Ateniese, K. Fu, M. Green, and S. Hohenberger, “Improved proxy
re-encryption schemes with applications to secure distributed storage,”
ACM Transactions on Information and System Security (TISSEC), vol.
9, no. 1, pp. 1–30, 2006.
[38] M. Green, S. Hohenberger, B. Waters, et al., “Outsourcing the decryp-
tion of abe ciphertexts,” in USENIX Security Symposium, vol. 2011,
2011.
[39] A. Sahai, H. Seyalioglu, and B. Waters, “Dynamic credentials and
ciphertext delegation for attribute-based encryption,” in Advances in
Cryptology–CRYPTO 2012, Springer, 2012, pp. 199–217.
[40] R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas,
“Multicast security: A taxonomy and some efﬁcient constructions,” in
INFOCOM’99, IEEE, vol. 2, 1999, pp. 708–716.
[41] D. Wallner, E. Harder, and R. Agee, “Key management for multicast:
Issues and architectures,” Tech. Rep., 1999.
[44]
[45]
[42] M. Naor and B. Pinkas, “Efﬁcient trace and revoke schemes,” in
International Conference on Financial Cryptography, 2000, pp. 1–20.
[43] R. A. Popa, J. R. Lorch, D. Molnar, H. J. Wang, and L. Zhuang, “En-
abling security in cloud storage SLAs with CloudProof,” in USENIX
Annual Technical Conference, vol. 242, 2011, pp. 355–368.
J. Li, C. Qin, P. P. Lee, and J. Li, “Rekeying for encrypted deduplica-
tion storage,” in DSN’16, IEEE, 2016, pp. 618–629.
F. Wang, J. Mickens, N. Zeldovich, and V. Vaikuntanathan, “Sieve:
Cryptographically enforced access control for user data in untrusted
clouds,” in NSDI, 2016, pp. 611–626.
J. Behl, T. Distler, and R. Kapitza, “Hybrids on steroids: SGX-based
high performance BFT,” in Proceedings of
the Twelfth European
Conference on Computer Systems, ser. EuroSys ’17, Belgrade, Serbia:
ACM, 2017, pp. 222–237. DOI: 10.1145/3064176.3064213.
[47] R. Pires, M. Pasin, P. Felber, and C. Fetzer, “Secure content-based
routing using intel software guard extensions,” in Middleware ’16,
Trento, Italy: ACM, 2016, 10:1–10:10. DOI: 10 . 1145 / 2988336 .
2988346.
[48] N. El Mrabet and M. Joye, Guide to pairing-based cryptography. CRC
[46]
Press, 2017.
11
APPENDIX A
This appendix details the mathematical
implications of
adapting IBBE to IBBE-SGX. In typical IBBE schemes,
Trusted Authorities (TAs) only execute the operations of
system setup and extracting user secret keys. In IBBE-SGX,
however,
the administrator agent executes all membership
operations by executing them inside an SGX enclave.
The IBBE scheme [29] conceptually relies on the idea of
bilinear maps. Notated as: e (·,·) : G1 × G2 → GT , a bilinear
map is deﬁned by using three cyclic groups of prime order p,
imposing bilinearity and non-degeneracy. El Mrabet et al. [48]
provide a thorough overview of bilinear maps usage within the
cryptographic setting. Moreover, the IBBE scheme implies the
public knowledge of a cryptographic hash function H, that
maps user identity strings to values in Z∗
p.
A. System Setup
The initial operation is identical for IBBE and IBBE-SGX.
The algorithm receives (λ, m) as input, where λ represents the
security strength level of the cryptosystem, and m encapsulates
the largest envisioned group size. The output consists of the
Master Secret Key MSK and the system Public Key P K. To
build MSK, the algorithm randomly picks g ∈ G1andγ ∈ Z∗
p :
MSK = (g, γ). To construct the P K, the algorithm computes
w = gγ and v = e (g, h), where h ∈ G2 was randomly
picked: P K =
. The computational
complexity of the system setup algorithm is linear to m.
, ..., hγm(cid:17)
w, v, h, hγ, hγ2
(cid:16)
B. User Key Extraction
The key extraction operation is identical for IBBE and
IBBE-SGX. For a given user identity u, the operation makes
use of MSK and computes : USK = g(γ+H(u))−1.
C. Encrypt Broadcast Key
The algorithm for constructing a broadcast key differs by
considering the speciﬁc usage assumption. If for IBBE the
algorithm has to rely on P K, for IBBE-SGX one can make use
of MSK. In both cases, the group broadcast key is randomly
generated by choosing a random value k ∈ Z∗
p and computing:
(1)
A group broadcast ciphertext (C1, C2) is then constructed
bk = vk
by:
k· (cid:81)
C1 = w−k
(γ+H(u))
(2)
u∈S
C2 = h
(3)
For IBBE, γ cannot be used directly for computing C2.
Instead, the computation is carried out with a polynomial
expansion of the exponent that uses the public key elements:
hγn(cid:17) ·(cid:16)
hγn−1(cid:17)E1 ·(cid:16)
hγn−2(cid:17)E2 · ... · (hγ)
(cid:18)(cid:16)
C2 =
(cid:19)k
En−1
(4)
12
E1 =(cid:80)
E2 =(cid:80)
En−1 =(cid:81)
...
u∈S H (u)
u1,u2∈S,u1(cid:54)=u2 H (u1) · H (u2)
u∈S H(u)
all E, thus requires a quadratic number of operations O(cid:0)|S|2(cid:1).
For IBBE, computing C2 is bound by the computations of
In the case of IBBE-SGX, having access to MSK allows
computing C2 directly using Formula 3. It thus requires a
linear number of operations.
Moreover, we augment the ciphertext values with C3, which
will prove useful for the subsequent operations:
(cid:81)
(γ+H(u))
(5)
Note that C3 can be stored publicly as it can be computed
C3 = h
u∈S
entirely from P K.
D. Decrypt Broadcast Key
The decrypt operation is executed identically for IBBE and
IBBE-SGX, and relies on P K. A user can make use of her
secret key uSK to compute bk, given (S,C) We chose to
omit presenting the intricate formula as we maintain it in the
original form, as shown in [29].
E. Add User to Broadcast Key
As the joining user uadd is allowed to decrypt group secrets
prior to joining, there is no need of a re-key operation by
changing the value of bk. The only required change is therefore
to incorporate uadd into S, and H (uadd) into C2.
For IBBE, including H(uadd) into all E values requires a
quadratic number of operations. For IBBE-SGX, by making
use of MSK, one has access to γ, thus the new user is included
in constant time: C2 ← (C2)γ+H(uadd).
F. Remove User form Broadcast Key
Whenever removing a user urem, all group elements bk,S
and C need to change. bk and C1 can be computed by Formulas
1 and 2, once a new random value for k ∈ Z∗
p is picked.
Within the traditional assumption, C2 is computed similarly
to encrypting group key operation, consuming a quadratic
number of operations. Within IBBE-SGX, having access to
γ through the MSK allows ﬁrst changing C3 and then C2 in
constant time:
C3 ← (C3)(γ+H(urem))−1
C2 ← (C3)k
(6)
(7)
G. Re-key Broadcast Key
Sometimes, it is necessary to change the value of bk without
performing any group membership changes. This re-keying
operation can be performed optimally in constant time under
both usage model assumptions, by making use of C3.
First, a new random k ∈ Z∗
p is generated and the new key
computed by Formula 1. C1 can be computed by Formula 2,
while C2 is computed from C3 by Formula 7.