        {
            LOGD("dlopen error");
            if (ptrace_call(pid, (long)dlerror_addr, parameters, 0, &CurrentRegs) == -1)
            {
                LOGD("Call Remote dlerror Func Failed");
                ptrace_detach(pid);
                return iRet;
            }
            char *Error = (void *)ptrace_getret(&CurrentRegs);
            char LocalErrorInfo[1024] = {0};
            ptrace_readdata(pid, Error, LocalErrorInfo, 1024);
            LOGD("dlopen error:%s", LocalErrorInfo);
            ptrace_detach(pid);
            return iRet;
        }
        /* 5.远程进程调用被加载进去模块的函数。
         *   先将参数传递进远程进程空间，然后利用dlsym函数搜索函数位置，最后在进行调用*/
        if (ptrace_writedata(pid, RemoteMapMemoryAddr + strlen(LibPath) + 2, FunctionName, strlen(FunctionName) + 1) == -1)
        {
            LOGD("Write FunctionName:%s to RemoteProcess error", FunctionName);
            ptrace_detach(pid);
            return iRet;
        }
        //设置dlsym参数
        parameters[0] = (long)RemoteModuleAddr;
        parameters[1] = (long)(RemoteMapMemoryAddr + strlen(LibPath) + 2);
        LOGD("Func Name：%x\n", parameters[1]);
        //调用dlsym函数并获取返回的函数地址
        dlsym_addr = GetRemoteFuncAddr(pid, linker_path, (void *)dlsym);
        LOGD("dlsym RemoteFuncAddr:0x%lx", (long)dlsym_addr);
        if (ptrace_call(pid, (long)dlsym_addr, parameters, 2, &CurrentRegs) == -1)
        {
            LOGD("Call Remote dlsym Func Failed");
            ptrace_detach(pid);
            return iRet;
        }
        RemoteModuleFuncAddr = (void *)ptrace_getret(&CurrentRegs);
        LOGD("Remote Process ModuleFunc Addr:0x%lx", (long)RemoteModuleFuncAddr);
        /* 6. 在远程进程中调用加载进去模块的函数,这里为了简单起见，没有选择传入参数，所以省去写入参数到远程进空间的步骤*/
        if (ptrace_call(pid, (long)RemoteModuleFuncAddr, FuncParameter, NumParameter, &CurrentRegs) == -1)
        {
            LOGD("Call Remote injected Func Failed");
            ptrace_detach(pid);
            return iRet;
        }
        /* 7. 恢复远程进程的执行操作*/
        if (ptrace_setregs(pid, &OriginalRegs) == -1)
        {
            LOGD("Recover reges failed");
            ptrace_detach(pid);
            return iRet;
        }
        LOGD("Recover Regs Success");
        ptrace_getregs(pid, &CurrentRegs);
        if (memcmp(&OriginalRegs, &CurrentRegs, sizeof(CurrentRegs)) != 0)
        {
            LOGD("Set Regs Error");
        }
        if (ptrace_detach(pid) == -1)
        {
            LOGD("ptrace detach failed");
            return iRet;
        }
        return 0;
    }
**注入工具的入口文件** ：InjectModule.c
    /************************************************************
      FileName: InjectModule.c
      Description:       ptrace注入      
    ***********************************************************/
    #include     
    #include 
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include     
    #include 
    #include  
    /*************************************************
      Description:    通过进程名称定位到进程的PID
      Input:          process_name为要定位的进程名称
      Output:         无
      Return:         返回定位到的进程PID，若为-1，表示定位失败
      Others:         无
    *************************************************/ 
    pid_t FindPidByProcessName(const char *process_name)
    {
        int ProcessDirID = 0;
        pid_t pid = -1;
        FILE *fp = NULL;
        char filename[MAX_PATH] = {0};
        char cmdline[MAX_PATH] = {0};
        struct dirent * entry = NULL;
        if ( process_name == NULL )
            return -1;
        DIR* dir = opendir( "/proc" );
        if ( dir == NULL )
            return -1;
        while( (entry = readdir(dir)) != NULL )
        {
            ProcessDirID = atoi( entry->d_name );
            if ( ProcessDirID != 0 )
            {
                snprintf(filename, MAX_PATH, "/proc/%d/cmdline", ProcessDirID);
                fp = fopen( filename, "r" );
                if ( fp )
                {
                    fgets(cmdline, sizeof(cmdline), fp);
                    fclose(fp);
                    if (strncmp(process_name, cmdline, strlen(process_name)) == 0)
                    {
                        pid = ProcessDirID;
                        break;
                    }
                }
            }
        }
        closedir(dir);
        return pid;
    }
    int main(int argc, char *argv[]) {
        char InjectModuleName[MAX_PATH] = "/data/libInjectModule.so";    // 注入模块全路径
        char RemoteCallFunc[MAX_PATH] = "Inject_entry";              // 注入模块后调用模块函数名称
        char InjectProcessName[MAX_PATH] = "com.testjni";                      // 注入进程名称
        // 当前设备环境判断
        #if defined(__i386__)  
        LOGD("Current Environment x86");
        return -1;
        #elif defined(__arm__)
        LOGD("Current Environment ARM");
        #else     
        LOGD("other Environment");
        return -1;
        #endif
        pid_t pid = FindPidByProcessName(InjectProcessName);
        if (pid == -1)
        {
            printf("Get Pid Failed");
            return -1;
        }   
        printf("begin inject process, RemoteProcess pid:%d, InjectModuleName:%s, RemoteCallFunc:%s\n", pid, InjectModuleName, RemoteCallFunc);
        int iRet = inject_remote_process(pid,  InjectModuleName, RemoteCallFunc,  NULL, 0);
        //int iRet = inject_remote_process_shellcode(pid,  InjectModuleName, RemoteCallFunc,  NULL, 0);
        if (iRet == 0)
        {
            printf("Inject Success\n");
        }
        else
        {
            printf("Inject Failed\n");
        }
        printf("end inject,%d\n", pid);
        return 0;  
    }
# 编译过程
将上面的注入代码编译成可执行文件
## 准备文件
### 注入工具
  * jni文件夹
编译文件必须在jni文件夹下
  * jni/Android.mk
编译配置文件。
    * LOCAL_PATH指定源文件所在目录
    * CLEAR _VARS用来清除很多LOCAL_ *变量(但是不会清除LOCAL_PATH)，因为如果编译多个so就需要清除上一个so文件的配置信息
    * LOCAL_MODULE：编译后的模块名，默认在后面加上.so
    * LOCAL_SRC_FILES: 被编译的源文件
    * LOCAL_LDLIBS：源文件用到了一些系统库，通过此变量标记链接到具体位置，如`-L$(SYSROOT)/usr/lib`指定标准库的目录位置位于NDK安装根目录下的 sysroot/usr/include 中.
而`-llog`则标记使用到了liblog.so这个日志库
    * `include $(BUILD_EXECUTABLE)`则指定编译成可执行文件
    LOCAL_PATH := $(call my-dir)  
    include $(CLEAR_VARS)  
    LOCAL_MODULE := inject   
    LOCAL_SRC_FILES := ptraceInject.c InjectModule.c 
    LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog  
    include $(BUILD_EXECUTABLE)
  * jni/Application.mk
指定生成适用于32 位 ARMv7指令集的文件
    APP_ABI := armeabi-v7a
  * 注入工具的源文件：InjectModule.c，ptraceInject.c，ptraceInject.h，PrintLog.h
    * InjectModule.c：注入工具入口文件
    * ptraceInject.c：注入工具的功能代码
    * ptraceInject.h：声明注入函数的头文件
    * PrintLog.h：声明日志函数的头文件
### 被注入的Demo模块
  * jni文件夹
  * jni/Android.mk
    LOCAL_PATH := $(call my-dir)  
    include $(CLEAR_VARS)  
    LOCAL_MODULE := InjectModule  
    LOCAL_SRC_FILES := InjectModule.c
    LOCAL_ARM_MODE := arm
    LOCAL_LDLIBS += -L$(SYSROOT)/usr/lib -llog  
    include $(BUILD_SHARED_LIBRARY)
  * jni/Application.mk
    APP_ABI := armeabi-v7a
  * 被注入模块的源文件InjectModule.c，和日志打印头文件PrintLog.h，这个头文件和上面一样
    #include 
    #include 
    #include 
    int Inject_entry()
    {
        LOGD("Inject_entry Func is called\n");
        return 0;
    }
## 编译
分别在两个jni目录下执行`ndk-build`命令，需要配置环境变量
**生成位置：** jni同目录下的libs/armeabi-v7a文件夹中
# 注入过程
将编译好的`libInjectModule.so`文件放入/data目录下，然后chmod 777
给注入工具提供执行权限，并运行即可在日志中看到被注入的应用执行了我们注入进去的libInjectModule.so模块中的函数。
当然也可以通过查看进程的内存布局，可以看到我们
# 小结
通过dlopen和dlsym函数将我们自己写好的so库注入进去，记住几个点
【1】只要让远程进程调用dlopen打开我们写好的so文件就实现了so库的注入，紧接着通过将函数名称和dlopen打开的句柄作为参数传递给dlsym就可以实现库中函数地址的检索
【2】上面用到的so文件的路径和函数名称，都需要我们传递到远程进程的内存空间中，远程进程是不能跨进程访问我们注入工具中的字符串的
【3】远程进程的调用，主要通过ptrace来修改寄存器实现，pc决定函数调用哪条指令，r0-r3还有栈决定参数
# 参考
【书籍】游戏安全-手游安全技术入门