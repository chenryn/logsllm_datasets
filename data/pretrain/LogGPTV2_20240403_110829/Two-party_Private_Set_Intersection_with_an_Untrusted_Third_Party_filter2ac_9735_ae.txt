65.7
132
159
38.5
72.6
86.5
49.9
92.8
116
74.6
140
162
0.4
0.4
0.4
0.4
0.4
27.5
26.9
26.6
26.4
25.9
1.00
1.02
1.02
1.02
1.02
41
39
77
91
0.8
0.8
0.9
0.9
0.9
28.3
27.1
27.3
27.9
26.7
1.7
1.7
1.65
1.68
1.63
50
50
100
124
8.0
8.9
9.4
9.9
9.4
34.7
33.3
30.7
29.8
29.4
10.2
9.5
9.3
8.5
7.4
151
82
144
180
286
0.32
0.73
0.88
0.77
1.35
1.63
1.04
22.5
86.0
-
1.28
24.3
220
28
212
216
220
Total Comm (MB)
2.5
45.3
40
724
640
-
-
-
548
390
262
234
487
602
143
166
176
186
165
110
93.4
76.8
61.5
43.5
146
133
127
114
91.8
2974
404
872
1303
-
0.16
2.83
-
-
-
0.46
0.93
1.16
0.03
0.03
0.03
0.03
0.03
0.48
0.38
0.27
0.17
0.07
0.08
0.08
0.08
0.08
0.07
8.90
0.9
1.8
2.2
7.5
72.3
52.7
9
9.97
19.9
24.9
0.4
0.4
0.4
0.4
0.4
7.66
6.028
4.37
2.72
1.08
1.31
1.29
1.27
1.25
1.08
142
826.1
639
149
201
402
503
6.3
6.3
6.3
6.3
6.3
123
96
70
44
17
9971
6951
2540
3891
7782
9726
100
100
100
100
100
1962
1540
1119
698
276
21
20.7
20.4
20.1
17
2270
336
331
326
321
276
36327
19
38
48
391
782
975
7596
15196
18989
166
14040
-
2σn log(2n) AND gates and has the depth of O(σ log n): the speed-
up from using ABY3 would be less than 2X. We have not taken
the time to implement their protocol, but it might be interesting to
do so. For the f(PSI) case, the most efficient way to implement the
merge-compare-shuffle is by Boolean circuit, thus, there would be
no difference between using the constructions of Araki et al. [1] and
Mohassel et al. [29], as the latter use the former when it executes
Boolean circuits.
It would also be interesting to compare our results with Mohassel
et al. [30], which is based on garbled circuits, has a constant number
of rounds, and also assumes 1 malicious party out of 3. However,
as the implementation is not available, we instead compare with
an implementation of semi-honest, two-party garbled circuits; the
three-party version is not as efficient as the semi-honest protocol,
so this comparison is conservative. Beside comparing our protocols
against the generic protocol in the three party setting, we also
provide the comparison against the relevant state-of-the-art two
party protocols such as [33].
Session 10C: Secret SharingCCS ’19, November 11–15, 2019, London, United Kingdom24123PC Circuit-Based PSI computations via 3soPRF/AES
Inputs: P1 has X = {x1, ..., xn } and payload values D(1) =
(1)
n }, P2 has Y = {y1, ..., yn } and D(2) =
{d
(2)
{d
n }, P3 does not have inputs.
Protocol:
(1)
1 , . . . , d
(2)
1 , . . . , d
(1) P1, P2, and P3 call Frand to sample a shared key [k]B
(2) P1 and P2 calls Finput to share their input and pay-
loads as replicated arithmetic shares ([X]A, [D(1)]A) and
([Y]A, [D(2)]A) respectively among the three parties.
(3) The parties concatenate the shares [Z]A ← [X]A ||[Y]A
and [W ]A ← [D(1)]A ||[D(2)]A.
(4) P3 samples a random permutation π . The three parties
call FShuffle to shuffle the replicated arithmetic shares
according to π . Let Z (1) ≡ π(Z) and W (1) ≡ π(W ).
(5) They call F[x]A→[x]B to convert [Z (1)]A to [Z (1)]B.
(6) They execute the 3PC 3soPRF/AES circuit on shared
key [k]B and shared data [z]B for z ∈ Z (1) and obtain
[T]B ≡ [3soP RF(k, z)]B or [T]B ≡ [AES(k, z)]B for
z ∈ Z (1).
(7) The parties open T to P3.
(8) P3 uses π −1 to shuffle the set T . If P3 receives duplicated
values from either P1 or P2, he aborts.
(9) They then reveal T to P1 and P2. For each pair of dupli-
cated t ∈ T , the parties use the corresponding replicated
sharings of index and payload as input to a circuit for f .
Output:
P1 and P2 output the result of f and the intersection size s. P3
outputs the size of the intersection s.
Figure 11: The protocol to compute a function of both in-
dices in the intersection and the payloads associating with
the indices. AES can be replaced by a 3PC soPRF.
6.1 Computing functions of the intersection
6.1.1 Computing on the payloads. Both of our protocols that com-
pute f(PSI) on payloads (circuit/hybrid f(PSI)) are strictly better than
the generic protocols in every setting that we consider: varying
input length, network configuration (LAN, WAN), and measuring
runtime or communication cost. For the case of empty payload, the
results are shown in Table 1. Consider the case that the indices have
length of 80 bits (or they have variable length). For input sets of size