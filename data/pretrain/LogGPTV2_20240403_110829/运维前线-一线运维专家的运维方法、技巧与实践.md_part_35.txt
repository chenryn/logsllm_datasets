外部接口的性能：跨应用性能问题跟踪，比如脚本调用外部资源失败或超时。
给研发做快速处理，而不是呼叫研发上线慢慢分析和排查并最终处理。
这时如果有一套性能分析系统，也许就能迅速发现PHP的故障点了，从而可以反馈
数量。
等的超时时间，如果出现超时则写人Nginx错误日志，可以监控出现超时的日志
量提前介入观察，并记录下来作为长期统计值。
吞吐量（单位为rpm，每分钟请求数）：通过访问日志可以得到RPM，对突发的请求
可以归并告警。
求、RPM等，定期获取，并记录到监控系统，设定好阈值，进行告警，多台服务器
"http:/127.0.0.1/php_status?xml" lawk -F''$2/~active-
第7章PHP运维实践185
---
## Page 202
自动扩容、缩容。
源不够用的原因，
7.5.3PHP故障消除的方法
工作的价值。
量通过量化的数据表达出来，并且能够报告给业务方和老板，从而量化业务的质量，和运维
少了很多，或者多了很多吧。这里我们引人可用性管理的概念，可用性管理是把业务综合质
个网站业务的质量呢？如果老板问起，最近网站的运行质量怎么样，运维总不能说最近告警
186运维前线：一线运维专家的运维方法、技巧与实践
PHP 故障有时可能只是因为 PHP 的工作进程处理不过来了，
2.弹性调度
口快速修改发布上线：在做了很多修改后发布上线，如果仅是某些小功能点故障，那么
口回滚：如果是业务上线所导致的故障，那么最好的做法就是回滚。当然如果涉及有数
1.快速修复代码问题
口持续性能管理：性能是一个长期的、动态变化的过程，应该长期自动采集性能数据，
口可用性管理：在长期分析性能数据的基础上形成的一套可用性的标准。例如我们
通过上面所讲的各种方法可以发现网站各个点的性能问题，有没有什么办法可以衡量整
3.可用性管理
通过Zabbix 相关模板，即可展示出来。网上有大量的此类教程，请自行查阅。
UserParameter=active.processes,/usr/bin/curl
配置zabbix.agentd.conf：
即可得到活动的工作进程数，也就是当前并发处理的请求数。
lawk-F''
一般是不做回滚，而是快速修改，重新上线。同样，这也是权衡后的结果。
是应该直接扛住。
1
据库的修改，那么要回滚将会是很困难的。必须要做出选择。是回滚容易解决问题还
的。拿着这个指标就能定期汇报说，我们的网站性能下降了或提高了。
能曲线图。上面所说的每一个性能分析点都是可以通过长期采集数据来得到曲线图
以反映业务的性能变化情况。比如每分钟定期采集请求的响应时间，就能得到一条性
上等)。
望达到的性能目标（如响应时间在1500ms以内，整个服务的RPM达到500以
们可以在团队内部确定几个大家普遍关心的指标，形成服务等级目标（SLO），
题了。前面列出的分析点都可以形成一个指标，业界称服务等级指标(SLI)。
达到总进程的80%是安全的；如果某时刻慢日志数量大幅增加了则可能是出问
定义首页响应时间在1500ms内即认为是正常的；或者PHP-FPM工作进程最大
可以考虑弹性增加PHP应用层的服务器，在架构合理时弹性调度可以实现
'$2~/^active-processes/(print $3}'，active
-s "http://127.0.0.1/php_status?xml"
，如果仅是CPU和内存等资
我
---
## Page 203
导致PHP进程慢。于是我们通过基于xhprof的性能分析系统，发现（如图7-38所示)：
我们自己的。有可能是第三方的，怀疑是通过HTTP协议调用了第三方的接口，外部接口慢
现，利用Linux的 strace工具分析进程，发现有连接某个IP，但不知道是什么服务器，不是
（accesslog），没有特别慢的情况，慢日志（slowlog）中可以看到偶尔有curl_exec的调用出
可以考虑通过SQL的审计来实现。讯
有专门的文章详细介绍，这里就不展开了。如何事前发现问题SQL，是运维和DBA的课题，
SQL后即可解决，通过MySQLexplain命令来分析SQL。关于SQL优化和MySQL优化
析问题SQL，发现是表索引不合理引起的。
strace工具分析发现连接数据库和等待时间都比较长，估计是数据库负载较高。在MySQL中
7.5.4故障分析案例
牺牲不重要的，以保证核心重要功能的可用性。
把上传图片暂时停止，而保证看图业务的正常运行。柔性可用有很多细节策略，总体上就是
止提供服务，比如一个业务提供了看图和上传图片的服务器，如果出现了故障，就要考虑先
时，那就只能考虑降级服务，以保证核心业务可以正常提供服务，对不那么重要的就暂时停
结论和解决方案：是SQL写得不合理和表设计索引不合理引起的问题，加索引和优化
【案例2】调用外部接口引起的故障
分析：PHP访问日志（access log）看到有个查询列表页执行的时间比较长，进一步通过
分析：研发刚换人，也不熟悉代码，代码很复杂，无法逐行阅读。运维上去看访问日志
现象：访问某页面卡，经常打不开
现象：某业务反馈比较慢，有时报502错误。
【案例1】SQL问题的发现和分析过程
当整个线上一下子找不到问题了时，或者是找到了问题又修复不了时，无资源池可用
3.柔性可用
口弹性条件：能动态计算整个应用层的可用性指标，可以是PHP的RPM或响应时间
口实现难点：自动扩容或缩容要求自动化程度很高，资源池的管理，能分配机器资源
口前提条件：应用服务要求做到无状态化，不在本机中保存与业务相关的数据，如图片
设定的阈值则进行自动扩容或缩容。
或者是CPU使用率、网络状况或负载均衡的请求响应时间、健康次数等，如果达到
缩应用服务器，如动态修改 Nginx 的upstream 配置。
能自动开通数据库等后端存储的权限，能自动部署应用程序等。Web服务器能自动扩
分布式的文件系统中。
用户 Session 等。Session可以通过分布式存储来管理，图片等业务生产的内容要放到
第7章PHP运维实践187
---
## Page 204
发现是他新增了一个功能，key只有10个，分析后发现value都在40KB一个，访问量一多，
获取一次缓存。从开发经验来讲，如果获取太慢，这已经失去了缓存的作用。和开发沟通后
有个 PHP get mc缓存的函数调用（call）次数很多。分析PHP代码发现几乎每调用一次都要
有研发认为是缓存内存不够了，要求加大Memcached的内存空间。运维通过xhprof分析到
为是缓存失效了，有人认为是缓存服务负载顶不住了，应该增加更多的mc服务器负载，也
Memcached服务，分析mc状态，发现连接数也特别多。
处理、返回等，时间较长。
部HTTP 接口的工具，PHP代码中经常会使用，访问过程需要多个步骤，DNS、连接、等待
稳定就快速返回失败，而不是卡在那里影响全局。
外部接口提供方查找性能问题，同时在curl_exec 中设置超时时间为200ms，如果外部接口不
188
慢日志显示缓存的获取函数较多，access log 显示也较长，但是没有更多的信息。有人认
分析：通过iftop等工具发现流量来自于多台应用服务器，缓存服务器端口是11211，是
【案例3】缓存失效引起的
strace能在系统层面和PHP进程层面发现问题，而不只是单个PHP脚本。curl是访问外
现象：告警系统发现某台缓存服务器的流量突然暴增，达到900Mbit/s。
结论和解决方案：curl访问外部接口占用了太多时间，而且没有设置访问超时时间。让
运维前线：一线运维专家的运维方法、技巧与实践
图 7-38通过 xhprof 发现 PHP 代码性能瓶颈
 Inc: 6390.134 ms (94.8%)
Excl:0.023 ms (0.0%)
Excl: 0.065 ms (0.0%)
100.0%
100.0%
dwHttp:curIGet
2totalcalls
dwHttp:get
100.0%
Excl: 6639.405 ms (98.5%)
 inc: 6639.405 ms (98.5%)
2calls
2calls
3totalcalls
curl_exec
96.2%
Excl:0.036ms (0.0%)
Inc:249.745 ms (3.7%)
dwHttp:curlPost
100.0%
1 total calls
3.8%
1call
100.0%
---
## Page 205
这也是我莫大的荣幸。
术的一些总结，也融合了对运维技术、自动化、平台化的一些思考，希望对读者有所帮助
各种技术、平台都涌现出来，我认为这对广大运维既是挑战也是机遇。本章是对PHP运维技
所面临的挑战也越来越大，同时也要看到最近几年运维界的发展很快、交流分享也很活跃
障处理的一些思考。
7.5节讲PHP的性能分析和故障处理时，讲到了多种方法用于分析PHP的性能问题，以及故
升的不仅是个人的效率，更是提升了整个团队乃至整个公司的效率，减少了沟通、等待和争
7.1、7.2节讲了一些PHP认识和开发、架构等较偏原理方面的内容，有了较深的认识和理解
不足的原因吧。
只是一小部分，且我们对PHP的了解并不像自己想象的那么深人。也有不少人认为PHP技
那么简单、自然。然而在运维几个较大的项目后，我改变了这种看法，其实我们了解的可能
单，似乎很容易就能掌控住。其实在业务量还小的时候，业务如果正常运行，一切似乎都是
7.6小结
apc 的用户缓存作为本地缓存，缓存30秒后过期，这样就大大缓解了带宽和调用次数。
论的成本。PHP的性能问题和故障是分不开的，故障处理可能是运维做得最多的工作，7.4
有些读者看来可能无关紧要，但在稍大的团队或多团队的公司里，这些会显得重要得多，提
之后，对运维工作会有很大的帮助。7.3节讲了PHP进程的部署，PHP代码的发布，这些在
术栈的团队无法解决较大规模、高并发项目的性能问题，其实我认为这也许是团队运维建设
但是业务需要，也无法否定。可通过增加本地缓存来减少读取网络缓存的次数。最后将PHP
流量就会暴增。
随着云计算、移动互联网、各种海量的服务器规模和业务规模的网站项目的发展，运维
结论和解决方案：很大的key而且调用频繁将会导致带宽暴增。这需求有点不太合理，
本章是个人几年来积累的一点点经验总结，希望能对读者在PHP运维工作上有所帮助
很多人对PHP有一种固有的印象：它是一种传统的PHP开发语言，开发简单，运维简
第7章PHP运维实践189
---
## Page 206
角度展开来讲。
本章的写作目的就是帮助应用运维人员顺利完成这种转变，这里主要从应用系统运行分析的
用运维团队在应用系统运行分析方面所做的自我解放，从被动式向前赡性运维方式的转变。
动化建设，并探索应用运维向运维开发、运维分析转型。本文是从运维分析的角度来讲解应
作性的工作。
保障不力；业务认为应用运维不给力，系统不稳定；开发觉得应用运维不懂应用，只会做操
作中。
乏足够的关注，导致应用运维团队疲于被动处理故障应急和善后，以及重复的整改处理工
云建设与业务大数据建设的方向发展，而对于承载业务运营开展的应用系统的运行情况缺
务对应用系统的稳定性和可靠性的要求也越来越高。在传统企业中，运维部门主要往基础
的微信公众号“运维之路”（微信号：HuashengPeng001）。
设，对应用生产运维管理、自动化建设等工程有较深刻的见解，有兴趣的读者可以关注作者
联网、中间业务、呼叫中心等渠道交易应用系统运维管理，同时也负责监控等自动化运维建
为解决应用运维的困境，我们开展了一系列应用运维的优化工作，包括操作性工作的自
应用运维团队除了多干活以外，还面临这样一个窘境：老板认为应用运维做得不够细致
应用系统运行分析具有以下特点：
随着业务的发展，企业里新建应用系统的数量迅速增加，架构变得越来越复杂，业
彭华盛，目前任职广发银行数据中心，是渠道交易应用系统团队负责人，主要负责互
作者简介
应用系统运行分析
第8章
---
## Page 207
解决性能、容量、客户体验的问题，建议从以下两方面定位好数据来源：
8.1.1
程。以下将简单介绍其中的几个模块。
方法进行分解，以得到一些共性的分析方法，即将经验总结出来的分析方法进行标准化的过
个原则。
理，运维人员尽量只负责观察和分析数据，为此在应用运行分析的过程中，我们定了如下
方案的实施推广难度。为了便于推广，建议将数据的采集、保存和标准化分析交给机器去处
8.1
如图8-1所示：
，因此需要将经验转化为机器分析模型。在分析模型方面，主要是对不同类型系统的分析
要分析应用的运行情况，首先需要获得反映应用系统情况的数据，因为运行分析主要是
能自动化的则用自动化来实现：分析涉及的数据采集、加工消费、可视化都可由自动
口简化分析方法：找出运行分析指标的共性，过滤不同应用系统的差异性，将分析方法
口解决主要的问题：评估应用运维成熟度的角度有很多，鉴于各应用系统的逻辑不一致，
在制定运行分析方案时，不仅要考虑运行分析需要分析什么信息，还需要考虑如何减少
运行分析是一个长期实施的过程，仅仅依靠运维人员经验的分析很难保证运行分析的质
运行分析所涉及的运营分析系统架构
口提供可订阅式的可视化报告，供业
品
口提供各应用系统自身业务特点的业
口涵盖应用交易级（交易量、耗时、
口涵盖系统资源、数据库、中间件等标准化的性能容量数据分析。
原子化。
、运行分析采用2/8原则，主要进行性能、容量、客户体验的分析。
化实现。
分析模型
务和运维管理团队决策之用。
数据采集
系统自动化支持。
分析、数据归档、
提供可视化、数据采集、数据建模
据建模的自动化支持。
务专家式数据分析的数据采集、
数据分析。
成功率、响应率等）标准化的性能
、数据访问接口的
数
立用系统
集中监控工具
批量API接口
图8-1
第8章
应用系统
运行分析架构图
可视化服务
应用系统运行分析
数据采集
应用系统
批量任务
批量API接口
应用系统
191
---
## Page 208
率、耗时、交易量波动、响应率等数据。
总线类的节点在企业内部制定了规范的接口标准，总线类节点往往能够比较方便地获得成功
力度。在开发团队的支持力度相对较弱时，建议优先在总线类应用系统中注人，主要是因为
运维流水表的思路同样也适用于文本日志的设计，比如单独记录满足条件的应用日志。
间、状态、下游系统这3个关键数据，进而通过这3个数据定位一笔交易的处理性能。数据
数据运维流水表，也可以根据实际情况收集类似的数据，但最好能够获得一笔交易的处理时
还可以看出是什么交易、哪个关联系统影响了整体性能。当然，如果应用系统没有设计此类
系、具体交易类型等信息，有了这些信息不仅可以知道待分析的应用系统的交易性能情况，
数据流水表来获取交易的概况，以下是其中一个较为通用的数据运维流水表结构，如图8-2
据库层面为例，推荐在交付运维部门前，在应用系统中提供一个数据运维流水表，通过这个
工具来获取（比如上海天旦的BPC工具)，以下简单介绍这两种数据获取方式。
库层面、应用日志等可以以入侵应用系统的方式主动获取，也可以采用类似于旁路APM等
时间范围内的交易笔数等。对于这些数据的获取，不同的应用系统有不同的方法，比如数据
过IDLE看到系统CPU空闲的百分比。
CPU资源为例进行说明：
工具，还可以使用一些开源的脚本去定制适合自己的系统资源数据，下面以 Python 获取系统
产运行数据采集的目标。
问题定位及应急配套工具关联、事件驱动等建设目标，还定位监控体系中的监控工具作为生
重要渠道。我们在监控体系的建设过程中，对监控体系的定位除了生产运行事件报警、辅助
192运维前线：一线运维专家的运维方法、技巧与实践
所示。
，第一种方式：修改应用系统代码，由应用主动将性能数据记录在数据库或日志中。以数
主动在应用代码中注人数据运维流水表或文本日志的方案，还依赖于开发团队的支持
图8-2所示的数据运维流水表获取了交易标识、交易时间、处理状态、上下游系统关
如果没有监控系统也没有关系，可以使用一些简单的性能工具，或者使用一些NMON
交易性能的评估指标有很多，比如交易平均处理时间、交易成功率、交易失败率、指定
2.交易性能数据
通过对以上数据的分析，可以得到CPU的 SYS、USER 等进程使用的资源占比，可以通
#以上的Python脚本可以输出Linux操作系统下cPU的使用率情况
print(cpu_data)
关于性能容量数据，
1.性能容量数据
口反映交易指标的性能及客户体验数据，比如交易量、耗时、响应率等。
口反映系统软件运行情况的容量性能数据，比如CPU、内存、数据库事务等。