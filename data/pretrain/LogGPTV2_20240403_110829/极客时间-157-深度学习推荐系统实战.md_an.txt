# 答疑：基础架构篇与特征工程篇常见问题解答

大家好，我是王喆。截至目前，我们已经完成了基础架构篇和特征工程篇的学习。在这段时间里，我收到了许多同学的留言，并注意到了大家在学习和实践过程中遇到的各种疑问。今天这节课，我将针对10个典型问题进行详细解答，希望能帮助大家解决困惑。

## 实战项目安装与操作问题
在第二课中，我们介绍了SparrowRecsys项目的安装方法。尽管如此，很多同学在实际安装过程中还是遇到了一些问题。这里，我总结了两类典型问题，并给出了解决方案。

### 问题1：如何运行SparrowRecsys Maven项目？
**步骤如下：**
1. **安装IDEA**：前往官网下载并安装IntelliJ IDEA。
2. **打开项目**：在IDEA中选择 `File -> Open`，然后选择git clone下来的项目根目录，导入项目。
3. **配置Maven项目**：在项目结构树中的`pom.xml`文件上右键点击，设置为Maven项目（新版本IDEA可能无需此步骤）。
4. **配置SDK**：在`File -> Project Structure -> Project`中配置Java SDK（SparrowRecsys使用Java 8），并在Global Libraries中配置Scala SDK（版本2.11）。
5. **运行推荐服务器**：找到类文件`RecSysServer`（位于`com.wzhe.sparrowrecsys.online.RecSysServer`），右键点击后选择`Run`。
6. **验证配置**：在浏览器中输入`http://localhost:6010/`，如果看到SparrowRecSys首页，则说明配置成功。

### 问题2：找不到“为你推荐”页面及某些推荐算法？
**解释**：
SparrowRecsys项目是随着课程进展逐步完善的。如果你在课程未完结时学习，可能会发现某些功能尚未加入。例如，“为你推荐”功能将在后续的“推荐模型篇”中实现。已讲解过的内容会在SparrowRecsys中有对应的实践代码。

## 课程相关知识误区
除了安装问题外，同学们对某些知识点也有疑惑。下面我将解答几个典型问题。

### 问题3：为什么将协同过滤放在排序层而不是召回层？
**解答**：
五六年前的传统推荐系统常使用协同过滤作为主排序模型。近年来，虽然深度学习模型逐渐取代了它，但协同过滤因其简单高效的特点仍适用于召回层。例如，矩阵分解后的embedding可以快速召回。本课程中的推荐系统架构是一个经典架构，但在实际应用中应灵活调整。

### 问题4：多模态特征在推荐排序模型中效果不明显？
**解答**：
多模态技术目前尚处于初级阶段，其效果受业务场景影响较大。例如，在视频推荐中，识别出明星比识别出汽车等物品对点击率的影响更大。因此，多模态特征的效果需结合具体业务来评估。

### 问题5：对特征进行平方或开方是否会改变训练数据分布？
**解答**：
对特征进行平方或开方操作只会改变特征本身的分布，而不影响训练数据的整体分布。只要标签分布不变，模型预测结果依然符合数据分布。这些操作在推断过程中会被复现，不会影响模型性能。

### 问题6：Graph Embedding中BFS与DFS的作用？
**解答**：
为了表达网络的“结构性”，随机游走应倾向于BFS；为了表达“同质性”，则应倾向于DFS。这是Node2vec原论文中的结论，建议参考原文以获得更深入的理解。

## 关于推荐系统的深入思考
接下来，我们探讨一些关于课程内容的延伸思考。

### 问题7：能否用Flink替代Spark实现批流一体架构？
**解答**：
批流一体是未来趋势，但目前许多公司仍在使用Lambda架构。Flink和Spark各有优势，且都在不断发展中。我认为两者会长期共存、共同发展。

### 问题8：实时用户推荐请求是否需要经过大数据处理？
**解答**：
实时用户请求的特征通常直接在服务器内部提取，不需要再经过大数据处理。但请求数据最终会生成日志，供后续处理和特征生成。

### 问题9：在线预测时，特征是从数据库读取还是在线组装？
**解答**：
组合特征最好在线处理，以节省存储资源。但对于必须存储的组合特征（如用户-物品曝光记录），仍需从数据库读取。

### 问题10：为什么深度学习不擅长处理稀疏特征向量？
**解答**：
稀疏特征会导致神经网络收敛缓慢，且维度高会导致参数数量庞大。通过Embedding将稀疏特征稠密化后再输入深度学习网络，可以有效解决这些问题。

感谢前八讲中提出精彩问题的同学！希望大家继续积极提问，共同进步！