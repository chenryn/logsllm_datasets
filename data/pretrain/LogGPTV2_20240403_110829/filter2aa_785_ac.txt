### ALEXANDRE BORGES - MALWARE AND SECURITY RESEARCHER
#### ADVANCED MALWARES
#### DEFCON 2018 - USA

---

### UEFI Boot Phases and Security

**UEFI Boot Phases:**
- **SEC (Security):** Initializes security features such as caches, TPM, and MTRR.
- **PEI (Pre-EFI Initialization):** Manages SMM and memory initialization.
- **DXE (Driver Execution Environment):** Initializes platform and devices, dispatches drivers, and enumerates FVs.
- **BDS (Boot Device Selection):** Handles EFI Shell and OS Boot Loader.
- **TSL (Transient System Load):** Loads the transient system.
- **RT (Run Time):** Executes the runtime environment.

**Initial Boot Block (IBB):** After the initial boot block, various components are loaded and initialized.

**Hardware Security Features:**
- **Boot Guard:** Validates the boot process.
- **OS Secure Boot:** Ensures only trusted code is executed.
- **UEFI Secure Boot:** Protects the boot process from unauthorized code.

**Malware Attack Points:**
- Malware and exploits can target the Hypervisor, Windows Boot Loader, kernel drivers, and third-party applications.

**Windows Boot Process:**
- The UEFI loads the Hypervisor and Secure Kernel.
- ELAM (Early Launch Anti-Malware) acts on drivers before Windows is fully loaded and initialized.

---

### Firmware Composition and Security

**Firmware Regions:**
- **Flash Descriptors, BIOS, ME (Management Engine), GbE, and ACPI EC.**
- **ME (Management Engine):** Has full access to DRAM, operates even when the system is off, and can access network interfaces. This makes it a significant security concern.

**Intel Boot Guard:**
- Validates the boot process by flashing the public key of the BIOS signature into Field Programmable Fuses (FPFs).
- If the closure fuse is not set, it can be exploited.
- The SPI region must be locked, and Boot Guard configuration must be set to protect against SMM driver rootkits.

**CPU Boot ROM:**
- **BG Startup Authenticated Code Module (ACM):** Loaded into Authenticated Code RAM.
- **SEC + PEI (IBB):** Verifies the IBB.
- **BIOS:** Public key’s hash for verifying the ACM is hard-coded in the CPU, making it difficult to modify the BIOS without the private key.

**SPI Flash Memory:**
- **BIOS Guard:** Protects against unauthorized SPI flash access, BIOS updates, and boot infections.
- Only trusted modules (verified by ACM) can modify the SPI flash memory.

**Secure Boot:**
- Protects the entire boot path from bootkit infections.
- Requires valid digital signatures for key components, including kernel loading and important system files.
- Prevents the loading of any unsigned code.

**Platform Key (PK) and Key Exchange Key (KEK):**
- **PK:** Establishes trust between the platform owner and firmware, verifies KEK.
- **KEK:** Establishes trust between the OS and firmware, verifies authorized and forbidden databases (db and dbx).

**UEFI Image Integrity:**
- Without ensuring UEFI image integrity, a rootkit could load another UEFI image undetected.
- UEFI BIOS supports TE (Terse Executable) format, which does not support signatures, allowing a rootkit to bypass signature checks and disable Secure Boot.

**Windows 10 SMM Protections:**
- **WSMT (Windows SMM Security Mitigation Table):** Introduced in Windows 10 version 1607 and later.
- Firmware executing SMM must be authorized and trusted by VBS (Virtualized Based Security).

**SMM Protection Flags:**
- **FIXED_COMM_BUFFERS:** Ensures input/output buffers are within expected memory regions.
- **SYSTEM_RESOURCE_PROTECTION:** Prevents out-of-band reconfiguration of system resources.
- **COMM_BUFFER_NESTED_PTR_PROTECTION:** Ensures pointers within fixed communication buffers refer to predefined memory regions.

---

### Tools and Techniques for Firmware Security

**Chipsec Utilities:**
- `chipsec_util.py spi dump spi.bin`
- `chipsec_util.py decode spi.bin`
- `chipsec_main --module common.bios_wp`
- `chipsec_main.py -m common.bios_smi`
- `chipsec_main.py -m common.spi_lock`
- `python chipsec_main.py --module common.bios_ts`
- `chipsec_main.py -m common.smrr`

**BIOS_CNTL Register:**
- **BWE (BIOS Write Enable):** Allows writing to SPI flash if set to 1.
- **BLE (BIOS Lock Enable):** Generates an SMI routine if BWE changes from 0 to 1.
- **SMM_BWP (SMM BIOS Write Protection):** Protects the BIOS area if enabled.

**SPI Protect Range Registers:**
- Control Protected Range Base and Limit fields to set regions for write and read protection.
- HSFSS.FLOCKDN bit prevents changes to the Write Protect Enable bit, protecting SPI flash memory from malware.

**Top Swap Mode:**
- Enabled by BUC.TS in Root Complex range, allows fault-tolerant BIOS boot-block updates.
- Unprotected or unlocked top swap configurations can be exploited by malware to redirect the reset vector.

**SMRR (System Management Range Registers):**
- Blocks access to SMRAM while the CPU is not in SMM mode, preventing SMI exploits on cache.

---

### Conclusion

**Challenges:**
- Security professionals face difficulties in analyzing malicious drivers due to the complexity of the theory.
- Real customers lack awareness of ring -2 threats and how to update system firmware.
- Protections based on integrity (digital certificates and signatures) may become vulnerable if cryptographic algorithms are broken (e.g., quantum computation).

**Contact Information:**
- **LinkedIn:** [http://www.linkedin.com/in/aleborges](http://www.linkedin.com/in/aleborges)
- **Twitter:** @ale_sp_brazil
- **Website:** [http://blackstormsecurity.com](http://blackstormsecurity.com)
- **Email:** alexandreborges@blackstormsecurity.com

**About Alexandre Borges:**
- **Malware and Security Researcher.**
- **Consultant, Instructor, and Speaker** on Malware Analysis, Memory Analysis, Digital Forensics, Rootkits, and Software Exploitation.
- **Member of Digital Law and Compliance Committee (CDDC/SP).**
- **Reviewer member of The Journal of Digital Forensics, Security and Law.**
- **Referee on Digital Investigation: The International Journal of Digital Forensics & Incident Response.**
- **Instructor at Oracle, (ISC)², and Ex-instructor at Symantec.**

Thank you for attending my talk!