of session initiation, meaning that an additional response
triggered by SP 3 will not appear abnormal to a network
monitor. Third, the mechanism doesn’t involve either need
to race packets, or a custom client, and allows the autho-
rization challenge to be learned indirectly by a web browser
client.
3.1.2 HTTP Reﬂection
Triggering additional data within an HTTP or HTTPS
stream oﬀers an alternative mechanism for authorizing clients.
While the use of STUN has many attractive properties, it
Figure 1: The SP 3 protocol. Dashed lines indi-
cate the consent process, and represent the logical
communication of a challenge, rather than explicit
packets sent between those entities.
spoofed packets. It acts as a relay, accepting encapsulated
IP packets from the sender and sending them to the client,
even when their source address is spoofed. The client is
the destination that receives the packets. The sender is the
host that generates the packets. While the client and sender
may be the same host, they don’t have to be, and some
applications are based on them being logically distinct.
A primary consideration in the design of SP 3 is safety. In
order to provide a service that makes a reasonable trade-oﬀ
between enabling valid use cases for packet spooﬁng while
not opening itself up to abuse and attacks, the SP 3server
enforces a policy on packets it is willing to spoof. The pri-
mary property we choose to guarantee in SP 3
is that the
server will only send packets to a client that wants to re-
ceive them. In 3.1, we describe how we deﬁne “want”, and
the protocol the server uses to establish consent from the
client.
The design of the SP 3 protocol is shown in Figure 1.
The protocol is structured similarly to other proxy protocols,
like SOCKS or HTTP connect, with an initial negotiation
preamble which concludes with the connection becoming a
channel over which to relay packets. Rather than operating
at a TCP level, SP 3 messages are sent over a Web Socket
connection, allowing the sender to be implemented within a
web page, and taking advantage of an existing standard for
message integrity and conﬁdentiality. Because there is no
response expected to spoofed packets, the response channel
from the SP 3
server to the sender can safely continue be
used to send status messages about the status of the con-
nection, remaining quota, and errors.
3.1 Client Consent
The SP 3 protocol includes the notion of client consent.
We use this term to mean that the client wishes and can
receive spoofed packets, and guarantee it by ensuring the
the client is able to prove that it can receive a piece of data
that can only be accessed by the IP address it claims to be
at. This form of authentication deﬁnes a proof-of-ownership,
that the client really is at the IP address it claims to be,
therefor mitigating the potential for denial of service or other
attacks on unwary hosts. The speciﬁc properties we enforce
in protocols to prove ownership are:
SenderClientServerConnection RequestChallengeAuthorizationPacketsSpoofed Packets927require the use of spoofed packets, and ﬁt within the security
framework described in the previous section.
NAT hole-punching Currently, NAT hole-punching only
works for UDP, partially because even when the clients are
controlled,
it generally requires root permissions to send
packets with a speciﬁc sequence number. Having a source
of packet injection can provide a mechanism to synchronize
sequence numbers and create TCP connections between two
NAT’ed machines.
Firewall characterization It’s often diﬃcult to test how
your network will respond to packets sent from black-holed
or unadvertised preﬁxes. A source of spoofed packets allows
you to validate ﬁrewall rules and routing policy.
Communication stenography The ability to send packets
from arbitrary sources can help to mask traﬃc by adding a
layer of cover traﬃc and IP diversity that makes surveillance
much more diﬃcult.
5. CONCLUSION
This paper has described the SP 3 system, a protocol and
design for allowing more clients on-line to participate in com-
munication using spoofed packets. Packet spooﬁng remains
an important tool for digital attackers, and for challenging
security assumptions in protocol designs and network secu-
rity systems. Code for a working prototype of the system is
available at github.com/willscott/sp3
6. REFERENCES
[Andersen et al. 2008] David G Andersen, Hari
Balakrishnan, Nick Feamster, Teemu Koponen,
Daekyeong Moon, and Scott Shenker. 2008.
Accountable internet protocol (aip). In SIGCOMM
CCR. ACM.
[Beverly and Bauer 2005] Robert Beverly and Steven
Bauer. 2005. The Spoofer project: Inferring the extent
of source address ﬁltering on the Internet. In SRUTI,
Vol. 5. USENIX.
[Duan et al. 2008] Zhenhai Duan, Xin Yuan, and Jaideep
Chandrashekar. 2008. Controlling IP spooﬁng through
interdomain packet ﬁlters. Dependable and Secure
computing 5, 1 (2008).
[Ensaﬁ et al. 2014] Roya Ensaﬁ, Jeﬀrey Knockel, Geoﬀrey
Alexander, and Jedidiah R Crandall. 2014. Detecting
intentional packet drops on the Internet via TCP/IP
side channels. In PAM. Springer.
[Ghosh et al. 2014] Mainak Ghosh, Miles Richardson,
Bryan Ford, and Rob Jansen. 2014. A TorPath to
TorCoin: proof-of-bandwidth altcoins for compensating
relays. Technical Report. DTIC Document.
[Guha et al. 2004] Saikat Guha, Yutaka Takeda, and Paul
Francis. 2004. NUTSS: A SIP-based approach to UDP
and TCP network connectivity. In SIGCOMM FDNA.
ACM.
[Jin et al. 2003] Cheng Jin, Haining Wang, and Kang G
Shin. 2003. Hop-count ﬁltering: an eﬀective defense
against spoofed DDoS traﬃc. In CCS. ACM.
[Scott et al. 2016] Will Scott, Thomas Anderson,
Tadayoshi Kohno, and Arvind Krishnamurthy. 2016.
Satellite: Joint analysis of CDNs and network-level
interference. In USENIX ATC.
Figure 2: Consent protocol using HTTP reﬂection.
Communication between the client and SP 3 server
are indirected through the SP 3
sender. The chal-
lenge token used to verify the client is passed in
steps 3, 5, and 6. Step 4 is optional, and is sent
unilaterally by the client so that the response is not
unexpected by the network following the outline in
NUTTs [Guha et al. 2004].
may be undesirable because the protocol stands out1, or
because the messages cannot be encrypted. While the chal-
lenge is transmitted as a random nonce, it leaves the method
open to active probing attacks. the use of Web protocols can
overcome this limitations.
The design of our basic HTTP authorization mechanism
is shown in Figure 2.
In this design, the client picks a
trusted, single-homed web server, and initiates a connec-
tion to it. It then uses the out-of-band protocol it has with
the packet sender to relay the connection state, the TCP
sequence number, and potentially the SSL key agreed upon.
The SP 3
server uses this information to send an HTTP
request to the web server, spoofed to appear to be on the
existing connection. The HTTP request will have the au-
thorization challenge in the request path, structured such
that the response, sent to the client, will also include the
challenge code.
This mechanism is more complex. It requires agreement
on an appropriate candidate web server, which can be learned
from [Scott et al. 2016]. It requires knowledge of TCP header
information, which means that the client will need to have
root permissions on the machine.
It also requires packet
spooﬁng by the server, which must be strictly rate-limited
to prevent abuse towards web servers. However, encrypted
web requests are ubiquitous, and are very diﬃcult to dis-
criminate against.
4. APPLICATIONS
The goal of SP 3 is to democratize access to a limited form
of packet spooﬁng, so that general clients can automatically
participate in protocols which require spoofed packets. The
premise of such a system is that there are interesting or novel
protocols of that type. We ﬁnish this paper with a descrip-
tion of an initial set of protocols which are both valuable,
1there have been reports of networks where all UDP traﬃc
is blocked.
sp3WebClient1. Handshake4. Dummy Request2. Leak State6. Authentication Token3. Inject Request5. Response928