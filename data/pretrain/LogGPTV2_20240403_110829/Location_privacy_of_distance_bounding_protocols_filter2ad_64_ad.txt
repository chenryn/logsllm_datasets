of chips of code per bit of data. The longer the spreading
code is, the harder it is for the attacker to detect the trans-
mission but it also takes longer to send and receive a single
bit of data (if the rate is ﬁxed). This has implications on
the granularity of the distance bound since the prover must
wait for the entire chip sequence to arrive before responding,
in order to verify that it is indeed the right spreading code
being used.
Another problem with the length of the message is that
in order to acquire the signal, i.e., perform the course syn-
chronization, the receiver must get at least λ chips. If the
message is only one bit long then a preamble must be used.
This further increases the overall transmission time for each
message and thus reduces the granularity of the distance
bound.
4.4.3 Off-line attacks
A problem that signal spreading does not solve is oﬀ-line
attacks. A determined attacker can record the signal in the
entire band used for transmission and then do a brute force
attack on the spreading codes. Since the timing is not ob-
scured by the spreading technique (beyond what happens
during signal acquisition) the attacker will get the same in-
formation as with an online attack. A brute force attack
might be infeasible for DSSS but for FH it is trivial.
Because of the problems outlined in this section, signal
spreading alone can not be used to eﬀectively prevent infor-
mation leaking without introducing other problems but we
will show that it can be an additional protection mechanism
when used in conjunction with our location private distance
bounding protocol described in Section 5.
5. LOCATION PRIVATE DISTANCE
BOUNDING PROTOCOL
Distance bounding protocols used to build topology maps
of a network or to control access to speciﬁc resources in a
network are prime targets for attack. The leaking of infor-
mation from these protocols will give the attacker the same
map of the network as the legitimate nodes have, or enable
him to map out where any special access zones might be.
This can be a severe breach of security.
In this section we present a distance bounding protocol
designed to minimize the amount of information that leaks
to an attacker. In order to prevent the attacker from being
Np ∈ {0, 1}k
P
V
EKpv (P,V,Np)kM AC
EKpv (V,P,HM,Np)kM AC
RandkHM kNv kRand
RandkNv ⊕NpkRand
Nv ∈ {0, 1}k
HM ∈ {0, 1}j
Random
1
3
HM
detector
0
1
HM
remover
Random
1
0
1
0
1
Figure 7: Distance bounding protocol that does not
leak information to a passive or active attacker.
able to learn the transmission times of the rapid bit exchange
our location private distance bounding protocol is based on
streams as illustrated in Figure 7.
Our protocol works in the following way: The prover picks
a k bit nonce and sends it to the veriﬁer, encrypted with a
shared key. The veriﬁer also picks a k bit nonce and a hidden
marker HM that will mark the beginning of valid data in
the data stream. The hidden marker is sent encrypted to
the prover. The veriﬁer then starts sending random data
to the prover. The prover will xor this data with his own
stream of random bits and send it back to the veriﬁer.
The way in which the streams are started and stopped is
important in order not to leak any information. The fol-
lowing describes the timing of the various steps after both
streams are established:
After both streams are established, the prover will con-
tinuously monitor the stream for the hidden marker while
xor’ing it with random bits and sending it back. When the
last bit of the hidden marker appears the prover will start
xor’ing the incoming data (which should now be the veriﬁers
nonce) with his own nonce and transmit this back to the ver-
iﬁer. The time at which the veriﬁer starts transmitting the
hidden marker HM followed by the nonce Nv is randomly
chosen (within the setup window ws) so an attacker can not
deduce the transmission time of the nonce from the trans-
mission time of the start of the stream. The setup window
only begins after both streams are established.
The moment the veriﬁer has sent the last bit of the hidden
marker he will begin to save the bit stream from the prover.
This will enable the veriﬁer to count the number of bits
between the transmission of Nv and the reception of Nv⊕Np.
After the ﬁnal bit of the veriﬁers nonce Nv has been sent,
the veriﬁer continues to transmit random bits to make it
harder for the attacker to determine when the actual trans-
mission ended. The prover also switches back to random bits
after sending Nv ⊕ Np. When Nv ⊕ Np has been successfully
received, the veriﬁer will stop the continuous transmission
after a short random delay, and after a another random delay
the prover will do the same. The short random delay must
be there or an attacker can measure the time between the
end of the veriﬁers transmission and the end of the provers
transmission to estimate the time of ﬂight of the signal.
Once both streams have been terminated the prover will
count the number of bits in the saved bit stream between the
moment the veriﬁer started to send out Nv and the moment
the ﬁrst bit of Np ⊕ Nv came back and subtract the known
processing time of the provers radio. This gives the veriﬁer
Prover
Np
2
Verifier
Nv⊕Np
X HM kNv
Figure 8: A functional diagram of the prover and
veriﬁers radios.
a round trip time and thus an upper bound on the distance
to the prover.
The location private distance bounding protocol works at
any bit rate, but for it to be useful, the bit rate must be
high enough to give a reasonable granularity. A bit rate of
1Gb/s will give a granularity of about 30cm. We will look
at the bit rate requirements of the protocol in more detail
in Section 5.5.
5.1 External attackers and malicious provers
A malicious prover can not cheat on the distance mea-
surement for the same reason that a prover using an exist-
ing distance bounding protocol described in Section 2 can
not cheat; he does not know the value of the challenge bit
Nv[i] before he has to send the response. The bit rate of the
streams must be the same in both directions, i.e., from the
veriﬁer to the prover and back. That means that the prover
can only send the ith bit of Nv ⊕ Np back after he receives
the ith bit of Nv. Even if the prover tries to guess the next
bit he has to wait until it is time to send the next bit before
doing so (otherwise he will violate the bit rate) and by that
time, he knows the actual value of the next bit of Nv, so
there is no opportunity to guess.
An external attacker can not get the distance to either the
prover or the veriﬁer by initiating the protocol as it requires
communication using a shared key before the streams are
started. Once Np and the HM have been exchanged, the at-
tacker can not learn anything from listening to the streams
since the data transmitted looks completely random and be-
cause the streams are one long continues transmission the
attacker can not deduce any message arrival times. We anal-
yse the attackers chance of guessing valuable information in
Section 5.4.
5.2 Construction of the radios
To make it clear how location private distance bounding
protocol handles streams, we give a short description of a
possible construction of such a system.
A functional diagram of the prover and veriﬁer is given in
Figure 8. The diagram shows in a schematic way how the
streaming part of the protocol could be realized. To read
the diagram assume that all the multiplexers start in posi-
tion 0. The prover sends out bits from a (pseudo) random
source while making sure that the HM -sequence does not
accidentally occur in the random bit stream.
When the bit stream reaches the prover it is fed through
an HM -detector that has two outputs. The ﬁrst output
/
/
o
o
k
s
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
+
3
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
is the unchanged stream itself and the second output is a
signal that makes the prover’s multiplexer switch from input
0 to input 1 if the HM -sequence is found. The unchanged
stream is xor’ed with random bits (when the multiplexer is
at position 0) and then sent back to the prover.
When the veriﬁers multiplexers are switched to the state
marked 1 he starts the transmission of the hidden marker
HM and the nonce Nv. When the HM -sequence reaches the
prover he will detect it and switch his own multiplexer thus
sending back Np ⊕ Nv.
5.3 HM remover and HM detector
In order to make sure that the random bits used in the
beginning and end of the location private distance bound-
ing protocol does not accidentally contain an HM -sequence,
the veriﬁer must have a mechanism to ensure that if such
a sequence does occur it will be altered. The way in which
the random bit stream is altered is important as the prover
might introduce a bias in the bit stream and make the out-
put easily distinguishable from pure random.
In the following we assume that our HM -remover is a
shift-register with random bits coming in from the right and
going out through the left side (like in Figure 8). The HM -
remover has enough positions in its buﬀer to hold the size of
the HM -sequence N and all N bits are inspected in parallel.
When the left most bit is sent out a new random bit comes
in from the right, shifting the bits in the HM -remover. Only
the bits currently in the HM -remover can be altered and the
HM -remover is stateless, i.e., it does not “remember” what
bits it sent out.
The naive way to alter the stream is to ﬂip a random
bit if the buﬀer matches the HM -sequence. However while
doing so will make sure that the bit string in the buﬀer is
no longer the HM -sequence, ﬂipping a random bit might
accidentally recreate the HM -sequence further ahead in the
bit stream, e.g., suppose the HM is ’1 1 0 0’ and the bit
stream is ’. . . 1 1 0 1 1 0 0’. The four last bits in this stream
make up the HM -sequence and needs to be changed, but if
the veriﬁer ﬂips bit number four from the right (randomly
chosen) it will create the HM -sequence out of the ﬁrst four
bits.
One way the HM -remover can avoid accidentally creat-
ing the HM -sequence further ahead in the bit stream is by
always ﬂipping the last (left most) bit in the buﬀer if the
buﬀer matches the HM -sequence, but that will introduce a
bias since the last bit of the HM stays the same through out
a session and ﬂipping it would create a slight overweight of
either ones or zeros.
To avoid this situation we propose the following way of
modifying the bit stream: When creating the HM make
sure that the last two bits are diﬀerent, then, whenever an
unintentional HM -sequence is detected by the veriﬁer, the
two least signiﬁcant bits are ﬂipped, i.e., ’0 1’ → ’1 0’ or ’1 0’
→ ’0 1’. If the two least signiﬁcant bits are diﬀerent, ﬂipping
them will not introduce a bias in the stream of random bits
since the number of ones and zeros will remain constant and
it will ensure that the buﬀer no longer matches the HM -
sequence.
What about unintentionally creating the HM -sequence
from previously processed output and the newly ﬂipped bits?
We prove that this situation can only occur in two situa-
tions, namely if the HM -sequence consists of all ones or all
zeros (except the last bit which must be diﬀerent). By elim-
HM−detector
HM−detector
−
−
− − 1
0
−
−
− − 0 1
−
− − 1 0 1
−
− − 0 1
0
b5
b4
b3
b2
b1
b0
b5
b4
b3
b2
b1
b0
Figure 9: The HM -sequence ends in ’1 0’ (left) or ’0
1’ (right) so if the ﬂip of the two least signiﬁcant bits
will cause the sequence to be recreated, if must be