    ```
2.  导航至新创建的`builder-pattern`目录:
    ```
    $ cd builder-pattern
    ```
3.  在`builder-pattern`目录下，创建一个名为`welcome.go`的文件。该文件将在构建时复制到 Docker 映像中:
    ```
    $ touch welcome.go
    ```
4.  现在，使用您最喜欢的文本编辑器打开`welcome.go`文件:
    ```
    $ vim welcome.go
    ```
5.  Add the following content to the `welcome.go` file, and then save and exit this file:
    ```
    package main
    import "fmt"
    func main() {
        fmt.Println("Welcome to multi-stage Docker builds")
    }
    ```
    这是一个用 Golang 编写的简单的`hello world`应用。一旦执行，将输出`"Welcome to multi-stage Docker builds"`。
6.  在`builder-pattern`目录下，创建一个名为`Dockerfile.build`的文件。该文件将包含所有的指令，您将使用这些指令来创建`build`Docker 映像:
    ```
    $ touch Dockerfile.build
    ```
7.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    $ vim Dockerfile.build
    ```
8.  Add the following content to the `Dockerfile.build` file and save the file:
    ```
    FROM golang:latest
    WORKDIR /myapp
    COPY welcome.go .
    RUN go build -o welcome .
    ENTRYPOINT ["./welcome"]
    ```
    这与您在*练习 4.01**中为`Dockerfile`创建的内容相同，使用正常构建过程*构建 Docker 映像。
9.  接下来，为运行时容器创建`Dockerfile`。在`builder-pattern`目录下，创建一个名为`Dockerfile`的文件。该文件将包含您将要用来创建运行时 Docker 映像的所有指令:
    ```
    $ touch Dockerfile
    ```
10.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    $ vim Dockerfile
    ```
11.  Add the following content to the `Dockerfile` and save the file:
    ```
    FROM scratch
    WORKDIR /myapp
    COPY welcome .
    ENTRYPOINT ["./welcome"]
    ```
    这个`Dockerfile`使用 Docker 中最微小的映像——划痕映像作为父映像。然后，将`/myapp`目录配置为工作目录。接下来，欢迎可执行文件从 Docker 主机复制到运行时 Docker 映像。最后，`ENTRYPOINT`指令用于执行欢迎可执行文件。
12.  创建 shell 脚本，在 Docker 容器之间复制可执行文件。在`builder-pattern`目录下，创建一个名为`build.sh`的文件。该文件将包含协调两个 Docker 容器之间的构建过程的步骤:
    ```
    $ touch build.sh
    ```
13.  现在，使用您最喜欢的文本编辑器打开`build.sh`文件:
    ```
    $ vim build.sh
    ```
14.  Add the following content to the shell script and save the file:
    ```
    #!/bin/sh
    echo "Creating welcome builder image"
    docker image build -t welcome-builder:v1 -f Dockerfile.build .
    docker container create --name welcome-builder-container   welcome-builder:v1
    docker container cp welcome-builder-container:/myapp/welcome .
    docker container rm -f welcome-builder-container
    echo "Creating welcome runtime image"
    docker image build -t welcome-runtime:v1 .
    rm welcome
    ```
    这个 shell 脚本将首先构建`welcome-builder` Docker 映像，并从中创建一个容器。然后，它会将编译后的 Golang 可执行文件从容器复制到本地文件系统。接下来，`welcome-builder-container`容器作为中间容器被移除。最后，`welcome-runtime`的形象就建立起来了。
15.  向`build.sh` shell 脚本添加执行权限:
    ```
    $ chmod +x build.sh
    ```
16.  Now that you have the two `Dockerfiles` and the shell script, build the Docker image by executing the `build.sh` shell script:
    ```
    $ ./build.sh
    ```
    映像将成功构建并标记为`welcome-runtime:v1`:
    ![Figure 4.4: Building the Docker image ](img/B15021_04_04.jpg)
    图 4.4:构建 Docker 映像
17.  Use the `docker image` ls command to list all the Docker images available on your computer:
    ```
    docker image ls
    ```
    您应该会得到如下图所示的所有可用 Docker 映像的列表:
    ![Figure 4.5: Listing all Docker images ](img/B15021_04_05.jpg)
图 4.5:列出所有 Docker 映像
从前面的输出可以看出，有两个 Docker 映像可用。welcome-builder 拥有所有的构建工具，大小为 805 MB，而 welcome-runtime 的映像大小明显更低，只有 2.01 MB。`golang:latest`是我们用作`welcome-builder`的父映像的 Docker 映像。
在本练习中，您学习了如何使用构建器模式来减小 Docker 映像的大小。然而，使用构建器模式来优化 Docker 映像的大小意味着我们必须维护两个`Dockerfiles`和一个 shell 脚本。在下一节中，让我们观察如何通过使用多级`Dockerfile`来消除它们。
# 多阶段 Docker 文件介绍
**多阶段 Docker 文件**是允许单个`Dockerfile`包含多个阶段的功能，可以产生优化的 Docker 映像。正如我们在前面部分中观察到的构建器模式，这些阶段通常包括一个从源代码构建可执行文件的构建器状态，以及一个运行可执行文件的运行时阶段。多阶段`Dockerfiles`将在`Dockerfile`中为每个阶段使用多个`FROM`指令，每个阶段将以不同的基础映像开始。只有必要的文件会有选择地从一个阶段复制到另一个阶段。在多阶段`Dockerfiles`之前，这是通过构建器模式实现的，正如我们在上一节中所讨论的。
多阶段 Docker 构建允许我们创建最小尺寸的 Docker 映像，这些映像类似于构建器模式，但消除了与之相关的问题。正如我们在前面的例子中看到的，构建器模式需要维护两个`Dockerfiles`和一个 shell 脚本。相比之下，多阶段 Docker 构建将只需要一个`Dockerfile`，并且不需要任何 shell 脚本来在 Docker 容器之间复制可执行文件。此外，构建器模式要求在将可执行文件复制到最终的 Docker 映像之前，将它们复制到 Docker 主机。多阶段 Docker 构建不需要这样做，因为我们可以使用`--from`标志在 Docker 映像之间复制可执行文件，而无需将它们复制到 Docker 主机。
现在，我们来观察一个多级`Dockerfile`的结构:
```
# Start from latest golang parent image
FROM golang:latest
# Set the working directory
WORKDIR /myapp
# Copy source file from current directory to container
COPY helloworld.go .
# Build the application
RUN go build -o helloworld .
# Start from latest alpine parent image
FROM alpine:latest
# Set the working directory
WORKDIR /myapp
# Copy helloworld app from current directory to container
COPY --from=0 /myapp/helloworld .
# Run the application
ENTRYPOINT ["./helloworld"]
```
普通`Dockerfile`和多阶段`Dockerfile`的主要区别在于多阶段`Dockerfile`将使用多个`FROM`指令来构建每个阶段。每个新阶段将以新的父映像开始，除了选择性复制的可执行文件之外，不包含来自先前映像的任何内容。`COPY --from=0`用于将可执行文件从第一阶段复制到第二阶段。
构建 Docker 映像并将映像标记为`multi-stage:v1`:
```
docker image build -t multi-stage:v1 .
```
现在，您可以列出可用的 Docker 映像:
```
REPOSITORY    TAG      IMAGE ID       CREATED         SIZE
multi-stage   latest   75e1f4bcabd0   7 seconds ago   7.6MB
```
您可以看到，这产生了一个与我们用构建器模式观察到的大小相同的 Docker 映像。
注意
多阶段`Dockerfiles`减少所需的`Dockerfiles`数量，在不影响映像大小的情况下消除 shell 脚本。
默认情况下，多阶段`Dockerfile`中的阶段由一个整数引用，从第一阶段的`0`开始。通过将`AS `添加到`FROM`指令中，这些阶段可以被命名为增加可读性和可维护性。以下是您在前面的代码块中观察到的多阶段`Dockerfile`的改进版本:
```
# Start from latest golang parent image
FROM golang:latest AS builder 
# Set the working directory
WORKDIR /myapp
# Copy source file from current directory to container
COPY helloworld.go .
# Build the application
RUN go build -o helloworld .
# Start from latest alpine parent image
FROM alpine:latest AS runtime
# Set the working directory
WORKDIR /myapp
# Copy helloworld app from current directory to container
COPY --from=builder /myapp/helloworld .
# Run the application
ENTRYPOINT ["./helloworld"]
```
在上例中，我们将第一阶段`builder`和第二阶段`runtime`命名为，如下所示:
```
FROM golang:latest AS builder
FROM alpine:latest AS runtime
```
然后，在第二阶段复制工件时，您使用名称`builder`作为`--from`标志:
```
COPY --from=builder /myapp/helloworld .
```
在构建多阶段`Dockerfile`时，可能会出现您只想构建特定构建阶段的情况。考虑一下你的`Dockerfile`有两个阶段。第一个是构建开发阶段并包含所有的构建和调试工具，第二个是构建只包含运行时工具的生产映像。在项目的代码开发阶段，您可能只需要在开发阶段进行构建，以便在必要时测试和调试您的代码。在这种情况下，您可以使用带有`docker build`命令的`--target`标志来指定中间阶段作为最终映像的最终阶段:
```
docker image build --target builder -t multi-stage-dev:v1 .
```
在上例中，您使用`--target builder`在构建器阶段停止构建。
在下一个练习中，您将学习使用多阶段`Dockerfile`来创建大小优化的 Docker 映像。
## 练习 4.03:使用多阶段 Docker 构建构建 Docker 映像
在*练习 4.02* 、*使用构建器图案*构建 Docker 映像时，您使用了构建器图案来优化 Docker 映像的大小。然而，有一个操作负担，因为您需要在 Docker 映像构建过程中管理两个`Dockerfiles`和一个 shell 脚本。在本练习中，您将使用多阶段`Dockerfile`来消除这一操作负担。
1.  为本练习创建一个名为`multi-stage`的新目录:
    ```
    mkdir multi-stage
    ```
2.  导航至新创建的`multi-stage`目录:
    ```
    cd multi-stage
    ```
3.  在`multi-stage`目录下，创建一个名为`welcome.go`的文件。该文件将在构建期间复制到 Docker 映像中:
    ```
    $ touch welcome.go
    ```
4.  现在，使用您最喜欢的文本编辑器打开`welcome.go`文件:
    ```
    $ vim welcome.go
    ```
5.  Add the following content to the `welcome.go` file, and then save and exit this file:
    ```