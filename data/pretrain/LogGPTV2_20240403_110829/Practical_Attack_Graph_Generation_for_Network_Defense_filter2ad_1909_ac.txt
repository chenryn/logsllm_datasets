network, shown in Figure 6. The network has 252 hosts,
3,777 ports, and 8,585 vulnerability instances. No creden-
tials were modeled. The prototype used Nessus scans of
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Figure 7. Simpliﬁed MP Attack Graph for Field Test Network
nal access to all hosts on the inside network via port 53. The
rule was corrected following our analysis. The misconﬁg-
uration only permitted access from a few IP addresses that
are not normally used. A Nessus scan from the external
network to the internal network would not have discovered
this, because the scanner would not have used one of the
source IP addresses able to cross the ﬁrewall.
We also recomputed the results for all possible starting
locations at once – placing an attacker with the ability to
spoof any source IP on all four links, and also allowing all
hosts to initiate attacks. No recommendations are gener-
ated in this case. Loading the data, computing reachability
and the MP graph, and saving the results consumed 0.54
seconds. The resulting MP graph shows all possible com-
promises in the network – from all sources, to all targets.
The ﬁeld trial’s results fuel optimism in the prototype
and its utility. We are working to conduct additional ﬁeld
trials on larger, more complicated networks.
7.2 Simulation Test Results
We used an automated network generator to explore the
scalability of the NetSPA prototype. The generator created
a network of three sites. Each site had a fairly generic net-
work structure, with its own border ﬁrewall, DMZ, inter-
nal administrative LAN, and multiple other internal sub-
nets. Our test setup used 400 ﬁltering rules on each border
ﬁrewall, six hosts on the DMZ and administrative LANs,
and 80 other internal subnets in each site. Each host had
30 open ports. Half had ten remote-to-other vulnerabili-
ties, and the other half had one remote-to-root vulnerability
and nine remote-to-other. The available attack path to each
site from the outside compromised one DMZ host, then one
administrative LAN host, and ﬁnally all of the vulnerable
hosts on the inside. NetSPA collapsed each site’s 80 inter-
nal subnets into single unﬁltered reachability groups.
Figure 9 shows results with this conﬁguration, varying
the number of hosts on the 80 internal subnets of each site.
These tests were performed on a Windows Server 2003 ma-
chine with dual 3.2GHz Xeon processors and 2GB of main
memory. The prototype is single-threaded and never re-
quired swap space. The Y axis is the elapsed time, in sec-
onds, and the X axis is the total number of hosts in the net-
work. The plot shows that scaling is linear, as expected,
and handles a network with over 50,000 hosts and over 1.5
million ports in under four minutes. NetSPA was able to
compute an “all sources, all targets” graph for the 50,000
host network in under twelve minutes.
The effects of different network conﬁgurations (via sim-
ulation) are examined further in [18]. The results in [18] are
based on the use of predictive graphs, however; we expect
equal or better performance with MP graphs.
8 Related Work
Some of the earliest work on attack graphs was done by
hand. Schneier’s attack trees [29] were designed to show
how multiple attack vectors could compromise a single tar-
get. The approach is worthwhile when brainstorming a
set of potential attacks and there is a single goal or target.
Schneier’s example is opening a safe.
Ritchey and Ammann [26] used model checking tech-
niques to ﬁnd a counterexample to an asserted security pol-
icy. Although model checking is more powerful and does
not require a monotonicity assumption, it scales very poorly
for this application, as noted in [15] and elsewhere.
Others explored the use of full attack graphs [8, 30], as
shown in Figure 3a. Full graphs grow combinatorially and
cannot be used for large networks.
Ammann [7] developed an algorithm which scales as
roughly O(n6) [19], but is capable of ﬁnding all exploits
which can be used to reach a speciﬁed goal. Jajodia et al.
[15] adopt the algorithm and use Nessus scans to identify
some vulnerability locations and reachability. The paper
proposes the use of Nessus to discern reachability by scan-
ning from every subnet to every other subnet. This approach
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006may introduce false negatives by neglecting reachability un-
available to machine running the Nessus scanner.
In later work, Ammann et al. [6] presented an O(n3) al-
gorithm that quickly determines the worst-case attack paths
to all compromisable hosts, and argues that such a report is
more useful to an analyst or penetration tester than a tradi-
tional attack graph. The method may also be applicable to
MP graphs in O(n3) time.
An approach due to Ou et al., called MulVAL [25], uses a
monotonic, logic-based approach. MulVAL requires reach-
ability information and can produce counterexamples for a
given security policy. The results shown in [25] imply a
runtime between O(n2) and O(n3).
Other research has focused on the source data required to
build attack graphs. Ritchey et al. [27] propose a framework
for modeling reachability. NetSPA uses a simpler reachabil-
ity model that is decoupled from the underlying host’s soft-
ware and vulnerabilities. Templeton and Levitt’s [31] pre-
requisite/postcondition model for attack components and
Cuppens and Ortalo’s LAMBDA language [14], for exam-
ple, provide detailed models of vulnerability and attacker
action. We are not aware of any readily available vulnera-
bility database populated with the level of detail required by
these approaches, nor any similarly detailed scanner. Such
tools would be very useful.
Another research focus is tools to explore attack graphs
and utilize the information they contain. Noel et al. [24]
propose a symbolic equation simpliﬁer to produce recom-
mendations from the graphs of [15]. They also simpliﬁed
graphs by collapsing related nodes [22] and by transform-
ing the results into an adjacency matrix [23]. NetSPA’s sim-
pliﬁed MP graphs serve a similar purpose to [22], but im-
proved visualization remains a concern.
Attack graphs may be used to form scenarios and ﬁlter
IDS alerts. If a series of alerts matches a path in the attack
graph, the series is more likely to be genuine. Papers such
as [11, 13, 21] explore this use, but no practical application
 240
 180
 120
 60
)
s
d
n
o
c
e
s
(
i
e
m
T
n
o
i
t
a
t
u
p
m
o
C
 0
 0
 10000
 20000
 30000
Hosts
 40000
 50000
 60000
Figure 9. NetSPA Prototype Performance on
Simulated Networks
has yet been constructed. Ning identiﬁes the method in [21]
as NP-complete. NetSPA does not address this application.
Skybox View [5] is a commercial tool that performs at-
tack graph analysis. The company’s patent [12] describes
their algorithm, asserts it is O(n3), and suggests O(n2) is
possible. Based on the patent, we believe that Skybox may
build a variant of a host-compromised graph [17, 18], and
may report only the shortest attack paths to a target.
9 Conclusion and Future Work
Attack graphs are a useful tool in the arsenal of network
defenders. Vulnerability scanners such as Nessus report
large numbers of vulnerabilities, prioritizing them based on
severity in isolation. The amount of work necessary to patch
every identiﬁed vulnerability is often overwhelming. At-
tack graphs are able to coalesce a large amount of source
data into a useful form, focusing defenders’ efforts where it
is most needed.
Attack graphs also enable the safe evaluation of what-if
scenarios. Defenders can hypothesize new zero-day vulner-
abilities on critical services, evaluate the impact of chang-
ing ﬁltering rulesets, and determine the effect of adding a
new, unpatched computer to various locations in a network.
Alterations to the network’s defensive posture can be eval-
uated before they are implemented.
The NetSPA system is able to build a new graph type,
the multiple-prerequisite graph, at a very high rate of speed,
enabling defenders to quickly evaluate their network’s se-
curity. The NetSPA prototype can be applied to real op-
erational networks in a straightforward manner, using data
that network operators routinely collect. It produces valu-
able recommendations in seconds, helping defenders ﬁlter
through thousands of vulnerability reports to ﬁnd the few
vulnerabilities that matter most.
The NetSPA prototype is useful in its current form.
It can automatically import readily available source data,
quickly compute network reachability, generate the MP
graph, and produce useful recommendations. However, ad-
ditional work remains. The MP graph is capable of support-
ing credentials as prerequisites to successful attack. How-
ever, we have no readily available source of credential data
and have conducted no ﬁeld trials utilizing it. “Client-side”
attacks, in which an attacker uses a malicious server to com-
promise a vulnerable client, are not modeled. The recom-
mendation algorithm does not evaluate the effect of protect-
ing multiple prerequisites. New approaches to graph visual-
ization and simpliﬁcation may make better use of the graph
as well. Future work on obtaining better source data and
producing better recommendations and analyses promises
to further improve the system’s utility.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Acknowledgments
We would like to thank Seth Webster and Doug Stetson
for reviewing much of the NetSPA prototype’s design, Chris
Scott, Kendra Kratkiewicz, Rob Cunningham and Mike
Artz for their contributions to previous versions of NetSPA,
Carrie Gates for feedback on the paper, and unnamed sys-
tem administrators who helped us perform the ﬁeld trial.
References
[1] Bugtraq
vulnerability
database.
http://www.
securityfocus.com/archive/.
[2] Common vulnerabilities and exposures dictionary. http:
//cve.mitre.org.
[3] Graphviz - graph visualization software. http://www.
graphviz.org.
[4] Nessus security scanner. http://www.nessus.org.
[5] Skybox
http://www.
security,
inc.
skyboxsecurity.com.
[6] P. Ammann, J. Pamula, R. Ritchey, and J. Street. A host-
based approach to network attack chaining analysis. In AC-
SAC ’05: Proceedings of the 21st Annual Computer Security
Applications Conference, pages 72–84. IEEE Computer So-
ciety, 2005.
[7] P. Ammann, D. Wijesekera, and S. Kaushik. Scalable,
graph-based network vulnerability analysis. In Proceedings
of the 9th ACM Conference on Computer and Communica-
tions Security, pages 217–224. ACM Press, 2002.
[8] M. Artz. NETspa, a network security planning architec-
ture. Master’s thesis, Massachusetts Institute of Technology,
2002.
[9] D. Bilar. Quantitative Risk Analysis of Computer Networks.
PhD thesis, Dartmouth College, 2003.
[10] R. E. Bryant. Graph-based algorithms for boolean function
manipulation. In IEEE Trans. Comput., volume 35, pages
677–691. IEEE Computer Society, 1986.
[11] S. Cheung, U. Lindqvist, et al. Modeling multistep cyber
attacks for scenario recognition. In Proceedings of the Third
DARPA Information Survivability Conference and Exposi-
tion (DISCEX III), pages 284–292, 2003.
[12] G. Cohen et al. System and method for risk detection
and analysis in a computer network. United States Patent
6,952,779, October 2005.
[13] F. Cuppens. Alert correlation in a cooperative intrusion de-
tection framework. In Proceedings of the 2002 IEEE Sym-
posium on Security and Privacy, Washington, DC, 2002.
[14] F. Cuppens and R. Ortalo. LAMBDA: A language to model
In Proceedings of the
a database for detection of attacks.
Third International Workshop on Recent Advances in Intru-
sion Detection, pages 197–216, 2000.
[15] S. Jajodia, S. Noel, and B. O’Berry. Topological Analysis of
Network Attack Vulnerability, chapter 5. Kluwer Academic
Publisher, 2003.
[16] J. Lind-Nielsen et al. BuDDy, a binary decision diagram
library. http://buddy.sourceforge.net/.
[17] R. P. Lippmann et al. Validating and restoring defense in
In Proceedings of MILCOM
depth using attack graphs.
2006, Washington, DC.
[18] R. P. Lippmann et al. Evaluating and strengthening enter-
prise network security using attack graphs. Technical report,
MIT Lincoln Laboratory, Lexington, MA, 2005. ESC-TR-
2005-064.
[19] R. P. Lippmann and K. W. Ingols. An annotated review of
past papers on attack graphs. Technical report, MIT Lincoln
Laboratory, Lexington, MA, 2005. ESC-TR-2005-054.
[20] P. Meil, T. Grance, et al. NVD national vulnerability
database. http://nvd.nist.gov.
[21] P. Ning and D. Xu. Learning attack strategies from intrusion
alerts. In Proceedings of the 10th ACM Conference on Com-
puter and Communications Security, pages 200–209, New
York, NY, 2003. ACM Press.
[22] S. Noel and S. Jajodia. Managing attack graph complexity
through visual hierarchical aggregation. In VizSEC/DMSEC
’04: Proceedings of the 2004 ACM workshop on Visualiza-
tion and data mining for computer security, pages 109–118,
New York, NY, USA, 2004. ACM Press.
[23] S. Noel and S. Jajodia. Understanding complex network at-
tack graphs through clustered adjacency matrices. In Pro-
ceedings of the 21st Annual Computer Security Conference
(ACSAC), pages 160–169, 2005.
[24] S. Noel, S. Jajodia, B. O’Berry, and M. Jacobs. Efﬁcient
minimum-cost network hardening via exploit dependency
graphs.
In ACSAC ’03: Proceedings of the 19th Annual
Computer Security Applications Conference, pages 86–95.
IEEE Computer Society, 2003.
[25] X. Ou, S. Govindavajhala, and A. Appel. MulVAL: A logic-
based network security analyzer. In Proceedings of the 14th
USENIX Security Symposium, pages 113–128, 2005.
[26] R. Ritchey and P. Ammann. Using model checking to an-
alyze network vulnerabilities.
In Proceedings of the 2000
IEEE Symposium on Security and Privacy, pages 156–165,
2000.
[27] R. Ritchey, B. O’Berry, and S. Noel. Representing TCP/IP
connectivity for topological analysis of network security. In
Proceedings of the 18th Annual Computer Security Applica-
tions Conference, Las Vegas, NV, 2002.
[28] S. Schechter, J. Jung, W. Stockwell, and C. McLain. Inoc-
ulating SSH against address harvesting. In Proceedings of
the 13th Annual Network and Distributed System Security
Symposium, San Diego, CA, 2006.
[29] B. Schneier. Attack trees. Dr. Dobb’s Journal, 1999.
[30] L. P. Swiler et al. Computer-attack graph generation tool. In
Proceedings DARPA Information Survivability Conference
and Exposition (DISCEX II), pages 307–321, Los Alamitos,
CA.
[31] S. Templeton and K. Levitt. A requires/provides model for
computer attacks. In Proceedings of the 2000 Workshop on
New Security Paradigms, New York, NY, 2001. ACM Press.
[32] A. Wool. A quantitative study of ﬁrewall conﬁguration er-
rors. In IEEE Computer, pages 62–67, 2004.
[33] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah, and P. Mo-
hapatra. FIREMAN: A toolkit for FIREwall modeling and
ANalysis. In Proceedings of the 2006 IEEE Symposium on
Security and Privacy, 2006.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006