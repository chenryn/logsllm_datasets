# DR. CHECKER: A Soundy Analysis for Linux Kernel Drivers

## Authors
Aravind Machiry, Chad Spensky, Jake Corina, Nick Stephens, Christopher Kruegel, and Giovanni Vigna  
University of California, Santa Barbara  
{machiry, cspensky, jcorina, stephens, chris, vigna}@cs.ucsb.edu

## Publication
Proceedings of the 26th USENIX Security Symposium  
August 16–18, 2017 • Vancouver, BC, Canada  
ISBN 978-1-931971-40-9  
Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIX.

## Abstract
Kernel drivers have long been known to pose significant security risks due to their privileged access and lower code quality. However, bug-finding tools for these drivers are still lacking in both quantity and effectiveness. The pointer-heavy code in kernel drivers presents some of the most challenging problems for static analysis, and their tight coupling with hardware makes dynamic analysis infeasible in most cases.

In this work, we present DR. CHECKER, a soundy (i.e., mostly sound) bug-finding tool for Linux kernel drivers. By focusing our analysis on the most bug-prone parts of the kernel (i.e., the drivers) and sacrificing soundness in very few cases, we ensure that our technique is both scalable and precise. DR. CHECKER is a fully-automated static analysis tool capable of performing general bug finding using flow-sensitive, context-sensitive, and field-sensitive pointer and taint analyses. To demonstrate the scalability and efficacy of DR. CHECKER, we analyzed the drivers of nine production Linux kernels (3.1 million LOC), where it correctly identified 158 critical zero-day bugs with an overall precision of 78%.

## 1. Introduction
Bugs in kernel-level code can be particularly problematic, as they can lead to severe vulnerabilities compromising the security of the entire computing system. The security community has made significant efforts to verify the security of this critical code through manual inspection and both static and dynamic analysis techniques. While manual inspection has historically yielded the best results, it is extremely time-consuming and is becoming intractable as the complexity and volume of kernel-level code increase.

Low-level code, such as kernel drivers, introduces various challenges for dynamic analysis tools, including handling hardware peripherals. Although some kernel-level dynamic analysis techniques have been proposed, they are ill-suited for bug-finding as they were implemented as kernel monitors, not code verification tools. Thus, static source code analysis remains the most promising technique for kernel code verification and bug-finding, as it only requires access to the source code, which is typically available.

Unfortunately, kernel code is a worst-case scenario for static analysis due to the liberal use of pointers. Tool builders must make trade-offs between precision (reporting too many false positives) and soundness (reporting all true positives). Precise static analysis techniques often struggle with computational infeasibility or specificity, while sound static analysis techniques suffer from high false-positive rates. This has forced researchers to make various assumptions to implement practical analysis techniques. An empirical study found that users would ignore a tool if its false positive rate exceeded 30% and would discredit the analysis if it did not yield valuable results early in its use.

Despite these challenges, numerous successful tools have been developed, providing invaluable insights into the types and locations of bugs in critical kernel code. These tools range from precise, unsound tools capable of detecting specific classes of bugs to sound, imprecise techniques that detect large classes of bugs. A notable finding was that a disproportionate number of errors in the kernel were found in the drivers. Recent studies show that kernel drivers account for a significant portion of CVE patches, and mobile kernel drivers are the source of up to 85% of reported bugs in the Android kernel.

In this work, we present DR. CHECKER, a fully-automated static-analysis tool capable of identifying numerous classes of bugs in Linux kernel drivers. DR. CHECKER is implemented as a modular framework, allowing easy augmentation of analysis types and bug detectors. Our tool performs both pointer and taint analysis that is flow-, context-, and field-sensitive. DR. CHECKER employs a soundy approach, meaning it is mostly sound, with a few well-defined assumptions to achieve higher precision. We evaluated DR. CHECKER by analyzing nine popular mobile device kernels (3.1 million lines of code), where it correctly reported 3,973 flaws and discovered 158 previously unknown bugs. We also compared DR. CHECKER against four other popular static analysis tools, where it significantly outperformed them in detection rates and total bugs identified. Our results show that DR. CHECKER not only produces useful results but does so with extremely high precision (78%).

### Contributions
- We present the first soundy static-analysis technique for pointer and taint analysis capable of large-scale analysis of Linux kernel drivers.
- We show that our technique is capable of flow-sensitive, context-sensitive, and field-sensitive analysis in a pluggable and general way that can easily be adapted to new classes of bugs.
- We evaluated our tool by analyzing the drivers of nine modern mobile devices, resulting in the discovery of 158 zero-day bugs.
- We compare our tool to the existing state-of-the-art tools and show that we are capable of detecting more bugs with significantly higher precision and high-fidelity warnings.
- We are releasing DR. CHECKER as an open-source tool at github.com/ucsb-seclab/dr_checker.

## 2. Background
Kernel bug-finding tools have evolved as the complexity and volume of code have increased. While manual analysis and grep may have been sufficient for early versions of the Linux kernel, these techniques are neither scalable nor rigorous enough for modern kernels. Most initial and successful bug-finding tools were based on grep-like functionality and pattern matching. These tools evolved to reduce user interaction by using machine learning and complex data structures to automatically identify potential dangerous portions of code. While these tools have returned useful results, most are developed based on empirical observation without strong formal guarantees.

Model checkers provide more context and formalization, leading to the detection of more interesting flaws. These techniques evolved into more rigorous tools capable of more complex analyses, such as path-sensitive ESP and taint analysis. Some tools are implemented on top of custom tools and data structures, while others are implemented as compiler-level optimizations on top of popular open-source projects like LLVM. In all cases, these tools operate on abstract representations of the program, such as the abstract syntax tree (AST) or the control flow graph (CFG), which permit a more rigorous formal analysis of the program's properties.

### Motivation
Before delving into the details of DR. CHECKER, we present a motivating example of a bug discovered by DR. CHECKER. In this bug, a tainted structure is copied from userspace using `copy_from_user`. A size field of this structure is then multiplied by the size of another driver structure, which is vulnerable to an integer overflow. This results in a much smaller buffer being allocated than required for the data. The originally tainted length is later used to determine how much data will be copied, leading to memory corruption.

```c
struct bst_traffic_flow_pkg {
    uint32_t cnt;
    uint8_t value[0];
};

uint8_t *buf = NULL;
int buf_len = 0;
struct bst_traffic_flow_pkg flow_p;

if (copy_from_user(&flow_p, argp, sizeof(struct bst_traffic_flow_pkg))) {
    break;
}

if (0 == flow_p.cnt) {
    bastet_wakeup_traffic_flow();
    rc = 0;
    break;
}

buf_len = flow_p.cnt * sizeof(struct bst_traffic_flow_prop); // Integer overflow bug
buf = (uint8_t *)kmalloc(buf_len, GFP_KERNEL);
if (NULL == buf) {
    BASTET_LOGE("kmalloc failed");
    rc = -ENOMEM;
    break;
}

if (copy_from_user(buf, argp + sizeof(struct bst_traffic_flow_pkg), flow_p.cnt)) {
    BASTET_LOGE("pkg copy_from_user error");
    kfree(buf);
    break;
}

traffic_flow_by_pkg(buf, flow_p.cnt); // Uses the entire buffer
```

There are several quirks in this bug that make it difficult for naive static analysis techniques. First, the bug arises from tainted data (`argp`) propagating through multiple usages into a dangerous operation. Second, the integer overflow is subtle and requires precise flow-sensitive, context-sensitive, and field-sensitive analysis to detect. DR. CHECKER successfully identifies such bugs, demonstrating its effectiveness in analyzing complex kernel driver code.