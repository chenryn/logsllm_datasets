otherwise, choose uniform h(cid:48)
1, . . . , hM , h(cid:48)
Step 2 Set G(m, h1, h(cid:48)
G(m, h1, h(cid:48)
1, . . . , hM , h(cid:48)
j ∈ {0, 1}2κ.
M ) equal to (C,P).
Step 3 For each j (cid:54)∈ C, include seed∗
j , h(cid:48)
comj,pj , {ˆzj,α}, and msgsj,pj in the signature.
M ), return (C,P) as the output.) Include (C,P) in the signature.
(I.e., if A subsequently makes the query
j in the signature. For each j ∈ C, include {statej,i}i(cid:54)=pj ,
The only diﬀerence between this experiment and the previous one occurs if, during the course
of answering a signing query, statej,pj (for some j ∈ C) is queried to H0 at some other point in the
experiment, or ({ˆzj,α}, msgsj,1, . . . , msgsj,n) (for some j (cid:54)∈ C) is ever queried to H2 at some other
point in the experiment. Denoting this event by InputCollH , we thus have
| Pr5[Forge] − Pr4[Forge]| ≤ Pr5[InputCollH ].
30
Experiment 6. We again modify the signing algorithm. Now, for j ∈ C the signer uses the
simulator for Π (namely, SimΠ) to generate the views of the parties {Si}i(cid:54)=pj in an execution of Π
when evaluating C with output 1. This results in values {statej,i}i(cid:54)=pj , masked input-wire values
{ˆzj,α}, and msgsj,pj . From the respective views, {msgsj,i}i(cid:54)=pj can be computed, and hj, h(cid:48)
j can be
computed as well. Thus, signatures are now computed as follows:
Step 0 Choose uniform (C,P), where C ⊂ [M ] is a set of size τ , and P = {pj}j∈C with pj ∈ [n].
Step 1 For j (cid:54)∈ C:
|C|
j ∈ {0, 1}κ and use it to generate values seedj,1, . . ., seedj,n. Compute
based on {seedj,i}i. For i = 1, . . . , n−1, let statej,i := seedj,i; let statej,n :=
1. Choose uniform seed∗
auxj ∈ {0, 1}
seedj,n(cid:107)auxj.
2. For all i, set comj,i := H0(statej,i).
3. Let hj := H1(comj,1, . . . , comj,n). Choose uniform h(cid:48)
j ∈ {0, 1}2κ.
this information.
For each j ∈ C:
1. Compute ({statej,i}i(cid:54)=pj ,{ˆzj,α}, msgsj,pj ) ← SimΠ(pj). Compute {msgsj,i}i(cid:54)=pj based on
2. Choose uniform comj,pj ∈ {0, 1}2κ. For all other i, set comj,i := H0(statej,i).
3. Let hj := H1(comj,1, . . . , comj,n) and h(cid:48)
j := H2({ˆzj,α}, msgsj,1, . . . , msgsj,n).
Step 2 Set G(m, h1, h(cid:48)
1, . . . , hM , h(cid:48)
G(m, h1, h(cid:48)
1, . . . , hM , h(cid:48)
M ), return (C,P) as the output.) Include (C,P) in the signature.
(I.e., if A subsequently makes the query
M ) equal to (C,P).
j , h(cid:48)
Step 3 For each j (cid:54)∈ C, the signer includes seed∗
signer includes {statej,i}i(cid:54)=pj , comj,pj , {ˆzj,α}, and msgsj,pj in the signature.
Observe that w is no longer used for generating signatures. It is immediate that
j in the signature. Also, for each j ∈ C, the
| Pr6[Forge] − Pr5[Forge]| ≤ τ · qs · Π and | Pr6[InputCollH ] − Pr5[InputCollH ]| ≤ τ · qs · Π.
We now bound Pr6[InputCollH ]. For any particular signing query and any j ∈ C, the value
statej,pj has min-entropy at least κ and is not used anywhere else in the experiment. Similarly, for
any j (cid:54)∈ C, the value {ˆzj,α} has min-entropy at least κ, since the input is κ-bit and they are all
uniform according to the simulator deﬁned in the next section. and is not used anywhere else in
the experiment. Thus,
Pr6[InputCollH ] ≤ M · qs · (M qs + q0 + q2) · 2−κ.
Experiment 7. We ﬁrst deﬁne some notation. At any point during the experiment, we classify a
pair (h, h(cid:48)) in one of the following ways:
1. If h was output by a previous query H1(com1, . . . , comn), and each comi was output by
a previous query H0(statei) where the {statei} form a valid preprocessing, then say (h, h(cid:48))
deﬁnes correct preprocessing.
31
2. If h was output by a previous query H1(com1, . . . , comn), and each comi was output by a
previous query H0(statei), and h(cid:48) was output by a previous query H2({ˆzα}, msgs1, . . . , msgsn)
where {statei},{ˆzα},{msgsi} are consistent with an online execution of Π among all parties
with output 1 (but the {statei} may not form a valid preprocessing), then say (h, h(cid:48)) deﬁnes
correct execution.
3. In any other case, say (h, h(cid:48)) is bad.
In Experiment 7, for each query G(m, h1, h(cid:48)
(Note that in all cases the relevant prior query, if it exists, must be unique since the experiment is
aborted if there is ever a collision in H0, H1, or H2.)
M ) made by the adversary (where m was
not previously queried to the signing oracle ), check if there exists an index j for which (hj, h(cid:48)
j)
deﬁnes correct preprocessing and correct execution. We let Invert be the event that this occurs
for some query to G. Note that if that event occurs, the {statei},{ˆzα} (which can be determined
from the oracle queries of the adversary) allow computation of w(cid:48) for which C(w(cid:48)) = 1. Thus,
Pr7[Invert] ≤ OW .
We claim that
1, . . . , hM , h(cid:48)
Pr7[Forge ∧ Invert] ≤ qG · (M, n, τ ).
To see this, assume Invert does not occur. For any query G(m, h1, h(cid:48)
M ) made during
the experiment (where m was not previously queried to the signing oracle), let Pre denote the
set of indices for which (hj, h(cid:48)
j) deﬁnes correct preprocessing (but not correct execution), and let
k = |Pre|.
Let (C,P) be the (random) answer from this query to G. The attacker can only
possibly generate a forgery (using this G-query) if (1) [M ]\C ⊆ Pre, and (2) for all j ∈ Pre∩C, the
value pj is chosen to be the unique party such that the views of the remaining parties {Si}i(cid:54)=pj are
this, there are k − (M − τ ) elements remaining Pre ∩ C. Thus, the overall probability with which
the attacker can generate a forgery using this G-query is
consistent . Since |M \ C| = M − τ , the number of ways the ﬁrst event can occur is(cid:0) k
(cid:1); given
1, . . . , hM , h(cid:48)
M−τ
(M, n, τ, k) =
M−τ
(cid:1)
(cid:0) k
(cid:0) M
(cid:1)
· nM−k
(cid:1)
(cid:0) k
· nτ
(cid:0) M
(cid:1)
M−τ
· nk−M +τ
≤ (M, n, τ ) = max
M−τ
M−τ
=
k {(M, n, τ, k)} .
The ﬁnal bound is obtained by taking a union bound over all queries to G.
A.1 Proof of Security of the Underlying MPC Protocol
Our protocol Π, simulated in the Prover’s head, maintains the invariant that, for each wire in the
circuit, the parties hold the (public) masked value of the wire and an n-out-of-n secret sharing of
the corresponding random mask. Speciﬁcally, if we let zα denote the value of wire α in the circuit C
when evaluated on input w, then the parties will hold [λα] (for uniform λα ∈ {0, 1}) along with the
value ˆzα
def= zα ⊕ λα.
32
A.2 Summary of the MPC Protocol
Preprocessing phase. The preprocessing phase outputs a seed seedi to each party i ∈ [n], which
will be used to derive longer randomness. In addition, the preprocessing sends aux, a n-bit string
to Pn.
In more detail, for each wire α that is either an input wire of the circuit or the output wire
of an AND gate, the parties are given [λα] which is derived from their own seeds. For an XOR
def= λα ⊕ λβ; note the parties can compute
gate with input wires α, β and output wire γ, deﬁne λγ
[λγ] locally. Finally, for each AND gate with input wires α, β, the parties are given [λα,β], where
def= λα · λβ. All shares are derived from the seed, except that for party n, its share of [λα,β] is
λα,β
explicitly included in aux.
Protocol execution. Note that in our setting, where all parties are semi-honest, we can perform
public reconstruction of a shared value [x] by letting each party send its share to a designated party
(e.g., party n) who will reconstruct and broadcast the value.
We assume the parties begin the protocol holding a masked value ˆzα for each input wire α.
These masked values, along with the corresponding {λα}, deﬁne an eﬀective input to the protocol.
During the online phase of the protocol, the parties inductively compute ˆzα for all wires in the
circuit. Speciﬁcally, for each gate of the circuit with input wires α, β and output wire γ, where the
parties already hold ˆzα, ˆzβ, the parties do:
• If the gate is an XOR gate, then the parties locally compute ˆzγ := ˆzα ⊕ ˆzβ.
• If the gate is an AND gate, the parties locally compute
[s] := ˆzα[λβ] ⊕ ˆzβ[λα] ⊕ [λα,β] ⊕ [λγ],
and then publicly reconstruct s. Finally, they compute ˆzγ := s ⊕ ˆzα ˆzβ. One can verify that
ˆzγ = zγ ⊕ λγ.
Once the parties have computed ˆzα for the output wire α, the output value zα is computed by
publicly reconstructing λα and then setting zα := ˆzα ⊕ λα.
A.3 Proof of Security
The above protocol is secure against an all-but-one corruption in the semi-honest model.
Lemma A.1. Suppose there exists a (t, P RG)-PRG. Then there exists a simulator for the above
MPC protocol such that no distinguisher running in time t can distinguish between the real-world
execution and ideal-world execution deﬁned by this simulator with better than P RG probability.
Proof. We ﬁrst describe a simulator SP (1κ, y, C) that outputs the view of all parties except for P .
Denote the input and output sizes of C are m and l respectively. The simulator works as follows:
1. If P = n, set statei ← {0, 1}k for all i (cid:54)= P . Otherwise, set statei ← {0, 1}k, for i (cid:54)∈ {n, P}
|C|+l.
33
and set staten ← {0, 1}k+|C|
.
2. Pick ˆz ← {0, 1}m, msgsP ← {0, 1}
3. Use {statei}i(cid:54)=P , ˆz and msgsP to simulate the online phase of the MPC protocol until the
output reconstruction step, such that the simulator obtains share of outputs [y] for i (cid:54)= P .
Compute [y]P :=(cid:76)
i(cid:54)=P [y]i ⊕ y. Append [y]P to msgsP .
Hybrid1. Same as the real-world protocol, except use true randomness, instead of seed-derived,
for party P . String aux is computed as described in the protocol, based on true randomness.
It is easy to see that the probability of distinguishing Hybrid1 and the real-world protocol in
running time t is no more than P RG.
Hybrid2. Replace aux in Hybrid1 by uniformly random string of the same length.
If P = n, then aux is not part of the view of the adversary; if P (cid:54)= n, then bits of aux are
computed by XORing one bit of randomness from each seed from party i (cid:54)= P , then XORing
one bit of randomness from party P (which is uniformly random in Hybrid1). Therefore aux is
uniformly random in Hybrid1.
Therefore, Hybrid1 and Hybrid2 are identical.
that in the end, the simulator obtains share of outputs [y]i for i (cid:54)= P . Compute [y]P :=(cid:76)
Hybrid3. Same as Hybrid2, except that ˆz is changed to uniform string; The last message from
party P is replaced by a message computed from the output as deﬁned in the simulator. In more
detail, use {statei}i(cid:54)=P , ˆz and msgsP to simulate the online phase of the MPC protocol locally, such
i(cid:54)=P ⊕y.
Replace the last message from party P for reconstructing the output to [y]P .
It is easy to see that ˆz is uniformly random in both hybrids since the share of the mask held
by party P is uniformly random.
[y]P is identically distributed in two hybrids given the perfect
correctness of the protocol: in both worlds, [y]P is a deterministic function of the output y and the
messages send by parties other than P .
Therefore, Hybrid3 and Hybrid2 are identical.
34