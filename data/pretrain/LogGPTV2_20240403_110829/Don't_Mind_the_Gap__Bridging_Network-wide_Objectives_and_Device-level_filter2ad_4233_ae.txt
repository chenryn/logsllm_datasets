(b) Backbone
Figure 11: Conﬁguration minimization.
Coast of the USA). Finally, it has many ﬁlters, e.g., to pre-
vent bogons (private address space) from external neighbors,
prevent customers from providing transit to other large net-
works, prevent traversing providers through peers, etc.
Routers in the datacenter network run BGP using private
AS numbers and peer with each other and with the back-
bone network over eBGP. The routers aggregate some pre-
ﬁx blocks when announcing them to the backbone network,
they keep some preﬁxes internal, and attach communities for
some other preﬁxes that should not traverse beyond the ge-
ographic region. The datacenter networks also have policies
by which some preﬁxes should not be announced beyond a
certain tier in the datacenter hierarchy.
7.2 Expressiveness
We found that we could translate all network policies to
Propane. We veriﬁed with the operators that our translation
preserved intended semantics.3 For the backbone network,
the operator mentioned an additional policy not present in
the English document, which we added later. For both the
datacenter and backbone networks, Propane was able to guar-
antee policy-compliance under all possible failure scenarios.
Not counting the lines for various deﬁnitions like pre-
ﬁx and customer groups or for preﬁx ownership constraints,
which we cannot reveal because of conﬁdentiality concerns,
the routing policies for Propane were 43 lines for the back-
bone network and 31 lines for the datacenter networks.
7.3 Compilation time
We study the compilation of time for both policies as a
function of network size. Even though the networks we
study have a ﬁxed topology and size, we can explore the im-
pact of size because the policies are network-wide and the
compiler takes the topology itself as an input. For the dat-
acenter network, we build and provide as input fat tree [1]
topologies of different sizes, assign a /24 preﬁx to each ToR
switch, and randomly map preﬁxes to each type of preﬁx
3Not intended as a scientiﬁc test, but we also asked the two
operators if they would ﬁnd it easy to express their policies in
Propane. The datacenter operator said that he found the lan-
guage intuitive. The backbone operator said that formalizing
the policy in Propane seemed equally easy or difﬁcult as for-
malizing in RPSL [2], but he appreciated that he would have
to do it only once for the whole network (not per-router) and
did not have to manually compute various local preferences,
import-export ﬁlters, and MEDs.
group with a distinct routing policy. For the backbone net-
work, the internal topology does not matter since all routers
connect to each other through iBGP. We explore different
(full iBGP) mesh sizes and randomly map neighboring net-
works to routers. Even though each border router connects
to many external peers, we count only the mesh size.
All experiments are run on an 8 core, 3.6 GHz Intel Xeon
processor running Windows 7. Figure 10 shows the compila-
tion times for datacenter and backbone networks of different
sizes. For both policies, we measure the mean compilation
time per preﬁx predicate since the compiler operates on each
predicate in parallel. A single predicate can describe many
preﬁxes, for example by matching on a disjunction of pre-
ﬁxes. At their largest sizes, the per-predicate compilation
time is roughly 10 seconds for the datacenter network and
45 seconds for the backbone network.
Compilation for the largest datacenter takes less than 9
minutes total. Unlike the datacenter policy, the number of
predicates for the backbone policy remains relatively ﬁxed
as the topology size increases. Compilation for the largest
backbone network takes less than 3 minutes total. The inclu-
sion of both more preferences and more neighboring ASes in
the backbone policy increases the size of the resulting PGIR,
which in turn leads to PGIR construction and minimization
taking proportionally more time.
In both examples, we observe that Algorithm 1 for infer-
ring Regret-Free preferences is efﬁcient, taking only a small
fraction of the total running time. PGIR minimization is the
most expensive compilation phase. If needed, minimization
can be limited to a ﬁxed number of iterations for large net-
works. Both the backbone and datacenter policies could be
successfully compiled without performing minimization.
7.4 Conﬁguration size
Figure 11 shows the size of the compiled ABGP poli-
cies as a function of the topology size. The naive transla-
tion of PGIR to ABGP outlined in §5 generates extremely
large ABGP policies by default. To offset this, the compiler
performs ABGP conﬁguration minimization both during and
after the PGIR to ABGP translation phase. Minimization is
highly effective for both the datacenter and backbone poli-
cies. In all cases, minimized policies are a small fraction of
the size of their non-minimized counterparts.
However, even minimized conﬁgurations are hundreds or
thousands of lines per router. For the backbone network, the
size of Propane conﬁgurations is roughly similar to the BGP
339
components of actual router conﬁgurations, though qualita-
tive differences exist (see below). We did not have actual
conﬁgurations for the datacenter network; they are dynami-
cally generated from templates.
7.5 Propane vs. operator conﬁgurations
We comment brieﬂy on how Propane-generated conﬁg-
urations differ from conﬁgurations written by operators. In
some ways they are similar. For example, preferences among
neighboring ASes are implemented with a community value
to tag incoming routes according to preference, which is then
used at other border routers to inﬂuence decisions.
In other ways, the Propane conﬁgurations are different,
relying on a different BGP mechanism to achieve the same
result. Some key differences that we observed were:
i) operators used the no-export community to prevent routes
from leaking beyond a certain tier of the datacenter, while
Propane selectively imported the route only below the tier;
ii) operators prevented unneeded propagation of more-
speciﬁc route announcements from a less-preferred neigh-
boring AS based on their out-of-band knowledge about the
topology, whereas Propane propagated these advertisements;
iii) operators used a layer of indirection for community
values, using community groups and re-writing values, to
implement certain policies in a more maintainable manner,
where Propane uses ﬂat communities; and
iv) operators used BGP regular expression ﬁlters to en-
force certain invariants that are independent of any particular
preﬁx, whereas Propane enforced these invariants per preﬁx.
We are investigating if such differences matter to opera-
tors, e.g., if they want to read Propane conﬁgurations, and,
if necessary, how to reduce them.
8. RELATED WORK
Our work draws on four threads of prior work.
SDN languages. Propane was heavily inﬂuenced by SDN
programming languages such as NetKAT [3], Merlin [30],
FatTire [29], and path queries [27]. Each of these languages
uses regular expressions to describe paths through a network
and predicates to classify packets. In particular, FatTire al-
lows programmers to deﬁne sets of paths with a fault toler-
ance level (i.e., tolerate 1 or 2 faults) and the compiler gen-
erates appropriate OpenFlow rules. Propane is more expres-
sive as it allows users to specify preferences among paths,
and it generates distributed implementations that tolerate any
number of faults. Because FatTire generates data plane rules
up front, specifying higher levels of fault tolerance comes at
the cost of generating additional rules that tax switch mem-
ory. In contrast, Propane relies on distributed control plane
mechanisms to react to faults, which do not have additional
memory cost. Because of the differences in the underlying
technology, the analyses and compilation algorithms used in
Propane are quite different from previous work on SDN. Fi-
nally, in addition to using path-based abstractions for intra-
domain routing, Propane uses them for inter-domain routing
as well, unlike existing SDN languages.
340
Conﬁguration automation. Many practitioners use conﬁg-
uration templates [18, 31], to ensure certain kinds of consis-
tency across similar devices. In addition, conﬁguration lan-
guages such as RPSL [2], Yang [7], and Netconf [9] allow
operators to express routing policy in a vendor-neutral way.
However, all of these solutions remain low-level, for exam-
ple, requiring operators to specify exact local preferences.
Unlike Propane, there is no guarantee that these low-level
conﬁgurations satisfy the original, high-level intent.
Conﬁguration analysis. The notion that conﬁguring net-
work devices is difﬁcult and error-prone is not new. In the
past, researchers have tried to tackle this problem by analyz-
ing existing router conﬁgurations [10, 26, 12, 32, 15] and
reporting errors or inconsistencies when they are detected.
Our research is complementary to these analysis efforts. We
hope to eliminate bugs by using higher-level languages and
a “correct-by-construction” methodology. Writing conﬁgu-
rations at a high level of abstraction simpliﬁes policy imple-
mentation and prevents a whole host of low-level errors.
Conﬁguration synthesis. ConﬁgAssure [24, 25] is another
system designed to help users deﬁne and debug low-level
router conﬁgurations. Inputs to ConﬁgAssure include a con-
ﬁguration database, which contains a collection of tuples
over constants and conﬁguration variables, and a require-
ment, which is a set of constraints. The authors use a com-
bination of logic programming and SAT solving to ﬁnd con-
crete values for conﬁguration variables. ConﬁgAssure han-
dles conﬁguration for a wide range of protocols and many
different concerns. In contrast, the scope of Propane is much
narrower.
In return, Propane offers compact, higher-level
abstractions customized for our domain, such as regular paths,
as well as domain-speciﬁc analyses customized to those ab-
stractions, such as our failure safety analysis. The imple-
mentation technology is also entirely different, as we deﬁne
algorithms over automata and graphs as opposed to using
logic programming and SAT-based model-ﬁnding.
9. CONCLUSIONS
We introduced Propane, a language and compiler for im-
plementing network-wide policies using a distributed set of
devices running BGP. Propane allows operators to describe
their policy through high-level constraints on both the shape
and relative preferences of paths for different types of trafﬁc.
When Propane compiles a policy, the resulting BGP conﬁg-
urations are guaranteed to implement the centralized policy
in a distributed fashion, regardless of any number of network
failures. Applying Propane to real-world networks showed
that its language is expressive and its compiler is scalable.
Acknowledgments. We thank R. Aditya, George Chen, and
Lihua Yuan for feedback on the work and the SIGCOMM re-
viewers for comments on the paper. This work is supported
in part by the National Science Foundation awards CNS-
1161595 and CNS-1111520 as well as a gift from Cisco.
10. REFERENCES
[1] M. Al-Fares, A. Loukissas, and A. Vahdat. A scalable,
commodity data center network architecture. In
SIGCOMM, August 2008.
[2] C. Alaettinoglu, C. Villamizar, E. Gerich, D. Kessens,
D. Meyer, T. Bates, D. Karrenberg, and M. Terpstra.
Routing policy speciﬁcation language (RPSL). RFC
2622, RFC Editor, June 1999.
http://www.rfc-editor.org/rfc/rfc2622.txt.
[3] C. J. Anderson, N. Foster, A. Guha, J.-B. Jeannin,
D. Kozen, C. Schlesinger, and D. Walker. NetKAT:
Semantic foundations for networks. In POPL, January
2014.
[4] M. Anderson. Time warner cable says outages largely
resolved. http://www.seattletimes.com/business/
time-warner-cable-says-outages-largely-resolved,
August 2014.
[5] P. Berde, M. Gerola, J. Hart, Y. Higuchi,
M. Kobayashi, T. Koide, B. Lantz, B. O’Connor,
P. Radoslavov, W. Snow, and G. Parulkar. ONOS:
Towards an open, distributed SDN OS. In HotSDN,
August 2014.
[6] News and press | BGPMon.
http://www.bgpmon.net/news-and-events/.
[7] M. Bjorklund. YANG - a data modeling language for
the network conﬁguration protocol (NETCONF). RFC
6020, RFC Editor, October 2010.
http://www.rfc-editor.org/rfc/rfc6020.txt.
[8] M. Casado, M. J. Freedman, J. Pettit, J. Luo,
N. McKeown, and S. Shenker. Ethane: Taking control
of the enterprise. In SIGCOMM, August 2007.
[9] R. Enns, M. Bjorklund, J. Schoenwaelder, and
A. Bierman. Network conﬁguration protocol
(NETCONF). RFC 6241, RFC Editor, June 2011.
http://www.rfc-editor.org/rfc/rfc6241.txt.
[10] N. Feamster and H. Balakrishnan. Detecting BGP
conﬁguration faults with static analysis. In NSDI, May
2005.
[11] N. Feamster, J. Winick, and J. Rexford. A model of
BGP routing for network engineering. In
SIGMETRICS, June 2004.
[12] A. Fogel, S. Fung, L. Pedrosa, M. Walraed-Sullivan,
R. Govindan, R. Mahajan, and T. Millstein. A general
approach to network conﬁguration analysis. In NSDI,
March 2015.
[13] N. Foster, M. J. Freedman, A. Guha, R. Harrison, N. P.
Katta, C. Monsanto, J. Reich, M. Reitblatt, J. Rexford,
C. Schlesinger, A. Story, and D. Walker. Languages
for software-deﬁned networks. IEEE Communications
Magazine, 51(2):128–134, February 2013.
[14] W. Gelade and F. Neven. Succinctness of the
complement and intersection of regular expressions.
ACM Trans. Comput. Logic, 13(1):4:1–4:19, January
341
2012.
[15] A. Gember-Jacobson, R. Viswanathan, A. Akella, and
R. Mahajan. Fast control plane analysis using an
abstract representation. In SIGCOMM, August 2016.
[16] P. Gill, N. Jain, and N. Nagappan. Understanding
network failures in data centers: Measurement,
analysis, and implications. In SIGCOMM, August
2011.
[17] T. G. Grifﬁn and G. Wilfong. On the correctness of
IBGP conﬁguration. In SIGCOMM, August 2002.
[18] Hatch – create and share conﬁgurations.
http://www.hatchconﬁgs.com/.
[19] P. Lapukhov, A. Premji, and J. Mitchell. Use of BGP
for routing in large-scale data centers. Internet draft,
August 2015.
[20] F. Le, G. G. Xie, and H. Zhang. On route aggregation.
In CoNEXT, December 2011.
[21] T. Lengauer and R. Tarjan. A fast algorithm for ﬁnding
dominators in a ﬂowgraph. In TOPLAS, July 1979.
[22] R. Mahajan, D. Wetherall, and T. Anderson.
Understanding BGP misconﬁguration. In SIGCOMM,
August 2002.
[23] J. McCauley, A. Panda, M. Casado, T. Koponen, and
S. Shenker. Extending SDN to large-scale networks.
In Open Networking Summit, April 2013.
[24] S. Narain. Network conﬁguration management via
model ﬁnding. In LISA, December 2005.
[25] S. Narain, G. Levin, S. Malik, and V. Kaul.
Declarative infrastructure conﬁguration synthesis and
debugging. Journal of Network Systems Management,
16(3):235–258, October 2008.
[26] S. Narain, R. Talpade, and G. Levin. Guide to Reliable
Internet Services and Applications, chapter Network
Conﬁguration Validation. Springer, 2010.
[27] S. Narayana, M. Tahmasbi, J. Rexford, and D. Walker.
Compiling path queries. In NSDI, March 2016.
[28] S. Owens, J. Reppy, and A. Turon. Regular-expression
derivatives re-examined. In J. Funct. Program., March
2009.
[29] M. Reitblatt, M. Canini, N. Foster, and A. Guha.
FatTire: Declarative fault tolerance for software
deﬁned networks. In HotSDN, August 2013.
[30] R. Soulé, S. Basu, P. J. Marandi, F. Pedone,
R. Kleinberg, E. G. Sirer, and N. Foster. Merlin: A
language for provisioning network resources. In
CoNEXT, December 2014.
[31] conﬁguration templates | thwack.
https://thwack.solarwinds.com/search.jspa?q=
conﬁguration+templates.
[32] K. Weitz, D. Woos, E. Torlak, M. D. Ernst,
A. Krishnamurthy, and Z. Tatlock. Formal semantics
and automated veriﬁcation for the border gateway
protocol. In NetPL, March 2016.