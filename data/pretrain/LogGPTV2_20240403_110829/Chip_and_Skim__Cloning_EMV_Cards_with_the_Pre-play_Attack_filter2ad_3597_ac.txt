In the case of POS terminals, sales assistants are often
briefed to turn away during PIN entry and avoid handling
the customer card. Thus existing monitoring tools such as
the Smart Card Detective [11] have been proven suitable
for surreptitious use with a hidden wire running up the
experimenter’s sleeve. We used the Detective to analyze
unpredictable numbers from a POS terminal close to our
ofﬁces, with the agreement of the POS owner.
For each ATM investigated, we harvested between ﬁve
and ﬁfty unpredictable numbers by performing repeated
balance enquiries4 and then a small cash withdrawal. The use
of balance enquiries minimises the number of withdrawals
on the card, as sudden repeated withdrawals might trigger
a fraud detection system and cause the card to be retained.
Such cards cost a few hundred pounds in component and
labour costs so it is desirable to avoid their being captured
by ATMs.
3) Reverse engineering ATM code: In order to get a better
understanding of the generation of unpredictable numbers
inside ATMs we acquired two real machines for analysis.
Figure 4 shows EMV-enabled NCR and Hanco/Triton ATMs
acquired via eBay for £100 each. Some of these had been
in recent service, and some were out of service, having only
been used for development. Barnaby Jack [12] described
how second-hand ATMs can be brought back into service
easily by simply phoning for a repairman.
We have performed an analysis of the hardware and
software of the two ATMs, although our analysis has been
complicated by the obsolete architectures. We found that
one ATM was running OS/2 (see Figure 5(a)), and another
on primitive hardware based on the Zilog Z180 CPU (see
Figure 5(c)). We identiﬁed the manufacturer of the EMV
kernel from information inside the ATM, and documentation
on their website [13] indicates that the EMV kernel requires
seeding with an external source of randomness. Hardware
analysis revealed presence of a dedicated crypto chip im-
plementing DES (see Figure 5(b)) and we theorise also
3For ethical and prudential reasons we informed the Metropolitan Police
that such experiments were underway; we also consulted our local ethics
process.
4It seems all transactions at ATM are authenticated by EMV protocol
runs, but some with a zero withdrawal amount.
Figure 4. ATMs acquired for reverse-engineering
containing a hardware random or pseudo-random number
source. Currently we are conﬁdent that each byte of the
unpredictable number is independently generated from an
off-CPU resource. This would either be the DES chip, a real-
time clock (also present as a separate chip) or possibly the
smart card control unit which is a MagTek board accessed
via a serial interface.
At the outset we believed that older, primitive platforms
would be less likely to have a strong source of randomness
than modern platforms in all cases. However our broader
research across ATM and POS indicates a subtly different
conclusion. Entirely modern platforms are likely to call the
typical OS resources for random number generation, which
nowadays are relatively strong. Meanwhile legacy platforms
may have either strong or very weak randomness depending
on whether this issue was thought about by the designers
at the time. Curiously, legacy platforms which have been
ported to more modern environments are most likely to have
weak randomness as during the porting the random number
generate custom call on the legacy platform is simply
mapped across to the easiest standard library call, such as
the C rand() function. In summary, it is as important to
consider the lineage of the ATM or POS software as it is to
consider the current platform when estimating the likelihood
of vulnerability.
C. Analysing the RNG
In Section V-B2 we described our own approaches to data
collection. Using this approach we collected data to analyse
the RNGs in EMV devices in our local area. We performed
more than 1,000 transactions across 22 different ATMs and
ﬁve POS terminals. We were successful at locating ATMs
with weak RNGs, but attackers need to go further and
identify which speciﬁc UNs are most likely to occur at a
predictable future time. There are three broad classes of
ineffective RNG to consider:
55
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:33 UTC from IEEE Xplore.  Restrictions apply. 
• an obviously weak RNG algorithm. This includes
using counters or clocks directly as the UN, homegrown
algorithms which combine obvious transaction data,
and severe programming errors which cause the state-
space of a better algorithm to be limited (e.g. casting
down to the wrong integer size, or submitting four
BCD coded random bytes rather than four truly random
bytes);
• a simple RNG with little or no seeding. There
are many ﬂavours, from a linear congruential gener-
ator, through encryption of the clock, to more messy
schemes where we may ﬁnd some ﬁxed bits and some
bits that cycle, or where a state machine starts off
appearing random but ends up in a tight loop cycling
through just a small number of values. From an em-
bedded systems standpoint the typical options are the C
standard library time() and rand() calls, neither of
which have unpredictable outputs from a cryptographic
point of view;
• an RNG that can be put into a predictable state.
The simplest failure mode is a strong RNG fed by a
weak source of randomness that’s restarted on power-
up, so an attacker can force an outage or follow the
replenishment crew. There are also proposed RNG
algorithms drawing noise from an untrustworthy source,
such as when an RNG uses data from previous trans-
actions. The attacker could insert a card which seeds
the RNG with known values, or temporarily spoof the
authorisation response from the bank, to push the RNG
into a predictable state.
Table II(a) shows a selection of data collected from
various ATMs falling broadly into the ﬁrst category of
ineffective algorithms. ATM1 and ATM2 contain a typical
characteristic, which we denote characteristic C, where the
high bit and the third nibble of each UN are always set to
zero. This alone reduces the entropy of the unpredictable
numbers from 32 to 27 bits. 11 of 22 ATMs we looked at
exhibited this characteristic.
Such patterns allow us to prove a non-uniform hypothesis
on the data from most of these 11 ATMs with a very good
signiﬁcance level. Table I shows two ten-transaction se-
quences from an ATM where the characteristic was proven.
However further analysis beyond conﬁrming this characteris-
tic has not yielded statistically signiﬁcant results yet. ATMs
of wildly different ages and running different operating
systems exhibited characteristic C, so we believe it to be
an artifact of a particular EMV kernel post-processing an
RNG source rather than of the RNG source itself.
We wondered whether ATM and POS devices were simply
be using the C standard library rand() function, or other
weak sources, and analysed our data using techniques based
on spectral tests. Such analysis was complicated by the
unknown levels of post-processing of the RNG: for example,
we know in the case of one EMV library that each byte of the
(a) Extracting disk image from NCR ATM
(b) Board with DES chip from Triton ATM
(c) CPU board from Triton ATM
Figure 5. Detail of hardware reverse engineering
56
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:33 UTC from IEEE Xplore.  Restrictions apply. 
TEN TRANSACTION SEQUENCES FROM A SINGLE ATM
Table I
SRC2 EXP6
77028437
0D0AF8F9
5C0E743C
4500CE1A
5F087130
3E0CB21D
6A05BAC3
74057B71
76031924
390E8399
0
1
2
3
4
5
6
7
8
9
SRC2 EXP6B
5D01BBCF
760273FE
730E5CE7
380CA5E2
580E9D1F
6805D0F5
530B6EF3
4B0FE750
7B0F3323
630166E1
0
1
2
3
4
5
6
7
8
9
unpredictable number is sampled separately from the RNG
– hence a modulo 256 or a type-cast is almost certainly post-
processing the output. Multiple calls to the RNG to produce
one UN makes fewer bits available to detect state per sample,
but making four consecutive calls in a row for one UN
reduces the potential interference from other services within
an ATM.
The third category could possibly be spotted from empir-
ical analysis but are best detected with reverse-engineering.
In Table II(b) we show a list of stronger consecutive unpre-
dictable numbers retrieved from a local POS terminal. Even
in this case the ﬁrst bit appears to remain 0, which might
suggest the use of a signed integer.
Once UN generation is adequately understood, the attack-
ers ﬁgure out what UNs to collect in order to maximise
the yield in the subsequent cash-out phase. The result is
a target ATM proﬁle which is sent together with intended
withdrawal amounts, country code and date to the gang
tasked with harvesting the ARQCs. Once a vulnerable ATM
using the known RNG is identiﬁed, the attack ﬂow can
proceed further.
D. Harvesting the data
Given temporary access to an EMV card, whose holder
is prepared to enter the PIN, and a range of possible
unpredictable numbers to be harvested, the crook programs
his evil terminal to read the static data from the card and call
GENERATE AC to obtain an ARQC and TC for each pos-
sible UN. This process could be performed by a dedicated
device, or by a tampered point of sale terminal, vending
machine, or ATM, programmed to perform these operations
after (or instead of) a legitimate transaction. Criminals have
already shown the ability to tamper with equipment on an
industrial scale and with great sophistication.
For each card a set of ARQCs can be harvested, perhaps
many dozens. The only limitation is the time that the card
can legitimately be left in a sabotaged POS while the cus-
tomer believes that the machine is waiting for authorisation.
Thirty seconds is the standard authorisation time limit; this
might allow for more than 100 transactions to be skimmed.
57
CATEGORISED UNPREDICTABLE NUMBERS
Table II
(a) From Various ATMs
Counters
Weak RNGs
ATM4
ATM4
ATM4
ATM4
ATM5
ATM5
ATM5
ATM5
eb661db4
2cb6339b
36a2963b
3d19ca14
F1246E04
F1241354
F1244328
F1247348
ATM1
ATM1
ATM1
ATM1
ATM2
ATM2
ATM2
ATM2
ATM3
ATM3
ATM3
ATM3
690d4df2
69053549
660341c7
5e0fc8f2
6f0c2d04
580fc7d6
4906e840
46099187
650155D7
7C0AF071
7B021D0E
1107CF7D
(b) From local POS terminal
Stronger RNGs
POS1
POS1
POS1
POS1
POS1
POS1
013A8CE2
01FB2C16
2A26982F
39EB1E19
293FBA89
49868033
E. Cashing out
To deploy the attack against an RNG which is a fast-
moving counter such as we have observed, the attacker needs
to start the ATM transaction at precisely the right moment.
For a counter ticking hundreds or even thousands of times
a second, it is impractical to synchronise merely through
timed insertion of the card into the machine. A special smart
card can be built to observe the counter and use an on-
board clock to decide when to initiate the relevant parts of
the protocol. Smart cards are allowed to delay processing
responses almost indeﬁnitely using the request more time
signal (i.e. sending byte 0x60), and timely insertion to the
nearest second will mean that the card should never need to
delay more than a few hundred milliseconds.
Such a specialised smart card might use an on-board
real-time clock (RTC), kept working in the absence of
external power by a large capacitor. The RTC is used to
synchronise an internal high resolution timer once the card
is powered up, and waits the necessary amount of time until
the ATM arrives at the step in the EMV protocol where the
unpredictable number is sampled.
The feasibility of this attack depends on the speed of the
timer, the process by which the ATM samples the timer, and
the synchronisation resolution of the card. However there
are straightforward ways to relax the timing requirements:
the attackers harvest a set of transactions with consecutive
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:33 UTC from IEEE Xplore.  Restrictions apply. 
2) two transactions performed on card B
3) traces of transactions compared, GENERATE AC re-
sponses conﬁrmed the same, proving both cards have
the same cryptographic keys and are generating the
same cryptograms (they are identical)
4) two ARQCs skimmed from card A
5) pre-play card programmed with data from data col-
lected from card A
6) two transactions performed on card B
7) two transactions performed on pre-play card
8) traces of transaction compared and shown to be identi-
cal, conﬁrming that pre-play card is indistinguishable
from card B
Figure 6. Modiﬁed Chip and PIN terminal, playing Tetris
VI. THE DEEPER PROBLEM: PRE-PLAY ATTACKS DUE TO
THE PROTOCOL FLAW
unpredictable numbers, and the attack card makes its best
attempt at synchronisation. Once the card sees the unpre-
dictable number returned by the ATM it looks this up in
an internal lookup table. If the UN is not found, the card
can feign failure. So if ten transactions are harvested from
the skimmed card, the timing requirements can perhaps be
relaxed by a factor of ten as well.
In the case of ATMs employing stateful predictable
pseudo-random RNGs,
the implementation details differ:
the attacker samples a few unpredictable numbers and can
then predict subsequent ones. In any case, synchronisation
technology can be developed and tested entirely ofﬂine
against captive ATMs without any need to interact with the
real payment network.
We show an illustration of this attack in Figure 7 (left).
F. Implementation and evaluation
We have constructed proof-of-concept implementations
for all stages of the attack. As discussed above, we modiﬁed
a bank smart card for data collection to identify ATMs
with poor UN generation. To collect card data we have
implemented a Python EMV terminal implementation and
modiﬁed an EMV terminal to collect card data, as shown in