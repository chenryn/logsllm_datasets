Add scope 
requirements 
to each 
operation 
exposed by 
the API.
223
Scoped tokens
7.1.2
The difference between scopes and permissions
At first glance, it may seem that scopes and permissions are very similar, but there is a
distinction in what they are used for, as shown in figure 7.2. Typically, an API is owned
and operated by a central authority such as a company or an organization. Who can
access the API and what they are allowed to do is controlled entirely by the central
authority. This is an example of mandatory access control, because the users have no con-
trol over their own permissions or those of other users. On the other hand, when a
user delegates some of their access to a third-party app or service, that is known as dis-
cretionary access control, because it’s up to the user how much of their access to grant to
the third party. OAuth scopes are fundamentally about discretionary access control,
while traditional permissions (which you implemented using ACLs in chapter 3) can
be used for mandatory access control.
DEFINITION
With mandatory access control (MAC), user permissions are set and
enforced by a central authority and cannot be granted by users themselves.
With discretionary access control (DAC), users can delegate some of their permis-
sions to other users. OAuth2 allows discretionary access control, also known
as delegated authorization.
Whereas scopes are used for delegation, permissions may be used for either manda-
tory or discretionary access. File permissions in UNIX and most other popular operat-
ing systems can be set by the owner of the file to grant access to other users and so
implement DAC. In contrast, some operating systems used by the military and govern-
ments have mandatory access controls that prevent somebody with only SECRET
clearance from reading TOP SECRET documents, for example, regardless of whether
the owner of the file wants to grant them access.3 Methods for organizing and enforcing
3 Projects such as SELinux (https://selinuxproject.org/page/Main_Page) and AppArmor (https://apparmor
.net/) bring mandatory access controls to Linux.
Authority
User
Grant
permission
Delegate with
scope
Third-party app
Permissions are granted to
users by a central authority
that owns the API.
API
Owns
Users can delegate some of
their access to third parties,
using scopes to restrict the
delegated access.
Figure 7.2
Permissions are 
typically granted by a central 
authority that owns the API 
being accessed. A user does not 
get to choose or change their 
own permissions. Scopes allow 
a user to delegate part of their 
authority to a third-party app, 
restricting how much access 
they grant using scopes.
224
CHAPTER 7
OAuth2 and OpenID Connect
permissions for MAC are covered in chapter 8. OAuth scopes provide a way to layer
DAC on top of an existing MAC security layer.
 Putting the theoretical distinction between MAC and DAC to one side, the more
practical distinction between scopes and permissions relates to how they are designed.
The administrator of an API designs permissions to reflect the security goals for the sys-
tem. These permissions reflect organizational policies. For example, an employee doing
one job might have read and write access to all documents on a shared drive. Permis-
sions should be designed based on access control decisions that an administrator may
want to make for individual users, while scopes should be designed based on anticipat-
ing how users may want to delegate their access to third-party apps and services. 
NOTE
The delegated authorization in OAuth is about users delegating their
authority to clients, such as mobile apps. The User Managed Access (UMA)
extension of OAuth2 allows users to delegate access to other users.
An example of this distinction can be seen in the design of OAuth scopes used by
Google for access to their Google Cloud Platform services. Services that deal with sys-
tem administration jobs, such as the Key Management Service for handling cryp-
tographic keys, only have a single scope that grants access to that entire API. Access to
individual keys is managed through permissions instead. But APIs that provide access
to individual user data, such as the Fitness API (http://mng.bz/EEDJ) are broken
down into much more fine-grained scopes, allowing users to choose exactly which
health statistics they wish to share with third parties, as shown in figure 7.3. Providing
users with fine-grained control when sharing their data is a key part of a modern pri-
vacy and consent strategy and may be required in some cases by legislation such as the
EU General Data Protection Regulation (GDPR).
 Another distinction between scopes and permissions is that scopes typically only
identify the set of API operations that can be performed, while permissions also iden-
tify the specific objects that can be accessed. For example, a client may be granted a
list_files scope that allows it to call an API operation to list files on a shared drive,
but the set of files returned may differ depending on the permissions of the user that
authorized the token. This distinction is not fundamental, but reflects the fact that
scopes are often added to an API as an additional layer on top of an existing permis-
sion system and are checked based on basic information in the HTTP request without
knowledge of the individual data objects that will be operated on. 
 When choosing which scopes to expose in your API, you should consider what
level of control your users are likely to need when delegating access. There is no
simple answer to this question, and scope design typically requires several iterations
of collaboration between security architects, user experience designers, and user
representatives. 
LEARN ABOUT IT
Some general strategies for scope design and documentation
are provided in The Design of Web APIs by Arnaud Lauret (Manning, 2019;
https://www.manning.com/books/the-design-of-web-apis).
225
Scoped tokens
Pop quiz
1
Which of the following are typical differences between scopes and permissions?
a
Scopes are more fine-grained than permissions.
b
Scopes are more coarse-grained than permissions.
c
Scopes use longer names than permissions.
d
Permissions are often set by a central authority, while scopes are designed for
delegating access.
e
Scopes typically only restrict the API operations that can be called. Permis-
sions also restrict which objects can be accessed.
The answer is at the end of the chapter.
System APIs use only coarse-grained
scopes to allow access to the entire API
APIs processing user data provide
more ﬁne-grained scopes to allow
users to control what they share.
Figure 7.3
Google Cloud Platform OAuth scopes are very coarse-grained for system APIs such as 
database access or key management. For APIs that process user data, such as the Fitness API, many 
more scopes are defined, allowing users greater control over what they share with third-party apps 
and services.
226
CHAPTER 7
OAuth2 and OpenID Connect
7.2
Introducing OAuth2
Although allowing your users to manually create scoped tokens for third-party applica-
tions is an improvement over sharing unscoped tokens or user credentials, it can be
confusing and error-prone. A user may not know which scopes are required for that
application to function and so may create a token with too few scopes, or perhaps del-
egate all scopes just to get the application to work. 
 A better solution is for the application to request the scopes that it requires, and
then the API can ask the user if they consent. This is the approach taken by the
OAuth2 delegated authorization protocol, as shown in figure 7.4. Because an organi-
zation may have many APIs, OAuth introduces the notion of an Authorization Server
(AS), which acts as a central service for managing user authentication and consent
and issuing tokens. As you’ll see later in this chapter, this centralization provides sig-
nificant advantages even if your API has no third-party clients, which is one reason
why OAuth2 has become so popular as a standard for API security. The tokens that an
application uses to access an API are known as access tokens in OAuth2, to distinguish
them from other sorts of tokens that you’ll learn about later in this chapter.
DEFINITION
An access token is a token issued by an OAuth2 authorization
server to allow a client to access an API.
API
Authorization
server
Request scope
Use access token
Consent
Third-party app
Before a third-party client
can use an API, it must
ﬁrst obtain an access token.
The Authorization Server
checks that the user
consents to this access.
Access token
The app tells the AS
what scope of access
it requires.
Figure 7.4
To access an API using OAuth2, an app must first obtain an 
access token from the Authorization Server (AS). The app tells the AS what 
scope of access it requires. The AS verifies that the user consents to this 
access and issues an access token to the app. The app can then use the 
access token to access the API on the user’s behalf.
227
Introducing OAuth2
OAuth uses specific terms to refer to the four entities shown in figure 7.4, based on
the role they play in the interaction:
 The authorization server (AS) authenticates the user and issues tokens to clients.
 The user is known as the resource owner (RO), because it’s typically their resources
(documents, photos, and so on) that the third-party app is trying to access. This
term is not always accurate, but it has stuck now.
 The third-party app or service is known as the client.
 The API that hosts the user’s resources is known as the resource server (RS).
7.2.1
Types of clients
Before a client can ask for an access token it must first register with the AS and obtain
a unique client ID. This can either be done manually by a system administrator, or
there is a standard to allow clients to dynamically register with an AS (https://tools.ietf
.org/html/rfc7591). 
LEARN ABOUT IT
OAuth2 in Action by Justin Richer and Antonio Sanso (Manning,
2017; https://www.manning.com/books/oauth-2-in-action) covers dynamic cli-
ent registration in more detail.
There are two different types of clients:
 Public clients are applications that run entirely within a user’s own device, such as
a mobile app or JavaScript client running in a browser. The client is completely
under the user’s control.
 Confidential clients run in a protected web server or other secure location that is
not under a user’s direct control. 
The main difference between the two is that a confidential client can have its own client
credentials that it uses to authenticate to the authorization server. This ensures that an
attacker cannot impersonate a legitimate client to try to obtain an access token from a
user in a phishing attack. A mobile or browser-based application cannot keep credentials
secret because any user that downloads the application could extract them.4 For public
clients, alternative measures are used to protect against these attacks, as you’ll see shortly.
DEFINITION
A confidential client uses client credentials to authenticate to the
AS. Usually, this is a long random password known as a client secret, but more
secure forms of authentication can be used, including JWTs and TLS client
certificates.
Each client can typically be configured with the set of scopes that it can ask a user for.
This allows an administrator to prevent untrusted apps from even asking for some
scopes if they allow privileged access. For example, a bank might allow most clients
4 A possible solution to this is to dynamically register each individual instance of the application as a new client
when it starts up so that each gets its own unique credentials. See chapter 12 of OAuth2 in Action (Manning,
2017) for details.
228
CHAPTER 7
OAuth2 and OpenID Connect
read-only access to a user’s recent transactions but require more extensive validation
of the app’s developer before the app can initiate payments.
7.2.2
Authorization grants
To obtain an access token, the client must first obtain consent from the user in the
form of an authorization grant with appropriate scopes. The client then presents this
grant to the AS’s token endpoint to obtain an access token. OAuth2 supports many dif-
ferent authorization grant types to support different kinds of clients:
 The Resource Owner Password Credentials (ROPC) grant is the simplest, in which
the user supplies their username and password to the client, which then sends
them directly to the AS to obtain an access token with any scope it wants. This is
almost identical to the token login endpoint you developed in previous chap-
ters and is not recommended for third-party clients because the user directly
shares their password with the app—the very thing you were trying to avoid! 
CAUTION
ROPC can be useful for testing but should be avoided in most cases.
It may be deprecated in future versions of the standard.
 In the Authorization Code grant, the client first uses a web browser to navigate to a
dedicated authorization endpoint on the AS, indicating which scopes it requires.
The AS then authenticates the user directly in the browser and asks for consent
for the client access. If the user agrees then the AS generates an authorization
code and gives it to the client to exchange for an access token at the token end-
point. The authorization code grant is covered in more detail in the next section.
 The Client Credentials grant allows the client to obtain an access token using its
own credentials, with no user involved at all. This grant can be useful in some
microservice communications patterns discussed in chapter 11.
 There are several additional grant types for more specific situations, such as the
device authorization grant (also known as device flow) for devices without any
direct means of user interaction. There is no registry of defined grant types, but
websites such as https://oauth.net/2/grant-types/ list the most commonly used
types. The device authorization grant is covered in chapter 13. OAuth2 grants
are extensible, so new grant types can be added when one of the existing grants
doesn’t fit.
What about the implicit grant?
The original definition of OAuth2 included a variation on the authorization code grant
known as the implicit grant. In this grant, the AS returned an access token directly
from the authorization endpoint, so that the client didn’t need to call the token end-
point to exchange a code. This was allowed because when OAuth2 was standardized
in 2012, CORS had not yet been finalized, so a browser-based client such as a single-
page app could not make a cross-origin call to the token endpoint. In the implicit
grant, the AS redirects back from the authorization endpoint to a URI controlled by
229
Introducing OAuth2
An example of obtaining an access token using the ROPC grant type is as follows, as
this is the simplest grant type. The client specifies the grant type (password in this
case), it’s client ID (for a public client), and the scope it’s requesting as POST param-
eters in the application/x-www-form-urlencoded format used by HTML forms. It
also sends the resource owner’s username and password in the same way. The AS will
authenticate the RO using the supplied credentials and, if successful, will return an
access token in a JSON response. The response also contains metadata about the
token, such as how long it’s valid for (in seconds).
$ curl -d 'grant_type=password&client_id=test   
➥ &scope=read_messages+post_message            
➥ &username=demo&password=changeit'              
➥ https://as.example.com:8443/oauth2/access_token
{
  "access_token":"I4d9xuSQABWthy71it8UaRNM2JA",   
  "scope":"post_message read_messages",
  "token_type":"Bearer",
  "expires_in":3599}
7.2.3
Discovering OAuth2 endpoints
The OAuth2 standards don’t define specific paths for the token and authorization
endpoints, so these can vary from AS to AS. As extensions have been added to OAuth,
several other endpoints have been added, along with several settings for new features.
To avoid each client having to hard-code the locations of these endpoints, there is a
standard way to discover these settings using a service discovery document published
under a well-known location. Originally developed for the OpenID Connect profile of
OAuth (which is covered later in this chapter), it has been adopted by OAuth2
(https://tools.ietf.org/html/rfc8414).
 A conforming AS is required to publish a JSON document under the path /.well-
known/oauth-authorization-server under the root of its web server.5 This JSON docu-
ment contains the locations of the token and authorization endpoints and other set-
tings. For example, if your AS is hosted as https:/ /as.example.com:8443, then a GET
the client, with the access token included in the fragment component of the URI. This
introduces some security weaknesses compared to the authorization code grant, as
the access token may be stolen by other scripts running in the browser or leak
through the browser history and other mechanisms. Since CORS is now widely sup-
ported by browsers, there is no need to use the implicit grant any longer and the
OAuth Security Best Common Practice document (https://tools.ietf.org/html/draft-
ietf-oauth-security-topics) now advises against its use.
5 AS software that supports the OpenID Connect standard may use the path /.well-known/openid-configura-
tion instead. It is recommended to check both locations.
Specify the grant type, 
client ID, and requested 
scope as POST form fields.
The RO’s username and 
password are also sent 
as form fields.
The access token is returned 
in a JSON response, along 
with its metadata.
230
CHAPTER 7
OAuth2 and OpenID Connect
request to https:/ /as.example.com:8443/.well-known/oauth-authorization-server returns
a JSON document like the following:
{
  "authorization_endpoint": 
    "http://openam.example.com:8080/oauth2/authorize",
  "token_endpoint": 
    "http://openam.example.com:8080/oauth2/access_token",
  …
}
WARNING
Because the client will send credentials and access tokens to many of
these endpoints, it’s critical that they are discovered from a trustworthy source.
Only retrieve the discovery document over HTTPS from a trusted URL.
7.3
The Authorization Code grant
Though OAuth2 supports many different authorization grant types, by far the most
useful and secure choice for most clients is the authorization code grant. With the
implicit grant now discouraged, the authorization code grant is the preferred way for
almost all client types to obtain an access token, including the following:
 Server-side clients, such as traditional web applications or other APIs. A server-
side application should be a confidential client with credentials to authenticate
to the AS.
 Client-side JavaScript applications that run in the browser, such as single-page
apps. A client-side application is always a public client because it has no secure
place to store a client secret.
 Mobile, desktop, and command-line applications. As for client-side applica-
tions, these should be public clients, because any secret embedded into the
application can be extracted by a user.
Pop quiz
2
Which two of the standard OAuth grants are now discouraged?
a
The implicit grant
b
The authorization code grant
c
The device authorization grant
d
Hugh Grant
e
The Resource Owner Password Credentials (ROPC) grant
3
Which type of client should be used for a mobile app?
a
A public client
b
A confidential client
The answers are at the end of the chapter.
231
The Authorization Code grant
In the authorization code grant, the client first redirects the user’s web browser to the
authorization endpoint at the AS, as shown in figure 7.5. The client includes its client
ID and the scope it’s requesting from the AS in this redirect. Set the response_type
parameter in the query to code to request an authorization code (other settings such
Browser
Authorization
server
Client
Resource owner
1. Redirect to
authorize endpoint
2. Authenticate RO
and ask for consent
First, the client
redirects the user’s