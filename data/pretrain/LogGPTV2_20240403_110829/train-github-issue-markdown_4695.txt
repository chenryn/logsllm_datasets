I am working on a monorepo project that includes both Node.js and browser code, and I am using Deno in this setup. Currently, WebStorm only supports one TypeScript language server, which can be limiting. I have done some work with Babel, allowing me to share code between Node.js, Deno, and the browser. For development, I use VSCode for Deno and WebStorm for Node.js and browser code.

One issue I encounter is that if I accidentally open a Deno file in WebStorm, it alerts me of a '.ts' error, as you might expect. Working with Deno and Node.js in a mixed environment is a practical necessity.

The primary reason I use Deno is its excellent support for writing TypeScript scripts. I can achieve similar capabilities using esbuild, but Deno offers additional benefits. One significant advantage of Deno is that it allows us to isolate parts of a large program, making it easier to manage. In this context, it's crucial to be able to transfer code seamlessly between Deno and Node.js.

To achieve this, my approach (which I believe is common) is to develop the code in Node.js and then generate Deno-compatible code. This is because if a problem can be solved in Deno, it can usually be solved in Node.js, but not necessarily the other way around.

I think it would be beneficial for Deno to adopt a design that is more compatible with TypeScript import syntax. The incompatibility in this area is a significant issue that should be addressed.

Additionally, while the incompatibility with npm is a challenge, it is a higher-level concern compared to language syntax. There are various ways to address npm compatibility, and I believe it is a manageable issue.

In summary, improving the compatibility between Deno and Node.js, particularly in terms of TypeScript import syntax, would greatly enhance the developer experience.