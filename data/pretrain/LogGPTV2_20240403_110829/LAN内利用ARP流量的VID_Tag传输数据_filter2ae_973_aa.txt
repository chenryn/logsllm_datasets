# LAN内利用ARP流量的VID Tag传输数据
|
##### 译文声明
本文是翻译文章，文章原作者 DamonMohammadbagher，文章来源：github.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
这篇文章中我想就ARP流量再一次进行讨论，在此之前，于我的上一篇[文章](https://www.peerlyst.com/posts/transfer-backdoor-payloads-by-arp-traffic-and-bypassing-avs-damon-mohammadbagher)
中我们已经谈论过这个话题——通过ARP流量传输数据，以及使用[NativePayload_ARP.sh](https://github.com/DamonMohammadbagher/NativePayload_ARP/blob/master/For_Linux_Macchanger/Macchange.sh)
来更改MAC地址。这是一种常见且有用的方式用以在2层的局域网主机之间传输数据，对于建立了桥接的物理主机与虚拟主机同样有效。
但使用这种方法，你发送数据的主机MAC地址总是在不断变化。Now，在这篇文章中我将介绍一种不用改变MAC地址就可以利用ARP流量传输数据的新方法。
在此方法中，我们可以通过ARP流量的`VID Tag`发送数据给局域网内的所有主机。
## 0x01 声明
  1. 这篇文章中我不想再讨论如何在Windows系统下实现，以及如何使用`C#`来编写相关工具。这次我想在Linux系统下实现，同时编写一个简单的`Shell`脚本来实现该方法。
  2. 我不是一个专业的`Bash Shell`程序员，但我想，我们可以很轻松地完成这项工作。
  3. 举个例子，我们想通过ARP流量的`VID Tag`传送”Are you going to Scarborough Fair?”给局域网内的所有主机。
  4. 
## 0x02 为什么是VID Tag?
简单来说，因为这是一种正常且合法的行为用以改变ARP数据包中的字节。我认为，这种方法可以很好地躲避局域网内嗅探工具或者杀软的检测。但确保你仅在测试环境中使用此方法。
## 0x03 如何使用VID Tag作为Payload?
为了解释方便，我们需要一段文本，就让我们使用”Are you going to Scarborough
Fair?”这段文本。你需要将这段文本分成字节块，然后你就可以使用每个字符的十六进制字节块来作为`VID Tag`。
让我来通过命令一步步地解释。
使用下面这条命令，你可以轻松地看到每个字符的字节表示。这种情况下，我将该字符串分成每行10个字符显示：
    echo "Are you going to Scarborough Fair?" | xxd -c 10
    0000000: 4172 6520 796f 7520 676f Are you go
    000000a: 696e 6720 746f 2053 6361 ing to Sca
    0000014: 7262 6f72 6f75 6768 2046 rborough F
    000001e: 6169 723f 0a               air?.
正如你看到的，第一行是下面这段：
    0000000: 4172 6520 796f 7520 676f Are you go
    bytes=char
    41='A'
    72='r'
    65='e'
    20=' '
    79='y'
    ...
如果我们想把’A’作为Payload通过`VID Tag`传输的话，那么我们应该注入`0x41`到ARP广播包中。但是如何才能做到？
## 0x04 一步步地教你如何发送“定制”ARP广播包
关于`VID/Vlan-ID Tag`有一点要郑重说明：你的`Vlan-ID`必须位于0-4094之间。所以我们只能使用整数。
###  0x04.1 准备工作
首先，我们需要知道在Linux下如何使用命令发送ARP广播包，如何在广播包中使用我们的`Vlan-ID`。
使用下面这些命令我们可以轻松地拥有一个“新”VLAN和Vlan-ID：
    root@kali:~# ip link add link eth0 name Vlanx type vlan id 13
    root@kali:~# ip addr add 192.168.110.1/24 brd 192.168.110.255 dev Vlanx
    root@kali:~# ip link set dev Vlanx up
正如你看到的，我们拥有了一个新的VLAN网络接口，它的VID是13，IP地址池是192.168.110.1/24，广播地址是192.168.110.255。
到目前为止，我们已经创建了一个VLAN，但接下来我们需要知道如何在LAN中发送这个VLAN的ARP广播包。
###  0x04.2 发送广播包
这是关键的一步，如何自动发送ARP广播包？为什么要这样做？
先来回答第二个问题：为什么要这样做？
因为我们使用下面这条命令后，将Payload作为`VID Tag`注入到了广播包中：
    root@kali:~# ip link add link eth0 name Vlanx type vlan id 13
这就意味着：你的ARP广播包会携带着`VID Tag`，同时LAN内的所有主机都会接收到这个带有`13`的ARP广播包。
下面回答第一个问题：如何自动发送ARP广播包？
你可以使用一个简单的技巧，如何你想发送ARP广播包的话，你只需发送对`192.168.110.1/24`内某一主机的PING请求即可。目标主机IP地址应该位于`192.168.110.2`到`192.168.110.254`之间。
另外，当你PING某一主机时，因为你PING的主机不存在，所以在每次PING请求之前会持续发送ARP请求。也就是说，如果你发送两次PING请求(例如：ping
192.168.110.2)，至少会有两次对192.168.110.2的ARP请求。
让我来给你展示一下：
## 0x05 抓取数据包
使用下面这条命令你可以很好地抓取ARP广播包：
下面是`tcpdump`命令的输出内容：
    root@kali:~# tcpdump -XX -v broadcast | grep 0x0000
    tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
    0x0000: ffff ffff ffff 0800 279c 70b1 8100 000d ........'.p.....
    0x0000: ffff ffff ffff 0800 279c 70b1 8100 000d ........'.p.....
    0x0000: ffff ffff ffff 0800 279c 70b1 8100 000d ........'.p.....
在`0x0000`行， “ffff ffff ffff”和“000d”这两个字段非常重要：
    0x0000: ffff ffff ffff 0800 279c 70b1 8100 000d ........'.p.....
“ffff ffff ffff”：代表这是ARP广播包（发送给LAN中所有主机）。  
“000d”：你的`VID Tag`。
     printf “%x” 13 ===> d
如果你不使用`grep`命令对`tcpdump`的结果进行处理，结果可能是下面这个样子：
    root@kali:~# tcpdump -XX -v broadcast 
    tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
    13:09:44.640827 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.110.2 tell kali, length 28
    0x0000: ffff ffff ffff 0800 279c 70b1 8100 000d ........'.p.....
    0x0010: 0806 0001 0800 0604 0001 0800 279c 70b1 ............'.p.
    13:09:45.637062 ARP, Ethernet (len 6), IPv4 (len 4), Request who-has 192.168.110.2 tell kali, length 28
    0x0000: ffff ffff ffff 0800 279c 70b1 8100 000d ........'.p.....
    0x0010: 0806 0001 0800 0604 0001 0800 279c 70b1 ............'.p.
下面两张图片将会为你展示，如何在Linux下通过改变VID将`VID Tag`由13变为4094：
     printf “%x” 4094 ===> ffe
正如你看到的，代表VID的字节从`0x000d`变为`0x0ffe`，即从13变为4094。
## 0x06 脚本实现
你是否还记得 “Are you going to Scarborough
Fair?”这段文本，如果我们想将这段文本作为Payload发送，那么现在你应该知道了如何去实现它。
    echo "Are you going to Scarborough Fair?" | xxd -c 10
    0000000: 4172 6520 796f 7520 676f Are you go
    000000a: 696e 6720 746f 2053 6361 ing to Sca
    0000014: 7262 6f72 6f75 6768 2046 rborough F
    000001e: 6169 723f 0a             air?.
我们将第一行作为示例：
    0000000: 4172 6520 796f 7520 676f Are you go
    byte=char