# PartiSan: Fast and Flexible Sanitization via Run-Time Partitioning

**Authors:**
- Julian Lettner
- Dokyung Song
- Taemin Park
- Per Larsen
- Stijn Volckaert
- Michael Franz

**Contact Information:**
- Email: {jlettner, dokyungs, tmpark, perl, stijnv, franz}@uci.edu
- Affiliation: University of California, Irvine, USA

## Abstract
Sanitizers are effective in detecting security vulnerabilities in C/C++ code that static analysis might miss. However, the high memory and processing requirements of sanitizers often limit their use to internal pre-release builds, with sanitized builds rarely being released publicly. We introduce PartiSan, a run-time partitioning technique that enhances the performance and flexibility of sanitizers. By dividing the execution into sanitized and unsanitized slices, PartiSan allows for dynamic adjustment of sanitization levels based on user preferences and system capabilities. This approach enables developers to define custom sanitization policies, ensuring that sanitization overhead remains within acceptable limits while still providing robust security. Additionally, PartiSan can be used to enhance fuzzing efficiency by selectively applying sanitization during testing.

**Keywords:** Security, Privacy, Software Security, Application Security

## 1. Introduction
Despite the availability of modern, safer programming languages, the extensive legacy codebase in C/C++ necessitates continued efforts to identify and fix memory corruption vulnerabilities. While static analysis is useful, many bugs can only be detected through dynamic analysis tools like sanitizers. These tools instrument programs to detect issues such as memory corruption and undefined behavior, but they come with significant overheads, making them impractical for release builds. 

In a recent experiment, the Tor Project attempted to release sanitizer-enabled "hardened" builds, but this was discontinued due to performance overhead and user confusion. PartiSan addresses these challenges by allowing for adaptive sanitization. It enables the release of a single build that can adjust its sanitization level based on the host system's capabilities, thereby reducing overhead and eliminating the need for multiple build versions.

## 2. Background
PartiSan leverages the LLVM compiler infrastructure, which includes several sanitizers. Specifically, we focus on AddressSanitizer (ASan) and UndefinedBehaviorSanitizer (UBSan). ASan detects a wide range of memory errors, including out-of-bounds accesses and use-after-free bugs. UBSan identifies 22 types of undefined behaviors, such as integer overflows and uninitialized pointer usage. Both sanitizers can be applied selectively, making them suitable for our framework, which dynamically skips sanitization based on runtime policies.

## 3. Design
The primary goal of PartiSan is to reduce the runtime overhead of sanitizers. This is achieved by creating multiple variants of each function, some of which are sanitized and others that are not. The PartiSan system consists of a modified compiler and a runtime component that partitions the execution into sanitized and unsanitized slices based on a defined policy.

### System Overview
1. **Compiler Modifications:**
   - The compiler generates multiple variants of each function, one sanitized and one unsanitized.
   - A "variant pointer array" is created to hold pointers to the currently active function variants.
   - Control flow is modified to call functions through an additional level of indirection, using the variant pointer array.

2. **Runtime Component:**
   - The runtime selects and activates function variants based on the configured partitioning policy.
   - Three partitioning policies are supported:
     - **Random Partitioning:** Variants are selected randomly.
     - **Profile-Guided Partitioning:** Variants are selected based on profiling data.
     - **Expected-Cost Partitioning:** Variants are selected to keep the sanitization overhead below a specified threshold.

### Use Case: Improving Fuzzing Efficiency
PartiSan can also enhance fuzzing by selectively applying sanitization only when the fuzzer discovers inputs that cause crashes or uncover new execution paths. This reduces the overall fuzzing overhead while still providing comprehensive coverage.

## 4. Contributions
- **Framework Description:** We present PartiSan, a framework for dynamic run-time partitioning of program execution into sanitized and unsanitized fragments.
- **Prototype Implementation:** A fully-fledged prototype implementation is provided, along with three concrete run-time partitioning policies.
- **Performance Evaluation:** Our evaluation shows that PartiSan significantly reduces the overhead of ASan and UBSan while still detecting the majority of vulnerabilities.
- **Fuzzing Efficiency:** PartiSan improves fuzzing throughput by selectively applying sanitization during testing.

## 5. Conclusion
PartiSan offers a flexible and efficient solution for integrating sanitizers into release builds. By dynamically adjusting the level of sanitization, it ensures that security is maintained without compromising performance. This makes it a valuable tool for both developers and end users, enabling more widespread adoption of sanitizers in production environments.

---

This revised version aims to improve clarity, coherence, and professionalism, making the text more accessible and engaging for the reader.