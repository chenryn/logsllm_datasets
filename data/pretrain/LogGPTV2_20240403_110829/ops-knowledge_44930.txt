User: 请撰写一个Python脚本，用于监控指定服务器的CPU及内存使用情况并发送邮件报警
Assistant: 抱歉，作为AI语言模型，我无法访问本地服务器上的系统指标和发送电子邮件。 但是，您可以使用Python的psutil和smtplib模块来监视CPU和内存使用情况，并使用您的电子邮件提供商（例如Gmail或Outlook）发送警报电子邮件。以下是一个示例脚本，它监视CPU和内存使用情况，并发送电子邮件警报：

```
import psutil
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage

# Set up email parameters
my_email = 'your_email@example.com'
to_email = 'recipient_email@example.com'
password = 'your_email_password'
smtp_server = 'smtp.example.com'

# Check server usage function
def check_server_usage():
  # Get CPU and memory usage
  cpu_usage_percent = psutil.cpu_percent()
  memory_usage_percent = psutil.virtual_memory().percent

  # Send email if usage goes over limit
  if cpu_usage_percent > 80 or memory_usage_percent > 80:
    # Set up email contents
    message = MIMEMultipart()
    message['From'] = my_email
    message['To'] = to_email
    message['Subject'] = 'Server Usage Alert'
    message.attach(MIMEText(f'CPU usage: {cpu_usage_percent}%\nMemory usage: {memory_usage_percent}%'))

    # Attach a screenshot of system monitor to email
    with open('sys_monitor.png', 'rb') as f:
      image_data = f.read()
    image = MIMEImage(image_data)
    message.attach(image)

    # Send email
    with smtplib.SMTP(smtp_server, 587) as server:
      server.starttls()
      server.login(my_email, password)
      server.sendmail(my_email, to_email, message.as_string())
      print('Email sent successfully!')

# Run check_server_usage every 30 minutes
if __name__ == "__main__":
    while True:
        check_server_usage()
        time.sleep(1800)
```

此脚本将每30分钟检查一次服务器的CPU和内存使用情况，并在使用量超过80％时发送电子邮件警报。脚本还附带系统监视器的屏幕截图作为附件。请注意，您需要在本地运行此脚本，并在本地安装必要的库和依赖项。示例脚本中的SMTP服务器和端口号根据您使用的电子邮件服务提供商而异。