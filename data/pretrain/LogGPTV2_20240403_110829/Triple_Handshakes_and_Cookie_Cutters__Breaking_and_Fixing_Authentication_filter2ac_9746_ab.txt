missing the last empty fragment in the chunked encoding.
For authentication, almost all websites rely on cookies,
which are name-value pairs set by servers in the Set-Cookie
header and sent back by clients in the Cookie header of
subsequent requests. The cookie store is shared between HTTP
and HTTPS connections, opening up a variety of attacks.
III-A COOKIE INTEGRITY. Modern web security policies are
expressed in terms of origin, i.e., the combination of protocol,
domain and port. Hence, HTTP requests and JavaScript inter-
actions are unrestricted within the same origin, and strictly
regulated across different origins [57]. In contrast, cookie
policies rely on domain and path; furthermore, cookies may
be set for any domain sufﬁx and path preﬁx of the current
page, e.g. http://y.x.com/a can set cookies with domain
x.com and path /. This discrepancy causes major problems:
• Protocol: since there is no separation between HTTP and
HTTPS, by default, cookies set on encrypted connec-
tions are also attached to plaintext requests, in plain sight
of the attacker. To prevent this, the secure ﬂag can be
sent when setting the cookie to indicate to the browser
100
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
never to send this cookie unencrypted. This protects the
conﬁdentiality of cookies, but not their integrity, as it
still possible to overwrite secure cookies over HTTP.
• Domain: domains preﬁxed with a dot will match any
subdomain. Thus, a request to a.x.com attaches cook-
ies set for .x.com, but not those set for b.x.com. A
page may set cookies on any of its own domain sufﬁx
that is not a public (such as “com” or “co.uk”), leading
to related-domain attacks.
• Port: since the port number is ignored, and even if a
website is only served over TLS, an attacker can still
use some unencrypted port to tamper with its cookies.
Cookies with the same name but different domain or path are
stored separately; all matching cookies are sent back in the
Cookie header in an unspeciﬁed order. Finally, there is a limit
on the number of cookies that can be stored for each top-level
domain name (e.g. x.co.uk). Beyond this limit, typically
around 1000, older cookies are automatically deleted. Thus,
an attacker can reliably delete legitimately set cookies.
Cookie forcing, cookie ﬁxation, and cookie tossing all refer
to tampering with cookies, either from the network or from
a related subdomain. These issues have been well known for
years, and many proposals address them [12, 18, 24], but there
is still no way to defend against cookie forcing by a network
attacker that works on all current browsers. Experimentally,
we were able to force sessions on the top 10 Alexa websites
in the US, despite the mitigations deployed on some of them.
Worse, the impact of such forcing attacks has increased
considerably recently. For instance, many websites rely on
single sign-on services for authentication. If the session on
the identity provider (such as Facebook, Twitter or Google)
is replaced with the attacker’s, the victim may unwittingly
associate his accounts on many websites with the attacker’s
identity, even after leaving the attacker’s network. Furthermore,
in modern websites, many operations are performed asyn-
chronously. Thus, if a session is forced onto the browser before
such an action, it may be associated with the attacker’s account
without any feedback to the user. Finally, some browsers rely
on web login forms to provide features such as synchronization
of tabs, bookmarks and stored passwords. We found that login
CSRF attacks could trigger such features; even though a user
conﬁrmation dialog is shown with the account name of the
forced session, it provides a tempting phishing target.
III-B THE COOKIE CUTTER ATTACK. As discussed in §II,
most HTTP software does not enforce proper TLS termination,
letting the attacker truncate a message at any TLS-fragment
boundary by closing the underlying TCP connection. If the
attacker controls the length of some of the contents of the
message, he may chose a speciﬁc truncation point. Although
this pattern has been exploited before to delete entire HTTP re-
quests or to truncate message bodies [13, 52], we demonstrate
new truncation attacks within headers of HTTP messages.
A network attacker can trigger a request with any path and
parameters (in fact, any website can trigger such requests to
any other website) and inject data into its Cookie header us-
ing forcing techniques, thus controlling the TLS fragmentation
of the request. In response headers, when a redirection occurs,
TABLE I.
TLS TRUNCATION IN BROWSERS
Android 4.2.2 Browser
Android Chrome 27
Android Chrome 28
Android Firefox 24
Safari Mobile 7.0.2
Opera Classic 12.1
Internet Explorer 10
In-Header
truncation







Content-Length Missing last chunked
ignored
fragment ignored














for instance after a successful login, the new URL given in the
Location header typically includes parameters taken from
the request (e.g., the page the user was trying to access before
logging in). Such parameters are often under attacker control,
and allow targeted truncation in response headers as well.
Truncating Responses Recall
that browsers do not at-
tach cookies set with the secure ﬂag to HTTP requests.
In the Set-Cookie header, however, the ﬂag occurs af-
ter the cookie, so the attacker can selectively truncate it
and redirect
the user to an unencrypted URL to recover
the cookie value. Concretely, consider a login form at
https://x.com/login?go=P that sets a session cookie
and redirects the user to https://x.com/P. The headers
of the response are as follows:
HTTP/1.1 302 Redirect
Location: https://x.com/P
Set-Cookie: SID=[AuthenticationToken]; secure
Content-Length: 0
The attacker can chose P such that the ﬁrst TLS fragment ends
just before ‘;’ and close the connection before the second
fragment is sent, allowing the cookie to be stored without the
secure ﬂag (and thus, visible to the attacker over HTTP). We
successfully mounted this attack against Google Accounts.
The attack is possible because some browsers, including
Chrome, Opera, and Safari, accepted incomplete HTTP re-
sponses (missing an empty line at the end of headers). We
reported the vulnerability to each vendor; their responses are
given in §IX-A. Table I summarizes the possible truncations in
current browsers; we focus on mobile versions because they are
more likely to connect to untrusted networks. While header-
truncation attacks have mostly been ﬁxed, chunked-body-
truncation attacks remain possible on HTML and JavaScript.
Truncating Requests While most servers do not accept
truncated headers, some do accept a truncated body. In the
case of POST requests, typically used when submitting a form,
the parameters are sent in the body of the request. This is
most notably the case of requests sent through Apache SAPI
modules, such as PHP. The main difﬁculty when truncating a
POST request is to guess the length of the body parameters,
which may be difﬁcult since they often contain user input.
Consider a scenario where the victim invites one of her
friend PI:EMAIL on a social network where the
attacker wants to access her proﬁle. The attacker registers the
domain domain.co and monitors the victim as she accesses
the invitation page (for instance, by inspecting the length of
the returned page). The query to truncate is of the form:
101
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
POST /invite.php HTTP/1.1
Host: socialnetwork.com
Content-Type: application/x-www-form-urlencoded
Cookie: SID=X; ForcedByAttacker=Z
Content-Length: 64
csrf_token=Y&invite=PI:EMAIL
When the query is sent, the attacker truncates it such that the
invitation will be sent to bob@domain.co. The victim gets
a blank page due to the truncation, and may try the request
again. Meanwhile, the attacker receives credentials to access
the victim’s proﬁle. We were able to mount this attack on a
popular social network that uses Apache and PHP.
III-C TLS CONNECTION INTEGRITY. Because most users
connect
to websites using plain HTTP, even if a website
redirects all unencrypted connections to HTTPS, it is easy for
a man in the middle to forward HTTPS contents over HTTP
to the user, rewriting all links and pointers to encrypted pages.
This attack, called SSL stripping [37], is very popular thanks
to simple tools to mount it on public wireless networks.
To protect against SSL stripping, several browsers support
HTTP Strict Transport Security [30] (HSTS), which introduces
a Strict-Transport-Security header for websites to
indicate that the browser should always connect to its domain
over TLS, regardless of the port. The header includes a
max-age value, specifying how long this indication should
be enforced, and an optional includeSubDomains ﬂag,
indicating that the policy also applies to all subdomains.
HSTS has several known weaknesses. The ﬁrst problem
is bootstrapping: the user may use HTTP the ﬁrst time it
connects to the website, before receiving the HSTS header in
the response. This bootstrapping problem is typically mitigated
by browsers that use a pre-registered HSTS domain list for
sensitive websites that wish to opt-in to this feature.
Second, HSTS preserves cookie integrity only when enabled
on the top level domain with the includeSubDomains ﬂag,
and if the user visits this domain ﬁrst [18]. This is an expensive
requirement for large websites, as it forces all contents for
the entire domain to be served over HTTPS. We found that
not a single website from the top 10,000 Alexa list is using
the includeSubDomains option on their top-level domain,
even though some are indeed using HSTS. Thus, in practice,
HSTS is not used to prevent cookie forcing attacks.
We found a new attack to bypass HSTS on some clients.
A network attacker can truncate the Strict-Transport-
Security header after the ﬁrst digit of the max-age pa-
rameter. If the client accepts and processes this header, the
HSTS entry for that website will expire after at most ten
seconds, after which HTTP connections to the domain will
be allowed again, even if the domain has pre-registered to the
HSTS domain list on the browser.
Concretely, to attack x.com, the man-in-the-middle takes
any HTTP request for any server and redirects it to a page on
x.com that returns a parameter-dependent Location header
followed by the Strict-Transport-Security header.
We successfully tested the attack on Chrome, Opera, and
Safari. We further note that by using this attack ﬁrst, a network
Fig. 1. The TLS Handshake
attacker can re-enable SSL stripping, cookie forcing, and the
cookie secure ﬂag truncation attack above even on websites
that enable HSTS, defeating the purpose of this standard.
For websites that do not deploy HSTS, browser extensions
have been developed to force the use of HTTPS on a given
list of websites. However, it is worth noting that such ad
hoc mechanisms have their own ﬂaws. For example, HTTPS
Everywhere [2] allows HTTP connections when the server port
is non-standard. Cookie policies ignore the port number, so
various attacks like cookie forcing remain possible.
IV. TLS PROTOCOL: CONNECTIONS, SESSIONS, EPOCHS
The TLS protocol is commonly used over TCP connections
to provide conﬁdentiality and integrity for the bytestreams
exchanged between a client (C) and a server (S). Next, we
recall the main subprotocols of TLS and the attacks directly
relevant to this paper. (The online version discusses other prior
attacks on handshake integrity.) We assume some familiarity
with TLS; we refer to the standard [23] for the details and to
other papers for a discussion of previous proofs [35, 43] and
attacks [40, 22].
IV-A FULL HANDSHAKE. Once a TCP connection has been
established between a client and a server, the TLS handshake
protocol begins. The goals of the handshake are to authenticate
the server and (optionally) the client; to negotiate protocol
versions, ciphersuites, and extensions; to derive authenticated
encryption keys for the connection; and to ensure agreement
on all negotiated parameters. (A ciphersuite selects a key
exchange mechanism KEX ALG for the handshake and an
authenticated encryption mechanism ENC ALG for the record
protocol.)
Figure 1 shows the full handshake with mutual authenti-
cation. First, the client sends a client hello message with a
maximum protocol version pvmax, a random nonce cr, and
a set of proposed ciphersuites and extensions. The server
chooses a version pv, a ciphersuite, and a subset of these
extensions, and responds with its own nonce sr and a session
102
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:56 UTC from IEEE Xplore.  Restrictions apply. 
identiﬁer sid. The server then sends its X.509 certiﬁcate chain
cert S and public key pk S. Depending on KEX ALG, it may send
additional key materials in a key exchange message kex S. It
may also send a certiﬁcate request message if it requires client
authentication.
The client responds with its own certiﬁcate chain cert C and
public key pk C (if required), followed by its own key exchange
message kex C. If the client sends its certiﬁcate, it also sends
a signed hash sig C of the current log (log 1−8, obtained by
concatenating messages 1–8) in a certiﬁcate verify message.
At this point in the protocol, both the client and the server
can compute a shared pre-master secret pms from kex C and
kex S, then use pms along with the nonces to derive a master
secret ms, and use ms to derive keys for the connection and to
verify the handshake integrity; these computations are detailed
below. To complete the handshake, the client signals a change
of keys with a change cipher spec (CCS) message followed
by a ﬁnished message that contains the client verify data cvd
obtained by MACing the current handshake log (log 1−9) with
key ms. Similarly, the server sends its own CCS and a ﬁnished
message that contains the server verify data svd, obtained by
MACing the whole handshake log 1−9,11. (The CCS messages
are not included in the logs.)
When the client
is not authenticated, messages 5, 7, 9
are omitted. When the server does not contribute to the key
exchange, e.g. with RSA, message 4 is omitted.
RSA Handshake
If the key exchange in the negotiated
ciphersuite is RSA,
the calculations go as follows, where
log 1−8 is the log before message 9, log 1−9 is the log before
message 11, and log 1−9,11 is the log before message 13. (The
server key exchange value kex S is not used.)
pms = [pvmax]|[46 bytes randomly generated by C]
sig C = signed(sk C, log 1−8)
kex C = rsa(pk S, pms)
ms = prf(pms, “master secret”, cr|sr)
keys = prf(ms, “key expansion”, sr|cr)
cvd = prf(ms, “client finished”, hash(log1−9))
svd = prf(ms, “server finished”, hash(log1−9,11))
DHE Handshake If the negotiated key exchange is ephemeral
Difﬁe-Hellman (DHE), then S chooses group parameters (p, g)
and a fresh key pair (KS, gKS ); it sends (p, g, gKS ) in kex S,
signed along with cr and sr with its private key sk S. The
client generates its own key pair (KC, gKC ) and responds with
kex C = gKC . Both parties compute pms = gKC∗KS . The rest
of the computations are the same.
kex S = signed(sk S, cr|sr|p|g|g
kex C = g
pms = g
KC mod p
KC∗KS mod p (with leading 0s stripped)
KS mod p)
Other variations Besides RSA and DHE, mainstream TLS
implementations support variations of the Difﬁe-Hellman key
exchange implemented using elliptic curves. The handshake
for these is similar to DHE, but with some notable dif-
ferences. For example, most ECDHE implementations only
Fig. 2. Abbreviated TLS Handshake
accept named curves within a ﬁxed set, whereas DHE allows
the server to choose arbitrary DH group parameters.
Other key exchanges are less common on the web but
useful in other applications. In TLS-PSK, the client and server
authenticate one another using a pre-shared key instead of cer-
tiﬁcates. In TLS-SRP, the client uses a low-entropy password
instead of a certiﬁcate. In DH anon, both client and server
remain anonymous, so the connection is protected from passive
eavesdroppers but not from man-in-the-middle attackers.
IV-B THE RECORD PROTOCOL. Once established, a TLS
connection provides two independent channels, one in each