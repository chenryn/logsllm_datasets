类层次的体系由两个主要的类家族构成，即内置的类和用户定义的类。到目前为止，你已经
术语“用户定义的类”不是来自语言标准的术语。从技术上来讲，当我说“用户定义的类”
(defclass name (direct-superclass-name*)
这类动态类型面向对象语言经验的程序员们则不觉得为已有类添加新行为有任何奇怪之处。
奇怪。在这些语言里，类的所有方法必须被定义为该类定义的一部分。但是具有使用诸如Smalltak和Objective-C
(slot-specifier*))
 DEFCLASS
重新审视面向对象：
什么是“用户定义的类”
www.TopSage.com
类
---
## Page 195
带有两个槽customer-name和balance，如下所示：
类的DEFCLASS形式中指定的所有槽和它的全部基类中指定的槽的并集。
以和SETF一起使用来设置对象中某个槽的值。
问。SLOT-VALUE接受一个对象和一个槽的名字作为参数并返回给定对象中该命名槽的值。它可
每个实例。实例中的每个槽都是一个可以保存值的位置，该位置可以通过函数SLOT-VALUE来访
17.2
这样：
此，所有用户定义的类都是同样含有全部内置类的单一类层次体系的一部分。
这确保了每一个新类都将最终追溯到STANDARD-OBJECT。STANDARD-OBJECT又是T的子类，因
出，那么新类将直接成为STANDARD-OBJECT的子类。任何列出的类必须是其他用户定义的类，
作为MAKE-INSTANCE的参数，该函数用来创建用户定义类的新实例。
名字处在独立的名字空间里，因此你可以让类、函数和变量全部带有相同的名字。你将使用类名
CLASS作为元类的类，并且由于缺少一个更好的术语，我将把它们称为“用户定义的”。
是STANDARD-OBJECT子类的新类。特别的是，宏DEFSTRUCT同样定义了新的类，但那在很大
语言标准定义的但却没有扩展STANDARD-OBJECT。更复杂的事情在于，用户也有可能定义不
类可能会带来更多的困惑，因为诸如INTEGER和STRING这样的内置类也是标准的，它们是由
描述这些类的完美术语，因为实现可能以相同的方式定义了特定的类。不过，将它们称为标准
STANDARD-CLASS的那些类的方式，你根本不需要关心这点。“用户定义的”并不是一个用来
改进用于定义类。因此在本章里，我将只谈论那些由DEFCLASS定义的使用默认的STANDARD-
程度上是为了向后兼容
在最小情况下，一个槽描述符可以只是一个名字。例如，你可以将bank-account类定义为
在暂时省略槽描述符的情况下，前一章里你用到的某些类的DEFCLASS形式可能看起来像
178
①跟为函数和变量命名一样，你可以使用任何符号作为类名的这个说法并不是很正确，你不能使用由语言标准所定
一个类也从它的所有基类中继承槽描述符，因此，实际存在于任何对象中的槽的集合是一个
DEFCLASS形式的大部分是由槽描述符的列表组成的。每个槽描述符定义的槽都属于该类的
那些direct-superclass-name指定了该新类将成为其子类的那些类。如果没有基类被列
我将在17.8节里讨论在direct-superclass-name中列出多于一个直接基类的含义。
(defclass checking-account(bank-account)
(defclass bank-account()...)
与函数和变量一样，你可以使用任何符号作为一个新类的名字。类的名字与函数和变量的
义的名字。你将在第21章里看到如何避免这样的名字冲突。
(defclass savings-account(bank-account)...)
槽描述符
第17章
重新审视面向对象：类
DEFSTRUCT出现在CLOS之前，并且当CLOS被集成进语言时曾被
www.TopSage.com
.
---
## Page 196
MAKE-INSTANCE调用。
INSTANCE的关键字形参的名字并使该参数的值保存在槽中。另一个选项：initform可以让你指
式中向槽描述符添加选项来实现的：通过：initarg选项，你可以指定一个随后作为MAKE-
象就非常好。Common Lisp提供了三种方式来控制槽的初始值。前面两种是通过在DEFCLASS形
17.3对象初始化
何尝试获取未绑定槽的值的操作都将会报错，因此你必须在读取一个槽之前先设置它：
PRINT-OBJECT方法的例子，它使得一个特定类的对象可以被打印成更具说明性的形式。
字和一些诸如该对象的内存地址这样的可区别值。在第23章里，你将看到一个关于如何定义
印表示的其余部分是由实现定义的，但通常是一些类似于上面所显示的输出，其中包括该类的名
STANDARD-OBJECT打印方法使用了#<>语法，这将导致读取器在它试图读取该对象时报错。
STANDARD-OBJECT上的方法。每一个对象都可以被打印成随后可被读回的形式，因此
打印形式取决于广义函数PRINT-OBJECT。在本例中，可应用的方法是由实现提供的特化在
余额。借助该定义，你可以用MAKE-INSTANCE来创建新的bank-account对象。
②另一种影响槽的初始值的方式是通过DEFCLASs的:default-initargs选项。当—-个特定的MAKE-INSTANCE
由于你不能对一个带有未绑定槽的对象做太多事，因此如果可以创建带有预先初始化槽的对
使用刚刚给出的bank-account定义，创建出的新对象将带有未绑定（umbound）的槽。
MAKE-INSTANCE的参数是想要实例化的类的名字，而返回的值就是新的对象。
(make-instance ‘bank-account) → #
类对象。
现在你可以访问这些槽的值了：
(slot-value
(defclass bank-account ()
心:default-initargs.
调用没有给定该值时，该选项用来指定将被求值的形式以及提供特定初始化形参的参数。目前你不需要担
setf
balance)}
(customer-name
(slot-
*account*‘balance)
value
*account*
customer-
www.TopSage.com
→1000
name)
"John Doe"）
→*ACCOUNT*
→
17.3对象初始化
1000
一个对象的
179
任
---
## Page 197
INSTANCE主方法负责槽的初始化工作。由于你不想干扰这些工作，最常见的添加定制初始化代码
个方法。
槽的值来初始化另一个槽。对于这种情况你需要在广义函数INITIALIZE-INSTANCE上定义一
初始化形式可以是任何Lisp表达式，但它却无法访问正在初始化的对象，因此它不能基于一个
的计数器的值。
改customer-name槽描述符并添加一个新的槽account-number，它被初始化为一个永远递增
时生成一个不同的值一一初始化形式对于每个对象都被重新求值。为了体会这些技术，你可以修
误，因为它只在没有提供初始化参数时被求值一次。你还可以使用初始化形式在每次它们被求值
customer-name槽将是未绑定的，并且在你设置它之前尝试读取它的操作将会报错。
值由：initform选项指定的形式而得到。但如果你没有指定:customer-name参数，那么
户名和初始余额，并为余额提供一个零美元的默认值，你可以写成这样：
表。例如，如果你想要修改bank-account的定义，从而允许MAKE-INSTANcE的调用者传递客
基于它们的：initarg和：initform选项，在STANDARD-OBJECT上特化的INITIALIZE-
180
多数时候，：initarg和：initform选项的组合可以很好地初始化一个对象。不过，尽管
如果你想要确保在创建账户的同时也提供客户名，那么你可以在初始化形式中产生一个错
现在你可以创建一个账户并同时指定所有的槽值：
(defclass bank-account ()
包含诸如：initarg或：initform等选项的槽描述符被写成以槽的名字开始后跟选项的列
(defclass bank-account ()
(defvar *account-numbers* 0)
(slot-value *account*
"aoa uuor： ← (aweu-iauoasno: *aunoooe antea-ao[s)
(defparameter *account*
({customer-name
(make-instance
((customer-name
:initform (incf *account-numbers*))))
(account-number
(balance 
((n'aueu yauonsno e Xddns isnna roiia) wzogatu:
(balance
:init
:initarg :customer-name
:initform 0)))
:initarg :customer-name)
:initform
第17章
carg :balance
重新审视面向对象：类
'bank-account :customer-name "John Doe" :balance l000))
*balance)
www.TopSage.com
→1000
↓。
---
## Page 198
数来指定奖励百分比的INITIALIZE-INSTANCE方法来实现这一点：
开户时银行会支付一定比例的初始余额作为奖励，那么你可以像下面这样使用一个接受关键字参
那么在创建该类的实例时，该参数就成为了一个MAKE-INSTANCE的合法参数。例如，有时在你
们没有指定任何&key参数。
键字参数，但其对特定的关键字参数却没有要求。这样，每一个方法都必须指定&key，哪怕它
INITIALIZE-INSTANCE指定的形参列表包含了&keY，从而允许个别方法可以指定它们自己的关
值来设置account-type槽。
以将你的类定义改成下面这样，其中添加了一个没有选项的account-type槽：
槽并需要根据该账户的初始余额将其设置成：gold、
的方式是定义一个特化在你的类上的:after方法。?例如，假设你想要添加一个account-type
②在未习惯使用附加方法之前，你可能会犯的错误是，在INITIALIZE-INSTANCE上定义了一个方法而没有使
另一方面，如果特化在某个特定类上的INITIALIZE-INSTANCE方法指定了一个&keY参数，
为了保持该方法的形参列表与广义函数一致，形参列表中的&key是必不可少的。广义函数
(defmethod initialize-instance :after ((account bank-account) &key)
是在Python中定义一个_init_方法。
(defmethod initialize-instance :after ((account bank-account)
然后你可以为INITIALIZE-INSTANCE定义一个:after方法，根据保存在balance槽中的
(defclass bank-account ()
(remove-method #'initialize-instance 
事情。
REMOVE-METHOD和FIND-METHOD来移除不想要的主方法。某些开发环境可能提供图形用户接口来实现同样的
用:after限定符。如果你这样做了，你将得到一个覆盖了默认方法的新的主方法。你可以使用函数
(find-method #initialize-instance () (list (find-class 'bank-account))))
(when opening-bonus-percentage 
({customer-name
account-type))
(account-number
(balance 
{incf (slot-value account
(ad= balance 100000)
'balance)
www.TopSage.com
:silver
:gold)
 &key opening-bonus-percentage)
、:silver或:bronze这些值中的一个。你可
17.3对象初始化
181
---
## Page 199
数可能是个好主意。通过这种方式，你可以在balance上为这些子类提供不同的方法或使用附加
琐的SLOT-VALUE。
使它成为可SETF的，如果你想让余额是只读的。
知道他们被假定只通过已发布的函数型API来管理对象，那么你可以提供一个balance函数但不
能想让余额的所有修改通过你将提供的其他函数访问到，例如deposit和witharaw。如果客户
部代码修改槽的方式。?对于bank-account类的用户来说能够得到当前余额就可以了，但你可
内部表示改变的情况下保留其行为。并且使用这样一个函数的代码将无需修改而继续工作。
另一方面，如果你定义了一个用来访问该槽的balance函数，那么随后你可以重定义它，在类的
了类定义来移除该槽或是保存新的列表到旧的槽时,直接访问balance槽的代码将很可能被打断。
的定义，不再保存数值形式的当前余额，而是保存一个带有时间戳的提款和存款列表。在你改变
问槽会将你的代码过于紧密地绑定到你的类的具体结构上。例如，假设你打算改变bank-account
人都知道，直接访问一个对象的槽（或字段或成员变量）可能导致脆弱的代码。问题在于直接访
做的其他任何事都可以用这两个函数来实现。不过，每一位了解优秀的面向对象编程实践原则的
17.4
bank-aCCOunt时成为了MAKE-INSTANCE的合法参数。
最后，使用访问函数可以使你的代码更整齐，因为它帮助你在大量情况下都不必使用相当繁
另一个使用访问函数而不是直接通过SLOT-VALUE来访问槽的优点在于，它可以让你限制外
182
①当然，提供一个访问函数并不能真的产生任何限制，因为其他代码仍然可以使用SLOT-VALUE来直接访问槽。
 不过，如果你知道你打算定义的bank-account的子类，那么将balance定义成一个广义函
很容易定义一个函数来读取balance槽的值。
 CL-USER> (defparameter *acct* (make-instance