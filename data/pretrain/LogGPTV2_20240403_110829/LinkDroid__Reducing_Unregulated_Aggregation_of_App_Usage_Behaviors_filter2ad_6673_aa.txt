title:LinkDroid: Reducing Unregulated Aggregation of App Usage Behaviors
author:Huan Feng and
Kassem Fawaz and
Kang G. Shin
LinkDroid: Reducing Unregulated Aggregation 
of App Usage Behaviors
Huan Feng, Kassem Fawaz, and Kang G. Shin, University of Michigan
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/feng
This paper is included in the Proceedings of the 24th USENIX Security SymposiumAugust 12–14, 2015 • Washington, D.C.ISBN 978-1-939133-11-3Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXLinkDroid: Reducing Unregulated Aggregation of App Usage Behaviors
Huan Feng, Kassem Fawaz, and Kang G. Shin
Department of Electrical Engineering and Computer Science
The University of Michigan
{huanfeng, kmfawaz, kgshin}@umich.edu
Abstract
Usage behaviors of different smartphone apps capture
different views of an individual’s life, and are largely in-
dependent of each other. However, in the current mobile
app ecosystem, a curious party can covertly link and ag-
gregate usage behaviors of the same user across different
apps. We refer to this as unregulated aggregation of app-
usage behaviors. In this paper, we present a fresh per-
spective of unregulated aggregation, focusing on moni-
toring, characterizing and reducing the underlying linka-
bility across apps. The cornerstone of our study is the
Dynamic Linkability Graph (DLG) which tracks app-
level linkability during runtime. We observed how DLG
evolves on real-world users and identiﬁed real-world ev-
idence of apps abusing IPCs and OS-level identifying in-
formation to establish linkability. Based on these obser-
vations, we propose a linkability-aware extension to cur-
rent mobile operating systems, called LinkDroid, which
provides runtime monitoring and mediation of linkabil-
ity across different apps. LinkDroid is a client-side
solution and compatible with the existing smartphone
ecosystem.
It helps end-users “sense” this emerging
threat and provides them intuitive opt-out options.
1 Introduction
Mobile users run apps for various purposes, and exhibit
very different or even unrelated behaviors in running dif-
ferent apps. For example, a user may expose his chatting
history to WhatsApp, mobility traces to Maps, and po-
litical interests to CNN. Information about a single user,
therefore, is scattered across different apps and each app
acquires only a partial view of the user. Ideally, these
views should remain as ‘isolated islands of information’
conﬁned within each of the different apps. In practice,
however, once the users’ behavioral information is at the
hands of the apps, it may be shared or leaked in an ar-
bitrary way without the users’ control or consent. This
makes it possible for a curious adversary to aggregate
usage behaviors of the same user across multiple apps
without his knowledge and consent, which we refer to as
unregulated aggregation of app-usage behaviors.
In the current mobile ecosystem, many parties are in-
terested in conducting unregulated aggregation, includ-
ing:
• Advertising Agencies embed ad libraries in different
apps, establishing an explicit channel of cross-app
usage aggregation. For example, Grindr is a geoso-
cial app geared towards gay users, and BabyBump
is a social network for expecting parents. Both apps
include the same advertising library, MoPub, which
can aggregate their information and recommend re-
lated ads, such as on gay parenting books. However,
users may not want this type of unsolicited aggre-
gation, especially across sensitive aspects of their
lives.
• Surveillance Agencies monitor all aspects of the
population for various precautionary purposes,
some of which may cross the ‘red line’ of individu-
als’ privacy. It has been widely publicized that NSA
and GCHQ are conducting public surveillance by
aggregating information leaked via mobile apps, in-
cluding popular ones such as Angry Birds [3]. A
recent study [26] shows that a similar adversary is
able to attribute up to 50% of the mobile trafﬁc to
the “monitored” users, and extract detailed personal
interests, such as political views and sexual orienta-
tions.
• IT Companies in the mobile industry frequently
acquire other app companies, harvesting vast user
base and data. Yahoo alone acquired more than 10
mobile app companies in 2013, with Facebook and
Google following closely behind [1]. These acquisi-
tions allow an IT company to link and aggregate be-
haviors of the same user from multiple apps without
the user’s consent. Moreover, if the acquiring com-
USENIX Association  
24th USENIX Security Symposium  769
pany (such as Facebook) already knows the users’
real identities, usage behaviors of all the apps it ac-
quires become identiﬁable.
These scenarios of unregulated aggregation are realis-
tic, ﬁnancially motivated, and are only becoming more
prevalent in the foreseeable future. In spite of this grave
privacy threat, the process of unregulated aggregation is
unobservable and works as a black box — no one knows
what information has actually been aggregated and what
really happens in the cloud. Users, therefore, are largely
unaware of this threat and have no opt-out options. Exist-
ing proposals disallow apps from collecting user behav-
iors and shift part of the app logic (e.g., personalization)
to the mobile OS or trusted cloud providers [7, 17]. This,
albeit effective, is against the incentive of app developers
and requires construction of a new ecosystem. There-
fore, there is an urgent need for a practical solution that
is compatible with the existing mobile ecosystem.
In this paper, we propose a new way of addressing the
unregulated aggregation problem by monitoring, charac-
terizing and reducing the underlying linkability across
apps. Two apps are linkable if they can associate their
usage behaviors of the same user. This linkability is the
prerequisite of conducting unregulated aggregation and
represents an upper-bound of the potential threat. Re-
searchers studied linkability under domain-speciﬁc sce-
narios, such as on movie reviews [19] and social net-
works [16]. In contrast, we focus on the linkability that
is ubiquitous in the mobile ecosystem and introduced
by domain-independent factors, such as device IDs, ac-
count numbers, location and inter-app communications.
Speciﬁcally, we model mobile apps on the same device
as a Dynamic Linkability Graph (DLG) which moni-
tors apps’ access to OS-level identifying information and
cross-app communication channels. DLG quantiﬁes the
potential threat of unregulated aggregation and allows us
to monitor the linkability across apps during runtime.
We implemented DLG as an Android extension and
observed how it evolved on 13 users during a period of
47 days. The results reveal an alarming view of the app-
level linkability in the wild. Two random apps (installed
by the same user) are linkable with a probability of 0.81.
Speciﬁcally, 86% of the apps a user installed are directly
linkable to the Facebook app, namely, his real iden-
tity. In particular, we found that apps frequently abuse
OS-level information and inter-process communication
(IPC) channels in unexpected ways, establishing the link-
ability that is unrelated to app functionalities. For exam-
ple, we found that many of the apps requesting account
information collect all of the user’s accounts even when
they only need one to function correctly. We also no-
ticed that some advertising agencies, such as Admob and
Facebook, use IPCs to share user identiﬁers with other
apps, completely bypassing system permissions and con-
trols. Furthermore, we identiﬁed cases when different
apps write and read the same persistent ﬁle in shared stor-
age to exchange user identiﬁers. The end-users should
be promptly warned about these unexpected behaviors to
reduce unnecessary linkability.
Based on the above observations, we propose
LinkDroid, a linkability-aware extension to Android
which provides runtime monitoring and mediation of the
linkability across apps. LinkDroid introduces a new di-
mension to privacy protection on smartphones. Instead
of checking whether some app behavior poses direct pri-
vacy threat, LinkDroid warns users about how it implic-
itly affects the linkability across apps. Practicality is a
main driver for the design of LinkDroid. It extends the
widely-deployed (both runtime and install-time) permis-
sion model on the mobile OS that end-users are already
familiar with. Speciﬁcally, LinkDroid provides the fol-
lowing privacy-enhancing features:
• Install-Time Obfuscation: LinkDroid obfuscates
device-speciﬁc identiﬁers that have no inﬂuence on
most app functionalities, such as IMEI, Android ID,
etc. We perform this during install-time to maintain
the consistency of these identiﬁers within each app.
• Runtime Linkability Monitoring: When an app
tries to perform a certain action that introduces ad-
ditional linkability, users will receive a just-in-time
prompt and an intuitive risk indicator. Users can
then exercise runtime access control and choose any
of the opt-out options provided by LinkDroid.
• Unlinkable Mode: The user can start an app in un-
linkable mode. This will create a new instance of
the app which is unlinkable with other apps. All
actions that may establish a direct association with
other apps will be denied by default. This way, users
can enjoy ﬁner-grained privacy protection, unlink-
ing only a set of app sessions.
We evaluated LinkDroid on the same set of 13 users
as in our measurement and found that LinkDroid re-
duces the cross-app linkability substantially with little
loss of app performance. The probability of two random
apps being linkable is reduced from 0.81 to 0.21, and the
percentage of apps that are directly linkable to Facebook
drops from 86% to 18%. On average, a user only needs
to handle 1.06 prompts per day in the 47-day experiments
and the performance overhead is marginal.
This paper makes the following contributions:
1. Introduction of a novel perspective of defending
against unregulated aggregation by addressing the
underlying linkability across apps (Section 2).
770  24th USENIX Security Symposium 
USENIX Association
2. Proposal of the Dynamic Linkability Graph (DLG)
which enables runtime monitoring of cross-app
linkability (Section 3).
3. Identiﬁcation of real-world evidence of how apps
abuse IPCs and OS-level information to establish
linkability across apps (Section 4).
4. Addition of a new dimension to access control
based on the runtime linkability, and development
of a practical countermeasure, LinkDroid, to de-
fend against unregulated aggregation (Section 5).
2 Privacy Threats: A New Perspective
In this section, we will ﬁrst introduce our threat model
of unregulated aggregation and then propose a novel per-
spective of addressing it by monitoring, characterizing
and reducing the linkability across apps. We will also
summarize the explicit/implicit sources of linkability in
the current mobile app ecosystem.
2.1 Threat Model
In this paper, we target unregulated aggregation across
app-usage behaviors,
i.e., when an adversary aggre-
gates usage behaviors across multiple functionally-
independent apps without users’ knowledge or consent.
In our threat model, an adversary can be any party that
collects information from multiple apps or controls mul-
tiple apps, such as a widely-adopted advertising agency,
an IT company in charge of multiple authentic apps, or a
set of malicious colluding apps. We assume the mobile
operating system and network operators are trustworthy
and will not collude with the adversary.
2.2 Linkability: A New Perspective
There are many parties interested in conducting unregu-
lated aggregation across apps. In practice, however, this
process is unobservable and works as a black box — no
one knows what information an adversary has collected
and whether it has been aggregated in the cloud. Ex-
isting studies propose to disable mobile apps from col-
lecting usage behaviors and shift part of the app logic
to trusted cloud providers or mobile OS [7, 17]. These
solutions, albeit effective, require building a new ecosys-
tem and greatly restrict functionalities of the apps. Here,
we address unregulated aggregation from a very differ-
ent angle by monitoring, characterizing and reducing the
underlying linkability across mobile apps. Two apps
are linkable if they can associate usage behaviors of the
same user. This linkability is the prerequisite of conduct-
ing unregulated aggregation, and represents an “upper-
bound” of the potential threat.
In the current mobile
Type
Android ID
IMEI
MAC
Account
Contacts
2013-3
80%
61%
28%
24%
21%
2013-10
84%
64%
42%
29%
26%
2014-8
87%
65%
51%
32%
33%
2015-1
91%
68%
55%
35%
37%
Table 1: Apps are increasingly interested in requesting persis-
tent and consistent identifying information during the past few
years.
app ecosystem, there are various sources of linkability
that an adversary can exploit. Researchers have stud-
ied linkability under several domain-speciﬁc scenarios,
such as movie reviews [19] and social networks [16].
Here, we focus on the linkability that is ubiquitous and
domain-independent. Speciﬁcally, we group its con-
tributing sources into the following two fundamental cat-
egories.
OS-Level Information The mobile OS provides apps
ubiquitous access to various system information, many
of which can be used as consistent user identiﬁers across
apps. These identiﬁers can be device-speciﬁc, such as
MAC address and IMEI, user-speciﬁc, such as phone
number or account number, or context-based, such as lo-
cation or IP clusters. We conducted a longitudinal mea-
surement study from March 2013 to January 2015, on the
top 100 free Android apps in each category. We excluded
the apps that are rarely downloaded, and considered only
those with more than 1 million downloads. We found
that apps are getting increasingly interested in request-
ing persistent and consistent identifying information, as
shown in Table 1. By January 2015, 96% of top free apps
request both the Internet access and at least one persis-
tent identifying information. These identifying vectors,
either explicit or implicit, allow two apps to link their
knowledge of the same user at a remote side without even
trying to bypass on-device isolation of the mobile OS.
Inter-Process Communications The mobile OS pro-
vides explicit Inter-Process Communication (IPC) chan-
nels, allowing apps to communicate with each other and
perform certain tasks, such as export a location from
Browser and open it with Maps. Since there is no exist-
ing control on IPC, colluding apps can exchange iden-
tifying information of the user and establish linkabil-
ity covertly, without the user’s knowledge. They can
even synchronize and agree on a randomly-generated se-
quence as a custom user identiﬁer, without accessing any
system resource or permission. This problem gets more
complex since apps can also conduct IPC implicitly by
reading and writing shared persistent storage (SD card
USENIX Association  
24th USENIX Security Symposium  771
3.2 Deﬁnitions and Metrics
Linkable Two apps a and b are linkable if there is a
path between them. In Fig. 15, app A and F are linkable,
app A and H are not linkable.
Gap is deﬁned as the number of nodes (excluding the
end nodes) on the shortest path between two linkable
apps a and b.
It represents how many additional apps
an adversary needs to control in order to link informa-
tion across a and b. For example, in Fig. 15, gapA,D = 0,
gapA,E = 1, gapA,G = 2.
Linking Ratio (LR) of an app is deﬁned as the number
of apps it is linkable to, divided by the number of all
installed apps. LR ranges from 0 to 1 and characterizes
to what extent an app is linkable to others. In DLG, LR
equals to the size of the Largest Connected Component
(LCC) this app resides in, excluding itself, divided by the
size of the entire graph, also excluding itself:
LRa =
size(LCCa) − 1
size(DLG) − 1
Linking Effort (LE)
of an app is deﬁned as the Link-
ing Effort (LE) of an app as the average gap between
it and all the apps it is linkable to. LEa characterizes
the difﬁculty in establishing linkability with a. LEa = 0
means that to link information from app a and any ran-
dom app it is linkable to, an adversary does not need ad-
ditional information from a third app.
LEa = ∑
b∈LCCa
b=a
gapa,b
size(LCCa) − 1
LR and LE describe two orthogonal views of the
DLG. In general, LR represents the quantity of links,
describing the percentage of all installed apps that are
linkable to a certain app, whereas LE characterizes the
quality of links, describing the average amount of ef-
fort an adversary needs to make to link a certain app
In Fig. 15, LRA = 6/8, LRH = 1/8;
with other apps.
LEA = 0+0+0+1+1+2
= 4/6, LEH = 0.
7−1
GLR and GLE Both LR and LE are deﬁned for a sin-
gle app, and we also need two similar deﬁnitions for
the entire graph. So, we introduce Global Linking Ra-
tio (GLR) and Global Linking Effort (GLE). GLR repre-
sents the probability of two randomly selected apps be-
ing linkable, while GLE represents the number of apps
an adversary needs to control to link two random apps.
GLR = ∑
a
LRa
size(DLG)
Figure 1: An illustrative example of DLG. Edges of different
types represent linkability introduced by different sources.
and databases). As we will show in Section 4, these ex-
ploitations are not hypothetical and have already been
utilized by real-world apps.
3 Dynamic Linkability Graph
The cornerstone of our work is the Dynamic Linkability
Graph (DLG). It enables us to monitor app-level linka-
bility during runtime and quantify the linkability intro-
duced by different contributing sources. In what follows,
we will elaborate on the deﬁnition of DLG, the linka-
bility sources it considers, and describe how it can be
implemented as an extension of Android.
3.1 Basic Concepts
We model linkability across different apps on the same
device as an undirected graph, which is called the Dy-
namic Linkability Graph (DLG). Nodes in DLG repre-
sent apps and edges represent linkability introduced by
different contributing sources. DLG monitors the linka-
bility during runtime by tracking the apps’ access to var-
ious OS-level information and IPC channels. An edge
exists between two apps if they accessed the same identi-
fying information or engaged in an IPC. Fig. 15 presents
an illustrative example of DLG.
DLG presents a comprehensive view of the linkability
across all installed apps. An individual adversary, how-
ever, may only observe a subgraph of the DLG. For ex-
ample, an advertising agency only controls those apps
(nodes) that incorporate the same advertising library; an
IT corporate only controls those apps (nodes) it has al-
ready acquired. In the rest of the paper, we focus on the
generalized case (the entire DLG) instead of considering
each adversary individually (subgraphs of DLG).
772  24th USENIX Security Symposium 
USENIX Association
GLE =
1
∑a size(LCCa) − 1 ∑
b
gapb,c
∑
c∈LCCb
c=b
In graph theory, GLE is also known as the Charac-
teristic Path Length (CPL) of a graph, which is widely
used in Social Network Analysis (SNA) to characterize
whether the network is easily negotiable or not.
3.3 Sources of Linkability
DLG maintains a dynamic view of app-level linkability