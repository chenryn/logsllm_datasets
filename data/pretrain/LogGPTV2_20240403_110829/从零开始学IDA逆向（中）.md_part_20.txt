kd> !process -1 0
PROCESS 840dd830 SessionId: 1 Cid: 0b28 Peb: 7ffd5000 ParentCi
d: 0980
DirBase: 3ec2d4c0 ObjectTable: 95585948 HandleCount: 253.
Image: OSRLOADER.exe
50.6 手动添加符号文件
通过观察，这个驱动程序没有加载符号。
91109000 9110f000 HelloWorldDriver (deferred)
由于编译生成了pdb，可以使windbg加载符号。
而在符号文件夹下，都是模块名称加上.pdb。
335
从零开始学IDA逆向 50 Kernel Debugging
图 50-31 符号文件夹
添加一个文件夹叫做HelloWorldDriver.pdb。
图 50-32 添加HelloWorldDriver.pdb文件夹
然而问题是，在这些文件夹下面的子文件夹名都是一个不同的长串数字，那
么怎么生成它呢。
图 50-33 子文件夹
336
从零开始学IDA逆向 50 Kernel Debugging
创建好HelloWorldDriver.pdb文件夹后，转到windbg然后输入命令：
!sym noisy
.reload /f HelloWorldDriver.sys
图 50-34 文件夹名
然后windbg会显示出没有找到的文件夹，然后创建该文件夹，将符号文件
复制到文件夹下，再输入：
.reload /f HelloWorldDriver.sys
然后输入lm命令，显示的是作者进行编译的TEST文件夹。
91109000 9110f000 HelloWorldDriver (private pdb symbols) c:\us
ers\ricnar\desktop\test\objfre_win7_x86\i386\HelloWorldDriver.pdb
再通过X命令可以查看符号文件中包含的符号：
kd> x HelloWorldDriver!*
9110c004 HelloWorldDriver!__security_cookie_complement = 0
x6eeffa5e
9110b000 HelloWorldDriver!KeTickCount = struct _KSYSTEM_TIM
E
9110c000 HelloWorldDriver!__security_cookie = 0x911005a1
9110d03e HelloWorldDriver!GsDriverEntry (struct _DRIVER_OB
JECT *, struct _UNICODE_STRING *)
9110a006 HelloWorldDriver!DriverUnload (struct _DRIVER_OBJ
ECT *)
9110d005 HelloWorldDriver!__security_init_cookie (void)
9110a01a HelloWorldDriver!DriverEntry (struct _DRIVER_OBJE
CT *, struct _UNICODE_STRING *)
9110a058 HelloWorldDriver! ?? ::FNODOBFM::`string' ()
9110a046 HelloWorldDriver! ?? ::FNODOBFM::`string' ()
9110d050 HelloWorldDriver!_IMPORT_DESCRIPTOR_ntoskrnl = 
9110a040 HelloWorldDriver!DbgPrint ()
9110b004 HelloWorldDriver!_imp__DbgPrint = 
9110b008 HelloWorldDriver! ntoskrnl_NULL_THUNK_DATA = 
9110d064 HelloWorldDriver!_NULL_IMPORT_DESCRIPTOR = 
上面就是符号和对应的地址，如果需要在windbg中设置断点，就和为了方
便需要指定进程。
bp /p @$proc HelloWorldDriver!DbgPrint
不要使用bp HelloWorldDriver!DriverUnload，虽然在这里不是很
重要，但是如果在系统函数上这样设置断点可能会暂停几千次，每个使用它的进
程都会暂停，而指定进程的话，只会在当前进程调用的时候才会暂停。
接下来观察是否奏效。
kd> bp /p @$proc HelloWorldDriver!DbgPrint
然后输入g命令并按回车键，等待触发断点，但是没有触发，作者认为可能
是当前并不是驱动的进程，所以作者切换了进程，然后：
kd> ba e1 HelloWorldDriver!DbgPrint
kd> g
Breakpoint 2 hit
HelloWorldDriver!DbgPrint:
9111c040 ff2504d01191 jmp dword ptr [HelloWorldDriver!_imp__
DbgPrint (9111d004)]
kd> !process -1 0
PROCESS 83fc4a20 SessionId: none Cid: 0004 Peb: 00000000 Paren
tCid: 0000
DirBase: 00185000 ObjectTable: 87c01a88 HandleCount: 476.
Image: System
然后程序触发断点停下来，发现是 system 进程调用了 print，所以作者
338
从零开始学IDA逆向 50 Kernel Debugging
不知道调用的进程是哪一个。如果实在不清楚的话可以使用 ba e1 或者 bp 命
令。
50.7 使用 IDA 加载
现在开始使用 IDA，在 IDA6.8 中打开 HelloWorldDriver.sys，如果
pdb 符号文件也在该目录下的话也会自动加载，但是如果 IDA 询问路径的话，
读者需要自行寻找符号文件并且加载。
图 50-35 加载HelloWorldDriver.sys
在IDA中打开菜单DEBUGGER-SWITCH DEBUGGER，选择windbg。
339
从零开始学IDA逆向 50 Kernel Debugging
图 50-36 选择windbg
然后在DEBUGGER-DEBUGGER OPTIONS-SET SPECIFIC OPTIONS中
选择Kernel mode debugging。
在PROCESS OPTIONS选项卡中选择连接字符串：
com:port=\\.\pipe\kd_[0690]_Windows_Seven_Ultimate_-_i386_-_1,
pipe
读者可以从VirtualKD中获取这个名称。
图 50-37 pipe name
图 50-38 选择连接字符
完成之后点击OK确定。
Windbg应该触发断点暂停，如果没有的话关闭windbg。
340
从零开始学IDA逆向 50 Kernel Debugging
图 50-39 关闭windbg
在IDA中打开菜单debugger-attach to process。
图 50-40 附加进程
如图 50-40必须出现KERNEL进程，如果不出现的话，可能之前的某些步
骤出错，或者因为某些原因导致机器无法连接。
341
从零开始学IDA逆向 50 Kernel Debugging
图 50-41 加载类似模块
图 50-42 开始调试
如果 IDA 中的 idb 数据库与驱动相同，也就是没有改过，还是叫 HelloW
orldDriver.idb，IDA 应该检测出正在加载一个类似的模块，选择 Same 接
受。
一旦加载成功就开始调试，界面下方的就是 windbg 栏，可以输入 windb
g命令。
现在可以在IDA中设置断点。
图 50-43 在IDA中设置断点
而这里使用 windbg 的 g 命令不会使程序继续运行，必须使用 IDA 的 F9
键。
342
从零开始学IDA逆向 50 Kernel Debugging
图 50-44 触发断点
所以现在远程进程又开始运行，可以像之前一样启动或者停止这个驱动，现
在它使触发断点暂停。
目前运行状况良好。
50.8 Windows 10 平台编译驱动
在另外一台机器上，作者安装的是Visual Studio 2015和wdk 10。
343
从零开始学IDA逆向 50 Kernel Debugging
图 50-45 VS 2015
图 50-46 level4
编译的话应该没有问题，但是应该像图 50-46中一样降低Warning Lev
el。
驱动设置中需要将目标系统改为Windows 7。
图 50-47 目标系统
344
从零开始学IDA逆向 50 Kernel Debugging
编译的时候应该不会报错。
1>------ Rebuild All started: Project: KMDF Driver1, Configuration:
Release Win32 ------
1> Building 'KMDF Driver1' with toolset 'WindowsKernelModeDriver1
0.0' and the 'Desktop' target platform.
1> Stamping Release\KMDFDriver1.inf [Version] section with DriverV
er=10/27/2017,12.49.58.404
1> Driver.c
1> KMDF Driver1.vcxproj -> c:\Users\rnarvaja\Documents\Visual Stu
dio 2015\Projects\KMDF Driver1\Release\KMDFDriver1.sys
1> KMDF Driver1.vcxproj -> c:\Users\rnarvaja\Documents\Visual Stu
dio 2015\Projects\KMDF Driver1\Release\KMDFDriver1.pdb (Full PDB)
1> Done Adding Additional Store
1> Successfully signed: c:\Users\rnarvaja\Documents\Visual Studio
2015\Projects\KMDF Driver1\Release\KMDFDriver1.sys
1>
1> .........................
1> Signability test complete.
1>
1> Errors:
1> None
1>
1> Warnings:
1> None
1>
1> Catalog generation complete.
1> c:\Users\rnarvaja\Documents\Visual Studio 2015\Projects\KMDF D
river1\Release\KMDF Driver1\kmdfdriver1.cat
1> Done Adding Additional Store
1> Successfully signed: c:\Users\rnarvaja\Documents\Visual Studio
2015\Projects\KMDF Driver1\Release\KMDF Driver1\kmdfdriver1.cat
1>
========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========
在IDA中删除断点，并且继续运行接触系统冻结。
345
从零开始学IDA逆向 50 Kernel Debugging
图 50-48 复制到远程系统
将最新编译的驱动复制到远程系统。
使用OSR Loader查找并且注册该驱动，启动程序，之后再停止，通过De
bug View可以看到这些信息。当然驱动不会在IDA中暂停，因为它是另外一
个驱动，不过可以从IDA中止当前的进程，选择DEBUGGER DETACH FROM P
ROCESS，然后重新使用windbg加载。或者再打开一个IDA加载这个新的驱动
和它的符号文件。
346
从零开始学IDA逆向 50 Kernel Debugging
图 50-49 加载驱动
图 50-50 使用IDA调试
重新配置IDA，调试器选择windbg，选择内核模式，并且设置连接字符串。
启动加载之后会弹出
图 50-51 Same
还是选择Same。
347
从零开始学IDA逆向 50 Kernel Debugging
图 50-52 _DriverEntry
在函数清单中查找_DriverEntry。
调用的位置如图 50-53。
设置断点如图 50-54，然后继续运行，然后再重新启动驱动程序，如果继
续如图 50-51询问时，选择same。
图 50-53 调用_DriverEntry
348
从零开始学IDA逆向 50 Kernel Debugging
图 50-54 _DriverEntry设置断点
图 50-55 触发断点
像之前一样触发断点暂停。
这就是系统内核调试的开始，下面的几个教程将是关于这个主题的视频教程，
不过还是要看是否需要教授一些理论的内容。
349
从零开始学IDA逆向 51 示例驱动逆向分析
51 示例驱动逆向分析
51.1 DRIVER_OBJECT
在开始视频教程之前，作者打算通过对前文中的驱动和其它驱动进行编译和
逆向，来使读者熟悉它们的运行方式。
在第50章的那个简单的驱动中，它只是一个非常容易分析的hello wor
ld，而在使用旧版的WDK 7.1编译时，读者可以发现它是一个非常简单的程序。
而使用WDK 10编译时，在初始化之前有一些函数，但是结果是一样的，功能上
没有区别。
图 51-1就是使用WDK 7.1编译的旧版驱动的DriverEntry入口。
图 51-1 DriverEntry
350
从零开始学IDA逆向 51 示例驱动逆向分析
图 51-2 _DRIVER_OBJECT
从图 51-1这2个星号可以发现这两个参数都是指针，也就是每个4字节，
其中一个指向_DRIVER_OBJECT结构体，另一个指向_UNICODE_STRING结构
体。
图 51-3 _DRIVER_OBJECT Members
它们并不在结构体选项卡中，但是不要忘记在 LOCAL TYPES 中有时会有
更多的结构体，读者也需要查看那里。
图 51-4 结构体选项卡
351
从零开始学IDA逆向 51 示例驱动逆向分析
图 51-5 Local Type选项卡
如图 51-5就是这个结构体，右键单击选择SYNCRONIZE TO IDB将其导
入数据库。
51.2 DriverUnload
图 51-6 EAX + 34h
由于这个结构体的地址传入EAX，那么EAX + 34h一定是它的某个字段，
按T键查看。
352
从零开始学IDA逆向 51 示例驱动逆向分析