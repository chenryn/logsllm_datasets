Pr(cid:2)VIEWC
Π(D) ∈ S(cid:3)≤ exp(ε)·Pr(cid:2)VIEWC
Π(D(cid:48)) ∈ S(cid:3)+negl(λ).
The deﬁnition can be expanded to a malicious setting by
replacing the semi-honest parties P and semi-honestly secure
protocol Π with malicious parties and a maliciously secure
protocol. Note that the negligible function negl(λ) can be
omitted for protocols providing information-theoretic security
(such as standard secret sharing), however, our implementa-
tion in SCALE-MAMBA provides computational security
(due to the online phase as described in Section 2.2).
2162    29th USENIX Security Symposium
USENIX Association
Protocol
Rounds
Interactive Operations
Rec
IntRand
IntMod2m
IntTrunc
IntLT
Int2FL
FLAdd
FLMul
FLLT
1
0
O(1)
4
4
1
0
O(t)
4t + 1
4b− 2
logv + 13
O(logv)
8v + 10
6
logv(2v− 3)− 11
O(vlogv + x)
11
4v + 5x + 4logx + 13
Table 3: Complexity of MPC protocols for b-bit integers, t-bit
truncation modulus, and ﬂoats with v-bit signiﬁcand and x-bit
exponent [5, 6, 17, 30].
B Equality of Deﬁnitions 5 and 6
We show equality of Deﬁnitions 5 and 6 with proof by
cases. Consider range R = [rl,ru) and its position rela-
tive to the median µ for Deﬁnition 5: Case i) For ru  µ we have rankD(rl) > n/2,
thus, uµ = n/2−rankD(rl). Case iii) Otherwise, the range con-
tains the median, i.e., uµ = 0.
Note that it sufﬁces to look at rl in case i) (resp., ru in case
ii)), as rankD(rl) ≤ rankD(ru) and the range endpoint closest
to µ deﬁnes the utility for the range. Deﬁnition 6 uses the
same cases and is an alternative way to express Deﬁnition 5.
C Complexity of MPC Protocols
Table 3 lists the complexities for MPC protocols typically
measured in the number of rounds and interactive operations,
where rounds describes the count of sequential interactive op-
erations, and interactive operations (e.g., reconstruct sharing,
multiplications) require each party to send messages to all
other parties. We omit integer addition/subtraction as these
operations are non-interactive and the parties can perform
them locally. Share reconstruction is denoted with Rec. Note
that Choose((cid:104)a(cid:105),(cid:104)b(cid:105),(cid:104)c(cid:105)) is implemented with one multipli-
cation and two additions (b + (a− b)· c), and that IntRand
uses correlated randomness already exchanged in the ofﬂine
phase (hence zero interaction and rounds).
D Precision and Privacy
In general, DP mechanisms operate on reals, whereas actual
implementations are limited to the precision of physical ma-
chines. However, limited precision can lead to privacy viola-
tions: As shown by Mironov [53], the Laplace mechanism is
vulnerable to ﬁnite precision as the set of possible outcomes
can differ between neighboring databases due to irregularities
Protocol
Eigner et al. [30]
EM∗ & Weightsln(2)
EM∗ & Weightsln(2)/2d , d = 2
EM∗ & Weights∗
|U|
5
105
106
107
105
106
107
105
106
107
Running time
42.3 s
11.3 s
13.5 s
15.4 s
33.7 s
39.8 s
46.8 s
64.3 s
77.3 s
91.8 s
( 7.7 s)
( 9.2 s)
(10.7 s)
(23.6 s)
(27.8 s)
(31.4 s)
(41.6 s)
(52.4 s)
(61.1 s)
Table 4: Running times for 3 parties in a 1 Gbits/s LAN for
this work and Eigner et al. [30]. We report the average of 20
runs on t2.medium instances with 4 vCPUs, 2 GB RAM (and
r4.2xlarge instances with 8 vCPUs, 61 GB RAM). Eigner et
al. [30] evaluated on a 3.20 GHz, 16 GB RAM machine.
caused by ﬂoating point implementations. Their proposed
mitigation is to perform “snapping”, roughly, they clamp the
noisy result to a ﬁxed range and ensure that they output is
evenly spaced. Recent work by Ilvento [41] extend this line of
study to the exponential mechanism, which is also vulnerable
to ﬁnite precision. The suggested mitigation is switching from
base e to base 2 to perform precise arithmetic by, e.g., for in-
teger utility functions, approximating ε as η = −log2(x/2y)
for integers x,y such that x/2y ≤ 1.
Interestingly, their mitigation is similar to our efﬁcient se-
cure computation. Our implementation is based on an in-
teger utility function and Weightsln(2) uses base 2 for efﬁ-
ciency reasons and is not vulnerable to such attacks. We
can strengthen Weightsln(2)/2d , with ε = ln(2)/2d, by using
randomized rounding for non-interger utilities as described
in [41, Section 3.2.2] if we omit 1/2d from ε and include it
as a factor in the utility deﬁnition (making the utility non-
integers). For Weights∗, which supports arbitrary ε, careful
choices for ε as described above mitigate attacks on limited
precision.
Implementation Note: SCALA-MAMBA’s ﬂoating point
numbers (sfloat) are associated with a statistical security
parameter κ satisfying κ < b− 2· lv where b is the bit-length
of the modulus and lv is the bit-length of the signiﬁcand.
Security with κ = 40 is the default for b = 128 and we use
lv = 40 in our evaluation, to support large utility values.
E Additional Evaluation
The online and ofﬂine phase are integrated in newer versions
of SCALE-MAMBA, thus, we only provide measurements
for the total protocol, i.e., ofﬂine as well as online phase.
Running time in a LAN: We compare our running time to
USENIX Association
29th USENIX Security Symposium    2163
Protocol
EM∗ & Weightsln(2)
EM∗ & Weightsln(2)/2d ,
d=2
EM∗ & Weights∗
|U|
105
106
107
105
106
107
105
106
107
Communication
m = 3
m = 6
m = 10
178 MB
202 MB
222 MB
402 MB 1.41 GB
448 MB 1.54 GB
497 MB 1.75 GB
634 MB 1.38 GB 4.73 GB
748 MB 1.63 GB 5.58 GB
866 MB 1.88 GB 6.39 GB
664 MB 1.56 GB 5.59 GB
785 MB 1.83 GB 6.57 GB
907 MB 2.11 GB 7.59 GB
Table 5: Communication cost (WAN with 100 Mbits/s and
100 ms latency): Data sent per party, average of 20 runs for
m ∈ {3,6,10} parties and |U| ∈ {105,106,107}.
Eigner et al. [30], which only report running times in a LAN,
in Table 4. Eigner et al. [30] evaluated their protocol with a
sum utility function on a 3.20 GHz, 16 GB RAM machine.
They are linear in the size of the universe and compute weights
for a very small universe of only 5 elements. We, on the other
hand, are sublinear in the size of the universe as we compute
weights per subrange and use efﬁcient alternatives to costly
secure exponentiation. We evaluated universe sizes at least 5
order of magnitudes larger than [30] with comparable running
times: Our running time for Weightsln(2), Weightsln(2)/2d is
below [30] on rather modest t2.medium instances (4 vCPUs,
2 GB RAM) for universe size |U| = 105. Even if we also
consider weights per element (i.e., subrange size 1) for any
decomposable utility function our protocols compute at least 6
times more weights per second on t2.medium instances. (E.g.,
for k = 10,|U| = 105 and Weights∗ we compute 50 weights
in 64.3 seconds, i.e., 0.78 weights per second, compared to
0.12 for [30].)
We also evaluated our protocol on r4.2xlarge instances (8
vCPUs, 61 GB RAM), see seconds in parenthesis in Table 4.
In a LAN the running time compared to t2.medium instances
is reduced by at least 30%, however, in a WAN setting the
latency plays a more important role than powerful hardware
and the running times are much closer. Thus, we only present
running times for t2.medium instances in a WAN in Section 5.
Communication: The communication for the maximum
number of steps ((cid:100)log10|U|(cid:101)) in a WAN (100 Mbits/s with
100 ms latency) is detailed in Table 5. For 3 parties and one bil-
lion universe elements, the communication for Weightsln(2)
is 222 MB per party, for Weightsln(2)/2d it is 866 MB, and
Weights∗ requires 907 MB. We stress that this communication
is required for malicious security in each round as provided
by the SCALE-MAMBA implementation. MP-SPDZ [45], a
fork of SCALE-MAMBA’s predecessor SPDZ2, also provides
semi-honest security. MP-SPDZ with semi-honest security
requires much less communication, e.g., only around 25 MB
Work
Nissim et al. [58]
max
k=0,..,n
Dwork and Lei [27]
Pettai and Laud [59]
This work
max
(cid:17)
γ
2 +t−k−1
Error bound α with
Pr[abs. error ≤ α] ≥ 1− β
e−kε max
t=0,..,k+1
(cid:16)
2 +t − d n
d n
(cid:17)
γ
2 +i − d n
(cid:16) cu−cl
d(cid:100)0.75n(cid:101)−d(cid:100)0.25n(cid:101)
j + max(U)−min(U)
i∈{+1,−1}·(cid:106) ln(|U|/β)
γ
√
εexp(Ω(ε
j))
(cid:107)(cid:12)(cid:12)(cid:12)d n
(cid:12)(cid:12)(cid:12)
2
n1/3
ε
Table 6: DP median methods in the central model with
γ = ln(1/β)/ε. Data D ∈ U n is sorted and the error terms
are simpliﬁed to ease comparison: assuming expected sensi-
tivity [27], shortened approximation error term [59] (see [58,
Th. 4.2]), using one selection step for this work. Here, [cl,cu]
is the presumed clipping range for the j elements closest to
the median [59].
for 3 parties, |U| = 105, and Weights∗. However, the run-
ning time in a WAN was some minutes slower compared to
SCALE-MAMBA in our tests (presumably due to SCALE-
MAMBA’s batched communication rounds and integrated
online and ofﬂine phases, where parallel threads create ofﬂine
data “just-in-time” [6, 7]). Thus, regarding our protocol, one
can choose efﬁciency w.r.t. communication (MP-SPDZ) or
running time (SCALE-MAMBA).
Cost of Malicious Security: To achieve malicious secu-
rity, via consistency checks as detailed in Section 4.6, we
require additional running time and communication. For the
maximum number of steps with one billion universe ele-
ments in a WAN (100 Mbits/s with 100 ms latency) EM∗
with Weights∗ additionally needs around 10/10/12 minutes
and 0.65/1.4/5 GB for 3/6/10 parties. EM∗ with Weightsln(2)
or Weightsln(2)/2d
(d = 2) additionally requires around
1.3/1.5/2 minutes and 115/260/825 MB for 3/6/10 parties.
F Accuracy Bounds: Related Work for Multi-
party DP Median
We list theoretical accuracy bounds for related work, i.e., com-
putation of the DP median in the central model supporting
many parties, in Table 6. Note that the table entries, except
for this work, are the sensitivity of the method multiplied by
factor γ9 (and with an additional error term for [59]). Hence,
the ﬁrst entry is the deﬁnition of smooth sensitivity for the
median (multiplied by γ). For an empirical comparison of
this work with related work we refer to Section 5.3.
9The related works draw additive noise r from zero-centered Laplace
distribution with scale s/ε and sensitivity s (Laplace mechanism, Deﬁni-
tion 2). Since Pr[|r| < t · s/ε] = 1− exp(−t) [29, Fact 3.7], we can bound the
absolute error |r| as in Table 6 by setting β = exp(−t),γ = t/ε = ln(1/β)/ε.
2164    29th USENIX Security Symposium
USENIX Association