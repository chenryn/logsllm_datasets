这同样适用于架构。例如，一个投票程序在少量数据的情况下工作
得很好，但数据量增大时响应时间就变得难以接受。按照中断或事
件来组织所有的工作，在开始时会工作得很好，但后来可能突然出
现问题。美丽的架构会考虑可能的增长方向，并能够支持这种增
长。
抵制熵增
863
---
## Page 865
美丽的架构设计了一条最容易维护的路线，随着时间的推移仍能够
保持架构，所以延缓了“系统熵增定律"的效果。该定律指出，系统
会随着时间的推移变得越来越乱。维护者必须适应该架构，这样变
更才能与架构保持一致，不增加系统的。
一种方法是利用敏捷开发的隐喻（Metaphor）概念，它是一种简单
的方式，说明架构像什么。另一种方法是使用大量的文档，并以解
雇相威胁，虽然这种方法难以取得长久的效果。然而，这通常与工
具有关系，特别是那些生成系统的工具。美丽的架构必须保持美
丽。
这些原则是高度相关的。只有在你实现了自动传播时，一处一个事
实才行得通，而自动传播又只有在架构考虑到构建时才有效果。类
似地，构建引擎和最少量机制支持一处一个事实。抵制熵增是长时
间保持架构的要求，它靠的是架构包含构建方法并支持自动传播。
而且，如果忘记考虑系统将以何种方式增长，将导致架构不稳定，
最终会在极端但可预见的环境下失败。将最少量机制与构建引擎的
观点结合起来，就意味着美丽的架构通常包含一组有限的模式，同
时支持构建任意的系统扩展，这相当于“按模式扩展”。简而言之，
美丽的架构用更少的机制做更多的工作。
本书由DiomidisSpinellis和GeorgiosGousios汇编而成，当你阅读本
书时，你可以通过每章提供的具体例子，寻找这些原则并思考它们
的意义。你也可以寻找违反这些原则的情况，想想这是否导致架构
变得丑陋，或涉及某些更高的原则。
在写这篇序时，作者问我能否说说如何才能成为好的架构师。我笑
了起来。如果我知道的话......但是接着我从自己的经历中想到，有
一种特效方法可以帮助人们成为美丽的架构师。这种方法就是永
远不要相信你最近创建的系统是唯一的，应设法寻找不同方法来解
决相同类型的问题。本书提供的美丽架构的示例就能帮助你朝着实
现这个目标迈出一步。
山或者是锻炼更多，吃得更少。
前言
出版本书的想法是在2007年确立的，它是获奖的畅销书《Beautiful
Code》[ll-的姊妹篇。在这本书中，虽然范围和目的不一样，但关注
864
---
## Page 866
点是类似的：让最优秀的设计师和架构师来描述他们所选的软件架
构，剥并他们作品的各层，展示他们如何让软件实现功能性、可靠
性、易用性、高效率、可维护性、可移植性，当然，还有优雅性。
为了编成这本书，我们联系了一些著名软件项目的主要架构师和一
些不太著名但高度创新的软件项目的主要架构师。许多人快速回
应，将引人思索的想法寄回给我们。有些想法甚至让我们大吃一
惊，他们建议不要写具体的系统，而是调查架构在软件工程中产生
影响的深度和厂度。
当本书的所有作者听说这本书的版税将捐给MedécinsSans
Frontieres（无国界医生组织）时，都感到十分高兴。MedecinsSans
Frontieres是一个国际人道主义援助组织，为困难的人提供紧急医疗
救助。
本书的组织
我们围绕5个主题领域来组织本书的内容：概述、企业应用、系
统、最终用户应用和编程语言。很明显，缺少有关桌面软件架构的
章节，但这不是故意的。我们联系了50多位软件架构师，这个结果
让我们吃惊不小。难道真的没有美丽桌面软件架构的漂亮例子吗？
或者那些天才的架构师避而不谈架构，是因为忙着应付需求，为应
用堆彻更多的功能？我们非常期望听听你对于这些问题的见解。
第一部分：论架构
本书的第一部分探讨了软件架构的广度和范围，以及它对软件的并
发和演进意味着什么。
第1章由JohnKlein和DavidWeiss编写，他们从架构的品质考虑和架
构结构的角度，对架构进行了探讨。
第2章由PeteGoodliffe编写，他写了一篇寓言，揭示了软件架构如何
影响系统的演进和开发者在项目中的参与情况。
第二部分：企业级应用架构
企业级系统是许多组织机构的IT支柱，它们不仅巨大，而且常常是
度身定制的软件集，一般由许多分散的组件构成。它们服务于大量
的、支持事务的工作，必须延伸到它们所支持的企业的各个角落，
865
---
## Page 867
时刻准备着适应不断变化的业务需求。在为这样的系统设计架构
时，可伸缩性、正确性、稳定性和可扩展性是最重要的关注点。本
第3章由JimWaldo编写，展示了构建大规模多人在线游戏所需的架
构技术。
第4章由MichaelNygard编写，介绍了一个多阶段、多地点的数据处
理系统的架构，展示了让系统能工作所必需的折中。
第5章由BrianSleten编写，讨论了创建数据驱动的应用时资源映射
的威力，提供了纯面向资源架构的一个优雅的例子。
第6章由DaveFetterman编写，他提倡以数据为中心的系统，解释了
好的架构如何能够创造并支持应用生态系统。
第三部分：系统架构
系统软件可能是在设计方面要求最高的软件，部分原因是因为高效
率地使用硬件是少数人才能掌握的神秘艺术，还有部分原因是因为
许多人认为系统软件的架构是理所当然的存在。了不起的系统架构
很少是从一张白纸并始的，我们今天使用的大多数系统是基于20世
纪60年代的设想。第三部分的这几章介绍了4种创新的系统架构，
讨论了架构决定背后的复杂性，这正是它们美丽的原因。
第7章由DerekMurray和KeirFraser编写，提供了一个例子说明深思
熟虑的架构如何能够改变操作系统演进的方式。
第8章由GregLehey编写，回顾了Tandem的架构选择和组成部分（包
括硬件和软件），正是这些让Tandem成为近二十年的高可用性环境
的首选平台。
第9章由RhysNewman和ChristopherDennis编写，描述了如何通过小
心地设计软件和很好地理解领域需求来克服编程系统中那些可以察
觉到的不足。
第10章由lanRogers和DaveGrove编写，介绍了为高级语言创建自优
化的、自支持的运行时环境所需的架构选择。
第四部分：最终用户应用架构
866
---
## Page 868
最终用户应用程序是我们每关的计算生活都要使用的那些应用程
序，是占据我们最多CPU指令周期的软件。这种软件通常不需要仔
细地管理资源，也不需要执行大量的事务。但是，它需要易于使
用、安全、可定制和可扩展。这些属性可以导致软件厂泛流行和使
用，以免费开源软件为例，会有大量的自愿者愿意改进它。在第四
部分，作者们分析了两个非常流行的桌面软件包的架构和需要的社
区过程。
第11章由JimBlandy编写，解释了一组非常简单的组件和一门扩展
语言如何将一个不起眼的文本编辑器变成了一个操作系统L，成为
程序员工具箱中的瑞士军刀。
第12章由TillAdam和MirkoBoehm编写，展示了冲刺和同级评审这
样的社区过程如何帮助软件架构从简单的骨架演变为美丽的系统。
第五部分：语言与架构
正如许多人在他们的著作中指出的那样，我们使用的编程语言影响
了我们解决问题的方式。但是编程语言也能影响系统的架构吗？如
果是这样，那么是如何影响的？在建筑的架构中，新的材料和CAD
系统的采用让人们能够表达更复杂、有时更惊人的漂亮设计。对于
计算机编程来说也是如此吗？第五部分包含最后的两章，探讨了我
们使用的工具和得到的设计之间的关系。
第13章由BertrandMeyer编写，比较了面向对象和函数式架构风格的
适用性。
第14章由PanagiotisLouridas编写，探讨了现代和经典面向对象软件
语言的组件背后的架构选择。
最后，在引人深思的跋中，WilliamJ.Mitchell（MIT架构与媒体艺术
科学系教授）将真实世界中建筑架构的美丽概念与硅基芯片上软件
架构的美丽概念联系在了一起。
原则、特性与结构
在这本书评阅过程的后期，一位审阅者要求我们提供个人的观点作
为一种补充，告诉读者可以从每一章中学到些什么。这个想法很有
趣，但我们不想再猜测各章作者的意思。要求作者们自已提供他们
文章的元分析，就会得到一堆的定义、术语和架构结构，这肯定把
867
---
## Page 869
读者搞糊涂。我们需要一组通用的架构术语，谢天谢地，我们意识
到我们已经有了。在序中，StephenMellor讨论了7个原则，所有美
丽的架构都基于这7个原则。在第1章中，JohnKlein和DavidWeiss提
供了4种架构组件和美丽架构的6种特性。细心的读者会发现，
Mellor的原则与Klein和Weiss的特性不是彼此无关的。实际上，它们
大多数是一致的，这是因为英雄所见略同。他们三人都是非常有经
验的架构师，人们曾多次在实际工作中看到过他们描述的概念的重
要性。
我们将Mellor的架构原则与Klein和Weiss合并成为两个列表：一个包
含了原则和特性（表P-1），另一个包含了结构（表P-2）。然后我
们要求各章的作者标出他们认为适用于自己那一章的术语，得到了
每一章对应的说明。在这些表中，你可以看到各章说明中出现的每
个原则、特性或架构结构的定义。我们希望这些说明对你的阅读提
供帮助，它们清晰地总结每一章的内容。但是我们强烈建议你深入
阅读每章的内容，而不只是停留在这些说明上。
表P-1：架构原则与特性
原则或特性
架构能够.
功能多样性
提供“足够好”的机制，利用简洁的表达来处理各种问题
概念完整性
提供单一的、最优的、无元余的方式来表示一组类似问题
的解决方案
修改独立性
保持它的元素的独立性，这样就能够让需要的修改最少，
从面适应变化
自动传播
通过在模块之间传播数据或行为，保持一致性和正确性
可构建性
指导软件进行一致、正确的构建
增长适应性
…考虑到可能的增长
增抵抗力
通过适应、限制和隔离变化的影响来保持有序
表P-2：架构结构
结构
结构能够.··
模块
将设计或实现决定隐藏在一个稳定的接口之后
依赖关系
按照一个模块使用另一个模块的功能的方式来组织模块
进程
封装并隔离一个模块的运行时状态
数据访问
隔离数据，设置数据访问权限
本书体例