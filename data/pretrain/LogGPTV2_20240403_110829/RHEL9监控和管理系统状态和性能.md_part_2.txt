    图形卡，配置集会将其配置为自动节能。在 ASUS Eee PC
    上，启用了动态超级混合引擎。
    它将 `energy_performance_preference`{.literal} 属性改为
    `powersave`{.literal} 或 `power`{.literal} energy 设置。它还会将
    `scaling_governor`{.literal} 策略属性更改为 `ondemand`{.literal} 或
    `powersave`{.literal} CPU 调控器。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在某些情况下，与 `powersave`{.literal}
    配置集相比，`balanced`{.literal} 配置集效率更高。
    请考虑存在定义的需要完成的工作，例如一个需要转码的视频文件。如果转码以全功率完成，则您的机器可能会消耗较少的能源，因为任务快速完成，因此计算机可以启动空闲，且自动缩减到非常有效的节能模式。另一方面，如果您把文件转码为节流的机器，则计算机在转码期间会消耗较少的电源，但进程会花费更长时间，且总体消耗的能源可能会更高。
    这就是为什么 `balanced`{.literal} 配置文件通常是一个更好的选择。
    :::
[`throughput-performance`{.literal}]{.term}
:   针对高吞吐量优化的服务器配置文件。它禁用节能机制并启用
    `sysctl`{.literal} 设置，以提高磁盘和网络 IO 的吞吐量性能。CPU
    调控器设置为 `performance`{.literal}。
    它将 `energy_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性设置为 `performance`{.literal}
    配置集。
[`accelerator-performance`{.literal}]{.term}
:   `accelerator-performance`{.literal} 配置集包含与
    `throughput-performance`{.literal} 配置集相同的调整。另外，它会将
    CPU 锁定为低 C 状态，以便使延迟小于
    100us。这提高了某些加速器的性能，如 GPU。
[`latency-performance`{.literal}]{.term}
:   为低延迟优化的服务器配置文件。它禁用节能机制并启用
    `sysctl`{.literal} 设置来缩短延迟。CPU 调控器被设置为
    `performance`{.literal}，CPU 被锁定到低 C 状态（按 PM QoS）。
    它将 `energy_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性设置为 `performance`{.literal}
    配置集。
[`network-latency`{.literal}]{.term}
:   低延迟网络调整的配置集。它基于 `latency-performance`{.literal}
    配置集。它还禁用透明大内存页和 NUMA 平衡，并调整其他一些与网络相关的
    `sysctl`{.literal} 参数。
    它继承 `latency-performance`{.literal} 配置集，该配置集将
    `power_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性更改为 `performance`{.literal}
    配置集。
[`hpc-compute`{.literal}]{.term}
:   针对高性能计算而优化的配置集。它基于 `latency-performance`{.literal}
    配置集。
[`network-throughput`{.literal}]{.term}
:   用于吞吐量网络调优的配置集。它基于
    `throughput-performance`{.literal}
    配置集。此外，它还增加了内核网络缓冲区。
    它继承 `latency-performance`{.literal} 或
    `throughput-performance`{.literal} 配置集，并将
    `energy_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性改为 `performance`{.literal}
    配置集。
[`virtual-guest`{.literal}]{.term}
:   为 Red Hat Enterprise Linux 9 虚拟机和 VMWare 虚拟机设计的配置集基于
    `throughput-performance`{.literal}
    配置集（除其他任务）减少了虚拟内存的交换性并增加磁盘预读值。它不会禁用磁盘障碍。
    它继承 `throughput-performance`{.literal} 配置集，该配置集将
    `energy_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性更改为 `performance`{.literal}
    配置集。
[`virtual-host`{.literal}]{.term}
:   基于 `throughput-performance`{.literal}
    配置集（除其他任务）为虚拟主机设计的配置集降低了虚拟内存交换，增加磁盘预读值，并启用更主动的脏页面回写值。
    它继承 `throughput-performance`{.literal} 配置集，该配置集将
    `energy_performance_preference`{.literal} 和
    `scaling_governor`{.literal} 属性更改为 `performance`{.literal}
    配置集。
[`oracle`{.literal}]{.term}
:   根据 `throughput-performance`{.literal} 配置集，为 Oracle
    数据库负载进行了优化。它还禁用透明大内存页，并修改其他与性能相关的内核参数。这个配置集由
    `tuned-profiles-oracle`{.literal} 软件包提供。
[`desktop`{.literal}]{.term}
:   根据 `balanced`{.literal}
    配置文件，为桌面进行了优化的配置集。此外，它还启用了调度程序自动组以更好地响应交互式应用程序。
[`optimize-serial-console`{.literal}]{.term}
:   通过减少 printk 值，将 I/O
    活动微调到串行控制台的配置集。这应该使串行控制台更快响应。此配置集用作其他配置集的覆盖。例如：
    ``` screen
    # tuned-adm profile throughput-performance optimize-serial-console
    ```
[`mssql`{.literal}]{.term}
:   为 Microsoft SQL Server 提供的配置集。它基于
    `thoguhput-performance`{.literal} 配置集。
[`intel-sst`{.literal}]{.term}
:   为带有用户定义的 Intel Speed Select Technology
    配置的系统进行优化的配置集。此配置集用作其他配置集的覆盖。例如：
    ``` screen
    # tuned-adm profile cpu-partitioning intel-sst
    ```
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#tuned-cpu-partitioning-profile_getting-started-with-tuned}TuneD cpu-partitioning 配置集 {.title}
:::
要为对延迟敏感的工作负载调整 Red Hat Enterprise Linux 9，红帽建议使用
`cpu-partitioning`{.literal} TuneD 配置集。
在 Red Hat Enterprise Linux 9 之前，低延迟 Red Hat
文档描述了实现低延迟调整所需的大量低级别步骤。在 Red Hat Enterprise
Linux 9 中，您可以使用 `cpu-partitioning`{.literal} TuneD
配置集更有效地执行低延迟性能优化。根据个人低延迟应用程序的要求，此配置集可轻松自定义。
下图显示了如何使用 `cpu-partitioning`{.literal} 配置集。这个示例使用 CPU
和节点布局。
::: figure
[]{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#cpu-partitioning_getting-started-with-tuned}
**图 1.1. cpu-partitioning 图**
::: figure-contents
::: mediaobject
![CPU 分区](images/cpu-partitioning.png)
:::
:::
:::
您可以使用以下配置选项在
`/etc/tuned/cpu-partitioning-variables.conf`{.literal} 文件中配置
cpu-partitioning 配置集：
::: variablelist
[带有负载均衡的隔离 CPU]{.term}
:   在 cpu-partitioning 图中，从 4 到 23 编号的块是默认的隔离
    CPU。在这些 CPU
    上启用了内核调度程序的进程负载均衡。它专为需要内核调度程序负载平衡的多个线程的低延迟进程而设计。
    您可以使用 `isolated_cores=cpu-list`{.literal} 选项在
    `/etc/tuned/cpu-partitioning-variables.conf`{.literal} 文件中配置
    cpu-partitioning 配置集，它列出了 CPU
    来隔离将使用内核调度程序负载平衡。
    隔离的 CPU 列表用逗号分开，也可以使用一个短划线（如 `3-5`{.literal}
    ）指定范围。这个选项是必须的。这个列表中缺少的任何 CPU
    会自动被视为内务 CPU。
[没有负载均衡的隔离 CPU]{.term}
:   在 cpu-partitioning 图中，编号为 2 和 3
    的块是不提供任何其他内核调度程序进程负载均衡的隔离 CPU。
    您可以使用 `no_balance_cores=cpu-list`{.literal} 选项在
    `/etc/tuned/cpu-partitioning-variables.conf`{.literal} 文件中配置
    cpu-partitioning 配置集，它列出了不使用内核调度程序负载平衡的 CPU。
    指定 `no_balance_cores`{.literal} 选项是可选的，但此列表中的任何 CPU
    都必须是 `isolated_cores`{.literal} 列表中所列 CPU 的子集。
    使用这些 CPU 的应用程序线程需要单独固定到每个 CPU。
[日常 CPU]{.term}
:   在 `cpu-partitioning-variables.conf`{.literal} 文件中没有隔离的 CPU
    会自动被视为内务 CPU。在内务 CPU
    上，允许执行所有服务、守护进程、用户进程、可移动内核线程、中断处理程序和内核计时器。
:::
::: itemizedlist
**其他资源**
-   `tuned-profiles-cpu-partitioning(7)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#using-the-tuned-cpu-partitioning-profile-for-low-latency-tuning_getting-started-with-tuned}使用 TuneD cpu-partitioning 配置集进行低延迟调整 {.title}
:::
这个步骤描述了如何使用 TuneD 的 `cpu-partitioning`{.literal}
配置集为低延迟调整系统。它使用了低延迟应用的示例，它可以使用
`cpu-partitioning`{.literal} 和 CPU 布局，如
[cpu-partitioning](#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#cpu-partitioning_getting-started-with-tuned "图 1.1. cpu-partitioning 图"){.link}
图中所述。
本例中的应用程序使用了：
::: itemizedlist
-   从网络读取数据的专用的 reader 线程将固定到 CPU 2。
-   处理此网络数据的大量线程将固定到 CPU 4-23。
-   将处理的数据写入网络的专用写入器线程将固定到 CPU 3。
:::
::: itemizedlist
**先决条件**
-   您已以 root 用户身份，使用
    `dnf install tuned-profiles-cpu-partitioning`{.literal} 命令安装
    `cpu-partitioning`{.literal} TuneD 配置集。
:::
::: orderedlist
**步骤**
1.  编辑 `/etc/tuned/cpu-partitioning-variables.conf`{.literal}
    文件并添加以下信息：
    ``` screen
    # Isolated CPUs with the kernel’s scheduler load balancing:
    isolated_cores=2-23
    # Isolated CPUs without the kernel’s scheduler load balancing:
    no_balance_cores=2,3
    ```
2.  设置 `cpu-partitioning`{.literal} TuneD 配置集：
    ``` screen
    # tuned-adm profile cpu-partitioning
    ```
3.  重启
    重新引导后，将根据 cpu-partitioning
    图中的隔离，为低延迟调优。该应用可以使用 taskset
    将读取器和写入器线程固定到 CPU 2 和 3，以及 CPU 4-23
    上剩余的应用程序线程。
:::
::: itemizedlist
**其他资源**
-   `tuned-profiles-cpu-partitioning(7)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#customizing-the-cpu-partitioning-tuned-profile_getting-started-with-tuned}自定义 cpu-partitioning TuneD 配置集 {.title}
:::
您可以扩展 TuneD 配置集，以进行额外的性能优化更改。
例如，`cpu-partitioning`{.literal} 配置集将 CPU 设置为使用
`cstate=1`{.literal}。要使用 `cpu-partitioning`{.literal}
配置集，但额外将 CPU cstate 从 cstate1 更改为
cstate0，以下流程描述了一个新的 TuneD 配置集，名称为
[*my_profile*]{.emphasis}，它继承 `cpu-partitioning`{.literal}
配置集，然后设置 C state-0。
::: orderedlist
**步骤**
1.  创建 `/etc/tuned/my_profile`{.literal} 目录：
    ``` screen
    # mkdir /etc/tuned/my_profile
    ```
2.  在此目录中创建 `tuned.conf`{.literal} 文件并添加以下内容：
    ``` screen
    # vi /etc/tuned/my_profile/tuned.conf
    [main]
    summary=Customized tuning on top of cpu-partitioning
    include=cpu-partitioning
    [cpu]
    force_latency=cstate.id:0|1
    ```
3.  使用新配置集：
    ``` screen
    # tuned-adm profile my_profile
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
在共享示例中，不需要重新启动。但是，如果 [*my_profile*]{.emphasis}
配置集中的更改需要重新引导才能生效，则重新启动计算机。
:::
::: itemizedlist
**其他资源**
-   `tuned-profiles-cpu-partitioning(7)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#getting-started-with-tuned_monitoring-and-managing-system-status-and-performance.html#real-time-tuned-profiles-distributed-with-rhel_getting-started-with-tuned}RHEL 提供的实时 TuneD 配置集 {.title}
:::
实时配置集适用于运行实时内核的系统。如果没有特殊的内核构建，则不会将系统配置为实时。在
RHEL 上，配置集可从额外的软件仓库获得。
可用的实时配置集如下：
::: variablelist
[`realtime`{.literal}]{.term}
:   在裸机实时系统上使用。
    由 `tuned-profiles-realtime`{.literal} 软件包提供，该软件包可从 RT
    或 NFV 存储库中获得。
[`realtime-virtual-host`{.literal}]{.term}
:   在为实时配置的虚拟化主机中使用。
    由 `tuned-profiles-nfv-host`{.literal} 软件包提供，该软件包可通过
    NFV 存储库获取。
[`realtime-virtual-guest`{.literal}]{.term}
:   在为实时配置的虚拟化客户端中使用。
    由 `tuned-profiles-nfv-guest`{.literal} 软件包提供，该软件包可通过
    NFV 存储库获取。
:::
:::
::: section
::: titlepage