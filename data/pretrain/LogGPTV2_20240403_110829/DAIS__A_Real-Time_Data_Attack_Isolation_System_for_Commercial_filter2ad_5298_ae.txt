forwards all the remained updates (of the once isolated user)
to the real database, and submit the Update-Forward trans-
action to the Mediator.
One key challenge of the Merger is how to enable mul-
tiple users to be simultaneously isolated, and how to handle
the impact of one merging on other isolated histories. For
this purpose, the Merger does the following things:
(cid:2) For simplicity, the Merger never back out trustworthy
transactions when doing a merging. Although in this
way more back-out cost could be caused, after each
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:56 UTC from IEEE Xplore.  Restrictions apply. 
merging we need not to check the impact of a back-out
trustworthy transaction on each (still) isolated history
and back out each isolated transaction that is affected
by the trustworthy transaction, which could cost more.
(cid:2) After a merging, if there are still some users being iso-
lated, the merged history will be maintained so that
the next (possible) merging can be done based on the
merged history. The merged history can be maintained
in the form of a dependency graph [2].
(cid:2) After a merging, if there is no user being isolated,
the maintained merged history will be discarded, and
when a new user is later on isolated, the part of the
trustworthy history that will participate in each further
merging will be respeciﬁed, which will only cover the
trustworthy transactions that commit after the user is
isolated. In this way, the processing load on the Merger
for the next merging can be dramatically decreased.
3.8 On-the-ﬂy Isolation Controller
Doing a merging can take a while. Disallowing every
user transaction to run during a merging could cause seri-
ous denial-of-service. However, allowing user transactions
to continue being executed without any restriction as the
merging is processed can jeopardize the correctness of the
merging. To ensure that the correctness of merging will not
be jeopardized, the On-the-ﬂy Isolation Controller (OIC)
works as follows. Note that the drawback (of the OIC algo-
rithm) is that (1) during a merging, (almost) no new trans-
action of the once isolated user can be executed, and (2)
the locked part of the real database can block the execution
of some new user transactions, although many other user
transactions that do not access the locked tables can still be
executed.
(cid:2) When the Intrusion Detector tells the SRR that an iso-
lated user turns out to be innocent, the SRR sends an
INNOCENT message to the OIC.
(cid:2) When the OIC receives an INNOCENT message, the
OIC will lock every suspicious table (cid:4)(cid:2)(cid:3) that is created
for the user and the corresponding (cid:12) (cid:2)(cid:3) table.
4 Performance Issues
The merit of DAIS is that it causes no extra delay for
trustworthy transactions. Although the Mediator does cause
some delay for every transaction, this delay is unavoid-
able even if we do not do isolation because we still need
to mediate (or proxy) transactions for the purpose of dam-
age assessment and repair. The limitation of DAIS is that
rewriting SQL statements could make the isolated user suf-
fer some delay, although in most cases this delay can be
signiﬁcantly reduced by concurrent SQL rewriting and redi-
recting. For example, for a deposit transaction, rewriting of
the UPDATE statement could be ﬁnished during the period
of time when the INSERT statement is executed, thus the
delay for the UPDATE statement is reduced to zero (if the
UPDATE statement should be executed after the INSERT
statement).
DAIS can be further optimized to improve performance
in the following ways:
(cid:2) Although extracting reads from transaction proﬁle is
efﬁcient, this method can only get an approximate read
set in some cases. This could cause many innocent
transactions to be mistakenly backed out. To reduce
the number of mistakenly backed-out transactions, we
can let the Mediator to inform the Read Extractor some
results of some SQL statements. Since these results
indicate exactly which items are read, they can help
the Read Extractor to get more accurate read sets.
(cid:2) Although Algorithm 1 can handle any kind of SQL
statements, for the SQL statements that only access the
records kept in the real database, the Algorithm can
cause too much extra cost. To reduce the extra cost,
we could optimize Algorithm 1 as follows: for a suspi-
cious SQL statement, for every table (cid:12) (cid:2)(cid:3) that the state-
ment wants to access, we ﬁrst check if the intersection
of its (intended) reads on (cid:12)(cid:2)(cid:3) and (cid:4)(cid:2)(cid:3) is empty (Note
that here the reads can be extracted from SQL state-
ment texts). If the intersection is empty, we can exe-
cute the SQL statement directly on (cid:12)(cid:2)(cid:3) without losing
the correctness.
5 Conclusion
In this paper, we present the design of DAIS, a practical
real-time data attack isolation system for intrusion tolerant
commercial database applications. By transparently isolat-
ing suspicious transactions, DAIS allows suspicious activ-
ities to be kept under surveillance without risking further
harm to the system or causing denial-of-service to benign
transactions. Built on top of Oracle Server 8.1.6, DAIS
uses triggers and transaction proﬁles to keep track of the
data items read and written by transactions, and isolates
attacks by rewriting and redirecting user SQL statements.
Compared with ﬁshbowling, the extra resources consumed
by DAIS are much less. To our best knowledge, DAIS is
the ﬁrst tool which can do real-time cost-effective data at-
tack isolation for commercial database applications. DAIS
design is very general.
In addition to Oracle, it can be
easily adapted to support many other database application
platforms such as Microsoft SQL Server, Sybase, and In-
formix. By designing DAIS the conceptual soundness, the
functional capabilities, the feasibility, and the practicality of
the general isolation approach can be better validated.
There are some future works for DAIS. First, currently
after the DAIS tool is started, there is no other input to
DAIS except the set of suspicious users (from the Intrusion
10
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:56 UTC from IEEE Xplore.  Restrictions apply. 
Detector) and the trails of transactions. Another module
can be added to DAIS to provide more interactions between
the SSO and DAIS. One desirable feature of this interface
would be the capability of showing the SSO the users that
are being isolated and the execution of their transactions.
Second, the security of DAIS is not addressed in the pro-
totype design. However, successful attacks on DAIS can
cause some benign users to be isolated, can cause some ma-
licious users to stay at large, and can cause incorrect merg-
ing, which will jeopardize the consistency of the database.
For one example, if the messages from the Intrusion Detec-
tor to the SRR can be successfully faked, DAIS can isolated
benign users. For another example, if the read set templates
are maliciously modiﬁed then some cycles in a precedence
graph may not be able to be identiﬁed, and some transac-
tions that cause inconsistency may be mistakenly merged.
Therefore, the security of DAIS is a signiﬁcant concern.
References
[1] M. R. Adam. Security-Control Methods for Statistical Database: A
Comparative Study. ACM Computing Surveys, 21(4), 1989.
[2] P. Ammann, S. Jajodia, and P. Liu. Recovery from malicious trans-
IEEE Transactions on Knowledge and Data Engineering,
actions.
2001. To appear.
[3] V. Atluri, S. Jajodia, and B. George. Multilevel Secure Transaction
Processing. Kluwer Academic Publishers, 1999.
[4] D. Barbara, R. Goel, and S. Jajodia. Using checksums to detect data
corruption. In Proceedings of the 2000 International Conference on
Extending Data Base Technology, Mar 2000.
[5] P. A. Bernstein, V. Hadzilacos, and N. Goodman. Concurrency Con-
trol and Recovery in Database Systems. Addison-Wesley, Reading,
MA, 1987.
[6] S. B. Davidson. Optimism and consistency in partitioned dis-
tributed database systems. ACM Transactions on Database Systems,
9(3):456–581, September 1984.
[7] D.E.Denning. An intrusion-detection model. IEEE Trans. on Soft-
ware Engineering, SE-13:222–232, February 1987.
[8] T.D. Garvey and T.F. Lunt. Model-based intrusion detection. In Pro-
ceedings of the 14th National Computer Security Conference, Balti-
more, MD, October 1991.
[9] P. P. Grifﬁths and B. W. Wade. An Authorization Mechanism for a
Relational Database System. ACM Transactions on Database Sys-
tems, 1(3):242–255, September 1976.
[10] P. Helman and G. Liepins. Statistical foundations of audit trail anal-
IEEE Transactions on
ysis for the detection of computer misuse.
Software Engineering, 19(9):886–901, 1993.
[11] K. Ilgun. Ustat: A real-time intrusion detection system for unix. In
Proceedings of the IEEE Symposium on Security and Privacy, Oak-
land, CA, May 1993.
[12] K. Ilgun, R.A. Kemmerer, and P.A. Porras. State transition analysis:
IEEE Transactions on
A rule-based intrusion detection approach.
Software Engineering, 21(3):181–199, 1995.
[13] R. Jagannathan and T. Lunt. System design document: Next genera-
tion intrusion detection expert system (nides). Technical report, SRI
International, Menlo Park, California, 1993.
[14] S. Jajodia, P. Samarati, V. S. Subrahmanian, and E. Bertino. A uni-
ﬁed framework for enforcing multiple access control policies.
In
Proceedings of ACM SIGMOD International Conference on Man-
agement of Data, pages 474–485, May 1997.
11
[15] H. S. Javitz and A. Valdes. The sri ides statistical anomaly detector.
In Proceedings IEEE Computer Society Symposium on Security and
Privacy, Oakland, CA, May 1991.
[16] H. S. Javitz and A. Valdes. The nides statistical component descrip-
tion and justiﬁcation. Technical Report A010, SRI International,
March 1994.
[17] T. Lane and C.E. Brodley. Temporal sequence learning and data re-
duction for anomaly detection.
In Proc. 5th ACM Conference on
Computer and Communications Security, San Francisco, CA, Nov
1998.
[18] Wenke Lee, Sal Stolfo, and Kui Mok. A data mining framework for
building intrusion detection models. In Proc. 1999 IEEE Symposium
on Security and Privacy, Oakland, CA, May 1999.
[19] P. Liu, S. Jajodia, and C.D. McCollum.
isolation in information systems.
8(4):243–279, 2000.
Intrusion conﬁnement by
Journal of Computer Security,
[20] P. Luenam and P. Liu. Odam: An on-the-ﬂy damage assessment and
repair system for commercial database applications.
In Proc. 15th
IFIP WFG11.3 Working Conference on Database and Application
Security, Ontario, Canada, July 2001.
[21] T. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, C. Jalali, H. S. Javitz,
A. Valdes, P. G. Neumann, and T. D. Garvey. A real time intrusion
detection expert system (ides). Technical report, SRI International,
Menlo Park, California, 1992.
[22] Teresa Lunt and Catherine McCollum.
Intrusion detection and re-
sponse research at DARPA. Technical report, The MITRE Corpora-
tion, McLean, VA, 1998.
[23] T.F. Lunt. A Survey of Intrusion Detection Techniques. Computers
& Security, 12(4):405–418, June 1993.
[24] J. McDermott and D. Goldschlag.
In D.L.
Spooner, S.A. Demurjian, and J.E. Dobson, editors, Database Se-
curity IX: Status and Prospects, pages 365–381. Chapman & Hall,
London, 1996.
Storage jamming.
[25] J. McDermott and D. Goldschlag. Towards a model of storage jam-
ming. In Proceedings of the IEEE Computer Security Foundations
Workshop, pages 176–185, Kenmare, Ireland, June 1996.
[26] B. Mukherjee, L. T. Heberlein, and K.N. Levitt. Network intrusion
detection. IEEE Network, pages 26–41, June 1994.
[27] P.A. Porras and R.A. Kemmerer. Penetration state transition analysis:
A rule-based intrusion detection approach. In Proceedings of the 8th
Annual Computer Security Applications Conference, San Antonio,
Texas, December 1992.
[28] F. Rabitti, E. Bertino, W. Kim, and D. Woelk. A model of autho-
rization for next-generation database systems. ACM Transactions on
Database Systems, 16(1):88–131, 1994.
[29] P. Liu S. Ingsriswang. Aaid: An application aware transaction-level
database intrusion detection system. Technical report, Department of
Information Systems, UMBC, Baltimore, MD, 2001.
[30] D. Samfat and R. Molva. Idamn: An intrusion detection architecture
for mibile networks. IEEE Journal of Selected Areas in Communica-
tions, 15(7):1373–1380, 1997.
[31] R. Sandhu and F. Chen. The multilevel relational (mlr) data model.
ACM Transactions on Information and Systems Security, 1(1), 1998.
[32] S.-P. Shieh and V.D. Gligor. On a pattern-oriented model for intru-
IEEE Transactions on Knowledge and Data Engi-
sion detection.
neering, 9(4):661–667, 1997.
[33] M. Winslett, K. Smith, and X. Qian. Formal query languages for
secure relational databases. ACM Transactions on Database Systems,
19(4):626–662, 1994.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:09:56 UTC from IEEE Xplore.  Restrictions apply.