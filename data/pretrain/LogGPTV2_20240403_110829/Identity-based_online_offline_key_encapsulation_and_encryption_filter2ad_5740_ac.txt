If ⊥ is the output, outputs ⊥. Otherwise computes
m ← H
′
(K, C1) ⊕ C3
′ ← KEMO(cid:11) (C2 ⊕ H(K, C1, m)). If K
Let K
m. Otherwise outputs ⊥.
′
= K, outputs
3We may use some padding or encoding mechanism to make
the bit length of r as the same as the output of the hash
function H.
56
4.2 Security Analysis of Our Transformation
Theorem 2. Our IBOOE is CCA-secure in the random
oracle model, assuming the underlying IBOOKEM is one-
way.
Proof. Setup: Assume there is an adversary A who can
break the CCA-security of the IBOOE, we construct anoth-
er adversary B to break the one-wayness of the underlying
IBOOKEM.
The setup algorithm and the extraction algorithm are the
same as those in the IBOOKEM scheme. Thus the chal-
lenger can forward the parameters from IBOOKEM to A.
It also forwards any extraction oracle request to the extrac-
tion oracle from IBOOKEM. In addition, the challenger C
also simulates two random oracles H and H
in the typical
way.
Decryption Oracle: Upon received a decryption request for
a ciphertext {C1, C2, C3} and an identity ID, the challenger
does the following:
′
1. Retrieves {hi} from the random oracle H list such that
• hi = H(Ki, C1, mi) and mi = C3 ⊕ H
• the Ki from random oracle H is the same as the
(Ki, C1),
′
Ki from H
random oracle.
′
2. For every {hi} from the last step, extracts ( (cid:22)C
′
← KEMO(cid:11) (C2 ⊕ hi). Check if
KEM , ^Ki)
^Ki = Ki
and
If both equalities hold, outputs H
erwise outputs ⊥.
′
KEMOn( (cid:22)C
KEM , ID) = C1
(Ki, C1) ⊕ C3. Oth-
′
′
′
∗
∗
, C
(K
, m
′
, C
) and H
= {C
′
from IBOOKEM. C returns C
∗
Output: The challenger C received a challenged ciphertext
3} as the chal-
′
∗
∗
2, C
C
lenged ciphertext to A for some randomly picked C
∗
∗
2 and C
3.
If A is able to win the game with non-negligible probability,
′
∗
it should have queried H(K
) before
, C
. C randomly chooses a random oracle
outputting the bit b
query and outputs the (cid:12)rst component as the output to the
game IBOOKEM.
Probability Analysis: If A does not make any query with K
,
it does not gain any advantage for the random guess. If it
does, C succeeds with probability 1/qH . Let |K| represents
the domain space of K. A false ciphertext will be accepted
with probability 1/|K|. Thus the overall successful proba-
bility of C should be Pr[A]/qH − qD/|K|, where qH and qD
represent the number of random oracle query and decryption
oracle query allowed respectively.
4.3 Our Instantiation of IBOOKEM
chooses s ∈R Z∗
q
be a cryptographic hash function. The public parameters
param and master secret key msk are given by
Set: The KGC selects a generator P ∈ G and randomly
q . It sets Ppub = sP . Let H1 : {0, 1}∗ → Z∗
∗
param = (G, GT , q, P, Ppub, H1)
msk = s
Ext: To generate a secret key for a user with identity ID ∈
{0, 1}∗
, the KGC computes:
DID = (H1(ID) + s)
−1P
KEMO(cid:11) : For a randomness r ∈ {0, 1}~k where ~k is some secu-
rity parameter, generate r
q , computes the session
key as:
, α, β ∈ Z∗
′
and the o(cid:15)ine ciphertext as:
K ← ^e(P, P )r
(
′
)
T0 ← r
′
αP + Ppub
T1 ← r
′
βP
Outputs the o(cid:15)ine ciphertext (cid:22)C = {T0, T1, α, β} and the
session key K. Note that this should be deterministic. That
is, for the same input randomness r, the same output K, (cid:22)C
should be obtained.
KEMOn: To generate a ciphertext for ID at the online stage,
computes:
(
H1(ID) − α
)
1 ← β
′
t
−1
mod q
′
1).
Outputs the ciphertext C = (T0, T1, t
DeKEM: To recover the session key using secret key DID,
computes
K ← ^e(T0 + t
′
1T1, DID)
4.4 Security Analysis of Our Instantiation
For completeness, we give a direct proof resembling that of
[8] here, instead of reducing the one-wayness of our scheme
to that of the underlying SK − IBE [26].
q1
Theorem 3. If there is an IOKEM-OW adversary A of the
proposed scheme that succeeds with probability ϵ, then there
is a simulator B running in polynomial time that solves the
(ℓ + 1)-BDHI problem with probability at least ϵ · 1
where
q1 is the number of queries allowed to the random oracle H1
and we assume q1 = ℓ.
B (cid:12)rst randomly selects π ∈R {1, . . . , q1}, Iπ ∈R Z∗
Proof. Setup: Suppose B is given a random instance of
the (ℓ + 1)-BDHI problem ( ^P , α ^P , α2 ^P , . . . , αℓ ^P , αℓ+1 ^P ), B
runs A as a subroutine to output ^e( ^P , ^P )
α . B sets up a
simulated environment for A as follow.
q and
w1, . . . , wπ−1, wπ+1, . . . , wℓ ∈R Z∗
q . For i ∈ {1, . . . , ℓ} \ {π},
it computes Ii = Iπ − wi. Construct a polynomial with
ℓ∏
degree (ℓ − 1) as
∑
to obtain c0, . . . , cℓ−1 ∈ Z∗
ℓ−1
i=0 cizi.
∑
Then it sets generator G =
For i ∈ {1, . . . , ℓ}\{π}, B expands fi(z) = f (z)/(z+wi) =
j=0 di,jzj to obtain di,1, . . . , di,ℓ−2 ∈ Z∗
ℓ−2
ℓ−1
i=0 ci(αi ^P ) = f (α) ^P .
q such that f (z) =
q and sets
∑
i=1,i̸=π
(z + wi)
f (z) =
1
~Hi =
di,j(αj ^P ) = fi(α) ^P =
f (α)
α + wi
^P =
1
α + wi
G
It randomly chooses ^w ∈ {1, . . . , ℓ} \ {π}, and computes
ℓ−2∑
j=0
the public key Ppub as
Ppub = −αG − IπG = (−α − Iπ)G
57
∑
ℓ−1
i=0 ci(αi+1 ^P ) so that its unknown master
where αG =
secret key msk is implicitly set to x = −α − Iπ ∈ Z∗
q , while
public parameter param are set to (G, Ppub) which are giv-
en to the adversary. For all i ∈ {1, . . . , ℓ} \ {π}, we have
(Ii,− ~Hi) = (Ii,
Oracle Simulation: B (cid:12)rst initializes a counter ν to 1 and
starts A. We assume that H1-queries are distinct, and that
is submitted to H1 at some point.
the target identity ID
Ii+x G).
∗
1
1. Random Oracle: For H1-queries (we use IDν to denote
the input of the νth one of such queries), B answers Iν
and increments ν.
2. Extraction Oracle: On input IDν , if ν = π, B aborts.
Otherwise, it knows that H1(IDν ) = Iν and returns
− ~Hν = (1/(Iν + x))G.
.
∗
∗
Challenge: A outputs an identity ID
for which it never ob-
∗ ̸= IDπ, B abort-
If ID
tained the private key of ID
1, ~t0, ~t1 ∈R Z∗
′
s. Otherwise it randomly selects t
q and com-
putes T0 = ~t0G, T1 = ~t1G to return the challenge ciphertext
1~t1 and T = −ξG. Since
′
∗
ϕ
x = −α − Iπ, we let ρ = ξ
′
1). Let ξ = ~t0 + t
= (T0, T1, t
T = −αρG = ρ(Iπ + x)G
which is a perfectly simulated ciphertext.
Output Calculation: A outputs a session key K
ability ϵ it is in the right form, that is,
α , we can check that
∗
, with prob-
∗
K
= ^e(G, G)ρ = ^e(G, G)
−ξ/(Iπ +x) = ^e( ^P , ^P )f (α)2ξ/α
ℓ−1
i=0 cizi is the polynomial for which G =
where f (z) =
f (α)P . The (ℓ + 1)-BDHI solution can be extracted by com-
∑
)) 1
) 1
c2
0
c2
0
puting(
(
(
=
=
(∑
e
)
(∑
R1/ξ
ℓ−2
i=0 ci+1(αi ^P ), c0 ^P
e
ℓ−2
j=0 cj+1(αj ^P ), G
∑
^e( ^P , ^P )c0(
^e( ^P , ^P )f (α)2/α
ℓ−2
i=0 ci+1(αi))^e( ^P , ^P )f (α)(
∑ℓ−1
^e( ^P , ^P )f (α)2/α
ci(αi ))+f (α)(
∑ℓ−1
i=1
ci (αi ))
i=1
∑
)
ℓ−2
j=0 cj+1(αj ))
1/c2
0
^e( ^P , ^P )
c0(
f (α)2−(c1 α+c2 α2+...cℓ−1 αℓ−1 )(c0+f (α))
α
2 α
c0
= ^e( ^P , ^P )
2
2 α
c0
= ^e( ^P , ^P )
c0
= ^e( ^P , ^P )1/α
Probability Analysis: B only fails in providing a consistent
simulation because one of the following independent events
happen:
• E1 : A does not choose to be challenged on IDπ.
• E2 : A key extraction query is made on IDπ.
We have Pr[¬E1] = 1/q1 and ¬E1 implies ¬E2. Combin-
ing together, the overall successful probability Pr[¬E1] is at
least 1
q1
.
58
5. COMPARISON
We use GMC BB and GMC G to denote the schemes proposed
in [20], LZ and CLZBD to denote the schemes proposed in
[24] and [14] respectively. We assume that |G| = 160 bit-
s, |q| = 160 bits, |GT| = 1024 bits and the length of the
plaintext n = |q| = 160 bits for the following comparison.