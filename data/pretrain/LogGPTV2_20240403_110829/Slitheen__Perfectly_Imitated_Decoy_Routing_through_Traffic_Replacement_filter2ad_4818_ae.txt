face, and sent back out to their destination with a recomputed TCP
checksum.
Once the client has terminated the connection with the overt site
by sending a TCP FIN packet, the station removes the ﬂow from
the table. We save session tickets and session IDs to allow clients
to resume TLS sessions for subsequent requests to the same server.
6. EVALUATION
6.1 Bandwidth
The amount of downstream data a client can receive in a single
page load is dependent on the amount and size of the leaf resources
of the overt page. We visited the Alexa8 top 10,000 TLS sites that
support our implemented ciphersuites and measured the amount of
downstream data available to a Slitheen client when using the site
5http://phantomjs.org/
6https://www.mozilla.org/ﬁrefox/
7https://www.google.com/chrome/
8http://www.alexa.com/
Table 2: Comparison of the total amount of content (in bytes, with means and standard deviations over 100 samples indicated) in a page,
the amount of potentially replaceable leaf content, and the amount of leaf content actually replaced by the Slitheen station. Sites such as
Facebook offer a signiﬁcant amount of leaf content, but large TLS records prevent Slitheen from replacing any leaf content with downstream
data from the censored site. Clients should select overt destinations that not only have a large amount of leaf content, but also perform well
in practice. In the last two columns, we give the percentage of leaf content that was actually replaced by the relay station and the percentage
of total content that was replaced by the relay station.
Site name
Yandex
Reddit
Netﬂix
Quora
Gmail
Wikipedia
Yahoo
Facebook
Total content (bytes) Leaf content (bytes) Replaceable content (bytes) % leaf content replaced % total replaced
0.04±0.02
130000± 40000
19±3
560000± 60000
0.12±0.03
240000± 80000
800000± 500000
20±10
23±9
40000± 10000
33±4
74000± 8000
1300000± 700000
40±20
600000± 200000
0±0
16000± 8000
150000± 20000
40000± 30000
110000± 90000
8800± 100
24000± 2000
400000± 100000
40000± 10000
50± 10
100000± 10000
261± 0
110000± 90000
7700± 100
24000± 2000
400000± 100000
0.4±0.2
70±10
0.7±0.2
99±5
87.7±0.2
100±0
100.0±0.2
0±0
0± 0
Figure 4: Cumulative distribution function of the potential down-
stream bandwidth for proxied data provided by the Alexa top
10,000 TLS sites.
as an overt destination. To collect these results, we used PhantomJS
to capture the size of HTTP responses from each site. We then
measured the total amount of possible downstream bandwidth from
each site as the sum of the sizes of all replaceable resources for the
page in bytes. We note that this is the maximum amount of potential
downstream bandwidth as some resources may not be accessible
on a path that contains the decoy router, and not all leaf HTTP
responses will be replaceable if the headers are contained in a TLS
record that is split across multiple packets.
We give a cumulative distribution function of the amount of leaf
content in bytes for the top 1,000 sites in Figure 4. About 25%
of sites offer 1 MB or more of potentially replaceable content, giv-
ing us a fair amount of downstream bandwidth for relaying content
from censored sites to the client. In total, we found that about 40%
of the content from all 1,000 sites was leaf content. This suggests
that censored sites will load in a little more than twice the amount
of time they normally would.
To test the actual replaceability of data, we accessed the Alexa
top 500 TLS sites as overt destinations and counted the total bytes
received, the total amount of leaf content, and the amount of leaf
content that was replaced by the system. We give a cumulative
distribution function of the amount of total bytes in a full page load,
Figure 5: Cumulative distribution function of the leaf content that
was actually replaced by the relay station in our tests. We give
the total number of bytes, the bytes of leaf content, and the bytes
replaced with downstream covert content for each of the Alexa top
500 TLS sites.
the amount of leaf-content bytes, and the amount of replaced bytes
in Figure 5. We give the detailed results of eight popular sites in
Table 2. We found that the relay station’s ability to replace leaf
resources varied signiﬁcantly among sites. Sites such as yandex.
ru, netﬂix.com, and facebook.com were ill-suited to our system;
factors such as TLS record sizes and packet re-ordering prevented
us from detecting and replacing leaf resources at the relay station.
Facebook was the most extreme example, where none of the leaf
content was replaceable by the system. Upon further investigation,
we noticed that all leaf content response headers from this site were
encrypted in a large record along with the response body and spread
across multiple packets, making its content type immutable by the
Slitheen station. For wikipedia.org, yahoo.com, and quora.com, on
the other hand, almost all of the leaf content in our 100 trials was
replaced by the Slitheen station. While the station missed some of
the leaf content for gmail.com and reddit.com, most leaf resources
were replaced by the station without a loss of HTTP state. These
ﬁndings suggest that the selection of an overt destination should
0.000.250.500.751.001kB10kB100kB1MB10MBDownstream leaf content (bytes)CDF0.000.250.500.751.001kB10kB100kB1MB10MBReplaceable leaf content (bytes)CDFTypeTotalLeafReplaced(a) Latency measurements for www.wikipedia.org
(b) Latency measurements for gmail.com
depend on both the amount of leaf content on the site as well as the
amount of replaceable content determined through use.
6.2 Latency Measurements
As mentioned in the previous section, Slitheen reduces latency
from two sources. By queueing downstream data from the covert
destination, Slitheen removes the latency that comes from fetching
content from a possible distant censored site. We also minimize
the latency introduced by the relay station itself by not waiting for
data to be proxied to the covert destination, but rather queueing up
previously collected proxy data for the client to be replaced as soon
as incoming packets from the overt site arrive. Our results show
that the encryption and replacement procedures do not add enough
latency to identify the usage of Slitheen.
We measured the time it took to fully load the overt destina-
tion both as an overt site for tagged ﬂows whose leaf resources
were replaced with proxied data, and from a regular, untagged ac-
cess. We tested three different overt destinations: www.wikipedia.
org, gmail.com, and www.yahoo.com 100 times each and give the
CDF of these load times in Figure 6. We performed a two-sided
Kolmogorov-Smirnov test on the collected data in order to deter-
mine whether the relay station induced a different latency distri-
bution for decoy accesses and measured a D-value of 0.11 and a
p-value of 0.58 for www.wikipedia.org, a D-value of 0.12 and a p-
value of 0.47 for gmail.com, and a D-value of 0.07 and a p-value of
0.97 for www.yahoo.com. These results indicate that the K-S test
fails to ﬁnd any signiﬁcant difference in the latency distributions of
the overt destination between its use as a regular or an overt site in
a decoy routing session.
7. CONCLUSION
Slitheen is the ﬁrst decoy routing system to provide a defense
against latency analysis and website ﬁngerprinting attacks. We
mimic the packet sequence of a regular visit to the overt site by
replacing the site’s actual packets in response to valid resource
requests with downstream data from the covert destination, forc-
ing the covert datastream into the shape of the overt datastream.
Slitheen eliminates latency from the censored site by building up a
queue of downstream data and replacing the contents of TCP seg-
ments as soon as they arrive at the station. We also eliminate the
censor’s ability to use latencies or packet sequences to ﬁngerprint
the covert site accessed through the decoy routing system.
While our system does not support asymmetric ﬂows and re-
quires the in-line blocking of downstream data, we argue that tak-
ing the side of security in this trade-off is reasonable given the in-
creased capabilities of technology available to participant ISPs. In
return, Slitheen provides stronger defenses to known attacks than
any previous decoy routing system.
8. REFERENCES
[1] S. Aryan, H. Aryan, and J. A. Halderman. Internet censorship
in Iran: A ﬁrst look. In 3rd USENIX Workshop on Free and
Open Communications on the Internet (FOCI), 2013.
(c) Latency measurements for www.yahoo.com
Figure 6: Cumulative distribution functions of the page load time of
three overt destinations as both a decoy access and a regular access.
The CDF shows a minimal difference in the latency distributions of
the two types of access, and a K-S test fails to ﬁnd a difference in
the latency distributions due to the Slitheen station replacement and
processing.
[2] M. Dewhirst. Censorship in Russia, 1991 and 2001. The
Journal of Communist Studies and Transition Politics,
18(1):21–34, 2002.
[3] R. Dingledine. Obfsproxy: The next step in the censorship
arms race. https://blog.torproject.org/blog/
obfsproxy-next-step-censorship-arms-race, February 2012.
[Online; accessed 29-February-2016].
[4] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The
second-generation onion router. In 13th USENIX Security
Symposium, pages 303–320, 2004.
0.000.250.500.751.00450500550Decoy page download time (ms)CDFTypeDecoyRegular0.000.250.500.751.006007008009001000Decoy page download time (ms)CDFTypeDecoyRegular0.000.250.500.751.00025005000750010000Decoy page download time (ms)CDFTypeDecoyRegular[5] K. P. Dyer, S. E. Coull, and T. Shrimpton. Marionette: A
programmable network-trafﬁc obfuscation system. In 24th
USENIX Security Symposium, pages 367–382, 2015.
[6] E. L. Eisenstein. The printing press as an agent of change,
volume 1. Cambridge University Press, 1980.
[7] D. Ellard, C. Jones, V. Manfredi, W. Strayer, B. Thapa,
M. Van Welie, and A. Jackson. Rebound: Decoy routing on
asymmetric routes via error messages. In Local Computer
Networks (LCN), 2015 IEEE 40th Conference on, pages
91–99, Oct 2015.
[8] I. Fette and A. Melnikov. The WebSocket Protocol. RFC
6455, December 2011.
[9] R. Fielding, J. Gettys, H. Frystyk, L. Masinter, P. Leach, and
T. Berners-Lee. Hypertext Transfer Protocol – HTTP/1.1.
RFC 2616, June 1999.
[10] D. Fiﬁeld, C. Lan, R. Hynes, P. Wegmann, and V. Paxson.
Blocking-resistant communication through domain fronting.
Proceedings on Privacy Enhancing Technologies,
2015(2):46–64, 2015.
[11] D. Herrmann, R. Wendolsky, and H. Federrath. Website
ﬁngerprinting: Attacking popular privacy enhancing
technologies with the multinomial naïve-bayes classiﬁer. In
Proceedings of the 2009 ACM Workshop on Cloud
Computing Security, CCSW ’09, pages 31–42, 2009.
[12] A. Houmansadr, G. T. Nguyen, M. Caesar, and N. Borisov.
Cirripede: Circumvention infrastructure using router
redirection with plausible deniability. In 18th ACM
Conference on Computer and Communications Security,
CCS ’11, pages 187–200, 2011.
[13] A. Houmansadr, E. L. Wong, and V. Shmatikov. No direction
home: The true cost of routing around decoys. In 2014
Network and Distributed System Security (NDSS)
Symposium, 2014.
[14] J. Karlin, D. Ellard, A. W. Jackson, C. E. Jones, G. Lauer,
D. P. Mankins, and W. T. Strayer. Decoy routing: Toward
unblockable internet communication. In USENIX workshop
on free and open communications on the Internet, 2011.
[15] H. Mohajeri Moghaddam, B. Li, M. Derakhshani, and
I. Goldberg. Skypemorph: Protocol obfuscation for Tor
bridges. In 2012 ACM Conference on Computer and
Communications Security, CCS ’12, pages 97–108, 2012.
[16] Z. Nabi. The anatomy of web censorship in Pakistan. In 3rd
USENIX Workshop on Free and Open Communications on
the Internet (FOCI), 2013.
[17] Sandvine. White paper: Applying network policy control to
asymmetric trafﬁc: Considerations and solutions.
https://www.sandvine.com/downloads/general/whitepapers/
applying-network-policy-control-to-asymmetric-trafﬁc.pdf.
[18] M. Schuchard, J. Geddes, C. Thompson, and N. Hopper.
Routing around decoys. In 2012 ACM Conference on
Computer and Communications Security, CCS ’12, pages
85–96, 2012.
[19] The Tor Project. Tor: Bridges.
https://www.torproject.org/docs/bridges. [Online; accessed
27-February-2016].
[20] The Tor Project. Torproject.org blocked by GFW in China:
Sooner or later?
https://blog.torproject.org/blog/tor-partially-blocked-china,
September 2009. [Online; accessed 27-February-2016].
[21] T. Wang, X. Cai, R. Nithyanand, R. Johnson, and
I. Goldberg. Effective attacks and provable defenses for
website ﬁngerprinting. In Proceedings of the 23rd USENIX
Conference on Security Symposium, SEC’14, pages
143–157, 2014.
[22] Z. Weinberg, J. Wang, V. Yegneswaran, L. Briesemeister,
S. Cheung, F. Wang, and D. Boneh. StegoTorus: A
camouﬂage proxy for the Tor anonymity system. In 2012
ACM Conference on Computer and Communications
Security, CCS ’12, pages 109–120, 2012.
[23] P. Winter and S. Lindskog. How the Great Firewall of China
is blocking Tor. In 2nd USENIX Workshop on Free and Open
Communications on the Internet (FOCI), 2012.
[24] P. Winter, T. Pulls, and J. Fuss. ScrambleSuit: A
polymorphic network protocol to circumvent censorship. In
12th ACM Workshop on Workshop on Privacy in the
Electronic Society, WPES ’13, pages 213–224, 2013.
[25] E. Wustrow, C. M. Swanson, and J. A. Halderman. Tapdance:
End-to-middle anticensorship without ﬂow blocking. In 23rd
USENIX Security Symposium, pages 159–174, 2014.
[26] E. Wustrow, S. Wolchok, I. Goldberg, and J. A. Halderman.
Telex: Anticensorship in the network infrastructure. In 20th
USENIX Security Symposium, 2011.