这里同样用寄存器寻址，R0寄存器存储的是R1中字符串的地址，看到这里的字符串内容是jiangwei，这个就是输入的内容，那么到这里就豁然开朗了，密码是上面的aiyou，bucuoo；再次输入这个密码，就可见到破解成功。如图22-42所示。
::: bodypic-c
![](OEBPS/Images/22a42-i.jpg){.calibre863}
:::
图22-42 破解成功效果图
[提示：]{.yanse}项目下载地址为
http://download.csdn.net/detail/jiangwei0910410003/9531957\
[注意：]{.yanse}时刻需要注意BL/BLX等跳转指令，在它们执行完之后，肯定会有一些CMP/CBZ等比较指令，这时候就可以查看重要的寄存器内容来获取重要信息。
[]{#136.xhtml}
#### 22.5 本章小结 {.bodycontent-title2}
本章主要介绍用IDA调试so文件，这也是一种全新的方式去破解native层的代码。现在有些程序依然把关键代码放在了Java层，那么可以使用Eclipse调试samli文件去破解；如果程序把关键代码放到native层，那么这时候，可以使用IDA来调试so文件去破解。当然破解和加密总是相生相克的。
[]{#137.xhtml}
### 第23章 逆向加固应用 {.bodycontent-title4}
本章主要介绍如何应对Android中一些apk加固的安全防护，在之前的两章中，可以看到一个是针对于Java层的逆向，一个是针对于native层的逆向，还没有涉及apk的加固，那么本章就要来介绍一下如何应对现在市场中一些加固apk的逆向方法，现在市场中加固apk的方式有两种：一种是对源apk整体做一个加固，放到指定位置，运行的时候再解密动态加载；还有一种是对so进行加固，在so加载内存的时候进行解密释放。本章主要介绍第一种加固方式，就是对apk整体进行加固。
[]{#138.xhtml}
#### 23.1 逆向加固应用的思路 {.bodycontent-title2}
按照逆向惯例，用一个案例来分析讲解，这次依然采用的是阿里的CTF比赛的第三题，如图23-1所示。
::: bodypic-c
![](OEBPS/Images/23a1-i.jpg){.calibre864}
:::
图23-1 破解应用界面\
题目是：要求输入一个网页的URL，然后跳转到这个页面，但是必须要求弹出指定内容的Toast提示，这个内容是：祥龙！
了解到题目，就来简单分析一下。这里大致的逻辑应该是，输入的URL会传递给一个WebView控件，进行展示网页。如果按照题目的逻辑的话，应该是网页中的JavaScript会调用本地的一个Java方法，然后弹出相应的提示。那么下面就开始操作。
按照之前的破解步骤：
[第一步：]{.yanse}先用解压软件解压出它的classes.dex文件，然后使用dex2jar+jd--gui查看Java代码，如图23-2所示。
这里只有一个Application类，这个apk可能被加固了，为什么这么说呢？因为一个apk加固，外面肯定得套一个壳，这个壳必须是自定义的Application类，它需要做一些初始化操作，那么一般现在加固的apk壳的Application类都喜欢叫StubApplication。这里可以看到，除了一个Application类，没有其他任何类了，包括入口Activity类都没有了，那么这时候会发现，无处下手了。
::: bodypic-c
![](OEBPS/Images/23a2-i.jpg){.calibre865}
:::
图23-2 应用的classes.dex文件
[第二步：]{.yanse}会使用Apktool工具进行apk的反编译，得到apk的AndroidManifest.xml和资源内容，如下所示：
::: bodypic-c
![](OEBPS/Images/357-2-i.jpg){.calibre866}
:::
反编译之后，看到程序会有一个入口的Activity，就是MainActivity类，记住一点，不管最后的apk如何加固，即使看不到代码中的四大组件的定义，也肯定会在AndroidManifest.xml中声明，因为如果不声明的话，运行是会报错的。这里还是没发现入口Activity类，而且知道它肯定是放在本地的一个地方，因为需要解密动态加载，所以不可能是放在网上的，肯定是本地。
这里的技巧如下：当发现apk中主要的类都没有了，肯定是apk被加固了，加固的源程序肯定是在本地，一般会有这么几个地方需要注意的：
·应用程序的assets目录，知道这个目录是不参与apk的资源编译过程的，所以很多加固的应用喜欢把加密之后的源apk放到这里。
·把源apk加密放到壳的dex文件的尾部，这个方式肯定不是本文的案例，但是也有这样的加固方式，遇到这种加固方式会导致用dex2jar工具解析dex失败，这时候就知道了，肯定对dex做了手脚。
·把源apk加密放到so文件中，这就比较难了，一般都是把源apk进行拆分，存到so文件中，分析难度会加大的。
一般都是这三个地方。记住一点，不管源apk被拆分，被加密了，被放到哪了，只要是在本地，都有办法得到它。
按照这上面的三个思路来分析一下，这个apk中加固的源apk放在哪了？通过刚刚的dex文件分析，发现第二种方式肯定不可能，那么会放在assets目录中吗？查看assets目录，如图23-3所示。
::: bodypic-c
![](OEBPS/Images/23a3-i.jpg){.calibre867}
:::
图23-3 应用的assets目录\
assets目录中的确有两个jar文件，而且第一反应是使用jd-gui来查看jar，可惜的是打开失败，所以猜想这个jar是经过处理了，应该是加密，这里很有可能是存放源apk的地方。但是上面也说了还有第三种方式，去看看libs目录中的so文件，如图23-4所示。
::: bodypic-c
![](OEBPS/Images/23a4-i.jpg){.calibre868}
:::
图23-4 应用的libs目录\
这里有三个so文件，而上面的Application中加载的只有一个so文件：libmobisec.so，那么其他的两个so文件很有可能是拆分apk文件的藏身之处。
通过上面的分析之后，大致知道了两个地方很有可能是源apk的藏身之处，一个是assets目录，一个是libs目录。那么分析完了之后发现现在面临两个问题：
·assets目录中的jar文件被处理了，打不开，也不知道处理逻辑。
·libs目录中的三个so文件，唯一加载了libmobisec.so文件了。
这里现在的唯一入口就是这个libmobisec.so文件，因为上层的代码没有，没法分析，下面来看一下so文件，如图23-5所示。
::: bodypic-c
![](OEBPS/Images/23a5-i.jpg){.calibre869}
:::
图23-5 so中的函数列表\
这里没有特殊的方法，比如Java_开头的方法，所以猜测这里应该是自己注册了native方法，混淆了native方法名称。那么到这里，会发现遇到的问题用现阶段的技术是没法解决了。
[]{#139.xhtml}
#### 23.2 获取解密之后的dex文件 {.bodycontent-title2}
分析完上面的破解流程之后，发现首要的任务是先得到源apk程序，通过分析知道，处理源apk程序很难找到，所以就要引出本章的内容了：使用动态调试，给libdvm.so中的函数dvmDexFileOpenPartial下断点，然后得到dex文件在内存中的起始地址和大小，然后dump出dex数据即可。
这里会有人提出几个问题。
###### 第一个问题：为何要在dvmDexFileOpenPartial函数下断点？ {.section-subtitle}
不管之前的源程序如何加固，放到哪了，最终都是需要被加载到内存中然后运行，而且是没有加密的内容，那么只要找到dex的内存位置，把这部分数据弄出来就可以了，管它之前是如何加固的，那么问题就变成了，如何获取加载到内存中的dex的地址和大小。这要用到函数dvmDexFileOpenPartial，因为这个函数是最终分析dex文件，加载到内存中的函数：
::: bodypic-c
![](OEBPS/Images/359-i.jpg){.calibre149}
:::
第一个参数是dex内存起始地址，第二个参数是dex大小。
###### 第二个问题：如何使用IDA给这个函数下断点 {.section-subtitle}
在前一章中介绍了动态调试so，下断点的时候必须知道一个函数在内存中的绝对地址，而函数的绝对地址是：这个函数在so文件中的相对地址+so文件映射到内存中的基地址。这个函数肯定是存在libdvm.so文件中的，因为一般涉及dvm有关的函数功能都是存在这个so文件中，那么可以从这个so文件中找到这个函数的相对地址，运行程序之后，再找到libdvm.so的基地址，相加即可。如何获取到libdvm.so文件呢？这个文件是存放在设备的/system/lib目录下的：
::: bodypic-c
![](OEBPS/Images/359-2-i.jpg){.calibre213}
:::
只需要使用adb pull命令把这个so文件弄出来就可以了。
解决了这两个问题，下面就开始操作了。
[第一步：]{.yanse}运行设备中的android_server命令，使用adb
forward进行端口转发：
::: bodypic-c
![](OEBPS/Images/359-3-i.jpg){.calibre839}
:::
::: bodypic-c
![](OEBPS/Images/360-i.jpg){.calibre870}
:::
这里的android_server工具可以去ida安装目录中dbgsrv文件夹中找到：
::: bodypic-c
![](OEBPS/Images/360-2-i.jpg){.calibre110}
:::
[第二步：]{.yanse}使用命令以debug模式启动apk：
::: bodypic-c
![](OEBPS/Images/360-3-i.jpg){.calibre408}
:::
因为需要给libdvm.so下断点，这个库是系统库，所以加载时间很早。需要像之前给JNI_OnLoad函数下断点一样，采用debugger模式运行程序，这里通过上面的AndroidManifest.xml中得到应用的包名和入口Activity：
::: bodypic-c
![](OEBPS/Images/360-4-i.jpg){.calibre871}
:::
而且这里的android：debuggable=true可以进行debug调试的。
[第三步：]{.yanse}双开IDA，一个用于静态分析libdvm.so，一个用于动态调试libdvm.so。
通过IDA的Debugger菜单，如图23-6所示。进行进程附加操作，如图23-7所示。
::: bodypic-c
![](OEBPS/Images/23a6-i.jpg){.calibre872}
:::
图23-6 设置调试端口
::: bodypic-c
![](OEBPS/Images/23a7-i.jpg){.calibre873}
:::
图23-7 搜索附加进程
[第四步：]{.yanse}使用jdb命令启动连接attach调试器：
::: bodypic-c
![](OEBPS/Images/360-7-i.jpg){.calibre484}
:::
但是这里可能会出现这样的错误：
::: bodypic-c
![](OEBPS/Images/360-8-i.jpg){.calibre102}
:::
::: bodypic-c
![](OEBPS/Images/361-i.jpg){.calibre874}
:::
这是因为8700端口没有指定，这时候可以通过Eclipse的DDMS进行端口查看，如图23-8所示。\
::: bodypic-c
![](OEBPS/Images/23a8-i.jpg){.calibre875}
:::
图23-8 查看进程调试端口
这里是8600端口，但是基本端口8700不在。有两种处理方式，一种方式是把上面的命令的端口改成8600，还有一种方式是选中这个应用，使其具有8700端口，如图23-9所示。
::: bodypic-c
![](OEBPS/Images/23a9-i.jpg){.calibre876}
:::
图23-9 设置8700端口
点击这个条目即可，这时候再运行上面的jdb命令：
::: bodypic-c
![](OEBPS/Images/361-4-i.jpg){.calibre877}
:::
处于等待状态。
[第五步：]{.yanse}给dvmDexFileOpenPartial函数下断点。
使用一个IDA静态分析得到这个函数的相对地址43308，如下所示：
::: bodypic-c
![](OEBPS/Images/362-i.jpg){.calibre8}
:::
在动态调试的IDA中进行解密，使用Ctrl+S键找到libdvm.so在内存中的基地址41579000，如图23-10所示。
::: bodypic-c
![](OEBPS/Images/23a10-i.jpg){.calibre878}
:::
图23-10 函数的基地址
然后将两者相加得到绝对地址43308+41579000=415BC308，使用G键，跳转，如图23-11所示。
::: bodypic-c
![](OEBPS/Images/23a11-i.jpg){.calibre879}
:::
图23-11 跳转到绝对地址
跳转到dvmDexFileOpenPartial函数处，下断点，如下所示：
::: bodypic-c
![](OEBPS/Images/362-4-i.jpg){.calibre880}
:::
[第六步：]{.yanse}点击运行按钮或者F9键运行程序。
之前的jdb命令就连接上了：
::: bodypic-c
![](OEBPS/Images/362-5-i.jpg){.calibre394}
:::
IDA出现一些提示界面，不要理会，一路点击Cancel按钮即可，如图23-12所示。
::: bodypic-c
![](OEBPS/Images/23a12-i.jpg){.calibre881}
:::
图23-12 加载so文件对话框
运行到了dvmDexFileOpenPartial函数处，如下所示：
::: bodypic-c
![](OEBPS/Images/363-2-i.jpg){.calibre882}
:::
使用F8键进行单步调试。这里需要注意的是，只要运行过了PUSH命令就可以了，记得不要越过下面的BL命令，因为没必要走到那里。当执行了PUSH命令之后，就是使用脚本来dump出内存中的dex数据了。这里有一个知识点：R0～R4寄存器一般是用来存放一个函数的参数值的，而dvmDexFileOpenPartial函数的第一个参数就是dex内存起始地址，第二个参数就是dex大小，如下所示：
::: bodypic-c
![](OEBPS/Images/363-3-i.jpg){.calibre883}
:::
这里就可以使用这样的脚本进行dump操作：
::: bodypic-c
![](OEBPS/Images/363-4-i.jpg){.calibre884}
:::
脚本不解释了，非常简单，而且这是固定的格式，以后dump内存中的dex都是用这段代码，将dump出来的dex保存到F盘中。
然后使用Shirt+F2键调出IDA的脚本，如图23-13所示。
::: bodypic-c
![](OEBPS/Images/23a13-i.jpg){.calibre885}
:::