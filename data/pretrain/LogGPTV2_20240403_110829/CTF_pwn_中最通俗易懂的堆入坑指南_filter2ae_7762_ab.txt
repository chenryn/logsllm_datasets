在上面我们动态调试的时候已经执行了 malloc 函数，申请到的堆指针是保存在 eax 中的  
我们这里使用下面这个命令来查看内存堆块情况：
    x/32gx 0x602010-0x10
  * 32位的程序使用 x/32xw 比较直观一点
这里减去 0x10 表示从堆块的头部开始观察（包含 pre size 和 size 字段）
## main_arena 与 top chunk
###  main_arena
这个 main_arena 其实就是 ptmalloc2 堆管理器通过与操作系统内核进行交互申请到的，也就是相当于上面所说的”批发”到的一堆货物
> 因为是主线程分配的，所以叫做main arena，通过增加 program break location 的方式来增加 main arena 的大小。
**使用 brk 方式扩展内存的方式这里就不说了，感兴趣可以自己去查一下资料**
参考 ctf-wiki：  
在 gdb 调试中，使用
    x/32gx &main_arena
可以看到 main_arena 的内存分配情况。
###  top chunk
顾名思义，是堆中第一个堆块。相当于一个”带头大哥”，程序以后分配到的内存到要放在他的后面。
> 在系统当前的所有 free chunk(无论那种 bin)，都无法满足用户请求的内存大小的时候，将此 chunk 当做一个应急消防员，分配给用户使用。
简单点说，也就是在程序在向堆管理器申请内存时， **没有合适的内存空间可以分配给他，此时就会从 top chunk 上”剪切”一部分作为 chunk
分配给他**
## free 函数和 bins
bins 这个概念是与内存回收相关的，也就是堆管理器会根据用户已经申请到的内存空间大小进行释放， **来决定放入哪类 bins 当作去** 。bins
直接翻译过来就是”垃圾桶”的意思，所以在系统在决定使用哪个 bins 时可以看作为”垃圾的分类”。
主要的 bins 分为以下几类，这里重点讲解一下 fast bin，因为 fast bin 是使用到的最多的一类，也是其中结构最为简单的。
###  free 函数
free 函数的使用是和 bins 的分配息息相关的。用一个简单的例子来理解一下 free 函数的实现原理。
代码如下：
    #include 
    #include 
    int main(){
            char *p;
            p = malloc(10);
            memcpy(p,"Hello",5);
            free(p);
            return 0;
    }
  * 程序将 “Hello” 字符串复制到申请到的堆内存空间中。
编译后用 gdb 调试，在 call memcpy 处下一个断点，单步后将 “Hello” 复制到堆块中
继续使用 x/32gx 0x602010-0x10 命令查看堆块情况
继续单步 n，执行 free 函数之后，查看堆块情况
这里可以看出原本堆块中存储的内容已经被清空，然后 **查看一下 main_arena 的值，发现其中 +0x8 的偏移处** ，存储了指向已经 free
了的指针（指向头部，而不是 user data）
**小总结**
所以调用 free 函数以后程序做了两件事：  
 **1.清空此堆块的 user data  
2.将此堆块的指针存储到 main_arena 中了（或是 fast bin 中）**
###  fast bin
顾名思义，就是为了快速重新分配回内存而存在的一个结构。
> fastbin所包含chunk的大小为16 Bytes, 24 Bytes, 32 Bytes, … , 80
> Bytes。当分配一块较小的内存(mem Bytes)时，会首先检查对应大小的fastbin中是否包含未被使用的chunk，如果存在则直接将其从fastbin中移除并返回；否则通过其他方式（剪切top
> chunk）得到一块符合大小要求的chunk并返回。
引用一张图：
  * 这里的横向排列的就是 main_arene（fast bin）的内存地址
假如此时 0x0804a000 处的堆块（实际堆块中的 size 字段要减去 PREV_INUSE 字段值 1，）已经被 free 了，那么他就会被存储
**在表示 40 bytes 的 fast bin 的内存地址里**
  * 注意： **这里把指针和地址区别开。地址存储的是指针，64 位的指针占 8 个字节** 。
**假设我们现在还是以 64 位下的 malloc(10) 为例子。**
根据前面那个 free 函数的例子，查看 main_arena 地址中的指针值我们可以看出来， **+0x8 偏移处才是指向 malloc(10)
的堆块的指针** （这个堆块分配后的 user data 实际大小是 16 字节）
    gdb-peda$ x/2gx &main_arena                           (16 bytes 的链表头)
    0x7ffff7dd3760 :    0x0000000000000000    0x0000000000602000
所以这个 16 字节的堆块的指针会被插入属于他的这个链表队列中，也就是如下的情况。
所以这也就印证了在 main_arena 中分别表示 16 Bytes, 24 Bytes, 32 Bytes, … , 80 Bytes
的内存地址中分别存储着已经 free 的而且满足这个大小的 chunk的指针。
**fast bin 的特性**
**1.使用单链表来维护释放的堆块**  
也就是和上图一样，从main_arena 到 free 第一个块的地方是采用单链表形式进行存储的，若还有 free 掉的堆块，则这个堆块的 fk
指针域就会指针前一个堆块。
如下图所示，此时就是一个单链表结构
**2.采用后进先出的方式维护链表（类似于栈的结构）**  
当程序需要重新 malloc 内存并且需要从fastbin 中挑选堆块时， **会选择后面新加入的堆块拿来先进行内存分配**
如上图，如果程序重新请求和上面的堆块大小一样时候（malloc），堆管理器就会直接使用 fast bin 里的堆块。
**这里的话也就是直接使用第二次释放的这个堆块，然后将这个堆块从链表中移除，接着根据堆块的 fk 指针找到这个堆块** ，此时 main_arena
就指向了这里。也就是恢复到了上面第一个图中的情况。
###  small bin
顾名思义，这个是一个 small chunk ，满足的内存空间比 fast bin 大一点。
如果程序请求的内存范围不在 fast bin 的范围内，就会考虑small bin。简单点说就是大于 80 Bytes 小于某一个值时，就会选择他。
###  unsorted bin
> 当 fast bin、small bin 中的 chunk 都不能满足用户请求 chunk 大小时，堆管理器就会考虑使用 unsorted bin
> 。它会在分配 large chunk 之前对堆中碎片 chunk 进行合并，以便减少堆中的碎片。
  * unsorted bin 与 fast bin 不同，他使用 **双向链表** 对 chunk 进行连接
  * unsorted 的字面意思就是”不可回收”的意思，可以看作将不可回收的垃圾（不满足能够进行内存分配的堆块）都放到这个”垃圾桶”中。
## 总结
总之想要通透的理解堆这个概念，还是要多写一点小程序动手调试，多看看网上大牛们的文章。另外可以多逛逛一些想看雪这样的专业论坛，也可以收获到很多东西。
这里只是对自己已经接触过的知识进行一些自我感觉比较通俗易懂的方式进行总结，文章中的错误在所难免，望大牛们能够谅解。
## 参考文章
[Linux堆内存管理深入分析](https://www.cnblogs.com/alisecurity/p/5486458.html)
[堆入门的必备基础知识](https://bbs.ichunqiu.com/thread-46714-1-1.html)
[浅析Linux堆溢出之fastbin](https://www.freebuf.com/news/88660.html)