权限，如图16-32所示。
图16-32 user用户应用信息
步骤五：利用 user 用户的权限来进行配置以前没有权限配置的 proxy 代理的地址信
息，直接使用hackbar工具通过POST方式提交数据，如图16-33所示。
图16-33 user用户越权提交数据
通过抓取的数据包可以看出，使用的是 user 用户权限进行提交的，如图 16-34所示。
图16-34 user用户越权提交的数据包信息
步骤六：再次使用超级管理员chinanet账户登录，单击进入“proxy代理”的配置，此时
内容已经发生改变了，如图16-35所示。
图16-35 越权提交数据的结果
16.2.4 某Web防火墙通过修改用户对应菜单类别可提升权限
攻击者以低权限身份请求登录系统，系统根据category参数的值（system.audit）分配
权限。攻击者修改category值为system.admin，系统根据category值重新分配权限为超级管
理员，如图16-36所示。
图16-36 纵向越权流程图
该系统程序对用户权限的控制是限制菜单及功能模块的访问，可以通过修改用户对应
的菜单类别的方式来改变用户身份欺骗系统，以达到访问其他权限模块的目的。
步骤一：以 audit 用户身份登录系统，使用 Burp Suite 抓包 category 的值system.audit
修改为system.admin，如图16-37所示。
图16-37 修改category参数的值为system.admin
步骤二：category值修改以后，单击Forward，进入管理员管理界面，如图16-38所
示。
图16-38 audit提升为system.admin权限
步骤三：将useradmin账户权限设置为最大，如图16-39所示。
图16-39 将useradmin修改为最大权限
步骤四：使用useradmin账户登录系统，useradmin拥有管理员权限，如图16-40所示。
图16-79 登录useradmin账户
16.3 防范越权访问漏洞的相关手段
实现应用程序的完善的访问控制不是件容易的事，越权漏洞防不胜防，本章从越权漏
洞相关案例给出以下几点建议：
（1）对于开发者而言，一定要有安全意识，时刻保持警惕。
（2）永远不要相信来自客户端（用户）的输入，对于可控参数进行严格的检查与过
滤。
（3）执行关键操作前必须验证用户身份，多阶段功能的每一步都要验证用户身份。
（4）对于直接对象引用，加密资源ID，以防止攻击者对ID进行枚举。
（5）在前端实现的验证并不可靠，前端可以验证用户的输入是否合规，要在服务端
对请求的数据和当前用户身份做校验。检查提交CRUD请求的操作者（Session）与目标对
象的权限所有者（查数据库）是否一致，如果不一致则阻断。
（6）在调用功能之前，验证当前用户身份是否有权限调用相关功能（推荐使用过滤
器，进行统一权限验证）。
（7）把属主、权限、对象、操作的场景抽象成一个统一的框架，在框架内统一实现
权限的管理和检查。
第17章 OAuth 2.0安全案例总结
17.1 OAuth2.0认证原理
Oauth 允许用户让第三方应用访问该用户在某一网站上存储的私密资源（如照片、视
频、联系人列表），而无须将用户名和密码提供给第三方应用的协议。
OAuth 2.0 认证流程如图 17-1 所示。原理很简单，用户访问 App，App 访问
Authorization Server请求权限，Authorization Server得到用户同意后，返回Token，App通
过这个Token向Authorization Server索要数据，App只能从Authorization Server获取服务器
数据，而无法直接访问Resource Server。下面用Facebook的Oath2.0登录过程作为举例。
步骤一：App向Oauth Server请求的URL里面带着该App的id、key、请求的类型、返回
一串的access_token和事件类型code。
https://facebook.com/dialog/oauth?
response_type=code&client_id=YOUR_CLIENT_ID&redirect_uri=REDIRECT_URI&scope=email
步骤二：回调，跳转到权限确认页面等待用户确认授权。
https://facebook.com/dialog/oauth?
response_type=code&client_id=28653682475872&redirect_uri=example.com&scope=email
该页面通过redirect_uri，回调到指定的callback页面。
图17-1 OAuth 2.0认证流程图
步骤三：利用返回的access_token，将App的id、key以及code代码发包到POST
https：//graph.facebook.com/oauth/access_token。
这一步是为了获取Token。
步骤四：Oauth Server返回Token，这时，就可以通过Token获取用户授权的资源了。
资料参考：
· http://oauth.net/2/
· https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2
17.2 OAuth2.0漏洞总结
17.2.1 某社交网站CSRF漏洞导致绑定劫持
某社交网站-百度 OAuth 2.0 认证流程中，没有提供有效的方式来抵抗针对redirect_uir
的CSRF攻击。如果攻击成功，攻击者不需要知道受害用户的账号和密码就可登录受害账
号。
某社交网站-百度 OAuth 2.0 认证流程中链接为
https：//openapi.baidu.com/oauth/2.0/authorize？
response_type=code&client_id=foRRWjPq8In3SIhmKQw1Pep3&redirect_uri=http：//www.xxxx.com/bind/baidu/baiduLoginCallBack。
某社交网站并没有加入state参数来抵抗针对redirect_uir的CSRF攻击。如果攻击者重新
发起一个某社交网站百度OAuth 2.0认证请求，并截获OAuth 2.0认证请求的返回：
http：//www.xxxx.com/bind/baidu/baiduLoginCallBack？code=f056147c661d0b9
fbb6cd305567cb994。
攻击者诱骗已经登录的某社交网站用户单击立即绑定（比如通过邮件或者 QQ等方
式），如图17-2所示，网站会自动将用户的账号同攻击者的账号绑定到一起，如图17-3所
示。
图17-2 某社交网站-百度账号绑定
图17-3 百度账号绑定成功
修复建议：OAuth 2.0提供了state参数用于CSRF认证服务器将接收到的state参数按原
样返回给redirect_uri，客户端收到该参数并验证与之前生成的值是否一致。除此方法外也
可使用传统的CSRF防御方案。
17.2.2 某社区劫持授权
以某社区账号登录“微博通”应用的授权页面为例，如图17-4所示。
图17-4 授权页面
http://open.xxxx.cn/oauth/authorize.php?oauth_token=e65d28ab0862cbd517c67c3cc
6f2247e052ad9c22&oauth_callback=http%3A%2F%2Fm.wbto.cn%3A80%2F%3Fc%3D
m_setting%26m%3Dauth%26b%3Dcallback%26pid%3D24%26aid%3D%26wbto%3D16
58628_953c148f2d%26oauth_token%3De65d28ab0862cbd517c67c3cc6f2247e052ad9c22%26oauth_token_secret%3D2fde10390cd1a2477abaa3dcd44e4b99
其中，oauth_callback没有与应用的oauth_token进行绑定，没有对可用性进行校验，可
以修改为任意地址。这里我们把oauth_callback的值改为xxx.org，并没有提示uri 非法。登
录并授权，跳转到了指定的地址，用户的 oauth_token 泄露，如图 17-5所示。
图17-5 跳转到xxx.org
修复建议：请遵循OAuth协议规范，将应用的oauth_token与oauth_callback绑定，对
oauth_callback进行有效性校验。
17.3 防范OAuth2.0漏洞的相关手段
关于防范OAuth2.0漏洞的安全建议如下。
（1）绑定劫持安全建议
OAuth 2.0提供了state参数用于防御CSRF。认证服务器接收到的state参数按原样返回
给redirect_uri，客户端收到该参数并验证与之前生成的值是否一致。
（2）授权劫持安全建议
用户授权凭证会由服务器转发到 redirect_uri 对应的地址，如果攻击者伪造redirect_uri
为自己的地址，然后诱导用户发送该请求，之后获取的凭证就会发送给攻击者伪造的回调
地址。攻击者使用该凭证即可登录用户账号，造成授权劫持。正常情况下，为了防止该情
况出现，认证服务器会验证自己的 client_id 与回调地址是否对应。常见的方法是验证回调
地址的主域。
第18章 在线支付安全案例总结
目前网络在线消费和支付，已遍布人们生活的衣食住行等各个方面，比如网上商城在
线购物、水电燃气在线缴费、手机话费在线充值等。由于在线消费和支付过程中涉及真金
白银，一旦存在漏洞，将会带来重大的经济损失。
18.1 某快餐连锁店官网订单金额篡改
篡改订单金额的流程如图18-1所示。
图18-1 篡改订单金额流程
步骤一：登录某快餐连锁官网，选择快餐后，显示要支付的金额46元，在Chrome浏
览器中，按 F12 快捷键，在浏览器下方弹出开发者工具，选择最左侧的箭头，如图18-2所
示。
图18-2 调用开发者工具
步骤二：单击已输入金额46元的地方，可以看到该处HTML代码如图18-3所示。
图18-3 查看金额部分HTML代码
步骤三：把金额46元修改为0.01元，如图18-4所示。
图18-4 修改快餐实际金额
步骤四：调用支付宝接口，可以用0.01元购买价值46元的快餐，如图18-5所示。
图18-5 通过支付宝进行支付
18.2 某网上商城订单数量篡改
篡改订单数量的流程如图18-6所示。
图18-6 篡改订单数量流程图
步骤一：在某网上商城购买商品，在购物车中填入购买数量时，可以填入负数，如图
18-7所示。
图18-7 将物品一的数量修改为负数
步骤二：通过填入负数，服务器端会进行数量相加，运算过程及结果是-1*55+1*59=4
元，因此造成支付漏洞，如图18-8所示。
图18-8 最终支付金额
18.3 某服务器供应商平台订单请求重放测试
订单请求重放测试流程如图18-9所示。
步骤一：在某服务器供应商平台上购买服务器资源，购买时通过抓包并进行多次重放
测试，有90%的概率发生购买服务器价格为0元的情况，订单如图18-10所示。
图18-9 订单请求重放测试流程图
图18-10 购买订单
步骤二：服务器可以进行管理和运行，如图18-11所示。
图18-11 购买后的服务器运行状态
18.4 某培训机构官网订单其他参数干扰测试
订单其他参数干扰测试流程如图18-12所示。
图18-12 订单其他参数干扰测试流程
步骤一：在某培训机构官网上进行课程报名，同时利用抓包工具抓包，直接修改金额
发现无法修改成功，因为该参数是直接和schoolid绑定的。
通过观察和测试发现，订单中的配送方式参数可以利用，且运费金额可以修改，但该
参数的数值在服务器端会有验证，课程费用和配送运费不能低于0，否则订单无法成功提
交。
步骤二：接下来重新选择一门课程，课程的价格是1700元，同时将运费修改为-1699
元，两者相加最终费用为1元，如图18-13所示。
图18-13 抓包并修改运费
步骤三：订单成功提交，提示应付金额为1元，如图18-14所示。
图18-14 订单成功提交提示
步骤四：可以在历史订单里发现，该订单已提交成功，只需付款1元即可生效，如图
18-15所示。
图18-15 成功提交的订单历史截图
18.5 防范在线支付漏洞的相关手段
在线支付对广大消费者和商家来说日益重要，稍有不慎就会给商家带来经济损失，为
了减少或者避免在线支付环节中的业务安全问题，希望商家采取以下措施进行预防。
（1）针对订单金额篡改的预防措施
将订单中的商品价格封装为码表形式，即每个商品拥有一个ID，每个ID对应一条相
应的价格。用户访问前台选择商品并提交，服务器端验证商品 ID，然后计算商品总额并
生成订单。
（2）针对订单数量篡改的预防措施
· 在服务器端判断提交商品ID中数量参数值不低于0，如果数量参数值低于0，则直接
提示错误信息，让客户修正。
· 通过数据类型判断正确后，同时判断商城库存对应商品的剩余量，如果剩余量低于
商品的购买数量，则直接提示错误信息，让客户修正。
（3）针对订单请求重放测试的预防措施
无论支付成功还是失败时，使用的订单编号必须唯一，并且永久记录订单编号，不允
许二次使用。
（4）针对其他参数（如运费）干扰测试的预防措施
在服务器端判断订单中运费参数值不低于0，如运费参数值低于0，则直接提示错误信
息，让客户修正。