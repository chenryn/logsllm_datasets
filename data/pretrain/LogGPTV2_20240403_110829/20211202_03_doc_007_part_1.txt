Advanced SQL
06 — Procedural SQL
Torsten Grust
Universität Tübingen, Germany
1 ┆ Scripting Language + SQL = Procedural SQL
We started out in this course with the aim to move more
computation close to the data. Admitting recursion in SQL is
one way to declaratively express complex computation.
Procedural SQL follows an entirely different path towards
this goal:
Implement application logic inside the RDBMS, even if
this computation is inherently procedural (≡ sequential,
imperative).
Use SQL as a sub-language of a scripting language whose
types match those of the tabular data model.
Procedural SQL: Less Round-Trips, Less Stitching
Program ╎ Program
╎ Qᵢ SQL query
╎
╎ query
╎ invocation
╎ Q₁₂₃
╎ &'(')*(+,
Q₁ Q₂ Q₃ ╎
╎ DB result
╎ processing
DB ╎ Q₁₂₃: {Q₁;Q₂;Q₃}
╎ {;;} SQL procedure
╎
╎
Stitching: On the PL heap, piece together the tabular
results delivered by the individual SQL queries Qᵢ.
Procedural SQL aka Stored Procedures
Code in Procedural SQL is organized in functions/procedures
that are stored persistently by the DBMS.1
These functions/procedures…
may be used anywhere that SQL's built-ins could be used,
inherit all user-defined types, functions, and operators,
can define new operators, aggregate/window functions, and
triggers.
1 This implies that we need to manage these procedures using familiar constructs like
CREATE PROCEDURE …, CREATE FUNCTION …, DROP PROCEDURE [IF EXISTS] …, etc.
PL/SQL:2 Scripting with SQL Types
CREATE FUNCTION -(.₁ τ₁, …, .ₙ τₙ) RETURNS τ AS
$$ ⋯ ‹234)5› ⋯$$
LANGUAGE PLPGSQL;
The τᵢ, τ may be any scalar, array, or (named) row type.
Limited polymorphism: functions may accept/return types
anyelement, anyarray (recall our discussion of SQL UDFs).
Functions may return type record (then the caller must
provide column names/types through explicit aliasing).
Functions may return — but not accept ! — sets of
(row) values with τ ≡ SETOF τ̅.
2 PL/SQL is the widely adopted abbreviation for Procedural Language for SQL, originating in the
Oracle® RDBMS. Variants include Transact-SQL (Microsoft® SQL Server) and PL/pgSQL (PostgreSQL).
2 ┆ Block Structure ✎
PL/SQL code is organized in (nested) blocks that group
statements and define variable scopes:
[ DECLARE ‹89)3:;:'(4+&› ]
BEGIN
‹&':'9>: variable =
may then also be referred to as ‹3:293›.=.
Outermost block of body for - has implicit >.
Block Structure and Variable Scope3
(+ &)4>9 CREATE FUNCTION -(.₁ τ₁) RETURNS τ AS
┌ $$
-.x₁ ┈┈┈┈┈┈┈┈┈┈┈┈┈┈│ > -- outer block
┌│ DECLARE v τᵥ;
-.x₁, o.v ┈┈┈┈┈┈┈┈││ BEGIN
││ ⋮
││ > -- inner (sub-)block
┌││ DECLARE v τᵤ;
-.x₁, o.v, i.v ┈┈│││ BEGIN
│││ ⋮
└││ END;
││ ⋮
└│ END;
└ $$
3 Additional special variables (like FOUND) are bound in the outermost - scope (see below).
3 ┆ Variable Declarations
The optional DECLARE ‹89)3:;:'(4+&› brings typed variable(s)
= into scope. An initial binding expression 9 may be given:
DECLARE = [ CONSTANT ] τ [ NOT NULL ] [ := 9 ];
⋮
If := 9 is omitted, = has initial value NULL.
NOT NULL: any assignment of NULL yields a runtime error.
CONSTANT: the initial binding may not be overwritten.
Use )%TYPE for τ to declare = with the same type as
variable or table column named ). ✎
Variables With Row Types Have Row Values
Let F be a table with row type ()₁ τ₁, …, )ₙ τₙ). Recall:
this row type is also known as F. Thus:
-- % row type name
CREATE FUNCTION :))9&&ᵢ(t F) RETURNS F.)ᵢ%TYPE AS
$$
-- %+% table + column name
DECLARE x F.)ᵢ%TYPE; -- x has type τᵢ
BEGIN
x := t.)ᵢ; -- field access uses dot notation
RETURN x;
END;
$$
LANGUAGE PLPGSQL;
4 ┆ PL/SQL Expressions
In PL/SQL, any expression 9 that could also occur in a
SELECT clause, is a valid expression.
In fact, the execution of PL/pgSQL statements like
= := 9
IF 9 THEN ⋯ ELSE ⋯ END IF
lead to the evaluation of SELECT 9 by the SQL interpreter.
Interoperability between PL/pgSQL and SQL. &
Performance implications: context switches PL/pgSQL↔SQL.
If 9 ≡ 9(x,y), compile SQL once with parameters x,y.
5 ┆ PL/SQL Statements — Assignment ✎
= := 9
1. Evaluate 9, yields a single value (scalar, row, array,
user-defined, including NULL). 9 may not be table-valued.
2. Cast value to type τ of =.
SQL casting rules apply (may fail at runtime).
9 may use textual literal syntax (e.g., for user-
defined enumerations, JSON, or geometric objects).
3. Bind variable = to value.
Assignment of Single-Row Query Results ✎
A single-row4 SQL query augmented with INTO is a valid
PL/SQL assignment statement:
➊ SELECT 9₁, 9₂, …, 9ₙ ╎ ➋ SELECT 9₁, 9₂, …, 9ₙ
INTO = ╎ INTO =₁, =₂, …, =ₙ
FROM ⋯ ╎ FROM ⋯
1. Evaluate SQL query, obtain a single row of n values.
➊ Assign row value to row-typed variable =, or
➋ assign value of 9ᵢ to =ᵢ (i ∈ {1,…,n}).
2. Variable FOUND :: boolean indicates if a row was found.
4 Use INTO STRICT to enforce a single-row query result. Otherwise, the “first” row is picked… "
6 ┆ If All You Want Are the Side Effects…
1. Statement NULL does nothing (no side effects).
2. SQL DML statements (INSERT/DELETE/UPDATE) without
RETURNING clauses are valid PL/SQL statements: no value
is returned, the effect on the database is performed.
3. A SQL query SELECT I may be performed solely for its side
effects (e.g., invocation of a side-effecting UDF) as
well:
PERFORM I -- JKLMNLO replaces the PKQKRS keyword
⚠
Resulting rows are discarded (but variable FOUND is set).
7 ┆ Returning From a Non-Table Function (RETURNS τ)
RETURN 9
1. Evaluate 9, cast value to return type τ of the function.
If τ ≡ void, omit 9. A void function whose control flow
reaches the end of the top-level block, returns
automatically.
2. Execution resumes in the calling function or query which
receives the returned value.
To return multiple values, declare the function to return a
row type.
“Returning” From a Table Function (RETURNS SETOF τ) ✎
➊ RETURN NEXT 9; ╎ ➋ RETURN QUERY I;
& ╎ &
Add (bag semantics: ⊎⊎) to the result table computed by
the function. Execution resumes with following statement
& — no return to the caller yet.
➊ Evaluate expression 9, add scalar/row to result.
➋ Evaluate SQL query I, append rows to result.
Use plain RETURN; to return the entire result table and
resume execution in the caller.
8 ┆ Conditional Statements
IF >₀ THEN &₀ [ ELSIF >ᵢ THEN &ᵢ ]٭ [ ELSE &ₑ ] END IF
W─────────Y────────Z W────Y────Z
optional, repeatable optional
Semantics as expected; >ᵢ :: bool, &ᵢ statements.
CASE 9 [ WHEN 9ᵢ₁ [, 9ᵢⱼ]٭ THEN &ᵢ ]⁺ [ ELSE &ₑ ] END CASE
W─────────────Y─────────────Z
mandatory, repeatable
Execute first branch &ᵢ with ∃ⱼ: 9 = 9ᵢⱼ.
Raise CASE_NOT_FOUND exception (see below) if no branch
was found and ELSE &ₑ is missing.
9 ┆ Iterated Statements
➊ LOOP &↺ END LOOP
➋ WHILE > LOOP &↺ END LOOP
➌ FOR =ᵢ IN [ REVERSE ] 9₀..9₁ [ BY 9₂ ] LOOP &↺ END LOOP
❹ FOR =ᵣ IN I LOOP &↺ END LOOP
❺ FOREACH =ₐ IN [ SLICE + ] dLLde 9ₐ LOOP &↺ END LOOP
➊ Endless loop (see EXIT below).
➋ > :: bool.
➌ 9₀﹐₁﹐₂ :: int. No BY: 9₂ ≡ 1. =ᵢ :: int (auto-declared)
bound to 9₀, 9₀ ± 1×9₂, 9₀ ± 2×9₂, … (REVERSE: ± ≡ -).
❹ I SQL query. =ᵣ successively bound to resulting rows.
❺ 9ₐ :: τ[]. No SLICE: =ₐ :: τ bound to array elements.
SLICE +: =ₐ :: τ[] bound to sub-arrays in +th dimension.
Leaving/Short-Cutting Loops
All five LOOP forms support optional > prefixes:
> … QNNJ &↺ Khi QNNJ
We may alter the control flow inside a loop via:
➊ EXIT [‹3:293›] [ WHEN > ]
➋ CONTINUE [‹3:293›] [ WHEN > ]
No ‹3:293›: refer to innermost enclosing loop.