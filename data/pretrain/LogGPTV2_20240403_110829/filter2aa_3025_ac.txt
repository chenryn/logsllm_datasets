  that	
  the	
  source	
  code	
  Netgear	
  posted	
  to	
  SourceForge	
  matches	
  the	
  shipping	
  binary	
perfectly.	
  A	
  quick	
  look	
  in	
  IDA	
  Pro	
  at	
  the	
  minidlna.exe	
  executable	
  copied	
  from	
  the	
  target	
  system	
  can	
verify	
  that	
  the	
  same	
  bug	
  exists	
  on	
  the	
  shipping	
  device.	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
7 
Figure 7 Verifying the presence of a SQL injection bug in the shipping executable.  
We	
  can	
  copy	
  the	
  SQLite	
  database	
  from	
  the	
  running	
  device	
  to	
  analyze	
  its	
  contents	
  and	
  schema.	
Figure 8 Verifying the schema of the ALBUM_ART table. 
The	
  schema	
  defines	
  the	
  ALBUM_ART	
  table	
  as	
  a	
  primary	
  key	
  and	
  a	
  text	
  field	
  called	
  ‘PATH’.	
  If	
  the	
  SQL	
injection	
  works,	
  we	
  should	
  be	
  able	
  to	
  forge	
  an	
  ALBUM_ART	
  record	
  by	
  inserting	
  bogus	
  integer	
  and	
  string	
values	
  into	
  that	
  table.	
Analysis	
  of	
  the	
  source	
  code	
  shows	
  that	
  the	
  DLNA	
  client	
  device	
  retrieves	
  album	
  art	
  from	
  the	
  HTTP	
  URL	
path	
  ‘/AlbumArt/’,	
  followed	
  by	
  the	
  unique	
  ID	
  of	
  the	
  album	
  art’s	
  database	
  entry.	
  We	
  can	
  verify	
  this	
  with	
  a	
web	
  browser:	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
8 
Figure 9 Verifying album art HTTP URL in a web browser. 
We	
  can	
  easily	
  test	
  our	
  SQL	
  injection	
  vulnerability	
  using	
  the	
  wget	
  command,	
  and	
  then	
  retrieving	
  the	
database	
  from	
  the	
  running	
  device	
  for	
  analysis.	
  We	
  must	
  make	
  sure	
  the	
  GET	
  request	
  isn’t	
  truncated	
  or	
tokenized	
  as	
  a	
  result	
  of	
  spaces	
  in	
  the	
  injected	
  SQL	
  command.	
  It	
  is	
  important	
  for	
  the	
  complete	
  SQL	
syntax	
  to	
  arrive	
  intact	
  and	
  be	
  interpreted	
  correctly	
  by	
  SQLite.	
  This	
  is	
  easily	
  resolved-­‐-­‐SQLite	
  allows	
  the	
use	
  of	
  C-­‐style	
  comment	
  to	
  separate	
  keywords,	
  which	
  we	
  can	
  substitute	
  for	
  spaces:	
 INSERT/**/into/**/ALBUM_ART(ID,PATH)/**/VALUES(‘31337’,‘pwned’); 
Before	
  testing	
  this	
  injection,	
  it	
  is	
  worth	
  noting	
  that	
  plugging	
  in	
  a	
  FAT-­‐formatted	
  USB	
  disk	
  causes	
MiniDLNA	
  to	
  create	
  the	
  SQLite	
  database	
  on	
  the	
  disk,	
  rather	
  than	
  on	
  the	
  target’s	
  temporary	
  file	
  system.	
Later,	
  we	
  will	
  see	
  a	
  way	
  to	
  extract	
  the	
  database	
  from	
  the	
  running	
  system	
  over	
  the	
  network,	
  but	
  for	
  now,	
we	
  will	
  ensure	
  a	
  USB	
  disk	
  is	
  plugged	
  in,	
  so	
  we	
  can	
  power	
  off	
  the	
  device,	
  connect	
  the	
  disk	
  to	
  our	
  own	
system,	
  and	
  analyze	
  the	
  resulting	
  database	
  offline.	
Append	
  the	
  injected	
  command	
  after	
  the	
  requested	
  album’s	
  unique	
  ID:	
Figure 10 A trivially exploitable SQL injection vulnerability. 
The	
  good	
  news	
  is	
  we	
  have	
  a	
  working,	
  trivially	
  exploitable	
  SQL	
  injection!	
  We	
  have	
  created	
  an	
ALBUM_ART	
  record	
  consisting	
  of	
  31337	
  and	
  ‘pwned’.	
  The	
  bad	
  news	
  is	
  this	
  exploit,	
  on	
  its	
  own,	
  is	
  of	
  little	
value.	
  This	
  database	
  contains	
  metadata	
  about	
  the	
  user’s	
  music	
  and	
  videos,	
  but	
  no	
  real	
  sensitive	
  or	
valuable	
  information.	
  In	
  fact,	
  if	
  the	
  database	
  is	
  destroyed,	
  it	
  is	
  regenerated	
  the	
  next	
  time	
  MiniDLNA	
indexes	
  the	
  user’s	
  media	
  files.	
  No	
  valuable	
  information	
  can	
  be	
  compromised	
  from	
  this	
  exploit	
  alone.	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
9 
What	
  we	
  will	
  look	
  at	
  next	
  is	
  how	
  the	
  MiniDLNA	
  application	
  uses	
  results	
  of	
  its	
  database	
  queries.	
  We	
  will	
see	
  how	
  assumptions	
  about	
  the	
  integrity	
  of	
  query	
  results	
  create	
  the	
  opportunity	
  for	
  more	
  significant	
security	
  vulnerabilities.	
Vulnerability 2: Arbitrary File Extraction 
By	
  analyzing	
  the	
  contents	
  of	
  MiniDLNA’s	
  populated	
  database...	
Figure 11 Analyzing the PATH field of an ALBUM_ART record. 
...as	
  well	
  the	
  source	
  code	
  for	
  the	
  SendResp_albumArt()	
  function...	
Figure 12 The SendResp_albumArt() function appears to send any file on the system that the query result points to. 
...we	
  can	
  make	
  an	
  interesting	
  observation.	
  It	
  appears	
  MiniDLNA	
  serves	
  up	
  whatever	
  file	
  is	
  pointed	
  to	
  by	
the	
  PATH	
  value	
  from	
  the	
  query	
  result.	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
10 
What	
  makes	
  this	
  even	
  more	
  interesting	
  is	
  that	
  MiniDLNA,	
  like	
  all	
  processes	
  on	
  the	
  device,	
  is	
  running	
  as	
the	
  root	
  user.	
  It	
  is	
  not	
  prevented	
  from	
  accessing	
  any	
  arbitrary	
  file	
  from	
  the	
  system.	
  We	
  can	
  verify	
  this	
by	
  injecting	
  the	
  following	
  query:	
INSERT/**/into/**/ALBUM_ART(ID,PATH)/**/VALUES(‘31337’,‘/etc/passwd’); 
We	
  test	
  this	
  with	
  wget:	
Figure 13 A SQL injection allows us to wget arbitrary files via HTTP. 
With	
  that,	
  we	
  have	
  vulnerability	
  number	
  two:	
  arbitrary	
  file	
  extraction!	
  We	
  have	
  used	
  the	
  original	
  SQL	
injection	
  from	
  before	
  in	
  order	
  to	
  exploit	
  a	
  second	
  vulnerability-­‐-­‐the	
  MiniDLNA	
  application	
  fails	
  to	
sanitize	
  the	
  ‘path’	
  result	
  from	
  its	
  album	
  art	
  database	
  query.	
This	
  is	
  a	
  useful	
  attack	
  against	
  the	
  device.	
  First,	
  the	
  passwd	
  file	
  seen	
  in	
  the	
  above	
  example	
  contains	
  the	
password	
  for	
  the	
  ‘admin’	
  user	
  account.	
  The	
  Samba	
  file	
  sharing	
  service	
  creates	
  this	
  file	
  whenever	
  the	
user	
  connects	
  a	
  USB	
  storage	
  device,	
  even	
  though	
  the	
  user	
  has	
  not	
  enabled	
  sharing	
  on	
  the	
  WNDR3700’s	
configuration	
  page.	
  Further,	
  the	
  device	
  does	
  not	
  support	
  creation	
  of	
  accounts	
  and	
  passwords	
  for	
  file	
sharing	
  that	
  are	
  separate	
  from	
  the	
  system	
  configuration	
  account.	
  The	
  password	
  shown	
  above,	
‘qw12QW!@’	
  enables	
  complete	
  access	
  to	
  the	
  device’s	
  configuration	
  web	
  interface.	
SQL	
  Injection	
  to	
  MIPS	
  Overflows:	
  Rooting	
  SOHO	
  Routers	
Zachary	
  Cutlip	
11 
Secondly,	
  the	
  ability	
  to	
  quickly	
  and	
  easily	
  extract	
  arbitrary	
  files	
  from	
  the	
  running	
  system	
  makes	
  analysis	
easier	
  during	
  the	
  development	
  of	
  our	
  next	
  exploit.	
  We	
  can	