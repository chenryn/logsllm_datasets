title:Revealing GPUs Vulnerabilities by Combining Register-Transfer and
Software-Level Fault Injection
author:Fernando Fernandes dos Santos and
Josie E. Rodriguez Condia and
Luigi Carro and
Matteo Sonza Reorda and
Paolo Rech
2
4
0
0
0
.
1
2
0
2
.
7
8
9
8
4
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
7
-
2
7
5
3
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
t
s
1
5
1
2
0
2
2021 51st Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Revealing GPUs Vulnerabilities by Combining
Register-Transfer and Software-Level Fault Injection
Fernando F. dos Santos†
Josie E. Rodriguez Condia*
Luigi Carro† Matteo Sonza Reorda*
Paolo Rech*
†PPGC, Institute of Informatics, Universidade Federal do Rio Grande do Sul, Porto Alegre, Brasil
{ffsantos | carro}@inf.ufrgs.br
*Department of Control and Computer Engineering, Politecnico di Torino, Torino, Italy
{josie.rodriguez | matteo.sonzareorda | paolo.rech}@polito.it
Abstract—The complexity of both hardware and software
makes GPUs reliability evaluation extremely challenging. A low
level fault injection on a GPU model, despite being accurate,
would take a prohibitively long time (months to years), while
software fault injection, despite being quick, cannot access critical
resources for GPUs and typically uses synthetic fault models (e.g.,
single bit-ﬂips) that could result in unrealistic evaluations.
This paper proposes to combine the accuracy of Register-
Transfer Level (RTL) fault injection with the efﬁciency of soft-
ware fault injection. First, on an RTL GPU model (FlexGripPlus),
we inject over 1.5 million faults in low-level resources that are
unprotected and hidden to the programmer, and characterize
their effects on the output of common instructions. We create a
pool of possible fault effects on the operation output based on the
instruction opcode and input characteristics. We then inject these
fault effects, at the application level, using an updated version
of a software framework (NVBitFI).
Our strategy reduces the fault injection time from the tens
of years an RTL evaluation would need to tens of hours, thus
allowing, for the ﬁrst time on GPUs, to track the fault propaga-
tion from the hardware to the output of complex applications.
Additionally, we provide a more realistic fault model and show
that single bit-ﬂip injection would underestimate the error rate
of six HPC applications and two convolutional neural networks
by up to 48% (18% on average). The RTL fault models and
the injection framework we developed are made available in
a public repository to enable third-party evaluations and ease
results reproducibility.
Index Terms—Fault
injection, Graphics Processing Unit
(GPU), Reliability
I. INTRODUCTION
The computational characteristics, efﬁciency, and ﬂexibility
of modern Graphics Processing Units (GPUs) have pushed
their adoption in High Performance Computing (HPC) and
safety-critical applications, such as autonomous vehicles for
the automotive and aerospace markets. This market shift from
consumer applications has suddenly pushed the interest, and
posed questions, about GPUs reliability.
GPU vendors have worked to improve their devices’ re-
liability by designing more robust memory cells [1] and in
the qualiﬁcation of platforms compliant with strict automotive
reliability standards as the ISO26262 [2]. In the meanwhile,
the research community has been carefully studying GPUs
reliability through fault injection/simulation [3]–[8] or beam
experiments [9], [10].
One of the main issues related to the characterization
of complex devices, such as GPUs, lies in the conﬂicting
limitations imposed by the available reliability evaluation
methodologies. These methodologies are either realistic and
exhaustive but offer limited visibility (beam experiments),
have full visibility but are extremely time-consuming (circuit
or gate-level fault simulations), or are fast and cheap, but inject
synthetic fault models in a limited set of programmer accessi-
ble resources (software fault injection). The single/double bit-
ﬂip model, adopted in most software fault injectors, accurately
represents only faults in the memory resources, which are the
ones that can be easily protected with ECC. Unfortunately, a
fault in unprotected and hidden to software resources, such as
pipeline registers, ALU, and peculiar GPU modules (scheduler
or control units), might have a not-obvious impact on the
operation(s) output that we intend to characterize.
Inspired by previous works that deﬁne the concept of
multi-level or hybrid fault injection [11]–[18], we propose to
combine Register-Transfer Level (RTL) evaluation on a GPU
model (FlexGripPlus [19]) with software fault injection in a
real GPU (NVIDIA Volta). The time required to have an RTL
reliability evaluation of highly complex codes is exacerbated
by the number of available resources in modern GPUs. For
instance, an RTL fault injection, limited to a relatively small
module as the GPU scheduler, would require more than 720
hours using a 12 nodes server to characterize LeNET, the
simplest Convolutional Neural Network (CNN). Our idea is to
characterize, with the GPU RTL model, the effect of a transient
fault in unprotected resources (we do not consider the ECC
protected memories) in the execution of the most common
SASS instructions (i.e., machine operations that are effectively
executed in the NVIDIA GPU hardware) rather than of a
whole code. Additionally, we have characterized a tiled Matrix
Multiplication (t-MxM) mini-app for its importance in CNN’s
execution [20], [21].
We measure the impact of the generic RTL fault, that we call
fault syndrome, on the output value of 12 instructions (and the
mini-app) executed with three input ranges. Then, we use the
efﬁciency of a specially crafted version of NVBitFI [3] soft-
ware fault injector to inject the most suitable fault syndrome
in real-world applications (we consider 6 HPC applications
and 2 CNNs). This strategy reduces the time required to have
a detailed reliability evaluation of complex applications from
the tens of years an RTL fault injection would need to just
tens of hours.
978-1-6654-3572-7/21/$31.00 ©2021 IEEE
DOI 10.1109/DSN48987.2021.00042