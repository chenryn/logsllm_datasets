  org_priority_lowest = 'D',
})
```
### [Dates](https://orgmode.org/manual/Deadlines-and-Scheduling.html)
TODO items can also have [timestamps](https://orgmode.org/manual/Timestamps.html) which are specifications of a date (possibly with a time or a range of times) in a special format, either `` or `` or ``. A timestamp can appear anywhere in the headline or body of an Org tree entry. Its presence causes entries to be shown on specific dates in the [agenda](#agenda).
#### Date types
##### Appointments
Meant to be used for elements of the org file that have a defined date to occur, think of a calendar appointment. In the [agenda](#agenda) display, the headline of an entry associated with a plain timestamp is shown exactly on that date. 
```org
* TODO Meet with Marie
```
When you insert the timestamps with the date popup picker with `;d` (Default: `oi.`) you can only select the day and not the time, but you can add it manually. 
You can also define a timestamp range that spans through many days `--`. The headline then is shown on the first and last day of the range, and on any dates that are displayed and fall in the range.  
##### Start working on a task dates
`SCHEDULED` defines when you are plan to start working on that task.
The headline is listed under the given date. In addition, a reminder that the scheduled date has passed is present in the compilation for today, until the entry is marked as done or [disabled](#how-to-deal-with-overdue-SCHEDULED-and-DEADLINE-tasks).
```org
*** TODO Call Trillian for a date on New Years Eve.
    SCHEDULED: 
```
Although is not a good idea (as it promotes the can pushing through the street), if you want to delay the display of this task in the agenda, use `SCHEDULED: ` the task is still scheduled on the 25th but will appear two days later. In case the task contains a repeater, the delay is considered to affect all occurrences; if you want the delay to only affect the first scheduled occurrence of the task, use `--2d` instead. 
Scheduling an item in Org mode should not be understood in the same way that we understand scheduling a meeting. Setting a date for a meeting is just [a simple appointment](#appointments), you should mark this entry with a simple plain timestamp, to get this item shown on the date where it applies. This is a frequent misunderstanding by Org users. In Org mode, scheduling means setting a date when you want to start working on an action item. 
You can set it with `s` (Default: `ois`)
##### Deadlines
`DEADLINE` are like [appointments](#appointments) in the sense that it defines when the task is supposed to be finished on. On the deadline date, the task is listed in the agenda. The difference with appointments is that you also see the task in your agenda if it is overdue and you can set a warning about the approaching deadline, starting `org_deadline_warning_days` before the due date (14 by default). It's useful then to set `DEADLINE` for those tasks that you don't want to miss that the deadline is over.
An example:
```org
* TODO Do this 
DEADLINE: 
```
You can set it with `d` (Default: `oid`).
If you need a different warning period for a special task, you can specify it. For example setting a warning period of 5 days `DEADLINE: `.  
If you're as me, you may want to remove the warning feature of `DEADLINES` to be able to keep your agenda clean. Most of times you are able to finish the task in the day, and for those that you can't specify a `SCHEDULED` date. To do so set the default number of days to `0`. 
```lua
require('orgmode').setup({
  org_deadline_warning_days = 0,
})
```
Using too many tasks with a `DEADLINE` will clutter your agenda. Use it only for the actions that you need to have a reminder, instead try to using [appointment](#appointments) dates instead. The problem of using appointments is that once the date is over you don't get a reminder in the agenda that it's overdue, if you need this, use `DEADLINE` instead.
##### [Recurring tasks](https://orgmode.org/manual/Repeated-tasks.html)
A timestamp may contain a repeater interval, indicating that it applies not only on the given date, but again and again after a certain interval of N hours (h), days (d), weeks (w), months (m), or years (y). The following shows up in the agenda every Wednesday:
```org
* TODO Go to pilates
```
When you mark a recurring task with the TODO keyword ‘DONE’, it no longer produces entries in the agenda. The problem with this is, however, is that then also the next instance of the repeated entry will not be active. Org mode deals with this in the following way: when you try to mark such an entry as done, it shifts the base date of the repeating timestamp by the repeater interval, and immediately sets the entry state back to TODO.
As a consequence of shifting the base date, this entry is no longer visible in the agenda when checking past dates, but all future instances will be visible. 
With the `+1m` cookie, the date shift is always exactly one month. So if you have not paid the rent for three months, marking this entry DONE still keeps it as an overdue deadline. Depending on the task, this may not be the best way to handle it. For example, if you forgot to call your father for 3 weeks, it does not make sense to call him 3 times in a single day to make up for it. For these tasks you can use the `++` operator, for example `++1m`. Finally, there are tasks, like changing batteries, which should always repeat a certain time after the last time you did it you can use the `.+` operator. For example:
```org
** TODO Call Father
   SCHEDULED: 
   Marking this DONE shifts the date by at least one week, but also
   by as many weeks as it takes to get this date into the future.
   However, it stays on a Sunday, even if you called and marked it
   done on Saturday.
** TODO Empty kitchen trash
   SCHEDULED: 
   Marking this DONE shifts the date by at least one day, and also
   by as many days as it takes to get the timestamp into the future.
   Since there is a time in the timestamp, the next deadline in the
   future will be on today's date if you complete the task before
   20:00.
** TODO Check the batteries in the smoke detectors
   SCHEDULED: 
   Marking this DONE shifts the date to one month after today.
** TODO Wash my hands
   SCHEDULED: 
   Marking this DONE shifts the date to exactly one hour from now.
** TODO Send report
   DEADLINE: 
```
##### How to deal with overdue SCHEDULED and DEADLINE tasks.
Quite often you may not meet the `SCHEDULED` or `DEADLINE` date. If it's not a recurring task and you have it already in your `todo.org` list, then you can safely remove the SCHEDULED or DEADLINE line.
If it's a recurring task you may want to keep the line for future iterations. That doesn't mean that it has to show in your agenda. If you have it already tracked you may want to hide it. One way I'm managing it is by deactivating the date (transforming the `<>` into `[]`) and adding a special state (`RDEACTIVATED`) so I don't mark the task as done by error. For example if we have:
```orgmode
** RDEACTIVATED Check the batteries in the smoke detectors
   SCHEDULED: [2005-11-01 Tue .+1m]
   Marking this DONE shifts the date to one month after today.
```
Once the task is ready to be marked as done you need to change the `[]` to `<>` and then you can mark it as `DONE`.
##### How to deal with recurring tasks that have checklists
Some recurring tasks may have checklists. For example:
```orgmode
* TODO Clean the inbox
  SCHEDULED: 
  - [x] Clean email
  - [x] Clean physical inbox
  - [ ] Clean computer inbox
  - [ ] Clean mobile inbox
```
Once you mark the task as done, the done items are not going to be reseted. That's why I use a special state `CHECK` to prevent the closing of a task before checking it.
For those tasks that you want to always check before closing you can add a `(CHECK)` at the end of the title. The reason is because each time you mark a recurrent task as done it switches back the state to `TODO`. For example, as of right now nvim-orgmode doesn't support the recurrence type of "the first wednesday of the month". As a workaround you can do:
```orgmode
* TODO Do X the first thursday of the month (CHECK)
  DEADLINE: 
  - [ ] Step 1
  - [ ] Step 2
  - [ ] Step ...
  - [ ] Adjust the date to match the first thursday of the month
```
#### Date management
```lua
  org = {
    org_deadline = 'd',
    org_schedule = 's',
    org_time_stamp = ';d',
  }
```
To edit existing dates you can:
* Increase/decrease the date under the cursor by 1 day with ``/`
* Increase/decrease the part of the date under the cursor with `a`/`x`
* Bring the date pop up with `e` (Default `cid`)
```lua
  org = {
    org_change_date = '',
  }
```
To be able [to use the bindings in insert mode](https://github.com/nvim-orgmode/orgmode/issues/70) too add below the org-mode configuration:
```lua
vim.cmd[[
  imap ;d ;d
  imap  
]]
```
You can also use the next [abbreviations](https://github.com/nvim-orgmode/orgmode/blob/master/DOCS.md#abbreviations):
* `:today:`: expands to today's date (example: )
* `:itoday:`: expands to an invactive version of today's date (example: [2021-06-29 Tue])
* `:now:`: expands to today's date and current time (example: )
* `:inow:`: expands to invactive version of today's date and current time (example: [2021-06-29 Tue 15:32]
### [Tags](https://orgmode.org/manual/Tag-Inheritance.html)
You can also use tags to organize your items. To edit them use `g` (Default `ot`).
```lua
  org = {
    org_set_tags_command = 'g',
  },
```
When you press that key you can type:
* `tag1`: It will add `:tag1:`.
* `tag1:tag2`: It will add `:tag1:tag2:`.
* Press `ESC`: It will remove all tags from the item.
Tags are seen as `:tag1:tag2:` on the right of the TODO item description.
Note: tags can't have spaces so use `long_break` instead of `long break`.
Tags make use of the hierarchical structure of outline trees. If a heading has a certain tag, all subheadings inherit the tag as well. For example, in the list
```
* Meeting with the French group      :work:
** Summary by Frank                  :boss:notes:
*** TODO Prepare slides for him      :action:
```
The final heading has the tags `work`, `boss`, `notes`, and `action` even though the final heading is not explicitly marked with those tags. You can also set tags that all entries in a file should inherit just as if these tags were defined in a hypothetical level zero that surrounds the entire file. Using a line like the next one:
```
#+FILETAGS: :Peter:Boss:Secret:
```
If you plan to use the [Capture](#capture) function on the file, add the `FILETAGS` like at the top of the file, otherwise it will end up in the middle of it as you capture new elements.
### `Lists
Lists start with a dash:
```org
- Org bullets
```
To create new list item press ``.
### Checkboxes 
Checkboxes or checklists are a special type of [list](#lists):
```org
- [ ] Item 1
  - [ ] Subitem 1
  - [ ] Subitem 2
- [ ] Item 2
```
If you're over an item you can create new ones with `` (if you have the `org_meta_return = ''` binding set). 
You can change the checkbox state with ``, if you check a subitem the parent item will be marked as started `oo`) if you use the next configuration.
```lua
org = {
  org_open_at_point = 'gx',
}
```
#### [Internal document links](https://orgmode.org/manual/Internal-Links.html)
Org provides several refinements to internal navigation within a document. Most notably:
* `[[Some section]]`: points to a headline with the name `Some section`.
* `[[#my-custom-id]]`: targets the entry with the `CUSTOM_ID` property set to `my-custom-id`. 
When the link does not belong to any of the cases above, Org looks for a dedicated target: the same string in double angular brackets, like `>`.
If no dedicated target exists, the link tries to match the exact name of an element within the buffer. Naming is done, unsurprisingly, with the `NAME` keyword, which has to be put in the line before the element it refers to, as in the following example
```org
#+NAME: My Target
| a  | table      |
|----+------------|
| of | four cells |
```
Ultimately, if none of the above succeeds, Org searches for a headline that is exactly the link text but may also include a `TODO` keyword and tags, or initiates a plain text search.
Note that you must make sure custom IDs, dedicated targets, and names are unique throughout the document. Org provides a linter to assist you in the process, if needed, but I have not searched yet one for nvim.
#### [External links](https://orgmode.org/guide/Hyperlinks.html)
* URL (`http://`, `https://`)
* Path to a file (`file:/path/to/org/file`). File links can contain additional information to jump to a particular location in the file when following a link. This can be: