浏览器显示页面
图1-10 基本的浏览器连接处理 14
HTTP概述 ｜ 15
步骤如下：
(a) 浏览器从URL中解析出服务器的主机名；
(b) 浏览器将服务器的主机名转换成服务器的IP地址；
(c) 浏览器将端口号（如果有的话）从URL中解析出来；
(d) 浏览器建立一条与Web服务器的TCP连接；
(e) 浏览器向服务器发送一条HTTP请求报文；
(f) 服务器向浏览器回送一条HTTP响应报文；
(g) 关闭连接，浏览器显示文档。
1.6.3 一个使用Telnet的实例
由于HTTP使用了TCP/IP传输协议，而且它是基于文本的，没有使用那些难以理
解的二进制格式，因此很容易直接与Web服务器进行对话。
Telnet程序可以将键盘连接到某个目标TCP端口，并将此TCP端口的输出回送到
显示屏上。Telnet常用于远程终端会话，但它几乎可以连接所有的TCP服务器，包
括HTTP服务器。
可以通过 Telnet 程序直接与 Web 服务器进行对话。通过 Telnet 可以打开一条到
某台机器上某个端口的 TCP 连接，然后直接向那个端口输入一些字符。Web 服务
器会将 Telnet 程序作为一个 Web 客户端来处理，所有回送给 TCP 连接的数据都
会显示在屏幕上。
我们用 Telnet 与一个实际的 Web 服务器进行交互。我们要用 Telnet 获取 URL
http://www.joes-hardware.com:80/tools.html所指向的文档（你可以自己尝试一下这
个实例）。
我们来看看会发生什么情况。
• 首先，查找www.joes-hardware.com的IP地址，打开一条到那台机器端口80的
TCP连接。Telnet会为我们完成那些“跑腿儿”的工作。
• 一旦打开了TCP连接，就要输入HTTP请求了。
• 请求结束（由一个空行表示）之后，服务器会在一条HTTP响应中将内容回送并
关闭连接。
例1-1显示了对http://www.joes-hardware.com:80/tools.html的HTTP请求实例。我
们输入的内容用粗体字表示。
16 ｜ 第1章
例1-1 一个使用Telnet的HTTP事务
% telnet www.joes-hardware.com 80
Trying 161.58.228.45...
Connected to joes-hardware.com.
Escape character is '^]'.
GET /tools.html HTTP/1.1
Host: www.joes-hardware.com
HTTP/1.1 200 OK
Date: Sun, 01 Oct 2000 23:25:17 GMT
Server: Apache/1.3.11 BSafe-SSL/1.38 (Unix) FrontPage/4.0.4.3
Last-Modified: Tue, 04 Jul 2000 09:46:21 GMT
ETag: "373979-193-3961b26d"
Accept-Ranges: bytes
Content-Length: 403
Connection: close
Content-Type: text/html
15
Joe's Tools
Tools Page
Hammers
Joe's Hardware Online has the largest selection of hammers on the
earth.
Drills
Joe's Hardware has a complete line of cordless and corded drills,
as well as the latest
in plutonium-powered atomic drills, for those big around the house
jobs. ...
Connection closed by foreign host.
Telnet会查找主机名并打开一条连接，连接到在www.joes-hardware.com的端口80
上监听的Web服务器。这条命令之后的三行内容是Telnet的输出，告诉我们它已经
建立了连接。
然后我们输入最基本的请求命令GET/tools.html HTTP/1.1，发送一个提供了源
端主机名的Host首部，后面跟上一个空行，请求从服务器www.joes-hardware.com
上获取资源tools.html。随后，服务器会以一个响应行、几个响应首部、一个空行和
最后面的HTML文档主体来应答。
要明确的是，Telnet可以很好地模拟HTTP客户端，但不能作为服务器使用。而且
对Telnet做脚本自动化是很繁琐乏味的。如果想要更灵活的工具，可以去看看nc
（netcat）。通过nc可以很方便地操纵基于UDP和TCP的流量（包括HTTP），还可
以为其编写脚本。更多细节参见http://www.bgw.org/tutorials/utilities/nc.php2。
注2： 该链接已失效，读者可以访问http://en.wikipedia.org/wiki/Netcat。（编者注）
HTTP概述 ｜ 17
1.7 协议版本
现在使用的HTTP协议有几个版本。HTTP应用程序要尽量强健地处理各种不同的
HTTP协议变体。目前仍在使用的版本如下。
• HTTP/0.9
HTTP的1991原型版本称为HTTP/0.9。这个协议有很多严重的设计缺陷，只应
该用于与老客户端的交互。HTTP/0.9只支持GET方法，不支持多媒体内容的
MIME类型、各种HTTP首部，或者版本号。HTTP/0.9定义的初衷是为了获取
简单的HTML对象，它很快就被HTTP/1.0取代了。
• HTTP/1.0
1.0是第一个得到广泛使用的HTTP版本。HTTP/1.0添加了版本号、各种HTTP
首部、一些额外的方法，以及对多媒体对象的处理。HTTP/1.0使得包含生动图
16 片的Web页面和交互式表格成为可能，而这些页面和表格促使万维网为人们广
泛地接受。这个规范从未得到良好地说明。在这个HTTP协议的商业演进和学术
研究都在快速进行的时代，它集合了一系列的最佳实践。
• HTTP/1.0+
在20世纪90年代中叶，很多流行的Web客户端和服务器都在飞快地向HTTP
中添加各种特性，以满足快速扩张且在商业上十分成功的万维网的需要。其中很
多特性，包括持久的keep-alive连接、虚拟主机支持，以及代理连接支持都被加
入到HTTP之中，并成为非官方的事实标准。这种非正式的HTTP扩展版本通常
称为HTTP/1.0+。
• HTTP/1.1
HTTP/1.1重点关注的是校正HTTP设计中的结构性缺陷，明确语义，引入重要
的性能优化措施，并删除一些不好的特性。HTTP/1.1还包含了对20世纪90年
代末正在发展中的更复杂的Web应用程序和部署方式的支持。HTTP/1.1是当前
使用的HTTP版本。
• HTTP-NG（又名HTTP/2.0）
HTTP-NG是HTTP/1.1后继结构的原型建议，它重点关注的是性能的大幅优化，
以及更强大的服务逻辑远程执行框架。HTTP-NG的研究工作终止于1998年，编
写本书时，还没有任何要用此建议取代HTTP/1.1的推广计划。更多信息请参见
第10章。
18 ｜ 第1章
1.8 Web的结构组件
在本章的概述中，我们重点介绍了两个Web应用程序（Web浏览器和Web服务器）
是如何相互发送报文来实现基本事务处理的。在因特网上，要与很多Web应用程序
进行交互。在本节中，我们将列出其他一些比较重要的应用程序，如下所示。
• 代理
位于客户端和服务器之间的HTTP中间实体。
• 缓存
HTTP的仓库，使常用页面的副本可以保存在离客户端更近的地方。
• 网关
连接其他应用程序的特殊Web服务器。
• 隧道
对HTTP通信报文进行盲转发的特殊代理。
• Agent代理
发起自动HTTP请求的半智能Web客户端。
17
1.8.1 代理
首先我们来看看HTTP代理服务器，这是Web安全、应用集成以及性能优化的重要
组成模块。
如图1-11所示，代理位于客户端和服务器之间，接收所有客户端的HTTP请求，并
将这些请求转发给服务器（可能会对请求进行修改之后转发）。对用户来说，这些应
用程序就是一个代理，代表用户访问服务器。
因特网
客户端 代理 服务器
图1-11 在客户端和服务器之间转发流量的代理
出于安全考虑，通常会将代理作为转发所有Web流量的可信任中间节点使用。代理
还可以对请求和响应进行过滤。比如，在企业中对下载的应用程序进行病毒检测，
或者对小学生屏蔽一些成人才能看的内容。我们将在第6章详细介绍代理。
HTTP概述 ｜ 19
1.8.2 缓存
Web缓存（Web cache）或代理缓存（proxy cache）是一种特殊的HTTP代理服务
器，可以将经过代理传送的常用文档复制保存起来。下一个请求同一文档的客户端
就可以享受缓存的私有副本所提供的服务了（参见图1-12）。
因特网
客户端 服务器
代理缓存
客户端
18 图1-12 保存常用文档本地副本以提高性能的代理缓存
客户端从附近的缓存下载文档会比从远程Web服务器下载快得多。HTTP定义了很
多功能，使得缓存更加高效，并规范了文档的新鲜度和缓存内容的隐私性。第7章
介绍了缓存技术。
1.8.3 网关
网关（gateway）是一种特殊的服务器，作为其他服务器的中间实体使用。通常用于
将HTTP流量转换成其他的协议。网关接受请求时就好像自己是资源的源端服务器
一样。客户端可能并不知道自己正在与一个网关进行通信。
例如，一个HTTP/FTP网关会通过HTTP请求接收对FTP URI的请求，但通过FTP
协议来获取文档（参见图1-13）。得到的文档会被封装成一条HTTP报文，发送给
客户端。第8章将探讨网关。
HTTP FTP
HTTP客户端 HTTP/FTP网关 FTP服务器
图1-13 HTTP/FTP网关
20 ｜ 第1章
1.8.4 隧道
隧道（tunnel）是建立起来之后，就会在两条连接之间对原始数据进行盲转发的
HTTP应用程序。HTTP隧道通常用来在一条或多条HTTP连接上转发非HTTP数
据，转发时不会窥探数据。
HTTP 隧道的一种常见用途是通过 HTTP 连接承载加密的安全套接字层（SSL，
Secure Sockets Layer）流量，这样SSL流量就可以穿过只允许Web流量通过的防
火墙了。如图1-14所示，HTTP/SSL隧道收到一条HTTP请求，要求建立一条到目
的地址和端口的输出连接，然后在HTTP信道上通过隧道传输加密的SSL流量，这
样就可以将其盲转发到目的服务器上去了。
客户端
端口443
SSL SSL SSL连接 SSL
隧道起点 隧道终点 服务器
端口80
HTTP SSL HTTP连接 HTTP SSL
图1-14 隧道可以在非HTTP网络上转发数据（显示的是HTTP/SSL隧道）
1.8.5 Agent代理
用户Agent代理（或者简称为Agent代理）是代表用户发起HTTP请求的客户端程
序。所有发布Web请求的应用程序都是HTTP Agent代理。到目前为止，我们只提
到过一种HTTP Agent代理：Web浏览器，但用户Agent代理还有很多其他类型。 19
比如，有些自己会在Web上闲逛的自动用户Agent代理，可以在无人监视的情况下
发布HTTP事务并获取内容。这些自动代理的名字通常都很生动，比如“网络蜘蛛”
（spiders）或者“Web机器人”（Web robots）（参见图1-15）。网络蜘蛛会在Web上
闲逛，搜集信息以构建有效的Web内容档案，比如一个搜索引擎的数据库或者为比
较购物机器人生成的产品目录。更多信息请参见第9章。
HTTP概述 ｜ 21
Web服务器 Web服务器 Web服务器
搜索引擎“网络蜘蛛”
搜索引擎
数据库
20 图1-15 自动搜索引擎“网络蜘蛛”就是Agent代理，可以从世界范围内获取Web页面
1.9 起始部分的结束语
这就是我们对HTTP的简要介绍。本章中，我们重点介绍了作为多媒体传输协议使
用的HTTP。概要说明了HTTP是怎样使用URI来命名远程服务器上的多媒体资源
的，粗略介绍了如何利用HTTP请求和响应报文操纵远程服务器上的多媒体资源，
最后考察了几种使用HTTP的Web应用程序。
本书的其余章节会更加详细地介绍HTTP协议、应用程序及资源的技术机制。
1.10 更多信息
本书稍后的章节将更深入地研究HTTP，下面这些资源中也包含了与本章所涵盖的
特定主题有关的背景知识。
1.10.1 HTTP协议信息
• HTTP Pocket Reference（《HTTP口袋书》）
Clinton Wong著，O’Reilly & Associates出版公司。这本书详细介绍了HTTP，
可以作为构成HTTP事务的首部和状态码的快速参考手册。