### 浏览器显示页面
**图1-10 基本的浏览器连接处理**  
页码：14

### HTTP概述
页码：15

#### 1.6.2 基本的浏览器连接处理
以下是浏览器与Web服务器交互的基本步骤：

1. **解析URL**：浏览器从URL中提取出服务器的主机名。
2. **DNS解析**：浏览器将服务器的主机名转换为IP地址。
3. **解析端口号**：如果URL中包含端口号，浏览器将其解析出来；否则，默认使用80端口。
4. **建立TCP连接**：浏览器与Web服务器之间建立一条TCP连接。
5. **发送HTTP请求**：浏览器向服务器发送一个HTTP请求报文。
6. **接收HTTP响应**：服务器处理请求，并向浏览器返回一个HTTP响应报文。
7. **关闭连接**：连接关闭后，浏览器解析并显示文档。

#### 1.6.3 使用Telnet的实例
由于HTTP基于文本且使用了TCP/IP传输协议，因此可以直接通过Telnet与Web服务器进行通信。Telnet程序可以将键盘输入连接到目标TCP端口，并将该端口的输出回送到显示屏上。尽管Telnet主要用于远程终端会话，但它几乎可以连接所有的TCP服务器，包括HTTP服务器。

通过Telnet，用户可以直接与Web服务器对话，打开到某台机器上特定端口的TCP连接，并向该端口发送字符。Web服务器会将Telnet程序视为一个Web客户端，所有回送给TCP连接的数据都会显示在屏幕上。

下面是一个实际的例子，我们将使用Telnet获取`http://www.joes-hardware.com:80/tools.html`所指向的文档（你可以自己尝试这个例子）。

1. **查找IP地址**：首先，查找`www.joes-hardware.com`的IP地址，并打开到该机器端口80的TCP连接。Telnet会自动完成这些工作。
2. **发送HTTP请求**：一旦TCP连接建立，输入HTTP请求。
3. **接收HTTP响应**：请求结束后（由一个空行表示），服务器会在HTTP响应中返回内容并关闭连接。

**例1-1** 显示了一个使用Telnet进行HTTP事务的示例。我们输入的内容用粗体字表示。

```
% telnet www.joes-hardware.com 80
Trying 161.58.228.45...
Connected to joes-hardware.com.
Escape character is '^]'.
GET /tools.html HTTP/1.1
Host: www.joes-hardware.com

HTTP/1.1 200 OK
Date: Sun, 01 Oct 2000 23:25:17 GMT
Server: Apache/1.3.11 BSafe-SSL/1.38 (Unix) FrontPage/4.0.4.3
Last-Modified: Tue, 04 Jul 2000 09:46:21 GMT
ETag: "373979-193-3961b26d"
Accept-Ranges: bytes
Content-Length: 403
Connection: close
Content-Type: text/html

Joe's Tools
Tools Page
Hammers
Joe's Hardware Online has the largest selection of hammers on the earth.
Drills
Joe's Hardware has a complete line of cordless and corded drills,
as well as the latest in plutonium-powered atomic drills, for those big around the house jobs. ...
Connection closed by foreign host.
```

在这个例子中，Telnet会查找主机名并打开到`www.joes-hardware.com`端口80上的Web服务器的连接。随后，我们输入基本的HTTP请求命令`GET /tools.html HTTP/1.1`，并发送一个提供源端主机名的`Host`首部，后面跟一个空行。服务器会以一个响应行、几个响应首部、一个空行和最后的HTML文档主体来应答。

需要注意的是，虽然Telnet可以很好地模拟HTTP客户端，但不能作为服务器使用。此外，对Telnet进行脚本自动化操作非常繁琐。如果需要更灵活的工具，可以考虑使用`nc`（netcat）。`nc`可以方便地操纵基于UDP和TCP的流量（包括HTTP），并且可以编写脚本来自动化操作。更多细节请参见[Netcat Wikipedia](http://en.wikipedia.org/wiki/Netcat)。

### 1.7 协议版本
目前使用的HTTP协议有几个版本。HTTP应用程序应该能够强健地处理各种不同的HTTP协议变体。仍在使用的版本如下：

- **HTTP/0.9**：这是1991年的原型版本，只支持`GET`方法，不支持MIME类型、HTTP首部或版本号。它主要用于获取简单的HTML对象，很快被HTTP/1.0取代。
- **HTTP/1.0**：这是第一个广泛使用的HTTP版本，添加了版本号、各种HTTP首部、一些额外的方法以及对多媒体对象的支持。HTTP/1.0使得包含生动图片的Web页面和交互式表格成为可能，促进了万维网的普及。
- **HTTP/1.0+**：在20世纪90年代中期，许多流行的Web客户端和服务器迅速向HTTP中添加了各种特性，以满足快速发展的万维网需求。这些非正式的扩展通常被称为HTTP/1.0+。
- **HTTP/1.1**：重点是纠正HTTP设计中的结构性缺陷，明确语义，引入重要的性能优化措施，并删除一些不良特性。HTTP/1.1还支持更复杂的Web应用程序和部署方式。它是当前广泛使用的HTTP版本。
- **HTTP-NG（又名HTTP/2.0）**：这是一个关于HTTP/1.1后续结构的原型建议，重点关注性能优化和服务逻辑远程执行框架。HTTP-NG的研究工作于1998年终止，目前没有计划用此建议取代HTTP/1.1。更多信息请参见第10章。

### 1.8 Web的结构组件
在本章的概述中，我们介绍了两个Web应用程序（Web浏览器和Web服务器）是如何相互发送报文来实现基本事务处理的。除了这两个主要组件外，因特网上还有其他重要的Web应用程序，如代理、缓存、网关、隧道和Agent代理。

#### 1.8.1 代理
HTTP代理服务器是Web安全、应用集成和性能优化的重要组成部分。代理位于客户端和服务器之间，接收所有客户端的HTTP请求，并将这些请求转发给服务器（可能会对请求进行修改后再转发）。对于用户来说，代理代表他们访问服务器。出于安全考虑，代理通常被用作可信任的中间节点，可以对请求和响应进行过滤。例如，在企业中对下载的应用程序进行病毒检测，或者在学校屏蔽成人内容。详细信息请参见第6章。

#### 1.8.2 缓存
Web缓存（Web cache）或代理缓存是一种特殊的HTTP代理服务器，可以保存常用文档的本地副本。下一个请求同一文档的客户端可以从缓存中获取更快的服务。HTTP定义了许多功能，使缓存更加高效，并规范了文档的新鲜度和缓存内容的隐私性。详细信息请参见第7章。

#### 1.8.3 网关
网关是一种特殊的服务器，作为其他服务器的中间实体使用。通常用于将HTTP流量转换成其他协议。网关接受请求时就好像自己是资源的源端服务器一样。客户端可能并不知道自己正在与一个网关进行通信。例如，一个HTTP/FTP网关会通过HTTP请求接收对FTP URI的请求，但通过FTP协议来获取文档。详细信息请参见第8章。

#### 1.8.4 隧道
隧道是在两条连接之间对原始数据进行盲转发的HTTP应用程序。HTTP隧道通常用于在一条或多条HTTP连接上转发非HTTP数据，而不会窥探数据。常见用途是通过HTTP连接承载加密的SSL流量，使其可以通过只允许Web流量通过的防火墙。详细信息请参见第8章。

#### 1.8.5 Agent代理
用户Agent代理（或简称Agent代理）是代表用户发起HTTP请求的客户端程序。所有发布Web请求的应用程序都是HTTP Agent代理。最常见的Agent代理是Web浏览器，但还有许多其他类型的Agent代理。例如，有些自动Agent代理可以在无人监视的情况下发布HTTP事务并获取内容，这些自动代理通常被称为“网络蜘蛛”或“Web机器人”。详细信息请参见第9章。

### 1.9 起始部分的结束语
这就是我们对HTTP的简要介绍。本章重点介绍了HTTP作为多媒体传输协议的使用，说明了如何使用URI命名远程服务器上的多媒体资源，介绍了如何利用HTTP请求和响应报文操纵远程服务器上的多媒体资源，最后考察了几种使用HTTP的Web应用程序。本书的其余章节将更详细地介绍HTTP协议、应用程序及资源的技术机制。

### 1.10 更多信息
本书稍后的章节将更深入地研究HTTP。以下是一些与本章涵盖的主题相关的背景知识资源：

- **《HTTP口袋书》**：作者Clinton Wong，O’Reilly & Associates出版公司。这本书详细介绍了HTTP，并提供了HTTP事务中的首部和状态码的快速参考。