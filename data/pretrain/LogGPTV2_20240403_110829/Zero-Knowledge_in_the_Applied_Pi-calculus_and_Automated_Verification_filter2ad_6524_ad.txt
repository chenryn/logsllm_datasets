if hashn = h((U, nonce)) then
let N = Public2(zkp) in
let ζ = Public3(zkp) in
if ζ = h(pair(n1, bsn I )) then
let cert = blsign(U, sk(issuerK)) in
event CERTIFIED(id )
pub(cid:8)cert (cid:9)
the TPM cannot directly send cert to the veriﬁer V , since
this would reveal f .
Instead, the TPM produces a zero-
knowledge proof zkp that it knows a valid certiﬁcate. If the
TPM, however, would just send (zkp, m) to the veriﬁer, the
protocol would be subject to a trivial message substitution
attack. We instead combine m with the proof such that one
can only replace m if one redoes the proof (and this again
can only be done by knowing a valid certiﬁcate). Fortu-
nately, this can easily be done in our formalism by including
m in the public parameters of the zero-knowledge proof zkp
(there is no condition that a parameter included in the proof
actually has to be used by the formula). In this fashion we
produce a kind of zero-knowledge signature that can only be
forged if the attacker is able to produce a valid proof. Fur-
thermore, we again include a value N := exp(ζ, f ) whose
importance will become clear below. The overall shape of
the DAA-sign protocol is hence as follows:
daasigna :=
νζ.
let f = h(pair(seed(id ), cnt )) in
let N = exp(ζ, f ) in
let zkp = ZK(f, cert ; N, ζ, pk(issuerK), m; Fsign) in
event DAASIGNA(id, cnt , m).
pub(cid:8)zkp (cid:9)
daavera :=
pub(zkp).
if Ver2,4(Fsign; zkp) = true then
let N = Public1(zkp) in
let ζ = Public2(zkp) in
if Public3(zkp) = pk(issuerK) then
let m = Public4(zkp) in
event DAAVERA(m)
with Fsign := β1 = exp(β2, α1) ∧ blindver(α2, α1, β3).
An interesting point here is the choice of ζ. By prescribing
different derivations of ζ, we get different modes of DAA-
signing: an anonymous and a pseudonymous one. In case
of anonymous DAA-signing, ζ is a fresh name chosen by
the host. In this case, two signatures by the same TPM will
contain values N = exp(ζ, f ) and N (cid:4) = exp(ζ(cid:4), f ) for
different ζ, ζ(cid:4), so the attacker will not be able to link these
signatures. In the case of pseudonymous DAA-signatures,
however, we derive ζ in a deterministic fashion from the
basename bsn V of the veriﬁer. Then any two signatures
for the same veriﬁer using the same f-value will have the
same value of N ; hence these signatures can be linked. It
will not be possible, however, to link these signatures to
the execution of the join-protocol or to signatures for other
veriﬁers. N takes the role of a veriﬁer-speciﬁc pseudonym.
The processes for the anonymous variant is reported
in Table 7.
The pseudonymous variants of these pro-
cesses are similarly deﬁned: The pseudonymous DAA-
signing process daasignp is deﬁned like daasigna, except
that νζ is replaced by let ζ = h(pair(n1, bsn V )) in .
The corresponding veriﬁcation process daaverp is deﬁned
like daavera, except that after let ζ = Public2(zkp) in
we insert if ζ = h(pair(n1, bsn V )) then . Furthermore,
to be able to formulate a more ﬁne-grained authenticity
property below, we output the more informative events
DAASIGNP(id, cnt, bsn V , m) and DAAVERP(m, bsnV , N )
instead of DAASIGNA(id, cnt, m) and DAAVERA(m), respec-
tively.
5.3 Security properties of DAA
TPM
ZK(f,cert;N,ζ,pkI ,m;Fsign)
Veriﬁer
We will now discuss the main security properties of DAA
and how to model them in our calculus.
210
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
/
/
5.3.1 Authenticity of the DAA-sign protocol
The ﬁrst property we would like to model is authenticity:
If the veriﬁer accepts a message m, then some TPM has
DAA-signed this message m. To model this, we consider
the following process:
issuer|pub(cid:3)pk(issuerK)(cid:4)|
!pub(id ).TPMs|!daavera|!daaverp
The output pub(cid:3)pk(issuerK)(cid:4) reﬂects that the public key
pk(issuerK) is publicly known.
if we omitted this output,
the adversary could not generate this term, since issuerK
is a private name (otherwise the adversary would know
sk(issuerK)). The subprocess TPMs reﬂects that we require
authenticity to hold even if the adversary controls the execu-
tion of an arbitrary number of TPMs in an arbitrary fashion
(except for learning their secrets). We model this process as
follows:
proof is 3 seconds on a Pentium 4, 3 GHz. A more detailed
description of the necessary steps is given in the full version
[7]. The tool implementing the compiler from Section 4.1
can be found at [6].
5.3.2 Authenticity of the Join Protocol
In contrast to the DAA-sign operation, after a join the is-
suer learns the identity of the joining party (since the joining
party authenticates itself using its endorsement key). This
is necessary for verifying that no rogue TPM joins but is
also used to limit the number of times a given TPM can join
with respect to different f-values. It is therefore a natural
question whether the following authenticity property holds:
JOINED(id , cnt , cert) ⇒ CERTIFIED(id ). As it turned out,
ProVerif proves that the property is not fulﬁlled and ﬁnds
the following attack:
TPMB
TPMA
Issuer
TPMs :=!pub(cnt).νoch.(tpmjoin|
B, ZK(...bl(f,v)...)
(och(cert ).!pub(m).(daasigna|pub(bsn V ).daasignp))).
A, ZK(...bl(f,v)...)
encasym(n,pkA)
Thus for any pair of id , cnt received from the adversary,
this process performs a join, and with the certiﬁcate cert re-
ceived from the issuer, it DAA-signs any message m anony-
mously or pseudonymously with respect to arbitrary base-
names bsn V . Note how we used inputs to bind the free vari-
ables id , cnt , m, bsn V in tpmjoin, daasigna, and daasignp.
Given this process, authenticity is deﬁned as the fulﬁll-
ment of the following two trace properties:
(cid:23)
DAAVERP(m, bsn, N ) ⇒ DAASIGNP(id, cnt , bsn, m)
DAAVERA(m) ⇒
DAASIGNA(id, cnt , m) ∨
DAASIGNP(id, cnt , bsn, m)
(cid:24)
.
For a formal deﬁnition of these trace properties, we re-
fer to the full version [7].
Intuitively, the ﬁrst property
means that if an event DAAVERP(m, bsn, N ) occurs, then
also DAASIGNP(id , cnt, bsn, m) occurs in that trace with the
same values of bsn and m, i.e., when a veriﬁer accepts a
pseudonymously signed message m, then a valid TPM ac-
tually sent that message m for that veriﬁer. Similarly, the
second property guarantees that if a veriﬁer accepts a mes-
sage as anonymously signed, that message has been signed
anonymously or pseudonymously by some valid TPM. (An
inspection of the protocol reveals that we cannot expect
pseudonymously signed messages not to be accepted by
anonymous veriﬁcation.)
Trace properties such as the above authenticity proper-
ties can be veriﬁed with the mechanized prover ProVerif
[10]. We applied the compilation described in Section 4
and feed the output – now a process in a ﬁnitely generated
equational theory – to ProVerif. ProVerif successfully ver-
iﬁes the authenticity properties. The running time of this
211
encasym(n,pkB )
h(bl(f,v),n)
blsign(bl(f,v),skI )
The adversary corrupts TPMA and retrieves its endorse-
ment key. When the (uncorrupted) TPMB joins, it sends a
ZK proof Z containing some f-value f to the issuer and au-
thenticates Z as coming from B. The adversary intercepts
Z and sends Z to the issuer and authenticates Z as coming
from A. The issuer checks the authentication and the ZK
proof. Since the id of B is not included in the ZK proof1 the
issuer accepts and issues a certiﬁcate for f . Then the adver-
sary forwards the certiﬁcate to B and B successfully checks
the certiﬁcate. After this interaction, the issuer believes to
have certiﬁed A, and B has successfully joined. To the best
of our knowledge, this attack was not known before. Note
that this attack also applies to the original DAA protocol and
violates the security guarantees given in [12].2 Fortunately,
the DAA protocol can be easily modiﬁed to exclude this at-
tack: One simply includes the id of the joining TPM in the
ZK proof as an additional public parameter. Then the issuer
checks whether the ZK proofs contains the correct id.3 Us-
ing ProVerif and our compiler, we could then successfully
verify that the modiﬁed protocol indeed satisﬁes the above
1At least not directly. An honestly generated f-value depends on the id,
however, this is not veriﬁed in the ZK proof.
2They deﬁned security via an ideal functionality.
In this ideal func-
tionality, the issuer is notiﬁed when a party joins, and a party can check
whether it joined successfully (e.g., by DAA-signing a message).
3Note that the statement Fjoin is not changed, we do not prove anything
about the id. However, similar to the message m in the signing operation,
the attacker cannot replace the id by some other id without producing a
new proof from scratch.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
/
/
/
/
o
o
o
o
/
/
o
o
trace property. Note that this modiﬁcation can be applied
to the original DAA protocol from [12] without loosing ef-
ﬁciency by including the id of the TPM in the hash value
c := h(ch(cid:13)nt) (see the protocol description in [12]).
Besides
the
CERTIFIED(id ),
are related to the authenticity of the join protocol. First,
JOINED(id , cnt, cert ) ⇒
there are a few more properties that
property
P2 as follows:
Pi := leak |
(let (id , cnt, och) = (id 1, n1, int 1) in tpmjoin) |
(let (id , cnt, och) = (id 2, n1, int 1) in tpmjoin) |
(int 1(cert 1).int 2(cert 2).
let (id , cnt, cert ) = (id i, n1, cert i) in daasigna)
CERTIFIED(id , exp(z, h(pair(seed(id 2), cnt )))) ⇒
STARTJOIN(id , exp(z, h(pair(seed(id ), cnt)))) ∧ id =id 2
with
∨
LEAKTPM(id ) ∧ LEAKTPM(id 2).
leak :=
(cid:23)
(cid:24)
!pub(id ).pub(cid:3)pk(ek(id ))(cid:4)
pub(cid:3)pk(issuerK)(cid:4)|pub(cid:3)sk(issuerK)(cid:4)
|
Here the event STARTJOIN(id , f ) is deﬁned to be raised as
soon as an honest TPM tries to join with id id and f-value
f (i.e., this event is raised at the beginning of tpmjoin). In-
tuitively this property means, if some process joins using
an f-value that belongs to id 2 but the issuer believes that id
joined, then (i) the join was performed by an honest TPM id
and id 2 = id, or (ii) the adversary has corrupted both TPMs
id and id 2 (i.e., accessed their internal secrets). Further, we
want that it is only possible that a message is successfully
signed using an f-value belonging to an id id if the TPM
with that id has either been certiﬁed or corrupted.
DAAVERA(m, exp(z, h(pair(seed(id ), cnt )))) ⇒
CERTIFIED(id , N )|LEAKTPM(id ).
DAAVERP(m, bsn, exp(z, h(pair(seed(id ), cnt )))) ⇒
CERTIFIED(id , N )|LEAKTPM(id ).
Note that we cannot guarantee that if the TPM id is cor-
rupted then it uses an f-value that belongs to it. It can use
an f-value that belongs to another corrupted TPM. So the
above property only guarantees that a corrupted TPM can-
not “steal” the f-value of another uncorrupted TPM. (As
done in the attack described above.)
All these properties are proven by ProVerif not to hold
in the original DAA protocol but to hold in our modiﬁed
protocol.
5.3.3 Anonymity
where id 1, id 2, n1 are free names and int 1, int 2 are private
channels for transmitting the certiﬁcate from the tpmjoin
process to the daasigna process. The leak process leaks
all public information and all secrets of the issuer. This
models the case that the issuer is corrupted, thus making
the security property stronger since anonymity holds even
when the issuer colludes with the attacker. The two invo-
cations of tpmjoin request certiﬁcates for different ids id 1
and id 2. These certiﬁcates are then assigned to the variables
cert 1 and cert 2. Then a message m (m is a free name in
daasigna) is signed with respect to either id 1 and cert 1 or
id 2 and cert 2, depending on whether we consider the pro-
cess P1 or P2. Anonymity is then deﬁned as the statement
that P1 and P2 are observationally equivalent.
Although we can successfully prove this fact using our
compiler and ProVerif, a closer inspection reveals that this
property is not very general. For example, it does not cover
the case that the TPM T1 ﬁrst signs a few messages, and
then either T1 or T2 sends another message (so that the ad-
versary can try to link messages). Further it does not take
into account that the adversary might inﬂuence (i.e., choose)
the messages to be signed, or that the Ti signs several mes-
sages, or that additionally pseudonymous signatures are pro-
duced. To capture all these cases, we need a much more
complex security deﬁnition which is captured by the follow-
ing game:
1. The issuer and an arbitrary number of TPMs are cor-
rupted (i.e., their secrets leak).
2. Two non-corrupted challenge TPM ids id 1, id 2 are
chosen. Two cnt-value cnt 1, cnt 2 are chosen.
3. The TPMs id 1, id 2 join with respect to cnt-value
cnt 1, cnt 2, respectively.
The second property we would like to examine is the
anonymity of the anonymous DAA-sign operation. In other
words, if two TPMs T1, T2 might have signed a given mes-
sage, the attacker should not be able to distinguish which
TPM has signed the message. Obviously, this can be formal-
ized as observational equivalence between two processes
P1, P2, where in Pi the TPM Ti signed the concerned mes-
sage. E.g., a natural formulation would be to deﬁne P1 and
4. The adversary may ask both challenge TPMs to exe-
cute the join protocol and to sign messages chosen by
the adversary anonymously or pseudonymously with
respect to either the certiﬁcates obtained in Step 3 or
the certiﬁcates obtained in this step. This may happen
arbitrarily often.
5. The adversary may ask the challenge TPM id i to sign
a message chosen by the adversary with respect to
212
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:09:38 UTC from IEEE Xplore.  Restrictions apply. 
the certiﬁcate cert i. Here i ∈ {1, 2} depending on
whether we are running the process P1 or P2 (and the
adversary has to distinguish whether i = 1 or i = 2).
This may happen arbitrarily often.
We model this by the processes P1, P2 given in Table 8.
These processes constitute a formalization of the game de-
picted above. Note that although the adversary’s possibili-
ties in lines (7–10) seem to be subsumed by the invocations
of the subprocess TPMs in line (4), there is a slight differ-
ence: The process TPMs does not allow the attacker to sign
messages with the certiﬁcates obtained in Step 3. The con-
structor corrupt in (1) is used to generate an inﬁnite supply
of ids of corrupted TPMs. Finally, we additionally give the
observer the capability to distinguish the messages sent by
the challenge TPM from the messages sent by the other pro-
cesses: this is technically achieved by letting the challenge