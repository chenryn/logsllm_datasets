18 bytes for EzHID should be set symbolic. It took one iteration
for each byte of the symbolic set to get all the symbolic memory
locations needed to reach Query 1 target. The minimum and max-
imum time taken by one iteration is respectively 3.39 and 8.42
seconds. Setting memory partially symbolic based on our algorithm
increased efficiency greatly. It allowed fewer paths to be created
compared to setting the full memory region symbolic. From table 2
it can be seen that we have achieved a maximum of 2x speed up
in reaching targets. The algorithm helped in reducing the number
of paths to execute when compared to a fully symbolic memory
execution. From our tests we have seen a 72.84% reduction in num-
ber of paths created to reach targets for Phison. A certain amount
13Available from http://ezhid.sourceforge.net/sunkbd.html
10
X0bee: mov
X0bf0: mov
mov
movc
r7,#0
a,r7
dptr,#X30c3
a,@a+dptr
; 0bee
; 0bf0
; 0bf1
; 0bf4
X30c3:
.db 0x05, 0x01, 0x09, 0x06, 0xA1,
0x01, 0x05, 0x07 ...
Figure 3: A snippet of assembly from the Phison firmware
showing how XREFs are found from patterns.
of instructions must be covered to reach the target, that is why
instruction coverage does not reduce as significantly as the number
of paths. But this path reduction entails less branches being created
which in turn increases speed.
5.3 Domain Informed Analysis
Target Finding. A preliminary step, before symbolically execut-
ing our firmware images, is to utilize knowledge of the USB con-
stants and byte patterns to identify targets in the binary to execute
towards. Using Algorithm 1, we scan the binary image for static
USB descriptors and search for all cross-references (XREFs) to these
descriptors via load instructions. The Fie Engine utilizes signature
scanning and a pass over the LLVM IR while angr Engine uses
signature scanning and the built-in CFGFast Control Flow Graph
recovery routine to automatically generate XREFs.
Using our target finding, we identify USB configuration descrip-
tors with the pattern [09 02 ?? ?? ?? 01 00], device descriptors
with [12 01 00 ?? 00], and HID keyboard reports starting with
the bytes [05 01 09 06 A1]. The ?? in a pattern means that the
byte at that position can take on any value. This makes the signa-
tures more robust against changing descriptor lengths. Figure 3 is
an example extracted from the Phison firmware image showing
the clear reference to the descriptor via a mov into DPTR (a 16-bit
special pointer register) followed by a movc from the code section.
FirmUSB would then zero in on the 0xbf4 address as that is what
is reading from the descriptor address.
During our development and research of FirmUSB, we refined
the dynamic analysis process through limiting the set of symbolic
data and further constraining this limited set. Using Algorithm 3, we
create a subset of symbolic variables to be instantiated during the
dynamic analysis. Through limiting the amount of symbolic mem-
ory, the targets are reached significantly faster. Over-approximation
of symbolic memory is guaranteed to reach all program paths at
the expense of a potentially intractable amount of created states.
Table 2 demonstrates the benefits of selectively deciding symbolic
variables in terms of analysis speed while executing Query 1.
We optimize our analysis further by utilizing preconditioned
execution [3], or USB specific domain constraints to selected sym-
bolic variables. By adding initial conditions before running a query,
the query may complete faster. It’s also possible to over-constrain
execution causing the query to end early, run very slow, or never
complete. In order to know which constraint to apply and where,
we first gather facts from found targets with constraints already
applied. By modifying these constraints with respect to USB specific
constants, it is possible to quickly reach USB-specific or prevent
reaching of less important code paths.
Pattern
[12 01 00 ?? 00]
Pattern Name
DEVICE_DESC
CONFIG_DESC [09 02 ?? ?? ?? 01 00]
HID_REPORT
[05 01 09 06 A1]
Code Address XREF(s)
0x302b
0x303d
0x3084
0xb89
0xbd5
0xbf1
Table 3: The found patterns and XREFs from Phison.
5.4 Target Reachability (Query 1)
Using FirmUSB’s knowledge of the USB protocol, interesting code
offsets in the firmware binary are identified. These targets are
searched for during a symbolic execution pass. If a target is found,
the path information will be saved and the wall-clock time and
current code coverage will be noted. Information collected includes
the path history, which includes every basic block executed, all path
constraints, and every branch condition. Targets are the primary ba-
sis for gathering additional information on firmware images. It links
the previous static analysis pass to a satisfiable path. This enables
more advanced analysis and inference of a firmware’s intent.
Phison. We start by looking for USB specific constants in Phison
to reason about Query 1. What we found is shown in Table 3. Using
static analysis on the generated IRs we found instructions that use
the either one of the descriptors to load from. For each descriptor
a set is kept that records the destination addresses where these
descriptors get copied to. We took the intersection of these sets and
found the possible set of EP0 address. In this case there was only
one common element and the EP0 address was found to be 0xf1dc.
Comparing with the source code we found that this was indeed the
address of the FIFO in EP0. This enabled us to find the instruction
where HID descriptor was being copied to EP0. We could reach
the target in short time using Algorithm 3 to set symbolic regions
for the analysis engines. The times shown in Table 2 shows the
effectiveness of our algorithms in reaching Query 1 targets. When
we do not apply Algorithm 3 the time to reach targets is highest. The
combination of Algorithm 3 and domain specific constraining gives
the best performance. When the size of symbolic memory region is
reduced we automatically end up with fewer paths to go in. Since we
determine the symbolic regions in a sound way we actually reach
the target with lower number of paths to test. Also domain specific
constraining further improves the performance. We restricted the
path based on two factors – USB speed change packets, which do
not affect our query, and making sure to guide the execution to call
the GET_DESCRIPTOR function as the successor when the deciding
switch statement comes. This pruning is sound for reachability
testing because we combine domain specific knowledge. Using our
optimizations, we achieved maximum of 7.7x speed up compared
to the fully symbolic version’s unconstrained execution for HID
target. Our angr Engine is not able to complete the Full version of
Phison due to running out of memory, which appears to be because
of path explosion.
EzHID. Using our target finding, we identified a USB configura-
tion descriptor, a device descriptor, and an HID report in EzHID.
Then we utilized our static analysis to find code address XREFs
for all targets as shown in Table 4. With the list of targets, we ac-
tivated FirmUSB for both backends. The first pass identified the
required path conditions for reached targets, which allowed us to
11
Pattern Name
XREF(s)
DEVICE_DESC
0x18b
CONFIG_DESC
0x1a4
HID_REPORT
0x250
Table 4: The found patterns and XREFs from EzHID.
Pattern
[12 01 00 ?? 00]
[09 02 ?? ?? ?? 01 00]
[05 01 09 06 A1]
Code Address
0xb8a
0xb9c
0xbbe
BVS(XRAM[7fab][0:0]) != 0
== 6
BVS(XRAM[7fe9])
== 34
BVS(XRAM[7feb])
BVS(XRAM[7fec])
== 0
// USBIRQ & 0x1 ?
// bRequest - Descriptor
// wValueH - HID Report
// wIndexL - Keyboard Index
Figure 4: The path constraints present at the execution step
when the HID report was reached for EzHID.
optimize additional runs by constraining SETUP data packet ad-
dresses that satisfy the following constraint XRAM[0x7fe9] == 6
from Figure 4. 0x7fe9 corresponds to the second byte of the USB
setup data packet which is the field bRequest. By limiting this to
0x06, we effectively constrain the execution to paths that satisfy
the GET_DESCRIPTOR call. For EzHID, this eliminates all other re-
quest types, which speeds up time-to-target and further analysis.
In Table 2 EzHID performs better when domain constraining is
enabled, but with a partial symbolic set the time to target has little
change. This is due to the shallow target, which does not have time
to benefit from the partial set. Fie is unable to complete the Full
version of EzHID due to a memory out of bounds error, which is a
limitation of KLEE’s symbolic memory model. See the discussion
in Section 6.2 for a further explanation.
5.5 Consistent Behavior (Query 2)
A second important query to vetting USB device firmware is detect-
ing inconsistent use of USB endpoints. In a typical mass storage
device, one would expect SCSI commands to arrive, data to be read
from flash memory, and then transferred out over an I/O port to the
USB bus. While analyzing firmware FirmUSB treats memory reads
from I/O regions (typically external RAM or XRAM) as symbolic.
Therefore, a consistent firmware image for either mass storage or
HID should read symbolic data, process it, and pass it along. An
inconsistency would occur if a firmware writes symbolic and con-
crete data to an output port from different code blocks. FirmUSB
performs dynamic XRAM write tracking as specified in Algorithm 4
and Algorithm 5.
Phison. We checked for concrete data flow in the firmware using
Algorithm 4. Since we set all inputs to be symbolic there should only
be symbolic data flowing to endpoints except EP0 for descriptors.
The concrete data flow to endpoints in this case entails stored data
being propagated to the host. As the Phison firmware should work
as a mass storage device firmware this behavior is inconsistent. EP0
found for Query 1 is used to calculate other endpoint addresses
using constant offset. A threshold count of 8192 was there in the
firmware. Due to this count the concrete data flow was getting
delayed and our symbolic execution engines did not execute the
malicious code region. That is why Algorithm 4 was extended
to incorporate these counters that compare with the threshold.
We used the algorithm to find the counters that may guard this
execution. We found 14 more bytes of memory and included them to
Write Address
0x7e80 – 0x7e87
Writers
0x991, 0xa7e
Symbolic Value
scancode[0-7]
0xe2,
Concrete
0x0,
0x3b,
0x1b, 0x17, 0x08,
0x15, 0x10, 0x28
0x0, 0xb, 0x7f
SDAT2[7fea]
0x7fd4
0x7fd5
0x199, 0x1b2,
0x1e9,
0x22c,
0x1e9,
0x25e,
0x6d7, 0x161
0x1a2, 0x1bb,
0x201,
0x237,
0x201,
0x267,
0x6d7, 0x161
SDAT2[7fea]
0x0, 0x8a, 0x9c, 0xae,
0xe8, 0xbe
Table 5: The results of running Query 2 on EzHID for 30 min-
utes.
the already found symbolic memory regions. Once these additional
memory regions were made symbolic we could reach the Query
2 target for Phison. We found constant data being copied to EP3.
With the new set of symbolic memory, it took 928.56 seconds to
reach the target with 69.98% instruction coverage. There was one
false positive due to a SCSI related constant being copied to EP1.
EzHID. After finding the USB specific targets, this firmware does
not appear suspicious as it is supposed to be a keyboard firmware.
In order to further vet this image, we perform a consistency check
on the USB endpoint usage. This query consists of running the
firmware image for an extended period in order to capture as many
XRAM writes as possible. If an inconsistency is detected, the re-
sults and offending instructions (and data) are printed for further
investigation. An example of malicious code that injects keystrokes
is shown in the Appendix as Listing 1. Using Algorithm 5 to detect
when an inconsistency has occurred, our angr Engine will then
print out the offending memory writes, their write addresses, and
the section of code that did the writing. There are some false posi-
tives, but the most consistent violations (more than one violation
indicating many writes) will be ranked higher. We ran Query 2 for
30 minutes to gather the results which are displayed in Table 5.
The first row shows the discovered inconsistent writers, where one
writes symbolic scancodes and another only concrete data from
the firmware images. The next two rows are false positives, which
also have many different write sites, but the difference is that each
write address only writes a single concrete value. The same writer
does not have multiple violations (such as writing many different
keystrokes).
6 DISCUSSION
In this section, we discuss discrepancies between Fie and angr,
challenges with obfuscation, and features of an ideal framework
for analyzing firmware.
6.1 Adapting Fie
Fie has built-in support for several MSP430 chips, which we used
as a reference for adding the 8051 support. Basically, we specified
the memory addresses for all registers and ports of 8051. Fie also
expects special read and write functions for any memory that is
declared as symbolic. These functions are normally generated au-
tomatically for architectures that are supported by Clang. So we
had to manually add these functions. 8051 interrupt specification
12
is introduced to Fie along with handler functions that first check
whether the specific interrupt is enabled before scheduling the
relevant ISR. While the register information is available from the
ISA documentation, the required symbolic memory regions are
determined by FirmUSB. Since Algorithm 3 finds each symbolic
memory region iteratively, the corresponding read/write functions
are created iteratively as well. On the other hand, to support 8051
interrupt firing the interrupt enable (IE) register in Fie execution
engine is modified to select the right bit for interrupt enable, which
turned out to be different in 8051 compared to the bit position in
MSP430 that Fie initially supported.
6.2 KLEE vs. angr
KLEE and angr are both symbolic execution engines, but their ap-
proaches come from different directions. angr is a recent execution
engine and it aims to be a more general purpose binary analysis
platform. This means it offers code for control flow recovery, some
abstract interpretation, and binary container (e.g. ELF, PE) parsing
built-in. For recovering higher-level constructs from binary-only
images, angr offers a superior platform, despite its more recent de-
velopment. KLEE operates on LLVM bytecode, which until recently
was only output from a compiler. Compilers do not have to worry
about concepts such as type or control flow recovery, so targeting
LLVM IR for a binary-only image was difficult. Binary firmware
does not typically have any concept of types and its control flow
may be masked by jump tables or indirect jumps.
As for both engines’ memory models, KLEE uses a linear model
for every memory object and maps it to an STP array for efficient
constraint solving. angr, on the other hand, uses a more flexible
indexed memory model in that it creates an immutable memory