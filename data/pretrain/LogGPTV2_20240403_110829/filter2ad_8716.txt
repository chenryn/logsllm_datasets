# HTTP/2 H2C 请求走私分析

##### 译文声明
本文为翻译文章，原作者为 bishopfox，原文发表于 labs.bishopfox.com。译文仅供参考，具体内容和含义以原文为准。

## 0x01 前言
HTTP 走私是漏洞赏金项目中经常被关注的问题。通过 HTTP 走私，攻击者可以访问内部服务器甚至获得提权机会。虽然目前广泛使用的 HTTP/1.1 协议存在一些问题（如容易发生请求走私），但使用 HTTP/2 可能是一种解决方案。然而，HTTP/2 是否能够完全防止走私？本文将对 HTTP/2 h2c 走私进行简要研究。

## 0x02 HTTP/2协议与H2C交换
通常，HTTP/2 协议在第一个 HTTP 请求之前使用 `h2` 字符串进行标识。`h2c` 是从 HTTP/1.1 升级到 HTTP/2 过程中使用的标头。根据 [RFC-7540](https://tools.ietf.org/html/rfc7540) 文档的描述，仅当客户端和服务器均支持 HTTP/2 时，才能使用 HTTP/2 协议。

例如，以下是一个请求：
```http
GET / HTTP/1.1
Host: test.example.com
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
```

如果服务器不支持 HTTP/2，则响应如下：
```http
Server ignored
```

如果服务器支持 HTTP/2，则响应如下：
```http
HTTP/1.1 101 Switching Protocols
Connection: Upgrade
Upgrade: h2c
[ HTTP/2 connection ...
```

阅读 RFC-7540 文档发现，HTTP/2 通信与 WebSocket 通信有些类似。客户端（Web 浏览器）询问服务器是否支持 HTTP/2，并相应地决定使用 HTTP/2 还是 HTTP/1.x 通信。HTTP/2 通信是在第 7 层（应用层）中执行的协议，使用 TCP 连接。由于它与现有的 HTTP 通信不同，`101 Switching Protocol` 会像 WebSocket 一样检查是否支持之后，才使用协议转换器。并且 HTTP/2 使用与 HTTP/1.1 相同的“http”和“https”URI 方案，共享相同的默认端口号（如 http->80，https->443）。

> An HTTP/2 connection is an application-layer protocol running on top of a TCP connection ([TCP]). The client is the TCP connection initiator.  
> HTTP/2 uses the same “http” and “https” URI schemes used by HTTP/1.1.  
> HTTP/2 shares the same default port numbers: 80 for “http” URIs and 443 for “https” URIs. As a result, implementations processing requests for target resource URIs like ““ or ““ are required to first discover whether the upstream server (the immediate peer to which the client wishes to establish a connection) supports HTTP/2.  
> The means by which support for HTTP/2 is determined is different for “http” and “https” URIs. Discovery for “http” URIs is described in Section 3.2. Discovery for “https” URIs is described in Section 3.3.

当 HTTP/1.x 升级到 HTTP/2 时，需要在 HTTP 请求中包含标识符、`HTTP2-Settings` 标头和 `Upgrade` 标头。标识符类型包括 HTTP 的 `h2c` 和 HTTPS 的 `h2`。当 `Upgrade: h2c` 时，则以纯文本形式传递 HTTP/2：

```http
GET / HTTP/1.1
Host: test.example.com
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: 
```

在服务器支持 HTTP/2 时，它将 `101 Switching Protocol` 发送给客户端并建立 TLS 连接（HTTP/2）与客户端进行通信。在这种情况下，使用 TLS-ALPN 协议。在此过程中，客户端向服务器提供版本列表，然后服务器选择一个版本。同样，使用 HTTPS 时，HTTP/2 选择 `h2`。当直接使用 HTTP/2 时，通过 TLS-ALPN 进行协议协商后，进行 TLS 连接。

## 0x03 H2C 走私
许多 Web 服务都使用反向代理。在此过程中，当需要进行 `101 Switching` 时，代理服务器将充当中介，无需任何操作。通过阅读 RFC 文档和 TLS 中关于 HTTP/2 配置的文档，里面声明只有明文连接才可以使用 `h2c` 升级，并且转发时不应包含 `HTTP2-Settings` 头。

在 RFC7540#section-3.2.1 中指出：
> A server MUST NOT upgrade the connection to HTTP/2 if this header field is not present or if more than one is present. A server MUST NOT send this header field.

在 [http2-spec](https://http2.github.io/http2-spec/#discover-https) 中还指出：
> A client that makes a request to an “https” URI uses TLS [TLS12] with the application-layer protocol negotiation (ALPN) extension [TLS-ALPN].  
> HTTP/2 over TLS uses the “h2” protocol identifier. The “h2c” protocol identifier MUST NOT be sent by a client or selected by a server; the “h2c” protocol identifier describes a protocol that does not use TLS.  
> Once TLS negotiation is complete, both the client and the server MUST send a connection preface (Section 3.5).

在 TLS 上使用 HTTP/2 时，应使用 `h2` 协议标识符，而不是 `h2c`。正如上一节提到的，`h2c` 是用于 HTTP 的标识，而 `h2` 则是用于 HTTPS 的标识。如果代理通过 TLS 将 `h2c` 转发到后端进行协议升级，会出现什么情况呢？

个人理解：在反向代理环境中，后端服务器仅知道客户端是明文还是 TLS（具有 `h2c` 和 `h2` 等标识），因此它将 TLS 连接确定为 HTTP，并在 TLS 连接上创建 TCP 隧道。在这种情况下，尽管客户端不是 HTTP，但仍可以通过 TLS 使用现有连接。换句话说，由于它是已连接的连接而不是 HTTP 通信，因此不受代理的 ACL 策略的影响，并且由于 TCP 隧道中的请求可以进行 HTTP 操作，因此可以访问被阻止的资源。整个走私行为与 WebSocket 连接走私非常相似。

具体走私流程如下：
1. 客户端将 HTTP/1.1 升级请求发送到反向代理（发送了错误的标头）
2. 代理将请求转发到后端，后端返回 `101 Switching Protocol` 的响应，并准备接收 HTTP/2 通信
3. 代理从后端服务器收到 `101` 响应时，将创建 TCP 隧道
4. 客户端从代理接收到 `101` 响应时，将重新使用现有 TCP 连接并执行 HTTP/2 初始化
5. 客户端使用 HTTP/2 多路复用，发送针对受限资源的非法请求
6. 由于代理不监视 TCP 通信（HTTP 通过策略），因此它将非法请求发送到受限页面
7. 服务器响应，转发到 TLS 隧道，实现走私

## 0x04 如何检测
以下代理可能存在这一走私问题：
1. 默认支持（默认存在问题）：
   - HAProxy v2.2.2
   - Traefik v2.2
   - Nuster v5.2
2. 需要配置（只有不恰当设置才会有问题）:
   - AWS ALB / CLB
   - NGINX
   - Apache
   - Squid
   - Varnish
   - Kong
   - Envoy
   - Apache Traffic Server

那么如何进行检测测试呢？这里提供 [h2csmuggler 工具](https://github.com/BishopFox/h2csmuggler)

安装配置：
```sh
$ git clone https://github.com/BishopFox/h2csmuggler
$ cd h2csmuggler
$ pip3 install h2
```

扫描：
```sh
$ python3 h2csmuggler.py --scan-list urls.txt --threads 5
```

获取内部端点：
```sh
$ python3 h2csmuggler.py -x https://edgeserver -X POST -d '{"user":128457, "role": "admin"}' -H "Content-Type: application/json" -H "X-SYSTEM-USER: true" http://backend/api/internal/user/permissions
```

暴破端点：
```sh
$ python3 h2csmuggler.py -x https://edgeserver -i dirs.txt http://localhost/
```

这个过程中使用了 HTTP/2 的多路复用。复用是 HTTP/2 的主要功能，这意味着可以同时请求多个资源，可以理解为 `Connection: keep-alive, pipeline` 的改进版。

获取 AWS 源数据 API：
```sh
$ python3 h2csmuggler.py -x https://edgeserver -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" http://169.254.169.254/latest/api/token
```

更多使用细节参见 [h2csmuggler 文档](https://github.com/BishopFox/h2csmuggler)。

## 0x05 如何预防
对于 HTTP 请求走私/WebSocket 连接走私可能有多种应对对策，但从原则上讲，按照 RFC 文档中的说明，限制在 TLS 连接中使用 `h2c` 升级应该是最为有效的方法。当然，如果可能的话，也可以通过限制代理服务器中传递的标头，仅处理由服务使用的标头来减小风险。

个人认为，重要的是要防止使用未使用的标头，限制可以查看其他主机（例如 `Host`、`X-Forwarded-For` 等）的标头，以使私有路径无法被直接访问。与所有走私活动一样，防护方了解每一步消息传递的差异比依靠单纯补丁更有预防效果。对于这类通过请求走私或请求伪造攻击进行的任意用户控制的请求，应当维持纵深防御策略，减少架构中走私标头的重要性，在后端识别和拒绝可疑请求，才能有助于减小这类攻击的影响。

## 参考文献
- [RFC-7540](https://tools.ietf.org/html/rfc7540)
- [h2csmuggler GitHub 仓库](https://github.com/BishopFox/h2csmuggler)