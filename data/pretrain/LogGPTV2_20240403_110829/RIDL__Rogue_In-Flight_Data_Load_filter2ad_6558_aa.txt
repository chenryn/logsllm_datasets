title:RIDL: Rogue In-Flight Data Load
author:Stephan van Schaik and
Alyssa Milburn and
Sebastian &quot;Osterlund and
Pietro Frigo and
Giorgi Maisuradze and
Kaveh Razavi and
Herbert Bos and
Cristiano Giuffrida
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
RIDL: Rogue In-Flight Data Load
Stephan van Schaik∗, Alyssa Milburn∗, Sebastian Österlund∗, Pietro Frigo∗, Giorgi Maisuradze†‡,
Kaveh Razavi∗, Herbert Bos∗, and Cristiano Giuﬀrida∗
Vrije Universiteit Amsterdam, The Netherlands
{s.j.r.van.schaik, a.a.milburn, s.osterlund, p.frigo}@vu.nl,
∗Department of Computer Science
{kaveh, herbertb, giuﬀrida}@cs.vu.nl
Abstract—We present Rogue In-ﬂight Data Load
(RIDL), a new class of speculative unprivileged and
constrained attacks to leak arbitrary data across ad-
dress spaces and privilege boundaries (e.g., process,
kernel, SGX, and even CPU-internal operations). Our
reverse engineering eﬀorts show such vulnerabilities
originate from a variety of micro-optimizations per-
vasive in commodity (Intel) processors, which cause
the CPU to speculatively serve loads using extrane-
ous CPU-internal in-ﬂight data (e.g., in the line ﬁll
buﬀers). Contrary to other state-of-the-art speculative
execution attacks, such as Spectre, Meltdown and Fore-
shadow, RIDL can leak this arbitrary in-ﬂight data with
no assumptions on the state of the caches or translation
data structures controlled by privileged software.
The implications are worrisome. First, RIDL attacks
can be implemented even from linear execution with
no invalid page faults, eliminating the need for excep-
tion suppression mechanisms and enabling system-wide
attacks from arbitrary unprivileged code (including
JavaScript in the browser). To exemplify such attacks,
we build a number of practical exploits that leak
sensitive information from victim processes, virtual
machines, kernel, SGX and CPU-internal components.
Second, and perhaps more importantly, RIDL bypasses
all existing “spot” mitigations in software (e.g., KPTI,
PTE inversion) and hardware (e.g., speculative store
bypass disable) and cannot easily be mitigated even
by more heavyweight defenses (e.g., L1D ﬂushing or
disabling SMT). RIDL questions the sustainability of a
per-variant, spot mitigation strategy and suggests more
fundamental mitigations are needed to contain ever-
emerging speculative execution attacks.
I.
Introduction
Since the original Meltdown and Spectre disclosure, the
family of memory disclosure attacks abusing speculative
execution 1 has grown steadily [1], [2], [3], [4], [5]. While
these attacks can leak sensitive information across secu-
rity boundaries, they are all subject to strict addressing
restrictions. In particular, Spectre variants [2], [4], [5] allow
attacker-controlled code to only leak within the loaded
virtual address space. Meltdown [1] and Foreshadow [3]
require the target physical address to at least appear in
the loaded address translation data structures. Such re-
strictions have exposed convenient anchor points to deploy
‡Work started during internship at Microsoft Research.
1Unless otherwise noted, we loosely refer to both speculative and
out-of-order execution as speculative execution in this paper.
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:52)(cid:85)(cid:70)(cid:81)(cid:73)(cid:66)(cid:79)(cid:1)(cid:87)(cid:66)(cid:79)(cid:1)(cid:52)(cid:68)(cid:73)(cid:66)(cid:74)(cid:76)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:25)(cid:24)
(cid:25)(cid:25)
†CISPA Helmholtz Center for Information Security
Saarland Informatics Campus
giorgi.maisuradze@cispa.saarland
practical “spot” mitigations against existing attacks [6],
[7], [8], [9]. This shaped the common perception that—
until in-silicon mitigations are available on the next gener-
ation of hardware—per-variant, software-only mitigations
are a relatively pain-free strategy to contain ever-emerging
memory disclosure attacks based on speculative execution.
In this paper, we challenge the common perception
by introducing Rogue In-ﬂight Data Load (RIDL), a new
class of speculative execution attacks that lifts all such ad-
dressing restrictions entirely. While existing attacks target
information at speciﬁc addresses, RIDL operates akin to
a passive sniﬀer that eavesdrops on in-ﬂight data (e.g.,
in the line ﬁll buﬀers or LFBs) ﬂowing through CPU
components. RIDL is powerful: it can leak information
across address space and privilege boundaries by solely
abusing micro-optimizations implemented in commodity
Intel processors. Unlike existing attacks, RIDL is non-
trivial to stop with practical mitigations in software.
The vulnerability of existing vulnerabilities. To il-
lustrate how existing speculative execution vulnerabilities
are subject to addressing restrictions and how this provides
defenders convenient anchor points for “spot” software
mitigations, we consider their most prominent examples.
Spectre [2] allows attackers to manipulate the state
of the branch prediction unit and abuse the mispredicted
branch to leak arbitrary data within the accessible address
space via a side channel (e.g., cache). This primitive by
itself is useful in sandbox (e.g., JavaScript) escape scenar-
ios, but needs to resort to confused-deputy attacks [10]
to implement cross-address space (e.g., kernel) memory
disclosure. In such attacks, the attacker needs to lure
the victim component into speculatively executing speciﬁc
“gadgets”, disclosing data from the victim address space
back to the attacker. This requirement opened the door
to a number of practical software mitigations, ranging
from halting speculation when accessing untrusted point-
ers or indices [7] to not speculating across vulnerable
branches [6].
Meltdown [1] somewhat loosens the restrictions of the
addresses reachable from attacker-controlled code. Rather
than restricting the code to valid addresses, an unpriv-
ileged attacker can also access privileged address space
mappings that are normally made inaccessible by the
supervisor bit in the translation data structures. The
reason is that, while any access to a privileged address
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:51:31 UTC from IEEE Xplore.  Restrictions apply. 
will eventually trigger an error condition (i.e.,
invalid
page fault), before properly handling it, the CPU already
exposes the privileged data to out-of-order execution, al-
lowing disclosure. This enables cross-address space (user-
to-kernel) attacks, but only in a traditional user/kernel
uniﬁed address space design. This requirement opened the
door to practical software mitigations such as KPTI [9],
where the operating system (OS) isolates the kernel in its
own address space rather than relying on the supervisor
bit for isolation.
Foreshadow [3] further loosens the addressing restric-
tions. Rather than restricting attacker-controlled code to
valid and privileged addresses, the attacker can also access
physical addresses mapped by invalid (e.g., non-present)
translation data structure entries. Similar to Meltdown,
the target physical address is accessed via the cache,
data is then passed to out-of-order execution, and subse-
quently leaked before the corresponding invalid page fault
is detected. Unlike Meltdown, given the milder addressing
restrictions, Foreshadow enables arbitrary cross-address
space attacks. But this is only possible when the attacker
can surgically control the physical address of some invalid
translation structure entry. This requirement opened the
door to practical software mitigations such as PTE inver-
sion [8], where the OS simply masks the physical address
of any invalidated translation structure entry.
A new RIDL. With RIDL, we show our faith in practi-
cal, “spot” mitigations being able to address known and
future speculative execution attacks was misplaced. As
we shall see, RIDL can leak in-ﬂight data of a victim
process even if that process is not speculating (e.g., due to
Spectre mitigations) and it does not require control over
address translation data structures at all. These properties
remove all the assumptions that spot mitigations rely on.
Translation data structures, speciﬁcally, enforce basic secu-
rity mechanisms such as isolation, access permissions and
privileges. Relaxing the requirement on translation data
structures allows RIDL to mount powerful cross-address
space speculative execution attacks directly from error-free
and branchless unprivileged execution for the ﬁrst time.
In particular, by snooping on in-ﬂight data in the CPU,
attackers running arbitrary unprivileged code (including
JavaScript in the browser) may leak information across
arbitrary security boundaries. In essence, RIDL puts a
glass to the wall that separates security domains, allowing
attackers to listen to the babbling of CPU components.
To investigate the root cause of the RIDL class of
vulnerabilities, we report on our reverse engineering eﬀorts
on several recent Intel microarchitectures. We show RIDL
stems from micro-optimizations that cause the CPU to
serve speculative loads with extraneous CPU-internal in-
ﬂight data. In the paper, we focus on instances serving
arbitrary, address-agnostic data from the Line Fill Buﬀers
(LFBs), which we found to be exploitable in the practical
cases of interest. We also report on the challenges to
exploit such instances in practice, targeting speciﬁc in-
ﬂight data to leak in particular. Moreover, we present a
number of practical exploits that leak data across many
common security boundaries (JavaScript sandbox, process,
kernel, VM, SGX, etc.). We show exploitation is possible
in both cross-thread and same-thread (no SMT) scenarios.
This applies to all the existing Intel systems with the
latest (microcode) updates and all the defenses up. In
particular, RIDL bypasses all the practical mitigations
against existing attacks and even the more heavyweight,
default-oﬀ mitigations such as periodic L1 ﬂushing. The
lesson learned is that mitigating RIDL-like attacks with
practical software mitigations is non-trivial and we need
more fundamental mitigations to end the speculative exe-
cution attacks era.
Contributions. We make the following contributions:
• We present RIDL, a new class of speculative exe-
cution vulnerabilities pervasive in commodity Intel
CPUs. RIDL enables unprivileged attackers to craft
address-agnostic memory disclosure primitives across
arbitrary security boundaries for the ﬁrst time and
has been rewarded by the Intel Bug Bounty Program.
• We investigate the root cause of practical RIDL in-
stances abusing Line Fill Buﬀers (LFBs), presenting
the ﬁrst reverse engineering eﬀort to analyze LFB
behavior and related micro-optimizations.
• We present a number of real-world exploits that
demonstrate an unprivileged RIDL-enabled attacker
can leak data across arbitrary security boundaries,
including process, kernel, VM and SGX, even with
all mitigations against existing attacks enabled. For
example, we can leak the contents of the /etc/shadow
in another VM using a RIDL attack. Demos of these
RIDL exploits can be found at https://ridl.eu.
• We place RIDL in the context of state-of-the-art at-
tacks and mitigation eﬀorts. Our analysis shows that,
unlike existing attacks, RIDL is ill-suited to practical
mitigations in software and more fundamental miti-
gations are necessary moving forward.
II. Background
3
Memory Pipeline
L1i
Cache
Instruction
μOP
Cache Tags
Branch
Prediction
Unit
Return Stack
Buffer
Branch
Target Buffer
L
1
i
T
L
B
L
2
T
L
B
L
1
d
T
L
B
L2 Cache
L1d
Cache
Line Fill
Buffer
Load Buffer
Store Buffer
Branch Order Buffer
Re-order Buffer
Physical
Register File
Integer
Registers
Vector
Registers
Retirement Unit
Register
Alias Table
Register
Allocation & Renaming
1
Front-end
2
Out-of-Order Engine
Common Data Bus
i
U
n

e
d
R
e
s
e
r
v
a
t
i
o
n
S
t
a
t
i
o
n
μ
O
P
S
c
h
e
d
u
e
r
l
INT ALU
LOAD
LOAD
STORE
AGU
port 0
port 2
port 3
port 4
port 7
port 6
port 5
port 1
Execution Units
INT ALU
INT ALU
INT ALU
Fig. 1: An overview of the Intel Skylake microarchitecture.
Figure 1 shows an overview of the Intel Skylake mi-
croarchitecture. It consists of three stages: 1 an in-order
front-end that decodes instructions into μ-ops, 2 an out-
-of-order execution engine, 3 and the memory pipeline.
(cid:25)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:51:31 UTC from IEEE Xplore.  Restrictions apply. 
Since the Intel Skylake microarchitecture is quite com-
plex, we speciﬁcally focus on the cache hierarchy, out-of-
order/speculative execution, and in-ﬂight data.
A. Caches
To overcome the growing performance gap between pro-
cessors and memory, the processor contains small memory
buﬀers, called caches, to store frequently and recently used
data to hide memory latency. Modern processors have
multiple levels of caches with the smallest and fastest
close to the processor, and the largest but slowest being
the furthest away from the processor. The Intel Core
microarchitecture has three levels of CPU caches. At the
ﬁrst level, there are two caches, L1i and L1d, to store
code and data respectively, while the L2 cache uniﬁes code
and data. Where these caches are private to each core, all
cores share the L3 or last-level cache (LLC). The LLC is
inclusive of the lower-level caches and set-associative, i.e.,
divided into multiple cache sets where part of the physical
address is used to index into the corresponding cache set.
Gullasch et al. [11] use clflush to evict targets to mon-
itor from the cache. By measuring the time to reload them
the attacker determines whether the victim has accessed
them—a class of attacks called Flush + Reload [12].
Another variant is Prime + Probe [13], [14], [15], [16],
in which the attacker builds an eviction set of memory ad-
dresses to ﬁll a speciﬁc cache set. By repeatedly measuring
the time it takes to reﬁll the cache set, the attacker can
monitor memory accesses to that cache set.
B. Out-of-Order Execution
To improve the instruction throughput, modern CPUs
implement a superscalar out-of-order execution pipeline
similar to Tomasulo’s algorithm [17], [18]. Out-of-order
execution engines generally consist of three stages: 1 in-
-order register allocation & renaming, 2 out-of-order exe-
cution of instructions or μ-ops, 3 and in-order retirement.
a) Register renaming: Once the decoded μ-ops leave
the front-end, they pass through the register allocation
& renaming unit that renames the registers to eliminate
Write-after-Read (WAR) and Write-after-Write (WAW)
hazards. More speciﬁcally, this unit renames source/desti-
nation operands for μ-ops by allocating pointers to freely
available physical registers from the Physical Register File
(PRF) and maintaining the corresponding mappings in the
Register Alias Table (RAT). After renaming the μ-op, the
unit allocates an entry for the μ-op in the Re-Order Buﬀer
(ROB) to preserve the original programming order and
sends the μ-op to the reservation station.
b) Out-of-order scheduling: To eliminate Read-after-
Write (RAW) hazards, the reservation station stalls each
μ-op with unavailable operands. Once all the operands
are available, the scheduler dispatches the μ-op to the