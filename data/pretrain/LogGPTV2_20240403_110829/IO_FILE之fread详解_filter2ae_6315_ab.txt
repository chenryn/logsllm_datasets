      ...
      f->_IO_buf_base = b; # 设置_IO_buf_base 
      f->_IO_buf_end = eb; # 设置_IO_buf_end
      ...
    }
    libc_hidden_def (_IO_setb)
函数相对比较简单的就是设置了`_IO_buf_base`和`_IO_buf_end`，可以预料到`_IO_setb`函数执行完后，fp的这两个指针被赋上值了：
到此，初始化缓冲区就完成了，函数返回`_IO_file_doallocate`后，接着`_IO_file_doallocate`也返回，回到`_IO_file_xsgetn`函数中。
###  拷贝输入缓冲区数据
初始化缓冲区完成之后，代码返回到`_IO_file_xsgetn`函数中，程序就进入到第二部分：拷贝输入缓冲区数据，如果输入缓冲区里存在已输入的数据，则把它直接拷贝到目标缓冲区里。
这部分比较简单，需要说明下的是从这里可以看出来`fp->_IO_read_ptr`指向的是输入缓冲区的起始地址，`fp->_IO_read_end`指向的是输入缓冲区的结束地址。
将`fp->_IO_read_end-fp->_IO_read_ptr`之间的数据通过`memcpy`拷贝到目标缓冲区里。
###  执行系统调用读取数据
在输入缓冲区为0或者是不能满足需求的时候则会执行最后一步`__underflow`去执行系统调用`read`读取数据，并放入到输入缓冲区里。
因为demo里第一次读取数据，此时的`fp->_IO_read_end`以及`fp->_IO_read_ptr`都是0，因此会进入到`__underflow`，跟进去细看，文件在`/libio/genops.c`中：
    int
    __underflow (_IO_FILE *fp)
    {
      # 额外的检查
      ...
      if (fp->_IO_read_ptr _IO_read_end)
        return *(unsigned char *) fp->_IO_read_ptr;
      ...
      # 调用_IO_UNDERFLOW
      return _IO_UNDERFLOW (fp);
    }
    libc_hidden_def (__underflow)
函数稍微做一些检查就会调用`_IO_UNDERFLOW`函数，其中一个检查是如果`fp->_IO_read_ptr`小于`fp->_IO_read_end`则表明输入缓冲区里存在数据，可直接返回，否则则表示需要继续读入数据。
检查都通过的话就会调用`_IO_UNDERFLOW`函数，该函数是FILE结构体vtable里的`_IO_new_file_underflow`，跟进去看，文件在`/libio/fileops.c`里：
    int
    _IO_new_file_underflow (_IO_FILE *fp)
    {
      _IO_ssize_t count;
      ...
      ## 如果存在_IO_NO_READS标志，则直接返回
      if (fp->_flags & _IO_NO_READS)
        {
          fp->_flags |= _IO_ERR_SEEN;
          __set_errno (EBADF);
          return EOF;
        }
      ## 如果输入缓冲区里存在数据，则直接返回
      if (fp->_IO_read_ptr _IO_read_end)
        return *(unsigned char *) fp->_IO_read_ptr;
      ...
      ## 如果没有输入缓冲区，则调用_IO_doallocbuf分配输入缓冲区
      if (fp->_IO_buf_base == NULL)
        {
          ...
          _IO_doallocbuf (fp);
        }
      ...
      ## 设置FILE结构体指针
      fp->_IO_read_base = fp->_IO_read_ptr = fp->_IO_buf_base;
      fp->_IO_read_end = fp->_IO_buf_base;
      fp->_IO_write_base = fp->_IO_write_ptr = fp->_IO_write_end
        = fp->_IO_buf_base;
      ##调用_IO_SYSREAD函数最终执行系统调用读取数据
      count = _IO_SYSREAD (fp, fp->_IO_buf_base,
                   fp->_IO_buf_end - fp->_IO_buf_base);
      ...
      ## 设置结构体指针
      fp->_IO_read_end += count;
      ...
      return *(unsigned char *) fp->_IO_read_ptr;
    }
    libc_hidden_ver (_IO_new_file_underflow, _IO_file_underflow)
这个`_IO_new_file_underflow`函数，是最终调用系统调用的地方，在最终执行系统调用之前，仍然有一些检查，整个流程为：
  1. 检查FILE结构体的`_flag`标志位是否包含`_IO_NO_READS`，如果存在这个标志位则直接返回`EOF`，其中`_IO_NO_READS`标志位的定义是`#define _IO_NO_READS 4 /* Reading not allowed */`。
  2. 如果`fp->_IO_buf_base`位null，则调用`_IO_doallocbuf`分配输入缓冲区。
  3. 接着初始化设置FILE结构体指针，将他们都设置成`fp->_IO_buf_base`
  4. 调用`_IO_SYSREAD`（vtable中的`_IO_file_read`函数），该函数最终执行系统调用read，读取文件数据，数据读入到`fp->_IO_buf_base`中，读入大小为输入缓冲区的大小`fp->_IO_buf_end - fp->_IO_buf_base`。
  5. 设置输入缓冲区已有数据的size，即设置`fp->_IO_read_end`为`fp->_IO_read_end += count`。
其中第二步里面的如果`fp->_IO_buf_base`位null，则调用`_IO_doallocbuf`分配输入缓冲区，似乎有点累赘，因为之前已经分配了，这个原因我在最后会说明。
其中第四步的`_IO_SYSREAD`（vtable中的`_IO_file_read`函数）的源码比较简单，就是执行系统调用函数read去读取文件数据，文件在`libio/fileops.c`，源码如下：
    _IO_ssize_t
    _IO_file_read (_IO_FILE *fp, void *buf, _IO_ssize_t size)
    {
       return (__builtin_expect (fp->_flags2 & _IO_FLAGS2_NOTCANCEL, 0)
               ? read_not_cancel (fp->_fileno, buf, size)
               : read (fp->_fileno, buf, size));
     }
`_IO_file_underflow`函数执行完毕以后，FILE结构体中各个指针已被赋值，且文件数据已读入，输入缓冲区里已经有数据，结构体值如下，其中`fp->_IO_read_ptr`指向输入缓冲区数据的开始位置，`fp->_IO_read_end`指向输入缓冲区数据结束的位置：
函数执行完后，返回到`_IO_file_xsgetn`函数中，由于`while`循环的存在，重新执行第二部分，此时将输入缓冲区拷贝至目标缓冲区，最终返回。
至此，对于fread的源码分析结束。
## 其他输入函数
完整分析了fread函数之后，还想知道其他一些函数（scanf、gets）等函数时如何通过stdin实现输入的，我编写了源码，并将断点下在了read函数之前，看他们时如何调用去的。
首先是scanf，其最终调用read函数时栈回溯如下：
    read
    _IO_new_file_underflow at fileops.c
    __GI__IO_default_uflow at genops.c
    _IO_vfscanf_internal at vfscanf.c
    __isoc99_scanf at  at isoc99_scanf.c
    main ()
    __libc_start_main
可以看到scanf最终也是调用stdin的vtable中的`_IO_new_file_underflow`去调用read的。不过它并不是使用`_IO_file_xsgetn`，而是使用vtable中的`__uflow`，源码如下：
    int
    _IO_default_uflow (_IO_FILE *fp)
    {
      int ch = _IO_UNDERFLOW (fp);
      if (ch == EOF)
        return EOF;
      return *(unsigned char *) fp->_IO_read_ptr++;
    }
    libc_hidden_def (_IO_default_uflow)
`__uflow`函数基本上啥都没干直接就调用了`_IO_new_file_underflow`因此最终也是`_IO_new_file_underflow`实现的输入。
再看看`gets`函数，函数调用栈如下，与scanf基本一致：
    read
    __GI__IO_file_underflow
    __GI__IO_default_uflow
    gets
    main
     __libc_start_main+240
再试了试fscanf等，仍然是一样的，仍然是最终通过`_IO_new_file_underflow`实现的输入。虽然不能说全部的io输入都是通过`_IO_new_file_underflow`函数最终实现的输入，但是应该也可以说大部分是使用`_IO_new_file_underflow`函数实现的。
但是仍然有一个问题，由于`__uflow`直接就调用了`_IO_new_file_underflow`函数，那么输入缓冲区是在哪里建立的呢，为了找到这个问题的答案，我在程序进入到fscanf函数后又在`malloc`函数下了个断点，然后栈回溯：
    malloc
    __GI__IO_file_doallocate
    __GI__IO_doallocbuf
    __GI__IO_file_underflow
    __GI__IO_default_uflow
    __GI__IO_vfscanf
    __isoc99_fscanf
    main
    __libc_start_main
原来是在`__GI__IO_file_underflow`分配的空间，回到上面看该函数的源码，确实有一段判断输入缓冲区如果为空则调用`__GI__IO_doallocbuf`函数建立输入缓冲区的代码，这就解释了`__GI__IO_file_underflow`第二步中为啥还会有个输入缓冲区判断的原因了，不得不感慨，代码写的真巧妙。
## 小结
在结束之前我想总结下`fread`在执行系统调用read前对vtable里的哪些函数进行了调用，具体如下：
  * `_IO_sgetn`函数调用了vtable的`_IO_file_xsgetn`。
  * `_IO_doallocbuf`函数调用了vtable的`_IO_file_doallocate`以初始化输入缓冲区。
  * vtable中的`_IO_file_doallocate`调用了vtable中的`__GI__IO_file_stat`以获取文件信息。
  * `__underflow`函数调用了vtable中的`_IO_new_file_underflow`实现文件数据读取。
  * vtable中的`_IO_new_file_underflow`调用了vtable`__GI__IO_file_read`最终去执行系统调用read。
先提一下，后续如果想通过IO
FILE实现任意读的话，最关键的函数应是`_IO_new_file_underflow`，它里面有个标志位的判断，是后面构造利用需要注意的一个比较重要条件：
      ## 如果存在_IO_NO_READS标志，则直接返回
      if (fp->_flags & _IO_NO_READS)
        {
          fp->_flags |= _IO_ERR_SEEN;
          __set_errno (EBADF);
          return EOF;
        }
终于结束了，写的有些凌乱，将就看看吧。