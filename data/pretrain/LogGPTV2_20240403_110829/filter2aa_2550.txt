# evilgrade: "You STILL have pending upgrades!"

## Presenters
- Francisco Amato
- Federico Kirschbaum

## Event
- Defcon 18, 2010

## Introduction
### Topics
- Client-side exploitation
- Update process
- Poor implementation of update processes
- Attack vectors
- Presentation of the evilgrade framework

### Client-side Exploitation
- **Searching the Weakest Link**: Bypassing the fortress walls.
- **Technique**: This method can transform a user's terminal into a “proxy” to access the internal network of a company.

## General Application Update Process
### How It Works
- **Update Process**: Can be either manual or automatic.
- **Request for Update Information**: The process requests a special file from the master server (e.g., `update.application.com/info.xml`).
- **File Content**: The file contains information about available updates.
- **Installation**: Updates can be installed automatically or with user confirmation.

## Problem Identification
### Trust Issues
- **Lack of Verification**: Many applications do not verify the contents of updates.
- **Blind Trust**: Applications often trust the master update server without verifying its authenticity.

## evilgrade Framework
### Tool Information
- **Description**: A modular framework that exploits poor update implementations by injecting fake updates.
- **Open Source**: Developed in Perl and is an open-source project.

### How It Works
- **Modular Structure**: Each module emulates a false update for a specific application.
- **DNS Traffic Manipulation**: Requires manipulation of the victim's DNS traffic.

### Normal Update Process
1. **Initiation**: App1 starts the update process.
2. **DNS Query**: Consults the DNS server for `update.app1.com`.
3. **DNS Response**: DNS server replies with IP address `200.1.1.1`.
4. **File Retrieval**: App1 gets the `lastupdate.xml` file from `update.app1.com`.
5. **Update Detection**: App1 analyzes the update file and detects a new update.
6. **Update Execution**: App1 downloads and executes the update from `http://update.app1.com/update.exe`.

### Attack Example
1. **Initiation**: App1 starts the update process.
2. **DNS Query**: Consults the DNS server for `update.app1.com`.
3. **DNS Manipulation**: The attacker modifies the DNS traffic and returns a different IP address controlled by the attacker.
4. **File Retrieval**: App1 gets the `lastupdate.xml` file from the attacker-controlled server.
5. **Update Detection**: App1 processes the file and detects a new update.
6. **Backdoor Execution**: App1 downloads and executes the backdoor from `http://update.app1.com/backdoor.exe`.

## Attack Vectors
### Internal Scenarios
- **Internal DNS Access**
- **ARP Spoofing**
- **DNS Cache Poisoning**
- **DHCP Spoofing**

### External Scenarios
- **Internal DNS Access**
- **DNS Cache Poisoning**
- **Fake AP Wireless**

### Is This New?
- **Centralization and Exploitation**: The framework centralizes and exploits different update implementations in one tool.

### Supported Operating Systems
- **Multiplatform**: The framework is multiplatform and only requires the right payload for the target platform.

### Capabilities
- **Remote Access**: This attack vector allows the injection of fake updates to remotely access a target system.

### Console Commands
- **show**: Displays different information.
- **conf**: Enters configuration mode.
- **set "value"**: Configures different options.
- **start**: Starts services.
- **stop**: Stops services.
- **status**: Shows service status.

### Modules
- **Java Plugin**
- **Winzip**
- **Winamp**
- **OpenOffice**
- **iTunes**
- **QuickTime**
- **Safari**
- **DAP (Download Accelerator)**
- **Notepad++**
- **mIRC**
- And more...

## Lab
- **Demo Time**: Let's see it in action!

## Security Recommendations
- **Secure Update Server**: Use HTTPS with certificate control.
- **Digital Signatures**: Verify updates using a public key.

## Conclusion
- **Be Cautious**: Next time you perform an update, don't believe everything you see.

## References
- [DNS Cache Poisoning](http://www.secureworks.com/research/articles/dns-cache-poisoning/#update)
- [BIND9 DNS](http://www.trusteer.com/docs/bind9dns.html)
- [BIND8 DNS](http://www.trusteer.com/docs/bind8dns.html)
- [ARP Spoofing](http://en.wikipedia.org/wiki/ARP_spoofing)
- [Microsoft DNS](http://www.trusteer.com/docs/microsoftdns.html)
- [Doxpara](http://www.doxpara.com/)

## Questions
- ???

## Contact
- **Francisco Amato**: PI:EMAIL
- **Federico Kirschbaum**: PI:EMAIL

## Additional Resources
- [Blog](http://blog.infobytesec.com)
- [Ekoparty](http://www.ekoparty.org)

---

**Thank you!**