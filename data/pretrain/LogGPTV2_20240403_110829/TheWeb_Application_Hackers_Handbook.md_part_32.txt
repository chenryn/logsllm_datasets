name=daf BD223F003A8309DD
ydd;time B6B970C47BA2E249
=6344304 A0670592D74BCD07
23694715 D51A3E150EFC2E69
000; 885A5C8131E4210F
The decrypted token now contains a modifi ed uid value, and also a duplicated
app value. Exactly what happens depends on how the application processes
the decrypted token. Often, applications using tokens in this way inspect only
certain parts of the decrypted token, such as the user identifi er. If the applica-
tion behaves like this, then it will process the request in the context of the user
who has a uid of 992, rather than the original 218.
cc0077..iinndddd 222255 88//1199//22001111 1122::0077::4411 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 226
226 Chapter 7 n Attacking Session Management
The attack just described would depend on being issued with a suitable rnd
value that corresponds to a valid uid value when the blocks are manipulated.
An alternative and more reliable attack would be to register a username con-
taining a numeric value at the appropriate offset, and duplicate this block so as
to replace the existing uid value. Suppose you register the username daf1, and
are issued with the following token:
9A5A47BF9B3B6603708F9DEAD67C7F4C76FF3D6C6E6A7B9CB8FCA486F9E11922A5BC430A
73B38C14BD223F003A8309DDF29A5A6F0DC06C53905B5366F5F4684C0D2BBBB08BD834BB
ADEBC07FFE87819D
The blocks of plaintext and ciphertext for this token are as follows:
rnd=9224 9A5A47BF9B3B6603
856;app= 708F9DEAD67C7F4C
iTradeEU 76FF3D6C6E6A7B9C
R_1;uid= B8FCA486F9E11922
219;user A5BC430A73B38C14
name=daf BD223F003A8309DD
1;time=6 F29A5A6F0DC06C53
34430503 905B5366F5F4684C
61065250 0D2BBBB08BD834BB
0; ADEBC07FFE87819D
If you then duplicate the seventh block following the fourth block, your
decrypted token will contain a uid value of 1:
rnd=9224 9A5A47BF9B3B6603
856;app= 708F9DEAD67C7F4C
iTradeEU 76FF3D6C6E6A7B9C
R_1;uid= B8FCA486F9E11922
1;time=6 F29A5A6F0DC06C53
219;user A5BC430A73B38C14
name=daf BD223F003A8309DD
1;time=6 F29A5A6F0DC06C53
34430503 905B5366F5F4684C
61065250 0D2BBBB08BD834BB
0; ADEBC07FFE87819D
By registering a suitable range of usernames and reperforming this attack,
you could potentially cycle through the entire range of valid uid values, and
so masquerade as every user of the application.
TRY IT!
http://mdsec.net/auth/363/
cc0077..iinndddd 222266 88//1199//22001111 1122::0077::4411 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 227
Chapter 7 n Attacking Session Management 227
CBC Ciphers
The shortcomings in ECB ciphers led to the development of cipher block chaining
(CBC) ciphers. With a CBC cipher, before each block of plaintext is encrypted
it is XORed against the preceding block of ciphertext, as shown in Figure 7-5.
This prevents identical plaintext blocks from being encrypted into identical
ciphertext blocks. During decryption, the XOR operation is applied in reverse,
and each decrypted block is XORed against the preceding block of ciphertext
to recover the original plaintext.
Plaintext Plaintext Plaintext
Initialization Vector (IV)
Block Cipher Block Cipher Block Cipher
Key Key Key
Encryption Encryption Encryption
Ciphertext Ciphertext Ciphertext
Figure 7-5: In a CBC cipher, each block of plaintext is XORed against the preceding
block of ciphertext before being encrypted.
Because CBC ciphers avoid some of the problems with ECB ciphers, standard
symmetric encryption algorithms such as DES and AES frequently are used
in CBC mode. However, the way in which CBC-encrypted tokens are often
employed in web applications means that an attacker may be able to manipulate
parts of the decrypted tokens without knowing the secret key.
Consider a variation on the preceding application whose tokens contain
several different meaningful components, including a numeric user identifi er:
rnd=191432758301;app=eBankProdTC;uid=216;time=6343303;
As before, when this information is encrypted, it results in an apparently mean-
ingless token:
0FB1F1AFB4C874E695AAFC9AA4C2269D3E8E66BBA9B2829B173F255D447C51321586257C
6E459A93635636F45D7B1A43163201477
Because this token is encrypted using a CBC cipher, when the token is decrypted,
each block of ciphertext is XORed against the following block of decrypted text
to obtain the plaintext. Now, if an attacker modifi es parts of the ciphertext (the
token he received), this causes that specifi c block to decrypt into junk. However, it
also causes the following block of decrypted text to be XORed against a different
cc0077..iinndddd 222277 88//1199//22001111 1122::0077::4411 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 228
228 Chapter 7 n Attacking Session Management
value, resulting in modifi ed but still meaningful plaintext. In other words, by
manipulating a single individual block of the token, the attacker can systemati-
cally modify the decrypted contents of the block that follows it. Depending on
how the application processes the resulting decrypted token, this may enable
the attacker to switch to a different user or escalate privileges.
Let’s see how. In the example described, the attacker works through the
encrypted token, changing one character at a time in arbitrary ways and send-
ing each modifi ed token to the application. This involves a large number of
requests. The following is a selection of the values that result when the applica-
tion decrypts each modifi ed token:
????????32858301;app=eBankProdTC;uid=216;time=6343303;
????????32758321;app=eBankProdTC;uid=216;time=6343303;
rnd=1914????????;aqp=eBankProdTC;uid=216;time=6343303;
rnd=1914????????;app=eAankProdTC;uid=216;time=6343303;
rnd=191432758301????????nkPqodTC;uid=216;time=6343303;
rnd=191432758301????????nkProdUC;uid=216;time=6343303;
rnd=191432758301;app=eBa????????;uie=216;time=6343303;
rnd=191432758301;app=eBa????????;uid=226;time=6343303;
rnd=191432758301;app=eBankProdTC????????;timd=6343303;
rnd=191432758301;app=eBankProdTC????????;time=6343503;
In each case, the block that the attacker has modifi ed decrypts into junk, as
expected (indicated by ????????). However, the following block decrypts into
meaningful text that differs slightly from the original token. As already described,
this difference occurs because the decrypted text is XORed against the preced-
ing block of ciphertext, which the attacker has slightly modifi ed.
Although the attacker does not see the decrypted values, the application
attempts to process them, and the attacker sees the results in the application’s
responses. Exactly what happens depends on how the application handles the
part of the decrypted token that has been corrupted. If the application rejects
tokens containing any invalid data, the attack fails. Often, however, applica-
tions using tokens in this way inspect only certain parts of the decrypted
token, such as the user identifi er. If the application behaves like this, then
the eighth example shown in the preceding list succeeds, and the application
processes the request in the context of the user who has a uid of 226, rather
than the original 216.
You can easily test applications for this vulnerability using the “bit fl ip-
per” payload type in Burp Intruder. First, you need to log in to the applica-
tion using your own account. Then you fi nd a page of the application that
depends on a logged-in session and shows the identity of the logged-in user
within the response. Typically, the user’s home landing page or account details
page serves this purpose. Figure 7-6 shows Burp Intruder set up to target the
user’s home page, with the encrypted session token marked as a payload
position.
cc0077..iinndddd 222288 88//1199//22001111 1122::0077::4411 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 229
Chapter 7 n Attacking Session Management 229
Figure 7-6: Configuring Burp Intruder to modify an encrypted session token
Figure 7-7 shows the required payload confi guration. It tells Burp to oper-
ate on the token’s original value, treating it as ASCII-encoded hex, and to fl ip
each bit at each character position. This approach is ideal because it requires a
relatively small number of requests (eight requests per byte of data in the token)
and almost always identifi es whether the application is vulnerable. This allows
you to use a more focused attack to perform actual exploitation.
When the attack is executed, the initial requests do not cause any noticeable
change in the application’s responses, and the user’s session is still intact. This
is interesting in itself, because it indicates that the fi rst part of the token is not
being used to identify the logged-in user. Many of the requests later in the attack
cause a redirection to the login page, indicating that modifi cation has invali-
dated the token in some way. Crucially, there is also a run of requests where
the response appears to be part of a valid session but is not associated with the
original user identity. This corresponds to the block of the token that contains
the uid value. In some cases, the application simply displays “unknown user,”
indicating that the modifi ed uid did not correspond to an actual user, and so the
attack failed. In other cases, it shows the name of a different registered user of
the application, proving conclusively that the attack has succeeded. Figure 7-8
shows the results of the attack. Here we have defi ned an extract grep column
to display the identity of the logged-in user and have set a fi lter to hide the
responses that are redirections to the login page.
cc0077..iinndddd 222299 88//1199//22001111 1122::0077::4411 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 230
230 Chapter 7 n Attacking Session Management
Figure 7-7: Configuring Burp Intruder to flip each bit in the encrypted token
Figure 7-8: A successful bit flipping attack against an encrypted token
cc0077..iinndddd 223300 88//1199//22001111 1122::0077::4422 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 231
Chapter 7 n Attacking Session Management 231
Having identifi ed the vulnerability, you can proceed to exploit it with a more
focused attack. To do this, you would determine from the results exactly which
block of the encrypted token is being tampered with when the user context
changes. Then you would deliver an attack that tests numerous further val-
ues within this block. You could use the numbers payload type within Burp
Intruder to do this.
TRY IT!
http://mdsec.net/auth/365/
NOTE Some applications use the technique of encrypting meaningful data
within request parameters more generally in an attempt to prevent tampering
of data, such as the prices of shopping items. In any location where you see
apparently encrypted data that plays a key role in application functionality, you
should try the bit-fl ipping technique to see whether you can manipulate the
encrypted information in a meaningful way to interfere with application logic.
In seeking to exploit the vulnerability described in this section, your objec-
tive would of course be to masquerade as different application users — ideally
an administrative user with higher privileges. If you are restricted to blindly
manipulating parts of an encrypted token, this may require a degree of luck.
However, in some cases the application may give you more assistance. When
an application employs symmetric encryption to protect data from tampering
by users, it is common for the same encryption algorithm and key to be used
throughout the application. In this situation, if any application function discloses
to the user the decrypted value of an arbitrary encrypted string, this can be
leveraged to fully decrypt any item of protected information.
One application observed by the authors contained a fi le upload/download
function. Having uploaded a fi le, users were given a download link containing
a fi lename parameter. To prevent various attacks that manipulate fi le paths, the
application encrypted the fi lename within this parameter. However, if a user
requested a fi le that had been deleted, the application displayed an error mes-
sage showing the decrypted name of the requested fi le. This behavior could be
leveraged to fi nd the plaintext value of any encrypted string used within the
application, including the values of session tokens. The session tokens were
found to contain various meaningful values in a structured format that was
vulnerable to the type of attack described in this section. Because these values
included textual usernames and application roles, rather than numeric identi-
fi ers, it would have been extremely diffi cult to perform a successful exploit using
only blind bit fl ipping. However, using the fi lename decryptor function, it was
possible to systematically manipulate bits of a token while viewing the results.
cc0077..iinndddd 223311 88//1199//22001111 1122::0077::4422 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 232
232 Chapter 7 n Attacking Session Management
This allowed the construction of a token that, when decrypted, specifi ed a valid
user and administrative role, enabling full control of the application.
NOTE Other techniques may allow you to decrypt encrypted data used by
the application. A “reveal” encryption oracle can be abused to obtain the
cleartext value of an encrypted token. Although this can be a signifi cant
vulnerability when decrypting a password, decrypting a session token does
not provide an immediate means of compromising other users’ sessions.
Nevertheless, the decrypted token provides useful insight into the cleartext
structure, which is useful in conducting a targeted bit-fl ipping attack. See
Chapter 11 for more details about “reveal” encryption oracle attacks.
Side channel attacks against padding oracles may be used to compromise
encrypted tokens. See Chapter 18 for more details.
HACK STEPS
In many situations where encrypted tokens are used, actual exploitability may
depend on various factors, including the offsets of block boundaries relative
to the data you need to attack, and the application’s tolerance of the changes
that you cause to the surrounding plaintext structure. Working completely
blind, it may appear diffi cult to construct an effective attack, however in many
situations this is in fact possible.
1. Unless the session token is obviously meaningful or sequential in itself,
always consider the possibility that it might be encrypted. You can often
identify that a block-based cipher is being used by registering several dif-
ferent usernames and adding one character in length each time. If you
find a point where adding one character results in your session token
jumping in length by 8 or 16 bytes, then a block cipher is probably being
used. You can confirm this by continuing to add bytes to your username,
and looking for the same jump occurring 8 or 16 bytes later.
2. ECB cipher manipulation vulnerabilities are normally difficult to identify
and exploit in a purely black-box context. You can try blindly duplicat-
ing and moving the ciphertext blocks within your token, and reviewing
whether you remain logged in to the application within your own user
context, or that of another user, or none at all.
3. You can test for CBC cipher manipulation vulnerabilities by running a Burp
Intruder attack over the whole token, using the “bit flipping” payload
source. If the bit flipping attack identifies a section within the token, the
manipulation of which causes you to remain in a valid session, but as a
different or nonexistent user, perform a more focused attack on just this
section, trying a wider range of values at each position.
cc0077..iinndddd 223322 88//1199//22001111 1122::0077::4422 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 233
Chapter 7 n Attacking Session Management 233
4. During both attacks, monitor the application’s responses to identify the
user associated with your session following each request, and try to
exploit any opportunities for privilege escalation that may result.
5. If your attacks are unsuccessful, but it appears from step 1 that variable-
length input that you control is being incorporated into the token, you
should try generating a series of tokens by adding one character at a time,
at least up to the size of blocks being used. For each resulting token, you
should reperform steps 2 and 3. This will increase the chance that the
data you need to modify is suitably aligned with block boundaries for
your attack to succeed.
Weaknesses in Session Token Handling
No matter how effective an application is at ensuring that the session tokens it
generates do not contain any meaningful information and are not susceptible
to analysis or prediction, its session mechanism will be wide open to attack if
those tokens are not handled carefully after generation. For example, if tokens
are disclosed to an attacker via some means, the attacker can hijack user ses-
sions even if predicting the tokens is impossible.
An application’s unsafe handling of tokens can make it vulnerable to attack
in several ways.
COMMON MYTH
“Our token is secure from disclosure to third parties because we use SSL.”
Proper use of SSL certainly helps protect session tokens from being cap-
tured. But various mistakes can still result in tokens being transmitted in
cleartext even when SSL is in place. And various direct attacks against end
users can be used to obtain their tokens.
COMMON MYTH
“Our token is generated by the platform using mature, cryptographically
sound technologies, so it is not vulnerable to compromise.”
An application server’s default behavior is often to create a session cookie
when the user fi rst visits the site and to keep this available for the user’s
entire interaction with the site. As described in the following sections, this
may lead to various security vulnerabilities in how the token is handled.
cc0077..iinndddd 223333 88//1199//22001111 1122::0077::4422 PPMM
Stuttard c07.indd V3 - 07/22/2011 Page 234
234 Chapter 7 n Attacking Session Management
Disclosure of Tokens on the Network
This area of vulnerability arises when the session token is transmitted across
the network in unencrypted form, enabling a suitably positioned eavesdropper
to obtain the token and therefore masquerade as the legitimate user. Suitable
positions for eavesdropping include the user’s local network, within the user’s IT
department, within the user’s ISP, on the Internet backbone, within the application’s
ISP, and within the IT department of the organization hosting the application. In
each case, this includes both authorized personnel of the relevant organization
and any external attackers who have compromised the infrastructure concerned.
In the simplest case, where an application uses an unencrypted HTTP connec-
tion for communications, an attacker can capture all data transmitted between
client and server, including login credentials, personal information, payment