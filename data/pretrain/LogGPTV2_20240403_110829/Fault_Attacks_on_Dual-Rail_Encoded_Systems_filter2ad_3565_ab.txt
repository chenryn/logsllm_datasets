subjected to single arbitrary faults. In practice, these faults
are induced in the transistors at the physical level, but we
model them as occurring in the OR and C-element gates of
the dual-rail implementations of the logical AND and OR
gates of the original circuit. In Appendix A, we discuss how
faults induced in transistors motivate our threat models.
For our purposes here, we do not consider fault attacks
on the bus to external RAM or to the instruction memory.
We think of an induced fault in a circuit as a possible de-
viation in the value at the output or input of a single OR or
C-element gate in the dual-rail implementations of the AND
or OR logic gates.1
We allow exactly one fault per computation and we as-
sume the adversary has complete control over the absolute
timing of the fault and the location (i.e., which gate) of the
fault. We assume the adversary has complete knowledge
of the layout and operation of the system (with the obvious
exception of the value of the secret, however it is stored).
These assumptions are admittedly strong, but recent results
in fault induction indicate that at least the precision assump-
tions are not outlandish [1].
Our classiﬁcation of faults is partially motivated by a
similar one used by Bl¨omer and Seifert in their fault-attack
analysis of AES [7]. We classify faults using two parame-
ters: the type of fault and the persistence of the fault.
3.2.3 Fault type
The type of fault indicates what kind of deviation the fault
induces at its target. We consider three types: set and reset
faults set the target value to 1 or 0, respectively, while a ﬂip
fault toggles the target value.
3.2.4 Fault persistence
The persistence of a fault models the duration of the effect
of a fault as well as the level of control the attacker has
over when the effect occurs. We consider two levels of fault
persistence:
• A transient fault affects its target in an erratic man-
ner, causing it to swing between the fault and natural
states. We assume only that fault state does occur at
least once.
• A steady fault forces the target to assume the fault state
for the entire interval during which the attacker applies
the steady fault.
1Except where fanout is concerned, this is similar to fault models where
there is a possible change in the value carried on a single wire. Physical
considerations suggest deviations at inputs and outputs of gates as the most
reasonable fault model, at least with CMOS.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:22 UTC from IEEE Xplore.  Restrictions apply. 
4 Attacks on dual-rail encoded systems
We describe how to efﬁciently extract secret bits in our
various threat models.
In all cases, the attacker learns a particular secret bit by
deducing an internal value in the dual-rail implementation
of the ﬁrst logical gate that takes that secret bit as an in-
put.
Inducing a fault in a well-chosen OR or C-element
gate reveals something about the bit in question. The same
approach is repeated for each of the n bits.
Figure 2 shows the encoding-level implementation of
both an AND and an OR gate for dual-rail logic and in-
dicates the sites relevant to our attacks.
4.1 Set and ﬂip faults
We show how an attacker who can induce set or ﬂip
faults can recover the secret. The trick is to cause data-
dependent activation of the C-elements intended for prop-
agating alarm signals, ultimately revealing a logical input
value in whether or not the circuit terminates in error. Due
to the stateful, sticky nature of the C-elements, steady and
transient ﬂip- and set-faults can be employed in the same
way to reveal the secret bit.
We ﬁrst describe the attack in the steady set-fault threat
model, then argue that this attack works in the other threat
models.
4.1.1 Steady set faults
Suppose the attacker wants to learn bit i of the secret. She
will focus her attack on the ﬁrst gate that takes bit i as an
input. In particular, if bit i is the a input to the gate, she will
induce a fault at the C-element input marked Sa in Figure 2
for that type of gate, while for a b input she would induce a
fault at Sb.
Suppose the attacker is interested in the a input of a dual-
rail logical AND gate (the b and OR gates are similar), and
that both the a and b inputs contain valid data: each is in
either a logical 0 (dual-rail encoded (0, 1)) or a logical 1
(dual-rail encoded (1, 0)) state.2 In this case, the suggested
attack is to set to 1 the Sa input to the C-element, as indi-
cated in Figure 2.
Let us consider the resulting output of the dual-rail AND
gate. There are two possibilities, depending on the logical
value of a:
• Case 1: The a input has logical value 1. Then
(a1, a0) = (1, 0).
2Our fault models require that at most one fault happens per computa-
tion, and since we have not introduced a fault yet, both inputs will contain
valid data, so our assumption is reasonable.
Table 3. Summary of the steady set-fault at-
tack.
a
0
0
1
1
b
0
1
0
1
Before set-fault at Sa
(a1, a0)
(b1, b0)
(0,1)
(0,1)
(1,0)
(0,1)
(0,1)
(1,0)
(1,0)
(1,0)
After set-fault at Sa
Result
error
error
no error
no error
C-elt In
(1,1)
(1,1)
(1,0)
(1,0)
(r1, r0)
(1,1)
(1,1)
(0,1)
(1,0)
Since a1 is already 1, setting the Sa input to 1 has no
effect, and the entire computation terminates normally
with a valid output.
• Case 2: The a input has a logical value 0. Then
(a1, a0) = (0, 1).
Since a0 is 1, the output value r0 is 1 regardless of the
b input’s logical value. Furthermore, we have set to
1 the C-element input marked Sa. The other input to
that C-element is a0. Thus, that C-element will have
output 1, driving the output r1 = 1. At this point, the
output of this dual-rail AND gate is the (1, 1) alarm
state, which propagates, and the computation ﬁnishes
in an error state.
The cases are also summarized in Table 3. Notice that
the computation halts with an error if and only if the logical
value of a was originally 0, so the value of a (and bit i)
is revealed. Repeating this attack once for each secret bit
allows the attacker to learn the entire n-bit secret with n
iterations.
4.1.2 Transient set, steady and transient ﬂip faults
We will argue that inducing a steady ﬂip, transient ﬂip, or
transient set fault at the same target site as in the steady
set-fault attack above also allows the attacker to deduce the
logical input value.
Suppose, as above, that bit i of the secret is ﬁrst used as
input a to an AND gate. Referring again to Figure 2, we
would like to induce a fault at the Sa site that will result
in either a valid computation or halting in an error state de-
pending on the value of the C-element’s other input, a0. Of
course, once a0 is determined, the logic value of a follows.
It is easy to see that the above attack works with a steady
ﬂip fault:
• If a = 1, then (a1, a0) = (1, 0) and the target C-
element has output 0. Flipping the input at Sa makes
both C-element inputs 0, and the output remains 0. The
expected, error-free, computation follows.
• If a = 0, then (a1, a0) = (0, 1) and the target C-
element has output 0. Flipping the input at Sa makes
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:22 UTC from IEEE Xplore.  Restrictions apply. 
a1 a0
a1 a0
b1 b0
b1 b0
a1 a0
a1 a0
b1 b0
b1 b0
R0
R1
R2
R3
C
C
C
C
C
C
AND
Sa
Sb
r0
r0
r1
r1
Sb
Sa
C
C
C
C
C
C
R0
R1
R2
R3
OR
r0
r0
r1
r1
Figure 2. Dual-rail AND and OR gates. Set/Flip attack target sites are labeled Sa and Sb. Reset attack
target sites are R0 through R3.
C
C
Sa
Sa
Figure 3. Depending on the value of the other
input, a C-element may latch high from a tran-
sient signal at the Sa input.
both C-element inputs 1, and the output also goes to
1, also driving the r1 output to 1. Since a0 = 1, we
already have r0 = 1. Thus, this AND gate has a (1, 1)
alarm state output, and the computation results in an
error.
As for the transient set and transient ﬂip fault models,
we need only point out that the only case where the fault
must effect a change in the output value of the C-element
is when a = 0 (and (a1, a0) = (0, 1)). With a0 = 1, any
brief setting of a1 to 1 will cause the C-element to give a
1 output, and it will remain 1 even after a1 drops back to 0
as long as a0 remains at 1. This effect occurs in both the
transient ﬂip and transient set threat models, and is depicted
in Figure 3.
4.1.3 Steady ﬂip model and power consumption
In general, the difﬁculty with a single steady ﬂip is that it
will always induce one of the two types of error states, quiet
or alarm. Casual observation of the device will not reveal
which error state resulted from the induced fault, but an at-
tacker that also observes power consumption may well be
able to distinguish quiet and alarm states, and thereby de-
termine the target logic value.
4.1.4 Summary of attack in set and ﬂip models
The attack is quite efﬁcient: each experiment yields a bit of
the secret. Thus, an attacker can recover an n-bit secret by
observing and inducing faults in just n computations. We
see that with our assumptions, dual-rail logic is not secure
against steady or transient set- and ﬂip-faults.
4.2 Steady reset fault model
As we saw in Section 4.1, an attacker who can cause
value to change from 0 to 1 can leverage the alarm propaga-
tion aspects of the dual-rail gate design to cause the system
to divulge the logical values of gate inputs.
In the reset fault models, however, the induced faults can
only change a 1 to a 0, and this presents the attacker with
a slightly trickier problem. The reason for this problem is
that the proposed dual-rail gates are monotonic: once there
is an input present that causes an output to be 1, setting other
inputs to 1 will never cause the output to go to 0. Likewise,
clearing input bits of a gate that is producing a 0 output will
not cause that output to become 1. Thus, the attacker can
only hope to alter a computation by having it result in a
deadlock ((0, 0) quiet state) error.3 The trick is to produce
3This limitation is mostly an artifact of our chosen model. Physical
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:22 UTC from IEEE Xplore.  Restrictions apply. 
Table 4. Outputs from Figure 2, minterms, and
implications.
Active Output Active Minterm Logical Implication
(a = 0) ∧ (b = 1)
(a = 1) ∧ (b = 0)
a = b = 0
a0b0
a0b1
a1b0
a1b1
R0
R1
R2
R3
a = b = 1
input bits simultaneously. This immediately suggests that in
the worst case, an adversary has to run at most 3
2 n compu-
tations to discover n bits. However, if the attacker attacks
gates with two unknown inputs by randomly selecting the
order of attack on the R0, . . . , R3 sites, he can expect to run
fewer tests. Let Xi stand for the event that the active site is
known after i trials, and we compute:
3(cid:1)
E[trials to deduce two bits] =
i · Pr[Xi]
these errors in a data dependent way that allows the attacker
to deduce internal logical values.
Suppose the attacker wishes to learn bit i of the secret,
which is fed as an input to a dual-rail AND gate, as depicted
in Figure 2. The attacker will attempt to learn the logic
values of the input by clearing the output of one of the four
C-elements with outputs labeled R0, R1, R2, or R3. Notice
that when both the a and b inputs contain valid dual-rail data
values ((0, 1) or (1, 0)), exactly one of these C-elements
will be producing a 1 output. This is because each of the
C-elements is responsible for detecting one minterm. As
summarized in Table 4, knowing which of the R0, . . . , R3
outputs is 1, and therefore which minterm is active, reveals
the logic values of the a and b inputs.
Suppose the attacker guesses which of
the the
R0, . . . , R3 outputs is 1 and then clears that output. If he
guesses incorrectly, the fault will have no effect because that
bit is already ﬁxed at 0. If he guesses correctly, however, he
will change the operation of the circuit: what would have
been a 1 is now replaced by a 0. This will cause the dual-rail
AND gate to output (0, 0), indicating no data present and
ultimately causing the computation to deadlock, conﬁrming
his guess. Therefore, by clearing each of the Ri sites across
several computations and observing whether each compu-
tation deadlocks or not, the attacker can learn the logical
values carried on both inputs to any logical dual-rail gate.
Now all that is left is for the attacker to decide in what or-
der to attack the four output sites. The most effective choice
of the order for attacking the output sites depends on what
the attacker knows about the inputs.
In the case that the logical value of one of the inputs is
known (as when a gate is mixing a key bit with a known
plaintext bit), he can narrow the candidate active outputs
down to two (e.g., if he knows b = 1, he need only deter-
mine whether R1 or R3 is 1), and only one trial is necessary
to determine which is active.
On the other hand, if both inputs are unknown, the at-
tacker may be unlucky and run up to three computations
before discovering the active output site and deducing the
inputs’ logic values. As a consolation prize, he learns both
+ 2 · 3
4
· 1