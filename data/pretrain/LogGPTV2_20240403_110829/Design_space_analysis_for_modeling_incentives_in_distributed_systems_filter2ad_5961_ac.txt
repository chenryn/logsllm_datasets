### Stranger Policy: Interactions with Unknown Peers

When interacting with an unknown peer (stranger), past history cannot inform the interaction. Therefore, a specific policy is necessary to manage interactions with strangers. A critical aspect of this policy is how peers allocate resources to these unknown entities.

### Selection Function: Choosing Interaction Partners

When a peer needs to interact with others, the selection function determines which known peers should be chosen. This decision can be based on various factors, such as past behavior (through direct experience or reputation systems), service availability, and liveness criteria.

### Resource Allocation: Dividing Resources Among Selected Peers

During peer interactions, resources must be allocated to the selected peers. The way a peer divides its resources among the chosen peers defines the resource allocation policy.

### Existing Protocols and Designs

Several existing protocols and proposed designs are listed in Table 2. For example:
- **Give-to-Get (GTG) [21]**: Employs unconditional cooperation with strangers.
- **P2P Replica Storage Design [30]**: Defects on strangers when the set of regular partners is full.
- **BarterCast [20]**: Ranks peers by reputation score and bans those below a certain threshold.
- **P2P Replica Storage**: Selects peers closest to the selecting peer’s storage capacity, similar to our proposed Birds in BitTorrent-like file-sharing systems.
- **Maze [32]**: Allocates resources proportionally to rank.

These examples illustrate the variety of P2P systems that rely on eliciting cooperation from participating nodes.

### Actualization of a Specific P2P Protocol Design Space

We define specific actualizations for a BitTorrent-like file-swarming system based on the general design space outlined in Section 4.1. These ideas are inspired by various works on cooperation in P2P, biology, and social sciences [1, 10, 25].

#### Stranger Policy
We define three different actualizations and a value \( h \) for the number of strangers to cooperate with:
1. **Periodic**: Give resources to up to a certain number of strangers periodically.
2. **When Needed**: Only give resources to strangers when the set of regular partners is not full. Inspired by [11].
3. **Defect**: Always defect on strangers, i.e., give nothing to strangers.

We set \( h \) to be in the range [1, 3], resulting in 3 × 3 = 9 different stranger policies. Adding one more policy where the number of strangers is zero, we have a total of 10 different stranger policies.

#### Selection Function
The selection function is divided into three parts: a candidate list, a ranking function over that list, and a value \( k \) for the number of peers to select from the ranked list.

**Candidate List**:
1. **TFT (Tit-for-Tat)**: Default in BitTorrent, placing peers in the candidate list who reciprocated in the last round.
2. **TF2T (Tit-for-Two-Tats)**: Placing peers in the candidate list who reciprocated in either of the last two rounds. Inspired by [1].

**Ranking Function**:
1. **Sort Fastest**: Ranks peers by fastest first.
2. **Sort Slowest**: Ranks peers by slowest first.
3. **Sort Based on Proximity**: Ranks peers by proximity to one’s own upload bandwidth, as in Birds.
4. **Sort Adaptive**: Ranks peers by proximity to an adaptive aspiration level. Inspired by [25].
5. **Sort Loyal**: Ranks peers by the duration of cooperation. Inspired by [10].
6. **Random**: Does not rank peers and chooses them randomly. Inspired by [15].

After applying the ranking function, a peer chooses the top \( k \) peers, where \( k \) is the maximum number of partners. Setting \( k \) in the range [1, 9] results in 2 × 6 × 9 = 108 different possibilities for the selection function. Adding one more protocol where the number of selected peers is zero, we have a total of 109 different selection policies.

#### Resource Allocation
We define three actualizations:
1. **Equal Split**: Gives all selected peers equal resources (upload bandwidth).
2. **Prop Share**: Allocates resources proportionally to past contributions. Inspired by [16].
3. **Freeride**: Gives nothing to partners.

This results in a total of 10 × 109 × 3 = 3270 unique protocols. This number can vary based on specific implementations and design choices.

### Conducting the PRA Quantification

#### Simulation Model
We use a cycle-based simulation model, where time is divided into rounds. Each peer can connect to any other peer. In each round, a peer decides to upload to a given number of peers based on some selection criterion, using its resource allocation policy. It also decides to cooperate with strangers based on its stranger policy. A peer maintains a short history of actions by others and has a rate of requesting services from other peers. We run simulations with 50 peers, interacting for 500 rounds, using a cluster. Peers are initialized with a realistic bandwidth distribution [24], and we assume all peers always have data that others are interested in.

#### Methodology
We measure the Performance, Robustness, and Aggressiveness of each protocol as described in Section 3.2.

**Performance**:
- Run 100 simulations for each protocol, measuring the average throughput of the population.

**Robustness**:
- Run simulations where each protocol competes against every other protocol.
- Each encounter involves splitting the peer population into two equal halves, with half executing one protocol and the other half executing another.
- Perform 10 runs for each encounter, comparing the average performance of the two protocols.
- Calculate robustness as the number of wins divided by the total number of games played.

**Aggressiveness**:
- Use the same setup as for Robustness, but with 10% of the peers executing the protocol and the rest executing another protocol.

### Results and Discussion

Figure 2 shows the 3270 protocols with their normalized Robustness and Performance values, representing a synthesis of over 107 million individual simulation runs.

**Performance**:
- Many protocols have low performance and robustness in the range [0, 0.2].
- Freeriders, especially those who defect on strangers, perform poorly.
- The highest-performing protocol defects on strangers, uses the Sort Slowest ranking function, and maintains one partner. This protocol achieves a performance of 1 by ensuring peers rarely find themselves without a fully occupied partner set.

**Robustness**:
- The most robust protocols use the When needed stranger policy, the Sort Fastest ranking function, and the Prop Share resource allocation policy.
- These features validate the robustness of the Prop Share mechanism and highlight the importance of the When needed policy in avoiding exploitation by freeriding strangers.

In summary, the combination of the When needed stranger policy, the Sort Fastest ranking function, and the Prop Share resource allocation policy results in highly robust and high-performing P2P protocols.