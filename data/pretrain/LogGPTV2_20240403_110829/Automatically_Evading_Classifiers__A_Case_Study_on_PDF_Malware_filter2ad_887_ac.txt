host queries extracted from API traces as the signature for our
experiments. By combining those two behavioral signatures,
we obtain a signature that is effective on all 500 malware seeds
and has the highest average and minimum consistency.
Benign PDF Dataset. We collected a set of 179 benign PDF
documents using a Google search with ﬁletype:pdf and no
keywords. All ﬁles were conﬁrmed to be benign by both Virus-
Total [31] and Wepawet [7]. We only included ﬁles smaller
than 1 MB to avoid introducing unnecessary computation
costs manipulating extremely large PDF ﬁles. We picked the
3 benign samples with the lowest scores (that is, most benign)
to the target classiﬁers as the source of external objects in the
experiment. Our results show that just a few benign samples
is sufﬁcient for generating successful evasion attacks.
GP Parameters. Several GP parameters are arbitrarily chosen
without any parameter ﬁne-tuning other than one obvious
constraint: we want the experiment to ﬁnish in a reasonable
time. The population size is 48 and the maximum generation
is 20. The mutation rate is 0.1. The ﬁtness stop threshold is
0.0, which indicates that an evasive variant has been found.
Target Classiﬁers. Since we don’t want to abuse the online
deployed malware classiﬁcation systems by submitting too
7
many automatically generated malware variants, we always
prefer locally executable code. We used the Mimicus re-
implementation of PDFrate and the Hidost classiﬁer, conﬁg-
ured and trained as described in Section III-B.
Machine. We used one typical desktop PC in the experiment
(Intel Core i7-2600 CPU @ 3.40GHz and 32GB of physical
memory running 64-bit Ubuntu 14.04 Server). The Cuckoo
sandbox consists of 16 virtual machine instances running
Windows XP SP3 32 bit and Adobe Acrobat Reader 8.1.1. The
resources required to ﬁnd evasive samples using our approach
are readily available.
VI. RESULTS
The GP-based method achieves surprisingly good results in
evading the two target classiﬁers. For both of the classiﬁers,
it is able to generate a variant that preserves the malicious
behavior but is classiﬁed as benign for all 500 seeds in our
test set. Our code and data are available under an open source
license from http://www.evadeML.org
A. PDFrate
After approximately one week of execution, the algorithm
found 72 effective mutation traces that generated 16,985 total
evasive variants for the 500 malware seeds (34.0 evasive
variants per seed in average), achieving 100% evasion rate in
attacking PDFrate.
Trace Analysis. All the mutation traces that generated evasive
variants were re-executed on all of the 500 seeds afterwards to
investigate the efﬁcacy of each trace. Efﬁcacy here measures
for how many of the malware seeds applying the given trace
produces an evasive variant.
The length of each mutation trace and its efﬁcacy are
illustrated in Figure 4. The traces are sorted by trace ID, which
reﬂects the order in which traces are found. From the ﬁgure
we observe that the method generally ﬁnds longer mutation
traces as the evolution proceeds. Part of the reason for this
is the initial population for later seeds is generated using
the collected traces. If those initial variants are not evasive,
subsequent mutations will be added to the original traces.
The efﬁcacy of each seed is not strongly correlated with
its length. One mutation trace consisting of a single opera-
tion that inserts a page object generated evasive variants for
155 malware seeds. There was also mutation trace with 189
operations that was effective for only two seeds.
The accumulated evasions sorted by the length of mutation
traces are given by Figure 5 (for comparison,
the ﬁgure
show results for Hidost as well, which we discuss later).
The difﬁculty of generating variants to evade PDFrate varies
substantially over the seeds. It only took 15 short mutation
traces (none longer than 45 operations) to generate evasive
variants for 400 of the 500 seeds. Finding evasive variants for
the other 100 seeds took 57 long mutation traces with lengths
ranging from 48 to 354.
In order to understand why it takes much longer traces to
generate evasive variants for those 100 seeds, we examined
the original classiﬁcation scores of each seed. Figure 6 groups
Fig. 4. The length and efﬁcacy of mutation traces for evading PDFrate.
Fig. 5. Accumulated evasions against PDFrate and Hidost, sorted by trace
length.
the seeds by the minimum trace length required for generating
evasive variants. The left side shows the original classiﬁcation
score distribution in PDFrate. We found that the original seeds
with lower classiﬁcation scores (<0.95) are mostly evadable
by short traces. Thus, we believe some seeds require more
mutations to evade because they are originally more clearly
malicious to the classiﬁer. (This is more obvious in Hidost as
we discuss later.)
Feature Analysis. To understand the evasion attacks, we
examine the impact of the changes on the feature space used
by PDFrate.
We ﬁrst look at the two simplest mutation traces in length
of 1 that are effective for 162 seeds:
(insert, /Root/Pages/Kids,
3:/Root/Pages/Kids/4/Kids/5/)
(replace, /Root/Type, 3:/Root/Pages/Kids/1/Kids/3)
Even though they are different operations, the common effect
of the two mutations is that they both introduce new Page
8
Fig. 6. The distribution of the original classiﬁcation score of seeds.
objects from external benign PDFs, resulting in signiﬁcant
changes in the feature space of PDFrate.
Table III lists one example of feature changes by simply
inserting several Page objects. The classiﬁcation score of the
original seed is 0.998, approaching the maximum malicious
score of 1.0. After inserting the new Page objects, the clas-
siﬁcation score decreases to 0.43, which is below the normal
malware threshold of 0.5. The simple insert resulted in a large
number of changes in the feature space. The counters of some
objects like pages, fonts and streams as well as the ﬁle size
directly increase due to the newly introduced objects. The
object length statistics are decreased or increased due to the
change of the object population. Some other features on object
positions are also changed due to the relocation of objects at
the raw byte level. All feature values are in the raw formats
because feature normalization is not required with random
forests. Even though the feature changes are so signiﬁcant
that PDFrate classiﬁes the new variant as benign, the malicious
behavior of the original seed does not change at all. The change
just added some pages to the PDF ﬁle.
One simple manipulation introduces many feature changes,
but the impact of changing each feature is not equivalent due
to the varying importance of features in the classiﬁcation.
Though random forest is a complex non-linear model that
is difﬁcult to interpret, we estimate the impact of altering
each feature independently. Intuitively, changing a high impact
feature should signiﬁcantly affect the classiﬁcation scores.
For an original malware sample, if the feature is changed
to a different value in evasive variants,
the classiﬁcation
score should decrease (indicating it appears more like benign
samples to the classiﬁer). On the other hand, for an evasive
variant, if the feature value is reset to the original value,
the classiﬁcation score should increase (appears more like
malicious samples to the classiﬁer). Therefore, we model the
impacts with two factors. The decrease of the classiﬁcation
score of a malware seed when a feature is changed to the
evasive value is reported as ∆score1. The increase of the
classiﬁcation score of an evasive variant when the feature is
reset to the original value is reported as ∆score2. The impact is
TABLE III.
IMPACT OF PDFRATE FEATURES.
Feature
count font
count obj
count endobj
count box other
count endstream
pos box max
count stream
pos box avg
pos eof avg
pos eof min
pos page max
pos eof max
pos page avg
size
0.0
11.0
11.0
3.0
4.0
0.0
4.0
0.0
1.0
1.0
0.0
1.0
0.0
70.0
230.0
230.0
140.0
74.0
0.8
74.0
0.5
1.0
1.0
0.8
1.0
0.5
36,028.0 503,739.0
7,407.9
2,190.2
6,807.3
2,157.2
68.0
27,455.0 34,314.0
49.0
6,390.2
len stream avg
len stream max 27,392.0 34,246.0
0.0
pos page min
pos box min
0.0
Original Evasive ∆score1 ∆score2 Impact
0.506
0.392
0.177
0.110
0.125
0.069
0.081
0.043
0.065
0.054
0.065
0.013
0.062
0.041
0.044
0.022
0.032
0.032
0.027
0.029
0.021
0.018
0.018
0.016
0.012
0.010
0.004
0.005
0.003
0.002
0.002
0.002
0.002
0.000
0.001
0.000
0.000
0.004
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000
0.000 -0.002
0.000 -0.003
0.114
0.067
0.056
0.038
0.011
0.052
0.021
0.022
0.000
-0.002
0.003
0.002
0.002
-0.001
0.001
0.000
0.002
0.001
-0.004
0.000
0.000
0.000
0.000
-0.002
-0.003
ratio size page 36,028.0
ratio size obj
3,275.3
ratio size stream 9,007.0
3,234.9
1.0
len obj avg
count page
len obj max
len obj min
44.0
8,700.3
0.0
0.0
The difference in the feature space of PDFrate for a selected
seed sample (with score 0.998) and corresponding evasive variant
(with score 0.43). Original is the feature value of the original
seed malware sample; Evasive is the feature value of the evasive
variant. Features with the same value for both samples are not
included. ∆score1 is the original score subtracting the score after
that feature is changed to Evasive value; ∆score2 is the evasive
score subtracted by the score after that feature is reset to the
Original value. Impact is ∆score1 + ∆score2.
the sum of the two scores. Table III lists the impact ranking of
the affected features, which roughly matches with the feature
importance ranking in PDFrate [26].
The most critical feature change for this example is
count font. The original malware sample does not have any
font objects as fonts are not needed for the exploit. The
classiﬁer learns that this feature is important because most
of the malware samples in the training set do not contain any
font objects as the malware authors are too lazy to insert any
text, but it is unlikely that any benign PDF ﬁle has no font
9
TABLE IV.
MOST ALTERED FEATURES EVADING PDFRATE
Counts
16,985
16,985
16,985
16,985
16,975
16,975
16,941
16,941
16,862
16,812
Increased features
pos eof avg
pos eof max
pos eof min
size
count endstream
count stream
count endobj
count obj
len stream max
pos box max
Counts
14,234
10,806
10,728
8,834
7,637
4,742
4,742
4,250
3,448
3,137
Decreased features
pos page min
len obj min
count javascript
len stream min
ratio size stream
createdate tz
delta tz
ratio size page
len stream avg
pos page avg
objects. However, this is an artifact of the malware samples in
the training set, not an inherent property for malicious PDFs.
It is trivial to add font objects to an existing PDF malware
sample to alter the value of this feature.
There are longer traces which contain at most 354 muta-
tions and inﬂuence more features in PDFrate. Table IV lists
the features that were most frequently increased and decreased
across all 16,985 evasive variants found. (The full list of all 68
mutable features of PDFrate found in evasion attacks is found
in Appendix A.) The count is how many times the value of
the feature is different for the evasive variant found compared
to the original seed. High counts imply these features are not
robust and should not be used in malware classiﬁcation because
they are easy to change without corrupting the malicious
properties for many malware seeds.
Most non-robust features are unsurprising, because a PDF
malware author can always change the visible contents (such
as pages, text, images and metadata) in PDF malware samples
without corrupting the malicious payloads. The only surprising
feature is count javascript. Since PDF malware heavily relies
on JavaScript to carry exploits and shell code, it seems surpris-
ing that it is possible to decrease count javascript without dis-
rupting the malicious behavior. However, the count javascript
feature is not an accurate count of the number of embedded
JavaScript code pieces in a PDF. It just extracts the number of
JavaScript keywords, but these keywords are optional in script
execution. The targeted PDF reader will execute the JavaScript
even without the /Javascript keyword.
B. Hidost