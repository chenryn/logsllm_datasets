title:Etherfuse: an ethernet watchdog
author:Khaled Elmeleegy and
Alan L. Cox and
T. S. Eugene Ng
EtherFuse: An Ethernet Watchdog
Khaled Elmeleegy, Alan L. Cox, T. S. Eugene Ng
Department of Computer Science
Rice University
Abstract
Ethernet is pervasive. This is due in part to its ease of use. Equip-
ment can be added to an Ethernet network with little or no manual
conﬁguration. Furthermore, Ethernet is self-healing in the event of
equipment failure or removal. However, there are scenarios where
a local event can lead to network-wide packet loss and congestion
due to slow or faulty reconﬁguration of the spanning tree. More-
over, in some cases the packet loss and congestion may persist in-
deﬁnitely.
To address these problems, we introduce the EtherFuse, a new
device that can be inserted into an existing Ethernet to speed the
reconﬁguration of the spanning tree and prevent congestion due to
packet duplication. EtherFuse is backward compatible and requires
no change to the existing hardware, software, or protocols. We de-
scribe a prototype EtherFuse implementation and experimentally
demonstrate its effectiveness. Speciﬁcally, we characterize how
quickly it responds to network failures, its ability to reduce packet
loss and duplication, and its beneﬁts on the end-to-end performance
of common applications.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]: Packet Switching Net-
works; C.2.3 [Network Operations]: Network Monitoring; C.2.5
[Local and Wide-Area Networks]: Ethernet
General Terms
Management, Performance, Reliability, Experimentation
Keywords
Network Watchdog, Ethernet, Reliability, Count to Inﬁnity, For-
warding Loop
1.
INTRODUCTION
This paper introduces the EtherFuse, a new device that can be
inserted into an existing Ethernet in order to increase the network’s
robustness. The EtherFuse is backward compatible and requires no
change to the existing hardware, software, or protocols.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’07, August 27–31, 2007, Kyoto, Japan.
Copyright 2007 ACM 978-1-59593-713-1/07/0008 ...$5.00.
Ethernet is the dominant networking technology in a wide range
of environments, including home and ofﬁce networks, data center
networks, and campus networks. Moreover, Ethernet is increas-
ingly used in mission-critical applications. Consequently, the net-
works supporting these applications are designed with redundant
connectivity to handle failures.
Although modern Ethernet is based on a point-to-point switched
network technology, Ethernet still relies on packet ﬂooding to de-
liver a packet to a new destination address whose topological lo-
cation in the network is unknown. Moreover, Ethernet relies on
switches observing the ﬂooding of a packet to learn the topologi-
cal location of an address. Speciﬁcally, a switch observes the port
at which a packet from a particular source address S arrives. This
port then becomes the outgoing port for packets destined for S and
so ﬂooding is not required to deliver future packets to S.
To support the ﬂooding of packets for new destinations and ad-
dress learning, an Ethernet network dynamically builds a cycle-free
active forwarding topology using a spanning tree protocol. This
active forwarding topology is a logical overlay on the underlying
physical topology. This logical overlay is implemented by conﬁg-
uring the switch ports to either forward or block the ﬂow of data
packets.
Redundant connectivity in the physical topology provides pro-
tection in the event of a link or switch failure. However, it is
essential that the active forwarding topology be cycle free. First
of all, broadcast packets will persist indeﬁnitely in a network cy-
cle because Ethernet packets do not include a time-to-live ﬁeld.
Moreover, unicast packets may be mis-forwarded if a cycle exists.
Speciﬁcally, address learning may not function correctly because a
switch may receive packets from a source on multiple switch ports,
making it impossible to build the forwarding table correctly.
The dependability of Ethernet therefore heavily relies on the abil-
ity of the spanning tree protocol to quickly recompute a cycle-free
active forwarding topology upon a network failure. While the ac-
tive forwarding topology is being recomputed, localized packet loss
is to be expected. Unfortunately, under each of the standard span-
ning tree protocols [16, 15], there are scenarios in which a localized
network failure can lead to network-wide packet loss and conges-
tion due to slow or faulty reconﬁguration of the spanning tree or
the formation of a forwarding loop.
Detecting and debugging the causes of these problems is labor
intensive. For example, Cisco’s prescribed way for troubleshoot-
ing forwarding loops is to maintain a current diagram of the net-
work topology showing the ports that block data packets. Then, the
administrator must check the state of each of these ports. If any
of these ports is forwarding, then a failure at that port is the likely
cause for the forwarding loop [8]. However, when there is network-
wide packet loss and congestion, remote management tools may
also be affected, making it difﬁcult to obtain an up-to-date view of
the network state. Consequently, the network administrator may
have to walk to every switch to check its state, which can be time
consuming.
The network disruption at the Beth Israel Deaconess Medical
Center in Boston illustrates the difﬁculty of troubleshooting Eth-
ernet failures [2, 3].
In this incident, the network suffered from
disruptions for more than three days due to problems with the span-
ning tree protocol.
A variety of approaches have been proposed to address the reli-
ability problems with Ethernet. Some researchers have argued that
Ethernet should be redesigned from the ground up [19, 18, 20].
In contrast, others have proposed keeping the basic spanning tree
model but changing the protocol responsible for its maintenance
to improve performance and reliability [11]. Proprietary solutions
to a few speciﬁc spanning tree problems have been implemented
in some existing switches, including Cisco’s Loop Guard [6] and
Unidirectional Link Detection (UDLD) protocol [9]. However, to-
gether these proprietary solutions still do not address all of Ether-
net’s reliability problems.
Instead of changing the spanning tree protocol, we introduce the
EtherFuse, a new device that can be inserted into redundant links
in an existing Ethernet to speed the reconﬁguration of the span-
ning tree and prevent congestion due to packet duplication. The
EtherFuse is compatible with any of Ethernet’s standard spanning
tree protocols and requires no change to the existing hardware, soft-
ware, or protocols. In effect, the EtherFuse allows for the redundant
connectivity that is required by mission critical applications while
mitigating the potential problems that might arise.
We describe a prototype EtherFuse implementation and experi-
mentally demonstrate its effectiveness. Speciﬁcally, we character-
ize how quickly it responds to network failures, its ability to reduce
packet loss and duplication, and its beneﬁts on the end-to-end per-
formance of common applications.
The rest of this paper is organized as follows. The next section
describes the problems that are addressed by the EtherFuse. Sec-
tion 3 describes the EtherFuse’s design and operation. Section 4
describes a prototype implementation of the EtherFuse. Section 5
describes our experimental setup. Section 6 presents an evaluation
of the EtherFuse’s effectiveness. Section 7 discusses related work.
Finally, Section 8 states our conclusions.
2. ETHERNET FAILURES
The three IEEE standard Ethernet spanning tree protocols are
the Spanning Tree Protocol (STP), the Rapid Spanning Tree Pro-
tocol (RSTP), and the Multiple Spanning Tree Protocol (MSTP).
RSTP was introduced in the IEEE 802.1w standard and revised in
the IEEE 802.1D (2004) standard.
It is the successor to STP. It
was created to overcome STP’s long convergence time that could
reach up to 50 seconds [7]. In STP, each bridge maintains a sin-
gle spanning tree path. There are no backup paths. In contrast, in
RSTP, bridges compute alternate spanning tree paths using redun-
dant links that are not included in the active forwarding topology.
These alternate paths are used for fast failover when the primary
spanning tree path fails. Moreover, to eliminate the long delay
used in STP for ensuring the convergence of bridges’ spanning tree
topology state, RSTP bridges use a hop-by-hop hand-shake mecha-
nism called sync to explicitly synchronize the state among bridges.
A tutorial by Cisco [10] provides a more detailed description of
RSTP. MSTP is deﬁned by the IEEE 802.1Q-2003 standard. It was
created to support load balancing within networks having multiple
VLANs. Speciﬁcally, in contrast to RSTP and STP, MSTP allows
for the creation of multiple spanning trees within the network and
the assignment of one or more VLANs to each of these spanning
trees. Many of its basic mechanisms are derived from RSTP.
The remainder of this section describes the problems that can
occur under each of these spanning tree protocols that are addressed
by the EtherFuse.
2.1 Count to Inﬁnity
The RSTP and MSTP protocols are known to exhibit count-to-
inﬁnity behavior under some failure conditions [18, 11]. Speciﬁ-
cally, count to inﬁnity can occur when the network is partitioned
and the root bridge of a spanning tree is separated from one or
more physical cycles. During count to inﬁnity, the spanning tree
topology is continuously being reconﬁgured and ports in the net-
work can oscillate between forwarding and blocking data packets.
Consequently, many data packets may get dropped.
To construct a spanning tree, every bridge in the network has a
port that connects it to its parent in the tree. This port is called the
root port and it is used for connectivity to the root bridge. In RSTP
and MSTP, some bridges have ports with a different role, called
alternate ports. An alternate port exists if there is a loop in the
physical topology, and it is blocked to cut this loop. An alternate
port also caches topology information about an alternate path to the
root bridge which gets used if the bridge loses connectivity to the
root bridge through its root port.
When the root bridge is separated from a physical cycle, the
topology information cached at an alternate port in the cycle im-
mediately becomes stale. Unfortunately, RSTP and MSTP use this
stale topology information and spread it through protocol messages
called Bridge Protocol Data Units (BPDUs), triggering a count to
inﬁnity. The count to inﬁnity ends when the message age of the BP-
DUs carrying stale information reaches a limit. A smaller value of
this limit would decrease the duration of a count to inﬁnity. How-
ever, because a BPDU’s message age increases as it passes from
one bridge to the next, this limit also imposes an upper bound on
the height of the spanning tree. Thus, having a small value for this
limit restricts the size of the overall network. Another factor that
increases the duration of the count to inﬁnity is that RSTP spec-
iﬁes that a bridge can only transmit a limited number of BPDUs
per port per second. This number is given by the TxHoldCount
parameter. RSTP uses this parameter to limit processing load. Al-
together, these factors can make a count to inﬁnity last for tens of
seconds [11].
2.2 Forwarding Loops
Having forwarding loops in Ethernet can be disastrous. A for-
warding loop can cause packets to keep circulating inside the net-
work. Also, if broadcast packets get trapped in a loop, they will
generate broadcast storms. Moreover, multiple forwarding loops
can cause the trapped packets to multiply exponentially.
At a high level, a forwarding loop is formed when a bridge’s
port erroneously switches from a blocked state to a forwarding state
where it starts forwarding data packets. Forwarding loops can be
short lived allowing the network to quickly resume normal oper-
ation after the loop is broken, or they can be long lived or even
permanent rendering the network unusable. In the following, we
explain various cases where forwarding loops can form under each
of the spanning tree protocols. Finally, we explain how forwarding
loops can break Ethernet’s address learning mechanism.
2.2.1 BPDU Loss Induced Forwarding Loops
In all of the spanning tree protocols a port is blocked if it is not
the root port and it receives BPDUs from a peer bridge that adver-
tise a lower-cost path to the root bridge than the BPDUs it sends.
B1
B2
B14
B1
B2
B14
B1
B2
B14
B15
B4
B5
B3
B6
B13
B10
B12
B11
B4
B5
B3
B6
B13
B10
B12
B11
B4
B5
B3
B6
B13
B16
B12
B11
B17
B18
B10
B19
B7
B9
B7
B9
B8
Blocked port
B8
B7
B9
B20
B8
(a) Before link failure.
(b) After failure.
(c) Multiple loops.
Figure 1: Examples of permanent forwarding loops forming under STP when the spanning tree height exceeds the MaxAge limit due to a link failure. In the ﬁgure,
only blocked ports are not forwarding data packets. The network has the MaxAge value set to 6.
However, if the port fails to receive BPDUs from its peer bridge
for an extended period of time, it may start forwarding data. For
example, in RSTP, this period is three times the interval between
regular BPDU transmissions. BPDU loss can be due to an overload
of some resource, like the control CPU or a link’s bandwidth. It
can also be because of hardware failures and bugs in the ﬁrmware
running on Ethernet bridges.
One scenario in which the control CPU can become overloaded
is when a bridge’s CPU is involved in the processing of data pack-
ets. Normally, Ethernet frames circulating around a forwarding
loop are handled by the bridge’s line cards in hardware and would
not be processed by the control CPU. However, sometimes bridges
do Internet Group Management Protocol (IGMP) snooping to opti-
mize IP multicast [5]. Since IGMP packets are indistinguishable
from multicast data packets at layer 2, a switch running IGMP
snooping must examine every multicast data packet to see whether
it contains any pertinent IGMP control information. If IGMP snoop-
ing is implemented in software, the switch’s CPU can get over-
whelmed by multicast packets. When the control CPU is over-
loaded, it may no longer process and transmit BPDUs in a timely
fashion.
A subtle case of a BPDU loss induced forwarding loop can result
from a uni-directional link. Although Ethernet links are normally
bi-directional, the failure of a transceiver on an optical ﬁber link
can cause the link to become uni-directional. In this case, if BPDUs
are transmitted in the failed direction, they will be lost. Such BPDU
loss can cause a port that was previously blocked to suddenly start
forwarding data packets in the direction that is still functional and
create a forwarding loop. Thus, a single transceiver failure can lead
to a permanent forwarding loop.
2.2.2 MaxAge Induced Forwarding Loops
In all the Ethernet spanning tree protocols, the maximum height
of the spanning tree is limited. In STP and RSTP, the limit is given
by the MaxAge. Whereas, in MSTP, the limit is given by the TTL
in the BPDUs from the root bridge. If a network is too large, the
BPDUs from the root bridge will not reach all bridges in the net-
work. Suppose bridge A sends a BPDU to bridge B but the BPDU
arrives with a message age equal to MaxAge or a TTL equal to
zero. Under RSTP and MSTP, B would block its port to A, par-
titioning the network. However, under STP the BPDU with the
maximum message age is completely ignored by B. The end result
is as if B is not connected to A at all, and the port connecting B
to A will become forwarding by default. Moreover, those distant
bridges that do not receive BPDUs from the true root bridge will
try to construct a spanning tree among themselves. The two span-
ning trees in the network can be conjoined at the leaves and lead to
a forwarding loop.
Unfortunately, such a forwarding loop can form as a result of
a single, localized failure. For example, a single link failure can
cause a perfectly functional Ethernet network to violate the maxi-
mum spanning tree height limit, leading to a sudden, complete net-
work breakdown. Figure 1 gives an example of such a problem. B1
is the root bridge of the network. Assume that the value of MaxAge
is set to 6. Figure 1(a) shows the network before the failure, and
Figure 1(b) shows what happens after the link connecting bridge
B1 to bridge B8 fails.
Before the failure, all bridges are within 4 hops of the root bridge
B1. The blocked ports at B5 and B11 cut the physical cycles to cre-
ate a spanning tree. However, after the failure, B8 becomes 7 hops
away from B1. As a result, the message age of BPDUs from B1
will have reached MaxAge when they arrive at bridge B8 and so
they are dropped by B8. Without receiving any valid BPDUs from
its neighbors, bridge B8 believes that it is the root of the spanning
tree and makes the ports that connect it to bridges B7 and B9 des-
ignated ports. On the other hand, both B7 and B9 believe that B1
is the root of the spanning tree as the BPDUs they receive convey-
ing this information have message age below MaxAge. B7 and
B9 both believe that B8 is their child in the spanning tree and thus
they make their ports connecting them to B8 designated ports. All
the ports in the network are thus forwarding data packets, and a
permanent forwarding loop is formed.
In networks with more complex topologies, this problem can cre-
ate multiple forwarding loops. Figure 1(c) generalizes the previous
example to illustrate the formation of multiple forwarding loops
after the failure of the link between bridges B1 and B8.
In this
network, broadcast packets will be replicated at the junctions at B1
and B8. This creates an exponentially increasing number of du-
plicate packets in the network that may render the entire network
inoperative.
2.2.3 Count to Inﬁnity Induced Forwarding Loops
All of the spanning tree protocols are speciﬁed as a set of concur-
rent state machines. It has been discovered that in RSTP the com-
bination of the count-to-inﬁnity behavior, a race condition between
RSTP state machines, and the non-determinism within a state ma-
chine can cause an Ethernet network to have a temporary forward-
ing loop during the count to inﬁnity. This problem is explained in
detail in [12]. Here, we provide a sketch of the explanation.
Normally, during a count to inﬁnity, a hand-shake operation be-
tween adjacent bridges, called sync, prevents a forwarding loop
from forming. However, a race condition between two RSTP state
machines and a non-deterministic transition within a state machine
that together allow a sync operation to be mistakenly bypassed.
Once the sync operation is bypassed, a forwarding loop is formed
which lasts until the end of the count to inﬁnity.
B1
B2
B3
B5
H1
B4
B6
H2
B1
B2
B3
P1
B5
P2
H1
B4
B6
H2
(a) Before failure.
(b) After failure of the root bridge.
Figure 2: Forwarding table pollution caused by a temporary forwarding loop.
2.2.4 Pollution of Forwarding Tables
Forwarding tables in Ethernet are learned automatically. When
a bridge receives a packet with a source address A via a port p, p
automatically becomes the output port for packets destined for A.
This technique works ﬁne in a loop-free topology. However, when
a forwarding loop occurs, a packet may arrive at a bridge multiple
times via different ports in the loop. This can cause a bridge to
use the wrong output port for a destination address. Moreover, the
effects of such forwarding table pollution can be long lasting.