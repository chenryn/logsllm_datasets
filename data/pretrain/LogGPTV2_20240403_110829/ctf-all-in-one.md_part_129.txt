在 Ubuntu-16.04 上玩一下：
$ ./SleepyHolder
Waking Sleepy Holder up ...
Hey! Do you have any secret?
I can help you to hold your secrets, and no one will be able to
1278
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
see it :)
1. Keep secret
2. Wipe secret
3. Renew secret
1
What secret do you want to keep?
1. Small secret
2. Big secret
3. Keep a huge secret and lock it forever
1
Tell me your secret:
AAAA
1. Keep secret
2. Wipe secret
3. Renew secret
1
What secret do you want to keep?
1. Small secret
2. Big secret
3. Keep a huge secret and lock it forever
3
Tell me your secret:
CCCC
1. Keep secret
2. Wipe secret
3. Renew secret
3
Which Secret do you want to renew?
1. Small secret
2. Big secret
1
Tell me your secret:
BBBB
1. Keep secret
2. Wipe secret
3. Renew secret
2
Which Secret do you want to wipe?
1. Small secret
2. Big secret
1279
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
1
这一题看起来和上一题 Secret_Holder 差不多。同样是 small、big、huge 三种
secret，不同的是这里的 huge secret 是不可修改和删除的。
题目解析
下面我们逐个来逆向这些功能。
Keep secret
[0x00400850]> pdf @ sub.What_secret_do_you_want_to_keep_93d
/ (fcn) sub.What_secret_do_you_want_to_keep_93d 452
| sub.What_secret_do_you_want_to_keep_93d ();
| ; var int local_14h @ rbp-0x14
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x00400e3c (main)
| 0x0040093d push rbp
| 0x0040093e mov rbp, rsp
| 0x00400941 sub rsp, 0x20
| 0x00400945 mov rax, qword fs:[0x28]
; [0x28:8]=-1 ; '(' ; 40
| 0x0040094e mov qword [local_8h], rax
| 0x00400952 xor eax, eax
| 0x00400954 mov edi, str.What_secret_do_you_want
_to_keep ; 0x400ee8 ; "What secret do you want to keep?"
| 0x00400959 call sym.imp.puts
; int puts(const char *s)
| 0x0040095e mov edi, str.1._Small_secret
; 0x400f09 ; "1. Small secret"
| 0x00400963 call sym.imp.puts
; int puts(const char *s)
| 0x00400968 mov edi, str.2._Big_secret
; 0x400f19 ; "2. Big secret"
| 0x0040096d call sym.imp.puts
; int puts(const char *s)
| 0x00400972 mov eax, dword [0x006020dc]
1280
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
; huge_flag，表示 huge secret 是否已存在
| 0x00400978 test eax, eax
| ,= 0x00400986 lea rax, [local_10h]
| 0x0040098a mov edx, 4
| 0x0040098f mov esi, 0
| 0x00400994 mov rdi, rax
| 0x00400997 call sym.imp.memset
; void *memset(void *s, int c, size_t n)
| 0x0040099c lea rax, [local_10h]
| 0x004009a0 mov edx, 4
| 0x004009a5 mov rsi, rax
| 0x004009a8 mov edi, 0
| 0x004009ad mov eax, 0
| 0x004009b2 call sym.imp.read
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x004009b7 lea rax, [local_10h]
| 0x004009bb mov rdi, rax
| 0x004009be call sym.imp.atoi
; int atoi(const char *str)
| 0x004009c3 mov dword [local_14h], eax
| 0x004009c6 mov eax, dword [local_14h]
| 0x004009c9 cmp eax, 2
; 2
| ,= 0x004009e1 mov eax, dword [0x006020e0]
; small_flag，表示 small secret 是否已存在
| | || 0x004009e7 test eax, eax
| |,=== 0x004009f0 mov esi, 0x28
; '(' ; 40
| || || 0x004009f5 mov edi, 1
| || || 0x004009fa call sym.imp.calloc
; calloc(1, 0x28) 为 small secret 分配空间
| || || 0x004009ff mov qword [0x006020d0], rax
; 把地址放到 [0x006020d0]
| || || 0x00400a06 mov dword [0x006020e0], 1
; 设置 small_flag 为 1
| || || 0x00400a10 mov edi, str.Tell_me_your_secret:
; 0x400f52 ; "Tell me your secret: "
| || || 0x00400a15 call sym.imp.puts
; int puts(const char *s)
| || || 0x00400a1a mov rax, qword [0x006020d0]
; [0x6020d0:8]=0
| || || 0x00400a21 mov edx, 0x28
; '(' ; 40
| || || 0x00400a26 mov rsi, rax
| || || 0x00400a29 mov edi, 0
| || || 0x00400a2e mov eax, 0
| || || 0x00400a33 call sym.imp.read
; read(0, [0x006020d0], 0x28) 读入 small secret
| ||,=== 0x00400a3d mov eax, dword [0x006020d8]
; big_flag，表示 big secret 是否已存在
1282
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
| |||| 0x00400a43 test eax, eax
| ||||,= 0x00400a4c mov esi, 0xfa0
; 4000
| ||||| 0x00400a51 mov edi, 1
| ||||| 0x00400a56 call sym.imp.calloc
; calloc(1, 0xfa0) 为 big secret 分配空间
| ||||| 0x00400a5b mov qword [0x006020c0], rax
; 把地址放到 [0x006020c0]
| ||||| 0x00400a62 mov dword [0x006020d8], 1
; 设置 big_flag 为 1
| ||||| 0x00400a6c mov edi, str.Tell_me_your_secret:
; 0x400f52 ; "Tell me your secret: "
| ||||| 0x00400a71 call sym.imp.puts
; int puts(const char *s)
| ||||| 0x00400a76 mov rax, qword [0x006020c0]
; [0x6020c0:8]=0
| ||||| 0x00400a7d mov edx, 0xfa0
; 4000
| ||||| 0x00400a82 mov rsi, rax
| ||||| 0x00400a85 mov edi, 0
| ||||| 0x00400a8a mov eax, 0
| ||||| 0x00400a8f call sym.imp.read
; read(0, [0x006020c0], 0xfa0) 读入 big secret
| |||||,= 0x00400a96 mov eax, dword [0x006020dc]
; huge_flag，表示 huge secret 是否已存在
| |||| | 0x00400a9c test eax, eax
| ||||,== 0x00400aa2 mov esi, 0x61a80
1283
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
| ||||| | 0x00400aa7 mov edi, 1
| ||||| | 0x00400aac call sym.imp.calloc
; calloc(1, 0x61a80) 为 huge secret 分配空间
| ||||| | 0x00400ab1 mov qword [0x006020c8], rax
; 把地址放到 [0x006020c8]
| ||||| | 0x00400ab8 mov dword [0x006020dc], 1
; 设置 huge_flag 为 1
| ||||| | 0x00400ac2 mov edi, str.Tell_me_your_secret:
; 0x400f52 ; "Tell me your secret: "
| ||||| | 0x00400ac7 call sym.imp.puts
; int puts(const char *s)
| ||||| | 0x00400acc mov rax, qword [0x006020c8]
; [0x6020c8:8]=0
| ||||| | 0x00400ad3 mov edx, 0x61a80
| ||||| | 0x00400ad8 mov rsi, rax
| ||||| | 0x00400adb mov edi, 0
| ||||| | 0x00400ae0 mov eax, 0
| ||||| | 0x00400ae5 call sym.imp.read
; read(0, [0x006020c8], 0x61a80) 读入 huge secret
| ||||| | 0x00400aea nop
| ||||| | ; XREFS: JMP 0x004009dc JMP 0x004009eb JMP 0x00400
a38 JMP 0x00400a47 JMP 0x00400a94 JMP 0x00400aa0
| `````-`-> 0x00400aeb mov rax, qword [local_8h]
| 0x00400aef xor rax, qword fs:[0x28]
| ,= 0x00400aff leave
\ 0x00400b00 ret
还是一样的，该函数使用 calloc() 为三种 secret 分别了不同大小的 chunk，
small secret 属于 small chunk，big secret 和 huge secret 属于 large chunk。在分
配前，会检查对应的 secret 是否已经存在，即每种 chunk 只能有一个。另外看函
数开头部分，huge secret 显然受到了特殊处理。
small secret: small chunk, 40 bytes
small_ptr: 0x006020d0
1284
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
small_flag: 0x006020e0
big secret: large chunk, 4000 bytes
big_ptr: 0x006020c0
big_flag: 0x006020d8
huge secret: large chunk, 400000 bytes
huge_ptr: 0x006020c8
huge_flag: 0x006020dc
Wipe secret
[0x00400850]> pdf @ sub.Which_Secret_do_you_want_to_wipe_b01
/ (fcn) sub.Which_Secret_do_you_want_to_wipe_b01 207
| sub.Which_Secret_do_you_want_to_wipe_b01 ();
| ; var int local_14h @ rbp-0x14
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x00400e48 (main)
| 0x00400b01 push rbp
| 0x00400b02 mov rbp, rsp
| 0x00400b05 sub rsp, 0x20
| 0x00400b09 mov rax, qword fs:[0x28]
; [0x28:8]=-1 ; '(' ; 40
| 0x00400b12 mov qword [local_8h], rax
| 0x00400b16 xor eax, eax
| 0x00400b18 mov edi, str.Which_Secret_do_you_wan
t_to_wipe ; 0x400f68 ; "Which Secret do you want to wipe?"
| 0x00400b1d call sym.imp.puts
; int puts(const char *s)
| 0x00400b22 mov edi, str.1._Small_secret
; 0x400f09 ; "1. Small secret"
| 0x00400b27 call sym.imp.puts
; int puts(const char *s)
| 0x00400b2c mov edi, str.2._Big_secret
; 0x400f19 ; "2. Big secret"
| 0x00400b31 call sym.imp.puts
; int puts(const char *s)
| 0x00400b36 lea rax, [local_10h]
| 0x00400b3a mov edx, 4
1285
6.1.22 pwn HITCONCTF2016 Sleepy_Holder
| 0x00400b3f mov esi, 0
| 0x00400b44 mov rdi, rax
| 0x00400b47 call sym.imp.memset
; void *memset(void *s, int c, size_t n)
| 0x00400b4c lea rax, [local_10h]
| 0x00400b50 mov edx, 4