因此，我们有两种技术可以利用ThreadX块池溢出。一个是通用的，可以应用于任何基于ThreadX的固件（如果它有块池溢出错误，下一个块是空闲的）。第二种技术特定于Marvell
Wi-Fi固件的实现，并且如果下一个块忙，则可以工作。换句话说，通过将它们组合在一起，我们可以实现可靠的溢出利用。（无论下一个块是free还是busy都有方法可以利用）
## Valve Steamlink的示例
Valve
Steamlink是一款简单的桌面流媒体设备，可让你在计算机上玩PC游戏，并将游戏桌面流式传输到电视盒，使得你可以在电视上玩PC游戏。该设备的固件基于一些类似Debinan的GNU/Linux操作系统，Linux内核版本为”3.8.13-mrvl”，可在arm7l
应用处理器上运行。它有Marvell
88W8897无线芯片组，它与SDIO总线和专有的mlan.ko和mlinux.ko设备驱动程序相连。有趣的是：这个设备在ZeroNights
2018前一天就停止了生产。也许你会发现，大多数使用Marvell Wi-Fi的设备都是游戏设备，比如PS
4（可能是因为他们都是高性能的802.11ac和蓝牙的结合体）。但是由于DRM（数字版权管理）保护，我们很难对它们进行研究分析。所以，我选择了SteamLink，因为它没有DRM，并且可以轻松启动他们的工具和内核模块来研究无线SoC。Microsoft
Surface和三星Chromebook也使用Marvell Wi-Fi。
###  提权
要在SteamLink的应用程序处理器上执行代码，我们需要进行提权，因为SteamLink所使用的SDIO总线没有设计DMA（Direct Memory
Access,直接内存存取）。如果是使用PCIe这样的总线则升级技术比较简单，因为PCIe允许DMA。在这种情况下，我们进行提权类似于利用RCE。他们唯一的区别是攻击者通过SDIO总线从受我们控制的Wi-Fi
SoC发送数据，而不是通过网络发送数据。您可以将典型的设备驱动程序视为设备与应用程序或操作系统之间的桥梁。因此，设备驱动程序应该从设备接收数据，解析它，将其发送到应用程序（操作系统），反之亦然。它包含着解析从设备接收的数据的代码。Marvell
Wi-Fi驱动程序在特定情况下，这部分代码应该处理由信息元素（IE）组成的许多类型的消息。事实上，提权非常广泛。
###  利用AP设备驱动程序漏洞
这个漏洞非常易于利用，它基于堆栈的缓冲区溢出。Linux内核”3.8.13-mrvl”中也没有二进制的防御措施。然而，因为I/D-cache不连贯的and/or回写缓冲区的deffer
commit，我们需要一些准备时间。此外，由于函数epilogues，它无法控制堆栈，它会从堆栈本身弹出堆栈指针：
    LDMFD           SP, {R4-R11,SP,PC}
要成功提权，应执行以下操作：
  1. 调用v7_flush_kern_cache_louislinux内核函数。
  2. 执行shellcode。
由于堆栈指针丢失，我们无法将代码放在堆栈上。相反，我们可能依赖于寄存器R4-R11，这些寄存器也会在执行将在恢复的PC位置继续执行之前从堆栈中恢复。首先，我们需要在一个基本块中找到一个包含两个不同寄存器调用的特殊代码块。这个代码块需要表示两个主要操作的调用：刷新缓存和调用shellcode。下面是一个例子
    BLX             R3
    MOV             R1, R4
    MOV             R2, R5
    SUBS            R3, R0, #0
    MOV             R0, R10
    BNE             loc_C00E7678
    BLX             R9
虽然它包含一个条件分支，但它永远不会被占用，因为它v7_flush_kern_cache_louis总是返回0。它也不会破坏R9，因此可以由攻击者控制。但是，第一次调用是通过R3寄存器进行的，寄存器不会从堆栈中恢复。在这种情况下，应该R3在调用主要值之前搜索我们先前放入的代码块来放置我们的控制值。例如，像这样：
    MOV             R3, R8
    BLX             R7
最终的代码块应该计算shellcode的位置并将执行转移给它。在这种情况下，R0，R1，R2，R3和R12可被使用，因为它们可能含有一些堆栈指针。而对于Marvell的驱动程序，R12确实包含堆栈中的地址。因此，应该找到一个将使用受控寄存器并R12计算实际shellcode位置和传输执行的代码块，如下所示：
    LDR             R6, [R12,R4,LSL#4]
    MOV             R7, R0
    ADD             R4, R12, R4,LSL#4
    MOV             R8, R2
    BLX             R6
还应注意，攻击者可以通过使用Thumb指令（thumb
instruction,比如通常使用32位的指令，则16位的指令被称为Thumb指令）编码显着增加可用代码块的数量。实际上，R12在溢出期间有几种指针位置的情况。我认为这取决于当前的扫描状态。我们可以研究的是如何正确地将事件缓冲区从Wi-Fi SoC发送到AP，因此堆栈布局将始终相同。总体来说利用成功率约为50-60％。
## 漏洞利用条件
在这项研究中，我在监控模式下使用ALFA网络无线适配器，这是基于Realtek 8187无线芯片组。该漏洞可以使用python
Scapy框架实现。但由于某种原因，Ubuntu GNU/Linux发行版不能快速地注入Wi-Fi帧，因此最好使用Kali。你可以在下面的视频中看到全链漏洞利用演示。演示的有效负载是定期在内核日志中打印消息。
[https://www.youtube.com/watch?v=syWIn62M72Y&feature=youtu.be](https://www.youtube.com/watch?v=syWIn62M72Y&feature=youtu.be)
## 总结
从本次的分析中可以学到的是：
无线设备暴露出了巨大的攻击面，我们可以更多的关注无线设备上的漏洞