sharing [33]. However, we stress that we do not have an MPC evaluator for a dishonest majority based on the
latter secret sharing scheme.
Secure Multiparty Computation (MPC) The BGW protocol [18] is one of the ﬁrst MPC protocols and can
be used to evaluate an arithmetic circuit (over a ﬁeld F) consisting of addition and multiplication gates.
The protocol is mainly based on Shamir’s secret sharing, where parties share their inputs. Addition can be
performed locally, with each party adding its shares bu multiplication requires communication. To evaluate
multiplication, parties locally multiply the shares they hold to obtain a 2t sharing of the product, then
perform a degree reduction by using Lagrange coeﬃcients (this only requires linear operations) to obtain the
sharing of the free term of that polynomial.
Proactive MPC (PMPC) PMPC can be regarded as special case of MPC that remains secure in the proactive
security model [59]. In [11], Baron et al. constructed the ﬁrst (asymptotically) eﬃcient PMPC protocol by
using an eﬃcient PSS as a building block. The key idea consists in dividing the protocol execution into a
succession of two kinds of phases: operation phases (the computation of a circuit’s layer with addition and
multiplication gates, e.g., as in BGW) and refresh phases.
3 Machine-checked security proofs for Secret Sharing & MPC
In this section, we ﬁrst describe what we prove in EasyCrypt, which represents the ﬁrst step in achieving a
veriﬁed implementation of an MPC evaluator. Our proof approach consists of two main steps: 1) formalizing
in EasyCrypt an abstract framework that captures the desired behavior that we aim for our evaluator; and
6
2) an instantiation step that provides concrete realizations (also in EasyCrypt) of the protocols and primitives
deﬁned in the abstract setting. The intuition is that we will use the abstract framework to perform proofs at
a high and modular level, and then propagate those results downwards to concrete implementations with
little (proof) overhead. In fact, our abstract framework is modular enough to be reused and applied to other
MPC instantiations. We provide a concrete example of this later (see subsection 3.4).
We start the presentation of our EasyCrypt implementation with the description of the abstract framework
(∼ 2K LoC), that can be subdivided into two independent modules, one for secret sharing and one for MPC
protocols. We want to establish a relation between both in order to reduce the security of the overall evaluator
to the security of an arbitrary secret sharing scheme and to the security of an arbitrary PMPC protocol, as
shown in Theorem 1. We end the section with an explanation of the instantiation step, accounting for 7K
LoC, of which 1K comprises protocol speciﬁcations.
3.1 Proof overview
We ﬁrst give an overview of the proving process, giving a high-level outline of it. As already mentioned, we ﬁrst
modeled the desired behaviour of our evaluator by means of an abstract and modular setting, encompassing
the abstract framework to specify abstract functional deﬁnitions and security properties for all cryptographic
constructions (primitives, algorithms, and protocols) that are used in this work. Since it does not take into
account any functional speciﬁcation of the components involved, it makes sense to use it to establish as much
results as possible. Concretely, many results (such as composition theorems) can be obtained by reasoning
at an abstract level, which can then be easily carried out to concrete instantiations. For example, one can
prove that two primitives (that match some security deﬁnitions) can be composed to yield another primitive
with a powerful security deﬁnition. The construction of a CCA-secure encryption scheme via a CPA-secure
encryption scheme and an UF-secure MAC scheme, without specifying any of the two, is a good example of
this approach [54].
Our abstract framework is comprised of two abstract modules: one for secret sharing and another for
MPC protocols. The ﬁrst one deﬁnes an abstract construction of a secret sharing scheme and speciﬁes three
security deﬁnitions for it: passive (honest-but-curious), integrity, and malicious (veriﬁable) secret sharing. At
this level, we prove that security of a veriﬁable secret sharing scheme can be reduced to security of a passive
secret sharing scheme that ensures integrity of the shares (i.e., any modiﬁcation of the shares is detectable by
the parties involved in the protocol). We also prove that share integrity can be ensured if a commitment
scheme is used along side a secret sharing scheme, thus proving that an honest-but-curious secret sharing
scheme can be composed with a commitment scheme in order to build a veriﬁable secret sharing scheme.
The second one provides an abstract formulation of MPC protocols and four security deﬁnitions: passive,
malicious, random, and proactive. The two latter security deﬁnitions are enough to accommodate the desired
behavior of the refresh and recover protocols of the proactive model, respectively. We deﬁne a series of
(sequential) composition lemmas involving the security notions above, from which we highlight three:
(1) malicious ◦ malicious ⇒ malicious
(2) random ◦ malicious ⇒ random
(3) proactive ◦ random ⇒proactive.
Armed with these three lemmas, we can state that one is able to achieve a proactive secure MPC protocol
by combining smaller malicious MPC protocols with a random and a proactive protocol. Concretely to
our case, we want to have a sequence of add and mul protocols (that perform the evaluation of the desired
arithmetic circuit) ending with a refresh and a recover protocol to wrap the security of the execution.
Finally, we use these two abstract constructions to specify Theorem 1 that upper bounds the (proactive)
security of the evaluator with the security of the cryptographic constructions it encompasses without
considering concrete realizations.
7
Theorem 1. For all ProAct adversaries A against the EasyCrypt implementation Evaluator, there exist
eﬃcient simulator S and adversaries BVSS and BProactive−MalSS, such that:
AdvProactive
Evaluator,S(A) ≤AdvVSS(BVSS) +
AdvProactive−MPC(BProactive−MPC)
where AdvVSS(BVSS) and AdvProactive−MPC(BProactive−MPC) represent the advantages against the (veriﬁable)
secret sharing scheme and against the proactive MPC protocol to be executed.
Our EasyCrypt proof ends with the instantiation step, where concrete realizations of a secret sharing
scheme, commitment scheme, and MPC sub-protocols are speciﬁed and tied to the abstract deﬁnitions.
The main challenge in the instantiation step is to prove that the concrete deﬁnitions are actually valid
instantiations of the desired primitives, since all results obtained in the abstract framework (namely Theorem
1), are easily carried out to the concrete constructions once they are proven to be valid instantiations of
primitives.
An important component of this work was the development of a veriﬁed EasyCrypt polynomial library,
that provides a series of types and operators that deal with polynomials deﬁned over a ﬁnite ﬁeld. We include
a description of such library in Appendix Appendix A.
In what remains of this section, we will detail our EasyCrypt implementation, explaining the intermediate
steps that were followed in order to derive Theorem 1, namely how to build the two cryptographic primitives
that deﬁne the security of the evaluator. We will also provide EasyCrypt code snippets for relevant components
of this work. Due to space constrains, we will not be able to provide an extensive explanation of the proof,
as we will focus on just concrete instantiations of secret sharing schemes or MPC protocols. We refer the
reader to the full version of this paper [36] for a more detailed and complete description of our EasyCrypt
deployment.
3.2 Secret Sharing in EasyCrypt
Secret sharing, and its veriﬁable and proactive variations, plays a central role in our (proactive) secure
evaluator. It is the ﬁrst primitive to be executed and any security violation in this component can compromise
the entire security of the evaluator. Diﬀerent shares of diﬀerent secrets must be indistinguishable and should
also be non-corruptible. Our ﬁrst goal is to formally represent a veriﬁable secret sharing scheme and to derive
a concrete EasyCrypt implementation of it that could be extracted to executable code via our extraction
tool-chain.
We ﬁrst describe our abstract secret sharing framework, pointing out how it can simplify the proofs that
could be much more complex if they were to be carried out considering concrete realizations of the involved
primitives. We then show how the abstract secret sharing primitives can be instantiated, and how the results
proven in the abstract setting are naturally propagated (down) to concrete instantiations of these schemes.
Abstract Secret Sharing The structure of the abstract secret sharing framework is shown in Figure 2. In
this ﬁgure, we depict abstract cryptographic primitives as rounded rectangles and security deﬁnitions as red
rectangles. If some security notion applies to some primitive, then the two are connected by a solid arrow.
The same way, if a primitive is used as an abstract building block in the security of another primitive, it will
be enclosed inside its rounded rectangle as a green circle. Security proofs are represented as dashed arrows.
Labeled arrows represent proofs that are propagated to the concrete instantiation of the abstract modular
framework.
The main result shown in Figure 2 is the deﬁnition of a veriﬁable secret sharing scheme as the composition
of an honest-but-curious secret sharing scheme with an unforgeable commitment scheme. Our formalization
of such results starts with the abstract deﬁnition of a secret sharing scheme structure, illustrated in Figure 3.
A secret sharing scheme is parameterized by 4 integers: i. n - number of parties involved in the protocol;
ii. k - number of secrets to be shared; iii. d - number of parties needed to reconstruct the secret; and iv. t
8
Fig. 2: Secret sharing abstract framework. We deﬁne two cryptographic primitives and provide three security
deﬁnitions, one for commitment schemes and two for secret sharing schemes. The same secret sharing
abstraction can be used for both security deﬁnitions.
- corruption threshold. The addition of the k parameter may be an exaggeration for most secret sharing
protocols but it allows the speciﬁcation of batch secret sharing schemes [42].
Next, the interface deﬁnes both the types and operations involved in the sharing protocol, including party
identiﬁers, secrets, shares and randomness types and, ﬁnally, the actual share and reconstruct operators. We
highlight the inclusion of p id set, which will contain all party identiﬁers. This parameter will be very useful
when proving correctness properties of both secret sharing and subsequent MPC protocols.
theory SecretSharingScheme.
op n : int. (* Number of parties *)
op k : int. (* Number of secrets *)
op d : int. (* Number of parties needed to reconstruct *)
op t : int. (* Corruption threshold *)
type p_id_t. (* Party identifier *)
op p_id_set : p_id_t list. (* Set of parties involved *)
type secret_t. (* Secret type *)
type share_t. (* Share type *)
type shares_t = (p_id_t * share_t) list. (* Set of shares *)
op dshare : share_t distr. (* Share distribution *)
type rand_t. (* Randomness *)
(* Share operation *)
op share : rand_t -> secret_t -> shares_t.
(* Reconstruct operation *)
op reconstruct : shares_t -> secret_t option.
end SecretSharingScheme.
Fig. 3: Abstract secret sharing scheme
Randomness is modeled as an explicit operator parameter. This allows us to write probabilistic operations
with deterministic ﬂavour. For example, we deﬁne the share operator as op share : rand t → secret t → shares t,
which is a deterministic operator. Nevertheless, the sharing procedure of a secret sharing scheme is, naturally,
a probabilistic algorithm. Lifting it to a probabilistic operator would involve writing it as op share : secret t
→ shares t distr. Semantically, it means that the operator would be outputting probability distribution on
shares and that one would need to sample from this distribution in order to get a valid set of shares. This lift
would have very little eﬀect on the proof but would, however, impact the code extraction process as it would
be infeasible to extract such probabilistic operators.
9
CommitmentSchemeDDHSecretSharingSchemeUF-SECHonest-but-curiousVeriﬁable(1)(2)We deﬁne three security requirements for secret sharing: honest-but-curious, integrity and veriﬁable. For a
full description of these security deﬁnitions, we refer the reader to Appendix B for their details.
Abstract commitment scheme To guarantee integrity of generated shares, a dealer needs to commit to them.
A commitment scheme can be deﬁned based on the type of randomness used, the type of messages and the
type of the commits it produces. Figure 4 shows the abstraction of a commitment scheme. Interestingly, the
same abstraction could also be used to deﬁne other integrity mechanisms, e.g., message authentication codes.
theory CommitmentScheme.
type rand_t. (* Randomness *)
type msg_t. (* Message type *)
type commit_t. (* Commit type *)
(* Mac operation *)
op commit : rand_t -> msg_t -> commit_t.
(* Verify operation *)
op verify : msg_t -> commit_t -> bool.
end CommitmentScheme.
Fig. 4: Abstract commitment scheme
Nonetheless, such abstraction is not enough for the construction of a veriﬁable secret sharing scheme. In
fact, the way the commitment scheme is written, it only works for a single share, instead of multiple shares
as desired in our composition proof. We thus deﬁne a list variation of a commitment scheme that applies the
commitment scheme to a list of messages in order to smooth the composition with an honest-but-curious
secret sharing scheme. With this purpose, we deﬁned a new theory ListCommitmentScheme (Figure 5) which
is parameterized by any commitment scheme. This means that, in order to come up with a list variation of a
given commitment scheme, one only needs to plug the single version of the commitment scheme to theory
ListCommitmentScheme. The modularity of the secret sharing abstract framework can also be veriﬁed here, as
the described list version will work for any commitment scheme that is plugged to it.
theory ListCommitmentScheme.
(* Abstract commitment scheme *)
clone import CommitmentScheme as CS.
clone import CommitmentScheme as ListCS with
type rand_t = CS.rand_t,
type msg_t = CS.msg_t list,
type commit_t = CS.commit_t,
op commit (r : rand_t) (m : msg_t) =
map (CS.commit r) m,
op verify (m : msg_t) (c : commit_t) =
all ((=) true) (map2 CS.verify m c).
end ListCommitmentScheme.
Fig. 5: Abstract list commitment scheme
We specify an unforgeability security deﬁnition for commitment schemes that can be consulted in Figure 32
in Appendix B.
10
theory AbstractVerifiableSecretSharing.
...
clone import SecretSharingScheme as AVSS with
...
type share_t = SS.share_t * CS.commit_t,
type rand_t = SS.rand_t * CS.rand_t,
op share (r : rand_t) (s : secret_t) =
let (rs,rc) = r in
let ss = SS.share rs s in
let cs = LCS.commit rc ss in
merge ss cs,
op reconstruct (css : shares_t) =
let ss = unzip1_assoc css in
let cs = unzip2_assoc css in
if LCS.verify ss cs then SS.reconstruct ss else None.
...
end AbstractVerifiableSecretSharing.
Fig. 6: Abstract veriﬁable secret sharing scheme in EasyCrypt.
Abstract veriﬁable secret sharing We conclude our description of the abstract secret sharing framework
by describing our modular composition proof of a semi-honest secret sharing scheme with an unforgeable
commitment scheme, yielding a veriﬁable secret sharing scheme. We do not claim any novelty here, this is a
standard technique in previous veriﬁable secret sharing articles [1,26,37,40,43,44,51,53,55,61,62,63,8,27].
The primitives can be composed as shown in Figure 6. Our composition proof proceeds similar to the
encrypt-then-MAC for CCA-secure encryption schemes. We leave the passive secret sharing scheme abstract
but we force some types of the commitment scheme, namely that it produces commits to associations between
a party identiﬁer and its respective share. Thereby, the list variation of this commitment scheme would
be producing commits to a map between party identiﬁers and shares, which is precisely the type of values
outputted by algorithm share presented in Figure 3.
The composition of the two primitives is a new secret sharing scheme where shares now carry a commitment
with them. Protocols share and reconstruct are speciﬁed in the expected way: i. share ﬁrst shares the secret
according to the honest-but-curious secret sharing scheme, before producing commits to the generated shares;
and ii. reconstruct ﬁrst veriﬁes the integrity of the shares (if there was some malicious modiﬁcations). If no
integrity breach was found, it proceeds with the reconstruction of the secret according to the passive secret
sharing scheme. If it was unable to attest the validity of some share, the algorithm fails and produces no
output.
Theory AbstractVeriﬁableSecretSharing also includes a series of security instantiations. The goal is to prove
that malicious security for AVSS can be obtained as a combination of other security guarantees, namely the
unforgeability of the commitment scheme and the indistinguishability of the passive secret sharing scheme.
The security proof of the veriﬁable secret sharing construction in Figure 6 was done in two steps. We
start by showing that malicious security of AVSS can be reduced to its passive security and its integrity.
Finally, we individually show that passive security of the veriﬁable secret sharing scheme can be reduced to
the passive security of the underlying secret sharing scheme and that share integrity can be reduced to the
unforgeability of the underlying commitment scheme.
Concrete secret sharing We now show how to make use of the modular abstract framework to produce
concrete instantiations of cryptographic primitives that are compatible with our EasyCrypt extraction tool,
focusing on the achievement of a veriﬁable secret sharing scheme. Based on the afore described modular
proof, one only needs to provide a valid realization of an honest-but-curious secret sharing scheme and of an
unforgeable commitment scheme. The veriﬁable secret sharing scheme is derived easily via speciﬁcations in
11
Figure 6, as presented in Figure 7. In the ﬁgure, if some arrow is labeled, it means that the result is already
proven in the abstract framework and that it can be reused here (hence it does not represent any signiﬁcant
veriﬁcation overhead). The proofs that were made in this phase (proofs that concrete implementation of a
primitive achieves the desired security) are represented as solid arrows.
Fig. 7: Concrete instantiation of the secret sharing framework. Concrete Shamir’s veriﬁable secret sharing
scheme is easily obtained via a concrete instantiation of Shamir secret sharing scheme and of Pedersen’s
commitment scheme. The major challenges in this step are the security proofs of Shamir secret sharing schem
and of Pedersen’s commitment scheme.
For our proactive secure evaluator, we choose to implement the veriﬁable version of Shamir’s secret sharing
scheme [67] combined with Pedersen’s commitment scheme [62]. The EasyCrypt implementation of Shamir’s
secret sharing scheme is detailed in Figure 8, where F.t represents the type of elements of a ﬁnite ﬁeld.
theory ShamirSecretSharingScheme.
...
clone import SecretSharingScheme as Shamir with
type secret_t = F.t,
type share_t = F.t,