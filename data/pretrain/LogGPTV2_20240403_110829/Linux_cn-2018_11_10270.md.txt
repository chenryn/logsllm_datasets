---
**作者**: Phill Estes  
**分类**: 观点  
**评论数据**: 无  
**统计**:  
  - 评论数: 0
  - 收藏次数: 0
  - 点赞数: 0
  - 分享次数: 1
  - 浏览量: 4639  
**日期**: 2018-11-24 12:21:37  
**编辑推荐**: 否  
**摘要**: 到达 Golang 大陆：一位资深开发者之旅。  
**来源链接**: <https://opensource.com/article/18/11/learning-golang>  
**ID**: 10270  
**是否 LCTT 原创**: 是  
**大图**: /data/attachment/album/201811/24/122139dqbvftbwdqcqu7l0.jpg  
**永久链接**: /article-10270-1.html  
**图片**: /data/attachment/album/201811/24/122139dqbvftbwdqcqu7l0.jpg.thumb.jpg  
**相关文章**: 无  
**审阅者**: wxy  
**选择人**: lujun9972  
**总结**: 到达 Golang 大陆：一位资深开发者之旅。  
**标签**: Golang  
**缩略图显示**: 否  
**标题图片显示**: 是  
**翻译者**: dianbanjiu  
**更新时间**: 2018-11-24 12:21:37  
---

> **到达 Golang 大陆：一位资深开发者之旅**

![](/data/attachment/album/201811/24/122139dqbvftbwdqcqu7l0.jpg)

### 2014 年夏天……

IBM: “我们需要你弄清楚这个 Docker。”

我: “没问题。”

IBM: “那就开始吧。”

我: “好的。”（内心独白）：“Docker 是用 Go 编写的吗？”（Google 搜索）“哦，是一门编程语言。我在工作中已经学过很多了，这应该不难。”

我的大学新生编程课是使用 VAX 汇编程序教授的。在数据结构课程中，我们使用 Pascal —— 在图书馆计算机中心的旧电脑上通过软盘加载。在更高阶的课程中，我的教授喜欢用 ADA 来展示所有示例。在 Sun 工作站上，我通过各种 UNIX 实用程序源代码学习了一些 C 语言。在 IBM，我们在 OS/2 源代码中使用了 C 和一些 x86 汇编；在一个与 Apple 合作的项目中，我们大量使用了 C++ 的面向对象特性。不久之后，我学会了 shell 脚本，首先是 csh，但在 90 年代中期发现 Linux 后转到了 Bash。在 90 年代后期，我在将 IBM 定制的 JVM 代码中的即时（JIT）编译器移植到 Linux 时，不得不开始学习 m4（与其说是一种编程语言，不如说是一种宏处理器）。

二十年过去了……我从未因为学习一门新的编程语言而感到焦虑。但 [Go](https://golang.org/) 却让我感觉不同。我打算公开贡献，并上传到 GitHub，让任何感兴趣的人都能看到！作为一个 40 多岁的资深开发新手，我不想成为笑柄。我们都了解程序员的骄傲，不想丢脸，无论经验水平如何。

早期的研究表明，Go 似乎比某些语言更“地道”。它不仅仅是要让代码能够编译；还需要让它能够“流畅运行”。

如今，我的个人 Go 之旅已经四年了，有了几百个拉取请求（PR）。我不是致力于成为一个专家，但现在我觉得贡献和编写代码比我 2014 年的时候更加得心应手。那么，如何教一个老程序员新技能或编程语言呢？以下是我前往 Golang 大陆之旅的四个步骤。

### 1. 不要跳过基础

虽然你可以通过复制代码来开始你的早期学习（谁有时间阅读手册！？），但 Go 有一个非常易读的 [语言规范](https://golang.org/ref/spec)，即使你在语言或编译理论方面没有硕士学位也能理解。鉴于 Go 的 **参数：类型** 顺序的独特习惯以及一些有趣的功能（如通道和 go 协程），掌握这些新概念至关重要。阅读附带文档 [高效 Go 编程](https://golang.org/doc/effective_go.html)，这是 Golang 创始人提供的另一个重要资源，它将为你提供有效且正确使用该语言的准备。

### 2. 从最好的中学习

有许多宝贵的资源可以帮助你将 Go 知识提升到一个新的水平。最近在 [GopherCon](https://www.gophercon.com/) 上的所有演讲都可以在网上找到，例如 [GopherCon US 2018](https://tqdev.com/2018-gophercon-2018-videos-online) 的详尽列表。这些演讲的专业知识和技术水平各不相同，但你可以轻松地找到一些你不知道的事情。[Francesc Campoy](https://twitter.com/francesc) 创建了一个名为 [JustForFunc](https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw) 的 Go 编程视频系列，其不断增加的剧集可以用来拓宽你的 Go 知识和理解。直接搜索“Golang”可以为那些想了解更多的人展示许多其他视频和在线资源。

想看代码？GitHub 上有许多流行的云原生项目都是用 Go 编写的：[Docker/Moby](https://github.com/moby/moby)、[Kubernetes](https://github.com/kubernetes/kubernetes)、[Istio](https://github.com/istio/istio)、[containerd](https://github.com/containerd/containerd)、[CoreDNS](https://github.com/coredns/coredns) 以及其他许多项目。语言纯粹主义者可能会认为一些项目比其他项目更地道，但这些都是很好的起点，可以看到在高度活跃项目的大型代码库中使用 Go 的程度。

### 3. 使用优秀的语言工具

你会很快了解到 [gofmt](https://blog.golang.org/go-fmt-your-code) 的宝贵之处。Go 最漂亮的一个地方就在于没有关于每个项目代码格式的争论——**gofmt** 内置在语言的运行环境中，并根据一系列可靠且易于理解的语言规则对 Go 代码进行格式化。我不知道有任何基于 Golang 的项目在持续集成中不坚持使用 **gofmt** 检查拉取请求。

除了直接构建于运行环境和 SDK 中的一系列有价值的工具外，我强烈建议使用一个对 Golang 特性有良好支持的编辑器或 IDE。由于我经常在命令行中工作，我依赖于 Vim 加上强大的 [vim-go](https://github.com/fatih/vim-go) 插件。我也喜欢微软提供的 [VS Code](https://code.visualstudio.com/)，特别是它的 [Go 语言](https://code.visualstudio.com/docs/languages/go) 插件。

想要调试器？[Delve](https://github.com/derekparker/delve) 项目在不断改进和成熟，它是对 Go 二进制文件进行 [gdb](https://www.gnu.org/software/gdb/) 式调试的强大竞争者。

### 4. 编写一些代码

如果你不开始尝试用 Go 编写代码，你永远不知道它有多好。找一个带有“需要帮助”问题标签的项目并开始贡献代码。如果你已经在使用一个用 Go 编写的开源项目，找出是否有可以用初学者方式解决的 Bug，然后开始你的第一个拉取请求。正如生活中的大多数事情一样，实践出真知，所以开始吧。

事实证明，你可以教会一个资深的老开发者一种新的技能甚至编程语言。

---
**作者**: [Phill Estes](https://opensource.com/users/estesp)  
**选题**: [lujun9972](https://github.com/lujun9972)  
**翻译**: [dianbanjiu](https://github.com/dianbanjiu)  
**校对**: [wxy](https://github.com/wxy)  
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出