allocated  to  store  the  status  information  of  the  con-
nection  to  be  completed.  Normally, 
the  initiator  will
send  back  another  ACK  segment  to  the  receiver,  and
the  connection  is therefore  successfully  established.
To  launch  a  SYN-Flooding 
the  attacker 
transmits 
chine, 
packets 
to 
the  victim  machine 
attack  against  a  ma-
a  huge  number  of  SYN
rate,
in  a  very 
rapid 
but  does  not  send  back  any  ACK  segments.  In  this
case, the  victim  has to  keep the  status  information  of
uncompleted  connections  for  a  while. 
If  the  number
of  uncompleted  connections  exceeds the  system  limit,
the  victim  may  run  out  of its  memory,  and  will  not  be
able  to  respond  to  legitimate  requests. 
In  the  worst
scenario,  it  must  be shutdown.
1.  Real 
Simulation
To  apply  real  simulation  to  emulating  this  type  of
attack,  we can  write  a program  to  open  a raw  socket,
compose  SYN  packets,  and  keep sending  them  out  to
a  target  quickly.  To  spoof  the  target,  the  sources of
SYN  packets can be set to  any  arbitrary  addresses. In
this  way,  the  SYN  ACK  segments  sent  back  by  the
target  will  be  lost  and  the  target  will  never  be  able
to  receive  any  acknowledgments.  The  target  has  to
keep status  information 
for  uncompleted  connections
in  its  memory  until  a timer  expires.  If  the  number  of
uncompleted  connections  exceeds its  limit, 
the  target
will  not  be denied  of services in  terms  that  it  is unable
to  serve any  legitimate  requests.
The  SYN  packets  generated  by  the  real  simulator
will  be  captured  by  the  sensor.  The  sensor then  gen-
erates  a series of  synthesized  events  called  TCP  con-
nection  establishment  request  events.  These  events,
mixed  in  the  events  representing  background  traffic,
are sent to  a central  repository  called  the  event  buffer .
2.  Virtual 
Simulation
To  virtually  emulate  the  SYN-Flooding  denial  of
service attack,  a simulator  is developed to directly  gen-
erate  a series of  high  level  TCP  connection  establish-
ment  request events and send them  to  the event  buffer .
In  the  event  buffer,  virtually  simulated  events  are  in-
jected  into  background  events produced  by  the  sensor .
Since the  event  buffer  is the  only  place  where  in-
trusion  detection  algorithms  read  events,  it  is  easy to
see that  virtual  simulation  is functionally  equivalent  to
real  simulation 
in  terms  that  they  can produce  equiv-
alent  inputs  to  detection  algorithms.
The  advantages  of  our  approach  are:
.Background 
testing 
ment.
data  are realistic  and  sufficient  since
in  a  real  environ-
is  conducted  directly 
.A 
broad  range  of  intrusions  can  be  emulated,
intru-
including  destructive  and  non-destructive 
slons.
.Normal 
system  operation 
is  protected  since  de-
structive  intrusions  can  be  virtually  emulated.
3
The  Software 
Platform
IntruDetector  consists  of  several  components:  a  sen-
sor, simulators  (real  and  virtual),  an event  buffer,  and
a visualization  engine.  The  system  architecture  is de-
picted  by  Figure  1.
Figure  I:  The  System  Architecture  of  IntruDetector
The  sensor  should  implement 
the  functionalities
described  by  IDWG. 
It  processes raw  data  and  pro-
duces events in  the  format  conforming  to  current  stan-
dards,  for  example,  Intrusion  Detection  Message Ex-
change  Format  (IDMEF) 
[10}.  The  sensor should  also
reduce data  to  a certain  degree.  We have implemented
a sensor for  processing network  traffic.  The  sensor cap-
tures  network  packets  and  generates  network  events
based on  the  headers of packets.  Packets are captured
by  calling  the  libraries  provided  by  libpcap  [20}.  The
current  format  of  events generated  by  the  sensor does
not  conform  to  any standards  since they  are still  under-
development.  We will  keep our  eyes on the  progress of
IDS  standardization,  and  redesign  our  platform  when
they  are finalized.
It  should  be  pointed  out  that  the  architecture  it-
self  does  not  impose  any  limitations  on  testing  host-
based  intrusion  detection  algorithms. 
If  a  sensor  for
processing  operating  system  audit  trails  is  provided,
both  types  of  algorithms  can  be tested.
5
Simulators  consist  of  real  simulators  and  virtual
simulators.  Real  simulators  are  programs  which  can
explore  system  vulnerabilities  and launch  attacks.  vir-
tual  simulators  can  generate  a  series of  events  repre-
senting  a certain  type  of  attacks.  A  virtual  simulator
should  be  used  only  when  the  real  simulation 
is  not
applicable,  e.g.,  the  attack  can destroy  the  testing  en-
vironment  or  disturb  normal  users  activity.  The  de-
velopment  of  simulators  is  based on  the  classification
of  well-known  attacks. 
In  the  current  stage,  we  only
developed  several example  simulators  for  each class of
attacks.
The  event  buffer  is  a central  repository  where  all
events are stored,  including  those generated  by the sen-
sor and  those produced  by  the  virtual  simulators.  The
event buffer  functions  as the  event pool  in  the  model  of
multiple  producers  and  multiple  consumers.  The  sen-
sor  and  virtual  simulators,  which  generate  events,  are
producers. 
Intrusion  detection  algorithms,  which  re-
trieve  events, are consumers.  To ensure that  the  analy-
sis results  from  different  detection  algorithms  are com-
parable,  all  detection  algorithms  should  have a consis-
tent  view  of  events.  This  is  accomplished  by  keeping
an event in  the  buffer  until  it  is consumed  by  all  detec-
tion  algorithms.  To  improve  system  performance  and
extensibility,  each producer  or  consumer  runs  as an in-
dividual  process in  the  operating  system.  To  achieve
maximum  efficiency  of  interprocess  communication,
the  event  buffer  is  implemented  by  shared  memory.
Processes are synchronized  using  semaphores.
The  visualization  module  can  be used to  manage
the  platform, 
for  example,  configure  the  event  buffer ,
start  and  stop  simulators,  etc.  It  can  also present  the
analysis  results  of  detection  algorithms  in  an intuitive
way.  For  example,  it  will  print  a message in  the  mes-
sage panel  when  a communication  path  is  found  to  be
anomalous  or in  violation  of security  policy.  It  can also
visualize  the  traffic  hierarchy  constructed  by  a sample
detection  algorithm  we have implemented.
To  test  and  prove  the  applicability  of  the  archi-
tecture,  we implemented  a network  intrusion  detection
algorithm  and  tested  it  with  the  platform.  The  algo-
rithm 
is  based on  the  idea  of  Network  Security  Mon-
itor  (NSM)  [13] developed  at  University  of  California
at  Davis. 
It  is  composed  by  an  event  assembler  and
two  analysis  functions,  statistical  analysis  and  signa-
ture  analysis.
Event  assembler  is  responsible  for  restoring  net-
work  events into  TCP  sessions and organizing  sessions
into  a  hierarchical  structure.  Analysis  functions  are
called  periodically 
to  check the  security  status  of  each
TCP  session and report  insecure sessions to  the  visual-
ization  module.  Statistical  analysis  looks  for  unusual
traffic  patterns.  This  requires  the  knowledge  of histor-
ical  traffic  patterns.  We  collected  three  weeks worth
of  network  traffic 
from  a  subnet  at  our  department,
and  built  historical  profiles  for  normal  traffic  patterns.
The  lower  the  probability  of  a communication  path  in
historical  profiles,  the  more  anomalous  that  commu-
nication  path  is.  For  example,  if  a  TELNET  session
from  machine  A  to  machine  B  is very  rare,  the  occur-
rence  of  such  a connection  may  indicate  an  intrusion.
Signature  analysis  is  to  look  for  a specific  traffic  pat-
tern  which  indicates  a known  intrusion  or  a violation
of security  rules.  For  example,  all  accesses to  machine
A  are restricted  to  within 
the  organization.  Any  con-
nection  to  machine  A  from  outside  is  a  violation  of
security  rules  and  will  fire  an  alarm.
4
Experiments
4.1
Objectives
Our  long  term  goal  is  to  develop  innovative  intrusion
detection  algorithms  and  test  them  with  IntruDetec-
is  still  un-
tor.  As  the  development  of  IntruDetector 
dergoing,  we  only  present  the  preliminary 
results  of
our  experiments  here.  The  objective  is to demonstrate
the  capability  of the  software  platform  and how  to  use
the  platform 
to  perform  testing.  We study  the  behav-
iors of an intrusion  detection  algorithm  we have imple-
mented.  Both  real  simulation  and  virtual  simulation
are applied.
4.2 Experimental  Environment
We conducted  the  experiments  in  a real  environment,
which  is  depicted  by  Figure  2.  The  experimental  net-
work  consists  of  a  server  and  several  clients,  and  is
directly  connected  to  the  Internet  without  firewall  pro-
tection.  There  were  tens  of  real  users who  were using
several  common  network  services  {e.g.,  mail,  ftp,  X
windows,  among  others)  on  a  daily  basis.  This  is  a
typical  environment  seen by  many  organizations.
4.3
Cases  Selection
The 
following 
test  cases  are  selected
.Case  1.  An  FTP  session  from  a  client 
to  the
server.  The  session is terminated  after  a sensitive
6
Service
ftp
telnet
smtp
finger
http
rpc
login
printer
XII
Number
of  Connections
Average  Number
Average  Number
of  Packets
of  Bytes
261
101
98
10.375
786
195
79
169
161
691
41
663
1.9
26.986
145,806
9,770
9,155
45
3,332
134
15,053
197,835
1,089,006
Figure  2:  The  Experimental  Network
Figure  3:  The  features  of  Common  TCP  services  in
Historical  Profile
file  and  other 
session 
is  generated 
documents 
are  downloaded. 
This
by  real  simulation.
.Case  2.  A  telnet  session from  a outside  machine
to  the  server  at  midnight. 