unlinkability.
5. PERFORMANCE ANALYSIS
In this section, we explore a range of optimizations and tradeoffs
in the hopes of providing the most efﬁcient MIPNet architecture.
5.1 Experimental Setup
We analyzed the performance of both the new OT primitive we
have implemented and the “improved” MIPNet architecture. Our
experiments were run on two servers, each with 8 2-GHz Quad-
Core AMD Opteron processors, 16 GB of memory, 1 Gbit Ethernet
card and running 2.6.24 Linux Kernel (Ubuntu 8.04.2). The client
and OP code were implemented in SFDL and compiled into Java
objects using Fairplay.
5.2 Performance Evaluation
5.2.1 OT Performance
We ﬁrst compare the performance of the two OT primitives. As
a simple comparison, we evaluate the performance of each mecha-
nism in the Millionaire’s Problem over a range of input sizes. The
results are shown in Figure 4 for 100 iterations of the protocol, with
95% conﬁdence intervals included.
As an interesting aside, our ﬁrst set of results for these experi-
ments exhibited a saw-toothed behavior for a small number of input
bits. After much debugging, we realized that the observed irregu-
larities in our timing data were a result of Nagle’s Algorithm acting
upon TCP. In particular, transfers were being delayed until either
buffers were entirely ﬁlled or a timeout occurred. We were able
to eliminate such behavior by setting the TCP_NODELAY socket
option, and use this setting throughout the remainder of our exper-
iments.
The results of this experiment clearly show that for the same cir-
cuit, the RSA-OT primitive is signiﬁcantly more efﬁcient than the
NP-OT primitive provided with Fairplay. For all of the tested input
values, the RSA-OT scheme completed its execution in less than
50% of the time as was required by the NP-OT scheme. Moreover,
the use of additional JIT optimization further improved the perfor-
mance of the RSA-OT scheme by approximately 20%. While the
performance difference between the current and new mechanisms
on a per-OT scale is small, the use of a relatively large number of
OT exchanges makes the aggregate improvement signiﬁcant. Ac-
cordingly, we use the RSA-OT primitive with JIT optimizations as
the basis for the remainder of our experiments.
5.2.2 Circuit Size
The size of the garbled circuits created by Fairplay is directly
proportional to their performance. However, equivalent but more
efﬁcient encodings of these functions are possible. Ordered Binary
Decision Diagrams (OBDDs) provide a graph-based representation
of SFE circuits and have been demonstrated to signiﬁcantly reduce
the bandwidth used by such exchanges. However, in some rare
cases, OBDDs can experience an exponential blowup in size and
become far less efﬁcient than the circuits produced by Fairplay.
In order to improve the performance of our protocol, we compare
the sizes of the functions generated by both Fairplay and the OBDD
(cid:3)
(cid:31)
(cid:27)
(cid:1)
(cid:26)
(cid:2)
(cid:1)
(cid:25)
(cid:27)
(cid:22)
(cid:28)
(cid:29)
(cid:26)
(cid:32)
(cid:33)
(cid:24)
(cid:25)
(cid:34)
(cid:14)
(cid:1)(cid:8)(cid:5)(cid:5)(cid:5)(cid:5)
(cid:1)(cid:7)(cid:10)(cid:5)(cid:5)(cid:5)
(cid:1)(cid:7)(cid:5)(cid:5)(cid:5)(cid:5)
(cid:1)(cid:6)(cid:10)(cid:5)(cid:5)(cid:5)
(cid:1)(cid:6)(cid:5)(cid:5)(cid:5)(cid:5)
(cid:1)(cid:10)(cid:5)(cid:5)(cid:5)
(cid:1)(cid:5)
(cid:1)(cid:9)
(cid:17)(cid:19)(cid:4)(cid:18)(cid:22)
(cid:20)(cid:21)(cid:13)(cid:4)(cid:18)(cid:22)
(cid:20)(cid:21)(cid:13)(cid:4)(cid:18)(cid:22)(cid:4)(cid:16)(cid:15)(cid:22)
(cid:1)(cid:12)
(cid:1)(cid:6)(cid:7)
(cid:1)(cid:6)(cid:11)
(cid:1)(cid:7)(cid:5)
(cid:1)(cid:7)(cid:9)
(cid:1)(cid:7)(cid:12)
(cid:1)(cid:8)(cid:7)
(cid:15)(cid:28)(cid:30)(cid:33)(cid:32)(cid:1)(cid:31)(cid:26)(cid:35)(cid:25)(cid:1)(cid:2)(cid:23)(cid:26)(cid:32)(cid:31)(cid:3)
Figure 4: Performance evaluation for the “Millionaire’s Problem” com-
paring the oblivious transfer scheme included with Fairplay (NP-OT) and
the RSA-based Two-Lock Cryptosystem (RSA-OT). RSA-OT is more
than 50% more efﬁcient than the NP-OT mechanism.
Data
Bits
1
2
3
4
5
6
7
Fairplay
n=5
3264
3793
4322
4851
5380
5909
6438
n=7
6272
7253
8234
9215
10196
11177
12158
n=3
396
483
570
657
744
831
918
n=3
292
380
468
556
644
732
820
OBDD
n=5
2328
2856
3384
3912
4440
4968
5496
n=7
4590
5562
6534
7506
8478
9450
10422
Table 1: Circuit size for Fairplay and OBDD compiler circuits.
compiler created by Kruger et al. [37]. The results of these tests are
provided in Table 1. For a ﬁxed number of users in the MIPNet
(n = 3, n = 5 and n = 7) and a ﬁxed m = n − 1, we varied the
number of data bits carried in each input vector (R) entered by the
client per exchange. The functions produced by the OBDD com-
piler were smaller in all cases, with improvements ranging from
11% to 27% for n = 3, 15% to 29% for n = 5 and 14% to 27%
for n = 7.
Accordingly, we use the OBDD compiler to generate the func-
tions used in the remainder of the paper.
5.3
Instant Messaging Application
With an understanding of the performance proﬁle of our system,
we now explore the potential for applications to run on top of a
MIPNet. We implement a simple Instant Messaging (IM) client,
which we call MIPChat. As an example, we envision MIPChat be-
ing used in a low cross-trafﬁc scenario to provide a deniable com-
munications medium between a reporter and his or her source as
they sit on opposite sides of a public space such as a coffee shop or
train station. MIPChat resembles an IRC chat client, with received
communications multiplexed into a single window. Outgoing mes-
sages are run in a second screen, and prepended with the identiﬁer
of the intended destination (e.g., “@alice” is mapped to Client 2).
Figure 5 provides an overview of a MIPChat client. Clients with-
out messages to send generate random messages via OpenSSL’s
RAND_bytes() call, which generates cryptographically strong
pseudo-random byte streams, and pass these messages to a buffer
serviced by the underlying MIPNet client. These messages are sent
to an arbitrary client with the read bit in the slot set to zero so as
(cid:1)(cid:2)
(cid:19)(cid:28)(cid:26)(cid:28)(cid:31)(cid:40)(cid:28)(cid:36)(cid:1)(cid:8)(cid:39)(cid:29)(cid:29)(cid:28)(cid:36)
(cid:27)(cid:28)(cid:40)(cid:5)(cid:34)(cid:39)(cid:32)(cid:32)
(cid:20)(cid:36)(cid:24)(cid:34)(cid:37)(cid:33)(cid:31)(cid:38)(cid:1)(cid:8)(cid:39)(cid:29)(cid:29)(cid:28)(cid:36)
(cid:17)(cid:19)
(cid:15)(cid:13)(cid:18)(cid:9)(cid:30)(cid:24)(cid:38)
(cid:22)(cid:34)
(cid:17) (cid:14) (cid:14) (cid:11) (cid:12)
(cid:2)(cid:12)(cid:11)(cid:14)(cid:14)(cid:17)(cid:2)
(cid:21)(cid:37)(cid:28)(cid:36)(cid:1)(cid:13)(cid:34)(cid:35)(cid:39)(cid:38)
(cid:19)(cid:7)(cid:16)(cid:10)(cid:23)(cid:25)(cid:41)(cid:38)(cid:28)(cid:37)(cid:3)(cid:4)
(cid:17)(cid:19)
(cid:9)(cid:32)(cid:31)(cid:28)(cid:34)(cid:38)(cid:1)
(cid:6)
(cid:15)(cid:13)(cid:18)(cid:16)(cid:28)(cid:38)
Figure 5: The MIPChat application and its relationship to the MIP-
Net architecture.
Figure 6: A screenshot of the MIPChat client. Clients inject pseu-
dorandom garbage until they have real messages to send. Messages
are buffered and displayed by the client when they are received in
totality.
to indicate the lack of content in the message. The receiving client
simply discards the messages and awaits the next exchange. When
the user presses return, the real message is parsed for destination
and sent to the same buffer, where it is sent to the requested host.
On the receiving side, the client collects incoming legitimate mes-
sages in a buffer and, upon receiving an EOL character, pushes the
contents of the buffer to the client where they are displayed for the
user. Figure 6 provides a screen shot of this application, in which
“Bob” and “Trent” have both sent messages to “Alice”, and Alice
has responded to “Bob”. Recall that the source of the messages is
clear to the receiver in the absence of collisions as only a speciﬁc
sequence of slots in the mailbox could be correctly ﬁlled by the
sender based on the shared key hashing mechanism discussed in
Section 4.4.
Two small changes to the underlying MIPNet can allow for the
efﬁcient support of a much larger user population. First, we break
users into groups as was proposed in Section 4.5 to reduce the “end-
to-end” latency caused by adding users. Second, we take advantage
of how users are likely to actually use the MIPChat client. Speciﬁ-
cally, users are unlikely to attempt to talk to every participant in the
network concurrently. While a user may exchange messages with a
small number of participants at the same time, few users will ever
talk to every member on their contact list in parallel. From an in-
formal analysis of chat logs in our own lab, we saw that no user
(cid:3)
(cid:32)
(cid:28)
(cid:1)
(cid:27)
(cid:2)
(cid:1)
(cid:24)
(cid:28)
(cid:19)
(cid:29)
(cid:30)
(cid:27)
(cid:33)
(cid:34)
(cid:22)
(cid:24)
(cid:35)
(cid:15)
(cid:1)(cid:5)(cid:5)(cid:4)(cid:4)
(cid:1)(cid:5)(cid:4)(cid:4)(cid:4)
(cid:29)(cid:14)(cid:9)(cid:4)
(cid:29)(cid:14)(cid:5)(cid:4)(cid:4)
(cid:1)(cid:13)(cid:4)(cid:4)
(cid:1)(cid:12)(cid:4)(cid:4)
(cid:1)(cid:11)(cid:4)(cid:4)
(cid:1)(cid:10)(cid:4)(cid:4)
(cid:1)(cid:9)(cid:4)(cid:4)
(cid:1)(cid:8)(cid:4)(cid:4)
(cid:1)(cid:7)(cid:4)(cid:4)
(cid:1)(cid:6)(cid:4)(cid:4)
(cid:1)(cid:6)
(cid:1)(cid:7)
(cid:1)(cid:8)
(cid:1)(cid:9)
(cid:1)(cid:10)
(cid:1)(cid:11)
(cid:1)(cid:12)
(cid:1)(cid:13)
(cid:1)(cid:5)(cid:4)
(cid:17)(cid:34)(cid:28)(cid:21)(cid:24)(cid:31)(cid:1)(cid:30)(cid:25)(cid:1)(cid:16)(cid:24)(cid:32)(cid:32)(cid:20)(cid:26)(cid:24)(cid:32)(cid:1)(cid:18)(cid:24)(cid:20)(cid:23)
Figure 7: The performance proﬁle of MIPChat running on top of our archi-
tecture. Note that we can support large user populations (e.g., ng = 100)
with this approach and still process keystrokes as or nearly as fast as users
enter them.
ever spoke to more than three individuals on their contact list at the
same time. The execution time of an SFE exchange with an OP can
therefore be dramatically reduced by limiting the number of slots
actually read by a client in a single interaction. Users can check
the slots in which they expect a message during each round and
also intermittently monitor other slots in the mailbox for attempts
to initiate communications. We leave the speciﬁc synchronization
scheme between clients (e.g., explicit “start” messages, synchro-
nized sleep periods, etc) to each implementation of this system as
these mechanisms have been thoroughly studied.
Figure 7 shows the performance of the MIPChat client support-
ing ng = 50, 100 clients, m = 2, s = 1, 5 nodes assigned to