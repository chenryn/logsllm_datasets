file can be accessed as soon as the user unlocks the device for the first time after booting. It can be accessed
even if the user subsequently locks the device and the class key is not removed from memory.
No Protection (NSFileProtectionNone): The key for this protection class is protected with the UID only. The
class key is stored in "Effaceable Storage", which is a region of flash memory on the iOS device that allows the
storage of small amounts of data. This protection class exists for fast remote wiping (immediate deletion of the
class key, which makes the data inaccessible).
All class keys except NSFileProtectionNone are encrypted with a key derived from the device UID and the user's
passcode. As a result, decryption can happen only on the device itself and requires the correct passcode.
Since iOS 7, the default data protection class is "Protected Until First User Authentication".
The Keychain
The iOS Keychain can be used to securely store short, sensitive bits of data, such as encryption keys and session
tokens. It is implemented as an SQLite database that can be accessed through the Keychain APIs only.
On macOS, every user application can create as many Keychains as desired, and every login account has its own
Keychain. The structure of the Keychain on iOS is different: only one Keychain is available to all apps. Access to the
items can be shared between apps signed by the same developer via the access groups feature of the attribute
kSecAttrAccessGroup . Access to the Keychain is managed by the securityd daemon, which grants access according
to the app's Keychain-access-groups , application-identifier , and application-group entitlements.
The Keychain API includes the following main operations:
SecItemAdd
SecItemUpdate
SecItemCopyMatching
SecItemDelete
Data stored in the Keychain is protected via a class structure that is similar to the class structure used for file
encryption. Items added to the Keychain are encoded as a binary plist and encrypted with a 128-bit AES per-item key
in Galois/Counter Mode (GCM). Note that larger blobs of data aren't meant to be saved directly in the Keychain-that's
what the Data Protection API is for. You can configure data protection for Keychain items by setting the
kSecAttrAccessible key in the call to SecItemAdd or SecItemUpdate . The following configurable accessibility values
for kSecAttrAccessible are the Keychain Data Protection classes:
kSecAttrAccessibleAlways : The data in the Keychain item can always be accessed, regardless of whether the
device is locked.
kSecAttrAccessibleAlwaysThisDeviceOnly : The data in the Keychain item can always be accessed, regardless of
whether the device is locked. The data won't be included in an iCloud or iTunes backup.
kSecAttrAccessibleAfterFirstUnlock : The data in the Keychain item can't be accessed after a restart until the
device has been unlocked once by the user.
kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly : The data in the Keychain item can't be accessed after a
restart until the device has been unlocked once by the user. Items with this attribute do not migrate to a new
device. Thus, after restoring from a backup of a different device, these items will not be present.
kSecAttrAccessibleWhenUnlocked : The data in the Keychain item can be accessed only while the device is
unlocked by the user.
kSecAttrAccessibleWhenUnlockedThisDeviceOnly : The data in the Keychain item can be accessed only while the
device is unlocked by the user. The data won't be included in an iCloud or iTunes backup.
kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly : The data in the Keychain can be accessed only when the
device is unlocked. This protection class is only available if a passcode is set on the device. The data won't be
included in an iCloud or iTunes backup.
376
Data Storage on iOS
AccessControlFlags define the mechanisms with which users can authenticate the key
( SecAccessControlCreateFlags ):
kSecAccessControlDevicePasscode : Access the item via a passcode.
kSecAccessControlTouch IDAny : Access the item via one of the fingerprints registered to Touch ID. Adding or
removing a fingerprint won't invalidate the item.
kSecAccessControlTouch IDCurrentSet : Access the item via one of the fingerprints registered to Touch ID. Adding
or removing a fingerprint will invalidate the item.
kSecAccessControlUserPresence : Access the item via either one of the registered fingerprints (using Touch ID) or
default to the passcode.
Please note that keys secured by Touch ID (via kSecAccessControlTouch IDCurrentSet or kSecAccessControlTouch
IDAny ) are protected by the Secure Enclave: The Keychain holds a token only, not the actual key. The key resides in
the Secure Enclave.
Starting with iOS 9, you can do ECC-based signing operations in the Secure Enclave. In that scenario, the private key
and the cryptographic operations reside within the Secure Enclave. See the static analysis section for more info on
creating the ECC keys. iOS 9 supports only 256-bit ECC. Furthermore, you need to store the public key in the
Keychain because it can't be stored in the Secure Enclave. After the key is created, you can use the kSecAttrKeyType
to indicate the type of algorithm you want to use the key with.
In case you want to use these mechanisms, it is recommended to test whether the passcode has been set. In iOS 8,
you will need to check whether you can read/write from an item in the Keychain protected by the
kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly attribute. From iOS 9 onward you can check whether a lock screen
is set, using LAContext :
public func devicePasscodeEnabled() -> Bool {
return LAContext().canEvaluatePolicy(.deviceOwnerAuthentication, error: nil)
}
-(BOOL)devicePasscodeEnabled:(LAContex)context{
if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthentication error:nil]) {
return true;
} else {
creturn false;
}
}
Keychain Data Persistence
On iOS, when an application is uninstalled, the Keychain data used by the application is retained by the device, unlike
the data stored by the application sandbox which is wiped. In the event that a user sells their device without
performing a factory reset, the buyer of the device may be able to gain access to the previous user's application
accounts and data by reinstalling the same applications used by the previous user. This would require no technical
ability to perform.
When assessing an iOS application, you should look for Keychain data persistence. This is normally done by using
the application to generate sample data that may be stored in the Keychain, uninstalling the application, then
reinstalling the application to see whether the data was retained between application installations. You can also verify
persistence by using the iOS security assessment framework Needle to read the Keychain. The following Needle
commands demonstrate this procedure:
$ python needle.py
[needle] > use storage/data/keychain_dump
[needle] > run
377
Data Storage on iOS
{
"Creation Time" : "Jan 15, 2018, 10:20:02 GMT",
"Account" : "username",
"Service" : "",
"Access Group" : "ABCD.com.test.passwordmngr-test",
"Protection" : "kSecAttrAccessibleWhenUnlocked",
"Modification Time" : "Jan 15, 2018, 10:28:02 GMT",
"Data" : "testUser",
"AccessControl" : "Not Applicable"
},
{
"Creation Time" : "Jan 15, 2018, 10:20:02 GMT",
"Account" : "password",
"Service" : "",
"Access Group" : "ABCD.com.test.passwordmngr-test,
"Protection" : "kSecAttrAccessibleWhenUnlocked",
"Modification Time" : "Jan 15, 2018, 10:28:02 GMT",
"Data" : "rosebud",
"AccessControl" : "Not Applicable"
}
There's no iOS API that developers can use to force wipe data when an application is uninstalled. Instead, developers
should take the following steps to prevent Keychain data from persisting between application installations:
When an application is first launched after installation, wipe all Keychain data associated with the application.
This will prevent a device's second user from accidentally gaining access to the previous user's accounts. The
following Swift example is a basic demonstration of this wiping procedure:
let userDefaults = UserDefaults.standard
if userDefaults.bool(forKey: "hasRunBefore") == false {
// Remove Keychain items here
// Update the flag indicator
userDefaults.set(true, forKey: "hasRunBefore")
userDefaults.synchronize() // Forces the app to update UserDefaults
}
When developing logout functionality for an iOS application, make sure that the Keychain data is wiped as part of
account logout. This will allow users to clear their accounts before uninstalling an application.
Static Analysis
When you have access to the source code of an iOS app, try to spot sensitive data that's saved and processed
throughout the app. This includes passwords, secret keys, and personally identifiable information (PII), but it may as
well include other data identified as sensitive by industry regulations, laws, and company policies. Look for this data
being saved via any of the local storage APIs listed below. Make sure that sensitive data is never stored without
appropriate protection. For example, authentication tokens should not be saved in NSUserDefaults without additional
encryption.
The encryption must be implemented so that the secret key is stored in the Keychain with secure settings, ideally
kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly . This ensures the usage of hardware-backed storage mechanisms.
Make sure that the AccessControlFlags are set according to the security policy of the keys in the KeyChain.
Generic examples of using the KeyChain to store, update, and delete data can be found in the official Apple
documentation. The official Apple documentation also includes an example of using Touch ID and passcode protected
keys.
Here is sample Swift code you can use to create keys (Notice the kSecAttrTokenID as String:
kSecAttrTokenIDSecureEnclave : this indicates that we want to use the Secure Enclave directly.):
378
Data Storage on iOS
// private key parameters
let privateKeyParams: [String: AnyObject] = [
kSecAttrLabel as String: "privateLabel",
kSecAttrIsPermanent as String: true,
kSecAttrApplicationTag as String: "applicationTag"
]
// public key parameters
let publicKeyParams: [String: AnyObject] = [
kSecAttrLabel as String: "publicLabel",
kSecAttrIsPermanent as String: false,
kSecAttrApplicationTag as String: "applicationTag"
]
// global parameters
let parameters: [String: AnyObject] = [
kSecAttrKeyType as String: kSecAttrKeyTypeEC,
kSecAttrKeySizeInBits as String: 256,
kSecAttrTokenID as String: kSecAttrTokenIDSecureEnclave,
kSecPublicKeyAttrs as String: publicKeyParams,
kSecPrivateKeyAttrs as String: privateKeyParams
]
var pubKey, privKey: SecKeyRef?
let status = SecKeyGeneratePair(parameters, &pubKey, &privKey)
When checking an iOS app for insecure data storage, consider the following ways to store data because none of them
encrypt data by default:
NSUserDefaults
The NSUserDefaults class provides a programmatic interface for interacting with the default system. The default
system allows an application to customize its behavior according to user preferences. Data saved by NSUserDefaults
can be viewed in the application bundle. This class stores data in a plist file, but it's meant to be used with small
amounts of data.
File system
NSData : creates static data objects, while NSMutableData creates dynamic data objects. NSData and
NSMutableData are typically used for data storage, but they are also useful for distributed objects applications, in
which data contained in data objects can be copied or moved between applications. The following are methods
used to write NSData objects:
NSDataWritingWithoutOverwriting
NSDataWritingFileProtectionNone
NSDataWritingFileProtectionComplete
NSDataWritingFileProtectionCompleteUnlessOpen
NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication
writeToFile : stores data as part of the NSData class
NSSearchPathForDirectoriesInDomains, NSTemporaryDirectory : used to manage file paths
NSFileManager : lets you examine and change the contents of the file system. You can use createFileAtPath to
create a file and write to it.
The following example shows how to create a securely encrypted file using the createFileAtPath method:
[[NSFileManager defaultManager] createFileAtPath:[self filePath]
contents:[@"secret text" dataUsingEncoding:NSUTF8StringEncoding]
attributes:[NSDictionary dictionaryWithObject:NSFileProtectionComplete
forKey:NSFileProtectionKey]];
CoreData
379
Data Storage on iOS
Core Data is a framework for managing the model layer of objects in your application. It provides general and
automated solutions to common tasks associated with object life cycles and object graph management, including
persistence. Core Data can use SQLite as its persistent store, but the framework itself is not a database.
CoreData does not encrypt it's data by default. As part of a research project (iMAS) from the MITRE Corporation, that
was focused on open source iOS security controls, an additional encryption layer can be added to CoreData. See the
GitHub Repo for more details.
SQLite Databases
The SQLite 3 library must be added to an app if the app is to use SQLite. This library is a C++ wrapper that provides
an API for the SQLite commands.
Firebase Real-time Databases
Firebase is a development platform with more than 15 products, and one of them is Firebase Real-time Database. It
can be leveraged by application developers to store and sync data with a NoSQL cloud-hosted database. The data is
stored as JSON and is synchronized in real-time to every connected client and also remains available even when the
application goes offline.
Identifying Misconfigured Firebase Instance
In Jan 2018, Appthority Mobile Threat Team (MTT) performed security research on insecure backend services
connecting to mobile applications. They discovered a misconfiguration in Firebase, which is one of the top 10 most
popular data stores which could allow attackers to retrieve all the unprotected data hosted on the cloud server. The
team performed the research on 2 Million+ mobile applications and found that the around 9% of Android applications
and almost half (47%) of iOS apps that connect to a Firebase database were vulnerable.
The misconfigured Firebase instance can be identified by making the following network call:
https://\.firebaseio.com/.json
The firebaseProjectName can be retrieved from the property list(.plist) file. For example, PROJECT_ID key stores the
corresponding Firebase project name in GoogleService-Info.plist file.
Alternatively, the analysts can use Firebase Scanner, a python script that automates the task above as shown below:
python FirebaseScanner.py -f 
Realm databases
Realm Objective-C and Realm Swift aren't supplied by Apple, but they are still worth noting. They store everything
unencrypted, unless the configuration has encryption enabled.
The following example demonstrates how to use encryption with a Realm database:
// Open the encrypted Realm file where getKey() is a method to obtain a key from the Keychain or a server
let config = Realm.Configuration(encryptionKey: getKey())
do {
let realm = try Realm(configuration: config)
// Use the Realm as normal
} catch let error as NSError {
// If the encryption key is wrong, `error` will say that it's an invalid database
fatalError("Error opening realm: \(error)")
}
Couchbase Lite Databases
380
Data Storage on iOS
Couchbase Lite is a lightweight, embedded, document-oriented (NoSQL) database engine that can be synced. It
compiles natively for iOS and macOS.
YapDatabase
YapDatabase is a key/value store built on top of SQLite.
Dynamic Analysis
One way to determine whether sensitive information (like credentials and keys) is stored insecurely without leveraging
native iOS functions is to analyze the app's data directory. Triggering all app functionality before the data is analyzed
is important because the app may store sensitive data only after specific functionality has been triggered. You can
then perform static analysis for the data dump according to generic keywords and app-specific data.
The following steps can be used to determine how the application stores data locally on a jailbroken iOS device:
1. Trigger the functionality that stores potentially sensitive data.
2. Connect to the iOS device and navigate to its Bundle directory (this applies to iOS versions 8.0 and above):
/var/mobile/Containers/Data/Application/$APP_ID/
3. Execute grep with the data that you've stored, for example: grep -iRn "USERID" .
4. If the sensitive data is stored in plaintext, the app fails this test.
You can analyze the app's data directory on a non-jailbroken iOS device by using third-party applications, such as
iMazing.
1. Trigger the functionality that stores potentially sensitive data.
2. Connect the iOS device to your workstation and launch iMazing.
3. Select "Apps", right-click the desired iOS application, and select "Extract App".
4. Navigate to the output directory and locate $APP_NAME.imazing. Rename it $APP_NAME.zip .
5. Unpack the zip file. You can then analyze the application data.
Note that tools like iMazing don't copy data directly from the device. They try to extract data from the backups
they create. Therefore, getting all the app data that's stored on the iOS device is impossible: not all folders are
included in backups. Use a jailbroken device or repackage the app with Frida and use a tool like objection to
access all the data and files.
If you added the Frida library to the app and repackaged it as described in "Dynamic Analysis on Non-Jailbroken
Devices" (from the "Tampering and Reverse Engineering on iOS" chapter), you can use objection to transfer files
directly from the app's data directory or read files in objection as explained in the chapter "Basic Security Testing on
iOS", section "Host-Device Data Transfer".
The Keychain contents can be dumped during dynamic analysis. On a jailbroken device, you can use Keychain
dumper as described in the chapter "Basic Security Testing on iOS".
The path to the Keychain file is
/private/var/Keychains/keychain-2.db
On a non-jailbroken device, you can use objection to dump the Keychain items created and stored by the app.
Dynamic Analysis with Xcode and iOS simulator
This test is only available on macOS, as Xcode and the iOS simulator is needed.
For testing the local storage and verifying what data is stored within it, it's not mandatory to have an iOS device. With
access to the source code and Xcode the app can be build and deployed in the iOS simulator. The file system of the
current device of the iOS simulator is available in ~/Library/Developer/CoreSimulator/Devices .
381
Data Storage on iOS
Once the app is running in the iOS simulator, you can navigate to the directory of the latest simulator started with the
following command:
$ cd ~/Library/Developer/CoreSimulator/Devices/$(
ls -alht ~/Library/Developer/CoreSimulator/Devices | head -n 2 |
awk '{print $9}' | sed -n '1!p')/data/Containers/Data/Application
The command above will automatically find the UUID of the latest simulator started. Now you still need to grep for
your app name or a keyword in your app. This will show you the UUID of the app.
$ grep -iRn keyword .
Then you can monitor and verify the changes in the filesystem of the app and investigate if any sensitive information is