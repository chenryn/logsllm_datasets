Authentication Code takes under 2µs.
Expiration Route announcements and withdrawals are often vul-
nerable to the replay attack, where a BGP speaker replays an
ASPATH which it has previously heard.
In particular, once a
BGP speaker has legitimately heard authentication information for
an ASPATH, it can replay that ASPATH and ASPATH protector,
even after that route has been withdrawn. To reduce the impact of
this attack, S-BGP provides replay protection through the use of a
Timeout ﬁeld, which is signed by the BGP speaker which originally
advertised the preﬁx. Once this timeout expires, all S-BGP routers
will withdraw this route; as a result, for seamless routing connectiv-
ity, each S-BGP speaker must readvertise each of its routes before
the route’s Timeout expires.
In SPV, we can prevent replays through the use of epochs: each
epoch corresponds to a certain valid period, and each route is read-
vertised in each epoch. An epoch is an implicit Timeout: the adver-
tised route times out after the epoch ends. The length of an epoch
can be chosen in a way that provides higher security or lower over-
head, but a minimum epoch length (for example, one day) should
be enforced. Denial-of-Service attacks based on excessive epoch
changing can then be mitigated, for example by reducing the prior-
ity of verifying new epochs in excess of three or four per day.
To prevent synchronized epoch changes from causing a ﬂood of
advertisements of different ASes, the boundaries between epochs
should be chosen uniformly at random. One approach is to hash
the preﬁx using a one-way hash function. The resulting number
is taken to represent the fraction of an epoch to offset from some
well-known time. For example, if the epoch is a day long, the preﬁx
“128.32.0.0/16” hashes to 5fbe73c..., which represents 8 hours,
58 minutes, and 33.58 seconds after the well-known time. If the
well-known time is midnight UTC, then each of 128.32.0.0/16’s
epochs will begin at 08:58:33.58 UTC each day.
To avoid the need for time synchronization, a router accepts
UPDATEs with an old epoch number for a ﬁxed time after it ﬁrst
receives an authentic UPDATE with the new epoch number. This
gives possibly better (or preferred) routes an opportunity to propa-
gate through the network. In addition, if the ﬁxed time is chosen to
be sufﬁciently long (such as two hours), an attacker that does not
control all the routes to a preﬁx is unlikely to be able to prevent the
other advertisements from reaching other nodes for that long.
Both S-BGP and SPV require a timeout or epoch to prevent re-
play of old UPDATE messages. In general, since SPV is much more
efﬁcient than S-BGP for ASPATH protector generation and veriﬁ-
cation (as we evaluate in Section 5), SPV can operate with a shorter
epoch (or Timeout) than can S-BGP. As a result, SPV can more
readily defend against replay attacks. SPV also includes mecha-
nisms that allow for correct operation even when BGP speakers are
not time synchronized.
5 EVALUATION
We evaluate the security and efﬁciency of the SPV secure path vec-
tor routing protocol, and we contrast it with S-BGP. We ﬁrst discuss
the security of SPV, then we analyze the performance beneﬁts.
Unless otherwise noted, performance results are driven by data
from the Oregon route server [40] for the days of January 24–25,
2003, assuming connections to Level3 through AS 3356 and Cable
and Wireless through AS 3561. These ASes were chosen to repre-
sent a modestly multihomed customer; the same performance and
security levels should apply to any similarly connected customer.
The speciﬁc period chosen includes the substantial BGP UPDATE
trafﬁc that resulted from the SQL Slammer worm. We chose that
time to best reﬂect the security and performance of the routing pro-
tocol under heavy load.
5.1 Security Evaluation
To evaluate the security of our approach, we ﬁrst examine how SPV
prevents several attacks, such as falsely aggregating or deaggregat-
ing and falsely originating a route to a preﬁx. We then use statistical
analysis to determine the effectiveness of our ASPATH protector
and our truncation prevention schemes. Finally, we compare the
security of SPV to that provided by S-BGP.
5.1.1 SPV Security against Attacks
Security against Signature Forgery. For the two most serious
attacks that we want to protect, the attacker needs to alter one-time
signatures: ASPATH modiﬁcation (in which an attacker alters the
ASNs in the ASPATH to cause a downstream BGP AS to choose a
route it would not have otherwise chosen) and truncation (in which
an attacker shortens the ASPATH to attract trafﬁc).
In both cases the attacker needs to forge at least two one-time
signatures. Consider a malicious AS M receives the ASPATH
(cid:8)A, B,C, M(cid:9). As we describe in Section 4.4,
the ﬁrst one-
time signature encodes H[e || (cid:8)A, B(cid:9)], the second one encodes
H[e || (cid:8)A, B,C(cid:9)], and the third one encodes H[e || (cid:8)A, B,C, M(cid:9)].
By inspection, it is clear that if M wants to alter the ASPATH
to (cid:8)A, B, F, M(cid:9), this change would affect two one-signatures that
it would need to alter. Similarly, if M would attempt to truncate
the ASPATH and forward ASPATH (cid:8)A, B, M, G(cid:9) to AS G, it would
also need to alter two one-time signatures. One exception to this
two signature forgery requirement is that M can replace itself with
an arbitrary ASN and add itself at the end of the resulting path; for
example, it could advertise the ASPATH (cid:8)A, B,C, H, M(cid:9). However,
because no ASN is removed, we do not see this as more powerful
than a grayhole attack, for reasons we discussed in Section 2.
We now analytically compute the security against signature
forgery, and use these results to derive the parameters n (number
of private values per one-time signature) and m (number of private
values disclosed per one-time signature). Since the security of one-
time signatures diminishes if the same private key is used for multi-
ple signatures, we consider the case where the attacker learns r sig-
natures from the same private key. Given r signatures, the expected
number of private values that are disclosed is s = n· (1−(1 − m
)r).
n
106
105
104
s
e
x
i
f
e
r
P
f
o
r
e
b
m
u
N
103
102
101
100
0
5
10
15
20
Number of Distinct ASPATHs
25
30
Figure 5: Number of distinct routes to each preﬁx.
n
m
.
(cid:6)
(cid:5)
s
m
We aim for a forgery probability around p = 2
(cid:6)
(cid:5)
With these parameters, the probability that an arbitrary message can
/
be signed given the s disclosed private values is
−11 to forge one
digital signature. Since the attacker has to change two one-time sig-
natures, and the event that the attacker can forge the signature are
independent, the probability that an attacker can forge is at most
−22. This may appear like a high probability, as an attacker
p2 = 2
could forge a signature after only 1/p2 = 222 tries. However, an
attacker cannot try that many different signatures. In the case of
truncation it would have to insert its own ASN as the last hop,
since the following AS will ensure that. In the case of ASPATH
modiﬁcation, the attacker can try at most 216 different ASNs; how-
ever, a neighbor might validate ASNs, in which case the attacker
must choose from the 214 active ASNs. In addition, if the neigh-
bor knows (through prior conﬁguration) which ASNs the attacker
may be connected through, it can ensure that the ASN preceding the
attacker is a neighbor of the attacker. Hence, the attacker’s message
−22 forgery probability may be ac-
space is so constrained that a 2
ceptable. (If the size of an UPDATE message were not constrained
to 4096 bytes, we could achieve much better security.)
Figure 5 shows a histogram of the number of distinct ASPATHs
for each preﬁx received by our hypothetical AS connected to
Level3 and Cable and Wireless on January 24, 2003. Each dis-
tinct ASPATH along which a preﬁx is received during a single
epoch gives an attacker additional private and semi-private values.
In our analysis, we conservatively do not make a distinction be-
tween private and semi-private values. We found that our AS had
at most 15 routes to 99.9% of preﬁxes, so we chose parameters
that gave relatively high security at 15 routes: when n = 256 and
m = 6, p = 1.2792 × 2
−11 for an attacker with 15 distinct routes.
The weighted average of p across all preﬁxes is 1.8069 × 2
−19.
Unfortunately, because of limitations on the size of an UPDATE
message, we can only carry 14 single-ASN signatures; that is, we
can only authenticate 15 distinct ASNs. There are two ways to
cope with this limitation. The ﬁrst is to authenticate only the ﬁrst
15 distinct ASNs. The second is to observe that future single-ASN
signatures depend on previous ASNs, so keeping only the last 14
single-ASN signatures does not reduce security unless an attacker
is willing to insert 14 bogus ASNs into the ASPATH.
Aggregation. Our aggregation mechanism is secure against pol-
icy violation because the AS performing the aggregation must in-
clude paths up itself, and must possess the ci,e value for adding
itself to each ASPATH. If it has the ci,e values for each preﬁx, then
it could continue authenticating both routes.
Multiple Origin AS. An attacker can attempt to advertise for a
preﬁx with which it has no afﬁliation. In particular, the attacker will
not have a certiﬁcate for that preﬁx (Section 4.1), so no legitimate
SPV router will accept that advertisement.
5.1.2 Resilience to Multi-Path Truncation
We evaluated the postmodiﬁcation scheme for resilience to multi-
path truncation, based on simulations on updates and routing tables
obtained from Oregon RouteViews [40] for the day of January 24,
2003. We consider two hypothetical ASes. The ﬁrst hypothetical
AS is connected to Level3 and Cable and Wireless (as in the ear-
lier evaluation); the second to three randomly selected ASes (234
(Blackrose Society), 293 (Energy Sciences Network), and 8297
(Teleglobe America)).
For a given preﬁx, an AS receives UPDATEs with several
ASPATHs ρ1, ρ2, . . . , ρi. When the AS wishes to shorten some ρF
by h hops, it needs µ(cid:3)F− j − µ(cid:3)F +h− j extra private values at each
position j from 1 to (cid:3)F − h, where (cid:3)i is the length of the path ρi.
At each of these positions, a different path ρi will contribute some
fraction of useful private values νi, j. For example, if j > (cid:3)i, then
νi, j = 1 since all private values are released. When the j-hop preﬁx
of ρF and ρi differ, νi, j = (µ(cid:3)i− j)/t, since the signatures will be
uncorrelated. Otherwise, suppose ρF and ρi are identical until hop
H ≥ j. Then the same private values were included in the single
ASN signature, and the same private values were discarded for the
ﬁrst H − j hops, so νi, j = µ(cid:3)i− j/µH− j. Given all the ASPATHs that
the attacker has, we compute the fraction of values it has at any hop
1 − νi, j, so the total probability of successful attack is
j as 1 − ∏
(cid:3)F−h∏
1 − νi, j)µ(cid:3)F − j−µ(cid:3)F +h− j . 12
(1 − ∏
When choosing µi, we know that µ0 = m and µ∞ = 0. The prob-
lem is choosing the rate at which µ declines. When µi = 0, then if
an attacker has a route i hops shorter than the one being truncated,
the attacker has all of the private values it needs. As a result, having
µi decline slowly provides better security against an attacker with
a much shorter route. However, because µi − µi+1 is smaller, an
attacker needs to produce fewer private values to truncate a route,
so an attacker with many distinct routes is more likely to succeed.
Based on simulations with a small number of schemes, we chose
µ0 = 6, µ1 = µ2 = 5, µ3 = 4, µ4 = µ5 = 3, µ6 = 2, µ7 = µ8 = 1, µ9 = 0.
j=1
i
i
For the ﬁrst AS (connected to Level3 and Cable and Wireless),
the attacker can only truncate an arbitrary ASPATH by one hop
with probability 1.5599 × 10
−3. When a path of interest is less
than 3 hops longer than the shortest path, the probability that the
attacker can truncate a single hop is at most 1.3273 × 10
−7. When
the shortest path is less than 6 hops shorter, the attacker can trun-
cate with probability at most 0.4796%. If the shortest path is less
than 10 hops shorter, the attacker truncates with probability at most
3.5900%, and the attacker always succeeds if the shortest path is
more than 10 hops shorter.
In the other AS (connected to three random ASes), the attacker
is also generally unable to truncate arbitrary ASPATHs. For exam-
ple, when the shortest path is less than 6 hops shorter, the proba-
bility of successful truncation is at most 8.1894 × 10
−5, and when
the shortest path is less than 8 hops shorter, the probability of suc-
cessful truncation is at most 0.6978%. Between 8 and 10 hops
shorter, the attacker succeeds at most 8.0707% of the time. Again,
12This analysis conservatively ignores correlations that reduce the attacker’s ability to
attack, which occur when two ASPATHs are correlated, but are not correlated to the
route being attacked.
the attacker always succeeds if the shortest path is more than 10
hops shorter.
In general, ASPATHs with 6 extra unique ASNs are unlikely
to be preferred routes. Furthermore, an attacker cannot generally
select an arbitrary ASPATH to truncate, since it has a limited prob-
ability of success, and when it is able to succeed, such success is
not repeatable in the next epoch. Finally, these evaluations show
the probability of successfully truncating the last ASN before the
attacker. Intuitively, these probabilities would be squared for trun-
cating two ASNs, since twice as many extra private values would
need to be included at each hop.
5.1.3 Comparison to S-BGP
S-BGP is designed to provide security to a preﬁx only when the
originating AS deploys S-BGP, and only to routers within a group
of contiguous deployment that reaches the origin AS. SPV, on the
other hand, attempts to provide security to any preﬁx when the
originating AS deploys SPV. In this section, we explore the se-
curity achieved by SPV and S-BGP, and suggest how asymmetric
cryptographic primitives could provide better properties than either,
though at substantial cost.
When the origin AS doesn’t deploy a secure routing protocol,
S-BGP speakers can still sign attestations, ensuring that an S-BGP
AS cannot be falsely added to the ASPATH. SPV does not achieve
any properties in this case.
When an origin AS doesn’t deploy secure routing, but all of its
peers do, both S-BGP and SPV can, with the permission of the ori-
gin AS, secure the origin’s preﬁx. In SPV, a single entity computes
the private keys, and signs each peer’s ASN into every UPDATE
that would be protected by that private key. A peer is then un-
able to spoof being another peer. In S-BGP, threshold cryptogra-
phy could be used, wherein peers together generate a key for the
non-deploying AS, and use a separate protocol to sign UPDATEs
for each other.
Within a contiguous group of deploying ASes, S-BGP ensures
that each AS on the ASPATH has been transited by the UPDATE,
and that ASNs cannot be dropped from the ASPATH. In SPV, an
attacker controlling two ASes can insert bogus ASNs between its
two ASNs. In addition, as an AS receives several UPDATEs from a
single preﬁx within the same epoch, it can with increasing proba-
bility truncate the longer paths (but generally not the shorter ones)
and insert itself into the path. Section 5.1.2 analyzes the effective-
ness of multi-path truncation prevention.
An UPDATE that has traversed a non-deploying AS loses some