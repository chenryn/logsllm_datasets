Communication
Service Confusion
16/277(5.78%)
38/676(5.62%)
33/1027(3.21%)
10/455(2.20%)
13/719(1.81%)
8/533(1.50%)
NA
5/381(1.31%)
User Confusion
157/184(85.33%)
383/497(77.06%)
605/790(76.58%)
258/359(71.87%)
349/574(60.80%)
285/371(76.82%)
21/37(56.76%)
176/274(64.23%)
PendingIntent
50/277(18.05%)
116/676(17.16%)
151/1027(14.70%)
46/455(10.11%)
90/719(12.52%)
87/533(16.32%)
3/320(0.94%)
49/381(12.86%)
Overall
181/277(65.34%)
449/676(66.42%)
724/1027(70.50%)
291/455(63.96%)
395/719(54.94%)
333/533(62.48%)
23/320(7.19%)
207/381(54.33%)
Table 4: GooglePlay App Vulnerability Based on Category
(Baidu, Gfan, Mumayi, Appchina and Xiaomi), 75.7% are vulner-
able, with the leading cause of insecure broadcast channels (unpro-
tected receiver or broadcast without target package). Among all
the Google-Play apps, 24.8% are problematic, with most of them
suffering from the lack of User-ID checks. It is interesting to see
that the geographic split also brings in a discrepancy in the types
of vulnerabilities among those apps: Chinese apps are completely
free from the service confusion problems (e.g., integration of both
GCM and ADM), as they typically just incorporate a single ser-
vice, while only a small set of apps on Google Play have the IPC
problems. When it comes to push-messaging services, Table 7
shows that also more than half of them are vulnerable. Particularly,
most service SDKs in China have security weaknesses, the main
cause for the pervasiveness of vulnerable apps there. 4 syndication
services also contain different kinds of problems.
Consequences. When we look at the categories of the apps that
tend to be problematic, as illustrated in Table 3, it is alarming to see
that all those with sensitive user data appear on the top. 50 - 70%
of the Google-Play apps for business, shopping, medical, health, ﬁ-
nance, communication and social are found to be riddled with loop-
holes, mostly caused by missing User-ID checks (55 - 85%). Also
10 - 18% of these apps expose PendingIntent, which essen-
tially allows a malicious app to inject any content to their receivers
and intercept all of their users’ private messages through replacing
their registration IDs with that of an attack device. In addition, over
5% of medical and shopping apps have the service confusion prob-
lem, vulnerable to message injection from the malicious apps that
impersonate the messaging service app not on the victim’s device.
Note that this ratio is higher than the average (2.17%).
The consequences of the attacks are dire. Once successfully ex-
ploiting target apps’ User-ID or service-confusion weaknesses, the
adversary can fake messages and post them to the victim’s apps
(Pinterest, Yelp etc.). Also through the PendingIntent bound
to the attack device, private user information like chat messages,
ﬁnancial information, etc. will be delivered to the adversary. For
tens of thousands of apps in the Chinese markets, their vulnerable
IPCs may enable both injection of misleading messages and dis-
closure of conﬁdential user data. Table 8 presents examples of the
information assets at risk in the presence of successful attacks.
Impact and trend. The impacts of the vulnerabilities we discov-
ered are signiﬁcant: from Table 4, we can see that over 23% of
the popular apps (each with more than 1 million downloads ) are
vulnerable, which includes 6 (such as Facebook, Skype) being in-
Service
Type
Urban Airship
PushIO
Syndication
Syndication
Push Woosh
Syndication
Pushapps
Baidu
Getui
Xiaomi
XG Push
Bmob
Yunba
Zhiyou
Mpush
LeanCloud
Umeng
JPush
Shengda Push
Huawei
Syndication
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Third-Party
Weaknesses
Service Confusion
Insecure Broadcast Channel/
CID Exposure/Service Confusion
Insecure Broadcast Channel/
CID Exposure
CID Exposure
Insecure Broadcast Channel
Insecure Broadcast Channel
Insecure Broadcast Channel
Insecure Broadcast Channel/
CID Exposure
Insecure Broadcast Channel
Insecure Broadcast Channel
Insecure Broadcast Channel
Insecure Broadcast Channel/
CID Exposure
Insecure Broadcast Channel
Insecure Broadcast Channel/
CID Exposure(risk)
Insecure Broadcast Channel
CID Exposure
Insecure Broadcast Channel
Table 7: Push-Messaging Services Weaknesses
App
Downloads
Vul type
Sample Contents at Risk
Facebook
Skype
Pinterest
Yelp
Linkedin
eBay
500M+
100M+
10M+
10M+
10M+
50M+
Service Confusion
Service Confusion
User Confusion
User Confusion
PendingIntent
PendingIntent
Messages
Messages
Messages
Messages
Invitation, Messages
Shipment, Messages
Table 8: Examples of Vulnerable Popular Apps
stalled over 100 million times. Also interestingly, the service con-
fusion problem tends to occur in the apps either extremely popular
(above 100 million downloads) or no one uses (below 100 installs).
Speciﬁcally, over 3% of the apps with more than 1 million down-
loads have the problem, in contrast to 1.7% among those with 100
- 1 million downloads. This could be explained by the observation
that those popular apps are more likely to integrate multiple push-
messaging services and therefore more exposed to this security risk.
In the meantime, over 8% of the least popular apps also contain the
security ﬂaws. It turns out that they were all built on the templates
developed by the companies like app4mobile and conduit, which
integrate multiple push-messaging services.
Also we found that popular apps are more likely to disclose
PendingIntent than less popular ones, as illustrated in Table 4.
Such disclosure almost always happens to those using the vulnera-
1269ble GCM template [5]. Apparently, Google needs to do more to ﬁx
this problem. The only ﬂaw distributed more in line with what is
expected is the User-ID confusion: the more popular the apps are,
the less likely they have this issue. On the other hand, as discussed
before (Section 4.1), still high-proﬁle apps like Pinterest (10M+
downloads) and Yelp (10M+ downloads) contain this ﬂaw.
5. RELATED WORK
Security analysis of push-messaging services. Little has been
done on evaluating the security qualities of push-messing services
until very recently, when researchers took a close look at the GCM,
ADM, UrbanAirship and a Chinese Push Cloud [28]. What have
been found include the security-critical vulnerabilities in GCM’s
cloud-side security checks and a few client-side problems mostly
caused by exposure of PendingIntent. Different from this
prior work, which is based upon manual analysis of a small set
of services and apps, our research is much deeper and broader: we
built an automatic analysis tool and ran it to scan 30 popular cloud-
messaging services and 35,173 popular apps; we found 17 vulnera-
ble SDKs and 17,668 faulty apps (including high-proﬁle ones such
as Facebook, Skype, Baidu, etc.), with a signiﬁcant portion of them
involving previously unknown security ﬂaws.
Android ICC security. The security issues of Android IPC or
more precisely Inter-Component Communication (ICC) have been
extensively studied. Comdroid [15] and other work [18, 17] inves-
tigate the Intent-based attack surface, including the insecure broad-
cast channel issue. Other prior work identiﬁes different kinds of
risks in the ICC channel, including information leaks and pollution
in content provider [38], permission re-delegation problems [20]
and capability leaks [29, 23]. Different from these prior studies,
what we want to understand here is the security implications of the
ICC vulnerabilities to push-messaging services. For this purpose,
we developed a unique analysis technique, which utilizes the an-
chor discovered from sample code to backtrack all the ICC calls
that pass the message received by an SDK to its hosting app and
inspect their security settings. Also, the understanding of the un-
protected receivers and other ICC interfaces has also been put in the
context of push-messaging service: for example, our study reveals
a design ﬂaw in Baidu Cloud Push (Section 4.1), which actually
deliberately exposes an app’s ICC receiver for coordinating differ-
ent apps integrating its SDK. When it comes to PendingIntent,
prior research brieﬂy mentions the lack of origin information within
the Intent mechanism [33], which forces the app developer to uti-
lize PendingIntent to provide the origin of an ICC request.
Our prior research [28] ﬁrst demonstrates the security impacts of
such exposures on push-messaging services. However, never be-
fore has any effort been made to automatically detect such a vul-
nerability, as we did in our research. Furthermore, the service con-
fusion problem has never been studied before: unlike the prior work
that focuses on unprotected components, here we look at the situ-
ation where the permissions for protecting these components are
completely missing in a system.
Static analysis on Android. How to statically analyze Android
system components and app code has been studied for years. Many
tools have been built to identify vulnerabilities [15, 29, 16, 19, 25,
32, 31], privacy leaks [21, 37, 36, 22, 34, 35] and malware [39,
13, 24]. Particularly, many systems are designed to detect ICC
vulnerabilities. For example, Comdroid [15] detects multiple in-
tent related vulnerabilities. Chex [29] analyzes permission, capa-
bility and privacy data leakage caused by unprotected components.
ContentScope [38] detects the vulnerabilities in content providers.
Woodpecker analyzes the ICC vulnerabilities in the preloaded apps
from ﬁrmware. Compared to these prior studies, our work focuses
on ICC vulnerabilities in push messaging service SDKs and their
integrations within apps, and proposes novel sample code guided
analysis techniques to detect unprotected ICC interfaces. Further,
data ﬂow analysis is widely used in static analysis of mobile appli-
cations. Particularly, Amandroid [34] constructs the Inter-component
Data Flow Graph (IDFG) and data dependence graph (DDG) to de-
tect data ﬂow. DroidSafe [22] builds a model for Android runtime
named Android Device Implementation (ADI) and performs an in-
formation ﬂow analysis using the model. FlowDroid [14] is a pre-
cise static taint analysis tool for Android apps, which we utilized to
build Seminal. Its problem is the limited capability to handle ICC
(IPC as discussed in the paper).
ICC inference (for linking call
sites to their handlers) is the focus of Epicc [30], which has been
combined with FlowDroid in the systems like Didfail [26] and Ic-
cTA [27] to enable both inter-component and intra-component data
ﬂow analysis. However, these generic data ﬂow analysis tools aim
at evaluating the whole app, instead of just the integration part we
are interested in. As a result, they are not efﬁcient for our pur-
pose. By comparison, the unique design of Seminal, particularly
the anchor-based, layered security analysis (Section 3.3), making
it potentially much more efﬁcient than those generic tools when
analyzing push-messaging integrations.