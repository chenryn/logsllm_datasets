support vulnerable module analysis, patch code complexity
analysis, and patch code pattern analysis. We will illustrate
them in subsequent subsections.
Challenges. Since we are the first to study Android system
vulnerabilities in an automatic fashion, there are some unique
challenges. Notably, our three analyzers face the challenges on
effectively pinpointing vulnerability modules (§3.2), robustly mea-
suring patch code complexity (§3.3), and automatically clustering
vulnerability patterns (§3.4), respectively. Before explaining these
challenges in detail and our methods of overcoming them, we first
show in §3.1 how we store all the text and code information of each
Android vulnerability in an organized and searchable structure.
3.1 Designing a Hierarchical Database
Structure
The first challenge is in representing vulnerabilities’ text and code
information in a way that analysts can directly make SQL queries
to retrieve the desired vulnerability information without writing
additional scripts. This is challenging because we notice that 1) an
Bulletin CrawlerVulnerabilityMetadata DBPatch code WebsitesBulletinWebsitesPatch CrawlersPatch code DatabaseCleanerCleaned DatabaseAnalysis ResultsIdentifying Vulnerable ModulesExtracting and Counting Diff CodeClustering Patch Code PatternsAnalyzersOne vulnerability record in the metadata DBTwo corresponding records in the patch code DBOne or more code fragments in each JSON block{"cmds/servicemanager/service_manager.c":[{"line":3, "code":[["A","if(uid>= AID_APP) {"],["A","return0;"],["A","}"]]}]}{"cmds/servicemanager/Android.mk":[{"line":1,"code":[["D","LOCAL_SHARED_LIBRARIES := libloglibselinux"], ["A","LOCAL_SHARED_LIBRARIES := libloglibcutilslibselinux"]]}], "cmds/servicemanager/service_manager.c":[{"line":1, "code":[["D","if(uid>= AID_APP) {"], ["A","if(multiuser_get_app_id(uid) >= AID_APP) {"]]}]}Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand297Android vulnerability might be associated with several patches;
2) one patch may include several affected code files; 3) one code
file may contain multiple patched code fragments; and 4) one code
fragment usually covers several code lines.
We propose to build a hierarchical database structure and use
a carefully designed nested JSON [1] format to represent patched
code in a hierarchical way. Figure 3 shows the high-level picture of
our hierarchical database structure using a specific vulnerability
example (CVE-2016-3900). We first use a database table to record
all the metadata of this vulnerability, as mentioned earlier in the
bulletin crawler component. Since CVE-2016-3900 involves two
patches, we then save the information of both patches in the patch
code database and point them to the corresponding row id (1586 in
this example) in the metadata database. Finally, we design a nested
JSON format to represent all diff code of each patch. In this way,
we use only one database field (“DiffCode” in Figure 3) to cover the
patch code and avoid having to dynamically extend the database.
In each JSON, we use code name as the JSON key and use nested
arrays to record each code and their code fragments. Figure 3 shows
the two JSON examples of CVE-2016-3900, one with one code file
and the other with two. Here all the three pieces list only one code
fragment each, but it is possible that multiple fragments occur in a
single patch code.
With this hierarchical database structure, we are able to com-
pose complex search of the vulnerability database directly in SQL
queries. Listing 1 demonstrates one query example that counts the
median number of code fragments in each patched code file. We use
SQLite’s JSON1 extension [10] to handle nested JSON. For exam-
ple, in Listing 1, we use the json_each() API to decompose each
“DiffCode” field into a key-value row, where the key refers to the
code file name and the value is a nested array of code fragments.
We thus can use the key field to exclude assembly code files and
use json_array_length(value) to further count code fragments.
In this way, we can obtain the vulnerability search results (e.g., the
median number of per-file code fragments is 2) without writing
dedicated scripts.
Listing 1: A SQL query example of searching the database.
select median ( json_array_length ( value ))
from PatchTable , json_each ( PatchTable . DiffCode )
where PatchTable . DiffCode like ' {%} '
and key not like '%. s ';
3.2 Identifying Vulnerable Modules
Classifying vulnerabilities by different Android modules can shed
light on the system modules that are most susceptible and thus
require more security attention. Therefore, we include a dedicated
analyzer in our analysis framework to identify vulnerable Android
modules. However, it is challenging because there is no clear mod-
ule information in CVE reports. As a result, previous work [52]
employed two manpower to manually inspect the 660 Android
vulnerabilities in their dataset.
We propose a lightweight technique that leverages two useful
features of Android Bulletin reports to locate the affected modules
of given vulnerabilities. The first is the patch code paths for those
with publicly available patches, which could imply the module
information. However, the full code paths are often too detailed,
e.g., platform/system/bt/bta/dm/bta_dm_act.cc in CVE-2018-
9355. Fortunately, we found that the Android Security team has
embedded the high-level module path information in patch URLs.
For example, the patch URL of CVE-2018-9355 is https://android.
googlesource.com/platform/system/bt/+/99a263, in which we
can extract the path platform/system/bt (meaning the Bluetooth
stack according to the patch code website [13]) as the affected
module.
Since around half of the vulnerabilities in our dataset have no
publicly available patches, we still need to find another way to iden-
tify vulnerable modules. Moreover, the module path information
of some URLs are coarse-grained, e.g., the aforementioned CVE-
2016-3900 only shows platform/frameworks/native in its patch
URL. Our technique thus leverages the second feature: the Android
Bulletin webpage itself contains certain pattern that records the
module information input by the Android Security team. For in-
stance, in the bulletin webpage shown in Figure 1, we can locate the
HTML field  for CVE-2016-
3900, where “eopv” is the vulnerability type and “servicemanager”
pinpoints the module.
3.3 Extracting and Counting Diff Code
Our second analysis objective is to study the complexity of Android
patch code, and it requires a robust method to extract the “real”
patch diff code and count their line change. This is because not
all modified code lines in a patch are for the vulnerability fix and
some are only auxiliary, e.g., the #include statements in C/C++,
the import statements in Java, and also many comment statements.
Before dealing with those auxiliary code lines, we need to extract
patch code fragments (i.e., contiguous lines of code [40]) from the
raw HTML files and organize them in the format shown in Figure 3.
We first use Selenium [14] to locate the code diff fields [6], i.e.,
“add”, “del”, “ctx”, and “hunk”, in the patch HTML files. We then
use “add”/“del” as the indicators to count contiguous code lines and
use “ctx”/“hunk” as the stop words. In the meantime, we count the
number of line changes for each code fragment as
countFraд = max (countAdd, countDel )
where countAdd and countDel are the total numbers of lines added
or deleted (note that the auxiliary code lines have been excluded
when performing the counting). The number of line changes in a
code fragment, countFraд, is the maximum of the two since any
single line change could contribute to both addition and deletion.
With each individual countFraд counted in a code fragment, the
line change of a file, countFile, is then the corresponding sum.
When counting the number of code line changes, we exclude
the auxiliary code lines as follows. First, the blank lines, after strip-
ing the “+”/“-” symbols and various whitespaces, are eliminated.
Second, the include and import statements in C/C++ and Java are
not taken into consideration when studying the complexity of a
patch. Third, we remove comment statements, some of which are
not easy to be recognized. For example, we need to track forward
across multiple lines to pinpoint the end of a comment block that
uses /* ...*/ in C/C++/Java or  in XML. Moreover, some
comment blocks are only partially shown in the diff files (e.g., not
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand298Figure 4: A high-level overview of our similarity-based algorithm to automatically generate patch code clusters.
Table 1: Examples illustrating how we extract patch code’s essential changes.
ID Diff Code
C1
- dest.writeLong(mSubId);
+ dest.writeInt(mSubId);
- uint8_t len = 0;
+ uint32_t len = 0;
- void lim_compute_crc32(uint8_t *pDest, uint8_t *pSrc, uint8_t len);
+ void lim_compute_crc32(uint8_t *pDest, uint8_t *pSrc, uint16_t len);
- const sp& cs = getCameraService();
+ const sp cs = getCameraService();
- pr_debug(‘%s: ndx=%d base=%p’, __func__, ctrl->ndx, ctrl->base);
- pr_debug(‘%s: ndx=%d base=%pK’, __func__, ctrl->ndx, ctrl->base);
- uint64_t slotMask;
+ uint64_t slotMask = 0;
- runtime.start("com.android.internal.os.RuntimeInit", args);
+ runtime.start("com.android.internal.os.RuntimeInit", args, zygote);
- return true;
+ return false;
- if(value >= ps_sps->i4_pic_size_in_ctb)
+ if(value >= ps_sps->i4_pic_size_in_ctb || value  writeInt
uint8_t --> uint32_t
uint8_t --> uint16_t
sp&
--> sp
%p --> %pK
--> = 0
--> , zygote
return true
--> return false
if --> if || value  #define 64
starting with “/*” but with “*”), which require us to track the subse-
quent lines for determining whether the current line is a comment
statement or not.
Besides the auxiliary code lines, we found that some patches
also include test code. For example, CVE-2017-13176 includes core/
tests/coretests/src/android/net/UriTest.java [4] which should
not be counted when calculating patch complexity. To remove the
impact of such test code, we simply use the keyword “Test” or “test”
to exclude the test code without affecting the normal one.
3.4 Clustering Patch Code Patterns
In the last and most important analyzer, we aim to automatically
cluster Android patch code to reveal system developers’ common
coding mistake patterns. Specifically, our objective is to cluster
(patch) code-level patterns, such as changes in an integer type from
uint8_t to uint32_t and changes in a character of printing kernel
addresses from %p to %pK. These patterns, after interpreting with
security knowledge, can reflect the root causes of corresponding
vulnerabilities, e.g., inappropriate usage of pointer %p in kernel
address printing could signal information leakage. Figure 4 depicts
a high-level overview of our similarity-based algorithm, which is
comprised of three major steps as follows.
First, different from code clone detection approaches [17, 39, 40,
43, 44, 49–51, 71] that typically compare multiple versions of the
same code piece or code from multiple software, we need to extract
“diff of the diff” from code fragments. More specifically, we extract
patch code’ essential changes that not only concisely reflect syntax-
level changes but also maintain important semantic information
by keeping change-related tokens. Table 1 shows various exam-
ples to illustrate how we extract essential changes of patch code.
For example, in code C1, we not only extract syntax-level change
(i.e., Long to Int) but also keep the full token (i.e., function name
in this example) to capture change-related semantic. Similarly, in
code C2 and C3, the essential change we extracted is uint8_t to
uint16|32_t, which is much more concise than the original diff
code and also more meaningful than the syntax-only change (i.e., 8
to 16|32). The only special handling is that we add keywords for
return, if, and define statements (see code C8 to C10) to better
maintain their semantic changes.
To express each code change into one code text, we employ a
special character “-->” to represent the change process. For code
fragments that are fully added or deleted, we simply use their
original JSON format shown in Figure 3, which clearly marks the
added or deleted code lines. Note that we currently focus only
Diff Code Fragmentsuint8_t --> uint32_tuint8_t --> uint16_twriteLong--> writeInt…--> = 0if --> if || value  %pK[[ 1.                  0.96774193 ...,  0.67603485  0.72013858][ 0.96296296  1. ...,  0.68240740  0.58308895][ 0.97530864  0.95238095 ...,  0.68954248  0.63878788]..., [ 0.58308895  0.63878788 ...,  0.99649122  0.75048875][ 0.59872153  0.59206192 ...,  1.                  0.98518518][ 0.57966764  0.56245791 ...,  0.99649122  1.                ]]Extract essential changesCalculatepairwisesimilarityCluster N%p --> %pK%p --> %pK%p --> %pK%p --> %pK…%p --> %pK%p --> %pKCluster 1uint8_t --> uint32_tuint8_t --> uint16_t…uint8_t --> uint16_t………Generate clusters via affinity propagationSession 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand299on short code fragments, since our objective is to reveal common
coding mistake patterns that are usually not complicated. We leave
as our future work to cluster complex vulnerability patterns that
involve long code fragments.
Second, with extracted code change texts, we then calculate
their pairwise similarity to generate a large similarity matrix, as
shown in Figure 4. Each row of this matrix is a vector of similarity
scores between one code change text and all the others. The simi-
larity score is represented as a string distance. There are multiple
string distance metrics, and we tested four common ones includ-
ing Jaro distance, Jaro-Winkler distance, Levenshtein distance, and
Damerau-Levenshtein distance. We found that Jaro-Winkler dis-
tance is the most suitable string distance metric in our problem
context — clustering using Levenshtein or Damerau-Levenshtein
distance can generate only one cluster, and Jaro distance does not
perform well in some situations (e.g., clustering memset() usages).
Third, we automatically generate patch code clusters according
to the matrix. We choose affinity propagation [31] as our clustering
algorithm because it does not require pre-estimation of the number
of clusters as in k-means or k-medoids clustering algorithms. To
obtain good clustering results, we first did tests to find affinity
propagation’s optimal damping factor [15] at 0.9 in our problem
context. Note that such parameter tuning is simple and performed
only once.
4 ANALYSIS RESULTS
In this section, we present our analysis results of Android system
vulnerabilities. We first introduce the dataset and vulnerability
metadata in §4.1, then describe our analysis results of vulnerable
modules, patch code complexity, and patch code patterns from §4.2
to §4.4, and finally discuss their implications in §4.5.
4.1 Dataset and Vulnerability Metadata
Till we initiated the analysis in June 2018, we have collected the
information of 2,179 vulnerabilities on the Android Security Bulletin
program and their 1,349 publicly available patches (from 1,158
distinct vulnerabilities). These vulnerabilities include all Android
vulnerabilities reported over around three years (from August 2015
to June 2018). For vulnerability clustering, we extract a total of 940
short code fragments from these 1,349 patches.
Table 2 shows four major vulnerability types and four levels
of vulnerability severity that are defined by the Android Security
team. Among all the vulnerability types, we can see that the EoP