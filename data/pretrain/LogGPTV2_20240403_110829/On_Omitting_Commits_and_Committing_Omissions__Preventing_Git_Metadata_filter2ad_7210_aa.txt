title:On Omitting Commits and Committing Omissions: Preventing Git Metadata
Tampering That (Re)introduces Software Vulnerabilities
author:Santiago Torres-Arias and
Anil Kumar Ammula and
Reza Curtmola and
Justin Cappos
On Omitting Commits and Committing Omissions: 
Preventing Git Metadata Tampering That  
(Re)introduces Software Vulnerabilities
Santiago Torres-Arias, New York University; Anil Kumar Ammula and Reza Curtmola,  
New Jersey Institute of Technology; Justin Cappos, New York University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/torres-arias
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX On omitting commits and committing omissions:
Preventing Git metadata tampering that (re)introduces software vulnerabilities
Santiago Torres-Arias† Anil Kumar Ammula‡, Reza Curtmola‡ ,
PI:EMAIL
PI:EMAIL
PI:EMAIL
Justin Cappos†
PI:EMAIL
†New York University, Tandon School of Engineering
‡Department of Computer Science, New Jersey Institute of Technology
Abstract
Metadata manipulation attacks represent a new threat
class directed against Version Control Systems, such as
the popular Git. This type of attack provides inconsis-
tent views of a repository state to different developers,
and deceives them into performing unintended opera-
tions with often negative consequences. These include
omitting security patches, merging untested code into a
production branch, and even inadvertently installing soft-
ware containing known vulnerabilities. To make matters
worse, the attacks are subtle by nature and leave no trace
after being executed.
We propose a defense scheme that mitigates these at-
tacks by maintaining a cryptographically-signed log of
relevant developer actions. By documenting the state
of the repository at a particular time when an action is
taken, developers are given a shared history, so irregu-
larities are easily detected. Our prototype implementa-
tion of the scheme can be deployed immediately as it is
backwards compatible and preserves current workflows
and use cases for Git users. An evaluation shows that
the defense adds a modest overhead while offering sig-
nificantly stronger security. We performed responsible
disclosure of the attacks and are working with the Git
community to fix these issues in an upcoming version of
Git.
1
Introduction
A Version Control System (VCS) is a crucial compo-
nent of any large software development project, present-
ing to developers fundamental features that aid in the
improvement and maintenance of a project’s codebase.
These features include allowing multiple developers to
collaboratively create and modify software, the ability to
roll back to previous versions of the project if needed,
and a documentation of all actions, thus tying changes in
files to their authors. In this manner, the VCS maintains
a progressive history of a project and helps ensure the
integrity of the software.
Unfortunately, attackers often break into projects’
VCSs and modify the source code to compromise hosts
who install this software. When this happens, an at-
tacker can introduce vulnerable changes by adding (e.g.,
adding a backdoor), or removing certain elements from
a project’s history (e.g., a security patch) if he or she ac-
quires write access to the repository. By doing this, at-
tackers are usually able to compromise a large number
of hosts at once [42, 27, 13, 21, 15, 4, 45, 18, 44]. For
example, the Free Software Foundation’s repository was
controlled by hackers for more than two months, serv-
ing potentially backdoored versions of GNU software to
millions of users [16].
The existing security measures on VCSs, such as com-
mit signing and push certificates [19, 2], provide lim-
ited protection. While these mechanisms prevent an at-
tacker from tampering with the contents of a file, they do
not prevent an attacker from modifying the repository’s
metadata. Hence, these defenses fail to protect against
many impactful attacks.
In this work, we reveal several new types of attacks
against Git, a popular VCS. We collectively call these at-
tacks metadata manipulation attacks in which Git meta-
data is modified to provide inconsistent and incorrect
views of the state of a repository to developers. These
attacks can be thought of as reconcilable fork attacks be-
cause the attacker can cause a developer’s version of the
repository to be inconsistent just for a finite window of
time — only long enough to trick a developer into com-
miting the wrong action — and leave no trace of the at-
tack behind.
The impact of an attack of this nature can be substan-
tial. By modifying the right metadata, an attacker can
remove security patches, merge experimental code into a
production branch, withhold changes from certain users
before a release, or trick users and tools into installing
a different version than the one requested to the VCS.
To make matters worse, the attacker only requires a few
resources to achieve his or her malicious goals.
USENIX Association  
25th USENIX Security Symposium  379
1
We have submitted a vulnerability disclosure to CERT
and the GitHub security team describing the following
scenario: an attacker capable of performing a man-in-
the-middle attack between a GitHub [3] server and a de-
veloper using pip to install Django (a popular website
framework) can trick the developer into installing a vul-
nerable version simply by replacing one metadata file
with another. Even though Git verifies that the signature
in Git objects is correct, it has no mechanism to ensure
it has retrieved the correct object. This type of attack
enables a malicious party to strike any system that can
retrieve packages from Git repositories for installation,
including Node’s NPM [22], Python’s pip [11], Apache
Maven [34], Rust’s cargo [35], and OCaml’s OPAM [33].
As such, it could potentially affecting hundreds of thou-
sands of client devices.
To mitigate metadata manipulation attacks, we de-
signed and implemented a client-only, backwards-
compatible solution that introduces only minimal over-
head. By storing signed reference state and developer
information on the server, multiple developers are able
to verify and share the state of the repository at all times.
When our mechanism is in place, Git metadata manipula-
tion attacks are detected. We have presented these issues
to the Git developer community and prepared patches —
some of which are already integrated into Git — to fix
these issues in upcoming versions of Git.
In summary, we make the following contributions:
• We identify and describe metadata manipulation at-
tacks, a new class of attacks against Git. We show
these attacks can have a significant practical impact
on Git repositories.
• We design a defense scheme to combat metadata
manipulation attacks by having Git developers share
their perception of the repository state with their
peers through a signed log that captures their his-
tory of operations.
• We implement the defense scheme and study its effi-
ciency. An evaluation shows that it incurs a smaller
storage overhead than push certificates, one of Git’s
security mechanisms. If our solution is integrated
in Git, the network communication and end-to-end
delay overhead should be negligible. Our solution
does not require server side software changes and
can be used today with existing Git hosting solu-
tions, such as GitHub, GitLab, or Bitbucket.
2 Background and related work
2.1 Overview of Git
In order to understand how Git metadata manipulation
attacks take place, we must first define Git-specific termi-
nology, as well as some usage models of the tool itself.
Git is a distributed VCS that aids in the development
of software projects by giving each user a local copy
of the relevant development history, and by propagat-
ing changes made by developers (or their history) be-
tween such repositories. Essential to the version history
of code committed to a Git repository are commit ob-
jects, which contain metadata about who committed the
code, when it was committed, pointers to the previous
commit object, (the parent commit) and pointers to
the objects (e.g., a file) that contain the actual commit-
ted code.
Branches serve as “pointers” to specific commit ob-
jects, and to the development history that preceded each
commit. They are often used to provide conceptual sep-
aration of different histories. For example, a branch ti-
tled “update-hash-method” will only contain objects that
modify the hash method used in a project. When a de-
veloper adds a new commit to the commit chain pointed
to by a branch, the branch is moved forward.
Inside Git, branches are implemented using “refer-
ence” files, that only contain the SHA1 hash of a target
commit. The same format is used for Git tags, which are
meant to point to a static point in the project’s history.
Both tags and branches live in the .git/refs folder.
Git users commit changes to their local repositories,
and employ three main commands to propagate changes
between repositories: fetch, to retrieve commits by
other developers from a remote repository; merge, to
merge two changesets into a single history; and push,
to send local commits from a local repository to a re-
mote repository. Other common commands may consist
of two or more of these commands performed in conjunc-
tion (e.g., pull is both a fetch and a merge). Consider
the following example:
Alice is working on a popular software project and
is using Git to track and develop her application. Al-
ice will probably host a “blessed” copy of her repos-
itory in one provider (e.g., GitHub or Gitlab) for ev-
eryone to clone, and from which the application will
eventually be built.
In her computer, she will keep a
clone (or copy) of the remote repository to work on a
new feature. To work on this feature, she will create
a new branch, #5-handle-unicode-filenames
that will diverge from the master branch from now on.
As she modifies files and updates the codebase, she com-
mits – locally – and the updates will be added to the new
branch in her local clone. Once Alice is done adding the
feature, she will push her local commits to the remote
server and request a colleague to review and merge her
changes into the master branch. When the changes are
merged, Alice’s commits will become part of the mas-
ter history and, on the next release cycle, they will be
shipped in the new version of the software.
380  25th USENIX Security Symposium 
USENIX Association
2
2.1.1 Git security features
To ensure the integrity of the repository’s history, Git
incorporates several security features that provide a basic
defense layer:
• Each commit object contains a cryptographic hash of
its parent commit. In addition, the name of the file that
contains the commit object is the cryptographic hash of
the file’s contents. This creates a hash chain between
commits and ensures that the history of commits can-
not be altered arbitrarily without being detected.
• Users have the option to cryptographically sign a com-
mit (a digital signature is added to the commit object)
using a GPG key. This allows an auditor to unequiv-
ocally identify the user who committed code and pre-
vents users from repudiating their commits.
• A signed certificate of the references can be pushed to a
remote repository. This “push certificate” solution ad-
dresses man-in-the-middle attacks where the user and
a well-behaving server can vouch for the existence of
a push operation.
2.2 Related work
VCS Security. Wheeler [39] provides an overview of
security issues related to software configuration man-
agement (SCM) tools. He puts forth a set of secu-
rity requirements, presents several threat models (in-
cluding malicious developers and compromised reposi-
tories), and enumerates solutions to address these threats.
Gerwitz [17] provides a detailed description of creating
and verifying Git signed commits. Signing commits al-
lows the user to detect modifications of committed data.
Git incorporates protection mechanisms, such as commit
signing and commit hash chaining. Unfortunately, they
do not prevent the attacks we introduce in this work.
There have been proposals to protect sensitive data
from hostile servers by incorporating secrecy into both
centralized and distributed version control systems [1,
29]. Shirey et al. [32] analyzes the performance trade-
offs of two open source Git encryption implementations.
Secrecy from the server might be desirable in certain sce-
narios, but it is orthogonal to our goals in this work.
The “push certificate” mechanism, introduced in ver-
sion 2.2.0 of Git, allows a user to digitally sign the refer-
ence that points to a pushed object. However, push cer-
tificates do not protect against most of the attacks we de-
scribe in this work. Furthermore, push certificates were
designed for out-of-band auditing (i.e.
they are not in-
tegrated into the usual workflow of Git and need to be
fetched and verified by a trusted third party using out-
of-band mechanisms). As a result, push certificates are
rarely used in practice.
Fork Consistency. A problem that could arise in remote
storage used for collaborative purposes is when the un-
trusted storage server hides updates performed by one
group of users from another. In other words, the server
equivocates and presents different views of the history of
operations to different groups of users. The fork consis-
tency property seeks to address this attack by forcing a
server that has forked two groups in this way to continue
this deception. Otherwise, the attack will be detected as
soon as one group sees an operation performed by the
other group after the moment the fork occurred.
SUNDR [26] provides fork consistency for a network
file system that stores data on untrusted servers.
In
SUNDR, users sign statements about the complete state
of all the files and exchange these statements through the
untrusted server. SPORC [14] is a framework for build-
ing collaborative applications with untrusted servers that
achieves fork* consistency (i.e., a weaker variant of fork
consistency). Our solution seeks to achieve a similar
property and shares similarities with SUNDR in that Git
users leverage the actual Git repository to create and
share signed statements about the state of the repository.
However, the intricacies and usage model of a VCS sys-
tem like Git impose a different set of constraints.
Other work, such as Depot [28], focuses on recovering
from forks in an automatic fashion (i.e., not only detect-
ing forks, but also repairing after they are detected). Our
focus is on detecting the metadata manipulation attacks,
after which the affected users can perform a manual roll-
back procedure to a safe point.
Caelus [25] seeks to provide the same declared his-
tory of operations to all clients of a distributed key-value
cloud store. Caelus assumes that no external communi-
cation channel exists between clients, and requires them
to periodically attest to the order and timing of operations
by writing a signed statement to the cloud every few sec-
onds. The attestation schedule must be pre-defined and
must be known to all clients. Our setting is different,
since Git developers usually communicate through mul-
tiple channels; moreover, a typical team of Git develop-
ers cannot be expected to conform to such an attestation
policy in practice.
3 Threat model and security guarantees
We make the following assumptions about the threat
model our scheme is designed to protect against:
• Developers use the existing Git signing mechanisms
whenever performing an operation in Git to stop an
attacker from tampering with files.
• An attacker cannot compromise a developer’s key
or get other developers to accept that a key con-
trolled by an attacker belongs to a legitimate devel-
oper. Alternatively, should an attacker control such
a key (e.g., an insider attack), he or she may not
USENIX Association  
25th USENIX Security Symposium  381
3
want to have an attack attributed to him- or herself
and would thus be unwilling to sign data they have
tampered with using their key.
• The attacker can read and modify any files on
the repository, either directly (i.e. a compromised
repository or a malicious developer) or indirectly
(i.e., through MITM attacks and using Git’s inter-
face to trick honest users into doing it).
• The attacker does not want to alert developers that
an attack has occurred. This may lead to out-of-
band mechanisms to validate the attacked repository
[30].
This threat model covers a few common attack sce-
narios. First of all, an attacker could have compromised
a software repository, an unfortunately common occur-
rence [42, 27, 13, 21, 15, 4, 45, 18, 44, 16]. Even
if the repository is not compromised, an attacker could
act as a man-in-the-middle by intercepting traffic des-
tined for the repository (e.g., by forging SSL certifi-
cates [23, 31, 8, 37, 43, 7, 41, 6, 38]). However, an
attacker is not limited to these strategies. As we will
show later, a malicious developer can perform many of
the same attacks without using their signing key. This
means that it is feasible for a developer inside an organi-
zation to launch these attacks and not be detected.
Note that in all cases, the developers have known sign-
ing keys to commit, push, and verify information.
3.1 Security guarantees
Answering to this threat model, the goal of a success-
ful defensive system should be to enforce the following:
• Prevent modification of committed data: If a file
is committed, an attacker should not be able to mod-
ify the file’s contents without being detected.
• Ensure consistent repository state: All developers
using a repository should see the same state. The
repository should not be able to equivocate and pro-
vide different commits to different developers.
• Ensure repository state freshness: The repository
should provide the latest commits to each developer.
As we will show later, Git’s existing security mech-
anisms fail to handle the last two properties. The ex-
isting signing mechanism for Git does enable develop-
ers to detect modification of committed data, because
the changed data will not be correctly signed. However,
due to weaknesses in handling the other properties, an
attacker can omit security patches, merge experimental
features into production, or serve versions of software
with known vulnerabilities.
An attacker is successful if he or she is able to break
any of these properties without being detected by the de-
velopers. So, an attacker who controls the repository
could block a developer from pushing an update by pre-
tending the repository is offline. However, since the de-
veloper receives an error, it is obvious that an attack is
occurring and therefore is easy to detect. Similarly, this
also precludes irreconciliable fork attacks where two sets
of developers must be permanently segregated from that
point forward. Since developers typically communicate
through multiple channels, such as issue trackers, email,
and task management software, it will quickly become
apparent that fixes are not being merged into the master
branch.
(Most projects have a tightly integrated team,
usually a single person, who integrates changes into the
master branch, which further ensures this attack will be
caught.) For these reasons, we do not focus on attacks
that involve a trivial denial of service or an irreconcilable
fork because they are easy to detect in practice.
4 Metadata manipulation attacks
Even when developers use Git commit signing, there is
still a substantial attack surface. We have identified a new
class of attacks that involve manipulation of Git meta-
data stored in the .git/refs directory of each repos-
itory. We emphasize that, unlike Git commits that can
be cryptographically signed, there are no mechanisms in
Git to protect this metadata. As such, the metadata can be
tampered with to cause developers to perceive different
states of the repository, which can coerce or trick them
into performing unintended operations in the repository.