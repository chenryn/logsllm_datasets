0x00 前言  
uHTTPd 是一个 OpenWrt/LUCI 开发者从头编写的 Web 服务器。
它着力于实现一个稳定高效的服务器，能够满足嵌入式设备的轻量级任务需求，且能够与 OpenWrt 的配置框架 (UCI) 整合。默认情况下它被用于
OpenWrt 的 Web 管理接口 LuCI。当然，uHTTPd 也能提供一个常规 Web 服务器所需要的所有功能。  
0x01 简介  
讲解uhttpd的主要原因是：uhttpd是物联网设备很常见的一个web服务器，在物联网设备漏洞挖掘的过程中，最常见的漏洞都是出现在web服务器上，如果能熟悉各个开源的web服务器的开发流程，更容易理解其他厂商的开发者是如何开发自己的web服务器，那么对物联网漏洞挖掘将事倍功半。  
下载地址： 点击 snapshot
即可下载  
0x02 主函数main
    int main(int argc, char **argv) 
    { 
            struct alias *alias; 
            bool nofork = false; 
            char *port; 
            int opt, ch; 
            int cur_fd; 
            int bound = 0; 
    #ifdef HAVE_TLS 
            int n_tls = 0; 
            const char *tls_key = NULL, *tls_crt = NULL, *tls_ciphers = NULL; 
    #endif 
    #ifdef HAVE_LUA 
            const char *lua_prefix = NULL, *lua_handler = NULL; 
    #endif 
        // 如果没有LUA插件,才会执行 
            BUILD_BUG_ON(sizeof(uh_buf) alias = strdup(optarg); 
                            alias->path = strchr(alias->alias, '='); 
                            if (alias->path) 
                                    *alias->path++ = 0; 
                            list_add(&alias->list, &conf.cgi_alias); 
                            break; 
                    case 'i': 
                            optarg = strdup(optarg); 
                            port = strchr(optarg, '='); 
                            if (optarg[0] != '.' || !port) { 
                                    fprintf(stderr, "Error: Invalid interpreter: %s\n", 
                                                    optarg); 
                                    exit(1); 
                            } 
                            *port++ = 0; 
                            uh_interpreter_add(optarg, port); 
                            break; 
                    case 't': 
                            conf.script_timeout = atoi(optarg); 
                            break; 
                    case 'T': 
                            conf.network_timeout = atoi(optarg); 
                            break; 
                    case 'k': 
                            conf.http_keepalive = atoi(optarg); 
                            break; 
                    case 'A': 
                            conf.tcp_keepalive = atoi(optarg); 
                            break; 
                    case 'f': 
                            nofork = 1; 
                            break; 
                    case 'd': 
                            optarg = strdup(optarg); 
                            port = alloca(strlen(optarg) + 1); 
                            if (!port) 
                                    return -1; 
                            /* "decode" plus to space to retain compat */ 
                            for (opt = 0; optarg[opt]; opt++) 
                                    if (optarg[opt] == '+') 
                                            optarg[opt] = ' '; 
                            /* opt now contains strlen(optarg) -- no need to re-scan */ 
                            if (uh_urldecode(port, opt, optarg, opt) < 0) { 
                                    fprintf(stderr, "uhttpd: invalid encoding\n"); 
                                    return -1; 
                            } 
                            printf("%s", port); 
                            return 0; 
                            break; 
                    /* basic auth realm */ 
                    case 'r': 
                            conf.realm = optarg; 
                            break; 
                    /* md5 crypt */ 
                    case 'm': 
                            printf("%s\n", crypt(optarg, "$1$")); 
                            return 0; 
                            break; 
                    /* config file */ 
                    case 'c': 
                            conf.file = optarg; 
                            break; 
    #ifdef HAVE_LUA 
                    case 'l': 
                    case 'L': 
                            if (ch == 'l') { 
                                    if (lua_prefix) 
                                            fprintf(stderr, "uhttpd: Ignoring previous -%c %s\n", 
                                                    ch, lua_prefix); 
                                    lua_prefix = optarg; 
                            } 
                            else { 
                                    if (lua_handler) 
                                            fprintf(stderr, "uhttpd: Ignoring previous -%c %s\n", 
                                                    ch, lua_handler); 
                                    lua_handler = optarg; 
                            } 
                            if (lua_prefix && lua_handler) { 
                                    add_lua_prefix(lua_prefix, lua_handler); 
                                    lua_prefix = NULL; 
                                    lua_handler = NULL; 
                            } 
                            break; 
    #else 
                    case 'l': 
                    case 'L': 
                            fprintf(stderr, "uhttpd: Lua support not compiled, " 
                                            "ignoring -%c\n", ch); 
                            break; 
    #endif 
    #ifdef HAVE_UBUS 
                    case 'a': 
                            conf.ubus_noauth = 1; 
                            break; 
                    case 'u': 