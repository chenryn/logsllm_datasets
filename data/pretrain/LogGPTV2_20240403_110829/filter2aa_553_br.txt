当响应不合适时
提示用户再次输入
获取用户的响应
下面是一个简单而笨拙的实现：
char get_choice(void)
{
int ch;
printf("Enter the letter of your choice:\n");
printf("a. advice        b. bell\n");
printf("c. count         q. quit\n");
ch = getchar();
while ((ch  'c') && ch != 'q')
{
printf("Please respond with a, b, c, or q.\n");
ch = getchar();
}
return ch;
}
缓冲输入依旧带来些麻烦，程序把用户每次按下 Return 键产生的换行
544
符视为错误响应。为了让程序的界面更流畅，该函数应该跳过这些换行符。
这类问题有多种解决方案。一种是用名为get_first()的新函数替换
getchar()函数，读取一行的第1个字符并丢弃剩余的字符。这种方法的优点
是，把类似act这样的输入视为简单的a，而不是继续把act中的c作为选项c的
一个有效的响应。我们重写输入函数如下：
char get_choice(void)
{
int ch;
printf("Enter the letter of your choice:\n");
printf("a. advice         b. bell\n");
printf("c. count          q. quit\n");
ch = get_first();
while ((ch  'c') && ch != 'q')
{
printf("Please respond with a, b, c, or q.\n");
ch = getfirst();
}
return ch;
}
char get_first(void)
545
{
int ch;
ch = getchar();  /* 读取下一个字符 */
while (getchar() != '\n')
continue; /* 跳过该行剩下的内容 */
return ch;
}
8.7.3 混合字符和数值输入
前面分析过混合字符和数值输入会产生一些问题，创建菜单也有这样的
问题。例如，假设count()函数（选择c）的代码如下：
void count(void)
{
int n, i;
printf("Count how far? Enter an integer:\n");
scanf("%d", &n);
for (i = 1; i 
547
char get_choice(void);
char get_first(void);
int get_int(void);
void count(void);
int main(void)
{
int choice;
void count(void);
while ((choice = get_choice()) != 'q')
{
switch (choice)
{
case 'a':  printf("Buy low, sell high.\n");
break;
case 'b': putchar('\a');  /* ANSI */
break;
case 'c':  count();
break;
default:  printf("Program error!\n");
548
break;
}
}
printf("Bye.\n");
return 0;
}
void count(void)
{
int n, i;
printf("Count how far? Enter an integer:\n");
n = get_int();
for (i = 1; i  'c') && ch != 'q')
{
printf("Please respond with a, b, c, or q.\n");
ch = get_first();
}
return ch;
}
char get_first(void)
{
int ch;
ch = getchar();
while (getchar() != '\n')
continue;
return ch;
}
550
int get_int(void)
{
int input;
char ch;
while (scanf("%d", &input) != 1)
{
while ((ch = getchar()) != '\n')
putchar(ch); // 处理错误输出
printf(" is not an integer.\nPlease enter an ");
printf("integer value, such as 25, -178, or 3: ");
}
return input;
}
下面是该程序的一个运行示例：
Enter the letter of your choice:
a. advice         b. bell
c. count         q. quit
a
Buy low, sell high.
551
Enter the letter of your choice:
a. advice         b. bell
c. count         q. quit
count
Count how far? Enter an integer:
two
two is not an integer.
Please enter an integer value, such as 25, -178, or 3: 5
1
2
3
4
5
Enter the letter of your choice:
a. advice         b. bell
c. count         q. quit
d
Please respond with a, b, c, or q.
q
552
要写出一个自己十分满意的菜单界面并不容易。但是，在开发了一种可
行的方案后，可以在其他情况下复用这个菜单界面。
学完以上程序示例后，还要注意在处理较复杂的任务时，如何让函数把
任务委派给另一个函数。这样让程序更模块化。
553
8.8 关键概念
C程序把输入作为传入的字节流。getchar()函数把每个字符解释成一个
字符编码。scanf()函数以同样的方式看待输入，但是根据转换说明，它可以
把字符输入转换成数值。许多操作系统都提供重定向，允许用文件代替键盘
输入，用文件代替显示器输出。
程序通常接受特殊形式的输入。可以在设计程序时考虑用户在输入时可
能犯的错误，在输入验证部分处理这些错误情况，让程序更强健更友好。
对于一个小型程序，输入验证可能是代码中最复杂的部分。处理这类问
题有多种方案。例如，如果用户输入错误类型的信息，可以终止程序，也可
以给用户提供有限次或无限次机会重新输入。
554
8.9 本章小结
许多程序使用 getchar()逐字符读取输入。通常，系统使用行缓冲输入，
即当用户按下 Enter 键后输入才被传送给程序。按下Enter键也传送了一个换
行符，编程时要注意处理这个换行符。ANSI C把缓冲输入作为标准。
通过标准I/O包中的一系列函数，以统一的方式处理不同系统中的不同
文件形式，是C语言的特性之一。getchar()和 
scanf()函数也属于这一系列。
当检测到文件结尾时，这两个函数都返回 
EOF（被定义在stdio.h头文件
中）。在不同系统中模拟文件结尾条件的方式稍有不同。在UNIX系统中，
在一行开始处按下Ctrl+D可以模拟文件结尾条件；而在DOS系统中则使用
Ctrl+Z。
许多操作系统（包括UNIX和DOS）都有重定向的特性，因此可以用文
件代替键盘和屏幕进行输入和输出。读到EOF即停止读取的程序可用于键盘
输入和模拟文件结尾信号，或者用于重定向文件。
混合使用 getchar()和 scanf()时，如果在调用 getchar()之前，scanf()在输
入行留下一个换行符，会导致一些问题。不过，意识到这个问题就可以在程
序中妥善处理。
编写程序时，要认真设计用户界面。事先预料一些用户可能会犯的错
误，然后设计程序妥善处理这些错误情况。
555
8.10 复习题
复习题的参考答案在附录A中。
1.putchar(getchar())是一个有效表达式，它实现什么功能？
getchar(putchar())是否也是有效表达式？
2.下面的语句分别完成什么任务？
a.putchar('H');
b.putchar('\007');
c.putchar('\n');
d.putchar('\b');
3.假设有一个名为 count 的可执行程序，用于统计输入的字符数。设计
一个使用 count 程序统计essay文件中字符数的命令行，并把统计结果保存在
essayct文件中。
4.给定复习题3中的程序和文件，下面哪一条是有效的命令？
a.essayct count
5.EOF是什么？
6.对于给定的输出（ch是int类型，而且是缓冲输入），下面各程序段的
输出分别是什么？
a.输入如下：
556
If you quit, I will.[enter]
程序段如下：
while ((ch = getchar()) != 'i')
putchar(ch);
b.输入如下：
Harhar[enter]
程序段如下：
while ((ch = getchar()) != '\n')
{
putchar(ch++);
putchar(++ch);
}