node’s home agent, an intruder can redirect traffic intended to the 
mobile node to a location of its choice. 
2.3  Security Assumptions 
We  will  make  more  or  less  the  same  security  assumptions  on 
MIPv6 as stated in [2]: 
1.  Pre-established  security  association  between  a  mobile  node 
and  its  home  agent:  Mobile  nodes  and  home  agents  know 
each  other,  and  can  thus  have  a  pre-established  strong 
security  association 
to  reliably  authenticate  exchanged 
messages  between  them.  IPsec’s  Encapsulating  Security 
Payload (ESP) [7] is used to set up a secure tunnel between a 
mobile node and its home agent.  
2.  No  pre-established  security  association  between  a  mobile 
node  and  a  random  correspondent  node:  It  is  expected  that 
MIPv6  will  be  used  on  a  global  basis  between  nodes 
belonging 
to  different  administrative  domains,  hence 
building a global authentication infrastructure to authenticate 
mobile  nodes  and  random  correspondent  nodes  would  be  a 
very  demanding  task,  at  least  in  the  near  to  medium  terms. 
However,  this  does  not  rule  out  the  possibility  of  having 
fragmented  authentication  infrastructures  within  individual 
administration  domains  or  even  cross  different  domains. 
Furthermore,  making 
authentication 
infrastructure  to  keep  track  of  correct  IP  addresses  for  all 
hosts  is  either  impossible  or  at  least  very  hard  due  to  the 
dynamic association between IP addresses and hosts. 
traditional 
a 
Since  a  pre-established  security  association  between  a  mobile 
node and its home agent is assumed, securing the binding update 
messages from a mobile node to its home agent is straightforward. 
Hence,  during  the  rest  of  the  paper,  we  will  work  on  securing 
binding updates from mobile nodes to corresponding nodes. 
2.4  Cryptographic Notation 
We  list  below  the  cryptographic  notation  used  throughout  the 
paper for ease of reference: 
h() 
:  a  cryptographic  secure  one-way  hash  function,  or 
one-way  hash  function  in  short,  such  as  MD5  [8] 
and SHA [9]. 
:  a  keyed  pseudo  random  function  –  often  a  keyed 
hash  function  [10].  It  accepts  a  secret  key  k  and  a 
message m, and generates a pseudo random output. 
This function is used for both generation of message 
prf(k, m) 
authentication codes and derivation of cryptographic 
keys.  
: a public and private key pair of node X in a digital 
signature scheme such as RSA [11] or DSS [12]. 
: node X’s digital signature on a message m or on the 
hash of m. 
: concatenation of two messages m and n. 
PX/SX 
SX(m) 
m|n 
3.  IETF’S SECURE BINDING UPDATE 
PROTOCOLS 
In  this  section  we  describe  and  analyze  two  protocols  for 
authenticating  binding  update  messages.  The  Return  Routability 
(RR)  protocol  appeared  in  [2]  and  the  Cryptographic  Generated 
Address  (CGA)  protocol  was  under  discussion  by  the  working 
group according to [13]. 
3.1  The RR Protocol and Its Analysis 
Protocol  Operation:  In  this  protocol,  each  correspondent  node 
CN  keeps  a  secret  key  kCN  and  generates  a  nonce  Nj  at  regular 
intervals,  say every few minutes. CN uses the same key kCN and 
nonce Nj with all the mobile nodes it is in communication with, so 
that  it  does  not  need  to  generate and store a new nonce when a 
new mobile node contacts it. CN keeps both the current value of 
Nj and a small set of previous nonce values, Nj-1, Nj-2,  … . Older 
values are discarded, and messages using them will be rejected as 
replays.  Message  exchanges  in  the  RR  protocol  are  shown  in 
Figure  3,  where  the  HoTI  (Home  Test  Init)  and  CoTI  (Care-of 
the  mobile  node  MN 
Test 
simultaneously. The HoT (Home Test) and CoT (Care-of Test) are 
replies from CN. All the RR protocol messages are sent as IPv6 
“Mobility  Header”  in  IPv6  packets.  In  the  representation  of  a 
protocol message, we will use the first two fields to denote source 
IP  address  and  destination  IP  address,  respectively.  We  will 
misuse the notation CN to let it denote the correspondent node as 
well as its IP address. 
Init)  messages  are  sent  by 
MN                  HA                      CN 
HoTI
CoTI
HoT 
CoT 
Figure 3. The Return Routability Protocol. 
When MN wants to perform route optimization, it sends 
and 
HoTI = {HoA, CN, rH} 
CoTI = {CoA, CN, rC} 
to  CN,  where  rH  and  rC  are  random  values  used  to  match 
responses  with  requests.  HoTI  tells  MN’s  home  address  HoA  to 
61 
CN. It is reverse tunneled through the home agent HA, while CoTI 
informs  MN’s  care-of  address  CoA  and  is  sent  directly  to  CN. 
When CN receives HoTI, it takes the source IP address of HoTI as 
input and generates a home cookie 
CH = prf(kCN, HoA|Nj) 
and replies MN with 
HoT = {CN, HoA, rH, CH, j}, 
where  the  index  j  is  carried  along  to  allow  CN  later  efficiently 
finding  the  nonce  value  Nj  that  it  used  in  creating  cookie  CH. 
Similarly, when CN receives CoTI, it takes the source IP address 
of CoTI as input and generates a care-of cookie 
and sends 
CC = prf(kCN, CoA|Ni) 
CoT ={CN, CoA, rC, CC, i} 
to MN. Note that HoT is sent via MN’s home agent HA while CoT 
is  delivered  directly  to  MN.  When  MN  receives  both  HoT  and 
CoT, it hashes together the two cookies to form a session key 
kBU = h(CH|CC), 
which is then used to authenticate the binding update message to 
CN: 
BU = {CoA, CN, HoA, Seq#, LT, i, j, MACBU}, 
where Seq# is a sequence number used to detect replay attack, LT 
is the proposed lifetime of the binding, and 
MACBU = prf(kBU, CoA|CN|HoA|Seq#|LT|i|j) 
is a message authentication code (MAC) protected by the session 
key kBU. MACBU is used to ensure that BU was sent by the same 
node  which  received  the  HoT  and  CoT  messages.  The  message 
BU contains j and i, so that CN knows which nonce values Nj and 
Ni to use to first re-compute CH and CC and then the session key 
kBU.  Note  that  CN  is  stateless  until  it  receives  BU  and  verifies 
MACBU.  If  MACBU  is  verified  positive,  CN  may  reply  with  a 
binding acknowledgement message 
BA = {CN, CoA, HoA, Seq#, LT’, MACBA}, 
where  Seq#  is  copied  from  the  BU  message,  LT’  is  the  granted 
lifetime, and 
MACBA = prf(kBU, CN|CoA|HoA|Seq#|LT’) 
is a MAC generated using kBU to authenticate the BA message. CN 
then creates a binding cache entry for the mobile node MN. The 
binding  cache  entry  binds  HoA  with  CoA  which  allows  future 
packets to MN be sent to CoA directly. 
An example implementation of the binding cache at CN is shown 
in  Figure  4,  where  HoA  is  used  as  an  index  for  searching  the 
binding cache for the destination address of a packet being sent, 
r_LT  is  the  remaining  lifetime  for  this  entry,  and  the  sequence 
number Seq# is used by CN to sequence binding updates and by 
MN  to  match  a  return  binding  acknowledgement  with  a  binding 
update. Each binding update sent by MN must use a Seq# greater 
than (modulo 216) the one sent in the previous binding update by 
the  same  HoA.  It  is  no  requirement,  however,  that  the  sequence 
number value strictly increase by 1 with each new binding update 
sent or received [2]. Note that the session key kBU is not kept in 
the  cache  entry.  When  MN  receives  a  binding  update  message, 
based on the nonce indexes i and j in the message, it re-computes 
the  session  key  using  kCN  and  the  list  of  the  most  recent  nonce 
values, say {Nj, Nj-1, Nj-2}, and then verifies BU using the newly 
computed session key. 
The  mobile  node  MN  maintains  a  Binding  Update  List  for  each 
binding update message sent by it, for which the lifetime has not 
yet  expired.  A  binding  update  list  for  a  correspondent  node  CN 
consists of CN’s IP address, MN’s home address HoA and care-of 
address CoA, the remaining lifetime of the binding, the maximum 
value of the sequence number sent in previous binding updates to 
CN and the session key kBU. 
Entry for MN:  HoA,  CoA,  r_LT, Seq# 
                                                                      kCN, Nj, Nj-1, Nj-2
Entries for other mobile nodes 
Figure 4. A binding cache implementation at CN in the RR 
protocol. 
Discussion: In the RR protocol, the two cookie exchanges verify 
that a mobile node MN is alive at its home address HoA and care-
of  address  CoA,  respectively.  The  eventual  binding  update 
messages  are  protected  using  a  keyed  hash  with  the  session  key 
kBU obtained by hashing the concatenation of the two cookies CH 
and CC. Therefore, security of the binding update messages hinges 
on the secret sharing of kBU between MN and CN, which in turn 
hinges on the secrecy of at least one of the two cookies.  
The IETF MIPv6 documents [2, 3] stated that the motivation for 
designing  the  RR  protocol  was  to  have  sufficient  support  for 
mobile IP, without creating major new security problems. It was 
not the goal of the Mobile IP Working Group to protect against 
attacks  that  were  already  possible  before  the  introduction  of  IP 
mobility.  The  protocol  does  not  defend  against  an  intruder  who 
can  monitor  the  CN-HA  path.  The  argument  was  that  such 
intruders  would  in  any  case  be  able  to  mount  an  active  attack 
against MN when it is at its home location. 
However, the design principle of the RR protocol, i.e., defending 
against intruder who can monitor the CN-MN path but not the CN-
HA path, is fundamentally flawed since it violates the well known 
“weakest link” principle in security. After all, one has no reason 
to assume that an intruder will monitor one link and not the other, 
especially when the intruder knows that monitoring a given link is 
particularly  effective  to  expedite  its  attack.  While  it  is  true  that 
intruders are able to mount active attacks when a node is at home 
in the base IPv6, we demonstrate below that it is much easier to 
launch redirect attacks in MIPv6 than in the base IPv6.  
First, let’s consider the session hijacking attack shown in Figure 
2(a).  In  the  case  of  the  base  IPv6  without  mobility  (which  is 
equivalent to the mobile node MN at its home link in MIPv6), to 
succeed in the attack, the intruder must be constantly present on 
the CN-HA path. In order to redirect CN’s traffic intended for MN 
to a malicious node, the intruder most likely has to get control of a 
router  or  a  switch  along  the  CN-HA  path.  Furthermore,  after 
taking over the session from MN, if the malicious node wants to 
62to 
continue  the  session  with  CN  while  pretending  to  be  MN,  the 
malicious node and the router need to collaborate throughout the 
session.  For  example,  the  router  tunnels  CN’s  traffic  to  the 
malicious node and vise versa. 
In  the  case  of  MIPv6,  the  effort  committed  to  break  the  RR 
protocol 
launch  a  session  hijacking  attack  could  be 
considerably lesser. Assume that MN1 and CN in Figure 2(a) are 
having an on-going communication session and the intruder wants 
to  redirect  CN’s  traffic  to  his  collaborator  MN2.  The  intruder 
monitors  the  CN-HA  path  (i.e.,  anywhere  from  MN1’s  home 
network  to  CN’s  network)  to  obtain  HoT,  extracts  the  home 
cookie  CH  and  sends  it  MN2.  Upon  receiving  CH,  MN2  sends  a 
CoTI    to  CN  and  CN  will  reply  with  a  care-of  cookie  CC.  MN2 
simply hashes the two cookies to obtain a valid session key, and 
uses the key to send a binding update message to CN on behalf of 
MN1.  The  binding  update  will  be  accepted  by  CN which will in 
turn direct its traffic to MN2.  
Next, consider the malicious mobile node flooding attack shown 
in Figure 2(b). In the base IPv6 without mobility, perhaps the best 
example  of  flooding  attack  is  the  DDoS  attack  in  which  a 
multitude  of  compromised  systems  attack  a  single  target.  There 
are many ways to launch a malicious mobile node flooding attack 
against  a  victim  (which  can  be  either  a  node  or  a  network)  in 
MIPv6.  For  example,  the  malicious  node  starts  some  traffic 
intensive  sessions  with  correspondent  nodes  and  moves  to  the 
victim’s  network  or  the  border  between  the  victim  network  and 
the outside world. It then runs the RR protocol to redirect traffic 
from the correspondent nodes to the victim’s network by sending 
them binding update messages. The malicious mobile node does 