# 深入浅出——基于DynamoRIO的strace和ltrace
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
DynamoRIO是一种流行的动态二进制插桩平台，能够实时跟踪二进制程序的动态执行过程，在动态分析领域具有广泛的应用。strace和ltrace是Linux平台两款调试分析神器，能够跟踪程序动态运行时的系统调用和库函数调用。本文将介绍基于DynamoRIO实现的、面向Windows应用程序的drstrace和drltrace，并对其源码实现进行简要剖析。
## 0x00 概述
###  DynamoRIO
首先给出DynamoRIO官方的相关资料如下，学习时多以此为参考。
  1. DynamoRIO官方网站：
  2. Github地址：
  3. 下载传送门：
  4. 官方教程PDF：[教程传送门](https://github.com/DynamoRIO/dynamorio/releases/download/release_7_0_0_rc1/DynamoRIO-tutorial-feb2017.pdf)
本篇文章的实验环境：
  1. windows 7 x64
  2. vs2012
  3. DynamoRIO-Windows-6.2.0-2
###  strace && ltrace
在linux平台上，strace和ltrace是两款重要的调试分析工具，熟练使用这两个工具可以极大提高分析人员的工作效率，诊断软件的各种疑难杂症。其中，strace能够跟踪所有由用户进程空间发出的系统调用，ltrace则能够跟踪进程调用的库函数信息。例如，下面的例子展示了利用strace来跟踪cat命令的系统调用信息。
## 0x01 DynamoRIO 简要入门
DynamoRIO是一款流行的动态二进制插桩工具，工作于操作系统与应用程序之间，通过将二进制程序的代码拷贝到代码缓存的方式模拟目标程序的执行。在动态模拟执行的过程中，可以根据分析需求，对二进制程序的运行状态进行监控与修改。
DynamoRIO提供了丰富的API接口，开发者可以利用这些接口实现对指令、基本块、线程、系统调用等监控，从而实现二进制分析插件的开发。  
下面简单介绍DynamoRIO的入门知识，详细信息请参考官方文档。
###  基本组成
此插桩平台主要包含以下内容：
  1. DynamoRIO：负责解释并执行目标程序；提供丰富的跨平台API接口
  2. Client ：通过API自定义分析操作来扩展DynamoRIO
  3. DynamoRIO Extensions：主要指drmgr，drsyms，drwrap等官方提供的扩展接口
DynamoRIO中有一个重要的概念： **事件** 。
  1. 应用程序事件：应用程序在动态执行时的事件，包括进程创建，模块加载，系统调用等
  2. DynamoRIO事件：包括基本快、轨迹流的创建等
  3. 事件回调函数的注册：`dr_register_xx_event`,`dr_ungister_xx_event`等
在DynamoRIO中，有两个重要的概念需要弄清： **transformation time** 和 **execution time**
> transformation time：DynamoRIO对待分析应用程序进行代码变换的时间  
>  execution time：待分析应用程序真正执行的时间
在DynamoRIO的官方手册中，有这样一个示例来这两个时间概念进行解释说明：
显然 **transformation time** 对应的代码主要决定在什么时候什么位置插入分析代码；而 **execution time**
对应的代码则是待分析程序真正动态执行时执行的分析代码。
###  运行方式：
方法1：  
`drrun -c   -- `
方法2：  
`drconfig -reg  -c  `  
`drinject `
###  简单功能演示
下面通过几个简单的官方示例来演示其功能，下面的功能演示均较为简单，主要让大家对动态二进制插桩技术和DynamoRIO有一个直观的认识，便于入门。
####  Example1:bbcount
分析notepad，统计其运行时的基本块信息，如图中所示，共有 6903773 个基本块得到执行。
####  Example2:inscount
分析notepad，统计其运行的所有指令数目，插桩分析结果如图所示。
####  Example3:countcalls
countcalls 用来分析程序运行时的跳转指令信息，下图展示了notepad的执行过程中的直接call指令、间接call指令和ret返回指令的数量统计。
####  Example4:bbsize
bbsize用于分析程序运行时的基本块信息，如下图所示，信息包括基本块总数、最大基本块指令数、平均指令数。
## 0x02 drstrace的实现与源码剖析
###  drstrace简介
drstrace是基于DynamoRIO实现的windows平台系统调用跟踪工具，利用Dr.Memory框架来监视目标应用程序所执行的系统调用信息，在官方文件中包含有其源码以及已编译好的二进制插件。
###  测试分析
执行命令`drrun.exe -t drstrace -- notepad.exe`对记事本程序进行分析，写入一串字符串 **AAAAA….**
并保存到文件 **This is TestFile.txt** 中，如下图所示，跟踪结果将记录在
**drstrace.notepad.exe.06648.0000.log** 日志文件中。
打开日志文件，观察到如下所示的结果片段，从结果中可以观察到，drstrace成功监控到文件的创建和写入操作，并捕获到了相应系统调用的参数信息。
###  源码剖析
下面结合drstrace的源码（`drstrace.c`），对其实现流程进行剖析，完整代码可在DynamoRIO开发包中找到，这里重点对其主要流程和关键环节进行剖析。
首先，在主函数中完成初始化工作以及各事件的回调函数的注册。
    //完成相关初始化工作
    drsym_init(0);
    drmgr_init();
    drx_init();
    if (drsys_init(id, &ops) != DRMF_SUCCESS)
       ASSERT(false, "drsys failed to init");
    dr_register_exit_event(exit_event);//注册应用程序退出事件的回调函数
    dr_register_filter_syscall_event(event_filter_syscall);//注册系统调用事件的过滤函数
    drmgr_register_pre_syscall_event(event_pre_syscall);//注册系统调用事件前的回调函数
    drmgr_register_post_syscall_event(event_post_syscall);//注册系统调用事件后的回调函数
对于`dr_register_filter_syscall_event`函数的声明如下，官方文档中对此函数的解释为：注册系统调用事件的过滤函数，DynamoRIO会调用该过滤函数来决定是否执行执后续分析，只有此函数返回真时，`event_pre_syscall`和`event_pre_syscall`才会得到执行。此处`event_filter_syscall`函数直接返回`true`表明拦截所有系统调用。大家在自行开发分析插件时，可合理利用此函数，实现更高效的分析。
    void dr_register_filter_syscall_event(bool (*func)(void *drcontext, int sysnum));
    static bool event_filter_syscall(void *drcontext, int sysnum)
    {
        return true; /* intercept everything */
    }
函数`drmgr_register_pre_syscall_event`注册了在每一次系统调用事件前（即系统调用入口处）执行的回调函数`event_pre_syscall`，此函数原型如下，其整体流程如下：
  1. 给出了相关变量的声明，包括`drsys_syscall_t`结构体等，
  2. 调用`drsys_cur_syscall`函数，根据当前上下文状态`drcontext`来获取当前系统调用信息
  3. 调用`drsys_syscall_name`函数，获取当前系统调用的名称信息
  4. 调用`drsys_syscall_is_known`函数，判断当前的系统调用是否为已知
  5. 调用`drsys_iterate_args`函数，获取当前系统调用的参数信息
    static bool
    event_pre_syscall(void *drcontext, int sysnum)
    {
        //声明相关变量
        drsys_syscall_t *syscall;
        bool known;
        drsys_param_type_t ret_type;
        const char *name;
        drmf_status_t res;
        buf_info_t buf;
        buf.sofar = 0;
        if (drsys_cur_syscall(drcontext, &syscall) != DRMF_SUCCESS)//获取当前系统调用信息
            ASSERT(false, "drsys_cur_syscall failed");
        if (drsys_syscall_name(syscall, &name) != DRMF_SUCCESS)//获取当前系统调用名称
            ASSERT(false, "drsys_syscall_name failed");
        if (drsys_syscall_is_known(syscall, &known) != DRMF_SUCCESS)//判断当前系统调用是否为已知
            ASSERT(false, "failed to find whether known");
        OUTPUT(&buf, "%s%sn", name, known ? "" : " (details not all known)");
        res = drsys_iterate_args(drcontext, drsys_iter_arg_cb, &buf);//获取系统调用参数信息
        if (res != DRMF_SUCCESS && res != DRMF_ERROR_DETAILS_UNKNOWN)
            ASSERT(false, "drsys_iterate_args failed pre-syscall");
        /* Flush prior to potentially waiting in the kernel */
        FLUSH_BUFFER(outf, buf.buf, buf.sofar);
        return true;
    }
函数`drmgr_register_post_syscall_event`注册了每一次系统调用事件后的回调函数`event_post_syscall`，其完整函数代码如下，整体执行流程为：
  1. 声明所需变量
  2. 函数`drsys_cur_syscall`获取当前系统调用信息
  3. 函数`drsys_cur_syscall_result`获取当前系统调用的结果
  4. 函数`drsys_iterate_args`获取参数信息
    static void
    event_post_syscall(void *drcontext, int sysnum)
    {
        //声明变量信息
        drsys_syscall_t *syscall;
        bool success = false;
        uint errno;
        drmf_status_t res;
        buf_info_t buf;
        buf.sofar = 0;
        if (drsys_cur_syscall(drcontext, &syscall) != DRMF_SUCCESS)//获取当前系统调用信息
            ASSERT(false, "drsys_cur_syscall failed");
        if (drsys_cur_syscall_result(drcontext, &success, NULL, &errno) != DRMF_SUCCESS)
            //获取当前系统调用的结果
            ASSERT(false, "drsys_cur_syscall_result failed");
        if (success)
            OUTPUT(&buf, "    succeeded =>n");