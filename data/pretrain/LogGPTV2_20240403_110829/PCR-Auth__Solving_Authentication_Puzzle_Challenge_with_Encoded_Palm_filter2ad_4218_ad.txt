digits to pass the veriﬁcation independently. In comparison, the
accuracy of our cluster-based PCR decoder increases. Speciﬁ-
cally, our method achieves 94.7%, 96.8% and 99.3% accuracy
with 4-digit, 5-digit and 6-digit PCR codes. The reasons why
PCR-Auth achieves higher performances with longer PCR
codes are threefold: First, the longer PCR codes involve more
coding chirps and thus have an increased temporal diversity
to describe the user’s biometric; Second, the PCR digits at
different channels leverage the frequency diversity to capture
different aspects of the biometric; Third, our cluster-based
method exploits the connections and constraints among PCR
digits to decode a PCR code and leverage its coding gain.
The ROC curves of the 4-digit and 6-digit PCR codes in
Figure 8 (b) further conﬁrm the high performance of PCR-
Auth, and both codes achieve a high TAR and a low FAR.
Moreover, the 6-digit PCR code’s ROC curve is above that of
the 4-digit code. In particular, the 4-digit PCR code achieves
94% TAR and 4.6% FAR, while the 6-digit PCR code achieves
close to 99.6% TAR and 1% FAR.
2) Performance of Different Device Models: We next evalu-
ate the performance of our system on six different smartphone
models, when ﬁfteen participants are involved. Figure 9 shows
the FAR and FRR performance of PCR-Auth when 4- and
6-digit codes are used. We observe that all the six devices
achieve a low FAR and a low FRR. When using 6-digit PCR
codes, S8, Mi10 and K50 all achieve 0% FARs, and their FRRs
are 2.1%, 2.9% and 0.8% respectively. Similar to the three
devices, Note 5 and G8 achieve around 2% FAR and 2.5%
FRR. Pixel 2 does not perform as well as the other ﬁve devices.
The reason may be that Pixel 2 has the non-smooth or matte
back surface, which impacts the stimulus signal propagation.
But Pixel 2 still achieves 3.8% FAR and 5% FRR. When
using 4-digit PCR codes, the performance degrades slightly.
In particular, S8 achieves 2.9% FAR and 5.4% FRR, and that
of K50 are 2.1% and 2.9% respectively. Additionally, we ﬁnd
the performance of PCR-Auth is not associated with the device
price. For example, K50 is the cheapest, but it achieves the
best performance. The results show the potential to deploy
PCR-Auth generally on most handheld devices.
3) Long-term Performance: In addition to using the two-
session data, we also continuously collect data from 8 par-
ticipants with S8 in 25 days for the long-term performance
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
91042
123456PCR Code Length00.10.20.30.40.50.60.70.80.91AccuracyNaive DecodingCluster-based00.10.20.30.40.50.60.70.80.91False Acceptance Rate00.10.20.30.40.50.60.70.80.91True Acceptance Rate4 Digits6 DigitsS8Note5Mi10K50G8Pixel200.010.020.030.040.050.060.070.080.090.1PercentageFalse Acceptance RateFalse Rejection RateS8Note5Mi10K50G8Pixel200.010.020.030.040.050.060.070.080.090.1PercentageFalse Acceptance RateFalse Rejection RateFig. 10: Long-term perfor-
mance of PCR-Auth.
Fig. 11: Performance under
replay attacks.
study. 40 PCR codes are collected for each participant for
each day, which are only used for testing. Figure 10 shows
the performance changes of 4- and 6-digit PCR codes in this
period. We ﬁnd that both codes have a stable accuracy perfor-
mance along time, which only slightly decreases. Moreover,
we observe some ﬂuctuations and two local minimums on
Day 5 and Day 23. These slight performance changes are
caused by many inconsistent factors on each day, including
hand moisture, mood, body weight and clothes. The results
reﬂect the robust performance of PCR-Auth over a long term.
C. Impersonation Attack
1) Setup: We perform three types of impersonation attacks.
For random impersonation, each of the participants is treated
as the target user respectively, while the other participants’
data is used for testing. For knowledgeable impersonation, the
authors and four participants act as the skilled adversaries, who
learn how each target user grips the device from videos and
then imitate the gripping hand to attack. For knowledgeable
fake-hand impersonation, we use a silicone fake hand [32] to
replicate each user’s gripping hand. The attackers attempt 40
times for each target user’s OTC.
2) Result: Table II presents the performance of the 4- and
6-digit PCR codes under the three impersonation attacks. We
observe that both PCR codes achieve a low FAR and a low
FRR in the three attacking scenarios. In particular, the 6-
digit PCR code achieves 0.4% FRR and 1% FAR for the
random impersonation, and the Equal Error Rate (EER) is
0.8%. The knowledgeable and the knowledgeable fake-hand
impersonations slightly degrade the performance of the 6-digit
PCR code. But its EERs are still low under the two advanced
impersonation attacks, which are 3.1% and 3.0%, respectively.
The 4-digit PCR code has a lower performance compared to
the 6-digit PCR code, whose EERs are 5.7%, 6.3%, and 6.2%
in the random, knowledgeable, and knowledgeable fake-hand
impersonations, respectively. The results indicate the difﬁculty
of replicating the user’s PCR via impersonation attacks.
TABLE II: Performance of PCR-Auth under impersonation
and replay attacks.
Code
4 Digits
6 Digits
FRR
0.063
0.032
Rand.
0.046
0.010
Impersonation Attack
Knowl.
0.061
0.029
Fake
0.058
0.026
FAR
1
0
0
Replay (#Err Digit)
5
2
-
0
0
0
3
0
0
4
0
0
D. Replay Attack
1) Setup: For each participant, we respectively choose each
of his/her 40 PCR codes for the current session and use the
other 39 codes for replay attacks. As these replay codes only
cover a small set of digit combinations, we further use re-
grab-1 data to construct 560 PCR codes for each participant
and replay them. As a result, the replayed codes may have 1,
2, ..., 5, 6 digit differences from the target code. For replay,
we use the target user’s audio data and assume the adversary
precisely predicts the authentication start to launch the attack.
2) Result: Table II shows the performance of PCR-Auth
under replay attacks. We ﬁnd that both the 4- and 6-digit
PCR codes prevent all replay attacks with 0% FAR, including
the case when there is only 1-digit error. The reason is that
each PCR code is only used once, and coding errors can
be accurately detected based on the physical layer SNR of
each digit. Figure 11 further compares the performance of
PCR-Auth with the traditional method without coding and the
side-channel replay with the software-level replay. We ﬁnd
that without coding, the traditional biometric method suffers
from 87% FAR and 63% FAR, when the software-level replay
and the side-channel replay are launched, respectively. Even
encoding the biometric with a single decimal digit could
reduce the FAR by a factor of ten. The results conﬁrm the
security of PCR-Auth and indicate that an adversary could not
attack PCR-Auth if not presenting the correct coding sequence.
E. Defending New Synthesis Attacks
1) When to Stop Recording?: PCR-Auth is designed to
work in a way in which the speaker and the microphone should
be turned on and off simultaneously during authentication.
However, in practical implementations, such a concurrency
could not be achieved due to the audio latency [33]. Then,
a critical question is when to stop the mic to improve the
data integrity, block additional inputs and prevent the speech
privacy leakage. While the audio latency is not avoidable for
both users and attackers, it is more important to know whether
this latency is stable, so that we can apply a threshold to
cut off the recordings. We conduct experiments with different
devices to measure the ending time of the recorded PCR
codes. Table III presents the variation range of the ending
time measurements, when two different Android player classes
are used. We ﬁnd the measured ending time of PCR code is
not ﬁxed, which has up to 78.5ms variations. This is caused
by unpredictable hardware latency and the CPU scheduling
time. Moreover, the variation range is related to the device
and the player class. Because this range is not determined, our
threshold needs to cover its maximum to ensure each entire
PCR code to be recorded. An adversary can also leverage this
additional time to attack PCR-Auth too. As our experiments
TABLE III: The variation ranges of PCR code ending time
(ms) on different devices.
6
-
0
Andorid.Media
AudioTrack
MediaPlayer
S8
43.604
60.618
Note5
39.730
40.067
K50
20.538
33.184
G8
78.518
45.485
Pixel 2
28.338
45.705
101043
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
135791113151719212325Day0.80.820.840.860.880.90.920.940.960.981Accuracy4 Digtis6 DigitsWithout CodingPCR 1 DigitPCR 4 DigitsPCR 6 Digits00.10.20.30.40.50.60.70.80.91FARSide Channel ReplayLegitimate Data Replay(a) User’s one digit sound
(b) synchronization disturbance
Fig. 12: Illustration of synchronization disturbance attack.
(a) Impact of delays (6 digits)
Fig. 14: Under synchronization disturbance attack.
(b) PCR code length (25ms delay)
(a) Synchronized (ideal)
(b) Unsynchronized (non-ideal)
Fig. 13: Illustration of adversarial perturbation attack.
(a) Impact of synch error (6 digits)
(b) PCR code length (no synch error)
Fig. 15: Under adversarial perturbation attack.
show that it is less than one digit’s time (100ms), the adversary
has to launch the attack simultaneously with the phone’s
speaker sound. Additionally, as the audio of a PCR code can be
less than 1 second, which is hard to record the user’s complete
speeches to cause privacy concerns.
2) Listen-and-synthesis Attack Setup: As discussed above,
to present the correct coding sequence to fool PCR-Auth, the
adversary has to listen to each coding chirp of the target
device during authentication and simultaneously sends the
corresponding malicious signal. This process is repeated for
every coding chirp, and in this process, the phone may be on a
table or in the adversary’s hand. We assume the adversary uses
FPGA to remove the CPU scheduling time. By considering
the time required for observation (3ms for 64-sample buffer),
A/D and D/A conversions (2ms), FFT (2ms), bus and signal
propagation time (3ms) [34], we ﬁnd an adversary needs at
least 10ms to attack each digit. We thus use 10ms as the
delay of adversarial digits for attack simulation. We simulate
the synchronization disturbance attack by replaying the user’s
PCR digit with double loudness, which postpones the entire
synchronization to pick up adversarial digits. As illustrated
in Figure 12, a stronger malicious sound is mixed with the
original speaker sound with a delayed phase. We also simulate
the adversarial perturbation attack by using the perturbation
noises to modify the original speaker sound into the user’s
PCR digit. Due to the delay, the attacking sound can only
modify partial frequencies. This attack has two cases depend-
ing on whether the perturbations are synchronized well with
the speaker sound as illustrated in Figure 13.
3) Results: We evaluate PCR-Auth under the two types of
attacks with two training models, the original one and the one
updated with the attack data. Figure 14(a) shows the 6-digit
PCR code performance under synchronization disturbance
attack, when the entire adversarial PCR code is sent with
different delays. We observe that without attack training, the
FARs are already low for all delays. In particular, when the
adversarial digits are delayed by 25ms, which is exactly behind
the speaker’s coding chirp, the attack achieves the highest
FAR, which is 4.6%. When the attack data of all delays are
included in training, the FARs fall to 0% for all cases. We
further examine the impact of code lengths when the delay is
25ms (the worst case). Figure 14(b) shows that a longer code
has a stronger capability to defend this synchronization attack.
We next evaluate the adversarial perturbation attack, and
different synchronization errors are considered. The system
performance of the 6-digit PCR code is shown in Figure 15(a).
We observe that the FARs are all below 4.8% without training
the model with attack data. This highest FAR is obtained when
the synchronization error is 0 sample. When the attack data is
included in training, the 6-digit PCR code achieves 0% FAR
for all the cases of adversarial perturbation attack. We further
present the FARs of different code lengths when there is no
synchronization error (worst case). As shown in Figure 15(b),
the FARs are 9.7%, 7%, and 4.8% when the 1-, 4-, and 6-digit
codes are used without attack training. When the attack data
is trained, the FARs are reduced to 6.1%, 3.4%, and 0%.
F. Under Daily Noises and Dedicated Ultrasonic Interference
While the above results are obtained in the regular ofﬁce
scenarios with a 40dB noise level, we next evaluate PCR-
Auth by asking 10 participants to further conduct experiments
with eight more different types of noise including the natural
ambient noises and the dedicated ultrasonic interference.
1) Impact of Daily Noises: The daily ambient noises we test
include an open area scenario at a large parking lot (55dB), a
working Air Conditioner (AC) (60dB), regular conversations
(65dB), in-car scenarios (70dB) and a train station (75dB).
We use the Ultrasound Detector App [35] to measure the
SPL at the ultrasound band 17k-22kHz. Table IV shows the
veriﬁcation accuracy of using each single channel and the 4-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:37:04 UTC from IEEE Xplore.  Restrictions apply. 
111044
1015202530Delay (ms)00.010.020.030.040.050.060.070.080.090.1FARWithout Attack TrainingWith Attack Training146Number of PCR Digits00.010.020.030.040.050.060.070.080.090.1FARWithout Attack TrainingWith Attack Training-20-10010201-20Synchronization Error (samples)00.010.020.030.040.050.060.070.080.090.1FARWithout Attack TrainingWith Attack Training146Number of PCR Digits00.010.020.030.040.050.060.070.080.090.1FARWithout Attack TrainingWith Attack Trainingand 6-digit PCR codes. We ﬁnd that the 6-digit PCR code
is not impacted by the daily noises for the ten participants,
which has a strong capability to correct the errors caused by
noises. The accuracy of each single channel and that of the
4-digit PCR code slightly decrease under higher SPL noises.
In particular, the average accuracy of all channels is 94.7%,
94.4%, 94.3%, 94%, 93.8% and 93.5% under the noise levels
40dB, 55dB, 60dB, 65dB, 70dB and 75dB. The reason is that
the daily noises have limited capabilities to corrupt the coding
chirps in the ultrasonic frequencies, and the structure-borne
sounds are much stronger than the external ambient noises.
2) Under Ultrasound or DoS Attacks: We are aware of
that an adversary can use dedicated ultrasonic speakers to
generate stronger interference signals to cause authentication
errors or DoS. Thus, we need to know the extent of PCR-
Auth to work under dedicated ultrasonic interference and
exploit defense mechanisms to address this attacking scenario
immediately when the ultrasonic attack exceeds a boundary.
In particular, we use an external loudspeaker to continuously
generate the white Gaussian noise at the frequencies from
17kHz to 22kHz. Table IV presents the performance of PCR-
Auth under three ultrasonic SPLs (17k-22kHz). When the SPL
of the ultrasonic noise increases to 30dB, 40dB and 50dB,
the 4-digit PCR code’s accuracy drops to 96.2%, 95.4%, and
89.1%, and the 6-digit PCR code’s accuracy decreases from
100% to 98.9% and 93.2%. The results indicate the potential
of PCR-Auth to work with good performance under dedicated
ultrasonic interference. We choose 50dB SPL at the ultrasonic
band as the threshold to detect DoS attacks before running
the authentication, which is equivalent to 30cm distance of
ultrasound transmission if using normal mobile devices. If the
ultrasound SPL is greater than this level, PCR-Auth will notify
the user of potential DoS attacks and recommend the user to
change a location to restart PCR-Auth. It is important to note
that the above results are obtained when PCR-Auth uses the
50% volume. We can further push this DoS attack detection
threshold higher when using the phone with higher volumes.
VI. DISCUSSION & FUTURE WORK
While this is the ﬁrst biometric encoding work to implement
biometric CR authentication, the following are some issues
that could be considered for further improvement.
This work evenly divides the inaudible frequency range
17k-22kHz into 12 channels and selects the 10 best channels
for biometric encoding. After extensive experiments with
40 participants and 6 devices, we ﬁnd that some channels
perform better than the others. Thus, new ways of selecting
the coding channels to better leverage the “good frequencies”
need to be explored. Moreover, to achieve the optimal system
performance, more efforts are needed to balance the base value
of the coding system, the channel bandwidth and the coding
signal duration. Whether other signal patterns are better than
frequency sweeping signals for biometric encoding is worth
further exploration. We may use the more advanced time-
frequency images and deep learning methods to improve the
performance. Additionally, the impacts of user postures (e.g.,
sitting and laying down), age group and PCR transferability
(e.g., from one device to another) need to be further studied.
To cheat the biometric CR authentication, an adversary must
capture the authentication challenge in addition to obtaining
the user’s all biometric data. This work investigates two new
synthesis attacks that eavesdrop on every challenge digit via a
side-channel and launch attacks immediately to inject each ma-
licious digit. We then discuss the possibility of implementing
these attacks by using an FPGA, which achieves both the short
processing time and the determined delay to meet the strict
synchronization requirement. The detailed implementation of