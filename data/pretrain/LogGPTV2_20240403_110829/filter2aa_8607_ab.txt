.PP
.Vb 1
\&        prompt% perldoc Module::Name
.Ve
.PP
You can also try to include the module in a one-liner to see if
perl finds it.
.PP
.Vb 1
\&        perl -MModule::Name -e1
.Ve
.Sh "如何替我的 Perl 程式除虫?"
.IX Subsection "How do I debug my Perl programs?"
你用过 \f(CW\*(C`use warnings\*(C'\fR 或 \f(CW\*(C`\-w\*(C'\fR 吗？它们启用警告模式，来检测不确定的代码。
.PP
你用过 \f(CW\*(C`use strict\*(C'\fR 吗？It prevents you from using symbolic
references, makes you predeclare any subroutines that you call as bare
words, and (probably most importantly) forces you to predeclare your
variables with \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, or \f(CW\*(C`use vars\*(C'\fR.
.PP
Did you check the return values of each and every system call?  The operating
system (and thus Perl) tells you whether they worked, and if not
why.
.PP
.Vb 2
\&  open(FH, "> /etc/cantwrite")
\&    or die "Couldn't write to /etc/cantwrite: $!\en";
.Ve
.PP
Did you read perltrap?  It's full of gotchas for old and new Perl
programmers and even has sections for those of you who are upgrading
from languages like \fIawk\fR and \fIC\fR.
.PP
Have you tried the Perl debugger, described in perldebug?  You can
step through your program and see what it's doing and thus work out
why what it's doing isn't what it should be doing.
.Sh "如何检测 (profile) 我的 perl 程式?"
.IX Subsection "How do I profile my Perl programs?"
你该自 CPAN抓取 Devel::DProf 模组，并且使用 perl 标准套件所附的 Benchmark.pm。 Benchmark.pm让你测量程式码的某部份在执行上所花的时间，而 Devel::DProf则详细地替你分析哪一部份的程式用掉多少时间。
.PP
Here's a sample use of Benchmark:
.PP
.Vb 1
\&  use Benchmark;
.Ve
.PP
.Vb 2
\&  @junk = `cat /etc/motd`;
\&  $count = 10_000;
.Ve
.PP
.Vb 8
\&  timethese($count, {
\&            'map' => sub { my @a = @junk;
\&                           map { s/a/b/ } @a;
\&                           return @a },
\&            'for' => sub { my @a = @junk;
\&                           for (@a) { s/a/b/ };
\&                           return @a },
\&           });
.Ve
.PP
This is what it prints (on one machine\*(--your results will be dependent
on your hardware, operating system, and the load on your machine):
.PP
.Vb 3
\&  Benchmark: timing 10000 iterations of for, map...
\&         for:  4 secs ( 3.97 usr  0.01 sys =  3.98 cpu)
\&         map:  6 secs ( 4.97 usr  0.00 sys =  4.97 cpu)
.Ve
.PP
Be aware that a good benchmark is very hard to write.  It only tests the
data you give it and proves little about the differing complexities
of contrasting algorithms.
.Sh "如何替我的 Perl程式作交叉参考？"
.IX Subsection "How do I cross-reference my Perl programs?"
B::Xref模组可 以替你的 Perl程式制作 cross-reference报告。用法是：
.PP
.Vb 1
\&    perl -MO=Xref[,OPTIONS] scriptname.plx
.Ve
.Sh "有 Perl专用的美化列印程式吗?"
.IX Subsection "Is there a pretty-printer (formatter) for Perl?"
Perltidy is a Perl script which indents and reformats Perl scripts
to make them easier to read by trying to follow the rules of the
perlstyle. If you write Perl scripts, or spend much time reading
them, you will probably find it useful.  It is available at
http://perltidy.sourceforge.net
.PP
Of course, if you simply follow the guidelines in perlstyle,
you shouldn't need to reformat.  The habit of formatting your code
as you write it will help prevent bugs.  Your editor can and should
help you with this.  The perl-mode or newer cperl-mode for emacs
can provide remarkable amounts of help with most (but not all)
code, and even less programmable editors can provide significant
assistance.  Tom Christiansen and many other \s-1VI\s0 users  swear by
the following settings in vi and its clones:
.PP
.Vb 2
\&    set ai sw=4
\&    map! ^O {^M}^[O^T
.Ve
.PP
Put that in your \fI.exrc\fR file (replacing the caret characters
with control characters) and away you go.  In insert mode, ^T is
for indenting, ^D is for undenting, and ^O is for blockdenting\*(--
as it were.  A more complete example, with comments, can be found at
http://www.cpan.org/authors/id/TOMC/scripts/toms.exrc.gz
.PP
The a2ps http://www\-inf.enst.fr/%7Edemaille/a2ps/black+white.ps.gz does
lots of things related to generating nicely printed output of
documents, as does enscript at http://people.ssh.fi/mtr/genscript/ .
.Sh "有 Perl的 ctags 吗?"
.IX Subsection "Is there a ctags for Perl?"
Recent versions of ctags do much more than older versions did.
\&\s-1EXUBERANT\s0 \s-1CTAGS\s0 is available from http://ctags.sourceforge.net/
and does a good job of making tags files for perl code.
.PP
There is also a simple one at
http://www.cpan.org/authors/id/TOMC/scripts/ptags.gz which may do
the trick.  It can be easy to hack this into what you want.
.Sh "Is there an \s-1IDE\s0 or Windows Perl Editor?"
.IX Subsection "Is there an IDE or Windows Perl Editor?"
Perl programs are just plain text, so any editor will do.
.PP
If you're on Unix, you already have an IDE\*(--Unix itself.  The \s-1UNIX\s0
philosophy is the philosophy of several small tools that each do one
thing and do it well.  It's like a carpenter's toolbox.
.PP
If you want an \s-1IDE\s0, check the following:
.IP "Komodo" 4
.IX Item "Komodo"
ActiveState's cross-platform (as of April 2001 Windows and Linux),
multi-language \s-1IDE\s0 has Perl support, including a regular expression
debugger and remote debugging
( http://www.ActiveState.com/Products/Komodo/index.html ).  (Visual
Perl, a Visual Studio.NET plug-in is currently (early 2001) in beta
( http://www.ActiveState.com/Products/VisualPerl/index.html )).
.IP "The Object System" 4
.IX Item "The Object System"
( http://www.castlelink.co.uk/object_system/ ) is a Perl web
applications development \s-1IDE\s0, apparently for any platform
that runs Perl.
.IP "Open Perl \s-1IDE\s0" 4
.IX Item "Open Perl IDE"
( http://open\-perl\-ide.sourceforge.net/ )
Open Perl \s-1IDE\s0 is an integrated development environment for writing
and debugging Perl scripts with ActiveState's ActivePerl distribution
under Windows 95/98/NT/2000.
.IP "PerlBuilder" 4
.IX Item "PerlBuilder"
( http://www.solutionsoft.com/perl.htm ) is an integrated development
environment for Windows that supports Perl development.
.IP "visiPerl+" 4
.IX Item "visiPerl+"
( http://helpconsulting.net/visiperl/ )
From Help Consulting, for Windows.
.IP "OptiPerl" 4
.IX Item "OptiPerl"
( http://www.optiperl.com/ ) is a Windows \s-1IDE\s0 with simulated \s-1CGI\s0
environment, including debugger and syntax highlighting editor.
.PP
For editors: if you're on Unix you probably have vi or a vi clone already,
and possibly an emacs too, so you may not need to download anything.
In any emacs the cperl-mode (M\-x cperl\-mode) gives you perhaps the
best available Perl editing mode in any editor.
.PP
If you are using Windows, you can use any editor that lets
you work with plain text, such as NotePad or WordPad.  Word
processors, such as Microsoft Word or WordPerfect, typically
do not work since they insert all sorts of behind-the-scenes
information, although some allow you to save files as \*(L"Text
Only\*(R". You can also download text editors designed
specifically for programming, such as Textpad
( http://www.textpad.com/ ) and UltraEdit
( http://www.ultraedit.com/ ), among others.
.PP
If you are using MacOS, the same concerns apply.  MacPerl
(for Classic environments) comes with a simple editor.
Popular external editors are BBEdit ( http://www.bbedit.com/ )
or Alpha ( http://www.kelehers.org/alpha/ ). MacOS X users can
use Unix editors as well.
.IP "\s-1GNU\s0 Emacs" 4
.IX Item "GNU Emacs"
http://www.gnu.org/software/emacs/windows/ntemacs.html
.IP "MicroEMACS" 4
.IX Item "MicroEMACS"
http://www.microemacs.de/
.IP "XEmacs" 4
.IX Item "XEmacs"
http://www.xemacs.org/Download/index.html
.IP "Jed" 4
.IX Item "Jed"
http://space.mit.edu/~davis/jed/
.PP
or a vi clone such as
.IP "Elvis" 4
.IX Item "Elvis"
ftp://ftp.cs.pdx.edu/pub/elvis/ http://www.fh\-wedel.de/elvis/
.IP "Vile" 4
.IX Item "Vile"
http://dickey.his.com/vile/vile.html
.IP "Vim" 4
.IX Item "Vim"
http://www.vim.org/
.PP
For vi lovers in general, Windows or elsewhere:
.PP
.Vb 1
\&        http://www.thomer.com/thomer/vi/vi.html
.Ve
.PP
nvi ( http://www.bostic.com/vi/ , available from \s-1CPAN\s0 in src/misc/) is
yet another vi clone, unfortunately not available for Windows, but in
\&\s-1UNIX\s0 platforms you might be interested in trying it out, firstly because
strictly speaking it is not a vi clone, it is the real vi, or the new
incarnation of it, and secondly because you can embed Perl inside it
to use Perl as the scripting language.  nvi is not alone in this,
though: at least also vim and vile offer an embedded Perl.
.PP
The following are Win32 multilanguage editor/IDESs that support Perl:
.IP "Codewright" 4
.IX Item "Codewright"
http://www.starbase.com/
.IP "MultiEdit" 4
.IX Item "MultiEdit"
http://www.MultiEdit.com/
.IP "SlickEdit" 4
.IX Item "SlickEdit"
http://www.slickedit.com/
.PP
There is also a toyedit Text widget based editor written in Perl
that is distributed with the Tk module on \s-1CPAN\s0.  The ptkdb
( http://world.std.com/~aep/ptkdb/ ) is a Perl/tk based debugger that