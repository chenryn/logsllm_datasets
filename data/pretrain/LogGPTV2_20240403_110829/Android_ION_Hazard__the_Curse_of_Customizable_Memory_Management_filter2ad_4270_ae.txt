as [14]), it can eﬀectively be tailored to reliably extract any
app-speciﬁc information. One may even be able to recon-
struct the app GUIs by taking multiple snapshots of the
memory dumps; This very attack was recently achieved by
forensically dumping the entire physical memory [24]. Final-
ly, even though we have not attempted, there is no reason
to believe that it is impossible to extract crypto keys used
by apps and the system.
System-wide information leakage on Mate 8 The
“system-contig” heap on Huawei Mate 8 is assigned the type
“SYSTEM CONTIG”. With this heap we can get various
sensitive information similar to what we can get with CMA
heap; they include Gmail content, Chrome browsing history
and html data of previously loaded web pages. Besides data
leaked from user applications, it is also possible to learn
information from the kernel with such a heap type. The
attack process is sketched as below:
(1) Open arbitrary apps and operate normally, then exit
(which means that memory will be released by the apps).
(2) Allocate as much memory as possible from “system-
contig” heap and record their content, which will include
signiﬁcant sensitive information.
Since SYSTEM CONTIG heap draws pages directly from
the basic system memory manager (i.e., buddy allocator),
whoever returns pages to the system without zeroing them
can leak data to the attacker. This includes any application
or kernel data such as passwords, credit cards, and secret
keys. This vulnerability is very much similar to the one in
CMA heap except that the opportunity arises only when the
memory is freed by other applications.
7. DEFENSE DISCUSSION
The fundamental problems with ION stem from its two
design goals, uniﬁed interface and buﬀer sharing across lay-
ers, as we highlight throughout the paper. Since they are
not really simple implementation errors, they require a more
systematic investigation. One may consider the vulnerabili-
ty of unzeroed buﬀers simply a glaring error; we argue that
it actually is a much more complex problem than what it
appears. As shown in §3.2.1 and §5, the unzeroed buﬀers
are introduced due to several complex reasons:
1) Kernel memory allocation functions have complex be-
haviors. Many of them never need to be exposed to user
space prior to ION’s cross-layer buﬀer sharing capability. It
is hard to make the correct assumption on whether a par-
ticular function will zero the returned buﬀer or not.
2) Customization of ION can lead to a drastically diﬀerent
implementation from the common branch in AOSP. In our
analysis of Nexus 6P, we ﬁnd that its ION implementation
follows the one customized by Qualcomm (due to the fact
that Nexus 6P uses the Qualcomm SoC). Interestingly, we
ﬁnd that the Qualcomm kernel source was forked prior to
AOSP common branch ﬁxing the vulnerability of unzeroed
buﬀers in CMA heap. Unfortunately, once the Qualcomm
source tree is forked, it no longer merges the patches applied
to AOSP common branch. This is demonstrated by the fact
that even the Android 7.0 preview on Nexus 6P still has
unzeroed buﬀer vulnerabilities.
Therefore, we believe the static taint analysis tool can
be eﬀective in assisting developers with the insight into the
buﬀer zeroing behaviors and help them navigate the complex
kernel functions.
However, even when the buﬀer zeroing problem is re-
solved. The DoS vulnerabilities introduced by ION’s uniﬁed
interface design still remain. Fundamentally, the uniﬁed in-
terface hurts security as it supports only coarse-grained ac-
cess control (through ﬁle permission of /dev/ion) — a user
has access to either all heaps or none. A ﬁne-grained access
control is necessary to solve the problem. For instance, a
third-party app should not be able to access the heap used
by ﬁngerprint service; we have not seen a case where such
heaps are accessed by any other process. Due to the fact
that ION is a complex system and the entire software stack
is involved (from applications, system services, and kernel
drivers), it is important that the changes minimize side ef-
fects such as backward compatibility and performance hit.
In addition, we should avoid adding new security mecha-
nisms to the kernel and instead try to piggyback on existing
mechanisms oﬀered by Android and Linux if possible.
One straightforward solution can be adding the ﬁne-
grained access control to the kernel to govern how much
memory each user can allocate (based on uid/gid). This
solution maintains backward-compatibility to existing ap-
plications and system services (and can be implemented ef-
ﬁciently). However, the downside is that the kernel need-
s to maintain an access control list for all (uid, ion heap)
pairs that does not ﬁt in any existing Android or Linux
security mechanism. Even SeAndroid/SeLinux cannot ex-
press such a security policy, as it will need to be able to
interpret the argument struct ion_allocation_data * of
ioctl() to extract the heap information. Furthermore, the
additional access control list needs to be changed every time
when customization occurs as heap types and instances may
change.
Alternatively, one can place the access control enforce-
ment at the user space. This requires revoking direct access
to /dev/ion from third-party apps and allowing access to
only system services. The idea is that apps will need to go
through system services to allocate memory from ION heap-
s, in which case the system services can enforce the access
control policy. For instance, if the policy says that a regular
app can allocate memory from SYSTEM heap for graphics
processing of up to 20MB, it will have to send the request
to “mediaserver” (or whichever process that is responsible
for managing graphics buﬀers). The “meidaserver” can then
check if the requested memory is indeed in SYSTEM heap
(not any other heap). Further, it will keep track of how much
memory has been used by the user. This solution requires
grouping all system service uids (e.g., media) into an “ion”
group so that the ﬁle permission of /dev/ion can be changed
to 660 (rw-rw----) where the user owner is system and
group owner is ion. Now an app needs to go through system
services for memory allocation in ION heaps. Since most
apps only need to request memory for graphics buﬀers, the
changes should involve only the app-side libraries that are
responsible for allocating graphics buﬀers (that previously
interacts with /dev/ion directly) and a single system service
(e.g., “mediaserver”). Other heaps are automatically inac-
cessible to third-party apps. This does introduce the over-
head of an additional IPC round trip for each ION memory
allocation. Note that even though the memory allocation
goes through system services, the returned memory pages
still need to be zeroed. With this extra layer of indirection,
the zero operation can in fact be performed by the system
service itself before sending the ﬁle descriptor over to the
app that requested the memory.
the
challenge
Besides
in maintaining
backward-
compatibility, another downside of the alternative design
is that once a process capable of accessing /dev/ion is
compromised, it can still launch the DoS attacks against
other services. That is because of the access control
not ﬁne-grained enough to diﬀerentiate diﬀerent system
services. To truly achieve ﬁne-grained access control, each
system service needs to run with a diﬀerent uid which the
kernel can use to enforce the access control properly (as is
done in the ﬁrst solution).
In summary, we show two potential solutions that have
diﬀerent tradeoﬀs in the following aspects:
backward-
compatibility, performance, and avoid introducing new se-
curity mechanisms in the kernel.
8. RELATED WORK
Android customization and related security issues.
Android customization is known to introduce new security
vulnerabilities across layers. At the application layer, pre-
loaded apps have been shown to require more permissions
than needed [27]. At the framework layer, customized sys-
tem services have been shown to have missing permission
checks [25]. At the system layer, devices ﬁles are shown to
have weak permissions that allow third-party apps to direct-
ly manipulate device drivers and perform privileged opera-
tions [29]. In addition, devices drivers also introduce vulner-
abilities that can directly cause root exploits [28]. A recent
study has shown that by analyzing conﬁguration diﬀerences
across customized Android ROMs, many security ﬂaws can
be reveled in all these layers [10]. Our study is a systematic
analysis of an overlooked system component, Android ION,
that is customizable by SoC and smartphone vendors.
Android DoS vulnerabilities. DoS attacks (e.g., soft
reboot) against the Android system services have been
demonstrated using diﬀerent techniques, e.g., by issuing tar-
geted and repeated requests to the system services [19], or
forking an unlimited number of processes exploiting a weak
local socket permission of the Zygote process [11]. In addi-
tion, a number of other vulnerabilities such as Null pointer
and integer overﬂow have been reported recently [6, 3]. All
of the DoS attacks can cause only the entire Android frame-
work or system to reboot. Our DoS attacks exploit a new
class of vulnerabilities that exist due to the lack of access
control and memory usage limit in various ION heaps. Any
services or apps that require memory from ION can be tar-
geted. Due to the fact that some heaps are mostly used by
one or two services, the DoS impact can be controlled to
aﬀect only those services; this has not been reported before.
Unzeroed/Dirty memory. Dirty memory can leak crit-
ical data to a malicious application, and there are diﬀerent
underlying causes. For instance, recently it has been shown
that newly allocated GPU memory pages are not zeroed,
and may contain data rendered by other applications [20].
In Linux, memory obtained by malloc() will automatically
be zeroed by the underlying OS if a physical page has been
previously used by a diﬀerent process [15]. However, ker-
nel memory allocation functions like kmalloc() do not get
zeroed as they are intended for kernel-space use only; this
has obvious performance beneﬁts. Unfortunately, the intro-
duction of ION and its user-space and kernel-space buﬀer
sharing capability eﬀectively breaks the assumption.
Static analysis tools on Android. Static taint analysis
is one of the most popular techniques used to analyze and vet
Android apps [22, 21, 12, 16, 17, 26]. For instance, Chex [22]
can statically analyze the byte code of Android apps for
component hijacking vulnerabilities. AAPL [21] compares
the the produced information ﬂows for apps in similar cate-
gories (e.g., news) to identify suspicious apps with excessive
information ﬂows compared to others. Besides taint anal-
ysis, many other static analysis tools are built to discover
vulnerabilities. Woodpecker [18] analyzes apps to look for
capability leaks (e.g., through Intent) that allow confused-
deputy attacks. At the system layer, Kratos [25] analyzes
Android framework and look for inconsistent security policy
enforcements. Even though static taint analysis has been
used widely to analyze apps, it is rarely used to analyze the
Android/Linux kernel. Our work applies static taint anal-
ysis in a novel setting to identify unzeroed memory pages
allocated and returned to user space through ION.
9. CONCLUSION
In this paper, we report multiple vulnerabilities of the ION
memory management system that can lead to either DoS or
sensitive information leakage on virtually all Android de-
vices to date. We build a novel static taint analysis tool
to uncover the unzeroed ION heap vulnerabilities systemat-
ically. To demonstrate the seriousness of the vulnerabilities,
we build exploits against several latest Android devices run-
ning latest Android operating systems, including Nexus 6P,
Samsung Galaxy S7, and Huawei Mate 8 that run Android
6.0 and even 7.0 preview. In addition, we analyze and digest
the root causes of the vulnerabilities in depth. Finally, we
outline the defense strategies that have diﬀerent tradeoﬀs
which can shed light on future design of such a large and
complex memory management system.
10. REFERENCES
[1] https://sites.google.com/a/androidionhackdemo.net/
androidionhackdemo/.
[2] Android Low Memory Killer. https://android.
googlesource.com/kernel/common.git/+/android-3.4/
drivers/staging/android/lowmemorykiller.c.
[3] Android MediaServer Bug Traps Phones in Endless
Reboots. http://blog.trendmicro.com/
trendlabs-security-intelligence/
android-mediaserver-bug-traps-phones-in-endless-reboots/.
[4] Arm TrustZone Technology. http://www.arm.com/
products/processors/technologies/trustzone/.
[5] Device Tree. https://www.kernel.org/doc/
Documentation/devicetree/usage-model.txt.
[6] Integer Overﬂow leading to Heap Corruption while
Unﬂattening GraphicBuﬀer.
http://seclists.org/fulldisclosure/2015/Mar/63.
[7] STAC - Static Taint Analysis for C.
http://code.google.com/p/tanalysis/.
[8] The Android ION memory allocator.
https://lwn.net/Articles/480055/, 2012.
[9] Patch: sparc32: dma alloc coherent must honour
GFP ZERO.
https://patchwork.ozlabs.org/patch/386217/, 2014.
[10] Y. Aafer, X. Zhang, and W. Du. Harvesting
Inconsistent Security Conﬁgurations in Custom
Android ROMs via Diﬀerential Analysis. In USENIX
SECURITY, 2016.
[11] A. ARMANDO, A. MERLO, M. MIGLIARDI, , and
L. VERDERAME. Would You Mind Forking this
Process? A Denial of Service Attack on Android (and
Some Countermeasures). In Information S&P
Research, 2016.
[12] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel,
J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel.
Flowdroid: Precise Context, Flow, Field,
Object-Sensitive and Lifecycle-Aware Taint Analysis
for Android Apps. In PLDI, 2014.
[13] L. Cavallaro, P. Saxena, and R. Sekar. On the Limits
of Information Flow Techniques for Malware Analysis
and Containment. In DIMVA, 2008.
[14] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into
Your App Without Actually Seeing It: UI State
Inference and Novel Android Attacks. In Proc. of
USENIX Security, 2014.
[15] N. Douglas. User Mode Memory Page Allocation: A
Silver Bullet For Memory Allocation? Technical
report, 2011.
[16] C. Gibler, J. Crussell, J. Erickson, and H. Chen.
AndroidLeaks: Automatically Detecting Potential
Privacy Leaks in Android Applications on a Large
Scale. In TRUST, 2012.
[17] M. I. Gordon, D. Kim, J. Perkins, L. Gilham,
N. Nguyen, and M. Rinard. Information-ﬂow Analysis
of Android Applications in DroidSafe. In NDSS, 2015.
[18] M. Grace, Y. Zhou, Z. Wang, and X. Jiang.
Systematic Detection of Capability Leaks in Stock
Android Smartphones. In NDSS, 2012.
[19] H. Huang, S. Zhu, K. Chen, and P. Liu. From System
Services Freezing to System Server Shutdown in
Android: All You Need Is a Loop in an App. In CCS,
2015.
[20] S. Lee, Y. Kim, J. Kim, and J. Kim. Stealing
Webpages Rendered on Your Browser by Exploiting
GPU Vulnerabilities. In Oakland, 2014.
[21] K. Lu, Z. Li, V. Kemerlis, Z. Wu, L. Lu, C. Zheng,
Z. Qian, W. Lee, and G. Jiang. Checking More and
Alerting Less: Detecting Privacy Leakages via
Enhanced Data-ﬂow Analysis and Peer Voting. In
NDSS, 2015.
[22] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX:
Statically Vetting Android Apps for Component
Hijacking Vulnerabilities. In CCS, 2012.
[23] M. Nazarewicz. A Deep Dive into CMA.
https://lwn.net/Articles/486301/.
[24] B. Saltaformaggio, R. Bhatia, Z. Gu, X. Zhang, and
D. Xu. GUITAR: Piecing Together Android App GUIs
from Memory Images. In CCS, 2015.
[25] Y. Shao, J. Ott, Q. A. Chen, Z. Qian, and Z. M. Mao.
Kratos: Discovering Inconsistent Security Policy
Enforcement in the Android Framework. In NDSS,
2016.
[26] F. Wei, S. Roy, X. Ou, et al. Amandroid: A Precise
and General Inter-Component Data Flow Analysis
Framework for Security Vetting of Android Apps. In
CCS, 2014.
[27] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The
Impact of Vendor Customizations on Android
Security. In CCS, 2013.
[28] H. Zhang, D. She, and Z. Qian. Android Root and Its
Providers: A Double-Edged Sword. In CCS, 2015.
[29] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang.
The Peril of Fragmentation: Security Hazards in
Android Device Driver Customizations. In Oakland,
2014.