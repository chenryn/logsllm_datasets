---
author: Julia Evans
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 10410
date: '2018-04-29 09:38:16'
editorchoice: false
excerpt: 我发现我可以从 gdb 上调用 C 函数。这看起来很酷，因为在过去我认为 gdb 最多只是一个只读调试工具。
fromurl: https://jvns.ca/blog/2018/01/04/how-does-gdb-call-functions/
id: 9588
islctt: true
largepic: /data/attachment/album/201804/29/093812hpupdpdmp0dwh55u.jpg
permalink: /article-9588-1.html
pic: /data/attachment/album/201804/29/093812hpupdpdmp0dwh55u.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 我发现我可以从 gdb 上调用 C 函数。这看起来很酷，因为在过去我认为 gdb 最多只是一个只读调试工具。
tags:
- gdb
- 调试
thumb: false
title: gdb 如何调用函数？
titlepic: true
translator: ucasFL
updated: '2018-04-29 09:38:16'
---
![](/data/attachment/album/201804/29/093812hpupdpdmp0dwh55u.jpg)
（之前的 gdb 系列文章：[gdb 如何工作（2016）](/article-9491-1.html) 和[三步上手 gdb（2014）](/article-9276-1.html)）
在这周，我发现我可以从 gdb 上调用 C 函数。这看起来很酷，因为在过去我认为 gdb 最多只是一个只读调试工具。
我对 gdb 能够调用函数感到很吃惊。正如往常所做的那样，我在 [Twitter](https://twitter.com/b0rk/status/948060808243765248) 上询问这是如何工作的。我得到了大量的有用答案。我最喜欢的答案是 [Evan Klitzke 的示例 C 代码](https://github.com/eklitzke/ptrace-call-userspace/blob/master/call_fprintf.c)，它展示了 gdb 如何调用函数。代码能够运行，这很令人激动！
我（通过一些跟踪和实验）认为那个示例 C 代码和 gdb 实际上如何调用函数不同。因此，在这篇文章中，我将会阐述 gdb 是如何调用函数的，以及我是如何知道的。
关于 gdb 如何调用函数，还有许多我不知道的事情，并且，在这儿我写的内容有可能是错误的。
### 从 gdb 中调用 C 函数意味着什么？
在开始讲解这是如何工作之前，我先快速的谈论一下我是如何发现这件令人惊讶的事情的。
假如，你已经在运行一个 C 程序（目标程序）。你可以运行程序中的一个函数，只需要像下面这样做：
* 暂停程序（因为它已经在运行中）
* 找到你想调用的函数的地址（使用符号表）
* 使程序（目标程序）跳转到那个地址
* 当函数返回时，恢复之前的指令指针和寄存器
通过符号表来找到想要调用的函数的地址非常容易。下面是一段非常简单但能够工作的代码，我在 Linux 上使用这段代码作为例子来讲解如何找到地址。这段代码使用 [elf crate](https://cole14.github.io/rust-elf)。如果我想找到 PID 为 2345 的进程中的 `foo` 函数的地址，那么我可以运行 `elf_symbol_value("/proc/2345/exe", "foo")`。
```
fn elf_symbol_value(file_name: &str, symbol_name: &str) -> Result> {
    // 打开 ELF 文件 
    let file = elf::File::open_path(file_name).ok().ok_or("parse error")?;
    // 在所有的段 & 符号中循环，直到找到正确的那个
    let sections = &file.sections;
    for s in sections {
        for sym in file.get_symbols(&s).ok().ok_or("parse error")? {
            if sym.name == symbol_name {
                return Ok(sym.value);
            }
        }
    }
    None.ok_or("No symbol found")?
}
```
这并不能够真的发挥作用，你还需要找到文件的内存映射，并将符号偏移量加到文件映射的起始位置。找到内存映射并不困难，它位于 `/proc/PID/maps` 中。
总之，找到想要调用的函数地址对我来说很直接，但是其余部分（改变指令指针，恢复寄存器等）看起来就不这么明显了。
### 你不能仅仅进行跳转
我已经说过，你不能够仅仅找到你想要运行的那个函数地址，然后跳转到那儿。我在 gdb 中尝试过那样做（`jump foo`），然后程序出现了段错误。毫无意义。
### 如何从 gdb 中调用 C 函数
首先，这是可能的。我写了一个非常简洁的 C 程序，它所做的事只有 `sleep` 1000 秒，把这个文件命名为 `test.c` ：
```
#include 
int foo() {
    return 3;
}
int main() {
    sleep(1000);
}
```
接下来，编译并运行它：
```
$ gcc -o test  test.c
$ ./test
```
最后，我们使用 gdb 来跟踪 `test` 这一程序：
```
$ sudo gdb -p $(pgrep -f test)
(gdb) p foo()
$1 = 3
(gdb) quit
```
我运行 `p foo()` 然后它运行了这个函数！这非常有趣。
### 这有什么用？
下面是一些可能的用途：
* 它使得你可以把 gdb 当成一个 C 应答式程序（REPL），这很有趣，我想对开发也会有用
* 在 gdb 中进行调试的时候展示/浏览复杂数据结构的功能函数（感谢 [@invalidop](https://twitter.com/invalidop/status/949161146526781440)）
* [在进程运行时设置一个任意的名字空间](https://github.com/baloo/setns/blob/master/setns.c)（我的同事 [nelhage](https://github.com/nelhage) 对此非常惊讶）
* 可能还有许多我所不知道的用途
### 它是如何工作的
当我在 Twitter 上询问从 gdb 中调用函数是如何工作的时，我得到了大量有用的回答。许多答案是“你从符号表中得到了函数的地址”，但这并不是完整的答案。
有个人告诉了我两篇关于 gdb 如何工作的系列文章：[原生调试：第一部分](https://www.cl.cam.ac.uk/%7Esrk31/blog/2016/02/25/#native-debugging-part-1)，[原生调试：第二部分](https://www.cl.cam.ac.uk/%7Esrk31/blog/2017/01/30/#native-debugging-part-2)。第一部分讲述了 gdb 是如何调用函数的（指出了 gdb 实际上完成这件事并不简单，但是我将会尽力）。
步骤列举如下：
1. 停止进程