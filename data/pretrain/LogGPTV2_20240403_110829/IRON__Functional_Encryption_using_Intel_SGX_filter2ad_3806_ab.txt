ory called the Enclave Page Cache (EPC). The EPC is currently
limited to 128 MB, consisting of 4KB page chunks, and applica-
tions can use approximately 90 MB. When an enclave program is
loaded, its code and static data are copied from untrusted memory
to pages inside the EPC. A measurement of the contents of these
pages called MRENCLAVE (essentially a SHA256 hash of the page
contents) is also stored inside the EPC in a structure that is linked
to the enclave. Entry into the enclave is not permitted throughout
this process until the measurement has been finalized. The creation
process establishes an enclave identity, which is used as a handle
to transfer program control to the enclave. The hardware enforces
that only the executable code pages associated with a particular
enclave identity can access the other pages associated with that
identity.
Sealing. Every SGX processor has a key called the Root Seal Key
that is embedded during the manufacturing process. An enclave can
use the EGETKEY instruction to derive a key called Seal Key from
the Root Seal Key that is specific to the enclave identity, which
can be used to encrypt/authenticate data and store it in untrusted
memory. Sealed data can be recovered by the same enclave even
after enclave is destroyed and restarted on the same platform. But
the Seal key cannot be derived by a different enclave on the same
platform or any enclave on a different platform.
Attestation. There are two forms of attestation: local and re-
mote.
• Local attestation. Local attestation is between two enclaves on
the same platform. Roughly, since enclaves on the same machine
share the same Root Seal Key, they can derive a shared key (called
Report Key) for symmetric authentication. An enclave can call a
special instruction EREPORT that fetches the MRENCLAVE and
metadata of an enclave and MACs it with the Report Key (along
with additional optional data provided as input to the instruction).
This is called a report.
• Remote attestation. Remote attestation generates a report that
can be verified by any remote party. Roughly, an enclave first
local attests to a special enclave called the Quoting Enclave (QE),
sending it a report. The QE verifies local reports and convert
them into a quote. The quote contains the same underlying data
but is signed with a private key for an anonymous group signa-
ture scheme called Intel Enhanced Privacy ID (EPID) [36]. The
QE obtains this private key during through a protocol with the
Intel Provisioning Server upon device initialization. This protocol
includes a symmetric authentication involving Root Provisioning
Key that was embedded in the device during the manufacturing
process and also shared with the Intel Provisioning Server. Cur-
rently, verifying quotes requires contacting the Intel Attestation
Server, though in principle this could be done by any verifier that
has the group public key.
SGX TCB. SGX stands out in that its TCB consists only of the
CPU microcode and privileged containers, however it also requires
the user to trust in Intel’s key management infrastructure for sign-
ing microcode and various service enclaves. In particular, we must
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA767trust that the root seal keys embedded into devices are not leaked
from the manufacturing facility, and that the Intel Provisioning
Server safely manages root provisioning keys as well as EPID mas-
ter secret keys.
SGX side-channel attacks. The security of SGX is still evolving
[35] but the current version is susceptible various side-channel
attack which can be divided into two classes: physical attacks, which
are mounted by an attacker with physical access to the CPU, and
software attacks, which are mounted by software running on the
same host as the CPU, such as a compromised OS. SGX does not
claim to defend against physical attacks such as power analysis,
although successful physical attacks against SGX have not yet been
demonstrated.
Several software attacks have been demonstrated so far, includ-
ing cache-timing attacks [20], page-fault attacks [59], branch shad-
owing [38] and synchronization bugs [58]. Leaking information
through these side-channels can be avoided by ensuring that en-
clave programs are data-oblivious, i.e. do not have memory access
patterns or control flow branches that depend on the values of
sensitive data. Our implementation of enclave programs that deal
with sensitive information are data-oblivious.
3 SYSTEM DESIGN
3.1 Architecture overview
Platforms. The Iron system consists of a single trusted authority
(Authority) platform and arbitrarily many decryption node plat-
forms, which may be added dynamically. Both the trusted authority
and decryption node platforms are Intel SGX enabled. Just as in a
standard FE system, the Authority has the role of setting up pub-
lic parameters as well as distributing functional secret keys, or the
credentials required to decrypt functions of ciphertexts. A client
application, which does not need to run on an Intel SGX enabled
platform, will interact once with the Authority in order to obtain
credentials (i.e., a secret key) for a function and will then interact
with any decryption node in order to perform functional decryp-
tions of ciphertexts.
Protocol flow. The public parameters that the Authority gener-
ates includes a public encryption key for a public key cryptosystem
and a public verification key for a cryptographic signature scheme.
The Authority manages the corresponding secret decryption key
and secret signing key. Through remote attestation, the Authority
platform provisions the secret decryption key to a special enclave
called a decryption enclave (DE) on the decryption node(s). Cipher-
texts are encrypted using the public encryption key. To authorize a
client application to run a function on ciphertexts, the Authority
signs the function code using its secret signing key, and sends this
signature to the client. When the client sends a ciphertext, function
code, and valid signature on the function code to the decryption
node, the DE with access to the secret key checks the signature,
decrypt the ciphertext, run the function on the plaintext, and output
the result. The enclave aborts on invalid signatures.
Decryption enclaves & function enclaves. Thus far in our simple
description of the protocol flow, there is a single enclave on the
decryption node (the DE) that manages the secret decryption key,
checks function signatures, and performs functional decryption.
This requires the DE to receive code as input (after enclave initial-
ization) and to both check a signature on the code as well as execute
the code. However, in the current version of SGX, enclaves cannot
dynamically allocate new code pages. All enclave memory as well
as the Read, Write, and Execute (RWX) permissions of each page
must be committed before initialization (i.e., at build time). There-
fore, the only way for the DE to execute the function it receives
as native code would be to pre-allocate empty pages at build time
that are both writeable and executable, and to write the function
code it receives to these pages.1 There are several drawbacks to
this approach, namely that it requires the DE to predetermine the
maximum size of any function it will support, and conflicts with
executable space protection (the function code is more vulnerable
to exploits that might overwrite code pages). A second option is
to execute the function inside the DE as interpreted code, but this
could greatly impact performance for more complex functions.
The third option is to load functions in entirely separate function
enclaves and take advantage of local attestation, which already pro-
vides a way for one enclave to verify the code running in another.
This is the cleanest design and the simplest to implement. One trade-
off, however, is that creating a new enclave for each authorized
function is a relatively expensive operation. This has little impact
on applications that run a few functions on many ciphertexts, but
would impact applications that run many functions on only a few
ciphertexts. We demonstrate in our evaluation (Section 4) that for
a simple functionality like Identity Based Encryption (IBE) inter-
preting the function (i.e. identity match) in an enclave is an order
of magnitude faster.
Authorization policies. The Authority has full responsibility over
implementing a given function authorization policy, which governs
how it decides whether or not to provide a given client with a
signed function. The enclaves on the decryption platform do not
play any role in implementing this policy. Typically, the details of
the authorization policy are beyond the scope of an FE construc-
tion and are application specific (we mentioned several examples
in the introduction). It is important to note that in classical FE
once a client obtains a secret key it can use it arbitrarily. Thus
authorization policies are one-time decisions, and cannot cover key
revocation, or limits on the number of times a client may run a
function, etc. In contrast, more expressive policies may be possible
in our SGX-assisted version of FE. For example, the secret key could
be tagged with an expiration time that the enclaves on the decryp-
tion platform could check before running decryption by utilizing
SGX’s trusted time service [34]. Enforcing limits on the number of
times a client can run a function would require maintaining non-
volatile enclave state, for which SGX does not immediately provide
rollback protection (see [42] for a recent system providing rollback
protection using SGX’s monotonic counters [33]. Additionally, it
would require sharing state across all active decryption enclaves
with assistance from the Authority.
Key manager enclave. The Authority uses the key manager en-
clave (KME) to generate encryption and signing keys, and uses
1This will change in SGX2[35], which adds instructions to dynamically load new code
pages into enclaves. We can revisit the design based on this new feature when SGX2
becomes available.
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA768FE Decrypt Setup. When a new decryption node is initialized,
the KME establishes a secure channel with a decryption enclave
(DE) running on the decryption node SGX-enabled platform. The
KME receives from the decryption node a remote attestation, which
demonstrates that the decryption node is running the expected
DE software and that the DE has the correct signature verifica-
tion key vksign. The remote attestation also establishes a secure
channel, i.e. contains a public key generated inside the DE. After
verifying the remote attestation, the KME sends skpke to the DE
over the established secure channel, and authenticates this message
by signing it with sksign.At this point, it is not at all obvious why
the KME needs to sign its message to the DE. Indeed, since skpke is
encrypted, it seems that there isn’t anything a man-in-the-middle
attacker could do to harm security. If the message from the KME to
the DE is replaced, the decryption node platform would simply fail
to decrypt ciphertexts encrypted under pkpke. However, it turns
out that authenticating the KME’s messages is necessary for our
formal proof of security to work (see Section 6).
FE Keygen. A client application requests from the Authority
the “secret key" for a function f .The Authority decides whether
the client application is authorized to run the given function f ,
and if not it rejects the request. Otherwise, it produces a secret
key for the function f as follows. The function f is wrapped in
a function enclave program, described in more details below. The
Authority generates an instance of this function enclave and obtains
an attestation report for the enclave including the MRENCLAVE
value mrenclavef. It then uses the KME signing handle to sign
mrenclavef using sksign. The signature sigf is returned to the client
application, and serves as the “secret key" skf .
FE.Encrypt. Inputs are encrypted with pkpke using a CCA2 se-
cure public key encryption scheme.
FE.Decrypt. Decryption begins with a client application connect-
ing to a decryption node that has already been provisioned with the
decryption key skpke. The client application may also run locally
on the decryption node. The following steps ensue:
(1) If this is the client’s first request to decrypt the function
f, the client sends the function enclave binary enclavef to
the decryption node, which the decryption node then runs.
Note that the binary enclavef it initialized by untrusted code
running on the decryption node, not by the DE.
(2) The client initiates a key exchange with the function enclave,
and receives a remote attestation that it has successfully es-
tablished a secure channel with an Intel SGX enclave running
enclavef. (Local client applications skip this step).
(3) The client sends over the established secure channel a vector
of ciphertexts and the KME signature sigf that it obtained
from the Authority in FE.Keygen.
(4) The function enclave locally attests to the DE and passes
sigf . The DE validates this signature against vksign and the
MRENCLAVE value mrenclavef, which it obtains during lo-
cal attestation. If this validation passes, the DE delivers the
secret key skpke to the function enclave. The DE authen-
ticates its message to the function enclave by wrapping it
Figure 1: Iron Architecture and Protocol Flow
this enclave as an oracle to authorize functions. This might seem
unnecessary (in our current implementation) as the Authority can
use the KME to sign any function of its choice, however it offers
several advantages. First, it serves as a way to protect the FE master
key against an attacker that does not have long term access to the
machine running the key manager enclave. Furthermore, we can
imagine a more general scenario where the authorization policy is
run entirely inside a key manager enclave, which only signs func-
tions when provided with suitable proof of authorization which
could come from a decentralized authority like a public blockchain
or rely on an independent PKI.
3.2 FE Protocols
FE Setup. The Authority platform runs a secure enclave called
the key manager enclave (KME) that it uses to generate a pub-
lic/private key pair (pkpke, skpke) for a CCA2 secure public key
cryptosystem and a verification/signing key pair (vksign, sksign)
for a cryptographic signature scheme. The keys pkpke and vksign
are published while the keys skpke and sksign are sealed with the
KME’s sealing key and kept in non-volatile storage. Note that the
Authority has full access to the KME and can thus use it to authorize
any function, thus the KME is simply used for key management.
The handle to the KME’s signing function call, which produces
signatures using sksign, serves as the trusted authority’s master
secret key.
Session D1:  Functional Encryption and ObfuscationCCS’17, October 30-November 3, 2017, Dallas, TX, USA769inside its own local attestation report.2 Finally, the function
enclave uses skpke to decrypt the ciphertexts and compute f
on the plaintext values. The output is returned to the client
application over the function enclave’s secure channel with
the client application.
resistance to timing attacks and cache-timing attacks. We imple-
mented oblivious versions of all three client-loaded functions that
we include in our evaluation, which was easy to achieve by imple-
menting data comparisons in x86 assembly with the setg and sete
conditional instructions (similar to [47]).
4 IMPLEMENTATION AND EVALUATION
We implemented a prototype of the Iron system with a single
decryption node and a client application running locally on the
decryption node. The implementation was developed in C++ us-
ing the Intel(R) SGX SDK 1.6 for Windows3. All enclaves link the
MSR Elliptic Curve Cryptography Library 2.0 MSR_ECClib.lib4
as a trusted static library, which is used to implement the elliptic
curve ElGamal cryptosystem in a Weierstrass curve over a 256-bit
prime field, and sgx_tcrypto.lib, which includes EC256-DHKE key
exchange, ECDSA signatures over the NIST P-256 elliptic curve, Ri-
jndael AES-GCM encryption on 128-bit key sizes, and SHA256. We
implemented a CCA2-secure hybrid encryption scheme using El-
Gamal, AES-GCM, and SHA256 in the standard way. We tested the
prototype implementation on a platform running an Intel Skyake
i7-6700 processor at 3.40 GHz with 8 GiB of RAM and Windows
Server 2012 R2 Standard operating system, compiled with 64-bit
and Debug mode build configurations.
We evaluate three special cases of functional encryption: identity
based encryption (IBE), order revealing encryption (ORE), and three
input DNF (3DNF). We chose these primarily to demonstrate how
our SGX assisted versions of these primitives perform in compari-
son to purely cryptographic versions that have been implemented,