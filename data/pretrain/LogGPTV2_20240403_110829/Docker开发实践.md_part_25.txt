查看Docker的版本信息，可以通过如下代码实现：
$ curl -X GET http://localhost:2376/version
{"ApiVersion":"1.16","Arch":"amd64","GitCommit":"5bc2ff8","GoVersion":"go1.3.3","KernelVersion":"3
.13.0-24-generic","Os":"linux","Version":"1.4.1"}
$ docker version
Client version: 1.4.1
Client API version: 1.16
Go version (client): go1.3.3
Git commit (client): 5bc2ff8
OS/Arch (client): linux/amd64
Server version: 1.4.1
Server API version: 1.16
Go version (server): go1.3.3
Git commit (server): 5bc2ff8
可以看到，通过API方式和docker version命令获得的信息是一样的。
接下来，我们分别说明容器和镜像相关的API。
14.3.1 容器相关的API
容器相关的API都在/containers/路径下面。接下来，我们分别说明容器的操作。由于通过curl
命令来访问API的操作相对简单，操作本身无需再重复演示说明，所以接下来就将焦点集中在API
14.3 远程API 159
本身。根据API的规范性，我们会按方法、用例请求、用例返回、请求参数、返回的状态码以及
1
curl操作这种标准模板的形式来逐个说明，这样不仅可以满足读者动手操作的需求，而且可以将
本部分内容作为手册翻阅。 2
1. 列出容器
3
方法：GET /containers/json
用例请求：GET /containers/json?all=1&before=8dfafdbc3a40&size=1 HTTP/1.1
4
用例返回：
5
HTTP/1.1 200 OK
Content-Type: application/json
[
6
{
"Id": "8dfafdbc3a40",
"Image": "base:latest",
7
"Command": "echo 1",
"Created": 1367854155,
"Status": "Exit 0",
9
"Ports":[{"PrivatePort": 2222, "PublicPort": 3333, "Type": "tcp"}],
"SizeRw":12288,
"SizeRootFs":0
8
},
...
]
10
请求参数
 all：表示是否显示所有容器，其值为1/True/true或0/False/false。若为真，则会显示全 10
部（包含已经停止的）容器，否则只显示正在运行的容器，默认值为0。
 limit：仅显示最新建立的几个容器。 11
 since：显示比指定Id的容器更晚创建的容器。
 before：显示比指定Id的容器更早创建的容器。 13
 size：是否显示容器的大小，其值为1/True/true或0/False/false。
 filters：使用JSON格式的条件过滤容器，例如退出码（exited=），status运行状态 14
（status=restarting|running|paused|exited）。
15
返回的状态码
 200：返回正常。
16
 400：参数错误。
 500：服务器错误。
17
curl操作：
18
curl -X GET http://localhost:2376/containers/json?all=1
160 第14章 Docker API
curl命令中的-X参数后面跟要执行的HTTP操作，这里是GET操作，后续我们还会看到POST、
PUT、DELETE操作。
2. 创建容器
方法：POST /containers/create
用例请求：
POST /containers/create HTTP/1.1
Content-Type: application/json
{
"Hostname":"",
"Domainname": "",
"User":"",
"Memory":0,
"MemorySwap":0,
"CpuShares": 512,
"Cpuset": "0,1",
"AttachStdin":false,
"AttachStdout":true,
"AttachStderr":true,
"Tty":false,
"OpenStdin":false,
"StdinOnce":false,
"Env":null,
"Cmd":[
"date"
],
"Entrypoint": "",
"Image":"base",
"Volumes":{
"/tmp": {}
},
"WorkingDir":"",
"NetworkDisabled": false,
"MacAddress":"12:34:56:78:9a:bc",
"ExposedPorts":{
"22/tcp": {}
},
"SecurityOpts": [""],
"HostConfig": {
"Binds":["/tmp:/tmp"],
"Links":["redis3:redis"],
"LxcConf":{"lxc.utsname":"docker"},
"PortBindings":{ "22/tcp": [{ "HostPort": "11022" }] },
"PublishAllPorts":false,
"Privileged":false,
"Dns": ["8.8.8.8"],
"DnsSearch": [""],
"VolumesFrom": ["parent", "other:ro"],
"CapAdd": ["NET_ADMIN"],
"CapDrop": ["MKNOD"],
14.3 远程API 161
"RestartPolicy": { "Name": "", "MaximumRetryCount": 0 },
1
"NetworkMode": "bridge",
"Devices": []
}
2
}
用例返回：
3
HTTP/1.1 201 Created
Content-Type: application/json
4
{
"Id":"e90e34656806"
"Warnings":[]
5
}
JSON参数
6
 Hostname：容器内系统的主机名。
 Domainname：容器内系统的域名。 7
 User：容器内用户。
 Memory：内存（字节）。 9
 MemorySwap：包含Swap交换存储在内的总存储量。
 AttachStdin：是否附加到标准输入。
8
 AttachStdout：是否附加到标准输出。
 AttachStderr：是否附加到标准错误输出。
10
 Tty：是否需要附加伪终端。
 Env：环境变量，形如VAR=value。
10
 Cmd：容器要运行的命令。
 Entrypoint：容器的入口点。
11
 Image：容器基于的镜像。
 Volumes：数据卷。
13
 WorkingDir：默认工作目录。
 NetworkDisabled：是否打开网络。
14
 ExposedPorts：暴露端口，形如 "ExposedPorts": { "/: {}" }。
 SecurityOpts：安全选项，例如配置SELinux。
15
 HostConfig：子项配置。
 Binds：数据卷配置，形如host_path:container_path:ro。
16
 Links：容器连接，形如container_name:alias。
 PortBindings：端口映射，形如{ /: [{ "HostPort": "" }] }。
17
 PublishAllPorts：是否开放所有服务端口，并随机映射到本地主机。
 Privileged：是否给予容器root权限访问宿主主机。
18
162 第14章 Docker API
 Dns：Dns列表。
 DnsSearch：Dsn搜索域。
 VolumesFrom：数据容器引用，形如[:]`。
 CapAdd：容器所使用的内核机制列表。
 Capdrop：容器不适用的内核机制列表。
 RestartPolicy：容器退出时的重启机制。
 NetworkMode：容器的网络类型，支持bridge、host和container:。
请求参数
 name：容器的名字。
状态码
 201：返回正常。
 404：无该容器。
 406：容器不能附加为终端（容器已经停止）。
 500：服务器错误。
curl操作：
$ curl -X POST -H "Content-Type: application/json" http://localhost:2376/containers/create -d '{
"Hostname":"",
...
}'
curl命令执行了POST请求，参数-H表示需要添加的HTTP头，这里添加了Content-Type:
application/json表明应用的数据类型为JSON。参数-d后面跟的是JSON数据，这是POST投递的
数据体，用单引号括起。这里我们把创建容器的JSON配置投递给Docker后台。
3. 启动容器
方法：POST /containers/(id)/start
用例请求：
POST /containers/(id)/start HTTP/1.1
Content-Type: application/json
用例返回：HTTP/1.1 204 No Content
参数：（无）
状态码：（略）
curl操作：curl -X POST http://localhost:2376/containers/4fa6e0f0c678/start
创建好容器之后，我们可以通过start操作来启动该容器。在上述curl操作中，containers/
后面是容器的Id，无需写全，可以使用Id的前面几位，即能够区分不同容器就行了。
14.3 远程API 163
4. 停止容器 1
方法：POST /containers/(id)/stop
2
用例请求：POST /containers/e90e34656806/stop?t=5 HTTP/1.1
用例返回：HTTP/1.1 204 No Content
3
参数
4
 t：延时多少秒后停止。
状态码
5
 304：容器已经停止。
curl操作：curl -X POST http://localhost:2376/containers/4fa6e0f0c678/stop 6
5. 删除容器
7
方法：DELETE /containers/(id)
用例请求：DELETE /containers/16253994b7c4?v=1 HTTP/1.1 9
用例返回：HTTP/1.1 204 No Content
8
参数
 v：其值为1/True/true或者0/False/false，用于删除关联的数据卷，默认值为false。 10
 force：其值为1/True/true或者0/False/false，用于强制删除，默认值为false。
状态码：（略） 10
curl操作：curl -X DELETE http://localhost:2376/containers/4fa6e0f0c678
11
删除容器发送的HTTP操作是DELETE。
关于容器API的示例我们就说到这里。为了方便读者快速查阅，我们将容器相关的API总结 13
一下，具体如表14-1所示。
14
表14-1 常用容器相关API列表
功 能 方 法 参 数
15
列出容器 GET /containers/json all、limit等
创建容器 POST /containers/create name、JSON参数
16
查看信息 GET /containers/(id)/json
正在运行的进程 GET /containers/(id)/top
获取日志 GET /containers/(id)/logs follow、stdout、stderr等 17
查看文件变更 GET /containers/(id)/changes
导出 GET /containers/(id)/export 18
164 第14章 Docker API
（续）
功 能 方 法 参 数