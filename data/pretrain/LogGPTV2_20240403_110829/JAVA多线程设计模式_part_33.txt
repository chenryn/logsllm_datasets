“主动对象”的接口（API）。
新增方法
章）的进阶说明“Swing 的Event-Dispatching Thread”里说明过了。
面包L·层外皮，使多线程的Clieml参与者可以使用它
的：
参与者所调用的对象就不是多线程环境。所以 Servant 只会有单线程执行，是安全
者对应到Channel 参与者，而 Scheduler 参与者则对应到Consumer 参与者。
参者对应到Produccr-Consumer Pattem 的 Producer 参与者，ActivationQueue 参与
需要小心谨慎。不过没关系，因为只有条 Schcduler 参与者的线程会调用 Servant
的意思，
注意并发性
即使Producer参与者有很多条，只要Consumer参与者只有条，那Consumer
程相关的共享互异，都是交给Producer-ConsumerPattern（第5章）来管理。Client
与者的方法。Proxy参与者可能会被多个线程（Client参与者）不断调用，但是多
我们可以把 Active Object Pattem 看作是在以单线程为前提的 Servant 参与者外
●Scrvant参与者只能山单一线程调用（sequential}）
●Proxy 参与者可多个线程调用（{concurrent }）
methodAlpha f sequentiai
m Servant 参者中'，
也就是说，比起调月 Proxy参与者的方法，其实调用 Servant 参与者的方法时更
methodAlpha { concurrent }
Proxy参与者中，下列的方法加有{concurrent限制，这是“并发执行”的意思。
若要在范例程序山加上新的方法时，修改的顺序如下：
范例程序中．
简单的说，就是：
me-l.odBeta I seqlent ial
methodBeta ↑ concurrent }
请观察图12-4.
（1）在ActiveObject 接口里定义新的方法；
4）
3)7
（2）继承MethodRequest类，建立新的类来对应这个方法：
在Servant类里加上新的方法。
在 Proxy类里加上新的方法：
：ActiveObject 接口有 makeString 与 displayString 两个方法。这是
注意方法所附加的并发性限制。
下列的方法则加有{sequentiai限制，这是“逐－执行”
Active Object-
一接受异步消息的主动对象
12年
---
## Page 332
线程（Client参与者）与进行execution的线程（Scheduler参与者）拆开。
在这里作出了第5章所提过的“invocation与execution的分离”，将进行invocation的
程上运行；而“方法的执行（cxecution）”部分则是在 Scheduler 参与者的线程上运行的。
是在哪个线程上运行的”。
迈向分布处理一—将线程的界限移到机器的界限
相以异步消息对话的系统，似乎满有趣的喔。
定义多个“上动对象”，让它们互相对话，其实也是可以的。也就是说，可以由 Servant
参与者的 execute 方法"等。这样一来，就可以在 ConcreteMethodRequest 参与者上对每
方法。若ConcreteMethodRequest 参与者可以执行，则 guard 方法的返回值为 true。
者担仟很多调度相关的工作。
Object Pattern 的描述。 在[POSA2]对 Active Object Pattem 的描述中，Scheduler 参与
Scheduler参与者的角色
318
“主动对象”之间的对话
个方法加上防卫条件。
法时，并不需要修改SchedulerThread类。
些方法，只负责调用MethodRequest参与者的execute方法而已。所以要加上新的方
是 Proxy 类的1.作，建立 RealResult 参与者则是 Servamt 类的任务。
Active Object Pattern 中，“方法的调用（invocation）”部分是在Client参与者的线
[POSA2]－-书的写法如下：首先，在每个ConcreteMethodRequest参与者定义了 guard
注5：附录E的[POSA2]巧中，本书的execute方法使用了call方法的名称：
第5章也曾经提过，只要将线程拆开，就可能将线程所运行的机器也拆开。也就
相信阅读本书到这里的读者，在看到·个方法时，应该会去意识到“这个方法
本书刂以“Client参与者使用主动对象”的形式描述这个Patterm。不过，其实
详细内容请参考附录E列出的[POSA2]一书。
本章对 Active Object Pattem 的描述中，参考了附录E的[POSA2]－书对 Active
如果方法需要返同值，还要使用 Furure Patterm（第9章）。建立 Future 参与者
本章末的练习问题12-2，就要练习加上新的方法
---
## Page 333
Storage Pattern 并不简单。
Thread-Specific Storage Pattern (第 11 章）
Worker Thread Pattern（第8章）
FuturePattern（第9章）
对应到 Active Object Pattern 的 AetivationQueue 参与 者。
参者传到 Schcduler 参者的手上，Producer-Consumer Pattern 的Channel参与者，
Producer-Consumer Pattern（第5章）
相关Pattern
技术。详请见下南的URL.与Java 的参考文件。
进行处理的技术。为了计对象在网络上传送，Java义使用了序列化（serialization）·
X技术。RM】是在白己的计算机调用方法，而可以由网络对面的另台让算机求实际
调用与返回值的设置因为都具有“对象”的形式了，所以可以通过网络来往了。
传递的东西是仆么，没销，就是MethodRequest 参与者与Resulil参与者。万法的
是分离进行invocation与进行execution的机器，在中间使用网络连接起米。要说网络
重点回顾
书6：
为了将返回值传给Client参与者，使用了Future Patterm参与者，
Producer-Consumcr Paltem用米让Client 参与者可以安全地将ConcrctceMethodRequest
这·章我们’学习了Active ObjectPattern:
   s s-
● Java Remote Method Invocation ( RMl)
实现Scheduler参与者的部分，使用到了Worker Thread Patterne
我们可以说是“将线程的界限移到机器的界限”。
ht tp://java.sur.com/prodccts/jdk'rri/
·般义称为marshalling-
Active Object—
一接受异步消息的主动对象
Active Object Pattcm
12
6
---
## Page 334
请就您对范例程序的认知，阅读下列语句，正确的请回答○，不正确的请回答
Pattermn 组成了具有下列特征的“主动对象"。
通过ConcreteMethodRequest 参与者，将作委托给 Servant 参与者：
Scheduler参与者的I作。Scheduler参与者在与Client 参与者不同的线程上执行，并
参与者会将请求转换成1个ConcreteMethodRequest 参与者对象，通过 Scheduler 参
理的委托顺序!与处理的执行顺序可以独立。
能要将执行结果返回给Client 参与者，也就是可以双向的调用。而且，我们希望处
希望对 Client 参与者的执行造成影响。
为 Servant 参与者进行处理需要花·些时间，我们宁可延后处理进行的时划，也不
2
上，
练习问题
Active Object Pattem 里，混合使用了本书前面学到的各种 Pattem。Active Object
另外，并不是Client 参与者单方面对Servant 参与者调用，Servant 参与者也可
问题12-1（基础知识的确认）
解答请见附录
那么，就进入练习问题吧.
●可返问执行结果
·实际的处理由单线程运行
·异步接受外部传来的请求
这就是 Active Object Patterm。
为了做到双向的调用，使用了Future Pattern（第9章）。
从 ActivationQueue 参与者里选出要执行的 ConereteMethodRequest 参与者，是
实际进行处理的部分，不在Client 参与者的线程上进行。
在这里以“调用Proxy参与者的方法”表现Client 参与者送出的请求，而Proxy
这个时候，就要使用Active Object Pattern。
这里有委托处理的人（Client参与者）与执行处理的人（Servant 参与者）。因
（3）每次调用 displayString 方法时，都会制作出新的线程。
（2）MakerClientThread 类的线程所执行的 makeString 方法，被以 Servant 类安装。
（1）Proxy 类与 Servant 类安装了ActiveObject 接口。
X。
+
（4）由于数个线程都可以连接上Servant 类，因此需要进行共享与斥。
）拥有独立的线程
可白由的调度
---
## Page 335
[请在范例程序的“上动对象”中，加上下列 add 方法，用来进行任意精度的整
public class AddciiertThread extends Thread
import
import activeobject.Activeobject;
createActiveObject(l;
public class Main i
import activeobject.ActiveobjectFactory;
List 12-16
行范例如图12-7所示：
的丨进制 String 实例，如果发生任何错误，getResultValue 方法就返回 null。执
对返问值调用 getResultValue 方法，可以获取表示x与y两个整数相加后结果
在这里，参数x与参数y都是"1234"般的十进制字符串。返回位是Result 对象
public Result add(String x, String y)
List 12-17
import activeobjeot.Activeobject;
数加法运算，
问题12-2（追加方法）
(9）MakerClientThread 的线程调用出H makeString 时，参数值 count 越大则从方
（8）Servant 类的 makeString方法随着所制作的字符出越长而处理时间就越久。
示：任意精度的整数加法运算可使用java.maih.Biglnteger 类。
(7）MakerClientThread 类的线程在调用出i getResultValue 方法时，如果还没制
9
51
public AddcliertThread(Srring name, Activeobject activeobject)
private Strirg y = "i";
private String x = "1";
private final Activeobject activeobject;
Activeobjecl. activeobject - ActiveobjectFactory.
public static vcid main(strirg[l args) I
法问来的时间越久。
作出字符串的话，线程会wait，
）ActivationQueue 类的 takeRequest 方法会被数个线程调用，
ActivationQueue 类的 putRequest 方法会被数个线程调用。
t activeobject..Restlt;
new AddcliertThread("Diara", activeobject),start();
AddClientThread 类 ( AddClientThread.java)
测试用的Main 类（Main.java）
Active Object
一接受异步消息的主动对象
12
---
## Page 336
322
(以下略。CTRL+C 结束程序)
Diana: 19740274219868223167 + 31940434634990099905 = 51680708854858323072
Diana : 12200160415121876738 + 19740274219868223167 = 31940434634990099905
Diana: 2880067194370816120 + 4660046610375530309 = 7540113804746346429
Diana:
Diana:
Diana:
Diana:
Diana:
Diana:
Diana:
Diana:
Diana:
Diana:
Diana:
Diana: 7540113804746346429 + 12200160415121876738 = 19740274219868223167
Diana:
（中略）
pubiic void run()
try { 
this.activeobject = activeobject;
super(name);
144+233= 377
89 + 144 = 233
2
13 + 21 
8+13=21
5+8=13
m
一
catch
for (int i = O; true; i++） {
+34
+
+
+89 
L
L
M
(InterruptedException é)
y=z
X=Y
 System.cut.println(Thread.currentThread() .
String z = (String)result.getResultvalue();
Thread.sleep(100l;
//有返回值的调用
H
144
55
34
图12-7执行范例
---
## Page 337
请使用ActiveObectPattem建立一支程序，
注意：解答中并没有再正在网络上查找，只是搁置约5秒后开始随便输出URL.
列出包含该字符串的网址、执行的画面如图12-8~图12-10所示
问题12-3（GUI上的应用）
129查找单字word后，等特约5秒会开始出现URL
ArtoeetSple
Metwebyeit Saole
图12-8自动程序时
Active Object
heawgru.mi
可从大量网页中查找特定字符串
接受异步消息的主动对象
12章
---
## Page 338
Java多线程设计模式
图12-10垂续输入新的查找关键字，会分别展开查找
Aetivoohgect Saple
e,=h
sewtenroe.tmi
---
## Page 339
的模式语言
多线程程序设计
总 结
---
## Page 340
如图13-1所示。
妥善描述出原理、重点、诀窍、技巧，就是模式语言，
问题群的解决方法的集合。不只是程序设计或软件开发，无论在什么领域，只要能
单纯把Pattermn 集合在一起就好了。集合相关、互补的许多 Pattern，浅显地描述之问
段落里。
通常，多项外力还互为不可兼得的关系。在这一·章中，外力一并描述在问题的
Patterm 都会有一个容易了解的名称。
Language).
Pattern 与 Pattern Language
326
自己再次面对问题的时候，可以选择恰当的Paterm 加以套用。
的关系，这就是模式语言。
线程的程序，但是如今看来仿佛已有阔别数年之感。
多线程程序设计的模式语言
为了使 Paterm之间的关系--目了然，在此先将本书出现的 Patterm 绘出关系图，
阅读模式语言，可以了解该范畴领域中会碰到的各种问题与各种解决方式，使
Pattem可说是对一个问题的一种解决方法，而模式语言则可说是对某个领域的
Patterm（模式）是“针对某个在特定背景下，--直反复发生的问题的解决方案”
本书也进入了最后一-章。我们在本书－·开始的时候，曾经写过下面这样一个单
下面就要使用本-书出现过的Patlern，来描述多线程的模式语言。
问题中，还具有称为外力（force）的条件。这在lntroduction2“多线程程
背景（context）是指发生问题的状况与背景、环境。
在开始回头看【2个Patterm前，在这里想稍微提一下 Pattermn 与模式语言（Pattern
在这一章中，将以模式语言的形式，回顾一下在本书所学到的12个 Pattem。
pubiic class Mair 
pubiic static void maintString[] args[l) [
for (int i= 0; i< i0000; i++) ↓
System.out.println("Good!");
---
## Page 341
别名
Single Threaded Execution Pattern (第 1 章)
● Critical Region
● Critical Section
—-能通过这座桥的，只有一个人
响应性
Read-Write Lock
刊机用4厅时会用到
Producer-Consumer
1
：传送请求时会用到
111
参与者拆开米时改用
一
袋少时改用
Guarded Suspension安全
进行处理时会用到
Immutable
图13-1本书出现的 Pattetmn关系图
程时改用（线
L动的成本时改用
想要降低线程点
获态不会变
化是改用
(.hroughput-
等待处理结束时会用到
Aetive Object
Single Thread
Erecution
因为每个线程都分配
：没必要用到
自己的空间了，所以
需要返恒值时收用
要线程待）
要使用防卫条件限
Storage
《安全性”》
传送返回值时会用到
安全性
多线程程序设计的模式语言
—生命稚
Future
Two-Phast Teminatlon
Balklag
<嘀应性
响应性
特结
---
## Page 342
328
梦景
可使用Read-Write Lock Pattern（第6草）。