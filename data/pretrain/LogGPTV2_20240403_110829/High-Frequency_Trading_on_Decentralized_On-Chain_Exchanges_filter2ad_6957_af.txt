proportion of assets X and Y held by the adversary in the
liquidity pools before and after the attack. Analogously,
xA, xA∗, yA, yA∗ ∈ Z+ denote the amounts of asset X and
Y held by the adversary before and after the attack.
L
1−L , ym
L
1−L , yn
L
L
(Lx, Ly, xA, yA) attack−−−−→ (L∗
(15)
The state transition (cf. Equation 15) is proﬁtable to
y, xA∗, yA∗)
x, L∗
the adversary, if the following conditions hold:
• L∗
xA∗ ≮ xA,
≮ Lx, L∗
• At least one of the following holds:
L∗
x > Lx, or L∗
≮ Ly,
and
y > Ly, or xA∗ > xA, or yA∗ > yA
Let x∗ and y∗ denote the amounts of asset X and Y in
liquidity pools after the attack. The corresponding proﬁt
yA∗ ≮ yA,
x
y
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
442
is determined by comparing adversary’s states before and
after the attack (cf. Equation 16, 17, 18).
x = xA∗ − xA + (L∗
∆A
y = yA∗ − yA + (L∗
∆A
proﬁt = Z(∆A
x − Lx)x∗
y − Ly)y∗
x , ∆A
y )
(16)
(17)
(18)
2) Attack Execution: We now consider an adversarial
liquidity provider that owns a share Lxx0, Lyy0 of the
total liquidity pool of a AMM X/Y market. The victim’s
transaction TV transacts asset X for Y . If the adversary
does not front-run TV , the AMM state changes according
to Equation 19, 20. In that case, the adversary A receives
a commission fee c, as stated in Equation 21, 22.
−−−−−−−−−−−−→ s1 = (x1, y1),
TransactXForY(δV
x )
s0
y = y0 − y1
δV
x ) + cy(s0, δV
x )
= L × cy(s0, δV
x )
, yA + cA,TV
(19)
(20)
(21)
x1 = x0 + δV
x ,
x0y0
y1 =
x1 − cx(s0, δV
= L × cx(s0, δV
x ),
cA,TV
y
y
x
s0
cA,TV
x
(Lx, Ly, xA, yA) −→ (Lx, Ly, xA + cA,TV
) (22)
This liquidity provider attempts to gain a proﬁt through
the following order of transactions.
TA1: a front-running transaction executed before TV (e.g.
by paying a higher transaction fee than TV ). TA1 with-
draws (Lxx0, Lyy0) from the liquidity pool (x0, y0)
and results in the state changes of Equation 23 and 24.
(23)
−−−−−−−−−−−−−−−−−−−→ s1 = (x1, y1)
RemoveLiquidity(Lxx0,Lyy0)
y1 = y0 − Lyy0
x1 = x0 − Lxx0,
(24)
TV : a victim’s transaction modiﬁes the state according to
x2 = x1 + δV
x ,
Equation 25 and 26.
−−−−−−−−−−−−→ s2 = (x2, y2),
TransactXForY(δV
x )
y = y1 − y2
δV
(25)
x ) + cy(s1, δV
x )
(26)
TA2: a back-running transaction executes after TV (e.g.
by paying a lower transaction fee than TV ). TA2 adds
back liquidity for the adversary to maintain the same
proportion of overall liquidity (Lx, Ly), modifying the
state according to Equation 27 and 28.
x2 − cx(s1, δV
y2 =
x1y1
s1
AddLiquidity( Lx x2
−−−−−−−−−−−−−−−−−→ s3 = (x3, y3)
1−Lx
Ly y2
1−Ly
)
,
s2
(27)
,
y3 = y2
x3 = x2
1 − Lx
(28)
TA3: executed after TA2, TA3 rebalances the AMM assets
by converting Y to X, such that the adversary retains
the same amount of asset X as before the attack (i.e.
after the attack). This
the adversary holds xA +cA,TV
1 − Ly
x
rebalancing process is necessary because the amount
of asset X added to liquidity pool in TA2 exceeds the
amount withdrawn from TA1. TA3 modiﬁes the state
according to the Equations 29, 30 and 31.
TransactXForY(δA3
y )
−−−−−−−−−−−−−→ s4 = (x4, y4),
s3
x4 =
x3y3
y4 − cy(s3, δA
y ) + cx(s3, δA
y ),
x = x3 − x4
δA3
(29)
y4 = y3 + δA3
(30)
y
x
− Lxx0
+ cA,TV
x = Lxx2
δA3
1 − Lx
(31)
The overall state change of this attack is described in
Equation 32. At the end of this attack, the adversary A
has managed to retain L proportion of the total liquidity
as a result of TA2, retains the same total amount of asset
X (as a result of TA3) but increases their holding of asset
Y , generating a proﬁt. Equation 33 yields the proﬁt.
(Lx, Ly, xA, yA) attack−−−−→ (Lx, Ly, xA + cA,TV
x
, yA∗)
(32)
proﬁt = yA∗ − (yA + cA,TV
y
)
(33)
Appendix B
Additional Details For Liquidity Provider
Figure 13 quantiﬁes the optimal adversarial revenue by
a liquidity provider, given no other attacks are running.
Figure 14 shows the expected proﬁt of an adversarial
liquidity provider (cf. Section IV) given 2, 5, and 10
adversaries, on the Uniswap DAI market at block 9M.
The victim transaction is ﬁxed with a 0.5% slippage
protection. The minimum proﬁtable victim input with a
single adversary is 27.8 ETH (4, 141.37 USD).
Appendix C
Possible Mitigations
In this section we elaborate on how users could protect
their trades from sandwich attacks, and we discuss possible
AMM design changes to strengthen their resilience.
A. AMM Speciﬁc Settings
We identify two primary protection possibilities that
could be adopted given the exsting AMM DEX designs
(such as Uniswap).
1) Allow for Zero Slippage: The simplest protection
for a user, is to not allow its trades to pay any slippage. If
an adversary were to front-run, the user’s trade execution
will fail. The user would not overpay the trade due to
its slippage protection, but the user still
is liable to
pay blockchain transaction fees. This protection solution
moreover is not scalable in terms of trades per second, as
it would limit the number of trades an AMM DEX can
execute to 1 transaction per blockchain block.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
443
B. Cryptography-based Defences
In the following we discuss possible cryptography based
defence techniques against sandwich attacks.
1) Multi-Party Computation (MPC): The sandwich
attack is possible because the current consensus protocol
used in Ethereum fails to protect the actual ordering of
the transactions from adversarial manipulations (i.e. fee
manipulations). Thus, it is tempting for one to design an
AMM DEX that has a authorized set of “trusted” nodes
to faithfully sequence actions from liquidity takers before
getting the actions executed by the smart contract. This
proposal, however, makes AMM DEX like Uniswap no
longer permissionless, and the authorized set can again
manipulate the order of the transactions. To address the
later, Kelkar et al. [36] propose a new set of Byzantine
Consensus protocols, that achieve a fair ordering of re-
ceived transactions. Thus, one can require the authorized
set of nodes to run such protocol to achieve order fairness
among transactions.
2) Commit-and-Reveal Protocols: A commitment
scheme is a two-round protocol that allows one to commit
to chosen values (i.e. function, input) while keeping those
values hidden from others (hiding) during the committing
round, and later during the revealing round, s/he can
decide to reveal the committed value. The commitment
schemes are binding if and only if the party cannot change
the value after committing to it. We brieﬂy discuss the
use of commitment scheme to prevent front-running in the
following.
a) Standard Commit-and-Reveal Protocol: To pre-
vent the sandwich attack in AMM DEX, one can use
commitment schemes to sequence actions of traders dur-
ing committing round and execute actions during re-
vealing round. In particular, during committing round,
traders commit to function calls (i.e. TransactXforY ,
addLiquidity, removeLiquidity) via commitment trans-
actions, and the ordering of function calls is determined
based on the order of commitments while the function calls
are hidden due to the hiding property of a commitment
scheme. In the revealing round, parties can decide to reveal
the function calls, and the AMM DEX will execute the
transactions according to the order of the commitments
appeared in the committing round.
One of the limitations of commit-and-reveal protocol is
its usability, as it requires participants to be aware of both
rounds of the protocol to complete their actions. Another
limitation is that adversary is still able to probabilistically
perform sandwich attack. In particular, because the com-
mitting round is transparent, the adversary can see other
traders’ commitments and commits several transactions
before and after the commitments of honest traders. S/he
can reveal only those transactions that are proﬁtable.
b) Commit-and-Reveal Protocol tailored for the
Ethereum Blockchain: To hide the committing phase from
the adversary, Breidenbach et al. [17] proposed subma-
rine commitments via contract creation in Ethereum (i.e.
Fig. 13: Optimal adversarial revenue under a sandwich
attack by a liquidity provider, when V sells assets for ETH
on ﬁve Uniswap exchanges (0.3% fee, adversarial break-
even at 0.01 ETH).
2) Limit Liquidity Taker’s Input: Recall that sand-
wich attacks are only proﬁtable if the victim’s input
amount is above a threshold, which we named it as the
minimum proﬁtable victim input (cf. Section IV). This
threshold depends on both the total liquidity of the market
and the AMM DEX’s design and conﬁguration (pricing
formula,
fees and etc.). One possible protection is to
disable transactions above the minimum proﬁtable victim
input in the smart contracts.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
444
(a) Two liquidity provider adversaries
(b) Five liquidity provider adversaries
(c) Ten liquidity provider adversaries
Fig. 14: Simulated sandwich attack by 2, 5 and 10 competing adversarial liquidity provider on a taker (Uniswap, block
9M, 0.3% fees, 0.5% unexpected slippage).
CREATE2 EVM opcode [2]). The essence of this approach is
to hide commitment transaction among newly generated
Ethereum addresses. In particular, a submarine commit-
ment scheme contains the following phases:
Committing Phase: to commit in a submarine com-
mitment scheme, the liquidity taker with address AddrTaker
posts a transaction Tcom that sends some fund, val, to an
address Addrcom. Addrcom is a commitment of the form:
Addrcom = H(AddrAMM-DEX, H(AddrTaker, key), code)
sends
Revealing Phase: To reveal, AddrTaker
where H(·) is Keccak-256, key is the transaction spe-
ciﬁc key to AMM DEX (e.g. a concatenation of action
transactXforY , input δx, and 256-bit randomness r),
and code is the EVM init code of the refund contract that
can send any money received to the AddrAMM-DEX.
to
AddrAMM-DEX, key value key = (action||input||r), the trans-
action data Tcom, the commitBlock (the block number
includes Tcom), and a Merkle-Partricia proof, πTcom which
proves the membership of Tcom in commitBlock. With
commitBlock, πTcom, and Tcom, AddrAMM-DEX veriﬁes that
Tcom occurred in commitBlock. And after learning key,
AddrAMM-DEX can recompute Addrcom, veriﬁes the deposit
balance val, and proceeds with action and input (i.e.
transactXforY (δx)).
Deposit Collection Phase: from code, AddrAMM-DEX
can use CREATE2 opcode to create an instance of the refund
contract at Addrcom and collect $val from Addrcom.
3) Conﬁdential Transactions: Another potential
attempt to mitigate front-running attack is to hide the
details of the transaction sent to AMM DEX by adapting
several techniques [50],
for conﬁdential
transactions. However, as pointed out by Eskandari et
al. [25], to prevent front-running, one needs to hide:
(1) The name of the functions (i.e. TransactXforY ,
[18],
[16],
[26]
addLiquidity, removeLiquidity) being invoked
(2) The parameters supplied to the functions (i.e. δx, δy)
(3) The current state of the DEX (i.e. (x, y)).
While systems like Hawk [38] and Ekiden [19] try to
achieve all three properties for arbitrary functions, they
rely on oﬀ-chain components (i.e. trusted execution en-
vironment) for maintaining encrypted states and proving
the correctness of state transitions. On the other hand,
a proposal for Ethereum blockchain, Zether [18], tries to
achieve (2, 3) for a speciﬁc type of function (i.e. money
transferring). The states in Zether are the ElGamal en-
cryptions of account’s balances. The state transitions can
be made due to the correctness of the non-interactive zero-
knowledge proof (NIZK) system used in their construction
and the (additively) homomorphic properties of Elgamal
encryption.
However, recall that in an AMM DEX, an action like
TransactXforY (δx) requires the contract to send an δy
of asset Y back to the liquidity taker where δy is computed
based on the pricing function f(·) and the current pool’s
state (x, y). Therefore, if one decides to use a system that
relies on NIZK systems like Zether for AMM DEX with
hidden state, the trusted oﬀ-chain components are needed
to generate cryptographic proofs from the unencrypted
state to trigger the transferring back function.
Moreover, regardless of the privacy techniques used
for hiding transaction details and pool’s states, we
show that it is impossible to achieve the conﬁden-
tiality for the third property for a constant product
AMM.
In particular, at the initial pool state s =
(x, y), an adversary can issue two consecutive actions,
TransactXforY (δx), TransactXforY (δ0
x), and it ob-
tains δy and δ0
y determined by the current state (x, y).
The adversary can solve the system of two equations and
two unknown (x, y) to determine the current pool state.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:33:46 UTC from IEEE Xplore.  Restrictions apply. 
445