    ROUND1(edx, eax, ebx, ecx, 10,  9,  0x02441453)
    ROUND1(ecx, edx, eax, ebx, 15, 14, -0x275E197F)
    ROUND1(ebx, ecx, edx, eax,  4, 20, -0x182C0438)
    ROUND1(eax, ebx, ecx, edx,  9,  5,  0x21E1CDE6)
    ROUND1(edx, eax, ebx, ecx, 14,  9, -0x3CC8F82A)
    ROUND1(ecx, edx, eax, ebx,  3, 14, -0x0B2AF279)
    ROUND1(ebx, ecx, edx, eax,  8, 20,  0x455A14ED)
    ROUND1(eax, ebx, ecx, edx, 13,  5, -0x561C16FB)
    ROUND1(edx, eax, ebx, ecx,  2,  9, -0x03105C08)
    ROUND1(ecx, edx, eax, ebx,  7, 14,  0x676F02D9)
    ROUND1(ebx, ecx, edx, eax, 12, 20, -0x72D5B376)
    ROUND2(eax, ebx, ecx, edx,  5,  4, -0x0005C6BE)
    ROUND2(edx, eax, ebx, ecx,  8, 11, -0x788E097F)
    ROUND2(ecx, edx, eax, ebx, 11, 16,  0x6D9D6122)
    ROUND2(ebx, ecx, edx, eax, 14, 23, -0x021AC7F4)
    ROUND2(eax, ebx, ecx, edx,  1,  4, -0x5B4115BC)
    ROUND2(edx, eax, ebx, ecx,  4, 11,  0x4BDECFA9)
    ROUND2(ecx, edx, eax, ebx,  7, 16, -0x0944B4A0)
    ROUND2(ebx, ecx, edx, eax, 10, 23, -0x41404390)
    ROUND2(eax, ebx, ecx, edx, 13,  4,  0x289B7EC6)
    ROUND2(edx, eax, ebx, ecx,  0, 11, -0x155ED806)
    ROUND2(ecx, edx, eax, ebx,  3, 16, -0x2B10CF7B)
    ROUND2(ebx, ecx, edx, eax,  6, 23,  0x04881D05)
    ROUND2(eax, ebx, ecx, edx,  9,  4, -0x262B2FC7)
    ROUND2(edx, eax, ebx, ecx, 12, 11, -0x1924661B)
    ROUND2(ecx, edx, eax, ebx, 15, 16,  0x1FA27CF8)
    ROUND2(ebx, ecx, edx, eax,  2, 23, -0x3B53A99B)
    ROUND3(eax, ebx, ecx, edx,  0,  6, -0x0BD6DDBC)
    ROUND3(edx, eax, ebx, ecx,  7, 10,  0x432AFF97)
    ROUND3(ecx, edx, eax, ebx, 14, 15, -0x546BDC59)
    ROUND3(ebx, ecx, edx, eax,  5, 21, -0x036C5FC7)
    ROUND3(eax, ebx, ecx, edx, 12,  6,  0x655B59C3)
    ROUND3(edx, eax, ebx, ecx,  3, 10, -0x70F3336E)
    ROUND3(ecx, edx, eax, ebx, 10, 15, -0x00100B83)
    ROUND3(ebx, ecx, edx, eax,  1, 21, -0x7A7BA22F)
    ROUND3(eax, ebx, ecx, edx,  8,  6,  0x6FA87E4F)
    ROUND3(edx, eax, ebx, ecx, 15, 10, -0x01D31920)
    ROUND3(ecx, edx, eax, ebx,  6, 15, -0x5CFEBCEC)
    ROUND3(ebx, ecx, edx, eax, 13, 21,  0x4E0811A1)
    ROUND3(eax, ebx, ecx, edx,  4,  6, -0x08AC817E)
    ROUND3(edx, eax, ebx, ecx, 11, 10, -0x42C50DCB)
    ROUND3(ecx, edx, eax, ebx,  2, 15,  0x2AD7D2BB)
    ROUND3(ebx, ecx, edx, eax,  9, 21, -0x14792C6F)
    /* Save updated state */
    addl $0x67452301, %eax
    addl $0xefcdab89, %ebx
GutHib
.jpg
    addl $0x98badcfe, %ecx
    addl $0x10325476, %edx
    movq  $dist, %r8
    nop
    nop
    nop
    nop
    movl %eax, 0(%r8)
    movl %ebx, 4(%r8)
    movl %ecx, 8(%r8)
    movl %edx, 12(%r8)
import requests
from bs4 import BeautifulSoup
import re
import ssl
import time
import random
from lxml import etree
user_agent = [
    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 
1.1.4322; .NET CLR 2.0.50727)",
    "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 
2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)",
    "Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET 
CLR 1.1.4322; .NET CLR 2.0.50727)",
    "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)",
    "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET 
CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)",
    "Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; 
Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET 
CLR 1.0.3705; .NET CLR 1.1.4322)",
    "Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 
2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)",
    "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like 
Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)",
    "Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, 
Safari/419.3) Arora/0.6",
    "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-
Ninja/2.1.1",
    "Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 
Kapiko/3.0",
    "Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5",
    "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 
Kazehakase/0.5.6",
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) 
Chrome/17.0.963.56 Safari/535.11",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like 
Gecko) Chrome/19.0.1036.7 Safari/535.20",
    "Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 
Version/11.52",
]
_url = "https://github.com/awesome-ctf/TCTF2021-Guthib/commit/"#{0}"
strings = "abcdef1234567890"
def _get_substr():
    _substr = ""
    for a in strings:
        for b in strings:
            for c in strings:
                for d in strings:
                    yield a + b + c + d
import tqdm
def handle_response(response,i):
    if len(response)<20:
        return
    fo = open(i, "w")
    print(type(response))
    fo.write(response)
    fo.close()
def generate():
    for cnt, i in enumerate(_get_substr()):
        if cnt+1 % 101 == 0: time.sleep(10)
        try:
            response = requests.get(_url+i, headers={'User-Agent': 
random.choice(user_agent)}).content#.decode('utf-8',"ignore")
            if cnt % 100 ==0:
                print(cnt)
            handle_response(response,i)
        except Exception as e:
            print(e)
if __name__ == '__main__':
    generate()
APIcommit hash
welcome
-
singer
from PIL import Image
l = ['C5', 'C#5', 'D5', 'D#5', 'E5', 'F5', 'F#5', 'G5', 'G#5', 'A5', 'A#5', 'B5',
     'C6', 'C#6', 'D6', 'D#6', 'E6', 'F6', 'F#6', 'G6', 'G#6', 'A6', 'A#6', 'B6',
     'C7', 'C#7', 'D7', 'D#7', 'E7', 'F7', 'F#7', 'G7', 'G#7', 'A7', 'A#7', 'B7', ]
[::-1]
s = '''A6-D#6
G#6
G6
G6
G#6
A6-D#6
C6-G5
F#5
F#5
C6-G5
A6-F#6,D#6
A6,F#6,D#6
A6,F#6-D#6
A6,D#6
A6-D#6
A6,D#6
F#7-C7
E7-D7
F7,C#7
F#7,C7
E6,A#5
E6-A#5
E6,A#5
A6-D#6
A6-G6
F#6-E6
A6-D#6
C#7-G6
C#7,G6
C#7,A#6,G6
C#7,A#6-G6
'''
im = Image.new('L', (100, 40))
for idx, line in enumerate(s.splitlines()):
    if ',' in line:
        parts = line.split(',')
        for part in parts:
            if '-' not in part:
                print(idx, l.index(part))
                im.putpixel((idx+2, l.index(part)), 255)
            else:
                start, end = part.split('-')
                start, end = l.index(start), l.index(end)
                print(idx, (start, end))
                start, end = min(start, end), max(start, end)
                for i in range(start, end+1):
                    im.putpixel((idx+2, i), 255)
    elif '-' in line:
        start, end = line.split('-')
        start, end = l.index(start), l.index(end)
        print(idx, (start, end))
        start, end = min(start, end), max(start, end)
        for i in range(start, end+1):
            im.putpixel((idx+2, i), 255)
Survey
    elif len(line):
        print(idx, l.index(line))
        im.putpixel((idx+2, l.index(line)), 255)
    else:
        print('='*50)
im.save('1.png')