        isDirectory: boolean;
        isSymlink: boolean;
      }
      /** Synchronously reads the directory given by `path` and returns an iterable
       * of `Deno.DirEntry`.
       *
       * ```ts
       * for (const dirEntry of Deno.readDirSync("/")) {
       *   console.log(dirEntry.name);
       * }
       * ```
       *
       * Throws error if `path` is not a directory.
       *
       * Requires `allow-read` permission. */
      export function readDirSync(path: string): Iterable;
      /** Reads the directory given by `path` and returns an async iterable of
       * `Deno.DirEntry`.
       *
       * ```ts
       * for await (const dirEntry of Deno.readDir("/")) {
       *   console.log(dirEntry.name);
       * }
       * ```
       *
       * Throws error if `path` is not a directory.
       *
       * Requires `allow-read` permission. */
      export function readDir(path: string): AsyncIterable;
      /** Synchronously copies the contents and permissions of one file to another
       * specified path, by default creating a new file if needed, else overwriting.
       * Fails if target path is a directory or is unwritable.
       *
       * ```ts
       * Deno.copyFileSync("from.txt", "to.txt");
       * ```
       *
       * Requires `allow-read` permission on fromPath.
       * Requires `allow-write` permission on toPath. */
      export function copyFileSync(fromPath: string, toPath: string): void;
      /** Copies the contents and permissions of one file to another specified path,
       * by default creating a new file if needed, else overwriting. Fails if target
       * path is a directory or is unwritable.
       *
       * ```ts
       * await Deno.copyFile("from.txt", "to.txt");
       * ```
       *
       * Requires `allow-read` permission on fromPath.
       * Requires `allow-write` permission on toPath. */
      export function copyFile(fromPath: string, toPath: string): Promise;
      /** Returns the full path destination of the named symbolic link.
       *
       * ```ts
       * Deno.symlinkSync("./test.txt", "./test_link.txt");
       * const target = Deno.readLinkSync("./test_link.txt"); // full path of ./test.txt
       * ```
       *
       * Throws TypeError if called with a hard link
       *
       * Requires `allow-read` permission. */
      export function readLinkSync(path: string): string;
      /** Resolves to the full path destination of the named symbolic link.
       *
       * ```ts
       * await Deno.symlink("./test.txt", "./test_link.txt");
       * const target = await Deno.readLink("./test_link.txt"); // full path of ./test.txt
       * ```
       *
       * Throws TypeError if called with a hard link
       *
       * Requires `allow-read` permission. */
      export function readLink(path: string): Promise;
      /** Resolves to a `Deno.FileInfo` for the specified `path`. If `path` is a
       * symlink, information for the symlink will be returned instead of what it
       * points to.
       *
       * ```ts
       * const fileInfo = await Deno.lstat("hello.txt");
       * assert(fileInfo.isFile);
       * ```
       *
       * Requires `allow-read` permission. */
      export function lstat(path: string): Promise;
      /** Synchronously returns a `Deno.FileInfo` for the specified `path`. If
       * `path` is a symlink, information for the symlink will be returned instead of
       * what it points to..
       *
       * ```ts
       * const fileInfo = Deno.lstatSync("hello.txt");
       * assert(fileInfo.isFile);
       * ```
       *
       * Requires `allow-read` permission. */
      export function lstatSync(path: string): FileInfo;
      /** Resolves to a `Deno.FileInfo` for the specified `path`. Will always
       * follow symlinks.
       *
       * ```ts
       * const fileInfo = await Deno.stat("hello.txt");
       * assert(fileInfo.isFile);
       * ```
       *
       * Requires `allow-read` permission. */
      export function stat(path: string): Promise;
      /** Synchronously returns a `Deno.FileInfo` for the specified `path`. Will
       * always follow symlinks.
       *
       * ```ts
       * const fileInfo = Deno.statSync("hello.txt");
       * assert(fileInfo.isFile);
       * ```
       *
       * Requires `allow-read` permission. */
      export function statSync(path: string): FileInfo;
      /** Options for writing to a file. */
      export interface WriteFileOptions {
        /** Defaults to `false`. If set to `true`, will append to a file instead of
         * overwriting previous contents. */
        append?: boolean;
        /** Sets the option to allow creating a new file, if one doesn't already
         * exist at the specified path (defaults to `true`). */
        create?: boolean;
        /** Permissions always applied to file. */
        mode?: number;
      }
      /** Synchronously write `data` to the given `path`, by default creating a new
       * file if needed, else overwriting.
       *
       * ```ts
       * const encoder = new TextEncoder();
       * const data = encoder.encode("Hello world\n");
       * Deno.writeFileSync("hello1.txt", data);  // overwrite "hello1.txt" or create it
       * Deno.writeFileSync("hello2.txt", data, {create: false});  // only works if "hello2.txt" exists
       * Deno.writeFileSync("hello3.txt", data, {mode: 0o777});  // set permissions on new file
       * Deno.writeFileSync("hello4.txt", data, {append: true});  // add data to the end of the file
       * ```
       *
       * Requires `allow-write` permission, and `allow-read` if `options.create` is
       * `false`.
       */
      export function writeFileSync(
        path: string,
        data: Uint8Array,
        options?: WriteFileOptions
      ): void;
      /** Write `data` to the given `path`, by default creating a new file if needed,
       * else overwriting.
       *
       * ```ts
       * const encoder = new TextEncoder();
       * const data = encoder.encode("Hello world\n");
       * await Deno.writeFile("hello1.txt", data);  // overwrite "hello1.txt" or create it
       * await Deno.writeFile("hello2.txt", data, {create: false});  // only works if "hello2.txt" exists
       * await Deno.writeFile("hello3.txt", data, {mode: 0o777});  // set permissions on new file
       * await Deno.writeFile("hello4.txt", data, {append: true});  // add data to the end of the file
       * ```
       *
       * Requires `allow-write` permission, and `allow-read` if `options.create` is `false`.
       */
      export function writeFile(
        path: string,
        data: Uint8Array,
        options?: WriteFileOptions
      ): Promise;
      /** Synchronously write string `data` to the given `path`, by default creating a new file if needed,
       * else overwriting.
       *
       * ```ts
       * await Deno.writeTextFileSync("hello1.txt", "Hello world\n");  // overwrite "hello1.txt" or create it
       * ```
       *
       * Requires `allow-write` permission, and `allow-read` if `options.create` is `false`.
       */
      export function writeTextFileSync(path: string, data: string): void;
      /** Asynchronously write string `data` to the given `path`, by default creating a new file if needed,
       * else overwriting.
       *
       * ```ts
       * await Deno.writeTextFile("hello1.txt", "Hello world\n");  // overwrite "hello1.txt" or create it
       * ```
       *
       * Requires `allow-write` permission, and `allow-read` if `options.create` is `false`.
       */
      export function writeTextFile(path: string, data: string): Promise;
      /** Synchronously truncates or extends the specified file, to reach the
       * specified `len`.  If `len` is not specified then the entire file contents
       * are truncated.
       *
       * ```ts
       * // truncate the entire file
       * Deno.truncateSync("my_file.txt");
       *
       * // truncate part of the file
       * const file = Deno.makeTempFileSync();
       * Deno.writeFileSync(file, new TextEncoder().encode("Hello World"));
       * Deno.truncateSync(file, 7);
       * const data = Deno.readFileSync(file);
       * console.log(new TextDecoder().decode(data));
       * ```
       *
       * Requires `allow-write` permission. */
      export function truncateSync(name: string, len?: number): void;
      /** Truncates or extends the specified file, to reach the specified `len`. If
       * `len` is not specified then the entire file contents are truncated.
       *
       * ```ts
       * // truncate the entire file
       * await Deno.truncate("my_file.txt");
       *
       * // truncate part of the file
       * const file = await Deno.makeTempFile();
       * await Deno.writeFile(file, new TextEncoder().encode("Hello World"));
       * await Deno.truncate(file, 7);
       * const data = await Deno.readFile(file);
       * console.log(new TextDecoder().decode(data));  // "Hello W"
       * ```
       *
       * Requires `allow-write` permission. */
      export function truncate(name: string, len?: number): Promise;
      export interface NetAddr {
        transport: "tcp" | "udp";
        hostname: string;
        port: number;
      }
      export interface UnixAddr {
        transport: "unix" | "unixpacket";
        path: string;
      }
      export type Addr = NetAddr | UnixAddr;
      /** A generic network listener for stream-oriented protocols. */
      export interface Listener extends AsyncIterable {
        /** Waits for and resolves to the next connection to the `Listener`. */
        accept(): Promise;
        /** Close closes the listener. Any pending accept promises will be rejected
         * with errors. */
        close(): void;
        /** Return the address of the `Listener`. */
        readonly addr: Addr;
        [Symbol.asyncIterator](): AsyncIterableIterator;
      }
      export interface Conn extends Reader, Writer, Closer {
        /** The local address of the connection. */
        readonly localAddr: Addr;
        /** The remote address of the connection. */
        readonly remoteAddr: Addr;
        /** The resource ID of the connection. */
        readonly rid: number;
        /** Shuts down (`shutdown(2)`) the writing side of the TCP connection. Most
         * callers should just use `close()`.
         *
         * **Unstable** because of lack of testing and because Deno.shutdown is also
         * unstable.
         * */
        closeWrite(): void;
      }
      export interface ListenOptions {
        /** The port to listen on. */
        port: number;
        /** A literal IP address or host name that can be resolved to an IP address.
         * If not specified, defaults to `0.0.0.0`. */
        hostname?: string;
      }
      /** Listen announces on the local transport address.
       *
       * ```ts
       * const listener1 = Deno.listen({ port: 80 })
       * const listener2 = Deno.listen({ hostname: "192.0.2.1", port: 80 })
       * const listener3 = Deno.listen({ hostname: "[2001:db8::1]", port: 80 });
       * const listener4 = Deno.listen({ hostname: "golang.org", port: 80, transport: "tcp" });
       * ```
       *
       * Requires `allow-net` permission. */
      export function listen(
        options: ListenOptions & { transport?: "tcp" }
      ): Listener;
      export interface ListenTlsOptions extends ListenOptions {
        /** Server certificate file. */
        certFile: string;
        /** Server public key file. */
        keyFile: string;
        transport?: "tcp";
      }
      /** Listen announces on the local transport address over TLS (transport layer
       * security).
       *
       * ```ts
       * const lstnr = Deno.listenTls({ port: 443, certFile: "./server.crt", keyFile: "./server.key" });
       * ```
       *
       * Requires `allow-net` permission. */
      export function listenTls(options: ListenTlsOptions): Listener;
      export interface ConnectOptions {
        /** The port to connect to. */
        port: number;
        /** A literal IP address or host name that can be resolved to an IP address.
         * If not specified, defaults to `127.0.0.1`. */
        hostname?: string;
        transport?: "tcp";
      }
      /**
       * Connects to the hostname (default is "127.0.0.1") and port on the named
       * transport (default is "tcp"), and resolves to the connection (`Conn`).
       *
       * ```ts
       * const conn1 = await Deno.connect({ port: 80 });
       * const conn2 = await Deno.connect({ hostname: "192.0.2.1", port: 80 });
       * const conn3 = await Deno.connect({ hostname: "[2001:db8::1]", port: 80 });
       * const conn4 = await Deno.connect({ hostname: "golang.org", port: 80, transport: "tcp" });
       * const conn5 = await Deno.connect({ path: "/foo/bar.sock", transport: "unix" });
       * ```
       *
       * Requires `allow-net` permission for "tcp" and `allow-read` for unix. */
      export function connect(options: ConnectOptions): Promise;
      export interface ConnectTlsOptions {
        /** The port to connect to. */
        port: number;
        /** A literal IP address or host name that can be resolved to an IP address.
         * If not specified, defaults to `127.0.0.1`. */
        hostname?: string;
        /** Server certificate file. */
        certFile?: string;
      }
      /** Establishes a secure connection over TLS (transport layer security) using
       * an optional cert file, hostname (default is "127.0.0.1") and port.  The
       * cert file is optional and if not included Mozilla's root certificates will
       * be used (see also https://github.com/ctz/webpki-roots for specifics)
       *
       * ```ts
       * const conn1 = await Deno.connectTls({ port: 80 });
       * const conn2 = await Deno.connectTls({ certFile: "./certs/my_custom_root_CA.pem", hostname: "192.0.2.1", port: 80 });
       * const conn3 = await Deno.connectTls({ hostname: "[2001:db8::1]", port: 80 });
       * const conn4 = await Deno.connectTls({ certFile: "./certs/my_custom_root_CA.pem", hostname: "golang.org", port: 80});
       * ```
       *
       * Requires `allow-net` permission.
       */
      export function connectTls(options: ConnectTlsOptions): Promise;
      export interface Metrics {
        opsDispatched: number;
        opsDispatchedSync: number;
        opsDispatchedAsync: number;
        opsDispatchedAsyncUnref: number;
        opsCompleted: number;
        opsCompletedSync: number;
        opsCompletedAsync: number;
        opsCompletedAsyncUnref: number;
        bytesSentControl: number;
        bytesSentData: number;
        bytesReceived: number;
      }
      /** Receive metrics from the privileged side of Deno. This is primarily used
       * in the development of Deno. 'Ops', also called 'bindings', are the go-between
       * between Deno JavaScript and Deno Rust.
       *
       *      > console.table(Deno.metrics())
       *      ΓöîΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓö¼ΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÉ
       *      Γöé         (index)         Γöé Values Γöé
       *      Γö£ΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓö╝ΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöñ
       *      Γöé      opsDispatched      Γöé   3    Γöé
       *      Γöé    opsDispatchedSync    Γöé   2    Γöé
       *      Γöé   opsDispatchedAsync    Γöé   1    Γöé
       *      Γöé opsDispatchedAsyncUnref Γöé   0    Γöé
       *      Γöé      opsCompleted       Γöé   3    Γöé
       *      Γöé    opsCompletedSync     Γöé   2    Γöé
       *      Γöé    opsCompletedAsync    Γöé   1    Γöé
       *      Γöé opsCompletedAsyncUnref  Γöé   0    Γöé
       *      Γöé    bytesSentControl     Γöé   73   Γöé
       *      Γöé      bytesSentData      Γöé   0    Γöé
       *      Γöé      bytesReceived      Γöé  375   Γöé
       *      ΓööΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓö┤ΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÇΓöÿ
       */
      export function metrics(): Metrics;
      interface ResourceMap {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        [rid: number]: any;
      }
      /** Returns a map of open resource ids (rid) along with their string
       * representations. This is an internal API and as such resource
       * representation has `any` type; that means it can change any time.
       *
       * ```ts
       * console.log(Deno.resources());
       * // { 0: "stdin", 1: "stdout", 2: "stderr" }
       * Deno.openSync('../test.file');
       * console.log(Deno.resources());
       * // { 0: "stdin", 1: "stdout", 2: "stderr", 3: "fsFile" }
       * ```
       */
      export function resources(): ResourceMap;
      export interface FsEvent {
        kind: "any" | "access" | "create" | "modify" | "remove";