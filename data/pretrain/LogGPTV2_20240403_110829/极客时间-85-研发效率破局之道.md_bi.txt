## 查看分支跟踪的远程代码仓细节    > git remote show origin    * remote origin      Fetch URL: PI:EMAIL:jungejason/git-atomic-demo.git      Push  URL: PI:EMAIL:jungejason/git-atomic-demo.git      HEAD branch: master      Remote branch:        master tracked      Local branches configured for 'git pull':        master  merges with remote master      Local ref configured for 'git push':        master pushes to master (fast-forwardable)    11:07:36 (master2) PI:EMAIL:~/jksj-repo/git-atomic-demo因为 config 文件简单直观，所以我常常直接到 config文件里面查看和修改来完成这些操作。关于远程跟踪上游代码仓分支的更多细节，比如产生新分支、设置上游分支等，你可以参考Git: Upstream TrackingUnderstandingslate-object="inline"这篇文章。设置好分支之后，我们来看看**这个工作流中的具体步骤**。单分支工作流具体步骤单分支工作流的步骤，大致包括以下 4步： 1.       一个原子性的功能完成后，使用        [第 25 篇文章            slate-object="inline"    中提到的改变提交顺序的方法，把它放到距离 origin/master    最近的地方。        2.       把这个提交发到代码审查系统 Phabricator    上进行质量检查，包括代码审查和机器检查。在等待质量检查结果的同时，继续其他提交的开发。        3.       如果没有通过质量检查，则需要对提交进行修改，修改之后返回第 2    步。    4.       如果通过质量检查，    就把这个提交推送到主代码仓的共享分支上，然后继续其他分支的开发，回到第    1 步。    请注意第二步的目的是，确保入库代码的质量，你可以根据实际情况进行检查。比如，你可以通过提交PR触发机器检查的工作流，也可以运行单元测试自行检查。如果没有任何质量检查的话，至少也要进行简单手工验证，让进入到远程代码仓的代码有起码的质量保障。接下来，我设计了一个案例，尽量模拟我在 Facebook的真实开发场景，与你讲述这个工作流的操作步骤。大致场景是这样的：我本来在开发需求A，这时来了更紧急的需求 B。于是，我开始开发 B，把 B 分成两个原子性提交B1 和 B2，并在 B1完成之后最先推送到远程代码仓共享分支。这个案例中，提交的改动很简单，但里面涉及了很多开发技巧，可供你借鉴。阶段 1：开始开发需求 A某天，我接到开发需求 A 的任务，要求在项目中添加一个 README文件，对项目进行描述。我先添加一个简单的 README.md 文件，然后用 git commit -am 'readme'快速生成一个提交A1，确保代码不会丢失。    
## 文件内容    > cat README.md    
## This project is for demoing git    
## 产生提交    > git commit -am 'readme'    [master 0825c0b] readme     1 file changed, 1 insertion(+)     create mode 100644 README.md    
## 查看提交历史    > git log --oneline --graph    * 0825c0b (HEAD -> master) readme    * 7b6ea30 (origin/master) Add a new endpoint to return timestamp    ...    
## 查看提交细节    > git show    commit 0825c0b6cd98af11b171b52367209ad6e29e38d1 (HEAD -> master)    Author: Jason Ge     Date:   Tue Oct 15 12:45:08 2019        readme    diff --git a/README.md b/README.md    new file mode 100644    index 0000000..789cfa9    --- /dev/null    +++ b/README.md    @@ -0,0 +1 @@    +
## This project is for demoing git这时，A1 是 master 上没有推送到 origin/master的唯一提交，也就是说，是提交链上的唯一提交。请注意，A1 的 Commit Message 很简单，就是"readme"这 6 个字符。在把 A1发出去做代码质量检查之前，我需要添加 Commit Message的细节。 ![](Images/bc53789bacddfa9cd1acb8b9c4eeead9.png)savepage-src="https://static001.geekbang.org/resource/image/d1/0a/d14b3b23385fcb20d9a0013544a7cc0a.png"}图 1 提交链状态第 1 步slate-object="mark"}阶段 2：开始开发需求 B这时，来了另外一个紧急需求 B，要求是添加一个 endpointgetRandom。开发时，我不切换分支，直接在 master上继续开发。首先，我写一个 getRandom的实现，并进行简单验证。    
## 用 VIM 修改    > vim index.js    
## 查看工作区中的改动    > git diff    diff --git a/index.js b/index.js    index 986fcd8..06695f6 100644    --- a/index.js    +++ b/index.js    @@ -6,6 +6,10 @@ app.get('/timestamp', function (req, res) {       res.send('' + Date.now())     })    +app.get('/getRandom', function (req, res) {    +  res.send('' + Math.random())    +})    +     app.get('/', function (req, res) {       res.send('hello world')     })    
## 用命令行工具 httpie 验证结果    > http localhost:3000/getRandom    HTTP/1.1 200 OK    Connection: keep-alive    Content-Length: 19    Content-Type: text/html; charset=utf-8    Date: Tue, 15 Oct 2019 03:49:15 GMT    ETag: W/"13-U1KCE8QRuz+dioGnmVwMkEWypYI"    X-Powered-By: Express    0.25407324324864167为确保代码不丢失，我用 git commit -am 'random' 命令生成了一个提交B1：     