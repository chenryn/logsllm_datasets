tation of the mix net to be complete, sound, and zero-
knowledge:3 see Sections IV and V. The Coq source is
provided via the link in Appendix A.
5) Proving that a given encryption scheme is in this class is
sufﬁcient to obtain a formally veriﬁed cryptographically
veriﬁable mix-net for that encryption scheme. We prove,
in Coq, that both basic ElGamal and parallel ElGamal
fall into this class (Section VI-A). We have also proved
(inside Coq) that this class is closed under composition,
both for the same encryption scheme in parallel and
different encryption schemes in parallel (section IV-A).
6) We demonstrate the practicality and applicability of
our formally veriﬁed implementation of the optimised
Terelius-Wikstr¨om mix net by using it to check (verify)
national election proof transcripts produced by the Ver-
iﬁcatum [31] mix net, which is and has been used in
Norway, Estonia, and Switzerland, and the CHVote 2.0
[32] electronic voting system developed for the State of
Geneva in Switzerland.
2There are a few other veriﬁable mix nets that have been used in real
government elections but they are signiﬁcantly less common.
3For completeness and zero-knowledge we prove sufﬁcient conditions [16]
but formalising these properties (for protocols with more than three rounds)
in Coq is left as future work.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
1749
In addition to the properties we check, the act of encoding
the deﬁnitions in a formal language with such a rich type
system has certain advantages. For example, we must declare
the input and output
types of our Coq functions. When
executed, the inputs are checked with respect to the claimed
type, which has positive implications for privacy and integrity.
In particular, we have exploited the signiﬁcant commonal-
ities in the mix nets used by deployed e-voting schemes to
structure our encodings in a way which allows ease of reuse.
Consequently, we are able to extract provably correct software
for verifying transcripts from several mix net implementations.
B. Mix nets
Mix nets can be classiﬁed into two categories, decryption
mix nets and re-encryption mix nets, which we now explain.
Recall that our aim is to take a sequence m1, m2,··· , mk of
encrypted messages and produce an output sequence which is
a permutation of this sequence without deletions, additions or
mutations of the underlying messages.
In a decryption mix net, ﬁrst proposed by Chaum [3], there
are n authorities (mixers) in some ﬁxed order a1, a2,··· , an
who each publish a public key pk1, pk2,··· , pkn. A sender
wishing to submit a plaintext message m to the mix iteratively
encrypts m under the public keys of the mixers in reverse
(m))...). This
order to produce enc(m) := Encpk1
nested ciphertext enc(m) is then submitted as one element of
the input sequence enc(m1), enc(m2),··· , enc(mk) to the
in
ﬁrst mixer. Each mixer in turn, decrypts each element
its input sequence using its private key and then outputs a
permutation of its decrypted sequence as the input sequence
for the next mixer (if any).
(...(Encpkn
Unfortunately, decryption mix nets are less computationally
efﬁcient than re-encryption mix nets and it is normally harder
to construct proofs of correct shufﬂe for them. More specif-
ically, proofs of correct shufﬂe are easier if the encryption
scheme obeys certain homomorphic properties [28] but the
encryption schemes typically used in decryption mix nets lack
these homomorphic properties.
Re-encryption mix nets were ﬁrst proposed by Park et
al. [29]. The basic idea is as follows. First, use a threshold
public key encryption scheme that allows re-encryption of a
given ciphertext without knowing the secret key. (Such encryp-
tion schemes naturally have certain homomorphic properties
between the ciphertext space and the randomness space.) Then,
the mixers jointly construct a public key, for the mix, for which
they all hold secret key shares. A sender encrypts its plaintext
message under the joint public key. Each mixer, in its turn,
re-encrypts (re-randomises) its input and permutes the output,
its input in the case of the ﬁrst mix is the input to the mix
net otherwise it is the output of the mix before it. Once all
mixers have mixed, the authorities jointly decrypt the output
using the threshold decryption method.
The reader may have noticed that we, following the lit-
erature, equivocate on the meaning of the phrase mix net.
Speciﬁcally, the term is sometimes used to refer to a proof
of shufﬂe—for instance the Terelius-Wikstr¨om mix net—but
it
also used to refer to a multi-party protocol which takes a vector
of ciphertexts and produces a shufﬂe of them. The notion of
integrity for the two meanings are effectively equivalent in our
context but the privacy is not. Speciﬁcally, the information
leaked by the output of the mix is not considered by the
deﬁnition of zero-knowledge (privacy) for the proof of shufﬂe,
by contrast,
is considered by the privacy deﬁnition for
the multi-party protocol. The following example is given to
demonstrate the difference.
Example 1. Consider a re-encryption mix net which permutes
without re-encrypting. Clearly, no such mix net can provide
meaningful privacy since the pertinent information about the
permutation can be easily calculated by looking at the input
and output. However, any proof of shufﬂe for the scheme
might well be zero-knowledge (have privacy) since the proof
transcripts could still be simulated.
As our example demonstrates, the zero-knowledge proper-
ties of the proof of shufﬂe are necessary but not sufﬁcient for
the privacy of the mix net as whole. In appendix C we give a
paper proof that the properties of the proof of shufﬂe (which
we machine-checked) plus the indistinguishability against cho-
sen plaintext attack (IND-CPA) properties of the encryption
scheme sufﬁce for the privacy of the mix net. Unless clear
from context, we will use mix net to refer to a proof of shufﬂe.
As stated above, the homomorphic properties of the en-
cryption scheme are also useful in constructing the proof of
shufﬂe. Consequently, the overwhelming majority of veriﬁable
mix nets are based on re-encryption mix nets;
including
both Terelius-Wikstr¨om [16] and Bayer-Groth [18], the two
veriﬁable mix nets most commonly used in e-voting. Both
Terelius-Wikstr¨om and Bayer-Groth are, strictly speaking,
zero-knowledge arguments of correct shufﬂe, rather than zero-
knowledge proofs, since they are only sound if the com-
mitment scheme used is binding.4 The parameters of this
commitment scheme are called a common reference string and
can be securely generated without trust assumptions in both
these mix nets. The process is straightforward and we discuss
in our future work how this might be veriﬁed in Coq.
The particular mix net most commonly used in veriﬁable
voting is an optimised variant of the Terelius-Wikstr¨om mix
net. There are many slight variations but essentially it involves
taking Terelius-Wikstr¨om’s original mix net [16], which works
for any homomorphic encryption scheme for which a sigma
protocol for re-encryption is known, and restricting to the case
where the ciphertext space has prime order (or sufﬁciently
close to). This allows the removal of Fujisaki-Okamoto com-
mitments [30], based on an RSA modulus, which hampered the
efﬁciency of the original mix net. In practice, everyone using
the Terelius-Wikstr¨om proof of shufﬂe uses an optimised vari-
ant (which avoids the use of Fujisaki-Okamoto commitments).
This style of mix net is most prominently implemented in
Veriﬁcatum [31] and CHVote2.0 [32]; in addition, it has been
4Even more strictly speaking, Terelius-Wikstr¨om is presented as a zero-
knowledge proof of the disjunctive relation that either a correct shufﬂe
occurred or the binding property of the commitment scheme was broken.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
1750
implemented by various companies and academic groups. The
various implementations have been used to mix millions of
votes in elections ranging from local organisations to national
elections. It was proved that the original mix net worked
for a wide class of encryption schemes; it was folklore that
the optimised variant also worked for a signiﬁcant class of
schemes but no paper proof was ever published and the
exact class of schemes for which the result should hold was
undeﬁned. In this work, we give a formal deﬁnition of this
theorem and give a machine-checked proof.
The proof of correct shufﬂe in veriﬁable mix nets, as with
zero-knowledge proofs more generally, can be interactive or
non-interactive. Generally the proofs are deﬁned, and proven
secure, in the interactive variant and then made non-interactive
using the Fiat-Shamir transform [33]. In contexts where the
statement being proved is adaptive, as in mix nets, care must
be taken to use the strong variant of the transform [34].
The strong transform involves replacing the challenge from
the veriﬁer with the hash of the statement and commitment.
All the veriﬁable mix nets proved in this work are in the
interactive variant; they can be made non-interactive with a
one-line change to the veriﬁer but proving the security of the
Fiat-Shamir transform inside Coq is left as future work.5
C. Veriﬁable Electronic Voting and Applications of Our Work
Veriﬁable e-voting schemes can be largely grouped into
two categories:
those based on homomorphic tallying and
those based on mix nets. Homomorphic e-voting schemes
utilise homomorphic cryptosystems to allow the encrypted
ballots to be publicly computed (tallied) before decryption.
This approach has a high degree of conceptual simplicity
but does not presently scale beyond fairly basic electoral
systems, such as ﬁrst-past-the-post. The issue is that
the
more complicated tallying methods require a large number
of both multiplications and additions to compute the tally;
if this were to be done homomorphicly it would require fully
homomorphic encryption and, hence, is currently not practical.
More complicated elections, which notably includes many
of the governmental elections using electronic voting such
as Norway, Estonia, Switzerland and Australia, use mix nets.
The reasons are myriad: in Norway, the ballot structure and
counting is too complicated (see [45]); in Switzerland, the use
of write-in candidates prevents homomorphic tallying; and in
Australia, the single transferable vote electoral system is not
readily amenable to homomorphic tallying.6 There are several
schemes and designs used in these countries but they have in
common that, at some point, the encrypted ballots are shufﬂed
using a veriﬁable mix net to break the link between the voters
and the encrypted ballots (as explained already).
As stated previously, end-to-end veriﬁable voting can be
broken down into various stages. The counted-as-collected
5Proving the security of the transform requires reasoning about rewinding
in the random oracle model which to the authors’ knowledge is not supported
in Coq, EasyCrypt or other equivalent interactive provers.
6There are various approaches but they rely on trusted parties or are many
orders of magnitude slower.
stage utilises cryptographic techniques to produce public ev-
idence of the correctness of the result, making the result
independent of the software which produced it. Such evidence
can then be veriﬁed by interested parties. Veriﬁable mixing, the
focus of our work, falls within the counted-as-collected stage
of end-to-end veriﬁability; as such, for end-to-end veriﬁability
in real elections, any use of our veriﬁers should be done along-
side mechanisms which check cast-as-intended and collected-
as-cast, along with other properties such as voter eligibility.
Unfortunately, implementing these cryptographic techniques
for the cast-as-collected stage is an extremely error prone
process. The SwissPost system, intended and used for national
elections in Switzerland, contained multiple critical errors
when opened for public review after a “thorough” certiﬁcation
process [36], [37]. Other prominent failures and issues in al-
legedly end-to-end veriﬁable systems include the iVote system,
used in the Australian state of New South Wales [38], and
the e-voting system used in national elections in Estonia [39],
[40]. Many general issues have also been discovered [34],
[41], [42], [44] which must be carefully avoided in any
implementation. Most of these issues were at one time present
in the Helios end-to-end veriﬁable e-voting system [43] used
by the International Association for Cryptologic Research.
E-voting systems are large collections of software and
formally verifying everything, to avoid the errors above, is
simply not feasible. Furthermore, even if the software was
veriﬁed to be correct, external parties would be unable to tell
if this software was actually being run.7 However, as Rivest
observed, we do not need to prove the correctness of all the
election software for integrity; we only need to prove the
soundness of the veriﬁer used to check the public evidence.
This is precisely the fact that we exploit in this work.
Many of these issues are symptoms of the lack of precision
in traditional paper based proofs. Machine-checked proofs
require much more work, but the advantages for security are
signiﬁcant. Moreover, if the machine-checked proof is modular
then it can cover a large range of deployed variants.
While, we do in fact deﬁne the entire mix net and prove its
cryptographic properties, we have little desire to encourage
vendors to use our implementation of the mixer and the
prover. The soundness property of our veriﬁer ensures that
if it accepts, then, with overwhelming probability, the mixing
was done correctly. Thus it is unnecessary for the integrity of
the mix net (and the election) to use our veriﬁed mixer and
prover since it sufﬁces to use our veriﬁed veriﬁer; however,
if the vendors wished to ensure that the privacy properties
we proved hold, our prover would need to be used and the
randomness would need to be sampled uniformly. We therefore
stress that the privacy of the proof of shufﬂe falls within the
scope of our work but the privacy of the election, as a whole,
does not.
7The standard techniques for remote attestation do not work in the threat
model normally used for national elections.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:48 UTC from IEEE Xplore.  Restrictions apply. 
1751
D. Outline
Having introduced mix nets and veriﬁable electronic voting,
we have hopefully convinced the reader that this is a crucial
area of security in need of additional research to secure the
mix nets deployed in national elections. In the next section,
background, we will discuss more of the prior work and
discuss limitations of our work. We will then introduce various
building blocks in section III. After that, in section IV we will
formally deﬁne the class of encryption schemes for which we
have proved the proof of shufﬂe. In section V we will deﬁne
the Terelius-Wikstr¨om mix net and state its security theorem,
which we have proven in Coq. Following this, in section VI
we will deﬁne several encryption schemes in Coq and show
that they are in the class which can be mixed. Finally, we
will discuss the applications of our work to verifying national
elections (section VII) before concluding in section VIII. We
have placed some of the Coq snippets refereed to in the body
of the paper in appendix B. A full version [46] is also available.
II. BACKGROUND
Interactive theorem proving tools allow us to encode math-
ematically rigorous deﬁnitions and algorithms, state desired
properties as theorems to be proved, and interactively prove
(machine-check) that the deﬁnitions imply these theorems.
We used the Coq interactive theorem prover [47] which
is based upon Coquand’s Calculus of Constructions and has
been developed over decades. A signiﬁcant body of work has
already been completed on verifying cryptography in Coq,
most notably,
the CertiCrypt project [48]. The CertiCrypt
project can be viewed as an extension of Coq to handle game-
based cryptographic proofs. It has been used to give numerous
machine-checked cryptographic proofs, some of which we cite
below. The proofs we give are straight reductions without
utilising game hopping and for this reason we do not use
CertiCrypt; there are interesting extensions to our work which
could make use of both our results and existing results in
CertiCrypt. However, to the best of our knowledge, CertiCrypt
appears to have been abandoned in favour of EasyCrypt.8
EasyCrypt is a separate interactive proof system which is
designed speciﬁcally for verifying cryptographic proofs. Early
versions of EasyCrypt were compatible with CertiCrypt but
this has since been discontinued. EasyCrypt is seeing exciting
developments but at present is far less mature than Coq and
has not itself been proved correct.
A. Veriﬁcation and Code Extraction Via Coq
In previous work [49], we explained in some detail the
constructive foundations of the logic underlying Coq and how
a user can interact with Coq: we do not repeat this prose here.
B. Related Work