虽然选择 Docker 而不是`rkt`还有许多其他更小的理由，反之亦然，但有一件重要的事情不可忽视:采用率。虽然`rkt`有点年轻，但 Docker 已经被几乎所有大型科技巨头采用，似乎没有任何停止趋势的迹象。考虑到这一点，如果你今天需要在微服务上工作，选择可能非常明确，但就像任何技术领域一样，生态系统在一年甚至几个月内可能会有很大不同。
# 系统级虚拟化
另一方面，我们有使用完整系统映像的平台，而不是像 LXD、OpenVZ、KVM 和其他一些应用。与 Docker 和`rkt`不同，它们旨在为您提供对所有虚拟化系统服务的全面支持，但根据其定义，其代价是更高的资源使用率。虽然在主机上有单独的系统容器对于更好的安全性、隔离性以及可能的兼容性是必要的，但是这些容器的几乎所有使用都可以从个人体验转移到应用级虚拟化系统，只需做一些工作就可以提供更好的资源使用配置和更高的模块化，而创建初始基础架构的成本会略有增加。这里要遵循的一个明智的规则是，如果您正在编写应用和服务，您可能应该使用应用级虚拟化，但是如果您正在向最终用户提供虚拟机，或者希望服务之间有更多的隔离，您应该使用系统级虚拟化。
# 桌面应用级虚拟化
Flatpak、AppImage、Snaps 和其他类似技术也为单应用级容器提供隔离和打包，但与 Docker 不同，它们都以桌面应用的部署为目标，对容器生命周期(即启动、停止、强制终止等)没有同样精确的控制，通常也不提供分层映像。相反，这些工具中的大多数都有很好的包装器**图形用户界面** ( **图形用户界面**)并为安装、运行和更新桌面应用提供了更好的工作流程。虽然由于对上述`cgroups`和名称空间的相同底层依赖，大多数平台与 Docker 有很大的重叠，但这些应用级虚拟化平台传统上不处理服务器应用(运行时没有用户界面组件的应用)，反之亦然。由于这一领域还很年轻，而且它们所覆盖的空间相对较小，您可能会期望合并和交叉，因此在这种情况下，Docker 可能会进入桌面应用交付领域和/或这些竞争技术中的一种或多种尝试支持服务器应用。
![](img/a19ab0f7-fc9f-4481-be92-245705295b18.png)
# 什么时候应该考虑容器化？
到目前为止，我们已经涵盖了很多方面，但是有一个重要的方面我们还没有涵盖，但是这是一个非常重要的事情来评估，因为容器在作为最终部署目标的大量情况下没有意义，不管围绕这个概念有多少争议，所以我们将涵盖一些应该真正考虑(或不考虑)这种类型的平台的一般用例。虽然从运营的角度来看，容器化在大多数情况下应该是最终目标，并且在注入到开发过程中时，以最小的努力提供巨大的红利，但是将部署机器转变为容器化的平台是一个非常棘手的过程，如果您不能从中获得切实的好处，那么您不妨将这段时间用于能够为您的服务带来真正的、切实的价值的事情。
让我们先从缩放阈值开始。如果您的服务作为一个整体可以完全适应并在相对较小或中等的虚拟机或裸机主机上运行良好，并且您没有预料到突然的扩展需求，那么部署机器上的虚拟化会让您走上痛苦的道路，而这在大多数情况下是不值得的。即使是建立良性但稳健的虚拟化设置，高昂的前期成本通常也会更好地用于开发该级别的服务功能。
如果您看到用虚拟机或裸机主机支持的服务的需求增加，您总是可以扩展到更大的主机(垂直扩展)并重新关注您的团队，但如果不是这样，您可能不应该走这条路。很多情况下，企业花了几个月的时间来实现容器技术，因为它非常受欢迎，但却因为缺乏开发资源而失去了客户，不得不关门大吉。
现在，您的系统已经突破了垂直可伸缩性的限制，是时候将 Docker 集群之类的东西添加到这个组合中了吗？真正的答案是“可能”。如果您的服务跨主机是同构的和一致的，例如分片的或集群的数据库或简单的 API，在大多数情况下，这也不是合适的时机，因为您可以使用主机映像和某种负载平衡器轻松扩展该系统。如果您选择更高级的功能，您可以使用基于云的**数据库即服务** ( **数据库即服务**)如亚马逊 RDS、微软 DocumentDB 或谷歌 BigQuery，并根据所需的性能水平通过同一提供商(甚至不同的提供商)上下自动扩展服务主机。
如果除此之外还有大量的服务种类的预示，从开发人员到部署的更短管道的需求，复杂性的增加，或者指数级的增长，那么您应该考虑将这些作为触发器来重新评估您的优点/缺点，但是没有明确的界限。不过，这里的一个好的经验法则是，如果你的团队有一个缓慢的时期，探索容器化选项或提升你在这个领域的技能并没有什么坏处，但是要非常小心，不要低估正确建立这样一个平台所需的时间，不管这些工具的入门说明看起来有多简单。
有了这些，有什么明显的迹象表明您需要尽快将容器加入到您的工作流中？这里可能有许多微妙的提示，但下面的列表涵盖了那些如果答案是肯定的，应该立即将容器主题提出来讨论的提示，因为好处远远超过了对您的服务平台的时间投资:
*   您的部署中是否有超过 10 种独特的、离散的和互连的服务？
*   您是否需要在主机上支持三种或三种以上的编程语言？
*   您的运营资源是否不断部署和升级服务？
*   您的服务是否需要“四个 9”(99.99%)或更高的可用性？
*   您是否有重复出现的服务中断部署的模式，因为开发人员没有考虑到服务运行的环境？
*   你是否有一个才华横溢的开发或运营团队无所事事？
*   你的项目在钱包里有一个燃烧的洞吗？
好吧，也许最后一个有点开玩笑，但它在列表中以某种讽刺的语气说明，在撰写本文时，无论您的货币是时间还是金钱，让 PaaS 平台运行、稳定和安全既不容易也不便宜。许多人会试图欺骗你，让你认为你应该总是使用容器，让一切都记录在案，但保持怀疑的心态，并确保你仔细评估你的选择。
# 理想的 Docker 部署
现在我们已经完成了真正的对话部分，让我们说我们已经真正准备好为一个想象的服务处理容器和 Docker。我们在本章的前面已经介绍了其中的一些细节，但是我们将在这里具体定义如果我们有足够的时间来处理它们，我们的理想需求会是什么样子:
*   开发人员应该能够部署新的服务，而不需要任何运营资源
*   系统可以自动发现正在运行的服务的新实例
*   该系统可以灵活地上下扩展
*   在期望的代码提交时，新代码将自动部署，无需开发人员或操作人员的干预
*   您可以无中断地无缝处理降级的节点和服务
*   您能够充分利用主机上可用的资源(内存、中央处理器等)
*   开发人员几乎不需要单独访问节点
如果这些是要求，你会很高兴知道几乎所有的要求在很大程度上都是可行的，我们会在本书中详细介绍几乎所有的要求。对他们中的许多人来说，我们需要更深入地了解 Docker*，超越你在其他地方找到的大部分材料，但是没有必要教你那些你不能带到只打印出“Hello World”的领域的部署*
 *当我们在接下来的章节中探索每一个主题时，我们将确保覆盖任何陷阱，因为有许多这样复杂的系统交互。有些对你来说是显而易见的，但许多可能不会(例如，PID1 问题)，因为这个领域的工具相对年轻，并且许多对 Docker 生态系统至关重要的工具甚至不是 1.0 版本，或者直到最近才达到 1.0 版本。
因此，你应该考虑这个技术空间仍然处于发展的早期阶段，所以现实一点，不要期待奇迹，期待健康的小“陷阱”。还要记住，一些最大的科技巨头现在已经使用 Docker 很长时间了(红帽、微软、谷歌、IBM 等等)，所以也不要害怕。
要开始并真正开始我们的旅程，我们需要首先重新考虑我们对服务的看法。
# 容器思维
今天，正如我们在本章前面已经介绍过的那样，今天部署的绝大多数服务都是由临时的或手动连接和配置的部分组成的一个大杂烩，一旦单个部分被更改或移动，这些部分就很容易分离。很容易把它想象成一个纸牌搭成的塔，需要改变的部分经常在它的中间，有把整个结构推倒的风险。中小型项目和有才华的开发和运营团队大多可以管理这种复杂程度，但它确实不是一种可扩展的方法。
# 开发人员工作流程
即使您没有在 PaaS 系统上工作，也最好将服务的每一部分都视为在开发人员和最终部署主机之间应该具有一致环境的东西，能够在任何地方运行，只需很少的更改，并且足够模块化，以便在需要时可以用兼容 API 的模拟来替换。对于其中的许多情况，即使是本地 Docker 的使用也可以大大简化部署，因为您可以将每个组件隔离成小块，这些小块不会随着开发环境的变化而变化。
为了说明这一点，想象一个实际的案例，我们正在编写一个简单的 web 服务，该服务与基于最新 Ubuntu 的系统上的数据库进行对话，但是我们的部署环境是 CentOS 的某种迭代。在这种情况下，由于它们的支持周期长度差异很大，在版本和库之间进行协调将非常困难，因此作为开发人员，您可以使用 Docker 为您提供与 CentOS 相同的数据库版本，并且您可以在基于 CentOS 的容器中测试您的服务，以确保所有库和依赖项在部署时都可以工作。这个过程将改进开发工作流，即使真正的部署主机没有容器化。
现在，我们将从一个稍微现实的方向来看这个例子:如果您需要在当前支持的所有版本的 CentOS 上运行您的服务而不修改代码，该怎么办？
有了 Docker，您可以为每个版本的操作系统准备一个容器，用来测试服务，以确保您不会得到任何意外。另外，您可以自动运行一个测试套件运行程序，一个接一个地启动每个操作系统版本容器(或者更好的是，并行地)，以便在任何代码更改时自动针对它们运行整个测试套件。仅通过这几个小的调整，我们就将一个不断中断生产的临时服务变成了您几乎永远不用担心的东西，因为您可以确信它在部署时会工作，这是非常强大的工具。
如果您扩展这个过程，您可以在本地创建 Docker 菜谱(Dockerfiles)，我们将在下一章中详细介绍，其中包含一组使您的服务从普通的 CentOS 安装运行到完全能够运行该服务所需的确切步骤。这些步骤可以由运营团队作为其自动化配置管理(CM)系统(如 Ansible、Salt、Puppet 或 Chef)的输入进行最小化的更改，以确保主机拥有正确运行所需的准确基线。这种由服务开发人员编写的最终目标所需的精确步骤的编码传输正是 Docker 成为如此强大的工具的原因。
正如希望变得显而易见的那样，Docker 作为一种工具不仅可以改进部署机器上的开发过程，还可以在整个过程中使用它来标准化您的环境，从而提高部署管道几乎每个部分的效率。有了 Docker，你很可能会忘记给每个 Ops 人员灌输恐惧的臭名昭著的短语:“它在我的机器上运行良好！”。这本身应该足以让您考虑在基于容器的工作流中进行拼接，即使您的部署基础架构不支持容器。
The bottom line here that we've been dancing around and which you should always consider is that with the current tooling available, turning your whole deployment infrastructure into a container-based one is slightly difficult, but the addition of containers in any other part of your development process is generally not too difficult and can provide exponential workflow improvements to your team.
# 摘要
在这一章中，我们跟踪了部署的历史，并研究了带有 Docker 的容器如何让我们更接近这个新的微服务世界。Docker 接受了关于我们最感兴趣的部分的高级概述。我们通过一些用例介绍了竞争以及 Docker 在生态系统中的位置。最后，我们还讨论了什么时候应该——更重要的是，什么时候不应该——在您的基础设施和开发工作流中考虑容器。
在下一章中，我们将最终弄脏我们的手，并研究如何安装和运行 Docker 映像以及创建我们的第一个 Docker 映像，所以一定要留下来。*