虽然每个主题都有一般结果，但这些结果主要是进一步审查具体工作领域的指南。每个工作场合在重要方面是不同的。在一个场合中有用的方法在另一个场合中可能也很有用，但如果要保证它始终都有用，则需要仔细调整在其他场合的具体应用细节。简单地照搬照抄很少能达到需要的结果。
相反，该研究有助于界定新领域的探索，并解释该领域的实证研究的结果。这种情况与“模式”在软件中有用的方式有些类似。模式不是解决方案，而是允许开发解决方案的框架。 
关于围绕事件的SRE认知工作的观察关于围绕事件的SRE认知工作的观察
  事故是复杂的系统故障（Cook，1998；Cook，2010）。它们是由多个单独无害的缺陷组合而成，每个缺陷都无法产生明显的故障，但是，这些缺陷相互作用时就会导致事故。但复杂系统失效的理论太狭隘，无法涵盖SRE工作，其中包括避免性能下降导致的失效，修复和重新组装（有时是部分）功能系统，及时触发响应机制以避免其他系统级联失效，并构建有意义的、对刚刚发生的问题的有用描述。
每一次事件都可能更糟
  即使事件似乎已经突然开始，对其演变的回顾也就肯定会显示有多种不同可能结果。即使结果很糟糕，粗略的审查也会表明情况可能更糟。即使它们不能阻止故障，从旋风中心的有利位置出发，SRE也可能有机会改变故障的轨迹，以便保留有用的元素或暂缓故障后果。
特别是对于级联故障（组件故障成倍增加以扩大损坏区域），有时可以断开分布式系统的某些部分以避免扩展故障。只需警告使用系统的人员和计算机出现故障，即可为这些人提供准备时间，以便在服务失效时实现安全关机。把一个失败的系统导入不令人感到痛苦的结果，这取决于SRE的专业知识、系统设计和技术的实施。这些事件通常发生得很快，可能操作的时机可能很短暂，这给那些试图限制损害的人带来了额外的压力。
只有最公开、备受瞩目的事件才能得到足够深入的调查，以揭示事故发生时的选择是如何让事情变得更好或更糟。这里的两个例子都涉及核电工业的史实。
TMI
 在三哩岛发生事故期间，操作人员开始担心流入反应堆的额外冷却水会填满加压器，并导致反应堆“变硬”的灾难性后果，会导致失去控制。这导致他们减少水流，使反应堆核心暴露并停止冷却，导致核心熔毁。
福岛
 反应器冷却水经过高度净化，以防止反应堆管道和部件的腐蚀。在福岛事故期间，电力故障阻止了冷却水流过反应堆。操作者可以选择将未净化的水泵入反应堆，使反应堆永远无法使用，但避免了核心损坏。一个反应堆的操作员很早就采取了这一选择，使反应堆安全关闭。另一个反应堆的运营商却继续努力重新启动纯水冷却，但没有成功。反应堆核心熔化，导致辐射大量泄漏到环境中。在不确定的情况下做出牺牲性决策
   明确定义的界限、明显的解决方案路径和可预测的修复时间，这些都非常罕见。在大多数情况下（几乎所有可参考的案例中）事件的主要特征是不确定性。正常的操作系统很复杂；即将失效的或已经失效的系统则是成倍的复杂。系统的复杂性和不确定性密切相关；随着复杂性增加，不确定性也会增加。
SREs经常面临只有不良替代方案的情况。损失已经持续，更多的问题正在积累，并可能发展成巨大灾害，甚至导致真正悲剧性的后果。虽然可能会有临时措施，可以减少或推迟后果（“让我们启动另一个实例，看看是否有帮助”），这就是面对尖锐、痛苦时刻做出的牺牲性选择。
当决定接受一个损失以避免另一个更重要的损失时，就要做出牺牲性决策。通常，牺牲性决策接受定义明确的损失，以减少更严重损失的可能性。在几乎所有情况下，接受的损失比避免的损失更好（Woods，2006）。事后审查有助于澄清牺牲决策，但不善于捕捉通常围绕此类决策的不确定性、压力和冲突数据。具有讽刺意味的是，当牺牲决定成功时（也就是说，避免了更大，更具威胁性的损失），往往会有一种倾向对牺牲性决定持批评态度。在避免之后，更大的损失似乎不太可能，接受牺牲的决定似乎没有考虑到。对称地，在灾难性的失败之后，无法认识到可用的牺牲决定或不愿意做出决定可以引起类似的批评。让我们来看看另外两个展示选择牺牲的例子。
纽约证券交易所故障
 2015年7月8日，由于自动股票报价流程失败，纽约证券交易所（纽约证券交易所）停止交易三小时。虽然大多数自动交易在关闭时正在运行，但纽约证券交易所管理层决定停止所有交易。据路透社报道，纽约证券交易所总裁 托马斯法利表示，“这显然不是美好的一天，我对那些不得不面对这一后果的客户感到抱歉。”纽约证券交易所后来为此（以及“类似的计算机相关问题”）向美国证券交易委员会支付了1400万美元的罚款。骑士资本交易崩溃
 2012年8月1日，骑士资本交易公司（KnightCapital）因新安装的软件与系统中已有的测试代码冲突而损失了4.4亿美元。初步的突然损失实际上早就被发现，并引起了人们对该系统的关注，但允许该系统继续运行，直到它累积了严重的损失。几周后，公司被出售，实际上停业了。
正常系统的维修
工作在失败和濒临问题系统中的SRE会对故障源的相关性产生狭隘而深刻的理解。这种理解尤其重要，因为开发了修复系统的计划。破碎但仍具有功能的系统具有与“名义上工作”系统不同的特性。出现了新的漏洞和依赖关系，通常会对修复方法产生影响。
回滚的复杂问题清楚地说明了这一点。具有严格变更控制的大型、高度管制的系统（例如财务处理程序）通常一起实施一组更改。当其中一个变化破坏系统的某些部分时，有时会有人质疑该更改是否有可能回滚。由于整个更改包都经过测试，因此还原单个更改的后果会使系统处于未经测试的状态。某些组织要求任何回滚都包含所有的更改。如果迫切需要对部分软件进行更改，该怎么办？显然需要更多的讨论和辩论。对大型系统中的变化和影响进行排查可能是一个挑战，特别是当一个事件刚刚证明了对系统的缺陷和不完整的理解是多么缺陷和不完整时。我们观察到关于系统如何工作，以及如何进行维修的讨论往往非常激烈。
由于这些问题可能会产生重要甚至影响存亡的后果，因此SRE很少能单独决定它们。与本章前面的#every_incident_could_have_been_worse和#sacrifice_decisions_take_place_under_unce部分中描述的情况不同，维修的节奏明显较慢，相关方面的参与范围更广。SRE经常被要求检查建议的修复方案，评价它们，并向有权威的相关方面解释系统的运作，且不邀请他们有SRE工程师这样深入的技术知识。
我们注意到回滚的概念越来越难以延续。由于分布式系统包含更多的外部服务和精心设计的使用模式，因此恢复到“已知状态”的可能性就变得不那么高了。现代分布式系统设计强调需要构建不依赖于维护状态的系统。结果是，我们现在的系统缺乏唯一状态。在这样一个世界里，撤回软件的更新可以使系统呈现出更熟悉的外观，但它可能不会将世界恢复到以前的样子。关于复杂系统的专业知识
   SRE面临的情况很少是简单的。分布式系统（和相关自动化设计中内置的容错机制）可以自动处理出现的大多数问题。因此，问题一般出现在不属于“大多数问题”的边界情况。在这种情况下梳理出因果关系通常更具有挑战性。
例如，仅仅观察流程失败并不一定意味着修复该流程将解决事件。流程可能根本无法处理其他流程失败所产生的极端条件。在其他情况下，旨在减轻或打破问题进一步传播的行动可以返回，结果可以更多地阐明问题而不是按预期包含它们。像“背压”这样的术语术语 背压起初是指从交换机故障中发生的网络流量故障。这些故障表现为在上游组件中累积的消息队列越来越多。我们现在更广泛地使用这个术语来指代任何对进程间通信的中断在上游进程中队列增长。由于队列大小的探针无处不在，队列大小增长通常是下游进程失败的信号。强烈建议SRE具有关于系统行为的特殊条件知识。
管理协调成本管理协调成本
   SRE很少单独工作。操作和支持大型分布式系统涉及许多人和活动，这些人和活动具有不同的变化连接。事件的过程可能会使少数或数百人充当信息贡献者、故障排除者、后果限制者和联络人（内部沟通、与客户联络、汇报监管机构等）。获取和指导资源、协调资源、跟踪事件的进展以及应对后果（通常在事件的起源和进一步发展仍然不确定的情况下）本身就是要求完成的任务。许多组织都试图以不同程度努力来“管理”密集、嘈杂的人群，成功保证大家得知事故内部的情况。
管理协调成本的两种常用方法是使用分类方案来规划资源管理，并在事件发生期间为人员分配正式角色。
分类方案
  许多故障对客户或业务流程的影响很小。较少的故障会产生重大影响。解决故障可能既昂贵又具有破坏性。机构通过对故障进行分级以管理资源消耗：更重要的故障获得更多资源，而不那么重要的故障获得更少资源。但是，有时很难评价正在发生的故障的重要性。严重故障最初可能表现为轻度干扰。众多的因素可以将小故障推向重大故障。一般难以用分级机制（比如从一级到五级的重要度）来管理故障，尤其是在为解决故障而获取资源和分配资源的早期阶段。基于直接客户影响的分类方案可能无法反映故障的重要程度或解决的困难程度。正式角色分配
  一些组织现在使用正式的故障内角色分配。例如“事件指挥官”、“通讯管理员”等。这些权宜之计旨在描述集团内部处理事件的权力和责任，并允许在所承担的资源之间进行顺利协调。我们已经看到这种方法有时运行良好，也有不太好的。有经验的团队工作得很好，而没有经验的团队也在努力，我们注意到领导者的成功在很大程度上取决于工作组的构成。领导者的一个重要职能是对具有运营后果的关键决策负责。
由于故障管理具有挑战性，因此出现了管理协调成本的这些方法。几乎没有研究来验证它们的使用。这些方法的实际效果是一个成熟的研究领域。
SRE是联合认知系统中工作的认知主体