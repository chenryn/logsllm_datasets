.PP
.RS
.ne 5
.nf
.ta 3c
\fBalpha\fR	一个字母
\fBupper\fR	一个大写字母
\fBlower\fR	一个小写字母 
\fBdigit\fR	一个十进制数字
\fBxdigit\fR	一个十六进制数字
\fBalnum\fR	一个 alphanumeric (字母或数字)
\fBprint\fR	一个 alphanumeric (同于 alnum)
\fBblank\fR	一个空格或 tab 字符
\fBspace\fR	在显示的文本中产生白空格的一个字符 
\fBpunct\fR	一个标点字符
\fBgraph\fR	有图形表示的一个字符
\fBcntrl\fR	一个控制字符
.fi
.RE
.PP
一个地域可以提供其他的字符类。
.VS 8.2
(注意：Tcl 目前只实现了一个地域：Unicode 地域。) 
.VE 8.2
一个字符类不能用做一个范围的端点。
.PP
方括号表达式有两个特殊情况: 方括号表达式
\fB[[::]]\fR
是约束，分别匹配在一个字开始处和结束处的空串。定义一个字为既没有前导的又没有尾随的单词字符的单词字符的一个序列。一个单词字符是一个 \fBalnum \fR字符或一个下划线(\fB_\fR)。这些特殊的方括号表达式已被淘汰；ARE 用户应当转而使用约束转义(见后)。
.SH "转义 ESCAPES"
转义(专属 ARE)，它以
\fB\e\fR
为开始后面跟随着一个字母字符，存在一些变体: 字符录入(entry)、类简写、约束转义、和后引用。在 ARE 中，跟随着一个 alphanumeric 字符但不约束一个有效转义的
\fB\e\fR
是非法的。在 ERE 中，没有转义: 在方括号表达式外部，跟随着一个 alphanumeric 字符的一个
\fB\e\fR
仅表示这个字符为一个普通字符，而在一个方括号表达式内部，
\fB\e\fR
是一个普通字符。(后者是在 ERE 和 ARE 之间的一个实际上的不兼容。)
.PP
字符录入转义 (Character-entry escapes) (专属 ARE) 的存在简便了在 RE 中指定一个非打印和其他非常规字符:
.RS 2
.TP 5
\fB\ea\fR
警报(震铃)字符，如同 C 语言
.TP
\fB\eb\fR
退格，如同 C 语言
.TP
\fB\eB\fR
\fB\e\fR 的同义词，在有多层反斜杠处理的一些应用中用来减少双反斜杠
.TP
\fB\ec\fIX\fR
(这里的 X 是任何字符) 字符的低端5位与 \fIX \fR的低端5位相同，而其他位全是零
.TP
\fB\ee\fR
其整理序列名字是‘\fBESC\fR’的字符，如果尝试失败，这个字符有八进制值 033
.TP
\fB\ef\fR
换页，如同 C 语言
.TP
\fB\en\fR
换行，如同 C 语言
.TP
\fB\er\fR
回车，如同 C 语言
.TP
\fB\et\fR
水平 tab，如同 C 语言
.TP
\fB\eu\fIwxyz\fR
(这里的 \fIwxyz\fR 是严格的四个十六进制数字) 在本地字节次序中的 Unicode 字符 \fBU+\fIwxyz\fR
.TP
\fB\eU\fIstuvwxyz\fR
(这里的 \fIstuvwxyz\fR 是严格的八个十六进制数字)     保留给假定的某种扩展到32位的 Unicode
.TP
\fB\ev\fR
垂直 tab，如同 C 语言
.TP
\fB\ex\fIhhh\fR
(这里的 \fIhhh\fR 是十六进制数字的任意序列) 其十六进制值为 \fB0x\fIhhh\fR 的字符(不管使用了多少十六进制数字它都是一个单一字符)。
.TP
\fB\e0\fR
其值为 \fB0 \fR的字符
.TP
\fB\e\fIxy\fR
(这里的 \fIxy\fR 是严格的两个八进制数字，并且不是一个\fB后引用\fR(参见后面)) 其八进制值为\fB0\fIxy\fR 的字符
.TP
\fB\e\fIxyz\fR
(这里的 \fIxyz\fR 是严格的两个八进制数字，并且不是一个\fB后引用\fR(参见后面)) 其八进制值为 \fB0\fIxyz\fR的字符
.RE
.PP
十六进制数字是 `\fB0\fR'-`\fB9\fR', `\fBa\fR'-`\fBf\fR',
和`\fBA\fR'-`\fBF\fR'.
八进制数字是 `\fB0\fR'-`\fB7\fR'.
.PP
字符录入转义总是被接受为普通字符。例如，
\fB\e135\fR
是ASCII中的
\fB]\fR
而
\fB\e135\fR
不终结一个方括号表达式。但是要小心，一些应用(例如 C 编译器)在正则表达式包得到它们之前要自己解释这些序列，这可能就要求写两次(四次 (quadrupling)，等等) `\fB\e\fR'。
.PP
类简写转义 Class-shorthand escapes (专属 ARE) 为特定的通用字符类提供简写:
.RS 2
.TP 10
\fB\ed\fR
\fB[[:digit:]]\fR
.TP
\fB\es\fR
\fB[[:space:]]\fR
.TP
\fB\ew\fR
\fB[[:alnum:]_]\fR
(注意有下划线)
.TP
\fB\eD\fR
\fB[^[:digit:]]\fR
.TP
\fB\eS\fR
\fB[^[:space:]]\fR
.TP
\fB\eW\fR
\fB[^[:alnum:]_]\fR
(注意有下划线)
.RE
.PP
W在方括号表达式中，没有外面的方括号的`\fB\ed\fR', `\fB\es\fR',
和 `\fB\ew\fR'\&
，还有
`\fB\eD\fR', `\fB\eS\fR',
和 `\fB\eW\fR'\&
都是非法的。
.VS 8.2
(所以，等价于\fB[a-c[:digit:]]\fR 的 \fB[a-c\ed]\fR 和等价于 \fB[a-c^[:digit:]]\fR 的\fB[a-c\eD]\fR 是非法的)
.VE 8.2
.PP
约束转义 constraint escape (AREs only) 是如果指定条件满足则匹配空串的一个约束，它被写成一个转义:
.RS 2
.TP 6
\fB\eA\fR
只在字符串开始处匹配(与 `\fB^\fR'的不同之处请参见下面的 MATCHING 章节)
.TP
\fB\em\fR
只在一个字开始处匹配
.TP
\fB\eM\fR
在一个字的结束处匹配
.TP
\fB\ey\fR
只在一个字的开始处或结束处匹配
.TP
\fB\eY\fR
只在一个字的不是开始处或结束处的某点上匹配
.TP
\fB\eZ\fR
只在一个字符串的结束处匹配(与 `\fB$\fR'的不同之处请参见下面的 MATCHING 章节)
.TP
\fB\e\fIm\fR
(这里的 \fIm\fR 是一个非零数字)一个\fIback reference\fR 后引用， 参见后面
.TP
\fB\e\fImnn\fR
(这里的 \fIm\fR 是一个非零数字，而 \fInn\fR 是一些更多的数字，并且十进制值 \fImnn\fR 不大于目前为止闭合的捕获圆括号的数目) 一个\fB后引用\fR，参见下面 
.RE
.PP
同于上面规定的
\fB[[::]]\fR
，字定义为既没有前导的又没有尾随的单词字符的一个序列。
一个单词字符是一个 \fBalnum \fR字符或一个下划线(\fB_\fR)。
在方括号表达式中，约束转义是非法的。
.PP
一个\fB后引用\fR(专属 ARE) 匹配的字符串与用数字指定的在圆括号中的子表达式所匹配的字符串相同，所以(例如) \fB([bc])\e1\fR 匹配 \fBbb\fR 或 \fBcc\fR 而不是 ‘\fBbc\fR’。在 RE 中，子表达式必须全部在后引用的前面。以前导的圆括号(左圆括号)的次序给子表达式编号。非捕获圆括号不定义子表达式。
.PP
译注：后引用是原属 BRE 的特征，ERE 无此特征。例如，表达式 ^(.*)\e1$ 匹配由同一个字符串的两个毗连的出现组成的一行，而表达式 (a)*\e1 不匹配 a。(a)(b)\e1 匹配 aba，(a)(b)\e2 匹配 abb，(a(b))\e1 匹配 abab，(a(b))\e2 匹配abb。(a)\e1 等价于 a{2,2}。
.PP
在八进制字符录入转义和后引用之间有一个历史遗留的二义性，只能象上面提示的那样用启发式的方法来解决。一个前导的零总是指示一个八进制转义。一个单一的非零数字，不跟随着其他数字，总是接受为一个后引用。不以一个零为开始的一个多数字序列如果在一个合适的子表达式后面，则被接受为一个后引用 (比如给出的后引用的序号在合法范围内)，否则被接受为一个八进制转义。
.SH "元语法 METASYNTAX"
除了上面描述的主要的语法之外，还可获得特殊形式和杂项的一些语法性的设施。
.PP
一般通过应用相关的方式指定使用的 RE 的风格。但是，可以用\fB指示符\fR(\fIdirector\fR)来屏弃它们。如果某种风格的一个 RE 以‘\fB***:\fR’为开始，则 RE 的剩余部分是一个 ARE。如果某种风格的一个 RE 以‘\fB***=\fR’为开始，则 RE 的剩余部分被接受为一个文字串，并且其中的所有字符被认为是普通字符。
.PP
一个 ARE 可以以\fIembedded options\fR 嵌入选项为开始: 
一个序列
\fB(?\fIxyz\fB)\fR
(这里的
\fIxyz\fR