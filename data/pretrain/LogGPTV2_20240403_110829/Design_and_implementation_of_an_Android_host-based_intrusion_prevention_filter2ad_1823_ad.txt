# 优化后的文本

## 分布图
以下是BaseBridge、FakeAV和MobileTx样本的相关性评分分布图：
- Top 500 apps
- Top 500 apps
- Top 500 apps
- BaseBridge 样本
- FakeAV 样本
- MobileTx 样本

![](figure9.png)

### 注意
对于MobileTx家族的一些样本，由于恶意软件中的错误，在测试过程中崩溃。因此，我们在评估中得到了四个假阴性结果。

总结来说，Patronus能够有效防止入侵并检测现有的恶意软件。

## 性能评估
为了衡量Patronus引入的开销，我们使用Quadrant Standard Edition v2.1.1 [6] 对CPU、内存、I/O、2D 和 3D 图形进行通用基准测试。实验在LG Nexus 5（Qualcomm Snapdragon 800 2.26GHz CPU, Adreno 330 450MHz GPU, 2300mAH电池）上运行Android 4.4.2 (KitKat) 和 Linux 3.4.0 内核。表5显示了基准测试结果。“Baseline”表示在没有安装Patronus的情况下进行的基准测试。与基线相比，Patronus对所有非I/O密集型应用的影响很小。然而，需要注意的是，许多移动应用的主要操作并不是I/O操作。

由于Patronus检查交易，我们实现了一个交易密集型应用程序来评估其性能。该测试应用使用IPhoneSubInfo交易请求设备ID（交易编号：1）。该应用会重复发送交易一千次。我们计算这些交易的执行时间。未安装Patronus的设备时间为890毫秒，而安装了Patronus的设备时间为988毫秒。这表明Patronus的存在只会带来约11.1%的性能开销。

我们还测量了Patronus带来的电池开销。进行了两组实验：
1. 在第一个实验中，我们检查了一部完全充电的Nexus 5在待机模式下24小时内的电池使用情况。未安装Patronus的设备剩余94%电量，而安装了Patronus的设备剩余93%电量。这表明Patronus只带来了轻微的开销。
2. 在第二个实验中，我们在一部完全充电的Nexus 5上连续玩一个小时的游戏。结果显示，安装了Patronus的设备比原始设置多消耗了3%的电量。

总之，Patronus不仅提供了全面的入侵保护，而且对功耗的影响可以忽略不计。

## 相关工作
近年来，如何提供智能手机的安全性和隐私保护越来越受到关注。对于Apple的iOS，Wang等人[51]发现了一个严重的安全架构问题。类似的安全问题也在Android平台上被观察到。权限重新委托问题在[20, 31]中进行了讨论，并且一些研究人员提出了可能的解决方案[28, 16, 22, 36]。Felt等人[27, 15]系统地分析了权限滥用问题。AdRisk[33]揭示了广告库的潜在隐私风险。Luo等人[37]识别了Android WebView组件的问题。Zhou等人[63]对Android恶意软件的特征和演变进行了综合研究。Wu等人[52]和Zheng等人[60]分析了定制固件的安全问题。我们的研究主要集中在Android恶意软件的动态检测和保护上。

有许多工作提出了在PC平台上使用HIPS[46, 43, 42]。然而，PC和移动设备的架构非常不同。因此，很少有专门针对移动操作系统的系统。FireDroid[49]是一个基于ptrace的系统调用拦截系统。由于系统调用是与内核交互的低级函数调用，一个API调用可以生成多个系统调用。因此，基于ptrace的系统无法准确拦截所有入侵操作。TaintDroid[24]和PiOS[23]可以在Android和iOS上跟踪运行时隐私泄露。DroidScope[55]提供了Dalvik语义视图用于动态分析。CrowDroid[18]是一个基于运行时系统调用的检测系统。VetDroid[57]利用权限使用来研究不良的动态行为。AppIntent[56]旨在通过符号执行减少代码搜索空间来检测隐私泄露。Android DDI[40]介绍了对DVM进行插桩的方法。这些系统主要用于恶意软件分析师的动态分析。然而，我们的系统旨在防止用户端的入侵。Aurasium[54]和RetroSkeleton[21]是两种使用重新打包技术的主机系统。FlaskDroid[17]在SE Android上提供了强制访问控制。与我们的系统相比，它们需要重新打包应用或修改系统结构。

对于静态分析，一些系统旨在检测可疑应用、零日恶意软件并评估反病毒软件。DroidMOSS[62]和DroidRanger[65]可以在第三方市场中识别潜在的重新打包应用或零日恶意软件。DroidAnalytics[61]提出了一种三层签名来分析恶意软件以防御混淆。ADAM和DroidChameleon[59, 48]讨论了绕过反病毒引擎的方法。MAST[19]分析了市场规模的恶意软件。Zhou等人[64]提出了一种系统来查找内容泄露和污染漏洞。这些系统可以帮助分析师在代码级别调查恶意行为。

## 结论与未来工作
本文系统地分析了三种流行的HIPS框架，并讨论了它们的实现、优点和缺点。我们还演示了如何绕过市场上流行的一种HIPS软件。此外，我们提出了一种安全的HIPS架构，并实现了Patronus，它可以防止入侵并动态检测恶意软件。通过两阶段动态检测，Patronus利用运行时信息来检测现有恶意软件。我们进行了广泛的实验，展示了Patronus的入侵预防和动态检测能力，并证明Patronus在执行移动应用时只带来了较小的开销。在未来的工作中，我们计划利用云服务以及由Patronus收集的上传运行时信息来提高检测能力。

## 参考文献
[此处列出参考文献]

---

以上是对原文的优化，使其更加清晰、连贯和专业。希望对你有所帮助！