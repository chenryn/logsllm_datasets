6
0.87
1
0.65
0.92
1
0.69
27
0
4
10
y
t
i
s
n
e
D
10
8
6
4
2
0
0 0.2 0.4 0.6 0.8 1
10
8
6
4
2
0
8
6
4
2
0
0 0.2 0.4 0.6 0.8 1
0 0.2 0.4 0.6 0.8 1
Top 500 apps
Top 500 apps
Top 500 apps
BaseBridge samples
FakeAV samples
MobileTx samples
Figure 9: Distribution of correlation scores for Base-
Bridge, FakeAV and MobileTx samples.
note that for MobileTx families, some of the samples crashed
in testing due to the bugs of the malware. Therefore, we ob-
tained four false negative in our evaluation.
In summary,
Patronus can eﬀectively prevent intrusions and detect exist-
ing malware.
5.2 Performance Evaluation
To measure the overhead introduced by Patronus, we use
Quadrant Standard Edition v2.1.1 [6] to evaluate the general-
purpose benchmark for CPU, memory, I/O, 2D and 3D
graphics. The experiments are conducted on a LG Nexus
5 (Qualcomm Snapdragon 800 2.26GHz CPU, Adreno 330
450MHz GPU, 2300mAH battery) running Android 4.4.2
(KitKat) on a Linux 3.4.0 kernel. Table 5 shows the bench-
mark results. The “Baseline” means that the benchmarking
was done on the device without Patronus. Compared with
the baseline, Patronus only has a small impact on all but
I/O intensive apps. However, we want to note that I/O op-
erations are not the main operations for many mobile apps.
Because Patronus inspects transactions, we implement a
transaction intensive app to evaluate its performance. The
test app uses IPhoneSubInfo transaction to request device
ID (transaction #: 1). The app will repeatedly send the
transaction for one thousand times. We calculate the exe-
cution time of these transactions. The time on the device
without Patronus is 890 milliseconds, while the execution
time for a device with the Patronus installed increase to 988
milliseconds. This shows that the presence of Patronus will
only bring about 11.1% performance overhead.
We also measure the battery overhead introduced by Pa-
tronus. We conduct two sets of experiments.
In the ﬁrst
experiment, we check the battery usage of a fully-charged
Nexus 5 in the standby mode for 24 hours. The device with-
out Patronus has 94% battery left, and the device with Pa-
tronus installed shows 93%. This shows that Patronus only
introduces a slight overhead. In the second experiment, we
keep playing games on a fully-charged Nexus 5 for one hour.
The results show that the device with Patronus uses 3%
more battery than the original setting.
In summary, Pa-
tronus not only provides a comprehensive intrusion protec-
tion, but also has a negligible impact on power consumption.
6. RELATED WORK
There is a growing interest on how to provide security and
privacy on smartphones. For Apple’s iOS, Wang et al. [51]
discovers a severe security architecture problem. While most
security issues are also observed on the Android platform.
Total
CPU
Memory
I/O
2D
3D
8,914
20,383
14,354
7,274
333
2,230
8,285
20,205
13,211
6,482
330
2,195
7.1%
0.9%
8.0%
10.9%
0.1%
1.6%
Permission re-delegation problem is discussed in [20, 31] and
some researchers propose possible solutions [28, 16, 22, 36].
Felt et al. [27, 15] systematically analyzes the permission
abuse problem. AdRisk [33] reveals the potential privacy
risks of advertisement libraries. Luo et al. [37] identiﬁes the
problem of Android WebView component. Zhou et al. [63]
conducts a comprehensive study on the characterization and
evolution of Android malware. Wu et al. [52] and Zheng
et al. [60] analyze the security issues on the customized
ﬁrmwares. Our study mainly focuses on the dynamic de-
tection of Android malware and Android protection.
There are a number of works which propose to use HIPS
on the PC platform [46, 43, 42]. However, the architectures
of PC and mobile devices are very diﬀerent. Therefore, few
systems are proposed and targeted speciﬁcally for mobile
operating systems. FireDroid [49] is a ptrace-based system
call interception system. Because system calls are low level
function calls interacting with kernel, one API call can gen-
erate a number of system calls. Therefore, ptrace-based
system cannot accurately intercept all intrusive operations.
TaintDroid [24] and PiOS [23] can track runtime privacy
leaks on Android and iOS. DroidScope [55] provides a Dalvik
semantic view for dynamic analysis. CrowDroid [18] is a de-
tection system based on runtime system call. VetDroid [57]
utilizes permission usage to study undesirable dynamic be-
haviors. AppIntent [56] aims to detect privacy leakage using
symbolic execution to reduce the code search space. An-
droid DDI [40] introduces the method to instrument the
DVM. These systems are for malware dynamical analysis
which are mainly used by malware analysts. However, our
system aims to prevent intrusions on the user end. Aura-
sium [54] and RetroSkeleton [21] are two host-based systems
which use repackaging technique. FlaskDroid [17] provides
mandatory access control on SE Android. Compared with
our system, they need to either repackage the apps or modify
the system structure.
For static analysis, some systems aim to detect suspicious
apps, zero-day malware and evaluate anti-virus software.
DroidMOSS [62] and DroidRanger [65] can identify the po-
tential repackaged apps or zero day malware in the third-
party markets. DroidAnalytics [61] proposes a three-level
signature to analyze malware to defend against obfuscation.
ADAM and DroidChameleon [59, 48] discuss approaches to
bypass anti-virus engines. MAST [19] analyzes the market-
scale malware. Zhou et al. [64] proposes a system to ﬁnd
content leaks and pollution vulnerabilities. These systems
can help the analysts to investigate the malicious behaviors
at the code level.
7. CONCLUSION & FUTURE WORK
In this paper, we systematically analyze three popular
frameworks of HIPS, and discuss their implementations, strengths
and weaknesses. We also demonstrate how to bypass a pop-
ular HIPS software in the market. Moreover, we propose
a secure HIPS architecture and implement Patronus which
can prevent intrusion and can dynamically detect malware.
With the two-phase dynamic detection, Patronus utilizes
runtime information to detect existing malware. We conduct
extensive experiments to demonstrate the intrusion preven-
tion and dynamic detection capabilities of Patronus, and
demonstrate the Patronus only incurs small overhead in ex-
ecuting mobile apps. For future work, we plan to utilize
cloud service along with uploaded runtime information col-
lected by Patronus to improve the detection capability.
8. REFERENCES
[1] 360 one click root. http://shuaji.360.cn/root/index.html.
[2] Android Malware Genome Project.
http://malgenomeproject.org.
[3] APKfuscator. https://github.com/strazzere/APKfuscator.
[4] Apktool. https://code.google.com/p/android-apktool/.
[5] App Shield.
[35] IDC. Apple cedes market share in smartphone operating system
market as android surges and windows phone gains.
http://www.idc.com/getdoc.jsp?containerId=prUS24257413.
[36] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX: statically
vetting android apps for component hijacking vulnerabilities. In
CCS, 2012.
[37] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks on
webview in the android system. In ACSAC, 2011.
[38] W. Luo, S. Xu, and X. Jiang. Real-time detection and
prevention of android sms permission abuses. In Proc. of the
ﬁrst international workshop on Security in embedded systems
and smartphones, 2013.
[39] McAfee Labs. McAfee threats report: Second quarter 2013.
Technical report, McAfee Labs, 2013.
[40] C. Mulliner. Android DDI: Introduction to dynamic dalvik
instrumentation. In The 11th Annual HITB Security
Conference in ASIA, 2013.
[41] C. Mulliner, J. Oberheide, W. Robertson, and E. Kirda.
Patchdroid: scalable third-party security patches for android
devices. In ACSAC, 2013.
[42] N. Nethercote and J. Seward. Valgrind: a framework for
heavyweight dynamic binary instrumentation. ACM Sigplan
Notices.
http://www.wandoujia.com/apps/com.gmail.exathink.appshield.
[43] J. Newsome and D. Song. Dynamic taint analysis for automatic
[6] Aurora Softworks quadrant standard edition.
https://play.google.com/store/apps/details?id=com.
aurorasoftworks.quadrant.ui.standard.
[7] cyanogenmod. http://www.cyanogenmod.org.
[8] DroidBox. https://code.google.com/p/droidbox/.
[9] Jinshan mobile duba. http://m.duba.net/.
[10] Lbe secrity guard. http://www.lbesec.com/.
[11] mobile malware mini dump.
http://contagiominidump.blogspot.com/.
[12] monkey. http://developer.android.com/tools/help/monkey.html.
[13] Qihoo 360 mobile guard. http://shouji.360.cn/.
[14] smali/baksmali. https://code.google.com/p/smali/.
[15] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. Pscout:
analyzing the android permission speciﬁcation. In CCS, 2012.
[16] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi,
and B. Shastry. Towards taming privilege-escalation attacks on
android. In NDSS, 2012.
[17] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and
ﬁne-grained mandatory access control on android for diverse
security and privacy policies. In USENIX Security, 2013.
[18] I. Burguera, U. Zurutuza, and S. Nadjm-Tehrani. CrowDroid:
behavior-based malware detection system for android. In Proc.
of the 1st ACM workshop on Security and privacy in
smartphones and mobile devices, 2011.
[19] S. Chakradeo, B. Reaves, P. Traynor, and W. Enck. MAST:
triage for market-scale mobile malware analysis. In ACM
WiSec, 2013.
[20] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing
inter-application communication in android. In MobiSys, 2011.
[21] B. Davis and H. Chen. RetroSkeleton: retroﬁtting android
apps. In MobiSys, 2013.
[22] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach.
QUIRE: Lightweight provenance for smart phone operating
systems. In USENIX Security, 2011.
[23] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting
privacy leaks in ios applications. In NDSS, 2011.
[24] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth. TaintDroid: an information-ﬂow
tracking system for realtime privacy monitoring on
smartphones. In OSDI, 2010.
[25] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A study
of android application security. In USENIX Security, 2011.
[26] F-Secure. Threat report h2 2013.
[27] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner.
Android permissions demystiﬁed. In CCS, 2011.
[28] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin.
Permission re-delegation: attacks and defenses. In USENIX
Security, 2011.
[29] J. Forristal. Android: One root to own them all. In Blackhat
USA 2013, 2013.
[30] Google. Platform versions.
http://developer.android.com/about/dashboards/index.html.
[31] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic
detection of capability leaks in stock android smartphones. In
NDSS, 2012.
[32] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang.
RiskRanker: scalable and accurate zero-day android malware
detection. In MobiSys, 2012.
[33] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe
exposure analysis of mobile in-app advertisements. In WiSec,
2012.
[34] N. Harbour. Win at reversing: Api tracing and sandboxing
through inline hooking. In DEFCON, 2009.
detection, analysis, and signature generation of exploits on
commodity software. Internet Society, 2005.
[44] P. Olson. Your smartphone is hackers’ next big target. http:
//edition.cnn.com/2013/08/26/opinion/olson-mobile-hackers,
August 2013.
[45] A. Police. App Ops: Android 4.3’s hidden app permission
manager, control permissions for individual apps.
[46] N. Provos. Improving host security with system call policies. In
USENIX Security, 2003.
[47] V. Rastogi, Y. Chen, and W. Enck. AppsPlayground:
automatic security analysis of smartphone applications. In
CODASPY, 2013.
[48] V. Rastogi, Y. Chen, and X. Jiang. DroidChameleon:
evaluating android anti-malware against transformation
attacks. In ASIACCS, 2013.
[49] G. Russello, A. B. Jimenez, H. Naderi, and W. van der Mark.
Firedroid: hardening security in almost-stock android. In
ACSAC, 2013.
[50] T. Strazzere. Dex education: Practicing safe dex. In Blackhat
USA 2012, 2012.
[51] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee. Jekyll on iOS:
when benign apps become evil. In USENIX Security, 2013.
[52] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact of
vendor customizations on android security. In CCS, 2013.
[53] xda-developers. PDroid.
http://forum.xda-developers.com/showthread.php?t=1357056.
[54] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium: practical policy
enforcement for android applications. In USENIX Security,
2012.
[55] L. K. Yan and H. Yin. DroidScope: seamlessly reconstructing
the os and dalvik semantic views for dynamic android malware
analysis. In USENIX Security, 2012.
[56] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang.
AppIntent: Analyzing sensitive data transmission in android
for privacy leakage detection. In CCS, 2013.
[57] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. Wang,
and B. Zang. Vetting undesirable behaviors in android apps
with permission use analysis. In CCS, 2013.
[58] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and
W. Zou. Smartdroid: an automatic system for revealing
ui-based trigger conditions in android applications. In Proc. of
the second ACM workshop on Security and privacy in
smartphones and mobile devices, 2012.
[59] M. Zheng, P. P. C. Lee, and J. C. S. Lui. ADAM: an automatic
and extensible platform to stress test android anti-virus
systems. In DIMVA, 2013.
[60] M. Zheng, M. Sun, and J. Lui. DroidRay: a security evaluation
system for customized android ﬁrmwares. In ASIACCS, 2014.
[61] M. Zheng, M. Sun, and J. C. S. Lui. DroidAnalytics: A
signature based analytic system to collect, extract, analyze and
associate android malware. In TrustCom, 2013.
[62] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. Detecting
repackaged smartphone applications in third-party android
marketplaces. In Proc. of the second ACM conference on Data
and Application Security and Privacy, 2012.
[63] Y. Zhou and X. Jiang. Dissecting android malware:
Characterization and evolution. In IEEE Symposium on
Security and Privacy, 2012.
[64] Y. Zhou and X. Jiang. Detecting passive content leaks and
pollution in android applications. In NDSS, 2013.
[65] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, you, get oﬀ of
my market: Detecting malicious apps in oﬃcial and alternative
android markets. In NDSS, 2012.