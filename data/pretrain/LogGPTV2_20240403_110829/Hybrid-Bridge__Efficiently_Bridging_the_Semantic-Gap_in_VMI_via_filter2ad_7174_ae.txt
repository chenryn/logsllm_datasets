15.57X
0.01
12.00X
0.155
1.90X
0.008
19.12X
0.009
53.44X
0.016
37.37X
TABLE IV: Performance of each component of HYBRID-BRIDGE and its comparison with VMST.
2
4
10
10
1852
1892
3927
11875
23165
86578
97390
11663
124525
418124
490713
84.60X
78.40X
97.60X
77.80X
7.86X
49.25X
36.88X
21.54X
13.59X
20.13X
19.35X
29.22X
10.68X
13.76X
13.53X
1.976
1.985
2.199
2.211
2.360
1.810
2.755
2.329
1.719
4.186
5.047
4.845
4.460
10.047
12.585
0.005
0.005
0.005
0.005
0.094
0.012
0.017
0.048
0.107
0.109
0.120
0.295
0.153
0.481
0.598
the execution of each command. These are shown from the
third to seventh columns. An interesting observation can be
drawn from these statistics is that semi-redirectable and bi-
redirectable instructions tend to be rare compared to other
instruction categories, and the majority of the instructions are
either neutral, or non-redirectable.
Also, note that HYBRID-BRIDGE does not have a direct
correspondence with the size of the user level program, and
all of our instrumentation execution occurs at kernel level for
the system call of interest, which is the primary factor for the
scalability of our system. For instance, the ﬁrst three programs
in Table III have less monitored instructions even though their
user level code size is as big as others. In our experiment,
ps command has the largest number of trapped instructions
according to Table III. More speciﬁcally, we dynamically
observed over four million instruction execution at kernel side,
which is in total 10, 244 unique instructions according to sum
of the third column to the seventh of Table III.
B. Performance Evaluation
HYBRID-BRIDGE is designed to signiﬁcantly improve the
performance of existing VMI solutions. In this subsection, we
present how and why HYBRID-BRIDGE advances the state-of-
the-art and meets our design goals.
Table IV shows the execution time of inspection tools
tested in §VII-A. The second and ﬁfth columns of Table IV
display the execution time of inspection tools on a vanilla
KVM and FAST-BRIDGE, respectively. Comparing these two
columns reveals that FAST-BRIDGE has on average 10X
slowdown compared to the vanilla KVM. Fig. 3 illustrates the
details of the performance evaluation for each inspection tool
in FAST-BRIDGE compared to KVM.
The fourth column of Table IV displays the execution time
of inspection tools in SLOW-BRIDGE. Taint analysis engine
and the full emulation architecture of QEMU are the two main
contributors to 150X slowdown of SLOW-BRIDGE compared
to FAST-BRIDGE.
The third column of Table IV shows the running time
for VMST. FAST-BRIDGE speedup compared to VMST is
illustrated in the sixth column as well as in Fig. 4. It is
60
50
40
30
20
10
0
)
s
e
m
i
t
(
n
w
o
d
w
o
l
S
Fig. 3: FAST-BRIDGE Slowdown Compared to KVM.
)
s
e
m
i
t
(
p
u
d
e
e
p
S
100
90
80
70
60
50
40
30
20
10
0
Fig. 4: FAST-BRIDGE Speedup Compared to VMST.
important to notice that FAST-BRIDGE on average has 38X
speedup compared to VMST.
Speedup and Slowdown Gap. After examining the perfor-
mance data, a natural question that pops up is why there is
a huge gap between speedup of inspection tools in Table IV?
The very same question should be also answered for slowdown
gap between inspection tools. While there are several reasons
to justify the speedup or slowdown gap, we believe the main
contributor is the number of VMExits.
As we mentioned in §III-C FAST-BRIDGE notiﬁes KVM
to change the data redirection policy by using code patching
technique. The software trap, raised by code patching, causes a
VMExit and transfers the execution to the KVM, as illustrated
in Table I. The sixth column of Table IV shows the number of
11
App.
Name
gettime
getpid
tinyps
getprocname
Description
Native (sec.)
VIRTUOSO (sec.)
Tells current time of system
Shows pid of current process
A compact version of PS
Displays current Process Name
0.004
0.004
0.020
0.006
0.023
0.024
1.501
2.716
#X86 Inst. in
VIRTUOSO
482
516
140843
294797
FAST-BRIDGE (sec.)
FAST-BRIDGE vs.
VIRTUOSO
0.005
0.005
0.064
0.132
4.60X
4.80X
23.45X
20.57X
TABLE V: Performance comparison of FAST-BRIDGE and VIRTUOSO
VMExit during the corresponding inspection tools’ execution.
We also illustrate this fact in Fig. 3, which sorts the inspection
tools based on the number of VMExits. We can observe
from Fig. 3 that as the number of VMExits increases from
left to right, FAST-BRIDGE slowdown compared to vanilla
KVM jumps from 25% to more than 20X. This trend clearly
illustrates that VMExit is the main contributor to the FAST-
BRIDGE overhead.
The FAST-BRIDGE speedup illustrated in Fig. 4 also
indicates the negative effect of VMExit on FAST-BRIDGE. In
particular, Fig.4 shows as the number of VMExit increases
from left to right, the speedup factor drops dramatically. For
example getpid achieved 84X speedup because it needs only
two VMExits but ps cannot achieved better than 13X speedup
because it causes more than 418,000 VMExits.
Comparison with VIRTUOSO. In addition, we use the four
inspection tools, shipped in VIRTUOSO source code, to com-
pare the performance of FAST-BRIDGE and VIRTUOSO. The
detailed result
is presented in Table V. We can see that
FAST-BRIDGE achieves 4X-23X speed up (13X on average)
compared to VIRTUOSO. The ﬁfth column in Table V shows
the number of x86 instructions extracted by VIRTUOSO for
each tool. Considering the ﬁfth and the last columns of
Table V, we can see that as the size of inspection tool
increases FAST-BRIDGE achieves a better speedup compared
to VIRTUOSO.
We have veriﬁed that the two primary reasons of VIRTU-
OSO’s slowdown are: (1) micro operations code explosion –
the number of micro operations often increases by 3X to 4X,
and (2) executing the translated micro operations in Pythons
(which is very slow).
Number of Fall-Backs. HYBRID-BRIDGE outperforms VMST
and VIRTUOSO if the inspection tools primarily get executed
in FAST-BRIDGE. It is important to ﬁnd out how many times
FAST-BRIDGE have to fall back to SLOW-BRIDGE before it
can execute an inspection tool completely in FAST-BRIDGE.
In order to answer this question we take ﬁve different
snapshots of untrusted VM and execute these inspections tools
using HYBRID-BRIDGE. As shown in Fig. 5, in the ﬁrst round
when no Meta-Data is available, all the tools fall back to
SLOW-BRIDGE and they all have a very high overhead. Fig.
5 also shows that the ﬁrst round of Meta-Data provides large
enough instruction category information for FAST-BRIDGE: 11
out of 15 inspection tools with no more memoization (no more
fall-back) to SLOW-BRIDGE.
The rest four inspection tools face new code paths in their
second executions and fall back to SLOW-BRIDGE for the
second time. After two rounds of execution on two different
pidstat
ps
dmesg
iostat
netstat 
lsmod
mpstat
vmstat
free
uptime
uname
arp
hostname
gettime
getpid
14
12
10
8
6
4
2
0
s
d
n
o
c
e
S
1st
2nd
3rd
4th
5th
N-th Snapshot
Fig. 5: Execution time of inspection tools in
HYBRID-BRIDGE with ﬁve different memory snapshots
memory snapshots, according to Fig.5, FAST-BRIDGE is able
to execute all the inspection tools on new memory snapshots
without any support from SLOW-BRIDGE. In other words, after
few runs all the inspection tools would be executed with a very
low overhead in FAST-BRIDGE.
VIII. LIMITATIONS AND FUTURE WORK
Homogeneity of Guest OS Kernel. As discussed in §II,
HYBRID-BRIDGE requires that both trusted VMs in FAST-
BRIDGE and SLOW-BRIDGE deploy the same OS version as
the untrusted VMs. Note that we only require the same version
of guest OS kernel, and do not require the same set of kernel
modules. For instance, lsmod can certainly return different
sets of running kernel modules for different running instances,
because end users might have different customizations for
kernel modules.
Memory-only Introspections. Similar
to VIRTUOSO and
VMST, HYBRID-BRIDGE supports introspection tools that
investigate only memory but not on ﬁles in the disk. It might
be an option to directly mount disk ﬁle and inspect it. But for
encrypted ﬁle system, we have to seek other techniques. We
leave the introspection of disk ﬁles in future work.
Also, if a memory page is swapped out, HYBRID-BRIDGE,
including VMST and VIRTUOSO cannot perform the introspec-
tion on these pages. However, we may argue that OSes usually
tend not to swap out the kernel pages since they are shared
between applications. In fact, kernel memory pages are never
swapped out in Linux kernel [6].
Attacking HYBRID-BRIDGE. Since HYBRID-BRIDGE is built
atop KVM and QEMU, any individual successful exploits
12
if our
against KVM or QEMU might be able to compromise
HYBRID-BRIDGE,
infrastructure is not completely
isolated from attackers. Moreover,
it might appear to be
possible to launch a returned-oriented programming (ROP)
attack, or other control ﬂow hijack attacks against our trusted
VM by manipulating the non-executable data in the untrusted
VM kernel because HYBRID-BRIDGE consumes data from
untrusted memory snapshot.
However, it is important to mention that HYBRID-BRIDGE
monitors all the instruction execution (including the data ﬂow),
and it never fetches a return address from the untrusted VM
(recall stack data is never redirected). Therefore, the only way
for attacker to mislead the control ﬂow of our trusted VM is
to manipulate the function pointers. However, this can also
be detected because we check all the instruction execution:
whenever a function pointer value is loaded from untrusted
VM and later gets called, we can raise ﬂags (because we can
observe this data ﬂow) and stop the function call, though this
will lead to a denial of service attack.
Evading Our Introspection. HYBRID-BRIDGE assists VMI
developers to reuse inspection tools for introspection purposes.
However if system calls and well deﬁned APIs used in
inspection tools are not rich enough to do a introspection task
then HYBRID-BRIDGE cannot help further. For example, if a
Linux rootkit removes a malicious task from task lined list then
an inspection tool which rely on task lined list to enumerate all
the running processes would fail to detect the malicious task.
Note that both VIRTUOSO and VMST also face this limitation.
More Precise Execution Context Identiﬁcation for Bi-
Redirectable Instructions. FAST-BRIDGE depends on the exe-
cution context to determine the correct date redirection policy
for bi-redirectable instructions. While our current approxima-
tion design with CSC and P C has not generated any conﬂict
yet, if our SLOW-BRIDGE really detects such a case, we have
to resort other means such as instrumenting kernel code to
add certain wrapper to further differentiate the context or
developing kernel path encoding technique. We leave this as
another part of our future work if there does exist such a case.