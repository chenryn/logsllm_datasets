# 【技术分享】如何监控Windows控制台活动（Part 1）

## 译文声明
本文是翻译文章，原文来源于fireeye.com。译文仅供参考，具体内容和含义以原文为准。
- 译者：兴趣使然的小胃
- 预估稿费：170 RMB
- 投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 一、简介
在处理应急响应事件时，Mandiant发现攻击者有时会主动使用被突破网络中的操作系统。攻击者经常通过**远程桌面协议（RDP）**来使用交互式控制台程序，如命令行、PowerShell以及自定义的C2（命令与控制）控制台工具等。基于这一观察，Mandiant的**ICE**（Innovation and Custom Engineering）团队研究了如何捕捉端点上的黑客活动轨迹。

捕捉这类数据的难度取决于目标Windows系统的版本。例如，在实时系统上捕捉相关数据非常困难。这一任务的复杂性与过去十几年中Windows对虚拟控制台的具体实现方式密切相关。本文将讨论过去几年中Windows对控制台架构的具体实现，并重点分析当前Windows版本中控制台的具体实现机制。

## 二、控制台概述
Windows PE加载器根据PE选项头中的“**Subsystem**”字段判断某个文件是否为控制台应用程序。如果该字段的值为**IMAGESUBSYSTEMWINDOWS_CUI**，加载器会为该进程分配一个控制台服务器。不同版本的Windows系统中，控制台服务器的具体实现有所不同。从Windows XP起，控制台的实现方式经过了三次较大的改动。无论具体的实现细节如何，当运行某个客户端（如cmd.exe、powershell.exe等）时，默认情况下，系统通常会使用AllocConsole这个Win32 API来建立与控制台服务器的连接。用户键入命令时，需要与服务器进程进行交互，这些命令随后会通过进程间通信（**Interprocess communication**，IPC）机制传递给客户端进程。一个控制台服务器可以同时托管一个或多个客户端。

## 三、Windows控制台的演进历史
### Windows XP到Windows Vista
从Windows XP到Windows Vista，Windows使用**客户端/服务器运行时子系统（Client/Server Runtime Subsystem process，CSRSS）**来处理用户的输入，并将输入数据发送给客户端进程。客户端与CSRSS之间使用本地过程调用（Local Procedure Call，LPC）端口进行通信。在这种模型中，客户端以当前用户身份运行，而服务器以本地系统账户（Local System）身份运行，因此容易受到权限提升漏洞的影响。攻击者可以利用CSRSS的脆弱性，在低权限用户模式下触发CSRSS的漏洞代码路径，获取SYSTEM级别的访问权限。

### Windows 7和Windows Server 2008 R2
随着Windows 7和Windows Server 2008 R2的发布，上述架构问题得到了解决。新引入了一个控制台宿主进程（conhost.exe），以托管控制台的输入线程。这个进程现在与客户端运行在同一个上下文环境中，消除了之前的攻击场景。更新后的Windows 7控制台架构如图2所示。

当Windows 7中分配一个控制台时，CSRSS会启动一个新的conhost.exe实例进程。操作系统会创建一个高级本地过程调用（Advanced Local Procedure Call，ALPC）端口，名称为RPC ControlConsoleLPC。这个端口与映射到客户端和服务器进程中的共享对象配合使用，以便轻松共享命令行数据。此外，系统还会创建一个事件对象（RPC ControlConsoleEvent），用于在新的数据出现时通知客户端与服务器。一个conhost.exe进程可以为多个客户端应用提供服务，如图3所示。

### Windows 8及以后
从Windows 8开始，Windows引入了新的控制台实现机制。新架构中有一个专门的内核驱动（ConDrv.sys）负责处理客户端与服务器进程之间的控制台I/O数据。驱动通过名为DeviceConDrv的驱动对象为用户模式下的应用程序提供接口。用户模式下的应用程序可以使用一些命名空间参数（如Connect、Server、Input、Output、Reference、CurrentIn以及CurrentOut）来打开这个驱动对象。根据实际需求，客户端应用程序通常会打开控制台驱动的多个句柄，如图4所示。

当某个命令行进程分配一个控制台时，kernelbase.dll会打开DeviceConDrv的一个句柄，并请求系统创建一个新的conhost.exe进程。ConDrv会在内核模式下运行这个进程，并分配内存描述符列表（memory descriptor list，MDL）链。MDL链可以用来映射Conhost进程及其客户端的内存页面，以便该进程与客户端之间共享数据。与之前版本所使用的LPC/ALPC端口不同，系统现在通常会使用Fast I/O将消息传递给控制台驱动。在Fast I/O的帮助下，应用程序可以与驱动进行通信，无需为每个请求创建I/O请求数据包（I/O request packet，IRP）。这些快速I/O请求由ConDrv驱动负责，可以用来读取或写入控制台。

### Windows 10
在Windows 10中，conhost.exe主要充当容器进程角色。ConhostV2.dll或者ConhostV1.dll负责主要的输入线程以及所有的服务器功能。默认情况下，系统会加载ConhostV2.dll并向Windows 10用户提供新的控制台功能（如控制台窗口全屏化）。ConhostV1.dll实现了“传统模式”的控制台功能，启用这种模式后，控制台的表现与Windows 7及之前的版本类似。无论具体使用的是哪个版本，系统都使用ConDrv.sys来传输控制台客户端与服务器之间的消息。整体结构如图5所示。

读者可以阅读第二篇[文章](https://www.fireeye.com/blog/threat-research/2017/08/monitoring-windows-console-activity-part-two.html)了解后续内容。