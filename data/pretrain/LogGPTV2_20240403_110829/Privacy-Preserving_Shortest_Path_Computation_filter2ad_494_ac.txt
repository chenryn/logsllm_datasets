protocol. We say that a sequence of source-destination queries (s1, t1), . . . , (s(cid:96), t(cid:96)) is consistent if for all
i ∈ [(cid:96)], t1 = ti, and si+1 = vi where vi is the ﬁrst node on the shortest path from si to ti.
Consistency for the destinations. To bind the client to a single destination, we do the following. At
the beginning of the protocol, for each row i ∈ [n] in Ddst, the server chooses a symmetric encryption key
kdst,i. Then, on each round of the protocol, it encrypts the ith record in Ddst with the key kdst,i. Next,
at the beginning of the protocol, the client OTs for the key kdst,t corresponding to its destination t. Since
this step is performed only once at the beginning of the protocol, the only record in Ddst that the client
can decrypt is the one corresponding to its original destination. Because each record in Ddst is encrypted
under a diﬀerent key, the client can use a PIR protocol instead of an SPIR protocol when requesting the
record from Ddst.
Consistency for the sources. Maintaining consistency between the source queries is more challenging
because the source changes each round. We use the fact that the preprocessed graph has out-degree at
4The databases Dsrc and Ddst are each databases over n records (as opposed to n2 in the straw-man protocol from Section 1).
5While a malicious server can send the client malformed circuits or induce selective failure attacks, the server does not receive
any output during the protocol execution nor does the client abort the protocol when malformed input is received. Thus, we
achieve privacy against a malicious server.
9
Inputs: Tuples (zne, γne, δne), (znw, γnw, δnw) ∈ F3
destination nodes s, t ∈ [n]. The bit-length τ is public and ﬁxed (hard-wired into g).
p, PRF keys k0
nw, k1
ne, k1
ne, k0
nw ∈ {0, 1}ρ, and the source and
Operation of g:
• If s = t, then output ⊥.
• If [γnezne + δne]p /∈ [−2τ , 2τ ] or [γnwznw + δnw]p /∈ [−2τ , 2τ ], output ⊥.
• Let bne = 1{[γnezne + δne]p > 0}, and let bnw = 1{[γnwznw + δnw]p > 0}. Output (bne, bnw, kbne
ne , kbnw
nw ).
Figure 2: Neighbor-computation function g for the private routing protocol.
most four. Thus, on each round, there are at most four possible sources that can appear in a consistent
query in the next round.
Our construction uses a semantically-secure symmetric encryption scheme (Enc, Dec) with key-space
{0, 1}(cid:96), and a PRF F with domain {n, e, s, w} and range {0, 1}(cid:96). On each round of the protocol, the server
generates a new set of source keys ksrc,1, . . . , ksrc,n ∈ {0, 1}(cid:96) for encrypting the records in Dsrc in the next
round of the protocol. The server also chooses four PRF keys k0
nw, which are used to derive
directional keys kn, ke, ks, kw. Next, for each node v ∈ [n] in Dsrc, let vdir be the neighbor of v in direction
dir ∈ {n, e, s, w} (if there is one). The server augments the vth record in Dsrc with an encryption of the
source key ksrc,vdir under the directional key kdir.
When the client requests record v from Dsrc, it also obtains encryptions of the keys of the neighbors
of v for the next round of the protocol. By ensuring the client only learns one of the directional keys, it
will only be able to learn the encryption key for a single source node on the next round of the protocol.
We achieve this by including the PRF keys k0
nw used to derive the directional keys as input
to the garbled circuit. Then, in addition to outputting the direction, the garbled circuit also outputs the
subset of PRF keys needed to derive exactly one of the directional keys kn, ke, ks, kw. This ensures that
the client has at most one source key in the next round of the protocol.
nw, k1
nw, k1
ne, k0
ne, k1
ne, k0
ne, k1
Consistency within a round.
In addition to ensuring consistency between consecutive rounds of the
protocol, we also require that the client’s input to the garbled circuit is consistent with the output it
obtained from evaluating the aﬃne encodings. To enforce this, we use the fact that the entries of the
routing matrices A, B are bounded: there exists τ such that (cid:104)As, Bt(cid:105) ∈ [−2τ , 2τ ] for all s, t ∈ V . Then, in
our construction, we choose the size of the ﬁnite ﬁeld Fp to be much larger than the size of the interval
[−2τ , 2τ ]. Recall that the arithmetic circuit computes a blinded inner product z ← α(cid:104)As, Bt(cid:105) + β where
α, β are uniform in F∗
p and Fp, respectively. To unblind the inner product, the server constructs a garbled
circuit that ﬁrst evaluates the function gγ,δ(z) = γz +δ with γ = α−1 and δ = −α−1β. By construction, γ is
uniform over F∗
independent family of functions, we conclude that the probability that gγ,δ(z(cid:48)) ∈ [−2τ , 2τ ] is precisely
2τ +1/p for all z(cid:48) ∈ Fp. By choosing p (cid:29) 2τ +1, we can ensure that the adversary cannot successfully cheat
except with very small probability.
p and δ is uniform over Fp. Thus, using the fact that(cid:8)gγ,δ(z) | γ ∈ F∗
(cid:9) is a pairwise
p, δ ∈ Fp
Lastly, we remark that when the client issues a query (s, t) where s = t, the protocol should not
reveal the key for any other node in the graph. To address this, we also introduce an equality test into
the garbled circuit such that on input s = t, the output is ⊥. We give a complete speciﬁcation of the
neighbor-computation function that incorporates these additional consistency checks in Figure 2.
10
Fix a security parameter λ and a statistical security parameter µ. Let G = (V, E) be a weighted directed graph
with n vertices, such that the out-degree of every vertex is at most 4. The client’s input to the protocol consists
of two nodes, s, t ∈ V , representing the source and destination of the shortest path the client is requesting. The
server’s inputs are the compressed routing matrices A(ne), B(ne), A(nw), B(nw) ∈ Zn×d (as deﬁned in Section 3).
We assume the following quantities are public and known to both the client and the server:
• The structure of the graph G, but not the edge weights.
• The number of columns d in the compressed routing matrices.
• A bound on the bit-length τ of the values in the products A(ne) · (B(ne))T and A(nw) · (B(nw))T .
• The total number of rounds R.
let (Enc, Dec) be a CPA-secure symmetric encryption scheme with key space
In the following description,
{0, 1}(cid:96), and let F : {0, 1}ρ × {n, e, s, w} → {0, 1}(cid:96) be a PRF (where (cid:96), ρ = poly(λ)). Fix a prime-order ﬁnite
ﬁeld Fp such that p > 2τ +µ+1.
Setup:
1. For each i ∈ [n], the server chooses independent symmetric encryption keys k(1)
2. The client and the server engage in two 1-out-of-n OT protocols with the client playing the role of the
r←− {0, 1}(cid:96).
src,i, kdst,i
receiver:
ˆkdst.
• The client requests the sth record from the server’s database (k(1)
src,n), receiving a value ˆk(1)
src .
• The client requests the tth record from the server’s database (kdst,1, . . . , kdst,n), receiving a value
src,1, . . . , k(1)
For each round r = 1, . . . , R of the protocol:
−α−1
1. The server chooses blinding factors αne, αnw
ne βne ∈ Fp. Deﬁne γnw and δnw analogously.
ne and δne =
p → Fp where fne(x, y) = (cid:104)αnex, y(cid:105) + βne and fnw(x, y) = (cid:104)αnwx, y(cid:105) + βnw. The server
2. Let fne, fnw : Fd
p and βne, βnw
p × Fd
r←− F∗
r←− Fp. Next, let γne = α−1
then does the following:
• Apply the aﬃne encoding algorithm (Eq. 4) to fne to obtain encoding functions Laﬃne
ne,x , Laﬃne
nw,y , for
the inputs x and y, respectively.
• Apply the aﬃne encoding algorithm to fnw to obtain encoding functions Laﬃne
nw,x , Laﬃne
nw,y .
3. Let C unblind be a Boolean circuit for computing the neighbor-computation function in Figure 2. The
server runs Yao’s garbling algorithm on C unblind to obtain a garbled circuit ˜C unblind along with encoding
functions Lunblind
r←− {0, 1}(cid:96). These are used to encrypt the
r←− {0, 1}ρ, two for each axis. Then, the server deﬁnes
, for each of the inputs x to the neighbor-computation function in Figure 2.
4. The server chooses symmetric encryption keys k(r+1)
contents of the source database on the next round of the protocol.
src,1 , . . . , k(r+1)
src,n
x
5. The server chooses four PRF keys k0
nw, k1
nw
the encryption keys for each direction as follows:6
ne, k1
ne, k0
kn = F (k0
ks = F (k1
ne, n) ⊕ F (k0
ne, s) ⊕ F (k1
nw, n)
nw, s)
ke = F (k0
kw = F (k1
ne, e) ⊕ F (k1
ne, w) ⊕ F (k0
nw, e)
nw, w).
Figure 3: The fully-private routing protocol, as outlined in Section 4. The protocol description continues on the next
page.
6An alternative approach is for the server to choose the encryption keys kn, ke, ks, kw uniformly at random from {0, 1}(cid:96)
In this case, the neighbor-computation function (Figure 2) would be
instead of using the key-derivation procedure.
modiﬁed to take as input the encryption keys kn, ke, ks, kw rather than the PRF keys k0
nw, and would output
a single encryption key. While this approach is conceptually simpler, the resulting neighbor-computation circuits are
slightly larger. In our implementation, we use the key-derivation procedure shown in the ﬁgure.
nw, k1
ne, k1
ne, k0
11
6. The server prepares the source database Dsrc as follows. For each node u ∈ [n], the uth record in Dsrc is
an encryption under k(r)
src,u of the following:
• The arithmetic circuit encodings Laﬃne
and A(nw)
.
• The garbled circuit encodings Lunblind
• Encryptions of the source keys for the neighbors of u in the next round of the protocol under the
) of the source vectors A(ne)
(u) of the source node u.
nw,x (A(nw)
ne,x (A(ne)
), Laﬃne
u
u
u
u
s
direction keys:
κn = Enc(kn, k(r+1)
src,vn ),
κe = Enc(ke, k(r+1)
src,ve ),
κs = Enc(ks, k(r+1)
src,vs ),
κw = Enc(kw, k(r+1)
src,vw ),
where vn, ve, vs, vw is the neighbor of u to the north, east, south, or west, respectively. If u does not
have a neighbor in a given direction dir ∈ {n, e, s, w}, then deﬁne k(r+1)
src,vdir to be the all-zeroes string
0(cid:96).
7. The server prepares the destination database Ddst as follows. For each node u ∈ [n], the uth record in
), Laﬃne
nw,y (B(nw)
u
) of the destination vectors B(ne)
u
and
Ddst is an encryption under kdst,u of the following:
ne,y (B(ne)
• The arithmetic circuit encodings Laﬃne
u
B(nw)
u
.
• The garbled circuit encodings Lunblind
t
(u) of the destination node u.
8. The client and server engage in two PIR protocols with the client playing role of receiver:
• The client requests record s from the server’s database Dsrc and obtains a record ˆcsrc.
• The client requests record t from the server’s database Ddst and obtains a record ˆcdst.
9. The client decrypts the records: ˆrsrc ← Dec(ˆk(r)
src , ˆcsrc) and ˆrdst ← Dec(ˆkdst, ˆcdst):
ne,x and ˆLaﬃne
• It parses ˆrsrc into two sets of arithmetic circuit encodings ˆLaﬃne
• It parses ˆrdst into two sets of arithmetic circuit encodings for ˆLaﬃne
encodings ˆLunblind
s
, and four encryptions ˆκn, ˆκe, ˆκs, ˆκw of source keys for the next round.
ne,y and ˆLaﬃne
nw,y , and a set of garbled
nw,x , a set of garbled circuit
circuit encodings ˆLunblind
t
.
Using the encodings ˆLaﬃne
Similarly, using the encodings ˆLaﬃne
or ˆrdst fails or the arithmetic circuit encodings are malformed, the client sets ˆzne, ˆznw
ne,y , the client evaluates the arithmetic circuit (Eq. 5) to learn ˆzne.
nw,y , the server evaluates to learn ˆznw. If the parsing of ˆrsrc
ne,x and ˆLaﬃne
nw,x and ˆLaﬃne
r←− Fp.
10. The client engages in a series of 1-out-of-2 OTs with the server to obtain the garbled circuit encodings
denote the encodings
(ˆznw) of ˆzne and ˆznw, respectively. Let ˆLunblind
(ˆzne) and Lunblind
and ˆLunblind
zne
znw
zne
Lunblind
the client receives.
znw
11. The server sends to the client the garbled circuit ˜C unblind and encodings of the unblinding coeﬃcients
Lunblind
γne
(γne), Lunblind
γnw
(γnw), Lunblind
δne
(δne), Lunblind
δnw
(δnw),
as well as encodings of the PRF keys
Lunblind
k0
ne
(k0
ne), Lunblind
k1
ne
(k1
ne), Lunblind