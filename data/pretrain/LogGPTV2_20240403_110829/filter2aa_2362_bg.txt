X
X
X
X
beSTORM
X
X
X
X
X
X
8.7
A Closer Look at the Results
Some of the results of the testing are surprising, and some aren’t so surprising. First,
let’s look at which bugs were found by which fuzzers. Quite a few bugs were found
by all the fuzzers; there were also bugs that were found by only one fuzzer. We’ll
take a closer look at why various bugs were found or missed in a bit. First, let’s try
to draw some general conclusions from the data.
8.7.1
FTP
Let’s take a look at some of the more prominent anomalies in the data. The first
appears in the testing of FTP. Here are some bugs of interest.
• Bugs 9, 12, and 13 were found by GPF but no other fuzzers.
• Bugs 14 and 16 were found by Taof and ProxyFuzz but no other fuzzers.
• Bugs 4, 5, and 15 were found by the generational-based fuzzers, but not the
mutation-based ones.
Let’s take a closer look at some of these bugs. Bug 9 is a format string vulnerabil-
ity in the SIZE FTP verb (remember that pr_response_add_err() acts as a printf like
function).
234
Fuzzer Comparison
Figure 8.3
Summary of percentage of bugs found and code coverage obtained by fuzzers.
Table 8.3
Results of Fuzzing the DNS Client
Bug
0
1
2
3
4
5
7
8
11
12
13
14
15
GPF Random
GPF Generic
X
X
X
X
ProxyFuzz
X
X
X
X
X
X
X
X
X
Codenomicon
X
X
X
X
X
X
X
X
X
X
beSTORM
X
MODRET core_size(cmd_rec *cmd) {
...
if (!path || !dir_check(cmd->tmp_pool, cmd->argv[0], cmd->group,
path, NULL) || pr_fsio_stat(path, &sbuf) == -1) {
char tempbuf[64];
if(strstr(cmd->arg, "%")){
BUGREPORT(9);
}
strncpy(tempbuf, cmd->arg, 64);
strncat(tempbuf, ": ", 64);
strncat(tempbuf, strerror(errno), 64);
pr_response_add_err(R_550, tempbuf);
None of the generational-based fuzzers ever execute the size verb, probably because
it is not in RFC 959. Since Taof and ProxyFuzz were working off the same packet
capture, they should have also found this bug. It is likely that ProxyFuzz just
wasn’t run long enough to find it. Likewise, bugs 12 and 13 are in the EPSV com-
mand, which again is not in the RFC.
Next, we examine bug 16, which Taof and ProxyFuzz managed to find, but none
of the other fuzzers did. This bug was a format string bug in the EPRT command,
MODRET core_eprt(cmd_rec *cmd) {
char delim = '\0', *argstr = pstrdup(cmd->tmp_pool, cmd->argv[1]);
...
/* Format is protoip addressport (ASCII in network
order),
* where  is an arbitrary delimiter character.
*/
delim = *argstr++;
...
while (isdigit((unsigned char) *argstr))
argstr++;
...
if (*argstr == delim)
argstr++;
...
if ((tmp = strchr(argstr, delim)) == NULL) {
pr_log_debug(DEBUG3, "badly formatted EPRT argument: '%s'", cmd-
>argv[1]);
char tempbuf[64];
if(strstr(cmd->argv[1], "%")!=NULL){
BUGREPORT(16);
}
snprintf(tempbuf, 64, "badly formatted EPRT argument: '%s'",
cmd->argv[1]);
pr_response_add_err(R_501, tempbuf);
return ERROR(cmd);
}
8.7
A Closer Look at the Results
235
To activate this bug, you need to have an argument to EPRT without enough delim-
iters, and the portion of the argument after the second delimiter needs to contain a
format string specifier. Again, the generational-based fuzzers did not run the EPRT
command. Looking at why GPF missed the bug, the code coverage reveals that it
always included the right number of delimiters, in other words, it wasn’t random
enough!
236
Fuzzer Comparison
This code is taken from the lcov code coverage tool (based on gcov). The number to
the left of the colon indicates the number of times the instrumented (i.e., real) code
was executed. Executed code is highlighted lightly, missed code darkly. Here we see
that GPF never got into the error-checking clause for a badly formatted EPRT argu-
ment and thus missed the bug. The same phenomenon occurs for bug 14.
Finally, we examine bug 4, which was only found by the generational-based
fuzzers:
char *dir_canonical_path(pool *p, const char *path) {
char buf[PR_TUNABLE_PATH_MAX + 1] = {'\0'};
char work[256 + 1] = {'\0'};
if (*path == '~') {
if(strlen(path) > 256 + 1){
BUGREPORT(4);
}
if (pr_fs_interpolate(path, work, strlen(path)) != 1) {
if (pr_fs_dircat(work, sizeof(work), pr_fs_getcwd(), path) isAuthoritative ==
SNMP_SESS_AUTHORITATIVE) ||
(!sess)) ? 0 : 1)))
== NULL) {
DEBUGMSGTL(("usm", "Unknown User(%s)\n", secName));
if (snmp_increment_statistic(STAT_USMSTATSUNKNOWNUSERNAMES) ==
0) {
DEBUGMSGTL(("usm", "%s\n", "Failed to increment
statistic."));
}
do
{
char tempbuf[32];
memset(tempbuf,0,32);
strcat(tempbuf,"Unknown User: 
);
if (strlen(tempbuf) + strlen(secName) > 31)
{
BUGREPORT(2);
}
strcat(tempbuf,secName);
if (strstr(secName, "%"))
{
BUGREPORT(3); /* Format string */
}
...
snmp_log(LOG_WARNING, tempbuf);
Note that the vulnerable lines are only activated if an unknown username is used.
There is a different reason each fuzzer missed this bug. beSTORM never even calls
this function, since it doesn’t support SNMP version 3, as the following snippet
from an lcov coverage report confirms:
Codenomicon never gets to this line, it always used an unknown “engine id,”
Meanwhile the Mu-4000 never sent an invalid username (at this point in the
program). Again, this is an example of a fuzzer not being random enough.
238
Fuzzer Comparison
Bug 4 had the opposite behavior. Here is the vulnerability:
int
snmp_pdu_parse(netsnmp_pdu *pdu, u_char * data, size_t * length)
{
...
/*
* get header for variable-bindings sequence
*/
DEBUGDUMPSECTION("recv", "VarBindList");
data = asn_parse_sequence(data, length, &type,
(ASN_SEQUENCE | ASN_CONSTRUCTOR),
"varbinds");
if (data == NULL)
return -1;
/*
* get each varBind sequence
*/
while ((int) *length > 0) {
...
switch ((short) vp->type) {
...
case ASN_OCTET_STR:
case ASN_IPADDRESS:
case ASN_OPAQUE:
case ASN_NSAP:
if (vp->val_len buf)) {
vp->val.string = (u_char *) vp->buf;
} else {
vp->val.string = (u_char *) malloc(200);
if (vp->val_len > 200)
{
BUGREPORT(4);
}
}
...
8.7
A Closer Look at the Results
239
asn_parse_string(var_val, &len, &vp->type, vp->val.string,
&vp->val_len);
break;
Again, only a very specific action will trigger this bug. GPF executed this function, but
didn’t get deep enough in the function to even get to the switch statement. ProxyFuzz
and the Mu-4000 both got deep enough, but did not provide a long enough string to
actually make the overflow occur. Here is the code coverage from the Mu-4000:
In this case, the code coverage report is taken on the code without the bug, but it is
still clear that vp->val_len was always smaller than sizeof(vp->buf), and this is why
the bug was never hit.
8.7.3
DNS
As in the other comparison tests, for DNS, a few bugs stood out on differing ends
of the spectrum.
• DNS bugs 3 and 13 were only caught by Codenomicon.
• DNS bug 14 was the only bug caught by beSTORM.
First let’s look at bug 3, which proved difficult to find. Here is the code listing:
static isc_result_t
getsection(isc_buffer_t *source, dns_message_t *msg, dns_decompress_t
*dctx,
dns_section_t sectionid, unsigned int options)
/*
* Read the rdata from the wire format. Interpret the
* rdata according to its actual class, even if it had a
* DynDNS meta-class in the packet (unless this is a
TSIG).
* Then put the meta-class back into the finished rdata.
*/
rdata = newrdata(msg);
..
240
Fuzzer Comparison
if(rdata->type == 0x06) { // SOA
char *soa=malloc(128);
if(rdata->length > 128) {
BUGREPORT(3);
}
memcpy(soa, rdata->data, rdata->length);
free(soa);
}
This bug is only activated if a long SOA type is encountered. Since the initial inputs
used for the mutation-based fuzzers did not contain such a type, it is not surprising
they did not find this bug. This is a case of having deficient or incomplete initial
inputs for a mutation-based fuzzer.
Now, let us consider bug 14. It was found by GPF, Codenomicon, and
beSTORM. In fact, it was the only bug discovered by beSTORM. It was not found
by ProxyFuzz, the generic fuzzer. Here is the bug:
isc_result_t
dns_message_parse(dns_message_t *msg, isc_buffer_t *source,
unsigned int options)
isc_region_t r;
...
isc_buffer_remainingregion(source, &r);
if (r.length != 0) {
isc_log_write(dns_lctx, ISC_LOGCATEGORY_GENERAL,
DNS_LOGMODULE_MESSAGE, ISC_LOG_DEBUG(3),
"message has %u byte(s) of trailing garbage",
r.length);
char garbage[255];
if(r.length > 255) {
BUGREPORT(16);
}
memcpy(garbage, r.base, r.length);
}
This bug occurs when a large amount of unnecessary trailing data is provided.
It’s not too surprising that most fuzzers found this as it is pretty basic and doesn’t
require a detailed knowledge of the protocol. However, ProxyFuzz got to this point
in the function, but never had any trailing garbage:
8.7
A Closer Look at the Results
241
Figure 8.4
Combining fuzzers finds more bugs than just using the best one.
8.8
General Conclusions
We’ve seen which fuzzers performed better than others in different circumstances.
We’ve looked at exactly which bugs proved difficult to find and which were easier.
Now, let’s try to draw some general conclusions from the data.
8.8.1
The More Fuzzers, the Better
Sometimes it is not good enough to use the best fuzzer in isolation. Observe the
interesting fact that almost always, a combination of fuzzers finds more bugs than