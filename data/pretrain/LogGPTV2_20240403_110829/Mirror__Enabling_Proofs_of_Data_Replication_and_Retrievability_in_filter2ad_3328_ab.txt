misuse the replicas for storing more data than has
been agreed upon. Recall that since replicas are typ-
ically charged less than original ﬁles [1, 9], a rational
user may try to encode additional information or
other ﬁles into the replicas.
2.4 Security Goals and Correctness
In this section, we formalize the security goals of a
PoR2 scheme and deﬁne the correctness requirements.
Note that we do not consider conﬁdentiality of the
ﬁle (cid:31)D, since we assume that the user encrypts the
ﬁle prior to the start the PoR2 protocol. We start by
deﬁning three security notions that a PoR2 scheme
must guarantee:
Extractability: The user can recover the uploaded
ﬁle D.
Storage Allocation: Provider uses at
least as
much storage as required to store the ﬁle and
all replicas.
Correct Replication: The ﬁles D(i) are correct
replicas of D.
The extractability notion protects the user against
a malicious service provider who does not store the
whole ﬁle. Similarly, the storage allocation notion
aims to protect a user against a service provider who
does not commit enough storage to store all replicas.
Clearly, the ﬁrst two conditions together imply that a
rational provider S indeed stores D and the replicas
D(1), . . . ,D (r) and therefore fulﬁlls his part of provid-
ing redundancy to protect the data. In contrast to
the two previous notions, correct replication aims to
1054  25th USENIX Security Symposium 
USENIX Association
4
protect the service provider against a malicious user
who tries to encode additional data in the replicas.
This is an important property, which is not satisﬁed
by existing multi-replica PDP models, but which
should cater to any practical deployment of PoR2. In
Section 3, we propose an instantiation of PoR2 which
allows the provider to run Replicate by itself—thus
inherently satisfying this property. In the following
paragraphs, we provide a formal description of the
above deﬁned notions.
Extractability. Extractability guarantees that an hon-
est user is able to recover the data (cid:31)D. Adopting
[25, 34], this is formalized as follows.
If a service
provider is able to convince a honest user with signif-
icant probability during the Verify procedure, then
there exists an extractor algorithm that can interact
with the service provider and extract the ﬁle. This is
captured by a hypothetical game between an adver-
sary and an environment where the latter simulates
all honest users and an honest veriﬁer. The adver-
sary is allowed to request the environment to create
new honest users (including respective public and
private keys), to let them store chosen ﬁles, and to
run the Verify and Replicate procedures. At the end,
the adversary chooses a user U with the correspond-
ing outsourced ﬁle D and outputs a service provider
S who can execute the Verify protocol with U with
respect to the chosen ﬁle D. We say that a service
provider is ε-admissible if the probability that the
veriﬁer does not abort is at least ε.
Deﬁnition 1 (Extractability) We say that a
PoR2 scheme is ε-extractable if there exists an ex-
traction algorithm such that for any PPT algorithm
who plays the aforementioned game and outputs an
ε-admissible service provider S , the extraction algo-
rithm recovers D with overwhelming probability.
In addition, we say that correctness is provided
with respect to the extractability if the following holds.
If all parties are honest, i.e., the user, the veriﬁer,
and the provider, then the veriﬁer accepts the output
of the Verify protocol with probability 1. This should
hold for any ﬁle (cid:31)D ∈ {0,1}∗.
Storage Allocation. Let ST denote the storage of the
service provider that has been allocated for storing
the ﬁle D and the replicas D(1), . . . ,D (r). We compute
the storage allocation by the provider, ρ, as follows:
ρ :=
|ST|
|D| +|D(1)| + . . . +|D(r)|
(1)
Here, we consider the generic case where the sizes
of the replicas can be diﬀerent (e.g., due to diﬀerent
metadata). Moreover, we assume that neither the
ﬁle nor the replicas can be (further) compressed, e.g.,
because these have been encrypted ﬁrst. Since the
service provider aims to save storage, it holds in
general that 0 ≤ ρ ≤ 1. Storage allocation ensures
that ρ ≥ δ for a threshold 0 ≤ δ ≤ 1 chosen by the
user.
Deﬁnition 2 (Binding) We say that a PoR2
scheme is (δ ,ε)-binding if for any rational attacker
who plays the aforementioned game, and outputs an
ε-admissible service provider S who invests only a
fraction ρ  |ST|/|D|.
The reason is that a non-rational service provider
could always store D only and run the Replicate pro-
cedure over and over again when needed. On the
other hand, if the user is generating and uploading
the replicas, strong binding could be achieved when
replicas are diﬀerent encryptions of the original ﬁle,
e.g., as done in [18].
In Fortress, we aim to out-
source the replica generation to the service provider
to save bandwidth and hence only aim for the binding
property.
Correct Replication. Correct replication means es-
sentially that both, Replicate and CheckReplica, are
sound and correct. We detail this below.
We say that Replicate is sound if in the case where
the user is involved in the replica generation, the
service provider can get assurance that the addition-
ally uploaded data represents indeed correctly built
replicas that do not encode, for example, some addi-
tional data. That is, Replicate must not be able to
encode a signiﬁcant amount of additional data in the
replicas. This is formally covered by the requirement
that inputs of the veriﬁer to the replicate procedure
Replicate, namely the veriﬁcation tag τ and the copy
parameters Π, have a size that is independent of the
ﬁle size.
On the other hand, we say that Replicate is correct
if replicas represent indeed copies of the uploaded
ﬁle D. This is formally captured by requiring that
USENIX Association  
25th USENIX Security Symposium  1055
5
D can be eﬃciently recovered from any replica D(k).
More precisely, we say that Replicate is correct if
there exists an eﬃcient algorithm which given τ, Π,
and any replica D(k) outputs D.
With respect to CheckReplica, we require that
S only accepts replicas which are valid output of
Replicate. Let D and Π be the output of the Store pro-
cedure. Let E be the event that τ∗ and D(1), . . . ,D (r)
are the output of a Replicate run. Let dec be the
decision of the service provider at the end of the
CheckReplica protocol. We say that the scheme is
ε∗-correctly building replicas if:
∀i ∈ {1, . . . ,r} : Pr[dec = Accept|E ] =1,
i∈{1,...,r}{Pr[dec = Accept|¬E ]} ≤ε
max
∗.
Observe that the ﬁrst and second condition express
the correctness and soundness of CheckReplica, re-
spectively.
3 Mirror: An Eﬃcient PoR2 Instantia-
tion
3.1 Overview
The goal of Mirror is to provide a veriﬁable replication
mechanism for storage providers. Note that straight-
forward approaches to construct PoR2 would either
be communication-expensive or would be insecure in
the presence of a rational cloud provider.
For instance, the user could create and upload
the required t replicas of his ﬁles, similar to [18].
Obviously, this alternative incurs considerable band-
width overhead on the providers and users can abuse
the replicas to outsource several, diﬀerent ﬁles in
encrypted form. An alternative solution would be
to enable the cloud provider to create the repli-
cas (and their tags) on his own given the original
ﬁles. This would signiﬁcantly reduce the provider’s
bandwidth consumption incurred in existing multi-
replica schemes at the expense of investing additional
(cheaper) computing resources [24]. This alternative
might be, however, insecure since it gives considerable
advantage for the provider to misbehave, e.g., store
only one single replica and construct the replicas on
the ﬂy when needed.
To thwart the generic attacks described above,
Mirror ensures that a malicious cloud provider can
only reply correctly within the veriﬁcation protocol
by investing a minimum amount of resources, i.e.,
memory and/or time. However, to ensure the binding
property (Deﬁnition 2), i.e., that the provider invests
memory and not time, Mirror allows to scale the
computational eﬀort that a dishonest provider would
have to invest without increasing the memory eﬀort
of an honest provider. This allows to adjust the
computational eﬀort of a dishonest provider such
that the costs of storing the replicas is cheaper than
the costs of computing the response to the challenges
on the ﬂy—giving an economic incentive to a rational
provider to behave honestly.
This is achieved in Mirror through the use of a
tunable puzzle-based replication scheme. Namely, in
Mirror, the user has to outsource only his original
ﬁles and compact puzzles to the cloud provider; the
solution of these puzzles will be then combined with
the original ﬁle in order to construct the r required
replicas. Puzzles are constructed such that (i) they
require noticeable time to be solved by the cloud
provider while the user is signiﬁcantly more eﬃcient
by exploiting a trapdoor, (ii) storing their solution
incurs storage costs that are at least as large as
the required storage for replicas, (iii) their diﬃculty
can be easily adjusted by the creator to cater for
variable strengths (and diﬀerent cost metrics), and
(iv) they can be eﬃciently combined with the original
ﬁle blocks in order to create r correct replicas of the
ﬁle preserving the homomorphic properties needed
for compact proofs1.
To this end, Mirror combines the use of the RSA
puzzle of Rivest [33] and Linear Feedback Shift Reg-
isters (LFSR) (cf. Section 3.3). A crucial aspect here
is that the user creates two LFSRs: a short one which
is kept secret, and a longer public LFSR. The service
provider is only given the public LFSR to generate
the exponent values. As we show later, this allows
for high degrees of freedom with respect to security
and performance of Mirror. In the following, we ﬁrst
explain the deployed main building blocks and give
afterwards the full protocol speciﬁcation.
3.2 Building Blocks
RSA-based Puzzles: Mirror ties each sector with a
cryptographic puzzle that is inspired by the RSA
puzzle of Rivest [33]. In a nutshell, the puzzle re-
quires the repeated exponentiation of given values
X a mod N where N = p· q is publicly known RSA
modulus and a, p,q remain secret. Without know-
ing these secrets, this requires to perform modular
exponentiation. Modular exponentiation is an inher-
ently sequential process [33]. The running time of the
fastest known algorithm for modular exponentiation
is linear in the size of the exponent. Although the
provider might try to parallelize the computation of
1This condition restricts our choice of puzzles since e.g.,
hash-based puzzles cannot be eﬃciently combined with the
authentication tag of each data block/sector.
1056  25th USENIX Security Symposium 
USENIX Association
6
the puzzle, the parallelization advantage is expected
to be negligible [17, 26, 28, 33]. On the other hand,
the computation can be eﬃciently veriﬁed by the
puzzle generator through the trapdoor oﬀered by Eu-
ler’s function in O(log(N)) modular multiplications
by computing X a(cid:31) mod N ≡ X a(cid:31) mod φ (N) mod N.
Observe that this puzzle is likewise multiplicative
homomorphic: given a and a(cid:31), the product of the
solutions X a(cid:31) and X a(cid:31)(cid:31) represents a solution for a(cid:31) +a(cid:31)(cid:31).
This preserves the homomorphic properties of the
underlying POR and allows for batch veriﬁcation for
all the replicas and hence enables compact proofs.
To further reduce the veriﬁcation burden on users,
Mirror generates the exponents using a Linear Feed-
back Shift Registers (LFSR) as follows.
Linear Feedback Shift Registers: A Linear Feedback
Shift Register (LFSR) is a popular building block for
designing stream ciphers as it enables the generation
of long output streams based on a initial state. In
Mirror, LFSRs will be used to generate the exponents
for the RSA-based puzzle described above. In what
follows, we brieﬂy describe the concept of an LFSR
sequence and refer the readers to [29] for further
details.
Deﬁnition 3 (Linear Feedback Shift Register)
Let F be some ﬁnite ﬁeld, e.g., Zp for some prime
p. A Linear Feedback Shift Register (LFSR) of
length λ consists of an internal state of length λ
and a linear feedback function F : Fλ → F with
F(x1, . . . ,x λ ) = ∑λ
i=1 ci · xi. Given an initial state
(s1, . . . ,s λ ) ∈ Fλ ,
it deﬁnes inductively an LFSR
sequence (st )t≥1 by st+λ = F(st , . . . ,s t+λ−1) for t ≥ 1.
An important and related notion is that of a feedback
polynomial. Given an LFSR with feedback function
F(x1, . . . ,x λ ) = ∑λ
i=1 ci · xi, the feedback polynomial
f (x) ∈ F[x] is deﬁned as:
f (x) =x λ −
ci · xi−1.
λ
∑
(2)
i=1
It holds that any multiple of a feedback polyno-
mial is again a feedback polynomial. That is, if
f ∗(x) =x λ∗ − ∑λ∗
holds that st+λ∗ − ∑λ∗
i=1 c∗i · xi−1 is a multiple of f , then it
i=1 c∗i · st+i−1 = 0 for each t ≥ 1.
Mirror exploits this feature in order to realize a gap
between the puzzle solution created by provider and
the veriﬁcation done by the user.
3.3 Protocol Speciﬁcation
We now start by detailing the procedures in Mirror.
Speciﬁcation of the Store Procedure: In the store
phase, the user is interested in uploading a ﬁle
D ∈ {0,1}∗. We assume that the ﬁle D is encrypted
to protect its conﬁdentiality and encoded with an era-
sure code (as required by the utilized POR in order
to provide extractability guarantees) prior to being
input to the Store protocol [25, 34]. First, the user
generates an RSA modulus N := p· q where p and q
are two safe primes2 whose size is chosen according
to the security parameter κ.
Similar to [34], the ﬁle is interpreted as n blocks,
each is s sectors long. A sector is an element of ZN
and is denoted by di, j with 1 ≤ i ≤ n, 1 ≤ j ≤ s. That
is, the overall number of sectors in the ﬁle is n· s.
To ensure unique extractability (see Section 4.1), we
require that the bit representation of each sector di, j
contains a characteristic pattern, e.g., a sequence of
zero bits. The length of this pattern depends on the
ﬁle size and should be larger than log2(n· s).
Furthermore, the user samples a key kprf per ﬁle,
where the key length is determined by the security
parameter, e.g., kprf ∈ {0,1}κ . By invoking kprf as a
seed to a pseudo-random function (PRF), the user
R
samples s non-zero elements of Zφ (N), i.e., ε1, . . . ,ε s
←
Zφ (N) \{0}. Finally, the user computes σi for each i,
1 ≤ i ≤ n, as follows:
σi ←
∈ ZN.
∏
di, j
(3)
s
j=1
ε j
These values are appended to the original ﬁle so
that the user uploads (D,{σi}1≤i≤n). Unless speciﬁed
otherwise, we note that all operations are performed
in the multiplicative group Z∗N of invertible integers
modulo N.3
Assuming that the user is interested in maintaining
r replicas in addition to the original ﬁle D at the cloud,
the user additionally constructs copy parameters Π
which will also be sent to the server. To this end, the
user ﬁrst generates two elements g,h ∈ Z∗N of order
p(cid:31) and q(cid:31), respectively. Recall that the order of Z∗N is
ϕ(N) = (p− 1)(q− 1) =4 · p(cid:31) · q(cid:31). The elements g and
h will be made public to the server while their orders
are kept secret.
Then, the user proceeds to specify feedback poly-
nomials for two LFSRs, one being deﬁned over Zp(cid:31)
and the other over Zq(cid:31). Both LFSRs need to have a
length λ such that |F|λ > n· s. Here, for each of the
two LFSRs, two feedback polynomials are speciﬁed:
a shorter one which will be kept secret by the user
distinct primes p(cid:31) and q(cid:31).
2That is, p − 1 = 2 · p(cid:31) and likewise q − 1 = 2 · q(cid:31) for two
3Observe that hitting by coincidence a value outside of Z∗N
allows to factor N which is considered to be a hard problem.
USENIX Association  
25th USENIX Security Symposium  1057
7
and a larger one that will be made public to the
provider. More precisely, for the LFSR deﬁned over
Zp(cid:31) the user chooses two polynomials
fa(x) := xλ −
λ
∑
i=1
αi · xi−1,
f ∗a (x) := xλ∗ −
λ∗
∑
i=1
α∗i · xi−1
t
such that f ∗a (x) is a multiple of fa(x) (and hence
λ < λ∗). For security reasons, it is necessary to
ensure that α∗1 ≥ 2.
The feedback polynomial fa(x) with the lower de-
gree will be kept secret while the polynomial f ∗a (x)
of the higher degree and the larger coeﬃcients will
fa(x) will serve as a
be given to the provider.
feedback polynomial to generate for each replica
k ∈ {1, . . . ,r} an LFSR sequence (a(k)
). To this
end, the user chooses for each k an initial state
(a(k)
1 , . . . ,a (k)
p(cid:31) which deﬁnes the full sequence by