– P3 does the following computation locally.
◦ Abort if B or (h1, h2) received from P1, P2 is not identical or H(ri) (cid:54)= hi for some i ∈ [2].
◦ Abort if (X1, X2, X31, X32) contains ⊥ where for α ∈ [(cid:96)] : Xα
α , omα
3(cid:96)+α).
◦ Else set X = X1|X2|X31|X32 and run Y ← Ev(C, X) for C ∈ B.
1 = Open(pp, cmα
3(cid:96)+α, oxα
32 = Open(pp, cxα
31 = Open(pp, cxα
Open(pp, cmα
2(cid:96)+α, oxα
(cid:96)+α, omα
2(cid:96)+α), Xα
(cid:96)+α), Xα
31
31
32
32
1
2
2
1
α ), Xα
2 =
Round 3: If Y (cid:54)= ⊥, P3 sends (Y, r2) to P1 and (Y, r1) to P2.
10
Figure 2: Protocol f3PC
j) received from P3. If y (cid:54)= ⊥ and z = hj (received from Pj in Round 1), send o to P3 and (y, r(cid:48)
Round 4: Pi (i ∈ [2]) does the following: Let (j ∈ [2] \ i). Execute y ← De(Y, d), compute z = H(r(cid:48)
(Y, r(cid:48)
Else set y = ⊥.
The parties do the following.
j) if
j) to Pj.
– P3 runs d ← eOpen(epp, c, o) where P3 received o from Pi (i ∈ [2]). For d (cid:54)= ⊥, P3 outputs y ←
De(Y, d).
– Pi (i ∈ [2]) does the following if y = ⊥: If received (y(cid:48), r(cid:48)
i) from P[2]\i such that H(r(cid:48)
i) = hi, set y = y(cid:48).
Thus all parties would learn the output. The case of corrupt garbler, say P1 obtaining the output is straightforward
- it would occur only in the case when the honest P3 is able to evaluate the garbled circuit successfully. In this
case, it is easy to see that the honest garbler P2 and evaluator P3 would be able to obtain the output using encoded
output and decoding information received from the other respectively.
For the opposite direction, suppose an honest P3 gets the output. Both garblers must have obtained the output
via the encoded output sent by P3. Finally an honest garbler, say P1 who gets the output by decoding Y received
from P3, would forward the decoding information enabling P3 to get the output as well. Next, an honest P1 would
accept the output only if he has a valid proof r(cid:48)
2) = h2. This proof
would be veriﬁed and output accepted by P2. This completes the intuition.
Theorem 3.2. If one way functions exists, then protocol f3PC securely realizes the functionality FFair (Fig. 10)
against a malicious adversary that corrupts at most one party.
2 corresponding to his co-garbler P2 i.e H(r(cid:48)
3.2 Optimizations and generalization
We propose the following optimizations to improve communication efﬁciency. Firstly, P1 and P2 treat the common
message B sent privately to P3 in Round 2 as a string B, divided into equal halves B = B1||B2. P1 sends B1 and
H(cid:48)(B2) while P2 sends H(cid:48)(B1) and B2 to P3, where H(cid:48) refers to a collision-resistant hash function (deﬁnition in
Section 2) This would sufﬁce for P3 to verify if P1, P2 agree on a common B. This optimization technique not only
reduces the communication, but also improves the latency (transmission time) when both P1, P2 run at the same
time [MRZ15]. The second optimization is to use equivocal commitment on the hash of the decoding information
(collision-resistant hash), rather than simply committing on the decoding information.
Our protocol design has a natural extension to more than 3 parties (still for one corruption) without inﬂating the
round complexity and number of GCs. The generalized protocol comprises of (n − 1) garblers who use common
randomness for garbling and a single evaluator who additively shares her input amongst the garblers. For n > 3,
the correctness of GC can be concluded based on majority rule on the GCs received from the garblers.
4 4PC with guaranteed output delivery
In this section, we propose an efﬁcient 5-round 4PC secure against one active corruption, assuming pairwise
channels. Our protocol involves communication and computation of just one GC, in contrast to the protocol of
[IKKP15] that requires 12 GCs. We take the route of employing two garblers and one evaluator as in our fair 3PC
protocol. The fourth party simply shares its input amongst the rest. When the evaluator is honest, our protocol
ensures that either an honest party identiﬁes the corrupt party or a conﬂict (assured to include the corrupt party),
or the honest evaluator is successful in GC evaluation by the end of Round 2. In the former case, the honest
11
party would identify at least one honest party, to whom she sends her possessed input shares in Round 3. We use
replicated secret sharing (RSS) that allows reconstruction of the output based on views of any two (honest) parties.
In the latter scenario, the encoded output obtained upon GC evaluation is instantly used for output computation
by all the parties in Round 3. Thus, in either scenario, at least one of the honest parties will be able to compute
the output latest by Round 3 and everyone will receive it by Round 4. On the other hand, a corrupt evaluator can
drag the honest parties up to Round 4 to reveal its identity. This is the only case that makes our protocol run for 5
rounds where the last round is used by the honest parties to exchange their possessed shares to compute the output
on clear.
With the above high level idea, we describe a sub-protocol that enforces input consistency as per RSS and then
we present our 5-round protocol g4PC. Each party Pi (i ∈ [4]) maintains a pair of global sets– a corrupt set Ci and
a conﬂict set Fi which respectively hold identities of the party detected to be corrupt and pairs of parties detected
to be in conﬂict.
4.1 Protocol for Input Consistency
Our protocol InputCommiti that runs for two rounds, enforces input consistency of party Pi’s secret xi as per RSS.
Recall that as per RSS for three shareholders, Pi makes three shares of its secret xi as xi = ⊕Pj∈Pixij where
Pi = [4] \ i denotes the shareholders (i.e. all but Pi). The share xij goes to all but Pi and Pj, namely to the set
of parties in Pij = P \ {Pi, Pj}. Now to ensure that a corrupt Pi remains committed to its secret or a corrupt
shareholder Pj later cannot open a share of Pi differently, we use commitments on the shares. Namely, in the ﬁrst
round, commitments on input shares are distributed by Pi to all while the openings are sent only to the relevant
shareholders. In the second round, the shareholders exchange the commitments received in the ﬁrst round, while
the openings are exchanged only with the relevant shareholders. A simple majority rule sufﬁces to conclude on the
commitment cij of the ‘committed’ share xij. When no honest majority is found, it can be concluded that Pi is
corrupt and his input is taken as a default value by all parties. When the commitment and the opening distributed
by Pi is found to be inconsistent, then Pi is identiﬁed as corrupt. When the commitment as distributed by Pi and
forwarded by Pj contradict, then Pi and Pj are put in conﬂict set.
A share xij is said to be ‘committed’ if each honest Pα ∈ Pi holds cij and each honest Pβ ∈ Pij holds oij
such that cij opens to xij via oij. A secret xi is said to be ‘committed’ if each of its three shares are committed. An
honest party always ‘commits’ to its secret. When a corrupt party does not commit to a secret, it is either identiﬁed
as corrupt or found to be in conﬂict by at least one honest party. For the commitments, we use a strong NICOM
according to which binding holds even for adversarially chosen public parameter of the NICOM (Appendix B.2).
Looking ahead the strong NICOM ensures that Pi itself cannot change its committed secret later and also cannot
keep two different parties on different pages in terms of the opening information oij. Protocol InputCommiti
appears in Figure 3.
Lemma 4.1. If Pi is honest, its chosen input xi is committed in InputCommiti.
Proof. Since the corrupt party forms a minority in Pi, irrespective of its behaviour in Round 2, every xij and
therefore xi remains committed.
Lemma 4.2. When corrupt Pi misbehaves, it belongs to either Cj or Fj of some honest Pj by the end of InputCommiti.
For the jth (j ∈ ind(Pi)) share of Pi, it can misbehave in the following ways: (a) Pi sends different
Proof.
versions of (ppi, cij) to the parties in Pi; (b) Pi sends invalid opening oij (or does not send any opening) to some
party in Pij. In the former case, all the honest parties will populate their corrupt set if there is no majority in
Pi’s commitments else they populate their conﬂict set with a pair, consisting of Pi. In the latter case, the honest
recipient of the invalid opening will include Pi in its corrupt set. So the lemma holds.
Lemma 4.3. Either corrupt Pi ‘commits’ to an input or all honest parties agree on a default value by the end of
InputCommiti.
12
Figure 3: Protocol InputCommiti()
Inputs: Party Pi has xi and others have no input.
Notation: Pi and Pij denote the set P \ Pi and respectively P \ {Pi, Pj}. ind(S) denotes the set of indices
belonging to the parties in a set S.
Output: Each Pk ∈ Pi outputs ({cij}j∈ind(Pi),{oij, xij}j∈ind(Pik),Ck,Fk). {cij, oij} denote the commit-
ment and opening of the share xij. Ck and Fk denote the corrupt and conﬂict set respectively.
Primitives: A NICOM (sCom, sOpen) with strong binding property (Appendix B.2), a 3-party 1-private RSS.
Round 1:
– Pi shares his input as xi = ⊕j∈ind(Pi)xij.
– Pi samples ppi and generates commitments on shares xij for j ∈ ind(Pi) as (cij, oij) ← sCom(ppi, xij)
– For every xij, Pi sends (ppi, cij) to Pi and oij to Pij.
Round 2: With respect to every share xij, every Pk in Pij sets Ck = {Pi} if sOpen(ppi, cij, oij) = ⊥.
Otherwise, Pk forwards (ppi, cij) to Pi and oij to Pij. Now Pk does the following local computation.
– Set Ck = {Pl} if Pl forwards an invalid opening i.e sOpen(ppi, cij, oij) = ⊥ holds for (ppi, cij, oij) sent
by Pl.
– Set Fk = {Pi, Pl} if (ppi, cij) received from Pi and forwarded by Pl do not match.
– Set Ck = {Pi}, if there is no majority among the versions of (ppi, cij) forwarded by the parties in Pi.
If Pk ∈ Pij, set xij to a default value (and commitments are assumed appropriately). Otherwise, set
(ppi, cij) as the majority value, oij as the corresponding opening, and xij = sOpen(ppi, cij, oij).
Proof. For the jth (j ∈ ind(Pi)) share of Pi, there are two cases based on whether Pi sends the same common
message (ppi, cij) to at least two among the parties in Pi with valid corresponding opening oij sent to every party
in Pij. If not, the exchange of messages among the honest parties in Round 2 will not constitute a majority and
all the honest parties would detect Pi to be corrupt and a default value will be taken as xij. Else, cij would be
accepted as the commitment for the jth share. The exchange of opening oij among the parties in Pij ensure that
they have access to the corresponding unique committed share xij. The uniqueness of the share is ensured by the
binding property of commitment scheme.
4.2 Our protocol
Without loss of generality, P1, P2 take the role of garblers and P3 enacts the role of evaluator in our protocol g4PC.
In parallel to running the input commitment sub-protocol for every party Pi, protocol g4PC, in similar spirit to our
previous protocols, proceeds by having the garblers P1 and P2 share and utilize common randomness to compute
individually the same garbled circuit and permuted commitments of the encoding information corresponding to
the three shares of the inputs of all the parties. The permutation strings are used for all the shares for the sake of
uniformity. Then the strings corresponding to the shares possessed by an evaluator are simply disclosed to her,
13
emulating the case in the three-party protocols where no permutation string is needed for the shares of an evaluator
to protect them from a bad garbler. As per RSS, a party Pα would ideally hold the shares {xij}i∈[4],j∈ind(Piα) that
include its three shares {xαj}j∈Pα and the two designated shares {xij}j∈Piα of every other party Pi by the end of
Round 1. Note that the latter shares may not be the committed ones and ﬁnal committed values may differ by the
end of Round 2 (say, if the majority turns out to be different or if a default value is assumed).
In the second round, while the garblers send the GCs, committed encoding information in permuted order, the
relevant permutation strings on clear, the opening of the shares held by it, an evaluator checks the sanity of the
received information, often leveraging the fact that at least one of the garblers is honest and would have computed
the information correctly. The round-saving trick of composing the input commitment with the release of the
encoded inputs for the shares in parallel leads to release of encoded inputs for non-committed shares, which in
turn results in evaluation of the circuit on non-committed inputs. Evaluating the circuit only when no corrupt and
no conﬂict is detected by the end of Round 2 would solve the problem for an honest evaluator, as this ensures
encoded input for committed shares alone has been dealt. The trick to prevent a corrupt evaluator from getting
output on non-committed inputs is to withhold (yet commit in Round 1) the decoding information for an oblivious
garbling scheme and release the (hash of) decoding information only upon a conﬁrmation that an encoded output
is computed using committed inputs. The simple check that a corrupt evaluator has no conﬂict with any of the
garblers ensures that the garblers must be in possession of the committed shares of the corrupt evaluator by the end
of ﬁrst round itself and so the released encoded inputs correspond to the committed shares (and the encoded output
corresponds to committed inputs).
The repetitive disbursal of shares in RSS brings along another issue. Both the garblers possess the share
x34. An evaluator receives encoded input for these shares from both the garblers, as per the protocol. A corrupt
evaluator P3 can exploit this step to obtain encoded inputs for two different versions of the share x34 (by dealing
to the garblers) and subsequently evaluates the circuit on multiple inputs. While having the decoding information
hidden would not leak the clear outputs, the corrupt evaluator, on holding the the encoded outputs, can conclude
if its two different chosen inputs lead to the same output or not. While the issue is very subtle, the ﬁx is quite
easy where only one pre-determined garbler is given responsibility of releasing the encoded input for the common
share x34. In order to avoid repeated disclosing of encoded outputs of the common shares between the garblers,
this approach is taken for all the common shares, namely {x13, x14, x23, x24, x34, x43}. To balance load, we ask
P1 to open encoded inputs for {x13, x14, x34} and P2 to take care of the rest.
In Round 3, if any party identiﬁes the corrupt or any conﬂict, it sends the openings for all the shares that it
possesses from the input commitment protocol to a party who remains outside the corrupt and conﬂict sets and
thus guaranteed to be honest. This special party is denoted as TTP who takes care of reconstructing all the inputs
and computing the output on clear and lastly handing it over to all the parties in the next round. Even a corrupt
evaluator cannot make an honest TTP to compute an output on anything other than committed inputs. The strong
binding property of the commitments does not allow a corrupt evaluator to change its own committed shares.
To disambiguate about the identity of TTP, a party when disclosing its opening to its selected TTP notiﬁes the
identity of the designated TTP to all. When a TTP takes responsibility, all the parties safely accept the output
relayed by the TTP in the next round, for a TTP is never corrupt. An honest party will never elect a corrupt party
as a TTP and a corrupt evaluator does not have a corrupt companion to enact a TTP. Therefore, if an honest
party elects a TTP in Round 3, all terminate the protocol with output by Round 4. On the other hand when no
conﬂict and no corrupt is detected, an honest evaluator computes the encoded output and forwards the same to
the garblers in Round 3. Similarly, an honest garbler opens the (hash of) decoding information to P3 and P4. We
use preimage-resistant hash to enable P3 and P4 to compute the output while preserving the authenticity of the
garbling scheme. For an honest evaluator, then all parties compute the output by the end of Round 3 itself via the
encoded output and decoding information. A corrupt evaluator, however, can keep the honest parties on different
pages in terms of the identity of TTP, while not disclosing its possessed shares to anyone. In this case, the honest
parties realize that the evaluator P3 is corrupt earliest at the end of Round 4. They can then exchange their shares
in Round 5 to compute the output on clear like a TTP does. The protocol appears in Figures 4, 5. The proof for
correctness and security appear below.
14
Figure 4: Protocol g4PC()
Inputs: Party Pα has xα for α ∈ [4].
Common Inputs: The circuit C(x1, x2, x3, x4) that computes f (x12 ⊕ x13 ⊕ x14, x21 ⊕ x23 ⊕ x24, x31 ⊕
x32 ⊕ x34, x41 ⊕ x42 ⊕ x43) each input, their shares and output are from {0, 1}(cid:96). P3 is the evaluator and
(P1, P2) are the garblers.
Output: y = C(x1, x2, x3, x4)
Primitives: G = (Gb, En, Ev, De) that is correct, private, oblivious and authentic, a NICOM (Com, Open), a
PRG G, a preimage-resistant Hash H and sub-protocol InputCommitα (Figure 3) for every Pα ∈ P.
Round 1: Round 1 of InputCommitα() for every Pα ∈ P is run. In parallel,
– P1 chooses random seed s ∈R {0, 1}κ for G and sends s to P2.
– P3 samples pp3 for NICOM and sends to P1, P2.
Round 2: Round 2 of InputCommitα() is run. In parallel,
– Pg(g ∈ [2]) locally computes the following:
3(cid:96)+α, e1
3(cid:96)+α}α∈[3(cid:96)], {e0
6(cid:96)+α, e1
6(cid:96)+α}α∈[3(cid:96)], {e0
9(cid:96)+α, e1
α}α∈[3(cid:96)], {e0
α, e1
{e0
encoding information for the input shares of P1, P2, P3, P4 respectively (w.l.o.g).
ing to Pi’s shares i.e {xij}j∈ind(Pi) for i ∈ [4] and pi ← ||j∈ind(Pi)pij.
◦ Compute garbled circuit (C, e, d) ← Gb(1κ, C) using randomness from G(s). Assume
9(cid:96)+α}α∈[3(cid:96)] correspond to the
◦ Let pij ∈R {0, 1}(cid:96) be permutation string for input wires derived from randomness G(s) correspond-
◦ Generate commitments to e and d using randomness from G(s). For b ∈ {0, 1} and α ∈ [3(cid:96)],