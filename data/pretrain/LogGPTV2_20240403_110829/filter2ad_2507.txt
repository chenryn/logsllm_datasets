title:Automatic Software Instrumentation for the Detection of Non-control-data
Attacks
author:Jonathan-Christofer Demay and
Eric Totel and
Fr&apos;ed&apos;eric Tronel
Automatic Software Instrumentation for the
Detection of Non-control-data Attacks
Jonathan-Christofer Demay, Éric Totel, and Frédéric Tronel
SUPELEC, Rennes, France
{first_name.last_name}@supelec.fr
Abstract. To detect intrusions resulting of an attack that corrupted
data items used by a program to perform its computation, we propose
an approach that automatically instruments programs to control a data-
based behavior model during their execution. We build our model by
discovering the sets of data the system calls depend on and which con-
straints these sets must verify at runtime. We have implemented our ap-
proach using a static analysis framework called Frama-C and we present
the results of experimentations on a vulnerable version of OpenSSH.
To make a program deviate from its speciﬁcation, an intrusion needs to corrupt
some data initially used by the process to control its execution (control-data) or
to perform its computation (non-control-data). To execute illegal system calls,
an attack can use an invalid code (injected or out-of-context) by corrupting the
ﬁrst class of data or use a valid code (with invalid inputs or through an invalid
path) by corrupting the second class of data. To detect intrusions, anomaly-
based intrusion detection systems check for deviations from a model reﬂecting
the normal behavior of programs. Numerous of them working at the system level
build their model using sequences of system calls. This approach detects various
control-data attacks but misses most of the non-control-data ones. Furthermore,
evasion techniques such as mimicry attacks can be used to bypass these detection
mechanisms during a control-data attack. Several enhancements of this approach
have been proposed, notably by adding information available at the system level,
such as the parameters of the system calls or their execution context. The de-
tection of control-data attacks is improved both in accuracy and completeness,
but non-control-data attacks remain mostly undetected [1].
Our work focuses on the detection of non-control-data attacks by checking for
memory corruptions that may lead to illegal system calls executed by a valid
code. Since those attacks need to corrupt speciﬁc data items with speciﬁc val-
ues, they may put the memory of the process in an inconsistent state regarding
the speciﬁcation of the program. Our approach consists in ﬁnding consistency
properties in a program through static analysis to detect data corruptions in-
duced by non-control-data attacks. We thus build a data-oriented model based
on these properties to detect such attacks inside the program at runtime. To de-
rive these properties from the source code, two problems need to be addressed :
for a particular system call SCi, what is the set of variables Vi that inﬂuence
E. Kirda, S. Jha, and D. Balzarotti (Eds.): RAID 2009, LNCS 5758, pp. 348–349, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009
Automatic Software Instrumentation
349
its execution, and what is the set of constraints Ci these variables must verify.
Thus, we deﬁne for a given system call its normal data behavior by the triple
(SCi, Vi, Ci). We can then deﬁne our data behavior model by {∀i, (SCi, Vi, Ci)}.
To build the set of intrusion sensitive variables, we must consider two kinds of
dependency relations : value dependencies, that inﬂuence the parameters of sys-
tem calls, and control dependencies, that inﬂuence the paths that lead to them.
Discovering these relations through static analysis can be done using program
slicing techniques. A program slice can be deﬁned as the subset of instructions
that inﬂuence the execution of a particular instruction from this program called
a point of interest. The set of variables Vi on which a system call SCi depends is
the set of variables used by the program slice computed at the point of interest
SCi. To discover constraints that an attack could broke, we must consider the
dependency relations that may exists between them : that is why the variables
from a set should be processed as a tuple and not individually. We choose to
limit the constraints Ci a given set Vi must verify to the variation domain of the
corresponding tuple. Computing these variation domains through static analy-
sis can be done using abstract interpretation techniques, which produce an over
approximation of the semantic of a program based on lattices. To detect devia-
tions from our data behavior model, we choose to insert reasonableness checks
in the program that will raise an alert when a constraint is broken. To derive
such checks from our model, we have a reachability problem to address : all the
variables Vi a system call SCi depends on may not be reachable at the calling
point in the source code. We choose to solve this by distributing the veriﬁcation
of Ci along the call stack that lead to SCi at each function call, checking only
the subset of Vi containing all the variables reachable at each point.
To evaluate our approach against non-control-data attacks on real vulnerabil-
ities [1], we have developed a tool that implemented our detection model using
Frama-C [2], a modular framework dedicated to the analysis of source codes
of programs written in C. Our tool is a source to source translator that trans-
forms an untrusted program into a data security enforced program. It computes
a normal data behavior model from the source code and inserts in the program
executable assertions derived from this model. We have tested our tool on a vul-
nerable version OpenSSH which suﬀer from an integer overﬂow allowing remote
attackers to write arbitrary values to any location in the memory of the process.
After using our tool on its source code, 8% of the function calls are checked for
inconsistencies, which detect the two known non-control-data attacks exploiting
this vulnerability, with an overhead of 0.5%. This shows that our approach can
indeed detect non-control-data attacks at runtime while inducing a low overhead.
References
1. Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Ravishankar K. Iyer: Non-
control-data Attacks are Realistic Threats. Usenix Security Symposium, 2005
2. Frama-C : Framework for Modular Analysis of C. http://frama-c.cea.fr/index.html