---
author: JOSE HIDALGO
category: 系统运维
comments_data: []
count:
  commentnum: 0
  favtimes: 5
  likes: 0
  sharetimes: 0
  viewnum: 27009
date: '2017-01-12 08:48:00'
editorchoice: false
excerpt: 这是一篇关于 Ansible 的速成课程，你可以用作小项目的模板，或者帮你深入了解这个神奇的工具。阅读了本指南之后，你将对自动化服务器配置、部署等有足够的了解。
fromurl: https://gorillalogic.com/blog/getting-started-with-ansible/
id: 8112
islctt: true
largepic: /data/attachment/album/201701/12/010309ihntexy6ei5pezy9.jpg
permalink: /article-8112-1.html
pic: /data/attachment/album/201701/12/010309ihntexy6ei5pezy9.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 这是一篇关于 Ansible 的速成课程，你可以用作小项目的模板，或者帮你深入了解这个神奇的工具。阅读了本指南之后，你将对自动化服务器配置、部署等有足够的了解。
tags:
- ansible
thumb: false
title: Ansible 起步指南
titlepic: true
translator: geekpi
updated: '2017-01-12 08:48:00'
---
这是一篇关于 Ansible 的速成课程，你可以用作小项目的模板，或者帮你深入了解这个神奇的工具。阅读了本指南之后，你将对自动化服务器配置、部署等有足够的了解。
![](/data/attachment/album/201701/12/010309ihntexy6ei5pezy9.jpg)
### Ansible 是什么，为什么你该了解？
Ansible 简单的说是一个 配置管理系统   （    configuration management system    ） 。你只需要可以使用 ssh 访问你的服务器或设备就行。它也不同于其他工具，因为它使用推送的方式，而不是像 puppet 或 chef 那样使用拉取的方式。你可以将代码部署到任意数量的服务器上，配置网络设备或在基础架构中自动执行任何操作。
### 前置要求
假设你使用 Mac 或 Linux 作为你的工作站，Ubuntu Trusty 作为你的服务器，并有一些安装软件包的经验。此外，你的计算机上将需要以下软件。所以，如果你还没有它们，请先安装：
* [Virtualbox](https://www.virtualbox.org/)
* [Vagrant](https://www.vagrantup.com/downloads.html)
* Mac 用户：[Homebrew](http://brew.sh/)
### 情景
我们将模拟 2 个连接到 MySQL 数据库的 Web 应用程序服务器。Web 应用程序使用 Rails 5 和 Puma。
### 准备
#### Vagrantfile
为这个项目创建一个文件夹，并将下面的内容保存到名为 `Vagrantfile` 的文件。
```
VMs = [
    [ "web1", "10.1.1.11"],
    [ "web2", "10.1.1.12"],
    [ "dbserver", "10.1.1.21"],
  ]
Vagrant.configure(2) do |config|
  VMs.each { |vm|
    config.vm.define vm[0] do |box|
      box.vm.box = "ubuntu/trusty64"
      box.vm.network "private_network", ip: vm[1]
      box.vm.hostname = vm[0]
      box.vm.provider "virtualbox" do |vb|
         vb.memory = "512"
      end
    end
  }
end
```
#### 配置你的虚拟网络
我们希望我们的虚拟机能互相交互，但不要让流量流出到真实的网络，所以我们将在 Virtualbox 中创建一个仅主机（HOST-Only）的网络适配器。
1. 打开 Virtualbox
2. 转到 Preferences
3. 转到 Network
4. 单击 Host-Only
5. 单击添加网络
6. 单击 Adapter
7. 将 IPv4 设置为 `10.1.1.1`，IPv4 网络掩码：`255.255.255.0`
8. 单击 “OK”
#### 测试虚拟机及虚拟网络
在终端中，在存放 `Vagrantfile` 的项目目录中，输入下面的命令：
```
vagrant up
```
它会创建你的虚拟机，因此会花费一会时间。输入下面的命令并验证输出内容以检查是否已经工作：
```
$ vagrant status
Current machine states:
web1                      running (virtualbox)
web2                      running (virtualbox)
master                    running (virtualbox)
This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run `vagrant status NAME`.
```
现在使用 `vagrant` 的用户名和密码 ，按 `Vagrantfile` 中的 IP 登录其中一台虚拟机，这将验证虚拟机并将它们的密钥添加到你的已知主机（`known_hosts`）文件中。
```
ssh PI:EMAIL # password is `vagrant`
ssh PI:EMAIL
ssh PI:EMAIL
```
恭喜你！现在你已经有可以实验的服务器了。下面的剩下的部分！
### 安装 Ansible
对于 Mac 用户:
```
$ brew install ansible
```
对于 Ubuntu 用户:
```
$ sudo apt install ansible
```
确保你使用了ansible 最近的版本 2.1 或者更高的版本：
```
$ ansible --version
ansible 2.1.1.0
```
### 清单
Ansible 使用清单文件来了解要使用的服务器，以及如何将它们分组以并行执行任务。让我们为这个项目创建我们的清单文件 `inventory`，并将它放在与 `Vagrantfile` 相同的文件夹中：
```
[all:children]
webs
db
[all:vars]
ansible_user=vagrant
ansible_ssh_pass=vagrant
[webs]
web1 ansible_host=10.1.1.11
web2 ansible_host=10.1.1.12
[db]
dbserver ansible_host=10.1.1.21
```
* `[all：children]` 定义一个组的组（`all`）
* `[all：vars]` 定义属于组 `all` 的变量
* `[webs]` 定义一个组，就像 `[db]` 一样
* 文件的其余部分只是主机的声明，带有它们的名称和 IP
* 空行表示声明结束
现在我们有了一个清单，我们可以从命令行开始使用 ansible，指定一个主机或一个组来执行命令。以下是检查与服务器的连接的命令示例：
```
$ ansible -i inventory all -m ping
```
* `-i` 指定清单文件
* `all` 指定要操作的服务器或服务器组
* `-m' 指定一个 ansible 模块，在这种情况下为`ping`
下面是命令输出：
```
dbserver | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
web1 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
web2 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
```
服务器以不同的顺序响应，这只取决于谁先响应，但是这个没有关系，因为 ansible 独立保持每台服务器的状态。
你也可以使用另外一个选项来运行任何命令：
* `-a `
```
$ ansible -i inventory all -a uptime
web1 | SUCCESS | rc=0 >>
 21:43:27 up 25 min,  1 user,  load average: 0.00, 0.01, 0.05
dbserver | SUCCESS | rc=0 >>
 21:43:27 up 24 min,  1 user,  load average: 0.00, 0.01, 0.05
web2 | SUCCESS | rc=0 >>
 21:43:27 up 25 min,  1 user,  load average: 0.00, 0.01, 0.05
```
这是只有一台服务器的另外一个例子：
```
$ ansible -i inventory dbserver -a "df -h /"
dbserver | SUCCESS | rc=0 >>
Filesystem      Size  Used Avail Use% Mounted on
/dev/sda1        40G  1.4G   37G   4% /
```
### 剧本
剧本（playbook）只是个 YAML 文件，它将清单文件中的服务器组与命令关联。在 ansible 中的对于关键字是 `tasks`，它可以是一个预期的状态、shell 命令或许多其它的选项。有关 ansible 可做的所有事情列表，可以查看[所有模块的列表](http://docs.ansible.com/ansible/list_of_all_modules.html)。
下面是一个运行 shell 命令的剧本示例，将其保存为 `playbook1.yml`：
```
---
- hosts: all
  tasks:
    - shell: uptime
```
* `---` 是 YAML 文件的开始
* `- hosts`：指定要使用的组
* `tasks`：标记任务列表的开始
* `- shell`：指定第一个任务使用 [shell](http://docs.ansible.com/ansible/shell_module.html) 模块
* **记住：YAML 需要缩进结构，确保你始终遵循剧本中的正确结构**
用下面的命令运行它：
```
$ ansible-playbook -i inventory playbook1.yml
PLAY [all] *********************************************************************
TASK [setup] *******************************************************************
ok: [web1]
ok: [web2]
ok: [dbmaster]
TASK [command] *****************************************************************
changed: [web1]
changed: [web2]
changed: [dbmaster]
PLAY RECAP *********************************************************************
dbmaster                   : ok=2    changed=1    unreachable=0    failed=0
web1                       : ok=2    changed=1    unreachable=0    failed=0
web2                       : ok=2    changed=1    unreachable=0    failed=0
```
正如你所见，ansible 运行了 2 个任务，而不是只有剧本中的一个。`TASK [setup]` 是一个隐式任务，它会首先运行以捕获服务器的信息，如主机名、IP、发行版和更多详细信息，然后可以使用这些信息运行条件任务。
还有最后的 `PLAY RECAP`，其中 ansible 显示了运行了多少个任务以及每个对应的状态。在我们的例子中，因为我们运行了一个 shell 命令，ansible 不知道结果的状态，它被认为是 `changed`。
#### 安装软件
我们将使用 [apt](http://docs.ansible.com/ansible/apt_module.html) 在我们的服务器上安装软件，因为我们需要 root 权限，所以我们必须使用 `become` 语句，将这个内容保存在 `playbook2.yml` 中并运行它（`ansible-playbook playbook2.yml`）：
```
---
- hosts: webs
  become_user: root
  become: true
  tasks:
    - apt: name=git state=present
```
有一些语句可以应用于 ansible 中所有模块；一个是 `name` 语句，可以让我们输出关于正在执行的任务的更具描述性的文本。要使用它，保持任务内容一样，但是添加 `name ：描述性文本` 作为第一行，所以我们以前的文本将改成：
```
---
- hosts: webs
  become_user: root
  become: true
  tasks:
    - name: This task will make sure git is present on the system
      apt: name=git state=present
```
#### 使用 `with_items`
当你要处理一个列表时，比如要安装的项目和软件包、要创建的文件，可以用 ansible 提供的 `with_items`。下面是我们如何在 `playbook3.yml` 中使用它，同时添加一些我们已经知道的其他语句：
```
---
- hosts: all
  become_user: root
  become: true
  tasks: