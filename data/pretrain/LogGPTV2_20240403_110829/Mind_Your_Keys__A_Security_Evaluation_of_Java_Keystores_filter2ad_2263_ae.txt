The Bouncy Castle BCPKCS12 implementation suffers a
similar problem: in addition to MAC and certiﬁcate parame-
ters, also the iteration count and the salt size used for private
keys are reverted to default values when the keystore is saved
to disk. Following our report to the Bouncy Castle developers,
this behaviour is currently being addressed in the next release
by preserving the original parameters whenever possible.8
Lastly, the construction of the integrity mechanism for the
UBER keystore could cause an information leakage under
speciﬁc circumstances. After a successful decryption using the
store password, UBER recomputes the hash of the keystore and
compares it with the stored digest. This MAC-then-encrypt
approach is generally considered a bad idea, since it can lead
to attacks if, for example, there is a perceptible difference
in behavior (an error message, or execution time) between
8https://github.com/bcgit/bc-java/commit/ebe1b25a
10
a decryption that fails because the padding is invalid, or a
decryption that fails because the hash is invalid (a so-called
padding oracle attack [54]).
E. Security Considerations
We now provide general considerations on the security
of Java keystores. The ﬁrst one is about using the same
password for different purposes. If the integrity password is
also used to ensure the conﬁdentiality of encrypted entries,
then the complexity of breaking either the integrity or the
conﬁdentiality of stored entries turns out to be the one of
attacking the weakest mechanism. For instance, we consider
a keystore where cracking the integrity password is more
efﬁcient than recovering the password used to protect sensitive
entries: as shown in Section VI, this is the case of PKCS12 and
BCPKCS12 keystores. Under this setting, sensitive keys can
be leaked more easily by brute-forcing the integrity password.
Although this is considered a bad practice in general [33],
all the keystores analyzed permit the use of the same password
to protect sensitive entries and to verify the integrity of the
keystore. This practice is indeed widespread [27] and, as
already stated in Section III-C, prompted by keytool itself.
Furthermore, our analysis found that the BCPKCS12 keystore
forcibly encrypts keys and certiﬁcates with the store password.
For these reasons, we argue that using the same password
for integrity and conﬁdentiality is not a direct threat to the
security of stored keys when both mechanisms are resistant to
ofﬂine attacks and a strong password is used. Still the security
implications of this practice should be seriously considered.
The second consideration regards how the integrity of a
keystore is assessed. Indeed, a poorly designed application may
bypass the integrity check on keystores by providing a null or
empty password to the Java load() function. All the Oracle
keystores analyzed in the previous section and BouncyCastle
BKS are affected by this problem. On the other hand, keystores
providing protection to entries inspection, such as UBER and
BCFKS, cannot be loaded with an empty password since
the decryption step would fail. Lastly, BCPKCS12 throws
an exception if an attempt of loading a ﬁle with an empty
password is made. Clearly, if the integrity check is omitted, an
attacker can trivially violate Property P2 by altering, adding or
removing any entry saved in the clear. Conversely, the integrity
of encrypted sensitive keys is still provided by the decryption
mechanism that checks for the correct padding sequence at the
end of the plaintext. Since the entries are typically encoded
(e.g., in ASN.1), a failure in the parse routine could also
indicate a tampered ciphertext.
We also emphasize that the 1-block cracking optimization
introduced in V-A is not limited to JKS and JCEKS. Indeed,
by leveraging the structure of saved entries, all the analyzed
keystores enable to reduce the cost of the decrypt operation to
check the correctness of a password. However, excluding JKS
and JCEKS, this technique only provides a negligible speed-
up on the remaining keystores given that the KDF is orders of
magnitude slower than the decrypt operation.
Finally, we point out that the current design of password-
based keystores cannot provide a proper key-revocation mech-
anism without a trusted third-party component. For instance,
it may be the case that a key has been leaked in the clear and
subsequently substituted with a fresh one in newer versions
of a keystore ﬁle. Under settings S1 and S4, an attacker may
replace the current version of a keystore with a previously
intercepted valid version, thus restoring the exposed key. The
integrity mechanism is indeed not sufﬁcient
to distinguish
among different versions of a keystore protected with the same
store password. For this reason, the store password must be
updated to a fresh one every time a rollback of the keystore
ﬁle is not acceptable by the user, which is typically the case
of a keystore containing a revoked key.
VI. ESTIMATING BRUTE-FORCE SPEED-UP
We have discussed how weak PBEs and integrity checks in
keystores can expose passwords to brute-forcing. In this sec-
tion we make an empirical comparison of the cracking speed
to bruteforce both the conﬁdentiality and integrity mechanisms
in the analyzed keystores. We also compute the speed-up with
respect to BCFKS, as it is the only keystore using a standard
and modern KDF, i.e., PBKDF2, which provides the best brute-
forcing resistance. Notice, however, that the latest NIST draft
on Digital Identity Guidelines [28] sets the minimum KDF
iteration count to 10,000 which is one order of magnitude more
than what is used in BCFKS (cf. Table I). Thus all the speed-
up values should be roughly multiplied by 10 if compared
with a baseline implementation using PBKDF2 with 10,000
iterations.
It is out of the scope of this paper to investigate brute-
forcing strategies. Our tests only aim at comparing, among
the different keystores, the actual time to perform the key
derivation step and the subsequent cryptographic operations,
including the check to assess key correctness. Our study is
independent of the actual password guessing strategy adopted
by the attacker.
A. Test Methodology
We developed a compatible C implementation of the key
decryption and the integrity check for each keystore type.
Each implementation is limited to the minimum steps required
to check the correctness of a test password. This procedure
is then executed in a timed loop to evaluate the cracking
speed. Algorithms 2 and 3 show the pseudocode of our
implementations. Note that, in both algorithms, we set the
password length to 10 bytes because it is an intermediate value
between trivial and infeasible. Similarly, since the iteration
count in BKS and UBER is chosen randomly in the range
1024 and 2047, we set it to the intermediate value 1536.
Conﬁdentiality: The conﬁdentiality password brute-forcing
loop (Algorithm 2) is divided into three steps: key derivation,
decryption and a password correctness check. The last step is
included in the loop only to account for its computational cost
in the results. Both PBES1 (PKCS#5) and PKCS#12 password-
based encryption schemes, used in all keystores but BCFKS,
require to run the KDF twice to derive the decryption key and
the IV. On the other hand, in BCFKS the initialization vector
is not derived from the password but simply stored with the
ciphertext. During our tests we set encrypted entry to a ﬁxed
size to resemble an on-disk entry containing a 2048 bits RSA
key. However, in Section V-A we have shown how the partial
knowledge of the plaintext structure of a JKS key entry can
11
(cid:46) all 10-bytes passwords
encrypted entry ← (B1, ..., B2000)
passwords ← (pw1, ..., pwn)
salt ← constant
counter ← 0
while ELAPSEDTIME < test duration do
Algorithm 2 Conﬁdentiality password cracking benchmark
1: procedure BENCHCONFIDENTIALITY(test duration)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
password ← next(passwords)
key ← KDFkey(password, salt)
iv ← KDFiv(password, salt)
(cid:46) not in JKS, BCFKS
plaintext ← DECRYPTBLOCK(encrypted entry, key, iv)
VERIFYKEY(plaintext)
counter ← counter + 1
return counter
Algorithm 3 Integrity password cracking benchmark
1: procedure BENCHINTEGRITY(test duration)
keystore contentsmall ← (B1, ..., B2048)
2:
keystore contentmedium ← (B1, ..., B8192)
3:
keystore contentlarge ← (B1, ..., B16384)
4:
passwords ← (pw1, ..., pwn)
5:
salt ← constant
6:
counter(small,medium,large) ← 0
7:
for all keystore content, counter do
8:
9:
password ← next(passwords)
10:
key ← KDFmac(password, salt) (cid:46) not in JKS, JCEKS
11:
mac ← MAC(keystore content, key)
12:
VERIFYMAC(mac)
13:
counter ← counter + 1
14:
15:
while ELAPSEDTIME < test duration do
return counter(small,medium,large)
(cid:46) all 10-bytes passwords
be leveraged to speed-up brute-forcing. This shortcut can be
applied to all the analyzed keystores in order to decrypt only
the ﬁrst block of encrypted entry. For this reason, the key size
becomes irrelevant while testing for a decryption password.
Integrity: Similarly, the integrity password cracking code
(Algorithm 3) is divided into three steps: key derivation, a
hash/MAC computation and the password correctness check.
The key derivation step is run once to derive the MAC key in
all keystores, with the exception of JKS and JCEKS where the
password is fed directly to the hash function (cf. Section IV-A).
As described later in this section, the speed of KDF plus
MAC calculation can be highly inﬂuenced by the keystore size,
thus we performed our tests using a keystore content of three
different sizes: 2048, 8192 and 16384 bytes.
Test conﬁguration: We relied on standard implementations
of the cryptographic algorithms to produce comparable results:
the OpenSSL library (version 1.0.2g) provides all the needed
hash functions, ciphers and KDFs, with the exception of
Twoﬁsh where we used an implementation from the author
of the cipher.9 All the tests were performed on a desktop
computer running Ubuntu 16.04 and equipped with an Intel
Core i7 6700 CPU; source code of our implementations has
been compiled with GCC 5.4 using -O3 -march=native
optimizations. We run each benchmark on a single CPU core
because the numeric results can be easily scaled to a highly
parallel systems. To collect solid and repeatable results each
benchmark has been run for 60 seconds.
9https://www.schneier.com/academic/twoﬁsh/download.html
12
B. Results
The charts in Figure 3 show our benchmarks on the crack-
ing speed for conﬁdentiality (Figure 4a) and integrity (Fig-
ure 4b). On the x-axis there are the 7 keystore types: we group
together different keystores when the speciﬁc mechanism is
shared among the implementations, i.e., PKCS12/BCPKCS12
for both conﬁdentiality and integrity and JKS/JCEKS for in-
tegrity. On the y-axis we report the number of tested passwords
per second doing a serial computation on a single CPU core:
note that the scale of this axis is logarithmic. We stress that
our results are meant
inter-keystore
comparison rather than an absolute performance index. To this
end, a label on top of each bar indicates the speed-up relative
to the strongest BCFKS baseline. Absolute performance can
be greatly improved using both optimized parallel code and
more powerful hardware which ranges from dozens of CPU
cores or GPUs to programmable devices such as FPGA or
custom-designed ASICs [30], [22], [34].
to provide a relative,
Conﬁdentiality: From the attack described in Section V-A,
it follows that cracking the password of an encrypted key
contained in JKS - the default Java keystore - is at least three
orders of magnitude faster than in BCFKS. Even without a
speciﬁc attack, recovering the same password from JCEKS is
over one hundred times faster due to its low (20) iteration
count. By contrast, the higher value (1024 or 1024-2047) used
in PKCS12, BKS and UBER translates into a far better ofﬂine
resistance as outlined in the chart.
Integrity: Similar considerations can be done for the
integrity password resistance. Finding this password in all
keystores but JKS is equivalent, or even faster than breaking
the conﬁdentiality password. Moreover, the performance of
these keystores is inﬂuenced by the size of the ﬁle due to the
particular construction of the MAC function (cf. Section IV-A).
The speed gain (w.r.t. conﬁdentiality) visible in PKCS12, BKS
and UBER is caused by the missing IV derivation step which,
basically, halves the number or KDF iterations. Interestingly, in
BCFKS there is no difference between the two scores: since the
whole keystore ﬁle is encrypted, we can reduce the integrity
check to a successful decryption, avoiding the computation
overhead of the HMAC on the entire ﬁle.
VII. DISCLOSURE AND SECURITY UPDATES
We have timely disclosed our ﬁndings to Oracle and
Bouncy Castle developers in May 2017. The Oracle Secu-
rity Team has acknowledged the reported issues with CVE
IDs [37], [38] and has released most of the ﬁxes in the October
2017 Critical Patch Update (CPU) [44]. In the following list,
we summarize the changes already published by Oracle:
JCEKS keystores are used;
• keytool suggests to switch to PKCS12 when JKS or
• improved KDF strength of the PBE in JCEKS by raising
the iteration count to 200,000. Added a ceiling value of
5 millions to prevent parameter abuse;
• in PKCS12 the iteration count has been increased to
50,000 for conﬁdentiality and 100,000 for integrity. The
same upper bound as in JCEKS is introduced;
• ﬁxed the ﬁrst JCEKS deserialization vulnerability de-
the ob-
i.e.,
scribed in Section V-C by checking that
ject being deserialized is of
the correct
type,
(a) Speed comparison of password recovery attack for key encryption
(conﬁdentiality).
(b) Speed comparison of password recovery attack for keystore in-
tegrity, considering different keystore sizes.
Fig. 3: Comparison of keystores password cracking speed. Bar labels indicate the speed-up to the strongest BCFKS baseline.
SealedObjectForKeyProtector, and by impos-
ing a recursion limit to prevent inﬁnite loops.
Additionally, Oracle informed us that a ﬁx for the second
JCEKS deserialization vulnerability is planned for release in
the January 2018 CPU [43].
In version 1.58 of the library, Bouncy Castle developers
ﬁxed the parameter abuse vulnerability of BCPKCS12 by
imposes an
adding an optional Java system property that
upper bound for the KDF iteration count. Moreover,
they