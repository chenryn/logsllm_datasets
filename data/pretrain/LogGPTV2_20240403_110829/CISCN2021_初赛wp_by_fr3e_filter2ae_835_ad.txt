            seqs.append(int(x*22000))
        for x in seqs:
            bin_x  = bin(x)[2:]
            if len(bin_x) >32)
    rc = RandCrack()
    for i in range(624):
        rc.submit(m[i])
    for i in range(200):
        h=rc.predict_randrange(0, 4294967295)
        l=rc.predict_randrange(0, 4294967295)
        print(sh.recv().decode())
        sh.sendline(str((l<<32)+(h)))
        # print(sh.recvuntil("is ").decode(),end='')
        # t=sh.recvuntil("\n",drop=True)
        # print(t.decode())
        # print("my answer is "+str((l<<32)+(h)))
    sh.sendline("2")
    print(sh.recv().decode())
    a=["0"]*1023
    a.append("1")
    a=",".join(a)
    sh.sendline(a)
    print(sh.recv().decode())
    sh.sendline(a)
    print(sh.recvall().decode())
###  rsa
第一关直接开3次方  
第二关用扩展欧几里得  
第三关用coppersmith解出p即可
    # e,n=(3, 123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009)
    # c1= 54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610
    # c2= 91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950
    # e,n=(17, 111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977)
    # (65537, 111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977L)
    # 59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646
    # (65537, 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147L)
    # 7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902
    # print(iroot(c,3)[0])
    # print(long_to_bytes(267334379257781603687613466720913534310764480084016847281446486946801530200295563483353634338157))
    b' \nO wild West Wind, thou breath of Autum'
    b"n's being,\nThou, from whose unseen presence the leaves dead\nAre driven, like ghosts from an enchanter fleeing,\nYellow, a"
    # print(30841*17-8*65537)
    # print(long_to_bytes(pow(c1,30841,n)*invert(pow(c2,8,n),n)%n))
    # print(long_to_bytes(978430871477569051989776547659020359721056838635797362474311886436116962354292851181720060000979143571198378856012391742078510586927376783797757539078239088349758644144812898155106623543650953940606543822567423130350207207895380499638001151443841997176299548692737056724423631882))
    x=b' \nO wild West Wind, thou breath of Autum'+b"n's being,\nThou, from whose unseen presence the leaves dead\nAre driven, like ghosts from an enchanter fleeing,\nYellow, a"+b'nd black, and pale, and hectic red,\nPestilence-stricken multitudes: O thou,\nWho chariotest to their dark wintry bed\n'
    print(x)
## misc
###  tiny traffic
wireshark导出所有http对象后得到test,secret,flag_wrapper，test是一个压缩文件：
解压得到一个文件：
    syntax = "proto3";
    message PBResponse {
      int32 code = 1;
      int64 flag_part_convert_to_hex_plz = 2;
      message data {
        string junk_data = 2;
        string flag_part = 1;
      }
      repeated data dataList = 3;
      int32 flag_part_plz_convert_to_hex = 4;
      string flag_last_part = 5;
    }
    message PBRequest {
      string cate_id = 1;
      int32 page = 2;
      int32 pageSize = 3;
    }
到[https://protogen.marcgravell.com/编译得到py包。](https://protogen.marcgravell.com/%E7%BC%96%E8%AF%91%E5%BE%97%E5%88%B0py%E5%8C%85%E3%80%82)  
再用brotli -d解压secret得到secret_unpack。脚本解析：
    import pb2
    with open("secret_unpack", "rb") as f:
        data = f.read()
    response = pb2.PBResponse()
    response.ParseFromString(data)
    print(response)
    得到
    code: 200
    flag_part_convert_to_hex_plz: 15100450
    dataList {
      flag_part: "e2345"
      junk_data: "7af2c"
    }
    dataList {
      flag_part: "7889b0"
      junk_data: "82bc0"
    }
    flag_part_plz_convert_to_hex: 16453958
    flag_last_part: "d172a38dc"
即可拼凑出flag
###  running pixel
用ps导出所有帧观察，发现每隔10帧像素人就会变黄。重新处理一下图像：
    from PIL import *
    for i in range(382):
        image = Image.open("images/%d.jpg" % i).convert("RGB")
        xs, ys = image.size
        for x in range(xs):
            for y in range(ys):
                if image.getpixel((x, y)) == (233, 233, 233):
                    image.putpixel((y, x), 0)
                    image.save("new/%d.jpg" % i)
依据字符出现顺序拼接得到flag