systemctl enable vsftpd
```
按理来讲,现在已经完全可以本地用户的身份登录 FTP 服务器了.但是在使用 root 管理员登录后,系统提示如下的错误信息:
```bash
[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): root
530 Permission denied.
Login failed.
ftp>
```
可见,在我们输入 root 管理员的密码之前,就已经被系统拒绝访问了.这是因为 vsftpd 服务程序所在的目录中默认存放着两个名为"用户名单"的文件 (ftpusers 和 user_list) .只要里面写有某位用户的名字,就不再允许这位用户登录到 FTP 服务器上.
```bash
[root@linuxprobe ~]# cat /etc/vsftpd/user_list
[root@linuxprobe ~]# cat /etc/vsftpd/ftpusers
```
如果你确认在生产环境中使用 root 管理员不会对系统安全产生影响,只需按照上面的提示删除掉 root 用户名即可.我们也可以选择 ftpusers 和 user_list 文件中没有的一个普通用户尝试登录 FTP 服务器
在采用本地用户模式登录FTP服务器后,默认访问的是该用户的家目录,也就是说,访问的是 `/home/username` 目录.而且该目录的默认所有者、所属组都是该用户自己,因此不存在写入权限不足的情况.
---
**虚拟用户**
安装
```bash
yum install -y vsftpd
```
认证
创建虚拟用户文件,把这些用户名和密码存放在一个文件中.该文件内容格式是:用户名占用一行,密码占一行.
```bash
cd /etc/vsftp
```
```vim
vim login.list
Ftpuser1
123456
Ftpuser2
123456
Ftpadmin
123456
```
使用 db_load 命令生成 db 口令 login 数据库文件
```bash
db_load -T -t hash -f login.list login.db
```
通过修改指定的配置文件,调整对该程序的认证方式
```vim
vim /etc/vsftpd/vsftpd.conf
pam_service_name=vsftpd.vu  # 设置 PAM 使用的名称,该名称就是 /etc/pam.d/ 目录下 vsfptd 文件的文件名
```
```bash
cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.vu
```
```vim
vim /etc/pam.d/vsftpd.vu
auth       required     pam_userdb.so db=/etc/vsftpd/login
account    required     pam_userdb.so db=/etc/vsftpd/login
# 注意:格式是 db=/etc/vsftpd/login 这样的,一定不要去掉源文件的 .db 后缀
```
配置文件
```vim
vim /etc/vsftpd/vsftpd.conf
anonymous_enable=NO
local_enable=YES
guest_enable=YES
guest_username=virtual
pam_service_name=vsftpd.vu
allow_writeable_chroot=YES
```
|参数 |	作用|
| :------------- | :------------- |
|anonymous_enable=NO 	|禁止匿名开放模式|
|local_enable=YES |	允许本地用户模式|
|guest_enable=YES |	开启虚拟用户模式|
|guest_username=virtual |	指定虚拟用户账户|
|pam_service_name=vsftpd.vu |	指定PAM文件|
|allow_writeable_chroot=YES |	允许对禁锢的FTP根目录执行写入操作,而且不拒绝用户的登录请求|
用户配置权限文件
所有用户主目录为 /home/ftp 宿主为 virtual 用户;
```bash
useradd -d /home/ftp -s /sbin/nologin virtual
chmod -Rf 755 /home/ftp/
cd /home/ftp/
touch testfile
```
```vim
vim /etc/vsftpd/vsftpd.conf
guest_enable=YES      # 表示是否开启 vsftpd 虚拟用户的功能,yes 表示开启,no 表示不开启.
guest_username=virtual       # 指定虚拟用户的宿主用户
user_config_dir=/etc/vsftpd/user_conf     # 设定虚拟用户个人 vsftpd 服务文件存放路径
allow_writeable_chroot=YES
```
编辑用户权限配置文件
```vim
vim Ftpadmin  # 创建 Ftpadmin 这个用户的配置文件
anon_upload_enable=YES
anon_mkdir_wirte_enable=YES
anon_other_wirte_enable=YES
anon_umask=022
# 要求虚拟用户具有写权限 (上传、下载、删除、重命名)
# umask = 022 时,新建的目录 权限是755,文件的权限是 644
# umask = 077 时,新建的目录 权限是700,文件的权限时 600
# vsftpd的local_umask和anon_umask借鉴了它
# 默认情况下vsftp上传之后文件的权限是600,目录权限是700
# 想要修改上传之后文件的权限,有两种情况
# 如果使用vsftp的是本地用户
# 则要修改配置文件中的 local_umask 的值
# 如果使用vsftp的是虚拟用户
# 则要修改配置文件中的 anon_umask 的值
```
**启服务**
```bash
setenforce 0    # 关闭 selinux
firewall-cmd --zone=public --add-service=ftp
firewall-cmd --reload
systemctl restart vsftpd
systemctl enable vsftpd
```
**Source & Reference**
- [第11章 使用Vsftpd服务传输文件.](https://www.linuxprobe.com/chapter-11.html)
**更多配置案例**
见 [Vsftp.md](./实验/Vsftp.md)
---
## 编程语言
### C
```c
vim world.c
#include 
int main(void){
				printf("Hello World");
				return 0;
}
```
```bash
gcc helloworld.c -o execFile
./execFlie
```
---
### Go
**官网**
- https://golang.org/
**安装**
访问 https://golang.org/dl/ 下载最新版本包,这里以 `go1.13.linux-amd64.tar.gz` 为例
```bash
tar -C /usr/local -xzf go1.13.linux-amd64.tar.gz
export PATH=$PATH:/usr/local/go/bin
export GOROOT=/usr/local/go
export GOPATH=$HOME/Applications/Go
export GOBIN=$GOROOT/bin
source $HOME/.profile
source ~/.bash_profile
# $GOPATH 可以包含多个工作目录,取决于你的个人情况.如果你设置了多个工作目录,那么当你在之后使用 go get (远程包安装命令) 时远程包将会被安装在第一个目录下.
ln -s /usr/local/go/bin/go /usr/bin/go
go version
```
**测试安装**
```bash
mkdir -p $HOME/Applications/Go
cd $HOME/Applications/Go
```
```vim
vim hello.go
package main
import "fmt"
func main() {
	fmt.Printf("hello, world\n")
}
```
```bash
go build
./hello
```
---
### JDK
**oracle jdk**
- **rpm 包方式安装**
  下载
  https://www.oracle.com/technetwork/java/javase/downloads/
  ```bash
  chmod +x jdk-****.rpm
  yum localinstall jdk-****.rpm
  # 也可以
  rpm -ivh jdk-****.rpm
  ```
- **使用 ppa/源方式安装 oracle 官方版本 jdk**
  ```bash
  # 添加 ppa
  apt-get install -y python-software-properties
  add-apt-repository ppa:webupd8team/java
  apt-get update
  # 安装 jdk7
  apt-get install -y oracle-java7-installer
  # 安装 jdk8
  apt-get install -y oracle-java8-installer
  ```
- **直接使用编译完成的**
  自行下载 [oracle jdk](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)
  这里以 `jdk-8u212-linux-x64.tar.gz` 举例
  ```bash
  tar -xzvf jdk-8u212-linux-x64.tar.gz
  mkdir /usr/local/java/
  mv jdk1.8.0_212/ /usr/local/java
  export JAVA_HOME=/usr/local/java/jdk1.8.0_212
  export JRE_HOME=${JAVA_HOME}/jre
  export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
  export PATH=${JAVA_HOME}/bin:$PATH
  source /etc/profile
  ln -s /usr/local/java/jdk1.8.0_212/bin/java /usr/bin/java
  ```
**Openjdk**
- Red Hat系
  ```bash
  yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel
  java -version
  ```
- Debian 系
  ```bash
  apt-get update
  apt-get install -y openjdk-8-jdk
  # 或 apt-get install openjdk-11-jdk
  java -version
  ```
**测试**
```bash
java
javac
```
---
### Perl
**官网**
- https://www.perl.org/
**安装**
```bash
sh 
**安装**
```bash
# 安装必要的软件包
apt-get install -y php php-cli php-zip
```
### composer
Composer 是 PHP 的一个依赖管理工具。我们可以在项目中声明所依赖的外部工具库，Composer 会帮你安装这些依赖的库文件，有了它，我们就可以很轻松的使用一个命令将其他人的优秀代码引用到我们的项目中来。
**安装**
```bash
# 使用php cli toll下载Composer安装脚本
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
# 在/usr/local/bin目录中安装Composer
apt-get composer-setup.php --install-dir=/usr/local/bin --filename=composer
# 验证安装
composer
```
**使用**
```bash
# 以下为 CVE-2017-9841 测试
apt-get install -y php-xml php-mbstring
composer require --dev phpunit/phpunit:5.6.2
php -S localhost:8080 -t .
```
---
### Python3
**官网**
- https://www.python.org/
**yum 安装**
```bash
yum install -y epel-release
或
wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
yum install -y python36 python36-devel
yum install -y python-devel
yum install -y python3-devel
```
**源代码编译方式安装**
安装依赖环境
```bash
yum install -y zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel
```
下载Python3
```bash
wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz
```
安装python3
```bash
mkdir -p /usr/local/python3
tar zxvf Python-3.6.1.tgz
cd Python-3.6.1
./configure --prefix=/usr/local/python3
make
make install 或者 make && make install
```
添加到环境变量
```bash
ln -s /usr/local/python3/bin/python3 /usr/bin/python3
```
```vim
vim ~/.bash_profile # 永久修改变量
PATH=$PATH:/usr/local/python3/bin/
```
```bash
source ~/.bash_profile
```
检查 Python3 及 pip3 是否正常可用
```bash
python3 -V
pip3 -V
```
#### pip
```bash
wget https://bootstrap.pypa.io/get-pip.py
python3 get-pip.py
```
debian 系可以直接用 apt 装
```bash
apt-get install -y python-pip
```
**加速**
- [pip](../../Plan/Misc-Plan.md#pip)
**pip 指定版本安装**
检查一遍 pip 和 pip3 分别指向的 Python
```bash
pip -V
pip3 -V
```
在 linux 安装了多版本 python 时(例如 python2.6 和 2.7),pip 安装的包不一定是用户想要的位置,此时可以用 -t 选项来指定位置
```bash
pip install -t /usr/local/lib/python2.7/site-packages/ docker
```