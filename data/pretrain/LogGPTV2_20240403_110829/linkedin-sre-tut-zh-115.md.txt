# 简史
> 原文：
## CI/CD 的演变
传统的开发方法已经存在了很长时间。[瀑布模型](https://www.linkedin.com/pulse/waterfall-model-shobika-ramasubbarayalu)已经在大大小小的项目中广泛使用，并取得了成功。尽管取得了成功，但它也有很多缺点，如周期时间较长或交付时间较长。
当多个团队成员在项目中工作时，代码变更会累积起来，直到计划的构建日期才会被集成。构建通常以约定的周期进行，从一个月到一个季度不等。这导致了几个集成问题和构建失败，因为开发人员是在孤岛中工作的。
对于运营团队/任何人来说，将新的构建/发布部署到生产环境都是一个噩梦般的情况，因为缺乏关于每个变更和配置需求的适当文档。因此，要成功部署，通常需要热修复和即时补丁。
另一个巨大的挑战是协作。开发人员很少见到运营工程师，也不完全了解生产环境。所有这些挑战都增加了代码变更交付的周期时间。
[敏捷](https://www.linkedin.com/pulse/list-popular-agile-methodologies-used-organizations)方法规定了在多次迭代中交付特性的增量交付。因此，开发人员以较小的增量提交他们的代码更改，并更频繁地推出。每一次代码提交都会触发一次新的构建，集成问题会在更早的时候被发现。这改进了构建过程，从而减少了周期时间。这个过程被称为*持续集成或 CI* 。
随着组织适应开发运维规程和 SRE 规程的趋势的出现，开发人员和运营团队之间的巨大障碍已经被缩小了。开发人员和运营团队之间的协作得到了改善。此外，两个团队使用相同的工具和过程改善了协调，并避免了对过程的冲突理解。这方面的一个主要驱动因素是*连续交付(CD)* 过程，它确保较小变更的增量部署。在部署到生产环境之前，有多个生产前环境也称为暂存环境。
## CI/CD 和 DevOps
术语 **DevOps** 代表开发(Dev)和运营(Ops)团队的组合。这将开发者和运营团队聚集在一起，进行更多的合作。开发团队通常希望引入更多的功能和变化，而运营团队则更关注生产中应用的稳定性。变更总是被运营团队视为威胁，因为它会动摇环境的稳定性。DevOps 被称为一种文化，它引入了减少开发人员和操作人员之间障碍的过程。
开发人员和运营人员之间的协作允许更好地跟进端到端生产部署和更频繁的部署。因此，CI/CD 是 DevOps 流程中的一个关键要素。