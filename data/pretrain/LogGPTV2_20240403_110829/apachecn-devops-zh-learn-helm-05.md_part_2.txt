```
apiVersion: v2
name: guestbook
description: A Helm chart for Kubernetes
type: application
version: 0.1.0
appVersion: 1.16.0
dependencies:
  - name: redis
    version: 10.5.x
    repository: https://charts.bitnami.com
```
该文件也可以在 P [ackt 存储库中查看，网址为 https://github . com/PacktPublishing/-Learn-Helm/blob/master/Helm-charts/charts/g](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/Chart.yaml)uest book/chart . YAML(请注意版本和`appVersion`字段可能会有所不同，我们将在本章后面对其进行修改)。
现在您的依赖项已经添加到图表定义中，让我们下载这个依赖项，以确保它已经被正确配置。
### 下载 Redis 图表依赖项
当第一次下载依赖项时，应该使用`helm dependency update`命令。该命令会将您的依赖项下载到`charts/`目录，并生成`Chart.lock`文件，该文件指定了关于已下载图表的元数据。
运行`helm dependency update`命令下载你的 Redis 依赖项。该命令将 Helm 图表的位置作为参数，可以在下面的代码片段中看到:
```
$ helm dependency update guestbook
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the 'bitnami' chart repository
Update Complete.  Happy Helming!
Saving 1 charts
Downloading redis from repo https://charts.bitnami.com
Deleting outdated charts
```
您可以通过确保 Redis 图表出现在`charts/`文件夹下来验证下载成功的事实，如下图所示:
```
$ ls guestbook/charts
redis-10.5.14.tgz
```
现在已经包含了 Redis 依赖，让我们继续修改`values.yaml`文件。在这里，我们将覆盖特定于配置 Redis 的值，以及来自投标应用的留言簿。
## 修改 values.yaml 文件
Helm 图表的`values.yaml`文件用于提供一组默认参数，这些参数在整个图表的模板中被引用。当用户与 Helm 图表交互时，如果需要，他们可以使用`--set`或`--values`标志覆盖这些默认值。除了提供一组默认参数之外，一个写得好的 Helm 图表应该是自我记录的，包含每个值的直观名称和解释难以实现的值的注释。如果用户和维护者需要理解图表的值，编写一个自我记录的`value.yaml`文件允许他们简单地引用这个文件。
`helm create`命令生成一个值文件，该文件包含许多 Helm 图表开发中常用的样板值。让我们通过在这个文件的末尾添加一些额外的值来完成 Redis 依赖项的配置。之后，我们将重点修改一些样板值来配置留言簿前端资源。
### 添加值以配置 Redis 图表
虽然添加一个依赖项可以防止您需要创建它的图表模板，但是您可能仍然需要覆盖它的一些值来配置它。在这种情况下，有必要覆盖几个 Redis 图表的值，以允许它与`guestbook`图表的其余部分无缝工作。
让我们首先了解一下 Redis 图表的价值。这可以通过对下载的 Redis 图表运行`helm show values`命令来完成，如下所示:
```
$ helm show values charts/redis-10.5.14.tgz
```
请务必修改该命令以匹配您下载的 Redis 图表版本。显示值列表后，让我们确定需要覆盖的值，如下所示:
1.  The first value that will need to be overridden in the Redis chart is `fullnameOverride`. This value appears in the `helm show values` output, as follows:
    ```
    ## String to fully override redis.fullname template
    ##
    # fullnameOverride:
    ```
    图表通常在名为`$CHART_NAME.fullname`的命名模板中使用该值，以轻松生成其 Kubernetes 资源名称。当设置`fullnameOverride`时，命名模板将评估为该值。否则，该模板的结果将基于`.Release.Name`对象，或安装时提供的 Helm 版本的名称。
    Redis 依赖项使用`redis.fullname`模板来帮助设置 Redis 主服务名和 Redis 从服务名。
    下面的代码片段显示了 Redis 主服务名是如何在 Redis 图表中生成的示例:
    ```
    name: {{ template 'redis.fullname' . }}-master
    ```
    留言簿应用需要将 Redis 服务命名为`redis-master`和`redis-slave`。因此，`fullnameOverride`值应设置为`redis`。
    如果您有兴趣了解更多关于`redis.fullname`模板如何工作以及如何在整个 Redis 图表中应用的信息，您可以在`charts/`文件夹下取消归档 Redis 依赖关系。在该文件夹中，您将在`templates/_helpers.tpl`文件中找到`redis.fullname`模板，并在每个 YAML 模板中记录其调用。(事实证明，您生成的`guestbook`图表在`_helpers.tpl`文件中也包含了类似的模板，但是一般来说，在维护者定制模板的情况下，参考依赖者的资源会更安全。)
    如果您有兴趣了解更多关于留言簿应用如何工作的信息，可以在 GitHub 上找到源代码。以下文件定义了所需的 Redis 服务名称:
    https://github.com/kubernetes/examples/blob/master/guestbook/php-redis/guestbook.php
2.  The next value that needs to be overridden from the Redis chart is `usePassword`. The following code snippet shows what this value looks like in the `helm show values` output:
    ```
    ## Use password authentication
    usePassword: true
    ```
    留言簿应用是为未经身份验证访问 Redis 数据库而编写的，因此我们将想要将该值设置为`false`。
3.  我们需要覆盖的最终值是`configmap`。以下是该值在`helm show values`输出中的显示方式:
    ```
    ## Redis config file
    ## ref: https://redis.io/topics/config
    ##
    configmap: |-
      # Enable AOF https://redis.io/topics/persistence#append-only-file
      appendonly yes
      # Disable RDB persistence, AOF persistence already enabled.
      save ''
    ```
默认的`configmap`值将启用 Redis 可以使用的两种持久性，**仅追加文件** ( **AOF** )和 **Redis 数据库文件** ( **RDF** )持久性。AOFRedis 中的持久性是通过向 changelog 风格的文件中添加新的数据条目来提供变更历史的。RDF 持久性的工作原理是以一定的时间间隔将数据复制到文件中，从而创建数据快照。
在本章的后面，我们将创建简单的生命周期挂钩，允许用户将 Redis 数据库备份和恢复到以前的快照。因为只有 RDB 持久性可以处理快照文件，所以我们将覆盖`configmap`值来读取`appendonly no`，这将禁用 AOF 持久性。
识别每个 Redis 值，将这些值添加到图表的`values.yaml`文件的末尾，如以下代码块所示:
```
redis:
  # Override the redis.fullname template
  fullnameOverride: redis
  # Enable unauthenticated access to Redis
  usePassword: false
  # Disable AOF persistence
  configmap: |-
    appendonly no
```
请记住，从 [*第 4 章*](04.html#_idTextAnchor203)**理解 Helm 图表，*从图表依赖关系覆盖的值必须在该图表名称下限定范围。这就是为什么这些值将被添加到`redis:`小节的下面。*
 *您可以通过参考位于 Packt 存储库中的`v` [`alues.yaml`文件来检查您是否正确配置了 Redis 值。](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/values.yaml)
重要说明
一些与 Redis 无关的值可能与您的`values.yaml`文件不同，因为我们将在下一节修改这些值。
配置好 Redis 依赖项的值后，让我们继续修改`helm create`生成的默认值来部署留言簿前端。
### 修改值以部署留言簿前端
当您运行本章开头的`helm create`命令时，它创建的一些项目是`templates/`目录下的默认模板和`values.yaml`文件中的默认值。
以下是已创建的默认模板列表:
*   `deployment.yaml`:用于将留言簿应用部署到 Kubernetes。
*   `ingress.yaml`:提供了一个从 Kubernetes 集群外部访问留言簿应用的选项。
*   `serviceaccount.yaml`:用于为留言簿应用创建专用的`serviceaccount`。
*   `service.yaml`:用于在留言簿应用的多个实例之间进行负载平衡。还可以提供从 Kubernetes 集群外部访问留言簿应用的选项。
*   `_helpers.tp`:提供了一组在整个 Helm 图表中使用的通用模板。
*   `NOTES.txt`:提供一组安装应用后用来访问应用的指令。
每个模板都是由图表的值配置的。虽然`helm create`命令为部署留言簿应用提供了一个很好的起点，但它没有提供所需的每个默认值。为了用它们所需的值替换默认值，我们可以观察生成的图表模板，并相应地修改它们的参数。
让我们浏览一下指示需要进行修改的模板位置。
第一个位置在`deployment.yaml`图表模板中。在该文件中，有一行指示要部署的容器映像，如下所示:
```
image: '{{ .Values.image.repository }}:{{ .Chart.AppVersion }}'
```
可以看到，映像是由`image.repository`值和`AppVersion`图表设置决定的。如果您查看您的`values.yaml`文件，您可以看到`image.repository`值当前默认配置为部署`nginx`映像，如下图所示:
```
image:
  repository: nginx
```
同样，如果查看`Chart.yaml`文件，可以看到`AppVersion`当前设置为`1.16.0`，如下图:
```
appVersion: 1.16.0
```
由于留言簿应用起源于 Kubernetes 教程，您可以在 Kubernetes 文档中找到需要部署的具体映像，网址为 https://Kubernetes . io/docs/tutories/无状态-应用/留言簿/# creating-the-guest book-front-deployment。在文档中，您可以看到映像必须指定如下:
```
image: gcr.io/google-samples/gb-frontend:v4
```
因此，为了正确生成映像场，必须将`image.repository`值设置为`gcr.io/google-samples/gb-frontend`，将`AppVersion`图表设置设置为`v4`。
第二个必须修改的位置是在`service.yaml`图表模板中。在这个文件中，有一行决定了服务类型，如下图所示: