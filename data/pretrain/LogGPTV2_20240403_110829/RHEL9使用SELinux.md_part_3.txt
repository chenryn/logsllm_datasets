:::
::: orderedlist
**步骤**
1.  以 permissive 模式启用 SELinux。如需更多信息，请参阅[切换到
    permissive
    模式](#changing-selinux-states-and-modes_using-selinux.html#changing-to-permissive-mode_changing-selinux-states-and-modes "切换到 permissive 模式"){.link}。
2.  重启您的系统：
    ``` screen
    # reboot
    ```
3.  检查 SELinux 拒绝信息。如需更多信息，请参阅 [识别 SELinux
    拒绝操作信息](#troubleshooting-problems-related-to-selinux_using-selinux.html#identifying-selinux-denials_troubleshooting-problems-related-to-selinux "识别 SELinux 拒绝"){.link}。
4.  确保在下次重启时重新标记文件：
    ``` screen
    # fixfiles -F onboot
    ```
    这会创建包含 `-F`{.literal} 选项的 `/.autorelabel`{.literal} 文件。
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    进入 `fixfiles -F onboot`{.literal} 命令前，始终切换到 permissive
    模式。这可防止系统在系统包含未标记的文件时无法引导。如需更多信息，请参阅
    [RHBZ#2021835](https://bugzilla.redhat.com/show_bug.cgi?id=2021835){.link}。
    :::
5.  如果没有拒绝的操作，切换到 enforcing
    模式。如需更多信息，请参阅[在引导时进入 SELinux
    模式](#changing-selinux-states-and-modes_using-selinux.html#changing-selinux-modes-at-boot-time_changing-selinux-states-and-modes "在引导时更改 SELinux 模式"){.link}。
:::
::: orderedlist
**验证**
1.  系统重启后，确认 `getenforce`{.literal} 命令返回
    `Enforcing`{.literal}:
    ``` screen
    $ getenforce
    Enforcing
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要在 enforcing 模式下使用 SELinux 运行自定义应用程序，请选择以下之一：
::: itemizedlist
-   在 `unconfined_service_t`{.literal} 域中运行您的应用程序。
-   为应用程序编写新策略。如需更多信息，请参阅 [编写自定义 SELinux
    策略](#writing-a-custom-selinux-policy_using-selinux.html "第 8 章 编写自定义 SELinux 策略"){.link}
    部分。
:::
:::
::: itemizedlist
**其他资源**
-   [SELinux
    状态和模式](#getting-started-with-selinux_using-selinux.html#selinux-states-and-modes_getting-started-with-selinux "SELinux 状态和模式"){.link}部分涵盖了模式中的临时更改。
:::
:::
::: section
::: titlepage
# []{#changing-selinux-states-and-modes_using-selinux.html#Enabling_and_Disabling_SELinux-Disabling_SELinux_changing-selinux-states-and-modes}禁用 SELinux {.title}
:::
禁用 SELinux 时，SELinux 策略不被加载 ; 它不会被强制执行，也不会记录 AVC
信息。因此，[运行 SELinux
的好处](#getting-started-with-selinux_using-selinux.html#benefits-of-selinux_getting-started-with-selinux "运行 SELinux 的好处"){.link}中介绍的好处都将没有。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
红帽强烈建议您使用 permissive 模式，而不是永久禁用 SELinux。如需有关
permissive 模式的更多信息，请参阅[切换为 permissive
模式](#changing-selinux-states-and-modes_using-selinux.html#changing-to-permissive-mode_changing-selinux-states-and-modes "切换到 permissive 模式"){.link}。
:::
::: itemizedlist
**先决条件**
-   已安装 `grubby`{.literal} 软件包：
    ``` screen
    $ rpm -q grubby
    grubby-version
    ```
:::
::: title
**步骤**
:::
永久禁用 SELinux：
::: orderedlist
1.  将您的引导装载程序配置为在内核命令行中添加 `selinux=0`{.literal} ：
    ``` screen
    $ sudo grubby --update-kernel ALL --args selinux=0
    ```
2.  重启您的系统：
    ``` screen
    $ reboot
    ```
:::
::: itemizedlist
**验证**
-   重新引导后，确认 `getenforce`{.literal} 命令返回
    `Disabled`{.literal} ：
    ``` screen
    $ getenforce
    Disabled
    ```
:::
:::
::: section
::: titlepage
# []{#changing-selinux-states-and-modes_using-selinux.html#changing-selinux-modes-at-boot-time_changing-selinux-states-and-modes}在引导时更改 SELinux 模式 {.title}
:::
在引导时，您可以设置几个内核参数来更改 SELinux 的运行方式：
::: variablelist
[enforcing=0]{.term}
:   设置此参数可让系统以 permissive
    模式启动，这在进行故障排除时非常有用。如果您的文件系统被破坏，使用
    permissive 模式可能是唯一的选择。在 permissive
    模式中，系统将继续正确创建标签。在这个模式中产生的 AVC 信息可能与
    enforcing 模式不同。
    在 permissive
    模式中，只报告来自于同一拒绝的一系列操作的第一个拒绝信息。然而，在
    enforcing
    模式中，您可能会得到一个与读取目录相关的拒绝信息，应用程序将停止。在
    permissive 模式中，您会得到相同的 AVC
    信息，但应用程序将继续读取目录中的文件，并为因为每个拒绝额外获得一个
    AVC。
[selinux=0]{.term}
:   这个参数会导致内核不载入 SELinux
    构架的任意部分。初始化脚本会注意到系统使用 `selinux=0`{.literal}
    参数引导，并涉及 `/.autorelabel`{.literal}
    文件。这会导致系统在下次使用 SELinux enabled
    模式引导时自动重新标记。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    红帽不推荐使用 `selinux=0`{.literal} 参数。要调试您的系统，首选使用
    permissive 模式。
    :::
[autorelabel=1]{.term}
:   这个参数强制系统使用类似以下命令的重新标记：
    ``` screen
    # touch /.autorelabel
    # reboot
    ```
    如果文件系统中包含大量错误标记的对象，以 permissive 模式启动系统，使
    autorelabel 进程成功。
:::
::: itemizedlist
**其他资源**
-   有关 SELinux 的其他内核引导参数，如
    `checkreqprot`{.literal}，请查看由 `kernel-doc`{.literal}
    软件包安装的
    `/usr/share/doc/kernel-doc- /Documentation/admin-guide/kernel-parameters.txt`{.literal}
    文件。使用安装的内核的版本号替换 [*\*]{.emphasis}
    字符串，例如：
    ``` screen
    # dnf install kernel-doc
    $ less /usr/share/doc/kernel-doc-4.18.0/Documentation/admin-guide/kernel-parameters.txt
    ```
:::
:::
:::
[]{#managing-confined-and-unconfined-users_using-selinux.html}
::: chapter
::: titlepage
# []{#managing-confined-and-unconfined-users_using-selinux.html#managing-confined-and-unconfined-users_using-selinux}第 3 章 管理限制和未限制的用户 {.title}
:::
下面的部分解释了 Linux 用户与 SELinux
用户的映射，描述了基本限制的用户域，并演示了将新用户映射到 SELinux
用户。
::: section
::: titlepage
# []{#managing-confined-and-unconfined-users_using-selinux.html#confined-and-unconfined-users_managing-confined-and-unconfined-users}限制和未限制的用户 {.title}
:::
每个 Linux 用户都使用 SELinux 策略映射到 SELinux 用户。这可允许 Linux
用户继承对 SELinux 用户的限制。
要在您的系统中查看 SELinux 用户映射，以 root 用户身份使用
`semanage login -l`{.literal} 命令：
``` screen
# semanage login -l
Login Name           SELinux User         MLS/MCS Range        Service
__default__          unconfined_u         s0-s0:c0.c1023       *
root                 unconfined_u         s0-s0:c0.c1023       *
```
在 Red Hat Enterprise Linux 中，Linux 用户默认映射到 SELinux
`default`{.literal} 登录，该登录映射到 SELinux `unconfined_u`{.literal}
用户。下面一行定义了默认映射：
``` screen
__default__          unconfined_u         s0-s0:c0.c1023       *
```
限制的用户受 SELinux 策略中明确定义的 SELinux
规则的限制。无限制的用户只能受到 SELinux 的最小限制。
受限制和不受限制的 Linux 用户会受到可执行和可写入的内存检查，也受到 MCS
或 MLS 的限制。
要列出可用的 SELinux 用户，请输入以下命令：
``` screen
$ seinfo -u
Users: 8
   guest_u
   root
   staff_u
   sysadm_u
   system_u
   unconfined_u
   user_u
   xguest_u
```
请注意，`seinfo`{.literal} 命令由 `setools-console`{.literal}
软件包提供，该软件包默认不会安装。
如果一个未限制的 Linux 用户执行一个应用程序，这个应用程序被 SELinux
策略定义为可以从 `unconfined_t`{.literal}
域转换到其自身限制域的应用程序，则未限制的 Linux
用户仍会受到那个受限制域的限制。这样做的安全优点是，即使 Linux
用户的运行没有限制，但应用程序仍受限制。因此，对应用程序中漏洞的利用会被策略限制。
同样，我们可以将这些检查应用到受限制的用户。每个受限制的用户都受到受限用户域的限制。SELinux
策略还可定义从受限制的用户域转换到自己受限制的目标域转换。在这种情况下，受限制的用户会受到那个目标限制的域的限制。重点是，根据用户的角色，把特定的权限与受限制的用户相关联。
:::
::: section
::: titlepage
# []{#managing-confined-and-unconfined-users_using-selinux.html#selinux-user-capabilities_managing-confined-and-unconfined-users}SELinux 用户功能 {.title}
:::
SELinux 策略将每个 Linux 用户映射到 SELinux 用户。这允许 Linux 用户继承
SELinux 用户的限制。
您可以通过调整策略中的布尔值来自定义 SELinux
策略中受限用户的权限。您可以使用 `semanage boolean -l`{.literal}
命令确定这些布尔值的当前状态。
::: table
[]{#managing-confined-and-unconfined-users_using-selinux.html#idm139972198470848}
**表 3.1. SELinux 用户的角色**
::: table-contents
  User                       默认角色                   其他角色
  -------------------------- -------------------------- --------------------------
  `unconfined_u`{.literal}   `unconfined_r`{.literal}   `system_r`{.literal}
  `guest_u`{.literal}        `guest_r`{.literal}         
  `xguest_u`{.literal}       `xguest_r`{.literal}        
  `user_u`{.literal}         `user_r`{.literal}          
  `staff_u`{.literal}        `staff_r`{.literal}        `sysadm_r`{.literal}
                                                        `unconfined_r`{.literal}
                                                        `system_r`{.literal}
  `sysadm_u`{.literal}       `sysadm_r`{.literal}        
  `root`{.literal}           `staff_r`{.literal}        `sysadm_r`{.literal}
                                                        `unconfined_r`{.literal}
                                                        `system_r`{.literal}
  `system_u`{.literal}       `system_r`{.literal}        
:::
:::
请注意，`system_u`{.literal}
是系统进程和对象的特殊用户身份，`system_r`{.literal}
是关联的角色。管理员不得将这个 `system_u`{.literal} 用户和
`system_r`{.literal} 角色关联到 Linux
用户。另外，`unconfined_u`{.literal} 和 `root`{.literal}
是没有限制的用户。因此，与这些 SELinux 用户关联的角色不会包含在下表中
type 和 SELinux 角色的访问中。
每个 SELinux 角色都与 SELinux 类型对应，并提供特定的访问权限。
::: table
[]{#managing-confined-and-unconfined-users_using-selinux.html#idm139972201530816}