在64位系统中，GS段寄存器在内核态会指向KPCR，KPCR偏移0x38处为IdtBase：
    3: kd> rdmsr 0xC0000101
    msr[c0000101] = ffffdc81`fe1c1000
    3: kd> dt _kpcr ffffdc81`fe1c1000
    nt!_KPCR
       +0x000 NtTib            : _NT_TIB
       +0x000 GdtBase          : 0xffffdc81`fe1d6fb0 _KGDTENTRY64
       +0x008 TssBase          : 0xffffdc81`fe1d5000 _KTSS64
       +0x010 UserRsp          : 0x10ff588
       +0x018 Self             : 0xffffdc81`fe1c1000 _KPCR
       +0x020 CurrentPrcb      : 0xffffdc81`fe1c1180 _KPRCB
       +0x028 LockArray        : 0xffffdc81`fe1c1870 _KSPIN_LOCK_QUEUE
       +0x030 Used_Self        : 0x00000000`00e11000 Void
       +0x038 IdtBase          : 0xffffdc81`fe1d4000 _KIDTENTRY64
       ......
       +0x180 Prcb             : _KPRCB
ISR入口点在_KIDTENTRY64结构体中被分成三部分：OffsetLow、OffsetMiddle 以及 OffsetHigh。其计算公式为：(
OffsetHigh  dx -id 0,0,ffff818c6286f040 -r1 ((ntkrnlmp!_KIDTENTRY64 *)0xffffdc81fe1d4000)
    ((ntkrnlmp!_KIDTENTRY64 *)0xffffdc81fe1d4000)                 : 0xffffdc81fe1d4000 [Type: _KIDTENTRY64 *]
        [+0x000] OffsetLow        : 0x3d00 [Type: unsigned short]
        [+0x002] Selector         : 0x10 [Type: unsigned short]
        [+0x004 ( 2: 0)] IstIndex         : 0x0 [Type: unsigned short]
        [+0x004 ( 7: 3)] Reserved0        : 0x0 [Type: unsigned short]
        [+0x004 (12: 8)] Type             : 0xe [Type: unsigned short]
        [+0x004 (14:13)] Dpl              : 0x0 [Type: unsigned short]
        [+0x004 (15:15)] Present          : 0x1 [Type: unsigned short]
        [+0x006] OffsetMiddle     : 0x4f67 [Type: unsigned short]
        [+0x008] OffsetHigh       : 0xfffff800 [Type: unsigned long]
        [+0x00c] Reserved1        : 0x0 [Type: unsigned long]
        [+0x000] Alignment        : 0x4f678e0000103d00 [Type: unsigned __int64]
    3: kd> u 0xfffff8004f673d00
    nt!KiDivideErrorFault:
    fffff800`4f673d00 4883ec08        sub     rsp,8
    fffff800`4f673d04 55              push    rbp
    fffff800`4f673d05 4881ec58010000  sub     rsp,158h
    fffff800`4f673d0c 488dac2480000000 lea     rbp,[rsp+80h]
    fffff800`4f673d14 c645ab01        mov     byte ptr [rbp-55h],1
    fffff800`4f673d18 488945b0        mov     qword ptr [rbp-50h],rax
可直接取IdtBase偏移4处的QWORD值，与0xfffffffffffff000相与，然后进行页对齐向前搜索，直到匹配到魔值"\x4D\x5A"（MZ），此时就得到了ntoskrnl.exe基址。有了ntoskrnl.exe模块的基址，就可以通过遍历导出表获取相关函数的地址。
    3: kd> dq 0xffffdc81`fe1d4000+4 l1
    ffffdc81`fe1d4004  fffff800`4f678e00
    3: kd> lmm nt
    Browse full module list
    start             end                 module name
    fffff800`4f4a7000 fffff800`4ff5e000   nt         (pdb symbols)          C:\ProgramData\Dbg\sym\ntkrnlmp.pdb\5A8A70EAE29939EFA17C9FC879FA0D901\ntkrnlmp.pdb
    3: kd> db fffff800`4f4a7000
    fffff800`4f4a7000  4d 5a 90 00 03 00 00 00-04 00 00 00 ff ff 00 00  MZ..............
    fffff800`4f4a7010  b8 00 00 00 00 00 00 00-40 00 00 00 00 00 00 00  ........@.......
    fffff800`4f4a7020  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    fffff800`4f4a7030  00 00 00 00 00 00 00 00-00 00 00 00 08 01 00 00  ................
    fffff800`4f4a7040  0e 1f ba 0e 00 b4 09 cd-21 b8 01 4c cd 21 54 68  ........!..L.!Th
    fffff800`4f4a7050  69 73 20 70 72 6f 67 72-61 6d 20 63 61 6e 6e 6f  is program canno
    fffff800`4f4a7060  74 20 62 65 20 72 75 6e-20 69 6e 20 44 4f 53 20  t be run in DOS 
    fffff800`4f4a7070  6d 6f 64 65 2e 0d 0d 0a-24 00 00 00 00 00 00 00  mode....$.......
### 获取目标KTHREAD结构
在x64系统上（调试环境），KPCR偏移0x180处为KPRCB结构，KPRCB结构偏移8处为_KTHREAD结构的CurrentThread。_KTHREAD结构偏移0x220处为
_KPROCESS结构。KPROCESS结构为EPROCESS的第一项，EPROCESS结构偏移0x488为_LIST_ENTRY结构的ThreadListHead。
    3: kd> dt nt!_kpcr ffffdc81`fe1c1000
    nt!_KPCR
       +0x000 NtTib            : _NT_TIB
       +0x000 GdtBase          : 0xffffdc81`fe1d6fb0 _KGDTENTRY64
       +0x008 TssBase          : 0xffffdc81`fe1d5000 _KTSS64
       +0x010 UserRsp          : 0x10ff588
       +0x018 Self             : 0xffffdc81`fe1c1000 _KPCR
       +0x020 CurrentPrcb      : 0xffffdc81`fe1c1180 _KPRCB
       +0x028 LockArray        : 0xffffdc81`fe1c1870 _KSPIN_LOCK_QUEUE
       +0x030 Used_Self        : 0x00000000`00e11000 Void
       +0x038 IdtBase          : 0xffffdc81`fe1d4000 _KIDTENTRY64
       ......
       +0x180 Prcb             : _KPRCB
    3: kd> dx -id 0,0,ffff818c6286f040 -r1 (*((ntkrnlmp!_KPRCB *)0xffffdc81fe1c1180))
    (*((ntkrnlmp!_KPRCB *)0xffffdc81fe1c1180))                 [Type: _KPRCB]
        [+0x000] MxCsr            : 0x1f80 [Type: unsigned long]
        [+0x004] LegacyNumber     : 0x3 [Type: unsigned char]
        [+0x005] ReservedMustBeZero : 0x0 [Type: unsigned char]
        [+0x006] InterruptRequest : 0x0 [Type: unsigned char]
        [+0x007] IdleHalt         : 0x1 [Type: unsigned char]
        [+0x008] CurrentThread    : 0xffffdc81fe1d2140 [Type: _KTHREAD *]
    3: kd> dx -id 0,0,ffff818c6286f040 -r1 ((ntkrnlmp!_KTHREAD *)0xffffdc81fe1d2140)
    ((ntkrnlmp!_KTHREAD *)0xffffdc81fe1d2140)                 : 0xffffdc81fe1d2140 [Type: _KTHREAD *]
        [+0x000] Header           [Type: _DISPATCHER_HEADER]
        [+0x018] SListFaultAddress : 0x0 [Type: void *]
        [+0x020] QuantumTarget    : 0x791ddc0 [Type: unsigned __int64]
        [+0x028] InitialStack     : 0xfffff6074c645c90 [Type: void *]
        [+0x030] StackLimit       : 0xfffff6074c640000 [Type: void *]
        [+0x038] StackBase        : 0xfffff6074c646000 [Type: void *]
        ......
        [+0x220] Process          : 0xfffff8004fa359c0 [Type: _KPROCESS *]
    3: kd> dt _eprocess 0xfffff8004fa359c0
    nt!_EPROCESS
       +0x000 Pcb              : _KPROCESS
       +0x2e0 ProcessLock      : _EX_PUSH_LOCK
       +0x2e8 UniqueProcessId  : (null) 
       +0x2f0 ActiveProcessLinks : _LIST_ENTRY [ 0x00000000`00000000 - 0x00000000`00000000 ]
       ......
       +0x450 ImageFileName    : [15]  "Idle"
       ......
       +0x488 ThreadListHead   : _LIST_ENTRY [ 0xfffff800`4fa38ab8 - 0xffffdc81`fe1d27f8 ]
  * nt!PsGetProcessImageFileName 通过此函数得到ImageFileName在EPROCESS中的偏移（0x450），然后通过一些判断和计算获得ThreadListHead在EPROCESS中的偏移（调试环境为0x488）。
  * nt!IoThreadToProcess 从KTHREAD结构中得到KPROCESS（EPROCESS）结构体的地址（偏移0x220处）。然后通过之前计算出的偏移获取ThreadListHead结构，通过访问ThreadListHead结构获取ThreadListEntry（位于ETHREAD），遍历ThreadListEntry以计算KTHREAD（ETHREAD）相对于ThreadListEntry的偏移，自适应相关吧。
    kd> u rip
    nt!IoThreadToProcess:
    fffff805`39a79360 488b8120020000  mov     rax,qword ptr [rcx+220h]
    fffff805`39a79367 c3              ret
    kd> g
    Breakpoint 0 hit
    fffff780`0000091d 4d29ce          sub     r14,r9
    kd> ub rip
    fffff780`00000900 4d89c1          mov     r9,r8
    fffff780`00000903 4d8b09          mov     r9,qword ptr [r9]
    fffff780`00000906 4d39c8          cmp     r8,r9
    fffff780`00000909 0f84e4000000    je      fffff780`000009f3
    fffff780`0000090f 4c89c8          mov     rax,r9
    fffff780`00000912 4c29f0          sub     rax,r14
    fffff780`00000915 483d00070000    cmp     rax,700h
    fffff780`0000091b 77e6            ja      fffff780`00000903
    kd> dt _ethread @r14 -y ThreadListEntry 
    nt!_ETHREAD
       +0x6b8 ThreadListEntry : _LIST_ENTRY [ 0xffffca8d`1382f6f8 - 0xffffca8d`1a0d36f8 ]
    kd> dq r9 l1
    ffffca8d`1a0d2738  ffffca8d`1382f6f8
    kd> ? @r9-@r14
    Evaluate expression: 1720 = 00000000`000006b8
  * nt!PsGetCurrentProcess 通过nt!PsGetCurrentProcess获取当前线程所在进程的指针 （KPROCESS / EPRROCESS 地址），该指针存放在KTHREAD偏移0xB8处：通过KTHREAD偏移0x98访问ApcState；然后通过ApcState（KAPC_STATE结构）偏移0x20访问EPROCESS（KPROCESS）。
    kd> u rax
    nt!PsGetCurrentProcess:
    fffff800`4f5a9ca0 65488b042588010000 mov   rax,qword ptr gs:[188h]
    fffff800`4f5a9ca9 488b80b8000000  mov     rax,qword ptr [rax+0B8h]
    fffff800`4f5a9cb0 c3              ret
    kd> dt _kthread @rax
    nt!_KTHREAD
       +0x000 Header           : _DISPATCHER_HEADER
       ......
       +0x098 ApcState         : _KAPC_STATE
    kd> dx -id 0,0,ffffca8d10ea3340 -r1 (*((ntkrnlmp!_KAPC_STATE *)0xffffca8d1a0d2118))
    (*((ntkrnlmp!_KAPC_STATE *)0xffffca8d1a0d2118))                 [Type: _KAPC_STATE]
        [+0x000] ApcListHead      [Type: _LIST_ENTRY [2]]
        [+0x020] Process          : 0xffffca8d10ea3340 [Type: _KPROCESS *]
        [+0x028] InProgressFlags  : 0x0 [Type: unsigned char]
  * nt!PsGetProcessId 通过nt!PsGetProcessId函数得到UniqueProcessId在EPROCESS结构中的偏移（0x2e8），然后通过加8定位到ActiveProcessLinks。通过遍历ActiveProcessLinks来访问不同进程的EPROCESS结构，通过比较EPROCESS中ImageFileName的散列值来寻找目标进程（"spoolsv.exe"）。
    kd> g
    Breakpoint 1 hit
    fffff780`0000096e bf48b818b8      mov     edi,0B818B848h
    kd> dt _EPROCESS @rcx
    nt!_EPROCESS
       +0x000 Pcb              : _KPROCESS
       +0x2e0 ProcessLock      : _EX_PUSH_LOCK