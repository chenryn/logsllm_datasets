tion update occurs. The same operation occurs when a device turns
on or off (“attaches” or “detaches”) to or from the network. Finally,
location updates occur periodically to ensure that a device has not
improperly detached from the network (e.g., battery failure). All
location update operations require that the mobile device reauthen-
ticate itself with the network.
Location updates are well understood as expensive operations.
Accordingly, the network designers developed caching mechanisms
in order to minimize the impact on the HLR. The HLR amortizes
the cost of device authentication by pushing most of the load to
SGSNs4. Speciﬁcally, when an update_location request does
reach the HLR, it responds by generating n authentication vec-
tors [2]. The SGSN uses these vectors to perform this and the next
n−1 authentication requests. If the location update does not change
the device’s SGSN, no messages are transmitted back to the HLR.
Figure 6 provides a high level overview of this procedure.
Figure 7 shows the impact of such caching on a real network.
In particular, we observed the response times for the GPRS Attach
AT command, which connects a device to the data services pro-
vided by the network. These experiments show two clear groups of
response times - clusters of four fast responses taking an average
of 2.5 seconds (σ=0.2) and individual peaks lasting approximately
3 seconds (σ=0.13). Given the relatively high consistency of re-
sponse time within these two groups, it is clear that this particular
network caches ﬁve authentication vectors at the SGSN (i.e., n =
5). Such behavior makes attacks using the update_location
meta-command difﬁcult. In particular, because only one in ﬁve re-
quests from an infected phone actually reaches the HLR, an adver-
sary would need to create a signiﬁcantly larger network of infected
phones than for the other write-based meta-commands. Worse still,
because infected devices within close proximity (i.e., the same city)
would be more likely to strain their SGSN, many of these messages
would never reach the HLR at all.
A companion function, GPRS Detach, offers little additional as-
sistance to an adversary. Attempting to perform GPRS Attach fails
4This task is performed by the MSC instead in the rare cases that
no SGSN is available or the mobile device does not support data
service.
Figure 11: Response times for CW disable requests.
without ﬁrst deregistering from the network. Attach and detach
commands were therefore interleaved for this set of experiments.
Even with a far smaller response time, as shown in Figure 8, this
command almost never results in the HLR receiving trafﬁc. In fact,
standards documents note that an SGSN need not update the HLR
or delete authentication vectors when a device detaches from the
network [2]. The low response times for the detach operation, in
conjunction with the caching observed in the previous experiment,
indicate that this suggestion is indeed implemented in reality.
With a total turnaround time of about 5 seconds between GPRS
Attach commands (3 second response time + 2 second command
interval), GPRS Attach has a output rate of roughly 0.2 commands
per second. However, as only one in ﬁve attach commands reach
the HLR, the throughput is further reduced by one-ﬁfth, to 0.04
commands per second.
6.3 Update Subscriber Data
There are a number of operations that require the network to
update user proﬁles. For instance, the activation, deactivation or
modiﬁcation of the parameters of many services requires the HLR
to modify a number of ﬁelds within the database. While these oper-
ations support a diverse set of functionality, all of their interactions
with the HLR can be described as an update to two tables. Services
including Call Waiting, Call Barring and Modify PDP Context all
fall under this category. Although we limit our discussion to Call
Waiting, it should be noted that experiments conducted on Call Bar-
ring exhibited identical performance characteristics.
Figure 9 shows the ﬂow of messages for a Call Waiting Enable
request. Unlike update_location, all Call Waiting enable re-
quests are directed to the HLR. The HLR acknowledges the receipt
of this request to both the client and the client’s VLR, which caches
whether or not call waiting is enabled for each client. This cached
information is only used if the mobile phone queries the network
to determine whether call waiting is currently activated. The same
operations occur when Call Waiting Disable requests are sent.
MSMSCVLRHLRActivate/Deactivate CWAcknowledgeAcknowledgeRelease Complete\FacilityActivate/Deactivate CWActivate/Deactivate CW 2 2.5 3 3.5 4 0 20 40 60 80 100 120 140 160 180 200SecondsTest NumberCall Waiting Enable 2 2.5 3 3.5 4 0 20 40 60 80 100 120 140 160 180 200SecondsTest NumberCall Waiting Disable228Figure 12: A messaging ﬂow for unconditional call forwarding.
Figures 10 and 11 show response times for Call Waiting Enable
and Disable requests. The response times are consistent, with ac-
tivation averaging 2.5 seconds for both functions with σenable =
0.13 and σdisable = 0.18. Given that both Call Waiting Enable and
Disable are both implemented by the update_subscriber_data
meta-commands, such results are expected. Of interest, however,
are the erratically appearing spikes in both graphs. Such devia-
tions indicate contention for a shared wireless resource known as
the Random Access Channel (RACH). Techniques for minimizing
such contention are discussed in Section 8.
Given an average time of 2.5 seconds and the additional 2 sec-
ond delay between transmissions, a throughput of 0.22 update_
subscriber_data requests can be made per second per device.
This represents a signiﬁcant improvement over update_location.
6.4 Insert/Delete Call Forwarding
This companion set of services allows a user to redirect incom-
ing phone calls to other devices. Such functionality is useful for
scenarios such as when a user does not wish to carry their mobile
device. The activation and deactivation of this service requires a
single exchange with the HLR. As depicted in Figure 12, call for-
warding information (e.g., both status and target number) is only
stored in the HLR. All requests to both activate and deactivate this
service must interact with the HLR directly.
Figures 13 and 14 demonstrate the response times for insert_
call_forwarding and delete_call_ forwarding meta-
commands, with respective averages of 2.7 seconds (σ = 0.16)
and 2.5 seconds (σ = 0.15). While such operations perform very
similar functions, the higher response time associated with the ac-
tivation of call forwarding can be explained via standards docu-
ments [1]. Speciﬁcally, insert_call_forwarding performs
additional checks and an extra database read before writing the tar-
get number.
These characteristics make insert_call_forwarding a good
candidate for attack trafﬁc. delete_call_ forwarding ap-
pears to be an even better candidate due to its lower response time.
However, delete_call_ forwarding messages can only be
sent if call forwarding is already enabled. Attempting to disable
call forwarding when it is not enabled results in an immediate error
which does not reach the HLR. This results in throughputs of 0.21
and 0.19 requests per second, respectively.
In spite of update_subscriber_data having a slightly faster
execution time, our experiments show that insert_call_forw-
arding is the most attractive command for an adversary to use.
Given the same amount of trafﬁc, the latter meta-command is more
expensive for the HLR to process on a per-message basis. Accord-
ingly, testing on the live network has allowed us to conﬁrm the
behavior observed when using TM1 and conﬁrm our selection of
insert_call_forwarding as the most effective request for
attacking an HLR.
Figure 13: Response times for CF enable requests.
Figure 14: Response times for CF disable requests.
7. ATTACK CHARACTERIZATION
Performing tests on a live network allows us to conﬁdently iden-
tify the meta-command whose execution creates the most signiﬁ-
cant processing by the HLR: insert_call_forwarding. How-
ever, such experiments do not tell us about the attack itself. This
section quantiﬁes the impact of such attacks on normal trafﬁc. By
identifying the number of requests needed to degrade the HLR’s
throughput beyond a certain point, we are ﬁnally able to realisti-
cally estimate the number of infected devices an adversary would
require to cause widespread outages.
We model these attacks by modifying TM1’s client code. Unlike
the single-threaded TM1 clients that attempt to maximize through-
put, our multi-threaded malicious clients can coordinate the trans-
mission of speciﬁc volumes of trafﬁc. This ﬂexibility allows us to
determine the impact of speciﬁc attack sizes. We are also able to
achieve higher throughput than the standard TM1 clients by aggres-
sively servicing requests without waiting for acknowledgements.
The architectural speciﬁcs of our malicious clients are discussed in
greater detail in the Appendix.
Note that we study the effects of attacks against both normal and
very high levels of benign trafﬁc. Almost counter-intuitively, in-
creasing the number of legitimate requests during an attack will of-
ten improve the success rate of legitimate clients. Such an increase
is the result of an increased probability that legitimate trafﬁc will
arrive between malicious requests. This phenomenon is observable
in our experiments.
Figure 15 shows the effect of an attack on an HLR running MySQL
supporting one million users. As previously mentioned, such sys-
tems are representative of many currently deployed HLRs. The
impact of attack on legitimate trafﬁc is signiﬁcant. The lower in-
tensity trafﬁc stream, which achieves a throughput of 2427 default
mix TPS, is reduced to a throughput of only 146 default mix TPS at
an attack rate of 2500 insert_call_forwarding TPS. The
MSMSCVLRHLRRegister CFURegister CFURegister CFUAcknowledgeAcknowledgeRelease Complete\Facility 2 2.5 3 3.5 4 0 20 40 60 80 100 120 140 160 180 200SecondsTest NumberCall Forwarding Enable 2 2.5 3 3.5 4 0 20 40 60 80 100 120 140 160 180 200SecondsTest NumberCall Forwarding Disable229rates are suspected on desktop machines, such levels of infected
devices remain realistic.
Assuming that malcode spreads through some means other than
only Bluetooth (e.g., browser-based exploits, executables), infec-
tion is unlikely to be limited to devices assigned only to a sin-
gle HLR. Accordingly, a 14.1% infection rate for a single HLR is
likely to reﬂect a similar rate of compromise for devices served by
all HLRs in the network. Given a coordinated attack signal, these
networks of compromised phones are more likely to detrimentally
affect communications on a nation-wide scale instead of just a sin-
gle area code. However, as we discuss in the next section, it is still
possible for bottlenecks in the wireless portion of the network to
prevent such an attack from being carried out.
8. AVOIDING WIRELESS BOTTLENECKS
With a realistic characterization of an attack on the wired por-
tion of a cellular network, a number of obstacles to the successful
execution of such an attack exist. In this section, we discuss a num-
ber of bottlenecks in the wireless portion of the network that may
impede attack trafﬁc. Understanding these choke points provides
valuable information about the geographic concentration of com-
promised nodes. We then examine issues of command and control
and consider both the reuse of traditional schemes and the operation
of unique cellular techniques.
8.1 Wireless Bottlenecks
The wireless portion of the network is susceptible to congestion
due to the limited capacity of two channels - the Random Access
Channel (RACH) and the Standalone Dedicated Control Channels
(SDCCH). These channels are used as follows: when attempting
to perform signaling with the network (i.e., initiate a service), a
mobile station will send an access request to the base station over
shared-access RACH. If available, the base station assigns an SD-
CCH, over which the signaling with the HLR itself is performed.
We explore the performance characteristics of these channels be-
low.
8.1.1 RACH Capacity
It is possible to experience contention for the RACH as this re-
source is shared between all devices in an area. We characterize
this contention by describing how access is regulated. GSM mul-
tiplexes trafﬁc on a single frequency through the use of time di-
vision multiple access (TDMA). Channels are superimposed over
timeslots, each of which lasts 0.577 ms, in a frame, which contains
eight timeslots and lasts 4.615 ms. Devices attempting to iniatite
signaling with the network need only gain access to a single RACH
timeslot, as all further communications will take place on dedicated
channels.
Access to the RACH is governed by the slotted ALOHA proto-
col, which provides a maximum throughput of:
S = Ge
−G
where throughput is measured as the percentage of successful trans-
missions, and G is the number of transmission attempts per time
slot, also known as the offered load. S is maximized at 37% when
G = 1.
The offered load, G, also known as ρ, is deﬁned as:
ρ =
λ
µ
where λ is the arrival rate in commands per second and µ−1 is the
channel hold time. Each request to transmit an attack command
Figure 15: An attack on an HLR running MySQL us-
ing TM1’s default mix of commands. In both scenarios,
throughput of legitimate trafﬁc is reduced by 93%.
Figure 16: An attack on an HLR running SolidDB us-
ing TM1’s Default Mix of commands. In both scenarios,
throughput of legitimate trafﬁc is reduced by 75%.
high intensity trafﬁc stream, whose throughput is 4132 default mix
TPS under normal conditions, is dropped to 273 default mix TPS
under a constant attack of 5000 insert_call_forwarding
TPS. For both cases, the throughput of legitimate trafﬁc is reduced
by more than 93% by the presence of attack trafﬁc.
The impact of attacks on a more capable HLR supporting one
million users is shown in Figure 16. While the system running
SolidDB is certainly capable of maintaining service during small
attacks, the performance of these systems can also be extensively
degraded. In the high trafﬁc case, throughput is reduced from 5424
to 1340 default mix TPS at an attack rate of 30,000 insert_call_
forwarding TPS. The lower trafﬁc scenario is similar impacted
and experiences a reduction in throughput from 3075 to 803 default
mix TPS at an attack rate of 30,000 insert_call_forwarding
TPS. These attacks represent a reduction in throughput of approxi-
mately 75% in both cases.
From these attacks, it now becomes possible to calculate the
number of devices an adversary requires to successfully launch an
attack against an HLR. Given the 4.7 second wait between the suc-
cessful transmission of AT commands in our experiments, an at-
tack on the HLR running the MySQL database under normal condi-
tions would require approximately 11,750 infected mobile phones.