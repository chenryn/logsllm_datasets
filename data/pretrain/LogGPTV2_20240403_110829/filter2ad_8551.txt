# 【系列分享】安卓Hacking Part 24：利用Inspeckage进行自动分析

#### 译文声明
本文是翻译文章，原文来源：infosecinstitute.com。译文仅供参考，具体内容表达及含义以原文为准。

#### 翻译者
[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)

#### 预估稿费
170 RMB

#### 投稿方式
发送邮件至 linwei#360.cn 或登录网页版在线投稿

### 概述
在上一篇文章中，我们探讨了如何使用AndBug来“钩住”给定的Android应用程序中的类和方法。本文将介绍另一个非常有用的工具——Inspeckage。作为Xposed模块，Inspeckage可用于Android应用程序的动态分析，在恶意软件分析和渗透测试领域表现出色。此外，Inspeckage还内置了一个网络服务器，并提供简洁美观的图形用户界面（GUI）。

### 配置Inspeckage
如果您已经熟悉Xposed Framework，那么设置Inspeckage将会非常简单：

1. 在已获取root权限的设备上下载并安装Xposed Framework。
2. 启动Xposed应用程序，如下图所示：
   ![启动Xposed应用](链接)
3. 点击“Modules”按钮，此时应该没有任何模块显示，因为我们还没有安装任何模块。
4. 下载并安装Inspeckage模块。您可以从以下链接下载或通过Xposed App的下载选项搜索Inspeckage：
   - [下载Inspeckage模块](链接)
   - 使用Xposed App搜索并安装Inspeckage，如下图所示：
     ![搜索Inspeckage](链接)
   - 点击“Download”按钮，下载完成后点击“Install”按钮进行安装。您需要接受Inspeckage请求的权限。
   - 安装成功后，您将看到如下图所示的提示：
     ![Inspeckage安装成功](链接)
5. 导航到Xposed应用程序，再次点击“Modules”，您应该能看到刚安装的新模块，如下图所示：
   ![已安装的模块](链接)
6. 勾选右侧的复选框，然后执行软重启以使更改生效。为此，导航到Xposed中的“Framework”功能，并点击“Soft Reboot”按钮，如下图所示：
   ![软重启](链接)
7. 重新启动后，点击Xposed模块中的Inspeckage模块，您将看到设备上安装的应用程序列表。选择一个待分析的应用程序，例如我创建的一个易受攻击的应用程序“Secure Store”。

### 使用Inspeckage
单击“Launch App”并浏览应用程序的所有功能。在运行目标应用程序时，Inspeckage将监视应用程序的各种调用。我们还可以通过指定类名和方法名来钩住方法，观察传递的参数及返回值。这方面的内容将在后面详细介绍。

此外，上述窗口中还有一些地址，可用于访问用户界面，如下图所示：
![访问用户界面](链接)

访问用户界面后，您会发现许多不同的部分，包括：

- **基本信息**：显示应用程序的基本信息，如备份属性、包名称和数据目录位置。点击“Tree View”按钮可以查看应用程序目录中的文件。
- **Package Information**：显示应用程序使用的组件清单。在此示例中，我们有一个导出的Activity和三个非导出的Activity。我们可以使用“Start Activity”功能强制启动Activity。
- **权限**：显示应用程序当前使用的权限。
- **SQLite**：显示应用程序是否执行了SQLite查询。如果有可用的提供者，可以使用“Query Provider”功能查询内容提供者。
- **Shared Preferences**：分别显示读调用和写调用。下图显示应用程序使用共享首选项在“userdata.xml”文件中存储“auth token”：
  ![Shared Preferences](链接)
- **WebView**：显示目标应用程序是否使用了WebView addJavaScriptInterface，这是一个JavaScript与Java交互的桥梁。如果应用程序的API级别小于17，则可以利用此功能执行远程代码。

### 添加钩子
跳转到“+ Hooks”标签页。这是一个非常有趣的部分，因为我们可以为特定的方法添加钩子，从而监视这些方法在运行时的行为。

#### 情形1
我们可以通过逆向工程获得类名和方法名。在浏览应用程序源代码时，我们发现“isUserAlreadyLoggedIn”是一个有趣的方法。让我们添加一个钩子，如下图所示：
![添加钩子](链接)
指定类名和方法名。如果您想钩住构造函数，也可以这样做。运行应用程序，当调用此方法时，您将看到相应的参数和返回值，如下图所示：
![方法调用](链接)
可以看到，该方法返回“false”，但没有参数。

#### 情形2
现在，我们来看一个带有方法参数的例子。删除现有的钩子并添加一个新的钩子，如下所示（您可以同时拥有多个钩子）。这里，“isLoggedIn”是方法名称，请注意类名也不同：
![新的钩子](链接)
完成上述操作后，再次运行应用程序，您将能够看到参数和返回值：
![带参数的方法调用](链接)
上图显示了传递给hooked方法的参数，返回值为“true”。

### 小结
毫无疑问，Inspeckage模块在Android应用程序的动态分析方面非常有用。无论是在恶意软件分析还是渗透测试中，Inspeckage都能显著提高工作效率。作为Xposed模块，Inspeckage提供了强大的检查能力，能够完全控制被分析的设备和目标应用程序。

### 相关链接
- [安卓 Hacking Part 1：应用组件攻防（连载）](http://bobao.360.cn/learning/detail/122.html)
- [安卓 Hacking Part 2：Content Provider攻防（连载）](http://bobao.360.cn/learning/detail/127.html)
- [安卓 Hacking Part 3：Broadcast Receivers攻防（连载）](http://bobao.360.cn/learning/detail/126.html)
- [安卓 Hacking Part 4：非预期的信息泄露（边信道信息泄露）](http://bobao.360.cn/learning/detail/133.html)
- [安卓 Hacking Part 5：使用JDB调试Java应用](http://bobao.360.cn/learning/detail/138.html)
- [安卓 Hacking Part 6：调试Android应用](http://bobao.360.cn/learning/detail/140.html)
- [安卓 Hacking Part 7：攻击WebView](http://bobao.360.cn/learning/detail/142.html)
- [安卓 Hacking Part 8：Root的检测和绕过](http://bobao.360.cn/learning/detail/144.html)
- [安卓 Hacking Part 9：不安全的本地存储：Shared Preferences](http://bobao.360.cn/learning/detail/150.html)
- [安卓 Hacking Part 10：不安全的本地存储](http://bobao.360.cn/learning/detail/152.html)
- [安卓 Hacking Part 11：使用Introspy进行黑盒测试](http://bobao.360.cn/learning/detail/154.html)
- [安卓 Hacking Part 12：使用第三方库加固Shared Preferences](http://bobao.360.cn/learning/detail/156.html)
- [安卓 Hacking Part 13：使用Drozer进行安全测试](http://bobao.360.cn/learning/detail/158.html)
- [安卓 Hacking Part 14：在没有root的设备上检测并导出app特定的数据](http://bobao.360.cn/learning/detail/161.html)
- [安卓 Hacking Part 15：使用备份技术黑掉安卓应用](http://bobao.360.cn/learning/detail/169.html)
- [安卓 Hacking Part 16：脆弱的加密](http://bobao.360.cn/learning/detail/174.html)
- [安卓 Hacking Part 17：破解Android应用](http://bobao.360.cn/learning/detail/179.html)
- [安卓 Hacking Part 18：逆向工程入门篇](http://bobao.360.cn/learning/detail/3648.html)
- [安卓 Hacking Part 19：NoSQL数据库不安全的数据存储](http://bobao.360.cn/learning/detail/3653.html)
- [安卓 Hacking Part 20：使用GDB在Android模拟器上调试应用程序](http://bobao.360.cn/learning/detail/3677.html)
- [安卓 Hacking Part 22：基于Cydia Substrate扩展的Android应用的钩子和补丁技术](http://bobao.360.cn/learning/detail/3679.html)
- [安卓 Hacking Part 23：基于AndBug的Android应用调试技术](http://bobao.360.cn/learning/detail/3681.html)