22 else
23
24
25 end
off ← (off − eleOffset);
return GETTYPE(eleType, off);
return eleType;
break;
eleType ← getArrayElementType(eleType);
before.main() will guide our static analyzer to create a
call graph correctly for ﬂow-sensitive pointer analysis.
IV. EVALUATION
Our evaluation demonstrates the effectiveness of TCD in de-
tecting type confusion bugs in C++ applications by addressing
the following two research questions (RQs).
world C++ applications at a low false positive rate?
• RQ1. Can TCD ﬁnd new type confusion bugs in real-
• RQ2. Can TCD overcome some limitations of dynamic
detectors in detecting type confusion bugs?
We have evaluated TCD using Qt [32], a widely used open-
source toolkit for creating GUIs and cross-platform software.
We consider all its seven Qt tools (totaling 526,385 lines of
C++ code), which share the same Qt base library. TCD has
found ﬁve type confusion bugs, including one reported in prior
work and four new ones.
To strike a balance between precision and scalability, our
pointer analysis is demand-driven. The budgets for ﬂow-
sensitivity and context-sensitivity are both conﬁgured as a
maximum of 10000 value-ﬂow edges traversed per points-to
query (Section III-B1). The maximum context length used for
realizing context-sensitivity is set to be 3, implying that the
calling context for a function is bounded by three call sites.
(cid:19)(cid:26)(cid:25)
TABLE VI
MAPPING FIVE BUGS IN {B1,··· , B5} TO SEVEN QT TOOLS
S T A T I C_C A S T(P T R), THE DESTINATION TYPE T AND THE
{A1,··· , A7} WHERE A BUG IS DETECTED. FOR EACH BUG CAUSED AT
DECLARED TYPE OF P T R ARE GIVEN. FOR B1, QMA PNO D E.N, WHERE
n ∈ Z, REPRESENTS AN INSTANTIATION OF CLASS TEMPLATE QMA PNO D E.
Bug ID
APP ID
A1
A1
A2
A2
A3
A3
A4
A4
A4
A4
A4
A5
A5
A6
A7
A7
Declared Type
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
QMapNodeBase
Destination Type
QMapNode.148
QMapNode.530
QMapNode.3766
QMapNode.86
QMapNode.86
QMapNode.3601
QMapNode.36
QMapNode.50
QMapNode.36
QMapNode.86
QMapNode.3365
QMapNode
QMapNode.25
QMapNode
QMapNode.86
QMapNode.4224
B1
B1
B1
B1
B1
B1
B1
B1
B1
B1
B1
B1
B1
B1
B1
B1
B2
B3
B4
B5
Our platform consists of a 3.20 GHz Intel Xeon(R) E5-1660
v4 CPU with 256 GB memory, running the Ubuntu OS. The
analysis time of a program is the average of 3 runs.
A. RQ1: Bug-Finding Ability
1) Effectiveness: As shown in Table III, TCD reports a total
of 39 warnings in the seven Qt tools identiﬁed as A1 – A7.
After manual inspection, we found 28 true positives (TPs)
and 11 false positives (FPs), achieving a low false positive
rate of 28.2%. These 28 true positives represent a total of
ﬁve distinct bugs identiﬁed as B1 – B5, which all reside
in the Qt base library used, including one known bug, B1,
reported by the dynamic detector HexType [6] (Table IV),
and four new bugs, B2 – B5, that are found in this paper
(Table V). Table VI provides a mapping from {B1,··· , B5}
to {A1,··· , A7}, showing all the Qt tools where a bug is
exposed. These are all the type confusion errors caused by
static_cast(ptr), where the destination type T
and the declared type of ptr are given in each case.
TABLE III
EXPERIMENTAL RESULTS FOR THE SEVEN Qt TOOLS
(TP: TRUE POSITIVES; FP: FALSE POSITIVES).
APP ID
A1
A2
A3
A4
A5
A6
A7
Total
Qt tool
moc
qdbuscpp2xml
qdbusxml2cpp
qlalr
qmake
rcc
uic
#TP
2
4
4
7
6
1
4
28
#FP
0
2
2
4
1
0
2
11
Analysis Time (secs)
171
4108
7247
4889
3415
109
6168
26107
ONE KNOWN TYPE CONFUSION BUG IN THE Qt BASE LIBRARY, REPORTED
IN PRIOR WORK (HEXTYPE [6]) BUT REDISCOVERED BY TCD.
TABLE IV
Bug ID
File Name
Function Template
B1
qmap.h
Node *end()
Line
216
A2/A3/A4/A5/A7 QJsonPrivate::Base QJsonPrivate::Object
A2/A3/A4/A5/A7 QJsonPrivate::Base QJsonPrivate::Array
QJsonPrivate::Base QJsonPrivate::Object
QJsonPrivate::Base QJsonPrivate::Object
A5
A5
1  struct Base{
2    ...
3  };
4  struct Derived: public Base{
5    ...
6  };
7  struct Header{
int tab;
8 
9 
int version;
10  Base *root() { return (Base *)(this + 1); }
11 };
12 int main(){
13  Header *h = (Header *) malloc(sizeof(Header) 
+ sizeof(Base) + const_sz + variable_sz);
14  Base *b = h->root();
15
16 }
...
static_cast(b); 
FOUR NEW TYPE CONFUSION BUGS DETECTED IN THE Qt BASE LIBRARY.
TABLE V
Fig. 8. The bug pattern for the new type confusion errors detected in Qt.
Bug ID
File
Function
B2
B3
B4
B5
qjson.cpp
qjson.cpp
qjsonobject.cpp
qjsonvalue.cpp
Data::compact()
Data::compact()
QJsonObject::compact()
QJsonValue::detach()
Line
91
110
1236
688
As shown in Table IV, B1 represents a bug in a function
template. It should be pointed out that function templates are
widely used in C++ applications. In this particular case, the
function template has been instantiated with different type
parameters, resulting in different functions in LLVM-IR. As
a result, this type confusion bug in the Qt base library has
appeared 16 times in all the seven Qt tools.
As shown in Table V, B2 – B5 are all type confusion bugs
appearing in ordinary functions. We have analyzed these four
new bugs and found that they are caused by ad hoc imple-
mentations of C++ inheritance. Their common bug pattern is
illustrated in Figure 8. In line 13, a memory block that is larger
than the size of class Base is allocated, where the sum of
const_sz and variable_sz represents the size of extra
memory needed by its derived classes.
The function root() (deﬁned in line 10) is called in line
14 to skip the Header object at the beginning of the memory
block allocated by malloc(). If the sum operation in line
13 does not synchronize with the modiﬁcation of the derived
classes of Base, a dangerous software security vulnerability
may arise. For example, software developers may add some
new ﬁelds in a derived class and forget to update the sum
(cid:19)(cid:26)(cid:26)
============================  Report  ==========================================
Bad static_cast: 
Where: 
Points-to: 
%"class.QJsonPrivate::Base"*   ====>   %"class.QJsonPrivate::Object"*
line: 688 file: qtbase/src/corelib/json/qjsonvalue.cpp
(1) line: 79 file: qtbase/src/corelib/json/qjson.cpp
(2) line: 840 file: qtbase/src/corelib/json/qjson_p.h
(3) line: 880 file: qtbase/src/corelib/json/qjson_p.h
================================================================================
//  qtbase/src/corelib/json/qjsonvalue.cpp
678 void QJsonValue::detach(){ 
683     QJsonPrivate::Data *x = d->clone(base);
687     d = x;
688     base = static_cast(d->header->root());
780 }
//  qtbase/src/corelib/json/qjson.cpp
58  void Data::compact(){  
77      int size = sizeof(Base) + reserve + base->length*sizeof(offset);
78      int alloc = sizeof(Header) + size;
79      Header *h = (Header *) malloc(alloc); 
82      Base *b = h->root();  
130  }
//  qtbase/src/corelib/json/qjson_p.h
612 class Object : public Base{
622 };
761 class Header {
765     Base *root() { return (Base *)(this + 1); }
766 };
834 inline Data(int reserved, QJsonValue::Type valueType){ 
839     alloc = sizeof(Header) + sizeof(Base) + reserved + sizeof(offset);
840     header = (Header *)malloc(alloc); 
849 }
865 Data *clone(Base *b, int reserve = 0){
867     int size = sizeof(Header) + b->size;
868     if (b == header->root() && ref.load() == 1 && alloc >= size + reserve)
869         return this;
871     if (reserve) {