for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br system ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c89, c99.
.sh notes
.br system ()
provides simplicity and convenience:
it handles all of the details of calling
.br fork (2),
.br execl (3),
and
.br waitpid (2),
as well as the necessary manipulations of signals;
in addition,
the shell performs the usual substitutions and i/o redirections for
.ir command .
the main cost of
.br system ()
is inefficiency:
additional system calls are required to create the process that
runs the shell and to execute the shell.
.pp
if the
.b _xopen_source
feature test macro is defined
(before including
.i any
header files),
then the macros described in
.br waitpid (2)
.rb ( wexitstatus (),
etc.) are made available when including
.ir  .
.pp
as mentioned,
.br system ()
ignores
.b sigint
and
.br sigquit .
this may make programs that call it
from a loop uninterruptible, unless they take care themselves
to check the exit status of the child.
for example:
.pp
.in +4n
.ex
while (something) {
    int ret = system("foo");
    if (wifsignaled(ret) &&
        (wtermsig(ret) == sigint || wtermsig(ret) == sigquit))
            break;
}
.ee
.in
.pp
according to posix.1, it is unspecified whether handlers registered using
.br pthread_atfork (3)
are called during the execution of
.br system ().
in the glibc implementation, such handlers are not called.
.pp
in versions of glibc before 2.1.3, the check for the availability of
.i /bin/sh
was not actually performed if
.i command
was null; instead it was always assumed to be available, and
.br system ()
always returned 1 in this case.
since glibc 2.1.3, this check is performed because, even though
posix.1-2001 requires a conforming implementation to provide
a shell, that shell may not be available or executable if
the calling program has previously called
.br chroot (2)
(which is not specified by posix.1-2001).
.pp
it is possible for the shell command to terminate with a status of 127,
which yields a
.br system ()
return value that is indistinguishable from the case
where a shell could not be executed in the child process.
.\"
.ss caveats
do not use
.br system ()
from a privileged program
(a set-user-id or set-group-id program, or a program with capabilities)
because strange values for some environment variables
might be used to subvert system integrity.
for example,
.br path
could be manipulated so that an arbitrary program
is executed with privilege.
use the
.br exec (3)
family of functions instead, but not
.br execlp (3)
or
.br execvp (3)
(which also use the
.b path
environment variable to search for an executable).
.pp
.br system ()
will not, in fact, work properly from programs with set-user-id or
set-group-id privileges on systems on which
.i /bin/sh
is bash version 2: as a security measure, bash 2 drops privileges on startup.
(debian uses a different shell,
.br dash (1),
which does not do this when invoked as
.br sh .)
.pp
any user input that is employed as part of
.i command
should be
.i carefully
sanitized, to ensure that unexpected shell commands or command options
are not executed.
such risks are especially grave when using
.br system ()
from a privileged program.
.sh bugs
.\" [bug 211029](https://bugzilla.kernel.org/show_bug.cgi?id=211029)
.\" [glibc bug](https://sourceware.org/bugzilla/show_bug.cgi?id=27143)
.\" [posix bug](https://www.austingroupbugs.net/view.php?id=1440)
if the command name starts with a hyphen,
.br sh (1)
interprets the command name as an option,
and the behavior is undefined.
(see the
.b \-c
option to
.br sh (1).)
to work around this problem,
prepend the command with a space as in the following call:
.pp
.in +4n
.ex
    system(" \-unfortunate\-command\-name");
.ee
.in
.sh see also
.br sh (1),
.br execve (2),
.br fork (2),
.br sigaction (2),
.br sigprocmask (2),
.br wait (2),
.br exec (3),
.br signal (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\"  copyright (c) 2003  davide libenzi
.\"  davide libenzi 
.\" and copyright 2009, 2014, 2016, 2018, 2019 michael kerrisk 
.\"
.\" %%%license_start(gplv2+_sw_3_para)
.\"  this program is free software; you can redistribute it and/or modify
.\"  it under the terms of the gnu general public license as published by
.\"  the free software foundation; either version 2 of the license, or
.\"  (at your option) any later version.
.\"
.\"  this program is distributed in the hope that it will be useful,
.\"  but without any warranty; without even the implied warranty of
.\"  merchantability or fitness for a particular purpose.  see the
.\"  gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th epoll_ctl 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
epoll_ctl \- control interface for an epoll file descriptor
.sh synopsis
.nf
.b #include 
.pp
.bi "int epoll_ctl(int " epfd ", int " op ", int " fd \
", struct epoll_event *" event );
.fi
.sh description
this system call is used to add, modify, or remove
entries in the interest list of the
.br epoll (7)
instance
referred to by the file descriptor
.ir epfd .
it requests that the operation
.i op
be performed for the target file descriptor,
.ir fd .
.pp
valid values for the
.i op
argument are:
.tp
.b epoll_ctl_add
add an entry to the interest list of the epoll file descriptor,
.ir epfd .
the entry includes the file descriptor,
.ir fd ,
a reference to the corresponding open file description (see
.br epoll (7)
and
.br open (2)),
and the settings specified in
.ir event .
.tp
.b epoll_ctl_mod
change the settings associated with
.ir fd
in the interest list to the new settings specified in
.ir event .
.tp
.b epoll_ctl_del
remove (deregister) the target file descriptor
.i fd
from the interest list.
the
.i event
argument is ignored and can be null (but see bugs below).
.pp
the
.i event
argument describes the object linked to the file descriptor
.ir fd .
the
.i struct epoll_event
is defined as:
.pp
.in +4n
.ex
typedef union epoll_data {
    void        *ptr;
    int          fd;
    uint32_t     u32;
    uint64_t     u64;
} epoll_data_t;
struct epoll_event {
    uint32_t     events;      /* epoll events */
    epoll_data_t data;        /* user data variable */
};
.ee
.in
.pp
the
.i data
member of the
.i epoll_event
structure specifies data that the kernel should save and then return (via
.br epoll_wait (2))
when this file descriptor becomes ready.
.pp
the
.i events
member of the
.i epoll_event
structure is a bit mask composed by oring together zero or more of
the following available event types:
.tp
.b epollin
the associated file is available for
.br read (2)
operations.
.tp
.b epollout
the associated file is available for
.br write (2)
operations.
.tp
.br epollrdhup " (since linux 2.6.17)"
stream socket peer closed connection,
or shut down writing half of connection.
(this flag is especially useful for writing simple code to detect
peer shutdown when using edge-triggered monitoring.)
.tp
.b epollpri
there is an exceptional condition on the file descriptor.
see the discussion of
.b pollpri
in
.br poll (2).
.tp
.b epollerr
error condition happened on the associated file descriptor.
this event is also reported for the write end of a pipe when the read end
has been closed.
.ip
.br epoll_wait (2)
will always report for this event; it is not necessary to set it in
.ir events
when calling
.br epoll_ctl ().
.tp
.b epollhup
hang up happened on the associated file descriptor.
.ip
.br epoll_wait (2)
will always wait for this event; it is not necessary to set it in
.ir events
when calling
.br epoll_ctl ().
.ip
note that when reading from a channel such as a pipe or a stream socket,
this event merely indicates that the peer closed its end of the channel.
subsequent reads from the channel will return 0 (end of file)
only after all outstanding data in the channel has been consumed.
.tp
.b epollet
requests edge-triggered notification for the associated file descriptor.
the default behavior for
.b epoll
is level-triggered.
see
.br epoll (7)
for more detailed information about edge-triggered and
level-triggered notification.
.ip
this flag is an input flag for the
.i event.events
field when calling
.br epoll_ctl ();
it is never returned by
.br epoll_wait (2).
.tp
.br epolloneshot " (since linux 2.6.2)"
requests one-shot notification for the associated file descriptor.
this means that after an event notified for the file descriptor by
.br epoll_wait (2),
the file descriptor is disabled in the interest list and no other events
will be reported by the
.b epoll
interface.
the user must call
.br epoll_ctl ()
with
.b epoll_ctl_mod
to rearm the file descriptor with a new event mask.
.ip
this flag is an input flag for the
.i event.events
field when calling
.br epoll_ctl ();
it is never returned by
.br epoll_wait (2).
.tp
.br epollwakeup " (since linux 3.5)"
.\" commit 4d7e30d98939a0340022ccd49325a3d70f7e0238
if
.b epolloneshot
and
.b epollet
are clear and the process has the
.b cap_block_suspend
capability,
ensure that the system does not enter "suspend" or
"hibernate" while this event is pending or being processed.
the event is considered as being "processed" from the time
when it is returned by a call to
.br epoll_wait (2)
until the next call to
.br epoll_wait (2)
on the same
.br epoll (7)
file descriptor,
the closure of that file descriptor,
the removal of the event file descriptor with
.br epoll_ctl_del ,
or the clearing of
.b epollwakeup
for the event file descriptor with
.br epoll_ctl_mod .
see also bugs.
.ip
this flag is an input flag for the
.i event.events
field when calling
.br epoll_ctl ();
it is never returned by
.br epoll_wait (2).
.tp
.br epollexclusive " (since linux 4.5)"
sets an exclusive wakeup mode for the epoll file descriptor that is being
attached to the target file descriptor,
.ir fd .
when a wakeup event occurs and multiple epoll file descriptors
are attached to the same target file using
.br epollexclusive ,
one or more of the epoll file descriptors will receive an event with
.br epoll_wait (2).
the default in this scenario (when
.br epollexclusive
is not set) is for all epoll file descriptors to receive an event.
.br epollexclusive
is thus useful for avoiding thundering herd problems in certain scenarios.
.ip
if the same file descriptor is in multiple epoll instances,
some with the
.br epollexclusive
flag, and others without, then events will be provided to all epoll
instances that did not specify
.br epollexclusive ,
and at least one of the epoll instances that did specify
.br epollexclusive .
.ip
the following values may be specified in conjunction with
.br epollexclusive :
.br epollin ,
.br epollout ,
.br epollwakeup ,
and
.br epollet .
.br epollhup
and
.br epollerr
can also be specified, but this is not required:
as usual, these events are always reported if they occur,
regardless of whether they are specified in
.ir events .
attempts to specify other values in
.i events
yield the error
.br einval .
.ip
.b epollexclusive
may be used only in an
.b epoll_ctl_add
operation; attempts to employ it with
.b epoll_ctl_mod
yield an error.
if
.b epollexclusive
has been set using
.br epoll_ctl (),
then a subsequent
.b epoll_ctl_mod
on the same
.ir epfd ",\ " fd
pair yields an error.
a call to
.br epoll_ctl ()
that specifies
.b epollexclusive
in
.i events
and specifies the target file descriptor
.i fd
as an epoll instance will likewise fail.
the error in all of these cases is
.br einval .
.ip
the
.br epollexclusive
flag is an input flag for the
.i event.events
field when calling
.br epoll_ctl ();
it is never returned by
.br epoll_wait (2).
.sh return value
when successful,
.br epoll_ctl ()
returns zero.
when an error occurs,
.br epoll_ctl ()
returns \-1 and
.i errno
is set to indicate the error.
.sh errors
.tp
.b ebadf
.i epfd
or
.i fd
is not a valid file descriptor.
.tp
.b eexist
.i op
was
.br epoll_ctl_add ,
and the supplied file descriptor
.i fd
is already registered with this epoll instance.
.tp
.b einval
.i epfd
is not an
.b epoll
file descriptor,
or
.i fd
is the same as
.ir epfd ,
or the requested operation
.i op
is not supported by this interface.
.tp
.b einval
an invalid event type was specified along with
.b epollexclusive
in
.ir events .
.tp
.b einval
.i op
was
.b epoll_ctl_mod
and
.ir events
included
.br epollexclusive .
.tp
.b einval
.i op
was
.b epoll_ctl_mod
and the
.br epollexclusive
flag has previously been applied to this
.ir epfd ",\ " fd
pair.
.tp
.b einval
.br epollexclusive
was specified in
.ir event
and
.i fd