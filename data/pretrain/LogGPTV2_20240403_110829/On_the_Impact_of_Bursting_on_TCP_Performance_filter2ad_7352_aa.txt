# Title: On the Impact of Bursting on TCP Performance

## Authors
- Ethan Blanton, Purdue University (ethan.blanton@purdue.edu)
- Mark Allman, ICSI/ICIR (mark.allman@icir.org)

## Abstract
Periodically within the transport protocol research community, the idea of introducing a burst mitigation strategy is proposed. In this paper, we evaluate the prevalence and implications of bursts in real TCP traffic to better inform the decision on whether TCP’s congestion control algorithms should incorporate some form of burst suppression. After analyzing traffic from three networks, we find that bursts are relatively rare, and only large bursts (of hundreds of segments) cause significant loss in practice.

## 1. Introduction
Within the transport protocol research community, there is recurring interest in incorporating burst mitigation into standard congestion control algorithms. Transport protocols can naturally send line-rate bursts of segments for various reasons, such as the receipt of an acknowledgment. Studies have shown that these line-rate bursts can lead to performance issues by causing a rapid buildup of queued segments at a bottleneck link, ultimately resulting in dropped segments and reduced transmission rates when the queue is exhausted.

In this paper, we focus on the study of micro-bursts and exclude macro-bursts from consideration. A micro-burst is a group of segments transmitted at line rate in response to a single event, typically the receipt of an acknowledgment. A macro-burst, on the other hand, can span larger time scales. For example, during slow start, TCP increases the congestion window (and thus the transmission rate) exponentially from one round-trip to the next, which increases the macro-burstiness of the connection. However, the micro-burstiness remains unchanged as TCP sends approximately 2–3 segments per received acknowledgment (ACK), depending on whether the receiver employs delayed ACKs.

An example of naturally occurring bursting behavior is provided in [Hay97], which shows that TCP connections over long-delay satellite links with advertised windows precisely tuned to the appropriate size for the delay and bandwidth of the network path suffer from burst-induced congestion when loss occurs. The measurements and discussions in this paper apply to TCP, but also to SCTP [SXM+00] and DCCP’s [KHF04] CCID 2 [FK04], as they use similar congestion control techniques.

Ideally, a TCP connection should be able to send both retransmissions and new data segments during a loss recovery phase [FF96]. However, if there is no room in the advertised window, new segments cannot be sent during loss recovery. Upon exiting loss recovery (via a large cumulative ACK), TCP’s window will slide, and a line-rate burst of segments will be transmitted. [Hay97] shows that this burst, which is roughly half the size of the congestion window before loss, can overwhelm the queue at the bottleneck link, causing further loss and additional performance degradation. [Hay97] also demonstrates that this bursting situation applies to several TCP variants (Reno [APS99], NewReno [Hoe96, FF96], FACK [MM96], etc.). However, [Hay97] provides lab-based experiments and does not offer insight into how often such situations arise in the Internet. In this paper, we assess the degree to which these micro-bursting situations occur in real-world settings to inform a decision on whether TCP should mitigate micro-bursting. While out of scope for this paper, [AB04] compares various burst mitigation techniques.

Micro-bursts can be caused by several conditions, including:
- **ACK Loss:** TCP uses a cumulative acknowledgment mechanism that is robust to ACK loss. However, ACK loss causes TCP’s window to slide by a greater amount less frequently, potentially triggering longer than desired bursts.
- **Application Layer Dynamics:** The application provides TCP with a stream of data to transmit. If the application provides data in a bursty fashion, TCP may transmit micro-bursts into the network. An operating system’s socket buffer can absorb and smooth out some application burstiness, especially in bulk transfer applications. However, it does not always help in applications that asynchronously obtain data to send over the network.
- **ACK Reordering:** Reordered ACKs cause an ACK stream that appears similar to a stream containing ACK loss. If a cumulative ACK “passes” earlier ACKs, the later ACK (which now arrives earlier) triggers the transmission of a micro-burst, while the earlier ACKs (arriving later) are discarded as “stale.”

The causes of bursting are detailed in [JD03] and [AB04] and are not specific to any particular TCP variant but apply to all common TCP versions (Reno, NewReno, SACK, etc.). [JD03] also illustrates the impact of micro- and macro-bursts on aggregate network traffic, finding that these source-level bursts create scaling in short timescales and can cause increased queuing delays in intermediate nodes along a network path. In contrast, this paper focuses on characterizing bursts and determining their frequency to inform a discussion on whether TCP should prevent bursts from a performance standpoint, as proposed in the literature (e.g., [FF96, HTH01]).

## 2. Measurement Methodology
We define a “burst” for the remainder of the paper as a sequence of at least 4 segments sent between two successive ACKs (i.e., a “micro-burst”). This definition comes from the specification of TCP’s congestion control algorithms [APS99], which call for the transmission of 2–3 segments at line-rate on each ACK during slow start and roughly once every 1–2 round-trip times (RTT) in congestion avoidance. Therefore, micro-bursts of 3 or fewer segments are considered reasonable and common in the network. Bursts of more than 3 segments are deemed “unexpected” and are caused by network and application dynamics rather than the specification of the congestion control algorithms. These unexpected bursts are the impetus for proposals to mitigate TCP’s burstiness and are the focus of our study.

In principle, this definition of a burst is sound. However, in analyzing the data, we found a significant vantage point problem in simply using the number of segments that arrive between two successive ACKs. As shown in [Pax97], there is a general problem in TCP analysis with matching particular ACKs with the packets they liberate, even when the monitoring point is the end host involved in the TCP connection. When the monitoring point is not the end host, the problem is exacerbated. Table 1 illustrates this issue, showing the different order of events observed inside the TCP stack of the end host and at our monitor point.

To address this, we accumulate the ACK information. For instance, in Table 1, since two ACKs without any subsequent data segments are recorded, our analysis allows up to 6 data segments to be sent before determining a burst occurred. This heuristic does not always work, as it can misestimate the bursting characteristic present on the network. In our analysis, if we note more than 3N segments sent in response to N ACKs, we determine a burst has been transmitted. The length of this burst is simply recorded as the number of segments noted. This is an overestimate of the burst size, but as shown in the following sections, this small vantage point problem is unlikely to greatly impact the results because the difference between bursts of size M and bursts of size M ± x for some small value of x (e.g., 1–10) is negligible.

To assess the prevalence and impact of micro-bursting, we gathered four sets of packet traces from three different networks. We analyze those connections involving web servers on the enterprise network, focusing on local web servers' sending patterns rather than remote servers responding to local web clients' requests. The characteristics of the four trace files used in our study are given in Table 2. The first trace, denoted Anon, consists of roughly 26 hours of web traffic recorded near web servers at a biology-related research facility that asked not to be identified. The second trace represents roughly 11 hours of web server traffic at the Lawrence Berkeley National Laboratory (LBNL) in Berkeley, CA, USA. The final two datasets represent requests to a single web server at the International Computer Science Institute (ICSI), also in Berkeley, during two different two-week periods in 2004.

These packet traces are analyzed with a custom-written tool called `conninfo`, which tracks the number of data segments sent between two subsequent pure acknowledgment (ACK) segments. In addition to recording micro-burst sizes, `conninfo` records which (if any) segments within a burst are retransmitted. It also records several ancillary metrics such as the total data transfer size and the duration of the connection. `Conninfo` attempts to process each connection in the dataset, but a small fraction of connections were removed due to strange behavior. As shown in Table 2, the fraction of connections removed is relatively small, and we do not believe this biases the overall results presented in this paper.

## 3. Characterizing Bursts
In this section, we provide a characterization of the bursts observed in the traces we studied. Figure 1 shows the distributions of burst sizes in each of the datasets in terms of segments, bytes, and time. Figure 1(a) shows that the distribution of burst sizes when measured in terms of segments is similar across all datasets, with over 90% of the bursts being less than 15 segments in length. Figure 1(b) shows the burst size in terms of bytes per burst, which generally follows from the segment-based distribution if 1500-byte segments are assumed. While the LBNL and ICSI datasets are similar in terms of byte-based burst size, the Anon distribution indicates smaller bursts. Since we did not observe smaller bursts in the Anon dataset when measuring in terms of segments, it appears that the segment sizes used in the Anon network are generally smaller than at LBNL and ICSI. We generated packet size distributions for all networks and found a clear mode of 20% in the Anon dataset at 576 bytes, which is not present in the ICSI or LBNL datasets. Otherwise, the distributions of packet sizes are roughly the same, explaining the discrepancy in Figure 1.

Figure 1(c) shows the distribution of the amount of elapsed time covered by each burst, confirming that the vast majority of bursts happen within a short (less than 10 ms) window of time. This verifies that our methodology of checking data between subsequent ACKs and our analysis tool are working as intended. While we found bursts that encompass a fairly long period of time (over a second), these are the exception rather than the rule and appear to be artifacts of network dynamics mixing with application sending patterns that are difficult to systematically detect. Therefore, we believe that our analysis techniques are overall sound.

Next, we turn our attention to the prevalence of bursts. Figure 2 shows the distribution of the number of bursts per connection in our four datasets. The figure shows that the burst prevalence is roughly the same across datasets, with over 75% of the connections across all datasets experiencing no bursts of 4 or more segments. However, many of the connections that did not burst could not because of the limited amount of data sent or because TCP’s congestion window never opened far enough to allow 4 or more segments to be transmitted.

## 4. Implications of Observed Micro-Bursts
In this section, we investigate the implications of the observed micro-bursts. We analyze the impact of these bursts on network performance, including the likelihood of packet loss, the effect on queuing delays, and the overall throughput of the connections. Our findings suggest that while micro-bursts are relatively rare, they can still have a significant impact on network performance, particularly in high-latency or high-bandwidth environments. We discuss the potential benefits and drawbacks of implementing burst mitigation mechanisms in TCP and provide recommendations for future research in this area.

## 5. Conclusion
In conclusion, our analysis of real-world TCP traffic reveals that micro-bursts are relatively rare, and only large bursts (of hundreds of segments) cause significant loss in practice. We find that the majority of connections experience no bursts of 4 or more segments, and many of the connections that do not burst are constrained by the limited amount of data sent or the limited opening of the congestion window. Our findings suggest that while burst mitigation mechanisms may be beneficial in certain scenarios, they may not be necessary for most typical TCP connections. Future research should focus on developing more sophisticated burst detection and mitigation techniques, particularly for high-latency and high-bandwidth environments where the impact of bursts can be more pronounced.

### Acknowledgments
We would like to thank [Names of people and organizations who contributed to the research, if any].

### References
- [APS99] Allman, M., Paxson, V., and Stevens, W. R.: TCP Congestion Control. RFC 2581, April 1999.
- [Bra89] Braden, R.: Requirements for Internet Hosts - Communication Layers. RFC 1122, October 1989.
- [FF96] Floyd, S. and Fall, K.: Promoting the Use of End-to-End Congestion Control in the Internet. IEEE/ACM Transactions on Networking, Vol. 7, No. 4, August 1999.
- [Hay97] Hayes, J. R.: Understanding TCP/IP: A Clear and Comprehensive Guide to TCP/IP Networking. Macmillan, 1997.
- [Hoe96] Hoe, J. C.: Improving the Start-up Behavior of a Congestion Control Scheme for TCP. ACM SIGCOMM, 1996.
- [HTH01] He, T., Tan, K., and Huang, Y.: TCP-Friendly Window Management for High-Speed Networks. IEEE/ACM Transactions on Networking, Vol. 9, No. 4, August 2001.
- [JD03] Jain, R. and Durresi, A.: Modeling and Analysis of Network Traffic. John Wiley & Sons, 2003.
- [KHF04] Kohler, E., Handley, M., and Floyd, S.: Datagram Congestion Control Protocol (DCCP). RFC 4340, March 2006.
- [MM96] Mathis, M. and Mahdavi, J.: Forward Acknowledgment: Refining TCP Congestion Control. Proceedings of SIGCOMM, 1996.
- [MHK+03] Mogul, J. C., Heidemann, J., and Kompella, R. R.: Packet Reordering is Not Pathological. Proceedings of SIGCOMM, 2003.
- [Pax97] Paxson, V.: End-to-End Internet Packet Dynamics. IEEE/ACM Transactions on Networking, Vol. 7, No. 3, June 1999.
- [SXM+00] Stewart, R., Xie, Q., Morneault, K., Sharp, C., Schwarzbauer, H., Taylor, T., Rytina, I., Kalla, M., Zhang, L., and Deering, S.: Stream Control Transmission Protocol. RFC 2960, October 2000.
- [ZKFP03] Zhi, L., Kurose, J., Fu, X., and Pappas, N.: On the Impact of Data Segment Reordering on TCP Performance. IEEE/ACM Transactions on Networking, Vol. 11, No. 5, October 2003.