understand but is cumbersome for computers because they have to explicitly 
compare magnitudes and signs for arithmetic operations. 
Ones complement Again, the sign bit is 1 if the number is negative and 0 if the 
number is positive. Positive values can be read directly from the value bits. 
However, negative values can't be read directly; the whole number must be 
negated first. In ones complement, a number is negated by inverting all its 
bits. To find the value of a negative number, you have to invert its bits. This 
system works better for the machine, but there are still complications with 
addition, and, like sign and magnitude, it has the amusing ambiguity of having 
two values of zero: positive zero and negative zero. 
Twos complement The sign bit is 1 if the number is negative and 0 if the 
number is positive. You can read positive values directly from the value bits, 
but you can't read negative values directly; you have to negate the whole 
number first. In twos complement, a number is negated by inverting all the 
bits and then adding one. This works well for the machine and removes the 
ambiguity of having two potential values of zero. 
Integers are usually represented internally by using twos complement, especially in 
modern computers. As mentioned, twos complement encodes positive values in 
standard binary encoding. The range of positive values that can be represented is 
based on the number of value bits. A twos complement 8-bit signed integer has 7 
value bits and 1 sign bit. It can represent the positive values 0 to 127 in the 7 value 
bits. All negative values represented with twos complement encoding require the sign 
bit to be set. The values from -128 to -1 can be represented in the value bits when the 
sign bit is set, thus allowing the 8-bit signed integer to represent -128 to 127. 
For arithmetic, the sign bit is placed in the most significant bit of the data type. In 
general, a signed twos complement number of width X can represent the range of 
integers from -2X-1 to 2X-1-1. Table 6-1 shows the typical ranges of twos complement 
integers of varying sizes. 
Table 6-1. Maximum and Minimum Values for Integers 
8-bit 16-bit 32-bit 
64-bit 
Minimum value (signed) 
-128 -32768 -2147483648 -9223372036854775808 
Maximum value (signed) 
127 
32767 
2147483647 
9223372036854775807 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
221 
Table 6-1. Maximum and Minimum Values for Integers 
8-bit 16-bit 32-bit 
64-bit 
Minimum value (unsigned) 0 
0 
0 
0 
Maximum value 
(unsigned) 
255 
65535 
4294967295 
18446744073709551615 
As described previously, you negate a twos complement number by inverting all the 
bits and adding one. Listing 6-1 shows how you obtain the representation of -15 by 
inverting the number 15, and then how you figure out the value of an unknown 
negative bit pattern. 
Listing 6-1. Twos Complement Representation of -15 
0000 1111  binary representation for 15 
1111 0000  invert all the bits 
0000 0001  add one 
1111 0001  twos complement representation for -15 
1101 0110  unknown negative number 
0010 1001  invert all the bits 
0000 0001  add one 
0010 1010  twos complement representation for 42 
             original number was -42 
Byte Order 
There are two conventions for ordering bytes in modern architectures: big endian 
and little endian. These conventions apply to data types larger than 1 byte, such as 
a short int or an int. In the big-endian architecture, the bytes are located in memory 
starting with the most significant byte and ending with the least significant byte. 
Little-endian architectures, however, start with the least significant byte and end with 
the most significant. For example, you have a 4-byte integer with the decimal value 
12345. In binary, it's 11000000111001. This integer is located at address 500. On a 
big-endian machine, it's represented in memory as the following: 
Address 500: 00000000 
Address 501: 00000000 
Address 502: 00110000 
Address 503: 00111001 
On a little-endian machine, however, it's represented this way: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
222 
Address 500: 00111001 
Address 501: 00110000 
Address 502: 00000000 
Address 503: 00000000 
Intel machines are little endian, but RISC machines, such as SPARC, tend to be big 
endian. Some machines are capable of dealing with both encodings natively. 
Common Implementations 
Practically speaking, if you're talking about a modern, 32-bit, twos complement 
machine, what can you say about C's basic types and their representations? In 
general, none of the integer types have any padding bits, so you don't need to worry 
about that. Everything is going to use twos complement representation. Bytes are 
going to be 8 bits long. Byte order varies; it's little endian on Intel machines but more 
likely to be big endian on RISC machines. 
The char type is likely to be signed by default and take up 1 byte. The short type takes 
2 bytes, and int takes 4 bytes. The long type is also 4 bytes, and long long is 8 bytes. 
Because you know integers are twos complement encoded and you know their 
underlying sizes, determining their minimum and maximum values is easy. Table 6-2 
summarizes the typical sizes for ranges of integer data types on a 32-bit machine. 
Table 6-2. Typical Sizes and Ranges for Integer Types on 32-Bit Platforms 
Type 
Width 
(in Bits) 
Minimum Value 
Maximum Value 
signed char 8 
-128 
127 
unsigned 
char 
8 
0 
255 
short 
16 
-32,768 
32,767 
unsigned 
short 
16 
0 
65,535 
Int 
32 
-2,147,483,648 
2,147,483,647 
unsigned 
int 
32 
0 
4,294,967,295 
long 
32 
-2,147,483,648 
2,147,483,647 
unsigned 
long 
32 
0 
4,294,967,295 
long long 
64 
-9,223,372,036,854,775,808 9,223,372,036,854,775,807 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
223 
Table 6-2. Typical Sizes and Ranges for Integer Types on 32-Bit Platforms 
Type 
Width 
(in Bits) 
Minimum Value 
Maximum Value 
unsigned 
long long 
64 
0 
18,446,744,073,709,551,615 
What can you expect in the near future as 64-bit systems become more prevalent? 
The following list describes a few type systems that are in use today or have been 
proposed: 
ILP32 int, long, and pointer are all 32 bits, the current standard for most 32-bit 
computers. 
ILP32LL int, long, and pointer are all 32 bits, and a new typelong longis 64 bits. 
The long long type is new to C99. It gives C a type that has a minimum width 
of 64 bits but doesn't change any of the language's fundamentals. 
LP64 long and pointer are 64 bits, so the pointer and long types have changed 
from 32-bit to 64-bit values. 
ILP64 int, long, and pointer are all 64 bits. The int type has been changed to a 
64-bit type, which has fairly significant implications for the language. 
LLP64 pointers and the new long long type are 64 bits. The int and long types 
remain 32-bit data types. 
Table 6-3 summarizes these type systems briefly. 
Table 6-3. 64-Bit Integer Type Systems 
Type 
ILP32 ILP32LL LP64 ILP64 LLP64 
char 
8 
8 
8 
8 
8 
short 
16 
16 
16 
16 
16 
int 
32 
32 
32 
64 
32 
long 
32 
32 
64 
64 
32 
long long N/A 
64 
64 
64 
64 
pointer 
32 
32 
64 
64 
64 
As you can see, the typical data type sizes match the ILP32LL model, which is what 
most compilers adhere to on 32-bit platforms. The LP64 model is the de facto 
standard for compilers that generate code for 64-bit platforms. As you learn later in 
this chapter, the int type is a basic unit for the C language; many things are converted 
to and from it behind the scenes. Because the int data type is relied on so heavily for 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
224 
expression evaluations, the LP64 model is an ideal choice for 64-bit systems because 
it doesn't change the int data type; as a result, it largely preserves the expected C 
type conversion behavior. 
7.2.4 Arithmetic Boundary Conditions 
You've learned that C's basic integer types have minimum and maximum possible 
values determined by their underlying representation in memory. (Typical ranges for 
32-bit twos complement architectures were presented in Table 6-2(? [????.]).) So, 
now you can explore what can happen when you attempt to traverse these 
boundaries. Simple arithmetic on a variable, such as addition, subtraction, or 
multiplication, can result in a value that can't be held in that variable. Take a look at 
this example: 
unsigned int a; 
a=0xe0000020; 
a= 
You know that a can hold a value of 0xE0000020 without a problem; Table 6-2(? 
[????.]) lists the maximum value of an unsigned 32-bit variable as 4,294,967,295, or 
0xFFFFFFFF. However, when 0x20000020 is added to 0xE0000000, the result, 
0x100000040, can't be held in a. When an arithmetic operation results in a value 
higher than the maximum possible representable value, it's called a numeric 
overflow condition. 
Here's a slightly different example: 
unsigned int a; 
a=0; 
a= 
The programmer subtracts 1 from a, which has an initial value of 0. The resulting 
value, -1, can't be held in a because it's below the minimum possible value of 0. This 
result is known as a numeric underflow condition. 
Note 
Numeric overflow conditions are also referred to in secure-programming literature as 
numeric overflows, arithmetic overflows, integer overflows, or integer wrapping. 
Numeric underflow conditions can be referred to as numeric underflows, arithmetic 
underflows, integer underflows, or integer wrapping. Specifically, the terms 
"wrapping around a value" or "wrapping below zero" might be used. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
225 
Although these conditions might seem as though they would be infrequent or 
inconsequential in real code, they actually occur quite often, and their impact can be 
quite severe from a security perspective. The incorrect result of an arithmetic 
operation can undermine the application's integrity and often result in a compromise 
of its security. A numeric overflow or underflow that occurs early in a block of code 
can lead to a subtle series of cascading faults; not only is the result of a single 
arithmetic operation tainted, but every subsequent operation using that tainted result 
introduces a point where an attacker might have unexpected influence. 
Note 
Although numeric wrapping is common in most programming languages, it's a 
particular problem in C/C++ programs because C requires programmers to perform 
low-level tasks that more abstracted high-level languages handle automatically. 
These tasks, such as dynamic memory allocation and buffer length tracking, often 
require arithmetic that might be vulnerable. Attackers commonly leverage arithmetic 
boundary conditions by manipulating a length calculation so that an insufficient 
amount of memory is allocated. If this happens, the program later runs the risk of 
manipulating memory outside the bounds of the allocated space, which often leads to 
an exploitable situation. Another common attack technique is bypassing a length 
check that protects sensitive operations, such as memory copies. This chapter offers 
several examples of how underflow and overflow conditions lead to exploitable 
vulnerabilities. In general, auditors should be mindful of arithmetic boundary 
conditions when reviewing code and be sure to consider the possible implications of 
the subtle, cascading nature of these flaws. 
In the following sections, you look at arithmetic boundary conditions affecting 
unsigned integers and then examine signed integers. 
Warning 
An effort has been made to use int and unsigned int types in examples to avoid code 
that's affected by C's default type promotions. This topic is covered in "Type 
Conversions(? [????.])" later in the chapter, but for now, note that whenever you use 
a char or short in an arithmetic expression in C, it's converted to an int before the 
arithmetic is performed. 
Unsigned Integer Boundaries 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
226 
Unsigned integers are defined in the C specification as being subject to the rules of 
modular arithmetic (see the "Modular Arithmetic" sidebar). For an unsigned integer 
that uses X bits of storage, arithmetic on that integer is performed modulo 2X. For 
example, arithmetic on a 8-bit unsigned integer is performed modulo 28, or modulo 
256. Take another look at this simple expression: 
unsigned int a; 
a=0xE0000020; 
a= 
The addition is performed modulo 232, or modulo 4,294,967,296 (0x100000000). The 
result of the addition is 0x40, which is (0xE0000020 + 0x20000020) modulo 
0x100000000. 
Another way to conceptualize it is to consider the extra bits of the result of a numeric 
overflow as being truncated. If you do the calculation 0xE0000020 + 0x20000020 in 
binary, you would have the following: 
      1110 0000 0000 0000 0000 0000 0010 0000 
+     0010 0000 0000 0000 0000 0000 0010 0000 
=   1 0000 0000 0000 0000 0000 0000 0100 0000 
The result you actually get in a is 0x40, which has a binary representation of 0000 
0000 0000 0000 0000 0000 0100 0000. 
Modular Arithmetic 
Modular arithmetic is a system of arithmetic used heavily in computer 
science. The expression "X modulo Y" means "the remainder of X divided by 
Y." For example, 100 modulo 11 is 1 because when 100 is divided by 11, the 
answer is 9 and the remainder is 1. The modulus operator in C is written as %. 
So in C, the expression (100 % 11) evaluates to 1, and the expression (100 / 
11) evaluates to 9. 
Modular arithmetic is useful for making sure a number is bounded within a 
certain range, and you often see it used for this purpose in hash tables. To 
explain, when you have X modulo Y, and X and Y are positive numbers, you 
know that the highest possible result is Y-1 and the lowest is 0. If you have 
a hash table of 100 buckets, and you need to map a hash to one of the 
buckets, you could do this: 
struct bucket *buckets[100]; 