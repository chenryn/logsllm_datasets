Functional Pipeline Correctness A number of authors, cf.
[1, 8, 28, 38, 47], have studied the orthogonal problem of functional
correctness in the context of concrete pipeline architectures involv-
ing features such as OoO and speculation, usually using a com-
plex reﬁnement argument based on Burch-Dill style ﬂushing [8] in
order to align OoO executions with their sequential counterparts.
Our correlate is the serialization proofs for OoO and speculation
sketched in appendices 6.3 and A.3. It is of interest to mechanize
these proofs and to examine if a generic account of serialization
using, e.g., InSpectre can help also in the functional veriﬁcation of
concrete pipelines.
Hardware countermeasures While CPU vendors and researchers
propose countermeasures, it is hard to validate their eﬀectiveness
without a model. InSpectre can help modeling and reasoning about
their security guarantees, as in Section 7.1.1. Similarly, InSpectre
15
Theorem 7.3. If a program P is MIL constant time then P is con-
ditionally noninterferent in the OoO model.
Œe theorem enables the enforcement of conditional noninter-
ference for the OoO model by verifying MIL constant time in the se-
quential model. Œis strategy has the advantage of performing the
veriﬁcation in the sequential model, which is deterministic, thus
making it easier to reuse existing tools for binary code analyses [6].
Finally, we remark that MIL constant time is microarchitecture
aware. Œis means that the same ISA program may or may not
satisfy MIL constant time when translated to a given microarchi-
tecture. In fact, the MIL translation of conditional move above is
not MIL constant time because of the dependency between the
sensitive value in t21 and conditional store in t23. However, if a
microarchitecture translates the same conditional move as below,
the translation is clearly MIL constant time.
t1
l d R z
t2
l d R r2
t4
st R r2 ((¬t1 ∗ t2) + (t1 ∗ t3))
t3
l d R r1
8 RELATED WORK
Speculative semantics and foundations Several works have re-
cently addressed the formal foundations of speciﬁc forms of spec-
ulation to capture Spectre-like vulnerabilities. Cheang et al. [12],
Guarnieri et al. [22], and Mcilroy et al. [40] propose semantics that
support branch prediction, thus modeling only Spectre v1. Nei-
ther work supports speculation of target address, speculation of
dependencies, or OoO execution. Disselkoen at al. [14] propose a
pomset-based semantics that supports OoO execution and branch
prediction. Œeir model targets a higher abstraction level model-
ing memory references using logical program variables. Hence,
the model cannot support dynamic dependency resolution, depen-
dency prediction, and speculation of target addresses.
Like us, Cauligi et al. [11] propose a model that captures existing
variants of Spectre and independently discover a vulnerability sim-
ilar to our Spectre-STL-D. Remarkably, they demonstrate the fea-
sibility of the aŠack on Intel Broadwell and Skylake processors. A
key diﬀerence between the two models is that Cauligi et al. impose
sequential order to instruction retire and memory stores. While
simplifying the proof of memory consistency and veriﬁcation, it
can model the hardware conﬁgurations and fences designed by In-
tel [25] to stall (part of) an instruction stream in case of speculation.
Several works [29, 49, 55, 56, 60] propose security-aware hardware
that prevent Spectre-like aŠacks. InSpectre can help formalizing
these hardware features and analyzing their security.
9 CONCLUDING REMARKS
Œis paper presented InSpectre, the ﬁrst comprehensive model ca-
pable of capturing out-of-order execution along with the diﬀerent
forms of speculation that could be implemented in a high-performance
pipeline. We used InSpectre to model existing vulnerabilities, to
discover three new potential vulnerabilities, and to reason about
the security of existing countermeasures proposed in the literature.
Œere are a number of interesting directions le‰ open in this work.
Foundations of microarchitecture security We argue that
InSpectre pushes the boundary on foundations of microarchitec-
ture security with respect to the current state-of-the-art substan-
tially. Existing models [11, 12, 14, 22, 40] miss features like dynamic
inter-instruction dependency (except [11]]), instruction non-atomicity,
OoO memory commits, and partial misprediction of rollbacks. Œese
features were essential to discover the vulnerabilities, as well as
to reason about countermeasures like retpoline or memory fences
for data dependency. For instance, InSpectre would not have cap-
tured our Spectre-OoO vulnerability if the memory stores and in-
struction retire are performed in the sequential order. Similarly,
static computation of active stores would not have exposed Store-
To-Load variants of Spectre. Moreover, forcing the rollback of all
subsequent microinstructions as soon as a value is mispredicted
prevents modeling advanced recovery methods used by modern
processors, including concurrent and partial recovery in case of
multiple mispredictions.
A novel feature of our approach is to decompose instructions
into smaller microinstruction-like units. We argue that the model-
ing of pipelines using ISA level instructions as atomic units is in
the long run the wrong approach, not reﬂecting well the behaviour
at the hardware level, and unable to provide the foundation for real
pipeline information ﬂow. Non-atomicity is needed to handle, for
instance, intra-instruction dependencies and interactions between
I/D-caches. Œerefore, decomposing instructions into smaller mi-
croinstructions, as we do, appears essential.
InSpectre lacks explicit support of Meltdown-like vulnerabili-
ties, multicore and hyperthreading, fences, TLBs, cache eviction
policies, and mechanisms used to update branch predictor tables.
Our model can already capture many of these features. In the pa-
per we give Intel’s lfence as an example. We focus here on core
aspects of out-of-order and speculation, but there is nothing inher-
ent in the framework that prevents modeling the above additional
features. Also, by providing a general model we cannot currently
argue if a concrete architecture is secure. For that we need to spe-
cialize the model to a given architecture, by adding detail and elim-
inating nondeterminism.
Tooling Tooling is needed to explore more systematically the
utility of the model for exploit search and countermeasure proof,
and the framework needs to be instantiated to diﬀerent concrete
pipeline architectures and be experimentally validated.
16
One can envisage MIL-based analysis tools like Spectector [22],
Pitchfork [11], and oo7 [54]. However, the large nondetermin-
ism introduced by out-of-order and speculation will make such
an approach ineﬃcient. We are currently taking a diﬀerent route
by modeling concrete microarchitectures within a theorem prover.
Œis allows verifying conditional noninterference if the microar-
chitecture is inherently secure. A failing security proof gives a
basis for proving countermeasure soundness as in Section 7.4, and
the identiﬁcation of suﬃcient conditions that can be veriﬁed in the
(more tractable) sequential model.
REFERENCES
[1] Mark D. Aagaard, Byron Cook, Nancy A. Day, and Robert B. Jones. 2001. A
Framework for Microprocessor Correctness Statements. In Correct Hardware De-
sign and Veriﬁcation Methods. 433–448.
[2] Onur Acıic¸mez and C¸etin Kaya Koc¸. 2006. Trace-driven cache aŠacks on AES
(short paper). In International Conference on Information and Communications
Security. Springer, 112–121.
[3] Jos´e Bacelar Almeida, Manuel Barbosa, Gilles Barthe, Franc¸ois Dupressoir,
and Michael Emmi. 2016. Verifying constant-time implementations. In 25th
{USENIX} Security Symposium ({USENIX} Security 16). 53–70.
[4] ARM.
2018.
SSBS,
Speculative
Store Bypass
Safe.
(2018).
hŠps://developer.arm.com/docs/ddi0595/d/aarch64-system-registers/ssbs
Accessed: 2020-01-16.
[5] ARM. 2019. Cache Speculation Side channels v2.4. (2019).
[6] Musard Balliu, Mads Dam, and Roberto Guanciale. 2014. Automating Informa-
tion Flow Analysis of Low Level Code. In Proceedings of the 2014 ACM SIGSAC
Conference on Computer and Communications Security, Scoˆsdale, AZ, USA, No-
vember 3-7, 2014. 1080–1091.
[7] Daniel
J.
Bernstein.
2005.
Cache-timing
aŠacks
on AES.
hŠp://cr.yp.to/antiforgery/cachetiming-20050414.pdf. (2005).
[8] Jerry R. Burch and David L. Dill. 1994. Automatic veriﬁcation of pipelined micro-
processor control. In Computer Aided Veriﬁcation, David L. Dill (Ed.). Springer
Berlin Heidelberg, Berlin, Heidelberg, 68–80.
[9] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von
Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss.
2019. A Systematic Evaluation of Transient Execution AŠacks and Defenses. In
28th USENIX Security Symposium, USENIX Security 2019, Santa Clara, CA, USA,
August 14-16, 2019. 249–266.
[10] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz Lipp, Ma-
rina Minkin, Daniel Moghimi, Frank Piessens, Michael Schwarz, Berk Sunar, Jo
Van Bulck, and Yuval Yarom. 2019. Fallout: Leaking Data on Meltdown-resistant
CPUs. In Proceedings of the ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS). ACM.
[11] Sunjay Cauligi, Craig Disselkoen, Klaus v Gleissenthall, Deian Stefan, Tamara
Rezk, and Gilles Barthe. 2019. Towards Constant-Time Foundations for the New
Spectre Era. arXiv preprint arXiv:1910.01755 (October 2019).
[12] Kevin Cheang, Cameron Rasmussen, Sanjit Seshia, and Pramod Subramanyan.
2019. A Formal Approach to Secure Speculation. In CSF 2019.
[13] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and
Ten H Lai. 2018. Sgxpectre aŠacks: Stealing intel secrets from sgx enclaves via
speculative execution. arXiv preprint arXiv:1802.09085 (2018).
[14] Craig Disselkoen, Radha Jagadeesan, Alan Jeﬀrey, and James Riely. 2019. Œe
Code Œat Never Ran: Modeling AŠacks on Speculative Evaluation. In S&P 2019.
[15] Craig Disselkoen, David Kohlbrenner, Leo Porter, and Dean Tullsen. 2017.
Prime+ Abort: A Timer-Free High-Precision L3 Cache AŠack using Intel {TSX}.
In 26th USENIX Security Symposium. 51–67.
[16] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, and Dmitry Pono-
marev. et almbox. 2018. BranchScope: A new side-channel aŠack on directional
branch predictor. In Proceedings of the Twenty-Šird International Conference on
Architectural Support for Programming Languages and Operating Systems. ACM.
[17] Kurt A. Feiste, John S. Muhich, Larry E. Œatcher, and Steven W. White.
2000. Forwarding store instruction result to load instruction with reduced
stall or ﬂushing by eﬀective/real data address bytes matching. (February 2000).
hŠps://patents.google.com/patent/US6021485 US6021485A.
[18] Anders Fogh and Christopher Ertl. 2018. Wrangling with the Ghost An Inside
Story of Mitigating Speculative Execution Side Channel Vulnerabilities. (2018).
[19] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. 2018. A survey of
microarchitectural timing aŠacks and countermeasures on contemporary hard-
ware. Journal of Cryptographic Engineering 8, 1 (2018), 1–27.
[20] Daniel Gruss, Cl´ementine Maurice, Klaus Wagner, and Stefan Mangard. 2016.
Flush+ Flush: a fast and stealthy cache aŠack. In International Conference on
Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 279–
299.
[21] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache template at-
tacks: Automating aŠacks on inclusive last-level caches. In 24th USENIX Security
Symposium. 897–912.
[22] Marco Guarnieri, Boris K¨opf, Jos´e F. Morales, Jan Reineke, and Andr´es S´anchez.
2020. Spectector: Principled detection of speculative information ﬂows. In
Proceedings of the 41st IEEE Symposium on Security and Privacy. IEEE.
[23] Jann Horn. 2018.
speculative execution, variant 4: speculative store bypass.
(2018).
[24] Jann Horn et al. 2018. Reading privileged memory with a side-channel. Project
Zero 39 (2018).
[25] Intel. 2018.
Speculative Execution Side Channel Mitigations, Revision 3.0.
(2018).
[46] Andrew Pardoe. 2018. Spectre mitigations in MSVC. (2018).
[47] Jun Sawada and Warren A Hunt. 2002. Veriﬁcation of FM9801: An out-of-order
microprocessor model with speculative execution, exceptions, and program-
modifying capability. Formal Methods in System Design 20, 2 (2002), 187–222.
[48] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Steck-
lina, Œomas Prescher, and Daniel Gruss. 2019. ZombieLoad: Cross-Privilege-
Boundary Data Sampling. In CCS.
[49] Mohammadkazem Taram, Ashish Venkat, and Dean Tullsen. 2019. Context-
sensitive fencing: Securing speculative execution via microcode customization.
In Proceedings of the Twenty-Fourth International Conference on Architectural
Support for Programming Languages and Operating Systems. ACM, 395–410.
[50] Caroline Trippel, Daniel Lustig, and Margaret Martonosi. 2018. CheckMate:
Automated Synthesis of Hardware Exploits and Security Litmus Tests. In 51st
Annual IEEE/ACM International Symposium on Microarchitecture, MICRO 2018,
Fukuoka, Japan, October 20-24, 2018. 947–960.
[26] Intel. 2018. Speculative Execution Side Channel Update. (2018).
[27] Intel.
Timing
nels
hŠps://so‰ware.intel.com/security-so‰ware-guidance/insights/guidelines-mitigating-timing-side-channels-against-cryptographic-implementations
Side Chan-
(2019).
injection. (2018). hŠps://support.google.com/faqs/answer/7625886
[51] Paul Turner. 2018. Retpoline: a so‰ware construct for preventing branch-target-
2019.
Against
Implementations.
for Mitigating
Cryptographic
Guidelines
[41] MaŠ
tion
hŠps://msrc-blog.microso‰.com/2018/03/15/mitigating-speculative-execution-side-channel-hardware-vulnerabilities/
2018.
channel
Miller.
side
vulnerabilities.
execu-
(2018).
speculative
Mitigating
hardware
[28] Ranjit Jhala and Kenneth L McMillan. 2001. Microarchitecture veriﬁcation by
compositional model checking. In International Conference on Computer Aided
Veriﬁcation. Springer, 396–410.
[29] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas, and J. Emer. 2018. DAWG:
A Defense Against Cache Timing AŠacks in Speculative Execution Processors.
In 2018 51st Annual IEEE/ACM International Symposium on Microarchitecture
(MICRO).
[30] Vladimir Kiriansky and Carl Waldspurger. 2018. Speculative buﬀer overﬂows:
AŠacks and defenses. arXiv preprint arXiv:1807.03757 (2018).
[31] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner
Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Œomas Prescher, Michael
Schwarz, and Yuval Yarom. 2019. Spectre AŠacks: Exploiting Speculative Exe-
cution. In 2019 IEEE Symposium on Security and Privacy, SP 2019, San Francisco,
CA, USA, May 19-23, 2019. 1–19.
[32] Paul C Kocher. 1996. Timing aŠacks on implementations of Diﬃe-Hellman, RSA,
DSS, and other systems. In Annual International Cryptology Conference. Springer,
104–113.
[33] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu Song, and
Nael Abu-Ghazaleh. 2018. Spectre Returns! Speculation AŠacks using the Re-
turn Stack Buﬀer. In 12th USENIX Workshop on Oﬀensive Technologies (WOOT
18). USENIX Association.
[34] Esmaeil Mohammadian Koruyeh, Khaled N Khasawneh, Chengyu Song, and
Nael Abu-Ghazaleh. 2018. Spectre returns! speculation aŠacks using the return
stack buﬀer. In 12th USENIX Workshop on Oﬀensive Technologies (WOOT).
[35] Moritz Lipp, Michael Schwarz, Daniel Gruss, Œomas Prescher, Werner Haas,
Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, et al.
2018. Meltdown: Reading kernel memory from user space. In 27th USENIX Se-
curity Symposium. 973–990.
[36] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B Lee. 2015. Last-
level cache side-channel aŠacks are practical. In 2015 IEEE Symposium on Secu-
rity and Privacy. IEEE, 605–622.
[37] Giorgi Maisuradze and Christian Rossow. 2018. ret2spec: Speculative execution
using return stack buﬀers. In Proceedings of the 2018 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 2109–2122.
[38] P. Manolios and S. K. Srinivasan. 2005. Reﬁnement maps for eﬃcient veriﬁcation
of processor models. In Design, Automation and Test in Europe. 1304–1309 Vol.
2.
[39] Cl´ementine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner, Daniel
Gruss, Carlo Alberto Boano, Stefan Mangard, and Kay R¨omer. 2017. Hello from
the Other Side: SSH over Robust Cache Covert Channels in the Cloud.. In NDSS,
Vol. 17. 8–11.
[40] Ross Mcilroy, Jaroslav Sevcik, Tobias Tebbi, Ben L Titzer, and Toon Verwaest.
2019. Spectre is here to stay: An analysis of side-channels and speculative exe-
cution. arXiv preprint arXiv:1902.05178 (2019).
[42] David Molnar, MaŠ Piotrowski, David Schultz, and David A. Wagner. 2005. Œe
Program Counter Security Model: Automatic Detection and Removal of Control-
Flow Side Channel AŠacks. In Information Security and Cryptology - ICISC 2005,
8th International Conference, Seoul, Korea, December 1-2, 2005, Revised Selected
Papers. 156–168.
[43] Michael Neve and Jean-Pierre Seifert. 2006. Advances on access-driven cache
aŠacks on AES. In International Workshop on Selected Areas in Cryptography.
Springer, 147–162.
[44] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache aŠacks and coun-
termeasures: the case of AES. In Cryptographersﬁ track at the RSA conference.