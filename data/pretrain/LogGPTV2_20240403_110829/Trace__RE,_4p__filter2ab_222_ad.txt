We really did a lot of hard work when solving this challenge, it's probable that this was NOT the easiest way.
If I remember correctly, correct flag from 4 possible values were `0ctf{tr135m1k5l96551s9l5r}`.
###PL version
Dostajemy długi trace wykonania (lista opkodów wykonywanych po kolei przez procesor) i chcemy z niego wyciagnąć flagę.
Brzmi zabawnie, bo i było to ciekawe zadanie. Na początku nie wiadomo w ogóle skąd mielibyśmy wziąć tą flagę, skoro w tracelogu nie ma żadnych danych (tylko opcody).
Zaczeliśmy od doprowadzenia call loga do sensownego stanu. Na dobry początek, posortowaliśmy go (żeby uzyskać faktyczny kod programu który był wykonywany):
    sort trace.log | uniq > prog
Następnie napisaliśmy na szybko skrypt do przetworzenia tego kodu i podzielenia go na bloki:
```python
import string
blocks=[[]]
blockno={}
def is_final(ins):
    FINAL="move r1, r1"
    return string.find(ins, FINAL)!=-1
for line in open("prog").read().split("\n")[:-1]:
    blocks[-1].append(line)
    blockno[line]=len(blocks)-1
    if is_final(line):
        blocks.append([])
blocks=blocks[:-1]
f=open("basic_blocks","w")
for cnt, block in enumerate(blocks):
    f.write("Basic block #"+str(cnt)+"\n")
    for line in block:
        f.write(line+"\n")
    f.write("\n========\n\n")
f.close()
bb=[]
next_check=True
for line in open("log").read().split("\n")[:-1]:
    if is_final(line):
        next_check=True
        continue
    if next_check:
        next_check=False
        bb.append(blockno[line])
print bb
```
Wynik wykonania tego kodu (razem z moimi ręcznymi anotacjami dodanymi później, nie ma sensu odkładać ich na później)
```asm
// function red() - strlen
Basic block #0
[INFO]00400770       addiu r29, r29, 0xffffffe8     // r29 -= 18
[INFO]00400774               sw r30, [r29+0x14]     // r30 = r29[0x14]
[INFO]00400778                    move r30, r29     // r30 = r29
[INFO]0040077c                sw r4, [r30+0x18]     // r4 = r30[0x18]
[INFO]00400780                 sw r0, [r30+0x8]     // r0 = r30[8]
// block 0x400784
[INFO]00400784                 lw r2, [r30+0x8]     // r2 = r30[8]
[INFO]00400788                lw r3, [r30+0x18]     // r3 = r30[0x18]
[INFO]0040078c                  addu r2, r3, r2     // r2 += r3
[INFO]00400790                  lb r2, [r2+0x0]     // r2 = r2[0]
[INFO]00400794                bnez r2, 0x4007a8     // if (r2 != 0) goto BLOCK_2
========
Basic block #1
[INFO]0040079c                 lw r2, [r30+0x8]     // r2 = r30[8]
[INFO]004007a0                       j 0x4007bc     // goto BLOCK_3
========
Basic block #2
[INFO]004007a8                 lw r2, [r30+0x8]     // r2 = r30[8]
[INFO]004007ac                addiu r2, r2, 0x1     // r2 += 1
[INFO]004007b0                 sw r2, [r30+0x8]     // r30[8] = r2
[INFO]004007b4                       j 0x400784     // goto 0x400784
========
Basic block #3
[INFO]004007bc                    move r29, r30     // r29 = r30
[INFO]004007c0               lw r30, [r29+0x14]     // r30 = r29[0x14]
[INFO]004007c4             addiu r29, r29, 0x18     // r29 += 18
[INFO]004007c8                           jr r31     // ret
========
// function green() - strcpy
Basic block #4
[INFO]004007d0       addiu r29, r29, 0xffffffe8     // r29 -= 18
[INFO]004007d4               sw r30, [r29+0x14]     // r29[0x14] = r30
[INFO]004007d8                    move r30, r29     // r30 = r29
[INFO]004007dc                sw r4, [r30+0x18]     // r30[0x18] = r4
[INFO]004007e0                sw r5, [r30+0x1c]     // r30[0x1c] = r5
[INFO]004007e4                 sw r0, [r30+0x8]     // r30[8] = r0
[INFO]004007e8                       j 0x40081c     // goto 0x40081c
========
Basic block #5
[INFO]004007f0                 lw r2, [r30+0x8]     // r2 = r30[8]
[INFO]004007f4                lw r3, [r30+0x18]     // r3 = r30[0x18]
[INFO]004007f8                  addu r2, r3, r2     // r2 += r3
[INFO]004007fc                 lw r3, [r30+0x8]     // r3 = r30[8]
[INFO]00400800                lw r4, [r30+0x1c]     // r4 = r30[0x1c]
[INFO]00400804                  addu r3, r4, r3     // r3 += r4
[INFO]00400808                  lb r3, [r3+0x0]     // r3 = r3[0]
[INFO]0040080c                  sb r3, [r2+0x0]     // r2[0] = r3
[INFO]00400810                 lw r2, [r30+0x8]     // r2 = r30[8]
[INFO]00400814                addiu r2, r2, 0x1     // r2 += 1
[INFO]00400818                 sw r2, [r30+0x8]     // r30[8] = r2
// block 0x40081c
[INFO]0040081c                 lw r2, [r30+0x8]     // r2 = r30[8]
[INFO]00400820                lw r3, [r30+0x1c]     // r3 = r30[0x1c]
[INFO]00400824                  addu r2, r3, r2     // r2 += r3
[INFO]00400828                  lb r2, [r2+0x0]     // r2 = r2[0]
[INFO]0040082c                bnez r2, 0x4007f0     // if r2 != 0: goto BLOCK_5
========
Basic block #6
[INFO]00400834                 lw r2, [r30+0x8]     // r2 = r30[8]
[INFO]00400838                lw r3, [r30+0x18]     // r3 = r30[0x18]
[INFO]0040083c                  addu r2, r3, r2     // r2 += r3
[INFO]00400840                  sb r0, [r2+0x0]     // r2[0] = r0
[INFO]00400844                    move r29, r30     // r29 = r30
[INFO]00400848               lw r30, [r29+0x14]     // r30 = r29[0x14] 
[INFO]0040084c             addiu r29, r29, 0x18     // r29 += 18
[INFO]00400850                           jr r31     // ret
========
// function blue()
Basic block #7
[INFO]00400858       addiu r29, r29, 0xffffffd0 
[INFO]0040085c               sw r31, [r29+0x2c] 
[INFO]00400860               sw r30, [r29+0x28] 
[INFO]00400864                    move r30, r29 
[INFO]00400868                sw r4, [r30+0x30]     // r30[0x30] = r4  # buffer start
[INFO]0040086c                sw r5, [r30+0x34]     // r30[0x34] = r5  # length
[INFO]00400870                lw r2, [r30+0x34]     // r2 = r30[0x34]
[INFO]00400874                 slti r2, r2, 0x2     // r2 = (r2 = 2 continue
========
Basic block #8
[INFO]00400880                       j 0x4009bc     // goto exitfunc (BLOCK_14)
========
Basic block #9
[INFO]00400888                lw r2, [r30+0x30]     // r2 = r30[0x30]
[INFO]0040088c                 lbu r2, [r2+0x0]     // r2 = r2[0]   # first byte of buffer
[INFO]00400890                sb r2, [r30+0x20]     // r30[0x20] = r2
[INFO]00400894                addiu r2, r0, 0x1     // r2 = 1
[INFO]00400898                sw r2, [r30+0x18]     // r30[0x18] = r2
[INFO]0040089c                addiu r2, r0, 0x1     // r2 = 1
[INFO]004008a0                sw r2, [r30+0x1c]     // r30[0x1c] = r2
[INFO]004008a4                       j 0x40092c     // goto unnamed block
========
Basic block #10
[INFO]004008ac                lw r2, [r30+0x1c]     // r2 = r30[0x1c] # indeks
[INFO]004008b0                lw r3, [r30+0x30]     // r3 = r30[0x30] # start buffera
[INFO]004008b4                  addu r2, r3, r2     // r2 += r3
[INFO]004008b8                  lb r2, [r2+0x0]     // r2 = r2[0] # next character
[INFO]004008bc                lb r3, [r30+0x20]     // r3 = r30[0x20] # first byte of buffer
[INFO]004008c0                   slt r2, r2, r3     // r2 = (r2 = r3) 
========
Basic block #11
[INFO]004008cc                lw r2, [r30+0x18]     // r2 = r30[0x18]  # counter18
[INFO]004008d0                lw r3, [r30+0x30]     // r3 = r30[0x30] # start of buffer
[INFO]004008d4                  addu r2, r3, r2     // r2 += r3
[INFO]004008d8                 lbu r2, [r2+0x0]     // r2 = r2[0] # take byte from buffer[counter18]
[INFO]004008dc                sb r2, [r30+0x21]     // r30[0x21] = r2
[INFO]004008e0                lw r2, [r30+0x18]     // r2 = r30[0x18]
[INFO]004008e4                lw r3, [r30+0x30]     // r3 = r30[0x30] # adress buffer
[INFO]004008e8                  addu r2, r3, r2     // r2 += r3
[INFO]004008ec                lw r3, [r30+0x1c]     // r3 = r30[0x1c] # counter1c
[INFO]004008f0                lw r4, [r30+0x30]     // r4 = r30[0x30] # adress buffer
[INFO]004008f4                  addu r3, r4, r3     // r3 += r4
[INFO]004008f8                  lb r3, [r3+0x0]     // r3 = r3[0] # buffer[counter1c]
[INFO]004008fc                  sb r3, [r2+0x0]     // r2[0] = r3  # buffer[counter18] = buffer[counter1c]
[INFO]00400900                lw r2, [r30+0x1c]     // r2 = r30[0x1c]
[INFO]00400904                lw r3, [r30+0x30]     // r3 = r30[0x30]
[INFO]00400908                  addu r2, r3, r2     // r2 += r3  # adress buffer[counter1c]
[INFO]0040090c               lbu r3, [r30+0x21]     // r3 = r30[0x21]
[INFO]00400910                  sb r3, [r2+0x0]     // r2[0] = r3
[INFO]00400914                lw r2, [r30+0x18]     // \
[INFO]00400918                addiu r2, r2, 0x1     // r30[r18] += 1
[INFO]0040091c                sw r2, [r30+0x18]     // /
// block
[INFO]00400920                lw r2, [r30+0x1c]     // \
[INFO]00400924                addiu r2, r2, 0x1     // r30[r1c] += 1
[INFO]00400928                sw r2, [r30+0x1c]     // /
// block
[INFO]0040092c                lw r3, [r30+0x1c]     // r3 = r30[0x1c]   # some index (indeks1c)
[INFO]00400930                lw r2, [r30+0x34]     // r2 = r30[0x34]   # length
[INFO]00400934                   slt r2, r3, r2     // r2 = (r3 < r2)
[INFO]00400938                bnez r2, 0x4008ac     // if index is not longer than lengrth, jump to BLOCK_10
========
Basic block #12
[INFO]00400940                lw r2, [r30+0x18]     // l2 = r30[0x18]   # indeks2 (indeks18)
[INFO]00400944         addiu r2, r2, 0xffffffff     // r2 -= 1
[INFO]00400948                lw r3, [r30+0x30]     // r3 = r30[0x30]
[INFO]0040094c                  addu r2, r3, r2 
[INFO]00400950                 lbu r2, [r2+0x0]     // r2 = buffer[r18 - 1]
[INFO]00400954                sb r2, [r30+0x21]     // r30[0x21] = r2
[INFO]00400958                lw r2, [r30+0x18] 
[INFO]0040095c         addiu r2, r2, 0xffffffff     // r2 = r30[0x18] - 1
[INFO]00400960                lw r3, [r30+0x30] 
[INFO]00400964                  addu r2, r3, r2     // r2 = &buffer[r2]
[INFO]00400968                lw r3, [r30+0x30]
[INFO]0040096c                  lb r3, [r3+0x0]     // r3 = buffer[0] 
[INFO]00400970                  sb r3, [r2+0x0]     // buffer[r18-1] = buffer[0]
[INFO]00400974                lw r2, [r30+0x30] 
[INFO]00400978               lbu r3, [r30+0x21] 
[INFO]0040097c                  sb r3, [r2+0x0]     // buffer[0] = r30[r21];
[INFO]00400980                lw r2, [r30+0x18]     
[INFO]00400984         addiu r2, r2, 0xffffffff     // r2 -= 1
[INFO]00400988                lw r4, [r30+0x30] 
[INFO]0040098c                      move r5, r2     // r5 = r2
[INFO]00400990                     jal 0x400858     // call blue()
========
Basic block #13
[INFO]00400998                lw r2, [r30+0x18]
[INFO]0040099c                lw r3, [r30+0x30] 
[INFO]004009a0                  addu r4, r3, r2     // r4 = &buffer[r18] 
[INFO]004009a4                lw r3, [r30+0x34] 
[INFO]004009a8                lw r2, [r30+0x18] 
[INFO]004009ac                  subu r2, r3, r2     // r2 = buflen - r18
[INFO]004009b0                      move r5, r2     // r5 = r2
[INFO]004009b4                     jal 0x400858     // call blue()