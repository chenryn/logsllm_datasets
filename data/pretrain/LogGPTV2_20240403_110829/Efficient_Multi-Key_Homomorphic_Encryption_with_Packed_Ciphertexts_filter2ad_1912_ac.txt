Correctness. At each iteration of the second for-loop in Alg. 2, we compute c(cid:48)
add g−1(c(cid:48)
i,j) · [di,0|di,1] and (cid:104)g−1(ci,j), di,2(cid:105) to (c(cid:48)
i,j = (cid:104)g−1(ci,j), bj(cid:105), then
j, respectively. We note that
0, c(cid:48)
i) and c(cid:48)
i,j) · [di,0|di,1] · (1, si) ≈ ri · c(cid:48)
i,j
g−1(c(cid:48)
(mod q),
and
(cid:104)g−1(ci,j), di,2(cid:105) · sj ≈ (cid:104)g−1(ci,j),−ri · bj + sisj · g(cid:105) = −ri · c(cid:48)
i,j + ci,j · sisj
(mod q).
From the deﬁnition of ct
(cid:48)
, we get
(cid:48)
(cid:104)ct
, sk(cid:105) = c(cid:48)
0 +
i · si
c(cid:48)
k(cid:88)
i=1
k(cid:88)
k(cid:88)
i=1
= c0,0 +
≈ c0,0 +
i=1
as desired.
(c0,i + ci,0)si +
(c0,i + ci,0)si +
g−1(c(cid:48)
i,j) · [di,0|di,1] · (1, si) +
k(cid:88)
(cid:104)g−1(ci,j), di,2(cid:105) · sj
(mod q)
ci,j · sisj = (cid:104)ct, sk ⊗ sk(cid:105)
(mod q),
i,j=1
k(cid:88)
k(cid:88)
i,j=1
i,j=1
3.3.3 Performance of Relinearization Algorithms
Suppose that there are k diﬀerent parties involved in a multi-key computation. For relinearizing an
extended ciphertext ct = (ci,j)0≤i,j≤k ∈ R(k+1)2
, both of our relinearization methods repeat some com-
putations on each ci,j to switch its corresponding secret si · sj into (1, si, sj). So we will focus on a single
step (i, j) of each solution to compare their performance.
q
In our ﬁrst method, a computing party generates a shared relinearization key Ki,j and uses it to
linearize an input extended ciphertext. The generation of Ki,j includes a multiplication between d×d and
d× 2 matrices so its complexity is 2d2 polynomial multiplications. However, the computation of g−1(ci,j)·
Ki,j in Step 6 of Alg. 1 requires only 3d polynomial multiplications. Meanwhile, the second method does
not have any pre-processing but a single iteration of Alg. 2 requires 4d polynomial multiplications. As
a result, the ﬁrst method can be up to (4/3) times faster when one performs multiple homomorphic
arithmetic on the same set (or its subset) of parties using a pre-computed shared relinearization key,
however, the required storage grows quadratically on k compared to the linear memory of the second
method.
The second method also has an advantage in noise management, which we will discuss below together
with modulus raising technique.
3.3.4 Special Modulus Technique
Noise growth is the main factor determining the parameter size and thereby overall performance of a
cryptosystem. In general, we can use a large decomposition degree d to reduce the size of a decomposed
vector g−1(·) as well as key-switching error, but this naive method causes performance degradation. In
addition, the beneﬁt of this trade-oﬀ between noise growth and computational complexity gets smaller
and smaller as d increases. Therefore, this method is not the best option when we should have a small
noise.
The special modulus (a.k.a. modulus raising) technique proposed in [27] is one attractive solution to
address this noise problem with a smaller overhead. Roughly speaking, it raises the ciphertext modulus
from q to pq for an integer p called special modulus, and then computes the key-switching procedure over
Rpq followed by modulus reduction back to q. The main advantage of this method is that a key-switching
error is decreased by a factor of about p due to the modulus reduction. We apply this technique to
our relinearization and encryption algorithms. In particular, a special modulus variant of relinearization
requires two sequential modulus switching operations (see Appendix A for details).
(cid:48) ∈ Rk+1
q
We recall that for an extended ciphertext ct ∈ R(k+1)2
such that (cid:104)ct
, the goal of relinearization is to generate a
, sk(cid:105) = (cid:104)ct, sk⊗sk(cid:105)+elin for some error elin, which should be minimized
ciphertext ct
for eﬃciency. We refer the reader to Appendix B which provides a noise analysis based on the variance
of polynomial coeﬃcients, but we present a concise summary in this section.
Let u be a uniform random variable over Rq. We consider its decomposition g−1(u) and denote by
Vg the average of variances of its coeﬃcients. We respectively estimate the variance of a relinearization
error from our ﬁrst and second methods:
(cid:48)
q
V1 ≈ k2n2σ2 · d2V 2
g ,
V2 ≈ k2n2σ2 · dVg.
In addition, the special modulus variant of the second method achieves a smaller noise whose variance is
2 = p−2 · V2 +
V (cid:48)
1
24
(k2 + k)n.
Compared to the ﬁrst method, our second solution has signiﬁcant advantages in practice because
we may use an eﬃcient decomposition method with a small d while obtaining the same level of noise
growth. Furthermore, its modulus raising variant obtains an even smaller error variance which is not
nearly aﬀected by the size of decomposition since V (cid:48)
2 is dominated by the second term (rounding error)
when we introduce a special modulus p which can cancel out the term V2.
4 Two MKHE Schemes with Packed Ciphertexts
In this section, we present multi-key variants of the BFV [6, 22] and CKKS [16] schemes. They share
the following setup and key generation phases but have diﬀerent algorithms for message encoding and
homomorphic operations.
• MKHE.Setup(1λ): Run Setup(1λ) and return the parameter pp.
• MKHE.KeyGen(pp): Each party i generates secret, public and evaluation keys by (si, bi) ← KeyGen(pp)
and Di ← EvkGen(si), respectively.
Encryption, decryption and homomorphic arithmetic of our MKHE schemes are described in the
next subsections. We have a common pre-processing when performing a homomorphic operation between
ciphertexts. For given ciphertexts cti ∈ Rki+1
, we denote k ≥ max{k1, k2} the number of parties involved
in either ct1 or ct2. We rearrange the entries of cti and pad zeros in the empty entries to generate some
∗
ciphertexts ct
i sharing the same secret sk = (1, s1, . . . , sk). To be precise, a ciphertext cti = (c0, c1, . . . , cki)
corresponding to the tuple of parties (id1, . . . , idki) ∈ {1, 2, . . . , k}ki
is converted into the ciphertext
∗
0, c∗
i = (c∗
ct
which is deﬁned as c∗
k) ∈ Rk+1
1, . . . , c∗
0 = c0 and
q
q
(cid:40)
if i = idj for some 1 ≤ j ≤ ki;
otherwise,
cj
0
c∗
i =
for 1 ≤ i ≤ k. We remark that
(cid:104)cti, (1, sid1, . . . , sidki
)(cid:105) = (cid:104)ct
∗
, (1, s1, . . . , sk)(cid:105).
For simplicity, we will assume that this pre-processing is always done before homomorphic arithmetic so
that two input ciphertexts are related to the same set of k parties.
Security and Correctness. Our MKHE schemes inherit the semantic security of underlying HE schemes
because they have exactly the same encryption algorithms as the ordinary HE schemes. BFV and CKKS
both randomize the public key to generate a randomized RLWE sample and add an encoded plaintext
to the ﬁrst component. Hence our MKHE schemes are IND-CPA secure under the RLWE assumption of
parameter (n, q, χ, ψ). We will brieﬂy show the correctness of our schemes in the following sections but
we refer the reader to Appendix B for the rigorous proof with noise estimation.
4.1 Multi-Key BFV
The BFV scheme [6, 22] is a scale-invariant HE which supports exact computation on a discrete space
with a ﬁnite characteristic. We denote by t the plaintext modulus and ∆ = (cid:98)q/t(cid:101) be the scaling factor of
the BFV scheme. The native plaintext space is the set of cyclotomic polynomials Rt, but a plaintext is
decoded to a tuple of ﬁnite ﬁeld elements via a ring isomorphism from Rt depending on the relation of t
and n [47].
• MK-BFV.Enc(m; b, a): This is the standard BFV encryption which takes a polynomial m ∈ Rt as the
input. Let a = a[0] and b = b[0]. Sample v ← χ and e0, e1 ← ψ. Return the ciphertext ct = (c0, c1) ∈ R2
where c0 = v · b + ∆ · m + e0 (mod q) and c1 = v · a + e1 (mod q).
• MK-BFV.Dec(ct; s1, . . . , sk): Let ct = (c0, c1, . . . , ck) ∈ Rk+1
s1, . . . , sk be their secret keys. Set sk = (1, s1, . . . , sk) and compute(cid:4)(t/q) · (cid:104)ct, sk(cid:105)(cid:7) (mod t).
be a ciphertext associated to k parties and
q
q
• MK-BFV.Add(ct1, ct2): Given two ciphertexts cti ∈ Rk+1
• MK-BFV.Mult(ct1, ct2;{(Di, bi)}1≤i≤k): Given two ciphertexts cti ∈ Rk+1
(mod q) ∈ R(k+1)2
and return the ciphertext ct
(cid:48) ← Relin(ct;{(Di, bi)}1≤i≤k).
, return the ciphertext ct
q
q
q
(cid:48)
= ct1 + ct2 (mod q).
, compute ct = (cid:98)(t/q) · (ct1 ⊗ ct2)(cid:101)
The correctness of our scheme is obtained from the properties of the basic BFV and relinearization
algorithm. A multi-key BFV encryption of m ∈ Rt is a vector ct = (c0, c1, . . . , ck) ∈ Rk+1
such that
(cid:104)ct, sk(cid:105) ≈ ∆ · m (mod q) for the secret sk = (1, s1, . . . , sk). So the decryption algorithm can recover m
correctly. If ct1 and ct2 are encryptions of m1 and m2 with respect to the secret sk = (1, s1, . . . , sk), then
their (scaled) tensor product ct = (cid:98)(t/q) · (ct1 ⊗ ct2)(cid:101) (mod q) satisﬁes (cid:104)ct, sk⊗ sk(cid:105) ≈ ∆· m1m2 (mod q)
, sk(cid:105) ≈ (cid:104)ct, sk ⊗ sk(cid:105) ≈
similar to the ordinary BFV scheme. The output ct
∆ · m1m2 (mod q).
(cid:48) ← Relin(ct; rlk) holds (cid:104)ct
(cid:48)
q
4.2 Multi-Key CKKS
assume q = (cid:81)L
q(cid:96) =(cid:81)(cid:96)
The CKKS scheme [16] is a leveled HE scheme with support for approximate ﬁxed-point arithmetic. We
i=0 pi for some integers pi to have a chain of ciphertext moduli q0 < q1 < ··· < qL for
i=0 pi. The native plaintext is a small polynomial m ∈ R, but one can pack at most (n/2) complex
numbers in a single polynomial via DFT. In addition to the basic arithmetic operations, it supports the
rescaling algorithm to control the magnitude of encrypted message. For homomorphic operations between
ciphertexts at diﬀerent levels, it requires to transform a high-level ciphertext to have the same level as
the other.
• MK-CKKS.Enc(m; b, a): Let m ∈ R be an input plaintext and let a = a[0] and b = b[0]. Sample v ← χ and
e0, e1 ← ψ. Return the ciphertext ct = (c0, c1) ∈ R2
q where c0 = v · b + m + e0 (mod q) and c1 = v · a + e1
(mod q).
• MK-CKKS.Dec(ct; s1, . . . , sk): Let ct = (c0, c1, . . . , ck) ∈ Rk+1
parties and s1, . . . , sk be their secret keys. Set sk = (1, s1, . . . , sk) and return (cid:104)ct, sk(cid:105) (mod q(cid:96)).
(cid:48)
• MK-CKKS.Add(ct1, ct2): Given two ciphertexts cti ∈ Rk+1
(mod q(cid:96)).
• MK-CKKS.Mult(ct1, ct2;{(Di, bi)}1≤i≤k): Given two ciphertexts cti ∈ Rk+1
ct1 ⊗ ct2 (mod q(cid:96)) ∈ R(k+1)2
. The
relinearization algorithm is deﬁned over modulus q = qL, but we compute the same algorithm modulo q(cid:96)
for level-(cid:96) ciphertexts.
• MK-CKKS.Rescale(ct): Given a ciphertext ct = (c0, c1, . . . , ck) ∈ Rk+1
q(cid:96)
for 0 ≤ i ≤ k and return the ciphertext ct
.
(cid:48) ← Relin(ct;{(Di, bi)}1≤i≤k) ∈ Rk+1
be a ciphertext at level (cid:96) associated to k
i =(cid:4)p−1
at level (cid:96), return the ciphertext ct
at level (cid:96), compute c(cid:48)
and return the ciphertext ct
at level (cid:96), compute ct =
= ct1 + ct2
= (c(cid:48)
· ci
(cid:7)
0, c(cid:48)
1, . . . , c(cid:48)
k) ∈ Rk+1
q(cid:96)−1
q(cid:96)
q(cid:96)
(cid:96)
q(cid:96)
q(cid:96)
q(cid:96)
(cid:48)
A level-(cid:96) multi-key encryption of a plaintext m with respect to the secret sk = (1, s1, . . . , sk) is a
satisfying (cid:104)ct, sk(cid:105) ≈ m (mod q(cid:96)). For basic homomorphic operation,
vector ct = (c0, c1, . . . , ck) ∈ Rk+1
we take as input level-(cid:96) encryptions of m1 and m2. Then, homomorphic addition (resp. multiplication)
, sk(cid:105)]q(cid:96) is approximately equal to m1 + m2 (resp. m1m2). Finally,