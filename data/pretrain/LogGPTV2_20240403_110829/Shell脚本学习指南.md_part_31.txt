必须拥有root权限。每个厂商提供的统计软件都不一样，不过它们累积的数据的种类
都差不多，所以只要稍作微调即可，GNU的统计摘要工具：Sa（见sa（8）手册页）可产
生类似下面这样的报告：
www.TopSage.com
---
## Page 186
174
第7章
# 88 -
fones
0.01 cpu
377k men
0060T0
也就是说，我们有一个以空白隔开的字段，第一个字段为用户名称面且最后一个字段为
程序名称。这让我们可以简单地过逮该输出，使其看起来像是密码文件数据类型，再将
其通过管道传递给我们的邮件列表程序来处理：
（sort命令是用来排序数据：-u选项则删除重复的行.）这个UNIX过滤程序与管道以
及简单的数据标记，最漂亮的地方就在于简洁，我们不必编写新的邮件列表产生程序来
处理统计数据：只需一个简单的awk步骤以及一个sort，就可以让数据看起来就像我
们可以处理的那样！
7.6.3简易数学：expr
expr命令是UNIX命令里少数几个设计的不是那么严谨又很难用的一个，虽经过POSIX
标准化，但我们非常不希望你在新程序里使用它，因为还有更多其他程序与工具微得比
它更好。在Shell脚本的编写上，expr主要用于Shell的算术运算，所以我们把重点放这
就好。如果你真有那么强的求知欲，可以参考cxpr（1）的手册页了解更详尽的使用方法。
expr的语法很麻烦：运算数与运算符必须是单个的命令行参数；因此我们建议你在这
里大量使用空格间隔它们。很多expr的运算符同时也是Shell的meta字符，所以必须
谨慎使用引号。
expr被设置用在命令替换之内。这样，它会通过打印的方式把值返回到标准输出，而
并非通过使用退出码（也就是Shell内的$？）。
表7-7列出expr中优先级由小至大的运算符。我们将优先级相同的运算符组在一起。
表7-7：expr运算符
表达式
意义
el 1  e2
如果eI是非零值或非null.则使用它的值。否则如果e2是非零值或非
null，则使用它的值。如果两者都不是，则最后值为零。
el&e2
如果e1与e2都非零值或非null，则返回el的值。否则，最后值为零。
el = e2
等于。
el 1= e2
不等于。
e1= e2
大于或等于。
这些运算符，如果指示的比较为真，则会使得expr显示1，否则显示
0.如果两个运算数都为整数，则以数字方式比较：如果不是，则以字
符串方式比较。
el + e2
e1与e2的加总。
el-e2
e1与e2的相差。
el * e2
el与e2的相乘结果。
e1 /e2
el除以e2后的整数结果（截断）。
el8e2
e1除以e2后的余数（截断）。
el:e2
e1与e2的BRE匹配：详见expr（1）的手册页。
(expression)
表达式expression的值：用于分组，大部分程序语言里都看得到。
integer
一个只包含数字的数目，允许前置负号，但却不支持一元的正号，
string
字符串值，不允许被误用为数字或运算符。
在新的代码里，你可以使用test或s（（...））进行这里的所有运算。正则表达式的匹
配与提取，也可搭配sed或是Shell的case语句来完成。
这里有一个简单算术运算的例子。在真实的脚本里，循环体会做一些较有意义的操作，
而不只是把循环变量的值显示出来：
Swhi1e[=$1*-1e 5]
S 1=1
初始化计数器
> do
echo 1' 1e $1
循环体：真正的代码在此
Loexpr $i + 1°
借环计数器增值
> done
1 18 1
i is 2
1s 3
1is4
 is 5
S ecbo $1
显示最后结果
这类的算术运算，已经给出了你可能遇到的expr的使用方式的99%。我们故意在这里
使用test（别名用法为[...1）以及反引号的命令替换，因为这是expr的传统用法。
在新的代码里，使用Shell的内建算术替换应该会更好：
www.TopSage.com
---
## Page 188
176
第7章
$i=1
初始化计数器
S wh1le ["$1" -1e 5 ]
错环额试
> do
echo 1 1a $1
循环体：真正的代码在此
=$((± + 1))
循坏计数器增值
> done
 16 1
1 is 2
 is 3
 1s 4
.1- is 5
$ echo $1
显示最后的值
无论expr的价值如何，它支持32位的算术运算，也支持64位的算术运算--在很
多系统上都可以，因此，几乎不会有计数器溢出（overflow）的间题。
7.7
引用
引用（quoting）是用来防止Shell将某些你想要的东西解释成不同的意义。举例来说，
如果你要命令接受含有meta字符的参数，如*或？，就必须将这些meta字符用引l号引
用起来。或更典型的情况是：你希望将某些可能被Shell视为个别参数的东西保持为单
个参数，这时你就必须将其引用。这里是三种引用的方式：
反斜杠转义
字符前置反斜杠（\），用来告知Shel1该字符即为其字面上的意义。这是引用单一
字符最简单的方式：
S ecbo here ie 8 real star: \* and a real question nark: \7
here is a real star: * and a real question,mark: ?
各15东
单引号（..）强制Shell将一对引号之间的所有字符都看作其字面上的意义。
Shell脚本会剩除这两个引号，只单独留下被括起来的完整文字内容：
不可以在一个单引号引用的字符率里再内嵌一个单引号。即便是反斜杠，在单引号
里也没有特殊意义（某些系统里，像ocho‘A\tB'这样的命令看起来像是Shell特
别地处理反斜杠，其实不然，这是echo命令本身有特殊的处理方式，详见表2-2）。
如需混用单引号与双引号，你可以小心地使用反斜杠转义以及不间引用字符串的连
接来做到：
Secho*Be said, “ow*\.*s tricks?"
He' said,*How′s tr1cks?*
www.TopSage.com
---
## Page 189
输入/输出、文件与命令执行
177
Secho *She zeplied, \*MovIn* along\"*
She replied, *Movin′ along*
不管你怎么处理，这种结合方式永远是很难读阅读的。
双引号
双引号（°.：."）就像单引号那样，将括起来的文字视为单一字符串。只不过，双
引号会确切地处理括起来文字中的转义字符和变量、算术、命令替换：
（）.   x x. s
$ x="I 8m x*
$x is *I an x*. Here is some output: *Hello Wor1d
在双引号里，字符s、“、与\，如需用到字面上的意义，都必须前置\。任何其他
字符前面的反斜杠是不带有特殊意义的。序列-newline会完全地被删除，就好像
是用在脚本的正文中一样。
请注意，如范例所示，单引号被括在双引号里时就无特殊意义了，它们不必成对，
也无须转义。
一般来说，使用单引号的时机是你希望完全不处理的地方。否则，当你希望将多个单词
视为单一字符申，但又需要Shell为你做些事情的时候，请使用双引号，例如，将一个
变量值与另一个变量值连接在一起，你就可以这么用：
.xenneus xenptos。=xeApto
将newvar 的值附加到o1dvar 变量
7.8
执行顺序与eval
我们替提到过的各类展开与替换都以定义好的次序完成，POSIX标准更提供了很多琐碎
的细节。在这里，我们站在Shell程序设计人员的层面来看这些必须了解的东西。这里
的解释，省略了许多小细节：例如复合命令的中间与结尾、特殊字符等。
Shell从标准输人或即本中读取的每一行称为管道（pipeline），它包含了一个或多个命令
（command）：这些命令被零或多个管道字符（1）隔开，事实上还有很多特殊符号可用
来分隔单个的命令：分号（：）、管道（1）、6、逻辑AND（&&），还有逻辑OR（11）。
对于每一个读取的管道，Shell都会将命令分割，为管道设置I/O，并且对每一个命令依
次执行下面操作：
1.
将命令分割成roken，是以固定的一组meta字符分隔，有空格、制表字符、换行字
符、;、（，）、、1与&。token的种类包括单词（word）、关键字（keyword）、
输出入重定向器，以及分号。
这是微妙的，但是变量、命令还有算术替换，都可以在Shell执行token认定的时
候被执行，这就是为什么先前在7.5.1节所举的vi~Suser/.profile例子可以像
预期的那样工作。
www.TopSage.com
---
## Page 190
178
第久章日
2.
检查每个命令的第一个token，看看是否它是不带有引号或反斜杠的关键字）1m1
（keyword）。如果它是一个开放的关键字（if与其他控制结构的开始符号，如（或
（），则这个命令其实是一个复合命令（compoundcommand）。Shell为复合命令进
行内部的设置，读取下一条命令，并再次启动进程。如果关键字非复合命令的开始
符号（例如，它是控制结构的中间部分，像then、else或do，或是结尾部分，例
如fi、done或逻辑运算符），则Shell会发出语法错误的信号。
3.将每个命令的第一个单词与别名（alia）列表对照检查。如果匹配，它便代替别名
的定义，并回到步骤1；否则，进行步骤4（别名是给交互式Shell使用，因此我们
在这里不谈）。回到步骤1，允许让关键字的别名被定义：例如aliasaslongas=
while or alias prccedure=function，注意，Shell不会执行递归（recursive）
的别名展开：反面当别名展开为相同的命令时它会知道，并停止潜在的递归操作。
可以通过引用要被保护的单词的任何部分而禁止别名展开。
4.如果波浪号（-）字符出现在单词的开头处，则将波浪号替换成用户的根目录
（SHoME）。将~user替换成user的根目录。
波浪号替换（在支持此功能的Shell里）会发生在下面的位置：
·在命令行里，作为单词的第一个未引用字符
·在变量赋值中的=之后以及变量赋值中的任何：之后
·形式S（variableopword}的变量替换里的word部分
5.将任何开头为S符号的表达式，执行参数（变量）替换。
6.将任何形式为S（string）或string的表达式，执行命令替换。
7.执行形式S（（string））的算术表达式（arithmeticexpression）。
8.从参数、命令与算术替换中取出结果行的部分，再一次将它们切分为单词，这次它
使用SIFS里的字符作为定界符，而不是使用步骤1的那组meta字符。
通常，在IFS里连续多个重复的输人字符是作为单一定界符，这是你所期待的。这
只有对空白字符（例如空格与制表字符）而言是真的。对于非空白字符，则不是这
样的。举例来说，当读取以冒号分隔字段的/etc/passwd文件时，两个连续冒号
所界定的是一个空字段：
vhile IFS=: read name passvd uid gid fullnane homedir Shel1
do
done < /etc/passwd
9.对于*、？，以及一对[..]的任何出现次数，都执行文件名生成（filenamegeneration）
的操作，也就是通配符展开。
www.TopSage.com
---
## Page 191
输入/输出、文件与命令执行
179
10.使用第一个单词作为一个命令，遵循7.9节中所述的查找次序，也就是，先作为一
个特殊的内建命令，接着是作为函数，然后作为一般的内建命令，以及最后作为查
找SPATH找到的第一个文件。
11.在完成I/0重定向与其他同类型事项之后，执行命令，
如图7-1，引用可用来避开执行程序的不同部分。eVa1命令可让你再经过一次这一流
程。执行两次命令行的处理，看来似乎有点怪，不过这却是相当好用的功能：它让你编
写一个瞬本，可在任务中建立命令字符串，再将它们传递给Shell执行，这么一米，你
可以让脚本聪明地修改它们自己执行时的行为（这在下一节会讨论）。
命令分成t
检查第一个taken
开放的关键字
其化关键字
非关键字
0
检查第个ken
别名
非别名
波波号展开