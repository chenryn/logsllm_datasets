            v3 = v7;
          }
          else
          {    //v1==3
            v3 = &opaque->dma_buf[v2];
          }
          cpu_physical_memory_rw(opaque->dma.dst, v3, opaque->dma.cnt, 1);
          v4 = opaque->dma.cmd;
          v5 = opaque->dma.cmd & 4;
        }
        else
        {    //v1==1
          v6 = &opaque[-36] + opaque->dma.dst - 2824;
          LODWORD(v3) = opaque + opaque->dma.dst - 0x40000 + 3000;
          cpu_physical_memory_rw(opaque->dma.src, v6, opaque->dma.cnt, 0);
          v4 = opaque->dma.cmd;
          v5 = opaque->dma.cmd & 4;
          if ( opaque->dma.cmd & 4 )
          {
            v3 = LODWORD(opaque->dma.cnt);
            (opaque->enc)(v6, v3, v5);
            v4 = opaque->dma.cmd;
            v5 = opaque->dma.cmd & 4;
          }
        }
        opaque->dma.cmd = v4 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
cpu_physical_memory_rw函数的第一个参数时物理地址，虚拟地址需要通过读取/proc/$pid/pagemap转换为物理地址。
  1. 1、dma.cmd==7时，idx=dma.src-0x40000，addr = dma_buf[idx]，调用enc加密函数加密，并写入到dma.dst中
  2. 2、dma.cmd==3时，idx=dma.src-0x40000，addr = dma_buf[idx]，写入到dma.dst中
  3. 3、dma.cmd==1时，idx=dma.dst-0x40000,addr=dma_buf[idx]，将其写入到dma.src中（第二个参数可以通过调试得到其地址就是dma_buf[dma.dst-0x40000]
至此可以找到漏洞点在hitb_dma_timer，因为dma.src和dma.dst都是可以通过hitb_mmio_write函数进行控制，因此可以随意指定dma_buf的索引进行任意地址读写。  
利用思路为
  1. 1、使得idx = 0x10000，泄露dma_buf后面的enc函数指针，计算得到system函数地址
  2. 2、使得idx=0x10000，修改enc函数指针为system函数
  3. 3、在&dma_buf[0]中写入”cat flag”指令，并调用enc加密函数
[参考exp](https://github.com/ray-cp/vm-escape/blob/master/qemu-escape/hitb-gsec-2017-babyqemu/exp.c)
###  Step3 : 调试
写好exp.c后将其打包进rootfs.cpio中
    cc -O0 -static -o exp exp.c
    cp exp core/root
    cd core
    find . | cpio -o -H newc | gzip > ../rootfs.cpio
启动后查看qemu的pid并附加上去，下断点开始调试
    $ ps -ax | grep qemu
    $ sudo gdb -q --pid=[pid]
    pwndbg> file qemu-system-x86_64
    pwndbg> b ...
    pwndbg> c
####  下断点问题
在我第一次下断点的时候遇到一个问题
应该是因为设置断点的地址只是个偏移量，如果程序开启PIE，就不能成功插入
解决办法：重新附加到进程即可，或者获得程序基址计算断点的真实地址
    pwndbg> detach
    pwndbg> attach [pid]
####  dma_timer函数触发
在调试exp过程中遇到一个细节问题，在如果想触发hitb_dma_timer而传入addr=152后，没有sleep，那么程序不会调用hitb_dma_timer，从而泄露不了数据
这是因为timer_mod的参数expire_time表示超过这个时间才会去调用cb(callback)回调函数，因此exp中如果调用hitb_dma_timer，都需要添加sleep函数。
## 2018_seccon_q-escape
这题通过魔改原有设备中的代码而形成的漏洞，一般来说代码量比较大，最好使用源码进行对比分析，快速定位到漏洞点
###  Step1 ：分析设备
    [*] '~/seccon_2018_q-escape/qemu-system-x86_64'
        Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
        FORTIFY:  Enabled
解压后拿到文件系统，查看./run.sh
    #!/bin/sh
    ./qemu-system-x86_64 \
        -m 64 \
        -initrd ./initramfs.igz \
        -kernel ./vmlinuz-4.15.0-36-generic \
        -append "priority=low console=ttyS0" \
        -nographic \
        -L ./pc-bios \
        -vga std \
        -device cydf-vga \
        -monitor telnet:127.0.0.1:2222,server,nowait
设备名为cydf-vga，并且允许telnet连接上去
将qemu-system-x86_64拖入ida中，查找与设备cydf-vga相关的函数
先分析cydf_vga_class_init初始化函数，同样需要将类型转化为PCIDeviceClass
    void __fastcall cydf_vga_class_init(ObjectClass_0 *klass, void *data)
    {
      PCIDeviceClass *v2; // rbx
      PCIDeviceClass *v3; // rax
      v2 = object_class_dynamic_cast_assert(
             klass,
             "device",
             "/home/dr0gba/pwn/seccon/qemu-3.0.0/hw/display/cydf_vga.c",
             3223,
             "cydf_vga_class_init");
      v3 = object_class_dynamic_cast_assert(
             klass,
             "pci-device",
             "/home/dr0gba/pwn/seccon/qemu-3.0.0/hw/display/cydf_vga.c",
             3224,
             "cydf_vga_class_init");
      v3->realize = pci_cydf_vga_realize;
      v3->romfile = "vgabios-cydf.bin";
      v3->vendor_id = 0x1013;
      v3->device_id = 0xB8;
      v3->class_id = 0x300;
      v2->parent_class.desc = "Cydf CLGD 54xx VGA";
      v2->parent_class.categories[0] |= 0x20uLL;
      v2->parent_class.vmsd = &vmstate_pci_cydf_vga;
      v2->parent_class.props = pci_vga_cydf_properties;
      v2->parent_class.hotpluggable = 0;
    }
可以看到ctdf_vga这个pci设备的device_id=0xb8，vendor_id=0x1013。并且可以看到其parent_class描述为Cydf
CLGD 54xx VGA，于是在源码中搜索这个字符串
    leo@ubuntu:~/qemu-5.0.0/hw/display
    $ grep -r "Cydf CLGD 54xx VGA" ./
    leo@ubuntu:~/qemu-5.0.0/hw/display
    $ grep -r "CLGD 54xx VGA" ./
    ./cirrus_vga_rop2.h: * QEMU Cirrus CLGD 54xx VGA Emulator.
    Binary file ./cirrus_vga.o matches
    ./cirrus_vga_internal.h: * QEMU Cirrus CLGD 54xx VGA Emulator, ISA bus support
    ./cirrus_vga_isa.c: * QEMU Cirrus CLGD 54xx VGA Emulator, ISA bus support
    Binary file ./.cirrus_vga.c.swp matches
    ./cirrus_vga_rop.h: * QEMU Cirrus CLGD 54xx VGA Emulator.
    ./cirrus_vga.c: * QEMU Cirrus CLGD 54xx VGA Emulator.
    ./cirrus_vga.c:    dc->desc = "Cirrus CLGD 54xx VGA";
发现源码中cirrus_vga.c出现类似的字符串，应该就是通过魔改Cirrus CLGD 54xx VGA Emulator设备形成的Cydf设备。
启动qemu时出现的错误及解决方法
    $ ./run.sh
    ./qemu-system-x86_64: error while loading shared libraries: libcapstone.so.3: cannot open shared object file: No such file or directory
    $ sudo apt-get install libcapstone3
    / # lspci
    00:00.0 Class 0600: 8086:1237
    00:01.3 Class 0680: 8086:7113
    00:03.0 Class 0200: 8086:100e
    00:01.1 Class 0101: 8086:7010
    00:02.0 Class 0300: 1234:1111
    00:01.0 Class 0601: 8086:7000
    00:04.0 Class 0300: 1013:00b8 -> cydf_vga
    / # cat /sys/devices/pci0000\:00/0000\:00\:04.0/resource
    0x00000000fa000000 0x00000000fbffffff 0x0000000000042208
    0x00000000febc1000 0x00000000febc1fff 0x0000000000040200
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x0000000000000000 0x0000000000000000 0x0000000000000000
    0x00000000febb0000 0x00000000febbffff 0x0000000000046200
可以看到存在3个mmio空间  
在pci_cydf_vga_realize函数中，关注cydf_init_common函数
    //cydf_init_common
    memory_region_init_io(&s->cydf_vga_io, owner, &cydf_vga_io_ops, s, "cydf-io", 0x30uLL);
    memory_region_init_io(&s->low_mem, owner, &cydf_vga_mem_ops, s, "cydf-low-memory", 0x20000uLL);
    memory_region_init_io(&s->cydf_mmio_io, owner, &cydf_mmio_io_ops, s, "cydf-mmio", 0x1000uLL);
只关注跟cydf这个pci设备有关的内存空间函数，可以发现注册了一个0x30的PMIO空间、一个0x20000的MMIO空间以及一个0x1000的MMIO空间。但时在resource文件中没有看到PMIO的端口范围，于是查看/proc/ioports
    / # cat /proc/ioports
    ...
    03c0-03df : vga+
    ...
发现vga+的端口范围正好为0x30的大小  
根据[vgamem](http://www.osdever.net/FreeVGA/vga/vgamem.htm)中所描述，VGA显存在地址空间中的映射范围为0xa0000-0xbffff。因此查看/proc/iomem找到vga的地址空间
    / # cat /proc/iomem
    ...
    000a0000-000bffff : PCI Bus 0000:00
    ...
从cydf_vga_io_ops、cydf_vga_mem_ops以及cydf_mmio_io_ops得到内存操作函数
    cydf_vga_ioport_read
    cydf_vga_ioport_write
    cydf_vga_mem_read
    cydf_vga_mem_write
    cydf_mmio_read
    cydf_mmio_write
###  Step2 ：分析函数
分析功能函数前，需要先搞懂设备的结构体，在Local type中搜索Cydf可以找到CydfVGAState  
通过对比cydf_vga_mem_write与cirrus_vga_mmio_write发现，原来cirrus_vga_mmio_write函数只有2种情况：addr
=0x18100，需要重点分析这部分分支的逻辑。
    //cydf_vga_mem_write
        v6 = 205 * opaque->vga.sr[0xCC];
        LOWORD(v6) = opaque->vga.sr[0xCC] / 5u;
        v7 = opaque->vga.sr[0xCC] - 5 * v6;//sr[0xcc]%5
        if ( *&opaque->vga.sr[205] )//idx=mem_value&0xff0000
          LODWORD(mem_value) = (opaque->vga.sr[205] vga.sr[206] vga.vram_ptr + 2 * (v24 + 4925)) )
            __printf_chk(1LL);
        }
        else
        {
          if ( v7 vs.buf[cur_size++]=mem_value
              if ( BYTE2(mem_value) > 0x10uLL )
                return;
              v8 = (opaque + 16 * BYTE2(mem_value));
              v9 = v8->vs[offsetof(CydfVGAState, vga)].buf;
              if ( !v9 )
                return;
              v10 = v8->vs[0].cur_size;
              if ( v10 >= v8->vs[0].max_size )
                return;
    LABEL_26:
              v8->vs[0].cur_size = v10 + 1;
              v9[v10] = mem_value;
              return;
            }
            goto LABEL_35;
          }
          if ( v7 != 3 )
          {
            if ( v7 == 4 )
            {//opaque->vs.buf[cur_size++]=mem_value
            //no check for cur_size
              if ( BYTE2(mem_value) > 0x10uLL )
                return;
              v8 = (opaque + 16 * BYTE2(mem_value));
              v9 = v8->vs[0].buf;
              if ( !v9 )
                return;
              v10 = v8->vs[0].cur_size;
              if ( v10 > 0xFFF )
                return;
              goto LABEL_26;
            }
    LABEL_35:
            //v7==0
            //opaque->vs.buf[vulncnt++]=malloc(mem_value)
            v20 = vulncnt;
            if ( vulncnt vs[0].buf = v21;
              if ( v21 )
              {
                vulncnt = v20 + 1;
                v22->vs[0].max_size = mem_valuea;
              }
            }
            return;
          }
          if ( BYTE2(mem_value) <= 0x10uLL )