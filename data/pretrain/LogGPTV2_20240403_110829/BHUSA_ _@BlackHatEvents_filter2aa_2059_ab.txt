Registers
LMAC pc = 0x0006107e
Transmit FW
Get pc value
00060000-00061eff: loader
00401000-0040243b: data
00402e80-00402fff: stack
31
#BHUSA   @BlackHatEvents
Information Classification: General
Discovering the Loader
Linux
Wi-Fi chip
iwlwiÔ¨Å
Memory
Registers
LMAC pc = 0x0006107e
Transmit FW
Get pc value
00060000-00061eff: loader
00401000-0040243b: data
00402e80-00402fff: stack
TOCTOU attack? (Transmit FW, Verify FW, Transmit patched FW)
SECURE
32
#BHUSA   @BlackHatEvents
Information Classification: General
Discovering the Loader
Linux
Wi-Fi chip
iwlwiÔ¨Å
Memory
Registers
LMAC pc = 0x0006107e
Transmit FW
Get pc value
00060000-00061eff: loader
00401000-0040243b: data
00402e80-00402fff: stack
TOCTOU attack? (Transmit FW, Verify FW, Transmit patched FW)
Can Linux modify the data or the stack?
SECURE
33
VULN
#BHUSA   @BlackHatEvents
Information Classification: General
Bypassing the signature verification
34
1. Load a modiÔ¨Åed Ô¨Årmware
Wi-Fi chip
Memory
00000000-...: Ô¨Årmware
00402e80-...: loader stack
2. Change a return address
3. Wait
Intel Wireless-AC 9560
‚õî  FAIL
Intel Wireless-AC 8260
üéâ  SUCCESS
INTEL-SA-00621
CVE-2022-21181
published on 2022-08-09
#BHUSA   @BlackHatEvents
Information Classification: General
Bypassing the signature verification
35
1. Load a modiÔ¨Åed Ô¨Årmware
Wi-Fi chip
Memory
00000000-...: Ô¨Årmware
00402e80-...: loader stack
2. Change a return address
3. Wait
Intel Wireless-AC 9560
‚õî  FAIL
Intel Wireless-AC 8260
üéâ  SUCCESS
Make the chip commit 
its Data Cache
(196 fake FW sections)
üéâ  SUCCESS
INTEL-SA-00621
CVE-2022-21181
published on 2022-08-09
#BHUSA   @BlackHatEvents
Information Classification: General
Dynamic analysis
36
36
-X
We have arbitrary code execution on the chip. Now what?
#BHUSA   @BlackHatEvents
Information Classification: General
Tracing
-
Tell which functions are executed
-
Replace the Ô¨Årst instruction (push_s blink) of every functions with:
-
LMAC: trap_s 0
-
UMAC: invalid instruction 
-
Hook the exception vector in the exception handler
-
Log the address to a unused buffer (0xc004ad00 - 0xc0050000)
-
Emulate push_s blink and return after the patched instruction
-
Write hooks thanks to debug mode
-
Read the shared buffer from the host in a loop
37
#BHUSA   @BlackHatEvents
Information Classification: General
On-Chip Debugger
Goals: retrieve memory and register values to ease reverse engineering
38
#BHUSA   @BlackHatEvents
Information Classification: General
On-Chip Debugger
-
A debugger stub (PIC) is written to a Ô¨Åxed address
-
4 commands:
-
Read register
-
Write to memory (1 / 2 / 4 bytes)
-
Read from memory (1 / 2 / 4 bytes)
-
Resume execution
-
Communication with the host through unused registers
-
Targeted function pointers are replaced with the debugger address
-
Allows to instrument a set of UMAC/LMAC functions
-
Less powerful than a GDB stub
39
#BHUSA   @BlackHatEvents
Information Classification: General
InVitroDbg
-
Idea from Guillaume Delugr√©
-
Closer to metal: Reverse engineering the Broadcom NetExtreme's Ô¨Årmware
Hack.lu 2010
-
Emulate Ô¨Årmware
-
Firmware execution on the host
-
Forward some memory accesses to the on-chip debugger
-
QEMU user with custom TCG plugin
-
GDB server
40
#BHUSA   @BlackHatEvents
Information Classification: General
Firmware emulation with IO memory accesses
41
#BHUSA   @BlackHatEvents
Information Classification: General
DMA (Direct Memory Access)
and the Paging Memory
42
-X
42
Experiment: can the chip do DMA Attacks?
#BHUSA   @BlackHatEvents
Information Classification: General
The Additional Code in the File
43
Firmware File
- NUM_OF_CPU 2
- SEC_RT 00404000
- SEC_RT 00800000
- SEC_RT 00000000
- SEC_RT 00456000
‚Ä¶
- SEC_RT 00405000
- SEC_RT c0080000
- SEC_RT c0880000
- SEC_RT 80448000
‚Ä¶
Wi-Fi chip
Memory
00000000..00037fff (229376 bytes)
c0080000..c008ffff (65536 bytes)
00404000..004042b7 (696 bytes)
00405000..004052b7 (696 bytes)
80448000..80455ad3 (56020 bytes)
00456000..0048d873 (227444 bytes)
00800000..00817fff (98304 bytes)
c0880000..c0887fff (32768 bytes)
LMAC
UMAC
#BHUSA   @BlackHatEvents
Information Classification: General
The Additional Code in the File
44
Firmware File
- NUM_OF_CPU 2
- SEC_RT 00404000
- SEC_RT 00800000
- SEC_RT 00000000
- SEC_RT 00456000
‚Ä¶
- SEC_RT 00405000
- SEC_RT c0080000
- SEC_RT c0880000
- SEC_RT 80448000
‚Ä¶
- SEC_RT aaaabbbb
- SEC_RT 00000000
- SEC_RT 01000000
Wi-Fi chip
Memory
00000000..00037fff (229376 bytes)
c0080000..c008ffff (65536 bytes)
00404000..004042b7 (696 bytes)
00405000..004052b7 (696 bytes)
80448000..80455ad3 (56020 bytes)
00456000..0048d873 (227444 bytes)
00800000..00817fff (98304 bytes)
c0880000..c0887fff (32768 bytes)
LMAC
UMAC
aaaabbbb: separator (4 bytes)
00000000..00000297 (664 bytes)
01000000..0103afff (241664 bytes)
#BHUSA   @BlackHatEvents
Information Classification: General
The Paging Memory is like Linux‚Äôs swap mechanism
DMA request
if needed
00000000-3fffffff
Memory Management Unit (MMU)
01000xxx is not present
01001xxx is not present
01002xxx is not present
‚Ä¶
‚ÄúPaging Memory‚Äù
Data stored by iwlwiÔ¨Å
 (236 KiB, 59 pages)
Main physical memory
(managed by Linux)
UMAC virtual memory
01000000-01ffffff
80000000-bfffffff
c0000000-ffffffff
UMAC physical memory
00422000-00447fff
 (152 KiB, 38 pages)
MMU ConÔ¨Åguration
45
#BHUSA   @BlackHatEvents
Information Classification: General
The Paging Memory is like Linux‚Äôs swap mechanism
DMA request
if needed
00000000-3fffffff
Memory Management Unit (MMU)
01000xxx is not present
01001xxx is not present
01002xxx is at 00432xxx
‚Ä¶
‚ÄúPaging Memory‚Äù
Data stored by iwlwiÔ¨Å
 (236 KiB, 59 pages)
Main physical memory
(managed by Linux)
UMAC virtual memory
01000000-01ffffff
80000000-bfffffff
c0000000-ffffffff
UMAC physical memory
00422000-00447fff
 (152 KiB, 38 pages)
MMU ConÔ¨Åguration
46
#BHUSA   @BlackHatEvents
Information Classification: General
The Paging Memory
How is the integrity ensured?
-
RSA signature on the 59 pages together
-
Each page is sent separately
-
Each page can be modiÔ¨Åed by the Ô¨Årmware, but not by Linux
Solution: each page is protected by a 32-bit checksum
-
Universal Message Authentication Code (https://en.wikipedia.org/wiki/UMAC)
-
Random per-boot 4096-byte secret key
-
Integrity is broken if an attacker can read the checksums
-
They are located at 0x0048f400, not readable from Linux
47
#BHUSA   @BlackHatEvents
Information Classification: General
The Paging Memory is like Linux‚Äôs swap mechanism
DMA request
if needed
00000000-3fffffff
Memory Management Unit (MMU)
01000xxx is not present
01001xxx is not present
01002xxx is at 00432xxx
‚Ä¶
‚ÄúPaging Memory‚Äù
Data stored by iwlwiÔ¨Å
 (236 KiB, 59 pages)
Main physical memory
(managed by Linux)
UMAC virtual memory
01000000-01ffffff
80000000-bfffffff
c0000000-ffffffff
UMAC physical memory
00422000-00447fff
 (152 KiB, 38 pages)
MMU ConÔ¨Åguration
48
DMA Attack
Other memory
#BHUSA   @BlackHatEvents
Information Classification: General
Demo!
https://asciinema.org/a/CWD6HMr4iaw0Rj3S95p9J3vII
49
#BHUSA   @BlackHatEvents
Information Classification: General
The host physical addresses are used/managed by the chip. Can it do arbitrary 
DMA requests?
-
YES! Demo!
What about the IOMMU?
-
By default on Ubuntu, the IOMMU is not enabled
-
Protection: add intel_iommu=on to the kernel command line
(Ab)using The Paging Memory
50
[  259.578089] DMAR: DRHD: handling fault status reg 3
[  259.578094] DMAR: [DMA Read] Request device [00:14.3] PASID ffffffff fault 
addr 406a00000 [fault reason 06] PTE Read access is not set
[  261.600645] iwlwifi 0000:00:14.3: Error sending UNKNOWN: time out after 
2000ms.
‚Ä¶
[  261.601783] iwlwifi 0000:00:14.3: 0x00000084 | NMI_INTERRUPT_UNKNOWN
#BHUSA   @BlackHatEvents
Information Classification: General
Conclusion
51
-X
51
#BHUSA   @BlackHatEvents
Information Classification: General
Context
-
Up-to-date Ubuntu 18.04 LTS
-
HTTP server
-
Android smartphone
52
#BHUSA   @BlackHatEvents
Information Classification: General
TDLS crash analysis
-
Tunneled Direct Link Setup (TDLS): incompatible implementations
-
Not exploitable
-
Update not available on some Linux distros (eg. Ubuntu 18.04 LTS)
-
Remote Ô¨Årmware crash with a single Wi-Fi packet
53
#BHUSA   @BlackHatEvents
Information Classification: General
Conclusion
Takeaways:
-
Analyzing Intel Wi-Fi chips Ô¨Årmware
https://github.com/Ledger-Donjon/intel-wiÔ¨Å-research-tools
-
Finding vulnerabilities to achieve code execution on the chip
-
Verifying security protections (IOMMU against DMA attack)
What‚Äôs more?
-
Wi-Fi frame parsing: more vulnerabilities to be found?
-
Bluetooth interface on the same chip: more complexity!
-
WoWLAN (Wake-on-Wireless Local Area Network): Low-Power mode!
Groundwork for other security researchers
54
#BHUSA   @BlackHatEvents
Information Classification: General
Questions?
55
-X
55
https://github.com/Ledger-Donjon/intel-wiÔ¨Å-research-tools
@IooNag