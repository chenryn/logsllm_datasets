# BlackHat USA Event Presentation

## Information Classification: General

### Discovering the Loader
- **Environment**: Linux, Wi-Fi chip (iwlwifi)
- **Memory Layout**:
  - `00060000-00061eff`: Loader
  - `00401000-0040243b`: Data
  - `00402e80-00402fff`: Stack
- **Registers**:
  - LMAC PC: `0x0006107e`
- **Transmit FW**:
  - Get PC value
  - TOCTOU attack? (Transmit FW, Verify FW, Transmit patched FW)
  - Can Linux modify the data or the stack?

### Bypassing Signature Verification
- **Steps**:
  1. Load a modified firmware.
  20. Change a return address.
  3. Wait.
- **Results**:
  - Intel Wireless-AC 9560: ❌ FAIL
  - Intel Wireless-AC 8260: ✅ SUCCESS
- **CVE-2022-21181**:
  - Published on 2022-08-09
  - INTEL-SA-00621

### Dynamic Analysis
- **Objective**: We have arbitrary code execution on the chip. Now what?
- **Tracing**:
  - Identify executed functions.
  - Replace the first instruction of each function with a trap.
  - Hook the exception vector in the exception handler.
  - Log addresses to an unused buffer.
  - Emulate the original instruction and return after the patched instruction.
  - Write hooks using debug mode.
  - Continuously read the shared buffer from the host.

### On-Chip Debugger
- **Goals**: Retrieve memory and register values to ease reverse engineering.
- **Features**:
  - Debugger stub (PIC) written to a fixed address.
  - Commands:
    - Read register.
    - Write to memory (1/2/4 bytes).
    - Read from memory (1/2/4 bytes).
    - Resume execution.
  - Communication through unused registers.
  - Instrumentation of UMAC/LMAC functions.
  - Less powerful than a GDB stub.

### InVitroDbg
- **Concept by Guillaume Delugré**:
  - Closer to metal: Reverse engineering the Broadcom NetExtreme's firmware (Hack.lu 2010).
  - Emulate firmware.
  - Execute firmware on the host.
  - Forward some memory accesses to the on-chip debugger.
  - QEMU user with custom TCG plugin.
  - GDB server.

### Firmware Emulation with IO Memory Accesses
- **DMA (Direct Memory Access)**:
  - Experiment: Can the chip perform DMA attacks?
  - Paging Memory: Similar to Linux’s swap mechanism.
  - Integrity ensured via RSA signature and 32-bit checksums.
  - Checksums are located at `0x0048f400` and not readable from Linux.

### The Paging Memory
- **Configuration**:
  - Main physical memory managed by Linux.
  - UMAC virtual memory.
  - UMAC physical memory.
  - MMU Configuration.

### DMA Attack
- **Host Physical Addresses**:
  - Managed by the chip.
  - Arbitrary DMA requests possible.
  - IOMMU protection: Add `intel_iommu=on` to the kernel command line.

### Demo
- **Link**: [asciinema.org/a/CWD6HMr4iaw0Rj3S95p9J3vII](https://asciinema.org/a/CWD6HMr4iaw0Rj3S95p9J3vII)

### Conclusion
- **Context**:
  - Up-to-date Ubuntu 18.04 LTS.
  - HTTP server.
  - Android smartphone.
- **TDLS Crash Analysis**:
  - Tunneled Direct Link Setup (TDLS): Incompatible implementations.
  - Not exploitable.
  - Update not available on some Linux distros (e.g., Ubuntu 18.04 LTS).
  - Remote firmware crash with a single Wi-Fi packet.
- **Takeaways**:
  - Analyzing Intel Wi-Fi chips firmware.
  - Finding vulnerabilities for code execution.
  - Verifying security protections (IOMMU against DMA attacks).
  - Potential areas for further research: Wi-Fi frame parsing, Bluetooth interface, WoWLAN (Wake-on-Wireless Local Area Network).

### Questions?

### GitHub Repository
- [Intel WiFi Research Tools](https://github.com/Ledger-Donjon/intel-wifi-research-tools)

@IooNag