### Oxymoron and Isomeron: Code Randomization Techniques

Oxymoron [7] introduces fine-grained code randomization that is compatible with code sharing. However, page-level code randomization has been shown to be ineffective by Isomeron [24], which demonstrates that even the leakage of a single memory page can still enable a successful Return-Oriented Programming (ROP) attack. Isomeron [24] mitigates Just-In-Time (JIT)-ROP attacks by creating execution path diversity through multiple code versions. Although attackers can read the code, they cannot determine which version will actually be executed, thereby exponentially reducing the likelihood of a successful gadget chain execution.

### Enforcing Execute-Only Memory Policy

Recent research efforts have focused on enforcing an execute-only memory policy to prevent JIT-ROP attacks from reading gadgets from memory [6, 13, 17, 20, 32, 51, 66, 74]. This can be achieved using various techniques, such as page table manipulation [6], split Translation Lookaside Buffers (TLBs) [32], hardware virtualization extensions [20, 21, 66, 74], or software-fault isolation [13, 51]. For example, Readactor [20] and Readactor++ [21] leverage the Extended Page Table (EPT) feature of Intel processors to protect all code pointers by redirecting them to "proxy" pages containing trampoline code stubs. This approach defeats JIT-ROP attacks because leaked code pointers point to non-readable "proxy" pages, preventing further information leakage to attackers. SECRET provides similar protection through code pointer remapping without requiring recompilation or special hardware features.

### LR2: Protecting Low-End ARM Devices

LR2 [14] prevents code and code pointer disclosure in a manner similar to our work. It focuses on low-end ARM devices and restricts memory reads within a specific range by masking load instructions. All control flows to functions are intercepted by trampolines that use direct jumps to relay control. Unlike SECRET, which operates directly on stripped binaries, LR2 operates at the source code level.

### Dynamic Binary Instrumentation (DBI)

Dynamic binary instrumentation (DBI) systems [15, 41, 59] use a code cache to execute translated application code. Similar to shadow code, the code cache is isolated, and indirect control transfer targets are translated using an address mapping table. For performance reasons, the code cache is typically both writable and executable, making it vulnerable to code corruption attacks. In contrast, shadow code is never writable, thus immune to such attacks. Recent research [65] has proposed securing the code cache using two processes—one for code generation and another for execution—though this technique has not yet been integrated into existing DBI platforms.

A key difference between a code cache used in DBI systems and shadow code is that the latter is self-contained and executes independently, while the former requires continuous orchestration by the DBI runtime. This orchestration involves many data pointers in the code cache that reference critical data structures of the binary translator, potentially leaking their locations.

### Limitations

#### Use of RTTI
Given our focus on Commercial Off-The-Shelf (COTS) binaries, our ability to identify code pointers is limited due to the lack of certain types of information. For instance, with the help of Run-Time Type Information (RTTI) in C++ programs, we can reliably discover all virtual function information. When such information is unavailable, we must rely on conservative static analysis, focusing on the direct data flow between constructors and the `new` function. However, when an object is created on the stack, the `new` function is not called, as memory can be easily allocated on the stack. In such cases, SECRET cannot detect these virtual tables. Fortunately, most binaries do contain RTTI, and most objects are allocated on the heap rather than the stack. We are also working on more conservative techniques to improve the identification of code pointers involving non-virtual functions.

#### Applicability to x86-64 Platforms
Our current prototype supports only 32-bit x86 platforms, as it is built on top of PSI, which only supports 32-bit systems. Some aspects of SECRET have been implemented and evaluated on x86_64, as described in Sections 3.1.2 and 4.1.3. A more complete implementation would require significant effort but is not conceptually more challenging.

#### DWARF Information
One might argue that using DWARF information contradicts the claim of handling COTS binaries. The DWARF information used by SECRET is not the same as the optional debugging information, which is also emitted in the DWARF format. Instead, we rely solely on the exception handling information located in the `.eh_frame` and `.eh_frame_hdr` sections. This information is present even in stripped binaries, as it is essential for exception handling in C++ programs and even in C programs when stack unwinding involves stack frames of both C and C++ code.

### Conclusion

Defending against advanced code reuse attacks that exploit memory disclosure vulnerabilities is increasingly important. To this end, breaking the ability of attackers to read the executable memory segments of a process, or even to infer the location of potential gadgets, can be a significant roadblock. In this paper, we achieve this goal by designing and implementing SECRET, which introduces two novel code transformation techniques: code space isolation and code pointer remapping. The former prevents read accesses to the executable memory of the instrumented code (a protected version of an application’s original code), while the latter decouples its required code pointers from those of the original code. Our experimental results demonstrate that SECRET can protect real-world COTS applications while incurring only a modest performance overhead.