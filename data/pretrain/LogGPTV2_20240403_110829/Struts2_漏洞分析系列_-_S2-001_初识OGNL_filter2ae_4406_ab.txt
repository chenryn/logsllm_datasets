上述配置不难理解，比如tag代表标签，attribute代表属性，说几个需要了解的配置项。
  * tag-class：标签处理类
  * body-content：start-tag与end-tag中间所支持的内容，有四种类型：tagdependent（文本）、empty（空）、jsp（支持JSP语法）、scriptless（支持文本、EL表达式和JSP语法）
  * rtexprvalue：属性值是否支持EL表达式或JSP语法
关于tld的配置我们大概了解完了，接着来看看tag-class这个关键类，它控制了整个标签的生命周期，如获取当前请求上下文、写入模板到页面等。
先简单了解下解析一个标签时对应tag-class的方法执行顺序（网上随便找的一张图）：
这里可以看到，一个JSP文件处理某个标签的解析时，首先会调用到这个标签处理类的doStartTag方法，随后分三种Body的配置进行调度，三条线分别对应为SKIP_BODY、EVAL_BODY_INCLUDE、EVAL_BODY_BUFFERED等。如果是EVAL_BODY_BUFFERED则还会根据前面执行结果的返回值判断是否需要再走一遍EVAL的流程。最后再调用doEndTag结束标签的渲染。
## 0x02 漏洞分析
漏洞代码示例：
        Struts2 Demo
    Struts2 Demo
        "/>
S2-001的核心部分在于渲染，是渲染过程中产生了表达式注入，那么就让我们通过textfield这个标签来看看具体的渲染流程吧。
首先textfield这个标签对应的class为org.apache.struts2.views.jsp.ui.TextFieldTag，继承关系如下图：
根据之前的学习可以得知JSP在解析标签时会首先调用doStartTag方法，而TextFieldTag并没有此方法，因此会根据继承关系向上调用，最后调用到的是org.apache.struts2.views.jsp.ComponentTagSupport#doStartTag。
###  2.0 doStartTag
    org.apache.struts2.views.jsp.ComponentTagSupport#doStartTag
    public int doStartTag() throws JspException {
            this.component = this.getBean(this.getStack(), (HttpServletRequest)this.pageContext.getRequest(), (HttpServletResponse)this.pageContext.getResponse());
            Container container = Dispatcher.getInstance().getContainer();
            container.inject(this.component);
            this.populateParams();
            boolean evalBody = this.component.start(this.pageContext.getOut());
            if (evalBody) {
                return this.component.usesBody() ? 2 : 1;
            } else {
                return 0;
            }
        }
在doStartTag中，首先会通过getBean方法获取一个`org.apache.struts2.components.Component`对象，可以看到在创建对象时传了三个值，分别是stack、request以及response，这三个值最后会被赋到对应的Component对象的属性中。
这个getBean方法需要tagClass自实现而不是调用任何默认的方法，可以理解如果要实现一个Tag，此处是必须要实现的一个方法，对于TextFieldTag来说，对应的方法如下：
    org.apache.struts2.views.jsp.ui.TextFieldTag#getBean
    public Component getBean(ValueStack stack, HttpServletRequest req, HttpServletResponse res) {
            return new TextField(stack, req, res);
        }
现在我们知道这里的Component对象实际上就是TextField对象，其继承关系如下：
后续会接着调用populateParams方法用于初始化属性：
    org.apache.struts2.views.jsp.ui.TextFieldTag#populateParams
    protected void populateParams() {
            super.populateParams();
            TextField textField = (TextField)this.component;
            textField.setMaxlength(this.maxlength);
            textField.setReadonly(this.readonly);
            textField.setSize(this.size);
        }
这里的调用逻辑是，逐层调用父类的populateParams方法，最后再设置自身特有的属性，比如对于textfield来说，自身特有的属性就是maxlength、readonly、size这几个属性。
最后会调用Component对象的start方法获得一个布尔值，由于TextField对象没有实现此方法，所以调用的是默认的方法：
    org.apache.struts2.components.Component#start
    public boolean start(Writer writer) {
      return true;
    }
默认这里就会直接返回true，因此进入if语句块，这里根据usesBody返回值决定返回的是2还是1，由于TextField对象没有实现此方法，因此调用的还是默认的方法：
    org.apache.struts2.components.Component#usesBody
    public boolean usesBody() {
            return false;
        }
由于此处返回的是false，因此doStartTag最终返回的值为1，这里有一个要吐槽的点，作为一个开发来说，返回值不应该用0/1/2/3这种毫无意义的返回值，这样后人也难以维护，通常情况下需要用一个常量来代替。
这里的2、1代表什么呢？查阅资料后发现，它们其实是有对应常量表示的，只不过Struts的开发没用罢了：
    javax.servlet.jsp.tagext.BodyTag
    int EVAL_BODY_TAG = 2;
    int EVAL_BODY_BUFFERED = 2;
    javax.servlet.jsp.tagext.IterationTag
    int EVAL_BODY_AGAIN = 2;
    javax.servlet.jsp.tagext.Tag
    int SKIP_BODY = 0;
    int EVAL_BODY_INCLUDE = 1;
    int SKIP_PAGE = 5;
    int EVAL_PAGE = 6;
从上面就可以看到每个数字对应的常量了，这不就好理解多了嘛，根据常量的名字，可以直接对到上述图的调用流程中，由于此处返回的是1，对应为`EVAL_BODY_INCLUDE`。
根据调用流程，此处应该会调用doAfterBody方法，而TextFieldTag没实现这个方法，因此按理来说会调用到默认的方法：
    javax.servlet.jsp.tagext.BodyTagSupport#doAfterBody
    public int doAfterBody() throws JspException {
            return 0;
        }
然鹅我在调试过程中发现没有这一步，而是直接进入到了最后的doEndTag中，不知道是网上流传的图有误，还是本地的调试环境出了问题，并未深究。
上面就是完整的doStartTag的流程了，可以简单得出一个结论，doStartTag主要用于初始化Component（Bean）对象，并且初始化属性，并没有做过多的解析。
###  2.1 doEndTag
    org.apache.struts2.views.jsp.ComponentTagSupport#doEndTag
    public int doEndTag() throws JspException {
            this.component.end(this.pageContext.getOut(), this.getBody());
            this.component = null;
            return 6;
        }
在doEndTag方法中会首先调用Component对象的end方法，并传入JSP Writer和当前的Body：
    org.apache.struts2.components.UIBean#end
    public boolean end(Writer writer, String body) {
            this.evaluateParams();
            try {
                super.end(writer, body, false);
                this.mergeTemplate(writer, this.buildTemplateName(this.template, this.getDefaultTemplate()));
            } catch (Exception var7) {
                LOG.error("error when rendering", var7);
            } finally {
                this.popComponentStack();
            }
            return false;
        }
在这里首先会调用evaluateParams方法，目前暂时还不知道这方法干啥用的，但是看到evaluate就感觉不简单，有种表达式解析的意思，跟进去瞅一眼：
    org.apache.struts2.components.UIBean#evaluateParams
    public void evaluateParams() {
            this.addParameter("templateDir", this.getTemplateDir());
            this.addParameter("theme", this.getTheme());
            String name = null;
            if (this.key != null) {
                if (this.name == null) {
                    this.name = this.key;
                }
                if (this.label == null) {
                    this.label = "%{getText('" + this.key + "')}";
                }
            }
            if (this.name != null) {
                name = this.findString(this.name);
                this.addParameter("name", name);
            }
            if (this.label != null) {
                this.addParameter("label", this.findString(this.label));
            }
            if (this.labelPosition != null) {
                this.addParameter("labelposition", this.findString(this.labelPosition));
            }
            if (this.requiredposition != null) {
                this.addParameter("requiredposition", this.findString(this.requiredposition));
            }
            if (this.required != null) {
                this.addParameter("required", this.findValue(this.required, Boolean.class));
            }
            if (this.disabled != null) {
                this.addParameter("disabled", this.findValue(this.disabled, Boolean.class));
            }
            if (this.tabindex != null) {
                this.addParameter("tabindex", this.findString(this.tabindex));
            }
            if (this.onclick != null) {
                this.addParameter("onclick", this.findString(this.onclick));
            }
            if (this.ondblclick != null) {
                this.addParameter("ondblclick", this.findString(this.ondblclick));
            }
            if (this.onmousedown != null) {
                this.addParameter("onmousedown", this.findString(this.onmousedown));
            }
            if (this.onmouseup != null) {
                this.addParameter("onmouseup", this.findString(this.onmouseup));
            }
            if (this.onmouseover != null) {
                this.addParameter("onmouseover", this.findString(this.onmouseover));
            }
            if (this.onmousemove != null) {
                this.addParameter("onmousemove", this.findString(this.onmousemove));
            }
            if (this.onmouseout != null) {
                this.addParameter("onmouseout", this.findString(this.onmouseout));
            }
            if (this.onfocus != null) {
                this.addParameter("onfocus", this.findString(this.onfocus));
            }
            if (this.onblur != null) {
                this.addParameter("onblur", this.findString(this.onblur));
            }
            if (this.onkeypress != null) {
                this.addParameter("onkeypress", this.findString(this.onkeypress));
            }
            if (this.onkeydown != null) {
                this.addParameter("onkeydown", this.findString(this.onkeydown));
            }
            if (this.onkeyup != null) {
                this.addParameter("onkeyup", this.findString(this.onkeyup));
            }
            if (this.onselect != null) {
                this.addParameter("onselect", this.findString(this.onselect));
            }
            if (this.onchange != null) {
                this.addParameter("onchange", this.findString(this.onchange));
            }
            if (this.accesskey != null) {
                this.addParameter("accesskey", this.findString(this.accesskey));
            }
            if (this.cssClass != null) {
                this.addParameter("cssClass", this.findString(this.cssClass));
            }
            if (this.cssStyle != null) {
                this.addParameter("cssStyle", this.findString(this.cssStyle));
            }
            if (this.title != null) {
                this.addParameter("title", this.findString(this.title));
            }
            if (this.parameters.containsKey("value")) {
                this.parameters.put("nameValue", this.parameters.get("value"));
            } else if (this.evaluateNameValue()) {
                Class valueClazz = this.getValueClassType();
                if (valueClazz != null) {
                    if (this.value != null) {
                        this.addParameter("nameValue", this.findValue(this.value, valueClazz));
                    } else if (name != null) {
                        String expr = name;
                        if (this.altSyntax()) {
                            expr = "%{" + name + "}";
                        }
                        this.addParameter("nameValue", this.findValue(expr, valueClazz));
                    }
                } else if (this.value != null) {
                    this.addParameter("nameValue", this.findValue(this.value));
                } else if (name != null) {
                    this.addParameter("nameValue", this.findValue(name));
                }
            }
            Form form = (Form)this.findAncestor(Form.class);
            this.populateComponentHtmlId(form);
            if (form != null) {
                this.addParameter("form", form.getParameters());
                if (name != null) {
                    List tags = (List)form.getParameters().get("tagNames");
                    tags.add(name);
                }
            }
            if (this.tooltipConfig != null) {
                this.addParameter("tooltipConfig", this.findValue(this.tooltipConfig));
            }
            if (this.tooltip != null) {
                this.addParameter("tooltip", this.findString(this.tooltip));
                Map tooltipConfigMap = this.getTooltipConfig(this);
                if (form != null) {
                    form.addParameter("hasTooltip", Boolean.TRUE);
                    Map overallTooltipConfigMap = this.getTooltipConfig(form);
                    overallTooltipConfigMap.putAll(tooltipConfigMap);
                    Iterator i = overallTooltipConfigMap.entrySet().iterator();
                    while(i.hasNext()) {
                        Entry entry = (Entry)i.next();
                        this.addParameter((String)entry.getKey(), entry.getValue());
                    }
                } else {
                    LOG.warn("No ancestor Form found, javascript based tooltip will not work, however standard HTML tooltip using alt and title attribute will still work ");
                }
            }
            this.evaluateExtraParams();
        }
从代码上来看，此处是根据startTag初始化的属性获取对应的值，并添加到对应的Parameters中。在存在漏洞的JSP中，我只写了name一个属性，其值为username，因此这里首先会设置一个name属性，值为username到parameters中：
    if (this.name != null) {
        name = this.findString(this.name);
        this.addParameter("name", name);
    }
后面的其他属性由于我没设置，此处会直接略过不会进行解析，重点看看对value这个属性的解析：
    if (this.parameters.containsKey("value")) {
                this.parameters.put("nameValue", this.parameters.get("value"));
            } else if (this.evaluateNameValue()) {
                Class valueClazz = this.getValueClassType();
                if (valueClazz != null) {
                    if (this.value != null) {