平台
配置指令
在 web.config 文件中，将 customErrors 设置为 On 或 RemoteOaly 并
将 defaultRedirect设置为要显示的页面，确保为 defaultRedirect 配置
的页面确实位于配置的位置，这通常容易出错！
ASP.NET Web 应用程序
该配置只适用于ASP.NET资源。此外，当出现任何应用代码无法处
理的错误（500、404等）时均会显示该配置页面。
在 web.xml 文件中，使用和元素配置
J2EE Web 应用程序
500
/CustomPage .htm1
该配置只适用于专门由 Java 应用服务器处理的资源。此外，只有当
出现500错误时才会显示该配置页面。
必须对IIS进行配置以便隐藏详细的ASP错误消息。可以使用下列操
作配置该设置：
经典ASP/VBScript Web应用程序
选中了“Send text error message to cliemt”选项，并且该选项下的文本
概中存在恰当的消息。
在 php.ini 文件中，设置display_errors 为 Off。此外，在 Web 服务器
PHP Web 应用程序
配置中配置默认的错误文档。请参考下面两行表格中针对Apache 和
IS的指令。
向指向自定文页面的 Apacbe(位于配置文件内部，通常为httpd.conf)
Apache Web 服务器
添加 ErrorDocument 指令:
ErrorDocument 500 /CustomPage.htm1
346
---
## Page 361
第9章平台层防御
（表）
平台
配置指令
可以使用下列操作配置IS中的自定义错误：
s   es  S, ()
IIS 服务器
(2)在“Custom Errors”选项卡中单击“Configuration”按钮。选中需
下拉菜单中选择一个文件或URL来替换默认内容
一种可以使基于响应的错误检测变得困难的方法，是配置应用程序和Web服务睿，使之返
回相同的响应，比如不管什么错误代码（401、403、500等）均重定向到默认的首页。很明显，
采用这种策略时应该倍加小心，因为它同样会使合法的应用程序调试行为变得困难。如果设计
应用程序时包含了良好的错误处理和日志记录，而它们能够为应用管理员提供足够的细节来重
构该间题，那么此时值得考虑采用该策略。
2.使用空的默认Web站点
HTTP/1.1协议要求HTTP客户端在发送给Web服务器的请求中发送主机头部(Host
header)。为访向特定的 Web 站点，该头部值必须与Web服务器的虚拟主机配置中的主机名相
匹配。如果未找到匹配值，将返回默认的Web站点内容。例如，尝试通过IP地址连接到Web
站点时，会返回默认的Web站点内容。请思考下面的例子：
GET / HTTP/1 .1
Host : 209 , 85.229.104
下面是一些来自流行搜索引擎的链接，它们有助于保护您的Web页面免受不想要的发现：
● www.google.com/support/webmasters/bin/answer.py?hl=en&answer=35301
●http://onlinchclp.microsoft.com/en-us/bing/hh204505.aspx
6.禁止WSDL信息
通常，Web服务像Web应用一样易受SQL注入攻击。为寻找Web服务中的漏洞，攻击者
需要知道如何与Web服务通信，即需要知道Web服务所支持的通信协议（例如，SOAP、HTTP
GET等）、方法名和期望的参数。所有这些信息都可以从Web服务的WSDL（Web Services
Description Language，Web服务描述语言)文件中提取到。通常，通过在Web服务URL的结尾
添加一个？WSDL来调用该文件。好的做法是尽可能向不受欢迎的攻击者隐藏这一信息。
下面展示了如何配置一个.NETWeb服务以便不显示WSDL。可以对该配置进行修改以便
应用到应用的 web.config 或machine.config文件中：
348
---
## Page 363
第9章平台层防御
ApacheAxis(Java应用经常使用的一种SOAP（简单对象访间协议，Web服务平台）支持自定
义配置WSDL文件，用于阻止自动生成WSDL。可以在服务的WSDD(Web服务描述文档）文
件中配置wsdIFile设置以指间返回空标签的文件。
一般来说，坚决反对在面向Intermet的Web服务器上保持WSDL信息的远程访间。可以使
用可选的安全通信通道（比如加密过的e-mail)来向值得信赖的合作者提供该文件，合作者可能需
要这些信息以与Web服务进行通信。
9.4.2提高Web服务器日志的详细程度
Web服务器日志文件可以提供一些润察潜在SQL注入攻击的信息，尤其是当应用程序日
志记录机制不佳时。如果漏润位于URL参数中，我们很率运，因为Apache和IIS默认情况下
会在日志中记录该信息。如果正在保护的Web应用拥有较差的日志记录能力，请考虑配置Web
服务器以使将Referer和cookie头部记录到日志中。这么做虽然会增加日志文件的大小，但却
同时会提供润察cookie和Referer头部（它们是实现SQL注入漏润的另外的潜在位置）所带来的
潜在安全益处。Apache和IIS均要求安装额外的模块以使将POST数据记录到日志中。请参阅
9.2节“使用运行时保护”以获取向Web应用添加监视和入侵检测功能所需要使用的技术和解
决方案。
应该避免在同一主机上运行Web服务器软件和数据库服务器软件，因为这样会显著增加
Web应用的攻击面，并将之前只访间Web前端时不可能暴露的数据库服务器软件暴露给攻击
程序。例如，OracleXML数据库(XDB）会在TCP端口8080上暴露一种HTTP服务器服务。现
在，这是一种额外的探测和潜在注入的入口点。此外，攻击者可以利用这种部署场景将查询结
果写入到可通过Web访同的目录的某个文件中，并在Web浏觉器中查看该结果。
9.4.4配置网络访问控制
在分层正确的网络中，数据库服务器通常位于内部受信任网络中。这种分离通常有助于挫
败基于网络的攻击。但是，可通过面向Intermet的Web站点中的SQL注入漏洞来攻破这种受
信任网络。凭借对数据库服务器的直接访问权，攻击者可以尝试连接到同一网络的其他系统。
大多数数据库服务器平台均提供了一种或多种方法来初始化网络连接。考虑到这一点，请考虑
实现网络访问控制，以使对与内部网中其他系统的连接施加限制。可以在包含防火墙和路由器
ACL的网络层实现该控制，也可以使用IPSec这样的主机层机制来实现该控制。此外，确保施
加合适的网络访间控制以阻止带外(outbound)网络连接。因为攻击者可以利用这种连接并借助
可选的协议（比如DNS或者数据库服务器自已的网络协议)，来建立传递数据库结果的通道。
9.5本章小结
平台安全是任何Web应用总体安全架构的一个重要部分。可以在不修改应用代码的前提
下部署运行时保护技术（比如Web服务器和应用程序级插件)以便检测、阻止或减缓SQL注入。
349
---
## Page 364
SQL注入攻击与防御（第2版）
最好的运行时解决方案取决于组成应用环境所使用的技术和平台。可以加固数据库服务器以显
著减轻受损害的范围（比如应用程序、服务器/网络损害）和未经验证的数据访问。此外，还可以
通过充分利用网络架构和配置安全的Web基础结构来减轻并降低应用程序被检测到的机会。
一定要记住，平台安全并不是应对真实问题的替代方案：首要的问题是引发SQL注入的
不安全编码模式。将加固过的网络和应用程序基础结构与运行时监视和经过调整的预防措施相
结合，会形成一种强大的防御，从面挫败可能出现在代码中的SQL注入漏洞。不管是现有的
应用程序还是新的应用程序，平台层安全都是整体安全策略的重要组成部分。
9.6快速解决方案
1.使用运行时保护
·无法修改代码时，运行时保护是应对SQL注入的一种有效技术。
·如果调整得当，Web应用防火墙可以有效检测、缓和和预防SQL注入。
·运行时保护可以跨越多层、多级，其中包括网络、Web服务器、应用程序框架以及数
据库服务器。
2.确保数据库安全
·加固数据库虽然无法完全阻止SQL注入，但却可以显著降低其影响
·应该只将攻击者沙箱化在应用程序所用数据上。在锁定的数据库服务器中，不应该影
响所连网络上的其他数据库和系统。
·应该将访问局限在必需的数据库对象上，比如存储过程只授予EXECUTE许可。此外，
对敏感数据明智地使用强加密技术可以防止未经验证的数据访问。
3.额外的部著考虑
·加固过的Web层部署和网络架构无法完全阻止SQL注入，但却可以显著降低其影响。
●面对自动攻击者的威胁（比如SQL注入蟠虫)，尽量减少网络、Web和应用程序级别上
的信息泄露，将有助于减少被发现的机会。
·架构得当的网络应该只允许使用验证过的连接来连接数据库服务器，并且数据库服务
器自身不应该产生带外连接。
9.7常见问题解答
问题：什么时候使用运行时保护会比较合适？
解答：运行时保护有助于减轻甚至弥补已知的漏洞，可以为未知威胁提供第一线防御。如
果近期不可能修改代码，就应该使用运行时保护。此外，特定运行时解决方案的检
测功能使之成为所有Web应用产品的理想之选。在日志记录模式下配置时，运行时
保护提供了一种优秀的应用入侵检测系统并且能够在必要时为取证分析产生审查
日志。
350
---
## Page 365
第9章平台层防御
问题：我们只部署了Web应用防火墙（WAF)，我们安全吗？
解答：不安全。不要以为部署了WAF，轻拨开关就能立马得到保护。现成的（out-of-the-
效。阻塞流量时需格外小心，除非WAF已经经历过学习阶段并经过大量的调整。
问题：ModSecurity非常强大，但我们没有在环境中运行Apache。对于Microsoft IS来说，
有哪些免费的替代品？
解答：UrlScan和WebKnight都是免费的ISAPI过滤器，只需花极小的功夫就可以将它们
集成到IS中。如果关注的是保护POST数据免受SQL注入攻击，WebKnight会是
更好的选择。也可以研究使用ASP.NET的HttpModules，可使用它们并借助额外的
Web服务器配置来保护几乎所有能够运行在IIS上的Web应用。由于IIS7.0及以
上版本支持IIS请求/响应处理管道(handlingpipeline)中的托管代码，因而需要研究
安全参数过滤器(SecureParameterFilter)并留意模块开发人员。
问题：为什么我的应用程序数据库登录可以查看某些系统对象？如何做才能防止这种现象？
解答：出现这种情况是因为几乎所有的数据库平台均附带了一个能映射到所有登录的默
认角色。该角色通常称为公共角色，它包含一个默认的许可集，该许可集经常包含
了对许多系统对象的访问权（包括一些管理用的存储过程和函数)。最低限度是撤销
该公共角色在应用数据库中包含的所有许可。不管何种情况，都应尽可能撤销数据
库范围内的系统对象的public许可。public角色许可的数据库审查是个好的起点，
它可以判定潜在暴露并为锁定它而采取校正措施。
问题：我们应该在数据库中存储加密的口令或口令哈希吗？
解答：如果不是必需的，最好不要存储任何敏感内容。就口令而言，存储口令哈希比存储
加密的口令更可取，因为这样可以缓和与加密相关的密钥管理问题并追使攻击者不
得不暴力破解访问口令所需要获取的哈希。确保使用唯一值对每个口令进行哈希加
盐（salt)，以避免一旦破解一个哈希后对相同账户造成的影响。最后，只使用业界认