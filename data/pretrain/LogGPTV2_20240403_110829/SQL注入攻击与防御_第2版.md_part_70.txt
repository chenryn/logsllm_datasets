### 平台层防御配置指南

#### 1. 配置错误页面
**ASP.NET Web 应用程序**
- 在 `web.config` 文件中，将 `customErrors` 设置为 `On` 或 `RemoteOnly`。
- 将 `defaultRedirect` 设置为您希望显示的自定义错误页面路径，并确保该页面存在于指定位置。
- 此设置仅适用于 ASP.NET 资源。当应用程序代码无法处理错误（如 500、404 等）时，会显示配置的默认错误页面。

**J2EE Web 应用程序**
- 在 `web.xml` 文件中使用 `<error-page>` 元素配置错误页面。
- 例如：
  ```xml
  <error-page>
      <error-code>500</error-code>
      <location>/CustomPage.html</location>
  </error-page>
  ```
- 这种配置仅对由 Java 应用服务器处理的资源有效，并且只在出现 500 错误时显示指定页面。

**经典 ASP/VBScript Web 应用程序**
- 必须配置 IIS 以隐藏详细的 ASP 错误消息。
- 启用“Send text error message to client”选项，并确保其中包含适当的消息。

**PHP Web 应用程序**
- 在 `php.ini` 文件中，将 `display_errors` 设置为 `Off`。
- 在 Web 服务器配置文件中设置默认错误文档。例如，在 Apache 中添加以下指令：
  ```apache
  ErrorDocument 500 /CustomPage.html
  ```

**IIS 服务器**
- 在 IIS 管理器中，选择站点并进入“错误页”部分。
- 单击“编辑功能设置”，然后选择“详细错误”或“自定义错误”。
- 在“自定义错误”选项卡中，点击“配置”按钮，选择一个文件或 URL 来替换默认内容。

#### 2. 使用空的默认 Web 站点
- HTTP/1.1 协议要求客户端发送 `Host` 头部。
- 如果未找到匹配的主机名，则返回默认 Web 站点内容。
- 例如，通过 IP 地址访问 Web 站点时，会返回默认站点内容。

#### 3. 禁止 WSDL 信息
- Web 服务通常容易受到 SQL 注入攻击。
- 攻击者需要 WSDL 文件来获取通信协议、方法名和参数等信息。
- 建议尽可能向不受欢迎的攻击者隐藏 WSDL 信息。
- 对于 .NET Web 服务，可以在 `web.config` 或 `machine.config` 文件中进行相关配置。
- 对于 Java 应用程序，可以使用 Apache Axis 自定义 WSDL 文件，防止自动生成 WSDL。

#### 4. 提高 Web 服务器日志的详细程度
- 日志文件可以提供潜在 SQL 注入攻击的信息。
- 配置 Web 服务器记录 `Referer` 和 `Cookie` 头部，虽然会增加日志文件大小，但有助于检测安全问题。
- 可以安装额外模块以记录 POST 数据。

#### 5. 配置网络访问控制
- 避免在同一主机上运行 Web 服务器和数据库服务器。
- 实现网络访问控制，限制与内部网中其他系统的连接。
- 使用防火墙、路由器 ACL 或 IPSec 等机制实现控制。

#### 6. 总结
- 平台安全是 Web 应用整体安全架构的重要组成部分。
- 可以部署运行时保护技术（如 Web 服务器插件）来检测和阻止 SQL 注入。
- 加固数据库服务器可以显著减轻 SQL 注入的影响。
- 通过优化网络架构和配置安全的 Web 基础设施，可以降低应用程序被检测到的机会。

#### 7. 快速解决方案
- **使用运行时保护**：当无法修改代码时，运行时保护是一种有效的应对 SQL 注入的技术。
- **确保数据库安全**：加固数据库可以显著降低 SQL 注入的影响。
- **额外部署考虑**：减少信息泄露，只允许验证过的连接访问数据库服务器。

#### 8. 常见问题解答
- **何时使用运行时保护**：近期不可能修改代码时，应使用运行时保护。
- **WAF 是否足够安全**：不要依赖 WAF 作为唯一的安全措施，需经过调整和测试。
- **IIS 的免费替代品**：UrlScan 和 WebKnight 是免费的 ISAPI 过滤器。
- **公共角色权限**：撤销公共角色在应用数据库中的默认许可，避免暴露系统对象。
- **存储密码**：建议存储密码哈希而非加密后的密码，并使用盐值增强安全性。

通过以上步骤，可以显著提高 Web 应用程序的安全性，减少 SQL 注入等攻击的风险。