新调用第一部分）
匹配内容的一部分功能（用\（…\）将要匹配的部分包围起来，并用\1来重
在 sed 中处理这个问题非常简单，
将这个问题进行说明也很简单。我们希望修改第二个冒号，
那么结果是：
号，
寻找替换
自
面
通常是一个描述错误的字符串。将这个消息连同记录号和记录本身一起输出。
呈序input.idx的目的就是允许在编写索引条目时有变化（或有一定的不-
是一个可能的解决方法：
一段代码也是取自input.idx。要讨论的问题是查找两个被文本分隔的冒
，以便不影响其他的程序。程序input.idx 有一个函数pinterr （)，可以用
# print message, record number and record
class: class initialize; (see also methods)
class: class initialize: (see also methods)
并将第二个冒号改为分号。如果输入行包含
function printerr (message)
sub(/:;/,
if (sub(/:.*:/,
# from input.idx 
因为我们不能做直接的替换，我们通过构造第二个冒号为特殊形式
";",
QQ群：
，$1)
，因为在 awk 中缺少这些功能，所以必须使用其他方法。
"&;"，$1))
50192241
因为它提供了在替换部分选择和重新调用所
而不是返回结果字符串。
必须向用户报告并删除这个条
第十二章
而不修改第一个。
换句话说，
替换
综合应用
如果
1
---
## Page 347
一个是没有页码的条目，第二个是有一个页码但没有“see also”引用。
这个样本的第一个条目有页码而最后一个没有。当程序input.idx找到一个
它自己的信息，但为读者提供在另一片的附加信息。下面是几个样本条目：
个条目。然而，
索引条目有一种类型是“see also”。
处理 see also 条目
当产生错误时，
在这个程序中，printerr（函数可以如下调用：
用的是 gawk、mawk 或 BellLabs awk，你可以这样写：
这为cat打开了一个管道，
错信息发送到标准错误文件，如下所示：
情况下，
输出直接发送到用户的终端“/dev/tty”
“see also”条目时，
 ERROR:No page number (612) geometry management:set_values_almost 
printf("ERROR:%s (%d) %s\n", message, 
# remove See Also
print $1 ":"
# print See Also entry w/out page number
# output two entries:
print $O ""
if ($2 == 
# if no page number
# input.idx 
error procedure (see also XtAppErrorMsg)
error procedure
error procedure 
"Z8"/dev/stderr'
第十二章
，因为在这种
综合应用
---
## Page 348
关键字。既然第一个字段产生了重复，可以从排序关键字中删除转义序列。一
方法，对于每个记录，提取第一个字段并将它附加在这个记录上，
希望支持特殊的转义序列，
在这个程序中，我们选择在索引条目中不支持troff 字体和磅数请求。如果你
可选择的排序方法 
此，通过 pagenums.idx将输出如下的“see also”条目：
有一个函数能够输出“see also”条目的列表，
个数组：
个列表。
pagenums.idx脚本从“see also”条目中将排序字符串删除。然而，和我们以
前
这个排序函数没有解释~符号，但~符号有助于识别后来要删除的字符串。添加
来改变排序关键字。
圆括号被忽略）。为了改变排序的顺序，我们通过在条目之前添加序列“~zz”
的选项，将“see also”条目放在以“s”开关的次关键字下（-d选项可以使
下一个要解决的问题是如何用正确的顺序对条目排序。程序 sort利用我们提供
所讨论的一样，我们找到了一系列具有关键字的“see also”条目建立了一
 error procedure: (see also XtAppErrorMsg; XtAppSetErrorHandler.)
# assign to next element of seeAlsoList 
sub(/^ .*^ zz\([Ss]ee +[Aa] Iso */, 
# pagenums.idx 
 sub(/\([Ss]ee [Aa]lso/,
sub(/\） */， ""，SECONDARY)
# input. idx 
next 
print $1 "::" $2
else
print $1 ":" $2
sub(/;/， 
sub(/ *zz\(see also.*$/, "", $1)
，因此，我们也将删除具有相同关键字的部分，并将引用本身加入到一
/:/)
QQ群：
50192241
- 366 -
^zz(see also", $1)
，SECONDARY)
，并用分号来分隔每一项。因
第十二章
作为排序的
综合应用
---
## Page 349
有字体信息，另一个没有，当将一个同另一个比较时将被看做是不同的条目。
在两种情况下需要处理的惟一问题是：对于具有相同术语的两个条目，
用在他的原始的索引脚本中）
可以使 sort 程序处理这个序列而不影响排序（这个技术被 Steve Tallbott 应
旦条目被排好序，就可以删除排序关键字。这个操作防止了转义序列打扰排
忽
”改为“
QQ群：
我们可以用input.idx程序转换troff 字体更改序列，例如
50192241
367
第十二章
因为在排序中
综合应用
一个带
---
## Page 350
有/uer/spool/uucp/SYSLOG）（注：英文原文为/usr/spool/uucp/SYSLOG。）
件，但将显示逐站点传输的统计，
连接（连接时间，传输量，传输的文件数等等）。
uutot.awk—UUCP 的统计报告
transpose
gent
readsource
mailavg
combine
phonebi ll
uutot. awk
着重说明了一下。下面是这些脚本的一个摘要。
显示了出来。如果作者没有提供例子，我们将在列表
了一个简洁的介绍。我们的注释放在方括号中[就像这
本章包含了由Usenet 用户提供的脚本的一个汇总。每
脚本的汇总
后
第十三章
，在称为“程序注意事项”的部分，
QQ群：
实现矩阵的转置 
将程序源文件格式化为 troff 格式
抽取多部分用uuencoded 编码技术处理的二进制代码
跟踪电话的使用情况
UUCP的统计报告
50192241
行式打印的预处理器
检查邮箱的大小
简单的宏处理器
- 368 -
或总的统计（所有站点）（和它一起工作的还
一会儿就会返回。它主要是统计了uucp 的
我们简要讨论
。它只支持HDB 风格的日志文
第十三章
●
?
●Untot.awk-uucp 
本章内容
m1—简单的宏处理
阵的转置
transpose—实现矩
Phonebill－跟踪电
统计报告
预处理器 
plpr—行式打印的
条目
gent—获得 termcap
器
troff 格式
序原文件格式化为
readsource—将程
的行
Adj-调整文本文件
的大小
Mailavg—检查邮箱
处理的二进制代码 
uuencoded 编码技术
分用
Combine-抽取多部
话使用情况
脚本的汇总
的
---
## Page 351
用说明在程序的首部。（很抱没有注释。）
我使用 shell实现通过调用“awk－f”来运行这个程序，但这是不必要的。使
# files[]; # files xmitted by site
# Author: Roger A. Cornelius (PI:EMAIL)
# @(#) Usage:awk -f uutot.awk [site ...]
Yme mau sauinbah - so!as!teis donn Kelds!p - yme 'toznn (#)@ #
BEGIN {
#
#
/usr/spool/uucp/. Admin/xferstats 
time[]; # time spent by site 
bytes[]; # bytes xmitted by site
remote[]; # array of site names
dosome[]; # site names to work for - all if not set
site = substr ($1,1, index($1,bang)-1);
direction = ($6 == sending ? 1 : 2)
if ($6 ! xmitting) # should never be 
\  +0 'z0%:pz0%:p7% J8 6% J8'6% J8'6% s|e201 = Z7wj
\  +0 '70% : pZ0%:pz% J8 :6% J8*6% J8*6% s8 '8-% = L7w+
next； 
hdr3 = 
hdr1 = "Remote K-Bytes K-Bytes K-Bytes "\
‘"->…"; 
bang = "!"; 
kbyte = 1024 # 1000 if you’ re not picky
if (ARGC >2）
doall = 1; 
"Recv Xmit Recv Xmit Recv Xmit\n";
u# # S S ::4 ::
"%2d:%02d:%02. 0f %5. 0f %5. 0f %4d %4d\n";
"%2d: %02d:%02. 0f %5. 0f %5. 0f %4d %4d\n";
for （i= 1;i
isla!nuucp S (8/3-16:10:20) (C,126,26) [ttyi1j] ->
isla!nuucp S (8/3-16:10:17) (C,126,25) [ttyi1j] ->
END {
149/0.500 secs, 298 bytes/sec
646/25.230 secs, 25 bytes/sec
printf(fmt2, rbyte/kbyte, sbyte/kbyte, (rbyte+sbyte)/kbyte,
print hdr3 
print hdr1 hdr2 hdr3;
if (site in dosome ll doall) {
for (k in remote) {
stime/3600, (stime%3600)/60, stime%60,
rtime/3600, (rtime%3600)/60, rtime%60,
printf(fmt1, k, bytes [k,2]/kbyte, bytes [k, 1]/kbyte,
rbyte += bytes [k,2]; sbyte += bytes[k,1];
fi les [site, direction]++;
rfiles, sfiles);
sbyte && stime ? sbyte/stime : 0,
rbyte && rtime ? rbyte/rtime : 0,
rfiles += files[k,2]; sfiles += files[k,1];
rtime += time[k,2]; stime += time[k, 1]; 
time[site,direction] += $9; 
bytes [site, direction] += $7;
remote[site]; 
QQ群：
files[k,2], files[k,1]);
bytes [k, 1
bytes [k,2] && time[k, 2] ? bytes [k,2]/time[k,2] : 0,
time [k,1]/3600, (time [k, 1]%3600)/60, time[k,1]%60,
time[k,2]/3600,
(bytes [k, 2]+bytes [k, 1]) /kbyte, 
50192241
1]8
&& time[k, 1] ? bytes[k,1]/time[k, 1] : 0,
(time [k, 2]%3600) /60, time [k, 2]%60,
第十三章
脚本的汇总
---
## Page 353
局。这将有助于简化程序体中的条件和打印语句。同时程序中所用的变量名字
能很清楚的了解该程序的用法。而且，他使用变量来定义搜索模式和报告的布
虽然Cornelius没有给出注释来解释程序的逻辑结构，但从程序开始处的注释中
这个nawk应用软件是一个编写清楚的akw程序的一个极好的例子。它也是一个使
uutot.awk程序的注意事项
用awk将晦涩UNIX日志修改为有用的报告的典型例子。
0
2
Recv Xmit
#
以上程序将产生下面的结果：
注意：这儿有12个字段，
八
 SiteName
Totals
uunet
Remote K-Bytes K-Bytes K-Bytes Hr:Mn:Sc Hr:Mn:Sc AvCPS AvCPS
 $ nawk -f uutot.awk uutot.test
#
uunet!daemon M (8/3-16:16:09) (C,951,6) [cui1a] 
4
1018/0.550 secs, 1850 bytes/sec
148/0.080 secs, 1850 bytes/sec 
1191/0.660 secs, 1804 bytes/sec 
 552/2.740 secs, 201 bytes/sec 
160/0.070 secs, 2285 bytes/sec 
145/0.510 secs, 284 bytes/sec 
102/1.390 secs, 73 bytes/sec
QQ群：
0. 639
0.000
0.639
Recv
50192241
而程序只用了第1、6、7和9字段。使用样本输入运行
2.022
2.458
4.480
Xmit 
- 371 -
5.119 0:04:34
2.022
3.097 0:04:34