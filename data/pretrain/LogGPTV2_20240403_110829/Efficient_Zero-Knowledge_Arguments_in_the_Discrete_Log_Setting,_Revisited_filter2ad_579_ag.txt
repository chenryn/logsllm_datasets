8i < Ii : vi = 0:
; д
′
2
; д
′
n(cid:0)1
′;⋆
rnd1
′;⋆
rnd1
′
n ] = [д
ness terms in QESAZK and our commitment to “overlap”. But now,
running QESAZK for a smaller or larger instance, e.g. an instance
of size n/2 or 2n is incompatible. A simple solution is to fix some
′;⋆
′
rnd2] (as part of crs) and construct [д
(random) [д
] when start-
; д
′;⋆
ing Protocol QESAZK so that [д
rnd2]. Another
; д
solution is to permute the position of the randomness and reserve
the fixed indices 2; 3 for randomness (instead of n (cid:0) 1; n).
With this setup, we can extend QESAZK as follows: Given com-
mitments [ec(i)] under keyseck(i), prove that the values committed
in [ec(i)] satisfy some set of quadratic equations. In other words,
prove that the [ec(i)] satisfy some arithmetic circuit.
Example 4.12 (Aggregate range proof). Consider [ec(j)], j = 1; :::; 10.
We wish to prove that the values v(j) committed in [ec(j)] all lie in
the range f0; : : : ; 28 (cid:0) 1g.
′
+
∑
′   w
∑
i αi [ec(i)],
Unsurprisingly, our solution to the problem is probabilistic ver-
ification. Our idea for general interoperability is as follows: The
′
initial QESAZK witness w (commitment c
w ) has all components in
I zeroed (except for randomness n (cid:0) 1, n) and also contains copies
of the committed v(i). The actual equations, i.e. the (cid:0)i, only refer
to the copies and the components I. The verifier sends randomness
α   χM +1 with α0 = 0, and we set [c
i αiv(i) as new (extended) witness. Note that
and w
′ still hold (for an honest prover).
all (extended) equations w
Now we add (linear) equations (cid:0)(i)
copy to the statement, which we
call copy-equations and which depend on the randomness αi. These
i αiv(i) using the
equations simply assert that, if we compute
committed copies in w, then this equals the values committed in
components I (again excluding the randomness components n(cid:0) 1,
n). In other words, we assert that the purported copies of v(i) in
′
witness [c
w ;old] were valid copies. This “copy-based” approach is
simple and modular.
′
w ]   [c
∑
′
w ] +
′⊤
i w
(cid:0)
′
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2104The formulaic description of Protocol QESACopy is arguably tech-
nical. However, the example in Fig. 3 demonstrates that it is actu-
ally a simple concept. In the full version [31], we give a more com-
plex example. This extension of QESAZK is again complete, special-
sound, and statistical zero-knowledge. See the full version [31] for
more details.
ec (1)b= I1 = f2; ng:
ec (2)b= I2 = f2; ng:
)
(
′
w
r
:
′
w
=
m(1)
m(2)
1
0 m(1) m(2)
1
α1m(1)
+α2m(2) m(1) m(2)
α1
α2
α0
= 1
r (1)
r (2)
r1
r2
r1
(cid:3)
2
r
α0w
+ α1v (1)
′
+α2v (2)
Figure 3: An example of a copying two values from two com-
mitments. The blocks are colour-coded as follows: White
blocks contain either 0 or the value indicated. Orange blocks
belong to the (value-part) of commitment indices, i.e. to I.
Green blocks denote “copied” values. Gray blocks contain
an arbitrary value. Blue blocks refer to randomness parts (i.e.
components n (cid:0) 1; n). Note that randomness is not copied, as
it is not a relevant part of the committed value. It is simply
(cid:3)
2 = α0r2 + α1r (1) + α2r (2). The actual state-
accumulated in r
ments (i.e. the matrices (cid:0)i) are statements over all variables
except the orange (and blue) blocks, as these are merely “test-
values” which ensure that w contains copies of (the message
part of) v(i), here m(i), as claimed.
5 IMPLEMENTATION
We implemented all protocols in C++17 using the RELIC toolkit
[4] for underlying group operations. Our instantiation uses G =
2255(cid:0)19. For a fair comparison, we im-
Curve25519 and thus Fp = F
plemented Bulletproofs on the same architecture with equal care.
The code is available on GitHub.¹⁰
i aib
Representing (cid:0). All QESA protocols make use of sparse matrices
(cid:0). For efficient computation, a suitable representation is necessary.
⊤
Decomposing (cid:0) into a sum
i , similar to R1CS, allows for
both runtime and memory optimisations. Note that vectors ai and
bi are sparse themselves, allowing for even further optimisation
via an appropriate data structure. For multiplications (cid:0)s, at most
i ki ℓi scalar multiplications are necessary, where m, ki, ℓi are
m
the number of non-zero entries in s, ai, bi. Thus, all operations
remain polynomial in the input size.
∑
∑
Results. We benchmarked our protocols on an Intel Core i7-6600U
CPU at 2.6GHz running Debian Stretch 4.9.168 using a single core.
A point multiplication with a random 254-bit scalar takes on av-
erage 0.28ms on this platform. Table 3 shows how our aggregate
¹⁰https://github.com/emsec/QESA_ZK
Parameters
Bulletproofs
V
P
0.17
0.26
0.47
0.29
4.5
7.4
17.9
28.9
78.7
116
0.29
0.46
14.9
9.2
36.8
59.7
147
238
0.59
0.95
30.2
18.6
74.3
121
484
297
60 bit
60 bit (cid:2) 2
60 bit (cid:2) 32
60 bit (cid:2) 128
60 bit (cid:2) 512
124 bit
124 bit (cid:2) 32
124 bit (cid:2) 128
124 bit (cid:2) 512
252 bit
252 bit (cid:2) 32
252 bit (cid:2) 128
252 bit (cid:2) 512
Table 3: Comparison of runtime in seconds of aggregate
range proofs from [13] with this work.
QESARP (short)
P
0.15
0.30
4.6
18.4
73.8
0.29
9.3
37.2
149
0.57
18.9
76.1
302
QESARP
V
P
0.07
0.16
0.32
0.15
2.4
5.1
9.4
20.6
37.5
82.3
0.15
0.32
10.4
4.7
18.9
41.4
75.4
165
0.30
0.65
20.8
9.5
37.8
83.5
358
165
V
0.06
0.10
1.7
6.7
27.1
0.11
3.4
13.5
54.6
0.22
6.8
27.4
109
Shuffle size
Time [s]
1000
P V
4.4
8.8
10000
P
V
56.1
117
100000
P
V
491
1009
Table 4: Evaluation of shuffle proofs via QESACopyand
LMPAsimpleZK.
range proofs QESARP compare to Bulletproofs. For QESARP, the in-
ternal witness w contains 4 static elements: the constant 1, the ag-
gregate element for QESACopy, and the 2 random elements added
by QESAInner, c.f. the full version [31]. Hence, we select the range
as a power of 2 minus 4, in order to keep the CRS size from expand-
ing to the next power of two. Our results show that QESARP out-
performs Bulletproofs for all tested parameters. Allowing batch-
ing randomnesses to be small further improves the performance
(cf. QESARP (short) for 140-bit random values).¹¹ Note that the ex-
ecution times given in [13] are lower, since a highly optimised li-
brary dedicated to a single elliptic curve was used instead of a gen-
eral purpose library as in this work. However, since both protocols
were benchmarked on the same platform with the same underlying
library, the values in Table 3 give a fair comparison.
Note that we have not applied special optimisations. Using de-
layed (batch) verification, e.g. as in [13], significantly improves ver-
ifier performance. Optimised verification performance of Bullet-
proofs and our proof systems is probably almost identical. We are
not aware of similar optimisations for the prover.
Table 4 gives execution times for our shuffle proofs. They are
an instantiation of [5], c.f. Appendix D, and we project them to be
2–3(cid:2) more computationally expensive than [5], but they are size
p
N ) for N ciphertexts. Again the very
O(log(N )) instead of O(
high execution times compared to [5] are caused by the underlying
library.
¹¹ To justify short exponents, concrete security estimates are needed. We are not
aware of results justifying any concrete instantiations. If our conjectures in the full
version [31] hold, we can justify at least 80 bit security for witness size n (cid:20) 216.
Session 9C: Zero-Knowledge ProofsCCS ’19, November 11–15, 2019, London, United Kingdom2105ACKNOWLEDGMENTS
We thank the anonymous reviewers of CRYPTO ’19 and CCS ’19
for helpful comments, which improved the overall quality and pre-
sentation of this work. This work is supported by the German Re-
search Association under grants PA 587/10-1 and RU 1664/3-1.
REFERENCES