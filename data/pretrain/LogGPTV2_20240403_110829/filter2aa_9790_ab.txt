		VoidSymbol VoidSymbol VoidSymbol ...
.fi
.RE
.LP
为了方便, 你 可以 用 更简洁 的 定义. 如果 键定义行 中, 等号 后面 只有 一个
动作码, 它 就可以 拥有 额外的 含义. 如果 这个 动作码 (数字 或 符号 形式)
不是 一个 ASCII 字符, 这 意味着 该 动作码 在 所有 定义了的 行 上 有效.
反过来, 如果 动作码 是 ASCII 字符, 位于 'a', ..., 'z' 或 'A', ..., 'Z' 
之间, 对于 不同的 修饰键组合, 有 如下 定义
(下表 列出 两种 可能情况: 动作码 是 一个 小写字母, 表示为 'x', 或者是 一个
大写字母, 表示为 'Y'.)
.LP
.RS 4
.TP 24
.I modifier
.I symbol
.TP 24
none
x			Y
.PD 0
.TP 24
Shift
X			y
.TP 24
AltGr
x			Y
.TP 24
Shift+AltGr
X			y
.TP 24
Control
Control_x		Control_y
.TP 24
Shift+Control
Control_x		Control_y
.TP 24
AltGr+Control
Control_x		Control_y
.TP 24
Shift+AltGr+Control
Control_x		Control_y
.TP 24
Alt
Meta_x		Meta_Y
.TP 24
Shift+Alt
Meta_X		Meta_y
.TP 24
AltGr+Alt
Meta_x		Meta_Y
.TP 24
Shift+AltGr+Alt
Meta_X		Meta_y
.TP 24
Control+Alt
Meta_Control_x	Meta_Control_y
.TP 24
Shift+Control+Alt
Meta_Control_x	Meta_Control_y
.TP 24
AltGr+Control+Alt
Meta_Control_x	Meta_Control_y
.TP 24
Shift+AltGr+Control+Alt
Meta_Control_x	Meta_Control_y
.PD
.RE
.LP
.SH "单一修饰键定义 (SINGLE MODIFIER DEFINITIONS)"
上述 键定义行 的 格式 总要 定义 全部 M+1 个 可能的 组合, 无论 该行 是不是
真的 有 那么多 动作. 然而 还有 另一种 语法定义, 用来说明 只产生 一个 动作
的 特定键组合. 如果 你的 键盘映射 只有 少数 不符合 需要, 如 AltGr+function
键, 这个 功能 就特别 有用. 你 可以 制作 一个 小型文件, 在 调入 键盘映射文件
后 重定义 所需的 映射. 这种 形式 的 语法 是:
.LP
.BR "" { " plain " "|  } " keycode
.I keynumber
.B =
.I keysym
.LP
例如:
.RS
.nf
plain keycode 14 = BackSpace
control alt keycode 83 = Boot
alt keycode 105 = Decr_Console
alt keycode 106 = Incr_Console
.fi
.RE
这里的 "plain" 指 该键的 基本动作 (就是说, 没有 使用 修饰键 时),
不影响 该键 的 其他 修饰键 组合.
.SH "字符串定义 (STRING DEFINITIONS)"
除了 注释 和 键定义行, 键盘映射表 还包含 字符串定义. 它们 用于 定义
各个 功能键(function key) 的 动作码 输出 些 什么. 字符串定义 的 语法 是:
.LP
.RS
.B string
.I keysym
.B =
.BI
"text"
.RE
.LP
.I text
包括 文本字符, 八进制字符, 或者 三个 escape 序列: \fB\\n\fP, \fB\\\\\fP, 
和 \fB\\"\fP, 分别 代表 换行, 反斜杠, 和 引号. 八进制字符 的 格式 是 
反斜杠 后面 列出的 八进制数字, 最多 三个 八进制数字.
.SH "组合定义 (COMPOSE DEFINITIONS)"
组合(键)定义 的 语法 是:
.LP
.RS
.BI "compose '" char "' '" char "' to '" char "'"
.RE
描述 两个 字节 怎样 组合成 第三者 (当 使用 少见的 声调符 或 组合键 时).
它 常用来 在 标准键盘 上 输入 声调符 之类.
.SH "缩写 (ABBREVIATIONS)
从 kbd-0.96 开始 可以 使用 多种 缩写.
.TP
.B "strings as usual"
定义 常用 字符串 (而不是 它们 编联的 键).
.TP
\fBcompose as usual for "iso-8859-1"\fP
定义 常用 compose 组合.
.LP
如果 想要 知道 哪些
.I keysym
能够 用在 键盘映射表 中, 请 使用
.LP
.RS
.nf
.B dumpkeys --long-info
.fi
.RE
.LP
遗憾的是, 目前 仍然 没有 对 各个 符号 的 说明. 您 可以 从 符号名称 上
推测, 或者 参考 内核源程序.
.LP
.SH "示例 (EXAMPLES)"
(小心 使用 keymaps 行, 如 `dumpkeys` 显示的 第一行, 或者 "keymaps 0-15" 之类)
.LP
下面的 输入项 交换 左侧 Control 键 和 Caps Lock 键 的 功能:
.LP
.RS
.nf
keycode  58 = Control
keycode  29 = Caps_Lock
.fi
.RE
.LP
正常的时候, 键值 58 是 Caps Lock, 键值 29 是 Control 键.
.LP
下面的 输入项 使 Shift 键 和 CapsLock 键 更好用 一点, 象 老式 打字机.
就是说, 按下 Caps Lock 键 (一次 多次 皆可) 使 键盘 进入 CapsLock 状态,
按 任一 Shift 键 解除 该 状态:
.LP
.RS
.nf
keycode  42 = Uncaps_Shift
keycode  54 = Uncaps_Shift
keycode  58 = Caps_On
.fi
.RE
.LP
下面的 输入项 设置 增强形键盘 的 编辑键, 使 它 更象是 VT200 系列 终端:
.LP
.RS
.nf
keycode 102 = Insert
keycode 104 = Remove
keycode 107 = Prior
shift keycode 107 = Scroll_Backward
keycode 110 = Find
keycode 111 = Select
control alt   keycode 111 = Boot
control altgr keycode 111 = Boot
.fi
.RE
.LP
下面是 一个 示范, 将 字符串 "du\\ndf\\n" 和 AltGr-D 编联. 我们 使用了
"空闲的" 动作码 F100, 通常 它 没有被 使用:
.LP
.RS
.nf
altgr keycode 32 = F100
string F100 = "du\\ndf\\n"
.LP
.SH "另见 (SEE ALSO)"
.BR loadkeys (1),
.BR dumpkeys (1),
.BR showkey (1),
.BR xmodmap (1)
.SH "[中文版维护人]"
.B 徐明 
.SH "[中文版最新更新]"
.BR 2003/05/13
.SH "《中国Linux论坛man手册页翻译计划》"
.BI http://cmpp.linuxforum.net