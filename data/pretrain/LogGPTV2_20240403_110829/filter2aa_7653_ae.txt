对于客户端，此注册表项位于 `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\ldap`
对于客户端，它也设置为 1。由于所有客户端和域控制器都具有协商签名功能，因此默认情况下将对所有 LDAP 数据包进行签名。
与 SMB 不同，LDAP 中没有标志来指示是否对数据包进行签名。而是，LDAP 使用在 NTLM 协商中设置的标志。无需更多信息。在客户端和服务器均支持 LDAP 签名的情况下， `NEGOTIATE_SIGN` 将设置该标志并对数据包进行签名。
如果一方要求签名，而另一方不支持该签名，则该会话将根本不会开始。需要签名的一方将忽略未签名的数据包。
因此，现在我们了解到，与 SMB 相反，如果我们位于客户端和服务器之间，并且希望使用 LDAP 将身份验证中继到服务器，则需要两件事：
- 该服务器不能要求数据包签名，这是默认情况下，所有机器的情况下，
- 该客户端必须不设置 NEGOTIATE_SIGN 标志 1。如果他这样做，那么服务器将期望签名，并且由于我们不知道客户端的秘密，因此我们将无法对我们精心制作的 LDAP 数据包进行签名。
关于要求 2，有时客户端没有设置此标志，但是不幸的是，Windows SMB 客户端设置了该标志！默认情况下，不可能将 SMB 身份验证中继到 LDAP。
那么，为什么不只更改 NEGOTIATE_FLAG 标志并将其设置为 0 呢？这是因为 NTLM 消息中有 MIC
---
#### Negotiation
实际上，在 NTLM 消息中，除了质询和响应之外，还有其他信息可以交换。也有协商标志或协商标志。这些标志指示发送实体支持的内容。
此协商允许知道客户端和/服务器是否支持签名，并且在 NTLM 交换期间完成。
当客户端将此标志设置为 1 时，表示客户端支持签名。请注意，这并不意味着他一定会在他的数据包上签名。只是他有能力。
类似地，当服务器回复时，如果它支持签名，那么该标志也将设置为 1。
因此，该协商允许客户端和服务器两方中的每一方向对方指示是否可以签名数据包。对于某些协议，即使客户端和服务器支持签名，也不一定意味着将对数据包进行签名。
---
#### MIC
MIC 是仅在 NTLM 身份验证的最后一条消息（AUTHENTICATE 消息）中发送的签名。它考虑了 3 条消息。MIC 是使用 `HMAC_MD5` 函数计算的，它用作取决于客户端机密的密钥，称为 session key。
```
HMAC_MD5(Session key, NEGOTIATE_MESSAGE + CHALLENGE_MESSAGE + AUTHENTICATE_MESSAGE)
```
session key 取决于客户端的机密，因此攻击者无法重新计算MIC。
如果仅修改了这3条消息之一，则MIC将不再有效，因为这3条消息的串联将是不同的。因此，不能更改 `NEGOTIATE_SIGN` 示例中建议的标志。
攻击者删除 MIC，该怎么办？当然可以，因为 MIC 是可选的。
但还有另一个标志指示存在 MIC，即 msAvFlags。
它也出现在 NTLM 响应中，如果它是 0x00000002，它告诉服务器必须存在 MIC 。因此，如果服务器看不到 MIC，它将知道发生了什么事，它将终止身份验证。如果标志表明必须有 MIC，则必须有 MIC。
如果我们更改或删除 msAcFlags 标志将使 NTLMv2 哈希无效
MIC 保护 3 条消息的完整性，msAvFlags 保护 MIC 的存在，而 NTLMv2 哈希保护标志的存在。攻击者不知道用户的秘密，因此无法重新计算此哈希。
---
### EPA
`Extended Protection for Authentication`
攻击者很有可能从协议 A 检索 NTLM 消息，然后使用协议 B 将其发送回去。这就是我们已经提到的跨协议中继。
EPA 就是一种保护措施来应对这种攻击。这种保护的原理是将身份验证层与正在使用的协议绑定，即使存在的 TLS 层也将其绑定（例如 LDAPS 或 HTTPS）。通常的想法是，在最后一条 NTLMAUTHENTICATE 消息中，一条信息被放置在此处，并且攻击者无法对其进行修改。该信息指示所需的服务，并可能指示包含目标服务器证书的哈希值的另一信息。
TLS Binding 与 Service binding 这两个方案就是在原有的身份认证数据中加入一些其他的额外信息，这些额外的信息使得 Server 端可以免受 Relay 的攻击。
**Service Binding**
如果客户端希望向服务器进行身份验证以使用特定服务，则将在 NTLM 响应中添加标识该服务的信息。
这样，当合法服务器收到此身份验证时，它可以看到客户端请求的服务，并且如果它与实际请求的服务不同，则它将不同意提供该服务。
该方案会在原有 Windows SSPI 生成的 authentication token 中加入一段额外信息，这段额外的信息是目标服务的 SPN。
1. 攻击者通过某种方式触发 Client 与自己认证，Client 发送给 攻击者的凭据中带有 攻击者的 SPN（因为 Client 是在访问 攻击者），并且这个 SPN 受到了完整性保护(具体的完整性保护的方式依认证协议不同而不同)，使得 攻击者无法删除、修改这个 SPN。（需要知道的一点是， NTLM 中也是会涉及到 SPN 的概念的）
2. 攻击者将凭据转发至 Server
3. Server 收到凭据后，检查凭据中的 SPN，发现 SPN 不是自己的而是 攻击者的，说明这个凭据并不是发给自己的（而是发给 攻击者的），所以认为遇到了 Credential Relay 攻击，认证将会失败。
由于服务名称在 NTLM 响应中，因此受 NtProofStr 响应保护，该响应是此信息，质询和其他信息（例如 msAvFlags）的 HMAC_MD5。它是用客户的秘密计算的。
**TLS Binding && Channel Binding**
该方案会在原有 Windows SSPI 生成的 authentication token 中加入一段额外信息，这段额外的信息被称为 Channel Binding Token（CBT）。
如果客户端要使用封装在 TLS 中的协议（例如 HTTPS，例如 LDAPS），它将与服务器建立 TLS 会话，并计算服务器证书哈希。此哈希称为 “通道绑定令牌” 或 CBT。计算完成后，客户端会将此哈希放入其 NTLM 响应中。然后，合法服务器将在身份验证结束时接收 NTLM 消息，读取提供的哈希，然后将其与证书的真实哈希进行比较。如果不同，则表示他不是 NTLM 交换的原始收件人。
它可以使 Server 端有能力知道其接收到的凭据到底是不是发给自己的（也就是有能力知道收到的凭据是不是被 Relay 过来的）。如果发现凭据不是发给自己的（也就是凭据是被 Relay 过来的），则拒收，则 攻击者尝试与 Server 进行身份认证的请求将会失败。
1. 攻击者通过某种方式使得 Client 与自己建立 TLS 连接，并且 Client 将 Credential（authentication token） 发送给攻击者。authentication token 中带有 CBT。 CBT 是基于 client 到 server 的这个 TLS 连接的一些属性所计算出来的。且这个 CBT 受到了完整性保护，使得攻击者无法删除、修改 CBT。具体的完整性保护的方式依认证协议的不同而不同。
2. 攻击者与一台开启了 TLS Binding 机制的 Server 建立 TLS 连接，将 authentication token 转发至 Server
3. Server 接收到 authentication token 后，会基于攻击者到 server 的这个 TLS 连接的一些属性计算出来一个 CBT，同时取出 攻击者转发过来的由 client 计算出来的 CBT进行对比。
4. 对比将会失败，因为 client 计算出来的 CBT 是基于 client --> 攻击者这个 TLS 连接的一些属性，而 server 计算出来的 CBT是基于 攻击者--> server 这个 TLS 连接的一些属性。 通过这个对比，Server 就会知道 攻击者转发过来的 authentication token 并不是发给自己的，所以认定这个凭据是被 relay 过来的，所以 攻击者与 server 的认证将会失败 。
由于有了这种保护，因此不再可能进行以下两种攻击：
1. 如果攻击者希望中继使用的协议从一个客户端的信息，而不一个 TLS 层的协议与一个 TLS 层（HTTP 到 LDAPS，例如），则攻击者将不能从目标服务器添加证书哈希进 NTLM 响应，因为它无法更新 NtProofStr。
2. 如果攻击者希望将带有 TLS 的协议中继到带有 TLS 的另一个协议（HTTPS 到 LDAPS），则在客户端和攻击者之间建立 TLS 会话时，攻击者将无法提供服务器证书，因为它不匹配攻击者的身份。因此，它将必须提供 “自制” 证书，以识别攻击者。然后，客户端将对该证书进行哈希处理，并且当攻击者将 NTLM 响应中继到合法服务器时，响应中的哈希将与真实证书的哈希不同，因此服务器将拒绝身份验证。
需要注意的是，如果你的服务端程序想要受到 EPA 的保护，则要求：
- 运行服务端的操作系统必须支持 EPA（Win7 及 Win 2018 R2 后自动支持，或者可以通过安装补丁的方式来添加支持）
- 你的服务端自身需要做修改，来接入 EPA
- 连接服务端的客户端所在的操作系统要支持 EPA 并且客户端需要做相应修改来发送 CBT 或 SPN
即，EPA 是操作系统提供的一些基础框架，它并不会自动保护服务器上的所有程序，只有那些使用了 EPA 的程序才会受到保护。
有不少服务端程序虽然支持 EPA，但是考虑到兼容性问题（比如客户端不支持 EPA），所以没有强制开启 EPA，LDAPS 就是这么一个例子。微软针对 CVE-2017-8563 的修复方式就是使 LDAP Server 支持 EPA，但是却没有默认强制 LDAP Server 必须要使用 EPA。
---
### LmCompatibilityLevel
什么时候用什么类型的 hash 呢？是由 LmCompatibilityLevel 来决定的
当服务器上有一个账号 admin 密码 123 的账户，但是你 `net use \\server "123" /user:admin` 却提示账号密码错误？
有可能就遇到了两边 LmCompatibilityLevel 不兼容的情况。
即，客户端发送的 hash 的类型与服务端所期待的类型不一样，服务端计算出来了与客户端不一样的 hash，导致用户名密码错误。
在 LmCompatibilityLevel 不兼容的情况下，你正常去连接的结果是验证失败，自然用 NTLM-Relay 的结果肯定也是验证失败。
LmCompatibilityLevel 的默认值，不同的操作系统，甚至不同的补丁版本，是不一样的。在多数情况下应该是兼容的。
---
## 域认证
域认证部分内容来自 [[浅学Windows认证](https://b404.xyz/2019/07/23/Study-Windows-Authentication/)]、[[彻底理解Windows认证 - 议题解读](https://payloads.online/archivers/2018-11-30/1)]
---
### MSCACHE
**MSCACHE 简介**
你的办公笔记本加了公司的域，你一直是使用域账号登陆这台机器。你尝试登陆时所输入的账号密码将由域控来进行验证，验证通过后你就能登陆这台笔记本。 但是你是否发现过，当你的笔记本处于断网状态的时候，你依然可以用域账号来登陆这台笔记本。也就是说，当这台机器根本连不上域控的时候，你也可以使用域账号来登陆这台机器，那这个时候，是谁来负责验证你输入的域账号密码是否正确呢？ 就是 MSCACHE。
Mscash 是微软的一种散列算法，用于在登录成功后将缓存的域凭证存储在系统本地。缓存的凭证不会过期。域凭证被缓存在本地系统上，这样即使 DC 宕机，域成员也可以登录机器。值得注意的是，mscash hash 是不可 PTH 的
MSCACHE 中包含的内容
- 域用户的 mscache hash，或者叫 dcc hash，根据操作系统的版本不同，又分为 dcc1 hash 与 dcc2 hash。Vista 之前保存的是 dcc1， 之后保存的是 dcc2。 两种 hash 的生成算法不一样。这段 mscache hash 主要用于对用户输入的密码进行验证
- 域用户的授权信息，比如这个域用户是属于哪个域组的
- 授权信息主要用于在验证通过后来生成 access token。
- 一些其他的信息，比如 UPN，logon server 之类的
**工作原理**
当机器可以连上域控的时候，你用域账号去登陆这台机器，在登陆成功后（域控验证了你的身份后），系统会将你的凭据以及授权信息保存在注册表里面。默认是保存 10 个凭据（可以对这个值进行更改）。当被保存的凭据已经超过 10 个的话，新的凭据会覆盖掉老的凭据。
凭据被缓存在注册表里的这些用户，在机器连不上域控的时候也可以登陆这台机器（只能交互式登陆，比如控制台或远程桌面。远程桌面的时候要注意，不能使用带有 NLA 功能的 RDP 客户端，要用老的比如 XP 上带的 RDP 客户端），但是没有被缓存在注册表里的用户是无法登陆的。
MSCACHE 的保存位置默认只有 SYSTEM 权限可读
```
HKEY_LOCAL_MACHINE\SECURITY\Cache
```
---
### Kerberos
**学习资料**
- https://www.kerberos.org/software/tutorial.html
**Kerberos 协议**
Kerberos 是一种计算机网络授权协议，用来在非安全网络中，对个人通信以安全的手段进行身份认证。软件设计上采用客户端/服务器结构，并且能够进行相互认证，即客户端和服务器端均可对对方进行身份认证。可以用于防止窃听、防止重放攻击、保护数据完整性等场合，是一种应用对称密钥体制进行密钥管理的系统。支持 SSO。Kerberos 的扩展产品也使用公开密钥加密方法进行认证。
当有 N 个人使用该系统时，为确保在任意两个人之间进行秘密对话，系统至少保存有它与每个人的共享密钥，所需的最少会话密钥数为 N 个。
Kerberos 协议基于对称密码学，并需要一个值得信赖的第三方。Kerberos 协议的扩展可以为认证的某些阶段提供公钥密码学支持。
---
#### 简要概括认证过程
Kerberos 认证用于域环境中，它是一种基于票据（Ticket）的认证方式。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的密码技术(如:共享密钥)执行认证服务的。