    For the template you can use the next variables:
    - `%?: `Default cursor position when template is opened
    - `%t`: Prints current date (Example: ``)
    - `%T`: Prints current date and time (Example: ``)
    - `%u`: Prints current date in inactive format (Example: `[2021-06-10 Thu]`)
    - `%U`: Prints current date and time in inactive format (Example: `[2021-06-10 Thu 12:30]`)
    - `%`: Insert current date/time formatted according to lua date format (Example: `%` produces `2021-07-02 Friday`)
    - `%x`: Insert content of the clipboard via the "+" register (see `:help clipboard`)
    - `%^{PROMPT|DEFAULT|COMPLETION...}`: Prompt for input, if completion is provided an `:h inputlist` will be used
    - `%(EXP)`: Runs the given lua code and inserts the result. NOTE: this will internally pass the content to the lua `load()` function. So the body inside `%()` should be the body of a function that returns a string.
    - `%f`: Prints the file of the buffer capture was called from.
    - `%F`: Like `%f` but inserts the full path.
    - `%n`: Inserts the current `$USER`
    - `%a`: File and line number from where capture was initiated (Example: `[[file:/home/user/projects/myfile.txt +2]]`)
    For example:
    ```lua
    {
      T = {
        description = 'Todo',
        template = '* TODO %?\n %u',
        target = '~/org/todo.org'
      },
     j = {
        description = 'Journal',
        template = '\n*** %\n**** %U\n\n%?',
        target = '~/sync/org/journal.org'
      },
      -- Nested key example:
      e =  'Event',
      er = {
        description = 'recurring',
        template = '** %?\n %T',
        target = '~/org/calendar.org',
        headline = 'recurring'
      },
      eo = {
        description = 'one-time',
        template = '** %?\n %T',
        target = '~/org/calendar.org',
        headline = 'one-time'
      },
      -- Example using a lua function
      r = {
        description = "Repo URL",
        template = "* [[%x][%(return string.match('%x', '([^/]+)$'))]]%?",
        target = "~/org/repos.org",
      }
    }
    ```
* New: [Synchronize with external calendars.](orgmode.md#synchronize-with-external-calendars)
    You may want to synchronize your calendar entries with external ones shared with other people, such as nextcloud calendar or google.
    The orgmode docs have a tutorial to [sync with google](https://orgmode.org/worg/org-tutorials/org-google-sync.html) and suggests some orgmode packages that do that, sadly it won't work with `nvim-orgmode`. We'll need to go the "ugly way" by:
    * Downloading external calendar events to ics with [`vdirsyncer`](vdirsyncer.md).
    * [Importing the ics to orgmode](#importing-the-ics-to-orgmode)
    * Editing the events in orgmode
    * [Exporting from orgmode to ics](#exporting-from-orgmode-to-ics)
    * Uploading then changes to the external calendar events with [`vdirsyncer`](vdirsyncer.md).
* New: [Comparison with Markdown.](orgmode.md#comparison-with-markdown)
    What I like of Org mode over Markdown:
    * The whole interface to interact with the elements of the document through key bindings:
      * Move elements around.
      * Create elements
    * The TODO system is awesome
    * The Agenda system
    * How it handles checkboxes ` and the `:tickler:` tag so that it doesn't show up in the agenda view even if you move it to another file.
    - When the appointed day comes you'll review the tickler elements as part of your day's routine. If you think it's time to do it, refile it to the `todo.org` file, if not, adjust the recurrence period and set the next date. Even though this workflow is reproducing the "kick the can forward" that we want to avoid, the idea is that once you get the period right you'll never have to do it again. If you see that after some iterations the period keeps on changing, maybe this workflow is not working for that kind of task and you may need to think of a better system `¯\(°_o)/¯`.
    - Once you complete the item, the new one will be spawned, once it has refile it to the tickler file again.
    We use appointments instead of `DEADLINE` or `SCHEDULED` so that they don't clutter the tickler view if you don't do them on the appointment date.
    Another option is not to archive the DONE tasks and in the weekly reset them to TODO the ones that you want to do the next week.
### [OpenProject](openproject.md)
* Correction: Suggest not to use openproject.
    I've decided to use [orgmode](orgmode.md) instead.
# Coding
## Languages
### [Click](click.md)
* New: [File system isolation.](click.md#file-system-isolation)
    You may need to isolate the environment variables if your application read the configuration from them. To do that override the `runner` fixture:
    ```python
    @pytest.fixture(name="runner")
    def fixture_runner() -> CliRunner:
        """Configure the Click cli test runner."""
        return CliRunner(
            env={
                'PASSWORD_STORE_DIR': '',
                'GNUPGHOME': '',
                'PASSWORD_AUTH_DIR': '',
            },
            mix_stderr=False
        )
    ```
    If you define the fixture in `conftest.py` you may need to use another name than `runner` otherwise it may be skipped, for example `cli_runner`.
### [SQLite](sqlite.md)
* New: [Import a table from another database.](sqlite.md#import-a-table-from-another-database)
    If you have an SQLite databases named `database1` with a table `t1` and `database2` with a table `t2` and want to import table `t2` from `database2` into `database1`. You need to open `database1` with `litecli`:
    ```bash
    litecli database1
    ```
    Attach the other database with the command:
    ```sqlite
    ATTACH 'database2file' AS db2;
    ```
    Then create the table `t2`, and copy the data over with:
    ```sqlite
    INSERT INTO t2 SELECT * FROM db2.t2;
    ```
### [Python Snippets](python_snippets.md)
* New: [Substract two paths.](python_snippets.md#substract-two-paths)
    It can also framed to how to get the relative path between two absolute paths:
    ```python
    >>> from pathlib import Path
    >>> p = Path('/home/lyz/')
    >>> h = Path('/home/')
    >>> p.relative_to(h)
    PosixPath('lyz')
    ```
# DevOps
## Infrastructure Solutions
### [AWS](aws.md)
* New: [Stop an EC2 instance.](aws.md#stop-an-ec2-instance)
    ```bash
    aws ec2 stop-instances --instance-ids i-xxxxxxxx
    ```
### [Kubectl Commands](kubectl_commands.md)
* New: [Show the remaining space of a persistent volume claim.](kubectl_commands.md#show-the-remaining-space-of-a-persistent-volume-claim)
    Either look it in Prometheus or run in the pod that has the PVC mounted:
    ```bash
    kubectl -n  exec  -- df -ah
    ```
    You may need to use `kubectl get pod  -o yaml` to know what volume is mounted where.
## Continuous Integration
### [Mypy](mypy.md)
* New: [Module "typing" has no attribute "Annotated".](mypy.md#module-"typing"-has-no-attribute-"annotated")
    This one happens only because `annotated` is not available in python < 3.9.
    ```
    try:
        # mypy is complaining that it can't import it, but it's solved below
        from typing import Annotated # type: ignore
    except ImportError:
        from typing_extensions import Annotated
    ```
### [ArgoCD](argocd.md)
* New: Introduce ArgoCD.
    [Argo CD](https://argo-cd.readthedocs.io/en/stable/) is a declarative, GitOps continuous delivery tool for Kubernetes.
    Argo CD follows the GitOps pattern of using Git repositories as the source of truth for defining the desired application state. Kubernetes manifests can be specified in several ways:
    - kustomize applications
    - helm charts