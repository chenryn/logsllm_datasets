controls during the compilation process. This means that
every CPP block, KCONFIG item and source ﬁle can ap-
pear as propositional variable in the resulting formula. This
formula is constructed with the variability constraints ex-
tracted from #ifdef blocks, KCONFIG feature descriptions
and Linux Makeﬁles. The extractors we use have been de-
veloped, described and evaluated in previous work [13, 46,
52]. The resulting formula holds for every KCONFIG con-
ﬁguration that enables all source lines simultaneously.
 Derivation of a tailored kernel conﬁguration. A
SAT checker proves the satisﬁability of this formula and
returns a concrete conﬁguration that fulﬁlls all these con-
straints as example. Note that ﬁnding an optimal solution to
this problem is an NP-hard problem and was not the focus
of our work. Instead, we rely on heuristics and conﬁgurable
search strategies in the SAT checker to obtain a sufﬁciently
small conﬁguration.
As the resulting kernel conﬁguration will contain some
additional unwanted code, such as the tracing functional-
ity itself, the formula allows the user to specify additional
constraints to force the selection (or deselection) of certain
KCONFIG features, which can be speciﬁed in whitelists and
blacklists. This results in additional constraints being con-
jugated to the formula just before invoking the SAT checker.
 Completing the Linux kernel conﬁguration. The
resulting kernel conﬁguration now contains all features that
have been observed in the analysis phase. The caveat is that
the resulting propositional formula can only cover KCON-
FIG features of code that has been traced. In principle, fea-
tures that are left unreferenced are to be deselected. How-
ever, features in KCONFIG declare non-trivial dependency
constraints [55], which must all hold for a given conﬁgu-
ration in order to produce a valid KCONFIG conﬁguration.
The problem of ﬁnding a feature selection with the smallest
number of enabled features, (which is generally not unique)
has the complexity NP-hard. We therefore rely on heuris-
tics to ﬁnd a sufﬁciently small conﬁguration that satisﬁes
all constraints of KCONFIG but is still signiﬁcantly smaller
compared to a generic distribution kernel.
4 Evaluation
In this section, we present two use cases, namely a
LAMP-based server and a graphical workstation that pro-
vides an NFS service, both on distinct, non-virtualized
hardware, that we use to evaluate the effects of kernel-
conﬁguration tailoring. This evaluation demonstrates the
approach with practical examples, veriﬁes that the obtained
kernel is functional, i.e., no required conﬁguration option is
missing in the tailored kernel, and shows that the perfor-
mance of the kernel with the conﬁguration generated re-
mains comparable to that of the distribution kernel. We
quantify the attack surface reduction achieved with the for-
malisms described in Section 2.
4.1 Overview
In both use cases, we follow the process described in
Section 3 to produce a kernel conﬁguration that is tailored
to the respective use case. For each use case, we detail the
workload that is run to collect traces in the following sub-
sections. Both machines use the 3.2.0-26 Linux kernel dis-
tributed by Ubuntu as baseline, which is the kernel shipped
at the time of this evaluation in Ubuntu 12.04.
To compare the performance, we use benchmarks that
are speciﬁc to the use case. We repeat both experiments at
least 10 times and show 95%-conﬁdence intervals in our ﬁg-
enabletracing1____________________________run workload& store trace2correlate tosource line locationsMakefilearch/x86/init.c:59arch/x86/...arch/x86/entry32.S:14lib/Makefilekernel/sched.c:723...3B00  CONFIG_X86&&B1  CONFIG_NUMA&&B2  ! B1&&...establish apropositionalformula4CONFIG_X86=yCONFIG_NUMA=yCONFIG_SCSI=m......derive a kernelconﬁguration5complete theconﬁguration6ures where applicable. The benchmarks compare the origi-
nal, distribution-provided kernel to the tailored kernel gen-
erated. All requests are initiated from a separate machine
over a gigabit Ethernet link. To avoid interferences by start-
up and caching effects right after the system boots, we start
our workload and measurements after a warm-up phase of
5 min.
To measure the attack surface reduction, we ﬁrst calcu-
late code-quality metrics for each function in the kernel by
integrating the FRAMA-C [15] tool into the kernel build sys-
tem. For CVEs, we parse all entries for the Linux kernel
in the National Vulnerability Database (NVD)3. For en-
tries with a reference to the GIT repository commit (only
those CVEs published after 2005), we identify the C func-
tions that have been changed to patch a security issue, and
add each function to a list. Our metric assigns a value of
1 to functions that are in this list, and 0 otherwise. We
also generate static call graphs for each use case by us-
ing both FRAMA-C and NCC [38] and combining both call
graphs to take into account calls through function point-
ers, which are very widely used in the Linux kernel.
In
the case of the GENSEC model, we compute the AS1 and
AS2 attack surface metrics directly over all functions in this
graph, for both the baseline and the tailored kernel. In the
case of the ISOLSEC model, we compute the subgraph cor-
responding to the attack surface by performing a reachabil-
ity analysis from functions corresponding to system calls
(entry points) and removing all barrier functions as detailed
in Section 2.2.2. We then evaluate the security improve-
ments by computing the attack surface reduction between
the baseline kernel and a tailored kernel.
4.2 LAMP-stack use case
4.2.1 Description
This use case employs a machine with a 2.8 GHz Celeron
CPU and 1 GB of RAM. We use the Ubuntu 12.04 Server
Edition with all current updates and no modiﬁcations to
either the kernel or any of the installed packages. As de-
scribed in Section 3.3, we extend the system-provided ini-
tial RAM disk (initrd) to enable tracing very early in
the boot process.
In addition, we set up an web plat-
form consisting of APACHE2, MYSQL and PHP. The
system serves static documents,
the collaboration plat-
form DOKUWIKI [16] and the message board system PH-
PBB3 [40] to simulate a realistic use case.
The test workload for this use case starts with a simple
HTTP request using the tool WGET, which fetches a ﬁle
from the server right after the ﬁve-minute warm-up phase.
This is followed by one run of the HTTPERF [35] tool, which
accesses a static website continuously, increasing the num-
3http://nvd.nist.gov/
Figure 5. Evolution of KCONFIG features en-
abled over time. The bullets mark the point in
time at which a speciﬁc workload was started.
ber of requests per second for every run. Finally, we run
the SKIPFISH [54] security scan on the server. SKIPFISH is
a tool performing automated security checks on web appli-
cations, hence exercising a number of edge-cases, which is
valuable not only to exercise as many code paths as possi-
ble, but also to test the stability of the tailored use case.
4.2.2 Results
Figure 5 depicts the number of KCONFIG features that our
tool obtains from the trace logs collected at the times given.
After the warm-up phase, connecting to the server via ssh
causes a ﬁrst increase in enabled KCONFIG features. The
simple HTTP request triggers only a small further increase,
and the conﬁguration converges quickly after the HTTPERF
tool is run, and shows no further changes when proceeding
to the SKIPFISH scan. This shows that, for the LAMP use
case, a tracing phase of about ten minutes is sufﬁcient to
detect all required features.
Tailoring The trace ﬁle upon which the kernel conﬁgu-
ration is generated is taken 1,000 sec after boot, i.e., after
running the tool HTTPERF, but before running the SKIPFISH
tool. It consists of 8,320 unique function addresses, includ-
ing 195 addresses from LKMs. This correlates to 7,871 dif-
ferent source lines in 536 ﬁles. Our prototype generates
the corresponding conﬁguration in 145 seconds and com-
piles the kernel in 89 seconds on a commodity quad-core
machine with 8 GB of RAM.
When comparing the original kernel to the distribution
kernel shipped with Ubuntu, we observe a reduction of
KCONFIG features that are statically compiled into the ker-
nel of over 70%, and almost 99% for features that lead to
03006009001200150018002100465470475480485490495500timeinsafterfinishedboot(inrunlevel3)enabledKConfigfeaturessshwgethttperfskipfishFigure 6. Reduction in compiled source ﬁles
for the tailored kernel, compared with the
baseline in the LAMP use case (results for
the workstation with NFS use case are simi-
lar). For every subdirectory in the Linux tree,
the number of source ﬁles compiled in the
tailored kernel is depicted in blue and the re-
mainder to the number in the baseline kernel
in red. The reduction percentage per subdi-
rectory is also shown.
compilation as LKMs (cf. Table 1). Consequently, the over-
all size of the text segment for the tailored kernel is over
90% lower than that of the baseline kernel supplied by the
distribution.
To relate to the savings in terms of attack surface, we
show the number of source code ﬁles that the tailored con-
ﬁguration does not include when compared to the distri-
bution conﬁguration in Figure 6. The ﬁgure breaks down
the reduction of functionality by subdirectories in terms of
source ﬁles that get compiled. The highest reduction rates
are observed inside the sound/ (100%), drivers/ (95%),
and net/ (87%) directories. As the web server does not
play any sounds, the trace ﬁle does not indicate any sound-
related code. Similarly, the majority of drivers are not
needed for a particular hardware setup. The same applies
to most of the network protocols available in Linux, which
are not required for this use case. Out of 8,670 source ﬁles
compiled in the standard Ubuntu distribution kernel, the tai-
lored kernel only required 1,121, which results in an overall
reduction of 87% (cf. Table 1).
Figure 7. Comparison of reply rates of the
LAMP-based server using the kernel shipped
with Ubuntu and our tailored kernel. Conﬁ-
dence intervals were omitted, as they were
too small and thus detrimental to readability.
the tailored kernel can handle unusual web requests equally
well. Furthermore, this shows that for this use case even a
kernel tailored from a trace ﬁle which only covers a smaller
test workload than the target scenario is suitable for stable
operation of the service.
Performance We measure the performance with the
HTTPERF tool. The result is compared with a run performed
on the same system that runs the baseline kernel. Figure 7
shows that the tailored kernel achieves a performance very
similar to that of the kernel provided by the distribution.
Security Finally, we compute attack surface reduction
with AS1 and AS2 in the GENSEC and ISOLSEC models
after generating the relevant call graphs. The numbers in
Table 1 show that the AS1SLOC, AS1cycl and AS2SLOC attack
surface reduction is around 85% in the GENSEC model, and
around 80% in the ISOLSEC model. In both models, there
are also 60% fewer functions that were affected by patches
due to CVEs in the past. We also observe that AS2cycl is
slightly lower, with an attack surface reduction around 60%.
Overall, the attack surface reduction is between 60% and
85%.
4.3 Workstation/NFS use case
4.3.1 Description
Stability To ensure that our tailored kernel is fully func-
tional, we run SKIPFISH [54] once on the baseline kernel
and then compare the results to a scan on the tailored ker-
nel. The report produced by the tool ﬁnds no signiﬁcant
difference from one kernel conﬁguration to the other, hence
For the workstation/NFS server use case, we use a machine
with a 3.4 GHz quad-core CPU and 8 GB of RAM, running
the Ubuntu 12.04 Desktop edition, again without modiﬁca-
tions to packages or kernel conﬁguration. The machine is
conﬁgured to export a local directory via NFS.
archblockcryptodriversfsipckernellibmmnetsoundothers010002000300040005000600033%15%71%95%86%38%34%25%8%87%100%62%removedfilesfromtailoredkernelcomparedtoUbuntustandardsourcefilesinbothkernels01002003004005006007004042444648505254baselinekerneltailoredkernelrequestrateinreq/sreplies/sKernel (vmlinux) size in Bytes
LKM total size in Bytes
Options set to ’y’
Options set to ’m’
Compiled source ﬁles
GENSEC
ISOLSEC
Call graph nodes
Call graph arcs
AS1SLOC
AS1cycl
AS1CV E
AS2SLOC
AS2cycl
AS2CV E
Call graph nodes
Call graph arcs
AS1SLOC
AS1cycl
AS1CV E
AS2SLOC
AS2cycl
AS2CV E
LAMP
Baseline
NFS
9,933,860
62,987,539
1,537
3,142
8,670
230,916
1,033,113
6,080,858
1,268,551
848
58,353,938,861
2,721,526,295
20,023
92,244
443,296
2,403,022
504,019
485
15,753,006,783
918,429,105
10,151
96,064
462,433
2,465,202
518,823
524
15,883,981,161
929,197,559
11,127
LAMP
4,228,235
2,139,642
452
43
1,121
34,880
132,030
895,513
209,002