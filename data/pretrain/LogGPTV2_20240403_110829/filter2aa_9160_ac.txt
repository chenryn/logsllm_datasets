`DS:BD` points to the last character of the buffer. If it's set to zero, we jump to `0x77`:
```assembly
0000:0077      e8beff         call fcn.00000038
0000:007a      bbb500         mov bx, 0xb5
```
This just calls `fcn.00000038`:
```assembly
[0000:0050]> pdf @ fcn.00000038
/ (fcn) fcn.00000038 24
|   fcn.00000038 ();
|           0000:0038      58             pop ax
|           0000:0039      bb7a00         mov bx, 0x7a
|           0000:003c      3bc3           cmp ax, bx
|       ,= pdf @ section.seg_000
            ;-- section.seg_000:
            ;-- cx:
            ;-- si:
            ;-- di:
            ;-- dx:
/ (fcn) fcn.00000000 32
|   fcn.00000000 (int32_t arg_4h, int32_t arg_6h, int32_t arg_8h);
|           ; arg int32_t arg_4h @ bp+0x4
|           ; arg int32_t arg_6h @ bp+0x6
|           ; arg int32_t arg_8h @ bp+0x8
|           0000:0000      55             push bp
|           0000:0001      8bec           mov bp, sp
|           0000:0003      8b5e06         mov bx, word [arg_6h]
|           0000:0006      8b4e08         mov cx, word [arg_8h]
|       .-> 0000:0009      8a0f           mov cl, byte [bx]
|       :   0000:000b      b400           mov ah, 0
|       :   0000:000d      53             push bx
|       :   0000:000e      8b5e04         mov bx, word [arg_4h]
|       :   0000:0011  ~   d12f           shr word [bx], 1
|       :   0000:0013      d12f           shr word [bx], 1
|       :   0000:0015      2907           sub word [bx], ax
|       :   0000:0017      5b             pop bx
|       :   0000:0018      43             inc bx
|       :   0000:0019      49             dec cx
|       :   0000:001a      83f900         cmp cx, 0
|       `=< 0000:001d      75ea           jne 9
|           0000:001f      5d             pop bp
\           0000:0020      c3             ret
```
This function performs some kind of hash on the input, by running `input_length` (a.k.a. `arg_8h`) times, reading the character at `user_input + i` (a.k.a. `arg_6h + bx`) and updating the hash at `location_after_user_input` (a.k.a `arg_4h`).
When the function returns, `DS:C0` contains the hash. Then:
```assembly
0000:0095      813ec000e1cf   cmp word [0xc0], 0xcfe1
0000:009b      7503           jne 0xa0
```
The hash is compared to `0xcfe1`, and if they aren't equal, we jump to `0xa0`, which as we say earlier prints `No KIPODIM today`. We want the hash to be equal in order to continue execution:
```assembly
0000:009d      e898ff         call fcn.00000038
0000:00a0      ba2001         mov dx, 0x120
```
We call `fcn.00000038` again, this time with the return value of `0xa0`, which takes us to `0xaa`:
```assembly
0000:00aa      bac200         mov dx, 0xc2
0000:00ad      b409           mov ah, 9
0000:00af      cd21           int 0x21
```
This prints `DS:C2`, which is:
```