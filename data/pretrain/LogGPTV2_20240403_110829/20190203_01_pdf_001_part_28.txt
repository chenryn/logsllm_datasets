### Custom Conflict Handling Function Example

The following is an example of a custom conflict handling function, where the function logic determines the value of the first conflicting column.

```sql
CREATE OR REPLACE FUNCTION edb.custom_conflict_emp (
    INOUT source _edb_replicator_pub.rrst_edb_emp,
    IN target _edb_replicator_pub.rrst_edb_emp,
    IN conflict_column VARCHAR(255),
    OUT resolution_message VARCHAR(255),
    OUT resolution_code INTEGER
)
AS $$
DECLARE
BEGIN
    resolution_code := 3;
    source.ename := 'Unknown';
    source.job := 'Unknown';
    source.mgr := 0;
    source.hiredate := '2013-01-01';
    source.sal := 0;
    source.comm := 0;
    resolution_message := 'Custom conflict handling: Defaults set on edb.emp';
END;
$$ LANGUAGE plpgsql;
```

In this example, only the first conflicting column (based on the column order within the table) is set to the value coded in the function. All other assignments to the `source` parameter are ignored, and these columns retain their values from the source node.

### Function Parameters

- **`source`**: 
  - **Type**: INOUT parameter of the record type of the shadow table in the `_edb_replicator_pub` schema of the master definition node.
  - **Description**: If the log-based method of synchronization replication is used, specify the actual publication table instead of the shadow table. The input values are the column values from the source node. When `resolution_code` is set to 3, set the columns in this parameter to the values that will be used for the final outcome.

- **`target`**: 
  - **Type**: IN parameter of the record type of the shadow table in the `_edb_replicator_pub` schema of the master definition node.
  - **Description**: If the log-based method of synchronization replication is used, specify the actual publication table instead of the shadow table. The input values are the column values from the target node.

- **`conflict_column`**: 
  - **Type**: IN parameter of type `VARCHAR(255)`.
  - **Description**: Contains the name of the column on which the update/update conflict has occurred. If more than one column is involved in the conflict, the name of the first conflicting column is returned.

- **`resolution_message`**: 
  - **Type**: OUT parameter of type `VARCHAR(255)`.
  - **Description**: Contains any informative message to be written to the publication server log file. The publication server configuration option `logging.level` must be set to at least the `INFO` level for the messages to appear in the publication server log file.

- **`resolution_code`**: 
  - **Type**: OUT parameter of type `INTEGER`.
  - **Description**: Set to one of the following values to determine how to resolve the conflict:
    - 1: Use the column values of the source node of the replication for the final outcome.
    - 2: Use the column values of the target node of the replication for the final outcome.
    - 3: Use the value set for the `source` INOUT parameter of the first conflicting column as the final outcome for that column.

### Adding a Custom Conflict Handling Function

To add a custom conflict handling function to the master definition node, follow these steps:

1. **Ensure the Publication Exists**:
   - The publication under the master definition node must exist before adding the function. See Section 6.2.3 for information on creating the publication.

2. **Add the Function**:
   - Add the function to the master definition node. The following example shows the addition of the function using PSQL:
     ```sql
     edb=# \i /home/user/custom_conflict_dept.sql
     CREATE FUNCTION
     ```

3. **Open the Conflict Resolution Options Tab**:
   - Open the Conflict Resolution Options tab in one of the following ways:
     - From the Publication menu, choose "Update Publication," then "Conflict Resolution Options."
     - Click the secondary mouse button on the Publication node, choose "Update Publication," and then choose "Conflict Resolution Options."

4. **Set Custom Conflict Handling**:
   - For the table on which you want to use custom conflict handling, select "Custom" from the appropriate drop-down list. In the "Custom Handler" text box, enter the schema and function name used in the `CREATE FUNCTION` statement.

5. **Confirm and Update**:
   - Click the "Update" button, and then click "OK" in response to the "Conflict Resolution Options Updated Successfully" confirmation message.

### Custom Conflict Handling Examples

#### Setting Columns from the Source or Target

The following example shows the effect of custom conflict handling using the custom conflict handling function named `custom_conflict_dept`. This function sets the target node as the winner of update/update conflicts on the `dept` table.

**Example:**

- **Update on the Master Definition Node (edb)**:
  ```sql
  edb=# UPDATE dept SET loc = 'PORTLAND' WHERE deptno = 50;
  UPDATE 1
  edb=# SELECT * FROM dept;
  deptno | dname | loc
  --------+-------------+----------
  10 | ACCOUNTING | NEW YORK
  20 | RESEARCH | DALLAS
  30 | SALES | CHICAGO
  40 | OPERATIONS | BOSTON
  50 | ADVERTISING | PORTLAND
  (5 rows)
  ```

- **Update on a Second Master Node (mmrnode)**:
  ```sql
  mmrnode=# UPDATE dept SET loc = 'LOS ANGELES' WHERE deptno = 50;
  UPDATE 1
  mmrnode=# SELECT * FROM dept;
  deptno | dname | loc
  --------+-------------+-------------
  10 | ACCOUNTING | NEW YORK
  20 | RESEARCH | DALLAS
  30 | SALES | CHICAGO
  40 | OPERATIONS | BOSTON
  50 | ADVERTISING | LOS ANGELES
  (5 rows)
  ```

- **After Synchronization Replication**:
  - The update/update conflict is detected and resolved. The `loc` column of department 50 in the source master node is reset to the value from the target master node.
  ```sql
  edb=# SELECT * FROM dept;
  deptno | dname | loc
  --------+-------------+-------------
  10 | ACCOUNTING | NEW YORK
  20 | RESEARCH | DALLAS
  30 | SALES | CHICAGO
  40 | OPERATIONS | BOSTON
  50 | ADVERTISING | LOS ANGELES
  (5 rows)
  ```

- **Target Master Node (mmrnode)**:
  ```sql
  mmrnode=# SELECT * FROM dept;
  deptno | dname | loc
  --------+-------------+-------------
  10 | ACCOUNTING | NEW YORK
  20 | RESEARCH | DALLAS
  30 | SALES | CHICAGO
  40 | OPERATIONS | BOSTON
  50 | ADVERTISING | LOS ANGELES
  (5 rows)
  ```

The target node wins the conflict as determined by setting the `resolution_code` parameter to 2 in the custom conflict handling function.

#### Setting Columns from the Function Logic

The following example shows the effect of custom conflict handling using the custom conflict handling function named `custom_conflict_emp`. This function sets values coded in the function as the winner of update/update conflicts on the `emp` table.

**Example:**

- **Initial Row in `emp` Table**:
  ```sql
  edb=# SELECT * FROM emp WHERE empno = 9001;
  empno | ename | job | mgr | hiredate | sal | comm | deptno
  -------+-------+----------+------+--------------------+---------+---------+--------
  9001 | SMITH | SALESMAN | 7698 | 31-OCT-13 00:00:00 | 8000.00 | 4000.00 | 30
  (1 row)
  ```

- **Update on the Master Definition Node (edb)**:
  ```sql
  edb=# UPDATE emp SET ename = 'JONES', mgr = 7900, sal = 8500, comm = 5000 WHERE empno = 9001;
  UPDATE 1
  edb=# SELECT * FROM emp WHERE empno = 9001;
  empno | ename | job | mgr | hiredate | sal | comm | deptno
  -------+-------+----------+------+--------------------+---------+---------+--------
  9001 | JONES | SALESMAN | 7900 | 31-OCT-13 00:00:00 | 8500.00 | 5000.00 | 30
  (1 row)
  ```

- **Update on a Second Master Node (mmrnode)**:
  ```sql
  mmrnode=# UPDATE emp SET ename = 'ROGERS', mgr = 7788, sal = 9500, comm = 5000 WHERE empno = 9001;
  UPDATE 1
  mmrnode=# SELECT * FROM emp WHERE empno = 9001;
  empno | ename | job | mgr | hiredate | sal | comm | deptno
  -------+--------+----------+------+--------------------+---------+---------+--------
  9001 | ROGERS | SALESMAN | 7788 | 31-OCT-13 00:00:00 | 9500.00 | 5000.00 | 30
  (1 row)
  ```

- **After Synchronization Replication**:
  - The master node `edb` contains the following values for the conflicting row:
    ```sql
    edb=# SELECT * FROM emp WHERE empno = 9001;
    empno | ename | job | mgr | hiredate | sal | comm | deptno
    -------+---------+----------+------+--------------------+---------+---------+--------
    9001 | Unknown | SALESMAN | 7900 | 31-OCT-31 00:00:00 | 8500.00 | 5000.00 | 30
    (1 row)
    ```

  - The master node `mmrnode` contains the following values for the conflicting row:
    ```sql
    mmrnode=# SELECT * FROM emp WHERE empno = 9001;
    empno | ename | job | mgr | hiredate | sal | comm | deptno
    -------+---------+----------+------+--------------------+---------+---------+--------
    9001 | Unknown | SALESMAN | 7900 | 31-OCT-31 00:00:00 | 8500.00 | 5000.00 | 30
    (1 row)
    ```

The value of the first conflicting column is determined by the custom conflict handling function for both master nodes.

#### Setting Columns Using the Source and Target Shadow Tables

The following example shows how values from the source and target shadow tables can be used to set the final values in the conflicting column.

**Note**: As this custom conflict handling function uses a column (`rrep_old_quantity` in this example) that is a column of the shadow table and not of the actual publication table, this particular solution cannot be used for a publication using the log-based method of synchronization replication.

**Example Table**:
```sql
CREATE TABLE inventory (
    item_id NUMERIC PRIMARY KEY,
    name VARCHAR(20),
    quantity INTEGER
);

INSERT INTO inventory VALUES (1, 'LaserJet Printer 610', 50);
INSERT INTO inventory VALUES (2, 'Scanner 510', 10);
INSERT INTO inventory VALUES (3, 'LCD', 20);
```

**Shadow Table Structure**:
```sql
edb=# \d _edb_replicator_pub.rrst_edb_inventory;
Table "_edb_replicator_pub.rrst_edb_inventory"
Column | Type | Modifiers
-------------------------+-----------------------------+---------------------------
rrep_sync_id | numeric | not null
rrep_common_id | numeric |
rrep_operation_type | character(1) |
rrep_tx_timestamp | timestamp without time zone | default current_timestamp
item_id | numeric |
name | character varying(20) |
quantity | integer |
rrep_old_item_id | numeric |
rrep_old_name | character varying(20) |
rrep_old_quantity | integer |
rrep_tx_conflict_status | character(1) |
Indexes:
"rrst_edb_inventory_pkey" PRIMARY KEY, btree (rrep_sync_id)
```

**Custom Conflict Handling Function**:
```sql
CREATE OR REPLACE FUNCTION edb.custom_conflict_inventory (
    INOUT source _edb_replicator_pub.rrst_edb_inventory,
    IN target _edb_replicator_pub.rrst_edb_inventory,
    IN conflict_column VARCHAR(255),
    OUT resolution_message VARCHAR(255),
    OUT resolution_code INTEGER
)
AS $$
DECLARE
BEGIN
    source.quantity := source.rrep_old_quantity
    - ((source.rrep_old_quantity - source.quantity)
    + (target.rrep_old_quantity - target.quantity));
    resolution_code := 3;
    resolution_message := 'Custom conflict handling: Quantity adjusted';
END;
$$ LANGUAGE plpgsql;
```

**Example Usage**:
- **Update on the Master Definition Node (edb)**:
  ```sql
  edb=# UPDATE inventory SET quantity = quantity - 2 WHERE item_id = 1;
  UPDATE 1
  ```

This custom conflict handling function adjusts the `quantity` based on the old and new values from both the source and target shadow tables, ensuring the remaining inventory is correctly updated across all master nodes.