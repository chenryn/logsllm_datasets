edb.dept ';
END;
$$
LANGUAGE plpgsql;
The following is an example of a custom conflict handling function where the function
logic determines the value of the first conflicting column.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 306
EDB Postgres Replication Server User’s Guide
CREATE OR REPLACE FUNCTION edb.custom_conflict_emp (
INOUT source _edb_replicator_pub.rrst_edb_emp,
IN target _edb_replicator_pub.rrst_edb_emp,
IN conflict_column VARCHAR(255),
OUT resolution_message VARCHAR(255),
OUT resolution_code INTEGER
)
AS
$$
DECLARE
BEGIN
resolution_code := 3;
source.ename := 'Unknown';
source.job := 'Unknown';
source.mgr := 0;
source.hiredate := '2013-01-01';
source.sal := 0;
source.comm := 0;
resolution_message := 'Custom conflict handling: Defaults set on
edb.emp';
END;
$$
LANGUAGE plpgsql;
In this example, only the first conflicting column (based upon the column order within
the table) is set to the value coded in the function. All other assignments to the source
parameter are ignored. These other columns are set to the source node.
The following is a description of the function parameters.
Parameters
source
INOUT parameter of the record type of the shadow table in schema
_edb_replicator_pub of the master definition node on which conflicts are to
be resolved. If the log-based method of synchronization replication is used,
specify the actual publication table instead of the shadow table. The input values
are the column values from the source node. When resolution_code is set to a
value of 3, set the columns in this parameter to the values that are to be used for
the final outcome.
target
IN parameter of the record type of the shadow table in schema
_edb_replicator_pub of the master definition node on which conflicts are to
be resolved. If the log-based method of synchronization replication is used,
specify the actual publication table instead of the shadow table. The input values
are the column values from the target node.
conflict_column
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 307
EDB Postgres Replication Server User’s Guide
IN parameter of type VARCHAR(255) containing the name of the column on
which the update/update conflict has occurred. If more than one column is
involved in the conflict, the name of the first conflicting column is returned.
resolution_message
OUT parameter of type VARCHAR(255) containing any informative message to be
written to the publication server log file. The publication server configuration
option logging.level must be set to at least the INFO level in order for the
messages to appear in the publication server log file. See Section 3.5 for the
location of the publication server log file.
resolution_code
OUT parameter of type INTEGER that you set to one of the following values to
determine how to resolve the conflict: 1 to use the column values of the source
node of the replication for the final outcome, 2 to use the column values of the
target node of the replication for the final outcome, or 3 to use the value set for
the source INOUT parameter of the first conflicting column as the final outcome
for that column.
6.6.8.2 Adding a Custom Conflict Handling Function
The following are the steps to add a custom conflict handling function to the master
definition node.
Step 1: The publication under the master definition node must exist before adding the
function to the master definition node. See Section 6.2.3 for information on creating the
publication.
Step 2: Add the function to the master definition node. The following example shows the
addition of the function using PSQL.
edb=# \i /home/user/custom_conflict_dept.sql
CREATE FUNCTION
Step 3: Open the Conflict Resolution Options tab in any of the following ways:
 From the Publication menu, choose Update Publication, then Conflict Resolution
Options.
 Click the secondary mouse button on the Publication node, choose Update
Publication, and then choose Conflict Resolution Options.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 308
EDB Postgres Replication Server User’s Guide
Figure 6-28 - Opening the Conflict Resolution Options tab
Step 4: For the table on which you want to use custom conflict handling, select Custom
from the appropriate drop-down list. In the Custom Handler text box, enter the schema
and function name used in the CREATE FUNCTION statement.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 309
EDB Postgres Replication Server User’s Guide
Figure 6-29 – Setting conflict resolution to custom conflict handling
Step 5: Click the Update button, and then click OK in response to the Conflict Resolution
Options Updated Successfully confirmation message.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 310
EDB Postgres Replication Server User’s Guide
Figure 6-30 - Successfully updated conflict resolution options
Note: If the multi-master replication system uses custom conflict handling, and you
subsequently switch the role of the master definition node to another master node, you
must re-add the functions to the new master definition node. That is, you must repeat
Step 2 on the new master definition node.
Note: If you wish to delete the multi-master replication system, before removing the
publication you must drop all custom conflict handling functions from the master
definition node.
The following example shows the deletion of a custom conflict function.
DROP FUNCTION
edb.custom_conflict_dept(_edb_replicator_pub.rrst_edb_dept,_edb_replicator_pu
b.rrst_edb_dept,varchar);
6.6.8.3 Custom Conflict Handling Examples
This section contains examples using custom conflict handling functions.
Setting Columns from the Source or Target
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 311
EDB Postgres Replication Server User’s Guide
The following example shows the effect of custom conflict handling using the custom
conflict handling function named custom_conflict_dept shown in Section 6.6.8.1.
This function sets the target node as the winner of update/update conflicts on the dept
table.
The following update is made on the master definition node, edb:
edb=# UPDATE dept SET loc = 'PORTLAND' WHERE deptno = 50;
UPDATE 1
edb=# SELECT * FROM dept;
deptno | dname | loc
--------+-------------+----------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | ADVERTISING | PORTLAND
(5 rows)
The following update is made on a second master node, mmrnode:
mmrnode=# UPDATE dept SET loc = 'LOS ANGELES' WHERE deptno = 50;
UPDATE 1
mmrnode=# SELECT * FROM dept;
deptno | dname | loc
--------+-------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | ADVERTISING | LOS ANGELES
(5 rows)
After a synchronization replication, the update/update conflict is detected and resolved as
shown in the Conflict History tab:
Figure 6-31 - Conflict resolved by custom conflict handling
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 312
EDB Postgres Replication Server User’s Guide
In the source master node the loc column of department 50 loses the value set in its
UPDATE statement. The column is reset to the value from the target master node.
edb=# SELECT * FROM dept;
deptno | dname | loc
--------+-------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | ADVERTISING | LOS ANGELES
(5 rows)
In the target master node the loc column of department 50 retains the value set from its
UPDATE statement.
mmrnode=# SELECT * FROM dept;
deptno | dname | loc
--------+-------------+-------------
10 | ACCOUNTING | NEW YORK
20 | RESEARCH | DALLAS
30 | SALES | CHICAGO
40 | OPERATIONS | BOSTON
50 | ADVERTISING | LOS ANGELES
(5 rows)
The target node wins the conflict as determined by the setting of the resolution_code
parameter to a value of 2 in the custom conflict handling function.
Setting Columns from the Function Logic
The following example shows the effect of custom conflict handling using the custom
conflict handling function named custom_conflict_emp shown in Section 6.6.8.1.
This function sets values coded in the function as the winner of update/update conflicts
on the emp table.
The following is the row from the emp table prior to the update:
edb=# edb=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+----------+------+--------------------+---------+---------+--------
9001 | SMITH | SALESMAN | 7698 | 31-OCT-13 00:00:00 | 8000.00 | 4000.00 | 30
(1 row)
The following update is made in the master definition node, edb:
edb=# UPDATE emp SET ename = 'JONES', mgr = 7900, sal = 8500, comm = 5000 WHERE empno =
9001;
UPDATE 1
edb=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+-------+----------+------+--------------------+---------+---------+--------
9001 | JONES | SALESMAN | 7900 | 31-OCT-13 00:00:00 | 8500.00 | 5000.00 | 30
(1 row)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 313
EDB Postgres Replication Server User’s Guide
The following update is made in a second master node, mmrnode:
mmrnode=# UPDATE emp SET ename = 'ROGERS', mgr = 7788, sal = 9500, comm = 5000 WHERE
empno = 9001;
UPDATE 1
mmrnode=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+----------+------+--------------------+---------+---------+--------
9001 | ROGERS | SALESMAN | 7788 | 31-OCT-13 00:00:00 | 9500.00 | 5000.00 | 30
(1 row)
After the synchronization replication the master node, edb, contains the following values
for the conflicting row:
edb=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+---------+----------+------+--------------------+---------+---------+--------
9001 | Unknown | SALESMAN | 7900 | 31-OCT-31 00:00:00 | 8500.00 | 5000.00 | 30
(1 row)
After the synchronization replication the master node, mmrnode, contains the following
values for the conflicting row:
mmrnode=# SELECT * FROM emp WHERE empno = 9001;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+---------+----------+------+--------------------+---------+---------+--------
9001 | Unknown | SALESMAN | 7900 | 31-OCT-31 00:00:00 | 8500.00 | 5000.00 | 30
(1 row)
The value of the first conflicting column is determined by the custom conflict handling
function for both master nodes.
Setting Columns Using the Source and Target Shadow Tables
The following example shows how values from the source and target shadow tables can
be used to set the final values in the conflicting column.
Note: As this custom conflict handling function uses a column (rrep_old_quantity
in this example) that is a column of the shadow table and not of the actual publication
table, this particular solution cannot be used for a publication using the log-based method
of synchronization replication.
For this example, the following table is used, which contains product inventory.
CREATE TABLE inventory (
item_id NUMERIC PRIMARY KEY,
name VARCHAR(20),
quantity INTEGER
);
INSERT INTO inventory VALUES (1, 'LaserJet Printer 610', 50);
INSERT INTO inventory VALUES (2, 'Scanner 510', 10);
INSERT INTO inventory VALUES (3, 'LCD', 20);
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 314
EDB Postgres Replication Server User’s Guide
When products are purchased at different locations, resulting in an inventory reduction on
several master nodes, the remaining inventory must be properly updated on all master
nodes to reflect the reduction in all locations. The custom conflict handling function is
coded to properly record the remaining inventory if changes to the same item are made in
several locations.
The following example uses master definition node, edb, and a second master node,
mmrnode. Initially, the inventory table has the same contents on both master nodes.
edb=# SELECT * FROM inventory;
item_id | name | quantity
---------+----------------------+----------
1 | LaserJet Printer 610 | 50
2 | Scanner 510 | 10
3 | LCD | 20
(3 rows)
After creation of the master nodes, the following shows the resulting shadow table
structures in the master definition node:
edb=# \d _edb_replicator_pub.rrst_edb_inventory;
Table "_edb_replicator_pub.rrst_edb_inventory"
Column | Type | Modifiers
-------------------------+-----------------------------+---------------------------
rrep_sync_id | numeric | not null
rrep_common_id | numeric |
rrep_operation_type | character(1) |
rrep_tx_timestamp | timestamp without time zone | default current_timestamp
item_id | numeric |
name | character varying(20) |
quantity | integer |
rrep_old_item_id | numeric |
rrep_old_name | character varying(20) |
rrep_old_quantity | integer |
rrep_tx_conflict_status | character(1) |
Indexes:
"rrst_edb_inventory_pkey" PRIMARY KEY, btree (rrep_sync_id)
Similarly, in the second master node the same shadow table is created.
mmrnode=# \d _edb_replicator_pub.rrst_edb_inventory
Table "_edb_replicator_pub.rrst_edb_inventory"
Column | Type | Modifiers
-------------------------+-----------------------------+---------------------------
rrep_sync_id | numeric | not null
rrep_common_id | numeric |
rrep_operation_type | character(1) |
rrep_tx_timestamp | timestamp without time zone | default current_timestamp
item_id | numeric |
name | character varying(20) |
quantity | integer |
rrep_old_item_id | numeric |
rrep_old_name | character varying(20) |
rrep_old_quantity | integer |
rrep_tx_conflict_status | character(1) |
Indexes:
"rrst_edb_inventory_pkey" PRIMARY KEY, btree (rrep_sync_id)
For an update transaction, the shadow table contains the column values before the update
was made on the publication table (columns with names rrep_old_column_name) and
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 315
EDB Postgres Replication Server User’s Guide
the values after the update was applied (columns named identically to the publication
table column names).
The custom conflict handling function uses both the current and old values of the
quantity columns from the source and target shadow tables as shown by the following.
CREATE OR REPLACE FUNCTION edb.custom_conflict_inventory (
INOUT source _edb_replicator_pub.rrst_edb_inventory,
IN target _edb_replicator_pub.rrst_edb_inventory,
IN conflict_column VARCHAR(255),
OUT resolution_message VARCHAR(255),
OUT resolution_code INTEGER
)
AS
$$
DECLARE
BEGIN
source.quantity := source.rrep_old_quantity
- ((source.rrep_old_quantity - source.quantity)
+ (target.rrep_old_quantity - target.quantity));
resolution_code := 3;
resolution_message := 'Custom conflict handling: Quantity adjusted';
END;
$$
LANGUAGE plpgsql;
Assume two items with item_id of 1 are purchased on the master definition node:
edb=# UPDATE inventory SET quantity = quantity - 2 WHERE item_id = 1;
UPDATE 1