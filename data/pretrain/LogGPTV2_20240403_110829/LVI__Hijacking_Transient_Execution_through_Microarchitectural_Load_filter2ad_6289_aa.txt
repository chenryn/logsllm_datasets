title:LVI: Hijacking Transient Execution through Microarchitectural Load
Value Injection
author:Jo Van Bulck and
Daniel Moghimi and
Michael Schwarz and
Moritz Lipp and
Marina Minkin and
Daniel Genkin and
Yuval Yarom and
Berk Sunar and
Daniel Gruss and
Frank Piessens
2020 IEEE Symposium on Security and Privacy
LVI: Hijacking Transient Execution through
Microarchitectural Load Value Injection
Jo Van Bulck∗, Daniel Moghimi†, Michael Schwarz‡, Moritz Lipp‡, Marina Minkin§, Daniel Genkin§,
Yuval Yarom¶, Berk Sunar†, Daniel Gruss‡, and Frank Piessens∗
∗imec-DistriNet, KU Leuven
§University of Michigan
¶University of Adelaide and Data61
†Worcester Polytechnic Institute
‡Graz University of Technology
Abstract—The recent Spectre attack ﬁrst showed how to inject
incorrect branch targets into a victim domain by poisoning
microarchitectural branch prediction history. In this paper, we
generalize injection-based methodologies to the memory hierar-
chy by directly injecting incorrect, attacker-controlled values into
a victim’s transient execution. We propose Load Value Injection
(LVI) as an innovative technique to reversely exploit Meltdown-
type microarchitectural data leakage. LVI abuses that faulting
or assisted loads, executed by a legitimate victim program, may
transiently use dummy values or poisoned data from various
microarchitectural buffers, before eventually being re-issued by
the processor. We show how LVI gadgets allow to expose
victim secrets and hijack transient control ﬂow. We practically
demonstrate LVI in several proof-of-concept attacks against Intel
SGX enclaves, and we discuss implications for traditional user
process and kernel isolation.
State-of-the-art Meltdown and Spectre defenses,
including
widespread silicon-level and microcode mitigations, are orthog-
onal to our novel LVI techniques. LVI drastically widens the
spectrum of
transient paths. Fully mitigating our
attacks requires serializing the processor pipeline with lfence
instructions after possibly every memory load. Additionally and
even worse, due to implicit loads, certain instructions have to
including the ubiquitous x86 ret instruction.
be blacklisted,
Intel plans compiler and assembler-based full mitigations that
will allow at least SGX enclave programs to remain secure
on LVI-vulnerable systems. Depending on the application and
optimization strategy, we observe extensive overheads of factor
2 to 19 for prototype implementations of the full mitigation.
incorrect
I. INTRODUCTION
Recent research on transient-execution attacks has been
characterized by a sharp split between on the one hand Spectre-
type misspeculation attacks, and on the other hand, Meltdown-
type data extraction attacks. The ﬁrst category, Spectre-type
attacks [4, 23, 38, 39, 44], trick a victim into transiently
diverting from its intended execution path. Particularly, by
poisoning the processor’s branch predictor machinery, Spectre
adversaries steer the victim’s transient execution to gadget code
snippets, which inadvertently expose secrets through the shared
microarchitectural state. Importantly, Spectre gadgets execute
entirely within the victim domain and can hence only leak
architecturally accessible data.
The second category consists of Meltdown-type attacks [9,
42, 53, 57, 61, 67, 70], which target architecturally inaccessible
data by exploiting illegal data ﬂow from faulting or assisted
instructions. Particularly, on vulnerable processors, the results
of unauthorized loads are still forwarded to subsequent transient
operations, which may encode the data before an exception
is eventually raised. Over the past year, delayed exception
handling and microcode assists have been shown to transiently
expose data from various microarchitectural elements (i.e., L1D
cache [42, 61], FPU register ﬁle [57], line-ﬁll buffer [42, 53,
67], store buffer [9], and load ports [29, 67]). Unlike Spectre-
type attacks, a Meltdown attacker in one security domain can
directly exﬁltrate architecturally inaccessible data belonging to
another domain (e.g., kernel memory). Consequently, existing
Meltdown mitigations focus on restricting the attacker’s point
of view, e.g., placing victim data out of reach [20], ﬂushing
buffers after victim execution [25, 29], or zeroing unauthorized
data ﬂow directly at the silicon level [28].
Given the widespread deployment of Meltdown countermea-
sures, including changes in operating systems and CPUs, we
ask the following fundamental questions in this paper:
Can Meltdown-type effects only be used for leakage or also
for injection? Would current hardware and software defenses
sufﬁce to fully eradicate Meltdown-type threats based on illegal
data ﬂow from faulting or assisted instructions?
A. Our Results and Contributions
In this paper, we introduce an innovative class of Load
Value Injection (LVI) attack techniques. Our key contribution
is to recognize that, under certain adversarial conditions,
unintended microarchitectural leakage can also be inverted
to inject incorrect data into the victim’s transient execution.
Being essentially a “reverse Meltdown”-type attack, LVI abuses
that a faulting or assisted load instruction executed within a
victim domain does not always yield the expected result, but
may instead transiently forward dummy values or (attacker-
controlled) data from various microarchitectural buffers. We
consider attackers that can either directly or indirectly induce
page faults or microcode assists during victim execution. LVI
provides such attackers with a primitive to force a legitimate
victim execution to transiently compute on “poisoned” data
(e.g., pointers, array indices) before the CPU eventually detects
the fault condition and discards the pending architectural
state changes. Much like in Spectre attacks, LVI relies on
“confused deputy” code gadgets surrounding the faulting or
assisted load in the victim to hijack transient control ﬂow and
disclose information. We are the ﬁrst to combine Meltdown-
style microarchitectural data leakage with Spectre-style code
© 2020, Jo Van Bulck. Under license to IEEE.
DOI 10.1109/SP40000.2020.00089
54
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:52 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I. Characterization of known side-channel and transient-execution
attacks in terms of targeted microarchitectural predictor or data buffer (vertical
axis) vs. leakage- or injection-based methodology (horizontal axis). The LVI
attack plane, ﬁrst explored in this paper, is indicated on the lower right and
applies an injection-based methodology known from Spectre attacks (upper
right) to reversely exploit Meltdown-type data leakage (lower left).
Methodology
μ-Arch Buffer
PHT
BTB
RSB
STL
y
r
o
t
s
i
h
n
o
i
t
c
i
d
e
r
P
Leakage
Injection
BranchScope [15], Bluethunder [24] Spectre-PHT [38]
Spectre-BTB [38]
SBPA [1], BranchShadow [40]
Hyper-Channel [8]
Spectre-RSB [39, 44]
—
Spectre-STL [23]
a
t
a
d
m
a
r
g
o
r
P
L1D
L1D
FPU
SB
LFB/LP
Meltdown [42]
Foreshadow [61]
LazyFP [57]
Fallout [9]
ZombieLoad [53], RIDL [67]
LVI-NULL
LVI-L1D
LVI-FPU
LVI-SB
LVI-LFB/LP
gadget abuse to compose a novel type of transient load value
injection attacks.
Table I summarizes how Spectre [38] ﬁrst applied an
injection-based methodology to invert prior branch prediction
side-channel attacks, whereas LVI similarly shows that recent
Meltdown-type microarchitectural data leakage can be reversely
exploited. Looking at Table I, it becomes apparent that Spectre-
style injection attacks have so far only been applied to auxiliary
history-based branch prediction and dependency prediction
buffers that accumulate program metadata to steer the victim’s
transient execution indirectly. Our techniques, on the other
hand, intervene much more directly in the victim’s transient
data stream by injecting erroneous load values straight from
the CPU’s memory hierarchy, i.e., intermediate load and store
buffers and caches.
These fundamentally different microarchitectural behaviors
(i.e., misprediction vs. illegal data ﬂow) also entail that LVI
requires defenses that are orthogonal and complementary to
existing Spectre mitigations. Indeed, we show that some of
our exploits can transiently redirect conditional branches, even
after the CPU’s speculation machinery correctly predicted the
architectural branch outcome. Furthermore, since LVI attacks
proceed entirely within the victim domain, they remain intrin-
sically immune to widely deployed software and microcode
Meltdown mitigations that ﬂush microarchitectural resources
after victim execution [25, 29]. Disturbingly, our analysis
reveals that even state-of-the-art hardened Intel CPUs [28], with
silicon changes that zero out illegal data ﬂow from faulting or
assisted instructions, do not fully eradicate LVI-based threats.
Our ﬁndings challenge prior views that, unlike Spectre,
Meltdown-type threats could be eradicated straightforwardly at
the operating system or hardware levels [10, 18, 22, 45, 72].
Instead, we conclude that potentially every illegal data ﬂow in
the microarchitecture can be inverted as an injection source
to purposefully disrupt the victim’s transient behavior. This
observation has profound consequences for reasoning about
secure code. We argue that depending on the attacker’s
capabilities, ultimately, every load operation in the victim may
potentially serve as an exploitable LVI gadget. This is in sharp
contrast to prior Spectre-type effects that are contained around
clear-cut (branch) misprediction locations.
Successfully exploiting LVI requires the ability to induce
page faults or microcode assists during victim execution. We
show that this requirement can be most easily met in Intel
SGX environments, where we develop several proof-of-concept
attacks that abuse dangerous real-world gadgets to arbitrarily
divert transient control ﬂow in the enclave. We furthermore
mount a novel transient fault attack on AES-NI to extract full
cryptographic keys from a victim enclave. While LVI attacks
in non-SGX environments are generally much harder to mount,
we consider none of the adversarial conditions for LVI to be
unique to Intel SGX. We explore consequences for traditional
process isolation by showing that, given a suitable LVI gadget
and a faulting or assisted load in the kernel, arbitrary supervisor
memory may leak to user space. We also show that the same
vector could be exploited in a cross-process LVI attack.
Underlining the impact and the practical challenges arising
from our ﬁndings, Intel plans to mitigate LVI by extensive
revisions at the compiler and assembler levels to allow at
least compilation of SGX enclaves to remain secure on LVI-
vulnerable systems. Particularly, fully mitigating LVI requires
introducing lfence instructions to serialize the processor
pipeline after possibly every memory load operation. Addi-
tionally, certain instructions featuring implicit loads, including
the pervasive x86 ret instruction, should be blacklisted and
emulated with equivalent serialized instruction sequences. We
observe extensive performance overheads of factor 2 to 19 for
our evaluation of prototype compiler mitigations, depending
on the application and whether lfences were inserted by an
optimized compiler pass or through a naive post-compilation
assembler approach.
In summary, our main contributions are as follows:
• We show that Meltdown-type data leakage can be inverted
into a Spectre-like Load Value Injection (LVI) primitive.
LVI transiently hijacks data ﬂow, and thus control ﬂow.
• We present an extensible taxonomy of LVI-based attacks.
• We show the insufﬁciency of silicon changes in the latest
generation of acclaimed Meltdown-resistant Intel CPUs
• We develop practical proof-of-concept exploits against Intel
SGX enclaves, and we discuss implications for traditional
kernel and process isolation in the presence of suitable LVI
gadgets and faulting or assisted loads.
• We evaluate compiler mitigations and show that a full
mitigation incurs a runtime overhead of factor 2 to 19.
B. Responsible Disclosure and Impact
We responsibly disclosed LVI to Intel on April 4, 2019.
We also described the non-Intel-speciﬁc parts to ARM and
IBM. To develop and deploy appropriate countermeasures, Intel
insisted on a long embargo period for LVI, namely, until March
10, 2020 (CVE-2020-0551, Intel-SA-00334). Intel considers
LVI particularly severe for SGX and provides a compiler and
assembler-based full mitigation for enclave programs, described
and evaluated in Section IX. Intel furthermore acknowledged
55
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:52 UTC from IEEE Xplore.  Restrictions apply. 
P RW US WT UC A
D
S
G
Physical Page Number
Rsvd.
XD
Reservation 
Station
Port 7
Port 6
Port 5
Port 4
Port 3
Port 2
Port 1
Port 0
Execution
Units
L2 Cache 
(256 KiB; 4-way)
e
r
o
t
S
U
G
A
d
a
o
L
U
G
A
d
a
o
L
Store Buffer
(56 Entries)
Load Buffer
(72 Entries)
MOB
(
1
0
E
n
t
r
i
e
s
)
B
u
f
f
e
r
i
L
n
e
F
i
l
l
L1D
Cache
(32 KiB; 
8-way)
Fig. 1. Overview of an x86 page-table entry and attributes that may trigger
architectural page fault exceptions (red bold) or microcode assists (green italic).
Attributes that are periodically cleared by some OS kernels are underlined; all
other ﬁelds can only be modiﬁed by privileged attackers.
that LVI may in principle be exploited in non-SGX user-
to-kernel or process-to-process environments and suggested
addressing by manually patching any such exploitable gadgets
upon discovery.
We also contacted Microsoft, who acknowledged the rel-
evance when paging out kernel memory and continues to
investigate the applicability of LVI to the Windows kernel.
Microsoft likewise suggested addressing non-SGX scenarios
by manually patching any exploitable gadgets upon discovery.
II. BACKGROUND
A. CPU Microarchitecture
In a complex instruction set architecture (ISA) such as Intel
x86 [31] instructions are decoded into RISC-like micro-ops.
The CPU executes micro-ops from the reorder buffer out of
order when their operands become available but retires micro-
ops in order. Modern CPUs perform history-based speculation
to predict branches and data dependencies ahead of time.
While the CPU implements the most common fast-path logic
directly in hardware, certain corner cases are handled by
issuing a microcode assist [13, 17]. In such a corner case,
the CPU ﬂags the corresponding micro-op to be re-issued
later as a microcode routine. When encountering exceptions,
misspeculations, or microcode assists, the CPU pipeline is