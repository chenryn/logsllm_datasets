---
title: Poetry
date: 20211130
author: Lyz
---
[Poetry](https://github.com/python-poetry/poetry) is a command line program that
helps you declare, manage and install dependencies of Python projects, ensuring
you have the right stack everywhere.
`poetry` saves all the information in the `pyproject.toml` file, including the
project development and program dependencies, for example:
```toml
[tool.poetry]
name = "poetry-demo"
version = "0.1.0"
description = ""
authors = ["Sébastien Eustace "]
[tool.poetry.dependencies]
python = "*"
[tool.poetry.dev-dependencies]
pytest = "^3.4"
```
# [Installation](https://github.com/python-poetry/poetry#installation)
Although the official docs tell you to run:
```bash
curl -sSL https://install.python-poetry.org | python3 -
```
`pip install poetry` works too, which looks safer than executing arbitrary code
from an url.
To enable [shell
completion](https://python-poetry.org/docs/#enable-tab-completion-for-bash-fish-or-zsh)
for `zsh` run:
```bash
# Zsh
poetry completions zsh > ~/.zfunc/_poetry
# Oh-My-Zsh
mkdir $ZSH_CUSTOM/plugins/poetry
poetry completions zsh > $ZSH_CUSTOM/plugins/poetry/_poetry
```
For `zsh`, you must then add the following line in your `~/.zshrc` before
`compinit`:
```bash
fpath+=~/.zfunc
```
For `oh-my-zsh`, you must then enable poetry in your `~/.zshrc` plugins:
```bash
plugins(
	poetry
	...
	)
```
# [Basic Usage](https://python-poetry.org/docs/basic-usage/)
## [Initializing a pre-existing project](https://python-poetry.org/docs/basic-usage/#initialising-a-pre-existing-project)
Instead of creating a new project, Poetry can be used to ‘initialise’
a pre-populated directory with `poetry init`. You can use the [next
options](https://python-poetry.org/docs/cli/#options)
* `--name`: Name of the package.
* `--description`: Description of the package.
* `--author`: Author of the package.
* `--python`: Compatible Python versions.
* `--dependency`: Package to require with a version constraint. Should be in
    format `foo:1.0.0`.
* `--dev-dependency`: Development requirements, see `--require`.
## [Installing dependencies](https://python-poetry.org/docs/basic-usage/#installing-dependencies)
To install the defined dependencies for your project, just run the install
command.
```bash
poetry install
```
When you run this command, one of two things may happen:
* *Installing without poetry.lock*: If you have never run the command before and
    there is also no `poetry.lock` file present, Poetry simply resolves all
    dependencies listed in your `pyproject.toml` file and downloads the latest
    version of their files.
    When Poetry has finished installing, it writes all of the packages and the
    exact versions of them that it downloaded to the `poetry.lock` file, locking
    the project to those specific versions. You should commit the `poetry.lock`
    file to your project repo so that all people working on the project are
    locked to the same versions of dependencies.
* *Installing with poetry.lock*: If there is already a `poetry.lock` file as
    well as a `pyproject.toml`, `poetry` resolves and installs all dependencies
    that you listed in `pyproject.toml`, but Poetry uses the exact versions listed
    in `poetry.lock` to ensure that the package versions are consistent for
    everyone working on your project. As a result you will have all dependencies
    requested by your `pyproject.toml` file, but they may not all be at the very
    latest available versions (some of the dependencies listed in the
    `poetry.lock` file may have released newer versions since the file was
    created). This is by design, it ensures that your project does not break
    because of unexpected changes in dependencies.
!!! note "The current project is installed in [editable mode](https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs) by default."
If you don't want the development requirements use the `--no-dev` flag.
To remove the untracked dependencies that are no longer in the lock file, use
`--remove-untracked`.
## [Updating dependencies to their latest versions](https://python-poetry.org/docs/basic-usage/#updating-dependencies-to-their-latest-versions)
The `poetry.lock` file prevents you from automatically getting the latest
versions of your dependencies. To update to the latest versions, use the
`update` command. This will fetch the latest matching versions (according to
your `pyproject.toml` file) and update the lock file with the new versions.
(This is equivalent to deleting the `poetry.lock` file and running `install`
again.)
The main problem is that `poetry add` does [upper pinning of
dependencies](versioning.md#upper-version-pinning) by default, which is
a **really bad idea**. [And they don't plan to
change](https://github.com/python-poetry/poetry/issues/3747).
There is currently no way of [updating your `pyproject.toml` dependency
definitions](https://github.com/python-poetry/poetry/issues/461) so they match
the latest version beyond your constrains. So if you have constrained a package
to be `@latest` behind the scenes, it will
[change your version pin to
 `^`](https://github.com/python-poetry/poetry/issues/3503), which
 as we've seen it's awful.
Again, you should not be trying to do this, it's better to improve
[how you manage your
dependencies](versioning.md#deciding-how-to-manage-the-versions-of-your-dependencies).
### Debugging why a package is not updated to the latest version
Sometimes packages are not updated with `poetry update` or `poetryup`, to debug
why, you need to understand if some package is setting a constrain that prevents
the upgrade. To do that, first check the outdated packages with `poetry show -o`
and for each of them:
* [Check what packages are using the
    dependency](#checking-what-package-is-using-a-dependency).
* Search if there is an issue asking the maintainers to update their
    dependencies, if it doesn't exist, create it.
## [Removing a dependency](https://python-poetry.org/docs/cli/#remove)
```bash
poetry remove pendulum
```
With the `-D` or `--dev` flag, it removes the dependency from the development
ones.
## [Building the package](https://python-poetry.org/docs/libraries/#packaging)
Before you can actually publish your library, you will need to package it.
```bash
poetry build
```
This command will package your library in two different formats: `sdist` which
is the source format, and `wheel` which is a compiled package.
Once that’s done you are ready to publish your library.
## [Publishing to PyPI](https://python-poetry.org/docs/libraries/#publishing-to-pypi)
Poetry will publish to PyPI by default. Anything that is published to PyPI is
available automatically through Poetry.
```bash
poetry publish
```
This will package and publish the library to PyPI, at the condition that you are
a registered user and you have [configured your credentials
properly](#configuration).
If you pass the `--build` flag, it will also build the package.
### [Publishing to a private repository](https://python-poetry.org/docs/libraries/#publishing-to-a-private-repository)
Sometimes, you may want to keep your library private but also being accessible
to your team. In this case, you will need to use a private repository.
You will need to add it to your global list of repositories.
Once this is done, you can actually publish to it like so:
```bash
poetry publish -r my-repository
```
## [Specifying dependencies](https://python-poetry.org/docs/basic-usage/#specifying-dependencies)
If you want to add dependencies to your project, you can specify them in the
`tool.poetry.dependencies` section.
```toml
[tool.poetry.dependencies]
pendulum = "^1.4"
```
As you can see, it takes a mapping of package names and version constraints.
Poetry uses this information to search for the right set of files in package
“repositories” that you register in the `tool.poetry.repositories` section, or on
PyPI by default.
Also, instead of modifying the `pyproject.toml` file by hand, you can use the add command.
```bash
poetry add pendulum
```
It will automatically find a suitable version constraint and install the package
and subdependencies.
If you want to add the dependency to the development ones, use the `-D` or
`--dev` flag.
## [Using your virtual environment](https://python-poetry.org/docs/basic-usage/#using-your-virtual-environment)
By default, `poetry` creates a virtual environment in `{cache-dir}/virtualenvs`.
You can change the `cache-dir` value by editing the `poetry` config.
Additionally, you can use the `virtualenvs.in-project` configuration variable to
create virtual environment within your project directory.
There are several ways to run commands within this virtual environment.
To run your script simply use `poetry run python your_script.py`. Likewise if
you have command line tools such as [`pytest`](pytest.md) or [`black`](black.md)
you can run them using `poetry run pytest`.
The easiest way to activate the virtual environment is to create a new shell
with `poetry shell`.
## [Version Management](https://python-poetry.org/docs/cli/#version)
`poetry version` shows the current version of the project. If you pass an
argument, it will bump the version of the package, for example `poetry version
minor`. But it doesn't read your commits to decide what kind of bump you apply,
so I'd keep on using `pip-compile`.
## [Dependency Specification](https://python-poetry.org/docs/dependency-specification/)
Dependencies for a project can be specified in various forms, which depend on
the type of the dependency and on the optional constraints that might be needed
for it to be installed.
!!! warning "They don't follow Python's specification [PEP508](https://www.python.org/dev/peps/pep-0508/)"
### [Caret Requirements](https://python-poetry.org/docs/dependency-specification/#caret-requirements)
Caret requirements allow [SemVer](https://semver.org/) compatible updates to
a specified version. An update is allowed if the new version number does not
modify the left-most non-zero digit in the major, minor, patch grouping. In this
case, if we ran `poetry update requests`, `poetry` would update us to the next
versions:
| Requirement | Versions allowed |
| ---         | ---              |
| `^1.2.3`    | `>=1.2.3 =1.2.0 =1.0.0 =0.2.3 =0.0.3 =0.0.0 =0.0.0 =1.2.3 =1.2.0 =1.0.0 =0.0.0    `    |
| `1.*`       | `>=1.0.0 =1.2.0 = 1.2.0
> 1
= 1.2,
< 1.5`.
### [git dependencies](https://python-poetry.org/docs/dependency-specification/#git-dependencies)
To depend on a library located in a git repository, the minimum information you
need to specify is the location of the repository with the git key:
```toml
[tool.poetry.dependencies]
requests = { git = "https://github.com/requests/requests.git" }
```
Since we haven’t specified any other information, Poetry assumes that we intend
to use the latest commit on the `master` branch to build our project.
You can combine the git key with the branch key to use another branch.
Alternatively, use `rev` or `tag` to pin a dependency to a specific commit hash or
tagged ref, respectively. For example:
```toml