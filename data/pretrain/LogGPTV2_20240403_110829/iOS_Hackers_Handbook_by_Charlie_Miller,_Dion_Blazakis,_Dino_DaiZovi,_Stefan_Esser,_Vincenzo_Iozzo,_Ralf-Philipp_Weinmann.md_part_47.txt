rounded up to min_alloc)
n suspend_t — Type of suspension (FIFO or not)
This pool causes the pcb to be initialized, with a single chunk of size
(pool_size - 2 * dynmem_hdr) ending up in the cyclic list pointed to by
pcb->memory_list.
Allocating a chunk of memory with NU_Allocate_Memory(pcb, &ptr_to_
allocation, size, NU_NO_SUSPEND) then causes the following algorithm to
be executed:
1. Iterate over the memory list pointed to by pcb->search_ptr using a vari-
able called mem_ptr:.
For each memory block, check whether the is_free fl ag is set. If this is
the case, let memblk_size = (mem_ptr->next_blk – mem_ptr - 16). Now
check memblk_size >= size. If this is fulfi lled, the algorithm has found
a suitable block.
2. If no block can be found, return error condition or suspend task (depend-
ing on whether suspension is allowed).
cc1111..iinndddd 333399 44//1166//22001122 55::4488::1188 PPMM
340 Chapter 11 n Baseband Attacks
3. If (memblk_size – size) > (min_alloc + 16), break memory chunk
into two chunks and insert the free chunk back into the list.
To deallocate a memory block using NU_Deallocate_Memory(blk), the
de allocation function assumes that blk is preceded by a dynmem_hdr.
No checks are performed on the dynmem_hdr structure itself, but it is checked
that the pool pointer is not NULL, and that the magic value in the pool control
block matches. After having marked the block as free again and having adjusted
the number of available bytes in the pool, the function fi rst checks whether the
freed block can be merged with its previous block, then it checks whether it can
be merged with the next block by looking at the is_free fl ags of the header of
these blocks. This procedure is commonly called coalescing. This is the operation
that gives an attacker a so-called unrestricted write4 primitive, a powerful way
to turn a heap buffer overfl ow into the ability to write an arbitrary 32-bit value
at any location in memory.
Byte Pools in ThreadX
ThreadX also uses a fi rst-fi t allocator that works in a very similar fashion to
the one described for Nucleus PLUS; yet it still is distinct enough to warrant a
detailed description of its own. The control block of a byte pool has the follow-
ing structure (taken from tx_api.h):
typedef struct TX_BYTE_POOL_STRUCT
{
/* Defi ne the byte pool ID used for error checking. */
ULONG tx_byte_pool_id;
/* Defi ne the byte pool’s name. */
CHAR_PTR tx_byte_pool_name;
/* Defi ne the number of available bytes in the pool. */
ULONG tx_byte_pool_available;
/* Defi ne the number of fragments in the pool. */
ULONG tx_byte_pool_fragments;
/* Defi ne the head pointer of byte pool. */
CHAR_PTR tx_byte_pool_list;
/* Defi ne the search pointer used for initial searching for memory
in a byte pool. */
CHAR_PTR tx_byte_pool_search;
/* Save the start address of the byte pool’s memory area. */
CHAR_PTR tx_byte_pool_start;
/* Save the byte pool’s size in bytes. */
ULONG tx_byte_pool_size;
/* This is used to mark the owner of the byte memory pool during
a search. If this value changes during the search, the local search
pointer must be reset. */
struct TX_THREAD_STRUCT *tx_byte_pool_owner;
/* Defi ne the byte pool suspension list head along with a count of
cc1111..iinndddd 334400 44//1166//22001122 55::4488::1188 PPMM
Chapter 11 n Baseband Attacks 341
how many threads are suspended. */
struct TX_THREAD_STRUCT *tx_byte_pool_suspension_list;
ULONG tx_byte_pool_suspended_count;
/* Defi ne the created list next and previous pointers. */
struct TX_BYTE_POOL_STRUCT
*tx_byte_pool_created_next,
*tx_byte_pool_created_previous;
} TX_BYTE_POOL;
The header of a memory block simply consists of a field for indicating
whether this particular memory chunk is allocated (indicated by the magic
value 0xFFFFEEEE) or still considered “free” and a pointer back to the byte pool
control block:
struct bpmem_hdr {
uint32_t is_free_magic; /* set to 0xFFFFEEEE if block is free */
TX_BYTE_POOL bpcb; /* pointer to control block of byte memory pool */
}
The tx_byte_allocate() function, used to allocate a block of memory from a
given pool, does not traverse tx_byte_pool_list directly, but rather calls a func-
tion, find_byte_block(), that does this. The same function also is called from
tx_byte_release() if another thread has suspended on the pool. Coalescing does
not happen directly when a block of memory is freed, but is delayed. Only the
fi eld is_free_magic of the header is updated on the call of tx_byte_release()
if no other threads are waiting. Rather, coalescing of adjacent memory blocks
marked as free happens in find_byte_block() in case no memory block of the
requested size can be found.
The Qualcomm Modem Heap
Looking closely at a Qualcomm stack, you will see that AMSS actually uses
several different heap implementations. Because the Iguana allocator is not
used for buffers allocated by the modem stack, it does not make sense for us
to describe this allocator here. Rather, we investigate the most widely used
allocator, which seems to be something like a system allocator on AMSS and
is assumed to be called modem_mem_alloc() judging from strings found in the
amss.mbn binary.
In contrast to the previous allocators, this allocator is a best-fi t allocator that is
signifi cantly more complicated than the previously described allocators and is
somewhat hardened. We will not be able to describe the allocator in full detail
here, but rather will concentrate on the most relevant features of it that will
allow you to get a head start in further reverse-engineering:
Instead of having one list of memory chunks, the allocator keeps 31 bins
of memory chunks of different sizes: These bins can accommodate memory
allocations up to 0x4, 0x6, 0x8, 0xC, 0x10, 0x18, 0x20, 0x30, 0x40,
0x60, 0x80, 0xC0, 0x100, 0x180, 0x200, 0x300, 0x400, 0x600, 0x800,
cc1111..iinndddd 334411 44//1166//22001122 55::4488::1188 PPMM
342 Chapter 11 n Baseband Attacks
0xC00, 0x1000, 0x1800, 0x2000, 0x3000, 0x4000, 0x6000, 0x8000, 0xC000,
0x10000, 0x18000 and 0x20000 respectively. The actual sizes of the blocks
in the bins are 16 bytes larger than the size indicated by the bin to account
for metadata and align to an 8-byte boundary. The header of a memory block
looks as follows:
struct mma_header {
uint32_t size; /* size of allocation */
uint32_t *next; /* pointer to next block */
uint8_t reference;
/* reference value to distinguish different callers */
uint8_t blockstatus; /* determines whether block is free or taken */
uint8_t slackspace; /* slack space at end of block */
uint8_t canary; /* canary value to determine memory corruption */
}
For free blocks the following data structure is used:
struct mma_free_block {
mma_header hdr;
mma_header *next_free, *prev_free;
/* doubly linked list of free blocks */
}
The canary value used by the allocator is 0x6A. Whenever mma_header struc-
ture is accessed, a check is performed to determine whether the canary value
is still intact; a crash will be forced if it is not the case. This feature however is
mostly relevant for accidental and not for intentional memory corruptions; it
is something to keep in mind when trying to fuzz the stack, however. Another
noteworthy feature for heap exploitation is the fact that the allocator checks
whether pointers that are passed to the modem_mem_free(ptr) function really
point to a memory area used by the heap. Creating fake heap structures on the
stack henceforth will not work.
As of iOS 5.1, the heap allocator described previously has been hardened
by adding a safe-unlinking check: Before performing an unlinking oper-
ating, the allocator will check whether free_block->next_free->prev_
free == free_block->prev_free->next_free.
Vulnerability Analysis
The previous subsections of this chapter covered the ground you need to be
familiar with by providing just enough details about GSM and real-time operating
systems to proceed to the core of the matter: fi nding exploitable vulnerabilities.
Before we get there, we still need to explain a couple of operational matters to
get to the actual analysis.
cc1111..iinndddd 334422 44//1166//22001122 55::4488::1188 PPMM
Chapter 11 n Baseband Attacks 343
Obtaining and Extracting Baseband Firmware
Upgrades of the baseband fi rmware are performed during the normal iOS
upgrade/restore process. For older iPhones, up to the 3GS as well as the iPad
1, this fi rmware is contained in the ramdisk image. To extract it, you need to
decrypt this image, mount it, and copy the fi rmware image from /usr/local/
standalone/firmware. To extract the iPhone 2G baseband firmware
ICE04.05.04_G.fls from the decrypted iOS 3.1.3 update, you can use the fol-
lowing sequence of steps once you have planetbeing’s wonderful xpwntool
installed (you can download it from https://github.com/planetbeing/xpwn).
$ wget -q http://appldnld.apple.com.edgesuite.net/content.info.apple.com/iPhone/
061-7481.20100202.4orot/iPhone1,1_3.1.3_7E18_Restore.ipsw
$ unzip iPhone1,1_3.1.3_7E18_Restore.ipsw 018-6488-015.dmg
Archive: iPhone1,1_3.1.3_7E18_Restore.ipsw
infl ating: 018-6494-014.dmg
$ xpwntool 018-6494-014.dmg restore.dmg -k 7029389c2dadaaa1d1e51bf579493824 -iv
25e713dd5663badebe046d0ffa164fee
$ open restore.dmg
$ cp /Volumes/ramdisk/usr/local/standalone/fi rmware/ICE04.05.04_G.fl s .
$ hdiutil eject /Volumes/ramdisk
NOTE The keys used as arguments to xpwntool in the above can be found
on the iPhone Wiki (http://theiphonewiki.com/wiki/index
.php?title=VFDecrypt_Keys).
For newer iPhones and the iPad 2, the baseband fi rmware can be directly
extracted from the IPSW using unzip. In Listing 11.1, the ICE3 fi rmware is the
version running on the X-Gold 61x in the iPhone 4, and the Trek fi le is used to
upgrade the fi rmware running on the MDM6610 in the iPhone 4S.
Listing 11.1 Baseband fi rmwares contained in the iPhone 4S 5.0.1 update
$ unzip -l iPhone4,1_5.0.1_9A406_Restore.ipsw Firmware/[IT]\*bbfw
Archive: iPhone4,1_5.0.1_9A406_Restore.ipsw
Length Date Time Name
-------- ---- ---- ----
3815153 12-04-11 02:07 Firmware/ICE3_04.11.08_BOOT_02.13.Release.bbfw
11154725 12-04-11 02:07 Firmware/Trek-1.0.14.Release.bbfw
-------- -------
14969878 2 fi les
The .bbfw fi les themselves are ZIP archives as well and contain the actual
baseband fi rmware together with a number of loaders:
$ unzip -l ICE3_04.11.08_BOOT_02.13.Release.bbfw
Archive: ICE3_04.11.08_BOOT_02.13.Release.bbfw
Length Date Time Name
-------- ---- ---- ----
72568 01-13-11 04:14 psi_ram.fl s
cc1111..iinndddd 334433 44//1166//22001122 55::4488::1199 PPMM
344 Chapter 11 n Baseband Attacks
64892 01-13-11 04:14 ebl.fl s
7308368 12-04-11 02:07 stack.fl s
40260 01-13-11 04:14 psi_fl ash.fl s
-------- -------
7486088 4 fi les
$ unzip -l Trek-1.0.14.Release.bbfw
Archive: Trek-1.0.14.Release.bbfw
Length Date Time Name
-------- ---- ---- ----
19599360 12-03-11 10:06 amss.mbn
451464 12-03-11 10:06 osbl.mbn
122464 12-03-11 10:06 dbl.mbn
122196 12-03-11 10:06 restoredbl.mbn
-------- -------
20295484 4 fi les
Here we are only interested in the stack.fls for the X-Gold and in the amss
.mbn for the MDM66x0 chipsets. All other fi les are loader fi les, which we don’t
investigate further; although these may in principle contain security-critical
bugs — for instance, in the signature verifi cation of the fi rmware, which would
allow you to run different fi rmware on the phone and hence unlock it.
Loading Firmware Images into IDA Pro
Infi neon .fls fi les are built using an offi cial ARM Compiler Toolchain — either
ARM RealView Suite (RVDS) or ARM Development Suite (ADS), depending on
the version of the baseband fi rmware. The ARM linker employs a so-called “scat-
ter loading” mechanism to save fl ash space. In the link run, all code segments
and data segments with initialized data are concatenated; optionally, segments
can be compressed using one of two simple run-length encoding algorithms. A
table is built with pointers to these regions and entries for regions that need to
be zero-initialized. During run time, startup code iterates over this table, copies
the segments to their actual locations in memory, and creates zero-initialized
memory regions as specifi ed.
This means that before you can perform any meaningful analysis on the
.fls fi les, you need to perform the same steps the startup code does. You have
several ways to do this: the fi rst is described in an IDA Pro tutorial and involves
using the QEMU emulator to simply execute the startup sequence. The second
way to get the fi rmware relocated to its in-memory layout is by using a script
or a loader module. A universal scatter loading script written by roxfan has
been circulating among iPhone hackers for a while. We have decided to write
and release an IDA Pro module (fl sloader) for iPhone baseband fi rmware that
incorporates this functionality. You can download this code from the compan-
ion website of the book (www.wiley.com/go/ioshackershandbook). There you
also fi nd a script make_tasktable.py that automatically identifi es the table of
tasks that are created by, for instance, Application_Initialize() on Nucleus
cc1111..iinndddd 334444 44//1166//22001122 55::4488::1199 PPMM
Chapter 11 n Baseband Attacks 345
PLUS or tx_application_define() on ThreadX. This greatly enhances IDA
Pro’s auto-analysis.
Qualcomm’s fi rmware fi les are in standard Executable and Linkable Format
(ELF); you do not need a custom IDA Pro loader module to load them.
Application/Baseband Processor Interface
If you look closely at the connection between the baseband processor and the
application processor, it becomes clear that talking to the AT command inter-
preter doesn’t happen directly over a serial line, but rather that many things are
multiplexed over either a serial line (Infi neon-based chips) or over USB (Qualcomm).
For the Infi neon basebands, the multiplexing is done in a kernel extension com
.apple.driver.AppleSerialMultiplexer according to 3GPP 27.007. For Qualcomm
baseband processors, a Qualcomm proprietary protocol called Qualcomm MSM
Interface (QMI) is used. Source code for an implementation of QMI exists in
the Linux kernel fork for the MSM platform created by the CodeAurora Forum
(https://www.codeaurora.org/contribute/projects/qkernel).
Stack Traces and Baseband Core Dumps
For analyzing vulnerabilities — and more importantly, for actually exploiting
them — it is extremely useful to have some visibility of the state of the system
at the time of the crash and, if possible, at run time.
For iOS devices with an Infi neon baseband, you can use the AT+XLOG command
to obtain a log of baseband crashes and their stack traces. Even better, on the X-Gold
chips there’s a way to trigger a core dump of the baseband memory without actually
needing to exploit a bug fi rst. To do this, you fi rst need to enable the functionality,
which you can do with a special dial string through the Phone dialer (this is parsed
by CommCenter). By calling the number *5005*CORE#, you can enable the core dump
functionality (#5005*2673# turns it off again and *#5005*2673# shows the status of the
setting). Using minicom, you can send the AT command AT+XLOG=4 to the baseband
to trigger an exception; this will cause the baseband memory to be dumped. This
dump is segmented by memory region and will be stored in a directory of the form
log-bb-yyyy-mm-dd-hh-mm-ss-cd in /var/wireless/Library/Logs/CrashReporter/
Baseband:
# cd /var/wireless/Library/Logs/CrashReporter/Baseband
/log-bb-2012-01-17-11-36-07-cd
# ls -l
total 9544
-rw-r--r-- 1 _wireless _wireless 65544 Jan 17 11:36 0x00090000.cd
-rw-r--r-- 1 _wireless _wireless 16760 Jan 17 11:39 0x40041000.cd
-rw-r--r-- 1 _wireless _wireless 262152 Jan 17 11:40 0x40ac0000.cd
-rw-r--r-- 1 _wireless _wireless 262152 Jan 17 11:40 0x40b00000.cd
-rw-r--r-- 1 _wireless _wireless 539372 Jan 17 11:36 0x60700000.cd
cc1111..iinndddd 334455 44//1166//22001122 55::4488::1199 PPMM
346 Chapter 11 n Baseband Attacks
-rw-r--r-- 1 _wireless _wireless 8564860 Jan 17 11:39 0x60784ae4.cd
-rw-r--r-- 1 _wireless _wireless 16392 Jan 17 11:36 0xffff0000.cd
If you have done everything correctly, you will see a message stating Baseband
Core Dump in Progress on the screen of your iPhone for a number of seconds.
Attack Surface
This section evaluates the attack surface that the baseband processor provides.
For local exploits, functions exposed through the AT command interpreter were
attacked in soft unlocks, but this is by no means the only way to perform a local
attack. Another vector that has been used successfully in the past, in an exploit
called JerrySIM, was the interface between the SIM and the baseband processor.