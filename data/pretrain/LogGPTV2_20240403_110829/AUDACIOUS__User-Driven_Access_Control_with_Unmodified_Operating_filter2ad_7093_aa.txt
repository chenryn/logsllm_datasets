# AUDACIOUS: User-Driven Access Control with Unmodified Operating Systems

**Authors:**
- Talia Ringer
- Dan Grossman
- Franziska Roesner  
University of Washington, Seattle, WA, USA  
Emails: {tringer, djg, franzi}@cs.washington.edu

## Abstract
User-driven access control (UDAC) enhances the coarse-grained access control mechanisms in current operating systems, particularly in mobile environments, by providing more granular permissions. Instead of all-or-nothing access to resources like the camera or location, UDAC grants permissions only in response to explicit user actions, such as pressing a button. Previous work on UDAC has required modifications to the operating system (OS) to provide applications with secure access control gadgets (ACGs) and specialized user interface (UI) elements.

This paper presents a design, implementation, and evaluation of UDAC that works without any OS modifications, making it more deployable and incrementally adoptable. Our approach includes:
1. A user-level trusted library for ACGs.
2. Static analyses to prevent malicious creation of UI events, illegal flows of sensitive information, and circumvention of our library.
3. Dynamic analyses to ensure users are not tricked into granting permissions.

In addition to the original UDAC guarantees, we use static information flow analysis to restrict where data derived from sensitive sources can flow within an application. We target Android applications, porting open-source apps that require resource permissions to use our system. Our evaluation shows that our system is secure against various attacks that malware on Android could otherwise exploit.

## 1. Introduction
Modern operating systems, especially mobile platforms, isolate applications and limit their privileges. Mobile platforms typically do not allow applications to access user resources like the camera or location unless the user grants the necessary permissions. Despite these measures, applications can still steal data or take unauthorized actions. For example, the FTC recently took action against a flashlight app for leaking user location to advertisers, and Android malware is known to send costly premium SMS messages covertly.

Mobile platforms generally grant permissions through install-time manifests or runtime prompts, which are often difficult for users to understand and can lead to behaviors that violate user expectations. Prior work introduced UDAC to address these issues. In UDAC, permissions are derived from user interactions, and ACGs are special UI elements that allow applications to access sensitive resources only when the user interacts with them.

However, UDAC has not been widely adopted due to the need for OS modifications, which pose significant deployment challenges. Our work makes UDAC practical and immediately deployable by presenting a design, implementation, and evaluation that works without OS modifications. Our design combines a secure library with static and dynamic analyses to ensure that applications can access sensitive resources only through designated UI elements.

## 2. Context
Our work targets modern operating systems that isolate applications and grant limited permissions. We assume a permission model similar to the latest Android (API level 23), where the OS automatically grants "normal" permissions at install-time and "dangerous" permissions through a prompt at initial use. Once granted, permissions are not revoked unless explicitly revoked by the user.

### 2.1 Goals
We aim to support UDAC through ACGs, building on previous work. Our goals are:
1. **User-Driven Access Control**: Ensure applications can access sensitive resources only when the user interacts with the corresponding ACG in the UI, even in the face of malicious attempts to circumvent or trick the user.
2. **Unmodified Operating System**: Design should not require any OS modifications.
3. **Regulate Resource Use, Not Just Access**: Provide guarantees about the flow of resources, ensuring they are used as intended.
4. **Permission Model Flexibility**: Allow applications to use alternative permission models for some functionalities, such as background access to sensitive resources.

### 2.2 Threat Model
Our system is sound if it guarantees that every sensitive resource is accessed as a result of a legitimate user interaction with the expected ACG UI and used only as permitted. We assume the OS is trustworthy and unmodified, and our library, static analysis tools, and their outputs are trusted. The adversary is a skilled developer attempting to improperly access sensitive resources by misusing the library, evading analysis, misleading the user, or bypassing the library. We consider phishing-style and side-channel attacks out of scope.

## 3. Techniques for Securing ACGs
Our high-level design for securely supporting UDAC without OS support combines a secure library and program analyses. Applications include our library, where ACGs encapsulate both resource APIs and UI elements. The library prevents applications from modifying the ACG UI and validation logic. Together, the library and analyses ensure that resource access is authentic and consistent with user expectations.

### 3.1 Event Flow: User → UIseen
If the application triggers UI events instead of the user, it can impersonate the user and perform arbitrary actions. The flow from the user to the UI must be authentic.

**Attack Example**: An evil camera application might automatically click the camera ACG button, creating fake user events. Alternatively, it might intercept a user's click on a misleading button and pass it to the camera ACG, performing indirect event forgery.

**Defense**: To prevent these attacks, we use taint analysis to track the flow of events from the user to the ACG UI, marking events as tainted if they pass through application code. Alternatively, we can prohibit applications from constructing and modifying events. The event analysis is performed statically to avoid performance overhead.

### 3.2 UI Context: UIseen ≈ UIACG
The UI should not trick the user into interacting with it. We use dynamic bitmap checks to ensure the UI seen by the user matches the expected ACG UI and that the user has enough time to perceive it.

### 3.3 Resource Flow
The library and analyses ensure that once a resource is accessed, it is used as expected. We use static information flow analysis to restrict where data derived from sensitive sources can flow within the application.

## Summary
Our contributions include:
1. Enabling UDAC in unmodified operating systems using a secure library and static/dynamic analyses.
2. Implementing this design for Android, called AUDACIOUS.
3. Integrating AUDACIOUS into real applications and evaluating its fit.
4. Evaluating the benefits of an approach requiring no OS changes and identifying areas where limited OS support would be beneficial.