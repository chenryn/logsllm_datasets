(τ|i)
kτ + M∗
0RF(0)
i+1(τ|i+1) + M∗
1RF(1)
i+1(τ|i+1)
justiﬁcation/remark
actual scheme
U3k,k-MDDH on [M]
G1 ≡ G2.0
U3k,k-MDDH on [M0]
U3k,k-MDDH on [M1]
Cramer-Shoup
argument
Cramer-Shoup
argument
G2.i.2
G2.i.3
G2.i+1
Z3k
q
kτ + M⊥RFi+1(τ|i+1)
U3k,k-MDDH on [M0]
and [M1]
Figure 3.3: Sequence of games for the proof of Theorem 7. Throughout, we have (i) kτ :=Pλ
(ii) EncO(τ) = ([y], Kb) where K0 = [y⊤k′
sulation key K := [y⊤ · k′
0, M∗
and we write M⊥RFi(τ|i) := M∗
(τ|i) + M∗
uniformly picked from by EncO, the third column shows the value of k′
τ ] and K1 ←R G; (iii) DecO(τ, [y], bK) computes the encap-
1) is a basis for Span(M⊥), so that M⊤
1 = 0,
(τ|i). The second column shows which set y is
τ used by both EncO and DecO.
0 = M⊤
τ ]. Here, (M∗
0RF(0)
j=1 kj,τj ;
1RF(1)
1M∗
0M∗
i
i
Proof of Theorem 7. We proceed via a series of hybrid games described in Figure 3.4 and 3.5
and for any game G, we use AdvG(A) to denote the advantage of A in game G. We also give a
high-level picture of the proof in Figure 3.3, summarizing the sequence of games.
52
Chapter 3. Tightly CCA-Secure Encryption without Pairings
G0,G1, G2.i :
TEnc = TDec := ∅; b ←R {0, 1}
G ←R GGen(1λ); M ←R U3k,k
p
p
k1,0, . . . , kλ,1 ←R Z3k
M⊥ ←R U3k,2k s.t. M⊤M⊥ = 0
Pick random RFi : {0, 1}i → Z2k
For all τ ∈ {0, 1}λ, kτ :=Pλ
pk :=(cid:16)G, [M],(cid:0)[M⊤kj,β](cid:1)1≤j≤λ,0≤β≤1(cid:17)
b′ ← ADecO(·,·),EncO(·)(pk)
Return 1 if b = b′, 0 otherwise.
τ := kτ + M⊥RFi(τ|i)
k′
j=1 kj,τj
p
G0, G1,G2.i
τ ]; K1 ←R G
p; y := Mr; y ←R Z3k
EncO(τ):
r ←R Zk
K0 := [y⊤ · k′
If τ /∈ TDec ∪ TEnc, return (C := [y], Kb), and set
TEnc := TEnc ∪ {τ}.
Otherwise, return ⊥.
DecO(τ, C := [y], bK):
τ ]
K := [y⊤ · k′
Return(1 if bK = K ∧ τ /∈ TEnc
0 otherwise
G0,G1,G2.i
TDec := TDec ∪ {τ}
Figure 3.4: Games for the proof of Theorem 7. In each procedure, the components inside a
solid (dotted) frame are only present in the games marked by a solid (dotted) frame.
• To go from game G0 to G1, we use the MDDH assumption to “tightly” switch the dis-
tribution of all the challenge ciphertexts. In Lemma 12, we build an adversary B0 such
that:
|AdvG0(A) − AdvG1(A)| ≤ AdvUk(p)-mddh
G,B0
(λ) +
1
p − 1
.
• In Lemma 13, we show that the game G1 and G2.0 are identically distributed.
• For all 0 ≤ i ≤ λ − 1, we build in Lemma 14 an adversary B2.i such that:
4QDec + 2k
+
|AdvG2.i(A) − AdvG2.i+1(A)| ≤ 4 · AdvUk(p)-mddh
p
where QEnc, QDec are the number of times A queries EncO, DecO.
(λ) +
G,B2.i
4
p − 1
,
• In Lemma 19, we show that AdvG2.λ(A) ≤ QEnc
p , using a statistical argument.
Putting everything together, we obtain an adversary B such that T(B) ≈ T(A) + (QDec +
QEnc) · poly(λ) and
AdvIND-PCA
KEM,A (λ) ≤ (4λ + 1) · AdvUk(p)-mddh
G,B
(λ) + (QDec + QEnc) · 2−Ω(λ),
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ) is
independent of T(A).
Lemma 12: From game G0 to game G1
There exists an adversary B0 such that T(B0) ≈ T(A) + (QEnc + QDec) · poly(λ) and
|AdvG0(A) − AdvG1(A)| ≤ AdvUk(p)-mddh
G,B0
(λ) +
1
p − 1
,
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ)
is independent of T(A).
3.1 Multi-ciphertext PCA-secure KEM
53
Proof of Lemma 12. To go from G0 to G1, we switch the distribution of the vectors [y] sampled
by EncO, using the QEnc-fold U3k,k(p)-MDDH assumption on [M] (see Deﬁnition 12).
T(B′
We build an adversary B′
0) ≈ T(A) + (QEnc + QDec) · poly(λ) with poly(λ) independent of T(A), and
0 against the QEnc-fold U3k,k(p)-MDDH assumption, such that
|AdvG0(A) − AdvG1(A)| ≤ AdvQEnc-Uk(p)-mddh
G,B′
0
(λ).
This implies the lemma by Corollary 1 (Uk(p)-MDDH ⇒ QEnc-fold U3k,k(p)-MDDH).
Upon receiving a challenge (G, [M] ∈ G3k×k, [H] := [h1| . . .|hQEnc] ∈ G3k×QEnc) for the
QEnc-fold U3k,k(p)-MDDH assumption, B′
p , generates
pk and simulates the oracle DecO as described in Figure 3.4. To simulate EncO on its j’th
query, for j = 1, . . . , QEnc, B′
0 sets [y] := [hj], and computes Kb as described in Figure 3.4.
0 picks b ←R {0, 1}, k1,0, . . . , kλ,1 ←R Z3k
Lemma 13: From game G1 to game G2.0
For any adversary A, we have: |AdvG1(A) − AdvG2.0(A)| = 0.
Proof of Lemma 13. To go from G1 to G2.0, we change the distribution of k1,β ←R Z3k
for
β = 0, 1, to k1,β + M⊥RF0(ε), where k1,β ←R Z3k
p , and M⊥ ←R U3k,2k(p)
such that M⊤M⊥ = 0. Note that the extra term M⊥RF0(ε) does not appear in pk, since
M⊤(k1,β + M⊥RF0(ε)) = M⊤k1,β.
p , RF0(ε) ←R Z2k
p
Lemma 14: From game G2.i to game G2.i+1
For all 0 ≤ i ≤ λ − 1, there exists an adversary B2.i such that T(B2.i) ≈ T(A) + (QEnc +
QDec) · poly(λ) and
|AdvG2.i(A) − AdvG2.i+1(A)| ≤ 4 · AdvUk(p)-mddh
G,B2.i
(λ) +
4QDec + 2k
p
+
4
p − 1
,
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ)
is independent of T(A).
Proof of Lemma 14. To go from G2.i to G2.i+1, we introduce intermediate games G2.i.1, G2.i.2
and G2.i.3, deﬁned in Figure 3.5.
• To go from game G2.i to game G2.i.1, we use the MDDH assumption to “tightly” switch the
distribution of all the challenge ciphertexts. We proceed in two steps, ﬁrst, by changing
the distribution of all the ciphertexts with a tag τ such that τi+1 = 0, and then, for
those with a tag τ such that τi+1 = 1. We use the MDDH assumption with respect to an
independent matrix for each step. We build an adversary in B2.i.0 Lemma 15 such that:
|AdvG2.i(A) − AdvG2.i.1(A)| ≤ 2 · AdvUk(p)-mddh
G,B2.i.0
(λ) +
2
p − 1
,
where QEnc, QDec are the number of times A queries EncO, DecO, respectively.
• To go from game G2.i.1 to game G2.i.2, we use a variant of the Cramer-Shoup information-
theoretic argument to move from RFi to RFi+1, thereby increasing the entropy of k′
τ . For
the sake of readability, we proceed in two steps: in Lemma 16, we move from RFi to an
hybrid between RFi and RFi+1, and in Lemma 17, we move to RFi+1. In Lemma 16, we
show that:
|AdvG2.i.1(A) − AdvG2.i.2(A)| ≤
where QDec is the number of times A queries DecO.
2QDec + 2k
,
p
54
Chapter 3. Tightly CCA-Secure Encryption without Pairings
• In Lemma 17, we show that
|AdvG2.i.2(A) − AdvG2.i.3(A)| ≤
2QDec
p
,
where QDec is the number of times A queries DecO, using a statistical argument.
• The transition between G2.i.3 and game G2.i+1 is symmetric to the transition between
game G2.i and game G2.i.1 (cf. Lemma 15): we use the MDDH assumption to “tightly”
switch the distribution of all the challenge ciphertexts in two steps; ﬁrst, by changing
the distribution of all the ciphertexts with a tag τ such that τi+1 = 0, and then, the
distribution of those with a tag τ such that τi+1 = 1, using the MDDH assumption
with respect to an independent matrix for each step. We build an adversary B2.i.3 in
Lemma 18 such that:
|AdvG2.i.3(A) − AdvG2.i+1(A)| ≤ 2 · AdvUk(p)-mddh
G,B2.i.3
(λ) +
2
p − 1
,
where QEnc, QDec are the number of times A queries EncO, DecO, respectively.
Putting everything together, we obtain the lemma.
p
G2.i, G2.i.1, G2.i.2,G2.i.3
p; y := Mr + M0r0
p; y := Mr + M1r1
p; r0 ←R Zk
p; r1 ←R Zk
EncO(τ):
y ←R Z3k
If τi+1 = 0 :
r ←R Zk
If τi+1 = 1 :
r ←R Zk
K0 := [y⊤ · k′
τ ];
K1 ←R G
If τ /∈ TDec ∪ TEnc, return (C := [y], Kb) and set
TEnc := TEnc ∪ {τ}.
Otherwise, return ⊥.
DecO(τ, C := [y], bK):
Return(1 if bK = K ∧ τ /∈ TEnc
G2.i,G2.i.1,G2.i.2,G2.i.3
τ ]
K := [y⊤k′
0 otherwise
TDec := TDec ∪ {τ}.
G2.i, G2.i.1, G2.i.2 , G2.i.3
TEnc = TDec := ∅; b ←R {0, 1}
G ←R GGen(1λ); M ←R U3k,k
M⊥ ←R U3k,2k s.t. M⊤M⊥ = 0
M0, M1 ←R U3k,k
1 ←R U3k,k s.t.
M∗
Span(M⊥) = Span(M∗
0 = M⊤
M⊤M∗
0 = 0 = M⊤M∗
Pick random RFi : {0, 1}i → Z2k
p .
1)
0, M∗
0, M∗
1M∗
Pick random RF(0)
and RF(1)
i
i+1 : {0, 1}i+1 → Zk
p
: {0, 1}i → Zk
i+1, RF(1)
p
Pick random RF(0)
k1,0, . . . , kλ,1 ←R Z3k
p
For all τ ∈ {0, 1}λ, kτ :=Pλ
τ := kτ + M⊥RFi(τi)
k′
0RF(0)
τ := kτ + M∗
k′
0RF(0)
τ := kτ + M∗
k′
pk :=(cid:16)G, [M],(cid:0)[M⊤kj,β](cid:1)1≤j≤λ,0≤β≤1(cid:17)
b′ ← ADecO(·,·,·),EncO(·)(pk)
Return 1 if b′ = b, 0 otherwise.
1 = M⊤
0M∗
1
i+1 : {0, 1}i+1 → Zk
p.
j=1 kj,τj