>>> sys.getrefcount(a)
2
>>> import weakref
>>> w = weakref.ref(a) # 创建弱引⽤用。
>>> w() is a # 通过弱引⽤用访问⽬目标对象。
True
>>> sys.getrefcount(a) # 弱引⽤用并未增加⽬目标对象引⽤用计数。
2
>>> del a # 解除⽬目标对象名字引⽤用，对象被回收。
4384434048 dead.
>>> w() is None # 弱引⽤用失效。
True
!23
学习笔记 . 第三版
标准库⾥另有⼀些相关实⽤函数，以及弱引⽤字典、集合等容器。
>>> a = X()
>>> w = weakref.ref(a)
>>> weakref.getweakrefcount(a)
1
>>> weakref.getweakrefs(a)
[]
>>> hex(id(w))
'0x10548f778'
弱引⽤可⽤于⼀些类似缓存、监控等场合，这类 “外挂” 场景不应该影响到⽬标对象。另⼀
个典型应⽤是实现 Finalizer，也就是在对象被回收时执⾏额外的 “清理” 操作。
为什么不使⽤析构⽅法（__del__）？
很简单，析构⽅法作为⽬标成员，其⽤途是完成该对象内部资源的清理。它⽆法感知，也不应该
处理与之⽆关的外部场景。但在实际开发中，类似的外部关联会有很多，那么⽤ Finalizer 才是
合理设计，因为这样只有⼀个不会侵⼊的观察员存在。
>>> a = X()
>>> def callback(w):
print(w, w() is None)
>>> w = weakref.ref(a, callback) # 创建弱引⽤用时，附加回调函数。
>>> del a # 当回收⽬目标对象时，回调函数被调⽤用。
4384343488 dead.
 True
注意，回调函数参数为弱引⽤⽽⾮⽬标对象。另外，被调⽤时，⽬标已⽆法访问。
抛开对⽣命周期的影响不说，弱引⽤最⼤的区别在于其类函数的 callable 调⽤语法。不过
可⽤ proxy 来改进，使其和普通名字引⽤语法保持⼀致。
>>> a = X()
>>> a.name = "Q.yuhen"
!24
学习笔记 . 第三版
>>> w = weakref.ref(a)
>>> w.name
AttributeError: 'weakref' object has no attribute 'name'
>>> w().name
'Q.yuhen'
>>> p = weakref.proxy(a)
>>> p
>>> p.name # 直接访问⽬目标成员。
'Q.yuhen'
>>> p.age = 60 # 通过 proxy 直接向⽬目标添加或设置成员。
>>> a.age
60
>>> del a # 同样不不会影响⽬目标⽣生命周期。
4387316960 dead.
对象复制
从编程初学者的⾓度看，基于名字的引⽤传递要⽐值传递⾃然得多。试想，⽇常⽣活中，
谁会因为名字被别⼈呼来唤去就莫名其妙克隆出⼀个⾃⼰来？但在⼀个有经验的程序员眼
⾥，事情恐怕得反过来。
当调⽤函数时，我们或许仅仅是想传递⼀个状态，⽽⾮整个实体。这好⽐把⾃家姑娘⽣⾠
⼋字，外加⼀幅美⼈图交给媒⼈，断没有直接把⼈领⾛的道理。另⼀⽅⾯，现在并发编程
也算⽇常惯例，让多个执⾏单元共享实例引起数据竞争（data race），也是个⼤⿇烦。
对象的控制权该由创建者负责，⽽不能寄希望于接收参数的被调⽤⽅。必要时，可使⽤不
可变类型，或对象复制品作为参数传递。除⾃带复制⽅法（copy）的类型外，可选择⽅法
包括标准库 copy 模块，或 pickle、json 等序列化（object serialization）⽅案。
不可变类型包括 int、float 、str、bytes、tuple、frozenset 等。因不能改变其状态，所以被多⽅只
读引⽤也没什么问题。
!25
学习笔记 . 第三版
复制还分浅拷贝（shallow copy）和深度拷贝（deep copy）两类。对于对象内部成员，浅
拷贝仅复制名字引⽤，⽽后者会递归复制所有引⽤成员。
>>> class X: pass
>>> x = X() # 创建实例例。
>>> x.data = [1, 2] # 成员 data 引⽤用⼀一个列列表。
>>> import copy
>>> x2 = copy.copy(x) # 浅拷⻉贝。
>>> x2 is x # 复制成功。
False
>>> x2.data is x.data # 但成员 data 依旧指向原列列表，仅仅复制了了引⽤用。
True
>>> x3 = copy.deepcopy(x) # 深拷⻉贝。
>>> x3 is x # 复制成功。
False
>>> x3.data is x.data # 成员 data 列列表同样被复制。
False
>>> x3.data.append(3) # 向复制的 data 列列表追加数据。
>>> x3.data
[1, 2, 3]
>>> x.data # 没有影响原列列表。
[1, 2]
deepcopy
copy x
x3
data [1,2]
x2
data [1,2,3]
!26
学习笔记 . 第三版
相⽐ copy，序列化是将对象转换为可存储和传输的格式，反序列化则正好相反。⾄于格式，
可以是 pickle 的⼆进制，也可以是 JSON、XML 等格式化⽂本。⼆进制拥有最好的性能，
但从数据传输和兼容性看，JSON 更佳。
⼆进制序列化还可选择 MessagePack 等跨平台第三⽅解决⽅案。
>>> class X: pass
>>> x = X()
>>> x.str = "string"
>>> x.list = [1, 2, 3]
>>> import pickle
>>> d = pickle.dumps(x) # 序列列化，返回字节序列列。
>>> x2 = pickle.loads(d) # 反序列列化，返回新 X 实例例。
>>> x2 is x
False
>>> x2.list is x.list # 基于字节序列列构建，与原对象再⽆无关系。
False
⽆论是哪种对象复制⽅案都存在⼀定限制，具体请参考相关⽂档为准。
循环引用垃圾回收
引⽤计数机制虽然实现简单，但可在计数归零时⽴即清理该对象所占内存，绝⼤多数时候
都能⾼效运作。只是当两个或更多对象构成循环引⽤（reference cycle）时，该机制就会遭
遇⿇烦。因为彼此引⽤导致计数永不会归零，从⽽⽆法触发回收操作，形成内存泄漏。为
此，另设了⼀套专门⽤来处理循环引⽤的垃圾回收器（以下简称 gc）作为补充。
单个对象也能构成循环引⽤，⽐如列表把⾃⾝作为元素存储。
相⽐在后台默默⼯作的引⽤计数，这个可选的附加回收器拥有更多的控制选项，包括将其
临时或永久关闭。
!27
学习笔记 . 第三版
class X:
def __del__(self):
print(self, "dead.")
>>> import gc
>>> gc.disable() # 关闭 gc。
>>> a = X()
>>> b = X()
>>> a.x = b # 构建循环引⽤用。
>>> b.x = a
>>> del a # 删除全部名字后，对象并未被回收，引⽤用计数失效。
>>> del b
>>> gc.enable() # 重新启⽤用 gc。
>>> gc.collect() # 主动启动⼀一次回收操作，循环引⽤用对象被正确回收。
 dead.
 dead.
虽然可⽤弱引⽤打破循环，但在实际开发时很难这么做。就本例⽽⾔，a.x 和 b.x 都需要保证⽬
标存活，这是逻辑需求，弱引⽤⽆法确保这点。另外，循环引⽤可能由很多对象因复杂流程间接
造成，很难被发现，⾃然也就⽆法提前使⽤弱引⽤⽅案。
在 Python 早期版本⾥， gc 不能回收包含 __del__ 的循环引⽤，但现在已不是问题。
另外，iPython 对于弱引⽤和垃圾回收存在⼲扰，建议⽤原⽣ Shell 或源码⽂件测试本节代码。
在进程（虚拟机）启动时，gc 默认被打开，并跟踪所有可能造成循环引⽤的对象。相⽐引
⽤计数，gc 是⼀种延迟回收⽅式。只有当内部预设的阈值条件满⾜时，才会在后台启动。
虽然可忽略该条件，强制执⾏回收，但不建议频繁使⽤。相关细节，后⽂再做阐述。
对某些性能优先的算法，在确保没有循环引⽤前提下，临时关闭 gc 可能会获得更好的性
能。甚⾄某些极端优化策略⾥，会完全屏蔽垃圾回收，通过重启进程来回收资源。
例如，在做性能测试（⽐如 timeit）时，也会关闭 gc，避免回收操作对执⾏计时造成影响。
!28
学习笔记 . 第三版
1.4 编译
源码须编译成字节码（byte code）指令后，才能交由解释器（interpreter）解释执⾏。这
也是 Python 性能为⼈诟病的⼀个重要原因。
字节码是中间代码，⾯向后端编译器或解释器。要么直接解释，要么⼆次编译成机器代码后执⾏。
通常基于栈式虚拟机（stack-based VM）实现，没有寄存器等复杂概念，实现简单。且具备中⽴
性，与硬件架构、操作系统等⽆关，便于将编译与平台实现分离，是跨平台语⾔的主流⽅案。
也可尝试内置即时编译（Just-In-Time compiler）的实现版本（⽐如 PyPy），它们提供更好的执
⾏性能，更少的内存占⽤。只是相对 CPython 要滞后⼀些，另须注意兼容性。
除去交互模式（interactive）和⼿⼯编译。正常情况下，源码⽂件在被导⼊（import）时完
成编译。编译后的字节码数据被缓存复⽤，并尝试保存到硬盘。
Python 3 使⽤专门的 __pycache__ ⽬录保存字节码缓存⽂件（.pyc）。这样在程序下次启
动时，可避免再次编译，以提升导⼊速度。标准 pyc ⽂件⼤体上由两部分组成。头部存储
有编译相关信息，在启动时，可判断源码⽂件是否被更新，是否需要重新编译。
Python 版本号 源码⽂件⼤⼩
magic number source mtime source size code
源码⽂件修改时间
下载 3.6 源码，阅读 Lib/importlib/text _bootstrap_external.py ⽂件⾥的 _code_to_bytecode 代码，
可看到字节码头部信息构成。该⽂件还有 “Finder/loader utility code” 注释，对相关格式和内容做
了更详细解释。
除作为执⾏指令的字节码外，还有很多元数据，共同组成执⾏单元。从这些元数据⾥，可
以直接获得参数、闭包等诸多信息。
def add(x, y):
return x + y
>>> add.__code__
!29
学习笔记 . 第三版
>>> dir(add.__code__)
['co_argcount', 'co_code', 'co_consts', ..., 'co_names', 'co_nlocals', 'co_varnames']
>>> add.__code__.co_varnames
('x', 'y')
>>> add.__code__.co_code
b'|\x00|\x01\x17\x00S\x00'
就像⽆法阅读机器代码⼀样，对于字节码指令，同样需要借助⼀点⼿段。所幸，标准库提
供了⼀个 dis 模块，让我们可以直接 “反汇编”（disassembly）。
>>> import dis
>>> dis.dis(add)
2 0 LOAD_FAST 0 (x)
2 LOAD_FAST 1 (y)
4 BINARY_ADD
6 RETURN_VALUE
相⽐ x86-64、ARM 等汇编指令，上⾯的输出结果⾮常易读。标准库帮助⽂档更是对所有
指令做了详细说明。与隐藏⼤量细节的 Python 语⾔不同，字节码指令更能直接体现操作
流程和细节。在后续章节，我们会⼤量使⽤该⽅式来验证语⾔特征。
本书第⼗章会对虚拟机、解释器、反汇编等作出详细解释，现在只需有个初步了解即可。
某些时候，需要⼿⼯完成编译操作。
source = """
print("hello, world!")
print(1 + 2)
"""
>>> code = compile(source, "demo", "exec") # 编译，提供⼀一个⽂文件名便便于输出提示。
>>> dis.show_code(code) # 输出相关信息。
Filename: demo
Constants:
0: 'hello, world!'
1: 1
!30
学习笔记 . 第三版
2: 2
3: None
4: 3
Names:
0: print
>>> dis.dis(code)
2 0 LOAD_NAME 0 (print)
2 LOAD_CONST 0 ('hello, world!')
4 CALL_FUNCTION 1
6 POP_TOP
3 8 LOAD_NAME 0 (print)
10 LOAD_CONST 4 (3)
12 CALL_FUNCTION 1
14 POP_TOP
16 LOAD_CONST 3 (None)
18 RETURN_VALUE
>>> exec(code)
hello, world!
3
除内置 compile 函数外，标准库还有编译源码⽂件的相关模块。可⽤代码中调⽤，或直接
在命令⾏执⾏。
可直接发布 pyc ⽂件⽤来执⾏，这算是对源码的⼀种简单保护。
>>> import py_compile, compileall
>>> py_compile.compile("main.py")
'__pycache__/main.cpython-36.pyc'
>>> compileall.compile_dir(".")
Listing '.'...
Compiling './test.py'...
True
$ python -m compileall .
!31
学习笔记 . 第三版
1.5 执行
除预先准备好的代码外，还可在运⾏期动态执⾏⼀些 “未知” 代码。当然，这并不局限于从
服务器或其他什么地⽅下载新的功能模块，常被⽤来实现动态⽣成设计。
以标准库 namedtuple 实现为例，它基于字符串模版在运⾏期构建新的类型。类似的还有
使⽤频繁的 ORM 框架，完全可读取数据表结构动态⽣成数据模型和映射关系，极⼤减少
了那堆看上去不太美观的架构（schema）定义代码。
不同于完全由专业开发⼈员编写的插件，动态执⾏逻辑可能来⾃于⽤户输⼊（⽐如计算公
式），也可能是运维⼈员后台推送（新的加密⽅式或数据格式）。从这点上来说，它为架
构设计和功能扩展带来更⼤的灵活性。
动态执⾏与是否是动态语⾔⽆关。就算是 Java、C# 这类静态语⾔，也可通过 CodeDOM、Emit
等⽅式动态⽣成、编译和执⾏代码。
>>> import collections
>>> User = collections.namedtuple("User", "name,age", verbose=True) # 动态⽣生成 User 类型。
class User(tuple):
_fields = ('name', 'age')
...
>>> User