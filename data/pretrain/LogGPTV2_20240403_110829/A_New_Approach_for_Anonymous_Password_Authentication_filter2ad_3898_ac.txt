the blind signatures with the server’s public key before
applying password protection (we assume that the server
provides public key encryption). It is easy to see that off-
line guessing attacks by outsiders are addressed. However,
this method cannot achieve unlinkability with respect to
the server. On the one hand, the user needs to surrender
the encrypted blind signatures to the server for authen-
tication purposes. On the other hand, by assumption the
server also knows the corresponding password-protected
credentials (i.e., encrypted blind signatures protected by
password). By combining the two, the server clearly can
recover the password, and thus link the encrypted blind
signatures protected by the same password.
Lesson 2: The reason for the failure is that users directly
submit the items protected by passwords (i.e., encrypted
blind signatures) to the server. The lesson is thus that the
server should be prevented from seeing the items protected
by passwords. This further means that users should not
directly submit the credentials to the server.
Third Try. Without direct submission of credentials, proving
the possession of credentials by zero-knowledge proofs
seems the only feasible choice. The CL signature [12] is
a primitive that meets this need. However, even we have
decided the strategy and the tool, there are still more to
be considered. Recall that the CL signature on message m
is (v, k, s) satisfying vk = ambsc (mod n). Without loss
of generality, let us deﬁne a user credential as (v, k, s) such
bsc (mod n), where U is the user’s identity. To
U
that vk = a
achieve restricted veriﬁability, (v, k, s) should be encrypted
by the server’s public key, as discussed above. Nevertheless,
if the entire credential is encrypted, the user himself is
unable to use the credential, because he needs to know v, k, s
in order to perform zero-knowledge proofs.
Furthermore, partial encryption of some elements of the
credential does not work either. Suppose s is encrypted3.
Then, every time to use the credential,
the user needs
to pass the encrypted s to the server and then perform
P oK{(ν, κ, µ) : νκaµ = bsc} (note that the zero-knowledge
proofs are to prove vka
= bsc (mod n)). The server
clearly can link different uses of the credential simply from
s, regardless of the zero-knowledge proofs.
−U
A remedy is to submit a distinct encrypted item for each
3In fact, it seems to us that encrypting v or k would make it harder for
the user to perform zero-knowledge proofs.
204
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:53 UTC from IEEE Xplore.  Restrictions apply. 
pwPassword fileUserpwConventional Anonymous Password AuthenticationServerpwUserPassword-ProtectedCredentialOur New ApproachServerpwuse of the credential. Speciﬁcally, the user partitions s into
two random shares s1, s2 such that s1 + s2 = s; encrypts s1
using the server’s public key, denoted as E(s1), and protects
(v, k, s2) using password, denoted as [v, k, s2]pw. The entire
password-protected credential is thus ⟨E(s1), [v, k, s2]pw⟩.
the encryption of s1 successfully breaks the
Note that
known structure of the credential, and no one other than
the server can verify the validity of (v, k, s2). Hence, off-
line guessing attacks by outsiders are prevented. To use
the credential for login, the user submits C = bs2 gr (i.e.,
a Pederson commitment of s2) together with E(s1) to
the server. The server decrypts to get s1 and computes
Cbs1 c = bs1+s2 grc = bsgrc, and then the user executes
P oK{(ν, κ, µ, γ) : νκaµgγ = Cbs1 c}, where the zero-
knowledge proofs are to prove vka
gr = bsgrc (mod n).
At the end of the login, the server sends back s1 to the
user, who then restores s and re-partitions it into two new
shares. In this way, the user is entitled to submit a distinct
s1 each time to the server. Does this solve the problem?
Unfortunately, the server can still link uses of the credential.
The situation is similar to that in the second try: the server
can recover the password used to protect (v, k, s2), and
associate it with s1; therefore, the server can link different s1
associated with the same password, regardless of the zero-
knowledge proofs.
−U
⟨1⟩
⟨2⟩
2 , and adds s
2
⟨1⟩
2 + s
⟨1⟩
⟨1⟩
2 ). Here s
2
Lesson 3: The lesson we learned is that the user should
never directly submit the data in storage (i.e., E(s1)) to the
server, whether it is an entire credential or a part thereof.
Final Try. It is now clear that the encrypted item submitted
to the server has to be different from that in storage. To
achieve this, the user needs to manipulate E(s1) before
submission, and render the resulting item in encryption
distinct from s1. The actual method we use is that the
⟨2⟩
⟨1⟩
user further partitions s2 into two random shares s
2 , s
2
to s1 to generate
such that s2 = s
′
serves as a blinding factor
E(s
1) = E(s1 + s
⟨2⟩
′
to blind s1. Then the user submits E(s
1) and C = bs
2 gr
to the server; the construction of zero-knowledge proofs
remain unchanged. Since the manipulation is performed
upon ciphertexts, the public key encryption possessed by
the server should be homomorphic.
B. Details of the Scheme
Setup: The server S sets up pkCL = (n =
′
′
′
) for the CL signature; and
, a, b, c), skCL = (p
p
picks g, h ∈ QRn. S also has a public/private key
pair (pkS, skS ) for homomorphic encryption, and we use
Hom_EncS (.), Hom_DecS (.) to denote the encryption func-
tion under pkS, and the decryption function under skS,
respectively. S decides a cryptographic hash function H(.),
and a symmetric key encryption enc(.). The public system
parameters include (pkCL, g, h, pkS , H(.), enc(.)).
, q
q
′
Registration: Users need to register to the server in ad-
vance, getting a credential to be used for authentication. The
i = a
server issues each user Ui a credential (vi, ki, si) using the
Ui bsi c (mod n),
CL signature scheme, satisfying vki
where Ui is the user’s identity. Upon reception of his cre-
dential, Ui partitions si into two random shares si,1, si,2 such
that si = si,1 + si,2; encrypts si,1 using the server’s public
i.e., Ei,1 = Hom_EncS(si,1); protects (vi, ki, si,2)
key,
using his password pwi, i.e, Ei,2 = [vi, ki, si,2]pwi, where
[.]pw denotes, e.g., symmetric key encryption with a key
derived from pw. Finally, Ui puts ⟨Ei,1, Ei,2⟩ to his preferred
storage, e.g., handphone, USB ﬂash memory, or a public
directory.
Authentication: Suppose a user U already has his
password-protected credential ⟨E1 = Hom_EncS(s1), E2 =
[v, k, s2]pw⟩ available at the point of login. The authentica-
tion protocol between U and server S is as follows.
Step 1. U does the following computations.
(1). Recovers (v, k, s2) by decrypting E2 with his pass-
word pw.
⟨1⟩
2 , s
⟨2⟩
2 , such that
⟨1⟩
2 ) =
⟨1⟩
2 ).
(2) Partitions s2 into two shares s
⟨1⟩
2 + s
⟨2⟩
2 . Computes E
(4). Computes V = vka
′
1 = E1.Hom_EncS (s
(3). Picks a random r ∈ [0..n/4], computes R = bs
s2 = s
Hom_EncS (s1 + s
⟨2⟩
2 hr
(mod n) and (cid:6)(R) = N P oK{(ς, γ) : R = bς hγ}. Note
that the zero-knowledge proof guarantees that R is well-
formed.
hr (mod n); picks a random
x ∈ [0..n/4] and computes X = gx (mod n), X
=
Hom_EncS (X); constructs (cid:6)(V ) = N P oK{(ν, κ, µ, γ) :
V = νκaµhγ}[X
, (cid:6)(V ) to S as a
∗
(5). Finally, U sends E
login request: U −→ S: E
Step 2. Upon reception of the login request, S does the
following.
′
1, R, (cid:6)(R), X
′
1, R, (cid:6)(R), X
, (cid:6)(V )
, R].
−U
∗
∗
∗
(1). Veriﬁes the validity of (cid:6)(R), and aborts if not valid.
⟨1⟩
′
′
(2). Computes Hom_DecS (E
2 , and
1) = s
1 = s1 + s
⟨2⟩
′
2 hrc = bshrc (mod n). V
= Rbs
′, veriﬁes the validity of (cid:6)(V ), and aborts if
computes V
should be equal to V .
(3). With V
′
1 c = bs
′
1+s
′
∗
(4). Computes Hom_DecS(X
not valid.
) = X. Chooses a random
y ∈ [0..n/4], computes Y = gy (mod n), and a temporary
′
key tk = H(X y). Encrypts s
1 by symmetric key encryption
′
as enctk(s
1).
(5). Finally, computes the shared key sk = H(X, Y, X y),
1) to U:
′
and returns Y, enctk(s
Step 3. U concludes the login process as follows.
S −→ U: Y, enctk(s
′
1)
′
(1). Computes tk = H(Y x), and decrypts enctk(s
1) to
⟨2⟩
′
′
get s
2 , and checks whether vk =
1. Restores s = s
1 + s
U
a
bsc (mod n). Aborts if not valid.
205
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:07:53 UTC from IEEE Xplore.  Restrictions apply. 
(2). Computes a shared key sk = H(X, Y, Y x), and
ends the authentication procedure. The password protected
credential remains the same for the next login.
′
Note that the server sending back s
1 to the user is to
authenticate the server to the user, in that only the server
∗ to get s
′
can correctly decrypt E
1, X, and in turn
make the user accept. In fact, the correct computation of
′
tk sufﬁces authenticating the server, and sending back s
1 is
not absolutely necessary. Step 3 thus can be simpliﬁed such
that the server authenticates to the user by tk, e.g., using
MAC keyed by tk.
′
1, X
C. Security Analysis
Due to the limited space, the following deﬁnitions and
analysis are informal.
1) Adversary Model: Either the server or outsiders could
be the adversary in our system, with respect to different
security objectives listed below. An outsider is deﬁned to be
anyone other than the server and the user who are engaging
in the authentication protocol. The adversary is malicious,
can do arbitrarily in order to violate the respective secu-
rity objectives. In particular, we assume that the adversary
acquires all users’ password-protected credentials.
objectives.
2) Security Objectives: We desire the following security
−Authentication [Outsiders]. The authentication objective
requires that an outsider cannot impersonate a valid user to
the server, and vice versa.
−Secrecy of Session Key [Outsiders]. It requires that an
outsider should not learn the session key established between
the server and the user.
−Off-line Guessing Attacks [Outsiders]. The resistance
against off-line guessing attacks is with respect
to the
outsiders. It requires that an outsider should not be able
to recover passwords used to protect credentials by off-line
guessing attacks.
−Unlinkability [Server]. The user unlinkability is deﬁned
with respect to the server. It requires that the server cannot
link different logins by the same user.
3) Security Analysis: We show the intuitions on how our
scheme manages to satisfy the above security objectives.
Authentication. In our scheme, authentication of the user
to the server is by (cid:6)(V ). Without the knowledge of a valid
′