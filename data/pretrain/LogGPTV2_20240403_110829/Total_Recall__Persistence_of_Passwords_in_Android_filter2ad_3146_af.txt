could certainly move its app ecosystem toward better practices
for managing passwords. In the future, after our ﬁndings
are widely disseminated, we can also build static analyzers
to identify whether or not Android apps are adopting best
practices in managing passwords.
IX. RELATED WORK
A. Protecting sensitive data
Insecure data deletion has been an issue in desktops and
servers for over a decade [13], and it is one of the fundamental
causes of data exposure. Researchers have developed many
solutions to address this. Chow et al. handle this by secure
deallocation [14], Pridgen et al. aim at reducing encryption
keys retained in the Java heap for desktops and servers [49],
Dunn et al. use ephemeral channels where data will be securely
erased after a session ﬁnishes [18], and Lee and Wallach study
the retention of TLS secrets in Android memory [34]. Different
from existing work, our paper focuses on the study of password
retention, and proposes effective ﬁxes to address this problem.
Another line of research looks at storing sensitive data
in secure locations, instead of removing data from insecure
locations. The example secure locations considered by existing
work include cloud storage [57], CPU registers [40], and
separate “trusted” CPU features like ARM TrustZone [65].
These proposals generally leverage features that are not univer-
sally available, and possibly also entail signiﬁcant performance
issues.
Researchers have also considered protecting sensitive data
by detecting malicious application misbehaviors. Dynamic
analysis techniques, such as data-ﬂow analysis [20] and
password-tracking [15], have been introduced to detect data
leakage from applications. Static analysis techniques [4], [6],
[12] have also been used to detect malicious behaviors. K-
Hunt [35], for example, can pinpoint insecure cryptographic
usage issues in software, including poor key sanitization.
Automated approaches facilitate scalable reasoning about
security issues, but most are limited to analyses of the Java
software stack, without necessarily looking at native methods
in C, kernel buffers, or unreachable buffers that have not yet
been garbage collected. In short, these tools are excellent when
looking for a known vulnerability pattern, but are less useful
in a case like ours, where we don’t initially know anything
other than the password string we’re looking to ﬁnd, wherever
it may be.
B. Memory forensics
In terms of memory acquisition techniques, Sylve et al. [56]
ﬁrst suggested a technique for capturing the physical memory
of Android devices. In later work, M¨uller and Spreitzenbarth
demonstrate that cold-boot attacks are feasible on Android
phones [41]. Yang et al. [64] designed an acquisition technique
13
when the Android device is in ﬁrmware update mode. We used
the system developed by Sylve et al. to perform our study.
Regarding memory analysis techniques, signature-based
frameworks [47], [60] have been widely used by researchers
to analyze memory dumps on different platforms. Various
techniques have also been proposed to recover data structure
from memory dumps using static analysis [10], dynamic anal-
ysis [17], and probabilistic analysis [37].
Memory forensics has been applied to the Android plat-
form. A line of previous work has focused on extracting sen-
sitive data from applications [3], [30], [58], [59]. Researchers
have also looked at techniques to recover data beyond raw
memory dumps, including the timeline of user activities [7]
and GUI activities [52], [53].
C. Security ﬂaws in Android apps
Existing work has studied security ﬂaws in Android apps,
and revealed that developers have misused TLS library [21],
[22], [25], cryptographic APIs [19], OAuth protocols [11],
and ﬁngerprint APIs [8]. Reaves et al. [51] analyzed mobile
banking apps, reporting information leakage in these apps.
Recent usability studies have also looked at why developers
make mistakes, by analyzing the patterns of misuse [1], [2],
[23], [42], [43].
Password managers have attracted particular attention be-
cause they directly handle sensitive passwords. Fahl et al. [22]
revealed that many password managers are vulnerable to
clipboard snifﬁng attacks. Silver et al. [55] found critical ﬂaws
in auto-ﬁll functionality. Li et al. [36] found problems in web-
based password managers.
X. CONCLUSION
In this paper, we have performed a comprehensive study
on password retention in Android. Our analysis techniques—
searching through memory dumps—proved to be robust and ef-
fective at discovering problems and validating our alternatives.
We found problems with the core Android platform, as well as
a wide variety of popular apps, including keyboard input apps.
We developed suitable patches for Android’s TextView widget
to address these problems, assisting apps to follow more secure
password management practices with only modest changes in
their code.
Acknowledgement: We thank our shepherd, Adam Aviv, and
the anonymous reviewers for their valuable feedback. This
work was supported in part by NSF grants CNS-1801884,
CNS-1409401, and CNS-1314492.
REFERENCES
[1] Y. Acar, M. Backes, S. Fahl, S. Garﬁnkel, D. Kim, M. L. Mazurek, and
C. Stransky, “Comparing the usability of cryptographic APIs,” in 38th
IEEE Symposium on Security and Privacy (S&P ’17).
IEEE, 2017.
[2] Y. Acar, M. Backes, S. Fahl, D. Kim, M. L. Mazurek, and C. Stransky,
“You get where you’re looking for: The impact of information sources
on code security,” in 37th IEEE Symposium on Security and Privacy
(S&P ’16), 2016.
[3] D. Apostolopoulos, G. Marinakis, C. Ntantogian, and C. Xenakis,
“Discovering authentication credentials in volatile memory of Android
mobile devices,” in Conference on e-Business, e-Services and e-Society.
Springer, 2013.
[4] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, K. Rieck, and
C. Siemens, “DREBIN: Effective and explainable detection of Android
malware in your pocket.” in Network and Distributed System Security
Symposium (NDSS ’14), 2014.
[5] N. Artenstein, “BROADPWN: Remotely compromising Android and
iOS via a bug in Broadcom’s WiFi chipsets,” in Black Hat USA, 2017.
[6] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel, “FlowDroid: Precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for An-
droid apps,” in 35th annual ACM SIGPLAN conference on Programming
Language Design and Implementation (PLDI ’14), 2014.
[7] R. Bhatia, B. Saltaformaggio, S. J. Yang, A. Ali-Gombe, X. Zhang,
D. Xu, and G. G. Richard III, “Tipped off by your memory allocator:
Device-wide user activity sequencing from Android memory images,”
in Network and Distributed System Security Symposium (NDSS ’18),
2018.
[8] A. Bianchi, Y. Fratantonio, A. Machiry, C. Kruegel, G. Vigna, S. P. H.
Chung, and W. Lee, “Broken ﬁngers: On the usage of the ﬁngerprint API
in Android,” in Network and Distributed System Security Symposium
(NDSS ’18), 2018.
J. Bonneau, C. Herley, P. C. v. Oorschot, and F. Stajano, “The quest to
replace passwords: A framework for comparative evaluation of web
authentication schemes,” in 33rd IEEE Symposium on Security and
Privacy (S&P ’12), 2012.
[9]
[10] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang,
“Mapping kernel objects to enable systematic integrity checking,” in
16th ACM Conference on Computer and Communications Security
(CCS ’09), 2009.
[11] E. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague, “Oauth
demystiﬁed for mobile application developers,” in 21st ACM Conference
on Computer and Communications Security (CCS ’14), 2014.
[13]
[12] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing inter-
application communication in Android,” in 9th international conference
on Mobile systems, applications, and services (MobiSys ’11). ACM,
2011.
J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and M. Rosenblum,
“Understanding data lifetime via whole system simulation,” in 13th
USENIX Security Symposium (Security ’04), 2004.
J. Chow, B. Pfaff, T. Garﬁnkel, and M. Rosenblum, “Shredding your
garbage: Reducing data lifetime through secure deallocation,” in 14th
USENIX Security Symposium (Security ’05), 2005.
[14]
[15] L. P. Cox, P. Gilbert, G. Lawler, V. Pistol, A. Razeen, B. Wu, and
S. Cheemalapati, “SpanDex: Secure password tracking for Android.” in
23rd USENIX Security Symposium (Security ’14), 2014.
[16] A. Das, J. Bonneau, M. Caesar, N. Borisov, and X. Wang, “The tangled
web of password reuse.” in Network and Distributed System Security
Symposium (NDSS ’14), 2014.
[17] B. Dolan-Gavitt, A. Srivastava, P. Traynor, and J. Gifﬁn, “Robust
signatures for kernel data structures,” in 16th ACM Conference on
Computer and Communications Security (CCS ’09), 2009.
[18] A. M. Dunn, M. Z. Lee, S. Jana, S. Kim, M. Silberstein, Y. Xu,
V. Shmatikov, and E. Witchel, “Eternal Sunshine of the spotless
machine: Protecting privacy with ephemeral channels.” in USENIX
Symposium on Operating Systems Design and Implementation (OSDI
’12), 2012.
[19] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An empirical
study of cryptographic misuse in Android applications,” in 20th ACM
Conference on Computer and Communications Security (CCS ’13),
2013.
[20] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel,
and A. N. Sheth, “TaintDroid: an information-ﬂow tracking system for
realtime privacy monitoring on smartphones,” in USENIX Symposium
on Operating Systems Design and Implementation (OSDI ’10), 2010.
[21] S. Fahl, M. Harbach, T. Muders, L. Baumg¨artner, B. Freisleben, and
M. Smith, “Why Eve and Mallory love Android: An analysis of
Android SSL (in) security,” in 19th ACM Conference on Computer and
Communications Security (CCS ’12), 2012.
[22] S. Fahl, M. Harbach, M. Oltrogge, T. Muders, and M. Smith, “Hey,
you, get off of my clipboard,” in International Conference on Financial
Cryptography and Data Security. Springer, 2013, pp. 144–161.
14
[23] F. Fischer, K. B¨ottinger, H. Xiao, C. Stransky, Y. Acar, M. Backes, and
S. Fahl, “Stack overﬂow considered harmful? the impact of copy&paste
on android application security,” in 38th IEEE Symposium on Security
and Privacy (S&P ’17).
IEEE, 2017.
[24] D. Florencio and C. Herley, “A large-scale study of web password
habits,” in 16th international conference on World Wide Web (WWW
’07). ACM, 2007.
[25] M. Georgiev, S.
Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov, “The most dangerous code in the world: validating
SSL certiﬁcates in non-browser software,” in 19th ACM Conference
on Computer and Communications Security (CCS ’12), 2012.
[26] M. Green and M. Smith, “Developers are not the enemy! The need for
usable security APIs,” IEEE Security & Privacy, vol. 14, no. 5, pp.
40–46, 2016.
[27] S. Gunasekera, Android Apps Security. Apress, 2012.
[28]
J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul,
J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten, “Lest
we remember: cold-boot attacks on encryption keys,” in 17th USENIX
Security Symposium (Security ’08), 2008.
[29] R. Hay, “Undocumented patched vulnerability in Nexus 5X allowed
for memory dumping via USB,” Security Intelligence, 2016. [Online].
Available: https://ibm.co/Bdeidu
[30] C. Hilgers, H. Macht, T. Muller, and M. Spreitzenbarth, “Post-mortem
memory analysis of cold-booted Android devices,” in Eighth Interna-
tional Conference on IT Security Incident Management & IT Forensics.
IEEE, 2014.
[31] B. Kaliski, “PKCS #5: Password-based cryptography speciﬁcation ver-
[32]
sion 2.0,” Tech. Rep., 2000, https://tools.ietf.org/html/rfc2898.
J. Kelsey, B. Schneier, C. Hall, and D. Wagner, “Secure applications of
low-entropy keys,” in International Workshop on Information Security.
Springer, 1997, pp. 121–134.
[34]
[33] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Ham-
burg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom,
“Spectre attacks: Exploiting speculative execution,” in 40th IEEE Sym-
posium on Security and Privacy (S&P ’19), 2019.
J. Lee and D. S. Wallach, “Removing secrets from Android’s TLS,”
in Network and Distributed System Security Symposium (NDSS ’18),
2018.
J. Li, Z. Lin, J. Caballero, Y. Zhang, and D. Gu, “K-Hunt: Pinpointing
insecure cryptographic keys from execution traces,” in 25th ACM
Conference on Computer and Communications Security (CCS ’18),
2018.
[35]
[36] Z. Li, W. He, D. Akhawe, and D. Song, “The emperor’s new password
manager: Security analysis of web-based password managers.” in 23rd
USENIX Security Symposium (Security ’14), 2014.
[37] Z. Lin, J. Rhee, X. Zhang, D. Xu, and X. Jiang, “SigGraph: Brute
force scanning of kernel data structure instances using graph-based
signatures,” in Network and Distributed System Security Symposium
(NDSS ’11), 2011.
[38] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh,
J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg,
“Meltdown: Reading kernel memory from user space,” in 27th USENIX
Security Symposium (Security ’18), 2018.
[39] N. Mavrogiannopoulos and J. Simon, “GnuTLS,” 2003, https://gnutls.
org/.
[40] T. M¨uller, F. C. Freiling, and A. Dewald, “TRESOR runs encryption
securely outside RAM,” in 20th USENIX Security Symposium (Security
’11), 2011.
[41] T. M¨uller and M. Spreitzenbarth, “FROST: Forensic recovery of scram-
bled telephones,” in International Conference on Applied Cryptography
and Network Security (ACNS ’13), 2013.
[42] S. Nadi, S. Kr¨uger, M. Mezini, and E. Bodden, “Jumping through hoops:
Why do Java developers struggle with cryptography APIs?” in 38th
International Conference on Software Engineering (ICSE ’16). ACM,
2016.
[43] A. Naiakshina, A. Danilova, C. Tiefenau, M. Herzog, S. Dechand,
and M. Smith, “Why do developers get password storage wrong?: A
qualitative usability study,” in 24th ACM Conference on Computer and
Communications Security (CCS ’17), 2017.
15
[44] OpenSSL Software Foundation, “OpenSSL,” 1999, https://www.
openssl.org/.
[45] Oracle, “Java cryptography architecture (JCA) reference guide,” 2003,
https://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/
CryptoSpec.html.
[46] C. Percival and S. Josefsson, “The scrypt password-based key derivation
function,” Internet Requests for Comments, RFC Editor, RFC 7914,
Aug. 2016, https://tools.ietf.org/html/rfc7914.
[47] N. L. Petroni, A. Walters, T. Fraser, and W. A. Arbaugh, “FATKit:
A framework for the extraction and analysis of digital forensic data
from volatile system memory,” Digital Investigation, vol. 3, no. 4, pp.
197–210, 2006.
[48] T. Pornin, “BearSSL,” 2017, https://bearssl.org/.
[49] A. Pridgen, S. L. Garﬁnkel, and D. S. Wallach, “Present but unreach-
latent secrets in HotSpot JVM,” in 50th
able: Reducing persistent
Hawaii International Conference on System Sciences (HICSS ’17),
2017.
[50] N. Provos and D. Mazieres, “A future-adaptable password scheme.” in
1999 USENIX Annual Technical Conference, FREENIX Track, 1999.
[51] B. Reaves, N. Scaife, A. Bates, P. Traynor, and K. R. Butler, “Mo(bile)
money, mo(bile) problems: Analysis of branchless banking applications
in the developing world,” in 24th USENIX Security Symposium (Security
’15), 2015.
[52] B. Saltaformaggio, R. Bhatia, Z. Gu, X. Zhang, and D. Xu, “GUITAR:
Piecing together Android app GUIs from memory images,” in 22nd
ACM Conference on Computer and Communications Security (CCS
’15), 2015.
[53] B. Saltaformaggio, R. Bhatia, X. Zhang, D. Xu, and G. G. Richard III,
“Screen after previous screens: Spatial-temporal recreation of Android
app displays from memory images,” in 25th USENIX Security Sympo-
sium (Security ’16), 2016.
[54] R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L. Mazurek,
L. Bauer, N. Christin, and L. F. Cranor, “Encountering stronger pass-
word requirements: user attitudes and behaviors,” in 6th Symposium on
Usable Privacy and Security (SOUPS ’10). ACM, 2010, p. 2.
[55] D. Silver, S. Jana, D. Boneh, E. Y. Chen, and C. Jackson, “Password
managers: Attacks and defenses.” in 23rd USENIX Security Symposium
(Security ’14), 2014.
J. Sylve, A. Case, L. Marziale, and G. G. Richard, “Acquisition and
analysis of volatile memory from Android devices,” Digital Investiga-
tion, vol. 8, no. 3, pp. 175–184, 2012.
[56]
[57] Y. Tang, P. Ames, S. Bhamidipati, A. Bijlani, R. Geambasu, and
N. Sarda, “CleanOS: Limiting mobile data exposure with idle eviction,”
in USENIX Symposium on Operating Systems Design and Implementa-
tion (OSDI ’12), 2012.
[58] V. L. Thing, K.-Y. Ng, and E.-C. Chang, “Live memory forensics of
mobile phones,” digital investigation, vol. 7, pp. S74–S82, 2010.
[59] R. J. Walls, E. G. Learned-Miller, and B. N. Levine, “Forensic triage for
mobile phones with DEC0DE,” in 20th USENIX Security Symposium
(Security ’11), 2011.
[60] A. Walters, The Volatility framework: Volatile memory artifact ex-
traction utility framework, 2007, https://github.com/volatilityfoundation/
volatility.
[61] T. D. Wu, “The secure remote password protocol.” in Network and
Distributed System Security Symposium (NDSS ’98), 1998.
[62] L. Xue, C. Qian, H. Zhou, X. Luo, Y. Zhou, Y. Shao, and A. T. Chan,
“NDroid: Toward tracking information ﬂows across multiple Android
contexts,” IEEE Transactions on Information Forensics and Security,
2019.
[63] L.-K. Yan and H. Yin, “DroidScope: Seamlessly reconstructing the OS
and Dalvik semantic views for dynamic Android malware analysis.” in
23rd USENIX Security Symposium (Security ’14), 2012.
[64] S. J. Yang, J. H. Choi, K. B. Kim, R. Bhatia, B. Saltaformaggio,
and D. Xu, “Live acquisition of main memory data from Android
smartphones and smartwatches,” Digital Investigation, vol. 23, pp. 50–
62, 2017.
[65] N. Zhang, K. Sun, W. Lou, and Y. T. Hou, “CaSE: Cache-assisted secure
execution on ARM processors,” in 37th IEEE Symposium on Security
and Privacy (S&P ’16), 2016.