title:Diversity of forwarding paths in pocket switched networks
author:Vijay Erramilli and
Augustin Chaintreau and
Mark Crovella and
Christophe Diot
Diversity of Forwarding Paths in Pocket Switched
Networks
Vijay Erramilli
Dept. of Computer Science
Boston University
Boston, USA
PI:EMAIL
Augustin Chaintreau
Thomson Paris
Paris, France
PI:EMAIL
Mark Crovella
Dept. of Computer Science
Boston University
Boston, USA
PI:EMAIL
Christophe Diot
Thomson Paris
Paris, France
PI:EMAIL
ABSTRACT
Forwarding in Delay Tolerant Networks(DTNs) is a chal-
lenging problem. We focus on the speciﬁc issue of forward-
ing in an environment where mobile devices are carried by
people in a restricted physical space (a conference) and con-
tact patterns are not predictable. We show for the ﬁrst time
a path explosion phenomenon between most pairs of nodes.
This means that, once the ﬁrst path reaches the destination,
the number of subsequent paths grows rapidly with time, so
there usually exist many near-optimal paths. We study the
path explosion phenomenon both analytically and empiri-
cally. Our results highlight the importance of unequal con-
tact rates across nodes for understanding the performance
of forwarding algorithms. We also ﬁnd that a variety of
well-known forwarding algorithms show surprisingly similar
performance in our setting and we interpret this fact in light
of the path explosion phenomenon.
Categories and Subject Descriptors
H.1 [Information Systems Applications]: Models and
Principles
General Terms
Algorithms, Measurement, Performance
Keywords
Pocket Switched Networks, DTN, Forwarding, Path Diver-
sity
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’07, October 24–26, 2007, San Diego, California, USA.
Copyright 2007 ACM 978-1-59593-908-1/07/0010 ...$5.00.
1.
INTRODUCTION
Eﬀective forwarding in a delay tolerant network (DTN) is
strongly dependent on particular aspects of the setting, such
as the size of the physical space involved, and the degree to
which node-to-node contact and node mobility patterns are
predictable. We are concerned with understanding forward-
ing in a setting that has not been extensively studied to date:
human-carried mobiles moving in a restricted space with
high node and contact density. This situation corresponds
to individuals at conferences, around oﬃce spaces, and in so-
cial settings. Networks in these environments are examples
of Pocket Switched Networks (PSNs) [3, 9], in which both
mobility and multihop forwarding can be used to support
communication.
We believe that in order to design eﬀective forwarding
algorithms for PSNs, it is necessary to start by understand-
ing the opportunities for forwarding that exist. While some
work has already studied the performance of various for-
warding algorithms in PSNs, there is little understanding to
date on the nature of the forwarding problem in such set-
tings. In particular, little is known about the kinds of paths
(making use of both mobility and multiple hops) that exist
in PSNs.
In this paper we study the paths that are available for
forwarding in PSNs. We use as examples of the PSN set-
ting measurements of contacts between Bluetooth-enabled
Intel iMotes at recent Infocom and CoNext conferences. We
develop an eﬃcient method to enumerate all paths of inter-
est between nodes (iMotes) and apply it to these traces to
capture all paths of interest for a set of randomly generated
messages.
The most striking property of the collection of paths we
obtain is the presence of a phenomenon we term path explo-
sion. Path explosion refers to the case in which, once the
ﬁrst path reaches the destination the number of subsequent
paths grows rapidly with time, so there exist many near-
optimal paths. We ﬁnd that path explosion occurs for the
large majority of messages in our datasets.
To explore this eﬀect we build an analytic model describ-
ing how paths are created in a homogeneously mixing pop-
ulation and we use it to show how path explosion arises.
However our homogeneous model does not explain all as-
pects of the phenomena observed in our data. In order to
understand the nature of forwarding paths more accurately,
we show that it is critically necessary to take into account
the diﬀerent contact rates exhibited by diﬀerent nodes in
the population. We ﬁnd that it is useful to characterize
the source and destination as either high contact rate (‘in’)
nodes or low contact rate (‘out’) nodes. We show that when
the contact rates of the source and destination nodes are
taken into account, that the empirical properties of paths
and the path explosion process can be understood more com-
pletely.
Once we understand the nature of paths available for for-
warding, it is easier to interpret the behavior of forwarding
algorithms. Using our traces, we evaluate a range of diﬀerent
forwarding algorithms that are appropriate for DTNs. We
ﬁnd the surprising result that forwarding algorithms with
very diﬀerent strategies nonetheless show remarkably sim-
ilar performance in terms of message delivery success rate
and average message delivery delay.
In fact we ﬁnd that
the particular choice of routing algorithm does not have a
strong impact on delay or success rate for our data. We show
that these results can be understood in the context of the
path explosion phenomenon. Furthermore, understanding
the presence of path explosion, and the particular details of
how it occurs between combinations of ‘in’ and ‘out’ nodes,
allows us to understand how eﬃcient message delivery can
take place in these settings.
2. RELATED WORK
Our work studies the set of paths available for forwarding
in Pocket Switched Networks. While little work to date
has studied the forwarding paths themselves, researchers are
beginning to recognize that the movements of individuals
carrying mobile nodes create contact patterns that are not
well modeled using uniform or homogeneous assumptions [1,
15].
Nonetheless, to date most forwarding algorithms have
been analyzed under the assumption that contact rates be-
tween nodes are homogeneous [6, 7, 17, 18]. Likewise, the
most common mobility model used for forwarding evalua-
tion is random waypoint [2] in which all nodes’ speeds and
directions are drawn from the same distributions. In con-
trast, our work shows that it is the diﬀerences in behavior
of nodes in the network that is key to understanding the
performance of forwarding in our setting. The closest work
to our paper deals with the heterogeneity of inter-contact
time distributions and its implications for routing [5]. The
authors show that if the distributions of inter-contact times
are homogenous and exponential then no forwarding scheme
will be able to make practical use of past contact informa-
tion. However if the rates are heterogenous, then past infor-
mation can help in predicting future behavior and can thus
help improve the performance of forwarding algorithms.
One of the main results in our work is that for our
datasets, a wide variety of forwarding algorithms perform
equally well in terms of success rate and delay. Among the
forwarding algorithms we consider, we use epidemic forward-
ing [19] to study the path explosion phenomenon as well as
to obtain upper bounds on performance. Among the fac-
tors we consider in comparing other forwarding algorithms
are the use of past contact history, as proposed in [11, 10,
13, 8]. Another factor we consider is whether the algorithm
bases decisions on single-hop performance or multi-hop per-
formance. The authors of [11] propose basing forwarding
decisions on Minimum Estimated Expected Delay (MEED)
where the delay between nodes is calculated using past con-
tact history over a sliding window. In contrast, Grossglauser
et al [6] use only the last encounter time between nodes as
a basis for forwarding decisions. We consider both these
alternatives in our evaluation.
Many papers have looked at the performance of forward-
ing algorithms based on wireless measurements, but few
have looked at forwarding in a dense environment with hard-
to-predict contact patterns. Exceptions are [9, 4], which use
data similar to ours. However those papers are concerned
with studying forwarding algorithms rather than the nature
of forwarding paths themselves, which is the focus of our
work.
3. DATA
As described in our introduction our study is based on em-
pirically collected data sets. These data sets were collected
using short-range Bluetooth enabled devices (iMotes [4])
carried by individuals. These devices perform an inquiry-
scan every 120 secs and log each response to the inquiry as
a contact. A contact record includes the MAC address of
the device that responded, as well as the start time and the
end time of the contact. More details about the devices and
the datasets, including synchronization issues can be found
in [16].
Initial analysis of the data showed that contact activity
varied considerably over the course of each day. The analyses
in our paper are based on the assumption of approximately
constant contact rates over time. Therefore we selected 3
hour periods for which visual inspection indicated that con-
tact rates were relatively stable. Although a contact event
need not be symmetric, we assume they are and modify the
datasets accordingly. We note that contacts are not synchro-
nized over the entire network, so even though the scanning
rate of nodes is set to 120 secs, we observe contact activity
every 10 sec.
We also note that most contacts observed in our datasets
are very short and we do not consider contact durations in
this work. We leave this to future work.
Empirical results in this paper are based on the following
data sets:
Infocom 2006: This data set consists of logs taken dur-
ing during the conference Infocom 2006. There are 98 nodes
in total; with 20 nodes are stationary nodes distributed
within the conference venue and the remaining nodes are
distributed to conference participants who carried them for
4 days from 24th April 2006 to 28th April 2006. The speciﬁc
time periods we study are 25 April (Tuesday) 9AM-12PM
and 3PM-6PM on the same day.
Conext 2006: We collected similar data sets at Conext
2006 which was held from 4 Dec 2006 to 7 Dec 2006. 78
nodes were distributed to conference participants and the re-
maining 20 nodes were placed around the conference venue.
The data sets we use are 4 Dec(Monday), 9AM-12PM and
3PM-6PM.
We replicated portions of our analyses on datasets taken
at Infocom 2005 [4]. All of our results in this paper were
consistent with the analyses. However we omit details for
lack of space.
4. PATH EXPLOSION
A forwarding algorithm solves a decentralized search
problem—it searches for a short path between a source and
destination node, starting at a given point in time. This path
exists in space and time, and its duration is the amount of
time between message generation and message delivery. In
order to understand how hard the search problem is for PSN
settings, we start by studying the solution space.
Given a set of nodes M with |M| = N , and a continuous
time index 0 ≤ t < tmax, we deﬁne a path as a sequence of
tuples:
((x1, t1), (x2, t2), . . . , (xk, tk))
where for all i, ti ≤ ti+1, xi ∈ M, and
. . . , (xi, ti), (xi+1, ti+1), . . .
may be present only if xi is in contact with node xi+1 at time
ti+1. Each tuple in the sequence is a hop and the length of
a path is the number of hops it contains.
We assume that communication occurs via messages
which are transmitted in whole from node to node in zero
elapsed time. Messages travel along paths, i.e., they are
only transmitted between nodes that are in contact. For
any source σ ∈ M and destination δ ∈ M a successful mes-
sage delivery beginning at time t1 can occur if there is a
path
((σ, t1), (x2, t2), . . . , (δ, tk)).
The most basic goals of a forwarding algorithm are, given
σ, t1, and δ: (a) to ﬁnd such a path if it exists; and (b) to
ﬁnd the path with shortest-achievable duration if more than
one path exists. We use PA(σ, δ, t1) to denote the fact that
forwarding algorithm A can ﬁnd a path from (σ, t1) to (δ, tk)
for some tk < tmax. If forwarding algorithm A ﬁnds at least
one path, we denote the duration of the shortest-found path
(tk − t1) as TA(σ, δ, t1).
Our concern centers on the performance of forwarding al-
gorithms in the PSN setting. We deﬁne the performance of
forwarding algorithm A as the average delay
DA = E [TA(σ, δ, t1)| PA(σ, δ, t1)]
ˆ
˜
and the success rate
SA = E
I{PA(σ,δ,t1)}
when σ and δ are chosen uniformly at random over M and
t1 is chosen uniformly at random over [0, tmax).
Note that our formulation of the problem does not con-
sider the costs of forwarding: for example, power or storage
consumption. Reasonable secondary goals of a forwarding
algorithm might be to minimize costs. However our focus
is on understanding what alternatives in terms of paths are
available for use by a forwarding algorithm. After obtaining
an understanding of what paths are available, it is easier to
concentrate on minimizing costs.
4.1 Path Enumeration
As discussed in Section 2, many previous studies of for-
warding algorithms have looked at forwarding performance
in speciﬁc settings. However, our work takes a diﬀerent ap-
proach by ﬁrst empirically characterizing the set of paths
that are available for use by forwarding algorithms. To ac-
complish this properly, there are a number of speciﬁc con-
siderations.
First, it is important to specify the characteristics that are
expected of all forwarding algorithms, because these deﬁne
the set of paths of interest. We assume that under any
reasonable forwarding algorithm, a node holding a message
for a destination node will deliver that message whenever it
encounters the destination. We call this the assumption of
minimal progress.
We also restrict our attention only to loop-free paths, i.e.,
paths in which no node appears more than once. We make
this restriction because if looping paths are considered, then
an arbitrarily large number of paths may be generated sim-
ply by following a loop a varying number of times. One
can imagine a scenario where due to high mobility a node
is encountered more than once over time and hence can po-
tentially show up in a path multiple times. Enumerating
such cases does not expose truly distinct forwarding paths.
While looping paths may occur in practice this is not a con-
cern, because disregarding such looping paths means that
our counting results are conservative—so in fact even more
paths may be present than our results indicate. For a similar
reason, we assume nodes have inﬁnite buﬀers and we do not
consider paths that may be created because a node is forced
to drop a message. Thus, once a node receives a message it
holds the message forever.
A path respects minimal progress and loop avoidance if
it does not contain more than one instance of any node,
and the destination appears only at the end of the path (if
at all). Furthermore, the assumption of minimal progress
combined with unlimited message holding implies a more
subtle condition, which we call ﬁrst preference. Consider a
path
P = ((σ, t1), . . . , (xi, ti), . . . , (xj, tj ), (δ, tk)).
If it also happens that xi encounters the destination δ at
time t(cid:2) < tk, then the following is also a path:
)).
= ((σ, t1), . . . , (xi, ti), (δ, t(cid:2)
P (cid:2)
Note that no forwarding algorithm respecting minimal
progress would take path P rather than path P (cid:2)
. Thus path
P is not a ﬁrst preference path. Any path respecting loop
avoidance and minimal progress (including ﬁrst preference)
is a valid path.
Second, in moderately-large datasets (such as those we
work with) a complete enumeration of all valid paths with
a given (σ, δ, t1) is prohibitively expensive. Therefore a key
element of our approach is eﬃcient enumeration of the most
important paths. Our strategy for tackling this problem has
two steps:
1. Deﬁne the problem as one of path enumeration on a
space-time graph (deﬁned below) and
2. at each time step, use dynamic programming to main-
tain the (up to) k shortest valid paths reaching each
node. By ‘shortest’ we mean the path with the least
number of hops.
This strategy allows us to determine the optimal path
reaching the destination, that is, the path with shortest
achievable duration under any forwarding algorithm. We
denote the duration of the optimal path T (σ, δ, t1) and note
that it is the minimum duration path found by epidemic
forwarding, i.e.,
T (σ, δ, t1) = min
TA(σ, δ, t1) = TEpidemic(σ, δ, t1).
A
t=0
1
t=1
1
2
2
3
3
Figure 1: Example space-time graph.
This strategy also allows us to determine each subsequent
valid path that reaches the destination, up until the point
at which k or more valid paths reach the destination in a
single timestep.
To recap we want to answer the following questions: How
many paths exist between a source-destination node pair?
What are the properties of these paths? To organize the
search process, we convert the sequence of node contacts
into a space-time graph, which is a special kind of directed
weighted graph. Our use of the space-time graph is based
on [14].
Time is discretized in increments of Δ. In all our work
we use Δ = 10 sec. Vertices in the space-time graph
are pairs (xi, T ) with xi ∈ M and T = cΔ for c ∈
{1, 2, . . . ,(cid:4)tmax/Δ(cid:5)}. Edges in the space-time graph come
in two kinds:
1. There is an edge from vertex (xi, T ) to (xj, T ) iﬀ node
xi was in contact with node xj at any time during
[T − Δ, T ). Such an edge has weight zero.
2. There is an edge from vertex (xi, T ) to (xi, T + Δ) for
all xi ∈ M. Such edges have unit weight.
For example, consider a network with three nodes. Nodes
1 and 2 are in contact during the ﬁrst timestep, while all
three nodes are in contact with each of the others during
the second timestep. Then the corresponding space-time
graph is as shown in Figure 1. The horizontal edges have
weight zero and the vertical ones have weight 1.
Given a space-time graph discretized by Δ and a message
deﬁned as (σ, δ, t1), we enumerate shortest paths using dy-
namic programming. The algorithm uses as its data struc-
ture an N × k array of paths, denoted P . It maintains the
following invariant: at any given timestep T = cΔ the entry
Pij is the jth shortest path reaching from (σ, t1) to (xi, t(cid:2)
)
for some t(cid:2) ∈ [T − Δ, T ). The algorithm is given in Figure 2.
4.2 Observations
Using the algorithm described in the previous subsection
we are able to enumerate paths for a given message with
(σ, δ, t1) up to the time when k paths reach the destination
in a single timestep. For any given message, we will use
Tn to denote the time at which the nth path reaches the
destination, in order of increasing delivery time.
Our results show that for many messages, the duration of
the optimal path can be quite long (thousands of seconds).
However the most striking aspect of our results is that in
the vast majority of cases, once the ﬁrst path reaches the
destination a very large number of additional paths reach the
destination soon thereafter – typically tens or a few hundreds
of seconds later. We refer to this phenomenon generically as
path explosion.