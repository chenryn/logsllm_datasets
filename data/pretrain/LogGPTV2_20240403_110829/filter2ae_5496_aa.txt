**作者：Feynman@深信服千里目安全实验室  
原文链接：**
## 一、组件介绍
### 1.1 基本信息
ThinkPHP是一个快速、兼容而且简单的轻量级国产PHP开发框架，诞生于2006年初，原名FCS，2007年元旦正式更名为ThinkPHP，遵循Apache
2开源协议发布，从Struts结构移植过来并做了改进和完善，同时也借鉴了国外很多优秀的框架和模式，使用面向对象的开发结构和MVC模式，融合了Struts的思想和TagLib（标签库）、RoR的ORM映射和ActiveRecord模式。
ThinkPHP可以支持windows/Unix/Linux等服务器环境，正式版需要PHP
5.0以上版本支持，支持MySql、PgSQL、Sqlite多种数据库以及PDO扩展，ThinkPHP框架本身没有什么特别模块要求，具体的应用系统运行环境要求视开发所涉及的模块决定。
### 1.2 版本介绍
ThinkPHP发展至今已有14年历史，其核心开发版本已有数十个之多。2009年10月，ThinkPHP
2.0版本完成了新的重构和飞跃，成就了这一划时代的版本，从此，ThinkPHP就基于此开始了长达十多年的演化与发展。ThinkPHP发展至今，核心版本主要有以下几个系列，即ThinkPHP
2系列、ThinkPHP 3系列、ThinkPHP 5系列、ThinkPHP 6系列，各个系列之间在代码实现及功能方面，有较大区别。其中ThinkPHP
2以及thinkPHP 3系列已经停止维护，ThinkPHP 5系列现使用最多，而ThinkPHP 3系列也积累了较多多的历史用户。版本细分如下图所示：
### 1.3 使用量及使用分布
根据全网数据统计，使用ThinkPHP的网站多达15万余个，其中大部分集中在国内，约占使用量的75%以上。其中，浙江、北京、山东、广东四省市使用量最高，由此可见，ThinkPHP在国内被广泛应用。通过网络空间搜索引擎的数据统计和柱状图表，如下图所示。
(数据来源：[Zoomeye](https://www.zoomeye.org/))
## 二、高危漏洞介绍
通过对ThinkPHP漏洞的收集和整理，过滤出其中的高危漏洞，可以得出如下列表。
漏洞名称 | 漏洞ID | 影响版本 | 漏洞披露日期  
---|---|---|---  
ThinkPHP 2.x/3.0 远程代码执行漏洞 |  | ThinkPHP 2.x,3.0 | 2012  
ThinkPHP 3.2.4 SQL注入漏洞 | CVE-2018-18546 | ThinkPHP <= 3.2.4 | 2018  
ThinkPHP 3.2.4 SQL注入漏洞 | CVE-2018-18529 | ThinkPHP <= 3.2.4 | 2018  
thinkphp 3.1.3 s parameter注入漏洞 | CVE-2018-10225 | ThinkPHP <= 3.1.3 | 2018  
ThinkPHP 3.x update方法 SQL注入漏洞 |  | ThinkPHP <3.2.4 | 2017  
ThinkPHP 3.x orderby方法 SQL注入漏洞 |  | ThinkPHP <3.2.4 | 2017  
ThinkPHP 3.x where SQL注入漏洞 |  | ThinkPHP <3.2.4 | 2018  
ThinkPHP 3.x exp SQL注入漏洞 |  | ThinkPHP <3.2.4 | 2018  
ThinkPHP 3.x bind SQL注入漏洞 |  | ThinkPHP <3.2.4 | 2018  
ThinkPHP SQL注入漏洞--paraData方法 |  | ThinkPHP 5.0.13-5.0.15 | 2018  
ThinkPHP SQL注入漏洞--paraArraryData方法 |  | ThinkPHP 5.1.6-5.1.7 | 2018  
ThinkPHP SQL注入漏洞--parseWhereItem方法 |  | ThinkPHP 5 | 2018  
ThinkPHP SQL注入漏洞--parseOrder方法 |  | ThinkPHP 5.1.16-5.1.22 | 2018  
ThinkPHP SQL注入漏洞--orderby方法 |  | ThinkPHP 5.0.0-5.0.21  
Thinkphp 5.1.3-5.1.25 | 2018  
ThinkPHP cacheFile变量文件包含漏洞 |  | ThinkPHP 5.0.0-5.0.18 | 2018  
ThinkPHP cache缓存函数远程代码执行漏洞 |  | ThinkPHP 5.0.0-5.0.10 | 2017  
**ThinkPHP 5远程代码执行漏洞** |  | ThinkPHP 5.0.7-5.0.22  
ThinkPHP 5.1.0-5.1.30 | 2018  
**ThinkPHP 5远程代码执行漏洞** |  | ThinkPHP 5.0.0-5.0.23  
ThinkPHP 5.1.0-5.1.30 | 2019  
ThinkPHP 6 任意文件操作漏洞 |  | ThinkPHP 6.0.0-6.0.1 | 2020  
ThinkPHP 6 反序列化漏洞 |  | ThinkPHP 6.0.0-6.0.1 | 2020  
中可以看出，ThinkPHP近年出现的高风险漏洞主要存在于框架中的函数，这些漏洞均需要在二次开发的过程中使用了这些风险函数方可利用，所以这些漏洞更应该被称为框架中的风险函数，且这些风险点大部分可导致SQL注入漏洞，所以，开发者在利用ThinkPHP进行Web开发的过程中，一定需要关注这些框架的历史风险点，尽量规避这些函数或者版本，则可保证web应用的安全性。
从上表数据来看，ThinkPHP 3系列版本的漏洞多是是2016/2017年被爆出，而ThinkPHP
5系列版本的漏洞基本为2017/2018年被爆出，从2020年开始，ThinkPHP 6系列的漏洞也开始被挖掘。
其中，2018年与2019年交替之际，ThinkPHP爆出了 **两枚重量级**
的远程代码执行漏洞，这两枚漏洞均不需要进行二次开发即可利用，攻击者可通过框架中已有逻辑，直接构造恶意流量，在服务器中执行任意代码，获取服务器的最高权限。时至今日，这两枚漏洞的利用在全网中仍非常活跃，且被誉为ThinkPHP框架中的“沙皇炸弹”。
## 三、漏洞利用链
### 3.1、暴露面梳理
根据ThinkPHP的历史高位漏洞，梳理出分版本的攻击风险点，开发人员可根据以下图标，来规避ThinkPHP的风险版本，如下ThinkPHP暴露面脑图。
### 3.2、利用链总结
基于暴露面脑图，我们可以得出几种可以直接利用的ThinkPHP框架漏洞利用链，不需要进行二次开发。
#### 3.2.1、ThinkPHP 2.x/3.0 GetShell
**ThinkPHP低于3.0 - GetShell**
  * ThinkPHP 低版本可以使用以上漏洞执行任意系统命令，获取服务器权限。
#### 3.2.2、ThinkPHP 5.0 GetShell
**ThinkPHP 5.0.x - GetShell**
  * 首先明确ThinkPHP框架系列版本。
  * 根据ThinkPHP版本，如是5.0.x版本，即可使用ThinkPHP 5.x远程代码执行漏洞，无需登录，即可执行任意命令，获取服务器最高权限。
#### 3.2.3、ThinkPHP 5.1 GetShell
  * **ThinkPHP 5.1.x - GetShell**
  * 首先明确ThinkPHP框架系列版本。
  * 根据ThinkPHP版本，如是5.1.x版本，即可使用ThinkPHP 5.x远程代码执行漏洞1，无需登录，即可执行任意命令，获取服务器最高权限。
  * 如需使用ThinkPHP 5.x远程代码执行漏洞2，则需要index.php文件中跳过报错提示，即 文件中有语句：“error_reporting(0);”，故该漏洞在5.1.x系列版本利用需要满足以上前提，利用较难。
## 四、高可利用漏洞分析
从高危漏洞列表中，针对ThinkPHP不需二次开发即可利用的高危漏洞进行深入分析。
### 4.1、ThinkPHP 2.x/3.0远程代码执行漏洞
#### 4.1.1、漏洞概要
  * 漏洞名称：ThinkPHP 2.x/3.0远程代码执行
  * 参考编号：无
  * 威胁等级：高危
  * 影响范围：ThinkPHP 2.x/3.0
  * 漏洞类型：远程代码执行
  * 利用难度：简单
#### 4.1.2、漏洞描述
ThinkPHP是为了简化企业级应用开发和敏捷WEB应用开发而诞生的开源MVC框架。Dispatcher.class.php中res参数中使用了preg_replace的/e危险参数，使得preg_replace第二个参数就会被当做php代码执行，导致存在一个代码执行漏洞，攻击者可以利用构造的恶意URL执行任意PHP代码。
#### 4.1.3、漏洞分析
漏洞存在在文件 `/ThinkPHP/Lib/Think/Util/Dispatcher.class.php` 中，ThinkPHP
2.x版本中使用preg_replace的/e模式匹配路由，我们都知道，preg_replace的/e模式，和php双引号都能导致代码执行的，即漏洞触发点在102行的解析url路径的preg_replace函数中。代码如下：
该代码块首先检测路由规则，如果没有制定规则则按照默认规则进行URL调度，在preg_replace()函数中，正则表达式中使用了/e模式，将“替换字符串”作为PHP代码求值，并用其结果来替换所搜索的字符串。
正则表达式可以简化为“\w+/([\^\/])”，即搜索获取“/”前后的两个参数，{}里面可以执行函数，然后我们在thinkphp的url中的偶数位置使用${}格式的php代码，即可最终执行thinkphp任意代码执行漏洞，如下所示：