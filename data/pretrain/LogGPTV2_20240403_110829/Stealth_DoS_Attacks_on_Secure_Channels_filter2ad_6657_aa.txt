title:Stealth DoS Attacks on Secure Channels
author:Amir Herzberg and
Haya Shulman
Stealth DoS Attacks on Secure Channels
Amir Herzberg∗
and
Haya Shulman†
Bar Ilan University
Department of Computer Science
Ramat Gan, 52900, Israel
Abstract
1. Introduction
We initiate study of the use of ‘secure tunnel’ proto-
cols, speciﬁcally IPsec, and its availability and perfor-
mance guarantees to higher-layer protocols, in particular
TCP, against Denial/Degradation of Service (DoS) attacks.
IPsec is designed to provide privacy and authentication
against MITM attackers, and employs an anti-replay mech-
anism to ensure performance. For our analysis, we deﬁne
a new family of adversaries, the stealth denial and degra-
dation of service (DoS) adversaries. These adversaries are
weaker than the classical MITM adversary, and may be of
interest in other works. We analyse their ability to launch
(DoS) attacks on secure channels, and show realistic am-
pliﬁcation attacks, disrupting TCP communication over se-
cure VPNs using IPsec. In particular, we show that anti-
replay mechanism is critical for performance by launching
a DoS attack on communication over IPsec without anti-
replay window. We present attacks exploiting insufﬁcient
IPsec anti-replay window size, and show how to calculate
correct window size. Finally we present attacks on IPsec
with correctly adjusted anti-replay window size thus show-
ing that even large anti-replay window does not ensure per-
formance to TCP ﬂows. We then suggest a ﬁx to TCP in
IPsec gateway designed to prevent the above attacks, and
to provide secure channel immune to degradation and other
DoS attacks. Our solution involves changes (only) to the
sending gateway machines running IPsec.
In addition to
their practical importance, our results also raise the chal-
lenge of formally deﬁning secure channels immune to DoS
and degradation attacks, and providing provably-secure im-
plementations.
∗PI:EMAIL
†PI:EMAIL
Denial/Degradation of service (DoS) attacks pose an
ever growing threat to Internet services and applications.
Secure channel protocols, with IPsec [27, 38] being the pre-
dominant one, are used to securely connect virtual private
networks (VPN), i.e., authenticate data and origin, ensure
conﬁdentiality, and performance. IPsec is designed to pro-
tect against man-in-the-middle (MITM) adversaries that can
eavesdrop on the communication and inject spoofed seg-
ments into the message stream. It is widely believed, and
also speciﬁed e.g., in [27], that IPsec also defends higher-
layer trafﬁc from DoS attacks when attacker has limited
resources (e.g., can only block, inject or reorder a limited
number of packets). Defense against DoS attacks is often
an important consideration in adopting IPsec for protecting
a VPN (rather than say using SSL/TLS [22, 14]). We show
that this belief is not precise and that IPsec does not deliver
on its performance guarantees, by presenting several DoS
attacks on TCP when used over IPsec.
TCP [35] is the transport layer communication protocol
that underlies most Internet applications, e.g., web, mail,
ﬁle transfer, remote access. TCP provides a reliable and
connection oriented service to its users, allows fair sharing
of network resources with mechanisms for ﬂow and con-
gestion control. However, TCP does not provide security
guarantees against network adversaries.
Our attacks raise the following question: what are the
properties that secure channel should satisfy to protect
against performance degradation attacks? Existing works
do not analyse the properties that secure channel protocols
should possess to protect against denial of service attacks.
There are works that attempt to deﬁne what secure channel
is, e.g., [12], but they fail to capture performance analysis
of secure channel, i.e., efﬁciency and resistance to denial of
service attacks. Herzberg and Yoffe [21] present a frame-
work that allows to deﬁne speciﬁcations that capture such
properties, and suggest further research on deﬁning secure
channel protocols within that framework. However, they
do not present such speciﬁcations for DoS-preventing se-
cure channel protocols, or demonstrate that existing secure
channel protocols fail to protect against DoS. Our work pro-
vides such demonstration; we hope that it will prompt re-
search leading to such speciﬁcations and provably-secure
DoS-preventing channels. Speciﬁcally, we show that al-
though IPsec employs an anti-replay mechanism that is tar-
geted at ensuring performance by detecting and discarding
spoofed duplicate packets injected by a MITM adversary, it
fails to counter denial/degradation of service (DoS) attacks.
We show DoS attacks that exploit congestion control mech-
anism of TCP.
In each section we present different
techniques for
exploiting the vulnerabilities of TCP congestion control
mechanism, which rely on slightly different adversarial
model. The attacks we present rely on standard behaviour of
correctly implemented TCP congestion control mechanism.
We then analyse the impact that these attacks can have on
TCP performance (when run over IPsec). In addition, we
demonstrate the necessity for and motivate the anti-replay
mechanism of IPsec, by presenting simple attacks on TCP
congestion control mechanism when IPsec is used without
the anti-replay window. We also investigate the correct size
of IPsec’s anti-replay window, and show attacks when in-
correct window size is used. We also show how to compute
correct anti-replay window size. Yet, we show degradation
of service attacks by stealth adversary (deﬁned in Section
2.2), even when sufﬁcient anti-replay window size is used.
In Section 5.3 we discuss solutions to combat the re-
ordering attacks (whether by malicious adversary, or due to
benign network congestion), and present a ﬁx in IPsec gate-
way, to address the reordering of packets. Our goal is not
to require changes in the TCP protocol in every host sepa-
rately, but to apply the modiﬁcation to the ﬁrewall, and as
a result to protect subnet of hosts. Many private networks
connected to the Internet are protected by ﬁrewalls. Firewall
protection is based on the idea that all packets destined to
hosts behind a ﬁrewall have to be examined by the ﬁrewall.
When applied to ﬁrewall, our mechanism requires minimal
changes to existing implementations, to combat the attacks
presented in the rest of this paper. Our solution is comprised
of two phases: ﬁrst detection and then prevention of an at-
tack, and is based on delaying congestion notiﬁcation, i.e.,
duplicate ACKs, and discarding if turned out to be false.
Our stealth attacks can be applied to other tunneling pro-
tocols, e.g., to the widely used tunneling Generic Routing
Encapsulation (GRE) mechanism, see [15]. According to
[15], GRE speciﬁes a protocol for encapsulation of an arbi-
trary protocol over another arbitrary network layer protocol,
and is a common way to achieve tunneling of IP encapsu-
lated inside IP. GRE does not provide authentication, i.e.,
it is vulnerable to spooﬁng adversary; to perform denial of
service against GRE, an attacker can simply send a segment
with a higher sequence number. To prevent this type of at-
tacks, it is suggested to run GRE over IPsec, however, as we
show in this work, IPsec does not protect against this type
of attacks.
In all our attacks we assume a stealth attacker model,
presented in Section 2.2, that can with minimal effort sig-
niﬁcantly degrade the performance of communication over
TCP. Our attacker may be restricted in its eavesdropping ca-
pability (may be able to eavesdrop on one network segment
but not the other), as well as in the number of (spoofed)
packets that it can inject. For instance, in wireless net-
work attacker can only eavesdrop on wireless communica-
tion, and may be able to inject segments in the wired access
network. Often attackers may be limited in their spooﬁng
ability, e.g., attacker is able to disrupt communication by
inﬁltrating a small device which has a limited power.
In
addition, attackers typically prefer to avoid detection, thus
spooﬁng a limited number of segments. Note that our at-
tacks exploit the congestion control of TCP, by injecting
duplicate segments. This strategy allows attacker to evade
DoS detection mechanisms, e.g., consider a sequence of
routers on the path between source and destination, where
the attacker controls one of the routers. The router simply
duplicates some of the segments that traverse it, and reroute
them via an alternative path. Thus the malicious router can-
not be traced back. On the other hand, if the router sim-
ply dropped occasional segments, this could be detected,
and the attack would be traced back to the malicious router.
For more details on attacks on wireless networks by MITM
adversary (and limitations) can be found in [33]. Similar
attacker model was considered in [36], which investigated
an Explicit Congestion Notiﬁcation (ECN) with IPsec. We
discuss this brieﬂy in Related Works in Section 1.2.
1.1. Other DoS Attacks on IPsec
In this work we consider DoS attacks by stealth attack-
ers, that can eavesdrop and spoof packets, yet even weaker,
blind spooﬁng, attacker can mount a DoS on IPsec. For
instance, it is known that fragmentation can expose IPsec
to DoS attacks, e.g., IPsec cannot prevent attacks on frag-
ments’ buffer at the recipient if fragmentation is allowed.
Speciﬁcally, since authentication is performed prior to frag-
mentation, spooﬁng attacker could launch a DoS attack by
swamping the receiving gateway with (maliciously crafted)
IP fragments, which could not be reassembled, thus legiti-
mate packets could not be accepted, e.g., in [25]. This attack
is made possible due to the fact that IPsec reassembles the
fragments prior to authenticating them, and the attack can
be prevented by deﬁning minimal fragment size and not al-
lowing fragmentation; another solution is to only allow pre-
fragmentation, i.e., fragmentation by IPsec gateway prior to
applying IPsec processing on the outgoing packet.
Another attack is returning an ICMP port unreachable er-
ror message which would force the sender to reduce frag-
ments’ size until no (or minimal size, e.g., Byte) packets
can be exchanged, discussed in [16]. This attack is pre-
vented trivially against a spooﬁng attacker; IPsec packets
include the security parameters index (SPI), used to iden-
tify the security association (SA) used for the connection,
in packets’ headers. In addition, an ICMP port unreachable
error message includes the 8 bytes of the original packet
(which has the SPI). The SPI ﬁeld is secret and random,
therefore cannot be known to spooﬁng attacker, and if in-
valid SPI is received it is ignored by the receiving IPsec
gateway. Yet this solution does not hold against our stealth
attacker since it can observe the SPI value in packets’ head-
ers, and can thus forge a correct and valid SPI. However,
this attack (as opposed to ours) can also be prevented, e.g.,
by deﬁning minimal fragment size, and once reaching that
size gateway would ignore further ICMP port unreachable
messages. Another solution, against a stealth attacker (that
cannot drop packets) can be to check if ACKs arrive, in re-
sponse to transmitted messages, e.g., like in our our stealth
attacks, then ignore the ICMP port unreachable messages.
DoS attacks can also be launched on IKE (key establish-
ment protocol of IPsec), which was designed to run over
UDP in order to avoid DoS attacks on TCP. In [25], the au-
thors show an attack on IKE, by exploiting fragmentation.
A vulnerability of IPsec to DoS when using Explicit
Congestion Notiﬁcation (ECN) is investigated in [36].
If
the IPsec gateway at the exit of the tunnel does not copy
the ECN bit, then it ruins the ECN mechanism; on the other
hand, if the gateway copies the ECN bit, then an attacker
can degrade performance. The attack can be launched since
the authentication that IPsec performs does not protect the
ECN bit. However, there is noanalysis of this attack; such
analysis is rather similar to the analysis we present, of sim-
ilar attacks. In addition, our attacks work even if ECN bit is
not used, as well as if the recommendation of the RFC not to
copy the ECN bit from tunneled packets is followed. Note,
that the authors of [36] consider similar adversarial model
to ours, i.e., they consider a ‘weaker MITM’ attacker model
like the one we present and deﬁne in Section 2.2, although
we also consider duplications, and do not consider modiﬁ-
cations to legitimate packets, e.g., turning on/off ECN bit.
1.2. Related Works
1.2.1. Denial/Degradation-of-Service (DoS) Attacks
Denial/Degradation of Service (DoS) attacks, and espe-
cially Distributed DoS (DDoS) attacks, pose a serious threat
to Internet applications. In the last years, DoS attack meth-
ods and tools are becoming more sophisticated, effective,
and also more difﬁcult to trace to the real attackers. We
brieﬂy recap several types of DoS attacks, using different
(roughly, diminishing) adversarial capabilities.
The basic distributed denial of service attack is brute
force or ﬂooding, see e.g.
[23, 13], and SYN attack in
[37]. Flooding DoS attacks typically utilise a large num-
ber of compromised nodes in order to consume network re-
sources by ﬂooding an Internet link, and thus shutting off
TCP ﬂows. The shortcomings of this attacks from the at-
tacker perspective is that they are easy to detect due to high
volume of uniform trafﬁc, e.g., network administrators can
identify performance degradation in infected machines and
eliminate the vulnerabilities that allowed the attack. Alter-
nately, an ISP can block the malicious trafﬁc. In addition,
attacker may also be blocked by rate controls or limited
by bandwidth of a zombie. However, recently it has been
shown that attackers can achieve similar outcomes without
overloading the system in a persistent manner, using attacks
such as described next (and such as the attacks investigated
in this paper). TCP targeted (low-rate) Shrew attacks, [29]
exploit the retransmission timeout (RTO) of TCP, by trans-
mitting short trafﬁc pulses of RTT scale length, of low av-
erage volume of RTO scale periods, causing TCP ﬂows to
continually timeout. The result is near zero TCP through-
put. Due to the nature of the attack trafﬁc it can be hard
to distinguish it from other legitimate trafﬁc, e.g., video.
Low-rate TCP attacks are much harder to detect, and re-
quire much weaker attacker capabilities, i.e., the attacker
can simply generate bursty UDP ﬂows of low average rate.
Low-rate TCP targeted Reduction of Quality (RoQ) at-
tacks are another type of low-rate TCP attack, introduced in
[18, 19, 32], where attacker exploits the TCP AIMD mecha-
nism causing TCP performance degradation. The main dif-
ference is that RoQ attacks do not require precise timing
(to tune to the RTO frequency). The RoQ attacks are even
more difﬁcult to detect and block, since they do not operate
at speciﬁc intervals. In [32] authors suggest a type of at-
tacks similar to RoQ attacks, i.e., the pulsing attacks, which
are targeted at TCP applications. The pulsing attacks can
be categorised into two models: timeout-based attacks, and
AIMD-based attacks, depending on the timing of the attack
pulses w.r.t. congestion window of TCP. During the attack,
pulses of malicious trafﬁc are sent to a victim, resulting in
packet losses. Authors of [32] show that even a small num-
ber of attack pulses can cause signiﬁcant throughput degra-
dation. Recently, in [1], a new denial of service attacks,
dubbed JellyFish, were exhibited. JellyFish attacks target
TCP congestion control mechanism of TCP ﬂows, by hav-
ing the relay nodes misorder, delay or drop packets which
they are expected to forward.
Low rate TCP targeted attacks can be prevented by using
secure channel protocol between the gateways, e.g., LOT in
[16], and using mechanisms that provide quality of service
by differentiating trafﬁc, e.g., DiffServ [7]. Namely, when
employing DiffServ, ﬂows are given different priority, and
ﬂows over a secure channel can be given higher priority,
and will be reserved space in routers buffers. Alternately,
non-conforming packets can be dropped or given a lower
priority and placed in different queues.
1.2.2. Making TCP Robust to Reordering
Some of our attacks, e.g., Section 5, are based on (ma-
licious) reordering of network packets, and we propose a
ﬁx to TCP in IPsec gateways. Our solution may also be
integrated in TCP in each host, to handle benign network
reordering (yet further research is required to present ex-
perimental work and analysis).
A wide range of TCP modiﬁcations has been proposed to
improve robustness to reordering, e.g., [8, 41, 10, 6, 40, 11];
see a survey in [30] and an analysis in [8]. Existing works
focus on benign network reordering. In [4] authors describe
a collection of techniques that provide one way reordering
measurements in both directions between a client and most
TCP based servers on the Internet, and propose a metric
to summarise reordering activity. In [30] the authors con-
sider the impact of packet reordering on TCP, and survey
approaches to handle the issue. Authors identify two ap-
proaches: the ordinal approach and the temporal approach.
Eifel and DSACK based algorithms are experimental RFCs.
1.2.3. Internet Protocol Security (IPsec)
Internet Protocol Security (IPsec), in [27], provides net-
work layer security against MITM attackers, offering pri-
vacy and/or integrity to the exchanged communication, and
authenticates source of IP packets, i.e., prevents spooﬁng of