**Dmitry V. Zemnitskiy** opened **SPR-3849** and provided the following comments:

---

### Issue Description

This issue is a continuation of discussions from the Spring Framework forum:
- [Thread 1](http://forum.springframework.org/showthread.php?p=140845)
- [Thread 2](http://forum.springframework.org/showthread.php?t=31531)

I have tested the latest available versions of the following components:
- Spring Framework: 2.0.6
- Hibernate: 3.2.5
- Hibernate Entity Manager
- MS SQL Database (both MSDE and MS SQL Server 2000)
- JTDS Driver

The problem persists, even with declarative transactions and exception translation. Specifically, when a business manager class is annotated with `@Repository` and a business method is annotated with `@Transactional` (without nested transactions), an `UnexpectedRollbackException` is thrown due to an integrity violation exception. This occurs because the actual database operation and constraint verification are deferred to the `commit()` phase in MS SQL, similar to how it works in Oracle.

### Example Configuration

```java
// Example configuration code here
```

### Exception Stack Trace

```java
org.springframework.transaction.UnexpectedRollbackException: JPA transaction unexpectedly rolled back (maybe marked rollback-only after a failed operation); nested exception is javax.persistence.RollbackException: Error while committing the transaction
    at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:71)
    at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:433)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformtransactionManager.java:662)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:632)
    at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:314)
    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:117)
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:166)
    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
    at $Proxy34.handleChangeMsisdn(Unknown Source)
    at com.vyke.mobile.server.io.ConnectionHandlerImpl.packetReceived(ConnectionHandlerImpl.java:254)
    ... removed application code calls ...
    at java.lang.Thread.run(Unknown Source)

Caused by: org.hibernate.exception.ConstraintViolationException: could not update: [com.vyke.mobile.server.domain.Client#4]
    at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:71)
    at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)
    at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2425)
    at org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2307)
    at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2607)
    at org.hibernate.action.EntityUpdateAction.execute(EntityUpdateAction.java:92)
    at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:250)
    at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:234)
    at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:142)
    at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)
    at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)
    at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)
    at org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:338)
    at org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106)
    at org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:54)
    ... 29 more

Caused by: java.sql.SQLException: Violation of UNIQUE KEY constraint 'UQ__Client__72C60C4A'. Cannot insert duplicate key in object 'Client'.
    at net.sourceforge.jtds.jdbc.SQLDiagnostic.addDiagnostic(SQLDiagnostic.java:365)
    at net.sourceforge.jtds.jdbc.TdsCore.tdsErrorToken(TdsCore.java:2781)
    at net.sourceforge.jtds.jdbc.TdsCore.nextToken(TdsCore.java:2224)
    at net.sourceforge.jtds.jdbc.TdsCore.getMoreResults(TdsCore.java:628)
    at net.sourceforge.jtds.jdbc.JtdsStatement.processResults(JtdsStatement.java:525)
    at net.sourceforge.jtds.jdbc.JtdsStatement.executeSQL(JtdsStatement.java:487)
    at net.sourceforge.jtds.jdbc.JtdsPreparedStatement.executeUpdate(JtdsPreparedStatement.java:421)
    at org.hibernate.jdbc.NonBatchingBatcher.addToBatch(NonBatchingBatcher.java:23)
    at org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2403)
    ... 41 more
```

### Workaround

I was able to resolve the issue by verifying during the business method invocation if a conflicting record already exists in the database using an extra `SELECT` statement. However, this is a rather crude solution and highlights a significant problem in Spring, as such situations are common and undermine the efforts made to improve persistence exception handling.

### Affected Versions

- 2.0.5
- 2.0.6
- 2.1 M3

---

Best regards,  
Dima