当然，这还只是一个MP3文件。其他文件也许还用到了其他的帧。全部找出它们并不难。首
然后你可以使用第15章里的walk-αirectory函数与mp3-p一起来找出一个目录下的每个
如果你在ID3v2.2规范中查找这些标识符，那么你将发现所有那些带有字母T开头标识符的帧
ID3v2> (mapcar #'id (frames *id3*))
好吧，几乎看不到什么有用的信息。你其实更想知道这些帧都是什么类型的。换句话说，你
 ID3v2> (read-id3 "/usr2/mp3/Kitka/Wintersongs/02 Byla Cesta.mp3")
与其猜测哪些帧是最有用的，还不如使用已有的代码在REPL中实际测试一下，找出在你的
这应该得到和之前一样的结果，只不过当该函数使用相同的文件名时每个标识符只有一个。
ID3V2> (frames *id3*)
看起来并不是很多一
((*4t* sawexy) ubuat)  (defparameter *id3*
由于可能会多次用到这个对象，所以最好把它保存在一个变量里。
#
"TT2"
((=butras.# asaa: (((atty ept-peal) sawrers) pri# ieodeu) saaeotidnp-asatap).
@ #x72dabdda>
#x72dac7b2>)
#x72dac4f2>
#x72dacl6a>
#x72dabfa2>
www.TopSage.com
“TPA"
"TYE"
#
#
#
#
"TCO"
"TEN"
"COM")
2 @ #x72dac08a>
---
## Page 324
前两个函数可以根据编码方式字节来返回对应的字符串类型的名字。
过具体指定的参数来选择正确的字符串类型。为了实现这个新类型，必须首先定义一些助手函数。
其他值来检测所要读取的值类型。相反，你可以定义一个二进制类型，它接受你传递的编码方式
别使用不同的字符串定界方法。尽管如此，define-binary-class并不直接支持基于对象中的
来编码；如果该字节为1，那么字符串将是一个UCS-2字符串。
节,以及一个编码在帧的其余字节中的字符串。如果编码方式字节为0,那么字符串将用ISO 8859-1
25.12
范转化成适当的二进制类定义了。
实现具体的类是比较合理的。如果你决定以后还要支持其他的帧类型，那么无非就是将其ID3规
样的东西：
集合。根据你的MP3文件多少，该函数可能用掉几秒的时间，但最后你将很可能得到类似下面这
全的。
UNION函数的回收性版本。由于frame-types对于每个文件都会建立新的列表，所以使用它是安
字节的值并读写对应类型的字符串。
是你将在第27章里所需要的，只为实际用到的帧(即下面两节将要讨论的文本信息帧和评论帧)
定义了这样一个类型之后，你也可以定义它接受两个参数：length和：terminator，并通
你已经定义了代表四种不同类型字符串的二进制类型一—两种不同的编码方式，其中每个分
所有的文本信息帧都由两个字段组成：一个用来指示该帧所采用的字符串编码方式的单字
其中的四字母标识符是版本2.2标识符在版本2.3中的等价物。由于保存在这些帧中的信息正
ID3v2> (frame-types-in-dir "/usr2/mp3/")
然后string-args函数使用编码方式字节、长度和终止符来决定在id3-encoded-string
(defun terminated-type (encoding)
(defun non-terminated-type (encoding)
"TAL""TRK"“TPA"
"TCON"
{ecase encoding
ids))
(flet ((collect (file)
(0
文本信息帧
'iso-8859-1-terminated-string)
'ucs-2-string)))
'iso-8859-1-string)
((ids
"COMM"
((((=butxas,# asan: (aty sad-auexy) spt uotunu) spt snas)
TRCK"
“TYE"
"TIT2"
"TCO"
"TPEl"
"TEN"
www.TopSage.com
"COM"）
25.12文本信息帧
307
---
## Page 325
即当ID以T开头并且不是TXX或TXXX时，返回适当的类名。
本相关的具体类。
算，所以最好定义另一个助手函数bytes-left，它使用current-binary-object来得到该帧
string的：length参数也需要同样的信息。由于你接下来在定义的其他类里也需要做类似的计
args所返回的数据。尽管参数列表中的关键字几乎总是字面关键字，但不一定总是如此。
read-value和write-value调用中的关键字，无论：length还是：terminator都只是由string-
的大小。
和terminator参数中应当总有一个是NIL。
308
为了启用这些类，你需要修改find-frame-class，当ID表明该顿是一个文本信息帧，也
现在，就像你定义generic-frame合成类一样，你可以使用最少的重复代码来定义两个版
正如定义generic-frame时需要访问帧的大小，本例中为了计算传递给id3-encoded-
(define-binary-class text-info-frame-v2.2 (id3v2.2-frame text-info-frame)())
(defun bytes-left(bytes-read)
现在可以定义一个名为text-info的合成类了，就像你之前定义的generic-frame那样。
有了这些助手函数，定义id3-encoded-string就很简单了。一个需要注意的细节是用在
(defun find-frame-class(name)
(define-binary-class text-info-frame-v2.3(id3v2.3-frame text-info-frame)())
(define-binary-class text-info-frame ()
(define-binary-type id3-encoded-string (encoding length terminator)
(defun string-args (encoding length terminator)
(-(size (current-binary-object))bytes-read))
(information (id3-encoded-string :encoding encoding :length (bytes-left 1)))))
((encodingul)
(:writer
（:reader（in)
(cond
(cond
(multiple-value-bind (type keyword arg)
(multiple-value-bind (type keyword arg)
(values (terminated-type encoding):terminator terminator))))
(terminator
(values (non-terminated-type encoding):length length))
(length
(ecase(lengthname)
(write-value type out string keyword arg))))
(read-value type in keywordarg)))
第25章实践：ID3解析器
(string-args encoding length terminator)
(string-args encodinglength terminator)
（outstring)
www.TopSage.com
---
## Page 326
class中。
个字符串所需的字节数。
字符串、编码方式和一个指明字符串是否以某个额外字符结尾等参数的情况下，返回用来编码这
糟糕的是，用来编码text的字节数取决于编码方式。因此，你应当定义一个助手函数，在给定
不过，由于description字段是变长的字符串，在text开始前所需读取的字节数并非常量。更
整个帧的最后部分，保存评论文本。
的值所编码的字符串。前一个字符串是以空字节结尾的，含有评论的简要描述。后一个字符串是
代码来表示，例如“eng”代表英语，而“jpn”代表日语。这个字段之后是两个根据第一个字节
符串（无论字符串编码方式字节的值是什么），它代表了评论所使用的语言，以ISO 639-2格式的
它以代表帧中所采用的字符串编码方式的单个字节开始。该字节后跟一个三字符的ISO8859-1字
25.13
 然后，和前面一样，你可以定义具体的版本相关的评论帧类并将其嵌人到find-frame-
(define-binary-class comment-frame-v2.2 (id3v2.2-frame comment-frame) ())
和text-info混合类的定义一样，你可以使用bytes-left来计算最后一个字符串的大小。
另一个常用的顿类型是评论帧，它就像一个带有额外字段的文本信息帧。和文本信息帧一-样，
(define-binary-class comment-frame-v2.3 (id3v2.3-frame comment-frame) ())
(defun encoded-string-length (string encoding terminated)
(defun find-frame-class (name)
(defun encoded-string-length (string encoding terminated)
(define-binary-class comment-frame ()
(text (id3-encoded-string
(description (id3-encoded-string :encoding encoding :terminator +null+))
(language (iso-8859-1-string :length 3))
(t
评论帧
(ecase (length name)
{let（{characters （+
(* characters (ecase encoding (0 1)(1 2)))))
(3 'text-info-frame-v2.2)
:encoding encoding
'generic-frame-v2.2)
（+
(encoded-string-length description encoding t)))))))
；language
；encoding
(ecase (encoding(0 0)(1 1))))))
www.TopSage.com
25.13
评论帧
309
---
## Page 327
符从ID3v2.2改为ID3v2.3，所以你必须考虑到这一点。
基本上可以细化成使用正确的标识符来查找对应的帧。当然，ID3的作者们可能决定将所有标识
解码。幸运的是，所有包含你所关心信息的帧都是文本信息帧。因此，解出一段特定信息的操作
ID3帧并解出其information字段。而另外一些信息，例如歌曲的风格，可能还需要进行后续的
于ID3格式的细节，而这不是库的用户应当关心的。
第27章或者有可能在用到该库的其他代码里需要这些函数。它们之所以属于该库是因为它们依赖
码应当可以解析你实际遇到的几乎所有的MP3文件。
些标志位被设定时做正确的处理，否则就可能会有一些ID3标签无法被正确解析。但是本章的代
细节。特别地，某些标签和帧中的标志位可能影响标签或帧的读取方式。除非你编写了代码在这
你想要的信息。
28和29章里开发一个流式MP3服务器时所做的那样，那么就需要编写函数来查找适当的帧并解出
就可能需要调整其大小。）目前的代码无法保证这一点。
理标签和顿帧对象的方法。（比如说，如果你改变了一个text-info-frame中的字符串的值，那么
的D3标签编辑器，那么你需要实现用于所有帧类型的特定类。你还需要定义以一致的方式来管
25.14从ID3标签中解出信息
310
① 确保这类跨字段的一致性是访问广义函数的：after方法的良好应用场合。例如，你可以定义下面的：after方法
比如说，为了从一个被解出的id3-tag中获得MP3的歌曲名，你需要查找带有特定标识符的
目前你可以再编写几个用来从一个id3-tag中解出个别信息的函数来结束这项工作。你将在
最后，为了使其成为产品级的代码，你需要仔细确认ID3规范并处理所有之前没有讨论到的
或者，如果你只需要从MP3文件的ID3标签里解出关于它的特定信息一
没有什么太复杂的东西，你只需找出正确的路径从而得到不同的信息就好了。这正是采用交
现在你有了读写ID3标签的基本能力，扩展这些代码的方向有很多。如果你想开发一个完整
(defmethod (setf information) :after (value (frame text-info-frame))
来确保size与information字符串同步：
cond
(with-slots
{declare
((and (char= (char name 0) #\T)
(setf size (encoded-string-length information encoding nil))))
(ecase (length name)
(ecase (length name)
第25章实践：ID3解析器
3
'generic-frame-v2.3)))))
(((=Sutxas+# asa2: (=xxxLm mXxL): aweu xaqwau) zou)