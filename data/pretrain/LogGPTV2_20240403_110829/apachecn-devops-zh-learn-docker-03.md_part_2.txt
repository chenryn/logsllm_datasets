向后靠，深呼吸。然后，尝试找出前面的命令是做什么的。在找到答案或放弃之前，不要继续阅读。
右:前面的命令删除当前在系统上定义的所有容器，包括停止的容器。`rm`命令代表移除，下面将进一步解释。
在上一节中，我们使用了列表命令中的参数`-l`。尝试使用 Docker 帮助找出`-l`参数代表什么。您可以调用 list 命令的帮助，如下所示:
```
$ docker container ls -h 
```
# 停止和启动容器
有时，我们想(暂时)停止一个正在运行的容器。让我们用之前使用的报价容器来尝试一下。使用以下命令再次运行容器:
```
$ docker container run -d --name quotes alpine \
 /bin/sh -c "while :; do wget -qO- https://talaikis.com/api/quotes/random; printf '\n'; sleep 5; done"
```
现在，如果我们想要停止这个容器，那么我们可以通过发出以下命令来完成:
```
$ docker container stop quotes 
```
当您尝试停止报价容器时，您可能会注意到，执行该命令需要一段时间。准确地说，大约需要 10 秒钟。*为什么会这样？*
Docker 向容器内部运行的主进程发送一个 Linux `SIGTERM`信号。如果进程没有对这个信号做出反应而自行终止，Docker 等待 10 秒后发送`SIGKILL`，会强行终止进程，终止容器。
在前面的命令中，我们使用了容器的名称来指定要停止的容器。但是我们也可以使用容器标识来代替。
*如何获取容器的 ID？*这样做有几种方式。手动方法是列出所有正在运行的容器，并在列表中找到我们正在寻找的容器。从那里，我们复制它的 ID。更自动化的方法是使用一些 shell 脚本和环境变量。例如，如果我们想要获取报价容器的标识，我们可以使用以下表达式:
```
$ export CONTAINER_ID = $(docker container ls | grep quotes | awk '{print $1}')
```
现在，我们可以在表达式中使用变量
`$CONTAINER_ID`，而不是使用容器名称:
```
$ docker container stop $CONTAINER_ID 
```
一旦我们停止了容器，它的状态将变为`Exited`。
如果容器停止，可以使用`docker container start`命令再次启动。让我们用报价容器来做这件事。让它再次运行是很好的，因为我们将在本章的后续章节中用到它:
```
$ docker container start quotes
```
# 移除容器
当我们运行`docker container ls -a`命令时，我们可以看到相当多的容器处于`Exited`状态。如果我们不再需要这些容器，那么将它们从内存中移除是一件好事，否则它们会不必要地占用宝贵的资源。移除容器的命令是:
```
$ docker container rm  
```
移除容器的另一个命令是:
```
$ docker container rm  
```
尝试使用它的标识删除一个已退出的容器。
有时，移除容器将不起作用，因为它仍在运行。如果我们想强制移除，无论容器当前的状态如何，我们都可以使用命令行参数`-f`或`--force`。
# 检查容器
容器是一个映像的运行时实例，并且有许多表征其行为的相关数据。要获得特定容器的更多信息，我们可以使用`inspect`命令。像往常一样，我们必须提供容器标识或名称来标识我们想要获取其数据的容器。那么，让我们检查一下我们的样品容器:
```
$ docker container inspect quotes 
```
响应是一个充满细节的大 JSON 对象。它看起来像这样:
```
    [
        {
            "Id": "c5c1c68c87...",
            "Created": "2017-12-30T11:55:51.223271182Z",
            "Path": "/bin/sh",
            "Args": [
                "-c",
                "while :; do wget -qO- https://talaikis.com/api/quotes/random; printf '\n'; sleep 5; done"
            ],
            "State": {
                "Status": "running",
                "Running": true,
                ...
            },
            "Image": "sha256:e21c333399e0...",
            ...
            "Mounts": [],
            "Config": {
                "Hostname": "c5c1c68c87dd",
                "Domainname": "",
                ...
            },
            "NetworkSettings": {
                "Bridge": "",
                "SandboxID": "2fd6c43b6fe5...",
                ...
            }
        }
    ]
```
为了可读性，输出被缩短了。
请花点时间分析一下你得到了什么。您应该会看到以下信息:
*   容器的标识
*   容器的创建日期和时间
*   从哪个映像构建容器等等
输出的许多部分，如`Mounts`或`NetworkSettings`现在没有太大意义，但我们肯定会在本书即将到来的章节中讨论这些。您在这里看到的数据也被命名为容器的**元数据**。在本书的剩余部分，我们将经常使用`inspect`命令作为信息来源。
有时，我们只需要整体信息的一点点，为了实现这一点，我们可以使用 **grep 工具**或**过滤器**。前一种方法并不总是能得到预期的答案，所以让我们来看看后一种方法:
```
$ docker container inspect -f "{{json .State}}" quotes | jq 
```
`-f`或`--filter`参数用于定义过滤器。过滤器表达式本身使用**围棋模板**语法。在这个例子中，我们只想看到 JSON 格式的整个输出的状态部分。
为了很好地格式化输出，我们将结果导入 jq 工具:
```
    {
      "Status": "running",
      "Running": true,
      "Paused": false,
      "Restarting": false,
      "OOMKilled": false,
      "Dead": false,
      "Pid": 6759,
      "ExitCode": 0,
      "Error": "",
      "StartedAt": "2017-12-31T10:31:51.893299997Z",
      "FinishedAt": "0001-01-01T00:00:00Z"
    }
```
# 执行到正在运行的容器中
有时，我们想在一个已经运行的容器中运行另一个进程。一个典型的原因可能是试图调试一个行为不当的容器。*我们如何做到这一点？*首先，我们需要知道容器的 ID 或名称，然后我们可以定义我们想要运行哪个进程以及我们想要它如何运行。我们再次使用当前运行的报价容器，并在其中使用以下命令交互运行一个 shell:
```
$ docker container exec -i -t quotes /bin/sh 
```
标志`-i`表示我们想要交互运行附加的进程，`-t`告诉 Docker 我们想要它为我们提供命令的 TTY(一个终端仿真器)。最后，我们运行的流程是`/bin/sh`。
如果我们在终端中执行前面的命令，那么我们将看到一个新的提示。我们现在在报价容器的外壳中。我们可以很容易地证明这一点，例如，通过执行`ps`命令，该命令将列出上下文中所有正在运行的进程:
```
# / ps
```
结果应该有点类似于这样:
![](img/3885ed45-b407-424d-af01-5ef34334d434.png)
List of Processes running inside the quotes Container
我们可以清楚地看到带有`PID 1`的过程是我们已经定义的在报价容器内部运行的命令。带有`PID 1`的流程也称为主流程。
在提示下输入`exit`离开容器。我们不能只在一个容器中执行额外的交互过程。请考虑以下命令:
```
$ docker container exec quotes ps
```
输出显然与前面的输出非常相似:
![](img/72e5e3e0-9589-472b-828d-47e2efa5e61e.png)
List of Processes running inside the quotes Container
我们甚至可以使用标志`-d`作为守护进程运行进程，并使用`-e`标志变量定义环境变量，如下所示:
```
$ docker container exec -it \
 -e MY_VAR="Hello World" \
 quotes /bin/sh
# / echo $MY_VAR
Hello World
# / exit
```
# 连接到运行的容器
我们可以使用`attach`命令，使用容器的 ID 或名称，将终端的标准输入、输出和错误(或三者的任意组合)附加到正在运行的容器上。让我们为报价容器这样做:
```
$ docker container attach quotes 
```
在这种情况下，我们将每五秒钟左右看到输出中出现一个新的报价。
要退出容器而不停止或杀死它，我们可以按组合键*Ctrl*+*P**Ctrl*+*Q*。这将我们从容器中分离出来，同时让它在后台运行。另一方面，如果我们想同时分离和停止容器，我们可以只按 *Ctrl* + *C* 。
让我们运行另一个容器，这次是一个 Nginx 网络服务器:
```
$ docker run -d --name nginx -p 8080:80 nginx:alpine 
```
在这里，我们在一个名为`nginx`的容器中运行作为守护进程的高山版本的 Nginx。`-p 8080:80`命令行参数打开主机上的端口`8080`，用于访问容器内部运行的 Nginx 网络服务器。不要担心这里的语法，因为我们将在[第 7 章](07.html)、*单主机网络*中更详细地解释这个特性。
让我们看看是否可以访问 Nginx，使用`curl`工具并运行以下命令:
```
$ curl -4 localhost:8080 
```
如果一切正常，您应该会看到 Nginx 的欢迎页面:
```
Welcome to nginx! 
Welcome to nginx! 
If you see this page, the nginx web server is successfully installed and 
working. Further configuration is required. 
For online documentation and support please refer to 
nginx.org. 
Commercial support is available at 
nginx.com. 
Thank you for using nginx. 