前台有一个申请友情链接，根据经验这个申请友情链接的地方应该是一个payload输入的地方，我们先看看/admin/admin_link.php的代码：
$act =
！
empty
（
$_GET['act']
）
？
trim
（
$_GET['act']
）
：
'list'
；
$smarty->assign
（
'pageheader'
，
"
友情链接
"
）；
if
（
$act == 'list'
）
{      get_token
（）；
      check_permissions
（
$_SESSION['admin_purview']
，
"link_show"
）；
      require_once
（
QISHI_ROOT_PATH.'include/page.class.php'
）；
      $oederbysql=" order BY l.show_order DESC"
；
这里是判断访问admin_link.php这个文件的时候有没有act参数，没有就给$act变量赋值为list，即进入到输出友情链接列表的代码：
$offset=
（
$currenpage-1
）
*$perpage
；
$link = get_links
（
$offset
，
$perpage
，
$joinsql.$wheresql.$oederbysql
）；
$smarty->assign
（
'link'
，
$link
）；
$smarty->assign
（
'page'
，
$page->show
（
3
））；
$smarty->assign
（
'upfiles_dir'
，
$upfiles_dir
）；
$smarty->assign
（
'get_link_category'
，
get_link_category
（））；
$smarty->assign
（
'navlabel'
，
"list"
）；
$smarty->display
（
'link/admin_link.htm'
）；
get_links（）函数代码如下：
function get_links
（
$offset
，
$perpage
，
$get_sql= ''
）
{
      global $db
；
      $row_arr = array
（）；
      $limit=" LIMIT ".$offset.'
，
'.$perpage
；
      $result = $db->query
（
"SELECT l.*
，
c.categoryname FROM ".table
（
'link'
）
." AS l ".$get_sql.$limit
）；
      while
（
$row = $db->fetch_array
（
$result
））
      {
      $row_arr[] = $row
；
      }
      return $row_arr
；
}
很清楚地看到，这是一个从数据库读取友情链接列表的功能：
$link = get_links
（
$offset
，
$perpage
，
$joinsql.$wheresql.$oederbysql
）；
后面的代码则是将读取的内容以link/admin_link.htm为模板显示出来。跟进模板页看看，有一个关键的代码片段如下：
其中：
：#FF6600" title="" class="vtip">[logo]
这段代码是有问题的，这里直接把显示logo的img标签放在span标签的title里面，当鼠标滑过的时候会调用事件执行显示title即执行img标签，这里的利用点是{#$list.link_logo#}可以是HTML实体编码，从而绕过骑士cms的安全检查。目前我们已经找到一个输出点了，输入点也根据当前代码功能猜到是在前台申请链接的地方，利用过程如下，在前台申请友情链接页面
http://localhost/74cms/link/add_link.php
 的logo字段输入
1 oner&#114
；
or=ale&#114
；
t
（
1
）
来构造代码如下：
：#FF6600" title="" class="vtip">[logo]
执行结果如图4-7所示。
图 4-7
当管理员在后台查看链接时触发漏洞执行代码，如图4-8所示。
图 4-8
4.2.2 漏洞防范
由于XSS漏洞在不同浏览器下有不同的利用方式，而且特别是业务上有需求使用富文本编辑器的时候，防御起来就更加复杂，所以在XSS防御这块应该从多个方面入手，尽量减少XSS漏洞。
4.2.2.1 特殊字符HTML实体转码
一般的XSS漏洞都是因为没过滤特殊字符，导致可以通过注入单双引号以及尖括号等字符利用漏洞，比如一个图片标签如下，则可以通过输入双引号来闭合第一个单引号利用漏洞，防御这类的XSS漏洞只需要过滤掉相关的特殊字符即可，特殊字符列表如下：
1）单引号（'）
2）双引号（"）
3）尖括号（<>）
4）反斜杠（\）
5）冒号（：）
6）and符（&）
7）#号（#）
还有两个问题，这些字符应该怎么过滤，什么时候过滤？为了保证数据原始性，最好的过滤方式是在输出和二次调用的时候进行如HTML实体一类的转码，防止脚本注入的问题。
4.2.2.2 标签事件属性黑白名单
上面我们提到过滤特殊字符来防止XSS漏洞，实际上即使过滤了也同样可能会被绕过，比如利用跟宽字节注入一样的方式来吃掉反斜杠，再利用标签的事件来执行js代码，面对这样的情况，我们还得加标签事件的黑名单或者白名单，这里更推荐用白名单的方式，实现规则可以直接用正则表达式来匹配，如果匹配到的事件不在白名单列表，就直接拦截掉，而不是替换为空。
4.3 CSRF漏洞
CSRF全称为Cross-site request forgery，跨站请求伪造。说白一点就是可以劫持其他用户去进行一些请求，而这个CSRF的危害性就看当前这个请求是进行什么操作了。
而CSRF是怎么一个攻击流程呢？举一个最简单的例子，比如直接请求http://x.com/del.php?id=1可以删除ID为1的账号，但是只有管理员有这个删除权限，而如果别人在其他某个网站页面加入再把这个页面发送给管理员，只要管理员打开这个页面，同时浏览器也会利用当前登录的这个管理员权限发出http://x.com/del.php?id=1这个请求，从而劫持了这个账号做一些攻击者没有权限做的事情。
上面举的这个例子只是其中一个场景，更严重的像添加管理员账号、修改网站配置直接写入webshell等等都有很多案例。
4.3.1 挖掘经验
CSRF主要是用于越权操作，所有漏洞自然在有权限控制的地方，像管理后台、会员中心、论坛帖子以及交易管理等，这几个场景里面，管理后台又是最高危的地方，而CSRF又很少被关注到，因此至今还有很多程序都存在这个问题。我们在挖掘CSRF的时候可以先搭建好环境，打开几个有非静态操作的页面，抓包看看有没有token，如果没有token的话，再直接请求这个页面，不带referer。如果返回的数据还是一样的话，那说明很有可能有CSRF漏洞了，这个是一个黑盒的挖掘方法，从白盒角度来说的话，只要读代码的时候看看几个核心文件里面有没有验证token和referer相关的代码，这里的核心文件指的是被大量文件引用的基础文件，或者直接搜"token"这个关键字也能找，如果在核心文件没有，再去看看你比较关心的功能点的代码有没有验证。
Discuz CSRF备份拖库分析
下面我们来分析一个Discuz CSRF可以直接脱裤的漏洞，这个漏洞影响非常大，漏洞在刚公开的时候导致了大量的Discuz论坛被拖库，漏洞来源乌云缺陷编号：WooYun-2014-64886，作者是跟笔者同一个team（safekey）的matt。
漏洞文件在source/admincp/admincp_db.php第30行开始：
if
（！
$backupdir
）
{$backupdir = random
（
6
）；
@mkdir
（
'./data/backup_'.$backupdir
，
0777
）；
//
文件夹名是六位随机数
C
：：
t
（
'common_setting'
）
->update
（
'backupdir'
，
$backupdir
）；
/} else {
//
这边也没有做
fromhash
的验证
DB
：：
query
（
'SET SQL_QUOTE_SHOW_CREATE=0'
，
'SILENT'
）；
if
（！
$_GET['filename'] ||
！
preg_match
（
'/^[\w\_]+$/'
，
$_GET['filename']
））
{      cpmsg
（
'database_export_filename_invalid'
，
''
，
'error'
）；
      }/*
省略，往下走
*/$backupfilename = './data/'.$backupdir.'/'.str_replace
（
array
（
'/'
，
'\\'
，
'.'
，
"'"
），
''
，
$_GET['filename']
）；
//
文件名从
$_GET['filename']
）获取，可控
      if
（
$_GET['usezip']
）
{         require_once './source/class/class_zip.php'
；
      }      if
（
$_GET['method'] == 'multivol'
）
{         $sqldump = ''
；
         $tableid = intval
（
$_GET['tableid']
）；
         $startfrom = intval
（
$_GET['startfrom']
）；
         if
（！
$tableid && $volume == 1
）
{            foreach
（
$tables as $table
）
{
           $sqldump .= sqldumptablestruct
（
$table
）；
         }         }      $complete = TRUE
；
      for
（；
$complete && $tableid 
利用截图，如图4-9所示。
4.3.2 漏洞防范
防御CSRF漏洞的最主要问题是解决可信的问题，即使是管理员权限提交到服务器的数据，也不一定是完全可信的，所以针对CSRF的防御有以下两点：1）增加token/referer验证避免img标签请求的水坑攻击，2）增加验证码。