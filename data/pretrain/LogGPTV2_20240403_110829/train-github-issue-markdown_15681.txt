##### Description of the problem
Currently, ObjectLoader doesn't load the specified background texture or
environment of a scene's JSON object.
I've outlined a solution below that would import a CubeTexture or Texture for
the scene background, and a CubeTexture for environment (since that's the only
type of texture environment supports). This involved passing textures into
`parseObject()` and then added them to the scene object.
I could make a PR if looks good, but I'm also not sure if this conflicts with
some of the plans outlined in existing issue #17420. Either way this seems
like a desirable feature of ObjectLoader.
    parseObject: function ( data, geometries, materials, textures ) {
    	var object;
    	...
    	function getTexture( name ) {
    		if ( textures[ name ] === undefined ) {
    			console.warn( 'THREE.ObjectLoader: Undefined texture', name );
    		}
    		return textures[ name ];
    	}
    	switch ( data.type ) {
    		case 'Scene':
    			object = new Scene();
    			if ( data.background !== undefined ) {
    				if ( Number.isInteger( data.background ) ) {
    					object.background = new Color( data.background );
    				} else {
    					object.background = getTexture( data.background );
    				}
    			}
    			if ( data.environment !== undefined ) {
    				var texture = getTexture ( data.environment );
    				if ( texture instanceof CubeTexture ) {
    					object.environment  = texture;
    				}
    			}
    			if ( data.fog !== undefined ) {
    				if ( data.fog.type === 'Fog' ) {
    					object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
    				} else if ( data.fog.type === 'FogExp2' ) {
    					object.fog = new FogExp2( data.fog.color, data.fog.density );
    				}
    			}
    			break;
    	...
##### Three.js version
  * Dev
  * r113
##### Browser
  * All of them
##### OS
  * All of them