Therefore, we enable these device driver to execute in a
virtual machine for enhanced analysis.
8 Limitations and Future Work
DMA. As mentioned in §4.1, Charm does not cur-
rently support DMA. We plan to support DMA by inte-
grating a Distributed Shared Memory (DSM) implemen-
tation into our prototype. The memory pages accessed
through DMA will be kept coherent by the DSM system.
However, we might need to insert explicit update oper-
ations in the driver for performance optimization and in
the mobile system’s kernel stub to notify the DSM sys-
tem of the completion of DMA.
Closed source (binary) drivers.
Charm does not
currently support closed source (binary) device drivers.
We plan to support these device drivers in the future. To
do this, we plan to use ARM virtual machines (instead of
x86 virtual machines used in this paper). We will either
run this virtual machine in an ARM workstation or in an
x86 server with a ARM-to-x86 interpreter (note that we
will need to improve the performance of this interpreter
to overcome the limitations mentioned in §3.2).
Automatic device driver porting. As we showed
in our evaluations in §6.1, it takes time and engineering
effort to port a new driver to Charm. We plan to build
a framework for automatic porting of device drivers to
Charm. In this framework, the security analyst will only
need to provide the driver’s source code and the list of
resident modules. The framework will implement all re-
quired RPCs and port the driver to Charm automatically.
9 Conclusions
We presented Charm, a system solution for running de-
vice drivers of mobile systems in a virtual machine run-
ning in a workstation. Charm enables application of var-
ious existing dynamic analysis solutions, e.g., interactive
debugging, record-and-replay, and enhanced fuzzing to
these device drivers. Our extensive evaluation showed
that Charm can support various device drivers and mo-
bile systems (e.g., 4 drivers of 3 different smartphones in
our prototype), achieves decent performance, and is ef-
fective in enabling a security analyst to ﬁnd, study, and
analyze driver vulnerabilities and even build exploits.
Acknowledgments
The work was supported by NSF Awards #1617481 and
#1617573. We thank the paper shepherd, Adwait Nad-
karni, and the reviewers for their insightful comments.
References
[1] ANDROID FRAGMENTATION VISUALIZED (AUGUST
https://opensignal.com/legacy-assets/pdf/
2015).
reports/2015_08_fragmentation_report.pdf.
USENIX Association
27th USENIX Security Symposium    305
[2] Android Security Bulletins. https://source.android.com/
security/bulletin/.
[3] Anubis: Analyzing Unknown Binaries.
iseclab.org/.
http://anubis.
[4] Code coverage tool for compiled programs (KCOV). https:
//github.com/SimonKagstrom/kcov.
[5] Exploiting the Linux kernel via packet sockets.
https:
//googleprojectzero.blogspot.com/2017/05/
exploiting-linux-kernel-via-packet.html.
[6] Google Issue Tracker: Issues. https://developers.google.
com/issue-tracker/concepts/issues.
[7] Google Syzkaller:
an unsupervised, coverage-guided Linux
https://opensource.google.com/
system call
projects/syzkaller.
fuzzer.
[8] Instruction for using the Syzkaller to fuzz an Android de-
https://github.com/google/syzkaller/blob/
vice.
master/docs/linux/setup_linux-host_android-
device_arm64-kernel.md.
[9] The Kernel Address Sanitizer (KASAN). https://github.
com/google/kasan/wiki.
[10] The Kernel Memory Sanitizer (KMSAN). https://github.
com/google/kmsan/blob/master/README.md.
[11] The Kernel Thread Sanitizer (KTSAN).
com/google/ktsan/wiki.
https://github.
[12] The Kernel Undeﬁned Behavior Sanitizer
(KUBSAN).
https://www.kernel.org/doc/html/v4.11/dev-
tools/ubsan.html.
[13] USB Gadget API for Linux. https://www.kernel.org/doc/
html/v4.13/driver-api/usb/gadget.html, 2004.
[14] Access UART ports of Xperia devices. https://developer.
sony.com/develop/open-devices/guides/access-
uart-ports, 2013.
[15] Building a Nexus 4 UART Debug Cable. https://www.optiv.
com/blog/building-a-nexus-4-uart-debug-cable,
2013.
[16] Building a Pixel kernel with KASAN+KCOV.
https://
source.android.com/devices/tech/debug/kasan-kcov,
2017.
[17] Peach Fuzzer for Driver Fuzzing Whitepaper.
https://
www.peach.tech/datasheets/driver-fuzzing/peach-
fuzzer-driver-fuzzing-whitepaper/, 2017.
[18] Devices supported by LineageOS. https://wiki.lineageos.
org/devices/, 2018.
[19] Samsung publishes kernel source code for Galaxy S9/S9+ Snap-
dragon and Exynos models. https://www.androidpolice.
com/2018/03/14/samsung-publishes-kernel-source-
code-galaxy-s9-s9-snapdragon-exynos-models/, 2018.
[20] Serial debugging. https://wiki.postmarketos.org/wiki/
Serial_debugging, 2018.
[21] ABRAMSON, D.,
JACKSON,
J., MUTHRASANALLUR, S.,
NEIGER, G., REGNIER, G., SANKARAN, R., SCHOINAS, I.,
UHLIG, R., VEMBU, B., AND WIEGERT, J. Intel Virtualization
Technology for Directed I/O. Intel Technology Journal (2006).
[24] BEN-YEHUDA, M., DAY, M. D., DUBITZKY, Z., FACTOR, M.,
HAR’EL, N., GORDON, A., LIGUORI, A., WASSERMAN, O.,
AND YASSOUR, B. A. The Turtles Project: Design and Im-
plementation of Nested Virtualization. In Proc. USENIX OSDI
(2010).
[25] BLASING, T., BATYUK, L., SCHMIDT, A.-D., CAMTEPE, S.,
AND ALBAYRAK, S. An Android Application Sandbox Sys-
tem for Suspicious Software Detection. In Proc. IEEE Interna-
tional Conference on Malicious and Unwanted Software (Mal-
ware) (2010).
[26] B ¨OHME, M., PHAM, V.-T., NGUYEN, M.-D., AND ROY-
CHOUDHURY, A. Directed Greybox Fuzzing. In Proc. ACM CCS
(2017).
[27] CADAR, C., DUNBAR, D., AND ENGLER, D. KLEE: Unassisted
and Automatic Generation of High-coverage Tests for Complex
Systems Programs. In Proc. USENIX OSDI (2008).
[28] CHA, S. K., AVGERINOS, T., REBERT, A., AND BRUMLEY, D.
Unleashing Mayhem on Binary Code. In Proc. IEEE Symposium
on Security and Privacy (S&P) (2012).
[29] CHA, S. K., WOO, M., AND BRUMLEY, D. Program-Adaptive
Mutational Fuzzing. In Proc. IEEE Symposium on Security and
Privacy (S&P) (2015).
[30] CHIPOUNOV, V., KUZNETSOV, V., AND CANDEA, G. S2E: a
Platform for In-Vivo Multi-Path Analysis of Software Systems.
In Proc. ACM ASPLOS (2011).
[31] CHIPOUNOV, V., KUZNETSOV, V., AND CANDEA, G. The
S2E Platform: Design, Implementation, and Applications. ACM
Transactions on Computer Systems (TOCS) (2012).
[32] CHOU, A., YANG, J., CHELF, B., HALLEM, S., AND ENGLER,
D. An Empirical Study of Operating Systems Errors. In Proc.
ACM SOSP (2001).
[33] CHOW, J., GARFINKEL, T., AND CHEN, P. M. Decoupling
Dynamic Program Analysis from Execution in Virtual Environ-
ments. In USENIX Annual Technical Conference (2008).
[34] CHOW, J., PFAFF, B., GARFINKEL, T., CHRISTOPHER, K.,
AND ROSENBLUM, M. Understanding Data Lifetime via Whole
System Simulation. In USENIX Security (2004).
[35] CHUN, B.-G., IHM, S., MANIATIS, P., NAIK, M., AND PATTI,
A. CloneCloud: Elastic Execution Between Mobile Device and
Cloud. In Proc. ACM EuroSys (2011).
[36] CORINA, J., MACHIRY, A., SALLS, C., SHOSHITAISHVILI, Y.,
HAO, S., KRUEGEL, C., AND VIGNA, G. DIFUZE: Interface
Aware Fuzzing for Kernel Drivers. In Proc. ACM CCS (2017).
[37] COSTIN, A., ZADDACH, J., FRANCILLON, A., BALZAROTTI,
D., AND ANTIPOLIS, S. A Large-Scale Analysis of the Security
of Embedded Firmwares. In Proc. USENIX Security Symposium
(2014).
[38] CUERVO, E., BALASUBRAMANIAN, A., CHO, D.-K., WOL-
MAN, A., SAROIU, S., CHANDRA, R., AND BAHL, P. MAUI:
Making Smartphones Last Longer with Code Ofﬂoad. In Proc.
ACM MobiSys (2010).
[39] DAVIDSON, D., MOENCH, B., JHA, S., AND RISTENPART, T.
FIE on Firmware: Finding Vulnerabilities in Embedded Systems
Using Symbolic Execution. In Proc. USENIX Security (2013).
[22] AMIRI SANI, A., BOOS, K., YUN, M., AND ZHONG, L. Rio:
A System Solution for Sharing I/O between Mobile Systems. In
Proc. ACM MobiSys (2014).
[40] DRAKE, J. J. Stagefright: An android exploitation case study.
In Proc. USENIX Workshop on Offensive Technologies (WOOT)
(2016).
[23] BALL, T., BOUNIMOVA, E., COOK, B., LEVIN, V., LICHTEN-
BERG, J., MCGARVEY, C., ONDRUSEK, B., RAJAMANI, S. K.,
AND USTUNER, A. Thorough Static Analysis of Device Drivers.
In Proc. ACM EuroSys (2006).
[41] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG,
J., MCDANIEL, P., AND SHETH, A. N.
TaintDroid: An
Information-ﬂow Tracking System for Realtime Privacy Moni-
toring on Smartphones. In Proc. USENIX OSDI (2010).
306    27th USENIX Security Symposium
USENIX Association
[42] GODEFROID, P., LEVIN, M. Y., AND MOLNAR, D. Automated
Whitebox Fuzz Testing. In Proc. Internet Society NDSS (2008).
[43] GORDON, A., AMIT, N., HAR’EL, N., BEN-YEHUDA, M.,
LANDAU, A., TSAFRIR, D., AND SCHUSTER, A. ELI: Bare-
Metal Performance for I/O Virtualization. In Proc. ACM ASPLOS
(2012).
[44] GORDON, M. S., HONG, D. K., CHEN, P. M., FLINN, J.,
MAHLKE, S., AND MAO, Z. M. Accelerating Mobile Appli-
cations Through Flip-Flop Replication. In Proc. ACM MobiSys
(2015).
[45] GORDON, M. S., JAMSHIDI, D. A., MAHLKE, S., MAO, Z. M.,
AND CHEN, X. COMET: Code Ofﬂoad by Migrating Execution
Transparently. In Proc. USENIX OSDI (2012).
[46] HAN, H., AND CHA, S. K. IMF: Inferred Model-based Fuzzer.
In Proc. ACM CCS (2017).
[47] KANG, M. G., POOSANKAM, P., AND YIN, H. Renovo: A
Hidden Code Extractor for Packed Executables. In Proc. ACM
Workshop on Recurring Malcode (WORM) (2007).
[48] KEIL, S., AND KOLBITSCH, C. Stateful Fuzzing of Wireless
Device Drivers in an Emulated Environment. Black Hat Japan
(2007).
[49] KIRAT, D., AND VIGNA, G. MalGene: Automatic Extraction of
Malware Analysis Evasion Signature. In Proc. ACM CCS (2015).
[50] KOSCHER, K., KOHNO, T., AND MOLNAR, D. SURROGATES:
Enabling Near-Real-Time Dynamic Analyses of Embedded Sys-
In Proc. USENIX Workshop on Offensive Technologies
tems.
(WOOT) (2015).
[51] KUZNETSOV, V., CHIPOUNOV, V., AND CANDEA, G. Test-
In Proc.
ing Closed-Source Binary Device Drivers with DDT.
USENIX ATC (2010).
[52] LIPP, M., SCHWARZ, M., GRUSS, D., PRESCHER, T., HAAS,
W., MANGARD, S., KOCHER, P., GENKIN, D., YAROM, Y.,
AND HAMBURG, M. Meltdown. ArXiv e-prints (Jan. 2018).
[53] LIU, J., HUANG, W., ABALI, B., AND PANDA, D. K. High
In Proc.
Performance VMM-Bypass I/O in Virtual Machines.
USENIX ATC (2006).
[54] LIU, M., LI, T., JIA, N., CURRID, A., AND TROY, V. Un-
derstanding the Virtualization “Tax” of Scale-out Pass-Through
GPUs in GaaS Clouds: An Empirical Study. In Proc. IEEE High
Performance Computer Architecture (HPCA) (2015).
[55] LIU, Z. E. Advanced Heap Manipulation in Windows 8. In Black
Hat Europe (2013).
[56] MACHIRY, A., SPENSKY, C., CORINA, J., STEPHENS, N.,
KRUEGEL, C., AND VIGNA, G. DR. CHECKER: A Soundy
In Proc. USENIX Security
Analysis for Linux Kernel Drivers.
Symposium (2017).
[57] MENDONC¸ A, M., AND NEVES, N. Fuzzing Wi-Fi Drivers to
In Proc. IEEE European De-
Locate Security Vulnerabilities.
pendable Computing Conference (EDCC) (2008).
[58] MUTTI, S., FRATANTONIO, Y., BIANCHI, A., INVERNIZZI, L.,
CORBETTA, J., KIRAT, D., KRUEGEL, C., AND VIGNA, G.
BareDroid: Large-Scale Analysis of Android Apps on Real De-
vices. In Proc. Annual Computer Security Applications Confer-
ence (ACSAC) (2015).
[59] NEWSOME, J. Dynamic Taint Analysis for Automatic Detection,
Analysis, and Signature Generation of Exploits on Commodity
Software. In Proc. Internet Society NDSS (2005).
[60] OH, S., YOO, H., JEONG, D. R., BUI, D. H., AND SHIN, I. Mo-
bile Plus: Multi-device Mobile Platform for Cross-device Func-
tionality Sharing. In Proc. ACM MobiSys (2017).
[61] PALIX, N., THOMAS, G., SAHA, S., CALV `ES, C., LAWALL, J.,
AND MULLER, G. Faults in Linux: Ten Years Later. In Proc.
ACM ASPLOS (2011).
[62] PETSIOS, T., ZHAO, J., KEROMYTIS, A. D., AND JANA, S.
SlowFuzz: Automated Domain-Independent Detection of Algo-
rithmic Complexity Vulnerabilities. In Proc. ACM CCS (2017).
[63] RAWAT, S., JAIN, V., KUMAR, A., AN CRISTIANO GIUFFRIDA,
L. C., AND BOS, H. VUzzer: Application-aware Evolutionary
Fuzzing. In Proc. Internet Society NDSS (2017).
[64] RENZELMANN, M. J., KADAV, A., AND SWIFT, M. M. Sym-
Drive: Testing Drivers without Devices. In Proc. USENIX OSDI
(2012).
[65] SCHUMILO, S., ASCHERMANN, C., GAWLIK, R., SCHINZEL,
S., AND HOLZ, T. kAFL: Hardware-Assisted Feedback Fuzzing
for OS Kernels. In Proc. USENIX Security Symposium (2017).
[66] SHOSHITAISHVILI, Y., WANG, R., HAUSER, C., KRUEGEL,
C., AND VIGNA, G. Firmalice - Automatic Detection of Au-
thentication Bypass Vulnerabilities in Binary Firmware. In Proc.
Internet Society NDSS (2015).
[67] WANG, J., CHEN, B., WEI, L., AND LIU, Y. Skyﬁre: Data-
Driven Seed Generation for Fuzzing. In Proc. IEEE Security and
Privacy (S&P) (2017).
[68] WANG, R., AZAB, A. M., ENCK, W., LI, N., NING, P., CHEN,
X., SHEN, W., AND CHENG, Y. SPOKE: Scalable Knowledge
Collection and Attack Surface Analysis of Access Control Policy
for Security Enhanced Android. In Proc. ACM ASIA CCS (2017).
[69] WANG, T., WEI, T., GU, G., AND ZOU, W. TaintScope: A
Checksum-Aware Directed Fuzzing Tool for Automatic Software
Vulnerability Detection. In Proc. IEEE Symposium on Security
and Privacy (S&P) (2010).
[70] WANG, X., ZELDOVICH, N., KAASHOEK, M. F., AND SOLAR-
LEZAMA, A. Towards Optimization-Safe Systems: Analyzing
the Impact of Undeﬁned Behavior. In Proc. ACM SOSP (2013).
[71] WILLEMS, C., HOLZ, T., AND FREILING, F. Toward Auto-
IEEE
mated Dynamic Malware Analysis Using CWSandbox.
Security Privacy (2007).
[72] WOO, M., CHA, S. K., GOTTLIEB, S., AND BRUMLEY, D.
Scheduling Black-box Mutational Fuzzing. In Proc. ACM CCS
(2013).
[73] YADEGARI, B., AND DEBRAY, S. Symbolic Execution of Ob-
fuscated Code. In Proc. ACM CCS (2015).
[74] YADEGARI, B., JOHANNESMEYER, B., WHITELY, B., AND
DEBRAY, S. A Generic Approach to Automatic Deobfuscation
of Executable Code. In Proc. IEEE Symposium on Security and
Privacy (S&P) (2015).
[75] YAN, L. K., AND YIN, H. DroidScope: Seamlessly Reconstruct-
ing the OS and Dalvik Semantic Views for Dynamic Android
Malware Analysis. In Proc. USENIX Security (2012).
[76] YIN, H., SONG, D., EGELE, M., KRUEGEL, C., AND KIRDA,
E. Panorama: Capturing System-wide Information Flow for Mal-
ware Detection and Analysis. In Proc. ACM CCS (2007).
[77] ZADDACH,
J., BRUNO, L., FRANCILLON, A., AND
BALZAROTTI, D. Avatar: A framework to Support Dynamic
Security Analysis of Embedded Systems Firmwares. In Proc. In-
ternet Society NDSS (2014).
[78] ZHANG, H., SHE, D., AND QIAN, Z. Android Root and its
Providers: A double-Edged Sword. In Proc. ACM CCS (2015).
[79] ZHANG, Y., LUO, X., AND YIN, H. DexHunter: Toward Ex-
tracting Hidden Code from Packed Android Applications.
In
Proc. European Symposium on Research in Computer Security
(ESORICS) (2015).
USENIX Association
27th USENIX Security Symposium    307