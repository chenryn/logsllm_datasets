# R-Opus: A Composite Framework for Application Performability and QoS in Shared Resource Pools

## Authors
- **Ludmila Cherkasova**
  - Hewlett-Packard Labs
  - Palo Alto, CA, USA, 94302
  - Email: [PI:EMAIL]

- **Jerome A. Rolia**
  - Hewlett-Packard Labs
  - Palo Alto, CA, USA, 94302
  - Email: [PI:EMAIL]

## Abstract
This paper presents R-Opus, a composite framework designed to manage shared resource pools while considering per-application Quality of Service (QoS) requirements and potential server failures. The framework allows for the definition of QoS requirements under both normal and failure conditions, and translates these requirements into resource pool commitments. R-Opus includes a workload placement service that consolidates applications onto a minimal number of servers, ensuring QoS compliance even in the event of a single server failure. A case study demonstrates the effectiveness of the proposed approach.

## I. Introduction
Enterprises are increasingly leveraging large shared resource pools in data center environments to reduce infrastructure and management costs. These environments can contain tens, hundreds, or even thousands of server resources. Effective capacity management is crucial but challenging, often requiring significant manual effort and leading to over-provisioning. This paper introduces R-Opus, a framework that automates capacity self-management to better match resource supply with demand.

Resource pools, consisting of clusters of servers or racks of blade servers, offer shared access to computing capacity. Virtualization and automation technologies support the lifecycle management of resource containers (e.g., virtual machines, virtual disks). Workload managers provide time-varying access to shares of resource capacity, and application workloads are associated with these containers.

Applications in such pools have complex demands, including continuous operation, time-varying demands, and performance-oriented QoS objectives. Capacity management must address overbooking, varying QoS requirements, and potential resource failures. To address these challenges, R-Opus provides a framework with the following features:
- Independently specified per-application QoS requirements for normal and failure modes.
- Resource pool QoS commitments for different classes of service (CoS).
- QoS translation to map application demands to resource pool CoS.
- A workload placement service for both normal and failure modes.

## II. Capacity Management and Resource Pools
Capacity management for resource pools involves several activities at different timescales. Long-term management focuses on capacity planning, medium-term management on workload consolidation, and short-term management on dynamic resource allocation. Workload managers adjust allocations based on demand, using burst factors to handle demand variations. R-Opus uses these managers and a workload placement service to manage per-application QoS requirements.

### Resource Workload Managers
Workload managers monitor and dynamically adjust capacity allocations to meet workload demands. They use burst factors to estimate true demand and ensure consistent utilization. R-Opus assumes two allocation priorities corresponding to the resource pool's CoS: higher priority for critical applications and lower priority for less critical ones.

### Workload Placement Service
The workload placement service uses a trace-based approach to model resource sharing. It characterizes each application workload using historical demand data and simulates assignments to estimate QoS. Placements are found that satisfy QoS commitments, assuming future demands will be similar to past data.

## III. Application QoS Requirements
Application QoS requirements are defined by acceptable and degraded performance ranges. Stress testing is used to determine the burst factor range that ensures good responsiveness. Each QoS requirement has a goal and constraints:
- **U_low**: Utilization of allocation supporting ideal performance.
- **U_high**: Threshold beyond which performance is undesirable.
- **U_degr**: Maximum allowable degradation.
- **M%**: Percentage of measurements within the desirable range.
- **T_degr**: Maximum contiguous time for degraded performance.

For example, if U_low = 0.5, U_high = 0.66, M_degr = 3%, U_degr = 0.9, and T_degr = 30 minutes, the resource allocation schema should allow no more than 3% of measurements to exceed 66% utilization, with a maximum of 90% and no more than 30 minutes of sustained degradation.

## IV. Resource Pool QoS Commitments
Resource access QoS commitments specify the degree of overbooking in the resource pool. The first class of service offers guaranteed service, ensuring the sum of peak allocations does not exceed resource capacity. The second class offers a lower QoS with a resource access probability, θ, indicating the likelihood of resource availability when needed.

Formally, θ is defined as follows:
- **C**: Number of workload traces.
- **W**: Weeks of observations.
- **T**: Observations per day.
- **m**: Measurement interval in minutes.
- **L**: Capacity limit.
- **Aw,x,t**: Sum of allocations for week w, day x, and slot t.

The measured value for θ is calculated based on these parameters, ensuring that both QoS constraints are satisfied.

## V. QoS Translation
QoS translation maps independently specified application QoS requirements to resource pool CoS. This process ensures that the application's QoS requirements are met as long as the resource pool meets its per-CoS QoS commitments.

## VI. Workload Placement Service
The workload placement service assigns application workloads to resources in a way that satisfies QoS commitments. It considers both normal and failure modes, reporting whether a spare server is needed and how applications can operate during a single node failure.

## VII. Case Study
A case study demonstrates the effectiveness of R-Opus in managing shared resource pools, ensuring QoS compliance, and handling server failures.

## VIII. Related Work
This section discusses related work in the field of capacity management and QoS in shared resource pools, highlighting the unique contributions of R-Opus.

## IX. Summary and Conclusions
R-Opus is a comprehensive framework for managing shared resource pools, addressing the challenges of per-application QoS requirements and potential server failures. By automating capacity management, R-Opus improves efficiency and ensures QoS compliance, making it a valuable tool for data center operators.

---

This revised version aims to make the text more coherent, professional, and easier to understand.