with CloudProof. In USENIX ATC, 2011.
[89] Python Crypto Library. https://cryptography.io/.
[90] Python DHT library (Kademlia). https://github.com/bmuller/
kademlia.
[91] Amit Sahai and Brent Waters. Fuzzy Identity-Based Encryption. In
EUROCRYPT, 2005.
[92] Eli Ben Sasson et al. Zerocash: Decentralized Anonymous Payments
from Bitcoin. In IEEE S&P, 2014.
[93] Hossein Shafagh et al. Talos: Encrypted Query Processing for the
Internet of Things. In ACM SenSys, 2015.
[94] Hossein Shafagh et al. Secure Sharing of Partially Homomorphic
Encrypted IoT Data. In ACM SenSys, 2017.
[95] Adi Shamir. How to Share a Secret. Communications of the ACM,
22(11):612–613, 1979.
[96] R Shirey. Internet security glossary. IETF, RFC 4949, 2007.
[97] S. Somogyi and A. Eijdenberg. Improved Digital Certiﬁcate Security.
Online: https://googleonlinesecurity.blogspot.com/2015/
09/improved-digital-certificate-security.html, 2015.
[98] Mark Stamp. Information Security: Principles and Practice. Wiley
Publishing, 2nd edition, 2011.
[99] Emil Stefanov and Elaine Shi. Oblivistore: High Performance Oblivi-
ous Cloud Storage. In IEEE S&P, 2013.
[100] San-Tsai Sun et al. The Devil is in the (Implementation) Details: an
Empirical Analysis of OAuth SSO Systems. In ACM CCS, 2012.
[101] Anuchart Tassanaviboon and Guang Gong. OAuth and ABE based
Authorization in Semi-trusted Cloud Computing. In ACM Workshop
on Data Intensive Computing in the Clouds, 2011.
[102] Techical Report. Filecoin: A Cryptocurrency Operated File Network.
http://filecoin.io/filecoin.pdf, 2014.
[103] Techical Report. Storj: A Peer-to-Peer Cloud Storage Network.
https://storj.io/storj.pdf, 2016.
[104] Sam Thielman. Your Private Medical Data is for Sale and it is
Driving a Business Worth Billions. The Guardian, Online: https:
//www.theguardian.com/technology/2017/jan/10/medical-
data-multibillion-dollar-business-report-warns, 2018.
[105] Alin Tomescu and Srinivas Devadas.
Catena: Efﬁcient Non-
Equivocation via Bitcoin. In IEEE S&P, 2017.
[106] Frank Wang et al. Sieve: Cryptographically Enforced Access Control
for User Data in Untrusted Clouds. In USENIX NSDI, 2016.
[107] Xinlei Wang et al. Performance Evaluation of Attribute-based En-
cryption: Toward Data Privacy in the IoT. In IEEE ICC, 2014.
[108] Shucheng Yu et al. Achieving Secure, Scalable, and Fine-grained
Data Access Control in Cloud Computing. In IEEE INFOCOM, 2010.
[109] Thomas Zachariah et al. The Internet of Things has a Gateway Prob-
lem. In HotMobile, 2015.
[110] Ben Zhang et al. The Cloud is Not Enough: Saving IoT from the
Cloud. In USENIX HotCloud, 2015.
[111] Wenting Zheng et al. Minicrypt: Reconciling Encryption and Com-
pression for Big Data Stores. In EuroSys, 2015.
[112] Philip R Zimmermann. The ofﬁcial PGP user’s guide. MIT press,
1995.
[113] Guy Zyskind et al. Decentralizing Privacy: Using Blockchain to
Protect Personal Data. In IEEE SPW, 2015.
[114] Guy Zyskind et al. Enigma: Decentralized Computation Platform
with Guaranteed Privacy. arXiv (whitepaper) http://www.enigma.
co/enigma_full.pdf, 2015.
2484    29th USENIX Security Symposium
USENIX Association
A Crypto-based Access Control
A.1 Dual-Key Regression
A key regression scheme [50] enables the efﬁcient sharing of
past keys. If an entity is in possession of the key regression
state si, the entity can derive all keys k j with j ≤ i for i ∈
{0,1, ...,n}. However, the entity cannot infer any information
about the keys kl with l > i.
In our constructions, we make use of a Pseudorandom Gen-
erator (PRG) deﬁned as follows.
Pseudorandom Generator (PRG). G : {0,1}n → {0,1}m
is a pseudorandom generator, if m > n and no probabilis-
tic polynomial-time (PTT) distinguisher can distinguish the
output G(x) from a uniform choice r ∈ {0,1}m with non-
negligible probability [53].
Using a pseudorandom generator G : {0,1}λ → {0,1}λ+l,
a client constructs a key regression scheme as follows. First,
the client generates all the possible states si 0 ≤ i ≤ n in
reverse order from an initially randomly chosen seed sn. The
seed si−1 is computed as the ﬁrst λ bits of the output of G(si).
To derive key ki from the corresponding state si, the client
computes G(si) and takes the last l bits (i.e., applies the key
derivation function). For sharing the keys to the i-th key, the
client shares state si with the other entity. With state si, the
entity can compute all pervious states sx with 0 ≤ x ≤ i by
applying the pseudorandom generator function G. Because of
the one-way property of G the client is not able to compute or
infer any information about s j+1 or any sx with x > j. Since
the entity owns states {s0, ...,si}, the entity can derive the
keys {k0, ...,ki} with the key derivation function.
The key regression scheme based on a single series of states
has the drawback that given the current state si an entity can
compute all the previous states and keys. Hence, a client is
not able to deﬁne a lower bound to restrict access on past
keys (e.g., k j, low ≤ j ≤ cur). To address this problem, we
combine two sequences of states to derive the keys, similar
to [26]. We denote the i-th state of the ﬁrst sequence as s1,i
and the second sequence as s2,i for i ∈ {0, . . . ,n} where n + 1
is the length of each sequence.
required for deriving the keys, the entity can only compute
the keys for which it possesses the corresponding state pairs.
Considering the states computed above, the entity knows the
state pairs {(s1, j,s2, j), (s1, j+1,s2, j+1) . . . (s1,i,s2,i)} and can
compute {k j,k j+1, ...,ki} but no other keys. Therefore, dual
key regression can restrict access based on ranges of keys by
sharing the corresponding state of each state sequence.
A.2 Key Derivation Tree
Droplet’s key-derivation tree is based on the Goldreich-
Goldwasser-Micali (GGM) construction [53]. The GGM con-
struction is a binary tree of height h where each node contains
a unique binary label v and an associated key k(cid:48). The label
of a node encodes the path from the root to the current node
where the label of the left child is encoded as v||0 and the
right child as v||1. The key of a node is computed based
on the label v = v1,v2, ..,vl as Gvl (...(Gv2(Gv1(k(cid:48))))) where
G(k(cid:48)) = G0(k(cid:48))||G1(k(cid:48)) is a PRG. The GGM tree is a con-
struction that builds a pseudorandom function (PRF) [53].
The PRF T takes as an input a master key k and a leaf label v
and outputs a key T (k,v) = kv. In GGM, k is the key of the
root node, v the label of a leaf node, and the output kv the
key associated with the leaf node with label v. In Droplet, the
keystream for encryption is derived using T , which leads to
the keystream {T (k,0),T (k,1), ...,T (k,2h − 1)}.
To enable access control on the output keys, T offers the
following additional algorithms:
• T.constrain(k,S) takes as an input the master secret of
the root node k and a set of labels of leaf nodes S. The
algorithm outputs a set of constrained keys kS that contains
the keys from the inner-nodes. These inner-node keys are
selected so that they facilitate the computation of the keys
of the nodes with labels in S but no other leaf node keys.
• T.eval(kS,v) takes as an input the set of constrained keys
kS and a label v of a leaf node. The algorithm outputs the
leaf node key kv if v ∈ S else outputs ⊥.
With the two additional algorithms for access control, the
construction is a constrained PRF [24]. For the detailed secu-
rity analysis, we refer to [24].
B Dual-Key Stealth Addresses
To protect the privacy of access permissions, Droplet employs
dual-key stealth addresses [36]. Let us consider the case of
a data owner Alice giving access permission to a subscriber
Bob. Bob has initially constructed and published his dual
public keys (B, V): B = bG and V = vG, with G as the elliptic
curve group generator and the private keys b and v. Alice
constructs a new address P using Bob’s stealth addresses by
using a hashing function H, and generating a random salt r:
P = H(rV )G + B
(2)
In the bootstrapping phase, the client generates the states
s1,i as previously from a randomly chosen seed s1,n and com-
putes the other states s1,i−1 = MSBλ(G(s1,i)) where MSBλ
denotes the mapping to the λ least signiﬁcant bits of the
input. The second sequence is generated from the oppo-
site direction to enable a lower restriction level. The sec-
ond sequence starts with the random seed s2,0 and the corre-
sponding next state is computed as s2,i+1 = MSBλ(G(s2,i)).
To derive the key k j where j ∈ {0, . . . ,n}, the states s1, j
and s2, j serve as an input to the key derivation function
which is deﬁned as k j = LSBl(G(s1, j xor s2, j)) where LSBl
denotes the mapping to the l most signiﬁcant bits of the in-
put. If an entity is in possession of states s1,i and s2, j where
0 ≤ j < i ≤ n, it can compute the states {s1,0,s1,1, . . . ,s1,i}
and {s2, j,s2, j+1, . . . ,s2,n} with G. Since pairs of states are
USENIX Association
29th USENIX Security Symposium    2485
Alice embeds the tuple (P,R) in the access permissions,
with R = rG (r is protected and not recoverable from R). Only
Bob can claim the address P, as he is the only one capable of
recovering the private key x, such that P = xG, as follows:
x := H(vR) + b
(3)
Hence, he can prove (e.g., with a signature) to the storage
node that he is the rightful principal. Note that guessing x,
given G and P, is equivalent to solving the elliptic curve
discrete log problem, which is computationally intractable for
large integers. The correctness of x from Equation 3 can be
shown as:
xG = (H(vR) + b)G = H(vR)G + bG =
H(vrG)G + B = H(rvG)G + B = H(rV )G + B = P
(4)
Except Alice and Bob no other party can learn that P is associ-
ated with Bob’s stealth addresses. Moreover, the randomness
r in the address generation ensures the uniqueness and un-
linkability of new addresses. Bob discloses the private viewer
key v to the auditor to enable an authorized auditor to audit
the sharing. The auditor can verify the mapping of the tuple
(P,R) to Bob’s main key address B as:
P− H(vR)G = P− H(vrG)G =
H(rV )G + B− H(rV )G = B
(5)
Note that the auditor is cryptographically prevented from
using v to compute Bob’s private key x.
C Security Guarantees
Droplet consists of the following entities: the data owner, data
producer, data consumer, storage node, authorization agent,
and decentralized authorization log (a public blockchain), as
described in §2. Under the trust assumptions laid out in §2.2,
we now elaborate on the security guarantees of Droplet.
Guarantee 1.1 An Adv is not able to access or manip-
ulate data chunks except by compromising data produc-
ers/consumers. Droplet ensures this by end-to-end encryption.
Each data chunk is encrypted with a fresh key (§A.2) on the
client-side with AES in GCM mode, which is an authenti-
cated block-cipher, providing conﬁdentiality, integrity, and
authenticity guarantees:
AES-GCM.Enc(Ki,IV,Mi) → Ci
AES-GCM.Dec(Ki,IV,Ci) → Mi
(6)
Given the i−th key, IV, and i−th message, it computes the
i−th ciphertext. Given the i−th key, IV, and i−th ciphertext,
it computes the i−th message or fails with an error.
For proof of ownership, each chunk is digitally signed:
ECDSA.KeyGen(curve) → (PKdeviceid ,SKdeviceid )
ECDSA.Sign(SKdeviceid ,Ci) → SigCi
ECDSA.Verify(PKdeviceid ,Ci,SigCi) → (true, false)
(7)
After generating the per device private and public ECDSA
key pair , Droplet signs the encrypted message and generates
the signature, which can be veriﬁed given the public key and
the ciphertext. As long as the Adv does not compromise the
private key, a polynomial-time Adv cannot forge the signature.
Guarantee 1.2 For streams with strong immutability require-
ments, an Adv is not able to modify the stream without com-
promising the authorization log. The Adv must control a large
threshold of nodes/computing power to compromise the au-
thorization log to change a committed hash link.
Guarantee 2.1.
If an Adv compromises data consumers
that had access to intervals of a data stream, the Adv is
not able to access any other data than the data the com-
promised data consumers previously had access. Each data
chunk in a stream is encrypted with a fresh key Ki. If an
Adv compromises a data consumer, the Adv gains access to
the subset of the decryption keys which the consumer had
access. Hence, it can only decrypt the data chunks where it
possesses the decryption keys. In Droplet, the keys for en-
cryption are derived with a PRF that is constructed from the
key derivation tree T (§A.2). With the master secret k, the i-th
key is derived as T (k,i) → Ki. Instead of sharing the keys for
range Ki, ...,Kj individually with a data consumer, Droplet
shares constrained keys T.constrain(k,S := {i, .., j}) → kS
(i.e., inner-nodes of the tree). Ki, ...,Kj can be derived as
T.eval(kS,i), ..,T.eval(kS, j) but no other keys. This guaran-
tees that an Adv in possession of kS can derive keys outside
of the interval Ki, ...,Kj with negligible probability.
Guarantee 2.2.
In addition to Guarantee 2.1, an Adv in
control of a compromised data consumer can access data
that was previously revoked, if the Adv controls the respec-
tive storage node or authorization agent. Beyond end-to-end
encryption, the storage node enforces access based on the au-
thorization log. To retrieve data after revoked access, the Adv
must compromise the storage node or authorization agent.
Guarantee 3.1. An Adv cannot link data permissions of a
data consumer from the publicly accessible authorization log
unless the Adv compromises the audit key of the data owner.
Dual-key stealth addresses hide any linkability between the
consumer identities included in the access permissions (§B).
A data consumer proves legitimate access to the storage node
via a zero-knowledge proof, where the data consumer proves it
controls the private key associated with the public key, whose
hash digest is included in the access permission.
Guarantee 3.2. An Adv compromising the authorization
agent cannot compromise data conﬁdentially nor break the
non-linkability from Guarantee 3.1, but it can prevent data
availability. An Adv can maliciously give access to encrypted
data, which does not impact data conﬁdentiality as data is
end-to-end encrypted. An Adv does not learn anything about
the data consumer from their request to access their data, other
than that they control the private key corresponding to the
public key included in the access permission.
2486    29th USENIX Security Symposium
USENIX Association