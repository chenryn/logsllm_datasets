      lpTopLevelExceptionFilter = SetUnhandledExceptionFilter(TopLevelExceptionFilter);
      return 1;
    }
SEH一次执行完之后，进行判断是否处理好了异常 eax=1,显然没有执行好
之后又执行了下一个SEH，这次SEH执行的程序如下
    int __cdecl SEH_4158F0(PEXCEPTION_RECORD ExceptionRecord, PVOID TargetFrame, int a3)
    {
      _DWORD *v3; // esi
      _DWORD *v4; // ebx
      int v5; // edi
      int v6; // eax
      int (__fastcall *v7)(_DWORD, _DWORD); // ecx
      int *v8; // eax
      int v9; // ebx
      int v10; // eax
      char v11; // cl
      EXCEPTION_RECORD *v12; // eax
      void (*v13)(void); // esi
      PEXCEPTION_RECORD v15; // [esp+Ch] [ebp-1Ch]
      int v16; // [esp+10h] [ebp-18h]
      char *v17; // [esp+14h] [ebp-14h]
      int *v18; // [esp+18h] [ebp-10h]
      int v19; // [esp+1Ch] [ebp-Ch]
      _DWORD *v20; // [esp+20h] [ebp-8h]
      char v21; // [esp+27h] [ebp-1h]
      v3 = TargetFrame;
      v21 = 0;
      v19 = 1;
      v4 = (_DWORD *)(__security_cookie ^ *((_DWORD *)TargetFrame + 2));
      v17 = (char *)TargetFrame + 16;
      v20 = v4;
      ValidateLocalCookies(v4, (int)TargetFrame + 16);
      nullsub_1(a3);
      if ( ExceptionRecord->ExceptionFlags & 0x66 )
      {
        if ( *((_DWORD *)TargetFrame + 3) != -2 )
        {
          _EH4_LocalUnwind((int)TargetFrame, -2, (int)TargetFrame + 16, (int)&__security_cookie);
          goto LABEL_21;
        }
      }
      else
      {
        v15 = ExceptionRecord;
        v16 = a3;
        v5 = *((_DWORD *)TargetFrame + 3);
        *((_DWORD *)TargetFrame - 1) = &v15;
        if ( v5 != -2 )
        {
          while ( 1 )
          {
            v6 = v5 + 2 * (v5 + 2);
            v7 = (int (__fastcall *)(_DWORD, _DWORD))v4[v6 + 1];
            v8 = &v4[v6];
            v9 = *v8;
            v18 = v8;
            if ( v7 )
            {
              v10 = _EH4_CallFilterFunc(v7);
              v11 = 1;
              v21 = 1;
              if ( v10  0 )
              {
                v12 = ExceptionRecord;
                if ( ExceptionRecord->ExceptionCode == -529697949 && dword_41F32C )
                {
                  if ( _IsNonwritableInCurrentImage(&dword_41F32C) )
                  {
                    v13 = (void (*)(void))dword_41F32C;
                    j_nullsub_1(dword_41F32C, ExceptionRecord, 1);
                    v13();
                    v3 = TargetFrame;
                  }
                  v12 = ExceptionRecord;
                }
                _EH4_GlobalUnwind2(v3, v12);
                if ( v3[3] != v5 )
                  _EH4_LocalUnwind((int)v3, v5, (int)(v3 + 4), (int)&__security_cookie);
                v3[3] = v9;
                ValidateLocalCookies(v20, (int)(v3 + 4));
                _EH4_TransferToHandler(v18[2], v3 + 4);
                __debugbreak();
                JUMPOUT(*(_DWORD *)__vcrt_initialize);
              }
            }
            else
            {
              v11 = v21;
            }
            v5 = v9;
            if ( v9 == -2 )
              break;
            v4 = v20;
          }
          if ( v11 )
          {
            v4 = v20;
    LABEL_21:
            ValidateLocalCookies(v4, (int)v17);
            return v19;
          }
        }
      }
      return v19;
    }
函数很长，然而真正要执行的函数TransferHandler中，但是在本题中由于执行了异常过滤（_EH4_CallFilterFunc），使得SEH没有执行，SEH依然没有执行好
继续分析下一个SEH，为except_handler4 跟进之后为 ntdll!_except_handler4_common ，再进入这个函数找到函数
ntdll!_EH4_CallFilterFunc 跟进这个SEH
#### call UnhandledExceptionFilter
再继续向下走进入RtlUserThreadStart+0x398a7
跟进去，继续走再跟进这个函数UnhandledExceptionFilter，而如果这个函数不能处理就停止运行
继续向下运行，这里判断查询是否有DebugPort，如果有调试器则把异常给调试器处理，否则则执行TopLevelExceptionHandle进行处理
程序的正常执行流程必然是没有经过调试，而此处交给了调试器处理，使得程序无法进入正常回调，因此我们需要将此处返回值eax（1）修改为0（r
@eax=0）继续向下走，找到了执行了TopLevelExceptionHandler（0x401470）的地方
    LONG __stdcall TopLevelExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
    {
      ExceptionInfo->ContextRecord->Eax = ExceptionInfo->ExceptionRecord->ExceptionInformation[0];
      ExceptionInfo->ContextRecord->Ebx = ExceptionInfo->ExceptionRecord->ExceptionInformation[1];
      ExceptionInfo->ContextRecord->Ecx = ExceptionInfo->ExceptionRecord->ExceptionInformation[2];
      ExceptionInfo->ContextRecord->Edx = ExceptionInfo->ExceptionRecord->ExceptionInformation[3];
      ExceptionInfo->ContextRecord->Edi = ExceptionInfo->ExceptionRecord->ExceptionInformation[4];
      ExceptionInfo->ContextRecord->Esi = ExceptionInfo->ExceptionRecord->ExceptionInformation[5];
      ExceptionInfo->ContextRecord->Eip = (DWORD)sub_401390;
      SetUnhandledExceptionFilter(lpTopLevelExceptionFilter);
      RemoveVectoredExceptionHandler(Handler);
      return -1;
    }
TopLevelExceptionFilter中先设置各个寄存器的值。
接着设置异常处理函数lpTopLevelExceptionFilter(0x41f308)函数直接返回,并且将VEH删除
此时SEH处理完毕
我们继续走程序走到正常的异常回调
然而前面TOPLevelException函数中有一句 ExceptionInfo->ContextRecord->Eip =
(DWORD)sub_401390，设置eip为0x401360
使得NtContinue之后返回401390进行判断
    int __usercall sub_401390@(int a1@, int a2@, int a3@, int a4@, int a5@, int a6@, int a7@, int a8, const char **a9, const char **a10)
    {
      *(_DWORD *)(a5 - 4) = a1;
      *(_DWORD *)(a5 - 8) = a4;
      *(_DWORD *)(a5 - 12) = a3;
      *(_DWORD *)(a5 - 16) = a2;
      *(_DWORD *)(a5 - 20) = a6;
      *(_DWORD *)(a5 - 24) = a7;
      if ( *(_DWORD *)(a5 - 4) == 'WlML'
        && *(_DWORD *)(a5 - 8) == '/Y2u'
        && *(_DWORD *)(a5 - 12) == 'c8kT'
        && *(_DWORD *)(a5 - 16) == '+Y33'
        && *(_DWORD *)(a5 - 20) == 'vL8T' )
      {
        *(_DWORD *)(a5 - 24);
      }
      return main(a8, a9, a10);
    }
这一段字符进行比较判断。
总体来说程序的加密流程为，4轮异或，再进行base64加密，但是最后加密生成的数据应为18个字符带两个'='字符,解密只能解密前15个字符，但是还需注意的是字母表进行了变换，新字母表为
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/
先进行base64解密
    import binascii
    base64_table='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/'
    base_encode=str(raw_input(u"请输入解密字符"))
    counter=base_encode.count("=")
    length=len(base_encode)
    encode=""
    encode_re=""
    if(counter==2):
        a=base64_table.find(base_encode[length-4:length-3])#取前六位
        a=a>4
        encode_re=chr(a+b)
    if(counter==1):
        a=base64_table.find(base_encode[length-4:length-3])#第一个字符前6位
        a=a>4
        encode_re1=chr(a+b)
        a=base64_table.find(base_encode[length-3:length-2])#第二个字符后4位
        a=(a&0xf)>2
        encode_re2=chr(a+b)
        encode_re=encode_re1+encode_re2
    length=length-4
    if(counter==0):
        length=length+4
    for i in range(0,length,4):#以4个字符为一组
       a=base64_table.find(base_encode[i:i+1])#第一个字符6位
       a=a>4
       encode=encode+chr(a+b)
       a=base64_table.find(base_encode[i+1:i+2])#第二个字符后4位
       a=((a&0xf)>2
       encode=encode+chr(a+b)
       a=base64_table.find(base_encode[i+2:i+3])#取第三个字符后2位
       a=(a&3)<<6
       b=base64_table.find(base_encode[i+3:i+4])#取第四个字符6位
       encode=encode+chr(a+b)
    encode=encode+encode_re
    print( binascii.b2a_hex(encode))
    print('\n')
得到结果9662f053 6cbfb4af 02df7cbe b7c955?? 最后一个字符的ASCII码无法确定（分别对应着q,r,p,o）
(afb4bf6c)^797963再循环右移5位得到7d7e6e30（}~n0）
(53f06296)^7d7e6e30在循环右移得到31747065(1tpe)
(be7cdf02)^31747065循环右移5位3c78457b（<xE{）
最后一组虽然无法解密但是可以推测位flag
最终flag为flag{Ex<ept10n~}
#### 总结：
32位异常正常的处理流程如下
1.KiUserDispatcher中判断是64位异常还是32位异常
2.VEH链处理
3.SEH链处理，倒数第二个SEH CALL UnHandledExceptionFliter
(会调用NtQueryInformationProcess查询DebugPort)，然后调用TopLevelExceptionFilter处理
4.zwcontinue进行返回