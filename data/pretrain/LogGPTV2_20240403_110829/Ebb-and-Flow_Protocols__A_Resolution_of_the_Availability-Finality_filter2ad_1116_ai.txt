(18)
Deﬁne T as the minimum time t ≥ max{GST, GAT}
in
the number of convergence opportunities
such that
[max{GST, GAT}, t] equals the number of adversarial slots
within [0, t]:
T =
t≥max{GST,GAT}; C[max{GST,GAT},t]=A[0,t]
min
t.
(32)
Proposition 4. There exists a constant C such that
for
any given security parameter σ and GST, GAT speciﬁed by
(A∗
1,Z1),
T ≤ C(max{GST, GAT} + σ)
(33)
the following statement
except with probability e−Ω(σ).
Proof. From Corollary 1, we know that given a constant
 > 0,
is true for any s > 1
except with probability Ce−cs: For any GST and GAT
speciﬁed by (A∗
1,Z1), the number of adversarial slots by
max{GST, GAT}, A[0, max{GST, GAT}], is less than (1 +
)β max{s, GST, GAT}. Moreover, Proposition 3 implies that
for any positive integer Ne and  > 0, there exist positive
constants ˜C and ˜c such that
Pr[A[0, t] + Ne ≤ C[0, t]] ≥ 1 − e−˜cNe
(34)
where t = ˜CNe.
Next, we ﬁx some  > 0 and set s = σ where σ is our
security parameter. Then, for any GST and GAT speciﬁed by
(A∗
1,Z1), the number of adversarial slots by max{GST, GAT}
is upper bounded by
(1 + )β max{σ, GST, GAT}
≤ (1 + )β(σ + max{GST, GAT})
except with probability e−Ω(σ). Furthermore, setting
Ne = (1 + )β(σ + max{GST, GAT}),
we can assert that
Pr[A[0, t] ≤ C[max{GST, GAT}, t]]
≥ 1 − e−˜cσ − Ce−cs = 1 − e−Ω(σ)
for
t = max{GST, GAT}
+ ˜C(1 + )β(σ + max{GST, GAT}).
(35)
(36)
(37)
(38)
by (A∗
Finally, we conclude that for any GST and GAT speciﬁed
1,Z1), C[max{GST, GAT}, t] ≥ A[0, t] for
t = GST + ˜C(1 + )2β(σ + max{GST, GAT})
(39)
except with probability e−Ω(σ). Hence, there is a constant C >
0 such that for any given security parameter σ, GST and GAT,
T ≤ C(max{GST, GAT} + σ)
(40)
except with probability e−Ω(σ).
Finally, we have all the components to start the proof of
Theorem 2. The proof uses the same concepts as (TG, g0, g1)-
chain growth, (TQ, µ)-chain quality and TC-safety introduced
in Sections 3.2.1, 3.2.2 and 3.2.3 of [3], respectively.
21
Proof. First, recall the deﬁnition of T as the minimum time
t ≥ max{GST, GAT} such that C[max{GST, GAT}, t] =
A[0, t]. Due to Proposition 4, there exists a constant C > 0
such that for any given security parameter σ,
T ≤ C(max{GST, GAT} + σ)
(41)
except with probability e−Ω(σ).
From [3, Theorem 5, Corollary 4], we know that within
any time period [s, t] such that t − s is a polynomial of
σ, there exists a strong pivot as given in [3, Deﬁnition 5]
except with probability e−Ω(
σ). Observe that if s > T , then
any strong pivot in the interval [s, t] is also a GST-strong
pivot. Consequently, within any time period [s, t] such that
s > C(max{GST, GAT}+σ), there exists a GST-strong pivot
√
except with probability e−Ω(
√
σ) + e−Ω(σ) = e−Ω(
σ).
√
√
Via Proposition 1, a GST-strong pivot at time t forces the
convergence of the longest chains seen by all honest nodes
up till some time t − O(1). Then, using [3, Theorem 7],
Proposition 1 and the observations above, we infer that Πlc(p)
is σ-consistent after time C(max{GST, GAT} + σ) except
with probability e−Ω(
σ). Moreover, σ-consistency of Πlc(p)
after time C(max{GST, GAT} + σ) implies,
through [3,
Lemmas 3, 4 and 8], that for any  > 0, Πlc(p) satisﬁes
(σ, g0, g1)-chain growth and (σ, µ)-chain quality after time
√
C(max{GST, GAT} + σ), except with probability e−Ω(
σ),
where g0, g1 and µ are constants that depend on the parameters
of Πlc(p) and (A∗
1,Z1). Speciﬁcally, g0 = (1−)α(1−2pn∆).
Finally, using [3, Lemma 1] and its proof, we conclude that
if Πlc(p) satisﬁes (TG, g0, g1)-chain growth, (TQ, µ)-chain
quality and TC-safety after time C(max{GST, GAT} + σ),
then, it is secure with conﬁrmation time
Tconﬁrm ≤ O
g0
+ ∆
(cid:18)
(42)
after time C(max{GST, GAT} + σ). Consequently, Πlc(p) is
secure with conﬁrmation time
3σ
(1 − )α(1 − 2pn∆)
(43)
after time C(max{GST, GAT} + σ) except with probability
e−Ω(
σ). This concludes the proof.
Tconﬁrm ≤ O
= O(σ),
(cid:19)
+ ∆
√
(cid:18) TG + TQ + TC
(cid:19)
,
APPENDIX D
ANALYSIS AND SECURITY PROOF FOR THE
SNAP-AND-CHAT CONSTRUCTION USING HOTSTUFF
In this section, we prove Theorem 1 for the protocol
Πsac composing a permissioned longest chain protocol and
HotStuff. Note that the safety and liveness proofs for HotStuff
as presented in [11] remain unaffected by the composition with
Sleepy. Hence, using [11, Lemma 1, Theorem 2, Lemma 3,
Theorem 4], we can replace the safety and liveness lemmas for
Πbft given in Section III-C by the following lemmas derived
from [11] under the model (A∗
Lemma 6 (Safety Lemma for Πbft). If B1 and B2 are two
conﬂicting BFT blocks, then they cannot be both ﬁnal in the
view of any honest node.
1,Z1) (cid:44) (A1( 1
3 ),Z1).
Proof is by [11, Lemma 1, Theorem 2], which remain
unaffected by the composition. Lemma 6 shows the safety
of Πbft at all times.
Lemma 7 (Liveness Lemma for Πbft). There exists a bounded
time period Tf after max{GST, GAT} such that if all honest
nodes remain in some view v during Tf and v has an honest
leader, then a new BFT block becomes ﬁnal over v.
Since the network delay is bounded and all of the honest
nodes are awake after max{GST, GAT}, the proof follows
from [11, Lemma 3, Theorem 4].
Observe that the proof of Theorem 2 stays the same since we
use the same Πlc protocol as Section III-B. Hence, combining
Lemma 7 and Theorem 2, we can assert the liveness of LOGﬁn
after max{GST, GAT} as shown below.
Lemma 8 (Liveness Lemma for LOGﬁn). There exists a
constant C > 0 such that for any GST and GAT speciﬁed by
(A∗
1,Z1), LOGﬁn is live after time C(max{GAT, GST} + σ)
√
except with probability e−Ω(
there exists a constant C > 0
Proof. Via Theorem 2,
such that for any GST and GAT speciﬁed by (A∗
1,Z1),
Πlc is safe and live, with conﬁrmation time σ, after time
√
C(max{GAT, GST} + σ) except with probability e−Ω(
σ).
Hence, the following observation is true for any LC block b ex-
√
cept with probability e−Ω(
σ): If b is ﬁrst viewed as conﬁrmed
by an honest node at some time t > C(max{GAT, GST}+σ),
then, it will be regarded as conﬁrmed in the views of all of
the honest nodes by time t + ∆.
σ).
√
Now, if an honest leader sends a message that points to a
BFT block B at some time t and in some view v, then the
LC block referenced by B must be conﬁrmed in the view
of this leader at time t. Then, by the above observation, if
t > C(max{GAT, GST} + σ), all honest nodes would see the
LC block referenced by B as conﬁrmed and add B to their
blocktrees, by time t + ∆, except with probability e−Ω(
σ).
Hence, after time C(max{GAT, GST} + σ), the requirements
outlined in line 12 of Algorithm 2 can be modeled by a ∆
delay. In other words, every BFT block pointed by the message
of an honest node enters the blocktree of every honest node
at most ∆ time after the ﬁrst such message.
Via Lemma 7, there exists a bounded time period Tf after
max{GST, GAT} such that if all honest nodes remain in some
view v during Tf and v has an honest leader, then a new
BFT block becomes ﬁnal over v. Then, we can assert the
following statement for Πbft except with probability e−Ω(
σ):
If all honest nodes remain in some view v during a time period
[s, s + Tf ] such that s > C(max{GAT, GST} + σ) and v has
an honest leader, then a new BFT block becomes ﬁnal over v.
Since HotStuff implements a round robin leader section and an
exponential back-off mechanism for view change, there will be
a view v with an honest leader within a constant time Tbounded
after C(max{GAT, GST} + σ) such that the honest nodes will
remain in view v for longer than time Tf.
Finally, let σ > 2(Tbounded + Tf ) and consider a time inter-
val [s, s + σ] such that s > C(max{GAT, GST} + σ). Observe
√
22
that since σ/2 > Tbounded+Tf and s > C(max{GAT, GST}+
σ), a new BFT block b becomes ﬁnal in the interval [s +
√
σ/2, s+σ] except with probability e−Ω(
σ). Moreover, via the
liveness of Πlc after C(max{GAT, GST} + σ), a transaction
tx received by an awake honest node at
time s will be
included in a conﬁrmed LC block b(cid:48) in the view of all honest
nodes by time s + σ/2 except with probability e−Ω(
σ). Via
the safety of Πlc, we know that b extends b(cid:48) containing the
√
transaction tx except with probability e−Ω(
σ). Consequently,
any transaction received by an honest node at some time
s > C(max{GAT, GST} + σ) becomes part of the ledger
LOGﬁn in the view of any honest node i by time s + σ, except
with probability e−Ω(σ)+e−Ω(
σ). This concludes
the proof.
√
σ) = e−Ω(
√
√
Finally, recall Figure 7, and observe that Lemma 7 (box
2) and Theorem 2 (box 3) imply Lemma 8 (box 4) whereas
the Lemmas 6 (box 1) and 8 imply the security of LOGﬁn
outputted Πsac (box 5). Moreover, the proof of the security
of LOGda stays the same as we use the same Πlc protocol as
Section III-B. Hence, we conclude the proof of Theorem 1 for
Πsac.
APPENDIX E
BOUNCING ATTACK ON CASPER FFG
Applications of Casper FFG are two-tiered. A blockchain
serves as dynamically available block proposal mechanism,
and Casper FFG is a voting-based BFT-style overlay protocol
to add ﬁnalization on top of said blockchain. Usually, only
some ‘checkpoint’ blocks are candidates for ﬁnalization, e.g.,
blocks at depths that are multiples of 100. First, a checkpoint
becomes ‘justiﬁed’ once two-thirds vote for it. Subsequently,
roughly speaking, a justiﬁed checkpoint becomes ﬁnalized
once two-thirds vote for a direct child checkpoint of the jus-
tiﬁed checkpoint. To ensure consistency among the two tiers,
the fork choice rule of the blockchain is modiﬁed to always
respect ‘the justiﬁed checkpoint of the greatest [depth]’ [22].
There is thus a bidirectional interaction between the block
proposal and the ﬁnalization layer: blocks proposed by the
blockchain are input to ﬁnalization, while justiﬁed checkpoints
constrain future block proposals. This bidirectional interaction
is intricate to reason about and a gateway for liveness attacks.
The bouncing attack [28], [29] exploits this bidirectional
interaction to attack liveness of the overall protocol as follows
(see Figure 14). Suppose there are two competing chains, ‘left’
and ‘right’, with checkpoints shown as squares in Figure 14.
A square’s label represents the number of votes for that
checkpoint, in a system with n = 100 total and f = 10
adversarial validators. The initial setting of blocks and votes
could be produced, e.g., during a period of asynchrony in
which the adversary controls message delivery in its favor.
‘Left’ has the deepest justiﬁed checkpoint and is thus chosen
by the fork choice rule of honest validators. At the same time,
‘right’ has a deeper checkpoint which is not yet justiﬁed but
can be justiﬁed by the adversary whenever it casts its f = 10
votes for the respective checkpoint depth. Once ‘left’ advances
23
70
30
30
60
Fork
choice
30
60
70
30
60
Fork
choice
Adversary can release
f = 10 votes to justify
70
30
60
30
70
0
70
30
60
30
70
30
...
Fork
choice
Fork
choice
Fig. 14. By releasing withheld Casper FFG votes late, the adversary can
force honest validators to adopt a competing chain, due to the modiﬁcation
of the fork choice rule to respect ‘the justiﬁed checkpoint of the greatest
[depth]’. Over longer periods of time, the adversary forces honest validators
to switch back and forth between a ‘left’ and a ‘right’ chain and thus liveness
of ﬁnalizations is disrupted.
to a new checkpoint depth, and accumulates enough votes so
that the adversary could again justify that new checkpoint
in the future by releasing its f = 10 votes, the adversary
releases its votes for the competing checkpoint of ‘right’ on the
previous checkpoint depth. The deepest justiﬁed checkpoint is
now on ‘right’, and honest validators switch to propose new
blocks on ‘right’. Note that the chains are now already set up
such that the adversary can bounce honest validators back to
‘left’ once ‘right’ advances to a new deepest checkpoint depth.
As a result, a single brief period of asynchrony sufﬁces to
set the consensus system up such that both chains grow in
parallel indeﬁnitely. No checkpoint will ever be ﬁnalized, the
protocol stalls. What is more, since the fork choice ﬂip-ﬂops
between the two chains, the underlying blockchain is rendered
unsafe by the modiﬁed fork choice rule. The bidirectional
interdependency of Casper FFG and the blockchain gives the
adversary major leverage over honest nodes on the proposal
layer and thus enables this attack.
In contrast, an isolated partially synchronous BFT-style
protocol, akin to Casper FFG, would have eventually recov-
ered from the period of asynchrony and regained liveness,
while remaining safe throughout. Similarly, an isolated typical
dynamically available longest-chain protocol with intact fork
choice rule could have suffered from security violations during
and shortly after the period of asynchrony, but would have
‘healed’ eventually, i.e., from some point on, no more safety
violations occur and transactions get included in the ledger.