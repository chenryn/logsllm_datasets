### Database Encryption and Performance

In all configurations except PSQL, when performing modifications to the database, we encrypt the account balance before storing it. When retrieving the account balance, we decrypt it to recover the plaintext.

### Benchmark Results

Table 8 presents the benchmark results for transactions per second (TPS) carried out by the server across four database configurations and three transaction types. For the most complex transaction type (USUUI), the +FPE configuration reduces TPS by only 0.8% compared to the +AE configuration. For the simplest query type (S), +FPE reduces TPS by only 1.1% compared to +AE. Compared to the +AES configuration, both +AE and +FPE reduce TPS by approximately 72%. This is not surprising, as the +FPE configuration relies on FFX, which in turn calls AES at least ten times.

### Latency Analysis

Table 9 shows the average latency for each of the five different query types, measuring the time elapsed between a client request and the server response. Compared to the +AE configuration, +FPE introduces no substantial additional latency.

#### Table 9: Average Latency per Query for Each Database Configuration
| Query Type | PSQL (ms) | +AES (ms) | +AE (ms) | +FPE (ms) |
|------------|-----------|-----------|----------|-----------|
| (U) accounts | 0.6 | 1.2 | 2.1 | 2.1 |
| (S) accounts | 0.4 | 0.5 | 1.0 | 1.0 |
| (U) tellers | 412 | 412 | 415 | 420 |
| (U) branches | 78 | 80 | 80 | 84 |
| (I) history | 0.2 | 0.2 | 0.2 | 0.2 |

### Simultaneous Encryption and Compression

As a final test, we deployed a T-DD scheme in our PostgreSQL database to provide simultaneous privacy and compression. We augmented the default pgbench database schema to add a new table for credit card numbers, with two columns: an account number (integer) and a credit card number field (bytea). We did not add any indexes to this table.

We started with the four configurations from our initial benchmarks but changed the +FPE configuration to a P-DD scheme that encrypts 16-digit credit card numbers in-place, calling this +FPECC. We also introduced a new configuration, +FTECC, a T-DD scheme where the input format is a 16-digit credit card number and the output format is a set of all 7-byte strings.

For each configuration, we populated the database with 1 million random credit card numbers. Table 10 provides a breakdown of the query cost to retrieve 100 credit card numbers at random (and decrypt if required) and the total size of the new credit card table. Compared to the +AES and +AE configurations, our +FTECC configuration requires 35% and 62.5% less space, respectively. Additional compression may be possible in the PSQL and +FPECC settings, but such optimizations are not feasible in the +AES and +AE configurations.

#### Table 10: FTE for Simultaneous Encryption and Compression
| Configuration | Table Size (MB) | Query Avg. (ms) |
|---------------|-----------------|-----------------|
| PSQL          | 50              | 74              |
| +AES          | 65              | 92              |
| +AE           | 112             | 112             |
| +FPECC        | 50              | 125             |
| +FTECC        | 42              | 110             |

### Web Forms

Next, we present a Firefox extension powered by libfte. The extension encrypts sensitive contact information, client-side, in a Yahoo address book contact form before submission to the remote Yahoo servers.

#### Browser Extension
- **Tested with:** Firefox version 26
- **API:** C++-to-JavaScript compiled libfte API
- **Logic Implementation:** Approximately 200 lines of code to locate page elements for encryption/decryption.
- **Yahoo-Specific Logic:** Mappings between form fields and FPE/FTE schemes.
- **Field Mapping:** Manually specified using unique identifiers (e.g., CSS id tags) and mapped to their corresponding P-DD FPE scheme in JavaScript.
- **Input/Output Formats:** Determined through a proof-of-concept approach, progressively relaxing constraints until accepted by Yahoo's server-side validation.

The Firefox extension exposes an "encrypt/decrypt" drop-down menu. Users can press the "encrypt" button to automatically encrypt all fields in the form before saving a new contact. To recover the encrypted data, users visit the contact page and press the "decrypt" button.

### Network Monitors

Finally, we focus on building T-xx-$ schemes by lifting regular expressions from the Snort IDS. The Snort corpus of regular expressions is the largest and most diverse publicly available set used for deep-packet inspection.

#### Corpus Evaluation
- **Corpus Construction:** Extracted 6,277 regular expressions from the official Snort ruleset (version 2955, released Jan 14, 2014).
- **Compilation:** 3,458 regular expressions compiled with our parser.
- **Scheme Instantiation:** Attempted to build T-DD-$ and T-DN-$ schemes with an output format \( F \) and an input format that is a \( \log_2 |L(F)| \)-bit string.

Figure 12 plots the cumulative distribution function (CDF) of the fraction of the Snort corpus that can be instantiated for a given memory threshold. At 1MB, roughly 60% of the corpus can be instantiated using T-DD-$, compared to 85% with T-DN-$. At 5MB, T-DN-$ reaches 97%, and T-DD-$ reaches 92%. At 143MB, T-DN-$ can instantiate 100% of the corpus, while T-DD-$ can only reach 97.0% at 1GB.

#### Memory Utilization
- **T-DD-$:** Required 8.8GB of memory to instantiate all regular expressions.
- **Best-Case Scenario:** Using the minimum of T-DD-$ or T-DN-$ memory utilization, reduced memory usage to 6.2GB, a 30% reduction.

### Conclusion

In this paper, we presented a unifying approach for deploying format-preserving encryption (FPE) and format-transforming encryption (FTE) schemes via libfte. The library includes an offline configuration assistant and an API for instantiating such schemes. Our work overcame several obstacles, including the ability to perform FPE/FTE directly from the NFA representation of a regular expression, previously considered impractical. This significantly increases the expressiveness of regular languages for FTE and improves system efficiency, making FTE a viable cryptographic option in contexts where it was not previously feasible. Empirical studies in various application contexts show that libfte typically introduces negligible performance overhead and, in some cases, even enables substantial performance improvements.

### References

[References listed here as in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.