title:Mitigating Distributed Denial of Service Attacks with Dynamic Resource
Pricing
author:David Mankins and
Rajesh Krishnan and
Ceilyn Boyd and
John Zao and
Michael Frentz
Mitigating Distributed Denial of Service Attacks
with Dynamic Resource Pricing
David Mankins, Rajesh Krishnan, Ceilyn Boyd, John Zao, Michael Frentz
BBN Technologies
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract
Distributed Denial of Service (DDoS) attacks exploit the
acute imbalance between client and server workloads to
cause devastation to the service providers. We propose a
distributed gateway architecture and a payment protocol
that
imposes dynamically changing prices on both
network, server, and information resources in order to
push some cost of initiating service requests — in terms
of monetary payments and/or computational burdens —
back onto the requesting clients. By employing different
price and purchase functions,
the architecture can
provide service quality differentiation and furthermore,
select good client behavior and discriminate against
adversarial behavior. If confirmed by additional exper-
iments, judicious partitioning of resources using different
pricing functions can improve overall service surviva-
bility.1
1. Introduction
Denial of Service continues to be a pervasive
problem for Internet services, as evidenced by the recent
denial of service at CERT[BBC01]. Such attacks require
each attacking machine to perform only a small amount
of work, relying on the cumulative efforts many machines
to overload the victim machine. Attacks range from
simple ICMP ping requests to sophisticated attacks that
are difficult
to distinguish from a sudden spike in
legitimate use (a.k.a. “flash crowd” [Niv73] or “the
Slashdot Effect”).
In a DDoS attack, the perpetrator(s) may spend weeks
or months subverting hundreds or thousands of machines
by exploiting well-known security flaws. Once the
machines are subverted, the perpetrator installs tools to
execute an attack. On command, the prepared machines
(known as “zombies”) collectively target a specified
victim with a packet
repeated
datagram packet requests. These packets may take many
storm consisting of
1 This research is supported by DARPA contract F30602-
00-C-0088
forms, such as an ICMP ping request, a UDP packet (such
as a DNS request), or TCP SYN floods. The packets may
also have forged return addresses, allowing one machine
to generate requests that appear
to be coming from
hundreds of machines, and making the sources of the
attack difficult to trace. This problem may intensify since
newer operating systems that are being introduced may
make it easier to spoof IP addresses [Gib01]. Halting
these attacks is difficult and typically relies on filtering at
the router (or just waiting out the “packet storm”).
Packet-flood attacks, such as these, are the most
widely diagnosed today [CAIDA01]. As measures to
counteract them are put in place, future attacks will most
likely include resource depletion attacks that are more
difficult
to distinguish from legitimate requests. The
effectiveness of an attack will be driven by the resource
most tightly constrained relative to the attack parameters.
The attack could focus on a single server within an
enclave (or on the pipes themselves).
service
propose
survivability. We
In this paper, we explore the use of dynamic resource
pricing strategies to mitigate various DDoS attacks and to
improve
an
experimental architecture and protocol for a Market-based
Service Quality Differentiation (MbSQD) system. We
have prototyped the MbSQD system using the ns-2
simulator [NS2], and have experimented with various
price-based controls for DDoS mitigation. These include
both proof-of-work based approaches that exact a price in
terms of a computational burden or monetary-like
micropayments. The MbSQD system is designed to work
as an overlay on existing network security infrastructure,
but similar concepts could also be applied at the lower
networking layers (e.g.
in conjunction with Diffserv/
RSVP).
1.1 Existing DDoS mitigation strategies
Various methods have been used to mitigate the
effects of DDoS attacks − each has its drawbacks and
advantages. Some of these methods are:
•  Detecting and eliminating subverted nodes on
local subnets
•  Choking off the flow of attack packets
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
•  Using resource mirrors to amplify server capacity
•  Reducing the amount of resources consumed
•  Monitoring traffic volume
•  Tracing attack packets though the Internet
Detecting subverted nodes has become increasingly
difficult as many of the newer attacks encrypt commands
to hide them from security scanning processes.
require
active maintenance
Stopping the flow of attack packets at a choke point
relies on ingress or egress filtering. The effectiveness of
these techniques is dependent on good practices by the
ISPs
by
and may
the leaf routers of a customer site.
administrators at
Additionally,
these methods may discard legitimate
packets during asymmetric or changing routing conditions.
the attacks
affect only a fraction of the users of the service, can lessen
the impact of attacks (e.g. Akamai’s method of caching
content in “edge proxies” scattered around the edges of
the net), however this solution is relatively expensive and
may be reasonable only for larger content providers.
Establishing resource mirrors, so that
at
times
There are various methods that attempt to reduce the
amount of resources consumed during a DDoS attack.
NetBSD will accelerate its timeouts of partially opened
TCP connections
contention. Linux
implementations save no state when receiving a TCP SYN
− instead, the initial sequence number is derived from
information that will be available in the return packet from
the
The
effectiveness and availability of these techniques is highly
implementation dependent.
connecting machine
(SYN Cookies).
of
Monitoring traffic volume to look for suspicious
traffic destined for a particular destination can be limited
by traffic flow confidentiality techniques.
Attacking DDoS Packets may be traced backwards to
their source by augmenting the capabilities of routers.
Responsible ISPs or
system administrators can be
contacted to shut the attacks off at their sources (see for
example, [Sno01]). Such mechanisms work after-the-fact;
however, they may serve as deterrents.
2. Technical Approach
that any single client can cause. This characterization
suggests that an economics-based approach to establish a
the services may provide a fairer
“marketplace” for
allocation of
the currency’s
availability can be effectively allocated by the service
provider
to its customers (and kept away from its
detractors).
resources, provided that
To make services more robust against a DDoS attack,
we propose the following combination of strategies:
1.
Increase the barrier to entry by using a pricing-based
scheme in which the price of entry varies with the
load level. This will throttle the machines used in the
attack,
thereby forcing the attacker to employ (or
subvert) a larger number of machines.
2. Use a differentiated model. Provide prioritized access
to classes of users; though a DDoS attack will raise
the price so high that lower priority classes get locked
out, higher priority clients can still access the service.
Allocating a priority mechanism to desirable clients is
key.
3. Use a dynamic, differential pricing mechanism to
penalize clients that are responsible for a load on the
server. This typically requires flow monitoring and
isolation capabilities in line with those of Diffserv
[Ful00][Arq] [Bla98].
None of these strategies are sufficient in isolation —
situations can be defined where each may contribute to
increasing the availability of the network services.
2.2 Types of Micro-payments
Micro-payments can provide a useful side benefit by
providing a uniform means of
resource accounting,
pricing, and arbitration. Micro-payment mechanisms must
not impose an undue performance penalty − in the absence
of an attack, the performance should be nearly comparable
to a system that does not use the payment mechanisms.
There is prior work on how pricing can be used to
influence consumer behavior, how to integrate pricing
mechanisms with OS and network resource management
mechanisms. In this paper, we instead focus on how
pricing strategies can be used to mitigate DDoS, and
improve overall service survivability.
2.1 General Observations about DDoS Attacks
2.2.1 Fungible vs. Non-fungible Micro-payments
create
attacks
shortages of
Denial-of-service
a
resource such as bandwidth or computing cycles through
the creation of an artificial demand. They work because
the “cost” of the transaction falls overwhelmingly on the
server. Sophisticated DDoS attacks also can be virtually
indistinguishable from genuine overload (at least at the
time of the attack) due to the limitations of the information
available and the kinds of analysis possible in real-time.
A mechanism is necessary to transfer a corresponding
burden to the requesting client and to control the damage
There have been a number of digital payment and
micro-payment
schemes proposed to support digital
exchanges [Riv97]. These have been primarily proposed
to support digital commerce, but some researchers have
also looked at the use of payment schemes as a means of
mitigating denials of service.
Fungible (or transferable) digital payment schemes
range from anonymous cash schemes such as David
Chaum's Digicash [Digi] [Cha83], to electronic checks
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
and payments [Pay], postage [Hash], to bartering services
(as in Mojo Nation [Mojo]).
Cash-like schemes do not require on-line verification
− the server can validate the coin by examining it. They
therefore have low latency with respect to coordination
with external servers, however the validation process
typically requires significant computation or memory
usage overhead for the server itself. As a result, high
integrity cash-like
payment
schemes may not be
compatible with fielded servers.
Many of the alternative fungible payment schemes are
analogous to a check or credit card transaction and require
some type of on-line verification of payment − a server
must connect online with a bank and verify the
creditworthiness of the requester. On-line verification is
susceptible to high latency and provides an alternative
critical path target for DoS.
Scrip-based systems are an attempt
to reduce the
latency of verification by making the verification a purely
local operation on the server. These systems, such as
Compaq's Millicent [Milli], are intended for ultra-micro-
payments (on the order of thousandths of a penny). In
Millicent, a server issues (or mints) its own scrip to be
used by clients to pay for services. Since the server issues
the scrip, it can verify it with very low latency (possibly
requiring as little as a table lookup). Clients obtain a
quantity of scrip from network scrip brokers using one of
the high-overhead bulk-payment schemes geared for larger
expenditures. Millicent allows a server to give a client
change (which the client may later redeem with their
broker).
Another way of escaping the need of on-line
verification is to extract a payment in the form of “work”
computation [Dwo92][Jue99][Jak99][Hash]. The
or
server sets a computational task to the client that must be
solved before server resources are expended on the client's
task. To be useful, the task must be computationally hard
to solve, but a solution must be simple to verify e.g.,
factoring a large number — the size of the number is
determined by the prices of the service, which in turn
reflects the load (demand) on the server.
2.2.2 Convertible vs. Non-convertible Currencies
A non-convertible currency scheme has a limited
scope where it can be used and cannot be exchanged for
other types of currency. A convertible currency on the
other hand can be exchanged for other types of currency.
The former is useful
to permit priority access to
specific resources for a particular subset of known
potential users (e.g. a military squadron). The latter has
advantages in situations requiring high priority access for
a dynamically changing subset of potential users drawn
from a general population.
2.3 Dynamic Resource Pricing as Discriminants
As the logical next step, we implement a dynamic
pricing strategy that can favor good user behavior and
discriminate against aggressive adversarial behavior.
In our model, we have a time-varying price function
for each service. The price function relates the price of the
service to supply, demand and other factors.
Each user has a utility function that determines how
much they are willing to pay for a unit of a given service
as well as how many units they will consume at a given
price at any given time. The cumulative effect of the utility
functions drives the overall demand for
the service.
Furthermore, the spending behavior can be monitored in a
distributed fashion for anomalies.
Selection of one particular user behavior over another
occurs due to interplay of the price and utility curves.
While the idea of using pricing to mold user behavior is
known, our approach extends this idea to discriminate
against adversarial behavior.
Consider the following scenario of a web server. A
number of different kinds of attacks can be launched
against a web server. These include exploiting OS and
protocol stack vulnerabilities such as SYN floods and
buffer overflows, connection depletion attacks using idle
connections, depleting server resources using requests that
are expensive to process, inundating the request queue
with bogus connections, and depleting network bandwidth
by requesting large volumes of different pricing strategies
are required to protect against each of these attacks,.
A robust pricing function may monitor numerous user
indicators. Even if individual users remain anonymous,
control can be exercised at the granularity at which the
flows can be isolated and monitored. For example, pricing
controls can still be exerted at the level of the originating
ISP. Resources can be partitioned between anonymous
users
can protect
themselves by using similar price controls and other
monitoring within their administrative domains. Adoption
of egress filtering and IP trace back can further aid in
enforcing such controls.
and long-term subscribers.
ISPs
Pricing functions must be robust against any potential
new attacks enabled due to the pricing strategy itself. For
example, care must be taken that an adversary is not able
to populate the system with fake requests when the price is
low and increase the price for legitimate users. This means
that a pricing function that is robust against connection
depletion attacks must necessarily limit the connection
duration and require that each connection be refreshed
periodically to protect against zombies.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:10 UTC from IEEE Xplore.  Restrictions apply. 
2.4 Price-based Service Quality Differentiation
and Survivability
We have discussed how different pricing functions
can be used to select different kinds of user behavior,
thereby protecting against some classes of attacks. A
single price function is unlikely to provide sufficient
service quality differentiation necessary to satisfy a wide
range of user requirements. Furthermore, a single pricing
function is unlikely to protect the system against all forms
of attack.
Therefore we propose to partition and isolate the
available resources among various service classes. For
example, in the case of a network router, weighted fair
queuing can be used to partition resources. Resources can
also be isolated using VPNs. Server
resources can
similarly be partitioned and isolated among service classes
by using OS prioritized scheduling techniques and by
virtual OS techniques respectively.
We hypothesize that the survivability of the system
can be further enhanced by associating different partitions
with different discriminants (pricing functions) that are
robust against different classes of attacks. With this
approach, a successful resource depletion attack will not
only require more resources, but also the simultaneous
launch of different forms of attack for each service class.
Possible extensions of this strategy include dynamic
policy iteration that progressively improves robustness
against a larger class of attacks or a randomized policy
iteration that makes it harder for the adversary to guess the
pricing function and determine efficient attack strategies.
3. System Architecture
Figure 3-1 illustrates the operational architecture for
the MbSQD system. The MbSQD system employs a
distributed architecture with three distinct features:
1. Deployment
resource
brokers
of
at
to control
application proxies
network
boundaries: MbSQD will use stateful packet filters
and/or
resource
utilization at the logical boundaries of user subnets
(on either the provider’s or the client’s sites). This
architecture has the following advantages:
a) The operation of client and server applications
will not be affected by the deployment of the
traffic control system; in fact, both clients and
servers may not be aware of its presence except
due to apparent changes in network throughput
and device performance. No modification of end-
node protocols and applications is necessary.
b) The architecture may be used to control
the
utilization of both network and information
resources including network throughput, server
capacity, information access and device usage.
the border
The brokers may be installed at
gateways of autonomous systems if they are
inter-domain traffic
intended to be used for
control, or they can be placed at
the “choke
points” of server access if they are used to
control information access and/or device usage.
c) Price-based resource management can be made
mandatory in order to obtain the highest priority
access privileges.
2. Employment of client-side defined price and purchase
decision functions: MbSQD achieves rapid control of
resource utilization by relying on the interactions
between the dynamic pricing of resources and the
autonomic purchase decisions made by individual
clients. By employing different pricing functions,
MbSQD can favor the clients that exhibit desired
behaviors or use certain forms of purchase decision
functions. This behavioral discrimination is a unique
feature of the dynamic pricing scheme.
and
service
request
conduct
3. Operation with TCP-integrated payment protocols:
MbSQD uses a three-message handshake protocol to
initiate
payment
transaction; it also uses two-message handshakes to