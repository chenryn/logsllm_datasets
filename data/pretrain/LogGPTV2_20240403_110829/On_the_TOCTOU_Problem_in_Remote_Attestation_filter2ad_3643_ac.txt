holds:
≡ ARmin ≤ Daddr ≤ ARmax
Daddr ∈ AR
Mod_Mem(x) ≡ (Wen ∧ Daddr = x) ∨ (DMAen ∧ DMAaddr = x)
(3)
this captures the fact that a memory modification can be caused
by either the CPU (reflected in signals Wen = 1 and Daddr = x)
or by the DMA (signals DMAen = 1 and DMAaddr = x). We also
use this notation to represent a modification to a location within a
contiguous memory region R as:
Mod_Mem(R) ≡ (Wen ∧ Daddr ∈ R) ∨ (DMAen ∧ DMAaddr ∈ R)
(4)
Table 1: Notation
PC
Ren
Wen
Daddr
DMAen
DMAaddr
irq
CR
MR
AR
LMT
CRAuth
setLMT
U PLMT
Current Program Counter value
Signal that indicates if the MCU is reading from memory (1-bit)
Signal that indicates if the MCU is writing to memory (1-bit)
Address for an MCU memory access
Signal that indicates if DMA is currently accessing memory (1-bit)
Memory address being accessed by DMA, if any
Signal that indicates if an interrupt is happening
Memory region where SW-Att is stored: CR = [CRmin, CRmax ]
(MAC Region) Memory region in which SW-Att computation result is writ-
ten: MR = [MRmin, MRmax ]. The same region is also used to pass
the attestation challenge as input to SW-Att
(Attested Region) Memory region to be attested. Corresponds to
all executable memory (program memory)
=
[ARmin, ARmax ]
(Latest Modification Time) Memory region that stores a timestamp/chal-
lenge corresponding to the last AR modification
The first instruction in VRASED SW-Att that is executed after successful
authentication of Vrf request.
(RAT AA) A 1-bit signal overwrites LMT with the current RTC time,
when set to logical 1.
(RAT AB ) A 1-bit signal overwrites LMT with the content of MR when
set to logical 1.
in the MCU: AR
4.2 TOCTOU-Security Definition
Definition 4.1 captures the notion of TOCTOU-Security. In it, the
game formalizes the threat model discussed in Section 3.2, where
Adv controls Prv entire software state, including the ability to
invoke Attest at will. The game starts with the challenger (Vrf)
choosing a time t0. At a later time (tatt ), Adv receives Chal and
wins the game if it can produce HAdv that is accepted by Verify as
a valid response for expected AR value M, when, in fact, there was
a time between t0 and tatt when AR (cid:44) M.
This definition augments RA security (Definition 3.2) to incorpo-
rate TOCTOU attacks, by allowing Adv to succeed if it produces the
expected response, even though AR was modified at any point after
t0, where t0 is chosen by Vrf. For example, if Vrf wants to know
if AR remained in a valid state for the past two hours, Vrf chooses
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2925Definition 4.1.
4.1.1 RA-TOCTOU Security Game: Challenger plays the following game
with Adv:
to Attest calls.
(1) Challenger chooses time t0.
(2) Adv is given full control over Prv software state and oracle access
(3) At time tat t > t0, Adv is presented with Chal.
(4) Adv wins if and only if it can produce HAdv, such that:
Verify(HAdv, Chal, M, · · ·) = 1
∃t0≤ti ≤tat t {AR(ti) (cid:44) M }
where AR(ti) denotes the content of AR at time ti .
4.1.2 RA-TOCTOU Security Definition: An RA scheme is considered
TOCTOU-Secure if – for all PPT adversaries Adv – there exists a negligible
function negl, such that:
and
(5)
(6)
Pr[Adv, RA-TOCTOU-game] ≤ negl(l)
where l is the security parameter.
t0 as t0 = tatt − 2h. Note that this definition also captures security
against transient attacks wherein Adv changes modified memory
back to its expected state and leaves the device, thus attempting
to hide its ephemeral modification from the upcoming attestation
request. This attack is undetectable by all RA schemes that are not
TOCTOU-Secure.
Remark 2: Recall that AR corresponds to the executable part of Prv
memory, i.e., program memory. Since data memory is not executable
(see Section 3.1), changes to data memory are not taken into account
by Definition 4.1. RAT A relation to runtime/data-memory attacks is
discussed in Section 8.4.
4.3 TOCTOU-Secure RA vs. Consecutive
RA schemes based on consecutive self-measurements [12, 26] at-
tempt to detect transient malware that comes and goes between
two successive RA measurements. The strategy is for Prv to inter-
mittently (based on an either periodic or unpredictable schedule)
and unilaterally invoke its RA functionality. Then, either Prv self-
reports to Vrf [26], or it accumulates measurements locally and
waits for Vrf to explicitly request them [12]. Upon receiving RA
response(s), Vrf checks for malware presence at the time of each
RA measurement. Time intervals used in these RA schemes are
depicted in Figure 2.
Self-Measurements
Vulnerability Windows
Attest.
Compute.
Memory
Integrity
Capp
CRA
Capp
CRA
Capp
CRA
Capp
Time
Figure 2: Consecutive Self-Measurements
Clearly, all self-measument schemes always leave some time
between consecutive RA instances, during which transient mal-
ware presence would not be detected. The only way to detect all
transient malware with self-measurement schemes is to invoke RA
functionality on Prv with a sufficiently high frequency, such that
the fastest possible transient malware can not come and go unde-
tected. However, even if it were easy (which it is not) to determine
such “sufficiently high frequency”, doing so would be horrendously
costly, as we show below. We define CPU utilization (U ) in a con-
secutive scheme as the percentage of CPU cycles that can be used
by a regular application (Capp), i.e, cycles other than those spent
on self-measurements (CRA):
U =
Capp
Capp + CRA
(7)
106
As discussed above, guaranteed detection of transient malware via
consecutive self-measurements requires:
Capp < CAdv
(8)
where CAdv is the hypothetical number of instruction cycles used
by the fastest transient malware that can infect Prv, perform its
tasks, and erase itself. To illustrate this point, we assume a conser-
vative value for CAdv = 106 cycles, in which case:
CAdv = 106 =⇒ Capp < 106 =⇒ U <
(9)
For example, with CRA, consider the number of CPU cycles required
by VRASED (other hybrid RA architectures, e.g., [7], have similar
costs) to attest a program memory of 4KB: CRA = 3.6 × 106 CPU
cycles (about half a second in a typical 8MHz low-end MCU).
106 + CRA
106
U <
106 + 3.6 × 106 =⇒ U < 21.74%
(10)
To detect transient malware, a large fraction of CPU cycles (almost
80% in this toy example) is spent on RA computation. In practice,
it is hard to determine CAdv and, in some cases (e.g., changing
a general-purpose input/output value to trigger actuation), it is
likely to be much less than 106 cycles, resulting in even lower
CPU utilization left for legitimate applications running on Prv.
Therefore, detection of all transient malware using consecutive self-
measurements is impractical. This also applies to the case where
the interval between successive measurements is variable and/or
randomly selected from a range [0, tmax ]. As discussed in [26],
this is because it must be that tmax < CAdv in order to achieve
negligible probability of malware evasion.
TOCTOU-Security
Attest.
Compute.
Memory
Integrity
Capp
CRA
Capp
CRA
Capp
Time
Figure 3: TOCTOU-Secure RA
As shown in Figure 3, TOCTOU-Secure RA (per Definition 4.1)
allows Vrf to ascertain memory integrity independently from the
time between successive RA measurements, regardless of transient
malware speed. In the next sections, we propose two TOCTOU-
Secure techniques and show their security with respect to Defini-
tion 4.1.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea29265 RAT AA: RTC-BASED TOCTOU-SECURE
TECHNIQUE
In hybrid RA, trusted software (SW-Att) is usually responsible for
generating the authenticated RA response (H) and all semantic
information therein. Meanwhile, trusted hardware (HW-Mod) is re-
sponsible for: (i) ensuring that SW-Att executes as expected, (ii)
preventing leakage of its cryptographic secrets, and (iii) handling
unexpected or malicious behavior during execution. To address
TOCTOU, we propose a paradigm shift by allowing (formally veri-
fied) HW-Mod to also provide some context about Prv memory state.
We now overview RAT AA, a simple technique that requires
Prv to have a reliable read-only Real-Time Clock (RTC) synchro-
nized with Vrf. However, RTCs are not readily available on low-
end MCUs and secure clock synchronization in distributed sys-
tems is challenging [27–29], especially for low-end devices [30, 31].
Nonetheless, we start with this simple approach to show the main
idea behind TOCTOU-Secure RA. Next, Section 6 proposes an alter-
native variant that removes the RTC requirement, as long as Vrf
requests are authenticated by Prv. (Note that Vrf authentication is
already part of some hybrid RA architectures, including VRASED.)
5.1 RAT AA: Design & Security
MCU CORE
PC,
irq,
Ren,
Wen,
Daddr ,
DMAen,
DMAaddr
reset
HW-Mod
VRASED
RATA
Program
Memory
LMT
Figure 4: RAT A module in the overall system architecture
hardware module behaving as follows:
RAT AA is illustrated in Figure 4; it is designed as a verified
(1) It monitors a set of CPU signals and detects whenever any
location within AR is written. This is achieved by checking the value
of signals Daddr , Wen, DMAaddr , and DMAen (see Section 3.2).
These signals allow detection of memory modifications either by
CPU or DMA.
(2) Whenever a modification in AR is detected, RAT AA logs the
timestamp by reading the current time from the RTC and storing it
in a fixed memory location, called Latest Modification Time (LMT ).
(3) In the memory layout, LMT ∈ AR. Also, RAT AA enforces
that LMT is always read-only for all software executing on the
MCU, and for DMA.
Note that, by enforcing LMT ∈ AR, the attestation result H =
HMAC(KDF(K, MR), AR) includes the authenticated value of LMT
– the time corresponding to the latest modification of AR. As part of
the Verify algorithm, Vrf compares this information with the time
of the last authorized modification (t0 of Definition 4.1) of AR to
check whether any unauthorized modifications occurred since then.
The general idea is further specified in Construction 1, which shows
how RAT AA can be seamlessly integrated into VRASED, enforcing
two additional properties in hardware to obtain TOCTOU-Security.
These properties are formalized in LTL in Equations 11 and 12 of
Construction 1.
We show that Construction 1 is secure as long as RAT AA
implementation adheres to LTL statements in Equations 11 and 12.
This verification is discussed in Section 5.2. The cryptographic
proof is by reduction from VRASED security (per Definition 3.2)
to TOCTOU-Security (per Definition 4.1) of Construction 1. For