在K8s中RBAC是常用的授权模式，如果在配置RBAC时分配了“过大”资源对象访问权限可导致权限滥用来提权，以至于攻击者扩大战果，渗透集群。
如下是一些RBAC相关的笔记。
# k8s的RBAC
`RBAC` \- 基于角色的访问控制。
`RBAC`使用`rbac.authorization.k8s.io` API Group 来实现授权决策，允许管理员通过 Kubernetes API
动态配置策略，要启用`RBAC`，需要在 apiserver 中添加参数`--authorization-mode=RBAC`，如果使用的`kubeadm`安装的集群，1.6 版本以上的都默认开启了`RBAC`:  
`cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep "authorization-mode"`  
## RBAC相关对象
K8s所有的资源对象都是模型化的API对象，允许执行CRUD，RBAC也有相关API对象，像Role、ClusterRole对象都是K8s内部的 API
资源，可以使用`kubectl`相关的命令来进行操作：
  * `Role` 和 `ClusterRole`：角色和集群角色，这两个对象都包含上面的 Rules 元素，二者的区别在于，在 Role 中，定义的规则只适用于单个命名空间，也就是和 namespace 关联的，而 ClusterRole 是集群范围内的，因此定义的规则不受命名空间的约束。
  * `RoleBinding` 和 `ClusterRoleBinding`：角色绑定和集群角色绑定，简单来说就是把声明的 Subject 和我们的 Role 进行绑定的过程(给某个用户绑定上操作的权限)，二者的区别也是作用范围的区别：RoleBinding 只会影响到当前 namespace 下面的资源操作权限，而 ClusterRoleBinding 会影响到所有的 namespace。
举一些RBAC使用的例子。
## 创建一个只能访问固定namespace的的`hx`用户
### 1.新创建一个用户凭证
给hx用户创建一个私钥：
`openssl genrsa -out hx.key 2048`
再使用这个私钥创建一个`证书签名请求文件`,`-subj`参数后是用户名和组(CN表示用户名，O表示组)：
`openssl req -new -key hx.key -out hx.csr -subj "/CN=hx/O=huoxian"`
然后再使用K8s的CA证书来批准上面的证书请求：  
这时候证书文件生成成功：
    $ ls h*                                                                                                              ─╯
    hx.crt  hx.csr  hx.key
现在使用创建的证书和私钥来在集群中创建新的凭证和上下文(Context):
`sudo kubectl config set-credentials hx --client-certificate=hx.crt --client-key=hx.key`  
为hx用户设置新的 Context:
    $ sudo kubectl config set-context hx-context --cluster=kubernetes --namespace=kube-system --user=hx                  ─╯
    Context "hx-context" created.
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: hx-role
      namespace: kube-system
    rules:
    - apiGroups: ["", "extensions", "apps"]
      resources: ["deployments", "replicasets", "pods"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"] # 也可以使用['*']
其中几个重要的字段：
  * `apiGroups`：其中的`apiGroups: ["", "extensions", "apps"]`为什么这么写？是因为通过文档查询得知，`Pod`属于 core API Group(为空即可)，`Deployment`属于 apps API Group，`ReplicaSets`属于`extensions`API Group。
  * `verbs`:可以对这些资源对象执行的操作,如果是所有操作就用*代替。
创建hx-role这个Role：  
### 2.创建角色权限绑定
将hx用户和这个role绑定起来：
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: hx-rolebinding
      namespace: kube-system
    subjects:
    - kind: User
      name: hx
      apiGroup: ""
    roleRef:
      kind: Role
      name: hx-role
      apiGroup: ""
`Subject`字段是主题，对应在集群中尝试操作的对象，集群中定义了3种类型的主题资源：
  * User Account：用户，这是有外部独立服务进行管理的，管理员进行私钥的分配，用户可以使用 KeyStone或者 Goolge 帐号，甚至一个用户名和密码的文件列表也可以。对于用户的管理集群内部没有一个关联的资源对象，所以用户不能通过集群内部的 API 来进行管理
  * Group：组，这是用来关联多个账户的，集群中有一些默认创建的组，比如cluster-admin
  * Service Account：服务帐号，通过`Kubernetes` API 来管理的一些用户帐号，和 namespace 进行关联的，适用于集群内部运行的应用程序，需要通过 API 来完成权限认证，所以在集群内部进行权限操作，我们都需要使用到 ServiceAccount，这也是我们这节课的重点
现在使用hx用户来操作集群资源,这个时候不需要指定`namespace`，因为已经给用户分配了权限：
`sudo kubectl get pods --context=hx-context`
## 创建一个只能访问固定namespace的的`hx-sa`的ServiceAccount
`Subject`字段还可以是ServiceAccount，对ServiceAccount来进行角色绑定。
### 1.创建一个ServiceAccount对象
`sudo kubectl create sa hx-sa -n kube-system`
### 2.创建角色
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: hx-sa-role
      namespace: kube-system
    rules:
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "watch", "list"]
    - apiGroups: ["apps"]
      resources: ["deployments"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
### 3.创建角色绑定
    kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: hx-sa-rolebinding
      namespace: kube-system
    subjects:
    - kind: ServiceAccount
      name: hx-sa
      namespace: kube-system
    roleRef:
      kind: Role
      name: hx-sa-role
      apiGroup: rbac.authorization.k8s.io
这时候可以使用sa账户的token去访问apiserver的资源了：
    sudo kubectl get secret -n kube-system |grep hx-sa
    sudo kubectl get secret hx-sa-token-bkrlc -o jsonpath={.data.token} -n kube-system |base64 -d
## 创建ClusterRoleBinding
如果需要创建一个可以访问所有namespace的角色，就可以使用ClusterRole 和 ClusterRoleBinding 这两种资源对象了。
sa：
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: hx-sa2
      namespace: kube-system
ClusterRoleBinding 对象:
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1beta1
    metadata:
      name: hx-sa2-clusterrolebinding
    subjects:
    - kind: ServiceAccount
      name: hx-sa2