# Summary of Attacks Against BIOS and Secure Boot

## Authors
Yuriy Bulygin, John Loucaides, Andrew Furtak, Oleksandr Bazhaniuk, Alexander Matrosov  
Intel Security

## Introduction
### Legacy BIOS
1. **CPU Reset Vector in BIOS ROM (Boot Block)**
2. **Basic CPU and Chipset Initialization**
3. **Initialize Cache-as-RAM, Load and Run from Cache**
4. **Initialize DIMMs, Create Address Map**
5. **Enumerate PCIe Devices**
6. **Execute Option ROMs on Expansion Cards**
7. **Load and Execute MBR**
8. **Second-Stage Boot Loader, OS Loader, OS Kernel**

**Technical Note:** UEFI BIOS vs. Legacy BIOS, Advantech

### Transition to UEFI
#### UEFI Boot
- **Secure Boot, Network Boot, Verified Boot**
- **UEFI [Compliant] Firmware**
  - **SEC (Security Phase)**
  - **Pre-EFI Initialization (PEI)**
    - **Driver Execution Environment (DXE)**
    - **Boot Device Selection (BDS)**
    - **Runtime/OS Services**
  - **S-CRTM; Initialize Caches/MTRRs; Cache-as-RAM (NEM); Recovery; TPM Initialization**
  - **S-CRTM: Measure DXE/BDS**
  - **Early CPU/PCH Initialization**
  - **Memory (DIMMs, DRAM) Initialization, SMM Initialization**
  - **Continue Platform and Device Initialization**
  - **Enumerate Firmware Volumes, Dispatch Drivers (Network, I/O, Service, etc.)**
  - **Produce Boot and Runtime Services**
  - **Boot Manager (Select Boot Device)**
  - **EFI Shell/Applications; OS Boot Loaders**
  - **ExitBootServices: Minimal UEFI Services (Variable)**
  - **ACPI, UEFI System Table, SMBIOS Table**
  - **CPU Reset**
  - **Signed BIOS Update & OS Secure Boot**
  - **Windows 8 Secure Boot**

## Attack Surfaces
### BIOS SPI Flash Protection
- **SPI Flash Write Protection**
  - Often not properly enabled on many systems.
  - SMM-based write protection of the entire BIOS region is often not used (BIOS_CONTROL[SMM_BWP]).
  - If SPI Protected Ranges (mode agnostic) are used (defined by PR0-PR4 in SPI MMIO), they often don’t cover the entire BIOS and NVRAM.
  - Some platforms use SPI device-specific write protection but only for the boot block/startup code or SPI Flash descriptor region.
  - **Persistent BIOS Infection**: Using coreboot’s flashrom on legacy BIOS.
  - **Evil Maid Attack**: Why Full Disk Encryption with TPM is Not Secure on Many Systems.
  - **BIOS Chronomancy**: Fixing the Static Root of Trust for Measurement.
  - **Software Bypass of Windows 8 Secure Boot**.
  - **Mitigation**: Set BIOS_CONTROL[SMM_BWP] = 1 and configure SPI PRx.
  - **Tools**: `chipsec_main --module common.bios_wp` or Copernicus from MITRE.

- **Manual Check for BIOS Write Protection**
  - **Windows**: RWEverything
  - **Linux**: `setpci -s 00:1F.0 DC.B`
  - **Better Way to Check**: Use `chipsec_main --module common.bios_wp`

- **Example Output**:
  ```
  [*] running module: chipsec.modules.common.bios_wp
  [x][ =======================================================================
  [x][ Module: BIOS Region Write Protection
  [x][ =======================================================================
  [*] BIOS Control = 0x02
      [05] SMM_BWP = 0 (SMM BIOS Write Protection)
      [04] TSS     = 0 (Top Swap Status)
      [01] BLE     = 1 (BIOS Lock Enable)
      [00] BIOSWE  = 0 (BIOS Write Enable)
  [!] Enhanced SMM BIOS region write protection has not been enabled (SMM_BWP is not used)
  [*] BIOS Region: Base = 0x00500000, Limit = 0x007FFFFF
  SPI Protected Ranges
  ------------------------------------------------------------
  PRx (offset) | Value    | Base     | Limit    | WP? | RP?
  ------------------------------------------------------------
  PR0 (74)     | 87FF0780 | 00780000 | 007FF000 | 1   | 0
  PR1 (78)     | 00000000 | 00000000 | 00000000 | 0   | 0
  PR2 (7C)     | 00000000 | 00000000 | 00000000 | 0   | 0
  PR3 (80)     | 00000000 | 00000000 | 00000000 | 0   | 0
  PR4 (84)     | 00000000 | 00000000 | 00000000 | 0   | 0
  [!] SPI protected ranges write-protect parts of BIOS region (other parts of BIOS can be modified)
  [!] BIOS should enable all available SMM based write protection mechanisms or configure SPI protected ranges to protect the entire BIOS region
  [-] FAILED: BIOS is NOT protected completely
  ```

- **SMI Suppression Attack Variants**
  - Some systems write-protect BIOS by disabling BIOS Write-Enable (BIOSWE) and setting BIOS Lock Enable (BLE) but do not use SMM-based write-protection (BIOS_CONTROL[SMM_BWP]).
  - Possible attack: Block SMI events, e.g., disable all chipset sources of SMI (clear SMI_EN[GBL_SMI_EN]) if BIOS didn’t lock SMI config.
  - Another variant: Disable specific TCO SMI source used for BIOSWE/BLE (clear SMI_EN[TCO_EN] if BIOS didn’t lock TCO config).
  - **Mitigation**: Set BIOS_CONTROL[SMM_BWP] = 1 and lock SMI config.
  - **Tool**: `chipsec_main --module common.bios_smi`

- **Locking SPI Flash Configuration**
  - Some BIOS rely on SPI Protected Range (PR0-PR4 registers in SPI MMIO) to provide write protection.
  - SPI Flash Controller configuration must be locked down by BIOS via Flash Lockdown.
  - If BIOS doesn’t lock SPI Controller configuration (by setting FLOCKDN bit in HSFSTS SPI MMIO register), malware can disable SPI protected ranges, re-enabling write access to SPI Flash.
  - **Tool**: `chipsec_main --module common.spi_lock`

- **Example Output**:
  ```
  [+] imported chipsec.modules.common.spi_lock
  [x][ =======================================================================
  [x][ Module: SPI Flash Controller Configuration Lock
  [x][ =======================================================================
  [*] HSFSTS register = 0x0004E008
      FLOCKDN = 1
  [+] PASSED: SPI Flash Controller configuration is locked
  ```

### BIOS Update
- **Legacy BIOS Update and Secure Boot**
  - **Mebromi Malware**: Includes BIOS infector and MBR bootkit components.
  - Patches BIOS ROM binary, injecting malicious ISA Option ROM with a legitimate BIOS image mod utility.
  - Triggers SW SMI 0x29/0x2F to erase SPI flash and then write the patched BIOS binary.
  - **Tool**: `chipsec_util smi 0x29 0x0`

- **Unsigned Sections in BIOS Update**
  - No concept of Secure or Verified Boot.
  - Example: TDL4 and similar malware flourished due to no signature checks of OS boot loaders (MBR).

- **UEFI BIOS Update Problems**
  - **Unsigned BMP Image Parsing**: Integer overflow in EDK ConvertBmpToGopBlt() followed by memory corruption during DXE while parsing BMP image.
  - **Buffer Overflow in RBU Packet Parsing**: When copying RBU packet to a buffer with reconstructed BIOS image.
  - **Tools**: `chipsec_main --module common.smm`, `chipsec_main --module common.smrr`

### Hardware Configuration and Protections
- **D_LCK Bit and SMRAMC Configuration**
  - D_LCK bit locks down Compatible SMM space (a.k.a. CSEG) configuration (SMRAMC).
  - SMRAMC[D_OPEN]=0 forces access to legacy SMM space decode to system bus rather than to DRAM where SMI handlers are when CPU is not in SMM.
  - If D_LCK is not set by BIOS, SMM space decode can be changed to open access to CSEG when CPU is not in SMM.
  - **Tool**: `chipsec_main --module common.smm`

- **SMRAM Cache Poisoning**
  - CPU executes from cache if memory type is cacheable.
  - Ring0 exploit can make SMRAM cacheable (variable MTRR) and populate cache-lines at SMBASE with SMI exploit code.
  - **Tool**: `chipsec_main --module common.smrr`

- **Memory Remapping/Reclaim Attack**
  - Remap Window is used to reclaim DRAM range below 4Gb “lost” for Low MMIO.
  - Defined by REMAPBASE/REMAPLIMIT registers in Memory Controller PCIe config. space.
  - If not locked, OS malware can reprogram target of reclaim to overlap with SMRAM.
  - **Tool**: `chipsec_main --module common.remap`

- **BIOS Top Swap Attack**
  - “Top Swap” feature allows fault-tolerant update of BIOS boot block.
  - Enabled by BUC[TS] in Root Complex MMIO range.
  - BIOS has to lock down Top Swap configuration (BIOS Interface Lock in General Control & Status register) and protect top swap range in SPI.
  - **Tool**: `chipsec_main --module common.bios_ts`

### SMI Handlers
- **Legacy SMI Handlers Calling Out of SMRAM**
  - Code fetch in SMM can be exploited if SMI handlers call out of SMRAM.
  - **Tool**: `chipsec_main --module common.smi`

By understanding these attack surfaces and implementing the recommended mitigations, it is possible to significantly enhance the security of BIOS and UEFI firmware.