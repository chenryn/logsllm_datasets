, Pred)
SlowProposalPhase(c, Ballot, T ime, Pred)
else if ∃j : pi received
else if ∃j : pi received
TT
TT
TT
TT
P5:
P5:
P6:
P6:
P7:
P7:
TT
TT
P8:
P8:
P9:
P9:
P10:
P10:
else
else
P11:
P11:
P12:
P12:
P13:
P13:
P14:
P14:
P15:
P15:
P16:
P16:
P17:
P17:
P18:
P18:
P19:
P19:
P20:
P20:
R5:
R5:
R6:
R6:
R7:
R7:
R8:
R8:
S2:
S2:
S3:
S3:
S4:
S4:
S5:
S5:
S6:
S6:
S7:
S7:
(cid:8)(cid:15)(cid:18)(cid:23)(cid:1)(cid:6)(cid:20)(cid:18)(cid:19)(cid:18)(cid:21)(cid:9)(cid:15)(cid:1)(cid:6)(cid:14)(cid:9)(cid:21)(cid:13)
(cid:8)(cid:15)(cid:18)(cid:23)(cid:1)(cid:6)(cid:20)(cid:18)(cid:19)(cid:18)(cid:21)(cid:9)(cid:15)(cid:1)(cid:6)(cid:14)(cid:9)(cid:21)(cid:13)
TT
(cid:7)(cid:12)(cid:23)(cid:24)(cid:6)(cid:15)(cid:13)(cid:16)(cid:23)(cid:16)(cid:20)(cid:19)(cid:2)(cid:13)(cid:4)(cid:1)(cid:5)(cid:12)(cid:17)(cid:17)(cid:20)(cid:24)(cid:4)(cid:1)(cid:11)(cid:16)(cid:18)(cid:15)(cid:4) (cid:8)(cid:22)(cid:15)(cid:14)(cid:3)
(cid:7)(cid:12)(cid:23)(cid:24)(cid:6)(cid:15)(cid:13)(cid:16)(cid:23)(cid:16)(cid:20)(cid:19)(cid:2)(cid:13)(cid:4)(cid:1)(cid:5)(cid:12)(cid:17)(cid:17)(cid:20)(cid:24)(cid:4)(cid:1)(cid:11)(cid:16)(cid:18)(cid:15)(cid:4)(cid:1)(cid:8)(cid:22)(cid:15)(cid:14)(cid:3)
P29:
P29:
P30:
P30:
P31:
P31:
P32:
P32:
P33:
P33:
P34:
P34:
P35:
P35:
P36:
P36:
P37:
P37:
P38:
P38:
P39:
P39:
(cid:7)(cid:13)(cid:22)(cid:20)(cid:24)(cid:1)(cid:6)(cid:14)(cid:9)(cid:21)(cid:13)
(cid:7)(cid:13)(cid:22)(cid:20)(cid:24)(cid:1)(cid:6)(cid:14)(cid:9)(cid:21)(cid:13)
(cid:10)(cid:17)(cid:20)(cid:25)(cid:6)(cid:15)(cid:13)(cid:16)(cid:23)(cid:16)(cid:20)(cid:19)(cid:7)(cid:22)(cid:20)(cid:18)(cid:8)(cid:22)(cid:20)(cid:21)(cid:20)(cid:23)(cid:12)(cid:17)(cid:2)(cid:13)(cid:4)(cid:1)(cid:5)(cid:12)(cid:17)(cid:17)(cid:20)(cid:24)(cid:4)(cid:1)(cid:11)(cid:16)(cid:18)(cid:15)(cid:4) (cid:8)(cid:22)(cid:15)(cid:14)(cid:3)
(cid:10)(cid:17)(cid:20)(cid:25)(cid:6)(cid:15)(cid:13)(cid:16)(cid:23)(cid:16)(cid:20)(cid:19)(cid:7)(cid:22)(cid:20)(cid:18)(cid:8)(cid:22)(cid:20)(cid:21)(cid:20)(cid:23)(cid:12)(cid:17)(cid:2)(cid:13)(cid:4)(cid:1)(cid:5)(cid:12)(cid:17)(cid:17)(cid:20)(cid:24)(cid:4)(cid:1)(cid:11)(cid:16)(cid:18)(cid:15)(cid:4)(cid:1)(cid:8)(cid:22)(cid:15)(cid:14)(cid:3)
P21:
P21:
P22:
P22:
P23:
P23:
P24:
P24:
P25:
P25:
P26:
P26:
P27:
P27:
P28:
P28:
R1:
R1:
R2:
R2:
R3:
R3:
R4:
R4:
(cid:8)(cid:22)(cid:15)(cid:14)(cid:3)
(cid:10)(cid:17)(cid:20)(cid:25)(cid:6)(cid:15)(cid:13)(cid:16)(cid:23)(cid:16)(cid:20)(cid:19)(cid:7)(cid:22)(cid:20)(cid:18)(cid:9)(cid:15)(cid:24)(cid:22)(cid:26)(cid:2)(cid:13)(cid:4)(cid:1)(cid:5)(cid:12)(cid:17)(cid:17)(cid:20)(cid:24)(cid:4)(cid:1)(cid:11)(cid:16)(cid:18)(cid:15)(cid:4)
(cid:10)(cid:17)(cid:20)(cid:25)(cid:6)(cid:15)(cid:13)(cid:16)(cid:23)(cid:16)(cid:20)(cid:19)(cid:7)(cid:22)(cid:20)(cid:18)(cid:9)(cid:15)(cid:24)(cid:22)(cid:26)(cid:2)(cid:13)(cid:4)(cid:1)(cid:5)(cid:12)(cid:17)(cid:17)(cid:20)(cid:24)(cid:4)(cid:1)(cid:11)(cid:16)(cid:18)(cid:15)(cid:4)(cid:1)(cid:8)(cid:22)(cid:15)(cid:14)(cid:3)
(cid:8)(cid:22)(cid:9)(cid:10)(cid:15)(cid:13)(cid:1)(cid:6)(cid:14)(cid:9)(cid:21)(cid:13)
(cid:8)(cid:22)(cid:9)(cid:10)(cid:15)(cid:13)(cid:1)(cid:6)(cid:14)(cid:9)(cid:21)(cid:13)
S1:
S1:
Fig. 4. CAESAR’s pseudocode. The left part is executed by the command c’s leader pi, and the right part can be executed by any acceptor pj (including pi).
take care of breaking any possible loop that might be created
by the predecessor sets of the stable commands, before trying
to deliver them (line S4 and lines 9–15 of Figure 3). That
is done as follows: for any two stable and non-commutative
commands c and ¯c with timestamps T and ¯T , respectively, if
¯T > T then ¯c is deleted from c’s predecessor set.
When a command c is stable on all nodes, the information
about c can be safely garbage collected.
C. Slow Decision
In case the leader of a command c cannot guarantee a
fast decision for c, then it has to execute additional phases
before the ﬁnalization of the stable phase for c. This happens
because in the fast proposal phase for c (lines I1–I2, P1–
P4, and P11–P20), the command leader cannot collect a fast
quorum of FASTPROPOSER messages that are all marked
with OK (lines P7–P10) due to the following reasons: the
fast quorum of collected FASTPROPOSER messages actually
includes a message that rejects the proposed timestamp for c
and is marked with NACK (lines P7–P8, and R1–R8); or the
leader is only able to collect a quorum of CQ FASTPROPOSER
messages (lines P9–P10), because either there are no FQ
correct nodes in the system or the other N − CQ nodes are
too slow to provide their reply within a conﬁgurable timeout
55
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:16 UTC from IEEE Xplore.  Restrictions apply. 
to the command leader (line P2). In this subsection, we refer
to a slow decision by focusing on the former case; the latter
is explained in Section V-D.
Retry phase. This phase guarantees that a command c is
accepted by a quorum of CQ nodes after the previous proposal
phase for c could not provide a fast decision, and before
moving to the stable phase for c. At this stage, the leader pi
of c broadcasts a RETRY message with the maximum T ime
among the ones suggested by the acceptors in the previous
phase, and the predecessor set Pred as the union of the sets
suggested by the acceptors in the previous phase (line R1).
Then pi waits for a quorum of CQ RETRYR replies that
conﬁrm the timestamp T ime for c (line R2), before submitting
T ime to the next stable phase (line R4). This guarantees that,
even with f failures, there always exists a correct node that
conﬁrmed T ime in this phase.
It is important to notice that as in the case of a FAST-
PROPOSER message, a RETRYR message from a node pj
also contains pj’s view of c’s predecessors set, which will be
included in the ﬁnal Pred set in input to the next stable phase
(line R3). This is because, as shown in Section IV-B, c’s leader
has to include all the commands that were not predecessors
of c according to the timestamp proposed in the previous
proposal phase but that have to be considered as predecessors
according to the new timestamp of this phase.
Furthermore, a reply from an acceptor in this phase cannot
reject the broadcast timestamp for c, because, as it will be
clear in the proof of correctness (see Section V-F), at this stage
CAESAR guarantees that there does not exist any acceptor pj
and command ¯c such that ¯c is stable on pj with timestamp
¯T > T and c is not
in ¯c’s predecessors set. Therefore,
when a node pj receives a RETRYR message with c, T ime,
and Pred,
it only updates the tuple for c in its Hj by
marking it as accepted with T ime and Pred (line R5), and
it computes a new predecessors set Predj by calling the
COMPUTEPREDECESSORS function (line R7), like in the fast
proposal phase. Then, it sends a conﬁrmation RETRYR back
to the command leader with the new Predj as well as the one
previously received by the leader (line R8).
D. Unavailability of Fast Quorums
In CAESAR, as in other
fast consensus implementa-
tions [10], there might exist scenarios where no fast quorum
is available. This happens due to our choice on the size of
fast quorums, i.e., FQ, which is greater than the minimum
number of correct nodes in the system, i.e., N − f. Therefore,
under a period of asynchrony of the system, where a message
can experience an arbitrarily long delay, a node is not able
to distinguish whether f nodes crashed or not, and hence a
command leader that waits for replies from a fast quorum of
nodes could wait indeﬁnitely in a fast proposal phase.
This issue is solved in CAESAR by adopting a more com-
mon solution, namely the adoption of timeouts, but it requires
the interposition of an additional slow proposal phase after the
fast proposal phase and before either the retry or the stable
phase (see lines P21–P39). In particular, a command leader
can decide to execute a slow proposal phase without waiting
for a fast quorum of FQ replies if it has collected a quorum of
CQ FASTPROPOSER messages for a command c and none of
the messages have rejected the proposed timestamp (P9–P10).
This scenario can be considered as a corner case of CAE-
SAR’s execution and thus, for the sake of brevity, we decided
to detail it in the technical report [23].
E. Recovery from Failures
Whenever a node pi crashes, there might exist some com-
mand c whose leader is pi and whose decision would never
be ﬁnalized unless some explicit action is taken. Indeed, let
us suppose there exists a node pk that stores c with a status
different from stable. Then, according to the pseudocode of
Figure 4, pk would decide c only after having received a
STABLE message from pi.
1: RECOVERYPHASE(c)
2:
3:
4:
Ballotsk[c]++
send RECOVERY[c, Ballotsk[c]] to all pj ∈ Π
receive RECOVERYR[c, Ballotsk[c],
(cid:7)c, Tj , Predj , −, Bj , ⊥/(cid:16)(cid:8)/NOP]
5: MaxBallot ← M AX{Bj : pi received
6:
from all pj ∈ S ⊆ Π : |S| = CQ
RECOVERYR[c, Ballotsk[c], (cid:7)c, Tj , Predj , −, Bj , ⊥/(cid:16)(cid:8)] }
RECOVERYR[c, Ballotsk[c], (cid:7)c, Tj , Predj , −, Bj , ⊥/(cid:16)(cid:8)]
RecoverySet ← {(cid:7)pj , Tj , Predj , −, ⊥/(cid:16)(cid:8) : pi received
from pj ∧ Bj = MaxBallot }
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
else if ∃ (cid:7)pj , Tj , Predj , slow-pending, ⊥(cid:8) ∈ RecoverySet then
else if |RecoverySet| > 0 then
if ∃ (cid:7)pj , Tj , Predj , stable, ⊥(cid:8) ∈ RecoverySet then
else if ∃ (cid:7)pj , Tj , Predj , accepted, ⊥(cid:8) ∈ RecoverySet then
else if ∃ (cid:7)pj , Tj , Predj , rejected, ⊥(cid:8) ∈ RecoverySet then
STABLEPHASE(c, Ballotsk[c], Tj, Predj)
RETRYPHASE(c, Ballotsk[c], Tj, Predj)
T ime ← T S i
FASTPROPOSALPHASE(c, Ballotsk[c], T ime, null)
SLOWPROPOSALPHASE(c, Ballotsk[c], Tj, Predj)
T ime ← Tj :
∃(cid:7)pj , Tj , Predj , f ast-pending, ⊥/(cid:16)(cid:8) ∈ RecoverySet
Pred ← (cid:4)
(cid:7)pj , Tj , Predj , f ast-pending, ⊥/(cid:16)(cid:8) ∈ RecoverySet
if ∃ (cid:7)pj , Tj , Predj , f ast-pending, (cid:16)(cid:8) ∈ RecoverySet then
WhiteList ← Pred
else if |RecoverySet| ≥ (cid:5) CQ
WhiteList ← {¯c ∈ Pred : (cid:2)S ⊆ RecoverySet,
|S| ≥ (cid:5) CQ
(cid:6)
+ 1 ∧
∀(cid:7)pj , Tj , Predj , f ast-pending, ⊥(cid:8) ∈ S, ¯c (cid:10)∈ Predj }
j Predj :
+ 1 then
(cid:6)
2
2
else
WhiteList ← null
else
FASTPROPOSALPHASE(c, Ballotsk[c], T ime, WhiteList)
T ime ← T S i
FASTPROPOSALPHASE(c, Ballotsk[c], T ime, null)
23:
24: