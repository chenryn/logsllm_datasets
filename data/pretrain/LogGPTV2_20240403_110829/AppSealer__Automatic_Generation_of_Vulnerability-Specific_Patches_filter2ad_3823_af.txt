that Soot performs overly strict constraint checking. After we
patched Soot, the translation problems are greatly reduced. We
expect that the conversion failures can be effectively ﬁxed over
time.
A complementary implementation option is to engineer a
Dalvik bytecode analysis and instrumentation framework, so
that operations are directly applied on Dalvik bytecode. Since
it avoids conversions between different tools, it could introduce
minimal conﬂicts and failures.
Fully Automatic Defense. For most vulnerable samples in
our experiment, we are able to manually verify the component
hijacking vulnerabilities. However, due to the object-oriented
nature of Android programs, computed taint slices can some-
times become rather huge and sophisticated. Consequently, we
were not able to conﬁrm the exploitable paths for some vul-
nerable apps with human effort, and thus could not reproduce
the expected attack. Developers are faced with the same, if
not more, challenges, and thus fail to come up with a solution
in time. Devising a fully automated mechanism is therefore
essential to defend this speciﬁc complicated vulnerability.
In principle, our automatic patching approach can still
protect these unconﬁrmed cases, without knowing the real
presence of potential vulnerability. That is to say if a vulnera-
bility does exist, AppSealer will disable the actual exploitation
on the ﬂy. Otherwise, AppSealer does not interrupt the program
execution and thus does not affect usability. With automated
patching, users do not have to wait until developers ﬁx the
problem.
13
VIII. RELATED WORK
In this section, we discuss the previous work that
is
related to automatic patch & signature generation, analysis &
mitigation on smartphone privacy issues, vulnerabilities and
malware, bytecode rewriting and information-ﬂow control.
Automatic Patch & Signature Generation. Efforts to auto-
matically generate patch for vulnerable program, or signature
to ﬁlter out malicious input is closely related to our work.
AutoPaG [11] automatically analyzes the program source code
and identiﬁes the root cause for out-of-bound exploit, and thus
generates a ﬁne-grained source code patch to temporarily ﬁx it
without any human intervention. IntPatch [12] utilizes classic
type theory and dataﬂow analysis framework to identify po-
tential integer-overﬂow-to-buffer-overﬂow vulnerabilities, and
then instruments programs with runtime checks. Sidiroglou and
Keromytis [13] rely on source code transformations to quickly
apply automatically created patches to vulnerable segments of
the targeted applications, that are subject to zero-day worms.
Newsome et al. [14] propose an execution-based ﬁlter which
ﬁlters out attacks on a speciﬁc vulnerability based on the
vulnerable program’s execution trace. ShieldGen [6] generates
a data patch or a vulnerability signature for an unknown
vulnerability, given a zero-day attack instance. Razmov and
Simon [22] automate the ﬁlter generation process based on
a simple formal description of a broad class of assumptions
about the inputs to an application.
Analysis & Mitigation on Smartphone Privacy Issues, Vul-
nerabilities and Malware. Many efforts have been made to
discover and address emerging threats in smartphones. Privacy
leakage has caught attentions and is studied over different
platforms, such as iOS, Android and Windows Phone [18],
[21], [23], [24]. Mitigation mechanisms are thus proposed.
Some work rewrite applications to insert mediation code [24]–
[26]; others modify Android framework [27], [28] or operating
system [29] to enforce privacy policies. Studies are also carried
out to prevent attacks on application vulnerabilities, such as
privilege escalation [30], [31], permission re-delegation [3],
capability leaks [2], content leaks and pollution [4] and com-
ponent hijacking [5]. Malware causes enormous damage to
smartphone users and thus is a signiﬁcant threat. Efforts are
made to detect unknown malware [32], analyze and understand
malware and its evolution [33]–[36] and mitigate malware
impact [37].
Bytecode Rewriting. Our approach requires rewriting existing
bytecode program, thus is related to prior work with bytecode
rewriting techniques. The Privacy Blocker application [26]
performs static analysis of application binaries to identify and
selectively replace requests for sensitive data with hard-coded
shadow data. I-ARM-Droid [38] rewrites Dalvik bytecode to
interpose on all the API invocations and enforce the desired
security policies. Aurasium [25] repackages Android apps to
sandbox important native APIs so as to monitor security and
privacy violations. Livshits and Jung [24] implement a graph-
theoretic algorithm to place mediation prompts into bytecode
program and thus protect resource access. In comparison, our
work rewrites the bytecode program in a more extensive way.
Inserted patch statements are able to monitor and control
speciﬁc dataﬂow in the rewritten app.
Information Flow Control. In effect, our patch statements
exercise information-ﬂow control (IFC) during runtime. IFC
has been studied on different contexts. Chandra and Franz [39]
implement an information ﬂow framework for Java virtual ma-
chine which combines static analysis to capture implicit ﬂows.
JFlow [40] extends the Java language and adds statically-
checked information ﬂow annotations. Jia et al. [41] proposes
a component-level runtime enforcement system for Android
apps. duPro [42] is an efﬁcient user-space information ﬂow
control framework, which adopts software-based fault isolation
to isolate protection domains within the same process. Zeng
et al. [43] introduces an IRM-implementation framework at a
compiler intermediate-representation (IR) level. In constrast,
we take static rewriting approach, which requires no support
from developers and no modiﬁcation to runtime. In addition,
we focus on a speciﬁc vulnerability and enforce control on
solely relevant information ﬂow.
IX. CONCLUSION
We developed a technique to automatically generate patch
for Android applications with component hijacking vulner-
ability. Given a vulnerable Android app, we ﬁrst perform
static bytecode analysis to identify small but complete program
slices that lead to the discovered vulnerability. Then we devise
several shadowing mechanisms to insert new variables and in-
structions along the program slices, for the purpose of keeping
track of dangerous information at runtime. To further improve
performance, we apply a series of optimizations to remove
redundant instructions to minimize the footprint of the gener-
ated patch. Our evaluation on 16 real-world vulnerable Android
applications demonstrates that AppSealer can effectively track
and mitigate component hijacking vulnerabilities. Moreover,
after going through a series of optimizations, the patch code
only represents a small portion (15.9% on average) of the
entire program. In addition, the runtime overhead introduced
by AppSealer is also minimal, merely 2% on average.
ACKNOWLEDGMENT
We would like to thank anonymous reviewers for their
comments. This research was supported in part by NSF Grant
#1018217, NSF Grant #1054605 and McAfee Inc. Any opin-
ions, ﬁndings, and conclusions made in this material are those
of the authors and do not necessarily reﬂect the views of the
funding agencies.
REFERENCES
[1] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy, “Privilege Es-
calation Attacks on Android,” in Proceedings of the 13th International
Conference on Information Security (ISC’10), October 2011.
[2] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic Detection of
Capability Leaks in Stock Android Smartphones,” in Proceedings of
the 19th Annual Network and Distributed System Security Symposium
(NDSS’12), February 2012.
[3] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin, “Permis-
sion Re-delegation: Attacks and Defenses,” in Proceedings of the 20th
USENIX Security Symposium, August 2011.
[4] Y. Zhou and X. Jiang, “Detecting Passive Content Leaks and Pollution
in Android Applications,” in Proceedings of the 20th Network and
Distributed System Security Symposium (NDSS’13), February 2013.
[5] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “CHEX: statically vetting
Android apps for component hijacking vulnerabilities,” in Proceedings
of
the 2012 ACM Conference on Computer and Communications
Security (CCS’12), October 2012.
14
“Privacy blocker,” http://privacytools.xeudoxus.com/.
[26]
[27] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall, “These
Aren’t The Droids You’re Looking For: Retroﬁtting Android to Protect
Data from Imperious Applications,” in Proceedings of the 18th ACM
Conference on Computer and Communications Security (CCS’11),
October 2011.
[28] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh, “Taming Information-
Stealing Smartphone Applications (on Android),” in Proceedings of
the 4th International Conference on Trust and Trustworthy Computing
(TRUST’11), June 2011.
[29] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan, “MockDroid:
trading privacy for application functionality on smartphones,” in Pro-
ceedings of the 12th Workshop on Mobile Computing Systems and
Applications (HotMobile’11), March 2011.
[30] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and
B. Shastry, “Towards Taming Privilege-Escalation Attacks on Android,”
in Proceedings of 19th Annual Network and Distributed System Security
Symposium (NDSS’12), February 2012.
[31] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach, “Quire:
Lightweight Provenance for Smart Phone Operating Systems,” in Pro-
ceedings of the 20th Usenix Security Symposium, August 2011.
[32] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, “Hey, You, Get Off of My
Market: Detecting Malicious Apps in Ofﬁcial and Alternative Android
Markets,” in Proceedings of 19th Annual Network and Distributed
System Security Symposium (NDSS’12), February 2012.
[33] L.-K. Yan and H. Yin, “DroidScope: Seamlessly Reconstructing OS
and Dalvik Semantic Views for Dynamic Android Malware Analysis,”
in Proceedings of the 21st USENIX Security Symposium, August 2012.
[34] Y. Zhou and X. Jiang, “Dissecting Android Malware: Characterization
and Evolution,” in Proceedings of the 33rd IEEE Symposium on Security
and Privacy (Oakland’12), May 2012.
[35] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang, “RiskRanker:
Scalable and Accurate Zero-day Android Malware Detection,” in Pro-
ceedings of
the 10th International Conference on Mobile Systems,
Applications and Services (MobiSys’12), June 2012.
[36] V. Rastogi, Y. Chen, and X. Jiang, “DroidChameleon: Evaluating
Android Anti-malware against Transformation Attacks,” in Proceedings
of the 8th ACM Symposium on InformAtion, Computer and Communi-
cations Security (ASIACCS’13), May 2013.
[37] W. Enck, M. Ongtang, and P. McDaniel, “On Lightweight Mobile Phone
Application Certiﬁcation,” in Proceedings of the 16th ACM Conference
on Computer and Communications Security (CCS’09), November 2009.
[38] B. Davis, B. Sanders, A. Khodaverdian, and H. Chen, “I-ARM-Droid:
A Rewriting Framework for In-App Reference Monitors for Android
Applications,” in Proceedings of
the Mobile Security Technologies
Workshop (MoST’12), May 2012.
[39] D. Chandra and M. Franz, “Fine-Grained Information Flow Analysis
and Enforcement in a Java Virtual Machine,” in Proceedings of the
23rd Annual Computer Security Applications Conference (ACSAC’07),
December 2007.
[40] A. C. Myers, “JFlow: Practical Mostly-Static Information Flow Con-
trol,” in Proceedings of the 26th ACM Symposium on Principles of
Programming Languages (POPL’99), January 1999.
[41] L.
Jia,
J. Aljuraidan, E. Fragkaki, L. Bauer, M. Stroucken,
K. Fukushima, S. Kiyomoto, and Y. Miyake, “Run-Time Enforcement
of Information-Flow Properties on Android (Extended Abstract),” in
Proceedings of 18th European Symposium on Research in Computer
Security (ESORICS’13), September 2013.
[42] B. Niu and G. Tan, “Efﬁcient User-Space Information Flow Control,”
in Proceedings of the 8th ACM Symposium on Information, Computer
and Communications Security (ASIACCS’13), May 2013.
[43] B. Zeng, G. Tan, and U. Erlingsson, “Strato: A Retargetable Framework
for Low-Level Inlined-Reference Monitors,” in Proceedings of the 22th
Usenix Security Symposium, August 2013.
[6] W. Cui, M. Peinado, and H. J. Wang, “ShieldGen: Automatic Data
Patch Generation for Unknown Vulnerabilities with Informed Probing,”
in Proceedings of 2007 IEEE Symposium on Security and Privacy
(Oakland’07), May 2007.
[7] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha, “Towards Au-
tomatic Generation of Vulnerability-Based Signatures,” in Proceedings
of the 2006 IEEE Symposium on Security and Privacy (Oakland’06),
May 2006.
[8] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang, and
P. Barham, “Vigilante: End-to-End Containment of Internet Worms,”
in Proceedings of
the twentieth ACM Symposium on Systems and
Operating Systems Principles (SOSP’05), October 2005.
[9] M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado, “Bouncer:
Securing Software by Blocking Bad Input,” in Proceedings of 21st
ACM SIGOPS Symposium on Operating Systems Principles (SOSP’07),
October 2007.
J. Caballero, Z. Liang, Poosankam, and D. Song, “Towards Gener-
ating High Coverage Vulnerability-Based Signatures with Protocol-
Level Constraint-Guided Exploration,” in Proceedings of
the 12th
International Symposium on Recent Advances in Intrusion Detection
(RAID’09), September 2009.
[10]
[11] Z. Lin, X. Jiang, D. Xu, B. Mao, and L. Xie, “AutoPaG: Towards Auto-
mated Software Patch Generation with Source Code Root Cause Iden-
tiﬁcation and Repair,” in Proceedings of the 2nd ACM Symposium on
Information, Computer and Communications Security (ASIACCS’07),
March 2007.
[12] C. Zhang, T. Wang, T. Wei, Y. Chen, and W. Zou, “IntPatch: Au-
tomatically Fix Integer-Overﬂow-to-Buffer-Overﬂow Vulnerability at
Compile-Time,” in Proceedings of the 15th European Conference on
Research in Computer Security (ESORICS’10), September 2010.
[14]
[13] S. Sidiroglou and A. D. Keromytis, “Countering Network Worms
Through Automatic Patch Generation,” IEEE Security and Privacy,
vol. 3, no. 6, pp. 41–49, Nov. 2005.
J. Newsome, D. Brumley, and D. Song, “Vulnerability-speciﬁc ex-
ecution ﬁltering for exploit prevention on commodity software,” in
Proceedings of the 13th Symposium on Network and Distributed System
Security (NDSS’06), February 2006.
“Soot: a java optimization framework,” http://www.sable.mcgill.ca/
soot/.
“dex2jar,” http://code.google.com/p/dex2jar/.
[16]
[17] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein,
and Y. L. Traon, “Effective Inter-Component Communication Mapping
in Android with Epicc: An Essential Step Towards Holistic Security
Analysis,” in Proceedings of the 22nd USENIX Security Symposium,
August 2013.
[15]
[18] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel,
and A. N. Sheth, “TaintDroid: An Information-Flow Tracking System
for Realtime Privacy Monitoring on Smartphones,” in Proceedings
of
the 9th USENIX Symposium on Operating Systems Design and
Implementation (OSDI’10), October 2010.
[19] M. Weiser, “Program Slicing,” in Proceedings of the 5th International
Conference on Software Engineering (ICSE’81), March 1981.
“Ui/application exerciser monkey,” http://developer.android.com/tools/
help/monkey.html.
[20]
[21] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A Study of
the 20th Usenix
Android Application Security,” in Proceedings of
Security Symposium, August 2011.
[22] V. Razmov and D. Simon, “Practical Automated Filter Generation to
Explicitly Enforce Implicit Input Assumptions,” in Proceedings of the
17th Annual Computer Security Applications Conference (ACSAC’01),
December 2001.
[23] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “PiOS: Detecting Privacy
Leaks in iOS Applications,” in Proceedings of 18th Annual Network and
Distributed System Security Symposium (NDSS’11), February 2011.
[24] B. Livshits and J. Jung, “Automatic Mediation of Privacy-Sensitive
Resource Access in Smartphone Applications,” in Proceedings of the
22th Usenix Security Symposium, August 2013.
[25] R. Xu, H. Sadi, and R. Anderson, “Aurasium: Practical Policy Enforce-
ment for Android Applications,” in Proceedings of the 21th Usenix
Security Symposium, August 2012.
15