ﬁguration. For demonstration purposes, we recreated the
key elements of that risky conﬁguration onto a lab ma-
chine, and ran the resulting ﬁles through the LFA. The
report excerpt shown here is from the lab machine. The
full web-based sample report is available online from
[Lum01].
In Figure 1 we see a web page showing a Check Point
FW-1 rule-base. This is the LFA’s starting point. The
only processing that was done to create this page was
to convert Check Point’s conﬁguration ﬁles into HTML,
rendered in a format that is quite close to that of FW-1’s
management module (down to the level of user-deﬁned
colors for various objects). The conversion utility we
used is an improved version of the fwrules50 program
[XOS+00].
At a cursory glance, the rule-base looks rather simple,
protecting two machines (called one and two). Ma-
chine one seems to be a web server, and machine two
seems to be a Usenet (nntp) news server. The policy is
Figure 1: The original rule-base, rendered in HTML.
quite lax on outbound services (rule 3 allows all types
of tcp outbound), but seems quite reasonable for in-
bound connections, allowing only http, https, ssh,
and nntp.
In Figure 2 we can see an HTML rendering, produced for
the same rule-base, of the LFA’s intermediate language,
as discussed in Section 2.3. The ﬁgure shows the results
of the Check-Point-to-LFA front-end conversion utility,
ckp2lfa, post-processed into an HTML-based report
(called the Expanded Rules report) by the back-end util-
ities.
We can see that the rule-base now has several additional
rules. These rules are derived from Check Point “prop-
erties”, which are controlled through a separate tab in
Check Point’s management module. The properties that
are selected by the administrator create implicit rules that
are inserted into the rule-base at certain positions. One
of the tasks of the ckp2lfa front-end is to convert all
these implicit rules into their explicit equivalents, and in-
sert them in their correct positions in the rule-base.
Figure 2 shows the effects of properties that govern DNS
and ICMP trafﬁc, and of the property that controls re-
mote management access to the ﬁrewall itself. After
ckp2lfa converts the implicit rules into explicit ones,
we can see that rules 1, 3, and 10, are wide open (allow-
ing trafﬁc from anywhere to anywhere). Unfortunately,
these rules represent the effects of Check Point FW-1’s
default settings. Based on client conﬁguration ﬁles we
have seen, leaving these properties at their default setting
seems to be a common mistake among FW-1 administra-
tors.
Another piece of information that
is clear after the
ckp2lfa conversion is that the ﬁrewall is actually per-
forming Network Address Translation (NAT) on the ad-
dress on machine one: Rules 4–8 show that machine
one has both a valid (routable) IP address and a private
IP address. The ﬁrewall translates between the two ad-
dresses based on the direction of the packets.
The next step in the processing is the the route2hos
front-end, which converts the ﬁrewall’s routing table
into a Firmato MDL ﬁrewall connectivity ﬁle. Instead
of showing the ﬁrewall connectivity ﬁle itself, in Fig-
ure 3 we show a graphical representation of the ﬁre-
wall connectivity, which is derived from the MDL ﬁre-
wall connectivity ﬁle using the graph visualization tool
dot [GKNV93] [Dot01]. We emphasize that Figure 3 is
completely machine-generated, with no manual tweak-
ing. The ﬁgure shows the IP addresses behind each of
the ﬁrewall’s three internal interfaces. We can see that
interface if 2 is connected to an RFC 1918 private IP
address subnet, with a single routable IP address added
(this is the valid IP address of machine one, which is
NATed). The rest of the IP address space, including all
of the Internet, is behind interface if 0.
Once the Check Point conﬁguration ﬁles have been con-
verted to the LFA intermediate language, and the routing
table has been converted into an MDL network ﬁrewall
connectivity ﬁle, the LFA proceeds to simulate the con-
ﬁgured policy. This is done by the core query engine
(Section 2.2). The output of the core engine is then ren-
dered in HTML by the back-end utilities, which also cre-
ate all the cross-links between various components of the
report.
In Figure 4 we see a portion of the “Analysis by service:
Incoming” HTML-based report, which is one of the four
reports that LFA creates. The ﬁgure shows the results
of the query “Outside ! Inside : netbios”, meaning
“Can netbios trafﬁc cross the ﬁrewall from the Out-
side to the Inside?”.
Somewhat surprisingly, the report shows that netbios
trafﬁc is allowed from anywhere on the Outside, to ma-
chine two. The ﬁgure shows the user-deﬁned name
(“two”) alongside the result of a reverse dns lookup on
the IP address of that machine (recall Section 2.5). We
can see in the ﬁgure that the culprit rule which allows
netbios trafﬁc through is rule number 9. All the un-
derlined values shown in Figure 4 are hyperlinks. Click-
ing on the “9” link brings the user to the Expanded Rules
report (recall Figure 2), with rule 9 highlighted. Look-
ing back at Figure 2, we see that rule 9 indeed refers
to machine two, however, the service listed is called
nntp services, not netbios.
Clicking on the nntp services link from the Ex-
panded Rules report (Figure 2) brings the user to
the Services report, the relevant portion of which is
shown in Figure 5. We can see that the deﬁnition of
nntp services has two components: one with tcp
on destination port 119 (this is the correct deﬁnition),
and one with tcp on source port 119. The latter deﬁ-
nition is very risky and is the cause for netbios (and,
indeed, any other tcp service) being allowed through
the ﬁrewall. This is since the choice of source port is
completely under the control of the sender of the packet.
There is nothing to prevent an attacker from setting the
source port to 119 and the destination port to 139 (net-
bios): the ﬁrewall would let the packet through based
on its source port, and allow it to access the netbios port
on the target machine. This is actually part of a hacking
Figure 2: The expanded rule-base, after conversion to the LFA’s intermediate language.
Outside
if_0
(hme0)
checkpoint1
if_1
(qfe1)
if_2
(qfe2)
if_3
(qfe3)
internal1
135.23.45.176 - 135.23.45.179
behind_if_2
10.10.32.180 - 10.10.32.183
135.23.45.182
internal3
135.23.45.184 - 135.23.45.187
Figure 3: A diagram of the ﬁrewall’s network connectivity, derived from the ﬁrewall connectivity description ﬁle.
Figure 4: An excerpt from the “Analysis by service: Incoming” report, showing the results of the netbios query.
Figure 5: An excerpt from the Services report, with the nntp services service highlighted.
technique known as “ﬁrewalking”, and is usually done
using source port 53 (dns) which is very often open
[GS98].
Remarks:
(cid:15) A manual inspection of the rule-base shown in Fig-
ure 1, even by an expert auditor, is very likely
to miss the vulnerability that
the LFA demon-
strated.
The service name listed in the rule
(nntp services) makes sense. Even if the au-
ditor is diligent enough to dig deeper and check the
deﬁnition of the service, she would ﬁnd that the port
number (119) is in fact correct.
It is just in the
wrong column, half an inch away from being per-
fect.
(cid:15) Similarly, a ﬁrewall probe by an active vulnerability
test tool would probably also miss the vulnerability.
Unlike LFA, such a tool inherently cannot test ev-
ery possible combination of IP addresses and port
numbers, and it would have no special reason to test
the particular combination of source port 119 and
destination port 139.
(cid:15) We believe that the reason for the mistake in the
deﬁnition of nntp services is that the ﬁrewall
administrator who created it was not fully aware
of the implications of stateful inspection, and was
probably used to conﬁguring stateless packet ﬁlters,
such as router access-control-lists. A stateful ﬁre-
wall (like Check Point FW-1) will automatically al-
low the returning packets of an open tcp session. A
stateless access-control-list requires a separate rule
for the returning packets, in which the ﬁltering is
done based on the source port (since the destination
port is selected dynamically). The erroneous com-
ponent of the nntp services deﬁnition looks
precisely like a stateless rule allowing the returning
packets through the ﬁrewall.
5 Conclusions
The Lumeta Firewall Analyzer (LFA) is a novel, multi-
vendor tool that simulates and analyzes the policy en-
forced by a ﬁrewall. The LFA takes the ﬁrewall’s conﬁg-
uration ﬁles and routing table, parses them, and simulates
the ﬁrewall’s behavior against all the possible packets
it could receive. The result is an explicit, cross-linked,
HTML-based report showing all the types of trafﬁc al-
lowed in from the Internet, and all the types of trafﬁc
allowed out.
[GKNV93] E. R. Gansner, E. Koutsoﬁos, S. C. North,
and K.-P. Vo. A technique for drawing di-
rected graphs. IEEE Transactions on Soft-
ware Engineering, 19(3):214–230, 1993.
Acknowledgments
[GS98]
[MWZ00] A. Mayer, A. Wool, and E. Ziskind. Fang:
A ﬁrewall analysis engine. In Proc. IEEE
Symp. on Security and Privacy, pages 177–
187, Oakland, CA, May 2000.
[PIX97]
Cisco’s PIX ﬁrewall series and stateful
ﬁrewall security. White paper, 1997.
http://www.cisco.com/warp/
public/cc/pd/fw/sqfw500/
tech/nat_wp.pdf.
[Fyo00]
Fyodor. NMAP - the network mapper,
2000. http://www.insecure.org/
nmap/.
[RGR97]
A. Rubin, D. Geer, and M. Ranum. Web Se-
curity Sourcebook. Wiley Computer Pub-
lishing, 1997.
Fire-
D. Goldsmith and M. Schiffman.
walking: A traceroute-like analysis of
ip packet responses to determine gate-
way access control lists. White paper,
Cambridge Technology Partners, 1998.
http://www.packetfactory.
net/firewalk/.
S. Ioannidis, A. D. Keromytis, S. M.
Bellovin, and J. M. Smith. Implementing
a distributed ﬁrewall.
In Proc. 7th ACM
Conf. Computer and Communications Se-
curity (CCS), Athens, Greece, November
2000.
IOS
feature
ﬁrewall
set,
http://www.cisco.com/
Cisco
2000.
univercd/cc/td/doc/pcat/
iofwfts1.htm.
2000.
Internet scan-
http://documents.
Internet security systems:
ner,
iss.net/literature/
InternetScanner/is_ps.pdf.
Lucent managed ﬁrewall, version 3.0,
1999.
http://www.lucent.com/
iss/html/technical.html.
ﬁrewall
Lumeta
analyzer,
http://www.lumeta.com/
solution_firewall.html.
2001.
[IKBS00]
[IOS00]
[ISS00]
[LMF99]
[Lum01]
A project such as LFA is a team effort. Many peo-
ple have contributed to the evolution of LFA, whether
in ideas, algorithms, or code. I gratefully acknowledge
the contributions of Yair Bartal, Sudip Bhattachariya,
Steve Branigan, Hal Burch, Diane Burley-McGlue, Bill
Cheswick, Terry Lieb, Tom Limoncelli, Ryan Martin,
Alain Mayer, Kobi Nissim, Karl Siil, Bruce Wilner, and
Elisha Ziskind.
References
[Bel99]
[Bla00]
S. M. Bellovin. Distributed ﬁrewalls. ;lo-
gin:, pages 39–47, November 1999.
BlackICE Defender. Network ICE, 2000.
http://www.networkice.com/
products/blackice_defender.
html/.
[BMNW99] Y. Bartal, A. Mayer, K. Nissim, and
A. Wool. Firmato: A novel ﬁrewall man-
agement toolkit. In Proc. 20th IEEE Symp.
on Security and Privacy, pages 17–31,
Oakland, CA, May 1999.
[Che97]
[CSS00]
[Dot01]
Check Point FireWall-1, version 3.0.
White paper,
http://
www.checkpoint.com/products/
whitepapers/wp30.pdf.
June 1997.
Cisco secure scanner 2.0, 2000. http:
//www.cisco.com/warp/public/
cc/pd/sqsw/nesn/index.shtml.
Graphviz - open source graph draw-
ing software.
2001.
http://www.research.att.
com/sw/tools/graphviz/.
version 1.7,
[Rus00]
Linux
R. Russell.
HOWTO,
http://www.linuxdoc.org/
HOWTO/IPCHAINS-HOWTO.html.
v1.0.8,
IPCHAINS-
2000.
July
[XOS+00] W. Xu, S. O’Neal, J. Schoonover, S. Moser,
F. Lamar, and G. Grasboeck.
fwrules50,
2000. Available from http://www.
phoneboy.com/fw1/.
[Zon00]
ZoneAlarm 2.1.44.
http://www.zonelabs.com/.
Zone Labs, 2000.