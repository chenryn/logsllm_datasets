lapping relationships that agree). Com-
munities and RPSLng data have the
largest agreement, over 98 %.
Algorithm 1. is a summary of our IMC 2013 IPv4 AS relationship inference
algorithm. The bold lines were updated to accommodate IPv6.
Require: AS paths, Allocated ASNs, IXP ASes
1: Discard or sanitize paths with artifacts
2: Sort ASes in decreasing order of computed transit degree, then node degree
3: Infer clique at top of AS topology (updated)
4: Discard poisoned paths
5: Infer c2p relationships top-down using above ranking
6: Infer c2p relationships from VPs inferred not to be announcing provider routes
7: Infer c2p relationships for ASes where customer transit degree exceeds provider’s
8: Infer customers for ASes with no providers
9: Infer c2p relationships between stub and clique ASes (removed)
10: Infer c2p relationships where adjacent links have no relationship inferred
11: Infer remaining links represent p2p relationships
Figure 3 shows the overlap between the BGP communities, RPSLng, and
LocPref validation data sources for July 2014. The BGP communities and
RPSLng data had the largest overlap, and were consistent 98 % of the time.
4 Inference Methodology
4.1 Overview of Existing IPv4 Algorithm
Our IPv6 AS relationship algorithm is based on our IPv4 algorithm [18], with
adjustments to account for diﬀerences in the routing ecosystems [9,13]. In par-
ticular, the IPv6 AS topology lacks a fully connected clique that serves as the
transit backbone because of a long-standing peering dispute between Cogent and
Hurricane Electric [17].
Algorithm 1 summarizes our IPv4 AS relationship inference algorithm (details
in [18]), highlighting the two steps we changed to accurately infer IPv6 relation-
ships. First, we sanitize the input data by removing paths with artifacts, i.e., loops,
116
V. Giotsas et al.
reserved ASes, and IXPs (step 1). We use the resulting AS paths to compute the
node and transit degree (the number of unique neighbors that appear on either
side of an AS in adjacent BGP links) of each AS, and produce an initial rank order
(step 2). We then infer the clique of ASes at the top of the hierarchy (step 3). After
ﬁltering out some poisoned paths (step 4), we apply heuristics to identify c2p links
(steps 5–10). In step 5, we infer c2p relationships top-down using the ranking from
step 2, inferring an AS X is a customer of Y if Y exports routes received from X
to peers or providers; this step infers 90 % of all the c2p relationships we infer. In
step 6, we infer c2p relationships from VPs we ﬁnd announcing no provider routes,
which we deﬁne as VPs that provide paths to fewer than 2.5 % of the ASes. In
step 7, we infer c2p relationships for ASes where the customer has a larger tran-
sit degree than its provider, to infer c2p relationships for links skipped in step 5.
In step 8, we infer customers for provider-less non-clique ASes, which were also
skipped in steps 5 and 7 because those steps require a non-clique AS to have a
provider in order to infer customers relationships. In step 9, we infer that stub
ASes are customers of clique ASes even if we do not observe the clique AS export-
ing the customer’s route to other peers; in IPv4 stub networks are unlikely to meet
the peering requirements of clique members, and are most likely customers. In step
10, we resolve relationships where we observe triplets with adjacent unclassiﬁed
links. Finally, we classify all remaining unclassiﬁed links as p2p.
4.2
Inferring the IPv6 Clique
Our inference algorithm follows a top-down approach starting from the clique
members, to avoid relationship cycles and errors caused by stub ASes with high
peering visibility. Inferring the IPv4 clique is relatively straightforward, given
the maturity of the IPv4 network. In contrast, the IPv6 transit market is still
in its early stages, making it more diﬃcult to determine clique ASes. Because
the accuracy of the inferred clique impacts the overall accuracy of the inferred
relationships, we ﬁrst focus on challenges of inferring the IPv6 clique.
To infer the IPv4 clique, our algorithm from [18] ﬁrst sorted ASes by decreas-
ing transit degree and then applied the Bron/Kerbosch algorithm to ﬁnd the
clique involving the ﬁrst ten ASes that has the largest transit degree sum. We
label these ﬁrst ten ASes as the seed ASes because inferences for other ASes
descend from this initial set. For each remaining AS, we added the AS to the
clique if we observed a link with every other clique AS, and the AS did not
appear to receive transit from one clique member to reach a second clique mem-
ber. This approach works well for inferring the IPv4 clique because the largest
transit degree ASes have restrictive peering policies, maintaining a peering clique
with only selected transit-free ASes. For April 2014, the largest IPv4 transit
degree AS was Level3 which maintains a restrictive peering policy. In contrast,
the largest IPv6 transit degree AS is HE, which has an open peering policy, and
is part of large peering meshes with ASes that are not transit-free; calculating
the clique starting from the ASes with the largest transit degrees returns incor-
rect cliques in IPv6. Furthermore, because the IPv6 network is still early in its
evolution, the IPv6 network is more dynamic than the IPv4 network, making
IPv6 AS Relationships, Cliques, and Congruence
117
number of ASes gained
number of ASes kept
IPv6: IPv4-focused algorithm
IPv6: IPv6-focused algorithm
IPv4: IPv4-focused algorithm
2006
2008
2010
2012
2014
15
10
5
0
15
10
5
0
15
10
5
0
2004
Fig. 4. By improving the way in which we infer the IPv6 transit-free clique, we reduce
the average number of ASes that are added or removed between temporally adjacent
cliques from 3.4 to 1.8, bringing the IPv6 clique’s stability closer to the average of 1.5
seen in IPv4.
transit degree alone an unreliable metric. Figure 4 illustrates the highly dynamic
clique membership that results when applying our IPv4-focused algorithm to
the BGP-observed IPv6 AS topology over the last decade; on average, 3.4 ASes
changed between temporally adjacent cliques. We found that at least 11 of the
20 ASes most frequently inferred to be in IPv6 cliques had at least one tran-
sit provider in our validation data, contradicting the notion of the transit-free
clique.
We therefore modiﬁed step 3 of Algorithm 1 to consider an AS’s peering
policy and reachability in addition to the AS’s transit degree. An AS with an
open peering policy will peer with other ASes, with few or no conditions; a selec-
tive policy requires conditions on traﬃc volume and symmetry; and a restrictive
policy limits peering to as few networks as necessary. The peering policy of an
AS expresses an important and relatively stable property of the AS, but is not
easily inferred from the topology alone because most peering links are invisible
in public BGP data [20]. We used the self-reported peering policy data in Peer-
ingDB [2]; for networks with PeeringDB entries but without a registered peering
policy, we assumed a restrictive policy, which operators tend not to disclose [19].
We required the seed ASes to follow a restrictive or selective policy; we did not
select ASes with open peering policies as seed ASes even if they had the largest
transit degree. In addition, we reduced the initial seed set to three ASes for years
before 2007, and to ﬁve ASes for 2007 and onwards, based on the accuracy of
inferences derived from these seed values. As with the IPv4 method, after we ﬁnd
a clique involving the seed ASes, we add other ASes to the clique whose addition
118
V. Giotsas et al.
2914
3549
3356
6175
3257
12702
6453
1299
6762
7018
209
5511
2828
6939
1273
174
3320
6830
6461
1239
Jan ’05
Jan ’06
Jan ’07
Jan ’08
Jan ’09
Jan ’10
Jan ’11
Jan ’12
Jan ’13
Jan ’14
Fig. 5. The top 20 ASes most frequently inferred to be part of the IPv6 clique according
to the improved inference algorithm that uses three metrics: peering policy, reachability
degree and transit degree. We exclude another 18 ASes inferred less often to be in the
clique. The improved algorithm yields a more stable inferred clique, which only include
transit-free ASes for most snapshots.
does not result in triplets of consecutive clique members in the BGP-observed
paths, implying one of the ASes in the triplet is receiving transit.
The use of a reachability metric is required because some transit-free ASes
are partitioned from each other due to peering disputes [17,23]. The use of a
partitioned AS as a seed can yield an incomplete clique. To minimize the chance
of using a partitioned AS, we required that seed ASes provide direct BGP feeds
to RV or RIS and announce routes to at least 90 % of the BGP-visible IPv6
address space. Additionally, if an AS misses just one link from being part of
the clique, we considered it a clique member to account for the reality of the
currently partitioned IPv6 Internet [17,23], provided that the AS does not receive
transit from one clique member to reach a second clique member, i.e. could not
be transit-free. As with the IPv4 algorithm, if there are multiple cliques we select
the clique with the largest transit degree sum. Note that some ASes previously
used diﬀerent AS numbers in IPv4 and IPv6, most notably Sprint (IPv4 AS1239,
IPv6 AS6175) and Verizon (IPv4 AS701, IPv6 AS12702). Both ASes eventually
used a single ASN for both IPv4 and IPv6, but when they were transitioning to
a single ASN (i.e., the IPv4 ASN) they used both ASNs in the IPv6 AS topology.
During the period when they used both ASNs, we merged the IPv6 AS links for