proc eval(w : witness_t, x : statement_t, rp : prover_rand_t) :
(verifier_state_t * trace_t) option }.
module type Distinguisher_t = {
proc guess(tr : witness_t * statement_t *
(verifier_state_t * trace_t) option) : bool }.
module type Simulator_t = {
proc commitment(x : statement_t) : commitment_t option
proc response(x : statement_t, ch : challenge_t) : response_t option }.
module ZKGame (D : Distinguisher_t) (RP : RandP_t)
(E : Evaluator_t) (MV : MVerifier_t) = {
proc main(w : witness_t, x : statement_t) : bool = {
rp <@ RP.gen(); ctr <@ E(MV).eval(w,x,rp); b <@ D.guess(w,x,ctr);
return b; } }.
Such an evaluator either outputs a protocol execution trace or
a failure symbol (represented by option). This trace is given to a
distinguisher, which produces a bit. Intuitively, if the two worlds
are indistinguishable, then the distinguisher will output 1 with
essentially the same probability in either one. The Real evaluator
module animates the interaction of a malicious verifier MV (with
type shown above) with the prover.
module (Real : Evaluator_t) (MV : MVerifier_t) = {
(verifier_state_t * trace_t) option = {
proc eval(w : witness_t, x : statement_t, rp : prover_rand_t) :
cp <$ chald; r ← None;
(stp,c) ← commit rp (w,x);
(ch,vst) <@ MV.challenge(x, c);
if (ch = cp) { resp ← response stp ch; r ← Some (vst,(c,ch,resp)); }
return r; } }.
In the standard ZK property this module would simply output
the execution trace. However, in the single-run ZK property, the
real-world experiment further samples a challenge uniformly at
random from the set of challenges (denoted cp <$ chald) and, be-
fore returning the execution trace, it checks whether the challenge
occurring in the protocol (chosen by the malicious prover) matches
the independently sampled one; it outputs a failure symbol other-
wise. Intuitively, in our single-run ZK property, the simulator in
the ideal world will only need to match the real-world execution
trace when it guesses the challenge produced by the verifier.
The Ideal evaluator module (omitted due to space constraints)
animates a unique interaction between a simulator and the mali-
cious prover. The goal of the simulator is to present to the verifier a
view that is indistinguishable from a real execution, without know-
ing the witness. Note that the simulator in this definition is very
limited, since in the general ZK property the simulator is given a
description of the malicious verifier, which it may run an arbitrary
number of times. For this reason, unlike an honest prover, we al-
low the simulator to signal an abort, in which case the ideal world
evaluator will also return a failure symbol. This may happen if the
simulator’s strategy does not always work, for example because it
guesses ahead of time what the malicious verifier will be doing.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2591A single-run ZK claim, for a concrete simulator S and randomness
generation model RP, can be written as:
∀ w x D MV, relation w x ⇒
| Pr [ ZKGame(D,RP,Real(MV)).main(w,x) : res ] -
Pr [ ZKGame(D,RP,Ideal(S,MV)).main(w,x) : res ] | ≤ epsilon.
3.2 MPC Protocols
Our formalization of MPC protocols shares many similarities with
the formalization of ZK protocols given above; it is the same as
that used in [19]. The main difference, in addition to considering an
arbitrary number of parties, is that we need to consider protocols
that are parametric on an abstract type for circuits (i.e., a way
to represent 𝑛-input to 𝑛-output computations) and an abstract
operator that defines what it means to evaluate an arbitrary circuit.
type circuit_t.
for the corrupted parties, as well as their outputs, and must produce
full views that reflect the interaction with honest parties without
knowing their secret inputs. If such a simulator exists, then the
secrets of honest parties are protected by the MPC protocol.
module type Simulator_t = {
proc simulate(c : circuit_t, xs : (pid_t * (pinput_t * sinput_t)) list,
ys : (pid_t * output_t) list) : (pid_t * view_t) list }.
3.3 Formalizing the MitH Transformation
We follow the modular structure of [25] in our formalization, so
we rely on the EasyCrypt theory cloning mechanism to obtain
a formalization that is parametric on sub-theories for the MitH
building blocks. We fix the number of parties to 𝑛 = 5, as this
allows us to explicitly unfold some of the hybrid arguments that
appear in the proof and reduce proof complexity.
type input_t = pinput_t * sinput_t.
op f : circuit_t → (pid_t * input_t) list → (pid_t * output_t) list
type witness_t.
type statement_t.
type view_t = input_t * rand_t * in_messages_t.
type views_t = (pid_t * view_t) list.
op protocol : circuit_t → (pid_t * rand_t) list → (pid_t * input_t) list
→ (pid_t * in_messages_t) list * (pid_t * output_t) list.
Party inputs input_t can be defined as having a public and a
secret part, which may model multiple input wires to the circuit.
Indeed, it is the circuit evaluation operator f that will define the se-
mantics of evaluating a circuit on given inputs. Finally, the protocol
operator is used to define the global protocol evaluation, and it al-
lows flexibility in defining the message scheduling, e.g., following
the next-message function approach introduced in Section 2
Given these definitions we can capture the notion of pairwise
view consistency as the following axiom corresponding to Lemma 2.3.
op consistent_trace c xp vs =
(∀ (i j : pid_t), consistent_views c xp (assoc vs i) (assoc vs j) i j).
axiom local_global_consistency (c : circuit_t) xp (vs : views_t) :
valid_circuit c ⇒ consistent_trace c xp vs ⇔ (∃ rs sx, valid_rands c rs ∧
let xs = mk_inputs xp sx in let (tr,y) = protocol c rs xs in
unzip1 sx = pid_set ∧ valid_inputs c xs ∧ (∀ pid, pid ∈ pid_set ⇒
assoc vs pid = (assoc xs pid, assoc rs pid, assoc tr pid))).
Here, mk_inputs is a simple operator that constructs full inputs
from public and secret inputs, and assoc is the operator that re-
trieves an element from an association list (in this case indexed
by the party identifier). This axiom implies the existence of a
consistent_views operator that can be used by the verifier in the
MitH construction (under a few validity restrictions). This is the
only required consistency property at this level of abstraction. For
concrete instantiations the operator must be made concrete and
proved to satisfy the assumption stated here as an axiom. We have
formalized and proved this property for any protocol that follows
the next-message syntax, and refined it to to a proof for our in-
stantiation based on Maurer’s protocol (cf. Section 4). Our BGW
instantiation currently leaves this property as an axiom, but could
be adapted in the same way to match the next-message syntax.
The correctness and 𝑡-privacy of MPC protocols are respectively
formalized analogously to completeness and zero-knowledge for
ZK protocols. For 𝑡-privacy, the main difference is that the simulator
must now construct 𝑡 views to be fed to a distinguisher. We omit
the games due to space constraints but give the simulator type here.
Note that the simulator receives the party identities and full inputs
clone import SecretSharingScheme as SS with
type secret_t = witness_t, op n = 5, op t = 2.
clone import Protocol as MPC with
op n = SS.n, op t = SS.t,
type pinput_t = statement_t, type sinput_t = share_t, type output_t = bool.
op relc : circuit_t.
clone import CommitmentScheme as CS with type msg_t = view_t.
axiom good_circuit (x : statement_t) w : valid_circuit relc ∧
(∀ (ss ss' : (pid_t * sinput_t) list), unshare ss = w ⇒ unshare ss' = w ⇒
let fss = f relc (mk_inputs x ss) in let fss' = f relc (mk_inputs x ss') in
fss = fss' ∧ (∃ b, all (fun x ⇒ snd x = b) fss)).
op relation (w : witness_t) (x : statement_t) =
∃ (ss : (pid_t * share_t) list), w = unshare ss ∧ valid_share ss ∧
let outs = f relc (mk_inputs x ss) in all (fun x ⇒ snd x) outs.
We start with abstract types for witnesses and statements. We
then import the definitions for a secret sharing scheme, where
secrets to be shared are of our witness type, we fix the number of
parties to 5, and require (𝑡 = 2)-privacy. The secret sharing scheme
fixes the type of secret shares. We can then import the definitions
for an MPC protocol, fixing the type of public inputs for all parties
to that of statements, and the type of secret inputs to a secret share.
The outputs of all parties will be a boolean value. The MPC protocol
fixes the type of circuits and the semantics for evaluating circuits
via function f. It also fixes the types of party views, which we then
use to refine a general theory for commitments.
The ZK protocol for MitH will be relative to an arbitrary circuit
relc that will be known to both prover and verifier. We restrict
our attention to a special class of circuits characterized by axiom
good_circuit: for any two secret sharings that represent the same
value, the output shall be the same for all parties. Finally, the relation
holds for any pair (𝑥, 𝑤) such that the circuit relc outputs true,
when evaluated on a set of secret shares that are a valid sharing of w
(valid_share means that ss is in the range of the sharing operation).
Intuitively, for the relation to hold it suffices that the prover is
able to find a sharing of w for which the MPC circuit accepts. Note
that, apart from the refinements shown in the Figure, all other type
definitions remain abstract and can be instantiated arbitrarily.
At this point it is possible to define the types of messages ex-
changed by the ZK protocol for MitH: the prover’s commitment
message is a list of commitments corresponding to the views of the
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2592five MPC protocol parties; the challenge returned by the verifier is
a pair of party identifiers, and the response returned by the prover
is a pair of opening strings for the selected views.
type commitment_t = (pid_t * CS.commitment_t) list.
type challenge_t = pid_t * pid_t.
type response_t = (view_t * CS.opening_t) * (view_t * CS.opening_t).
We omit the details of the types of the randomness taken by
prover and verifier. For the prover, this includes all the randomness
required for secret sharing, emulating the MPC protocol and gener-
ating the commitments. The verifier’s randomness is simpler, as it
includes only the choice of party identifiers for the challenge.
We give here the commitment generation operator, i.e., the first
stage of the prover in MitH, where the prover emulates the MPC
protocol execution and commits to the view of all parties.
op gen_commitment (rp : prover_rand_t) (xp : prover_input_t) :
prover_state_t * commitment_t =
let (w,x) = xp in
let (r_ss, r_mpc, r_cs) = rp in
let ws = SS.share r_ss w in
let x_mpc = mk_inputs x ws in
let (tr,y) = MPC.protocol relc r_mpc x_mpc in
let vs = construct_views x_mpc r_mpc tr SS.pid_set in
let cvs = map (fun pid ⇒
let r_c = oget (assoc r_cs pid) in
let v = oget (assoc vs pid) in
(pid, (v, commit r_c v))) SS.pid_set in
let cs = get_commitments cvs SS.pid_set in (cvs, cs).
The challenge and response steps are simpler to formalize. The
challenge is a random sampling of a pair of party identifiers, which
translates to copying random values from the randomness input.
The response selects the views and opening strings for the selected
parties, which are kept as internal state by the prover.
Finally, the verifier checks the response as follows.
op check (xv : verifier_input_t) (cs : commitment_t)
(rv : verifier_rand_t) (r : response_t) : bool =
let (i,j) = rv in
let (vosi, vosj) = r in let (vi, osi) = vosi in let (vj, osj) = vosj in
let (xi,ri,tri) = vi in let (xj,rj,trj) = vj in
let ci = get_party_commitment i cs in
let cj = get_party_commitment j cs in
CS.verify vi (ci,osi) ∧ CS.verify vj (cj,osj) ∧
MPC.consistent_views relc xv vi vj i j ∧ MPC.valid_inputs xv vi vj i j ∧
MPC.local_output relc i (xi,ri,tri) ∧ MPC.local_output relc j (xj,rj,trj).
The check operator verifies four conditions: 1) that the commit-
ment openings are valid wrt to the provided views; 2) that the
provided views are consistent with each other (using operator
consistent_views); 3) that the inputs to the MPC protocol are well-
formed; and 4) that the local output of the selected parties is true,
which implies that the MPC protocol execution for these parties
reported that the relation between statement and witness holds.5
Completeness. Our completeness theorem states that the MitH
construction has perfect completeness assuming perfect correct-
ness for the underlying components. Formally, in EasyCrypt we
prove that, for all valid randomness samplers R, all statements x
and all witnesses w, the completeness experiment returns true with
5The check for well-formed MPC inputs in step (3) is trivially true when all possible
share values of the input are in the range of the secret sharing scheme used by the
prover, which is the case for the trivial additive splitting we described in Section 2.
probability 1. The proof intuition is as follows. The good_circuit
restriction imposes that the circuit that defines the relation is well
behaved, in the sense that, for all sharings ¯𝑤, ¯𝑤′ ∈ [Share(𝑤)],
the circuit outputs the same consistent values for all parties. Then,
if the MPC protocol is correct, it will correctly compute the rela-
tion of the ZK proof system and every two views will be pairwise
consistent (by Lemma 2.3). Since this is an honest execution, the
commitments are well constructed and the openings will be valid,
as per the correctness property of the commitment scheme.
Soundness. The soundness theorem bounds the soundness error
2(cid:1) + 𝜖 in a single execution. Here 𝑛 is the number
of MitH by 1− 1/(cid:0)𝑛
of parties in the MPC protocol and 𝜖 is bounded by the binding prop-
erty of the commitment scheme. The proof is done in a sequence of
two game hops. In the first hop, we specify a bad event that checks
if the dishonest prover opened a commitment for the first opened
view that is not the originally committed one; we then upper bound
the probability of this event by writing an explicit reduction to
the binding property of the commitment scheme. The second hop
repeats this reduction for the second opened view. Finally, we prove