title:Assessing Quality of Policy Properties in Verification of Access Control
Policies
author:Evan Martin and
JeeHyun Hwang and
Tao Xie and
Vincent C. Hu
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
Assessing Quality of Policy Properties in
Veriﬁcation of Access Control Policies
Evan Martin
Google, Inc.
Santa Monica, CA
PI:EMAIL
Tao Xie
JeeHyun Hwang
Computer Science Department
North Carolina State University
Raleigh, NC
{jhwang4, txie}@ncsu.edu
Vincent Hu
National Institute of Standards
and Technology
Gaithersburg, MD, USA
PI:EMAIL
Abstract
Access control policies are often speciﬁed in declarative
languages.
In this paper, we propose a novel approach,
called mutation veriﬁcation, to assess the quality of proper-
ties speciﬁed for a policy and, in doing so, the quality of the
veriﬁcation itself. In our approach, given a policy and a set
of properties, we ﬁrst mutate the policy to generate various
mutant policies, each with a single seeded fault. We then
verify whether the properties hold for each mutant policy. If
the properties still hold for a given mutant policy, then the
quality of these properties is determined to be insufﬁcient
in guarding against the seeded fault, indicating that more
properties are needed to augment the existing set of proper-
ties to provide higher conﬁdence of the policy correctness.
We have implemented Mutaver, a mutation veriﬁcation tool
for XACML, and applied it to policies and properties from a
real-world software system.
1. Introduction
Access control is one of the most fundamental and
widely used security mechanisms for resources. It controls
which principals such as users or processes have access to
which resources in a system. A growing trend has emerged
toward writing access-control-policy speciﬁcations in stan-
dardized, declarative languages such as XACML [1] and
Ponder [6]. Implementing and maintaining these policies
are important and yet challenging tasks, especially as access
control policies become more complex and are used to man-
age a large amount of distributed and sensitive information.
Identifying discrepancies between policy speciﬁcations and
their intended function is crucial because correct implemen-
tation and enforcement of policies by applications are based
on the premise that the policy speciﬁcations are correct. As
a result, policy speciﬁcations must undergo rigorous veriﬁ-
cation and validation to ensure that the policy speciﬁcations
truly encapsulate the desires of the policy authors.
Property veriﬁcation [9, 11, 13, 14, 19, 24] consumes a
policy and a property, and determines whether the policy
satisﬁes the property. Policy veriﬁcation, while useful, re-
quires the policy authors to write a property set, which can
be veriﬁed against the policy under veriﬁcation to ensure its
correctness. With a property set of higher quality (covering
a larger portion of a policy’s behavior), the policy authors
are more likely to detect policy faults (if any) and increase
the conﬁdence of its correctness.
In this paper, we propose a novel approach that assesses
the quality of properties for a policy based on mutation ver-
iﬁcation, a counterpart of mutation testing [7] in veriﬁca-
tion. We have implemented our approach in a tool called
Mutaver. To the best of our knowledge, there is no previous
work to assess the quality of a property set and guide how
to write a property set. The results of our mutation veri-
ﬁcation approach can be immediately used to aid property
elicitation and serve as a general quality metric for a set of
properties that ultimately check for faults in the policy.
In our approach, we propose mutation veriﬁcation as a
means to determine which properties in the given property
set interact with rules in a policy during policy veriﬁca-
tion. In particular, given a policy, our approach automati-
cally seeds it with faults to produce various mutant policies,
each containing one fault. Then given a property set for this
policy, our approach conducts property veriﬁcation on this
policy (called the original policy) and each mutant policy. If
the property set holds for the original policy but fails to hold
for the mutant policy, then the mutant is said to be killed by
the property set. The ratio of the number of killed mutants
to the total number of mutants serves as a metric to quantify
comprehensiveness of the elicited property set. By analyz-
ing the veriﬁcation results, we can determine what rules, if
any, fail to interact with the given property set and thus help
guide property elicitation by targeting not-covered rules.
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.48
DOI 10.1109/ACSAC.2008.48
153
163
Different from previous research [17, 21] on policy mu-
tation testing, instead of assessing the quality of a request
set (by using a policy evaluation engine) in policy testing,
we assess the quality of a property set by using a policy
veriﬁcation approach. A property set can effectively sum-
marize various complex behaviors of a policy. In practice,
a property is often intuitive and expressed in various ways
(implicitly or explicitly) for a policy. Furthermore, as the
behavior characterized by a property cannot be easily char-
acterized by one or multiple policy requests, we cannot as-
sess the property set with the previous approaches [17, 21]
on policy mutation testing.
This paper makes the following main contributions:
• We propose a novel approach for assessing the quality
of properties for a policy in policy veriﬁcation.
• We implement the proposed approach with an auto-
matic tool that facilitates automated mutation veriﬁca-
tion of access control policies written in XACML [1].
• We present a case study on an access control policy
from a real-world software system to demonstrate the
feasibility of this approach.
The rest of the paper is organized as follows. Section 2
presents an example, Section 3 offers some background in-
formation, Section 4 presents our approach, Section 5 de-
scribes our experiences of applying our approach on a real-
world policy, Section 6 discusses issues in the approach,
Section 7 presents related work, and Section 8 concludes.
2. Example
This section illustrates our approach to mutation veriﬁ-
cation through a simple example. The example and corre-
sponding properties come from an example used by Fisler
et al. [9]. This access control policy formalizes a univer-
sity’s policy on assigning and accessing grades. It is a role-
based access control [8] policy with two roles speciﬁed in
the subject attribute: FACULTY and STUDENT, two pos-
sible resource attributes: INTERNALGRADES and EXTER-
NALGRADES, and three possible action attributes: ASSIGN,
VIEW, and RECEIVE. For this example, we expect the fol-
lowing properties to hold:
P r1 There do not exist members of STUDENT who can
ASSIGN EXTERNALGRADES.
P r2 All members of FACULTY can ASSIGN both INTER-
NALGRADES and EXTERNALGRADES.
P r3 There exists no combination of roles such that a user
with those roles can both RECEIVE and ASSIGN the
resource EXTERNALGRADES.
Property P r1 is intuitive since we certainly do not
want students to assign grades. Property P r2 is to ensure
that indeed faculty members can assign grades (otherwise
who would assign them?). Finally, P r3 is an example of
separation-of-duty since we do not want anyone to assign
their own grade, an apparent conﬂict of interest.
and resource =
and action = (View or Assign)
1 If role = Faculty
2
3 (ExternalGrades or InternalGrades)
4
5 Then
6
7 If role = Student
8
9
and resource = ExternalGrades
and action = Receive
Permit
10 Then
11
Permit
Figure 1. Rules in an example XACML policy.
and resource =
and action = (View or Assign)
1 If role = Faculty
2
3 (ExternalGrades or InternalGrades)
4
5 Then
6
7 If role = Student
8
9
and resource = ExternalGrades
and action = Receive
Deny
10 Then
11
Permit
Figure 2. The ﬁrst mutant XACML policy.
(ExternalGrades or InternalGrades)
and action = (View or Assign)
and resource =
1 If role = Faculty
2
3
4
5 Then
6
7 If role = Student
8
9
Permit
and resource = ExternalGrades
and action = Receive
10 Then
11
Deny
Figure 3. The second mutant XACML policy.
Figure 1 shows the example XACML policy. To keep the
example readable and concise, we write the policy as simple
IF-THEN statements. This representation over-simpliﬁes
the complexity of XACML policies but sufﬁces for illustra-
tive purposes.
The ﬁrst step of mutation veriﬁcation is to generate mu-
tant policies. For this example, we show only the mutants
produced by the Change Rule Effect (CRE) mutation oper-
ator [17]. The CRE mutation operator simply inverts each
rule’s EFFECT by changing PERMIT to DENY, or DENY to
PERMIT (one at a time for each mutant policy). The number
of mutant policies created by this operator is equal to the
154164
number of rules in the policy. This operator should never
create equivalent mutants, which are mutant policies with
the same behavior as the original policy, unless a rule is
unreachable. The example policy has only two rules and
thus only two mutant policies are generated. Figures 2 and
3 show these two mutant policies for the ﬁrst and second
rules, respectively.
The second step of mutation veriﬁcation is to determine
which properties hold for the original policy and each mu-
tant policy. The mutant is said to be killed by a property if
the property holds for the original policy but does not hold
for the mutant policy. In other words, the property reveals
the fault seeded in the mutant policy. Similar to mutation
testing [17, 21], the greater the number of mutants killed,
the more comprehensive the properties are in covering pol-
icy behaviors, and thus the more effective the properties are
at interacting with the rules in the policy.
The original policy (Figure 1) satisﬁes all three proper-
ties; therefore, if any property does not hold for a mutant
policy, then that mutant policy is killed by the property.
The ﬁrst mutant policy in Figure 2 does not satisfy P r2
and thus the ﬁrst mutant is killed. Recall P r2 seeks to en-
sure that all faculty members can assign grades. Since the
fault in Figure 2 is precisely the rule that grants this access,
the property is apparently violated. The output of the prop-
erty veriﬁcation is a list of speciﬁc access requests that vi-
olate some property. The output from the property veriﬁca-
tion on the ﬁrst mutant policy yields two requests: a request
for a FACULTY to ASSIGN INTERNALGRADES and another
request for a FACULTY to ASSIGN EXTERNALGRADES.
Access is denied for both requests, indicating a violation
of property P r2.
The second mutant policy in Figure 3 is not killed by any
of the three properties, reﬂecting that the properties are not
comprehensive and do not completely “cover” the policy.
This realization leads to the elicitation of our fourth prop-
erty, which was not originally speciﬁed by Fisler et al. [9]:
P r4 All members of STUDENT can RECEIVE EXTERNAL-
GRADES.
Property P r4 fails to hold for the second mutant policy
in Figure 3, thus killing the mutant, revealing its fault, and
increasing the mutant-killing ratio.
In general, mutation veriﬁcation serves two main pur-
poses: (1) to quantify how thoroughly a set of properties
interacts with or covers the policy behavior and (2) to fa-
cilitate property elicitation such that a property set interacts
with or covers all rules deﬁned in the policy. In particular,
the CRE mutation operator is useful in identifying speciﬁc
rules that are not covered by the property set. The CRE
mutation operator and other mutation operators together are
useful in quantifying the overall quality of the property set.
As a by-product of this process, a test suite is generated
155165
consisting of each counterexample produced for each fail-
ing property in the form of a concrete access request and an
expected response. The quality of this test suite is directly
dependent on the quality of the property set.
3. Background
This section presents background information including
a description of XACML, policy mutation testing, and Mar-
grave, a policy veriﬁcation tool used in our approach.
3.1. XACML
The eXtensible Access Control Markup Language
(XACML) is an XML-based syntax used to express policies,
requests, and responses. This general-purpose language for
access control policies is an OASIS (Organization for the
Advancement of Structured Information Standards) stan-
dard [1] that describes both a language for policies and a
language for requests or responses of access control deci-
sions. The policy language is used to describe general ac-
cess control requirements and is designed to be extended to
include new functions, data types, combining logic, etc.
3.2. Policy Mutation Testing
Mutation testing [7] has historically been applied to
general-purpose programming languages. The program un-
der test is iteratively mutated to produce numerous mutants,
each containing one fault. A test input is independently ex-
ecuted on the original program and each mutant program. If
the output of a test input executed on a mutant differs from
the output of the same test input executed on the original
program, then the seeded fault is detected and the mutant is
said to be killed.
Policy mutation testing [17, 21] has been used to mea-
sure the fault-detection capability of a request set. In our
previous work [17], we proposed a fault model for access
control policies and deﬁned a set of mutation operators that
implement that model with the goal of programmatically
creating mutant policies in order to evaluate test generation
techniques and coverage criteria in terms of fault-detection
capability. Similarly, Traon et al. [21] adapt mutation anal-
ysis and deﬁne mutation operators to quantify the effective-
ness of a test set. Unfortunately, there are various expenses
and barriers associated with mutation testing [17]. Primar-
ily the generation and execution of a large number of mu-
tants on a large test set. Fortunately, policy mutation test-
ing is not as expensive as program mutation testing simply
because policy speciﬁcation languages are far simpler than
general-purpose programming languages. Similarly and for
the same reason, formal veriﬁcation of policy speciﬁcation
is less costly. This distinction is one of the primary reasons
that policy mutation veriﬁcation is feasible. We use a vari-
ant of the policy mutation testing framework from our previ-
ous work [17] to facilitate the implementation of our policy
mutation veriﬁcation approach presented in Section 4.
Mutation analysis has been applied to model-based test-
ing as well. Generally a model checker accepts a state-based
model and a property, and outputs a counterexample if that
property is not satisﬁed. The counterexample is essentially
a test input that can then be executed on the concrete imple-
mentation of the model. Speciﬁcation mutation [5] is a way
to measure the effectiveness of a test input by mutating the
speciﬁcation. The speciﬁcation is a set of properties that de-
scribe how the model should behave. By mutating the spec-
iﬁcation (i.e., properties), one can determine the adequacy
of the model and its corresponding implementation. Con-
versely one can mutate the model [4, 10] to determine the
adequacy of the speciﬁcation. Our approach presented in
Section 4 is analogous to model mutation where the model
is the policy and the speciﬁcation are the properties.
Figure 4. Property veriﬁcation.
mutant is lengthy and semantically quite different from the
original one, their comparison is often costly.
4. Mutation Veriﬁcation
4.2. Property Veriﬁcation
This section presents our approach for policy mutation
veriﬁcation to assess the quality of policy properties. We
next describe the details of each step in the approach: mu-
tant generation, property veriﬁcation, mutant-killing deter-
mination, and property generation.
4.1. Mutant Generation
Given a policy, the ﬁrst step is to generate a set of mu-
tant policies.
In our previous work [17], we presented a
fault model for access control policies and a mutation test-
ing framework to investigate the fault model. The frame-
work includes mutation operators used to implement the
fault model, mutant generation, equivalent-mutant detec-
tion, and mutant-killing determination. Previously, we used
mutation testing to measure the quality of a request set in
terms of fault-detection capability.
In our new approach,
we generate mutants not to measure the quality of a request
set, but to measure the quality of a set of properties used
for property veriﬁcation. We use the Change Rule Effect
(CRE) [17] mutation operator to help guide property elici-
tation to improve upon the existing property set.
The inputs to this step are the policy under test and a
set of mutation operators. The mutator then generates a
set of mutant policies, each with a single fault. Among
generated mutants, semantically equivalent mutants to the