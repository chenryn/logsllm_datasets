instruction that will be modified. All binary instructions has a size in manner of bytes, in
INVICTUS
11
Security Paper
order to jump to the backdoor code address, a long jump will be used which is 5 or 6
bytes. So when patching the binary, the instruction that will be patched needs to be the
same size with a long jump instruction, otherwise the previous or next instruction will be
corrupted.
Selecting the right space for redirecting the execution is very important for bypassing
the dynamic and sandbox analysis mechanisms of AV products. If redirection occurs
directly it will probably be detected at the dynamic analysis phase of AV scanners.
Hiding Under User Interaction:
The first things that comes in mind for bypassing sandbox/dynamic analysis phase is
delaying the execution of the shellcode or designing sandbox aware shellcodes and
trigger mechanisms. But when backdooring, most of the time there is not so much space
for adding these kind of extra code inside PE file. Also designing anti detection
mechanisms in assembly level languages requires a lot of time and knowledge.
This method takes advantage of functions that requires user interactions in order to
perform operations, redirecting the execution inside such functions will serve as a
trigger mechanism for activating the backdoor code only if when a real user operating
the program. If this method can be implemented correctly, it will have %100 success rate
and it will not increase the backdoor code size.
The “Open” button on putty executable UI launches a function that checks the validity of
the given ip address,
INVICTUS
12
Security Paper
If the ip address field value is not empty and valid, it launches a connection function that
tries to connect the given ip address.
If client successfully creates a ssh session a new windows pops up and asks for
credentials,
INVICTUS
13
Security Paper
This will be the point that redirection will occur, since no AV product is not advanced
enough for replicating this kind of complex usage, the implanted backdoor will not be
detected whit automated sandbox and dynamic analysis mechanisms.
With using basic reverse engineering methods like following strings and string
references it will not be hard to find the address of the connection function, after client
establishes a connection with the given ip, there is a string “login as: “ printed to the
window, this string will help us find the address of the connection function, IDA Pro does
a very good job in terms of following the string references,
For finding the “login as:” string open
Views->Open Subviews->Strings on IDA
After finding the string double click on it for going to location, inside data sections IDA
finds all the cross references that have made for the strings, with pressing “Ctrl+X” it
shows all cross references,
This reference made inside the function that prints the “login as: ” string,
INVICTUS
14
Security Paper
This will be the instruction that is going to be patched, before making any changes take
note of the instruction. After the execution of the backdoor code it will be used again.
With changing the PUSH 467C7C instruction to JMP 0x47A478 redirection phase of
backdooring process is completed. It is important to take note of the next instruction
address. It will be used as returning address after the execution of the backdoor code.
Next step will be injecting the backdoor code.
7. Injecting Backdoor Code
While injecting backdoor code the first think that needs to be done is saving the
registers before the execution of the backdoor. Every value inside all registers is
extremely important for the execution of the program. With placing PUSHAD and
PUSHFD instructions at the begging of the code cave all the registers and register flags
are stored inside stack. These values will popped back after the execution of the
backdoor code so the program can continue execution without any problem.
As mentioned earlier, the backdoor code that will be used is meterpreter reverse tcp
shellcode from metasploit project. But there needs to be few changes inside shellcode.
Normally reverse tcp shellcode tries to connect to the handler given number of times
and if the connection fails it closes the process by calling a ExitProcess API call.
INVICTUS
15
Security Paper
The problem here is, if the connection to handler fails the execution of the putty client
will stop, with changing few lines of the shellcodes assembly now every time connection
fails shellcode will retry to connect to the handler, also size of the shellcode is
decreased.
After making the necessary changes inside assembly code compile it with nasm -f bin
stager_reverse_tcp_nx.asm command. Now the reverse tcp shellcode is ready to use, but
it will not be placed directly. The goal is executing the shellcode on a new thread. In
order to create a new thread instance, there needs to be another shellcode that makes a
CreateThread API call that is pointing to reverse tcp shellcode. There is also a shellcode
for creating threads inside metasploit project written by Stephen Fever,
INVICTUS
16
Security Paper
After placing the shellcode bytes inside createthread.asm file in hex format like above, it
is ready to be assembled with nasm -f bin createthread.asm command. At this point the
shellcode is ready to be inserted to the cave but before inserting the shellcode it should
be encoded in order to bypass the static/signature analysis mechanisms of AV products.
Because of all encoders inside metasploit project are known by majority of AV products,
using custom encoders is highly suggested. This paper will not cover the making of such
custom shellcode encoders because it will be yet another article’s subject but using
multiple metasploit encoders may also work. After each encoding process uploading the
encoded shellcode to virus total in raw format and checking the detection score is
suggested. Try every combination until it gets undetected or wait for the next article.
After properly encoding the shellcode, it is time for inserting it to the code cave. Select
the instruction just under the PUSHFD and press Ctrl+E on immunity debugger,
shellcode will be pasted here in hex format.
With xxd -ps createthread command, print the encoded createthread shellcode in hex
format or open the shellcode with a hex editor and copy the hex values. While pasting
the hex values to debugger be careful about the byte limit, these patching operations
are made with immunity debugger and immunity debugger has a byte limit when pasting
to edit code window. It will not paste all of the shellcode, remember the last 2 byte of
the pasted shellcode inside edit code window, after pressing the OK button continue
pasting the bytes where they end, when all shellcode is pasted to code cave the insertion
of the backdoor code is complete.
INVICTUS
17
Security Paper
8. Restoring Execution Flow
After the creation of the backdoor code thread, the program needs to turn back to its
ordinary execution, this means EIP should jump back to the function that redirected the
execution to the cave. But before jumping back to that function all the saved register
should be retrieved.
With placing POPFD and POPAD instruction at the end of the shellcode, all saved
register are poped backed from stack in the same order. After retrieving the registers
there is one more think to do before jumping back. It is executing the hijacked
instruction, the PUSH 467C7C instruction was replaced with JMP 0x47A478 in order to
redirect the execution of the program to the code cave. Now with placing the PUSH
467C7C instruction at the end, hijacked instruction is retrieved also. It is time for
returning back to the function that redirected the execution to the cave with inserting
JMP 0x41CB73 instruction, at the end the resulting code should look like like below.
At the end select all patched and inserted instruction, press right-click and Copy to
executable. This operation should be done to every instruction that have been modified.
When all instructions are copied and saved to file, close the debugger and test out the
executable, if executable is running smoothly the backdoor is ready to use.
Finally, fixing the final file checksum is suggested for preserving authenticity of the file
and not to look suspicious, also this may have a effect on decreasing the detection score.
INVICTUS
18
Security Paper
9. Conclusion
At the end, when all methods are applied properly, resulting backdoor is fully
undetectable. For serving the concept of security in both ways this paper will also point
out the counter measures against these backdooring techniques, these measures can be
helpful for sysadmins, malware annalists and anti virus/malware product developers.
1) Section Privilege Controls
When talking about backdoored files, the section privileges are very important for
detecting anomalies, current compilers are never going to set full permissions to a
section unless programmer wants it to, especially data section like .data or .rdata
shouldn't have execute privileges, also code sections like .text shouldn't have write
privileges, these anomalies should be considered as suspicious behavior.
2) Uncommon Section recognition
If programmers doesn't makes any configurations compilers usually creates 5-6 generic
types of sections, all security products should posses a mechanism for recognizing
uncommon and
suspicious sections, this mechanism can look for the entropy and data
alignment inside sections, if a section contains high entropy and unusually ordered data,
it should be considered suspicious.
3) Signature Checks
This countermeasure is very classic but yet it is the most effective, when downloading a
new program or
any piece of executable file, checking the sha1 signature is the safest
way for evading backdoored files in your system.
4) Checking File Checksum
When there is a difference between the checksum value inside
image header and the
actual checksum of the file, this indicates that the file has been modified, security
products and sysadmins should check the authenticity of the file with calculating the
actual checksum and comparing it with the image header.
INVICTUS
19
Security Paper
POC
Video:https://pentest.blog/art-of-anti-detection-1-introduction-to-av-detection-techniq
ues
INVICTUS
20
Security Paper
10.
References:
http://NoDistribute.com/result/image/Ye0pnGHXiWvSVErkLfTblmAUQ.png
https://github.com/secretsquirrel/the-backdoor-factory
https://www.shellterproject.com/
https://en.wikipedia.org/wiki/Red_team
https://en.wikipedia.org/wiki/Address_space_layout_randomization
https://en.wikipedia.org/wiki/Code_cave
https://en.wikipedia.org/wiki/Checksum