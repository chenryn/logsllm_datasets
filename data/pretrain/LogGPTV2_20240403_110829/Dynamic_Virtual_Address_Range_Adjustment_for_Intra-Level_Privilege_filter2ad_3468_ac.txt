EL0Normal WorldSecure WorldEL0EL1EL1EL2EL3TTBR1_EL1 regionTTBR0_ELx regionNever mappedVirtual Address Space0xFFFF_FFFF_FFFF_FFFF0x0264-2(64-TCR_EL1.T1SZ)0xFFFF_0000_0000_0000(Boundary, when TCR_EL1.T1SZ = 16)0x0000_FFFF_FFFF_FFFF(Boundary, when TCR_ELx.T0SZ = 16)2(64-TCR_ELx.T0SZ)-1Fig. 5. The overview of our technique that implements intra-level privilege
separation, Hilps divides system software into the inner domain (more privi-
leged) and the outer domain (less privileged) by using the intra-level isolation
and domain switching mechanisms.
C. Translation Lookaside Buffer
A Translation Lookaside Buffer (TLB) is a hardware com-
ponent that aims to reduce the overhead of address translation
by caching recently used virtual-to-physical address mappings.
In the situation that multiple tasks run in a system concurrently,
cached TLB entries must be ﬂushed at every context switch
between tasks in order to prevent them from being exploited
by others. However, such frequent ﬂush would induce a
substantial
increase of TLB miss rates. To eliminate such
redundant TLB ﬂushes, therefore, AArch64 supports Address
Space Identiﬁer (ASID) at EL0 and EL12. By adding the ASID
ﬁeld to TLB entries, it permits a task to use certain TLB
entries holding the same ASID with the current. On AArch64,
the current ASID is deﬁned by TTBR. Recall hereby that
two registers TTBR0_EL1 and TTBR1_EL1 are involved in
address translation at EL1. Therefore at this level, AArch64
lets TCR_EL1.A1 decide which ASID of these registers
becomes the current ASID.
However, adopting ASID has its drawbacks as well. In
the case of widely shared system resources, such as the OS
kernel code and data, caching them in the TLB with multiple
ASIDs might degrade performance because it increases TLB
pressure. To mitigate this problem, AArch64 presents the non-
Global (nG) ﬂag in the page table descriptor. By clearing the
ﬂag, the corresponding pages come to be seen from every task
regardless of their ASID values.
IV. DESIGN
In this section, we present the design and implementation
details of Hilps, focusing on the two core mechanisms of priv-
ilege separation, i.e., the intra-level isolation and the domain
switching.
Fig. 6. Address space layout of the inner and outer domains with assigned
permissions. Character r, w and x mean read, write and execution, respectively.
the principle of privilege separation. We implement the intra-
level isolation mechanism to protect the inner domain. By
dynamically adjusting the range of virtual address space, this
mechanism enables the isolation and concealment of memory
for the inner domain. This operates in close interaction with
the domain switching mechanism whose primary role is to
securely transfer control between the two domains. At every
moment of control transfer, the former is controlled by the
latter in a way to reveal or hide the inner domain accordingly
in a timely manner. Basically,
the key purpose of these
mechanisms is to make the two domains have asymmetric
views on the memory address space. For this, as displayed
in Figure 6, each domain is assigned different access permis-
sions for memory blocks such that the inner domain obtains
unrestricted permissions to access the whole memory region
whereas the outer one has more restricted accesses, particularly
to the region for the inner domain.
A pivotal condition for the success of this strategy is that
the outer domain must not be allowed to manipulate any
security-sensitive system resources, such as page tables and
system control registers, that may be used to invalidate our
core mechanisms. To meet this condition, the outer domain
is deprived of control authority over security-sensitive system
resources. Instead, the outer domain is only allowed to send
requests through a speciﬁed interface to the inner domain for
controlling these resources. Upon receiving such a request, the
inner domain determines whether to accept or reject it. In the
sense that a secure entity possesses exclusive control authority
over sensitive resources, our intra-level privilege separation
technique is as powerful
in terms of security strength as
a conventional virtualization-based security solution relying
on trap-and-emulation. Consequently,
if there are security
applications demanding a secure environment for execution,
the system software redesigned by our technique can offer
them protection and monitoring capabilities comparable to the
Virtual Machine Introspection (VMI) research [18].
A. Overview of Hilps
B. Intra-Level Isolation Mechanism
Figure 5 describes our technique that we use to implement
the two core mechanisms of privilege separation. We divide
system software into the inner and outer domains, adhering to
2EL2 and EL3 do not support ASID.
Figure 7 illustrates how we realize the intra-level isolation
mechanism based on the dynamic virtual address range adjust-
ment. By either reducing or expanding the range of the valid
address space at runtime, Hilps blocks or allows access to the
memory region of the inner domain depending on which of the
6
Outer DomainInner DomainSecurity ApplicationSystem Control Register ConfigurationPage Table ManagementhookhookhookOuter Domain RegionInner Domain RegionValid Virtual Address RangeIntra-level IsolationMechanismOuter Domain RegionInner Domain RegionValid Virtual Address RangeDomain SwitchingMechanismInterfaceOuter Domain Code(perm: rx)Outer Domain Data(perm: rw)Page Table(perm: r)Inner Domain Code(Not accessible)Inner Domain Data(Not accessible)Outer Domain Code(perm: rx)Outer Domain Data(perm: rw)Page Table(perm: rw)Inner Domain Code(perm: rx)Inner Domain Data(perm: rw)Outer Domain ViewInner Domain ViewFig. 7. The virtual address mapping strategies for isolating the inner domain from the outer domain. A hypervisor and a secure monitor running at EL2 and
EL3, respectively, use the mapping strategy (a), and a normal OS and a secure OS running at EL1 use the mapping strategy (b).
7
Outer DomainTTBR1_EL1(TCR_EL1.T1SZ=27)128 EntriesVA[36:30]Outer DomainTTBR1_EL1(TCR_EL1.T1SZ=25)512 EntriesVA[38:30]01270384Inner DomainOuter Domain(Not used)Virtual Address Space383128127511Outer Domain CodeOuter Domain DataInner Domain Code0xFFFF_FFE0_0000_00000xFFFF_FFFFF_FFFF_FFFF0xFFFF_FFDF_FFFF_FFFF0xFFFF_FFA0_0000_0000Shadow Mappings of Page Tables (perm: rw)Inner Domain DataInner Domain(Not available)Outer Domain(Not available)1st-Level Page Table Entries in Outer Domainboundaryboundary1st-Level Page Table Entries in Inner DomainOuter Domain(37-bit, TCR_ELx.T0SZ=27)or(37-bit, TCR_EL1.T1SZ=27)Inner Domain(38-bit, TCR_ELx.T0SZ=26)or(39-bit, TCR_EL1.T1SZ=25)Outer Domain(37-bit, TCR_ELx.T0SZ=27)or(37-bit, TCR_EL1.T1SZ=27)TimeInner Domain(38-bit, TCR_ELx.T0SZ=26)orr(39-bit, TCR_EL1.T1SZ=25)(b) The address mapping strategy when system software uses TTBR1(c) Timeline of virtual address range adjustment Outer DomainTTBR0_ELx(TCR_ELx.T0SZ=27)128 EntriesVA[36:30]TTBR0_ELx(TCR_ELx.T0SZ=26)256 EntriesVA[37:30]01270Inner DomainOuter DomainVirtual Address Space255128127Inner Domain CodeInner Domain DataOuter Domain Code0x0000_0020_0000_00000x0000_003F_FFFF_FFFF0x0000_001F_FFFF_FFFF0x0000_0000_0000_0000Outer Domain DataInner Domain(Not available)1st-Level Page Table Entries in Outer Domainboundaryboundary1st-Level Page Table Entries in Inner Domain(a) The address mapping strategy when system software uses TTBR0Page Tables (perm: r)Shadow Mappings of Page Tables (perm: rw)Page Tables (perm: r)translated by TTBR1_EL1 expands in the opposite direc-
tion to that by TTBR0_ELx. This means that when Hilps
increases or decreases the value of TCR_EL1.T1SZ,
the
valid virtual address range and the valid ﬁrst-level entries
of the current page table change in the opposite direction.
For example, when TCR_EL1.T1SZ is 27,
the address
0xFFFF FFE0 0000 0000 is linked to the 0th ﬁrst-level entry
(see VA[36:30] is 0). Whereas, when TCR_EL1.T1SZ is
changed to 26,
the same virtual address is linked to the
256th entry (see VA[37:30] is 256), and instead, the address
0xFFFF FFC0 0000 0000 is linked to the 0th entry (see
VA[37:30] is 0). Such a discrepancy in the linkage between
the virtual addresses and the ﬁrst-level page entries would lead
the same virtual addresses of the inner and outer domains to
be mapped to different physical addresses.
To resolve the problem, Hilps introduces an alternative
address mapping strategy illustrated in Figure 7.(b). In this
case,
the valid virtual address range of the inner domain
(39-bit, 512 GB) is four times larger than that of the outer
domain through a change of TCR_EL1.T1SZ to 25 from
27; accordingly, the number of the ﬁrst-level entries of the
current page table increases to 512 from 128. Hilps uses 256
entries in the middle (from the 128th to the 383rd) to map
the inner domain region. Note that, even if the bottom 128
entries (from the 0th to the 127th) are originally used to map
the outer domain region, Hilps, in the inner domain, does not
use these entries to map the outer domain region due to the
aforementioned discrepancy problem. Instead, Hilps uses the
top 128 entries (from the 384th to the 511st) for this purpose,
as, in the inner domain, these entries correspond to the virtual
address space of the outer domain region. To do this, Hilps
copies the contents of the bottom 128 entries to the top 128
entries, thereby conﬁguring the top ﬁrst-level entries to point
to the same second-level entries that are pointed to by the
bottom ﬁrst-level entries as described in Figure 8. As a result,
Hilps can let the inner domain access the outer domain region
without the discrepancy problem because the virtual address
space of the outer domain region remains the same between
the inner and outer domains. Lastly, as the inner domain must
be able to maintain a synchronized address view of the outer
domain, if the bottom 128 entries of the current page table
are populated or modiﬁed, Hilps repeats the same operations
onto the top 128 entries. This synchronization method does
not incur any noticeable overhead as the ﬁrst-level entries are
rarely modiﬁed after initial set-up.
3) Shadow Mappings of Page Tables: To prevent the outer
the
domain from modifying the contents of page tables,
memory regions of page tables are conﬁgured as read-only.
However, as the inner and outer domains share the same
page tables, the inner domain also can be hindered by such a
restriction. To address this problem, Hilps creates the shadow
mappings of the page tables that are conﬁgured as not only
readable but also writable and locates them by adding a ﬁxed
offset in the virtual address space of the inner domain as
described in Figure 7. Therefore, the inner domain can update
the contents of the page tables through the shadow mappings.
4) Page Table Integrity: To maintain the validity of the
intra-level isolation mechanism, Hilps must ensure that the
page tables satisfy the following constraints: (1) no part of the
inner domain can be mapped to the memory region of the outer
Fig. 8. The linkage between the ﬁrst-level and second-level page table entries
at EL1.
two domains is currently in control. When the outer domain
seizes execution control, Hilps leaves the inner domain region
out of the valid virtual address range, thereby preventing the
inner domain from being exposed and possibly exploited. On
the other hand, while the inner domain holds execution control,
the valid virtual address range is expanded to cover both the
inner and outer domain regions, implying that the inner domain
owns a full access coverage reaching the entire memory space.
1) Intra-Level Isolation with TTBR0: Figure 7.(a) describes
our general address mapping strategy used to carry out intra-
level isolation that can be applied for any system software
running with TTBR0_ELx at all exception levels ELx, such
as a hypervisor (EL2) and secure monitor (EL3). Note that
as the two domains share the same page table, the value of
TTBR0_ELx remains constant whether either the inner or
outer domain is in control. While the outer domain has control,
its valid virtual address range is restricted to 37-bits3 (128
GB) by setting TCR_ELx.T0SZ to 27. By doing this, all 128
ﬁrst-level entries of the current page table, indicated by the
upper seven bits of the virtual address (VA[36:30]), are used
to map the outer domain. In this case, the outer domain cannot
access the inner domain because there are no valid entries
associated with the memory region of the inner one. On the
other hand, when the inner domain has control, the valid virtual
address range is expanded to 38-bits (256 GB) by changing
TCR_ELx.T0SZ to 26. As a result, the number of valid ﬁrst-
level entries of the current page table increases to 256 from
128, and the upper eight bits of the virtual address (VA[37:30])
indicate associated entries. In this case, the original 128 entries
still correspond to the memory region of the outer domain, and
the expanded 128 entries are used for the inner domain, located
outside of the outer domain. Therefore, the inner domain can
access the entire memory regions of both domains without
restrictions.
translation on AArch64. Unfortunately,
2) Intra-Level Isolation with TTBR1: A normal OS and
secure OS, which typically run at EL1, adopt TTBR1_EL1
for address
for
OSes, we cannot use the general isolation mechanism de-
signed for other system software adopting TTBR0_ELx,
described in Section IV-B1. That
is because the transla-
tion style with TTBR1_EL1 somewhat differs from that
with TTBR0_ELx. To explain this in more detail, recall
our remarks in Section III-B that the virtual address space
337-bits refers to a quarter of the default virtual address range setting of
Linux, but we believe it would be enough for mobile devices.
8
1st-Level Page Table EntriesOuter Domain Entries(in Inner Domain)Inner Domain EntriesOuter Domain Entries(in Outer Domain)Outer Domain EntriesInner Domain Entries2nd-Level Page Table Entries0384383128127511domain, (2) the outer domain code must be conﬁgured as read-
only, and (3) privileged instructions that can conﬁgure system
control registers must not be executable in writable memory
regions or in less privileged software’s memory regions4. To
achieve this, Hilps adopts the paging delegation technique used
in previous work [7], [45], [15], [4]. Hilps allows only the inner
domain to conduct page table modiﬁcations after verifying
that each modiﬁcation adheres to these constraints. In order
to accomplish this, Hilps initially conﬁgures page tables as
read-only to prevent the outer domain from modifying them.
In addition, it instruments the outer domain code to route all
page table modiﬁcation operations to the inner domain. The
inner domain then checks the constraints and performs those
operations for the outer domain. Although the page tables
are conﬁgured as read-only, the inner domain can modify
the contents of the page tables through the shadow mapping
described in Section IV-B3.
5) Control Authority for System Control Registers: Even
if the integrity of the page tables is preserved, our isolation
mechanism can still be incapacitated through exploiting system
control registers. For example, the outer domain could modify
SCTLR to remove memory protection by disabling the MMU
or TCR to enlarge its virtual address range and access the
inner domain region. Therefore, Hilps must deprive the outer
domain of control authority over system control registers. For
this, similar to past research [7], [15], [4], Hilps replaces
privileged instructions that control such sensitive registers in
the outer domain with hooks so as to verify and emulate
them in the inner domain. We can ensure the validity of this
method because, ﬁrst, as instruction opcodes have a ﬁxed
length and are aligned on AArch64, Hilps can exhaustively
identify privileged instructions. Second, due to the constraints
enforced on the page tables mentioned in Section IV-B4,
attackers cannot execute any privileged instruction in the outer
domain.
6) Support for Multi-core Environment: Our intra-level iso-
lation mechanism relies on the dynamic virtual address range
adjustment based on TxSZ. Fortunately, as TCR containing
the TxSZ ﬁeld exists per processor core, Hilps can enforce
the intra-level isolation to each core separately by controlling
each TxSZ of cores. That is, the outer domain is banned from
accessing the inner domain region, even if the inner and outer
domains simultaneously run on different cores.
7) Support
for Loadable Module: Loadable modules,
sometimes, can be added to the outer domain to extend
functionality (particularly, in a normal OS). However, it can
provide attackers with room to compromise the inner domain
by inserting privileged instructions relevant to system control
registers into the outer domain. To address this problem, if
Hilps detects any populations of new code pages or any
modiﬁcations of code pages from the outer domain, it scans
the corresponding pages to conﬁrm whether or not they include
privileged instructions and to enforce the protection policy
described in Section IV-B5.
8) Restriction on DMA: To improve the performance, pe-
ripherals can access DRAM through Direct Memory Access
(DMA) without the mediation of the CPU. Unfortunately, it is
4This can be achieved by setting the XN (eXecute-Never) and PXN (Privi-
leged eXecute-Never) bit on the corresponding page table descriptors.
well known that attackers exploit DMA to avoid the monitoring
of a security entity residing in CPU [11], [30]. In the same way,
attackers would be able to evade monitors residing in the inner
domain.
As a means of thwarting DMA attacks, leveraging IOMMU
[3] has been popularly used on x86 systems. On ARM, Hilps
can use the System MMU [5] as the counterpart of IOMMU.
To accomplish this, Hilps prevents the outer domain from
modifying the page tables of the System MMU. Then when
a request comes from the outer domain, the inner domain
modiﬁes the tables and allows DMA only after ensuring that
there is no page table entry pointing to an inner domain region.
However, not all peripherals can take advantage of the
System MMU. Even in this case, Hilps needs to restrict
the outer domain from controlling DMA directly. On ARM,
peripherals can perform DMA with their own custom DMA
controller or with the general-purpose DMA controller of the
SoC. In either case, the outer domain can only control DMA
through memory-mapped control registers. Therefore, similar
to DMA protection with the System MMU, Hilps can restrict
DMA by only allowing the inner domain to write to regions
corresponding to DMA control registers.
C. Domain Switching Mechanism
To transfer control between execution environments with
different privilege levels, special instructions, i.e., SVC, HVC
or SMC, have been utilized. However, Hilps cannot use this
traditional method, as the inner and outer domains run at an
identical privilege level. Therefore, Hilps needs to design and
implement its own mechanism that performs domain switching
by executing a series of ordinary instructions. To achieve
this, we create an interface function, IDC, which stands for
Inner Domain Call. The IDC performs the control switching
operation between the inner and outer domains, acting as
a wrapper function for a handler which processes incoming
requests in the inner domain. It provides the outer domain
with a unique way to enter the inner domain. In addition,
IDCs are implanted across the outer domain and are invoked
with speciﬁc parameters in order to handle sensitive resources
by sending relevant requests to the inner domain (refer to
Section IV-B4 and IV-B5).
Figure 9 describes the details of the IDC. Although this
particular implementation is intended to operate at EL1, it
is generally applicable to other ELs with slight modiﬁcations
described in Section IV-C5. The IDC is divided into the entry
and exit gates. If the IDC is invoked in the outer domain,
the entry gate disables interrupts, expands the virtual address
range, switches to the inner domain stack, and then jumps to
the inner domain handler. After the inner domain ﬁnishes its