```
kubectl create -f minio-deployment.yaml
```
这将部署 MinIO 服务器，并在端口`9000/TCP`上将其公开为`minio`，如下所示:
![Figure 13.2 – Minio service creation ](img/Fig_13.2_B15514.jpg)
图 13.2–Minio 服务创建
使用端口`9000`上的`minio.velero.svc`，集群中的任何吊舱都可以使用正确的访问键来定位 MinIO 服务器。
### 暴露 MinIO 仪表板
MinIO 包括一个仪表盘，允许您浏览服务器上 S3 存储桶的内容。要允许访问仪表板，您可以部署一个公开 MinIO 服务的入口规则。我们已经在`chapter13`文件夹中包含了一个入口清单示例。您可以使用包含的文件或从以下清单创建它:
1.  记得更改主机，在`nip.io`网址中加入主机的 IP 地址:
    ```
    apiVersion: networking.k8s.io/v1beta1
    kind: Ingress
    metadata:
      name: minio-ingress
      namespace: velero
    spec:
      rules:
      - host: minio.[hostip].nip.io
        http:
          paths:
          - path: /
            backend:
              serviceName: minio
              servicePort: 9000
    ```
2.  Once deployed, you can use a browser on any machine and open the URL you used for the Ingress rule. On our cluster, the host IP is `10.2.1.121`, so our URL is `minio.10.2.1.121.nip.io`:
    ![Figure 13.3 – MinIO dashboard ](img/Fig_13.3_B15514.jpg)
    图 13.3–MiniO 仪表板
3.  要访问仪表板，请从 MinIO 部署中提供访问密钥和密钥。如果您使用的是 GitHub 存储库中的 MinIO 安装程序，则访问密钥和密钥为`packt` / `packt`。
4.  登录后，您将看到一个存储桶和存储在其中的任何项目的列表。现在，它将相当空，因为我们还没有创建备份。在对我们的 KinD 集群执行备份后，我们将重新访问仪表板:
![Figure 13.4 – MinIO Browser ](img/Fig_13.4_B15514.jpg)
图 13.4–迷你浏览器
重要说明
如果您不熟悉对象存储，请注意，虽然这在您的集群中部署了存储解决方案，但它**不会**创建存储类或以任何方式与 Kubernetes 集成。使用我们将在下一节中提供的网址完成对 S3 桶的所有 pod 访问。
现在您已经运行了一个与 S3 兼容的对象存储，您需要创建一个配置文件，Velero 将使用它来定位您的 MinIO 服务器。
### 创建 S3 目标配置
首先，我们需要创建一个带有 S3 桶凭证的文件。当我们从`chapter13`文件夹部署 MinIO 清单时，它创建了一个初始密钥 ID 和访问密钥`packt` / `packt`:
1.  在名为`credentials-velero` :
    ```
    vi credentials-velero
    ```
    的`chapter13`文件夹中创建新的凭据文件
2.  Add the following lines to the credentials file and save the file:
    ```
    [default]
     aws_access_key_id = packt
     aws_secret_access_key = packt
    ```
    现在，我们可以使用 Velero 可执行文件和`install`选项来部署 Velero。
3.  从`chapter13`文件夹中使用以下命令执行 Velero 安装，以部署 Velero:
    ```
    velero install \
     --provider aws \
     --plugins velero/velero-plugin-for-aws:v1.1.0 \
     --bucket velero \
     --secret-file ./credentials-velero \
     --use-volume-snapshots=false \
     --backup-location-config region=minio,s3ForcePathStyle="true",s3Url=http://minio.velero.svc:9000
    ```
让我们解释安装选项以及这些值的含义:
![Table 13.2 – Velero Install Options ](img/Table_13.2.jpg)
表 13.2–Velero 安装选项
当您执行安装时，您将看到许多正在创建的对象，包括许多由 Velero 用来处理备份和恢复操作的**自定义资源定义** ( **CRDs** )和机密。如果您遇到 Velero 服务器启动不正确的问题，您可以查看一些可能包含不正确信息的 CRD 和机密。在下表中，我们解释了使用 Velero 时可能需要与之交互的一些常见对象:
![Table 13.3 – Velero's CRDs and Secrets ](img/Table_13.3.jpg)
表 13.3–韦莱罗的 CRD 和机密
虽然您与这些对象的大部分交互将通过 Velero 可执行文件进行，但了解实用程序如何与 API 服务器交互始终是一个很好的做法。如果您没有访问 Velero 可执行文件的权限，但需要查看或潜在地更改对象值以快速解决问题，那么了解对象及其功能是有帮助的。
现在我们已经安装了 Velero，并且对 Velero 对象有了较高的理解，我们可以继续为集群创建不同的备份作业。
# 使用 Velero 备份工作负载
Velero 支持使用单个命令或定期运行“一次性”备份。无论您选择运行单一备份还是重复备份，都可以使用`include`和`exclude`标志备份所有对象或仅备份某些对象。
## 运行一次性集群备份
要创建初始备份，您可以运行单个 Velero 命令来备份集群中的所有名称空间。
在没有任何标志来包括或排除任何集群对象的情况下执行备份将备份每个命名空间和命名空间中的所有对象。
要创建一次性备份，请使用`backup create `选项执行`velero`命令。在我们的示例中，我们将备份命名为`initial-backup`:
```
velero backup create initial-backup
```
您将收到的唯一确认是备份请求已提交:
```
Backup request "initial-backup" submitted successfully.
Run `velero backup describe initial-backup` or `velero backup logs initial-backup` for more details.
```
幸运的是，韦莱罗还告诉您检查备份状态和日志的命令。输出的最后一行告诉我们，我们可以使用带有`backup`选项的`velero`命令和`describe`或`logs`来检查备份操作的状态。
`describe`选项将显示作业的所有细节:
![Figure 13.5 – The Velero describe output ](img/Fig_13.5_B15514.jpg)
图 13.5–韦莱罗描述输出
注意
为了加强上一节，我们提到了 Velero 使用的一些 CRD，我们还想解释 Velero 实用程序从哪里检索这些信息。
创建的每个备份都将在 Velero 命名空间中创建一个备份对象。对于我们的初始备份，创建了一个名为`initial-backup`的新备份对象。使用`kubectl`，我们可以描述对象来查看 Velero 可执行文件将提供的类似信息。
如图 13.5 所示，`describe`选项显示了备份作业的所有设置。因为我们没有向备份请求传递任何选项，所以该作业包含所有的名称空间和对象。要验证的一些最重要的细节是阶段、要备份的项目总数和要备份的项目。
如果阶段的状态是除了`success`之外的任何状态，那么您的备份中可能没有您想要的所有项目。检查备份的项目也是个好主意；如果备份的项目数少于要备份的项目数，我们的备份不会备份所有项目。
您可能需要检查备份的状态，但是您可能没有安装 Velero 可执行文件。由于此信息在 CR 中，我们可以描述 CR 以检索备份详细信息。在备份对象上运行`kubectl describe`将显示备份的状态:
```
kubectl describe backups initial-backup -n velero
```
如果我们从`describe`命令跳到输出的底部，您将看到以下内容:
![Figure 13.6 – The kubectl describe output on the backup resource ](img/Fig_13.6_B15514.jpg)
图 13.6–库描述了备份资源的输出
在输出中，您可以看到阶段已完成、开始和完成时间，以及备份和备份中包含的对象数量。
最好使用集群插件，它可以根据日志文件中的信息或对象的状态生成警报，例如 AlertManager。您总是希望备份成功，如果备份失败，您应该立即查看失败的原因。
## 计划群集备份
如果您计划了群集操作或者命名空间中有重大软件升级，则创建一次性备份非常有用。由于这些事件很少发生，因此您需要安排一次定期备份群集的备份，而不是随机的一次性备份。
要创建定时备份，您可以使用`schedule`选项，并用 Velero 可执行文件创建一个标记。随着时间表和创建，您需要提供作业的名称和`schedule`标志，它接受基于 *cron* 的表达式。以下时间表告诉韦莱罗每天凌晨 1 点备份:
![Figure 13.7 – Cron scheduling expression ](img/Fig_13.7_B15514.jpg)
图 13.7–Cron 调度表达式
使用*图 13.7* 中的信息，我们可以使用以下`velero schedule create`命令创建一个将在凌晨 1 点创建备份的备份:
```
velero schedule create cluster-daily --schedule="0 1 * * *"
```
Velero 将回复已成功创建计划:
```
Schedule "cluster-daily" created successfully.
```
如果您不熟悉 cron 和可用的选项，您应该阅读位于[https://godoc.org/github.com/robfig/cron](https://godoc.org/github.com/robfig/cron)的 cron 软件包文档。
cron 还将接受一些简写表达式，这可能比使用标准的 cron 表达式更容易。下表包含预定义计划的简写:
![Table 13.4 – cron shorthand scheduling ](img/Table_13.4.jpg)
表 13.4–cron 速记计划
使用简写表中的值来计划每天午夜执行的备份作业，我们使用以下 Velero 命令:
```
velero schedule create cluster-daily --schedule="@daily"
```
计划作业将在作业执行时创建一个备份对象。备份名称将包含计划的名称，并带有破折号以及备份的日期和时间。使用前面例子中的名称，我们的初始备份是用名称`cluster-daily-20200627174947`创建的。这里，`20200627`是备份运行的日期，`174947`是备份以世界协调时时间运行的时间。这相当于 **2020-06-27 17:49:47 +0000 世界协调时**。
到目前为止，我们的所有示例都被配置为备份集群中的所有名称空间和对象。您可能需要根据您的特定集群创建不同的计划或排除/包括某些对象。
在下一节中，我们将解释如何创建自定义备份，该备份允许您使用特定的标记来包括和排除名称空间和对象。
## 创建自定义备份
当您创建任何备份作业时，您可以向提供标志，以自定义哪些对象将包含在备份作业中或从备份作业中排除。这里详细介绍了一些最常见的标志:
![](img/Table_13.5a.jpg)
![Table 13.5 – Velero backup flags ](img/Table_13.5b.jpg)
表 13.5–Velero 备份标志
要创建每天运行且仅包含 Kubernetes 系统命名空间的计划备份，我们将使用`--include-namespaces`标志创建计划作业:
```
velero schedule create cluster-ns-daily --schedule="@daily" --include-namespaces ingress-nginx,kube-node-lease,kube-public,kube-system,local-path-storage,velero
```
由于 Velero 命令对所有操作都使用 CLI，我们应该从解释您将用于管理备份和恢复操作的常见命令开始。
# 使用命令行界面管理韦莱罗
现在，所有的 Velero 操作必须使用 Velero 可执行文件来完成。在没有图形用户界面的情况下管理备份系统起初可能是一个挑战，但是一旦您习惯了 Velero 管理命令，执行操作就变得容易了。
Velero 可执行文件接受两个选项:
*   命令
*   旗帜