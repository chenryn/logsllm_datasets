(0,5) | normal | 818 | 0 a | | t | (0,5)
(5 rows)
Thenextupdateisgoingtotriggerpagepruning:
=> UPDATE hot SET s = 'H';
=> SELECT * FROM heap_page('hot',0);
ctid | state | xmin | xmax | hhu | hot | t_ctid
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−+−−−−−−+−−−−−+−−−−−+−−−−−−−−
(0,1) | redirect to 5 | | | | |
(0,2) | normal | 819 | 0 a | | t | (0,2)
(0,3) | unused | | | | |
(0,4) | unused | | | | |
(0,5) | normal | 818 c | 819 | t | t | (0,2)
(5 rows)
Again,someofthetuplesarepruned,andthepointertotheheadofthechainis
shiftedaccordingly.
Ifunindexedcolumnsaremodifiedfrequently,itmakessensetoreducethefillfac-
torvalue,thusreservingsomespaceinthepageforupdates. Obviously,youhave
tokeepinmindthatthelowerthefillfactorvalueis,themorefreespaceisleftin
thepage,sothephysicalsizeofthetablegrows.
114
5.4 HOTChainSplits
5.4 HOT Chain Splits
Ifthepagehasnomorespacetoaccommodateanewtuple,thechainwillbecut
off.Postgrewillhavetoaddaseparateindexentrytorefertothetuplelocated
inanotherpage.
Toobservethissituation,let’sstartaconcurrenttransactionwithasnapshotthat
blockspagepruning:
=> BEGIN ISOLATION LEVEL REPEATABLE READ;
=> SELECT 1;
Nowwearegoingtoperformsomeupdatesinthefirstsession:
=> UPDATE hot SET s = 'I';
=> UPDATE hot SET s = 'J';
=> UPDATE hot SET s = 'K';
=> SELECT * FROM heap_page('hot',0);
ctid | state | xmin | xmax | hhu | hot | t_ctid
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−+−−−−−−−+−−−−−+−−−−−+−−−−−−−−
(0,1) | redirect to 2 | | | | |
(0,2) | normal | 819 c | 820 c | t | t | (0,3)
(0,3) | normal | 820 c | 821 c | t | t | (0,4)
(0,4) | normal | 821 c | 822 | t | t | (0,5)
(0,5) | normal | 822 | 0 a | | t | (0,5)
(5 rows)
Whenthenextupdatehappens,thispagewillnotbeabletoaccommodateanother
tuple,andpagepruningwillnotmanagetofreeanyspace:
=> UPDATE hot SET s = 'L';
=> COMMIT; -- the snapshot is not required anymore
115
Chapter5 PagePruningandHOTUpdates
=> SELECT * FROM heap_page('hot',0);
ctid | state | xmin | xmax | hhu | hot | t_ctid
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−+−−−−−−−+−−−−−+−−−−−+−−−−−−−−
(0,1) | redirect to 2 | | | | |
(0,2) | normal | 819 c | 820 c | t | t | (0,3)
(0,3) | normal | 820 c | 821 c | t | t | (0,4)
(0,4) | normal | 821 c | 822 c | t | t | (0,5)
(0,5) | normal | 822 c | 823 | | t | (1,1)
(5 rows)
Tuple(,)containsthe(,)referencethatgoestopage:
=> SELECT * FROM heap_page('hot',1);
ctid | state | xmin | xmax | hhu | hot | t_ctid
−−−−−−−+−−−−−−−−+−−−−−−+−−−−−−+−−−−−+−−−−−+−−−−−−−−
(1,1) | normal | 823 | 0 a | | | (1,1)
(1 row)
However,thisreferenceisnotused: theHeap Hot Updatedbitisnotsetfortuple
(,).Asfortuple(,),itcanbeaccessedfromtheindexthatnowhastwoentries.
Eachofthempointstotheheadoftheirownchain:
=> SELECT * FROM index_page('hot_id',1);
itemoffset | htid | dead
−−−−−−−−−−−−+−−−−−−−+−−−−−−
1 | (0,1) | f
2 | (1,1) | f
(2 rows)
5.5 Page Pruning for Indexes
Ihavedeclaredthatpagepruningisconfinedtoasingleheappageanddoesnot
affectindexes. However,indexeshavetheirownpruning,1 whichalsocleansupa
singlepage—anindexoneinthiscase.
Indexpruninghappenswhenaninsertionintoa-treeisabouttosplitthepage
intotwo,astheoriginalpagedoesnothaveenoughspaceanymore.Theproblemis
thatevenifsomeindexentriesaredeletedlater,twoseparateindexpageswillnot
1 postgresql.org/docs/14/btree-implementation.html#BTREE-DELETION
116
5.5 PagePruningforIndexes
bemergedintoone.Itleadstoindexbloating,andoncebloated,theindexcannot
shrinkevenifalargepartofthedataisdeleted. Butifpruningcanremovesome
ofthetuples,apagesplitmaybedeferred.
Therearetwotypesoftuplesthatcanbeprunedfromanindex.
First of all, Postgre prunes those tuples that have been tagged as dead.1 As
I have already said,Postgre sets such a tag during an index scan if it detects
anindexentrypointingtoatuplethatisnotvisibleinanysnapshotanymoreor
simplydoesnotexist.
Ifnotuplesareknowntobedead,Postgrechecksthoseindexentriesthatref- v.
erencedifferentversionsofoneandthesametablerow.2 Becauseof,update
operations may generate a large number of row versions,and many of them are
soon likely to disappear behind the database horizon. H updates cushion this
effect,buttheyarenotalwaysapplicable: ifthecolumntoupdateisapartofan
index,thecorrespondingreferencesarepropagatedtoalltheindexes.Beforesplit-
ting the page, it makes sense to search for the rows that are not tagged as dead
yetbutcanalreadybepruned. Toachievethis,Postgrehastocheckvisibility
of heap tuples. Such checks require table access,so they are performed only for
“promising”indextuples,whichhavebeencreatedascopiesoftheexistingones
for  purposes. It is cheaper to perform such a check than to allow an extra
pagesplit.
1 backend/access/nbtree/README,Simpledeletionsection
2 backend/access/nbtree/README,Bottom-Updeletionsection
include/access/tableam.h
117
6
Vacuum and Autovacuum
6.1 Vacuum
Pagepruninghappensveryfast,butitfreesonlypartofthespacethatcanbepo-
tentiallyreclaimed. Operatingwithinasingleheappage,itdoesnottouchupon
indexes(orviceversa,itcleansupanindexpagewithoutaffectingthetable).
Routinevacuuming,1 whichisthemainvacuumingprocedure,isperformedbythe
command.2 Itprocessesthewholetableandeliminatesbothoutdatedheap
tuplesandallthecorrespondingindexentries.
Vacuuming is performed in parallel with other processes in the database system.
Whilebeingvacuumed,tablesandindexescanbeusedintheusualmanner,both
forreadandwriteoperations(butconcurrentexecutionofsuchcommandsas-
p. ,,andsomeothersisnotallowed).
p. To avoid scanning extra pages, Postgre uses a visibility map. Pages tracked
inthismapareskippedsincetheyaresuretocontainonlythecurrenttuples,so
a page will only be vacuumed if it does not appear in this map. If all the tuples
remaininginapageaftervacuumingarebeyondthedatabasehorizon,thevisibility
mapisrefreshedtoincludethispage.
Thefreespacemapalsogetsupdatedtoreflectthespacethathasbeencleared.
Let’screateatablewithanindexonit:
1 postgresql.org/docs/14/routine-vacuuming.html
2 postgresql.org/docs/14/sql-vacuum.html
backend/commands/vacuum.c
118
6.1 Vacuum
=> CREATE TABLE vac(
id integer,
s char(100)
)
WITH (autovacuum_enabled = off);
=> CREATE INDEX vac_s ON vac(s);
The autovacuum_enabled storage parameter turns off autovacuum; we are doing
itheresolelyforthepurposeofexperimentationtopreciselycontrolvacuuming
starttime.
Let’sinsertarowandmakeacoupleofupdates:
=> INSERT INTO vac(id,s) VALUES (1,'A');
=> UPDATE vac SET s = 'B';
=> UPDATE vac SET s = 'C';
Nowthetablecontainsthreetuples:
=> SELECT * FROM heap_page('vac',0);
ctid | state | xmin | xmax | hhu | hot | t_ctid
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−+−−−−−+−−−−−+−−−−−−−−
(0,1) | normal | 826 c | 827 c | | | (0,2)
(0,2) | normal | 827 c | 828 | | | (0,3)
(0,3) | normal | 828 | 0 a | | | (0,3)
(3 rows)
Eachtupleisreferencedfromtheindex:
=> SELECT * FROM index_page('vac_s',1);
itemoffset | htid | dead
−−−−−−−−−−−−+−−−−−−−+−−−−−−
1 | (0,1) | f
2 | (0,2) | f
3 | (0,3) | f
(3 rows)
Vacuuminghasremovedallthedeadtuples,leavingonlythecurrentone:
=> VACUUM vac;
119
Chapter6 VacuumandAutovacuum
=> SELECT * FROM heap_page('vac',0);
ctid | state | xmin | xmax | hhu | hot | t_ctid
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−+−−−−−+−−−−−+−−−−−−−−
(0,1) | unused | | | | |
(0,2) | unused | | | | |
(0,3) | normal | 828 c | 0 a | | | (0,3)
(3 rows)
Inthecaseofpagepruning,thefirsttwopointerswouldbeconsidereddead,but
heretheyhavetheunusedstatussincenoindexentriesarereferringtothemnow:
=> SELECT * FROM index_page('vac_s',1);
itemoffset | htid | dead
−−−−−−−−−−−−+−−−−−−−+−−−−−−
1 | (0,3) | f
(1 row)
Pointerswiththeunusedstatusaretreatedasfreeandcanbereusedbynewrow
versions.
Nowtheheappageappearsinthevisibilitymap;wecancheckitusingthepg_vis-
ibilityextension:
=> CREATE EXTENSION pg_visibility;
=> SELECT all_visible
FROM pg_visibility_map('vac',0);
all_visible
−−−−−−−−−−−−−
t
(1 row)
Thepageheaderhasalsoreceivedanattributeshowingthatallitstuplesarevisible
inallsnapshots:
=> SELECT flags & 4 > 0 AS all_visible
FROM page_header(get_raw_page('vac',0));
all_visible
−−−−−−−−−−−−−
t
(1 row)
120
6.2 DatabaseHorizonRevisited
6.2 Database Horizon Revisited
Vacuumingdetectsdeadtuplesbasedonthedatabasehorizon. Thisconceptisso
fundamentalthatitmakessensetogetbacktoitonceagain.
Let’srestartourexperimentfromtheverybeginning:
=> TRUNCATE vac;
=> INSERT INTO vac(id,s) VALUES (1,'A');
=> UPDATE vac SET s = 'B';
Butthistime,beforeupdatingtherow,wearegoingtoopenanothertransaction
that will hold the database horizon (it can be almost any transaction,except for p.
a virtual one executed at the Read Committed isolation level). For example, this
transactioncanmodifysomerowsinanothertable.
=> BEGIN;
=> UPDATE accounts SET amount = 0;
=> UPDATE vac SET s = 'C';
Nowourtablecontainsthreetuples,andtheindexcontainsthreereferences.Let’s
vacuumthetableandseewhatchanges:
=> VACUUM vac;
=> SELECT * FROM heap_page('vac',0);
ctid | state | xmin | xmax | hhu | hot | t_ctid
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−+−−−−−+−−−−−+−−−−−−−−
(0,1) | unused | | | | |
(0,2) | normal | 833 c | 835 c | | | (0,3)
(0,3) | normal | 835 c | 0 a | | | (0,3)
(3 rows)
=> SELECT * FROM index_page('vac_s',1);
itemoffset | htid | dead
−−−−−−−−−−−−+−−−−−−−+−−−−−−
1 | (0,2) | f
2 | (0,3) | f
(2 rows)
121
Chapter6 VacuumandAutovacuum
Whilethepreviousrunleftonlyonetupleinthepage,nowwehavetwoofthem:
 has decided that version (,) cannot be removed yet. The reason is the
databasehorizon,whichisdefinedbyanunfinishedtransactioninthiscase:
=> SELECT backend_xmin FROM pg_stat_activity
WHERE pid = pg_backend_pid();
backend_xmin
−−−−−−−−−−−−−−
834
(1 row)
Wecanusetheclausewhencallingtoobservewhatisgoingon:
=> VACUUM VERBOSE vac;
INFO: vacuuming "public.vac"
INFO: table "vac": found 0 removable, 2 nonremovable row versions
in 1 out of 1 pages
DETAIL: 1 dead row versions cannot be removed yet, oldest xmin: 834
Skipped 0 pages due to buffer pins, 0 frozen pages.
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.
VACUUM
Theoutputshowsthefollowinginformation:
• hasdetectednotuplesthatcanberemoved(0).
• Twotuplesmustnotberemoved(2).
• Oneofthenonremovabletuplesisdead(1),theotherisinuse.
• Thecurrenthorizonrespectedby()isthehorizonofthe
activetransaction.
Oncetheactivetransactioncompletes,thedatabasehorizonmovesforward,and
vacuumingcancontinue:
=> COMMIT;
122
6.2 DatabaseHorizonRevisited
=> VACUUM VERBOSE vac;
INFO: vacuuming "public.vac"
INFO: scanned index "vac_s" to remove 1 row versions
DETAIL: CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s
INFO: table "vac": removed 1 dead item identifiers in 1 pages
DETAIL: CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s
INFO: index "vac_s" now contains 1 row versions in 2 pages
DETAIL: 1 index row versions were removed.
0 index pages were newly deleted.
0 index pages are currently deleted, of which 0 are currently
reusable.
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.
INFO: table "vac": found 1 removable, 1 nonremovable row versions
in 1 out of 1 pages
DETAIL: 0 dead row versions cannot be removed yet, oldest xmin: 836
Skipped 0 pages due to buffer pins, 0 frozen pages.
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.
VACUUM
hasdetectedandremovedadeadtuplebeyondthenewdatabasehorizon.
Nowthepagecontainsnooutdatedrowversions;theonlyversionremainingisthe
currentone:
=> SELECT * FROM heap_page('vac',0);
ctid | state | xmin | xmax | hhu | hot | t_ctid
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−+−−−−−+−−−−−+−−−−−−−−
(0,1) | unused | | | | |
(0,2) | unused | | | | |
(0,3) | normal | 835 c | 0 a | | | (0,3)
(3 rows)
Theindexalsocontainsonlyoneentry:
=> SELECT * FROM index_page('vac_s',1);
itemoffset | htid | dead
−−−−−−−−−−−−+−−−−−−−+−−−−−−
1 | (0,3) | f
(1 row)
123
Chapter6 VacuumandAutovacuum
6.3 Vacuum Phases
Themechanismofvacuumingseemsquitesimple,butthisimpressionismislead-
ing. Afterall,bothtablesandindexeshavetobeprocessedconcurrently,without