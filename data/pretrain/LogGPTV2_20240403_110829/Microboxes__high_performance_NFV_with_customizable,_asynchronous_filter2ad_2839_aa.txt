title:Microboxes: high performance NFV with customizable, asynchronous
TCP stacks and dynamic subscriptions
author:Guyue Liu and
Yuxin Ren and
Mykola Yurchenko and
K. K. Ramakrishnan and
Timothy Wood
Microboxes: High Performance NFV with Customizable,
Asynchronous TCP Stacks and Dynamic Subscriptions
Guyue Liu∗, Yuxin Ren∗, Mykola Yurchenko∗,
K.K. Ramakrishnan†, Timothy Wood∗
∗George Washington University, †University of California, Riverside
ABSTRACT
Existing network service chaining frameworks are based on
a “packet-centric” model where each NF in a chain is given
every packet for processing. This approach becomes both
inefficient and inconvenient for more complex network func-
tions that operate at higher levels of the protocol stack. We
propose Microboxes, a novel service chaining abstraction
designed to support transport- and application-layer middle-
boxes, or even end-system like services. Simply including a
TCP stack in an NFV platform is insufficient because there is
a wide spectrum of middlebox types–from NFs requiring only
simple TCP bytestream reconstruction to full endpoint termi-
nation. By exposing a publish/subscribe-based API for NFs
to access packets or protocol events as needed, Microboxes
eliminates redundant processing across a chain and enables a
modular design. Our implementation on a DPDK-based NFV
framework can double throughput by consolidating stack op-
erations and provide a 51% throughput gain by customizing
TCP processing to the appropriate level.
CCS CONCEPTS
• Networks → Middle boxes / network appliances;
KEYWORDS
Middleboxes, NFV, Networking Stack, Service Chain
ACM Reference Format:
G. Liu, Y. Ren, M. Yurchenko, K.K. Ramakrishnan, T. Wood. 2018.
Microboxes: High Performance NFV with Customizable, Asynchro-
nous TCP Stacks and Dynamic Subscriptions. In Proceedings of ACM
SIGCOMM 2018 Conference (SIGCOMM ’18). ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3230543.3230563
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for profit or commercial advantage and that copies bear
this notice and the full citation on the first page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior specific permission and/or a fee. Request
permissions from permissions@acm.org.
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5567-4/18/08...$15.00
https://doi.org/10.1145/3230543.3230563
Figure 1: Repeated TCP stack processing in a chain of
mOS NFs can cause unnecessarily high delay.
1 INTRODUCTION
Today’s enterprise and wide-area networks are filled with
middleboxes [27] providing a wide range of functionality
from simple firewalls to complex Evolved Packet Core (EPC)
functions in cellular networks. Network Function Virtual-
ization (NFV) platforms provide high performance packet
processing by leveraging kernel bypass I/O libraries such
as DPDK [1] and netmap [25]. However, these systems are
packet-centric: they focus on providing efficient movement
of packets through a chain of network functions that oper-
ate on each packet as it arrives. While this model can make
sense for simple layer-2/3 processing, it becomes inefficient
and inconvenient when building more complex functions
operating at higher levels of the protocol stack.
Network functions that operate at the transport layer need
to perform additional processing such as TCP bytestream
reconstruction. This is a relatively heavyweight function
since it involves copying packet data into a buffer, an action
that is avoided in many layer-2/3 middleboxes that rely on
"zero-copy" to achieve high throughput. High performance,
user-space TCP stacks [12, 13] can be used by NFs to simplify
this operation, but these libraries must be used individually
by each NF, resulting in redundant computation if a chain of
functions each perform TCP processing.
To illustrate the high cost of redundant TCP processing,
Figure 1 shows the processing latency for a chain of NFs that
perform TCP bytestream reconstruction using mOS [12] or
simply forward individual packets at layer 2 (fwd in figure);
to maximize performance, each NF runs on its own core. As
the chain length increases, the latency for the NFs performing
TCP processing increases substantially compared to that for
 0 20 40 60 80 100 120 140 1 2 3 4 5 6 7 8Processing Latency (us)#NFsmos-8KBfwd-8KBmos-64Bfwd-64BSIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
G. Liu et al.
layer-2 NFs. Ideally, this added latency could be avoided by
performing TCP processing only once, and then exposing
the resulting stream to the sequence of NFs.
While consolidating the stack processing within a chain
eliminates redundant work, supporting such an architecture
in an NFV platform can be difficult since each chain may
require different levels of TCP processing. Some flows may
require full bytestream reconstruction, while others may only
need simpler detection of TCP state transitions. Still other
NFs may require complete TCP endpoint termination, for
example to host a caching proxy. Supporting this spectrum
requires a customizable TCP processing engine that only
performs the necessary work for each flow of packets.
We have designed the Microboxes framework in order to
provide the appropriate level of protocol processing with-
out incurring redundant work for chains. Microboxes allow
complex NFs to be broken into their composite parts, and for
chains of functions to be flexibly and efficiently connected
together. The Microboxes framework provides modular pro-
tocol processing engines that can be tuned to support only
the features needed for a given flow. Providing this appropri-
ate protocol functionality for individual flows requires us to
go beyond just a packet-centric view of middlebox service
chaining. Microboxes produce and consume events that may
correspond to individual packet arrivals, protocol events, or
application-level actions. Our platform makes the following
contributions:
dant computation in chains of NFs.
• A publish/subscribe architecture that provides con-
venient, higher level interfaces based on the flow of
events rather than the flow of packets.
• A consolidated protocol stack that eliminates redun-
• A customizable stack to support a spectrum of middle-
box types ranging from lightweight TCP state moni-
toring to proxies with full TCP termination.
• Techniques for asynchronous parallel processing across
NFs and the stack to improve scalability while meeting
consistency requirements.
We have implemented Microboxes using a high perfor-
mance, DPDK-based NFV framework. Our evaluation shows
that the Microboxes consolidated TCP stack doubles through-
put and lowers latency by 20% compared to mOS when run-
ning a chain of 6 TCP-based NFs. Compared to the industry-
standard HAProxy, a web proxy built on our platform pro-
vides between 30-51% throughput improvement by customiz-
ing stack processing e.g., using our TCP Splicer Stack that
allows zero-copy, lightweight URL-based redirection, or us-
ing a full TCP Proxy Stack that supports arbitrary data trans-
formations at higher cost. This allows NFs to choose the
appropriate level of protocol processing for each flow’s per-
formance and functional requirements.
Header Payload Example NF
RW
Layer-2/3
R
TCP Monitor
RW
TCP Splicer
TCP Split Proxy RW
Firewall
IDS
L7 Load Balancer
Proxy
–
R
R
RW
Table 1: Different types of NFs require different levels
of TCP processing with varying costs
Figure 2: Performance depends on the type of stack
processing needed and the incoming workload.
2 MIDDLEBOX STACK DIVERSITY
It is important to go beyond simply creating a “one size fits
all” TCP stack to be used for all NFs—depending on the na-
ture of the NF it may only require certain protocol events
or may need unique types of processing. Flows with differ-
ent requirements are likely to be consolidated on to a single
NFV host. Table 1 enumerates a spectrum of common mid-
dlebox types with distinct protocol processing requirements.
Layer-2/3 NFs require no TCP state, but may require the
ability to read and write packet headers, with no inspection
of payload data. TCP Monitor middleboxes, such as an In-
trusion Detection System (IDS), require TCP reconstruction
and primarily monitor flow state; they may drop connec-
tions but do not need to modify individual packets. Next,
TCP Splicer middleboxes must both read and write TCP
header data in order to redirect traffic, for example a Layer-7
Load Balancer might perform a TCP handshake with a client
and observe the content in an HTTP GET request before
selecting a backend and handing off the connection to that
server, without any modifications to the bytestream. Finally,
middleboxes that perform TCP Split Proxy need complete
control over the bytestream. For example, a split TCP-proxy
might compress a server’s replies before sending them over
a second connection to the client.
The amount of work that must be performed for proto-
col processing in each of these cases can vary significantly.
To demonstrate this, we evaluate the throughput of several
middleboxes processing traffic from a web client requesting
64B or 8KB files from a server (Figure 2). The NFs are de-
signed to perform minimal extra work beyond the requisite
protocol processing. The Layer 2 Fwd NF simply forwards
packets out the NIC, so it gets the highest throughput, note
that the web server and client become the bottleneck for
 0 2 4 6 8 1064B8KBThroughput (Gbps)L2 FwdTCP MonitorTCP no streamTCP SplicerMicroboxes: High Performance NFV with Customizable,
Asynchronous TCP Stacks and Dynamic Subscriptions
64B requests. The TCP Monitor NF uses the mOS TCP mid-
dlebox library [12] to track connection state and perform
flow reconstruction, while the "TCP no stream" NF is the
same, but does not reconstruct the bytestream. Performing
TCP processing substantially reduces throughput compared
to simple forwarding, although the overhead is not as high
if the NF does not need to track the bytestream. The TCP
Splicer NF uses DPDK library and acts as a Splicer [9, 18],
initially responding to the client, and then replaying the TCP
handshake with a server. This has high overhead when re-
quests are small (since extra work needs to be done to setup
each new connection), but performs fairly well when the
request size is large since it simply relays data packets after
the connection is set up. These results show that an NFV
platform running a variety of NF services is likely to require
different types of stack processing for different flows.
This motivates our design of Microboxes to support flexible
protocol stacks that can be customized on a per-flow basis to
perform only the type of processing required by an NF.
3 MICROBOXES DESIGN
Monolithic NF architectures, illustrated in Figure 3(a), group
functions together into a single address space, and are used in
platforms such as BESS [11] and mOS [12]. This provides low
overhead chaining since each NF is just a function call, but it
requires NF implementations to be tightly coupled. Instead,
Microboxes focuses on NFs built using a pipeline model, i.e.,
functions run as isolated processes or containers and packet
data flows through a chain of service functions to achieve
an overall application goal. The pipelined approach provides
deployment benefits since NFs from different vendors can be
easily grouped together to build complex behavior and can be
elastically scaled out by adding more cores. However, exist-
ing pipeline-based NFV platforms such as OpenNetVM [29]
or ClickOS [19] focus on moving packets, not higher level
protocol stack events, as shown in Figure 3(b). Microboxes
eschews the packet-centric design of prior platforms in order
to extract common protocol processing functionality into
a µStack, and expose a flexible µEvent interface between
NFs to eliminate redundant work, while maintaining the
deployment flexibility of the pipeline model.
3.1 µEvents
The Microboxes event management system propagates events
(rather than packets) through NFs to achieve the desired
protocol- and application-layer processing. The µEvent mes-
saging system is based around subscriber lists, which indicate
the other NFs interested in events produced by a protocol
stack or NF. Subscriptions can be filtered on a per-flow basis,
and are managed by the Microboxes Controller.
SIGCOMM ’18, August 20–25, 2018, Budapest, Hungary
Base Event Types: An event type defines a message for-
mat used to facilitate communication and determine how
NFs and stacks can be interconnected. Events must follow
well-defined data types to ensure that a subscriber will be
able to interpret the message; we assume Microboxes de-
velopers share event IDs and data structure definitions for
events they wish to propagate to other NFs. Figure 3(d) shows
the hierarchy of event types defined by the base layer, TCP
stack, and our sample NFs. Other NFs can extend these to
create more complex messages. An EVENT is the simplest
type on which others are based and is defined by fields in-
dicating the event type and the publishing NF’s ID. The
EVENT/PKT type extends this data structure to include
information about a specific packet and the flow state re-
lated to it. NFs that do not require every packet, but only
need to be notified of state changes such as the start or
end of a flow can subscribe to EVENT/FLOW. For brevity,
we generally omit the EVENT/ prefix. The PKT and FLOW
based events provide flexibility, e.g., an NF might require
knowledge of every packet related to a connection closing
(PKT/TCP/FIN), or it might only care about the overall
state change (FLOW/TCP/TERMINATE).
Event Hierarchy: An event type defines a messaging for-
mat similar to a communication protocol. A type can then be
“extended” to create a new type that begins with all of the par-
ent fields, and possibly adds extra ones, similar to layering an
additional protocol header. For example, the PKT/TCP event
indicates that a packet has been processed by a TCP stack,
and adds fields for the TCP stack state to its parent event’s
data format. However, unlike layering protocol headers, child
events are not required to add additional data fields to the
parent type. For example, PKT/TCP is further extended to
represent important TCP events, such as PKT/TCP/SYN,
PKT/TCP/FIN, and PKT/TCP/RETRANSMISSION. In these
cases the child events are used to provide a way for NFs to
subscribe to the subset of the parent events that they care
about. Thus the event hierarchy serves two purposes: it pro-
vides abstraction over data structures to allow more flexible
type checking and it offers more flexible ways for NFs to
filter the types of events they want to receive.
Event Subscription: Network functions and protocol stacks