**Clarified and Optimized Version:**

---

I am encountering an issue that may be related to either the code or the xinetd daemon. I have a Python script that is triggered from a Linux server running xinetd. The xinetd service is configured to allow only one instance, and it is also limited by IP address, ensuring that only one machine can connect to the service.

When the client connects to the xinetd service, the script runs as expected, and its output is sent to the client. However, if the client disconnects (e.g., due to a reboot), the process on the server remains active. This prevents the client from reconnecting once it has finished rebooting.

**Question:**
How can I detect in Python that the client has disconnected? One possible approach could be to check if `stdout` is no longer being read by the client, and then exit the script. Alternatively, is there a more straightforward way in xinetd to automatically kill the child process when the client disconnects?

**Environment:**
- Python 2.4.3
- RHEL 5

**Solution:**
Add a signal handler for `SIGHUP`. When the client disconnects, xinetd sends a `SIGHUP` signal to the child process. By handling this signal, you can ensure that the script exits gracefully when the client disconnects.

Hereâ€™s an example of how you can add a signal handler in Python 2.4.3:

```python
import signal
import sys

def handle_sighup(signum, frame):
    print("Client disconnected. Exiting...")
    sys.exit(0)

# Register the SIGHUP signal handler
signal.signal(signal.SIGHUP, handle_sighup)

# Your main script logic here
while True:
    # Your processing code
    pass
```

This solution should work for your current environment. For Python 3.1 and later versions, the same approach can be used, but with some minor syntax changes:

```python
import signal
import sys

def handle_sighup(signum, frame):
    print("Client disconnected. Exiting...")
    sys.exit(0)

# Register the SIGHUP signal handler
signal.signal(signal.SIGHUP, handle_sighup)

# Your main script logic here
while True:
    # Your processing code
    pass
```

By implementing this signal handler, you can ensure that the script terminates properly when the client disconnects, allowing the client to reconnect after a reboot or disconnection.

---