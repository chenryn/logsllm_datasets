你可以执行 Shell 脚本，使用你选择的任意数字作为参数。
![](/data/attachment/album/202308/23/113725b531151fr0va46dq.png)
如果你尝试除法，会出现一个大问题。Bash 只使用整数。默认情况下，它没有小数的概念。因此，你会得到 10/3 的结果为3，而不是 3.333。
对于浮点数运算，你需要这样使用 `bc` 命令：
```
#!/bin/bash
num1=50
num2=6
result=$(echo "$num1/$num2" | bc -l)
echo "The result is $result"
```
这个时候，你将看到准确的结果。
```
    The result is 8.33333333333333333333
```
> 
> **[Bash 基础知识系列 #4：算术运算](/article-16006-1.html)**
> 
> 
> 
### 5、在 Bash 脚本中使用数组
你可以使用 Bash 中的数组来存储同一类别的值，而不是使用多个变量。
你可以像这样声明一个数组：
```
distros=(Ubuntu Fedora SUSE "Arch Linux" Nix)
```
要访问一个元素，使用：
```
${array_name[N]}
```
像大多数其他的编程语言一样，数组的索引从 0 开始。
你可以像这样显示数组的所有元素：
```
${array[*]}
```
这样获取数组长度：
```
${#array_name[@]}
```
> 
> **[Bash 基础知识系列 #5：在 Bash 中使用数组](/article-16016-1.html)**
> 
> 
> 
### 6、Bash 中的基础字符串操作
Bash 能够执行许多字符串操作。
你可以使用这种方式获取字符串长度：
```
${#string}
```
连接两个字符串：
```
str3=$str1$str2
```
提供子字符串的起始位置和长度来提取子字符串：
```
${string:$pos:$len}
```
这里有一个例子：
![](/data/attachment/album/202308/23/113726w0rf2l9lb38mm24t.png)
你也可以替换给定字符串的一部分：
```
${string/substr1/substr2}
```
并且你也可以从给定字符串中删除一个子字符串：
```
    ${string/substring}
```
> 
> **[Bash 基础知识系列 #6：处理字符串操作](/article-16047-1.html)**
> 
> 
> 
### 7、在 Bash 中使用条件语句
你可以通过使用 `if` 或 `if-else` 语句为你的 Bash 脚本添加条件逻辑。这些语句以 `fi` 结束。
单个 `if` 语句的语法是：
```
if [ condition ]; then
  your code
fi
```
注意使用 `[ ... ];` 和 `then` 。
`if-else` 语句的语法是：
```
if [ expression ]; then
    ## execute this block if condition is true else go to next
elif [ expression ]; then
    ## execute this block if condition is true else go to next
else
    ## if none of the above conditions are true, execute this block
fi
```
这里有一个使用 `if-else` 语句的 Bash 脚本示例：
```
#!/bin/bash
read -p "Enter the number: " num
mod=$(($num%2))
if [ $mod -eq 0 ]; then
    echo "Number $num is even"
else
    echo "Number $num is odd"
fi
```
运行它，你应该能看到这样的结果：
![](/data/attachment/album/202308/23/113726q2008j8aw9tjw02n.png)
`-eq` 被称为测试条件或条件操作符。有许多这样的操作符可以给你不同类型的比较：
这些是你可以用来进行数值比较的测试条件操作符：
| 条件 | 当...时，等同于 true |
| --- | --- |
| `$a -lt $b` | `$a  $b` （`$a` 是大于 `$b`） |
| `$a -le $b` | `$a = $b` （`$a` 是大于或等于 `$b`） |
| `$a -eq $b` | `$a == $b` （`$a` 等于 `$b`） |
| `$a -ne $b` | `$a != $b` （`$a` 不等于 `$b`） |
如果你在进行字符串比较，你可以使用以下这些测试条件：
| 条件 | 当...时，等同于 true |
| --- | --- |
| `"$a" = "$b"` | `$a` 等同于 `$b` |
| `"$a" == "$b"` | `$a` 等同于 `$b` |
| `"$a" != "$b"` | `$a` 不同于 `$b` |
| `-z "$a"` | `$a` 是空的 |
还有些条件用于检查文件类型：
| 条件 | 当...时，等同于 true |
| --- | --- |
| `-f $a` | `$a` 是一个文件 |
| `-d $a` | `$a` 是一个目录 |
| `-L $a` | `$a` 是一个链接 |
> 
> ? 要特别注意空格。开括号和闭括号、条件之间必须有空格。同样地，条件操作符（`-le`、`==` 等）之前和之后必须有空格。
> 
> 
> 
> 
> **[Bash 基础知识系列 #7：If-Else 语句](/article-16083-1.html)**
> 
> 
> 
### 8、使用 Bash 脚本中的循环
Bash 支持三种类型的循环：`for`、`while` 和 `until`。
这是 `for` 循环的一个例子：
```
#!/bin/bash
for num in {1..10}; do
    echo $num
done
```
运行它，你将看到以下输出：
```
1
2
3
4
5
6
7
8
9
10
```
如果你选择使用上面的示例，可以使用 `while` 循环这样重写：
```
#!/bin/bash
num=1
while [ $num -le 10 ]; do
    echo $num
    num=$(($num+1))
done
```
同样，可以使用 `until` 循环来重写：
```
#!/bin/bash
num=1
until [ $num -gt 10 ]; do
    echo $num
    num=$(($num+1))
done
```
> 
> ? `while` 循环和 `until` 循环非常相似。区别在于：`while` 循环在条件为真时运行，而 `until` 循环在条件为假时运行。
> 
> 
> 
> 
> **[Bash 基础知识系列 #8：For、While 和 Until 循环](/article-16114-1.html)**
> 
> 
> 
### 9、在 Bash 脚本中使用函数
Bash Shell 支持使用函数，这样你不必反复编写相同的代码片段。
这是声明 Bash 函数的通用语法：
```
function_name() {
  commands
}
```
这是一个使用带参数的函数的 Bash 脚本样例：
```
#!/bin/bash
sum() {
    sum=$(($1+$2))
    echo "The sum of $1 and $2 is: $sum"
}
echo "Let's use the sum function"
sum 1 5
```
如果你运行该脚本，你将看到以下输出：
```
Let's use the sum function
The sum of 1 and 5 is: 6
```
> 
> **[Bash 基础知识系列 #9：Bash 中的函数](/article-16116-1.html)**
> 
> 
> 
### 接下来呢？
这只是一个初窥。这个 Bash 脚本教程只是一篇引言。Bash 脚本的内容还有很多，你可以慢慢地、逐渐地探索。
GNU Bash 参考是一份优秀的在线资源，可以解答你的 Bash 疑问。
> 
> **[GNU Bash 参考](https://www.gnu.org/software/bash/manual/bash.html)**
> 
> 
> 
除此之外，你可以下载这本免费书籍来学习更多在此未涵盖的 Bash 内容：
> 
> **[下载 Bash 初学者指南](https://tldp.org/LDP/Bash-Beginners-Guide/Bash-Beginners-Guide.pdf)**
> 
> 
> 
一旦你具有足够的 Bash 基础知识，你可以通过这本免费书籍来学习高级 Bash 脚本：
> 
> **[下载高级 Bash 编程指南](https://tldp.org/LDP/abs/abs-guide.pdf)**
> 
> 
> 
这两本书至少都有十年的历史，但你仍然可以使用它们来学习 Bash。
? 希望你喜欢这个作为学习 Bash 脚本起点的教程。请在评论区提供你的反馈。
*（题图：MJ/98f47121-7426-4297-9242-8683ccf0496d）*
---
via: 
作者：[Abhishek Prakash](https://itsfoss.com/author/abhishek/) 选题：[lujun9972](https://github.com/lujun9972) 译者：ChatGPT 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出