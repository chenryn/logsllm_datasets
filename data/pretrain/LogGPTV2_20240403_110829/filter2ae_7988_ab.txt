但是无论我把`gslbTarget`和`descriptorUrlServerSpec`设置成什么值，似乎都不起任何作用。
然后，我尝试暴力破解有效的`credentialType`值，并找到一个新的值： `GAIAMINT`。
我之前看到过这个引用名称，比如，`Google Git commit`。
在使用具有该值的类型提供器测试部署的时候，我还测试了如果将类型提供器设置为使用`OAuth 2.0`访问令牌作为其身份验证机制时会发生什么情况。
得亏试了这一步，我注意到我之前设置的一个伪造的API（而不是在Authorization标头中接收访问令牌），现在将标头设置为如下所示：`EndUserCreds
1 `。
我不知道如何对此进行解码，但它看起来像是具有某些其他二进制格式的[协议缓冲区](https://developers.google.com/protocol-buffers)数据(protobuf data)，并且可以获取一些字符串：`anonymous`,
`PI:EMAIL`（服务帐户的电子邮件，部署管理器使用该邮件作为我的项目上的token），`cloud-dm`和`cloudgaia::vjgv73:9898`。
看起来这货都是供内网使用的，一些谷歌员工证实它确实是供Google内网系统之间身份验证用户的，所以可能无法从外部访问。
但是除了这点怪异之处以外，我无法暴力破解`credentialType`的任何其他有效值，也无法传输任何值。
在这一点上，我还尝试将`staging_`添加到API版本的开头，因为我注意到[谷歌计算引擎API](https://cloud.google.com/compute/docs/apis)在`Staging`环境中都是这么做的（在某些地方确实提到了这种情况，例如[GitHub
PR](https://github.com/kubernetes/kubernetes/pull/48642#discussion_r126505288)中），并且它起作用了！
但是`Staging`环境似乎与`Production`环境完全相同。
在多次尝试失败告终之后，我又好几周都没研究过部署管理器。
## 突破：利用 Proto over HTTP
有一天，我灵机一动，想使用协议缓冲区（一个谷歌开发的二进制序列化格式）找出`credentialType`和`transport`枚举的缺失值，因为在protobuf上的枚举被表示为数字，而不是字符串，所以我可以只从1开始计数，直到找到一个新值为止。
Protobufs主要用于gRPC，这是Google开发的并由许多Google API支持的远程过程调用（RPC）系统。
不幸的是，部署管理器API并不支持gRPC，但支持一个相对未知的功能：`Proto over HTTP`。
`Proto over HTTP`是一项实验性的gRPC后备功能，只在某些Google
API上适用，也没有很好的文档说明，每个API的可用性各不相同，不同的API实施起来可能有所不同。不是每个支持GRPC的API都会支持`Proto over
HTTP`，反之亦然。所以我必须在部署管理器API上好好检查一番，并且是这样做的：
    1.URL路径保持不变 (/deploymentmanager//projects//global/...)
    2.header的Content-Type设定为application/x-protobuf
    3.在Production中，失败并显示错误消息为：不允许Proto over HTTP进行服务
    4.它适用于Staging！
在熟知这些的前提下，我调用了API的`get Type
Provider`方法，并使用称为`protoc`（协议缓冲区编译器）的工具及其`--decode_raw`选项对响应协议进行了解码。
从而得到未命名的原型字段编号，以及分配给它们的值。
比较检索到的原型中的值和JSON API中的值，我迅速将每个字段号与其字段名进行匹配，并对类型提供器的协议消息定义进行逆向。
上述描述的简单示例：
1.通过JSON API创建类型提供程序：
2.通过JSON API获得了相同的类型提供程序：
3.通过Proto over HTTP API获得了相同的类型提供程序：
4.用协议解码响应：
5.找出与每个字段对应的数字（例如1 = name，2 = id，3 = insertTime等等）
6.用这些信息构造原始消息定义的近似值
经过一些修改之后，通过`Proto over HTTP`在proto字段中创建具有不同值的类型提供器并解码协议缓冲区响应， 我得到了我所缺少的足够近似的值：
    transport
        GSLB-它将来自部署管理器的请求定向到内部Google站点，这些站点通过gslbTarget和descriptorUrlServerSpec指定
    credentialType 
    ENDUSERCREDS，TYPE_CREDENTIAL-它们的作用似乎与OAUTH和UNKNOWN_CREDENTIAL_TYPE相同
将`transport`设置为`GSLB`是发出内部请求的关键！
## 发现bug
通过新发现的transport值（设为GSLB），我可以通过精心设计的类型提供器，使得部署管理器能够将请求定向到谷歌内网站点......只要我知道`gslbTarget`的地址。
这是为Google App Engine Admin API-测试环境创建类型提供程序的[示例](https://gist.github.com/ezequielpereira/bc3f91ea5003de9fdba322cf4c92ac79#file-example_insert_tp_req-txt)（自我的2018 GAE RCE起，由于429错误而无法从外部访问）。
在`dogfood`版本上，通过列出类型获得了`blade：apphosting-admin`，而`appengine.v1.version`类型将`gslbTarget`参数设置的就是这个值。
在命令的末尾加了`-nightly`参数，因为在2018年`GAE Test API`从外部禁用之前，我就关注到这个字符串参数了。
这个类型提供器工作效果很棒，我成功创建了一个`Deployment`，使用它来将新应用启动到GAE
Test中，以检查我在2018年发现的bug是否已正确修复。
如果我指定了一些无效的`gslbTarget`参数值（并且我总是把`descriptorUrlServerSpec`的值设置成与`gslbTarget`的值一样），创建类型提供程序的操作将失败，要么显示一条错误消息：无法连接到GSLB端点，显示一个从内部站点返回的错误响应（通常为404
Not Found）;要么显示该响应不是有效的描述符文档（例如，某些站点返回了正常的HTML）以及响应数据。
一个站点甚至返回了一个错误页面，其中包含Java堆栈跟踪和一条消息，消息内容如下：调试信息，仅对内部IP可见！(Debugging information,
only visible to internal IPs!)
因此，我可以通过这种方式检索一些内部信息。
如果我指定了一些有效的`gslbTarget`参数，像`issuetracker.corp.googleapis.com`网站的`blade:corp-issuetracker-api`（我从我过去的一些研究中获知了GSLB名字），就能够执行调用至API！
即使我不知道`Issue Tracker`资源的格式如何，也可以通过在新的类型提供器上调用`listTypes`来轻松克服。
这些都是有趣的问题，但我有点怀疑他们所造成的影响有多大，特别是因为这些请求是和部署管理器服务帐户的凭证（针对我的项目）一起生成的，这将可能限制允许进行通信的站点。
在研究此问题时，我告知了一些Google员工，我找到了一种发送请求给GSLB站点的方法，他们让我将其记录在VRP授权票证上，以便SRE团队可以对我的行动有所了解，万一他们能检测到我的请求呢。
他们还解释了向GSLB站点发送请求时存在的一个潜在问题：
    如果服务A代表用户C向服务B发出请求，会C的授权。如果没有C的凭据，则将检查A的授权。
这个问题真的很有趣，因为我注意到部署管理器使用的服务帐户凭据是由`PI:EMAIL`委派的（我可以在Cloud Console日志中看到委派者的ID
），所以我认为，Google产品帐户至少具有委派某些服务帐户令牌的权限。
我只需要找到一种方法达成此目的，并删除服务帐户的凭据，即可使用部署管理器的身份。
到了这时，已是乌拉圭的夜晚，华灯初上，所以我只是在授权票据上写下了我的研究成果来结束这一天的研究。
第二天早上，我的爱犬在早上6点就将我叫醒，接着就收到授权票据的通知更新，其中一个如下：
然后，Eduardo迅速为我提交了一份VRP报告，对其进行了分类，然后将其升级为P0并给出了一个`Nice catch`！从报告提交到`Nice
catch`仅用了不到5分钟的时间！，这也许是最快的RCE VRP报告：)。
那天晚些时候，我问了Eduardo几个问题，他告诉我这个bug现在被视为事故，只有RCE漏洞才被这样对待。
因此，他们要求我停止进一步深入渗透，并将我的发现过程和结果的详细信息发送给他们。
我询问了此问题的潜在进一步利用方式，我的理解是：
    提权可以尝试通过部署管理器服务的身份（PI:EMAIL）来实现，因为它有可能可以访问内部服务，而普通服务帐户则无法做到这一点。
    不确定是否存在这样一个攻击载体（attack vectors，在这里不知道是不是跳板的意思（愚蠢的译者注）），允许攻击者获得一个连接到谷歌内部系统的shell，但其权限可能得足够高才行。
正是由于这种可能存在的极大影响，Google将其视为RCE，并发放了31,337美元的奖励（他们当前的RCE标准金额）。
非常感谢Google VRP！
这是一个非常有趣的bug，接下来我很想知道谷歌云部署管理器中还能找到哪些问题。
## 另注
该漏洞已被修复。解决方法似乎只是：现在在类型提供器上执行`create`、`patch`或`update`操作时，指定`gslbTarget`和`descriptorUrlServerSpec`参数无效。
`dogfood`版本可能仍能通过API访问，但是，这并不意味着这是它本身的一个安全问题。（虽然可能有一些隐藏的安全漏洞）。
此外，在将我的发现报告给Google之后，甚至在完成了本文撰写的前几稿之后，我还是想检查一下是否可以通过外部公开访问Staging Deployment
Manager API的dogfood版本的发现文档。
看呐，它可以： `https://staging-deploymentmanager.sandbox.googleapis.com/$discovery/rest?version=dogfood`（GitHub的地址在[这里](https://gist.github.com/ezequielpereira/8a0b5e3aed6b95327043c8bdd433b731#file-staging-deploymentmanager-sandbox-googleapis-com_dogfood-json)，以防将来停止工作）。
该发现文档涵盖了`googleOptions`域，还涉及到了其他域的范围，但还远远不够，所以即使我之前就注意到了该文档，还是得执行和上文一样的步骤。
## 时间线
2020年5月7日：在VRP授权票据中发现并提及了该漏洞  
2020年5月8日：谷歌员工核查漏洞，提交RCE报告并迅速将其升级  
2020年5月19日：颁发$31,337.00奖励  
2020年5月20日：漏洞已修补