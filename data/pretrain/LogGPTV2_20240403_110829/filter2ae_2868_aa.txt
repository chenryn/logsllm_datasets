## 前言
这个思路的起因是因为 今年的SCTF2019我出的一道Web题目 Flag
Shop，当时这道题目我准备的考点只是一个ruby的小trick，并且有十几个队伍成功解出，但是在比赛的最后
VK师傅@Virink告知我这道题存在一个非预期
可以GetShell。这个非预期Getshell的知识点就是本文的主体内容，而后我在多个编程语言里进行了测试，发现很多语言也存在相似的问题。遂有了此文章。  
在文章发布之前的UNCTF中，我把node.js在此攻击面上的问题单独抽离了出来做了一道题目。想看这道题wp的师傅可以移步另外一篇文章  
推荐师傅们看此文章前，先看一遍 SCTF 2019 Flag Shop和 UNCTF arbi第三部分的Wp
SCTF flag shop Write-up [flag-shop](https://github.com/ev0A/SCTF2019-Flag-Shop)
## 例题
我还是决定先从大家最喜欢的PHP讲起，请看这一道例题
这是Bugku的一道题目
相信大部分人都做过，考察的是PHP的弱类型，这里只需要输入?ctf[]=1即可绕过，这就是一个最简单的HTTP传参的类型差异的问题，但是实际中不可能有程序员写出这种无厘头的代码，而且在CTF中这样出题也会让赛棍瞬间想起这个知识点从而秒题，所以就在思考，有没有什么实际中可能存在的代码和CTF中不那么容易被赛棍秒题的写法呢
## Ruby
为了让大家更快了解我的标题的含义，我直接用我当时flag shop非预期来做一个讲解
### 预期解
    if params[:do] == "#{params[:name][0,7]} is working" then
        auth["jkl"] = auth["jkl"].to_i + SecureRandom.random_number(10)
        auth = JWT.encode auth,ENV["SECRET"] , 'HS256'
        cookies[:auth] = auth
        ERB::new("").result
    end
这个就是我的Flag Shop中存在非预期的代码，如果对这道题不是特别了解的话可以去看看，buuctf有此题的复现环境
再此感谢下赵总上题 @glzjin
这里简单讲一下 预期做法，就是此题用了一个ERB模板引擎，在此题条件下存在模板注入的问题，但是我限制了用户只能输入7位 字符串进行模板注入 就是上面的第一行
`#{params[:name][0,7]}`
这行代码 代表 url参数名是name 并取前七位，然后模板渲染并且可回显需要`` 标志，除去这5个字符只剩下2个字符可用
，这道题就是两个字符进行模板注入爆破JWT-Secret。
### 非预期解
当然，上面是预期解的做法，下面讲讲非预期解的做法，
看文下面这个代码，大家就知道为什么会产生非预期了
    $a = "qwertyu"
    $b = Array["bbb","cc","d"]
    puts "$a: #{$a[0,3]}"
    puts "$b: #{$b[0,3]}"
`#{}`可以想象成 ${} 代表解析里面的变量  
[0,3]可以想象成python的[0:3]  
输出结果
    [evoA@Sycl0ver]#> ruby test.rb
    $a: qwe
    $b: ["bbb", "cc", "d"]
这里，可以类比PHP中的弱类型，$b变量原本是数组，但是由于被拼接到了字符串中，所以数组做了一个默认的类型转换变成了`["bbb", "cc", "d"]`
有了这个trick，上面代码[0,7]从原本的限制7个字符突然变成了限制7个数组长度emmmmmmm，于是
非预期exp
    /work?do=["", "1", "2", "3", "4", "5", "6"] is working&name[]=&name[]=1&name[]=2&name[]=3&name[]=4&name[]=5&name[]=6
直接实现了任意命令执行
## 解释
这就是一个HTTP参数传递类型差异的问题，具体的意思就是，由于语言的松散型，url传参可以传入非字符串以外的其他数据类型，最常见的就是数组,而后端语言没有做校验，并且在某些语法上，字符串和数组存在语法重复，就可以利用这个特性，绕过一些程序逻辑
什么叫语法重复，就是对一个变量进行一些操作，不管变量是数组还是字符串，都可以成功执行并返回。  
最常见的就是输出语法，比如echo ，大部分编程语言会把数组转换为字符串。  
当然，这并不是什么新鲜的攻击面，只是在之前没多少人系统的归纳这种攻击方式，但我觉得如果能找到一个合适的场合，这种利用方式还是很强大的（比如我的getshell非预期Orz
## Javascript
### 数组和字符串
很多师傅是JS的忠实粉丝，因为其强大的灵活性和爽快的代码风格
但是JS不属于强类型语言，他也同样存在类似的问题
    var a="abcedfghijtk"
    var b=["qwe","rty","uio"]
    console.log(a[2])
    console.log(b[2])
输出:
    [evoA@Sycl0ver]#> node test.js
    c
    uio
当然，仅仅是一个[]语法还是比较鸡肋的，我们需要找能同时兼容数组和字符串的函数或语法，JS中对数组和字符串通用的函数有哪些呢
测试代码
    function contains(arr, obj) {
      var index = arr.length;
      while (index--) {
        if (arr[index] === obj) {
          return true;
        }
      }
      return false;
    }
    //两数组 取并集
    function arrayIntersection (a,b){
      var len=a.length;
      var result=[];
      for(var index=0;index: Array []
这是数组和字符串通用的方法，除了原型对象自身的方法外，还有全局下的一些函数和语法，他们的参数既可以是数组，也可以是字符串。比如
    /test/.test("asdtestasd")
    /test/.test(["asdtestasd","123"])
字符串与数组拼接时也存在默认调用toString方法
    > b+a
    "qwe,rty,uioabcedfghijtk"
### 数组和对象和字符串
然而，Express框架中，有一个更神奇的特性，HTTP不仅可以传字符串和数组，还可以直接传递对象
    var express = require('express');