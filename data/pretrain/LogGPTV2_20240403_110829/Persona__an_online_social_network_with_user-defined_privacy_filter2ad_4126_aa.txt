title:Persona: an online social network with user-defined privacy
author:Randolph Baden and
Adam Bender and
Neil Spring and
Bobby Bhattacharjee and
Daniel Starin
Persona: An Online Social Network
with User-Deﬁned Privacy
Randy Baden, Adam Bender, Neil Spring, Bobby Bhattacharjee
University of Maryland
{randofu, bender, nspring, bobby}@cs.umd.edu
PI:EMAIL
Daniel Starin
Starin Consulting∗
ABSTRACT
Online social networks (OSNs) are immensely popular, with
some claiming over 200 million users [10]. Users share pri-
vate content, such as personal information or photographs,
using OSN applications. Users must trust the OSN service
to protect personal information even as the OSN provider
beneﬁts from examining and sharing that information.
We present Persona, an OSN where users dictate who
may access their information. Persona hides user data with
attribute-based encryption (ABE), allowing users to apply
ﬁne-grained policies over who may view their data. Persona
provides an eﬀective means of creating applications in which
users, not the OSN, deﬁne policy over access to private data.
We demonstrate new cryptographic mechanisms that en-
hance the general applicability of ABE. We show how Per-
sona provides the functionality of existing online social net-
works with additional privacy beneﬁts. We describe an im-
plementation of Persona that replicates Facebook applica-
tions and show that Persona provides acceptable perfor-
mance when browsing privacy-enhanced web pages, even on
mobile devices.
Categories and Subject Descriptors
C.2.0 [Computer Systems Organization]: Computer Com-
munications Networks—General ; C.2.4 [Computer Sys-
tems Organization]: Computer Communications Networks—
Distributed Systems; E.3 [Data]: Data Encryption; H.3.4
[Information Systems]: Information Storage and Retrieval—
Systems and Software
General Terms
Design, Security, Performance
Keywords
Persona, OSN, Social Networks, ABE, Privacy, Facebook
∗Mr. Starin’s work on this project was conducted as part of
a graduate course at the University of Maryland.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’09, August 17–21, 2009, Barcelona, Spain.
Copyright 2009 ACM 978-1-60558-594-9/09/08 ...$10.00.
1.
INTRODUCTION
Online social networks (OSNs) have become a de facto
portal for Internet access for millions of users. These net-
works help users share information with their friends. Along
the way, however, users entrust the social network provider
with such personal information as sexual preferences, politi-
cal and religious views, phone numbers, occupations, identi-
ties of friends, and photographs. Although sites oﬀer privacy
controls that let users restrict how their data is viewed by
other users, sites provide insuﬃcient controls to restrict data
sharing with corporate aﬃliates or application developers.
Not only are there few controls to limit information dis-
closure, acceptable use policies require both that users pro-
vide accurate information and that users grant the provider
the right to sell that information to others. Facebook is a
representative example of a social network provider. The
Facebook “Statement of Rights and Responsibilities” [9] re-
quires that users “not provide any false personal information
on Facebook” and “keep [their] contact information accurate
and up to date.” Further, it states that users “grant [Face-
book] a non-exclusive, transferable, sub-licensable, royalty-
free, worldwide license to use any IP [Intellectual Property]
content that [they] post on or in connection with Facebook.”
Cryptography is the natural tool for protecting privacy
in a distributed setting, but obvious cryptographic schemes
do not allow users to scalably deﬁne their privacy settings
in OSNs. Users want to be able to share content with
entire groups, such as their friends, their family, or their
classmates. Public key cryptography alone is unsatisfactory
when managing groups in an OSN: either users must store
many copies of encrypted data, users are unable to give data
based on membership in multiple groups, or users must know
the identities of everyone to whom they give access.
To meet the privacy needs of an OSN, we propose Per-
sona, an OSN that puts policy decisions in the hands of
the users. Persona uses decentralized, persistent storage so
that user data remains available in the system and so that
users may choose with whom they store their information.
We build Persona using cryptographic primitives that in-
clude attribute-based encryption (ABE), traditional public
key cryptography (PKC), and automated key management
mechanisms to translate between the two cryptosystems.
Persona achieves privacy by encrypting private content
and prevents misuse of a user’s applications through authen-
tication. Persona allows users to store private data persis-
tently with intermediaries, but does not require that users
trust those intermediaries to keep private data secret. Mod-
ern web browsers can support the cryptographic operations
135needed to automatically encrypt and decrypt private data
in Persona with plugins that intercept web pages to replace
encrypted contents. Lastly, Persona divides the OSN enti-
ties into two categories: users, who generate the content in
the OSN, and applications, which provide services to users
and manipulate the OSN content.
The rest of this paper is organized as follows. We de-
scribe the cryptographic primitives and how they comprise
the correct cryptographic systems for Persona in Section 2.
We present novel compositions of ABE and PKC functions
that allow users to create ﬂexible and dynamic access poli-
cies in Section 3. We describe the role of OSN applications
in Persona and show that Persona supports existing OSN
applications in Section 4. We present signiﬁcant features
of our implementation in Section 5. We evaluate the per-
formance of Persona using data from a Facebook crawl and
ABE microbenchmarks on a mobile device in Section 6. We
describe related work in Section 7, discuss additional prob-
lems beyond the scope of this paper in Section 8, and con-
clude in Section 9.
2. CRYPTOGRAPHY IN A PRIVATE OSN
There are two tasks for encryption in building the private
online social network. The ﬁrst is to restrict the information
available to applications as precisely as possible, so that in-
dividual organizations are not entrusted with large volumes
of personal information. Although it is tempting to focus
only on the exchange of information with friends, some ap-
plications may beneﬁt from limited access to a user’s proﬁle,
location, or messages, while carefully avoiding broad expo-
sure.
The second task is to restrict the information shared with
“friends” to what might be appropriate. We quote “friends”
here because the type of social link might be more than, less
than, or diﬀerent from “friend.” Family, neighbor, co-worker,
boss, teammate, and other relations might deﬁne a connec-
tion in the social network. That connection is often simply
termed “friend”, regardless of the actual, oﬀ-line relation-
ship. A user’s decision to accept one of these pseudo-friends
into their neighborhood (and avoid discussing certain topics)
or exclude them (and avoid the beneﬁts of social network-
ing) represents a dilemma that can be avoided, if users may
ﬂexibly classify their “friends.”
Alone, these two problems may be easily solved. A so-
cial network could help users deﬁne access policies that in-
clude or exclude deﬁned groups of friends accessing diﬀerent
pieces of information. Such a feature would allow a user
to tweet “called in sick to work” without telling co-workers.
In practice, users segregate work colleagues from personal
friends by subscribing to diﬀerent social networks. To pro-
vide such functionality eﬃciently without the assistance of
a trusted application provider requires some form of crypto-
graphic support for group keying. In this section, we deﬁne
two methods to share information with groups in an OSN.
What makes the OSN setting diﬀerent from typical group
keying scenarios is that the sender (to the group) may not be
in charge of group membership. For example, Alice may post
a message on Bob’s wall, encrypted for Bob’s friends, with-
out (necessarily) knowing the list of Bob’s friends. Further,
Alice might wish to send a message to Bob’s friends who
live in the neighborhood: “Let’s meet up tonight”. Another
aspect of the OSN setting is that the number of potential
groups a user might encrypt to is very large (any possible
combination of friends of their friends). Cryptographic sup-
port alone is not suﬃcient for building a distributed online
social network; it is merely a necessary tool, diﬃcult to ap-
ply, which shapes the eventual design.
2.1 Model
With the abstract goals of hiding personal information
from aggregators and hiding personal information from col-
leagues, we next reﬁne these goals down to concrete require-
ments for cryptographic methods.
Each Persona user generates an asymmetric key-pair and
distributes the public key out-of-band to other users with
whom they want to share data. We refer to these other
users as friends, though the nature of each relationship is
deﬁned by the user.
Persona allows users to create “groups” and choose which
users are part of a given group. Users control access to
personal data by encrypting to “groups.” Restricting data
to speciﬁc groups allows users to have ﬁne-grained control
over access policy, which permits exchanging data with more
restrictions.
Cryptographic primitives in Persona must allow users to
ﬂexibly specify and encrypt to groups. Users may spec-
ify groups using arbitrary criteria, but we expect users to
choose groups based on transparent relationships such as
“neighbor” or “co-worker” or on attributes such as “football
fan” or “knitting buddy.” Groups created by one user do
not aﬀect the groups that can be created by another. How-
ever, to support OSN communication patterns, the groups
created by one user should be available for use, not just for
decryption, but also for encryption, by friends.
2.2 Traditional public-key approach
Traditional public-key and symmetric cryptography can
be combined to form an eﬃcient group encryption primi-
tive [30, 37]. To create a new group from a list of known
friends, Alice encrypts a newly-generated group key with the
public key of each member of the new group. She then dis-
tributes this key to the members of that group and uses the
key to encrypt messages to the group. The group key may be
symmetric, in which case only group members can encrypt
to the group, or asymmetric, which allows non-members to
encrypt as well.
Distributing a new group key may coincide with sending a
new message: to create a message for all of her friends, Alice
might include both the keys and the data in the same object
for eﬃciency. To eﬃciently reuse a group and key for many
messages could require separating the keys from the data
and caching the group key for use on later messages. We in-
formally term the re-use of keys to avoid wasteful repetition
of public key operations “recycling.”
This protocol is computationally inexpensive, in that it
does not require signatures; the worst an attacker could do
is provide a faulty key that would soon be discovered. It is
also ﬂexible for the group creator, in that the original cre-
ator can enumerate any set of friends to include in the group.
It is somewhat ﬂexible for others, in that a friend who is a
member of two groups (“neighbor” and “football fan”) may
encrypt a message for the union of these groups (“neigh-
bor OR football fan”) by encrypting the message with both
group keys separately. However, a friend cannot further re-
strict access to an intersection (“neighbor AND football fan”)
without exposing the message to colluding friends that do
136not match the expression (one a neighbor, the other a foot-
ball fan). One could encrypt with one group key and then
the other, but the colluding members of each set could de-
crypt the message intended for only the members with both
attributes.
Allowing users to encrypt data for groups that they are
not members of requires additional infrastructure. Alice can
give her friends the ability to encrypt messages for any of
her groups deﬁned by an asymmetric keypair by publishing a
list of her groups and their public keys. Other users consult
this list to send messages to Alice’s groups. However, only
group members can encrypt to groups deﬁned by a shared
symmetric key.
2.3 ABE
Alternately, attribute-based encryption (ABE) [5] can be
used to implement encryption to groups. To use ABE, each
user generates an ABE public key (APK) and an ABE mas-
ter secret key (AMSK). For each friend, the user can then
generate an ABE secret key (ASK) corresponding to the set
of attributes that deﬁnes the groups that friend should be
part of. For instance, if Alice decides that Bob is a “neigh-
bor”, “co-worker”, and “football fan”, then she would gener-
ate and distribute to Bob an ABE attribute secret key that
includes those three attributes. Bob becomes a member of
the groups deﬁned by combinations of those attributes.
In ABE, each encryption must specify an access struc-
ture: a logical expression over attributes. For instance,
Alice can choose to encrypt a message with access struc-
ture (‘neighbor’ OR ‘football fan’), where ‘neighbor’ and
‘football fan’ are attributes, rather than groups, and any
of her friends who have an attribute secret key with either
attribute will be able to decrypt the message. Alice can also
encrypt to (‘neighbor’ AND ‘football fan’). In this case, the
ABE construction ensures that only friends with both at-
tributes will be able to decrypt the message. Unlike in the
traditional cryptography approach, a single encryption op-
eration constructs the new group and provides the (symmet-
ric) key that protects the rest of the message. Furthermore,
any user who knows Alice’s ABE public key can encrypt to
any access structure (and thus create any group) by knowing
the names and deﬁnitions of the attributes Alice deﬁned.
ABE provides a natural mapping for the group encryp-
tion primitive that we envision for OSNs. This simplicity
comes at a performance penalty: ABE operations are about
100-1000 times slower than those of RSA. These ABE oper-
ations can be avoided in practice by careful system design.
Speciﬁcally, ABE deﬁnes new groups through attributes and