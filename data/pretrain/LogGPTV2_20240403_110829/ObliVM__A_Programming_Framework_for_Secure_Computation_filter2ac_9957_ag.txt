### Future Work

In future work, we aim to implement a C-based Garbled Circuit backend similar to JustGarble [4], which will enable us to leverage the hardware AES-NI features of modern processors. Additionally, we plan to incorporate state-of-the-art optimizations for Oblivious Transfer (OT) [8]. It would also be valuable to extend our framework to support multiple parties and provide malicious security. Given that ObliVM is designed to efficiently compile programs into compact circuits, it would be interesting to expand its capabilities to support other cryptographic backends such as fully homomorphic encryption, program obfuscation, and verifiable computation.

### Acknowledgments

We are deeply grateful to Michael Hicks and Jonathan Katz for their continuous support throughout the project. We are particularly thankful to Andrew Myers for his thoughtful feedback during the revision process. We also extend our gratitude to Srini Devadas, Christopher Fletcher, Ling Ren, Albert Kwon, abhi shelat, Dov Gordon, Nina Taft, Udi Weinsberg, Stratis Ioannidis, and Kevin Sekniqi for their insightful contributions and various forms of support. We appreciate the anonymous reviewers for their constructive feedback. This research was partially supported by NSF grants CNS-1464113 and CNS-1314857, a Sloan Fellowship, Google Research Awards, and a subcontract from the DARPA PROCEED program.

### References

[1] A. C.-C. Yao, "Protocols for secure computations (extended abstract)," in FOCS, 1982.

[2] O. Goldreich, S. Micali, and A. Wigderson, "How to play any mental game," in STOC, 1987.

[3] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank, "Extending Oblivious Transfers Efficiently," in CRYPTO 2003, 2003.

[4] M. Bellare, V. T. Hoang, S. Keelveedhi, and P. Rogaway, "Efficient Garbling from a Fixed-Key Blockcipher," in S & P, 2013.

[5] V. Kolesnikov and T. Schneider, "Improved Garbled Circuit: Free XOR Gates and Applications," in ICALP, 2008.

[6] S. G. Choi, J. Katz, R. Kumaresan, and H.-S. Zhou, "On the security of the 'free-xor' technique," in TCC, 2012.

[7] B. Applebaum, "Garbling xor gates 'for free' in the standard model," in TCC, 2013.

[8] G. Asharov, Y. Lindell, T. Schneider, and M. Zohner, "More Efficient Oblivious Transfer and Extensions for Faster Secure Computation," in CCS '13, 2013.

[9] D. Bogdanov, S. Laur, and J. Willemson, "Sharemind: A Framework for Fast Privacy-Preserving Computations," in ESORICS, 2008.

[10] B. Kreuter, B. Mood, A. Shelat, and K. Butler, "PCF: A portable circuit format for scalable two-party secure computation," in Usenix Security, 2013.

[11] B. Kreuter, A. Shelat, and C.-H. Shen, "Billion-gate secure computation with malicious adversaries," in USENIX Security, 2012.

[12] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella, "Fairplay: a secure two-party computation system," in USENIX Security, 2004.

[13] W. Henecka, S. Kögl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg, "Tasty: tool for automating secure two-party computations," in CCS, 2010.

[14] Y. Zhang, A. Steele, and M. Blanton, "PICCO: a general-purpose compiler for private distributed computation," in CCS, 2013.

[15] C. Liu, Y. Huang, E. Shi, J. Katz, and M. Hicks, "Automating Efficient RAM-model Secure Computation," in S & P, May 2014.

[16] A. Holzer, M. Franz, S. Katzenbeisser, and H. Veith, "Secure Two-party Computations in ANSI C," in CCS, 2012.

[17] A. Rastogi, M. A. Hammer, and M. Hicks, "Wysteria: A Programming Language for Generic, Mixed-Mode Multiparty Computations," in S & P, 2014.

[18] "Partisia," http://www.partisia.dk/.

[19] "Dyadic Security," http://www.dyadicsec.com/.

[20] R. Canetti, "Security and composition of multiparty cryptographic protocols," Journal of Cryptology, 2000.

[21] C. Liu, X. S. Wang, M. Hicks, and E. Shi, "Formalizing the ObliVM language," Manuscript in preparation, 2015.

[22] J. Agat, "Transforming out timing leaks," in POPL, 2000.

[23] A. Russo, J. Hughes, D. A. Naumann, and A. Sabelfeld, "Closing internal timing channels by transformation," in ASIAN, 2006.

[24] M. T. Goodrich and M. Mitzenmacher, "Privacy-preserving access of outsourced data via oblivious RAM simulation," in ICALP, 2011.

[25] D. Dachman-Soled, C. Liu, C. Papamanthou, E. Shi, and U. Vishkin, "Oblivious network RAM," Cryptology ePrint Archive, Report 2015/073, 2015, http://eprint.iacr.org/.

[26] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser, and G. Czajkowski, "Pregel: a system for large-scale graph processing," in SIGMOD, 2010.

[27] "GraphLab," http://graphlab.org.

[28] M. Blanton, A. Steele, and M. Alisagari, "Data-oblivious graph algorithms for secure computation and outsourcing," in ASIA CCS, 2013.

[29] A. A. Karatsuba, "The Complexity of Computations," 1995.

[30] X. S. Wang, Y. Huang, T.-H. H. Chan, A. Shelat, and E. Shi, "SCORAM: Oblivious RAM for Secure Computation," in CCS, 2014.

[31] V. Nikolaenko, U. Weinsberg, S. Ioannidis, M. Joye, D. Boneh, and N. Taft, "Privacy-preserving ridge regression on hundreds of millions of records," in S & P, 2013.

[32] M. T. Goodrich and J. A. Simons, "Data-Oblivious Graph Algorithms in Outsourced External Memory," CoRR, vol. abs/1409.0597, 2014.

[33] J. Brickell and V. Shmatikov, "Privacy-preserving graph algorithms in the semi-honest model," in ASIACRYPT, 2005.

[34] K. Nayak, X. S. Wang, S. Ioannidis, U. Weinsberg, N. Taft, and E. Shi, "GraphSC: Parallel Secure Computation Made Easy," in IEEE S & P, 2015.

[35] V. Nikolaenko, S. Ioannidis, U. Weinsberg, M. Joye, N. Taft, and D. Boneh, "Privacy-preserving matrix factorization," in CCS, 2013.

[36] X. S. Wang, K. Nayak, C. Liu, T.-H. H. Chan, E. Shi, E. Stefanov, and Y. Huang, "Oblivious Data Structures," in CCS, 2014.

[37] M. Keller and P. Scholl, "Efficient, oblivious data structures for MPC," in Asiacrypt, 2014.

[38] J. C. Mitchell and J. Zimmerman, "Data-Oblivious Data Structures," in STACS, 2014, pp. 554–565.

[39] X. S. Wang, T.-H. H. Chan, and E. Shi, "Circuit ORAM: On Tightness of the Goldreich-Ostrovsky Lower Bound," Cryptology ePrint Archive, Report 2014/672, 2014.

[40] "RSA Distributed Credential Protection," http://www.emc.com/security/rsa-distributed-credential-protection.htm.

[41] C. Liu, M. Hicks, and E. Shi, "Memory trace oblivious program execution," in CSF '13, 2013, pp. 51–65.

[42] S. D. Gordon, A. McIntosh, J. Katz, E. Shi, and X. S. Wang, "Secure computation of MIPS machine code," Manuscript, 2015.

[43] Y. Huang, D. Evans, J. Katz, and L. Malka, "Faster secure two-party computation using garbled circuits," in Usenix Security Symposium, 2011.

[44] E. M. Songhori, S. U. Hussain, A.-R. Sadeghi, T. Schneider, and F. Koushanfar, "TinyGarble: Highly Compressed and Scalable Sequential Garbled Circuits," in IEEE S & P, 2015.

[45] A. C.-C. Yao, "How to generate and exchange secrets," in FOCS, 1986.

[46] M. Naor, B. Pinkas, and R. Sumner, "Privacy preserving auctions and mechanism design," in EC '99, 1999.

[47] S. Zahur, M. Rosulek, and D. Evans, "Two halves make a whole: Reducing data transfer in garbled circuits using half gates," in EUROCRYPT, 2015.

[48] C. Gentry, "Fully homomorphic encryption using ideal lattices," in STOC, 2009.

[49] C. Liu, X. S. Wang, K. Nayak, Y. Huang, and E. Shi, "ObliVM: A programming framework for secure computation," 2015, http://www.cs.umd.edu/~elaine/docs/oblivmtr.pdf.

[50] O. Goldreich and R. Ostrovsky, "Software protection and simulation on oblivious RAMs," J. ACM, 1996.

[51] O. Goldreich, "Towards a theory of software protection and simulation by oblivious RAMs," in STOC, 1987.

[52] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li, "Oblivious RAM with O((log N)^3) worst-case cost," in ASIACRYPT, 2011.

[53] T. Hastie, R. Tibshirani, and J. Friedman, The Elements of Statistical Learning: Data Mining, Inference, and Prediction, 2001.

[54] "Private communication," 2014.

[55] M. Naor and B. Pinkas, "Efficient oblivious transfer protocols," in SODA, 2001.

[56] http://humangenomeprivacy.org/2015.

[57] N. A. Jagadeesan, R. Pal, K. Nadikuditi, Y. Huang, E. Shi, and M. Yu, "A secure computation framework for SDNs," in HotSDN, 2014.

[58] X. S. Wang, C. Liu, K. Nayak, Y. Huang, and E. Shi, "iDASH secure genome analysis competition using ObliVM," Cryptology ePrint Archive, Report 2015/191, 2015, http://eprint.iacr.org/.

[59] J. Wagner, J. Paulson, X. S. Wang, H. Corrada-Bravo, and B. Bhattacharjee, "Privacy-preserving human microbiome analysis using secure computation," Manuscript, 2015.

[60] E. Kushilevitz, S. Lu, and R. Ostrovsky, "On the (in)security of hash-based oblivious RAM and a new balancing scheme," in SODA, 2012.

### Appendix A: Additional Oblivious Algorithm

#### A. Additional Oblivious Graph Algorithm

It has been an open question how to construct an Oblivious Depth First Search (ODFS) algorithm that outperforms one built on generic ORAMs [22]. Here, we address this question for dense graphs by presenting an O((E + V) log V) time ODFS algorithm. In comparison, a generic-ORAM based oblivious solution would take O((E + V) log^2 V) time (ignoring possible log log factors) [29, 60].

The challenge in standard DFS is verifying whether a vertex has been visited every time a new edge is explored. This is typically done by storing a bit-array that supports dynamic access. To make it oblivious, this bit-array must be placed inside an ORAM, resulting in an O(log^2 V) cost per access and O(E log^2 V) time over all O(E) accesses.

To solve this problem, instead of verifying if a vertex has been visited, we maintain a `tovisit` list of vertices, which preserves the same traversal order as DFS. When new vertices are added to this list, we ensure that each vertex appears at most once using an oblivious sorting algorithm.

**Algorithm 3: Oblivious DFS**

- **Secret Input:** s: starting vertex
- **Secret Input:** E: adjacency matrix, stored in an ORAM of V blocks, each block being one row of the matrix.
- **Output:** order: DFS traversal order (not in ORAM)

```plaintext
1: tovisit := [(s, 0), ⊥, ..., ⊥];
2: for i = 1 to |V| do
3:   (u, depth) := tovisit[1];
4:   tovisit[1] := (u, ∞); // mark as visited
5:   order[i] := u;
6:   edge := E[u];
7:   for v = 1 to |V| do
8:     if edge[v] == 1 then // (u, v) is an edge
9:       add[v] := (v, i); // add is not in ORAM
10:      else
11:        add[v] := ⊥; // (u, v) is not an edge
12:    tovisit.Merge(add);
13: return order
```

**Algorithm 4: Minimum Spanning Tree with Bounded For Loops**

- **Secret Input:** s: the source node
- **Secret Input:** e: concatenation of adjacency lists stored in a single ORAM array. Each vertex’s neighbors are stored adjacent to each other.
- **Secret Input:** s[u]: sum of out-degree over vertices from 1 to u.
- **Output:** dis: the shortest distance from the source to each node

```plaintext
1: explored := [false, false, ..., false]
2: PQ.push(0, s)
3: res := 0
4: bwhile(V)(!PQ.empty())
5:   (weight, u) := PQ.pop()
6:   if !explored[u] then
7:     res := res + weight
8:     explored[u] := true
9:     bfor(E)(i := s[u]; i < s[u+1]; i++) do
10:      v := e[i]
11:      PQ.push(weight + e[i+1], v)
```

**Cost Analysis:**
- The inner loop (lines 8-11) runs in constant time and will run V^2 times.
- Lines 3-5 also run in constant time but will only run V times.
- Line 6 is an ORAM read and will run V times. Since the ORAM’s block size is V = ω(log^2 V), each ORAM read has an amortized cost of O(V log V).
- Line 12, which will run V times, consists of four oblivious sortings over an O(V)-size array, thus costing O(V log V).
- Therefore, the overall cost of our algorithm is O(V^2 log V).

#### B. Oblivious Minimum Spanning Tree

In Algorithm 4, we show the pseudocode for the minimum spanning tree algorithm written using ObliVM-lang with our new loop coalescing abstraction. The algorithm is very similar to the standard textbook implementation, except for the annotations used for bounded-for loops in Lines 4 and 9. As described in Section IV-C, the inner loop (Line 9 to Line 11) will only execute O(V + E) times over all iterations of the outer loop. Each execution of the inner loop requires circuits of size O(log^2 V), using the latest oblivious data structures [26] and Circuit ORAM [29]. Thus, the overall complexity is O((V + E) log^2 V). Further discussions about the minimum spanning tree algorithm can be found in our online full version [39].