WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Take Advantage of Superglobals
Supposing we can send the custom header (MyHeader) to 
inject our payload on the server-side, we have the following 
code to evaluate our payload as PHP code:
echo  variable name
▪
$$var > variable of $var variable
2.4.1.5 Variable Variables
|  p.108
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Simple Example
$x = 'Love';
//Variable
$$x = 'Beer';
//Variable variable
echo $x;
//> Love
echo $$x;
//> Beer
echo $Love;
//> Beer
echo ${Love};
//> Beer
echo ${"Love"};
//> Beer
echo "$x ${$x}";
//> Love Beer 
echo "$x ${Love}";
//> Love Beer 
2.4.1.5 Variable Variables
|  p.109
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
It is also possible to add more Dollar Signs. 
With this way, it is very easy to create code very hard to 
read, like the examples in the upcoming slides.
2.4.1.5 Variable Variables
|  p.110
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Chained Dollar Signs
$x = "I"; $I = "Love"; $Love = "Beer"; $Beer = "So"; $So = "Much";
echo $x;
//>I
echo $$x;
//>Love
echo $$$x;
//>Beer
echo $$$$x;
//>So
echo $$$$$x;
//>Much
echo $x.$$x.$$$x.$$$$x.$$$$$x;
//>ILoveBeerSoMuch
2.4.1.5 Variable Variables
|  p.111
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
$_SERVER Superglobal
This is a way to access the $_SERVER superglobal:
$$$$$$$$$$s = '_SERVER';
var_dump($$$$$$$$$$s);
//> NULL
var_dump($$$$$$$$$$$s);
//> string(7) "_SERVER"
var_dump($$$$$$$$$$$$s);
//> the $_SERVER array
2.4.1.5 Variable Variables
|  p.112
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Of course, using these basic techniques the ways to 
obfuscate your payload are countless. It is all up to your 
imagination! 
In any case, knowing how to obfuscate your payload using 
alternative ways is a valuable skill.
2.4.1.5 Variable Variables
|  p.113
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Let’s now put some "magic" in this PHP chapter! 
Like in JavaScript, in PHP it is possible to write non-
alphanumeric encoded code. The mechanism is similar but 
not the same, which is simply due to the fact that PHP 
obviously lacks some of the JavaScript functions and 
properties.
2.4.2 Non-Alphanumeric Code
|  p.114
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
http://www.thespanner.co.uk/2011/09/22/non-alphanumeric-code-in-php/
http://www.thespanner.co.uk/2012/08/21/php-nonalpha-tutorial/
The first explanation of this techniques was made by 
Gareth Hayes in a blog post "Non alphanumeric code in 
PHP”. He also wrote a tutorial "PHP nonalpha tutorial". 
Without going too deep into this topic, let’s see some 
interesting behaviors at the base of this technique to 
generate strings.
2.4.2 Non-Alphanumeric Code
|  p.115
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
http://php.net/manual/en/language.operators.increment.php
Arithmetic Operators
PHP follows Perl's convention when dealing with arithmetic 
operations on character variables. For example:
$§ = 'a'; 
$§++;
//$§ = 'b'
$§ = 'z'; 
$§++;
//$§ = 'aa'
$§ = 'A'; 
$§++;
//$§ = 'B'
$§ = 'a1'; 
$§++;
//$§ = 'a2'
2.4.2.1 Strings Generation
|  p.116
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Arithmetic Operators
Character variables can only be incremented and not 
decremented. Only plain ASCII alphabets and digits (a-z, A-Z
and 0-9) are supported:
$§ = 'a'; 
$§--;
//$§ = 'a'
$§ = 'è'; 
$§++;
//$§ = 'è'
2.4.2.1 Strings Generation
|  p.117
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
http://www.php.net/manual/en/language.operators.bitwise.php
Bitwise Operators
It is also possible to use Bitwise Operators on strings. For 
example:
echo A&B;    //>                                       @
echo A|B;    //>                                       C
echo A^B;    //U+0003 END OF TEXT
echo ~A;     //U+00BE VULGAR FRACTION THREE QUARTERS>  ¾
echo A                                       0
2.4.2.1 Strings Generation
|  p.118
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Using String Output of Native PHP Objects
If we want to start from a string, we can use the Array
native object as follows:
$a = [];                  // Create an empty array object
$a = $a.!![];
// Convert the array to string >                  "Array"
$_ = $__ = ![]&!![];      // true & false generates the int(0) >            0
$__++;                    // Increment  int(0) by one >                     1
$_§ = $__§ = $a[$_];      // Access the position 0 of the "Array" string >  "A"
$__§++;                   // Get the next char after A >                    "B"
echo $_§|$__§;            // Echoes A|B >                                   "C"
2.4.2.1 Strings Generation
|  p.119
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
Source> http://web.archive.org/web/20160526025218/http://www.spentera.com/2011/09/non-
alphanumeric-php-simple-backdoor/
Now, try to imagine how code like the curly syntax or others 
we have seen (in the basic section) could be useful with 
this technique. Now, try to write your own shellscript! 
Here’s a little hint:
$_="{"; #XOR char 
echo ($_^";").($_^"/");
#XOR Magic.. > GET
…
2.4.2.1 Strings Generation
|  p.120
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
phpinfo()
Hackvector.co.uk provides two 
options to encode php in non-
alphanumeric code. 
This next example is a 
phpinfo(); command encoded 
with the first option: phpnonalpha
2.4.2.2 Hackvertor.co.uk
|  p.121
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
phpinfo()
|  p.122
2.4.2.2 Hackvertor.co.uk
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
References
|  p.123
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
References
Google URL Shortener
Preview of TinyURL.com/ph7xh4m
Non-alphanumeric PHP Simple Backdoor | Spentera
GitHub: JSFuck list
http://goo.gl/DpJnCq+
http://preview.tinyurl.com/ph7xh4m
http://web.archive.org/web/20160526025218/http://www.spentera.com/2011/09/non-
alphanumeric-php-simple-backdoor/
https://github.com/aemkei/jsfuck/blob/master/jsfuck.js
|  p.124
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
References
How to Preview Shortened URLs (TinyURL, bit.ly, is.gd, and more)
t.co (Twitter)
RFC 3986
Hack.me
http://security.thejoshmeister.com/2009/04/how-to-preview-shortened-urls-tinyurl.html
http://t.co/
http://tools.ietf.org/html/rfc3986#page-16
https://hack.me/
|  p.125
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
References
IP Converter
New XSS vectors/Unusual Javascript
jjencode demo
aaencode demo
http://www.silisoftware.com/tools/ipconverter.php
http://web.archive.org/web/20111128054051/http://sla.ckers.org/forum/read.php?2,15812,p
age=14
http://utf-8.jp/public/jjencode.html
http://utf-8.jp/public/aaencode.html
|  p.126
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
References
JSFuck
YAUC Less chars needed to run arbitrary JS code = 6! (JS GREAT WALL)
Examples of malicious javascript
http://code.jquery.com/jquery-2.1.0.min.js
http://www.jsfuck.com/
http://web.archive.org/web/20110707162819/http://sla.ckers.org/forum/read.php?24,32930
http://aw-snap.info/articles/js-examples.php
http://code.jquery.com/jquery-2.1.0.min.js
|  p.127
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
References
YUI Compressor
JSMin
Packer
https://developers.google.com/closure/compiler/
http://yui.github.io/yuicompressor/
http://crockford.com/javascript/jsmin
http://dean.edwards.name/packer/
|  p.128
What is the Closure Compiler?
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
References
PHP Type Casting
Non alphanumeric code in PHP
PHP nonalpha tutorial
Incrementing/Decrementing Operators
http://www.php.net/manual/en/language.types.type-juggling.php#language.types.typecasting
http://www.thespanner.co.uk/2011/09/22/non-alphanumeric-code-in-php/
http://www.thespanner.co.uk/2012/08/21/php-nonalpha-tutorial/
http://php.net/manual/en/language.operators.increment.php
|  p.129
WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020
References
Bitwise Operators
http://www.php.net/manual/en/language.operators.bitwise.php
|  p.130