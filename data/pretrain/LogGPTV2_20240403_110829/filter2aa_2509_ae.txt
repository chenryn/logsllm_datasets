### WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020

#### 2.4.1.5 Variable Variables
**Page 108**

Suppose we can send a custom header (e.g., `MyHeader`) to inject our payload on the server-side. The following code demonstrates how to evaluate the payload as PHP code:

```php
echo $variable_name;
```

- `$$var` refers to the variable whose name is stored in `$var`.

**Simple Example:**
```php
$x = 'Love';
// Variable
$$x = 'Beer';
// Variable of variable
echo $x; // Output: Love
echo $$x; // Output: Beer
echo $Love; // Output: Beer
echo ${Love}; // Output: Beer
echo ${"Love"}; // Output: Beer
echo "$x ${$x}"; // Output: Love Beer
echo "$x ${Love}"; // Output: Love Beer
```

**Page 109**

It is also possible to use multiple dollar signs to create more complex and less readable code. This technique can be used to obfuscate code, as shown in the upcoming examples.

**Page 110**

**Chained Dollar Signs:**
```php
$x = "I";
$I = "Love";
$Love = "Beer";
$Beer = "So";
$So = "Much";

echo $x; // Output: I
echo $$x; // Output: Love
echo $$$x; // Output: Beer
echo $$$$x; // Output: So
echo $$$$$x; // Output: Much
echo $x.$$x.$$$x.$$$$x.$$$$$x; // Output: ILoveBeerSoMuch
```

**Page 111**

**Accessing the `$_SERVER` Superglobal:**
```php
$$$$$$$$$$s = '_SERVER';
var_dump($$$$$$$$$$s); // Output: NULL
var_dump($$$$$$$$$$$s); // Output: string(7) "_SERVER"
var_dump($$$$$$$$$$$$s); // Output: the $_SERVER array
```

**Page 112**

Using these basic techniques, there are countless ways to obfuscate your payload. It all depends on your creativity. Knowing how to obfuscate your payload using alternative methods is a valuable skill.

**Page 113**

Let's now explore some "magic" in this PHP chapter! Similar to JavaScript, it is possible to write non-alphanumeric encoded code in PHP. The mechanism is similar but not identical, due to the differences in functions and properties between PHP and JavaScript.

**2.4.2 Non-Alphanumeric Code**
**Page 114**

Gareth Hayes first explained this technique in a blog post titled "Non alphanumeric code in PHP" and a tutorial "PHP nonalpha tutorial." Here are some interesting behaviors at the base of this technique for generating strings.

**Page 115**

**Arithmetic Operators:**
PHP follows Perl's convention for arithmetic operations on character variables. For example:
```php
$§ = 'a'; 
$§++; // $§ = 'b'
$§ = 'z'; 
$§++; // $§ = 'aa'
$§ = 'A'; 
$§++; // $§ = 'B'
$§ = 'a1'; 
$§++; // $§ = 'a2'
```

**Page 116**

Character variables can only be incremented and not decremented. Only plain ASCII alphabets and digits (a-z, A-Z, and 0-9) are supported:
```php
$§ = 'a'; 
$§--; // $§ = 'a'
$§ = 'è'; 
$§++; // $§ = 'è'
```

**Page 117**

**Bitwise Operators:**
It is also possible to use bitwise operators on strings. For example:
```php
echo 'A' & 'B';    // Output: @
echo 'A' | 'B';    // Output: C
echo 'A' ^ 'B';    // Output: U+0003 END OF TEXT
echo ~'A';         // Output: U+00BE VULGAR FRACTION THREE QUARTERS > ¾
echo 'A' << 0;     // Output: A
```

**Page 118**

**Using String Output of Native PHP Objects:**
If we want to start from a string, we can use the Array native object as follows:
```php
$a = [];                  // Create an empty array object
$a = $a . !![];           // Convert the array to string > "Array"
$_ = $__ = ![] & !![];    // true & false generates the int(0) > 0
$__++;                    // Increment int(0) by one > 1
$_§ = $__§ = $a[$_];      // Access the position 0 of the "Array" string > "A"
$__§++;                   // Get the next char after A > "B"
echo $_§ | $__§;          // Echoes A|B > "C"
```

**Page 119**

Now, try to imagine how code like the curly syntax or others we have seen (in the basic section) could be useful with this technique. Try to write your own shell script! Here’s a little hint:
```php
$_ = "{"; // XOR char
echo ($_ ^ ";") . ($_ ^ "/");
// XOR Magic.. > GET
```

**2.4.2.2 Hackvertor.co.uk**
**Page 121**

Hackvector.co.uk provides two options to encode PHP in non-alphanumeric code. The following example is a `phpinfo();` command encoded with the first option: `phpnonalpha`.

**Page 122**

**References**
**Page 123-130**

- Google URL Shortener
- Preview of TinyURL.com/ph7xh4m
- Non-alphanumeric PHP Simple Backdoor | Spentera
- GitHub: JSFuck list
- How to Preview Shortened URLs (TinyURL, bit.ly, is.gd, and more)
- t.co (Twitter)
- RFC 3986
- Hack.me
- IP Converter
- New XSS vectors/Unusual Javascript
- jjencode demo
- aaencode demo
- JSFuck
- YAUC Less chars needed to run arbitrary JS code = 6! (JS GREAT WALL)
- Examples of malicious javascript
- YUI Compressor
- JSMin
- Packer
- What is the Closure Compiler?
- PHP Type Casting
- Non alphanumeric code in PHP
- PHP nonalpha tutorial
- Incrementing/Decrementing Operators
- Bitwise Operators

For detailed references, please refer to the provided links and resources.

---

This optimized version aims to make the content more clear, coherent, and professional.