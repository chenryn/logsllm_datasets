postgres=# select xmin,xmax,xid_to_txid(xmin),txid_status(xid_to_txid(xmin)),pg_xact_commit_timestamp(xmin) from trac ;  
   xmin   |   xmax   | xid_to_txid | txid_status |   pg_xact_commit_timestamp      
----------+----------+-------------+-------------+-------------------------------  
 40477717 | 40477727 |  8630412309 | committed   | 2017-10-10 10:29:21.269612+08  
 40477719 | 40477727 |  8630412311 | committed   | 2017-10-10 11:15:05.875067+08  
(2 rows)  
postgres=# select xmin,xmax,xid_to_txid(xmin),txid_status(xid_to_txid(xmin)),pg_xact_commit_timestamp(xmin),xid_to_txid(xmax),txid_status(xid_to_txid(xmax)),pg_xact_commit_timestamp(xmax) from trac ;  
   xmin   |   xmax   | xid_to_txid | txid_status |   pg_xact_commit_timestamp    | xid_to_txid | txid_status | pg_xact_commit_timestamp   
----------+----------+-------------+-------------+-------------------------------+-------------+-------------+--------------------------  
 40477717 | 40477727 |  8630412309 | committed   | 2017-10-10 10:29:21.269612+08 |  8630412319 | aborted     |   
 40477719 | 40477727 |  8630412311 | committed   | 2017-10-10 11:15:05.875067+08 |  8630412319 | aborted     |   
(2 rows)  
-- 停库，修改epoch  
pg_ctl stop -m fast  
pg_resetwal -e 5 $PGDATA  
Write-ahead log reset  
-- 通过控制文件可以得到这个epoch  
pg_controldata   
Latest checkpoint's NextXID:          5:40477728  
-- 继续修改epoch  
pg_resetwal -e 6 $PGDATA  
Write-ahead log reset  
-- 通过控制文件可以得到这个epoch  
pg_controldata   
Latest checkpoint's NextXID:          6:40477728  
-- 启动  
pg_ctl start  
-- epoch修改后，txid发生了变化  
postgres=# select xmin,xmax,xid_to_txid(xmin),txid_status(xid_to_txid(xmin)),pg_xact_commit_timestamp(xmin),xid_to_txid(xmax),txid_status(xid_to_txid(xmax)),pg_xact_commit_timestamp(xmax) from trac ;  
   xmin   |   xmax   | xid_to_txid | txid_status |   pg_xact_commit_timestamp    | xid_to_txid | txid_status | pg_xact_commit_timestamp   
----------+----------+-------------+-------------+-------------------------------+-------------+-------------+--------------------------  
 40477717 | 40477727 | 25810281493 | committed   | 2017-10-10 10:29:21.269612+08 | 25810281503 | aborted     |   
 40477719 | 40477727 | 25810281495 | committed   | 2017-10-10 11:15:05.875067+08 | 25810281503 | aborted     |   
(2 rows)  
```  
为什么会有EPOCH呢？因为XID是循环使用的，每一个循环都会使得EPOCH自增1。从而使得TXID可以持续增长。  
## 参考  
[《PostgreSQL 闪回 - flash back query emulate by trigger》](../201408/20140828_01.md)    
[《Use pg_resetxlog simulate tuple disappear within PostgreSQL》](../201109/20110930_03.md)    
[《PostgreSQL xid(int4) to txid(int8)》](../201109/20110930_01.md)    
[《PostgreSQL 使用pg_xlogdump找到误操作事务号》](../201512/20151210_01.md)    
https://github.com/ChristophBerg/pg_dirtyread    
https://www.postgresql.org/docs/10/static/functions-info.html    
[《PostgreSQL Oracle 兼容性之 - 事件触发器实现类似Oracle的回收站功能》](../201504/20150429_01.md)    
[《PostgreSQL 回收站功能 - 基于HOOK的recycle bin pgtrashcan》](../201404/20140403_01.md)    
## 其他  
误操作后，如果又发生了DDL，例如新增字段，修改字段等。使用本文提供的闪回方法，有没有问题？  
测一下就知道了，不会有问题。  
```  
postgres=# alter table trac add column info text;  
ALTER TABLE  
postgres=# insert into trac values (2,'test');  
INSERT 0 1  
postgres=# select   
       xid_to_txid(xmin) as xmin_txid, txid_status(xid_to_txid(xmin)) as xmin_cmstat, pg_xact_commit_timestamp(xmin) as xmin_ts,   
       xid_to_txid(xmax) as xmax_txid, txid_status(xid_to_txid(xmax)) as xmax_cmstat, pg_xact_commit_timestamp(case xmax when 0 then null else xmax end) as xmax_ts,  
       xmin as xmin1,xmax as xmax1,dead,oid,  
       id,info  -- 目标表字段  
from   
(  
  SELECT * FROM pg_dirtyread('trac'::regclass)  
  as t (tableoid oid, ctid tid, xmin xid, xmax xid, cmin cid, cmax cid, dead boolean, oid oid,   
       id int, info text)  -- 目标表字段  
) t;  
  xmin_txid  | xmin_cmstat |            xmin_ts            |  xmax_txid  | xmax_cmstat |            xmax_ts            |  xmin1   |  xmax1   | dead | oid | id | info   
-------------+-------------+-------------------------------+-------------+-------------+-------------------------------+----------+----------+------+-----+----+------  
 25810281493 | committed   | 2017-10-10 10:29:21.269612+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477717 | 40477750 | f    |   0 |  1 |   
 25810281495 | committed   | 2017-10-10 11:15:05.875067+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477719 | 40477752 | f    |   0 |  2 |   
 25810281503 | aborted     |                               |           0 |             |                               | 40477727 |        0 | t    |   0 |  2 |   
 25810281503 | aborted     |                               |           0 |             |                               | 40477727 |        0 | t    |   0 |  2 |   
 25810281513 | committed   | 2017-10-10 16:56:12.206339+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477737 | 40477752 | f    |   0 |  2 |   
 25810281514 | committed   | 2017-10-10 16:56:13.706233+08 |           0 |             |                               | 40477738 |        0 | f    |   0 |  3 |   
 25810281515 | committed   | 2017-10-10 16:56:15.108331+08 |           0 |             |                               | 40477739 |        0 | f    |   0 |  4 |   
 25810281516 | committed   | 2017-10-10 16:56:16.092184+08 | 25810281521 | committed   | 2017-10-10 16:56:58.684832+08 | 40477740 | 40477745 | f    |   0 |  5 |   
 25810281517 | committed   | 2017-10-10 16:56:17.207356+08 | 25810281519 | committed   | 2017-10-10 16:56:48.011544+08 | 40477741 | 40477743 | f    |   0 |  6 |   
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  6 |   
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  6 |   
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  6 |   
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  7 |   
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  7 |   
 25810281518 | aborted     |                               |           0 |             |                               | 40477742 |        0 | t    |   0 |  7 |   
 25810281519 | committed   | 2017-10-10 16:56:48.011544+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477743 | 40477752 | f    |   0 |  2 |   
 25810281520 | aborted     |                               |           0 |             |                               | 40477744 |        0 | t    |   0 |  2 |   
 25810281521 | committed   | 2017-10-10 16:56:58.684832+08 | 25810281528 | committed   | 2017-10-10 17:25:47.410793+08 | 40477745 | 40477752 | f    |   0 |  2 |   
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1 |   
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1 |   
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1 |   
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1 |   
 25810281523 | committed   | 2017-10-10 17:21:39.000214+08 | 25810281526 | committed   | 2017-10-10 17:25:34.593189+08 | 40477747 | 40477750 | f    |   0 |  1 |   
 25810281532 | committed   | 2017-10-10 18:58:50.720095+08 |           0 |             |                               | 40477756 |        0 | f    |   0 |  2 | test  
(24 rows)  
```  
## 小结
本文介绍了原地闪回的一种方法：  
1、新增脏读功能、新增表级vacuum_defer_cleanup_age(避免全库膨胀)功能、开启track_commit_timestamp。可以实现dml flashback（闪回）。   
2、增加回收站(通过HOOK)功能，可以实现DDL flashback。  
全库闪回，可以参考PostgreSQL的PITR的功能。  
原地闪回的另一种方法：利用redo的undo内容进行闪回，这种方法可以避免膨胀的问题，回退到什么时间点，与保留的REDO文件数有关。使用redo来闪回也会引入一个问题，UNDO需要记录更多的内容，导致REDO文件内容变多。因此建议也是设置表级redo的UNDO内容。       
```
create table\alter table
REPLICA IDENTITY { DEFAULT | USING INDEX index_name | FULL | NOTHING }
需要设置为FULL，存储所有的OLD VALUE，才能实现UNDO。  
```
```
REPLICA IDENTITY
This form changes the information which is written to the write-ahead log 
to identify rows which are updated or deleted. 
This option has no effect except when logical replication is in use. 
DEFAULT (the default for non-system tables) records the old values of the columns 
of the primary key, if any. 
USING INDEX records the old values of the columns covered by the named index, 
which must be unique, not partial, not deferrable, and include only columns marked NOT NULL. 
FULL records the old values of all columns in the row. 
NOTHING records no information about the old row. 
(This is the default for system tables.) 
In all cases, no old values are logged unless at least one of the columns that would 
be logged differs between the old and new versions of the row.
```
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")