# Xception™ - Enhanced Automated Fault-Injection Environment

**Authors:**
- Ricardo Maia
- Luis Henriques
- Diamantino Costa
- Henrique Madeira

**Affiliations:**
- Critical Software SA, 3030 Coimbra, Portugal
- DEI-FCTUC, University of Coimbra, 3030 Coimbra, Portugal

## 1. Introduction

The increasing demand for mission and business-critical applications in sectors such as aerospace, industry, defense, telecommunications, and general business is presenting new challenges to the software industry. These challenges include ensuring high availability, reliability, and safety. Failures in these applications can have significant financial implications and even endanger human lives. Therefore, before deploying such systems, they must undergo rigorous testing to ensure that both the system and its fault-tolerance mechanisms function as expected.

Traditional testing methods are often insufficient to validate the system's response to unusual or exceptional events. Built-in fault injection (FI) based testing provides a practical solution to these demands. It allows for the testing of systems under exceptional conditions, validating recovery mechanisms, simulating worst-case failure scenarios, and identifying weak points in the system, thus providing feedback for correction or redesign.

## 2. Xception – The Tool

Xception is an automated fault injection environment designed to enable accurate and flexible verification and validation (V&V) and evaluation of mission and business-critical computer systems. It supports a variety of fault injection techniques, allowing for the emulation of different classes of faults, with a particular focus on hardware and software faults.

A key feature of Xception is its high degree of automation, which simplifies the planning and execution of fault injection experiments. The tool provides a user-friendly graphical user interface (GUI) for fault definition, experiment execution, and result analysis. All data required for managing and automating the experiments is stored in a standard SQL database.

Xception can affect both user and kernel code, and it can fine-tune the emulation of faults in specific threads and/or processes, across different processors, or even in different nodes of a distributed system. The tool has been used in various domains, including Online Transaction Processing Systems (OLTP) and Space Payload Systems. Supported target systems include platforms based on PowerPC, Intel Pentium, and SPARC, running operating systems such as LynxOS, SMX, Windows NT/2000, and Linux. For more information, refer to [1].

![Xception Testbed Layout](figure1.png)

## 3. What’s New in Xception 2.0

The new version 2.0 of Xception introduces several advanced fault injection techniques, including Boundary Scan-based Fault Injection (BSFI), Pin-Level Fault Injection (PLFI), and software mutation. Additionally, the traditional Software-Implemented Fault Injection (SWIFI) has been enhanced to reduce intrusiveness. The integration of these FI technologies into a single toolset allows for the configuration of Xception 2.0 to suit multiple scenarios, with varying requirements in terms of intrusiveness, data collection, and source code availability.

## 4. References

1. [Xception Website](http://www.xception.org)
2. [Xception White Paper](http://www.xception.org)
3. D. Costa, T. Rilho, and H. Madeira, “Joint Evaluation of Performance and Robustness of a COTS DBMS Through Fault-Injection,” in *IEEE/IFIP Dependable Systems and Networks Conference (DSN)*, New York, USA, June 25-28, 2000, pp. 251-260.
4. H. Madeira, R. Some, F. Moreira, D. Costa, and D. Rennels, “Experimental Evaluation of a COTS System for Space Applications,” in *Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)*, USA, 2002.

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)**  
**0-7695-1597-5/02 $17.00 © 2002 IEEE**  
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:25:28 UTC from IEEE Xplore. Restrictions apply.**