54
利用 commit 理解镜像构成
$ docker diff webserver
C /root
A /root/.bash_history
C /run
C /usr
C /usr/share
C /usr/share/nginx
C /usr/share/nginx/html
C /usr/share/nginx/html/index.html
C /var
C /var/cache
C /var/cache/nginx
A /var/cache/nginx/client_temp
A /var/cache/nginx/fastcgi_temp
A /var/cache/nginx/proxy_temp
A /var/cache/nginx/scgi_temp
A /var/cache/nginx/uwsgi_temp
现在我们定制好了变化，我们希望能将其保存下来形成镜像。
要知道，当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修
改都会被记录于容器存储层里。而 Docker 提供了一个 docker commit 命令，可
以将容器的存储层保存下来成为镜像。换句话说，就是在原有镜像的基础上，再叠
加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有
原有容器最后的文件变化。
docker commit 的语法格式为：
docker commit [选项]  [[:]]
我们可以用下面的命令将容器保存为镜像：
55
利用 commit 理解镜像构成
$ docker commit \
--author "Tao Wang " \
--message "修改了默认网页" \
webserver \
nginx:v2
sha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa
1795214
其中 --author 是指定修改的作者，而 --message 则是记录本次修改的内容。
这点和 git 版本控制相似，不过这里这些信息可以省略留空。
我们可以在 docker images 中看到这个新定制的镜像：
$ docker images nginx
REPOSITORY TAG IMAGE ID CREA
TED SIZE
nginx v2 07e334659748 9 se
conds ago 181.5 MB
nginx 1.11 05a60462f8ba 12 d
ays ago 181.5 MB
nginx latest e43d811ce2f4 4 we
eks ago 181.5 MB
我们还可以用 docker history 具体查看镜像内的历史记录，如果比较
nginx:latest 的历史记录，我们会发现新增了我们刚刚提交的这一层。
56
利用 commit 理解镜像构成
$ docker history nginx:v2
IMAGE CREATED CREATED BY
SIZE COMMENT
07e334659748 54 seconds ago nginx -g daemon off;
95 B 修改了默认网页
e43d811ce2f4 4 weeks ago /bin/sh -c #(nop) CMD [
"nginx" "-g" "daemon 0 B
 4 weeks ago /bin/sh -c #(nop) EXPOS
E 443/tcp 80/tcp 0 B
 4 weeks ago /bin/sh -c ln -sf /dev/s
tdout /var/log/nginx/ 22 B
 4 weeks ago /bin/sh -c apt-key adv -
-keyserver hkp://pgp. 58.46 MB
 4 weeks ago /bin/sh -c #(nop) ENV N
GINX_VERSION=1.11.5-1 0 B
 4 weeks ago /bin/sh -c #(nop) MAINT
AINER NGINX Docker Ma 0 B
 4 weeks ago /bin/sh -c #(nop) CMD [
"/bin/bash"] 0 B
 4 weeks ago /bin/sh -c #(nop) ADD fi
le:23aa4f893e3288698c 123 MB
新的镜像定制好后，我们可以来运行这个镜像。
docker run --name web2 -d -p 81:80 nginx:v2
这里我们命名为新的服务为 web2 ，并且映射到 81 端口。如果是 Docker for
Mac/Windows 或 Linux 桌面的话，我们就可以直接访问 http://localhost:81 看到结
果，其内容应该和之前修改后的 webserver 一样。
至此，我们第一次完成了定制镜像，使用的是 docker commit 命令，手动操作
给旧的镜像添加了新的一层，形成新的镜像，对镜像多层存储应该有了更直观的感
觉。
慎用
docker commit
57
利用 commit 理解镜像构成
使用 docker commit 命令虽然可以比较直观的帮助理解镜像分层存储的概念，
但是实际环境中并不会这样使用。
首先，如果仔细观察之前的 docker diff webserver 的结果，你会发现除了真
正想要修改的 /usr/share/nginx/html/index.html 文件外，由于命令的执
行，还有很多文件被改动或添加了。这还仅仅是最简单的操作，如果是安装软件
包、编译构建，那会有大量的无关内容被添加进来，如果不小心清理，将会导致镜
像极为臃肿。
此外，使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜
像也被称为黑箱镜像，换句话说，就是除了制作镜像的人知道执行过什么命令、怎
么生成的镜像，别人根本无从得知。而且，即使是这个制作镜像的人，过一段时间
后也无法记清具体在操作的。虽然 docker diff 或许可以告诉得到一些线索，
但是远远不到可以确保生成一致镜像的地步。这种黑箱镜像的维护工作是非常痛苦
的。
而且，回顾之前提及的镜像所使用的分层存储的概念，除当前层外，之前的每一层
都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添
加、修改，而不会改动上一层。如果使用 docker commit 制作镜像，以及后期
修改的话，每一次修改都会让镜像更加臃肿一次，所删除的上一层的东西并不会丢
失，会一直如影随形的跟着这个镜像，即使根本无法访问到™。这会让镜像更加臃
肿。
docker commit 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保
存现场等。但是，不要使用 docker commit 定制镜像，定制行为应该使用
Dockerfile 来完成。下面的章节我们就来讲述一下如何使用 Dockerfile 定
制镜像。
58
使用 Dockerfile 定制镜像
使用 Dockerfile 定制镜像
从刚才的 docker commit 的学习中，我们可以了解到，镜像的定制实际上就是
定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作
的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复
的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是
Dockerfile。
Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令
构建一层，因此每一条指令的内容，就是描述该层应当如何构建。
还以之前定制 nginx 镜像为例，这次我们使用 Dockerfile 来定制。
在一个空白目录中，建立一个文本文件，并命名为 Dockerfile ：
$ mkdir mynginx
$ cd mynginx
$ touch Dockerfile
其内容为：
FROM nginx
RUN echo 'Hello, Docker!' > /usr/share/nginx/html/index
.html
这个 Dockerfile 很简单，一共就两行。涉及到了两条指令， FROM 和 RUN 。
FROM 指定基础镜像
所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行
了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而
FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并
且必须是第一条指令。
59
使用 Dockerfile 定制镜像
在 Docker Hub (https://hub.docker.com/explore/) 上有非常多的高质量的官方镜
像， 有可以直接拿来使用的服务类的镜像，如
nginx 、 redis 、 mongo 、 mysql 、 httpd 、 php 、 tomcat 等； 也有
一些方便开发、构建、运行各种语言应用的镜像，如
node 、 openjdk 、 python 、 ruby 、 golang 等。 可以在其中寻找一个最
符合我们最终目标的镜像为基础镜像进行定制。 如果没有找到对应服务的镜像，官
方镜像中还提供了一些更为基础的操作系统镜像，如
ubuntu 、 debian 、 centos 、 fedora 、 alpine 等，这些操作系统的软
件库为我们提供了更广阔的扩展空间。
除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为
scratch 。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。
FROM scratch
...
如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写
的指令将作为镜像第一层开始存在。
不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如
swarm 、 coreos/etcd 。对于 Linux 下静态编译的程序来说，并不需要有操作
系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 FROM
scratch 会让镜像体积更加小巧。使用 Go 语言 开发的应用很多会使用这种方式
来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因
之一。
RUN 执行命令
RUN 指令是用来执行命令行命令的。由于命令行的强大能力， RUN 指令在定制
镜像时是最常用的指令之一。其格式有两种：
shell 格式： RUN  ，就像直接在命令行中输入的命令一样。刚才写的
Dockrfile 中的 RUN 指令就是这种格式。
RUN echo 'Hello, Docker!' > /usr/share/nginx/html/index
.html
60
使用 Dockerfile 定制镜像
exec 格式： RUN ["可执行文件", "参数1", "参数2"] ，这更像是函数调用中
的格式。
既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本
一样把每个命令对应一个 RUN 呢？比如这样：
FROM debian:jessie
RUN apt-get update
RUN apt-get install -y gcc libc6-dev make
RUN wget -O redis.tar.gz "http://download.redis.io/releases/redi
s-3.2.5.tar.gz"
RUN mkdir -p /usr/src/redis
RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
RUN make -C /usr/src/redis
RUN make -C /usr/src/redis install
之前说过，Dockerfile 中每一个指令都会建立一层， RUN 也不例外。每一个
RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行
这些命令，执行结束后， commit 这一层的修改，构成新的镜像。
而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需
要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生
非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是
很多初学 Docker 的人常犯的一个错误。
Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是
不得超过 127 层。
上面的 Dockerfile 正确的写法应该是这样：
61
使用 Dockerfile 定制镜像
FROM debian:jessie
RUN buildDeps='gcc libc6-dev make' \
&& apt-get update \
&& apt-get install -y $buildDeps \
&& wget -O redis.tar.gz "http://download.redis.io/releases/r
edis-3.2.5.tar.gz" \
&& mkdir -p /usr/src/redis \
&& tar -xzf redis.tar.gz -C /usr/src/redis --strip-component
s=1 \
&& make -C /usr/src/redis \
&& make -C /usr/src/redis install \
&& rm -rf /var/lib/apt/lists/* \
&& rm redis.tar.gz \
&& rm -r /usr/src/redis \
&& apt-get purge -y --auto-remove $buildDeps
首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没
有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 RUN 对一一
对应不同的命令，而是仅仅使用一个 RUN 指令，并使用 && 将各个所需命令串
联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自
己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。
并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 \ 的
命令换行方式，以及行首 # 进行注释的格式。良好的格式，比如换行、缩进、注
释等，会让维护、排障更为容易，这是一个比较好的习惯。
此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建
所需要的软件，清理了所有下载、展开的文件，并且还清理了 apt 缓存文件。这
是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层
被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要
添加的东西，任何无关的东西都应该清理掉。
很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的
最后一定要清理掉无关文件。
构建镜像
62
使用 Dockerfile 定制镜像
好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个
Dockerfile 的内容，那么让我们来构建这个镜像吧。
在 Dockerfile 文件所在目录执行：
$ docker build -t nginx:v3 .
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM nginx
---> e43d811ce2f4
Step 2 : RUN echo 'Hello, Docker!' > /usr/share/nginx/h
tml/index.html
---> Running in 9cdc27646c7b
---> 44aa4490ce2c
Removing intermediate container 9cdc27646c7b
Successfully built 44aa4490ce2c
从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 Step 2 中，如
同我们之前所说的那样， RUN 指令启动了一个容器 9cdc27646c7b ，执行了所
要求的命令，并最后提交了这一层 44aa4490ce2c ，随后删除了所用到的这个容
器 9cdc27646c7b 。
这里我们使用了 docker build 命令进行镜像构建。其格式为：
docker build [选项] 
在这里我们指定了最终镜像的名称 -t nginx:v3 ，构建成功后，我们可以像之前
运行 nginx:v2 那样来运行这个镜像，其结果会和 nginx:v2 一样。
镜像构建上下文（Context）
如果注意，会看到 docker build 命令最后有一个 . 。 . 表示当前目录，而
Dockerfile 就在当前目录，因此不少初学者以为这个路径是在指定
Dockerfile 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，
你可能会发现，这是在指定上下文路径。那么什么是上下文呢？
首先我们要理解 docker build 的工作原理。Docker 在运行时分为 Docker 引擎
（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，
被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这
63
使用 Dockerfile 定制镜像
组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在
本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端
（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引
擎变得轻而易举。
当我们进行镜像构建的时候，并非所有定制都会通过 RUN 指令完成，经常会需要
将一些本地文件复制进镜像，比如通过 COPY 指令、 ADD 指令等。而 docker
build 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎
中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件
呢？
这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路
径， docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上
传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜
像所需的一切文件。
如果在 Dockerfile 中这么写：
COPY ./package.json /app/
这并不是要复制执行 docker build 命令所在的目录下的 package.json ，也