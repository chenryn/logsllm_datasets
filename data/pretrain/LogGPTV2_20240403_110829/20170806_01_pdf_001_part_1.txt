Postgres on the wire
A look at the PostgreSQL wire protocol
Jan Urban´ski
PI:EMAIL
Ducksboard
PGCon 2014, Ottawa, May 23
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 1/51
For those following at home
Getting the slides
$ wget http://wulczer.org/postgres-on-the-wire.pdf
Getting the source
$ https://github.com/wulczer/postgres-on-the-wire
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 2/51
1 Protocol basics
Frame format
Message flow
2 Sending queries
Simple protocol
Extended protocol
3 Other features
The COPY subprotocol
Less known FEBE features
Future development
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 4/51
Protocolbasics Frameformat
Outline
1 Protocol basics
Frame format
Message flow
2 Sending queries
3 Other features
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 5/51
Protocolbasics Frameformat
Protocol versions
 the 2.0 protocol got introduced in 6.4, around 1999
 protocol versioning got added in the previous release
 the 3.0 got introduced in 7.4, in 2003
 the server still supports protocol 1.0!
 3.0 has some new features
 extended query protocol
 COPY improvements
 overall better frame structure
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 6/51
Protocolbasics Frameformat
Handling incoming connections
Connections are received by the postmaster process, which immediately
forks a new process to deal with them.
 any parsing issues won’t affect the postmaster
 authentication is done after a process is forked
 closing the connection results in terminating the backend
 but the backend needs to notice that first
 killing the client might not terminate the running query
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 7/51
Protocolbasics Frameformat
FEBE frame format
Virtually all messages start with an ASCII identifier, followed by length and
payload.
Regular packet
char tag int32 len payload
The exception is the startup packet, which starts with the length followed
by the protocol version.
Startup packet
int32 len int32 protocol payload
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 8/51
Protocolbasics Frameformat
Startup packet
Startup packet
int32 len int32 protocol str name \0 str value ... \0
 the very first bit of data received by the backend is parsed as the
startup packet
 starts with a 32 bit protocol version field
 in protocol 2.0 it had a fixed length, in 3.0 it’s variable length
 what follows is a list of key/value pairs denoting options
 some keys, like user, database or options are special
 the rest are generic GUC options
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 9/51
Protocolbasics Frameformat
Regular data packet
Regular packet
char tag int32 len payload
 starts with an ASCII identifier
 a 32 bit message length follows
 this means you can’t send a query that’s larger than 1 GB
 interpretation of the payload depends on the identifier
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 10/51
Protocolbasics Messageflow
Outline
1 Protocol basics
Frame format
Message flow
2 Sending queries
3 Other features
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 11/51
Protocolbasics Messageflow
Authentication
AuthenticationRequest
'R' int32 len int32 method optional other
 if a connection requires authentication, the backend will send a
AuthenticationRequest
 there are several authentication types that can be demanded
 plain-text or MD5 password
 it’s up to the server to require plain text or encrypted
 GSSAPI, SSPI
 if no auth is necessary, the server sends AuthenticationOK
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 12/51
Protocolbasics Messageflow
Encrypted password exchange
AuthenticationRequestMD5
'R' int32 len int32 method char[4] salt
The MD5 AuthenticationRequest message includes a 4 byte salt.
pwdhash = md5(password + username).hexdigest()
hash = md5 + md5(pwdhash + salt).hexdigest()
 using a salt prevents replay attacks
 double-hashing allows the server to only store hashes
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 13/51
Protocolbasics Messageflow
Parameter status
ParameterStatus
'S' int32 len str name str value
 the server notifies clients about important parameters
 first batch of ParameterStatus messages is sent on startup
 some of them are informative, like server version
 others are critical for security, like client encoding
 others yet are important for the client, like DateStyle
 when any of those parameters gets set, the server notifies the client
on the next occasion
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 14/51
Protocolbasics Messageflow
Basic message flow
Client Server
startup packet
auth request | auth OK
(optional) PasswordMessage
ParameterStatus
ParameterStatus
ParameterStatus
BackendKeyData
ReadyForQuery
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 15/51
Protocolbasics Messageflow
Encryption
SSL negotiation
int32 len int32 sslcode
 the startup packet can use a dummy protocol version to ask for SSL
support
 the server responds with with status byte or an error message
 the client can reconnect or abort if the response is negative
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 16/51
Protocolbasics Messageflow
SSL message flow
Client Server
ssl negotiation packet
’S’ | ’N’ | error
SSL handshake
startup packet
auth request | auth OK
(optional) PasswordMessage
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 17/51
Protocolbasics Messageflow
Cancellation
Cancel request
int32 len int32 cancelcode int32 pid int32 secret
 the cancel key is transmitted by the server upon connection
 cancelling queries requires opening separate connection
 another dummy protocol version is sent to ask for cancellation
 the cancellation message includes the process ID and a 32 bit key
 theoretically open to replay attacks, but can be sent over SSL
 libpq does not, so most applications will transmit it in the open
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 18/51
Protocolbasics Messageflow
Handling errors
ErrorResponse
'E' int32 len char code str value \0 char code str value \0 ... \0
 the ErrorResponse message is sent for all kinds of errors
 both for authentication errors and client errors
 it is a list of key-value fields
 in 2.0 it was just a string, in 3.0 it has structure
 example error fields are: message, detail, hint and error position
 detailed down to the source file and line, great for fingerprinting
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 19/51
Protocolbasics Messageflow
Tools
 standard tools like tcpdump or tshark work
 Wireshark has built-in support for deparsing the protocol
 but only for protocol 3.0
 pgShark is a very nice tool that works with the Postgres protocol
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 20/51
Protocolbasics Messageflow
pgShark examples
generate a report from a pcap file
$ pgs-badger < dump.pcap
display live protocol info
$ pgs-debug --interface eth0
dump SQL from a 2.0 protocol connection on a nonstandard port
$ pgs-sql -2 --port 5433
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 21/51
Sendingqueries Simpleprotocol
Outline
1 Protocol basics
2 Sending queries
Simple protocol
Extended protocol
3 Other features
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 22/51
Sendingqueries Simpleprotocol
Binary vs text data
 every type has a text and binary representation
 depending on compile-time options, timestamps are either 64 bit
integers or floating point values
 this is why integer datetimes is sent in ParameterStatus
 the client can choose if they want text or binary data
 the exact format for each type doesn’t seem to be documented
anywhere
 but that’s what C code is for :)
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 23/51
Sendingqueries Simpleprotocol
Simple query protocol
 client sends an SQL command
 server replies with RowDescription detailing the structure
 each column has a name
 the type OID, length and modifier (like char(16))
 each column is marked as containing binary or text output
 after that a DataRow message is sent for every row
 finally, the server sends CommandComplete and ReadyForQuery
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 24/51
Sendingqueries Simpleprotocol
Simple query frames
Query
'Q' int32 len str query
RowDescription
+
'T' int32 len int16 numfields
str col int32 tableoid int16 colno int32 typeoid int16 typelen int32 typmod int16 format
...
DataRow
'D' int32 len int16 numfields int32 fieldlen char[fieldlen] data ...
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 25/51
Sendingqueries Simpleprotocol
Simple query frames cont.
CommandComplete
'C' int32 len str tag
ReadyForQuery
'Z' int32 len 'I' or 'T' or 'E'
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 26/51
fe-protocol2.c
By watching for messages (...), we can do a passable
job of tracking the xact status. BUT: this does not
work at all on 7.3 servers with AUTOCOMMIT OFF.
(Man, was that feature ever a mistake.) Caveat user.
Sendingqueries Simpleprotocol
Detecting transaction status
 the ReadyForQuery message includes transaction status
 this is useful for things like psql’s prompt or, more importantly,
pgbouncer
 the transaction status only got included in protocol 3.0
 for 2.0 libpq does string comparison to try and track the status
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 27/51
Sendingqueries Simpleprotocol
Detecting transaction status
 the ReadyForQuery message includes transaction status
 this is useful for things like psql’s prompt or, more importantly,
pgbouncer
 the transaction status only got included in protocol 3.0
 for 2.0 libpq does string comparison to try and track the status
fe-protocol2.c
By watching for messages (...), we can do a passable
job of tracking the xact status. BUT: this does not
work at all on 7.3 servers with AUTOCOMMIT OFF.
(Man, was that feature ever a mistake.) Caveat user.
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 27/51
Sendingqueries Simpleprotocol
Simple query protocol cont.
 several commands can be sent in one query string
 the server sends one CommandComplete per query
 in case of errors it’s up to the client to figure out which one failed
 sending an empty string yields a special EmptyQueryResponse instead
of CommandComplete
 the simple protocol always returns text data, except for binary cursors
JanUrban´ski (Ducksboard) Postgresonthewire PGCon2014 28/51