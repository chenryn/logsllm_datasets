记⼀次授权测试到顺⼿挖
⼀个 酒仙桥六号部
0day_
队
- MdEditor
“ 记⼀次授权测试到顺⼿挖⼀个 0day
前⾔
记在⼀次授权的渗透测试过程中遇到了这样⼀个项⽬，开
始对前台⼀顿 fuzz，端⼝⼀顿扫描也并没有 发现什么可
利⽤的漏洞，哪怕挖⼀个 xss 也⾏啊，但是 xss 也并没
有挖掘到，实在不⾏挖⼀个信息泄露 也好啊，果然让我
挖掘到了⼀个信息泄露，get 到了程序的指纹。
Pbootcms 是⼀套开源⽹站系统，然后百度了下该程序所
爆出来的漏洞进⾏了测试，发现都失败了，猜测应该是程
序升级到了较新版本，造成了⽹上爆出来的漏洞都被修复
了。既然没有捷径可⾛，那还是只有⽼⽼实实去官⽹下载
⼀份源码回来审计测试。
源码审计
1. 数据获取
通过对程序源代码的审查发现该程序封装了⾃⼰的数据获
取助⼿函数：get(),post(),request() 等， 获取流程如下:
⽤ post() 函数举例说明：post(‘name’,’vars’)。
可以看到将我们的传⼊的数据再次传⼊到了 filter 函数
中：
在 filter 函数中，会对获取到的数据进⾏⼀系列的强过
滤，例如我们这⾥的 vars，就只能传递中⽂，字 ⺟，数
字，点，逗号，空格这些字符。（PS: 因为不能传递括号
“(,)”，所以 sql 注⼊中的函数都没办法使 ⽤，也就导致
了什么报错注⼊，盲注啥的都不能使⽤，只有联合查询这
种可以使⽤） 接着函数在最后还经过了处理。
跟进 escape_string 函数：
对数据还进⾏了 htmlspecialchars，addslashes 双处
理。
数据获取流程图所示：
现在我们对该程序的数据获取已经有了初步的了解，主要
的数据获取都是通过 post(),get(),request() 三⼤助⼿函
数 来实现的。
2. 注⼊挖掘
在审计的过程中发现程序存在较多的如下所示的代码：
这⾥我将⽬光放在了 DB 类库中封装的 where ⽅法上，
代码如下：
如果此处传⼊的 $where 变量是⼀个索引数组 ，那么就
会进⼊红框代码这⾥，并对值进⾏拼接。
明确⽬标之后，我们就可以开始搜索⽬标了：
⼀番搜索下来发现，要不数据不可控，要不数据会通过
escape_string 函数，并有单引号保护， 达到过滤效
果。
3. 峰回路转
通过多次对 where，select，update 等关键字的搜索，
但是并没有获取到什么突破性的进展， 然后⼜尝试了对
$ GET,$ POST 等原⽣态数据的搜索：
在 apps\home\controller\ParserController.php ⽂件中
的 parserSearchLabel ⽅法中 发现了问题：由于该⽅法
代码较⻓，所以仅截图了关键部分。
可以看到⾸先遍历了 $_POST 数组，然后将键当做了
$where 数组的键。（这是关键）， 不过这⾥我们需要
验证⼀下，键值为 1，这个 1 是整型，还是字符串型，
因为我们要控制输⼊的是索引数组。
是 int 类型，完全符合我们上⾯的需求。
到这⾥也就是说这个 $where3 数组的键，值我们都可以
控制了，不过 $key：只能是 /^[\w - . ]+$/ 这些内容。
$value: 只能是 /^[\x{4e00}-\x{9fa5}\w - . ,\s]+$/u
这些内容。
接着继续往下看代码：
这⾥的 $page 为 true，因为默认值是 true，并且在中途
的重新赋值过程中，我们没办法控制它，所以这 ⾥必定
会执⾏ getLists ⽅法。
Getlists ⽅法代码如下：代码较⻓，只截图了关键部分。
成功的将我们传递的 $where3 数组传递到了 where ⽅
法⾥⾯。
接着执⾏了⼀个 page ⽅法：
这⾥设置了⼀个 sql 属性，后⾯会⽤到。
然后执⾏了最终的 select ⽅法。
其中的 buildsql ⽅法就是结合我们之前设置的属性值来
进⾏拼接成完整的 sql 语句。
这⾥直接将我们前⾯通过链式操作 where,order,page 等
⽅法设置的属性进⾏了替换拼接， ⼜因为我们前⾯分析
的在 where ⽅法中，如果传递进去的是⼀个索引数组的
话，是没有单引号保护的，所以看到这 ⾥就差不多明⽩
了我们成功逃逸了单引号的保护。
总体流程图如下所示：
整个流程⼏乎已经⾛完了，测试效果如下：
可以看到我们输⼊的 aaaaaa 已经成功带⼊到了 sql 语
句中去执⾏，需要注意的是 我们输⼊内容是在⼩ 括号 ()
⾥⾯的。
结合上⾯的 request 助⼿函数的过滤，我们知道输⼊的
数据只能是指定字符：
常规的报错注⼊是不能成功的，如：
⻚⾯并没有像上⾯⼀样报错，⽽是返回了正常的⻚⾯，因
为检测到了⼩括号，直接将我们的数据置为 空值了。
4. 绕过注⼊
因为我们可控的点在 where 后⾯，where 后⾯是可以接
⼦查询的，如图：
所以我们的绕过思路就是通过⼦查询的⽅式来进⾏操作，
因为⼦查询是可以不使⽤括号的，如：
我们的注⼊ payload 并没有被过滤，成功带⼊到了 sql
语句中去，但是因为不能使⽤括号，所以类似 substring,
mid 等截断函数都不能使⽤，⽽且还不能使⽤ =, 等
⼀些⽐较符，怎么获取到准确数据⼜成 了⼀个问题？
这⾥的突破⽬标就放在了对 sql 语句的变形上，⾸先就需
要了解下 sql 的执⾏顺序。
可以看到 where 的执⾏是在 select 之前的，那这怎么利
⽤呢？如下：
可以看到即使是 select ⼀个常量，如果后⾯的 where 条
件不成⽴，也是不会查询到数据的，我们就可以 利⽤
where ⽐ select 来对⽐出数据。
因为不能使⽤ =, 等⽐较符，所以我们就需要找⼀个
东⻄来代替它，并且因为不能使⽤ substr 等截取 函数，
所以就没办法⼀个⼀个的对⽐数据，就必须要找到⼀个可
以让我们⼀个⼀个来对⽐的⽅式。
找到利⽤ regexp 来完美代替，因为 regexp 后⾯能接正
则表达式，并且 . 能代表任意字符， * 代表任意个 数，
那不就刚好符合我们的要求么，利⽤⽅式如下：
将我们需要查询的字段放在 where 处，通过 where 返回
的内容来控制 select 出来的数据。
（注意请使⽤ ^ 限定开头。如：^ad.*）
因为数据不能使⽤引号，所以我们需要将引号内的数据进
⾏ 16 进制编码，效果是⼀样的。
控制了 select 返回的内容，达成的效果如下：
Sql 语句中，⼦查询先执⾏，并且在整个⽗类 SELECT
语句中我们⼦查询的结果处于 where 语句中，并且使⽤
了 AND 连接，也就是说我们⼦查询的结果，同时也控制
着整个 sql 语句的结果，那么就可以⽤来准确的判断数据
了。
5. 本地测试 payload
正确的⻚⾯显示：
错误的⻚⾯显示：
我们的真实数据：
将我们的正则 payload 经过 16 进制编码然后带⼊执⾏，
通过⻚⾯返回内容就可以判断我们的数据是多少 了，最
终达到了绕过过滤进⾏出数据的⽬的。
最终总体流程图可分三步，如图所示：
测试结果证明我们的注⼊漏洞成功利⽤，接下来就是将
payload 映射到项⽬⽹站上去，经过⼤量的 fuzz 后成功
得到 管理员账号密码：
后台 Getshell
漏洞⽂件：core\function\file.php
后缀⽩名单来⾃于 handle_upload 函数的第三个参数，
寻找调⽤ handle_upload 函数的地⽅。
后缀⽩名单来⾃于 upload 函数的第⼆个参数，搜索
upload 函数的调⽤处。
触发⽂件：
apps\home\controller\MemberController.php
继续跟进 config ⽅法。
Config ⽅法就是返回对应的配置项，配置项内容通过
self::loadconfig() 加载。
配置项的⼀部分来⾄于 md5(config).php ⽂件，只要我
们控制了这个⽂件中的 home_upload_ext 选项， 也就
控制了允许上传的后缀⽩名单了。
修改配置⽂件的地⽅。
⽂件：
apps\admin\controller\system\ConfigController.php
将 $_POST 遍历出来的键传递进了 $this-
>moddbconfig ⽅法。
程序会⾸先将我们修改的配置内容更新到 ay_config 数
据表中去，然后再将数据表中的内容写⼊到
md5(config).php ⽂件中，造成我们可以添加任何类型的
后缀⽂件。
Getshell 利⽤
登录后台 -> 全局配置 -> 配置参数 -> ⽴刻提交，使⽤
burp 抓包。
在 POST 数据中添加⼀个：home_upload_ext=php 字
段即可。
成功将其写⼊到⽂件。
设置好了允许的上传⽩名单后，我们就可以通过上传
php 达到 getshell 了。
上传⽂件 exp：upload.html
pbootcms⽂件上传
将 exp 保存到 html ⽂件，修改对应的域名直接上传即
可，⽂件上传证明。
在本地将流程成功⾛了⼀遍后，利⽤到项⽬⽹站上也很顺
利，直接就 getshell 了，成功交差，⼜可以愉快的喝冰
阔 乐了。
总结
整个流程从⽹站获取到指纹，然后找到源码审计，在审计
过程中还是花费了较多时间，主要在前台审计的⼊⼝点寻
找，和绕过过滤注⼊出数据，当时⼀度认为没办法利⽤，
还好当时没放弃，然后慢慢⼀步⼀步的啃，终于还是啃下
来了。
全⽂完
本⽂由 简悦 SimpRead (http://ksria.com/simpread) 优化，⽤以
提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看
(http://ksria.com/simpread/docs/#/词法分析引擎)详细说明