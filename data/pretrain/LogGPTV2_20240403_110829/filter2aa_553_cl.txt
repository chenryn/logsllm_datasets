if ((strlen(addon) + strlen(flower) + 1) 
#define ANSWER "Grant"
#define SIZE 40
char * s_gets(char * st, int n);
int main(void)
{
char try[SIZE];
puts("Who is buried in Grant's tomb?");
s_gets(try, SIZE);
while (try != ANSWER)
{
puts("No, that's wrong. Try again.");
794
s_gets(try, SIZE);
}
puts("That's right!");
return 0;
}
char * s_gets(char * st, int n)
{
char * ret_val;
int i = 0;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
while (st[i] != '\n' && st[i] != '\0')
i++;
if (st[i] == '\n')
st[i] = '\0';
else
while (getchar() != '\n')
continue;
795
}
return ret_val;
}
这个程序看上去没问题，但是运行后却不对劲。ANSWER和try都是指
针，所以try != ANSWER检查的不是两个字符串是否相等，而是这两个字符
串的地址是否相同。因为ANSWE和try储存在不同的位置，所以这两个地址
不可能相同，因此，无论用户输入什么，程序都提示输入不正确。这真让人
沮丧。
该函数要比较的是字符串的内容，不是字符串的地址。读者可以自己设
计一个函数，也可以使用C标准库中的strcmp()函数（用于字符串比较）。该
函数通过比较运算符来比较字符串，就像比较数字一样。如果两个字符串参
数相同，该函数就返回0，否则返回非零值。修改后的版本如程序清单11.21
所示。
程序清单11.21 compare.c程序
/* compare.c -- 该程序可以正常运行 */
#include 
#include   // strcmp()函数的原型在该头文件中
#define ANSWER "Grant"
#define SIZE 40
char * s_gets(char * st, int n);
int main(void)
{
796
char try[SIZE];
puts("Who is buried in Grant's tomb?");
s_gets(try, SIZE);
while (strcmp(try, ANSWER) != 0)
{
puts("No, that's wrong. Try again.");
s_gets(try, SIZE);
}
puts("That's right!");
return 0;
}
char * s_gets(char * st, int n)
{
char * ret_val;
int i = 0;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
while (st[i] != '\n' && st[i] != '\0')
797
i++;
if (st[i] == '\n')
st[i] = '\0';
else
while (getchar() != '\n')
continue;
}
return ret_val;
}
注意
由于非零值都为“真”，所以许多经验丰富的C程序员会把该例main()中
的while循环头写成：while (strcmp(try, ANSWER))
strcmp()函数比较的是字符串，不是整个数组，这是非常好的功能。虽
然数组try占用了40字节，而储存在其中的"Grant"只占用了6字节（还有一个
用来放空字符），strcmp()函数只会比较try中第1个空字符前面的部分。所
以，可以用strcmp()比较储存在不同大小数组中的字符串。
如果用户输入GRANT、grant或Ulysses S.Grant会怎样？程序会告知用户
输入错误。希望程序更友好，必须把所有正确答案的可能性包含其中。这里
可以使用一些小技巧。例如，可以使用#define定义类似GRANT这样的答
案，并编写一个函数把输入的内容都转换成小写，就解决了大小写的问题。
但是，还要考虑一些其他错误的形式，这些留给读者完成。
1.strcmp()的返回值
798
如果strcmp()比较的字符串不同，它会返回什么值？请看程序清单11.22
的程序示例。
程序清单11.22 compback.c程序
/* compback.c -- strcmp()的返回值 */
#include 
#include 
int main(void)
{
printf("strcmp(\"A\", \"A\") is ");
printf("%d\n", strcmp("A", "A"));
printf("strcmp(\"A\", \"B\") is ");
printf("%d\n", strcmp("A", "B"));
printf("strcmp(\"B\", \"A\") is ");
printf("%d\n", strcmp("B", "A"));
printf("strcmp(\"C\", \"A\") is ");
printf("%d\n", strcmp("C", "A"));
printf("strcmp(\"Z\", \"a\") is ");
printf("%d\n", strcmp("Z", "a"));
printf("strcmp(\"apples\", \"apple\") is ");
799
printf("%d\n", strcmp("apples", "apple"));
return 0;
}
在我们的系统中运行该程序，输出如下：
strcmp("A", "A") is 0
strcmp("A", "B") is -1
strcmp("B", "A") is 1
strcmp("C", "A") is 1
strcmp("Z", "a") is -1
strcmp("apples", "apple") is 1
strcmp()比较"A"和本身，返回0；比较"A"和"B"，返回-1；比
较"B"和"A"，返回1。这说明，如果在字母表中第1个字符串位于第2个字符
串前面，strcmp()中就返回负数；反之，strcmp()则返回正数。所以，
strcmp()比较"C"和"A"，返回1。其他系统可能返回2，即两者的ASCII码之
差。ASCII标准规定，在字母表中，如果第1个字符串在第2个字符串前面，
strcmp()返回一个负数；如果两个字符串相同，strcmp()返回0；如果第1个字
符串在第2个字符串后面，strcmp()返回正数。然而，返回的具体值取决于实
现。例如，下面给出在不同实现中的输出，该实现返回两个字符的差值：
strcmp("A", "A") is 0
strcmp("A", "B") is -1
strcmp("B", "A") is 1
strcmp("C", "A") is 2
800
strcmp("Z", "a") is -7
strcmp("apples", "apple") is 115
如果两个字符串开始的几个字符都相同会怎样？一般而言，strcmp()会
依次比较每个字符，直到发现第 1 对不同的字符为止。然后，返回相应的
值。例如，在上面的最后一个例子中，"apples"和"apple"只有最后一对字符
不同（"apples"的s和"apple"的空字符）。由于空字符在ASCII中排第1。字符
s一定在它后面，所以strcmp()返回一个正数。
最后一个例子表明，strcmp()比较所有的字符，不只是字母。所以，与
其说该函数按字母顺序进行比较，不如说是按机器排序序列（machine
collating 
sequence）进行比较，即根据字符的数值进行比较（通常都使用
ASCII值）。在ASCII中，大写字母在小写字母前面，所以strcmp("Z", "a")返
回的是负值。
大多数情况下，strcmp()返回的具体值并不重要，我们只在意该值是0还
是非0（即，比较的两个字符串是否相等）。或者按字母排序字符串，在这
种情况下，需要知道比较的结果是为正、为负还是为0。
注意
strcmp()函数比较的是字符串，不是字符，所以其参数应该是字符串
（如"apples"和"A"），而不是字符（如'A'）。但是，char 类型实际上是整数
类型，所以可以使用关系运算符来比较字符。假设word是储存在char类型数
组中的字符串，ch是char类型的变量，下面的语句都有效：
if (strcmp(word, "quit") == 0) // 使用strcmp()比较字符串
puts("Bye!");
if (ch == 'q') // 使用 == 比较字符
puts("Bye!");
801
尽管如此，不要使用ch或'q'作为strcmp()的参数。
程序清单11.23用strcmp()函数检查程序是否要停止读取输入。
程序清单11.23 quit_chk.c程序
/* quit_chk.c -- 某程序的开始部分 */
#include 
#include 
#define SIZE 80
#define LIM 10
#define STOP "quit"
char * s_gets(char * st, int n);
int main(void)
{
char input[LIM][SIZE];
int ct = 0;
printf("Enter up to %d lines (type quit to quit):\n", LIM);
while (ct < LIM && s_gets(input[ct], SIZE) != NULL &&
strcmp(input[ct], STOP) != 0)
{
ct++;
802
}
printf("%d strings entered\n", ct);
return 0;
}
char * s_gets(char * st, int n)
{
char * ret_val;
int i = 0;
ret_val = fgets(st, n, stdin);
if (ret_val)
{
while (st[i] != '\n' && st[i] != '\0')
i++;
if (st[i] == '\n')
st[i] = '\0';
else
while (getchar() != '\n')
continue;
}
803