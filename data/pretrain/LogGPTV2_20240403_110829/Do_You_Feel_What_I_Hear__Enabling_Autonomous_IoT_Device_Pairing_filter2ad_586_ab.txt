munication range), succeeds in fooling a legitimate device,
LD (inside the house), to accept the pairing as another LD.
M may launch three types of Shamming attacks. First, it
may launch an (1-a) Eavesdropping attack by attempting to
sense (from outside) the events occurring inside. M may
have following three levels of capabilities to launch this
attack. M may have (i) normal-level of resources equipped
with standard off-the-shelf IoT sensors that are comparable
to LDs inside the house. M may also have (ii) medium-
level of resources equipped with higher-end off-the-shelf
consumer electronic devices that are more powerful than (i).
Furthermore, M may have (iii) powerful-level of resources
equipped with asymmetric capabilities (e.g., military-grade
thermal imaging and x-ray vision). As such, we focus on
(i) and (ii) and disregard (iii) because such attackers could
already visualize activities within the home and reveal private
independent of Perceptio and the IoT devices
activities,
deployed within the home. Moreover,
the attacker may
launch other types of Shamming attack such as: (1-b) Signal
Injection attack – by creating events with large noise or
vibration from outside (e.g., using jack-jammer); or (1-c)
Sensor Spooﬁng attack – by injecting spooﬁng signals to
LDs. The attacker launches either of these attacks again in an
attempt to allow both M and LDs to perceive simultaneous
event signals and ultimately succeed in fooling LDs to accept
the pairing with M.
Second, M may launch a man-in-the-middle (MitM) at-
tack on key agreement messages between a pair of LDs by
simply intercepting messages transmitted over the wireless
medium. Such an attacker is able to use a variety of primitives
such as injection, replay, modiﬁcation, and blocking/deleting
messages in the communication channel.
B. Assumptions and Constraints
We assume that the physical boundaries of a house draw
a natural trust boundary for deployed devices, LDs. This as-
sumption reﬂects scenarios in which LDs inside the boundary
are owned and operated by a common entity (e.g., home
owner). However, non-authorized personnel do not have
access to the physical space, hence do not have control over
the IoT devices. We also assume that the family members
and authorized guests are not malicious. For example, if one’s
family members or authorized guests are the only people who
have access to their house, and devices brought into the home
for prolonged periods of time are assumed to be trustworthy,
then a proof of deployment within the house is sufﬁcient to
bootstrap a trusted connection to the IoT network. We view
the introduction of unauthorized devices into the home by
malicious guests as a problem of the homeowner’s physical
security, not as a relevant problem of secure pairing. Hence,
this issue is out of scope for our work.
In addition, we acknowledge that single-family homes are
made up of a number of joined rooms, and the separating
walls actually present numerous physical boundaries within
the home. While sensors within the same home are likely to
perceive some common events due to the common physical
structure, the walls are bound to induce a non-negligible
attenuation factor, with different propagation media caus-
ing distortion and attenuation of mechanical signals. More
speciﬁcally, walls and joints are known to cause material
damping, reﬂection and diffraction of acoustic and vibration
signals [39], [26]. However, since interior walls tend to
provide far less attenuation compared to exterior walls, we
expect a fair amount of signal to propagate between nearby
IoT devices, at least a sufﬁcient amount to allow for IoT
network connectivity, as full pairwise connectivity is likely
unnecessary. As we will discuss later, it may also be possible
to conﬁgure a small number of IoT devices to act as “bridging
devices”, if needed, to facilitate secure pairing across the
internal walls of the home.
In either case, we design Perceptio to rely on the core
observation that sensors outside the home cannot consistently
perceive the relevant activities inside with similar ﬁdelity as
LDs. While our design focuses on single-family detached
housing (comprising 61.5% of U.S. housing [46]), we believe
that future extensions of Perceptio could extend our work
to other multi-tenant attached housing (e.g., apartments or
townhouses) through rigorous engineering of thresholds and
other protocol parameters.
IV. ENTROPY EXTRACTION AND
FINGERPRINTING
We ﬁrst present different sources of shared entropy that
can be used to bootstrap trust among the IoT devices.
Subsequently, we explain how to extract the entropy via our
context ﬁngerprinting mechanism.
A. Entropy Extraction
Analogous to a cryptographic key agreement protocol rely-
ing on a source of entropy to establish (pseudo-)random key
bits, we propose approaches to enable devices to capture and
extract shared entropy from the device’s surroundings, which
is later used to bootstrap trust as discussed in Section V.
One possible approach to help devices extract shared
entropy is to deliberately inject randomness to the devices
within the physical boundary. This may be realized by intro-
ducing a signal injecting device (e.g., device with vibration
motor or speaker) that outputs signals such as vibration or
sound that are encoded random bits. This is analogous to
traditional key establishment schemes that provide “deliber-
ate entropy” [9]. However, this solution poses many practical
concerns regarding cost and usability, as well as scalability
with respect to multiple sensing modalities.
To address the above concerns, we propose an approach
that relies on the inherent randomness of events in a device’s
surroundings to establish a context ﬁngerprint, i.e., “natural
entropy”. We leverage the inherent randomness of events
occurring in a room (e.g., knocking, walking, talking, etc.)
as its source of entropy for a cryptographic protocol. Specif-
ically, Perceptio leverages the fact that it is infeasible for an
839
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:35:39 UTC from IEEE Xplore.  Restrictions apply. 
attacker to predict the precise timing of events within the
physical boundary at a millisecond-scale granularity. Using
the randomness in event timing, the fundamental goal of
the ﬁngerprint generation mechanism is for two devices
to generate “similar” ﬁngerprints only if they meet
the
contextual requirements of the scenario. Unlike traditional
secure pairing protocols, however, the nature of our problem
requires that there is a degree of tolerance to capture the
dissimilarities between sensing devices and their respective
abilities of perception, namely relaxing the requirement that
ﬁngerprints FDeviceA and FDeviceB are numerically equal
to instead satisfy d(FDeviceA , FDeviceB
)  0 only when the
two devices “match”. For now, we leave the speciﬁcs of
ﬁngerprint matching to the later sections and focus on the
ﬁngerprinting mechanism.
B. Context Fingerprinting
We present the ﬁngerprint extraction algorithm and how
multiple event types affect Perceptio context ﬁngerprinting.
We also explain how Perceptio guarantees sufﬁcient entropy
needed for key agreement protocol.
1) Fingerprint Extraction Algorithm: The main idea be-
hind Perceptio’s ﬁngerprinting mechanism is based on three
primary insights: (1) raw signals obtained by different de-
vices and sensor types will have different characteristics; (2)
sensors on different devices will perceive the same event in
roughly the same way; and (3) inter-event timing measured
by different sensors will be roughly the same. When we
combine these three properties, we arrive at an approach that
combines event detection, event clustering, and per-cluster
inter-event timing. Speciﬁcally, each device will generate a
set of ﬁngerprints, one for each cluster, that collectively rep-
resent the observable context. Note that devices do not need
to know what speciﬁc types of events are occurring. From
these core ideas, it is clear that the context ﬁngerprinting
approach is general, and we will further describe speciﬁc
use cases and experimental evaluations in later sections.
To illustrate how the start times and corresponding inter-
event intervals (time between start of subsequent events of
the same type) are used to create the ﬁngerprints, we provide
Figure 3(a). The ﬁgure highlights the fact that the two sensors
do not need to have a common representation of the event
detected (one device labels the clusters with (cid:2) and the other
uses (cid:3)), but the inter-event timings match. Note also that the
event detection does not need to be perfectly synchronized. In
general, each device measures an event sequence S yielding
the inter-event times, iS, and the resulting ﬁngerprint, F , is
computed by concatenating bit-representations of intervals as
FA = {iSn
||...||iS1
||iSn−1
}.
We further take into account that a sensor is capable of
detecting multiple events. Consider one device A with a mi-
crophone and another device B with a geophone. Microphone
will be more sensitive to talking, and geophone will be more
sensitive to vibrations caused by walking, but both will sense
aspects of a running coffee machine, since it vibrates and
emits sound. In this case, the two devices can each detect














(a) Single event commonly observed







(b) Events observed by each sensor
Fig. 3: Figure depicts ﬁngerprint (F ) extraction from starting
point intervals of same event type (i.e., cluster). (a) depicts
how two sensors with different modalities, A and B, rep-
resents commonly observed event differently as (cid:2) and (cid:3),
respectively. Despite differences in representation, inter-event
timings, iA and iB, are similar. (b) depicts how A and B
extracts various ﬁngerprints from many event types.
multiple event types (including but not limited to talking,
walking, and making coffee). Each device will collect its
time-series data, perform a sequence of signal processing
to detect events, cluster the events based on various signal
properties, and create a ﬁngerprint for each event cluster.
The microphone’s event sequence, SA, may involve three
event types – talking, walking, and making coffee – while
the geophone’s event sequence, SB, may involve two event
types – walking and making coffee. From Figure 3(b), we
see that the microphone labeled its three event clusters with
{(cid:2), (cid:4), (cid:5)} and the geophone labeled its two event clusters
with {(cid:3), (cid:6)}. The embedded devices creates sets of per-
cluster ﬁngerprints {F(cid:2), F(cid:3), F(cid:4)} and {F(cid:5), F(cid:6)}, exchange
them with each other, and perform a pairwise search to see
if any of the ﬁngerprints match (Section V).
2) Fingerprint Entropy: Perceptio bootstraps its trust from
the entropy of event timings in the environment. Intervals
between starting points of subsequent event observations are
translated into the bits of the ﬁngerprint. Hence, the entropy
of the ﬁngerprint depends on the number of similar events
observed and the bit resolution of each interval. This is
depicted in (Equation 1). F depicts the concatenation of bit
values of intervals iAk, for k = 1, . . . , n. If the length of F
is less than a minimum acceptable ﬁngerprint length lF , the
ﬁngerprint is discarded due to insufﬁcient entropy, otherwise
F is truncated to lF bits. We explain the requirement of lF
in Appendix C in order to provide sufﬁcient entropy.
,
lF
F
∅,
if |F| ≥ lF
otherwise
(1)
(cid:6)
(cid:5)
⎧⎨
⎩
Ff inal =
840
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:35:39 UTC from IEEE Xplore.  Restrictions apply. 


	 




	


	

	










			



			

 
 


Fig. 4: Figure depicts how incorrect event detection affects
error accumulation when extracting F over tF . B mistakenly
misses two observations, but the resulting FB accumulates
error, analogous to framing error in serial communications.
3) Advantages of Fingerprint Extraction Algorithm: We
present a series of important advantages inherent
to the
Perceptio ﬁngerprint extraction algorithm. First, the devices
are not required to be time synchronized as (1) ﬁngerprint
extraction can be triggered by event occurrences and (2)
ﬁngerprints are generated based on event intervals rather than
speciﬁc event occurrence times. As long as the clock rates
are consistent across the devices, the generated ﬁngerprints
will be similar regardless of time synchronization. Second,
the generated ﬁngerprints are independent of the varying
amplitudes of the captured signal depending on the location
of the sensors relative to the source of the event. This is
also because the algorithm makes use of the starting point
intervals rather than the signals themselves.
The ﬁngerprint algorithm inherently provides robustness
against malicious adversaries launching Shamming attack.
First, the algorithm makes it increasingly difﬁcult for an
attacker to predict events at a ﬁne granularity. While some of
the daily activities in a house seems rather predictable (e.g.,
opening a door around 9 a.m.), it is extremely difﬁcult to
predict it at the millisecond granularity, making it possible
to extract entropy from the context. Second, the algorithm
inherently protects against an attacker’s device capturing
some of the events from outside the physical boundary, as
the attenuation factor of the physical boundary (e.g., walls)
is assumed to be non-trivial. However, capturing only some
of the events by an attacker’s device is insufﬁcient to create a
ﬁngerprint that is similar enough. This is because the errors
accumulate as the attacker’s device misses certain events, as
illustrated in Figure 4. In this example, sensors A inside
and B outside the boundary generate different ﬁngerprints
because of B’s inability to sense everything that A senses.
Even such non-consecutive event misses are detrimental to
the attacker because the error accumulates, analogous to
framing errors in serial communications. Hence, in order for
the attacker’s device to succeed in pretending to be a device
within the physical boundary, it needs to consistently capture
most of the events occurring in the room. We further analyze
this difﬁculty with empirical data in Section VII-B.
V. PROTOCOL DESIGN
Perceptio’s ﬁngerprint veriﬁcation incorporates the ﬁnger-
print, F , into a cryptographic protocol to yield a veriﬁable
Error 
Correction 
Code 



	
 	


!


"
	


Fig. 5: Figure depicts Perceptio protocol overview. Unequal
heterogeneous sensors data from A and B are eventually
converted to numerically equivalent symmetric key.
shared symmetric key between the two parties. Figure 5
depicts the high-level overview of Perceptio protocol. (1)
Initially two devices with disparate sensor modalities captures
numerically unequal time series data streams. (2) While co-
located devices observe similar events, the extracted pair of
ﬁngerprints will not be exactly the same due to sensitivity
and different modalities. (3) We treat such subtle differences
in ﬁngerprints as errors and tolerate them using a fuzzy
commitment scheme [41], [18] building on error correcting
codes. (4) Finally two devices share a master symmetric
key, k, and can subsequently generate shared session key,
kAB. Similar to the related work [51], [32], we design a
Key Strengthening Process, which gradually strengthens the
initially shared (but potentially insecure) key. This is made
possible by gradually increasing the authenticity conﬁdence
over time through repeated execution of the fuzzy commit-
ment using different ﬁngerprints (Steps (1) through (4)), until
a minimum conﬁdence score is attained, inherently making
it extremely difﬁcult for Shamming attacker devices (located
outside of the physical boundary) to sustain the shared key.
Protocol Details. Perceptio’s fuzzy commitment protocol
is composed of four main phases – (1) Initialization: devices
discover each other and determine through exchange of
identiﬁers that they wish to pair with each other; (2) Key
Agreement: devices compute, exchange, and verify context
ﬁngerprints to establish a symmetric key; (3) Key Conﬁrma-
tion: devices verify the correctness of the symmetric key and
increment the conﬁdence score if the key is validated; and
(4) Conﬁdence Score Check: devices either declare pairing
success if the conﬁdence score is above a certain threshold
or repeat from the key agreement phase. These phases are
depicted in Figure 6 and described in more detail as follows.
We intentionally omit the underlying cryptographic protocol
details in this section, but present an in-depth description in
Appendix B.
In the Initialization Phase, device A initiates a broad-
(e.g., device ID
cast message containing its identiﬁer
or pseudonym). A nearby device B that
receives the
message and wishes to “pair” with A responds with a
RQST _T O_P AIR, including its identiﬁer in the request.
If A also wishes to pair with B,
responds with a
RSP _T O_P AIR message, at which point both devices
continue to the Key Agreement Phase. A and B follow
it