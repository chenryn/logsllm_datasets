## PostgreSQL GIN multi-key search 优化       
### 作者         
digoal          
### 日期          
2017-02-03                                    
### 标签                                                                                                                          
PostgreSQL , gin , in , or , multi key , right link scan , skip scan       
----          
## 背景        
PostgreSQL中，有一种GIN索引，被广泛应用于多值类型，例如数组，分词，同时也被应用于模糊查询等领域。    
gin索引，将列(比如数组，全文检索类型)中的值拿出来，再存储到树形结构中（类似B-TREE，键值+heap行号s），对于低频值，会作为posting list直接存在树的gin的叶子节点中，而对于高频值，行号s会存储在另外树结构(posting tree)中，gin的叶子节点中存储的是指向posting tree的pointer。      
![pic](../201612/20161231_01_pic_001.jpg)      
![pic](../201612/20161231_01_pic_002.jpg)      
![pic](../201612/20161231_01_pic_003.jpg)      
GIN本质上是elemet为key的树结构，而value则为"posting tree pointer"或者"posting list"。      
```  
Internally, a GIN index contains a B-tree index constructed over keys,   
where each key is an element of one or more indexed items (a member of an array, for example)   
and where each tuple in a leaf page contains either   
a pointer to a B-tree of heap pointers (a “posting tree”), /  
or a simple list of heap pointers (a “posting list”) when the list is small enough to fit into a single index tuple along with the key value.  
```  
关于GIN的一些介绍，可参考  
[《从难缠的模糊查询聊开 - PostgreSQL独门绝招之一 GIN , GiST , SP-GiST , RUM 索引原理与技术背景》](../201612/20161231_01.md)  
## posting list\tree
gin 索引的叶子节点中存储的为posting list(heap page number, itempointers)，或者posting tree(heap pointers构建的树)。   
那么什么时候使用list什么时候使用tree呢？  
因为posting list是在GIN的叶子节点里面直接存储的，所以指当heap pointers较少，小于TOAST_INDEX_TARGET时（参考自PostgreSQL数据库内核分析，基于8.4的版本编写），使用posting list.  
否则使用posting tree。  
## gin结构
![pic](20170203_01_pic_005.jpg)    
![pic](20170203_01_pic_005.jpg)    
可以使用pageinspect观察gin索引的内容。  
https://www.postgresql.org/docs/devel/static/pageinspect.html  
## 多值搜索例子  
多值查询，例如 where column @> aa and column @> bb and column @> cc and ....    
多值查询是比较常见的需求，例如有一个表存储的是店家售卖的商品ID，每个店家一行记录，其中列A为数组类型，数组中包含了这家店铺售卖的商品ID。  
找出有哪些店铺在售卖热水器（ID=1）、笔记本（ID=2）以及台式机（ID=3）。可以这样把你的需求告诉数据库 where column @> array[1,2,3] 或者 column @> 1 and column @> 2 and column @> 3   
这种查询可以使用GIN索引，由于本质上GIN还是个树结构，所以扫描方法和B-Tree实际上是相差不大的，B-Tree类似的优化手段同样适用。    
## 多值搜索优化  
2014-01-29, 30 提交的几个patch针对多值搜索场景进行了优化  
1\. where column @> aa and column @> bb and column @> cc  
gin 索引扫描方法是bitmap scan，也就是对gin中每一个命中KEY的posting list/tree中存储的CTID(heap行号)排序后，再开始从HEAP扫描结果。  
当找到了一条满足 "某一条件（如column @> aa）" 的记录后，首先对该posting list/tree里面存储的CTIDs进行排序，这个时候就得到了一个有序的ctid列表LIST-A，由于INDEX没有版本信息，所以要从HEAP搜索对应的记录，判断可见性。  
当可见时，这条记录的CTID-A会被用于扫描优化，也就是这个patch的优化点。  
另一个条件（如column @> bb），也会对该posting list/tree里面存储的CTIDs进行排序，这个时候也会得到一个有序的ctid列表LIST-B。  
优化点在于，当LIST-B的ctid  'foo' AND col @> 'bar'",  
as soon as we find the next item that matches the first criteria, we don't  
need to check the second criteria for TIDs smaller the first match. That  
saves a lot of effort, especially if one of the terms is rare, while the  
second occurs very frequently.  
Based on ideas from Alexander Korotkov's fast scan patch.  
```  
当某个条件比较罕见，而另一个条件很常见时，有立竿见影的效果。（也就是说一个有很多行记录满足条件，另一个则只有少量记录满足条件）  
例子(posting list/tree最小的先扫描，所以直接跳过若干ctid的扫描)  
![pic](20170203_01_pic_004.jpg)  
![pic](20170203_01_pic_001.jpg)  
![pic](20170203_01_pic_002.jpg)  
![pic](20170203_01_pic_003.jpg)  
2\. 依旧是multi-key的优化，优化点和1类似，对于所有tid都更小的posting list segments，连decoding都不做。  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=25b1dafab63f465a65c63b26834dc18857f0fa0c  
```  
Further optimize multi-key GIN searches.  
If we're skipping past a certain TID, avoid decoding posting list segments  
that only contain smaller TIDs.  
Extracted from Alexander Korotkov's fast scan patch, heavily modified.  
```  
```  
+       GinPostingList *seg = GinDataLeafPageGetPostingList(page);  
        Size        len = GinDataLeafPageGetPostingListSize(page);  
+       Pointer     endptr = ((Pointer) seg) + len;  
+       GinPostingList *next;  
+  
+       /* Skip to the segment containing advancePast+1 */  
+       if (ItemPointerIsValid(&advancePast))  
+       {  
+           next = GinNextPostingListSegment(seg);  
+           while ((Pointer) next first, &advancePast)  0)  
+           result = ginPostingListDecodeAllSegments(seg, len, nitems);  
+       else  
+       {  
+           result = NULL;  
+           *nitems = 0;  
+       }  
```  
3\. 跳跃扫描优化，指posting tree的扫描优化，当skip的element已经不在当前posting tree的当前page时，返回posting tree的root开始扫描。  
https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=626a120656a75bf4fe64b1d0d83c23cb38d3771a  
```  
Further optimize GIN multi-key searches.  
When skipping over some items in a posting tree, re-find the new location  
by descending the tree from root, rather than walking the right links.  
This can save a lot of I/O.  
Heavily modified from Alexander Korotkov's fast scan patch.  
```  
```  
+   bool        stepright;  
+  
+   if (!BufferIsValid(entry->buffer))  
+   {  
+       entry->isFinished = true;  
+       return;  
+   }  
+  
+   /*  
+    * We have two strategies for finding the correct page: step right from  
+    * the current page, or descend the tree again from the root. If  
+    * advancePast equals the current item, the next matching item should be  
+    * on the next page, so we step right. Otherwise, descend from root.  
+    */  
+   if (ginCompareItemPointers(&entry->curItem, &advancePast) == 0)  
+   {  
+       stepright = true;  
+       LockBuffer(entry->buffer, GIN_SHARE);  
+   }  
+   else  
+   {  
+       GinBtreeStack *stack;  
+  
+       ReleaseBuffer(entry->buffer);  
+  
+       /*  
+        * Set the search key, and find the correct leaf page.  
+        */  
+       if (ItemPointerIsLossyPage(&advancePast))  
+       {  
+           ItemPointerSet(&entry->btree.itemptr,  
+                          GinItemPointerGetBlockNumber(&advancePast) + 1,  
+                          FirstOffsetNumber);  
+       }  
+       else  
+       {  
+           entry->btree.itemptr = advancePast;  
+           entry->btree.itemptr.ip_posid++;  
+       }  
+       entry->btree.fullScan = false;  
+       stack = ginFindLeafPage(&entry->btree, true);  
+  
+       /* we don't need the stack, just the buffer. */  
+       entry->buffer = stack->buffer;  
+       IncrBufferRefCount(entry->buffer);  