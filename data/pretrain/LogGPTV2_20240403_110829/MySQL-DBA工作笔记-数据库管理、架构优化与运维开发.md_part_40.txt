 Query_ID 丨 Duration 
DATETIME
TIME
数据类型
DATE
YEAR
使用 MySQL Profile 定位性能瓶颈
 1丨 0.00018200 丨 show warnings l
MySQL 5.6.4 以前存储需求
一+-
4bytes
8bytes
3bytes
3 bytes
1byte
IQuery
。第一种方式是使用传统的 show profile 命令，第二种
表6-2
4 bytes+fractional seconds storage
5 bytes+fractional seconds storage
3 bytes + fractional seconds storage
自 MySQL 5.6.4 起的存储需求
3bytes
1byte
---
## Page 257
CONTEXTSWITCHS
从使用来说，也是建议按照官方的提示循序渐进，可以使用 performace_schema 相关
除此之外，
100 rows in set,
mysql> show profile cpu for query 2;
可以使用如下的方式来查看 profile 的信息，
2
mysql> show profiles;
然后再次查看，就会看到 query_ID 会得到刚刚运行的语句。
mysql> select count(*)from information_schema.columns;
PAGEFAULTS
BLOCKI0
cleaning up
Status
rows in set, 1 warning
Query_ID |Duration
row in set
count(*）
MEMORY
freeing
closing tables
checking permissions
。。
checking
checking
SWAPS
SOURCE
IPC
CPU
ALL
3077
12
，还有哪些选项呢，如下表6-3所示，可以自由选用。
items
permissions
Ipermissions
0.00018200
permissions
0.06627200
(0.07 sec)
1 warning (0.00 sec)
显示和 Source_function，Source_file，Source_line相关的开销信息
 Duration | CPU_user 丨 CPU_system |
0.000023
0.00000510.000000
 select count(*) from information_schema.columns
show warnings
0.000006
IQuery
0.000014
0.000004
(0.00 sec)
显示交换次数相关的开销信息
显示发送和接收相关开销信息
显示块操作数的相关开销信息
显示页面错误相关开销信息
上下文切换相关开销信息
￥
显示内存相关开销信息
显示CPU 相关开销信息
0.000000
显示所有的开销信息
6-3
+---
0.000000
0.000000
0.000999
0.000000
比如涉及 CPU 的明细信息。
解释
0.000000
0.000000
0.000000
0.000000
0.000000
0.000000
第6章MySQL查询优化|235
十一
---
## Page 258
236丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
是否开启监控；我统计了一下，两个表的默认数据还不少。
的数据字典。
mysql> UPDATE performance_schema.setup_instruments SET ENABLED = 'YES',
setup_consumers 
setup_instruments 1006 rows
2 rows in set (0.00 sec)
按照官方的建议，默认是启用，可以根据需求禁用。
mysql> SELECT * FROM setup_actors;
（2）使用 performance_schema方式
我们按照官方的建议来修改，可以看到修改的不是一行，而是相关的很多行。
表 setup_consumers 描述各种事件，setup_instruments 描述这个数据库下的表名以及
好了，setup_actors 的配置就这样，另外两个表的内容修改也是大同小异。
成功加入后的数据内容如下：
然后加入指定的用户，如下：
row in set (0.o0 sec)
HOST 丨 USER丨ROLE丨ENABLED丨HISTORY
禁用后的内容如下：
HOST
row in set (0.00 sec)
HOST 丨USER 丨 ROLE 丨 ENABLED丨HISTORY
localhost
->
WHERE NAME LIKE'%statement/%';
丨USER丨ROLE丨ENABLED丨
root
1NO
YES
INO
，'root',
YES
YES
一NO
YES
HISTORYI
'%'：
TIMED ='YES
---
## Page 259
NESTING_EVENT_ID=4187;
如此一来应该就明白上面的配置表中所要做的工作是什么意思了。
 mysql> SELECT event_name AS Stage, TRUNCATE(TIMER_WAIT/1000000000000,6) AS
+--
然后到 stage 相关的历史表中查看事件的详细信息，这就是我们期望的性能数据了。
我们通过上面的语句可以得到一个概览，包括对应的事件和执行时间。
I EVENT_ID 丨 Duration 丨 SQL_TEXT
mysql> SELECT EVENT_ID, TRUNCATE(TIMER_WAIT/1000000000000, 6) as Duration,
根据下面的语句查询一个历史表，从表名可以看出是和事件相关的。
运行一下，我们根据这个语句来得到一些详细地统计信息。
mysql> create table test_profile as select * from information_schema. columns
创建一个测试表 test_profile，插入几行数据。
mysql> create database test;
首先创建一个 test 数据库。
（3）模拟测试 profile的使用
好了配置完成，
Rows matched:
Query
mysql> UPDATE performance_schema.setup_instruments SET ENABLED ='YES',
Rows matched:192
row in set (0.0o sec)
->
Y OK，119
WHERE NAME LIKE '%stage/%';
下面我们来简单测试一下怎么用。
rows
 FROM performance_schema.events_stages_history_long WHERE
 Changed:
 Changed:0 Warnings:0
(0.01 sec)
Warnings:0
119
(0.00
Warnings:0
sec)
第6章MySQL查询优化|237
TIMED = 'YES'
limit1,5;
Duration
SQL_TEXT
---
## Page 260
238丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
秒左右。
SQL 语句，占用了大量的临时空间，需要优化。
们分析一些 SQL问题的性能瓶颈还是很有帮助的。
NULLI
NULL
key
2 rows in set, 1 warning (0.00 sec)
|id|
执行计划为：
两个表的数据量都在几千条，其实不算多，但是执行时间却差很多。执行时间为150
create temporary table ^tem_expireClassID`
SQL语句为：
近期收到慢日志监控报警，通过慢日志平台查看，主要瓶颈在于几条创建临时表的
案例6-2：合理评估新特性的使用
整体来看，新特性的功能也是在逐步完善中，而目前两种方式可以互作补充，对于我
15 rows in set (0.01 sec)
order by class_id;
select distinct class_id
stage/sql/cleaning up
 stage/sql/freeing items
stage/sql/System lock
stage/sql/Opening tables
stage/sql/starting
Stage
2
一
and class_id not in(
and state
FROM dic fsm info
SELECT
key_len
Iselect_type
and json_extract (fsm_info,'$.FSM.ETime') > unix_timestamp(now())
NULL
NULL
DEPENDENT
PRIMARY
init
NULL
NULL|2403
：0
ref|rows|filtered| Extra
=0
SUBQUERY
json_extract(fsm_info,'$.FSM.ClassID')
1316
|table
dic_fsm_map_relation | NULL
dic_fsm_info
Durationl
10.000013
0.000062
10.000113
0.000002
0.000025
10.000008
I partitions | type I possible_keys
NULL
IALL
IALL
|plat_id
|NULL
--+--
---
## Page 261
'$.FSM.ClassID') ,json_extract(fsm_info,'$.FSM.ETime') from tgp_db.dic_fsm_info
异，建议对 JSON 的子查询创建临时表。
值为10G。
mysql> show profile cpu for query l; 
Query OK,
mysql> insert into dic_fsm_info3 select
JSON类型的解析效率可以通过profile的对比方式来分析：
73 rows in set (0.23 sec)
and
and
select distinct class_id from tgp_db.dic_fsm_map_relation
重新执行语句，执行时长优化为0.2秒左右。
Records:334
create table dic_fsm_info3 (classid varchar(30),etime varchar(30));
测试步骤如下：
SQL 语句的优化分析发现，基于 JSON 类型的解析差异和字符类型存在较大的性能差
2.SQL层优化
经过系统优化并和业务协调，需要做MySQL 实例重启，已重置为初始大小，设置阈
drwxr-x--
-rw-r-
tota1157854040
[root@hb30-dba-mysql-tgp-124-34data]#11
系统临时表空间占用150G 左右。
executing
Sending data
Status
1．系统层优化
executing
whereetime
FROM dic_fsm_info3
SELECT
class_id not in (
2715
2704
distinct classid
2
mysql mysql
mysql
mysql
mysql mysql
>unix_timestamp(now())
Duplicates:0
mysql
0.000004
0.000002
0.047225
0.047196
158792155136 May
Warnings:
4096 Apr 18
NULL
NULL
NULL
NULL
May 13 14:41
distinct json_extract(fsm_info,
2018 mysql
NULL
NULL
NULL
NULL
ibtmpl
ibdatal
第6章MySQL查询优化丨239