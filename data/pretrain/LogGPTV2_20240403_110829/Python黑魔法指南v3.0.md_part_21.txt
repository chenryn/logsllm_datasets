b.txt 1: hello
b.txt 2: python
这个用法和 glob 模块简直是绝配
import fileinput
import glob
for line in fileinput.input(glob.glob("*.txt")):
if fileinput.isfirstline():
print('-'*20, f'Reading {fileinput.filename()}...', '-'*20)
print(str(fileinput.lineno()) + ': ' + line.upper(), end="")
运行效果如下
$ python demo.py
-------------------- Reading b.txt... --------------------
1: HELLO
2: PYTHON
-------------------- Reading a.txt... --------------------
3: HELLO
4: WORLD
4. 读取的同时备份文件
fileinput.input 有一个 backup 参数，你可以指定备份的后缀名，比如 .bak
import fileinput
with fileinput.input(files=("a.txt",), backup=".bak") as file:
for line in file:
print(f'{fileinput.filename()} {fileinput.lineno()}: {line}', end='')
运行的结果如下，会多出一个 a.txt.bak 文件
$ ls -l a.txt*
-rw-r--r-- 1 MING staff 12 2 27 10:43 a.txt
$ python demo.py
a.txt 1: hello
a.txt 2: world
$ ls -l a.txt*
-rw-r--r-- 1 MING staff 12 2 27 10:43 a.txt
-rw-r--r-- 1 MING staff 42 2 27 10:39 a.txt.bak
5. 标准输出重定向替换
fileinput.input 有一个 inplace 参数，表示是否将标准输出的结果写回文件，默认不取代
请看如下一段测试代码
import fileinput
with fileinput.input(files=("a.txt",), inplace=True) as file:
print("[INFO] task is started...")
for line in file:
print(f'{fileinput.filename()} {fileinput.lineno()}: {line}', end='')
print("[INFO] task is closed...")
运行后，会发现在 for 循环体内的 print 内容会写回到原文件中了。而在 for 循环体外的 print 则没
有变化。
$ cat a.txt
hello
world
$ python demo.py
[INFO] task is started...
[INFO] task is closed...
$ cat a.txt
a.txt 1: hello
a.txt 2: world
利用这个机制，可以很容易的实现文本替换。
import sys
import fileinput
for line in fileinput.input(files=('a.txt', ), inplace=True):
#Windows/DOSLinux
if line[-2:] == "\r\n":
line = line + "\n"
sys.stdout.write(line)
附：如何实现 DOS 和 UNIX 格式互换以供程序测试，使用 vim 输入如下指令即可
DOSUNIX:setfileformat=unix
UNIXDOS:setfileformat=dos
6. 不得不介绍的方法
如果只是想要 fileinput 当做是替代 open 读取文件的工具，那么以上的内容足以满足你的要
求。
fileinput.filenam()
返回当前被读取的文件名。 在第一行被读取之前，返回 None 。
fileinput.fileno()
返回以整数表示的当前文件“文件描述符”。 当未打开文件时（处在第一行和文件之间），返回
-1 。
fileinput.lineno()
返回已被读取的累计行号。 在第一行被读取之前，返回 0 。 在最后一个文件的最后一行被读
取之后，返回该行的行号。
fileinput.filelineno()
返回当前文件中的行号。 在第一行被读取之前，返回 0 。 在最后一个文件的最后一行被读取
之后，返回此文件中该行的行号。
但若要想基于 fileinput 来做一些更加复杂的逻辑，也许你会需要用到如下这几个方法
fileinput.isfirstline() 如果刚读取的行是其所在文件的第一行则返回 True ，否则返回
False 。
fileinput.isstdin() 如果最后读取的行来自 sys.stdin 则返回 True ，否则返回 False 。
fileinput.nextfile() 关闭当前文件以使下次迭代将从下一个文件（如果存在）读取第一行；
不是从该文件读取的行将不会被计入累计行数。 直到下一个文件的第一行被读取之后文件名才
会改变。 在第一行被读取之前，此函数将不会生效；它不能被用来跳过第一个文件。 在最后一
个文件的最后一行被读取之后，此函数将不再生效。
fileinput.close() 关闭序列。
7. 进阶一点的玩法
在 fileinput.input() 中有一个 openhook 的参数，它支持用户传入自定义的对象读取方法。
若你没有传入任何的勾子，fileinput 默认使用的是 open 函数。
fileinput 为我们内置了两种勾子供你使用
1. fileinput.hook_compressed(*filename*, *mode*)
使用 gzip 和 bz2 模块透明地打开 gzip 和 bzip2 压缩的文件（通过扩展名 '.gz' 和 '.bz2'
来识别）。 如果文件扩展名不是 '.gz' 或 '.bz2' ，文件会以正常方式打开（即使用 open()
并且不带任何解压操作）。使用示例:
fi = fileinput.FileInput(openhook=fileinput.hook_compressed)
2. fileinput.hook_encoded(*encoding*, *errors=None*)
返回一个通过 open() 打开每个文件的钩子，使用给定的 encoding 和 errors 来读取文件。使用
示例:
fi = fileinput.FileInput(openhook=fileinput.hook_encoded("utf-8",
"surrogateescape"))
如果你自己的场景比较特殊，以上的三种勾子都不能满足你的要求，你也可以自定义。
这边我举个例子来抛砖引玉下
假如我想要使用 fileinput 来读取网络上的文件，可以这样定义勾子。
1. 先使用 requests 下载文件到本地
2. 再使用 open 去读取它
def online_open(url, mode):
import requests
r = requests.get(url)
filename = url.split("/")[-1]
with open(filename,'w') as f1:
f1.write(r.content.decode("utf-8"))
f2 = open(filename,'r')
return f2
直接将这个函数传给 openhook 即可
import fileinput
file_url = 'https://www.csdn.net/robots.txt'
with fileinput.input(files=(file_url,), openhook=online_open) as file:
for line in file:
print(line, end="")
运行后按预期一样将 CSDN 的 robots 的文件打印了出来
User-agent: *
Disallow: /scripts
Disallow: /public
Disallow: /css/
Disallow: /images/
Disallow: /content/
Disallow: /ui/
Disallow: /js/
Disallow: /scripts/
Disallow: /article_preview.html*
Disallow: /tag/
Disallow: /*?*
Disallow: /link/
Sitemap: https://www.csdn.net/sitemap-aggpage-index.xml
Sitemap: https://www.csdn.net/article/sitemap.txt
8. 列举一些实用案例
案例一：读取一个文件所有行
import fileinput
for line in fileinput.input('data.txt'):
print(line, end="")
案例二：读取多个文件所有行
import fileinput
import glob
for line in fileinput.input(glob.glob("*.txt")):
if fileinput.isfirstline():
print('-'*20, f'Reading {fileinput.filename()}...', '-'*20)
print(str(fileinput.lineno()) + ': ' + line.upper(), end="")
案例三：利用fileinput将CRLF文件转为LF
import sys
import fileinput
for line in fileinput.input(files=('a.txt', ), inplace=True):
#Windows/DOSLinux
if line[-2:] == "\r\n":
line = line + "\n"
sys.stdout.write(line)
案例四：配合 re 做日志分析：取所有含日期的行
#----error.log
aaa
1970-01-01 13:45:30 Error: **** Due to System Disk spacke not enough...
bbb
1970-01-02 10:20:30 Error: **** Due to System Out of Memory...
ccc
#------
import re
import fileinput
import sys
pattern = '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}'
for line in fileinput.input('error.log',backup='.bak',inplace=1):
if re.search(pattern,line):
sys.stdout.write("=> ")
sys.stdout.write(line)
#------
=> 1970-01-01 13:45:30 Error: **** Due to System Disk spacke not enough...
=> 1970-01-02 10:20:30 Error: **** Due to System Out of Memory...
案例五：利用fileinput实现类似于grep的功能
import sys
import re
import fileinput
pattern= re.compile(sys.argv[1])
for line in fileinput.input(sys.argv[2]):
if pattern.match(line):
print(fileinput.filename(), fileinput.filelineno(), line)
$ ./demo.py import.*re *.py
#pyimport re
addressBook.py 2 import re
addressBook1.py 10 import re
addressBook2.py 18 import re
test.py 238 import re
9. 写在最后
fileinput 是 Python 的内置模块，但我相信，不少人对它都是陌生的。今天我把 fileinput 的所有的
用法、功能进行详细的讲解，并列举了一些非常实用的案例，对于理解和使用它可以说完全没有问
题。
fileinput 是对 open 函数的再次封装，在仅需读取数据的场景中， fileinput 显然比 open 做得更专
业、更人性，当然在其他有写操作的复杂场景中，fileinput 就无能为力啦，本身从 fileinput 的命名
上就知道这个模块只专注于输入（读）而不是输出（写）。
7.8 像操作路径一样，操作嵌套字典
在使用前先安装它，要注意的是该模块只能在 Python 3.8+ 中使用
$ python3 -m pip install dpath
下边是一个简单的使用案例
import dpath.util
data = {
"foo": {
"bar": {
"a": 10,
"b": 20,
"c": [],
"d": ['red', 'buggy', 'bumpers'],
}
}
}
print(dpath.util.get(data, "/foo/bar/d"))
使用 [ab] 会把 键为 a 和 b 的都筛选出来
print(dpath.util.search(data, "/foo/bar/[ab]"))
## output: {'foo': {'bar': {'a': 10, 'b': 20}}}
获取所有匹配的键值对的 value 值列表
print(dpath.util.values(data, "/foo/bar/*"))
## output: [10, 20, [], ['red', 'buggy', 'bumpers']]
更多案例，请前往 官方文档 查阅。
7.9 读取文件中任意行的数据
linecache 是 Python 中的一个内置模块。
它允许从任何文件中获取任意行，同时尝试使用缓存进行内部优化，这是一种常见的情况，即从单
个文件读取多行。它被 traceback 模块用来检索包含在格式化回溯中的源代码行。
这是一个简单的例子。
>>> import linecache
>>> linecache.getline('/etc/passwd', 4)
'sys:x:3:3:sys:/dev:/bin/sh\n'
如果你指定的行数超过了文件原有的行数，该函数也不会抛出错误，而是返回空字符串。
>>> import linecache
>>> linecache.getline('/etc/passwd', 10000)
>>>
7.10 让你的装饰器写得更轻松的神库
本篇文章会为你介绍的是一个已经存在十三年，但是依旧不红的库 decorator，好像很少有人知道
他的存在一样。
这个库可以帮你做什么呢 ？
其实很简单，就是可以帮你更方便地写python装饰器代码，更重要的是，它让 Python 中被装饰器
装饰后的方法长得更像装饰前的方法。
本篇文章不会过多的向你介绍装饰器的基本知识，我会默认你知道什么是装饰器，并且懂得如何写
一个简单的装饰器。
不了解装饰器的可以先去阅读我之前写的文章，非常全且详细的介绍了装饰器的各种实现方法。
1. 常规的装饰器
下面这是一个最简单的装饰器示例，在运行 myfunc 函数的前后都会打印一条日志。
def deco(func):
def wrapper(*args, **kw):
print("Ready to run task")
func(*args, **kw)
print("Successful to run task")
return wrapper
@deco
def myfunc():
print("Running the task")
myfunc()
装饰器使用起来，似乎有些高端和魔幻，对于一些重复性的功能，往往我们会封装成一个装饰器函
数。
在定义一个装饰器的时候，我们都需要像上面一样机械性的写一个嵌套的函数，对装饰器原理理解
不深的初学者，往往过段时间就会忘记如何定义装饰器。
有一些比较聪明的同学，会利用 PyCharm 来自动生成装饰器模板
然后要使用的时候，直接敲入 deco 就会生成一个简单的生成器代码，提高编码的准备效率
该图为GIF,请前往 magic.iswbm.com 浏览
2. 使用神库
使用 PyCharm 的 Live Template ，虽然能降低编写装饰器的难度，但却要依赖 PyCharm 这一专业
的代码编辑器。
这里，明哥要教你一个更加简单的方法，使用这个方法呢，你需要先安装一个库 ： decorator ，
使用 pip 可以很轻易地去安装它
$ python3 -m pip install decorator
从库的名称不难看出，这是一个专门用来解决装饰器问题的第三方库。
有了它之后，你会惊奇的发现，以后自己定义的装饰器，就再也不需要写嵌套的函数了
from decorator import decorator
@decorator
def deco(func, *args, **kw):
print("Ready to run task")
func(*args, **kw)
print("Successful to run task")
@deco
def myfunc():
print("Running the task")
myfunc()
deco 作为装饰函数，第一个参数是固定的，都是指被装饰函数，而后面的参数都固定使用 可变参
数 *args 和 **kw 的写法，代码被装饰函数的原参数。
这种写法，不得不说，更加符合直觉，代码的逻辑也更容易理解。
3. 带参数的装饰器可用？
装饰器根据有没有携带参数，可以分为两种
第一种：不带参数，最简单的示例，上面已经举例
def decorator(func):
def wrapper(*args, **kw):
func(*args, **kw)
return wrapper
第二种：带参数，这就相对复杂了，理解起来了也不是那么容易。
def decorator(arg1, arg2):
def wrapper(func):
def deco(*args, **kwargs)
func(*args, **kwargs)
return deco
return wrapper
那么对于需要带参数的装饰器， decorator 是否也一样能很好的支持呢？
下面是一个官方的示例
from decorator import decorator
@decorator
def warn_slow(func, timelimit=60, *args, **kw):
t0 = time.time()
result = func(*args, **kw)
dt = time.time() - t0
if dt > timelimit:
logging.warn('%s took %d seconds', func.__name__, dt)
else:
logging.info('%s took %d seconds', func.__name__, dt)
return result
@warn_slow(timelimit=600) # warn if it takes more than 10 minutes
def run_calculation(tempdir, outdir):