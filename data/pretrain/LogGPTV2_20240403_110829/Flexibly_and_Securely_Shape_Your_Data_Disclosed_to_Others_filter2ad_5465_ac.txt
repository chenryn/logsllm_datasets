of the decoupled encryptions of the shared and identity-associated
components. In practice, the update is generated by the data owner,
and then sent to a cloud for publishing. To validate the complex-
ity, we conduct a set of experiments using different number of
noise. From Fig. 2 and 3, we can see that in our scheme, both the
communication overhead and the computation time overhead for
update generation are constant, thus much less than those by using
the CP-ABE approach, which are linear with the number of noise.
Specifically for 100 pieces of noise, the communication overhead is
around 900KB when using CP-ABE. Meanwhile, the computational
time overhead is around 210s when dealing with 100 noises, mean-
ing that the maximum supported update frequency is one update
per three-and-a-half minutes. As the comparison, FAPC has only
512Byte overhead per update. The computational time overhead is
only 0.04s, yielding an update frequency of 25 per second. Mean-
while, our computational time overhead for update execution is
also constant at about 0.1ms, but slightly heavier than that of the
CP-ABE approach (which is zero since no computational operation
is performed). Though a small amount of computation overhead
is introduced at the cloud side, it is negligible because only one
Figure 2: Update communi-
cation overhead, 16 leaves
per access tree.
Figure 3: Update computa-
tion overhead at DO, 16
leaves per access tree.
multiplication operation in the group GT is performed, which is
computationally efficient. Note that the CP-ABE approach’s over-
head will increase to linear if considering the storage operations
on cloud. Due to the constant communication and computation
overhead, our scheme is scalable to support an even larger number
of users simultaneously.
Decrypt. In this algorithm, three components are decrypted: 1) the
session key component; 2) the noise components after randomized
; 3) the composite of the shared and identity-associate compo-
Aτi
nents. For session key and noise components, we set different leaf
number in an access tree ranging from 10 to 100. According to our
results, the time latency increases linearly from 0.25s to 2.25s for
the decryption of session key, and increases linearly from 0.5s to
4.5s for the decryption of noise components Aτi
. For the decryp-
tion of the composite (Equ. (16) and Equ. (17)), we conduct 1000
independent tests and find the decryption of the composite costs
1.06s in average.
5 RELATED WORK
Fine-grained Access Control. Fine-grained data access control
[10] is to flexibly associate each user’s identity with his/her permit-
ted access targets. As an advancement, attribute based encryption
(ABE) defines a user’s identity by his/her attribute set. Sahai and
Waters first proposed this method [24] to exert access control over
encrypted data. Goyal et al. later extended it to key-based attribute
based encryption (KP-ABE) [15]. Bethencourt et al. extended it to
the ciphertext-based attribute based encryption (CP-ABE) [1]. In
KP-ABE, the user’s secret key is associated with an access policy
over attributes. The user can decrypt the ciphertext if and only if
the attribute set of the ciphertext satisfies the access policy specified
in his/her secret key. In CP-ABE, the ciphertext is associated with
an access policy over attributes and the attribute set generates the
user’s secret/attribute key. The user can decrypt the ciphertext if
and only if his/her attributes set satisfies the access policy speci-
fied in the ciphertext. The data owner is able to decide who have
access to the encrypted data. Multiple ABE approaches have been
proposed to implement secure data outsourcing [12], sharing [21],
and keyword searching [16, 20]. However, these works only study
how to control the access to different data. Directly applying them
into our access-precision problems could generate large overhead
for data owners. Recently, researchers have been making efforts to
combine ABE with homomorphic encryptions, which are most similar
204060801000246810FAPCCP-ABEFAPCOnlineupdatecommunicationdata(byte)Numberofnoises×1055010051151251320406080100050100150200250FAPCCP-ABEOnlineupdatecomputationtimeatDO(s)Numberofnoises204060801000.0350.0400.045FAPCSession 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand164to ours [2, 6, 9, 14, 22, 23]. However, none of their works consider the
homomorphic operation between a shared component and identity-
associated components, where only the composite of the two types
of components is accessible by an authorized user. The enlarged
ciphertext-size is also a problem in most of these works.
Homomorphic Encryptions. In our scheme the process of com-
bining the shared and identity-associated components relies on the
support of homomorphism. Homomorphic encryption has been
extensively studied in privacy-preserving computing domain. Par-
tially homomorphic encryption or fully homomorphic encryption
allows arithmetic operations on the cloud with the operation results
disclosed [7, 13]. Leveraging these cryptographic primitives, we
could evaluate various utility functions on untrusted nodes. Topics
include range search [27], keyword/string search [4, 11], genomic
data search [5], image search [29], clustering [25], and image feature
extraction [17], etc. Researchers even proposed schemes that sup-
port multiple types of functions simultaneously with inter-operable
operators [28], with the assist from the data owner staying on-line.
However, none of these approaches support fine-grained access
control, i.e., how to differentiate data or its usage for different user
identities is not addressed.
6 CONCLUSION
In this work we first present a cryptographic design that combines
fine-grained access control with homomorphism. We design a de-
coupling technique that split the ciphertext into a dynamically
shared component, and multiple identity-associated components.
The user could combine the two components and reveal the cor-
responding composite in plaintext on the fly, iff his/her identity
denoted by the attribute set satisfies the fine-grained access policy
enacted by the data owner. Our algorithms enable data owners to
precisely and efficiently control the form of their data revealed to
the public in a fine-grained manner. We formally prove the security
of our design with game-based approach. We test our algorithms
on a commercial cloud platform and use extensive experiments to
validate its performance in practice.
REFERENCES
[1] John Bethencourt, Amit Sahai, and Brent Waters. 2007. Ciphertext-policy
attribute-based encryption. In IEEE symposium on security and privacy (SP). IEEE,
321–334.
[2] Zvika Brakerski, David Cash, Rotem Tsabary, and Hoeteck Wee. 2016. Targeted
homomorphic attribute-based encryption. In Theory of Cryptography Conference.
Springer, 330–360.
[3] Carole Cadwalladr and Emma Graham-Harrison. 2018. Revealed: 50 million
Facebook profiles harvested for Cambridge Analytica in major data breach. The
Guardian 17 (2018).
[4] Ning Cao, Cong Wang, Ming Li, Kui Ren, and Wenjing Lou. 2014. Privacy-
preserving multi-keyword ranked search over encrypted cloud data. IEEE Trans-
actions on parallel and distributed systems 25, 1 (2014), 222–233.
[5] Ke Cheng, Yantian Hou, and Liangmin Wang. 2018. Secure Similar Sequence
Query on Outsourced Genomic Data. In Proceedings of the 2018 on Asia Conference
on Computer and Communications Security (ASIACCS ’18). ACM, New York, NY,
USA, 237–251. https://doi.org/10.1145/3196494.3196535
[6] Michael Clear and Ciarán McGoldrick. 2015. Multi-identity and Multi-key Leveled
FHE from Learning with Errors. In Advances in Cryptology – CRYPTO 2015,
Rosario Gennaro and Matthew Robshaw (Eds.). Springer Berlin Heidelberg, Berlin,
Heidelberg, 630–656.
[7] Ronald Cramer, Ivan Damgård, and Jesper Nielsen. 2001. Multiparty computation
[8] Angelo De Caro and Vincenzo Iovino. 2011.
from threshold homomorphic encryption. EUROCRYPT 2001 (2001), 280–300.
JPBC: Java pairing based cryp-
tography. In IEEE Symposium on Computers and Communications (ISCC). IEEE,
850–855.
[9] W. Ding, Z. Yan, and R. Deng. 2017. Privacy-Preserving Data Processing with
Flexible Access Control. IEEE Transactions on Dependable and Secure Computing
(2017), 1–1. https://doi.org/10.1109/TDSC.2017.2786247
[10] David F. Ferraiolo, Ravi Sandhu, Serban Gavrila, D. Richard Kuhn, and Ra-
maswamy Chandramouli. 2001. Proposed NIST Standard for Role-based Access
Control. ACM Trans. Inf. Syst. Secur. 4, 3 (Aug. 2001), 224–274.
[11] Benjamin Fuller, Mayank Varia, Arkady Yerukhimovich, Emily Shen, Ariel Ham-
lin, Vijay Gadepally, Richard Shay, John Darby Mitchell, and Robert K Cun-
ningham. 2017. Sok: Cryptographically protected database search. In 2017 IEEE
Symposium on Security and Privacy (SP). IEEE, 172–191.
[12] William C Garrison, Adam Shull, Steven Myers, and Adam J Lee. 2016. On the
practicality of cryptographically enforcing dynamic access control policies in the
cloud. In 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 819–838.
Stanford University.
[13] Craig Gentry. 2009. A fully homomorphic encryption scheme. Ph.D. Dissertation.
[14] Craig Gentry, Amit Sahai, and Brent Waters. 2013. Homomorphic encryption
from learning with errors: Conceptually-simpler, asymptotically-faster, attribute-
based. In Advances in Cryptology–CRYPTO 2013. Springer, 75–92.
[15] Vipul Goyal, Omkant Pandey, Amit Sahai, and Brent Waters. 2006. Attribute-
based encryption for fine-grained access control of encrypted data. In Proceedings
of the 13th ACM conference on Computer and communications security. ACM,
89–98.
[16] Kai He, Jun Guo, Jian Weng, Jiasi Weng, Joseph K Liu, and Xun Yi. 2018. Attribute-
Based Hybrid Boolean Keyword Search over Outsourced Encrypted Data. IEEE
Transactions on Dependable and Secure Computing (2018).
[17] Linzhi Jiang, Chunxiang Xu, Xiaofang Wang, Bo Luo, and Huaqun Wang. 2017.
Secure outsourcing SIFT: Efficient and Privacy-preserving Image Feature Ex-
traction in the Encrypted Domain. IEEE Transactions on Dependable and Secure
Computing (2017).
[18] Taeho Jung, Xiang-Yang Li, Zhiguo Wan, and Meng Wan. 2015. Control cloud data
access privilege and anonymity with fully anonymous attribute-based encryption.
IEEE Transactions on Information Forensics and Security 10, 1 (2015), 190–199.
[19] Jonathan Katz and Yehuda Lindell. 2014. Introduction to modern cryptography,
second edition. CRC press.
[20] H. Li, Y. Yang, T. H. Luan, X. Liang, L. Zhou, and X. S. Shen. 2016. Enabling
Fine-Grained Multi-Keyword Search Supporting Classified Sub-Dictionaries over
Encrypted Cloud Data. IEEE Transactions on Dependable and Secure Computing
13, 3 (May 2016), 312–325. https://doi.org/10.1109/TDSC.2015.2406704
[21] Ming Li, Shucheng Yu, Yao Zheng, Kui Ren, and Wenjing Lou. 2013. Scalable and
secure sharing of personal health records in cloud computing using attribute-
based encryption. IEEE Transactions on Parallel and Distributed Systems 24, 1
(2013), 131–143.
[22] Adriana López-Alt, Eran Tromer, and Vinod Vaikuntanathan. 2012. On-the-
fly Multiparty Computation on the Cloud via Multikey Fully Homomorphic
Encryption. In Proceedings of the Forty-fourth Annual ACM Symposium on Theory
of Computing (STOC ’12). ACM, New York, NY, USA, 1219–1234.
[23] Pratyay Mukherjee and Daniel Wichs. 2016. Two Round Multiparty Computation
via Multi-key FHE. In Proceedings of the 35th Annual International Conference on
Advances in Cryptology — EUROCRYPT 2016 - Volume 9666. Springer-Verlag New
York, Inc., New York, NY, USA, 735–763.
[24] Amit Sahai and Brent Waters. 2005. Fuzzy identity-based encryption. In An-
nual International Conference on the Theory and Applications of Cryptographic
Techniques. Springer, 457–473.
[25] Jaideep Vaidya and Chris Clifton. 2003. Privacy-preserving k-means cluster-
ing over vertically partitioned data. In Proceedings of the ninth ACM SIGKDD
international conference on Knowledge discovery and data mining. ACM, 206–215.
[26] Zhiguo Wan, Jun’e Liu, and Robert H Deng. 2012. HASBE: A Hierarchical
Attribute-Based Solution for Flexible and Scalable Access Control in Cloud Com-
puting. IEEE Transactions on Information Forensics and Security 7, 2 (April 2012),
743–754. https://doi.org/10.1109/TIFS.2011.2172209
[27] B. Wang, M. Li, and H. Wang. 2016. Geometric Range Search on Encrypted
Spatial Data. IEEE Transactions on Information Forensics and Security 11, 4 (2016),
704–719. https://doi.org/10.1109/TIFS.2015.2506145
[28] Wai Kit Wong, Ben Kao, David Wai Lok Cheung, Rongbin Li, and Siuming Yiu.
2014. Secure query processing with data interoperability in a cloud database
environment. In Proceedings of the ACM SIGMOD International Conference on
Management of Data. ACM, 1395–1406.
[29] Z. Xia, X. Wang, L. Zhang, Z. Qin, X. Sun, and K. Ren. 2016. A Privacy-Preserving
and Copy-Deterrence Content-Based Image Retrieval Scheme in Cloud Comput-
ing. IEEE Transactions on Information Forensics and Security 11, 11 (Nov 2016),
2594–2608. https://doi.org/10.1109/TIFS.2016.2590944
[30] Shucheng Yu, Cong Wang, Kui Ren, and Wenjing Lou. 2010. Attribute based data
sharing with attribute revocation. In Proceedings of the 5th ACM Symposium on
Information, Computer and Communications Security. ACM, 261–270.
Session 2B: Advanced Encryption AlgorithmsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand165A COMPLEXITY ANALYSIS
We use N to denote the number of noise, W as the average number
of one user’s attributes, X as the average number of leaves in an
access tree.
Setup algorithm computes a master key mk and a system public
key pk, with computational complexity O (1). The Encrypt′ algo-
rithm yields constant overhead by encrypting the Cm and Pup. In
Encrypt′′ algorithm, the DO chooses a polynomial px at each node
x in each tree Ti,i∈[1, N ] and T∀, which is the dominating overhead
with complexity O (N · X ). Nevertheless, this overhead is one-time
for each session. Note that the tree T∀ is not necessarily more com-
plicated in structure. Optimizing the tree structure could further
reduce the complexity, but is not the focus of this paper. In U pdate
algorithm, the DO just needs to compute and send two ciphertexts
{∆Cm′, Ek (P′
up )} to the cloud. The cloud needs one computation to
generate Cm′. Therefore the update complexity at both the DO and
cloud sides, as well as the communication overhead towards the cloud
are O (1). KeyGenerate algorithm computes attribute key from each
user attribute in Au. Therefore the computational complexity is
O (W ). In Decrypt algorithm, the computational overhead is linear
with the number of leaf nodes in each tree. Therefore, the com-
plexity is O (X ). The complexity analysis is summarized in Table
2.
As the comparison, we compute the complexity by using the
traditional CP-ABE scheme [1]. In this case, the DO encrypts each
piece of noisy data under the corresponding access tree. When
updating the data, the DO needs to encrypt all the updated noisy
data before uploading to the cloud for storage. The cloud directly
replaces the obsolete data with the new one. Therefore the update
complexity by using the traditional CP-ABE approach is O (N · X )
at both the DO and the cloud sides.
Table 2: The computational complexity of the FAPC algo-
rithms
Algorithms
FAPC.Setup
FAPC.Encrypt′
FAPC.Encrypt′′
FAPC.U pdate
FAPC.KeyGenerate
FAPC.Decrypt
Complexity
O (1)
O (1)
O (N · X )
O (1)
O (W )
O (X )
B SECURITY ANALYSIS
In this section we first formally define the security requirements.
Then we will prove that our FAPC scheme is secure through a
reduction chain from a publicly recognized secure scheme.
B.1 Security Proof
1. Correctness
If the user’s attribute set Au satisfies certain access tree Ti , i ∈
[1, N ], he/she will first successfully decrypt the session key k en-
crypted with the traditional CP-ABE scheme, since the access tree
T∀ is satisfied by all authorized users. Then the user is able to obtain
(cid:16)
pk, ETi (Aτi ), SKu
(cid:17) algorithm
Otherwise, the CP-ABE.Decrypt
. Finally by Equ. (17), the user will get the corresponding
Pup and Aτi
noisy data f ′(m, τi ), i ∈ [1, N ].
will output null, even though the user may decrypt k (other au-
thorized users that satisfy other trees Tj , j (cid:44) i). Therefore our
scheme is correct since the user will obtain the authorized noisy
data f ′(m, τi ), i ∈ [1, N ] if and only if his/her attribute set Au
satisfies the corresponding access tree Ti.
2. Scheme Security
Briefly, the proof logic is as follows: we denote PΠ as the problem
to break the security of our scheme (defined in Sec. 3.1), PΩ and
PΩ′ as the problem to break the security of the traditional CP-ABE
scheme and the problem to break the security of the traditional
CP-ABE scheme with multiple encryptions, respectively (in our
paper, multiple encryptions are performed by using the same public
key to encrypt multiple messages under different access trees). We
could prove the security of our FAPC scheme by first reducing PΩ′
to PΠ, then prove the hardness of PΩ′ based on the hardness of PΩ.
Given that PΩ has been proven to be computationally hard [1, 26],
we can prove the hardness of our problem PΠ through the reduction
chain.
Reduction from PΩ′ to PΠ: Here we construct the reduction from