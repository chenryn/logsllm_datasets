To this end, the following conditions must hold.
1) u has a neighbor v′ ∈ V (Ti)
2) (u, v) does not belong to any arborescence yet, e /∈
∪ρ=1..kE(Tρ)
3) u /∈ V (Ti)
4) ∃j, s.t. (u, v′) ∈ E(Tj)
5) v ∈ V (Tj)
6) v′ is not on the path to from v to the root in Tj .
These conditions are sufﬁcient and necessary to obtain valid
arborescences by assigning e to E(Tj) and e′ to E(Ti). When
testing if a set of arcs forms an arborescence, there must be
exactly one directed path from every involved node to the
root. (4) ensures that no arc leaving the root can be added to
5For two arborescences, it is easy to show that this connectivity test sufﬁces
to always ﬁnish the construction on ≥ 2-connected graphs: the remaining
subgraph always contains a rooted spanning tree, i.e., the arborescences can
continue to add arcs until all nodes are in them.
an arborescence, while (3,5,6) ensure that valid paths to the
root exist in both involved arborescences afterwards, i.e., v
and v′ have the necessary outgoing links in the appropriate
arborescence and no cycles can be created by the swap. We
can address the case where e and e′ do not originate from the
same node analogously by adjusting the conditions above.
When adding the lth edge, each arborescence Tj, j < i
contains l nodes and all arborescences Tj, j ≥ i contain
l − 1 nodes. As a consequence, the above procedure can be
implemented with time complexity O(l2δ) on average, for a
graph of maximum degree δ and an implementation of set
operations of O(1) on average. Thus, testing for swapping
possibilities takes more and more time as the arborescences
grow. Observe, however, that this approach is much more
efﬁcient than the naive approach, which checks for all pairs of
edges if the involved graphs Ti, Tj are still valid arborescences
after the swap (O(ln2δ2)).
For many graphs, the extension of the round-robin approach
with the reﬁned connectivity test and swapping arcs ﬁnds an arc-
disjoint arborescence packing with very low depth. However,
there are still cases when the approach reaches a dead-end.
V. DECOMPOSITION COMPARISON
In this section we compare the properties of the approaches
described above in Section IV. We construct arc-disjoint
arborescence packings using (1) a random decomposition, (2)
a greedy decomposition, (3) our round-robin (RR) approach,
and (4) our RR aproach using swapping (RR-swap). We then
compare their (a) success rate, (b) stretch, and (c) running time.
In our evaluation, we use random regular graphs of varying size
and connectivity and the well-connected cores of various ASes.
We refer to [34] for further details concerning reproducibility.
A. Experiments on Random Regular Graphs
Our ﬁrst set of experiments was on random graphs, which
were used for the experimental evaluation of the greedy method
in [14], [22]. More precisely, we generate random k-regular
graphs, sampled in an asymptotically uniform way [35], which
are almost surely k-connected [36, p. 195ff.]. In all generated
graphs, the degree and connectivity matched. We pick seven
different graph sizes (up to 1000 nodes) and six different
connectivities (from 5 to 30) to simulate a wide spectrum
of parameters, where each combination is generated 100
times, picking a random node as the root. We then generate
arborescence packings T of size k with the random, greedy,
RR, and RR-swap method.
Construction success on random regular graphs. As dis-
played in Fig. 4, all three of the random, greedy, and swapping
approaches succeed in 100% of the experiments, whereas the
success rate of the round-robin approach greatly drops, failing
completely beyond ≈ 200 nodes.
Such behavior is to be expected from the random and greedy
approaches, as both utilize sequential constructions, maintaining
connectivity for the following arborescences. The swapping
numbers are more interesting — while the algorithm can fail
in theory, it did not do so over the course of our experiments.
6
e
t
a
R
s
s
e
c
c
u
S
n
o
i
t
c
u
r
t
s
n
o
C
1.00
0.75
0.50
0.25
0.00
Algorithm ● Greedy
RR−swap
Random
RR
Algorithm ● Greedy
RR−swap
Random
RR
●● ● ●
●
●
●
0
250
500
Graph Size
750
1000
h
c
t
e
r
t
S
n
a
d
e
M
i
20
10
●
●
10
●
●
●
20
Connectivity
●
30
Fig. 4. Success rate for the arborescence packings T of the different algorithms
on random k-regular graphs, aiming for k disjoint arborescences in each trial.
Each data point represents the average success rate over 100 attempts.
Fig. 6. Median stretch for the arborescence packings T (100 each) of the
different algorithms in random regular graphs, plotted over the connectivity of
the graphs. The shaded areas display the 5th to 95th percentile.
Algorithm ● Greedy
RR−swap
Random
RR
Algorithm ● Greedy
RR−swap
Random
RR
●
●
80
60
40
20
i
e
m
T
n
a
d
e
M
i
h
c
t
e
r
t
S
n
a
d
e
M
i
75
50
25
0
●
●
0
●
●
●
●
●
250
500
Graph Size
750
1000
0
●● ●
●
0
●
250
500
Graph Size
750
1000
Fig. 5. Median stretch for the arborescence packings T (100 each) of the
different algorithms in random regular graphs, plotted over the number of
nodes of the graphs. The shaded areas display the 5th to 95th percentile.
Fig. 7. Median computation time (seconds) for the arborescence packings T
(100 each) of the different algorithms in random regular graphs, plotted over
the graph size. The (small) shaded areas display the 5th to 95th percentile.
We thus believe that on random regular graphs, our swapping
method nearly always ﬁnds alternatives, with deadlocks being
extremely rare.
Stretch on random regular graphs. The stretch performance
on random regular graphs is shown in the Figs. 5 (plotted over
different graph sizes) and 6 (for various connectivities).
In
both cases, RR and RR-swap perform quite similarly, in Fig. 6
their results overlap. However, RR without swapping fails early
to ﬁnish its constructions. Both algorithms vastly outperform
the random and greedy approaches in the median stretch, as
well as the 5th to 95th percentile, of the arborescences T , in
particular when considering larger graph sizes where, e.g.,
not even the percentiles for RR-swap and greedy overlap.
While the performance of RR-swap stays similar for larger
random regular graphs, it degrades for greedy and random.
As the connectivity increases, the median performance of all
four algorithms improves slightly, but random and greedy still
always stay far behind the RR versions. The situation is similar
for the 5th to 95th percentile, with the exception of the random
method: here, the performance does not change much with
varying connectivity.
Computation time for random regular graphs. The com-
putation time (in seconds) of the arborescence packings T
is shown in the Figs. 7 (different sizes) and 8 (different
connectivities). We used an Intel i5-4570 @3.2 GHz with
8GB ram for the experiments. In general, the median and
5th to 95th percentile values barely differ for each individual
algorithm. For RR and RR-swap, the dominating factor is
picking the next arc, which increases linearly with the number
of arcs. Their computation time overlap, though RR fails to ﬁnd
solutions beyond 200 nodes. In general, RR-swap only needed
to utilize very few swaps to resolve deadlocks, meaning that
the computation time does not change much due to swapping in
most cases. For greedy and random, the dominating factor was
the ongoing connectivity checks, which result in much slower
runtime than RR-swap, the plotted values grow quadratically.
As such, their time values are essentially identical as well, with
random being slightly faster for larger connectivities.
B. Experiments on Well-Connected Cores of ASes
Our second set of experiments was on the well-connected
cores of various ASes, taken from the commonly used Rocket-
fuel data set [37]. We trim the AS graphs s.t. only the well-
connected cores remain, as follows. We ﬁrst contract nodes
of bidirected degree 2 into a single bidirected link. Next, we
remove nodes that have a degree less than 4/5/6/7, contracting
the graph again later. This process is repeated until no more
nodes can be contracted or removed. If the trimming resulted
in less than 20 nodes, we omit them. For each such topology
(ranging from 20 to roughly 700 nodes), we pick 20 different
7
Algorithm ● Greedy
RR−swap
Random
RR
●
●
20
10
●
●
i
e
m
T
n
a
d
e
M
i
●
0
●
10
20
Connectivity
30
Fig. 8. Median computation time (seconds) for the arborescence packings T
(100 each) of the different algorithms in random regular graphs, plotted over
the connectivity. The (small) shaded areas display the 5th to 95th percentile.
1.00
0.75