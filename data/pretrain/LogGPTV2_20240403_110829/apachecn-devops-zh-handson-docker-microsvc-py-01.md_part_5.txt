出于我们的目的，负载平衡器后面的一组旧 web 服务可以添加一个或多个向后兼容的替换服务，而不会中断操作。取代旧服务的新服务将少量添加(可能是一个或两个工作人员)，以合理的配置分割流量，并确保一切都按预期运行。验证后，通过停止向旧服务发送新请求、耗尽它们并只留下新服务器来完全替换它。
如果在快速移动中完成，比如在部署新版本的服务时，这被称为滚动更新，因此工人被一个接一个地替换。
但是对于从旧的整体迁移到新的微服务来说，更慢的速度更明智。一项服务可以在 5%/95%的分割中存活数天，因此任何意外的错误只会出现二十分之一的时间，然后移动到 33/66，然后 50/50，然后 100%迁移。
A highly loaded system with good observability will be able to detect problems very quickly and may only need to wait minutes before proceeding. Most legacy systems will likely not fall into this category, though.
任何能够在反向代理模式下工作的网络服务器，例如 NGINX，都能够作为负载平衡器工作，但是，对于这个任务，最完整的选择可能是 HAProxy([http://www.haproxy.org/](http://www.haproxy.org/))。
HAProxy 专门在高可用性和高需求的情况下充当负载平衡器。它是非常可配置的，并且在必要时接受从 HTTP 到较低级别的 TCP 连接的流量。它还有一个很棒的状态页面，有助于监控通过它的流量，并采取快速行动，如禁用一个失败的工人。
AWS 或谷歌等云提供商也提供集成负载平衡器产品。它们在我们网络的边缘工作非常有趣，因为它们的稳定性使它们非常棒，但是它们不会像 HAProxy 那样容易配置和集成到您的操作系统中。例如，亚马逊网络服务提供的服务被称为**弹性负载平衡**(**ELB**)—[https://aws.amazon.com/elasticloadbalancing/](https://aws.amazon.com/elasticloadbalancing/)。
要从带有 DNS 引用的外部 IP 的传统服务器迁移，并将负载平衡器放在前面，您需要遵循以下步骤:
1.  创建一个新的域名系统来访问当前系统。这将允许您在转换完成时独立引用旧系统。
2.  部署负载平衡器，配置为在旧的 DNS 上为旧系统提供流量服务。这样，通过访问负载平衡器或旧系统，请求将最终在同一个地方传递。只为负载平衡器创建一个域名系统，以允许专门引用它。
3.  测试向负载平衡器发送一个指向旧 DNS 主机的请求是否按预期工作。您可以使用以下`curl`命令发送请求:
```
$ curl --header "Host:old-dns.com" http://loadbalancer/path/
```
4.  将域名系统更改为指向负载平衡器 IP。更改域名注册中心需要时间，因为会涉及缓存。在此期间，无论在哪里收到请求，都会以相同的方式进行处理。将此状态保持一两天，以完全确保每个可能的缓存都已过时并使用新的 IP 值。
5.  旧的 IP 不再使用。服务器可以(也应该)从面向外部的网络中移除，只留下负载平衡器进行连接。任何需要转到旧服务器的请求都可以使用其特定的新 DNS。
请注意，像 HAProxy 这样的负载平衡器可以处理 URL 路径，这意味着它可以将不同的路径指向不同的微服务，这在从单块迁移时非常有用。
Because a load balancer is a single point of failure, you'll need to load balance your load balancer. The easiest way of doing it is creating several identical copies of HAProxy, as you'd do with any other web service, and adding a cloud provider load balancer on top. 
因为 HAProxy 是如此通用和快速，当正确配置时，您可以将其作为一个中心点来重定向您的请求——以真正的微服务方式！
# 保持新旧之间的平衡
计划只是计划，转向微服务是为了内部利益，因为它需要投资，直到外部改进能够以更好的创新速度表现出来。
这意味着开发团队将面临外部压力，需要在公司正常运营的基础上增加新的特性和需求。即使我们让这种迁移更快，也有一个初始阶段，你会移动得更慢。毕竟，改变事情是困难的，你需要克服最初的惰性。
迁移将经历三个粗略的阶段。
# 试点阶段–建立第一对微服务
在看到第一次部署之前，可能需要很多基础架构。这个阶段可能很难克服，也是最需要推动的阶段。一个好的策略是在新的微服务架构中组建一个专门的**爱好者团队**，并允许他们领导开发。他们可以是参与过设计的人，也可以是喜欢新技术的人，或者是与 Docker 和 Kubernetes 合作过辅助项目的人。不是你团队中的每个开发人员都会对改变你的操作方式感到兴奋，但有些人会。利用他们的热情启动项目，并在项目的最初阶段进行管理:
1.  开始**小**—将有足够的工作来建立基础设施。这个阶段的目标是学习工具，建立平台，并调整如何使用新系统。团队合作和协调是很重要的，从一个小团队开始，我们可以测试一些方法，并迭代以确保它们有效。
2.  选择**非关键服务**。在这个阶段，有很多事情可能会出错。确保问题不会对运营或收入产生巨大影响。
3.  一定要保持**向后兼容**。用新的服务替换整体的部分，但不要试图同时改变行为，除非它们是明显的 bug。
如果有一个新特性可以作为新的微服务来实现，那么抓住机会直接采用新的方法，但是要确保额外交付时间的风险，或者 bug，是值得的。
# 整合阶段—稳定迁移到微服务
在初始设置之后，其他团队开始使用微服务方法。这增加了处理容器和新部署的人数，因此初始团队需要为他们提供支持和培训。
Training will be a critical part of the migration project—be sure to allocate enough time. While training events such as workshops and courses can be very useful to kickstart the process, constant support from experienced developers is invaluable. Appoint developers as a point of contact for questions, and tell them explicitly that their job is to ensure that they answer questions and help other developers. Make the supporting team meet up regularly to share concerns and improvements on the knowledge transfer.
传播知识是这个阶段的主要焦点之一，但还有另外两个:澄清和标准化流程，并保持迁移微服务的适当速度。
记录标准将有助于给出清晰和方向。创建检查点来全面明确需求，因此微服务何时可以投入生产是非常清楚的。创建足够的反馈渠道，以确保流程能够得到改进。
在此期间，移民的速度可以加快，因为许多不确定性和问题已经解决；因为开发是并行进行的。您应该尝试以微服务的方式开发任何新功能，尽管可能需要做出妥协。一定要保持动力，按照计划去做。
# 最后阶段——微服务商店
整块建筑已经被拆分，现在的建筑是微服务。可能存在被认为具有较低优先级的整块的剩余部分。任何新功能都是以微服务的方式实现的。
While desirable, it may not be realistic to migrate absolutely everything from the monolith. Some parts may take a long time to migrate because they are especially difficult to migrate or they deal with strange corners of your company. If that's the case, at least clearly define the boundaries and limit their action radius.
在这个阶段，团队可以完全拥有他们的微服务，并开始进行测试和创新，例如改变编程语言。架构也可以改变，微服务可以拆分或合并。有明确的界限来定义微服务的约定需求，但允许其中的自由。
团队将建立良好，过程将顺利进行。留意来自不同团队的好点子，一定要传播出去。
恭喜你！你做到了！
# 摘要
在这一章中，我们看到了传统的整体方法和微服务架构之间的区别，以及微服务如何允许我们跨多个团队扩展开发并改进高质量软件的交付。
我们讨论了从整体服务过渡到微服务过程中面临的主要挑战，以及如何在不同阶段实现变革:分析当前系统、进行测量以验证我们的假设、制定计划以可控方式拆分整体服务，以及成功实现变革的策略。
虽然这一章是以技术不可知的方式编写的，但是我们已经了解了为什么 Docker 容器是实现微服务的一种很好的方式，这将在后面的章节中进行探讨。您现在也知道了使用负载平衡器如何帮助保持向后兼容性，并以不间断的方式部署新服务。
您学习了如何构建一个计划，将一个整体划分为更小的微服务。我们描述了这样一个过程的例子和一个整体的例子，以及它将如何被划分。我们将在接下来的章节中详细了解如何做到这一点。
# 问题
1.  什么是独石？
2.  单片的一些问题是什么？
3.  描述微服务架构。
4.  微服务最重要的属性是什么？
5.  从整体迁移到微服务需要克服的主要挑战是什么？
6.  进行这种迁移的基本步骤是什么？
7.  描述如何使用负载平衡器在不中断系统的情况下从旧服务器迁移到新服务器。
# 进一步阅读
你可以在*架构模式*([https://www . packtpub . com/application-development/Architectural-Patterns](https://www.packtpub.com/application-development/architectural-patterns))和*软件架构师手册*([https://www . packtpub . com/application-development/Software-architects-Handbook](https://www.packtpub.com/application-development/software-architects-handbook))[这两本书里了解更多关于系统架构以及如何划分和构造复杂系统的知识。](https://prod.packtpub.com/application-development/architectural-patterns)