\0
替代文本流派：PHP、Ruby
\&
替代文本流派：Ruby
">\g
替代文本流派：Python
讨论
把整个正则匹配重新插回到替代文本中是向匹配文本之前、之后或者两边，甚至是
在匹配文本的多个副本之间插人新文本的一种比较容易的方式。除非使用的是
配结果。
在Perl中，《$&》实际上是一个变量。在每次正则表达式匹配成功之后，Perl都会把整个
正则匹配保存到这个变量中。
.NET和JavaScript沿用了《S&》的语法来把正则匹配插入到替代文本中。Ruby使用反斜
杠而不是美元符号作为替代文本中的记号，因此会使用《&》来指代整个匹配。
Java、PHP和Python并不存在一个特殊记号来重新插人整个正则匹配，但是它们也允
许把捕获分组匹配到的文本插人到替代文本中，这会在下一小节中进行讲解。整个匹
配则是一个编号为0的隐式捕获分组。对于Python来说，我们需要使用命名捕获的语
法以引用0号分组。在Python中并不支持《O》。
.NET和Ruby也支持第0个捕获分组的语法，但是使用什么语法并不重要。因为不管
什么语法结果都是一样的。
参见
84
第2章
www.TopSage.com
---
## Page 101
2.21把部分的正则匹配添加到替代文本中
问题描述
匹配任意连续的10个数字序列，例如1234567890。并把这个序列转换成格式正确的电
话号码形式，例如（123)456-7890，
解决方案
正则表达式
\b（\d{3})(\d{3})(\{4})\b
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
替代文本
($1)·$2-$3
替代文本流派：.NET、Java、JavaScript、PHP、Perl
替代文本流派：.NET、PHP、Per1
（\1）·\2-\3
替代文本流派：PHP、Python、Ruby
讨论
使用捕获分组的替代文本
实例2.10讲解了在正则表达式中如何使用捕获分组来多次匹配同一个文本。在正则表达
式中，每个捕获分组匹配到的文本在每次成功匹配之后都是可用的。你可以把一些或者
所有捕获分组中的文本一一按照任意顺序，或者甚至可以多次一一一插入到替代文本中。
一些流派，例如Python和Ruby，在正则表达式和替代文本中对于反向引用使用相同的
语法《\1》。其他流派使用的则是Perl中的语法《S1》，也就是说使用的是美元符号而不
是反斜杠。PHP对于两种语法都支持。
在Perl中，《$1》以及其他编号的分组实际上都是变量，它们的值会在每次正则匹配成
功之后进行设置。你可以在代码中的任意地方使用它们，直到下一次正则匹配开
始。.NET、Java、JavaScript和PHP只在替代文本语法中支持《$1>。这些编程语言还
提供了在代码中访问捕获分组的其他方式。这会在第3章中详细解释。
$10及更大分组
本书中的所有正则流派都支持在一个正则表达式中使用最多99个捕获分组。在替代文
正则表达式的基本技巧
85
www.TopSage.com
---
## Page 102
本中，对于《$10》或《10>以及更大的分组则会产生二义性。这些可以被解释为或者是
第10个捕获分组，或者是第一个捕获分组后跟着一个字面上的0。
NET、PHP和Perl允许在数字周围使用花括号来使你的意图更加清晰。《${10}》总是
代表第10个捕获分组，而《${1}0>则总是意味着第一个分组后跟着一个实际的0。
Java和JavaScript对于《S10>使用了更加聪明的处理办法。如果在你的正则表达式中存在
一个两位数的捕获分组的话，那么两个数字都会被用于捕获分组。如果并不存在这么
多捕获分组的话，那么只有第一个数字被用来引用分组，这样第二个数字就被当作了
字面字符。因此《$23》只有在它存在的时候才被认为是第23个捕获分组。否则，它被
当作是第2个捕获分组后面跟着一个字面上的《3》。
.NET、PHP、Perl、Python和Ruby总是把《$10>和《10>当作第10个捕获分组，而不
管它们是否真的存在。如果它不存在的话，那么就会出现引用不存在的分组的行为。
对不存在分组的引用
在这个实例的解决方案中的正则表达式拥有3个捕获分组。如果你在替代文本中输入
了S4>或《4》，那么就添加了一个到不存在的捕获分组的引用。这可能会触发如下的
3种不同的行为。
Java和Python会报错，并且产生一个例外或者返回一个错误消息。因此不要在这些流
派中使用不合法的反向引用。（事实上，你不应当在任何流派中使用不合法的反向引
用。）如果想要添加的是字面上的《$4》或《4》，那么就需要对美元符号或反斜杠进行
转义。实例2.19中对此有详细的解释。
PHP、Perl和Ruby会替换在替代文本中所有的反向引l用，也包括了那些指向不存在的
分组的引用。不存在的分组显然不会捕获任荷文本，因此对它们的引用也就简单地被
替换为空。
最后，.NET和JavaScript则把对不存在分组的引i用当作是替代文本中的字面文本。
所有流派都会替换在正则表达式中存在但是并没有捕获到任何东西的分组。它们都会
被替换为空。
使用命名捕获的解决方案
正则表达式
\b(?\d{3})(?\d{3})(?\d{4})\b
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
\b(？'area'\d{3))(?'exchange'\d{3})(?'number'\d{4})\b
正则选项：无
正则流派：.NET、PCRE 7、Per15.10、Ruby 1.9
86第2章
www.TopSage.com
---
## Page 103
\b(?P\d(3})(?P\d{3})(?P\d{4})\b
正则选项：无
正则流派：PCRE4或更新版本、Per15.10、Python
替代文本
(${area})·${exchange}-$(number)
替代文本流派：、NET
(\g)·\g-\g
替代文本流派：Python
(\k)·\k-\k
替代文本流派：Ruby1.9
(\k'area')\k'exchange'-\k'number
替代文本流派：Ruby1.9
($1)·$2-$3
替代文本流派：.NET、PHP、Per15.10
(${1)▪{2}-{3}
替代文本流派：.NET、PHP、Per15.10
（\1）\2-\3
替代文本流派：PHP、Python、Ruby1.9
支持命名捕获的流派
如果你在正则表达式中使用了命名捕获分组，那么在.NET、Python和Ruby1.9中允许
在替代文本中使用命名反向引用。
在.NET和Python中，命名反向引用的语法与命名和编号的捕获分组是一样的。只需要
在花括号或者尖括号之间指明分组的名称或编号即可。
Ruby在替代文本中使用与其在正则表达式中一样的反向引用语法。在Ruby1.9中的命
名捕获分组中，它的语法是《k》或《k'group'》。之所以提供在尖括号和单引号
之间的两种选择只是出于书写方便的考虑。
Perl5.10和PHP（使用PCRE）在正则表达式中支持命名捕获分组，但是在替代文
本中不提供支持。你可以在替代文本中使用编号的捕获分组来引用正则表达式中的
命名捕获分组。Perl5.10和PCRE会对所有命名和不命名的分组进行编号，顺序是
从左向右。
.NET、Python和Ruby1.9同样充许使用编号来引l用命名分组。然而，.NET对于命名分
组则采用了不同的编号策略，这在实例2.11中已经进行了讲解。在.NET、Python或Ruby
中混合使用分组名称和编号是不推荐的。或者给所有分组都命名，或者所有分组都不
要命名。对于命名分组应该总是使用命名的反向引用。
参见
第1章中的“使用正则表达式查找和替换”以及实例2.9、2.10、2.11和3.15。
正则表达式的基本技巧
87
www.TopSage.com
---
## Page 104
2.22把匹配上下文插入到替代文本中
问题描述
创建一个替代文本，用来把正则表达式匹配替换为正则匹配之前的文本，然后是整个
的目标文本，然后是正则匹配之后的文本。例如，如果在BeforeMatchAfter中找到的是
Match，那么把这个匹配换成BeforeBeforeMatchAfterAfter，因此最终得到的新文本是
BeforeBeforeBeforeMatchAfterAfterAfter。
解决方案
$S、$
替代文本流派：.NET、Perl
.1.1.1
替代文本流派：Ruby
$.S9S.S、S
替代文本流派：JavaScript
讨论
术语上下文（context）指的是正则表达式所应用于的目标文本。总共存在3种上下文：
正则匹配之前的目标文本、正则匹配之后的目标文本以及整个目标文本。在匹配之前
的文本有时候被称作是左上下文（leftcontext），而匹配之后的文本则相应地被称作是
右上下文（rightcontext）。整个自标文本则是左上下文、匹配加上右上下文。
NET和Perl支持使用《$》、《S'》和《$_》来把所有3种形式的上下文插人到替代文本
中。事实上，这些在Perl中是在每次成功的正则匹配之后都会赋值的变量，并且可以
在任意代码中使用，直到遇到下一次匹配尝试。“美元符号+反引号”是左上下文。在
一个U.S.标准键盘上，你可以按键盘左上角1键左边的键来输入反引号。“美元符号+
垂直引I号”是右上下文。垂直引号也就是通常的单引号。在一个U.S.键盘上，它位于
分号和回车键（Enter）之间。“美元符号+下划线”是整个目标文本。
与.NET和Perl类似，JavaScript也使用《$S`》和《S'>来代表左右上下文。然而，JavaScript
并不包含一个记号来插人整个自标文本。你可以自已重构目标文本，把整个正则匹配
使用《$&》添加到左右上下文之间即可。
Ruby通过《》和《》支持左右上下文，并且使用《&》来插人整个正则匹配。与
JavaScript一样，Ruby中也不存在插人整个目标文本的记号。
参见
88第2章
www.TopSage.com
---
## Page 105
第3章
使用正则表达式编程
编程语言和正则流派
本章讲解如何在你所选择的编程语言中使用正则表达式。本章中所给的实例假设你已
经有了一个可用的正则表达式；上一章可以帮助你完成这个任务。现在，你要做的事
情是把这个正则表达式插入到源代码中，从而可以让它完成一些实际的任务。
在本章中，我们会尽最大努力来讲解每段代码是如何工作的，以及为什么会这样。因
为本章所包含的内容中有很多细节，所以从头到尾通读本章会让人觉得有点儿长乏
味。如果你是第一次阅读本书，那么我们建议你先略读本章，以便能够让自己了解本章
能够帮你做些什么。接下来，当想要在代码中使用随后章节中介绍的某个正则表达式的
时候，再返回到本章来，学习到底如何把正则表达式集成到你所选择的编程语言中。
第4～8章会讲解如何使用正则表达式来解决现实世界中的问题。这些章节会关注于正
则表达式自身，而且在这些章节中的许多实例并不会给出任何源代码。为了让你在这
些章节中看到的正则表达式能够工作，可以简单地把它们插人到本章中所给的某个代
码片段中。
因为其他章节所关注的都是正则表达式，所以它们给出的解决方案针对的是具体的正
则表达式流派，而不是针对具体的编程语言。正则流派并不能同编程语言一一对应。
脚本语言往往会拥有它们自已的内嵌正则表达式流派，而其他编程语言则需要依赖于
函数库来提供正则表达式的支持。有些库可以用于多种语言，而有些语言则可以使用
多种正则库。
而第1章中稍后的“多种替代文本流派”一节中则列出了替代文本的流派，它们都会
用于使用正则表达式进行查找和替换的时候。本章中讲解的所有编程语言则会使用上
述的流派之一。
89
www.TopSage.com
---
## Page 106
本章涉及的编程语言
本章会讲到8种编程语言。每个实例都会为所有这8种编程语言给出单独的解答，而
且在许多实例中还会对所有8种语言进行分别的讨论。如果一个技术可以应用于多种
语言，那么我们会在每种语言的讨论中重复讨论该技术。之所以这样做，是因为便于
读者放心地略去不感兴趣的编程语言的相关的讨论部分。
C#
C#使用了Microsoft.NET框架。System.Text.RegularExpressions中的类使用的是
“.NET”正则表达式和替代文本流派。本书涉及C#1.0～C#3.5，或者说是Visual
Studio2002直到2008。
VB.NET
本书使用VB.NET和VisualBasic.NET来指代VisualBasic2002和之后的版本，从
而可以把这些版本同VisualBasic6和之前的版本区分开来。VisualBasic现在也使
正则表达式和替代文本流派。本书会涉及VisualBasic2002直到2008。
Java