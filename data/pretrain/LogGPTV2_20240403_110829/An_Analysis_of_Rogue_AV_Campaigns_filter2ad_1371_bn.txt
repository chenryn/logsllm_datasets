Conference (ACSAC 2008), pp. 77–86 (2008)
2. Bellard, F.: QEMU: A Fast and Portable Dynamic Translator. In: Proceedings of the USENIX
Annual Technical Conference, FREENIX Track, pp. 41–46 (2005)
3. Boehm, H.J., Weiser, M.: Garbage Collection in an Uncooperative Environment. Software,
Practice and Experience (1988)
4. Butler, J.: DKOM (Direct Kernel Object Manipulation),
http://www.blackhat.com/presentations/win-usa-04/
bh-win-04-butler.pdf
5. Carbone, M., Cui, W., Lu, L., Lee, W., Peinado, M., Jiang, X.: Mapping Kernel Objects
to Enable Systematic Integrity Checking. In: Proceedings of the 16th ACM Conference on
Computer and Communications Security, CCS 2009 (2009)
6. Chow, J., Garﬁnkel, T., Chen, P.M.: Decoupling Dynamic Program Analysis from Execution
in Virtual Environments. In: Proceedings of 2008 USENIX Annual Technical Conference,
USENIX 2008 (2008)
7. Cozzie, A., Stratton, F., Xue, H., King, S.T.: Digging For Data Structures. In: Proceedings
of the 8th USENIX Symposium on Operating Systems Design and Implementation (2008)
8. Free Software Foundation: The GNU Compiler Collection, http://gcc.gnu.org/
9. Garﬁnkel, T., Rosenblum, M.: A Virtual Machine Introspection Based Architecture for Intru-
sion Detection. In: Proceedings of the 10th Annual Network and Distributed Systems Security
Symposium, NDSS 2003 (2003)
10. Hoglund, G.: Kernel Object Hooking Rootkits (KOH Rootkits),
http://www.rootkit.com/newsread.php?newsid=501
11. Hund, R., Holz, T., Freiling, F.C.: Return-Oriented Rootkits: Bypassing Kernel Code Integrity
Protection Mechanisms. In: Proceedings for the 18th USENIX Security Symposium (2009)
Kernel Malware Analysis with Un-tampered and Temporal Views
197
12. Lin, Z., Riley, R.D., Xu, D.: Polymorphing Software by Randomizing Data Structure Layout.
In: Flegel, U., Bruschi, D. (eds.) DIMVA 2009. LNCS, vol. 5587, pp. 107–126. Springer,
Heidelberg (2009)
13. MITRE Corp.: Common Vulnerabilities and Exposures, http://cve.mitre.org/
14. Parallels: Parallels, http://www.parallels.com/
15. Petroni, N.L., Fraser, T., Molina, J., Arbaugh, W.A.: Copilot - A Coprocessor-based Ker-
nel Runtime Integrity Monitor. In: Proceedings for the 13th USENIX Security Symposium
(August 2004)
16. Petroni, N.L., Hicks, M.: Automated Detection of Persistent Kernel Control-Flow Attacks.
In: Proceedings of the 14th ACM Conference on Computer and Communications Security,
CCS 2007 (2007)
17. Petroni, N.L., Walters, A., Fraser, T., Arbaugh, W.A.: FATKit: A Framework for the Extrac-
tion and Analysis of Digital Forensic Data from Volatile System Memory. Digital Investiga-
tion Journal 3(4), 197–210 (2006)
18. Petroni, Jr. N.L., Fraser, T., Walters, A., Arbaugh, W.A.: An Architecture for Speciﬁcation-
Based Detection of Semantic Integrity Violations in Kernel Dynamic Data. In: Proceedings
of the 15th Conference on USENIX Security Symposium, USENIX-SS 2006 (2006)
19. Polishchuk, M., Liblit, B., Schulze, C.W.: Dynamic Heap Type Inference for Program Un-
derstanding and Debugging. In: Proceedings of the 34th Annual Symposium on Principles
of Programming Languages. ACM, New York (2007)
20. Rhee, J., Riley, R., Xu, D., Jiang, X.: Defeating Dynamic Data Kernel Rootkit Attacks via
VMM-Based Guest-Transparent Monitoring. In: International Conference on Availability,
Reliability and Security, ARES 2009 (2009)
21. Rhee, J., Xu, D.: LiveDM: Temporal Mapping of Dynamic Kernel Memory for Dynamic
Kernel Malware Analysis and Debugging. Tech. Rep. 2010-02, CERIAS (2010)
22. Riley, R., Jiang, X., Xu, D.: Guest-Transparent Prevention of Kernel Rootkits with VMM-
based Memory Shadowing. In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008.
LNCS, vol. 5230, pp. 1–20. Springer, Heidelberg (2008)
23. Riley, R., Jiang, X., Xu, D.: Multi-Aspect Proﬁling of Kernel Rootkit Behavior. In: Proceed-
ings of the 4th European Conference on Computer Systems (Eurosys 2009) (April 2009)
24. Seshadri, A., Luk, M., Qu, N., Perrig, A.: SecVisor: A Tiny Hypervisor to Provide Lifetime
Kernel Code Integrity for Commodity OSes. In: Proceedings of 21st Symposium on Operating
Systems Principles (SOSP 2007). ACM, New York (2007)
25. Shacham, H.: The Geometry of Innocent Flesh on the Bone: Return-into-libc without Func-
tion Calls (on the x86). In: Proceedings of the 14th ACM Conference on Computer and Com-
munications Security (CCS 2007), pp. 552–561. ACM, New York (2007)
26. Sun Microsystems, Inc: VirtualBox, http://www.virtualbox.org/
27. The Month of Kernel Bugs archive, http://projects.info-pull.com/mokb/
28. US-CERT: Vulnerability Notes Database, http://www.kb.cert.org/vuls/
29. VMware, Inc.: VMware Virtual Machine Technology, http://www.vmware.com/
30. Wei, J., Payne, B.D., Gifﬁn, J., Pu, C.: Soft-Timer Driven Transient Kernel Control Flow
Attacks and Defense. In: Proceedings of the 24th Annual Computer Security Applications
Conference, ACSAC 2008 (December 2008)
31. Xuan, C., Copeland, J.A., Beyah, R.A.: Toward Revealing Kernel Malware Behavior in Vir-
tual Execution Environments. In: Proceedings of 12th International Symposium on Recent
Advances in Intrusion Detection (RAID 2009), pp. 304–325 (2009)
Bait Your Hook: A Novel Detection Technique
for Keyloggers(cid:2)
Stefano Ortolani1, Cristiano Giuﬀrida1, and Bruno Crispo2
1 Vrije Universiteit, De Boelelaan 1081, 1081HV Amsterdam, The Netherlands
2 University of Trento, Via Sommarive 14, 38050 Povo, Trento, Italy
{ortolani,giuffrida}@cs.vu.nl
PI:EMAIL
Abstract. Software keyloggers are a fast growing class of malware of-
ten used to harvest conﬁdential information. One of the main reasons for
this rapid growth is the possibility for unprivileged programs running
in user space to eavesdrop and record all the keystrokes of the users of
the system. Such an ability to run in unprivileged mode facilitates their
implementation and distribution, but, at the same time, allows to un-
derstand and model their behavior in detail. Leveraging this property,
we propose a new detection technique that simulates carefully crafted
keystroke sequences (the bait) in input and observes the behavior of the
keylogger in output to univocally identify it among all the running pro-
cesses. We have prototyped and evaluated this technique with some of
the most common free keyloggers. Experimental results are encouraging
and conﬁrm the viability of our approach in practical scenarios.
Keywords: Keylogger, Malware, Detection, Black-box.
1 Introduction
Keyloggers are implanted on a machine to intentionally monitor the user activ-
ity by logging keystrokes and eventually sending them to a third party. While
they are sometimes used for legitimate purposes (i.e. child computer monitor-
ing), keyloggers are often maliciously exploited by attackers to steal conﬁdential
information. Many credit card numbers and passwords have been stolen us-
ing keyloggers [17,19], which makes them one of the most dangerous types of
spyware. Keyloggers can be implemented as tiny hardware devices or more con-
veniently in software. A software acting as a keylogger can be implemented by
means of two diﬀerent techniques: as a kernel module or as a user-space process.
It is important to notice that, while a kernel keylogger requires a privileged ac-
cess to the system, a user-space keylogger can easily rely on documented sets of
unprivileged API commonly available on modern operating systems. A user can
(cid:2) This work has been partially funded by the EU FP7 IP Project MASTER (contract
no. 216917) and by the PRIN project “Paradigmi di progettazione completamente
decentralizzati per algoritmi autonomici”.
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 198–217, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
Bait Your Hook: A Novel Detection Technique for Keyloggers
199
be easily deceived in installing it, and, since no special permission is required,
the user can erroneously regard it as a harmless piece of software. On the con-
trary, kernel-level keyloggers require a considerable eﬀort and knowledge for an
eﬀective and bug-free implementation. It is therefore no surprise that 95% of the
existing keyloggers are user-space keyloggers [9]. Despite the number of frauds
exploiting keyloggers (i.e. identity theft, password leakage, etc.) has increased
rapidly in recent years, not many eﬀective and eﬃcient solutions have been pro-
posed to address this problem. Preventing keyloggers to be implanted without
limiting the behavior of the user is hardly an option in real-world scenarios.
Traditional defensive mechanisms use ﬁngerprinting or heuristic-based strate-
gies similar to those used to detect viruses and worms. Unfortunately, results
have been poor due to keyloggers’ small footprint and their ability to hide.
In this paper, we propose a new approach to detect keyloggers running as
unprivileged user-space processes. Our technique is entirely implemented in an
unprivileged process. As a result, our solution is portable, unintrusive, easy to
install, and yet very eﬀective. Moreover, the proposed detection technique does
not depend on the internal structure of the keylogger or the particular set of
APIs used to capture the keystrokes. On the contrary, our solution is of gen-
eral applicability, since it is based on behavioral characteristics common to all
the keyloggers. We have prototyped our approach and evaluated it against the
most common free keyloggers [15]. Our approach has proven eﬀective in all the
cases. We have also evaluated the impact of false positives and false negatives in
practical scenarios.
The structure of the paper is as follows. We ﬁrst present our approach and
compare it to analogous solutions (Sec. 2). We then detail the architecture of
our solution in Sec. 3 and evaluate the resulting prototype in Sec. 4. Sec. 5
discusses how a keylogger may counter our approach, and why our underlying
model would still be valid. We conclude with related work in Sec. 6 and ﬁnal
remarks in Sec. 7.
2 Our Approach
Common misuse-based approaches rely on the ability to build a proﬁle of the ma-
licious system activity. Once the proﬁle is available, any behavior that matches
any known malicious patterns is reported as anomalous. However, applying anal-
ogous approaches to malware detection is not a trivial task. Building a malicious
proﬁle requires the ability to identify what a malicious behavior is. Unfortu-
nately, such a behavior is normally triggered by factors that are neither easy to
analyze nor feasible to control. In our approach, we explore the opposite direc-
tion. Rather than targeting the general case, we focus on designing a detection
technique for a very peculiar category of malware, the keyloggers. In contrast
to many other malicious programs, a keylogger has a very well deﬁned behavior
that is easy to model. In its simplest form, a keylogger eavesdrops each keystroke
issued by the user and logs the content on a ﬁle on the disk. In this scenario,
the events triggering the malicious activities are always known in advance and
could be reproduced and controlled to some extent.
200
S. Ortolani, C. Giuﬀrida, and B. Crispo
Our model is based on these observations and investigates the possibility to
isolate the keylogger in a controlled environment, where its behavior is directly
exposed to the detection system. Our technique involves controlling the key-
stroke events that the keylogger receives in input, and constantly monitoring
the I/O activities generated by the keylogger in output. To detect malicious
behavior, we leverage the intuition that the relationship between the input and
output of the controlled environment can be modeled for most keyloggers with
very good approximation. Whatever transformations the keylogger performs, a
characteristic pattern observed in the keystroke events in input shall somehow
be reproduced in the I/O activity in output. When the input and the output are
controlled, there is potential to identify common patterns and trigger a detec-
tion. Furthermore, if we can select and enforce the input pattern preventively, we
can better avoid possible evasion attempts. The key advantage of our approach
is that it is centered around a black-box model that completely ignores the in-
ternals of a keylogger. As a result, our technique can deal with a large number
of keyloggers transparently and has the potential to realize a fully-unprivileged
detection system.
Our approach completely ignores the content of the input and the output data,
and focuses exclusively on their distribution. Limiting the approach to a quan-
titative analysis enables the ability to implement the detection technique with
only unprivileged mechanisms, as we will better illustrate later. The underlying
model adopted, however, presents additional challenges. First, we must carefully
deal with possible data transformations that may introduce quantitative diﬀer-
ences between the input and the output patterns. Second, the technique should
be robust with respect to quantitative similarities identiﬁed in the output pat-
terns of other legitimate system processes. In the following, we discuss how our
approach deals with these challenges.
3 Architecture
Our design is based on ﬁve diﬀerent components as depicted in Fig. 1: injector,
monitor, pattern translator, detector, pattern generator. The operating system
at the bottom deals with the details of I/O and event handling. The OS Do-
main does not expose all the details to the upper levels without using privileged
API calls. As a result, the injector and the monitor operate at another level of
abstraction, the Stream Domain. At this level, keystroke events and the bytes
output by a process appear as a stream emitted at a particular rate.
The task of the injector is to inject a keystroke stream to simulate the behav-
ior of a user typing keystrokes on the keyboard. Similarly, the monitor records a
stream of bytes to constantly capture the output behavior of a particular process.
A stream representation is only concerned with the distribution of keystrokes or
bytes emitted over a given window of observation, without entailing any addi-
tional qualitative information. The injector receives the input stream from the
pattern translator, that acts as bridge between the Stream Domain and the Pat-
tern Domain. Similarly, the monitor delivers the output stream recorded to the
Bait Your Hook: A Novel Detection Technique for Keyloggers
201
(1) Reports the 
I/O pattern
Pattern Generator
Detector
i
n
a
m
o
D
n
r
e
t
t
a
P
i
n
a
m
o
D
m
a
e
r
t
S
i
n
a
m
o
D
S
O
(1a) Provides a 
I/O pattern
(1b) Provides a 
I/O stream
(4b) Reports the 
Pattern Translator
I/O pattern
(4a) Reports the 
I/O stream
Injector
Monitor
(2) Inject a 
keystroke stream
(3) Report the I/O
stream of each process
Operating System
Fig. 1. The prototype’s architecture divided in components and domains
pattern translator for further analysis. In the Pattern Domain, the input stream
and the output stream are both represented in a more abstract form, termed
Abstract Keystroke Pattern (AKP). A pattern in the AKP form is a discretized
and normalized representation of a stream. Adopting a compact and uniform
representation is advantageous for several reasons. First, we allow the pattern
generator to exclusively focus on generating an input pattern that follows a de-
sired distribution of values. Details on how to inject a particular distribution of
keystrokes into the system are oﬄoaded to the pattern translator and the injec-
tor. Second, the same input pattern can be reused to produce and inject several
input streams with diﬀerent properties but following the same underlying distri-
bution. Finally, the ability to reason over abstract representations simpliﬁes the
role of the detector that only receives an input pattern and an output pattern
and makes the ﬁnal decision whether detection should be triggered.
3.1 Injector
The role of the injector is to inject the input stream into the system, mimicking
the behavior of a simulated user at the keyboard. By design, the injector must
satisfy several requirements. First, it should only rely on unprivileged API calls.
Second, it should be capable of injecting keystrokes at variable rates to match the
distribution of the input stream. Finally, the resulting series of keystroke events
produced should be no diﬀerent than those generated by a user at the keyboard.
In other words, no user-space keylogger should be somehow able to distinguish
the two types of events. To address all these issues, we leverage the same tech-
nique employed in automated testing. On Windows-based operating systems,
202
S. Ortolani, C. Giuﬀrida, and B. Crispo
for example, this functionality is provided by the API call SendInput, available
for several versions of the OS. All the other OSes supporting the X11 window
server, the same functionality is available via the API call XTestFakeKeyEvent,
part of the XTEST extension library.
3.2 Monitor
The monitor is responsible to record the output stream of all the running pro-
cesses. As done for the injector, we allow only unprivileged API calls. In addition,
we favor strategies to perform realtime monitoring with minimal overhead and
the best level of resolution possible. Finally, we are interested in application-
level statistics of I/O activities, to avoid dealing with ﬁlesystem-level caching
or other potential nuisances. Fortunately, most modern operating systems pro-
vide unprivileged API calls to access performance counters on a per-process
basis. On all the versions of Windows since Windows NT 4.0, this functionality
is provided by the Windows Management Instrumentation (WMI). In particu-
lar, the performance counters of each process are made available via the class
Win32 Process, that supports an eﬃcient query-based interface. All the per-
formance counters are constantly maintained up-to-date by the kernel. In WMI,
the counter WriteTransferCount contains the total number of bytes the process
wrote since its creation. To construct the output stream of a given process, the
monitor queries this piece of information at regular time intervals, and records
the number of bytes written since the last query every time. The proposed tech-
nique is obviously tailored to Windows-based operating systems. Nonetheless,
we point out that similar strategies can be realized in other OSes. Linux, for
instance, supports analogous performance counters since the 2.6.19 version.
3.3 Pattern Translator
The role of the pattern translator is to transform an AKP into a stream and vice-
versa, given a set of target conﬁguration parameters. A pattern in the AKP form
can be modeled as a sequence of samples originated from a stream sampled with
a uniform time interval. A sample Pi of a pattern P is an abstract representation
of the number of keystrokes emitted during the time interval i. Each sample is
stored in a normalized form rescaled in the interval [0, 1], where 0 and 1 reﬂect
the predeﬁned minimum and maximum number of keystrokes in a given time
interval, respectively. To transform an input pattern into a keystroke stream,
the pattern translator considers the following conﬁguration parameters:
N – the number of samples in the pattern.
T – the constant time interval between any two successive samples.
Kmin – the minimum predeﬁned number of keystrokes per sample allowed.
Kmax – the maximum predeﬁned number of keystrokes per sample allowed.
When transforming an input pattern in the AKP form into an input stream,
the pattern translator generates, for each time interval i, a keystroke stream
Bait Your Hook: A Novel Detection Technique for Keyloggers
203
T
with an average keystroke rate Ri = Pi·(Kmax−Kmin)+Kmin
. The iteration is
repeated N times to cover all the samples in the original pattern. A similar
strategy is adopted when transforming an output byte stream into a pattern
in the AKP form. The pattern translator reuses the same parameters employed
in the generation phase and similarly assigns Pi = Ri·T−Kmin
Kmax−Kmin where Ri is the
average keystroke rate measured in the time interval i.
The translator assumes a correspondence between keystrokes and bytes and
treats them equally as base units of the input and output stream, respectively.