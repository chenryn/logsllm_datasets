push eax
; esp points here
; eax = BFFF0000
; eax = 92D1D294
; eax = 3A797D1A
; eax = BFFF02A0
; esp = BFFF02A0
; eax = 20012020
; eax = 00000000
; eax = D2D2D2D3
; eax = ADA5ADA6
; eax = 48474645
; [BFFF029C] = "EFGH"
; eax = 1B1A1918
; eax = BCBBBABA
; eax = 44434241
; [BFFF0298] = "ABCD"
Fig. 4. Execution trace of a shellcode produced by the “Encode” engine. The shellcode is assumed
to be placed on the stack, and esp initially points to the ﬁrst instruction.
esp
Code Generation
Bootstrap Code
Decryptor
for Block N
Decryptor
for Block 2
Decryptor
for Block 1
Generated
Block 1
Generated
Block 2
Generated
Block N
Code execution
Fig. 5. Schematic representation of the decryption process for the “Encode” engine
it is possible to construct a shellcode that, although it carries an encrypted payload, will
not result to any memory reads from its own memory addresses.
Figure 4 shows the execution trace of a shellcode produced by an adapted version
of the “Encode” shellcode engine [26], developed by Skape according to a previous
description of Riley Eller [11]. In this case, the vulnerable buffer is assumed to be
located on the stack, so esp happens to point to the beginning of the shellcode. In-
structions 0–6 are used to set esp to point far ahead of the decryptor code (in higher
memory addresses). Then, after zeroing eax (instructions 7–8), the decryption process
begins, again using separate decryption blocks (9–12, 13–16, ...) for each four bytes
of the encrypted payload. However, in this case, each decryption block consists only
of arithmetic instructions with a register and an immediate operand, and ends with a
push instruction. Each group of arithmetic instructions calculates the ﬁnal value of
the corresponding payload block, which is then pushed on the stack. In essence, the
data of the encrypted payload are integrated into the immediate values of the arithmetic
instructions, so no actual encrypted data exist in the initial attack vector.
Due to the nature of the stack, the decrypted payload is produced backwards, starting
with its last four bytes. When the ﬁnal decrypted block is pushed on the stack, the ﬂow
of control of the decryptor will “meet” the newly built payload, and the execution will
continue normally, as depicted in Fig. 5. Notice that during the whole execution of the
shellcode, only two memory reads are performed by the two pop instructions, but not
from any of the addresses of the injected code.
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
93
4 Non-self-contained Polymorphic Shellcode Detection
4.1 Approach
Achieving the effective detection of a certain class of polymorphic shellcodes using
network-level emulation requires the fulﬁllment of two basic requirements. First, the
detector should be able to accurately reproduce the execution of the shellcode in exactly
the same way as if it would run within the context of the vulnerable process. Second, it
should be possible to identify a certain execution behavior pattern that can be used as
a strict heuristic for the effective differentiation between the execution of polymorphic
shellcode and random code. In this section, we discuss these two dimensions regarding
the detection of non-self-contained shellcode.
Enabling Non-self-contained Shellcode Execution. As discussed in the previous sec-
tion, some shellcodes rely on a register that happens to contain the base address of the
injected code, instead of using some form of GetPC code. Such shellcodes cannot be
executed properly by the existing network-level emulation approach, since before each
execution, all general purpose registers are set to random values. Thus, the register that
is assumed to hold the base address will not have been set to the correct value, and the
decryption process will fail. Therefore, our ﬁrst aim is to create the necessary condi-
tions that will allow the shellcode to execute correctly. In essence, this requires to set
the register that is used by the shellcode for ﬁnding its base address to the proper value.
The emulator maps each new input stream to an arbitrary memory location in its
virtual memory. Thus, it can know in advance the absolute address of the hypothetical
buffer where the shellcode has been mapped, and as a corollary, the address of the
starting position of each new execution chain. For a given position in the buffer that
corresponds to the beginning of a non-self-contained shellcode, if the base register has
been initialized to point to the address of that position, then the shellcode will execute
correctly. Since we always know the base address of each execution chain, we can
always set the base register to the proper value.
The problem is that it is not possible to know in advance which one of the eight
general purpose registers will be used by the shellcode for getting a reference to its
base address. For instance, it might be ecx or esp, as it was the case in the two ex-
amples of the previous section, or in fact any other register, depending on the exploit.
To address this issue, we initialize all eight general purpose registers to hold the ab-
solute address of the ﬁrst instruction of each execution chain. Except the dependence
on the base register, all other operations of the shellcode will not be affected from such
a setting, since the rest of the code is self-contained. For instance, going back to the
execution trace of Fig. 2, when the emulator begins executing the code starting with the
instruction at address 0x60000000, all registers will have been set to 0x60000000.
Thus, the calculations for setting ecx to point to the encrypted payload will proceed
correctly, and the 9th instruction will indeed decrypt the ﬁrst four bytes of the payload
at address 0x60000171. Note that the stack grows downwards, towards lower mem-
ory addresses, in the opposite direction of code execution, so setting esp to point to
the beginning of the shellcode does not affect its correct execution, e.g. due to push
instructions that write on the stack.
94
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
Behavioral Heuristic. Having achieved the correct execution of non-self-contained
shellcode on the network-level emulator, the next step is to identify a strict behavioral
pattern that will be used as a heuristic for the accurate discrimination between malicious
and benign network data. Such a heuristic should rely to as few assumptions about the
structure of the shellcode as possible, in order to be resilient to evasion attacks, while
at the same time should be speciﬁc enough so as to minimize the risk of false positives.
Considering the execution behavior of the shellcodes presented in the previous sec-
tion, we can make the following observations. First, the absence of any form of GetPC
code precludes the reliance on the presence of speciﬁc instructions as an indication of
non-self contained shellcode execution, as was the case with the call or fstenv
groups of instructions, which are a crucial part of the GetPC code. Indeed, all opera-
tions of both shellcodes could have been implemented in many different ways, using
various combinations of instructions and operands, especially when considering ex-
ploits in which the use of a broader range of byte values is allowed in the attack vector.
Second, we observe that the presence of reads from the memory locations of the input
buffer during the decryption process is not mandatory, as demonstrated in Sec. 3.2, so
this also cannot be used as an indication of non-self-contained shellcode execution.
However, it is still possible to identify some indispensable behavioral characteristics
that are inherent to all such non-self-contained polymorphic shellcodes. An essential
characteristic of polymorphic shellcodes in general is that during execution, they even-
tually unveil their initially concealed payload, and this can only be done by writing
the decrypted payload to some memory area. Therefore, the execution of a polymor-
phic shellcode will unavoidably result to several memory writes to different memory
locations. We refer to such write operations to different memory locations as “unique
writes.” Additionally, after the end of the decryption process, the ﬂow of control will in-
evitably be transferred from the decryptor code to the newly revealed code. This means
that the instruction pointer will move at least once from addresses of the input buffer
that have not been altered before (the code of the decryptor), to addresses that have
already been written during the same execution (the code of the decrypted payload).
For the sake of brevity, we refer to instructions that correspond to code at any memory
address that has been written during the same execution chain as “wx-instructions.”
It is important to note that the decrypted payload may not be written in the same
buffer where the attack vector resides [20]. Furthermore, one could construct a shellcode
in which the unique writes due to the decryption process will be made to non-adjacent
locations. Finally, wx-instructions may be interleaved with non-wx-instructions, e.g.,
due to self-modiﬁcations before the actual decryption, so the instruction pointer may
switch several times between unmodiﬁed and modiﬁed memory locations.
Based on the above observations, we derive the following detection heuristic: if at
the end of an execution chain the emulator has performed W unique writes and has ex-
ecuted X wx-instructions, then the execution chain corresponds to a non-self-contained
polymorphic shellcode. The intuition behind this heuristic is that during the execution
of random code, although there will probably be a lot of random write operations to
arbitrary memory addresses, we speculate that the probability of the control ﬂow to
reach such a modiﬁed memory address during the same execution will be low. In the
following, we elaborate on the details behind this heuristic.
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
95
Unique memory writes. The number of unique writes (W ) in the heuristic serves just as
a hint for the fact that at least a couple of memory locations have been modiﬁed during
the same execution chain—a prerequisite for the existence of any wx-instructions. The
parameter W cannot be considered as a qualitatively strong detection heuristic because
the execution of random code sometimes exhibits a large number of accidental memory
writes. The emulator does not have a view of the vulnerable process’ memory layout,
and thus cannot know which memory addresses are valid and writable, so it blindly
accepts all write operations to any location, and keeps track of the written values in its
own virtual memory. The decryption process of a polymorphic shellcode will too result
to tens or even hundreds of memory writes. This makes the number of unique writes
per se a weak indication for the execution of polymorphic shellcode, since random code
sometimes results to a comparable number of writes.
Although this does not allow us to derive a threshold value for W that would be
reached only during the execution of polymorphic shellcode, we can derive a lower
bound for W , given that any regularly sized encrypted payload will require quite a few
memory writes in order to be decrypted. Considering that the decryption of a 32-byte
payload —a rather conservatively small size for a meaningful payload, as discussed
in Sec. 5.2— would require at least 8 memory writes (using instructions with 4-byte
operands), we set W = 8. This serves as a “negative” heuristic for deciding quickly the
absence of shellcode, which effectively ﬁlters out a lot of execution chains with very
few memory writes that cannot correspond to any functional polymorphic shellcode.
Execution of decrypted instructions. Although the number of unique writes alone can-
not provide a strong positive indication for shellcode detection, we expected that the
number of wx-instructions in random code would be very low, which would allow for
deriving a deﬁnite detection threshold that would never be reached by random code. A
prerequisite for the execution of code from a recently modiﬁed memory address is that
the instruction pointer should ﬁrst be changed to point to that memory address. Intu-
itively, the odds for this to happen in random code are quite low, given that most of the
modiﬁed locations will be dispersed across the whole virtual address space of the emu-
lator, due to the random nature of memory writes. Even if the control ﬂow ever lands on
such a memory address, most probably it will contain just a few valid instructions. In
contrast, self-decrypting shellcode will result to the execution of tens or even hundreds
of wx-instructions, due to the execution of the decrypted payload.
We conducted some preliminary experiments using real network traces and ran-
domly generated data in order to explore the behavior of random code in terms of
wx-instructions. The percentage of instruction chains with more than 8 unique writes
and at least one wx-instruction was in the order of 0.01% for artiﬁcial binary data,
while it was negligible for artiﬁcial ASCII data and real network traces. However, there
were some rare cases of streams in which some execution chain contained as much as
60 wx-instructions. As we discuss in Sec. 5.2, the execution of the decrypted payload
may involve less than 60 wx-instructions, so the range in which an accurate detection
threshold value for X could exist is somehow blurred. Although one could consider the
percentage of these outlying streams as marginal, and thus the false positive ratio as
acceptable, it is still possible to derive a stricter detection heuristic that will allow for
improved resilience to false positives.
96
M. Polychronakis, K.G. Anagnostakis, and E.P. Markatos
01 41 03 40 40 40 40
ecx
eax=0x04030201
(a)
add [ecx+0x3],eax
inc eax
inc eax
inc eax
inc eax
wx-instructions
01 41 03 41 42 43 44
01 41 03 41 42 43 44
add [ecx+0x3],eax
inc ecx
inc edx
inc ebx
inc esp
(b)
add [ecx+0x3],eax
inc ecx
inc edx
inc ebx
inc esp
(c)
Fig. 6. An example of accidental occurrence of wx-instructions in random code
Second-stage execution. The existence of some execution chains with a large number
of wx-instructions in random code is directly related to the initialization of the general
purpose registers before each new execution. Setting all registers to point to the address
of the ﬁrst instruction of the execution chain facilitates the accidental modiﬁcation of
the input stream itself, e.g., in memory addresses farther (in higher memory addresses)
from the starting position of the execution chain. An example of this effect is presented
in Fig. 6. Initially (Fig. 6a), when the ﬂow of control reaches the instruction starting
with byte 01, ecx happens to point to the same instruction, and eax holds the value
0x04030201. The effective address calculation in add [ecx+0x3],eax (Fig. 6b)
involves ecx, and its execution results to a 4-byte memory write within the buffer, right
after the add instruction. This simple self-modiﬁcation causes the execution of four wx-
instructions (Fig. 6c). Note that after the execution of these four wx-instructions, the
ﬂow of control will continue normally with the subsequent instructions in the buffer, so
the same effect may occur multiple times.
In order to mitigate this effect, we introduce the concept of second-stage execution.
For a given position in the input stream, if the execution chain that starts from this posi-
tion results to more than 8 unique writes and has at least 14 wx-instructions,1 then it is
ignored, and the execution from this position is repeated eight times with eight different
register initializations. Each time, only one of the eight general purpose registers is set
to point to the starting location. The remaining seven registers are set to random values.
The rationale is that a non-self-contained shellcode that uses some register for ﬁnd-
ing its base address will run correctly both in the initial execution, when all registers
point to the starting position, as well as in one of the eight subsequent second-stage
executions—the one in which the particular base register being used by the decryp-
tor will have been properly initialized. At the same time, if some random code enters
second-stage execution, the chances for the accidental occurrence of a large number of
wx-instructions in any of the eight new execution chains are signiﬁcantly lower, since
now only one of the eight registers happens to point within the input buffer.
1 As discussed in Sec. 5.2, a functional payload results to at least 14 wx-instructions.
Emulation-Based Detection of Non-self-contained Polymorphic Shellcode
97
0
1
2
3
4
4F 34 25 04 41 42 6E
5
6
dec edi
xor al,0x25
and eax,0x6e424104
add al,0x41
inc ecx
inc edx
outsb
Fig. 7. Example of an illegal instruction path
Although second-stage execution incurs an eight times increase in the emulation
overhead, its is only triggered for a negligible fraction of execution chains, so it does
not incur any noticeable runtime performance degradation. At the same time, it results
to a much lower worst-case number of accidental wx-instructions in benign streams, as
shown in Sec. 5.1, which allows for deriving a clear-cut threshold for X.
4.2 Performance Optimizations
Skipping Illegal Paths. The main reason that network-level emulation is practically
feasible and achieves a decent processing throughput is because, in the most common
case, the execution of benign streams usually terminates early, after the execution of
only a few instructions. Indeed, arbitrary data will result to random code that usually
contains illegal opcodes or privileged instructions, which cannot take part in the exe-
cution of a functional shellcode. Although there exist only a handful of illegal opcodes
in the IA-32 architecture, there exist 25 privileged instructions with one-byte opcodes,
and several others with multi-byte opcodes. In the rest of this section, we use the term
illegal instruction to refer to both privileged and actually illegal instructions.
A major cause of overhead in network-level emulation is that for each input stream,
the emulator starts a new execution from each and every position in the stream. How-
ever, since the occurrence of illegal instructions is common in random code, there may
be some instruction chains which all end to the same illegal instruction. After the ex-
ecution of the ﬁrst of these chains terminates (due to the illegal instruction), then any
subsequent execution chains that share the same ﬁnal instruction path with the ﬁrst one
will deﬁnitely end up to the same illegal instruction, if i) the path does not contain any
control transfer instructions, ii) none of the instructions in the path was the result of
a self-modiﬁcation, and iii) the path does not contain any instruction with a memory
destination operand. The last requirement is necessary in order to avoid potential self-
modiﬁcations on the path that may alter its control ﬂow. Thus, whenever the ﬂow of
control reaches any of the instructions in the path, the execution can stop immediately.
Consider for example the execution chain that starts at position 0 in the example of
Fig. 7. Upon its termination, the emulator backtracks the instruction path and marks
each instruction until any of the above requirements is violated, or the beginning of the
input stream is reached. If any subsequent execution chain reaches a marked instruction,