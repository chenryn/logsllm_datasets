title:All Your Clicks Belong to Me: Investigating Click Interception on
the Web
author:Mingxue Zhang and
Wei Meng and
Sangho Lee and
Byoungyoung Lee and
Xinyu Xing
All Your Clicks Belong to Me: 
Investigating Click Interception on the Web
Mingxue Zhang and Wei Meng, Chinese University of Hong Kong; Sangho Lee,  
Microsoft Research; Byoungyoung Lee, Seoul National University and Purdue University; 
Xinyu Xing, Pennsylvania State University
https://www.usenix.org/conference/usenixsecurity19/presentation/zhang
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.All Your Clicks Belong to Me: Investigating Click Interception on the Web
Mingxue Zhang
Chinese University of Hong Kong
Byoungyoung Lee
Seoul National University
Purdue University
Wei Meng
Chinese University of Hong Kong
Xinyu Xing
Pennsylvania State University
Sangho Lee
Microsoft Research
Abstract
Click is the prominent way that users interact with web appli-
cations. For example, we click hyperlinks to navigate among
different pages on the Web, click form submission buttons
to send data to websites, and click player controls to tune
video playback. Clicks are also critical in online advertising,
which fuels the revenue of billions of websites. Because of
the critical role of clicks in the Web ecosystem, attackers aim
to intercept genuine user clicks to either send malicious com-
mands to another application on behalf of the user or fabricate
realistic ad click traffic. However, existing studies mainly
consider one type of click interceptions in the cross-origin
settings via iframes, i.e., clickjacking. This does not compre-
hensively represent various types of click interceptions that
can be launched by malicious third-party JavaScript code.
In this paper, we therefore systematically investigate the
click interception practices on the Web. We developed a
browser-based analysis framework, OBSERVER, to collect
and analyze click related behaviors. Using OBSERVER, we
identified three different techniques to intercept user clicks
on the Alexa top 250K websites, and detected 437 third-party
scripts that intercepted user clicks on 613 websites, which in
total receive around 43 million visits on a daily basis.
We revealed that some websites collude with third-party
scripts to hijack user clicks for monetization. In particular,
our analysis demonstrated that more than 36% of the 3,251
unique click interception URLs were related to online adver-
tising, which is the primary monetization approach on the
Web. Further, we discovered that users can be exposed to ma-
licious contents such as scamware through click interceptions.
Our research demonstrated that click interception has become
an emerging threat to web users.
1 Introduction
Clicking an HTML element is the primary way that users in-
teract with web applications. We click hyperlinks to navigate
among different documents that are interconnected through
the hyperlinks on the Web. We click form submission buttons
(e.g., the Facebook like button and the Twitter tweet button)
to share data with websites and other people on the Internet.
We click custom user interface components (e.g., the video or
audio player controls) to command various web applications.
Since clicks are important in modern web applications,
attackers have launched UI redressing attacks, namely Click-
jacking [26], to hijack user clicks. In particular, malicious
websites trick a user into clicking components (e.g., a Face-
book like button) different from what the user perceives to
click, in order to send commands on behalf of the user to
the different application they secretly embed (typically in
an iframe tag). To defend against Clickjacking, a rich col-
lection of works has been proposed, which has shown great
performance [1, 3, 10, 15, 29, 30].
Clicks are also critical in one pervasive application—online
display advertising, which powers billions of websites on the
Internet. The publisher websites earn a commission when a
user clicks an advertisement they embed from an online adver-
tising network (ad network in short). However, the ad click-
through rate is usually very low, e.g., around 2% in business-
to-consumer banner ads [18]. To increase revenue that can be
made through ad clicks, malicious websites have used bots
to automatically and massively send fake click traffic to the
ad networks, which is known as ad click fraud [5, 22, 27].
To combat against click frauds, ad networks have developed
advanced techniques to determine the authenticity of click
traffic [2, 6, 9, 38]. Consequently, traditional bot-based ad
click fraud has then become less effective.
Instead of relying on click bots, attackers recently started
to intercept and redirect clicks or page visits from real users
to fabricate realistic ad clicks. First, they infect a victim user’s
computer with malware to either force or trick a user into
submitting an ad click. For example, some “browser redirect
viruses” modify a user’s default search engine to a malicious
one, redirecting the user to an advertiser’s page when the
user clicks a search result [19]. Second, malicious third-party
iframes can automatically redirect users to an ad page. Sim-
ilarly, a user’s current tab may be automatically redirected
USENIX Association
28th USENIX Security Symposium    941
to unintended destinations when a script opens a new tab
upon click. Google recently released a new version of the
Chrome browser to automatically prevent these two types
of automatic redirects [8]. Nevertheless, Chrome still cannot
detect and prevent other possible ways to intercept user clicks,
including but not limited to links modified by third-party
scripts, third-party contents disguised as first-party contents,
and transparent overlays.
A systematic study on click interceptions is necessary to
deeply understand this emerging threat to web users. We aim
to develop a system to automatically detect such practices
on the Web, and investigate what kinds of techniques are ex-
ploited and who are involved in. We first design and develop
a system to detect various techniques employed by JavaScript
to intercept user clicks. Using this system, we then perform
a large-scale measurement with the goal of finding out those
practitioners that hijack links and deceive user clicks. Finally,
we analyze our measurement results, and explore the intents
and consequences hidden behind the click interception prac-
tices.
However, it is challenging to perform the aforementioned
systematic study because of the dynamic and event-driven
characteristics of web applications. First, JavaScript code can
be dynamically loaded. Statically analyzing the HTML source
code is insufficient to cover all scripts that can intercept user
clicks. Second, hyperlinks can be dynamically created and
modified by any scripts. To pinpoint the scripts truly account-
able for the interception, we need to re-engineer a browser to
differentiate the actions of different scripts in runtime. Third,
JavaScript can dynamically bind a URL to user click on an
arbitrary HTML element through event listeners (handlers).
Monitoring hyperlink creation and modification is insufficient
to catch all the click interception practices. Last but not least,
a web page may contain a large number of event handlers that
respond to user clicks. To perform a large-scale comprehen-
sive study, we have to efficiently interact with all those event
handlers.
To tackle the challenges mentioned above, we design our
analysis framework by customizing an open-sourced Web
browser. We first mediate all JavaScript accesses to hyper-
links in a web page in the browser’s renderer. In this way,
we can identify the initiator of the URL associated with each
hyperlink. Second, we monitor the creation and execution
of JavaScript objects so that we can track down the prove-
nance of dynamic inline JavaScript code. Third, we monitor
all event handlers registered on every HTML element and
hook navigation-related JavaScript APIs. With this design,
we can develop an automated approach to monitor the event
handlers accordingly, and determine if an event handler might
be used to hijack user clicks. Last but not least, we derive the
navigation URL without really firing the navigation that is
initiated by a user click. This allows us to interact with all
the click event handlers in an efficient way. It also helps us
understand the reason why a particular user click is of the
interest of a script.
In this work, we developed OBSERVER, a prototype of the
aforementioned analysis framework by customizing and ex-
tending the Chromium browser. Using this framework, we
performed a large-scale data crawling on the Alexa top 250K
websites. We discovered that 437 third-party scripts exhibited
the activities of intercepting user clicks on 613 websites. They
combined receive 43 million visits on a daily basis. In partic-
ular, we observed that some scripts tricked users into clicking
their carefully crafted contents, which were usually disguised
as first-party contents, or intentionally implemented as barely
visible elements covering first-party elements. In addition, we
revealed that these third-party scripts intercepted user clicks
in order to monetize user clicks, which is a new practice we
observe as committing ad click frauds. It is worth noting that
we will make our implementation publicly available.
In summary, this paper makes the following contributions.
• We design and develop OBSERVER, a framework for
studying click interception practices. This facilitates our
capability in automatically detecting a wide range of
click interception cases on various websites.
• We perform a large-scale measurement study to explore
and understand how attackers manipulate web pages in
the wild and thus intercept user clicks.
• We characterize the activities of click interceptions on
top Alexa websites and discover the intents and conse-
quences hidden behind the activities of click intercep-
tion.
2 Related Work
In this section, we introduce existing studies about how at-
tackers intercept user clicks or generate fake clicks, and how
to detect and prevent such attempts. We also explain other
studies analyzing how JavaScript libraries are included and
what their behaviors are.
Clickjacking. Clickjacking, also known as UI redressing, is
a popular attack designed to trick a victim into doing some
tasks on another website the user has logged in, bypassing
the same-origin policy. It is one type of inter-page click in-
terception in which a malicious first-party website tricks a
victim into clicking components in another website loaded
in an iframe. For example, a malicious website could load
a specific page of a target website via an invisible iframe,
and place it on top of a crafted object that looks benign and
independent to the target page. The malicious website then
can trick a victim into unintentionally clicking the target page
via the crafted object to activate some operations defined in
that page. Framebusting [29–31] is a well-known defense
to prevent clickjacking by disallowing untrusted websites to
load specified pages via an iframe. However, framebusting
is incompatible with third-party mashup or other techniques
that demand cross-origin framing [15]. Rather, other studies
942    28th USENIX Security Symposium
USENIX Association
including ClickIDS [3] and InContext [10] rely on human
perception to verify whether a click was intended by a user.
Akhawe et al. [1], however, identified that such mechanisms
are not comprehensive or suffer from an unacceptable usabil-
ity cost.
Our research complements these studies by investigating
new practices of intra-page click interception by third-party
scripts, which intercept a victim’s clicks on components (in-
cluding iframes) within the same page/frame. Further, we
demonstrate that the scripts can use hyperlinks, event listen-
ers, and visual deceptions, to intercept user clicks.
Link Hijacking. Link hijacking is an attack to modify the
destination of links on websites. Nikiforakis et al. [24] inves-
tigated ad-based URL shortening services and discovered link
hijacking by an embedded third-party iframe on a “waiting
page” through automatic tab redirects, which the new Chrome
browser can prevent [8]. Our research demonstrates a new
form of link hijacking that modifies all first-party hyperlinks
before the user even clicks them, and shows our system can
automatically detect them.
Visual Deception. Prior works have studied how visual de-
ceptive contents can be used to intercept user clicks. Duman et
al. [7] studied trick banners (e.g., download buttons) that look
similar to first-party contents, and further proposed a defense
based on a supervised classifier. Rafique et al. [28] discov-
ered overlay ads and invisible banners in free live-streaming
services. Note that our research does not focus on a specific
category of visual deceptive contents or services. Moreover,
OBSERVER is able to distinguish deceptive contents created
by different scripts because of its provenance tracking capa-
bility, allowing us to detect the real culprits.
Click Fraud and Click Spam. Click fraud and click spam
are attempts to raise revenue by submitting fake ad clicks to an
ad network. In traditional click fraud, attackers usually operate
a botnet to fabricate a large number of ad clicks automatically
to an ad network. For example, Pearce et al. [27] estimated
that the ZeroAccess click-fraud botnet incurred advertising
losses on the order of $100,000 per day. In click spam, unethi-
cal content publishers or ad injection attackers [32, 37] either
trick the users into clicking ads, or use malware to click ads on
behalf of the users. Click spams could even lead victim users
to malicious ads [16, 37, 39]. Defenses against click fraud
and click spam mostly aim to distinguish fake clicks from real
clicks by analyzing their patterns [5, 6, 12, 17, 21, 22, 38].
Thus, attackers try to make their click traffic look as benign
as possible. For example, some attacks hijack real human
clicks through rogue DNS servers and redirect them to ad net-
works [2]. We discover that the click interception techniques
we identify have already been used by attackers for generating
realistic click traffic in the wild.
JavaScript Inclusion and Behavior Analysis. Numer-
ous researchers have analyzed the behavior of third-party
JavaScript libraries and how they are included. Nikiforakis et
al. [23] investigated the Alexa Top 10K websites to dis-
cover how many remote JavaScript libraries they include and
from which library hosting servers they include the scripts.
They also assessed the security of those hosting servers to
infer whether they could serve malicious JavaScript code.
Lauinger et al. [14] and Retire.js [25] studied the seman-
tics of JavaScript libraries, by considering whether hosted
JavaScript libraries are outdated or have known vulnerabilities.
Systems like EvilSeed [11] and Revolver [13] focus on detect-
ing malicious web pages using content or code similarities.
Also, ScriptInspector [40] inspects API calls from third-party
scripts to study how they interact with critical resources, such
as the DOM, local storage and network. It is able to detect
suspicious third-party scripts that violate some access poli-
cies. These studies, however, rely on the origin of a JavaScript
script to determine whether it is a first-party or third-party
script. This implies that they cannot properly handle the situa-
tion where a website includes JavaScript libraries from their
subdomains or other domains, and from other CDNs (§4.2).
Furthermore, unlike ScriptInspector, OBSERVER can track the
dynamic creation of JavaScript objects and DOM elements
such that it can accurately attribute hyperlink modifications
and event listener registrations.
3 Overview of OBSERVER
In this section, we present OBSERVER, an analysis framework
that is designed to comprehensively log all potential click-
interception-related events performed by JavaScript code in a
best-effort manner. OBSERVER focuses on three fundamental
actions that JavaScript code might rely on to intercept clicks:
1) modifying an existing hyperlink in a page; 2) creating a new
hyperlink in a page; and 3) registering an event handler to an
HTML element to hook a user click. Whenever OBSERVER
identifies any of such actions, it tags the corresponding ele-
ment with the unique identifier of the script that initiates the
action. Further, OBSERVER logs the reaction (i.e., navigation)
of a page after it intentionally clicks a hyperlink or an element
associated with an event handler in the page, to know the
URLs to which a click interceptor aims to lead a user.
In the following, we first demonstrate our threat model
(§3.1). We then describe how OBSERVER monitors the
JavaScript accesses to HTML anchor elements (§3.2), and
how it tracks the dynamic creation of HTML anchor elements
and HTML script elements (§3.3). Further, we show how
OBSERVER hooks several APIs to catch navigation-related
JavaScript event listeners (§3.4). Finally, we detail our proto-
type implementation based on the Chromium browser (§3.5).
3.1 Threat Model
In our threat model, we consider only click interception activ-
ities performed by third-party scripts as malicious. Although
first-party websites might exhibit similar activities to intercept
USENIX Association