# All Your Clicks Belong to Me: Investigating Click Interception on the Web

**Authors:**  
Mingxue Zhang, Wei Meng (Chinese University of Hong Kong)  
Sangho Lee (Microsoft Research)  
Byoungyoung Lee (Seoul National University, Purdue University)  
Xinyu Xing (Pennsylvania State University)

**Publication:**  
Proceedings of the 28th USENIX Security Symposium, August 14â€“16, 2019, Santa Clara, CA, USA.  
[Link to Paper](https://www.usenix.org/conference/usenixsecurity19/presentation/zhang)

**Abstract:**

Clicks are a fundamental interaction method in web applications, enabling users to navigate pages, submit forms, and control media. They are also crucial for online advertising, which generates significant revenue for many websites. Attackers often aim to intercept genuine user clicks to send malicious commands or fabricate ad click traffic. However, existing studies primarily focus on cross-origin clickjacking via iframes, overlooking other interception techniques. 

In this paper, we present a comprehensive investigation of click interception practices on the web. We developed OBSERVER, a browser-based analysis framework, to collect and analyze click-related behaviors. Using OBSERVER, we identified three distinct techniques for intercepting user clicks on the Alexa top 250K websites. We detected 437 third-party scripts that intercepted user clicks on 613 websites, collectively receiving approximately 43 million daily visits.

Our findings reveal that some websites collude with third-party scripts to hijack user clicks for monetization. Over 36% of the 3,251 unique click interception URLs were related to online advertising. Additionally, we found that click interceptions can expose users to malicious content such as scamware. This research highlights that click interception is an emerging threat to web users.

## 1. Introduction

Clicking HTML elements is the primary way users interact with web applications. Users click hyperlinks to navigate between documents, form submission buttons to share data, and custom UI components to control various web applications. Given the importance of clicks, attackers have developed UI redressing attacks, such as Clickjacking, to hijack user clicks. In Clickjacking, malicious websites trick users into clicking components they do not intend to, thereby sending commands to different applications embedded in iframes.

To combat Clickjacking, various defenses have been proposed, demonstrating good performance. Clicks are also vital in online display advertising, where publishers earn commissions from ad clicks. However, low click-through rates have led to ad click fraud, where bots generate fake click traffic. Ad networks have developed advanced techniques to detect such fraud, making traditional bot-based fraud less effective.

Recently, attackers have shifted to intercepting and redirecting real user clicks to create realistic ad clicks. This can involve infecting users' computers with malware to force or trick them into submitting ad clicks, or using malicious iframes to automatically redirect users to ad pages. While Google's Chrome browser has implemented measures to prevent automatic redirects, it still cannot detect other interception methods, such as links modified by third-party scripts or transparent overlays.

A systematic study of click interceptions is necessary to understand this emerging threat. We aim to develop a system to automatically detect these practices, identify the techniques used, and understand the intentions behind them. However, this is challenging due to the dynamic and event-driven nature of web applications. JavaScript code can be dynamically loaded, hyperlinks can be created and modified, and event handlers can bind URLs to arbitrary HTML elements.

To address these challenges, we designed OBSERVER, a customized open-source web browser that mediates JavaScript accesses to hyperlinks, monitors script creation and execution, and tracks event handlers. Using OBSERVER, we performed a large-scale measurement on the Alexa top 250K websites, discovering 437 third-party scripts intercepting user clicks on 613 websites, collectively receiving 43 million daily visits. Some scripts tricked users into clicking disguised first-party content or barely visible elements, and we found that these scripts aimed to monetize user clicks through ad click fraud.

## 2. Related Work

### Clickjacking
Clickjacking, or UI redressing, tricks users into performing unintended actions on another website. Framebusting is a defense against Clickjacking, but it is incompatible with cross-origin framing. Other defenses, such as ClickIDS and InContext, rely on human perception, but these mechanisms may not be comprehensive or suffer from usability issues. Our research investigates new intra-page click interception practices by third-party scripts, which use hyperlinks, event listeners, and visual deceptions.

### Link Hijacking
Link hijacking modifies the destination of links on websites. Previous studies have investigated ad-based URL shortening services and discovered link hijacking through automatic tab redirects. Our research demonstrates a new form of link hijacking that modifies first-party hyperlinks before user clicks and shows that our system can automatically detect them.

### Visual Deception
Prior works have studied how visual deceptive contents, such as trick banners and overlay ads, can intercept user clicks. Our research does not focus on specific categories of visual deception but uses OBSERVER to distinguish deceptive contents created by different scripts, allowing us to identify the real culprits.

### Click Fraud and Click Spam
Click fraud and click spam involve generating fake ad clicks to raise revenue. Traditional click fraud uses botnets to fabricate ad clicks, while click spam tricks users or uses malware to click ads. Defenses aim to distinguish fake clicks from real ones, leading attackers to make their click traffic appear benign. We find that click interception techniques are being used to generate realistic click traffic.

### JavaScript Inclusion and Behavior Analysis
Researchers have analyzed the behavior of third-party JavaScript libraries and their inclusion on websites. Studies have focused on the security of hosting servers, outdated libraries, and known vulnerabilities. Systems like EvilSeed and Revolver detect malicious web pages, while ScriptInspector inspects API calls from third-party scripts. These studies, however, rely on the origin of JavaScript scripts to determine if they are first-party or third-party, which can be inaccurate. Unlike these, OBSERVER can track the dynamic creation of JavaScript objects and DOM elements, accurately attributing hyperlink modifications and event listener registrations.

## 3. Overview of OBSERVER

OBSERVER is an analysis framework designed to log all potential click-interception-related events performed by JavaScript code. It focuses on three key actions: modifying existing hyperlinks, creating new hyperlinks, and registering event handlers to hook user clicks. When OBSERVER identifies these actions, it tags the corresponding elements with the unique identifier of the initiating script. It also logs the navigation reaction after intentionally clicking a hyperlink or an element associated with an event handler, to determine the URLs to which a click interceptor aims to lead a user.

### 3.1 Threat Model
In our threat model, we consider only click interception activities performed by third-party scripts as malicious. Although first-party websites might exhibit similar activities, we focus on third-party scripts due to their potential for widespread impact.

---

This revised version of the text is more structured, coherent, and professional, providing a clear overview of the research and its significance.