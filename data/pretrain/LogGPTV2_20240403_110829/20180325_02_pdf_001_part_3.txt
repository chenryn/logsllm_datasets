thefragmentationindex. WhentheFMFIisequalto1,
tableshowsexecutiontimeofSVMfor2iterations.
theremainingphysicalmemoryissofragmented,Linux
startsmemorycompactiontoallocatehugepages.
tionswithdense,uniformaccessmemorypatterns(e.g.,
3.4 ComparisonwithFreeBSDhugepagesupport
SVM) enjoy similar speedups on Linux and FreeBSD.
FreeBSD supports transparent huge pages using However,FreeBSDdoesnotsupportasynchronouspro-
reservation-based huge page allocation [68]. When ap- motion,soapplicationswhichallocatememorygradually
plicationsstartaccessinga2MBvirtualaddressregion, (e.g.,Canneal)showlessbenefit. Redismakesfrequent
thepagefaulthandlerreservescontiguousmemory,but hashtableupdatesandexhibitsmanyread-onlyhugepage
doesnotpromotetheregiontoahugepage. Itallocates demotionsinFreeBSD.Consequently,Redisalsoshows
base pages from the reserved memory for subsequent limitedspeedupcomparedwithLinux.
pagefaultsintheregion. FreeBSDmonitorspageutiliza-
3.5 Unfairperformance
tion of the region and promotes it to a huge page only
whenallbasepagesofthereservedmemoryareallocated. Allofourmeasurementsareonvirtualmachineswhere
FreeBSDisthereforeslowertopromotehugepagesthan Linuxistheguestoperatingsystem,andKVM(Linux’s
Linuxandpromotionrequirescompleteutilizationofa in-kernelhypervisor)isthehosthypervisor. Ingensmod-
2MBregion. ifies the memory management code of both Linux and
FreeBSD supports huge pages for file-cached pages. KVM.Theprevioussectionsfocusedonproblemswith
x86hardwaremaintainsaccess/dirtybitsforentirehuge operating system memory management, the remaining
pages—any read or write will set the huge page’s ac- sectionsdescribeproblemswithKVMmemorymanage-
cess/dirty bit. FreeBSD wants to avoid increasing IO ment.
trafficwhenevictingfromthepagecacheorswapping. Unfair huge page allocation can lead to unfair per-
Thereforeitisconservativeaboutcreatingwritablehuge formance differences when huge pages become scarce.
pages. WhenFreeBSDpromotesahugepage,itmarks Linuxdoesnotfairlyredistributecontiguity,whichcan
itread-only,withwritesdemotingthehugepage. Only lead to unfair performance imbalance. To demonstrate
whenallpagesintheregionaremodifiedwillFreeBSD thisproblem,werun4virtualmachinesinasettingwhere
then promote the region to a writable huge page. The memoryisinitiallyfragmented(FMFI=0.85). EachVM
read-onlypromotiondesigndoesnotincreaseIOtraffic uses8GBofmemory. VM0startsfirstandobtainsall
fromthepagecachebecausehugepagesconsistofeither hugepagesthatareavailable(3GB).Later,VM1starts
allclean(read-only)orallmodifiedbasepages. andbeginsallocatingmemory, duringwhichVM2and
FreeBSDpromotionofhugepagesismoreconservative VM3start. VM0thenterminates,releasingits3GBof
thaninLinux,whichreducesmemorybloating,butyields huge pages. We measure how Linux redistributes that
slowerperformance. Table6comparestheperformance contiguitytotheremainingidenticalVMs.
benefitsofhugepagesinFreeBSDandLinux. Applica- ThegraphinFigure2showstheamountofhugepage
710 12th USENIX Symposium on Operating Systems Design and Implementation USENIX Association
Policy Memsaving Performanceslowdown H/M Util radix tree (per process)
429.mcf:278 429.mcf:99%
No
sharing – SVM:191 SVM:99% Page fault Update / Lookup
Tunkrank:236 Tunkrank:99% handler …
429.mcf:331(19.0%) 429.mcf:66%
KVM 1.19GB Util bit vector (512 bit)
(Linux) (9.2%) SVM:204 (6.8%) SVM:90% Promotion Identical
Tunkrank:268(13.5%) Tunkrank:69% request page sharing LookupPhysical page metadata
Hugepage 199MB 429.mcf:278(0.0%) 429.mcf:99% service Huge
SVM:194(1.5%) SVM:99%
sharing (1.5%)
Tunkrank:238(0.8%) Tunkrank:99% Lookup
Base
Update
Access bit vector
Table7: Memorysavingandperformancetradeoffforamulti-
(8 bit)
processworkload.Eachrowisanexperimentwhereallwork- Promote-kth Huge
loadsrunconcurrentlyinseparatevirtualmachines.H/M-huge
Scan-kth
pageratiooutoftotalmemoryused. ParenthesesintheMem
Code Data structures
savingcolumnexpressesthememorysavedasapercentageof
thetotalmemory(13GB)allocatedtoallthreevirtualmachines.
Figure3:ImportantcodeanddatastructuresintheIngens
memorymanager.
memoryallocatedtoVM1,VM2,andVM3(allrunning
SVM)overtime,starting10secondsbeforethetermina- thevirtualmachinememorysizetotheworkingsetsize
tionofVM0. WhenVM1allocatesmemory,Linuxcom- of each workload to avoid spurious sharing of zeroed
pactsmemoryforhugepageallocation,butcompaction pages. KVMsaves9.2%ofmemorybuttheworkloads
begins to fail at 810 MB. VM2 and VM3 start without showaslowdownofupto19.0%becauseTLBmisses
hugepages.WhenVM0terminates10secondsintotheex- areincreasedbysplittinghugepages(thepercentageof
periment,Linuxallocatesall3GBofrecentlyfreedhuge huge pages in use (H/M) goes down to 66%). On the
pages to VM3 through asynchronous promotion. This otherhand,whilehugepagesharingpreservesgoodper-
createssignificantandpersistentperformanceinequality formance,itprovidesonlyreducedmemoryconsumption
amongtheVMs.ThetableinFigure2showsthevariation by1.5%.Thistradeoffbetweenperformanceandmemory
inperformance(NB:toavoidIOmeasurementnoise,data savingsisavoidable. Identicalpagesharingservicescan
loading time is excluded from the measurement). In a andshouldbecoordinatedwithhugepagemanagement
cloudproviderscenario,withpurchasedVMinstancesof toobtainbothperformanceandmemorysavingbenefits.
thesametype,usershavegoodreasontoexpectsimilar
4 Design
performancefromidenticalvirtualmachineinstances,but
VM2is24%slowerthanVM3.
Ingens’sgoalistoenabletransparenthugepagesupport
3.6 Memorysharingvs. performance thatreduceslatency,latencyvariabilityandbloatwhile
providingmeaningfulfairnessguaranteesandreasonable
Modernhypervisorsdetectandsharememorypagesfrom
tradeoffs between high performance and memory sav-
different virtual machines whose contents are identi-
ings. Ingens builds on a handful of basic primitives to
cal [81, 63]. The ability to share identical memory re-
achievethesegoals: utilizationtracking,accessfrequency
ducesthememoryconsumedbyguestVMs,increasing
tracking,andcontiguitymonitoring.
VMconsolidationratios. InKVM,identicalpagesharing
Whilethediscussioninthissectionismostlyexpressed
inthe hostis donetransparentlyin unitsof basepages.
in terms of process behavior, Ingens techniques apply
Ifthecontentsofabasepageareduplicatedinadiffer-
equally to processes and to virtual machines. Figure 3
entVM,buttheduplicatedbasepageiscontainedwithin
showsthemajordatastructuresandcodepathsofIngens,
a huge page, KVM will split the huge page into base
whichwedescribeinthissection.
pagestoenablesharing. Thispolicyprioritizesreducing
memoryfootprintoverpreservationofhugepages,soit
4.1 Monitoringspaceandtime
penalizesperformance.
Anotherpossiblepolicy,whichwecallhugepageshar- Ingens unifies and coordinates huge page management
ing, would notsplit huge pages. A base page isnot al- byintroducingtwoefficientmechanismstomeasurethe
lowedtosharepagesbelongingtoahugepagetoprevent utilization of huge-page sized regions (space) and how
thedemotionofthehugepagebutitcansharebasepages. frequentlyhuge-pagesizedregionsareaccessed(time).
In contrast, a huge page is only allowed to share huge Ingenscollectsthisinformationefficientlyandthenlever-
pages. We implement huge page sharing to compare ages it throughout the kernel to make policy decisions,
with KVM and the result is shown in Table 7. We fit usingtwobitvectors. Wedescribeboth.
USENIX Association 12th USENIX Symposium on Operating Systems Design and Implementation 711
Util bitvector. The util bitvector records which base accumulates enough allocated base pages (90% in our
pagesareusedwithineachhuge-pagesizedmemoryre- prototype),thepagefaulthandlerwakesupPromote-kth
gion(analigned2MBregioncontaining512basepages). topromotethebasepagestoahugepage.
Eachbitsetintheutilbitvectorindicatesthatthecorre- UtilizationtrackingletsIngensmitigatememorybloat-
spondingbasepageisinuse. Thebitvectorisstoredina ing. BecauseIngensallocatescontiguousresourcesonly
radixtreeandIngensusesahuge-pagenumberasthekey forhighlyutilizedvirtualaddressregions,itcancontrol
tolookupabitvector. Thepagefaulthandlerupdatesthe internalfragmentation. Theutilizationthresholdprovides
utilbitvector. an upper bound on memory bloat. For example, if an
administrator sets the threshold to 90%, processes can
Accessbitvector. Theaccessbitvectorrecordsthere-
useonly10%morememoryintheworstcasecompared
centaccesshistoryofaprocesstoitspages(baseorhuge).
to a system using base pages only. The administrator
Scan-kthperiodicallyscansaprocess’hardwareaccess
can simply provision 10% additional memory to avoid
bitsinitspagetabletomaintainper-page(baseorhuge)
unexpectedswapping.
accessfrequencyinformation, storedasan8-bitvector
withinLinux’pagemetadata. Ingenscomputestheexpo- Utilization-based demotion (performance). Pro-
nential moving average (EMA) [12] from the bitvector cessescanfreeabasepage,usuallybycallingfree. Ifa
whichwedefineasfollows: freedbasepageiscontainedwithinahugepage,Linux
demotes the huge page instantly. For example, Redis
F =α(weight(utilbitvector))+(1−α)F (1)
t t−1 freesobjectswhendeletingkeyswhichresultsinasystem
calltofreethememory. Redisusesjemalloc[20],whose
The weight is the sum of set bits in the bitvector, F is
t freeimplementationmakesanmadvisesystemcall
theaccessfrequencyvalueattimet,andα isaparame-
withtheMADV_DONTNEEDflagtoreleasethememory2.
ter. Basedonasensitivityanalysisusingourworkloads,
Linuxdemotesthehugepagethatcontainsthefreedbase
wesetα to0.4,meaningIngensconsidersthepage“fre-
page3.
quentlyaccessed”whenF ≥3×bitvectorsize/4(i.e.,6
t
Demotingin-usehugepageshurtsperformance. Con-
inourcase).
sequently,Ingensdefersthedemotionofhighutilization
Wecanexperimentallyverifytheaccuracyofthefre-
huge pages. When a base page is freed within a huge
quencyinformationbycheckingwhetherpagesclassified
page,Ingensclearsthebitforthepageintheutilbitvec-
as frequently accessed have their access bit set in the
tor. When utilization drops below a threshold, Ingens
next scan interval: in most workloads we find the mis-
demotesthehugepageandfreesthebasepageswhose
predictionratiotobeunder3%,althoughrandomaccess
bitsareclearintheutilbitvector.
patterns(e.g. Redis, MongoDB)canyieldhighererror
ratesdependingonthedynamicrequestpattern. 4.4 Proactivebatchedcompaction(reducefragmen-
tation)
4.2 Fastpagefaults
Maintainingavailablefreecontiguousmemoryisimpor-
Tokeepthepagefaulthandlingpathfast,Ingensdecou-
tanttosatisfylargesizeallocationrequestsrequiredwhen
plespromotiondecisions(policy)fromhugepagealloca-
Ingensdecidestopromotearegiontoahugepage,orto
tion(mechanism). Thepagefaulthandlerdecideswhen
satisfyothersystem-levelcontiguityinserviceof,forex-
topromoteahugepageandsignalsabackgroundthread
ample,devicedriversoruser-levelDMA.Tothisend,In-
(calledPromote-kth)todothepromotion(andalloca-
gensmonitorsthefragmentationstateofphysicalmemory
tionifnecessary)asynchronously(Figure3).Promote-kth
andproactivelycompactsmemorytoreducethelatency
compactsmemoryifnecessaryandpromotesthepages
oflargecontiguousallocations.
identified by the page fault handler. The Ingens page
Ingens’sgoalistocontrolmemoryfragmentationby
faulthandlerneverdoesahigh-latencyhugepagealloca-
keeping FMFI below a threshold (that defaults to 0.8).
tion. WhenPromote-kthstartsexecuting,ithasalistof
ProactivecompactionhappensinPromote-kthafterper-
viablecandidatesforpromotion; afterpromotingthem,
forming periodic scanning. Aggressive proactive com-
itresumesitsscanofvirtualmemorytofindadditional
pactioncauseshighCPUutilization,interferingwithuser
candidates.
applications. Ingenslimitsthemaximumamountofcom-
4.3 Utilization-basedpromotion(mitigatebloat)
pactedmemoryto100MBforeachcompaction. Com-
Ingens explicitly and conservatively manages memory pactionmovespages,whichnecessitatesTLBinvalida-
contiguityasaresource,allocatingcontiguousmemory tions. Ingensdoesnotmovefrequentlyaccessedpagesto
onlywhenitdecidesaprocess(orVM)willusemostof
2TCMalloc[35]alsofunctionsthisway.
theallocatedregionbasedonutilization. Ingensallocates
3Kernelversion4.5introducesanewmechanismtofreememory
onlybasepagesinthepagefaulthandlerandtracksbase