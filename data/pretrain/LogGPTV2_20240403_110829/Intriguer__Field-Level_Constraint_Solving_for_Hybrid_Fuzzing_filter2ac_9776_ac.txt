level trace list (FL). Obviously, a subset of FL, which is a group
for F(i, j), holds trace records in which at least one operand used
F(i, j). Figure 6-(b) shows an example of FL derived from Figure 6-(a)
according to field inference. Trace record addr9 of Figure 6-(a) is
discarded whereas addr6 to addr8 are duplicated in FL. A trace
record could belong to multiple groups if distinct fields are used by
multiple operands or a multi-field operand is used.
Field Transition Tree. Intriguer builds a field transition tree
3.3.3
from FL for each inferred field. The goal of constructing the field
transition trees is to optimize symbolic emulation and constraint
solving. We explain more details after describing the procedure to
build the field transition tree as follows:
(1) Set a root node as a source input value
(2) Set a new node to hold ⟨trace T, value V (a result of the instruc-
tion in the trace)⟩ where the value is reproduced through the
precedent nodes
(3) Add the new node only if the tainted value and the reproduced
value are the same.
Figure 6-(c) shows an example of the field transition tree generated
from FL for F(0,2). Intriguer creates the tree by setting a root node
(tagged R) with V = 0x100 that is the source input value as shown
in F(0,2), and then appends the trace records in FL to the root node
in order to complete the tree. In doing so, Intriguer first sets a new
node (tagged A) with the instruction (cmp at addr1) and the operands
with regard to the first trace record. Because the first operand of
the first trace record uses the field F(0,2), Intriguer searches the tree
for the first operand’s value 0x100. In the current tree, only the root
node exists; and since the root node’s V is 0x100, this trace record
is appended as a child node to the root node. Next, to add a second
trace record, Intriguer searches for a node whose V is 0x200 (first
operand’s value). However, since there is no node with V 0x200 in
the tree, this trace is considered unreproducible and is not added to
the tree. In this way, Intriguer adds trace records by comparing a
field value of an operand with V of the node. If there are multiple
nodes with the same V, Intriguer selects the most recently appended
node. Our insight behind this tree construction is that a tainted
operand value is reproducible from a source input value through
the instructions properly recorded by the execution monitor.
In concolic execution, similar to DTA, it is necessary to tag the
memory addresses and registers affected by the input data propa-
gated by running instructions. Unlike the taint tag that stores only
a simple taint state, however, concolic execution needs a symbolic
tag that contains a symbolic expression representing the memory
addresses and registers. In order to deal with the exact symbolic
expressions according to the input data flow, it is further neces-
sary to obtain the exact information about the memory addresses
and registers whenever running the instructions that perform a
write operation onto the memory or register, i.e., not just data
transfer instructions but all instructions that incur tag propagation
such as add and sub. Existing concolic executors, both on-line (e.g.,
Qsym [33]) and off-line (e.g., SAGE [14]), need to generate and man-
age the symbolic expressions for all tainted memory and registers,
incurring a large performance overhead.
Intriguer significantly reduces this overhead by constructing the
field transition tree: the tree records the changes in the concrete
values of each inferred field, rather than deals with symbolic tags
for memory addresses and registers. Our basic insight is that the
data flow can be inferred by analyzing the concrete values stored
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom5201
2
3
4
5
6
int a , b , c;
read (0 , ( int *) &a , 4) ;
read (0 , ( int *) &b , 4) ;
c = b + 1;
if (a + c == 0 x12345678 )
...
// a is inferred as F (0 ,4)
// b is inferred as F (4 ,4)
(a) Trace List (TL)
...
0 x080484cd : mov
0 x080484d0 : add
0 x080484d3 : mov
0 x080484d6 : mov
0 x080484d9 : mov
0 x080484dc : add
0 x080484de : cmp
...
1
2
3
4
5
6
7
8
9
Listing 4: An example that shows the benefit of field-level
symbolic emulation and removing mov instructions. (§3.4.1)
eax , DWORD PTR [ ebp -0 x14 ] ; load b
eax ,0 x1
DWORD PTR [ ebp -0 x10 ], eax ; assign c
edx , DWORD PTR [ ebp -0 x18 ] ; load a
eax , DWORD PTR [ ebp -0 x10 ] ; load c
eax , edx
eax ,0 x12345678
; b + 1
; a + c
in the memory addresses and registers captured when the execu-
tion trace is generated. Figure 7 shows an example that infers a
data flow from the execution trace. By running the code in List-
ing 4, the TL regarding F(4,4) is generated in all execution traces
as shown in Figure 7a. As an operand of cmp, it is necessary to
decide whether F(4,4) was directly used from an input or through
an operation such as F(4,4) +1 or F(4,4) +1 + F(0,4). Existing methods
that manipulate symbolic tags, as shown in the assembly code of
Listing 4, can precisely decide that F(4,4) was used by cmp through
ebp-0x14→eax→ ... →eax; however, this incurs a large over-
head. Instead, Intriguer makes this decision without incurring such
an overhead: as an add instruction changes the values stored in
memory and register, the TL records the concrete value changes.
Intriguer can decide the instructions that F(4,4) (on cmp) has passed
through, by tracing the changes in the input value obtained from
the inferred field (0x2222 → 0x2223 → 0x3334).
In Figure 6-(c), Intriguer generates constraints by traversing the
field transition tree: the uncomplicated constraints for depth =1 and
the complicated constraints for depth >1 in the tree. In the field-
level constraint solving step, Intriguer uses an SMT solver for the
complicated constraints only, and directly solves the uncomplicated
constraints. Note that the uncomplicated constraints that Intriguer
can directly solve even include tight multi-byte constraints, such
as magic bytes, thanks to our inferred-field approach. We describe
more details of constraint solving in the following subsection.
Finally, to address the over-constraint problem in concolic ex-
ecution, Intriguer uses a new method, similar to the optimistic
solving of Qsym but more sophisticated, by manipulating the field
transition tree. When adding a new node Nnew to the tree, if the
value V is the same as V of the root node as well as of another node
Nother , then Intriguer appends this new node to the root node as
well as to Nother . By doing this, Intriguer can generate simpler
constraints in addition when generating constraints in the next
step (§3.4), and thus it is possible to solve constraints that were not
solved for over-constraint problems. Unlike the optimistic solving
method of Qsym that solved the last constraint only, the field tree
based method of Intriguer can more effectively deal with distinct
states of the branch nodes, by adding more nodes to the new branch
nodes.
(b) Field transition tree for F(4,4)
Figure 7: An example that inputs "a=0x1111" and "b=0x2222" to
Listing 4. (a) TL. (b) Field transition tree. In TL, 0x1111 and 0x2222
represent "0x11,0x11" and "0x22,0x22", respectively. TL does not
record mov-like instructions. The field transition tree was generated
without mov instructions.
3.4 Field-Level Constraint Solving
After constructing the field transition trees for all inferred fields,
Intriguer performs field-level constraint solving. To do this, In-
triguer conducts symbolic emulation on all types of instructions
and uses a symbolic solver, similarly to the existing methods; but it
traverses the field transition trees and picks out (un)complicated
branch/arithmetic instructions, achieving great efficiency and effec-
tiveness. Intriguer invokes a solver for complicated (truly complex)
constraints only. Intriguer traverses all field transition trees and
so obtains mutation values for all inferred fields. We explain more
detail about symbolic emulation and constraint solving.
Symbolic Emulation. We explain three distinctive design
3.4.1
strategies of Intriguer to optimize symbolic emulation. First, In-
triguer symbolically emulates only the instructions that are rele-
vant to the branches aimed to flip, by virtue of the field transition
tree. Unlike our approach, existing concolic executors symbolically
emulate all tainted instructions because they are unaware of the
instructions needed for constraint solving. Note that Intriguer per-
forms off-line concolic execution based on the execution trace, and
picks out branch-relevant instructions from the “reduced” field-level
trace list on the field transition tree (Figure 6) before the symbolic
emulation. Second, Intriguer does not symbolically emulate mov-
like instructions by removing them in the earlier phase. Note that
it is possible to follow data flows without mov-like instructions
by tracing changes in the value of the inferred fields (Figure 7a).
Intriguer deals with symbolic expressions in this way, rendering
more efficiency that reduces the emulation time of mov-like instruc-
tions (§2.1,§A). For example, Listing 4 shows in part an example C
code and its assembly code receiving two four-byte integers. We
could see that four mov instructions are used for executing two add
instructions and one cmp instruction. Figure 7a and Figure 7b show
the TL and the field transition tree generated by inputting 0x1111
and 0x2222 to a (F(0,0)) and b (F(4,4)), respectively. By emulating
the nodes of the tree each by each, we could generate a symbolic
expression comparing (F(4,4) + 0x1) + F(0,4) and 0x12345678 on a
cmp instruction, i.e., without needing to emulate mov instructions.
Third, Intriguer performs symbolic emulation at the field level. Un-
like previous approaches manipulating symbolic expressions in
the byte level, Intriguer operates symbolic expressions with regard
to the inferred fields. For instance, existing methods generate and
operate symbolic expressions for each byte of eax, i.e., four times,
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom521but Intriguer manipulates a single symbolic expression by inferring
these four bytes as a single field. Intriguer benefits from these new
strategies with regard to performance in symbolic emulation.
3.4.2 Constraint Solving. Thanks to the inferred fields and their
field transition trees, Intriguer can discover interesting offsets and
values quickly to generate new test cases. Unlike other concolic
execution engines, Intriguer generates constraints for arithmetic
instructions (e.g., add, mul, sub) to trigger integer bugs as well as
comparison instructions (e.g., cmp) to search for new paths. The
intuition is that arithmetic boundary conditions can be dealt with
like branch constraints. In addition, Intriguer classifies complicated
and uncomplicated constraints according to the number of nodes
constituting the constraints in the field transition tree. In doing so,
unlike existing methods, Intriguer selectively uses an SMT solver
(and also the symbolic emulation) for truly complex constraints
only, and directly obtains the values that satisfy uncomplicated
constraints, including both loose and tight multibyte constraints.
Since uncomplicated constraints often dominate those constraints
found in real programs (Figure 3), Intriguer can efficiently find
interesting values by minimizing the use of an SMT solver (Table 17
in §B).
Figure 6-(d) shows the constraints being generated by travers-
ing the field transition tree (c). Intriguer traverses all nodes of the
field tree and generates constraints when the current node is a tar-
get instruction, i.e., a comparison instruction for branch boundary
conditions or an arithmetic instruction for arithmetic boundary
conditions. Constraints are generated by symbolically emulating
instructions as in existing symbolic execution methods. Intriguer
emulates all instructions in nodes from the current node that con-
tains the target instruction to the root node. Note that the nodes
in the path are the relevant nodes, meaning relevant instructions
to the target instruction. At this time, constraints are generated
according to the target instruction type (comparison or arithmetic).
Thus, one or more constraints are generated from the four nodes
using cmp, add, and mul instructions in this example.
Comparison instructions. Intriguer performs a constraint solv-
ing on comparison related instructions5 to determine the branch
conditions for finding a new path, just like previous concolic exe-
cution tools. Since there are two nodes with cmp instructions ("A:
addr1. cmp X, 0x200" and "D: addr7. cmp X, 0x100") in Figure 6-(c),
Intriguer generates the first and the fourth constraints (green) in
Figure 6-(d) from this node. The first one is an uncomplicated con-
straint that will be directly solved for depth = 1: it is truly a simple
condition that negates the comparison. The other one is a compli-
cated constraint that will be solved by an SMT solver for depth = 3:
the two conditions should be simultaneously met.
Arithmetic instructions. Arithmetic boundary values likely in-
cur an overflow or underflow when running arithmetic instruc-
tions6 as we discussed in §2.4. When encountering an arithmetic
instruction like this, Intriguer adds, as a constraint, >INT_MAX
(e.g., 0xffffffff or 0x7fffffff) for overflow checks and  0) and multibyte constraints (e.g., x ==
0x0f365c01) as uncomplicated constraints, and exceptionally han-
dle narrow range constraints (e.g., x > 0 ∧ x 
INT_MAX or x − 1 < 0) without using an SMT solver.
4 IMPLEMENTATION
We implement the execution monitor as a pintool written in 4.2K
lines of C++ code for DTA using Pin 3.7, and also the core of
Intriguer written in 2K lines of C++ code. We use Z3 (v.4.5) for
constraint solving and boundary triggering in our prototype im-
plementation. Finally we implement the fuzzer with AFL 2.41b.
Intriguer can be easily ported to other OS environments since all
of the tools (Pin 3.7, Z3, AFL) support the latest versions of Linux,
Windows, and macOS. The current implementation supports most
of 32-bit instructions and part of 64-bit instructions (e.g., pcmpeq).
We will extend Intriguer to support more 64-bit instructions that
are essential for bug discovery. Intriguer will be open-sourced and a
mutation strategy that can be performed in field level will be added.
5 EVALUATION
To evaluate Intriguer, we set the following research questions.
• RQ1: How good is the performance of Intriguer in terms of bug
• RQ2: By how much is code coverage increased by Intriguer?
(§5.3)
• RQ3: Can Intriguer’s trace reduction successfully remove execu-
tion traces without unintentionally removing interesting code
blocks? (§5.4)
• RQ4: How effective is the field transition tree of Intriguer? (§5.5)
• RQ5: Can Intriguer’s instrumentation of arithmetic boundary
discover hard-to-trigger bugs which are missed by other fuzzers?
(§5.6)
detection capabilities? (§5.2)
Session 3A: Fuzzing: Methods and ApplicationsCCS ’19, November 11–15, 2019, London, United Kingdom522Table 6: Program data.
Program # Lines
70,050
objdump
52,413
nm
19,354
readelf
323,761
ffmpeg
201,676
avconv
14,433
tiff2pdf
37,079
bsdtar
# Functions
2,638
2,063
477
17,464
10,999
676
1,847
Seed Type
empty, elf, pe
empty, elf
elf
# Branches
54,404
39,688
16,313
276,630 mp4
155,092 mp4
tiff
tar
9,866
22,591
Table 7: Seed data.
Type
empty
elf
pe
mp4
tiff