15、下载postgresql  
```  
wget https://ftp.postgresql.org/pub/source/v16beta1/postgresql-16beta1.tar.bz2  
```  
16、安装postgresql  
```  
tar -jxvf postgresql-16beta1.tar.bz2  
cd postgresql-16beta1  
env CC=clang CXX=clang++  ./configure --prefix=/home/postgres/pg16 --with-icu  
make world -j 4  
make install-world  
```  
17、初始化实例, 配置实例.  
机器较弱: 2 core, 8GB ddr3 1333内存.   
```  
initdb -D $PGDATA -U postgres -E UTF8 --locale-provider icu --icu-locale=C --lc-collate=C --lc-ctype=en_US.UTF-8       
vi $PGDATA/postgresql.auto.conf     
listen_addresses = '0.0.0.0'		  
port = 1921				  
max_connections = 1000			  
superuser_reserved_connections = 13	  
unix_socket_directories = '., /tmp'	  
unix_socket_permissions = 0700		  
tcp_keepalives_idle = 60		  
tcp_keepalives_interval = 10		  
tcp_keepalives_count = 10		  
shared_buffers = 1GB			  
work_mem = 8MB				  
maintenance_work_mem = 256MB		  
dynamic_shared_memory_type = posix	  
bgwriter_delay = 10ms			  
bgwriter_lru_maxpages = 1000		  
bgwriter_lru_multiplier = 5.0		  
max_parallel_workers_per_gather = 0	  
parallel_leader_participation = off  
synchronous_commit = off		  
wal_compression = on			  
wal_writer_delay = 10ms		  
checkpoint_completion_target = 0.5	  
max_wal_size = 4GB  
min_wal_size = 1GB  
archive_mode = on		  
archive_command = '/bin/date'		  
wal_sender_timeout = 6s	  
wal_receiver_timeout = 6s		  
random_page_cost = 1.1			  
effective_cache_size = 6GB  
log_destination = 'csvlog'		  
logging_collector = on		  
log_truncate_on_rotation = on		  
log_error_verbosity = verbose              
log_statement = 'ddl'			  
log_timezone = 'Asia/Shanghai'  
autovacuum_vacuum_cost_delay = 0ms	  
vacuum_freeze_table_age = 750000000  
vacuum_freeze_min_age = 50000000  
vacuum_failsafe_age = 1600000000  
vacuum_multixact_freeze_table_age = 750000000  
vacuum_multixact_freeze_min_age = 5000000  
vacuum_multixact_failsafe_age = 1600000000  
datestyle = 'iso, mdy'  
timezone = 'Asia/Shanghai'  
lc_messages = 'en_US.UTF-8'		  
lc_monetary = 'en_US.UTF-8'		  
lc_numeric = 'en_US.UTF-8'		  
lc_time = 'en_US.UTF-8'			  
default_text_search_config = 'pg_catalog.english'  
```  
18、测试  
```  
pg_ctl start  
pgbench -i -s 100  
pgbench -M prepared -n -r -P 1 -c 4 -j 4 -T 120  
transaction type:   
scaling factor: 100  
query mode: prepared  
number of clients: 4  
number of threads: 4  
maximum number of tries: 1  
duration: 120 s  
number of transactions actually processed: 506794  
number of failed transactions: 0 (0.000%)  
latency average = 0.946 ms  
latency stddev = 0.345 ms  
initial connection time = 46.393 ms  
tps = 4224.562249 (without initial connection time)  
statement latencies in milliseconds and failures:  
         0.001           0  \set aid random(1, 100000 * :scale)  
         0.000           0  \set bid random(1, 1 * :scale)  
         0.000           0  \set tid random(1, 10 * :scale)  
         0.000           0  \set delta random(-5000, 5000)  
         0.069           0  BEGIN;  
         0.181           0  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;  
         0.134           0  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;  
         0.150           0  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;  
         0.159           0  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;  
         0.127           0  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);  
         0.124           0  END;  
```  
这个机器的CPU极限了:  
```  
cd ~  
vi test.sql  
select '1';  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 6 -j 6 -T 120  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 6  
number of threads: 6  
maximum number of tries: 1  
duration: 120 s  
number of transactions actually processed: 6762045  
number of failed transactions: 0 (0.000%)  
latency average = 0.106 ms  
latency stddev = 0.024 ms  
initial connection time = 62.167 ms  
tps = 56378.272849 (without initial connection time)  
statement latencies in milliseconds and failures:  
         0.106           0  select '1';  
```  
```  
postgres@dege-> lscpu  
Architecture:                    x86_64  
CPU op-mode(s):                  32-bit, 64-bit  
Byte Order:                      Little Endian  
Address sizes:                   36 bits physical, 48 bits virtual  
CPU(s):                          2  
On-line CPU(s) list:             0,1  
Thread(s) per core:              1  
Core(s) per socket:              2  
Socket(s):                       1  
NUMA node(s):                    1  
Vendor ID:                       GenuineIntel  
CPU family:                      6  
Model:                           23  
Model name:                      Pentium(R) Dual-Core  CPU      E5300  @ 2.60GHz  
Stepping:                        10  
CPU MHz:                         1197.022  
CPU max MHz:                     2600.0000  
CPU min MHz:                     1200.0000  
BogoMIPS:                        5187.28  
Virtualization:                  VT-x  
L1d cache:                       64 KiB  
L1i cache:                       64 KiB  
L2 cache:                        2 MiB  
NUMA node0 CPU(s):               0,1  
Vulnerability Itlb multihit:     KVM: Mitigation: VMX disabled  
Vulnerability L1tf:              Mitigation; PTE Inversion; VMX EPT disabled  
Vulnerability Mds:               Vulnerable: Clear CPU buffers attempted, no microcode; SMT disabled  
Vulnerability Meltdown:          Mitigation; PTI  
Vulnerability Mmio stale data:   Unknown: No mitigations  
Vulnerability Retbleed:          Not affected  
Vulnerability Spec store bypass: Vulnerable  
Vulnerability Spectre v1:        Mitigation; usercopy/swapgs barriers and __user pointer sanitization  
Vulnerability Spectre v2:        Mitigation; Retpolines, STIBP disabled, RSB filling, PBRSB-eIBRS Not affected  
Vulnerability Srbds:             Not affected  
Vulnerability Tsx async abort:   Not affected  
Flags:                           fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ht tm pbe syscall nx  
                                  lm constant_tsc arch_perfmon pebs bts rep_good nopl cpuid aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdc  
                                 m xsave lahf_lm pti tpr_shadow vnmi flexpriority vpid dtherm  
```  
其他压测:  
[《PostgreSQL 图式搜索(graph search)实践 - 百亿级图谱，毫秒响应》](../201801/20180102_04.md)    
```
nohup pgbench -M prepared -n -r -P 5 -f ./test.sql -c 4 -j 4 -t 2500000 >./log 2>&1 &
```
## 测试duckdb  
[《记录下 在 debian 宿主机中部署和使用 docker (常用docker命令、debian容器常用配置; debian容器部署duckdb和PostgreSQL例子)》](../202303/20230318_01.md)    
```  
su - root  
mkdir -p /data01/duckdb  
chown postgres:postgres /data01/duckdb  
su - postgres  
cd /data01/duckdb  
git clone --depth 1 -b v0.8.1 https://github.com/duckdb/duckdb  
cd duckdb  
env CC=clang CXX=clang++ CMAKE_BUILD_PARALLEL_LEVEL=4 EXTENSION_STATIC_BUILD=1 BUILD_ICU=1 BUILD_TPCH=1 BUILD_TPCDS=1 BUILD_FTS=1 BUILD_VISUALIZER=1 BUILD_HTTPFS=1 BUILD_JSON=1 BUILD_JEMALLOC=1 BUILD_EXCEL=1 BUILD_INET=1 STATIC_OPENSSL=1 BUILD_SQLSMITH=1 BUILD_TPCE=1 make benchmark -j 4  
cd build/release/      
./duckdb   
D .timer on      
D create table t (id int, info text, ts timestamp);      
Run Time (s): real 0.000 user 0.000307 sys 0.000154  
D insert into t select id , md5(random()::text), now() from range(0,10000000) as t(id);      
100% ▕████████████████████████████████████████████████████████████▏   
Run Time (s): real 7.657 user 14.955007 sys 0.350218  
D select count(distinct info) from t;      
100% ▕████████████████████████████████████████████████████████████▏   
┌──────────────────────┐  
│ count(DISTINCT info) │  
│        int64         │  
├──────────────────────┤  
│              9988402 │  
└──────────────────────┘  
Run Time (s): real 4.566 user 7.205599 sys 1.445585  
D select count(distinct id) from t;       
100% ▕████████████████████████████████████████████████████████████▏   
┌────────────────────┐  
│ count(DISTINCT id) │  
│       int64        │  
├────────────────────┤  
│           10000000 │  
└────────────────────┘  
Run Time (s): real 2.915 user 5.233195 sys 0.465665  
D explain analyze select count(distinct id) from t;    
100% ▕████████████████████████████████████████████████████████████▏   
┌─────────────────────────────┐  
│┌───────────────────────────┐│  
│└───────────────────────────┘│  
└─────────────────────────────┘  
┌─────────────────────────────────────┐  
│┌───────────────────────────────────┐│  
││    Query Profiling Information    ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
explain analyze select count(distinct id) from t;  
┌─────────────────────────────────────┐  
│┌───────────────────────────────────┐│  
││         Total Time: 2.91s         ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
┌───────────────────────────┐  
│      EXPLAIN_ANALYZE      │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             0             │  
│          (0.00s)          │  
└─────────────┬─────────────┘                               
┌─────────────┴─────────────┐  
│    UNGROUPED_AGGREGATE    │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│     count(DISTINCT #0)    │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             1             │  
│          (2.67s)          │  
└─────────────┬─────────────┘                               
┌─────────────┴─────────────┐  
│         PROJECTION        │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             id            │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│          10000000         │  
│          (0.00s)          │  
└─────────────┬─────────────┘                               
┌─────────────┴─────────────┐  
│         SEQ_SCAN          │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             t             │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             id            │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│           EC: 0           │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│          10000000         │  
│          (0.02s)          │  
└───────────────────────────┘                               
Run Time (s): real 2.911 user 5.223406 sys 0.507192  
```  
## 参考  
[《PostgreSQL on Linux 最佳部署手册 - 珍藏级》](../201611/20161121_01.md)    
[《PostgreSQL 11 1万亿 tpcb 性能测试 on 阿里云ECS + ESSD + zfs/lvm2条带 + block_size=32K》](../201809/20180919_01.md)    
[《在macOS中制作debian USB安装镜像, 在带Nvidia显卡笔记本上的安装部署debian 11 - 测试 PostgreSQL, AIGC cuda 应用》](../202303/20230317_02.md)    
[《在 debian 宿主机中部署和使用 docker (常用docker命令、debian容器常用配置; debian容器部署duckdb和PostgreSQL例子)》](../202303/20230318_01.md)   
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")