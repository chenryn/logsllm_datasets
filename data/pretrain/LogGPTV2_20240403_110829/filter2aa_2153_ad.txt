# PROPVARIANT Deserialization Vulnerabilities and Exploits

## Introduction
This document discusses several vulnerabilities in the `PROPVARIANT` deserialization process, which can lead to various security issues such as type confusion, arbitrary writes, and arbitrary frees. These vulnerabilities are critical and can be exploited for remote code execution.

## VT_LPWSTR Deserialization
### Code Snippet
```cpp
switch (prop->vt & VT_TYPEMASK) {
    case VT_LPWSTR:
        return StructuredQuery1::ReadPWSTR(pstm, &prop->pwszVal);
}
```
### Example Data
- **Hex Dump**: `1F 00 07 00 00 00 48 00 49 00 54 00 43 00 4F 00 4E 00 6C 00 00 00 00 00 06 00 00 00 00 00 00 00`
- **Size**: 7
- **Content**: `L"HITCON"`

### Function Implementation
```cpp
HRESULT StructuredQuery1::ReadPWSTR(IStream *pstm, LPWSTR pwstr) {
    DWORD size;
    IStream_Read(pstm, &size, 4);
    LPWSTR buf = CoTaskMemAlloc(2 * size);
    IStream_Read(pstm, buf, 2 * size - 2);
    *pwstr = buf;
    return S_OK;
}
```

## Special Case: VT_DECIMAL
### Description
- **VT_DECIMAL** is a special case where the `DECIMAL` structure has the same size as the `PROPVARIANT` structure.
- **MSDN Note**: The first member of the `DECIMAL` structure is not used and is equal in size to the `vt` member of the `PROPVARIANT` structure.

### Structures
```cpp
typedef struct tagDEC {
    USHORT wReserved;  
    BYTE scale;
    BYTE sign;
    ULONG Hi32;
    ULONGLONG Lo64;
} DECIMAL;

typedef struct tagPROPVARIANT {
    VARTYPE vt;
    union {
        CHAR cVal;
        UCHAR bVal;
        // ... other members
        DECIMAL decVal;
    };
} PROPVARIANT;
```

## CVE-2019-1280: Type Confusion
### Description
- **Issue**: `ReadPROPVARIANT` reads `DECIMAL` from a file without resetting `vt` to `VT_DECIMAL`.
- **Impact**: Allows control over the type of a `PROPVARIANT` object, leading to type confusion.

### Code Snippet
```cpp
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop) {
    IStream_Read(pstm, &prop->vt, 2);
    VARTYPE vt = prop->vt & VT_TYPEMASK;
    switch (vt) {
        case VT_DECIMAL:
            return IStream_Read(pstm, &prop->decVal, 16); // without setting vt to VT_DECIMAL
        // ... other cases
    }
}
```

### Proof of Concept (PoC)
- **Hex Dump**: `00 1F 00 08 00 00 00 63 00 6F 00 6E 00 74 00 72 00 6F 00 6C 00 00 00 00 00 06 00 00 00 65 00 6E`
- **VARTYPE**: `0x1F` (VT_LPWSTR)
- **Size**: 8
- **Content**: `L"Control"`

### Exploit
- **Forge an `IStream` object by overwriting `vt` to `VT_STREAMED_OBJECT`**.
- **Modify the serialized data in a search LNK**.

## CVE-2020-0729: Uninitialized Pointer
### Description
- **Issue**: `CLSID` and `CLIPDATA` in `PROPVARIANT` are pointers, but memory is not allocated before reading the data.
- **Impact**: Leads to uninitialized memory and invalid pointer dereference.

### Code Snippet
```cpp
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop) {
    HRESULT hr = IStream_Read(pstm, &prop->vt, 2);
    VARTYPE vt = prop->vt & VT_TYPEMASK;
    switch (vt) {
        case VT_CLSID:
            CLSID **ppuuid = &prop->puuid;
            return IStream_Read(pstm, *ppuuid, 16); // puuid is a NULL pointer
        case VT_CF:
            CLIPDATA **ppclipdata = &prop->pclipdata; // pclipdata is a NULL pointer
            hr = IStream_Read(pstm, &(*ppclipdata)->ulClipFmt, 4);
        // ... other cases
    }
}
```

### Exploit
- **Uninitialized Memory in `VT_VARIANT`**.
- **Call `ReadPROPVARIANT` again with uninitialized `puuid` or `pclipdata`**.

## CVE-2020-1421: Type Confusion
### Description
- **Issue**: When deserializing a `VT_BSTR_BLOB` vector, it is read as a single `VT_BSTR_BLOB` regardless of the `VT_VECTOR` flag.
- **Impact**: Leads to arbitrary free due to type confusion during release.

### Code Snippet
```cpp
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop) {
    HRESULT hr = IStream_Read(pstm, &prop->vt, 2); // prop.vt = VT_BSTR_BLOB | VT_VECTOR
    VARTYPE vt = prop->vt & VT_TYPEMASK;
    if (vt == VT_BSTR_BLOB) {
        StructuredQuery1::ReadBlob_unsigned_char_(
            pstm, &prop->bstrblobVal.cbSize, &prop->bstrblobVal.pData);
    }
    // ... other cases
}

HRESULT PropVariantClearWorker(PROPVARIANT *pvarg, int fInternal) {
    VARTYPE vt = pvarg->vt & VT_TYPEMASK;
    if (vt == VT_BSTR_BLOB | VT_VECTOR) {
        if (pvarg->cabstrblob.pElems) {
            for (int i = 0; i < pvarg->cabstrblob.cElems; ++i) {
                if (pvarg->cabstrblob.pElems[i].pData)
                    CoTaskMemFree(pvarg->cabstrblob.pElems[i].pData);
            }
        }
    }
    // ... other cases
}
```

### Exploit
- **Critical error detected**.
- **Type confusion leads to arbitrary free**.

## Conclusion
- **Windows is complex and lacks comprehensive testing**.
- **File format-based exploits are still possible, though challenging**.
- **Future work**: Explore more components and combine with Windows Search/StructuredQuery.

## Acknowledgments
- **Shih-Kun Huang of NCTU SQLab**
- **Lucas Leong (@_wmliang_)**
- **TeamT5**
- **MSRC**

Thank you!  
@_L4ys