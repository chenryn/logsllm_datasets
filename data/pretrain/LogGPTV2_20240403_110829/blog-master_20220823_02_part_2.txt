with RECURSIVE tmp as (  
(select tbl_log as t from tbl_log order by gid, crt_time desc limit 1)  
union all   
select (select tbl_log from tbl_log where tbl_log.gid > (tmp.t).gid order by tbl_log.gid, tbl_log.crt_time desc limit 1) as t  
from tmp where tmp.* is not null   
)  
select (tmp.t).* from tmp   
where tmp.* is not null;  
 gid |               info               |          crt_time            
-----+----------------------------------+----------------------------  
   0 | 144ccff07b812d0ca5252ae8cbc2ad50 | 2022-08-23 14:59:59.531316  
   1 | 22fb4e6bb2daa15fcb8b00358bb4f3ad | 2022-08-23 14:59:59.531342  
   2 | 43761591e939309f1bb9e2b94f642e6d | 2022-08-23 14:59:59.531356  
   3 | 1751a3a7884685ec2c16926b4e2ad607 | 2022-08-23 14:59:59.531341  
   4 | 5df93803d19bf3a6bd19b7d017757bed | 2022-08-23 14:59:59.531348  
   5 | c11384fa2434c67992d14da837f65ac0 | 2022-08-23 14:59:59.531352  
   6 | ea33278a5f8d75c75ddbcbf7d753367f | 2022-08-23 14:59:59.531355  
   7 | c98c67d0a08c2f6dc865a291997748d5 | 2022-08-23 14:59:59.531347  
   8 | 644215ca6c3f2ad0fc1c0387a8e5c4fb | 2022-08-23 14:59:59.53133  
   9 | d0b554588b4a1d3de9fddcac630234ea | 2022-08-23 14:59:59.531354  
  10 | 903c0dda9ddfbd241043b8d75b4eaf22 | 2022-08-23 14:59:59.531351  
(11 rows)  
Time: 0.603 ms  
```  
扫描降低到了47个block, 同时避免了排序. 整体SQL耗时从`5508.182`毫秒降低到了`0.6`毫秒.    
```  
                                                                                  QUERY PLAN                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 CTE Scan on tmp  (cost=61.21..63.23 rows=100 width=44) (actual time=0.061..0.342 rows=11 loops=1)  
   Output: (tmp.t).gid, (tmp.t).info, (tmp.t).crt_time  
   Filter: (tmp.* IS NOT NULL)  
   Rows Removed by Filter: 1  
   Buffers: shared hit=47  
   CTE tmp  
     ->  Recursive Union  (cost=0.43..61.21 rows=101 width=69) (actual time=0.047..0.316 rows=12 loops=1)  
           Buffers: shared hit=47  
           ->  Subquery Scan on "*SELECT* 1"  (cost=0.43..0.50 rows=1 width=69) (actual time=0.047..0.048 rows=1 loops=1)  
                 Output: "*SELECT* 1".t  
                 Buffers: shared hit=4  
                 ->  Limit  (cost=0.43..0.50 rows=1 width=81) (actual time=0.046..0.047 rows=1 loops=1)  
                       Output: tbl_log_1.*, tbl_log_1.gid, tbl_log_1.crt_time  
                       Buffers: shared hit=4  
                       ->  Index Scan using idx_tbl_log_1 on public.tbl_log tbl_log_1  (cost=0.43..338005.99 rows=5000000 width=81) (actual time=0.045..0.046 rows=1 loops=1)  
                             Output: tbl_log_1.*, tbl_log_1.gid, tbl_log_1.crt_time  
                             Buffers: shared hit=4  
           ->  WorkTable Scan on tmp tmp_1  (cost=0.00..5.97 rows=10 width=32) (actual time=0.019..0.019 rows=1 loops=12)  
                 Output: (SubPlan 1)  
                 Filter: (tmp_1.* IS NOT NULL)  
                 Rows Removed by Filter: 0  
                 Buffers: shared hit=43  
                 SubPlan 1  
                   ->  Limit  (cost=0.43..0.58 rows=1 width=81) (actual time=0.019..0.019 rows=1 loops=11)  
                         Output: tbl_log.*, tbl_log.gid, tbl_log.crt_time  
                         Buffers: shared hit=43  
                         ->  Index Scan using idx_tbl_log_1 on public.tbl_log  (cost=0.43..240899.23 rows=1666667 width=81) (actual time=0.018..0.018 rows=1 loops=11)  
                               Output: tbl_log.*, tbl_log.gid, tbl_log.crt_time  
                               Index Cond: (tbl_log.gid > (tmp_1.t).gid)  
                               Buffers: shared hit=43  
 Planning:  
   Buffers: shared hit=48  
 Planning Time: 0.538 ms  
 Execution Time: 0.391 ms  
(34 rows)  
```  
练习:    
更多例子等你反馈, 欢迎联系我.    
甚至你要了解数据分布, 扫描方法; 掌握数据库的基本原理(存储结构、索引结构、扫描优化器算法等)对优化是非常有帮助的, 可以帮助你从根源找问题并提出优化思路.    
下面有个例子:  
[《PostgreSQL join+order by limit的优化例子 - 说明数据分布与扫描方法对优化的关键作用》](../202208/20220826_01.md)    
背景知识:   
1 代码分析  
https://www.man7.org/linux/man-pages/man1/perf.1.html   
2 计划分析  
https://www.postgresql.org/docs/devel/sql-explain.html   
[《PostgreSQL explain analyze 火山图火焰图 图形化性能分析软件 pg_flame》](../202012/20201217_02.md)    
[《PostgreSQL explain, parser, execute 过程资源使用统计分析 - perf , debug , log_planner_stats , log_xxx_stats》](../202011/20201105_04.md)    
[《跨云的K8S cloud native postgresql管理系统 谁在|会用?  PG SaaS或工具或插件类产品 谁在|会用?  (SQL规整、执行计划解读和优化建议、参数优化、AWR、索引推荐、错误日志解读和应对策略)》](../202105/20210517_01.md)    
[《PostgreSQL 查询当前执行中sql的执行计划 - pg_show_plans》](../202004/20200403_04.md)    
3 常用SQL   
[《PostgreSQL DBA最常用SQL》](../202005/20200509_02.md)    
[《PostgreSQL dba常用扩展函数库 - pg_cheat_funcs》](../202003/20200324_41.md)    
[《PostgreSQL DBA 日常管理 SQL》](../201812/20181204_01.md)    
[《PostgreSQL 实时健康监控 大屏 - 低频指标 - 珍藏级》](../201806/20180613_04.md)    
[《PostgreSQL 实时健康监控 大屏 - 高频指标(服务器) - 珍藏级》](../201806/20180613_03.md)    
[《PostgreSQL 实时健康监控 大屏 - 高频指标 - 珍藏级》](../201806/20180613_02.md)    
4 锁等待分析  
[《PostgreSQL 14 preview - 支持 lwlock blocking 诊断 - 增加 pg_lwlock_blocking_pid》](../202011/20201110_04.md)    
[《PostgreSQL 谁堵塞了谁（锁等待检测）- pg_blocking_pids, pg_safe_snapshot_blocking_pids》](../201902/20190201_02.md)    
[《PostgreSQL 谁堵塞了谁（锁等待检测）- pg_blocking_pids》](../201903/20190304_01.md)    
[《PostgreSQL 锁等待监控 珍藏级SQL - 谁堵塞了谁》](../201705/20170521_01.md)    
[《PostgreSQL 锁等待排查实践 - 珍藏级 - process xxx1 acquired RowExclusiveLock on relation xxx2 of database xxx3 after xxx4 ms at xxx》](../201806/20180622_02.md)    
[《PostgreSQL 锁等待跟踪》](../201603/20160318_02.md)    
5 索引推荐  
[《DB吐槽大会,第35期 - "富人"的烦恼?PG 不会自动选择索引类型》](../202109/20210904_01.md)    
[《PostgreSQL 自动化后台并行创建 多索引, 加速导入速度 - pg_parallizator》](../202004/20200403_03.md)    
[《PostgreSQL 自动化索引 - auto-indexing-PostgreSQL》](../202003/20200326_21.md)    
[《PostgreSQL SQL自动优化案例 - 极简，自动推荐索引》](../201801/20180111_02.md)    
[《自动选择正确索引访问接口(btree,hash,gin,gist,sp-gist,brin,bitmap...)的方法》](../201706/20170617_01.md)    
[《PostgreSQL 索引推荐 - HypoPG , pg_qualstats》](../201908/20190804_02.md)    
[《powa4 PostreSQL Workload Analyzer - PostgreSQL监控工具、带WEB展示 - 索引推荐,等待事件分析,命中率,配置变更跟踪等》](../201905/20190520_01.md)    
[《PostgreSQL 商用版本EPAS(阿里云ppas(Oracle 兼容版)) 索引推荐功能使用》](../201801/20180113_02.md)    
[《PostgreSQL 9种索引的原理和应用场景》](../201706/20170627_01.md)    
[《PostgreSQL 复杂SQL执行计划优化修正插件: pg_plan_inspector , pg_plan_advsr , pg_hint_plan , pg_store_plans》](../202207/20220714_02.md)    
6 memory context 分析  
[《PostgreSQL 15 preview - pg_log_backend_memory_contexts 增强, 可打印辅助进程(vacuum, checkpointer等)的内存信息》](../202201/20220112_01.md)    
[《PostgreSQL 14 preview - 打印其他会话的memory context, 诊断内存消耗问题 - pg_log_backend_memory_contexts(pid)》](../202104/20210407_06.md)    
[《PostgreSQL 14 preview - 查看backend process的memory context》](../202011/20201110_01.md)    
[《PostgreSQL cheat functions - (内存上下文\planner内容\memory context等常用函数)》](../201809/20180908_01.md)    
7 固定、篡改、保存执行计划. (对于SQL不能修改的场景, 解决SQL因执行计划不正确产生的问题.)  
[《PostgreSQL hint pg_hint_plan 的详细用法》](../202103/20210327_03.md)    