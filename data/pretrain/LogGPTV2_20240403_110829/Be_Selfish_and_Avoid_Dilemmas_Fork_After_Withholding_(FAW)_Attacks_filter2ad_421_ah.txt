rounds once. Damage to the a(cid:138)acker due to detection would be
more visible even if the damage decreases as the number of in(cid:128)l-
tration miners (i.e., L) increases. However, this scheme also causes
high reward variance, which might make it di(cid:129)cult for the pool
manager to a(cid:138)ract more power. (cid:140)erefore, he should be cautious
about adopting this new reward system, even if it can decrease the
risk of the FAW a(cid:138)ack.
11 CONCLUSION
In this paper, we have proposed FAW a(cid:138)acks in which an a(cid:138)acker
withholds a block in a target pool and submits it when an external
miner propagates a valid block. Such an a(cid:138)ack can generate an
intentional fork. Our a(cid:138)ack not only improves the practicality of
sel(cid:128)sh mining but also yields rewards equal to or greater than those
of BWH a(cid:138)acks. Unlike the “miner’s dilemma” that arises in a BWH
a(cid:138)ack game, an FAW a(cid:138)ack game can produce a clear winner in
the Nash equilibrium point – the larger mining pool gains while
the smaller pool loses. Interestingly, rational behavior of the target
pool manager also makes FAW a(cid:138)acks more pro(cid:128)table. Participants
in the Bitcoin network want a cheap and e(cid:129)cient defense against
a(cid:138)acks, including FAW a(cid:138)acks, without introducing major changes
to the Bitcoin protocol or causing side-e(cid:130)ects. Unfortunately, we
cannot (cid:128)nd such a defense, and discovering a solution remains an
open problem. (cid:140)erefore, we leave it as a future work. (cid:140)e irrele-
vance of the miner’s dilemma unlike BWH a(cid:138)acks and practicality
unlike sel(cid:128)sh mining means that proof-of-work cryptocurrencies
are expected to see large miners executing FAW a(cid:138)acks.
ACKNOWLEDGEMENT
(cid:140)is research was supported by the MSIT (Ministry of Science and
ICT), Korea, under the ITRC (Information Technology Research
Center) support program (IITP-2017-2015-0-00403) supervised by
the IITP (Institute for Information & communications Technology
Promotion).
[8]
REFERENCES
[1] [1500 TH] p2pool: Decentralized, DoS-resistant, Hop-Proof pool. h(cid:138)ps://
bitcointalk.org/index.php?topic=18313.14900. (2017). [Online; accessed 3-May-
2017].
[2] Moshe Babaio(cid:130), Shahar Dobzinski, Sigal Oren, and Aviv Zohar. 2012. On Bitcoin
[3] Lear Bahack. 2013. (cid:140)eoretical Bitcoin A(cid:138)acks with Less than Half of the
and Red Balloons. In Conference on electronic commerce. ACM.
Computational Power (dra(cid:137)). arXiv preprint arXiv:1312.7013 (2013).
03-May-2017].
[4] Bitcoin Mining Pools. h(cid:138)ps://bitcoinchain.com/pools. (2017). [Online; accessed
[5] Eligius: 0% Fee BTC, 105% PPS NMC, No registration, CPPSRB. (2014). h(cid:138)ps:
//bitcointalk.org/?topic=441465.msg7282674 [Online; accessed 28-Oct-2016].
[6] BITNODES. h(cid:138)ps://bitnodes.21.co/. (2016). [Online; accessed 30-Sep-2016].
[7] Blockchain Market Price.
h(cid:138)ps://blockchain.info/ko/charts/market-price?
[16]
(2013).
timespan=all. (2016). [Online; accessed 30-Sep-2016].
Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A
Kroll, and Edward W Felten. 2015. SoK: Research Perspectives and Challenges
for Bitcoin and Cryptocurrencies. In Symposium on Security and Privacy. IEEE.
[9] Danny Bradbury. 2013. (cid:140)e Problem with Bitcoin. Computer Fraud & Security
2013, 11 (2013).
[10] Vitalik Buterin.
the Bit-
coin Network.
h(cid:138)ps://bitcoinmagazine.com/articles/
sel(cid:128)sh-mining-a-25-a(cid:138)ack-against-the-bitcoin-network-1383578440/ [Online;
accessed 31-Oct-2016].
Sel(cid:128)sh Mining: A 25% A(cid:138)ack Against
[14] DOGECOIN. h(cid:138)p://dogecoin.com/. (2016). [Online; accessed 30-Sep-2016].
[15]
[11] Miles Carlsten, Harry Kalodner, S Ma(cid:138)hew Weinberg, and Arvind Narayanan.
2016. On the Instability of Bitcoin without the Block Reward. In Conference on
Computer and Communications Security. ACM.
[12] Nicolas T Courtois and Lear Bahack. 2014. On Subversive Miner Strategies
and Block Withholding A(cid:138)ack in Bitcoin Digital Currency. arXiv preprint
arXiv:1402.1718 (2014).
[13] Christian Decker and Roger Wa(cid:138)enhofer. 2013. Information Propagation in the
Bitcoin Network. In International Conference on Peer-to-Peer Computing. IEEE.
I(cid:138)ay Eyal. 2015. (cid:140)e Miner’s Dilemma. In Symposium on Security and Privacy.
IEEE.
I(cid:138)ay Eyal, Adem Efe Gencer, Emin G¨un Sirer, and Robbert Van Renesse. 2016.
Bitcoin-NG: A Scalable Blockchain Protocol. In Symposium on Networked Systems
Design and Implementation. Usenix.
I(cid:138)ay Eyal and Emin G¨un Sirer. How to Disincentivize Large Bitcoin Mining
Pools. (2014). [Online; accessed 1-May-2017].
I(cid:138)ay Eyal and Emin G¨un Sirer. 2014. Majority Is Not Enough: Bitcoin Mining
Is Vulnerable. In International Conference on Financial Cryptography and Data
Security. Springer.
[19] Arthur Gervais, Ghassan O Karame, Karl W¨ust, Vasileios Glykantzis, Hubert
Ritzdorf, and Srdjan Capkun. 2016. On the Security and Performance of Proof
of Work Blockchains. In Conference on Computer and Communications Security.
ACM.
[20] Ghassan O Karame, Elli Androulaki, and Srdjan Capkun. 2012. Double-spending
Fast Payments in Bitcoin. In Conference on Computer and Communications Secu-
rity. ACM.
[21] Ele(cid:137)herios Kokoris Kogias, Philipp Jovanovic, Nicolas Gailly, Ismail Kho(cid:129), Linus
Gasser, and Bryan Ford. 2016. Enhancing Bitcoin Security and Performance with
Strong Consistency via Collective Signing. In Security Symposium. Usenix.
[22] Litecoin. h(cid:138)ps://litecoin.info/Litecoin. (2016). [Online; accessed 30-Sep-2016].
[23] Loi Luu, Viswesh Narayanan, Chaodong Zheng, Kunal Baweja, Seth Gilbert,
and Prateek Saxena. 2016. A Secure Sharding Protocol for Open Blockchains. In
Conference on Computer and Communications Security. ACM.
[24] Loi Luu, Ratul Saha, Inian Parameshwaran, Prateek Saxena, and Aquinas Hobor.
2015. On Power Spli(cid:138)ing Games in Distributed Computation: The Case of Bitcoin
Pooled Mining. In Computer Security Foundations Symposium (CSF). IEEE.
Practical Decentralized Pooled Mining. (2017).
[25] Loi Luu, Yaron Velner, Jason Teutsch, and Prateek Saxena. SMART POOL:
[26] Ralph C Merkle. 1980. Protocols for Public Key Cryptosystems. In Symposium
on Security and privacy. IEEE.
[27] Andrew Miller, Ari Juels, Elaine Shi, Bryan Parno, and Jonathan Katz. 2014.
Permacoin: Repurposing bitcoin work for data preservation. In Symposium on
Security and Privacy. IEEE.
[28] Andrew Miller, James Li(cid:138)on, Andrew Pachulski, Neal Gupta, Dave Levin, Neil
Spring, and Bobby Bha(cid:138)acharjee. Discovering Bitcoin’s Public Topology and
In(cid:131)uential Nodes. (2015).
[29] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system. (2008).
[30] Kartik Nayak, Srijan Kumar, Andrew Miller, and Elaine Shi. 2016. Stubborn
Mining: Generalizing Sel(cid:128)sh Mining and Combining with an Eclipse A(cid:138)ack. In
European Symposium on Security and Privacy. IEEE.
com/double-spending-risk-bitcoin-network-fork/. (2016).
30-Sep-2016].
[31] Double Spending Risk Remains A(cid:137)er July 4th Bitcoin Fork. h(cid:138)ps://www.coindesk.
[Online; accessed
[17]
[18]
k = 1
foreach Pi ⊂ P do
Algorithm 2 FAW a(cid:138)ack against n pools
1: A: (cid:140)e miner set of an a(cid:138)acker
2: Pj: (cid:140)e miner set of a target pool j
3: P: ∪Pj
4: Fk: (cid:140)e k-th found FPoW for one round
5: Fwh,i: (cid:140)e FPoW found by A in the pool i
6: X ← work(Y): (cid:140)e miner set Y (cid:128)nds FPoW X
7: Y ← submit(X): FPoW X is submi(cid:138)ed to the manager of Y
8: publish(Y , X): (cid:140)e manager of Y publishes FPoW X
9: discard(X): An a(cid:138)acker discards FPoW X
10: function round
11:
12:
Fwh,i = ∅
13:
14: Generate a Fork:
if Fk ← work(A ∩ Pc) then
15:
16:
else if Fk ← work(Ac ∩ Pi) then
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39: end function
publish(Ac ∩ Pc , Fk)
Pi ← submit(Fwh,i)
publish(Pi , Fwh,i)
publish(Ac ∩ Pc , Fk)
publish(A, Fk)
Pi ← submit(Fk)
publish(Pi , Fk)
if Fwh,i (cid:44) ∅ then
end if
Fk ← work(A ∩ Pi)
if Fwh,i = ∅ then
else
end if
k++
goto Generate a Fork
else if Fk ← work(Ac ∩ Pc) then
Fwh,i = Fk
discard(Fk)
end foreach
end if
else
else
(cid:46) Fork, Case C, D
(cid:46) Case E
(cid:46) Case A
(cid:46) Case B
[33]
[32] Proof of Work. h(cid:138)ps://en.bitcoin.it/wiki/Proof of work. (2016). [Online; ac-
[34] Meni Rosenfeld. 2011. Analysis of Bitcoin Pooled Mining Reward Systems. arXiv
[35] Ayelet Sapirshtein, Yonatan Sompolinsky, and Aviv Zohar. 2015. Optimal Sel(cid:128)sh
cessed 30-Sep-2016].
J Ben Rosen. 1965. Existence and Uniqueness of Equilibrium Points for Concave
n-person Games. Econometrica: Journal of the Econometric Society (1965).
preprint arXiv:1112.4980 (2011).
Mining Strategies in Bitcoin. arXiv preprint arXiv:1507.06183 (2015).
[36] Yonatan Sompolinsky and Aviv Zohar. 2015. Secure high-rate transaction pro-
cessing in Bitcoin. In International Conference on Financial Cryptography and
Data Security. Springer.
[37] Stratum Mining Protocol. h(cid:138)ps://en.bitcoin.it/wiki/Stratum mining protocol.
(2016). [Online; accessed 30-Sep-2016].
[38] Gavin Wood. 2014. Ethereum: A secure decentralised generalised transaction
ledger. Ethereum Project Yellow Paper 151 (2014).
[39] Ren Zhang and Bart Preneel. 2017. Publish or Perish: A Backward-Compatible
Defense Against Sel(cid:128)sh Mining in Bitcoin. In Cryptographers’ Track at the RSA
Conference. Springer.
APPENDIX A
publish(A, Fk)
P ← submit(Fk)
publish(P, Fk)
if k (cid:44) 1 then
k = 1
if Fk ← work(A ∩ Pc) then
else if Fk ← work(Ac ∩ P) then
Algorithm 1 FAW a(cid:138)ack against one pool
1: A: (cid:140)e miner set of an a(cid:138)acker
2: P: (cid:140)e miner set of a target pool
3: Fk: (cid:140)e k-th found FPoW for one round
4: X ← work(Y): (cid:140)e miner set Y (cid:128)nds FPoW X
5: Y ← submit(X): FPoW X is submi(cid:138)ed to the manager of Y
6: publish(Y , X): (cid:140)e manager of Y publishes FPoW X
7: discard(X): An a(cid:138)acker discards FPoW X
8: function round
9:
10: Generate a Fork:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32: end function
publish(Ac ∩ Pc , Fk)
P ← submit(F1)
publish(P, F1)
publish(Ac ∩ Pc , Fk)
end if
Fk ← work(A ∩ P)
if k (cid:44) 1 then
discard(Fk)
end if
k++
goto Generate a Fork
else if Fk ← work(Ac ∩ Pc) then
end if
else
else
(cid:46) Fork, Case C
(cid:46) Case D
(cid:46) Case A
(cid:46) Case B