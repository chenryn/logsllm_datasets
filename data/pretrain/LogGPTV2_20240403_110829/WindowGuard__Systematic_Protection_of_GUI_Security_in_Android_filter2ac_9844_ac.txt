mechanism).
In Android, app navigation always starts from the launcher
activity, the ﬁrst focused activity after system boot-up and the
primary app navigation “hub”. A user starts a job by opening
an app activity from the launcher and later proceeds to other
activities as the job goes on. The states of previous activities
in a job are saved and can later be resumed by tapping the
back button. Once the current job is ﬁnished, one can go back
to the launcher via the home button, or switch to another job
by going to the recent task list (pressing the recent button),
another navigation “hub”.
AWI complies with this norm of app navigation by in-
troducing activity session. An activity session is a sequence
Fig. 4. An activity session transition example.
of activities that guide the user from the launcher activity to
the currently focused activity. It intends to capture the user’s
visual experience of previous activities,
the basic building
blocks of an app, when doing a particular job. Speciﬁcally,
as shown in Figure 3, each node indicates an activity. An
activity session always starts from the launcher activity. When
a new activity is displayed on screen, it is chained to the end
of the current activity session. There can be multiple activity
sessions at the same time. All the activity sessions form a
tree: the launcher activity is the root and the only joining
point of all activity session branches. The focused activity
(belonging to the display owner) is always at the tail of an
activity session, which is called focused activity session (e.g.
launcher → B1 → B2 in Figure 3).
The user can switch to another activity session anytime,
called activity session transition. For instance, as illustrated in
the diagram of Figure 3, focused activity B2 may transit to A2
following three routes (the dashed line). In 1 and 2, the user
can either go to the launcher or the recent task activity, and
then resumes A2. In particular, the recent task activity belongs
to system UI and is only started upon user pressing the recent
button. Since its function is to be a “hub” that facilities task
switch in the system, we regard the recent task activity itself as
a separate activity session that does not overlap with any other
activity sessions. In this sense, the transition from B2 to the
recent task activity is an activity session transition by itself.
In route 3, a focused activity transition can also occur directly
from B2 to A2. This can happen in many circumstances, e.g.,
launching an existing activity with special intent ﬂag, etc.
Although an activity session looks similar to a task in AMS,
the two are independent and have major differences as we
will see in Section III-C. Note that the sequence of activities
retained in an activity session may be saved in multiple
tasks/back stacks by AMS. Figure 4(a) shows such an example,
in which both the activity session and corresponding system
state are depicted. Activity A2 was launched by A1 but placed
into a new task in AMS (e.g. by specifying singleTask activity
attribute). Since A1 and A2 are displayed in a sequence, they
are regarded to be in the same activity session. If the focused
activity then transits from activity B2 to A1 as a result of
any of the above reasons, the original activity session will be
divided into two sessions (still rooted at the launcher activity),
as shown in Figure 4(b).
Given these two important notions, we next introduce the
three aspects of legitimacy that AWI attempts enforce on the
system states. But before we proceed, to better understand
these principles, we ﬁrst simplify the complex GUI system
6
A1	B2	32112A2	B1	Launch	er	Recent	Tasks	Ac4vity		Focused	Ac4vity		Focused	Ac4vity		Transi4on		A1	B2	A2	B1	LA1	B2	A2	B1	L(a)	(b)	A1	L	A2	B1	B2	AMS	A1	L	A2	B1	B2	AMS	and formalize it in a state transition model.
B. System State Transition
The state transition of the GUI system is described by
(S, Λ,→), where S = {SAM S, W S}. S denotes the set
of system states; SAM S indicates the set of system states
in AMS; W S stands for the set of window stack states in
WMS. Λ indicates a set of events and conditions that invoke
a set of viable transition →. Speciﬁcally, given a system state
s ∈ SAM S and a window stack state ws ∈ W S, they have the
following states:
•
•
s = {af ocus, β}, where β = {bs1, bs2, ..., bsn},
and bs = (a1, a2, ..., am). af ocus denotes the current
focused activity. β is a set of all n back stacks in
the system. bs denotes a back stack, each in turn
includes an ordered list of activities,
indicated by
(a1, a2, ..., am).
ws = (w1, w2, ..., wn). ws represents the window
stack containing a total of n windows. w1 and wn
represent the bottom and the top windows in the stack
respectively. Each window wi (1 ≤ i ≤ n), includes
a few parameters such as visibility, size, transparency,
etc.
C. System State Legitimacy
Android window integrity is composed of three types of
legitimacy: the legitimacy of the past activity session, the
legitimacy of the current visible windows, and the legitimacy
of the future windows to be displayed. Instead of being a rigid
security model, AWI adapts to the diversity of user needs by
incorporating user’s choice in the model. Once an integrity
violation is detected, it is up to the user to make the ﬁnal
decision. This makes AWI both usable and practical to be
employed in reality.
Legitimacy of activity session. An activity session looks
similarly to a task’s back stack at the ﬁrst glance, e.g. both keep
a record of previous activities. However, activity session is not
a simple duplication of task. A task is a container that keeps
existing activity instances. Although the order of activities in
a back stack is typically reserved and follows the order of
activity launch most of the time, it is not always true. In fact,
Ren et. al. [28] demonstrated that the back stacks could be
manipulated outrageously by abusing the task features, e.g.,
an activity could be relocated to other tasks; app navigation
behavior could be changed; a full back stack of activities could
be created without user’s awareness. This ﬂexibility however
contradicts with user’s common sense, e.g., it is commonly
believed that back button pressing should resume activities
that the user has previously seen; clicking an app icon from
the launcher ought to start the app window (which may not
be the case), and so on. By taking advantage of these pitfalls,
the most dreadful task hijacking attacks could be launched, as
listed in Table I.
the difference between the two. Any disparity between the
two indicates a mismatch of user’s visual experience and
system state, and is considered suspicious. More speciﬁcally,
the model considers the following statement as a proper system
state:
n} ⊆ β : sf g = (bs∗
1 (cid:107) bs∗
2 (cid:107), ...,(cid:107) bs∗
n)
∃{bs∗
1, bs∗
2, ..., bs∗
where β indicates the set of all back stacks, in which bs∗
i
is one of them. sf g denotes the foreground activity session,
composed of an ordered list of activities. In other words, it
checks if there exists a subset of back stacks, such that the
concatenation of their ordered activity lists is the same as the
ordered activities in the foreground activity session.
The failure of activity session integrity check may indicate
possible attack, but it may also come from the use of task
features for legitimate purposes. The distinction lies in an
important premise of task hijacking: a task hijacking attack
happens only if the malicious activities manage to reside in
the same task together with the legitimate activities. Given
this premise, AWI iterates the back stacks that are part of the
focused activity session. If the activities in the back stacks are
all from the same app, AWI regards it to be valid. Otherwise,
a notiﬁcation is created to alert the user about the event and
possible security hazard.
Legitimacy of current visible windows After an activity
gets focus and becomes the display owner, other than its own
activity window(s), there are usually other visible windows
in the window stack. To prevent the display owner’s activity
window from being disturbed by unauthorized windows from
other apps, an overhaul of the window stack is necessary.
Speciﬁcally, the model speciﬁes that no other visible windows,
except the windows belonging to the display owner app and
a set of white-listed windows, should overlay on top of
the focused activity window in the window stack. To put it
formally, the model have the following guarantees:
¬∃wi ∈ ws : wi.visible = true, i > k,
wi /∈ F ocusedApp, wi /∈ L
where wi is the ith window from the bottom of window stack;
k represents the index of the top focused activity window in
the window stack; and L denotes a white list of windows.
The white list typically includes system windows and other
windows explicitly speciﬁed by the user, as we will discuss in
the implementation in Section IV.
Legitimacy of future windows. There is a plethora of ap-
proaches to launch a window in Android, but all windows
are in two categories: free window and activity window. The
legitimacy of future window is deﬁned as: given the current
display owner, the principal (identiﬁed by UID) that initiates
the launch of a new window must be either the display owner
app itself or from a white list speciﬁed by the user. This criteria
holds for both free window and activity window. We now
explain the two cases respectively.
On the other hand, activity session is designed to simulate
and preserve user’s visual experience by saving the sequence
of visible activities when the user is doing a job. Every time
the focused activity changes, the foreground activity session is
used to check the integrity of the back stacks by comparing
Although third-party app or package can launch free win-
dows, such as toast window (without any permission), or
other system windows (requires SYSTEM_ALERT_WINDOW
permission), many free windows are typically launched by
the system or system apps. The model considers a white list
7
of UIDs of the system processes (e.g. system server) and
system packages (e.g. system UI) trustworthy, and allow their
windows being displayed freely. Moreover, there are two types
of windows that the system treats differently: input window
(including input method or dialog windows), and wallpaper
window. An input window is registered in the Input Manager
Service. When a window requests input method, the Input
Manager Service launches the input window on top of the
client window in the window stack. Wallpaper window is
similar, except that it is started by a wallpaper service and
is placed under the client window. Since the type and the
client window of an input or wallpaper window are securely
speciﬁed by the system, they are considered trustworthy (as
long as the input method or wallpaper packages themselves
are legitimate). The model allows input or wallpaper windows
being started as long as their client window is one of the
currently visible windows.
When an activity window is started, either (1) the focused
activity remains the same (e.g. launching another top-level
app window or a sub-window) or (2) the focused activity
changes, and the activity window belongs to the newly focused
activity. The ﬁrst case is always valid because the display
owner is unchanged and the activity window must be started
by the display owner app (assured by the security guarantee
of app window tokens). In the second case, the change of
focused activity implies a possible change of display owner.
Given the ﬂexibility of Android APIs and task features, there
are numerous possibilities that would result in the change of
display owner, which we will characterize in Section IV-A.
Despite the complexity, the same principle still holds, i.e., the
change of focused app must be initiated by the display owner
app or white-listed principals.
Among the many possibilities of focused activity change,
back button pressing is special. Back button is one of the most
popular user navigation control always available on screen. By
default, one can navigate backward to the previous screens by
pressing the back button. In this case, the system destroys
the current focused activity and resumes the next activity
on back stack. However, the back button behavior can be
changed by overriding the onBackPressed callback function
of the focused activity. Although this ﬂexibility is useful in
many cases, e.g., fragment or webview navigation within the
same activity, it is sometimes confusing to the user if being
mis-used, e.g., instead of “going back”, it re-directs the user to
some other activity. The model does not regard the customized
back behavior malicious as it is deﬁned and initiated by the
focused activity. That being said, the model keeps an eye on
the program behaviors after a back button pressing, and raises
a toast message when user confusion is possible.
We implement
IV. WINDOWGUARD
the AWI as a module for the Xposed
framework, a popular code-injection framework for rooted
Android devices. The implementation, namely WindowGuard,
is tested on Google Nexus 5 phone and can be used in Android
4.4, Android 5.x and Android 6.0 with minor changes. An
Xposed module can hook arbitrary functions of the system or
apps at runtime and change their behaviors without modifying
the system or apps themselves. WindowGuard can be used on
all Android device brands that the Xposed framework supports.
These features makes WindowGuard practical to be distributed
to a large number of Android devices and provide immediate
protection.
A. AWI Model Implementation
WindowGuard implements AWI by hooking 26 functions
of AMS, WMS, Package Manger Service (WMS), and system
UI in a total of 2300 lines of code.
Activity session integrity. As previously depicted in Figure 3,
activity sessions are implemented as a tree data structure
maintained in the system server process (a privileged process
hosting all system services implemented in Java). Each node
represents an activity, which links to its predecessor and
successor activities. Activity sessions share the same root, the
launcher activity. A new activity node will be added to the
current foreground activity session only if a new activity ob-
tains the focus (its windows become visible), and is destroyed
together with its corresponding activity. WindowGuard hooks
functions in AMS to perform back stack integrity check upon
the change of focused activity, as discussed in Section III-C.
Access control of free windows Given a display owner, access
control is enforced on the free windows that are about to be
displayed or resumed based on the discussion in the legitimacy
of future windows. For those existing visible windows that
violate the window legitimacy criteria, free windows are made
invisible, and activity windows (if there is any) are reordered
under the focused activity windows in the window stack.
To achieve this, WindowGuard hooks a handful of WMS
functions performing functions such as adding windows to the
window stack, window stack reordering, and window visibility
control. Access control of free window helps prevent window
overlay attacks such as user spooﬁng or a ransomware denial-
of-service attack. In a denial-of-service attack, even if the
ransomware manages to “lock” the screen using a free window,
the use can always click home or recent activity button to
escape the lockscreen.
Safeguarding focused activity transition Focused activity
transition happens frequently during the use of device in
practice. It happens either during activity launch or resumption
and may result
the
focused activity transition must be initiated by the display
owner app in either cases, as previously discussed. Due to
the complex app navigation behaviors, the focused activity
transition requires close monitoring of a variety of system
functions or APIs.
in a new display owner. In principle,
A new activity gets focus when it is launched by one of
the startActivity function calls from an app. The origin of
the caller app is examined. If the caller app UID is not the
current display owner or one of the white-listed principals,
an alert notiﬁcation with detailed information is prompted to
the user for conﬁrmation to proceed. This effectively prevents
attacker from overlaying an malicious activity window on top
of a victim app. Similarly, resumption of existing activity can
also trigger focused activity transition. Activity resumption
could occur either passively or actively. For example,
the
next activity on the back stack is passively resumed when
the current focused activity quits and is destroyed by the
system. It is perfectly valid in this case for the display owner
8
to yield its own privilege. Activity resumption can also be
actively initiated by invoking a set of APIs such as startAc-
tivity, moveTaskToFront/Back, or moveTaskForward/Backward.