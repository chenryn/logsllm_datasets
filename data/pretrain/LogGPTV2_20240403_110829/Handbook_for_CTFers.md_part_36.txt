---
## Page 339
5.2 Static Analysis
325
List of availoole Litrarv nodules
口
Fite
Cotlc Cibrory none
Ster v6.s/7.2 str* lsss 16it
tpdns
woPal 7.0
Turbo 7sral Stertup
DIL for TPv v6.0/V7. 0
tysie
tysi@
tgt*
hitisa Testws (s4i)
432,14
s3enfe
RPC 3.1-14.0 32%it
slertf
Kierosrdt Yiwalc 214/et ratise
lindovs CE rmtise a Irc far 206B
e32uerf
Eierossft Virusalt miversl rutise
04324pt
F043246b
SaK CAa-libr wy
C4. x/5.0 0g+nGL
4.2/5.0 e
06442*
c64st2
 16119 2 1/22
e64sfe
04rts
Eiressft Yiwa v7/14 66it rutias
RPC 7-14 64hit
64seb
SEX for vo64 7-14
7at2
64utr
Rierosrft ViwslC 64bit miversel ratiee
cOatl
VC7 ATL wegrt lilray
W06/14 Batrs (terelog) liberary
008/14 aZL so9wt Lilrery
SEX for ve7-14
n 1ileeias_eL)
CS+[
xlp
vc64
Fig, 5.30 The list of function signature libraries
(1) call analysis failed (see 3-UPX_packed_dump_SCY.exe)
First, using the aforementioned technique for finding the main( ) function, you can
quickly find the call to the main( ) function in the start( ) function (Fig. 5.32), locate
the main function and enter it (Fig. 5.33).
If we change the type of sub_271010 from “int _ _thiscall sub_271010(_dword)
to °int _ _cdecl sub_271010(_dword)",then the type of sub_271010 will be changed
to “int _ _cdecl sub_271010(_dword)". The decompiler will automatically
recompile to refresh and pop up the message “call analysis failed", see Fig. 5.34.
In fact, the reason for the error is that the decompiler made a mistake when
eror based on the address in front of the dialog box, then fix the prototype
looking for the arguments of this function call. It is easy to find the location of the
declaration of the function. In this case, the address of the error is 0x271006, press
G to jump to the target address, you can see *call sub_271010", which is the function
---
## Page 340
326
5 Reverse Engineering
liel liweye
Srgte
ft Yisu2C s0it wiresi rat
U
asit
.ait_suki.
n signz
ure library
Fig, 5.32
start() function
49
TL(
50
51
v11=（_DWORD·）_P_argc（）;
a2=sub_271000(*v11,v10,v9);
54LABEL 20:
53
@rsun):)
55
exit（a2）;
56
1(!v2)
57
cexit();
58
sub_27186F(1, 0);
59
*（_DWORD*)（a1-4）=-2;
09
result = a2;
1int _cdec] main(int argc, const char **argv, const char
IDA Viev-A
**envp
sub_27101e(std::cout);
return @;
Fig, 5.33 main( function
you just modified. Change the function prototype of sub_271010 back to the
original, then you can decompile it again.
---
## Page 341
5.2 Static Analysis
327
uarning
Deconpllatloo fallure:
271066: coll onolysls folled
Please refer to the nonuol to find opproprlote octlons
OK
Fig, 5.34 Call analysis failed
IOA Optlons
Disassenbly
Aealysis
StringsBrowserGrahMise
address represestat ion
Pisplay disassesbly line part#
 Eunction offsets
 Line
 Inclode segaent addresses
grefixes
on=graph)
 Stack 
 Use segpent senes
 Coenrets
Display disassebly 1ioes
 &epestable
 auto coments
nts
 Enety 1ines
 Basie block boundaries (noe-graph)
 Borders betgeen data/code (noe-grapb)
 Sgurce 1ine sunbers
Igstructicn Indestation (non*graph)
16
 Iry block lises
Cgments indentation (noengraph)
40
Line prefix esamplet seg000:0FE4
Right sangin (noe-graph)
70
Lov suspiciousness 1init 0s271000
Speces for Labulation
Bigh suspieiousoess 1iai 0s27A000
Cancel
Help
Fig, 5.35 The pop-up dialog box
(2) sp-analysis failed
At higher levels of optimization, the compiler will use rsp to reference all local
variables instead of frame pointer rbp. In order to find local variables, IDA looks for
and resolves them by tracking each instruction which modify rsp. If IDA has
problems tracing rsp will causes the failure decompilation.
Usually, the root cause of this problem is the incorrect calling convention of a
function call or the incorrect number of arguments to that function, which causes
IDA to miscalculate the amount of change in the stack pointer.
For this case, select the “Options  General” menu and check “Stack pointer" in
the pop-up dialog box, see Fig. 5.35.
---
## Page 342
328
5Reverse Engineering
UPX8:002710100
UPXO:00271011
111111111
UPXD:00271013
UPXB:00271015
004
UPXO1
10027101A
leg
offset SEH_271010
1201/200:0x
UPXO:
00271020
JPXO:
030
20l
UPXB:
100271024
:00271025
:00271026
034
UPXO:
PX0:
00271027
038
Push
eds
JPXO:
esx, ebp
eBx,
PX8:
0027102E
Dush
JPXD:
PXO:
00271032
aoy
eax, [ebp+var_C]
PX8:
08271838
s0V
[ebp+var_1e], esp
JPXO:
foy
1OV
X8:
foy
ebp
var_14], ebx
08271842
foy
[ebx]
9X0:
foy
ax,
var_24].8
PX0:
00271040
dd
[ecx+4]
0027104E
00271055
foy
ebp
eax
LIPXO:
LPXD:
00271054
Lsetz
test
s0V
oss,
LPXO:
00271059
51
edi,
hort
ed:
UPXB:
:00271058
short 1oc_27106C
lot
_271074
PXB:
UPXO:
0027105F
71050
test
esi,esi
UPXO:
UPXB:
00271061
08271063
test
1
edi, ed1
short 1oc_271074
UPXB:
UPXO:
00271065
00271067
g
cnp
es1,00h
short 1oc_27106C
LPXB:
0827106A
aqs
short 1oc_271074
1oc_27106C:
IPX8:06271060
↓sub_271e1e+551]
; C00E XREF: sub_271010+481)
UPX8:0027106C
340
sub
es1, e0h
UPX8:00271072
f901z20010xan
sbb
jnp
edi,0
short 1oc_271082
Fig, 5.36 The IDA analyzes the offset of the stack of ecach instruction
Then, the disassembly window will have an extra column next to the address of
each line. The IDA analyzes the offset of the stack of each instruction, see Fig. 5.36.
For programs that do not use dynamic length arrays, the offset of the stack before and
after the call remains the same after initialization is complete.
When you encounter such a problem, you need look at the stack pointers one by
one and compare them with the normal stack pointer change pattem. Then you can
quickly identify the problematic areas and modify them accordingly.
4. Explore other features of IDA
You can leam more about what IDA can do and how to use it, such as going through
IDA's menus, looking at right-click shortcuts in different places, seeing lists of all
shortcuts displayed in *Options  Shortcuts,” and so on.
---
## Page 343
5.3 Dynamic Debugging and Analysis
329
5.3 Dynamic Debugging and Analysis
Another basic approach to reverse analysis is dynamic analysis. Dynamic analysis is
actually running the program and observing the various behaviors of the program
when it runs, so as to analyze the function and algorithm of the program. This
requires a debugger, which can observe the program's registers, memory, and other
contextual information while program is running, and can also stop the program at a
specified address, and so on. This section wil introduce the basic methods of
dynamic debugging and the use of common debuggers.
5.3.1 Rationale for Debugging
If you have used an IDE debugger, you will know the various operations of
Suen ua uerod o 1dnu on uod e e suodyaq e Suas :Sur8nqap
the program line by line, choosing to enter or skip afunction as needed. Looking at
the values of variables while tracing to understand the state of the program, which
makes it easier to find the problem in the program.
The debugging process without the source code is similar to it. It just from source
code level trace to assembly statement level trace. You will look at registers, stacks,
memory instead of variables with known symbolic information.
5.3.2 OllyDBG and x64DBG
Both OllyDBG and x64DBG are debuggers for debugging executables in Windows.
h puy sumord q-#9 pue q usnqap soddns u uoomu e s! D9x
constantly developing and adding new features, while OllyDBG (OD) supports only
32-bit programs and is no longer updated.
OD does not seem to be necessary anymore. But it still has a place due to its early
release and the large number of community-contributed scripts and plug-ins which
implements advanced features such as shelling, anti-debugging, and so on.
x64DBG has a similar interface, functionality and shortcuts to OD, making it
easier to learn. x64DBG has an official website, which can be downloaded directly.
The unofficial modified version of OD is more popular.
1. open the file
After opening the debugger, you can see that the interface of the two debuggers is
almost same. The user can either drag a file into the main interface or open it using
the menu bar.
---
## Page 344
330
5 Reverse Engineering
The contents of each window will appear when the file is opened. x64DBG has
the same layout as OD. The upper left area is disassembly results, the lower left area
is memory data, the lower right area is stack data, and the upper right area is register.
2. Control program operation
In the disassembly window, press F2 to toggle the breakpoint state of the current
adressPress F8 f single-stp passing, Ffor single-stp nterin, F4 forrun
to the cursor position, and F9 for running,
Common breakpoint locations include address within the program and API called
by the program. Moreover, it has ability to interrupt the program while it is operating
q s,d  usn  un Aouu oods e (uxaum/upea) uo
in hardware breakpoint mechanism and the exception handling mechanism provided
by Windows. The hardware breakpoints are faster, but the count of hardware
breakpoints is limited. Selecting the destination address in the memory/stack win-
dow, then right-clicks it and selects *Breakpoints  Hardware Breakpoints" or
“Read/Write  Select Length" from the pop-up shortcut menu. The operation in
OllyDBG is similar to x64DBG, but it cannot set breakpoints in the stack window.
3. simple unpack
The challenge to this section is 3-UPX. One of the special scenarios for debugging
t sojsuen te tueslord jo ad eoads e s! oed, xoedun s! smopu yapun
program to regenerate the executable fl. It restores all or part of the transformation
results stored in the executable file when running, then resumes execution of the
original program. Packing exists for two reasons: compressed packing is used to
reduce the size of the program, and encrypted packing makes it more difficult for
crackers to reverse the program. Encrypted packing often increases the binary size,
so it needs to combine with compressed packing.
Some packing focus on compress the code to generate smaller executable files,
such as UPX, ASPack, etc. Some packing focus on protection of the code in orer to
prevent attackers, such as VMP, ASProtect, etc.
 as d pego  o eq ped  au s ueu
complexity of encryption packing requires a lot of experience to handle, we will not
delve into it.
We will focus on UPX, the most widely used packing in this section. Its a long-
soed jo ioea t spoddns yeq Suyoed uoissandoo smos-uado ppsgeis
and architectures.
The two methods for unpacking UPX are as follows.
Static method: UPX provides an unpacker, which can be used with the command
line argument -d. Sometimes it will fails and you need to switch to the correct
UPX version.
Dynamic method: UPX is open-source software that protectors can modify some
identifiers to make the official standard version of UPX fail to unpack. There are
I  Suxoedun sueup asn Aiensn adod Xd u paueqo aq ueo su Kueu
has been changed.
---
## Page 345
5.3 Dynamic Debugging and Analysis
331