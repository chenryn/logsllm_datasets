∀i ∈
hi
• Send m(cid:48) = m(cid:48)
1|| . . .||m(cid:48)
n||m(cid:48)
key
The receiver can recover the key K only after receiv-
ing all message blocks. He executes the following steps
• K = m(cid:48)
• mi = Dec(K ,m(cid:48)
key ⊕ h1 ⊕ h2 ⊕ . . .⊕ hn.
i) ∀ i ∈ 1, . . . ,n.
14 Detailed privacy analysis
14.1 TUC: A time-sensitive model for net-
works of machines
For quantifying the privacy guarantees of CoverUp, we
use the TUC framework as a time-sensitive model for
network of machines. TUC constitutes a model for net-
works of machines that is time-sensitive. In TUC, time
is represented as a rational number, and there is a global
time, on which the time of each machine depends. Each
machine has a local clock that is a function t in the global
time. This function represents potential delays or inaccu-
racies of the local timer. Moreover, TUC assigns to each
machine a speed s. Hence, a machine is after c step at
the global time c/s and the local timer of that machine
shows t(c/s).
The execution of a network of machines in TUC is
conducted by a single machine, called the execution, that
runs all participating machines as submachines. This
execution sequentially activates each machine, counts
the steps that each machine performs, and coordinates
the timely sending and receiving of messages between
the submachines. Due to the sequential activation of
machines, it can happen that one machine is already
far in the future compared to all other machines.
It is
shown [25] that all reasonable activation strategies lead
to the same results. As a consequence, we ignore that
TUC internally uses sequential activation and treat all
machines as if they are executed in parallel and run ac-
cording to their speed.
A party can consist of several parallel machines (e.g.,
several CPUs) that communicate to each other.
14.1.1 Timeless environment and attacker
As in the UC framework, TUC includes an environment
and an adversary. This environment and this adversary
can consist of several machines that work in parallel. A
20
natural way of modeling this capability is to represent the
environment and the adversary as a set of parallel ma-
chine. While such a model is more accurate, we decided
for the sake simplicity to over-approximate this strength
of the environment and the adversary by allowing both
parties to make an arbitrary (but poly-bounded) amount
of computation steps in one time-step.
14.1.2 Internet topology
As in the UC framework, TUC models how two ma-
chines directly communicate to each other. The inter-
net can, thus, be represented by a network of interme-
diary machines that (if honest) relay the message from
the sender to the destination. A partially global attacker
can, of course, compromise several of these machines.
Hence, we can abstract this network of machines by the
information which connections between protocol parties
leaks the message to the attacker. In addition to the pre-
vious model, we additionally need to specify the delay of
the network, i.e., how much time the connection between
two parties takes.
14.2 Description of protocols
We use two protocols namely πI and πV to denotes the
sequence of executions performed by the involuntary
and voluntary participants respectively. A protocol π
is deﬁned as a quadruplet {B,Π,SCoverUp,Smix}. Where
B,Π,SCoverUp and Smix denotes a browser, a set of opera-
tions, CoverUp server and the mix server respectively. A
browser B is deﬁned as a interactive Turing machine. B
has three ports namely user port, network port and out-
put port. B takes input from a user (and/or an attacker
A ) via the user port. All requests and responses to and
from remote servers such as SCoverUp and Smix is done
via the network port which provides a secure communi-
cation channel. The output port is utilized to send any
output result to the user e.g. data received from Smix.
Additionally a browser can also execute a JavaScipt code
which in turn can send request over network to a speciﬁc
recipient (e.g. Smix) via the network port. Upon receiv-
ing response, browser can send it to the user (and/or the
attacker). We specify two instance of browser, namely
BI and BV corresponding to πI and πV respectively. The
browser instance BV is BI with an extension E installed
in it. E is also an interactive Turing machine which in-
troduces additional transitions to B. Hence BV = BI(cid:107)E.7
Algorithm 1: Challenger Ch(πb,tnet ,tuser)
Notation: Ch challenger, A adversary, πb protocol (b ∈ {I,V}),
p ∈ {network, user} the interface over which the
message comes
1 Upon Initialization
begin
Initialize two empty FIFO queues Qnet ,Quser
2
4
5
6
7
3 Upon Receiving m from the A over interface p
begin
if p = user then
Quser.push(m)
else if p = network then
Qnet .push(m)
8 Invoke every tnet point in time begin
9
10
(m1,m2) ← Qnet .pop()
Send (m1,m2) over the network port to πb
11 Invoke every tuser point in time begin
12
13
(m1,m2) ← Quser.pop()
Send (m1,m2) as user inputs to πb
14 Whenever πb outputs m over the interface p begin
15
Send (m, p) to A
14.3 The challenger
Algorithm 1 describes the challenger Ch(π,tnet ,tuser).
We consider a message in form of a pair (m, p) where
m is the message itself in bitstring format and p denotes
to the port where m arrives. In our deﬁnition there can be
three types of ports:
1. u : Denotes to the user port where there can be in-
coming and outgoing data ﬂow from the browser
due to user activities. We denotes the activities
as Command (A) and Command (B) which relates
to mouse click events on the website of the entry
server and the CoverUp/mix server (speciﬁed in the
command), respectively.
2. N : Denotes to the network port where network
leakage in terms of trafﬁc pattern is observed.
3. CS : This the port where the entry server sends and
receives data. The outgoing data can be the pro-
grammed java script codes and HTML pages. The
incoming data consists of the response from the java
script code and the HTML page.
The challenger Chb relies on two FIFO queues QNET
and QBrowserπ for input which are populated by network
trafﬁc and the browser Bb respectively. Chb polls to both
of these queues in a predeﬁned time interval tq.
7(cid:107) is deﬁned as the combination of two state machine as de-
scribed in https://www.cs.cmu.edu/afs/cs/academic/class/
15671-f95/www/handouts/shared-memory/node1.html
21
14.4 Hybrid Games & main theorem
Protocol 1 BI : abstraction of the browser in πI (feed)
1 Upon Connecting to the entry server and receiving an iframe
Compose request r from the iframe
Send r to CoverUp server via secure channel
2
3
4 Upon Receiving a JavaScript code code from CoverUp server
begin
begin
Execute code begin
h f ← feed
data ← {0}k
send (h f(cid:107)Data) via the secure channel to the mix server
9 Upon Receiving D from mix server over the secure channel
begin
10
Send D to the user
Protocol 4 mix server(h f ) : the mix server side con-
stant time computation
1 Upon Receiving (h f(cid:107)IDint(cid:107)Data) from the secure channel
begin
FixedExecutionTime ← x
start ← timeNow()
if h f = bi− directional then
Initialize state with IDint
if stateExists() = TRUE then
Set state ← getState(IDint )
D ← covertData(state,Data)
Call UpdateState(state)
else
D ← broadcast
Sleep for (x− (timeNow()− start))
Send D over the secure channel
5
6
7
8
5
6
7
8
9
Protocol 2 BV : abstraction of the browser in πV (bi-
directional channel)
1 Upon Connecting to the entry server and receiving an iframe
Compose request r from the iframe
Send r to CoverUp server via secure channel
2
3
4 Upon Receiving a JavaScript code code from CoverUp server
begin
begin
Execute code begin
Data ← readBiDirectionalData()
Set h f ← bi− directional
Set IDint ← {0,1}k
Send (h f(cid:107)IDint(cid:107)Data) to the mix server
10 Upon Receiving D from mix server over the secure channel
begin
11
Send D to the user
Games 1-3 describe hybrid games which incorporate
small changes over Game 0 or Ch(πI) (protocol executed
by involuntary participants) and transform the protocol to
Ch(πV ) (protocol executed by voluntary participants) by
adding up a small amount of delay.
Protocol 3 CoverUp (r): CoverUp server side com-
putation
1 Upon Receiving a request r from a browser BI/V
begin
2
3
code ← JavaScript code snippet
Send code to BI/V
2
3
4
5
6
7
8
9
10
11
12
2
3
4
5
6
7
8
2
3
4
5
2
3
Game 1
1 Ch: Upon Receiving (m, p) from A for client
begin
if p = u & m = (Command(m1), Command(m2)) then
if b = 0 then
Send (Command(m1), Command(m2)) over u to
Browser(φ )
else
Send (Command(m1), Command(m2)) over u to
Browser(φ )
else
Send m over p to Browser(φ )
9 π1
I : Upon receiving a bi-directional request R from ωU
begin
10
RequestQueue.push(R)
Game 2
1 π2
V : Upon Initialization at Ch side
begin
Data ← readBiDirectionalData()
Set h f ← bi− directional
Set IDint ← {0,1}k
Send (h f(cid:107)IDint(cid:107)Data) to the mix server
Game 3
1 π3
V : Upon Receiving a request R = (h f(cid:107)IDint(cid:107)Data) at the mix
server side
begin
D ← mix server(h f ) (the Protocol 4 for the mix server)
Send D to Ch
14.5 Analysis of hybrid games
Lemma 1. Assume that πI and πV established a secure
channel in TUC (i.e., TLS in the real implementation).8
8Formally, a functionality FSCS, as in the UC framework, but secure
in TUC (see Appendix 14.1).
22
Assume that all cryptographic primitives in πV and πI
and secure in the TUC framework. Let πI + Γ be some
protocol that behaves just like πI, except that it incurs
additional delays, which add up to Γ. Then, there is a Γ
such that πI +Γ and πV are indistinguishable in the sense
of Deﬁnition 1 with a δ = µ for a function µ that is neg-
ligible in the security parameter. Moreover, the timing
leakage of πI + Γ and πV is 0 for any sampling rate.
Game 0 is deﬁned as Ch(πI,tnet ,tuser) which is the
challenger choosing protocol with only feed capabil-
ity (no interactive capability supported). Where as
Ch(πV ,tnet ,tuser) is the challenger who picks protocol in-
stance supporting interactive communication (browsing
and chatting). We assume that the operation that per-
forms on RequestQueue introduces ∆0 delay. Reading
of bi-directional data from the external application im-
poses ∆1 delay and modifying variables in the request
payload introduces ∆2 delay. We deﬁne Si to be the num-
ber of operation executed in game i and Pr[Si] denotes
the probability that an attacker can distinguish game i by
observing the total execution time.
Game 1-3 introduce small modiﬁcation over base pro-
tocol, i.e., the broadcast channel. Every game add some
small timing delay ∆ to the previous game which is the
only information available to A . Henceforth we deﬁne
the following notations