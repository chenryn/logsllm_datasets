255
KeywordsAll:  
0x0
KeywordsAny:  
0x4000000000000000 (System)
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   151
Properties:  
65
Filter Type:  
0
--snip--
Listing 8-5: Using logman.exe to query a specific trace
This query provides us with information about the providers enabled in 
the session 2 and the filtering keywords in use 3, whether it is a real-time 
or file-based trace 1, and performance figures. With this information, we 
can start to understand whether the trace is a form of performance moni-
toring or telemetry collection by an EDR.
Consumers
Consumers are the software components that receive events after they’ve 
been recorded by a trace session. They can either read events from a logfile 
on disk or consume them in real time. Because nearly every EDR agent is a 
real-time consumer, we’ll focus exclusively on those.
Consumers use sechost!OpenTrace() to connect to the real-time session 
and sechost!ProcessTrace() to start consuming events from it. Each time 
the consumer receives a new event, an internally defined callback function 
parses the event data based on information supplied by the provider, such 
as the event manifest. The consumer can then choose to do whatever it likes 
with the information. In the case of endpoint security software, this may 
mean creating an alert, taking some preventive actions, or correlating the 
activity with telemetry collected by another sensor.
Creating a Consumer to Identify Malicious .NET Assemblies
Let’s walk through the process of developing a consumer and working with 
events. In this section, we’ll identify the use of malicious in-memory .NET 
framework assemblies, such as those employed by Cobalt Strike’s Beacon 
execute-assembly functionality. One strategy for identifying these assem-
blies is to look for class names belonging to known offensive C# projects. 
Although attackers can easily defeat this technique by changing the names 
of their malware’s classes and methods, it can be an effective way to identify 
the use of unmodified tools by less sophisticated actors.
Our consumer will ingest filtered events from the Microsoft-Windows-
DotNETRuntime provider, specifically watching for classes associated with 
Seatbelt, a post-exploitation Windows reconnaissance tool.
Creating a Trace Session
To begin consuming events, we must first create a trace session using the 
sechost!StartTrace() API. This function takes a pointer to an EVENT_TRACE 
_PROPERTIES structure, defined in Listing 8-6. (On systems running versions 
of Windows later than 1703, the function could choose to take a pointer to 
an EVENT_TRACE_PROPERTIES_V2 structure instead.)
Evading EDR (Early Access) © 2023 by Matt Hand
152   Chapter 8
typedef struct _EVENT_TRACE_PROPERTIES {
 WNODE_HEADER Wnode;
 ULONG  
BufferSize;
 ULONG  
MinimumBuffers;
 ULONG  
MaximumBuffers;
 ULONG  
MaximumFileSize;
 ULONG  
LogFileMode;
 ULONG  
FlushTimer;
 ULONG  
EnableFlags;
 union {
  LONG AgeLimit;
  LONG FlushThreshold;
 } DUMMYUNIONNAME;
 ULONG  
NumberOfBuffers;
 ULONG  
FreeBuffers;
 ULONG  
EventsLost;
 ULONG  
BuffersWritten;
 ULONG  
LogBuffersLost;
 ULONG  
RealTimeBuffersLost;
 HANDLE LoggerThreadId;
 ULONG  
LogFileNameOffset;
 ULONG  
LoggerNameOffset;
} EVENT_TRACE_PROPERTIES, *PEVENT_TRACE_PROPERTIES;
Listing 8-6: The EVENT_TRACE_PROPERTIES structure definition
This structure describes the trace session. The consumer will populate it 
and pass it to a function that starts the trace session, as shown in Listing 8-7.
static const GUID g_sessionGuid =
{ 0xb09ce00c, 0xbcd9, 0x49eb,
{ 0xae, 0xce, 0x42, 0x45, 0x1, 0x2f, 0x97, 0xa9 }
};
static const WCHAR g_sessionName[] = L"DotNETEventConsumer";
int main()
{
ULONG ulBufferSize =
sizeof(EVENT_TRACE_PROPERTIES) + sizeof(g_sessionName);
PEVENT_TRACE_PROPERTIES pTraceProperties =
(PEVENT_TRACE_PROPERTIES)malloc(ulBufferSize);
if (!pTraceProperties)
{
return ERROR_OUTOFMEMORY;
}
ZeroMemory(pTraceProperties, ulBufferSize);
pTraceProperties->Wnode.BufferSize = ulBufferSize;
pTraceProperties->Wnode.Flags = WNODE_FLAG_TRACED_GUID;
pTraceProperties->Wnode.ClientContext = 1;
pTraceProperties->Wnode.Guid = g_sessionGuid;
pTraceProperties->LogFileMode = EVENT_TRACE_REAL_TIME_MODE;
pTraceProperties->LoggerNameOffset = sizeof(EVENT_TRACE_PROPERTIES);
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   153
wcscpy_s(
(PWCHAR)(pTraceProperties + 1),
wcslen(g_sessionName) + 1,
g_sessionName);
DWORD dwStatus = 0;
TRACEHANDLE hTrace = NULL;
while (TRUE) {
dwStatus = StartTraceW(
&hTrace,
g_sessionName,
pTraceProperties);
if (dwStatus == ERROR_ALREADY_EXISTS)
{
dwStatus = ControlTraceW(
hTrace,
g_sessionName,
pTraceProperties,
EVENT_TRACE_CONTROL_STOP);
}
if (dwStatus != ERROR_SUCCESS)
{
return dwStatus;
}
--snip--
}
Listing 8-7: Configuring trace properties
We populate the WNODE_HEADER structure pointed to in the trace proper-
ties. Note that the Guid member contains the GUID of the trace session, not 
of the desired provider. Additionally, the LogFileMode member of the trace 
properties structure is usually set to EVENT_TRACE_REAL_TIME_MODE to enable 
real-time event tracing.
Enabling Providers
The trace session isn’t yet collecting events, as no providers have been 
enabled for it. To add providers, we use the sechost!EnableTraceEx2() API. 
This function takes the TRACEHANDLE returned earlier as a parameter and is 
defined in Listing 8-8.
ULONG WMIAPI EnableTraceEx2(
 [in]  
TRACEHANDLE  
TraceHandle,
 [in]  
LPCGUID  
ProviderId,
 [in]  
ULONG  
ControlCode,
 [in]  
UCHAR  
Level,
 [in]  
ULONGLONG  
MatchAnyKeyword,
 [in]  
ULONGLONG  
MatchAllKeyword,
Evading EDR (Early Access) © 2023 by Matt Hand
154   Chapter 8
 [in]  
ULONG  
Timeout,
 [in, optional] PENABLE_TRACE_PARAMETERS EnableParameters
);
Listing 8-8: The sechost!EnableTraceEx2() function definition
The ProviderId parameter is the target provider’s GUID, and the Level 
parameter determines the severity of the events passed to the consumer. 
It can range from TRACE_LEVEL_VERBOSE (5) to TRACE_LEVEL_CRITICAL (1). The 
consumer will receive any events whose level is less than or equal to the 
specified value.
The MatchAllKeyword parameter is a bitmask that allows an event to be writ-
ten only if the event’s keyword bits match all the bits set in this value (or if the 
event has no keyword bits set). In most cases, this member is set to zero. The 
MatchAnyKeyword parameter is a bitmask that allows an event to be written only 
if the event’s keyword bits match any of the bits set in this value.
The EnableParameters parameter allows the consumer to receive one or 
more extended data items in each event, including but not limited to the 
following:
EVENT_ENABLE_PROPERTY_PROCESS_START_KEY  A sequence number that identi-
fies the process, guaranteed to be unique to the current boot session
EVENT_ENABLE_PROPERTY_SID  The security identifier of the principal, such 
as a user of the system, under which the event was emitted
EVENT_ENABLE_PROPERTY_TS_ID  The terminal session identifier under which 
the event was emitted
EVENT_ENABLE_PROPERTY_STACK_TRACE  Value that adds a call stack if the event 
was written using the advapi!EventWrite() API
The sechost!EnableTraceEx2() API can add any number of providers to a 
trace session, each with its own filtering configurations. Listing 8-9 contin-
ues the code in Listing 8-7 by demonstrating how this API is commonly used.
1 static const GUID g_providerGuid =
{ 0xe13c0d23, 0xccbc, 0x4e12,
{ 0x93, 0x1b, 0xd9, 0xcc, 0x2e, 0xee, 0x27, 0xe4 }
};
int main()
{
--snip--
dwStatus = EnableTraceEx2(
hTrace,
&g_providerGuid,
EVENT_CONTROL_CODE_ENABLE_PROVIDER,
TRACE_LEVEL_INFORMATION,
2 0x2038,
0,
INFINITE,
NULL);
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   155
if (dwStatus != ERROR_SUCCESS)
{
goto Cleanup;
}
--snip--
}
Listing 8-9: Configuring a provider for the trace session
We add the Microsoft-Windows-DotNETRuntime provider 1 to the 
trace session and set MatchAnyKeyword to use the Interop (0x2000), NGen (0x20), 
Jit (0x10), and Loader (0x8) keywords 2. These keywords allow us to filter 
out events that we’re not interested in and collect only those relevant to 
what we’re trying to monitor.
Starting the Trace Session
After we’ve completed all of these preparatory steps, we can start the trace 
session. To do so, an EDR agent would call sechost!OpenTrace() with a pointer 
to an EVENT_TRACE_LOGFILE, defined in Listing 8-10, as its only parameter.
typedef struct _EVENT_TRACE_LOGFILEW {
LPWSTR  
LogFileName;
LPWSTR  
LoggerName;
LONGLONG  
CurrentTime;
ULONG  
BuffersRead;
union {
 ULONG LogFileMode;
 ULONG ProcessTraceMode;
} DUMMYUNIONNAME;
EVENT_TRACE  
CurrentEvent;
TRACE_LOGFILE_HEADER 
LogfileHeader;
PEVENT_TRACE_BUFFER_CALLBACKW BufferCallback;
ULONG  
BufferSize;
ULONG  
Filled;
ULONG  
EventsLost;
union {
 PEVENT_CALLBACK 
EventCallback;
 PEVENT_RECORD_CALLBACK EventRecordCallback;
} DUMMYUNIONNAME2;
ULONG  
 IsKernelTrace;
PVOID  
 Context;
} EVENT_TRACE_LOGFILEW, *PEVENT_TRACE_LOGFILEW;
Listing 8-10: The EVENT_TRACE_LOGFILE structure definition
Listing 8-11 demonstrates how to use this structure.
int main()
{
--snip--
EVENT_TRACE_LOGFILEW etl = { 0 };
Evading EDR (Early Access) © 2023 by Matt Hand
156   Chapter 8
1 etl.LoggerName = g_sessionName;
2 etl.ProcessTraceMode = PROCESS_TRACE_MODE_EVENT_RECORD |
PROCESS_TRACE_MODE_REAL_TIME;
3 etl.EventRecordCallback = OnEvent;
TRACEHANDLE hSession = NULL;
hSession = OpenTrace(&etl);
if (hSession == INVALID_PROCESSTRACE_HANDLE)
{
 goto Cleanup;
}
--snip--
}
Listing 8-11: Passing the EVENT_TRACE_LOGFILE structure to sechost!OpenTrace()
While this is a relatively large structure, only three of the members 
are immediately relevant to us. The LoggerName member is the name of the 
trace session 1, and ProcessTraceMode is a bitmask containing the values for 
PROCESS_TRACE_MODE_EVENT_RECORD (0x10000000), to indicate that events should 
use the EVENT_RECORD format introduced in Windows Vista, as well as PROCESS 
_TRACE_MODE_REAL_TIME (0x100), to indicate that events should be received in 
real time 2. Lastly, EventRecordCallback is a pointer to the internal callback 
function 3 (covered shortly) that ETW calls for each new event, passing it 
an EVENT_RECORD structure.
When sechost!OpenTrace() completes, it returns a new TRACEHANDLE 
(hSession, in our example). We can then pass this handle to 
sechost!ProcessTrace(), as shown in Listing 8-12, to start processing events.
void ProcessEvents(PTRACEHANDLE phSession)
{
 FILETIME now;
 1 GetSystemTimeAsFileTime(&now);
 ProcessTrace(phSession, 1, &now, NULL);
}
int main()
{
  --snip--
  HANDLE hThread = NULL;
  2 hThread = CreateThread(
 NULL, 0,
 ProcessEvents,
 &hSession,
 0, NULL);
 if (!hThread)
 {
goto Cleanup;
 }
Evading EDR (Early Access) © 2023 by Matt Hand
Event Tracing for Windows   157
--snip--
}
Listing 8-12: Creating the thread to process events
We pass the current system time 1 to sechost!ProcessTrace() to tell the 
system that we want to capture events occurring after this time only. When 
called, this function will take control of the current thread, so to avoid com-
pletely blocking the rest of the application, we create a new thread 2 just for 
the trace session.
Assuming no errors were returned, events should start flowing from the 
provider to the consumer, where they’ll be processed by the internal callback 
function specified in the EventRecordCallback member of the EVENT _TRACE_LOGFILE 
structure. We’ll cover this function in “Processing Events” on page XX.
Stopping the Trace Session
Finally, we need a way to stop the trace as needed. One way to do this is to 
use a global Boolean value that we can flip when we need the trace to stop, 
but any technique that signals a thread to exit would work. However, if an 
outside user can invoke the method used (in the case of an unchecked RPC 
function, for example), a malicious user might be able to stop the agent from 
collecting events via the trace session altogether. Listing 8-13 shows how stop-
ping the trace might work.
HANDLE g_hStop = NULL;
BOOL ConsoleCtrlHandler(DWORD dwCtrlType)
{