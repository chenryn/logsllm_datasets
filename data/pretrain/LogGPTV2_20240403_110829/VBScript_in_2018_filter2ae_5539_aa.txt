# VBScript in 2018
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 背景
VBScript是微软开发的一款脚本语言，是Visual
Basic的轻量级的版本。使用VBScript可以快速高效地开发出一些浏览器客户端和服务端的应用程序。然而随着DVE技术的公布以及在CVE-2014-6332、CVE-2016-0189中的稳定利用，VBScript开始被认为并不是那么安全了。很快微软在Windows
10 Fall Creators Update版本中对于Internet Explorer(IE)浏览器的Internet Zone和Restricted
Sites
Zone默认禁用了VBScript。但是这似乎并未减缓关于VBScript的在野漏洞利用攻击，相反，随着Adobe宣布2020年Flash正式退役，Hacker们似乎开始把重点转向了VBScript这个几乎被遗弃的脚本引擎。于是在2018年我们看到了CVE-2018-8174，CVE-2018-8373
这类0Day攻击事件以及相当数量的关于VBScript的CVE和研究报告。
笔者在学习了部分研究报告和调试了部分PoC后，决定对2018年VBScript的漏洞做个简单的归类总结，与大家分享，希望对关于VBScript的漏洞挖掘和分析有所帮助。但水平有限，文中错误之处恳请斧正。
## 0x01 分析
2018年关于VBScript的CVE不少，这里笔者筛选了6个比较有代表性的CVE分两类进行分析。
###  Type 1: Class_Terminate Callback
VBScript存在类的概念，VBScript类支持两个事件：Class_Initialize和Class_Terminate。在类实例化的时候会触发Class_Initialize事件，同样在类实例被销毁的时候会触发Class_Terminate事件。VBScript支持在脚本中通过添加自定义Class_Initialize或Class_Terminate事件的方法在脚本中手动做一些初始化或者释放的操作。也就是说自定义Class_Terminate给了VBScript引擎执行过程一次脚本回调的机会，如果在脚本回调过程中手动修改了一些数据，就可能触发一些未知的情形。
####  CASE 1：CVE-2018-1004
**1.PoC**
PoC执行流程：
1） 创建一个动态数组arr
2） 创建一个MyClass对象实例并保存到arr的第一个元素
3） 调用Erase函数逐个删除arr里的元素
4） 因为arr的第一个元素保存了MyClass对象实例，MyClass对象实例在析构的时候会调用脚本里的Class_Terminate函数
5） Class_Terminate重新定义的arr
**2.Debug**
1）Set arr(0) = new MyClass
2）Erase a -> Class_Terminate -> ReDim Preserve a(1)
3) Erase a -> OLEAUT32!VariantClear-> crash
**3.Root Cause**
关于PoC的关键代码，VBScript引擎的执行过程如下图所示：
VBScript中的数组是由OLEAUT32的SAFEARRAY结构体定义的。
VbsErase通过调用OLEAUT32!_SafeArrayDestroyData释放数组元素，OLEAUT32!_SafeArrayDestroyData会遍历数组元素并将每个数组元素的地址传给OLEAUT32!VariantClear逐个清除数组元素：
OLEAUT32!VariantClear中如果元素是对象，且对象的引用计数为0，则调用该对象的析构函数，从而触发脚本函数Class_Terminate的回调。在Class_Terminate重新定义了arr的大小，导致原始arr
buffer被释放，但是OLEAUT32!VariantClear中依然保留了原始arr buffer地址，当再次访问该地址时触发crash。
####  CASE 2：CVE-2018-8174
CVE-2018-8174是360发现的一个在野0Day攻击样本。关于其具体利用代码分析可以参考360的Blog。
**1.PoC**
PoC执行流程：
1） 创建一个数组arr
2） 创建一个MyClass对象实例并保存到arr的第一个元素
3） 调用Erase函数逐个删除arr里的元素
4） 因为arr的第一个元素保存了MyClass对象实例，MyClass对象实例在析构的时候会调用脚本里的Class_Terminate函数
5） Class_Terminate里将MyClass对象实例的引用保存到变量o，并释放自身引
6） 访问变量o
**2.Debug**
1）Set arr(0) = new MyClass
2）Erase a -> Class_Terminate （转移MyClass对象实例的引用到变量o）
3) msgbox o (通过变量o访问MyClass对象实例)
**3.Root Cause**  
关于PoC的关键代码，VBScript引擎的执行过程如下图所示：
可以看到漏洞触发的流程和CVE-2018-1004较为相似，不同的是
CVE-2018-1004是在脚本回调函数Class_Terminate中释放了原始arr的buffer，而CVE-2018-8174则是在MyClass对象实例被析构前转移（读取）了MyClass对象实例的引用。
####  CASE 3：CVE-2018-8242
CVE-2018-8242是古河师傅分析了微软对CVE-2018-8174的补丁后，发现的一个新的漏洞。简单地说就是CVE-2018-8174的补丁只是禁止了在Class_Terminate中对VT_DISPATCH(Object)变量的读操作，但是并没有禁止在Class_Terminate中对VT_DISPATCH(Object)变量的写操作，然而写操作依然存在漏洞：
**1.PoC**
PoC执行流程：
1） 创建一个数组arr
2） 创建一个MyClass对象实例并保存到arr的第一个元素
3） 调用Erase函数逐个删除arr里的元素
4） 因为arr的第一个元素保存了MyClass对象实例，MyClass对象实例在析构的时候会调用脚本里的Class_Terminate函数
5） Class_Terminate里再次调用Erase清除数组元素
**2.Debug**
1）Set arr(0) = new MyClass
2）Erase a(1st) -> Class_Terminate -> Erase a(2nd)
3) Class_Terminate -> Erase a(1st)
**3.Root Cause**
关于PoC的关键代码，VBScript引擎的执行过程如下图所示：
与CVE-2018-8174类似，这次在Class_Terminate再次尝试释放正在处于半释放状态下的VBScriptClass，最终触发Double
Free。
####  CASE 4：CVE-2018-8544
上面的3个case都与Class_Terminate中的array操作相关，而微软在7月的补丁中直接禁止了Class_Terminate操作array，但是依然可以考虑用其他的容器代替array，实现类似的效果，比如Dictionary。
**1.PoC**