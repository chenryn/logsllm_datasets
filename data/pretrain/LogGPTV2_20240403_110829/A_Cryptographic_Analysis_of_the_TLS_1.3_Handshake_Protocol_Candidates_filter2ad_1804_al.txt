also write it as sid3 = (sid1, sid+2, “RMS”). Both SKEY1, SKEY2, and SKEY3 will be (individually and
together) consistent during the entire simulation in the sense that they do not contain entries with identical
session identiﬁers but diﬀerent keys. This is clearly true upon initialization and remains so whenever we
add elements to either set.
Algorithm B then runs A, relaying all queries and answers of A to its external oracles, with one
exception: if A makes one of its multiple Test queries (where we assume that all such queries are made for
accepted executions only), then B increments c and checks c against λ.
• If c  λ then B ﬁrst recovers the session identiﬁer of the requested test session. For a stage-one
identiﬁer sid1 this is again easy by inspecting the communication so far. For a stage-two or stage-
three identiﬁer sid2 = (sid1,{sid+2}) resp. sid3 = (sid1,{sid+2}, “RMS”) algorithm B ﬁrst checks if
there already exists an entry in SKEY1 for the contained stage-one part sid1 of the identiﬁer of the
inspected session and, if so, uses it to recover the full (unencrypted) sid+2 part of the identiﬁer. If
there is no entry then B makes a Reveal query for the stage-one key to again recover the full identiﬁer
sid2 resp. sid3 and places sid1 and the returned key into SKEY1. Note that such a Reveal query cannot
infringe with B’s single Test query, because either the Test query was for a stage-two or stage-three
session (and key independence enables us to reveal any stage-one key then), or the Test query was
for a stage-one identiﬁer in which case it must already be included in SKEY1 and the Reveal query
is not made.
Given that B now knows the session identiﬁer of the requested test session it checks if there is already
an entry in SKEY1, SKEY2, or SKEY3 for it. If so, it returns the same key as in the entry. Else it
picks a key K at random from D, returns it to A, and adds the obtained session identiﬁer with the
key value K to the corresponding set SKEY1, SKEY2, or SKEY3. Note again that there cannot exist
such an entry in the lists if B adds some value, such that consistency remains intact.
Note that B provides a consistent simulation as any pair of Test queries for partnered sessions return
identical answers: For Test queries of A for partnered sessions, both with c  λ then the same argument as in the previous case applies. The latter is also true if
the ﬁrst Test query has been for c = λ or for c > λ, because then the session identiﬁer will be in SKEY1,
SKEY2, or SKEY3 already.
Up to the ﬁnalization step B’s simulation is perfect (except for potentially the state of the lost ﬂag,
In particular, B loses according to the lost ﬂag, either set during the processing of a Test
see below).
query or in the ﬁnalization step, only if A in the simulation (and thus in a genuine execution) would lose.
Conversely, as is, it can happen that B even avoids a loss which A would trigger with a Test query for a
revealed partner, but B omits this Test query since it provides the answer diﬀerently. This corresponds
to the ﬁnalize condition of Deﬁnition 4.2. Remarkably, this causes the following problem: if A decides to
create a diﬀerence between the two cases, genuine keys or random ones in Test queries, by deliberately
losing via, say, a Reveal query for a tested partner, this diﬀerence could vanish in B’s simulation. In order
to avoid this, we let B eventually run the internal ﬁnalization step and check if A loses (and if so, forcing
a loss in its simulation by making a Reveal query to the same key the Test query was issued on).
To check for the condition in the ﬁnalization step note that all Test requests of A insert some values in
the sets SKEY1, SKEY2, SKEYe2, SKEY3, or SKEYe3. Only for those entries in SKEYe2 and SKEYe3 algorithm
B cannot (yet) recover the session identiﬁer; in particular there is no entry in SKEY1 for those values, else
they would have been moved to SKEY2 resp. SKEY3 already. Algorithm B can now “clean up” the sets
SKEYe2 and SKEYe3 and move all entries to SKEY2 resp. SKEY3, by making a-posteriori Reveal queries for
the ﬁrst-stage keys for all sessions in SKEYe2 and SKEYe3 to get the session key which allows us to decrypt
the stage-two and stage-three identiﬁer. These Reveal queries cannot force B to lose as the session identiﬁer
of the single tested session must be diﬀerent (otherwise there would be an entry in SKEY1). So we can
from now on assume that B knows all session identiﬁers of A’s requested test sessions in clear, and holds
candidates for all ﬁrst-stage keys of the tested sessions.
It remains that B checks the condition of the ﬁnalization (i.e., that A has not made a Reveal query to
a partner of a tested session) as follows. Algorithm B recovers all the session identiﬁers of the revealed
47
sessions (excluding the Reveal queries which only B made). For a stage-one Reveal request this is trivial,
for a stage-two or stage-three request (with partial identiﬁer sid1) algorithm B checks if sid1 appears among
the tested sessions. If not, then this Reveal query clearly does not infringe with the Test queries. If it does
appear, however, then we already have the ﬁrst-stage key for sid1 and can recover the full session identiﬁer
of the Reveal query and compare it to the set of tested sessions. If and only if B ﬁnds some match for some
Reveal query then it forces a loss in its game.
Next, we check the losing condition within the Test query triggered when A requests some test such that
another honest execution has already used this session key (in which case the adversary could potentially
distinguish a random key). This check is easy to perform for B because, in handling the Test query, it
always establishes the according session identiﬁer sidi of the tested session’s stage i. Hence, B can simply
check whether there exists a partnered session in stage i whose execution state is already beyond acceptedi
and force a loss in this case.
To check the condition within the Test query that A has not tested a session for which the partner is
unauthenticated but which does not have an honest contributive partner, B can, for the ﬁrst stage, simply
inspect the the transcript as the elements of the contributive identiﬁer cid1 for the ﬁrst stage are sent
in clear. For stages 2 and 3 recall that cid2 = sid2 and cid3 = sid3 and hence B can again leverage the
established session identiﬁer of the tested session’s stage to check if there exists an honest contributive
partner for these stages upon ﬁnalization. In each case, if no contributive partnered session exists, then B
provokes a loss.
With the ﬁnal checks we have made sure that B loses due to some inadmissible query if and only if A
would in the real attack. In particular, it follows that for ﬁxed λ = 0 the simulation of B has exactly the
same success probability as A in game G0, and analogously for λ = 3ns. A standard counting argument,
basically considering the conditional probabilities for ﬁxed choices of λ, now shows that the advantage
of A is at most a factor 3ns of the advantage of B. More formally, noting that for some ﬁxed λ and test
bit btest = 0 we actually run the game for btest = 1 and λ − 1, we obtain:
Noticing that the ﬁrst and last diﬀerences of probabilities in both cases, for B and for A, correspond to
2 · AdvMulti-Stage,D
and 2 · AdvMulti-Stage,D
, the claim follows.
KE,A
B The PRF-ODH Assumption
We restate here the pseudorandom-function oracle-Diﬃe–Hellman (PRF-ODH) assumption introduced by
Jager et al. [JKSS12], an adaptation of the oracle Diﬃe–Hellman assumption introduced by Abdalla
et al. [ABR01] to the PRF setting. The PRF-ODH assumption has been previously used by Jager et
al. [JKSS12] to analyze the security of the TLS version 1.2 DHE handshake (in the single-query variant
which we also employ here) and by Krawczyk et al. [KPW13] further TLS 1.2 handshake variants (in a
48
G
Multi-Stage,D
KE,B
Multi-Stage,D
KE,B
·
= 1|btest = 1i − Prh
(cid:16)Prh
3nsX
(cid:16)Prh
3nsX
·(cid:16)Prh
= 1|btest = 0i
= 1|λ = λ0, btest = 1i − Prh
= 1|λ = λ0, btest = 1i − Prh
= 1|λ = 3ns, btest = 1i − Prh
Multi-Stage,D
KE,B
Multi-Stage,D
KE,B
Multi-Stage,D
KE,B
G
λ0=1
λ0=1
G
·
G
Multi-Stage,D
KE,B
G
· (Pr [G3ns = 1] − Pr [G0 = 1]) .
Multi-Stage,D
KE,B
G
Multi-Stage,D
KE,B
G
= 1|λ = λ0, btest = 0i(cid:17)
= 1|λ = λ0 − 1, btest = 1i(cid:17)
= 1|λ = 0, btest = 1i(cid:17)
G
Prh
= 1
3ns
= 1
3ns
= 1
3ns
= 1
3ns
KE,B
multi-query variant). Here, we use a slightly stronger variant of the multi-query PRF-ODH assumption, in
which the adversary gets to see the challenge Diﬃe–Hellman shares before ﬁxing its challenge label.
Definition B.1 (PRF-ODH assumption). Let G = hgi be a cyclic group of prime order q with generator g,
PRF: G × {0, 1}∗ → {0, 1}λ be a pseudorandom function with keys in G, input strings from {0, 1}∗, and
output strings of length λ, let b ∈ {0, 1} be a bit, and A be a PPT algorithm.
Setup. The challenger chooses u, v ←$ Zq at random and gives gu and gv to A.
Challenge. The adversary A outputs a value x ∈ {0, 1}∗. The challenger sets y0 ← PRF(guv, x) and
Query. The adversary A may issue queries of the form (h, x0) ∈ (G,{0, 1}∗) with (h, x0) 6= (gu, x) which
Guess. Eventually, A stops and outputs a bit b0 which is also the game output, denoted by G
y1 ←$ {0, 1}λ, and returns yb to A.
the challenger answers with the value y0 ← PRF(hv, x0).
We deﬁne the following PRF-ODH security game G
PRF-ODH,b
PRF,G,A :
PRF-ODH,b
PRF,G,A .
We deﬁne the advantage function
(cid:12)(cid:12)(cid:12) Prh
G
PRF,G,A = 1i − Prh
PRF-ODH,0
G
PRF,G,A = 1i(cid:12)(cid:12)(cid:12)
PRF-ODH,1
AdvPRF-ODH
PRF,G,A :=
and, assuming a sequence of groups in dependency of the security parameter, we say that the PRF-ODH
assumption holds for PRF with keys from (Gλ)λ if for any A the advantage function is negligible (as a
function in λ).
49