111Ki
466Gi
298Gi
93Gi
Size
1.0Ki
111Ki
93Gi
Size
OBi
OBi
OBi
1.0Ki
111Ki
240Gi
105Gi
89Gi
Used
111Ki
89Gi
OBi
OBi
OBi
Used
www.TopSage.com
4.1Gi
Avail
225Gi
193Gi
4.1Gi
Avail
OBi
pysysinfo_func_2.uname_fun
pysysinfo_func_2.subproces
pysysinfo_func_2.pyc
pysysinfo_func_2.py
pysysinfo_func_2.main
Capacity
Capacity
100%
100%
100%
%96
100%
100%
100%
100%
52%
%96
Mounted on
/Volumes/EditingDrive
/Volumes/Backup
/home
/net
/dev
/dev
Mounted on
Python简介
129
---
## Page 44
#Very short script that reuses pysysinfo_func_2 code
def tmp_space():
from pysysinfo_func_2 import disk_func
例1-6：使用import进行代码复用：new_pysysinfo
码。例1-6在另一个脚本中展示了如何使用其中一个函数disk_func。
通常，编写可复用模块就是为了将来在一个新的脚本中可以一遍又一遍地使用该部分代
部代码。
如果仔细观察，你会发现我们同时运行了其他两个函数。记住，main函数会立即执行全
内容之后，你就可以写一些非常复杂的Python模块，通过多次复用来创建一个新的工具
我们就可以加载这些函数到IPython中，或是简单地在另一个脚本中进行复用。学习上述
还希望能以脚本方式运行，则需要加入特定的if_name_
在这一节，我们学习了代码复用的知识，
disk_func()，以及我们创建的新函数。
函数，可以实现一个完全不同的程序。注意，在main方法中包含其他模块中的函数
加载我们需要的函数。代码复用的有趣之处也在于，通过载人之前所编写程序中的
这个例子不仅演示了对之前编写的代码的复用，也展示了如何使用Python特定的语法
def main():
import subprocess
了。这时的你，应该已经成长为一名高手了。
复用实现起来又是多么简单。简而言之，我们在文件中加人了一个或两个函数，如果
disk_func()
subprocess.call([tmp_usage, tmp_arg, path])
/dev/disk2s3
/dev/disk1s2
map auto_home
tmp_space()
print "Space used in /tmp directory"
tmp_arg =
tmp_usage = "du"
第1章
"/tmp"
-h
466Gi
298Gi
OBi
240Gi
105Gi
OBi
225Gi
193Gi
www.TopSage.com
OBi
，了解了代码复用的强大之处，同时也看到，代
100%
36%
/Volumes/EditingDrive
/Volumes/Backup
/home
_main__"语法。之后，
PDG
---
## Page 45
载后再进行处理。如果做了一些有益的工作，还可以向其提交你所做的修改。
献力量。最近，IPython的开发已经转变为分布式代码控制方式，因此可以将代码分段下
列表。因此，可以根据需要进行阅读或向其中添加资源。也可以在IPython的开发领域贡
极好的wiki。作为wiki的一部分，在htp:/lipython.scipy.org/moin/Cookbook还有一个菜单
效率。
shell来使用。本章主要介绍如何使用IPython提高*nix-shell以及Python相关任务的执行
可以十分轻松地将交互式Python shell包含在各种Python应用中，甚至可以当作系统级
性能远远优于标准Python的shell。IPython同时提供了基于控制台命令环境的定制功能，
可以快速地在文本编辑器中编写需要的代码。
shell复制到编辑器。这种方式使得我们可以即时看到代码在Python中的处理结果，并且
就是在两者之间切换来完成程序的编写。我们经常需要将代码从编辑器复制到shell或从
（稍后会有介绍，这实际上运行的就是IPython），通过交互地使用编辑器和shell，也
的任务一次性完成。通常我们编写代码时，会采用同时运行文本编辑器和Python的方式
感、检验特性的方法，以及交互式的模块界面，能够将一些需要两三行脚本才能完成
Python的优点之一是其交互式解释器，也称为shell。shell提供了一种能够快速实现灵
vw.TopSage.com
IPython
第2章
---
## Page 46
3
命令解压软件包后，能够看到一个setup.Py文件。通过调用带install参数的setup-py文件
如http:/lipython.scipy.org/distlipython-0.8.2.tar.gz。 通过tar zxvf ipython-0.8.2.tar.gz
IPython的最新发布版本是0.8.2。0.8.3版本也即将完成。安装时需要下载tar.gz文件，例
源码进行安装。IPython的源码可以在http://ipython.scipy.org/dist/下载。编写本书时，
安装IPython可以有几种选择，其中最常见也是最常用的方法，是通过IPython发布的
安装IPython
Python语言开发工业机器人通信软件。Ville一直热表于IPython，自2006年1月起，
非从事科研工作的程序员受益匪浅。
日渐壮大。经过数年发展，IPython已经不仅局限于科研领域的应用，而且也让并
Perez发起了IPython开源项目。该项目得到了社区众多参与者的关注，支持者队伍
2001年，为了寻找能够更为高效地处理每天科研任务的交互式工作流程，Fernando
使Leo能够成为IPython的full-fledged记事本。
论文。他的论文是关于ILeo项目的，ILeo试图在IPython和Leo之间架设一座桥梁,
Ville关注的重点。Ville和未婚妻现在住在芬兰，在Pori的坦佩雷理工大学完成硕士
补丁程序，使其具有比Windows系统shell更优越的性能。至今系统shell用例仍然是
他就一直在维护0.x系列的稳定版本。Ville最初所做的工作是为IPython实现一系列
第2章
参与了Python工具的开发工作，这些工具都被用于科学计算领域。
高级科学计算工具方面的研究。在研究生期间，Fernando Perez就
Helen Wills神经科学研究所，主要致力于脑成像问题的分析方法和
应用数学系从事数值算法研究。目前，他在加州大学伯克利分校
Fernando Perez在获得物理学博士学位之后，在科罗拉多大学的
工作。此前，Ville Vainio曾就职于Cimcorp Oy公司，致力于使用
主要在诺基亚和UIQ的Symbian操作系统平台上从事C++程序开发
学位。在撰写本书时，他是Digia Plc公司智能手机部的软件专家,
University of Applied Sciences）Pori技术学院获得了软件工程学士
2003年，Ville Vainio在芬兰Satakunta应用科学大学（Satakunta
Fernando Perez
名人简介：IPython
名人简介：IPython
 Ville Vainio
www.TopSage.com
---
## Page 47
基础知识
题，那就是如果没有解压IPython，也没有修改PYTHONPATH环境变量，IPython将不能作
IPython实例了。这种方法能够使site-packages目录保持简明，但同时也会带来一些问
IPython发布的源码，并运行了ipython.py安装命令之后，就可以使用该下载版本中的
第四种选择可能会令你感到万分惊讶，那就是IPython不必安装即可使用。当下载了
IPython安装之后，
为一个库文件直接使用。
easy_install ipython即可。
easy_instail工具安装IPython，只需要用户对site-package目录具有写权限，直接运行
被人们忽略了，而事实上，它非常简单易用。easy_install工具通过Python包索引
够检查egg文件的配置，从而选择需要安装的内容。大多数时候，easy_install工具
Egg文件可以通过easy_install工具安装。easy_install工具的突出特点之一，是能
IPython。实际上，Python包是一个ZIP文件，解压后包含一个扩展名为.egg的文件。
第三种选择是通过Python包进行安装。也许你从没有注意到在Python包中包含了
制文件则安装在/usr/bin/ipython目录下。
share/python-supportlipython目录下，包括一系列.pth文件和符号链接。而IPython的二进
Ubuntu获取，运行apt-get install ipython命令即可。Ubuntu将IPython的库文件安装到/usr/
第二种选择是通过系统的软件包管理器安装IPython软件包。.deb安装包可在Debian和
在一些例子中看到“0.8.3”
装到/usr/bin目录下。本书中，我们安装的是IPython最新的开发版源码，因此你可能会
录与python的二进制文件目录相同。如果系统中已经安装了python包，则IPython将会安
（Python Package Index，简称PyPI，又被称作Python CheeseShop）确定包的安装。使用
安装IPython的库文件，并在scripts目录中创建一个ipython脚本。在UNIX系统中，该目
Please read the sections ‘Initial Configuration' and 'Quick Tips' in the
Successfulinstallation!
/home/jmjones/.ipython
Welcome to IPython. I will try to create a personal configuration directory
，第一次运行ipython命令，将看到如下内容：
***********************************************
www.TopSage.com
IPython
33
PDG
---
## Page 48
别赋值1、2、3。
这与在标准Python提示符下输入相同的内容看起来没什么不同。我们简单地为a、b、c分
下面是一些简单的输人输出操作:
置下，可以从IPython中获得什么。
令，并将执行结果保存到Python变量中。接下来的几个示例，将展示在IPython的默认配
多IPython魔术般神奇的函数可以利用。通过IPython，可以方便地执行任何Unix shell命
想要做些什么。通过IPython提示符，Python语言所有的一切都可以使用。而且，还有许
可能是在IPython提示符下，可以做到的事几乎没有任何限制。因此，关键是应该明确
当你第一次看到IPython提示符，也许同样不知道该做些什么。出现这种情况的原因极有
而言，掌握IPython将变得十分容易。
然正在阅读本书，我们假设你已经对Unix shell有一定的了解。如果的确如此，那么对你
些什么。还记得第一次登录到UNIX，看到出现的(ba|klc[z)sh提示符时的情形吗？既
当我们第一次接触到一个新的shell提示符，通常有些不知所措，甚至根本就不知道该做
与IPython进行交互
此时光标会停留在原处，等待输入。若点击Return键，IPython将显示如下内容：
In[3]:c=3
In [2]:b = 2
In[1]:a =1
In [1]:
%quickref
Please pressto start IPython.
Important note: the configuration system has changed! The old system is
object?
IPython 0.8.3.bzr.r96 --An enhanced Interactive Python.
Type “copyright",
.第2章
-> Introduction and overview of IPython's features.
->
Details about
(r251:54863,Mar
"credits"
'object'. ?object also works, ?? prints more.
www.TopSage.com
2008,
for more information.
---
## Page 49
显。下面是使用不同字符串表示方法的示例：
对比两个例子，其输出变量值似乎相同，其实仍有差别。print语句使用非正式的
方式：
个字符，多于显示它们的值所需要的实际长度。下面是显示变量值的另一种更为简洁的
查看每个变量的赋值，最坏的情况不过是需要向上回滚屏幕。每一个显示的变量会占6
这是一个设计好的例子。仅需要简单地键入打印输出变量语句（print），就可以直接
看这些变量所保存的数值：
现在我们已经将一些数值（1、2和3）分别保存到一些变量中（变量a、b和c），可以查
（official）字符串表达式。在处理自定义类而不是内置类时，这种差异会体现得非常明
IPython与标准Python的最大区别在于，Ipython会对命令提示符的每一行进行编号。
（unofficial）字符串表达式，而简单变量名（bare variable name）使用了正式的
In [13]: dr
In [12]:print dr
In [11]: dr = DoubleRep()
In [1o]: class DoubleRep(object):
Out[9]:3
In [9]: c
Out[8]:2
In [8]: b
In [6]: print c
w
In [5]:print b
In [4]: print a:
.：
def
IPython
35
---
## Page 50
当变量a.Dc赋值为i3之后nIn列表中的内容如下所示：
的相同的DoubleRep示例：
实际上，这并非IPython的特例，标准Python shell也是如此。下面是使用标准Python shell
str（obj）或是使用格式化字符串"%s"%obj时，_str_方法被调用，当调用repr（obj）
使用print输出变量时，IPython采用非正式字符串表达式。总之，在Python中，当调用
产生其中差异的原因是，当输入变量名时，IPython以正式字符串表达式显示结果，而
看到_str_方法被调用。之后，简单地输入变量的名称dr，则_repr_方法被调用。
DoubleRep对象后，指定变量dr保存该对象。接下来，使用print输出对象dr的值，可以
标准Python提示符同样不会区分这两种输出类型。如果在IPython提示符后输入了一个
值不是空（None），会在提示符“out[number]：”后将返回值打印输出。
来，这是在调用过程中发送的。而在IPython执行用户代码时，会检测返回值，如果返回
IPython忽略print，不会对其进行捕获。print的副作用会在标准输出stdout中反映出
实上，IPython并非真正能够区分这两种类型。print调用会引起计算的副作用，因此
去能够区分两种输出：写输出（written output）与求值输出（evaluatedoutput）。而事
IPython的输出提示符与标准Python输出提示符也是不同的。IPython的输出提示符看上
有命令跟踪功能，所有输入的命令都被保存在一个名为In的列表中。在前一个示例中，
的数字，最后是冒号组成（例如In[1]：）。采用这样的提示符，原因可能是IPython具
你可能已经注意到了，标准Python的提示符和IPython提示符是不一样的。标准Python的
36
该行以out开始，后跟方括号和行号，然后是冒号，最后是表达式求值的结果（例如
语句来对一些数值进行求值，且值不为空，则IPython将求得的值输出到新的一行中，
In[4]:print In
>>>class DoubleRep(object):
：
：
dr=DoubleRep()
def
def