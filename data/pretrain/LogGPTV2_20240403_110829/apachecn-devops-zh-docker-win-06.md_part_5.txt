volumes:
  es-data:
 external: 
      name: nerd-dinner-elasticsearch-data
  db-data:
 external: 
      name: nerd-dinner-database-data
```
声明了外部资源，我不能只使用`docker-compose up`运行应用。合成不会创建定义为外部的卷；它们需要在应用启动之前存在。这些卷是服务所需要的，所以 Docker Compose 也不会创建任何容器。相反，您将看到一条错误消息:
```
> docker-compose up -d
ERROR: Volume nerd-dinner-elasticsearch-data declared as external, but could not be found. Please create the volume manually using `docker volume create --name=nerd-dinner-elasticsearch-data` and try again.
```
错误消息告诉您需要运行什么命令来创建缺少的资源。这将使用默认配置创建基本卷，并允许 Docker Compose 启动应用:
```
docker volume create --name nerd-dinner-elasticsearch-data
docker volume create --name nerd-dinner-database-data
```
Docker lets you create volumes with different configuration options, so you can specify an explicit mount point—such as a RAID array or an NFS share. Windows doesn't support options for the local driver currently, but you can use mapped drives as a workaround. There are drivers for other types of storage—using volume plugins for cloud services, such as Azure storage, and enterprise storage units, such as HPE 3PAR.
同样的方法可以用来指定网络作为外部资源。在我的编写文件中，我最初使用了默认的`nat`网络，但是在这个编写文件中，我为应用指定了一个自定义的外部网络:
```
networks:
  nd-net:
    external:
 name: nerd-dinner-network
```
Windows 上的 Docker 有几个网络选项。默认的也是最简单的是网络地址转换，使用`nat`网络。这个驱动程序将容器与物理网络隔离开来，每个容器在 Docker 管理的子网中都有自己的 IP 地址。在主机上，您可以通过容器的 IP 地址访问容器，但是在主机之外，您只能通过发布的端口访问容器。
您可以使用`nat`驱动程序创建其他网络，也可以使用其他驱动程序进行不同的网络配置:
*   `transparent`驱动程序，给每个容器一个物理路由器提供的 IP 地址
*   `l2bridge`驱动程序，用于指定物理网络上的静态容器 IP 地址
*   `overlay`驱动程序，用于在 Docker Swarm 中运行分布式应用
对于我在单个服务器上使用 Traefik 的设置来说，`nat`是最佳选项，因此我将为我的应用创建一个自定义网络:
```
docker network create -d nat nerd-dinner-network
```
当容器启动时，我可以使用我在`hosts`文件中设置的`nerddinner.local`域访问 Traefik。
使用外部资源可以让您拥有一个 Docker Compose 文件，该文件用于每个环境，网络和卷资源的实际实现因环境而异。开发人员可以使用基本的存储和网络选项，在生产中，运营团队可以部署更复杂的基础架构。
# 使用 Docker 编写覆盖
然而，资源并不是环境之间唯一会改变的东西。您还将拥有不同的配置设置、不同的发布端口、不同的容器运行状况检查设置等等。对于每个环境来说，拥有完全不同的 Docker Compose 文件可能很有诱惑力，但这是您应该努力避免的。
拥有多个合成文件意味着需要额外的开销来保持它们的同步，更重要的是，如果它们不保持同步，就会有环境漂移的风险。使用 Docker Compose 覆盖解决了这个问题，这意味着您对每个环境的需求都被明确地声明了。
Docker Compose 默认情况下会查找名为`docker-compose.yml`和`docker-compose.override.yml`的文件，如果两者都找到，它将使用覆盖文件来添加或替换 Docker Compose 主文件中的部分定义。当您运行 Docker Compose CLI 时，您可以为整个应用规范传递要组合的附加文件。这使您可以将核心解决方案定义保存在一个文件中，并在其他文件中具有明确的环境相关覆盖。
在`ch06-docker-compose-override`文件夹中，我采用了这种方法。核心`docker-compose.yml`文件包含描述解决方案结构和开发中运行的环境配置的服务定义。同一文件夹中有三个替代文件:
*   `docker-compose.test.yml`添加测试环境的配置设置。
*   `docker-compose.production.ym`添加实时环境的配置设置。
*   `docker-compose.build.yml`添加构建映像的配置设置。
标准的`docker-compose.yml`文件可以自己使用，也就行了。这对于确保您的部署过程不会给开发人员带来困难非常重要。在主文件中指定开发设置意味着开发人员只需运行`docker-compose up -d`，因为他们不需要了解任何关于覆盖的知识就可以开始了。
这是`docker-compose.yml`中的反向代理配置，设置为发布随机端口，启动 Traefik 仪表盘:
```
reverse-proxy:
  image: sixeyed/traefik:v1.7.8-windowsservercore-ltsc2019
  command: --docker --docker.endpoint=npipe:////./pipe/docker_engine --api
  ports:
    - "80"
    - "8080"
  volumes:
    - type: npipe
      source: \\.\pipe\docker_engine 
      target: \\.\pipe\docker_engine 
 networks:
   - nd-net
```
这对于可能将端口`80`用于其他应用的开发人员，以及想要深入仪表板查看 Traefik 路由规则的开发人员非常有用。`test`覆盖文件将端口定义更改为在主机服务器上使用`80`和`8080`，但仪表板仍然暴露，因此命令部分不变:
```
reverse-proxy:
  ports:
    - "80:80"
    - "8080:8080"
```
`production`覆盖改变启动命令，去掉命令中的`--api`标志，所以仪表盘不运行，只发布端口`80`:
```
reverse-proxy:
  command: --docker --docker.endpoint=npipe:////./pipe/docker_engine
  ports:
    - "80:80"
```
其余的服务配置、要使用的映像、Docker Engine 命名管道的卷装载以及要连接的网络在每个环境中都是相同的，因此覆盖文件不需要指定它们。
另一个例子是新的主页，它包含服务的 Traefik 标签中 URL 的域名。这是特定于环境的，在开发 Docker Compose 文件中，它被设置为使用`nerddinner.local`:
```
nerd-dinner-homepage:
  image: dockeronwindows/ch03-nerd-dinner-homepage:2e
  labels:
    - "traefik.frontend.rule=Host:nerddinner.local;Path:/,/css/site.css"
    - "traefik.frontend.priority=10"
  networks:
    - nd-net
```
在`test`覆盖文件中，域为`nerd-dinner.test`:
```
nerd-dinner-homepage:
  labels:
    - "traefik.frontend.rule=Host:nerd-dinner.test;Path:/,/css/site.css"
    - "traefik.frontend.priority=10"
```
在生产中，是`nerd-dinner.com`:
```
nerd-dinner-homepage:
 labels:
   - "traefik.frontend.rule=Host:nerd-dinner.com;Path:/,/css/site.css"
   - "traefik.frontend.priority=10"
```
其余的配置在每个环境中都是相同的，因此覆盖文件只指定新标签。
Docker Compose doesn't merge the contents of a list when it adds the override; the new list replaces the old list completely. That's why the `traefik.frontend.priority` label is there in every file, so you can't just have the frontend rule value in the labels in the override file, because the priority value wouldn't be merged in from the labels in the main file.
覆盖文件中捕获的测试环境中还有其他差异:
*   发布了 SQL Server 和弹性搜索端口，以帮助排除故障。
*   数据库的卷从`E:`驱动器上的路径装载，该驱动器是服务器上的 RAID 阵列。
*   Traefik 规则都使用`nerd-dinner.test`域。
*   应用网络被指定为外部网络，以允许管理员创建自己的网络配置。
这些在生产覆盖文件中又有所不同:
*   不发布 SQL Server 和 Elasticsearch 端口，以将它们保留为私有组件。
*   数据库的卷被指定为外部卷，因此管理员可以配置自己的存储。
*   Traefik 规则都使用`nerd-dinner.com`域。
*   应用网络被指定为外部网络，以允许管理员创建自己的网络配置。
部署到任何环境都像运行`docker-compose up`一样简单，指定要使用的覆盖文件:
```
docker-compose `
  -f docker-compose.yml `
  -f docker-compose.production.yml `
 up -d
```
这种方法是保持 Docker Compose 文件简单的好方法，并且可以在单独的文件中捕获所有的可变环境设置。您甚至可以组合几个 Docker 编写文件。如果您有多个共享许多共性的测试环境，您可以在基本的合成文件中定义应用设置，在一个覆盖文件中定义共享的测试配置，在另一个覆盖文件中定义每个特定的测试环境。
# 摘要
在本章中，我介绍了 Docker Compose，这是一种用于组织分布式 Docker 解决方案的工具。使用 Compose，您可以用简单明了的格式明确定义解决方案的所有组件、组件的配置以及它们之间的关系。
组合文件允许您将所有应用容器作为一个单元进行管理。在本章中，您学习了如何使用`docker-compose`命令行启动和关闭应用，创建所有资源并启动或停止容器。您还了解到，您可以使用 Docker Compose 向上或向下扩展组件，并发布对解决方案的升级。
Docker Compose 是定义复杂解决方案的强大工具。撰写文件有效地替代了冗长的部署文档，并完整地描述了应用的每个部分。借助外部资源和合成覆盖，您甚至可以捕获环境之间的差异，并构建一组 YAML 文件，您可以使用这些文件来驱动整个部署管道。
Docker Compose 的局限性在于它是一个客户端工具。`docker-compose`命令需要访问编写文件才能执行任何命令。将资源逻辑分组到一个应用中，但这仅发生在合成文件中。Docker 引擎只看到一组资源；它不认为它们是同一个应用的一部分。Docker Compose 也仅限于单节点 Docker 部署。
在下一章中，我将继续讨论集群 Docker 部署，在 Docker Swarm 中运行多个节点。在生产环境中，这为您提供了高可用性和可扩展性。Docker Swarm 是一个强大的容器解决方案编排器，非常容易使用。它还支持组合文件格式，因此您可以使用现有的组合文件来部署应用，但是 Docker 将逻辑体系结构存储在群中，允许您管理应用而不需要组合文件。