Binary Obfuscation 
from the Top Down
How to make your compiler do your dirty work.
Binary Obfuscation
Why Top Down?
• Assembly, while “simple,” is tedious.
• It’s easier for us to write higher-level code.
• Some of us.
• Why do it by hand when you can be lazy?
Binary Obfuscation
What’s the purpose of obfuscation?
• To waste time.
• To intimidate.
• To be a total jerk.
Binary Obfuscation
What tools will be used?
• C and C++
• MSVC++ for compilation (sorry)
Binary Obfuscation
What will not be covered?
• Anti-debug
• Source obfuscation where it does not 
relate to binary transformations
• Obfuscation effectiveness
• Post-compilation obfuscation
Important Basics
Hopefully we can get through this really quickly.
Fun With Pointers
car cdr cadr cdar cdadr cdddr caar caaar caaaar 
caaaaaar
Binary Obfuscation
Function Pointers
• Like string-format vulnerabilities, function 
pointers are ancient Voodoo.
• I honestly don’t know who thought these 
were a good idea, but I freakin’ love ‘em.
• See src/funcptr.c
Binary Obfuscation
Function Pointers
int foo (void) {
return 949;
}
int bar (void) {
int (*fooPtr)(void);
fooPtr = foo;
return fooPtr();
}
Binary Obfuscation
Method Pointers
• Abuse of method pointers would probably 
make Bjarne Stroustrup really angry.
• There is also one thing uglier than function 
pointers. That’s method pointers.
• See src/methodptr.cpp
Binary Obfuscation
Method Pointers
int MyClass::foo(void) {
  return 310;
}
int bar (void) {
MyClass baz;
int (MyClass::*fooPtr)(void);
fooPtr = &MyClass::foo;
return (MyClass.*baz)fooPtr();
}
Calling Conventions
I really want to write a clever pun about payphones and 
DEFCON, but I just can’t.
Binary Obfuscation
Calling Conventions
• When making a function call, there are a 
few ways to do it:
• stdcall
• cdecl
• fastcall
• thiscall
Binary Obfuscation
Calling Conventions
• stdcall
• Push arguments onto stack
• Called function pops from stack
• Cleans up its own mess.
Binary Obfuscation
Calling Conventions
• cdecl
• Push arguments onto stack
• Called function pops from stack
• Called function cleans up the mess
Binary Obfuscation
Calling Conventions
• fastcall
• First two arguments less than a DWORD 
moved into ecx and edx respectively
• Rest are pushed onto the stack
• Called function pops from the stack
• Called function cleans up the mess
Binary Obfuscation
Calling Conventions
• thiscall
• Used when a function within a class 
object is called
• “this” pointer moved into ecx
• Function arguments pushed onto stack
• Called function pops from stack
• Cleans up its own mess
Compiler 
Optimizations
The Dragon Book: Not Just for Furries Anymore
Binary Obfuscation
Compiler Optimizations
• Control-ﬂow analysis
• Variable analysis
• Reach-of-use
• The volatile keyword
Binary Obfuscation
Compiler Optimizations
• At compile time, your code is separated 
into multiple blocks.
• A “block” consists of code separated by 
conditional (e.g. JLE, JNE, etc.) and 
unconditional jumps (e.g. CALL and JMP).
• How this code is organized and how the 
jumps occur affects the optimization of the 
program.
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
XOR EAX,310
CMP EAX,0
JNE z0r
z0r:
XOR EAX,310
PUSH EAX
XOR EAX,949
LEAVE
RETN
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
XOR EAX,310
CMP EAX,0
JNE z0r
z0r:
XOR EAX,310
PUSH EAX
XOR EAX,949
LEAVE
RETN
lol lemme 
ﬁx this
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
XOR EAX,310
XOR EAX,310
PUSH EAX
Binary Obfuscation
Compiler Optimizations
• The compiler also looks at your variables 
to make sure you’re not doing anything 
repetitive or inconsequential.
• Algorithms like the directed acyclic graph 
(DAG) algorithm and static variable analysis 
make sure memory and math are fully 
optimized.
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
XOR EAX,310
XOR EAX,310
PUSH EAX
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
XOR EAX,310
XOR EAX,310
PUSH EAX
lol seriously?
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
PUSH EAX
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
XOR EAX,310
CMP EAX,0
JNE z0r
z0r:
XOR EAX,310
PUSH EAX
XOR EAX,949
LEAVE
RETN
MOV EAX,949
PUSH EAX
Binary Obfuscation
Compiler Optimizations
• Your compiler is a neat-freak.
• If the compiler notices it doesn’t need a 
variable anymore, it’s just going to get rid of 
it, no matter what else you do to it.
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
MOV EBX,310
MOV ECX,213
XOR EAX,EBX
ADD EBX,EAX
SUB EAX,EAX
PUSH EBX
PUSH EAX
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
MOV EBX,310
MOV ECX,213
XOR EAX,EBX
ADD EBX,EAX
SUB EAX,EAX
PUSH EBX
PUSH EAX
Binary Obfuscation
Compiler Optimizations
MOV EAX,949
MOV EBX,310
XOR EAX,EBX
ADD EBX,EAX
SUB EAX,EAX
PUSH EBX
PUSH EAX
Binary Obfuscation
Compiler Optimizations
• There exist cases (mostly in hardware 
development) where you do NOT want 
your compiler to optimize your variable.
• This is where the volatile keyword 
comes in.
• Making your variable volatile tells the 
compiler not to do any optimizations to it.
Binary Obfuscation
Compiler Optimizations
volatile int foo;
volatile char bar;
volatile uint32_t baz;
Binary Obfuscation
Compiler Optimizations
int x;
x = 7;
x <<= 2;
x *= 2;
x -= 12;
x += (x*x)<<2;
printf("%d\n", x);
Binary Obfuscation
Compiler Optimizations
PUSH 1E6C
PUSH “%d\n”
CALL $PRINTF
int x;
x = 7;
x <<= 2;
x *= 2;
x -= 12;
x += (x*x)<<2;
printf("%d\n", x);
Binary Obfuscation
Compiler Optimizations
volatile int x;
x = 7;
x <<= 2;
x *= 2;
x -= 12;
x += (x*x)<<2;
printf("%d\n", x);
Binary Obfuscation
Compiler Optimizations
MOV [ESP],7
SHL [ESP],2
MOV EAX,[ESP]
ADD EAX,EAX
MOV [ESP],EAX
ADD [ESP],-0C
MOV ECX,[ESP]
MOV EDX,[ESP]
MOV EAX,[ESP]
IMUL ECX,EDX
...
volatile int x;
x = 7;
x <<= 2;
x *= 2;
x -= 12;
x += (x*x)<<2;
printf("%d\n", x);
Binary Formats
Everything is a ﬁle.
Binary Obfuscation
Binary Formats
• The most common formats you’ll likely 
come across are the PE ﬁle format 
(Windows) and the ELF format (Linux).
• Both of these formats have a “table” they 
use for external library calls such as 
printf, execv, etc.
• For Windows it’s called the IAT. For Linux 
it’s the PLT.
Binary Obfuscation
Binary Formats
• If you obfuscate function pointers, they will 
likely not show up in those lists and 
therefore cause your library calls to fail.
• Circumventing this issue will be covered 
later.
Methods of Analysis
Know your opponent!
Binary Obfuscation
Methods of Analysis
• Someone can easily ﬁgure out the gist of 
what your program is doing by analyzing 
any of the API calls you make.
• There exist a few programs out there that 
already do this for you:  VirusTotal and 
ZeroWine.
Binary Obfuscation
Methods of Analysis
• VirusTotal (virustotal.com) is a website that 
allows you to upload suspected malware 
ﬁles and analyze them against over thirty 
different scanners.
• At the end of the analysis is a list of all 
recognized Windows API calls made by the 
program, as well as various data sections 
within.
Binary Obfuscation
Methods of Analysis
• ZeroWine (zerowine.sourceforge.net) is a 
malware analysis tool that executes a 
program in a controlled environment and 
collects data.
• This, too, collects and reports on API calls 
made by the program, as well as any 
possible servers it may have contacted or 
ﬁles it may have written.
Binary Obfuscation
Methods of Analysis
• When analyzing a binary, there are two 
schools of analysis: live-code and dead-
code.
• Dead-code is exactly how it sounds: you 
look at the binary, as-is, without executing.
• Live-code is the opposite: you run the 
program and watch what it does.
Binary Obfuscation
Methods of Analysis
• VirusTotal employs dead-code analysis. It 
simply reads the binaries uploaded to it, 
scans it with various virus scanners and 
reports.
• ZeroWine, however, employs live-code 
analysis. It runs the suspected program in a 
controlled environment and watches what 
happens.
Binary Obfuscation
Methods of Analysis
• Dead-code analysis can be frustrated 
through polymorphism.
• Live-code analysis can be frustrated 
through hiding, obfuscating and redirecting 
data and control-ﬂow under the eyes of the 
reverser.
Obfuscation
We’re almost at the fun part, I promise!
Binary Obfuscation
Obfuscation
• There are three separate classes of 
obfuscation.
• Layout
• Control-ﬂow