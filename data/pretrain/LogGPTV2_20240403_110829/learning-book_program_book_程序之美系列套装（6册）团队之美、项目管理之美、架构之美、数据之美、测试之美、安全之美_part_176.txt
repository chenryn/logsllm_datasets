给我看你的流程图而藏起你的表，我将仍然莫名其妙。如果给我看
你的表，那么我将不再需要你的流程图，因为它们太明显了。
FredBrooks，《TheMythicalMan-Month》（人月神话）
6.1简介
当前大多数计算机科学的学生将FredBrooks的这句话理解为：“给
我看你的代码而藏起你的数据结构....."信息架构师坚信，处于大
多数系统核心的是数据，而不是算法。随着Web的兴起，用户产生
和消费的数据比以往更加推动了信息技术的使用。Web用户不会去
接触QuickSort（快速排序）。他们会访问一个数据仓库。
这些数据可以是通用的，如一本电话簿；也可以是私有的，如一个
在线仓库；也可以是个人的，如一个博客；也可以是并放的，如当
地的关气情况；还可以是严格保护的，如在线银行记录。在任何情
况下，Web呈现的几乎所有面对用户的功能归根结底都是提供一个
界面，访问站点专有的一组核心数据。这些信息构成了几乎所有网
站的核心价值，不论它是由顶级员工研究团队创建的还是由世界各
地的用户创建的。数据推动了用户喜欢的产品，所以架构师围绕数
据创建了其余的传统"n层"软件栈（逻辑层与显示层）。
这个故事讲的是Facebook的数据，以及它如何与Facebook平台的创
建一起发展。
Facebook（http://facebook.com）是一个很有用的围绕数据建立架构
的例子，包括用户提交的个人关系映射表、传记信息，以及文本或
其他媒体内容。Facebook的工程师在构建站点其余部分的架构时，
关注的是显示和操作这些社会关系数据。这个站点的大多数业务逻
辑与这些社会关系数据密切相关，诸如对各种页面的流程和访问模
式，搜索的实现，查看新闻内容，以及对内容应用可见性规则。对
987
---
## Page 989
于用户来说，这个站点的价值直接来自于他和与他有关的人对该系
统所贡献的数据的价值。
“Facebook社会关系网站"在概念上是一个标准的n层栈，用户的请求
会从Facebook的内部库中取出数据，然后通过Facebook的逻辑进行
转换，最后通过Facebook的界面输出。Facebook的工程师意识到这
些数据的用处超过了这些容器的限制。Facebook平台的创建显著地
改变了Facebook数据访问系统的形态，它包含的愿景远远超出了n层
栈的分离功能，目标是以应用的形式来集成外部的系统。利用居于
架构中心的用户社会关系数据，该平台开发了一组Web服务
（Facebook平台应用编程接口，或FacebookAPI）、一门查询语言
（Facebook查询语言，或FQL），以及一种数据驱动的标记语言
（Facebook标记语言，或FBML），目的是将应用开发者的系统与
Facebook的系统结合在一起。
随着某些数据集越来越广泛地提供出来，而且用户要求跨越多个网
和桌面应用来统一使用他们的数据，阅读本章的架构师可能会发现
立了类似的平台。本章将向读者展示Facebook以一种受控的方式向
外界开放数据的过程，跟随数据演进的每一步的架构选择，以及调
和数据开放与渗透在社会关系系统中独特的隐私需求的过程。它包
括：
促进这些类型的集成。
将数据功能从内部栈调用移到外部可见的Web服务上（Facebook
API)。
授权访问这个Web服务，注意保持这个社会关系系统的隐私性。
创建一种数据查询语言，减轻这个Web服务的新客户端的负担
（FacebookFQL）。
创建一种数据驱动的标记语言，将应用的显示集成回Facebook，同
时也支持使用其他方式不能访问的数据（FacebookFBML）。
当我们将应用的架构从分离的栈进行了足够的演进之后：
创建一些技术来弥补Facebook体验与外部应用体验之间的差异。
988
---
## Page 990
对于数据平台的使用者，本章展示了我们所做的设计决定和这些决
定背后的理由。用户会话、身份认证、Web服务和各种处理应用逻
辑的方式等概念将不断重复出现，它们是Web上所有这些类型的平
台的主题。理解它们背后的思想为数据架构提供了巨大的实践机
会，而且考虑到这些平台制造者将来可能创建的功能和形式，这种
理解也相当重要。我们鼓励数据平台制造者心里想着自己的数据
集，然后从Facebook开放其数据模型的方式中学习。某些设计选择
和折中可能只适合Facebook，或只适合处理有隐私保护的社会关系
数据，可能不完全适用于给定的数据集。但不管怎样，在每一步我
们都给出了一个实际的问题、一个数据驱动的解决方案，以及该解
决方案的高层实现。对于每个新的解决方案，我们基本上会创建一
个新的产品或平台，所以在任何时候我们都必须让这个新产品符合
用户的预期。反过来，我们会伴随每一步的演进创造一些新技术，
有时候会改变围绕应用的Web架构。
Facebook平台的开源版本可以从http://developers.facebook.com/获
得。就像这个版本一样，本章的代码是用PHP写的。请随意查看，
不过请注意，出于清晰性的考虑，这里的代码是缩写过的。
我们从这些类型的集成的动机开始，通过一个例子来讲解一个“外
部的"应用逻辑和数据（一个书店）、Facebook的社会关系数据（用
户信息和朋友关系），以及它们的集成。
6.1.1某些应用核心数据
Web应用，即使是不提供也不使用任何的数据平台，基本上仍然是
由它们内部的数据来驱动的。以http://fettermansbooks.com为例，它
一是个假想的网站，提供书籍方面的信息（如果用户感兴趣，它可
能也提供购买这些书的功能）。这个站点的功能可能包括可查找的
库存索引、关于每件产品的基本信息，以及用户每本书作出的评
论。访问这些具体的信息构成了这个应用的核心，驱动了架构的其
他部分。该站点可能使用Flash和AJAX技术，支持通过移动设备来
访问，并提供一个一流的用户界面。然而http://fettermansbooks.com
存在的根本理由是让访问者能够利用某些方法得到示例6-1中这样的
核心映射关系。
例6-1：书籍数据映射的例子
989
---
## Page 991
book_get_info: isbn->{title, author, publisher,price, cover
p1cture)
book_get_reviews: isbn->set (review_ids)
bookuser_get_reviews: books_user_id->set (review_ids)
review_get_info: review_id->
{isbn, books_user_id, rating, commentary)
所有这些最终都实现为类似简单集合的东西，能够从一个经索引的
数据表中取出。这样的书籍站点如果要有存在的价值，可能还会实
现其他一些不太简单的功能，如例6-2中的简单“查找”。
例6-2：简单查找映射
search_title_string: title_string->set ({isbn,relevance
score))
这些功能中包含的每个键值通常都会表现为
围绕着这批数据，通过一种特有的方式显示出来。例如，要查看评
论者X提交的一些评论，http://fettermansbooks.com的用户可能会被引
向页面fettermansbooks.com/reviews.php?books_user_id=X，或者要看
ISBN号为Y的某本书的所有信息（包括所有对个人评论页面的链
接），用户会被引向页面http://fettermansbooks.com/book.php？
isbn=Y。
像http://fettermansbooks.com这样的站点有一个特点是值得注意的，
即几乎所有数据都对所有用户开放。它在book_get_info这样的映射
中生成所有的内容，帮助用户发现有关某本书的尽可能多的信息。
这对于一个卖书的站点可能是好事，但在接下来的使用社会关系数
据的例子中，可见性限制决定了数据访问层的许多架构考虑。
6.1.2一些Facebook核心数据
随着所谓"Web2.0"的网络技术逐渐流行，数据在系统中的核心地位
就变得更明显了。Web2.0展现的核心主题就是它们是数据驱动的，
用户本身提供了绝大部分的数据。Facebook像
990
---
## Page 992
http://fettermansbooks.com一样，主要由一组核心数据映射构成，它
们驱动着网站的观感和功能。这些Facebook映射的极端精简集合看
起来如例6-3所示。
例6-3：社会关系数据映射示例
user_get_friends: uid->set (uids)
user_get_info: uid->(name,pic, books, current_location, ..,
can_see: (uid_viewer, uid_viewee, table_name, field_name)->0
Or1
这里的uid指的是（数字化的）Facebook用户标识符，从
user_getinfo返回的info指的是用户的描述信息（参见Facebook开发
文档中的users.getinfo），可能包含了用户最喜欢的书籍名称，因为
他们曾在http://facebook.com上输入过。这个系统从核心上来看与
http://fettermansbooks.com区别不大，只有中心数据不同，因此站点
的功能也不同，这些功能围绕着用户与其他用户的联系（“朋
发”），用户的内容（“描述信息”），以及内容的可视法则
("can_see"）。
这个can_see数据集是很特殊的。Facebook对于用户生成的数据有一
个非常核心的隐私概念，即用户X查看用户Y的信息的业务规则。
这种数据从不直接可见，但它驱动了一些重要的考虑，当我们查看
外部应用的逻辑、数据与Facebook的逻辑、数据集成的例子时，会
看到这些考虑反复出现。就其本身而言，Facebook到处使用这种数
据集令它与http://fettermansbooks.com这样的站点区别开来。
Facebook平台和其他社会关系平台认识到这种社会关系映射是有用
的，这种用处不仅体现在http://facebook.com这样的站点内部，也体
现在与http://fettermansbooks.com这样的站点功能进行集成时。
6.1.3Facebook的应用平台
对于http://fettermansbooks.com和http://facebook.com的共同用户来
说，此时因特网应用的图景如图6-1所示。
991
---
## Page 993
在一般的n层架构中，应用将输入（对于Web来说，就是GET、
POST和cookie信息的集合）映射为对原始数据的请求，这些原始数
据可能存在于数据库中。它们被转换为内存中的数据，并通过一些
业务逻辑进行智能化处理。输出模块将针对显示对这些数据对象进
行转换，变成HTML、JavaScript、CSS等。这里，在图的顶部，是
运行在基础设施之上的应用程序n层栈。在应用出现在Facebook平台
之前，Facebook完全运行在同样的架构上。重要的是，在两个架构
中，业务逻辑（包括Facebook的隐私）实际上都是根据一些规则来
执行的，这些规则建立在系统的某些数据组件之上。
App数据
SQL对象
HTML,JS,
S_REQUEST
App逻辑层
(obj)
App显示层
CSS
浏览器
App基础设施
FB基础设施
浏览器
HTML,JS,
S_REQUEST
(obj)
CSS
FB数据
FB显示层
隐私规则
FB数据
图6-1：分离的Facebook和n层应用栈
更大量的相关数据意味着业务逻辑可以提供更多个人定制的内容，