**作者：Longofo@知道创宇404实验室  
日期：2021年2月26日**
Apache
Axis分为Axis1（一开始就是Axis，这里为了好区分叫Axis1）和Axis2，Axis1是比较老的版本了，在Axis1[官方文档](http://axis.apache.org/axis/java/index.html)说到，Apache
Axis1现在已经很大程度被[Apache Axis2](http://axis.apache.org/axis2/java/core/)，[Apache
CXF](http://cxf.apache.org/)和[Metro](http://metro.java.net/)取代，但是，Axis1仍与以下类型的项目相关：
  * 需要使用JAX-RPC的项目。该API只有两种开源实现：Axis和[Sun的参考实现](http://java.net/projects/jax-rpc/)。
  * 需要使用或公开使用SOAP编码的Web服务的项目。SOAP编码已被弃用，现代Web服务框架不再支持。但是，仍然存在使用编码类型的旧式服务。
  * 使用Axis构建的现有项目，使用现代Web服务框架重写它们的投资回报将太低。
之前遇到过几个应用还是在使用Axis1，Axis1依然存在于较多因为太庞大或臃肿而没那么容易被重构的系统中。
后面记录下Axis1和Axis2相关内容。各个WebService框架的设计有区别，但是也有相通之处，熟悉一个看其他的或许能省不少力气。
### 1\. Apache Axis1
#### 1.1 搭建一个Axis项目
如果一开始不知道配置文件要配置些什么，可以使用Intellij idea创建axis项目，idea会自动生成好一个基础的用于部署的server-config.wsdd配置文件以及web.xml文件，如果手动创建需要自己写配置文件，看过几个应用中的配置文件，用idea创建的server-config.wsdd中的基本配置参数在看过的几个应用中基本也有，所以猜测大多开发Axis的如果没有特殊需求一开始都不会手动去写一些基本的参数配置，只是往里面添加service。
##### 1.1.1 使用idea创建Axis项目
  1. 新建项目，选择WebServices
  2. 选择Apache Axis
  3. 如果你不知道axis开发要依赖些什么，就选择下载（默认会下载Axis1的最新版1.4版本）；你知道的话就可以选择之后自己设置依赖
完成之后，idea生成的结构如下：
主要是会自动帮我们生成好基础的wsdd配置文件和web.xml中的servlet
##### 1.1.2 访问WebService
搭建完成之后，和通常的部署web服务一样部署到tomcat或其他服务器上就可以了访问测试了。idea默认生成的web.xml中配置了两个web
services访问入口：
  1. /services
  2. /servlet/AxisServlet
还有一种是.jws结尾的文件，也可以作为web
service，.jws里面其实就是java代码，不过.jws只是作为简单服务使用，不常用，后续是只看wsdl这种的。
后续要用到的示例项目代码传到了[github]()。
#### 1.2 基本概念
##### 1.2.1 wsdd配置文件
大体基本结构如下，更详细的可以看idea生成的wsdd文件：
        元素. -->
            http://xml.apache.org/axis/wsdd/
后续对于漏洞利用需要关注的就是``中的几个parameter，qs:list、qs:wsdl、qs:method。这些在后面会逐步看到。
##### 1.2.2 Service Styles
在官方文档一共提供了四种Service方式：
  * RPC
  * Document
  * Wrapped
  * Message，上面wsdd中的AdminService就属于这类service，``，它配置的是java:MSG
后续内容都是基于RPC方式，后续不做特别说明的默认就是RPC方式，也是Axis作为WebService常用的方式， **RPC** 服务遵循SOAP
RPC约定，其他三种方式暂不介绍（Message Service在1.2.3.4小节中会有说明）。
##### 1.2.3 wsdl组成
访问AdminService的wsdl来解析下wsdl结构：
wsdl主要包含5个部分：
  * types
  * messages
  * portType
  * binding
  * service
结合AdminService的代码来更好的理解wsdl：
    public class Admin {
        protected static Log log;
        public Admin() {
        }
        public Element[] AdminService(Element[] xml) throws Exception {
            log.debug("Enter: Admin::AdminService");
            MessageContext msgContext = MessageContext.getCurrentContext();
            Document doc = this.process(msgContext, xml[0]);
            Element[] result = new Element[]{doc.getDocumentElement()};
            log.debug("Exit: Admin::AdminService");
            return result;
        }
        ...
    }
###### 1.2.3.1 types
types是对于service对应的类，所有公开方法中的复杂参数类型和复杂返回类型的描述。如：
AdminService方法的参数和返回值中都有复杂类型，``表示AdminService方法的Element[]参数，是一个Element类型的数组，不是基本类型（基本类型可以看1.2.4节），如果没有配置该类的对应的序列化器和反序列化器（在后续可以看到），在wsdl中就会写成`type="xsd:anyType"`。``就是AdminService方法的返回值，同理。
###### 1.2.3.2 messages
messages是对于service对应的类，每个公开方法每个参数类型和返回类型的描述。如：
``就是AdminService方法入参，它是一个复杂类型，所以用`element="impl:AdminService"`引用上面types中的``。``同理表示。
###### 1.2.3.3 portType
portType是service对应的类，有哪些方法被公开出来可被远程调用。如：
这个service的AdminService方法被公开出来可以调用，他的输入输出分别是`impl:AdminServiceRequest`和`impl:AdminServiceResponse`，也就是上面messages对应的两个定义。
###### 1.2.3.4 binding
binding可以理解成如何通过soap进行方法请求调用的描述。如：
这个binding的实现是impl:Admin，就是portType中的Admin。`