## PostgreSQL extension(插件) 管理工具项目 pgxman - 大家把编译方法贡献给pgxman集中管理? OR pgxn?       
### 作者                              
digoal                              
### 日期                              
2023-12-18                              
### 标签                              
PostgreSQL , PolarDB , DuckDB , extension , 插件管理 , pgxn                  
----                              
## 背景    
pgxman这个项目尝试做成一个共享项目, 大家可以根据模板写出yaml文件, 把PG插件的编译脚本集中后, 由pgxman来管理插件.   
参考:   
- https://github.com/pgxman/pgxman  
- https://pgxman.com/  
With pgxman, we've streamlined the installation process to one simple step: run pgxman install [extension name].  
pgxman integrates with the system package manager, ensuring the correct versions are installed without extra packages from any shared dependencies between extensions. pgxman’s automated build system creates APT packages for each Postgres version, platform, and OS supported by the extension. Extensions are built from a buildkit formula, written in YAML, and are contributed through GitHub.  
目前已有的插件管理脚本如下:  
- https://github.com/pgxman/buildkit/tree/main/buildkit   
相比于pgxman, 其实使用pgxn也蛮好管理的.   例如:  
```
root@0af92301ec9d:/tmp# pgxn search vector
VOPS 2.0.1
    ... first possible advantages we can expect from usage of *vector*
    *vector* operations. *Vector* executor is widely discussed in Postgres
    forums, but efficient *vector* executor is not possible without...
vector 0.5.1
    ... for *vector* elements to match real Changed storage for *vector*
    from plain to extended Increased max dimensions for *vector* from 1024
    to 16000 Increased max dimensions for index from 1024 to 2000...
kmeans 1.1.0
    ... in the first form, you may sometimes want to give fixed mean
    *vectors*. The *vectors* can be passed as 1-d array or 2-d array of
    float8. In case of 1-d, the length of it must match k *
    lengthof(*vector*).
VOPS 2.0.1
    Query transformation VOPS is *vectorized* executor for Postgres. It is
    implemented as extension and can be used with any version of Postgres
    and doesn't require any changes in Postgres core.
imcs 0.1.7
    imcs.tile_sizeSize of tile or *vector* that is used to organize *vector*
    operations128The larger tile is, the less influence of interpretation
    overhead.
veil2 0.9.1
    I don't see any attack *vector* -- here as it should be impossible to
    get past the checks in -- check_nonce() by attempting to re-use (in a
    replay attack) a -- nonce from a group that we have dropped.
root@0af92301ec9d:/tmp# pgxn install kmeans
INFO: best version: kmeans 1.1.0
INFO: saving /tmp/tmpkglwgt3h/kmeans-1.1.0.zip
INFO: unpacking: /tmp/tmpkglwgt3h/kmeans-1.1.0.zip
INFO: building extension
sed 's,MODULE_PATHNAME,$libdir/kmeans,g' kmeans.sql.in >kmeans.sql
cp kmeans.sql kmeans--1.1.0.sql
gcc -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wimplicit-fallthrough=3 -Wcast-function-type -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -Wno-format-truncation -Wno-stringop-truncation -moutline-atomics -g -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -fPIC -I. -I./ -I/usr/include/postgresql/14/server -I/usr/include/postgresql/internal  -Wdate-time -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -I/usr/include/libxml2   -c -o kmeans.o kmeans.c
kmeans.c: In function ‘kmeans_impl’:
kmeans.c:311:10: warning: variable ‘arg’ set but not used [-Wunused-but-set-variable]
  311 |   Datum  arg;
      |          ^~~
gcc -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-after-statement -Werror=vla -Wendif-labels -Wmissing-format-attribute -Wimplicit-fallthrough=3 -Wcast-function-type -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -Wno-format-truncation -Wno-stringop-truncation -moutline-atomics -g -g -O2 -fstack-protector-strong -Wformat -Werror=format-security -fPIC kmeans.o -L/usr/lib/aarch64-linux-gnu -Wl,-z,relro -Wl,-z,now -L/usr/lib/llvm-11/lib  -Wl,--as-needed  -shared -o kmeans.so
/usr/bin/clang-11 -Wno-ignored-attributes -fno-strict-aliasing -fwrapv -Wno-unused-command-line-argument -O2  -I. -I./ -I/usr/include/postgresql/14/server -I/usr/include/postgresql/internal  -Wdate-time -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -I/usr/include/libxml2  -flto=thin -emit-llvm -c -o kmeans.bc kmeans.c
INFO: installing extension
/bin/mkdir -p '/usr/share/postgresql/14/extension'
/bin/mkdir -p '/usr/share/postgresql/14/extension'
/bin/mkdir -p '/usr/lib/postgresql/14/lib'
/bin/mkdir -p '/usr/share/doc/postgresql-doc-14/extension'
/usr/bin/install -c -m 644 .//kmeans.control '/usr/share/postgresql/14/extension/'
/usr/bin/install -c -m 644 .//kmeans--1.1.0.sql kmeans.sql '/usr/share/postgresql/14/extension/'
/usr/bin/install -c -m 755  kmeans.so '/usr/lib/postgresql/14/lib/'
/bin/mkdir -p '/usr/lib/postgresql/14/lib/bitcode/kmeans'
/bin/mkdir -p '/usr/lib/postgresql/14/lib/bitcode'/kmeans/
/usr/bin/install -c -m 644 kmeans.bc '/usr/lib/postgresql/14/lib/bitcode'/kmeans/./
cd '/usr/lib/postgresql/14/lib/bitcode' && /usr/lib/llvm-11/bin/llvm-lto -thinlto -thinlto-action=thinlink -o kmeans.index.bc kmeans/kmeans.bc
/usr/bin/install -c -m 644 .//doc/kmeans.md '/usr/share/doc/postgresql-doc-14/extension/'
```  
# pgxman - PostgreSQL Extension Manager  
[![GitHub release](https://img.shields.io/github/release/pgxman/pgxman.svg)](https://github.com/pgxman/pgxman/releases)  
pgxman is npm for Postgres extensions. pgxman simplifies the discovery and use of extensions so modern hackers  
can easily enhance the capabilities of their applications.  
Instead of managing extension versions, build & run dependencies, operating system, platform architecture, pgxman  
automatically detects and streamlines extension operations (xOps) based on the local development environment.  
With pgxman, we've streamlined the installation process to one simple step: run `pgxman install [extension name]`.  
pgxman integrates with the system package manager, ensuring the correct versions are installed without extra packages  
from any shared dependencies between extensions. pgxman’s automated build system creates  
[APT](https://en.wikipedia.org/wiki/APT_(software)) packages for each Postgres version, platform, and OS supported  
by the extension. Extensions are built from a buildkit formula, written in YAML, and are contributed  
[through GitHub](https://github.com/pgxman/buildkit).  
## More Documentation  
Try `pgxman help`, `man pgxman`, or [read our documentation](https://docs.pgxman.com).  
## Installation  
Run:  
```sh  
# with homebrew  
brew install pgxman/tap/pgxman  
# without homebrew  
curl -sfL https://install.pgx.sh | sh -  
```  
For more options, see [our installation documentation](https://docs.pgxman.com/installing_pgxman).  
## Quickstart  
### `search`  
Find extensions with `pgxman search`:  
```sh  
pgxman search fdw  
```  
### `install`  
To install an extension, say `pgvector`, run:  
```sh  
pgxman install pgvector  
```  
pgxman will automatically detect your local install of Postgres (or, on MacOS, will [use a container](https://docs.pgxman.com/container)).  
You can specify multiple extensions, specific extension versions, and a PG version:  
```sh  
pgxman install --pg 15 pgvector=0.5.1 pg_ivm=1.7.0  
```  
You can also utilize a [pack file](https://docs.pgxman.com/spec/pack) to install multiple extensions at once:  
```sh  
pgxman pack install # installs from pgxman.yaml from current directory  
pgxman pack install -f /path/to/pgxman.yaml  
```  
Once installed, restart Postgres, then use `CREATE EXTENSION`.  
### `init`, `build`  
[Please refer to our docs for how to build an extension for pgxman](https://docs.pgxman.com/building_an_extension).  
## How it works  
pgxman's build system works with your system package manager. The buildkit  
specifies how to build each extension and builds it for each package manager.  
When a buildkit is added or updated, a build is conducted and the packages are  
stored in pgxman's repositories.  
When installing an extension, pgxman's package repository is used to install  
the packages into your system. This way, pgxman is able to handle dependency  
management, installation, and uninstallation through your system's package  
manager.  
pgxman itself is either installed as an apt package or via homebrew.  
For more details, see [how it works](https://docs.pgxman.com/how_it_works) in the  
documentation.  
## License  
The pgxman client is licensed under the [FSL](LICENSE.md), which, in short, means  
pgxman is open for all internal, non-competing usage. To learn more about the  
FSL, please see [fsl.software](https://fsl.software). As stated:  
> You can do anything with FSL software except undermine its producer. You can read it,  
> learn from it, run it internally, modify it, and propose improvements back to the  
> producer. After two years it becomes Open Source software under Apache 2.0 or MIT.  
We consider any Postgres service provider using pgxman as part of their service  
to be a Competing Usage. However, we encourage widespread adoption of pgxman and welcome  
any service provider to contact us at `pgxman [at] hydra [dot] so` to obtain a  
license for usage as part of your service. Our main concern is assuring the pgxman  
service can scale to the needs of your service.  
## 其中一个编辑脚本bloom的示范  
https://github.com/pgxman/buildkit/blob/main/buildkit/bloom.yaml  
apiVersion: v1  
name: bloom  
version: "15.5.0"  
homepage: https://www.postgresql.org/docs/15/bloom.html  
repository: https://github.com/postgres/postgres  
source: https://ftp.postgresql.org/pub/source/v15.5/postgresql-15.5.tar.gz  
description: bloom access method - signature file based index  
license: PostgreSQL  
arch:  
  - amd64  
  - arm64  
maintainers:  
  - name: Jonathan Dance  
    email: PI:EMAIL  
build:  
  main:  
    - name: Build bloom  
      run: |  
        cd contrib/bloom  
        make  
        DESTDIR=${DESTDIR} make install  
pgVersions:  
  - "15"  
readme: |  
  For formatted documentation, please see https://www.postgresql.org/docs/15/bloom.html.  
  ```  
     #F.6. basic_archive F.8. btree_gin  