**作者：Ja0k@SecurityCN**  
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！**  
**投稿邮箱：PI:EMAIL**
## 一、事件背景
近日，Apache官方发布了ShardingSphere 新版本修复了一个YAML解析导致的远程代码执行漏洞（CVE-2020-1947）。 Apache
ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（规划中）这3款相互独立，却又能够混合部署配合使用的产品组成。它们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。
## 二、漏洞信息
漏洞名称 | Apache ShardingSphere UI YAML解析远程代码执行漏洞  
---|---  
CVE编号 | CVE-2020-1947  
影响范围 | Apache ShardingSphere UI  通过4.0.1
版本的change-log 中的Enhancement 可以看到添加了一个类过滤器构造函数以限制来自YAML的非法类。
incubator-shardingsphere-4.0.1\sharding-core\sharding-core-common\src\main\java\org\apache\shardingsphere\core\yaml\engine\ClassFilterConstructor.java
    public final class ClassFilterConstructor extends Constructor {
        private final Collection> acceptClasses;
        @Override
        protected Class getClassForName(final String name) throws ClassNotFoundException {
            for (Class each : acceptClasses) {
                if (name.equals(each.getName())) {
                    return super.getClassForName(name);
                }
            }
            throw new IllegalArgumentException(String.format("Class is not accepted: %s", name));
        }
    }
添加了一个白名单类acceptClasses列表用for each进行遍历，其他危险的类调用将会被拒绝，如本次Poc中的调用类JdbcRowSetImpl
再看4.0.0 版本中
src/main/java/org/apache/shardingsphere/ui/util/ConfigurationYamlConverter.java
直接使用unmarshal方法对输入的YAML直接进行解析，没有做校验。那么就可以参考Fastjson的反序列化漏洞，通过com.sun.rowset.JdbcRowSetImpl类远程调用来进行JNDI注入。
漏洞触发点就是YAML
### 四、漏洞复现
#### 搭建 Apache ShardingSphere UI环境
1.github下载的 Apache ShardingSphere UI 需要编译之后使用
    编译过程
    #wget -c https://github.com/apache/incubator-shardingsphere/archive/4.0.0.tar.gz
    #cd incubator-shardingsphere/shrding-ui/
    #mvn clean package -Prelease
    Get the package in shardingsphere-ui/shardingsphere-ui-distribution/shardingsphere-ui-bin-distribution/target/apache-shardingsphere-incubating-${latest.release.version}-shardingsphere-ui-bin.tar.gz
2.也可以在官网下载Linux版本二进制程序包 （建议大家用此方法）
下载地址：  