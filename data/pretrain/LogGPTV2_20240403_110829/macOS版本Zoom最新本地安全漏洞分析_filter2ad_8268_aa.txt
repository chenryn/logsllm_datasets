# macOS版本Zoom最新本地安全漏洞分析
|
##### 译文声明
本文是翻译文章，文章来源：https://objective-see.com/blog/blog_0x56.html
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
Zoom在4.6.9 (19273.0402)版本中已将漏洞修复：  
关于补丁的更多细节请移步以下链接：  
[macOS上的最新更新](https://support.zoom.us/hc/en-us/articles/201361963-New-Updates-for-macOS)
* * *
## 背景
由于当前全球受疫情影响严重，政府已下达相关封锁措施。在家办公成为了主流的工作形式。也正因如此“现代企业视频通信的领导者”
Zoom逐渐成为家喻户晓的软件平台，其股价也开始一路飙升📈。
然而，如果你对(网络)安全或者隐私比较重视，那么在使用(macOS版本)应用程序时需小心谨慎。
在本篇文章中，首先我们将简要介绍最近影响Zoom的相关安全、隐私漏洞。而后我们会讨论在最新版本的Zoom(macOS客户端)中发现的几个新的安全问题。
尽管我们今天要讨论的安全问题仍未解决（注：文章写作之时还未修复，现已修复），但它们都是本地安全问题。也就是说恶意软件或者攻击者如果想利用这些漏洞，需要在macOS系统中已然成功驻留。
虽然Zoom软件非常受欢迎，但它在安全和隐私方面的表现实在不尽如人意。
2019年6月，安全研究员[乔纳森·莱切德(Jonathan
Leitschuh)](https://twitter.com/JLLeitschuh)在Mac上的Zoom客户端中发现了一个可利用的远程0day漏洞，使得任意恶意网站能够在未经用户允许的情况下启动用户的摄像头😱。  
如果用户摄像头已打开，漏洞允许任意网站在未经许可的情况下强行加入Zoom的通话中。此外，在你将Zoom客户端卸载后，您的机器上仍然会有一个本地web服务，它的作用是在你访问网页时重新为您安装Zoom客户端且无需其他任何交互。这个重安装的特性保留至今。-Jonathan
Leitschuh
如果你对此还想了解更多细节，请访问以下链接：[“Zoom Zero Day: 4+ Million Webcams & maybe an
RCE?”](https://medium.com/bugbountywriteup/zoom-zero-day-4-million-webcams-maybe-an-rce-just-get-them-to-visit-your-website-ac75c83f4ef5).
更好笑的是Apple公司后来通过macOS的`Malware Removal Tool`
(`MRT`)工具强制移除掉了Zoom中有问题的相关组件。[详情链接](//twitter.com/patrickwardle/status/1149176886817255424?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1149176886817255424&ref_url=https%3A%2F%2Fobjective-see.com%2Fblog%2Fblog_0x56.html)
据我所知，这是Apple公司唯一一次采取如此严厉的行动。[详情链接](//twitter.com/thomasareed/status/1244710649508302854?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1244710649508302854&ref_url=https%3A%2F%2Fobjective-see.com%2Fblog%2Fblog_0x56.html)
最近，Zoom遭遇了相当尴尬的隐私泄露事件，有研究者发现他们的ios程序会在即使没有Facebook账户的情况下向Facebook发送数据。  
如果你对此还想了解更多细节，请访问以下链接：[“Zoom iOS App Sends Data to Facebook Even if You Don’t
Have a Facebook Account”](https://www.vice.com/en_ca/article/k7e599/zoom-ios-app-sends-data-to-facebook-even-if-you-dont-have-a-facebook-account).
尽管Zoom迅速修补了相关漏洞（通过删除对应部分代码），但仍然有许多安全研究者指出，这些代码原本一开始就不应该出现在程序中。[详情链接](//twitter.com/_inside/status/1243702866931601408?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1243702866931601408&ref_url=https%3A%2F%2Fobjective-see.com%2Fblog%2Fblog_0x56.html)
如今，著名macOS安全研究员[Felix Seele](https://twitter.com/c1truz_)（OBTS
v2.0演讲者）指出，Zoom在macOS上的安装器在执行安装任务时不需要用户的点击安装。[详情链接](//twitter.com/c1truz_/status/1244737672930824193?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1244737672930824193&ref_url=https%3A%2F%2Fobjective-see.com%2Fblog%2Fblog_0x56.html)
这种做法并不是严格意义上的恶意行为，但仍然有导致安全问题发生的可能。安装应用程序时没有得到用户的最终同意，并且使用一个具有高度误导性的提示来获得root权限。这种技巧只出现在macOS恶意软件身上。
-Felix Seele
如果你对此还想了解更多细节，请访问以下链接：[“Good Apps Behaving Badly: Dissecting Zoom’s macOS
installer workaround”](https://www.vmray.com/cyber-security-blog/zoom-macos-installer-analysis-good-apps-behaving-badly/)
Felix提到的安装脚本，我们可以通过[Suspicious
Package](https://mothersruin.com/software/SuspiciousPackage/)从Zoom的安装器包中轻易地提取并查看：  
## Zoom本地安全漏洞#1 权限提升漏洞
Zoom公司在安全和隐私方面的处理还有很多不足之处。因此，在Felix
Seele[提到](https://twitter.com/c1truz_/status/1244737675191619584)Zoom安装器会调用AuthorizationExecuteWithPrivileges
API来执行各种特权安装任务之时，我决定仔细研究一下。很快我就发现了几个安全问题，其中包括一个可靠的本地特权提升漏洞（提升至root权限）。
我曾经多次提到过关于Apple公司明确指出不应该再使用AuthorizationExecuteWithPrivileges
API的问题。原因就是此API没有验证将要执行的二进制文件（且是要以root权限运行）。这意味着本地没有高权限的攻击者或者恶意软件可以暗中篡改、替换它，从而将他们的权限升级到root:  
在DefCon 25期间，我发表过关于此议题的演讲“[Death By 1000
Installers](https://speakerdeck.com/patrickwardle/defcon-2017-death-by-1000-installers-its-all-broken)”
。以及相关的[博文](https://www.anquanke.com/post/id/201463)。
此外， [Julia Vashchenko](https://twitter.com/iaronskaya)在 [“Objective by the
Sea” v3.0](https://objectivebythesea.com/v3/)上也做了关于此不安全API演讲，题目为“[Job(s) Bless
Us! Privileged Operations on
macOS](https://objectivebythesea.com/v3/talks/OBTS_v3_jVashchenko.pdf)“：  
同时注意如果AuthorizationExecuteWithPrivileges
API执行的是受保护的二进制文件（[SIP](https://en.wikipedia.org/wiki/System_Integrity_Protection)）或者只读类型的程序（脚本），那么这个问题将会迎刃而解。(在这种情况下，非特权代码无法对二进制文件做篡改、替换等操作)
现在我们把目光拉回Zoom本身，“他们是如何利用这种本质上并不安全的API”这一问题成为重中之重。如果他们的调用方式存在缺陷，那我们很可能就会发现一个权限提升漏洞！
正如我在DefCon[演讲](https://speakerdeck.com/patrickwardle/defcon-2017-death-by-1000-installers-its-all-broken)中说的那样，回答这个问题最简单的方法就是运行process
monitor，而后执行安装器包（或其他调用AuthorizationExecuteWithPrivileges
API的文件），并观察传递给security_authtrampoline的参数(最终执行特权操作的setuid系统二进制程序):  
上图是AuthorizationExecuteWithPrivileges
API初始过程的控制流图，并说明了将使用root权限执行的项(二进制、脚本、命令等)是如何作为第一个参数传递给security_authtrampoline进程的。如果这个参数，这个项，可以由一个无特权的攻击者编辑（篡改），那么就会产生严重的安全问题!
我们来看一看Zoom通过AuthorizationExecuteWithPrivileges究竟执行了什么？
首先，我们从 处下载Zoom macOS版本的最新下载器（Version 4.6.8
(19178.0323)）：  
然后，我们启动我们在macOS上的进程监控工具Process Monitor（)，并启动Zoom安装器包（Zoom.pkg）。
如果用户在正常模式（非管理员）下安装Zoom，安装器会弹出以下窗口请求管理员凭据：  
我们的进程监控工具会观察/usr/libexec/security_authtrampoline的启动（ES_EVENT_TYPE_NOTIFY_EXEC）来处理授权请求：
    # ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
    {
      "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
      "process" : {
        "uid" : 0,
        "arguments" : [
          "/usr/libexec/security_authtrampoline",
          "./runwithroot",
          "auth 3",
          "/Users/tester/Applications/zoom.us.app",
          "/Applications/zoom.us.app"
        ],
        "ppid" : 1876,
        "ancestors" : [
          1876,
          1823,
          1820,
          1
        ],
        "signing info" : {
          "csFlags" : 603996161,
          "signatureIdentifier" : "com.apple.security_authtrampoline",
          "cdHash" : "DC98AF22E29CEC96BB89451933097EAF9E01242",
          "isPlatformBinary" : 1
        },
        "path" : "/usr/libexec/security_authtrampoline",
        "pid" : 1882
      },
      "timestamp" : "2020-03-31 03:18:45 +0000"
    }
观察Zoom试图以root权限去执行什么？（也就是传递给security_authtrampoline的参数是什么？）
发现是一个名为runwithroot的bash脚本。
如果用户提供了正确的凭据，runwithroot脚本便会以root权限执行（注：uid: 0）
    {
      "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
      "process" : {
        "uid" : 0,
        "arguments" : [
          "/bin/sh",
          "./runwithroot",
          "/Users/tester/Applications/zoom.us.app",
          "/Applications/zoom.us.app"
        ],