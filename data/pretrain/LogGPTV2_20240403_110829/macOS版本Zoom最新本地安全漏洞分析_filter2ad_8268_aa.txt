# macOS版Zoom最新本地安全漏洞分析

## 译文声明
本文为翻译文章，原文链接：[https://objective-see.com/blog/blog_0x56.html](https://objective-see.com/blog/blog_0x56.html)。译文仅供参考，具体内容及含义请以原文为准。

## 前言
Zoom在4.6.9 (19273.0402)版本中已修复了相关漏洞。更多补丁详情，请参阅以下链接：
- [macOS上的最新更新](https://support.zoom.us/hc/en-us/articles/201361963-New-Updates-for-macOS)

---

## 背景
由于新冠疫情的影响，远程办公已成为主流工作模式，这使得“现代企业视频通信的领导者”Zoom迅速成为家喻户晓的软件平台，其股价也一路飙升📈。然而，对于重视网络安全和隐私的用户来说，在使用macOS版Zoom时需格外谨慎。

本文将简要介绍最近影响Zoom的安全与隐私问题，并讨论在最新版本的macOS客户端中发现的几个新的本地安全漏洞。尽管这些漏洞已在最新版本中得到修复，但它们都是本地安全问题。这意味着恶意软件或攻击者必须已经成功驻留在macOS系统中才能利用这些漏洞。

### Zoom的历史安全问题
- **摄像头漏洞**：2019年6月，安全研究员乔纳森·莱切德（Jonathan Leitschuh）在Mac版Zoom客户端中发现了一个可被远程利用的0day漏洞，该漏洞允许任意恶意网站未经用户许可启动用户的摄像头😱。此外，即使用户卸载了Zoom客户端，本地web服务仍然会自动重新安装Zoom客户端而无需任何交互。
  - 更多细节请访问：[“Zoom Zero Day: 4+ Million Webcams & maybe an RCE?”](https://medium.com/bugbountywriteup/zoom-zero-day-4-million-webcams-maybe-an-rce-just-get-them-to-visit-your-website-ac75c83f4ef5)
  - Apple公司通过macOS的`Malware Removal Tool` (`MRT`)工具强制移除了Zoom中的相关组件。
    - 详情链接：[Patrick Wardle的推特](//twitter.com/patrickwardle/status/1149176886817255424?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1149176886817255424&ref_url=https%3A%2F%2Fobjective-see.com%2Fblog%2Fblog_0x56.html)
- **iOS隐私泄露**：研究者发现Zoom的iOS应用会在没有Facebook账户的情况下向Facebook发送数据。
  - 更多细节请访问：[“Zoom iOS App Sends Data to Facebook Even if You Don’t Have a Facebook Account”](https://www.vice.com/en_ca/article/k7e599/zoom-ios-app-sends-data-to-facebook-even-if-you-dont-have-a-facebook-account)
  - 尽管Zoom迅速修补了这一漏洞，但许多安全研究者指出，这些代码原本就不应该出现在程序中。
    - 详情链接：[Inside Security的推特](//twitter.com/_inside/status/1243702866931601408?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1243702866931601408&ref_url=https%3A%2F%2Fobjective-see.com%2Fblog%2Fblog_0x56.html)
- **安装器问题**：著名macOS安全研究员Felix Seele指出，Zoom的macOS安装器在执行安装任务时不需要用户的点击确认。这种做法虽然不是严格意义上的恶意行为，但仍可能导致安全问题。
  - 更多细节请访问：[“Good Apps Behaving Badly: Dissecting Zoom’s macOS installer workaround”](https://www.vmray.com/cyber-security-blog/zoom-macos-installer-analysis-good-apps-behaving-badly/)
  - Felix提到的安装脚本可以通过[Suspicious Package](https://mothersruin.com/software/SuspiciousPackage/)从Zoom的安装器包中提取并查看。

## Zoom本地安全漏洞 #1：权限提升漏洞
Zoom在安全和隐私方面的处理仍有不足之处。因此，当Felix Seele指出Zoom安装器调用`AuthorizationExecuteWithPrivileges` API来执行特权安装任务时，我决定深入研究。很快，我发现了一些安全问题，其中包括一个可靠的本地特权提升漏洞（提升至root权限）。

Apple公司明确指出不应再使用`AuthorizationExecuteWithPrivileges` API，因为该API不会验证即将执行的二进制文件，这意味着本地低权限的攻击者或恶意软件可以篡改、替换它，从而将权限升级到root。

- 在DefCon 25期间，我发表了关于此议题的演讲：“[Death By 1000 Installers](https://speakerdeck.com/patrickwardle/defcon-2017-death-by-1000-installers-its-all-broken)”。
- Julia Vashchenko也在Objective by the Sea v3.0上做了相关演讲：“[Job(s) Bless Us! Privileged Operations on macOS](https://objectivebythesea.com/v3/talks/OBTS_v3_jVashchenko.pdf)”。

如果`AuthorizationExecuteWithPrivileges` API执行的是受保护的二进制文件（如SIP保护或只读类型的脚本），则这个问题将得以解决。然而，Zoom是如何使用这个本质上不安全的API的呢？如果他们的调用方式存在缺陷，我们很可能会发现一个权限提升漏洞。

### 分析过程
为了回答这个问题，最简单的方法是运行进程监控工具，并观察传递给`security_authtrampoline`的参数。以下是具体步骤：

1. 从官方网站下载最新的Zoom macOS版本（Version 4.6.8 (19178.0323)）。
2. 启动macOS上的进程监控工具Process Monitor，并启动Zoom安装器包（Zoom.pkg）。
3. 如果用户在正常模式下安装Zoom，安装器会弹出窗口请求管理员凭据。
4. 进程监控工具会观察`/usr/libexec/security_authtrampoline`的启动（ES_EVENT_TYPE_NOTIFY_EXEC）来处理授权请求。

例如，以下是监控到的日志片段：

```json
{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "uid" : 0,
    "arguments" : [
      "/usr/libexec/security_authtrampoline",
      "./runwithroot",
      "auth 3",
      "/Users/tester/Applications/zoom.us.app",
      "/Applications/zoom.us.app"
    ],
    "ppid" : 1876,
    "ancestors" : [
      1876,
      1823,
      1820,
      1
    ],
    "signing info" : {
      "csFlags" : 603996161,
      "signatureIdentifier" : "com.apple.security_authtrampoline",
      "cdHash" : "DC98AF22E29CEC96BB89451933097EAF9E01242",
      "isPlatformBinary" : 1
    },
    "path" : "/usr/libexec/security_authtrampoline",
    "pid" : 1882
  },
  "timestamp" : "2020-03-31 03:18:45 +0000"
}
```

观察到Zoom试图以root权限执行名为`runwithroot`的bash脚本。如果用户提供了正确的凭据，`runwithroot`脚本将以root权限执行（注：uid: 0）。

```json
{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "uid" : 0,
    "arguments" : [
      "/bin/sh",
      "./runwithroot",
      "/Users/tester/Applications/zoom.us.app",
      "/Applications/zoom.us.app"
    ],
```

通过这种方式，我们可以看到Zoom在安装过程中使用的不安全API及其潜在的风险。