Intel C++编译器生成的汇编代码更为烦琐。例如，在编译下述源代码时：
Int f1(Int a)
return a*13J
1:
Intel C++生成的汇编代码为：
指令清单A.2Intel C++2011
_f1
PROC NEAR
nov
ecx, DWORD PTR [4+esp]
1oa
edx, DWORD PTR [ecx+ecx*8]
1 edx = a*9
: ecx * a
1ea
eax, DORD PTR [edx+ecx*4]
+ esx - a*9 + a*4 - a*13
ret:
即使如此，两条LEA指令的执行效率仍然超过了单条IMUL指令
MOVSB/MOVSW/MOVSD/MOVSQ：复制8位单字节数据（Byte）/16位Word数据（Word）/32位
双字型数据（Dword）64位四字型数据（Qword）的指令。默认情况下，它将把SI/ESI/RSI寄存器里的值
当作源操作数的地址，目标操作数的地址将取自DI/EDI/RDI寄存器。
在与REP前级组合使用时，它会把CX/ECX/RCX作为循环控制变量进行循环操作。这种情况下，它
就像C语言中的memcpyO函数那样工作。如果编译器在编译阶段能够确定每个模块的大小，编译器通常
---
## Page 444
920
逆向工程权威指南（下册)
使用REPMOVSx指令以内连函数的形式实现mcmcpyO。
例如，memcpy（EDI，ESI，15）等效于：
: copy 15 bytes from ESI to SDI
MOV ECX, 3
CLD
REP Movso: copy 12 bytes
MIOVSB
EOVSK
/ copy renaining byte
 copy 2 nore bytes
在复制15字节的内容时，从寄存器读取的操作效率来者，上述代码的效率要高于15次数据读写（MOVSB）
的操作效率。
MOVSX：以符号扩展的方法实现signed型数据的类型转换（参见本书15.1.1节）。
MOVZX：以用零扩展的方法实现unsigned型数据的类型转换（参见本书15.1.1节）。
而非移动数据，在某些平台上，这条指令的名字是“LOAD”或者某个类似的名字。
值得一提的是，当使用MOV指令给32位寄存器的低16位赋值时，寄存器的高16位不会发生变化。
面使用MOV指令给64位寄存器的低32位赋值时，寄存器的高32位会被清零。
64位寄存器的高32位被自动清零的特性，可能是为了在x86-64系统上兼容32位程序而有意这样设计的。
MUL：unsigned型数据的乘法运算指令。
NEG：求补指令（并非补码计算指令）。NEGop可得到op
NOP：NOP 指令。在x86平台上的 opcode 是0x90。这个 opcode 和 XCHG EAX，EAX 的空操作指令
相同。这即是说，x86平台没有NOP专用的汇编指令，面RISC平台上NOP有专用的汇编指令。有关这个
指令的详细介绍，请参见本书的第88章。
编译器可能会使用NOP指令进行16字节边界对齐。此外，在手工修改程序时，人们也会使用NOP
指令进行指令替换，用于屏蔽条件转移之类的汇编指令。
NOT：求反指令/逻辑“非”运算指令。
OR：逻辑“或”运算指令
POP：出栈指令。它从SS：[ESP]中取值，再执行 ESP=ESP+4（或8）的操作。
PUSH：入栈指令。它先进行ESP-ESP+4（或8），再向地址SS：[ESP]存储数据。
RET：子程序返回函数，相当于POPtmp 或JMPump。
实际上RET是汇编语言的宏。在Windows 和*NIX 环境中，它会被解释为RETN（“retum ncar）：在
MS-DOS的寻址方式里，它被解释为RETF（参见本书第94章）。
RET指令可以有操作数。在这种情况下，它等网于POP tmp、ADDESPopl及JMPtmp。在符合调用
约定stdcall的程序里，每个函数最后的 RET指令通常都有相应的操作数，有关细节请参见本书的64.2。
SAHF：标识传送指令，它把AH寄存器的值，复制到CPU到标识上。对应的数权关系如下表所示。
SFZF
AF
CF
SBB：借位减法运算指令。计算出操作数间的差值之后，如果CF标识位为1，则将差值递减。SBB
指令常见于大型数据的减法运算，例如，在32位系统上计算2个64位数据的差值时，编译器通常组合使
用 SUB 和 SBB 指令:
：计算两个64位数的差值；va11=va11-va12
：1o代表低32位：hi代表高32位
SU8 va11.1o, va12.10
s88va11.h1，va12.h1：使用了前一个指令设置的cr标识位
本书第24章还有更详细的介绍。
SCASB/SCASW/SCASD/SCASQ（M）：比较8位单字节数据（Byte）/16位Word数据（Word）/32位
---
## Page 445
附录Ax86
921
双字型数据（Dword）/64位四字型数据（Qword）的指令。它将AX/EAX/RAX寄存器里的值当作源操
作数，另一个操作数则取自DI/EDI/RDI寄存器。在比较结果之后再设置标识位，设置标识位的方式和
CMP 指令相同。
这些指令通常与REPNE指令前缓组合使用。在这种情况下，组合指令将把寄存器AX/EAX/RAX里存
储的值当作关键字，在缓冲区里进行搜索。此时，REPNE里的NE就意味着：如果值不相等，则继续进行
比较（搜索）。
这种指令常常用于实现strlenO函数，以判明ASCIIZ型字符申的长度。例如：
1ea
ecx,0rrrrrh;值 2-1 bytes，即，接近“无限*
dutaie *1p
302
esx, esx
0作终止符
repee scasb
Fpe
ed1, oFFFFFFTh : 正
：现在，EDI 寄存基的值指向里ASCII2字符申的最后一个字符
：接下来将计算字符申的长度
： BR scX = -1-strlen
dec
ecx
：此E，ECX的值是字符串的长度值
如果AX/EAX/RAX里存储的值不同，那么这个函数的功能就和标准C函数memchrO一致，即搜索特
定 byte.
SHL：逻辑左移指令。
765432 10
CF
765432.0。
SHR：逻辑右移指令.
265432±0
76543210
指令常用于乘以/除以2”乘除运算，此外，它们还常见于字段处理的各种实践方法（请参见本书第
19 章)。
SHRD op1，op2，op3：双精度右移指令。把op2右移op3位，移位引起的空缺位由opl的相应位进
行补足。详细介绍，请参见本书第24章。
STOSB/STOSW/STOSD/STOSQ：8位单字节数据（Byte）/16位Word数据（Word）/32位双字型数
据（Dword）/64位四字型数据（Qword）的输出指令。它把AX/EAX/RAX的值当作源操作数，存储到
DI/EDIRDI为目的串地址指针所寻址的存储器单元中去。指针DI将根据DF的值进行自动调整。
在与REP前缓组合使用时，它将使用CX/ECX/RCX寄存器作循环计数器、进行多次循环：工作方式
与C语言到memsetO函数相似，如果编译器能够在早期阶段确定区间大小，那么将通过REP MOVSx指令
实现memsetO函数，从而减少代码碎片。
---
## Page 446
922
逆向工程权威指南（下册）
例如，memset（EDI，0xAA，15）对应的汇编指令是：
在EDI中存储15个 0x
NOV EAX, OAAAh
CLD
: set direction to *forwsrd*
 *XO3 AOR
REP STOSD
XSOIS
: vrite 12 bytes
STOSB
J xrite remaining byte
7 write 2 more bytes
在复制15字节的内容时，从寄存器读取的操作效率来看，上述代码的效率要高于15次数据读写（REP
STOSB）的操作效率。
SUB：减法运算指令。常见的“SUB寄存器，寄存器”指令可进行寄存器清零。
TEST：测试指令。在设置标识位方面，它和AND指令相同，但是它不存储逻辑与的运算结果。详细
介绍请参见本书的第19章，
XCHG：数据交换指令。
XORop1，op2：逻辑异或运算指令。常见的“XORreg，reg”用于寄存器清零。
XOR指令普遍用于“翻转”特定比特位。无论以哪个操作符作为源数据，只要另外一个操作符（参照
数据）的指定位为1，那么运算结果里的那一位数据都是源数据相应位的非值。
输入A
输入B
运算结果
0
0
0
0
1
1
1
0
1
1
0
另外，如果参照数据的对应位为0，那么运算结果里的那一位数据都是源数据相应位的原始值。这是
XOR操作非常重要的特点，应当熟练掌握。
A.6.3不常用的汇编指令
BSF：顺向位扫描指令。详情请参见本书25.2节。
BSR：逆向位扫描指令。
BSWAP：重新整理字节次序的指令。它以字节为单位逆序重新排列字节序，用于更改数据的字节序。
BTC：位测试并取反的指令。
BTR：位测试并清零的指令，
BTS：位测试并置位的指令。
BT：位测试指令，
CBW/CWD/CWDE/CDQ/CDQE：signed型数据的类型转换指令：
●CBW：把AL中的字节（byte）型数据转换为字（word）型数据，存储于AX寄存器。
●CWD：把AX中的字（word）型数据转换为双字（Dword）型数据、存储于DX-AX寄存器对。
CWDE：把AX中的字（word）型数据转换为双字字（Dword）型数据，存储于DAX寄存器。
CDQ：把EAX中的双字（word）型数据转换为四字（Qword）型数据，存储于EDX：EAX寄存
器对。
●CDQE（x64指令）：把EAX中对双字（Dword）型数据转换为四字（Qword）型数据，并存储于
RAX寄存器。
上述五个指令均能正确处理signed型数据中对符号位、对高位进行正确的填补。详情请参见本书的
第24章第5节。
CLD清除 DF 标识位.
---
## Page 447
附录Ax86
923
CLI（M）：清除IF 标识位。
CMC（M）：变换CF标识位。
CMOVee：条件赋值指令。如果满足相应的条件代码（cc），则进行赋值。有关条件代码cc的各种代表意，
请参见前文A.6.2对Jcc的详细说明。
CMPSB/CMPSW/CMPSD/CMPSQ（M）：比较8位单字节数据（Byte）/16位Word数据（Word）/32
位双字型数据（Dword）/64位四字型数据（Qword）的指令。它将SI/ESI/RSI寄存器里的值当作源操作数
的地址，另一个操作数的地址则取自DI/EDI/RDI寄存器。在比较结果之后再设置标识位，设置标识位的方
式和CMP指令相同。
这些指令通常与指令前缓REP组合使用。在这种情况下，组合指令将CX/ECX/RCX寄存器的值当作
循环计数器进行多次循环比较，直至ZF标识位为零。也就是说，它也常用作字符比较（或搜索）。
它的工作方式和C语言的memcmpO函数相同。
以 Windows NT 内核(WindowsResearchKemel v1.2）为例,base'ntosrtli386movemem.asm f代码如下所示,
指令清单A.3basentoslrtli386movemem.asm
D8013 1
: RtICompareMenory (
IN PVOID Souroel,
IS ULONG Length
IN PVOID Souroe2,
: Routine Description:
This function corpares tvo blocks of semory and returns the nunber
tenbe p9ardaoo 1eq1 se1kq j0
J Arqusent51
o 《2osu 1oxoo[q qszTg aq1 oq xosurod = seTfddns - ($+dsa)[eoznog
compare.
Source2 (esp+8) - Supplies a pointer to the second block of menory to
compare.
coapared.
:anteA, uzmgeg 
The number of bytes that compared equal is returned as the function
value. If all bytes compared
block of nemory is returned.
d equal, then the length of the original
RcmSouroe1
eqa
[esp+12]
RoaLength
RcsSource2
equ
equ
[oz+ds9]
[9[+dsa]
CODE_ALIGMMENT
ry.3
push
esi
edi
: save registers
: clear direction
mov
ed1, Rcndource2
es1, RcnSouroe1
1(edi) -> second block to conpare
: [esi) -> first block to corpare
t0V
---
## Page 448
924
逆向工程权威指南（下册）
Cospare dvords, if any.
rcm10:
shr
ecx, RomLength
:(ecx) - 1ength In dvords
1 (ecx) = Length in bytes
jz
rcm20
ecx, 2
: no dvords, try bytes
repe
cep4d
 mianatch, go find byte
: conpare dwords
Jnz
rcm40
Conpare residsal bytes, if any.
ren20:
:(ecx) = length in bytes
and
*xoa
(ecx) - length mod 4
Jz
rcn30
: 0 odd bytes, go do dvords
repe
qsdao
: conpare odd bytes
jnz
rcn50
: mismatch, go report hov Eax ve got
A11 bytes in the block natch.
rcn30: nov
eax, RcnLength
1 set nunber of satching bytes
pop
ed1
esi
: restore registers
stdR8T
dod
When we cone to rcs40, es1 (and ed1) points to the dvord after the
‘,uon a/q auo ouneee uro ax *qpru 1,upp pubap aqg xoax an aouTs 
one whi.ch caused the missatch. Back up 1 duord and find the byte.
rcs40: sub
es1,4
: back up
sub
edi,4
; back up
mov
ecx,5
:ensure that ecx doean*t count out
repe
qidzo
: find nismatch byte
did not natch, which is Two after the last byte that did match.
rcn50: dec
es1
esi,RcnGourcel
: compute bytes that matched
: back up
pop
eax, es1
pop
ed1
es1
Jrestore registers
stdRET _Rt1CoepareMenory
当内存块的尺寸是4的倍数时，这个函数将使用32位字型数据的比较指令CMPSD，否则使用逐字比
较指令CMPSB。
CPUID：返回CPU信息的指令。详情请参见本书的21.6.1节。
DIV：无符号型数据的除法指令。
IDIV：有符号型数据的除法指令。
INT（M）;INTx的功能相当于16位系统中的 PUSHF；CALL dwordpt[x*4]。在MS-DOS中，INT 指令
普遍用于系统调用（syscall）。它调用AX/BX/CX/DX/SVDI寄存器里的中断参数，然后跳转到中断向量表”。因
为INT的opcode很短（2字节），面且通过中断调用MS-DOS服务的应用程序不必去判断系统服务的入口地址，
①lmtemupt VectorTabe.它位于地址空间的开头部分，是实模式中断机制的重要组成部分，表中记录所有中斯号对应的中断服
务程序的内存地址。
---
## Page 449
附录Ax86
925
所以INT指令曾盛行一时。中断处理程序通过使用IRET指令即可返回程序的控制流。
最常被调用的MS-DOS中新是第0x21号中断，它负责着大量的API接口。有关MS-DOS各中断的完
整列表，请参见Ralf Brown 撰写的《The x86 Interrupt List）。
在MS-DOS之后，早期的Linux和Windows（参见本书第66章）系统仍然使用INT指令进行系统调
用。近些年来，它们逐渐使用SYSENTER或SYSCALL指令替代了INT指令。
INT3（M）：这条指令有别于其他的INT指令。它的opcde只有1个字节，即（0xCC），普遍用于程序
调试。一般来说，调试程序就是在需要进行调试的断点地址写上0xCC（opcode替换）。当被调试程序执
行INT3指令面导致异常时，调试器就会捕捉这个异常从面停在断点处，然后将断点处的指令恢复成原
来指令
在WindowsNT系统里，当CPU执行这条指令时，系统将会抛出EXCEPTION_BREAKPOINT异常。
如果运行了主机调试程序/hostdebugger，那么这个调试事件将会被主机调试程序栏截并处理：否则，Windows
系统将会调用系统上注册了的某个调试器/systemdebugger进行响应。如果安装了MSVS（MicrosoftVisual
Studio）。在执行INT3时，Windows 可能会启动 MSVS 的debugger，继面调试这个进程。这种调试方法改
变了原程序的指令，容易被软件检测到。人们开发出了很多反调试技术，通过检查加载代码的完整性防止
他人进行逆向工程的研究。
MSVC编译器有INT3对应的编译器内部函数—_debugbreakO。
Kemel32.dll 里还有win32的系统函数DebugBrcakO.专门执行 INT3。°
IN（M）：数据输入指令，用于从外设端口读取数据。这个指令常用于OS驱动程序和MS-DOS的应
用程序。详细介绍请参见本书的78.3节。
IRET：在MS-DOS 环境中调用INT 中断之后，IRET指令负责返还中断处理程序（intemupt handler）。它
相当于 POP tmp: POPF: JMP tmp-
LOOP（M）：递减计数器CX/ECX/RCX，在计数器不为零的情况下进行跳转。
OUT（M）：数据输出指令，用于向外设端口传输数据。这个指令常用于OS驱动程序和MS-DOS的
应用程序。详细介绍请参见本书的78.3节。
POPA（M）：从数据栈中读取（恢复）（R|E）DI、（R(E）SI、（R|E) BP、（RE）BX、（R{E）DX、（R{E)
CX、（RE）AX寄存器的值
POPCNT：它的名称是“population count”的缩写。该指令一般翻译为“位1计数”。既是说，它负责
软网 (Bruce Schneier 《Applied Cryptography: Protocols, Algorithms, and Source Code in C3 1994.);
This branch of cryptography is fast-paced and very politically charged. Most designs are secret; a majority of
military encryptions systems in use today are based on LFSRs. In fact, most Cray computers (Cray 1, Cray
X-MP, Cray Y-MP) have a rather curious instruction generally known as *population count." It counts the 1
bits in a register and can be used both to efficiently calculate the Hamming distance between two binary words
and to implement a vectorized version of a LFSR. I’ve heard this called the canonical NSA instruction,
demanded by almost all computer contracts.
更多信息请参阅参考资料[Sch94]。
POPF：从数据栈中读取标识位，即恢复EFLAGS寄存器。
① htp:/www.s.cmu.edu/-ralfiles.html
器为其生成特定的机械码，并非直接调用它的函数。内部函数常用于实现与特定CPU有关的伤函数，_dcbugbhreak的介绍请参
②编译器内部函数指compilerintrinsic，本书有详细介绍，它属于编译器有关的内部函数，基本不会被常规库函数调用，编译
③请步见 htpc/msdn.microsofl.com/em-s/ibrary/windows/deskop/ms679297%28vs.85%29.aspx,
见, http:/lmsdn.microsoft.com/en-us/library/f408b4et.aspx -
---
## Page 450
926
逆向工程权威指南（下册）
PUSHA (M):把(R(E)AX、(R(E) CX、(R{E) DX、(R(E) BX、(R(E) BP、(R[E)SI、(R(E) DI
寄存器的值，依次保存在数据栈里。
PUSHF：把标识位保存到数据栈里，即存储EFLAGS寄存器的值。
RCL（M）：带进位的循环左移指令，通过CF标识位实现。
7654
，
6
5
4
32
RCR（M）：带进位的循环右移指令，通过CF标识位实现。
CF
76543210
76543210
CF
ROL/ROR（M）：循环左/右移。
76s42。
CF
2
1
7654320
。
几乎所有的CPU都有这些循环位移指令。但是CC++语言里没有相应的操作指令，所以它们的编译器
不会生成这些指令。
为了便于编程人员使用这些指令，至少MSVC提供了相应的伪函数（complierintrinsics）_rotiO和_rotrO
可直接翻译这些指令。详情请参见：http:/msdn.microsofL.com/en-us/library/5cc576c4.aspx
SAL：算术左移指令，等同于逻辑左移SHL指令。
SAR：算术右移指令。
76543210
7620
F
本指令通常用于对带符号数减半的运算中，因面在每次右移时，它保持最高位（符号位）不变，并把
最低位右移至CF中。
SETeeop：在条件表达式cc为真的情况下，将目标操作数设置为1：否则设置目标操作数为0.这里
的目标操作数指向一个字节寄存器（也就是8位寄存器）或内存中的一个字节。状态码后缓（cc）指代条
---
## Page 451
附录Ax86
927
件表达式，可参见附录A.6.2的有关介绍。
STC（M）：设置CF标识位的指令。
STD（M）：设置DF标识位的指令，编译器不会生成这种指令，因此十分罕见。我们可以在Windows
的内核文件ntoskml.exe中找到这条指令，也可以在手写的内存复制的汇编代码里看到它。
STI（M）：设置IF标识位的指令。
SYSCALL：（AMD）系统调用指令（参见本书第66章）。
SYSENTER：（Intel）系统调用指令（参见本书第66章）。
UD2（M）：未定义的指令，会产生异常信息，多用于软件润试。
A.6.4FPU指令
FPU指令有很多带有“-R”或“-P”后缓的派生指令。带有R后缓的指令，其操作数的排列顺序与常
规指令相反。带有P后级的指令，在运行计算功能后，会从栈里抛出一个数据：面带有PP后缓的指令则
最后抛出两个数据。P/PP后级的指令可在计算后释放栈里存储的计算因子。
FABS：计算 ST(0）绝对值的指令。ST(O)=fabs(ST(0)-
FADD op：单因子加法运算指令。ST(0)=op+ST(0)。
FADD ST（0)，STG)加法运算指令。ST(0)ST(0)+ST(i)。
FADDPST（1)：相当于ST(1)=ST(0)+ST(1)：pop。求和之后，再从数据栈里抛出1个因子。即，使
用计算求得的“和”替换计算因子。
FCHS：求负运算指令。ST(0)=-1xST(0)
FCOM：比较 ST（0）和 ST（1)。
FCOMop：比较 ST（0）和op.