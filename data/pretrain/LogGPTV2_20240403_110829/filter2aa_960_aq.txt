the domain name cannot be resolved. 
The type RR is an interface with only two defined methods, and neither 
allows access to the IP address stored in the answer. To access those IP 
addresses, you’ll need to perform a type assertion to create an instance 
of the data as your desired type.
First, loop over all the answers. Next, perform the type assertion on the 
answer to ensure that you’re dealing with a *dns.A type w. When performing 
this action, you can receive two values: the data as the asserted type and a 
bool representing whether the assertion was successful x. After checking 
whether the assertion was successful, print the IP address stored in a.A y. 
Although the type is net.IP, it does implement a String() method, so you can 
easily print it.
Spend time with this code, modifying the DNS query and exchange to 
search for additional records. The type assertion may be unfamiliar, but it’s 
a similar concept to type casting in other languages.
Enumerating Subdomains
Now that you know how to use Go as a DNS client, you can create useful 
tools. In this section, you’ll create a subdomain-guessing utility. Guessing 
a target’s subdomains and other DNS records is a foundational step in 
reconnaissance, because the more subdomains you know, the more you 
can attempt to attack. You’ll supply our utility a candidate wordlist (a 
dictionary file) to use for guessing subdomains.
With DNS, you can send requests as fast as your operating system can 
handle the processing of packet data. While the language and runtime aren’t 
going to become a bottleneck, the destination server will. Controlling the 
concurrency of your program will be important here, just as it has been in 
previous chapters.
First, create a new directory in your GOPATH called subdomain_guesser, 
and create a new file main.go. Next, when you first start writing a new tool, 
you must decide which arguments the program will take. This subdomain-
guessing program will take several arguments, including the target domain, 
the filename containing subdomains to guess, the destination DNS server 
to use, and the number of workers to launch. Go provides a useful package 
for parsing command line options called flag that you’ll use to handle your 
command line arguments. Although we don’t use the flag package across 
all of our code examples, we’ve opted to use it in this case to demonstrate 
more robust, elegant argument parsing. Listing 5-3 shows our argument-
parsing code.
前沿信安资讯阵地  公众号：i nf osrc
108   Chapter 5
package main
import (
    "flag"
)
func main() {
    var (
        flDomain      = flag.String("domain", "", "The domain to perform guessing against.") u
        flWordlist    = flag.String("wordlist", "", "The wordlist to use for guessing.")
        flWorkerCount = flag.Int("c", 100, "The amount of workers to use.") v
        flServerAddr  = flag.String("server", "8.8.8.8:53", "The DNS server to use.")
    )
    flag.Parse() w
}
Listing 5-3: Building a subdomain guesser (/ch-5/subdomain_guesser /main.go)
First, the code line declaring the flDomain variable u takes a String argu-
ment and declares an empty string default value for what will be parsed as 
the domain option. The next pertinent line of code is the flWorkerCount vari-
able declaration v. You need to provide an Integer value as the c command 
line option. In this case, set this to 100 default workers. But this value is 
probably too conservative, so feel free to increase the number when testing. 
Finally, a call to flag.Parse() w populates your variables by using the pro-
vided input from the user.
N O T E 
You may have noticed that the example is going against Unix law in that it has 
defined optional arguments that aren’t optional. Please feel free to use os.Args here. 
We just find it easier and faster to let the flag package do all the work.
If you try to build this program, you should receive an error about 
unused variables. Add the following code immediately after your call to 
flag.Parse(). This addition prints the variables to stdout along with code, 
ensuring that the user provided -domain and -wordlist:
if *flDomain == "" || *flWordlist == "" {
    fmt.Println("-domain and -wordlist are required")
    os.Exit(1)
}
fmt.Println(*flWorkerCount, *flServerAddr)
To allow your tool to report which names were resolvable along with 
their respective IP addresses, you’ll create a struct type to store this infor-
mation. Define it above the main() function:
type result struct {
    IPAddress string
    Hostname string
}
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   109
You’ll query two main record types—A and CNAME—for this tool. 
You’ll perform each query in a separate function. It’s a good idea to keep 
your functions as small as possible and to have each perform one thing well. 
This style of development allows you to write smaller tests in the future. 
Querying A and CNAME Records
You’ll create two functions to perform queries: one for A records and the 
other for CNAME records. Both functions accept a FQDN as the first argu-
ment and the DNS server address as the second. Each should return a slice 
of strings and an error. Add these functions to the code you began defining 
in Listing 5-3. These functions should be defined outside main().
func lookupA(fqdn, serverAddr string) ([]string, error) {
    var m dns.Msg
    var ips []string
    m.SetQuestion(dns.Fqdn(fqdn), dns.TypeA)
    in, err := dns.Exchange(&m, serverAddr)
    if err != nil {
        return ips, err
    }
    if len(in.Answer)  0 {
            y cfqdn = cnames[0]
            z continue // We have to process the next CNAME.
        }
        { ips, err := lookupA(cfqdn, serverAddr)
        if err != nil {
            break // There are no A records for this hostname.
        }
        | for _, ip := range ips {
            results = append(results, result{IPAddress: ip, Hostname: fqdn})
        }
        } break // We have processed all the results.
    }
    return results
}
First, define a slice to store results u. Next, create a copy of the FQDN 
passed in as the first argument v, not only so you don’t lose the original 
FQDN that was guessed, but also so you can use it on the first query attempt. 
After starting an infinite loop, try to resolve the CNAMEs for the FQDN w. 
If no errors occur and at least one CNAME is returned x, set cfqdn to the 
CNAME returned y, using continue to return to the beginning of the loop z. 
This process allows you to follow the trail of CNAMES until a failure occurs. 
If there’s a failure, which indicates that you’ve reached the end of the chain, 
you can then look for A records {; but if there’s an error, which indicates 
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   111
something went wrong with the record lookup, then you leave the loop 
early. If there are valid A records, append each of the IP addresses returned 
to your results slice | and break out of the loop }. Finally, return the 
results to the caller.
Our logic associated with the name resolution seems sound. However, 
you haven’t accounted for performance. Let’s make our example goroutine-
friendly so you can add concurrency.
Passing to a Worker Function
You’ll create a pool of goroutines that pass work to a worker function, which 
performs a unit of work. You’ll do this by using channels to coordinate work 
distribution and the gathering of results. Recall that you did something 
similar in Chapter 2, when you built a concurrent port scanner.
Continue to expand the code from Listing 5-3. First, create the 
worker() function and place it outside main(). This function takes three 
channel arguments: a channel for the worker to signal whether it has 
closed, a channel of domains on which to receive work, and a channel 
on which to send results. The function will need a final string argument 
to specify the DNS server to use. The following code shows an example 
of our worker() function:
type empty struct{} u
func worker(tracker chan empty, fqdns chan string, gather chan []result, serverAddr string) {
    for fqdn := range fqdns { v
        results := lookup(fqdn, serverAddr)
        if len(results) > 0 {
            gather <- results w
        }
    }
    var e empty
    tracker <- e x
}
Before introducing the worker() function, first define the type empty to 
track when the worker finishes u. This is a struct with no fields; you use 
an empty struct because it’s 0 bytes in size and will have little impact or 
overhead when used. Then, in the worker() function, loop over the domains 
channel v, which is used to pass in FQDNs. After getting results from your 
lookup() function and checking to ensure there is at least one result, send 
the results on the gather channel w, which accumulates the results back 
in main(). After the work loop exits because the channel has been closed, 
an empty struct is sent on the tracker channel x to signal the caller that all 
work has been completed. Sending the empty struct on the tracker channel 
is an important last step. If you don’t do this, you’ll have a race condition, 
because the caller may exit before the gather channel receives results.
Since all of the prerequisite structure is set up at this point, let’s refocus 
our attention back to main() to complete the program we began in Listing 5-3. 
前沿信安资讯阵地  公众号：i nf osrc
112   Chapter 5
Define some variables that will hold the results and the channels that will be 
passed to worker(). Then append the following code into main():
var results []result
fqdns := make(chan string, *flWorkerCount)
gather := make(chan []result)
tracker := make(chan empty)
Create the fqdns channel as a buffered channel by using the number 
of workers provided by the user. This allows the workers to start slightly 
faster, as the channel can hold more than a single message before blocking 
the sender.
Creating a Scanner with bufio
Next, open the file provided by the user to consume as a word list. With 
the file open, create a new scanner by using the bufio package. The scanner 
allows you to read the file one line at a time. Append the following code 
into main():
fh, err := os.Open(*flWordlist)
if err != nil {
    panic(err)
}
defer fh.Close()
scanner := bufio.NewScanner(fh)
The built-in function panic() is used here if the error returned is not 
nil. When you’re writing a package or program that others will use, you 
should consider presenting this information in a cleaner format.
You’ll use the new scanner to grab a line of text from the supplied word 
list and create a FQDN by combining the text with the domain the user 
provides. You’ll send the result on the fqdns channel. But you must start the 
workers first. The order of this is important. If you were to send your work 
down the fqdns channel without starting the workers, the buffered channel 
would eventually become full, and your producers would block. You’ll add 
the following code to your main() function. Its purpose is to start the worker 
goroutines, read your input file, and send work on your fqdns channel.
u for i := 0; i < *flWorkerCount; i++ {
    go worker(tracker, fqdns, gather, *flServerAddr)
}
v for scanner.Scan() {
    fqdns <- fmt.Sprintf("%s.%s", scanner.Text()w, *flDomain)
}
Creating the workers u by using this pattern should look similar to 
what you did when building your concurrent port scanner: you used a for 
loop until you reached the number provided by the user. To grab each line 
前沿信安资讯阵地  公众号：i nf osrc
Exploiting DNS   113
in the file, scanner.Scan() is used in a loop v. This loop ends when there are 
no more lines to read in the file. To get a string representation of the text 
from the scanned line, use scanner.Text() w. 
The work has been launched! Take a second to bask in greatness. Before 
reading the next code, think about where you are in the program and what 
you’ve already done in this book. Try to complete this program and then 
continue to the next section, where we’ll walk you through the rest.
Gathering and Displaying the Results
To finish up, first start an anonymous goroutine that will gather the results 
from the workers. Append the following code into main():
go func() {
    for r := range gather {
        u results = append(results, r...v)
    }
    var e empty
    w tracker <- e
}()
By looping over the gather channel, you append the received results 
onto the results slice u. Since you’re appending a slice to another slice, you 
must use the ... syntax v. After you close the gather channel and the loop 
ends, send an empty struct to the tracker channel as you did earlier w. This 
is done to prevent a race condition in case append() doesn’t finish by the time 
you eventually present the results to the user.
All that’s left is closing the channels and presenting the results. Include 
the following code at the bottom of main() in order to close the channels 
and present the results to the user:
u close(fqdns)
v for i := 0; i < *flWorkerCount; i++ {
    <-tracker
}
w close(gather)
x <-tracker
The first channel that can be closed is fqdns u because you’ve already 
sent all the work on this channel. Next, you need to receive on the tracker 
channel one time for each of the workers v, allowing the workers to signal 
that they exited completely. With all of the workers accounted for, you can 
close the gather channel w because there are no more results to receive. 
Finally, receive one more time on the tracker channel to allow the gathering 
goroutine to finish completely x.
The results aren’t yet presented to the user. Let’s fix that. If you wanted 
to, you could easily loop over the results slice and print the Hostname and 
IPAddress fields by using fmt.Printf(). We prefer, instead, to use one of Go’s 
several great built-in packages for presenting data; tabwriter is one of our 
favorites. It allows you to present data in nice, even columns broken up by 
前沿信安资讯阵地  公众号：i nf osrc
114   Chapter 5
tabs. Add the following code to the end of main() to use tabwriter to print 
your results:
w := tabwriter.NewWriter(os.Stdout, 0, 8, 4, ' ', 0)
for _, r := range results {
    fmt.Fprintf(w, "%s\t%s\n", r.Hostname, r.IPAddress)
}
w.Flush()
Listing 5-4 shows the program in its entirety.
Package main