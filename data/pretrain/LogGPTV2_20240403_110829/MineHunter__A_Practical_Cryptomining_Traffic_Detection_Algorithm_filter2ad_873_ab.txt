have considered possible ethical issues and data privacy protection,
which are explained in detail in Section 4.1.3.
The rest of this paper is organized as follows: In Section 2, we de-
scribe the fundamental of cryptomining. In Section 3, we introduce
the design of the detection algorithm. In Section 4, we evaluate
the detection algorithm at the entrance of a campus network. In
Section 5, we discuss the limitations of the algorithm. In Section 6,
we introduce the related works about cryptojacking. We conclude
the paper in Section 7.
2 THE FUNDAMENTAL OF CRYPTOMINING
2.1 The Basic Principle of Cryptocurrency
A cryptocurrency (or crypto currency) is a digital asset designed to
work as a medium of exchange by the technologies of cryptography
and blockchain [13]. The working principle of cryptocurrency based
on blockchain is shown in Fig. 1. The whole system can be regarded
as a billing system. The system uses blockchain technology to record
the transaction records between different users in a block by a tree
hash algorithm [9]. For example, four transactions are recorded
in (Tx0, Tx1, Tx2, Tx3) in Fig. 1. By using tree hash algorithm,
all transactions are hashed to Tx_root. Each block contains the
timestamp, the hash value of the previous block and a random field
nonce. Mining refers to find a particular nonce so that the hash
calculation of the entire block meets certain special conditions (for
example, 51 consecutive bits 0). The first one to find a nonce that
meets the conditions will be rewarded with a certain amount of
cryptocurrency. Since the average creation time of the block is fixed,
the difficulty of calculating the block hash value increases with the
1052MineHunter: A Practical Cryptomining Traffic Detection Algorithm Based on Time Series Tracking
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
features of the mining communication process. The specific com-
munication process of the mining process is shown in Fig. 3. The
mining communication consists of several mining cycles. The be-
ginning of the mining cycle indicates the creation of a new block.
The end of the mining cycle indicates that the current block has
been dug up, and the next new block is created. At the beginning
of each mining cycle, a task packet is sent by the sender, which is
a proxy or a public mining pool, and the task packet contains the
hash value of the previous block, the creation time of the current
block, the hash value of the transaction record, and the target that
the miner needs to accomplish. During a mining cycle, the miner
finds a nonce that satisfies the condition and submits a result to the
sender. The sender will give a response of “ok" or “error" depending
on the result. In addition, the sender also sends heartbeat signals at
regular intervals.
Note that although the design goal of MineHunter is to meet the
complex traffic detection challenges of cryptojacking like the third
scenario in the Fig. 2, MineHunter is only used to detect crypto-
mining behavior in the enterprise or campus at the network level
and cannot distinguish whether cryptomining is authorized or not,
because authorization is subjective to the user’s consciousness and
cannot be directly reflected in the communication behavior of cryp-
tomining. But we think this is not a essential issue in our scenario,
since MineHunter is devoted as a network security management
tool of the network administrator in the enterprise or campus.
When cryptomining is confirmed, the network administrator can
simply ask the owner of the host to know whether cryptomining is
authorized or not.
Figure 2: Scenarios of cryptojacking communication
3 DETECTOR DESIGN
3.1 Overview
According to our analysis of mining principles in Section 2.2, mining
traffic has two essential characteristics. One is that the time of task
packet issued by a proxy or a mining pool is the same as the time
when a new block is created. The other is that cryptomining requires
a long period of communication. We use these two features to
Figure 1: Working principle of cryptocurrency
increasing network computing power. With the continuous increase
of the total network computing power, the probability of a single
machine digging into cryptocurrency is almost zero. Therefore, the
mining pool, a new type of mining method, has been presented
[35].
The mining pool gathers a large number of mining machines to
increase the computing capacity and the success rate of mining. The
revenue is divided according to the calculation power contribution
of different mining machines. In actual operation, the mining pool
divides a complex computing task into many subtasks and delivers
the subtasks to different workers according to the computing power
of the mining machine.
2.2 Network Communication of Cryptojacking
Website mining hijacking and malicious mining software have sim-
ilar network communication. There are three different scenarios,
as shown in Fig. 2. The first scenario is the simplest. The adver-
sary directly controls the victim to establish a link with the public
mining pool. Since most public mining pools currently have public
domain names or IP addresses, this situation can be solved by black-
listing [40]. The second scenario is that the adversary establishes
a proxy used to establish a link with the public mining pool. The
communication content of the public mining pool is forwarded to
the victim by the proxy, in which case the blacklist method is inef-
fective. However, most of the current public pools use the Stratum
protocol, which is a plaintext protocol [27]. In this scenario, the
packet content signatures matching method can be used to detect
the mining behavior. The third scenario is the most complicated.
Compared with the second scenario, the adversary no longer allows
the proxy to forward the data from the public mining pool but uses
load obfuscation or encryption to escape the detection of content
signature matching. The detection method proposed in this paper
focuses on the third complex scenario, where the blacklist and the
payloads of the packet cannot be used.
Due to the traffic detection challenges and the complex environ-
ment of cryptojacking, we must thoroughly analyze the inherent
TX_RootTx0Tx2Tx1Tx3Hash0Hash2Hash1Hash3Hash01Hash23Prev_HashNonceTX_RootTimestampBlock h-1Prev_HashNonceTX_RootTimestampBlock hPrev_HashNonceTX_RootTimestampBlock h+1Public Mining PoolPublic Mining PoolPublic Mining Pool123UserProxyUserUserProxyStratum ProtocolStratum ProtocolStratum ProtocolStratum ProtocolAny(Encrypted)1053ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Shize Zhang, Zhiliang Wang, Jiahai Yang, Xin Cheng, Xiaoqian Ma, Hui Zhang, Bo Wang, Zimu Li, and Jianping Wu
communication behavior, we define a detection time interval [ts , te],
and a duration time ti = te −ts. Therefore, our detection target is to
calculate the cryptomining similarity of each time sequence f in F
within [ts , te]. The formulation of the target is MH(f |[ts , te]) = S,
where MH is MineHunter, S ∈ [0, 1] means the cryptomining sim-
ilarity. When S is closer to 1, it means that f is more likely to be
a cryptomining flow. Conversely, when S is closer to 0, f is more
likely to be a benign flow. By calculating the S of each flow in F, we
will obtain a ranked table to generate alerts. Next, we will introduce
the core detection algorithm in detail.
Figure 3: Communication process of the mining
build MineHunter. Its architecture is shown in Fig. 4. MineHunter
consists of three parts, flow data acquisition and preprocessing,
block creation time series acquisition, and core detection algorithm.
flow data acquisition and preprocessing: MineHunter is de-
signed to deploy on the entrance gateway of a campus or enterprise.
Therefore, raw traffic can be collected to the server through port
mirroring or optical fiber on the entrance gateway. We aggregate
the raw traffic into two-tuple (source-destination address) flow and
record the timestamp of each packet. Choosing this flow aggrega-
tion method is to prevent adversaries from using port confusion to
disperse cryptomining traffic to different ports to avoid detection.
block creation time series acquisition: Since current cryp-
tocurrencies such as Monero, Bitcoin, Ethereum, and Litecoin all
adopt a p2p (peer-to-peer) network structure, it is possible to obtain
block creation time information in real time by joining the p2p net-
work of different cryptocurrencies. For example, we use monerod
[12] to join the p2p network of Monero to collect block creation
information. The  type
record in the running log of the monerod contains the time when
each new Monero block is created.
core detection algorithm: Our core detection algorithm con-
tains two parts, local similarity table, and global similarity table.
The local similarity table uses the correlation between mining flow
and block creation time to calculate the similarity of cryptomin-
ing behavior in an interval. The global similarity table uses the
long-term communication characteristics of cryptomining to ac-
cumulate local similarity results. The output of the algorithm is a
ranked table, which records the similarity of each flow belonging
to cryptomining. The network administrator can use the threshold
or top n in the ranked table as the alert condition.
3.2 Cryptomining Traffic Detection Algorithm
Before introducing our specific detection algorithm, we first for-
mulate our problem and detection target. We first define the raw
network traffic as a flow set F = { f1, f2, ..., fn}, where each f rep-
resents a two-tuple (source-destination address) flow. Each flow f
consists of a large number of communication packets. According
to the different sending time of packets, each flow f can be repre-
sented as a time series, f = {p1, p2, ..., pm}, where pi , i = 1, 2, .., m
means the timestamp of packet. Since cryptomining is a long-term
3.2.1 Local Similarity Algorithm. According to the above descrip-
tion, our algorithm uses the characteristics of long-term commu-
nication of cryptomining. Therefore, the selection of detection
duration time ti is generally relatively large, such as 1 hour, 2
hours, 6 hours, or even 1 day. We will evaluate ti in Section 4.3.
We divide [ts , te] into several intervals according to the time se-
ries created by the block. The specific formulation is shown in
Fig. 5. We define the block creation time series within [ts , te] as
X = {x0, x1, ..., xh}, where x means the creation time of the block
and (x0, x1),(x1, x2), ...,(xh−1, xh) means different intervals. The
local similarity algorithm is to calculate the cryptomining similar-
ity of the flow in each interval. From the analysis in Section 2, if
there is cryptomining in the interval, there will be a task packet
created which is close to the left boundary of the interval. Therefore,
we define the local interval distance of the flow f in interval k as
e(f k) =
dis(p, xk−1) and use dis(p, xk−1) to denote the
distance between p and xk−1. Since p and x both represent time
and have the same measurement dimension, we choose Manhattan-
distance[29], which means dis(p, xk) = p−xk−1. For example, in Fig.
5, e(f k) = pk1 − xk−1. Furthermore, we define the local similarity
sl of flow f in interval k as sl(f k) = 1 − e(f k)
, sl ∈ [0, 1]. When
xk−xk−1
sl is closer to 1, it means that f is more likely to be a cryptomining
flow in interval k. Finally, we maintain a local similarity table (LST )
to store the result of the local similarity of the each flow f in the
flow set F. The data structure of the LST is a dictionary, in which
the key is the flow name (source-destination address), and the value
is the result of the local similarity, like the core detection algorithm
model in the Fig. 4. The specific algorithm pseudocode of the naive
calculation method is shown in Appendix A.1.
xk−1≤p <xk
min
Although this naive algorithm can identify cryptomining in the
local interval, it also produces enormous false positives in the fol-
lowing two scenarios. The first is shown in Fig. 6. Some applications,
such as video streaming, generate high-frequency and large-scale
data communications. These communications will make the naive
local similarity algorithm achieve great similarity and even reach
100%. This scenario requires us to consider the influence of packet
numbers. The other scenario is shown in Fig. 7. Some applications
such as Microsoft system updates will generate periodic heartbeat
signals for a long time. This period is generally 30s or 60s. Although
this low-frequency noise signal cannot achieve high local similarity
in every interval, its long-term communication behavior is similar
to cryptomining. Therefore, through the long-term accumulation
of local similarity, there may still be false positives.
To solve these two scenarios, we propose a local similarity cal-
culation algorithm based on credible probability estimation. Based
UserTimelineSenderTaskBlockCreatedCycle h-1Cycle hCycle h+1ResponseHeartbeatMiningResultBlock1054MineHunter: A Practical Cryptomining Traffic Detection Algorithm Based on Time Series Tracking
ACSAC ’21, December 6–10, 2021, Virtual Event, USA