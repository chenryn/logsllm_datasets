---
author: Dave Cheney
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 3126
date: '2020-05-04 23:04:20'
editorchoice: false
excerpt: 本文中，我要论述内联的限制以及叶子内联与栈中内联mid-stack inlining的对比。
fromurl: https://dave.cheney.net/2020/05/02/mid-stack-inlining-in-go
id: 12184
islctt: true
largepic: /data/attachment/album/202005/04/230304avxkxlyoozbiw1bn.jpg
permalink: /article-12184-1.html
pic: /data/attachment/album/202005/04/230304avxkxlyoozbiw1bn.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 12176
reviewer: wxy
selector: lujun9972
summary: 本文中，我要论述内联的限制以及叶子内联与栈中内联mid-stack inlining的对比。
tags:
- 内联
- Go
- 编译器
thumb: false
title: Go 中对栈中函数进行内联
titlepic: true
translator: lxbwolf
updated: '2020-05-04 23:04:20'
---
![](/data/attachment/album/202005/04/230304avxkxlyoozbiw1bn.jpg)
[上一篇文章](/article-12176-1.html)中我论述了 叶子内联   leaf inlining 是怎样让 Go 编译器减少函数调用的开销的，以及延伸出了跨函数边界的优化的机会。本文中，我要论述内联的限制以及叶子内联与 栈中内联   mid-stack inlining 的对比。
### 内联的限制
把函数内联到它的调用处消除了调用的开销，为编译器进行其他的优化提供了更好的机会，那么问题来了，既然内联这么好，内联得越多开销就越少，*为什么不尽可能多地内联呢？*
内联可能会以增加程序大小换来更快的执行时间。限制内联的最主要原因是，创建许多函数的内联副本会增加编译时间，并导致生成更大的二进制文件的边际效应。即使把内联带来的进一步的优化机会考虑在内，太激进的内联也可能会增加生成的二进制文件的大小和编译时间。
内联收益最大的是[小函数](https://medium.com/@joshsaintjacque/small-functions-considered-awesome-c95b3fd1812f)，相对于调用它们的开销来说，这些函数做很少的工作。随着函数大小的增长，函数内部做的工作与函数调用的开销相比省下的时间越来越少。函数越大通常越复杂，因此优化其内联形式相对于原地优化的好处会减少。
### 内联预算
在编译过程中，每个函数的内联能力是用*内联预算*计算的    1 。开销的计算过程可以巧妙地内化，像一元和二元等简单操作，在 抽象语法数   Abstract Syntax Tree （AST）中通常是每个节点一个单位，更复杂的操作如 `make` 可能单位更多。考虑下面的例子：
```
package main
func small() string {
    s := "hello, " + "world!"
    return s
}
func large() string {
    s := "a"
    s += "b"
    s += "c"
    s += "d"
    s += "e"
    s += "f"
    s += "g"
    s += "h"
    s += "i"
    s += "j"
    s += "k"
    s += "l"
    s += "m"
    s += "n"
    s += "o"
    s += "p"
    s += "q"
    s += "r"
    s += "s"
    s += "t"
    s += "u"
    s += "v"
    s += "w"
    s += "x"
    s += "y"
    s += "z"
    return s
}
func main() {
    small()
    large()
}
```
使用 `-gcflags=-m=2` 参数编译这个函数能让我们看到编译器分配给每个函数的开销：
```
% go build -gcflags=-m=2 inl.go
# command-line-arguments
./inl.go:3:6: can inline small with cost 7 as: func() string { s := "hello, world!"; return s }
./inl.go:8:6: cannot inline large: function too complex: cost 82 exceeds budget 80
./inl.go:38:6: can inline main with cost 68 as: func() { small(); large() }
./inl.go:39:7: inlining call to small func() string { s := "hello, world!"; return s }
```
编译器根据函数 `func small()` 的开销（7）决定可以对它内联，而 `func large()` 的开销太大，编译器决定不进行内联。`func main()` 被标记为适合内联的，分配了 68 的开销；其中 `small` 占用 7，调用 `small` 函数占用 57，剩余的（4）是它自己的开销。
可以用 `-gcflag=-l` 参数控制内联预算的等级。下面是可使用的值：
* `-gcflags=-l=0` 默认的内联等级。
* `-gcflags=-l`（或 `-gcflags=-l=1`）取消内联。