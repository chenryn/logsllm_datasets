MSSQL - xp_cmdshell
You can run commands straight from the sql-query in MSSQL.
Truncating Mysql Vulerability
Basically this happens when you don't validate the length of user input. Two things are needed for it
to work:
Mysql does not make comparisons in binary mode. This means that "admin" and "admin " are
the same.
If the username column in the database has a character-limit the rest of the characters are
truncated, that is removed. So if the database has a column-limit of 20 characters and we input a
string with 21 characters the last 1 character will be removed.
With this information we can create a new admin-user and have our own password set to it. So if the
max-length is 20 characters we can insert the following string
132
Attacking the System
admin removed
This means that the "removed" part will be removed/truncated/deleted. And the trailing spaces will be
removed upon insert in the database. So it will effectively be inserted as "admin".
References
http://resources.infosecinstitute.com/sql-truncation-attack/ http://pentestmonkey.net/cheat-sheet/sql-
injection/mssql-sql-injection-cheat-sheet http://resources.infosecinstitute.com/anatomy-of-an-attack-
gaining-reverse-shell-from-sql-injection/
133
Attacking the System
Nosql-Injections
Nosql-injections
Nosql-databases like MongoDB is becoming more and more common. So this needs to be expanded.
Login bypass
Basically change the query to this.
{"user":{"$gt": ""},"pass":{"$gt": ""}}
http://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html
http://blog.websecurify.com/2014/08/attacks-nodejs-and-mongodb-part-to.html
134
Attacking the System
XML External Entity Attack
XML External Entity Attack
With this attack you can do:
Read local files
Denial-of-service
Perform port-scan
Remote Code Execution
Where do you find it:
Anywhere where XML is posted.
Common with file-uploading functionality. For files that uses XML, like: docx, pptx, gpx, pdf
and xml itself.
Background XML
XML is a markup language, like HTML. Unlike HTML is does not have any predefined tags. It is the
user that create the tags in the XML object. XML is just a format for storing and transporing data.
XML uses tags and subtags, just like html. Or parents, children, and syblings. So in that sense it has
the same tree-structure as html.
To define a XML-section/document you need the following tag to begin:
Example of valid XML:
Hello World
https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing
Syntax rule
Must have root element
Must have XML prolog
All elements must have closing tag
Tags are case-sensitive
XML Attributes must be quotes
Special characters must be escaped correctly.
 > greater than
& & ampersand
' ' apostrophe
" " quotation mark
Whitespace is perserved in XML
Attack
So if an application receives XML to the server the attacker might be able to exploit an XXE. It could
be sent as a GET, but it is more likely that it is send in a POST. An attack might look like this:
]>&xxe;
The elemet can be whatever, it doesn't matter. The xxe is the "variable" where the content of
/dev/random get stored. And by dereferencing it in the foo-tag the content gets outputted.This way an
attacker might be able to read files from the local system, like boot.ini or passwd. SYSTEM means
that what is to be included can be found locally on the filesystem.
In php-applications where the expect module is loaded it is possible to get RCE. It is not a very
common vulnerability, but still good to know.
]>
&xxe;
mypass
Even if the data is not reflected backto the website it is still possible to exfiltrate files and data from
the server. The technique is similar to how you exfiltrate the cookie in a Cross-Site Scripting attack,
you send it in the url.
Test for it
Input is reflected
]>&xxe;
If "testdata" gets reflected then it is vulnerable to XXE. If it gets reflected you can try to exfiltrate the
data the following way:
]>&xxe;
Another way to test it is to see if the server tries to download the external script. Firs t you need to set
up your own webserver, and then wait for it to connect.
]>&xxe;
136
Attacking the System
Exfiltrate data through URL
https://blog.bugcrowd.com/advice-from-a-researcher-xxe/
References
https://securitytraning.com/xml-external-entity-xxe-xml-injection-web-for-pentester/
https://blog.bugcrowd.com/advice-from-a-researcher-xxe/
http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html
137
Attacking the System
Bypass File Upload Filtering
Bypass File Upload Filtering
One common way to gain a shell is actually not really a vulnerability, but a feature! Often times it is
possible to upload files to the webserver. This can be abused byt just uploading a reverse shell. The
ability to upload shells are often hindered by filters that try to filter out files that could potentially be
malicious. So that is what we have to bypass.
Rename it
We can rename our shell and upload it as shell.php.jpg. It passed the filter and the file is executed as
php.
php phtml, .php, .php3, .php4, .php5, and .inc
asp asp, .aspx
perl .pl, .pm, .cgi, .lib
jsp .jsp, .jspx, .jsw, .jsv, and .jspf
Coldfusion .cfm, .cfml, .cfc, .dbm
GIF89a;
If they check the content. Basically you just add the text "GIF89a;" before you shell-code. So it would
look something like this:
GIF89a;
In image
exiftool -Comment='"; system($_GET['cmd']); ?>' lo.jpg
Exiftool is a great tool to view and manipulate exif-data. Then I had to rename the file
mv lo.jpg lo.php.jpg
Nullbyte
References
http://www.securityidiots.com/Web-Pentest/hacking-website-by-shell-uploading.html
https://www.owasp.org/index.php/Unrestricted_File_Upload http://repository.root-
138
Attacking the System
me.org/Exploitation%20-%20Web/EN%20-
%20Webshells%20In%20PHP,%20ASP,%20JSP,%20Perl,%20And%20ColdFusion.pdf
139
Attacking the System
Exposed Version Control
Exposed Version Control
If you, using dirb or nikto, find version control file exposed, you can use it like this.
git clone http://example.com/.git
https://en.internetwache.org/dont-publicly-expose-git-or-how-we-downloaded-your-websites-
sourcecode-an-analysis-of-alexas-1m-28-07-2015/
140
Attacking the System
Host Header Attack
Host Header Attack
It is common for a web-server to host several applications. These applications are distinguished based
on the domain-name. So how would a web server know which page the a user wants to visit? The
answer is the host-header. In the host header the domain-name is specified.
Password reset
The host-header ca sometimes be parsed in the code and used for creating links. So if the host-header
is used for creating the password reset link it is possible for an attacker to steal the reset-token. The
attacker just needs to enter the victims email-address in the password reset field, then intercept the
request and change the host-header to some address that the attacker controls. When the victim
recieves the password reset link they will click on it, which will direct the link to the attackers site,
which enables the attacker to steal the reset token, since it will be stored in the url that the user clicks.
Web Cache Poisining
141
Attacking the System
Deserialization attacks
https://nickbloor.co.uk/2017/08/13/attacking-java-deserialization
https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet
142
Attacking the User
Attacking the User
Attacking the user
In this section we focus on vectors that attack the user. These kinds of vulnerabilities seems to be
popular with in bug bounties.
143
Clickjacking
Clickjacking
Clickjacking
References
HackerOne issues https://hackerone.com/reports/109373
144
Text/content-injection
Text/content-injection
Text/content-injection
Relevant hackerone reports: https://hackerone.com/reports/145853
https://www.owasp.org/index.php/Content_Spoofing
145
HTML-Injection
HTML-Injection
HTML-Injection
This attack is really similar to to Cross-Site Scripting attacks.
What we can do:
Create a fake login-page, that tricks the user to log in again, but the post-is sent to a server that
the attacker controls. And can thereby steal the credentials of the user.
Inject javacript.
Injecting Javascript
Javascript can be injected into html-tags, which can be used to steal cookies and other things.
Injecting HTML
The attacker can inject html forms that tricks the user into giving up sensitive data.
See eventhandlers for more ways:
https://www.owasp.org/index.php/XSS\_Filter\_Evasion\_Cheat\_Sheet\#Event\_Handlers
146
Insecure Direct Object Reference (IDOR)
Insecure Direct Object Reference (IDOR)
Insecure Direct Object Reference
The vulnerability arises when the user has direct access to objects from user-supplied data.
The classic example of this would be something like the follwoing
http://foo.bar/changepassword?user=someuser
Imagine that you know anothers username , then you can just change the username and be able to
change the password for that user. The data you can access can be anything, maybe private comments,
messages, images, user data.
How to discover
If you have access to the source-code that is an easy way to do it. Check the sections where restricted
data is presented. And see if there is any access-control in that code.
Examples
https://hackerone.com/reports/53858
147
Subdomain Takeover
Subdomain Takeover
Subdomain Takeover
This is a really cool attack.
First you looks for all subdomains. Sometimes a company has forgotten about a subdomain. Like and
old support system called support.example.com. And then the support-system that points to
that domain gets removed. That means that we could start a service for support, and like it to that
domain. And thereby controlling the domain.
HackerOne reports
https://hackerone.com/reports/114134 https://hackerone.com/reports/109699
https://blog.getwhitehats.com/being-a-developer-can-be-a-stressful-job-following-the-request-of-
your-employer-creating-website-e96af56e51c3#.t3tqd5s0n http://yassineaboukir.com/blog/neglected-
dns-records-exploited-to-takeover-subdomains/ https://labs.detectify.com/2014/10/21/hostile-
subdomain-takeover-using-herokugithubdesk-more/
148
Cross Site Request Forgery
Cross Site Request Forgery
Cross Site Request Forgery
Cross site Request Forgery (CSRF) attacks forces the user to perform action the he did not intend to
perform. This usually (only?) possible by creating a malicious URL-address that the victim executes
in his browser, while he is logged in.
What's the worst that can happen?
The attacker can make actions for the user. For example change the email-address, make a purchase,
or something like that. So it could be used to change the adress, and reset the password by sending an
email.
How to perform it?
1. Investigate how the website works First you need to know how the application works. What the
endpoints are.
2. Construct your malicious URL Now you just construct the URL. Either using get or post.
3. GET If you use only GET you can construct the URL like this:
http://example.com/api/createUser?name=Jose
POST
If the requests are sent as POST you need to make the victim run a link that where you control the
server. So that you can add the arguments in the body.
There is one creat trick for this. It is to use the image-tag. Because the image-tag can be used to
automatically retrieve information from other sites. If you have an image on your site but it is
referenced to
Protection
The only real solution is to use unique tokens for each request.
References
http://tipstrickshack.blogspot.cl/2012/10/how-to-exploit-csfr-vulnerabilitycsrf.html
https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
149
Cross Site Request Forgery
150
Cross-Site Scripting
Cross-Site Scripting
Cross-site-scripting
Cross-site-scripting, or XSS as it is sometimes abbreviated to, is an attack that let's the attacker
execute javascript code in the browser of the victim.
So, what's the worst that can happen?
The attacker is probably not that interested in changing the color or font of the website the victim is
visiting. Although s/he could do that. The worst that can happen is probably the following:
1. Complete control over the browser The attacker can access plugins. Like password managers.
The attacker can trick the user into allowing webcam or audio.
2. Session-hijacking/Cookie theft This is when the attacker steals the cookie that is saved in the
browser. Using this cookie the attacker can log in to the service as the victim, and thereby gain
access to his/her account. If the victim is an admin that has extended privileges (uploading
code, images, or whatever) this could lead to a compromise of the server itself.
3. Keylogger The attacker can execute a keylogging-script that steals everything the user inputs in
the website. This could be used to steal sensitive information, like passwords, credit cards
information, chatlogs or whatever the user inputs.
4. Phishing The attacker can insert a fake login. Image that you visit a site, and from that site you
are able to login using your facebook or google-account. The attacker could spoof that so that
when you enter your credentials, they are then sent to the attacker.
5. Browser exploits The script can redirect to a another page that issues an attack against the
browser, possibly leading to total takeover of the machine.
Types of XSS
1. Persistent This is when the malicious code originates from the websites database. That means
the attacker has managed to insert malicious code into the database. So every time the database
serve that data the script will me executed. this is probably the most dangerous XSS, since it
does not need to rely on social engineering.
2. Reflected This is an attack where the script originates from the users request. This might seem a
bit illogical, why would a user inject malicious code to himself? Well the code can
3. DOM based DOM-based attacks are when something is injected into javascript on the DOM.
So, it does not go by the server. Because the code gets executed in the response. Take a search-
functionality for example. The users enters a search-parameter that gets sent to the server which
might sanitize it or something. In the response the found search-items are sent, but not the
search-query. But on the webpage the search query is exposed. "You searched for X" is shown.
That is because it gets the search parameter from the url-parameter. By using
document.location.href for example.
Beef
151
Cross-Site Scripting
Beef username/password: beef:beef Beef is a great tool for attacking browsers.
After starting it up you can log in to the panel. Then you get someone to execute the hook. Hook
URL: http://172.17.15.118:3000/hook.js UI URL: http://172.17.15.118:3000/ui/panel
By injecting the hook into a XSS. Like this
How does it really work?
Let's look at a practical example.
Protect yourself
The problem with XSS is that it is a bit hard for the users to protect themselves. If there is a problem
witht the website there is not that much the user can do.
One can always use noscript to block all javascript code. But that pretty much destroys the whole
experience with using the internet.
Protect your website
There are mainly two ways to protect against encoding and sanitizing .
Encoding
Of course the way to protect your website is to sanitize all input.
You can also set the response-header like this: -xss-protection:"1; mode=block"
For nodeJs you can use the helmet-module to do this. https://www.npmjs.com/package/helmet
Risks for the attacker