# 浅析UMAS协议

## 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。
作者：Nonattack

## 1. 概述
UMAS（Unified Messaging Application Services）是一种平台独立的协议，用于交换应用程序数据。其通信数据基于标准Modbus协议。Modbus是由Modicon公司在1979年开发的一种基于消息结构的协议，最初用于Modicon公司的PLC，并随后被施耐德电气公司收购。作为最早且应用最广泛的工业控制系统协议之一，Modbus主要用于与现场控制器进行通信，包括三种工作模式：Modbus/ASCII、Modbus/RTU和Modbus/TCP。

尽管Modbus协议标准是公开的，且许多功能码已广为人知，但其文档中也提到了一些未公开且已被占用的功能码。其中，0x5A（即90功能码）就是其中之一，而UMAS协议正是基于这个功能码的Modbus协议。UMAS协议由施耐德电气专有，用于对其PLC产品进行配置和监控等操作。由于缺乏相关详细描述文档，本文旨在对UMAS协议进行初步研究和归纳，如有不当之处，请指正。

UMAS协议的基本结构如下图所示：

## 2. UMAS协议功能码
UMAS协议使用0x5A功能码的Modbus协议进行通信。在Wireshark中，这些通信数据会被识别为Unity(Schneider)(90)。进一步观察Data部分时，发现它属于Modbus部分，但未能被详细解析。这部分内容实际上是UMAS特有的。本节讨论的UMAS功能码并非Modbus协议中的功能码，而是指UMAS特有部分中的功能码，它们与PLC的各种配置操作密切相关，如读写、运行/停止、数据上传/下载等。

通过分析相关DLL文件以及与PLC通信的数据，我们整理了UMAS协议的功能码。测试中使用了Schneider M340 PLC，而在没有PLC的情况下，可以使用Unity Pro XL（现更名为EcoStruxure Control Expert）自带的仿真器代替PLC进行通信。

安装Unity Pro软件后，通过对特定DLL文件进行逆向工程分析，可以发现协议名称为UMAS，并快速定位到相关的PLC操作代码。结合代码分析和通信数据，总结出以下UMAS功能码及其基本含义：

| 序号 | 功能码 | 含义 |
| --- | --- | --- |
| 1 | 0x01 | INIT_COMM: 建立UMAS通信 |
| 2 | 0x02 | READ_ID: 请求PLC ID |
| 3 | 0x03 | READ_PROJECT_INFO: 读取PLC中工程信息 |
| 4 | 0x04 | READ_PLC_INFO: 读取PLC内部信息 |
| 5 | 0x06 | READ_CARD_INFO: 读取PLC SD卡信息 |
| 6 | 0x0A | REPEAT: 回传发送给PLC的数据 |
| 7 | 0x10 | TAKE_PLC_RESERVATION: 独占PLC |
| 8 | 0x11 | RELEASE_PLC_RESERVATION: 释放PLC |
| 9 | 0x12 | KEEP_ALIVE: 保持连接 |
| 10 | 0x20 | READ_MEMORY_BLOCK: 准备读取PLC内存块 |
| 11 | 0x22 | READ_VARIABLES: 以bit/word方式读系统变量 |
| 12 | 0x23 | WRITE_VARIABLES: 以bit/word方式写系统变量 |
| 13 | 0x24 | READ_COILS_REGISTERS: 读PLC的线圈/寄存器值 |
| 14 | 0x25 | WRITE_COILS_REGISTERS: 写PLC的线圈/寄存器值 |
| 15 | 0x26 | ENABLE/DISABLE DATA DICTIONARY: 启用/关闭数据字典功能 |
| 16 | 0x30 | INITIALIZE_UPLOAD: 初始化数据上传（From PLC） |
| 17 | 0x31 | UPLOAD_BLOCK: 上传PLC数据 |
| 18 | 0x32 | END_STRATEGY_UPLOAD: 完成数据上传 |
| 19 | 0x33 | INITIALIZE_DOWNLOAD: 初始化数据下装（To PLC） |
| 20 | 0x34 | DOWNLOAD_BLOCK: 下载数据到PLC |
| 21 | 0x35 | END_DOWNLOAD: 完成数据下载 |
| 22 | 0x36 | CREATE/RESTORE/REMOVE BACKUP: 创建/恢复/删除内存卡中的数据备份 |
| 23 | 0x39 | READ_ETH_MASTER_DATA: 读取以太网主数据 |
| 24 | 0x40 | START_PLC: 运行PLC |
| 25 | 0x41 | STOP_PLC: 停止PLC |
| 26 | 0x50 | MONITOR_PLC: 监视PLC变量 |
| 27 | 0x58 | CHECK_PLC: 检查PLC连接状态 |
| 28 | 0x70 | READ_IO_OBJECT: 读IO目标 |
| 29 | 0x71 | WRITE_IO_OBJECT: 写IO目标 |
| 30 | 0x73 | GET_STATUS_MODULE: 获取状态模块 |

## 3. UMAS协议数据分析
通过使用Unity Pro连接M340 PLC并进行一系列操作，我们可以抓取通信过程中的数据，从而对照分析功能码。需要注意的是，UMAS协议是一种应答式通信协议：包含某种功能码的数据发送到PLC，PLC解析请求后按照固定格式回应数据。UMAS请求与响应数据的基本格式如下：

**请求：**
```
[ TCP Packet ] – [ Modbus Header ] – [5A] – [ UMAS CODE (16 bit) ] – [ UMAS PAYLOAD (Variable) ]
```

**响应：**
```
[ TCP Packet ] – [ Modbus Header ] – [5A] – [ RETURN CODE (16 bit) ] – [ UMAS PAYLOAD (Variable) ]
```

其中，`RETURN CODE`部分有两种可能的状态码：
- `0x01 0xFE` 表示成功；
- `0x01 0xFD` 表示错误。

### 示例分析
**功能码0x01：建立通信**
- 请求数据包：
- 响应数据包：

**功能码0x03：读取PLC中工程信息**
- 请求数据包：
- 响应数据包：
  ```
  [ TCP Packet ] – [ Modbus Header ] – [5A] – [ Response Code (16) ] – [ Unknown (9 bytes) ] – [ Unknown 2 (9 bytes) ] – [ Modification date (8 bytes) ] – [ Modification date Rep (8 bytes) ] – [ Project Version (16) ] – [ Unknown (16) ] – [ Project Name length (8) ] – [ Project name (variable) ]
  ```
  - 状态码之后连续两个9字节数据意义不明确。例如，`df 07`换算为小端数据表示2015年，即工程修改时间为2015年；工程版本为0.0.01。

**功能码0x40/0x41：启动/停止PLC**
- 启动PLC的请求数据：
  - `UMAS CODE`部分为`00 40`或`01 40`（与PLC固件版本相关）。
- 停止PLC的请求数据：
  - `UMAS CODE`部分为`00 41`或`01 41`均可。
- 验证数据格式及功能的可行性，如下所示：PLC被停止后，其运行灯变为闪烁状态（而非熄灭）。

通过编写数据解析插件并对数据包进行解析，可以得到如下效果：
- 请求数据包：
- 回复数据包：

## 4. 总结
本文基于对施耐德组态软件Unity Pro的关键DLL分析和上位机与PLC通信数据分析，梳理总结了UMAS协议的基本功能码。同时，尝试编写了Wireshark解析插件以方便数据包分析，并验证了插件的可用性和数据的正确性。

## 参考资料
1. [Modbus Application Protocol V1.1b3](https://modbus.org/docs/Modbus_Application_Protocol_V1_1b3.pdf)
2. [其他参考链接]

希望以上优化后的文本能更好地帮助你理解和使用UMAS协议。