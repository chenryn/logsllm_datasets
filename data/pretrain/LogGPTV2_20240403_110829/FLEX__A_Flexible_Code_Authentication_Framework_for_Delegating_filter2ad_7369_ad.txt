contract. Next, we discuss why the user can always deter-
mine if the contract has been altered by the adversary.
Security of FLEX. We argue that FLEX is secure against
both internal and external adversaries, under the assump-
tion that the underlying signature scheme is secure against
existential forgeries. As discussed earlier in this section,
given a tuple M = (app, contract, mods, γM ), the user
can verify that the modiﬁcations in mods comply with the
contract. What we need to show next is that because of
signatures γD and γM , our instantiation of FLEX is secure
against Forging Application Attacks (Deﬁnition 1) and Ap-
plication Poisoning Attacks (Deﬁnition 2).
Theorem 1. Assuming that
the underlying signature
scheme is secure against existential forgeries, the instantia-
tion of FLEX presented in this paper is FAA-secure.
Proof Proof of Theorem 1 (Sketch). Assume that
the adversary can construct, with non-negligible probabil-
ity, a tuple M∗ = (app∗, contract∗, mods∗, γM∗ ), such that
D∗ = (app∗, contract∗, γD∗ ) was never issued by the devel-
oper. Because γD∗ is a signature computed on both app∗ and
contract∗, and γD∗ was never computed by the developer,
D∗ represents a valid forgery for the underlying signature
scheme. This contradicts our hypothesis.
Theorem 2. Assuming that
the underlying signature
scheme is secure against existential forgeries, the instantia-
tion of FLEX presented in this paper is APA-secure.
Proof Proof of Theorem 2 (Sketch). Assume that
the adversary can win the APA experiment with non-
negligible probability. Following the same argument as in
the proof of Theorem 1, D∗ = (app∗, contract∗, γD∗ ) must
have been issued by the developer. Therefore, the adver-
sary can win if and only if M∗ = (app∗, contract∗, mods∗,
γM∗ ) was never issued by the meta-market. However, be-
cause γM∗ is a signature computed on app∗, contract∗, and
mods∗, and the adversary has no access to the meta-market
signing key, M∗ represents a valid forgery for the underlying
signature scheme. This contradicts our hypothesis.
7. FLEX PROTOTYPE
In this section we provide further details on our prototype
implementation of AMJ. The goal of our prototype is to
show the feasibility of FLEX, and to provide a codebase
that can be used and extended by the research community.
The AMJ interpreter consists of the following components:
a lexer, a parser, an abstract syntax tree (AST) builder, an
abstract semantic graph (ASG) constructor, a type checker,
and an operational semantic executor. To build these com-
ponents, we used Xtext [29] and Xsemantics [28]. Xtext
is a framework for developing programming languages.
It
is based on the Eclipse Modeling Framework, and provide
tools for building custom lexers, parsers and class models.
We used Xtext to construct the lexer and parser used in
FLEX from AMJ’s grammar speciﬁcations. The AST re-
sulting from parsing AMJ code is reﬁned using Xtext to
add cross-links between elements (e.g., method invocations
class URemote {
class URemote {
class URemote {
Device d ;
KeyPair kp ;
Device d ;
KeyPair kp ;
Device d ;
KeyPair kp ;
URemote ( Device dev ) {
URemote ( Device dev ) {
URemote ( Device dev ) {
this . d = dev ;
/* @ srew
this . kp = new RSAPair ();
+ this . kp = new DHPair ();
@ */
this . kp = new E m p t y P a i r ();
}
this . d = dev ;
this . d = dev ;
this . kp = new E m p t y P a i r ();
}
(cid:73) this . kp = new RSAPair ();
}
void on () {
Message m , r in {
void on () {
Message m , r in {
m = // @ erew this . askPIN ();
new Message ( true );
m =
(cid:73)
this . askPIN ();
this . d . send ( m );
this . d . send ( m );
/* @ sins
Message nonce , s in {
nonce = this . receive ();
s = this . kp . sign ( nonce );
this . d . send ( s );
}
@ */
r = this . d . receive ();
if (! r . isACK ()) {
this . prompt (...);
}
}
}
// ...
}
(a) Annotated URemote.
void on () {
Message m , r in {
m =
new Message ( true );
this . d . send ( m );
(cid:73) Message nonce , s in {
(cid:73) nonce = this . receive ();
(cid:73) s = this . kp . sign ( nonce );
(cid:73) this . d . send ( s );
(cid:73) }
r = this . d . receive ();
if (! r . isACK ()) {
this . prompt (...);
r = this . d . receive ();
if (! r . isACK ()) {
this . prompt (...);
}
}
}
// ...
}
}
}
// ...
}
(b) Code corresponding to Fig. 1b.
}
(c) Code corresponding to Fig. 1c.
Figure 3: Annotation of URemote and two instantiations of modiﬁed code. Methods other than the constructor and on are
omitted.
and corresponding method implementation). This process
transforms the AST into the corresponding ASG.
Xsemantics is a plugin for Xtext that allows developers
to build custom type systems. We used Xsemantics to im-
plement the typing rules and operational semantic rules pre-
sented in Section 5. These rules are compiled by Xsemantics
into the AnnotatedMjTypeSystem class, which maps judge-
ments (e.g. type, or exec) to individual Middleweight Java
methods with the corresponding name. Those methods take
as input the environment (composed of heap environment H,
variable environment E, and type environment Γ), and an
AST element to type.
To check the validity of the contract, our prototype gen-
erates an ASG using Xtext, and uses the AnnotatedMj-
TypeSystem class to check for typing correctness, as well
as operational semantics correctness of the ASG. It then
outputs either typing is successful, or typing has failed. If
typing is successful, all the statements and expressions can
be typed, and therefore they comply with the contract.
Our prototype relies on the BouncyCastle [6] cryptographic
library for signature generation and veriﬁcation. The imple-
mentation of our prototype is available at [10].
8. CONCLUSION
In this paper we introduced FLEX, a framework for code
authentication. FLEX allows a semi-trusted third party (e.g.
an app meta-market) to perform limited modiﬁcations to a
mobile app. The user can verify the authenticity of the ap-
plication at each step of the modiﬁcation process. In partic-
ular, after downloading an app authenticated using FLEX,
the user can: (i) ascertain that the original app is authentic;
(ii) check if the meta-market modiﬁcations comply with the
developer’s speciﬁcations; and (iii) determine if the mod-
iﬁcations carried out by the semi-trusted third party have
been tampered.
In order to test the practicality of FLEX, we instanti-
ated it using AMJ—a language we designed to support code
annotations. Because all veriﬁcation steps are performed
before the app is installed on the user’s smartphone, FLEX
introduces no additional overhead to the app at runtime.
By allowing the user to verify end-to-end authenticity of
both developer’s code and meta-market modiﬁcations, we
believe that FLEX overcomes the major limitations of cur-
rent approaches in this space. Moreover, code annotations
do not add substantial complexity to the code development
process because they do not aﬀect the semantics of the code,
making FLEX easy to use for the developer.
Although FLEX is meant for smartphone apps, it can be
easily adapted to authenticate any mobile code, i.e., code
sourced from a remote system and executed locally without
explicit installation (e.g., JavaScript code included in HTML
or PDF documents, Flash animations, etc.) [19]. As part of
our future work, we will extend FLEX to support in-browser
JavaScript authentication. Developers will be able to specify
Mehmet Ak¸sit and Satoshi Matsuoka, editors,
ECOOP’97 – Object-Oriented Programming, volume
1241 of Lecture Notes in Computer Science, pages
220–242. Springer Berlin Heidelberg, 1997.
[16] Gary Leavens, Albert Baker, and Clyde Ruby. JML: a
Java Modeling Language. In Proceedings of the
Workshop on Formal Underpinnings of Java,
OOPSLA 1998.
[17] Steﬀen Lortz, Heiko Mantel, Artem Starostin, Timo
B¨ahr, David Schneider, and Alexandra Weber.
Cassandra: Towards a Certifying App Store for
Android. In Proceedings of the Workshop on Security
and Privacy in Smartphones and Mobile Devices,
SPSM 2014, pages 93–104.
[18] Bertrand Meyer. Applying ”design by contract”.
Computer, 25(10):40–51, October 1992.
[19] Reﬁk Molva and Fran¸coise Baude. Mobile Code,
Internet Security, and E-Commerce. In Proceedings of
the European Conference on Object-Oriented
Programming, ECOOP 2000, pages 270–281.
[20] George Necula. Proof-carrying Code. In Proceedings of
the ACM SIGPLAN-SIGACT Symposium on
Principles of Programming Languages, POPL 1997,
pages 106–119.
[21] OpenHAB project homepage.
http://www.openhab.org/. Accessed: July 2015.
[22] R. Sekar, C. R. Ramakrishnan, I. V. Ramakrishnan,
and S. A. Smolka. Model-Carrying Code (MCC): A
New Paradigm for Mobile-code Security. In
Proceedings of the Workshop on New Security
Paradigms, NSPW 2001, pages 23–30.
[23] Signing Your Applications. http://developer.android.
com/tools/publishing/app-signing.html.
[24] Brian Cantwell Smith. Procedural Reﬂection in
Programming Languages. PhD thesis, Massachusetts
Institute of Technology, Laboratory for Computer
Science, 1982.
[25] Starbucks. http://www.starbucks.com. Accessed: July
2015.
[26] Gregory Sullivan. Aspect-oriented Programming Using
Reﬂection and Metaobject Protocols. Communications
of the ACM, 44(10):95–97, October 2001.
[27] Wink Smart Hub. http://www.wink.com. Accessed:
July 2015.
[28] Xsemantics. http://xsemantics.sourceforge.net/.
Accessed: July 2015.
[29] Xtext. A framework for development of programming
languages and domain speciﬁc languages.
https://eclipse.org/Xtext/. Accessed: July 2015.
which parts of their JavaScript code can be modiﬁed with-
out invalidating the web page. Companies providing WiFi
connectivity to the user (e.g., Gogo Inﬂight Internet [11],
Starbucks [25], etc.), could then apply limited modiﬁcation
to the page’s source. The user would still be able to au-
thenticate (and possibly run) the original code. Because
the contract would be entirely speciﬁed within comments, it
would simply be ignored by legacy web browsers.
9. REFERENCES
[1] Apple App Store. http://www.apple.com/itunes/.
Accessed: July 2015.
[2] Alessandro Armando, Gabriele Costa, Alessio Merlo,
and Luca Verderame. Enabling BYOD Through
Secure Meta-market. In Proceedings of the ACM
Conference on Security and Privacy in Wireless and
Mobile Networks, WiSec 2014, pages 219–230.
[3] Giuseppe Ateniese, Daniel Chou, Breno de Medeiros,
and Gene Tsudik. Sanitizable Signatures. In
Proceedings of the European Symposium on Research
in Computer Security, volume 3679 of ESORICS 2005,
pages 159–177. Springer Berlin Heidelberg.
[4] Gavin Bierman, Matthew Parkinson, and Andrew
Pitts. MJ: An Imperative Core Calculus for Java and
Java with Eﬀects. Technical Report
UCAM-CL-TR-563, University of Cambridge, 2003.
[5] Kai Bollert. On weaving aspects. In Ana M. D.
Moreira and Serge Demeyer, editors, ECOOP
Workshops, volume 1743 of Lecture Notes in
Computer Science, pages 301–302. Springer, 1999.
[6] The Legion of the Bouncy Castle.
https://www.bouncycastle.org/. Accessed: July 2015.
[7] Christina Brzuska, Marc Fischlin, Tobias
Freudenreich, Anja Lehmann, Marcus Page, Jakob
Schelbert, Dominique Schroder, and Florian Volk.
Security of Sanitizable Signatures Revisited. In
Proceedings of the International Conference on
Practice and Theory in Public Key Cryptography,
volume 5443 of PKC 2009, pages 317–336. Springer
Berlin Heidelberg.
[8] Lilian Burdy, Marieke Huisman, and Mariela Pavlova.
Preliminary Design of BML: A Behavioral Interface
Speciﬁcation Language for Java Bytecode. In
Proceedings of the Fundamental Approaches to
Software Engineering, volume 4422 of FASE 2007,
pages 215–229. Springer Berlin Heidelberg.
[9] Firefox Marketplace. http://marketplace.ﬁrefox.com.
Accessed: July 2015.
[10] FLEX Prototype. http://cl.ly/1L3n2P1i2F2d.
[11] Gogo Inﬂight Internet. http://www.gogoair.com.
[12] Google Play Store. http://play.google.com/. Accessed:
July 2015.
[13] Robert Johnson, David Molnar, Dawn Xiaodong Song,
and David Wagner. Homomorphic Signature Schemes.
In Proceedings of the Cryptographer’s Track at the
RSA Conference on Topics in Cryptology, CT-RSA
2002, pages 244–262. Springer-Verlag.
[14] Gregor Kiczales. Aspect-oriented Programming. ACM
Computer Survey, 28(4es), December 1996.
[15] Gregor Kiczales, John Lamping, Anurag Mendhekar,
Chris Maeda, Cristina Lopes, Jean-Marc Loingtier,
and John Irwin. Aspect-oriented programming. In
APPENDIX
A. TECHNICAL PROOFS
Definition 6. We deﬁne the function V T ype as follows: