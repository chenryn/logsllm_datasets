title:Determining Privileges of Mobile Agents
author:Wayne A. Jansen
Determining Privileges of Mobile Agents 
Wayne A. Jansen 
National Institute of Standards and Technology 
PI:EMAIL
Abstract 
This  paper  describes  a  method  for  controlling  the 
behavior  of  mobile  agent-system  entities  through  the 
allocation  of  privileges.    Privileges  refer  to  policy  rules 
that  govern 
the  access  and  use  of  computational 
resources and services by mobile agents.  Our method is 
based on extending the platform processing environment, 
using  the  capabilities  present  in  most  mobile  agent 
systems, and applying two forms of privilege management 
certificates:  attribute  certificates  and  policy  certificates.  
Privilege  management  certificates  are  digitally  signed 
objects  that  allow  various  policy-setting  principals  to 
govern  the  activities  of  mobile  agents  through  selective 
privilege assignment.  The approach overcomes a number 
of  problems  in  existing  agent  systems  and  provides  a 
means  for  attaining  improved  interoperability  of  agent 
systems  designed  and  implemented  independently  by 
different  manufacturers. 
  The  paper  also  describes 
applying the scheme to Java-based agent systems. 
1.  Introduction 
is  a  program 
A  mobile  agent 
that  executes 
autonomously over a set of network hosts, on behalf of an 
individual or organization.  An agent moves among hosts 
to  execute  parts  of  its  program  and  to  interact  with  its 
execution environment and other agents it encounters, in 
working  toward  some  goal.    An  agent  may  also  remain 
fixed on a host for an indefinite period, while conducting 
its  activities.    The  sequence  of  hosts  that  an  agent  visits 
may  be  predetermined  when  the  agent’s  program  is 
written,  or  determined  dynamically  when  the  agent  is 
launched by its user or as it acquires information at a host.  
For example, an agent may need to access information at 
a  specific  network  host,  or  prefer  to  execute  parts  of  its 
program  on  network  hosts  offering  certain  types  of 
services.  
  Mobile  agent  computing 
is  a  radical  form  of 
distributed computing, which poses significant challenges 
to the security of the agents that form an application and 
of the hosts on which they execute.  One difficult class of 
threats  introduced  by  mobility  is  the  possibility  that  the 
computational environment (i.e., the  host and  supporting 
software)  may  attempt 
to  subvert  visiting  agents.  
Solution  to  this  problem  is  an  active  area  of  research.  
Other  threats  include  agents  attacking  the  computational 
environment or other agents visiting the host, and outside 
entities  attacking  the  overall  agent  framework.    A  wide 
range of security techniques, both conventional and newly 
developed  for  this  paradigm,  are  available  as  technical 
countermeasures  against  the  security  threats  encountered 
in deploying agent-based applications [1].  Agent systems 
typically  incorporate  some  basic  countermeasures  into 
their design.   
The actions an agent can take at a host are dictated by 
its  privileges,  which  are  controlled 
through  either 
capabilities or access control authorizations.  Capabilities 
are permissions or access rights assigned to and conveyed 
with  an  agent,  while  access  control  authorizations  are 
similar,  but  statically  configured  at  a  host.    In  the  most 
general  sense,  they  can  be  viewed  as  policy  rules  that 
govern  the  behavior  of  an  agent  at  a  host.    Most  agent 
systems  support 
those 
involving  basic  host  resources  such  as  processing  time, 
memory  space,  disk  storage,  network  access,  and  file 
access,  and  those  involving  agent  middleware  resources, 
such as cloning, changing itinerary, issuing or subscribing 
to  messages, 
limiting  conversation  dialogues,  and 
controlling  security  services.    Agent  systems  maintain 
privileges  mainly  within  internal  data  structures,  as 
opposed to some external form or representation.  While 
these  structures  are  often  very  similar  semantically,  they 
differ  in  their  implementation,  in  such  things  as  the 
mechanisms  used  to  protect  them  from  tampering  or 
forgery. 
In  reviewing  a  number  of  agent  systems,  we  noted 
several  shortcomings  in  the  way  in  which  they  manage 
the privileges of agents:  
two  categories  of  privilege: 
•  Among  applications,  the  number  of  policy-
setting principals and the trust relationships that 
are  needed  can  vary  considerably.    However, 
within an agent system those representations are 
typically 
  This 
dichotomy  forces  developers  of  agent-based 
fixed  and  unchangeable. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:44 UTC from IEEE Xplore.  Restrictions apply. 
applications to conform to the imposed scheme, 
which  may  or  may  not  match  well  the  intended 
security policy of their application. 
•  Policy expression varies among agent systems in 
terms  of  granularity,  language,  and  resource 
entities,  and  is  often  difficult  for  an  application 
developer to modify or extend.  When combined 
with the previous shortcoming, the overall result 
is to constrain a developer into a rigid framework 
that  may  require  an  elaborate  work-around  to 
express the intended policy or, at worst, may be 
totally 
the 
application. 
the  needs  of 
•  The  means  of  protecting  policy,  once  expressed 
and  residing  in  an  internal  data  structure,  also 
varies  among  agent 
systems,  particularly 
regarding  strength  of  protection.    Each  agent 
system  must  be  closely  reviewed  to  decide 
whether  the  expressed  policy  is  satisfactorily 
protected  for 
the 
application. 
the  risk  environment  of 
inadequate 
for 
•  Because 
the 
internal  policy-related  data 
structures,  trust  relationships,  policy  expression, 
and  strength  of  policy  protection  as  a  whole 
differ  widely  among  agents  developed  for 
different  agent  systems,  the  opportunity  for 
interoperability  of  agent  systems  is  severely 
limited. 
To overcome these noted shortcomings, we devised a 
method  for  allocating,  managing,  and  applying  security 
policies  in  a  flexible  manner  that  allows  freedom  in 
determining the granularity, language, and entities of the 
policy  expression,  as  well  as  the  relevant  policy-setting 
principals  and  their  precedence  relationships. 
  The 
remainder  of  the  paper  describes  our  scheme,  beginning 
with an in-depth overview, followed by a detailed look at 
its use in Java-based agent systems, and then ending with 
a review of related work. 
2.  Overview 
  Mobile agent systems can be implemented in various 
ways.  Interpreted scripting languages or virtual machine-
based interpretive language compilers are frequently used 
for  their  inherent  flexibility  in  adapting  heterogeneous 
platforms to support agents uniformly.  Depending on the 
agent  system,  individual  agents  may  be  represented  as 
independent processes or lightweight threads.  Similarly, 
the computational environment for an agent may involve 
a single host computer or multiple hosts.  Our method for 
privilege  management  applies  to  a  variety  of  agent 
systems,  despite 
implementation 
differences.  The approach taken also provides a means to 
work  independently  of  or,  if  available,  in  conjunction 
with  a  Public  Key  Infrastructure  (PKI),  including  one 
these  kinds  of 
built in compliance with the X.509 public key certificate 
framework [2]. 
A  simple  model  of  an  agent  system  is  sufficient  for 
describing  the  overall  scheme.    It  consists  of  two  main 
components: the agent and the agent platform.  An agent 
represents the code and state information needed to carry 
out some computation.  The  agent platform provides  the 
computational  environment  in  which  an  agent  operates.  
Multiple agents can interact with one another at an agent 
platform and use services offered by the platform, such as 
transport to another agent platform.  The platform where 
an  agent  is  instantiated  and  commences  activity  is 
distinguished  as  the  home  platform,  and  is  normally  the 
most trusted environment for an agent.  An agent platform 
comprises  one  or  more  hosts  and  may  support  multiple 
places where agents can interact.  Figure 1 illustrates the 
agent  and  agent  platform  components  along  with  other 
components  needed 
the  privilege  management 
enhancements described below. 
for 
Agent
Attribute
Certificates
Agent
Platform
Policy
Engine
Policy
Certificates
Figure 1: Agent system with enhancements 
2.1  Privilege Management Certificates 
they  must 
If  mobile  agents  are  to  operate  on  behalf  of 
individuals  and  organizations, 
follow 
prescribed security policies established by principals who 
have the requisite authority.   Rather than embody policy 
rules  within  an  agent,  it  is  possible  to  push  the  policy 
information to an external object – an attribute certificate.  
Two  variants  of  attribute  certificates  exist  to  distinguish 
those  certificates  issued  to  an  agent’s  code  from  those 
issued  to  an  instance  of  an  agent  (i.e.,  its  code  and  state 
information).    The  distinction  is  subtle,  but  important, 
since  for  the  latter,  the  certificate  includes  the  values  of 
any instance variables of the agent considered immutable 
by the agent system.  At a minimum, this must include the 
globally  unique  identifier  of  the  agent,  assigned  by  the 
agent system. 
To govern an agent's use of computational resources 
and  security  mechanisms,  the  issuer  of  an  attribute 
certificate  assigns  the  according  privileges  within  the 
certificate  to  the  agent.    An  attribute  certificate  must  be 
signed  by  the  issuer  to  protect  the  security-relevant 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:44 UTC from IEEE Xplore.  Restrictions apply. 
information about the agent from alteration.  Elements of 
an  attribute  certificate  are  pictured  in  Figure  2.    They 
include the identity of the owner (formed by a secure hash 
over the agent’s code and information), the identity of the 
issuer, the identifier of the algorithms used to protect the 
certificate,  the  lifetime  of  the  certificate,  and  the  subject 
attributes,  which  may  be  expressed  as  simple  type-value 
pairs or as more complex syntactical expressions.  These 
elements  can  be  used  to  establish  the  validity  of  the 
certificate and the binding between the attribute certificate 
and the agent.  Efforts to standardize the form and content 
of  attribute  certificates  are  ongoing. 
  Their  focus, 
however,  has  been  mainly  on  stationary  communicating 
programs (e.g., client-server systems) or programs having 
limited mobility (e.g., applet-like movement from a server 
to  a  client)  and  conveying  no  state  information  or 
computation data. 
Version
Owner
Issuer
Signature Algorithm ID
Certificate Serial Number
Validity Period
Attributes
Issuer Unique ID
e
r
u
t
a
n
g
S
i
r
e
u
s
s
I
Extensions
Figure 2: Attribute certificate elements 
Policy  certificates  are  counterparts 
to  attribute 
certificates, but express policy rules assigned to an agent 
platform  instead  of  an  agent.    Policy  certificates  follow 
the  same  structure  as  attribute  certificates.    While  an 
attribute  certificate  conveys  the  policy  rules  associated 
with an agent, the policy certificate conveys policy rules 
governing the behavior of all agents that  may attempt to 
visit  an  agent  platform  or  a  specific  place  on  an  agent 
platform.    Policy  certificates  also  convey  information 
about  the  precedence  relationships  of  policies  set  by 
different policy-setting principals, which affect the policy 
processing  of  ambiguous  or  contradictory  rules.    Since 
many  agent  systems  take  advantage  of  the  security 
mechanisms provided by the underlying operating system 
or virtual machine, maintaining the platform policy rules 
separate from the certificate, in the system access control 
and authorization files where they normally reside, can be 
advantageous.  Therefore, policy certificates are designed 
to  accommodate  such  external  file  references,  where 
needed,  by  including  the  location  of  the  file  and  a 
cryptographic  hash  of  the  file’s  contents  into  the  policy 
certificate, 
later  access  and  validation  during 
certificate processing. 
for 
   Although  the  format  and  structure  of  the  policy 
certificate  closely  follow  that  of  the  attribute  certificate, 
one significant difference between them is the binding of 