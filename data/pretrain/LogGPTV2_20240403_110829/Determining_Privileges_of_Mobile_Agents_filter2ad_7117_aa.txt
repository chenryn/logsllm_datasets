# Determining Privileges of Mobile Agents

**Author:** Wayne A. Jansen  
**Affiliation:** National Institute of Standards and Technology  
**Contact:** [PI:EMAIL]

## Abstract
This paper introduces a method for controlling the behavior of mobile agents through the allocation of privileges. Privileges, in this context, refer to policy rules that govern the access and use of computational resources and services by mobile agents. The proposed method extends the platform processing environment, leveraging the capabilities present in most mobile agent systems, and employs two forms of privilege management certificates: attribute certificates and policy certificates. These digitally signed objects allow various policy-setting principals to govern the activities of mobile agents through selective privilege assignment. This approach addresses several issues in existing agent systems and enhances interoperability among independently designed and implemented agent systems. The paper also discusses the application of this scheme to Java-based agent systems.

## 1. Introduction
A mobile agent is a program that autonomously executes across a set of network hosts on behalf of an individual or organization. It moves between hosts to execute parts of its program and interact with its execution environment and other agents, working toward a specific goal. The sequence of hosts visited by an agent can be predetermined or dynamically determined based on the information acquired at each host. For example, an agent may need to access specific information or prefer to execute on hosts offering certain types of services.

Mobile agent computing represents a radical form of distributed computing, posing significant security challenges. One such challenge is the potential for the computational environment (i.e., the host and supporting software) to subvert visiting agents. Other threats include agents attacking the computational environment or other agents, and external entities attacking the overall agent framework. Various security techniques, both conventional and newly developed, are available to counter these threats.

The actions an agent can take at a host are governed by its privileges, which are controlled through capabilities or access control authorizations. Capabilities are permissions assigned to and conveyed with an agent, while access control authorizations are statically configured at a host. Most agent systems support basic host resources (e.g., processing time, memory space, disk storage, network access, file access) and middleware resources (e.g., cloning, changing itinerary, issuing or subscribing to messages, limiting conversation dialogues, and controlling security services). Agent systems typically maintain these privileges within internal data structures, which, although semantically similar, differ in implementation and protection mechanisms.

In reviewing several agent systems, we identified several shortcomings in their privilege management:
- **Fixed and Unchangeable Representations:** The number of policy-setting principals and trust relationships can vary significantly among applications, but agent systems often impose fixed and unchangeable representations.
- **Policy Expression Variability:** Policy expression varies in terms of granularity, language, and resource entities, making it difficult for developers to modify or extend.
- **Protection Mechanisms:** The means of protecting policy, once expressed and residing in an internal data structure, varies among agent systems, particularly in terms of protection strength.
- **Limited Interoperability:** Differences in internal policy-related data structures, trust relationships, policy expression, and protection strength severely limit the interoperability of agent systems.

To address these issues, we devised a flexible method for allocating, managing, and applying security policies. This method allows for freedom in determining the granularity, language, and entities of the policy expression, as well as the relevant policy-setting principals and their precedence relationships. The remainder of the paper describes our scheme, starting with an in-depth overview, followed by a detailed look at its application in Java-based agent systems, and concluding with a review of related work.

## 2. Overview
Mobile agent systems can be implemented in various ways, using interpreted scripting languages or virtual machine-based interpretive language compilers. Depending on the system, agents may be represented as independent processes or lightweight threads, and the computational environment may involve a single host or multiple hosts. Our method for privilege management applies to a variety of agent systems, regardless of implementation differences. It also provides a means to work independently or in conjunction with a Public Key Infrastructure (PKI), including those built in compliance with the X.509 public key certificate framework.

### 2.1 Privilege Management Certificates
If mobile agents are to operate on behalf of individuals and organizations, they must follow prescribed security policies established by authorized principals. Rather than embedding policy rules within an agent, we propose pushing the policy information to an external object: an attribute certificate. Two variants of attribute certificates exist: one for the agent's code and another for an instance of the agent (i.e., its code and state information). The latter includes the values of any instance variables considered immutable by the agent system, such as the globally unique identifier assigned by the agent system.

To govern an agent's use of computational resources and security mechanisms, the issuer of an attribute certificate assigns the corresponding privileges within the certificate. The certificate must be signed by the issuer to protect the security-relevant information about the agent from alteration. Elements of an attribute certificate include the identity of the owner (formed by a secure hash over the agentâ€™s code and information), the identity of the issuer, the identifier of the algorithms used to protect the certificate, the lifetime of the certificate, and the subject attributes, which may be simple type-value pairs or more complex syntactical expressions. These elements establish the validity of the certificate and the binding between the attribute certificate and the agent.

Policy certificates are counterparts to attribute certificates, expressing policy rules assigned to an agent platform rather than an agent. They follow the same structure as attribute certificates but convey policy rules governing the behavior of all agents that may visit an agent platform or a specific place on the platform. Policy certificates also convey information about the precedence relationships of policies set by different policy-setting principals, affecting the policy processing of ambiguous or contradictory rules. Since many agent systems leverage the security mechanisms provided by the underlying operating system or virtual machine, maintaining platform policy rules separate from the certificate can be advantageous. Therefore, policy certificates are designed to accommodate external file references, including the location of the file and a cryptographic hash of its contents, for later access and validation during certificate processing.

Although the format and structure of the policy certificate closely follow that of the attribute certificate, a significant difference is the binding of the policy rules to the agent platform rather than the agent itself.

[Figure 1: Agent system with enhancements]
[Figure 2: Attribute certificate elements]