0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
8 
2 
7 
2 
0 
4 
8 
5 
0 
2 
3 
0 
1 
6 
2 
0 
3 
2 
3 
0 
1 
6 
2 
0 
3 
2 
15 
1 
6 
0 
8 
0 
2 
0 
8 
0 
0 
1 
0 
1 
0 
0 
3 
In  this  case,  the  developers  probably  preferred  to 
reboot  the  system  even  if  some  parameters  were 
incorrect (but notice that this reboot sometimes was not 
done in a completely satisfactory way since files ended 
up being corrupted). 
From  the  various  functions,  only  two  caused  the 
system to hang (FM2 ≠ 0). Functions 14-AcqLock and 
19-AttachDev  caused  hangs  in  all  OS  configurations, 
when an invalid pointer was passed as argument. Most 
of  the  erroneous  inputs  that  caused  failures  end  up 
crashing the system (FM3 and FM4). From the various 
classes of faults that were injected, the most malicious 
were  invalid  pointer  assignments  and  NULL  values 
passed  in  pointer  parameters.  The  first  class,  invalid 
pointers,  is  sometimes  difficult  to  validate,  depending 
on  the  context  (e.g.,  a  buffer  pointer  that  was  not 
properly allocated). On other hand, NULL pointers are 
easily tested and for this reason it is difficult to justify 
why  they  are  left  un-checked,  allowing  them  to  cause 
so many reliability problems. 
In  all  experiments,  we  never  observed  any  file 
corruption  with  the  NTFS  file  system  after  a  reboot. 
However,  the  FAT32  file  system  displayed  in  many 
instances cases of corruption. Traditionally, NTFS has 
been considered much  more reliable than FAT32, and 
our  results  contribute  to  confirm  this.  The  reliability 
capabilities  integrated  in  NTFS,  like  transactional 
operations  and  logging,  have  proven  to  be  quite 
effective  in  protecting  the  system  during  abnormal 
execution.  
The overall comparison of the 3 operating systems, 
if  we  restrict  ourselves  to  NTFS  or  FAT32,  shows  a 
remarkable  resemblance  among  them.  The  last  two 
rows  of    Table  5  present  an  average  value  for  the 
failure modes and OS configurations. On average, OSs 
had an approximately equivalent number of failures in 
each  mode,  with  around  73%  testes  with  no problems 
detected  during  the  system  execution.    Hangs  were  a 
rare  event  in  all  OSs.  If  a  finer  analysis  is  made  on  a 
function  basis  (see  Figure  3),  we  observe  a  similar 
behavior  for  most  functions.  There  were  only  two 
functions  where  results  reasonably  differ,  12-SetEvt 
and 20-memset. From these results, there is reasonable 
indication that the 3 operating systems use comparable 
levels  of  protection  from  faulty  inputs  coming  from 
drives.  
These  results  reinforce  the  idea  that  although  the 
Windows  NT  system  has  undergone  several  name 
changes over the past several years, it remains entirely 
based  on  the  original  Windows  NT  code  base. 
However, as time went by, the implementation of many 
internal features has changed. We expected that newer 
versions  of  the  Windows  OS  family  would  become 
more  robust; 
this 
in  practice  we  did  not  see 
improvement  at  the  driver’s  interface.  Of  course,  this 
conclusion  needs  to  be  better  verified  with  further 
experiments.  
3.2  Return Values from Functions 
As  explained  previously,  even  when  the  system 
executes  without  apparent  problems,  the  checking 
mechanisms might not validate the faulty arguments in 
the  most  correct  manner  and  produce  fail-silent 
violations.  Therefore,  failure  mode  1  can  be  further 
divided  in  three  sub-categories  to  determine  how  well 
the OS handled the inputs.  
Table  6  shows  the  analysis  when  the  function 
execution returned a value in the RErr category, i.e., an 
error  was  detected  by  the  function.  Since  some 
functions do not return any values, their corresponding 
table  entries  were  filled  with  “-”.  The  “#  Faulty 
Drivers”  column  refers  to  the  number  of  drivers 
produced by DevBuilder that contained at least one bad 
parameter.  Comparing  this  column  with  the  following 
five  columns,  one  can  realize  that  only  two  functions 
have a match between the number of faulty drivers and 
the  number  of  RErr  values.  The  other  functions 
revealed a limited parameter checking capability.  
To  complement  this  analysis,  Table  7  presents  the 
results  for  the  ROk  category  (i.e.,  the  return  value  of 
the call is a successful execution). Column “Non Faulty 
Drivers” shows the number of drivers with only correct 
arguments. Comparing this column with the remaining 
ones,  it  is  possible  to  conclude  that functions return a 
successful  execution  more  often  then  the  number  of 
non  faulty drivers. However, in some cases this might 
not  mean  that  there  is  a  major  problem.  For  instance, 
consider  function  2-AllocPool  that  receives  three 
parameters:  the  type  of  pool  (P0);  the  pool  size  (P1); 
and  a  tag  value  (P2).  Depending  on  the  order  of 
parameter  checking,  one  can  have  the  following 
acceptable  outcome:  P1  is  zero,  and  2-AllocPool 
returns  a  pointer  to  an  empty  buffer  independently  of 
the other parameters values.  
less 
found  out 
that  when  P1  was 
On  the  other  hand,  by  analyzing the execution  log, 
we 
than 
100.000*PAGE_SIZE,  Windows  returned  ROk  even 
when  a  forbidden  value  was  given  in  P0  (at  least,  as 
stated  in  the  DDK  documentation).  This  kind  of 
behavior  means 
that  an  error  was  (potentially) 
propagated  back  to  the driver, since it will be using a 
type  of  memory pool  different from the  expected thus 
causing  a  fail  silent  violation.  The  table  also  reveals 
another phenomenon -- the three versions of Windows 
handle the faulty parameters differently. 
Table 6: Return error (RErr) values. 
# 
Rerr 
XP 
2003 
Faulty 
V 
Drivers  Fat  Ntfs  Fat  Ntfs  Ntfs 
0 
12 
- 
- 
0 
- 
- 
0 
3 
0 
- 
0 
- 
0 
- 
- 
0 
20 
- 
- 
0 
- 
- 
0 
3 
0 
- 
0 
- 
0 
- 
- 
0 
20 
- 
- 
0 
- 
- 
0 
3 
0 
- 
0 
- 
0 
- 
- 
0 
20 
- 
- 
0 
- 
- 
0 
3 
0 
- 
0 
- 
0 
- 
- 
0 
20 
- 
- 
0 
- 
- 
0 
3 
0 
- 
0 
- 
0 
- 
- 
104 
315 
0 
0 
104 
315 
0 
0 
104 
315 
0 
0 
104 
315 
0 
0 
104 
315 
0 
0 
Alias 
InitStr 
AllocPool 
BugCheck 
CompReq 
CreateDev 
DeleteDev 
InitEvt 
WaitObj 
ZwClose 
CallDrv 
FreePool 
SetEvt 
InitLock 
AcqLock 
RelLock 
DerefObj 
OpenKey 
QryKey 
AttachDev 
Memset 
9 
200 
12 
51 
76 
4 
14 
36 
3 
9 
15 
20 
2 
8 
48 
3 
155 
315 
9 
39 
Table 7: Return OK (ROk) values. 
Non 
V 
Faulty 
Drivers  Fat  Ntfs  Fat  Ntfs  Ntfs 
2003 
XP 
ROk 
3 
240 
0 
0 
20 
0 
4 
0 
0 
0 
1 
4 
1 
0 
0 
0 
0 
0 
0 
9 
9 
396 
9 
396 
9 
396 
9 
396 
9 
408 
- 
- 
48 
- 
- 
18 
0 
0 
- 
6 
- 
0 
- 
- 
0 
0 
1 
18 
- 
- 
48 
- 
- 
18 
0 
0 
- 
6 
- 
0 
- 
- 
0 
0 
1 
18 
- 
- 
48 
- 
- 
18 
0 
0 
- 
18 
- 
0 
- 
- 
0 
0 
1 
27 
- 
- 
48 
- 
- 
18 
0 
0 
- 
18 
- 
0 
- 
- 
0 
0 
1 
27 
- 
- 
48 
- 
- 
18 
0 
0 
- 
9 
- 
0 
- 
- 
0 
0 
1 
22 
Alias 
InitStr 
AllocPool 
BugCheck 
CompReq 
CreateDev 
DeleteDev 
InitEvt 
WaitObj 
ZwClose 
CallDrv 
FreePool 
SetEvt 
InitLock 
AcqLock 
RelLock 
DerefObj 
OpenKey 
QryKey 
AttachDev 
memset 
For  example,  there  were  several  cases  in  Vista 
where function 2-AllocPool succeeded while in XP and 
Server  2003  it  caused  a  crash.  In  function  12-SetEvt, 
Server 2003 does not crash when TRUE was passed in 
one  of  the  parameters,  while  the  other  did  so  (the 
documentation  says  that  when  this  value  is  used,  the 
function  execution is to be followed immediately by a 
call to one of the KeWaitXxx routines, which was not 
done in either OSs).  
In  all  experiments,  we  did  not  observe  any  return 
values  belonging  to  the  RInv  category  (i.e.,  values 
outside the expected return range).  
3.3  Corrupted Files 
The last group of results in Table 5 corresponding to 
FM4,  displays  the  number  of  times  Windows  found 
corrupted  files  while  booting.  The  Chkdsk  utility  is 
called  during the  booting process  to detect these files. 
Corrupted  files  were  found  only  in  the  configurations 
that  used  the  FAT32  file  system.  Using  the  formula 