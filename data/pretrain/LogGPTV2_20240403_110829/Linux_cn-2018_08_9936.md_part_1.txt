---
author: Nick Coghlan
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 1
  viewnum: 3824
date: '2018-08-20 23:36:00'
editorchoice: false
excerpt: Python 是为谁设计的？
fromurl: http://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience.html
id: 9936
islctt: true
largepic: /data/attachment/album/201808/20/233621ldmjdlztketwtwtk.jpg
permalink: /article-9936-1.html
pic: /data/attachment/album/201808/20/233621ldmjdlztketwtwtk.jpg.thumb.jpg
related: []
reviewer: wxy, pityonline
selector: ''
summary: Python 是为谁设计的？
tags:
- Python
thumb: false
title: 盘点 Python 的目标受众
titlepic: true
translator: qhwdw
updated: '2018-08-20 23:36:00'
---
![](/data/attachment/album/201808/20/233621ldmjdlztketwtwtk.jpg)
Python 是为谁设计的？
几年前，我在 python-dev 邮件列表中，以及在活跃的 CPython 核心开发人员和认为参与这一过程不是有效利用个人时间和精力的人中[强调](http://www.curiousefficiency.org/posts/2011/04/musings-on-culture-of-python-dev.html)说，“CPython 的发展太快了也太慢了” 是很多冲突的原因之一。
我一直认为事实确实如此，但这也是一个要点，在这几年中我也花费了很多时间去反思它。在我写那篇文章的时候，我还在波音防务澳大利亚公司（Boeing Defence Australia）工作。下个月，我离开了波音进入红帽亚太（Red Hat Asia-Pacific），并且开始在大企业的[开源供应链管理](http://community.redhat.com/blog/2015/02/the-quid-pro-quo-of-open-infrastructure/)方面取得了 再分发者   redistributor 层面的视角。
### Python 的参考解析器使用情况
我尝试将 CPython 的使用情况分解如下，尽管看起来有些过于简化（注意，这些分类的界线并不是很清晰，他们仅关注于考虑新软件特性和版本发布后不同因素的影响）：
* 教育类：教育工作者的主要兴趣在于建模方法的教学和计算操作方面，*不会去*编写或维护生产级别的软件。例如：
	+ 澳大利亚的[数字课程](https://aca.edu.au/#home-unpack)
	+ Lorena A. Barba 的 [AeroPython](https://github.com/barbagroup/AeroPython)
* 个人类的自动化和爱好者的项目：主要且经常是一类自写自用的软件。例如：
	+ my Digital Blasphemy [图片下载器](https://nbviewer.jupyter.org/urls/bitbucket.org/ncoghlan/misc/raw/default/notebooks/Digital%20Blasphemy.ipynb)
	+ Paul Fenwick 的 (Inter)National [Rick Astley Hotline](https://github.com/pjf/rickastley)
*  组织   organisational 过程自动化：主要且经常是为组织利益而编写的。例如：
	+ CPython 的[核心工作流工具](https://github.com/python/core-workflow)
	+ Linux 发行版的开发、构建和发行管理工具
* “ 一劳永逸   Set-and-forget ” 的基础设施：这类软件在其生命周期中几乎不会升级，但在底层平台可能会升级（这种说法有时候有些争议）。例如：
	+ 大多数自我管理的企业或机构的基础设施（在那些资金充足的可持续工程计划中，这种情况是让人非常不安的）
	+ 拨款资助的软件（当最初的拨款耗尽时，维护通常会终止）
	+ 有严格认证要求的软件（如果没有绝对必要的话，从经济性考虑，重新认证比常规升级来说要昂贵很多）
	+ 没有自动升级功能的嵌入式软件系统
* 持续升级的基础设施：具有健壮支撑的工程学模型的软件，对于依赖和平台升级通常是例行的，不必关心源码变更。例如：
	+ Facebook 的 Python 服务基础设施
	+ 滚动发布的 Linux 分发版
	+ 大多数的公共 PaaS 无服务器环境（Heroku、OpenShift、AWS Lambda、Google Cloud Functions、Azure Cloud Functions 等等）
* 长周期性升级的标准的操作环境：对其核心组件进行常规升级，但这些升级以年为单位进行，而不是周或月。例如：
	+ [VFX 平台](http://www.vfxplatform.com/)
	+ 长期支持（LTS）的 Linux 分发版
	+ CPython 和 Python 标准库
	+ 基础设施管理和编排工具（如 OpenStack、Ansible）
	+ 硬件控制系统
* 短生命周期的软件：软件仅被使用一次，然后就丢弃或忽略，而不是随后接着升级。例如：
	+  临时   Ad hoc 自动化脚本
	+ 被确定为 “终止” 的单用户游戏（你玩了一次后，甚至都忘了去卸载它们，或许在一个新的设备上都不打算再去安装了）
	+ 不具备（或不完整）状态保存的单用户游戏（如果你卸载并重安装它们，游戏体验也不会有什么大的变化）
	+ 特定事件的应用程序（这些应用程序与特定的事件捆绑，一旦事件结束，这些应用程序就不再有用了）
* 常规用途的应用程序：部署后定期升级的软件。例如：
	+ 业务管理软件
	+ 个人和专业的生产力应用程序（如 Blender）
	+ 开发工具和服务（如 Mercurial、Buildbot、Roundup）
	+ 多用户游戏，和其它明显处于持续状态还没有被定义为 “终止” 的游戏
	+ 有自动升级功能的嵌入式软件系统
* 共享的抽象层：在一个特定的问题领域中，设计用于让工作更高效的软件组件。即便是你没有亲自掌握该领域的所有错综复杂的东西。例如：
	+ 大多数的 运行时   runtime 库和框架都归入这一类（如 Django、Flask、Pyramid、SQL Alchemy、NumPy、SciPy、requests)
	+ 适合归入这一类的许多测试和类型推断工具（如 pytest、Hypothesis、vcrpy、behave、mypy）
	+ 其它应用程序的插件（如 Blender plugins、OpenStack hardware adapters）
	+ 本身就代表了 “Python 世界” 基准的标准库（那是一个[难以置信的复杂](http://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python.html#broadening-our-horizons)的世界观）
### CPython 主要服务于哪些受众？
从根本上说，CPython 和标准库的主要受众是哪些呢？是那些不管出于什么原因，将有限的标准库和从 PyPI 显式声明安装的第三方库组合起来所提供的服务还不能够满足需求的那些人。
为了更进一步简化上面回顾的不同用法和部署模型，宏观地将最大的 Python 用户群体分开来看，一类是在一些感兴趣的环境中将 Python 作为一种 *脚本语言* 使用的人；另外一种是将它用作一个 *应用程序开发语言* 的人，他们最终发布的是一种产品而不是他们的脚本。
把 Python 作为一种脚本语言来使用的开发者的典型特性包括：
* 主要的工作单元是由一个 Python 文件组成的（或 Jupyter notebook)，而不是一个 Python 和元数据文件的目录
* 没有任何形式的单独的构建步骤 —— 是*作为*一个脚本分发的，类似于分发一个独立的 shell 脚本的方式
* 没有单独的安装步骤（除了下载这个文件到一个合适的位置），因为在目标系统上要求预配置运行时环境
* 没有显式的规定依赖关系，除了最低的 Python 版本，或一个预期的运行环境声明。如果需要一个标准库以外的依赖项，他们会通过一个环境脚本去提供（无论是操作系统、数据分析平台、还是嵌入 Python 运行时的应用程序）
* 没有单独的测试套件，使用 “通过你给定的输入，这个脚本是否给出了你期望的结果?” 这种方式来进行测试
* 如果在执行前需要测试，它将以 试运行   dry run&gt; 和 预览   preview 模式来向用户展示软件*将*怎样运行
* 如果使用静态代码分析工具，则通过集成到用户的软件开发环境中，而不是为每个脚本单独设置
相比之下，使用 Python 作为一个应用程序开发语言的开发者特征包括：
* 主要的工作单元是由 Python 和元数据文件组成的目录，而不是单个 Python 文件
* 在发布之前有一个单独的构建步骤去预处理应用程序，哪怕是把它的这些文件一起打包进一个 Python sdist、wheel 或 zipapp 中
* 应用程序是否有独立的安装步骤做预处理，取决于它是如何打包的，和支持的目标环境
* 外部的依赖明确存在于项目目录下的一个元数据文件中，要么是直接在项目目录中（如 `pyproject.toml`、`requirements.txt`、`Pipfile`），要么是作为生成的发行包的一部分（如 `setup.py`、`flit.ini`）
* 有独立的测试套件，或者作为一个 Python API 的一个单元测试，或者作为功能接口的集成测试，或者是两者都有
* 静态分析工具的使用是在项目级配置的，并作为测试管理的一部分，而不是作为依赖
作为以上分类的一个结果，CPython 和标准库的主要用途是，在相应的 CPython 特性发布后，为教育和 临时   ad hoc 的 Python 脚本环境提供 3-5 年基础维护服务。
对于临时脚本使用的情况，这个 3-5 年的延迟是由于再分发者给用户开发新版本的延迟造成的，以及那些再分发版本的用户们花在修改他们的标准操作环境上的时间。
对于教育环境中的情况是，教育工作者需要一些时间去评估新特性，然后决定是否将它们包含进教学的课程中。