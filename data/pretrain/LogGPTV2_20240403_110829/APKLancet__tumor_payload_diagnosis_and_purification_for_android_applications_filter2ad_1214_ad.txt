...
sget-object v1,
Lcom/geinimi/AdService;->a:Ljava/lang/String;
invoke-static {v1}, Ljava/lang/Class;->
forName(Ljava/lang/String;)Ljava/lang/Class;
move-result-object v0
new-instance v1, Landroid/content/Intent;
invoke-direct {v1, p0, v0},
Landroid/content/Intent;->
(Landroid/content/Context;Ljava/lang/Class;)V
invoke-virtual {p0, v1},
Lcom/geinimi/AdActivity;->
startActivity(Landroid/content/Intent;)V
...
It proves that APKLancet’s ﬁxing policy eﬀectively recov-
ers the original entry point.
4.4 Case Study III: AdMob and Flurry
In this subsection, two popular third-party libraries, Ad-
Mob and Flurry, are studied to illustrate the eﬀectiveness of
APKLancet’s puriﬁcation. Actually AdMob and Flurry are
benign third-party ad libraries, but they may be injected
into legitimate apps by attackers for proﬁt. What’s more,
they are typical full functional third-party ad libraries and
thus are good cases for demonstrating the excision process
and evaluating the puriﬁcation.
The case for illustrating AdMob puriﬁcation is an app
whose package name is com.xuecs.sqlitemanager. APKLancet
lists the class AdView as index classes in the feature database
and identiﬁes the whole package of com.google.ads.*, which
contains the index class, as tumor payload. Then APKLancet
resects all the method invoking and object references from
the benign code to the tumor code, including 3 invoke in-
structions with the same pattern, 1 object reference and
several further dependent instructions in benign code. For
the case of Flurry, the sample is an app com.electricsheep.dj.
Also, APKLancet constructs the feature database by listing
FlurryAgent as index class and then resects the tumor pay-
load com.ﬂurry.android.*. After that, APKLancet searches
the benign code and ﬁnds several method invoking instruc-
tions related to tumor payload, including onStartSession,
onEvent, onEndSession, etc.
One problem of the ad libraries puriﬁcation is that Java
class is often referred in resource ﬁles (i.e., layout XML or
manifest). And this kind of information is not ﬁxed and
cannot be detected with the knowledge of feature database.
For instacne, in main.xml ﬁle an AdMob’s AdView element
is referred as:
To solve this issue, the analysis of APKLancet for tumor
payload not only deals with reference in code part but also in
resource part. The patching of resource ﬁles is relatively easy
because APKLancet could resect this kind of declaration
directly.
5. LIMITATIONS
In this paper we do not focus on identifying the repack-
aged app which have been extensively studied[25]. One es-
sential requirement for the repackaging detection is that the
detection needs the knowledge of the original app. Actually,
there is no one-size-ﬁts-all approach to ﬁnd the knowledge
of the original app. It seems that the certiﬁcate of an APK
could help identify its provenance. The problem is that An-
droid allows either a certiﬁcate from the certiﬁcate author-
ity or a self-signed certiﬁcate. Thus it is not able to trust
an APK only through the certiﬁcate. Best practice suggests
that Google Play is the trust source for validating APK. But
even some APKs on Google Play are also repackaged version
of other applications. And not all of the applications can be
found on Google Play. Actually in China some famous ap-
plications(e.g., WeChat with more than 500 million users)
cannot even be downloaded from Google Play. Thus, Our
Figure 4: Main Entry Point Fixing
APKLancet system focuses on the tumor payload ignoring
whether it is a repackaged app or not. APKLancet adopts
the policy of splitting any unrelated modules and resecting
them to assure the security.
Since our work does not include repackaging detection,
we do not distinguish whether the third-party libraries such
as ad libraries are imported by the original developers or
injected by malicious authors. We argue that the choice of
puriﬁcation of third-party libraries should depend on the end
user. APKLancet hence just prompts the existence of any
potentially unwanted ad library based on the permissions it
requires, and the end user may decide whether to resect it
or not.
Our work assumes that the tumor code is embedded as
a module not closely interweaving with the host app. Al-
though this assumption stands in most cases, some unde-
sirable behaviors may still remains inside the application if
the tumor code author binds the tumor code with the be-
nign function cautiously. However this may not happen fre-
quently for the cost is generally very high(a proﬁtless work
seldom lasts). What’s more, we purify the apps according
to the index classes in feature database, so benign apps that
generally do not include the index classes will not be aﬀect
by APKLancet.
Finally, this work does not focus on the detection of mal-
ware. Our APKLancet relies on the tumor payload fea-
ture database built on existing knowledge of the undesirable
code. As a result, APKLancet could only deal with the an-
alyzed malicious tumor payload, and because APKLancet
is mainly a static analysis based system, it is not able to
control the dynamically loaded code. However, the goal of
APKLancet is only to purify the application with undesir-
able code so that it is good enough to be used again.
It
adopts conservative strategy to only deal with apps that it
can be puriﬁed. It is a simple but eﬀective approach to pre-
vent the known malicious tumor payload. APKLancet may
not able to purify any tumor payload perfectly, but it helps
deal with the known ones and can co-operate with other ac-
cess control system to counter other unknown undesirable
code.
6. RELATED WORK
6.1 Malware Analysis
Previous work on tumor payload analysis has mainly fo-
cused on malicious code analysis. Automated analysis tools
are also developed to help detect malicious code and diﬀer-
ent evaluation schemes are adopted. DroidRanger[25] de-
tects malicious applications by using both permission-based
behavioral footprint and heuristics-based ﬁltering scheme.
RiskRanker[13] performs large-scale security risk analysis
for zero-day malware detection. Researchers have also sys-
tematically characterize Android malwares from various as-
pects including installation methods, activation mechanisms
as well as the nature of carried malicious payload[24].
Our study does not lead to malware detection. The pur-
pose is to resect the tumor payload with the help of existing
summarized knowledge. On one hand, malware detection
and analysis contribute a lot to tumor payload identiﬁcation.
On the other hand, our APKLancet system pays attention
to tumor payload, which contains not only malicious code
but also potentially risky third-party libraries. It needs to
address challenges brought by tumor payload purifying and
host apps ﬁxing.
Our work is the ﬁrst to measure the eﬀectiveness of tumor
payload puriﬁcation. Although our work relies on existing
knowledge of tumor code, we believe that most tumor pay-
load in repackaged applications are not novel, especially for
its injection style.
6.2 Repackaging Detection
Tumor payload detection and analysis is closely connected
to the problem of detecting repackaged legitimate app, which
is often injected with malicious payload. Studies vary from
pair-wise comparison to scalable detection. DNADroid[8]
computes the similarity between two Android applications
by comparing program dependency graph to detect applica-
tion copying and cloning. And DroidMOSS[23] systemat-
ically detects repackaged apps on third-party Android mar-
ketplaces by applying fuzzy hashing technique to measure
an app’s similarity and then compares apps in pair. An-
Darwin[9] uses a scalable approach rather than comparing
apps pairwise to detect similar Android applications based
on semantic information. PiggyApp[22] scalably detects
piggybacked Android applications by organizing various fea-
ture vectors from apps into a metric space and applying
line-arithmic search algorithm. The prior works mainly fo-
cus on the similarity of the repackaged app and the original
one, while our work assumes that the target of our system
contains not only the repackaged apps but also some apps
with tumor payload injected by their authors. In this case,
APKLancet can deal with the tumor payload without the
support of the reference app.
6.3 Advertisement Splitting
Advertisement is controversial in Android app. An ad
library embedded in an app may send information about
the device and user to the ad server, thus raising concerns
about user privacy. Studies suggest isolating the advertising
or even separating it from the application process.
AdSplit[18] extends Android to separate advertising from
applications and leverage QUIRE’s mechanisms to let the re-
mote server validate the authenticity of client-side behavior.
AFrame[21] provides a developer a friendly method to iso-
late untrusted third-party code from the host applications
including process, permission, display and input isolation.
AdDroid[17] introduces a new advertising API and corre-
sponding advertising permissions to separate privileged ad-
vertising functionality from host applications. All of these
schemes require to extend the Android system trying to sep-
arate advertisement from host apps.
In comparison, AP-
KLancet does not need to modify the Android system and
introduces no performance latency.
6.4 App Rewriting
Many ﬁne-grained permission control systems use applica-
tion rewriting technique to implement sensitive API invok-
ing management. Aurasium[20] repackages applications to
attach user-level sandboxing and policy enforcement code for
the aim of monitoring applications’ behavior about security
and privacy violation. In-App Reference Monitors(I-
ARM)[10] rewrites the Dalvik bytecode of applications to
enforce the security policies the framework users speciﬁed
towards a set of security-sensitive API methods. Dr. An-
droid[15] introduces a novel framework to address the is-
sue that many applications are allowed broader access than
required by adding ﬁner-grained permissions. APKLancet
also rewrites the app. But instead of adding instrumenta-
tion code or extra libraries to monitor the behavior of the
app, it directly resects the undesirable part to enforce access
control policy, which is more concise.
7. CONCLUSION
Android apps are vulnerable to repackaging attack and
the undesirable code (tumor code) bundling is becoming a
popular way of spreading malicious behavior. Based on the
fact that the tumor code in Android APK is usually charac-
teristic and relatively independent in the app, it is possible
to resect the tumor from the original APK. In this paper,
we propose an eﬀective tumor code diagnosis and puriﬁca-
tion system called APKLancet. It consists of three compo-
nents, the APK analyzer, APK rewriter and APK veriﬁer,
and carries out the workﬂow by four stages: 1) diagnosing
the tumor code relying on an existing knowledge database,
2) partitioning the tumor payload from the host app, 3) ex-
cision of the tumor code and restoring the benign function,
and 4) verifying the app’s benign function. APKLancet has
been applied to apps with typical tumor payloads and our
analysis indicates that it is feasible to defend the undesirable
behaviors through app’s puriﬁcation.
8. ACKNOWLEDGEMENT
This work is supported by National Natural Science Foun-
dation of China (No.61103040), National Science and Tech-
nology Major Projects (Grant No.2012ZX03002011), and
Technology Innovation Project of Shanghai Science and Tech-
nology Commission (No.13511504000). We also appreciate
Wenjun Hu, the author of SandDroid[6], for providing the
valuable malware samples.
9. REFERENCES
[1] 1.2 percent of google play store is thief-ware, study
shows. http://tinyurl.com/kvf7xvc. Online;
accessed Nov-2013.
[2] Ad networks - android library statistics.
http://www.appbrain.com/stats/libraries/ad.
[3] Ad vulna: A vulnaggressive (vulnerable & aggressive)
adware threatening millions.
http://tinyurl.com/pv4wts3. Online; accessed
Nov-2013.
[4] android-apktool, a tool for reverse engineering android
apk ﬁles.
http://code.google.com/p/android-apktool/.
Online; accessed Nov-2013.
[5] Android torch app with over 50m downloads silently
sent user location and device data to advertisers.
http://tinyurl.com/mhfyv3r. Online; accessed
Nov-2013.
[6] Sanddroid - an automatic android program analysis
sandbox. http://sanddroid.xjtu.edu.cn/. Online;
accessed Nov-2013.
[7] Virustotal - free online virus, malware and url
scanner. https://www.virustotal.com/ note =
Online; accessed Nov-2013,.
[8] J. Crussell, C. Gibler, and H. Chen. Attack of the
clones: Detecting cloned applications on android
markets. In Computer Security–ESORICS 2012, pages
37–54. Springer, 2012.
[9] J. Crussell, C. Gibler, and H. Chen. Andarwin:
Scalable detection of semantically similar android
applications. In Computer Security–ESORICS 2013,
pages 182–199. Springer, 2013.
[10] B. Davis, B. Sanders, A. Khodaverdian, and H. Chen.
I-arm-droid: A rewriting framework for in-app
reference monitors for android applications. Mobile
Security Technologies, 2012, 2012.
[11] A. Desnos. Androguard: Reverse engineering, malware
and goodware analysis of android applications... and
more (ninja!).
[12] A. P. Felt, M. Finifter, E. Chin, S. Hanna, and
D. Wagner. A survey of mobile malware in the wild.
In Proceedings of the 1st ACM workshop on Security
and privacy in smartphones and mobile devices, pages
3–14. ACM, 2011.
[19] G. Suarez-Tangil, J. Tapiador, P. Peris-Lopez, and
A. Ribagorda. Evolution, detection and analysis of
malware for smart devices. 2013.
[13] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang.
[20] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium:
Riskranker: scalable and accurate zero-day android
malware detection. In Proceedings of the 10th
international conference on Mobile systems,
applications, and services, pages 281–294. ACM, 2012.
[14] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and
D. Song. Juxtapp: a scalable system for detecting
code reuse among android applications. In Detection
of Intrusions and Malware, and Vulnerability
Assessment, pages 62–81. Springer, 2013.
[15] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel,
N. Reddy, J. S. Foster, and T. Millstein. Dr. android
and mr. hide: ﬁne-grained permissions in android
applications. In Proceedings of the second ACM
workshop on Security and privacy in smartphones and
mobile devices, pages 3–14. ACM, 2012.
[16] K. Kennedy, E. Gustafson, and H. Chen. Quantifying
the eﬀects of removing permissions from android
applications.
[17] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner.
Addroid: Privilege separation for applications and
advertisers in android. In Proceedings of the 7th ACM
Symposium on Information, Computer and
Communications Security, pages 71–72. ACM, 2012.
[18] S. Shekhar, M. Dietz, and D. S. Wallach. Adsplit:
Separating smartphone advertising from applications.
CoRR, abs/1202.4030, 2012.
Practical policy enforcement for android applications.
In Proceedings of the 21st USENIX Security
Symposium, 2012.
[21] X. Zhang, A. Ahlawat, and W. Du. Aframe: Isolating
advertisements from mobile applications in android.
2013.
[22] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou.
Fast, scalable detection of piggybacked mobile
applications. In Proceedings of the third ACM
conference on Data and application security and
privacy, pages 185–196. ACM, 2013.
[23] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. Detecting
repackaged smartphone applications in third-party
android marketplaces. In Proceedings of the second
ACM conference on Data and Application Security
and Privacy, pages 317–326. ACM, 2012.
[24] Y. Zhou and X. Jiang. Dissecting android malware:
Characterization and evolution. In Security and
Privacy (SP), 2012 IEEE Symposium on, pages
95–109. IEEE, 2012.
[25] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, you,
get oﬀ of my market: Detecting malicious apps in
oﬃcial and alternative android markets. In
Proceedings of the 19th Annual Network and
Distributed System Security Symposium, 2012.