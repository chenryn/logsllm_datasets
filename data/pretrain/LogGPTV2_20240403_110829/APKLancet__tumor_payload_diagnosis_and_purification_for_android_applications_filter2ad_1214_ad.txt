### 优化后的文本

#### 代码片段
```java
sget-object v1, Lcom/geinimi/AdService;->a:Ljava/lang/String;
invoke-static {v1}, Ljava/lang/Class;->forName(Ljava/lang/String;)Ljava/lang/Class;
move-result-object v0
new-instance v1, Landroid/content/Intent;
invoke-direct {v1, p0, v0}, Landroid/content/Intent;-><init>(Landroid/content/Context;Ljava/lang/Class;)V
invoke-virtual {p0, v1}, Lcom/geinimi/AdActivity;->startActivity(Landroid/content/Intent;)V
```
该代码段证明了APKLancet的修复策略能够有效恢复原始入口点。

#### 4.4 案例研究III：AdMob和Flurry
在本小节中，我们将通过两个流行的第三方库（AdMob和Flurry）来说明APKLancet净化的有效性。尽管AdMob和Flurry是良性的第三方广告库，但攻击者可能会将它们注入到合法应用中以牟利。此外，这两个库是典型的全功能第三方广告库，因此非常适合用于展示切除过程并评估净化效果。

**AdMob净化案例**
- 应用包名：`com.xuecs.sqlitemanager`
- APKLancet在特征数据库中将`AdView`类列为索引类，并识别包含该索引类的整个`com.google.ads.*`包为肿瘤负载。
- APKLancet切除了所有从良性代码到肿瘤代码的方法调用和对象引用，包括3个具有相同模式的调用指令、1个对象引用以及良性代码中的几个进一步依赖的指令。

**Flurry净化案例**
- 应用包名：`com.electricsheep.dj`
- APKLancet通过将`FlurryAgent`类列为索引类来构建特征数据库，并识别`com.flurry.android.*`包为肿瘤负载。
- APKLancet搜索良性代码，找到与肿瘤负载相关的多个方法调用指令，包括`onStartSession`、`onEvent`、`onEndSession`等。

**资源文件中的问题**
Java类经常在资源文件（如布局XML或清单文件）中被引用。这类信息无法通过特征数据库检测到。例如，在`main.xml`文件中，AdMob的`AdView`元素可能被引用如下：
```xml
<com.google.ads.AdView ... />
```
为了解决这个问题，APKLancet不仅处理代码部分的引用，还处理资源部分的引用。资源文件的修补相对简单，因为APKLancet可以直接切除这类声明。

### 5. 限制
本文不关注已被广泛研究的应用重新打包检测[25]。重新打包检测的一个基本要求是需要知道原始应用的信息。实际上，没有一种适用于所有情况的方法来获取原始应用的信息。虽然APK的证书可以帮助识别其来源，但Android允许使用来自证书颁发机构的证书或自签名证书，因此仅凭证书无法完全信任一个APK。最佳实践建议Google Play是验证APK的可信来源，但即使是一些在Google Play上的APK也可能是其他应用的重新打包版本，并且并非所有应用都能在Google Play上找到。在中国，一些著名应用（如拥有超过5亿用户的微信）甚至无法从Google Play下载。因此，我们的APKLancet系统专注于肿瘤负载，而不管它是否是一个重新打包的应用。APKLancet采用拆分无关模块并切除它们的策略来确保安全性。

由于我们的工作不包括重新打包检测，我们并不区分第三方库（如广告库）是由原始开发者导入还是由恶意作者注入。我们认为，是否净化第三方库应由最终用户决定。APKLancet会基于所需的权限提示潜在不需要的广告库的存在，最终用户可以决定是否切除它。

我们的工作假设肿瘤代码作为模块嵌入，而不是紧密交织在宿主应用中。尽管这一假设在大多数情况下成立，但如果肿瘤代码作者谨慎地将肿瘤代码与良性功能绑定在一起，某些不良行为仍可能存在于应用中。然而，这种情况发生的频率较低，因为成本通常很高（无利可图的工作很少持续）。此外，我们根据特征数据库中的索引类来净化应用，因此一般不包含这些索引类的良性应用不会受到APKLancet的影响。

最后，本文不关注恶意软件的检测。APKLancet依赖于基于现有知识构建的肿瘤负载特征数据库，因此只能处理已分析的恶意肿瘤负载。由于APKLancet主要是一个基于静态分析的系统，它无法控制动态加载的代码。然而，APKLancet的目标只是净化包含不良代码的应用，使其可以再次使用。它采取保守策略，只处理可以净化的应用。这是一种简单但有效的方法，可以防止已知的恶意肿瘤负载。APKLancet可能无法完美净化所有肿瘤负载，但它有助于处理已知的肿瘤负载，并可以与其他访问控制系统协同工作以对抗其他未知的不良代码。

### 6. 相关工作
#### 6.1 恶意软件分析
先前关于肿瘤负载分析的工作主要集中在恶意代码分析上。已经开发了自动分析工具来帮助检测恶意代码，并采用了不同的评估方案。DroidRanger[25]通过使用基于权限的行为足迹和基于启发式的过滤方案来检测恶意应用。RiskRanker[13]进行大规模的安全风险分析，以实现零日恶意软件检测。研究人员还从安装方法、激活机制以及携带的恶意负载性质等方面系统地描述了Android恶意软件[24]。

我们的研究并不导致恶意软件检测。目的是借助现有的总结知识来切除肿瘤负载。一方面，恶意软件检测和分析对肿瘤负载识别有很大贡献；另一方面，我们的APKLancet系统关注肿瘤负载，其中不仅包含恶意代码，还包括潜在有风险的第三方库。它需要解决肿瘤负载净化和宿主应用修复带来的挑战。

我们的工作首次测量了肿瘤负载净化的有效性。尽管我们的工作依赖于现有的肿瘤代码知识，但我们认为大多数重新打包应用中的肿瘤负载并不是新的，尤其是其注入方式。

#### 6.2 重新打包检测
肿瘤负载检测和分析与检测重新打包的合法应用密切相关，后者通常被注入恶意负载。研究范围从成对比较到可扩展检测。DNADroid[8]通过比较程序依赖图来计算两个Android应用之间的相似性，以检测应用复制和克隆。DroidMOSS[23]通过应用模糊哈希技术测量应用的相似性，然后成对比较应用，系统地检测第三方Android市场中的重新打包应用。AnDarwin[9]采用可扩展的方法，而不是成对比较，基于语义信息检测相似的Android应用。PiggyApp[22]通过将应用的各种特征向量组织成度量空间并应用线性对数搜索算法，可扩展地检测搭便车的Android应用。先前的工作主要关注重新打包应用与其原始应用的相似性，而我们的工作假设目标系统不仅包含重新打包的应用，还包括由作者注入肿瘤负载的应用。在这种情况下，APKLancet可以在没有参考应用支持的情况下处理肿瘤负载。

#### 6.3 广告分割
Android应用中的广告存在争议。嵌入在应用中的广告库可能会将设备和用户信息发送到广告服务器，从而引发隐私担忧。研究表明，应该隔离广告，甚至将其与应用进程分离。AdSplit[18]扩展了Android，将广告与应用分离，并利用QUIRE的机制让远程服务器验证客户端行为的真实性。AFrame[21]提供了一种友好的方法，使开发者能够隔离不受信任的第三方代码，包括进程、权限、显示和输入隔离。AdDroid[17]引入了新的广告API和相应的广告权限，以将特权广告功能与宿主应用分离。所有这些方案都需要扩展Android系统，以将广告与宿主应用分离。相比之下，APKLancet不需要修改Android系统，也不会引入性能延迟。

#### 6.4 应用重写
许多细粒度权限控制系统使用应用重写技术来实现敏感API调用管理。Aurasium[20]重新打包应用，附加用户级沙箱和策略执行代码，以监控应用的安全和隐私违规行为。In-App Reference Monitors (I-ARM)[10]重写Dalvik字节码，以强制执行框架用户指定的一组安全敏感API方法的安全策略。Dr. Android[15]引入了一个新框架，通过添加更细粒度的权限来解决许多应用被允许比实际所需更广泛访问的问题。APKLancet也重写了应用，但不是添加插桩代码或额外库来监控应用行为，而是直接切除不良部分以强制执行访问控制策略，这更为简洁。

### 7. 结论
Android应用容易受到重新打包攻击，不良代码（肿瘤代码）捆绑已成为传播恶意行为的流行方式。鉴于Android APK中的肿瘤代码通常是特征明显的且相对独立的，有可能将其从原始APK中切除。本文提出了一种有效的肿瘤代码诊断和净化系统——APKLancet。它由三个组件组成：APK分析器、APK重写器和APK验证器，并通过四个阶段完成工作流程：1）基于现有知识数据库诊断肿瘤代码，2）将肿瘤负载从宿主应用中分区，3）切除肿瘤代码并恢复良性功能，4）验证应用的良性功能。APKLancet已应用于具有典型肿瘤负载的应用，我们的分析表明，通过应用净化来防御不良行为是可行的。

### 8. 致谢
本研究得到了国家自然科学基金（No.61103040）、国家科技重大专项（Grant No.2012ZX03002011）和技术创新项目上海市科学技术委员会（No.13511504000）的支持。我们也感谢SandDroid[6]的作者Wenjun Hu提供了宝贵的恶意软件样本。

### 9. 参考文献
[略]

希望这些改进能使你的文档更加清晰、连贯和专业。如果有任何进一步的需求，请告诉我！