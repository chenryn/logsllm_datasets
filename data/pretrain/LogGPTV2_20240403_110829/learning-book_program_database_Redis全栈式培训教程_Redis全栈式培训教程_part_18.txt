---
## Page 217
12.6.3.
线上置换从节点
序号
端口号
说明
1
6381(主)
2
6382(主)
3
6383(主)
RedisCluster集群环境(3主3从)
6384(从)
5
6385(从)
6
6386(从)
7
6388(从)
目标从节点
1.
删除从节点
redis-c1ia 123456
-c1uster de1node 192. 168. 128. 167:6386 1455c48427c738df51fc899dcf5db59c23d8cf12
2.
增加从节点：
redisc1i a 123456 cluster addnode 192. 168. 128. 167:6388 192. 168. 128. 167:6381 clusterslave clustermasterid
09ae8c132bb78f18217d240da6f4b0a10310caeb
春风阁讲堂出品
217
---
## Page 218
12.6.4.
线上置换主节点
序号
端口号
说明
1
6381(主)
2
6382(主)
3
6383(主)
6384(从)
RedisCluster集群环境(3主3从)
5
6385(从)
6
6388(从)
7
6387(主）
目标主节点
1.
加入主节点
redis-cli -a 123456
c1uster addnode 192. 168. 128. 167:6387 192. 168. 128. 167:6381
2.迁移数据
redisc1i -a 123456 c1uster reshard 192. 168. 128. 167:6381 -clusterfrom d5b1a396962b347e0c452613aa167c58a0bbcedc c1usterto
b6946d79013976f8128d1af8d80f4e9aa944511a --c1uster-s1ots 5462 --c1uster-yes -c1usterreplace
3.
删除从节点
6383节点将数据全部迁移至6387的时候，会自动降为6387的从节点，这时候我们只要删除6383节点，就完成主节点置换
春风阁讲堂出品
218
---
## Page 219
12.7.Redis的故障与恢复
12.7.1.Redis数据丢失场景
由于Redis的主从之间采用的是异步复制，因此Redis在高并发写入时出现故障，有可能会导致数据丢失
1.异步复制丢失
对于Redis主节点与从节点之间的数据复制，是异步复制的，当客户端发送写请求给master节点的时候，客户端会返回OK，然后同步到各个slave
节点中。如果此时master还没来得及同步给slave节点时发生宕机，那么master内存中的数据会丢失：
就算master中开启持久化设置数据也不可以保证不丢失。在master发生宕机后，Redis集群会重新选取新master，而新master不会从原来的master
同步数据
2.集群产生脑裂
假设redis集群有多台设备，一主多从，比如master与其他的slaves的网络连接出现故障了，这里Redis会自行选举出一个新的master出来，所
来的master节点降级为salve，而在网络尚未恢复期期间，新的数据写入仍然是基于原来的master的，那么网络恢复后，原来的master降级为slave
后它的新增的那些数据也将会丢失
Redis数据丢失的优化方案
min-replicas-to-write1#表示主节点至少要有一个slave连接时才可写
min-replicas-max-lag 10#表示 salve的与master的同步复制延迟不能超过10s
通过这两个参数，我们可以避免在发生故障时大量的数据丢失，起到一个优化作用
春风阁讲堂出品
219
---
## Page 220
12.7.2.不同模式故障恢复
Redis架构模式
故障场景
是否影响业务
恢复说明
主从模式
从节点故障
否
1、搭建新节点S1
2、S1重新与原主建立主从关系
主从模式
主节点故障
是
1、原从升为主
2、搭建新节点S1
3、S1重新与原从(新主）建立主从关系
哨兵模式
从节点故障
否
1、搭建新节点SI
2、S1重新与原主建立主从关系
哨兵模式
主节点故障
否
1、搭建新节点S1
2、S1重新与原从（新主）建立主从关系
集群模式
从节点故障
否
1、搭建新节点S1
2、S1重新与原从（新主）建立主从关系
集群模式
主节点故障
否
1、搭建新节点SI
2、S1重新与原从（新主）建立主从关系
春风阁讲堂出品
220
---
## Page 221
12.8.运维常用命令
12.8.1.命令集1
名称
命令格式
注释说明
启动命令
redis-server
$ {REDIS_HOME)/conf/redis6379. conf
启动命令
停止命令
redisc1i shutdown
关闭并且生成dump.rdb文件
停止命令
redis-cli shutdown save
关闭并且生成dump.rdb文件
停止命令
rediscli shutdown nosave
关闭并且不生成dump.rdb文件
连接命令
redis-cli
默认连接本机端口为6379的Redis进程
连接命令
redis-cli -h xxx. xx. x. xx -p port
连接时指定IP和端口，可远程连接
连接命令
redisc1i
1.tod d xx 'x 'xx 'xxx 4 p.roMssed 
连接时指定密码连接
连接命令
redis-cli
1tod d xx 'x 'xx *xxx 4 xxx ssed xx uosn-
连接带密码的acl用户
连接命令
31tod d xx x xx 'xx 4 p.xomssed e 1Iosipo.
开户集群模式连接（会自动重定向）
执行命令
get a0
执行命令（交互式），先连接，再执行命令
执行命令
redis-cli get a0
执行命令(无交互式），连接命令+执行命令
中文显示
redisc1i
--raw get a0
get显示中文
清空数据
rediscli flushdb
清空当前数据库
清空数据
rediscli flushal1
清空所有数据库
查看配置
rediscli config get dbfiname
查看实时配置
修改配置
redis-cli config set maxmemory
实时修改配置
查看key
redis-cli dbsize
查看key的数量
春风阁讲堂出品
221
---
## Page 222
12.8.2.命令集2
名称
命令格式
注释说明
保存rdb
redis-cli save
保存rdb时会阻塞
保存rdb
redis-cli bgsave
保存rdb时不会阻塞
重写aof
bgrewriteaof
重写aof文件
上次保存时间
lastsave
上次保存时间
设置为从
slaveof
设置为从服务器
慢日志查询
slowlog get 10
慢日志查询
查看最近耗时
redis-cli
--csv latency latest
查看最近耗时
打开监控
redis-cli monitor
可以监控redis命令并写文件
查询统计信息
查询服务器信息
redis-cli info
Server, Clients, Memory, Persistence, Stats, Replication, CPU
主从同步命令
redis-cli sync
主从同步命令
客户端列表
rediscli client list
客户端列表
kill连接
rediscli client ki11
kill连接
春风阁讲堂出品
222
---
## Page 223
13.Redis数据导入与导出
13.1.导入导出方法列表
序号
名称
迁移内容
说明
1
rdb/aof导入导出
全库迁移
快捷简单
2
resp 协议方式（string)
部分迁移
只适用于string类型，可读性强
3
resp协议方式（通用)
部分迁移
适用场景广泛
区
pipline方式
部分迁移
适用场景广泛，导入快
6
migrate在线迁移
部分迁移
网络必须互通
7
集群在线迁移
全库迁移
集群下操作简单
效率上全库迁移>部分迁移，管道方式>普通方式
2.
部分迁移我们推荐使用resp协议+pipline相结合
春风阁讲堂出品
223
---
## Page 224
13.2.resp协议方式（string）
13.2.1.核心原理
1.准备test.txt文件，内容格式如下
set al al
set a2 a2
2.核心导入命令：
cat test.txt | redis-cli -h 127.0.0.1 -p 6379
这里我们能看出什么？
我们可以采用这种数据格式，进行数据批量导入
同理，我们将也采用这种方式进行数据导出
春风阁讲堂出品
224
---
## Page 225
13.2.2.导出脚本
采用shell脚本进行演示，源码参考脚本工程export-resp.sh
#1/bin/sh
#进入文件目录
cddirname $0
#将redis中所有key暂存至文件
redis-cli keys
"*">allkeys.txt
echo ''> allvalues.txt
sum=0
for key incat allkeys.txt'; do
#循环处理每一个key
value=redis-cli get $key
echo set ${key} ${value} >> allvalues.txt
sum=$((sum+1))
if["$（（sum%1000))"="0"];then
echo"处理数据$（（sum/1000））千"
fi
done
生产上可采用其它语言写入文件来提高效率，执行效果如下：
[xiangsl@crm167 resp]s sh export-resp.sh
处理数据1千
处理数据2千
处理数据3千
处理数据4千
处理数据5千
处理数据6千
处理数据7千
处理数据8千
处理数据9千
处理数据10丰
春风阁讲堂出品
225
---
## Page 226
13.2.3.导入脚本
采用shell脚本进行演示，源码参考脚本工程import-resp.sh
#1/bin/sh
#进入文件目录
dirname $0
cat allvalues.txt|redis-cli
sum='cat allvalues.txt|wc -l*
echo“导入完毕，条数：${sum}
春风阁讲堂出品
2.26
---
## Page 227
13.3.resp协议方式（通用）
13.3.1.核心原理
我们来看这么一个实例
127.0.0.1:6379> set a 1
OK
127.0.0.1:6379> dump a
x00xc0x01nx00&xxe7xb6xd1`x01x11xfc
127.0.0.1:6379> del a
(integer) 1
OK
127.0.0.1:6379> get a
I
127.0.0.1:6379>
这里我们能看出什么？
如果说我们把resp的格式dump/restore来表达，是不是能能进行数据恢复了？
dump/restore该命令常用来作数据迁移，其它很多第三方工具都是基于此命令来做的
春风阁讲堂出品
227
---
## Page 228
13.3.2.导出脚本
采用shell脚本进行演示，源码参考脚本工程export-cresp.sh
#1/bin/sh
#进入文件目录
cddirname $0
#将redis中所有key暂存至文件
redis-cli keys
> allkeys1.txt
echo''>allvalues1.txt
sum=0
for key in *cat allkeys1.txt'; do
#循环处理每一个key
value=*redis-cli
--no-raw dump $key
sum=$((sum+1))
if["$（（sum%1000）)"="0"];then
echo"处理数据$（（sum/1000））千"
fi
done
生产上可采用其它语言写入文件来提高效率，执行效果如下：
[xiangsl@crm167resp]s sh export-cresp.sh
处理数据1千
处理数据2千
处理数据3千
处理数据4丰
处理数据5千
处理数据6干
处理数据7千
处理数据8千
处理数据9千
处理数据10千
春风阁讲堂出品
---