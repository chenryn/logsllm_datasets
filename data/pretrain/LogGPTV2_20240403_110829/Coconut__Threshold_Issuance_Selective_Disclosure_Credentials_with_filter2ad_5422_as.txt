as the authorization key for the credential.
IV.
IMPLEMENTATION
We implement a Python library for Coconut as described
in Section III and publish the code on GitHub as an open-
source project5. We also implement a smart contract library
in Chainspace [1] to enable other application-speciﬁc smart
contracts (see Section V) to conveniently use our cryptographic
primitives. We present the design and implementation of the
Coconut smart contract library in Section IV-A. In addition, we
implement and evaluate some of the functionality of the Co-
conut smart contract library in Ethereum [53] (Section IV-B).
Finally, we show how to integrate Coconut into existing semi-
permissioned blockchains (Section IV-C).
A. The Coconut Smart Contract Library
We implement the Coconut smart contract in Chainspace6
(which can be used by other application-speciﬁc smart con-
tracts) as a library to issue and verify randomizable threshold
credentials through cross-contract calls. The contract has four
(Create, Request, Issue, Verify), as illustrated
functions,
the Create
in Figure 3. First, a set of authorities call
function to initialize a Coconut instance deﬁning the contract
info; i.e., their veriﬁcation key, the number of authorities and
the threshold parameter (). The initiator smart contract can
specify a callback contract that needs to be executed by the
user in order to request credentials; e.g., this callback can be
used for authentication. The instance is public and can be read
by the user (); any user can request a credential through the
Request function by executing the speciﬁed callback contract,
and providing the public and private attributes to include in
4Let assume for example that some credentials include a single attribute m
representing the age of the user; the veriﬁer can run the veriﬁcation algorithm
e(h, κ(α · βm)−1) = e(ν, g2) for every m ∈ [1, 100] and guess the value
of m.
5https://github.com/asonnino/coconut