title:A Machine-learning Approach for Classifying and Categorizing Android
Sources and Sinks
author:Siegfried Rasthofer and
Steven Arzt and
Eric Bodden
A Machine-learning Approach for Classifying and
Categorizing Android Sources and Sinks
Siegfried Rasthofer & Steven Arzt
Secure Software Engineering Group
{ﬁrstname.lastname}@ec-spride.de
EC SPRIDE, Technische Universit¨at Darmstadt
Fraunhofer SIT & Technische Universit¨at Darmstadt
Eric Bodden
Secure Software Engineering Group
PI:EMAIL
Abstract—Today’s smartphone users face a security dilemma:
many apps they install operate on privacy-sensitive data, although
they might originate from developers whose trustworthiness is
hard to judge. Researchers have addressed the problem with
more and more sophisticated static and dynamic analysis tools
as an aid to assess how apps use private user data. Those tools,
however, rely on the manual conﬁguration of lists of sources of
sensitive data as well as sinks which might leak data to untrusted
observers. Such lists are hard to come by.
We thus propose SUSI, a novel machine-learning guided
approach for identifying sources and sinks directly from the code
of any Android API. Given a training set of hand-annotated
sources and sinks, SUSI identiﬁes other sources and sinks in
the entire API. To provide more ﬁne-grained information, SUSI
further categorizes the sources (e.g., unique identiﬁer, location
information, etc.) and sinks (e.g., network, ﬁle, etc.).
For Android 4.2, SUSI identiﬁes hundreds of sources and
sinks with over 92% accuracy, many of which are missed by
current information-ﬂow tracking tools. An evaluation of about
11,000 malware samples conﬁrms that many of these sources
and sinks are indeed used. We furthermore show that SUSI
can reliably classify sources and sinks even in new, previously
unseen Android versions and components like Google Glass or
the Chromecast API.
I.
INTRODUCTION
Current smartphone operating systems, such as Android or
iOS, allow users to run a multitude of applications developed
by many independent developers available through various app
markets. While this ﬂexibility is very convenient for the user,
as one will ﬁnd a suitable application for almost every need,
it also makes it hard to determine the trustworthiness of these
applications.
Smartphones are widely used to store and process highly
sensitive information such as text messages, private and business
contacts, calendar data, and more. Furthermore, while a large
variety of sensors like GPS allow a context-sensitive user
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1) Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:17)(cid:20)(cid:26)
experience, they also create additional privacy concerns if used
for tracking or monitoring.
To address this problem, researchers have proposed various
analysis tools to detect and react to data leaks, both statically
[1]–[13] and dynamically [14]–[17]. Virtually all of these tools
are conﬁgured with a privacy policy, usually deﬁned in terms
of lists of sources of sensitive data (e.g., the user’s current
location) and sinks of potential channels through which such
data could leak to an adversary (e.g., a network connection). As
an important consequence, no matter how good the tool, it can
only provide security guarantees if its list of sources and sinks
is complete. If a source is missing, a malicious app can retrieve
its information without the analysis tool noticing. A similar
problem exists for information written into unrecognized sinks.
This work focuses on Android. As we show, existing
analysis tools, both static and dynamic, focus on a handful of
hand-picked sources and sinks, and can thus be circumvented by
malicious applications with ease. It would be too simple, though,
to blame the developers of those tools. Android’s version 4.2,
for instance, comprises about 110,000 public methods, which
makes a manual classiﬁcation of sources and sinks clearly
infeasible. Furthermore, each new Android version includes new
functionality (e.g., NFC in Android 2.3 or Restricted Proﬁles
in the brand-new Android 4.3) which often also leads to new
sources and sinks. This shows that a manual identiﬁcation
of sources and sinks is impractical. It would impose a high
workload on the analyst and would have to be done again for
every new Android version. Additionally, hand-picking is an
error-prone task.
We therefore propose SUSI, an automated machine-learning
guided approach for identifying sources and sinks directly from
the code of an Android API. We have identiﬁed both semantic
and syntactic features to train a model for sources and sinks on
a small subset of hand-classiﬁed Android API methods. SUSI
can then use this model to classify arbitrarily large numbers
of previously unknown Android API methods. In the Android
4.2 operating system, SUSI ﬁnds several hundred sources and
sinks, only a small fraction of which were previously known
from the scientiﬁc literature or included in conﬁgurations of
available analysis tools.
While SUSI is not able to identify each and every source
or sink,
it resembles a practical best-effort solution that
solves the problem to a large extent, which is a substantial
improvement over existing hand-picked sets. In cross-validation,
SUSI achieves a precision and recall of over 92%, which means
that the use of SUSI to identify sources and sinks greatly
reduces (though not completely eliminates) the risk of missing
sensitive data ﬂows when used for conﬁguring information-ﬂow
tracking tools. To evaluate how well SUSI predicts sources and
sinks outside the training set, we applied SUSI’s model to the
Google Mirror API [18] that can be used for the communication
between Google Glass [19] and an Android smartphone. We
also applied SUSI to the Google Cast API [20] which is used
for screen-sharing between smartphones and televisions, in
particular using the new Chromecast device. Manual validation
of SUSI’s results on these new APIs shows an average precision
and recall of over 98% for both Google Cast and Google Mirror.
An evaluation of 11,000 malware samples from Virus Share [21]
shows that malware does cause data leaks using Android API
methods recognized as sources or sinks by SUSI, but missed
by existing static and dynamic taint analysis tools including
TaintDroid [14] or SCanDroid [5] (more details in Section
V-C).
SUSI is the ﬁrst dedicated approach to detecting sources
and sinks. Due to missing lists of sources and sinks, some
code-analysis approaches (for instance LeakMiner [3]) so far
consider those methods as sources and sinks that require a
permission to execute. These methods can be identiﬁed using
a permission map which can be created either statically [22],
[23] or dynamically [24]. As we show in this work, permission
lists are a less than optimal heuristic for detecting sources and
sinks: many methods called in the control-ﬂow of permission
checks are neither sources nor sinks, and even worse some
calls to methods that are sources or sinks are not protected
by permission checks. As an example, SUSI identiﬁes as
source the unprotected getNetworkOperatorName() method in
the TelephonyManager class, which returns the name of the
network operator or carrier. Our study reveals malware samples
that use this method for reading out the network operator name
and sending it to a malicious server. Furthermore, permission
checks are scattered over several layers of the Android operating
system. The Internet permission, for instance, is checked in
native code while most other permissions are enforced in the
middleware. Fortunately, as our work shows, the implementation
of the Android API on the middleware layer reveals clues that
help identify sources and sinks much better than by just using
permission checks.
Awareness of sources and sinks is highly useful but if a
leak is found, the user often desires additional information
on what information has leaked where, for instance location
information to the Internet. SUSI thus further classiﬁes the
identiﬁed sources and sinks into 12 source categories and 15
sink categories. The categorization shows that there is often
more than one way to retrieve a certain piece of data, and that
there are multiple ways to send it out to an attacker since all
categories contain more than a single method.
This paper presents the following original contributions:
•
•
a practical and precise deﬁnition of data sources and
sinks in Android applications,
an automated, machine-learning based approach for
identifying data source and sink methods in the
Android framework, even in case of new, previously
unseen Android versions and variants,
•
•
a classiﬁer for data source and sink methods into
semantic categories like network, ﬁles, contact data,
etc., and
a categorized list of sources and sinks for different
Android versions, as well as the Google Mirror and
Google Cast APIs. The list can be directly used by
existing static and dynamic analysis approaches.
Our complete implementation is available as an open-source
project at:
https://github.com/secure-software-engineering/SuSi
The remainder of this paper is structured as follows.
Section II presents a motivating example, while Section III
gives a precise deﬁnition of the notions of sources and sinks.
Section IV presents the classiﬁers, which we evaluate in
Section V. Section VI discusses other sources of sensitive
information that are not directly related to method calls. In
Section VII we give an overview of related work. Section VIII
concludes.
II. MOTIVATING EXAMPLE
As mentioned earlier, comprehensive lists of sources and
sinks are hard to come by. As a consequence, lists of sources
and sinks known from the scientiﬁc literature [4], [5], [14] only
contain a few well-known Android API methods for obtaining
and sending out potentially sensitive information. (Section VI
gives detailed information about the current state of the art.)
However, there are often multiple ways to achieve the same
effect. Developers of malicious applications can thus choose
less well known sources and sinks to circumvent analysis tools.
Let us assume an attacker is interested in obtaining the user’s
location information and writing it to a publicly accessible
ﬁle on the internal storage without being noticed by existing
program-analysis approaches.
Listing 1 shows an example that attempts to disguise a data
leak by using less common methods for both the source and
the sink. In our scenario, we have two source methods. Firstly,
line 9 calls getCid(), returning the cell ID. Line 11 then calls
getLac(), returning the location area code. Both pieces of data
in combination can be used to uniquely identify the broadcast
tower servicing the current GSM cell. While this is not an exact
location, it nevertheless provides the approximate whereabouts
of the user. In line 12 the code checks for a well-known
cell-tower ID in Berlin, Germany. An actual malicious app
would perform a lookup in a more comprehensive list. Finally,
the code needs to make the data available to the attacker. The
example creates a publicly accessible ﬁle on the phone’s internal
storage, which can be accessed by arbitrary other applications
without requiring any permissions. Instead of employing Java’s
normal ﬁle writing functions, the code uses a little-known
Android system function (line 17) which SUSI identiﬁes as
a “FILE” sink but which is normally hidden from the SDK:
the FileUtils.stringToFile function can only be used if the
application is compiled against a complete platform JAR ﬁle
obtained from a real phone, as the android.jar ﬁle supplied with
the Android SDK does not contain this method. Nevertheless,
the example application runs on an unmodiﬁed stock Android
phone.
2
1 void onCreate() {
2 TelephonyManager tm; GsmCellLocation loc;
3 // Get the location
4 tm = (TelephonyManager) getContext().
5
getSystemService
(Context.TELEPHONY_SERVICE);
6 loc = (GsmCellLocation)
tm.getCellLocation();
7
8 //source: cell-ID
9 int cellID = loc.getCid();
10 //source: location area code
11 int lac = loc.getLac();
12 boolean berlin = (lac == 20228 && cellID
== 62253);
13
14 String taint = "Berlin: " + berlin + " ("
+ cellID + " | " + lac + ")";
15 String f = this.getFilesDir() +
"/mytaintedFile.txt";
16 //sink
17 FileUtils.stringToFile(f, taint);
18 //make file readable to everyone
19 Runtime.getRuntime().exec("chmod 666 "+f);
20 }
Listing 1. Android Location Leak Example
This example is, at least for the source methods, a represen-
tative example for malware [21] we inspected. We have tested
this example with publicly-available static and dynamic taint
analysis tools including Fortify SCA [4], SCanDroid [5], IBM
AppScan [13] and TaintDroid [14] and conﬁrmed that none
of these tools detected the leak. This shows how important it
is to generate a comprehensive list of sources and sinks for
detecting malicious behavior in deceptive applications. SUSI
discovers and classiﬁes appropriately all sources and sinks used
in the example.
III. DEFINITION OF SOURCES AND SINKS
Before one can infer sources and sinks, one requires a
precise deﬁnition of the terms “source” and “sink”. Several
publications in the area of taint and information-ﬂow analysis
discuss sources and sinks, but all leave open the precise
deﬁnitions of these terms. For instance, Enck et al. [14] deﬁne
sinks informally as “data that leaves the system” which is,
however, too imprecise to train a machine-learning based
classiﬁer; such classiﬁers are only as good as their training
data.
Taint and information-ﬂow analysis approaches track
through the program the ﬂow of data. Sources are where such
data ﬂows enter the program and sinks are where they leave
the program again. This requires us to ﬁrst deﬁne data in the
context of data ﬂows in Android applications.
Deﬁnition 1 (Data): A piece of data is a value or a
reference to a value.
For instance, the IMEI in mobile applications is a piece of
data, as would be the numerical value 42. We also treat as data,
for instance, a database cursor pointing to a table of contact
3
records, since it directly points to a value and is thus equivalent
in terms of access control.
In taint tracking, one monitors the ﬂow of data between
resources such as the ﬁle system or network. Conversely, due
to Android’s app isolation, data that is simply stored in the
app’s address space is not of interest. Before one can deﬁne
sources and sinks, one must therefore deﬁne the notion of a
resource method. Mobile operating systems like Android enable
applications to access resources using predeﬁned methods.
While one could also imagine ﬁelds being used for resource
access, we found this not to be the case with Android.
Deﬁnition 2 (Resource Method): A resource method reads
data from or writes data to a shared resource.
For instance, the operating system method for reading the
IMEI (getDeviceId() in class TelephonyManager) is a resource
method. In this case, the phone’s hardware itself is the resource
as the IMEI is branded into the silicon. The sendTextMessage()
method in class SmsManager is a resource method for sending
text messages to a speciﬁc phone number. The resource is the
GSM network.
Note that a writing resource method does not necessarily
need a reading counterpart. In our deﬁnition, there is no
restriction on how the data is shared. A writing resource method
might, for instance, send out data over the network (which is
a resource). Though another application cannot directly obtain
this data through a simple method call, the data can easily be
sniffed from the network and is thus shared. Data leaving the
phone is thus always considered shared.
After deﬁning data and resource methods we can now deﬁne
sources and sinks in the context of Android applications:
Deﬁnition 3 (Android Source): Sources are calls into re-
source methods returning non-constant values into the applica-
tion code.
The getDeviceId() resource method is an Android source. It
returns a value (the IMEI) into the application code. The IMEI
is considered non-constant as the method returns a different
value on every phone. Looking at the source code alone does
not reveal this value. In contrast, a function that just reads a
ﬁxed constant from a database is a resource method but, by
our deﬁnition, is not an Android source.
Note that our deﬁnition of sources does not make any
restrictions on whether the data obtained from a source is
actually private. SUSI will thus, at ﬁrst, report sources of non-
private data as well. However, in a second step SUSI then
applies a further categorization which partitions sources into
different categories of private data. This partitioning includes a
class NO CATEGORY, which represents sources of non-private
data, which privacy-analysis tools can ignore. Details will be
given in Section IV.
Deﬁnition 4 (Android Sinks): Sinks are calls into resource
methods accepting at least one non-constant data value from
the application code as parameter, if and only if a new value
is written or an existing one is overwritten on the resource.
The sendTextMessage() resource method is an Android sink
as both the message text and the phone number it receives are