Here, you can see that both the tasks we created earlier in the chapter have been run—only
this time, they have been run on a pair of remote systems using the native SSH
communication protocol. As SSH is normally enabled on most Linux servers, this
immediately gives us massive scope for expanding our automation—this example has been
performed on an inventory containing just two hosts, but it could just have easily contained
200 or more hosts.
Note that the tasks are still run in sequential order as before—only this time, each task is
now run to completion on all hosts in the inventory before the next task is attempted, again
making our playbook flow very predictable and easy to manage.
[ 38 ]
Automating Your IT Infrastructure with Ansible Chapter 2
If we set up SSH keys for the remote hosts, then the --ask-pass parameter is no longer
necessary, and the playbook runs without any interaction from the user, which is most
desirable for many automation scenarios:
SSH keys, while more secure than passwords, do bring their own risks,
especially if the keys are not encrypted with a password. In this case,
anyone who gets hold of an unencrypted private key will be able to gain
remote access to any system with the matching public key, without any
further prompt or challenge. If you do go down the route of setting up
SSH keys, be sure you understand the security implications.
Let's run through a simple process to generate an SSH key and configure it on our test
systems for Ansible to authenticate against:
1. To set up a very simple SSH key-based access on our test hosts, we could run the
following command from the Ansible host to create the key pair (do not do this if
you already have a key pair, as you could overwrite it!):
$ ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ''
2. This command silently creates a 2048-bit RSA key in the file at ~/.ssh/id_rsa,
with no passphrase (hence unencrypted). The corresponding public key to be
copied to remote systems will be created as ~/.ssh/id_rsa.pub (that is, the
same filename and path specified by -f, with .pub appended). Now, copy it to
the two remote hosts, using the following commands (you will be prompted for
your SSH password both times):
$ ssh-copy-id testhost1
$ ssh-copy-id testhost2
3. Finally, we can run our playbook just as we did before, but without the --ask-
pass flag, as shown in the following screenshot:
[ 39 ]
Automating Your IT Infrastructure with Ansible Chapter 2
The difference, as you can see, is subtle but hugely important—no user intervention was
required, meaning our simple playbook suddenly has massive scale across an environment
of virtually any size.
Although here, we have taken advantage of the fact that Ansible will read (by default) the
SSH private keys that are found in the .ssh directory for the user account in question, you
are not limited to using these keys. You can specify a private key file manually by using
the ansible_ssh_private_key_file host variable in the inventory, or you can use ssh-
agent to make different private SSH keys available to Ansible in the current shell session.
[ 40 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Doing this is left as an exercise for you to complete, and the following pages from the
official Ansible documentation will assist you with this:
For an introduction to using ssh-agent with Ansible, please refer
to https://docs.ansible.com/ansible/latest/user_guide/connection_detai
ls.html.
For an introduction to the inventory host variables available in Ansible,
including ansible_ssh_private_key_file, please refer to https:/​/​docs.
ansible.​com/​ansible/​latest/​user_​guide/​intro_​inventory.​html.​
Of course, you don't need to perform all tasks on remote systems as the current user—you
can use the --user (or -u) flag with ansible-playbook to specify a user to be used across
all hosts in the inventory, or you can even use the ansible_user host variable within the
inventory itself to specify user accounts on a per-host basis. Obviously, you should try to
avoid a scenario such as this, as it goes against the principle of commonality that we
discussed in Chapter 1, Building a Standard Operating Environment on Linux, but the
important thing to note is that Ansible offers huge flexibility and opportunity to customize.
It scales incredibly well in SOEs, but where there are deviations, it is easy to get Ansible to
adapt without difficulty.
We will go into variables in greater detail later in this chapter, but it is worth mentioning at
this stage that inventories can also contain variables. These can either be user-created
variables or special variables, such as the aforementioned ansible_user. Extending our
simple inventory from this chapter, if we wanted to set the SSH user to bob and create a
new user-defined variable called http_port for use later in a playbook, our inventory
might look like this:
[test]
testhost1
testhost2
[test:vars]
ansible_user=bob
http_port=8080
That covers the basics of inventories that you will need to know to get started with Ansible
and to proceed with this book. Hopefully, you are starting to get an idea of the low barrier
to entry presented to new users by Ansible that has made it so popular.
[ 41 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Understanding roles in Ansible
As easy as Ansible is to get started with, and as readable as a playbook is when it is short, it
does get more complex, as do the requirements. In addition, there are certain functions that
may well be needed repeatedly in different scenarios. For example, you might need to
deploy a MariaDB database server as a common task in your environment. A module
called apt is used for managing packages on Ubuntu servers, and so, if we wanted to
install the mariadb-server package on our test system, the playbook to perform this task
could look like this:
---
- name: Install MariaDB Server
hosts: localhost
become: true
tasks:
- name: Install mariadb-server package
apt:
name: mariadb-server
update_cache: yes
Note that this time, we have set become to true, as we need root privileges to install
packages. This is, of course, a very simple example, as installing a database server normally
requires a great deal more configuration work, but it serves as a starting point. We could
run this on our test system, and yield the desired result, as follows:
[ 42 ]
Automating Your IT Infrastructure with Ansible Chapter 2
So far, so good. If you had to do this on a routine basis, though, in different playbooks for
different hosts, would you really want to be writing (or, indeed, copying and pasting) that
tasks block from this example over and over again? Also, this example is simplistic, and in
reality, the database deployment code would be far more complex. If someone makes a fix
or improvement in the code, how do you ensure that this new revision of code is
propagated into all the right places?
This is where roles come in, and an Ansible role, while in essence nothing more than a
structured set of directories and YAML, enables efficient and effective reuse of code. It also
makes the initial playbook easier to read, as we shall see shortly. Once roles are created,
they can be stored in a central location, such as a version control repository (for example,
GitHub), and then, the latest version can always be accessed whenever a playbook needs to
install MariaDB.
Roles are (by default) run from a subdirectory called roles/, in the same directory as your
playbook. Throughout this book, we will use this convention, though it must be stated that
Ansible will also search for roles in /etc/ansible/roles and the paths specified by the
roles_path parameter in the Ansible configuration file (which, by default, can be found in
/etc/ansible/ansible.cfg, though there are ways to override this). Each role then has
its own subdirectory under this, and that directory name forms the name of the role. Let's
explore this through a simple example, as follows:
1. We will get started by creating a roles/ directory, and an install-
mariadb/ directory under this, for our first role:
$ mkdir -p roles/install-mariadb
2. Each role has a fixed directory structure under it; however, for our simple
example, we are only interested in one: tasks/. The tasks/ subdirectory of a
role contains the main list of tasks that will be run when the role is called, in a file
called main.yml. Let's create that directory now, as follows:
$ cd roles/install-mariadb
$ mkdir tasks
$ vi tasks/main.yml
[ 43 ]
Automating Your IT Infrastructure with Ansible Chapter 2
3. Naturally, you can use your preferred editor in place of vi. In the main.yml file,
enter the following code—note that it is essentially the tasks block from the
original playbook, but the indentation level has now changed:
---
- name: Install mariadb-server package
apt:
name: mariadb-server
update_cache: yes
4. Once we have created this file, we then edit our original install-
db.yml playbook so that it looks like this:
---
- name: Install MariaDB Server
hosts: localhost
become: true
roles:
- install-mariadb
Notice how much more compact the playbook is now! It is also a great deal easier to read,
and yet if we run it, we can see that it performs the same function. Note how the state of the
MariaDB server installation task was changed last time we ran it but is now ok. This means
that Ansible detected that the mariadb-server package was already installed, and hence
no further action was required. This is an example of the previously mentioned idempotent
change in action, as can be seen in the following screenshot:
[ 44 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Well done! You have created and executed your first role. If you want to read more about
roles and the required directory structure, please refer to https:/​/​docs.​ansible.​com/
ansible/​latest/​user_​guide/​playbooks_​reuse_​roles.​html.
There's even more to roles than this—not only are they invaluable in structuring your
playbooks and enabling reuse of code; there is also a central repository for community-
contributed roles, called Ansible Galaxy. If you search Ansible Galaxy for MariaDB-related
roles, you will find (at the time of writing) 277 different roles, all designed to perform
various database installation tasks. This means that you don't even have to write your own
roles for common tasks—you can either make use of community-contributed ones or fork
them, and modify them to your own ends. Most common server automation tasks have
already been solved somewhere along the way by the Ansible community, and so it is very
likely you will find exactly what you are looking for.
Let's test this now, as follows:
1. First, install a role from Ansible Galaxy that installs MariaDB server on Ubuntu:
$ ansible-galaxy install -p roles/ mrlesmithjr.mariadb-mysql
2. Now, we will modify our playbook to reference this role instead:
---
- name: Install MariaDB Server
hosts: localhost
become: true
roles:
- mrlesmithjr.mariadb-mysql
3. That's all that is required—if we run it, we can see that this playbook performs
many more tasks than our simple one, including a lot of the security setup that is
good practice when installing a new database, as can be seen in the following
screenshot:
[ 45 ]
Automating Your IT Infrastructure with Ansible Chapter 2
The end result, however, is that the mariadb-server package is installed on our test
system—and this time, we barely even had to write any code! It is advisable, of course, to
check what a role from Ansible Galaxy is going to do before blindly running it on your
systems, in case it makes changes that you hadn't expected (or wanted!). Nonetheless, roles,
in conjunction with Ansible Galaxy, form a powerful addition to the value that Ansible has
to offer.
With an understanding of roles under our belts, in the next section, we will look at an
important concept to help you get the most out of your playbooks and roles by making
their content dynamic: Ansible variables.
[ 46 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Understanding Ansible variables
Most of the examples we have looked at so far have been static in nature. This is fine for the
simplest playbook examples, but in many cases, it is desirable to be able to either store
values or define them easily in a central place, rather than having to go hunting through a
playbook (and tree of roles) for a specific hardcoded value. As in other languages, it is also
desirable to capture values somehow, for reuse later.
There are many different types of variables in Ansible, and it is important to know that they
have a strict order of precedence. Although we won't encounter this much in this book, it is
important to be aware of this, as you might otherwise receive unexpected results from your
variables.
More details on variable precedence can be found at https:/​/​docs.
ansible.​com/​ansible/​latest/​user_​guide/​playbooks_​variables.
html#variable-​precedence-​where-​should-​i-​put-​a-​variable
In short, variables can be defined in a number of locations, and the right location for a given
scenario will be driven by the objective of the playbook. For example, if a variable is
common to an entire group of servers, it would be logical to define it in the inventory as a
group variable. If it applies to every host a specific playbook runs against regardless, then
you would almost certainly define it in the playbook. Let's take a quick look at this by
modifying our simple.yml playbook from earlier in this chapter, this time, defining a play
variable called message for our debug statement to display when the playbook is run, as
follows:
---
- name: Simple playbook
hosts: localhost
become: false
vars:
message: "Life is beautiful!"
tasks:
- name: Show a message
debug:
msg: "{{ message }}"
- name: Touch a file
file:
path: /tmp/foo
state: touch
[ 47 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Note that we have now defined a vars section before the tasks one and that the variable is
accessed by placing it in pairs of curly braces. Running this playbook yields the following
results:
If you refer to the variable precedence order list, you will note that variables passed to
the ansible-playbook binary on the command line are top of the list, and override all
other variables. Thus, if we want to override the contents of our message variable without
editing the playbook, we can do so as follows:
$ ansible-playbook simple.yml -e "message=\"Hello from the CLI\""
[ 48 ]
Automating Your IT Infrastructure with Ansible Chapter 2
Note the special quoting and escaping required to handle the spaces in the variable content,
and the effects of this on the operation of the playbook:
Variables can also be passed to roles, and are a simple yet powerful way of creating generic
roles that can be used in a multitude of scenarios, without using identical configuration
data. For example, in the previous section, we explored installing a MariaDB server. While
this is a good candidate for a role, you certainly don't want the same root database
password to be configured on every server. It thus makes sense to define a variable for the
password, and pass this to the role from the calling playbook (or another appropriate
source, such as a host or group variable).
As well as user-defined variables, Ansible also has a number of built-in variables, referred
to as special variables. These can be accessed from anywhere in the playbook, and are
useful for obtaining certain details pertaining to the state of the play.
[ 49 ]
Automating Your IT Infrastructure with Ansible Chapter 2
For example, if you needed to know the hostname currently being acted upon for a specific
task, this is available through the inventory_hostname variable. A full list of these
variables is available at https:/​/​docs.​ansible.​com/​ansible/​latest/​reference_
appendices/​special_​variables.​html
Many readers will, by now, have noticed that the output from all our example playbooks
contains a line that says Gathering Facts. Although this can be turned off, it is, in fact,
incredibly useful, and populates a wide array of variables with useful key system data. To
get an idea of the kind of data gathered during this phase, run the following code from the
command line:
$ ansible -m setup localhost
This command, rather than running a playbook, instructs Ansible to run the setup module
directly on the localhost—the setup module is the one that is run behind the scenes,
during the Gathering Facts stage. The output will look something like this, and goes on
for pages—this is just the first few lines:
[ 50 ]
Automating Your IT Infrastructure with Ansible Chapter 2
We can immediately see there is some really useful information there, such as the IP
addresses of the host, the root volume, and so on. Remember our discussion about
commonality in Chapter 1, Building a Standard Operating Environment on Linux, and the
difficulty in detecting the operating system you are running against? Well, Ansible makes
this easy, as that data is all readily available in the gathered facts. We can modify our
debug statement to display the Linux distribution we are running against, simply by
specifying the appropriate fact, accessible from the output from the last command, as
follows:
- name: Show a message
debug:
msg: "{{ ansible_distribution }}"
Now, when we run the playbook, we can easily tell we are running on Ubuntu, as can be
seen in the following screenshot:
Ansible enables you to conditionally run individual tasks, roles, or even entire blocks of
tasks, and hence having access to facts makes it straightforward to write robust playbooks
that can be run against multiple platforms and perform the correct actions on each
platform.
[ 51 ]
Automating Your IT Infrastructure with Ansible Chapter 2
It is also worth noting that variables do not need to be stored in unencrypted text.
Occasionally, it might be necessary to store a password in a variable (as discussed
earlier—perhaps the root password for our MariaDB server install). Storing those details in
plain text format presents a big security risk, but fortunately, Ansible includes a technology
called Vault, which is capable of storing variable data encrypted using AES256. These