allows DTLS connections with any supported protocol version (DTLS 1.0 and DTLS
1.2 in Java 11). You can then load the certificates of trusted certificate authorities
(CAs) and use this to initialize a TrustManagerFactory, just as you’ve done in previ-
ous chapters. The TrustManagerFactory will be used by Java to determine if the
server’s certificate is trusted. In this, case you can use the as.example.com.ca.p12 file
that you created in chapter 7 containing the mkcert CA certificate. The PKIX (Public
Key Infrastructure with X.509) trust manager factory algorithm should be used. Finally,
you can initialize the SSLContext object, passing in the trust managers from the factory,
using the SSLContext.init() method. This method takes three arguments:
 An array of KeyManager objects, which are used if performing client certificate
authentication (covered in chapter 11). Because this example doesn’t use client
certificates, you can leave this null.
 The array of TrustManager objects obtained from the TrustManagerFactory.
 An optional SecureRandom object to use when generating random key material
and other data during the TLS handshake. You can leave this null in most cases
to let Java choose a sensible default.
Create a new file named DtlsClient.java in the src/main/com/manning/apisecurity-
inaction folder and type in the contents of the listing.
NOTE
The examples in this section assume you are familiar with UDP net-
work programming in Java. See http://mng.bz/yr4G for an introduction.
444
CHAPTER 12
Securing IoT communications
package com.manning.apisecurityinaction;
import javax.net.ssl.*;
import java.io.FileInputStream;
import java.nio.file.*;
import java.security.KeyStore;
import org.slf4j.*;
import static java.nio.charset.StandardCharsets.UTF_8;
public class DtlsClient {
    private static final Logger logger = 
        LoggerFactory.getLogger(DtlsClient.class);
    private static SSLContext getClientContext() throws Exception {
        var sslContext = SSLContext.getInstance("DTLS");         
        var trustStore = KeyStore.getInstance("PKCS12");               
        trustStore.load(new FileInputStream("as.example.com.ca.p12"),  
                "changeit".toCharArray());                             
        var trustManagerFactory = TrustManagerFactory.getInstance(   
                "PKIX");                                             
        trustManagerFactory.init(trustStore);                        
        sslContext.init(null, trustManagerFactory.getTrustManagers(),  
                null);                                                 
        return sslContext;
    }
}
After you’ve created the SSLContext, you can use the createEngine() method on it
to create a new SSLEngine object. This is the low-level protocol implementation that is
normally hidden by higher-level protocol libraries like the HttpClient class you used
in chapter 7. For a client, you should pass the address and port of the server to the
method when creating the engine and configure the engine to perform the client side
of the DTLS handshake by calling setUseClientMode(true), as shown in the follow-
ing example.
NOTE
You don’t need to type in this example (and the other SSLEngine
examples), because I have provided a wrapper class that hides some of this
complexity and demonstrates correct use of the SSLEngine. See http://mng
.bz/Mo27. You’ll use that class in the example client and server shortly.
var address = InetAddress.getByName("localhost");
var engine = sslContext.createEngine(address, 54321);
engine.setUseClientMode(true);
You should then allocate buffers for sending and receiving network packets, and for
holding application data. The SSLSession associated with an engine has methods that
provide hints for the correct size of these buffers, which you can query to ensure you
Listing 12.1
The client SSLContext
Create an 
SSLContext 
for DTLS.
Load the trusted
CA certificates as
a keystore.
Initialize a Trust-
ManagerFactory
with the trusted
certificates.
Initialize the SSLContext
with the trust manager.
445
Transport layer security
allocate enough space, as shown in the following example code (again, you don’t
need to type this in):
var session = engine.getSession();      
var receiveBuffer =                                            
    ByteBuffer.allocate(session.getPacketBufferSize());        
var sendBuffer =                                               
    ByteBuffer.allocate(session.getPacketBufferSize());        
var applicationData =                                          
    ByteBuffer.allocate(session.getApplicationBufferSize());   
These initial buffer sizes are hints, and the engine will tell you if they need to be
resized as you’ll see shortly. Data is moved between buffers by using the following two
method calls, also illustrated in figure 12.2:
sslEngine.wrap(appData, sendBuf) causes the SSLEngine to consume any wait-
ing application data from the appData buffer and write one or more DTLS
packets into the network sendBuf that can then be sent to the other party.
Retrieve the SSLSession 
from the engine.
Use the session 
hints to correctly 
size the data 
buffers.
SSLEngine
Wrap operations consume
outgoing application
data and produce DTLS
records to send.
Network
receive
buﬀer
Network
send buﬀer
Application
data buﬀer
DatagramChannel
UDP
wrap()
unwrap()
receive()
send()
wrap()
unwrap()
Unwrap operations consume
received data from the
network and produce
decrypted application data.
A DatagramChannel is
used to send and receive
individual UDP packets.
Figure 12.2
The SSLEngine uses two methods to move data between the 
application and network buffers: wrap() consumes application data to send 
and writes DTLS packets into the send buffer, while unwrap() consumes data 
from the receive buffer and writes unencrypted application data back into the 
application buffer.
446
CHAPTER 12
Securing IoT communications
sslEngine.unwrap(recvBuf, appData) instructs the SSLEngine to consume
received DTLS packets from the recvBuf and output any decrypted application
data into the appData buffer.
To start the DTLS handshake, call sslEngine.beginHandshake(). Rather than block-
ing until the handshake is complete, this configures the engine to expect a new DTLS
handshake to begin. Your application code is then responsible for polling the engine
to determine the next action to take and sending or receiving UDP messages as indi-
cated by the engine. 
 To poll the engine, you call the sslEngine.getHandshakeStatus() method, which
returns one of the following values, as shown in figure 12.3:
NEED_UNWRAP indicates that the engine is waiting to receive a new message from
the server. Your application code should call the receive() method on its UDP
SSLEngine
Network
receive
buﬀer
Network
send buﬀer
DatagramChannel
NEED_UNWRAP
NEED_UNWRAP_AGAIN
NEED_WRAP
ExecutorService
NEED_TASK
wrap()
send()
receive()
unwrap()
getDelegatedTask()
run()
NEED_UNWRAP receives a new message
from the network and calls unwrap(), while
NEED_UNWRAP_AGAIN should call unwrap()
with the current network buffer contents.
The NEED_WRAP state occurs when
the SSLEngine needs to send data to
the network. Call wrap() to ﬁll the send
buffer and then send it.
The NEED_TASK state indicates
that the engine needs to run
some expensive tasks. Use an
ExecutorService or just call run()
on each task in turn.
Figure 12.3
The SSLEngine handshake state machine involves four main states. In the NEED_UNWRAP 
and NEED_UNWRAP_AGAIN states, you should use the unwrap() call to supply it with received 
network data. The NEED_WRAP state indicates that new DTLS packets should be retrieved with the 
wrap() call and then sent to the other party. The NEED_TASK state is used when the engine needs 
to execute expensive cryptographic functions.
447
Transport layer security
DatagramChannel to receive a packet from the server, and then call the SSLEn-
gine.unwrap() method passing in the data it received.
NEED_UNWRAP_AGAIN indicates that there is remaining input that still needs to be
processed. You should immediately call the unwrap() method again with an
empty input buffer to process the message. This can happen if multiple DTLS
records arrived in a single UDP packet.
NEED_WRAP indicates that the engine needs to send a message to the server. The
application should call the wrap() method with an output buffer that will be
filled with the new DTLS message, which your application should then send to
the server.
NEED_TASK indicates that the engine needs to perform some (potentially expen-
sive) processing, such as performing cryptographic operations. You can call the
getDelegatedTask() method on the engine to get one or more Runnable
objects to execute. The method returns null when there are no more tasks to
run. You can either run these immediately, or you can run them using a back-
ground thread pool if you don’t want to block your main thread while they
complete.
FINISHED indicates that the handshake has just finished, while NOT_HANDSHAK-
ING indicates that no handshake is currently in progress (either it has already
finished or has not been started). The FINISHED status is only generated once
by the last call to wrap() or unwrap() and then the engine will subsequently
produce a NOT_HANDSHAKING status.
Listing 12.2 shows the outline of how the basic loop for performing a DTLS hand-
shake with SSLEngine is performed based on the handshake status codes.
NOTE
This listing has been simplified compared to the implementation in
the GitHub repository accompanying the book, but the core logic is correct.
engine.beginHandshake();      
var handshakeStatus = engine.getHandshakeStatus();     
while (handshakeStatus != HandshakeStatus.FINISHED) {      
    SSLEngineResult result;
    switch (handshakeStatus) {
        case NEED_UNWRAP:                     
            if (recvBuf.position() == 0) {    
                channel.receive(recvBuf);     
            }                                 
        case NEED_UNWRAP_AGAIN:     
            result = engine.unwrap(recvBuf.flip(), appData);    
            recvBuf.compact();                                  
            checkStatus(result.getStatus());                   
            handshakeStatus = result.getHandshakeStatus();     
            break;
Listing 12.2
SSLEngine handshake loop
Trigger a new DTLS 
handshake.
Allocate buffers 
for network and 
application data.
Loop until the 
handshake is finished.
In the NEED_UNWRAP state, you 
should wait for a network packet 
if not already received.
Let the switch
statement fall
through to the
NEED_UNWRAP
_AGAIN case.
Process any
received DTLS
packets by calling
engine.unwrap().
Check the result 
status of the unwrap() 
call and update the 
handshake state.
448
CHAPTER 12
Securing IoT communications
        case NEED_WRAP:
            result = engine.wrap(appData.flip(), sendBuf);     
            appData.compact();                                 
            channel.write(sendBuf.flip());                     
            sendBuf.compact();                                 
            checkStatus(result.getStatus());                   
            handshakeStatus = result.getHandshakeStatus();     
            break;                                             
        case NEED_TASK:
            Runnable task;                                        
            while ((task = engine.getDelegatedTask()) != null) {  
                task.run();                                       
            }                                                     
            status = engine.getHandshakeStatus();                 
        default:
            throw new IllegalStateException();
}
The wrap() and unwrap() calls return a status code for the operation as well as a new
handshake status, which you should check to ensure that the operation completed
correctly. The possible status codes are shown in table 12.1. If you need to resize a buf-
fer, you can query the current SSLSession to determine the recommended applica-
tion and network buffer sizes and compare that to the amount of space left in the
buffer. If the buffer is too small, you should allocate a new buffer and copy any exist-
ing data into the new buffer. Then retry the operation again.
Using the DtlsDatagramChannel class from the GitHub repository accompanying the
book, you can now implement a working DTLS client example application. The sam-
ple class requires that the underlying UDP channel is connected before the DTLS hand-
shake occurs. This restricts the channel to send packets to only a single host and
receive packets from only that host too. This is not a limitation of DTLS but just a sim-
plification made to keep the sample code short. A consequence of this decision is that
the server that you’ll develop in the next section can only handle a single client at a
time and will discard packets from other clients. It’s not much harder to handle con-
current clients but you need to associate a unique SSLEngine with each client.
Table 12.1
SSLEngine operation status codes
Status code
Meaning
OK
The operation completed successfully.
BUFFER_UNDERFLOW
The operation failed because there was not enough input data. Check that the 
input buffer has enough space remaining. For an unwrap operation, you should 
receive another network packet if this status occurs. 
BUFFER_OVERFLOW
The operation failed because there wasn’t enough space in the output buffer. 
Check that the buffer is large enough and resize it if necessary.
CLOSED
The other party has indicated that they are closing the connection, so you 
should process any remaining packets and then close the SSLEngine too. 
In the 
NEED_WRAP 
state, call the 
wrap() method 
and then send 
the resulting 
DTLS packets.
For NEED_TASK,
just run any
delegated tasks or
submit them to a
thread pool.
449
Transport layer security
DEFINITION
A UDP channel (or socket) is connected when it is restricted to
only send or receive packets from a single host. Using connected channels
simplifies programming and can be more efficient, but packets from other cli-
ents will be silently discarded. The connect() method is used to connect a
Java DatagramChannel.
Listing 12.3 shows a sample client that connects to a server and then sends the con-
tents of a text file line by line. Each line is sent as an individual UDP packet and will be
encrypted using DTLS. After the packets are sent, the client queries the SSLSession
to print out the DTLS cipher suite that was used for the connection. Open the Dtls-
Client.java file you created earlier and add the main method shown in the listing. Cre-
ate a text file named test.txt in the root folder of the project and add some example
text to it, such as lines from Shakespeare, your favorite quotes, or anything you like.
NOTE
You won’t be able to use this client until you write the server to accom-
pany it in the next section.
public static void main(String... args) throws Exception {
    try (var channel = new DtlsDatagramChannel(getClientContext());   
         var in = Files.newBufferedReader(Paths.get("test.txt"))) {   
        logger.info("Connecting to localhost:54321");
        channel.connect("localhost", 54321);   
        String line;
        while ((line = in.readLine()) != null) {                 
            logger.info("Sending packet to server: {}", line);   
            channel.send(line.getBytes(UTF_8));                  
        }
        logger.info("All packets sent");
        logger.info("Used cipher suite: {}",               
                channel.getSession().getCipherSuite());    
    }
}
After the client completes, it will automatically close the DtlsDatagramChannel, which
will trigger shutdown of the associated SSLEngine object. Closing a DTLS session is
not as simple as just closing the UDP channel, because each party must send each
other a close-notify alert message to signal that the DTLS session is being closed. In
Java, the process is similar to the handshake loop that you saw earlier in listing 12.2.
First, the client should indicate that it will not send any more packets by calling the
closeOutbound() method on the engine. You should then call the wrap() method
to allow the engine to produce the close-notify alert message and send that message to
the server, as shown in listing 12.4. Once the alert has been sent, you should process
incoming messages until you receive a corresponding close-notify from the server, at
Listing 12.3
The DTLS client
Open the DTLS channel with 
the client SSLContext.
Open a text file to
send to the server.
Connect to the server running on 
the local machine and port 54321.
Send the
lines of text
to the server.
Print details of the 
DTLS connection.
450
CHAPTER 12
Securing IoT communications
which point the SSLEngine will return true from the isInboundDone() method and
you can then close the underlying UDP DatagramChannel.
 If the other side closes the channel first, then the next call to unwrap() will return