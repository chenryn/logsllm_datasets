ness (safety) of the robot at runtime. Schierman et al. [3]
investigated how the RTA framework can be used at different
levels of the software stack of an unmanned aircraft system.
In a more recent work [10], Schierman et. al. proposed a
component-based simplex architecture (CBSA) that combines
assume-guarantee contracts with RTA for assuring the runtime
safety of component-based cyber-physical systems. In [6], the
authors apply simplex approach for sandboxing cyber-physical
systems and present automatic reachability based approaches
for inferring switching conditions. The idea of using an
advanced controller (AC) under nominal conditions; while at
the boundaries, using optimal safe control (SC) to maintain
safety has also been used in [49] for operating quadrotors in
the real world. In [50] the authors use a switching architecture
([51]) to switch between a nominal safety model and learned
performance model to synthesize policies for a quadrotor to
follow a trajectory. Recently, ModelPlex [52] combines ofﬂine
veriﬁcation of CPS models with runtime validation of system
executions for compliance with the model to build correct
by construction runtime monitors which provides correctness
guarantees for CPS executions at runtime. Note that most prior
applications of RTA do not provide high-level programming
language support for constructing provably-safe RTA systems
in a compositional fashion while designing for timing and
communication behavior of such systems. They are all in-
stances of using RTA as a design methodology for building
reliable systems in the presence of untrusted components.
SOTER approach. In order to ease the construction of RTA
systems, there is a need for a general programming framework
that supports run-time assurance principles and also considers
implementation aspects such as timing and communication.
Our approach is to provide a high-level language to (1) enable
programmers to implement and specify the complex reactive
system, (2) leverage advances in scalable systematic-testing
techniques for validation of the actual implementation of the
software, and (3) provide language support for runtime assur-
ance to ensure safety in the real physical world. We formalize
a generic runtime assurance architecture and implement it
in programming framework for mobile robotic systems. We
demonstrate the efﬁcacy of SOTER framework by building
a real-world drone software stack and conducted rigorous
experiments to demonstrate safety of autonomous robots in
the presence of untrusted components. Also, note that most of
the work done in the context of runtime assurance techniques
provide solutions where the switching logic in DM is only
conﬁgured to switch the control from AC to SC. In our
architecture, the programmer can also specify the condition
under which to transfer control back to AC, and maximize
the use of AC during a mission.
11
VII. CONCLUSION AND FUTURE DIRECTIONS
In this paper, we have presented SOTER, a new run-time as-
surance (RTA) framework for programming safe robotics sys-
tems. In contrast with other RTA frameworks, SOTER provides
(1) a programming language for modular implementation of
safe robotics systems by combining each advanced controller
with a safe counterpart; (2) theoretical results showing how to
safely switch between advanced and safe controllers, and (3)
experimental results demonstrating SOTER on drone platforms
in both simulation and in hardware.
Combining multiple RTA modules that have coordinated
(DM) switching is non-trivial. A system may have multiple
components with different guarantees. Our philosophy in this
paper is that each component must then use an RTA instance
to assure its guarantees, as this decomposition can help in
building complex systems. Let’s consider a system consisting
of two RTA modules M1 and M2, when M1 switches modes
(AC to SC), it may require M2 to switch as well so that it
can use the guarantee that M2’s new controller (SC) provides.
This kind of coordinated switching complicates the overall
architecture but is an interesting future work. We also plan
to extend the experimental evaluation for a broader class of
robotics platforms (e.g., multi-robot systems), safety speciﬁ-
cations (e.g., probabilistic properties), and unknown environ-
ments (e.g., dynamic obstacles). Altogether, such extensions
will enable us to make further progress towards the goal of
veriﬁed intelligent autonomous systems [1].
ACKNOWLEDGMENTS
We sincerely thank the anonymous reviewers and our shep-
herd Mohamed Kaaniche for their thoughtful comments. We
also thank Daniel Fremont for his valuable feedback and
suggested improvements on the previous drafts of the paper.
This work was supported in part by the TerraSwarm Research
Center, one of six centers supported by the STARnet phase of
the Focus Center Research Program (FCRP) a Semiconductor
Research Corporation program sponsored by MARCO and
DARPA, by the DARPA BRASS and Assured Autonomy
programs, by NSF grants 1545126 (VeHICaL), 1739816, and
1837132, by Berkeley Deep Drive, and by Toyota under the
iCyPhy center.
REFERENCES
[1] S. A. Seshia, D. Sadigh, and S. S. Sastry, “Towards Veriﬁed Artiﬁcial
Intelligence,” ArXiv e-prints, July 2016.
[2] L. Sha, “Using simplicity to control complexity,” IEEE Software, vol. 18,
no. 4, pp. 20–28, July 2001.
[3] J. D. Schierman, M. D. DeVore, N. D. Richards, N. Gandhi, J. K.
Cooper, K. R. Horneman, S. Stoller, and S. Smolka, “Runtime assurance
framework development for highly adaptive ﬂight control systems,”
Barron Associates, Inc. Charlottesville, Tech. Rep., 2015.
[4] D. Seto, E. Ferriera, and T. Marz, “Case study: Development of a
baseline controller for automatic landing of an f-16 aircraft using
linear matrix inequalities
(lmis),” Software Engineering Institute,
Carnegie Mellon University, Pittsburgh, PA, Tech. Rep. CMU/SEI-99-
TR-020, 2000. [Online]. Available: http://resources.sei.cmu.edu/library/
asset-view.cfm?AssetID=13489
12
[5] D. Phan, J. Yang, R. Grosu, S. A. Smolka, and S. D. Stoller,
“Collision avoidance for mobile robots with limited sensing and limited
information about moving obstacles,” Formal Methods in System
Design, vol. 51, no. 1, pp. 62–86, Aug 2017. [Online]. Available:
https://doi.org/10.1007/s10703-016-0265-4
[6] S. Bak, K. Manamcheri, S. Mitra, and M. Caccamo, “Sandboxing
controllers for cyber-physical systems,” in 2011 IEEE/ACM Second
International Conference on Cyber-Physical Systems, April 2011, pp.
3–12.
[7] M. Clark, X. Koutsoukos, R. Kumar, I. Lee, G. Pappas, L. Pike, J. Porter,
and O. Sokolsky, “Study on run time assurance for complex cyber
physical systems,” Air Force Research Lab, Tech. Rep. ADA585474,
April 2013, available at https://leepike.github.io/pubs/RTA-CPS.pdf.
[8] S. Bak, D. K. Chivukula, O. Adekunle, M. Sun, M. Caccamo, and
L. Sha, “The system-level simplex architecture for improved real-time
embedded system safety,” in 2009 15th IEEE Real-Time and Embedded
Technology and Applications Symposium, April 2009, pp. 99–107.
[9] B. Bohrer, Y. K. Tan, S. Mitsch, M. O. Myreen, and A. Platzer,
“Veriphy: Veriﬁed controller executables from veriﬁed cyber-physical
system models,” SIGPLAN Not., vol. 53, no. 4, pp. 617–630, Jun.
2018. [Online]. Available: http://doi.acm.org/10.1145/3296979.3192406
[10] D. Phan, J. Yang, M. Clark, R. Grosu, J. D. Schierman, S. A. Smolka,
and S. D. Stoller, “A component-based simplex architecture for high-
assurance cyber-physical systems,” arXiv preprint arXiv:1704.04759,
2017.
[11] M. Quigley, K. Conley, B. P. Gerkey, J. Faust, T. Foote, J. Leibs,
R. Wheeler, and A. Y. Ng, “Ros: an open-source robot operating system,”
in ICRA Workshop on Open Source Software, 2009.
[12] “PX4 Autopilot,” https://pixhawk.org/, 2017.
[13] “3D Robotics,” https://3dr.com/, 2017.
[14] N. Koenig and A. Howard, “Design and use paradigms for gazebo,
an open-source multi-robot simulator,” in In IEEE/RSJ International
Conference on Intelligent Robots and Systems, 2004, pp. 2149–2154.
[15] G. Brockman, V. Cheung, L. Pettersson, J. Schneider, J. Schulman,
J. Tang, and W. Zaremba, “Openai gym,” 2016.
[16] I. A. S¸ucan, M. Moll, and L. E. Kavraki, “The Open Motion Planning
Library,” IEEE Robotics & Automation Magazine, 2012.
[17] L. P. Kaelbling, M. L. Littman, and A. W. Moore, “Reinforcement
learning: A survey,” Journal of artiﬁcial intelligence research, vol. 4,
pp. 237–285, 1996.
[18] B. Dutertre and M. Sorea, “Modeling and veriﬁcation of a fault-tolerant
real-time startup protocol using calendar automata,” in Formal Tech-
niques, Modelling and Analysis of Timed and Fault-Tolerant Systems,
Y. Lakhnech and S. Yovine, Eds. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2004, pp. 199–214.
[19] S. L. Herbert, M. Chen, S. Han, S. Bansal, J. F. Fisac, and C. J.
Tomlin, “FaSTrack: A modular framework for fast and guaranteed safe
motion planning,” in 2017 IEEE 56th Annual Conference on Decision
and Control (CDC), Dec 2017, pp. 1517–1522.
[20] G. Frehse, C. Le Guernic, A. Donz´e, S. Cotton, R. Ray, O. Lebel-
tel, R. Ripado, A. Girard, T. Dang, and O. Maler, “SpaceEx: Scal-
able veriﬁcation of hybrid systems,” in Computer Aided Veriﬁcation,
G. Gopalakrishnan and S. Qadeer, Eds. Berlin, Heidelberg: Springer
Berlin Heidelberg, 2011, pp. 379–395.
[21] R. Alur and T. A. Henzinger, “Reactive modules,” Formal methods in
system design, vol. 15, no. 1, pp. 7–48, 1999.
[22] N. A. Lynch and M. R. Tuttle, “An introduction to input/output au-
tomata,” 1988.
[23] A. Desai, S. Qadeer, and S. A. Seshia, “Programming safe robotics
systems: Challenges and advances,” in Leveraging Applications of
Formal Methods, Veriﬁcation and Validation. Veriﬁcation - 8th
International Symposium, ISoLA 2018, Limassol, Cyprus, November
5-9, 2018, Proceedings, Part II, 2018, pp. 103–119. [Online]. Available:
https://doi.org/10.1007/978-3-030-03421-4 8
[24] A. Desai, V. Gupta, E. Jackson, S. Qadeer, S. Rajamani, and D. Zufferey,
“P: Safe asynchronous event-driven programming,” in Programming
Language Design and Implementation (PLDI), 2013.
[25] A. Desai, A. Phanishayee, S. Qadeer, and S. A. Seshia, “Compositional
programming and testing of dynamic distributed systems,” Proceedings
of the ACM on Programming Languages (PACMPL) (OOPSLA), 2018.
[26] A. Desai, I. Saha, J. Yang, S. Qadeer, and S. A. Seshia, “DRONA:
A framework for safe distributed mobile robotics,” in International
Conference on Cyber-Physical Systems (ICCPS), 2017.
[27] J. Fisher, T. A. Henzinger, M. Mateescu, and N. Piterman, “Bounded
asynchrony: Concurrency for modeling cell-cell interactions,” in Formal
Methods in Systems Biology, J. Fisher, Ed. Berlin, Heidelberg: Springer
Berlin Heidelberg, 2008, pp. 17–32.
[28] I. M. Mitchell, A. M. Bayen, and C. J. Tomlin, “A time-dependent
hamilton-jacobi formulation of reachable sets for continuous dynamic
games,” IEEE Transactions on Automatic Control, vol. 50, no. 7, pp.
947–957, July 2005.
[29] S. Karaman and E. Frazzoli,
for
optimal motion planning,” The International Journal of Robotics
Research, vol. 30, no. 7, pp. 846–894, 2011. [Online]. Available:
https://doi.org/10.1177/0278364911406761
“Sampling-based algorithms
[30] J. Guiochet, M. Machin, and H. Waeselynck, “Safety-critical advanced
robots: A survey,” Robotics and Autonomous Systems, vol. 94, pp. 43
– 52, 2017. [Online]. Available: http://www.sciencedirect.com/science/
article/pii/S0921889016300768
[31] H. Kress-Gazit, G. E. Fainekos, and G. J. Pappas, “Temporal logic based
reactive mission and motion planning,” IEEE Transactions on Robotics,
2009.
[32] G. E. Fainekos, A. Girard, H. Kress-Gazit, and G. J. Pappas, “Temporal
logic motion planning for dynamic robots,” Automatica, 2009.
[33] I. Saha, R. Ramaithitima, V. Kumar, G. J. Pappas, and S. A. Seshia,
“Automated composition of motion primitives for multi-robot systems
from safe ltl speciﬁcations.”
IEEE, 2014, pp. 1525–1532.
[34] Y. Shoukry, P. Nuzzo, A. Balkan, I. Saha, A. L. Sangiovanni-Vincentelli,
S. A. Seshia, G. J. Pappas, and P. Tabuada, “Linear temporal logic
motion planning for teams of underactuated robots using satisﬁability
modulo convex programming,” in 56th IEEE Annual Conference on
Decision and Control (CDC), 2017, pp. 1132–1137.
[35] T. Wongpiromsarn, U. Topcu, N. Ozay, H. Xu, and R. M. Murray,
“TuLiP: a software toolbox for receding horizon temporal logic plan-
ning,” in International Conference on Hybrid Systems: Computation and
Control (HSCC), 2011.
[36] S. Bensalem, L. de Silva, F. Ingrand, and R. Yan, “A veriﬁable and
levels,” arXiv
correct-by-construction controller for robot functional
preprint arXiv:1309.0442, 2013.
[37] T. Abdellatif, S. Bensalem, J. Combaz, L. de Silva, and F. Ingrand,
“Rigorous design of
robot software: A formal component-based
approach,” Robotics and Autonomous Systems, vol. 60, no. 12, pp.
1563 – 1578, 2012. [Online]. Available: http://www.sciencedirect.com/
science/article/pii/S0921889012001510
[46] L. Masson, J. Guiochet, H. Waeselynck, K. Cabrera, S. Cassel, and
M. T¨orngren, “Tuning permissiveness of active safety monitors for
autonomous systems,” in NASA Formal Methods, A. Dutle, C. Mu˜noz,
and A. Narkawicz, Eds. Cham: Springer International Publishing, 2018,
pp. 333–348.
[47] H. X. Li and B. C. Williams, “Generative planning for hybrid systems
based on ﬂow tubes,” in Proceedings of the Eighteenth International
Conference on Automated Planning and Scheduling, ICAPS 2008,
Sydney, Australia, September 14-18, 2008, 2008, pp. 206–213. [Online].
Available: http://www.aaai.org/Library/ICAPS/2008/icaps08-026.php
[48] A. G. Hofmann and B. C. Williams, “Robust execution of temporally
for bipedal walking devices,” in Proceedings of
ﬂexible plans
the Sixteenth International Conference on Automated Planning and
Scheduling, ICAPS 2006, Cumbria, UK, June 6-10, 2006, 2006, pp.
386–389. [Online]. Available: http://www.aaai.org/Library/ICAPS/2006/
icaps06-047.php
[49] A. K. Akametalu, J. F. Fisac, J. H. Gillula, S. Kaynama, M. N. Zeilinger,
and C. J. Tomlin, “Reachability-based safe learning with gaussian
processes,” in 53rd IEEE Conference on Decision and Control, Dec
2014, pp. 1424–1431.
[50] A. Aswani, P. Bouffard, and C. Tomlin, “Extensions of learning-
based model predictive control for real-time application to a quadrotor
helicopter,” in 2012 American Control Conference (ACC).
IEEE, 2012,
pp. 4661–4666.
[51] A. Aswani, H. Gonzalez, S. S. Sastry, and C. Tomlin, “Provably
safe and robust learning-based model predictive control,” Automatica,
vol. 49, no. 5, pp. 1216–1226, May 2013.
[Online]. Available:
http://dx.doi.org/10.1016/j.automatica.2013.02.003
[52] S. Mitsch and A. Platzer, “Modelplex: veriﬁed runtime validation of
veriﬁed cyber-physical system models,” Formal Methods in System
Design, vol. 49, no. 1, pp. 33–74, Oct 2016. [Online]. Available:
https://doi.org/10.1007/s10703-016-0241-z
[38] C. Finucane, G. Jing, and H. Kress-Gazit, “LTLMoP: Experimenting
with language, temporal logic and robot control,” in IEEE/RSJ Interna-
tional Conference on Intelligent Robots and Systems, 2010.
[39] X. Chen, E.
´Abrah´am, and S. Sankaranarayanan, “Flow*: An ana-
lyzer for non-linear hybrid systems,” in Computer Aided Veriﬁcation,
N. Sharygina and H. Veith, Eds. Berlin, Heidelberg: Springer Berlin
Heidelberg, 2013, pp. 258–263.
[40] P. S. Duggirala, S. Mitra, M. Viswanathan, and M. Potok, “C2E2: a
veriﬁcation tool for stateﬂow models,” in International Conference on
Tools and Algorithms for the Construction and Analysis of Systems.
Springer, 2015, pp. 68–82.
[41] T. Dreossi, A. Donz´e, and S. A. Seshia, “Compositional falsiﬁcation of
cyber-physical systems with machine learning components,” in NASA
Formal Methods - 9th International Symposium, NFM 2017, Moffett
Field, CA, USA, May 16-18, 2017, Proceedings, 2017, pp. 357–372.
[Online]. Available: https://doi.org/10.1007/978-3-319-57288-8 26
[42] O. Pettersson, “Execution monitoring in robotics: A survey,” Robotics
and Autonomous Systems, vol. 53, no. 2, pp. 73 – 88, 2005.
[Online]. Available: http://www.sciencedirect.com/science/article/pii/
S092188900500134X
[43] A. Desai, T. Dreossi, and S. A. Seshia, “Combining model checking and
runtime veriﬁcation for safe robotics,” in Runtime Veriﬁcation, S. Lahiri
and G. Reger, Eds. Cham: Springer International Publishing, 2017, pp.
172–189.
[44] J. V. Deshmukh, A. Donz´e, S. Ghosh, X. Jin, G. Juniwal, and S. A.
Seshia, “Robust online monitoring of signal temporal logic,” Formal
Methods in System Design, vol. 51, no. 1, pp. 5–30, Aug 2017.
[Online]. Available: https://doi.org/10.1007/s10703-017-0286-7
[45] J. Huang, C. Erdogan, Y. Zhang, B. Moore, Q. Luo, A. Sundaresan,
and G. Rosu, “ROSRV: Runtime veriﬁcation for robots,” in Runtime
Veriﬁcation, B. Bonakdarpour and S. A. Smolka, Eds. Cham: Springer
International Publishing, 2014, pp. 247–254.
13