```  
[root@db-172-16-3-40 fd]# cd /proc/26479/fd  
[root@db-172-16-3-40 fd]# ll 5  
lrwx------ 1 postgres postgres 64 Oct 16 09:09 5 -> /pgdata/digoal/1921/data02/pg_root/base/12699/12505  
postgres=# select pg_relation_filepath('t'::regclass);  
 pg_relation_filepath   
----------------------  
 base/12699/16923  
(1 row)  
```  
wal writer进程写的居然是pg_am这个系统表, 暂时还不知道啥原因.  
```  
postgres=# select relname,relkind,pg_relation_filepath(oid) from pg_class where pg_relation_filepath(oid) ~ '12505';  
 relname | relkind | pg_relation_filepath   
---------+---------+----------------------  
 pg_am   | r       | base/12699/12505  
(1 row)  
```  
session 3 :   
跟踪backend 进程  
```  
strace -p 26479  
```  
回滚测试 :   
```  
# session 1 (begin;)  
recvfrom(7, "Q\0\0\0\vbegin;\0", 8192, 0, NULL, NULL) = 12  
close(40)                               = 0  
sendto(7, "C\0\0\0\nBEGIN\0Z\0\0\0\5T", 17, 0, NULL, 0) = 17  
# session 1 (insert into digoal.t (info) values ('test');)  
recvfrom(7, "Q\0\0\0,insert into t (info) values"..., 8192, 0, NULL, NULL) = 45  
open("base/12699/16923_fsm", O_RDWR)    = -1 ENOENT (No such file or directory)  
open("base/12699/16923", O_RDWR)        = 18  
lseek(18, 0, SEEK_END)                  = 0  
lseek(18, 0, SEEK_END)                  = 0  
write(18, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 8192) = 8192  
open("base/12699/16930", O_RDWR)        = 40  
read(40, "\0\0\0\0\0\0\0\0\1\0\0\0000\0\360\37\360\37\4 \0\0\0\0b1\5\0\2\0\0\0"..., 8192) = 8192  
open("base/12699/16930_fsm", O_RDWR)    = -1 ENOENT (No such file or directory)  
lseek(40, 0, SEEK_END)                  = 8192  
write(40, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 8192) = 8192  
close(40)                               = 0  
sendto(7, "C\0\0\0\17INSERT 0 1\0Z\0\0\0\5T", 22, 0, NULL, 0) = 22  
# session 1 (rollback;)  
recvfrom(7, "Q\0\0\0\16rollback;\0", 8192, 0, NULL, NULL) = 15  
sendto(6, "\2\0\0\0\300\3\0\0\2331\0\0\t\0\0\0\0\0\0\0\1\0\0\0\353\4\0\0\0\0\0\0"..., 960, 0, NULL, 0) = 960  
sendto(6, "\2\0\0\0\270\1\0\0\2331\0\0\4\0\0\0\0\0\0\0\0\0\0\0v\n\0\0\0\0\0\0"..., 440, 0, NULL, 0) = 440  
sendto(7, "C\0\0\0\rROLLBACK\0Z\0\0\0\5I", 20, 0, NULL, 0) = 20  
```  
注意到, rollback时backend process和wal writer process都没有写xlog文件的操作(write或者fdatasync都没看到). 但是有write fsm文件的操作.  
更加详细的调用需要使用gdb来跟踪. strace很多信息都跟踪不到.  
提交测试 :   
```  
# session 1 (begin;)  
recvfrom(7, "Q\0\0\0\vbegin;\0", 8192, 0, NULL, NULL) = 12  
sendto(7, "C\0\0\0\nBEGIN\0Z\0\0\0\5T", 17, 0, NULL, 0) = 17  
# session 1 (insert into digoal.t (info) values ('test');)  
recvfrom(7, "Q\0\0\0,insert into t (info) values"..., 8192, 0, NULL, NULL) = 45  
sendto(7, "C\0\0\0\17INSERT 0 1\0Z\0\0\0\5T", 22, 0, NULL, 0) = 22  
# session 1 (commit;)  
recvfrom(7, "Q\0\0\0\fcommit;\0", 8192, 0, NULL, NULL) = 13  
write(38, "f\320\1\0\1\0\0\0\0\0\0\0\0\340rH\210\1\0\0\377\377\1\0\345/\0\0enab"..., 8192) = 8192  
fdatasync(38)                           = 0  
sendto(6, "\2\0\0\0P\1\0\0\2331\0\0\3\0\0\0\1\0\0\0\0\0\0\0\33B\0\0\0\0\0\0"..., 336, 0, NULL, 0) = 336  
sendto(7, "C\0\0\0\vCOMMIT\0Z\0\0\0\5I", 18, 0, NULL, 0) = 18  
```  
注意到, commit时, backend process写xlog文件(查看该进程的fd)并调用fdatasync写入磁盘.  
查看fd=38打开的是什么文件?  
```  
postgres@db-172-16-3-40-> cd /proc/26479/fd  
postgres@db-172-16-3-40-> ll 38  
lrwx------ 1 postgres postgres 64 Oct 16 09:09 38 -> /pgdata/digoal/1921/data01/pg_xlog/000000010000000000000012  
```  
4\. gdb  
以下使用PostgreSQL 9.3 devel版本进行测试.  
session 1 :   
```  
pgdev@db-172-16-3-150-> psql  
psql (9.3devel)  
Type "help" for help.  
postgres=# \c digoal postgres  
You are now connected to database "digoal" as user "postgres".  
digoal=# select pg_backend_pid();  
 pg_backend_pid   
----------------  
          12872  
(1 row)  
```  
session 2 :   
```  
pgdev@db-172-16-3-150-> gdb  
GNU gdb (GDB) Red Hat Enterprise Linux (7.0.1-37.el5)  
Copyright (C) 2009 Free Software Foundation, Inc.  
License GPLv3+: GNU GPL version 3 or later   
This is free software: you are free to change and redistribute it.  
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"  
and "show warranty" for details.  
This GDB was configured as "x86_64-redhat-linux-gnu".  
For bug reporting instructions, please see:  
.  
(gdb) attach 12872  
Attaching to process 12872  
Reading symbols from /home/pgdev/pgsql9.3/bin/postgres...done.  
Reading symbols from /usr/lib64/libxslt.so.1...(no debugging symbols found)...done.  
Loaded symbols for /usr/lib64/libxslt.so.1  
Reading symbols from /usr/lib64/libxml2.so.2...(no debugging symbols found)...done.  
Loaded symbols for /usr/lib64/libxml2.so.2  
Reading symbols from /lib64/libssl.so.6...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libssl.so.6  
Reading symbols from /lib64/libcrypto.so.6...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libcrypto.so.6  
Reading symbols from /lib64/libcrypt.so.1...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libcrypt.so.1  
Reading symbols from /lib64/libdl.so.2...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libdl.so.2  
Reading symbols from /lib64/libm.so.6...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libm.so.6  
Reading symbols from /lib64/libc.so.6...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libc.so.6  
Reading symbols from /lib64/libz.so.1...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libz.so.1  
Reading symbols from /usr/lib64/libgssapi_krb5.so.2...(no debugging symbols found)...done.  
Loaded symbols for /usr/lib64/libgssapi_krb5.so.2  
Reading symbols from /usr/lib64/libkrb5.so.3...(no debugging symbols found)...done.  
Loaded symbols for /usr/lib64/libkrb5.so.3  
Reading symbols from /lib64/libcom_err.so.2...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libcom_err.so.2  
Reading symbols from /usr/lib64/libk5crypto.so.3...(no debugging symbols found)...done.  
Loaded symbols for /usr/lib64/libk5crypto.so.3  
Reading symbols from /lib64/ld-linux-x86-64.so.2...(no debugging symbols found)...done.  
Loaded symbols for /lib64/ld-linux-x86-64.so.2  
Reading symbols from /usr/lib64/libkrb5support.so.0...(no debugging symbols found)...done.  
Loaded symbols for /usr/lib64/libkrb5support.so.0  
Reading symbols from /lib64/libkeyutils.so.1...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libkeyutils.so.1  
Reading symbols from /lib64/libresolv.so.2...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libresolv.so.2  
Reading symbols from /lib64/libselinux.so.1...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libselinux.so.1  
Reading symbols from /lib64/libsepol.so.1...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libsepol.so.1  
Reading symbols from /lib64/libnss_files.so.2...(no debugging symbols found)...done.  
Loaded symbols for /lib64/libnss_files.so.2  
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7fff05bc9000  
0x000000345fad4ef5 in recv () from /lib64/libc.so.6  
(gdb) b fdatasync  
Breakpoint 1 at 0x345facda60  
(gdb) c  
Continuing.  
```  
session 1 :   
```  
digoal=# begin;  
BEGIN  
digoal=# insert into digoal.t (info) values ('test');  
INSERT 0 1  
digoal=# end;  
```  
session 2 :   
```  
Breakpoint 1, 0x000000345facda60 in fdatasync () from /lib64/libc.so.6  
(gdb) bt  
#0  0x000000345facda60 in fdatasync () from /lib64/libc.so.6  
#1  0x0000000000491a19 in issue_xlog_fsync (fd=35, segno=3) at xlog.c:8215  
#2  0x0000000000497507 in XLogWrite (WriteRqst=..., flexible=0 '\000', xlog_switch=0 '\000') at xlog.c:1697  
#3  0x0000000000497a38 in XLogFlush (record=50343800) at xlog.c:1976  
#4  0x0000000000488dfb in RecordTransactionCommit () at xact.c:1125  
#5  CommitTransaction () at xact.c:1876  
#6  0x000000000048a9b9 in CommitTransactionCommand () at xact.c:2622  
#7  0x000000000062fbb3 in finish_xact_command () at postgres.c:2421  
#8  0x0000000000631e65 in exec_simple_query (query_string=0x34651f0 "end;") at postgres.c:1085  
#9  0x0000000000632c2d in PostgresMain (argc=, argv=, username=)  
    at postgres.c:3976  
#10 0x00000000005f5267 in ServerLoop () at postmaster.c:3671  
#11 0x00000000005f7e91 in PostmasterMain (argc=1, argv=0x33b2d10) at postmaster.c:1185  
#12 0x00000000005967b3 in main (argc=1, argv=) at main.c:197  
```  
5\. 那么fsync xlog 的操作是不是只在commit 的时候发生呢?  
当然不是, 上面没有观察到rollback时写XLOG是因为wal buffer设得较大, 没有被写满, 同时数据库中没有其他会话有commit操作.  
真正发生fsync xlog有几种可能, 1.  commit的时候.  2. wal buffer被写满的时候.  
下面使用大批量插入进行测试就能看出, 此时wal writer进程将会发生写xlog的操作.  
```  
postgres=# begin;insert into t (info) select generate_series(1,10000000);  
BEGIN  
INSERT 0 10000000  
```  
跟踪wal writer进程, 未提交时也发生了xlog write :   
```  
postgres@db-172-16-3-40-> strace -p 21951   
Process 21951 attached - interrupt to quit  
open("pg_xlog/000000010000000000000021", O_RDWR) = 5  
write(5, "f\320\2\0\1\0\0\0\0\0\0\0\0\0\0\204\355\377_O\305\277^O\0\0\0\4\0 \0\0"..., 303104) = 303104  
fdatasync(5)                            = 0  
....write..  
close(5)                                = 0  