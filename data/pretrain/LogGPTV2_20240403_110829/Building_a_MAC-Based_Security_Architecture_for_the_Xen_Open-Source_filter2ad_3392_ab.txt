### Figure 2: VM Coalitions and Payloads in Xen

In the Xen environment, the hypervisor manages the connection of virtual machines (VMs) to the device domain. The device domain is trusted to securely isolate data from different virtual disks within its VM and on the actual disk. This trust is reasonable because device domains are not application-specific and can run minimized runtime environments, making them part of the Trusted Computing Base (TCB).

### 3. sHype Design

**Figure 3** illustrates the overall sHype security architecture and its integration into the Xen Virtual Machine Monitor (VMM) system. sHype is designed to support several security functions, including secure services, resource monitoring, access control between VMs, isolation of virtual resources, and TPM-based attestation.

- **Secure Services**: sHype supports interaction with custom-designed, minimized, and carefully engineered VMs. For example, the policy management VM is used to establish and manage security policies for the Xen hypervisor.
- **Resource Accounting**: This feature provides control over resource usage, enabling the enforcement of service level agreements and mitigating denial-of-service attacks on hypervisor or VM resources.
- **Mandatory Access Control (MAC)**: MAC enforces a formal security policy on information flow between VMs, extending existing isolation between virtual resources with MAC features.
- **TPM-based Attestation**: This feature allows the generation and reporting of runtime integrity measurements for the hypervisor and VMs, enabling remote systems to infer the integrity properties of the running system.

The rest of this paper focuses on the sHype mandatory access control, which includes:
1. A policy manager maintaining the security policy.
2. An access control module (ACM) delivering authorization decisions according to the policy.
3. Mediation hooks controlling access of VMs to shared virtual resources based on decisions returned by the ACM.

#### 3.1 Design Decisions

Three major design decisions shape sHype:
1. **Leveraging Existing Isolation**: By building on existing isolation properties of virtual resources, sHype inherits the medium assurance of existing hypervisor isolation while requiring minimal code changes in the virtualization layer.
2. **Low Performance Overhead**: By using bind-time authorization and controlling access to spontaneously shared resources only on first-time access and upon policy changes, sHype incurs very low performance overhead on the critical path.
3. **Formal Security Policies**: Enforcing formal security policies enables reasoning about the effectiveness of specific policies, provides a basis for effective defense against denial-of-service attacks, and enables Service Level Agreement-style security guarantees through TPM-based attestation of system properties.

#### 3.2 Access Control Architecture

The key component of the access control architecture is the reference monitor, which isolates virtual machines by default and allows sharing of resources among VMs only when permitted by a mandatory access control (MAC) policy. sHype supports various kinds of MAC policies, including Biba, Bell-LaPadula, Caernarvon, Type Enforcement, and Chinese Wall policies.

The classical definition of a reference monitor states that it must:
1. Mediate all security-critical operations.
2. Protect itself from modification.
3. Be as simple as possible to enable validation of its correct implementation.

**Mediating Security-Critical Operations**: A security-critical operation requires MAC policy authorization. If such an operation is not authorized, the system's security guarantees can be circumvented. For example, if memory mapping among VMs is not authorized, a VM in one coalition can leak data to other VMs.

We identify security-critical operations in terms of resources whose use must be controlled to implement MAC policies. The following resources must be controlled in a typical Xen VMM environment:
- Sharing of virtual resources between VMs controlled by the Xen hypervisor (e.g., event channels, shared memory, and domain operations).
- Sharing of local virtual resources between local VMs controlled by MAC domains (e.g., local vLANs and virtual disks).
- Sharing of distributed virtual resources between VMs in multiple hypervisor systems controlled by MAC-bridging domains (e.g., vLANs spanning multiple hypervisor systems).

The hypervisor reference monitor enforces access control and isolation on virtual resources in the Xen hypervisor. While sHype enforces mandatory access control on MAC domains regarding their participation in multiple coalitions, it relies on MAC domains to isolate different virtual resources and allow access only to domains that belong to the same coalition as the virtual resource. A good example of a MAC domain is the device domain in Figure 2, which participates in both the Order and Advertising coalitions. MAC domains become part of the TCB and should be of minimal size (e.g., secure microkernel design). Since MAC domains are generic, the cost of making them secure will amortize as they are used in many application environments.

If coalitions are distributed over multiple systems, MAC-bridging domains are needed to control their interaction. These domains build bridges between hypervisor systems over untrusted terrain to connect vLANs on multiple systems. They first establish trust in the required security properties of peer MAC-bridging domains and their underlying virtualization infrastructure (e.g., using TPM-based attestation). Then, they build secure tunnels between each other, forming a single (distributed) MAC domain spanning multiple systems. MAC-bridging domains also become part of the TCB, similar to MAC domains.

### 4. Implementation

#### 4.1 Security Policies

We implemented two formal security policies for Xen:
1. **Chinese Wall Policy**: This policy ensures that certain VMs (and their supported workload types) cannot run on the same hypervisor system at the same time, useful for mitigating covert channels or meeting other requirements.
2. **Type Enforcement (TE) Policy**: This policy specifies which running VMs can share resources and which cannot, supporting the coalitions introduced in Section 2.2 by mapping coalition membership onto TE types.

#### 4.2 Policy Management

The policy management function is responsible for creating and maintaining policy instantiations for the Chinese Wall and Type Enforcement policies. To minimize code complexity inside the hypervisor, the policy management translates an XML-based policy representation into a binary policy representation that is both system-independent and efficient for the hypervisor to use.

The binary policy created by the Policy Management includes the assignment of VMs to CW-types and TE-types, as well as the conflict sets to be enforced on the CW-types. The access class of a VM as seen by sHype is exactly a set of CW-types and TE-types. Access classes of virtual resources such as virtual disks typically comprise a single TE-type.

Policy management can either run in a dedicated domain or as a service within a trusted VM.