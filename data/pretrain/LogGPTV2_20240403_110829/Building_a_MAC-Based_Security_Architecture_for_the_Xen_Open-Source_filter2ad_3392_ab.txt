Figure 2. VM coalitions and payloads in Xen
While the hypervisor controls the ability of the VMs to
connect to the device domain, the device domain is trusted
to keep data of different virtual disks securely isolated in-
side its VM and on the real disk. This is a reasonable re-
quirement since device domains are not application-speci(cid:2)c
and can run minimized run-time environments. Device do-
mains thus form part of the Trusted Computing Base (TCB).
3 sHype Design
Figure 3 illustrates the overall sHype security architec-
ture and its integration into the Xen VMM system. sHype is
designed to support a set of security functions: secure ser-
vices, resource monitoring, access control between VMs,
isolation of virtual resources, and TPM-based attestation.
sHype supports interaction with secure services in
custom-designed, minimized, and carefully engineered
VMs. An example is the policy management VM, which
we use to establish and manage the security policies for the
Xen hypervisor. Resource accounting provides control of
resource usage. This enables enforcement of service level
agreements and addresses denial of service attacks on hy-
pervisor or VM resources. The mandatory access control
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:59 UTC from IEEE Xplore.  Restrictions apply. 
V
V
(cid:13)M
(cid:13)M
(cid:13)-
(cid:13)-
(cid:13)M
(cid:13)D
D
(cid:13)O
(cid:13)O
(cid:13)a
(cid:13)n
(cid:13)M
(cid:13)M
(cid:13)a
(cid:13)0
(cid:13)0
(cid:13)g
(cid:13)
(cid:13)
(cid:13)e
(cid:13)r
(cid:13)
Guest(cid:13)
OS(cid:13)
Guest(cid:13)
OS(cid:13)
sHype / XEN(cid:13)
Hardware(cid:13)
Hypervisor(cid:13)
Hypervisor(cid:13)
Hypervisor(cid:13)
Mediation(cid:13)
Mediation(cid:13)
Mediation(cid:13)
„(cid:13)Hooks(cid:13)“(cid:13)
„(cid:13)Hooks(cid:13)“(cid:13)
„(cid:13)Hooks(cid:13)“(cid:13)
S
S
(cid:13)e
(cid:13)e
(cid:13)r
(cid:13)r
(cid:13)v
(cid:13)v
(cid:13)i
(cid:13)i
(cid:13)c
(cid:13)c
(cid:13)e
(cid:13)e
(cid:13)s
(cid:13)s
(cid:13)
(cid:13)
S
S
(cid:13)e
(cid:13)e
(cid:13)c
(cid:13)c
(cid:13)u
(cid:13)u
(cid:13)r
(cid:13)r
(cid:13)i
(cid:13)i
(cid:13)t
(cid:13)t
(cid:13)y
(cid:13)y
(cid:13)
(cid:13)
M
M
(cid:13)a
(cid:13)a
(cid:13)n
(cid:13)n
(cid:13)a
(cid:13)a
(cid:13)g
(cid:13)g
(cid:13)e
(cid:13)e
(cid:13)r
(cid:13)r
(cid:13)
(cid:13)
P
P
(cid:13)o
(cid:13)o
(cid:13)l
(cid:13)l
(cid:13)i
(cid:13)i
(cid:13)c
(cid:13)c
(cid:13)y
(cid:13)y
(cid:13)
(cid:13)
ACM(cid:13)
Callbacks(cid:13)
Callbacks(cid:13)
Secure Services(cid:13)
(Policy Mgmt, Audit, ...)(cid:13)
Resource Control(cid:13)
Access Control between VMs(cid:13)
Isolation of Virtual Resources(cid:13)
TPM-based Attestation(cid:13)
Figure 3. sHype architecture
enforces a formal security policy on information (cid:3)ow be-
tween VMs.
sHype leverages existing isolation between virtual re-
sources and extends it with MAC features. TPM-based
attestation [28] provides the ability to generate and re-
port runtime integrity measurements on the hypervisor and
VMs. This enables remote systems to infer the integrity
properties of the running system.
The rest of this paper focuses on the sHype mandatory
(1) the policy
access control architecture, consisting of:
manager maintaining the security policy; (2) the access
control module (ACM) delivering authorization decisions
according to the policy; and (3) and mediation hooks con-
trolling access of VMs to shared virtual resources based on
decisions returned by the ACM.
3.1 Design Decisions
Three major decisions shape the design of sHype:
(1) By building on existing isolation properties of virtual
resources, sHype inherits the medium assurance of existing
hypervisor isolation while requiring minimal code changes
in the virtualization layer (hypervisor).
(2) By using bind-time authorization and controlling ac-
cess to spontaneously shared resources only on (cid:2)rst-time
access and upon policy changes, sHype incurs very low per-
formance overhead on the critical path.
(3) By enforcing formal security policies, sHype enables
reasoning about the effectiveness of speci(cid:2)c policies, pro-
vides the basis for effective defense against denial of ser-
vice attacks (through resource policy enforcement), and en-
ables Service Level Agreement-style security guarantees
(through TPM-based attestation of system properties).
3.2 Access Control Architecture
The key component of the access control architecture is
the reference monitor, which in sHype isolates virtual ma-
chines by default and allows sharing of resources among
4
virtual machines only when allowed by a mandatory ac-
cess control (MAC) policy. To support various business
requirements, sHype supports various kinds of MAC poli-
cies: Biba [5], Bell-LaPadula [4], Caernarvon [30], Type
Enforcement [6], as well as Chinese Wall [7] policies.
The classical de(cid:2)nition of a reference monitor [16]
states that it possesses three properties: (1) it mediates all
security-critical operations; (2) it can protect itself from
modi(cid:2)cation; and (3) it is as simple as possible to enable
validation of its correct implementation. We examine the
(cid:2)rst requirement in more detail. The second and third re-
quirement are covered by generic hypervisor properties: it
is protected against the VMs and consists of a thin software
layer.
Mediating security-critical operations. A security-
critical operation is one that requires MAC policy authoriza-
tion. If such an operation is not authorized against the MAC
policy, the system security guarantees can be circumvented.
For example, if the mapping of memory among VMs is not
authorized, then a VM in one coalition can leak its data to
other VMs.
We identify security-critical operations in terms of re-
sources whose use must be controlled in order to imple-
ment MAC policies. We also identify the location of the
mediation points for these resources. The combination of
resources to be controlled and their mediation points forms
the reference monitor interface. We discuss only virtual
resources, because real resources can only be used exclu-
sively by one VM or shared in the form of virtual resources.
The following resources must be controlled in a typical Xen
VMM environment:
(cid:15) Sharing of virtual resources between VMs controlled by
the Xen hypervisor (e.g., event channels, shared memory,
and domain operations).
(cid:15) Sharing of local virtual resources between local VMs con-
local vLANs and virtual
trolled by MAC domains (e.g.
disks).
(cid:15) Sharing of distributed virtual resources between VMs in
multiple hypervisor systems controlled by MAC-bridging
domains (e.g., vLANs spanning multiple hypervisor sys-
tems).
The hypervisor reference monitor enforces access control
and isolation on virtual resources in the Xen hypervisor.
While sHype enforces mandatory access control on MAC
domains regarding their participation in multiple coalitions,
it relies on MAC domains to isolate the different virtual
resources from each other and allow access to virtual re-
sources only to domains that belong to the same coalition
as the virtual resource. A good example of a MAC domain
is the device domain in Fig. 2, which participates in both
the Order and the Advertising coalition. MAC do-
mains become part of the Trusted Computing Base (TCB)
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:59 UTC from IEEE Xplore.  Restrictions apply. 
and should therefore be of minimal size (e.g., secure micro-
kernel design). Since MAC domains are generic, the cost of
making them secure will amortize as they are used in many
application environments. We sketch the implementation of
MAC domains in Section 4.4.
If coalitions are distributed over multiple systems, we
need MAC-bridging domains to control their interaction.
The virtual resource that enables co-operation among VMs
on multiple systems is typically a vLAN. Mac-bridging do-
mains build bridges between their hypervisor systems over
untrusted terrain to connect vLANs on multiple systems. To
do so, they (cid:2)rst establish trust into required security proper-
ties of the peer MAC Bridging domains and their underlying
virtualization infrastructure (e.g., using TPM-based attesta-
tion). Afterwards, they build secure tunnels between each
other, and can from now on be considered as forming a sin-
gle (distributed) MAC domain spanning multiple systems.
Requirements on the resulting distributed MAC domain are
akin the requirements described above for local MAC do-
mains. MAC Bridging domains become part of the TCB,
similarly to MAC domains.
4 Implementation
In this section, we (cid:2)rst de(cid:2)ne simple policies tailored
to the Xen hypervisor environment based on the workload
types and resources that must be controlled. Then we de-
scribe the management of the policies and the labeling of
VMs and resources. Finally, we introduce the access con-
trol enforcement in the hypervisor, which guards access of
VMs to resources based on the policies.
4.1 Security Policies
We implemented two formal security policies for Xen:
(i) a Chinese Wall policy, (ii) a simple Type Enforcement
(TE) policy. Both policies work on their own set of types
(CW- or TE-types), which are assigned to VMs as a func-
tion of the workloads they can run. The CW- and TE-types
de(cid:2)ne the granularity upon which VMs and resources can
be distinguished. The assignment of types to VMs and re-
sources is an administrative task (i.e., part of policy man-
agement).
Chinese Wall policy: The (cid:2)rst policy enables admin-
istrators to ensure that certain VMs (and their supported
workload types) cannot run on the same hypervisor system
at the same time. This is useful to mitigate covert channels
or to meet other requirements regarding certain workload
types (e.g., workload types of competitors) that shall not
run on the same physical system at the same time.
The Chinese Wall policy de(cid:2)nes a set Chinese wall types
(CW-types), and these are assigned to a VM according to
the workloads it can run. It also de(cid:2)nes con(cid:3)ict sets us-
ing these CW-types and ensures that VMs that are assigned
CW-types in the same con(cid:3)ict set never run at the same time
on the same system.
Type Enforcement policy: The second policy speci(cid:2)es
which running VMs can share resources and which cannot.
It supports the coalitions introduced in Section 2.2 by map-
ping coalition membership onto TE types.
The TE policy de(cid:2)nes the set of TE-types (coalitions)
and assigns TE types to VMs (coalition membership). The
TE policy rules enforce that VMs only share virtual re-
sources if they have a TE type in common, i.e., they are
member of at least one common coalition.
4.2 Policy Management
The policy management function is responsible for of-
fering means to create and maintain policy instantiations
for the Chinese Wall and Type Enforcement policies. To
minimize code complexity inside the hypervisor, the policy
management translates an XML-based policy representa-
tion into a binary policy representation that is both system-
independent and ef(cid:2)cient to use by the hypervisor layer.
The binary policy created by the Policy Management in-
cludes the assignment of VMs to CW-types and TE-types,
as well as the con(cid:3)ict sets to be enforced on the CW-types.
No other information is needed by the hypervisor to enforce
the policies. The access class of a VM as sHype sees it is
exactly a set of CW-types and TE-types. Access classes of
virtual resources such as virtual disks comprise only TE-
types, typically a single TE-type.
Policy management can either run in a dedicated do-