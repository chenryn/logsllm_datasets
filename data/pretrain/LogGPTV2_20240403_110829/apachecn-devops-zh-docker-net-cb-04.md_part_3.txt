在本食谱中，我们将在单个 Docker 主机上演示配置。假设该主机安装了 Docker，并且 Docker 处于默认配置。为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2 
```
为了对主机进行网络更改，您还需要根级访问。
## 怎么做…
我们需要执行的第一步是在 Docker 主机上安装 OVS。为此，我们可以直接下拉 OVS 包:
```
user@docker1:~$ sudo apt-get install openvswitch-switch
```
如前所述，OVS 有自己的命令行工具集，其中一个工具名为`ovs-vsctl`，用于直接管理 OVS 大桥。更具体地说，`ovs-vsctl`用于查看和操作 OVS 配置数据库。为了确保正确安装 OVS，我们可以运行以下命令:
```
user@docker1:~$ sudo ovs-vsctl -V
ovs-vsctl (Open vSwitch) 2.5.0
Compiled Mar 10 2016 14:16:49
DB Schema 7.12.1
user@docker1:~$ 
```
这将返回 OVS 版本号，并验证我们与 OVS 有通信。我们接下来要做的是建造一座 OVS 大桥。为此，我们将再次使用`ovs-vsctl`命令行工具:
```
user@docker1:~$ sudo ovs-vsctl add-br ovs_bridge
```
该命令将添加一个名为`ovs_bridge`的 OVS 桥。创建后，我们可以像查看任何其他网络接口一样查看网桥接口:
```
user@docker1:~$ ip link show dev ovs_bridge
6: ovs_bridge:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1
    link/ether b6:45:81:aa:7c:47 brd ff:ff:ff:ff:ff:ff
user@docker1:~$ 
```
然而，要查看任何特定于桥的信息，我们将再次需要依赖`ocs-vsctl`命令行工具。我们可以使用`show`子命令查看有关桥梁的信息:
```
user@docker1:~$ sudo ovs-vsctl show
0f2ced94-aca2-4e61-a844-fd6da6b2ce38
    Bridge ovs_bridge
        Port ovs_bridge
            Interface ovs_bridge
                type: internal
    ovs_version: "2.5.0"
user@docker1:~$ 
```
给 OVS 桥分配一个 IP 地址并改变它的状态可以再次使用更熟悉的`iproute2`工具来完成:
```
user@docker1:~$ sudo ip addr add dev ovs_bridge 10.11.12.1/24
user@docker1:~$ sudo ip link set dev ovs_bridge up
```
一旦启动，该接口就像任何其他桥接接口一样工作。我们可以看到 IP 接口已打开，本地主机可以直接访问它:
```
user@docker1:~$ ip addr show dev ovs_bridge
6: ovs_bridge:  mtu 1500 qdisc noqueue state UNKNOWN group default qlen 1
    link/ether b6:45:81:aa:7c:47 brd ff:ff:ff:ff:ff:ff
    inet 10.11.12.1/24 scope global ovs_bridge
       valid_lft forever preferred_lft forever
    inet6 fe80::b445:81ff:feaa:7c47/64 scope link
       valid_lft forever preferred_lft forever
user@docker1:~$ 
user@docker1:~$ ping 10.11.12.1 -c 2
PING 10.11.12.1 (10.11.12.1) 56(84) bytes of data.
64 bytes from 10.11.12.1: icmp_seq=1 ttl=64 time=0.036 ms
64 bytes from 10.11.12.1: icmp_seq=2 ttl=64 time=0.025 ms
--- 10.11.12.1 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.025/0.030/0.036/0.007 ms
user@docker1:~$
```
我们要做的下一件事是创建我们的 VETH 对，我们将使用它将一个容器连接到 OVS 桥:
```
user@docker1:~$ sudo ip link add ovs_end1 type veth \
peer name container_end1
```
一旦创建，我们需要将 VETH 对的 OVS 端添加到 OVS 桥。这是 OVS 不同于标准 Linux 桥的一大领域。到 OVS 的每一个连接都是以港口的形式。这是一个比 Linux 桥提供的物理交换机更强的模仿。同样，因为我们直接与 OVS 桥交互，我们需要使用`ovs-vsctl`命令行工具:
```
user@docker1:~$ sudo ovs-vsctl add-port ovs_bridge ovs_end1
```
添加后，我们可以查询 OVS 以查看该桥的所有端口:
```
user@docker1:~$ sudo ovs-vsctl list-ports ovs_bridge
ovs_end1
user@docker1:~$
```
如果您检查已定义的接口，您将看到 VETH 对的 OVS 端将`ovs-system`列为其主接口:
```
user@docker1:~$ ip link show dev ovs_end1
8: ovs_end1@container_end1:  mtu 1500 qdisc noop master ovs-system state DOWN mode DEFAULT group default qlen 1000
    link/ether 56:e0:12:94:c5:43 brd ff:ff:ff:ff:ff:ff
user@docker1:~$
```
在不涉及太多细节的情况下，这是意料之中的。`ovs-system`界面代表 OVS 数据路径。目前，只知道这是意料之中的行为。
现在 OVS 端已经完成，我们需要关注容器端。这里的第一步是启动一个没有任何网络配置的容器。接下来，我们将按照前面相同的步骤手动将容器命名空间连接到 VETH 对的另一端:
*   启动容器:
    ```
    docker run --name web1 --net=none -d jonlangemak/web_server_1
    ```
*   找到容器网络名称空间:
    ```
    docker inspect web1 | grep SandboxKey
    "SandboxKey": "/var/run/docker/netns/54b7dfc2e422"
    ```
*   将 VETH 对的容器端移到该名称空间中:
    ```
    sudo ip link set container_end1 netns 54b7dfc2e422
    ```
*   将 VETH 界面重命名为`eth0` :
    ```
    sudo ip netns exec 54b7dfc2e422 ip link set dev \
    container_end1 name eth0
    ```
*   将`eth0`接口的 IP 地址设置为该子网中的有效 IP:
    ```
    sudo ip netns exec 54b7dfc2e422 ip addr add \
    10.11.12.99/24 dev eth0
    ```
*   调出容器侧界面
    ```
    sudo ip netns exec 54b7dfc2e422 ip link set dev eth0 up
    ```
*   将 VETH 配对中的 OVS 一方拉上来:
    ```
    sudo ip link set dev ovs_end1 up
    ```
此时，容器已成功连接到 OVS，并可通过主机访问:
```
user@docker1:~$ ping 10.11.12.99 -c 2
PING 10.11.12.99 (10.11.12.99) 56(84) bytes of data.
64 bytes from 10.11.12.99: icmp_seq=1 ttl=64 time=0.469 ms
64 bytes from 10.11.12.99: icmp_seq=2 ttl=64 time=0.028 ms
--- 10.11.12.99 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 999ms
rtt min/avg/max/mdev = 0.028/0.248/0.469/0.221 ms
user@docker1:~$
```
如果我们想更深入地了解 OVS，我们可以使用以下命令检查交换机的媒体访问控制地址表:
```
user@docker1:~$ sudo ovs-appctl fdb/show ovs_bridge
port  VLAN  MAC                Age
LOCAL     0  b6:45:81:aa:7c:47    7
 1     0  b2:7e:e8:42:58:39    7 
user@docker1:~$
```
请注意它在端口`1`上获知的媒体访问控制地址。但是什么是端口`1`？要查看给定 OVS 的所有端口，可以使用以下命令:
```
user@docker1:~$ sudo ovs-dpctl show
system@ovs-system:
        lookups: hit:13 missed:11 lost:0
        flows: 0
        masks: hit:49 total:1 hit/pkt:2.04
        port 0: ovs-system (internal)
 port 1: ovs_bridge (internal)
        port 2: ovs_end1 
user@docker1:~$
```
在这里，我们可以看到`port 1`是我们提供的 OVS 桥，也是我们将 VETH 对的 OVS 端连接到的桥。
正如我们所看到的，连接到 OVS 需要大量的工作。幸运的是，有一些很好的工具可以帮助使这变得容易得多。其中一个比较著名的工具是由杰罗姆·佩塔佐尼制造的，名叫**管道**。它可以在 GitHub 上找到，网址如下:
[https://github . com/jpetazzo/pipework](https://github.com/jpetazzo/pipework)
如果我们使用管道工程来测量与 OVS 的连接，并假设桥梁已经建立，我们可以采取从`6`到`1`将容器连接到桥梁所需的步骤数。
要使用管道工程，您必须首先从 GitHub 下载它。这可以通过使用 Git 客户端来完成:
```
user@docker1:~$ git clone https://github.com/jpetazzo/pipework
…… 
user@docker1:~$ cd pipework/
user@docker1:~/pipework$ ls
docker-compose.yml  doctoc  LICENSE  pipework  pipework.spec  README.md
user@docker1:~/pipework$
```
为了演示如何使用管道工程，让我们在没有任何网络配置的情况下启动一个名为`web2`的新容器: