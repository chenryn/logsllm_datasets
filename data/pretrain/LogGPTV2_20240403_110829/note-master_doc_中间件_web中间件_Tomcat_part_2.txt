- Endpoint 通信端点 负责Socekt接收处理
- Porcessor 负责创建请求和响应 将请求转发到Catalina
- ProtocolHandler 封装Endpoint Processor
- UpgradeProtocol 处理HTTP协议的升级协议
### AJP
```xml
```
>AJP（Apache JServ Protocol）是定向包协议。因为性能原因，使用二进制格式来传输可读性文本。WEB服务器通过 TCP连接 和 SERVLET容器连接
包结构：
```
字节位置 0     1      2 3           4-(n+3)
内容     0x12 0x34 数据长度(n)       数据
```
有效载荷的前一个字节代表类型
序号|	类型|	描述
-|-|-
2|Forward Request|使用接下来的数据开始请求处理周期
7|Shutdown|Web服务器请求Servlet容器关闭自己
8|Ping|Web服务器请求Servlet容器采取控制（安全登录阶段）
10|CPing|Web服务器请求Servlet容器通过一个CPong快速响应
空|Data|主体数据及其大小
3|Send Body Chunk|Servlet?容器向Web服务器发送一个主体数据块
4|Send Headers|Servlet?容器向Web服务器发送响应头信息
5|End Response|用于标记响应结束
6|Get Body Chunk|如果请求数据未传输完，用于得到更多的请求数据
9|CPong Reply|CPingi请求应答
```mermaid
sequenceDiagram
    title 请求处理
    participant Web服务器 as Web服务器
    participant Server程序 as Servlet容器
    Web服务器->>Server程序: Forward Request
    Server程序->>Web服务器: Data
    Web服务器->>Server程序: Get Body Chunk
    Server程序->>Web服务器: Data
    Web服务器->>Server程序: Send Headers
    Server程序->>Web服务器: Send Body Chunk
    Web服务器->>Server程序: End Response
```
## Jasper
使用单独的类加载器
### 编译方式
```mermaid
sequenceDiagram
  title 运行时编译
  用户 ->> JspServlet: service()
  JspServlet ->> JspServlet: 获取JSP文件路径
  JspServlet ->> JspServlet: 判断当前请求是否为预编译请求
  JspServlet ->> JspServlet: 执行请求serviceJspFile()
  alt 找不到对应JspServletWrapper
    JspServlet ->> JspServletWrapper: 执行请求
    JspServletWrapper ->> JspComplicationContext: 开发环境或第一次调用，执行编译
    JspServletWrapper ->> JspServletWrapper: 重新加载并实例化JSP的Servlet类
    JspServletWrapper ->> JspServletWrapper: 更新上次使用时间
    JspServletWrapper ->> JspServletWrapper: 调用JSP Servlet执行请求
  end
```
编译结果：
- 首选存放在 context-param 的scratchdir
- 否则是 $CATALINA_BASE/work/Engine名称/Host名称/Context名称
- 再否则在系统临时文件目录下
预编译：
jspc
### 编译原理
```java
// 继承该类
class index_jsp extends HttpJspBase
```
```java
private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();
private static Map _jspx_dependants; // 依赖的外部资源
private static final Set _jspx_imports_packages = new HashSet(); // 导入的包
private static final Set _jspx_imports_classes; // 导入的类
```
`_jspService` 处理请求：
- 定义了out pageContext session application config page 等局部变量
- 对于静态内容调用out.write
- 处理jsp标签
```mermaid
sequenceDiagram
  title JSP编译流程
  外部 ->> JspComplicationContext: 编译
  JspComplicationContext ->> Compiler: 是否过期
  Compiler ->> JspComplicationContext: 没过期直接返回
  opt 编译过程
    JspComplicationContext ->> Compiler: 删除生成的文件
    Compiler ->> ParserController: 解析JSP页面
    Compiler ->> Generator: 生成Java源码
    Compiler ->> Compiler: 生成Class文件
  end
```
## Session机制
主要由每个 Context 容器内的一个 Manager 对象来管理 Session，默认为 StandardManager。通过 Request 获取 Session 会执行创建 Session，Session 存放在个 ConcurrentHashMap 中。
StandardContext 会有个定时扫描的线程去清理过期的 Session，Session 创建事件的监听则是通过 StandardContext 将 HttpSessionListener 类型的 Listener 取出，然后依次调用它们的 sessionCreated 方法。
## 配置管理
### JVM配置
```bat
:: JVM启动参数
set "JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS%"
```
系统属性：略
### 服务器配置
catalina.properties: 容器启动阶段的配置
server.xml: 服务器核心配置
- Server
- Service
- Executor 线程池配置 默认其他组件会创建自己的线程池
  ```xml
  ```
- Connector 默认配置了两个 HTTP 和 AJP
  ```xml
  ```
- Engine 可以指定虚拟主机
- Host
  - name 域名
  - appBase 存放应用的目录
  - unpackWARs 是否解压war包
  - autoDeploy 定期检测 自动部署
  - Alias 可以配置新的域名
- Context
  - docBase 具体应用的目录
  - path Context路径
- CookieProcessor 指定cookie处理器
- Loader 用于管理 web 应用的类加载器
  - delegate 属性可以打破双亲委派模型
  - reloadable 属性会监控资源变化后重新加载应用
  - loaderClass 指定类加载器的具体实现
- Manger 会话管理器
  - Standard和Presistent
- Resources 资源共享
  ```xml
  ```
- JarScanner
- content.xml
### Web 应用配置
- context-param: ServerContext.getInitParameter() 可以获取到的参数
- session-config 会话配置
  - 三种追踪模式 COOKIE URL SSL
- servlet 声明servlet及其映射
- listener
- filter
- mime-mapping 映射文件类型与对应的content-type
- welcome-file-list
- error-page
- locale-encoding-mapping-list 本地化与响应编码的关系
- 安全配置
- jndi配置
### 内置的 Filter
- CorsFilter：解决跨域问题
- CsrfPreventionFilter：防止CSRF攻击
- ExpiresFilter：控制缓存过期与否
- FailedRequestFilter：解析参数失败就返回错误
- RemoteAddrFilter：只放行符合特定表达式的IP地址
- RemoteHostFilter：只放行符合特定表达式的主机
- RemoteIpFilter：前方有负载均衡器的情况下 将getRemoteAddr()替换为 X-Forwarded-For 中的IP
- RequestDumperFilter：以日志形式输出请求和响应对象 主要用于调试
- SetCharacterEncodingFilter：设置请求编码
### Tomcat 管理
`/host-manager/html`
## 集群
```mermaid
stateDiagram-v2
  LB --> WebServer1
  WebServer1 --> Tomcat1
  WebServer1 --> Tomcat2
  Tomcat1 --> Tomcat2
  Tomcat2 --> Tomcat1
  LB --> WebServer2
  WebServer2 --> Tomcat3
  WebServer2 --> Tomcat4
  Tomcat3 --> Tomcat4
  Tomcat4 --> Tomcat3
```
Tomcat 集群实现的原理就是在节点之间同步 Session
Tomcat 本身就不适合配置集群 一种通用的解决方案是 接入层为 Nginx
Nginx 对后端的Tomcat进行负载均衡 
Tomcat上的Web应用最好是设计成无状态的 如果仍然需要保持会话 最好使用一台独立的服务器来存储会话 比如 Redis 
而不要使用Tomcat的会话同步功能
## 安全
安装部署：下载安全 移除自带的几个Web应用
server.xml: 
- 删除不必要的连接器
- 删除UserDatabase
- 修改关键配置：8005管理端口
- 避免恶意web应用的自动启动：autoDeploy
- 允许有限的客户端访问
- 避免将异常堆栈打印到客户端
- listing会导致目录泄漏以及DoS攻击
应用安全
传输安全(SSL)
JAVA安全策略
## 优化
### JVM 优化
### Tomcat 配置优化
server.xml:
- 链接器maxConnections 属性：超过该属性的连接会被阻塞
- tcpNoDelay：禁止TCP缓存并发送
- maxKeepAliveRequest
- socketBuffer
- enableLookups
网络传输优化：
- 静态文件压缩
- 高性能链接器(NIO NIO2)
- 禁用自动部署
JSP页面配置(web.xml):
- development 设置为false 不自动检测JSP页面变动
- ...
继承 web 服务器：
- 动静分离
- 负载均衡
### 应用优化
- 减少通信次数
- 减少通信数据流
- 推迟会话创建
- 不在会话存储大对象
- 合理定义对象作用域
- 使用连接池提高性能
- 使用缓存提高性能
- 最小化日志
## 附加功能
- 嵌入式启动
- websocket