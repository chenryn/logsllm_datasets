2-91
日志学院
验证方式：登录应用系统运维人员esb账号，查看客户手机号码字段是已脱敏后的信息。
同时，在原始日志内容中，客户手机号码是已脱敏后的信息。
2-92
日志学院
我们可以看到，添加的两个匹配前后缀规则，都生效了。
字段重命名
设置字段重命名算子，可以修改现存字段的字段名称，经常用来简化提取嵌套多层字段内特
定字段时的命令输入。如下图：
在“来源字段”和“目标字段”分别输入重命名对象和新字段名。
支持的输入语法包括:
• 字段名：如a.b.c
• 通配符：如a.*.c
经过上图内的步骤，成功将字段a.*.c内容用字段a.c代替。
注意：a.b.c这种以.连接的字段名为嵌套多层字段。上个例子中的eab.phone.geo.phone即
为嵌套多层字段。
2-93
日志学院
结构体解析
系统在输出日志的过程中，有时会出现不可见字符，不可预计的空格，或是由于编码不同导
致字符长度不一等复杂的情况。日志易的结构体解析算子对struct结构进行了定义，您可通
过直接定义准备提取的字符编码、字节长度、数据类型、字段名称等结构体，来定义需要解
析的数据内容。
使用结构化解析，默认支持定义的结构体为字段名称、字节长度、数据类型（其他定义见高
级配置）。表达字段的语法为“字段名:长度(字节):类型”。三个函数依次排列，多个字段之间
用逗号分隔开，并遵循以下规则:
• 字段名: 支持嵌套语法，如a.b.c;
• 长度（字节）：若是中文则与编码相关;
• 类型：默认为字符串类型，在表达式内用缩略字母来代替，一共有5类，缩略字母与其代
表的含有如下:
i:int
◦
l:long
◦
f:float
◦
d:double
◦
s:string
◦
例，样例为“aaa111 ”的内容格式，添加“结构体解析”解析规则，选择“raw_message”字段，
最终目的是将“aaa”以字符串格式保存进字段名为name的函数内，将“111 ”以整数为格式保
存进字段名为 “val”的函数内。
此时，结构体定义应为“name:8,val:4:i”，“8”和“4”分别为name和val字段的长度，中间用逗
号隔开，name使用的是默认函数类型，因此类型可忽略，而val用i代表函数类型为整数，
最后得到结果如图。
2-94
日志学院
重定向解析
当单个字段提取规则里使用了较多的条件控制逻辑时，规则看起来不太清晰。这时候，可以
将不同逻辑拆分到不同的提取规则里，然后在主规则中使用重定向解析算子，将日志分发到
不同规则中。
配置界面如下：
一般来说，重定向解析算子，要搭配条件控制使用。条件控制请参考4.3小结的算子的条件
控制部分，在此就不多赘述了。
2-95
日志学院
自定义解析
为了适应日志数据格式千变万化，日志易不断推出新的高级算子。对于一些比较灵活的解析
状况，可以通过‘自定义解析’进行配置。
自定义解析适用但不限于以下场景：
1、解析出来的字段需要批量重命名，如将多个json.io_stat.util类型的字段重命名为util；
2、在字段解析时就对字段进行计算，如根据日志中的交易开始时间和交易结束时间求交易
耗时；
3、在字段解析时进行条件判断，如根据年龄为用户画像打上不同的标签；
自定义解析的界面如下：
目前版本，日志易提供有几种可选的自定义规则可以填入规则名称中：script、dissect、unicode、
base64、metadata。
script 解析
该算子提供更高级的流式数据处理能力。在算子规则中，可以使用数十种函数、变量赋值、
遍历循环、逻辑判断等功能。算子语法如下。
1. 运算符：加(+), 减(-), 乘(*), 除(/), 取余(%)
2. 内置函数：
 通用操作:len,isempty, typeof
 数值操作:abs,ceil,floor,log,max,min,pow,exp,sqrt,acos
 字符串操作:upper,lower,trim,substring,match,format,split
 多值操作:mvrange,mvzip,mvszip,mvappend,mvcount,mvfind,mvindex,mvjoin,
mvsort,mvdedup
 字典操作:mapkeys,mapvalues
 日期操作:formatdate,parsedate
 类型判断:isnull,isnum,isstr,islist,isdict
2-96
日志学院
 类型转换 tolong,tolong2,todouble,todouble2,tostring, todict
 其他： cidrmatch,relative_time,urldecode
3. 条件操作：等于(==),不等于(!=), 小于(), 小于等于(=), 是否
定义(isdef)
4. 逻辑组合：与(&&), 或(||), 非(!)
5. 逻辑判断：if，while，for
此外，用户可以在该算子规则中，定义和访问数组或字典类型的临时变量。例如：
list=[1,2,3,4,5];
dict={0:"a",1:"b"};
list[0]=1;
dict["k"]="v";
为了在语法中引用日志已存在的字段，可以使用source["xxx"]代表。如果是多层字段，比如
user.name，则写为 source["user"]["name"]。如下图所示，source["fields"]就是上一个JSON
算子解析出来的fields字段，注意在页面填写配置时，整段规则要转换为一段文本字符串，
需要转义双引号：
script 算子中的运算和函数，基本和 SPL 语法一致，只有逻辑判断部分稍有区别。为减少
在界面上书写语句块时候的麻烦，script 算子中的条件语句不包含多条时，可以忽略大括号。
比如 if 判断中，可以省略大括号写成：
{
"script":
"source[\"name\"]=\"liukang\";source[\"age\"]=18;
if(source[\"name\"]==\"yottabyte\")source[\"alias\"]=\"rizhiyi\";
elseif(source[\"age\"]<18)source[\"info\"]=\"tooyoung\";
elsesource[\"errorMsg\"]=\"Nosuchuser\";"
}
比如 for 循环。假设我们有一个多层嵌套字段，打算把内层字段全部重命名为顶层字段，
直接使用重命名算子不太方便，就可以用for 循环实现：
2-97
日志学院
比如 while 循环。假设我们有如下数据，解析出两个多值字段，prices 和 qtys，多值长度
取决于 kv.count 字段值。
我们想要得到一个新的多值字段，是二者一一对应相乘的结果，比如 prices[0]*qtys[0]，以
此类推。则在 script 算子中可以写成：
{
"__codec_type":"script",
"script":
"i=0;source[\"prices_qtys\"]=[];
while(i<source[\"kv\"][\"count\"])
{
source[\"prices_qtys\"]=
mvappend(source[\"prices_qtys\"],source[\"prices\"][i]*source[\"qtys\"][i]);
i=i+1;
}"
}
2-98
日志学院
dissect 解析
该算子针对大多数日志格式本身是固定分隔符的情况做了高性能设计。用户用分隔符语法格
式来描述日志的格式，算子依照格式定义顺序解析。适用于分隔符、字段数量和顺序固定的
日志。
在apache访问日志的解析场景下，dissect解析算子比正则表达式解析算子的性能高一个数
量级。
{
{
#解析的字段名
"source":"",
#日志格式
"format":"%{field}",
#可选项，是否使用严格的解析，默认是false。使用严格解析时，描述格式的字
段需要全部抽取出来才解析成功
"strict_mode":false,
#可选项，是否处理转义字符，默认是false，不处理。转义字符是前边加\的字符
"enable_escape":false,
#"condition":…
}
dissect格式
语法说明:
%{字段}分隔符%{字段}
字段示例如下:
1. 普通字段:%{field1}
2. 有类型的字段:%{field1:int}或者%{field1:i}
3. 嵌套字段 %{field1.field2}
4. kv字段 %{field1}%{@field1} 前一个field1的内容作为字段名，第二个内容作为字段值
5. 空字段 %{} 或者%{#field}
字段类型包括：
 i/int
 l/long
 f/float
 d/double
 s/string
比如对http://rizhiyi.com/index.do?id=123写这么一段配置：
http://%{domain}/%{#url}?%{arg1}=%{@arg1:i}
2-99
日志学院
则最终生成的 Event 内容是这样的：
unicode 解析
unicode解析规则可以解析python打印的日志。
规则内容：
{
#配置默认的字段
"source":"",
#codec_type必填，固定base64decode
"codec_type":"unicode_decode"
#"condition":{"rule":{"field":"a","condition":"equal","value":"1"}}
#"add_fields":[{"name":"matched","value":"1"}]
}
示例
日志:PartyBasicInfoService_\u5ba2\u6237\u57fa\u672c\u4fe1\u606f\u670d\u52a1
解析结果：PartyBasicInfoService_客户基本信息服务
2-100
日志学院
base64 解析
加密日志以base64方式加密，接入时需要解密但不需要解析加密字段，日志易提供base64
的解析规则，具体使用可参考下面的例子：
1. 日志样例内容填写‘aGVsbG8gYmFzZTY0’；
2. 添加自定义规则；
3. 规则名称填写‘codec’；
4. 规则内容填写如下：
"source":"raw_message",
"codec_type":"base64decode"
5. 点击解析，得到解析结果为hellobase64。
metadata 修改
在高级配置中可以修改元数据的值，包括@source,@ip,@hostname,@tag,@appname,
raw_message等。特殊的是，还可以修改 @index 的值——这会覆盖在路由规则中定义的索
引配置。
{
"source":"@index",
2-101
日志学院
"value":"metricidx"
}
注意：写在value内的索引名称，必须在"索引配置"中预先定义完毕，否则执行会失败。
使用样例
以下举几个常用的script解析的使用样例：
1、if判断使用
注意点：
 每个语句后面加个 ";"
 可使用多个语句，使用 ";" 进行分隔
 可以使用多个elseif 语句
使用if 大部分场景是用在添加字段的时候，如果某字段的值与条件相符，就添加字段（如
客户的需求为，如果解析出A字段，则新增A1字段，A1字段的值与A字段的值相关）。
3.0.0.21后的版本 if(xxx)for(xxx) 后面赋值不需要加{}，
#3.0.0.21以前
{