 300
 200
 100
 0
 1
 10
Toff (s)
 100
Figure 10: Average user throughput in face of microscopic on-off at-
tacks. The user trafﬁc is long-running TCP. There are 100K senders.
Each sender’s fair share bottleneck bandwidth is 100Kbps.
on-off attacks and show that with NetFence, the attack trafﬁc’s
shape does not reduce a legitimate user’s throughput.
The simulation topology is the same as in the previous single-
bottleneck simulations. All legitimate users send long-running TCP
trafﬁc, while attackers send on-off UDP trafﬁc. In the on-period
Ton, an attacker sends at the rate of 1Mbps; in the off-period Tof f ,
it does not send any trafﬁc. All attackers synchronize their on-
periods to create the largest trafﬁc bursts. There are 100K simulated
senders, each having a fair share bandwidth of at least 100Kbps.
In these simulations, we use two different values for Ton: 0.5s
and 4s. For each Ton, we vary the off-period length Tof f from
1.5s to 100s. Figure 10 shows the simulation results. As we can
see, the average user throughput is at least a user’s fair share rate
as if attackers were always active (100Kbps), indicating that the
attack cannot reduce a legitimate user’s fair share of bandwidth. As
the attackers’ off-period length increases toward 100s, a legitimate
user can achieve a throughput close to 400Kbps, indicating that
long running TCP users can use most of the bottleneck bandwidth
when the attackers’ off-period is long.
7. DISCUSSION
Fair Share Bound: When a disproportionally large number (B)
of attackers attack a narrow link C (e.g., a million bots attacking a
1Mbps link), the fair share lower bound O( C
G+B ) achieved by Net-
Fence or per-sender fair queuing (e.g., [27]) is small. However, this
lower bound is still valuable, because without it, a small number
of attackers can starve legitimate TCP ﬂows on a well-provisioned
link (e.g., 10Gbps). Although this guarantee does not prevent large-
scale DoS attacks from degrading a user’s network service, it mit-
igates the damage of such attacks with a predictable fair share,
without trusting receivers or requiring the network to identify and
remove malicious trafﬁc. Other means, like congestion quota dis-
cussed below, can be used to further throttle malicious trafﬁc.
If we assume legitimate users have limited
Congestion Quota:
trafﬁc demand while attackers aim to persistently congest a bottle-
neck link, we can further weaken a DoS ﬂooding attack by impos-
ing a congestion quota, an idea borrowed from re-ECN [9]. That
is, an access router only allows a host to send a limited amount
of “congestion trafﬁc” through a bottleneck link within a period of
time. Congestion trafﬁc can be deﬁned as the trafﬁc that passes a
rate limiter when its rate limit decreases. With a congestion quota,
if an attacker keeps ﬂooding a link, its trafﬁc through the link will
be throttled after it consumes its congestion quota.
Convergence Speed: It may take a relatively long time (e.g., 100s-
200s) for NetFence to converge to fairness. This is because the
control interval Ilim is on the order of a few seconds (two seconds
in our implementation), much longer than a typical RTT on the
Internet. This convergence speed is acceptable in the NetFence
design, because a rate limiter persists for a much longer period of
time (i.e., on the order of hours).
Equal Cost Multiple Path (ECMP): NetFence assumes that a
ﬂow’s path is relatively stable and the bottleneck links on the path
do not change rapidly. One practical concern arises as routers may
split trafﬁc among equal-cost multi-paths for load balancing. Fortu-
nately, most ECMP implementations in practice (e.g., [12]) would
assign a ﬂow’s packets to the same path to avoid packet reordering.
Thus, we expect NetFence to work well with ECMP.
8. RELATED WORK
At the architectural level, NetFence combines the elements of
capability-based systems [48,47,35] and re-ECN/re-feedback [8,9].
In contrast to capability tokens, NetFence’s congestion policing
feedback carries valuable network congestion information. Re-
ECN/re-feedback is a congestion policing framework that incen-
tivizes rational senders to honestly report downstream path con-
gestion. Routers will discard the packets from the senders that
under-report downstream congestion with high probability before
they reach the destinations. In contrast, NetFence is a DoS defense
architecture that uses unspoofable congestion policing feedback to
scalably and robustly guarantee a sender’s fair share of bottleneck
bandwidth in face of attacks. Attackers cannot send packets with
false congestion feedback reporting no or low levels of congestion
to ﬂood a link. Instead, they can at most send packets reporting the
actual levels of congestion and will not gain more bandwidth than
honest senders. In addition, DoS victims can use the unspoofable
feedback as capability tokens to suppress unwanted trafﬁc. ECN-
nonce [16] robustly signals congestion from the network to a honest
sender even when a receiver attempts to hide congestion, while Net-
Fence enables robust congestion signaling from congested routers
to access routers when both senders and receivers are malicious.
NetFence’s request packet protection mechanism is inspired by
Portcullis [35] that uses computational puzzles to impose delay on
senders. Differently, NetFence uses a rate limiting algorithm that
does not require proof-of-work (PoW) nor a network-wide puzzle
synchronization mechanism. This algorithm is similar in spirit to
LazySusan [13] which substitutes resource-based PoW for latency-
based PoW. Different from LazySusan, NetFence uses a sender’s
waiting time to set its request packet’s priority level, and guarantees
the eventual delivery of a legitimate request packet.
Several DoS defense systems aim to enable a victim to install
network ﬁlters to stop unwanted trafﬁc [5, 2, 27], or to control who
can send to it [6]. Unlike them, NetFence does not use per-host
queues at congested routers to separate legitimate trafﬁc from at-
tack trafﬁc in case compromised receivers collude with malicious
senders. Pushback [30] sends hop-by-hop pushback messages from
a congested router to install per-(incoming interface, destination
preﬁx) rate limiters to reduce DoS ﬂooding trafﬁc. NetFence does
not require hop-by-hop deployment, enables a victim to suppress
unwanted trafﬁc, and provides per-sender fairness at bottleneck
links: attackers cannot diffuse their trafﬁc to many destinations to
gain unfair bandwidth shares. AIP [2] uses trusted host hardware to
block unwanted attack trafﬁc, while NetFence places policing func-
tions inside the network and does not require trusted host hardware.
Speakup [45] and Kill-Bots [22] address application-layer DoS
attacks, while NetFence addresses network-layer DoS attacks. Sev-
eral systems use overlay networks [1, 23, 15, 40, 38, 42] or middle-
boxes [10, 32] to mitigate DoS attacks against dedicated destina-
tions. DoS mitigation products on today’s market (e.g., [43]) offer
in-network anomaly detection and attack trafﬁc removal services
near the victims. Kreibich et al. [25] propose to use packet symme-
265try to detect and remove attack trafﬁc. This body of work requires
fewer changes to routers, but NetFence can remove attack trafﬁc
near its origins and protect all destinations on the Internet once de-
ployed. Moreover, it places the attack trafﬁc identiﬁcation function
at the receivers to keep the network open to new applications.
NetFence’s approach to scalability is inspired by CSFQ [41] that
achieves per-ﬂow fairness without per-ﬂow queues in the core routers.
Differently, NetFence enables DoS victims to suppress attack traf-
ﬁc, and provides per-sender rather than per-ﬂow fairness.
9. CONCLUSION
This paper presents the design and evaluation of NetFence, an
architecture that places the network at the ﬁrst line of DoS defense.
NetFence uses a key mechanism, secure congestion policing feed-
back, to enable scalable and robust trafﬁc policing inside the net-
work. Bottleneck routers use the congestion policing feedback to
signal congestion to access routers, and access routers use it to ro-
bustly police senders’ trafﬁc.
In case compromised senders and
receivers collude in pairs to ﬂood the network, NetFence limits the
damage of this attack by providing each sender (malicious or legiti-
mate) its fair share of bottleneck capacity without keeping per-host
state at bottleneck routers.
In case attackers send DoS ﬂoods to
innocent victims, NetFence enables the DoS victims to use the se-
cure congestion policing feedback as capability tokens to suppress
unwanted trafﬁc. Using a combination of a Linux implementation,
simulations, and theoretic analysis, we show that NetFence is an
effective DoS solution that reduces the amount of state maintained
by a congested router from per-host [48, 27] to per-AS.
Acknowledgment
The authors thank Jeff Chase, David Harrison, Yongqiang Liu, and
the anonymous SIGCOMM reviewers for their insightful comments,
and David Oran for shepherding this paper. This work is supported
in part by NSF awards CNS-0925472 and CNS-0845858.
10. REFERENCES
[1] D. Andersen. Mayday: Distributed Filtering for Internet Services. In USENIX
USITS, 2003.
[2] D. G. Andersen, H. Balakrishnan, N. Feamster, T. Koponen, D. Moon, and
S. Shenker. Accountable Internet Protocol (AIP). In ACM SIGCOMM, 2008.
[3] T. Anderson, T. Roscoe, and D. Wetherall. Preventing Internet Denial of Service
with Capabilities. In ACM HotNets-II, 2003.
[4] Arbor Networks. Worldwide Infrastructure Security Report, Volume V.
http://www.arbornetworks.com/en/research.html, 2009.
[5] K. Argyraki and D. R. Cheriton. Scalable Network-layer Defense Against
Internet Bandwidth-Flooding Attacks. ACM/IEEE ToN, 17(4), 2009.
[6] H. Ballani, Y. Chawathe, S. Ratnasamy, T. Roscoe, and S. Shenker. Off by
default! In ACM Hotnets-IV, 2005.
[7] BGP Routing Table Statistics. http://bgp.potaroo.net/as6447/, 2010.
[8] B. Briscoe, A. Jacquet, C. D. Cairano-Gilfedder, A. Salvatori, A. Soppera, and
M. Koyabe. Policing Congestion Response in an Internetwork using
Re-feedback. In ACM SIGCOMM, 2005.
[9] B. Briscoe, A. Jacquet, T. Moncaster, and A. Smith. Re-ECN: A Framework for
Adding Congestion Accountability to TCP/IP. http://tools.ietf.org/
id/draft-briscoe-tsvwg-re-ecn-tcp-motivation-01.txt, 2009.
[10] M. Casado, P. Cao, A. Akella, and N. Provos. Flow-Cookies: Using Bandwidth
Ampliﬁcation to Defend Against DDoS Flooding Attacks. In IWQoS, 2006.
[11] D.-M. Chiu and R. Jain. Analysis of the Increase and Decrease Algorithms for
Congestion Avoidance in Computer Networks. Comput. Netw. ISDN Syst.,
17(1), 1989.
[12] CSS Routing and Bridging Conﬁguration Guide. http://www.cisco.com/
en/US/docs/app_ntwk_services/data_center_app_services/
css11500series/v7.30/configuration/routing/guide/IP.html,
2010.
[13] J. Crowcroft, T. Deegan, C. Kreibich, R. Mortier, and N. Weaver. Lazy Susan:
Dumb Waiting as Proof of Work. Technical Report UCAM-CL-TR-703,
University of Cambridge, Computer Laboratory, 2007.
[14] Deterlab. http://www.deterlab.net/, 2010.
[15] C. Dixon, A. Krishnamurthy, and T. Anderson. Phalanx: Withstanding
Multimillion-node Botnets. In USENIX/ACM NSDI, 2008.
[16] D. Ely, N. Spring, D. Wetherall, S. Savage, and T. Anderson. Robust
Congestion Signaling. In In IEEE ICNP, 2001.
[17] F-Secure. Calculating the Size of the Downadup Outbreak. http://www.f-
secure.com/weblog/archives/00001584.html, 2009.
[18] S. Floyd and V. Jacobson. Random Early Detection Gateways for Congestion
Avoidance. IEEE/ACM ToN, 1(4), 1993.
[19] M. Handley, E. Kohler, A. Ghosh, O. Hodson, and P. Radoslavov. Designing
Extensible IP Router Software. In USENIX/ACM NSDI, 2005.
[20] Helion Technology. AES Cores. http://www.heliontech.com/aes.htm,
2010.
[21] Intel AES Instructions Set. http://software.intel.com/en-us/
articles/intel-advanced-encryption-standard-aes-
instructions-set/, 2010.
[22] S. Kandula, D. Katabi, M. Jacob, and A. Berger. Botz-4-Sale: Surviving DDoS
Attacks that Mimic Flash Crowds. In USENIX/ACM NSDI, 2005.
[23] A. Keromytis, V. Misra, and D. Rubenstein. SOS: Secure Overlay Services. In
ACM SIGCOMM, 2002.
[24] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The Click
Modular Router. ACM TOCS, 18(3), 2000.
[25] C. Kreibich, A. Warﬁeld, J. Crowcroft, S. Hand, and I. Pratt. Using Packet
Symmetry to Curtail Malicious Trafﬁc. In ACM Hotnets-IV, 2005.
[26] X. Liu, A. Li, X. Yang, and D. Wetherall. Passport: Secure and Adoptable
Source Authentication. In USENIX/ACM NSDI, 2008.
[27] X. Liu, X. Yang, and Y. Lu. To Filter or to Authorize: Network-Layer DoS
Defense Against Multimillion-node Botnets. In ACM SIGCOMM, 2008.
[28] X. Liu, X. Yang, and Y. Xia. NetFence: Preventing Internet Denial of Service
from Inside Out. Technical Report 2010-01 (available at http://www.cs.
duke.edu/nds/ddos/netfence-tr.pdf), Duke University, 2010.
[29] S. Luo and G. A. Marin. Realistic Internet Trafﬁc Simulation through Mixture
Modeling and A Case Study. In Winter Simulation Conference, 2005.
[30] R. Mahajan, S. Bellovin, S. Floyd, J. Ioannidis, V. Paxson, and S. Shenker.
Controlling High Bandwidth Aggregates in the Network. ACM SIGCOMM
CCR, 32(3), 2002.
[31] R. Mahajan, S. Floyd, and D. Wetherall. Controlling High-Bandwidth Flows at
the Congested Router. In IEEE ICNP, 2001.
[32] A. Mahimkar, J. Dange, V. Shmatikov, H. Vin, and Y. Zhang. dFence:
Transparent Network-based Denial of Service Mitigation. In USENIX/ACM
NSDI, 2007.
[33] Z. M. Mao, J. Rexford, J. Wang, and R. Katz. Towards an Accurate AS-Level
Traceroute Tool. In ACM SIGCOMM, 2003.
[34] M. Mathis, J. Semke, J. Mahdavi, and T. Ott. The Macroscopic Behavior of the
TCP Congestion Avoidance Algorithm. ACM SIGCOMM CCR, 27(3), 1997.
[35] B. Parno, D. Wendlandt, E. Shi, A. Perrig, B. Maggs, and Y.-C. Hu. Portcullis:
Protecting Connection Setup from Denial-of-Capability Attacks. In ACM
SIGCOMM, 2007.
[36] R. Perlman. Network Layer Protocols with Byzantine Robustness. MIT Ph.D.
Thesis, 1988.
[37] K. Ramakrishnan, S. Floyd, and D. Black. The Addition of Explicit Congestion
Notiﬁcation (ECN) to IP. RFC 3168, 2001.
[38] E. Shi, I. Stoica, D. Andersen, and A. Perrig. OverDoSe: A Generic DDoS
Protection Service Using an Overlay Network. Technical Report
CMU-CS-06-114, Carnegie Mellon University, 2006.
[39] M. Shreedhar and G. Varghese. Efﬁcient Fair Queueing Using Deﬁcit Round
Robin. In ACM SIGCOMM, 1995.
[40] A. Stavrou and A. Keromytis. Countering DoS Attacks with Stateless Multipath
Overlays. In ACM SIGCOMM CCS, 2005.
[41] I. Stoica, S. Shenker, and H. Zhang. Core-Stateless Fair Queueing: a Scalable
Architecture to Approximate Fair Bandwidth Allocations in High-Speed
Networks. IEEE/ACM ToN, 2003.
[42] R. Stone. CenterTrack: An IP Overlay Network for Tracking DoS Floods. In
USENIX Security Symposium, 2000.
[43] DDoS Mitigation to the Rescue. https://www.arbornetworks.com/
dmdocuments/DDoS%20Mitigation%20to%20the%20Rescue.pdf, 2010.
[44] J. S. Turner. New Directions in Communications (Or Which Way to the
Information Age?). IEEE Communications Magazine, 1986.
[45] M. Walﬁsh, M. Vutukuru, H. Balakrishnan, D. Karger, and S. Shenker. DDoS
Defense by Offense. In ACM SIGCOMM, 2006.
[46] Y. Xia, L. Subramanian, I. Stoica, and S. Kalyanaraman. One More Bit is
Enough. IEEE/ACM ToN, 16(6), 2008.
[47] A. Yaar, A. Perrig, and D. Song. SIFF: A Stateless Internet Flow Filter to
Mitigate DDoS Flooding Attacks. In IEEE Security Symposium, 2004.
[48] X. Yang, D. Wetherall, and T. Anderson. TVA: A DoS-limiting Network
Architecture. IEEE/ACM ToN, 16(6), 2008.
266