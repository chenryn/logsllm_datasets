### 3. Simulation Results and Analysis

#### 3.1 Microscopic On-Off Attacks

Figure 10 illustrates the average user throughput under microscopic on-off attacks, where the user traffic is long-running TCP. The simulation involves 100,000 senders, each with a fair share bottleneck bandwidth of 100 Kbps.

**Figure 10: Average User Throughput Under Microscopic On-Off Attacks**

| Toff (s) | 0 | 1 | 10 | 100 |
|----------|---|---|----|-----|
| 300      |   |   |    |     |
| 200      |   |   |    |     |
| 100      |   |   |    |     |

In these simulations, we use two different values for the on-period \( T_{on} \): 0.5 seconds and 4 seconds. For each \( T_{on} \), we vary the off-period length \( T_{off} \) from 1.5 seconds to 100 seconds. The results in Figure 10 show that the average user throughput remains at least at the fair share rate of 100 Kbps, even when attackers are active. As the off-period length increases towards 100 seconds, legitimate users can achieve a throughput close to 400 Kbps, indicating that long-running TCP users can utilize most of the bottleneck bandwidth when the attackers' off-period is long.

### 4. Discussion

#### 4.1 Fair Share Bound

When a disproportionately large number of attackers (B) target a narrow link (C), the fair share lower bound achieved by NetFence or per-sender fair queuing (e.g., [27]) is small, specifically \( O\left(\frac{C}{G + B}\right) \). However, this lower bound is still valuable because it prevents a small number of attackers from starving legitimate TCP flows on well-provisioned links (e.g., 10 Gbps). Although this guarantee does not prevent large-scale DoS attacks from degrading network service, it mitigates the damage by providing a predictable fair share without requiring the network to identify and remove malicious traffic. Other mechanisms, such as congestion quotas, can further throttle malicious traffic.

#### 4.2 Congestion Quota

If we assume that legitimate users have limited traffic demand while attackers aim to persistently congest a bottleneck link, we can further weaken a DoS flooding attack by imposing a congestion quota, an idea borrowed from re-ECN [9]. This means that an access router only allows a host to send a limited amount of "congestion traffic" through a bottleneck link within a given period. Congestion traffic is defined as traffic that passes a rate limiter when its rate limit decreases. With a congestion quota, if an attacker keeps flooding a link, its traffic will be throttled after it consumes its quota.

#### 4.3 Convergence Speed

NetFence may take a relatively long time (e.g., 100-200 seconds) to converge to fairness. This is because the control interval \( I_{lim} \) is on the order of a few seconds (two seconds in our implementation), much longer than a typical RTT on the Internet. This convergence speed is acceptable in the NetFence design, as a rate limiter persists for a much longer period (i.e., on the order of hours).

#### 4.4 Equal Cost Multiple Path (ECMP)

NetFence assumes that a flow's path is relatively stable and the bottleneck links on the path do not change rapidly. One practical concern is that routers may split traffic among equal-cost multi-paths for load balancing. Fortunately, most ECMP implementations (e.g., [12]) assign a flow's packets to the same path to avoid packet reordering. Thus, NetFence is expected to work well with ECMP.

### 5. Related Work

At the architectural level, NetFence combines elements of capability-based systems [48, 47, 35] and re-ECN/re-feedback [8, 9]. Unlike capability tokens, NetFence's congestion policing feedback carries valuable network congestion information. Re-ECN/re-feedback is a congestion policing framework that incentivizes rational senders to honestly report downstream path congestion. Routers discard packets from senders that under-report downstream congestion with high probability before they reach the destinations. In contrast, NetFence is a DoS defense architecture that uses unspoofable congestion policing feedback to scalably and robustly guarantee a sender's fair share of bottleneck bandwidth in the face of attacks. Attackers cannot send packets with false congestion feedback reporting no or low levels of congestion to flood a link. Instead, they can at most send packets reporting actual congestion levels and will not gain more bandwidth than honest senders. Additionally, DoS victims can use the unspoofable feedback as capability tokens to suppress unwanted traffic. ECN-nonce [16] robustly signals congestion from the network to a honest sender even when a receiver attempts to hide congestion, while NetFence enables robust congestion signaling from congested routers to access routers when both senders and receivers are malicious.

NetFence's request packet protection mechanism is inspired by Portcullis [35], which uses computational puzzles to impose delay on senders. Differently, NetFence uses a rate-limiting algorithm that does not require proof-of-work (PoW) nor a network-wide puzzle synchronization mechanism. This algorithm is similar in spirit to LazySusan [13], which substitutes resource-based PoW for latency-based PoW. Unlike LazySusan, NetFence uses a sender's waiting time to set its request packet's priority level and guarantees the eventual delivery of a legitimate request packet.

Several DoS defense systems aim to enable a victim to install network filters to stop unwanted traffic [5, 2, 27], or to control who can send to it [6]. Unlike them, NetFence does not use per-host queues at congested routers to separate legitimate traffic from attack traffic in case compromised receivers collude with malicious senders. Pushback [30] sends hop-by-hop pushback messages from a congested router to install per-(incoming interface, destination prefix) rate limiters to reduce DoS flooding traffic. NetFence does not require hop-by-hop deployment, enables a victim to suppress unwanted traffic, and provides per-sender fairness at bottleneck links: attackers cannot diffuse their traffic to many destinations to gain unfair bandwidth shares. AIP [2] uses trusted host hardware to block unwanted attack traffic, while NetFence places policing functions inside the network and does not require trusted host hardware. Speakup [45] and Kill-Bots [22] address application-layer DoS attacks, while NetFence addresses network-layer DoS attacks. Several systems use overlay networks [1, 23, 15, 40, 38, 42] or middle-boxes [10, 32] to mitigate DoS attacks against dedicated destinations. DoS mitigation products on today’s market (e.g., [43]) offer in-network anomaly detection and attack traffic removal services near the victims. Kreibich et al. [25] propose using packet symmetry to detect and remove attack traffic. This body of work requires fewer changes to routers, but NetFence can remove attack traffic near its origins and protect all destinations on the Internet once deployed. Moreover, it places the attack traffic identification function at the receivers to keep the network open to new applications.

NetFence's approach to scalability is inspired by CSFQ [41], which achieves per-flow fairness without per-flow queues in the core routers. Differently, NetFence enables DoS victims to suppress attack traffic and provides per-sender rather than per-flow fairness.

### 6. Conclusion

This paper presents the design and evaluation of NetFence, an architecture that places the network at the first line of DoS defense. NetFence uses secure congestion policing feedback to enable scalable and robust traffic policing inside the network. Bottleneck routers use the congestion policing feedback to signal congestion to access routers, and access routers use it to robustly police senders' traffic. In case compromised senders and receivers collude in pairs to flood the network, NetFence limits the damage of this attack by providing each sender (malicious or legitimate) its fair share of bottleneck capacity without keeping per-host state at bottleneck routers. In case attackers send DoS floods to innocent victims, NetFence enables the DoS victims to use the secure congestion policing feedback as capability tokens to suppress unwanted traffic. Using a combination of a Linux implementation, simulations, and theoretical analysis, we show that NetFence is an effective DoS solution that reduces the amount of state maintained by a congested router from per-host [48, 27] to per-AS.

### 7. Acknowledgment

The authors thank Jeff Chase, David Harrison, Yongqiang Liu, and the anonymous SIGCOMM reviewers for their insightful comments, and David Oran for shepherding this paper. This work is supported in part by NSF awards CNS-0925472 and CNS-0845858.

### 8. References

[1] D. Andersen. Mayday: Distributed Filtering for Internet Services. In USENIX USITS, 2003.
[2] D. G. Andersen, H. Balakrishnan, N. Feamster, T. Koponen, D. Moon, and S. Shenker. Accountable Internet Protocol (AIP). In ACM SIGCOMM, 2008.
[3] T. Anderson, T. Roscoe, and D. Wetherall. Preventing Internet Denial of Service with Capabilities. In ACM HotNets-II, 2003.
[4] Arbor Networks. Worldwide Infrastructure Security Report, Volume V. http://www.arbornetworks.com/en/research.html, 2009.
[5] K. Argyraki and D. R. Cheriton. Scalable Network-layer Defense Against Internet Bandwidth-Flooding Attacks. ACM/IEEE ToN, 17(4), 2009.
[6] H. Ballani, Y. Chawathe, S. Ratnasamy, T. Roscoe, and S. Shenker. Off by default! In ACM Hotnets-IV, 2005.
[7] BGP Routing Table Statistics. http://bgp.potaroo.net/as6447/, 2010.
[8] B. Briscoe, A. Jacquet, C. D. Cairano-Gilfedder, A. Salvatori, A. Soppera, and M. Koyabe. Policing Congestion Response in an Internetwork using Re-feedback. In ACM SIGCOMM, 2005.
[9] B. Briscoe, A. Jacquet, T. Moncaster, and A. Smith. Re-ECN: A Framework for Adding Congestion Accountability to TCP/IP. http://tools.ietf.org/id/draft-briscoe-tsvwg-re-ecn-tcp-motivation-01.txt, 2009.
[10] M. Casado, P. Cao, A. Akella, and N. Provos. Flow-Cookies: Using Bandwidth Amplification to Defend Against DDoS Flooding Attacks. In IWQoS, 2006.
[11] D.-M. Chiu and R. Jain. Analysis of the Increase and Decrease Algorithms for Congestion Avoidance in Computer Networks. Comput. Netw. ISDN Syst., 17(1), 1989.
[12] CSS Routing and Bridging Configuration Guide. http://www.cisco.com/en/US/docs/app_ntwk_services/data_center_app_services/css11500series/v7.30/configuration/routing/guide/IP.html, 2010.
[13] J. Crowcroft, T. Deegan, C. Kreibich, R. Mortier, and N. Weaver. Lazy Susan: Dumb Waiting as Proof of Work. Technical Report UCAM-CL-TR-703, University of Cambridge, Computer Laboratory, 2007.
[14] Deterlab. http://www.deterlab.net/, 2010.
[15] C. Dixon, A. Krishnamurthy, and T. Anderson. Phalanx: Withstanding Multimillion-node Botnets. In USENIX/ACM NSDI, 2008.
[16] D. Ely, N. Spring, D. Wetherall, S. Savage, and T. Anderson. Robust Congestion Signaling. In IEEE ICNP, 2001.
[17] F-Secure. Calculating the Size of the Downadup Outbreak. http://www.f-secure.com/weblog/archives/00001584.html, 2009.
[18] S. Floyd and V. Jacobson. Random Early Detection Gateways for Congestion Avoidance. IEEE/ACM ToN, 1(4), 1993.
[19] M. Handley, E. Kohler, A. Ghosh, O. Hodson, and P. Radoslavov. Designing Extensible IP Router Software. In USENIX/ACM NSDI, 2005.
[20] Helion Technology. AES Cores. http://www.heliontech.com/aes.htm, 2010.
[21] Intel AES Instructions Set. http://software.intel.com/en-us/articles/intel-advanced-encryption-standard-aes-instructions-set/, 2010.
[22] S. Kandula, D. Katabi, M. Jacob, and A. Berger. Botz-4-Sale: Surviving DDoS Attacks that Mimic Flash Crowds. In USENIX/ACM NSDI, 2005.
[23] A. Keromytis, V. Misra, and D. Rubenstein. SOS: Secure Overlay Services. In ACM SIGCOMM, 2002.
[24] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The Click Modular Router. ACM TOCS, 18(3), 2000.
[25] C. Kreibich, A. Warfield, J. Crowcroft, S. Hand, and I. Pratt. Using Packet Symmetry to Curtail Malicious Traffic. In ACM Hotnets-IV, 2005.
[26] X. Liu, A. Li, X. Yang, and D. Wetherall. Passport: Secure and Adoptable Source Authentication. In USENIX/ACM NSDI, 2008.
[27] X. Liu, X. Yang, and Y. Lu. To Filter or to Authorize: Network-Layer DoS Defense Against Multimillion-node Botnets. In ACM SIGCOMM, 2008.
[28] X. Liu, X. Yang, and Y. Xia. NetFence: Preventing Internet Denial of Service from Inside Out. Technical Report 2010-01 (available at http://www.cs.duke.edu/nds/ddos/netfence-tr.pdf), Duke University, 2010.
[29] S. Luo and G. A. Marin. Realistic Internet Traffic Simulation through Mixture Modeling and A Case Study. In Winter Simulation Conference, 2005.
[30] R. Mahajan, S. Bellovin, S. Floyd, J. Ioannidis, V. Paxson, and S. Shenker. Controlling High Bandwidth Aggregates in the Network. ACM SIGCOMM CCR, 32(3), 2002.
[31] R. Mahajan, S. Floyd, and D. Wetherall. Controlling High-Bandwidth Flows at the Congested Router. In IEEE ICNP, 2001.
[32] A. Mahimkar, J. Dange, V. Shmatikov, H. Vin, and Y. Zhang. dFence: Transparent Network-based Denial of Service Mitigation. In USENIX/ACM NSDI, 2007.
[33] Z. M. Mao, J. Rexford, J. Wang, and R. Katz. Towards an Accurate AS-Level Traceroute Tool. In ACM SIGCOMM, 2003.
[34] M. Mathis, J. Semke, J. Mahdavi, and T. Ott. The Macroscopic Behavior of the TCP Congestion Avoidance Algorithm. ACM SIGCOMM CCR, 27(3), 1997.
[35] B. Parno, D. Wendlandt, E. Shi, A. Perrig, B. Maggs, and Y.-C. Hu. Portcullis: Protecting Connection Setup from Denial-of-Capability Attacks. In ACM SIGCOMM, 2007.
[36] R. Perlman. Network Layer Protocols with Byzantine Robustness. MIT Ph.D. Thesis, 1988.
[37] K. Ramakrishnan, S. Floyd, and D. Black. The Addition of Explicit Congestion Notification (ECN) to IP. RFC 3168, 2001.
[38] E. Shi, I. Stoica, D. Andersen, and A. Perrig. OverDoSe: A Generic DDoS Protection Service Using an Overlay Network. Technical Report CMU-CS-06-114, Carnegie Mellon University, 2006.
[39] M. Shreedhar and G. Varghese. Efficient Fair Queueing Using Deficit Round Robin. In ACM SIGCOMM, 1995.
[40] A. Stavrou and A. Keromytis. Countering DoS Attacks with Stateless Multipath Overlays. In ACM SIGCOMM CCS, 2005.
[41] I. Stoica, S. Shenker, and H. Zhang. Core-Stateless Fair Queueing: a Scalable Architecture to Approximate Fair Bandwidth Allocations in High-Speed Networks. IEEE/ACM ToN, 2003.
[42] R. Stone. CenterTrack: An IP Overlay Network for Tracking DoS Floods. In USENIX Security Symposium, 2000.
[43] DDoS Mitigation to the Rescue. https://www.arbornetworks.com/dmdocuments/DDoS%20Mitigation%20to%20the%20Rescue.pdf, 2010.
[44] J. S. Turner. New Directions in Communications (Or Which Way to the Information Age?). IEEE Communications Magazine, 1986.
[45] M. Walﬁsh, M. Vutukuru, H. Balakrishnan, D. Karger, and S. Shenker. DDoS Defense by Offense. In ACM SIGCOMM, 2006.
[46] Y. Xia, L. Subramanian, I. Stoica, and S. Kalyanaraman. One More Bit is Enough. IEEE/ACM ToN, 16(6), 2008.
[47] A. Yaar, A. Perrig, and D. Song. SIFF: A Stateless Internet Flow Filter to Mitigate DDoS Flooding Attacks. In IEEE Security Symposium, 2004.
[48] X. Yang, D. Wetherall, and T. Anderson. TVA: A DoS-limiting Network Architecture. IEEE/ACM ToN, 16(6), 2008.