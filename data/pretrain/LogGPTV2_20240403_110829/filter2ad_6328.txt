title:Application-awareness in SDN
author:Zafar Ayyub Qazi and
Jeongkeun Lee and
Tao Jin and
Gowtham Bellala and
Manfred Arndt and
Guevara Noubir
Application-Awareness in SDN
Zafar Qazi
Stony Brook University
Gowtham Bellala
HP Labs
Jeongkeun Lee
HP Labs
Manfred Arndt
HP Networking
Tao Jin
Qualcomm Research
Guevara Noubir
Northeastern University
ABSTRACT
We present a framework, Atlas, which incorporates application-
awareness into Software-Deﬁned Networking (SDN), which
is currently capable of L2/3/4-based policy enforcement but
agnostic to higher layers. Atlas enables ﬁne-grained, accu-
rate and scalable application classiﬁcation in SDN. It em-
ploys a machine learning (ML) based traﬃc classiﬁcation
technique, a crowd-sourcing approach to obtain ground truth
data and leverages SDN’s data reporting mechanism and
centralized control. We prototype Atlas on HP Labs wire-
less networks and observe 94% accuracy on average, for top
40 Android applications.
Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]:
Keywords
Software-Deﬁned Networking (SDN); Application Awareness.
1.
INTRODUCTION
Application recognition is critical for providing visibility,
QoS, billing, and security. Application-awareness becomes
even more important with SDN; e.g., network virtualiza-
tion, one of the key SDN use-cases, beneﬁts from the knowl-
edge of the type of network applications to provide enhanced
performance isolation for speciﬁc applications. SDN APIs
of today, such as OpenFlow, are capable of Layer 2/3/4
(L2/3/4)-based policy enforcement but they currently lack
higher layer application awareness.
Identifying application name or type from network traf-
ﬁc is a challenging task [2]. Application programmer’s QoS
marking on IP header is generally untrusted and ignored by
network administrators. Port-based classiﬁcation techniques
are no longer accurate as most applications are now being
run on dynamic ports (e.g. P2P applications) or transported
over HTTP/HTTPS. On the other hand, techniques based
Permission to make digital or hard copies of part or all of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. Copyrights for third-
party components of this work must be honored. For all other uses, contact
the owner/author(s).
SIGCOMM’13, August 12–16, 2013, Hong Kong, China.
ACM 978-1-4503-2056-6/13/08.
on Deep Packet Inspection (DPI) can be more accurate, but
incur high computation cost and require manual signature
maintenance. Moreover, many applications today are deliv-
ered via end-to-end encrypted channels, such as HTTPS and
SRTP, thus limiting the reliability of DPI-based approaches
and making the signature maintenance more diﬃcult or even
impossible in some cases.
Machine learning (ML) based traﬃc classiﬁcation tech-
niques have been used, mostly by ISPs, as an alternative to
DPI. ML-based approach does not require packet payload
inspection, instead it only requires a speciﬁc set of ﬂow level
features like the sizes of the ﬁrst ‘N’ packets, source and des-
tination ports and IP addresses [2, 3]. This generally results
in a much lower computational cost than DPI-based solu-
tions [3] and can correctly identify encrypted traﬃc. How-
ever, an obstacle to using ML-based detection is obtaining
accurate and ﬁne-grained ground truth of the ﬂow features
required to train the classiﬁer. This is due to the lack of
accurately annotated network ﬂow samples across a broad
range of applications. Thus, ML-based solutions so far have
been limited to coarse-grained classiﬁcations such as web,
P2P vs. VoIP [2].
However, actualization of L7-aware SDN requires ﬁne-
grained application detection. For example, an enterprise
network administrator may prefer a certain VoIP applica-
tion with better security support than other VoIP solutions.
To prioritize the preferred application or to block the use
of speciﬁc applications, the SDN controller should be able
to detect each VoIP application uniquely, rather than clas-
sifying all of them into a common VoIP class. To achieve
this, the SDN controller could be notiﬁed by the application
server, via a direct API integration, for each new ﬂow dur-
ing session setup and tear down [1], but we do not expect
such APIs to be available for every application, especially for
myriads of new mobile or consumer oriented applications.
Furthermore, the growing assortment of mobile applications
make the ground-truth collection more challenging due to
their rapid adoption and update cycles.
In addition to the ground truth data collection (for ML
training), the application detection (ML classiﬁcation) ca-
pability needs to be integrated into the SDN framework in
a scalable and seamless manner. This is to allow applica-
tion detection and application-aware policy enforcement to
be done in a timely and seamless manner, similar to the way
many L2/3/4 functions can be implemented using the cur-
rent OpenFlow. Our solution, Atlas, addresses these prob-
lems by intelligently employing a crowd-sourcing approach
and the OpenFlow protocol, optionally with modiﬁcations.
487Admin 
Action 
App 
Skype  High Priority 
Torrent  Block 
Control Plane 
Policy Specification 
ML Trainer 
app  action 
100% accuracy
40% of entire 
ﬂows
Small ﬂow 
samples
61% ﬂows over 
HTTPS
netstat logs 
OpenFlow 
Mobile agent 
Application Traffic 
flow features 
w feafefefe tures
AP userspace 
ML Classifier 
ML Classifier
app name 
app name
flow action 
flow action
Action 
App 
App
Action
Skype  High Priority Queue 
Skype
High Priority Queue
Torrent Drop
Torrent  Drop 
Employee/Test Devices 
Guests 
Figure 1: Atlas in action.
2. ATLAS
To collect ﬁne-grained ground truth data, our solution At-
las uses a crowd sourcing approach, motivated by the fact
that many enterprises require employees to deploy device
management software agents on their work devices. These
agents can be used to collect information about active net-
work sockets, e.g., netstat logs, belonging to each running
application on the device.
The Atlas framework, as we prototyped in HP Lab wire-
less network, is shown in Figure 1. It uses the mobile agents
running on some employee devices (or dedicated testing de-
vices) to collect the netstat logs, which are then sent to the
control plane, where the ML trainer is run. The ﬂow features
(e.g., ﬁrst ‘N’ packet sizes) are collected by the OpenFlow
running on the wireless AP and sent to the control plane,
which then correlates and composes ground truth training
data together with the netstat logs. We extend the Open-
Flow statistics to store the ﬁrst ‘N’ packet sizes of each ﬂow
and also report it to the controller. When such extension is
infeasible, probably due to a TCAM resource constraint in
switches, we can instrument OpenFlow to mirror the ﬁrst
‘N’ packets to the ML trainer.
The trained ML classiﬁer, together with the policy for
each application, is installed into the AP. Whenever there is
a new ﬂow from ‘guest’ devices, which are not running the
mobile agent, the OpenFlow engine sends the ﬂow features
to the ML classiﬁer, which detects the application and then
the AP applies the appropriate action to the ﬂow and/or
reports ﬂow statistics to the controller.
Evaluation: we prototyped Atlas in HP Labs wireless
network and implemented a mobile agent for Android OS
using only oﬃcial Android APIs in a user application. We
The mobile
use opensource c5.0 decision tree ML tool.
agent was deployed on ﬁve Android phones: three volun-
teers and two test devices for manual collection. The man-
ual collection was needed to collect meaningful number (at
least 200) of ﬂow samples of each application we were in-
terested in. We selected 40 most popular applications in
Google Play Store as key applications of interest and tried
to collect enough samples for them. We could collect 200 or
more ﬂow samples for 30 applications. We treat all other ap-
plications detected by our mobile agents as Unknown. Over
1
1
http://www.rulequest.com/see5-info.html
Figure 2: Application detection accuracy.
100K ﬂow samples were collected and labeled from the ﬁve
devices during the 3 weeks of testing period.
Figure 2 shows the classiﬁcation accuracy, F-measure, for
the 31 of these application classes in a decreasing order of
F-measure. F-measure=1 means 100% true positive and 0%
false negative [2]. In Figure 2, most applications show over
90% accuracy (average 96%). When we tested all the top
40 popular applications, including those with less than 200
ﬂow samples, we observed on average an accuracy of 94%.
There are eight applications detected with 100% accu-
racy, including MS Exchange service, Facebook, Google+
and Twitter. These eight applications constitute around
40% of the entire ﬂows collected from the volunteer devices.
Many of the remaining applications (other than the eight)
consist of a small number of training samples, leading to
lower accuracies; we expect improved accuracies for them
as we collect more samples. The c5.0 classiﬁer handles 1.4
million ﬂows per second on a 3.3GHz workstation core.
Demo scenario: We will demonstrate real-time detec-
tion of mobile applications on a wireless AP (or on a mid-
dlebox sitting between the AP and the Internet) leverag-
ing our OpenFlow extensions: 1) new ﬂow statistic of ﬁrst
‘N’ packet sizes and 2) optionally a new action, application
recognition, which sends the ﬂow features (ﬁrst ‘N’ packet
sizes, port numbers, IP address range) to the ML classiﬁer
as soon as the packet counter hits N.
3. CONCLUSION
To our best knowledge, Atlas is the ﬁrst work to demon-
strate ﬁne-grained mobile application detection. We design
an automated data consolidation and classiﬁer generation
logic, which signiﬁcantly minimizes the manual eﬀort re-
quired to maintain and scale the application classiﬁcation
solution. Our framework intelligently leverages the Open-
Flow protocol and automates the data collection and ap-
plication detection process to incorporate L7-awareness into
SDN. Our on-going and future works include implementa-
tions on diﬀerent device platforms (iOS, Windows, Linux)
and detection of ﬂows belonging to a new application which
is not part of the trained classiﬁer.
4. REFERENCES
[1] HP and Microsoft Demo OpenFlow-Lync Applications-optimized
Network. http://tinyurl.com/avjjg8o.
[2] H. Kim et al. Internet Traﬃc Classiﬁcation Demystiﬁed: Myths,
Caveats, and the Best Practices. In ACM CoNEXT, 2008.
[3] N. Williams et al. Real Time Traﬃc Classiﬁcation and
Prioritisation on a Home Router using DIFFUSE. In CAIA
Technical Report 120412A, 2011.
488