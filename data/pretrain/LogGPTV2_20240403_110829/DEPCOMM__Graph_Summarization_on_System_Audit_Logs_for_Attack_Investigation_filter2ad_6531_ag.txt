### 攻击案例

#### 社区检测结果
表 VI 展示了 14 个攻击案例的社区检测结果。

| 攻击案例 | F1 分数 |
| --- | --- |
| A1: 邮件渗透 | 0.459 |
| A2: 编译崩溃 | 0.492 |
| A3: 文件篡改 | 0.301 |
| A4: 数据泄露 | 0.426 |
| A5: 密码破解 | 0.666 |
| A6: VPN 过滤 | 0.629 |
| D1: 钓鱼邮件 (C.S.) | 0.235 |
| D2: 钓鱼邮件 (F.D.) | 0.357 |
| D3: Firefox 后门 (F.D.) | 0.242 |
| D4: 浏览器扩展 (F.D.) | - |
| D5: 浏览器扩展 (Theia) | 0.464 |
| D6: Firefox 后门 (Theia) | 0.396 |
| D7: 钓鱼邮件 (Theia) | 0.307 |
| D8: Pine 后门 (Trace) | 0.537 |

### RQ3: 社区检测算法比较
我们将 DEPCOMM 与其他最先进的社区检测算法进行比较，以展示 DEPCOMM 的社区检测技术的有效性。考虑到依赖图的重叠性质，我们选择了 9 种典型的重叠社区检测算法作为基线，包括 NISE (2016)、EgoSpliter (2017)、NMNF (2017)、DANMF (2018)、PMCV (2019)、CGAN (2019)、VGRAPH (2019)、CNRL (2019) 和 DeepWalk (2014)。我们使用 F1 分数来评估检测到的社区与我们标记的真实社区之间的总体对应关系。

表 VI 显示了 DEPCOMM 和基线算法的 F1 分数及检测到的社区数量 |C|。结果显示，DEPCOMM 的 F1 分数平均比基线算法高 2.29 倍。这表明我们的社区检测算法在检测以过程为中心的社区方面是有效的，而其他基线算法由于以下原因表现较差：
1. 它们主要关注同质图，并且忽略了系统事件的类型。因此，它们无法有效地区分进程节点和资源节点，并将这些节点混合在一个社区中，导致一个社区包含多个无关的系统活动或将一个系统活动分散到多个社区中。
2. 它们依赖于一个共同假设，即社区内部的边多于连接其他社区节点的边。因此，即使两个主进程节点通过信息流连接在一起，它们也无法将其分成两个社区，尽管这两个进程代表不同的系统活动。

此外，尽管 DEPCOMM 和 DeepWalk 都使用 SkipGram 从行走路线中学习节点表示，但 DEPCOMM 平均比 DeepWalk 高出 1.65 倍。这表明 DEPCOMM 的分层行走方案比 DeepWalk 采用的随机行走方案更有效，后者对每个节点一视同仁。

### RQ4: 社区压缩的有效性
为了评估社区压缩的有效性，我们计算压缩率 γ = 1 - Sizepost/Sizepre，其中 Sizepre 表示应用压缩前社区的节点或边的数量，Sizepost 是应用压缩后的节点或边的数量。图 10 和图 11 的箱形图分别显示了节点和边的压缩率分布。可以看到，对于一个社区，节点和边的数量分别平均减少了 38.4% 和 44.7%，最大减少量分别为 97.3% 和 98.9%。此外，我们验证了 InfoPaths 在压缩后没有改变。原因是重复活动具有相同的信息流，通常通过单个节点进入由重复活动形成的子图并通过另一个单个节点离开该子图，因此压缩重复活动不会改变 InfoPaths 内的事件。总之，压缩这些重复活动仍然保留了社区所代表任务的语义。

### RQ5: InfoPath 排序的有效性
对于每个社区，DEPCOMM 根据其输入和输出节点提取 InfoPaths。平均而言，一个社区有 4.3 个输入节点和 3.9 个输出节点，形成 15.7 个 InfoPaths。我们手动检查每个社区的前三个 InfoPaths，并确认前两个 InfoPaths 足以代表系统活动和攻击行为。也就是说，我们只需要检查 12.7% 的提取 InfoPaths。

#### 表 VII: 包含攻击相关事件的 C3 社区和不包含攻击相关事件的 C8 社区的前三个 InfoPaths
| 社区 | Top-1 InfoPath | Top-2 InfoPath | Top-3 InfoPath | 优先级分数 |
| --- | --- | --- | --- | --- |
| C3 | leak→tar→../upload.tar→bzip2→../upload.tar.bz2→gpg→../upload→cur→xxx->xxx | ../analysis.txt→tar→../upload.tar→bzip2→../upload.tar.bz2→gpg→../upload→cur→xxx->xxx | ../userlist→tar→../upload.tar→bzip2→../upload.tar.bz2→gpg→../upload→cur→xxx->xxx | 0.8234 |
| C8 | xxx->xxx→sshd→bash→scp→../statistics.tar.bz2→tar→../userlist | xxx->xxx→scp→../statistics.tar.bz2→tar→../userlist | /dev/null→bash→scp→../statistics.tar.bz2→tar→../userlist | 0.7141, 0.7137 |

---

以上是对原文本的优化，使其更加清晰、连贯和专业。希望这对你有所帮助！