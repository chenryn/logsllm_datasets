551
Attack Cases
DANMF
2018
PMCV
2019
2019
2019
2014
EgoSpliter NMNF
2017
2017
TABLE VI: Results of community detection for 14 attack cases
NISE
2016
F1
0.459
A1: Email Penetration
0.492
A2: Compile Crash
0.301
A3: Files Tamper
0.426
A4: Data Exﬁltration
0.666
A5: Password Crack
0.629
A6: VPN Filter
0.164
D1: Phishing Email (C.S.)
0.235
D2: Phishing Email (F.D.)
0.357
D3: Firefox Backdoor (F.D.)
0.242
D4: Browser Extension (F.D.)
D5: Browser Extension (Theia) 0.464
0.396
D6: Firefox Backdoor (Theia)
D7: Phishing Email (Theia)
0.307
0.537
D8: Pine Backdoor (Trace)
D. RQ3: Comparison of Community Detection
CGAN VGRAPH CNRL DeepWalk DEPCOMM
2019
|C|
8
16
16
10
4
11
48
19
41
42
13
14
9
7
|C| F1
6 0.553
9 0.376
7 0.455
8 0.509
3 0.756
7 0.675
10 0.109
5 0.206
8 0.293
7 0.213
5 0.453
5 0.393
6 0.505
5 0.449
|C| F1
5 0.928
7 0.952
11 0.958
7 0.937
1.0
4
7 0.915
10 0.944
6 0.955
9 0.930
11 0.923
8 0.911
9 0.887
6 0.966
5 0.971
|C| F1
5 0.302
10 0.219
8 0.174
5 0.329
4 0.505
5 0.305
1 0.113
6 0.136
6 0.175
8 0.091
7 0.179
7 0.194
4 0.231
3 0.340
|C| F1
8 0.354
17 0.343
16 0.204
10 0.300
4 0.487
12 0.315
48 0.452
20 0.161
43 0.128
45 0.139
11 0.221
13 0.234
8 0.283
7 0.418
|C| F1
5 0.327
9 0.273
7 0.242
6 0.516
3 0.622
7 0.705
6 0.244
6 0.168
7 0.203
6 0.212
6 0.356
6 0.321
5 0.458
4 0.623
|C| F1
5 0.696
7 0.320
9 0.522
9 0.684
3 0.847
6 0.604
7 0.251
6 0.314
8 0.399
9 0.298
7 0.406
6 0.485
5 0.507
4 0.481
|C| F1
5 0.674
8 0.413
12 0.645
7 0.647
4 0.988
7 0.650
9 0.384
7 0.266
9 0.391
12 0.403
8 0.508
8 0.529
6 0.698
5 0.758
|C| F1
8 0.521
17 0.730
16 0.672
10 0.642
4 0.910
12 0.686
48 0.234
20 0.353
43 0.316
45 0.447
11 0.600
13 0.608
8 0.694
7 0.773
|C| F1
6 0.509
8 0.274
11 0.359
7 0.327
3 0.711
6 0.343
10
0.0
8 0.187
9 0.227
9 0.297
8 0.413
8 0.388
6 0.286
4 0.318
n
o
i
s
s
s
e
r
p
m
o
C
C
s
e
d
o
N
N
r
f
o
o
f
n
e
o
t
a
i
t
R
uR
u
b
i
r
t
s
i
D
n
o
i
s
s
e
r
p
m
o
C
C
s
e
g
d
E
E
r
f
o
o
f
n
e
o
t
a
i
t
tR
R
u
b
i
r
t
s
i
D
1
0.8
0.6
0.4
0.2
0
1
0.8
0.6
0.4
0.2
0
We compare DEPCOMM with other state-of-the-art com-
munity detection algorithms to show the effectiveness of
DEPCOMM’s community detection technique. Considering the
overlapping nature of dependency graphs, we select 9 typical
overlapping community detection algorithms as the baselines,
including NISE (2016) [36], EgoSpliter (2017) [41], NMNF
(2017) [42], DANMF (2018) [43], PMCV (2019) [44], CGAN
(2019) [45], VGRAPH (2019) [46], CNRL (2019) [47] and
DeepWalk (2014) [38]. We use F1-score [78] to evaluate the
overall correspondence between the detected communities and
the ground-truth communities labeled by us.
Table VI shows the F1-score and the number of detected
communities |C| for DEPCOMM and the baselines. The results
show that F1-score achieved by DEPCOMM is averagely 2.29
times higher than those achieved by the baselines. This shows
that our community detection algorithm is effective to detect
the process-centric communities, while the other baselines
have poorer performance due to the following reasons: (1)
they mainly focus on homogeneous graphs, and are oblivious
to the types of system events. Thus, they cannot effectively
distinguish process nodes and resource nodes, and mix these
nodes in a community, causing a community to contain
multiple irrelevant system activities or spread a system activity
across multiple communities; (2) they depend on a common
assumption that edges inside a community are more than the
edges linking with the nodes of other communities. Thus,
they fail to split two master process nodes connected with
information ﬂows into two communities, even though the two
processes represent distinct system activities.
Furthermore, even though DEPCOMM and DeepWalk both
use SkipGram to learn the node representation from the
walk routes, DEPCOMM outperforms DeepWalk by 1.65×
on average. This shows that DEPCOMM’s hierarchical walk
schemes are more effective than the random walk scheme
adopted by DeepWalk, which treats each node equally.
E. RQ4: Effectiveness of Community Compression
To evaluate the effectiveness of community compression, we
compute the compression rates as γ = 1−Sizepost/Sizepre,
where Sizepre denotes the number of nodes or edges of a
community before applying compression and Sizepost is the
A1 A2 A3 A4 A5 A6 D1 D2 D3 D4 D5 D6 D7 D8
Fig. 10: Community compression rate for nodes
A1 A2 A3 A4 A5 A6 D1 D2 D3 D4 D5 D6 D7 D8
Fig. 11: Community compression rate for edges
number of nodes or edges after using compression. The box
plots in Fig. 10 and Fig. 11 show the distributions of the
compression rates for the nodes and the edges, respectively.
We can see that for a community, the number of nodes and the
number of edges are reduced averagely by 38.4% and 44.7%,
respectively, with the maximum reduction being 97.3% for the
nodes and 98.9% for the edges. In addition, we verify that the
InfoPaths are not changed after compression. The reason is
that the repeated activities have a same information ﬂow that
often enters the subgraph formed by the repeated activities
through a single node and leave the subgraph via another
single node, and thus compressing the repeated activities will
not change the events inside InfoPaths. In a word, compressing
these repeated activities still preserves the semantics for the
task represented by a community.
F. RQ5: Effectiveness of InfoPath Ranking
For each community, DEPCOMM extracts InfoPaths based
on its input and output nodes. On average, a community has
4.3 input nodes and 3.9 output nodes, forming 15.7 InfoPaths.
We manually inspect the top-3 InfoPaths for each community
and conﬁrm that the top-2 InfoPaths are sufﬁcient to represent
system activities and attack behaviors. That is, we only need
to inspect 12.7% of the extracted InfoPaths.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
552
TABLE VII: Top 3 InfoPaths of the community C3 with attack-related events and C8 without attack-related events
C3 Top-1: leak→tar→../upload.tar→bzip2→../upload.tar.bz2→gpg→../upload→cur→xxx->xxx
InfoPaths
C8 Top-1: xxx->xxx→sshd→bash→scp→../statistics.tar.bz2→tar→../userlist
Top-2: ../analysis.txt→tar→../upload.tar→bzip2→../upload.tar.bz2→gpg→../upload→cur→xxx->xxx
Top-3: ../userlist→tar→../upload.tar→bzip2→../upload.tar.bz2→gpg→../upload→cur→xxx->xxx
Top-2: xxx->xxx→scp→../statistics.tar.bz2→tar→../userlist
Top-3: /dev/null→bash→scp→../statistics.tar.bz2→tar→../userlist
Priority Score
0.8234
0.7141
0.7137