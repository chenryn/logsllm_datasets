代码清单8-30 访问解组后的映射的字段的代码
fmt.Println("\tHome:", c["contact"].(map[string]interface{})["home"])
因为每个键的值的类型都是interface{}，所以必须将值转换为合适的类型，才能处理这
个值。代码清单 8-30 展示了如何将 contact 键的值转换为另一个键是 string 类型，值是
interface{}类型的map类型。这有时会使映射里包含另一个文档的JSON文档处理起来不那
么友好。但是，如果不需要深入正在处理的JSON文档，或者只打算做很少的处理，因为不需要
声明新的类型，使用map类型会很快。
8.3.2 编码 JSON
我们要学习的处理JSON的第二个方面是，使用json包的MarshalIndent函数进行编码。
这个函数可以很方便地将Go语言的map类型的值或者结构类型的值转换为易读格式的JSON文
档。序列化（marshal）是指将数据转换为JSON字符串的过程。下面是一个将map类型转换为JSON
字符串的例子，如代码清单8-31所示。
代码清单8-31 listing31.go
01 // 这个示例程序展示如何序列化JSON字符串
02 package main
03
04 import (
05 "encoding/json"
06 "fmt"
07 "log"
08 )
09
10 func main() {
11 // 创建一个保存键值对的映射
12 c := make(map[string]interface{})
13 c["name"] = "Gopher"
14 c["title"] = "programmer"
15 c["contact"] = map[string]interface{}{
16 "home": "415.333.3333",
17 "cell": "415.555.5555",
18 }
19
20 // 将这个映射序列化到JSON字符串
21 data, err := json.MarshalIndent(c, "", " ")
22 if err != nil {
23 log.Println("ERROR:", err)
24 return
25 }
26
27 fmt.Println(string(data))
28 }
代码清单8-31展示了如何使用json包的MarshalIndent函数将一个map值转换为JSON
字符串。函数MarshalIndent返回一个byte切片，用来保存JSON字符串和一个error值。
下面来看一下json包中MarshalIndent函数的声明，如代码清单8-32所示。
代码清单8-32 golang.org/src/encoding/json/encode.go
// MarshalIndent很像Marshal，只是用缩进对输出进行格式化
func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error) {
在 MarshalIndent 函数里再一次看到使用了空接口类型 interface{}。函数
MarshalIndent会使用反射来确定如何将map类型转换为JSON字符串。
如果不需要输出带有缩进格式的JSON 字符串，json包还提供了名为Marshal 的函数来进
行解码。这个函数产生的JSON字符串很适合作为在网络响应（如Web API）的数据。函数Marshal
的工作原理和函数MarshalIndent一样，只不过没有用于前缀prefix和缩进indent的参数。
8.3.3 结论
在标准库里都已经提供了处理JSON和XML格式所需要的诸如解码、反序列化以及序列化
数据的功能。随着每次Go语言新版本的发布，这些包的执行速度也越来越快。这些包是处理JSON
和XML的最佳选择。由于有反射包和标签的支持，可以很方便地声明一个结构类型，并将其中
的字段映射到需要处理和发布的文档的字段。由于 json 包和 xml 包都支持 io.Reader 和
io.Writer 接口，用户不用担心自己的 JSON 和 XML 文档源于哪里。所有的这些特性都让处
理JSON和XML变得很容易。
8.4 输入和输出
类UNIX的操作系统如此伟大的一个原因是，一个程序的输出可以是另一个程序的输入这一
194 第8章 标准库
理念。依照这个哲学，这类操作系统创建了一系列的简单程序，每个程序只做一件事，并把这件
事做得非常好。之后，将这些程序组合在一起，可以创建一些脚本做一些很惊艳的事情。这些程
序使用stdin和stdout设备作为通道，在进程之间传递数据。
同样的理念扩展到了标准库的io包，而且提供的功能很神奇。这个包可以以流的方式高效
处理数据，而不用考虑数据是什么，数据来自哪里，以及数据要发送到哪里的问题。与stdout
和 stdin 对应，这个包含有 io.Writer 和 io.Reader 两个接口。所有实现了这两个接口的
类型的值，都可以使用io包提供的所有功能，也可以用于其他包里接受这两个接口的函数以及
方法。这是用接口类型来构造函数和API最美妙的地方。开发人员可以基于这些现有功能进行组
合，利用所有已经存在的实现，专注于解决业务问题。
有了这个概念，让我们先看一下io.Wrtier和io.Reader接口的声明，然后再来分析展
示了io包神奇功能的代码。
8.4.1 Writer 和 Reader 接口
io包是围绕着实现了io.Writer和io.Reader接口类型的值而构建的。由于io.Writer
和io.Reader提供了足够的抽象，这些io包里的函数和方法并不知道数据的类型，也不知道
这些数据在物理上是如何读和写的。让我们先来看一下io.Writer接口的声明，如代码清单8-33
所示。
代码清单8-33 io.Writer接口的声明
type Writer interface {
Write(p []byte) (n int, err error)
}
代码清单8-33展示了io.Writer接口的声明。这个接口声明了唯一一个方法Write，这
个方法接受一个 byte 切片，并返回两个值。第一个值是写入的字节数，第二个值是 error 错
误值。代码清单8-34给出的是实现这个方法的一些规则。
代码清单8-34 io.Writer接口的文档
Write从p里向底层的数据流写入len(p)字节的数据。这个方法返回从p里写出的字节
数（0  0字节后，如果遇到错误或者文件读取完成，Read方法会返回
读入的字节数。方法可能会在本次调用返回一个非nil的错误，或者在下一次调用时返
回错误（同时n == 0）。这种情况的的一个例子是，在输入的流结束时，Read会返回
非零的读取字节数，可能会返回err == EOF，也可能会返回err == nil。无论如何，
下一次调用Read应该返回0, EOF。
(3) 调用者在返回的n > 0时，总应该先处理读入的数据，再处理错误err。这样才
能正确操作读取一部分字节后发生的I/O错误。EOF也要这样处理。
(4) Read的实现不鼓励返回0个读取字节的同时，返回nil值的错误。调用者需要将
这种返回状态视为没有做任何操作，而不是遇到读取结束。
标准库里列出了实现Read方法的4条规则。第一条规则表明，该实现需要试图读取数据来
填满被传入的byte切片。允许出现读取的字节数小于byte切片的长度，并且如果在读取时已
经读到数据但是数据不足以填满byte切片时，不应该等待新数据，而是要直接返回已读数据。
第二条规则提供了应该如何处理达到文件末尾（EOF）的情况的指导。当读到最后一个字节
时，可以有两种选择。一种是 Read 返回最终读到的字节数，并且返回 EOF 作为错误值，另一
种是返回最终读到的字节数，并返回 nil 作为错误值。在后一种情况下，下一次读取的时候，
由于没有更多的数据可供读取，需要返回0作为读到的字节数，以及EOF作为错误值。
第三条规则是给调用Read的人的建议。任何时候Read返回了读取的字节数，都应该优先
处理这些读取到的字节，再去检查 EOF 错误值或者其他错误值。最终，第四条约束建议 Read
方法的实现永远不要返回0个读取字节的同时返回nil作为错误值。如果没有读到值，Read应
该总是返回一个错误。
现在知道了io.Writer和io.Reader接口是什么样子的，以及期盼的行为是什么，让我
们看一下如何在程序里使用这些接口以及io包。
8.4.2 整合并完成工作
这个例子展示标准库里不同包是如何通过支持实现了io.Writer接口类型的值来一起完成
196 第8章 标准库
工作的。这个示例里使用了bytes、fmt和os包来进行缓冲、拼接和写字符串到stdout，如
代码清单8-37所示。
代码清单8-37 listing37.go
01 // 这个示例程序展示来自不同标准库的不同函数是如何
02 // 使用io.Writer接口的
03 package main
04
05 import (
06 "bytes"
07 "fmt"
08 "os"
09 )
10
11 // main是应用程序的入口
12 func main() {
13 // 创建一个Buffer值，并将一个字符串写入Buffer
14 // 使用实现io.Writer的Write方法
15 var b bytes.Buffer
16 b.Write([]byte("Hello "))
17
18 // 使用Fprintf来将一个字符串拼接到Buffer里
19 // 将bytes.Buffer的地址作为io.Writer类型值传入
20 fmt.Fprintf(&b, "World!")
21
22 // 将Buffer的内容输出到标准输出设备
23 // 将os.File值的地址作为io.Writer类型值传入
24 b.WriteTo(os.Stdout)
25 }
运行代码清单8-37中的程序会得到代码清单8-38所示的输出。
代码清单8-38 listing37.go的输出
Hello World!
这个程序使用了标准库的 3 个包来将"Hello World!"输出到终端窗口。一开始，程序在
第15行声明了一个bytes包里的Buffer类型的变量，并使用零值初始化。在第16行创建了
一个byte切片，并用字符串"Hello"初始化了这个切片。byte切片随后被传入Write方法，
成为Buffer类型变量里的初始内容。
第20行使用fmt包里的Fprintf函数将字符串"World!"追加到Buffer类型变量里。
让我们看一下Fprintf函数的声明，如代码清单8-39所示。
代码清单8-39 golang.org/src/fmt/print.go
// Fprintf根据格式化说明符来格式写入内容，并输出到w
// 这个函数返回写入的字节数，以及任何遇到的错误
func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)
8.4 输入和输出 197
需要注意Fprintf函数的第一个参数。这个参数需要接收一个实现了io.Writer接口类
型的值。因为我们传入了之前创建的Buffer类型值的地址，这意味着bytes包里的Buffer
类型必须实现了这个接口。那么在bytes包的源代码里，我们应该能找到为Buffer类型声明
的Write方法，如代码清单8-40所示。
代码清单8-40 golang.org/src/bytes/buffer.go
// Write将p的内容追加到缓冲区，如果需要，会增大缓冲区的空间。返回值n是
// p的长度，err总是nil。如果缓冲区变得太大，Write会引起崩溃…
func (b *Buffer) Write(p []byte) (n int, err error) {
b.lastRead = opInvalid
m := b.grow(len(p))
return copy(b.buf[m:], p), nil
}
代码清单8-40展示了Buffer类型的Write方法的当前版本的实现。由于实现了这个方法，
指向 Buffer 类型的指针就满足了 io.Writer 接口，可以将指针作为第一个参数传入
Fprintf。在这个例子里，我们使用Fprintf函数，最终通过Buffer实现的Write方法，
将"World!"字符串追加到Buffer类型变量的内部缓冲区。
让我们看一下代码清单8-37的最后几行，如代码清单8-41所示，将整个Buffer类型变量
的内容写到stdout。
代码清单8-41 listing37.go：第22行到第25行
22 // 将Buffer的内容输出到标准输出设备
23 // 将os.File值的地址作为io.Writer类型值传入
24 b.WriteTo(os.Stdout)
25 }
在代码清单8-37的第24行，使用WriteTo方法将Buffer类型的变量的内容写到stdout
设备。这个方法接受一个实现了 io.Writer 接口的值。在这个程序里，传入的值是 os 包的
Stdout变量的值，如代码清单8-42所示。
代码清单8-42 golang.org/src/os/file.go
var (
Stdin = NewFile(uintptr(syscall.Stdin), "/dev/stdin")
Stdout = NewFile(uintptr(syscall.Stdout), "/dev/stdout")
Stderr = NewFile(uintptr(syscall.Stderr), "/dev/stderr")
)
这些变量自动声明为NewFile函数返回的类型，如代码清单8-43所示。
代码清单8-43 golang.org/src/os/file_unix.go
// NewFile返回一个具有给定的文件描述符和名字的新File
func NewFile(fd uintptr, name string) *File {
fdi := int(fd)
198 第8章 标准库
if fdi < 0 {
return nil
}
f := &File{&file{fd: fdi, name: name}}
runtime.SetFinalizer(f.file, (*file).close)
return f
}
就像在代码清单8-43里看到的那样，NewFile函数返回一个指向File类型的指针。这就
是Stdout变量的类型。既然我们可以将这个类型的指针作为参数传入WriteTo方法，那么这
个类型一定实现了io.Writer接口。在os包的源代码里，我们应该能找到Write方法，如代
码清单8-44所示。
代码清单8-44 golang.org/src/os/file.go
// Write将len(b)个字节写入File
// 这个方法返回写入的字节数，如果有错误，也会返回错误
// 如果n != len(b)，Write会返回一个非nil的错误
func (f *File) Write(b []byte) (n int, err error) {
if f == nil {
return 0, ErrInvalid
}
n, e := f.write(b)
if n < 0 {
n = 0
}
if n != len(b) {
err = io.ErrShortWrite
}
epipecheck(f, e)
if e != nil {