# Unsubscriptions Are Free
Category: Binary Exploitation, 100 points
## Description
> Check out my new video-game and spaghetti-eating streaming channel on Twixer! 
```c
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#define FLAG_BUFFER 200
#define LINE_BUFFER_SIZE 20
typedef struct {
	uintptr_t (*whatToDo)();
	char *username;
} cmd;
char choice;
cmd *user;
void hahaexploitgobrrr(){
 	char buf[FLAG_BUFFER];
 	FILE *f = fopen("flag.txt","r");
 	fgets(buf,FLAG_BUFFER,f);
 	fprintf(stdout,"%s\n",buf);
 	fflush(stdout);
}
char * getsline(void) {
	getchar();
	char * line = malloc(100), * linep = line;
	size_t lenmax = 100, len = lenmax;
	int c;
	if(line == NULL)
		return NULL;
	for(;;) {
		c = fgetc(stdin);
		if(c == EOF)
			break;
		if(--len == 0) {
			len = lenmax;
			char * linen = realloc(linep, lenmax *= 2);
			if(linen == NULL) {
				free(linep);
				return NULL;
			}
			line = linen + (line - linep);
			linep = linen;
		}
		if((*line++ = c) == '\n')
			break;
	}
	*line = '\0';
	return linep;
}
void doProcess(cmd* obj) {
	(*obj->whatToDo)();
}
void s(){
 	printf("OOP! Memory leak...%p\n",hahaexploitgobrrr);
 	puts("Thanks for subsribing! I really recommend becoming a premium member!");
}
void p(){
  	puts("Membership pending... (There's also a super-subscription you can also get for twice the price!)");
}
void m(){
	puts("Account created.");
}
void leaveMessage(){
	puts("I only read premium member messages but you can ");
	puts("try anyways:");
	char* msg = (char*)malloc(8);
	read(0, msg, 8);
}
void i(){
	char response;
  	puts("You're leaving already(Y/N)?");
	scanf(" %c", &response);
	if(toupper(response)=='Y'){
		puts("Bye!");
		free(user);
	}else{
		puts("Ok. Get premium membership please!");
	}
}
void printMenu(){
 	puts("Welcome to my stream! ^W^");
 	puts("==========================");
 	puts("(S)ubscribe to my channel");
 	puts("(I)nquire about account deletion");
 	puts("(M)ake an Twixer account");
 	puts("(P)ay for premium membership");
	puts("(l)eave a message(with or without logging in)");
	puts("(e)xit");
}
void processInput(){
  scanf(" %c", &choice);
  choice = toupper(choice);
  switch(choice){
	case 'S':
	if(user){
 		user->whatToDo = (void*)s;
	}else{
		puts("Not logged in!");
	}
	break;
	case 'P':
	user->whatToDo = (void*)p;
	break;
	case 'I':
 	user->whatToDo = (void*)i;
	break;
	case 'M':
 	user->whatToDo = (void*)m;
	puts("===========================");
	puts("Registration: Welcome to Twixer!");
	puts("Enter your username: ");
	user->username = getsline();
	break;
   case 'L':
	leaveMessage();
	break;
	case 'E':
	exit(0);
	default:
	puts("Invalid option!");
	exit(1);
	  break;
  }
}
int main(){
	setbuf(stdout, NULL);
	user = (cmd *)malloc(sizeof(user));
	while(1){
		printMenu();
		processInput();
		//if(user){
			doProcess(user);
		//}
	}
	return 0;
}
```
A binary file was attached.
## Solution
This program is a Twitter-clone with some tweet-related functionality.
Reviewing the code, we can see a few things. First, we notice that the program leaks the address of `hahaexploitgobrrr` - the function that prints the flag. So we can be sure that we'll want to call it somehow.
We can also see that `user` is allocated on the heap, and that we can free `user` by calling `i()`. Furthermore, due to `main()`'s implementation, we can still dereference `user` even after calling `i()` to free it.
The attack is a simple heap exploit. We'll walk through an example using the debugger.
Let's start by checking the heap address that's assigned to `user` during `main`'s initialization:
```
$eax   : 0x0804c1a0  →  0x00000000
$ebx   : 0x0804b000  →  0x0804af0c  →  0x00000001
$ecx   : 0x0
$edx   : 0x4
$esp   : 0xffffd990  →  0x00000004
$ebp   : 0xffffd9a8  →  0x00000000
$esi   : 0xf7fb5000  →  0x001e4d6c
$edi   : 0xf7fb5000  →  0x001e4d6c
$eip   : 0x08048d6f  →   add esp, 0x10
$eflags: [zero carry parity adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]
$cs: 0x0023 $ss: 0x002b $ds: 0x002b $es: 0x002b $fs: 0x0000 $gs: 0x0063
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
0xffffd990│+0x0000: 0x00000004   ← $esp
0xffffd994│+0x0004: 0x00000000
0xffffd998│+0x0008: 0xffffda6c  →  0xffffdbf4  →  "LANG=en_IL"
0xffffd99c│+0x000c: 0x08048d49  →   add ebx, 0x22b7
0xffffd9a0│+0x0010: 0xffffd9c0  →  0x00000001
0xffffd9a4│+0x0014: 0x00000000
0xffffd9a8│+0x0018: 0x00000000   ← $ebp
0xffffd9ac│+0x001c: 0xf7deee46  →   add esp, 0x10
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────
    0x8048d65         sub    esp, 0xc
    0x8048d68         push   0x4
    0x8048d6a         call   0x8048620 
 →  0x8048d6f         add    esp, 0x10
    0x8048d72         mov    edx, eax
    0x8048d74         mov    eax, 0x804b060
    0x8048d7a         mov    DWORD PTR [eax], edx
    0x8048d7c         call   0x8048b2d 
    0x8048d81         call   0x8048bd5 
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, Name: "vuln", stopped 0x8048d6f in main (), reason: SINGLE STEP
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x8048d6f → main()
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
gef>
```