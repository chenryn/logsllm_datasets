:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_Network_Bonding.html#sec-Configure_Network_Bonding-additional_resources}4.7. 其他资料 {.title}
:::
::: para
以下信息资源提供有关网络绑定的附加信息。
:::
::: section
::: titlepage
## [⁠]{#ch-Configure_Network_Bonding.html#sec-Configure_Network_Bonding-docs-inst}4.7.1. 已安装文档 {.title}
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `nmcli(1)`{.filename} man page --- 描述
    [**NetworkManager**]{.application} 的命令行工具。
    :::
-   ::: para
    `nmcli-examples(5)`{.filename} man page --- 提供
    [**nmcli**]{.application} 命令示例。
    :::
-   ::: para
    `nm-settings(5)`{.filename} man page --- 描述
    [**NetworkManager**]{.application} 连接的设置及参数。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#ch-Configure_Network_Bonding.html#sec-Configure_Network_Bonding_Online_Documentation}4.7.2. 在线文档 {.title}
:::
::: para
::: variablelist
[[*《Red Hat Enterprise Linux 7 系统管理员指南》*](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/)]{.term}
:   ::: para
    解释内核模块功能的用法
    :::
[]{.term}
:   ::: para
    有关使用绑定接口配置 VLAN 设备的 Red Hat 知识库文章中。
    :::
:::
:::
:::
:::
:::
[]{#ch-Configure_Network_Teaming.html}
::: chapter
::: titlepage
# [⁠]{#ch-Configure_Network_Teaming.html#ch-Configure_Network_Teaming}第 5 章 配置网络成组（Network Teaming） {.title}
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_Network_Teaming.html#sec-Understanding_Network_Teaming}5.1. 了解网络成组 {.title}
:::
::: para
联合或合并网络连接，以提供具有较高吞吐量的本地连接或冗余的方式可称为["[频道绑定]{.quote}"]{.quote}、["[以太网绑定]{.quote}"]{.quote}、["[端口聚合]{.quote}"]{.quote}、["[频道成组]{.quote}"]{.quote}、["[NIC
成组]{.quote}"]{.quote}、["[链接合并]{.quote}"]{.quote} 等等。这个最初在
Linux
内核中应用的概念泛指["[绑定]{.quote}"]{.quote}。现使用网络成组（Network
Teaming）代表这个概念的最新应用。这不会影响现有的绑定驱动程序，网络成组会作为备选方法提供，且不会替换
Red Hat Enterprise Linux 7 中的绑定。
:::
::: para
网络成组或成组旨在通过提供小内核驱动程序，以便使用不同的方法应用这个概念，实现数据包流的快速处理，并让各种用户空间应用程序在用户空间执行各种任务。该驱动程序有一个*应用程序编程接口*（``{=html}API``{=html}），即
["[成组 Netlink API]{.quote}"]{.quote}，可使用该接口进行 Netlink
通讯。用户空间程序库使用这个 API 与该驱动程序通讯。库指的是
["[lib]{.quote}"]{.quote}，可用来进行成组 Netlink 通讯及 RT Netlink
信息在用户空间的换行。同时还提供应用程序守护进程 `teamd`{.systemitem}
使用 Libteam 库。`teamd`{.systemitem}
的实例可控制成组驱动程序中的实例。该守护进程通过使用附加代码（即
["[运行程序]{.quote}"]{.quote}）采用负载平衡及 active-backup
逻辑（比如轮询）。通过使用这个方式分离代码，可方便网络成组对负载平衡及冗余要求的扩展及延伸解决方案。例如：使用
`teamd`{.systemitem} 编写自定义运行程序应用新的逻辑可相对简单，即使
`teamd`{.systemitem} 为自选程序，用户仍可编写其自己的应用程序以便使用
[**libteam**]{.application}。
:::
::: para
[**teamdctl**]{.application} 提供一个用来控制使用 D-bus 运行
`teamd`{.systemitem} 实例的工具。它可为 `teamd`{.systemitem} D-Bus API
提供 D-Bus 换行程序。默认情况下，`teamd`{.systemitem} 使用 Unix
域套接字（Unix Domain Socket）进行侦听和通讯，但仍监控
D-Bus。这样做是保证能够在没有 D-Bus 或者尚未载入 D-Bus 的环境中使用
`teamd`{.systemitem}。例如：引导 `teamd`{.systemitem} 链接时不一定载入
D-Bus。可在运行时使用 [**teamdctl**]{.application}
工具读取配置、连接监控程序状态、端口状态检查及变更、添加和删除端口以及将端口状态在
active 和 backup 状态间切换。
:::
::: para
成组 Netlink API 通信使用 Netlink 信息与用户空间应用程序通讯。用户空间库
[**libteam**]{.application} 不会直接与这个 API 互动，但会使用
[**libnl**]{.application} 或 [**teamnl**]{.application} 与驱动程序 API
互动。
:::
::: para
总之，不会直接配置或控制内核中运行的成组驱动程序实例。所有配置均采用用户空间应用程序完成，比如
[**teamd**]{.application} 程序。然后该程序会根据需要指向内核驱动程序。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_Network_Teaming.html#sec-Team-Understanding_the_Default_Behavior_of_Master_and_Slave_Interfaces}5.2. 了解主接口及从属接口的默认行为 {.title}
:::
::: para
使用 `NetworkManager`{.systemitem}
守护进程控制成组的端口接口时，特别是发现错误时，请记住以下要点：
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    启动主接口不会自动启动端口接口。
    :::
2.  ::: para
    启动端口接口总是会启动主接口。
    :::
3.  ::: para
    停止主接口总是会停止端口接口。
    :::
4.  ::: para
    没有端口的主机可启动静态 `IP`{.systemitem} 连接。
    :::
5.  ::: para
    没有端口的主机在启动 `DHCP`{.systemitem} 连接时会等待端口。
    :::
6.  ::: para
    添加附带载波的端口后，使用 `DHCP`{.systemitem}
    连接的主机会等待端口完成连接。
    :::
7.  ::: para
    添加不附带载波的端口后，使用 `DHCP`{.systemitem}
    连接的主机会让端口继续等待。
    :::
:::
:::
::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**警告**
:::
::: admonition
::: para
不支持对使用线缆但没有网络交换机的连接进行成组操作。如果没有网络交换机，在此论述的这个故障转移机制就无法工作。详情请查看
Red Hat
知识库文章[*《为什么在使用交叉线缆的直接连接中不支持绑定？》*](https://access.redhat.com/solutions/202583)
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_Network_Teaming.html#sec-Comparison_of_Network_Teaming_to_Bonding}5.3. 网络成组和绑定对比 {.title}
:::
::: para
:::
::: table
[⁠]{#ch-Configure_Network_Teaming.html#Bonding_Teaming_Comparison}
**表 5.1. 绑定及成组功能对比**
::: table-contents
  功能                                                     绑定                     成组
  -------------------------------------------------------- ------------------------ ------------
  多播 Tx 策略                                             是                       是
  轮询 Tx 策略                                             是                       是
  active-backup Tx 策略                                    是                       是
  LACP (802.3ad) 支持                                      是（仅适用于 passive）   是
  基于哈希字符的 Tx 策略                                   是                       是
  用户可设定哈希功能                                       否                       是
  Tx 负载平衡支持（TLB）                                   是                       是
  LACP 哈希端口选择                                        是                       是
  用于 LACP 支持的负载平衡                                 否                       是
  Ethtool 链接监控                                         是                       是
  ARP 链接监控                                             是                       是
  NS/NA (IPv6) 链接监控                                    否                       是
  端口启动/断开延迟                                        是                       是
  端口优先权及粘性（["[主要]{.quote}"]{.quote}选项加强）   否                       是
  根据端口链接进行独立监控的设置                           否                       是
  多链接监控设置                                           有限监控                 是
  无锁 Tx/Rx 路径                                          无 (rwlock)              有 (RCU)
  VLAN 支持                                                是                       是
  用户空间运行时控制                                       有限监控                 全面控制
  用户空间逻辑                                             否                       是
  延展性                                                   困难                     容易
  模块设计                                                 否                       是
  性能开销                                                 低                       非常低
  D-Bus 接口                                               否                       是
  多设备堆叠                                               是                       是
  使用 LLDP 进行零配置                                     否                       （计划中）
  NetworkManager 支持                                      是                       是
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_Network_Teaming.html#sec-Understanding_the_Network_Teaming_Daemon_and_the_Runners}5.4. 了解网络成组守护进程及"运行程序" {.title}
:::
::: para
成组守护进程 `teamd`{.systemitem} 使用 [**libteam**]{.application}
控制成组驱动器中的一个实例。这个成组驱动器实例添加硬件设备驱动程序实例以构成网络链接["[成组]{.quote}"]{.quote}。这个成组驱动器为内核的其他部分提供网络接口，比如
[team0]{.interface}。文档中会为由成组驱动程序实例创建的接口按顺序命名，比如
[team0]{.interface}、[team1]{.interface}
等等。这样便于理解，但可使用其他名称。`teamd`{.systemitem}
采用在所有成组方法中通用的逻辑；不同负载分享及备份方法中特有的功能，比如轮询，则是由不同的代码单位，也称["[运行程序]{.quote}"]{.quote}实施。因为类似
["[模块]{.quote}"]{.quote} 和 ["[模式]{.quote}"]{.quote}
等词语有与内核相关的特别含义，所以选择["[运行程序]{.quote}"]{.quote}代表这些代码单元。用户可在
JSON 形式的配置文件中指定运行程序，然后就会在创建实例时将其代码编译到
`teamd`{.systemitem}
实例中。运行程序不是插件，因为运行程序的代码是在创建该程序时编译到
`teamd`{.systemitem} 中。以后可能会有将代码作为 `teamd`{.systemitem}
插件创建的需求。
:::
::: para
可在编写时使用以下运行程序。
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    broadcast（可将数据传送到所有端口）
    :::
-   ::: para
    round-robin（可按顺序将数据传送到所有端口）
    :::
-   ::: para
    active-backup（使用一个端口或链接时其他则处于备用状态）
    :::
-   ::: para
    loadbalance（使用主动 Tx 负载平衡及基于 BPF 的 Tx 端口选择程序）
    :::
-   ::: para
    lacp（采用 802.3ad 链接合并控制协议）
    :::
:::
:::
::: para
此外还可使用以下链接监视程序：
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    [**ethtool**]{.application}（Libteam lib 使用
    [**ethtool**]{.application}
    监视链接状态变化）。若没有在配置中指定其他链接监控程序，则默认使用该程序。
    :::
-   ::: para
    [**arp_ping**]{.application}（使用 [**arp_ping**]{.application}
    程序监控使用 ARP 数据包的远端硬件地址状态。）
    :::
-   ::: para
    [**nsna_ping**]{.application}（使用 `IPv6`{.systemitem}
    邻居发现协议中的的邻居播发和邻居请求给你监控邻居的接口状态。）
    :::
:::
代码中没有对使用具体运行程序防止使用特定链接监视程序的限制，但使用
[**lacp**]{.application} 运行程序时，只推荐使用
[**ethtool**]{.application} 链接监视程序。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_Network_Teaming.html#sec-Install_the_Network_Teaming_Daemon}5.5. 安装网络成组守护进程 {.title}
:::
::: para
默认不会安装网络成组守护进程 `teamd`{.systemitem}。要安装
`teamd`{.systemitem}，请作为 `root`{.systemitem} 运行以下命令：
``` screen
~]# yum install teamd
```
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Configure_Network_Teaming.html#sec-Converting_a_Bond_to_a_Team}5.6. 将绑定转换为成组 {.title}
:::
::: para
可使用 [**bond2team**]{.application}
工具将现有绑定配置文件转换为成组配置文件。它可将 `ifcfg`{.filename}
格式的绑定配置文件转换为 `ifcfg`{.filename} 或 JSON
格式的成组配置文件。注：重命名后可能会破坏与原来的接口名称关联的防火墙规则、别名接口及其他信息，因为这个工具只更改
`ifcfg`{.filename} 文件，其他什么都不会做。