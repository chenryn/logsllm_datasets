# Title: On the Protocol Composition Logic PCL
# Author: Cas J. F. Cremers
# Affiliation: ETH Zurich, Switzerland
# Contact: [Your Email Address]

## Abstract
Recent developments in formal security protocol analysis include the introduction of the Protocol Composition Logic (PCL). This paper identifies several issues with PCL and its extensions as defined in [9, 13, 14, 17, 20, 21]. These issues impose significant restrictions on the scope of PCL and suggest that some claimed PCL proofs are either unprovable within the logic or rely on unsound axioms. Specifically, this includes the proofs for the CR protocol from [13, 14] and the SSL/TLS and IEEE 802.11i protocols from [20, 21]. Where possible, we propose solutions to these problems.

### Categories and Subject Descriptors
- **C.2.2 [Computer-communication Networks]:** Network Protocolsâ€”Protocol Verification
- **F.3 [Logics and Meanings of Programs]:** Specifying and Verifying and Reasoning about Programs

### General Terms
- Security, Theory

### Keywords
- Security protocol analysis, logic, composition

## 1. Introduction
Formal verification of security protocols has been an active area of research over the past two decades, but a definitive model and method for security protocol analysis remain elusive.

The most successful approaches to security protocol analysis have focused on tools for detecting attacks, often based on bounded model checking or constraint solving, such as [1, 22]. When such tools detect an attack, it can be manually verified. Some tools even support unbounded verification, e.g., [4, 7]. However, while these tools can confirm the absence of known attacks, they provide little insight into why a protocol is secure.

An alternative approach is to develop a logic for reasoning about security protocols. A proof in such a logic can offer insights into the mechanisms that ensure protocol correctness. Despite the promise of this approach, previous attempts, such as BAN logic [6], have encountered difficulties. One challenge is to create a logic that is sound with respect to the complex semantics of security protocol execution in the presence of an active intruder, while also providing concise formal proofs.

A recent attempt to address this challenge is the Protocol Composition Logic (PCL) [14]. PCL has evolved from a model for expressing protocol composition and refinement into a logic that can formally prove security properties of protocols [9, 13, 17]. Variants of PCL have been applied to numerous case studies and offer several interesting features. For example, PCL allows reasoning about security protocols without explicitly modeling the (complex) intruder through invariant reasoning captured by the honesty rule. This also enables the logic to handle protocol composition and refinement, where proofs can be reused. PCL has been extended with features such as hash functions [21], which were used for modular correctness proofs of IEEE 802.11i and TLS.

In this paper, we identify several issues with PCL as defined in [9, 13, 14, 17, 20, 21]. These issues affect the scope of PCL, some claimed formal proofs, and several extensions to the base model. We show that, contrary to claims in [14], PCL cannot be used to prove common authentication properties of protocols without signatures. We also demonstrate that some claimed PCL proofs are incorrect due to the inability to establish preceding actions in a thread and the lack of type restrictions in PCL. Additionally, we find that the Diffie-Hellman extension [9, 13, 14, 17] does not correctly capture the algebraic behavior of Diffie-Hellman-like protocols, and the hash function extension [20, 21] is not sound. Some of these issues can be resolved with minor modifications to PCL, but others require further investigation. Our observations suggest that changes to existing axioms, the introduction of new axioms, and the addition of a type system are necessary.

The purpose of this paper is to highlight the challenges that need to be addressed to make a logic like PCL effective. We hope our findings will contribute to the improvement of PCL and provide a better understanding of the pitfalls in designing a compact and usable formal logic for security protocols.

### Scope of the Paper
This paper is inherently challenging to present due to the variations in notation and technical details across different PCL papers. Many ideas in PCL were introduced in precursors [18, 19], but these variants use different concepts than later versions. Early versions of PCL do not have the notion of threads (processes, runs, or role instances), and events are bound to agents. More recent versions bind events to threads of agents, distinguishing between multiple threads of the same agent. We focus on [9, 13, 14, 17], which contain similar descriptions of PCL, and refer to this as "basic PCL." The comments in Section 4.2 apply only to the extensions in [20, 21]. This paper does not cover the recent extensions for secrecy in [24] or the computational variants in [15].

### Syntax and Page References
To pinpoint specific formulas, we use the most recent description of PCL from 2007 [14]. We assume the reader is familiar with at least one of the papers [9, 13, 14, 17] or [20, 21], but the main points should be clear to those familiar with formal security protocol analysis.

### Structure of the Paper
- **Section 2:** Preliminaries
- **Section 3:** Problems with the Basic Definition of PCL
- **Section 4:** Issues with Existing PCL Extensions
- **Section 5:** Conclusion

### Acknowledgements
The author thanks David Basin, Anupam Datta, Felix Klaedtke, Sjouke Mauw, Simon Meier, John C. Mitchell, Arnab Roy, and the anonymous referees for their valuable discussions and feedback on earlier versions of this paper.

## 2. Preliminaries
This section provides a brief overview of PCL concepts necessary for understanding the subsequent sections. We use the syntax from [14], and encourage readers to refer to the original papers for more details.

### Structure of PCL
PCL introduces notation to define terms, which are used to define protocols. For each protocol, an execution model is defined, assigning a set of possible execution histories (runs) to the protocol. A protocol logic is then defined to reason about these runs, and it is proven sound with respect to the execution model. If a property is proven in the protocol logic, a similar property should hold in the execution model.

### Protocols and Terms
- **Terms:** A term system includes constants (nonces, names, keys, etc.), variables, and compound terms (tuples, encryptions, signatures).
- **Protocols:** A protocol \( Q \) is defined as a set of roles, where each role \( \rho \in Q \) is a list of actions. Actions include sending, receiving, generating fresh terms, encryption, decryption, and signature verification.
- **Basic Sequences:** Each role is partitioned into basic sequences, which are contiguous subsequences starting with the first action or a receive action, and containing no other receive actions. Basic sequences represent atomic actions and correspond to step-compression in other models.

### Execution Model
- **Agents:** Actions are executed by agents, denoted as \( \hat{X}, \hat{Y} \). Honest agents, defined as \( \text{HONEST}(C) \), execute their roles as expected.
- **Threads:** Agents can execute each protocol role multiple times, with each instance called a thread (strand, process, run). Threads are denoted as \( X, Y, Z \), and a sequence of actions in a thread \( X \) is written as \( [P]_X \).
- **Intruders:** Agents not in \( \text{HONEST}(C) \) can execute intruder roles, following the Dolev-Yao model.

### Table 1: Examples of PCL Actions and Predicates
| Action | Associated Term Predicate | Structure (in thread \( X \)) |
|--------|---------------------------|--------------------------------|
| send \( \hat{X}, \hat{Y}, m \) | Send(X, m) | - |
| receive \( \hat{X}, \hat{Y}, m \) | Receive(X, m) | - |
| new \( x \) | Gen(X, x) | - |
| enc \( m, K \) | t = ENCK{| m|} | Encrypt(X, t) |
| dec \( t, K \) | t = ENCK{| m|} | Decrypt(X, t) |
| verify \( t, m, K \) | t = SIGK{| m|} | Verify(X, t) |
| - | Has(X, m) | - |
| - | Honest( \( \hat{X} \)) | - |
| - | Contains(t, \( t' \)) | - |

## 3. Problems with the Basic Definition of PCL
[Detailed discussion of the identified problems with the basic definition of PCL, including the inability to prove certain authentication properties and the lack of type restrictions.]

## 4. Issues with Existing PCL Extensions
[Discussion of the issues with the Diffie-Hellman and hash function extensions, and potential solutions.]

## 5. Conclusion
[Summary of the main findings and their implications for the future development of PCL.]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the content.