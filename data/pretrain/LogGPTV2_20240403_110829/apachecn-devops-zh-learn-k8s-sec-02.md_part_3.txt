        - ssl.foo.com
        secretName: secret-tls
      rules:
        - host: ssl.foo.com
          http:
            paths:
            - path: /
              backend:
                serviceName: service-1
                servicePort: 443
    ```
    通过这种配置，`secret-tls`机密为端点提供了私钥和证书。
*   **负载平衡**:负载平衡入口提供负载平衡策略，包括所有入口对象的负载平衡算法和权重方案。
在本节中，我们介绍了 Kubernetes 服务的基本概念，包括入口对象。这些都是 Kubernetes 的物件。然而，实际的网络通信魔法是由几个组件完成的，比如`kube-proxy`。接下来，我们将介绍 CNI 和 CNI 插件，这是一个服务于 Kubernetes 集群网络通信的基础。
# 介绍 CNI 和 CNI 插件
在 Kubernetes， **CNI** 代表**容器网络接口**。CNI 是一个**云原生计算基金会** ( **CNCF** )项目——你可以在这里找到更多关于 GitHub 的信息:[https://github.com/containernetworking/cni](https://github.com/containernetworking/cni)。这个项目基本上有三个东西:一个规范，编写插件在 Linux 容器中配置网络接口的库，以及一些支持的插件。当人们谈论 CNI 的时候，他们通常会提到规范或者 CNI 插件。CNI 和 CNI 插件之间的关系是 CNI 插件是实现 CNI 规范的可执行二进制文件。现在，让我们从高层次来研究 CNI 规范和插件，然后我们将简要介绍 CNI 插件之一，Calico。
## CNI 规范和插件
CNI 规范只关注容器的网络连通性，以及删除容器时移除分配的资源。让我详细说明这一点。首先，从容器运行时的角度来看， CNI 规范定义了一个接口，供**容器运行时接口** ( **CRI** )组件(如 Docker)进行交互，例如，在创建容器时将容器添加到网络接口，或者在容器死亡时删除网络接口。其次，从 Kubernetes 网络模型的角度来看，由于 CNI 插件实际上是另一种味道的 Kubernetes 网络插件，它们必须符合 Kubernetes 网络模型的要求，详细如下:
1.  一个节点上的 Pods 可以与所有节点中的所有 pods 通信，而无需使用 NAT。
2.  `kubelet`等代理可以与同一个节点的 PODS 进行通信。
有一些 CNI 插件可供选择——仅举几个例子:印花布、Cilium、WeaveNet、Flannel 等等。CNI 插件的实现各不相同，但总的来说，CNI 插件做的是相似的。他们执行以下任务:
*   管理容器的网络接口
*   为 PODS 分配 IP 地址。这通常是通过调用其他 **IP 地址管理** ( **IPAM** )插件如`host-local`来完成的
*   实施网络策略(可选)
CNI 规范中不要求网络策略的实现，但是当 DevOps 选择使用哪个 CNI 插件时，考虑安全性是很重要的。Alexis Ducastel 的文章([https://it next . io/benchmark-results-of-kubernetes-network-plugins-cni-over-10g bit-s-network-36475925 a560](https://itnext.io/benchmark-results-of-kubernetes-network-plugins-cni-over-10gbit-s-network-36475925a560))对主流 CNI 插件和 2019 年 4 月的最新更新做了很好的对比。安全对比值得注意，如下图所示:
![Figure 2.9 – CNI plugins comparison ](img/B15566_02_009.jpg)
图 2.9–CNI 插件比较
您可能会注意到，列表中的大多数 CNI 插件都不支持加密。Flannel 不支持 Kubernetes 网络策略，`kube-router`只支持入口网络策略。
由于 Kubernetes 自带默认的`kubenet`插件，为了在 Kubernetes 集群中使用 CNI 插件，用户必须通过`--network-plugin=cni`命令行选项，并通过`--cni-conf-dir`标志或在`/etc/cni/net.d`默认目录中指定一个配置文件。以下是在 Kubernetes 集群中定义的示例配置，以便`kubelet`可以知道与哪个 CNI 插件交互:
```
{
  'name': 'k8s-pod-network',
  'cniVersion': '0.3.0',
  'plugins': [
    {
      'type': 'calico',
      'log_level': 'info',
      'datastore_type': 'kubernetes',
      'nodename': '127.0.0.1',
      'ipam': {
        'type': 'host-local',
        'subnet': 'usePodCidr'
      },
      'policy': {
        'type': 'k8s'
      },
      'kubernetes': {
        'kubeconfig': '/etc/cni/net.d/calico-kubeconfig'
      }
    },
    {
      'type': 'portmap',
      'capabilities': {'portMappings': true}
    }
  ]
}
```
CNI 配置文件告诉`kubelet`使用卡利科作为 CNI 插件，并使用`host-local`为 Pod 分配 IP 地址。在列表中，还有另一个名为`portmap`的 CNI 插件，用于支持`hostPort`，该插件允许在主机 IP 上公开容器端口。
当使用**Kubernetes 操作** ( **kops** 创建集群时，您还可以指定您想要使用的 CNI 插件，如以下代码块所示:
```
  export NODE_SIZE=${NODE_SIZE:-m4.large}
  export MASTER_SIZE=${MASTER_SIZE:-m4.large}
  export ZONES=${ZONES:-'us-east-1d,us-east-1b,us-east-1c'}
  export KOPS_STATE_STORE='s3://my-state-store'
  kops create cluster k8s-clusters.example.com \
  --node-count 3 \
  --zones $ZONES \
  --node-size $NODE_SIZE \
  --master-size $MASTER_SIZE \
  --master-zones $ZONES \
  --networking calico \
  --topology private \
  --bastion='true' \
  --yes
```
在本例中，集群是使用`calico` CNI 插件创建的。
## 印花布
Calico 是一个开放的源项目，支持云原生应用连接和策略。它与主要的编排系统集成，如 Kubernetes、Apache Mesos、Docker 和 OpenStack。与其他 CNI 插件相比，这里有一些关于 Calico 的东西值得强调:
1.  Calico 提供了一个扁平的 IP 网络，这意味着不会有 IP 封装附加到 IP 消息(没有覆盖)。此外，这意味着分配给 pod 的每个 IP 地址都是完全可路由的。无需覆盖即可运行的能力提供了出色的吞吐量特性。
2.  根据亚历克西斯·杜卡斯泰尔的实验，卡利科具有更好的性能和更少的资源消耗。
3.  与 Kubernetes 的内置网络策略相比，Calico 提供了更全面的网络策略。Kubernetes 的网络策略只能定义白名单规则，而 Calico 的网络策略可以定义黑名单规则(拒绝)。
将 Calico 集成到 Kubernetes 中时，您将看到三个组件在 Kubernetes 集群中运行，如下所示:
*   `calico/node`是一个 DaemonSet 服务，这意味着它运行在集群中的每个节点上。它负责编程和路由内核路由到本地工作负载，并强制实施集群中当前网络策略所需的本地过滤规则。它还负责向其他节点广播路由表，以保持整个集群中的 IP 路由同步。
*   CNI 插件二进制文件。这包括两个二进制可执行文件(`calico`和`calico-ipam`)和一个配置文件，该文件直接与每个节点上的 Kubernetes `kubelet`进程集成。它观察 PODS 创建事件，然后将 PODS 添加到印花布网络中。
*   作为独立 Pod 运行的 Calico Kubernetes 控制器监控 Kubernetes **应用编程接口** ( **API** )以保持 Calico 同步。
卡利科是一个流行的 CNI 插件，也是谷歌 Kubernetes 引擎 ( **GKE** )的默认 CNI 插件。Kubernetes 管理员有完全的自由选择任何符合他们要求的 CNI 插件。请记住，安全性是必不可少的，也是决策因素之一。在前面的部分中，我们已经讨论了很多关于 Kuberntes 网络的内容。在你忘记之前，让我们快速复习一遍。
## 收尾
在 Kubernetes 集群中，每个 pod 都分配了一个 IP 地址，但这是一个内部 IP 地址，不能从外部访问。同一个 pod 中的容器可以通过名称网络接口相互通信，因为它们共享同一个网络名称空间。同一个 pod 内部的容器也需要解决端口资源冲突问题；然而，这种情况不太可能发生，因为应用运行在不同的容器中，这些容器为了特定的目的分组在同一个 pod 中。此外，值得注意的是，同一个 pod 内的容器可以通过共享卷、IPC 通道和过程信号在网络之外进行通信。
Kubernetes 服务有助于稳定 Pod 之间的通信，因为 Pod 通常是短暂的。该服务还获得一个分配的 IP 地址，但这是虚拟的，这意味着没有为该服务创建网络接口。`kube-proxy`网络魔术师实际上将所有到达目标服务的流量路由到后端 Pod 。`kube-proxy`有三种不同的模式:用户空间代理、iptables 代理和 IPVS 代理。Kubernetes 服务不仅支持 Pod 到 Pod 的通信，还支持来自外部的通信。
有几种方法可以公开服务，以便可以从外部源(如节点端口、负载平衡器和外部名称)访问它们。此外，您可以创建一个入口对象来实现相同的目标。最后，尽管很难，我们将使用下面的单个图表来尝试巩固我们想要在本章中强调的大部分知识:
![Figure 2.10 – Communications: inside pod, among pods, and from external sources ](img/B15566_02_010.jpg)
图 2.10–通信:Pod 内部、Pod 之间以及外部来源
几乎总是有一个负载平衡器位于 Kubernetes 集群的前面。对于我们前面提到的不同服务类型，这可能是通过负载均衡器公开的单个服务(这是服务 **A** ，也可能是通过节点端口公开的。这是服务 **B** 使用两个节点中的节点端口 **30000** 接受外部流量。尽管入口不是一种服务类型，但与负载均衡器类型的服务相比，它功能强大且经济高效。服务 **C** 和服务 **D** 路由由同一个入口对象控制。在前面的标注图中，集群中的每个 pod 可能都有一个内部通信拓扑。
# 总结
在本章中，我们首先讨论了典型的端口资源冲突问题，以及 Kubernetes 网络模型如何避免这种情况，同时保持良好的兼容性，以便将应用从虚拟机迁移到 Kubernetes pods。然后，我们讨论了 Pod 内部、Pod 之间以及从外部源到 Pod 的通信。
最后但同样重要的是，我们介绍了 CNI 的基本概念，并介绍了 Calico 如何在 Kubernetes 环境中工作。在前两章之后，我们希望您对 Kubernetes 组件如何工作以及事物如何相互通信有一个基本的了解。
在下一章中，我们将讨论对 Kubernetes 集群进行威胁建模。
# 问题
1.  在 Kubernetes 集群中，IP 地址是分配给 pod 还是容器？
2.  同一个 pod 中的容器之间将共享哪些 Linux 名称空间？
3.  什么是暂停容器，它有什么用？
4.  Kubernetes 服务有哪些类型？
5.  除了负载平衡器类型的服务之外，使用入口有什么优势？
# 进一步阅读
如果你想建立自己的 CNI 插件或评估卡利科更多，请查看以下链接:
*   [https://github . com/container networking/CNI](https://github.com/containernetworking/cni)
*   [https://docs . project calico . org/v 3.11/reference/architecture/](https://docs.projectcalico.org/v3.11/reference/architecture/)
*   [https://docs . project calico . org/v 3.11/入门/kubernetes/安装/集成](https://docs.projectcalico.org/v3.11/getting-started/kubernetes/installation/integration)