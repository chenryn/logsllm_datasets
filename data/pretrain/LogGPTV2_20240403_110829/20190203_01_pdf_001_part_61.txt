### 10.4.1.14 Applying Grants of Table-Level User Privileges on SMR

#### Target Tables
**Note:** This option applies only to the subscription server and is relevant when both the publication and subscription databases are PostgreSQL instances.

When creating a subscription in a single-master replication (SMR) system, the subscription server creates the necessary tables in the subscription database. By default, `skipTablePrivileges` is set to `true`, meaning no database user privileges are granted on these subscription tables. The owner of the subscription tables is the subscription database user specified during the creation of the subscription database definition (refer to Section 5.3.2).

This setup is the typical and expected scenario, as the data in subscription tables should not be updated by user applications other than the xDB Replication Server. If specific database users need access to the subscription tables, they must be explicitly granted the required privileges.

To have the subscription server grant database user privileges on the subscription tables for the same users who already have access to the publication tables, set `skipTablePrivileges` to `false` in the subscription server configuration file. Note that the setting of `skipTablePrivileges` in the publication server configuration file is ignored in an SMR system.

In this case, the same access privileges will be granted on the subscription tables to the database users with privileges on the publication tables at the time the subscription is defined using the xDB Replication Console or the xDB Replication Server CLI.

**Configuration:**
```plaintext
skipTablePrivileges={true | false}
Default: true
```

### 10.4.1.15 Log-Based Method of Synchronization Options

**Note:** This option applies only to the publication server.

#### walTxSetCreationInterval
The `walTxSetCreationInterval` option controls the time interval between the creation of transaction sets, which affects the size of the transaction set (batch size). The default setting is 5,000 milliseconds (5 seconds), assuming there are changes to the publication tables to be replicated.

Adjust this value based on the workload, specifically the transaction per minute (TPM) rate, on the target publication tables:
- For a higher TPM rate, set `walTxSetCreationInterval` to a lower value.
- For a lower TPM rate, set `walTxSetCreationInterval` to a higher value to ensure an average batch size of 100 to 500 transactions.

**Configuration:**
```plaintext
walTxSetCreationInterval=n
Default: 5000 milliseconds
```

#### walStreamQueueLimit
The `walStreamQueueLimit` option defines the maximum number of WAL entries that can be held in the queue pending processing. If the queue becomes full, the WAL stream receiver blocks additions until space becomes available. A value of 0 indicates no upper limit. Be cautious with high settings, as they may lead to Java heap space out of memory errors. Refer to Section 5.1.1 for adjusting the Java heap memory size.

**Configuration:**
```plaintext
walStreamQueueLimit=n
Default: 10000
```

#### pendingTxSetThreshold
The `pendingTxSetThreshold` option sets the upper threshold for the number of pending transaction sets. When this threshold is reached, the extraction and parsing of transaction data from the WAL stream are paused until the pending transactions are processed. This prevents continuous data pushing over the WAL stream channel without processing, which could result in Java heap space out of memory errors. Refer to Section 5.1.1 for adjusting the Java heap memory size.

**Configuration:**
```plaintext
pendingTxSetThreshold=n
Default: 10
```

### 10.4.1.16 Setting the Apache DBCP Connection Validation Query Timeout

**Note:** This option applies only to the publication server.

The Apache Commons Database Connection Pooling (DBCP) component is used by the publication server for establishing JDBC connections. The `jdbc.pool.validationQueryTimeout` option controls the timeout setting when a validation query is executed to allocate a connection from the pool. The default timeout is 30 seconds. In cases of unreliable network connections, you can increase the timeout value. Set to 0 if no timeout is desired.

**Configuration:**
```plaintext
jdbc.pool.validationQueryTimeout=n
Default: 30
```

### 10.4.2 Encrypting the Password in the xDB Replication Configuration File

If you need to change the password in the xDB Replication Configuration file, follow these steps:

1. **Create a text file with the password:**
   - Ensure there is no white space before or after the password.
   - Example: `newpassword` in the input file `passfile`.

2. **Execute the xDB Replication Server CLI with the `encrypt` command:**
   - Include the Java bin directory in your PATH environment variable.
   - Make XDB_HOME/bin your current working directory.
   - Example:
     ```sh
     $ export PATH=/usr/bin:$PATH
     $ cd /opt/PostgresPlus/9.4AS/bin
     $ java -jar edb-repcli.jar -encrypt -input ~/passfile -output ~/encrypted
     ```

3. **Copy and paste the encrypted password into the xDB Replication Configuration file:**
   - Example:
     ```properties
     #xDB Replication Server Configuration Properties
     #Thu Sep 03 11:13:27 GMT-05:00 2015
     admin_password=4mKq/4jQQoV2IypCSmPpTQ==
     admin_user=admin
     ```

### 10.4.3 Writing a Cron Expression

A cron expression is a text string used to schedule dates and times. The xDB Replication Server uses the Quartz job scheduling system for scheduling replications. A Quartz cron expression consists of six mandatory fields, followed by one optional field, each separated by one or more consecutive space characters.

**Cron Expression Format:**
```plaintext
ss mi hr dd mm dow [ yyyy ]
```

**Fields:**
- `ss`: Second of the minute (0-59)
- `mi`: Minute of the hour (0-59)
- `hr`: Hour of the day (0-23)
- `dd`: Day of the month (1-31 or ?)
- `mm`: Month of the year (1-12 or JAN-DEC)
- `dow`: Day of the week (1-7 or SUN-SAT or ?)

**Special Characters:**
- `,`: Separates a list of values
- `-`: Specifies a range of values
- `*`: Allows all legal values for the field
- `x/i`: Specifies an increment, i, starting with x
- `L`: Last day of the month
- `W`: Weekday closest to the given day
- `#`: nth occurrence of the day of the week

**Examples:**
- `0 0 12 20 AUG ? 2009`: 12:00:00 noon on August 20, 2009
- `0 15 13 ? AUG WED`: 1:15:00 PM every Wednesday in August
- `30 30 8 ? * MON,WED,FRI`: 8:30:30 AM every Monday, Wednesday, and Friday of every month

### 10.4.4 Disabling Foreign Key Constraints for Snapshot Replications

In a snapshot replication, the publication server calls the EnterpriseDB Migration Toolkit to disable foreign key constraints on tables, allowing it to truncate the target tables before loading rows. In PostgreSQL, foreign key constraints are implemented using triggers, so the toolkit disables triggers by setting the `relhastriggers` column of `pg_catalog.pg_class` to `false` for each target table.

No user, including superusers, can directly modify the data in a PostgreSQL system catalog table unless:
- The user is a superuser.
- In PostgreSQL 9.4 or earlier, the `rolcatupdate` column in `pg_catalog.pg_authid` is set to `true` for the superuser.

To verify and grant the privilege to update system catalog tables, use pgAdmin or the Postgres Enterprise Manager Client.

### 10.4.5 Quoted Identifiers and Default Case Translation

A quoted identifier is an identifier enclosed within double quotes (`"`) and stored exactly as given, with no default case translation. Unquoted identifiers undergo default case translation:
- In Oracle, the default case translation is to uppercase.
- In PostgreSQL, the default case translation is to lowercase.

**Examples:**
- `CREATE TABLE "MyTable"`: Stored as `MyTable`
- `CREATE TABLE MyTable`: 
  - In Oracle: `MYTABLE`
  - In PostgreSQL: `mytable`

### 10.4.6 Replicating the SQL Server SQL_VARIANT Data Type

The `SQL_VARIANT` data type allows a column to store values of different data types. To replicate a table with `SQL_VARIANT` to a PostgreSQL database, all values in the `SQL_VARIANT` column must be implicitly convertible to a single data type in PostgreSQL.

**Restrictions:**
- Values in the `SQL_VARIANT` columns must be implicitly convertible to the same data type in PostgreSQL.
- If multiple tables with `SQL_VARIANT` columns are replicated to the same PostgreSQL database, all such columns must contain values that are implicitly convertible to the same data type.

**Example:**
- SQL Server table definition:
  ```sql
  CREATE TABLE variant_tbl (
      f1 INTEGER PRIMARY KEY,
      f2 SQL_VARIANT
  );
  INSERT INTO variant_tbl VALUES (1, CAST(1423.23 AS NUMERIC(6,2)));
  INSERT INTO variant_tbl VALUES (2, CAST(8001 AS INTEGER));
  INSERT INTO variant_tbl VALUES (3, CAST('4321' AS CHAR(4)));
  GO
  ```

- PostgreSQL subscription database:
  ```sql
  CREATE DOMAIN sql_variant AS NUMERIC(6, 2);
  ```

After replication, the subscription table will use the `sql_variant` domain in place of the `SQL_VARIANT` data type.

### 10.5 Service Pack Maintenance

Maintenance items (bug fixes and enhancements) added to this version of xDB Replication Server include:
1. **Product Registration Removal:**
   - Product registration with an EnterpriseDB product license key is no longer required. Related components have been removed, including the Product Registration dialog box, the `license_key` parameter in the configuration file, and the `registerkey` command in the CLI. (43230)

2. **Support for Partitioned Tables:**
   - Partitioned tables created using the declarative partitioning feature of PostgreSQL and Advanced Server version 10 can now be replicated in log-based single-master or multi-master replication systems. (43134)

3. **Table Removal in SMR:**
   - In an SMR system, tables can now be removed from a publication even if there are existing subscriptions. Previously, this was not allowed. (43110)

---

**Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved.**

**EDB Postgres Replication Server User’s Guide**