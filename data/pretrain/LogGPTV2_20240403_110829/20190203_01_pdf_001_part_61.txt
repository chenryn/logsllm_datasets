The default value is false.
10.4.1.14 Applying Grants of Table Level User Privileges on SMR
Target Tables
Note: This option applies to the subscription server only.
Note: This option applies only when both the publication database and the subscription
database are Postgres databases.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 675
EDB Postgres Replication Server User’s Guide
When creating a subscription in a single-master replication system, the subscription
server creates the subscription tables in the subscription database.
When skipTablePrivileges is set to true, which is the default value, no database
user privileges are granted on these subscription tables to any database user. By default
the subscription database user specified when the subscription database definition is
created (see Section 5.3.2) is the owner of the subscription tables.
This is the typical, expected scenario since the data in subscription tables should not be
updated by user applications other than the xDB Replication Server.
Database users that require access to the subscription tables must be explicitly granted
such privileges.
If however, you do want the subscription server to grant database user privileges to the
subscription tables for the same database users that already have access privileges to the
publication tables, set skipTablePrivileges to false in the subscription server
configuration file. (The setting of skipTablePrivileges in the publication server
configuration file is ignored for this process in a single-master replication system.)
In this case, the same access privileges are granted on the subscription tables to database
users with privileges on the publication tables at the time the subscription is defined using
the xDB Replication Console or the xDB Replication Server CLI.
skipTablePrivileges={true | false}
The default value is true.
10.4.1.15 Log-Based Method of Synchronization Options
Note: This option applies to the publication server only.
walTxSetCreationInterval
When using the log-based method of synchronization replication the
walTxSetCreationInterval option controls the time interval between creations of
the transaction sets, which affects the size of the transaction set (that is, the batch size).
The default setting results in the creation of a transaction set every 5,000 milliseconds (5
seconds) assuming changes to the publication tables to be replicated are available.
This value should be adjusted based on the workload (that is, the transaction per minute
(TPM) rate) on the target publication tables.
If the TPM rate is on a higher end, the walTxSetCreationInterval option should be
set to a relatively low value.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 676
EDB Postgres Replication Server User’s Guide
If the TPM rate is on a lower end, the option should be set to a higher value to ensure that
a transaction set is large enough to allow an average batch size in the range of 100 to 500
transactions.
walTxSetCreationInterval=n
The default value is 5000 milliseconds.
walStreamQueueLimit
The walStreamQueueLimit option defines the upper limit for the number of WAL
entries that can be held in the queue pending for processing at a point in time. Once the
queue becomes full, the WAL stream receiver blocks additions until space becomes
available in the queue as transaction entries are popped out of the queue for processing.
A value of 0 indicates there will be no upper limit. Note that too high a setting may result
in Java heap space out of memory errors. See Section 5.1.1 for information on adjusting
the Java heap memory size.
walStreamQueueLimit=n
The default value is 10000.
pendingTxSetThreshold
The pendingTxSetThreshold option defines the upper threshold limit for the number
of pending transaction sets that when reached, causes the extraction of transaction data
from the WAL stream and its parsing to be put on hold until the pending transactions are
processed.
This is to avoid a situation where the data is continuously pushed over the WAL stream
channel, but is not being processed and applied due to some failure or lack of scheduling
of the synchronization process. This may result in a Java heap space out of heap memory
error. See Section 5.1.1 for information on adjusting the Java heap memory size.
pendingTxSetThreshold=n
The default value is 10.
10.4.1.16 Setting the Apache DBCP Connection Validation Query
Timeout
Note: This option applies to the publication server only.
The Apache Commons Database Connection Pooling (DBCP) component is the Apache
pooling framework used by the publication server for establishing JDBC connections.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 677
EDB Postgres Replication Server User’s Guide
The jdbc.pool.validationQueryTimeout option controls the timeout setting when
a validation query is executed at the time of allocating a connection from the pool. This is
the amount of time in seconds before an exception is returned if the connection validation
query does not succeed.
The default timeout value is 30 seconds. In situations where network connections are not
reliable, the timeout value can be increased accordingly to allow more time for the
connection attempt. Specify a value of 0 if no timeout is desired.
jdbc.pool.validationQueryTimeout=n
The default value is 30.
10.4.2 Encrypting the Password in the xDB Replication
Configuration File
If you need to change the password in the xDB Replication Configuration file, you must
first encrypt the password. Use the encrypt command of the xDB Replication Server
CLI to generate the encrypted form of the password from its plain text form given in an
input file.
Step 1: Create a text file with the password you wish to encrypt. Do not leave any white
space before or after the password.
The following example shows the text newpassword in the input file passfile:
$ cat passfile
newpassword
$
Step 2: Use the edb-repcli.jar file to execute the xDB Replication Server CLI with
the encrypt command by first including the Java bin directory in your PATH
environment variable and making XDB_HOME/bin your current working directory.
For example, assuming /usr/bin contains the java executable program and xDB
Replication Server is installed into the POSTGRES_INSTALL_HOME directory, perform
the following:
$ export PATH=/usr/bin:$PATH
$ cd /opt/PostgresPlus/9.4AS/bin
$ java -jar edb-repcli.jar -encrypt -input ~/passfile -output ~/encrypted
The following shows the encrypted form of the password in the output file encrypted:
$ cat ~/encrypted
4mKq/4jQQoV2IypCSmPpTQ==
$
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 678
EDB Postgres Replication Server User’s Guide
Step 3: Copy and paste the encrypted password into the xDB Replication Configuration
file.
#xDB Replication Server Configuration Properties
#Thu Sep 03 11:13:27 GMT-05:00 2015
admin_password=4mKq/4jQQoV2IypCSmPpTQ==
admin_user=admin
10.4.3 Writing a Cron Expression
A cron expression is a text string used to express a schedule of dates and times. The
Linux cron tool uses a cron expression to schedule the execution of a job. xDB
Replication Server uses the Quartz job scheduling system for scheduling replications.
When creating a schedule for an xDB Replication Server replication system, a cron
expression can be specified. There are a number of formats for cron expressions. You
must use the cron expression format supported by Quartz.
The remainder of this section provides an overview of most of the types of cron
expressions that can be used for an xDB Replication Server schedule. For a more
comprehensive treatment of cron expressions, refer to the Quartz documentation.
A Quartz cron expression consists of six mandatory fields, followed by one optional
field. Each field is separated from its neighbors by one or more consecutive space
characters. The fields are order dependent and are listed as they must appear below:
ss mi hr dd mm dow [ yyyy ]
Table 10-4 - Cron Expression Fields
Field Values Description
ss 0 - 59 Second of the minute
mi 0 - 59 Minute of the hour
hr 0 - 23 Hour of the day
dd 1 - 31 or ? Day of the month – if dow is given, then dd must be specified as ?
mm 1 - 12 or JAN - DEC Month of the year (3-letter month abbreviations are not case sensitive)
Day of the week – if dd is given, then dow must be specified as ? (3-
dow 1 – 7 or SUN – SAT or ?
letter day of the week abbreviations are not case sensitive)
yyyy 1970 - 2099 Year – if omitted, then any year applies
There are a number of characters that have special meaning that can be utilized in all
fields unless noted.
Table 10-5 - Cron Expression Special Characters
Character Meaning Example
, Separates a list of values MON,WED,FRI – Every Monday, Wednesday, and Friday
Separates the low and high
- MON-FRI – Every Monday through Friday
end of a range of values
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 679
EDB Postgres Replication Server User’s Guide
Character Meaning Example
Allows all legal values for
* 0 10 14 * * ? – Every day of every month at 2:10 PM
the field
Specifies an increment, i, 0 0/10 * * * ? – Every 10 minutes starting on the hour
x/i
starting with x for every day of every month (e.g., 8:00:00, 8:10:00, 8:20:00)
When used in the day of the
L month (dd) field, means the 0 30 15 L 8 ? – Every August 31st at 3:30 PM
last day of the month
When used by itself in the
30 0 12 ? AUG L – The next Saturday in August at 30
L day of the week field (dow),
seconds past 12:00 noon
means Saturday
When used in the day of the
week field (dow) following
30 0 12 ? AUG 6L – The last Friday in August at 30
xxxL a day of the week, means
seconds past 12:00 noon
the last xxx day of the
month
Used in the day of the
1W – The weekday closest to the 1st of the month. If the 1st is a
month field (dd) following a
Wednesday, the result is Wednesday the 1st. If the 1st is a
day of the month, x, to
xW Sunday, the result is Monday the 2nd. If the 1st is a Saturday,
specify the weekday closest
the result is Monday the 3rd because the result does not go into
to x without going over into
the previous or following month.
the next or previous month.
Used in the day of the week
2#3 – The third Monday of the month (2 = Monday, 3 = third
xxx#n field (dow) to specify the
occurrence)
nth xxx day of the month
The following illustrates some examples of cron expressions.
Table 10-6 - Cron Expression Examples
Cron Expression Meaning
0 0 12 20 AUG ? 2009 12:00:00 noon on August 20, 2009
0 15 13 ? AUG WED 1:15:00 PM every Wednesday in August
8:30:30 AM every Monday, Wednesday, and Friday of every
30 30 8 ? * MON,WED,FRI
month
0 0 8 ? * 2-6 8:00:00 AM Monday thru Friday of every month
8:00:00 AM, 8:30:00 AM, 9:00:00 AM, 9:30:00 AM,
0 0/30 8,9,10 15,L * ? 10:00:00 AM, 10:30:00 AM on the 15th and the last day of the
month of every month
0 0 9 ? 9 L 9:00:00 AM each Saturday in September
0 0 1 ? * MonL 1:00:00 AM on the last Monday of the month of every month
0 30 16 15W sep ? 4:30:00 PM on the weekday of September closest to the 15th
0 30 16 ? * WED#2 4:30:00 PM on the second Wednesday of every month
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 680
EDB Postgres Replication Server User’s Guide
10.4.4 Disabling Foreign Key Constraints for Snapshot
Replications
In a snapshot replication, the publication server calls EnterpriseDB’s Migration Toolkit,
which disables foreign key constraints on tables so it can truncate the target tables before
loading rows. In Postgres, foreign key constraints are implemented using triggers, so in
actuality, the Migration Toolkit disables triggers on the target tables by setting column
relhastriggers of pg_catalog.pg_class to false for each target table.
No user (not even a superuser) is allowed to directly modify the data in a Postgres system
catalog table unless the following conditions are satisfied:
 The database user attempting to modify the rows of a system catalog table is a
superuser.
 In the Postgres system catalog table pg_catalog.pg_authid, the column
rolcatupdate is set to true for the row identifying the superuser attempting to
update a system catalog table. This requirement applies only to Postgres version
9.4 or earlier. The column rolcatupdate no longer exists in Postgres 9.5 or
later.
To verify that a user has the privilege to update the system catalog tables, select the user
name under the Login Roles node in pgAdmin (Postgres Enterprise Manager Client in
Advanced Server). The Update Catalogs property should be set to Yes.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 681
EDB Postgres Replication Server User’s Guide
Figure 10-6 - User with privilege to update system catalogs
If the Update Catalogs property is set to No, click the secondary mouse button on the user
name in the Object Browser and choose Properties from the menu. Select the Role
Privileges tab, check the Can Modify Catalog Directly box, and click the OK button.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 682
EDB Postgres Replication Server User’s Guide
Figure 10-7 - Granting system catalog update privilege
10.4.5 Quoted Identifiers and Default Case Translation
A quoted identifier is an identifier created with its name enclosed within double quote
characters ("). The text enclosed within double quotes is stored as the object identifier
name exactly as given with no default case translation of alphabetic characters. Quoted
identifiers occur in both Oracle and Postgres.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 683
EDB Postgres Replication Server User’s Guide
For example, CREATE TABLE "MyTable" … produces a table name that is stored in the
database system’s data dictionary as MyTable. References to this table must be made
using an uppercase M, an uppercase T, and lowercase letters for the rest of the name.
If a database object is created without the double quotes surrounding its identifier name,
default case translation of alphabetic characters occurs.
In Oracle, the default case translation is to uppercase. For example, CREATE TABLE
MyTable … would result in an object identifier name of MYTABLE.
In Postgres, the default case translation is to lowercase. For example, CREATE TABLE
MyTable … would result in an object identifier name of mytable.
10.4.6 Replicating the SQL Server SQL_VARIANT Data Type
This section discusses how to replicate a table containing the SQL Server SQL_VARIANT
data type.
The SQL_VARIANT data type defines a column so that the individual values in that
column may be of different data types. For example, the same SQL_VARIANT column can
store values that have been explicitly cast as character, integer, numeric, and date/time.
However, if a table containing a SQL_VARIANT column is to be replicated to a Postgres
database, the usage of the column in Postgres is restricted to a single data type to which
all the values in the SQL_VARIANT column are implicitly convertible (that is, without the
use of explicit casting). For example, an integer value is implicitly convertible to a
FLOAT data type, but a floating point value is not implicitly convertible to an INTEGER
data type.
The following restrictions apply in order to use replication on tables with the
SQL_VARIANT data type:
 The values stored within the SQL_VARIANT columns of the table to be replicated
must be implicitly convertible to the same data type in Postgres.
 If there is more than one table with SQL_VARIANT columns to be replicated to the
same Postgres database, then all such SQL_VARIANT columns must contain
values that are implicitly convertible to the same data type in Postgres.
In the Postgres subscription database, you define a domain named sql_variant that
maps to an underlying data type to which all values in the SQL_VARIANT columns are
implicitly convertible.
The following example shows how to set up replication for a table containing a
SQL_VARIANT data type used to store numeric values, but of different data types.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 684
EDB Postgres Replication Server User’s Guide
The SQL Server table definition is the following:
CREATE TABLE variant_tbl (
f1 INTEGER PRIMARY KEY,
f2 SQL_VARIANT
);
INSERT INTO variant_tbl VALUES (1, CAST(1423.23 AS NUMERIC(6,2)));
INSERT INTO variant_tbl VALUES (2, CAST(8001 AS INTEGER));
INSERT INTO variant_tbl VALUES (3, CAST('4321' AS CHAR(4)));
GO
The following query uses a function named SQL_VARIANT_PROPERTY to show the
values stored in column f2 and their data types.
1> SELECT *,
2> SQL_VARIANT_PROPERTY(f2,'BaseType') AS basetype,
3> SQL_VARIANT_PROPERTY(f2,'Precision') AS precision,
4> SQL_VARIANT_PROPERTY(f2,'Scale') AS scale
5> FROM variant_tbl;
6> GO
f1 f2 basetype precision scale
----------- ---------- ---------- ---------- ----------
1 1423.23 numeric 6 2
2 8001 int 10 0
3 4321 char 0 0
(3 rows affected)
In the Postgres subscription database, create a domain named sql_variant with an
underlying data type that is compatible with the values that are stored in the SQL Server
SQL_VARIANT column:
CREATE DOMAIN sql_variant AS NUMERIC(6, 2);
After replication occurs, the subscription table is created using the sql_variant
domain in place of the SQL_VARIANT data type of the publication table.
At the bottom of the following Object Browser window, note the presence of the
sql_variant domain under the Domains node of the public schema.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 685
EDB Postgres Replication Server User’s Guide
Figure 10-8 - Subscription table with sql_variant column
10.5 Service Pack Maintenance
Maintenance items (bug fixes and enhancements) that have been added to this version of
xDB Replication Server are listed below.
1. Registering your xDB Replication Server product with an EnterpriseDB product
license key is no longer required. Thus, all components related to registering the
product have been removed. The following are the removed components: 1) the
Product Registration dialog box accessed from the xDB Replication Console Help
menu, 2) the license_key parameter located in the xDB Replication Configuration
file, and 3) the xDB Replication Server CLI registerkey command. (43230)
2. Partitioned tables created using the declarative partitioning feature of PostgreSQL
and Advanced Server version 10 can now be replicated in a log-based single-
master or multi-master replication system. (43134)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 686
EDB Postgres Replication Server User’s Guide
3. In an SMR system, removal of a table from a publication that has one or more
existing subscriptions is now permitted. Previously, no tables from a publication
in an SMR system could be removed if there are existing subscriptions. (43110)
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 687