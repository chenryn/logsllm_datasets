### 2.3.22 CREATE MATERIALIZED VIEW

#### Build Clause
The `build_clause` specifies when the materialized view should be populated. You can choose between `BUILD IMMEDIATE` and `BUILD DEFERRED`:

- **BUILD IMMEDIATE**: Instructs the server to populate the view immediately. This is the default behavior.
- **BUILD DEFERRED**: Instructs the server to populate the view at a later time, typically during a `REFRESH` operation.

#### Create MV Refresh Clause
The `create_mv_refresh` clause specifies when the contents of a materialized view should be updated. The clause includes the `REFRESH` keyword followed by `COMPLETE` and/or `ON DEMAND`:

- **COMPLETE**: Instructs the server to discard the current content and reload the materialized view by executing the view's defining query when the materialized view is refreshed.
- **ON DEMAND**: Instructs the server to refresh the materialized view on demand by calling the `DBMS_MVIEW` package or by using the `REFRESH MATERIALIZED VIEW` statement in PostgreSQL. This is the default behavior.

#### Notes
- Materialized views are read-only; the server will not allow `INSERT`, `UPDATE`, or `DELETE` operations on them.
- Access to tables referenced in the materialized view is determined by the permissions of the view owner. The user must have the necessary permissions to call all functions used by the view.
- For more information about the `REFRESH MATERIALIZED VIEW` command in PostgreSQL, refer to the [PostgreSQL Core Documentation](https://www.postgresql.org/docs/11/static/sql-refreshmaterializedview.html).

#### Example
The following statement creates a materialized view named `dept_30`:
```sql
CREATE MATERIALIZED VIEW dept_30 BUILD IMMEDIATE AS 
SELECT * FROM emp WHERE deptno = 30;
```
This view contains information retrieved from the `emp` table about any employee that works in department 30.

---

### 2.3.23 CREATE PACKAGE

#### Name
**CREATE PACKAGE** - Define a new package specification.

#### Synopsis
```sql
CREATE [ OR REPLACE ] PACKAGE name
[ AUTHID { DEFINER | CURRENT_USER } ]
{ IS | AS }
[ declaration; ] [, ...]
[ { PROCEDURE proc_name
[ (argname [ IN | IN OUT | OUT ] argtype [ DEFAULT value ] [, ...]) ];
[ PRAGMA RESTRICT_REFERENCES(name,
{ RNDS | RNPS | TRUST | WNDS | WNPS } [, ... ] ); ]
|
FUNCTION func_name
[ (argname [ IN | IN OUT | OUT ] argtype [ DEFAULT value ] [, ...]) ]
RETURN rettype [ DETERMINISTIC ];
[ PRAGMA RESTRICT_REFERENCES(name,
{ RNDS | RNPS | TRUST | WNDS | WNPS } [, ... ] ); ]
}
] [, ...]
END [ name ]
```

#### Description
The `CREATE PACKAGE` statement defines a new package specification. The `CREATE OR REPLACE PACKAGE` statement either creates a new package specification or replaces an existing one.

- If a schema name is included, the package is created in the specified schema. Otherwise, it is created in the current schema.
- The name of the new package must not match any existing package in the same schema unless the intent is to update the definition of an existing package.
- The user who creates the package becomes the owner of the package.

#### Parameters
- **name**: The name (optionally schema-qualified) of the package to create.
- **DEFINER | CURRENT_USER**: Specifies whether the privileges of the package owner (DEFINER) or the privileges of the current user executing a program in the package (CURRENT_USER) are to be used to determine access to database objects. `DEFINER` is the default.
- **declaration**: A public variable, type, cursor, or REF CURSOR declaration.
- **proc_name**: The name of a public procedure.
- **argname**: The name of an argument.
- **IN | IN OUT | OUT**: The argument mode.
- **argtype**: The data type(s) of the program's arguments.
- **DEFAULT value**: Default value of an input argument.
- **func_name**: The name of a public function.
- **rettype**: The return data type.
- **DETERMINISTIC**: A synonym for `IMMUTABLE`. A `DETERMINISTIC` procedure cannot modify the database and always returns the same result when given the same argument values.
- **RNDS | RNPS | TRUST | WNDS | WNPS**: These keywords are accepted for compatibility but are ignored.

#### Example
The package specification `empinfo` contains three public components: a public variable, a public procedure, and a public function.
```sql
CREATE OR REPLACE PACKAGE empinfo
IS
    emp_name VARCHAR2(10);
    PROCEDURE get_name (
        p_empno NUMBER
    );
    FUNCTION display_counter
    RETURN INTEGER;
END;
```

#### See Also
- **DROP PACKAGE**

---

### 2.3.24 CREATE PACKAGE BODY

#### Name
**CREATE PACKAGE BODY** - Define a new package body.

#### Synopsis
```sql
CREATE [ OR REPLACE ] PACKAGE BODY name
{ IS | AS }
[ declaration; ] [, ...]
[ { PROCEDURE proc_name
[ (argname [ IN | IN OUT | OUT ] argtype [ DEFAULT value ] [, ...]) ]
[ STRICT ]
[ LEAKPROOF ]
[ PARALLEL { UNSAFE | RESTRICTED | SAFE } ]
[ COST execution_cost ]
[ ROWS result_rows ]
[ SET config_param { TO value | = value | FROM CURRENT } ]
{ IS | AS }
program_body
END [ proc_name ];
|
FUNCTION func_name
[ (argname [ IN | IN OUT | OUT ] argtype [ DEFAULT value ] [, ...]) ]
RETURN rettype [ DETERMINISTIC ]
[ STRICT ]
[ LEAKPROOF ]
[ PARALLEL { UNSAFE | RESTRICTED | SAFE } ]
[ COST execution_cost ]
[ ROWS result_rows ]
[ SET config_param { TO value | = value | FROM CURRENT } ]
{ IS | AS }
program_body
END [ func_name ];
}
] [, ...]
[ BEGIN
statement; [, ...] ]
END [ name ]
```

#### Description
The `CREATE PACKAGE BODY` statement defines a new package body. The `CREATE OR REPLACE PACKAGE BODY` statement either creates a new package body or replaces an existing one.

- If a schema name is included, the package body is created in the specified schema. Otherwise, it is created in the current schema.
- The name of the new package body must match an existing package specification in the same schema.
- The new package body name must not match any existing package body in the same schema unless the intent is to update the definition of an existing package body.

#### Parameters
- **name**: The name (optionally schema-qualified) of the package body to create.
- **declaration**: A private variable, type, cursor, or REF CURSOR declaration.
- **proc_name**: The name of a public or private procedure. If `proc_name` exists in the package specification with an identical signature, it is public; otherwise, it is private.
- **argname**: The name of an argument.
- **IN | IN OUT | OUT**: The argument mode.
- **argtype**: The data type(s) of the program's arguments.
- **DEFAULT value**: Default value of an input argument.
- **STRICT**: The `STRICT` keyword specifies that the function will not be executed if called with a `NULL` argument; instead, it will return `NULL`.
- **LEAKPROOF**: The `LEAKPROOF` keyword specifies that the function will not reveal any information about arguments, other than through a return value.
- **PARALLEL { UNSAFE | RESTRICTED | SAFE }**: The `PARALLEL` clause enables the use of parallel sequential scans. `UNSAFE` (default) means the function cannot be executed in parallel mode. `RESTRICTED` means the function can be executed in parallel mode but is restricted to the parallel group leader. `SAFE` means the function can be executed in parallel mode with no restrictions.
- **execution_cost**: Specifies a positive number giving the estimated execution cost for the function.
- **result_rows**: The estimated number of rows that the query planner should expect the function to return.
- **SET**: Use the `SET` clause to specify a parameter value for the duration of the function.
- **program_body**: The pragma, declarations, and SPL statements that comprise the body of the function or procedure.
- **func_name**: The name of a public or private function. If `func_name` exists in the package specification with an identical signature, it is public; otherwise, it is private.
- **rettype**: The return data type.
- **DETERMINISTIC**: Specifies that the function will always return the same result when given the same argument values. A `DETERMINISTIC` function must not modify the database.
- **statement**: An SPL program statement. Statements in the package initialization section are executed once per session the first time the package is referenced.

#### Example
The following is the package body for the `empinfo` package.
```sql
CREATE OR REPLACE PACKAGE BODY empinfo
IS
    v_counter INTEGER;

    PROCEDURE get_name (
        p_empno NUMBER
    )
    IS
    BEGIN
        SELECT ename INTO emp_name FROM emp WHERE empno = p_empno;
        v_counter := v_counter + 1;
    END;

    FUNCTION display_counter
    RETURN INTEGER
    IS
    BEGIN
        RETURN v_counter;
    END;

BEGIN
    v_counter := 0;
    DBMS_OUTPUT.PUT_LINE('Initialized counter');
END;
```

The following two anonymous blocks execute the procedure and function in the `empinfo` package and display the public variable.
```sql
BEGIN
    empinfo.get_name(7369);
    DBMS_OUTPUT.PUT_LINE('Employee Name : ' || empinfo.emp_name);
    DBMS_OUTPUT.PUT_LINE('Number of queries: ' || empinfo.display_counter);
END;

-- Output:
-- Initialized counter
-- Employee Name : SMITH
-- Number of queries: 1

BEGIN
    empinfo.get_name(7900);
    DBMS_OUTPUT.PUT_LINE('Employee Name : ' || empinfo.emp_name);
    DBMS_OUTPUT.PUT_LINE('Number of queries: ' || empinfo.display_counter);
END;

-- Output:
-- Employee Name : JAMES
-- Number of queries: 2
```

#### See Also
- **CREATE PACKAGE**
- **DROP PACKAGE**

---

### 2.3.25 CREATE PROCEDURE

#### Name
**CREATE PROCEDURE** - Define a new stored procedure.

#### Synopsis
```sql
CREATE [OR REPLACE] PROCEDURE name [ (parameters) ]
[
IMMUTABLE
| STABLE
| VOLATILE
| DETERMINISTIC
| [ NOT ] LEAKPROOF
| CALLED ON NULL INPUT
| RETURNS NULL ON NULL INPUT
| STRICT
| [ EXTERNAL ] SECURITY INVOKER
| [ EXTERNAL ] SECURITY DEFINER
| AUTHID DEFINER
| AUTHID CURRENT_USER
| PARALLEL { UNSAFE | RESTRICTED | SAFE }
| COST execution_cost
| ROWS result_rows
| SET configuration_parameter
{ TO value | = value | FROM CURRENT }
...]
{ IS | AS }
[ PRAGMA AUTONOMOUS_TRANSACTION; ]
[ declarations ]
BEGIN
statements
END [ name ];
```

#### Description
The `CREATE PROCEDURE` statement defines a new stored procedure. The `CREATE OR REPLACE PROCEDURE` statement either creates a new procedure or replaces an existing definition.

- If a schema name is included, the procedure is created in the specified schema. Otherwise, it is created in the current schema.
- The name of the new procedure must not match any existing procedure with the same input argument types in the same schema. However, procedures with different input argument types may share a name (overloading). Overloading of procedures is an Advanced Server feature and is not compatible with Oracle databases.
- To update the definition of an existing procedure, use `CREATE OR REPLACE PROCEDURE`. It is not possible to change the name or argument types of a procedure this way. When using `OUT` parameters, you cannot change the types of any `OUT` parameters except by dropping the procedure.

#### Parameters
- **name**: The identifier of the procedure.
- **parameters**: A list of formal parameters.
- **declarations**: Variable, cursor, type, or subprogram declarations. If subprogram declarations are included, they must be declared after all other variable, cursor, and type declarations.
- **statements**: SPL program statements (the `BEGIN - END` block may contain an `EXCEPTION` section).
- **IMMUTABLE**, **STABLE**, **VOLATILE**: These attributes inform the query optimizer about the behavior of the procedure. You can specify only one choice. `VOLATILE` is the default behavior.
  - **IMMUTABLE**: Indicates that the procedure cannot modify the database and always reaches the same result when given the same argument values.
  - **STABLE**: Indicates that the procedure cannot modify the database and will consistently return the same result for the same argument values within a single table scan.
  - **VOLATILE**: Indicates that the procedure value can change even within a single table scan, so no optimizations can be made.
- **DETERMINISTIC**: A synonym for `IMMUTABLE`. A `DETERMINISTIC` procedure cannot modify the database and always reaches the same result when given the same argument values.
- **LEAKPROOF**: The `LEAKPROOF` keyword specifies that the function will not reveal any information about arguments, other than through a return value.
- **CALLED ON NULL INPUT**: The function is called normally when some of its arguments are null.
- **RETURNS NULL ON NULL INPUT**: The function is not called when some of its arguments are null; instead, it returns a null value automatically.
- **STRICT**: The `STRICT` keyword specifies that the function will not be executed if called with a `NULL` argument; instead, it will return `NULL`.
- **SECURITY INVOKER**: The function executes with the privileges of the user who calls it.
- **SECURITY DEFINER**: The function executes with the privileges of the user who defined it.
- **AUTHID DEFINER**: The function executes with the privileges of the user who defined it.
- **AUTHID CURRENT_USER**: The function executes with the privileges of the current user.
- **PARALLEL { UNSAFE | RESTRICTED | SAFE }**: The `PARALLEL` clause enables the use of parallel sequential scans. `UNSAFE` (default) means the function cannot be executed in parallel mode. `RESTRICTED` means the function can be executed in parallel mode but is restricted to the parallel group leader. `SAFE` means the function can be executed in parallel mode with no restrictions.
- **COST execution_cost**: Specifies a positive number giving the estimated execution cost for the function.
- **ROWS result_rows**: The estimated number of rows that the query planner should expect the function to return.
- **SET configuration_parameter**: Use the `SET` clause to specify a parameter value for the duration of the function.

#### Example
An example of a simple stored procedure:
```sql
CREATE OR REPLACE PROCEDURE my_procedure (p_input IN NUMBER)
IS
    v_result NUMBER;
BEGIN
    v_result := p_input * 2;
    DBMS_OUTPUT.PUT_LINE('Result: ' || v_result);
END;
```

#### See Also
- **CREATE PACKAGE**
- **DROP PACKAGE**