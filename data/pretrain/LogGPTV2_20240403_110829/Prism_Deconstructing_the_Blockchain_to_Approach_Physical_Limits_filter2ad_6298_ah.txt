for prpBk in propBlocks do
// Depth is #of children bks of voter bk on main chain
return (prpBk, voter Bk.depth)
r ef PrpBks ← prpBk .getReferredPrpBks()
// Get all directly and indirectly referred transaction blocks.
tx Bks ← GetOrderedTxBks(prpBk, r ef PrpBks)
for tx Bk in tx Bks do
15: // Return the vote of voter blocktree i at level ℓ and depth of the vote
16: procedure GetVoteNDepth(i, ℓ)
voter MC ← vtT r ee[i].LonдestChain()
17:
for voter Bk in voter MC do
18:
19:
if prpBk.level = ℓ then
20:
21:
22:
23: procedure BuildLedger(propBlocks)
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35: // Return ordered list of confirmed transactions
36: procedure GetOrderedConfirmedTxs()
L ← ϕ
37:
for ℓ ← 1 to prpT r ee .maxLevel do
38:
39:
40:
41:
42:
43:
44:
45:
votes ← ϕ
for i in ← 1 to m do
if IsLeaderConfirmed(votes N Depth) then
votes N Depth[i] ← GetVotes(i, ℓ)
// Proposer block with maximum votes on level ℓ
L[ℓ] ← GetLeader(votes N Depth)
// Check for double spends and duplicate txs
if tx is valid w.r.t to ledдer then ledдer.append(tx)
txs ← tx Bk.getTxs()
for tx in txs do
return ledдer
else break
return BuildLedger(L)
▷ Array of set of proposer blocks
▷ Refer Def. 4.5
▷ Refer Eq. 15
▷ outer product
▷ Return true if tx is confirmed in all ledgers
▷ Input: list of prop blocks
▷ List of valid transactions
▷ Txs are ordered in tx Bk
▷ Ordered list of leader blocks
▷ Stores votes from all m voter trees on level ℓ
▷ Refer 4.1
B NOTATION
Let Hi[r] and Zi[r] be the number of voter blocks mined by the honest nodes and by the adversarial node in
round r on the i-th voting tree respectively, where i = 1, 2, .., m. Hi[r], Zi[r] are Poisson random variables with
means (1 − β)fv ∆ and β fv ∆ respectively. Similarly, Hp[r], Zp[r] are the numbers of proposer blocks mined
by the honest nodes and by the adversarial node in round r respectively; they are also Poisson, with means
(1 − β)fp ∆ and β fp ∆ respectively. Finally, H t[r], Z t[r] are the numbers of transaction blocks mined by the
honest nodes and by the adversarial node in round r respectively; they are also Poisson, with means (1− β)ft ∆
and β ft ∆ respectively. All the random variables are independent of each other.
17
C BITCOIN BACKBONE PROPERTIES REVISITED
[9] defines three important properties of the Bitcoin backbone: common-prefix, chain-quality and chain-growth.
It was shown that, under a certain typical execution of the mining process, these properties hold, and the
properties are then used to prove the persistence and liveness of the Bitcoin transaction ledger. These three
properties, as well as the notion of a typical execution, were global, and defined over the entire time horizon.
While this is appropriate when averaging over time to achieve reliable confirmation, as for Bitcoin, it turns out
that for the analysis of fast latency of Prism, where the averaging is over voter chains, we need to formulate
finer-grained, local versions of these properties, localized at a particular round. Correspondingly, the event
under which these local backbone properties are proved is also local, in contrast to the event of typical
execution.
In this section, we will focus on a single Bitcoin blocktree, with a mining rate of ¯f per round, and we will
use the model and notations introduced in Section 2. In addition, we will use the following notation from [9]:
if C is a chain of blocks, then C ⌈k is the k-deep prefix of C, i.e. the chain of blocks of C with the last k blocks
removed. Additionally, given two chains C and C′, we say that C ⪯ C′ if C is a prefix of chain C′.
Definition C.1 (Common-prefix property). The k-deep common-prefix property holds at round r if the k-deep
prefix of the longest chain at round r remains a prefix of any longest chain in any future round.
Note that while the common-prefix property in [9] is parameterized by a single parameter k, the property
defined here is parameterized by two parameters k and r. It is a property that the prefix of the main chain at
round r remains permanently in the main chain in the future.
Definition C.2 (Chain-quality property). The (µ, k)-chain-quality property holds at round r if at most µ
fraction of the last k consecutive blocks on the longest chain C at round r are mined by the adversary.
The chain-quality property in [9] is parameterized by two parameters µ and k, however, the property defined
here is parameterized by three parameters µ, k and r.
Definition C.3 (Chain-growth property). The chain-growth property with parameters ϕ and s states that for
any s rounds there are at least ϕs blocks added to the main chain during this time interval.
We will now show that these three properties hold regardless of adversarial action, provided that certain
events on the honest and adversarial mining processes hold.
C.1 Modelling PoW block generation
In section 2, the hash computation of the users are modelled as a random oracle. We now further model the
PoW generation as follows: Let H[r] and Z[r] be the number of blocks mined by the honest nodes and by
the adversarial node in round r. From section 2, we know that H[r], Z[r] are Poisson random variables with
means (1 − β)fv ∆ and β fv ∆ respectively. Note that random variables {H[r]}r ∈{0,rmax }, {Z[r]}r ∈{0,rmax } are
independent of each other. We now define auxiliary random variables X[r] and Y[r] as follows: If at round r
an honest party mines at least one block, then X[r] = 1 , otherwise X[r] = 0. If at round r an honest party
mines exactly one block, then Y[r] = 1, otherwise Y[r] = 0. Let r′ = k
2 ¯f
′ − a, r + b] >
′ − a, r + b] − Z[r − r
. Define the following events:
(1 − 2β)k
Y[r − r
(cid:27)
′
8
E1(cid:2)r − r
E2(cid:2)r − r
E3(cid:2)r − r
(cid:26)
, r(cid:3) := 
, r(cid:3) :=(cid:8)H(cid:2)r − r
(cid:26)
, r(cid:3) :=
X(cid:2)r − r
a,b≥0
′
′
′
, r(cid:3) 
′
, r] ∩ E2[r − r
k
6
′
′
E [r − r
(18)
As defined in Section 2, X [r − r′, r] and Y [r − r′, r] are the number of successful and uniquely successful
rounds respectively in the interval [r − r′, r], and Z [r − r′, r] is the number of blocks mined by adversary
, r] := E1[r − r
, r] ∩ E3[r − r
, r].
′
18
Figure 12: Round r is the first round that the k-deep prefix of the longest chain is changed. (This is
a slight modification of Figure 3 from [9].)
in the interval [r − r′, r]. Note that the honest users mine at least one block in a successful round and mine
exactly one block in a uniquely successful round. Therefore, the event E1 [r − r′, r] implies that the number
of uniquely successful rounds exceed the total blocks mined by the adversary by (1−2β)k
blocks for all the
intervals containing the interval [r − r′, r]. Event E2 [r − r′, r] implies that the number successful rounds plus
the total number of blocks mined by the adversary in the interval [r − r′, r] is less than k. Event E3 [r − r′, r]
implies that the number of successful rounds in the interval [r − r′, r] at least k6 .
To prove the common-prefix, chain-quality and chain-growth properties, we need the following two lemmas
from [9]:
8
Lemma C.4 (Lemma 6 [9]). Suppose the k-th block, b, of a longest chain C was mined by a honest node in a
uniquely successful round. Then the k-th block of a longest chain C′, at possibly a different round, is either b or
has been mined by the adversary.
Lemma C.5 (Lemma 7 [9]). Suppose that at round r1 the longest chain is of length n. Then by round r2 ≥ r1,
the longest chain is of length of least n + X[r1, r2].
Lemma C.6. Under the event E[r − r′, r], the last k consecutive blocks of the longest chain C at round r are
mined in at least r′ consecutive rounds.
Proof. By definition we know that E2[r − r′, r] ⊇ E[r − r′, r]. Event E2[r − r′, r] implies that the total
number of blocks mined in interval [r − r′, r] is less than k. Therefore, the k-th deep block of chain C was
mined on or before round r − r′.
□
The chain-growth lemma stated below is the localized version of Theorem 13 from [9] and the proof is similar.
2 ¯f , the longest chain grows by at least k6
Lemma C.7 (Chain-growth). Under event E[r − r′, r], where r′ = k
blocks in the interval [r − r′, r].
Proof. From Lemma C.5, we know that the main chain grows by at least X[r −r′, r] in the interval [r −r′, r].
□
Since E3[r − r′, r] ⊇ E[r − r′, r] implies X[r − r′, r] > k6 and this completes the proof.
19
We modify the proofs of Lemma 14 and Theorem 15 of [9] by localizing it to a particular round in order to
prove our common-prefix property.
Lemma C.8 (Common-prefix). Under the event E[r1 − r′, r1], where r′ = k
2 ¯f , the k-deep common-prefix
property holds at round r1.
2. If r = r1, define C′
Proof. Consider a longest chain C1 in the current round r1 and a longest chain C2 in a future round r2,
which violates the common-prefix property, i.e., C ⌈k
1 ⪯̸ C2. Let r be the smallest round r1 ≤ r ≤ r2 such that
2 such that C ⌈k
1 ⪯̸ C′
there is a longest chain C′
1 to be a longest
chain at round r − 1. Note that C ⌈k
1 ⪯ C′
1. Observe that by our assumptions such an r is well-defined (since e.g.,
r2 is such a round, albeit not necessarily the smallest one); refer to Figure 12 for an illustration. Consider the
last block b∗ on the common prefix of C′
1 and C′
2 that was mined by an honest node and let r∗ be the round in
which it was mined (if no such block exists let r∗ = 0). Define the set of rounds S = {i : r∗  Z[r1 − r′ − a, r1 + b] for all a, b ≥ 0. Since r∗  Z[r∗, r], which contradicts Equation (19).
□
We again modify the proof of Theorem 16 of [9] by localizing it to a particular round in order to prove our
chain-quality property.
2) ≥ len(C′
1 and C′
1 or in C′
1 and C′
Lemma C.9 (Chain-qality). Under the event E[r − r′, r], where r′ = k
2 ¯f , the (µ, k)-chain quality property
holds at round r for µ =