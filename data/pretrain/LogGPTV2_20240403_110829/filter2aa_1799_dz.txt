Check
sum
i
c
k
b
0x0000
o
r
T
H
E
Q
U
I
˜
1
F
O
X
0x20
NT
Create time
Create date
Last access
date
0x0000
Last modi-
fied time
Last modi-
fied date
First cluster
File size
FIGURE 11.16 FAT directory entry.
FAT32 uses 32-bit cluster identifiers but reserves the high 4 bits, so in effect it has 28-bit cluster 
identifiers. Because FAT32 cluster sizes can be as large as 64 KB, FAT32 has a theoretical ability to ad-
dress 16-terabyte (TB) volumes. Although Windows works with existing FAT32 volumes of larger sizes 
(created in other operating systems), it limits new FAT32 volumes to a maximum of 32 GB. FAT32’s 
higher potential cluster numbers let it manage disks more efficiently than FAT16; it can handle up to 
128-GB volumes with 512-byte clusters. Table 11-3 shows default cluster sizes for FAT32 volumes.
TABLE 11-3 Default cluster sizes for FAT32 volumes
Partition Size
Default Cluster Size
32 GB
Not supported
606
CHAPTER 11
Caching and file systems
Besides the higher limit on cluster numbers, other advantages FAT32 has over FAT12 and FAT16 
include the fact that the FAT32 root directory isn’t stored at a predefined location on the volume, the 
root directory doesn’t have an upper limit on its size, and FAT32 stores a second copy of the boot sector 
for reliability. A limitation FAT32 shares with FAT16 is that the maximum file size is 4 GB because direc-
tories store file sizes as 32-bit values.
exFAT
Designed by Microsoft, the Extended File Allocation Table file system (exFAT, also called FAT64) is an 
improvement over the traditional FAT file systems and is specifically designed for flash drives. The main 
goal of exFAT is to provide some of the advanced functionality offered by NTFS without the metadata 
structure overhead and metadata logging that create write patterns not suited for many flash media 
devices. Table 11-4 lists the default cluster sizes for exFAT.
As the FAT64 name implies, the file size limit is increased to 264, allowing files up to 16 exabytes. This 
change is also matched by an increase in the maximum cluster size, which is currently implemented as 32 
MB but can be as large as 2255 sectors. exFAT also adds a bitmap that tracks free clusters, which improves 
the performance of allocation and deletion operations. Finally, exFAT allows more than 1,000 files in a 
single directory. These characteristics result in increased scalability and support for large disk sizes.
TABLE 11-4 Default cluster sizes for exFAT volumes, 512-byte sector
Volume Size
Default Cluster Size
 64 TB 
32 MB
Additionally, exFAT implements certain features previously available only in NTFS, such as sup-
port for access control lists (ACLs) and transactions (called Transaction-Safe FAT, or TFAT). While 
the Windows Embedded CE implementation of exFAT includes these features, the version of exFAT 
in Windows does not.
Note ReadyBoost (described in Chapter 5 of Part 1, “Memory Management”) can work with 
exFAT-formatted flash drives to support cache files much larger than 4 GB.
CHAPTER 11
Caching and file systems
607
NTFS
As noted at the beginning of the chapter, the NTFS file system is one of the native file system formats 
of Windows. NTFS uses 64-bit cluster numbers. This capacity gives NTFS the ability to address volumes 
of up to 16 exaclusters; however, Windows limits the size of an NTFS volume to that addressable with 
32-bit clusters, which is slightly less than 8 petabytes (using 2 MB clusters). Table 11-5 shows the default
cluster sizes for NTFS volumes. (You can override the default when you format an NTFS volume.) NTFS
also supports 232–1 files per volume. The NTFS format allows for files that are 16 exabytes in size, but the
implementation limits the maximum file size to 16 TB.
TABLE 11-5 Default cluster sizes for NTFS volumes
Volume Size
Default Cluster Size
<7 MB
Not supported
7 MB–16 TB
4 KB
16 TB–32 TB
8 KB
32 TB–64 TB
16 KB
64 TB–128 TB
32 KB
128 TB–256 TB
64 KB
256 TB–512 TB
128 KB
512 TB–1024 TB
256 KB
1 PB–2 PB
512 KB
2 PB–4 PB
1 MB
4 PB–8 PB
2 MB
NTFS includes a number of advanced features, such as file and directory security, alternate data 
streams, disk quotas, sparse files, file compression, symbolic (soft) and hard links, support for transac-
tional semantics, junction points, and encryption. One of its most significant features is recoverability.
If a system is halted unexpectedly, the metadata of a FAT volume can be left in an inconsistent state, 
leading to the corruption of large amounts of file and directory data. NTFS logs changes to metadata 
in a transactional manner so that file system structures can be repaired to a consistent state with no 
loss of file or directory structure information. (File data can be lost unless the user is using TxF, which is 
covered later in this chapter.) Additionally, the NTFS driver in Windows also implements self-healing, a 
mechanism through which it makes most minor repairs to corruption of file system on-disk structures 
while Windows is running and without requiring a reboot.
Note At the time of this writing, the common physical sector size of disk devices is 4 KB. Even 
for these disk devices, for compatibility reasons, the storage stack exposes to file system driv-
ers a logical sector size of 512 bytes. The calculation performed by the NTFS driver to deter-
mine the correct size of the cluster uses logical sector sizes rather than the actual physical size.
608
CHAPTER 11
Caching and file systems
Starting with Windows 10, NTFS supports DAX volumes natively. (DAX volumes are discussed later 
in this chapter, in the “DAX volumes” section.) The NTFS file system driver also supports I/O to this kind 
of volume using large pages. Mapping a file that resides on a DAX volume using large pages is possible 
in two ways: NTFS can automatically align the file to a 2-MB cluster boundary, or the volume can be 
formatted using a 2-MB cluster size.
ReFS
The Resilient File System (ReFS) is another file system that Windows supports natively. It has been 
designed primarily for large storage servers with the goal to overcome some limitations of NTFS, like 
its lack of online self-healing or volume repair or the nonsupport for file snapshots. ReFS is a “write-
to-new” file system, which means that volume metadata is always updated by writing new data to 
the underlying medium and by marking the old metadata as deleted. The lower level of the ReFS file 
system (which understands the on-disk data structure) uses an object store library, called Minstore, 
that provides a key-value table interface to its callers. Minstore is similar to a modern database 
engine, is portable, and uses different data structures and algorithms compared to NTFS. (Minstore 
uses B+ trees.)
One of the important design goals of ReFS was to be able to support huge volumes (that could have 
been created by Storage Spaces). Like NTFS, ReFS uses 64-bit cluster numbers and can address volumes 
of up 16 exaclusters. ReFS has no limitation on the size of the addressable values, so, theoretically, ReFS 
is able to manage volumes of up to 1 yottabyte (using 64 KB cluster sizes).
Unlike NTFS, Minstore doesn’t need a central location to store its own metadata on the volume 
(although the object table could be considered somewhat centralized) and has no limitations on 
addressable values, so there is no need to support many different sized clusters. ReFS supports only 
4 KB and 64 KB cluster sizes. ReFS, at the time of this writing, does not support DAX volumes.
We describe NTFS and ReFS data structures and their advanced features in detail later in this chapter.
File system driver architecture
File system drivers (FSDs) manage file system formats. Although FSDs run in kernel mode, they differ 
in a number of ways from standard kernel-mode drivers. Perhaps most significant, they must register 
as an FSD with the I/O manager, and they interact more extensively with the memory manager. For 
enhanced performance, file system drivers also usually rely on the services of the cache manager. Thus, 
they use a superset of the exported Ntoskrnl.exe functions that standard drivers use. Just as for stan-
dard kernel-mode drivers, you must have the Windows Driver Kit (WDK) to build file system drivers. 
(See Chapter 1, “Concepts and Tools,” in Part 1 and http://www.microsoft.com/whdc/devtools/wdk for 
more information on the WDK.)
Windows has two different types of FSDs:
I 
Local FSDs manage volumes directly connected to the computer.
I 
Network FSDs allow users to access data volumes connected to remote computers.
CHAPTER 11
Caching and file systems
609
Local FSDs
Local FSDs include Ntfs.sys, Refs.sys, Refsv1.sys, Fastfat.sys, Exfat.sys, Udfs.sys, Cdfs.sys, and the RAW 
FSD (integrated in Ntoskrnl.exe). Figure 11-17 shows a simplified view of how local FSDs interact with the 
I/O manager and storage device drivers. A local FSD is responsible for registering with the I/O manager. 
Once the FSD is registered, the I/O manager can call on it to perform volume recognition when appli-
cations or the system initially access the volumes. Volume recognition involves an examination of a vol-
ume’s boot sector and often, as a consistency check, the file system metadata. If none of the registered 
file systems recognizes the volume, the system assigns the RAW file system driver to the volume and 
then displays a dialog box to the user asking if the volume should be formatted. If the user chooses not 
to format the volume, the RAW file system driver provides access to the volume, but only at the sector 
level—in other words, the user can only read or write complete sectors.
The goal of file system recognition is to allow the system to have an additional option for a valid 
but unrecognized file system other than RAW. To achieve this, the system defines a fixed data structure 
type (FILE_SYSTEM_RECOGNITION_STRUCTURE) that is written to the first sector on the volume. This 
data structure, if present, would be recognized by the operating system, which would then notify the 
user that the volume contains a valid but unrecognized file system. The system will still load the RAW 
file system on the volume, but it will not prompt the user to format the volume. A user application or 
kernel-mode driver might ask for a copy of the FILE_SYSTEM_RECOGNITION_STRUCTURE by using the 
new file system I/O control code FSCTL_QUERY_FILE_SYSTEM_RECOGNITION.
The first sector of every Windows-supported file system format is reserved as the volume’s boot 
sector. A boot sector contains enough information so that a local FSD can both identify the volume on 
which the sector resides as containing a format that the FSD manages and locate any other metadata 
necessary to identify where metadata is stored on the volume.
When a local FSD (shown in Figure 11-17) recognizes a volume, it creates a device object that rep-
resents the mounted file system format. The I/O manager makes a connection through the volume 
parameter block (VPB) between the volume’s device object (which is created by a storage device driver) 
and the device object that the FSD created. The VPB’s connection results in the I/O manager redirecting 
I/O requests targeted at the volume device object to the FSD device object.
Application
Application
Logical
volume
(partition)
User mode
Kernel mode
I/O manager
File system driver
Storage device drivers
FIGURE 11-17 Local FSD.
610
CHAPTER 11
Caching and file systems
To improve performance, local FSDs usually use the cache manager to cache file system data, in-
cluding metadata. FSDs also integrate with the memory manager so that mapped files are implement-
ed correctly. For example, FSDs must query the memory manager whenever an application attempts to 
truncate a file to verify that no processes have mapped the part of the file beyond the truncation point. 
(See Chapter 5 of Part 1 for more information on the memory manager.) Windows doesn’t permit file 
data that is mapped by an application to be deleted either through truncation or file deletion.
Local FSDs also support file system dismount operations, which permit the system to disconnect the 
FSD from the volume object. A dismount occurs whenever an application requires raw access to the 
on-disk contents of a volume or the media associated with a volume is changed. The first time an ap-
plication accesses the media after a dismount, the I/O manager reinitiates a volume mount operation 
for the media.
Remote FSDs
Each remote FSD consists of two components: a client and a server. A client-side remote FSD allows 
applications to access remote files and directories. The client FSD component accepts I/O requests 
from applications and translates them into network file system protocol commands (such as SMB) 
that the FSD sends across the network to a server-side component, which is a remote FSD. A server-
side FSD listens for commands coming from a network connection and fulfills them by issuing I/O 
requests to the local FSD that manages the volume on which the file or directory that the command 
is intended for resides.
Windows includes a client-side remote FSD named LANMan Redirector (usually referred to as 
just the redirector) and a server-side remote FSD named LANMan Server (%SystemRoot%\System32 
\Drivers\Srv2.sys). Figure 11-18 shows the relationship between a client accessing files remotely from a 
server through the redirector and server FSDs. 
Disk
Client
Server
User mode
Kernel mode
Protocol driver
(WSK transport)
Protocol driver
(WSK transport)
Local FSD
(NTFS, FAT)
File data
Network
Client
application
Kernel32.dll
Ntdll.dll
Cache
manager
Server
FSD
User mode
Kernel mode
Cache
manager
Redirector
FSD
FIGURE 11-18 Common Internet File System file sharing.
CHAPTER 11