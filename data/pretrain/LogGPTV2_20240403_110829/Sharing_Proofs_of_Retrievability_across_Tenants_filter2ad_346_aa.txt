title:Sharing Proofs of Retrievability across Tenants
author:Frederik Armknecht and
Jens-Matthias Bohli and
David Froelicher and
Ghassan Karame
SPORT: Sharing Proofs of Retrievability across Tenants
Frederik Armknecht
University of Mannheim, Germany
PI:EMAIL
David Froelicher
NEC Laboratories Europe, Germany
PI:EMAIL
Jens-Matthias Bohli
NEC Laboratories Europe, Germany
PI:EMAIL
Ghassan O. Karame
NEC Laboratories Europe, Germany
PI:EMAIL
Abstract—Proofs of Retrievability (POR) are cryptographic
proofs which provide assurance to a single tenant (who creates
tags using his secret material) that his ﬁles can be retrieved
in their entirety. However, POR schemes completely ignore
storage-efﬁciency concepts, such as multi-tenancy and data
deduplication, which are being widely utilized by existing cloud
storage providers. Namely, in deduplicated storage systems,
existing POR schemes would incur an additional overhead for
storing tenants’ tags which grows linearly with the number
of users deduplicating the same ﬁle. This overhead clearly re-
duces the (economic) incentives of cloud providers to integrate
existing POR/PDP solutions in their offerings.
In this paper, we propose a novel storage-efﬁcient POR,
dubbed SPORT, which transparently supports multi-tenancy
and data deduplication. More speciﬁcally, SPORT enables
tenants to securely share the same POR tags in order to
verify the integrity of their deduplicated ﬁles. By doing so,
SPORT considerably reduces the storage overhead borne by
cloud providers when storing the tags of different tenants dedu-
plicating the same content. We show that SPORT resists against
malicious tenants/cloud providers (and against collusion among
a subset of the tenants and the cloud). Finally, we implement
a prototype based on SPORT, and evaluate its performance
in a realistic cloud setting. Our evaluation results show that
our proposal incurs tolerable computational overhead on the
tenants and the cloud provider.
1. Introduction
The cloud is gaining several adopters among SMEs and
large businesses that are mainly interested in minimizing
the costs of both deployment and infrastructure management
and maintenance.
Cost effectiveness is realized in the cloud through the
integration of multi-tenancy and storage efﬁciency solu-
tions with tailored distributed algorithms that ensure un-
precedented levels of scalability and elasticity. The com-
bination of multi-tenancy solutions with storage efﬁciency
techniques (e.g., data deduplication) promises drastic cost
reductions. For instance, recent studies show that cross-
user data deduplication can save storage costs by more than
50% in standard ﬁle systems [27], [28], and by up to 90-
95% for back-up applications [27]. Moreover, nearly three
quarters of these savings could also be obtained by means
of straightforward whole-ﬁle deduplication [28].
The advent of cloud storage, however, introduces serious
concerns with respect to the conﬁdentiality, integrity, and
availability of the outsourced data [22]. For instance, Google
recently admitted permanent loss of customers’ data in their
storage systems due to a malfunction of local utility grid
located near one of Google’s data centers [4]. The literature
features a number of solutions that enable users to verify
the integrity and availability of their outsourced data [14],
[16], [26], [32]. Solutions include Proofs of Retrievability
(POR) [26], [32] which provide end-clients with the as-
surance that their data is retrievable, and Proofs of Data
Possession (PDP) [8] which enable a client to verify that its
stored data has not undergone any modiﬁcations. Although
these solutions can be indeed effective in detecting data loss,
they completely ignore storage-efﬁciency requirements, such
as multi-tenancy and data deduplication, which are being
widely utilized by existing cloud storage providers.
Namely, existing POR/PDP solutions assume a single
trusted tenant (i.e., honest veriﬁer) who pre-processes the
ﬁles to create tags using secret material before outsourcing
them to the cloud, and later regularly performs veriﬁcations
on the pre-processed ﬁles and tags in order to react as early
as possible in case of data loss.
A straightforward adaptation for the multi-tenant case
would be that each tenant constructs and stores his own tags
in the cloud. However, this approach threatens to cancel out
the beneﬁts of data deduplication over popular objects—
which might reduce the (economic) incentives of cloud
providers to integrate existing POR/PDP solutions in their
offerings.
In Figure 1, we estimate the additional storage overhead
incurred by such an instantiation using the existing privately-
veriﬁable POR scheme of [32], the publicly-veriﬁable RSA-
based POR/PDP schemes of [8], [32], and ﬁnally the
publicly-veriﬁable BLS-based POR scheme of [32]. Here,
we assume a block size of 8 KB. Notice that the smaller
for their users accounting for data loss, in exchange, e.g.,
for additional service fees. While the main barriers of wider
adoption of POR lie in the lack of compliance with func-
tional requirements in the cloud, SPORT bridges these gaps
and enables cloud providers to offer their customer extended
POR services, without incurring additional bandwidth and
storage overhead.
Our contributions can be summarized as follows:
Formal Framework. We propose the ﬁrst formal frame-
work and a security model for multi-tenant POR,
dubbed MTPOR. Our framework extends the POR
model outlined in [32] and addresses security risks that
have not been covered so far in existing models.
Concrete Instantiation. We describe a concrete MTPOR
scheme, dubbed SPORT, which builds upon publicly
veriﬁable BLS POR scheme [32] and that is secure in
the MTPOR model. SPORT deploys a novel mech-
anism which enables different
tenants to (in-place)
update the POR tags created by others corresponding
to the same deduplicated ﬁle—thus saving considerable
storage. We show that this process resists against a ma-
licious cloud provider, and malicious tenants (as well
as against any collusion between tenants/providers).
Prototype Implementation. We implement and evaluate a
prototype based on SPORT, and we show that our
proposal incurs comparable overhead on the users and
cloud providers, when compared to existing publicly-
veriﬁable POR/PDP schemes.
The remainder of this paper is organized as follows. In
Section 2, we introduce a novel framework for secure multi-
tenant POR, MTPOR. In Section 3, we propose SPORT, an
efﬁcient instantiation of MTPOR, and analyze its security.
In Section 4, we describe a prototype implementation and
evaluation of SPORT and compare its performance to ex-
isting publicly-veriﬁable POR/PDP schemes. In Section 5,
we overview related work in the area and we conclude the
paper in Section 6.
2. Multi-Tenant Proofs of
Retrievability
In this section, we introduce a formal model for multi-
tenant POR (MTPOR). Since MTPOR extends POR, we
ﬁrst quickly recall the POR model from [32].
2.1. Single-Tenant Proofs of Retrievability
Proofs of Retrievability (POR) are interactive protocols
that cryptographically prove the retrievability of outsourced
data. More precisely, POR consider a model comprising of
a single user (or tenant), and a service provider that stores
a ﬁle pertaining to the user. POR basically consist of a
challenge-response protocol in which the service provider
proves to the tenant that its ﬁle is still intact and retrievable.
Note that POR only provide a guarantee that a fraction p of
Figure 1. Storage overhead due to the storage of individual tenant tags
in (private and public) POR schemes of [32] and the public PDP scheme
of [8]. Here, we assume 8 KB block sizes.
the block size is, the larger is the storage overhead due
to the storage of the tenant tags (since the tags’ sizes are
ﬁxed per block and are independent of the block size). Our
results show that, even with block sizes as large as 8 KB, the
metadata storage per tenant incurred by existing POR/PDP
schemes are considerable. Clearly, such storage overhead
reduces the proﬁtability of existing storage-efﬁciency solu-
tions and, in turn, reduces the incentives of providers to inte-
grate POR/PDP schemes in their offerings. For example, in
the 2048-bit RSA-based schemes of [8], [32], each POR tag
requires around 1.5% additional storage overhead per tenant
per block; popular blocks, e.g., shared amongst 50 tenants,
would then require 75% additional storage overhead.
Consequently, one way to minimize this additional stor-
age overhead would require to use the same set of tags
for each tenant. However, in practice, given that ﬁles are
typically deduplicated across tenants, and different tenants
do not tend to trust each other, tenants will be reluctant
on sharing the secret material used to construct tags in
POR/PDP. Notice that the leakage of the secret material
invalidates the security of POR/PDP; for instance, a cloud
provider which has access to the secret material can always
construct correct responses in existing POR schemes—even
if the oustourced data is deleted.
In this paper, we address this problem, and propose
a novel solution (SPORT)—which goes one step beyond
existing POR and transparently supports multi-tenancy and
data deduplication. More speciﬁcally, SPORT enables dif-
ferent
tenants to share the same POR tags in order to
verify the integrity of their deduplicated ﬁles. By doing so,
SPORT considerably reduces the storage overhead borne by
cloud providers when storing the tags of different tenants
deduplicating the same content. We show that SPORT re-
sists against malicious tenants/cloud providers (and against
collusion among a subset of the tenants and the cloud).
We argue that SPORT is technically and economically
viable. Indeed, by reconciling functional (i.e., storage efﬁ-
ciency and multi-tenancy) and security requirements (i.e.,
data retrievability in the cloud), SPORT provides consider-
able incentives for cloud providers to issue security SLAs
50%100%200%400% 1 10 100Storage overhead [%]Number of tenants deduplicating  the same contentRSA POR / PDPBLS PORSymmetric-Key PORthe ﬁle can be retrieved. For that reason, POR are typically
performed on a ﬁle which has been erasure-coded in such
a way that the recovery of any fraction p of the stored data
ensures the recovery of the ﬁle [7].
A POR scheme consists of four procedures [32], setup,
store, verify, and prove. The latter two algorithms deﬁne a
protocol for proving ﬁle retrievability. We refer to this pro-
tocol as the POR protocol (in contrast to a POR scheme that
comprises all four procedures). A POR scheme consists of
four procedures [32], setup, store, verify, and prove [32].
setup. This randomized algorithm generates the involved
keys and distributes them to the parties. In case public
keys are involved in the process, these are distributed
amongst all parties.
store. This randomized algorithm takes as input the keys of
the user and a ﬁle (cid:102)M. The ﬁle is processed and store
outputs M which will be stored on the server. store
also generates a ﬁle tag τ, which contains additional
information about M shared by the user and the service
provider and is used in the subsequent protocol.
verify. The randomized veriﬁcation algorithm takes the se-
cret and public key, and the ﬁle tag τ outputted by
store during protocol execution. It outputs at the end
of the protocol run TRUE if the veriﬁcation succeeds,
meaning that the ﬁle is being stored on the server, and
FALSE otherwise.
prove. The prover algorithm takes as input the public key
and the ﬁle tag τ and M that is output by store.
2.2. Multi-Tenant POR (MTPOR)
In the sequel, we formally deﬁne the model for multi-
tenant POR, dubbed MTPOR. Similar to the standard POR
model, we distinguish between tenants and the service
provider S. The main difference to the aforementioned POR
model lies in the direct integration of the notion of multiple
tenants (or users) that can upload the same ﬁle to be stored at
S. In general, these tenants are independent of each other and
do not necessarily trust each other. That is, we do not assume
the existence of shared secrets or direct communication
between the different tenants.
Conforming with the operation of existing cloud
providers, we assume that S stores duplicate data (either
at the block level or the ﬁle level) uploaded by different
users only once—thus tremendously saving storage costs.
Recent studies show that cross-user data deduplication can
save storage costs by more than 50% in standard ﬁle sys-
tems [27], [28], and by up to 90-95% for back-up applica-
tions [27]. Nonetheless, any user who uploaded a ﬁle should
be able to execute PORs later on to verify that the ﬁle has
been stored. Therefore, we assume that the provider stores
for each uploaded ﬁle M the following:
1) The ﬁle M itself which is stored only once.
2) Additional metadata Data(M ) which contains e.g., a
list of the users who uploaded M and information for
conducting the POR on M.
each ﬁle that he stores. Clearly, metadata corresponding
to different ﬁles may contain duplicate information about
the same user to account for the case where the user has
uploaded different ﬁles. For simplicity, if we refer to a meta-
data Data(M ) where the ﬁle M has not been uploaded yet,
we assume that the metadata is empty, e.g., Data(M ) = ⊥.
Moreover, for ease of presentation, we simply write Data
instead of Data(M ), whenever the considered ﬁle is clear
from the context.
In the sequel, we assume that all communication is
authenticated and encrypted (e.g., using the TLS protocol).
Similar to the POR model outlined in Section 2.1, we con-
sider three basic procedures: Setup, Store, and POR where
POR is an interactive protocol that extends the notions of
verify and prove discussed earlier.
The Setup Protocol. The Setup protocol is used to
establish the keys that are required by the users to instrument
the POR; notice that these keys may be different from the
keys used to authenticate and encrypt the communication.
The input of this protocol is the security parameter λ and
the outputs are a secret and a public key. In case such keys
are not required in some settings, the respective values are
simply ⊥. Formally, it holds for a party running Setup that:
(1)
(sk, pk) ← Setup(λ)
Whenever it is necessary to refer to the keys of a speciﬁc
user U, we denote the corresponding secret and public key
by skU and pkU, respectively.
tocol takes as input the keys of the user, a ﬁle (cid:102)M from the
The Store Protocol. This randomized ﬁle-storing pro-
user U that has to be stored by the service provider and
the current metadata of the provider. During the protocol
execution, it may happen that the ﬁle is processed prior
to being stored—we denote this ﬁle by M. The output of
Store is a veriﬁcation key vkU that allows the user to run
the proof of retrievability. The veriﬁcation key may be equal
to (or depend on) the secret or public key that the user
generated in the Setup procedure. On the provider’s side,
the (processed) ﬁle M is stored and the metadata Data(M )
is updated.1 Formally, it holds that:
Store :
[U : skU, pkU,(cid:102)M ; S : Data(M )]
−→ [U : vkU; S : M, Data(M )].
Observe that unlike the single-tenant POR model out-
lined in Sec. 2.1, we do not utilize the notion of a ﬁle tag
τ that needs to be known to both parties. Instead, we split
this information into two parts: (i) the part that needs to be
known to the user (or veriﬁer)—captured by the notion of a
veriﬁcation key vkU—and (ii) the part that needs to be stored
by the provider, which is part of the metadata Data(M ).
Observe that the Store protocol essentially requires a
user to join the set of users who all uploaded the same
ﬁle M. In practice, one may also prefer to have a protocol
that allows users to leave this set. However, as we aim to
If a provider stores several ﬁles, e.g., M1, . . . , Mn, we
assume that S maintains separate metadata Data(Mi) for
1. Recall that we model the state Data(M ) being empty unless M is
uploaded.
achieve that the model for a multi-tenant POR falls back