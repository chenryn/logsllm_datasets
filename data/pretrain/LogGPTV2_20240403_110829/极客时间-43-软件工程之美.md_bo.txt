## 如何搭建持续交付环境？要搭建好自己的持续交付环境，其实并不算太难，已经有很多持续集成工具和教程帮助我们做这件事。
#### 准备工作根据前面对持续交付的说明，要想搭建自己的持续交付环境，并不是简单找一个持续集成工具一搭就可以工作了，而是还需要做一些准备工作。我们先来看持续集成部分，持续集成相对要求简单：1.  需要有源代码管理工具，比如说    git、svn，因为持续集成工具需要从统一的源代码仓库获取代码；2.  需要写自动化测试代码，因为持续集成有一个很重要的条件，就是自动测试必须通过。第一个条件其实好满足的，现在源代码管理工具已经是标配，无论是免费的还是收费的，都有很多选择。第二个条件其实也不是太大的问题，因为自动化测试覆盖率，可以逐步提升，不要求一步到位。所以可以先把自动化测试写起来，然后在开发过程中逐步增加覆盖率。持续交付相对比持续集成要求更高，因为整个过程需要高度的自动化。要实现持续交付，你的项目需要满足以下条件：1.  对代码构建的过程可以反复进行，并且每次构建的结果是一致的、稳定的；2.  所有环境的配置都存在于源代码管理工具中，不仅仅是代码；3.  需要自动创建针对于不同环境的发布包；4.  所有环境的部署发布步骤都必须是自动化的。上面这些要求，最难的部分其实就是自动化打包和自动化部署到各种环境，因为每套程序都不一样，每个服务器环境也不一样，这是必须要各个团队针对自己的项目情况去解决的问题。
#### 选择合适的持续集成工具持续集成工具现在已经有很多选择，有开源的、商业的，有线上托管的，还有自己搭建的。主要的持续集成工具有这些：-   JenkinsJenkins](http://jenkins.io)应该是目前最好的开源持续集成工具，可以自己搭建，插件非常丰富，可以满足绝大部分项目的需要。相对使用难度要高一些，需要花一点时间学习。-   Go CDGo CD](http://www.gocd.org)是 ThoughtWorks公司出品的持续集成工具，可以免费使用。-   Travis CITravis CI](http://travis-ci.org)是一个老牌的托管的商业 CI 系统，和Github 集成的非常好，尤其是开源项目，可以免费使用。-   GitLab CIGitLab CI](http://about.gitlab.com)是 Gitlab推出的持续集成工具，可以自己搭建也可以使用它的在线托管，价钱便宜。-   Azure PipelinesAzurePipelines](http://azure.microsoft.com/zh-cn/services/devops/pipelines/)是微软的持续集成平台，可以自己搭建也可以使用它的在线托管，和微软的开发语言和服务集成很好。
#### 根据选择的工具实施在选好你要用的持续集成工具后，就需要根据工具的说明去搭建。这部分相对简单，网上也有比较多的教程，限于篇幅，这里我就不一一介绍啦，相信你通过它们的官方网站或者是搜索，很容易能找到很多相关的使用教程。
## 总结今天我带你一起学习了与持续交付相关的一些概念：-   **持续集成**，就是持续频繁地将代码从分支集成到主干，并且要保证在合并到主干之前，必须要通过所有的自动化测试。-   **持续交付**，则是基于持续集成，在自动化测试完成后，同时构建生成各个环境的发布包，部署到测试环境，但生产环境的部署需要手动确认。-   **持续部署**，是在持续交付的基础上，对生产环境的部署也采用自动化。要搭建持续交付环境，首先需要做好准备工作，例如自动化测试代码和自动部署脚本；然后要选择好持续集成工具；最后按照选择的持续集成工具来实施。最后，推荐你配合阅读《[持续交付 :发布可靠软件的系统方法](http://book.douban.com/subject/6862062/)》，这本书很系统地讲述了持续交付的概念和如何去实施的过程。
## 课后思考你的项目中应用了持续交付吗？如果应用了，你觉得有哪些优缺点？如果没有应用，你觉得主要的障碍是什么？欢迎在留言区与我分享讨论。感谢阅读，如果你觉得这篇文章对你有一些启发，也欢迎把它分享给你的朋友。![](Images/da183fec69b316d65c37d6f003a9f298.png){savepage-src="https://static001.geekbang.org/resource/image/31/af/315c3c753591fbaf480f39cdc9e0f3af.jpg"}