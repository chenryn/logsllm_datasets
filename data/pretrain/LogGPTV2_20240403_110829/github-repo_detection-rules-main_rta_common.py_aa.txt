# Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
# or more contributor license agreements. Licensed under the Elastic License
# 2.0; you may not use this file except in compliance with the Elastic License
# 2.0.
from __future__ import unicode_literals, print_function
import binascii
import contextlib
import functools
import getpass
import inspect
import os
import platform
import re
import shutil
import socket
import subprocess
import sys
import tempfile
import threading
import time
from pathlib import Path
from typing import Iterable, Optional, Union
from http.server import HTTPServer, SimpleHTTPRequestHandler
long_t = type(1  str:
    global LOCAL_IP, HOSTNAME
    if LOCAL_IP is None:
        try:
            LOCAL_IP = socket.gethostbyname(HOSTNAME)
        except socket.gaierror:
            LOCAL_IP = "127.0.0.1"
    return LOCAL_IP
def get_winreg():
    try:
        import _winreg as winreg
    except ImportError:
        import winreg
    return winreg
# Multi-OS Support
WINDOWS = "windows"
MACOS = "macos"
LINUX = "linux"
if sys.platform == "darwin":
    CURRENT_OS = MACOS
elif sys.platform.startswith("win"):
    CURRENT_OS = WINDOWS
else:
    CURRENT_OS = LINUX
if CURRENT_OS == WINDOWS:
    CMD_PATH = os.environ.get("COMSPEC")
    POWERSHELL_PATH = "C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"
    import ctypes
    import win32process
    import win32file
    import win32service
    import win32api, win32security
    from ctypes import byref, windll, wintypes
    from ctypes.wintypes import BOOL
    from ctypes.wintypes import DWORD
    from ctypes.wintypes import HANDLE
    from ctypes.wintypes import LPVOID
    from ctypes.wintypes import LPCVOID
    # Windows related constants and classes
    TH32CS_SNAPPROCESS = 0x00000002
    PROCESS_QUERY_LIMITED_INFORMATION = 0x1000
    TOKEN_DUPLICATE = 0x0002
    TOKEN_ALL_ACCESS = 0xf00ff
    MAX_PATH = 260
    BOOL = ctypes.c_int
    DWORD = ctypes.c_uint32
    HANDLE = ctypes.c_void_p
    LONG = ctypes.c_int32
    NULL_T = ctypes.c_void_p
    SIZE_T = ctypes.c_uint
    TCHAR = ctypes.c_char
    USHORT = ctypes.c_uint16
    UCHAR = ctypes.c_ubyte
    ULONG = ctypes.c_uint32
    class PROCESSENTRY32(ctypes.Structure):
        _fields_ = [
            ('dwSize', DWORD),
            ('cntUsage', DWORD),
            ('th32ProcessID', DWORD),
            ('th32DefaultHeapID', NULL_T),
            ('th32ModuleID', DWORD),
            ('cntThreads', DWORD),
            ('th32ParentProcessID', DWORD),
            ('pcPriClassBase', LONG),
            ('dwFlags', DWORD),
            ('szExeFile', TCHAR * MAX_PATH)
        ]
    LPCSTR = LPCTSTR = ctypes.c_char_p
    LPDWORD = PDWORD = ctypes.POINTER(DWORD)
    class _SECURITY_ATTRIBUTES(ctypes.Structure):
        _fields_ = [('nLength', DWORD),
                    ('lpSecurityDescriptor', LPVOID),
                    ('bInheritHandle', BOOL), ]
    SECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES
    LPSECURITY_ATTRIBUTES = ctypes.POINTER(_SECURITY_ATTRIBUTES)
    LPTHREAD_START_ROUTINE = LPVOID
else:
    CMD_PATH = "/bin/sh"
    POWERSHELL_PATH = None
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
ALL_IP = "0.0.0.0"
IP_REGEX = r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"
CALLBACK_REGEX = r"https?://" + IP_REGEX + r":\d+"
USER_NAME = getpass.getuser().lower()
SUCCESS = 0
PYTHON_ERROR = 1  # Python does this internally, so we don't want to overwrite it
GENERAL_ERROR = 2
MISSING_DEPENDENCIES = 3
MISSING_PSEXEC = 4
ACCESS_DENIED = 5
UNSUPPORTED_RTA = 6
MISSING_REMOTE_HOST = 7
# Amount of seconds a command should take at a minimum.
# This can allow for arbitrary slow down of scripts
MIN_EXECUTION_TIME = 0
MAX_HOSTS = 64
# Useful constants
HKLM = "hklm"
HKCU = "hkcu"
HKU = "hku"
HKCR = "hkcr"
SZ = "sz"
EXPAND_SZ = "expand_sz"
MULTI_SZ = "multi_sz"
DWORD = "dword"
OS_MAPPING = {WINDOWS: [], MACOS: [], LINUX: []}
def requires_os(*os_list: str):
    if len(os_list) == 1 and isinstance(os_list[0], (list, tuple)):
        os_list = os_list[0]
    def decorator(f):
        # Register this function with the support os mapping
        for os_type in os_list:
            OS_MAPPING[os_type].append(f.__module__.split(".")[-1])
        @functools.wraps(f)
        def decorated(*args, **kwargs):
            if CURRENT_OS not in os_list:
                filename = os.path.relpath(inspect.getsourcefile(f))
                func_name = f.__name__
                log(f"Unsupported OS for {filename}:{func_name}(). Expected {'/'.join(os_list)}", "!")
                return UNSUPPORTED_RTA
            return f(*args, **kwargs)
        return decorated
    return decorator
def check_dependencies(*paths: str) -> bool:
    missing = []
    for path in paths:
        if not os.path.exists(path):
            log("Missing dependency %s" % path, "!")
            missing.append(path)
    return len(missing) == 0
def dependencies(*paths: str):
    missing = []
    for path in paths:
        if not os.path.exists(path):
            missing.append(path)
    def decorator(f):
        @functools.wraps(f)
        def decorated(*args, **kwargs):
            if len(missing):
                log("Missing dependencies for %s:%s()" % (f.func_code.co_filename, f.func_code.co_name), "!")
                for dep in missing:
                    print("    - %s" % os.path.relpath(dep, BASE_DIR))
                return MISSING_DEPENDENCIES
            return f(*args, **kwargs)
        return decorated
    return decorator
def pause():
    time.sleep(0.5)
def get_path(*path: str) -> str:
    return str(Path(BASE_DIR).joinpath(*path))
@contextlib.contextmanager
def temporary_file(contents, file_name=None):
    handle, close = temporary_file_helper(contents, file_name)
    try:
        yield handle
    finally:
        close()
def temporary_file_helper(contents, file_name=None):
    if not (file_name and os.path.isabs(file_name)):
        file_name = os.path.join(tempfile.gettempdir(), file_name or f"temp{hash(contents):d}")
    with open(file_name, "wb" if isinstance(contents, bytes) else "w") as f:
        f.write(contents)
    f = open(file_name, "rb" if isinstance(contents, bytes) else "r")
    def close():
        f.close()
        os.remove(file_name)
    return f, close
def execute(
    command: Iterable,
    hide_log=False,
    mute=False,
    timeout: int = 30,
    wait=True,
    kill=False,
    drop=False,
    stdin: Optional[Union[bytes, str]] = None,
    shell=False,
    **kwargs,
):
    """Execute a process and get the output."""
    command_string = command
    close = None
    if isinstance(command, (list, tuple)):
        command_string = subprocess.list2cmdline(command)
        if shell:
            command = command_string
    else:
        sys.stderr.write("Deprecation warning! Switch arguments to a list for common.execute()\n\n")
    if not hide_log:
        print("%s @ %s > %s" % (USER_NAME, HOSTNAME, command_string))
    if isinstance(stdin, (bytes, str)):
        stdin, close = temporary_file_helper(stdin)
    stdout = subprocess.PIPE
    stderr = subprocess.STDOUT
    if drop or kill:
        devnull = open(os.devnull, "w")
        stdout = devnull
        stderr = devnull
    start = time.time()
    p = subprocess.Popen(command, stdin=stdin or subprocess.PIPE, stdout=stdout, stderr=stderr, shell=shell, **kwargs)
    if kill:
        delta = 0.5
        # Try waiting for the process to die
        for _ in range(int(timeout / delta) + 1):
            time.sleep(delta)
            if p.poll() is not None:
                return
        log("Killing process", str(p.pid))
        try:
            p.kill()
            time.sleep(0.5)
        except OSError:
            pass
    elif wait:
        output = ""
        if not stdin:
            try:
                p.stdin.write(os.linesep.encode("ascii"))
            except IOError:
                # this pipe randomly breaks when executing certain non-zero exit commands on linux
                pass
        while p.poll() is None:
            line = p.stdout.readline().decode("ascii", "ignore")
            if line:
                output += line
                if not (hide_log or mute):
                    print(line.rstrip())
        output += p.stdout.read().decode("ascii", "ignore")
        output = output.strip()
        # Add artificial sleep to slow down command lines
        end = time.time()
        run_time = end - start
        if run_time  %s" % (source, target))
    shutil.copy(source, target)
def create_macos_masquerade(masquerade: str):
    if platform.processor() == "arm":
        name = "com.apple.ditto_and_spawn_arm"
    else:
        name = "com.apple.ditto_and_spawn_intel"
    source = get_path("bin", name)
    copy_file(source, masquerade)
def link_file(source, target):
    log("Linking %s -> %s" % (source, target))
    execute(["ln", "-s", source, target])
def remove_file(path):
    if os.path.exists(path):
        log("Removing %s" % path, log_type="-")
        # Try three times to remove the file
        for _ in range(3):
            try:
                os.remove(path)
            except OSError:
                time.sleep(0.25)
            else:
                return
def remove_directory(path):
    if os.path.exists(path):
        if os.path.isdir(path):
            log(f"Removing directory {path:s}", log_type="-")
            shutil.rmtree(path)
        else:
            remove_file(path)
def is_64bit():
    return os.environ.get("PROCESSOR_ARCHITECTURE", "") in ("x64", "AMD64")
def remove_files(*paths):
    for path in paths:
        remove_file(path)