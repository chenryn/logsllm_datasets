### Capability-based Binding

**Figure 4: Binding Creation**

- **Device-initiated Binding:** In this design, the user's credentials (i.e., `UserId` and `UserPw`) are delivered to the device during local configuration. The device then submits a binding message containing both the user's credentials and the device ID to the cloud. Upon receiving the message, the cloud establishes a binding relationship. However, delivering the user's credentials to the device can pose a security risk if the device is compromised.

Interestingly, in some ACL-based binding designs, an additional step for post-binding authorization is executed after the binding message is submitted to the cloud. This extra step can prevent device hijacking attacks. Specifically, when the binding message is submitted, the cloud returns a random token to both the user and the device. In subsequent interactions, this token is included in every message from the device and the user app. Even if an attacker forges a binding message, they cannot force the target device to submit the same token, making it infeasible to hijack the device. Note that while this mechanism prevents the forgery of user and device messages in the control state, it does not prevent the forgery of binding messages.

- **Capability-based Binding:** Under our adversary model, a secure binding mechanism should rely on capability-based authorization. Here, an authorization token (in this case, the binding message is: `Bind : BindToken`) is delivered from the cloud to the user app and then locally transmitted to the device [3]. The device then submits this token back to the cloud to confirm the binding with the user. This design ensures the user's ownership of the device: to bind with a device remotely, the user must be locally bound with the device.

**Our Assessment:**
A significant misunderstanding in binding creation is the use of ACL-based binding, where vendors combine `devId` and `UserToken` to confirm binding relationships. This design can result in "ambient authority" [1] and open the door to various attacks (as demonstrated in Section V). Instead, the best practice is to use capability-based binding, such as the solution implemented by Samsung SmartThings [3]. In this approach, a binding token (`BindToken`) represents the actual authority, and the authorization step is only achieved by locally communicating with the specific device (i.e., ownership confirmation).

- **Note:** The device ID itself does not include authorizing information and could potentially be used by other users.

### Binding Revocation

A binding is revoked when the device is reset or the user removes the device from their account. We found three types of unbinding messages to revoke bindings in the cloud (assuming that device `i` is bound with user `j`):

- **Type 1: `Unbind : (DevId_i, UserToken_j)`**  
  To revoke the binding, the user or the device sends an unbinding message with the user token and the device ID to the cloud. The cloud verifies the user token and revokes the corresponding binding based on the submitted device ID. Additionally, the cloud checks whether the message sender is already bound with the device.

- **Type 2: `Unbind : DevId_i`**  
  An unbinding message can be sent from the IoT device. Since one device only belongs to a specific user, an unbinding message containing only the device identifier can achieve the unbinding function. This approach is convenient because the unbinding message can be sent during the device reset without requiring any extra action. However, it also introduces security risks, as anyone obtaining the device ID can forge an unbinding message and revoke the binding.

- **Type 3: `Bind : (DevId_i, UserToken_n)`**  
  Interestingly, there is a device that does not support unbinding operations, and the user has to use a new binding to replace the previous one in the cloud. When a binding message is received, the cloud replaces the bound user `i` with the new user `n`. This design reduces development efforts but introduces new security risks, as an attacker can forge binding messages to replace a user’s binding, leading to device unbinding or device hijacking (see Section V).

**Our Assessment:**
Binding revocation is a critical authorization procedure often misunderstood or neglected by developers. It should be correctly designed (e.g., using authorization tokens to manipulate cloud-side resources), and the cloud should enforce strict policies to ensure that the message sender indeed has the permission to revoke the claimed binding relationship.

### Security Vulnerabilities

In this section, we analyze the security risks associated with remote binding. We show how design and implementation choices can be exploited to launch several attacks, ranging from binding denial-of-service to device hijacking.

#### Overview

We aim to investigate the security risks in remote binding with respect to the procedures described earlier. We systematically explore potential attack surfaces by considering that all three types of messages could be forged and sent to the cloud in all states of a device shadow:

- **Data Injection and Stealing (A1):**  
  When status messages are forged, the attacker can act as the user’s device, injecting fake data and stealing user data in the control and bound states.

- **Binding Denial-of-Service (A2):**  
  When binding messages are forged, the attacker can create a binding with the user’s device before the user binds with it, causing binding denial-of-service. Alternatively, if the user is already bound, the binding can be replaced, allowing the attacker to disconnect the user from the device or take control of it.

- **Device Unbinding (A3):**  
  When unbinding messages are forged, the attacker can revoke the user’s binding, causing device unbinding. This attack can also be combined with binding message forgery to further hijack the user's device.

- **Device Hijacking (A4):**  
  The attacker can take absolute control of the device by sending a binding message with the attacker’s token and the user’s device ID to the cloud. This can occur in the control and online states, depending on the cloud's implementation and design flaws.

#### Taxonomy of Attacks in Remote Binding

| Attacks | Forged Message Types | Targeted States | End States | Consequences |
|---------|----------------------|-----------------|------------|--------------|
| A1: Data Injection and Stealing | `Status : DevId` | Control and Bound State | Control State | The attacker can inject fake device data or steal private user data. |
| A2: Binding Denial-of-Service | `Bind : (DevId, UserToken)` | Initial State | Bound State | The attacker can cause denial-of-service to the user’s binding operation. |
| A3: Device Unbinding | `Unbind : DevId`, `Unbind : (DevId, UserToken)`, `Bind : (DevId, UserToken)`, `Status : DevId` | Control and Online State | Control State | The attacker can disconnect the device with the user. |
| A4: Device Hijacking | `Bind : (DevId, UserToken)`, `Unbind : DevId` or `Unbind : (DevId, UserToken)`, `Bind : (DevId, UserToken)` | Control and Online State | Control State | The attacker can take absolute control of the device. |

#### Experimental Results

In this section, we describe our experiment setup to evaluate the devices and perform our attacks. We then provide the evaluation results and discuss why existing designs fail.

**Experiment Procedures:**

- **Setup:** The user and the attacker have different network access, different Android smartphones (Samsung Galaxy S5, Android 5.0), and different accounts. We installed the companion apps of the devices on both smartphones and logged in with the user’s and attacker’s accounts, respectively. We then set up and configured the devices with the corresponding apps.

- **Identifying Device IDs:** Among the 10 devices studied, 6 directly attach the device IDs on the devices, and 5 use MAC addresses (the first 3-bytes are the manufacturer's ID number) as their device IDs. For the rest, device IDs can be observed from the traffic or obtained through differential analysis of the messages.

- **Launching Attacks:** To launch the attacks, we substitute the user’s device IDs with the attacker’s device IDs in the targeted messages. We identify the binding and unbinding messages through manual dynamic analysis of the apps. To capture and analyze the HTTP/HTTPS messages from the attacker’s app, we use a Man-in-the-Middle proxy [6]. We generate fake requests using Postman [11]. For unknown protocols, we use specialized tools and techniques.

By following these procedures, we were able to evaluate the security of the devices and demonstrate the vulnerabilities in their binding mechanisms.