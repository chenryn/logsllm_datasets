title:X-Force: Force-Executing Binary Programs for Security Applications
author:Fei Peng and
Zhui Deng and
Xiangyu Zhang and
Dongyan Xu and
Zhiqiang Lin and
Zhendong Su
X-Force: Force-Executing Binary Programs  
for Security Applications
Fei Peng, Zhui Deng, Xiangyu Zhang, and Dongyan Xu, Purdue University; Zhiqiang Lin,  
The University of Texas at Dallas; Zhendong Su, University of California, Davis
https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/peng
This paper is included in the Proceedings of the 23rd USENIX Security Symposium.August 20–22, 2014 • San Diego, CAISBN 978-1-931971-15-7Open access to the Proceedings of  the 23rd USENIX Security Symposium is sponsored by USENIXX-Force: Force-Executing Binary Programs for Security Applications
Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu
Purdue University
Zhiqiang Lin
UT Dallas
Zhendong Su
UC Davis
PI:EMAIL
PI:EMAIL
{pengf, deng14, xyzhang, dxu}@cs.purdue.edu
Abstract
This paper introduces X-Force, a novel binary analysis
engine. Given a potentially malicious binary executable,
X-Force can force the binary to execute requiring no in-
puts or proper environment. It also explores different ex-
ecution paths inside the binary by systematically forc-
ing the branch outcomes of a very small set of condi-
tional control transfer instructions. X-Force features a
crash-free execution model that can detect and recover
from exceptions. In particular, it can ﬁx invalid mem-
ory accesses by allocating memory on-demand and set-
ting the offending pointers to the allocated memory. We
have applied X-Force to three security applications. The
ﬁrst is to construct control ﬂow graphs and call graphs
for stripped binaries. The second is to expose hidden
behaviors of malware, including packed and obfuscated
APT malware. X-Force is able to reveal hidden mali-
cious behaviors that had been missed by manual inspec-
tion. In the third application, X-Force substantially im-
proves analysis coverage in dynamic type reconstruction
for stripped binaries.
1
Introduction
Binary analysis has many security applications. For ex-
ample, given an unknown, potentially malicious exe-
cutable, binary analysis helps construct its human in-
spectable representations such as control ﬂow graph
(CFG) and call graph (CG), with which security analysts
can study its behavior [40, 23, 50, 46, 6, 33]. Binary anal-
ysis also helps identify and patch security vulnerabilities
in COTS binaries [10, 14, 31, 51, 11]. Valuable informa-
tion can be reverse-engineered from executables through
binary analyses. Such information includes network pro-
tocols [44, 12, 7, 47, 28, 32], input formats [27, 29, 13],
variable types, and data structure deﬁnitions [30, 25, 39].
They can support network snifﬁng, exploit generation,
VM introspection, and forensic analysis.
Existing binary analysis can be roughly classiﬁed into
static, dynamic, and symbolic (concolic) analysis. Static
analysis analyzes an executable directly without execut-
ing it; dynamic analysis acquires analysis results by exe-
cuting the subject binary; symbolic (concolic) analysis is
able to generate inputs to explore different paths of a bi-
nary. These different styles of analyses have their respec-
tive strengths and limitations. Static analysis has difﬁ-
culty in handling packed and obfuscated binaries. Mem-
ory disambiguation and indirect jump/call target analysis
are known to be very challenging for static analysis.
Dynamic binary analysis is based on executing the bi-
nary on a set of inputs. It is widely used in analyzing
malware. However, dynamic analysis is incomplete by
nature. The quality of analysis results heavily relies on
coverage of the test inputs. Moreover, modern malware
[16, 26, 19] has become highly sophisticated, posing
many new challenges for binary analysis: (1) For a zero-
day binary malware, we typically do not have any knowl-
edge about it, especially the nature of its input, making
traditional execution-based analysis [15, 50, 4, 43, 49]
difﬁcult; (2) Malware binaries are increasingly equipped
with anti-analysis logic [37, 5, 17, 18, 35] and hence may
refuse to run even if given valid input; (3) Malware bi-
naries may contain multi-staged, condition-guarded, and
environment-speciﬁc malicious payloads, making it dif-
ﬁcult to reveal all payloads, even if one manages to exe-
cute them.
Symbolic [8] and concolic analysis [38, 20, 40, 10]
has seen much progress in recent years. Some handle
binary programs [40, 10, 33, 6] and can explore various
paths in a binary. However, difﬁculties exist when scal-
ing them to complex, real-world binaries, as they oper-
ate by modeling individual instructions as symbolic con-
straints and using SMT/SAT solvers to resolve the gen-
erated constraints. Despite recent impressive progress,
SMT/SAT remains expensive. While symbolic and con-
crete executions can be performed simultaneously so that
concrete execution may help when symbolic analysis en-
counters difﬁculties, the user needs to provide concrete
inputs, called seed inputs, and the quality of seed inputs
is critical to the execution paths that can be explored.
With no or little knowledge about malware input, creat-
ing such seed inputs is difﬁcult. Moreover, many existing
techniques cannot handle obfuscated or self-modifying
binaries.
In this paper, we propose a new, practical execution
engine called X-Force. The core enabling technique
behind X-Force is forced execution which, as its name
suggests, forces an arbitrary binary to execute along
different paths without any input or environment setup.
More speciﬁcally, X-Force monitors the execution of a
binary through dynamic binary instrumentation, system-
atically forcing a small set of instructions that may affect
the execution path (e.g., predicates and jump table ac-
USENIX Association  
23rd USENIX Security Symposium  829
cesses) to have speciﬁc values, regardless of their com-
puted values, and supplying random values when inputs
are needed. As such, the concrete program state of the
binary can be systematically explored. For instance, a
packed/obfuscated malware can be forced to unpack/de-
obfuscate itself by setting the branch outcomes of self-
protection checks, which terminate execution in the pres-
ence of debugger or virtual machine. X-Force is able
to tolerate invalid memory accesses by performing on-
demand memory allocations. Furthermore, by exploring
the reachable state of a binary, X-Force is able to explore
different aspects or stages of the binary behavior. For
example, we can expose malware’s data exﬁltration op-
erations, without the presence of the real data asset being
targeted.
Compared to manual inspection and static analysis,
X-Force is more accurate as many difﬁculties for static
analysis, such as handling indirect jumps/calls and ob-
fuscated/packed code, can be substantially mitigated by
the concrete execution of X-Force. Compared to sym-
bolic/concolic analysis, X-Force trades precision slightly
for practicality and extensibility. Note that X-Force may
explore infeasible paths as it forces predicate outcomes;
whereas symbolic analysis attempts to respect path fea-
sibility through constraint solving1. The essence of X-
Force will be discussed later in Section 6. Furthermore,
executions in X-Force are all concrete. Without the need
for modeling and solving constraints, X-Force is more
likely to scale to large programs and long executions.
The concrete execution of X-Force makes it suitable for
analyzing packed and obfuscated binaries. It also makes
it easy to port existing dynamic analysis to X-Force to
leverage the large number of executions, which will mit-
igate the incompleteness of dynamic analyses.
Our main contributions are summarized as follows:
• We propose X-Force, a system that can force a bi-
nary to execute requiring no inputs or any environ-
ment setup.
• We develop a crash-free execution model that could
detect and recover from exceptions properly. We
have also developed various execution path explo-
ration algorithms.
• We have overcome a large number of technical chal-
lenges in making the technique work on real world
binaries including packed and obfuscated malware
binaries.
• We have developed three applications of X-Force.
The ﬁrst is to construct CFG and CG of stripped bi-
naries, featuring high quality indirect jump and call
target identiﬁcation; the second is to study hidden
behavior of advanced malwares; the third one is to
1However, due to the difﬁculty of precisely modeling program be-
havior, even state-of-the-art symbolic analysis techniques [8, 10, 40]
cannot guarantee soundness.
apply X-Force in reverse engineering variable types
and data structure deﬁnitions of executables. Our
results show that X-Force substantially advances the
state-of-the-arts.
2 Motivation Example
Consider the snippet in Figure 1. It shows a hidden mali-
cious payload that hijacks the name resolution for a spe-
ciﬁc domain (line 14), which varies according to the cur-
rent date (in function genName()).
In particular, it re-
ceives some integer input at line 2. If the input satisﬁes
condition C at line 3, a DNSentry object will be allocated.
In lines 5-8, if the input has the CODE RED bit set, it
populates the object by calling genName() and stores the
input and the generated name as a (key, value) pair into a
hash table. In lines 12-14, the pair is retrieved and used
to guide domain name redirection. Note that the hash
table is used as a general storage for objects of various
types. In line 10, an irrelevant object o is also inserted
into the table.
This example illustrates some of the challenges faced
by both static and symbolic/concolic analysis. In static
analysis, it is difﬁcult to determine that the object re-
trieved at line 12 is the one inserted at line 7 because
the abstract domain has to precisely model the behav-
ior of the hash table put/get operations and the con-
dition that y==x, which requires context-sensitive and
path-sensitive analysis, and disambiguating the mem-
ory bucket[i] and bucket[i+4] in table get() and
table put(). The approximations made by many static
analysis techniques often determine the object at line 12
could be the one put at line 7 or 10. Performed solely at
the binary level, such an analysis is actually much more
challenging than described here.
In symbolic/concolic
analysis, one can model the input at line 2 as a symbolic
variable such that, by solving the symbolic constraints
corresponding to path conditions, the hidden payload
might be reached. However, the dictionary read at line 21
will be difﬁcult to handle if the ﬁle is unavailable. Mod-
eling the ﬁle as symbolic often causes scalability issues
if it has nontrivial format and size, because the generated
symbolic constraints are often complex and the search
space for acquiring syntactically correct inputs may be
extremely large.
In X-Force, the binary is ﬁrst executed as usual by pro-
viding random inputs. Note that X-Force does not need
to know the input format a priori as its exception recov-
ery mechanism prevents any crashes/exceptions. In other
words, the supply of random input values is merely to
allow the execution to proceed, not to drive the execu-
tion along different paths.
In the ﬁrst normal run, as-
sume that the false branches of the conditionals at lines
3, 5 and 13 are taken, yielding an uninteresting execu-
830  23rd USENIX Security Symposium 
USENIX Association
Figure 1: Motivating Example.
tion. X-Force will then try to force-set branch outcomes
at a small number (say, 1 or 2) of predicates by perform-
ing systematic search. Assume that the branch outcome
at line 5 is force-set to “true”. The malicious payload
will be forced to activate. Note that pointer p has a null
value at line 6, which will normally crash the execution
at line 22. X-Force tolerates such invalid accesses by al-
locating memory on demand, right before line 22. Also,
even if the dictionary ﬁle at line 21 is absent, X-Force
will force it through by supplying random input values.
As such, some random integer and domain are inserted
into the table (line 7) and retrieved later (line 12). Even-
tually, the random domain name is redirected at line 14,
exposing the DNS hijacking operation. We argue that the
domain name itself is not important as long as the hidden
hijacking logic is exposed.
3 High Level Design
3.1 Forced Execution Semantics
This section explains the basics of how a single forced
execution proceeds. The goal is to have a non-crashable
execution. For readability, we focus on explaining how
to detect and recover from memory errors in this subsec-
tion, and then gradually introduce the other aspects of
forced execution such as path exploration and handling
libraries and threads in later sections.
Program
Stmt
Operator
Expr
Register
Const
Addr
PC
P ::= s
s ::= s1; s2 | nop | r :=(cid:31) e | r :=(cid:31) R(ra) |
W(cid:31)(ra,rv) | jmp(cid:31)((cid:31)1) | if (r(cid:31)) then jmp((cid:31)1) |
jmp(cid:31)(r) | r := malloc(cid:31)(rs) |
free(cid:31)(r) | call(cid:31)((cid:31)1) | call(cid:31)(r) | ret(cid:31)
op ::= + | − | ∗ | / | > | < | ...
e ::= c | a | r1 op r2
r ::= {esp,eax,ebx, ...}
c ::= {true, f alse,0,1,2, ...}
a ::= {0,MIN ADDR,MIN ADDR + 1, ...,MAX ADDR}
(cid:31) ::= {(cid:31)1, (cid:31)2, (cid:31)3, ...}
Language. Due to the complexity of the x86 instruction
set, we introduce a simple low-level language that mod-
els x86 binary executables to facilitate discussion. We
only model a subset that is sufﬁcient to illustrate the key
ideas. Fig. 2 shows the syntax.
Memory reads and writes are modeled by R(ra) and
W(ra, rv) with ra holding the address and rv the value.
Since it is a low-level language, we do not model con-
ditional or loop statements, but rather guarded jumps;
malloc() and free() represent heap allocation and deal-
location. Function invocations and returns are modeled
by call() and ret. In our language, stack/heap memory
addresses are modeled as a range of integers and a special
value 0 to denote the null pointer value. Program coun-
ters (or instruction addresses) are explicitly modeled by
the PC set. Observe that each instruction is labeled with
a PC, denoting its instruction address. Direct jumps/calls
are parameterized with explicit PC values whereas indi-
rect jumps/calls are parameterized with a register.
LSet
SR ∈ RegLinearSet
SM ∈ MemLinearSet
accessible ∈ AddrAccessible
::= P (Addr)
::= Register (cid:25)→ &LSet
::= Addr (cid:25)→ &LSet
::= Addr (cid:25)→ boolean
VS ← VS + {∗(a)}
recovery (r) ::=
1: S ← SM(r)
2: VS ← {}
3: for each address a ∈ S do
4:
5: end for