in [12], where the integrated circuit board itself is penetrated
to expose the device’s circuits and allow data exﬁltration
through microprobing.
Our synthetic attacks assume that the attacker possesses
some knowledge of the behavior of ﬁrmware, particularly
that of the interrupt handlers. This scenario applies to com-
mon cases where the attacker has access to source code of
older or similar versions of the target device ﬁrmware, but
does not have access to the source code of the ﬁrmware run-
ning on the device itself. Given the fact that interrupt han-
dlers are usually boilerplate code that are rarely changed
between ﬁrmware versions, such a scenario is very feasible.
Our “bugdoor” attack assumes that the attacker can view
and modify ﬁrmware source code, but not in a manner that
is obviously malicious. This scenario applies to cases where
the target microcontroller runs open source ﬁrmware, such
as TinyOS, that an attacker could contribute his own mod-
iﬁcations to, subject to peer review.
5. ROP, MEET “IOP”
The classic way to exploit a computing system is via its
inputs. Any processed input is really a program; an exploit
is merely a program with unexpected eﬀects, format, compo-
sition modes, and, sometimes, unexpected input and output
channels.
For our Interrupt-oriented Programming trick (IOP, a pun
on ROP), we will use the fact that, other than data, a pro-
cessor also takes interrupts as inputs. More speciﬁcally,
the processor can be induced to execute interrupt handler
code by events that can often be triggered externally by an
attacker (e.g., sending an edge to a speciﬁc pin). In the same
way that an a vulnerable target can be “programmed” by an
attacker with a carefully crafted stack frame passed to it as
input, we “program” a processor with a series of well-timed
interrupts.
If our timings are precise enough to interrupt the processor
while it is executing speciﬁc instructions, we can treat con-
secutive chunks of instructions starting at interrupt vector
entry points and ending at another interrupt as our “gad-
gets”, except that the starts of these “gadgets” are ﬁxed,
while the endings depend on our ability to deliver the inter-
rupting interrupt at just the right instruction.2
Achieving such instruction-level timing precision on state-
of-the-art server processors is clearly out of reach, since their
high clock speeds make timing interrupts infeasible. How-
ever, this technique is feasible for microcontrollers that have
far lower clock speeds and support downclocked, low-power
processor states. For example, this technique will be appli-
cable to the various, ubiquitous microcontroller-based sen-
sors and “smart” devices, such as personal medical devices,
industrial control systems, and “smart homes”, on which we
are getting increasingly reliant today.
Of course, interesting instructions should be found close
enough to the beginning of interrupt vector chunks in the
targeted ﬁrmware to be of use. It turns out that, with the
minimalist primitives we discuss in section 7, we can plant an
eﬀective “bug door” there (which we describe in section 10).
Thus our objective is to explore programming with timed
sequences of interrupt-triggering signals that would result in
the execution of unintended, attacker-controlled computa-
tion. Formally speaking, our IOP programs are sequence of
pairs (ti, sj), where t0, t1, ..., tn−1, tn is the sequence of tim-
ings corresponding to CPU clock cycles, and s0, s1, ..., sk−1, sk
is the set of interrupt-triggering signals. t0 is the time before
the execution of the ﬁrst instruction in the target program
(clearly, timings ti only make sense relative to a moment
when the processor is in known state, such as its initial re-
set). For each pair pairs (ti, sj), the interrupt that signal
sj triggers must enabled at time ti (see the discussion of
interrupt-enabling bits below).
For this study, we looked at several MSP430-powered de-
vices: EZ430U, EZ430URF, FET430UIF, MSP430FET, and
GoodFET. We will describe this processor now, before we
launch into IOP primitives.
6. TARGET PROCESSOR: TEXAS INSTRU-
MENTS MSP430
2In other words, our gadgets are almost the exact opposite
of ROP ones; there needs to be nothing special about the
instruction on which we break out of the gadget, no control
ﬂow semantics of RET or JMP.
(cid:20)(cid:20)(cid:27)
The Texas Instruments (TI) MSP430 is a 16-bit ultra-
low power microcontroller. The native MSP430 CPU imple-
ments a Reduced Instruction Set Computer (RISC) archi-
tecture with 27 instructions, 7 addressing modes, and 16-bit
addressing. The extended MSP430X architecture supports
20-bit addressing, allowing it to directly address a 1-MB ad-
dress range without paging. TI MSP430 microcontrollers
draw low amounts of electric current in idle mode, and sup-
port several low-power modes. The MSP430 CPU can be
downclocked to further reduce power consumption. More
details about the features of the MSP430 family of micro-
controllers can be found in [30].
The TI MSP430’s low cost, low power consumption and
power saving features has made it a popular choice for use in
low power embedded devices, such as the Shimmer Wireless
Sensor Platform [26] and the Bodymedia FITTM wearable
medical devices (e.g., [34]).
For study, we speciﬁcally examined the MSP430F2618.
The MSP430F2618 uses the MSP430X architecture, and is
the embedded processor used in the GoodFET42, an open
source JTAG adapter developed by Travis Goodspeed.
6.1 How interrupts work in the MSP430
There are two types of interrupts in the TI MSP430:
maskable interrupts and non-maskable interrupts (NMIs).
Maskable interrupts are caused by peripherals with inter-
rupt capabilities. Maskable interrupts can either be disabled
individually by a per-peripheral interrupt enable bit, or all
maskable interrupts can be disabled by the General Inter-
rupt Enable (GIE) bit in the Status Register (SR). The SR is
cleared when a maskable interrupt is received, thus clearing
the GIE bit and disabling any further interrupts. Maskable
interrupts can be nested only if the GIE bit is set inside of
an interrupt handler.
NMIs cannot be disabled by the GIE bit. Instead, they are
enabled by individual interrupt enable bits. When an NMI
is accepted, all individual interrupt enable bits are reset,
disabling any further NMIs. Software must manually set
NMI enable bits to re-enable NMIs.
NMIs can only be generated from three sources: an edge
on the RST/NMI (reset) pin, an oscillator fault, or an access
violation to ﬂash memory.
When an interrupt occurs, the program counter (PC) and
SR are pushed onto the stack, interrupts are disabled, and
the contents of the interrupt vector of the interrupt with
the highest priority are loaded into PC so control ﬂow is
transferred to the interrupt handler. This takes 5 or 6 CPU
cycles in the MSP430X and MSP430 CPUs respectively.
Interrupt handlers terminate with the reti instruction,
which pops SR and PC oﬀ the stack to restore program state
and execution context to the point where the interrupt was
triggered. This takes 3 or 5 CPU cycles in the MSP430X
and MSP430 CPUs respectively ([30]).
7.
IOP PRIMITIVES
For any series of interrupts to aﬀect the processor as we
described above, there must exist some interdependency of
state between the interrupt handlers’ code, and some ac-
cumulation of state in interrupt handlers. We call such se-
quences of instructions IOP primitives. These primitives are
“pre-vulns”, in that they may, in certain combinations, lead
to a vulnerability exploitable with IOP; however, by them-
selves they may well be innocuous and never triggered in
common ﬁrmware execution patterns.
The following is a non-exhaustive list of IOP primitives:
• State accumulation. An instruction sequence that
writes to a register/memory location without ﬁrst set-
ting it or restoring its original value afterwards. Such
an instruction sequence would accumulate state in this
register/memory location on each invocation of the in-
terrupt handler.
• Memory write. An instruction sequence that writes
an immediate value, register value, or value in memory
to a register/memory location without overwriting the
written value afterward. This could be used to perform
arbitrary writes.
• Arithmetic. An instruction sequence that performs
arithmetic on two values from registers or memory.
Combined with a state accumulation and memory write
primitives, such a primitive would allow arithmetic
to be performed on arbitrary values stored in regis-
ters/memory and accumulated for later use.
• Stack growing. An instruction sequence that grows
the stack (i.e., writes to memory pointed to by SP and
decrements SP). This could be used to overwrite mem-
ory and to instrument return values on the stack. If
this instruction could be invoked an arbitrary number
of times (e.g. through interrupt nesting), this would
be an unbounded primitive. Otherwise, it is bounded.
• Stack alignment. An instruction sequence that grows
by a non-standard number of bytes. This could be used
with a stack growing primitive to grow the stack to a
word-aligned address. For example, if we had an un-
bounded stack growing primitive that grew the stack
by 4 bytes (2 words) each time and a bounded stack
alignment primitive that grew the stack by 2 bytes,
invoking the stack alignment primitive after invoking
the stack growing primitive a certain number of times
would allow the attacker to decrement SP to any word-
aligned address lower than the current SP.
Unlike ROP gadgets, which produce the same enduring
eﬀects whenever they are used, IOP primitives behave dif-
ferently depending on the context they are invoked in, and
produce eﬀects that are sometimes ephemeral. For exam-
ple, an interrupt handler containing a state accumulating
instruction sequence and ending with an state reset instruc-
tion can only be used as a state-accumulation primitive if
the accumulated state is used in some way before it is re-
set. These constraints make useful IOP primitives diﬃcult
to identify.
8. TOOLS AND SETUP
8.1 Hardware
In order to deliver the timed-signal payload to the target
TI MSP430F2618, we needed to be able to observe the state
of the microcontroller and send interrupt-triggering signals
to its pins. To achieve that, we connected two other micro-
controllers to the target device—one to communicate with
the hardware debugging interface of the target MSP430F2618,
and the other to send signals to the pins of that target. We
(cid:20)(cid:20)(cid:28)
used a hardware debugging interface in our laboratory setup
to ensure that our attack was behaving correctly. In an ac-
tual IOP attack, the attacker would not have full debugging
access to the microcontroller, only the ability to observe
some of themicrocontroller’s state and send signals to it.
Our experimental setup can be found in Figure 1.
9.1 State accumulation exploit
An interrupt handler that predictably and incrementally
modiﬁes CPU state without saving or restoring it could be
used to accumulate state.
If the target program behavior
can be inﬂuenced by this state, timed invocations of the
interrupt handler could be used to control the program.
Figure 2: State accumulation exploit
The assembly source code of a simple ﬁrmware that con-
tains such a vulnerability can be found in Figure 2. Num-
bered arrows represent actual instruction execution ﬂow thro-
ugh the code, as caused by our crafted interrupts.
This IOP exploit uses a state accumulation primitive (line
18) in the NMI interrupt handler to cause the ﬁrmware to
break out of an inﬁnite loop (lines 6-9) and switch on its
LED (lines 11-12). The IOP exploit takes place as follows:
(1) The SP (R1) is initialized at line 1, and the micro-
controller is conﬁgured trigger NMI interrupts upon
receiving a falling edge on the RST/NMI pin at line 2.
The memory location that will be used to accumulate
state, 0x200, is cleared at line 4. The ﬁrmware then
spins in lines 6-9, waiting for 0x2 to be accumulated
in 0x200.
(2) An NMI is triggered, which invokes the NMI handler
at line 16.
(3) The NMI handler clears the NMI interrupt ﬂag at line
17 to prevent a re- invocation of the NMI handler, and
then accumulates 0x1 in 0x200.
(4) The processor returns from the NMI interrupt to the
spin loop. NMI is re-enabled at line 7 by setting the
NMI interrupt bit. The ﬁrmware spins again, since
0x200 contains the value 0x1
(5) An NMI is triggered, which invokes the NMI handler
at line 16.
(6) NMI handler is invoked, accumulating another 0x1 in
0x200.
(7) The processor returns from the NMI interrupt to the
spin loop.
Figure 1: Laboratory setup
8.2 Software
To debug the target MSP430F2618 on the GoodFET42-
JTAG, we used mspdebug version 0.22, a free debugger for
MSP430 microcontrollers. We also extended the MSP430
simulator module in mspdebug to perform static analysis of
MSP430 ﬁrmware.
To control and ﬂash the GoodFET42-JTAG and Good-
FET41, we utilized the GoodFET ﬁrmware and client soft-
ware. We also modiﬁed the GoodFET ﬁrmware to enable
the GoodFET41 to send falling edges from its GPIO pin to
the RST/NMI pin of the GoodFET42-JTAG.
To disassemble target ﬁrmware binaries and perform static
analysis on them, we used the IDA Pro interactive disas-
sembler. We also wrote IDAPython scripts for IDA Pro to
automate the static analysis of ﬁrmware binaries.
9. SPECIFIC EXPLOITS
In this section, we describe two IOP exploits (a.k.a. IOP
programs) that utilize the primitive types described in Sec-
tion 7. The targets of these attacks are simple MSP430
ﬁrmware images that we created speciﬁcally to allow these
exploits to work; we later show how these can be combined
into an actual “bug door” in common, working ﬁrmware. In
all three examples, we use the LED on the GoodFET42-
JTAG as a simple output mechanism to indicate the success
of the exploit.
(cid:20)(cid:21)(cid:19)
(8) This time, 0x200 contains the value 0x2, so the ﬁrmware
breaks out of the ﬁrst spin loop, turns on the LED at
lines 11 and 12, and spins at the second spin loop from
lines 13-14
(3) The NMI handler clears the NMI ﬂag at line 19, and
re-enables NMIs at line 20 to allow for NMI nesting.
It then accumulates 0x1 in 0x202 at line 21.
(4) Another NMI is triggered, which invokes the NMI han-