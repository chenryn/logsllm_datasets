(vs. P
– Before a corruption, S outputs a randomly sampled session
key 𝑘0 (vs. 𝑘1).
– After a corruption, but 𝑐1 (vs. 𝑐0) has been generated before
corruption. Particularly, S selects the message 𝑠1 (vs. 𝑠0) ran-
domly, and simulates the ciphertext by sampling ¯𝑐0 (vs. ¯𝑐1)
randomly. After that, S cannot decrypt ¯𝑐0 (vs. ¯𝑐1) to a correct
value under the re-generated secret key 𝑠𝑘 (cid:4)
1), and S
samples a randomly chosen plaintext. Finally, S asks for the
session key 𝑘0 (vs. 𝑘1) from H on the pair (𝑠0, 𝑠 (cid:4)
, 𝑠1)).
1
– After a corruption, S selects a message 𝑠1 (vs. 𝑠0) randomly and
0 (vs. 𝑠𝑘 (cid:4)
) (vs. (𝑠 (cid:4)
0
0 (vs. 𝑠𝑘 (cid:4)
invokes 𝑐0 ← AFEM.Enc(𝑝𝑘1, 𝑠0) (vs. 𝑐1 ← AFEM.Enc(𝑝𝑘0, 𝑠1)).
After that, S decapsulates ¯𝑐0 (vs. ¯𝑐1) to a correct value under
the re-generated secret key 𝑠𝑘 (cid:4)
1). Finally, S asks for the
session key 𝑘0 (vs. 𝑘1) from H on the pair (𝑠0, 𝑠 (cid:4)
, 𝑠1)).
1
𝑗
) (vs. 𝐶𝑜𝑟𝑟𝑢𝑝𝑡 (P
)) implies that if this is the first
1
𝑗
corruption query involving P𝑖
0 (vs. P
1 ), one could first obtain a
secret key 𝑠𝑘0 (vs. 𝑠𝑘1), then define the public key 𝑝𝑘0 (vs. 𝑝𝑘1)
via the algorithm AFEM.PubGen(𝑠𝑘0) (vs. AFEM.PubGen(𝑠𝑘1)).
• 𝑇 𝑒𝑠𝑡 (𝑏) is answered using the defined session key according to
• 𝐶𝑜𝑟𝑟𝑢𝑝𝑡 (P𝑖
0
) (vs. (𝑠 (cid:4)
0
the choice bit 𝑏.
At the very end, or at the time of corruption, the biometric charac-
teristics are selected at random, and corresponding public keys are
calculated via the secret keys. As a consequence, we have
Claim 7.
|Adv
Hy6
A
(𝜆) − Adv
Hy7
A
(𝜆)| is negligible.
Proof. This claim is guaranteed by the security of AFEM.
(cid:2)
𝑗
) or 𝑇 𝑒𝑠𝑡 (P
1
In the final hybrid, A’s view is independent of the real biometric
secret keys chosen by S until the following cases happen. 1). A
𝑗
) or 𝑇 𝑒𝑠𝑡 (P𝑖
queries 𝑅𝑒𝑣𝑒𝑎𝑙 (P𝑖
) (vs. 𝑅𝑒𝑣𝑒𝑎𝑙 (P
)) after
0
0
1
𝑗
𝑆𝑒𝑛𝑑1 (P𝑖
, 𝑝𝑘0)) for a malicious and valid 𝑝𝑘1
, 𝑝𝑘1) (vs. 𝑆𝑒𝑛𝑑1 (P
0
1
𝑗
(vs. 𝑝𝑘0); 2) A queries 𝑅𝑒𝑣𝑒𝑎𝑙 (P𝑖
) or 𝑇 𝑒𝑠𝑡 (P𝑖
) (vs. 𝑅𝑒𝑣𝑒𝑎𝑙 (P
) or
0
0
1
𝑗
𝑗
, 𝑐0)) for a malicious
𝑇 𝑒𝑠𝑡 (P
, 𝑐1) (vs. 𝑆𝑒𝑛𝑑2 (P
1
1
Hy7
and valid 𝑐1 (vs. 𝑐0). Thus, it holds that Adv
(𝜆) ≤ 𝑄𝑠 /(cid:12)𝐷 (cid:12),
A
the way the session keys are defined is exactly the same as in the
random or the real cases (chosen at random before corruption). The
probability 𝑏 = 𝑏 (cid:4) is exactly Adv
(𝜆) ≤ 𝑄𝑠 /(cid:12)𝐷 (cid:12) + 𝑛𝑒𝑔𝑙 (𝜆). This
concludes the proof of Theorem 5.2 with Claim 1 to 7.
)) after 𝑆𝑒𝑛𝑑2 (P𝑖
0
Hy0
A
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2627Table 1: Asymptotic Comparison, where(cid:6)𝑛 denotes the bit-length of a biometric string, 𝑛 denotes the size of a biometric vector
set, and 𝜁 is a constant. A round means an interaction between two participants, i.e., one participant sends a message to the
other, who then sends another message back. For the researches [19] and [21], the number of rounds is evaluated based on the
building blocks (e.g., aPAKE is regarded as one round), i.e., the actual number of rounds depends on the instantiations, which
may be bigger than the number presented in this table.
Scheme
Technique
Round Multiplication Exponentiation Hash
fPAKE-1 [19]
fPAKE-2 [19]
fuzzy
aPAKE-1 [21]
fuzzy
aPAKE-2 [21]
BAKE-1
BAKE-2
PAKE +
Garbled Circult
Secret Sharing
Secret Sharing +
Oblivious Transfer
sender
receiver
sender
receiver
sender
receiver
sender
receiver
sender
receiver
sender
receiver Polynomial Interpolation
Secret Sharing +
Random
Linear Codes
aPAKE
5
2
2
2
1
1
−
−
−
−
2(cid:6)𝑛 + 𝜁
(cid:6)𝑛 + 𝜁
4(cid:6)𝑛 + 𝜁
2(cid:6)𝑛 + 𝜁
𝜁(cid:6)𝑛2
−
𝑛2
𝜁 𝑛3
3(cid:6)𝑛 + 𝜁
3(cid:6)𝑛 + 𝜁
2(cid:6)𝑛 + 𝜁
2(cid:6)𝑛 + 𝜁
4(cid:6)𝑛 + 𝜁
4(cid:6)𝑛 + 𝜁
5(cid:6)𝑛 + 𝜁
5(cid:6)𝑛 + 𝜁
4(cid:6)𝑛 + 𝜁
4(cid:6)𝑛 + 𝜁
(cid:6)𝑛
(cid:6)𝑛
3(cid:6)𝑛 + 𝜁
2(cid:6)𝑛 + 𝜁
4(cid:6)𝑛 + 𝜁
2(cid:6)𝑛 + 𝜁
Secret
Symmetric
Sharing Encryption
−
−
𝜁
𝜁
1
−
−
−
−
−
𝜁
𝜁
−
−
−
−
2(cid:6)𝑛 + 𝜁
2(cid:6)𝑛 + 𝜁
2(cid:6)𝑛
(cid:6)𝑛
−
−
−
−
𝜁
𝜁
2𝑛 + 𝜁
2𝑛 + 𝜁
−
𝜁
𝜁
𝜁
Table 2: Running Time (ms) on IrisCode and FVC2004.
Table 3: Communication Cost
FVC2004.
(KB) on IrisCode and
IrisCode
FVC2004
Case 1 Case 2 Case 3 Case 4 DB1 DB2 DB3 DB4
IrisCode
FVC2004
𝑚/𝑛
PubGen
Enc
Dec
16
54
101
71
32
55
110
79
64
56
111
85
128
58
110
116
95
29
151
315
91
28
148
293
138
43
221
598
150
45
232
631
Case 1 Case 2 Case 3 Case 4 DB1 DB2 DB3 DB4
𝑚/𝑛
𝑝𝑘
𝑐
16
0.813
0.844
32
3.094
3.125
64
12.156
12.188
128
48.281
48.313
95
2.969
2.672
91
2.844
2.566
138
4.313
3.867
150
4.688
4.219
For asynchronous BAKE, the security proof is identical to syn-
chronous BAKE except for the Session sid0, which is reduced to
the security of AFEM.
6 EVALUATION
We show the asymptotic comparison with the state-of-the-art solu-
tions and the experimental results on our implementation.
6.1 Asymptotic Comparison
The asymptotic comparison with the state-of-the-art solutions is
shown in Table 1, where our BAKE protocol for biometric vector is
denoted as BAKE-1 and the one for biometric vector set is denoted as
BAKE-2. Note that fPAKE [19] is a symmetric primitive, which gives
biometric characteristics away to the receiver and thus dissatisfies
the design goal of biometric privacy, while fuzzy aPAKE [21] is an
asymmetric primitive that has similar goals to BAKE.
BAKE-1, fPAKE (instantiated as in [19]), and fuzzy aPAKE (in-
stantiated as suggested in [21]) are designed for an (cid:6)𝑛-bit string,
while BAKE-2 is designed for a set of cardinal 𝑛. The computation
complexities of fPAKE-2 and fuzzy aPAKE-2 heavily rely on the un-
derlying PAKE and aPAKE solutions. Therefore, in all the solutions
for an(cid:6)𝑛-bit string, BAKE-1 is the most efficient one in terms of the
computation complexity. Moreover, among these solutions, only
BAKE-1 and BAKE-2 are one-round protocols that are suitable for
the asynchronous secure messaging setting.
6.2 Experiments
Implementation. To measure the performance of our BAKE
6.2.1
protocols, we implemented a prototype in Python using a laptop
computer, with the Intel Core i5-8300H CPU @ 2.30 GHz and 8 GB
RAM. The group in both solutions is implemented with the elliptic
curve Curve25519. BAKE-1 is implemented with the random linear
code provided in Fuller et al. [24] and BAKE-2 is instantiated with
Feldman’s secret sharing [23]. To ensure the biometric keys from
the same user are considered close, and the ones from different