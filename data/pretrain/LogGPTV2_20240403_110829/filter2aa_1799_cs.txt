cisely, is “activated”). The Background Infrastructure component of the Modern Application Model uses 
the data stored in the hive for storing background tasks information. In that way, when a background 
task timer elapses, it knows exactly in which application library the task’s code resides (and the activa-
tion type and threading model).
Furthermore, the modern application stack provides to UWP developers the concept of Application 
Data containers, which can be used for storing settings that can be local to the device in which the 
CHAPTER 10 Management, diagnostics, and tracing
403
application runs (in this case, the data container is called local) or can be automatically shared between 
all the user’s devices that the application is installed on. Both kinds of containers are implemented in 
the Windows.Storage.ApplicationData.dll WinRT library, which uses an application hive, local to the ap-
plication (the backing file is called settings.dat), to store the settings created by the UWP application.
Both the settings.dat and the ActivationStore.dat hive files are created by the Modern Application 
Model’s Deployment process (at app-installation time), which is covered extensively in Chapter 8, 
“System mechanisms,” (with a general discussion of packaged applications). The Application 
Data containers are documented at https://docs.microsoft.com/en-us/windows/uwp/get-started/
settings-learning-track.
Transactional Registry (TxR)
Thanks to the Kernel Transaction Manager (KTM; for more information see the section about the KTM 
in Chapter 8), developers have access to a straightforward API that allows them to implement robust 
error-recovery capabilities when performing registry operations, which can be linked with nonregistry 
operations, such as file or database operations.
Three APIs support transactional modification of the registry: RegCreateKeyTransacted, 
RegOpenKeyTransacted, and RegDeleteKeyTransacted. These new routines take the same parameters 
as their nontransacted analogs except that a new transaction handle parameter is added. A developer 
supplies this handle after calling the KTM function CreateTransaction.
After a transacted create or open operation, all subsequent registry operations—such as creat-
ing, deleting, or modifying values inside the key—will also be transacted. However, operations on 
the subkeys of a transacted key will not be automatically transacted, which is why the third API, 
RegDeleteKeyTransacted exists. It allows the transacted deletion of subkeys, which RegDeleteKeyEx 
would not normally do.
Data for these transacted operations is written to log files using the common logging file system 
(CLFS) services, similar to other KTM operations. Until the transaction is committed or rolled back 
(both of which might happen programmatically or as a result of a power failure or system crash, de-
pending on the state of the transaction), the keys, values, and other registry modifications performed 
with the transaction handle will not be visible to external applications through the nontransacted APIs. 
Also, transactions are isolated from each other; modifications made inside one transaction will not be 
visible from inside other transactions or outside the transaction until the transaction is committed.
Note A nontransactional writer will abort a transaction in case of conflict—for example, if 
a value was created inside a transaction and later, while the transaction is still active, a non-
transactional writer tries to create a value under the same key. The nontransactional opera-
tion will succeed, and all operations in the conflicting transaction will be aborted.
The isolation level (the “I” in ACID) implemented by TxR resource managers is read-commit, which 
means that changes become available to other readers (transacted or not) immediately after being 
committed. This mechanism is important for people who are familiar with transactions in databases, 
404 
CHAPTER 10 Management, diagnostics, and tracing
where the isolation level is predictable-reads (or cursor-stability, as it is called in database literature). 
With a predictable-reads isolation level, after you read a value inside a transaction, subsequent reads 
returns the same data. Read-commit does not make this guarantee. One of the consequences is that 
registry transactions can’t be used for “atomic” increment/decrement operations on a registry value.
To make permanent changes to the registry, the application that has been using the transaction 
handle must call the KTM function CommitTransaction. (If the application decides to undo the changes, 
such as during a failure path, it can call the RollbackTransaction API.) The changes are then visible 
through the regular registry APIs as well.
Note If a transaction handle created with CreateTransaction is closed before the transaction 
is committed (and there are no other handles open to that transaction), the system rolls back 
that transaction.
Apart from using the CLFS support provided by the KTM, TxR also stores its own internal log files in 
the %SystemRoot%\System32\Config\Txr folder on the system volume; these files have a .regtrans-ms 
extension and are hidden by default. There is a global registry resource manager (RM) that services all 
the hives mounted at boot time. For every hive that is mounted explicitly, an RM is created. For applica-
tions that use registry transactions, the creation of an RM is transparent because KTM ensures that all 
RMs taking part in the same transaction are coordinated in the two-phase commit/abort protocol. For 
the global registry RM, the CLFS log files are stored, as mentioned earlier, inside System32\Config\Txr. 
For other hives, they are stored alongside the hive (in the same directory). They are hidden and follow 
the same naming convention, ending in .regtrans-ms. The log file names are prefixed with the name of 
the hive to which they correspond.
Monitoring registry activity
Because the system and applications depend so heavily on configuration settings to guide their behav-
ior, system and application failures can result from changing registry data or security. When the system 
or an application fails to read settings that it assumes it will always be able to access, it might not func-
tion properly, display error messages that hide the root cause, or even crash. It’s virtually impossible 
to know what registry keys or values are misconfigured without understanding how the system or the 
application that’s failing is accessing the registry. In such situations, the Process Monitor utility from 
Windows Sysinternals (https://docs.microsoft.com/en-us/sysinternals/) might provide the answer.
Process Monitor lets you monitor registry activity as it occurs. For each registry access, Process 
Monitor shows you the process that performed the access; the time, type, and result of the access; and 
the stack of the thread at the moment of the access. This information is useful for seeing how applica-
tions and the system rely on the registry, discovering where applications and the system store con-
figuration settings, and troubleshooting problems related to applications having missing registry keys 
or values. Process Monitor includes advanced filtering and highlighting so that you can zoom in on 
activity related to specific keys or values or to the activity of particular processes.
CHAPTER 10 Management, diagnostics, and tracing
405
Process Monitor internals
Process Monitor relies on a device driver that it extracts from its executable image at runtime before 
starting it. Its first execution requires that the account running it has the Load Driver privilege as well as 
the Debug privilege; subsequent executions in the same boot session require only the Debug privilege 
because, once loaded, the driver remains resident.
EXPERIMENT: Viewing registry activity on an idle system
Because the registry implements the RegNotifyChangeKey function that applications can use 
to request notification of registry changes without polling for them, when you launch Process 
Monitor on a system that’s idle you should not see repetitive accesses to the same registry keys 
or values. Any such activity identifies a poorly written application that unnecessarily negatively 
affects a system’s overall performance.
Run Process Monitor, make sure that only the Show Registry Activity icon is enabled in the 
toolbar (with the goal to remove noise generated by the File system, network, and processes or 
threads) and, after several seconds, examine the output log to see whether you can spot polling 
behavior. Right-click an output line associated with polling and then choose Process Properties 
from the context menu to view details about the process performing the activity.
EXPERIMENT: Using Process Monitor to locate application registry settings
In some troubleshooting scenarios, you might need to determine where in the registry the sys-
tem or an application stores particular settings. This experiment has you use Process Monitor to 
discover the location of Notepad’s settings. Notepad, like most Windows applications, saves user 
preferences—such as word-wrap mode, font and font size, and window position—across execu-
tions. By having Process Monitor watching when Notepad reads or writes its settings, you can 
identify the registry key in which the settings are stored. Here are the steps for doing this:
1.
Have Notepad save a setting you can easily search for in a Process Monitor trace.
You can do this by running Notepad, setting the font to Times New Roman, and then
exiting Notepad.
2.
Run Process Monitor. Open the filter dialog box and the Process Name filter, and type
notepad.exe as the string to match. Confirm by clicking the Add button. This step
specifies that Process Monitor will log only activity by the notepad.exe process.
3.
Run Notepad again, and after it has launched, stop Process Monitor’s event capture by
toggling Capture Events on the Process Monitor File menu.
4.
Scroll to the top line of the resultant log and select it.
EXPERIMENT: Viewing registry activity on an idle system
Because the registry implements the RegNotifyChangeKey function that applications can use 
RegNotifyChangeKey function that applications can use 
RegNotifyChangeKey
to request notification of registry changes without polling for them, when you launch Process 
Monitor on a system that’s idle you should not see repetitive accesses to the same registry keys 
or values. Any such activity identifies a poorly written application that unnecessarily negatively 
affects a system’s overall performance.
Run Process Monitor, make sure that only the Show Registry Activity icon is enabled in the 
Show Registry Activity icon is enabled in the 
Show Registry Activity
toolbar (with the goal to remove noise generated by the File system, network, and processes or 
threads) and, after several seconds, examine the output log to see whether you can spot polling 
behavior. Right-click an output line associated with polling and then choose Process Properties
from the context menu to view details about the process performing the activity.
EXPERIMENT: Using Process Monitor to locate application registry settings
In some troubleshooting scenarios, you might need to determine where in the registry the sys-
tem or an application stores particular settings. This experiment has you use Process Monitor to 
discover the location of Notepad’s settings. Notepad, like most Windows applications, saves user 
preferences—such as word-wrap mode, font and font size, and window position—across execu-
tions. By having Process Monitor watching when Notepad reads or writes its settings, you can 
identify the registry key in which the settings are stored. Here are the steps for doing this:
1.
Have Notepad save a setting you can easily search for in a Process Monitor trace. 
You can do this by running Notepad, setting the font to Times New Roman, and then 
exiting Notepad.
2.
Run Process Monitor. Open the filter dialog box and the Process Name filter, and type 
notepad.exe as the string to match. Confirm by clicking the Add button. This step 
specifies that Process Monitor will log only activity by the notepad.exe process.
3.
Run Notepad again, and after it has launched, stop Process Monitor’s event capture by 
toggling Capture Events on the Process Monitor File menu.
4.
Scroll to the top line of the resultant log and select it.
406 
CHAPTER 10 Management, diagnostics, and tracing
5.
Press Ctrl+F to open a Find dialog box, and search for times new. Process Monitor
should highlight a line like the one shown in the following screen that represents
Notepad reading the font value from the registry. Other operations in the immediate
vicinity should relate to other Notepad settings.
6.
Right-click the highlighted line and click Jump To. Process Monitor starts Regedit (if it’s
not already running) and causes it to navigate to and select the Notepad-referenced
registry value.
Registry internals
This section describes how the configuration manager—the executive subsystem that implements the 
registry—organizes the registry’s on-disk files. We’ll examine how the configuration manager manages 
the registry as applications and other operating system components read and change registry keys and 
values. We’ll also discuss the mechanisms by which the configuration manager tries to ensure that the 
registry is always in a recoverable state, even if the system crashes while the registry is being modified.
Hives
On disk, the registry isn’t simply one large file but rather a set of discrete files called hives. Each hive 
contains a registry tree, which has a key that serves as the root or starting point of the tree. Subkeys 
and their values reside beneath the root. You might think that the root keys displayed by the Registry 
Editor correlate to the root keys in the hives, but such is not the case. Table 10-5 lists registry hives and 
their on-disk file names. The path names of all hives except for user profiles are coded into the con-
figuration manager. As the configuration manager loads hives, including system profiles, it notes each 
hive’s path in the values under the HKLM\SYSTEM\CurrentControlSet\Control\Hivelist subkey, remov-
ing the path if the hive is unloaded. It creates the root keys, linking these hives together to build the 
registry structure you’re familiar with and that the Registry Editor displays.
5.
Press Ctrl+F to open a Find dialog box, and search for times new. Process Monitor 
should highlight a line like the one shown in the following screen that represents 
Notepad reading the font value from the registry. Other operations in the immediate 
vicinity should relate to other Notepad settings.
6.
Right-click the highlighted line and click Jump To. Process Monitor starts Regedit (if it’s 
not already running) and causes it to navigate to and select the Notepad-referenced 
registry value.
CHAPTER 10 Management, diagnostics, and tracing
407
TABLE 10-5 On-disk files corresponding to paths in the registry
Hive Registry Path
Hive File Path
HKEY_LOCAL_MACHINE\BCD00000000
\EFI\Microsoft\Boot
HKEY_LOCAL_MACHINE\COMPONENTS
%SystemRoot%\System32\Config\Components
HKEY_LOCAL_MACHINE\SYSTEM
%SystemRoot%\System32\Config\System
HKEY_LOCAL_MACHINE\SAM
%SystemRoot%\System32\Config\Sam
HKEY_LOCAL_MACHINE\SECURITY
%SystemRoot%\System32\Config\Security
HKEY_LOCAL_MACHINE\SOFTWARE
%SystemRoot%\System32\Config\Software
HKEY_LOCAL_MACHINE\HARDWARE
Volatile hive
\HKEY_LOCAL_MACHINE\WindowsAppLockerCache
%SystemRoot%\System32\AppLocker\AppCache.dat
HKEY_LOCAL_MACHINE\ELAM
%SystemRoot%\System32\Config\Elam
HKEY_USERS\
%SystemRoot%\ServiceProfiles\LocalService\Ntuser.dat
HKEY_USERS\
%SystemRoot%\ServiceProfiles\NetworkService\NtUser.dat
HKEY_USERS\
\Users\\Ntuser.dat
HKEY_USERS\_Classes
\Users\\AppData\Local\Microsoft\Windows\
Usrclass.dat
HKEY_USERS\.DEFAULT
%SystemRoot%\System32\Config\Default
Virtualized HKEY_LOCAL_MACHINE\SOFTWARE
Different paths. Usually 
\ProgramData\Packages\\\
SystemAppData\Helium\Cache\.dat for 
Centennial
Virtualized HKEY_CURRENT_USER
Different paths. Usually 
\ProgramData\Packages\\\
SystemAppData\Helium\User.dat for Centennial
Virtualized HKEY_LOCAL_MACHINE\SOFTWARE\Classes
Different paths. Usually 
\ProgramData\Packages\\\
SystemAppData\Helium\UserClasses.dat for Centennial
You’ll notice that some of the hives listed in Table 10-5 are volatile and don’t have associated files. 
The system creates and manages these hives entirely in memory; the hives are therefore tempo-
rary. The system creates volatile hives every time it boots. An example of a volatile hive is the HKLM\
HARDWARE hive, which stores information about physical devices and the devices’ assigned resources. 
Resource assignment and hardware detection occur every time the system boots, so not storing this 
data on disk is logical. You will also notice that the last three entries in the table represent virtualized 
hives. Starting from Windows 10 Anniversary Update, the NT kernel supports the Virtualized Registry 
(VReg), with the goal to provide support for Centennial packaged applications, which runs in a Helium 
container. Every time the user runs a centennial application (like the modern Skype, for example), the 
system mounts the needed package hives. Centennial applications and the Modern Application Model 
have been extensively discussed in Chapter 8.
408 
CHAPTER 10 Management, diagnostics, and tracing
EXPERIMENT: Manually loading and unloading hives
Regedit has the ability to load hives that you can access through its File menu. This capability can 
be useful in troubleshooting scenarios where you want to view or edit a hive from an unbootable 
system or a backup medium. In this experiment, you’ll use Regedit to load a version of the 
HKLM\SYSTEM hive that Windows Setup creates during the install process.
1.
Hives can be loaded only underneath HKLM or HKU, so open Regedit, select HKLM,
and choose Load Hive from the Regedit File menu.
2.
Navigate to the %SystemRoot%\System32\Config\RegBack directory in the Load Hive
dialog box, select System, and open it. Some newer systems may not have any file in
the RegBack folder. In that case, you can try the same experiment by opening the ELAM
hive located in the Config folder. When prompted, type Test as the name of the key
under which it will load.
3.
Open the newly created HKLM\Test key and explore the contents of the hive.
4.
Open HKLM\SYSTEM\CurrentControlSet\Control\Hivelist and locate the entry
\Registry\Machine\Test, which demonstrates how the configuration manager lists
loaded hives in the Hivelist key.
5.
Select HKLM\Test and then choose Unload Hive from the Regedit File menu to unload
the hive.
Hive size limits
In some cases, hive sizes are limited. For example, Windows places a limit on the size of the 
HKLM\SYSTEM hive. It does so because Winload reads the entire HKLM\SYSTEM hive into physical 
memory near the start of the boot process when virtual memory paging is not enabled. Winload also 
loads Ntoskrnl and boot device drivers into physical memory, so it must constrain the amount of physi-
cal memory assigned to HKLM\SYSTEM. (See Chapter 12 for more information on the role Winload 
plays during the startup process.) On 32-bit systems, Winload allows the hive to be as large as 400 MB 
or half the amount of physical memory on the system, whichever is lower. On x64 systems, the lower 
bound is 2 GB. 
Startup and the registry process
Before Windows 8.1, the NT kernel was using paged pool for storing the content of every loaded hive 
file. Most of the hives loaded in the system remained in memory until the system shutdown (a good 
example is the SOFTWARE hive, which is loaded by the Session Manager after phase 1 of the System 
startup is completed and sometimes could be multiple hundreds of megabytes in size). Paged pool 
memory could be paged out by the balance set manager of the memory manager, if it is not accessed 
for a certain amount of time (see Chapter 5, “Memory management,” in Part 1 for more details). This 
implies that unused parts of a hive do not remain in the working set for a long time. Committed virtual 
EXPERIMENT: Manually loading and unloading hives
Regedit has the ability to load hives that you can access through its File menu. This capability can 
be useful in troubleshooting scenarios where you want to view or edit a hive from an unbootable 
system or a backup medium. In this experiment, you’ll use Regedit to load a version of the 
HKLM\SYSTEM hive that Windows Setup creates during the install process.