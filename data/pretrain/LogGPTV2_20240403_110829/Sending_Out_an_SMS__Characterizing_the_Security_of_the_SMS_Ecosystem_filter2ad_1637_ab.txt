ciently course-grained that no individual user of a gateway
could be identiﬁed through our additional data 5. Geographic
information not already disclosed in text messages was limited
to country-scale records in the case of gateway users and city-
scale in the case of gateway numbers (which in any case do
not likely correlate with the location of the gateway operator).
Overall, our hope is this study would raise awareness of the
risks of sending sensitive information over insecure media and
prevent future harm.
b) Limitations: To the best of our knowledge, this paper
presents an analysis of the largest dataset of SMS published
to date. However, there are some limitations to this data.
First, because the messages are public, many services that use
SMS (like mobile banking) are likely underrepresented in our
dataset. For this reason, it is likely that our ﬁndings about
sensitive data appearing in SMS are likely underestimated.
Second, because gateways change their phone numbers with
regularity, it is unlikely that long-term accounts can be suc-
cessfully created and maintained using these numbers, which
may bias the number of services we observe in our dataset.
Accordingly,
those users are unlikely to enable additional
4Except perhaps by the gateway itself; however, it is clear from our data
that gateways are not taking steps to prevent PII exposure
5The one exception to this was an individual whose information was used
(likely without his/her knowledge) to register a domain used in a phishing
scam. This information was discovered after a routine WHOIS lookup after
discovering the phishing domain.
security services like mobile two-factor authentication (2FA)
using one-time passwords (OTP), further limiting our visibility
to a wider range of services. These limitations mean that
the overall distributions that we report may not generalize to
broader populations. Nevertheless, we believe that this work
provides useful conclusions for the security community.
B. Crawling Public Gateways
To gather messages from gateways, we developed a web
crawler using the Scrapy [19] framework. Every 15 minutes,
our crawler connected to each gateway, obtained new mes-
sages, and stored these in a database. We faced two challenges
to accurately recording messages: ignoring previously crawled
messages and recovering message received times.
Ignoring previously crawled messages was difﬁcult because
gateways display the same messages for a considerable amount
of time (days, months, or even years). A consequence of this
is that our dataset contains messages that gateways received
before our data collection began. In order to prevent storing
the same messages repeatedly (and thus skewing the results),
we discard previously crawled messages upon arrival by com-
paring the hash of a concatenation of the sender and receiver
MSISDNs and the message content against hashes already in
the database. If a match is found, the message sent times are
compared to ensure that they were the same instance of that
message, ensuring that messages that were repeatedly sent are
still included in the data.
Message times required ﬁnesse to manage because gateways
report a relative time since the message was received (e.g.,
“3 hours ago”) instead of an ideal ISO-8601 timestamp [69].
Parsing these timestamps is fairly simple, but care must
be taken when doing comparisons using these times as the
precision can vary (“3 minutes” vs. “3 days”). To ensure
accuracy, we store and take into account the precision of every
timestamp when comparing message timestamps.
C. Additional Data Sources and Analyses
1) Phone Number Analysis: After the scrapers pull the
initial data from the gateways, the data is augmented with
data from two outside sources. The ﬁrst service, Twilio [22],
provides a RESTful service that provides mobile, VoIP, and
landline number look ups. Twilio resolves the number’s coun-
try of origin, national number format for that country, and
the number’s carrier. Carrier information includes the carrier’s
name, the number’s type, and the mobile network and country
codes. Twilio is accurate and appropriately handles issues like
number porting, which could cause inconsistencies in our data
if incorrect.
The second service, OpenCNAM [12], provides caller iden-
tity information for North American numbers. This database
contains a mapping of phone numbers and strings; carriers
consult this database to provide Caller ID information when
connecting a call. Therefore, OpenCNAM is also the most
accurate public location to obtain identity information for
North American numbers.
342342
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:22 UTC from IEEE Xplore.  Restrictions apply. 
We obtained data from both Twilio and OpenCNAM for all
the numbers that were hosted on the gateways as well as a
subset of the numbers that contacted the hosted numbers.
2) URL Analysis: We extracted 20,793 URLs from mes-
sages by matching URL regular expressions with each message
in the dataset. Overall, there were 848 unique second-level
domains and 1,055 unique base URLs (fully-qualiﬁed domain
names and IP addresses) in this set. For each of these domains,
we obtained domain registration data. A domain’s WHOIS
registration data contains useful metadata about the history
of a domain, including its creation date. Since this data is
distributed among registrars, it is not always available and
some ﬁelds may be restricted. We were able to obtain complete
registration data for 532 of the second-level domains in our
set.
Due to the limited length of an SMS message, shortened
URLs are often sent in these messages. The short URL is
a hop between the user and the destination, allowing URL
shortening services to collect data about the users following
the links. For each Bitly- and Google-shortened URL, we
obtained statistics (e.g., number of clicks) when possible. The
SMS gateway services do not publish data on their users,
so this data represents one of the best
insights into user
demographics in our dataset.
Finally, since these gateways freely accept and publicly post
SMS messages, the gateways represent an easy mechanism for
delivering malicious messages including phishing or malicious
URLs. VirusTotal [82] can provide valuable insight into the
maliciousness of a given URL. We requested scans of each of
the URLs via VirusTotal and collected the scan reports. If a
URL had a previously-requested scan, we collected the cached
scan and did not rescan the URL. Due to the short lifetimes
of some malicious domains, we anticipated earlier scan results
would be more accurate. For each product that VirusTotal uses
to scan the URL, it reports whether or not the product alerted
and if so, the category of detection.
Information
3) Personally-Identifying
Analysis: We
searched the messages for personally-identifying information
(PII) [58] using regular expressions. In particular, we searched
for major credit card account numbers (e.g., Visa, Mastercard,
American Express, Discover, JCB, and Diners Club). For
each match, we further veriﬁed these numbers using the Luhn
algorithm [57]. This algorithm performs a checksum and can
detect small input errors in an account number. This checksum
is built into all major credit card account numbers and can
also assist in distinguishing a 16-digit Visa account number
from a 16-digit purchase order number, for example. This
check is rudimentary, however, and we manually veriﬁed the
remaining matches to verify that they contextually appeared
to be account numbers (i.e., the messages containing these
numbers appeared to reference an account number).
United Kingdom. We found no valid matches in our data.
D. Message Clustering
A major goal of this study is to determine what types
of messages are sent via SMS and how service providers
are using SMS. While there are available machine learning
techniques for this type of analysis and clustering (e.g., topic
discovery and text clustering), scalability is a major problem
when dealing with the large number of messages in our dataset.
Accordingly, we explore other methods as described below.
Keyword Analysis. As a ﬁrst attempt, we automatically
labeled messages in the dataset using searches in multiple
languages for keywords such as “password,” “email,” and
“veriﬁcation.” We found that these keywords are often over-
loaded and insufﬁcient for successfully separating the data. For
example, Talk2 [21] uses “veriﬁcation code” for the purpose of
new account creation, while SMSGlobal [20] uses “veriﬁcation
code” for one-time passwords. Adding further complication,
LiqPay [8] uses “password” for one-time passwords.
Furthermore, we identiﬁed messages that referenced our
keywords without containing any obvious authentication data.
These messages are often informative messages about
the
keywords (e.g., “Do not disclose your password.”). Conversely,
some messages containing sensitive information did not in-
clude keywords. Ultimately, the outcome of this experiment
was unsuccessful,
labeling
approach.
Clustering Analysis. Through further analysis, we discovered
that many messages from the same service provider share the
same pattern. We manually reviewed messages and grouped
similar messages together into “clusters”6.
leading us to adopt a manual
The essence of our clustering algorithm is distance-based
clustering [42]. However, we wanted a high-accuracy clus-
tering algorithm with minimal and easily estimated tuning
parameters, ruling out k-means. We attempted to use an edit-
distance metric to group similar messages into a connected
graph (where edges are created between similar messages),
but a pairwise algorithm exceeded the time and hardware
available to the project. Instead, we noted that the messages we
were interested in were virtually identical, apart from known
common variable strings like codes or email addresses. By
replacing these with ﬁxed values, a simple lexical sort would
group common messages together. We then identiﬁed cluster
boundaries by ﬁnding where the normalized edit distance
was lower than a threshold (0.9) between two consecutive
sorted messages. Our threshold was was empirically selected
to conservatively yield correct clusters, and we were able
to cluster all 386,327 messages in a few minutes with high
accuracy.
A more explicit statement of this process follows:
1) Load all messages.
2) Preprocess messages by replacing numbers, emails and
URLs with ﬁxed strings.
6Our deﬁnition of this term should not be confused with the classic machine
learning deﬁnition of “clustering.”
Furthermore, we also checked strings of numbers to de-
termine if they were identiﬁcation numbers such as US So-
cial Security Numbers or national identiﬁers from Austria,
Bulgaria, Canada, China, Croatia, Denmark, Finland, India,
Italy, Norway, Romania, South Korea, Sweden, Taiwan, or the
343343
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:22 UTC from IEEE Xplore.  Restrictions apply. 
3) Alphabetically sort preprocessed messages.
4) Separate messages into clusters by using an edit distance
threshold to ﬁnd dissimilar consecutive messages.
5) Manually inspect each cluster to label service providers,
message types, etc. In this step, we culled clusters that
had < 43 messages7.
Preprocessing is perhaps the most important step, because
it allows us to avoid aligning messages from different service
providers together. When using naive sorting on the original
messages, the sorting places together messages from various
services that start with a veriﬁcation code. We avoid this
problem by replacing variable content with a ﬁxed string,
causing the ﬁnal sort order to be related to the non-variable
content of the messages. Unlike traditional machine learning
methods, our sorting-based clustering method is fast (minutes
for our dataset).
After clustering, we manually labeled each cluster, a time-
consuming process which allowed us to both verify the correct-
ness of the cluster generation, and guarantees correct labels.
It is difﬁcult to determine the intent of the message when
the message contains little context (e.g. “X is your Google
veriﬁcation code.”). For the most common 100 services, we
attempted to identify message intentions using those services’
public documentation. Where this information was unavail-
able, we attempted to register accounts with the services to
obtain messages and match these to our clusters. If we were
still unable to determine the message type, we classiﬁed these
with a generic label. We also deﬁne and apply labels based
on the overall content of the message, including content such
as PII or any sensitive, security-related information.
E. Message Intentions
Due to the lack of standardized terms for the intentions of
the authentication and veriﬁcation values sent via SMS, we
divided the various message intentions into categories in this
section. In this paper, we use code to describe the value
extracted from any message sent to a user for any of the
below intentions. To our knowledge, there is no authoritative
source for these intentions, despite their popularity. More than
261,000 (67.6%) of the messages contain a code, and the
following categories enabled us to more accurately cluster our
messages:
• Account Creation Veriﬁcation: The message provides a
code to a user from a service provider that requires a
SMS veriﬁcation during a new account creation.
• Activity Conﬁrmation: The message provides a code
to a user from a service provider asking for authorization
for an activity (e.g., payment conﬁrmation).
• One-Time Password: The message contains a code for
a user login.
• One-Time Password for Binding Different Devices:
The message is sent to a user to bind an existing account
7We initially planned on labeling only clusters with more than 50 messages,
but our labelling process resulted in more labeled clusters than expected.
344344
Country
United States
Canada
Germany
United Kingdom
Poland
Sweden
Spain
France
Russian Federation
Norway
Mexico
Romania
Australia
Belgium
India
Ukraine
Italy
Thailand
Hong Kong
Israel
Switzerland
Finland
Lithuania
Estonia
Ireland
Austria
Denmark
Czech Republic
Belgium
Message Count
95138
77036
53497
44039
16103
14849
11323
8273
7344
6674
6431
6043
5964
5253
5064
4363
4326
4073
3251
1971
1722
1714
520
405
331
158
54
6
-
Number Count
98
55
46
75
15
22
11
10
-
8
5
6
13
3
2
3
3
5
7
5
3
13
1
1
3
2
1
2
3
TABLE II: This table of gateway messages and numbers by
country shows that gateways have an international presence,
with most message volume taking place in North America and
Western Europe. The message count represents the number of
messages sent to numbers in each country.
with a new phone number or to enable the corresponding
mobile application.
• Password Reset: The message contains a code for
account password reset.
• Generic: We use this category for any codes to which
we are unable to assign a more speciﬁc intent.
IV. DATA CHARACTERIZATION
In this section, we provide high-level information about our
collected data. The dataset includes data from 8 gateways over
14 months. Overall, our dataset includes 386,327 messages
sent from 421 phone numbers from 52 known carriers in 28
countries. Table II shows the message count for gateway phone
numbers alongside the total number of gateway numbers by
country.
1) Gateways and Messages: Table I shows the eight gate-
ways we scraped, the number of messages from each, and
the number of unique phone numbers hosted at each service
during the collection time. The number of messages received
by each gateway ranged from 7,107 to 69,389. The number of
hosted numbers per service ranged from 14 to 93.
2) Infrastructure: We obtained detailed data from Twilio
about the phone numbers in our dataset, as shown in Table III.
Twilio identiﬁed 52 carriers, of which 46 are mobile, 3 are
VoIP, and three are labeled as landline carriers. We believe that
the numbers seen from these “landline” carriers are simply
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:13:22 UTC from IEEE Xplore.  Restrictions apply. 