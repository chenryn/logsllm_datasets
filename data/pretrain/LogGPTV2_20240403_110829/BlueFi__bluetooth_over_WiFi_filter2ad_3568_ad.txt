AR9331, it consumes a tiny amount of the CPU and the memory
(0% of the CPU and 1% of the virtual memory), which most likely
contributes to the reduction in throughput. This slight reduction in
482
020406080100120Time (s)-80-60-40-200RSSI (dBm)Pixel, NearS6, NeariPhone, NearPixel, CloseS6, CloseiPhone, ClosePixel, FarS6, FariPhone, Far020406080100120Time (s)-80-60-40-200RSSI (dBm)Pixel, NearS6, NeariPhone, NearPixel, CloseS6, CloseiPhone, ClosePixel, FarS6, FariPhone, Far0457891011121314151617181920Transmit Power (dBm)-90-80-70-60-50-40RSSI (dBm)0457891011121314151617181920Transmit Power (dBm)-90-80-70-60-50-40RSSI (dBm)0457891011121314151617181920Transmit Power (dBm)-90-80-70-60-50-40RSSI (dBm)Pixel->S6Pixel->iPhoneS6->PixelS6->iPhone-100-90-80-70-60-50-40RSSI (dBm)Bluetooth DisabledBlueFiPixelS6Transmitter40455055Bitrate (MBps)020406080100120Time (s)-80-60-40-200RSSI (dBm)PixelS6iPhoneSIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
We run BlueFi locally on an i5-3210M laptop and transmit pack-
ets using RTL8811AU. We test BlueFi with Sony SBH20 Bluetooth
headphones and also quantitatively measure the performance using
FTS4BT [21] from Frontline, a standard tool used by industry lead-
ers like CSR and Broadcom. Note that the tool uses CSR’s widely-
adopted BlueCore chips as the underlying hardware, and hence the
results are representative of reception using off-the-shelf Bluetooth
chips. We report the FTS4BT’s PER and throughput measurements.
Due to nulls and pilots, the performance of transmission on
each Bluetooth channel is different within a single WiFi channel.
For example, Fig. 9 shows the packet error rate (PER) reported by
FTS4BT of BlueFi transmitting single-slot packets on 10 different
channels. PER is shown to be as low as 1.9% on good channels
whereas it is much higher for channels adjacent to WiFi pilots. The
measured throughput for the upper layer is 37.5kbps, since single-
slot packets have significant overhead and we only use half of the
channels. Note that Bluetooth’s frequency hopping algorithm does
not guarantee uniform assignment from time slots to channels.
The throughput and goodput are increased vastly by using multi-
slot packets, which incur much less overhead. More importantly,
since the frequency will remain the same for multiple slots, we
effectively cover nearly 2x or 3x the number of time slots with the
same number of Bluetooth channels.
To keep PER low for multi-slot packets, we select 3 best channels
to transmit audio packets. We re-route PulseAudio and send A2DP
audio streams to BlueFi, which then allocates a time slot and cal-
culates its hopping frequency. If it matches the channels we use,
BlueFi additionally allocates 4 subsequent time slots for an audio
packet. The clock value of the allocated slots is used to convert the
audio stream, which is a standard L2CAP stream, into Bluetooth
GFSK bits. L2CAP is a universal layer on which almost all Bluetooth
apps rely. With these bits and a desired frequency offset, BlueFi
then performs various signal processing tasks and generates a WiFi
packet. The packet is marked with the clock value and sent to the
driver. Inside the driver, we construct a high-resolution timer to
schedule the packet to be transmitted at the precise instant specified
by its clock value.
We are able to use BlueFi to stream real-time stereo audio to
Sony SBH20 Bluetooth headphones. In addition, we use FTS4BT to
measure the throughput and PER. We did not modify the Bluetooth
headphones in any way. Without any firmware modification, a
connection token is needed in order for the headphones to accept
incoming audio data, and we first create the token by making a
connection with Bluetooth hardware. Once the connection token is
created, BlueFi can stream audio on its own. Fig. 10 shows the PER
when streaming audio. Longer packets increase PER. The overall
PER is 23% and the upper-layer throughput is measured at 122.5kbps,
corresponding to a goodput of 93.4kbps. Throughput and goodput
can be increased, at the expense of higher PER, by filling unoccupied
time slots with single- or multi-slot packets. Conversely, PER can
be drastically decreased by using fewer channels or shorter packets.
We leave further optimizations as future work.
We use the SBC (sub-band coding) codec as it is the mandatory
and the only codec supported by Sony SBH20. Advanced codec
shouldn’t cause any difficulty working with BlueFi since BlueFi,
like any other BT radio and PHY, is only responsible for sending
throughput may be a worthy trade-off for WiFi infrastructures to
support various Bluetooth apps.
Background WiFi traffic has little effect on BlueFi packets. As
Fig. 7c shows, all phones can still steadily receive Bluetooth packets
even when we saturate the WiFi channel. The WiFi traffic only
causes the Pixel’s RSSI to fluctuate by a small amount. As usual, the
power-saving mechanism causes anomalies in the iPhone’s trace
near the end.
4.6 Effect of Each Impairment
To see the effect of the impairment caused by each block in a WiFi
transmitter, we generate various waveforms and transmit them
using USRP.
In Fig. 8, we generate a standard FSK waveform as the baseline
and cumulatively apply each impairment in each column. The last
column represents sending a complete 802.11n PSDU. As the figure
shows, each impairment degrades signal quality by approximately
1dB and the overall degradation is around 2dB. Note that BlueFi
reverses the WiFi operation block-by-block and does not aim to
globally optimize the process. Therefore, some bit-flips, caused by
adding the FEC and the header, may slightly enhance the signal
quality.
4.7 Bluetooth Audio
Other apps can also use BlueFi as their Bluetooth physical and
link layers. We demonstrate this by building an audio transmitter
with A2DP. For general apps, Bluetooth devices transmit packets at
the start of predetermined time slots and hops to different frequen-
cies for different time slots. Therefore, BlueFi must follow a strict
frequency hopping sequence and transmit the generated packets
within the targeted time slot.
On the other hand, WiFi hardware has a few limitations, making
it harder to follow the frequency hopping sequence. Bluetooth
hops to a different frequency every 1.25ms and WiFi chips are not
designed to constantly hop at such a pace. Also, Bluetooth hops
randomly across 79 channels, spanning 79MHz, which is much
larger than the bandwidth of a single 802.11n channel. Finally, the
process of generating Bluetooth GFSK bits from a higher-layer
payload depends on the Bluetooth clock value in the transmission
time slot. Thus, packets need to be generated shortly before the
transmission and then released precisely at the desired time slot.
We use several strategies to overcome these limitations. Instead
of constantly changing the physical WiFi channels, we only use a
single WiFi channel and implement frequency hopping by using
different subcarriers within a WiFi channel. Since one WiFi channel
only has a bandwidth of 20MHz, it cannot cover the 79-channel
hopping sequence. We solve this by using Bluetooth’s adaptive
frequency hopping (AFH) feature to only use the 20 channels corre-
sponding to the single WiFi channel we select. AFH simply remaps
the channel outside of these channels to one of the 20 channels
and has no effect on the theoretical throughput. AFH is available
on all Bluetooth devices we tested. BlueFi thus covers all types of
Bluetooth channels, since data channels can be specified with AFH
and one advertisement channel is well-covered by WiFi channel 3.
Finally, we use the high-resolution timer [20] in the Linux kernel
to precisely schedule the transmission of each BlueFi packet.
483
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
Hsun-Wei Cho and Kang G. Shin
(a) Pixel
(b) S6
(c) iPhone
Figure 8: Effect of each impairment
Figure 9: PER with single-slot packets
the FEC decoder. The Viterbi algorithm uses dynamic programming
and has a pseudo-polynomial runtime of O(Tn2) where T is the
length of a sequence and n is the number of states. The relatively
long runtime when applying the algorithm is the result of long
sequences and a high (64) number of states.
By replacing the Viterbi algorithm with our real-time decoder
(with a complexity of O(T)) and by using the FFTW [22] library,
the execution time of BlueFi can be reduced by approximately
another 50x. On an old (Ivy Bridge) i5 laptop, the execution time
is around 0.954ms (with the standard deviation of 0.122ms), which
is less than the minimal interval (1.25ms) of two consecutive Blue-
tooth packets. Therefore, BlueFi can run in real time and the delay
incurred is around 0.954ms. The timeliness is important since Blue-
tooth payloads are scrambled with the clock value at the time of
transmission and real-time generation greatly simplifies the design.
More importantly, the throughput is not limited by the computation.
We expect the execution time to be even lower if newer hardware,
SIMD, hardware acceleration or multithreading is used.
For applications where devices use wall power, such as APs and
desktops, the power consumption is less of a concern. For mobile
devices, instead of processing the signals locally, edge or cloud
servers can be used to offload the computation. When run locally,
the signal processing draws moderate power. Using PowerTOP [23],
we measure the power consumption of continuously generating
BlueFi packets for every possible Bluetooth time slot in real time
on an i5-1135g7 laptop. The steady-state power consumption is
1.11W, which represents the case of maximum throughput (100%
duty cycle). This power consumption scales proportionally with
the duty cycle.
Figure 10: PER with 5-slot packets (audio)
1’s and 0’s and upper layers are oblivious to how the radio and PHY
are actually implemented.
4.8 Execution Time and Complexity
Our first prototype uses Python and generating a single packet
using Python takes around 2.60s, which includes IQ generation
(0.01s), FFT and QAM (0.18s), FEC decoder (2.39s), scrambler (<0.01s)
and file operation (0.01s). We drastically improved the runtime by
porting BlueFi to C. The C version produces identical outputs as
the Python prototype and generating a single packet takes 46.88ms,
more than 55x faster. Almost 100% of the execution time is spent on
5 DISCUSSION
5.1 Different 802.11 Generations
Although supporting 2.4GHz band is not strictly required for 802.11ac,
we found that most 802.11ac devices do support the dual band
operation since operating at only the 5GHz band makes the de-
vice incompatible with 802.11b, g and 2.4GHz 802.11n devices.
802.11ac supports 256-QAM and some chips even support 1024-
QAM. Higher-order modulation means higher resolution in the
frequency domain, and therefore we expect less quantization error
in the QAM process. In 802.11ax, 1024-QAM becomes mandatory.
New modes in 802.11ax use longer guard intervals, and thus they
are not particularly useful to BlueFi.
484
Baseline+CP+QAM+Pilot/Null+FEC+HeaderImpairments-69-68-67-66-65-64-63RSSI (dBm)Baseline+CP+QAM+Pilot/Null+FEC+HeaderImpairments-82-80-78-76-74RSSI (dBm)Baseline+CP+QAM+Pilot/Null+FEC+HeaderImpairments-95-90-85-80-75-70-65RSSI (dBm)49.1%30.9%7.7%63.3%1.9%9.7%41.7%4.3%31.9%21.7%256791113141518Bluetooth Channel Index020406080Number of PacketsCRC ErrorHeader ErrorNo Error12.7%20.2%37.2%6914Bluetooth Channel Index0100200300400500600Number of PacketsCRC ErrorHeader ErrorNo ErrorIt is possible to modify BlueFi so as to work on 802.11g, the
predecessor of 802.11n, hardware as they are very similar. Both
standards use OFDM and the maximum allowable PSDU length
for 802.11a/g is 4,095 bytes, which is still sufficient for containing
Bluetooth packets. However, the main challenge is that we cannot
use SGI. We found a way to solve the CP insertion problem and the
signal can be picked up by Bluetooth receivers, but the performance
is spotty. Since 802.11g was standardized nearly 20 years ago, we
feel that it is too old and most existing WiFi hardware uses newer
standards, such as 802.11n/ac/ax. Therefore, we opted not to support
802.11g hardware.
5.2 Fine-grain Cooperation and Scheduling
BlueFi enables the possibility of fine-grain cooperation and sched-
uling between WiFi and Bluetooth. Previously, the solutions for
Bluetooth and WiFi coexistence were complex. For example, we
found that the codes in the RTL8811AU driver for dealing with
Bluetooth coexistence are nearly 6000 lines long. By converging
two standards on one hardware, BlueFi simplifies the coexistence
problem by eliminating the inter-chip messaging and delay. We
also note that conventional WiFi and Bluetooth cooperation works
by disabling WiFi during Bluetooth transmission. Therefore, from
the transmitter’s perspective, using BlueFi does not sacrifice the
amount of information transmitted over the air within the same
amount of time, since the standard cooperation mechanism already
forgoes the whole WiFi spectrum during Bluetooth transmission.
In the current implementation, BlueFi packets are assigned to
queues just like typical WiFi packets. It is possible to further opti-
mize the priority assignments of both WiFi and Bluetooth packets
so that time-sensitive packets, such as audio data, are given priority
regardless of whether they are sent over WiFi or Bluetooth.
5.3 Remarks/Observations
BlueFi realizes Bluetooth’s radio and physical layers (radio, “base-
band” and link control in Bluetooth’s terminology), on which all
apps and profiles are built, and more. These layers transmit a series
of 1’s and 0’s and are oblivious of the content these bits repre-
sent. Therefore, any app or profile can use BlueFi for Bluetooth
transmission. As our first work exploring Bluetooth and WiFi com-
munication, we focused on transmission. Note that transmission
alone is still very useful in many cases. For example, signal recep-
tion is totally unnecessary for beacons. Also, when using A2DP to
stream audio, the uplink traffic is only for sending ACK packets
and is not critical to the audio operation. Furthermore, the nature
of audio streaming makes ARQ less useful. For example, for very
low latency audio, retransmitted packets will miss the deadline.
In addition, excessive retransmissions not only increase latency
but also decrease usable throughput or goodput. We also note that
regulatory certification is not needed for receivers. Therefore, it is
possible to use BlueFi in conjunction with a dedicated receiving
chip to realize full Bluetooth function without the need for reg-
ulatory certification. We leave the reception function (WiFi over
Bluetooth) as future work.
Some Bluetooth chips are capable of supporting optional mod-
ulation modes other than GFSK, and thus increase throughput by
up to 3x. It is also possible to use 40MHz WiFi channels to support
SIGCOMM ’21, August 23–28, 2021, Virtual Event, USA
2x the number of Bluetooth channels and increase throughput. We
leave these two directions as future work.
6 RELATED WORK
Shadow Wi-Fi [24] allows Broadcom’s 802.11ac chips to transmit
arbitrary waveforms. However, its method is vendor-specific, non-
real-time and would need hardware recertification. Several cross-
technology communication (CTC) systems [25–28] modulate the
power of a transmitter and a receiver senses the amplitude to re-
cover embedded information. The use of this basic modulation leads
to very low bit rates (all of which are less than 700bps) and requires
modifications on both ends.
OfdmFi [13, 29, 30] enables the transmission of LTE-U waveforms
using WiFi’s OFDM hardware. Unfortunately, it is not applicable
to Bluetooth since LTE uses OFDM whereas Bluetooth uses GFSK,
which is completely different from OFDM. ULTRON [31] emulates
WiFi CTS frames using LTE-U waveforms. Interscatter [32] uses
WiFi to transmit amplitude-modulated waveforms for RFID com-
munication. WEBee [33] enables WiFi-to-Zigbee communication.
As described in Sec. 3.1.3 in [33], it relies on the error correction
from Zigbee’s direct sequence spread spectrum, which is not avail-
able on any Bluetooth systems. Bluetooth also has 4x higher bit
rates, making it more challenging. Zigbee uses PSK and Bluetooth
requires a completely different waveform and symbol boundary
design. WEBee requires hundreds of big (288×216) matrix inver-
sions for every Zigbee packet, which is computationally expensive.
Timeliness is important for BT data transmission since its wave-
form is time-variant, even for the same payload. Bluetooth uses
time slots and frequency hopping, a communication pattern very
different from Zigbee’s. Finally, Bluetooth is much more widely
deployed and covers unique apps, such as location beacons and