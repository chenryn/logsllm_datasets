The majority of the unique code in our `RESTStorage` implementations is dedicated to populating default values and validating objects before they are persisted. In contrast, approximately 99% of the code is common across all resource types and could be generalized. When examining our tests, we find that most of our `rest_test.go` files primarily ensure that validation occurs before create or update operations. This leads to a significant amount of duplicated effort, which could be mitigated by requiring that the framework calling `RESTStorage` ensures the object's validity.

I propose that the `resthandler.go` logic enforce the following: before invoking `RESTStorage`'s Create and Update operations, it should call a validation function, such as the one defined below:

```go
type Validator interface {
    // ValidateCreate populates default values on the object and ensures its validity for persistence.
    ValidateCreate(ctx api.Context, obj runtime.Object) error

    // ValidateUpdate validates the new object, copies required values from the old object, and ensures its validity for persistence.
    ValidateUpdate(ctx api.Context, newObj runtime.Object, oldObj runtime.Object) error
}
```

Additionally, as we look to the future, there are several other concepts I would like `resthandler.go` to enforce uniformly across all resources, without adding more boilerplate code to each `RESTStorage` implementation. Specifically, I do not want to invoke any admission control logic for invalid input, but I also do not want to modify each `RESTStorage` implementation to explicitly call out to perform admission control, as this would only increase the amount of boilerplate code.

By implementing these changes, we can streamline our `RESTStorage` implementations, reduce redundancy, and ensure consistent validation and default value population across all resources.