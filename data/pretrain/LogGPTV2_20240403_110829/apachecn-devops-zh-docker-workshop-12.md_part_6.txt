    ```
2.  命令行应用只需要 Python 3 来运行，但是您需要确保首先安装所有的依赖项，因此请转到您刚刚克隆的存储库的`dcvalidator`目录:
    ```
    cd dcvalidator
    ```
3.  安装`dcvalidator`的依赖项很容易，你的系统很可能已经安装了大部分依赖项。要安装依赖项，使用`-r`选项从`dcvalidator`目录运行`pip3 install`命令，以使用服务器目录中的`requirments.txt`文件:
    ```
    pip3 install -r server/requirments.txt
    ```
4.  从头开始创建一个`docker-compose`文件，该文件将使用您在本章中已经创建的一些映像。使用`touch`命令创建`docker-compose.yml`文件:
    ```
    touch docker-compose.yml
    ```
5.  打开你喜欢的文本编辑器编辑`docker-compose`文件。确保您还包括我们特意添加到文件中的错误，以确保`dcvalidator`拾取这些错误，我们将使用本章前面创建的`docker-stress`映像。请务必逐字复制此文件，因为我们试图确保我们在`docker-compose.yml`文件中强制出现一些错误:
    ```
    version: '3'
    services:
      app:
        container_name: docker-stress-20
        build: .
        environment:
          var: "--cpu 2 --vm 6 --timeout 20"
        ports:
          - 80:8080
          - 80:8080
        dns: 8.8.8
        deploy:
          resources:
            limits:
              cpus: '0.50'
              memory: 50M
      app2:
        container_name: docker-stress-30
        build: .
        environment:
          var: "--cpu 2 --vm 6 --timeout 30"
        dxeploy:
          resources:
            limits:
              cpus: '0.50'
              memory: 50M
    ```
6.  Run the `validator-cli.py` script with the `-f` option to parse the specific file we want to validate – in the following command line, the `docker-compose.yml` file. The `-fi` option then allows you to specify the filters available to validate over our `compose` file. In the following code, we are using all the filters available at this point for `validator-cli`:
    ```
    python3 validator-cli.py -f docker-compose.yml -fi 'Duplicate Keys,Duplicate ports,Typing mistakes,DNS,Duplicate expose'
    ```
    您应该得到如下输出:
    ```
    Warning: no kafka support
    loading compose files....
    checking consistency...
    syntax is ok
    = type: docker-compose
    - service:app
    Duplicate ports in service app port 80
    =================== ERROR ===================
    Under service: app
    The DNS is not appropriate!
    =============================================
    - service:app2
    =================== ERROR ===================
    I can not find 'dxeploy' tag under 'app2' service. 
    Maybe you can use: 
    deploy
    =============================================
    services: 2
    labels:
    time: 0.0s
    ```
    不出所料，`validator-cli.py`发现了不少错误。它显示您的应用服务中分配了重复的端口，并且您设置的域名系统也不正确。`App2`显示了一些拼写错误，并建议我们可以使用不同的值来代替。
    注意
    此时，您需要指定您希望您的`docker-compose.yml`文件验证的过滤器，但是这将随着即将到来的版本而改变。
7.  You'll remember that we used a `docker-compose` file to install the Anchore image scanner. When you have the URL location of the `compose` file, use the `-u` option to pass the URL for the file to be validated. In this instance, it is on the Packt GitHub account:
    ```
    python3 validator-cli.py -u https://github.com/PacktWorkshops/The-Docker-Workshop/blob/master/Chapter11/Exercise11.03/docker-compose.yaml -fi 'Duplicate Keys,Duplicate ports,Typing mistakes,DNS,Duplicate expose'
    ```
    从下面的代码块中可以看出，`dcvalidator`在`docker-compose.yml`文件中没有发现任何错误:
    ```
    Warning: no kafka support
    discard cache...
    loading compose files....
    checking consistency...
    syntax is ok
    = type: docker-compose=
    - service:engine-api
    - service:engine-catalog
    - service:engine-simpleq
    - service:engine-policy-engine
    - service:engine-analyzer
    - service:anchore-db
    services: 6
    labels:
    time: 0.6s
    ```
如您所见，Docker Compose 验证器相当基本，但它可以在我们的`docker-compose.yml`文件中拾取一些我们可能遗漏的错误。如果我们有一个更大的文件，情况尤其如此；在尝试部署环境之前，我们可能会遗漏一些小错误。这就结束了这一章的这一部分，我们一直在使用一些自动化的过程和应用来验证和清理我们的`Dockerfiles`和`docker-compose.yml`文件。
现在，让我们继续进行活动，这将有助于测试您对本章的理解。在下面的活动中，您将查看全景徒步应用上运行的服务之一所使用的资源。
## 活动 12.01:查看全景徒步应用使用的资源
在本章的前面，我们研究了运行中的容器如何消耗主机系统上的资源。在本练习中，您将选择全景徒步应用上运行的服务之一，以其默认配置运行容器，并查看它使用的 CPU 和内存资源。然后，在更改 CPU 和内存配置的情况下再次运行容器，看看这对资源使用有何影响:
完成本活动所需的一般步骤如下:
1.  在全景徒步应用中选择您想要测试的服务。
2.  创建一组测试，您可以使用这些测试来测量服务的资源使用情况。
3.  启动您的服务，并使用您在上一步中创建的测试来监控资源使用情况。
4.  停止您的服务运行，然后再次运行它，这次是更改 CPU 和内存配置。
5.  Monitor the resource usage again using the tests you created in *step 2* and compare the changes in resource usage.
    注意
    此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor350)找到。
下一个活动将帮助您在`Dockerfiles`上使用`hadolint`来改进最佳实践。
## Ac 活动 12.02:使用 hadolint 改进文档的最佳实践
`hadolint`提供了一种在创建 Docker 映像时实现最佳实践的好方法。在本活动中，您将再次使用`docker-stress`映像中的`Dockerfile`来查看是否可以使用`hadolint`的建议来改进`Dockerfile`，使其尽可能符合最佳实践。
完成本活动所需的步骤如下:
1.  确保您有可用的`hadolint`映像并在您的系统上运行。
2.  在`docker-stress`映像的`Dockerfile`上运行`hadolint`映像并记录结果。
3.  对上一步中的`Dockerfile`进行建议的更改。
4.  再次测试`Dockerfile`。
成功完成活动后，您应该会得到以下输出:
![Figure 12.3: Expected output of Activity 12.02 ](img/B15021_12_03.jpg)
图 12.3:活动 12.02 的预期产出
不是 e
此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor351)找到。
# 总结
这一章我们已经经历了很多理论以及一些关于练习的深入工作。我们从查看我们运行的 Docker 容器如何利用主机系统的 CPU、内存和磁盘资源开始这一章。我们研究了如何监控容器如何消耗这些资源，以及如何配置正在运行的容器以减少使用的资源数量。
然后，我们查看了 Docker 最佳实践，研究了许多不同的主题，包括利用基础映像、安装程序和清理、开发可伸缩性的底层应用以及配置应用和映像。然后我们引入了一些工具来帮助您实现这些最佳实践，包括`hadolint`和`FROM:latest`来帮助您清理您的`Dockerfiles`，以及`dcvalidator`来检查您的`docker-compose.yml`文件。
下一章将我们的监控技能提升到另一个层次，我们将介绍如何使用 Prometheus 来监控我们的容器指标和资源。