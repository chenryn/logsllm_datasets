17Obviously, parties could cooperate and maintain a faster store of double
spend tags, alleviating this problem.
(a) Times for operations measured in seconds.
These operations do not include the time
required to compute the accumulator.
(b) Library show proof sizes measured in bytes
as a function of RSA modulus size.
(c) Multithreaded library performance as a
function of parameter size.
Fig. 4: Library performance as a function of parameter size.
in seconds via wall clock run time and were repeated for 500
iterations. Because of the speed of accumulating elements, we
measure accumulator time in seconds per 100 accumulations.
The primary performance bottleneck for our library is the
complexity of the proof of knowledge generated during the
credential show. Because this double discrete logarithm proof
uses cut-and-choose techniques, we need to perform between
80 and 128 iterations depending on the security parameter. This
entails approximately 800-1000 exponentiations. Luckily, the
same cryptographic requirements that force these iterations also
mandate that such computations are independent and hence
they can easily be parallelized. To exploit this, we make use
of OpenMP to parallelize proof generation and veriﬁcation. As
shown in Figure 4c, this offers signiﬁcant performance beneﬁts.
Unfortunately, OpenSSL, which we use for the computations
underpinning our system, is not fully parallelizable due to
the fact that its PRNG is synchronous. The resulting locks
around RNG usage prevent us from effectively parallelizing
portions of our code for showing a credential. It also causes
problems when minting a credential. The resource intensive
portion of credential mint is creating commitments and then
testing if they are prime. This requires random numbers both
directly for commitment generation and indirectly for primality
testing which uses randomized Miller-Rabin. We believe further
performance gains could be realized by using a parallelizable
RNG (e.g., Intel’s RDRand instruction).
IX. EXAMPLE APPLICATION: DISTRIBUTED DIRECT
ANONYMOUS ATTESTATION (DDAA)
In the original TPM 1.1b speciﬁcation [1], attestations
are signed by a TPM’s Attestation Identity Key (AIK). Each
TPM device can generate many AIKs, and prior to use each
AIK public key is signed by a trusted third party called a
Privacy CA, creating an AIK certiﬁcation. The purpose of this
awkward mechanism is to provide a layer of indirection between
attestations and the manufacturer-speciﬁed keys programmed
into the device, such as the permanent Endorsement Key (EK).
By introducing a third party, it becomes possible to create many
identities and thus remove the risk that a given device could
be linked to all of its endorsements.
Direct Anonymous Attestation (DAA) [11], replaced the
privacy CA with a cryptographically sound group signature
scheme. Instead of signing attestations with an AIK, a TPM
signs attestations with a private key for a group signature
scheme that preserves the signer’s anonymity. The TPM obtains
the group signing key from a DAA authority by authenticating
non-anonymously to the authority with the AIK. Because the
group signature key is used anonymously, the authority can
never link its use to the AIK key that caused its issue. Unfor-
tunately, the integrity of this process depends fundamentally
on the integrity of the software running in the DAA authority.
This makes deploying a DAA instance somewhat problematic:
each organization is responsible for deploying and securing
this DAA authority, and any compromise of this server opens
the door for credential theft or denial of service. Given the
critical role envisioned for TPM attestations, this may inhibit
the deployment of DAA systems.
We propose a new TPM design that retains the privacy
advantages of DAA without the need to run a separate DAA
server for each deployment. The advantage of our approach is
that organizations may still maintain separate trust environments
for private assertions by TPM devices but without the need
to run a vulnerable separate server. Our solution requires one
modiﬁcation to the existing TPM infrastructure, namely that
the TPM be updated to include a (non-anonymous) signing key,
with a permission level similar to that of the Endorsement
Key (EK). We will refer to this key as the Endorsement
Signing Key, or ESK, and assume that each new TPM will ship
with an Endorsement Signing Key Certiﬁcate signed by the
manufacturer.18 Given this modiﬁcation we show how to use
our anonymous credential scheme as a replacement for DAA.
To obtain a credential in the new scheme, the TPM runs
the MintCred routine, securely store the resulting sk and
18The TPM Endorsement Key and Endorsement Key Certiﬁcate would
be sufﬁcient for this role. However this key is limited by the speciﬁcation
to performing a decryption-only role, largely for privacy reasons. Our sole
modiﬁcation is to allow signing with this key, or a second key of a similar
nature.
11
transmitting the resulting credential up to the block chain
along with a signature under the TPM’s Endorsement Signing
Key (ESK).19 This signature authenticates the credential as
having been generated by a valid TPM. Once the credential
and signature are validated, they can be accumulated by veriﬁers.
The TPM can later attest to a particular conﬁguration by
running a modiﬁed version of Show that ensures ⇡S is a
signature of knowledge on the attestation values (i.e., the
program conﬁguration registers (PCRs) and an optional nonce).
Running ShowVerify with the appropriate modiﬁcations for
checking the signature of knowledge validates the attestation.
We stress that even though the TPM’s ESK (or AIK) is on the
ledger with the issued credential, showing a credential never
identiﬁes which issued credential was used and hence does not
identify the ESK (or AIK).
X. RELATED WORK
Anonymous credentials. Introduced by Chaum [22] and
developed in a line of subsequent works (e.g., [10, 14, 17]),
anonymous credentials allow a user to prove that she has
a credential issued by some organization, without revealing
anything about herself other than that she has the credential.
Under standard security deﬁnitions, even if the veriﬁer and
credential issuer collude, they cannot determine when the
credential was issued, who it was issued to, or when it was
or will be used. A common construction involves issuing a
credential by obtaining a signature from an organization on
a committed value (e.g., using the signature scheme of [15])
then proving in zero-knowledge that one has a signature under
the organization’s public key on that value. The contents of the
commitment may be revealed outright or various properties can
proved on the committed values (e.g., Alice can prove she is
over 21 years old). Extensions to this work describe credentials
that can only be shown anonymously a limited number of
times [13] or delegated to others [4]. All of these schemes
require issuing organizations to maintain a secret key.
Bitcoin and append-only ledgers. Our construction relies on
the existence of a distributed append-only transaction ledger,
a technology that makes up the core component of the Bitcoin
distributed currency: the log of all currency transactions called
the block chain [39]. These ledgers are maintained by an ad
hoc group of network nodes who are free to enter and leave
the network (there is no key provisioning necessary for them
to join). A typical transaction ledger consists of a sequence of
blocks of data that are widely replicated among the participating
nodes, with each block connected to the previous block using
a hash chain. Nodes compete for the opportunity to add new
blocks of transactions to the ledger by producing a partial
hash collision over the new data and the hash of the last block
in the chain. The hash collision serves two purposes: ﬁrst,
it is a computationally-difﬁcult-to-forge authenticator of the
ledger and second, since ﬁnding a partial hash collision involves
substantial computational effort, the peer who ﬁnds it is chosen
“at random” with a probability proportional to the rate at which
19In principle this ESK signature can be replaced with an AIK signature
with no changes to the TPM mechanism, but AIKs will have to be issued by
a trusted third party.
he can compute such partial collisions. As a result, an ad hoc
group of mutually distrusting and potentially dishonest peers
can correctly manage such a ledger provided that a majority
of their computational power is held by honest parties. Recent
experience with Bitcoin and Namecoin provides evidence that
this assumption holds in practice.
Namecoin. Namecoin [40] is a decentralized identity system
that uses the same block chain technology as Bitcoin. Name-
coin’s primary purpose is to associate names with arbitrary
data. A user can claim a name provided (1) they pay the price
in NMC for it and (2) it is unclaimed. At that point, an entry
is inserted into the block chain mapping the name to a public
key and some arbitrary data. The public key allows the owner
to update the data by signing a new record. The data allows for
various uses. If it is an IP address, then one has a distributed
DNS system (such a system, .bit, is already deployed). On
the other hand, if it is a public key, the result is a basic
PKI. The ﬁrst-come ﬁrst-served nature of Namecoin seems
somewhat anachronistic, however it replicates in miniature the
way normal DNS names are generally assigned, where the
ﬁrst person to claim the name gets it. Similarly, standard (non–
extended validation) SSL certiﬁcates for a domain are typically
issued to anyone who can demonstrate control of a domain
(usually via an email to admin@domain).
XI. CONCLUSION
In this work we constructed a distributed anonymous
credential system and several extensions. Our constructions are
secure in the random oracle model under standard cryptographic
assumptions provided there exists a trustworthy global append-
only ledger. To realize such a ledger we propose using the block
chain system already in real world use with the distributed
cryptographic currency Bitcoin. Although we are limited in the
class of identity assertions we can certify, we argue that several
basic assertions are of particular use in peer-to-peer systems,
as they can be used to mitigate Sybil attacks, ensure fair
resource usage, and protect users’ anonymity while verifying
their computer’s correctness.
Future work. We leave two open problems for future work.
First,
the proofs in this work assumed the security of a
transaction ledger. We leave a precise formal model of the
ledger, which attacks are allowable, and what bounds may be
placed on their consequence as an open problem. Second, the
efﬁciency of our construction can be improved. Although all of
our algorithms are efﬁcient (in that they do not scale with the
size of the ledger), the need for double-discrete logarithm proofs
leads to somewhat large proof sizes when showing a credential
(roughly 50KB for modest parameters). Our construction may
be optimized for certain applications that do not require the
full ﬂexibility of our construction. For example, schemes not
requiring selective disclosure of credentials require about half
that proof size. At the same time, we hope that advances
in bilinear accumulators, mercurial commitments, or lattice
based techniques may provide a more efﬁcient construction.
We are particularly hopeful that generic work in veriﬁable
computation [5, 44] will offer drastically smaller proof sizes
without resorting to bespoke proofs and protocols.
12
REFERENCES
[2]
[1]
v1.1.”
Speciﬁcation
“TPM Main
[Online]. Avail-
able: http://www.trustedcomputinggroup.org/resources/tcpa_
main_speciﬁcation_version_11b
“TPM Main Speciﬁcation v1.2.” [Online]. Available: http://www.
trustedcomputinggroup.org/resources/tpm_main_speciﬁcation
[3] N. Bari´c and B. Pﬁtzmann, “Collision-free accumulators and
fail-stop signature schemes without trees,” in EUROCRYPT,
1997.
[4] M. Belenkiy, M. Chase, M. Kohlweiss, and A. Lysyanskaya, “P-
signatures and noninteractive anonymous credentials,” in Theory
of Cryptography, 2008.
[5] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza,
“SNARKs for C: Verifying program executions succinctly
and in zero knowledge,” in Proceedings of the 33rd Annual
International Cryptology Conference, ser. CRYPTO ’13, 2013,
pp. 90–108.
J. Benaloh and M. de Mare, “One-way accumulators: a
decentralized alternative to digital signatures,” in EUROCRYPT,
1994.
[6]
[7] N. Borisov, “Computational puzzles as sybil defenses,” in Peer-
to-Peer Computing, 2006. Sixth IEEE International Conference
on.
IEEE, 2006, pp. 171–176.
[8] F. Boudot, “Efﬁcient proofs that a committed number lies in an
interval,” in EUROCRYPT 2000. Springer, 2000, pp. 431–444.
[9] S. Brands, “Rapid demonstration of linear relations connected
by boolean operators,” in EUROCRYPT, 1997.
[10] S. A. Brands, Rethinking Public Key Infrastructures and Digital
Certiﬁcates: Building in Privacy. Cambridge, MA, USA: MIT
Press, 2000.
[13]
[12]
[11] E. Brickell, J. Camenisch, and L. Chen, “Direct anonymous
attestation,” in CCS ’04. New York, NY, USA: ACM, 2004,
pp. 132–145. [Online]. Available: http://doi.acm.org/10.1145/
1030083.1030103
J. Camenisch, R. Chaabouni et al., “Efﬁcient protocols for set
membership and range proofs,” in Advances in Cryptology-
ASIACRYPT 2008. Springer, 2008, pp. 234–252.
J. Camenisch, S. Hohenberger, M. Kohlweiss, A. Lysyanskaya,
and M. Meyerovich, “How to win the clonewars: efﬁcient
periodic n-times anonymous authentication,” ser. CCS,
2006. [Online]. Available: http://doi.acm.org/10.1145/1180405.
1180431
J. Camenisch and A. Lysyanskaya, “An efﬁcient system
for non-transferable anonymous credentials with optional
anonymity revocation,” ser. EUROCRYPT, 2001. [Online].
Available: http://dl.acm.org/citation.cfm?id=647086.715698
[14]
[15] ——, “Dynamic accumulators and application to efﬁcient
revocation of anonymous credentials,” in CRYPTO, 2002.
[16] ——, “Dynamic accumulators and application to efﬁcient
revocation of anonymous credentials,” in CRYPTO, 2002,
extended Abstract. [Online]. Available: http://cs.brown.edu/
~anna/papers/camlys02.pdf
[18]
[17] ——, “A signature scheme with efﬁcient protocols,” ser.
SCN’02, 2003. [Online]. Available: http://dl.acm.org/citation.
cfm?id=1766811.1766838
J. Camenisch and M. Michels, “Proving in zero-knowledge that
a number n is the product of two safe primes,” in EUROCRYPT,
1999.
J. Camenisch and M. Stadler, “Efﬁcient group signature schemes
for large groups,” in CRYPTO, 1997.
J. L. Camenisch, “Group signature schemes and payment
[20]
[19]