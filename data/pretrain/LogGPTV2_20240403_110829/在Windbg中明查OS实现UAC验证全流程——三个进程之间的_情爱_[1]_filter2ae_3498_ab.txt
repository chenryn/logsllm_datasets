    00007ff6`340c47a2 Explorer!CTray::v_WndProc+0xd0b14 00000000`036ff6e0 
    00007ffc`f0566d41 Explorer!CImpWndProc::s_WndProc+0xf215 00000000`036ff730 
    00007ffc`f0566713 user32!UserCallWinProcCheckWow+0x2c116 00000000`036ff8c0 
    00007ff6`340c8e52 user32!DispatchMessageWorker+0x1c317 00000000`036ff950 
    00007ff6`34090253 Explorer!CTray::_MessageLoop+0x1b218 00000000`036ffa20 
    00007ffc`f0733fb5 Explorer!CTray::MainThreadProc+0x4319 00000000`036ffa50 
    00007ffc`eff14034 shcore!_WrapperThreadProc+0xf51a 00000000`036ffb30 
    00007ffc`f2593691 KERNEL32!BaseThreadInitThunk+0x141b 00000000`036ffb60 
    00000000`00000000 ntdll!RtlUserThreadStart+0x21
栈很完美，但这个不是我们关注的重点，取消掉这个断点：
    bc 8
紧接着
    Breakpoint 2 hit
    ntdll!RtlCreateProcessParametersEx:00007ffc`f256b3f0 48895c2418      mov     qword ptr [rsp+18h],rbx ss:00000000`5624d6a0=0000000028289e40
    # Child-SP          RetAddr           Call Site
    00 00000000`56a4d5f8 00007ffc`ee98e7c9 ntdll!RtlCreateProcessParametersEx
    01 00000000`56a4d600 00007ffc`ee98b4db KERNELBASE!BasepCreateProcessParameters+0x199
    02 00000000`56a4d710 00007ffc`ee9b91b6 KERNELBASE!CreateProcessInternalW+0xc2b
    03 00000000`56a4e3a0 00007ffc`eff1b9e3 KERNELBASE!CreateProcessW+0x66
    04 00000000`56a4e410 00007ffc`eeed879e KERNEL32!CreateProcessWStub+0x53
    05 00000000`56a4e470 00007ffc`eeed8396 windows_storage!CInvokeCreateProcessVerb::CallCreateProcess+0x2d2
    06 00000000`56a4e720 00007ffc`eeed804c windows_storage!CInvokeCreateProcessVerb::_PrepareAndCallCreateProcess+0x1ee
    07 00000000`56a4e7b0 00007ffc`eeed9517 windows_storage!CInvokeCreateProcessVerb::_TryCreateProcess+0x78
    08 00000000`56a4e7e0 00007ffc`eeed7dee windows_storage!CInvokeCreateProcessVerb::Launch+0xfb
    09 00000000`56a4e880 00007ffc`eeeda7f7 windows_storage!CInvokeCreateProcessVerb::Execute+0x3e
    0a 00000000`56a4e8b0 00007ffc`eeedb010 windows_storage!CBindAndInvokeStaticVerb::InitAndCallExecute+0x163
    0b 00000000`56a4e930 00007ffc`eeedab74 windows_storage!CBindAndInvokeStaticVerb::TryCreateProcessDdeHandler+0x68
    0c 00000000`56a4e9b0 00007ffc`eeed3c03 windows_storage!CBindAndInvokeStaticVerb::Execute+0x1b4
    0d 00000000`56a4ecc0 00007ffc`eeed395d windows_storage!RegDataDrivenCommand::_TryInvokeAssociation+0xaf
    0e 00000000`56a4ed30 00007ffc`f0a96e25 windows_storage!RegDataDrivenCommand::_Invoke+0x13d
    0f 00000000`56a4eda0 00007ffc`f0a95bba SHELL32!CRegistryVerbsContextMenu::_Execute+0xc9
    10 00000000`56a4ee10 00007ffc`f0ad29c0 SHELL32!CRegistryVerbsContextMenu::InvokeCommand+0xaa
    11 00000000`56a4f110 00007ffc`f0a7ee1d SHELL32!HDXA_LetHandlerProcessCommandEx+0x118
    12 00000000`56a4f220 00007ffc`f0a6cfcf SHELL32!CDefFolderMenu::InvokeCommand+0x13d
    13 00000000`56a4f580 00007ffc`f0a6cea9 SHELL32!CShellExecute::_InvokeInProcExec+0xff
    14 00000000`56a4f680 00007ffc`f0a6c3e6 SHELL32!CShellExecute::_InvokeCtxMenu+0x59
    15 00000000`56a4f6c0 00007ffc`f0ad830e SHELL32!CShellExecute::_DoExecute+0x156
    16 00000000`56a4f720 00007ffc`f0733fb5 SHELL32!::+0x1e
    17 00000000`56a4f750 00007ffc`eff14034 shcore!_WrapperThreadProc+0xf5
    18 00000000`56a4f830 00007ffc`f2593691 KERNEL32!BaseThreadInitThunk+0x14
    19 00000000`56a4f860 00000000`00000000 ntdll!RtlUserThreadStart+0x21
简单看下CreateProcessW的几个参数，需要做一点分析，原因是x64上前4个参数是通过寄存器传递的，而现在我们断在了靠后的地方，所以需要手工解析下。但这里不需要解析，原因是内部大概率的会把相关的指针保存到栈中，只要解引用下栈的数据即可，一个指令搞定，如下：
    0:241> dpu 00000000`56a4d5f8 l30
    00000000`56a4d5f8  00007ffc`ee98e7c9 ".诿藘.떈Գ蹚䖋䆇º.谋⁏喋襷袈"
    00000000`56a4d600  00000000`00000002
    00000000`56a4d608  00000000`00000000
    00000000`56a4d610  00000000`1b6f17c0 "塚ե"
    00000000`56a4d618  00000000`223b4a20 "C:\WINDOWS\system32"
    00000000`56a4d620  00000000`56a4d6d0 "HJӃ"
    00000000`56a4d628  00000000`00000000
    00000000`56a4d630  00000000`56a4d6b0 ">@"
    00000000`56a4d638  00000000`56a4d6a0 ". "
    00000000`56a4d640  00000000`56a4d690 ""
    00000000`56a4d648  00000000`56a4d680 ""
    00000000`56a4d650  00000000`00000001
    00000000`56a4d658  00000000`223b4a20 "C:\WINDOWS\system32"
    00000000`56a4d660  00000000`00000000
    00000000`56a4d668  00007ffc`ee97ea00 "赈.འ쁗襈.䡀䲍〤䓇〤0"
    00000000`56a4d670  00000000`00000000
    00000000`56a4d678  00000000`00000000
    00000000`56a4d680  00000000`00000000
    00000000`56a4d688  00000000`00000000
    00000000`56a4d690  00000000`00020000 "......................................................."
    00000000`56a4d698  00007ffc`eead7414 ""
    00000000`56a4d6a0  00000000`0020001e "ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ"
    00000000`56a4d6a8  00000000`00f22f38 "Winsta0\Default"
    00000000`56a4d6b0  00000000`0040003e ""
    00000000`56a4d6b8  00000000`2be9a1e0 "C:\WINDOWS\system32\taskmgr.exe"
    00000000`56a4d6c0  00000000`00280026 "ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ.ÿ"
    00000000`56a4d6c8  00000000`223b4a20 "C:\WINDOWS\system32"
    00000000`56a4d6d0  000004c3`004a0048
    00000000`56a4d6d8  00000000`2bac04b0 ""C:\WINDOWS\system32\taskmgr.exe" /4"
    00000000`56a4d6e0  00000000`00000004
    00000000`56a4d6e8  00000000`00c05000 ""
基本无误了，下一步需要确认一件事情，即这个创建taskmgr.exe的动作是在explorer体内还是在AIS体内，这个简单。将AIS挂起，然后在创建taskmgr看看是否能成功拉起。
## 4、挂起AIS
AIS的全称是AppInfo
Server，它是一个服务，内嵌在SvcHost体内，可通过任务管理器找到，如下图所示，他负责校验该EXE是否能够以管理员权限启动。他才是核心。
通过任务管理器去停止这个服务，我这没能成功，索性就直接用Procexp吧。如下图：
取消掉所有断点，然后 右键——->启动任务管理器 没有任何反应，Taskmgr也没有被创建出来，如下图：
通过这种“粗暴”的手段，至少能证明，explorer顶多算个始作俑者却算不算真正的大佬。那谁才是背后推动着这个成功创建的幕后黑手呢？方法只有一个，继续调试，不过这次的断点稍微往上来一点。放在kernelbase中。【中途有点事情，耽搁了下，回来重启了下电脑，PID发生了变化】
    0:151> bp KERNELBASE!CreateProcessWBreakpoint 0 hit KERNELBASE!CreateProcessW:00007ffd`d9cc9150 4c8bdc          mov     r11,rsp
    0:004> k
    Child-SP          RetAddr           Call Site
    00 00000000`34f0e878 00007ffd`dc26b9e3 KERNELBASE!CreateProcessW
    01 00000000`34f0e880 00007ffd`da55879e KERNEL32!CreateProcessWStub+0x53
    02 00000000`34f0e8e0 00007ffd`da558396 windows_storage!CInvokeCreateProcessVerb::CallCreateProcess+0x2d2
    03 00000000`34f0eb90 00007ffd`da55804c windows_storage!CInvokeCreateProcessVerb::_PrepareAndCallCreateProcess+0x1ee
    04 00000000`34f0ec20 00007ffd`da559517 windows_storage!CInvokeCreateProcessVerb::_TryCreateProcess+0x78
    05 00000000`34f0ec50 00007ffd`da557dee windows_storage!CInvokeCreateProcessVerb::Launch+0xfb
    06 00000000`34f0ecf0 00007ffd`da55a7f7 windows_storage!CInvokeCreateProcessVerb::Execute+0x3e
    07 00000000`34f0ed20 00007ffd`da55b010 windows_storage!CBindAndInvokeStaticVerb::InitAndCallExecute+0x163
    08 00000000`34f0eda0 00007ffd`da55ab74 windows_storage!CBindAndInvokeStaticVerb::TryCreateProcessDdeHandler+0x68
    09 00000000`34f0ee20 00007ffd`da553c03 windows_storage!CBindAndInvokeStaticVerb::Execute+0x1b4
    0a 00000000`34f0f130 00007ffd`da55395d windows_storage!RegDataDrivenCommand::_TryInvokeAssociation+0xaf