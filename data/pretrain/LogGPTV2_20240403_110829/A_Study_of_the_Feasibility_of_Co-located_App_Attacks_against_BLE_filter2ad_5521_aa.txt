title:A Study of the Feasibility of Co-located App Attacks against BLE
and a Large-Scale Analysis of the Current Application-Layer Security
Landscape
author:Pallavi Sivakumaran and
Jorge Blasco
A Study of the Feasibility of Co-located App 
Attacks against BLE and a Large-Scale Analysis of 
the Current Application-Layer Security Landscape
Pallavi Sivakumaran and Jorge Blasco, Royal Holloway University of London
https://www.usenix.org/conference/usenixsecurity19/presentation/sivakumaran
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.A Study of the Feasibility of Co-located App Attacks against BLE and a
Large-Scale Analysis of the Current Application-Layer Security Landscape
Pallavi Sivakumaran
Information Security Group
Royal Holloway University of London
Email: PI:EMAIL
Jorge Blasco
Information Security Group
Royal Holloway University of London
Email: PI:EMAIL
Abstract
Bluetooth Low Energy (BLE) is a fast-growing wireless tech-
nology with a large number of potential use cases, particularly
in the IoT domain. Increasingly, these use cases require the
storage of sensitive user data or critical device controls on
the BLE device, as well as the access of this data by an aug-
mentative mobile application. Uncontrolled access to such
data could violate user privacy, cause a device to malfunction,
or even endanger lives. The BLE standard provides security
mechanisms such as pairing and bonding to protect sensitive
data such that only authenticated devices can access it. In this
paper we show how unauthorized co-located Android appli-
cations can access pairing-protected BLE data, without the
user’s knowledge. We discuss mitigation strategies in terms of
the various stakeholders involved in this ecosystem, and argue
that at present, the only possible option for securing BLE data
is for BLE developers to implement remedial measures in the
form of application-layer security between the BLE device
and the Android application. We introduce BLECryptracer,
a tool for identifying the presence of such application-layer
security, and present the results of a large-scale static anal-
ysis over 18,900+ BLE-enabled Android applications. Our
ﬁndings indicate that over 45% of these applications do not
implement measures to protect BLE data, and that cryptog-
raphy is sometimes applied incorrectly in those that do. This
implies that a potentially large number of corresponding BLE
peripheral devices are vulnerable to unauthorized data access.
1 Introduction
Bluetooth is a well-known technology standard for wireless
data transfer, currently deployed in billions of devices world-
wide [37]. A more recent addition to the Bluetooth standard
is Bluetooth Low Energy (BLE), which differs from Classic
Bluetooth in that it incorporates a simpliﬁed version of the
Bluetooth stack and targets low-energy, low-cost devices.
Its focus on resource-constrained devices has made BLE
highly suited for IoT applications [18], including personal
health/ﬁtness monitoring [22], asset tracking [8], vehicular
management [13], and home automation [27]. Most of these
use cases augment the functionality of the BLE device with
a mobile application. This application may need to read or
write sensitive or critical data on the BLE device (for example,
glucose measurement values stored by a continuous glucose
meter, or a ﬁeld that controls a door’s locking mechanism
in a smart home security system). To ensure privacy and
security/safety, measures should be taken to protect such data
from being accessed by unauthorized entities.
The Bluetooth speciﬁcation provides means for restricting
access to BLE data via pairing and bonding, which are mech-
anisms for establishing an authenticated transport between
two communicating devices. However, when multiple appli-
cations reside on a single host, as is the case with mobile
devices, there is potential for a malicious application to abuse
a trusted relationship between the host and the device that
was initiated by an authorized application [31].
In this work, we show how a malicious application could
take advantage of the BLE communication model on Android
to read and write pairing-protected data on a BLE device
without the user’s knowledge. We also show that these unau-
thorized applications may be able to do so while requesting
minimal permissions, thereby making them appear less inva-
sive than even an authorized application.
We discuss various strategies, in terms of the different stake-
holders involved, that can be used to secure BLE data against
such unauthorized access. We argue that in the current land-
scape, it is up to the BLE device/application developers to im-
plement application-layer security to protect the data on their
devices. We perform a large-scale static analysis of 18,929
BLE-enabled Android applications (ﬁltered down from an
original dataset of over 4.6 million applications) to determine
how many of them currently employ such protection mecha-
nisms. While the results vary for BLE reads vs. writes, overall
they show that more than 45% of the tested applications do
not provide cryptography-based application-layer security for
BLE data. This number rises to about 70% for those applica-
tions that are categorized under “Medical”. This information,
USENIX Association
28th USENIX Security Symposium    1
CENTRAL
PERIPHERAL
2.2 BLE Attribute Permissions
Read Request
Read Response
GATT Client
GATT Server
Figure 1: GATT communications between a mobile phone
and a BLE-enabled glucometer.
when combined with the download counts for each applica-
tion, allows us to estimate a lower bound for the number of
BLE devices that may be vulnerable to unauthorized data
access.
The rest of this paper is structured as follows: Section 2
provides an overview of key BLE concepts, particularly with
regard to data access mechanisms and restrictions. We demon-
strate unauthorized BLE data access in Section 3. This section
also discusses stakeholders and possible mitigation strategies.
Section 4 details our marketplace application analysis and
examines the results. Related work is described in Section 5,
and Section 6 provides our concluding remarks.
2 Background
Two devices that communicate using BLE will operate in
an asymmetric conﬁguration, with the more powerful device,
referred to as the central, taking on most of the resource-
intensive work. The resource-constrained device is termed the
peripheral and performs tasks that are designed to consume
fewer resources.
2.1 Data Access on BLE Devices
BLE, unlike Classic Bluetooth, can only handle discrete data
known as attributes. Attributes are stored and accessed ac-
cording to rules speciﬁed by the Attribute Protocol (ATT)
and the Generic Attribute Proﬁle (GATT), both of which are
deﬁned in the Bluetooth standard. There are different types of
attributes, of which characteristics are the most relevant for
our analysis, as they hold the actual data of interest. Related
characteristics are grouped into services, which are exposed
to connected devices [11].
When one BLE-enabled device wants to access attributes
on another BLE device, the device that initiates the exchange
takes on the role of GATT client and the other acts as the
GATT server. In this paper, we focus on the scenario where
the BLE peripheral (e.g., a glucose meter), acts as the server,
and a mobile phone acts as the client, as shown in Figure 1.
Every attribute has associated with it three permissions that
control how it may be accessed: (1) Access permissions deﬁne
whether an attribute can be read and/or written. (2) Authen-
tication permissions indicate the level of authentication and
encryption that needs to be applied to the transport between
the two devices before the attribute can be accessed. (3) Autho-
rization permissions specify whether end-user authorization
is required for access.
When a GATT client sends a read or write request for an
attribute to a GATT server, the server will check the request
against the permissions for that attribute, to determine whether
the requested access mechanism is allowed and whether the
client is authenticated and/or authorized, if required. An at-
tribute is only readable or writable if its access permissions
specify it to be so. In the case of authentication permissions,
if the attribute requires an authenticated or encrypted link
before it can be accessed (referred to as a “pairing-protecte”
attribute in this paper), and if such a link is not present when
the access request is made, then the server responds with
an Insufficient Authentication/Encryption message.
At this point, the client can initiate the pairing process to
authenticate and encrypt the transport. If this process com-
pletes successfully, the server will fulﬁll subsequent requests
made by the client. This procedure for handling authentica-
tion requirements is well-deﬁned in the Bluetooth speciﬁ-
cation. Authorization requirements, on the other hand, are
implementation-speciﬁc and largely left up to developers.
Once two devices complete the pairing process, they typi-
cally go through an additional bonding process, during which
long-term keys are established. This prevents the need for go-
ing through the pairing process again if they disconnect and
subsequently reconnect, provided they retain the long-term
keys. Upon re-connection, the link encryption process will be
initiated using the stored keys. Keys normally remain on the
devices unless the devices are reset or manually unpaired by
the user.
3 BLE Co-located Application Attacks
In this section, we show how any application on an Android
device can access pairing-protected attributes from a BLE
peripheral, even when the pairing process was initiated by
a different application. We then explore various mitigation
strategies that are available to different stakeholders in the
BLE ecosystem.
These attacks were also explored by Naveed et al. in 2014,
for Classic Bluetooth [31]. We show that the problem remains
on newer versions of Android, and also that the situation is
worse for BLE, as one of our attacks enables fewer restrictions
for access and requires fewer permissions of the malicious
application than even of the ofﬁcial application.
2    28th USENIX Security Symposium
USENIX Association
3.1 Attack Mechanisms
We describe two attacks: the ﬁrst shows that pairing-protected
data can be accessed by unauthorized applications, while the
second reﬁnes the attack and reduces the number of permis-
sions required by the unauthorized application. We use two
Android applications to describe the attacks: One application
that is expected to be able to connect to the BLE device and
access its data (“OfﬁcialApp”), and a different application
that should not be able to access pairing-protected data from
the device (“AttackApp”). We conducted our experiments on
an Alcatel Pixi 4 mobile phone, running Android 6.0, and
on a Google Pixel XL, running Android 8.1.0. Version 6.0
was the most widely-deployed release [2], while 8.1.0 was
the latest stable release, as of 01 Aug 2018.
3.1.1 Attack 1: System-wide Pairing Credentials
This attack demonstrates that the BLE credentials that are
stored on an Android device are implicitly available to all
applications on the device, rather than just the application that
originally triggered the pairing.
When the OfﬁcialApp connects to the BLE device and
attempts to access a pairing-protected characteristic, the re-
sulting exchange will trigger the Android OS into initiating
the pairing and bonding process (as depicted in the upper
block in Figure 2). The resultant keys are associated with
the link between the Android and BLE devices, rather than
between the BLE device and the OfﬁcialApp (which actually
triggered the pairing). Therefore, once bonding completes,
when the AttackApp scans and connects to the BLE device,
the Android OS completes the connection process and au-
tomatically initiates link encryption with the keys that were
generated during the previous bonding process (lower block
in Figure 2). This enables the AttackApp to have the same
level of access to the pairing-protected data on the device as
the OfﬁcialApp, but without the need for initiating pairing.
A key point to note here is that, not only is the unauthorized
AttackApp able to access potentially sensitive information
from the BLE device, but also the user is likely to be unaware
of the fact that this data access is taking place, as there is no
indication during link re-encryption and subsequent attribute
access.
3.1.2 Attack 2: Reuse of Connection
Our second attack exploits the fact that, on Android, a BLE
peripheral can be used concurrently by multiple applica-
tions [32]. In this attack, the AttackApp does not scan for BLE
devices. It instead searches for connected BLE devices us-
ing the BluetoothManager.getConnectedDevices() API
call, with BluetoothProfile.GATT as the argument. If the
OfﬁcialApp happens to be in communication with the BLE
device at the same time, this call will return a list with a ref-
erence to the connected BLE device. The AttackApp is then
Apps
Android OS
BLE
OfﬁcialApp
startLeScan()
connect()
Scan
onConnect
readCharacteristic()
onRead
getValue()
close()
Create Connection
Connection Complete
Read Request: 
Error: Insufﬁcient Authentication
Pairing, Link Encryption, Bonding
Read Request: 
Read Response: 
AttackApp
startLeScan()
connect()
Scan
Disconnect
Create Connection
Connection Complete
Link Encryption
readCharacteristic()
Read Request: 
Read Response: 
onRead
getValue()
Figure 2: Attack 1 - Illustrative message exchange depicting
access of pairing-protected data by unauthorized application.
Note: Dashed lines indicate encrypted trafﬁc.
able to directly connect to the GATT server and read and write
to the characteristics on it (including those that are pairing-
protected), without the need for creating a new connection to
USENIX Association
28th USENIX Security Symposium    3
the peripheral. This again is done surreptitiously, without the
user being aware of the data access. An illustrative message
ﬂow where the AttackApp writes to a protected characteris-
tic on the BLE device (which the OfﬁcialApp subsequently
reads) has been depicted in Figure 3.
An interesting observation from this attack is a subtle but
relevant impact it has on user awareness, due to the different
permissions that need to be requested by the two applications.
Since both applications access data from a GATT server, they
both require BLUETOOTH permissions. In this attack scenario,
because the OfﬁcialApp scans for the BLE device before it
connects to it, it also needs to request the BLUETOOTH_ADMIN
permission. Both BLUETOOTH and BLUETOOTH_ADMIN are
“normal” permissions that are granted automatically by the
Android operating system after installation, without any need
for user interaction. However, due to restrictions imposed
from Android version 6.0 onward, the OfﬁcialApp also needs
to request LOCATION permissions to invoke the BLE scanner
without a ﬁlter (i.e., to scan for all nearby devices instead of
a particular device). These permissions are classed as “dan-
gerous” and will prompt the system to display a conﬁrmation
dialog box the ﬁrst time they are required. Because the Attack-
App merely has to query the Android OS for a list of already
connected devices, it does not require these additional permis-
sions. This makes the AttackApp appear to be less invasive
in the eyes of a user, since it does not request any permission
that involves user privacy. This could play a part in determin-
ing the volume of downloads for a malicious application. For
example, a malicious application that masquerades as a gam-
ing application, and which does not request any dangerous
permissions, may be more likely to be downloaded by end
users as opposed to one that requests location permissions.
3.2 Discussion
In this section we discuss the impact of our ﬁndings, com-
pare them with the Classic Bluetooth case, and mention some
attack limitations.
3.2.1 Implications of Attack
In both of our experiments, the AttackApp was able to read
and write pairing-protected data from the BLE device. The
simplest form of attack would then be for a malicious applica-
tion to perform unauthorized reads of personal user data (as
an example) and relay this to a remote server.
We veriﬁed the practicability of this attack by testing a
BLE-enabled ﬁtness tracker that implemented the Bluetooth
Heart Rate Service. According to the service speciﬁcation,
characteristics within this service are only supposed to be
protected by pairing [9]. However, we observed that the pair-
ing employed by the device appeared to be a non-standard
implementation, and also that access to the Heart Rate Mea-
surement characteristic was “locked” and had to be “unlocked”
Apps
Android OS
BLE
OfﬁcialApp
startLeScan()
connect()
Scan
onConnect
readCharacteristic()
onRead
getValue()
AttackApp
getConnectedDevices()
connectGatt()
onConnect
writeCharacteristic()
onWrite
Create Connection
Connection Complete
Read Request: 
Error: Insufﬁcient Authentication
Pairing, Link Encryption, Bonding
Read Request: 
Read Response: 
Write Request:
Write Response: success
readCharacteristic()
Read Request: 