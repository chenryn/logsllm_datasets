# Title: A Study of the Feasibility of Co-located App Attacks against BLE and a Large-Scale Analysis of the Current Application-Layer Security Landscape

## Authors: Pallavi Sivakumaran and Jorge Blasco
### Affiliation: Royal Holloway University of London

**Paper Source:** [USENIX Security Symposium 2019](https://www.usenix.org/conference/usenixsecurity19/presentation/sivakumaran)

This paper is included in the Proceedings of the 28th USENIX Security Symposium, held from August 14â€“16, 2019, in Santa Clara, CA, USA. The proceedings are available with open access, sponsored by USENIX.

---

## Abstract

Bluetooth Low Energy (BLE) is a rapidly growing wireless technology with numerous potential use cases, particularly in the Internet of Things (IoT) domain. These use cases often require storing sensitive user data or critical device controls on BLE devices, which can be accessed by mobile applications. Unauthorized access to such data could compromise user privacy, cause device malfunctions, or even endanger lives. The BLE standard provides security mechanisms like pairing and bonding to protect sensitive data, ensuring that only authenticated devices can access it. In this paper, we demonstrate how unauthorized co-located Android applications can access pairing-protected BLE data without the user's knowledge. We discuss mitigation strategies for various stakeholders and argue that the current best option for securing BLE data is for developers to implement application-layer security between the BLE device and the Android application. We introduce BLECryptracer, a tool for identifying the presence of such application-layer security, and present the results of a large-scale static analysis of over 18,900 BLE-enabled Android applications. Our findings indicate that more than 45% of these applications do not implement measures to protect BLE data, and that cryptography is sometimes applied incorrectly in those that do. This suggests that a significant number of corresponding BLE peripheral devices are vulnerable to unauthorized data access.

---

## 1. Introduction

Bluetooth is a well-known technology standard for wireless data transfer, currently deployed in billions of devices worldwide. Bluetooth Low Energy (BLE) is a recent addition to the Bluetooth standard, designed for low-energy, low-cost devices. Its focus on resource-constrained devices makes BLE highly suitable for IoT applications, including personal health/fitness monitoring, asset tracking, vehicular management, and home automation. Many of these use cases augment the functionality of the BLE device with a mobile application, which may need to read or write sensitive or critical data on the BLE device. To ensure privacy and security, measures should be taken to protect such data from unauthorized access.

The Bluetooth specification provides mechanisms for restricting access to BLE data via pairing and bonding, which establish an authenticated transport between two communicating devices. However, when multiple applications reside on a single host, as is the case with mobile devices, there is potential for a malicious application to abuse a trusted relationship between the host and the device initiated by an authorized application.

In this work, we show how a malicious application can exploit the BLE communication model on Android to read and write pairing-protected data on a BLE device without the user's knowledge. We also demonstrate that these unauthorized applications may be able to do so while requesting minimal permissions, making them appear less invasive than even an authorized application.

We discuss various strategies, involving different stakeholders, to secure BLE data against such unauthorized access. We argue that, in the current landscape, it is up to the BLE device/application developers to implement application-layer security to protect the data on their devices. We perform a large-scale static analysis of 18,929 BLE-enabled Android applications (filtered from an original dataset of over 4.6 million applications) to determine how many of them currently employ such protection mechanisms. Our results show that more than 45% of the tested applications do not provide cryptography-based application-layer security for BLE data. This number rises to about 70% for applications categorized under "Medical." Combining this information with the download counts for each application allows us to estimate a lower bound for the number of BLE devices that may be vulnerable to unauthorized data access.

The rest of this paper is structured as follows: Section 2 provides an overview of key BLE concepts, particularly with regard to data access mechanisms and restrictions. Section 3 demonstrates unauthorized BLE data access and discusses stakeholders and possible mitigation strategies. Section 4 details our marketplace application analysis and examines the results. Related work is described in Section 5, and Section 6 provides our concluding remarks.

---

## 2. Background

### 2.1 Data Access on BLE Devices

BLE, unlike Classic Bluetooth, can only handle discrete data known as attributes. Attributes are stored and accessed according to rules specified by the Attribute Protocol (ATT) and the Generic Attribute Profile (GATT), both defined in the Bluetooth standard. Characteristics, which hold the actual data of interest, are the most relevant for our analysis. Related characteristics are grouped into services, which are exposed to connected devices.

When one BLE-enabled device wants to access attributes on another BLE device, the initiating device takes on the role of the GATT client, and the other acts as the GATT server. In this paper, we focus on the scenario where the BLE peripheral (e.g., a glucose meter) acts as the server, and a mobile phone acts as the client, as shown in Figure 1.

Every attribute has three associated permissions:
1. **Access Permissions**: Define whether an attribute can be read and/or written.
2. **Authentication Permissions**: Indicate the level of authentication and encryption required before the attribute can be accessed.
3. **Authorization Permissions**: Specify whether end-user authorization is required for access.

When a GATT client sends a read or write request for an attribute to a GATT server, the server checks the request against the permissions for that attribute to determine if the requested access is allowed and if the client is authenticated and/or authorized. An attribute is only readable or writable if its access permissions specify it to be so. If the attribute requires an authenticated or encrypted link (referred to as a "pairing-protected" attribute in this paper) and such a link is not present, the server responds with an "Insufficient Authentication/Encryption" message.

At this point, the client can initiate the pairing process to authenticate and encrypt the transport. If this process completes successfully, the server will fulfill subsequent requests made by the client. This procedure for handling authentication requirements is well-defined in the Bluetooth specification. Authorization requirements, on the other hand, are implementation-specific and largely left up to developers.

Once two devices complete the pairing process, they typically go through an additional bonding process, during which long-term keys are established. This prevents the need for going through the pairing process again if they disconnect and subsequently reconnect, provided they retain the long-term keys. Upon re-connection, the link encryption process will be initiated using the stored keys. Keys normally remain on the devices unless the devices are reset or manually unpaired by the user.

---

## 3. BLE Co-located Application Attacks

In this section, we demonstrate how any application on an Android device can access pairing-protected attributes from a BLE peripheral, even when the pairing process was initiated by a different application. We then explore various mitigation strategies available to different stakeholders in the BLE ecosystem.

These attacks were also explored by Naveed et al. in 2014 for Classic Bluetooth. We show that the problem remains on newer versions of Android and is even worse for BLE, as one of our attacks enables fewer restrictions for access and requires fewer permissions of the malicious application than even the official application.

### 3.1 Attack Mechanisms

We describe two attacks: the first shows that pairing-protected data can be accessed by unauthorized applications, while the second refines the attack and reduces the number of permissions required by the unauthorized application. We use two Android applications to describe the attacks: one application that is expected to connect to the BLE device and access its data ("OfficialApp"), and a different application that should not be able to access pairing-protected data from the device ("AttackApp"). We conducted our experiments on an Alcatel Pixi 4 mobile phone running Android 6.0 and a Google Pixel XL running Android 8.1.0. Version 6.0 was the most widely-deployed release, while 8.1.0 was the latest stable release as of August 1, 2018.

#### 3.1.1 Attack 1: System-wide Pairing Credentials

This attack demonstrates that the BLE credentials stored on an Android device are implicitly available to all applications on the device, rather than just the application that originally triggered the pairing.

When the OfficialApp connects to the BLE device and attempts to access a pairing-protected characteristic, the resulting exchange triggers the Android OS to initiate the pairing and bonding process (as depicted in the upper block in Figure 2). The resultant keys are associated with the link between the Android and BLE devices, rather than between the BLE device and the OfficialApp. Therefore, once bonding completes, when the AttackApp scans and connects to the BLE device, the Android OS completes the connection process and automatically initiates link encryption with the keys generated during the previous bonding process (lower block in Figure 2). This enables the AttackApp to have the same level of access to the pairing-protected data on the device as the OfficialApp, but without the need for initiating pairing.

A key point to note is that not only is the unauthorized AttackApp able to access potentially sensitive information from the BLE device, but the user is likely to be unaware of the data access, as there is no indication during link re-encryption and subsequent attribute access.

#### 3.1.2 Attack 2: Reuse of Connection

Our second attack exploits the fact that, on Android, a BLE peripheral can be used concurrently by multiple applications. In this attack, the AttackApp does not scan for BLE devices. Instead, it searches for connected BLE devices using the `BluetoothManager.getConnectedDevices()` API call, with `BluetoothProfile.GATT` as the argument. If the OfficialApp happens to be in communication with the BLE device at the same time, this call will return a list with a reference to the connected BLE device. The AttackApp can then directly connect to the GATT server and read and write to the characteristics on it (including those that are pairing-protected), without the need for creating a new connection to the peripheral. This is done surreptitiously, without the user being aware of the data access. An illustrative message flow where the AttackApp writes to a protected characteristic on the BLE device (which the OfficialApp subsequently reads) is depicted in Figure 3.

An interesting observation from this attack is the subtle but relevant impact it has on user awareness due to the different permissions required by the two applications. Since both applications access data from a GATT server, they both require `BLUETOOTH` permissions. In this attack scenario, because the OfficialApp scans for the BLE device before connecting to it, it also needs to request the `BLUETOOTH_ADMIN` permission. Both `BLUETOOTH` and `BLUETOOTH_ADMIN` are "normal" permissions that are granted automatically by the Android operating system after installation, without any need for user interaction. However, due to restrictions imposed from Android version 6.0 onward, the OfficialApp also needs to request `LOCATION` permissions to invoke the BLE scanner without a filter (i.e., to scan for all nearby devices instead of a particular device). These permissions are classed as "dangerous" and will prompt the system to display a confirmation dialog box the first time they are required. Because the AttackApp merely has to query the Android OS for a list of already connected devices, it does not require these additional permissions. This makes the AttackApp appear to be less invasive in the eyes of a user, since it does not request any permission that involves user privacy. This could play a part in determining the volume of downloads for a malicious application. For example, a malicious application that masquerades as a gaming application and does not request dangerous permissions may be more likely to be downloaded by end users compared to one that requests location permissions.

### 3.2 Discussion

In this section, we discuss the impact of our findings, compare them with the Classic Bluetooth case, and mention some attack limitations.

#### 3.2.1 Implications of Attack

In both of our experiments, the AttackApp was able to read and write pairing-protected data from the BLE device. The simplest form of attack would be for a malicious application to perform unauthorized reads of personal user data and relay this to a remote server.

We verified the practicability of this attack by testing a BLE-enabled fitness tracker that implemented the Bluetooth Heart Rate Service. According to the service specification, characteristics within this service are only supposed to be protected by pairing. However, we observed that the pairing employed by the device appeared to be a non-standard implementation, and access to the Heart Rate Measurement characteristic was "locked" and had to be "unlocked" before it could be read.

---

This revised text aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.