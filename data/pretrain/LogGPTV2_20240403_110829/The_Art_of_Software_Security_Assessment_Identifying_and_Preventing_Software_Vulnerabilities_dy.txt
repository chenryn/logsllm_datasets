       if (opt[i] == option) return !invert; 
       if (opt[i] < 2) i++; 
       else i += opt[i+1]?:1; 
   } 
An integer promotion occurs when adding the option length (which is of type char) to 
the integer i. The option length is sign-extended, and a negative length decrements 
i rather than incrementing it in each iteration of the loop. A specially crafted packet 
can, therefore, cause this loop to continue executing indefinitely (incrementing i by a 
certain amount of bytes and then decrementing it by the same amount of bytes). 
Are Enough Bytes Left for the Current Option? 
As with IP options, certain TCP options are fixed length, and certain options are 
variable length. One potential attack is specifying a fixed-length option near the end 
of the option space so that the TCP/IP stack erroneously reads kernel memory past 
the end of the packet contents. 
Is the Option Length Too Large or Too Small? 
The option length has an invariant relationship with the size of the TCP header and the 
total size of the packet. The TCP stack must ensure that the option length, when 
added to the offset into the header where the option appears, isn't larger than the 
total size of the TCP header (and, of course, the total size of the packet). 
TCP Connections 
Before two hosts can communicate over TCP, they must establish a connection. TCP 
connections are uniquely defined by source IP address, destination IP address, TCP 
source port, and TCP destination port. 
For example, a connection from a Web browser on your desktop to Slashdot's Web 
server would have a source IP of something like 24.1.20.30, and a high, ephemeral 
source port such as 46023. It would have a destination IP address of 66.35.250.151, 
and a destination port of 80 the well-known port for HTTP. There can only be one TCP 
connection with those ports and IP addresses at any one time. If you connected to the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
878 
same Web server with another browser simultaneously, the second connection would 
be distinguished from the first by having a different source port. 
States 
Each endpoint maintains several pieces of information about each connection it's 
tracking, which it stores in a data structure known as the transmission control block 
(TCB). One of the most important pieces of information is the overall connection 
state. A TCP connection has 11 possible states: 
LISTEN When a process running on an end host wants to receive incoming TCP 
connections, it creates a new connection and binds it to a particular port. While 
the server waits for incoming TCP connections, that connection is in the LISTEN 
state. 
SYN_SENT A client enters this state when it has sent an initial SYN packet to a 
server requesting a connection. 
SYN_RCVD A server enters this state when it has received an initial SYN packet 
from a client wanting to connect. 
ESTABLISHED Clients and servers both enter this state after the initial TCP 
handshake has been completed and remain in this state until the connection is 
torn down. 
FIN_WAIT_1 A host enters this state if it's in an ESTABLISHED state and closes its 
side of the connection by sending a FIN packet. 
FIN_WAIT_2 A host enters this state if it's in FIN_WAIT_1 and receives an ACK 
packet from the participating server but not a FIN packet. 
CLOSING A host enters this state if it's in FIN_WAIT_1 and receives a FIN packet 
from the participating host. 
TIME_WAIT A host enters this state if it's in FIN_WAIT_2 when it receives a FIN 
packet from the participating host or receives an ACK packet when it's in 
CLOSING state. 
CLOSE_WAIT A host enters this state if it's in ESTABLISHED state and receives a 
FIN packet from the participating host. 
LAST_ACK A host enters this state if it's in CLOSE_WAIT state after it has sent a 
FIN packet to the participating host. 
CLOSED A host enters this state if it's in LAST_ACK state and receives an ACK, or 
after a timeout occurs when a host is in TIME_WAIT state (that timeout period is 
defined as the maximum segment life of a TCP packet multiplied by two). This 
state is a theoretical one; when a host enters CLOSED state, an implementation 
cleans up the connection and removes it from the active connection structures 
it maintains. 
These states are explained in more detail in RFC 793 
(www.ietf.org/rfc/rfc0793.txt?number=). 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
879 
State transitions generally occur when TCP packets are received that have certain 
flags set or when the local application dealing with the connection forces a change 
(such as closing the connection). If the application layer initiates a state change, the 
TCP/IP stack typically notifies the other endpoint of the state change. 
Flags 
Six TCP flags are used to convey information from one host to the other: 
SYN The synchronize flag is used exclusively for connection establishment. 
Both sides of a connection must have this flag set in the initial packet of a TCP 
connection. 
ACK The acknowledge flag indicates that this packet is acknowledging it has 
received some data from the other host participating in the connection. If this 
flag is set, the acknowledgement number in the TCP header is significant and 
needs to be verified or processed. 
RST The reset flag indicates some sort of unrecoverable problem has occurred 
in a connection, and the connection should be abandoned. 
URG The urgent flag indicates urgent data to be processed (discussed in more 
detail in "URG Pointer Processing" later in this chapter). 
FIN The FIN flag indicates that the issuer wants to close the connection. 
PSH The push flag indicates that data in this packet is high-priority and should 
be delivered to the application as quickly as possible. This flag is largely 
ignored in modern implementations. 
Of the six flags, three are used to cause state changes (SYN, RST, and FIN) and 
appear only when establishing or tearing down a connection. (RST can occur at any 
time, but the result is an immediate termination of the connection.) 
Establishing a Connection 
Establishing a connection is a three-part process, commonly referred to as the 
three-way handshake. An integral part of the three-way handshake is exchanging 
initial sequence numbers, covered in "TCP Spoofing" later in this chapter. For now, 
just focus on the state transitions. Table 14-4 describes the process of setting up a 
connection and summarizes the states the connection goes through. 
Table 14-4. Connection Establishment 
Action 
Client 
State 
Server 
State 
The server listens on a port for a new connection. 
N/A 
LISTEN 
The client sends a SYN packet to the server's open port. SYN_SENT 
LISTEN 
The server receives the packet and enters the SYN_RCVD 
SYN_SENT 
SYN_RCVD 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
880 
Table 14-4. Connection Establishment 
Action 
Client 
State 
Server 
State 
state. 
The server transmits a SYN-ACK packet, acknowledging 
the client's SYN and providing a SYN of its own. 
SYN_SENT 
SYN_RCVD 
The client receives the SYN-ACK and transmits an ACK 
packet, acknowledging the server's SYN. 
ESTABLISHED SYN_RCVD 
The server receives the ACK packet, and the connection 
is fully established. 
ESTABLISHED ESTABLISHED 
Closing a Connection 
Connections are bidirectional, and either direction of traffic can be shut down 
independently. Normally, connections are shut down by the exchange of FIN packets. 
Table 14-5 describes the process. 
Table 14-5. Connection Close 
Action 
Client 
State 
Server 
State 
The client sends a FIN-ACK packet, indicating it wants to 
close its half of the connection. The client enters the 
FIN_WAIT_1 state. 
FIN_WAIT_1 
ESTABLISHED 
The server receives the packet and acknowledges it. 
FIN_WAIT_1 
CLOSE_WAIT 
The client receives the acknowledgement of its FIN. 
FIN_WAIT_2 
CLOSE_WAIT 
The server now elects to close its side of the connection 
and sends a FIN packet. 
FIN_WAIT_2 
LAST_ACK 
The client receives the server's FIN and acknowledges it. TIME_WAIT 
LAST_ACK 
The server receives the acknowledgement. 
TIME_WAIT 
CLOSED 
The client tears down the TCB after waiting enough time 
for the server to receive the acknowledgement. 
CLOSED 
N/A 
Note that connection termination isn't always this straightforward. If one host sends 
a packet with the FIN flag set, it's indicating a termination of the sending channel of 
the established TCP stream, but the hosts receiving channel remains open. Upon 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
881 
receipt of a FIN, a host can send more data across the connection before sending a 
FIN packet of its own. 
Resetting a Connection 
Resetting a connection occurs when some sort of unrecoverable error has occurred 
during the course of connection establishment or data exchange. Resetting the 
connection simply involves a host sending a packet with the RST flag set. RSTs are 
used mainly in these situations: 
Someone sends a SYN to establish a connection with a server, but the server 
port isn't open (that is, no server is listening on the specified port). 
A TCP packet arrives at a host without the SYN flag set, and no valid 
connection can be found to deliver this packet to. 
TCP Streams 
TCP is a stream-oriented protocol, meaning that data is treated as an uninterrupted 
stream (as opposed to a record-based protocol, such as UDP). Streams are tracked 
internally by using sequence numbers, with each sequence number corresponding to 
one byte of data. The TCP header has two sequence number fields: sequence number 
and acknowledgement number. The sequence number indicates where in the data 
stream the data in the packet belongs. The acknowledgement number indicates how 
much of the remote stream has been received successfully and accounted for. This 
field is updated every time the host sees new data from the remote host. If some data 
is lost during transmission, the acknowledgement number isn't updated. Eventually, 
the peer notices it hasn't received an acknowledgement on the data it sent and 
retransmits the missing data. 
Each TCP endpoint maintains a sliding window, which determines which sequence 
numbers it allows from its peer. This window mechanism allows data to be saved 
when it's delivered out of order or if certain segments are corrupted or dropped. It 
also determines how much data the host accepts before having a chance to pass the 
data up to the application layer. For example, say a host is expecting the next 
sequence number to be 0x10000. If the host has a window of 0x1000, it accepts 
segments between 0x10000 and 0x11000. "Future" data is saved and used as soon 
as holes are filled when the missing data is received. 
Both sequence numbers are seeded randomly at the beginning of a new connection 
and then exchanged in the three-way handshake. The starting sequence number is 
called the initial sequence number (ISN). Here's a brief example of a three-way 
handshake and a simple data exchange. First, the client picks a random initial 
sequence number and sends it to the server. Figure 14-11 shows that the client has 
picked 0xabcd. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
882 
Figure 14-11. Transmit 1 
The server also picks a random initial sequence number, 0x4567, which it sets in the 
SYN-ACK packet. The SYN-ACK packet acknowledges the ISN sent by the client by 
setting 0xabce in the acknowledgment number field. If you recall, that field indicates 
the sequence number of the next expected byte of data. SYN and SYN-ACK packets 
consume one sequence number, so the next data you're expecting to receive should 
begin at sequence number 0xabce (see Figure 14-12). 
Figure 14-12. Receive 1 
The client completes the handshake by acknowledging the server's ISN. Note that the 
sequence number has been incremented by one to 0xabce because the SYN packet 
consumed the sequence number 0xabcd. Likewise, the client in this connection 
indicates that the next sequence number it expects to receive from the server is 
0x4568 because 0x4567 was used by the SYN-ACK packet (see Figure 14-13). 
Figure 14-13. Transmit 2 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
883 
Now the client wants to send two bytes of data, the characters HI. The sequence 
number is the same, as the client hasn't sent any data yet. The acknowledgement 
number is also the same because no data has been received yet (see Figure 14-14). 
Figure 14-14. Transmit 3 
The server wants to acknowledge receipt of the data and transmit two bytes of data: 
the characters OK. So the sequence number for the server is 0x4568, as you expect, 
and the acknowledgement number is now set to 0xabd0. This number is used because 
sequence number 0xabce is the character H and sequence number 0xabcf is the 
character I (see Figure 14-15). 
Figure 14-15. Receive 2 
The client doesn't have any new data to send, but it wants to acknowledge receipt of 
the OK data (see Figure 14-16). 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
884 
Figure 14-16. Transmit 3 
TCP Spoofing 
Sending TCP packets with arbitrary source addresses and content is fairly 
straightforwardtypically only a few lines of C code with a library such as libdnet or 
libnet. There are a few reasons attackers would want to send these type of TCP 
packets: 
Attackers might want to fabricate a new connection purporting to be from one 
host to another. Plenty of software has access control policies based on the 
source IP address. The canonical example is something like rsh, which can be 
configured to honor trust relationships between hosts based on the source IP 
address. 
If attackers know about a connection that's underway, they might want to 
insert data into that connection. For example, they could insert malicious shell 
commands into a victim's TELNET session after the victim has logged in. 
Another attack is modifying a file as a user downloads it to insert Trojan code. 
Attackers might want to terminate an ongoing connection, which can be useful 
in attacking distributed systems and performing various denial-of-service 
attacks. 
TCP's main line of defense against these attacks is verifying sequence numbers of 
incoming packets. The following sections examine these attacks in more detail and 
how sequence numbers come into play in each scenario. 
Connection Fabrication 
Say you want to spoof an entire TCP connection from one host to another. You know 
there's a trust relationship between two servers running the remote shell service. If 
you can spoof a rsh connection from one server to the other, you can issue commands 
and take over the target machine. First, you would spoof a SYN packet from server A 
to server B. You can pick a sequence number out of thin air as your initial sequence 
number (see Figure 14-17). 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
885 
Figure 14-17. Transmit 1 
Server B is going to respond to server A with a SYN-ACK containing a randomly 
chosen initial sequence number represented by BBBB in Figure 14-18. 
Figure 14-18. Receive 1 
To complete the three-way handshake and initialize the connection, you need to 
spoof a third acknowledgement packet (see Figure 14-19). 
Figure 14-19. Transmit 2 
The first major obstacle is that you need to see the SYN-ACK packet going from server 
B to server A to observe the sequence number server B chose. Without that sequence 
number, you can't acknowledge the SYN-ACK packet and complete the three-way 
handshake. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
886 
Naturally, if you're on the same network so that you can sniff server B's packets, you 
won't have any problems learning the correct sequence number. If you aren't on the 
same network, and you can't hack the routing infrastructure to see the packet, you 
need to guess! This method is called blind connection spoofing (described in the next 
section). 
The second obstacle to this attack is that the SYN-ACK packet can potentially reach 
server A, and server A isn't expecting it. Server A likely generates a RST in response 
to the SYN-ACK, which messes up your spoofed connection. There are a few ways to 
work around this problem, so consider it a nonissue for the purposes of this 
discussion. 
Blind Connection Spoofing 
If attackers can't see the SYN-ACK packet the victim server generates, they have to 
guess the initial sequence number the victim server chose. Historically, guessing was 
quite simple, as many operating systems used simple incremental algorithms to 
choose their ISNs. 
A common practice was to keep a global ISN variable and increment it by a fixed value 
with every new connection. To exploit this practice, attackers could connect to the 
victim server and observe its choice of ISN. With some simple math, they could 
calculate the next ISN to be used, perform the spoofing attack, and know the correct 
acknowledgement number to spoof. 