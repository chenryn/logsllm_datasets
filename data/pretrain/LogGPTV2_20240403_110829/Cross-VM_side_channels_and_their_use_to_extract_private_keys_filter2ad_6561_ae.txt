is a more diﬃcult case for our attack, since it causes the
IPI VCPU to be descheduled more aggressively, which in
turn interferes with initiating an IPI to the probing VCPU.
When this occurs, the corresponding prime-probe result
must be discarded. Therefore, if the scheduler is non-work-
conserving, data collection takes longer and the fragments
resulting from our HMM tend to be shorter.
These eﬀects are
 0
 80
 60
 40
 20
 120
 100
s
t
n
e
m
g
a
r
f
f
o
r
e
b
m
u
N
Length of fragment (number of operations)
100 120 140 160 180 200 220 240 265 285 305
demonstrated in Fig. 7,
which shows the frag-
ment lengths at the
same stage of pro-
cessing as is reﬂected
in Fig. 6(a) for the
work-conserving case.
Despite the fact that
these fragments are
based on 1, 900, 000, 000
prime-probe trials
(collected during about
45 hours), over six
times the number we collected in Sec. 6.1, only 322 frag-
ments of length at least α resulted—an order of magnitude
less than the work-conserving case. And this occurred de-
spite the fact that we set α to only 100 in the non-work-
conserving case, i.e., half of the value in Sec. 6.1. These 322
fragments yielded 9 spanning sequences with average accu-
racy 0.98, which were “stitched” together into a single key
with only a few missing bits, yielding a search space of only
6615 keys.
Figure 7: Fragment lengths,
non-work-conserving sched-
uler (Sec. 6.2)
7. COUNTERMEASURES
There are multiple avenues for possible defenses against
cross-VM side-channels, whose beneﬁts and downsides we
discuss here.
Avoiding co-residency. In high-security environments, a
longstanding practice is to simply not use the same computer
to execute tasks that must be isolated from each other, i.e.,
to maintain an “air gap” between the tasks. This remains
the most high-assurance defense against side-channel (and
many other) attacks. But this would obviate many of the
3Rather than searching over all three possible operation
assignments to each ∗ symbol, we prune the search space
by grouping assignments into functional equivalence classes;
e.g., (Square, no-op) is equivalent to (no-op, Square).
314current and future uses of VMs, including public clouds that
multiplex physical servers such as Amazon EC2, Windows
Azure, and Rackspace, and the other VM-powered applica-
tions discussed in the introduction.
Side-channel resistant algorithms. There exists a long
line of work on cryptographic algorithms designed to be
side-channel resistant (e.g., [11, 33, 35, 35, 36]). Recent ver-
sions of some cryptographic libraries attempt to prevent the
most egregious side-channels; e.g., one can use the Mont-
gomery ladder algorithm [30] for exponentiation or even a
branchless algorithm. But these algorithms are slower than
leakier ones, legacy code is still in wide use (as exhibited by
the case of libgcrypt), and proving that implementations
are side-channel free remains beyond the scope of modern
techniques. Moreover, our techniques are applicable to non-
cryptographic settings where there are few existing mecha-
nisms for preventing side-channels.
Core scheduling. Another defense might seek to modify
scheduling to at least limit the granularity of interrupt-based
side-channels. The current Xen credit scheduler optimizes
low latency at the cost of allowing frequent interrupts, even
by non-malicious programs. Future Xen releases [42] already
have plans to modify the way interrupts are handled, allow-
ing a VCPU to preempt another VCPU only when the latter
has been running for a certain amount of time (default be-
ing 1ms). This will reduce our side-channel’s measurement
granularity, but not eliminate the side-channel. Coarser side
channels may already prove damaging [39]. A fundamen-
tal question for future work, therefore, is what interruption
granularity best balances performance and security.
8. CONCLUSION
The use of virtualization to isolate a computation from
malicious ones that co-reside with it is growing increasingly
pervasive. This trend has been facilitated by the failure of
today’s operating systems to provide adequate isolation, the
emergence of commodity VMMs oﬀering good performance
(e.g., VMWare, Xen, HyperV), and the growth of cloud fa-
cilities (e.g., EC2, Rackspace) that leverage virtualization
to enable customers to provision computations and services
ﬂexibly. Given the widespread adoption of virtualization, it
is thus critical that its isolation properties be explored and
understood.
In this paper, we have shed light on the isolation prop-
erties (or lack thereof) of a leading VMM (Xen) in SMP
environments, by demonstrating that side-channel attacks
with ﬁdelity suﬃcient to exﬁltrate a cryptographic key from
a victim VM can be mounted. Ours is the ﬁrst demonstra-
tion of such a side-channel in a virtualized SMP environ-
ment. Challenges that our attack overcomes include: pre-
empting the victim VM with suﬃcient frequency to enable
ﬁne-grained monitoring of its I-cache activity; ﬁltering out
numerous sources of noise in the I-cache arising from both
hardware and software eﬀects; and core migration that ren-
ders many attacker observations irrelevant to the task of
extracting the victim’s key. Through a novel combination
of low-level systems implementation and sophisticated tools
such as classiﬁers (e.g., SVMs and HMMs) and sequence
alignment algorithms, we assembled an attack that was suf-
ﬁciently powerful to extract ElGamal decryption keys from
a victim VM in our lab tests.
Acknowledgments
We are grateful to Victor Heorhiadi for his help with ex-
periment setup and for his comments on drafts of this pa-
per, and to Jan Prins for helpful discussions on sequence-
reconstruction algorithms. This work was supported in part
by NSF grants 0910483 and 1065134, the Science of Security
Lablet, and a grant from VMWare.
9. REFERENCES
[1] O. Acii¸cmez. Yet another microarchitectural attack:
Exploiting I-cache. In ACM Workshop on Computer
Security Architecture, pages 11–18, October 2007.
[2] O. Acii¸cmez, B. B. Brumley, and P. Grabher. New
results on instruction cache attacks. In Cryptographic
Hardware and Embedded Systems, CHES 2010, 12th
International Workshop, pages 110–124, August 2010.
[3] O. Acii¸cmez, ¸C. K. Ko¸c, and J.-P. Seifert. On the
power of simple branch prediction analysis. In 2nd
ACM Symposium on Information, Computer and
Communications Security, pages 312–320, March 2007.
[4] O. Acii¸cmez, W. Schindler, and ¸C. K. Ko¸c. Cache
based remote timing attack on the AES. In Topics in
Cryptology – CT-RSA 2007, The Cryptographers’
Track at the RSA Conference 2007, pages 271–286,
February 2007.
[5] O. Acii¸cmez and J.-P. Seifert. Cheap hardware
parallelism implies cheap security. In Workshop on
Fault Diagnosis and Tolerance in Cryptography, pages
80–91, September 2007.
[6] M. Armbrust, A. Fox, R. Griﬃth, A. D. Joseph, R. H.
Katz, A. Konwinski, G. Lee, D. A. Patterson,
A. Rabkin, I. Stoica, and M. Zaharia. A view of cloud
computing. Commun. ACM, 53(4):50–58, 2010.
[7] Celera Assembler.
http://wgs-assembler.sourceforge.net/.
[8] E. Bangerter, D. Gullasch, and S. Krenn. Cache games
– bringing access-based cache attacks on AES to
practice. In 32nd IEEE Symposium on Security and
Privacy, 2011.
[9] P. Barham, B. Dragovic, K. Fraser, S. Hand,
T. Harris, A. Ho, R. Neugebauer, I. Pratt, and
A. Warﬁeld. Xen and the art of virtualization. In 19th
ACM Symposium on Operating Systems Principles,
pages 164–177, 2003.
[10] L. E. Baum, T. Petrie, G. Soules, and N. Weiss. A
maximization technique occurring in the statistical
analysis of probabilistic functions of markov chains.
The Annals of Mathematical Statistics, 41(1):164–171,
1970.
[11] D. J. Bernstein. Cache-timing attacks on AES, 2005.
[12] C. M. Bishop. Pattern Recognition and Machine
Learning. Springer, October 2007.
[13] D. Brumley and D. Boneh. Remote timing attacks are
practical. Computer Networks, 48(5):701–716, 2005.
[14] J. Callas, L. Donnerhacke, H. Finney, and R. Thayer.
Openpgp message format. Technical report, RFC
2440, November, 1998.
[15] C. C. Chang and C. J. Lin. LIBSVM: a library for
support vector machines. ACM Transactions on
Intelligent Systems and Technology (TIST), 2(3):27,
2011.
315[16] D. Chisnall. The Deﬁnitive Guide to the Xen
Hypervisor (Prentice Hall Open Source Software
Development Series). Prentice Hall PTR, November
2007.
[17] ClustalW2. http://www.clustal.org/clustal2/.
[18] Intel Corporation. Intel 64 and IA-32 architectures
software developer’s manual, vol 1-3. http:
//www.intel.com/products/processor/manuals/.
[19] T. ElGamal. A public key cryptosystem and a
signature scheme based on discrete logarithms. IEEE
Transactions on Information Theory, IT-31(4), July
1985.
[20] P. England and J. Manferdelli. Virtual machines for
enterprise desktop security. Information Security
Technical Report, 11(4):193 – 202, 2006.
[21] K. Gandolﬁ, C. Mourtel, and F. Olivier.
Electromagnetic analysis: Concrete results. In
Cryptographic Hardware and Embedded Systems –
CHES 2001, volume 2162 of LNCS, pages 251–261,
May 2001.
[22] T. Garﬁnkel, B. Pfaﬀ, J. Chow, M. Rosenblum, and
D. Boneh. Terra: a virtual machine-based platform for
trusted computing. In ACM Symposium on Operating
Systems Principles, pages 193–206. ACM, 2003.
[23] N. Gautham. Bioinformatics: Databases and
technique in virtual machines. In IEEE International
Performance Computing and Communications
Conference, 2011.
[35] D. Page. Partitioned cache architecture as a
side-channel defence mechanism, 2005.
[36] C. Percival. Cache missing for fun and proﬁt. In
BSDCon 2005, 2005.
[37] M. Piotrowski and A. D. Joseph. Virtics: A system for
privilege separation of legacy desktop applications.
Technical Report EECS-2010-70, U.C. Berkeley, 2010.
[38] J.-J. Quisquater and D. Samyde. Electromagnetic
analysis (EMA): Measures and counter-measures for
smart cards. In Smart Card Programming and
Security, International Conference on Research in
Smart Cards, E-smart 2001, volume 2140 of LNCS,
pages 200–210, September 2001.
[39] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage.
Hey, you, get oﬀ of my cloud: Exploring information
leakage in third-party compute clouds. In 16th ACM
Conference on Computer and Communications
Security, pages 199–212, 2009.
[40] R. L. Rivest, A. Shamir, and L. Adleman. A method
for obtaining digital signatures and public-key
cryptosystems. Communications of the ACM, 21(2),
February 1978.
Algorithms. Alpha Science International Ltd., 2006.
[41] J. Rutkowska and R. Wojtczuk. Qubes OS
[24] Gnu Privacy Guard. www.gnupg.org, 2012.
[25] P. Kocher, J. Jaﬀe, and B. Jun. Diﬀerential power
analysis. In Advances in Cryptology – CRYPTO ’99,
volume 1666 of LNCS, pages 388–397, August 1999.
[26] P. C. Kocher. Timing attacks on implementations of
Diﬃe-Hellman, RSA, DSS, and other systems. In
N. Koblitz, editor, Advances in Cryptology –
Crypto’96, volume 1109 of LNCS, pages 104–113.
Springer-Verlag, 1996.
[27] D. Magenheimer. TSC mode HowTo. Available:
http://mirror.choon.net/xen/xen-unstable.hg/
docs/misc/tscmode.txt.
[28] Andrew Marshall, Michael Howard, Grant Bugher,
and Brian Harden. Security best practices for
developing windows azure applications, June 2010.
[29] R. Meushaw and D. Simard. A network on a desktop.
NSA Tech Trend Notes, 9(4), 2000.
http://www.vmware.com/pdf/TechTrendNotes.pdf.
[30] P. L. Montgomery. Speeding the Pollard and elliptic
curve methods of factorization. Math. Comp,
48(177):243–264, January 1987.
[31] S. B. Needleman and C. D. Wunsch. A general
method applicable to the search for similarities in the
amino acid sequence of two proteins. Journal of
Molecular Biology, 48(3):443–453, March 1970.
[32] M. Neve and J.-P. Seifert. Advances on access-driven
cache attacks on AES. In Selected Areas in
Cryptography, 13th International Workshop, SAC
2006, pages 147–162, August 2006.
[33] D. A. Osvik, A. Shamir, and E. Tromer. Cache attacks
and countermeasures: the case of AES. In Topics in
Cryptology – CT-RSA 2006, pages 1–20.
Springer-Verlag, 2005.
[34] R. Owens and W. Wang. Non-interactive OS
ﬁngerprinting through memory de-duplication
architecture. http://qubes-os.org, 2012.
[42] Xen 4.2: New scheduler parameters.
http://blog.xen.org/index.php/2012/04/10/
xen-4-2-new-scheduler-parameters-2/.
[43] E. Tromer, D. A. Osvik, and A. Shamir. Eﬃcient
cache attacks on AES, and countermeasures. Journal
of Cryptology, 23(1):37–71, 2010.
[44] D. Tsafrir, Y. Etsion, and D. G. Feitelson. Secretly
monopolizing the CPU without superuser privileges.
In 16th USENIX Security Symposium, pages 1–18,
2007.
[45] A. J. Viterbi. Error bounds for convolutional codes
and an asymptotically optimum decoding algorithm.
IEEE Trans. Inform. Theory, IT-13:260–269, April
1967.
[46] M. Weiß, B. Heinz, and F. Stumpf. A cache timing
attack on AES in virtualization environments. In 16th
International Conference on Financial Cryptography
and Data Security, February 2012.
[47] Can I dedicate a cpu core (or cores) only for dom0?
http://wiki.xen.org/wiki/XenCommonProblems#
Can_I_dedicate_a_cpu_core_.28or_cores.29_only_
for_dom0.3F.
[48] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen,
and R. Schlichting. An exploration of L2 cache covert
channels in virtualized environments. In ACM Cloud
Computing Security Workshop, pages 29–40, 2011.
[49] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter.
Homealone: Co-residency detection in the cloud via
side-channel analysis. In 2011 IEEE Symposium on
Security and Privacy, pages 313–328, 2011.
[50] F. Zhou, M. Goel, P. Desnoyers, and R. Sundaram.
Scheduler vulnerabilities and coordinated attacks in
cloud computing. In IEEE International Symposium
on Networking Computing and Applications, 2011.
316