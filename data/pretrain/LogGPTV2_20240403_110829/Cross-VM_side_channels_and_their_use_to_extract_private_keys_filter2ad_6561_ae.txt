### Improved Text

**Challenges in Non-Work-Conserving Schedulers:**

A non-work-conserving scheduler presents a more challenging scenario for our attack. This is because it causes the Inter-Processor Interrupt (IPI) Virtual CPU (VCPU) to be descheduled more aggressively, which in turn interferes with initiating an IPI to the probing VCPU. When this occurs, the corresponding prime-probe result must be discarded. Consequently, if the scheduler is non-work-conserving, data collection takes longer, and the fragments resulting from our Hidden Markov Model (HMM) tend to be shorter.

These effects are demonstrated in Figure 7, which shows the fragment lengths at the same stage of processing as reflected in Figure 6(a) for the work-conserving case. Despite the fact that these fragments are based on 1,900,000,000 prime-probe trials (collected over approximately 45 hours), which is over six times the number we collected in Section 6.1, only 322 fragments of length at least α resulted—an order of magnitude less than the work-conserving case. This occurred even though we set α to only 100 in the non-work-conserving case, i.e., half the value in Section 6.1. These 322 fragments yielded 9 spanning sequences with an average accuracy of 0.98, which were "stitched" together into a single key with only a few missing bits, yielding a search space of only 6615 keys.

**Figure 7: Fragment Lengths, Non-Work-Conserving Scheduler (Section 6.2)**

### Countermeasures

There are multiple avenues for possible defenses against cross-VM side-channels, and we discuss their benefits and downsides here.

**Avoiding Co-Residency:**

In high-security environments, a longstanding practice is to avoid using the same computer to execute tasks that must be isolated from each other, i.e., to maintain an "air gap" between the tasks. This remains the most high-assurance defense against side-channel (and many other) attacks. However, this approach would negate many of the current and future uses of VMs, including public clouds that multiplex physical servers such as Amazon EC2, Windows Azure, and Rackspace, and the other VM-powered applications discussed in the introduction.

**Side-Channel Resistant Algorithms:**

There exists a long line of work on cryptographic algorithms designed to be side-channel resistant (e.g., [11, 33, 35, 36]). Recent versions of some cryptographic libraries attempt to prevent the most egregious side-channels; e.g., one can use the Montgomery ladder algorithm [30] for exponentiation or even a branchless algorithm. However, these algorithms are slower than leakier ones, legacy code is still widely used (as exhibited by the case of libgcrypt), and proving that implementations are side-channel free remains beyond the scope of modern techniques. Moreover, our techniques are applicable to non-cryptographic settings where there are few existing mechanisms for preventing side-channels.

**Core Scheduling:**

Another defense might seek to modify scheduling to at least limit the granularity of interrupt-based side-channels. The current Xen credit scheduler optimizes for low latency at the cost of allowing frequent interrupts, even by non-malicious programs. Future Xen releases [42] already have plans to modify the way interrupts are handled, allowing a VCPU to preempt another VCPU only when the latter has been running for a certain amount of time (default being 1ms). This will reduce our side-channel’s measurement granularity but not eliminate the side-channel. Coarser side channels may still prove damaging [39]. A fundamental question for future work, therefore, is what interruption granularity best balances performance and security.

### Conclusion

The use of virtualization to isolate computations from malicious co-residents is becoming increasingly pervasive. This trend has been facilitated by the failure of today's operating systems to provide adequate isolation, the emergence of commodity VMMs offering good performance (e.g., VMware, Xen, Hyper-V), and the growth of cloud facilities (e.g., EC2, Rackspace) that leverage virtualization to enable customers to provision computations and services flexibly. Given the widespread adoption of virtualization, it is critical that its isolation properties be explored and understood.

In this paper, we shed light on the isolation properties (or lack thereof) of a leading VMM (Xen) in Symmetric Multi-Processing (SMP) environments, by demonstrating that side-channel attacks with sufficient fidelity to exfiltrate a cryptographic key from a victim VM can be mounted. Ours is the first demonstration of such a side-channel in a virtualized SMP environment. Challenges that our attack overcomes include: preempting the victim VM with sufficient frequency to enable fine-grained monitoring of its I-cache activity; filtering out numerous sources of noise in the I-cache arising from both hardware and software effects; and core migration that renders many attacker observations irrelevant to the task of extracting the victim’s key. Through a novel combination of low-level systems implementation and sophisticated tools such as classifiers (e.g., SVMs and HMMs) and sequence alignment algorithms, we assembled an attack that was sufficiently powerful to extract ElGamal decryption keys from a victim VM in our lab tests.

### Acknowledgments

We are grateful to Victor Heorhiadi for his help with experiment setup and for his comments on drafts of this paper, and to Jan Prins for helpful discussions on sequence-reconstruction algorithms. This work was supported in part by NSF grants 0910483 and 1065134, the Science of Security Lablet, and a grant from VMware.

### References

[References remain unchanged]

---

This version of the text is more structured, clear, and professional, with improved coherence and flow.