名字解析
开启名字解析
个网络层地址，例如192.168.1.50这个IP地址，
转换到设备的IEEE指定制造商名称，例如Netgear_01:02:03。
ethers文件尝试进行转换。Wireshark最后的手段便是将MAC地址的前3个字节
址，例如10.100.12.1。如果这种转换尝试失败，Wireshark会使用程序目录中的
协议，试图将数据链路层MAC地址，例如00:09:5B:01:02:03，转换到网络层地
话框。如图5-7所示，Wireshark中有3种类型的名字解析可用。
并分辨出来
domain.com.
地址00:16:CE：6E：8B：24，DNS和ARP协议可以让我们将其名字记作Marketing-2.
特的地址转换到另一个的过程。举例来说，假如一个计算机有着物理的MAC
00:16:CE：6E：8B：24。名字解析（也称为名字查询）就是一个协议用来将一个独
些地址系统通常都因为太长或者太复杂而不容易记住，比如物理硬件地址
个端口号转换成一个与其相关的名字。例是将端口80显示为htp
网络名字解析（Networknameresolution）：
MAC地址解析（MACname resolution）：这种类型的名字解析使用ARP
如果想要开启名字解析，选择Capture->Options，打开Capture Options对
传输名字解析（Transport nameresolution）：这种类型的名字解析尝试将
网络数据通过使用各种各样字母数字组成的寻址地址系统进行传输，但这
图5-7在CaptureOptions对话框中开启名字解析
。将易读的名字对应到这些费解的地址，我们就可以很容易地记住
Enable ransport nameresolution
Enablenetwork name resolution
EnableMACname resolution
Name Resolution
第5章
转换到一个易读的DNS名称，
这种类型的名字解析试图将一
Wireshark高级特性81
---
## Page 99
5.3.2
5.4
5.4.1
82
名字解析的潜在端
协议解析
Wireshark数推创分折实地
地分辨你试图定位数据包来源的计算机名称。
潜在的端，包括如下几点。
更换解析器
并以ICMP数据包格式显示出来。
析器（或者你可以使用C或者Python自己写一个）。
名字解析可能会失败，尤其是当你所查询的名字服务器不知道这个名字的
名字解析有着很多优点，
对DNS名字解析的依赖，会产生额外的数据包，也就是说你的捕获文件中
务器不可用的时候，名字解析就会失败。
信息并不会保存在文件之中。这也就意味着当一个文件名字解析所使用服
名字解析在你每次打开一个捕获文件的时候都要重新进行一次，因为这些
时候。
名字解析会带来额外的处理开销。如果你正在处理一个非常大的捕获文件，
候，避免看到自己的流量是一个典型规则。
可能会被解析那些基于DNS 地址的流量所占据。而在分析其他问题的时
而内存很少的时候，你可能需要关闭名字解析来节约系统资源。
，使用名字解析看上去很容易，但是也存在着一些
---
## Page 100
1556509912612209912615096008
FTPserverapplication），并且之后的儿个数据包清晰地显示了对用户名和密码的
里一定存在着一些问题。如果你单击其中的几个数据包，然后在PacketBytes
多数的正常情况下，在Wireshark中查看SSL流量不会产生有用的信息，但这
Layerprotocol），用来在主机之间进行安全加密的传输。由于其保密性，所以大
包含了大量两台计算机之间的SSL通信。SSL是安全套接层协议（Secure Socket
可以更改Wireshark使用特定解析器的方式。
理员通常会出于安全考虑，或者员工想要避开访问控制时进行设置）。这时我们
当网络上的一个协议使用了不同于标准的配置，比如一个非默认端口（网络管
析器。这个过程被称为强制解码，需要按如下步骤操作
口的443端口。
原因应该是这个FTP流量使用了原本用作HTTPS（基于SSL的HTTP）标准端
可以推测出这应该是一个FTP流量而不是SSL流量，而导致错误选择解析器的
会看到以明文传输的所有用户名和密码（如图5-8所示）。根据这些信息，我们
如果你看第4个数据包，你会发现其中提到了FileZilaFTP服务器程序（FileZila
（如图5-9所示）。
请求与响应。
面板中仔细查看这几个数据包的内容，你会很快发现一些明文流量。事实上，
以便让Wireshark使用FTP解析器对所有端口号为443的TCP流量进行解码
话框，你便可以从中选择你想要使用的解析器。
举例来说，打开wrongdissector.pcap这个捕获文件，可以注意到这个文件中
1.右键单击其中一个SSL数据包，并选择DecodeAs这时会弹出一个对
如果这真是SSL流量，你应该不会读到数据包中的任何数据，并且你也不
2.在下拉菜单中选择destination（443），并在Transport选项卡中选择FTP
为了解决这个问题，你可以强制Wireshark对这个数据包使用FTP协议解
88
wire
图5-8明文用户名和密码？这更像是FTP而不是SSL！
192.
Ca
Dati
#888#
0.493
0.32
第5章
Wireshark高级特性83
---
## Page 101
警告
后保存。在你每次打开捕获文件时，你都要重新进行强制解码的设置。
中对它进行分析，而不是对每一个字节下工夫。
图5-10所示）。你可通过单击Clear按钮把它们清除。
你进行强制解码时产生的更改，并不会在你保存捕获文件并关闭Wireshark
你应该可以看到数据已经被很好地解码，这时你就可以从PacketList面板
3.在你选好之后单击OK，就可以立刻将所做修改应用到捕获文件中去。
你可以在同一个捕获文件中多次使用强制解码功能。当你进行了多次解码
图5-9DecodeAs对话框可以让你创建强制解码器
Denot decnde
Drcode
WiresharkcDeode A
ShenConen
lWintesharkDecodeAr Sh
TCPP443SSLFTP
Table
TP
LnNeTnspog
Value Initial Cutrent
GSMoerTP
FTP-DATA
Gryphon
GNUTELLA
---
## Page 102
5.4.2
5.5
跟踪TCP流
查看解析器源代码
Wireshark（甚至包括Etereal）版本，其中最新版本将在最下面显示出来。在
Wireshark的最新及之前的版本。单击releases文件夹，便能看见所有官方的
查看协议解析器的源代码。这个链接直接指向Wireshark的代码库，里面有
有被正确解析的时候，开源软件就派上用场了。
你可以直接查看源代码来找到具体原因。当你想查明为什么一个特定的协议没
少看一些简单协议的解析器。
基本功能。如果你想深入理解你在Wireshark中所看到的东西，我强烈建议你至
有着很好的注释。你并不需要成为一个C语言专家就可以理解每一个解析器的
命名。
析器。每一个解析器都以packets-protocolname.c（数据包-协议名称.c）的形式
你选择了你想要查看的版本之后，在epan/dissectors文件夹下可以找到协议解
最先建立了到服务器的连接，所以显示为红色。
址的流量。这里颜色的标记以哪方先开始通信为准，在我们的例子中，客户端
址前往目标地址的流量，而蓝色用来区分出相反方向也就是从目标地址到源地
TCP Stream。这时TCP流就会在一个单独的窗口中显示出来（如图5-11
文件中单击任何一个TCP或者HTTP数据包，右键单击这个文件并选择Follow
本应用层协议时非常好用（我们将在下一章中详细讲述这些常见协议是如何工
所示）
作的）。
序使之容易查看，而不需要一小块一小块地看。这在查看HTTP、FTP等纯文
阅读的格式。跟踪TCP流这个功能可以将从客户端发往服务器的数据排好顺
我们注意到这个窗口中的文字以两个颜色显示，其中红色用来标明从源地
这些文件可能会很复杂，但你应该可以发现它们遵循着同一个标准模板并
在Wireshark网站上的Develop链接中，单击Browse the Code，就可以直接
开源软件的美妙之处就在于：如果你对某些事情为什么会发生感到困惑，
Wireshark分析功能中最令人满意的一点就是它能够将TCP流重组成容易
第5章Wireshark高级特性85
---
## Page 103
FollowTCP Str
Stream Content-
AC
EXD
86Wireshark数据包分析实战（第2版）
EindSavt anrintEntie converaton(5se4 bytei
ept
ept:
R
数据包长度
5
ding
图5-11跟踪TCP流窗口将通信内容以更简单可读的方式进行了重新组织
g"uuc.h.
ASCIEBCDICHexDumpCArayRw
.9:4.f......A.Z./
CT.
FilterQutThis-Stream
口回鸡
Ciose
一个以太
---
## Page 104
Packet Lengths，然后单击Create Stat，就会出现一个如图5-12所示的结果窗口。
是一个必需的操作，但在深入分析前做一些类似的假设，有时还是很保险的。
据包，我们仍然可以知道捕获中包含了一个或多个数据传输流量。这可能是HTTP
我们看到较大的数据包占了相当大的比重（66.43%）。即使不看这个文件中的数
数据包长度的分布情况，做一些对流量合理的猜测。
节以供应用层协议的头或者数据使用。基于此，我们可以通过一个捕获文件中
网上的顿最大长度为1518字节，除去以太网、IP以及TCP头，还剩下1460字
便可以假设这个捕获中存在协议控制命令，而没有传输大规模的数据。尽管这不
包，那么很大的可能便是进行了数据传输。如果绝大多数的数据包都很小，我们
然IP或TCP的额外选项会增加这个大小。
如TCP、ACK、RST和FIN数据包—大约是54字节并落入了这个区域。当
及选项的TCP数据包也是20字节，也就意味着典型的TCP控制数据包—例
小。以太网头是14字节（包含4字节CRC），IP头最小20字节，没有数据以
的数据包通常不包含数据的TCP控制数据包。我们可以想一下协议头一般的大
下载、FTP上传，或者其他类型在主机之间进行数据传输的网络通信。
数据包通常是用于传输数据，而较小的数据包则是协议控制序列。在这个例子中，
查看数据包长度是一个概览捕获文件的好方法。如果存在着很多较大的数据
大多数剩下的数据包（33.44%）都是在40~79字节之间，而处于这个范围
我在大小为1280~2559字节的数据包统计数据区域标了高亮。这些较大的
图5-12数据包长度窗口帮助你对捕获文件中的流量进行合理的猜测
文件download-slow.pcap就是一个很好的例子。打开文件后，选择Statistics
i Packet Lengths
PacketLengths1
Topic/tem
5120
640-1279
2560-5119
639-02E
160-319
40-79
20-39
0-19
7127054075766139
1072#0061350
Count Rate
000000
0.000074012%
0.000000
0.000000
0.00000
0100
0.00%
0.00%
Percent
0.00%
第5章Wireshark高级特性87
---
## Page 105
5.7.1
图形展示
查看10图
首先介绍IO图形化功能。
图，找到数据吞吐的峰值，找出不同协议中的性能时滞，以及用来比较实时数据流。
Statistics->10Graphs就可以看到一台电脑从互联网下载文件时10图的例子。
上保持不变，并在最后逐渐减少
例子中，10图显示了下载量，每个周期大约有500个数据包，在其过程中基本
打开download-fast.pcap，单击任意一个TCP数据包将其高亮显示，然后选择
Wireshark的1O图窗口可以让你对网络上的吞吐量进行绘图。你可以利用这些
这个10图窗口显示了捕获文件过程中数据流的一个图形化视图。在图5-13的
GraphaCofot Fitern
Geapha
图5-13快速下载的10图基本上是稳定的
Filter
LEylte
OPY
Style Lint
StyleLine
Style Line
StyleLine
Style-Line
140s
EYiew astime of dry
XARS
Auto
160
1000
500
---
## Page 106
MMM
你就能更清楚地看到这些波动（如图5-15.所示）。
其中甚至暂时接近每秒0个数据包。如果你将这两个捕获文件的1O并排放置，
出这两种类型的吞吐趋势。
过滤器，并让这些线在图上分别以红色和蓝色显示。这样你可以更加容易分辨
并为这些过滤器指定显示的颜色。比如你可以创建只显示ARP和DHCP流量的
的过滤器（使用与将在第6章和第7章介绍的显示或者捕获过滤器相同的语法），
你应该可以注意到这个窗口的下面有一些配置选项。你可以创建5个不同
这个下载过程每秒传输的数据包在0~100个数据包之间，并且波动很大，
Gah clior Fiten
GiraphsCocoe
Graph4lColor
Graph3
araphs
图5-15并排查看多个10图有助于发现它们之间的差异
Liie
图5-14慢速下载的10图一点都不稳定
冒
TMWMM
Teemteratlan
囍一
StyleLine
Syle Dne
Uine
140s
1
Cyew s meof r
Pies per tick
XAos
禁一
第5章Wireshark高级特性89
1501
100
口
中
---
## Page 107
5.7.2
TCPGrsp3
RTT[]
双向时间图
90Wireshark数据包分析实战（第2版）
025
02
0/15
010
中的慢点或者瓶颈，以确定是否存在延迟。
达所发送的确认返回到你的时间之和。
看双向时间图。这个双向时间图如图5-16所示。
数据包，然后选择Statistics->TCPStram Graph->RoundTripTimeGraph，查
我们来试一试这个功能吧。打开download-fast.pcap这个文件，选择一个TCP
Wireshark中的另一
RoundTnpTime Graph
。对双向时间的分析通常被用来找到通信
50000000
X
---
## Page 108
5.7.3
数据流图
是可以接受的。
围，但大多数的双向时间还是可以的，所以对于文件下载来说，这个双向时间
有一些较慢的点位于0.10~0.25s之间。尽管存在少量的值超出了可以接受的范
面板中看到相应的数据包。
些值按照其序列号排序。你可以单击这个图中的任何一个点，并将在PacketList
可以创建一个数据流图（如图5-17所示）。
的数据包以及数据流的类型。在这个例子中，使用默认设置即可，单击OK，便
据流图。
织到一起，以便于你更直观地解读。
非常有用。数据流图一般以列的方式将主机之间的连接显示出来，并将流量组
看上去这个快速下载过程双向时间图中的双向时间大多都在0.05s以下，并
数据流绘图功能对于将连接可视化，以及将一段时间中的数据流显示出来，
这个图中的每一个点都代表了一个数据包的双向时间。在默认情况下，这
Fime