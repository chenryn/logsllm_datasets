图A1-2线程B的exit的效果消失的范例
一
[exi-)
将99指定到counter
减少1
调查ccuner的值
线程
-00
100
100
100
100
counter 的值
1
练习问题的解答
---
## Page 366
会反映到卡保存器（Main Memory）。关于I作内存与上保存器，请参照附录，
“Java 的内存模式”
counter 的值，都贝是对I作内存（Working Memory）进行操作而已，而不见
为 synchronized 或未将 counter 字段设为 volatile 时，其他的线程不管怎样更
将 getCounter 设为 Synchronized 的理由又为何呢?如果没有将 gerCounter 方法
要将enter 方法与j exit 方法设为 synchronized的理由我想各位已经了解了。
public ciass CrackerThread extends Thread
gate.getcounter());
List A13
ptblic void rur() {
public Crackerrhread(SecurityGate gate)
private SecurityGate gate;
for (irl i = 0;
if
qate,ertertl;
g2te.exit(;
表示 enter 与 exit各执行 100000 次的线程的类(CrackerThread.java)
System.ort.printIn("getCounter{)
System.ott.printin("securityGate is NOT safe!");
Syster.cu.printir("securityGate may be safe.");
(yale.yetcourter ()
yetCounter () - --8.
SecurityGate is NOT safe!
Teating SecurityGate...
qetCcunter(l ==
SecurityGate is KoT safe!
Testing SecurityGate...
1
L1
图AI-4执行范例2
图A1-3执行范例】
 ∩ && cwner !- me) {
locks > C ε& wner == mc
notifyzll();
owner = nl.ll;
(l*k -- )
lorks --  1' owrer =- e
re-ur;
lry f
改良后的 Mutex 类(Mutex.java)
wa1);
rlass Mutex
Thread.clr rentThread ();
owrer == me
wner !- me) {
练习问题的解答
9
---
## Page 372
（也就是实际上未置换时），就不会建立出新的实例，原来的实例（this）则会成为返回值。
示。
例，将此实例设为返回值。
属性并没有因此被置换。Replace 方法会新建立·个替代字符串中包含的文字的实
问题2-2的解答
358
问题2-1的解答
注1：但是，代表传递给replace 方法的置换前的文字与置换后的文字的参数值如果相同
List A2-1的程序可以确认己经建立了其他的实例。其执行结果则如图A2-1所
的确，执行问题中所示的程序后，会显示出CAT。但是保存了变量s的实例的
第2章
时间点应该成立的条件。
 public class Mair ↑
List A2-1
×（5）将方法设为synchronized不会导致什么问题，所以应该尽量都加上
O（ 1） java.lang.String 类是 immutable 的类,
J2SE1.4中，Java 新增了新的关键词 assert。使用这个关键字，就可以撰写此
X
O
X
●Assertion功能（名称为日文解释）
● Programming with Assertions
详情请参考如下网站：
http://java.sun.coim/j2se/i.4/docs/gride/lang/asert.html
public static void main(string[l args)
可能会降低类的生存性或性能性，因此并不宜全部都加。
可以直接连接上变成 private 的字段的，只有已经声明白该字段的类。
（4）变成 private的字段可以从该类与子类直接连接。
（3）变成final的字段无法被指定两次。
（2） java.lang.StringBuffer 类是 immutable 的类
h:ttp://www.shudc.net/java/assert/assert.html
String t=s.replace('B'，'c')；// 将'B'代换成'c
Slring s
synchronized.
确认以replace 方法已建立其他实例(Main.java)
"BAT";
---
## Page 373
用的实例的属性也会改变。
问题2-4的解答
的比例，因此本程序的执行范例请作为参考即可。
可能会导致用 synchronized所占的时间增加比例比-般的程序还大，
的时闭：
没有发牛，因此让算的时间为取得实例的 lock 的处理！与释放lock 的处理所花费
lmmutable 模式比起来，约要花2倍的时间。在此，计算时间时，线程的冲突并
问题2-3的解答
这是[因为 gctlnfo 方法的返回值（StringBulfer 的实例）若改变，info 返回值引
Java 编译器的最佳化的不同，或是Java 执行环境的不同等都会大幅影响时间差
实际动手号写看改变UscrInfo实例属性的程序吧（ListA2-2）！
但是，请注意在此我们连续调用出了几乎没有任何处理的方法。
在笔者的使目环境下会得出图 A2-2 这样的结果。使用 synchronized 跟使用
Elapsed time
Syrch: BEGIN
Synch: BEGIN
Elapsed -ime
MotSynch: END
NotSyrch: BEGiN
}else{
if (s == c) （ 
Systen.out.println("s l= s"):
System.out.prin-ln("s =- (");
t-AT
S = BAT
76400msec.
388gemsec。“没有 synchrocized 时所花费的时间
+replace的返回值为"CAT"
图A2-2执行结果
图A2-I执行结果
双方的实例相异
有synchroni zed时所花费的时间
练习问题的解答
这个结果很有
L
68
---
## Page 374
而且还不是final，所以这些字段的值会被自由地改写。因此，Point 类是mutable类。
360
问题2-5的解答
所改变：
更改实例本身。StringBuffer类是mutable。
因此可以从外部来改写inf字段的属性。
StringBuffer 的实例。 StringBulffer 类与 String 类不同，拥有更改内部状态的方法。
方法所得到的 StringBuffer的实例(info)，将"Alice"改写成"Bobby"。之后再度显示看
看，我们可以发现Userlnfo 的实例已经改变了（图A2-3）。
into 字段已被声明为 final，因此 info字段的值本身（指的是那个实例）不会有
我们先从Line 类使用的 Point类看起。Point 类的x字段或y字段变成 public，
String 类的 replace 方法不会更改实例本身，而 StringBufer类的 replace 方法会
Line 类并非 immutablee
用 getnfo 方法得到的 info 字段所拥有的实例并非 Sting 的实例，而是