=> UPDATE accounts SET amount = inc_slow(amount);
Meanwhile,wearegoingtoforbidsequentialscansinanothersession:
=> SET enable_seqscan = off;
Asaresult,theplannerchoosesanindexscanforthenextcommand.
=> EXPLAIN (costs off)
UPDATE accounts SET amount = inc_slow(amount)
WHERE amount > 100.00;
256
13.6 Deadlocks
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Update on accounts
−> Index Scan using accounts_amount_idx on accounts
Index Cond: (amount > 100.00)
(3 rows)
Thesecondandthirdrowssatisfythecondition;sincetheindexisdescending,the
rowswillgetupdatedinthereverseorder.
Let’sstartthenextupdate:
=> UPDATE accounts SET amount = inc_slow(amount)
WHERE amount > 100.00;
The pgrowlocks extension shows that the first operator has already updated the
firstrow(,),whilethesecondonehasmanagedtoupdatethelastrow(,):
=> SELECT locked_row, locker, modes FROM pgrowlocks('accounts');
locked_row | locker | modes
−−−−−−−−−−−−+−−−−−−−−+−−−−−−−−−−−−−−−−−−−
(0,1) | 135005 | {"No Key Update"} first
(0,3) | 135006 | {"No Key Update"} second
(2 rows)
Another second passes. The first operator has updated the second row, and the
otheronewouldliketodoittoo,butitisnotallowed.
=> SELECT locked_row, locker, modes FROM pgrowlocks('accounts');
locked_row | locker | modes
−−−−−−−−−−−−+−−−−−−−−+−−−−−−−−−−−−−−−−−−−
(0,1) | 135005 | {"No Key Update"}
(0,2) | 135005 | {"No Key Update"} thefirstonewins
(0,3) | 135006 | {"No Key Update"}
(3 rows)
Now the first operator would like to update the last table row, but it is already
lockedbythesecondoperator.Adeadlockhasoccurred.
Oneofthetransactionsisaborted:
257
Chapter13 Row-LevelLocks
ERROR: deadlock detected
DETAIL: Process 30805 waits for ShareLock on transaction 135005;
blocked by process 30734.
Process 30734 waits for ShareLock on transaction 135006; blocked by
process 30805.
HINT: See server log for query details.
CONTEXT: while updating tuple (0,2) in relation "accounts"
Andtheothercompletesitsexecution:
UPDATE 3
Although such situations seem impossible, they do occur in high-load systems
whenbatchrowupdatesareperformed.
258
14
Miscellaneous Locks
14.1 Non-Object Locks
Tolockaresourcethatisnotconsideredarelation,Postgreusesheavyweight
locks of the object type.1 You can lock almost anything that is stored in the sys-
temcatalog: tablespaces,subscriptions,schemas,roles,policies,enumerateddata
types,andsoon.
Let’sstartatransactionthatcreatesatable:
=> BEGIN;
=> CREATE TABLE example(n integer);
Nowtakealookatnon-relationlocksinthepg_lockstable:
=> SELECT database,
(
SELECT datname FROM pg_database WHERE oid = database
) AS dbname,
classid,
(
SELECT relname FROM pg_class WHERE oid = classid
) AS classname,
objid,
mode,
granted
FROM pg_locks
WHERE locktype = 'object'
AND pid = pg_backend_pid() \gx
1 backend/storage/lmgr/lmgr.c,LockDatabaseObject&LockSharedObjectfunctions
259
Chapter14 MiscellaneousLocks
−[ RECORD 1 ]−−−−−−−−−−−−−−
database | 16391
dbname | internals
classid | 2615
classname | pg_namespace
objid | 2200
mode | AccessShareLock
granted | t
Thelockedresourceisdefinedherebythreevalues:
database —theoidofthedatabasethatcontainstheobjectbeinglocked(orzero
ifthisobjectiscommontothewholecluster)
classid — the oid listed in pg_class that corresponds to the name of the system
catalogtabledefiningthetypeoftheresource
objid —theoidlistedinthesystemcatalogtablereferencedbyclassid
Thedatabasevaluepointstotheinternalsdatabase;itisthedatabasetowhichthe
currentsessionisconnected.Theclassidcolumnpointstothepg_namespacetable,
whichlistsschemas.
Nowwecandeciphertheobjid:
=> SELECT nspname FROM pg_namespace WHERE oid = 2200;
nspname
−−−−−−−−−
public
(1 row)
Thus,Postgrehaslockedthepublicschematomakesurethatnoonecandelete
itwhilethetransactionisstillrunning.
Similarly,objectdeletionrequiresexclusivelocksonboththeobjectitselfandall
theresourcesitdependson.1
=> ROLLBACK;
1 backend/catalog/dependency.c,performDeletionfunction
260
14.2 RelationExtensionLocks
14.2 Relation Extension Locks
Asthenumberoftuplesinarelationgrows,Postgreinsertsnewtuplesintofree
spaceinthealreadyavailablepageswheneverpossible.Butitisclearthatatsome
pointitwillhavetoaddnewpages,thatis,toextendtherelation. Intermsofthe
physicallayout,newpagesgetaddedtotheendofthecorrespondingfile(which,
inturn,canleadtocreationofanewfile).
Fornewpagestobeaddedbyonlyoneprocessatatime,thisoperationisprotected
byaspecialheavyweightlockoftheextendtype.1 Suchalockisalsousedbyindex
vacuumingtoforbidaddingnewpagesduringanindexscan.
Relationextensionlocksbehaveabitdifferentlyfromwhatwehaveseensofar:
• Theyarereleasedassoonastheextensioniscreated,withoutwaitingforthe
transactiontocomplete.
• Theycannotcauseadeadlock,sotheyarenotincludedintothewait-forgraph.
However,adeadlockcheckwillstillbeperformediftheprocedureofextendingarelation
istakinglongerthandeadlock_timeout. Itisnotatypicalsituation,butitcanhappenifa
largenumberofprocessesperformmultipleinsertionsconcurrently.Inthiscase,thecheck
canbecalledmultipletimes,virtuallyparalyzingnormalsystemoperation.
Tominimizethisrisk,heapfilesareextendedbyseveralpagesatonce(inproportionto v..
thenumberofprocessesawaitingthelock,butnotmorethanpagesperoperation).2
Anexceptiontothisruleis-treeindexfiles,whichareextendedbyonepageatatime.3
14.3 Page Locks
Apage-levelheavyweightlockofthepagetype4isappliedonlybyindexes,and
onlyinthefollowingcase.
1 backend/storage/lmgr/lmgr.c,LockRelationForExtensionfunction
2 backend/access/heap/hio.c,RelationAddExtraBlocksfunction
3 backend/access/nbtree/nbtpage.c,_bt_getbuffunction
4 backend/storage/lmgr/lmgr.c,LockPagefunction
261
Chapter14 MiscellaneousLocks
Gindexescanspeedupsearchofelementsincompoundvalues,suchaswordsin
textdocuments.Theycanberoughlydescribedas-treesthatstoreseparatewords
ratherthanthewholedocuments. Whenanewdocumentisadded,theindexhas
tobethoroughlyupdatedtoincludeeachwordthatappearsinthisdocument.
To improve performance,  indexes allow deferred insertion, which can be en-
on abled using the fastupdate storage parameter. New words are first quickly added
into an unordered pending list, and after a while all the accumulated entries are
movedintothemainindexstructure. Sincedifferentdocumentsarelikelytocon-
tainduplicatewords,thisapproachprovestobequitecost-effective.
Toavoidconcurrenttransferofwordsbyseveralprocesses,theindexmetapageis
lockedintheexclusivemodeuntilallthewordsaremovedfromthependinglist
tothemainindex.Thislockdoesnotinterferewithregularindexusage.
Just like relation extension locks,page locks are released immediately when the
taskiscomplete,withoutwaitingfortheendofthetransaction,sotheynevercause
deadlocks.
14.4 Advisory Locks
Unlikeotherheavyweightlocks(suchasrelationlocks),advisorylocks1 arenever
acquired automatically: they are controlled by the application developer. These
locksareconvenienttouseiftheapplicationrequiresdedicatedlockinglogicfor
someparticularpurposes.
Supposeweneedtolockaresourcethatdoesnotcorrespondtoanydatabaseobject
(whichwecouldlockusingorcommands). Inthiscase,the
resourceneedstobeassignedanumeric.Iftheresourcehasauniquename,the
easiestwaytodoitistogenerateahashcodeforthisname:
=> SELECT hashtext('resource1');
hashtext
−−−−−−−−−−−
991601810
(1 row)
1 postgresql.org/docs/14/explicit-locking#ADVISORY-LOCKS.html
262
14.4 AdvisoryLocks
Postgreprovidesawholeclassoffunctionsformanagingadvisorylocks.1 Their
namesbeginwiththepg_advisoryprefixandcancontainthefollowingwordsthat
hintatthefunctionpurpose:
lock —acquirealock
try —acquirealockifitcanbedonewithoutwaits
unlock —releasethelock
share —useasharedlockingmode(bydefault,theexclusivemodeisused)
xact —acquirealocktilltheendofthetransaction(bydefault,thelockisheldtill
theendofthesession)
Let’sacquireanexclusivelockuntiltheendofthesession:
=> BEGIN;
=> SELECT pg_advisory_lock(hashtext('resource1'));
=> SELECT locktype, objid, mode, granted
FROM pg_locks WHERE locktype = 'advisory' AND pid = pg_backend_pid();
locktype | objid | mode | granted
−−−−−−−−−−+−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−
advisory | 991601810 | ExclusiveLock | t
(1 row)
Foradvisorylockstoactuallywork,otherprocessesmustalsoobservethe estab-
lishedorderwhenaccessingtheresource;itmustbeguaranteedbytheapplication.
Theacquiredlockwillbeheldevenafterthetransactioniscomplete:
=> COMMIT;
=> SELECT locktype, objid, mode, granted
FROM pg_locks WHERE locktype = 'advisory' AND pid = pg_backend_pid();
locktype | objid | mode | granted
−−−−−−−−−−+−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−
advisory | 991601810 | ExclusiveLock | t
(1 row)
Oncetheoperationontheresourceisover,thelockhastobeexplicitlyreleased:
=> SELECT pg_advisory_unlock(hashtext('resource1'));
1 postgresql.org/docs/14/functions-admin#FUNCTIONS-ADVISORY-LOCKS.html
263
Chapter14 MiscellaneousLocks
14.5 Predicate Locks
The term predicate lock appeared as early as the first attempts to implement full
isolationbasedonlocks.1 Theproblemconfrontedatthattimewasthatlocking
alltherowstobereadandupdatedstillcouldnotguaranteefullisolation.Indeed,
if new rows that satisfy the filter condition get inserted into the table, they will
p. becomephantoms.
Forthisreason,itwassuggestedtolockconditions(predicates)ratherthanrows.
Ifyourunaquerywiththea>10predicate,lockingthispredicatewillnotallow
addingnewrowsintothetableiftheysatisfythiscondition,sophantomswillbe
avoided. The trouble is that if a query with a different predicate appears, such
as a  CREATE TABLE pred(n numeric, s text);
=> INSERT INTO pred(n) SELECT n FROM generate_series(1,10000) n;
=> CREATE INDEX ON pred(n) WITH (fillfactor = 10);
=> ANALYZE pred;
Ifthequeryperformsasequentialscan,apredicatelockisacquiredonthewhole
table(evenifsomeoftherowsdonotsatisfytheprovidedfilterconditions).
=> SELECT pg_backend_pid();
pg_backend_pid
−−−−−−−−−−−−−−−−
34763
(1 row)
=> BEGIN ISOLATION LEVEL SERIALIZABLE;
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT * FROM pred WHERE n > 100;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Seq Scan on pred (actual rows=9900 loops=1)
Filter: (n > '100'::numeric)
Rows Removed by Filter: 100
(3 rows)
265
Chapter14 MiscellaneousLocks
Althoughpredicatelockshavetheirowninfrastructure,thepg_locksviewdisplays
themtogetherwithheavyweightlocks. Allpredicatelocksarealwaysacquiredin
theSIReadmode,whichstandsforSerializableIsolationRead:
=> SELECT relation::regclass, locktype, page, tuple
FROM pg_locks WHERE mode = 'SIReadLock' AND pid = 34763
ORDER BY 1, 2, 3, 4;
relation | locktype | page | tuple
−−−−−−−−−−+−−−−−−−−−−+−−−−−−+−−−−−−−
pred | relation | |
(1 row)
=> ROLLBACK;
You should bear in mind that predicate locks may be held longer than the trans-
actionduration,astheyareusedtotrackdependenciesbetweentransactions. But
anyway,theyaremanagedautomatically.
Ifthequeryperformsanindexscan,thesituationimproves. Fora-treeindex,it
isenoughtosetapredicatelockonthereadheaptuplesandonthescannedleaf
pagesoftheindex. Itwill“lock”thewholerangethathasbeenread,notonlythe
exactvalues.
=> BEGIN ISOLATION LEVEL SERIALIZABLE;
=> EXPLAIN (analyze, costs off, timing off, summary off)
SELECT * FROM pred WHERE n BETWEEN 1000 AND 1001;
QUERY PLAN