1
How To Shot Web
(Better hacking in 2015)
2
Jason Haddix
●
Bugcrowd
●
Director of Technical Ops
●
Hacker & Bug hunter
●
#1 on all-time leaderboard bugcrowd 2014
whoami
@jhaddix
3
Hack
Stuff
Better
(and practically)
What this talk’s about...
And…LOTS of memes…. only some are funny
4
Step 1: Cut a hole in a box... j/k
Step 1: Started with my bug hunting methodology 
Step 2: Parsed some of the top bug hunters’ research (web/mobile only for now)
Step 3: Create kickass preso
Topics? BB philosophy shifts, discovery 
techniques, mapping methodology,  parameters 
oft attacked, useful fuzz strings, bypass or filter 
evasion techniques, new/awesome tooling
More Specifically
5
Philosophy
6
Differences from standard testing
Single-sourced
Crowdsourced
●
looking mostly for 
common-ish vulns 
●
not competing with 
others
●
incentivized for count
●
payment based on sniff 
test
●
looking for vulns that 
aren’t as easy to find
●
racing vs. time
●
competitive vs. others
●
incentivized to find 
unique bugs
●
payment based on 
impact not number of 
findings
7
The regular methodologies
8
Discovery
9
Find the road less traveled
^ means find the application (or parts of an 
application) less tested.
1.
*.acme.com scope is your friend
2.
Find domains via Google (and others!)
a.
Can be automated well via recon-ng 
and other tools.
3.
Port scan for obscure web servers or 
services (on all domains)
4.
Find acquisitions and the bounty 
acquisition rules
a.
Google has a 6 month rule
5.
Functionality changes or re-designs
6.
Mobile websites
7.
New mobile app versions
10
Tool: Recon-ng script (enumall.sh)
https://github.com/jhaddix/domain
11
12
LMGTFY
13
LMGTFY
14
15
https://www.facebook.com/notes/phwd/facebook-bug-bounties/707217202701640
16
Port scanning is not just for Netpen!
A full port scan of all your new found targets will usually 
yield #win:
●
separate webapps
●
extraneous services 
●
Facebook had Jenkins Script console with no auth
●
IIS.net had rdp open vulnerable to MS12_020
   nmap -sS -A -PN -p- --script=http-title dontscanme.bro
^ syn scan, OS + service fingerprint, no ping, all ports, 
http titles 
Port Scanning!
17
Mapping
18
Mapping tips
●
Google
●
*Smart* Directory Brute Forcing
●
RAFT lists (included in Seclists)
●
SVN Digger (included in Seclists)
●
Git Digger 
●
Platform Identification:
●
Wapplyzer (Chrome)
●
Builtwith (Chrome)
●
retire.js (cmd-line or Burp)
●
Check CVE’s
●
Auxiliary
●
WPScan
●
CMSmap
19
Directory Bruteforce Workflow
After bruteforcing look for other status codes indicating you are denied or require auth then 
append list there to test for misconfigured access control.
Example:
GET http://www.acme.com  - 200
GET http://www.acme.com/backlog/  - 404
GET http://www.acme.com/controlpanel/  - 401 hmm.. ok
GET http://www.acme.com/controlpanel/[bruteforce here now]
20
Mapping/Vuln Discovery using OSINT
Find previous/existing problem:
●
Xssed.com
●
Reddit XSS - /r/xss
●
Punkspider
●
xss.cx
●
xssposed.org
●
twitter searching
●
++
Issues might already reported but use the flaw area 
and injection type to guide you to further injections or 
filter bypass.
21
Intrigue 
New OSINT/Mapping project, intrigue:
●
250+ bounty programs
●
Crawl
●
DNS info + bruteforce
●
Bounty metadata (links, rewards, scope)
●
API
22
23
Intrigue and Maps projects 
New OSINT/Mapping project, intrigue:
●
250+ bounty programs
●
Crawl
●
DNS info + bruteforce
●
Bounty metadata (links, rewards, scope)
●
API
24
Crawling
Using + Ruby + Anemone + JSON + Grep
$cat test_target_json.txt | grep redirect
https://test_target/redirect/?url=http://twitter.com/...
https://test_target/redirect/?url=http://facebook.com/...
https://test_target/redirect/?url=http://pinterest.com/...
25
Intrigue Tasks
Using + Ruby + Anemone + JSON + Grep
● Brute force
● Spider
● Nmap
● etc
26
27
28
Auth and Session
29
Auth (better be quick)
Auth Related (more in logic, priv, and transport sections)
●
User/pass discrepancy flaw
●
Registration page harvesting
●
Login page harvesting
●
Password reset page harvesting
●
No account lockout
●
Weak password policy
●
Password not required for account updates
●
Password reset tokens (no expiry or re-use)
30
Session (better be quick)
Session Related
●
Failure to invalidate old cookies
●
No new cookies on login/logout/timeout
●
Never ending cookie length
●
Multiple sessions allowed
●
Easily reversible cookie (base64 most often)
31
Tactical Fuzzing - XSS
32
XSS
Core Idea: Does the page functionality display something to the users?
For time sensitive testing the 80/20 rule 
applies. Many testers use Polyglot payloads. 
You probably have too!
33
XSS
';alert(String.fromCharCode(88,83,83))//';alert(String.
fromCharCode(88,83,83))//";alert(String.fromCharCode
(88,83,83))//";alert(String.fromCharCode(88,83,83))//--
>">'>
Multi-context, filter bypass based polyglot payload #1 (Rsnake XSS Cheat Sheet)
34
XSS
'">>"
>@gmail.com'-->"
>">'">
Multi-context, filter bypass based polyglot payload #2 (Ashar Javed XSS Research)
35
XSS
“ onclick=alert(1)// */ alert(1)//
Multi-context, filter bypass based polyglot payload #3 (Mathias Karlsson)
36
Other XSS 
Observations
Input Vectors
Customizable Themes & Profiles via CSS
Event or meeting names
URI based
Imported from a 3rd party (think Facebook integration)
JSON POST Values (check returning content type)
File Upload names
Uploaded files (swf, HTML, ++)
Custom Error pages
fake params - ?realparam=1&foo=bar’+alert(/XSS/)+’
Login and Forgot password forms
37
SWF Parameter XSS 
Common Params:
Common Params: 
onload, allowedDomain, movieplayer, xmlPath, eventhandler, callback (more on OWASP page)
Common Injection Strings:
\%22})))}catch(e){alert(document.domain);}//
"]);}catch(e){}if(!self.a)self.a=!alert(document.domain);//
"a")(({type:"ready"}));}catch(e){alert(1)}//
38
SWF Parameter XSS 
39
Tactical Fuzzing - SQLi
40
SQL Injection
Core Idea: Does the page look like it might need to call on stored data?
There exist some SQLi polyglots, i.e;
SLEEP(1) /*‘ or SLEEP(1) or ‘“ or SLEEP(1) or “*/
Works in single quote context, works in double quote context,  works in “straight into query” 
context! (Mathias Karlsson)
41
SQL Injection
You can also leverage the large database of 
fuzzlists from Seclists here:
42
SQL Injection Observations
Blind is predominant, Error based is highly unlikely.
‘%2Bbenchmark(3200,SHA1(1))%2B’
‘+BENCHMARK(40000000,SHA1(1337))+’
 SQLMap is king!
●
Use -l to parse a Burp log file.
●
Use Tamper Scripts for blacklists.
●
SQLiPy Burp plugin works well to instrument SQLmap quickly. 
Lots of injection in web services!
Common Parameters or Injection points
ID
Currency Values
Item number values
sorting parameters (i.e order, sort, etc)
JSON and XML values
Cookie values (really?)
Custom headers (look for possible 
integrations with CDN’s or WAF’s)
REST based Services
43
SQLmap SQLiPy
44
Best SQL injection resources
DBMS Specific Resources
mySQL
PentestMonkey's mySQL injection cheat sheet
Reiners mySQL injection Filter Evasion Cheatsheet
MSSQL
EvilSQL's Error/Union/Blind MSSQL Cheatsheet
PentestMonkey's MSSQL SQLi injection Cheat Sheet
ORACLE
PentestMonkey's Oracle SQLi Cheatsheet
POSTGRESQL
PentestMonkey's Postgres SQLi Cheatsheet
Others
Access SQLi Cheatsheet
PentestMonkey's Ingres SQL Injection Cheat Sheet
pentestmonkey's DB2 SQL Injection Cheat Sheet
pentestmonkey's Informix SQL Injection Cheat Sheet
SQLite3 Injection Cheat sheet
Ruby on Rails (Active Record) SQL Injection Guide
45
Tactical Fuzzing - FI & Uploads
46
Local file inclusion
Core Idea: Does it (or can it) interact with the server file system?
Liffy is new and cool here but you can also use Seclists:
Common Parameters or Injection points