# Web Hacking: A Comprehensive Guide (Updated for 2015)

## Speaker Information
- **Name:** Jason Haddix
- **Affiliation:** Bugcrowd
- **Role:** Director of Technical Operations
- **Credentials:**
  - Hacker and Bug Hunter
  - #1 on the all-time leaderboard at Bugcrowd in 2014
- **Contact:** @jhaddix

## Overview
This presentation will cover advanced techniques for web hacking, focusing on practical methods and tools. The talk will include numerous memes, some of which are guaranteed to be humorous.

## Presentation Outline
### Step 1: Introduction
- **Methodology:** Start with my personal bug hunting methodology.
- **Research:** Analyze the approaches of top bug hunters (web and mobile).
- **Presentation:** Create a comprehensive and engaging presentation.

### Topics Covered
- Bug bounty philosophy shifts
- Discovery techniques
- Mapping methodologies
- Commonly attacked parameters
- Useful fuzz strings
- Bypass and filter evasion techniques
- New and effective tooling

## Philosophy
### Differences from Standard Testing
- **Single-Sourced vs. Crowdsourced:**
  - **Single-Sourced:**
    - Focus on common vulnerabilities
    - No competition with others
    - Incentivized by the number of findings
    - Payment based on a "sniff test"
  - **Crowdsourced:**
    - Search for less obvious vulnerabilities
    - Time-sensitive and competitive
    - Incentivized to find unique bugs
    - Payment based on the impact of findings

## Regular Methodologies
### Discovery
- **Find the Less Traveled Path:**
  - Identify less tested parts of the application.
  - Utilize scope like `*.acme.com`.
  - Use Google and other search engines to find domains.
  - Automate domain discovery with tools like `recon-ng`.
  - Perform port scans for obscure web servers and services.
  - Investigate acquisitions and their bounty rules.
  - Look for functionality changes or redesigns.
  - Examine mobile websites and new app versions.

### Tool: Recon-ng Script (enumall.sh)
- **GitHub Repository:** [https://github.com/jhaddix/domain](https://github.com/jhaddix/domain)

### LMGTFY (Let Me Google That For You)
- **Resource:** [Facebook Bug Bounty Notes](https://www.facebook.com/notes/phwd/facebook-bug-bounties/707217202701640)

### Port Scanning
- **Importance:** A full port scan can reveal:
  - Separate web applications
  - Extraneous services
  - Vulnerable configurations (e.g., Facebook's Jenkins Script console, IIS.net's RDP vulnerability)
- **Example Command:**
  ```sh
  nmap -sS -A -PN -p- --script=http-title dontscanme.bro
  ```

## Mapping
### Tips
- **Tools and Techniques:**
  - Google
  - Smart Directory Brute Forcing
  - RAFT lists (included in Seclists)
  - SVN Digger and Git Digger
  - Platform Identification: Wapplyzer, Builtwith, retire.js
  - Check CVEs
  - Auxiliary Tools: WPScan, CMSmap

### Directory Bruteforce Workflow
- **Process:**
  - After brute-forcing, look for status codes indicating denied access or authentication requirements.
  - Example:
    ```http
    GET http://www.acme.com  - 200
    GET http://www.acme.com/backlog/  - 404
    GET http://www.acme.com/controlpanel/  - 401
    GET http://www.acme.com/controlpanel/[bruteforce here now]
    ```

### OSINT and Vuln Discovery
- **Resources:**
  - Xssed.com
  - Reddit XSS - /r/xss
  - Punkspider
  - xss.cx
  - xssposed.org
  - Twitter searching
- **Guidance:** Use reported flaws to guide further testing and bypass filters.

### Intrigue
- **New OSINT/Mapping Project:**
  - Supports 250+ bounty programs
  - Features: Crawl, DNS info + bruteforce, bounty metadata, API

### Crawling
- **Using Ruby, Anemone, JSON, and Grep:**
  ```sh
  $cat test_target_json.txt | grep redirect
  https://test_target/redirect/?url=http://twitter.com/...
  https://test_target/redirect/?url=http://facebook.com/...
  https://test_target/redirect/?url=http://pinterest.com/...
  ```

### Intrigue Tasks
- **Capabilities:**
  - Brute force
  - Spider
  - Nmap
  - etc.

## Authentication and Session Management
### Authentication
- **Common Flaws:**
  - User/pass discrepancy
  - Registration, login, and password reset page harvesting
  - Lack of account lockout
  - Weak password policies
  - Password not required for account updates
  - Password reset tokens without expiry or reuse

### Sessions
- **Common Issues:**
  - Failure to invalidate old cookies
  - No new cookies on login/logout/timeout
  - Infinite cookie length
  - Multiple sessions allowed
  - Easily reversible cookies (often base64 encoded)

## Tactical Fuzzing
### Cross-Site Scripting (XSS)
- **Core Idea:** Does the page display user input?
- **Polyglot Payloads:**
  - Example 1: `';alert(String.fromCharCode(88,83,83))//';alert(String.fromCharCode(88,83,83))//";alert(String.fromCharCode(88,83,83))//";alert(String.fromCharCode(88,83,83))//-->"'>`
  - Example 2: `'"@gmail.com'-->"'>"'>`
  - Example 3: `" onclick=alert(1)// */ alert(1)//`

### Input Vectors
- **Common Vectors:**
  - Customizable themes and profiles via CSS
  - Event or meeting names
  - URI-based inputs
  - Imported data from third parties (e.g., Facebook integration)
  - JSON POST values
  - File upload names
  - Uploaded files (SWF, HTML, etc.)
  - Custom error pages
  - Fake parameters: `?realparam=1&foo=bar’+alert(/XSS/)+’`
  - Login and forgot password forms

### SWF Parameter XSS
- **Common Parameters:**
  - onload, allowedDomain, movieplayer, xmlPath, eventhandler, callback
- **Injection Strings:**
  - `\%22})))}catch(e){alert(document.domain);}//`
  - `"]);}catch(e){}if(!self.a)self.a=!alert(document.domain);//`
  - `"a")(({type:"ready"}));}catch(e){alert(1)}//`

### SQL Injection (SQLi)
- **Core Idea:** Does the page need to call stored data?
- **Polyglot Payloads:**
  - Example: `SLEEP(1) /*‘ or SLEEP(1) or ‘“ or SLEEP(1) or “*/`
- **Fuzzlists:** Use Seclists for extensive fuzzing.
- **Observations:**
  - Blind SQLi is predominant; error-based is rare.
  - Example payloads: `'%2Bbenchmark(3200,SHA1(1))%2B'`, `'+BENCHMARK(40000000,SHA1(1337))+'`
- **Tools:**
  - SQLMap: Use `-l` to parse Burp logs, tamper scripts for blacklists, and SQLiPy for quick instrumentation.
- **Common Injection Points:**
  - ID, currency values, item numbers, sorting parameters, JSON/XML values, cookie values, custom headers, REST-based services

### Best SQL Injection Resources
- **DBMS Specific:**
  - MySQL: PentestMonkey's MySQL injection cheat sheet, Reiners' MySQL injection filter evasion cheatsheet
  - MSSQL: EvilSQL's Error/Union/Blind MSSQL cheatsheet, PentestMonkey's MSSQL SQLi injection cheat sheet
  - Oracle: PentestMonkey's Oracle SQLi cheat sheet
  - PostgreSQL: PentestMonkey's Postgres SQLi cheat sheet
  - Others: Access SQLi cheatsheet, PentestMonkey's Ingres, DB2, Informix, SQLite3, and Ruby on Rails (Active Record) SQL injection guides

### Local File Inclusion (LFI)
- **Core Idea:** Does it (or can it) interact with the server file system?
- **Tools:**
  - Liffy (new and cool)
  - Seclists
- **Common Parameters:**
  - File paths, directory traversals, etc.

This optimized version provides a clear and professional structure, making the content more accessible and coherent.