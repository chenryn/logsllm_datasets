PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Porting Oracle Applications to PostgreSQL
Peter Eisentraut, credativ GmbH / credativ Ltd.
PGCon 2008
PortingOracleApplicationstoPostgreSQL:1/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Disclaimers
This presentation was written by a PostgreSQL expert, not an
Oracle expert.
Both Oracle and PostgreSQL are diverse, complex, and
moving targets.
Both Oracle and PostgreSQL are (probably) Turing-complete,
so almost anything is “possible”, but we are looking for
reasonable options.
PortingOracleApplicationstoPostgreSQL:2/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
You Will See ...
Porting projects are hard.
Compatibility and compatibility layers are an illusion.
It might be better not to do it.
But success can be very rewarding.
PortingOracleApplicationstoPostgreSQL:3/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outline
1 Porting the SQL
2 Porting Tools
3 PL/SQL vs. PL/pgSQL
4 Interfaces
5 Project Management
PortingOracleApplicationstoPostgreSQL:4/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outline
1 Porting the SQL
2 Porting Tools
3 PL/SQL vs. PL/pgSQL
4 Interfaces
5 Project Management
PortingOracleApplicationstoPostgreSQL:5/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Syntax
Identifiers Oracle case folds to upper case, PostgreSQL to lower
case. Big trouble if you mix quoted and unquoted
identifiers.
Column aliases SELECT foo [AS] bar — Most Oracle
applications omit the AS, but PostgreSQL requires it.
Fixed in PostgreSQL 8.4.
MINUS Change to EXCEPT.
SQL key words Usually not a big problem, but should be kept in
mind.
“FROM dual” Easy to work around (or use orafce).
PortingOracleApplicationstoPostgreSQL:6/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Table Definition
The usual features are mostly the same: columns, constraints,
defaults.
Data types are more work; see below.
No fancy features like “table of type”.
PortingOracleApplicationstoPostgreSQL:7/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Data Types: General
Both Oracle and PostgreSQL support plenty of
SQL-conforming data types.
But usually the nonconforming ones are in wider use.
Thin compatibility layers can usually help, but that will make
your PostgreSQL application unpretty.
A big search-and-replace is usually in order.
PortingOracleApplicationstoPostgreSQL:8/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Data Types: Specifics
varchar2 → varchar or text
clob, long → varchar or text
nchar, nvarchar2, nclob → (varchar or text)
number → numeric or bigint or int or smallint or double
precision or real (bug potential)
binary float/binary double → real/double precision
blob, raw, long raw → bytea (additional porting required)
date → date or timestamp
PortingOracleApplicationstoPostgreSQL:9/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Null Values
Infamous Oracle behavior: NULL = ’’
Consequently, ’’ = ’’ is not true
Completely weird and inconsistent
Usually, your data will just disappear in PostgreSQL
transform_null_equals does not help here
If your application relies on any of this, you are in trouble.
PortingOracleApplicationstoPostgreSQL:10/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Functions: General
Function compatibility is a bottomless pit.
PostgreSQL (+ orafce) supports many Oracle compatibility
functions.
It’s easy to write your own.
Only the special syntax is trouble.
PortingOracleApplicationstoPostgreSQL:11/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Functions: Compatibility
For example, the following common functions are supported by
PostgreSQL as well:
substr
to char
nvl, nullif (orafce)
PortingOracleApplicationstoPostgreSQL:12/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Functions: Specifics
Manual work required here:
sysdate → current_timestamp or localtimestamp
PortingOracleApplicationstoPostgreSQL:13/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Functions: decode
DECODE(expr, search, expr[, search, expr...] [, default])
becomes
CASE WHEN expr THEN search .. ELSE default END
PortingOracleApplicationstoPostgreSQL:14/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Default Parameters: Overview
PostgreSQL supports neither default values for parameters nor
named parameters in function calls.
Oracle applications make ample use of both.
PortingOracleApplicationstoPostgreSQL:15/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Default Parameters: The Easy Case
CREATE FUNCTION foo (a int, b int, c int = 0) ...
becomes
CREATE FUNCTION foo (a int, b int, c int) ...
CREATE FUNCTION foo (a int, b int) ...
AS $$ SELECT foo(a, b, 0) $$;
PortingOracleApplicationstoPostgreSQL:16/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Default Parameters: The Hard Case
CREATE FUNCTION foo (a int, b int = 5, c int = 0) ...
This is only callable with named parameters.
PostgreSQL doesn’t support this.
You will have to change your client application.
Your project time will double.
PortingOracleApplicationstoPostgreSQL:17/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Default Parameters: Conclusion
Approx. 97% of applications to be ported contain issues like
this.
Client code must be reworked.
Adding this support in PostgreSQL would be a great feature.
PortingOracleApplicationstoPostgreSQL:18/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Sequences: Creating
Sequences are somewhat compatible ...
Change NOCACHE to CACHE 1 (or omit).
MAXVALUE 9999999999999999999999999 needs to be
reduced.
Don’t rely on the caching behavior.
PortingOracleApplicationstoPostgreSQL:19/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Sequences: Using
Oracle syntax: sequence_name.nextval
PostgreSQL syntax: nextval(’sequence_name’)
Search-and-replace; but direct sequence calls are rare.
PortingOracleApplicationstoPostgreSQL:20/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outer Joins: Overview
PostgreSQL only supports the SQL-standard outer join syntax.
Oracle supports it since version 9.
Most Oracle code uses the old, Oracle-specific syntax.
Porting is usually straightforward, but requires manual work.
Set up test queries to catch porting mistakes.
PortingOracleApplicationstoPostgreSQL:21/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outer Joins: Simple Example
SELECT * FROM a, b WHERE a.x = b.y(+)
becomes
SELECT * FROM a LEFT JOIN b ON a.x = b.y
PortingOracleApplicationstoPostgreSQL:22/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outer Joins: Complex Example
SELECT ...
FROM A, B, C
WHERE A.A_ID (+) = B.A_ID
AND C.C_KEY(+) = B.C_KEY
becomes
SELECT ...
FROM A
RIGHT JOIN
B ON (A.A_ID = B.A_ID)
LEFT JOIN
C ON (C.C_KEY = B.C_KEY)
PortingOracleApplicationstoPostgreSQL:23/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outer Joins: Unclear Example
SELECT ...
FROM A, B, C, D, E
WHERE A.A_ID = B.A_ID
AND B.B_ID = C.A_ID(+)
AND B.B_KEY = C.B_KEY(+)
AND C.C_ID = D.C_ID(+)
AND B.A_ID = E.A_ID(+)
AND B.B_KEY = E.B_KEY(+)
AND ’CONSTANT’ = C.X_ID(+)
What’s that???
PortingOracleApplicationstoPostgreSQL:24/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Locking
Transaction isolation, locking, SELECT FOR UPDATE behave
pretty much the same.
Oracle also defaults to read committed.
Usually, no one at the client has ever heard of concurrency
issues, so the code is likely buggy anyway.
PortingOracleApplicationstoPostgreSQL:25/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Indexes
Basic syntax the same:
CREATE INDEX name ON table (a, b)
Primary keys and unique constraints are automatically
indexed.
Other features are implementation-specific.
You will have to re-tune the entire porting result anyway.
PortingOracleApplicationstoPostgreSQL:26/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Optimizer Hints
Delete them
Or keep them for future investigation
Usually useless
PortingOracleApplicationstoPostgreSQL:27/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Date Formatting
TO_CHAR is largely compatible.
Warning: PostgreSQL version is not very robust.
One-argument variant provided by orafce
NLS_DATE_FORMAT is replaced by locale settings.
PortingOracleApplicationstoPostgreSQL:28/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Date Arithmetic
Usually, date arithmetic is easier in PostgreSQL, so consider a
small code rewrite.
orafce provides compatibility functions, such as last_day,
add_months.
Oracle code often does date + int ...
In PostgreSQL, this may become timestamp + int.
This doesn’t work.
Write a custom operator or rewrite the code.
PortingOracleApplicationstoPostgreSQL:29/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Encodings
Both Oracle and PostgreSQL support the same ideas.
But everything is named differently.
Might be a good time to review the encoding and locale
choices.
PortingOracleApplicationstoPostgreSQL:30/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
NLS * vs. LC *
Approximate analogies:
NLS CALENDAR —
NLS COMP lc collate = ’C’
NLS CURRENCY lc monetary
NLS DATE FORMAT DateStyle
NLS DATE LANGUAGE lc messages, lc time (8.4?)
NLS LANG, NLS LANGUAGE LANG, client encoding
NLS NCHAR —
NLS NUMERIC CHARACTERS lc numeric
NLS SORT lc collate
NLS TERRITORY LANG, lc *
PortingOracleApplicationstoPostgreSQL:31/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
ROWNUM and ROWID
ROWNUM:
Use generate_series, or
Rewrite and apply LIMIT, or
Just handle in the client
ROWID:
Analogous to ctid
Good code should usually not use this.
That does not prevent some from trying.
PortingOracleApplicationstoPostgreSQL:32/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
XML
(untested!)
xmltype → xml
extract → xpath
XMLELEMENT, XMLATTRIBUTES, etc. are the same.
Most functionality is different or missing in PostgreSQL.
PortingOracleApplicationstoPostgreSQL:33/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Triggers: Declarations
Oracle uses inline trigger actions:
CREATE TRIGGER foo AFTER action ON table
AS BEGIN ... END;
becomes
CREATE OR REPLACE FUNCTION foo_tg() RETURNS TRIGGER
LANGUAGE xxx
AS $$ ... $$;
CREATE TRIGGER foo AFTER action ON table
EXECUTE PROCEDURE foo_tg();
Note: FOR EACH STATEMENT is the default in Oracle and
PostgreSQL.
PortingOracleApplicationstoPostgreSQL:34/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Triggers: Column-Level Triggers
Oracle supports column-level triggers:
CREATE TRIGGER foo BEFORE UPDATE OF column ON table
AS BEGIN ... END;
becomes
CREATE OR REPLACE FUNCTION foo_tg() RETURNS TRIGGER
LANGUAGE xxx AS $$
BEGIN
IF NEW.column IS NOT DISTINCT FROM OLD.column THEN
RETURN NEW;
END IF;
... -- normal code
END;
$$;
CREATE TRIGGER foo AFTER action ON table
EXECUTE PROCEDURE foo_tg();
But this doesn’t catch updates to the same value.
You will need to make a choice which behavior you need.
PortingOracleApplicationstoPostgreSQL:35/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Things That Won’t Work Directly
CONNECT BY Try contrib/tablefunc.
Materialized views Write your own wrapper.
Snapshots Write your own wrapper.
Database links Use contrib/dblink plus views.
Autonomous transactions Try dblink.
Synonyms Try views or wrapper or schema path.
Partitioning Write your own system.
PortingOracleApplicationstoPostgreSQL:36/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
Outline
1 Porting the SQL
2 Porting Tools
3 PL/SQL vs. PL/pgSQL
4 Interfaces
5 Project Management
PortingOracleApplicationstoPostgreSQL:37/80
PortingtheSQL PortingTools PL/SQLvs.PL/pgSQL Interfaces ProjectManagement
orafce