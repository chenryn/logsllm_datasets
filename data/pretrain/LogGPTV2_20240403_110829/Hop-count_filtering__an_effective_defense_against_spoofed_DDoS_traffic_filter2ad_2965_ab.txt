mean value of a Gaussian distribution speciﬁes the center of the bell-
shaped curve, and the standard deviation speciﬁes the girth of the
bell. We are only interested in using the Gaussian distribution to
study if hop-count is a suitable measure for HCF. We are not making
any deﬁnitive claim of whether hop-count distributions are Gaussian
or not. For each given hop-count distribution, we use the normfit
function in Matlab to ﬁt the distribution of hop-counts for each data
set. We plot the means and standard deviations, along with their 95%
conﬁdence intervals, in Figures 4 and 5, respectively. We observe
that most of the mean values fall between 14 and 19 hops, and the
standard deviations between 3 and 5 hops. The largest percentage of
IP addresses that have a common hop-count value is only 10%. Such
distributions allow HCF to work effectively as we will show in the
quantitative evaluation of HCF in Section 4.
3.3 Robustness against Evasion
Once attackers learn of HCF, they will try to generate spoofed
packets that can dodge hop-count inspections, hence evading HCF.
However, such an attempt will either require a large amount of re-
source or time, and very elaborate planning, i.e., casual attackers are
unlikely to be able to evade HCF. In what follows, we assess the
various ways attackers may evade HCF.
3By “distribution,” we mean it in a generic sense that is equivalent
to histogram.
/
F
D
P
F
M
P
6000
5000
4000
3000
2000
1000
0
1
Fitted Gaussian distribution
Real IP addresses
5
10
15
20
25
30
Hop-Count
Figure 2: Yahoo.
/
F
D
P
F
M
P
6000
5000
4000
3000
2000
1000
0
1
Fitted Gaussian distribution
Real IP addresses
5
10
15
20
25
30
Hop-Count
Figure 3: Stanford University.
)
p
o
h
(
µ
30
25
20
15
10
5
0
0
5
10
15
20
25
30
35
40
45
50
Traceroute Gateway ID
)
p
o
h
(
σ
8
7
6
5
4
3
2
1
0
0
5
10
15
20
25
30
35
40
45
50
Traceroute Gateway ID
Figure 4: µ parameters for traceroute gateways.
Figure 5: σ parameters for traceroute gateways.
The key for an attacker to evade HCF is his ability to set an appro-
priate initial TTL value for each spoofed packet, because the number
of hops traversed by an IP packet is determined solely by the routing
infrastructure. Assuming the same initial TTL value I for all Inter-
net hosts, a packet from a ﬂooding source, which is hz hops away
from the victim, has a ﬁnal TTL value of I − hz. In order for the
attacker to generate spoofed packets from this ﬂooding source with-
out being detected, the attacker must change the initial TTL value
(cid:3) = I − (hs − hz), where hs is the hop-count from
of each packet to I
the spoofed IP address to the victim. Each spoofed packet would
have the correct ﬁnal TTL value, I − (hs − hz)− hz = I − hs, when it
reaches the victim.
An attacker can easily learn the hop-count, hz, from a zombie site
to the victim by running traceroute. However, randomly select-
ing the source address for each spoofed IP packet [12, 13] makes it
extremely difﬁcult, if not impossible, for the attacker to learn hs. To
obtain the correct hs values for all spoofed packets sent to the vic-
tim, the attacker has to build a priori an IP2HC mapping table that
covers the entire random IP address space. This is much more dif-
ﬁcult than building an IP2HC mapping table at the victim, since the
attacker cannot observe the ﬁnal TTL values of normal trafﬁc at the
victim. For an attacker to build such an IP2HC mapping table, he or
she may have to compromise at least one end-host behind every stub
network whose IP addresses are in the random IP address space, and
perform traceroute to get hs for the corresponding IP2HC map-
ping entry. Without correct hs values, an attacker cannot fabricate
the appropriate initial TTL values to conceal forgery.
Without compromising end-hosts, it may be possible for an at-
tacker to probe the hs value for a given IP address if it is not sending
any packets to the network. The probing procedure works as follows:
(1) force the victim into the action state to actively ﬁlter packets by
launching a DDoS attack; (2) probe the quiescent host and extract the
latest value of its IP identiﬁcation ﬁeld of the header [44]; (3) send a
spoofed packet containing a legitimate request with the quiescent IP
address as the source IP address to the victim with a tentative initial
TTL; (4) re-probe the quiescent host and check if its IP ID has in-
creased by more than one. If it has, this indicates that the victim has
accepted the spoofed packet and the initial TTL is the desired one.4
Otherwise, the attacker will change the initial TTL value and repeat
the above probing procedure. Although it is possible to obtain the
appropriate initial TTL for a single IP address, probing the whole
random address space requires an excessive amount of time and ef-
fort. First, an attacker has to launch a DDoS attack that must last long
enough to accommodate a large number of probes, or launch numer-
ous short-lived DDoS attacks to accommodate all probing activities.
Even if the attacker probes only one host per stub network, with the
Internet containing tens of millions of stub networks, it is difﬁcult to
hide during this process of TTL probing. Second, the attacker must
ensure an IP address remains quiescent during the probing. Since the
attacker cannot prevent the probed IP address from becoming active,
he or she can easily misinterpret an increase of the IP ID number as
the forged initial TTL being correct.
Without compromising end-hosts, an attacker may compute hop-
counts of to-be-spoofed IP addresses based on an accurate router-
level topology of the Internet, and the underlying routing algorithms
and policies. The recent Internet mapping efforts such as Internet
4If the victim accepts the spoofed packet, a response would be sent
to the quiescent host, causing it to generate a response, most likely a
RST, and increase the IP ID number by one.
Map [9], Mercator [21], Rocketfuel [40], and Skitter [10] projects,
may make the approach plausible. However, the current topology
mappings put together snapshots of various networks measured at
different times. Thus-produced topology maps are generally time-
averaged approximations of actual network connectivity. More im-
portantly, inter-domain routing in the Internet is policy-based, and
the routing policies are not disclosed to the public. The path, and
therefore the hop-count, between a source and a destination is de-
termined by routing policies and algorithms that are often unknown.
Even if an attacker has accurate information of the Internet topol-
ogy, he or she cannot obtain the correct hop-counts based on network
connectivity alone. We believe that the quality of network maps will
improve with better mapping technology, but we do not anticipate
any near-term advances that can lead to accurate hop-counts based
on just Internet maps.
Instead of spooﬁng randomly-selected IP addresses, an attacker
may choose to spoof IP addresses from a set of already-compromised
machines that are much smaller in number than 232, so that he or she
can measure all hs’s and fabricate appropriate initial TTLs. How-
ever, this weakens the attacker’s ability in several ways. First, the list
of would-be spoofed source IP addresses is greatly reduced, which
makes the detection and removal of ﬂooding trafﬁc much easier.
Second, source addresses of spoofed IP packets reveal the locations
of compromised end-hosts, which makes IP traceback much easier.
Third, the attacker must somehow probe the victim server to obtain
the correct hop-counts. However, network administrators nowadays
are extremely alert to unusual access patterns or probing attempts;
so, it would require a great deal of effort to coordinate the probing
attempts so as not to raise red ﬂags. Fourth, the attacker must modify
the available attacking tools since the most popular distributed at-
tacking tools, including mstream, Shaft, Stacheldraht, TFN, TFN2k,
Trinoo and Trinity, generate randomized IP addresses in the space
of 232 for spooﬁng [12, 13]. The wide-spread use of randomness in
spooﬁng IP address has been veriﬁed by the “backscatter” study [27],
which quantiﬁed DoS activities in the Internet.
4. EFFECTIVENESS OF HCF
We now assess the effectiveness of HCF from a statistical stand-
point. More speciﬁcally, we address the question “what fraction of
spoofed IP packets can be detected by the proposed HCF?” We as-
sume that potential DDoS victims know the complete mapping be-
tween their client IP addresses and hop-counts (to the victims them-
selves). In the next section, we will discuss the construction of such
mappings. We assume that, to spoof packets, the attacker randomly
selects source IP addresses from the entire IP address space, and
chooses hop-counts according to some distribution. Without loss of
generality, we further assume that the attacker evenly divides the
ﬂooding trafﬁc among the ﬂooding sources. This analysis can be
easily extended for cases where the ﬂooding trafﬁc is unevenly dis-
tributed. To make the analysis tractable, we consider only static hop-
counts. We will later discuss an update procedure that will capture
legitimate hop-count changes.
4.1 Simple Attacks
First, we examine the effectiveness of HCF against simple attack-
ers that spoof source IP addresses while still using the default initial
TTL values at the ﬂooding sources. Most of the available DDoS at-
tacking tools [12, 13] do not alter the initial TTL values of packets.
Thus, the ﬁnal TTL value of a spoofed packet will bear the hop-
count value between the ﬂooding source and the victim. To assess
the performance of HCF against such simple attacks, we consider
two scenarios: single ﬂooding source and multiple ﬂooding sources.
4.1.1 A Single Source
Given a single ﬂooding source whose hop-count to the victim is
h, let αh denote the fraction of IP addresses that have the same hop-
count to the victim as the ﬂooding source. Figure 6 depicts the hop-
count distributions seen at a hypothetical server for both real client
IP addresses, and spoofed IP addresses generated by a single ﬂood-
ing source. Since spoofed IP addresses come from a single source,
they all have an identical hop-count. Hence, the hop-count distribu-
tion of spoofed packets is a vertical bar of width one. On the other
hand, real client IP addresses have a diverse hop-count distribution
that is observed to be close to a Gaussian distribution. The shaded
area represents those IP addresses — the fraction αh of total valid IP
addresses — that have the same distance to the server as the ﬂood-
ing source. Thus, the fraction of spoofed IP addresses that cannot be
detected is αh. The remaining fraction 1− αh will be identiﬁed and
discarded by HCF.
The attacker may happen to choose a zombie that is 16 or 17 —
the most popular hop-count values — hops away from the victim as
the ﬂooding source. However, the standard deviations of the ﬁtted
Gaussian distributions are still reasonably large such that the per-
centage of IP addresses with any single hop-count value is small
relative to the overall IP address space. As shown in Section 3.2,
even if the attacker ﬂoods spoofed IP packets from such a zombie,
HCF can still identify nearly 90% of spoofed IP addresses. In most
distributions, the mode accounts for 10% of the total IP addresses,
with the maximum and minimum of the 47 modes being 15% and
8%, respectively. Overall, HCF is very effective against these sim-
ple attacks, reducing the attack trafﬁc by one order of magnitude.
4.1.2 Multiple Sources
DoS attacks usually involve more than a single host, and hence,
we need to examine the case of multiple active ﬂooding sources. As-
sume that there are n sources that ﬂood a total of F packets, each
ﬂooding source generates F/n spoofed packets. Figure 7 shows the
hop-count distribution of spoofed packets sent from two ﬂooding
sources. Each ﬂooding source is seen to generate trafﬁc with a sin-
gle unique hop-count value. Let hi be the hop-count between the
victim and ﬂooding source i, then the spoofed packets from source i
(1− αi). The fraction, Z, of identiﬁable
that HCF can identify is F
n
spoofed packets generated by n ﬂooding sources is:
(1− αhn
) +··· + F
)
(1− αh1
F
n
Z =
n
F
= 1− 1
n
n∑
i=1
αhi
This expression says that the overall effectiveness of having mul-
tiple ﬂooding sources is somewhere between that of the most ef-
fective source i with the largest αhi and that of the least effective
source j with the smallest αh j . Adding more ﬂooding sources does
not weaken the HCF’s ability to identify spoofed IP packets. On
the contrary, since the hop-count distribution follows Gaussian, ex-
istence of less effective ﬂooding sources (with small αh’s) enables
the ﬁlter to identify and discard more spoofed IP packets than in the
case of a single ﬂooding source.
4.2 Sophisticated Attackers
Most attackers will eventually recognize that it is not enough to
merely spoof source IP addresses. Instead of using the default ini-
tial TTL value, the attacker can easily randomize it for each spoofed
IP packet. Although the hop-count from a single ﬂooding source to
the victim is ﬁxed, randomizing the initial TTL values will create
an illusion of packets having many different hop-count values at the
120
100
80
60
40
20
F
M
P
Real IP addresses
Forged IP addresses
120
100
80
60
40