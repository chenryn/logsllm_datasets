title:Towards efficient proofs of retrievability
author:Jia Xu and
Ee-Chien Chang
Towards Efﬁcient Proofs of Retrievability
Jia Xu ∗
Institute for Infocomm Research, Singapore
PI:EMAIL
Ee-Chien Chang †
National University of Singapore
PI:EMAIL
Abstract
Proofs of Retrievability (POR) is a cryptographic formu-
lation for remotely auditing the integrity of ﬁles stored in
the cloud, without keeping a copy of the original ﬁles in lo-
cal storage. In a POR scheme, a user Alice backups her
data ﬁle together with some authentication data to a poten-
tially dishonest cloud storage server Bob. Later, Alice can
periodically and remotely verify the integrity of her data
ﬁle using the authentication data, without retrieving back the
data ﬁle. Besides security, performances in communication,
storage overhead and computation are major considerations.
Shacham and Waters (Asiacrypt ’08) gave a fast scheme with
O(sλ) bits communication cost and a factor of 1/s ﬁle size
expansion where λ is the security parameter. In this paper,
we incorporate a recent construction of constant size polyno-
mial commitment scheme (Kate, Zaverucha and Goldberg,
Asiacrypt ’10) into Shacham and Waters scheme. The result-
ing scheme requires O(λ) communication bits (particularly,
920 bits if a 160 bits elliptic curve group is used or 3512 bits
if a 1024 bits modulo group is used) per veriﬁcation and a
factor of 1/s ﬁle size expansion. Experiment results show
that our proposed scheme is indeed efﬁcient and practical.
Our security proof is based on Strong Difﬁe-Hellman As-
sumption.
Categories and Subject Descriptors H.3.2 [Information
Storage and Retrieval]: Information Storage; D.4.6 [ Secu-
rity and Protection]: Cryptographic controls
General Terms Storage, Integrity, Security, Algorithm
Keywords Cloud Storage, Proofs of Retrievability, Remote
Data Integrity Check, Homomorphic Authentication Tag,
Polynomial Commitment
∗ Xu is partially supported by Grant SecDC-112172014.
† Chang is partially supported by Grant TDSI/09-003/1A.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior speciﬁc permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright c(cid:13) 2012 ACM 978-1-4503-1303-2/12/05. . . $10.00
Introduction
1.
Storing data in a cloud storage, for example Amazon Cloud
Drive, Microsoft Skydrive, or Dropbox, is gaining popularity
recently. We are considering scenarios where users may have
concerns of the integrity of their data stored in the cloud
storage. Such prudent users may have doubts about the cloud
storage server’s promise on maintaining the data integrity.
Instead, they desire a technical way to be assured that the the
cloud storage server is keeping his promise and following the
service level agreement (SLA).
Threats to integrity of data stored in cloud is indeed
realistic. Several events about data loss in Amazon cloud
storage have been reported [16, 27]. There are also plenty
of data loss cases that are claimed by individuals but not
conﬁrmed ofﬁcially by the cloud server, e.g. data loss cases
in Dropbox [14].
Proofs of Retrievability (POR) model proposed by Juels
and Kaliski [21] is among the ﬁrst few attempts to formulize
the notion of “remotely and reliably verifying the data in-
tegrity without retrieving the data ﬁle”. A POR scheme
consists of setup phase and a sequence of veriﬁcation phases.
In the setup phase, a data owner Alice preprocesses her data
ﬁle using her private key to generate some authentication
information. Then Alice sends the data ﬁle together with au-
thentication information to the potentially dishonest cloud
storage server Bob, and removes them from her local stor-
age. Consequently, in the end of setup phase, Alice only has
her private key in her local storage, and Bob has both the
data ﬁle and the corresponding authentication information.
In each subsequent veriﬁcation phase, Alice generates a ran-
dom challenge query and Bob is supposed to produce a short
response upon the received challenge query, based on Alice’s
data ﬁle and the corresponding authentication information.
In the end of a veriﬁcation phase, Alice will verify Bob’s re-
sponse using her private key and decide to accept or reject
this response.
The performance of a POR scheme is determined by
a few factors: the number of communication bits (i.e. the
bit lengths of a challenge and a response) exchanged be-
tween Alice and Bob per veriﬁcation, storage overhead on
Alice/Bob’s side, computation time on Alice/Bob’s side in a
veriﬁcation, and computation time for data preprocessing in
setup on Alice side.
Shacham and Waters [26] proposed two POR schemes,
where one supports private veriﬁability and the other sup-
ports public veriﬁability. In this paper, we are interested in
the POR scheme [26] with private veriﬁability and refer to
it as SW scheme. In this SW scheme, the size of a response
(or proof) is dominated by s group elements where each is
λ bits long. We manage to aggregate these s group elements
into two group elements, leading to a reduction in proof size
from O(sλ) bits to O(λ) bits, by exploiting an intriguing
property of polynomial, which is recently used by Kate, Za-
verucha and Goldberg [22] to construct a polynomial com-
mitment. Combining with the result of Dodis, Vadhan and
Wichs [13], which reduced the challenge size of SW scheme
from O(λ2) to O(λ), we reduce the communication cost per
veriﬁcation of SW scheme from O(λ2 + sλ) to O(λ).
1.1 Our Contributions
Our contributions can be summarized as below: We propose
a new efﬁcient POR scheme in Section 5. In this scheme,
a data block consists of s group elements and a subset of
(cid:96) data blocks are accessed in each veriﬁcation. The stor-
age overhead is 1/s of the data ﬁle size, and communica-
tion cost is O(λ) bits per veriﬁcation where λ is the se-
curity parameter, and the computation cost is O(s) group
exponentiations on the server side (prover) and O((cid:96)) group
addition/multiplication/PRF on the client (veriﬁer) side. We
prove that the proposed POR scheme is secure ( Theorem 1
in Section 5.2) under Strong Difﬁe-Hellman Assumption.
The empirical study in Section 6 shows that our scheme
In
is practical in computation under reasonable setting.
a typical setting where an elliptic curve group of prime
order p (the bit-length of p is λ = 160) is used and the
system parameter s = 100, during each veriﬁcation, 920
communication bits are exchanged between the data owner
and the cloud storage server where 440 bits for challenge and
480 bits for response, and 100 elliptic curve exponentiations
are required to generate a response on the cloud storage
server side. The small number of communication bits is
also desirable in situations where the challenge and response
could be piggybacked into other communication packets
between the data owner and the cloud storage server.
1.2 Organization
The rest of this paper is organized as below: We brief
the background on SW scheme [26] and review the re-
lated works in Section 2. Particularly, in Section 2.1.3, we
overview our proposed scheme in the context of background
works [13, 26]. Section 3 reviews the security formulation of
Proofs of Retrievability. We describe background knowledge
on the polynomial commitment scheme [22] in Section 4 and
present our main scheme in Section 5. We analyze the per-
formance of the proposed scheme, conduct experiments and
report the empirical results in Section 6. After that, Section 7
concludes this paper.
Section 5 is self-contained and readers may jump to Sec-
tion 5 directly to read our main construction.
2. Background and Related work
In this section, we brief the background on Shacham and
Waters [26] POR scheme and improvement on this scheme
by Dodis, Vadhan and Wichs [13], and review related works
on proofs of storage. We also overview our result in this
paper, based on works by Shacham and Waters [26] and
Dodis et al. [13].
2.1 SW scheme and Our Improvement
2.1.1 Original SW scheme
Shacham and Waters [26] proposed two POR schemes,
where one supports private veriﬁability and the other sup-
ports public veriﬁability. Here we adopt the interpretation of
[13] to review the SW POR [26] scheme with private veri-
ﬁability.
In the setup, the data owner Alice encodes her data
ﬁle using some error erasure encoding scheme (e.g. Reed-
Solomon code [25]), such that the encoded ﬁle consists of
many blocks and each block is a vector of s group elements
from Zp, where p is a λ bits long prime. Next, Alice gen-
erates an authentication tag for each block in the encoded
ﬁle, using a homomorphic linear authenticator. Alice then
sends the encoded ﬁle together with all authentication tags
to the potentially dishonest cloud storage server Bob. Thus,
at the end of setup, Alice has only a private key in her local
storage, and Bob has Alice’s encoded data ﬁle and authen-
tication tags. Since an authentication tag is a group element
in Zp, the size of all authentication tags is 1/s of the size
of encoded ﬁle. The error erasure encoding in the setup is
called as primary encoding (or initial encoding) by Dodis et
al. [13].
computes linear combination (cid:126)µ :=(cid:80)(cid:96)−1
In a veriﬁcation, the data owner Alice, who is taking
the role of veriﬁer, interacts with cloud storage server Bob,
who is taking the role of prover. Alice chooses a random
challenge, which consists of two parts: The ﬁrst part C is a
subset of block indices that speciﬁes a random subset of (cid:96)
blocks in the encoded ﬁle. Let us denote the selected blocks
p : 0 ≤ i ≤ (cid:96) − 1}. The second part
as (cid:96) vectors {(cid:126)xi ∈ Zs
is an (cid:96)-dimensional vector (cid:126)ν = (ν0, . . . , ν(cid:96)−1) ∈ Z(cid:96)
p. Bob
i=0 νi(cid:126)xi ∈ Zs
p, and an
authentication tag σ(cid:126)µ of (cid:126)µ using the linear homomorphism
of the homomorphic linear authenticator. Bob sends ((cid:126)µ, σ(cid:126)µ)
to Alice as response and Alice checks the validity of the
received message-tag pair. Dodis et al. [13] pointed out that,
for each j ∈ [0, s − 1], the j-th component of (cid:126)µ is just a
Hadamard codeword with parameter (cid:126)ν of j-th components
of selected blocks (cid:126)xi:
(cid:126)µ[j] = (cid:104)(cid:126)ν, ((cid:126)x0[j], . . . , (cid:126)x(cid:96)−1[j])(cid:105) =
νi(cid:126)xi[j].
(cid:96)−1(cid:88)
i=0
They [13] called this Hadamard coding as secondary encod-
ing. In contrast, in the MAC based POR scheme implied in
[23], the prover just returns the long message {(cid:126)xi ∈ Zs
p :
0 ≤ i ≤ (cid:96) − 1} and corresponding authentication informa-
tion, without secondary encoding.
In each veriﬁcation, the challenge size is in O(λ2): the
ﬁrst part C of challenge is of size O((cid:96) log n) and the second
part (cid:126)ν is of size O((cid:96)λ), where (cid:96) = O(λ) is the number of
blocks selected in each veriﬁcation, and n = poly(λ) is the
number of blocks in the encoded ﬁle. The response size is in
O(sλ): the message (cid:126)µ ∈ Zs
p and the tag σ(cid:126)µ ∈ Zp, where
λ ≈ log p.
(160 bits per chunk if elliptic curve is used or 1024 bits per
chunk if modulo group is used).
The costs of our modiﬁcations are: (1) the computation of
the authentication tag σ(cid:48) of the inner product (cid:104)(cid:126)µ, (cid:126)r(cid:105) requires
s group exponentiations in Zp; (2) the per-user public key1
consists of s group elements from Zp. We will measure the
computation time of our proposed scheme through experi-
ments; the size of a public key is about 100 kilobits (Kbit)
when s = 100 and λ = 1024 ≈ log p.
We remark that our proposed scheme can be alternatively
instantiated over an elliptic curve group (bilinear map is not
required) with small size (e.g. 2160).
2.1.2 Improved SW scheme
Dodis, Vadhan and Wichs [13] reduces the size of chal-
lenge in SW scheme from O(λ2) to O(λ). They made two
modiﬁcations: Firstly, instead of choosing the subset C in a
challenge uniformly randomly, they [13] samples C using a
(δ, γ)-hitter given by Goldreich [19]. Consequently, the size
of the ﬁrst part of challenge is reduced to O(λ). Secondly,
the Hadamard code is replaced with Reed-Solomon code.
That is, the vector (cid:126)ν = (ν0, . . . , ν(cid:96)−1) is replaced by vector
(ν0, ν1, . . . , ν(cid:96)−1) for some ν ∈ Zp, and the second part of a
challenge is changed from vector (ν0, . . . , ν(cid:96)−1) to a single
group element ν.
However, the size of response in a veriﬁcation is still
unchanged.
2.1.3 Overview of Our result
Based on works of [13, 26], in this paper, we apply Reed-
Solomon code again on the response ((cid:126)µ, σ(cid:126)µ) of SW scheme [13,
26] as tertiary encoding: the new challenge will contain a
group element r ∈ Zp in addition, and the new response will
be ((cid:104)(cid:126)µ, (cid:126)r(cid:105) , σ(cid:48)), where (cid:126)r = (r0, . . . , rs−1) and the authen-
tication tag σ(cid:48) of the inner product (cid:104)(cid:126)µ, (cid:126)r(cid:105) is computed from
((cid:126)µ, σ(cid:126)µ) using the idea of [22] (We will review [22] later in
Section 4).
As a result, this paper further reduces the response size
in a veriﬁcation of SW scheme from O(sλ) to O(λ), where
the size of all authentication tags is unchanged—still 1/s
of the size of encoded ﬁle, the same as the original SW
scheme [26].
The asymptotic complexities in communication and stor-
age of the resulting POR scheme will match the Provable
Data Possession (PDP) scheme proposed by Ateniese et
al. [1, 3], where it is well known that PDP is a weaker
security model than POR. Compared to the PDP scheme
given by Ateniese et al. [1, 3], on the dark side, our pro-
posed scheme has a longer public key (O(sλ) bits versus
O(λ) bits); on the bright side, our proposed scheme is much
more practical in computation in the setup. Essentially, Ate-
niese et al. [1, 3] requires one group multiplication per each