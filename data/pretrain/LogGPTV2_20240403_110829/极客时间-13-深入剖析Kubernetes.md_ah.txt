## 思考题1.  既然容器的 rootfs（比如，Ubuntu    镜像），是以只读方式挂载的，那么又如何在容器里修改 Ubuntu    镜像的内容呢？（提示：Copy-on-Write）2.  除了 AuFS，你知道 Docker 项目还支持哪些 UnionFS    实现吗？你能说出不同宿主机环境下推荐使用哪种实现吗？感谢你的收听，欢迎你给我留言，也欢迎分享给更多的朋友一起阅读。\![](Images/030dbcb984f327d2d99d41ebd4ff25a4.png){savepage-src="https://static001.geekbang.org/resource/image/0d/cb/0da944e5bac4fe1d00d3f01a747e86cb.jpg"}点击[这里](https://time.geekbang.org/column/article/17841)查看大图。![](Images/e870b7df0db49509e735e6becd4a9a9a.png){savepage-src="https://static001.geekbang.org/resource/image/47/55/47a6f3bf6b92d58512d5a2ed0a556f55.jpg"}
# 08 \| 白话容器基础（四）：重新认识Docker容器你好，我是张磊。今天我和你分享的主题是：白话容器基础之重新认识 Docker容器。在前面的三次分享中，我分别从 Linux Namespace 的隔离能力、Linux Cgroups的限制能力，以及基于 rootfs 的文件系统三个角度，为你剖析了一个 Linux容器的核心实现原理。> 备注：之所以要强调 Linux 容器，是因为比如 Docker on Mac，以及 Windows> Docker（Hyper-V> 实现），实际上是基于虚拟化技术实现的，跟我们这个专栏着重介绍的 Linux> 容器完全不同。而在今天的分享中，我会通过一个实际案例，对"白话容器基础"系列的所有内容做一次深入的总结和扩展。希望通过这次的讲解，能够让你更透彻地理解Docker 容器的本质。在开始实践之前，你需要准备一台 Linux 机器，并安装Docker。这个流程我就不再赘述了。这一次，[我要用 Docker 部署一个用 Python 编写的 Web应用]{.orange}。这个应用的代码部分（[app.py](http://app.py)）非常简单：    from flask import Flaskimport socketimport os app = Flask(__name__) @app.route('/')def hello():    html = "Hello {name}!" \           "Hostname: {hostname}"               return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname())    if __name__ == "__main__":    app.run(host='0.0.0.0', port=80)在这段代码中，我使用 Flask 框架启动了一个 Web服务器，而它唯一的功能是：如果当前环境中有"NAME"这个环境变量，就把它打印在"Hello"后，否则就打印"Helloworld"，最后再打印出当前环境的 hostname。``{=html}这个应用的依赖，则被定义在了同目录下的 requirements.txt文件里，内容如下所示：    $ cat requirements.txtFlask**而将这样一个应用容器化的第一步，是制作容器镜像。**不过，相较于我之前介绍的制作 rootfs 的过程，Docker为你提供了一种更便捷的方式，叫作 Dockerfile，如下所示。    
# 使用官方提供的 Python 开发镜像作为基础镜像FROM python:2.7-slim 
# 将工作目录切换为 /appWORKDIR /app 