title:Tracing and Analyzing Web Access Paths Based on User-Side Data Collection:
How Do Users Reach Malicious URLs?
author:Takeshi Takahashi and
Christopher Kruegel and
Giovanni Vigna and
Katsunari Yoshioka and
Daisuke Inoue
Tracing and Analyzing Web Access Paths Based on User-Side Data Collection:
How Do Users Reach Malicious URLs?
Takeshi Takahashi†, Christopher Kruegel‡, Giovanni Vigna‡, Katsunari Yoshioka∗, Daisuke Inoue†
†National Institute of Information and Communications Technology,
PI:EMAIL, PI:EMAIL
‡University of California, Santa Barbara, {chris, vigna}@cs.ucsb.edu
∗Yokohama National University, PI:EMAIL
Abstract
Web access exposes users to various attacks, such as malware
infections and social engineering attacks. Despite ongoing
efforts by security and browser vendors to protect users, some
users continue to access malicious URLs. To provide better
protection, we need to know how users reach such URLs. In
this work, we collect web access records of users from their
using our browser extension. Differing from data collection
on the network, user-side data collection enables us to discern
users and web browser tabs, facilitating efﬁcient data analysis.
Then, we propose a scheme to extract an entire web access
path to a malicious URL, called a hazardous path, from the
access records. With all the hazardous paths extracted from
the access records, we analyze web access activities of users
considering initial accesses on the hazardous paths, risk levels
of bookmarked URLs, time required to reach malicious URLs,
and the number of concurrently active browser tabs when
reaching such URLs. In addition, we propose a preemptive
domain ﬁltering scheme, which identiﬁes domains leading to
malicious URLs, called hazardous domains. We demonstrate
the effectiveness of the scheme by identifying hazardous
domains that are not included in blacklists.
1 Introduction
The Internet has become indispensable social infrastructure,
and many people access the web multiple times a day
in the course of their daily lives. However, web access
exposes users to diverse types of attacks, including malware
infections and social engineering attacks. Various techniques
have been investigated and implemented to minimize the
risk of accessing malicious URLs. In particular, browsers
have become more resistant to malware infections and other
web-based attacks. For example, the Google Chrome browser
uses Google’s blacklist service, i.e., Google Safe Browsing
(GSB) [1], to minimize users’ access to malicious URLs.
However, users still reach malicious URLs through web
browsing.
To better understand how users reach malicious URLs
and to improve user protection, in this paper, we introduce a
per-user data analysis scheme and demonstrate its usability.
First, we collect access records of each user using our browser
extension. User-side data collection enables us to access data
that network-side data collection cannot access, i.e., user IDs,
browser tab IDs, and navigation information, which, in turn,
enable us to efﬁciently analyze the data in detail. Then, we
propose a scheme to extract an entire web access path to
a malicious URL, called a hazardous path. The proposed
scheme takes advantage of collected data that identify users
and browser tabs to efﬁciently reconstruct the hazardous paths.
The ﬁrst accesses of the paths, i.e., entry points, are identiﬁed
based on the navigation information that identiﬁes the cause of
the navigation. With the extracted access path information, we
analyze the web access activities of users who reach malicious
URLs, i.e., victims1, to better understand them. First, we
analyze the entry points of hazardous paths to understand
the proportion of accesses via bookmarks. We then analyze
the risk level of bookmarked URLs. We also analyze the
time required to reach malicious URLs and the number of
concurrently active browser tabs to demonstrate the usability
of data collected at the user side for further analysis.
In addition, we propose a preemptive domain ﬁltering
scheme. This scheme determines the risk level of accessing
each domain by analyzing the hazardous paths and identiﬁes
domains that lead to malicious URLs, i.e., hazardous domains.
These domains are not blacklisted; however, the proposed
scheme suggests ﬁltering trafﬁc on them because, even if they
do not host any malicious contents themselves, the access
paths thereafter lead to malicious URLs.
Contributions The primary contributions of this work are
summarized as follows.
1. We describe a user-side data collection approach using
a browser extension. Differing from earlier work that
1These users are not necessarily harmed by accessing malicious URLs;
however, for convenience, we use the term "victim" for such users.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    93
collects trafﬁc data on network devices, user-side data
collection enables us to access to a broader range of data,
including user IDs, browser tab IDs, and user navigation
information, allowing us to efﬁciently analyze user
behaviors.
2. We introduce a scheme that reconstructs hazardous paths
from the collected data. The scheme repeatedly traces
previous accesses until it reaches the entry points of
hazardous paths to reconstruct the paths. The entry
points are determined by looking up user navigation
information. Differing from earlier work that does not
discern users and browser tabs, this scheme minimizes
ambiguity by discerning them, narrowing down the lines
of logs that need to be analyzed.
3. We analyze users’ browsing behaviors to demonstrate
the usability of data obtained from browsers, i.e., tab IDs
and user navigation information. The analysis reveals
that bookmark access is the major type of initial access
on hazardous paths. In the collected data, bookmark
access occupies the largest share of entry point types on
hazardous paths, and its share is greater on hazardous
paths than the share on all paths, including hazardous
and non-hazardous paths.
4. We analyze the risk level of bookmarked URLs by
deﬁning a parameter that indicates the certainty of
reaching malicious URLs, We show that there are
bookmark entries that surely lead to malicious URLs,
which indicates that reviewing and sanitizing bookmark
entries may minimize the risk of reaching malicious
URLs.
5. We introduce a preemptive domain ﬁltering scheme that
ﬁlters trafﬁc before users reach malicious URLs. Our
analysis shows that there are non-malicious domains
that often lead users to malicious URLs. To identify
such domains, the scheme calculates the risk levels of
all domains appeared on hazardous paths and identiﬁes
domains that are likely to navigate users to malicious
URLs. The scheme may ﬁlter trafﬁc traversing on these
domains, or at least provide alerts to protect users from
reaching malicious URLs.
To the best of our knowledge, this is the ﬁrst academic
paper that analyzes users’ web access records by discerning
users and browser tabs and by considering user navigation
information. In particular, we focus on the entry points
of hazardous paths, revealing the importance of reviewing
bookmarks. The proposed preemptive domain ﬁltering
scheme is also unique, which identiﬁes hazardous domains
that are not included in blacklists.
Organization of this paper The remainder of this paper is
organized as follows. Section 2 presents our data collection
scheme. Section 3 introduces a scheme to reconstruct an
entire hazardous path by iteratively tracing previous accesses
until reaching path entry points, and Section 4 presents an
analysis of users who reach malicious URLs, A scheme
to preemptively ﬁlter trafﬁc based on domain risk levels is
introduced in Section 5. Section 6 considers issues that are
not addressed in the earlier sections. Related work is reviewed
in Section 7, and Section 8 concludes this paper.
2 User-Side Data Collection
Web access records are collected at the user side using
a browser extension developed in-house [2]. The browser
extension runs on the Chrome browser, and anyone who
agrees to the terms and conditions can install and use the
browser extension. This browser extension works as a sensor
that records each user’s web access activities and periodically
shares the recorded information to a server. The browser
extension is in Japanese; therefore, we assume that the users
are primarily Japanese speakers. In this section, the list of the
collected information, the ethical considerations, the access
log complementation, and the dataset generated for analysis
are elaborated.
2.1 Collected Data
Our browser extension uses Google Chrome’s APIs [3] to
collect web access data of a user from the web browser. The
browser extension uses the chrome.webRequest API [4] to
observe and analyze trafﬁc and the chrome.webNavigation
API [5] to receive notiﬁcations about the status of navigation
requests. The following data are collected.
1. URL: the URL of the requested document obtained from
the HTTP request header
2. Timestamp: the UNIX time when the request is issued
3. Referer: the referer value obtained from the HTTP
request header
4. Tab ID: the identiﬁer of a browser tab. Its uniqueness is
only guaranteed during the session.
5. Tab URL: URL shown on the browser tab
6. Resource type: the type of resource deﬁned by the
chrome.webRequest API. It takes one of the following
values: "csp_report," "font," "image," "main_frame,"
"media,"
"stylesheet,"
"sub_frame," "websocket," or "xmlhttprequest." Note
that main frame, which is identiﬁed by the value
"main_frame," is a document that is loaded for a
top-level frame.
"object,"
"script,"
"ping,"
7. Transition type: the cause of the navigation deﬁned
by the chrome.history API [6]. It takes one of the
following values: "auto_bookmark," "auto_subframe,"
"form_submit,"
"keyword,"
"keyword_generated,"
"manual_subframe,"
"reload," "start_page," or "typed."
"generated,"
"link,"
94    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
In addition to the data listed above, the browser extension
and server provide the following supplementary information.
1. User ID: unique user identiﬁer
2. Source tab ID:
the identiﬁer of the tab that has
generated the current tab. It is recorded when a new
window is generated, for instance, by target="_blank"
and window.open().
3. GSB evaluation results: an indicator whether the URL
is listed by GSB. The server aggregates all URLs
collected in a single day and queries GSB regarding
their maliciousness once a day.
4. Alexa Trafﬁc Rank: trafﬁc rankings provided by Alexa
Top Site [7]. The server aggregates all URLs collected in
a single day and queries Alexa Top Site regarding their
ranking. Note that we check up to the top 1,000 sites.
One access record consists of the above 11 items. Note that
our browser extension can collect a broader range of data;
however, data not relevant to this work have been omitted.
2.2 Ethical Considerations
We worked with our Internal Review Board to ensure that
our usage of the logs was ethical and respectful of users’
privacy. We deﬁned the terms and conditions for our browser
extension [2]. All collected data are listed, and we stipulate
that we analyze the data collected from the browser extensions
to detect and prevent access to malicious URLs. Users
installing the browser extension need to agree to the terms
and conditions.
The collected data contains privacy-related details;
therefore, we have strict restrictions on its use. Any personally
identiﬁable user information was expunged or coded before
records were stored on the servers. The user ID recorded in
the log is an internal number unique to each user and cannot
be directly linked to any personally identiﬁable information.
Raw URLs cannot be shared with external parties. Therefore,
we do not use VirusTotal [8], which requires us to submit raw
URLs. Instead, we use GSB to evaluate the maliciousness of
URLs because it does not require us to upload raw URLs. In
addition, we delete all records of users who request that their
records be deleted.
The logs we use in our analysis are stored on a server in
a secure facility, and only registered users from registered
machines that implement adequate security measures can
access them. No raw data are allowed to be copied outside the
machines; therefore, all analyses must be conducted on the
secure servers. Only aggregated results were exported from
the secure server for further analysis.
2.3 Access Log Complementation
Our scheme collects users’ web access data on a granular
scale, which enables us to analyze their behavior in detail.
Figure 1: Number of unique active users per month
However, we sometimes fail to collect certain data. We have
identiﬁed three factors inﬂuencing these failures. First, the
implementation of the data collection module was imperfect.
A user may take an explicit action to move to another page
before the browser receives a response to a request. In this
case, some ﬁelds of the access record are left blank, or the
entire record is not recorded. Second, users can speciﬁcally
avoid data collection for certain cases. Users can specify the
list of URLs and domains that they do not want our browser
extensions to record. The browser extension also does not
record logs if a user accesses the web in incognito mode.
These functionalities are provided to protect users’ privacy.
In addition, some users may deactivate the browser extension
when accessing sites that they do not want us to monitor.
Third, the Chrome browser does not provide the intended
records when its processing burden becomes high.
Our scheme complements missing main frame entries in
the log because these entries play a core role in our analysis.
Typically, access to a tab URL produces a series of requests
for multiple content, e.g., main frame, subframe, image, script,
and style ﬁle. However, the log sometimes lacks main frame
that should appear. In this case, we generate a complementary
main frame entry, where its tab URL and URL are both set
to the tab URL. Here the timestamp is set to that of the ﬁrst
entry in the consecutive access records for the tab URL.
2.4 Dataset
The dataset we used consists of data collected from February
1, 2019 to January 31, 2020 (12 months). During the
experimental period, 4,306,529,287 access records were
collected, among which were 76,474 accesses to malicious
URLs. Figure 1 shows the number of unique active users
per month. Note, a user is considered active if any browsing
activity of the user is logged. On average, 831 users accessed
the web at least once a day, 1,650 users accessed the web
at least once a month, 1,013 users accessed the web more
than seven days a month, and 115 users (victims) accessed
malicious URLs at least once a month.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    95
URL of the previous access record remain the same as these
of the current access record. For the ﬁrst two cases, the tab
ID remains the same; however, the latter two cases do not
guarantee that the tab ID remains the same. If the transition
type of an access record is set to "reload," our access path
reconstruction scheme runs the reload tracing method, which
determines the latest past access record with the same tab
URL and URL values as the current access record. It ﬁrst
retrieves the past access records of the user within the same
browser tab, and then retrieves all past access records of the
user if no matching entry is found.
Source-tab tracing When an access record provides a
source tab ID, our access path reconstruction scheme runs
the source-tab tracing method, which analyzes the past access
records of a user on the source tab to identify the previous
access record. When the access record provides a referer
information, the method traces the records between the current
access and the latest past main frame access and determines
the latest past access record whose URL matches the referer
as the previous access record (referer tracing). If referer
information is unavailable or no suitable record is found, the
method determines the latest past main frame access record
as the previous access record (main frame tracing).
In-tab tracing When an access record does not provide a
source tab ID, our access path reconstruction scheme runs
the in-tab tracing method, which analyzes the past access
records of a user on the current tab to identify the previous
access record. As with source-tab tracing method, the in-tab
tracing method analyzes the records by running referer tracing
and main frame tracing techniques to identify the previous
access record. Note that most previous access records will
be identiﬁed by this method because new tab creation is less
frequent than access on the current tab.
Global tracing When no previous access was found by the
in-tab tracing method, our access path reconstruction scheme
runs the global tracing method, which analyzes the past access
records of a user on all tabs to identify the previous access
record. As with the source-tab and in-tab tracing methods,
the global tracing method ﬁrst runs referer tracing if referer
information is available. There are cases the referer contains
only its origin information. The global tracing method uses it
if no suitable entry is found by referer tracing. The method
determines the latest past main frame access record whose
URL value includes the referer, i.e., origin, as the previous
access (origin tracing). If referer information is unavailable or
no suitable record is found, the method may run main frame
tracing; however this does not necessarily provide a reliable
trace and is not used in the analysis of this paper. Note that the
origin tracing is not used by the source-tab and in-tab tracing
methods because they can identify a reliable previous access
Figure 2: Process ﬂow for tracing previous accesses
3 Access Path Reconstruction
This section introduces our access path reconstruction scheme.
It extracts a hazardous path by recursively tracing previous
accesses until the entry point to the path is identiﬁed. We
also present case studies in this section to demonstrate the
effectiveness of the scheme.
3.1 Previous Access Tracing
Our access path reconstruction scheme traces previous
accesses by using user IDs and tab IDs provided by our dataset
to minimize the scope of analysis. Figure 2 shows an overview
of the tracing process. If the transition type of an access record
is set to "reload," the access is considered as a page reload,
and the reload tracing method is run to identify the access
record of the reloaded page. Otherwise, if source tab ID is set,
this access is considered to be originated from another tab,
and the source-tab tracing method is run to identify the record
of previous access on the source tab. Otherwise, the in-tab
tracing method is run to identify the previous access record