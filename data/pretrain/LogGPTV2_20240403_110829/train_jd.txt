the above is the posix.1 description.
the glibc value for
.b nl_cat_locale
is 1.
.\" (compare
.\" .b mcloadall
.\" below.)
the default path varies, but usually looks at a number of places below
.ir /usr/share/locale .
.\" .ss linux notes
.\" these functions are available for linux since libc 4.4.4c.
.\" in the case of linux libc4 and libc5, the catalog descriptor
.\" .i nl_catd
.\" is a
.\" .br mmap (2)'ed
.\" area of memory and not a file descriptor.
.\" the
.\" .i flag
.\" argument to
.\" .br catopen ()
.\" should be either
.\" .b mcloadbyset
.\" (=0) or
.\" .b mcloadall
.\" (=1).
.\" the former value indicates that a set from the catalog is to be
.\" loaded when needed, whereas the latter causes the initial call to
.\" .br catopen ()
.\" to load the entire catalog into memory.
.\" the default search path varies, but usually looks at a number of places below
.\" .i /etc/locale
.\" and
.\" .ir /usr/lib/locale .
.sh see also
.br catgets (3),
.br setlocale (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/chown.2
.so man3/byteorder.3
.so man3/circleq.3
.\" copyright (c) 2008 linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th pthread_attr_setscope 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
pthread_attr_setscope, pthread_attr_getscope \- set/get contention scope
attribute in thread attributes object
.sh synopsis
.nf
.b #include 
.pp
.bi "int pthread_attr_setscope(pthread_attr_t *" attr ", int " scope );
.bi "int pthread_attr_getscope(const pthread_attr_t *restrict " attr ,
.bi "                          int *restrict " scope );
.pp
compile and link with \fi\-pthread\fp.
.fi
.sh description
the
.br pthread_attr_setscope ()
function sets the contention scope attribute of the
thread attributes object referred to by
.i attr
to the value specified in
.ir scope .
the contention scope attribute defines the set of threads
against which a thread competes for resources such as the cpu.
posix.1 specifies two possible values for
.ir scope :
.tp
.b pthread_scope_system
the thread competes for resources with all other threads
in all processes on the system that are in the same scheduling
allocation domain (a group of one or more processors).
.b pthread_scope_system
threads are scheduled relative to one another
according to their scheduling policy and priority.
.tp
.b pthread_scope_process
the thread competes for resources with all other threads
in the same process that were also created with the
.br pthread_scope_process
contention scope.
.br pthread_scope_process
threads are scheduled relative to other threads in the process
according to their scheduling policy and priority.
posix.1 leaves it unspecified how these threads contend
with other threads in other process on the system or
with other threads in the same process that
were created with the
.b pthread_scope_system
contention scope.
.pp
posix.1 requires that an implementation support at least one of these
contention scopes.
linux supports
.br pthread_scope_system ,
but not
.br pthread_scope_process .
.pp
on systems that support multiple contention scopes, then,
in order for the parameter setting made by
.br pthread_attr_setscope ()
to have effect when calling
.br pthread_create (3),
the caller must use
.br pthread_attr_setinheritsched (3)
to set the inherit-scheduler attribute of the attributes object
.i attr
to
.br pthread_explicit_sched .
.pp
the
.br pthread_attr_getscope ()
function returns the contention scope attribute of the
thread attributes object referred to by
.i attr
in the buffer pointed to by
.ir scope .
.sh return value
on success, these functions return 0;
on error, they return a nonzero error number.
.sh errors
.br pthread_attr_setscope ()
can fail with the following errors:
.tp
.b einval
an invalid value was specified in
.ir scope .
.tp
.b enotsup
.ir scope
specified the value
.br pthread_scope_process ,
which is not supported on linux.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br pthread_attr_setscope (),
.br pthread_attr_getscope ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008.
.sh notes
the
.b pthread_scope_system
contention scope typically indicates that a user-space thread is
bound directly to a single kernel-scheduling entity.
this is the case on linux for the obsolete linuxthreads implementation
and the modern nptl implementation,
which are both 1:1 threading implementations.
.pp
posix.1 specifies that the default contention scope is
implementation-defined.
.sh see also
.ad l
.nh
.br pthread_attr_init (3),
.br pthread_attr_setaffinity_np (3),
.br pthread_attr_setinheritsched (3),
.br pthread_attr_setschedparam (3),
.br pthread_attr_setschedpolicy (3),
.br pthread_create (3),
.br pthreads (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2006, janak desai 
.\" and copyright (c) 2006, 2012 michael kerrisk 
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" licensed under the gpl
.\" %%%license_end
.\"
.\" patch justification:
.\" unshare system call is needed to implement, using pam,
.\" per-security_context and/or per-user namespace to provide
.\" polyinstantiated directories. using unshare and bind mounts, a
.\" pam module can create private namespace with appropriate
.\" directories(based on user's security context) bind mounted on
.\" public directories such as /tmp, thus providing an instance of
.\" /tmp that is based on user's security context. without the
.\" unshare system call, namespace separation can only be achieved
.\" by clone, which would require porting and maintaining all commands
.\" such as login, and su, that establish a user session.
.\"
.th unshare 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
unshare \- disassociate parts of the process execution context
.sh synopsis
.nf
.b #define _gnu_source
.b #include 
.pp
.bi "int unshare(int " flags );
.fi
.sh description
.br unshare ()
allows a process (or thread) to disassociate parts of its execution
context that are currently being shared with other processes (or threads).
part of the execution context, such as the mount namespace, is shared
implicitly when a new process is created using
.br fork (2)
or
.br vfork (2),
while other parts, such as virtual memory, may be
shared by explicit request when creating a process or thread using
.br clone (2).
.pp
the main use of
.br unshare ()
is to allow a process to control its
shared execution context without creating a new process.
.pp
the
.i flags
argument is a bit mask that specifies which parts of
the execution context should be unshared.
this argument is specified by oring together zero or more
of the following constants:
.tp
.b clone_files
reverse the effect of the
.br clone (2)
.b clone_files
flag.
unshare the file descriptor table, so that the calling process
no longer shares its file descriptors with any other process.
.tp
.b clone_fs
reverse the effect of the
.br clone (2)
.b clone_fs
flag.
unshare filesystem attributes, so that the calling process
no longer shares its root directory
.rb ( chroot (2)),
current directory
.rb ( chdir (2)),
or umask
.rb ( umask (2))
attributes with any other process.
.tp
.br clone_newcgroup " (since linux 4.6)"
this flag has the same effect as the
.br clone (2)
.b clone_newcgroup
flag.
unshare the cgroup namespace.
use of
.br clone_newcgroup
requires the
.br cap_sys_admin
capability.
.tp
.br clone_newipc " (since linux 2.6.19)"
this flag has the same effect as the
.br clone (2)
.b clone_newipc
flag.
unshare the ipc namespace,
so that the calling process has a private copy of the
ipc namespace which is not shared with any other process.
specifying this flag automatically implies
.br clone_sysvsem
as well.
use of
.br clone_newipc
requires the
.br cap_sys_admin
capability.
.tp
.br clone_newnet " (since linux 2.6.24)"
this flag has the same effect as the
.br clone (2)
.b clone_newnet
flag.
unshare the network namespace,
so that the calling process is moved into a
new network namespace which is not shared
with any previously existing process.
use of
.br clone_newnet
requires the
.br cap_sys_admin
capability.
.tp
.b clone_newns
.\" these flag name are inconsistent:
.\" clone_newns does the same thing in clone(), but clone_vm,
.\" clone_fs, and clone_files reverse the action of the clone()
.\" flags of the same name.
this flag has the same effect as the
.br clone (2)
.b clone_newns
flag.
unshare the mount namespace,
so that the calling process has a private copy of
its namespace which is not shared with any other process.
specifying this flag automatically implies
.b clone_fs
as well.
use of
.br clone_newns
requires the
.br cap_sys_admin
capability.
for further information, see
.br mount_namespaces (7).
.tp
.br clone_newpid " (since linux 3.8)"
this flag has the same effect as the
.br clone (2)
.b clone_newpid
flag.
unshare the pid namespace,
so that the calling process has a new pid namespace for its children
which is not shared with any previously existing process.
the calling process is
.i not
moved into the new namespace.
the first child created by the calling process will have
the process id 1 and will assume the role of
.br init (1)
in the new namespace.
.br clone_newpid
automatically implies
.br clone_thread
as well.
use of
.br clone_newpid
requires the
.br cap_sys_admin
capability.
for further information, see
.br pid_namespaces (7).
.tp
.br clone_newtime " (since linux 5.6)"
unshare the time namespace,
so that the calling process has a new time namespace for its children
which is not shared with any previously existing process.
the calling process is
.i not
moved into the new namespace.
use of
.br clone_newtime
requires the
.br cap_sys_admin
capability.
for further information, see
.br time_namespaces (7).
.tp
.br clone_newuser " (since linux 3.8)"
this flag has the same effect as the
.br clone (2)
.b clone_newuser
flag.
unshare the user namespace,
so that the calling process is moved into a new user namespace
which is not shared with any previously existing process.
as with the child process created by
.br clone (2)
with the
.b clone_newuser
flag, the caller obtains a full set of capabilities in the new namespace.
.ip
.br clone_newuser
requires that the calling process is not threaded; specifying
.br clone_newuser
automatically implies
.br clone_thread .
since linux 3.9,
.\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71
.\" https://lwn.net/articles/543273/
.br clone_newuser
also automatically implies
.br clone_fs .
.br clone_newuser
requires that the user id and group id
of the calling process are mapped to user ids and group ids in the
user namespace of the calling process at the time of the call.
.ip
for further information on user namespaces, see
.br user_namespaces (7).
.tp
.br clone_newuts " (since linux 2.6.19)"
this flag has the same effect as the
.br clone (2)
.b clone_newuts
flag.
unshare the uts ipc namespace,
so that the calling process has a private copy of the
uts namespace which is not shared with any other process.
use of
.br clone_newuts
requires the
.br cap_sys_admin
capability.
.tp
.br clone_sysvsem " (since linux 2.6.26)"
.\" commit 9edff4ab1f8d82675277a04e359d0ed8bf14a7b7
this flag reverses the effect of the
.br clone (2)
.b clone_sysvsem
flag.
unshare system\ v semaphore adjustment
.ri ( semadj )
values,
so that the calling process has a new empty
.i semadj
list that is not shared with any other process.
if this is the last process that has a reference to the process's current
.i semadj
list, then the adjustments in that list are applied
to the corresponding semaphores, as described in
.br semop (2).
.\" clone_newns if clone_sighand is set and signals are also being shared
.\" (i.e., current->signal->count > 1), force clone_thread.
.pp
in addition,
.br clone_thread ,
.br clone_sighand ,
and
.br clone_vm
can be specified in
.i flags
if the caller is single threaded (i.e., it is not sharing
its address space with another process or thread).
in this case, these flags have no effect.
(note also that specifying
.br clone_thread
automatically implies
.br clone_vm ,
and specifying
.br clone_vm
automatically implies
.br clone_sighand .)
.\" as at 3.9, the following forced implications also apply,
.\" although the relevant flags are not yet implemented.
.\" if clone_thread is set force clone_vm.
.\" if clone_vm is set, force clone_sighand.
.\"
if the process is multithreaded, then
the use of these flags results in an error.
.\" see kernel/fork.c::check_unshare_flags()
.pp
if
.i flags
is specified as zero, then
.br unshare ()
is a no-op;
no changes are made to the calling process's execution context.
.sh return value
on success, zero returned.
on failure, \-1 is returned and
.i errno
is set to indicate the error.
.sh errors
.tp
.b einval
an invalid bit was specified in
.ir flags .
.tp
.b einval
.br clone_thread ,
.br clone_sighand ,
or
.br clone_vm
was specified in
.ir flags ,
and the caller is multithreaded.
.tp
.b einval
.br clone_newipc
was specified in
.ir flags ,
but the kernel was not configured with the
.b config_sysvipc
and
.br config_ipc_ns
options.
.tp
.b einval
.br clone_newnet
was specified in
.ir flags ,
but the kernel was not configured with the
.b config_net_ns
option.
.tp
.b einval
.br clone_newpid
was specified in
.ir flags ,
but the kernel was not configured with the
.b config_pid_ns
option.
.tp
.b einval
.br clone_newuser
was specified in
.ir flags ,