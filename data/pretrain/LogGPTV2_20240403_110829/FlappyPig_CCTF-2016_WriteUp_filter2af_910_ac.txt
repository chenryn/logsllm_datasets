print byte_4004
print "".join([chr(c) for c in byte_4004])
byte_23FD = [0xC, 0x4B, 0x38, 0x19, 0x2C, 0x39, 0x15, 0x4D, 0x3E, 0x3E, 0x23,
0x6B, 0]
byte_23F0 = [0xDE, 0xBF, 0xDC, 0xDB, 0xDA, 0xA1, 0xD9, 0xD5, 0xD7, 0xD6, 0xA0,
0xD4, 0]
out_info = [ord(c) for c in "CCTF"]
for i in range(12):
out_info.append(byte_23FD[i] ^ byte_4004[i] ^ ((~byte_23f0[i])&0xff))
print "".join([chr(c) for c in out_info])
parse_something()
成功截图:
Help FBI
Bin中这道题有点麻烦,控制流混淆+字符串加密+反调试+静态编译+arm。所以看起来比较费力。由于比较繁琐,细节部分就不赘述了。
1.定位字符串解密函数为0x9b00函数
在关键位置打印log,获取控制流程。
最终得到解密函数实现如下,并将文件中的几个字符串处进行解密:
__author__ = "pxx"
def strlen(info):
index = 0
for item in info:
if item == 0:
return index
else:
index += 1
return index
def sub_a0d0(v1, v2):
#2, 12, 2
#3, 12, 3
return v1 % v2
def decode_9B00(info):
byte_1a022 = [0x98, 0x91, 0xCE, 0xB4, 0x8C, 0xBF, 0x92, 0xCF, 0x97, 0xAB,
0x86, 0xBD]
v14 = []
index = 0
byte_1a022_len = strlen(byte_1a022)
while index = len_in:
index_i = 0
if index >= 256:
break
#print [hex(c) for c in v13]
#raw_input(":")
return v13
5.逆向置换对比的部分与前面类似,也是根据控制流信息,还原代码如下:
def check_input(tmp_table, input_val):
index = 0
v25 = tmp_table[0]
v26 = tmp_table[1]
result_list = []
while index ", v31
result_list.append(v31)
v4 = (~input_val[index] & 0x8AA99332 | ((input_val[index] & 0xCD)&0xff)) ^
(~v31 & 0x32 | ((v31 & 0xCD)&0xff));
input_val[index] = v4
index += 1
tmp_table[0] = v25
tmp_table[1] = v26
#compare input_val with result_table
6.根据还原出来的代码逻辑发现, tmp_table的变化与输入没关系,只是自身的变化,所以可以根据结果来推算输入,代码如下:
target_list = [0x42, 0x10, 1, 0xFD, 0x52, 0xBC, 0x5C, 0x61, 0x1D, 0x76, 2,
0xA7, 0x52, 0x77, 0x52, 0x5E]
def decode_input_real(tmp_table, target_list):
index = 0
v25 = tmp_table[0]
v26 = tmp_table[1]
out_info = []
result_list = []
while index ", v31
#result_list.append(v31)
mid_val = target_list[index] ^ (~v31 & 0x32 | ((v31 & 0xCD)&0xff))
print "index:", index
print "mid_val:", mid_val
for val in range(256):
#print ((~val & 0x8AA99332 | ((val & 0xCD)))&0xff)
if ((~val & 0x8AA99332 | ((val & 0xCD)))&0xff) == mid_val:
print "—–:", chr(val)
out_info.append(chr(val))
#v4 = (~input_val[index] & 0x8AA99332 | ((input_val[index] & 0xCD)&0xff)) ^
(~v31 & 0x32 | ((v31 & 0xCD)&0xff));
#input_val[index] = v4
index += 1
tmp_table[0] = v25
tmp_table[1] = v26
return out_info
byte_table = init_cryptto_table_96f0([], 12)
tmp_table = [0]*2 + byte_table
out_info = decode_input_real(tmp_table, target_list)
print out_info
print "".join(out_info)
成功截图如下:
验证如下:
Web
萝莉俱乐部-2
访问[www.loli.club](http://www.loli.xn--club-o84fui79bqa107exte7s3ejzqmgzea108az6tz30g/) 查看源代码可以看到一个邮箱:
在gayhub里搜这个邮箱可以找到源码:
点进去可以看到真实的blog地址。
把[https://github.com/PockyNya/pyprint](https://github.com/PockyNya/pyprint)
clone到本地,审计代码。
可以发现在AddPostHandler的post方法可以越权添加文章。
本地搭建测试一下,可以成功。
相同的数据包,发送到pocky.loli.club即可添加含有xss代码的文章。
然后访问[http://pocky.loli.club:41293/posts/clickme](http://pocky.loli.club:41293/posts/clickme)
测试成功。
根据提示,将这个url发到PI:EMAIL。
在xss平台就能接收到了。
将得到的flag从16进制转ascii即可看到明文:
萝莉俱乐部-1
从blog代码里还能看到有一个"日记"路径,访问可以看到:
点进去发现是403,查看代码发现:
如果服务器没有收到一个叫username的secure_cookie,则需要使用密码来访问这个页面.所以带着刚才xss打到的cookie访问即可看到内容:
可以看到一段lua代码,分析代码之后发现应该是通过telegram 进行控制,需要找命令执行的漏洞,代码中没有过虑分号,所以可以用分号进行命令注入。
注册一个telegram账号,根据提示与@PockyNyan建立会话,根据上面lua代码分析出来的规则,发送构造好的指令,即可得到flag:
萝莉俱乐部-3
扫描loli.club的子域名可以发现:
存在一个ns.loli.club,根据提示"用python和mysql开发的"猜测会有sqli漏洞:
测试发现确实存在,写一个中转脚本方便测试:
(不要在意代码里存在命令注入什么的啦..)
通过order by测试出表中有四个字段,
第二个字段是回显位.找表名,字段名什么的就不赘述了。
只有一个hosts表,四个字段分别是id,ip,domain,type,把ip数据查出来:
得到了一个内网IP:10.47.111.187,再把domain也查出来,发现对应的domain是: op-admin.in.loli.club
估计这个就是loli-4的入口了。
因为数据库中没有flag,所以想可能要用其他方法获得flag.试了好长时间之后发现,主办方在里面预留了一个udf后门,查询mysql.func可以看到函数名:
可以看到确实存在一个名为sYsT3m_e的函数,由于函数不带回显,所以将命令结果发送到vps接收,如:
bash直接反弹shell没成功,只好从vps上wget一个py反弹shell的脚本到目标机上运行,连上之后可以从目录找到flag:
萝莉俱乐部-4
在上一步中得到了一个IP: 10.47.111.187, 正好服务器中提供了nmap,果断的扫了一下端口:
发现存在两个web,一个80端口,一个8080端口,扔上去一个自己写的马,开启代理,然后本地挂代理访问,发现80端口什么都没有,8080端口是:
看提示的意思应该是需要用admin账号登录,网站ThinkPHP框架写的,本来以为不能有注入,不过还是手贱的试了一下,结果…
还真有注…果断扔到sqlmap里跑了一下:
得到密码,sha1解密之后是: iiaklis,登录拿到flag.
(p.s. 估计这题本意是让update修改密码,不过让我捡了个漏,不管那些了…拿到flag就好 2333333