### SHACAL-1 and SHACAL-2 in MTProto

**Security Analysis:**

The security of the MTProto-based channel, as described in Corollary 1, is contingent on the behavior of SHACAL-1 and SHACAL-2 as pseudorandom functions (PRFs) under various conditions. These include:

- **Single-Use Keys:** When keys are used only once.
- **Related Keys:** When keys are related (LRKPRF and HRKPRF, as defined in Section V-B).
- **Partially Chosen Keys:** When keys are partially chosen and evaluated on fixed inputs.
- **Key and Input Switching:** When the key and input positions are switched.

**Related-Key Assumptions:**

The related-key assumptions (LRKPRF and HRKPRF) are particularly unusual. While these assumptions hold in the ideal cipher model, they require further investigation in the standard model to ensure their validity.

**Quantitative Security:**

The quantitative security analysis includes a limiting term in the advantage, which ensures security only if the number of queries \( q_{Ch} \) is sufficiently small. The security bound is given by:
\[
\text{Adv}_{\text{OTIND}} \leq 4 \left( \text{Adv}_{\text{OTPRF}} + \text{Adv}_{\text{LRKPRF}} + \text{Adv}_{\text{HRKPRF}} \right) + \frac{q_{Ch} (q_{Ch} - 1)}{2^{128}} + 2 \cdot \text{Adv}_{\text{OTIND}} \cdot \text{Adv}_{\text{OTPRF}} + \frac{p_b + 1}{4}
\]

### Implementation Issues in Telegram Clients

**Code Snippet Analysis:**

The following code snippet from the Telegram client demonstrates a potential timing leak in the handling of message lengths:

```cpp
if (messageLength > kMaxMessageLength) {
    LOG(("TCP Error: bad messageLength %1").arg(messageLength));
    TCP_LOG(("TCP Error: bad message %1").arg(Logs::mb(ints, intsCount * kIntSize).str()));
    return restart();
}
// ...
// MAC computation and check follow
```

**Discussion:**

- **Timing Leak Vulnerability:**
  - All three desktop, Android, and iOS clients were found to violate Telegram’s security guidelines, which state that the `msg_key` check must be performed even if an error is encountered before this check.
  - TDLib, the cross-platform library for building Telegram clients, avoids timing leaks by performing the MAC check first.

**Practical Experiments:**

- **Experiment Setup:**
  - We conducted experiments to verify the exploitability of the side channel in the desktop client.
  - The experiment measured the time difference between processing a message with a wrong `msg_length` and a message with a correct `msg_length` but a wrong MAC.
  - The Linux desktop client was modified to process messages generated locally without network engagement.
  - Data was collected for 108 trials under ideal conditions (e.g., hyper-threading and Turbo Boost disabled).

- **Results:**
  - After removing outliers, the mean time difference was approximately 3 microseconds.
  - This difference is significant enough for a remote attacker to detect, even with network noise (cf. [43], where sub-microsecond timing differences were successfully resolved over a LAN).

**Figure 27:**
- **Description:**
  - Time taken by `SessionPrivate::handleReceived` in microseconds for processing messages with different `msg_length` values.

### Discussion

**Central Result:**

- The use of symmetric encryption in Telegram’s MTProto 2.0 can provide the expected security for a bidirectional channel with minor modifications.
- Telegram developers have implemented most of the suggested changes, providing some assurance to users regarding the confidentiality and integrity of cloud chats, comparable to protocols running over TLS.

**Caveats:**

- **Attacks:**
  - Our work also presents attacks against the symmetric encryption in Telegram, highlighting the gap between the modeled variant of MTProto 2.0 and actual implementations.
  - The reordering attack (Section IV-B1) and the IND-CPA attack (Section IV-B2) can be mitigated by changing client and server processing without altering the on-the-wire format.
  - Telegram has informed us that they have made the necessary changes.

- **Implementation Attacks:**
  - The attacks in Section VI are implementation-specific and fall outside our model, which does not cover timing differences.
  - The design decision to adopt Encrypt & MAC in MTProto introduces potential vulnerabilities in specific implementations.

- **Tightness of Proofs:**
  - Our proofs are not necessarily tight, containing terms bounding the advantage by approximately \( \frac{q}{2^{64}} \), where \( q \) is the number of queries.
  - No attacks matching these bounds have been found, suggesting that a refined analysis might yield tighter bounds.

- **Future Work:**
  - The attack in Appendix A targets the implementation of Telegram’s key exchange and is outside our model due to the exclusion of timing side channels and the focus on the symmetric part of MTProto.
  - Significant parts of Telegram’s design, such as multi-user security, key exchange, higher-level message processing, secret chats, forward secrecy, control messages, bot APIs, CDNs, cloud storage, and the Passport feature, remain unstudied and are pressing areas for future research.