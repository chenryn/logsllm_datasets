DWORD PTR __in$[ebp] 
    fstp  DWORD PTR _f$[ebp] 
    push  4 
    lea  
eax, DWORD PTR _f$[ebp] 
    push  eax 
    lea  
ecx, DWORD PTR _t$[ebp] 
    push  ecx 
    call  _memcpy 
    add  
esp, 12 
    mov  
edx, DWORD PTR _t$[ebp] 
    or  
edx, -2147483648 ; 80000000H - set minus sign 
    mov  
DWORD PTR _t$[ebp], edx 
    mov  
eax, DWORD PTR _t$[ebp] 
    shr  
eax, 23  
; 00000017H - drop significand 
    and  
eax, 255   
; 000000ffH - leave here only exponent 
    add  
eax, 2  
; add 2 to it 
    and  
eax, 255   
; 000000ffH 
    shl  
eax, 23  
; 00000017H - shift result to place of bits 30:23 
    mov  
ecx, DWORD PTR _t$[ebp] 
    and  
ecx, -2139095041 ; 807fffffH - drop exponent 
; add original value without exponent with new calculated exponent 
    or  
ecx, eax 
    mov  
DWORD PTR _t$[ebp], ecx 
    push  4 
    lea  
edx, DWORD PTR _t$[ebp] 
    push  edx 
    lea  
eax, DWORD PTR _f$[ebp] 
    push  eax 
    call  _memcpy 
    add  
esp, 12 
    fld  
DWORD PTR _f$[ebp] 
    mov  
esp, ebp 
    pop  
ebp 
    ret  
0 
?f@@YAMM@Z ENDP ; f 
这个程序略微臃肿。如果使用优化选项/Ox 程序就不会调用 memcpy()，转而直接使用变量 f。不过，
不启用优化选项而编译出来的代码易于理解。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
339 
如果启用 GCC 4.4.1 的-O3 选项又会如何？ 
指令清单 21.28  Optimizing GCC 4.4.1 
; f(float) 
 public _Z1ff 
_Z1ff  proc near 
var_4  = dword  ptr -4 
arg_0  = dword  ptr 8 
 push  
ebp 
 mov   
ebp, esp 
 sub   
esp, 4 
 mov   
eax, [ebp+arg_0] 
 or   
eax, 80000000h  ; set minus sign 
 mov   
edx, eax 
 and   
eax, 807FFFFFh  ; leave onlySign and significand in EAX 
 shr   
edx, 23  
; prepare exponent 
 add   
edx, 2  
; add 2 
 movzx  
edx, dl  
; clear all bits except 7:0 in EAX 
 shl   
edx, 23  
; shift new calculated exponent to its place 
 or   
eax, edx   
; join new exponent and original value without exponent 
 mov   
[ebp+var_4], eax 
 fld   
[ebp+var_4] 
 leave 
 retn 
_Z1ff  endp 
 public main 
main  proc near 
 push  
ebp 
 mov   
ebp, esp 
 and   
esp, 0FFFFFFF0h 
 sub   
esp, 10h 
 fld   
ds:dword_8048614 ; -4.936 
 fstp  
qword ptr [esp+8] 
 mov   
dword ptr [esp+4], offset asc_8048610 ; "%f\n" 
 mov   
dword ptr [esp], 1 
 call  
___printf_chk 
 xor   
eax, eax 
 leave 
 retn 
main   endp 
f()函数的指令几乎可以自然解释。有趣的是，尽管结构体的各个字段如同大杂烩一样复杂，但是 GCC
能够在编译阶段就计算出函数表达式 f(1.234)的值，并且把这个结果传递给 printf()函数！ 
21.7 练习题 
21.7.1 题目 1 
Linux程序
①
MIPS程序
： 
请参见 http://beginners.re/exercises/per_chapter/struct_exercise_Linux86.tar 
②
① GCC 4.8.1 -O3。 
② GCC 4.4.5-O3。 
： 
请参见 http://beginners.re/exercises/per_chapter/struct_exercise_MIPS.tar。 
这个 Linux x86 程序能够打开文件并在屏幕上打印数字。请问它打印的是什么？ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
340 
逆向工程权威指南（上册） 
21.7.2 题目 2 
这个函数的输入变量是结构体。请尝试逆向推出结构体的各个字段，不必推敲函数的具体功能。 
由 MSVC 2010 /Ox 选项编译而得的代码如下所示。 
指令清单 21.29  Optimizing MSVC 2010 
$SG2802 DB  
'%f', 0aH, 00H 
$SG2803 DB  
'%c, %d', 0aH, 00H 
$SG2805 DB  
'error #2', 0aH, 00H 
$SG2807 DB  
'error #1', 0aH, 00H 
__real@405ec00000000000 DQ 0405ec00000000000r ; 123 
__real@407bc00000000000 DQ 0407bc00000000000r ; 444 
_s$ = 8 
_f        
PROC 
  push     esi 
  mov      esi, DWORD PTR _s$[esp] 
  cmp      DWORD PTR [esi], 1000 
  jle      SHORT $LN4@f 
  cmp      DWORD PTR [esi+4], 10 
  jbe      SHORT $LN3@f 
  fld      DWORD PTR [esi+8] 
  sub      esp, 8 
  fmul     QWORD PTR __real@407bc00000000000 
  fld      QWORD PTR [esi+16] 
  fmul     QWORD PTR __real@405ec00000000000 
  faddp    ST(1), ST(0) 
  fstp     QWORD PTR [esp] 
  push     OFFSET $SG2802 ; ’%f’ 
  call     _printf 
  movzx    eax, BYTE PTR [esi+25] 
  movsx    ecx, BYTE PTR [esi+24] 
  push     eax 
  push     ecx 
  push     OFFSET $SG2803 ; ’%c, %d’ 
  call     _printf 
  add      esp, 24 
  pop      esi 
  ret      0 
$LN3@f: 
  pop      esi 
  mov      DWORD PTR _s$[esp-4], OFFSET $SG2805 ; ’error #2’ 
  jmp     _printf 
$LN4@f: 
  pop      esi 
  mov      DWORD PTR _s$[esp-4], OFFSET $SG2807 ; ’error #1’ 
  jmp      _printf 
_f       ENDP 
指令清单 21.30  Non-optimizing Keil 6/2013 (ARM mode) 
f  PROC 
  PUSH      {r4-r6,lr} 
  MOV       r4,r0 
  LDR       r0,[r0,#0] 
  CMP       r0,#0x3e8 
  ADRLE    r0,|L0.140| 
  BLE       |L0.132| 
  LDR       r0,[r4,#4] 
  CMP       r0,#0xa 
  ADRLS    r0,|L0.152| 
  BLS       |L0.132| 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
341 
  ADD       r0,r4,#0x10 
  LDM      r0,{r0,r1} 
  LDR      r3,|L0.164| 
  MOV      r2,#0 
  BL       __aeabi_dmul 
  MOV      r5,r0 
  MOV      r6,r1 
  LDR      r0,[r4,#8] 
  LDR      r1,|L0.168| 
  BL       __aeabi_fmul 
  BL       __aeabi_f2d 
  MOV      r2,r5 
  MOV      r3,r6 
  BL       __aeabi_dadd 
  MOV     r2,r0 
  MOV     r3,r1 
  ADR     r0,|L0.172| 
  BL      __2printf 
  LDRB      r2,[r4,#0x19] 
  LDRB      r1,[r4,#0x18] 
  POP       {r4-r6,lr} 
  ADR      r0,|L0.176| 
  B        __2printf 
|L0.132| 
  POP       {r4-r6,lr} 
  B         __2printf 
  ENDP 
|L0.140| 
  DCB      "error #1\n",0 
  DCB      0 
  DCB      0 
|L0.152| 
  DCB   
"error #2\n",0 
  DCB     0 
  DCB      0 
|L0.164| 
  DCB      0x405ec000 
|L0.168| 
  DCB   
0x43de0000 
|L0.172| 
  DCB  
"%f\n",0 
|L0.176| 
  DCB       "%c, %d\n",0 
指令清单 21.31  Non-optimizing Keil 6/2013 (Thumb mode) 
f  PROC 
  PUSH      {r4-r6,lr} 
  MOV       r4,r0 
  LDR       r0,[r0,#0] 
  CMP       r0,#0x3e8 
  ADRLE    r0,|L0.140| 
  BLE       |L0.132| 
  LDR       r0,[r4,#4] 
  CMP       r0,#0xa 
  ADRLS    r0,|L0.152| 
  BLS       |L0.132| 
  ADD       r0,r4,#0x10 
  LDM       r0,{r0,r1} 
  LDR       r3,|L0.164| 
  MOV       r2,#0 
  BL        __aeabi_dmul 
  MOV       r5,r0 
  MOV       r6,r1 
  LDR       r0,[r4,#8] 
  LDR       r1,|L0.168| 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
342 
逆向工程权威指南（上册） 
  BL        __aeabi_fmul 
  BL        __aeabi_f2d 
  MOV       r2,r5 
  MOV       r3,r6 
  BL        __aeabi_dadd 
  MOV       r2,r0 
  MOV       r3,r1 
  ADR       r0,|L0.172| 
  BL        __2printf 
  LDRB      r2,[r4,#0x19] 
  LDRB      r1,[r4,#0x18] 
  POP       {r4-r6,lr} 
  ADR       r0,|L0.176| 
  B        __2printf 
|L0.132| 
  POP      {r4-r6,lr} 
  B        __2printf 
  ENDP 
|L0.140| 
  DCB      "error #1\n",0 
  DCB       0 
  DCB       0 
|L0.152| 
  DCB       "error #2\n",0 
  DCB       0 
  DCB       0 
|L0.164| 
  DCD       0x405ec000 
|L0.168| 
  DCD       0x43de0000 