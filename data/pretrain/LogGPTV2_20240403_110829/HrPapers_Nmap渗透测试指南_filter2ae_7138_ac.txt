        local user = "Hongri Anquan yumu"
        table.insert(table_input,host.ip)
        table.insert(table_input,string.format("From: %s", user))
        return stdnse.format_output(true, table_input)
        -- 输出“Hongri Anquan yumu”和host.ip信息
        -- stdnse.format_output: Formatted output looks better
    end
结果如下：
* * *
**再举一个栗子：小试牛刀，我们写一个Nse脚本来获取zzcms8.2网站上的客服电话号码。**
**参数知识扩展**
http | 库  
---|---  
get() | 发起get请求，请求结果以一个table的形式返回  
host | 要请求的主机  
path | 要检索的路径  
options | 可选，允许调用者控制socket,请求头的table  
port | 要检索的端口  
|  
post() | 发起post请求，请求结果以一个table的形式返回  
ignored | 向后兼用，一般填写nil，忽略即可  
postdata | post数据，字符串或者table格式  
host | 要请求的主机  
path | 要检索的路径  
options | 可选，允许调用者控制socket,请求头,超时时间的table  
port | 要检索的端口  
**注意小细节**
    -- 1.方法解释
    -- string.match(str, pattern, init)
    -- string.match()只寻找源字串str中的第一个配对. 参数init可选, 指定搜寻过程的起点, 默认为1。 
    -- 在成功配对时, 函数将返回配对表达式中的所有捕获结果; 如果没有设置捕获标记, 则返回整个配对字符串. 当没有---- 成功的配对时, 返回nil。
    -- 2.乱码问题解决方法
    -- 打印的response.body（响应体）在cmder可能会显示乱码。解决方法如下：
    -- cmd命令行窗口字符编码切换为UTF-8，命令行中执行：chcp 65001
    -- portrulenumber.nse
    local stdnse = require "stdnse"
    local table = require "table"
    local shortport = require "shortport"
    local http = require "http"
    local string = require "string"
    description = [[Get the phone number of the customer service]]
    ---    --@usage
    -- nmap --script portrulenumber -p 80 
    -- @output                                                  
    -- PORT   STATE SERVICE                              
    -- 80/tcp open  http                                 
    -- |_portrulenumber: consumer hotline:0371-86137281  
    -- Version 0.1
    -- Created 21/3/2018 - v0.1 - created by yumu 
    ---    
    author = "HongRi yumu"
    license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
    categories = {"default","safe"}
    portrule = shortport.http
    function action(host,port)
        local telephone_number,baseurl
        baseurl = "/"
        response = http.get(host,port,baseurl)
        telephone_number = string.match(response.body,"%d+-%d+")
        if  telephone_number ~= nil
        then
            return "consumer hotline:"..telephone_number
        else
            return "Hongri Auquan"
        end 
    end
* * *
#### Postrule
**Portrule会在Namp结束时触发脚本，通常用于扫描结果的数据提取和整理。**
举个栗子： 触发时候打印"Hongri Anquan test postrule"
    -- postrule.nse
    description = [[postrule test]]
    ---    --@usage
    -- nmap --script postrule 
    -- @output
    -- Pre-scan script results:
    -- |_prerule: HongRi AnQuan test prerule
    --    -- Version 0.1
    -- Created 21/3/2018 - v0.1 - created by yumu 
    --    ---    
    author = "HongRi yumu"
    license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
    categories = {"default","safe"}
    postrule = function(host,port)
       return true
    end 
    action = function(host, port)
        return "Hongri Anquan test postrule"
    end
* * *
#### 初出茅庐，实战编写脚本探测zzcms8.2 反射型XSS
需要详细zzcms8.2代码审计的内容请到：
那我这里本地搭建了环境，然后我先简单使用火狐测试一下是否存在反射型xss。废话不说，打字累人，看操作。
嗯，只要玩过web渗透的都应该知道此时源码当中肯定插入了 ****,这点必须清楚，因为这是我们后面编写Nse脚本思路。
好。我们来看看图，确定编写思路。
看完四步的你应该很清晰如何编写我们的脚本了，那就开干吧。我这里新建一个zzcmsxss.nse,代码如下：
    local http = require "http"
    local shortport = require "shortport"
    local string = require "string"
    local stdnse = require "stdnse"
    local table = require "table"
    description = [[Detecting the presence of reflective xss in zzcms8.2]]
    ---    -- @usage
    -- nmap --script zzcmsxss -p 80 
    -- nmap --script zzcmsxss -p 80 --script-args zzcmsxss.url-path='/website' 
    -- @output
    -- PORT   STATE SERVICE
    -- 80/tcp open  http
    -- | zzcmsxss:
    -- |_  Final Results: Reflective xss exists
    --    -- @xmloutput
    -- 
    -- 
    -- 
    -- 
    -- 
    -- 
    --    -- Version 0.1
    -- Created 21/3/2018 - v0.1 - created by yumu 
    ---    
    author = "HongRi yumu"
    license = "Same as Nmap--See http://nmap.org/book/man-legal.html"
    categories = {"default","safe","discovery","version"}
    portrule = function(host,port)
       return port.protocol == "tcp" and port.state == "open"
    end
    local FLAG = "alert"
    action = function(host, port)
       print("port.numner is : ",port.number)
       print("port status is : ",port.state)
       local table_input = {}
       local xss_exit = "Reflective xss exists"
       local xss_not_exit = "Reflective xss does not exist"
       local basepath = stdnse.get_script_args(SCRIPT_NAME .. ".url-path") or '/install/index.php'
       local options={headers = {
       ["Accept"]="text/html,application/xhtml+xm…plication/xml;q=0.9,*/*;q=0.8",
       ["Accept-Language"]="zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",
       ["Accept-Encoding"]="gzip, deflate",
       ["User-Agent"] = "Mozilla/5.0 (Windows NT 6.1; W…) Gecko/20100101 Firefox/58.0",
       ["Host"] = host.name,
       ["Referer"]="http://".. host.name .."/install/index.php",
       ["Content-Type"]="application/x-www-form-urlencoded",
       ["Connection"]="Keep-alive",
       ["Content-length"]=76,
       ["Upgrade-Insecure-Requests"]=1,
       } }
       local postdata = {
        ["admin"]="admin",
        ["adminpwdtrue"]="admin",
        ["step"]=6
       }
       local response= http.post(host,port,basepath,options,nil,postdata)  -- 发送post请求 
       if response.status and response.body 
       then
        if response.status == 200 and string.find(response.body,FLAG) ~= nil  -- 如果写入alert字段，说明漏洞存在
        then
          table.insert(table_input,string.format("Final Results: %s",xss_exit))
            return stdnse.format_output(true, table_input)
        else
          table.insert(table_input,string.format("Final Results: %s",xss_not_exit))
            return stdnse.format_output(true, table_input)
        end
       end
    end
结果如下（保存有xml的输出格式）：