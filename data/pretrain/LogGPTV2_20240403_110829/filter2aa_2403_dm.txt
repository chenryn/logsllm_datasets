if (*s'9') 
      ... 
这是两个比较操作。比较有意思的是，我们完全可以只用一个比较指令就完成这两步比较运算：将输
入字符的值减去“0”字符的值，将结果视为无符号数（这是关键）与 9 进行比较。若最后的无符号数比 9
还大，那么输入字符就不是数字字符。 
比如说，如果我们在输入的字符串中含有小数点(“.”)，这个符号在 ASCII 表中排在字符零“0”的前 2
位。因此判断语句的减法运算表达式是：46−48=−2。有符号数的减法运算当然会求得有符号数。被减数比
减数小，计算的结果肯定是负数。但是，如果我们把这个结果当作无符号数来处理的话，它将是 0xfffffffe
（对应的十进制数是 42949672294），显然它比 9 大。举这个例子是想说明按照无符号数处理的重要性。 
编译器经常会这样做，因此我们应该重新认识这种技巧。 
我们可以本书的其他地方看到这个例子：比如 48.1.2 节。 
在编译 64 位应用程序时，MSVC 2013 还好使用这种优化技巧。 
42.2.2  ARM 模式下的 Keil6/2013 优化 
指令清单 42.7  ARM 模式下的 Keil6/2013 优化 
1  my_atoi PROC 
2   
PUSH   
{r4-r6,lr} 
3   
MOV   
r4,r0 
4   
LDRB   
r0,[r0,#0] 
5   
MOV   
r6,#0 
6   
MOV   
r5,r6 
7   
CMP   
r0,#0x2d '-' 
8  ; R6 will contain 1 if minus was encountered, 0 if otherwise 
9  
MOVEQ  
r6,#1 
10  
ADDEQ  
r4,r4,#1 
11  
B  
|L0.80| 
12  |L0.36| 
13    
SUB   
r0,r1,#0x30 
14    
CMP   
r0,#0xa 
15    
BCC   
|L0.64| 
16    
ADR   
r0,|L0.220| 
17    
BL   
__2printf 
18    
MOV   
r0,#0 
19    
BL   
exit 
20  |L0.64| 
21    
LDRB   
r0,[r4],#1 
22    
ADD   
r1,r5,r5,LSL #2 
23    
ADD   
r0,r0,r1,LSL #1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 42 章  字符串转换成数字，函数 atoi() 
465 
24  
SUB   
r5,r0,#0x30 
25  |L0.80| 
26    
LDRB   
r1,[r4,#0] 
27    
CMP   
r1,#0 
28    
BNE   
|L0.36| 
29    
CMP   
r6,#0 
30  ; negate result 
31  
RSBNE  
r0,r5,#0 
32  
MOVEQ  
r0,r5 
33  
POP   
{r4-r6,pc} 
34  
ENDP 
35 
36  |L0.220| 
37    
DCB   
"Error! Unexpected char: '%c'\n",0 
32 位 ARM 的指令集里没有 NEG（取负）指令，因此编译器分配了第 31 行的“反向减法”指令。
当第 29 行指令—即 CMP 的比较结果为“不相等”时，才会执行第 31 行的条件执行指令（我们可以
看到 NE 后缀，也就是“（运行条件为）Not Equal”的意思）。而后，RSBNE 指令用 0 减去上一步的计
算结果。这条指令确实就是减法运算指令，只是被减数和减数的操作符排列位置对调了一下。用 0 来
减去任何数，实际的效果就是对该数取负。实现的结果可以用这个来表示：0−x=−x。 
Thumb 程序的运算模式几乎完全相同。 
在编译 ARM64 平台的应用程序时，GCC 4.9 能够分配 NEG（取反）指令。 
42.3  练习 
这里顺便提一下，安全研究人员经常研究各种异常情况。他们重点关注不合乎预期的输入值，通过这
种数据诱使程序进行某种与设计思路相左的行为。因此，他们也会关注模糊测试方法。作为练习，我们可
以试图输入非数字字符，看看会发生什么。自己可以尝试着解释一下背后的成因是什么。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 4433 章
章    内
内  联
联  函
函  数
数  
在编译阶段，将会被编译器把函数体展开并嵌入到每一个调用点的函数，就是内联函数。 
指令清单 43.1  一个简单的例子 
#include  
int celsius_to_fahrenheit (int celsius) 
{ 
        return celsius * 9 / 5 + 32; 
}; 
int main(int argc, char *argv[]) 
{ 
        int celsius=atol(argv[1]); 
        printf ("%d\n", celsius_to_fahrenheit (celsius)); 
}; 
此函数在汇编层面的具体指令与源代码几乎一一对应。然而，如果在 GCC 编译环境下，我们采用-03
参数优化的话，我们会看到如下所示的代码。 
指令清单 43.2  GCC 4.8.1 优化 
_main: 
          push    ebp 
          mov     ebp, esp 
          and     esp, -16 
          sub     esp, 16 
          call    ___main 
          mov     eax, DWORD PTR [ebp+12] 
          mov     eax, DWORD PTR [eax+4] 
          mov     DWORD PTR [esp], eax 
          call    _atol 
          mov     edx, 1717986919 
          mov     DWORD PTR [esp], OFFSET FLAT:LC2 ; "%d\12\0" 
          lea     ecx, [eax+eax*8] 
          mov     eax, ecx 
          imul    edx 
          sar     ecx, 31 
          sar     edx 
          sub     edx, ecx 
          add     edx, 32 
          mov     DWORD PTR [esp+4], edx 
          call    _printf 
          leave 
          ret 
值得注意的是，编译器用乘法指令变相地实现了除法运算（可以参见第 41 章）。 
您没看错，温度转换函数 celsius_to_fahrenheit()（摄氏温度转换成华氏温度）的函数体被直接展开，放
在了函数 printf()（显示字符串）的前面。为什么呢？因为这样运行速度会更快一些。这种代码不需要在调
用函数时处理多余的函数调用和返回指令。 
现在具有优化功能的编译器一般都能自动的把小型函数的函数体直接“嵌入”到调用方函数的代码
里。当然我们也可以借助关键字“inline”强制编译器进行这种“嵌入”处理。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 43 章  内 联 函 数 
467 
43.1  字符串和内存操作函数 
在处理字符串和内存操作的常见函数时，例如：strycpy()、strcmp()、strlen、memset()、memcpy()、memcmp()
函数，编译器通常会把这些函数当作内联函数处理。 
多数情况下，以内联函数编译的函数会比那些被单独调用的函数运行得更快。 
本节将演示一些非常具有特征的内联代码，以供读者研究。 
43.1.1  字符串比较函数 strcmp() 
指令清单 43.3  字符串比较函数 strcmp() 
bool is_bool (char *s) 
{ 
          if (strcmp (s, "true")==0) 
                   return true; 
          if (strcmp (s, "false")==0) 
                   return false; 
          assert(0); 
}; 
指令清单 43.4  采用 GCC 4.8.1 优化的例子 
.LC0: 
          .string "true" 
.LC1: 
          .string "false" 
is_bool: 
.LFB0: 
          push  
edi 
          mov  
ecx, 5 
          push  
esi 
          mov  
edi, OFFSET FLAT:.LC0 
          sub  
esp, 20 
          mov  
esi, DWORD PTR [esp+32] 
          repz cmpsb 
          je  
.L3 
          mov  
esi, DWORD PTR [esp+32] 
          mov  
ecx, 6 
          mov  
edi, OFFSET FLAT:.LC1 
          repz cmpsb 
          seta  
cl 
          setb  
dl 
          xor  
eax, eax 
          cmp  
cl, dl 
          jne  
.L8 
          add  
esp, 20 
          pop  
esi 
          pop  
edi 
          ret 
.L8: 
          mov  
DWORD PTR [esp], 0 
          call  
assert 
          add  
esp, 20 
          pop  
esi 
          pop  
edi 
          ret 
.L3: 
          add  
esp, 20 
          mov  
eax, 1 
          pop  
esi 
          pop  
edi 
          ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
468 
逆向工程权威指南（上册） 
指令清单 43.5  采用 MSVC 2010 优化的例子 
$SG3454 DB   
'true', 00H 
$SG3456 DB   
'false', 00H 
_s$ = 8  
; size = 4 
?is_bool@@YA_NPAD@Z PROC ; is_bool 
          push  
esi 
          mov  
esi, DWORD PTR _s$[esp] 
          mov  
ecx, OFFSET $SG3454 ; 'true' 
          mov  
eax, esi 
          npad  
4 ; align next label 
$LL6@is_bool: 
          mov  
dl, BYTE PTR [eax] 
          cmp  
dl, BYTE PTR [ecx] 
          jne  
SHORT $LN7@is_bool 
          test  
dl, dl 
          je  
SHORT $LN8@is_bool 
          mov  
dl, BYTE PTR [eax+1] 
          cmp  
dl, BYTE PTR [ecx+1] 
          jne  
SHORT $LN7@is_bool 
          add  
eax, 2 
          add  
ecx, 2 
          test  
dl, dl 
          jne  
SHORT $LL6@is_bool 
$LN8@is_bool: 
          xor  
eax, eax 
          jmp  
SHORT $LN9@is_bool 
$LN7@is_bool: 
          sbb  
eax, eax 
          sbb  
eax, -1 
$LN9@is_bool: 
          test  
eax, eax 