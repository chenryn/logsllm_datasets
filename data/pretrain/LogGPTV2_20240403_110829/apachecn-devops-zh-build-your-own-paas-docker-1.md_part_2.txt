```
boot2docker stop
boot2docker download
boot2docker start
```
# 亚马逊 EC2 上的 Docker
在本书中，我将使用亚马逊 EC2 实例，由于它是托管您的 PAA 的绝佳场所，我将建议您也这样做。
**EC2** 代表 **E** 弹性 **C** 电脑 **C** 响亮，是基础设施类型的服务。亚马逊 EC2 提供虚拟服务器，订购后一分钟内即可创建并使用。
### 注
亚马逊有名为`t[x].micro`的实例，你可以每月免费使用 750 小时。你可以在[http://aws.amazon.com/free](http://aws.amazon.com/free)阅读更多关于他们的信息。
亚马逊有自己的名为 Amazon Linux AMI 的 Linux，可以用来运行 Docker。
## 安装
让我们看看如何通过以下步骤完成安装:
1.  Create an account at [http://aws.amazon.com](http://aws.amazon.com) and go to Amazon's **Create EC2 Instance Wizard** at [https://console.aws.amazon.com/ec2/v2/home?#LaunchInstanceWizard](https://console.aws.amazon.com/ec2/v2/home?#LaunchInstanceWizard).
    屏幕截图中显示了以下步骤:
    ![Installation](img/00006.jpeg)
2.  Click on **Community AMIs** in the menu on the left-hand side and select the latest `amzn-ami-pv`. Make sure that you select the `pv` version and not the `hvm` version so that you have a virtualization that is more stable and has less overhead, as shown here:
    ![Installation](img/00007.jpeg)
3.  When it's time to choose an instance type, you can choose **t1.micro** or **t2.micro** for now if they are available. The micro instances are very limited in their performance, but since they are available in the free usage tier in some regions and this is not for a live site at the moment, we can use them. Click on **Next: Configure Instance Details** and then click on the **Review and Launch** button, as shown in the following screenshot:
    ![Installation](img/00008.jpeg)
4.  在**汇总**页面验证所有细节，点击**启动实例**按钮。
5.  系统会提示您是使用现有的密钥对还是创建新的密钥对。如果这是您第一次创建亚马逊 EC2 实例，您将需要创建一个新的密钥对。这使得安全地连接到实例变得很容易。
6.  下载新的密钥对，将其移动到您的`~/.ssh/`文件夹，并移除。`txt`分机。
7.  It's also important to set the correct user permissions on the file or SSH will refuse to use it.
    在 Linux 或 Mac 上，终端命令是这样的:
    ```
    mv ~/Downloads/amz.pem.txt ~/.ssh/amz.pem
    chmod 600 ~/.ssh/amz.pem
    ```
    在 Windows 上，将密钥保存在任何地方，使用 PuTTYgen 等工具将其转换为`.ppk`文件，这样在使用 PuTTY 连接时就可以使用了。
8.  系统将提示您为实例选择一个安全组。选择作为默认服务器，因为它不是生产服务器。到了使用生产服务器的时候，我们可能希望给实例增加更多的安全性。
9.  Now we're up and running! Let's connect to it. Click on the **View Instances** button and select your newly created instance in the list, as shown here:
    ![Installation](img/00009.jpeg)
10.  在屏幕底部的中，您可以看到关于实例的一些信息。您应该在寻找公共域名系统信息。应该是这样的:
    ```
    ec2-54-187-234-27.us-west-2.compute.amazonaws.com
    ```
11.  On a Linux or Mac, open a terminal and connect to it:
    ```
    ssh PI:EMAIL -i ~/.ssh/amz.pem
    ```
    屏幕截图显示如下:
    ![Installation](img/00010.jpeg)
    我们使用`ec2-user`用户，这是亚马逊的 Linux 实例的默认用户，而`amz.pem`是我们之前下载的密钥。用上一步中的公共域名系统信息替换该网址。
    当因未知主机而询问是否继续时，键入`yes`。
    在 Windows 上，使用 PuTTY 并确保您已经在 PuTTY 身份验证选项卡中指定了步骤 4 中转换的私钥。
12.  连接到实例后，安装 Docker:
    ```
    sudo yum update
    sudo yum install -y docker
    sudo service docker start
    ```
13.  要测试它是否按预期工作，请键入`docker version`并确保没有错误。你应该看到一个几行的客户端版本，API 版本，等等。
## 开放港口
亚马逊的默认安全策略是阻止用于公开 Docker 服务的默认端口，所以我们必须改变这一点。
*   我们回到 EC2 仪表板，点击菜单中的**安全组**选项
*   选择您的 EC2 实例使用的安全组，并选择**入站**选项卡
*   Docker uses ports in a range from **49000 - 50000**, so we add a rule for this, as shown in the following screenshot:
    ![Open ports](img/00011.jpeg)
## 升级亚马逊 EC2 上的 Docker
升级一个亚马逊 Linux AMI 实例就像升级 Ubuntu 一样简单。键入`sudo yum update`并确认是否有更新等待。此命令将列出所有可用的更新，并在您确认后安装它们。
## 用户权限
Docker 要求命令由`docker`用户组中的用户运行。为了方便起见，我们将用户添加到 Docker 组，这样我们就可以在不使用`sudo`的情况下控制 Docker:
```
sudo gpasswd -a ec2-user docker
```
您可能需要注销并再次登录才能正常工作。重新登录后，运行`docker ps`确认没有权限问题。您应该会看到一行大写的单词，例如**容器标识映像命令创建状态端口名称**。
## 显示你好世界
现在，我们让 Docker 在自己选择的机器上运行，是时候让 Docker 为我们工作了。这里有几个非常基本的命令，我们可以用来与 Docker 守护进程进行一些基本的交互。
在下一章中，将解释 Docker 中使用的所有概念和短语:
*   `docker ps`:此列出正在运行的容器
*   `docker ps -a`:这个列出了所有的容器，包括运行和退出的
*   `docker images`:这个列出了本地(下载的和本地创建的)映像
*   `docker run`:这个将从一个映像中启动一个新的实例容器
*   `docker stop`:这个是用来停容器的
我们来试试下面截图中的第一个:
![Displaying Hello World](img/00012.jpeg)
不出所料，我们还没有运行任何东西。
发射一个容器就像`docker run [image] [command]`一样简单。如果映像在本地不存在，Docker 将从 Docker 注册表中心下载它，并在下载时启动您的容器。
以下步骤显示如下:
![Displaying Hello World](img/00013.jpeg)
在终端输入以下命令，启动打印字符串的容器**你好，让我离开这里**然后退出:
```
docker run oskarhane/hello echo "Hello, let me out of here"
```
这不是很有用，但是我们只是在容器内部的 Ubuntu 中运行了一个命令。
如果我们再次输入`docker ps`，我们可以看到，自从我们退出刚刚开始的后，我们仍然没有运行的容器。试试用`docker ps -a`代替，试试`docker images`。
# 总结
在本章中，我们了解到 Docker 可以在大多数操作系统上使用，安装过程因操作系统而异。我们与 Docker 守护程序进行了第一次交互，并在 Docker 中启动了第一个容器。尽管容器所做的只是编写一个命令，但在客户操作系统中启动和运行某些东西是多么容易。
我们还介绍了展示这本书的主题，运行一个由 web 服务器容器和 MySQL 容器组成的多容器 web 应用:您自己的 PaaS。
在下一章中，我们将进一步探讨 Docker、它的术语以及它周围的社区。**