# A Computationally Sound Mechanized Prover for Security Protocols

## Author
Bruno Blanchet  
CNRS, École Normale Supérieure, Paris  
Email: [Your Email Address]

## Abstract
We introduce a new mechanized prover designed to verify the secrecy properties of cryptographic protocols. Unlike most existing provers, our tool operates within the computational model rather than the Dolev-Yao model. It generates proofs as sequences of games, formalized in a probabilistic polynomial-time process calculus. Our tool offers a generic method for specifying the security properties of various cryptographic primitives, including shared- and public-key encryption, signatures, message authentication codes, and hash functions. The generated proofs are valid for a number of sessions that is polynomial in the security parameter, even in the presence of an active adversary. We have implemented this tool and tested it on several examples from the literature.

## 1. Introduction
There are two primary frameworks for analyzing cryptographic protocols: the computational model and the Dolev-Yao model. In the computational model, messages are represented as bitstrings, and the adversary is modeled as a probabilistic polynomial-time Turing machine. This model closely mirrors real-world protocol execution but typically involves manual and informal proofs. Conversely, the Dolev-Yao model treats cryptographic primitives as perfect black boxes, represented by function symbols in an algebraic system. This abstraction facilitates the development of automatic verification tools, but the resulting security proofs are generally not sound with respect to the computational model.

Since the seminal work by Abadi and Rogaway [3], there has been significant interest in relating these two frameworks. Several studies [1, 8, 11, 21, 25, 26, 35, 36] have aimed to demonstrate the soundness of the Dolev-Yao model relative to the computational model, thereby enabling automatic proofs in the computational model. However, this approach has limitations, as the models do not perfectly align, necessitating additional hypotheses to ensure soundness. For example, key cycles must be excluded, or specific security definitions for encryption must be used [5].

In this paper, we propose a different approach for automatically proving protocols in the computational model. We have developed a mechanized prover that directly works within the computational model, bypassing the Dolev-Yao model. Our tool produces proofs valid for a polynomial number of sessions in the security parameter, even in the presence of an active adversary. These proofs are presented as sequences of games, a common technique in cryptography [15, 42, 43]. The initial game represents the protocol to be proven, and the goal is to show that the probability of breaking a certain security property (e.g., secrecy) is negligible in this game. Intermediate games are derived from the previous ones through transformations that maintain negligible differences in probability. The final game is structured such that the desired probability is clearly negligible, ensuring that the desired probability is negligible in the initial game.

We represent these games using a process calculus inspired by the pi-calculus and other related calculi [31, 32, 37, 30]. In this calculus, messages are bitstrings, and cryptographic primitives are functions from bitstrings to bitstrings. The calculus has a probabilistic semantics, and all processes run in polynomial time. Observational equivalence is the primary tool for specifying security properties: \( Q \approx Q' \) if the adversary has a negligible probability of distinguishing \( Q \) from \( Q' \). Our calculus introduces an important innovation: the values of all variables during the execution of a process are stored in arrays. For instance, \( x[i] \) denotes the value of \( x \) in the \( i \)-th copy of the process that defines \( x \). Arrays replace the lists often used in manual proofs, making automation more straightforward. For example, in the definition of a message authentication code (MAC), the arguments of the MAC oracle are stored in arrays, and lookups are performed to check the message, with a negligible change in probability.

Our prover relies on a set of game transformations to transform the initial protocol into a game where the desired security property is evident. The most critical transformations are derived from the security definitions of cryptographic primitives. These transformations can be specified generically: each primitive's security definition is represented as an observational equivalence \( L \approx R \), where \( L \) and \( R \) encode functions. The prover can then automatically transform a process \( Q \) that calls the functions of \( L \) into a process \( Q' \) that calls the functions of \( R \). We have used this technique to specify several variants of shared- and public-key encryption, signatures, message authentication codes, and hash functions.

To prove protocols, these game transformations are organized using a proof strategy based on advice. When a transformation fails, the prover suggests other transformations that should be applied first to enable the desired transformation. This strategy often allows for fully automatic proofs. For more complex cases, the prover includes an interactive mode where the user can manually specify the transformations. This mode is particularly useful for proving public-key protocols, where multiple security definitions can be applied, but only one leads to a successful proof. Importantly, our prover remains sound: regardless of the user's input, when the prover shows a security property, the property holds under the given hypotheses about the cryptographic primitives.

Our prover, CryptoVerif, has been implemented in OCaml (9700 lines of code) and is available at http://www.di.ens.fr/~blanchet/cryptoc-eng.html.

### Related Work
Several results, such as those by [21, 26, 36], have shown the soundness of the Dolev-Yao model with respect to the computational model, allowing the use of Dolev-Yao provers to prove protocols in the computational model. However, these results have limitations, particularly regarding the allowed cryptographic primitives and restrictions on protocols, such as the absence of key cycles.

Other frameworks for formalizing proofs in the computational model include the abstract cryptographic library by Backes, Pfitzmann, and Waidner [6, 8, 9], which includes symmetric and public-key encryption, message authentication codes, signatures, and nonces. They have shown its soundness with respect to computational primitives under arbitrary active attacks. Recently, this framework was used for a computationally-sound machine-checked proof of the Needham-Schroeder-Lowe protocol [44]. Canetti [19] introduced the notion of universal composability, and with Herzog [20], they demonstrated how a Dolev-Yao-style symbolic analysis can be used to prove security properties within this framework, though for a restricted class of protocols. They also used the automatic Dolev-Yao verification tool ProVerif [16] for verifying protocols in this framework.

Lincoln, Mateus, Mitchell, Ramanathan, Scedrov, and Teague [31, 32, 34, 37, 41] developed a probabilistic polynomial-time calculus for the analysis of cryptographic protocols. They defined a notion of process equivalence, derived compositionality properties, and defined an equational proof system for the calculus. Datta, Derek, Mitchell, Shmatikov, and Turuani [22] designed a computationally sound logic for proving computational security properties using a logical deduction system. These frameworks can be used to prove security properties in the computational sense, but, except for [20], they have not been mechanized.

Laud [28] designed an automatic analysis for proving secrecy for protocols using shared-key encryption with passive adversaries. He extended it [29] to active adversaries, but only for a single session. Our work extends this by handling more primitives and a polynomial number of sessions. Recently, Laud [30] designed a type system for proving security protocols in the computational model, which handles shared- and public-key encryption with an unbounded number of sessions. This system relies on the Backes-Pfitzmann-Waidner library, but type inference has not yet been implemented.

Barthe, Cerderquist, and Tarento [10, 45] have formalized the generic model and the random oracle model in the Coq interactive theorem prover, and proved signature schemes in this framework. However, proofs in general interactive theorem provers require substantial human effort. Halevi [24] suggested the utility of an automatic prover based on sequences of games but did not implement one.

### Outline
The next section presents our process calculus for representing games. Section 3 describes the game transformations used for proving protocols. Section 4 provides criteria for proving secrecy properties of protocols. Section 5 explains how the prover selects which transformation to apply at each point. Section 6 presents our experimental results, and Section 7 concludes. The companion technical report [17] contains additional formal details, proof sketches, and details on the modeling of some cryptographic primitives.

### Notations
We use the following standard notations:
- \(\{M_1/x_1, \ldots, M_m/x_m\}\) denotes the substitution that replaces \(x_j\) with \(M_j\) for each \(j \leq m\).
- The cardinality of a set or multiset \(S\) is denoted \(|S|\).
- If \(S\) is a finite set, \(x \leftarrow_R S\) chooses a random element uniformly from \(S\) and assigns it to \(x\).
- If \(A\) is a probabilistic algorithm, \(x \leftarrow A(x_1, \ldots, x_m)\) denotes the experiment of choosing random coins \(r\) and assigning to \(x\) the result of running \(A(x_1, \ldots, x_m)\) with coins \(r\).
- Otherwise, \(x \leftarrow M\) is a simple assignment statement.

## 2. A Calculus for Games

### 2.1 Syntax and Informal Semantics
The syntax of our calculus is summarized in Figure 1. We denote by \(\eta\) the security parameter, which determines, among other things, the length of keys.

This calculus assumes a countable set of channel names, denoted by \(c\). There is a mapping \(maxlen_\eta\) from channels to integers, such that \(maxlen_\eta(c)\) is the maximum length of a message sent on channel \(c\). Longer messages are truncated. For all \(c\), \(maxlen_\eta(c)\) is polynomial in \(\eta\), ensuring that all processes run in probabilistic polynomial time.

```plaintext
M, N ::= x | f(M1, ..., Mm) | i
Q ::= 0 | Q | Q' | !i≤n Q | newChannel c; Q | c[M1, ..., Ml](x1[i]:T1, ..., xk[i]:Tk); P
```

- **Terms**: \(M, N\) can be variables, function applications, or replication indices.
- **Processes**: \(Q\) can be the null process, parallel composition, replication, channel creation, or message sending and receiving.

This structure allows us to formally define and analyze the behavior of cryptographic protocols in a rigorous and automated manner.