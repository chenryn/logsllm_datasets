Memory Wars:
对记忆体攻击手法与防御技术的探讨
Authorized Morphor distributor
Leo Liaw 
数位资安系统股份有限公司
| 2
Agenda
记忆体漏洞
How Windows execute an 
executable?
What is PE?
微软防护记忆体攻击的工具
(EMET)
 EMET 版本沿革
 EMET 的限制
EMET/ASLR 以外的工具
We need to do better
Before and After
3
|
记忆体漏洞
4
|
记忆体漏洞都是来自于载入可能错误的内容到程式中。
记忆体漏洞
• Intra-chunk heap overflow 
or relative write
• Shader Parameter heap 
corruption
• ……..
• Buffer overflow (heap 或
stack)
• Type confusion 
• Use-after-free (UAF)
• Integer overflow
• stack corruptions
• Inter-chunk heap overflow or 
corruption
5
|
执行恶意程式
操控电脑
攻击网路
窥视其他网路主机
窃取资料
破坏数据
让程式或系统当机
拒绝服务
Everything bad all because of you
你可以用记忆体漏洞做甚么事
7
|
记忆体攻击范例:
CVE-2016-4117
Source: https://tirateunping.wordpress.com/2016/05/17/cve-2016-4117-fireeye-revealed-the-exploit-chain-of-recent-attacks/
记忆体攻击类型: Type confusion 
1. 受害者开启恶意的 Office 文件
1. Office 文件开始执行内嵌的 Flash 档案
1. 如果 Flash Player 版本太旧，攻击就会终止
2. 否则，攻击就会执行内嵌的 Flash Exploit
(Type Confusion/All Memory Attack 都是在这
里发生, Devils are here)
2. Exploit 执行内嵌的原生 Shellcode
1. Shellcode 会从攻击者的伺服器，下载并执行第二个
Shellcode
3. 第二个 Shellcode
1. 下载并执行 Malware
2. 下载并显示 Decoy 文件
4. Malware 连线到第二个 Command and Control (C2) 伺服
器，等待进一步的指示
| 11
长久以来，微软也体认到记忆体漏洞的严重威胁，所以陆续推出
相关防护的技术。
How Windows execute an executable?
| 14
1. .EXE is loaded from disk
 Parse PE headers
 Map sections into memory
 Parse Import Table
2. Load DLL dependencies
 Resolve import API functions
3. Transfer execution to the .EXE Entry Point
 AddressOfEntryPoint
Process Creation Overview
Figure Source: Memory Management 1 © 2000 Franz Kurfess Course 
Overview Principles of Operating Systems 
Introduction 
Computer 
System Structures 
Operating System.
| 15
Windows implements a virtual memory model
 Virtual memory is independent of physical memory
Every process had its own private virtual address space
 Process are isolated and cannot inadvertently modify each 
others memory
 Physical-to-virtual memory translations are managed in the 
Windows kernel
 Completely transparent to user process
Process Memory
| 16
Each time an executable (.EXE) is launched, Windows will
 Validate the PE image and parameters
 Create a virtual address space where the program will be loaded 
and executed
The virtual address space contains:
 All of the executable’s code and data (the .EXE itself)
 All of the DLL dependencies code and data (required .DLLs)
EXE file launching
| 17
 PE files define a preferred base memory address in the Optional 
Header:
 EXE default: 0x400000
 DLL default: 0x10000000
 DLLs can be relocated by the Windows loader
 Occurs when preferred address already in use
 Relocatable Dlls have a special .reloc section
 ASLR (Address Space Layout Randomization) ensures DLLs will be 
moved
Process Memory Layout
What is PE and Why it is so important?
| 19
Portable Executable (PE) file is the standard binary file format for Windows 
executables
 .EXE
 Executable program. The Windows OS creates a virtual address space for program to run.
 .DLL
 Dynamic Link Library. Windows concept of shard library. Also referred to as a module
 .SYS
 Kernel driver. Executes in kernel-mode alongside core OS components
PE File format - Overview
| 20
 The PE file format is a structured organization of Headers and Sections
 Header tell the OS how to interpret the PE file
 Type of the PE file (EXE/DLL/SYS)?
 What memory location does execution begin? (Entry Point)
 How should the sections be arranged in memory? (Section headers)
 What DLL dependencies does the EXE need? (Imports)
 What functionality does the PE file expose to other applications? (Exports)
 Sections store the PE file content. This includes:
 Executable code
 Program data
 Binary resources
PE File Format – Header and Sections
| 21
 The PE Optional Header is used to store NT-specific attributes. 
On NT systems the “optional” header is required.
 ImageBase
 Tells the OS its preferred base memory address
 AddressOfEntryPoint
 Tells the OS where to start executing
 Other metadata:
 Subsystem: (e.g., GUI, Console, Native, WinCE, etc.)
 DllCharacteristics: Security-related linker options (e.g., ASLR, NX, DEP, SAFESEH)
 Minimum supported NT version
PE File Format – PE Optional Header
DllCharacteristics
Figure Source: http://www.cnblogs.com/shangdawei/p/4785494.html
微软防护记忆体攻击的工具
Enhanced Mitigation Experience Toolkit, 
EMET
• 一种公用程式，整合多种防止缓冲区漏洞功能，预防软体中的弱
点被利用。
• 使用安全防护技术。这些技术可以提高入侵的障碍，必须通过才
能利用软体弱点。
• 不保证弱点不被利用。然而可让弱点更难以遭到入侵。
• DEP (Data Execution Prevention，资料防止执行)
• SEHOP (Structured Exception Handling Overwrite Protection，防止结构
异常处理覆写)
• ASLR (Address Space Layout Randomization，记忆体位置编排随机化)
Source: https://support.microsoft.com/zh-tw/kb/2909257
EMET防护
模组
Source: EMET 5.5 User’s Guide, Microsoft Download Center
Source: EMET 5.5 User’s Guide, Microsoft Download Center
Source: EMET 5.5 User’s Guide, Microsoft Download Center
Source: EMET 5.5 User’s Guide, Microsoft Download Center
Figure Source: Computer Science 10/06/051 Address Space Layout Permutation Chongkyung Kil Systems Research 
Seminar
EMET的版本沿革
| 41
Cat and Mouse
Source: https://www.youtube.com/watch?v=XZa0Yu6i_ew, Return Oriented Programming – ROP, Maryland Cyber Security Center
 Defense: Make stack/heap nonexecutable to prevent injection of 
code
 Attack response: Jump/return to libc
 Defense: Using ASLR to hide the address of desired libc code or 
return address
 Attack response: Brute force search (32-bit systems) or information leak (format string 
vulnerability)
 Defense: Avoid using libc code entirely and use code in the program 
text instead
 Attack response: Construct needed functionality using Return Oriented Programming 
(ROP)
| 42
Figure Source: http://www.slideshare.net/saumilshah/exploit-delivery/13-netsquareGSSafeSEHDEPASLRPermanent_DEPASLR_and_DEPSEH_overwritesnonSEH
| 43
 Structured Exception Handling Overwrite Protection (SEHOP): Provides 
protection against exception handler overwriting.
 Dynamic Data Execution Prevention (DEP): Enforces DEP so data 
sections such as stack or heap are not executable.
 NULL page allocation: Prevents exploitation of null dereferences.
 Heap spray allocation: Prevents heap spraying..
EMET 1.x, released in October 27, 2009
Source: https://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html
| 44
 Mandatory Address Space Layout Randomization (ASLR): Enforces 
modules base address randomization; even for legacy modules, which 
are not compiled with ASLR flag.
 Export Address Table Access Filtering (EAF): EMET uses hardware 
breakpoints stored in debugging registers (e.g. DR0) to stop any thread 
which tries to access the export table of kernel32.dll, ntdll.dll and 
kernelbase.dll, and lets the EMET thread verify whether it is a legitimate 
access.
EMET 2.x, released in September 02, 2010
Source: https://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html
| 45
 Imported mitigations from ROPGuard to protect against Return Oriented Programming (ROP).
 Load Library Checks: Prevents loading DLL files through Universal Naming Convention (UNC) paths.
 ROP Mitigation - Memory protection checks: Protects critical Windows APIs like VirtualProtect, which 
might be used to mark the stack as executable.
 ROP Mitigation - Caller check: Prevents critical Windows APIs from being called with jump or return 
instructions.
 ROP Mitigation - Stack Pivot: Detects if the stack has been pivoted.
 ROP Mitigation - Simulate Execution Flow: Detects ROP gadgets after a call to a critical Windows API, 
by manipulating and tracking the stack register.
 Bottom-up ASLR: Adds entropy of randomized 8-bits to the base address of the bottom-up allocations 
(including heaps, stacks, and other memory allocations).
EMET 3.x, released in May 25, 2012
Source: https://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html
| 46
 Deep Hooks: With this feature enabled, EMET is no longer limited to hooking what it may 
consider as critical Windows APIs, instead it hooks even the lowest level of Windows APIs, 
which are usually used by higher level Windows APIs.
 Anti-detours: Because EMET places a jump instruction at the prologue of the detoured 
(hooked) Windows API functions, attackers can craft a ROP that returns to the instruction 
that comes after the detour jump instruction. This protection tries to stop these bypasses.
 Banned functions: By default it disallows calling ntdll!LdrHotpatchRoutine to prevent 
DEP/ASLR bypassing. Additional functions can be configured as well.
 Certificate Trust (configurable certificate pinning): Provides more checking and verification 
in the certificate chain trust validation process. 
EMET 4.x, released in April 18, 2013
Source: https://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html
| 47
 Introduced Attack Surface Reduction (ASR): Allows configuring 
list of modules to be blocked from being loaded in certain 
applications.
 EAF+: Similar to EAF, it provides additional functionality in 
protecting the export table of kernel32.dll, ntdll.dll and 
kernelbase.dll. 
EMET 5.x, released in July 31, 2014
Source: https://www.fireeye.com/blog/threat-research/2016/02/using_emet_to_disabl.html
EMET的限制
EMET 的注意事项
• 某些主机型入侵预防系统 (HIPS) 应用程式可能会提供类似于
EMET 的保护。在系统上同时安装这些应用程式和 EMET 时，可
能需要进行其他设定，以便让这两种产品共存。
此外，EMET 目的是与桌面应用程式 (User Application) 搭配使
用，因此您只应保护会接收或处理不受信任资料的应用程式。系
统和网路服务不属于 EMET 的范围。虽然技术上可能可以使用