certificates are widely shared by the parties that have the above
relationship, which is necessary for business. However, the threat
can be on a large scale if some of the domain names have security
flaws as we introduced in Section 4.
5.3 Case Study
Through our measurement work, we have found thousands of vul-
nerable domain names. In this section, we give the case studies
and show that SCC attacks may occur in scenarios that are closely
related to our daily lives.
5.3.1 HTTPS downgrading attacks by switching the destination IP.
These attacks depend on the insecure 3xx redirects returned by
the certificate-sharing servers. Below, we give a brief description
of each case to show how to attack the HTTPS request of interest
without being noticed.
Online Payment Hijacking. E-commerce payment, through tra-
ditional bank accounts or online payment services (e.g., PayPal,
Alipay), brings convenience for online purchases. However, we find
that adversaries can attack the payment process using shared TLS
certificates. Here is a case of meddling with the payment process
while shopping on JD.com, a popular E-commerce website in China,
from the middle of the secure context.
Case 1: Hijacking the Process of Bank Payment. In the pay-
ment process of online shopping, the website requires buyers to
choose which bank they wish to pay through. After that, JD will
send a POST request with the payment information to a single do-
main, channel.jdpay.com, which then delivers the attributes to the
server (ibsbjstar.ccb.com.cn) of China Construct Bank (CCB). How-
ever, the HTTPS request, from the client to channel.jdpay.com, can
be downgraded if an attacker reroutes it to the IP of www.yhd.com.
It is because www.yhd.com shares a TLS certificate with *.jdpay.com,
and it returns a 302 redirect toward http://www.yhd.com?l=1&err
=53 if we reroute the request of https://channel.jdpay.com to it.
When the browser follows the insecure redirect, the attacker
can hijack the HTTP request and forge another 302 response to
the client. In this response, he sets the Location field as a payment
URL of the attacker’s order, https://ibsbjstar.ccb.com.cn/CCBIS/B
2CMainPlat_03_EPAY?. Hence,
the victim user may pay for the attacker’s bill after the browser
renders this replaced payment webpage. During this attack, the
browser shows no alerts to the users, since the “lock” icon shows
the context is secure and protected by a valid certificate.
Download Hijacking. Another hijacking scenario occurs when
we download the non-rendering resources (e.g., email attachment,
installation packages) from a website. Attackers can downgrade the
HTTPS requests and replace the resource with another one, such
as a malicious executable. This kind of attack is more concealed
since the address bar remains unchanged if the response content of
a subsequent request is not rendered on the webpage.
Case 2: Replacing the Installation Package of Xiami Music.
Xiami Music is a popular music streaming service owned by Alibaba
Group. To download an installation package for Windows version
from its homepage, an HTTPS request is sent to a URL2 under
the domain name, files.xiami.com. However, we find the server
of taobao.com shares a TLS certificate with *.xiami.com, which
is exploitable for SCC attacks. Thus, an attacker can reroute the
downloading request to the server of taobao.com, which returns
a 302 redirect to http://err.taobao.com/error1.html. After that, he
intercepts the HTTP traffic and returns a malicious executable to
the innocent user instead, without any warnings shown in the
browser. Throughout the process, the address bar always stays at
the URL, https://www.xiami.com, and shows a secure lock icon.
Website Phishing. Adversaries can also forge the whole webpage
and launch a phishing attack, to meddle with users’ actions or leak
their private data. It occurs when users click a hyperlink to open a
new webpage or access a website through the address bar.
Case 3: Phishing on Microsoft or Netease Websites. The login
page of Microsoft is hosted on https://login.live.com/login.srf?, while www.msn.com shares the TLS certificate with
*.live.com. The attacker can reroute that HTTPS request to the
server of www.msn.com, which then returns a 301 redirect to an
HTTP URL3. It is because the server of MSN does not reject the
request when the Host header is unmatched but hands it over to
the default virtual host. When the browser follows the 301 redirect,
the network attacker can hijack the plaintext traffic and replace the
page. For instance, he can forge a login webpage and trick users into
handing over sensitive information like their accounts. According
to the relation group shown in Figure 9, we find the login processes
of MSN and Bing are all SCC-vulnerable since Microsoft authorizes
all of them via login.live.com.
Similarly, the request for Netease Enterprise Mailbox, qiye.163.com,
can also be downgraded if we reroute it to www.163.com. In this
site, attackers can launch a phishing attack as well.
5.3.2 HTTPS downgrading attacks by switching the client IP. Dif-
ferent from the cases in Section 5.3.1, here we request one server
from different regions.
Case 4: Intercepting the HTTPS Traffic toward Sina Weibo.
Sina Weibo is the most famous microblogging website in China, of
which some services are hosted on the Akamai CDN. We separately
send the request, https://www.weibo.com/, to a CDN IP address,
180.149.134.141, from the client IPs located in multiple regions.
Then, we get different response headers from that server, as shown
in Table 4 in the appendix. The IP address in China receives a 200
OK, while those in Japan and the US get 302 redirects to an HTTP
URL. It is because the CDN edge server provides the trans-regional
2The full downloading URL in Xiami is https://files.xiami.com/webh5/files/xiamiWin/
068ba49b0603140cabe09fc34771cd70.xiami7.2.7.exe
3The full URL is http://www.msn.com/?redirfallthru=https%3a%2f%2fsignup.live.co
m%2f%3f
services, and it redirects the request to the specific URLs based on
the user’s location.
In this case, when Chinese users browse https://www.weibo.com/,
network attackers can force the requests to go through the con-
trolled proxy servers in Japan or the US, and finally reroute them
to 180.149.134.141. The proxy servers then forward the insecure
responses back to the users. If the client follows the 302 Redirect
and sends out the plaintext request, the attacker can intercept it an
go on for phishing attacks or injecting the advertisement.
5.3.3 HSTS Bypassing Attack. As aforementioned in Section 4.1,
clearing HSTS policy by setting max-age to zero is more dangerous
than the other two scenarios. Here, we show a case of this kind.
Case 5: Clearing the HSTS Policy for AutoNavi. AutoNavi
Software is a web mapping, navigation, and location-based services
provider, which is known as Gaode in China. When requesting
https://gaode.com, we find the server returns a response with the
HSTS max-age set to 31,536,000 seconds. However, the HSTS valid-
ity time of Gaode is updated to zero, if a network attacker reroutes
the request to another IP address, 106.11.223.100 (owned by Al-
ibaba Group). It is because the server hosted by this IP address
returns strict-transport-security:max-age=0 in its headers.
This header can clear Gaode’s HSTS cache at the client-side, since
the browser treats it as returned by gaode.com. Therefore, the next
time users access Gaode’s website by typing the domain directly
without the protocol, the browser will initiate an HTTP request
first, which is considered dangerous.
6 DISCUSSION
6.1 Root Causes
Key Reason 1: Certificate Sharing. Consider convenience and
cost, the multi-domain and the wildcard certificates are widely
used by modern servers (one certificate is valid for multiple do-
mains). Besides, sharing the same certificate is also widespread
due to CDNs, virtual hosts, associated services, and commercial
cooperation (multiple servers provide one certificate). In short, cer-
tificate sharing plays a vital role for certificate management and
grows at a scale. However, the shared TLS certificates can bring
security dependencies to different servers. The subjects in these
shared certificates are linked together like familiar strangers. The
flawed implementation on one server may expose other domains
to threats, just like the barrel effect. As an essential cause for SCC
attacks, the shared TLS certificates need more public attention and
should be well deployed.
Key Reason 2: Problematic Implementations of Security Poli-
cies among Different Parties. Due to the intricate details in the
protocols and policies of HTTPS, misconfiguration widely occurs
in today’s implementation, and HTTP header inconsistency is com-
mon among multi-servers as well. First, servers may not implement
strict Host checks [26, 31]. For example, servers may not reject the
request when the Host header is not matched, but return a 301/302
Redirect or even 200 Accept via the fallback server instead. In
our threat model, such a ServerB with shared certificates can give
attackers the chance to attack the benign ServerA. Second, some
servers have not enforced the best practice of security policies,
such as HSTS and CSP. It is the misconfigured HTTP headers and
the vulnerable response contents that are used for SCC attacks on
secure traffic. Besides, the pervasiveness of inconsistencies among
servers still affect some high profile websites [25, 48, 52]. Therefore,
developers should pay more attention to the implementation details
for security.
Key Reason 3: Absent Policies for Maintaining the Secure
Context. An SCC attack can succeed because (1) the traffic is
rerouted to a third-party server, and (2) that server has security
flaws. However, applications from upper layers do not know the
change of the peer host from transport and network layers. User
agents can only authenticate servers and check the hostnames by
TLS certificates, which are unreliable in the certificate sharing sce-
nario. As such, a policy is needed to let clients know the server’s
hostnames they are talking with and take actions to maintain the
secure context. Though HSTS can help to mitigate the HTTPS
downgrading attacks, it is hard to enforce full HSTS policy for all
sites, even Google’ servers [4]. Besides, the HSTS policy can be
bypassed as well.
6.2 Mitigation
Browsers should enhance the following policies to protect the
browsing context. First, add a notification for the insecure changes
of context. As we discussed in Section 4.3, attackers can have the
browsing context recovered to the secure one after launching the
HTTPS downgrading attacks (Figure 5). However, modern browsers
will not warn the users of the downgrading process in the middle of
the attack, and they present “secure” icons which expose the users
to a threat. As such, we recommend browsers to show security indi-
cators about the changing of the browsing context. In more detail,
the HTTPS connection that is redirected from an HTTP one should
not be shown as “secure”, though it is protected by a trusted TLS cer-
tificate. For example, the request for https://a.bank.com?orderid=b
in the third process in Figure 5 should be marked as “not absolutely
safe” or other warnings like that.
Besides, there is a trend that Google Chrome may stop HTTP
file downloads from the HTTPS webpage [3]. Based on this, we
further recommend that browsers should also block the secure
download, the context of which has been changed like “HTTPS-
>HTTP->HTTPS”. It is because the resources downloaded through
the final HTTPS request of the link can be a malicious one replaced
by the attacker.
Second, block all mixed contents. In SCC attacks, the attacker
may hijack the request for a subresource of a webpage, so that
there will be mixed contents in the browser. While mainstream
browsers block the mixed active contents [8, 12, 17, 18], the passive
contents have been considered as less disturbing since they may
not be relevant to security or privacy. However, we find the QR
codes, mostly used for the login or the payment process in China,
are presented as images that are the passive contents, and SCC
attacks can downgrade the requests for them.
Up until now, mixed passive contents (e.g., image, video) have
not been blocked by all browsers yet. Only Chrome that releases
an update to block all mixed content (active and passive), ensur-
ing that HTTPS pages can no more load any HTTP resources[10].
Considering the security, we recommend all browsers to block any
insecure requests from the HTTPS context.
6.3 Responsible Disclosure
We have submitted the issues caused by the shared TLS certificates
and a demo case to the China National Vulnerability Database of
Information Security (CNNVD). It rates the issues as the medium
risk. Meanwhile, we have been in the process of contacting all
of the affected vendors (nearly one hundred). Up until now, we
have contacted the individual vendors of which we showcase in
the paper, and received the following responses. (1) JD: We report
the issues and the payment hijacking attack to JD’s SRC, which
has confirmed the exploitation as a threat and adopted updates
to their website. (2) Alibaba: Alibaba has confirmed the attacks
that we report as well, and it is still in the process of mitigating
the issues. (3) Microsoft and Netease: They concern about the
reported issues and require the PoC of the attacks. Since we have
not finished the demo videos, we still need to communicate with
them continually. (4) Sohu: We also report the certificate sharing
issues to Sohu SRC, but it has not replied yet. Moreover, we have
been discussing the issues and mitigations with Chrome. They
confirm the threat model and reply that their new plan, applying
mixed content checks to all redirects when loading a resource, will
help to mitigate these issues. However, this update can not cover all
attack scenarios, as we mentioned in Mitigation 1. As such, we will
further contact other affected vendors to fix the issues and discuss
the mitigation methods with the browser vendors.
7 RELATED WORK
HTTPS Security and Stripping Attacks. HTTPS security has
been discussed for years. More and more researchers focus on the
adoption and deployment of HTTPS [35, 38, 45, 55]. Previous works
have introduce a range of attacks on HTTPS, such as the attacks on
the cipher weakness [1, 19]. Also, the attackers can rollback the TLS
version, conducting the downgrade attacks [7, 20]. Though policies
have been proposed to enhance HTTPS security, users have still
been exposed to potential MITM attacks, especially when there are
intermediate entities like interception software [30, 32], malicious
proxies [28, 30, 32, 62], and content delivery networks (CDNs) [47]
in the path. Regardless of protocol defects, a man in the middle
can simply strip HTTPS protection, by SSL Stripping attacks [50,
51, 53] or PBP attacks [27]. For defending such stripping attacks,
optional mechanisms including HSTS are presented. By measuring
and exploring the adoption, works show that HSTS policy is still
messed in configuration [42, 46, 54, 60] and can be bypassed [59].
Some variants of stripping attacks appear, when HSTS is partially
deployed [22, 42, 61], or in the help of malicious DNS servers [13,
33]. However, these stripping attacks are noticeable to users now,
because of browser security indicators, which show connection
security and the authenticity of the remote web server.
For further attacks without being noticed, [31] and [14] uncover
a new possibility of stripping attacks under the shared security
environment, which can confuse the origins. As a common phe-
nomenon, the multi-domain certificates are widely used in the wild
for the convenience of certificate management. Thus, we begin
to make an empirical study on the HTTPS hijacking or stripping
attacks based on shared certificates (SCC attacks) to explore the
threat of such attacks in the real-world. Compared with previous
stripping attacks, SCC attacks can apply to the established secure
connection. Moreover, attackers can bypass well-deployed policies
by a flawed third-party server under the protection of a legitimate
TLS certificate.
HTTP Misconfigurations and Inconsistencies. HTTP headers’