title:TrackerSift: untangling mixed tracking and functional web resources
author:Abdul Haddi Amjad and
Danial Saleem and
Muhammad Ali Gulzar and
Zubair Shafiq and
Fareed Zaffar
Untangling Mixed Tracking and Functional Web Resources
Muhammad Ali Gulzar
Abdul Haddi Amjad
TrackerSift:
Danial Saleem
PI:EMAIL
FAST-NUCES
Pakistan
PI:EMAIL
Virginia Tech
USA
PI:EMAIL
Virginia Tech
USA
Zubair Shafiq
PI:EMAIL
University of California, Davis
USA
Fareed Zaffar
PI:EMAIL
LUMS
Pakistan
ABSTRACT
Trackers have recently started to mix tracking and functional re-
sources to circumvent privacy-enhancing content blocking tools.
Such mixed web resources put content blockers in a bind: risk break-
ing legitimate functionality if they act and risk missing privacy-
invasive advertising and tracking if they do not. In this paper, we
propose TrackerSift to progressively classify and untangle mixed
web resources (that combine tracking and legitimate functionality)
at multiple granularities of analysis (domain, hostname, script, and
method). Using TrackerSift, we conduct a large-scale measure-
ment study of such mixed resources on 100K websites. We find that
more than 17% domains, 48% hostnames, 6% scripts, and 9% methods
observed in our crawls combine tracking and legitimate functional-
ity. While mixed web resources are prevalent across all granularities,
TrackerSift is able to attribute 98% of the script-initiated network
requests to either tracking or functional resources at the finest
method-level granularity. Our analysis shows that mixed resources
at different granularities are typically served from CDNs or as in-
lined and bundled scripts, and that blocking them indeed results in
breakage of legitimate functionality. Our results highlight opportu-
nities for finer-grained content blocking to remove mixed resources
without breaking legitimate functionality.
CCS CONCEPTS
• Security and privacy → Web application security; Browser
security; • Software and its engineering → Software defect anal-
ysis.
ACM Reference Format:
Abdul Haddi Amjad, Danial Saleem, Muhammad Ali Gulzar, Zubair Shafiq,
and Fareed Zaffar. 2021. TrackerSift: Untangling Mixed Tracking and Func-
tional Web Resources. In ACM Internet Measurement Conference (IMC ’21),
November 2–4, 2021, Virtual Event, USA. ACM, New York, NY, USA, 8 pages.
https://doi.org/10.1145/3487552.3487855
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’21, November 2–4, 2021, Virtual Event, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-9129-0/21/11...$15.00
https://doi.org/10.1145/3487552.3487855
1 INTRODUCTION
Background & Motivation. Privacy-enhancing content blocking
tools such as AdBlock Plus [2], uBlock Origin [1], and Brave [4] are
widely used to block online advertising and/or tracking [26, 37, 39].
Trackers have engaged in the arms race with content blockers
via counter-blocking [40, 42] and circumvention [17, 36]. In the
counter-blocking arms race, trackers attempt to detect users of con-
tent blocking tools and give them an ultimatum to disable content
blocking. In the circumvention arms race, trackers attempt to evade
filter lists (e.g., EasyList [6], EasyPrivacy [7]) used to block ads and
trackers, thus rendering content blocking ineffective. While both
arms races persist to date, trackers are increasingly employing cir-
cumvention because counter-blocking efforts have not successfully
persuaded users to disable content blocking tools [21, 44, 47].
Limitations of Prior Work. Trackers have been using increas-
ingly sophisticated techniques to circumvent content blocking
[17, 19, 36]. At a high level, circumvention techniques can be clas-
sified into two categories. One type of circumvention is achieved
by frequently changing the network location (e.g., domain or URL)
of advertising and tracking resources. Content blocking tools at-
tempt to address this type of circumvention by updating filter lists
promptly and more frequently [28, 29, 48, 49, 52]. The second type
of circumvention is achieved by mixing up tracking resources with
functional resources, such as serving both from the same network
endpoint (e.g., first-party or Content Delivery Network (CDN))
[17, 20, 23]. Content blocking tools have struggled against this
type of circumvention because they are in a no-win situation: they
risk breaking legitimate functionality as collateral damage if they
act and risk missing privacy-invasive advertising and tracking if
they do not. While there is anecdotal evidence, the prevalence and
modus operandi of this type of circumvention has not been studied
in prior literature.
Measurement & Analysis. This paper aims to study the preva-
lence of mixed resources, which combine tracking and functionality,
on the web. We present TrackerSift to conduct a large-scale mea-
surement study of mixed resources at different granularities starting
from network-level (e.g., domain and hostname) to code-level (e.g.,
script and method). TrackerSift’s hierarchical analysis sheds light
on how tracking and functional web resources can be progressively
untangled at increasing levels of finer granularity. It uses a localiza-
tion approach to untangle mixed resources beyond the script-level
granularity of state-of-the-art content blocking tools. We show how
569
IMC ’21, November 2–4, 2021, Virtual Event, USA
Amjad et al.
Figure 1: TrackerSift progressively classifies tracking (red) and
functional (green) resources. For mixed resources (yellow), it pro-
ceeds to a finer granularity for further classification.
to classify methods in mixed scripts, which combine tracking and
functionality, to localize the code responsible for tracking behavior.
A key challenge in adapting software fault localization approaches
to our problem is to find a rigorous suite of test cases (i.e., inputs
labeled with their expected outputs) [32]. We address this chal-
lenge by using filter lists [6, 7] to label tracking and functional
behaviors during a web page load. By pinpointing the genesis of a
tracking behavior even when it is mixed with functional behavior
(e.g., method in a bundled script), TrackerSift paves the way to-
wards finer-grained content blocking that is more resilient against
circumvention than state-of-the-art content blocking tools.
Results. Using TrackerSift, our measurements of 100K websites
show that 17% of the 69.3K observed domains are classified as mixed.
The requests belonging to mixed domains are served from a total of
26.0K hostnames. TrackerSift classifies 48% of these hostnames
as mixed. The requests belonging to mixed hostnames are served
from a total of 350.1K (initiator) scripts. TrackerSift classifies 6%
of these scripts as mixed. The requests belonging to mixed scripts
are initiated from a total of 64.0K script methods. TrackerSift
classifies 9% of these script methods as mixed. Our analysis shows
that the web resources classified as mixed by TrackerSift are typ-
ically served from CDNs or as inlined and bundled scripts, and that
blocking them indeed results in breakage of legitimate functionality.
While mixed web resources are prevalent across all granularities,
TrackerSift is able to attribute 98% of the script-initiated network
requests to either tracking or functional resources at the finest
method-level granularity.
Our key contributions include:
• a large-scale measurement and analysis of the preva-
• a hierarchical localization approach to untangle mixed
web resources.
lence of mixed web resources; and
2 TRACKERSIFT
In this section, we describe the design of TrackerSift to untangle
mixed web resources. TrackerSift conducts a hierarchical analy-
sis of web resources to progressively localize tracking resources at
increasingly finer granularities if they cannot be separated as func-
tional or tracking at a given granularity. TrackerSift needs a test
oracle capable of identifying whether a web page’s behavior (e.g.,
network requests) is tracking or functional. TrackerSift relies on
filter lists, EasyList [6] and EasyPrivacy [7], to distinguish between
570
Figure 2: TrackerSift’s web crawling and labeling
tracking and functional behavior. As also illustrated in Figure 1, we
next describe TrackerSift’s hierarchical analysis at increasingly
finer granularities of domain, hostname, script, and method.
Domain classification. As a webpage loads, multiple network
requests are typically initiated by scripts on the page to gather
content from various network locations addressed by their URLs.
We capture such script-initiated requests’ URLs and apply filter
lists to label them as tracking or functional. We then extract the
domain names from request URLs and pass the label from URLs to
domain names. For each domain, we maintain a tracking count and
functional count. All the domains that are classified as tracking or
functional are set aside at this level. The rest representing mixed
domains serving both tracking and functional requests are further
examined at a finer granularity. For instance, in Figure 1, the domain
ads.com and news.com serve solely tracking and solely functional
content, respectively. The domain google.com serves both and thus
needs analysis at a finer granularity.
Hostname classification. At the domain level, we find the re-
quests served by mixed domains and extract their hostnames. We
increment the tracking and functional count for each hostname
within mixed domains based on the corresponding request’s label.
The hostnames serving both tracking and functional requests are
further analyzed at a finer granularity, while the rest are classified
as either tracking or functional. In Figure 1, google.com was pre-
viously classified as mixed and therefore, all hostnames belonging
to google.com need to be examined. We classify ad.google.com
and maps.google.com as tracking and functional, respectively. In
contrast, cdn.google.com is mixed and thus needs analysis at a
finer granularity.
Script classification. We locate the script initiating the request
to a mixed hostname and label it as either functional or tracking,
reflecting the type of request they initiate. Like other levels, we
measure the count of tracking and functional requests launched
from each script and redistribute those into functional, tracking,
and mixed scripts, where mixed scripts will be further analyzed at a
finer granularity. In Figure 1, sdk.js, clone.js, and stack.js all
initiate requests to the mixed hostname cdn.google.com. We clas-
sify sdk.js and stack.js as tracking and functional, respectively.
Since clone.js requests both tracking and functional resources, it
needs analysis at a finer granularity.
Method classification. We analyze the corresponding requests
for each mixed script and locate the initiator JavaScript methods
of each request. We then measure the number of tracking and
functional requests initiated by each of the isolated methods. In
the final step, we classify the methods into functional, tracking,
DomainHostnameScriptMethodads.comgoogle.comnews.comad.google.comcdn.google.commaps.google.comcdn.google.com/ads-1Initiated by clone.js@m1()cdn.google.com/ads-2cdn.google.com/nonads-2Initiated by clone.js@m2()cdn.google.com/nonads-1Initiated by clone.js@m3()cdn.google.com/adsInitiated by sdk.jscdn.google.com/logo.pngInitiated by stack.jscdn.google.com/ads-1cdn.google.com/nonads-1  ...Initiated by clone.jsBrowserresourceextensionrequestWillBeSentresponseReceivedHTTP requestDatabaseCrawlingHTTP responseEvents:EasyListEasyPrivacyrequeststype: scriptScript-initiatedlabeledrequestsLabeledrequestsexample.comLabelingTrackerSift: Untangling Mixed Tracking and Functional Web Resources
IMC ’21, November 2–4, 2021, Virtual Event, USA
Table 1: Classification of requests at different granularities
Table 2: Classification of resources at different granularities
Granularity
Tracking
(Count)
Functional
(Count)
Mixed
(Count)
Domain
Hostname
Script
Method
755,784
161,604
235,157
23,819
566,810
106,542
490,295
74,223
1,129,109
860,963
135,511
37,469
Separation
Factor
(%)
54%
24%
84%
72%
Cumulative
Separation
Factor (%)
54%
65%
94%
98%
Granularity
Tracking
(Count)
Functional
(Count)
Mixed
(Count)
Domain
Hostname
Script
Method
6,493
4,429
194,156
17,940
50,938
9,248
134,726
40,500
11,861
12,383
21,168
5,579
Separation
Factor
(%)
83%
52%
94%
91%
and mixed. In Figure 1, for the mixed script clone.js, we classify
m1() as tracking and m3() as functional. Since m2() requests both
tracking and functional resources, it is classified as mixed.
3 DATA
In this section, we describe TrackerSift’s browser instrumenta-
tion that crawls websites and labels the collected data. Note that
TrackerSift’s hierarchical analysis is post hoc and offline. Thus,
it does not incur any significant overhead during page load other
than the browser instrumentation and bookkeeping for labeling.
Crawling. We used Selenium [12] with Chrome 79.0.3945.79 to
automatically crawl the landing pages of 100K websites that are
randomly sampled from the Tranco top-million list [46] in April
2021. Our crawling infrastructure, based on a campus network
in North America, comprised of a 13-node cluster with 112 cores
at 3.10GHz, 52TB storage, and 832GB memory. Each node uses a
Docker container to crawl a subset of 100K webpages. The average
page load time (until onLoad event is fired) for a web page was
about 10 seconds. Our crawler waits an additional 10 seconds before
moving on to the next website. Note that the crawling is stateless,
i.e., we clear all cookies and other local browser states between
consecutive crawls.
As shown in Figure 2, our crawler was implemented as a purpose-
built Chrome extension that used DevTools [8] API to collect the
data during crawling. Specifically, it relies on two network events:
requestWillBeSent and responseReceived for capturing rele-
vant information for script-initiated network requests during the
page load. The former event provides detailed information for
each HTTP request such as a unique identifier for the request
(request_id), the web page’s URL (top_level_url), the URL of
the document this request is loaded for (frame_url), requested
resource type (resource_type), request header, request timestamp,
and a call_stack object containing the initiator information and
the stack trace for script-initiated HTTP requests. The latter event
provides detailed information for each HTTP response, such as
response headers and response body containing the payload.