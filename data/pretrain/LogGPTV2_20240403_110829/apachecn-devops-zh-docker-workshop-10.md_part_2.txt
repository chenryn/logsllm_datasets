    这些前面的命令为 Linux 或 Mac 下载二进制文件，并准备在终端中使用:
    ![Figure 10.8: Installation of minikube ](img/B15021_10_08.jpg)
    图 10.8:minikube 的安装
2.  In your terminal, run the following command to configure `kubectl` to connect to the `minikube` cluster and use it for further access:
    ```
    kubectl config use-context minikube
    ```
    `use-context`命令将`kubectl`上下文配置为使用`minikube`集群。对于以下步骤，所有命令都将与`minikube`内运行的 Kubernetes 集群进行通信:
    ```
    Switched to context "minikube".
    ```
3.  Check for the cluster and client version with the following command:
    ```
    kubectl version --short
    ```
    此命令返回人类可读的客户端和服务器版本信息:
    ```
    Client Version: v1.17.2
    Server Version: v1.17.0
    ```
4.  Check for further information about the cluster with the following command:
    ```
    kubectl cluster-info
    ```
    此命令显示 Kubernetes 组件的摘要，包括主组件和 DNS:
    ```
    Kubernetes master is running at https://192.168.64.5:8443
    KubeDNS is running at https://192.168.64.5:8445/api/v1/
    namespaces/kube-system/Services/kube-dns:dns/proxy
    To further debug and diagnose cluster problems, use 
    'kubectl cluster-info dump'.
    ```
5.  Get a list of the nodes in the cluster with the following command:
    ```
    kubectl get nodes
    ```
    由于集群是一个`minikube`本地集群，因此只有一个名为`minikube`的节点，其角色为`master`:
    ```
    NAME        STATUS        ROLES        AGE        VERSION
    Minikube    Ready         master       41h        v1.17.0
    ```
6.  List the supported resources in the Kubernetes API with the following command:
    ```
    kubectl api-resources --output="name"
    ```
    该命令列出了 Kubernetes 斯应用编程接口服务器支持的`api-resources`的`name`字段。长长的列表显示了 Kubernetes 如何创建不同的抽象来运行容器化的应用:
    ![Figure 10.9: Kubernetes resource listing ](img/B15021_10_09.jpg)
图 10.9: Kubernetes 资源列表
输出列出了我们连接的 Kubernetes 集群中可用的 API 资源。如您所见，您可以使用数十种资源，每种资源都有助于您创建云原生、可扩展和可靠的应用。
在本练习中，您已经连接到 Kubernetes 集群并检查了客户端工具的功能。`kubectl`是访问和管理在 Kubernetes 中运行的应用的最关键的工具。在本练习结束时，您将学会如何安装、配置和连接到 Kubernetes 集群。此外，您将检查它的版本、它的节点的状态以及可用的 API 资源。对于与 Kubernetes 交互的开发者来说，有效地使用`kubectl`是日常生活中必不可少的任务。
在下一节中，将介绍主要的 Kubernetes 资源(在前面练习的最后一步中可以看到)。
# 不灭资源
Kubernetes 提供了一组丰富的容器抽象来定义云原生应用。所有这些抽象都被设计为 Kubernetes API 中的资源，并由控制平面管理。换句话说，应用被定义为控制平面中的一组资源。同时，节点组件试图达到资源中指定的状态。如果将一个 Kubernetes 资源分配给一个节点，节点组件将专注于附加所需的卷和网络接口，以保持应用正常运行。
让我们假设您将在 Kubernetes 上部署 InstantPizza 预订系统的后端。后端由一个数据库和一个用于处理 REST 操作的网络服务器组成。您需要在 Kubernetes 中定义一些资源:
*   数据库的**状态集**资源
*   一个**服务**资源，用于从其他组件(如网络服务器)连接到数据库
*   一个**部署**资源，以可扩展的方式部署网络服务器
*   一个**服务**资源，用于启用到网络服务器的外部连接
当这些资源通过`kubectl`在控制平面中定义时，节点组件将在集群中创建所需的容器、网络和存储。
在 Kubernetes API 中，每个资源都有独特的特性和模式。在本节中，您将了解基本的 Kubernetes 资源，包括 **Pods** 、**部署**、**状态集**和**服务**。此外，您还将了解到更复杂的 Kubernetes 资源，如 Kubernetes 中的**Ingres**、**水平荚自动缩放**、 **RBAC** 、**授权**。
## 豆荚
Pod 是 Kubernetes 中容器化应用的基本构件。它由一个或多个可以共享网络、存储和内存的容器组成。Kubernetes 将 Pod 中的所有容器调度到同一个节点。此外，Pod 中的容器会一起放大或缩小。容器、Pods 和节点之间的关系可以概括如下:
![Figure 10.10: Containers, Pods, and nodes ](img/B15021_10_10.jpg)
图 10.10:容器、荚和节点
从上图可以看出，一个 Pod 可以包含多个容器。所有这些容器共享一个公共的网络、存储和内存资源。
Pod 的定义很简单，有四个主要部分:
```
apiVersion: v1
kind: Pod
metadata:
  name: server
spec:
  containers:
  - name: main
    image: nginx
```
所有 Kubernetes 资源都需要这四个部分:
*   `apiVersion`定义对象的这个资源的版本化模式。
*   `kind`代表 REST 资源名称。
*   `metadata`保存资源的信息，如名称、标签和注释。
*   `spec`是保存资源特定信息的资源特定部分。
当前面的服务器 Pod 在 Kubernetes API 中创建时，API 将首先根据`apiVersion=v1`和`kind=Pod`模式检查定义是否正确。然后，调度程序会将 Pod 分配给一个节点。接下来，节点中的`kubelet`将为`main`容器创建`nginx`容器。
Pods 是 Kubernetes 对容器的第一次抽象，它们是更复杂资源的构建块。在下一节中，我们将使用部署和状态集等资源来封装 Pods，以创建更复杂的应用。
## 部署
部署是一个 Kubernetes 资源，它关注可伸缩性和高可用性。部署封装了 Pods，以扩展、缩减和推出新版本。换句话说，您可以将一个三副本 web 服务器 Pod 定义为一个部署。控制平面中的部署控制器将保证副本的数量。此外，当您将部署更新到较新版本时，控制器将逐渐更新应用实例。
部署和 Pods 的定义相似，尽管标签和副本被添加到部署模式中:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
spec:
  replicas: 10
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      containers:
      - name: main
        image: nginx
        ports:
        - containerPort: 80 
```
部署`server`有 10 个带有标签`app:server`的 Pod 规范副本。此外，为服务器实例的每个主容器发布容器的端口`80`。部署控制器将创建或删除实例，以匹配已定义 Pod 的 10 个副本。换句话说，如果具有两个服务器部署运行实例的节点离线，控制器将在其余节点上创建两个额外的 Pods。Kubernetes 的这种自动化使我们能够开箱即用地创建可扩展的高可用性应用。
在下一节中，将介绍用于有状态应用的 Kubernetes 资源，例如数据库和消息队列。
## 状态集
Kubernetes 支持运行有状态应用，这些应用使用**statefleset**资源将其状态存储在磁盘卷上。StatefulSets 使在 Kubernetes 中运行数据库应用或数据分析工具成为可能，具有与临时应用相同的可靠性和高可用性。
状态集合的定义类似于**部署**的定义，其中**卷挂载**和**声明增加**:
```
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "root"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        subPath: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 2Gi
```
数据库资源定义了一个磁盘卷为 2 GB 的数据库。当在 Kubernetes API 中创建服务器`StatefulSet`资源时，`cloud-controller-manager`将创建一个卷，并使其在计划节点上准备就绪。创建卷时，它使用`volumeClaimTemplates`下的规范。然后，节点将根据`spec`中的`volumeMounts`部分将卷装入容器中。
在这个资源定义中，还有一个为`MYSQL_ROOT_PASSWORD`设置环境变量的例子。状态集是 Kubernetes 中至关重要的资源，因为它们支持在具有短暂工作负载的同一个集群中运行有状态应用。
在下面的资源中，将介绍用于 Pods 之间连接的 Kubernetes 解决方案。
## 服务
Kubernetes 集群托管多个运行在不同节点上的应用，大多数情况下，这些应用需要相互通信。假设您有一个后端的三实例部署和一个前端应用的两实例部署。五个吊舱运行，分布在集群中，它们的 IP 地址。由于前端实例需要连接后端，因此前端实例需要知道后端实例的 IP 地址，如图*图 10.11* :
![Figure 10.11: Frontend and backend instances ](img/B15021_10_11.jpg)
图 10.11:前端和后端实例
但是，这不是一个可持续的方法，会扩大或缩小规模，并且集群中可能会出现许多潜在故障。Kubernetes 建议**服务**资源定义一组带有标签的 Pods，并使用服务的名称访问它们。例如，前端应用只需使用`backend-service`的地址就可以连接到后端实例，如图 10.12 所示:
![Figure 10.12: Frontend and backend instances connected via backend-service ](img/B15021_10_12.jpg)
图 10.12:通过后端服务连接的前端和后端实例
服务资源的定义相当简单，如下所示:
```
apiVersion: v1