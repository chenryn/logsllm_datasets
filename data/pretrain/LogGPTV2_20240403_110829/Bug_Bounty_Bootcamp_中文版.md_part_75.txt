一个有趣的设置是将允许来源设置为通配符（\*）。这不可利用，因为CORS不允许凭据（包括Cookie，身份验证标头或客户端证书）与请求一起发送到这些页面。由于不能在请求中发送凭证到这些页面，因此不能访问私人信息。
    Access-Control-Allow-Origin: *
Developers can prevent CORS misconfigurations by creating a well-defined
CORS policy with a strict allowlist and robust URL validation. For pages
containing sensitive information, the server should return the
requesting page's origin in the `      Access-Control-Allow-Origin     `
header only if that origin is in the allowlist. For public information,
the server can simply use the wildcard `      *     ` designation for
`      Access-Control-Allow-Origin     ` .
开发者可以通过创建一个明确定义的 CORS 策略并进行严格的白名单和 URL
验证来防止 CORS
配置不当。对于包含敏感信息的页面，只有该域名在白名单中时，服务器才会在
Access-Control-Allow-Origin
头中返回请求页面的源。对于公开信息，服务器可以使用通配符 \* 来指定
Access-Control-Allow-Origin。
### Exploiting postMessage() {#c19.xhtml#h2-501546c19-0002}
Some sites work around SOP by using `      postMessage()     ` . This
method is a web API that uses JavaScript syntax. You can use it to send
text-based messages to another window:
一些网站用postMessage()规避SOP，这种方法是一种使用JavaScript语法的Web
API。您可以使用它向另一个窗口发送基于文本的消息：
    RECIPIENT_WINDOW.postMessage(MESSAGE_TO_SEND, TARGET_ORIGIN);
The receiving window would then handle the message by using an event
handler that will be triggered when the receiving window receives a
message:
接收窗口将通过使用事件处理程序来处理消息，该事件处理程序将在接收窗口接收到消息时触发。
    window.addEventListener("message",EVENT_HANDLER_FUNCTION);
Since using `      postMessage()     ` requires the sender to obtain a
reference to the receiver's window, messages can be sent only between a
window and its iframes or pop-ups. That's because only windows that open
each other will have a way to reference each other. For example, a
window can use `      window.open     ` to refer to a new window it
opened. Alternatively, it can use `      window.opener     ` to
reference the [ ]{#c19.xhtml#Page_299 .pagebreak title="299"} window
that spawned the current window. It can use `      window.frames     `
to reference embedded iframes, and `      window.parent     ` to
reference the parent window of the current iframe.
由于使用postMessage（）需要发送者获取对接收者窗口的引用，因此消息只能在窗口和它的iframe或弹出窗口之间发送。这是因为只有相互打开的窗口才有互相引用的方法。例如，窗口可以使用window.open引用它打开的新窗口。或者，它可以使用window.opener引用生成当前窗口的窗口。它可以使用window.frames引用嵌入的iframes，并使用window.parent引用当前iframe的父窗口。
For example, say we're trying to pass the following JSON blob located at
*a.example.com/user_info* to *b.example.com* :
例如，假设我们正在尝试将位于a.example.com/user_info的以下JSON块传递到b.example.com:
    {'username': 'vickieli', 'account_number': '12345'}
*a.example.com* can open *b.example.com* and send a message to its
window. The `      window.open()     ` function opens the window of a
particular URL and returns a reference to it:
a.example.com可以打开b.example.com并向其窗口发送信息。
window.open（）函数打开特定URL的窗口并返回对其的引用：
    var recipient_window = window.open("https://b.example.com", b_domain)
    recipient_window.postMessage("{'username': 'vickieli', 'account_number': '12345'}", "*");
At the same time, *b.example.com* would set up an event listener to
process the data it receives:
同时，b.example.com将设置一个事件监听器来处理它接收到的数据。
    function parse_data(event) {
      // Parse the data
    }
    window.addEventListener("message", parse_data);
As you can see, `      postMessage()     ` does not bypass SOP directly
but provides a way for pages of different origins to send data to each
other.
你可以看到，postMessage（）并不直接绕过同源策略，但为不同源的页面提供了一种相互发送数据的方式。
The `      postMessage()     ` method can be a reliable way to implement
cross-origin communication. However, when using it, both the sender and
the receiver of the message should verify the origin of the other side.
Vulnerabilities happen when pages enforce weak origin checks or lack
origin checks altogether.
"postMessage（）方法可以是实现跨源通信的可靠方式。但是，使用它时发送者和接收者都应验证对方的来源。弱的来源检查或完全缺少来源检查的页面会产生漏洞。"
First, the `      postMessage()     ` method allows the sender to
specify the receiver's origin as a parameter. If the sender page doesn't
specify a target origin and uses a wildcard target origin instead, it
becomes possible to leak information to other sites:
首先，postMessage()
方法允许发送者将接收者的来源作为参数指定。如果发送者页面没有指定目标来源，而是使用通配符目标来源，那么就可能向其他网站泄露信息。
    RECIPIENT_WINDOW.postMessage(MESSAGE_TO_SEND, *);
In this case, an attacker can create a malicious HTML page that listens
for events coming from the sender page. They can then trick users into
triggering the `      postMessage()     ` by using a malicious link or
fake image and make the victim page send data to the attacker's page.
在这种情况下，攻击者可以创建一个恶意的 HTML
页面，监听来自发送者页面的事件。然后，他们可以通过使用恶意链接或假图像欺骗用户触发
postMessage()，并让受害页面将数据发送到攻击者的页面。
To prevent this issue, developers should always set the
`      TARGET_ORIGIN     ` parameter to the target site's URL instead of
using a wildcard origin:
为了防止这个问题，开发者应该始终将 \"TARGET_ORIGIN\"
参数设置为目标站点的 URL，而不是使用通配符。
    recipient_window.postMessage(
    "{'username': 'vickieli', 'account_number': '12345'}", "https://b.example.com");
On the other hand, if the message receiver doesn't validate the page
where the `      postMessage()     ` is coming from, it becomes possible
for attackers to [ ]{#c19.xhtml#Page_300 .pagebreak title="300"} send
arbitrary data to the website and trigger unwanted actions on the
victim's behalf. For example, let's say that *b.example.com* allows
*a.example.com* to trigger a password change based on a
`      postMessage()     ` , like this:
另外，如果信息接收方不验证postMessage（）来源的页面，则攻击者可以向网站发送任意数据，并以受害者的名义触发不必要的操作。例如，假设b.example.com允许a.example.com根据postMessage（）触发密码更改，如下所示：
    recipient_window.postMessage(
    "{'action': 'password_change', 'username': 'vickieli', 'new_password': 'password'}", 
    "https://b.example.com");
The page *b.example.com* would then receive the message and process the
request:
页面b.example.com将接收并处理请求：
    function parse_data(event) {
      // If "action" is "password_change", change the user's password
    }
    window.addEventListener("message", parse_data);
Notice here that any window can send messages to *b.example.com* , so
any page can initiate a password change on *b.example.com* ! To exploit
this behavior, the attacker can embed or open the victim page to obtain
its window reference. Then they're free to send arbitrary messages to
that window.
请注意，任何窗口都可以向b.example.com发送消息，因此任何页面都可以在b.example.com上发起密码更改！攻击者可以利用这种行为嵌入或打开受害者页面以获取其窗口引用。然后，他们可以自由地向该窗口发送任意消息，从而利用此漏洞。
To prevent this issue, pages should verify the origin of the sender of a
message before processing it:
为了避免这个问题，页面在处理邮件前应该验证发件人的来源。
    function parse_data(event) {
    1 if (event.origin == "https://a.example.com"){
        // If "action" is "password_change", change the user's password
      }
    }
    window.addEventListener("message", parse_data);
This line [ 1 ]{.CodeAnnotation aria-label="annotation1"} verifies the
origin of the sender by checking it against an acceptable origin.
这一行通过将其与可接受的来源进行比较来验证发送者的来源。
### Exploiting JSON with Padding {#c19.xhtml#h2-501546c19-0003}
*JSON with Padding (* *JSONP)* is another technique that works around
the SOP. It allows the sender to send JSON data as JavaScript code. A
page of a different origin can read the JSON data by processing the
JavaScript.
JSONP是另一种可以绕过同源策略的技术。它允许发送器将JSON数据作为JavaScript代码发送。不同源的页面可以通过处理JavaScript来读取JSON数据。
To see how this works, let's continue with our previous example, where
we're trying to pass the following JSON blob located at
*a.example.com/user_info* to *b.example.com* :
为了了解它的工作原理，让我们继续使用我们之前的示例，我们试图将位于a.example.com/user_info的以下JSON块传递给b.example.com:
    {"username": "vickieli", "account_number": "12345"}
The SOP allows the HTML `           ` tag to load scripts across
origins, so an easy way for *b.example.com* to retrieve data across
origins is to load the data as a script in a `           ` tag:
SOP允许HTML
\标签跨域加载脚本，因此b.example.com跨域检索数据的简单方法是将数据作为\标签中的脚本加载：
[ ]{#c19.xhtml#Page_301 .pagebreak title="301"} This way,
*b.example.com* would essentially be including the JSON data block in a
script tag. But this would cause a syntax error because JSON data is not
valid JavaScript:
这样，b.example.com 实际上会在一个脚本标签中包含 JSON
数据块。但这会导致语法错误，因为 JSON 数据不是合法的 JavaScript 语法。
JSONP works around this issue by wrapping the data in a JavaScript
function, and sending the data as JavaScript code instead of a JSON
file.
JSONP通过将数据包装在一个JavaScript函数中，将数据作为JavaScript代码而不是JSON文件发送，从而解决了这个问题。
The requesting page includes the resource as a script and specifies a
callback function, typically in a URL parameter named
`      callback     ` or `      jsonp     ` . This callback function is
a predefined function on the receiving page ready to process the data:
请求页面包含资源作为一个脚本，并指定一个回调函数，通常在名为callback或jsonp的URL参数中。这个回调函数是接收页面上预定义的函数，可以处理数据：
The page at *a.example.com* will return the data wrapped in the
specified callback function:
页面a.example.com将返回指定回调函数包装的数据：
    parseinfo({"username": "vickieli", "account_number": "12345"})
The receiving page would essentially be including this script, which is
valid JavaScript code:
接收页面基本上将包含此脚本，这是有效的JavaScript代码：
The receiving page can then extract the data by running the JavaScript
code and processing the `      parseinfo()     ` function. By sending
data as scripts instead of JSON data, JSONP allows resources to be read
across origins. Here's a summary of what happens during a JSONP
workflow:
接收页面可以通过运行JavaScript代码并处理parseinfo()函数来提取数据。通过将数据作为脚本而不是JSON数据发送，JSONP允许跨来源读取资源。以下是JSONP工作流程的摘要：
1.  The data requestor includes the data's URL in a script tag, along
    with the name of a callback function.
2.  The data provider returns the JSON data wrapped within the specified
    callback function.
3.  The data requestor receives the function and processes the data by
    running the returned JavaScript code.
You can usually find out if a site uses JSONP by looking for script tags
that include URLs with the terms *jsonp* or *callback* .
你可以通过查找包含jsonp或callback术语的URL的脚本标签来通常找到一个网站是否使用JSONP。
But JSONP comes with risks. When JSONP is enabled on an endpoint, an
attacker can simply embed the same script tag on their site and request
the data wrapped in the JSONP payload, like this:
但JSONP存在风险。当启用JSONP时，攻击者可以在其网站上嵌入相同的脚本标签，并使用JSONP有效负载封装请求的数据，像这样：