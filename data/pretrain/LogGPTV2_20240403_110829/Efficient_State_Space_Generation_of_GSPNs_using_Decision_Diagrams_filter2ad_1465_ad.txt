85
176
266
23
80
106
132
15
33
64
124
12
44
96
167
Peak
133
262
539
815
40
144
191
238
33
74
144
282
31
111
240
418
Memory
Peak (Kb)
2,382
16,603
91,972
228,561
511
35,594
99,346
224,295
228
2,194
14,311
102,070
390
8,795
56,180
214,350
Table 1. Time and space requirements to construct the tangible reachability set T
jobs and servers in the system. Our model uses N queues,
jobs, and servers; thus, both the model size and initial num-
bers of tokens increase with N . For the Kanban, FMS, and
Polling models, we use the ﬁnest possible decomposition:
one place per subnet.
Table 1 compares the costs, in terms of computational
and storage requirements, of constructing the tangible
reachability set T for elimination during generation ver-
sus elimination after generation. When vanishing states are
eliminated during generation, we construct the next-state
using Equation 3 and then generate T directly.
function N (cid:7)
Conversely, eliminating vanishing states after generation re-
quires construction of the next-state function N , generation
of the reachable states S, and determination of T using a
query on S. For both techniques, we show the costs of con-
structing the appropriate next-state function, and the costs
of constructing the set T . Since MDDs and matrix dia-
grams may expand and contract during manipulation, both
the peak and ﬁnal memory usage is reported. For next-state
function construction, the memory usage reported is the to-
tal memory required for the matrix diagram. For the gener-
ation of T , the memory usage reported is the total memory
required for MDD nodes. Since the resulting MDD encod-
ing T is the same for both techniques, we do not report the
ﬁnal memory usage for T .
is
more expensive than constructing N , since the construction
requires the construction of N and then application
of N (cid:7)
of Equation 3. However, we see that, as the model size
As we expect, constructing the next-state function N (cid:7)
increases, the space and time requirements to compute N (cid:7)
grow much faster than those to compute N . This rapid in-
crease is due to the transitive closure computation in Equa-
tion 3. Iterative squaring is not the best way to compute
transitive closure; we are currently investigating more efﬁ-
cient implicit techniques [24]. The dashes in the table cor-
respond to cases in which the storage requirements to con-
struct N (cid:7)
exceeded available memory.
While our intuition may suggest that elimination dur-
ing generation will require less memory than elimination
after generation, this is not always the case. This is due
to the property of MDDs that the computational and stor-
age complexities for manipulation depend on the number
of nodes in the MDD, not the number of states encoded by
the MDD. Removal of states from an MDD may actually
increase its storage requirements! For example, compu-
tational and storage requirements for reachability set gen-
eration for the dining philosophers model are signiﬁcantly
lower when all transitions are timed [15]. As both the com-
putational and storage complexities depend on the number
of nodes in the MDD, there is a correlation between the
peak memory and CPU time for generation of T . That is,
for all reported results, whichever technique requires less
storage space to generate T also requires less time. How-
ever, there is no clear trend as to when the generation of
T is more efﬁcient if elimination during generation is used
versus elimination after generation. When a comparison is
possible, we see that elimination during generation is more
efﬁcient for the FMS and Polling models, and elimination
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
after generation is more efﬁcient for the Kanban model. For
the dining philosophers model, elimination during genera-
tion is more efﬁcient for small models, while elimination af-
ter generation is more efﬁcient for large models. All things
considered, the cost of constructing N (cid:7)
tends to make elim-
ination during generation more expensive and less practical.
Table 1 also illustrates the power of implicit techniques.
The ﬁrst row for each model in the table corresponds to the
largest tangible reachability set that could be generated us-
ing explicit techniques. Clearly, implicit techniques allow
for the study of much larger systems than would otherwise
be possible with explicit techniques.
7. Conclusion
Implicit techniques for reachability set generation are
quite promising, as they are often able to handle extremely
large sets, but are usually limited to handling restricted
classes of models. We addressed one such limitation of cur-
rent implicit reachability set generation techniques:
their
inability to handle events with priorities and immediate
events. We presented an alternate representation of the next-
state function of a model, based on matrix diagrams. Ma-
nipulations of the matrix diagrams allow for construction of
next-state functions that can handle models with event pri-
orities and immediate events. We showed how vanishing
states can be eliminated either during generation or after
generation, when only the tangible states are of interest.
While the costs of state generation can be lower when
vanishing states are eliminated during generation, the ap-
proach is often impractical due to the extra computation re-
quired to construct the adjusted next-state function. This
is mainly due to the cost of computing the transitive and
reﬂexive closure of the vanishing-to-vanishing next-state
function. One possible direction for further research is the
development of improved techniques that reduce this cost.
References
[1] M. Ajmone Marsan, G. Balbo, G. Chiola, and
G. Conte. Generalized stochastic Petri nets revisited:
random switches and priorities. In 2nd Int. Workshop
on Petri Nets and Performance Models (PNPM’87),
pages 44–53, Madison, Wisconsin, Aug. 1987. IEEE
Comp. Soc. Press.
[2] M. Ajmone Marsan, S. Donatelli, F. Neri, and
A. Scalia. Approximate GSPN analysis of multiserver
polling systems. In Proceedings of the International
Conference on Telecommunication, Distribution and
Parallelism (TDP’96), La Londe Les Maures, France,
June 1996.
[3] G. Balbo, G. Chiola, G. Franceschinis, and G. Moli-
nari Roet. On the efﬁcient construction of the tangible
reachability graph of generalized stochastic Petri nets.
In 2nd Int. Workshop on Petri Nets and Performance
Models (PNPM’87), pages 136–145, Madison, Wis-
consin, Aug. 1987. IEEE Comp. Soc. Press.
[4] A. Blakemore. The cost of eliminating vanishing
markings from generalized stochastic Petri nets. In 3rd
Int. Workshop on Petri Nets and Performance Models
(PNPM’89), pages 85–92, Kyoto, Japan, Dec. 1989.
IEEE Comp. Soc. Press.
[5] R. E. Bryant. Graph-based algorithms for boolean
IEEE Trans. Comp., C-
function manipulation.
35(8):677–691, Aug. 1986.
[6] P. Buchholz. Hierarchical structuring of superposed
GSPNs. In 7th Int. Workshop on Petri Nets and Perfor-
mance Models (PNPM’97), pages 81–90, Saint Malo,
France, June 1997. IEEE Comp. Soc. Press.
[7] P. Buchholz, G. Ciardo, S. Donatelli, and P. Kem-
per. Complexity of memory-efﬁcient Kronecker op-
erations with applications to the solution of Markov
models. INFORMS J. Comp., 12(3):203–222, SUM-
MER 2000.
[8] J. Burch, E. Clarke, D. Long, K. McMillan, and
D. Dill. Symbolic model checking for sequential cir-
cuit veriﬁcation.
IEEE Trans. Computer-Aided De-
sign of Integrated Circuits and Systems, 13(4):401–
424, Apr. 1994.
[9] J. R. Burch, E. M. Clarke, K. L. McMillan, D. L.
Dill, and L. J. Hwang. Symbolic model checking:
1020 states and beyond.
Information and Computa-
tion, 98(2):142–170, June 1992.
[10] G. Chiola. Compiling techniques for the analysis of
stochastic Petri nets. Perf. Eval., Sept. 1988.
[11] G. Chiola, M. Ajmone Marsan, G. Balbo, and
G. Conte. Generalized stochastic Petri nets: a deﬁni-
tion at the net level and its implications. IEEE Trans.
Softw. Eng., 19(2):89–107, Feb. 1993.
[12] G. Ciardo. Analysis of large stochastic Petri net mod-
els. PhD thesis, Duke University, Durham, NC, 1989.
[13] G. Ciardo. Discrete-time Markovian stochastic Petri
nets.
In W. J. Stewart, editor, Computations with
Markov Chains, pages 339–358. Kluwer, Boston, MA,
1995.
[14] G. Ciardo, G. Luettgen, and R. Siminiceanu. Efﬁcient
symbolic state-space construction for asynchronous
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply. 
systems. In M. Nielsen and D. Simpson, editors, Ap-
plication and Theory of Petri Nets 2000 (Proc. 21st
Int. Conf. on Applications and Theory of Petri Nets),
LNCS 1825, pages 103–122, Aarhus, Denmark, June
2000. Springer-Verlag.
[15] G. Ciardo, G. Luettgen, and R. Siminiceanu. Satura-
tion: an efﬁcient iteration strategy for symbolic state
space generation. In T. Margaria and W. Yi, editors,
Proc. Tools and Algorithms for the Construction and
Analysis of Systems (TACAS), LNCS 2031, pages 328–
342, Genova, Italy, Apr. 2001. Springer-Verlag.
[16] G. Ciardo and A. S. Miner. SMART: Simulation
and Markovian Analyzer for Reliability and Tim-
ing.
In Proc. IEEE International Computer Per-
formance and Dependability Symposium (IPDS’96),
page 60, Urbana-Champaign, IL, USA, Sept. 1996.
IEEE Comp. Soc. Press.
[17] G. Ciardo and A. S. Miner. Storage alternatives for
large structured state spaces. In R. Marie, B. Plateau,
M. Calzarossa, and G. Rubino, editors, Proc. 9th Int.
Conf. on Modelling Techniques and Tools for Com-
puter Performance Evaluation, LNCS 1245, pages
44–57, Saint Malo, France, June 1997. Springer-
Verlag.
[18] G. Ciardo and A. S. Miner. A data structure for the ef-
ﬁcient Kronecker solution of GSPNs. In P. Buchholz,
editor, 8th Int. Workshop on Petri Nets and Perfor-
mance Models (PNPM’99), pages 22–31, Zaragoza,
Spain, Sept. 1999. IEEE Comp. Soc. Press.
[19] G. Ciardo and A. S. Miner. Structural approaches
In High Performance Comput-
for SPN analysis.
ing 2000, Grand Challenges in Computer Simulation,
pages 345–356, Washington, DC, Apr. 2000.
[20] G. Ciardo and K. S. Trivedi. A decomposition ap-
proach for stochastic reward net models. Perf. Eval.,
18(1):37–59, 1993.
[21] T. Kam, T. Villa, R. Brayton, and A. Sangiovanni-
Vincentelli. Multi-valued decision diagrams: theory
and applications. Multiple-Valued Logic, 4(1–2):9–62,
1998.
[22] P. Kemper. Numerical analysis of superposed GSPNs.
IEEE Trans. Softw. Eng., 22(9):615–628, Sept. 1996.
[23] P. Kemper. Reachability analysis based on structured
representations. In J. Billington and W. Reisig, edi-
tors, Application and Theory of Petri Nets 1996 (Proc.
17th Int. Conf. on Applications and Theory of Petri
Nets), LNCS 1091, pages 269–288, Osaka, Japan,
June 1996. Springer-Verlag.
[24] Y. Matsunaga, P. C. McGeer, and R. K. Brayton. On
computing the transitive closure of a state transition
relation. In Proc. 30th International Design Automa-
tion Conference, pages 260–265. ACM Press, 1993.
[25] A. S. Miner. Data Structures for the Analysis of Large
Structured Markov Models. PhD thesis, The College
of William and Mary, Williamsburg, VA, 2000.
[26] A. S. Miner. Efﬁcient solution of GSPNs using Canon-
ical Matrix Diagrams. In R. German and B. Haverkort,
editors, 9th Int. Workshop on Petri Nets and Perfor-
mance Models (PNPM’01), pages 101–110, Aachen,
Germany, Sept. 2001. IEEE Comp. Soc. Press.
[27] A. S. Miner and G. Ciardo. Efﬁcient reachability set
generation and storage using decision diagrams.
In
H. Kleijn and S. Donatelli, editors, Application and
Theory of Petri Nets 1999 (Proc. 20th Int. Conf. on
Applications and Theory of Petri Nets), LNCS 1639,
pages 6–25, Williamsburg, VA, USA, June 1999.
Springer-Verlag.
[28] A. S. Miner, G. Ciardo, and S. Donatelli. Using the
exact state space of a Markov model to compute ap-
proximate stationary measures.
In Proc. 2000 ACM
SIGMETRICS Conf. on Measurement and Modeling of
Computer Systems, pages 207–216, Santa Clara, CA,
June 2000.
[29] E. Pastor, J. Cortadella, and M. A. Pe˜na. Structural
methods to improve the symbolic analysis of Petri
nets.
In H. Kleijn and S. Donatelli, editors, Ap-
plication and Theory of Petri Nets 1999 (Proc. 20th
Int. Conf. on Applications and Theory of Petri Nets),
LNCS 1639, pages 26–45, Williamsburg, VA, USA,
June 1999. Springer-Verlag.
[30] E. Pastor, O. Roig, J. Cortadella, and R. Badia. Petri
net analysis using boolean manipulation. In R. Valette,
editor, Application and Theory of Petri Nets 1994
(Proc. 15th Int. Conf. on Applications and Theory of
Petri Nets), LNCS 815, pages 416–435, Zaragoza,
Spain, June 1994. Springer-Verlag.
[31] B. Plateau. On the stochastic structure of paral-
lelism and synchronisation models for distributed al-
gorithms.
In Proc. 1985 ACM SIGMETRICS Conf.
on Measurement and Modeling of Computer Systems,
pages 147–153, Austin, TX, USA, May 1985.
[32] A. Srinivasan, T. Kam, S. Malik, and R. K. Brayton.
Algorithms for discrete function manipulation. In In-
ternational Conference on CAD, pages 92–95. IEEE
Comp. Soc. Press, 1990.
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:10:49 UTC from IEEE Xplore.  Restrictions apply.