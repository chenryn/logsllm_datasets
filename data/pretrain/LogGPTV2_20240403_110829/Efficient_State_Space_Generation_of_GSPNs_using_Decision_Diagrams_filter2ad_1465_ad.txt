# Time and Space Requirements for Constructing the Tangible Reachability Set

| Jobs/Servers | Time (s) | Memory Peak (Kb) |
|--------------|----------|------------------|
| 85           | 176      | 2,382            |
| 106          | 132      | 16,603           |
| 124          | 12       | 91,972           |
| 96           | 167      | 228,561          |
| 40           | 144      | 511              |
| 144          | 191      | 35,594           |
| 282          | 31       | 99,346           |
| 240          | 418      | 224,295          |

**Table 1.** Time and space requirements to construct the tangible reachability set \( T \) for jobs and servers in the system.

## Model Description
Our model uses \( N \) queues, jobs, and servers; thus, both the model size and initial numbers of tokens increase with \( N \). For the Kanban, FMS, and Polling models, we use the finest possible decomposition: one place per subnet.

## Computational and Storage Costs
Table 1 compares the costs, in terms of computational and storage requirements, of constructing the tangible reachability set \( T \) for elimination during generation versus elimination after generation. When vanishing states are eliminated during generation, we construct the next-state function using Equation 3 and then generate \( T \) directly. Conversely, eliminating vanishing states after generation requires construction of the next-state function \( N \), generation of the reachable states \( S \), and determination of \( T \) using a query on \( S \).

For both techniques, we report the costs of constructing the appropriate next-state function and the costs of constructing the set \( T \). Since MDDs and matrix diagrams may expand and contract during manipulation, both the peak and final memory usage are reported. For next-state function construction, the memory usage reported is the total memory required for the matrix diagram. For the generation of \( T \), the memory usage reported is the total memory required for MDD nodes. Since the resulting MDD encoding \( T \) is the same for both techniques, we do not report the final memory usage for \( T \).

### Next-State Function Construction
Constructing the next-state function \( N' \) is more expensive than constructing \( N \), as it requires the construction of \( N \) and then the application of Equation 3. As the model size increases, the space and time requirements to compute \( N' \) grow much faster than those to compute \( N \). This rapid increase is due to the transitive closure computation in Equation 3. Iterative squaring is not the best way to compute transitive closure; we are currently investigating more efficient implicit techniques [24]. The dashes in the table correspond to cases in which the storage requirements to construct \( N' \) exceeded available memory.

### Memory Usage
While our intuition may suggest that elimination during generation will require less memory than elimination after generation, this is not always the case. This is due to the property of MDDs that the computational and storage complexities for manipulation depend on the number of nodes in the MDD, not the number of states encoded by the MDD. Removal of states from an MDD may actually increase its storage requirements! For example, the computational and storage requirements for reachability set generation for the dining philosophers model are significantly lower when all transitions are timed [15].

As both the computational and storage complexities depend on the number of nodes in the MDD, there is a correlation between the peak memory and CPU time for generation of \( T \). That is, for all reported results, whichever technique requires less storage space to generate \( T \) also requires less time. However, there is no clear trend as to when the generation of \( T \) is more efficient if elimination during generation is used versus elimination after generation. When a comparison is possible, we see that elimination during generation is more efficient for the FMS and Polling models, and elimination after generation is more efficient for the Kanban model. For the dining philosophers model, elimination during generation is more efficient for small models, while elimination after generation is more efficient for large models. All things considered, the cost of constructing \( N' \) tends to make elimination during generation more expensive and less practical.

### Power of Implicit Techniques
Table 1 also illustrates the power of implicit techniques. The first row for each model in the table corresponds to the largest tangible reachability set that could be generated using explicit techniques. Clearly, implicit techniques allow for the study of much larger systems than would otherwise be possible with explicit techniques.

## Conclusion
Implicit techniques for reachability set generation are quite promising, as they are often able to handle extremely large sets, but are usually limited to handling restricted classes of models. We addressed one such limitation of current implicit reachability set generation techniques: their inability to handle events with priorities and immediate events. We presented an alternate representation of the next-state function of a model, based on matrix diagrams. Manipulations of the matrix diagrams allow for construction of next-state functions that can handle models with event priorities and immediate events. We showed how vanishing states can be eliminated either during generation or after generation, when only the tangible states are of interest.

While the costs of state generation can be lower when vanishing states are eliminated during generation, the approach is often impractical due to the extra computation required to construct the adjusted next-state function. This is mainly due to the cost of computing the transitive and reflexive closure of the vanishing-to-vanishing next-state function. One possible direction for further research is the development of improved techniques that reduce this cost.

## References
[1] M. Ajmone Marsan, G. Balbo, G. Chiola, and G. Conte. Generalized stochastic Petri nets revisited: random switches and priorities. In 2nd Int. Workshop on Petri Nets and Performance Models (PNPM’87), pages 44–53, Madison, Wisconsin, Aug. 1987. IEEE Comp. Soc. Press.
...
[32] A. Srinivasan, T. Kam, S. Malik, and R. K. Brayton. Algorithms for discrete function manipulation. In International Conference on CAD, pages 92–95. IEEE Comp. Soc. Press, 1990.

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)**  
0-7695-1597-5/02 $17.00 © 2002 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 04:10:49 UTC from IEEE Xplore. Restrictions apply.