         RPC_UNICODE_STRING Names,
       [out] PSAMPR_ULONG_ARRAY RelativeIds,
       [out] PSAMPR_ULONG_ARRAY Use
     );
我们继续找返现 [SamrOpenDomain](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-samr/ba710c90-5b12-42f8-9e5a-d4aacc1329fa
"SamrOpenDomain")这个API，通过SID号可以输出我们需要的域对象句柄。
    long SamrOpenDomain(
       [in] SAMPR_HANDLE ServerHandle,
       [in] unsigned long DesiredAccess,
       [in] PRPC_SID DomainId,
       [out] SAMPR_HANDLE* DomainHandle
     );
到这里SamrOpenUser这个API所需要的条件就找全了。
我们需要继续为SamrOpenDomain寻找它所需要输入的内容，服务器句柄，SID号
这一块可以使用SamrLookupDomainInSamServer来获取我们需要的SID.
这个需要一个内置域的名称，也就是上面上面添加本地用户中提到的获取内置域的名称就可以，这里填写“Builtin”以及一个服务器句柄。
    long SamrLookupDomainInSamServer(
       [in] SAMPR_HANDLE ServerHandle,
       [in] PRPC_UNICODE_STRING Name,
       [out] PRPC_SID* DomainId
     );
获取服务器对象的句柄使用到的API[ SamrConnect5](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-samr/c842a897-0a42-4ca5-a607-2afd05271dae "
SamrConnect5")。
这个API 会返回服务器对象的句柄,需要我们填入我们的服务器，直接填写机器名称就可以。
    long SamrConnect5(
       [in, unique, string] PSAMPR_SERVER_NAME ServerName,
       [in] unsigned long DesiredAccess,
       [in] unsigned long InVersion,
       [in] [switch_is(InVersion)] SAMPR_REVISION_INFO* InRevisionInfo,
       [out] unsigned long* OutVersion,
       [out, switch_is(*OutVersion)] SAMPR_REVISION_INFO* OutRevisionInfo,
       [out] SAMPR_HANDLE* ServerHandle
     );
总结一下：
1、我们首先利用 SamrConnect5 获取服务器句柄。
2、利用获取到的服务器句柄经过SamrLookupDomainInSamServer获取服务器SID,。
3、接着利用对一步中获取的服务器句柄以及第二步中的SID利用SamrOpenDomain获取域句柄
4、接下来利用获取到的域句柄利用SamrLookupNamesInDomain获取RID号
5、接着利用第四步中的RID以及第三步中的域句柄利用SamrOpenUser API获取用户句柄
6、最后利用用户句柄以及之前的NT hash和需要修改的Nt Hash调用SamrChangePasswordUser修改密码。
想要修改的Nt hash 可以使用 python2 。
    import hashlib,binascii
    print binascii.hexlify(hashlib.new("md4", "123456".encode("utf-16le")).digest())
效果图：
完整的Demo：
### 4、MS-TSCH
[MS -TSCH]：任务计划程序服务远程协议,用于注册和配置任务以及查询远程计算机上运行的任务的状态。顾名思义就是利用这个API可以操纵计划任务。
直接来看相关API [SchRpcRegisterTask](https://learn.microsoft.com/zh-cn/openspecs/windows_protocols/ms-tsch/849c131a-64e4-46ef-b015-9d4c599c5167
"SchRpcRegisterTask")
直接向服务器注册一个任务，关键的两个参数一个是我们创建服务的路径，另一个就是定义计划任务的xml。
    HRESULT SchRpcRegisterTask(
       [in, string, unique] const wchar_t* path,
       [in, string] const wchar_t* xml,
       [in] DWORD flags,
       [in, string, unique] const wchar_t* sddl,
       [in] DWORD logonType,
       [in] DWORD cCreds,
       [in, size_is(cCreds), unique] const TASK_USER_CRED* pCreds,
       [out, string] wchar_t** pActualPath,
       [out] PTASK_XML_ERROR_INFO* pErrorInfo
     );
奇怪的是我们在编写的时候总是提示我们缺少参数，如下图,我们缺少一个句柄，这个句柄就是我们写RPC时候的一个绑定句柄，这个Demo写起来就简单多了，不需要之前那么多要求，只要配置一个RPC绑定就可以了。
本来以为很简单直接写一个绑定就可以，没想到调用之前的绑定，发现总是失败，后来查找github别人的源码发现需要多一步验证，需要实现RpcBindingSetAuthInfoExA,真是吐了。
    RPC_STATUS RpcBindingSetAuthInfoExA(
      RPC_BINDING_HANDLE       Binding,
      RPC_CSTR                 ServerPrincName,
      unsigned long            AuthnLevel,
      unsigned long            AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long            AuthzSvc,
      RPC_SECURITY_QOS         *SecurityQos
    );
关键代码
效果图：
相关代码：
### 5、MS-SCMR
[[MS - SCMR]](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/705b624a-13de-43cc-b8a2-99573da3635f
"\[MS - SCMR\]")：服务控制管理器远程协议.
指定服务控制管理器远程协议，用于远程管理服务控制管理器 (SCM)，这是一个启用服务配置和服务程序控制的 RPC
服务器。其实就是一个管理服务的一个RPC协议。
需要调用ROpenSCManagerA、RCreateServiceA也可以创建服务，除了这个之外还可以查看很多文档，还有许多API来使用。
    DWORD ROpenSCManagerA(
       [in, string, unique, range(0, SC_MAX_COMPUTER_NAME_LENGTH)] 
         SVCCTL_HANDLEA lpMachineName,
       [in, string, unique, range(0, SC_MAX_NAME_LENGTH)] 
         LPSTR lpDatabaseName,
       [in] DWORD dwDesiredAccess,
       [out] LPSC_RPC_HANDLE lpScHandle
     );
    DWORD RCreateServiceA(
       [in] SC_RPC_HANDLE hSCManager,
       [in, string, range(0, SC_MAX_NAME_LENGTH)] 
         LPSTR lpServiceName,
       [in, string, unique, range(0, SC_MAX_NAME_LENGTH)] 
         LPSTR lpDisplayName,
       [in] DWORD dwDesiredAccess,
       [in] DWORD dwServiceType,
       [in] DWORD dwStartType,
       [in] DWORD dwErrorControl,
       [in, string, range(0, SC_MAX_PATH_LENGTH)] 
         LPSTR lpBinaryPathName,
       [in, string, unique, range(0, SC_MAX_NAME_LENGTH)] 
         LPSTR lpLoadOrderGroup,
       [in, out, unique] LPDWORD lpdwTagId,
       [in, unique, size_is(dwDependSize)] 
         LPBYTE lpDependencies,
       [in, range(0, SC_MAX_DEPEND_SIZE)] 
         DWORD dwDependSize,
       [in, string, unique, range(0, SC_MAX_ACCOUNT_NAME_LENGTH)] 
         LPSTR lpServiceStartName,
       [in, unique, size_is(dwPwSize)] 
         LPBYTE lpPassword,
       [in, range(0, SC_MAX_PWD_SIZE)] 
         DWORD dwPwSize,
       [out] LPSC_RPC_HANDLE lpServiceHandle
     );
通过创建的服务是没有开启的，这个时候我们就需要一个开启的API RStartServiceA,准备好了所有的东西，就可以开始编写Demo。
相关Demo和之前的一样哪些搞就可以了，这里写几个注意的点。
1、当我们使用官方给的IDL编写的时候有很多重命名，我们直接注释就可以，还有一些我们代码中可能用不到的方法，但是由于是使用官方的IDL编译的，所以需要我们实现一下。
2、创建服务的时候只能直接将我们的EXE作为服务启动，因为不是所有程序都可以作为服务的方式运行，作为服务运行需要能返回运行情况等信息，所以有的程序添加后会，这里我提供一个方法，就是使用微软官方的程序srvany.exe
​ 1）首先将srvany.exe添加到服务中并且启动。
​ 2）将我们要执行的内容路径放入到注册表中
    reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\ServiceName\Parameters /v AppDirectory /t REG_SZ /d "c:\" /f
​ 3）然后将程序放入注册表
    reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\ServiceName\Parameters /v Application /t REG_SZ /d "c:\xxx.exe" /f
    reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\ServiceName\Parameters /v AppParameters /t REG_SZ /d "如果程序需要参数则填在这里，如果不需要，清空这段文字或者整行" /f
效果图：
这里我们将我们的shellcode执行一下,添加注册表的时候需要将servicesname改为你添加任务的名字。
而且这里还是system权限。
### 6、Seclogon Dump Lsass
这个是[splinter_code ](https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-2.html "splinter_code ")这个师傅发现的.
它的原理主要是，不直接调用OpenProcess去打开进程对象，而是利用已经打开的Lsass进程句柄，从而绕过检测，然后利用RpcImpersonateClient尝试使用PID做一个调用者的伪造。
关键细节可以看这个师傅的博客说的很详细了：
效果图：
需要将我们的第一步-t 1的提取出来，不然直接使用-t 2解密之后会被杀软杀了。
参考  