SELECT fact_1_id,  
       fact_2_id,  
       fact_3_id,  
       SUM(sales_value) AS sales_value,  
       GROUPING_ID(fact_1_id, fact_2_id, fact_3_id) AS grouping_id  
FROM   dimension_tab  
GROUP BY GROUPING SETS((fact_1_id, fact_2_id), (fact_1_id, fact_3_id))  
ORDER BY fact_1_id, fact_2_id, fact_3_id;  
 FACT_1_ID  FACT_2_ID  FACT_3_ID SALES_VALUE GROUPING_ID  
---------- ---------- ---------- ----------- -----------  
         1          1                3899.53           1  
         1          2                4095.53           1  
         1          3                6115.73           1  
         1          4                5414.05           1  
         1          5                4964.47           1  
         1                     1     2644.09           2  
         1                     2     2783.28           2  
         1                     3     1994.73           2  
         1                     4     2449.38           2  
         1                     5     2586.49           2  
         1                     6     2866.24           2  
         1                     7     1912.24           2  
         1                     8     2484.46           2  
         1                     9      2159.2           2  
         1                    10      2609.2           2  
         2          1                5694.58           1  
         2          2                5135.98           1  
         2          3                5456.83           1  
         2          4                4492.78           1  
         2          5                4549.99           1  
         2                     1     2092.08           2  
         2                     2     2798.46           2  
         2                     3     2444.83           2  
         2                     4     2621.54           2  
         2                     5     2368.95           2  
         2                     6     2755.76           2  
         2                     7     3197.89           2  
         2                     8     2479.01           2  
         2                     9     2811.85           2  
         2                    10     1759.79           2  
30 rows selected.  
```  
grouping sets 解释 :   
GROUP BY GROUPING SETS((fact_1_id, fact_2_id), (fact_1_id, fact_3_id)) 分解如下 :   
```  
  (fact_1_id, fact_2_id)  
  (fact_1_id, fact_3_id)  
```  
## 二、GreenPlum  
创建测试表  
```  
CREATE TABLE dimension_tab (  
  fact_1_id   numeric NOT NULL,  
  fact_2_id   numeric NOT NULL,  
  fact_3_id   numeric NOT NULL,  
  fact_4_id   numeric NOT NULL,  
  sales_value numeric(10,2) NOT NULL  
) distributed randomly;  
```  
插入测试数据 :   
```  
INSERT INTO dimension_tab  
SELECT TRUNC(3*random()) AS fact_1_id,  
       TRUNC(6*random()) AS fact_2_id,  
       TRUNC(11*random()) AS fact_3_id,  
       TRUNC(11*random()) AS fact_4_id,  
       ROUND(100*random()::numeric, 2) AS sales_value  
from generate_series(1,1000) ;  
```  
测试结果略 :   
1\. CUBE : 支持  
2\. ROLLUP : 支持  
3\. GROUPING : 支持  
4\. GROUPING_ID : 不支持  
5\. GROUP_ID : 支持  
6\. GROUPING SETS : 支持  
## 注意  
1\. GreenPlum 3.3.4中没有grouping_id函数. 其他版本是否支持未验证.  
2\. 从PostgreSQL的wiki来看, PostgreSQL应该在考虑加入cube, rollup, grouping sets的功能. 9.5已加入.  
## 参考  
1\. http://www.oracle-base.com/articles/misc/rollup-cube-grouping-functions-and-grouping-sets.php  
2\. http://wiki.postgresql.org/wiki/Grouping_Sets  
3\. http://bitcast-a.v1.o1.sjc1.bitgravity.com/greenplum/Greenplum_CE_Database/documentation/4.2.2/greenplum_database_4.2_administrator_guide.pdf  
greenplum 4.2.2 手册上的描述 :   
```  
The GROUP BY Clause  
The optional GROUP BY  clause has the general form:  
GROUP BY grouping_element [, ...]  
where grouping_element can be one of:  
()  
expression  
ROLLUP ( expression  [,...])  
CUBE ( expression  [,...])  
GROUPING SETS (( grouping_element [, ...]))  
GROUP BY  will condense into a single row all selected rows that shar e the same values   
for the grouped expressions.  expression  can be an input column name, or the name   
or ordinal number of an output column (SELECT  list item), or an arbitrary expression   
formed from input-co lumn values. In case of ambiguity, a  GROUP BY  name will be   
interpreted as an input-column name ra ther than an output column name.  
Aggregate functions, if any are used, are computed across all rows making up each   
group, producing a separate value for each group (whereas without  GROUP BY , an   
aggregate produces a single value computed  across all the selected rows). When   
GROUP BY  is present, it is not valid for the  SELECT  list expressions to refer to   
ungrouped columns except within aggregate functions, since there would be more   
than one possible value to return for an ungrouped column.  
Greenplum Database has the following additional OLAP grouping extensions (often   
referred to as  supergroups ):  
ROLLUP  
A  ROLLUP grouping is an extension to the  GROUP BY  clause that creates aggregate   
subtotals that roll up from the most detailed  level to a grand total, following a list of   
grouping columns (or expressions). ROLLUP  takes an ordered list of grouping   
columns, calculates the standard aggregate values specified in the GROUP BY  clause,   
then creates progressively higher-level subt otals, moving from right to left through   
the list. Finally, it creates a grand total. A  ROLLUP grouping can be thought of as a   
series of grouping sets. For example:  
GROUP BY ROLLUP (a,b,c)   
is equivalent to:  
GROUP BY GROUPING SETS( (a,b,c), (a,b), (a), () )   
Notice that the n elements of a  ROLLUP  translate to  n+1 grouping sets. Also, the   
order in which the grouping expressions are specified is significant in a  ROLLUP.  
CUBE  
A  CUBE grouping is an extension to the  GROUP BY  clause that creates subtotals for all   
of the possible combinations of the given list of grouping columns (or expressions).   
In terms of multidimensional analysis,  CUBE generates all the subtotals that could be   
calculated for a data cube with the specified dimensions. For example:  
GROUP BY CUBE (a,b,c)   
is equivalent to:  
GROUP BY GROUPING SETS( (a,b,c), (a,b), (a,c), (b,c), (a),   
(b), (c), () )   
Notice that n  elements of a  CUBE translate to 2  
n  
 grouping sets. Consider using  CUBE   
in any situation requiring cross-tabular reports. CUBE is typically most suitable in   
queries that use columns from multiple dime nsions rather than columns representing   
different levels of a single dimension. For instance, a commonly requested   
cross-tabulation might need subtotals for all the combinations of month, state, and   
product.  
GROUPING SETS  
You can selectively specify the set of gr oups that you want to create using a   
GROUPING SETS  expression within a  GROUP BY  clause. This allows precise   
specification across multiple dimensions without computing a whole  ROLLUP or   
CUBE. For example:  
GROUP BY GROUPING SETS( (a,c), (a,b) )  
If using the grouping extension clauses  ROLLUP,   CUBE, or  GROUPING SETS , two   
challenges arise. First, how do you dete rmine which result rows are subtotals, and   
then the exact level of aggregation for a given subtotal. Or, how do you differentiate   
between result rows that contain both stored  NULL values and “NULL” values   
created by the  ROLLUP  or  CUBE. Secondly, when duplicate grouping sets are   
specified in the GROUP BY  clause, how do you determine which result rows are   
duplicates? There are two additional gr ouping functions you can use in the SELECT    
list to help with this:  
  grouping(column [, ...])  The  grouping  function can be applied to one   
or more grouping attributes to distinguish super-aggregated rows from regular   
grouped rows. This can be helpful in  distinguishing a “NULL” representing   
the set of all values in a  super-aggregated row from a  NULL value in a regular   
row. Each argument in this  function produces a bit — either 1 or  0, where 1   
means the result row is super-aggregated, and 0 means the result row is from a   
regular grouping. The grouping  function returns an in teger by treating these   
bits as a binary number and then converting it to a base-10 integer.  
  group_id() For grouping extension queries that contain duplicate grouping   
sets, the  group_id  function is used to identify duplicate rows in the output.   
All unique  grouping set output rows will have a group_id value of 0. For each   
duplicate grouping set detected, the group_id  function assigns a group_id   
number greater than 0. All output rows  in a particular duplicate grouping set   
are identified by the same group_id number.  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")