在此，首先制作并显示Alice（来白Alaska）的数据。但是，之后就利用 getinfo
public class Main f
：但是info字段所指的对象其实例状态则会有所改变。
useri nfo = { UserIrfo: 
List A2-2
名字已改成 Bcbby
 publsc static void main(String[] args) {
/(osurasn + " = ogurxesnulutqurid ano'uassas
//再度显示
infc.repiace(l7, 17, "Bobby");
StringBuffer info = userinfo.get.Info();
11更改状态
System.out.println("userinfo = " + userinfo);
/显示
Userlnfo userinfo
/!建立实例
改变Userlnfo 状态的 Main 类(Main.java)
图A2-3执行范例
rew UserInfc("Alice", "Alaska");
"/1)..16是"Alice"的位置
---
## Page 375
实例的内部状态却有可能改变，
拥有这个实例的引用。
予的Point实例是在构造器的外部所建立的，因此调用出这个构造器者很有可能就
我们在ListA2-3时以确认这件事情。
是 fimal，这个字段的值本身就不会再变化了，但是，这个字段所指的 Point 的
th.ｓ.atar﹢Point
构造器的参数所给予的实例会被直接指定到字段。这是什么意思呢？参数所给
publie class Ma.n f
Pubiic Iire(Point startPcist, Point endPoint) {
接下来我们来看看Line类的第2个参数所给的实例会被指定到字段中构造器。
pub-ic slatie woid main(st:ing[] args)
his.endPoint -
this.star?oint - starPci:it;
line - [ Iine: (150,0)-(150,250) ]
"ine - frine: (0,l)-(lco,C)
aysten.out.printlr("line - " + lire);
；/再决显示
p2.v
pl.x-15(l;
system-rut.printlr:("ine = " + line);
/‘显示
Line lire = new ine(yl, p2);
Poirt p2 = new Poit(1co, 0);
Point pl - new Point(o, C);
/改变状态
；’建立实例
.X
--256:
150;
endFciat;
图A2-4
直线移动了
练习问题的解答
---
## Page 376
动，就会出现图 A2-5 的结果。可以看到Line 的确并没有受到外界的影响。
实例指定到字段中，
362
方法如I List A2-4。
就可以做到。
话，Linc 类也会变成 immutable。例如，Point 的×字段与y字段都设为 public final,
将 Line 昊设置成 immutable 的诀雾
mutable.
图 A2-4的Line的实例属性的确已经改变了。
可是，Point 不管是 immutable 还是 mutable，都可以将Line 设置成 immutable ，
设置为 immutable的List A2-4的Line 类，如果用刚才 List A2-3的方式予以移
List A2-4中，我们要建立-个拥有与所给予的实例相同属性的新实例，将此新
在 Point 这个非 immutabile 的类(mutable 的类)的影响下，连 Line 类都变成
public class Line {
要如何才能将Line 类设为 immutable 呢？当然，将Point 类设为 immutable 的
我们可以看到，虽然只是随便随便替换一下pl、p2这两个 Point 的实例，可是
List A2-4
public String tostringi) {
puhlic
public
public
public Line(Point s-artPoint, Point erdPoint) {
public Lire(int startx, int starry, nt endx, int endy) ↑
private final Pcint endPoint;
privaze f-ral Point startPoirt;
this,enaPoint = new Point(erdPoirt.x, endPoint.y);
this.srartPoint = new Poirt(azartPoint.x, startPcint.y);
:his,endPoint 
Line -[
Iine = [Lire: (0,0} - (00,0)
int getEndxi） {
int. getstarty()
int getstartx()
设置为 immutabe 的 Line 类(Line java)
I Line: (0.0)
new Poirt(endx, endy);
图A2-5执行结果
rerurn erdPoint.getXi); }
{ returr. startPoint.getY();
{ return startPoint.getx(l;
[100,0)
←没有变化
Y
---
## Page 377
ImmutablePerson的实例。我们来看看这样产生的 ImmutablePerson 的实例的 namc
们将name字段与 address 亨段设为相同字符市(数字字符串)。
与 addrcss 的值是否永远相等，
问题2-6的解答
而在：CrackerThread类中，从被给予的MutablePerson也生出·个个新的
(!immutahle.getName().equals(immutable.getAddress())) [
class Crackerrhread exterds Thrcad [
List A2-4中，使用 new拷贝了Point类的实例，但是应该也可以使用Java的clone
public class Main ↑
impcrt person.ImrutablePerson;
import person.MutablePerscn;
List A2-5
在此，我们将MutablePerson 的实例连续以上线程来改写。为了便于确认，我
List 2-10的InumutablePerson类久缺安全性可以从List A2-5的程序检测得知
ImmutablePerson类小有错误.
publio void run{)
puhlic CrackerThreae(MurablePerson mutable) {
private final MutablePerson mutable;
public static void mair(Strirg[l args) {
while (true)l
this.rutable = rutabler
new Crackcrlhread (mutable).start() ;
MutablePersor. mLtable =
for （int i- O; true; i++) {
ew
lew CrackerThread(mutable).star:()
 ImmrtablePersci. immutable = new mmutablePerson (mutable);
mutable.setPersor("" + i， " + i);
 CrackerThrez&(mutable).start (1;
检测 ImmuitablePerson 的确欠缺安全性的 Main 类(Main.java)
Sys:en.out.println(currentThread().getName() +
rew MutablePersen("start", "start");
练习问题的解答
---
## Page 378
取得 lock 的实例，也就是以参数所给予的MutablePerson，这点请注意，
可能会有别的线程使用MutablePerson 的 setPerson方法而将 address 字段改写掉。
364
确有问题：
在比，中于是构造器（Constructor），所以就要使用 synchronized段，这时应该
public final class Tmmul.abicPerson 
package pcrson:
修改后的 Immutable Person 类如1 List A2-6所示，
this.name = yersor-getName();
ImnutablePerson 类的构造器（Constructor）中，有的方法会将 MutablePerson
this.address = person.getaddress();
以下就来指出错误所在，并进行修改。
这样
List A2-6
***** BROKEN **** " + irmutable);
是，这2个调用必须放在临界区间（Critical Section）当中：
Thréa²-1 *****BRKEI*****.
Thread-2 ***+* BROKEN *****1 ImmutablcFersor: 386237, 387624
publ:c ImrutablePerson(Strirg name, String address)
private final String namc;
来，就会如图A2-6这样出现 BROKEN 的显示。我们就可了解安全性的
this.address = address;
lhia.name
具备安全性的 ImmutablePerson 类(ImmutablePerson)
一
nare;
图A2-6执行范例
[ImmutablePerson: 918612, 919875 ]
ImmutablePerson: 618964, 619060
一
1
---
## Page 379
问题3-1的解答
第3章
○（4）从 getRequest“中调用wait方法时，queue.size(）>0的值·定为false
（）（3）从 getRequest 当中调用removeFirst 方法时，queuc.size）>0的值定
×（2）RcqucstQucue的实例可以做旧两个来。
从刚才的Main类来执行之，也不会出现BROKEN（图A2-7）。
作术满足 Guard 条件时，才会不易调用出 wait 方法。
在执行所要进行的处斑时，能满足Guard条件。
queuc.size(）>0是Guard 条件。Guarded Suspcnsion 模式（Patterm）能够保让
只会山Main类做出个，而这个体就由 ClicntThread与ServerThread共享
getReques1 由 ServerThrcad 来调用，putRcquest 则是由 ClientThread 来调用
puclic String tostring() :
publie String getAcdress() f
pubiic String gstName() {
public MurabiePersor getMulablePerson() {
Public ImmutablePerson(MutabiePersor person) 1
是truc.
 returr address;
returr. nare;
 returr new MutablePerson(this);
synchronized (pcrsor) 1
-his.address = person.gctAddress();
tnis.rame - person.getNamei);
[没有出现任何消息。接CTRI+C结束）
图A2-7执行范例
练习问题的解答
365
---
## Page 380
的锁定而继续进行处理（Guard条件不易检测），
这时，this 的锁定也会被解放。之后，被阻挡住的其他线程（其中－个）会取得this
定，全部都要阻挡起来。所以，其他线程的处理实质上并不会有什么进展（Guard
的线程由于有 this 的锁定，因此为了 notifyAll，来自 waitsct 的其他线程都要取得锁
问题3-2的解答
9
部分（List A3-1)。
问题3-3的解答
照这样的写法，
条件也不测试）。
不过，由丁将 notifayAll 与在最后比较容易理解，因此建议在写程序时可以比
另--方iti，执行 notifyAll 的线程会在执行过 addLast 之后从 putRequest 回来。
在执行 notifyAll 时，参数 request 还没有被添加到队列。
即使先执行 notifyAllO)，RequestQueue 类也会安全执行。
在这里，我们将调试输出（Debug Print）加到 wait()的前后与notifyAll(的执行
×（7） putRequcst 方法中的 notifyAll);这个语句跟号成 queue.notifyAllO;的意
×（5）ClientThread 的线程在执行 putRequest 时，ServerThread 的线程不会进
●notifyAll 之后，原本wait 的线程Bobby会结束wait。
首先，我们先具体思考看看什么是“理当如此”的处理操作。
X（
）在调用 getRequest H时，如果是 queue.size()<=0，线程 Bobby 就会 wait。
在 putRequest 之后，线程 Alice 会进行 notifyAll。
notifyAllO;意思相同。
成queue.notifyAll();意思就截然不同了。与成this.notifyAllO;则与
类的实例）的waitsel。
会进入的是 this(Request Queue 类的实例)的 waitset， 而非 queue(LinkedList
是除此之外，ServerThread 的线程都可以自由执行。
执行 getRequest，反而无法取得lock 而会 block 起来。而要执行 wait 的话，
ServerThread 的线程有可能会执行处理也有可能不执行处理。例如，如果要
思一样，只是后者比较长：
waitset.
行任何处理。
：但是，执行notifyAll
---
## Page 381
Alice requests I Requesc No.2]
Bobby hanals [ Reguest No.l ]
Bobby:
Alice:
Alice: nolifyAll() begins, queue 
Alice
Bobby: wait() begins, queue =
Bobby
Alice: rotifyAll() enis, queue =
Alice: rolifyAll() begins， queue = [[Request No.0 l]
Alice
notifyAll() begins， (queue - " + queue);
ends,
System.out.pzintin(Thread.currentrhread().getName () + ": wait()
begins, queue 
System.out.println(Thread,currentlhread().getName() + ": wait()
public class ReguestQuere f
imporr java.util.LirkedList;
 List A3-1
public synchronized void putRequest(Requesl request) l
pubiic synchronized Requcst getRequesti) {
private final LinkeaList. queue = new LinkedList();
: wai. () ends, queue = [I Request No.i
reqlests [ Request No.l
handles
request i 
notifyAll()
 System.out.println(Thread.currentThread().getName() + ":
 notifyAllt;
re.urn
queue = " + queue}:
while (queue,size() <= 0) f
try l
加入调试输出(Debug Print)的 RequestQueue 类 (RequeslQueue.java)
catch (IuterruptedException e) [
丨Request No.0
(Request)queue.removeFirst():
wait(l;
Request. No.C 1
ends, queue = [[ Request
3
Alice 对 No.2 进行 zeguest
Alice进行nctifayAll(Bobby在等特)
←Bobby处理No.1（在等待之后）
= {[ Request No.l ]]
一Bobby 处理No.U(不等待
[[ Request 1
(Alice进行not iayAll(谁也没有在等)
←Alice 对 No.0 进行 request
11
No.1 1]
No.0 ]]
待
练习问题的解答
一十
367
---
## Page 382
368
(Guard)”。notify/notifyAll不过是去检查条件的个关键点。
个类的重复使用性会降低。
题。因为 RequestQueue 的实例很可能被某个线程给 notify或 notifyAll 的缘故。不用
例程序的话，的确没有问题，但是，如果在更大型的程序中使用的话。就会发生问
使用while 而非使用if。
queue.removeFirsi()。使用这个类恐怕有安全上的问题。
这样-·来，好儿个线程就会全部叶始运行。如果这时queue.sizeO的值是1，那么开
问题3-4的解答
要再强调一次．Guarded Suspension 模式要使用while，来“以条件来保护
，即使qucue.size()的价是0，开始运行的第“个线程还是会调用出
让我们想象－·下，假设我们在开车，碰到红灯将车停下后正在发呆。这时候如
如果不月 notifyAll 而别 notify 的话，是不是就可以使用if了呢?如果是这个范
保持 wait 的线程在开始开始运行前·定要再次检查Guard 条件，这时我们就要
以下省略。
Bobby hand-es : Request No.4 ]
Bobby handles [ Request No.3 ]
Alice requests [ Request Nc.4 ]
Alice: nctiryAll() ends, quete-
在（1）～（4）之还布部分问题、
Alice:
Alice
Bshby
Alice; not.fyA-l{) erds, queue = [[ Request No.2 ]]
我们假设有好凡个线程都在wait 时，RequestQueue的实例被执行了notifyAll
在此范例文件中的话是没有问题。但是一般情况的话就没有这么单纯了。
(1）将 while 致减if时(List 3-7)
requests 
 handles
rotifyAllt) begins, queue 
按CTRL+C结束】
[Request No.3]
Reqlest No.2 ]
图A3-1执行范例
、将各项说明如下，
←Bobby 处理No.2（不等待）
—Alice进行rotifayAll(谁也没有在等）
←Bobby 处理Nc.4(不等待)
←Bobby处理No.3（不等待)
[: Reguest No.3 ]:
+Alce进行 rotifayAll(谁也没有在等)
-[l Request No.3 ]]
1
一
（续上图）
---
## Page 383
方法或 getRequest 方法中（会白己block 起来）。因为无法进入 putRequest 方法，因
个 synchronized 方法中执行 Thread.sieep 的话，其他的线程也无法进入到putRequest
wait 的线程会释放实例的锁定，但是 Thread.slecp 则不会。囚此，在 getRequest 这
这您就错了。阿题不在于性能，而是在于生存性。wait 与Thread.sleep 不同，执行
办法等到Guard条件被满足：
这个线程还是会从 while语句跳到 catch 节，而调用出 removeFirst。也就是说，没有
常 NoSuchElementException:
理之前，
是样，notify/notifyAll 不过只是同车的人喊我们一下的这个操作，
确定已经变成绿灯，安金没有问题才能踩油门。Guarded Suspension 模式的道理也
使用这个类会导致安全性的问题，练习3-6中，我们会来建立一个能正确处理
线程在 wain 时，如果其他线程调用 intcerrupi 方法，即使 Guard 条件没有被满足，
queuce.size()的值为1时，像图 A3-2这样两个线程都执行的话，线程1会收到异