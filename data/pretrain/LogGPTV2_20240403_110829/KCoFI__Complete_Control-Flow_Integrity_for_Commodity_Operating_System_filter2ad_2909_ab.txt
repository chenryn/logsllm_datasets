tion, interrupted program state (as described in Section IV-F),
and other state that, if corrupted, could violate control-ﬂow
integrity. While the MMU can protect code memory because
such memory should never be writeable, KCoFI will need to
store this state in memory that can be written by KCoFI but
not by errant operating system and application writes. KCoFI
uses lightweight instrumentation on kernel store instructions
to protect
this memory: essentially a version of software-
fault isolation [21]. (An alternative would be to use MMU
protections on KCoFI data pages as well, but that would incur
additional numerous TLB ﬂushes.)
As Figure 2 shows, our design calls for a reserved portion
of the address space called KCoFI memory which will contain
the KCoFI VM’s internal memory. KCoFI uses the MMU to
prevent user-space code from writing into KCoFI memory. To
prevent access by the kernel, KCoFI instruments all instruc-
tions in the kernel that write to memory; this instrumentation
uses simple bit-masking that moves pointers that point into
KCoFI memory into a reserved region of the address space
(marked “Reserved” in Figure 2). This reserved region can
either be left unmapped so that errant writes are detected and
reported, or it can have a single physical frame mapped to
every virtual page within the region so that errant writes are
silently ignored. Note that only stores need instrumentation;
1One variant of their design uses x86 segmentation registers to protect
application stack frames containing return addresses.
294
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I.
KCOFI MMU INSTRUCTIONS
Name
sva.declare.ptp (void * ptp, unsigned level)
sva.remove.ptp (void * ptp)
sva.update.l1.mapping (void * ptp, unsigned trans)
sva.update.l2.mapping (void * ptp, unsigned trans)
sva.update.l3.mapping (void * ptp, unsigned trans)
sva.update.l4.mapping (void * ptp, unsigned trans)
sva.load.pagetable (void * ptp)
Description
Zeroes the physical page mapped to the direct map pointer ptp and marks it
as a page table page at level level.
Checks that the physical page pointed to by direct map pointer ptp is no longer
used and marks it as a regular page.
If ptp is a direct map pointer to an L1 page, validate that the translation trans
does not violate any security policies and store it into ptp.
If ptp is a direct map pointer to an L2 page, validate that the translation trans
maps an L1 page and store trans into ptp.
If ptp is a direct map pointer to an L3 page, validate that the translation trans
maps an L2 page and store trans into ptp.
If ptp is a direct map pointer to an L4 page, validate that the translation trans
maps an L3 page and store trans into ptp.
Check that the physical page mapped to the direct map pointer ptp is an L4
page and, if so, make it the active page table.
none of the KCoFI internal data needs to be hidden from the
kernel, and, as a result, can be freely read by kernel code.





Fig. 2. KCoFI Address Space Organization
C. MMU Restrictions
As previous work has shown [5], [6], MMU conﬁguration
errors can lead to violations of security policies enforced
by inline reference monitors. As KCoFI’s CFI mechanism
must keep code read-only and the store instrumentation makes
assumptions about the address space layout, KCoFI must be
able to restrict how the operating system conﬁgures the MMU.
The SVA infrastructure forces hardware page table pages
to be read-only and requires the OS to use special instructions
to make changes to the page table pages [5]. KCoFI simpliﬁes
and enhances the original SVA-OS MMU instructions; these
instructions are shown in Table I.
The KCoFI VM maintains a structure within its portion
of the address space called the direct map. The direct map
is a one-to-one mapping between virtual addresses within the
direct map and physical frames of memory. All pages in the
direct map will be read-only. The purpose of the direct map
is to provide the KCoFI VM and the OS kernel with a known
virtual address for every physical address. When the OS asks
the KCoFI VM to make page table updates, it will identify
page table pages by their direct map virtual address.
The sva.declare.ptp() instruction informs
the
KCoFI VM of which frames will be used for hardware page
table pages and at which level of the page table hierarchy
these frames will be used. The KCoFI VM will only permit
pages that are not in use to be declared for use as page
table pages, and it will zero the page’s contents to ensure
that no stale virtual to physical page translations remain in
the page. When the system wishes to stop using a frame as
a page table page, it can call sva.remove.ptp(). When
called, sva.remove.ptp() veriﬁes that the frame is no
longer referenced by any page table pages; if the check passes,
it allows the frame to be mapped read/write into the virtual
address space and used for kernel or user-space data.
The
sva.update.l.mapping()
instructions
write a new page table entry into a page table page previously
declared using the sva.declare.ptp() instruction. The
KCoFI VM will ﬁrst vet the mapping before inserting it into
the page table page at the speciﬁed offset. For example, if
the mapping should insert an L2 page table page, the checks
ensure that the physical address speciﬁed in the translation is
a page previously declared as an L2 page. The instructions
will also keep count of how many references there are to each
physical page frame.
Switching from one page table to another is done by the
sva.load.pagetable() instruction which requires that it
be given the address of a level 4 page table page.
There are two ways in which reconﬁguration of the MMU
can allow the operating system to bypass the protections
provided by the compiler instrumentation. First, an errant op-
erating system may reconﬁgure the virtual addresses used for
KCoFI memory or the code segment so that they either permit
write access to read-only data or map new physical frames to
the virtual pages, thereby modifying their contents. Second,
an errant operating system might create new virtual page
mappings in another part of the address space to physical pages
that are mapped into KCoFI memory or the code segment.
Since the CFI and store instrumentation makes assumptions
about the location of the code segment and KCoFI memory
within the address space, the MMU instructions must ensure
that those assumptions hold. If these assumptions were to be
broken, then both the code segment and KCoFI’s internal data
structures could be modiﬁed, violating control-ﬂow integrity.
The KCoFI MMU instructions enforce the following re-
strictions on MMU conﬁguration in order to protect the native
code generated by the KCoFI VM:
295
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II.
KCOFI INTERRUPT CONTEXT INSTRUCTIONS
Name
sva.icontext.save (void)
sva.icontext.load (void)
sva.ipush.function (int (*f)(...), ...)
sva.init.icontext (void * stackp, unsigned len, int (*f) (...), ...)
sva.reinit.icontext (int (*f) (...), void * stackp, unsigned len)
Description
Push a copy of the most recently created Interrupt Context on to the thread’s
Saved Interrupt Stack within the KCoFI VM internal memory.
Pop the most recently saved Interrupt Context from the thread’s Saved Interrupt
Context stack and use it to replace the most recently created Interrupt Context
on the Interrupt Stack.
Modify the state of the most recently created Interrupt Context so that function
f has been called with the given arguments. Used for signal handler dispatch.
Create a new Interrupt Context with its stack pointer set to stackp + len. Also
create a new thread that can be swapped on to the CPU and return its identiﬁer;
this thread will begin execution in the function f. Used for creating new kernel
threads, application threads, and processes.
Reinitialize an Interrupt Context so that it represents user-space state. On a
return from interrupt, control will be transferred to the function f, and the
stack pointer will be set to stackp.
1)
2)
3)
No virtual addresses permitting write access can be
mapped to frames containing native code translations.
The OS cannot create additional translations mapping
virtual pages to native code frames.
Translations for virtual addresses used for the code
segment cannot be modiﬁed.
Additional restrictions prevent the operating system from
using the MMU to bypass the instrumentation on store instruc-
tions:
1)
2)
Translations for virtual addresses in KCoFI memory
cannot be created, removed, or modiﬁed.
Translations involving the physical frames used to
store data in KCoFI memory cannot be added, re-
moved, or modiﬁed.
D. DMA and I/O Restrictions
Memory writes issued by the CPU are not the only memory
writes that can corrupt the code segment or internal KCoFI
memory. I/O writes to memory-mapped devices and external
DMA devices can also modify memory. The KCoFI VM must
control these memory accesses also.
The KCoFI design, like the original SVA design [5], uses
an I/O MMU to prevent DMA operations from overwriting the
OS kernel’s code segment, the KCoFI memory, and frames that
have been declared as page table pages.
Protecting KCoFI memory from I/O writes is identical to
the instrumentation for memory writes; pointers are masked
before dereference to ensure that they do not point into the
KCoFI memory. Additionally, the KCoFI VM prevents recon-
ﬁguration of the I/O MMU. KCoFI instruments I/O port writes
to prevent reconﬁguration for I/O MMUs conﬁgured using I/O
port writes; memory-mapped I/O MMUs are protected using
the MMU. The KCoFI VM can therefore vet conﬁguration
changes to the I/O MMU like it does for the MMU.
E. Thread State
The KCoFI VM provides a minimal thread abstraction
for representing the processor state. This structure is called
a thread structure and is referenced by a unique identiﬁer.
Internally, as shown in Figure 3, a thread structure contains
the state of the thread when it was last running on the CPU
(including its program counter) and two stacks of Interrupt
Contexts (described in Section IV-F).
Interrupt Stack 
Saved Interrupt Stack 
	
	
	
	
	
	
	
	
	
	
	
	
	
	



Fig. 3. KCoFI Thread Structure
Thread structures are stored within the KCoFI memory to
prevent direct modiﬁcation by application or OS kernel code.
The next few subsections will describe how the thread structure
and the KCoFI instructions that manipulate them are used
to provide interrupt, thread creation, and context switching
operations that cannot violate control-ﬂow integrity.
F. Protecting Interrupted Program State
When an interrupt, trap, or system call occurs, both the
Linux and BSD operating systems store the interrupted pro-
gram’s state on the kernel stack [7], [8]. This state includes
the return address at which execution should resume when the
OS kernel decides to return from the interrupt, trap, or system
call. Since it is stored in memory, this program counter value
is vulnerable to corruption by memory safety errors.
Unlike other targets of indirect control transfers, the return
address for a return-from-interrupt cannot be usefully deter-
mined via static analysis. Interrupts are allowed to occur at
any time; any valid instruction location, in both application
and kernel code, is permitted to be a valid return-from-interrupt
target. The memory holding the return address must therefore
be protected from corruption.
KCoFI saves the interrupted program state, called the
Interrupt Context, on the Interrupt Context stack within the
296
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:09 UTC from IEEE Xplore.  Restrictions apply. 
currently active thread’s thread structure within the KCoFI
memory. KCoFI then switches the stack pointer to a pre-
determined kernel stack and transfers control to the OS kernel.
Since the thread structure and stack of Interrupt Contexts are
stored in KCoFI memory, the same bit-masking instrumenta-
tion used to protect the KCoFI memory is also used to protect
the return address for interrupts, traps, and system calls.
OS kernels need to make controlled modiﬁcations to inter-
rupted program state in order to dispatch signal handlers [7],
[8], efﬁciently recover from page faults when copying data
between user and kernel space [7], or restart interrupted system
calls [7]. The SVA infrastructure provides instructions for
making such controlled changes [5]; KCoFI provides new
implementations of these instructions that do not rely on
tracking memory object locations and sizes. These instructions
are listed in Table II.
The sva.ipush.function() instruction modiﬁes in-
terrupted program state to push a function call frame on to the
interrupted program’s stack; it is used for signal handler dis-
patch. Our design, like the original SVA [5], only permits this
modiﬁcation to be made to an Interrupt Context representing
user-space state.
Signal handler dispatch uses sva.icontext.save()
and sva.icontext.load() to save and restore inter-
rupted program state before and after signal handler dispatch.
The Saved Interrupt Stack is used to save a copy of an
original interrupt context before the original (on the Inter-
rupt Stack) is modiﬁed to dispatch a signal. In particular,
the sva.icontext.save() instruction makes a copy of
the Interrupt Context at the top of the Interrupt Stack and
pushes this copy on to the Saved Interrupt Stack within
the thread structure. The sva.icontext.load() instruc-
tion will pop an Interrupt Context off the Saved Interrupt
Context stack and replace the top-most element on the In-
terrupt Stack with this previously saved Interrupt Context,
ensuring that the correct state is resumed on the next return
from interrupt. Unlike sva.icontext.save(), we restrict
sva.icontext.load() so that it can only load user-space
interrupted program state back into the Interrupt Context (since
signals in a commodity kernel are generally never dispatched
to interrupted kernel code, only to userspace code).
Exception handling within the kernel is done using the
LLVM invoke and unwind instructions. The invoke in-
struction is just a call instruction with an additional label
to identify an exception handler. invoke transfers control
ﬂow to the called function; if that function (or one of its
callees) throws an exception, it uses the unwind instruction to
unwind control-ﬂow on the stack to the most recently executed
invoke instruction [20].
The sva.iunwind instruction can modify interrupted
privileged state;
to forcing the interrupted
program to execute an unwind instruction. This behavior
cannot cause control ﬂow to deviate from the compiler’s
precomputed call graph and is therefore safe to use.
is equivalent
it
G. Thread Creation
When a commodity operating system creates threads, it
it
performs two tasks that can affect control ﬂow. First,
297
allocates and initializes a kernel stack and places data on
the new stack to contain the state that, when restored on a
return from system call, will start running the new user-space
thread [7]. Second, it creates new kernel state that will be
placed on to the processor on a context switch [7]; after the
context switch, the new state will return from the system call,
loading the new interrupted program state and returning back
to the application.
KCoFI provides the sva.init.icontext() instruc-
tion for creating new threads and processes. This instruction
ﬁrst creates a new thread structure which can be swapped on
to the CPU using the sva.swap() instruction discussed in