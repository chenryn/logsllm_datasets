        Function         : UnknownOrMissingSymbols
        FunctionAddress  : 0x757e9300
        ReturnAddress    : 0x757e9164
        ReturnValue      : 0x3000000000
        Parameters
再次单击TimeStart属性中的Time Travel，我们将穿越到该调用发生的时刻（图4）：
    0:000> dx @$cursession.TTD.Calls("gdi32full!PlayMetaFileRecord")[2].TimeStart.SeekTo()
    Setting position: 2113:3DB
    @$cursession.TTD.Calls("gdi32full!PlayMetaFileRecord")[2].TimeStart.SeekTo()
    (1fc0.1c3c): Break instruction exception - code 80000003 (first/second chance not available)
    Time Travel Position: 2113:3DB
    eax=19a0cee6 ebx=00000000 ecx=19a10f10 edx=00000084 esi=00000000 edi=9f211284
    eip=757e9300 esp=0078f5d0 ebp=0078f67c iopl=0         nv up ei pl zr na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    gdi32full!PlayMetaFileRecord:
    757e9300 8bff            mov     edi,edi
输入p-命令，回滚一步，回到该调用被执行前那一刻的状态，以便查看相关的参数：
    0:000> p-    Time Travel Position: 2113:3DA
    eax=19a0cee6 ebx=00000000 ecx=19a10f10 edx=00000084 esi=00000000 edi=9f211284
    eip=757e915f esp=0078f5d4 ebp=0078f67c iopl=0         nv up ei pl zr na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    gdi32full!CommonEnumMetaFile+0x3a0:
    757e915f e89c010000      call    gdi32full!PlayMetaFileRecord (757e9300)
另一种方法是使用Unassemble backwards命令（使用前面堆栈跟踪#05中的返回地址）（见图3）：
    0:000> ub 757e9164
    gdi32full!CommonEnumMetaFile+0x38f:
    757e914e 1485            adc     al,85h
    757e9150 db0f            fisttp  dword ptr [edi]
    757e9152 853de80300ff    test    dword ptr ds:[0FF0003E8h],edi
    757e9158 75cc            jne     gdi32full!CommonEnumMetaFile+0x367 (757e9126)
    757e915a 50              push    eax
    757e915b ff75c4          push    dword ptr [ebp-3Ch]
    757e915e 57              push    edi
    757e915f e89c010000      call    gdi32full!PlayMetaFileRecord (757e9300)
然后使用g-命令从当前故障位置再次返回：
    0:000> g- 757e915f
    Time Travel Position: 2113:3DA
    eax=19a0cee6 ebx=00000000 ecx=19a10f10 edx=00000084 esi=00000000 edi=9f211284
    eip=757e915f esp=0078f5d4 ebp=0078f67c iopl=0         nv up ei pl zr na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246
    gdi32full!CommonEnumMetaFile+0x3a0:
    757e915f e89c010000      call    gdi32full!PlayMetaFileRecord (757e9300)
查看Microsoft的文档，可以发现关于PlayMetaFileRecord函数的如下介绍：
“PlayMetaFileRecord函数能够通过执行该记录中包含的图形设备接口（GDI）函数来播放Windows格式的元文件记录。”
图7：GDI32 PlayMetaFileRecord API文档。
下一步是在进入函数之前，输出并检查参数：
图8：转储PlayMetaFileRecord参数对应的内存内容。
请注意，LPMETARECORD看起来很眼熟，事实上，如果我们使用十六进制编辑器打开crasher的话，我们将看到以下内容：
图9：WMF文件中big-endian格式的LPMETARECORD
下面，让我们来考察StretchDIBits函数：
    0:000> ub 758286ec
    gdi32full!PlayMetaFileRecord+0x3f3d3:
    758286d3 0fbf4316        movsx   eax,word ptr [ebx+16h]
    758286d7 50              push    eax
    758286d8 0fbf4318        movsx   eax,word ptr [ebx+18h]
    758286dc 50              push    eax
    758286dd 0fbf431a        movsx   eax,word ptr [ebx+1Ah]
    758286e1 50              push    eax
    758286e2 ff742444        push    dword ptr [esp+44h]
    758286e6 ff1588d08975    call    dword ptr [gdi32full!_imp__StretchDIBits (7589d088)]
让我们再来看一下StretchDIBits函数：
图10：StretchDIBits函数
该函数需要总共13个参数，让我们具体看一下：
    0:000> g 758286e6
    ModLoad: 73610000 73689000   C:\WINDOWS\system32\uxtheme.dll
    Time Travel Position: 2152:264
    eax=00003030 ebx=19a3af78 ecx=30303030 edx=19a3af94 esi=19a3af94 edi=19a3affa
    eip=758286e6 esp=0078f4b4 ebp=0078f5cc iopl=0         nv up ei pl nz na pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000206
    gdi32full!PlayMetaFileRecord+0x3f3e6:
    758286e6 ff1588d08975    call    dword ptr [gdi32full!_imp__StretchDIBits (7589d088)] ds:002b:7589d088={GDI32!StretchDIBits (76e13c60)}
    And printing again the parameters right before the call:
    0:000> dds esp LD
    0078f4b4  9f211284  dc 19a3af94
    19a3af94  00000066 30303030 30303030 00200000  f...00000000.. .
    19a3afa4  00000003 30303030 30303030 30303030  ....000000000000
    19a3afb4  00000000 30303030 30303030 30303030  ....000000000000
    19a3afc4  30303030 30303030 30303030 30303030  0000000000000000
    19a3afd4  30303030 30303030 30303030 30303030  0000000000000000
    19a3afe4  30303030 30303030 30303030 30303030  0000000000000000
    19a3aff4  30303030 30303030 d0d0d0d0 ????????  00000000....????
    19a3b004  ???????? ???????? ???????? ????????  ????????????????
**小结**
* * *
在本文中，我们为读者详细介绍了Windbg
TTD的功能，以及如何利用该功能确定安全漏洞的根源所在，在下一篇文章中，我们将继续为读者奉献更多精彩内容，敬请期待。