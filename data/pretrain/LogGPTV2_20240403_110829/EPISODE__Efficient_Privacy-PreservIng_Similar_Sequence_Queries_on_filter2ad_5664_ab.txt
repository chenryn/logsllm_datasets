Deoxyribonucleic Acid (DNA) is contained in the cells of each living
individual and encodes genome information. Based on DNA, indi-
viduals develop different phenotype traits — observable differences
between individuals, e.g., hair or eye color. The basic components
that form DNA are called nucleotides. There exist four of them:
Adenine (A), Cytosine (C), Guanine (G), and Thymine (T), which can
be encoded in log2 4 = 2 bits. In our model, however, we require
a dummy character for padding blocks of alleles to the predefined
global block size, which yields ⌈log2 5⌉ = 3 bits. DNA consists of
multiple long sequences called chromosomes, which are built as
sequences of pairs of nucleotides (e.g., "AT CG AA ...").
The human DNA consists of 3.5 billion base pairs from which
only 0.1 % vary among individuals [20]. The variations of single
nucleotides in specific regions (called loci, singular locus) of a chro-
mosome are called alleles. The genes, each allele of which is repre-
sented to some minimal degree in the population (e.g., more than
1 %), are called Single-Nucleotide Polymorphisms (SNPs).
3.2 Similar Sequence Queries (SSQs)
The approach of SSQs is used for finding the sequences that are
most similar to the analyzed query. This approach can be used, for
example, for finding individuals that are genetically very similar
to a patient in order to better analyze the health conditions of the
patient. This leads to more precise medical diagnoses based on the
additional information provided by genetically similar individuals.
A precise SSQ algorithm requires the computation of the Edit
Distance (ED) [30], which measures how different two sequences
are by finding the minimum number of deletions, additions, and
substitutions that are required to transform one string into another.
ED has O(cid:0)n2(cid:1) computation complexity, where n = max(ns , nq), ns
is the length of the sequence, and nq is the length of the query.
There exist other distance metrics for measuring the similarity of
the sequences, but they are generally suboptimal, e.g., Hamming
distance is not a good choice because it compares sequences bit by
bit and thus any additions and deletions in the genome lead to large
errors. To avoid heavy computations of ED, a few approximations
have been developed, e.g., [3, 44]. For more details see Section 2.
This work focuses on the ED approximation of Asharov et al. [3],
since, in contrast to [44], it can handle high-divergence data (the au-
thors of [3] empirically show this for up to 10 % variability between
individual genomes). An example of computing this ED approxi-
mation is given in Figure 1. It works as follows: first, the sequences
in the database are aligned to a public reference genome and split
into blocks of predefined size. Then, the statistical distribution of
the sequences in the database is used to construct a Look-Up Ta-
ble (LUT) containing the most frequently observed block values and
their distances to each other. Afterwards, the value of the block i
in the query is compared to each entry of the i-th row of the LUT
(the comparison is performed only once for one database), and
based on the comparison result pre-computed distances are either
selected as output or set to 0. Here, the sum of all outputs yields
either the correct distance or 0 in the case of an error (this outcome
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand317Figure 1: Example for computation of the Edit Distance approximation of [3]. Here, a Look-Up Table (LUT) for Sequence S1
is precomputed in the clear based on the distribution of values in all sequences S1, S2, and S3 each containing t blocks of size
b=b′=2 alleles (top). In more detail, a LUT contains precomputed distances to all observed block values, e.g., in the third row
block AA in S1 has distances 0 to itself, 1 to TA in S2, and 2 to TT in S3. After the LUT construction, the LUT and the pre-computed
distances for S1 are used for computing the Edit Distance d between query Q and S1 (bottom).
is rare and influences the overall result only very slightly [3]). The
last step is to sum up the distances of all blocks which results in
the approximated distance between the query and the sequence.
After computing the ED to all sequences in the database, they are
used to find the indices of the k most similar sequences.
For managing LUTs in the outsourcing scenario, we store the LUTs
of all data providers and use them in the ED computation of the cor-
responding genome sequences in the respective databases, which is
a very promising approach in terms of efficiency. The efficiency of
this approach grows with N/ψ (the number of sequences N divided
by the number of institutions ψ), and in a real-world scenario we
expect a small to medium number of data providers ψ that con-
tribute a large number of sequences N . We discuss further LUT
management options in Section 4.5.
Family Search from the Similar Sequence Query Protocol. Our SSQ
protocol can also be extended for finding one’s family. Consider a
scenario where a large number of individuals possess their digital
genome sequences. They are willing to contribute their data to
a common database that can be used to perform family search.
For this, they secret-share their genome sequences and compute
distances to a public LUT (this can be prepared by a public authority
and is the same as the reference genome), which are then used
in the SSQ protocol. However, instead of computing k-Nearest
Neighbors (k-NN), we can blind the indices that correspond to a
big distance to the query (greater than some threshold T , e.g., at
most 5 % difference). The result of this protocol is the set of indices
of all similar sequences in the database.
3.3 Secure Multi-Party Computation (SMPC)
SMPC allows parties P1, . . . , Pn to securely compute a function
f (x1, . . . , xn) on their respective inputs without revealing the in-
puts to each other, i.e., one or more parties learn the result of f , but
no intermediate values.
The first approaches to SMPC were proposed in the late 1980s
(see, e.g., [22, 46]). Although SMPC was first believed to be impracti-
cal, with the further progress on SMPC optimization and computer
hardware improvements it is nowadays possible to solve complex
problems using SMPC within seconds or minutes. SMPC can be
conducted considering different adversary models. The two most
common adversary models are passive (honest-but-curious) and
active (malicious) adversaries. Whereas passive adversaries follow
the protocol specification but try to learn as much information
as possible from the information they obtain, active adversaries
can arbitrarily deviate from the protocol. In this work, as in most
previous works in this area [1, 3, 13, 31, 44, 48] — to name just a
few — we concentrate on protocols with security against passive
adversaries that are much more efficient than actively secure pro-
tocols and provide sufficient security for settings where curious
insiders want to learn additional information from the protocol
runs without actively interfering with it. The major difficulty in the
use of SMPC is the need of extensive knowledge of cryptography,
circuit design, and algorithm complexity for constructing efficient
privacy-preserving protocols.
3.3.1 Oblivious Transfer. Oblivious Transfer (OT) is an important
building block of many SMPC protocols. In 1-out-of-2 OT, the
sender has two messages m0 and m1 as input, and the receiver
inputs a choice bit c. As output, the receiver receives the message
AACGATS1TAGCAAS2TTCGATS3tNAT0AA1-0CG0GC2-0AA0TA1TT2LUTwithdistancestoS1ωTTGCATQAACGATS1220d=0+2+2=4Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand318of its choice mc without learning m1−c, and the sender does not
learn c.
Public key-based OT protocols, e.g., [34], achieve thousands of
OTs per second and OT extension allows using mainly symmetric
key primitives resulting in millions of OTs per second [4, 24]. There
also exist other variants of OT, such as Random Oblivious Transfer
(R-OT) [4, 35] and Correlated Oblivious Transfer (C-OT) [4]. In
C-OT, the sender has m as input, and the receiver has b as input.
The outputs of the parties are as follows: the sender receives a
random m0 as output, and the receiver receives m0 + bm as output,
where m = m1 − m0 in Z2ℓ and ℓ is the bit-length of the values.
This variant of OT improves the communication of the protocol
(especially for large ℓ), where instead of κ + 2ℓ bits only κ + ℓ bits
are sent in the C-OT extension, where κ is the symmetric security
parameter, see [4].
3.3.2 ABY Framework. We use the ABY framework [18], which im-
plements state-of-the-art optimizations for Secure Two-Party Com-
putation (STPC), i.e., SMPC with n=2 parties, and is secure against
passive adversaries. It enables privacy-preserving algorithms using
three different STPC protocols called sharings: Arithmetic sharing
(a generalization of the GMW protocol [22] to unsigned integers),
Boolean sharing (the Boolean GMW protocol [22]), and Yao sharing
(Yao’s Garbled Circuits (GCs) [46]). It also enables mixing these
protocols to use particular STPC protocols for the parts of the com-
puted function where they perform best. For notation used in this
paper, please refer to Table 1.
Arithmetic Sharing. Arithmetic (also called Additive) sharing is
performed on integer numbers in a ring Z2ℓ . Values are shared
locally by subtracting random numbers as one-time-pads from
the initial values, and afterwards one of the shares is sent to the
other party. The reconstruction of the shares for the outputs is
also straightforward: the parties exchange the shares and compute
the sums of the single shares in the corresponding ring which
yields the corresponding cleartext values. The main advantage of
Arithmetic sharing over other sharings is that it allows local compu-
tation of addition mod 2ℓ and cheap computation of multiplication
mod 2ℓ using Multiplication Triples (MTs) [8] that can efficiently
be precomputed using OT extension [18]. The drawback of this
sharing is that it does not allow to trivially perform other more
complicated operations. For example, secure comparisons are very
expensive in Arithmetic sharing.
Boolean Sharing. In ABY, Boolean sharing stands for the GMW
protocol [22]. This sharing is represented as a Boolean circuit where
shares represent wires in the circuit. Similarly to Arithmetic shar-
ing, the values are shared by performing the XOR operation with a
random value. Reconstruction can be performed by applying XOR
on both shares (the parties, again, exchange the shares), which
will eliminate the random value and yield the cleartext value. The
Boolean circuit is constructed by using XOR and AND gates (any
computable function can be converted to a Boolean circuit using
XORs and ANDs only). There is, however, a large difference in
efficiency of evaluating these gates. Whereas XOR gates can be
evaluated locally (due to the associative property of XOR), AND
gates require communication during the evaluation. For secure eval-
uation of AND gates in ABY, Beaver’s MTs [8] that are precomputed
using OT extension [4] are utilized. The communication require-
ments of GMW can be further reduced at the cost of slightly higher
computation [19]. Moreover, each AND-layer in the circuit adds an
additional communication round to the protocol. Consequently, we
are interested in shallow circuits for Boolean sharing.
Yao Sharing. Yao’s Garbled Circuits (GCs) [46] are denoted as
Yao sharing in ABY. Yao sharing includes all state-of-the-art en-
hancements, such as point-and-permute [32], free-XOR [29], fixed-
key AES garbling [9], and half-gates [47]. Yao sharing, similar to
Boolean sharing, can be used to securely evaluate a Boolean circuit.
It is split into two phases: an input-independent setup phase and an
input dependent online phase. In the setup phase, the party called
garbler garbles the circuit and sends it to the other party called
evaluator. The parties then proceed to the online phase, where only
the evaluator’s inputs have to be obliviously transferred via pre-
computed OTs [8] and the evaluator can compute the garbled result
locally. For reconstructing the results on the evaluator’s side, the
garbler sends the output keys for the corresponding shares to the
evaluator, and for the garbler’s side, the evaluator sends the output
keys to the garbler. Yao sharing has a constant number of rounds,
i.e., it does not depend on the circuit depth, and therefore generally
is better suited for high-latency networks than Boolean sharing.
On the other hand, Yao sharing requires more computation and
communication than Boolean sharing.
SMPC Protocol Conversion. It is clear from the description of the
aforementioned sharings that the choice of particular sharing is not
trivial even for relatively simple tasks. To solve this problem, ABY
allows to mix the protocols by implementing efficient algorithms
for converting between the three different sharing types. Although
conversions imply some costs, they may result in better overall
performance as shown in [18]. The partitioning can even be done
automatically [12].
1 )(⟨v⟩A
0 +⟨v⟩A
0 ⟨v⟩A
0 ⟨v⟩A
OT-Based Multiplication. We extend the OT-based multiplication
algorithm of [3] for multiplying an additively secret-shared value
⟨v⟩A in Arithmetic sharing by a secret-shared bit ⟨b⟩B in Boolean
sharing. Observe that we want to compute ⟨b⟩B · ⟨v⟩A = (⟨b⟩B
0 +
1 ⟨v⟩A
0 +⟨b⟩B
0 ⟨v⟩A
1 ) = ⟨b⟩B
⟨b⟩B
1 .
1 ⟨v⟩A
Whereas ⟨b⟩B
0 and ⟨b⟩B
1 can be computed locally by the
1 ⟨v⟩A
respective parties, for the computation of ⟨b⟩B
0
interaction is required between P0 and P1. For these two multipli-
cations, we utilize two C-OTs [4], where Pi inputs ⟨b⟩B
i and P1−i
inputs (r, ⟨v⟩A
+ r), where r is a random value, and vice versa.
1−i
P1−i then sets its share to −r. As a result, the parties compute a
valid Arithmetic share ⟨b · v⟩A of value b · v.
0 +⟨b⟩B
1 ⟨v⟩A
1 and ⟨b⟩B
1 +⟨b⟩B
0 ⟨v⟩A
Single Instruction Multiple Data (SIMD) gates. Wrapping of secret-
shared data in container classes is very memory-consuming. More-
over, this adds additional overhead for managing and initialization
of memory to the protocol. As a solution to this problem, SIMD
gates have emerged [39] and are also implemented in ABY. These
gates are constructed as gates for evaluating arrays of secret-shared
values rather than single values. This approach significantly reduces
the RAM requirements and the online run-times of the protocols.
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand319Figure 2: Privacy-preserving Similar Sequence Query system model with three medical institutions I1, I2, and I3 that contribute
their secret-shared genomic data to two Semi-Trusted Third Parties T0 and T1, and a client C who queries the secret-shared
database. The communication between all parties is protected with a secure channel, e.g., TLS. See Section 4.1 for more details.
k-Nearest Neighbors. For finding the k most similar sequences in
the Similar Sequence Query (SSQ) protocol, we utilize ABY’s func-
tionality for computing k-Nearest Neighbors (k-NN) [25], which
improves over the work of Songhori et al. [40] in terms of the circuit
size. This k-NN implementation is by about a factor of 5× more
efficient than the one used in [3], e.g., for a database of size 500 [3]
required 505 825 AND gates for computing the k-NNs, whereas we
require only 92 500 AND gates.
4 OUR PRIVACY-PRESERVING SSQ
PROTOCOL
Here, we describe the system model of our privacy-preserving
protocol for Similar Sequence Queries (SSQs), the protocol itself,
and we analyze its security.
4.1 System Model
The main idea of our protocol is to secret-share the database ag-
gregated from data of multiple data providers between two non-
colluding Semi-Trusted Third Parties (STTPs). We depict our system
model in Figure 2. The communication between all parties is per-
formed over a secure channel (e.g., TLS). Note that our protocol
alternatively can be run directly between a server and a client
with approximately the same efficiency (the outsourcing scenario
is beneficial for data aggregation, but has the same efficiency in the
querying phase). In our protocol, we have the following parties:
• Data providers (e.g., medical institutions) P1, . . . , Pψ that se-
curely contribute their genome sequences to the outsourced
database in a secret-shared form.
• A client C who privately queries the database with a genome
sequence for finding the most similar sequences in the out-
sourced database.
• Two non-colluding Semi-Trusted Third Parties (STTPs) T0
and T1 who obliviously compute the Similar Sequence Query
(SSQ) protocol on the client’s query and outsourced database.
We choose two STTPs because it is the most practical and af-
fordable model in a real-world setting, since each STTP has to be
operated and maintained by different teams, and the servers must
have completely different software stacks, which in total implies
high costs. For running the two STTPs, one must choose two dis-
tinct organizations that have a high motivation to not collude, e.g.,
if they significantly loose in value/reputation if caught cheating. We
can think of the following organizations: (i) health ministry, (ii) re-
search institutes, or (iii) cloud service providers. This outsourcing
model has been widely used in the literature, e.g., in [2, 14, 42].