        "--nocolor",
        "--noheading",
        "--numbers",
        "--column",
        "--smart-case",
        "--silent",
        "--follow",
        "--vimgrep",
    }
  }
}
```
It's a good idea also to have `fzf` fuzzy finder, to do that we need to install the [`telescope-fzf-native`](https://github.com/nvim-telescope/telescope-fzf-native.nvim) plugin. To do that add to your `plugins.lua` config file:
```lua
  use {
    'nvim-telescope/telescope-fzf-native.nvim', 
    run = 'make' 
  }
```
Run `:PackerInstall` and then configure it in your `init.lua`:
```lua
-- You dont need to set any of these options. These are the default ones. Only
-- the loading is important
require('telescope').setup {
  extensions = {
    fzf = {
      fuzzy = true,                    -- false will only do exact matching
      override_generic_sorter = true,  -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    }
  }
}
-- To get fzf loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
require('telescope').load_extension('fzf')
```
It also needs [`fd`](https://github.com/sharkdp/fd#installation) for further features. You should be using it too for your terminal.
NOTE: If you want to [search exact words](https://github.com/nvim-telescope/telescope.nvim/issues/1083) you can start the search with `'` to search for exact matches.
To check that everything is fine run `:checkhealth telescope`.
### [Usage](https://github.com/nvim-telescope/telescope.nvim#usage)
`telescope` has different ways to find files:
* `find_files`: Uses `fd` to find a string in the file names.
* `live_grep`: Uses `rg` to find a string in the file's content.
* `buffers`: Searches strings in the buffer names.
You can configure each of these commands with the next bindings:
```lua
local builtin = require('telescope.builtin')
local key = vim.keymap
key.set('n', 'f', builtin.find_files, {})
key.set('n', 'a', builtin.live_grep, {})
key.set('n', 'b', builtin.buffers, {})
```
By default it searches on all files. You can ignore some of them with:
```lua
require('telescope').setup{
  defaults = {
    -- Default configuration for telescope goes here:
    -- config_key = value,
    file_ignore_patterns = {
      "%.svg",
      "%.bmp",
      "%.jpg",
      "%.jpeg",
      "%.gif",
      "%.png",
    },
  }
}
```
You can also replace some other default `vim` commands like history browsing, spell checker suggestions or searching in the current buffer with:
```lua
key.set('n', '', builtin.command_history, {})
key.set('n', 'z=', builtin.spell_suggest, {})
key.set('n', '/', builtin.current_buffer_fuzzy_find, {})
```
### [Follow symbolic links](https://github.com/nvim-telescope/telescope.nvim/issues/394)
By default symbolic links are not followed either for files or directories, to enable it use
```lua
  require('telescope').setup {
    pickers = {
      find_files = {
        follow = true
      }
    }
  }
```
## [Heading navigation](https://github.com/crispgm/telescope-heading.nvim)
It's a `telescope` plugin to navigate through your markdown headers
### Installation
Install with your favorite package manager:
```lua
use('nvim-telescope/telescope.nvim')
use('crispgm/telescope-heading.nvim')
```
`telescope-heading` supports Tree-sitter for parsing documents and finding headings.
```lua
-- make sure you have already installed treesitter modules
require('nvim-treesitter.configs').setup({
    ensure_installed = {
        -- ..
        'markdown',
        'rst',
        -- ..
    },
})
-- enable treesitter parsing
local telescope = require('telescope')
telescope.setup({
    -- ...
    extensions = {
        heading = {
            treesitter = true,
        },
    },
})
-- `load_extension` must be after `telescope.setup`
telescope.load_extension('heading')
-- Set the key binding
local key = vim.keymap
key.set('n', 'h', ':Telescope heading')
```
## [Treesitter](https://github.com/nvim-treesitter/nvim-treesitter)
`treesitter` it's a neovim parser generator tool and an incremental parsing library. It can build a concrete syntax tree for a source file and efficiently update the syntax tree as the source file is edited. With it you can do nice things like:
* [Highlight code](#highlight-code)
* [Incremental selection of the code](#incremental-selection)
* [Indentation](#indentation)
* [Folding](#folding)
### Installation
Add these lines to your `plugins.lua` file:
```lua
  use {
    'nvim-treesitter/nvim-treesitter',
    run = function()
        local ts_update = require('nvim-treesitter.install').update({ with_sync = true })
        ts_update()
    end,
  }
```
Install it with `:PackerInstall`.
The base configuration is:
```lua
require('nvim-treesitter.configs').setup({
  ensure_installed = {
    'bash',
    'beancount',
    'dockerfile',
    'make',
    'terraform',
    'toml',
    'vue',
    'lua',
    'markdown',
    'python',
    'css',
    'html',
    'javascript',
    'json',
    'yaml',
  },
})
```
Select the languages you want to install from the [available ones](https://github.com/nvim-treesitter/nvim-treesitter#supported-languages), close and reopen the vim window to install them.
To do so you need to run:
```vim
:TSInstall 
```
To update the parsers run
```vim
:TSUpdate
```
### Usage
By default it doesn't enable any feature, you need to enable them yourself.
#### [Highlight code](https://github.com/nvim-treesitter/nvim-treesitter#highlight)
Enable the feature with:
```lua
require('nvim-treesitter.configs').setup({
  highlight = {
    enable = true,
  },
})
```
Improves the default syntax for the supported languages.
#### [Incremental selection](https://github.com/nvim-treesitter/nvim-treesitter#incremental-selection)
It lets you select pieces of your code by the function they serve. For example imagine that we have the next snippet:
```python
def function():
  if bool is True:
    print('this is a Test')
```
And your cursor is in the `T` of the `print` statement. If you were to press the `Enter` key it will enter in visual mode selecting the `Test` word, if you were to press `Enter` key again it will increment the scope of the search, so it will select all the contents of the print statement `'this is a Test'`, if you press `Enter` again it will increase the scope. 
If you went too far, you can use the `Return` key to reduce the scope. For these keybindings to work you need to set:
```lua
require('nvim-treesitter.configs').setup({
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "", -- set to `false` to disable one of the mappings
      node_incremental = "",
      node_decremental = "",
      -- scope_incremental = "grc",
    },
  },
})
```
#### [Indentation](https://github.com/nvim-treesitter/nvim-treesitter#indentation)
```lua
require'nvim-treesitter.configs'.setup {
  indent = {
    enable = true
  }
}
```
#### [Folding](https://github.com/nvim-treesitter/nvim-treesitter#folding)
Tree-sitter based folding
```lua
set.foldmethod = 'expr'
set.foldexpr = 'nvim_treesitter#foldexpr()'
set.foldenable = true                   
set.foldminlines = 3
```
It won't fold code sections that have have less than 3 lines.
If you add files through `telescope` you may see an `E490: No fold found` error when trying to access the folds, [there's an open issue](https://github.com/nvim-telescope/telescope.nvim/issues/559) that tracks this, the workaround for me was to add this snippet in the `telescope` configuration::
```lua
require('telescope').setup {
    defaults = {
        mappings = {
            i = {
                [""] = function()
                    vim.cmd [[:stopinsert]]
                    vim.cmd [[call feedkeys("\")]]
                end
            }
        }
    }
}
```
To save the foldings when you save a file [use the next snippet](https://stackoverflow.com/questions/37552913/vim-how-to-keep-folds-on-save). Sorry but I don't know how to translate that into lua.
```lua
vim.cmd[[
  augroup remember_folds
    autocmd!
    autocmd BufWinLeave * silent! mkview
    autocmd BufWinEnter * silent! loadview
  augroup END
]]
```
## Concealment
Some plugins allow the conceal of some text, for example in orgmode you will only see the text of the description of a link and not the content, making it more pleasant to read. To enable it set in your config:
```lua
-- Conceal links
-- https://github.com/nvim-orgmode/orgmode#links-are-not-concealed
-- Use visual mode to navigate through the hidden text
vim.opt.conceallevel = 2
vim.opt.concealcursor = 'nc'
```
Where:
- `conceallevel`: Determine how text with the "conceal" syntax attribute is shown:
  - `0`: Text is shown normally
  - `1`: Each block of concealed text is replaced with one character. If the syntax item does not have a custom replacement character defined the character defined in 'listchars' is used (default is a space). It is highlighted with the "Conceal" highlight group.
  - `2`: Concealed text is completely hidden unless it has a custom replacement character defined.
  - `3`: Concealed text is completely hidden.
- `concealcursor`: Sets the modes in which text in the cursor line can also be concealed. When the current mode is listed then concealing happens just like in other lines.
  - `n`: Normal mode
  - `v`: Visual mode
  - `i`: Insert mode
  - `c`: Command line editing, for 'incsearch'
  A useful value is `nc`. So long as you are moving around text is concealed, but when starting to insert text or selecting a Visual area the concealed text is displayed, so that you can see what you are doing.
## Git
There are many plugins to work with git in neovim the most interesting ones are:
* [vim-fugitive](https://github.com/tpope/vim-fugitive)
* [neogit](#neogit)
* [lazygit](https://github.com/jesseduffield/lazygit)
* [vgit](https://github.com/tanvirtin/vgit.nvim)
I've been using `vim-fugitive` for some years now and it works very well but is built for `vim`. Now that I'm refurbishing all the neovim configuration I want to try some neovim native plugins.
`neogit` looks interesting as it's a [magit](https://magit.vc/) clone for `neovim`. `lazygit` is the most popular one as it's a command line tool not specific to `neovim`. As such you'd need to launch a terminal inside neovim or use a plugin like [lazygit.nvim](https://github.com/kdheepak/lazygit.nvim). I'm not able to understand how to use `vgit` by looking at their readme, there's not more documentation and there is no videos showing it's usage. It's also the least popular although it [looks active](https://github.com/tanvirtin/vgit.nvim/pulse).
At a first look `lazygit` is too much and `neogit` a little more verbose than `vim-fugitive` but it looks closer to my current workflow. I'm going to try `neogit` then.
### [Neogit](https://github.com/Neogit/neogit)