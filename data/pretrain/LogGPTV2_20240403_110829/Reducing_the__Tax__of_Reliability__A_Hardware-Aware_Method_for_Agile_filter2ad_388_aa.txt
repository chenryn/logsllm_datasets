title:Reducing the "Tax" of Reliability: A Hardware-Aware Method for Agile
Data Persistence in Mobile Devices
author:Meng Wang and
Huixiang Chen and
Tao Li
2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Reducing the ‚ÄúTax‚Äù of Reliability: A Hardware-Aware 
Method for Agile Data Persistence in Mobile Devices  
Meng Wang, Huixiang Chen and Tao Li 
Department of Electrical and Computer Engineering, University of Florida 
PI:EMAIL, PI:EMAIL, PI:EMAIL 
Gainesville, USA 
Abstract‚ÄîNowadays, mobile devices are pervasively used by 
almost  everyone.  The  majority  of  mobile  devices  use  embed-
ded-Multi  Media  Cards  (eMMC)  as  storage.  However,  the 
crash-proof mechanism of existing I/O stack has not fully ex-
ploited  the  features  of  eMMC.  In  some  real  usage  scenarios, 
the  legacy  data  persistence  procedure  may  dramatically  de-
grade performance of the system. In response to this, this pa-
per  exploits  the  hardware  features  of  eMMC  to  improve  the 
efficiency of data persistence while preserving the reliability of 
current mobile systems. We characterize the existing data per-
sistence scheme and observe that the hardware-agnostic design 
generates excessive non-critical data and adds expensive barri-
ers in data persistence paths. We alleviate these overheads by 
leveraging  eMMC  features.  Based  on  evaluations  on  real  sys-
tems,  our  optimizations  achieve  5%-31%  performance  im-
provement across a wide range of mobile apps.  
    Keywords‚Äîmobile  system,  storage,  crash  consistency,  file 
system journaling, I/O performance, eMMC 
I.INTRODUCTION 
    Mobile  devices  such  as  smartphones  and  tablets  are  no 
longer  considered  as  secondary  devices  compared  to  per-
sonal  PCs.  With  more  powerful  processors,  larger  screens 
and  storage  [1],  they  have  become  the  primary  computing 
platforms for a wide variety of applications for many users, 
ranging  from  social  media,  entertainment  to  finance  man-
agement and health care. The evolution of mobile platform 
usage indicates that there will be an increase in the amount 
of critical data stored in those devices.  
    User  data  are  managed  by  the  file  system,  which  uses 
metadata to index users‚Äô data and organize used/spare space 
of storage. However, the integrity of metadata is threatened 
by  system  crashes,  which  is  not  rare  in  the  daily  usage  of 
mobile devices. For example, batteries may be ejected out of 
place  when  a  smartphone  falls  on  the  ground  [2];  system 
self-reboots due to kernel bugs [3]; users forcibly reset their 
frozen  smartphones  by  pressing  the  power  buttons  [4].  In 
these cases, user data will be lost if indexing metadata are 
corrupted  during  a  system  crash,  and  the  file  system  will 
become  inconsistent  if  transactional  update  to  a  group 
metadata  is  interrupted.  Therefore,  a  file  system  without 
metadata protection would devastate users‚Äô digital assets in 
their  smart  devices  and  result  in  negative  experiences  to 
users. 
File  system  journaling  is  a  common  method  to  protect 
metadata  against  system  crashes.  The  dirtied  metadata 
2158-3927/17 $31.00 ¬© 2017 IEEE
DOI 10.1109/DSN.2017.46
73
blocks  are  persisted  in  a  write-ahead  log  (journal  region) 
before  the  system  in-place  updates  the  corresponding 
metadata in the file system region. Even if a system crashes 
when in-place updating the metadata, the corrupted metada-
ta can be recovered by the journaled metadata blocks. Nev-
ertheless,  this  scheme  introduces  significant  overhead  on 
Android I/O stack[5, 6]. 
There  have  been  a  number  of  efforts  to  alleviate  this 
overhead [5, 6, 7, 8, 9, 10]. These studies either deliberately 
tune  specific  applications  (e.g.  SQLite)  and  the  system  to 
reduce the number of fsync operations or exploit the sequen-
tial writes to mitigate the overhead of a single fsync. How-
ever,  these  works  still  rely  on  the  legacy  file  system  jour-
naling when persisting data to storage. 
In this work, we dedicate our effort in mitigating the per-
formance  overhead  of  file  system  journaling.  We  redesign 
the file system journal so that the journaling procedure can 
achieve  optimal  performance  by  exploiting  the  hardware 
features of flash storage. Our study is based on the analysis 
of  Android  I/O  software  stack  atop  an  eMMC  5.0  storage 
hardware. The file system is Ext4, which is equipped with 
journaling scheme JBD2 [11] for metadata protection. This 
is also the default configuration since Android 2.3 in 2010 
[12]. The major contributions of this paper are the following: 
‚Ä¢ We  characterize  the  I/O  activities  of  popular  apps  and 
discover that: (1) Logging metadata blocks in journal re-
gion  usually  contributes  more  than  40%  of  block  write 
traffic. However, 90% of content within a logged block 
remains  unchanged,  which  means  that  the  majority  of 
metadata  in  journal  region  are  clean  and  not  critical  to 
the system reliability. Moreover, this overhead is exac-
erbated  when  the  file  system  journaling  is  frequently 
triggered. (2) Barrier command (flushing storage buffer 
cache) usually spends more than 40% of runtime on syn-
chronization writes. However, the OS has to frequently 
invoke barrier commands to ensure the journaled blocks 
are persisted before any update to metadata blocks.  
‚Ä¢ We explore eMMC hardware features including reliable 
write, forced programming and packed command to re-
duce  the  unnecessary  redundancy  in  journaled  blocks 
and alleviate the cache flush overhead. We prototype our 
design  on  an  Android  mobile  device  and  the  results 
show that the I/O subsystem with our eMMC-aware de-
sign  gains  5%-31%  improvement  in  performance.  Be-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:22:09 UTC from IEEE Xplore.  Restrictions apply. 
 "%#!
 "%#!
 "%#!

 %#!
	 %"!
 $&!


 "#'!
 "#'!
"""""""""""""""""""""#"#""##"#"#
"""""""""""""""""""""#"#""##"#"#
"""""""#""""""""""""""""""""#"##



$'
$%
	
	
	
#%%%
#%%%
#%%%
Figure 1. eMMC Write Procedure 
	
	
	
#%&%
#%&%
#%&%


sides,  the  optimized  system  can  achieve  less  than  10% 
performance  penalty  on  average  compared  to  the  ideal 
case (no file system journal).  What‚Äôs more, the perfor-
mance gain does not compromise the crash-proof attrib-
ute. The optimized system can correctly recover the file 
system in the experiments with randomly generated sys-
tem crashes.  
‚Ä¢ All the features we utilized have been supported by ver-
sion 4.5 of eMMC specification (released in 2011) and 
all following versions. It indicates that our optimizations 
can be adopted by the majority of eMMC-based devices 
in  the  current  market,  as  well  as  future  eMMC  5.1  de-
vices  without  any  modification.  Furthermore,  the  opti-
mized  journaling  schemes  can  be  selectively  ena-
bled/disabled by detecting whether the required features 
are  supported  by  underlying  storage.  Minimum  efforts 
are  required  to  port  our  optimizations  to  other  storage 
hardware.  
The rest of this paper is organized as follows. Section II 
provides  the  overview  of  eMMC  and  the  data  persistence 
mechanism in Android. Section III characterizes I/O activi-
ties of popular apps and analyzes overheads in the data per-
sistence  path.  Sections  IV  and  V  describe  how  to  exploit 
eMMC  features  to  reduce  these  overheads  and  the  imple-
mentations.  Section  VI  evaluates  the  efficiency  and  over-
head of our system. Section VII discusses related work and 
Section VIII concludes the paper. 
II.BACKGROUND 
eMMC is a flash storage that combines raw NAND flash, 
flash controller and firmware in a single BGA package [13, 
14]. It has been used by thousands millions devices and the 
number of eMMC based smart devices will keep rising and 
hit 2 billion in 2018 [15]. 
A. Hardware Features of eMMC 
The eMMC specification states that the eMMC driver in 
the host OS should process a write request by successively 
sending  SET_BLOCK_COUNT 
(CMD23),  WRITE_ 
MULTIPE_BLOCK  (CMD25)  and  data  blocks  to  the 
eMMC devices, as shown in Fig. 1. CMD25 utilizes all 32 
bits  for  addressing  target  blocks.  The  16  least  significant 
bits  of  CMD23  are  used  for  setting  the  number  of  blocks 
that will be programmed in a write request and the 16 most 
significant bits of CMD23 are used to specify write features 
[16], which are described below. 



	

































  
  
  







































	
	












  
  
  






























  
  
  





































	
	





















	
	














Figure 2. Illustration of Reliable Write in eMMC 
 
	



	


	












	





		



Figure 3. Time Diagram of Packed Command 
1) Reliable Write 
Unexpected  power  outage  during  write  operations  may 