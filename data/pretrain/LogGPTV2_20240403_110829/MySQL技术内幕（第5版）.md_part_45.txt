---
## Page 191
涉及其中的小部分。更多相关信息请参考附录C。
换的规则。这里列出了MySQL的所有运算符，但因为MySQL的函数实在是太多，所以这里只
的上下文中时，MySQL会把960821这样的数字转换成日期值1996-08-21'。
(4-2)的计算结果为6。表达式的计算过程可能涉及类型转换。例如，当数字用在需要DATE值
DELETE和UPDATE语句的WHERE子句里、
节里用来计算年龄的那个查询非常相似：
在输出列的列表里，以及 SELECT 语句的WHERE 子句里。例如，下面有一个查询，它与1.4.9.6
运算符）组合在一起，表达式的子项可以用括号进行分组。绝大部分情况下，表达式都是出现
数调用、表列引用，以及标量子查询。这些值可以用不同种类的运算符（如算术运算符或比较
3.5
到排斥其他客户端的目的，而使用表锁定或事务来把代码弄得很复杂。
你总是能获得你刚插入的那个值，而不会获得来自其他客户端插入的值；并且，你不用为了达
LAST_INSERT_ID（）函数可以更容易地完成这件事情。因为计数器的值是客户端专用的，所以
个事务里更新这个表。这两种办法都可以在你使用这个计数器时，阻断其他客户端，但是使月
两
这个计数器，那么这种方法就无法正确地工作。可以通过LOCK TABLE和UNLOCK TABLE 把这
果
易地将其值检索出来。例如，为了初始化或递增网站主页的计数器，然后检索计数器显示结
通过使用LAST_INSERT_ID（expr)函数来生成计数值，你还可以在更新当前计数器后，轻
因为它既可以为一个未曾统计过的页面插入一个新行，也可以更新已有页面的计数值。此外
是区分大小写的。如果你的系统不区分路径名的大小写，则需要使用不区分大小写的排序规则。
数器名，以此保证记数器名的唯一性。name 列的排序规则是区分大小写的，所以路径名的值也
本节将讨论如何在MySQL里编写表达式，还将讨论在表达式计算过程中掌控各种类型转
当MySQL遇到表达式时，它会计算这个表达式，并产生一个结果。例如，表达式（4＊3）DIV
条语句围起来，解决此问题。或者，选用支持事务处理的存储引擎来创建这个表，并且在一
，可以像下面这样做：
每一个选择值都代表着一个表达式，与WHERE子句的内容一样。表达式也可以出现在
表达式包含子项和运算符，并且经过计算可以产生具体值。子项可以包含值，如常数、函
WHERE
FROM president
SELECT
不过，在执行UPDATE语句之后，且在执行 SELECT语句之前，如果有另一个客户端递增了
SELECT value FROM counter WHERE name =index.html;
UPDATE counter SET value = value+1 WHERE name = 'index.html′;
在不使用LAST_INSERT_ID（）函数的情况下，另一种递增已有页面计数器的方法是：
SELECT LAST_INSERT_ID();
INSERT INTO counter (name, value)
TIMESTAMPDIFF(YEAR,birth,death)
CONCAT(last_name,
表达式计算和类型转换
first_name),
、INSERT 语句的VALUE（)子句里等。
3.5表达式计算和类型转换
171
---
## Page 192
预测的。（事实上，应尽量避免使用超过63位的整数，因为正负号也需要占一位。）
如果某个整数运算涉及了很大的值（如超出了64位所能表示的范围），那么得到的结果是不可
字符串转换为数字的情形也是如此，因为字符串总是会被转换为双精度数。需要特别注意的是，
所有运算符，如果某个操作数是近似值，那么整个计算过程会遵循双精度浮点运算规则。对于
个操作数都是整数，且其中有一个是无符号数，那么结果也将是无符号数。对于除DIV以外的
是整数时，对于运算符+、-和*，整个运算过程所使用的都是BIGINT（64位）整数值。如果两
下一节将讨论它们的计算优先级。
3.5.1.1运算符类型
复杂的表达式。
的上下文里，也可以使用这种更为具体的限定形式，以便看起来更加明确：
知道应该使用哪一个数据库，则需要在表名前面加上数据库名进行限定。即使在不会产生歧义
属的那个表时，只需给出该列的名字即可。在下面的两条 SELECT 语句里，由于它们都只用到
内建函数名的后面出现空格，但这又会造成把函数名视为保留字的问题。
见的后果即是报语句出错。不过，通过启用SQL的IGNORE_SPACE 模式，可以让MySQL允许
随其后的左括号之间，不允许出现空格，因为MySQL的解析器可能会错误地解释函数名。
实参之间应该用逗号隔开。在调用内建函数时，它的参数之间允许出现空格。但在函数名和紧
3.5.1编写表达式
172
了一个表，所以尽管这两条语句里的列名完全一样，但这些列引用不会产生歧义：
如表3-16所示，算术运算符包括常见的加法、减法、乘法、除法和取模。当两个操作数都
可以使用各种运算符把表达式的各个子项组合在一起。本节将描述这些运算符的功能，
表达式里可以包含对表列的引用。对于最简单的情形，当可以根据上下文清楚地知道列所
最后，可以根据所有这些类型的值（常量、函数调用、列引用和子查询）组合成各种更加
SELECT * FROM president WHERE birth = (SELECT MAX(birth) FROM president);
如果还不清楚应该使用哪个表，则需要在列名的前面加上正确的表名进行限定。如果无法
表达式可以使用函数调用。有些函数带有实参（即括号里的值），有些则没有。函数的多个
在表达式里，标量子查询可以用于提供单个值。这种子查询必须用括号括起来：
关于限定符的更多信息请参考 2.2节。
SELECT sampdb.student.name FROM sampdb.student;
SELECT
SELECT last_name,
SELECT last_name, first_name FROM president;
表达式可以很简单，甚至允许只为一个常量，如数字和字符串abc'。
WHERE president.last_name = member.last_name;
FROM president INNER JOIN member
member.last_name,
第3章
运算符
数据类型
first_nameFROM member;
member.first_name
a-b
a+b
语法
表3-16算术运算符
减法，即两个操作数之差
加法，即两个操作数之和
含义
常
---
## Page 193
更多关于字符串比较属性的信息请参考3.1.2节。
用于模式匹配的运算符，以及用于测试 NULL值的运算符。其中，运算符是MySQL特有的。
你还可以执行位的左移或右移操作。按位运算所用的值都是BIGINT（64位）整数值。
一位，都是按两个操作数相对应的二进制位，执行逻辑与、逻辑或、
换为0。在MySQL里，必须使用cONCAT（‘abc'，'def')或其他办法来连接字符串：
以会意外地发现：其返回结果是为0。
示的却是逻辑OR运算。如果你在使用下面的表达时，期望它会执行字符串的连接，那么你可
样。需要特别注意运算符II。标准SQL把I规定为字符串的连接运算符，但在MySQL里它表
确定的值。
如果逻辑表达式的值无法确定，则其计算结果为NULL。例如，表达式1 AND NULL 即为一个不
如表3-19所示，比较运算符包括用于测试数字和字符串的相对大小或词法顺序的运算符、
如表3-18所示，按位运算符可以完成二进制位的与、或和异或运算。其中，最终结果的每
如果想让运算符I具有标准SQL的行为，则必须启用SQL的PIPES_AS_CONCAT模式。
之所以会发生这种情况，是因为'abc'和'def·在进行运算时都被转换成了整数，即都会转
CONCAT('abc',def')
'abc'l|'def
MySQL还支持运算符AND、OR和NOT 的替代形式，即&&、II和!，其用法与C语言里的-
如表3-17所示，逻辑运算符用于确定逻辑表达式的结果为真（非0值），还是为假（0值)。
运算符
'abc''def'
>>
R
NOT.
XOR
OR、11
AND、&&
运算符
DIV
运
a>>b
>>B
a^b
alb
a&b
语法
aXORb
a OR b、a 11 b
aANDb、a&&b
语法
aDIVb
a*b
/b
-a
语法
把a按位右移b位
把a按位左移b位
按位异或。若两个操作数的相应位分别为1和0，则结果中的相应位为1
按位或。若两个操作数的相应位有一个为1，则结果中的相应位为1
按位与。若两个操作数的相应位皆为1，则结果中的相应位为1
表3-18按位运算符
表3-17逻辑运算符
逻辑非。若操作数为假，则结果为真
逻辑异或。若有且仅有一个操作数为真，则结果为真
逻辑或。只要有一个操作数为真，则结果为真
逻辑与。若两个操作数同时为真，则结果为真
取模，即相除之后的余数
除
乘法，即两个操作数之和
取反，即操作数的负值
法，
→'abcdef'
3.5表达式计算和类型转换
含义
'abcdef'
即两个操作数之商的整数部分
即两个操作数之商
逻辑异或运算而得到的。
含义
含义
商
积
续表
---
## Page 194
则来进行比较：
作二进制串来进行比较。如果这两个操作数都不是二进制串，那么LIKE 将根据它们的排序规
其中一个操作数为NULL的所有模式匹配都会失败：
匹配所有以'Frank'开头的字符串：
'Frank':
NOT REGEXP。
完成模式匹配，并且不能使用=运算符。要颠倒模式匹配的含义，可以使用运算符NOTLIKE或
vi等UNIX程序所使用的正则表达式很相似）实现的模式匹配。必须使用其中的一种运算符来
IS NOT NULL
IS NULL
NOT REGEXP
REGEXP
NOT LIKE
一种是利用LIKE运算符以及通配符“”（能匹配任意字符序列）和“_”（只能匹配单个
LIKE
NOTBETWEEN
如果其中有一个操作数为二进制串，那么MySQL的LIKE运
这意味着模式
通配符“%”能匹配任意长度的字符序列，其中包括空序列，
BETWEEN
二
=>
'Frankly'LIKE
'Frank' LIKE NULL
'Frank'LIKE 'Frank%
'Frankfurter'LIKE 'Frank%
'Franklin'LIKE 'Frank%'
与LIKE 运算符配合使用的模式，
口LIKE运算符是多字节安全的。REGEXP运算符只能正确地处理单字节字符集，并且不会
口SQL 的LIKE 模式只用于匹配整个字符串。正则表达式 REGEXP可以匹配字符串的任何
这两种类型的模式匹配，除了使用的运算符和模式字符不同之外，还有以下两个重要的差异。
模式匹配允许我们在不指定精确字面值的情况下查找值。MySQL提供了两种类型的模式匹
运算符
部分。
考虑排序规则。
1=
第3章数据类型
莫式"%"能够匹配任何字符串，包括空字符串。但是，'不能匹配NULL。事实上，
Frank%
a IS NOT NULL
P
P
P
a
ab,a !=b
qe
a=b
ISNULL
NOT REGEXP
REGEXPb
NOT LIKE b
LIKEb
NOT BETWEENbAND
BETWEEN bANDC
IN (b1, b2, ...)
>=
K=b
语法
表3-19比较运算符
如果操作数不为NULL值，则结果为真
若操作数为NULL，则结果为真
正则表达式匹配。若
正则表达式匹配。若a匹配b，则结果为真
SQL模式匹配。若a不匹配b，则结果为真
SQL模式匹配。若a匹配b，则结果为真
如果不满足b<=a<=c，则结果为真
如果满足b<=a<=c，则结果为真
若a等于b1、b2、·中的某一个，则结果为真
若a大于b，则结果为真
若a大于或等于b，则结果为真
若a小于或等于b，则结果为真
若a小于b，则结果为真
若两个操作数不等，则结果为真
若两个操作数相等（即使为NULL），则结果为真
若两个操作数相等，