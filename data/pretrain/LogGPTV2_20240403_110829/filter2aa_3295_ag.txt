fore, the site passes this test.
23 http://www.catb.org/jargon/
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
45
As the site expands and additional users become administrators, a method of
checking their accounts for weak passwords may be desired.  This could be an
extra check when the user signs up, or could be off-line password cracking
against the MD5 password hashes that are stored in the database.
RESULT: PASS
3.10  Verify Security of any Client-Side Javascript
For this test, I once against used the WebScarab listing obtained in section 3.1,
test item 001.
3.10.1 
Evidence
The WebScarab listing is shown again below:
This shows a single file on the site that is using client-side scripting.  The script
contained in that file is included below:
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
46
function setFocus()
{
if(!formInUse) {
document.newitem.title.focus();
}
}
The HTML code also has an “onload” trigger to call that function, and several
“onfocus” triggers to set the formInUse variable.  There is no other Javascript on
the page.
3.10.2 
 Findings
The Javascript above only sets the cursor focus to a form field, so that a user can
begin typing in that field immediately, rather than having to click on the field be-
fore typing.  As this is purely an ease-of-use enhancement and unrelated to se-
curity, no further analysis needs to be done.
RESULT: PASS
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
47
4 Audit Report
4.1 Executive Summary
This audit report is a result of an audit of AuditApp, performed by Herschel Gel-
man in April 2004.  As AuditApp is hosted with a web hosting company, this audit
only examined the portions of the application that are under the control of the site
owner.  This includes the code that powers the site and the configuration options
that the web hosting company makes available to the site owner.
All vulnerabilities tested were in the medium risk range; some were on the low
end of medium, and others on the high end of medium.  The audit checklist we
created for the site contained ten items to test, and all ten were successfully
tested.
The site passed nine of the tests, and failed one.  The failed test is item number
004, and was assessed a risk of medium-low.
4.2 Audit Findings
This audit had an unusual subject, as it was a one-person operation.  Some of
the usual requirements that an auditor would be assessing, such as comprehen-
sive security policy and procedures, are not applicable in this case.  However, if
the site grows to the point of requiring additional staff, a new assessment may be
needed to ensure best practices are being followed by all involved.
The findings for each test are detailed below.  More detailed descriptions of the
testing procedures and results are available in sections 2 and 3 of this document.
All but one of these tests were passed; the report on the one failed test is in sec-
tion 4.2.4 below.
4.2.1 Check For Hidden Comments in HTML
This site had only minimal HTML comments, none of which leaked any informa-
tion that could be used by an attacker.  An example of typical comments in use
on this site is below:
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
48
4.2.2 Session Hijacking Via Cookie Manipulation
This site uses session cookies securely, based on PHP’s session management
functions.  In addition, the web hosting company is properly securing session
data on their servers.
4.2.3 SQL Injection
This site is not vulnerable to SQL injection attacks, because of the use of PHP’s
magic_quotes_gpc setting.
However, if that setting were disabled, the site has many pages with vulnerable
code, and SQL injection attacks could easily be carried out.  A sample of vulner-
able code—taken from authenticate.php—is included here:
$auth = $_GET['auth'];
$result = @mysql_query("SELECT * FROM user_auth WHERE
auth='$auth'");
While the site is safe as is, you can greatly improve this code.  Please see the
recommendations in section 4.3.2.1, as well as the findings in section 3.3.2, for
more information
4.2.4 Test for Adequate Safeguards Against Bandwidth Theft
The site failed this test; no safeguards are currently in place to protect against
bandwidth theft.  The risk is that anyone can create web pages on their own site
that link to images stored on AuditApp.  The images could also be used in HTML
e-mail messages, web-based forum postings, etc.  While this is not a problem
itself, if the site receives a large number of visitors, AuditApp’s bandwidth limit
may be exceeded.  That will cause the web hosting company to disable access
to the site until they receive payment for the extra bandwidth usage.
While this is not a very high risk item—there’s no possibility of lost or changed
data, and the likelihood of this happening is low—it still has the possibility of cre-
ating a denial of service against the site.  It is therefore my recommendation that
this be corrected.
4.2.5 Scan for Sample Files or Scripts
The site passes this test.  No sample files or scripts were present on this site.
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
49
4.2.6 Test Backup Procedures
The site passes this test.  The site owner performs automated nightly backups of
the PHP and HTML code on the development server, as well as automated
nightly backups of the database on the production server.  The database back-
ups are manually copied to the development server once a day, on average, ac-
cording to the site owner.
The manual step in there is a concern, but is not a large one, as automating that
process would raise additional security issues.
4.2.7 Unsafe Hidden Form Elements
The site had no unsafe hidden form elements, and therefore passed this test.
However, there were a number of hidden form elements in use to perform func-
tions that could have been coded in better ways.
4.2.8 Ensure Directory Browsing Settings Are Correct
I tested the five subdirectories that exist on the web site, and all either asked for
authentication—for example, to get to the MySQL administration scripts—or re-
fused to generate a directory listing.  This is the expected result, and the site
therefore passed this test.
4.2.9 Attempt to Brute Force Administrative Account
My attempt to crack the password for the administrator’s account via a brute
force attack was unsuccessful.  The empty “Positive Authentication Results” box
on the results screen below shows that no working username/password combi-
nations were found:
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
50
However, as there is only one administrative account at the moment, the site
owner should pay additional attention to this item when more administrative ac-
counts are created. 
4.2.10 
 Verify Security of any Client-Side Javascript
Only one instance of client-side scripting was found in use on this site, as shown
below:
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
51
This script was a simple cursor focus script that has no security implications, and
therefore the site passed this test.
4.3 Audit Recommendations
4.3.1 Highly Recommended Actions
4.3.1.1 Protect Against Bandwidth Theft
4.3.1.1.1 Description
While this is the lowest risk item that I tested for, and it is possible that this would
never be an issue for this web site, I still recommend implementing some form of
protection against bandwidth theft.  As this vulnerability creates the possibility of
a denial of service—whether accidental or intentional—it should be corrected.
4.3.1.1.2 Costs
The cost to correct this is minimal.  I would estimate at most one hour of the site
owner’s time to research the site settings to protect against this, implement it,
and test it.
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
52
It does create the possibility for additional complexity later.  For example, if an
problem arises with some visitors viewing images on the site, the protection
mechanism that was added would be another item that would need to be ana-
lyzed.  However, my personal experience is that this is a very common configu-
ration option that is currently in use on many web sites.  Therefore, this additional
complexity should be minimal, if any.
4.3.1.1.3 Compensating Controls
As the cost to eliminate this risk is so low, no compensating controls are needed.
4.3.2 Lower Priority Recommendations
These recommendations are simply suggestions to improve the potential security
posture of AuditApp, and do not reflect any existing vulnerability in the web site.
4.3.2.1 SQL Injection
As the code is now, the site’s security against SQL injection attacks depends on
PHP’s magic_quotes_gpc setting being enabled.  If this is accidentally disabled,
or if the site owner switches to a different web host that does not have this option
enabled, the site would be extremely vulnerable to injection attacks.
I recommend that the code be strengthened so that it is safe regardless of the
magic_quotes_gpc setting.  It is possible to write a short function that is called at
the beginning of every page that checks the server’s magic_quotes_gpc setting.
If it is enabled, the function does nothing.  If it is disabled, the function escapes
all dangerous characters, doing the job that magic_quotes_gpc would have done
otherwise.  This would allow for guaranteed safety against SQL injection attacks
regardless of PHP’s configuration settings on the site.
4.3.2.2 Hidden form elements
AuditApp has a number of hidden form elements: 11 total, seven of which are
available to the public viewing the site, and four of which are only seen by users
with administrative access.
While all of the publicly accessible items were audited and do not pose a security
risk, I recommend replacing them with session variables that can accomplish the
same job.  There are no security issues here, but that would be a much cleaner
and preferred implementation.
4.3.2.3 Future password safety
The current single administrative account proved to be safe from the brute force
attack I launched against it.  However, as additional administrator-level accounts
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
53
are created on this site, the potential for an attacker to successfully guess or
brute-force a valid login increases.  Therefore, I would recommend incorporating
password checks into the PHP code when the account is created, and/or per-
forming offline password cracking attempts against the password’s MD5 hash
that is stored in the database.  The site owner would thereby ensure that he is
adequately protected against password guessing attacks against any administra-
tive account on AuditApp.
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
54
References
Atkinson, K. (2003).  “Kevin’s word list page.”  
(28 Apr. 2004).
“Brutus: the remote password cracker.”   (24 Apr.
2004).
Curphey, M., Endler, D., Hau, W., Taylor, S., Smith, T., et  al. (2002).  “A guide to
building secure web applications: the open web application security
project.”  Version 1.1.1.   (1
May 2004).
Fredholm, W. (2003).  “Web application security: layers of protection.” SANS
InfoSec Reading Room: Security White Papers.  (24 Apr. 2004).
Harper, M. (2002).  “SQL injection attacks: are you safe?”  Sitepoint.
 (28 Apr. 2004).
Hendrickx, Michael (2004).  “Lilith: web application auditing.”
 (1 May 2004).
Ollmann, Gunter (2003).  “Application assessment questioning.”
 (28 Apr.
2004).
Pisetsky, A. (2002).  “Securing e-commerce web sites.”  SANS InfoSec Reading
Room: Security White Papers.  (24 Apr. 2004).
Rafail, J. (2001).  “Cross-site scripting vulnerabilities.”   (24 Apr. 2004).
Shiarla, M. (2002).  “Cross-sight scripting vulnerabilities [sic].”  SANS InfoSec
Reading Room: Security White Papers.  (24 Apr. 2004).
“SQL injection walkthrough.”  SecuriTeam.   (1 May 2004).
“Web application security archive.”  SecurityFocus.
 (28 Apr. 2004).
© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004,
As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1
55
“Web application security mailing list charter v1.0.”  SecurityFocus.
 (28 Apr. 2004).
“Webscarab.”  The Open Web Application Security Project.
 (1 May 2004).
Last Updated: December 11th, 2011
Upcoming SANS IT Audit Training