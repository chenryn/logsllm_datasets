I have a bit of code that Babel 5 parses but 6 does not:
          listenerPromise = async () => {
            // Wait for the other listeners to throw
            await Promise.resolve();
            expect(errorCount).toBe(2);
            await Promise.resolve();
            return 'success';
          }();
If I put parens around the async function expression (as in `listenerPromise =
(async () => {})();`), then it successfully parses. I haven't looked at the
grammar closely yet... anyone know if my original JS is even valid and Babel 5
was too lenient, or if this is a bug with Babel 6?
Versions of Babel and plugins I'm using:
        "babel-core": "^6.1.2",
        "babel-plugin-syntax-async-functions": "^6.0.14",
        "babel-plugin-syntax-flow": "^6.0.14",
        "babel-plugin-syntax-trailing-function-commas": "^6.0.14",
        "babel-plugin-transform-async-to-generator": "^6.0.14",
        "babel-plugin-transform-es2015-arrow-functions": "^6.0.14",
        "babel-plugin-transform-es2015-classes": "^6.1.2",
        "babel-plugin-transform-es2015-destructuring": "^6.0.18",
        "babel-plugin-transform-es2015-modules-commonjs": "^6.1.3",
        "babel-plugin-transform-es2015-parameters": "^6.0.18",
        "babel-plugin-transform-es2015-shorthand-properties": "^6.0.14",
        "babel-plugin-transform-es2015-spread": "^6.0.14",
        "babel-plugin-transform-flow-strip-types": "^6.0.14",
        "babel-plugin-transform-function-bind": "^6.0.14",
        "babel-plugin-transform-runtime": "^6.1.2",
        "babel-plugin-transform-strict-mode": "^6.1.2",