.
0
2
B.S. v.s. Fast−flux bots
B.S. v.s. Traditional bots
.
0
0
.
0
B.S. v.s. Fast−flux bots
B.S. v.s. Traditional bots
0.4
0.6
False positive rate
0.8
1.0
1
5
10
# samples
15
20
Fig. 9. (a) The relationship between the classiﬁcation accuracy and the number of sam-
ples; (b) the ROC curve of the SVM classiﬁer using 5 probes; and (c) the relationship
between the area under the curve and the number of probes.
diﬃcult to distinguish between benign servers and traditional bots because the
classiﬁcation accuracy is only 70%–80%; however, the accuracy rate increases
when more samples are observed.
Figure 9(b) shows the ROC curves of the two types of classiﬁcation based
on 5 samples. The area under the curve (AUC), which distinguishes between
benign servers and fast-ﬂux bots, is 0.993; hence, the proposed detection scheme
performs almost perfectly in this scenario. The AUC degrades to 0.83 when
we try to classify traditional bots from benign servers, which implies that our
detection scheme can detect traditional bots with a moderate degree of accuracy.
As the number of samples may aﬀect the classiﬁcation performance, we plot the
relationship between the AUC and the number of samples in Fig. 9(c). The graph
shows that the detection performance remains nearly constant regardless of the
number of samples used for fast-ﬂux bot detection (the AUC is always higher
than 0.99). In contrast, the number of samples is more important when we try to
detect traditional bots, as the AUC increases above 0.8 if more than 10 samples
are observed before classiﬁcation is performed.
5.4 Passive Mode
The network delay and document fetch delay can be measured by passive mea-
surements when users are browsing webpages, but an active approach must be
used to measure the processing delay (i.e., by sending HTTP requests with an un-
deﬁned method). Since active measurements incur additional overhead, to keep
our method lightweight whenever possible, we consider that a “passive mode”
would be quite useful when traﬃc overhead is a major concern.
In the passive mode, instead of using all six features, we only use the average
and standard deviations of network delays and document fetch delays in the
supervised classiﬁcation. The classiﬁcation accuracy is plotted in Fig. 10. We
observe that the classiﬁcation between fast-ﬂux bots and benign servers is hardly
aﬀected by the removal of the “active features,” i.e., processing delays and their
standard deviations, except when the number of samples is quite small. We
believe this indicating that document fetch delays already serve as a powerful
indicator for distinguishing the two server categories. On the other hand, the
480
C.-H. Hsu, C.-Y. Huang, and K.-T. Chen
0
.
1
8
.
0
6
0
.
4
.
0
y
c
a
r
u
c
c
A
2
0
.
0
.
0
B.S. v.s. Fast−flux bots
B.S. v.s. Traditional bots
t
e
a
r
e
v
i
t
i
s
o
p
e
u
r
T
0
1
.
8
0
.
6
.
0
4
0
.
2
0
.
0
.
0
B.S. v.s. Fast−flux bots
B.S. v.s. Traditional bots
e
v
r
u
c
r
e
d
n
u
a
e
r
A
0
.
1
8
.
0
6
0
.
4
.
0
2
0
.
0
.
0
B.S. v.s. Fast−flux bots
B.S. v.s. Traditional bots
1
5
10
# samples
15
20
0.0
0.2
0.4
0.6
False positive rate
0.8
1.0
1
5
10
# samples
15
20
Fig. 10. (a) The relationship between the classiﬁcation accuracy and the number of
samples, (b) the ROC curve of the SVM classiﬁer using 5 probes, and (c) the rela-
tionship between the area under the curve and the number of probes in the passive
mode.
classiﬁcation accuracy between benign servers and traditional bots is slightly
aﬀected by the removal of active features, as processing delays play an important
role in distinguishing between the two types of servers. The ROC curves and the
AUCs of diﬀerent numbers of samples shown in Figure 10 also indicate that the
passive mode of our scheme yields accurate detection results, especially when a
fast-ﬂux-bot detection method is required.
6 Discussion
In this section, we discuss several issues that are worth investigating further.
6.1 Content Delivery Network
One concern raised in a previous work on fast-ﬂux bot detection [17] is that
content delivery networks (CDNs) share a similar property with fast-ﬂux botnets;
that is, the nodes in CDNs and fast-ﬂux botnets are associated with multiple IP
addresses rather than a single IP address. This leads to confusion if a fast-ﬂux
botnet detection scheme is based on a number of IP addresses (or autonomous
systems) that are associated with a certain domain name [25,17,12,3]. However,
this is not a problem in our proposed method because it does not count the
number of IP addresses.
6.2 Proxy Server
Although proxy servers also employ the request delegation model, we argue
that the proposed scheme does not confuse fast-ﬂux bots with proxy servers.
The reason is that proxy servers are clearly visible to the end users, and the
users’ clients are aware that they are fetching web documents from a web server
with the help of a proxy server. On the other hand, a fast-ﬂux bot does not
pretend to be a proxy server because the HTTP proxy protocol does not hide
the identity of back-end web servers unless a transparent proxy is used; therefore,
the mothership nodes will be revealed, which is a situation that bot herders strive
Fast-Flux Bot Detection in Real Time
481
to avoid. Furthermore, if a transparent proxy is used, the proposed method will
not be aﬀected because the roles in the request delegation model are diﬀerent.
This is because the suspect servers contacted by users do not delegate requests
to others; instead, the request-delegation operation is performed by a hidden
man-in-the-middle (i.e., a transparent proxy server), which may only reduce
document fetch delays. Therefore, proxy servers along the paths between users
and suspect servers will not be detected as fast-ﬂux bots.
6.3 Deployment
Our scheme can be deployed in a number of approaches. First, because of its
lightweightness, it can run on end-users’ machines, such as personal computers
or even mobile devices. In this case, it can be implemented as a browser add-on
or stand-alone software that monitors users’ web browsing activities and warns
users when they are browsing a website hosted by fast-ﬂux bots.
Second, it may be more convenient if the scheme is deployed at a gateway
router to protect all the users in a local area network. Since the transmission
latency between a gateway router and a host is usually negligible, the delay
metrics measured on the router would be roughly the same as those measured on
users’ computers. Therefore, we can simply monitor all outgoing HTTP requests,
measure the delays, and notify users if the measurements indicate that a certain
HTTP request has been sent to a fast-ﬂux bot. We consider this to be an eﬃcient
way to deploy the proposed detection scheme to protect legitimate users.
6.4 Limitations
Although the proposed detection scheme achieves high accuracy, as shown by
the results in Section 5, it has some limitations. Recall that fast-ﬂux bots are
normally equipped with consumer-level hardware and connect to the Internet
with (relatively) narrower network links. The proposed scheme may fail in the
following cases:
1. A bot herder may compromise powerful servers and incorporate them into
a fast-ﬂux botnet.
2. A benign server may not be equipped with high-level hardware like the
dedicated web servers provided by Internet service providers.
In the ﬁrst case, we believe that bots with consumer-level hardware would still
dominate because high-level and high-connectivity servers are normally well-
maintained and patched; hence, they are less likely to be infected and controlled
by malicious software. If this should happen, we would observe short processing
delays at the suspect server. The second case may occur when web servers are
set up for amateur and casual use. Then, we would observe long and variable
processing delays and network delays when users access webpages via such web
servers. In both cases, as our method relies on all three intrinsic characteristics in
the active mode (or two in the passive mode) rather than a single characteristic, a
compromised server could still be detected using other characteristics, especially
the “long document fetch delay” property.
482
C.-H. Hsu, C.-Y. Huang, and K.-T. Chen
7 Conclusion
We have proposed a novel scheme for detecting whether a web service is hosted
by a fast-ﬂux botnet in real time. Evaluations show that the proposed solution
achieves a high detection rate and low error rates. Unlike previous approaches,
our scheme does not assume that a fast-ﬂux botnet owns a large number of bots
(IP addresses). Thus, even if a botnet only owns a few bots, as long as it adopts
the “request delegation” architecture, the proposed scheme can detect the botnet
without any performance degradation.
In addition to being eﬃcient and robust, the proposed solution is lightweight
in terms of storage and computation costs. Therefore, it can be deployed on
either fully ﬂedged personal computers or resource-constrained devices to provide
Internet users with complete protection from botnet-hosted malicious services.
Acknowledgment
This research was supported in part by National Science Council under the
grant NSC 97-2218-E-019-004-MY2 and by Taiwan Information Security Center
at NTUST (TWISC@NTUST) under the grant NSC 99-2219-E-011-004.
References
1. Alexa: Alexa the web information company, http://www.alexa.com
2. ATLAS: Arbor networks, inc., http://atlas.arbor.net/
3. Caglayan, A., Toothaker, M., Drapeau, D., Burke, D., Eaton, G.: Real-time detec-
tion of fast ﬂux service networks. In: Proceedings of the Cybersecurity Applications
& Technology Conference for Homeland Security, pp. 285–292 (2009)
4. Chang, C., Lin, C.: Libsvm: a library for support vector machines (2001)
5. Click Forensics, I.: Botnets accounted for 42.6 percent of all click fraud in Q3 2009
(2009), http://www-staging.clickforensics.com/newsroom/press-releases/
146-botnets-accounted.html
6. dnsbl.abuse.ch: abuse.ch fastﬂux tracker
(2010), http://dnsbl.abuse.ch/
fastfluxtracker.php
7. FBI: Over 1 million potential victims of botnet cyber crime (2007), http://www.
fbi.gov/pressrel/pressrel07/botnet061307.htm
8. Gartner: Gartner survey shows phishing attacks escalated in 2007; more than
$3 billion lost to these attacks (2007), http://www.gartner.com/it/page.jsp?
id=565125
9. Gu, G., Perdisci, R., Zhang, J., Lee, W.: BotMiner: Clustering analysis of network
traﬃc for protocol-and structure-independent botnet detection. In: Proceedings of
the 17th USENIX Security Symposium (2008)
10. Gu, G., Porras, P., Yegneswaran, V., Fong, M., Lee, W.: BotHunter: Detecting
malware infection through IDS-driven dialog correlation. In: Proceedings of the
16th USENIX Security Symposium, pp. 167–182 (2007)
11. Gu, G., Zhang, J., Lee, W.: BotSniﬀer: Detecting botnet command and control
channels in network traﬃc. In: Proceedings of the 15th Annual Network and Dis-
tributed System Security Symposium (2008)
Fast-Flux Bot Detection in Real Time
483
12. Holz, T., Gorecki, C., Rieck, K., Freiling, F.: Measuring and detecting fast-ﬂux
service networks. In: Proceedings of the Network & Distributed System Security
Symposium (2008)
13. Ianelli, N., Hackworth, A.: Botnets as a vehicle for online crime. CERT Coordina-
tion Center (2005)
14. McGrath, D., Kalafut, A., Gupta, M.: Phishing infrastructure ﬂuxes all the way.
IEEE Security & Privacy, 21–28 (2009)
15. Moore, T., Clayton, R.: Examining the impact of website take-down on phish-
ing. In: Proceedings of the Anti-Phishing Working Groups 2nd Annual eCrime
Researchers Summit (2007)
16. Namestnikov, Y.: The economics of Botnets (2009)
17. Nazario, J., Holz, T.: As the net churns: Fast-ﬂux botnet observations. In: Inter-
national Conference on Malicious and Unwanted Software, MALWARE (2008)
18. Passerini, E., Paleari, R., Martignoni, L., Bruschi, D.: FluxOR: detecting and mon-
itoring fast-ﬂux service networks. In: Detection of Intrusions and Malware, and
Vulnerability Assessment, pp. 186–206 (2008)
19. PhishTank, http://www.phishtank.com
20. Shadowserver, http://www.shadowserver.org
21. Spamhaus, http://www.spamhaus.org
22. The Honeynet Project: Know your enemy: Fast-ﬂux service networks (2007)
23. The Honeynet Project: Know your enemy: Tracking botnets (2008)
24. TRACELabs, M.: Marshal8e6 security threats: Email and web threats (2009)
25. Zhou, C., Leckie, C., Karunasekera, S., Peng, T.: A self-healing, self-protecting
collaborative intrusion detection architecture to trace-back fast-ﬂux phishing do-
mains. In: Proceedings of the 2nd IEEE Workshop on Autonomic Communication
and Network Management (2008)
A Client-Based and Server-Enhanced Defense 
Mechanism for Cross-Site Request Forgery* 
Luyi Xing, Yuqing Zhang**, and Shenlong Chen 
National Computer Network Intrusion Protection Center, GUCAS, Beijing 100049, China 
Tel.: +86-10-88256218; Fax: +86-10-88256218 
PI:EMAIL 
State Key Laboratory of Information Security, GUCAS, Beijing 100049, China 
A  common-sense  CSRF  attack  involves  more  than  one  domain.  In  this  paper,  we’ll 
cover  both  cross-domain  and  same-domain  CSRF  which  overlaps  with  Cross-Site 
Scripting (XSS). If a XSS instructs victims to send requests to the same domain, it is 
also  a  CSRF—same-domain  CSRF.  Such  sort  of  XSS-CSRF  exists  extensively  and 
even high profile sites cannot always avoid such vulnerabilities.  
There  exist  mainly  3  defenses:  Referer  Header  checking,  secret  validation  token 