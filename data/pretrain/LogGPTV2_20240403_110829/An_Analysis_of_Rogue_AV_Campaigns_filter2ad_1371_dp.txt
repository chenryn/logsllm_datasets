# Fast-Flux Bot Detection in Real Time

## 4. Experimental Results and Analysis

### 4.1 Classification Performance

**Figure 9:**
- **(a)** The relationship between classification accuracy and the number of samples.
- **(b)** The ROC curve of the SVM classifier using 5 probes.
- **(c)** The relationship between the area under the curve (AUC) and the number of probes.

**Observations:**
- Distinguishing between benign servers (B.S.) and traditional bots is challenging, with a classification accuracy of only 70%–80%. However, this accuracy improves as the number of observed samples increases.
- **Figure 9(b)** shows the ROC curves for two types of classification based on 5 samples. The AUC for distinguishing between benign servers and fast-flux bots is 0.993, indicating near-perfect performance. For traditional bots, the AUC drops to 0.83, suggesting moderate detection accuracy.
- **Figure 9(c)** illustrates that the detection performance for fast-flux bots remains stable, with an AUC consistently above 0.99, regardless of the number of samples. In contrast, the AUC for traditional bots improves significantly when more than 10 samples are used.

### 4.2 Passive Mode

In the passive mode, we measure network delay and document fetch delay through passive observations, while processing delays require active measurements. To minimize overhead, we use only the average and standard deviations of network and document fetch delays in the supervised classification.

**Figure 10:**
- **(a)** The relationship between classification accuracy and the number of samples.
- **(b)** The ROC curve of the SVM classifier using 5 probes.
- **(c)** The relationship between the AUC and the number of probes in the passive mode.

**Observations:**
- The classification accuracy for fast-flux bots and benign servers is minimally affected by the removal of active features, especially when the number of samples is not very small. This suggests that document fetch delays are a strong indicator for this distinction.
- The classification accuracy for traditional bots and benign servers is slightly impacted by the removal of processing delays, which play a crucial role in differentiating these server types.
- The ROC curves and AUCs in **Figure 10** indicate that the passive mode of our scheme still provides accurate detection results, particularly for fast-flux bot detection.

## 5. Discussion

### 5.1 Content Delivery Network (CDN)

Previous work on fast-flux bot detection [17] has raised concerns about CDNs, which, like fast-flux botnets, use multiple IP addresses. This can lead to confusion if detection is based on the number of IP addresses. However, our method does not rely on counting IP addresses, thus avoiding this issue.

### 5.2 Proxy Server

Proxy servers, although they use a request delegation model, do not pose a problem for our scheme. Proxy servers are visible to end users, and clients are aware of their role. Fast-flux bots, on the other hand, do not masquerade as proxy servers, as this would reveal the mothership nodes. Even if a transparent proxy is used, our method remains unaffected because the roles in the request delegation model differ.

### 5.3 Deployment

Our scheme can be deployed in several ways:
- **End-User Machines:** It can run on personal computers or mobile devices as a browser add-on or standalone software, monitoring web browsing activities and alerting users to fast-flux bot-hosted websites.
- **Gateway Routers:** Deploying the scheme at a gateway router can protect all users in a local area network. Since the transmission latency between the router and hosts is negligible, delay metrics measured on the router are similar to those on user machines. This deployment is efficient for protecting legitimate users.

### 5.4 Limitations

Despite high accuracy, our scheme has some limitations:
- **Powerful Servers:** If bot herders compromise powerful servers, the proposed scheme may fail due to short processing delays. However, such servers are typically well-maintained and less likely to be infected.
- **Low-Resource Benign Servers:** Benign servers with low-level hardware may exhibit long and variable delays, potentially leading to misclassification. Our method, however, relies on multiple characteristics, making it robust against such scenarios.

## 6. Conclusion

We have proposed a novel, real-time scheme for detecting whether a web service is hosted by a fast-flux botnet. Evaluations show high detection rates and low error rates. Unlike previous approaches, our scheme does not assume a large number of bots, making it effective even for smaller botnets. The solution is efficient, robust, and lightweight, suitable for deployment on both full-fledged and resource-constrained devices.

## Acknowledgments

This research was supported in part by the National Science Council under grant NSC 97-2218-E-019-004-MY2 and by the Taiwan Information Security Center at NTUST (TWISC@NTUST) under grant NSC 99-2219-E-011-004.

## References

1. Alexa: Alexa the web information company, <http://www.alexa.com>
2. ATLAS: Arbor networks, inc., <http://atlas.arbor.net/>
3. Caglayan, A., Toothaker, M., Drapeau, D., Burke, D., Eaton, G.: Real-time detection of fast flux service networks. In: Proceedings of the Cybersecurity Applications & Technology Conference for Homeland Security, pp. 285–292 (2009)
4. Chang, C., Lin, C.: Libsvm: a library for support vector machines (2001)
5. Click Forensics, I.: Botnets accounted for 42.6 percent of all click fraud in Q3 2009 (2009), <http://www-staging.clickforensics.com/newsroom/press-releases/146-botnets-accounted.html>
6. dnsbl.abuse.ch: abuse.ch fastflux tracker (2010), <http://dnsbl.abuse.ch/fastfluxtracker.php>
7. FBI: Over 1 million potential victims of botnet cyber crime (2007), <http://www.fbi.gov/pressrel/pressrel07/botnet061307.htm>
8. Gartner: Gartner survey shows phishing attacks escalated in 2007; more than $3 billion lost to these attacks (2007), <http://www.gartner.com/it/page.jsp?id=565125>
9. Gu, G., Perdisci, R., Zhang, J., Lee, W.: BotMiner: Clustering analysis of network traffic for protocol-and structure-independent botnet detection. In: Proceedings of the 17th USENIX Security Symposium (2008)
10. Gu, G., Porras, P., Yegneswaran, V., Fong, M., Lee, W.: BotHunter: Detecting malware infection through IDS-driven dialog correlation. In: Proceedings of the 16th USENIX Security Symposium, pp. 167–182 (2007)
11. Gu, G., Zhang, J., Lee, W.: BotSniffer: Detecting botnet command and control channels in network traffic. In: Proceedings of the 15th Annual Network and Distributed System Security Symposium (2008)
12. Holz, T., Gorecki, C., Rieck, K., Freiling, F.: Measuring and detecting fast-flux service networks. In: Proceedings of the Network & Distributed System Security Symposium (2008)
13. Ianelli, N., Hackworth, A.: Botnets as a vehicle for online crime. CERT Coordination Center (2005)
14. McGrath, D., Kalafut, A., Gupta, M.: Phishing infrastructure fluxes all the way. IEEE Security & Privacy, 21–28 (2009)
15. Moore, T., Clayton, R.: Examining the impact of website take-down on phishing. In: Proceedings of the Anti-Phishing Working Groups 2nd Annual eCrime Researchers Summit (2007)
16. Namestnikov, Y.: The economics of Botnets (2009)
17. Nazario, J., Holz, T.: As the net churns: Fast-flux botnet observations. In: International Conference on Malicious and Unwanted Software, MALWARE (2008)
18. Passerini, E., Paleari, R., Martignoni, L., Bruschi, D.: FluxOR: detecting and monitoring fast-flux service networks. In: Detection of Intrusions and Malware, and Vulnerability Assessment, pp. 186–206 (2008)
19. PhishTank, <http://www.phishtank.com>
20. Shadowserver, <http://www.shadowserver.org>
21. Spamhaus, <http://www.spamhaus.org>
22. The Honeynet Project: Know your enemy: Fast-flux service networks (2007)
23. The Honeynet Project: Know your enemy: Tracking botnets (2008)
24. TRACELabs, M.: Marshal8e6 security threats: Email and web threats (2009)
25. Zhou, C., Leckie, C., Karunasekera, S., Peng, T.: A self-healing, self-protecting collaborative intrusion detection architecture to trace-back fast-flux phishing domains. In: Proceedings of the 2nd IEEE Workshop on Autonomic Communication and Network Management (2008)

---

# A Client-Based and Server-Enhanced Defense Mechanism for Cross-Site Request Forgery (CSRF)

**Authors:**
- Luyi Xing
- Yuqing Zhang
- Shenlong Chen

**Affiliations:**
- National Computer Network Intrusion Protection Center, GUCAS, Beijing 100049, China
- State Key Laboratory of Information Security, GUCAS, Beijing 100049, China

**Contact:**
- Tel.: +86-10-88256218
- Fax: +86-10-88256218
- Email: [Your Email]

**Abstract:**
Cross-Site Request Forgery (CSRF) attacks often involve interactions across multiple domains. In this paper, we address both cross-domain and same-domain CSRF, the latter of which overlaps with Cross-Site Scripting (XSS). If an XSS attack instructs victims to send requests to the same domain, it is also a CSRF—specifically, a same-domain CSRF. Such XSS-CSRF vulnerabilities are widespread, even affecting high-profile sites.

**Defenses:**
There are three main defenses against CSRF:
1. **Referer Header Checking:** This method checks the Referer header in HTTP requests to ensure it matches the expected origin.
2. **Secret Validation Token:** This involves embedding a unique, unpredictable token in forms and URLs, which must be included in any valid request.
3. **Double-Submit Cookie Pattern:** This method requires the client to include a value in a cookie and a hidden form field, ensuring that the values match before processing the request.

**Conclusion:**
We propose a client-based and server-enhanced defense mechanism to mitigate CSRF attacks. This approach leverages both client-side and server-side techniques to provide comprehensive protection, ensuring that even high-profile sites can avoid such vulnerabilities.