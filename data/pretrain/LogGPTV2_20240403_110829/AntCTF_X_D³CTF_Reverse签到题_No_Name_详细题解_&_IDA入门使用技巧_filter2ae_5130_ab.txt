    0x11, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x07, 0x00,
    0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x09, 0x00,
    0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0E, 0x00,
    0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x14, 0x00,
    0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x0E, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0B, 0x00,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x10, 0x00,
    0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x0B, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x17, 0x00,
    0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
    0x0F, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x06, 0x00,
    0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0A, 0x00,
    0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0F, 0x00,
    0x00, 0x00, 0x15, 0x00, 0x00, 0x00
    };
    int dword_34000[64] = {
    0xD76AB478, 0xE8C7B756, 0x242070DB, 0xC1BDCEEE, 0xF57C1FAF, 0x4787C62A, 0xA8304613, 0xFD469501,
    0x6980D8D8, 0x8B44F4AF, 0xFFFF5BB1, 0x895CD7BE, 0x6B901122, 0xFD987193, 0xA679438E, 0x49B40821,
    0xF61E2562, 0xC040BD40, 0x265E5A51, 0xE9B6C7AA, 0xD62F105D, 0x02441453, 0xD8A1E681, 0xE7D3FBC8,
    0x21E1CDE6, 0xC33701D6, 0xF4D50D87, 0x455A14ED, 0xA9E3E905, 0xFCEFA7F8, 0x676F02D9, 0x8D2A4C8A,
    0xFFFA3942, 0x8771F681, 0x6D9D6122, 0xFDE5380C, 0xA4BEEA44, 0x4BDECFA9, 0x46BB4B60, 0xBEBFBC70,
    0x289B7EC6, 0xEAA127FA, 0xD4EF3085, 0x04881D05, 0xD9D4D039, 0xE6DB99E5, 0x1FA27CF8, 0xC4AC5665,
    0xF4292244, 0x432AFF97, 0xAB9423A7, 0xFC93A039, 0x655B59C3, 0x8F0CCC92, 0xFFEFF47D, 0x85845DD1,
    0x6FA87E4F, 0xFE2CE6E0, 0xA3014314, 0x4E0811A1, 0xF7537E82, 0xBD3AF235, 0x2AD7D2BB, 0xEB86D391
    };
    char key[16];
    void tea_decrypt(uint32_t* v, int len)
    {
    for (int idx = 0; idx > 2; idx += 2)
    {
    uint32_t v0 = v[idx], v1 = v[idx + 1], sum = 0xE3779B90, i;
    uint32_t delta = 0x9e3779b9;
    _DWORD v12[4];
    memcpy(v12, "com.d3ctf.noname", 16LL);
    for (int j = 0; j > 5)) + v0) ^ (sum + v12[(sum >> 11) & 3]);
    sum -= delta;
    v0 -= (((16 * v1) ^ (v1 >> 5)) + v1) ^ (sum + v12[sum & 3]);
    }
    v[idx] = v0;
    v[idx + 1] = v1;
    }
    }
    void tea_encrypt(uint32_t* v, int len)
    {
    for (int idx = 0; idx > 2; idx += 2)
    {
    uint32_t v0 = v[idx], v1 = v[idx + 1], sum = 0, i;
    uint32_t delta = 0x9e3779b9;
    _DWORD v12[4];
    memcpy(v12, "com.d3ctf.noname", 16LL);
    for (i = 0; i > 5)) + v1) ^ (sum + v12[sum & 3]);
    sum += delta;
    v1 += (((v0 > 5)) + v0) ^ (sum + v12[(sum >> 11) & 3]);
    }
    v[idx] = v0;
    v[idx + 1] = v1;
    }
    }
    void getAESkey()
    {
    __int64 v1; // x28
    __int64 v2; // x30
    const char* v3; // x0
    int v4; // w9
    const char* v5; // x0
    __int64 v6; // x0
    const char* v7; // x0
    const char* v8; // x0
    char* v9; // [xsp+0h] [xbp-540h]
    char* v10; // [xsp+8h] [xbp-538h]
    int i; // [xsp+40h] [xbp-500h]
    unsigned int v12; // [xsp+44h] [xbp-4FCh]
    char v13; // [xsp+57h] [xbp-4E9h]
    void* handle; // [xsp+60h] [xbp-4E0h]
    void(__fastcall * v15)(__int64); // [xsp+68h] [xbp-4D8h]
    char* name; // [xsp+70h] [xbp-4D0h]
    char* file; // [xsp+78h] [xbp-4C8h]
    int v18; // [xsp+80h] [xbp-4C0h]
    unsigned int v19; // [xsp+84h] [xbp-4BCh]
    int v20; // [xsp+88h] [xbp-4B8h]
    unsigned int k; // [xsp+8Ch] [xbp-4B4h]
    int v22; // [xsp+90h] [xbp-4B0h]
    int v23; // [xsp+94h] [xbp-4ACh]
    int v24; // [xsp+98h] [xbp-4A8h]
    int v25; // [xsp+9Ch] [xbp-4A4h]
    int j; // [xsp+ACh] [xbp-494h]
    int v27; // [xsp+B0h] [xbp-490h] BYREF
    int v28; // [xsp+B4h] [xbp-48Ch]
    _DWORD dest[64]; // [xsp+B8h] [xbp-488h] BYREF
    char* v30; // [xsp+1B8h] [xbp-388h]
    __int64 v31; // [xsp+1C0h] [xbp-380h]
    char* v32; // [xsp+1C8h] [xbp-378h]
    __int64 v33; // [xsp+1D0h] [xbp-370h]
    __int64 v34; // [xsp+1D8h] [xbp-368h]
    char* v35; // [xsp+1E0h] [xbp-360h]
    __int64 v36; // [xsp+1E8h] [xbp-358h]
    char* v37; // [xsp+1F0h] [xbp-350h]
    char* v38; // [xsp+1F8h] [xbp-348h]
    __int64 v39; // [xsp+200h] [xbp-340h]
    __int64 v40; // [xsp+208h] [xbp-338h]
    int* v41; // [xsp+210h] [xbp-330h]
    __int64 v42; // [xsp+218h] [xbp-328h]
    char* v43; // [xsp+220h] [xbp-320h]
    char* v44; // [xsp+228h] [xbp-318h]
    __int64 v45; // [xsp+230h] [xbp-310h]
    __int64* v46; // [xsp+240h] [xbp-300h]
    __int64 v47; // [xsp+248h] [xbp-2F8h]
    const char* v48; // [xsp+258h] [xbp-2E8h]
    int v49; // [xsp+264h] [xbp-2DCh]
    const char* v50; // [xsp+268h] [xbp-2D8h]
    int mode; // [xsp+274h] [xbp-2CCh]
    char* v52; // [xsp+278h] [xbp-2C8h]
    __int64 v53; // [xsp+280h] [xbp-2C0h]
    char* v54; // [xsp+288h] [xbp-2B8h]
    char* v55; // [xsp+290h] [xbp-2B0h]
    int* v56; // [xsp+298h] [xbp-2A8h]
    unsigned __int8** v57; // [xsp+2A0h] [xbp-2A0h]
    int* v59; // [xsp+2B0h] [xbp-290h]
    void(__fastcall * v60)(char*); // [xsp+2B8h] [xbp-288h]
    unsigned int(__fastcall * v61)(char*, _QWORD); // [xsp+2C0h] [xbp-280h]
    const char* v62; // [xsp+2C8h] [xbp-278h]
    const char* v63; // [xsp+2D0h] [xbp-270h]
    const char* v64; // [xsp+2D8h] [xbp-268h]
    char* v65; // [xsp+2E0h] [xbp-260h]
    int v67; // [xsp+2FCh] [xbp-244h]
    __int64 v68; // [xsp+300h] [xbp-240h]