1
q
q(cid:3)
pi[n]
i=1
6
where cn represents the n− th component of the centroid and
q is the total number of behavior proﬁles in cluster i.
The cluster chosen as the closest to pnew is then responsible
for its rejection or acceptance to the network. The NAC
enforcer conducts a voting process among the proﬁles of the
members of the closest cluster, where members vote for or
against acceptance based on their thresholds calculated during
the bootstrap phase (Figure 1(c)). The outcome of the voting
process is decided either by a simple majority or a weighted
majority. In simple majority, all votes are weighted equally
and access is granted to the newcomer when at least 50% of
the members agree on a decision. In short,
v =
1
q
(cid:3)
vi
i=1..q
vi = 0 if d(pi, pnew) > ti
vi = 1 if d(pi, pnew) ≤ ti
(7)
(8)
(9)
where q is the number of members of the closest cluster and
ti is the threshold of proﬁle pi as calculated during bootstrap.
If the ﬁnal vote v exceeds 50% i.e., v ≥ 0.5, the newcomer
is accepted into the network. In weighted majority, the vote
of a proﬁle is weighted based on its distance to the proﬁle of
the newcomer. In other words, the weight of the vote of the
cluster member farthest away from the newcomer’s proﬁle is
set to 0, whereas the weight of the vote of the closest proﬁle
to the newcomer is set to 1. All other weights are linearly
distributed among the remaining members of the cluster. The
weighted vote wi for device i is computed as follows,
wi = dmax − di
dmax − dmin
× vi
q
where dmin is the distance of the closest proﬁle to the
newcomer, dmax is the distance of the farthest proﬁle to the
newcomer and di is the distance of proﬁle i to the newcomer.
The ﬁnal vote is computed as w = 1
i=1..q wi.
(cid:4)
Once a newcomer is accepted into the network, its proﬁle
is saved as a member of its closest cluster. Newly accepted
devices are given access to resources but are banned from
participating in the access control mechanism. This prevents
temporal members of the network from modifying the access
control policies. As a result, only the initial members are
responsible for deﬁning the network access control policies.
In order for a newcomer to be able to participate in the access
control mechanism, the clustering and bootstrap would have
to be recomputed with the newcomer as an initial member
of the network. If a newcomer is rejected during the access
control phase, it can retry to gain access up to three times.
After that, further requests are ignored in order to avoid brute
force attempts to gain access or DoS attacks attempting to
collapse the NAC enforcer with requests.
III. INCREMENTAL-LEARNING ALGORITHM
Over time, the initial members of the network will com-
pute new behavior proﬁles. As a result, the access control
mechanism must be able to automatically update its policies
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:28 UTC from IEEE Xplore.  Restrictions apply. 
wait for new profile p_new
access control 
no
store p_new in buffer
no
number profiles in buffer > avg
yes
d_new < d_max
no
ATTACK  ALERT
decision boundary
yes
bootstrap
candidate cluster
c4
d_new < d_max?
C
c1
cluster1
c3
cluster3
c2
cluster2
yes
Create new cluster
of behavior
Fig. 3.
Identiﬁcation of the nature of a candidate cluster.
Fig. 2. Basic Scheme of the Incremental-Learning Algorithm.
accordingly. To successfully adapt
the
mechanism needs to differentiate between normal changes
in behavior (concept drift) and attacks launched by hosts
attempting to manipulate the access control by lying about
their new proﬁles.
to proﬁle changes,
In order to cope with attacks while allowing for concept
drift, we present an incremental-learning algorithm (Figure 2)
that arises from an approach ﬁrst introduced by Spinosa et al.
([8]). Every time an initial member computes a new proﬁle, it
communicates it to the NAC enforcer. After receiving the new
proﬁle, the NAC enforcer executes the incremental-learning
algorithm. The algorithm initially performs the access control
phase to determine whether the new proﬁle is accepted by
one of the clusters of behavior within the network. In case of
acceptance, the initial member has simply changed from one
accepted behavior to another. As a result, the NAC enforcer
updates the cluster members and executes the bootstrap phase
to recompute the thresholds.
If the new proﬁle fails to be accepted by one of the clusters
of behavior, the algorithm is faced with two alternatives. The
new proﬁle might constitute a new behavior (concept drift) or
alternatively it may represent an attack coming from a host
that is lying about its own proﬁle. In order to differentiate
between these alternatives, the algorithm keeps a buffer of
proﬁles that have failed to be classiﬁed into one of the clusters
of behavior. Once the number of different proﬁles in this buffer
reaches the average number of members among the clusters of
behavior avg, the algorithm attempts to identify the nature of
this candidate cluster. The need to have a critical number of
proﬁles in the buffer is justiﬁed because in our approach only
clusters (rather than single behavior proﬁles) deﬁne behaviors.
For completeness, we note that devices with proﬁles in the
buffer must wait until the nature of their new behavior proﬁle
is determined.
In order to identify the nature of the candidate cluster in
the buffer, we rely on the existing clusters of behavior. The
union of the boundaries of all clusters of behavior in the
distribution deﬁnes a decision boundary between concept drift
and attack (see Figure 3). New candidate clusters that are
within the decision boundary are interpreted as concept drift
from existing clusters of behavior whereas candidate clusters
outside the decision boundary are considered attacks.
In practical terms, the algorithm ﬁrst computes the centroid
of each cluster of behavior ci (see Figure 3). Then, a global
centroid C is computed as the average of all centroids ci.
Next, the algorithm calculates the maximum distance dmax
from each cluster’s centroid ci
to the global centroid C.
This distance represents the decision boundary for the cluster
distribution. The algorithm then computes the centroid of the
candidate cluster in the buffer cnew, and estimates its distance
dnew to the global centroid C. If dnew is smaller than dmax,
the candidate cluster is accepted as a new behavior or concept
drift. Otherwise, if dnew is larger than dmax, the candidate
cluster is deemed anomalous and an attack alert is raised.
In the case that a new proﬁle is generated by a device that is
not an initial member of the network, the algorithm performs
the access control phase. If none of the clusters of behavior
accept the new proﬁle, the device is placed in quarantine to
understand the origin of its anomalous behavior. In general,
devices that are not initial members of the network cannot
create new clusters of behavior to modify the access control
policies.
As presented, the algorithm may only handle the identiﬁ-
cation of one candidate cluster at a time. One can think of
a situation where initial members generate multiple candidate
clusters. In such a case, the algorithm can be expanded by
ﬁrst clustering the proﬁles in the buffer using the K-means++
clustering method and then proceeding to identify whether
each candidate cluster constitutes concept drift or an attack.
IV. TYPES OF ATTACKS
In this section we discuss potential attacks to a network
access control mechanism based on behavior proﬁles. We
envision that the main line of attacks will focus on modifying
the access control policies that determine which devices are
accepted into the network. Since the access control policies are
updated by an incremental-learning algorithm, attackers will
concentrate on crafting manipulated proﬁles with the intent to
alter the clusters of behavior that deﬁne the access control
7
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:28 UTC from IEEE Xplore.  Restrictions apply. 
(a) Diversiﬁed Attack.
(b) Uniﬁed Attack.
Fig. 4.
behavior proﬁle.
Types of Threshold Attacks. Each dot represents an individual
policies. Attacks that
involve devices with granted access
sending anomalous trafﬁc to compromise other devices are
discussed in [1]. A description of two types of attacks follows.
A. Collusion Attack
Compromised hosts may try to lie to the NAC enforcer
about their new proﬁles in order to create a new candidate
cluster that is greatly separated from the existing clusters
of behavior. Such a cluster would alter the access control
by allowing easier access to anomalous proﬁles. Figure 3
illustrates this type of attack that we refer to as collusion
attack. In order for an attack of this type to be successful, the
attacker would need to compromise at least as many devices
as the average number of members among the clusters of
behavior to be considered as a candidate cluster. Moreover,
this candidate cluster must lie at a distance dnew from the
global centroid C that is smaller than dmax (see Section
III). These requirements are not easy to achieve and demand
internal knowledge of the cluster distribution. In Section V,
we show that even with full disclosure of the clusters of
behavior, an attacker is tightly limited in the new clusters that
can potentially be created.
B. Threshold Attack
One or multiple users within a cluster of behavior may try to
decrease or increase the thresholds computed during bootstrap.
We call these attacks threshold attacks given that the attacker is
trying to modify the dimensions of its own cluster. We consider
two alternatives. First, one or multiple attackers modify their
own proﬁles in an attempt to disperse the cluster in different
directions. We will refer to this alternative as diversiﬁed attack
(see Figure 4(a)). In the second scenario, one or multiple
attackers agree on a unique modiﬁed proﬁle to stretch their
cluster in a single direction. Figure 4(b) illustrates this scenario
that we refer to as uniﬁed attack. In Section V, we show that
the bootstrap phase limits this type of attack as long as the
number of normal users in the cluster outnumbers the number
of attackers.
V. VALIDATION EXPERIMENTS
To evaluate the mechanism, we present experiments that
aim to simulate a NAC environment and test the performance
of each of the phases as well as the incremental-learning
algorithm. In order to simulate the NAC environment, we
need real network trafﬁc for a large amount of users with a
diversity of behaviors. For that purpose, we gathered Cisco
NetFlow logs from a router at out host
institution for a
period of two weeks (around 95Gb containing millions of IPs).
From all the IPs collected during this period, we randomly
selected a sample of 300 internal users (with IPs from our
host institution) and proceeded to process their network ﬂows
from the logs. Throughout, we assume that each IP represents
a unique user. A ﬂow corresponds to a unidirectional sequence
of packets between a given source and destination endpoints
[9]. We strictly focused on ﬂows from port 80 where trafﬁc
was more abundant than in other ports.
In order to compute behavior proﬁles, we designed an AD
sensor that models user behavior based on the network ﬂows
each user generates. Each behavior proﬁle was characterized
by a set of seven features that
include the total number
of ﬂows, average ﬂow size, average ﬂow duration,
total
number of packets contained in all ﬂows, average number
of packets per ﬂow, total number of unique IP addresses
contained in all ﬂows, and average packet size. Thus, a
user proﬁle was deﬁned by a vector pi = {f1, f2, ..., f7}
where fi represents the average value for each individual
feature modeled over
the training period. For example
px = {529.4, 1.8, 50.5, 105.7, 9.4, 973.1, 11803.2} and py =
{485466.5, 24.9, 159.8, 3954.2, 3473.0, 12000000, 5585.9}
represent two of the proﬁles obtained from our sample. Here
we can directly see the contrast in behavior proﬁles between
a very active user py (with a large total number of ﬂows, a
large number of unique IPs and large total number of packets)
and a less active user px. The variation of the features among
the sample allows us to capture the diversity of behaviors in
a network.
Using the sensor, we built daily proﬁles for each of the 300
users in the sample for two separate periods with a duration
of one week each. This resulted in a total of 600 behavior
proﬁles: 300 proﬁles for week-1 and 300 proﬁles from week-2.
Daily proﬁles computed average daily values for each feature
during the training period of the proﬁles (one week). In our
computations, each user proﬁle contained 10–13498 ﬂows per
week with 2–128 packets per ﬂow. The average duration of
each ﬂow was approximately 46.2 secs.
Armed with the behavior proﬁles, we proceeded to set
up a simulated NAC environment in which a fraction of
the proﬁles constituted the initial members of the network,
while the remaining proﬁles simulated users trying to gain
access into the network. Speciﬁcally, the 600 behavior proﬁles
were divided into three sets of randomly selected proﬁles: the
training set (300 proﬁles from week-1) to be used to compute
clusters of behavior, the cross-validation set (75 proﬁles from
week-2) to determine the appropriate number of clusters k,
and the testing set (remaining 225 proﬁles from week-2) to
perform access control experiments. We further assumed that
the proﬁles in the training set, the cross-validation set and
the testing set represent normal behavior proﬁles and thus
constitute ground truth. It is important to note that although
the experiments presented here are speciﬁc to one dataset,
the results can be generalized to other network environments
given the sheer number of proﬁles and diversity of our dataset.
Next, we present experimental evaluation of each phase of the
8
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:14:28 UTC from IEEE Xplore.  Restrictions apply. 
mechanism and the incremental-learning algorithm using these
three sets of proﬁles.
A. Clustering and Cross-Validation
In order to show how the clustering phase would proceed,
we used the K-means++ clustering method (see Section II-A)
to ﬁnd clusters of behavior in the the training set (300
normal proﬁles from week-1). We tested values of k ranging
from 1% to 20% of the total number of proﬁles, since these
produced the best clustering results. For each k, we repeated
the clustering method several times to account for the non-
deterministic nature of K-means++. This resulted in multiple
cluster distributions for each value of k.
We then ran cross-validation tests to determine the best
cluster distribution i.e., the best value of k. Each value of
k was ranked based on its access control performance. The
performance of the access control was measured using two
indicators: the false rejection rate (FR) and the true rejection
rate (TR). TR measures the number of anomalous users
that were detected as such by the access control, and FR
measures the number of normal users deemed as such by
the access control. The ﬁnal ranking index was computed as
r = (1 − F R) + T R, and the clustering distribution with the
best index was selected.
In order to compute the FR rate for each cluster distribution,
we measured its access control performance using the proﬁles
from the cross-validation set. As stated earlier, the cross-
validation set consisted of 75 normal proﬁles randomly chosen
from week-2. To compute the TR of each cluster distribution,
anomalous proﬁles were created by modifying one or multiple
features by one,
two and three standard deviations away
from the centroid of each individual cluster in the cluster
distribution. These proﬁles were used to simulate users trying
to maliciously stretch the dimensions of the clusters in the
cluster distribution.
Figure 5(a) and Figure 5(b) show the best TR and FR
rates for different values of k assuming weighted and non-
weighted voting respectively. We discovered that a value of
k=40 and non-weighted voting produced the highest ranking
index r = (1 − 0.1) + 0.97. Smaller values of k tended to
produce small TR rates due to the fact that outlier proﬁles
in each cluster created a larger spread among the cluster
members. On the other hand,
larger values of k showed
very poor FR rates because the cluster distribution became
excessively ﬁne-grained. Non-weighted voting outperformed
weighted voting possibly indicating that behavior proﬁles that
are outliers within their own cluster tend to dominate the
voting process over the rest of the proﬁles. In order to test
whether the granularity of the training period affects the results
directly, we repeated similar experiments using hourly proﬁles.
We ﬁnd that the results obtained with proﬁles trained on
an hourly basis do not differ signiﬁcantly from their daily
counterparts.
For our particular dataset, the cluster distribution with k=40
and non-weighted voting was the best representative of the
trade-off between FR and TR. Therefore, it was selected for
the validation of the subsequent phases. It is important to
σ From Individual Clusters
True Rejection Rate
1 σ
2 σ
3 σ
95%
98%
100%
TABLE I
PERFORMANCE OF THE ACCESS CONTROL PHASE. ANOMALOUS
PROFILES WERE GENERATED AT ONE, TWO, AND THREE σ AWAY FROM
THE INDIVIDUAL CLUSTER CENTROIDS. THE MORE ANOMALOUS THE
PROFILES ARE, THE EASIER IT IS FOR THE CLUSTER DISTRIBUTION TO
DETECT THEM.
note that these values are only valid for the set of proﬁles
presented in this paper and it will obviously vary according
to the particular network environment.
B. Bootstrap and Access Control
Once clusters of behavior had been generated and a value of
k=40, together with non-weighted voting, chosen as the best
cluster distribution, the bootstrap phase computed thresholds