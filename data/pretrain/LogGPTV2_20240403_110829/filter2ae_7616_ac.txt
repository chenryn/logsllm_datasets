        if ((hp = gethostbyname(host)) == NULL) {
            error(E_L, E_LOG, T("Can't get host address"));
            return -1;
        }
        memcpy((char *) &intaddr, (char *) hp->h_addr_list[0],
            (size_t) hp->h_length);
    /*
     *  Set ../web as the root web. Modify this to suit your needs
     */
        getcwd(dir, sizeof(dir)); 
        if ((cp = strrchr(dir, '/'))) {
            *cp = '\0';
        }
        sprintf(webdir, "%s/%s", dir, rootWeb);
    /*
     *  Configure the web server options before opening the web server
     */
        websSetDefaultDir(webdir);
        cp = inet_ntoa(intaddr);
        ascToUni(wbuf, cp, min(strlen(cp) + 1, sizeof(wbuf)));
        websSetIpaddr(wbuf);
        ascToUni(wbuf, host, min(strlen(host) + 1, sizeof(wbuf)));
        websSetHost(wbuf);
    /*
     *  Configure the web server options before opening the web server
     */
        websSetDefaultPage(T("default.asp"));
        websSetPassword(password);
    /* 
     *  Open the web server on the given port. If that port is taken, try
     *  the next sequential port for up to "retries" attempts.
     */
        websOpenServer(port, retries);
    /*
     *  First create the URL handlers. Note: handlers are called in sorted order
     *  with the longest path handler examined first. Here we define the security 
     *  handler, forms handler and the default web page handler.
     */
        websUrlHandlerDefine(T(""), NULL, 0, websSecurityHandler, 
            WEBS_HANDLER_FIRST);
        websUrlHandlerDefine(T("/goform"), NULL, 0, websFormHandler, 0);
        websUrlHandlerDefine(T("/cgi-bin"), NULL, 0, websCgiHandler, 0);
        websUrlHandlerDefine(T(""), NULL, 0, websDefaultHandler, 
            WEBS_HANDLER_LAST); 
    /*
     *  Now define two test procedures. Replace these with your application
     *  relevant ASP script procedures and form functions.
     */
        websAspDefine(T("aspTest"), aspTest);
        websFormDefine(T("formTest"), formTest);
    /*
     *  Create the Form handlers for the User Management pages
     */
    #ifdef USER_MANAGEMENT_SUPPORT
        formDefineUserMgmt();
    #endif
    /*
     *  Create a handler for the default home page
     */
        websUrlHandlerDefine(T("/"), NULL, 0, websHomePageHandler, 0); 
        return 0;
    }
先是调用socketOpen()，初始化socket系统，就是对sock.c的一些全局变量进行初始化。 然后对IP，host
name，还有网页的根目录进行获取和赋值。
调用websSetDefaultDir()设置根目录，websSetIpaddr()设置ip地址，websSetHost()设置host name。
websSetDefaultPage()设置默认访问页，websSetPassword()设置密码。 websOpenServer(port,
retries)，在指定端口打开webserver
如果这个端口不可用，就延续下一个，retries就是失败后可尝试的次数，里面实现了对websUrlHandler，websUrlHandlerMax的初始化，都为0。
下面要分析的就是websUrlHandlerDefine和一些结构体了，这是搞懂Gohead是如何如何处理前端发过来的请求的关键地方。
先来看下 **websUrlHandlerType** 结构体
    typedef struct {
        int     (*handler)(webs_t wp, char_t *urlPrefix, char_t *webDir, int arg, 
                char_t *url, char_t *path, 
                char_t *query);                 /* Callback URL handler function */
        char_t  *webDir;                        /* Web directory if required */
        char_t  *urlPrefix;                     /* URL leading prefix */
        int     len;                            /* Length of urlPrefix for speed */
        int     arg;                            /* Argument to provide to handler */
        int     flags;                          /* Flags */
    } websUrlHandlerType;
可以看到，其包含了以下成员
  * 函数指针handler，是这个Url的回调处理函数。
  * 然后就是webDir，Web 目录的可选根目录路径，但是给websUrlHandlerDefine函数传参是，一般都为0。
  * urlPrefix，要匹配的 URL 前缀，比如说“/goform”，"/cgi-bin"，“/”，“”等。
  * len，urlPrefix字符串的长度，后面排序会用到。
  * arg，传递给处理函数的参数。
  * flags，定义匹配顺序，有两个WEBS_HANDLER_LAST、WEBS_HANDLER_FIRST，那些先进行处理，那些后进行处理。
再来看看 **webs_t** 结构体
    /* 
     *  Per socket connection webs structure
     */
    typedef struct websRec {
        ringq_t         header;             /* Header dynamic string */
        time_t          since;              /* Parsed if-modified-since time */
        sym_fd_t        cgiVars;            /* CGI standard variables */
        sym_fd_t        cgiQuery;           /* CGI decoded query string */
        time_t          timestamp;          /* Last transaction with browser */
        int             timeout;            /* Timeout handle */
        char_t          ipaddr[32];         /* Connecting ipaddress */
        char_t          type[64];           /* Mime type */
        char_t          *dir;               /* Directory containing the page */
        char_t          *path;              /* Path name without query */
        char_t          *url;               /* Full request url */
        char_t          *host;              /* Requested host */
        char_t          *lpath;             /* Cache local path name */
        char_t          *query;             /* Request query */
        char_t          *decodedQuery;      /* Decoded request query */
        char_t          *authType;          /* Authorization type (Basic/DAA) */
        char_t          *password;          /* Authorization password */
        char_t          *userName;          /* Authorization username */
        char_t          *cookie;            /* Cookie string */
        char_t          *userAgent;         /* User agent (browser) */
        char_t          *protocol;          /* Protocol (normally HTTP) */
        char_t          *protoVersion;      /* Protocol version */
        int             sid;                /* Socket id (handler) */
        int             listenSid;          /* Listen Socket id */
        int             port;               /* Request port number */
        int             state;              /* Current state */
        int             flags;              /* Current flags -- see above */
        int             code;               /* Request result code */
        int             clen;               /* Content length */
        int             wid;                /* Index into webs */
        char_t          *cgiStdin;          /* filename for CGI stdin */
        int             docfd;              /* Document file descriptor */
        int             numbytes;           /* Bytes to transfer to browser */
        int             written;            /* Bytes actually transferred */
        void            (*writeSocket)(struct websRec *wp);
    #ifdef DIGEST_ACCESS_SUPPORT
        char_t          *realm;     /* usually the same as "host" from websRec */
        char_t          *nonce;     /* opaque-to-client string sent by server */
        char_t          *digest;    /* digest form of user password */
        char_t          *uri;       /* URI found in DAA header */
        char_t          *opaque;    /* opaque value passed from server */
        char_t          *nc;        /* nonce count */
        char_t          *cnonce;    /* check nonce */
        char_t          *qop;       /* quality operator */
    #endif
    #ifdef WEBS_SSL_SUPPORT
        websSSL_t       *wsp;       /* SSL data structure */
    #endif
    } websRec;
    typedef websRec *webs_t;
    typedef websRec websType;
这个就是每个套接字连接网络的结构体，包含了很多信息，就像我们bp抓包里面包含的那些信息。
还有个就是 **socket_t**
    typedef struct {
        char            host[64];               /* Host name */
        ringq_t         inBuf;                  /* Input ring queue */
        ringq_t         outBuf;                 /* Output ring queue */
        ringq_t         lineBuf;                /* Line ring queue */
        socketAccept_t  accept;                 /* Accept handler */
        socketHandler_t handler;                /* User I/O handler */
        int             handler_data;           /* User handler data */
        int             handlerMask;            /* Handler events of interest */
        int             sid;                    /* Index into socket[] */
        int             port;                   /* Port to listen on */
        int             flags;                  /* Current state flags */
        int             sock;                   /* Actual socket handle */
        int             fileHandle;             /* ID of the file handler */
        int             interestEvents;         /* Mask of events to watch for */
        int             currentEvents;          /* Mask of ready events (FD_xx) */
        int             selectEvents;           /* Events being selected */
        int             saveMask;               /* saved Mask for socketFlush */
        int             error;                  /* Last error */
    } socket_t;
这是socket套接字的结构体。
接下来分析websUrlHandlerDefine函数，这个函数是用来注册各个URL具体的处理函数的。
    /******************************************************************************/
    /*
     *  Define a new URL handler. urlPrefix is the URL prefix to match. webDir is 
     *  an optional root directory path for a web directory. arg is an optional
     *  arg to pass to the URL handler. flags defines the matching order. Valid
     *  flags include WEBS_HANDLER_LAST, WEBS_HANDLER_FIRST. If multiple users 
     *  specify last or first, their order is defined alphabetically by the 
     *  urlPrefix.
     */
    int websUrlHandlerDefine(char_t *urlPrefix, char_t *webDir, int arg,
            int (*handler)(webs_t wp, char_t *urlPrefix, char_t *webdir, int arg, 
            char_t *url, char_t *path, char_t *query), int flags)
    {