220 256
288
Fig. 6. Peformance of Labeled PSI applied to the Pung anonymous communication protocol.
References
1. Validating
leaked
passwords
with
k-anonymity.
https://blog.cloudflare.com/
validating-leaked-passwords-with-k-anonymity/ (2018), accessed: 2018-05-08
2. Angel, S., Chen, H., Laine, K., Setty, S.: Pir with compressed queries and amortized query processing. In: 2018
IEEE Symposium on Security and Privacy (SP). pp. 962–979. IEEE (2018)
3. Angel, S., Setty, S.: Unobservable communication over fully untrusted infrastructure. In: OSDI. pp. 551–569
(2016)
4. Bajard, J.C., Eynard, J., Hasan, M.A., Zucca, V.: A full RNS variant of FV like somewhat homomorphic en-
cryption schemes. In: International Conference on Selected Areas in Cryptography. pp. 423–442. Springer (2016)
5. Baldi, P., Baronio, R., De Cristofaro, E., Gasti, P., Tsudik, G.: Countering gattaca: eﬃcient and secure testing of
fully-sequenced human genomes. In: Proceedings of the 18th ACM conference on Computer and communications
security. pp. 691–702. ACM (2011)
6. Boneh, D., Gentry, C., Halevi, S., Wang, F., Wu, D.J.: Private database queries using somewhat homomorphic
encryption. In: International Conference on Applied Cryptography and Network Security. pp. 102–118. Springer
(2013)
7. Brakerski, Z.: Fully homomorphic encryption without modulus switching from classical GapSVP. In: Safavi-Naini,
R., Canetti, R. (eds.) CRYPTO. Lecture Notes in Computer Science, vol. 7417, pp. 868–886. Springer (2012)
8. Brakerski, Z., Gentry, C., Vaikuntanathan, V.: (leveled) fully homomorphic encryption without bootstrapping.
In: Proceedings of the 3rd Innovations in Theoretical Computer Science Conference. pp. 309–325. ACM (2012)
9. Brakerski, Z., Vaikuntanathan, V.: Fully homomorphic encryption from ring-lwe and security for key dependent
messages. In: Advances in Cryptology–CRYPTO 2011, pp. 505–524. Springer (2011)
10. Brakerski, Z., Vaikuntanathan, V.: Eﬃcient fully homomorphic encryption from (standard) LWE. SIAM Journal
on Computing 43(2), 831–871 (2014)
11. Chase, M., Chen, H., Ding, J., Goldwasser, S., Gorbunov, S., Hoﬀstein, J., Lauter, K., Lokam, S., Moody, D.,
Morrison, T., Sahai, A., Vaikuntanathan, V.: Security of homomorphic encryption. Tech. rep., HomomorphicEn-
cryption.org, Redmond WA (July 2017)
12. Chen, H., Laine, K., Rindal, P.: Fast private set intersection from homomorphic encryption. In: Proceedings of
the 2017 ACM SIGSAC Conference on Computer and Communications Security. pp. 1243–1255. ACM (2017)
13. Cheon, J.H., Kim, A., Kim, M., Song, Y.: Homomorphic encryption for arithmetic of approximate numbers. In:
International Conference on the Theory and Application of Cryptology and Information Security. pp. 409–437.
Springer (2017)
14. Cheon, J.H., Kim, M., Kim, M.: Search-and-compute on encrypted data. In: International Conference on Financial
Cryptography and Data Security. pp. 142–159. Springer (2015)
15. Cheon, J.H., Kim, M., Kim, M.: Optimized search-and-compute circuits and their application to query evaluation
on encrypted data. IEEE Transactions on Information Forensics and Security 11(1), 188–199 (2016)
16. Cheon, J.H., Kim, M., Lauter, K.: Homomorphic computation of edit distance. In: International Conference on
Financial Cryptography and Data Security. pp. 194–212. Springer (2015)
17. Chillotti, I., Gama, N., Georgieva, M., Izabachene, M.: Faster fully homomorphic encryption: Bootstrapping in
less than 0.1 seconds. In: International Conference on the Theory and Application of Cryptology and Information
Security. pp. 3–33. Springer (2016)
18. Chor, B., Gilboa, N., Naor, M.: Private information retrieval by keywords. Citeseer (1997)
19. Ciampi, M., Orlandi, C.: Combining private set-intersection with secure two-party computation. Tech. rep.,
Cryptology ePrint Archive, Report 2018/105 (2018)
20. De Cristofaro, E., Gasti, P., Tsudik, G.: Fast and private computation of cardinality of set intersection and union.
In: International Conference on Cryptology and Network Security. pp. 218–231. Springer (2012)
21. Dowlin, N., Gilad-Bachrach, R., Laine, K., Lauter, K., Naehrig, M., Wernsing, J.: Manual for using homomorphic
encryption for bioinformatics. Proceedings of the IEEE 105(3), 552–567 (2017)
22. Fan, J., Vercauteren, F.: Somewhat practical fully homomorphic encryption. Cryptology ePrint Archive, Report
2012/144 (2012), http://eprint.iacr.org/
23. Freedman, M.J., Ishai, Y., Pinkas, B., Reingold, O.: Keyword search and oblivious pseudorandom functions. In:
Theory of Cryptography Conference. pp. 303–324. Springer (2005)
24. Gentry, C.: Fully homomorphic encryption using ideal lattices. In: STOC. vol. 9, pp. 169–178 (2009)
25. Gentry, C., Halevi, S., Smart, N.P.: Homomorphic evaluation of the aes circuit. In: Advances in cryptology–crypto
2012, pp. 850–867. Springer (2012)
26. Gentry, C., Sahai, A., Waters, B.: Homomorphic encryption from learning with errors: Conceptually-simpler,
asymptotically-faster, attribute-based. In: Canetti, R., Garay, J.A. (eds.) CRYPTO (1). Lecture Notes in
Computer Science, vol. 8042, pp. 75–92. Springer (2013). https://doi.org/10.1007/978-3-642-40041-4, http:
//dx.doi.org/10.1007/978-3-642-40041-4
27. Halevi, S., Shoup, V.: Algorithms in helib. In: International cryptology conference. pp. 554–571. Springer (2014)
28. Hart, W., Johansson, F., Pancratz, S.: FLINT: Fast Library for Number Theory (2013), version 2.4.0, http:
//flintlib.org
29. Hazay, C., Lindell, Y.: Eﬃcient protocols for set intersection and pattern matching with security against malicious
and covert adversaries. In: Canetti, R. (ed.) Theory of Cryptography. pp. 155–175. Springer Berlin Heidelberg,
Berlin, Heidelberg (2008)
30. Ion, M., Kreuter, B., Nergiz, E., Patel, S., Saxena, S., Seth, K., Shanahan, D., Yung, M.: Private intersection-sum
protocol with applications to attributing aggregate ad conversions. Tech. rep., Cryptology ePrint Archive, Report
2017/738 (2017)
31. Jarecki, S., Liu, X.: Fast secure computation of set intersection. In: International Conference on Security and
Cryptography for Networks. pp. 418–435. Springer (2010)
32. Kamara, S., Mohassel, P., Raykova, M., Sadeghian, S.: Scaling private set intersection to billion-element sets.
In: Christin, N., Safavi-Naini, R. (eds.) Financial Cryptography and Data Security. pp. 195–215. Springer Berlin
Heidelberg, Berlin, Heidelberg (2014)
33. Khedr, A., Gulak, G., Vaikuntanathan, V.: Shield: scalable homomorphic implementation of encrypted data-
classiﬁers. IEEE Transactions on Computers 65(9), 2848–2858 (2016)
34. Kim, A., Song, Y., Kim, M., Lee, K., Cheon, J.H.: Logistic regression model training based on the approximate
homomorphic encryption. Cryptology ePrint Archive, Report 2018/254 (2018), https://eprint.iacr.org/2018/
254
35. Kiss, ´A., Liu, J., Schneider, T., Asokan, N., Pinkas, B.: Private set intersection for unequal set sizes with mobile
applications. Proceedings on Privacy Enhancing Technologies 2017(4), 177–197 (2017)
36. Kolesnikov, V., Kumaresan, R., Rosulek, M., Trieu, N.: Eﬃcient batched oblivious PRF with applications to
private set intersection. In: Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security. pp. 818–829. ACM (2016)
37. Marlinspike, M.: The diﬃculty of private contact discovery. A company sponsored blog post (2014), https:
//whispersystems.org/blog/contact-discovery/
38. Meadows, C.: A more eﬃcient cryptographic matchmaking protocol for use in the absence of a continu-
ously available third party. In: 1986 IEEE Symposium on Security and Privacy. pp. 134–134 (April 1986).
https://doi.org/10.1109/SP.1986.10022
39. Nagy, M., De Cristofaro, E., Dmitrienko, A., Asokan, N., Sadeghi, A.R.: Do i know you?: eﬃcient and privacy-
preserving common friend-ﬁnder protocols and applications. In: Proceedings of the 29th Annual Computer Se-
curity Applications Conference. pp. 159–168. ACM (2013)
40. Odlyzko, A.: Privacy, economics, and price discrimination on the internet. In: Proceedings of the 5th international
conference on Electronic commerce. pp. 355–366. ACM (2003)
41. Olumoﬁn, F., Goldberg, I.: Privacy-preserving queries over relational databases. In: International Symposium on
Privacy Enhancing Technologies Symposium. pp. 75–92. Springer (2010)
42. Orr`u, M., Orsini, E., Scholl, P.: Actively secure 1-out-of-n ot extension with application to private set intersection.
In: Cryptographers Track at the RSA Conference. pp. 381–396. Springer (2017)
43. Pinkas, B., Schneider, T., Segev, G., Zohner, M.: Phasing: Private set intersection using permutation-based
hashing. In: 24th USENIX Security Symposium (USENIX Security 15). pp. 515–530 (2015)
44. Pinkas, B., Schneider, T., Weinert, C., Wieder, U.: Eﬃcient circuit-based psi via cuckoo hashing. In: Annual
International Conference on the Theory and Applications of Cryptographic Techniques. pp. 125–157. Springer
(2018)
45. Pinkas, B., Schneider, T., Zohner, M.: Faster private set intersection based on OT extension. In: USENIX Security
Symposium. vol. 14, pp. 797–812 (2014)
46. Pinkas, B., Schneider, T., Zohner, M.: Scalable private set intersection based on OT extension. ACM Transactions
on Privacy and Security (TOPS) 21(2), 7 (2018)
47. Resende, A.C.D., Aranha, D.F.: Faster unbalanced private set intersection. Journal of Internet Services and
Applications 9(1), 1–18 (2018)
48. Rindal, P., Rosulek, M.: Malicious-secure private set intersection via dual execution. In: Proceedings of the 2017
ACM SIGSAC Conference on Computer and Communications Security. pp. 1229–1242. CCS ’17, ACM, New York,
NY, USA (2017). https://doi.org/10.1145/3133956.3134044, http://doi.acm.org/10.1145/3133956.3134044
49. Rivest, R.L., Adleman, L., Dertouzos, M.L.: On data banks and privacy homomorphisms. Foundations of secure
computation 4(11), 169–180 (1978)
50. Smart, N.P., Vercauteren, F.: Fully homomorphic SIMD operations. Designs, codes and cryptography 71(1),
57–81 (2014)
51. Wang, F., Yun, C., Goldwasser, S., Vaikuntanathan, V., Zaharia, M.: Splinter: Practical private queries on public
data. In: NSDI. pp. 299–313 (2017)
A Security Proof for Leaky PSI
x or N(cid:48)
Parameters: The honest sender and receiver have respective set sizes Nx, Ny. If the sender or receiver is mali-
ciously corrupt, then their set size is N(cid:48)
– On input (Receive, sid, Y ) from the receiver where Y ⊂ {0, 1}∗, ensure that |Y | ≤ Ny if the receiver is
honest and |Y | ≤ N(cid:48)
– Thereafter, on input (Send, sid, X, leakage) from the sender where Y ⊂ {0, 1}∗ and leakage is the leakage
function, ensure that |X| ≤ Nx if the sender is honest and |X| ≤ N(cid:48)
The functionality computes Y ∗ = leakage(Y ) and gives output (Output, sid, X ∩ Y ∩ Y ∗) to the receiver.
y otherwise. Give (Receiver-Input, sid) to the sender.
y respectively.
x otherwise.
Fig. 7. Ideal leaky PSI functionality.
Input: Receiver inputs set Y ⊂ {0, 1}∗ of size Ny; sender inputs set X ⊂ {0, 1}∗ of size Nx. Nx, Ny are public.
κ and λ denote the computational and statistical security parameters, respectively.
Output: The receiver outputs Y ∩ X if the sender is honest and Y ∩ X ∩ leakage(Y ) otherwise; the sender
outputs ⊥.
1. The parties run steps 1 through 7 of Figure 2.
(a) In Step 5(b)ii the sender deﬁnes the label for each x(cid:48) ∈ X(cid:48) to be H(x(cid:48)) where H : {0, 1}σ → {0, 1}σ is a
random oracle which is suﬃciently complex such that for H(cid:48)({zi·wj | 1 ≤ i < w, 0 ≤ j ≤ (cid:98)logw(B)}) =
H(z) the FHE scheme is H(cid:48)-limited (Deﬁnition 1). Note that w is the windowing parameter of Step 7d.
(b) In Step 7a the sender must provide a zero knowledge proof that all OPRF instances used the same key
k.
2. The parties perform Step 8 except that the symmetric polynomials Sb,j are not evaluated or sent back.
3. Instead of performing Step 9, the receiver does the following. For the b-th batch, the receiver decrypts the
ciphertexts qb,1, ..., qb,α to obtain rb,1, ..., rb,α, which are interpreted as vectors of n/d elements in F
Let r∗
y(cid:48) ∈ Y (cid:48), output the corresponding y ∈ Y if
td obtained by concatenating r∗
α be vectors of m elements in F
1,j||...||r∗
j = r∗
1 , ..., r∗
td .
md/n,j. For all
where i is the index of the bin that y(cid:48) occupies in C
∃j : r
∗
j [i] = H(y
(cid:48)
) ,
Fig. 8. Full Malicious PSI protocol with leakage.
Theorem 3. In the random oracle hybrid and in the presence of an OMGDH-hard group G along
with a semantic secure H-limited leveled fully homomorphic encryption scheme Σ, the protocol π of
Figure 8 securely computes the leaky PSI functionality (Figure 7) with (non-black box) simulation
security where N(cid:48)
y = Ny and N(cid:48)
x = poly(κ).
Proof (Proof Sketch). Proving that the protocol is secure against a malicious receiver is a straight
forward extension of Theorem 1.
In the case of a malicious sender we must describe a non-black box simulator which extracts
the senders set and leakage function which are forwarded to the ideal functionality of Figure 7. The
simulator plays the role of the receiver using a dummy set and at the end of the protocol extracts
the senders set and function as follows.
First, the simulator extracts the OPRF key k from the zero knowledge proof and uses the
random oracle to extract all of the OPRF inputs which the sender has queried with key k and
deﬁnes this as their set X∗. By Deﬁnition 1 it follows that all of the labels for items in {0, 1}∗\X∗
are uniformly distributed and that the sender can not construct a ciphertext which decrypts to
one of these labels with non-negligible probability. If this does not hold then this sender can be
used to construct a contradiction. Namely, since all OPRF outputs for inputs in {0, 1}∗\X∗ are
uniformly distributed in {0, 1}poly(κ), we can program an output of the OPRF/random oracle on
an input y ∈ Y to be the z ∈ {0, 1}poly(κ) from Deﬁnition 1 and the code of the sender to be F ∗. If
the sender (F ∗) was able to generate a ciphertext of H(z) then this ciphertext is a contradiction
since the FHE scheme is assumed to be H-limited.
The leakage function is then deﬁned as follows. On input Y the function applies the OPRF to
Y and performs cuckoo hashing on the result. By inspecting the code of the sender, it is determined
if the correct label is computed for the given cuckoo location. If so then the input represented by
this location is output by the leakage function. The simulator can then send the sender’s set and
this leakage function to the ideal functionality (Figure 7).
Remarks: A zero knowledge proof that the sender uses the same key to all of the OPRF invo-
cations is added to Figure 8. This is primarily to ease the exposition of the proof. Instead of zero
knowledge proofs it is suﬃcient for the receiver to abort if any of the OPRF response messages are
0, 1 ∈ G. The proof must then handle the case that multiple OPRF keys are used by the sender
and the case where the the key is unknown, e.g. sent a random value back instead of H(y)βα. These
cases can be handled by adding addition logic to the leakage function.