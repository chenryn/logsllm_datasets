理理解错误，转化为⾏行行动
阻⽌止错误未来再发⽣生
Case： Netﬂix
April 21, 2011，AWS US-EAST区域宕机
Netﬂix没有被⼤大规模AWS中断影响到
有⼈人猜测是由于Netﬂix是最AWS最⼤大的客户之⼀一，受到特殊对待
实际上是由于从2009年年开始的架构设计赋予的异常还原能⼒力力
2008年年，Netﬂix在线视频交付服务是J2EE单体架构，托管在⼀一个数据中⼼心
2009年年开始重构系统，被称作‘云原⽣生’，被设计运⾏行行在Amazon公有云上，考虑还原能⼒力力
架构解耦，每个组件考虑挑战超时，
确保失败的组件不不影响整个系统
每个功能和组件被设计为优雅降级
⽐比如CPU繁忙时，把个性化电影列列表换
为缓存过的需要更更少计算的静态内容
构建Chaos Monkey，持续模拟AWS失
败，让服务⾃自动化恢复⽽而不不是⼈人⼯工⼲干预
实现组织学习（在⽇日常⼯工作时段）
建设公平的，学习⽂文化
坏苹果理理论
排除错误，就是排除导致错误的⼈人
⼈人为错误不不是问题，⼈人为错误是我们
给他们的⼯工具设计的结果
取代“naming, blaming, and shaming”
最⼤大化组织学习，在⽇日常⼯工作中持续
增强暴暴露露和共享问题的机会
两个有效的实践
免责的事后分析
受控的引⼊入失败到⽣生产环境，建⽴立对
复杂系统中不不可避免问题的实践
免责的事后分析会议
建⽴立时间线，收集失败细节信息，不不要惩罚制造错误的⼈人
聊天记录，IRC or Slack
⽣生产遥测的特定指标，不不仅是陈述
授权所有⼯工程师在各⾃自领域改进安全
⿎鼓励制造错误的⼈人教育组织其他⼈人，如何避免
接受有⾃自由决定的空间，⼈人们选择是否决定采取⾏行行动
提出对策如何避免类似的事故，确保
记录下来有⽬目标⽇日期和负责⼈人跟进
参与⼈人
有可能导致问题的⼈人
发现问题的⼈人
响应问题的⼈人
诊断问题的⼈人
被问题影响的⼈人
任何感兴趣的⼈人
可能的对策
新的⾃自动化测试发现部署流⽔水线的危险状况
增加更更多是⽣生产遥测
识别需要额外peer review的变更更类型
增加失败演练，作为常规安排的Game Day
发布免责事后分析越⼴广越好
⼴广泛发布会议纪要和相关内容
事后分析完成之前，禁⽌止关闭⽣生产故障
将本地学习和改进转化为全局学习和改进
在线服务公司，会发送给中断影响的客户，增加透明和信任
降低事故容忍度，找到微弱的失败信号
NASA 2003 哥伦⽐比亚号航天⻜飞机失事
此前⼀一位中级⼯工程师就报告过事故，但未被重视
注⼊入⽣生产事故，启动恢复性和学习
Chaos Monkey
创⽴立Game Days演练失败
模拟和演练事故，给他们实践的能⼒力力
⾸首先计划⼀一个灾难事件，⽐比如模拟整个数据中⼼心毁坏
给团队时间准备，排除所有的单点错误
创建必要的监控流程，故障切换流程
定义和执⾏行行操练，问题和困难被识别、处理理和测试
在约定的时间，执⾏行行中断
暴暴露露潜在缺陷latent defects 
20. 转换本地发现到全局改进
通过聊天室和聊天机器器
⼈人⾃自动化捕获组织知识
Case：ChatOps at GitHub
Hubot
发送命令： @hubot deploy owl to production
通过聊天室⽽而不不是⾃自动化脚本的好处
每个⼈人看到所发⽣生的⼀一切
⼯工程师第⼀一天⼯工作可以看到⽇日常⼯工作如何执⾏行行
⼈人们倾向于请求帮助，当他们看到别⼈人互相帮助
快速组织学习和积累
增强透明和协作的⽂文化
GitHub
所有运维员⼯工远程⼯工作
Hubot触发Puppet, Capistrano, 
Jenkins, resque，Graphite
⾃自动化标准流程做进软件以便便重⽤用
架构，测试，部署和基础设施管理理
的的标准和流程经常写成Word⽂文档
经常不不知道或没有时间实施标准
把⼿手⼯工流程变为代码⾃自动化执⾏行行
为整个组织创建单
⼀一共享源代码库
全机构共享的代码仓库是集成本地
发现到跨越整个组织最有效的机制
Case：Google
2015年年单⼀一共享源代码库
超过⼗十亿个⽂文件
超过⼆二⼗十亿⾏行行代码
2万5千⼯工程师使⽤用
Chrome和Android在独⽴立的库
不不仅是代码，还有知识和学习的内容
库、基础设施和环境的配置标准
Chef recipes,Puppet manifests
部署⼯工具
测试标准和⼯工具，包括安全
部署流⽔水线⼯工具
监控和分析⼯工具
学习指南和标准
所有东⻄西从源代码构建，⽽而不不是在
运⾏行行时动态链接
永远只有单⼀一版本的库正在使⽤用
是在构建流程中静态链接的
每个库都有Owner，不不仅负责编译，
还有依赖它的所有项⽬目成功通过测试
像真实世界的图书管理理员
如果不不能够构建单⼀一代码树，必须找
到另外⼿手段管理理好版本、库和依赖
Nexus, Artifactory, Debian或RPM
通过⾃自动化测试即⽂文档
和实践团体传播知识
每个库都要有显著数量量的⾃自动化测
试，⾃自⽂文档并告诉其他⼈人如何使⽤用
每个库或服务建⽴立讨论组和聊天室，
问题会被其他使⽤用者快速回复
通过整理理⾮非功能需求，
应⽤用为运维设计
充⾜足的⽣生产环境和应⽤用遥测
精确追踪依赖的能⼒力力
服务可恢复性和优雅降级
服务向前和向后兼容性
归档数据，管理理⽣生产数据集容量量
轻松搜索和理理解跨服务⽇日志
从多个服务追踪⽤用户请求
使⽤用功能开关，简单、集中运⾏行行时配置
构建可重⽤用的运维⽤用户故事到开发
当有运维⼯工作不不能全部⾃自动化或⾃自服
务，⽬目标是让这些⼯工作可重复和可确定
标准化，尽量量⾃自动化
当不不能⾃自动化，集体定义清晰
的交接，降低前置时间和错误
Rundeck to automate and execute 
workﬂows, or work ticket systems 
such as JIRA or ServiceNow.
创建运维⽤用户故事给开发 
以与开发并肩⼯工作的⽅方式，暴暴露露可重
复的运维⼯工作
确保技术选择帮助达到组织⽬目标
为团队优化⽣生产率，但不不能妨碍组织⽬目标实现
运维可以影响哪些组件在⽣生产环境使⽤用，
或给予他们不不负责未⽀支持平台的能⼒力力
识别出有问题的基础架构或平台
阻碍或减缓⼯工作流
不不成⽐比例例的制造⾮非预期⼯工作
不不成⽐比例例的制造⼤大量量⽀支持请求
与架构结果不不⼀一致
吞吐量量，稳定性，安全，
可靠性，业务连续性
Case：Standardizing a New 
Technology Stack at Etsy (2010)
21. 预留留时间创建组织学习和改进
改进闪电战improvement blitz
全神贯注的专注时间，解决特定的问题
Case：Target DevOps Dojo 道场
1.8万平⽅方英尺的开放办公区
1672平⽅方⽶米
DevOps教练帮助团队评估他们实践的状态
30天挑战
开发团队与教练⼀一起，30天取得突破
针对问题，与教练集中⼯工作，2天迭代
30天挑战结束后，团队回到业务线
不不仅解决问题，⽽而且把新知识带回团队
并⾏行行有8组团队进⾏行行挑战的能⼒力力
也有⾮非密集型的参与模式
1到3天，完成⼀一个MVP
每两周具备Open Labs
任何⼈人可以访问道场，与教练交流
参加Demos，或接受培训
制度化仪式，解决技术债
规划以天或周为单位的改进闪电战
improvement blitzes
不不允许功能开发
解决有问题的代码、环境、架构、⼯工具
横跨整个价值流，开发、测试、信息安全
⼯工程师跨越整个价值流解决问题
spring、fall cleanings、ticket queue inversion weeks、
hack days、hackathons、20% innovation time
不不仅关注产品创新，还要关注改进⼯工作
Facebook hackathon
HipHop PHP compiler
⽐比原⽣生PHP处理理6倍更更⾼高的⽣生产负载
让每个⼈人教和学
美国国家保险公司
Teaching Thursday
每周组织时间学习
从DevOps会议共享经验
DevOpsDays
DevOps Enterprise Summit
⼤大型复杂组织
Case：Internal Technology Conferences at 
Nationwide Insurance, Capital One, and Target (2014)
创建内部顾问和教练传播实践
Case：Google 2005
Testing Grouplet⼩小组
构建世界级⾃自动化测试⽂文化
专注的改进闪电战，内部教练，内部认证机制
当时有20%创新时间的规定