and integer operations as well as string concatenation. We
exclude more complex string manipulation operations like
string substitution and interpolation functions from the sim-
ple language; with simple extensions, their semantics can be
modeled as string concatenations [41].
Restricting Command Semantics. The semantics of
the templating language is much simpler than that of a
general-purpose language that templates may be compiled
to. Notably, for instance, the templating language does not
have any dynamic evaluation commands such as JavaScript’s
eval or document.write. Therefore, ﬁnal code evaluation
in DOM evaluation constructs or serialization to the HTTP
response stream is performed by external application code.
For instance, Figure 3 below shows a JavaScript applica-
tion code written outside the templating language which
invokes the function compiled from the running example
template. It renders the returned result string dynamically
using a document.write. Therefore, the template code anal-
ysis does not need to model the complex semantics of doc-
ument.write 1 .
Figure 3: Psuedo-code of how external application code, such as
client-side Javascript, can invoke the compiled templates.
2.2 Problem Deﬁnition & Security Properties
In this paper, we focus on the following problem: given a
templating language such as the one in Section 2.1, and a
set of correct sanitization routines for diﬀerent contexts, the
goal is to automatically apply the correct sanitization prim-
itives during compilation to all uses of untrusted inputs in
constructing template outputs, while satisfying the following
properties.
1The semantics of document.write varies based on
whether the document object is open or closed.
template contactRender($imgLink, $name) {print(“” . $name. “”; return; }(A)$name$imgLink$namePCDATA ContextURI START ContextURI PATH ContextURI QUERYContextPCDATAContext(B)589Property NOS: No Over-Sanitization. The templating
language allows string expressions to be emitted at print
operations. String expressions may be constructed by con-
catenation of constant/static strings and untrusted input
variables; only the latter should be sanitized or else we risk
breaking the intended structure of the template output. For
instance in our running example, the auto-sanitization en-
gine should not place a sanitizer at the statement print
($x), because the expression x consists of a constant string
as well as untrusted input value. Sanitizing at this print
statement may strip out the / or ? characters rendering the
link unusable and breaking the intended structure of the
page.
Property CSAN: Context-Sensitive Sanitization. Each
untrusted input variable should be sanitized with a sanitizer
matching the context in which it is rendered in. However,
this is challenging because untrusted inputs may be used in
two diﬀerent contexts along two diﬀerent paths. In our run-
ning example, the $imgLink variable is used both in a URI
context as well as a HTTP parameter context, both of which
have diﬀerent sanitization requirements. Similary, untrusted
inputs can be rendered in two diﬀerent contexts even along
the same path, as seen for the variable $name in Figure 2 (B).
We term such use of inputs in multiple contexts as a static
context ambuiguity, which arise because of path-sensitive na-
ture of the template output construction logic and because
of multiple uses of template variables. Section 4 describes
further scenarios where context ambiguity may arise.
Property CR: Context Restriction. Template developers
should be forbidden from mistakenly using untrusted values
in contexts other than ones for which matching sanitizers
are available. Certain contexts are known to be hard to
sanitize, such as in an unqouted JavaScript string literal
placed directly in a JavaScript eval [21], and thus should be
forbidden.
Determining Final Output Start/End Context. For
each template, we infer the contexts in which the template’s
output can be safely rendered. However, since the ﬁnal out-
put is used external to the template code, providing a guar-
antee that external code uses the output in an intended con-
text is beyond the scope of our problem. For example, it is
unsafe for external code to render the output of the running
example in a JavaScript eval, but such properties must be
externally checked.
2.3 Motivation for Our Approach
If a templating langauge has no control-ﬂow or callTem-
plate constructs and no constructs to create string expres-
sions, all templates would be straight-line code with prints
of constant strings or untrusted variables. Auto-sanitizating
such templates is a straight-forward 3-step process— (a)
parse the template statically using a high-ﬁdelity parser (like
HTMLPurify [23]), (b) determine the context at each print
of untrusted inputs and (c) apply the matching sanitizer to
it. Unfortunately, real templating languages are often richer
like our templating language and more sophisticated tech-
niques are needed.
One possible extension of the approach for straight-line
code is to defer the step of parsing and determing contexts
to runtime execution [5]. We call this approach a context-
sensitive runtime parsing (or CSRP) approach, where a parser
parses all output from the compiled template, determines
the context of each print of untrusted input and sanitizes
it at runtime. This approach has additional performance
overhead due to cost of parsing all application output at
runtime, as previously shown [5] and as we evaluate in Sec-
tion 6. If string operations are supported in the language,
the performance penalty may be exacerbated because of the
need for tracking untrusted values during execution.
Instead, we propose a new “mostly static” approach which
oﬀ-loads expensive parsing steps to a static type analysis
phase. Contexts for most uses of untrusted data can be
statically determined and their sanitizers can be selected
during compile-time; only a small fraction need the more
expensive CSRP-like sanitizer selection in our approach—
hence our approach is “mostly static”.
Assumptions. Our type-based approach relies on a set of
assumptions which we summarise below:
1. Canonical Parser. To reliably determine the contexts
in which untrusted inputs are rendered, constant/static
strings in templates must parse according to a canon-
ical grammar which reliably parses in the same way
across major browsers. This restriction is necessary
to ensure that our context determination is consis-
tent with its actual parsing in the client’s browser,
which is challenging because browser parsing behav-
iors vary in idiosyncratic ways. In our approach, tem-
plates not complying with our canonical grammar do
not typecheck as per our type rules deﬁned in section 4.
Google AutoEscape based frameworks such as GWT
and CTemplate already tackle the practical issue of
developing such a canonical grammar [11, 13, 20]; our
engine leverages this existing code base.
2. Sanitizer Correctness. As mentioned previously, we
assume that a set of contexts in which applications
commonly render untrusted inputs is known and their
matching sanitizers are externally available. Creating
sanitizers that work across major browser versions is
an orthogonal challenge being actively researched [22,
23].
3. End-to-End Security. As explained earlier, if the ex-
ternal code renders the template outputs in an unin-
tended context or tampers with the template’s output
before emitting it to the browser, the end-to-end secu-
rity is not guaranteed. Ensuring correctness of external
code that uses template outputs is beyond the scope
of the problem we focus here—lint tools, static analy-
sis and code conformance testing can help enforce this
discipline externally.
3. OUR APPROACH
In our type-based approach, we enforce the aforemen-
tioned security properties by attaching or qualifying vari-
ables and expressions in templates with a new kind of qual-
iﬁer which we call the context type qualiﬁer. Type qualiﬁers
are a formal mechanism to extend the basic type safety of
langauge to enforce additional properties [16]. Context type
qualiﬁers play diﬀerent roles for the various expressions they
qualify. For an untrusted input variable, the context type
qualiﬁer captures the contexts in which the variable can be
safely rendered. An untrusted input becomes safe for ren-
dering in a certain context only after it is sanitized by a
sanitizer matching that context. Unsanitized inputs have
the UNSAFE qualiﬁer attached, and are not safe to be a part
590Types
τ ::=
Base Types α ::=
β ::=
Q ::=
Q1 β | Q2 η
β | η | β1 → β2 → . . . unit
bool | int | string | unit
Q1 | Q2 | (cid:126)Q1 → [Q2 → Q2]
Type
Qualiﬁers Q1 ::= UNSAFE
c1, c2 ∈ C
| STATICc1(cid:44)→c2
SC ∈ 2C×C
| DYNSC
Q2 ::= CTXSTATc
c ∈ C
| CTXDYNS
S ∈ 2C
PCDATA | RCDATA | . . .
C ::=
Contexts
Figure 4: Overview of our CSAS engine.
Figure 5: The ﬁnal types τ are obtained by augmenting base
types of the language α with type qualiﬁers Q
of any expression that is used in a print statement. For con-
stant/static string expressions, context type qualiﬁers cap-
ture the result of parsing the expression, that is, the start
context in which the expression will validly parse and the
context that will result after parsing the expression. When
the template code constructs an output string expression by
concatenating a constant string and an untrusted input, a
type rule over context qualiﬁers of the two strings ensures
that the untrusted input is only rendered in contexts for
which it is sanitized.
This rule only enforces the CSAN property in the concate-
nation operation. Several additional rules are needed to en-
force all the outlined security properties to cover all opera-
tions in our templating language. We describe the full type
system with formal type rules over context type qualiﬁers in
section 4. The type safety of the type system implies that
the security properties outlined in Section 2.2 are enforced.
CSAS Engine. The input to our auto-sanitization engine
is an existing template which may be completely devoid of
sanitizers. We call these templates untyped or vanilla tem-
plates. The task of our auto-sanitization engine is two-fold:
(a) to convert untyped or vanilla templates into an internal
representation (or IR) complying with our type rules (called
the well-typed IR), and (b) to compile the well-typed IR to
the target language code with sanitization. We develop a
CSAS engine in the compiler of a templating framework to
handle these tasks. Figure 4 shows the CSAS architecture.
It has two high-level steps: (A) Type Qualiﬁer Inference,
and (B) Compilation of CSAS templates.
The qualiﬁer inference step transforms the vanilla tem-
plate into a well-typed IR and automatically infers the type
qualiﬁers for all program expressions in the IR. The inferred
type qualiﬁers exactly determine where and which sanitiz-
ers are required for untrusted inputs. The well-typed IR
must conform to the type rules that we deﬁne in Section 4.
The step (B) compiles the well-typed IR and inserts saniti-
zation primitives and additional instrumentation in the ﬁnal
compiled code. The detailed design of the CSAS engine is
presented in Section 5.
4. THE CONTEXT TYPE SYSTEM
In this section, we formally describe our type qualiﬁer
mechanism that reﬁnes the base type system of the language
deﬁned in Section 2.1. We deﬁne the associated type rules
to which well-typed IR code must conform after the type
inference step.
4.1 Key Design Points
The CSAS engine must track the parsing context induced
by the application’s output at each program point. Each
string expression, when parsed by the browser, causes the
browser to transition from one context to another. We term
this transition induced on the browser by parsing strings as
a context transition, denoted by the notation c1 (cid:44)→ c2.
Notion of Context Type Qualiﬁers. Qualiﬁers play dif-
ferent roles for diﬀerent kinds of expressions.
For constant/static strings, the context type qualiﬁer cap-
tures the context transition it induces when parsed by our
canonical grammar. For example, the constant string  and in the other it writes <img src=" to the global
output buﬀer. The context that output buﬀer is in at the
join point is statically ambiguous, and consequently, stat-
ically selecting sanitizers on subsequent print statements
in the template is not possible. Similar examples of static
ambiguity have been shown to arise in large legacy applica-
tions [43].
Our approach avoids throwing type errors for such static
ambiguous types by using the following approach: we fur-
ther divide the type qualiﬁers into statically-qualiﬁed and
dynamically-qualiﬁed sets. Qualiﬁers Q2 for the output buﬀer
are either static qualiﬁers (CTXSTATC ) or dynamic (CTXDYNS).
At a given program location, if the output buﬀer is unam-
biguously determined to be in a single context c, a static
qualiﬁer is attached to it. In contrast, when the embedding
context of the buﬀer is statically ambiguous (or imprecise),
as in the example of Figure 6, it is over-approximated by a
set of contexts S and is qualiﬁed with the dynamic qualifer
CTXDYNS. CTXDYNS signiﬁes that the buﬀer is in one of the
contexts determined by the set S. Sanitizers can be stati-
cally selected for statically-qualiﬁed objects since their con-
texts are precisely known. For dynamically-qualiﬁed buﬀers,
the context-sensitive runtime parsing (or CSRP) approach