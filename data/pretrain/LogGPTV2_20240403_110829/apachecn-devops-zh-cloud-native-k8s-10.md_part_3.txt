    metadata:
      labels:
        app: app-1
    spec:
      containers:
      - name: app-1
        image: mycustomrepository/app-1:3
        command: [ "start", "-color", "green" ]
        ports:
        - containerPort: 80
```
保存部署后，您应该开始看到新的 Pods 出现。让我们通过使用以下命令进行双重检查:
```
 kubectl get pods
```
输出应该如下所示:
```
NAME                              READY     STATUS    RESTARTS   AGE
app-1-pod-2821252345-f928a        1/1       Running   0          1m
app-1-pod-2821252345-jjsa8        1/1       Running   0          1m
app-1-pod-2821252345-92jhd        1/1       Running   0          1m
```
最后，让我们提出一个`curl`请求，检查一切是否正常:
```
curl http://10.231.2.1:32688  
```
该命令的输出如下:
```
green 3
```
成功！
## 案例研究 3–带有日志的 Pod 应用故障
花完上一章 [*第九章*](09.html#_idTextAnchor212)*Kubernetes*上的可观测性，实现我们的应用的可观测性，让我们来看一个那些工具真的可以派上用场的案例。出于本案例研究的目的，我们将使用手动`kubectl`命令，但是要知道，通过聚合日志(例如，在我们的 EFK 栈实现中)，我们可以使调试该应用的过程变得更加容易。
在本案例研究中，我们再次部署了 Pods–为了检查它，让我们运行以下命令:
```
kubectl get pods
```
该命令的输出如下:
```
NAME              READY     STATUS    RESTARTS   AGE
app-2-ss-0        1/1       Running   0          10m
app-2-ss-1       1/1       Running   0          10m
app-2-ss-2       1/1       Running   0          10m
```
看起来，在这种情况下，我们使用的是状态集，而不是部署集——这里的一个关键特征是从 0 开始递增的 Pod 标识。
我们可以通过使用以下命令检查状态集来确认这一点:
```
kubectl get statefulset
```
该命令的输出如下:
```
NAME          DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
app-2-ss      3         3         3            3           10m
```
让我们用`kubectl get statefulset -o yaml app-2-ss`来仔细看看我们的状态集。通过使用`get`命令和`-o yaml`命令，我们可以获得与典型的 Kubernetes 资源 YAML 相同格式的`describe`输出。
前面命令的输出如下。我们删除了 Pod 规范部分，以保持其较短:
statefulset-output.yaml
```
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: app-2-ss
spec:
  selector:
    matchLabels:
      app: app-2
  replicas: 3
  template:
    metadata:
      labels:
        app: app-2
```
我们知道我们的应用正在使用一项服务。让我们看看是哪一个！
运行`kubectl get services -o wide`。输出应该如下所示:
```
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR 
app-2-svc NodePort 10.100.213.13  80:32714/TCP 3m01s app=app-2
```
很明显我们的服务叫做`app-2-svc`。让我们使用以下命令来查看我们的确切服务定义:
```
kubectl describe services app-2-svc 
```
输出如下:
```
Name:                   app-2-svc
Namespace:              default
Labels:                 app=app-2
Annotations:            
Selector:               app=app-2
Type:                   NodePort
IP:                     10.57.0.12
Port:                    80/TCP
TargetPort:             80/TCP
NodePort:                32714/TCP
Endpoints:              10.214.1.1:80,10.214.2.3:80,10.214.4.4:80
Session Affinity:       None
Events:                 
```
要查看我们的应用为给定输入返回了什么，我们可以在我们的`NodePort`服务上使用`curl`:
```
> curl http://10.231.2.1:32714?equation=1plus1
3
```
基于我们对应用的现有了解，我们假设这个调用应该返回`2`，而不是`3`。我们团队中的应用开发人员要求我们调查任何日志输出，以帮助他们找出问题所在。
从前面的章节中我们知道，您可以使用`kubectl logs `来调查日志输出。在我们的例子中，我们有三个应用的副本，所以我们可能无法在这个命令的一次迭代中找到我们的日志。让我们随机挑选一个 Pod，看看它是否符合我们的要求:
```
> kubectl logs app-2-ss-1
>
```
看起来这不是服务于我们请求的 Pod，因为我们的应用开发人员告诉我们，当向服务器发出`GET`请求时，应用肯定会登录到`stdout`。
我们可以使用一个联合命令从所有三个 Pod 中获取日志，而不是单独检查其他两个 Pod 。命令如下:
```
> kubectl logs statefulset/app-2-ss
```
输出如下:
```
> Input = 1plus1
> Operator = plus
> First Number = 1
> Second Number = 2
```
这就成功了——而且，我们可以看到对我们问题的一些深刻见解。
除了日志线读数`Second Number`之外，一切都如我们所料。我们的请求显然使用了`1plus1`作为查询字符串，这将使第一个数字和第二个数字(由运算符值分割)等于一。
这将需要一些额外的挖掘。我们可以通过发送额外的请求和检查输出来分类这个问题，以便猜测发生了什么，但是在这种情况下，让 bash 访问 Pod 并弄清楚发生了什么可能会更好。
首先，让我们检查一下我们的 Pod 规范，该规范是从之前的 YAML 状态集中删除的。要查看完整的状态集规范，请查看 GitHub 存储库:
Statefulset-output.yaml
```
spec:
  containers:
  - name: app-2
    image: mycustomrepository/app-2:latest
    volumeMounts:
    - name: scratch
      mountPath: /scratch
  - name: sidecar
    image: mycustomrepository/tracing-sidecar
  volumes:
  - name: scratch-volume
    emptyDir: {}
```
看起来我们的 Pod 正在挂载一个空卷作为暂存盘。它还在每个 Pod 中有两个容器——一个用于应用跟踪的边车，以及我们的应用本身。我们需要使用`kubectl exec`命令将这些信息`ssh`输入到其中一个 Pod 中(本练习中哪个并不重要)。
我们可以使用以下命令来完成:
```
kubectl exec -it app-2-ss-1 app2 -- sh.  
```
这个命令应该给你一个 bash 终端作为输出:
```
> kubectl exec -it app-2-ss-1 app2 -- sh
# 
```
现在，使用我们刚刚创建的终端，我们应该能够研究我们的应用代码。出于本教程的目的，我们使用了一个高度简化的 Node.js 应用。
让我们检查一下 Pod 文件系统，看看我们正在使用以下命令处理什么:
```
# ls
# app.js calculate.js scratch
```
看起来我们有两个 JavaScript 文件，以及我们之前提到的`scratch`文件夹。假设`app.js`包含引导和服务应用的逻辑，`calculate.js`包含进行计算的控制器代码，这可能是一个很好的假设。
我们可以通过打印`calculate.js`文件的内容来确认:
break-calculate . js
```
# cat calculate.js
export const calculate(first, second, operator)
{
  second++;
  if(operator === "plus")
  {
   return first + second;
  }
}
```
即使对 JavaScript 知之甚少或一无所知，这里的问题也非常明显。在执行计算之前，代码正在递增`second`变量。
因为我们在 Pod 的里面，并且我们使用的是非编译语言，我们实际上可以内联编辑这个文件！让我们使用`vi`(或任何文本编辑器)来纠正这个文件:
```
# vi calculate.js
```
并将文件编辑为如下内容:
fixed-calculate.js
```
export const calculate(first, second, operator)
{
  if(operator === "plus")
  {
   return first + second;
  }
}
```
现在，我们的代码应该正常运行。重要的是要声明这个修复只是暂时的。一旦我们的 Pod 关闭或被另一个 Pod 替换，它将恢复到最初包含在容器映像中的代码。然而，这种模式确实允许我们尝试快速修复。
使用`exit` bash 命令退出`exec`会话后，让我们再次尝试我们的网址:
```
> curl http://10.231.2.1:32714?equation=1plus1
2
```
如您所见，我们的 hotfixed 容器显示了正确的结果！现在，我们可以用更持久的方式更新我们的代码和 Docker 映像。使用`exec`是排除和调试运行容器的好方法。
# 总结
在本章中，我们了解了如何在 Kubernetes 上对应用进行故障排除。首先，我们介绍了分布式应用的一些常见故障模式。然后，我们学习了如何用 Kubernetes 组件来分类问题。最后，我们回顾了执行 Kubernetes 配置和应用调试的几个场景。您在本章中学习的 Kubernetes 调试和故障排除技术将在您可能使用的任何 Kubernetes 集群和应用中帮助您解决问题。
在下一章 [*第 11 章*](11.html#_idTextAnchor251)*Kubernetes 上的模板代码生成和 CI/CD*中，我们将研究一些生态系统扩展，用于模板化 Kubernetes 资源清单以及与 Kubernetes 的持续集成/持续部署。
# 问题
1.  分布式系统谬论“*拓扑不变*”如何适用于 Kubernetes 上的应用？
2.  Kubernetes 控制平面组件(和 kubelet)是如何在操作系统级实现的？
3.  你将如何着手调试 Pods 陷入`Pending`状态的问题？你的第一步是什么？你的第二个呢？
# 进一步阅读
*   流量整形的 CNI 插件:https://kubernetes . io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/# support-流量整形