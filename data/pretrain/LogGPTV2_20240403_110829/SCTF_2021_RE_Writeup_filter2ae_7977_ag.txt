        {
          v9 = (_BYTE *)*((_QWORD *)v5 + 1);
          v9[12] = v9[13];
          v9[13] = v9[14];
          v9[14] = v9[15];
          v9[15] = 0;
        }
      }
    }
这里调用了 sub_1400010CC 传入的参数函数 sub_140001000，并将返回值赋值给 `*((_QWORD *)v5 + 3)`。
    __int64 __fastcall sub_140001000(void *a1)
    {
      int v1; // er8
      unsigned int *v2; // r9
      __int64 i; // rcx
      v1 = 0;
      if ( *(_DWORD *)a1 )
      {
        if ( *(_DWORD *)a1 == 1 )
        {
          **((_BYTE **)a1 + 1) = byte_140003070;
        }
        else if ( *(_DWORD *)a1 == 2 )
        {
          v2 = (unsigned int *)*((_QWORD *)a1 + 1);
          for ( i = 0i64; i  0xbcd47c
    '''
并且注意到 x[3] & 0xff == 0x10，而在 sub_14000123C 中多加了一个 0x10 ，所以实际上的输入 x[3] 只有 24
位，最后的 0x10 是回调函数里补的。也就是说，转成 uchar ， x 只有 15 字节。
再回到 main ， query(0) 后读取文件 key.bin ，但是并没有给这个文件。
之后输入 flag ， test_charset 函数判断输入的字符是否在
‘0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{|}’
中，并将该字符换成字符在此串中的下标。
紧接着来到 run_function ，又是`MEMORY[0]()`，不多说，改成 jmp ，再 F5 ：
    _BOOL8 __fastcall run_function(char *input, unsigned int a2, char *enc)
    {
      int i; // [rsp+20h] [rbp-28h]
      int j; // [rsp+24h] [rbp-24h]
      int v6; // [rsp+28h] [rbp-20h]
      for ( i = 0; i >= 1;
        }
      }
      return point == 0;
    }
看起来很奇怪，什么都没做？这里需要看一下汇编：
    .text:000000014007186A                 mov     eax, [rsp+48h+j]
    .text:000000014007186E                 mov     ecx, [rsp+48h+i]
    .text:0000000140071872                 lea     eax, [rax+rcx*8]
    .text:0000000140071875                 cdqe
    .text:0000000140071877                 xor     edx, edx
    .text:0000000140071879                 xor     ecx, ecx
    .text:000000014007187B                 div     rcx
    .text:000000014007187E                 mov     [rsp+48h+var_18], rax
    .text:0000000140071883
    .text:0000000140071883 loc_140071883:                          ; CODE XREF: run_function+75↑j
    .text:0000000140071883                 mov     eax, [rsp+48h+var_20]
有一个除零异常，被 ida 忽略掉了，但是这是关键，要用到注册的异常处理函数第二个 if EXCEPTION_INT_DIVIDE_BY_ZERO
，调用函数`funcs[e->ContextRecord->Rax]()`，读汇编计算 rax = i * 8 + j ，所以真实的逻辑应该是：
    _BOOL8 __fastcall run_function(char *input, unsigned int a2, char *enc)
    {
      int i; // [rsp+20h] [rbp-28h]
      int j; // [rsp+24h] [rbp-24h]
      int v6; // [rsp+28h] [rbp-20h]
      for ( i = 0; i >= 1;
        }
      }
      return point == 0;
    }
.data 段中查看 funcs ，是个大小为 3600 的函数数组，这不可能一个一个去分析。随便找几个查看，函数都是这样的形式：
    _enc[e] |= ((_input[a] >> b) & c) >> values[13][20]
    101
    >>> values[50][20]
    64
    >>> values[13][21]
    157
    >>> values[50][21]
    151
`values[13][21]` 与 `values[13][20]` 刚好相差 56 ，也就是 3100 – 3044 ，所以将 13 映射到 21
，这样就找到了解，再反过来求解 flag 。
    #!/usr/bin/python2
    from gmpy2 import invert
    # a[i] * x[i] % p = b[i]
    p = 53816244564283
    a = [649430213, 895805425, 751586893, 3859015203]
    b = [49033969837712, 36224070408864, 1911652611622, 32147829792607]
    x = [0] * 4
    for i in range(4):
        x[i] = int(invert(a[i], p)) * b[i] % p
        # assert(x[i] * a[i] % p == b[i])
        # print(hex(x[i]))
    '''
    0xd4933333
    0x7bde8f00
    0x31d84f77
    0xbcd47c10 -> 0xbcd47c
    '''
    assert((x[3] & 0xff) == 0x10)
    x[3] >>= 8
    # convert x to byte array
    y = []
    for i in x:
        y.append(i & 0xff)
        y.append((i >> 8) & 0xff)
        y.append((i >> 16) & 0xff)
        y.append((i >> 24) & 0xff)
    assert(y[-1] == 0)
    x = y[: -1]
    del y
    def qword(data, index):
        x = 0
        for i in range(8):
            x |= ord(data[i + index]) > b) & c) > (i % 4 * 2)) & 3) << (result[i] % 3 * 2)
    table = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{|}'
    for i in range(len(flag)):
        flag[i] = table[flag[i]]
    print(''.join(flag))
最后一个 ‘{‘ 转成 ‘}’ 即可。
flag: SCTF{Dr1ver|Tim3|10}