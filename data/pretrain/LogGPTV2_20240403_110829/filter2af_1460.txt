**Author: w7ay@Knownsec 404 Team  
Chinese version:**

In this paper, I will delve into the rationale behind Pocsuite3's features and its implementation, rather than providing a mundane introduction to its usage. If you are interested in developing a similar tool, the concepts and design principles of Pocsuite3 may be beneficial. This document also captures some of the thoughts and insights that emerged during the development process.

## Overview
Pocsuite3 is an open-source remote vulnerability testing and proof-of-concept (PoC) development framework developed by the [**Knownsec 404 Team**](http://www.knownsec.com/). It includes a robust PoC engine and a variety of powerful features tailored for penetration testers and security researchers. The framework is entirely written in Python3 and is compatible with Windows, Linux, and Mac OS X. It has been re-written and upgraded from the original Pocsuite to enhance its operational flexibility and functionality.

## Inspiration and Influence
Pocsuite3 draws inspiration from several open-source and mature frameworks. Its code structure is influenced by Sqlmap, while its console mode is inspired by routersploit and Metasploit. Consequently, the format of the PoC code has been slightly modified, although efforts have been made to keep changes minimal. Pocsuite3 also offers a simple API, facilitating integration with other security tools.

## Installation
### Pip Installation
```bash
pip install -U pocsuite3 --no-cache-dir
```
To verify the installation:
```bash
pocsuite --version
```

### Source Installation
1. Download the source code:
   ```bash
   wget https://github.com/knownsec/pocsuite3/archive/master.zip
   unzip master.zip
   ```
2. Install the required dependencies:
   ```bash
   pip install requests requests-toolbelt
   ```
   For Windows, you also need:
   ```bash
   pip install pyreadline
   ```
3. Finally, check the version:
   ```bash
   python cli.py --version
   ```

**Note:** Only one installation method should be used; do not install both simultaneously. The source installation method is recommended.

## Help
In most cases, using the `-h` flag can provide detailed information about Pocsuite3. Here are some examples:

- A simple test:
  ```bash
  python3 cli.py -r pocs/ecshop_rce.py --dork ecshop --threads 5
  ```
  This command uses ZoomEye to search for "ecshop" and probes it with `ecshop_rce.py`, using 5 threads.

- Pocsuite3 operates in `verify` mode by default, which minimizes the impact on the target. Other modes include `attack` and `shell`, which perform more aggressive actions. (PoC support is required, and Pocsuite3 provides a full API interface.)

### Shell Mode
Pocsuite3 introduces a new shell mode. When this parameter is used, Pocsuite3 listens on a specified port and waits for the target to connect. We provide reverse payloads in multiple languages and generate shellcode executable on Windows and Linux platforms.

### Configuration File
For complex commands, Pocsuite3 allows running from a configuration file. For example, to test a Redis unauthorized access vulnerability, you can modify the `pocsuite.ini` file.

- Example:
  ```bash
  python3 cli.py -c ../pocsuite.ini
  ```

Using the `comparison` option provides more detailed information. If you are a Zoomeye VIP, you can also identify honeypot information while collecting targets. Currently, only data obtained through the Zoomeye API can be marked as honeypots. Shodan and Censys do not yet offer this feature.

## Plugin Ecosystem
Pocsuite3 supports various plugins, categorized into three types: Targets, PoCs, and Results.

### Targets Plugin
In addition to loading local targets with `-u` and `-f`, you can write a targets plugin to load targets from any source (e.g., Zoomeye, Shodan, or even the web). Pocsuite3 includes four built-in target loading plugins. Using `--dork`, `--dork_zoomeye`, `--dork_shodan`, or `--dork_censys` automatically loads the relevant plugins.

### PoCs Plugin
Instead of calling PoCs only from Seebug, you can pull them as plugins from any accessible source, including GitHub repositories.

### Results Plugin
The Results plugin processes scan results. You can refer to the two built-in plugins: `html_report` and `txt_report`. The results are real-time, depending on the implementation in `plugins/file_record.py`.

### Calling Plugins
You can specify plugins using the `--plugins` flag, separating multiple plugins with commas. For example:
```bash
--plugins html_report
```
generates an HTML report.

## Built-in API
Based on our experience with vulnerability response, Pocsuite3's built-in API covers a wide range of PoC functionalities. Here are two interesting examples:

### Shellcode Building
For special Linux and Windows environments, we provide a shellcode builder for reverse shells in x86 and x64 environments. This feature automatically writes and executes shellcode on the target machine, provided you have command execution permission.

### HTTP Service
If you are familiar with the Jenkins RCE exploit, you know the challenges in creating PoCs. In `verify` mode, you can use ceye, but in `attack` and `shell` modes, you need to create and upload your own JAR files. To address this, Pocsuite3 includes APIs for packaging JAR files and providing HTTP services, making PoC writing more automated.

## Custom Parameters
As security awareness increases, vulnerabilities often require specific permissions to trigger. Pocsuite3 allows defining custom parameters in the `_options` method. For example:
```bash
python3 cli.py -u http://localhost -r tests/login_demo.py --username "404team" --password "password"
```
If there are conflicts with existing parameter names, Pocsuite3 will prompt you to modify the custom parameter names in the PoC.

## Console
Pocsuite3 also supports an interactive command mode, fully compatible with PoC in CLI mode. On Linux and Mac, this mode offers a better user experience. Use `help` to learn more, and you can load PoC plugins with `use + number` or the full path. Some command aliases are hidden, waiting for users to discover them.

## Integration
We encourage integrating Pocsuite3 into your security projects. Simply import Pocsuite3 as a module and use the `pocsuite3.api` to access all its interfaces. Hereâ€™s a simple example:
```python
from pocsuite3.api import init_pocsuite, start_pocsuite, get_result, paths
import os

config = {
    'url': 'https://www.baidu.com/',
    'poc': os.path.join(paths.POCSUITE_ROOT_PATH, "../tests/login_demo.py"),
    'username': "asd",
    'password': 'asdss',
    'verbose': 0
}

init_pocsuite(config)
start_pocsuite()
result = get_result().pop()
print(result)
```

## Conclusion
A comprehensive framework like Pocsuite3 is not just about handling tasks in batches. It requires continuous improvement and practical application. When building your own PoC framework, understand your needs and find elegant solutions. The next section will discuss the framework structure in Pocsuite3.

## About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was founded by a group of high-profile international security experts. It has over a hundred top-tier security talents nationwide, providing advanced network security solutions for the government and enterprises. Knownsec specializes in integrated network attack and defense technologies, product R&D, and visualization solutions that meet world-class security standards. The company's technical strength is recognized by the State Ministry of Public Security, the Central Government Procurement Center, the Ministry of Industry and Information Technology (MIIT), China National Vulnerability Database of Information Security (CNNVD), the Central Bank, the Hong Kong Jockey Club, Microsoft, Zhejiang Satellite TV, and other well-known clients.

The 404 Team, the core security team of Knownsec, focuses on security vulnerability research and offensive and defensive technology in areas such as Web, IoT, industrial control, and blockchain. The team has submitted vulnerability research to many well-known vendors, including Microsoft, Apple, Adobe, Tencent, Alibaba, and Baidu, and has received high acclaim in the industry. Notable contributions from the 404 Team include the [KCon Hacking Conference](http://kcon.knownsec.com/), [Seebug Vulnerability Database](https://www.seebug.org/), and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/).