′ = s − α(mod q).
s
In the end, the recipient obtains a valid Schnorr signature
(e′, s′), such that s′G + e′y = R and H(m, t) = e′, where
t = R′
x .
The blind signature scheme over elliptic curve proposed in [20]
is not directly applicable in implementing Bitcoin transactions be-
cause the proposed blind signature is different from that of ECDSA
signature. Before Bitcoin appeared, Metet [11] had given a blind
signature scheme compatible with DSA and ECDSA in 2004 on the
basis of [12]. The scheme is based on the Paillier cryptosystem [15].
In 2012, Ladd [10] used Metet’s scheme for a bitcoin transaction
anonymity. The Paillier cryptosystem can be described as follows.
• Key generation: A user randomly choose two large distinct
primes p, q and an element д of Z∗
N 2 whose order is a nonzero
multiple of N = pq, publishes the public keys (N , д), and
keeps the private keys (p, q) secret.
• Encryption: Given the public key (N , д) of the user, one can
encrypt a message m, where m is a positive integer less than
N , by randomly choosing r from Z∗
N 2 and computing
c = E(m) = дmr N (mod N 2),
where c is the ciphertext of m. Since r is randomly chosen,
the ciphertext c of a message m is random. Therefore, Paillier
cryptosystem is a probabilistic encryption.
• Decryption: The user can decrypt the ciphertext c with the
private key (p, q) by computing
m = cλ(mod N 2) − 1
where λ = lcm(p − 1, q − 1).
N
(p − 1)−1(q − 1)−1(mod N),
Paillier cryptosystem has two homomorphic encryption proper-
ties as follows: E(m1)E(m2) = E(m1 + m2), E(m)a = E(am) for any
m1, m2, m, a ∈ ZN .
In [10, 11], assume that ECDSA chooses an elliptic curve E and
a group generator G of prime order q, the public and private keys
of the signer are (A, xa), such that A = xaG. When the recipient
wishes to get the signer’s blind signature on a message h (a hash
value), the blind signature scheme can be described as follows.
• Step 1. The recipient begins by picking a Paillier cryptosys-
tem with a public key n, whose size is between q6 and q7,
and sends n to the signer.
• Step 2. The signer randomly chooses an integer ka in the
range [1, q − 1] and sends kaG to the recipient.
• Step 3. The recipient randomly chooses an integer kb and
computes kb(kaG). Let t be the x-coordinate of that point,
and let za = 1/ka and zb = 1/kb. Then the recipient sends
Paillier encryptions
c1 = E(tzb(mod q)), c2 = E(hzb(mod q))
along with a proof as in [2] that c1 and c2 are encryptions of
integers less than q and greater than 1.
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand615AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
Xun Yi and Kwok-Yan Lam
• Step 4. The Paillier cryptosystem is additively homomorphic
and permits efficient multiplication of plaintexts by con-
stants. Multiplying ciphertexts is addition of the plaintext
values, and exponentiation is multiplication by a constant.
Based on the properties, the signer computes
c = c
xaza
1
c
za
2 E(rq),
where r is a random integer in the range [1, q5], and returns
c to the recipient.
• Step 5. The recipient decrypts c to obtain s, the other half
of the signature, after taking it modulo q. As the public key
is large enough to prevent overflow, this gives the correct
answer.
This scheme is compatible with the ECDSA in the bitcoin proto-
col, but the detail proof that c1 and c2 are Paillier encryptions of
integers less than q and greater than 1 has not been provided. In addi-
tion, the recipient can obtain not only s = (kakb)−1(h +txa)(mod q)
but also k−1
b t(mod q))xa +dq.
It is unclear if this has any impact on the security of the signature
scheme.
b h)(mod q)+k−1
a (mod q)(k−1
a (mod q)(k−1
3 NEW BLIND ELLIPTIC CURVE DIGITAL
SIGNATURE ALGORITHM (ECDSA)
3.1 Modified Paillier Cryptosystem
The proposed blind ECDSA will be built on a variant of the Paillier
cryptosystem. In this section, we describe the modified Paillier
cryptosystem.
fied Paillier cryptosystem is described as follows.
Given a large prime q (a public parameter of ECDSA), the modi-
• Key Generation: A user randomly choose two large distinct
primes p, t, such that дcd(p − 1, q) = 1 and дcd(t − 1, q) = 1,
and computes
N = pqt
д = (1 + N)pt(mod N 2)
(1)
(2)
and publishes the public keys (N , д), and keeps the private
keys (p, t) secret.
• Encryption: Given the public key (N , д) of the user, one can
encrypt a message m, where m is a positive integer less than
q, by randomly choosing r from Z∗
C = дmr N (mod N 2)
(3)
C is the ciphertext of m. Since r is randomly chosen, the
ciphertext C of a message m looks like a random number.
• Decryption: The user can decrypt the ciphertext C with the
N 2 and computing
private key (p, t) by computing
(p−1)(q−1)(t−1)(mod N 2)
(4)
D = C
′ = [(D − 1)/(Npt)][(p − 1)(q − 1)(t − 1)]−1(mod q)
(5)
m
Like the original Paillier cryptosystem, the modified scheme also
has the homomorphic encryption properties.
Next, we show that the decryption algorithm can recover a ci-
phertext produced by the encryption algorithm to a plaintext.
Theorem 1 (Correctness). If C is computed as above, we have
m′ = m.
Proof. Since д = (1 + N)pt(mod N 2), we have
дq = (1 + N)pqt = (1 + N)N = 1 + N 2 = 1(mod N 2).
Therefore,
D = C
(p−1)(q−1)(t−1)
= дm(p−1)(q−1)(t−1)(mod q)
= (1 + N)pt[m(p−1)(q−1)(t−1)(mod q)](mod N 2)
= 1 + pt[m(p − 1)(q − 1)(t − 1)(mod q)]N
r N(p−1)(q−1)(t−1)
where pt[m(p −1)(q−1)(t −1)(mod q)] < N . Note that according to
the Euler theorem, X ϕ(N 2) = 1(mod N 2) for any non-zero integer
X, where ϕ(N 2) = N(p − 1)(q − 1)(t − 1).
In view of this, we have
pt[m(p − 1)(q − 1)(t − 1)(mod q)] = (D − 1)/N .
Therefore, we have
m(p − 1)(q − 1)(t − 1)(mod q) = (D − 1)/(Npt),
from which we can obtain
m = [(D − 1)/(Npt)][(p − 1)(q − 1)(t − 1)]−1(mod q).
Based on Eq. (5), we can see m′ = m. Therefore, the theorem is true.
△
3.2 New Blind ECDSA
Based on the modified Paillier cryptosystem described in the above
section, we propose a blind ECDSA.
Suppose that the group generator G of the elliptic curve used
by the elliptic curve digital signature algorithm (ECDSA) has a
large prime order q. Assume that the recipient wishes the signer
(with the public key PK = skG) to produce a blind signature on
the hash value h of his message (e.g., his public key for signature
verification), the blind ECDSA between the recipient R and the
signer S can be described as follows:
• Step 1: The signer S randomly chooses an integer k1 from 2
to q − 1 and computes
(6)
K1 = k1G
and sends it to the recipient R.
• Step 2: After receiving K1 from the signer, the recipient R
randomly chooses an integer k2 from 2 to q−1 and computes
(7)
Next, the recipient R follows the modified Paillier cryptosys-
tem, described in the last session, to chooses two distinct
large primes p, t, and computes the public key (N , д). Next,
he encrypts h and Kx , respectively, i.e., he randomly chooses
r1, r2 from Z∗
K = (Kx , Ky) = k2K1
N 2 and computes
C1 = дhr N
C2 = дKx r N
1 (mod N 2)
2 (mod N 2)
(8)
(9)
and submits (N , д, C1, C2) to the signer S.
In addition, the recipient R needs to prove to the signer that
the encryptions are constructed correctly by zero-knowledge
proof. The interactive zero-knowledge proof is described as
follows: To prove a ciphertext C = дmr N (mod N 2) to be
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand616A New Blind ECDSA Scheme for Bitcoin Transaction Anonymity
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
constructed according to the scheme, the recipient R ran-
domly chooses m′ ∈ Zq and r′ ∈ Z∗
N 2, computes C′ =
r′N (mod N 2) and submits C′ to the signer S, who ran-
дm′
domly selects a bit b ∈ {0, 1} and returns b to the recipient
R. If b = 0, the recipient R is required to submit m′, r′ to
the signer S, who checks if C′ = дm′
r′N (mod N 2). If b = 1,
the recipient R is required to submit m′′ = m + m′(mod q)
and r′′ = rr′(mod N 2) to the signer, who checks if CC′ =
r′′N (mod N 2). The above process is repeated for ℓ times
дm′′
between the recipient R and the signer S. If the recipient
R answers all questions correctly, the signer S is sure that
the ciphertext C is constructed correctly with a probabil-
ity 1 − 1/2ℓ. The interactive zero-knowledge proof can be
transferred to a non-interactive protocol according to [6].
• Step 3: After receiving (N , д, C1, C2) and verifying that (C1, C2)
are constructed correctly, the signer S randomly choose r
from 2 to N and computes
2 )k−1
1 (mod q)
and sends C to the recipient R.
C = (C1Csk
• Step 4: After receiving C, the recipient R computes
r N (mod N 2)
(10)
s = k
−1
2 D(C,(p, t))(mod q)
(11)
where D(C,(p, t)) stands for the decryption algorithm. In the
end, the recipient R obtains a blind signature (Kx , s).
Theorem 2 (Correctness). If K1, K, C1, C2, C, s are computed as
above, (Kx , s) is a valid ECDSA signature of the signer.
2 (mod N 2), we
Proof. Because C1 = дhr N
have
2 )k−1
r N
2 )sk)k−1
1 (дKx r N
1 r N
k−1
1 (h+Kx sk)(mod q)(r
1
1
1 (mod N 2), C2 = дKx r N
1 (mod q)
C = (C1Csk
= (дhr N
= дk−1
r)N (mod N 2)
k−1
1 sk
2
r
Note that дq = (1 + N)pqt = (1 + N)N = 1(mod N 2).
Therefore, we have
s = k
In addition,
−1
2 D(C,(p, t)) = k
−1
2 k
−1
1 (h + Kx sk)(mod q).
K = (Kx , Ky) = k2K1 = k2(k1G) = k1k2G
According to the ECDSA, (Kx , s) is a valid ECDSA signature. △
Our scheme is compatible with the ECDSA in the bitcoin protocol.
We also provide the proof that C1 and C2 are constructed correctly
by zero-knowledge proof. In addition, the recipient can obtain only
the blind signature K = k1k2G, s = (k1k2)−1(h + Kx sk)(mod q)
and nothing else. This is better than [10, 11], where the recipient
obtains k−1
b t(mod q))xa +dq
at first and then derives s = (kakb)−1(h + txa)(mod q) after taking
it modulo q.
4 ANONYMOUS BITCOIN TRANSACTION
b h)(mod q)+k−1
a (mod q)(k−1
a (mod q)(k−1
BASED ON BLIND ECDSA
In this section, we address the anonymity requirement by apply-
ing the proposed blind ECDSA to achieve anonymity in Bitcoin
transaction. We assume that the bitcoin provider B has a number
of bitcoins with the same public key PKB, where PKB = skBG and
skB is the corresponding signing key of the provider B. When a
client C buys a bitcoin from the provider B, the client C and the
provider B interact as follows:
• Step 1. The client C pays the provider B the amount of a
bitcoin by bank transfer, credit card payment, or some other
payment methods. Usually, the client C is required to pay
slightly more than the amount of a bitcoin to the provider
B, e.g., an extra exchange fee.
• Step 2. The client C generates his ECDSA public and private
key pair (PkC , skC), such that PKC = skcG, which will be
used for next round of transaction, and computes the hash
value of his public key, denoted as h = H(PKC).
• Step 3. The client C (as the recipient) and the provider B
(as the signer) run the blind ECDSA as described in the
last section. In the end, the client C obtains a blind ECDSA
signature (Kx , s) of the provider B on h.
• Step 4. Later, the client C broadcasts {PKc ,(Kx , s)} in the
network of bitcoin nodes and miners. Each node or miner is
able to verify the signature of the provider B on the public
key PKC of the client C on the basis of the public key PKB
of the provider. Note that one signature of the provider B
implies to transfer only one bitcoin to a client C from the
provider B.
• Step 5. According to the public key PKC of the client C, a
transaction is constructed, such as the provider B transfers
one bitcoin to the client C. After the transaction, the number
of bitcoins of the provider B is reduced by one, and the client
C has one bitcoin.
Remark. When the client C pays the provider B the amount of a
bitcoin in the first step, the provider B may know the identity of
the client C. However, when the client C broadcasts the transaction
in Step 4, the provider B can only know that the client C is one
of those clients who bought bitcoins from the provider, but the
provider B cannot tell whom he is.
5 SECURITY ANALYSIS
First of all, we analyze the semantic security of the modified Paillier
cryptosystem. Following the security proof of the original Paillier
cryptosystem [15], we begin by briefly introducing composite de-
gree residues as a natural instance of higher degree residues, and
give some basic related facts. The originality of our setting resides
in using of a square number as modulus. The modulus is the product