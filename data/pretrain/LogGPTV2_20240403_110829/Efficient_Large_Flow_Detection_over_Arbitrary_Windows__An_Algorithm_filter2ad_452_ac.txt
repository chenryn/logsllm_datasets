optimization techniques to reduce the number of memory
accesses and the processing time.
Reducing number of memory accesses. We minimize
the number of memory accesses per packet via the following
technique. First, we keep counters in a data structure that
allows insertion, deletion, and ﬁnding the minimum in loga-
rithmic time. Data structures such as balanced search trees
and heaps can satisfy our requirements. Moreover, counter
values are not absolute but relative to a ﬂoating ground,
cground. Hence, the decrement operation, which requires
decreasing all counters previously, can now be achieved by
elevating the ﬂoating ground. The detection function be-
comes cf − cground > βBF .
The increment operation on Line 12 takes O(1) time using
an associative array. Adding a value to an empty counter as
described on Line 14 takes O(log n) time because we have to
insert the counter to the data structure. To prevent counter
overﬂow, EARDet periodically resets the ﬂoating ground
to zero and deducts all counters accordingly.
Eﬃcient counter update for virtual traﬃc. Virtual
traﬃc ensures accurate accounting of unused bandwidth, but
eﬃcient implementation is needed to handle virtual traﬃc
at line speed. We now discuss how to eﬃciently update
EARDet’s counters for virtual traﬃc. Particularly, we aim
to divide virtual traﬃc into multiple virtual ﬂows in a way
to minimize the time to process such virtual ﬂows. The only
constraint is that each virtual ﬂow should comply with the
low-bandwidth threshold to avoid triggering false alarms.
As Line 20 of Algorithm 1 shows, for each unit u of
the virtual traﬃc, EARDet updates its counters (i.e.,
Update(S, u)) as if the traﬃc unit belongs to a new ﬂow.
We can minimize the number of updates by maximizing the
unit size. To avoid false detection, the maximum size per
unit is βT H bytes. As βT H must be larger than the minimum
packet size (i.e., 40 bytes) for practical use, the overhead of
using βT H -byte virtual ﬂows is bounded by the worst-case
scenario where the link is congested by minimum-sized pack-
ets.
We can further optimize this task based on the following
observation: Once all counters become empty, they should
stay empty until the next real packet comes. Furthermore,
since the maximum counter value is βBF + α, counters will
all be empty if the size of the virtual ﬂow ≥ (βBF + α) · n.
(A tighter condition is if the virtual traﬃc size ≥ (maxj cj) ∗
n − Pj cj, but this requires keeping track of the sum of all
counters.)
In other words, EARDet can simply reset all
counters to zeros and avoid any update if the virtual traﬃc
size exceeds a certain threshold.
Counter implementation.
For eﬃciency, counters are
implemented as integers (e.g., in bytes) rather than non-
integer numbers. While packet sizes are always multiples of
bytes, the size of virtual traﬃc may be non-integer, which
introduces biases on EARDet’s guarantees. For example,
given a 800Mbps link and a nanosecond time precision at
the router, the size of a 1-ns virtual traﬃc is 0.1 bytes.
2141, v′
a v′
We bound such biases with a slightly modiﬁed algorithm
that adjusts virtual traﬃc. Let us denote by {v1, v2, · · · } the
sizes of a sequence of virtual traﬃc and by {v′
2, · · · } the
adjusted sizes. We maintain an extra ﬁeld called “carryover”,
co, which keeps the amount of uncounted virtual traﬃc. co
is initialized to zero, and we ensure that −0.5 ≤ co  βℓ)
Parameters that depend on tunable parameters:
βh , Burst for high-bandwidth threshold
β∆ , βT H − βℓ
Other notation:
R(t1, t2) , Average ﬂow rate in [t1, t2)
tincb , Incubation period of large ﬂows
RN F N , No-FNℓ rate
RN F P , No-FPs rate
γht+βh over a time window of length t, when γh ≥ RN F N =
ρ
n+1 and βh ≥ α + 2βT H .
ρ
Proof sketch:
Firstly, we prove that EARDet satisﬁes
L3 in Theorem 3. According to Algorithm 1, the maximum
value of each counter ci is βT H + α, and there are at most n
non-zero counters at any time. Also, given any valid synopsis
S = {ci} we can construct a packet stream X consisting of
ci bytes for ﬂow i and no space between packets, and by
construction S = Update(S0, X). Combining the above two
arguments and the deﬁnition of the distance function, we
conclude that dis(S0, S) ≤ size(X )
. That is,
setting ∆ = (βT H +α)n
satisﬁes L3.
≤ (βT H +α)n
ρ
ρ
h + β′
n+1 and β′
h = RN F N = ρ
Next we prove that EARDet satisﬁes L2 in Theorem 3
as well when setting γ′
h = βT H .
We prove by contradiction and assume there were a ﬂow f
violating γ′
h in the landmark window model at time t
but not being detected (i.e., cf < βT H ). This assumption
implies that more than γ′
h − βT H amount of ﬂow f
would have been canceled out6 during the decrement step,
or equivalently, more than (γ′
h − βT H ) · (n + 1) =
γ′
ht · (n + 1) = ρt amount of traﬃc would have been canceled
out. This statement, however, contradicts the setting where
the maximum traﬃc for t units of time is ρt. Thus, f cannot
escape from EARDet, and L2 is satisﬁed by EARDet.
ht + β′
ht + β′
(βT H +α)n
h = ρ
= βT H + n
Based on Theorem 3, we conclude that EARDet satis-
ﬁes A2 when γh = γ′
h + γh∆ =
βT H + ρ
In partic-
n+1
ular, EARDet catches every ﬂow violating the threshold
T Hh(t) = γht + βh when γh ≥ RN F N and βh ≥ α + 2βT H .
That is, EARDet catches all large ﬂows in the arbitrary
window model. (cid:4)
n+1 and βh ≥ β′
n+1 (βT H + α).
ρ
4.2 Small-Flow False-Positive Analysis
As discussed in Section 3.1, no algorithm can satisfy A2 in
Theorem 3 and L1 in Theorem 2 at the same time. Hence,
rather than applying Theorem 2, we have to take a diﬀerent
approach in proving the no-FPs property.
6A packet byte is canceled out if it does not contribute to
the corresponding counter.
To analyze EARDet’s no-FPs property, we consider how
EARDet increases and decreases its counter values. Firstly,
let us examine all cases based on the types of incoming ﬂows.
We say a ﬂow is old if it is stored in the counters currently;
otherwise the ﬂow is new.
1. When the incoming ﬂows are virtual ﬂows and there
are l empty counters, in a time window t, the decre-
ρ
ment is
l+1 t on all counters, and the increment is 0.
(l = 0, 1, 2, 3, ..., n)
2. When the incoming ﬂows are new real ﬂows and there
is no empty counter, in a time window t, the decrement
is ρt on all counters and the increment is 0 (which is
the same as the ﬁrst case when l = 0).
3. When the incoming ﬂows are old real ﬂows, or new
real ﬂows and there are some empty counters, in time
interval t, the decrement is 0 and the increment is ρ t
on one counter.
Thus, in the ﬁrst and second cases, when there are l empty
counters in the detector, the decrement is always ρ
l+1 t in the
interval of t; and in the third case, the increment is always
ρ t on one counter in the interval of t. Finally, the increment
and decrement cannot happen at the same time.
Lemma 5. For any small ﬂow f that complies with the
low-bandwidth threshold (i.e., T Hℓ(t) = γℓ t + βℓ), once the
ﬂow f is associated to a counter at t1, this counter will be
always lower than βT H after time t1 + tβℓ , if the counter
is occupied by the same ﬂow as the ﬂow f , where tβℓ =
(n−1)α+(n+1)βℓ
[1−(n+1)γℓ/ρ]ρ .
Due to space limitations, the detailed proofs are in our
technical report [37].
Theorem 6. No-FPs property.
EARDet will not
catch any ﬂow complying with the low-bandwidth thresh-
old T Hℓ(t) = γt + βℓ for all time windows of length t,
when 0 < βℓ < βT H , γℓ < RN F P , where RN F P =
(n−1)α+(n+1)βℓ+(n+1)β∆
β∆
· ρ.
Proof sketch: According to Lemma 5, to avoid catching
a small ﬂow f , the counter should be smaller than βT H be-
fore tβℓ . Hence, we choose a γℓ to achieve γℓ tβℓ + βℓ < βT H .
Then, (n−1)α+(n+1)βℓ
,
[1−(n+1)γℓ/ρ]ρ < βT H −βℓ
β∆
γℓ
⇔ γℓ <
(n − 1)α + (n + 1)βℓ + (n + 1)β∆ · ρ
The theorem is proved. (cid:4)
Interestingly, Theorem 6 shows that γℓ approaches
(1)
ρ
n+1 as
β∆ increases, but cannot go beyond ρ
n+1 .
4.3 Relationship between Low-Bandwidth
and High-Bandwidth Thresholds
Before the discussion, let us deﬁne two concepts:
Rate Gap: The ratio between γh and γℓ (i.e. γh/γℓ);
Burst Gap: The ratio between βh and βℓ (i.e. βh/βℓ).
Based on Theorems 4 and 6, the minimum rate gap is:
(γh/γℓ)min = RN F N
RN F P
= (n−1)α+(n+1)(βℓ+β∆)
Given β∆ = βT H − βℓ and n + 1
β∆(n+1)
.
= n
.
= n − 1, we get
(γh/γℓ)min
.
= 1 +
2α/β + 2
βh/βℓ − (α/βℓ + 2)
(2)
216Thus, the minimum possible rate gap (γh/γℓ)min is mainly
inﬂuenced by the burst gap βh/βℓ. Equation (2) tells us a)
βh/βℓ cannot be lower than α/βℓ + 2. b) EARDet only
needs a low βh/βℓ to achieve small enough (γh/γℓ)min. For
example, to achieve (γh/γℓ)min = 10, we only need βh/βℓ =
2.53. c) (γh/γℓ)min cannot be lower than 1.
(γh/γℓ)min
approaches to 1 as βh/βℓ grows.
4.4 Incubation Period of Large Flows
To deﬁne the incubation period, we ﬁrst consider a large
ﬂow that violates the high-bandwidth threshold over [t1, t2),
and the packet at ta triggers the detection. Because of
EARDet’s no-FNℓ property, ta ≤ t2. The incubation pe-
riod is deﬁned as ta − t1, representing the time duration for
which the large ﬂow remains under the radar. We bound
the incubation period as follows.
Theorem 7. For the ﬂow f which violates T Hh(t) over
some time window [t1, t2), if its average rate R(t1, ta) is
larger than Ratk in time interval of [t1, ta) (Ratk is a con-
stant rate larger than RN F N = ρ
n+1 ), then f ’s incubation
period is bounded by
tincb <
α + 2βT H
Ratk − ρ
n+1
.
(3)