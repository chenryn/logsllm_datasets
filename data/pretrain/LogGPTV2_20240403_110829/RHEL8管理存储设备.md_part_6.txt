#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#the_maximum_size_of_a_partition_2}分区的最大大小
设备中的分区大小受分区表类型的限制：
::: itemizedlist
-   在使用[**主引导记录（MBR）**]{.strong}
    分区表格式化的设备中，最大值为 2TiB。
-   在使用 [**GUID 分区表(GPT)**]{.strong} 格式化的设备中，最大大小为
    8ZiB。
:::
如果要创建一个大于 2TiB 的分区，该磁盘必须使用 GPT 格式化。
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#size_alignment_2}大小协调
`parted`{.literal} 工具可让您使用多个不同的后缀指定分区大小：
::: variablelist
[MiB、GiB 或 TiB]{.term}
:   大小为 2 的指数代表。
    ::: itemizedlist
    -   分区的起点与根据大小指定的扇区一致。
    -   结束点与指定大小减 1 扇区一致。
    :::
[MB、GB 或 TB]{.term}
:   以 10 的指数表示容量。
    起始和结束点在指定单元的一半内一致：例如,使用 MB 后缀时 ±500KB。
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#con_partition-types_assembly_creating-a-partition}分区类型 {.title}
:::
本节描述了指定分区类型的不同属性。
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#partition_types_or_flags}分区类型或标志
分区类型或标志仅供运行中的系统少用。但是，分区类型与实时生成器有关，如
`systemd-gpt-auto-generator`{.literal}，它们使用分区类型自动识别和挂载设备。
::: itemizedlist
-   `parted`{.literal}
    [*工具通过将分区类型映射到标记来提供对分区类型的一些控制*]{.emphasis}。parted
    实用程序只能处理某些分区类型：例如 LVM、swap 或 RAID。
-   `fdisk`{.literal} 工具通过指定十六进制代码来支持全范围的分区类型。
:::
#### []{#assembly_getting-started-with-partitions_managing-storage-devices.html#partition_file_system_type}分区文件系统类型
在创建分区时，`parted`{.literal} 工具接受文件系统类型参数。该值用于：
::: itemizedlist
-   在 MBR 中设定分区标记，或者
-   在 GPT 中设定分区 UUID 类型。例如, `swap`{.literal}、`fat`{.literal}
    或 `hfs`{.literal} 文件系统类型设置了不同的 GUID。默认值为 Linux
    Data GUID。
:::
参数不会以任何形式修改分区中的文件系统。它只区分受支持的标志或 GUID。
支持以下文件系统类型：
::: itemizedlist
-   `xfs`{.literal}
-   `ext2`{.literal}
-   `ext3`{.literal}
-   `ext4`{.literal}
-   `fat16`{.literal}
-   `fat32`{.literal}
-   `hfs`{.literal}
-   `hfs+`{.literal}
-   `linux-swap`{.literal}
-   `ntfs`{.literal}
-   `reiserfs`{.literal}
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#partition-naming-scheme_assembly_creating-a-partition}分区命名方案 {.title}
:::
Red Hat Enterprise Linux 使用基于文件的命名方案，格式为
`/dev/xxyN`{.literal}。
设备和分区名称由以下结构组成：
::: variablelist
[`/dev/`{.literal}]{.term}
:   这是所有设备文件所在的目录名称。由于分区放置在硬盘中，而硬盘是设备，代表所有可能分区的文件位于
    `/dev`{.literal} 中。
[`xx`{.literal}]{.term}
:   分区名的前两个字母标明分区所在设备的类型，通常是 `sd`{.literal}。
[`y`{.literal}]{.term}
:   这个字母标明分区所在的设备。例如：第一个硬盘为
    `/dev/sda`{.literal}，第二个硬盘为
    `/dev/sdb`{.literal}，以此类推。在超过 26
    个驱动器的系统中，您可以使用更多字母。例如：
    `/dev/sdaa1`{.literal}。
[`N`{.literal}]{.term}
:   最后的字母代表分区的数字。前四个分区（主分区或扩展分区）由
    `1`{.literal} 到 `4`{.literal} 进行编号。逻辑分区从 `5`{.literal}
    开始。例如： `/dev/sda3`{.literal}
    是第一个硬盘上的第三个主分区或扩展分区，`/dev/sdb6`{.literal}
    是第二个硬盘中的第二个逻辑分区。驱动器分区编号只适用于 MBR
    分区表。请注意，[**[*N*]{.emphasis}**]{.strong} 并不总是意味着分区。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
即使 Red Hat Enterprise Linux 可以识别和引用
[*所有*]{.emphasis}类型的磁盘分区，它可能无法读取文件系统，因此无法访问分区类型中保存的数据。然而，在很多情况下，成功访问专用于另一个操作系统的分区中的数据是可能的。
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#mount-points-and-disk-partitions_assembly_creating-a-partition}挂载点和磁盘分区 {.title}
:::
在 Red Hat Enterprise Linux
中，每个分区都被用来成为支持一组文件和目录所必需的存储的一部分。这可使用名为
[*mounting*]{.emphasis}
的进程完成，该进程可将分区和目录相关联。[*挂载分区后，可以从指定的目录（称为挂载点*]{.emphasis}
）开始使用其存储。
例如：如果分区 `/dev/sda5`{.literal} 挂载到 `/usr/`{.literal}，这意味着
`/usr/`{.literal} 下的所有文件和目录实际都驻留在 `/dev/sda5`{.literal}
中。因此 `/usr/share/doc/FAQ/txt/Linux-FAQ`{.literal} 文件将存储在
`/dev/sda5`{.literal} 中，而 `/etc/gdm/custom.conf`{.literal}
文件则不会。
继续这个示例，`/usr/`{.literal}
以下一个或多个目录可能是其他分区的挂载点。例如，一个
`/dev/sda7`{.literal} 分区可挂载到 `/usr/local`{.literal} 上，这意味着
`/usr/local/man/whatis`{.literal} 将位于 `/dev/sda7`{.literal} 中而不是
`/dev/sda5`{.literal}。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#proc_creating-a-partition-with-parted_assembly_creating-a-partition}使用 parted 创建分区 {.title}
:::
这个步骤描述了如何使用 `parted`{.literal} 工具在块设备中创建新分区。
::: itemizedlist
**先决条件**
-   磁盘上有一个分区表。有关如何格式化磁盘的详情请参考
    ["在磁盘中创建分区表"一节](#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_creating-a-partition-table-on-a-disk_assembly_getting-started-with-partitions "在磁盘中创建分区表"){.xref}。
-   如果您要创建的分区大于 2TiB，则必须使用 GUID
    分区表(GPT)格式化该磁盘。
:::
::: orderedlist
**流程**
1.  启动交互式 `parted`{.literal} shell：
    ``` screen
    # parted block-device
    ```
    ::: itemizedlist
    -   使用您要创建分区的设备的路径替换
        [*[block-device]{.replaceable}*]{.emphasis}：例如
        `/dev/sda`{.literal}。
    :::
2.  查看当前的分区表来确定是否有足够空闲空间：
    ``` screen
    (parted) print
    ```
    ::: itemizedlist
    -   如果没有足够的可用空间，您可以调整现有分区的大小。更多信息请参阅
        ["重新定义分区尺寸"一节](#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_resizing-a-partition_assembly_getting-started-with-partitions "重新定义分区尺寸"){.xref}。
    -   从分区表中决定：
        ::: itemizedlist
        -   新分区的开始和结束点
        -   在 MBR 上，它应该是什么分区类型。
        :::
    :::
3.  创建新分区：
    ``` screen
    (parted) mkpart part-type name fs-type start end
    ```
    ::: itemizedlist
    -   根据您在分区表里决定的，用
        `primary`{.literal}、`logical`{.literal} 或 `extended`{.literal}
        替换 [*[part-type]{.replaceable}*]{.emphasis}。这只适用于 MBR
        分区表。
    -   使用任意分区名称替换 [*[name]{.replaceable}*]{.emphasis}。对于
        GPT 分区表，这是必需的。
    -   使用
        `xfs`{.literal}、`ext2`{.literal}、`ext3`{.literal}、`ext4`{.literal}、`fat16`{.literal}、`fat32`{.literal}、`hfs`{.literal}、`hfs+`{.literal}、`linux-swap`{.literal}、`ntfs`{.literal}
        或 `reiserfs`{.literal} 之一替换
        [*[fs-type]{.replaceable}*]{.emphasis}。[*[fs-type]{.replaceable}*]{.emphasis}
        参数是可选的。请注意，`parted`{.literal}
        不会在分区中创建文件系统。
    -   [*用从磁盘开头起计算分区开始和结束点的大小替换[start]{.replaceable}*]{.emphasis}
        [*和[end]{.replaceable}*]{.emphasis}。您可以使用大小后缀，如
        `512MiB`{.literal}、`20GiB`{.literal} 或
        `1.5TiB`{.literal}。默认大小 MB。
    :::
    ::: example
    []{#assembly_getting-started-with-partitions_managing-storage-devices.html#idm140531391747952}
    **例 3.3. 创建小的主分区**
    ::: example-contents
    例如：要在 MBR 表中创建主分区（从 1024MiB 到 2048MiB），使用：
    ``` screen
    (parted) mkpart primary 1024MiB 2048MiB
    ```
    :::
    :::
    输入此命令后，这些更改就会生效，因此在执行前请先重新检查。
4.  查看分区表以确认创建的分区位于分区表中，并带有正确的分区类型、文件系统类型和大小：
    ``` screen
    (parted) print
    ```
5.  退出 `parted`{.literal} shell：
    ``` screen
    (parted) quit
    ```
6.  使用以下命令等待系统注册新设备节点：
    ``` screen
    # udevadm settle
    ```
7.  验证内核是否识别了新的分区：
    ``` screen
    # cat /proc/partitions
    ```
:::
::: itemizedlist
**其它资源**
-   `parted(8)`{.literal} man page。
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#proc_setting-a-partition-type-with-fdisk_assembly_creating-a-partition}使用 fdisk 设置分区类型 {.title}
:::
这个步骤描述了如何使用 `fdisk`{.literal} 实用程序设置分区类型或标志。
::: itemizedlist
**先决条件**
-   磁盘上有一个分区。
:::
::: orderedlist
**流程**
1.  启动交互式 `fdisk`{.literal} shell：
    ``` screen
    # fdisk block-device
    ```
    ::: itemizedlist
    -   使用您要设置分区类型的设备的路径替换
        [*[block-device]{.replaceable}*]{.emphasis}：例如
        `/dev/sda`{.literal}。
    :::
2.  查看当前的分区表以确定副分区号码：
    ``` screen
    Command (m for help): print
    ```
    您可以在 `Type`{.literal} 列中看到当前的分区类型及其对应的类型
    ID（在 `Id`{.literal} 列中）。
3.  输入分区类型命令并使用它的副号码选择分区：
    ``` screen
    Command (m for help): type
    Partition number (1,2,3 default 3): 2
    ```
4.  另外，还可列出可用的十六进制代码：
    ``` screen
    Hex code (type L to list all codes): L
    ```
5.  设置分区类型：
    ``` screen
    Hex code (type L to list all codes): 8e
    ```
6.  编写更改并退出 `fdisk`{.literal} shell：
    ``` screen
    Command (m for help): write
    The partition table has been altered.
    Syncing disks.
    ```
7.  验证您的更改：
    ``` screen
    # fdisk --list block-device
    ```
:::
:::
:::
::: section
::: titlepage
# []{#assembly_getting-started-with-partitions_managing-storage-devices.html#assembly_removing-a-partition_assembly_getting-started-with-partitions}删除分区 {.title}
:::
作为系统管理员，您可以删除不再用来释放磁盘空间的磁盘分区。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
删除分区将删除保存在分区中的所有数据。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-storage-devices.html#con_considerations-before-modifying-partitions-on-a-disk_assembly_removing-a-partition}修改磁盘分区前的注意事项 {.title}
:::
本节列出了在创建、删除或重新定义分区大小前需要考虑的关键点。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
本节不涵盖 DASD 分区表，它特定于 IBM Z 构架。有关 DASD 的详情请参考：