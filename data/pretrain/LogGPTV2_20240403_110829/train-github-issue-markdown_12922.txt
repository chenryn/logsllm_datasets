Subject: Discussion on Consistency in Flask's GET/POST API and Testing

Hello,

I have a background in Java and I enjoy using Flask for web development. However, I've encountered some inconsistencies with handling HTTP methods (GET, POST, PUT, etc.) in both production code and unit tests that I would like to discuss.

In Java servlets, the process of retrieving parameters from an incoming request is consistent, regardless of the HTTP method used. For example:

```java
String username = request.getParameter("username");
String password = request.getParameter("password");
```

In contrast, Flask's approach varies depending on the HTTP method. For a POST request, Flask assumes the data is coming from a form, even though this is not always the case:

```python
username = request.form['username']
```

For a GET request, you must use `request.args` instead:

```python
username = request.args['username']
```

From an API design perspective, I believe it would be more consistent and intuitive if Flask provided a unified way to access parameters, similar to Java's `getParameter` method. This could be achieved by introducing a `request.parameter` attribute, which would work across all HTTP methods:

```python
username = request.parameter['username']
```

Additionally, when writing unit tests, I've noticed a similar inconsistency. For testing a POST request, you can pass a dictionary, which is very Pythonic:

```python
app.test_client().post('/login', data=dict(
    username=username,
    password=password))
```

However, for a GET request, you cannot pass a dictionary; instead, you must manually construct the URL, which feels less idiomatic:

```python
app.test_client().get('/agent/login?username=%s&password=%s' % (username, password))
```

It would be more consistent and user-friendly if Flask allowed the same dictionary-based approach for GET requests as well:

```python
app.test_client().get('/login', data=dict(
    username=username,
    password=password))
```

I would appreciate your thoughts and feedback on these points.

Thank you,
[Your Name]