title:PolyScope: Multi-Policy Access Control Analysis to Compute Authorized
Attack Operations in Android Systems
author:Yu Tsung Lee and
William Enck and
Haining Chen and
Hayawardh Vijayakumar and
Ninghui Li and
Zhiyun Qian and
Daimeng Wang and
Giuseppe Petracca and
Trent Jaeger
PolyScope: Multi-Policy Access Control Analysis 
to Compute Authorized Attack Operations in 
Android Systems
Yu-Tsung Lee, Penn State University; William Enck, North Carolina State University; 
Haining Chen, Google; Hayawardh Vijayakumar, Samsung Research; Ninghui Li, 
Purdue University; Zhiyun Qian and Daimeng Wang, UC Riverside; 
Giuseppe Petracca, Lyft; Trent Jaeger, Penn State University
https://www.usenix.org/conference/usenixsecurity21/presentation/lee-yu-tsung
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.PolyScope: Multi-Policy Access Control Analysis to Compute
Authorized Attack Operations in Android Systems
Yu-Tsung Lee1, William Enck2, Haining Chen3, Hayawardh Vijayakumar4,
Ninghui Li5, Zhiyun Qian6, Daimeng Wang6, Giuseppe Petracca7∗and Trent Jaeger1
1Penn State University, 2North Carolina State University, 3Google, 4 Samsung Research
5 Purdue University, 6UC Riverside, 7 Lyft
1{yxl74,trj1}@psu.edu, PI:EMAIL, PI:EMAIL, PI:EMAIL,
PI:EMAIL, 6{zhiyunq, dwang030}@cs.ucr.edu, PI:EMAIL
Abstract
Android’s ﬁlesystem access control provides a foundation for
system integrity. It combines mandatory (e.g., SEAndroid)
and discretionary (e.g., Unix permissions) access control, pro-
tecting both the Android platform from Android/OEM ser-
vices and Android/OEM services from third-party applica-
tions. However, OEMs often introduce vulnerabilities when
they add market-differentiating features and fail to correctly
reconﬁgure this complex combination of policies. In this
paper, we propose the PolyScope tool to triage Android sys-
tems for vulnerabilities using their ﬁlesystem access control
policies by: (1) identifying the resources that subjects are
authorized to use that may be modiﬁed by their adversaries,
both with and without policy manipulations, and (2) determin-
ing the attack operations on those resources that are actually
available to adversaries to reveal the speciﬁc cases that need
vulnerability testing. A key insight is that adversaries may
exploit discretionary elements in Android access control to
expand the permissions available to themselves and/or vic-
tims to launch attack operations, which we call permission
expansion. We apply PolyScope to ﬁve Google and ﬁve OEM
Android releases and ﬁnd that permission expansion increases
the privilege available to launch attacks, sometimes by more
than 10x, but a signiﬁcant fraction (about 15-20%) cannot be
converted into attack operations due to other system conﬁgu-
rations. Based on this analysis, we describe two previously un-
known vulnerabilities and show how PolyScope helps OEMs
triage the complex combination of access control policies
down to attack operations worthy of testing.
1 Introduction
Android has become the most dominant mobile OS platform
worldwide, deployed by a large number of vendors across a
wide variety of form factors, including phones, tablets, and
wearables [43]. With Android’s increased integration into
people’s daily lives, Android needs to provide sufﬁcient and
∗Giuseppe Petracca’s work on this paper was performed when he was a
graduate student at Penn State.
appropriate assurances of platform integrity. Additionally,
vendors must be able to extend the Android platform to sup-
port their custom functionality and yet maintain such assur-
ances to their customers. Android’s implementation of ﬁlesys-
tem access control is one of the most important defenses for
providing such assurances.
Despite aggressively adopting advanced mandatory access
control (MAC) methods (e.g., SEAndroid [42]) in combi-
nation with traditional discretionary access control (DAC)
for ﬁlesystem access control, Android continues to report
ﬁlesystem vulnerabilities. One recent case reported by Check-
point [30] shows how an untrusted application can abuse
write permission to Android’s external storage to maliciously
replace a victim application’s library ﬁles before it installs
them, which is an example of a ﬁle squatting attack. Addi-
tionally, a report from IOActive [27] shows how a vulnerabil-
ity in the DownloadProvider allowed untrusted applications
to read/write unauthorized ﬁles by providing a maliciously
crafted URI that causes DownloadProvider to access an un-
trusted symbolic link that redirects the victim to the targeted
ﬁles, which is an example of a link traversal attack. This
vulnerability could have a serious negative impact, as some
over-the-air update ﬁles, including for some privileged appli-
cations, are downloaded by the DownloadProvider.
Researchers have proposed automated policy analysis to
detect misconﬁgurations that may expose vulnerabilities in
complex access control policies [24, 40], but application of
these methods to Android does not address: (1) how those
policies may be altered by adversaries and (2) how to detect
which operations adversaries may actually be able to use in at-
tacks on those misconﬁgurations. The emergence of Android
with its rich permission system and its subsequent adoption of
the SEAndroid mandatory access control motivated the devel-
opment of policy analysis methods for Android systems [14,
53, 54, 1]. However, each of these initial approaches only
consider a single type of access control policy (e.g., either
SEAndroid or Android permissions). Recent work has com-
puted the information ﬂows of combined MAC and DAC
policies [10], as well as including Linux capabilities [22].
USENIX Association
30th USENIX Security Symposium    2579
However, these techniques miss some attacks (including the
Checkpoint [30] and IOActive [27] attacks), because they
lack the ability to capture how adversaries may broaden their
privilege by manipulating the inherent ﬂexibility in the Unix
and Android permission systems. These techniques may also
identify many spurious threats, because they do not determine
if adversaries can really launch attacks for the threats found.
In this paper, we develop a novel method called PolyScope
to triage Android systems for vulnerability testing using their
ﬁlesystem access control policies by: (1) identifying the re-
sources applications are authorized to use that are also modiﬁ-
able by their adversaries, both with and without policy manip-
ulations, and (2) determining the attack operations on those
resources that are available to adversaries in order to iden-
tify the speciﬁc cases that need testing for vulnerabilities.
Similar to prior work [24, 40, 25, 11], our method begins
by identifying ﬁlesystem resources at risk by computing the
integrity violations authorized by the policy. An integrity
violation occurs when an access control policy authorizes
a lower-integrity subject (adversary) to modify a resource
used by a higher-integrity subject (victim). However, an in-
tegrity violation alone does not imply a vulnerability because:
(1) victims may not actually use the impacted resource and/or
(2) adversaries may not be able to exploit the victim’s use
of the resource. Predicting which resources a program may
use in advance is a difﬁcult challenge, so instead PolyScope
computes whether and how an adversary could attempt to
exploit a victim’s use. For each integrity violation, PolyScope
computes the ways that adversaries may launch attacks, which
we call attack operations.
A key insight of our work is that adversaries may exploit
discretionary elements in Android access control to expand
the permissions available to themselves and/or victims to
launch attack operations, which we call permission expan-
sion. DAC protection systems allow resource owners to grant
permissions to their resources arbitrarily, making prediction
of whether an unsafe permission may be granted intractable
in general [21]. Adversaries can leverage such ﬂexibility to
grant victims permissions to lure them to resources to which
adversaries can launch attack operations. In addition, Android
systems often convert Android permissions that adversaries
may obtain into DAC permissions, leading to further risks.
While SEAndroid MAC policies bound such permissions,
these MAC policies are sufﬁciently coarse that changes in
DAC permissions may reveal many new attack operations
within the MAC restrictions.
Our evaluation demonstrates that PolyScope has several
beneﬁts over prior analysis approaches and is practical to use.
First, in a study of nine freshly installed Android releases,1
ﬁve Google Android versions and four OEM Android ver-
sions, we ﬁnd that permission expansion increases the num-
1We examine a tenth system in some experiments, which has a signiﬁ-
cantly greater number of pre-installed apps.
ber of integrity violations signiﬁcantly, from 122% to 1550%
across versions. However, between 14% and 21% of those
integrity violations cannot be transformed into attack oper-
ations by the ﬁlesystem and/or program conﬁgurations. We
also examine two Android releases spanning the introduction
of the Android scoped storage defense [19], which controls
use of shared external storage more tightly, showing how
changes in enforcement mechanisms affect PolyScope. Sec-
ond, PolyScope ﬁnds that OEM releases have a signiﬁcantly
greater number of attack operations than the Google releases.
Using these attack operations uncovered by PolyScope, we
ﬁnd two new vulnerabilities in three OEM releases through
manual analysis. One of these new vulnerabilities requires
permission expansion to exploit, demonstrating the power
of PolyScope. Finally, we implement an analysis method in
PolyScope that enables parallel computation of integrity vio-
lations, resulting in signiﬁcant performance improvements for
the studied systems, ranging from 75% to 81% improvement
across releases. This suggests that OEMs may beneﬁt from ap-
plying PolyScope incrementally to identify attack operations
as they extend their systems with new value-added features.
PolyScope is targeted for use by Android system vendors,
including many OEMs, who often extend base Android sys-
tems with a variety of vendor-speciﬁc services and applica-
tions to customize their products with value-added functional-
ity. To demonstrate its utility, we provide two case studies that
show how policy misconﬁguration caused by vendor-added
functionality results in previously unknown vulnerabilities.
These case studies show how vendors can compute attack
operations that third-party applications may launch against
their functionality and identify cases requiring vulnerability
testing. Using PolyScope, vendors can further identify how
their vendor-speciﬁc services and applications may be abused
to compromise the system’s trusted computing base.
This paper makes the following contributions:
• We propose the PolyScope analysis tool for Android
ﬁlesystem access control. PolyScope composes An-
droid’s access control policies and relevant system con-
ﬁgurations to compute the attack operations available to
adversaries, accounting for permission expansion.
• We use PolyScope to triage three Google and ﬁve OEM
Android releases. We ﬁnd a signiﬁcantly greater number
of attack operations for OEM’s Android releases, indi-
cating that OEMs may greatly beneﬁt from PolyScope
as they customize their Android-based products.
• We identify two new vulnerabilities in OEM Android
releases. Using PolyScope results, we identify vulnera-
bilities in: (1) the Thememanager used by Xiaomi and
Huawei and (2) Samsung’s Resestreason logging.
The remainder of this paper is as follows. Section 2 mo-
tivates the need for more effective access control analysis.
Section 3 overviews of the PolyScope’s approach. Section 4
2580    30th USENIX Security Symposium
USENIX Association
sure of services to directories modiﬁable by third-party apps
and other adversaries, but sometimes functional requirements
demand such permissions be available. In addition, Android
systems allow apps to extend their own permissions by ob-
taining Android permissions and grant services permissions
to app directories, expanding the directories at risk.
2.2 Access Control Policy Analysis
To prevent such vulnerabilities, defenders may limit access to
sensitive resources using access control or other techniques
that "sandbox" untrusted programs. However, privileged pro-
cesses often provide functionality that requires shared access
to some sensitive resources with untrusted processes. In the
example above, the Download Provider provides a ﬁle access
service for its clients, so both share access to ﬁles served. As
a result, we need a way to triage access control policies to
identify resources that may lead to vulnerabilities for such
authorized sharing.
Access control policy analysis [24, 40] computes the au-
thorized information ﬂows among subjects and objects from
a system’s access control policies. An access control policy
authorizes an information ﬂow from a subject to an object if
the policy allows that subject to perform an operation that
modiﬁes the object, called a write-like operation, and autho-
rizes an information ﬂow from an object to a subject if the
policy allows that subject to perform an operation that uses
the object’s data, called a read-like operation (e.g., read or ex-
ecute). Some operations may be both read-like and write-like,
enabling information ﬂow in both directions.
However, modern Android systems have hundreds of thou-
sands of access control rules, so there are many, many autho-
rized information ﬂows. Researchers then explored methods
to ﬁnd the information ﬂows associated with potential security
problems. Some access control analyses focus on identifying
secrecy problems [10, 14, 53, 54, 1] and others on integrity
problems [25, 11]. In the example above, this vulnerability
permits attacks on process integrity by controlling the ﬁle
retrieved by the victim process, whereby the compromised
process may be directed to leak or modify ﬁles on behalf of
the adversary. To detect integrity problems, access control
analyses are inspired by integrity models, such as Biba in-
tegrity [4], to detect information ﬂows from adversaries to
victims. Such information ﬂows are called integrity violations,
which are deﬁned more formally as a tuple of resource, adver-
sary, and victim, where the access control policy authorizes
an information ﬂow from the adversary to the resource (i.e.,
the adversary is authorized to perform a write-like operation
on the resource) and authorizes an information ﬂow from the
resource to the victim (i.e., the victim is authorized to perform
a read-like operation on the resource).
2.3 Limitations of Current Techniques
Access control policy analyses attempt to solve three main
problems to help identify vulnerabilities, but current ap-
Figure 1: DownloadProvider Vulnerability: (1) Adversary
provides pathname to victim (as URI) to (2) lure the victim
to an adversary-created symbolic link (a) that (3) the victim
resolves to the target ﬁle enabling the adversary to modify the
ﬁle indirectly through the victim (b).
deﬁnes our threat model. Sections 5 and 6 describe the design
and implementation of PolyScope. Section 7 performs a va-
riety of experiments to show how PolyScope triages access
control policies in Android releases. Section 8 describes cur-
rent limitations and how they may be addressed. Section 9 ex-
amines differences from related work. Section 10 concludes.
2 Motivation
In this section, we motivate the goals of our work. We ﬁrst
present an example of the challenge of detecting the attack
operations that may lead to vulnerabilities in Android systems
in Section 2.1. After outlining current approaches to access
control policy analysis in Section 2.2, we describe their key
limitations in Section 2.3.
2.1 An Example Vulnerability
A recent vulnerability discovered in Android services using
the DownloadProvider allows untrusted apps to gain access to
privileged ﬁles [27]. The DownloadProvider enables services
to retrieve ﬁles on behalf of apps by a URI specifying the loca-
tion of a ﬁle. An untrusted app may lure a service’s Download-
Provider into using a maliciously crafted URI that resolves
to a symbolic link created by the untrusted app. Through this
symbolic link, the untrusted app can access any ﬁle to which
the service is authorized, which may include some privileged
ﬁles. This is an example of a link traversal attack.
Figure 1 shows exploitation of the vulnerability. The ad-
versary sends a request URI (Pathname in Figure 1) to the
victim (service running DownloadProvider) 1 that directs
the victim to a symbolic link created by the adversary a .
When the victim uses its read permission to the symbolic link
2 , the operating system resolves the link 3 to return access
to the target ﬁle. This vulnerability may enable the adversary
to leak and/or modify the target ﬁle b to which the adversary
normally lacks access.
This vulnerability occurred because adversaries of the ser-
vice have the permission to create a symbolic link in a di-
rectory to which the service running DownloadProvider also
has access. Android access control aims to limit the expo-
USENIX Association
30th USENIX Security Symposium    2581
AdversaryTarget File1ModifySymbolicLink2CreateVictim3PathnameReadResolveabFigure 2: PolyScope Logical Flow: PolyScope computes per-subject adversaries (Step 1), permission expansion by those
adversaries (Step 2), the integrity violations to which adversaries are authorized (Step 3), and the attack operations adversaries