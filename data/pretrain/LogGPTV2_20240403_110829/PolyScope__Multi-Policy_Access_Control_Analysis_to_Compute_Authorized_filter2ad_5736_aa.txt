# PolyScope: Multi-Policy Access Control Analysis to Compute Authorized Attack Operations in Android Systems

## Authors
- Yu-Tsung Lee, Penn State University
- William Enck, North Carolina State University
- Haining Chen, Google
- Hayawardh Vijayakumar, Samsung Research
- Ninghui Li, Purdue University
- Zhiyun Qian and Daimeng Wang, UC Riverside
- Giuseppe Petracca, Lyft
- Trent Jaeger, Penn State University

## Abstract
Androidâ€™s filesystem access control is a critical component for maintaining system integrity. It combines mandatory (e.g., SEAndroid) and discretionary (e.g., Unix permissions) access control policies to protect the Android platform from OEM services and third-party applications. However, OEMs often introduce vulnerabilities when adding market-differentiating features without properly reconfiguring these policies. In this paper, we introduce PolyScope, a tool designed to identify vulnerabilities in Android systems by analyzing their filesystem access control policies. Specifically, PolyScope:

1. Identifies resources that subjects are authorized to use, which may be modified by adversaries, both with and without policy manipulations.
2. Determines the attack operations on those resources that adversaries can actually perform, thus pinpointing specific cases that need vulnerability testing.

A key insight is that adversaries can exploit discretionary elements in Android's access control to expand their permissions, a phenomenon we term "permission expansion." We applied PolyScope to five Google and five OEM Android releases, finding that permission expansion significantly increases the privilege available to launch attacks, sometimes by more than 10x. However, a significant fraction (about 15-20%) of these expanded privileges cannot be converted into actual attack operations due to other system configurations. Based on our analysis, we describe two previously unknown vulnerabilities and demonstrate how PolyScope helps OEMs triage complex access control policies down to specific attack operations worthy of testing.

## 1. Introduction
Android has become the dominant mobile operating system, deployed across various form factors by numerous vendors. As Android integrates more deeply into daily life, it must provide robust assurances of platform integrity. Vendors must extend the Android platform to support custom functionalities while maintaining these assurances. Filesystem access control is a crucial defense mechanism in this context.

Despite adopting advanced mandatory access control (MAC) methods like SEAndroid, combined with traditional discretionary access control (DAC), Android continues to report filesystem vulnerabilities. For example, Checkpoint [30] reported a file squatting attack where an untrusted application abused write permissions to replace a victim application's library files. Another example is a link traversal attack reported by IOActive [27], where a vulnerability in DownloadProvider allowed unauthorized read/write access to files via malicious URIs.

Previous automated policy analysis methods [24, 40] have been proposed to detect misconfigurations in complex access control policies, but they do not address how adversaries might alter these policies or how to detect feasible attack operations. Initial approaches for Android [14, 53, 54, 1] considered only single types of access control policies, while recent work [10, 22] has included combined MAC and DAC policies and Linux capabilities. However, these techniques miss some attacks and identify many spurious threats because they do not account for adversaries' ability to manipulate Unix and Android permission systems.

In this paper, we develop PolyScope, a novel method to triage Android systems for vulnerability testing using their filesystem access control policies. PolyScope identifies resources that applications are authorized to use and that can be modified by adversaries, both with and without policy manipulations. It then determines the attack operations available to adversaries, thereby identifying specific cases that need testing for vulnerabilities.

## 2. Motivation
### 2.1 An Example Vulnerability
A recent vulnerability in Android services using DownloadProvider allowed untrusted apps to gain access to privileged files [27]. The DownloadProvider retrieves files on behalf of apps using a URI. An untrusted app could lure the DownloadProvider into using a maliciously crafted URI that resolves to a symbolic link, allowing the untrusted app to access any file the service is authorized to access, including privileged files. This is a link traversal attack.

### 2.2 Access Control Policy Analysis
To prevent such vulnerabilities, defenders may limit access to sensitive resources using access control or sandboxing. However, privileged processes often require shared access to sensitive resources with untrusted processes. Access control policy analysis [24, 40] computes authorized information flows among subjects and objects. An access control policy authorizes a flow if it allows a subject to modify an object (write-like operation) or use the object's data (read-like operation).

### 2.3 Limitations of Current Techniques
Current access control analyses aim to solve three main problems: identifying secrecy and integrity issues, but they often miss attacks and identify many spurious threats. They do not account for adversaries' ability to manipulate Unix and Android permission systems, nor do they determine if adversaries can actually launch attacks based on the identified threats.

## 3. PolyScope Overview
PolyScope addresses these limitations by:
1. Identifying resources that subjects are authorized to use and that can be modified by adversaries.
2. Determining the attack operations available to adversaries, accounting for permission expansion.

## 4. Threat Model
We define our threat model, which includes the types of adversaries and the scope of their potential actions.

## 5. Design and Implementation
We describe the design and implementation of PolyScope, including its logical flow and key components.

## 6. Experiments
We perform a variety of experiments to show how PolyScope triages access control policies in Android releases.

## 7. Limitations and Future Work
We discuss current limitations of PolyScope and potential directions for future work.

## 8. Related Work
We examine differences from related work and highlight the unique contributions of PolyScope.

## 9. Conclusion
We conclude by summarizing the contributions of PolyScope and its potential impact on improving Android security.

---

This optimized version of the text aims to enhance clarity, coherence, and professionalism, making it more suitable for an academic audience.