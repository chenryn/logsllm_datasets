•
Developing a complete symbolic engine to analyze real-world samples 
is difficult.
•
The Windows API recognition of strip symbols could not be resolved
Semantics-Aware Malware Detection
Mihai Christodorescu∗
Somesh Jha∗
University of Wisconsin, Madison
{mihai, jha}@cs.wisc.edu
Sanjit A. Seshia†
Dawn Song
Randal E. Bryant†
Carnegie Mellon University
{sanjit@cs., dawnsong@, bryant@cs.}cmu.edu
Abstract
A malware detector is a system that attempts to de-
termine whether a program has malicious intent. In or-
der to evade detection, malware writers (hackers) fre-
quently use obfuscation to morph malware. Malware
detectors that use a pattern-matching approach (such
as commercial virus scanners) are susceptible to obfus-
cations used by hackers. The fundamental deﬁciency
in the pattern-matching approach to malware detection
is that it is purely syntactic and ignores the semantics
of instructions. In this paper, we present a malware-
detection algorithm that addresses this deﬁciency by in-
corporating instruction semantics to detect malicious
program traits. Experimental evaluation demonstrates
that our malware-detection algorithm can detect vari-
ants of malware with a relatively low run-time over-
head. Moreover, our semantics-aware malware detec-
tion algorithm is resilient to common obfuscations used
by hackers.
1. Introduction
A malware instance is a program that has malicious
intent.
Examples of such programs include viruses,
trojans, and worms. A classiﬁcation of malware with
respect to its propagation method and goal is given
in [29]. A malware detector is a system that attempts
to identify malware. A virus scanner uses signatures
and other heuristics to identify malware, and thus is an
example of a malware detector. Given the havoc that
can be caused by malware [18], malware detection is an
important goal.
∗This work was supported in part by the Ofﬁce of Naval Research
under contracts N00014-01-1-0796 and N00014-01-1-0708. The U.S.
Government is authorized to reproduce and distribute reprints for
Governmental purposes, notwithstanding any copyright notices af-
ﬁxed thereon.
The views and conclusions contained herein are those of the authors
and should not be interpreted as necessarily representing the ofﬁcial
policies or endorsements, either expressed or implied, of the above
government agencies or the U.S. Government.
†This work was supported in part by Army Research Ofﬁce grant
DAAD19-01-1-0485.
The goal of a malware writer (hacker) is to modify
or morph their malware to evade detection by a mal-
ware detector. A common technique used by malware
writers to evade detection is program obfuscation [30].
Polymorphism and metamorphism are two common ob-
fuscation techniques used by malware writers. For ex-
ample, in order to evade detection, a virus can morph
itself by encrypting its malicious payload and decrypt-
ing it during execution. A polymorphic virus obfus-
cates its decryption loop using several transformations,
such as nop-insertion, code transposition (changing the
order of instructions and placing jump instructions to
maintain the original semantics), and register reassign-
ment (permuting the register allocation).
Metamor-
phic viruses attempt to evade detection by obfuscat-
ing the entire virus. When they replicate, these viruses
change their code in a variety of ways, such as code
transposition, substitution of equivalent instruction se-
quences, change of conditional jumps, and register re-
assignment [28,35,36].
Addition of new behaviors to existing malware is an-
other favorite technique used by malware writers. For
example, the Sobig.A through Sobig.F worm variants
(widespread during the summer of 2003) were devel-
oped iteratively, with each successive iteration adding
or changing small features [25–27].
Each new vari-
ant managed to evade detection either through the use
of obfuscations or by adding more behavior. The re-
cent recurrence of the Netsky and B[e]agle worms (both
active in the ﬁrst half of 2004) is also an example of
how adding new code or changing existing code creates
new undetectable and more malicious variants [9, 17].
For example, the B[e]agle worm shows a series of “up-
grades” from version A to version C that include the
addition of a backdoor, code to disable local security
mechanisms, and functionality to better hide the worm
within existing processes. A quote from [17] summa-
rizes the challenges worm families pose to detectors:
Arguably the most striking aspect of Beagle
is the dedication of the author or authors to
reﬁning the code. New pieces are tested, per-
fected, and then deployed with great fore-
thought as to how to evade antivirus scanners
and how to defeat network edge protection
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
#BHUSA @BlackHatEvents
Towards Generic Deobfuscation
of Windows API Calls
Vadim Kotov
Dept. of Research and Intelligence
Cylance, Inc
PI:EMAIL
Michael Wojnowicz
Dept. of Research and Intelligence
Cylance, Inc
PI:EMAIL
Abstract—A common way to get insight into a malicious
program’s functionality is to look at which API functions it
calls. To complicate the reverse engineering of their programs,
malware authors deploy API obfuscation techniques, hiding them
from analysts’ eyes and anti-malware scanners. This problem
can be partially addressed by using dynamic analysis; that is,
by executing a malware sample in a controlled environment and
logging the API calls. However, malware that is aware of virtual
machines and sandboxes might terminate without showing any
signs of malicious behavior. In this paper, we introduce a static
analysis technique allowing generic deobfuscation of Windows
API calls. The technique utilizes symbolic execution and hidden
Markov models to predict API names from the arguments passed
to the API functions. Our best prediction model can correctly
identify API names with 87.60% accuracy.
I. INTRODUCTION
Malware plays by the same rules as legitimate software,
so in order to do something meaningful (read ﬁles, update
the registry, connect to a remote server, etc.) it must interact
with the operating system via the Application Programming
Interface (API). On Windows machines, the API functions
reside in dynamic link libraries (DLL). Windows executables
[1] store the addresses of the API functions they depend on
in the Import Address Table (IAT) - an array of pointers to
the functions in their corresponding DLLs. Normally these
addresses are resolved by the loader upon program execution.
When analyzing malware, it is crucial to know what API
functions it calls - this provides good insight into its capabili-
ties [2], [3]. That is why malware developers try to complicate
the analysis by obfuscating the API calls [4]. When API
calls are obfuscated, the IAT is either empty or populated
by pointers to functions unrelated to malware’s objectives,
while the true API functions are resolved on-the-ﬂy. This is
usually done by locating a DLL in the memory and looking
up the target function in its Export Table - a data structure that
describes API functions exposed by the DLL. In other words,
obfuscated API calls assume some ad-hoc API resolution
procedure, different from the Windows loader.
Deobfuscating API calls can be tackled in two broad ways:
1) Using static analysis, which requires reverse engineering
the obfuscation scheme and writing a script that puts
back missing API names.
2) Using dynamic analysis, which assumes executing mal-
ware in the controlled environment and logging the API
calls.
Static analysis allows exploration of every possible execu-
tion branch in a program and fully understand its functionality.
Its major drawback is that it can get time consuming as
some malware families deploy lengthy and convoluted obfus-
cation routines (e.g. Dridex banking Trojan [5]). Furthermore,
even minor changes to the obfuscation schemes break the
deobfuscation scripts, forcing analysts to spend time adapting
them or re-writing them altogether. Dynamic analysis, on
the other hand, is agnostic of obfuscation, but it can only
explore one control ﬂow path, making the analysis incomplete.
Additionally, since dynamic analysis is usually performed
inside virtual machines (VM) and sandboxes, a VM-/sandbox-
aware malware can potentially thwart it.
In this paper, we introduce a static analysis approach,
allowing generic deobfuscation of Windows API calls. Our
approach is based on an observation that malware analysts
can often “guess” some API functions by just looking at
their arguments and the context in which they are called. For
example, consider RegCreateKeyEx:
LONG WINAPI RegCreateKeyEx(
1.
HKEY
hKey,
2.
LPCTSTR
lpSubKey,
3.
DWORD
Reserved,
4.
LPTSTR
lpClass,
5.
DWORD
dwOptions,
6.
REGSAM
samDesired,
7.
LPSECURITY_ATTRIBUTES lpSecurityAttributes,
8.
PHKEY
phkResult,
9.
LPDWORD
lpdwDisposition
);
Arguments 5, 6, 7 and 9 are pre-deﬁned constants (per-
mission ﬂags, attributes etc.) and can only take a ﬁnite and
small number of potential values (it’s also partially true for
Workshop on Binary Analysis Research (BAR) 2018
18 February 2018, San Diego, CA, USA
ISBN 1-891562-50-9
https://dx.doi.org/10.14722/bar.2018.23011
www.ndss-symposium.org
Related Work
•
Towards Generic Deobfuscation of Windows API Calls (NDSS'18)
•
Use Clever & Creative Ideas
•
Windows APIs are designed with many magic numbers that can be used as 
features for reverse engineering
•
For example, the RegCreateKeyExA parameter HKEY_CURRENT_USER evaluates 
to 0x80000001
•
Predict Windows API names by using only the parameter context distribution of 
function pointers
•
Using Hidden Markov Model (HMM): Up to 87.6% of API names can be 
recovered from the strip symbols binaries
•
Practical Issues
•
Since the Markov Model is too rough in scale, APIs with less than four 
parameters cannot be analyzed
•
Not all API parameters have magic numbers used as features L
#BHUSA @BlackHatEvents
Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search
against Code Obfuscation and Compiler Optimization
Steven H. H. Ding∗, Benjamin C. M. Fung∗, and Philippe Charland†
∗Data Mining and Security Lab, School of Information Studies, McGill University, Montreal, Canada.
Emails: PI:EMAIL, PI:EMAIL
†Mission Critical Cyber Security Section, Defence R&D Canada - Valcartier, Quebec, QC, Canada.
Email: PI:EMAIL
Abstract—Reverse engineering is a manually intensive but
necessary technique for understanding the inner workings
of new malware, ﬁnding vulnerabilities in existing systems,
and detecting patent infringements in released software. An
assembly clone search engine facilitates the work of reverse
engineers by identifying those duplicated or known parts.
However, it is challenging to design a robust clone search
engine, since there exist various compiler optimization options
and code obfuscation techniques that make logically similar
assembly functions appear to be very different.
A practical clone search engine relies on a robust vector
representation of assembly code. However, the existing clone
search approaches, which rely on a manual feature engineering
process to form a feature vector for an assembly function,
fail to consider the relationships between features and identify
those unique patterns that can statistically distinguish assembly
functions. To address this problem, we propose to jointly learn
the lexical semantic relationships and the vector representation
of assembly functions based on assembly code. We have devel-
oped an assembly code representation learning model Asm2Vec.
It only needs assembly code as input and does not require
any prior knowledge such as the correct mapping between
assembly functions. It can ﬁnd and incorporate rich semantic
relationships among tokens appearing in assembly code. We
conduct extensive experiments and benchmark the learning
model with state-of-the-art static and dynamic clone search
approaches. We show that the learned representation is more
robust and signiﬁcantly outperforms existing methods against
changes introduced by obfuscation and optimizations.
1. Introduction
Software developments mostly do not start from scratch.
Due to the prevalent and commonly uncontrolled reuse of
source code in the software development process [1], [2],
[3], there exist a large number of clones in the underlying
assembly code as well. An effective assembly clone search
engine can signiﬁcantly reduce the burden of the manual
analysis process involved in reverse engineering. It addresses
the information needs of a reverse engineer by taking ad-
vantage of existing massive binary data.
Assembly code clone search is emerging as an Infor-
mation Retrieval (IR) technique that helps address security-
related problems. It has been used for differing binaries to
locate the changed parts [4], identifying known library func-
tions such as encryption [5], searching for known program-
ming bugs or zero-day vulnerabilities in existing software or
Internet of Things (IoT) devices ﬁrmware [6], [7], as well as
detecting software plagiarism or GNU license infringements
when the source code is unavailable [8], [9]. However,
designing an effective search engine is difﬁcult, due to vari-
eties of compiler optimizations and obfuscation techniques
that make logically similar assembly functions appear to
be dramatically different. Figure 1 shows an example. The
optimized or obfuscated assembly function breaks control
ﬂow and basic block integrity. It is challenging to identify
these semantically similar, but structurally and syntactically
different assembly functions as clones.
Developing a clone search solution requires a robust
vector representation of assembly code, by which one can
measure the similarity between a query and the indexed
functions. Based on the manually engineered features, rel-
evant studies can be categorized into static or dynamic ap-
proaches. Dynamic approaches model the semantic similar-
ity by dynamically analyzing the I/O behavior of assembly
code
[10], [11], [12], [13]. Static approaches model the
similarity between assembly code by looking for their static
differences with respect to the syntax or descriptive statistics
[6], [7], [8], [14], [15], [16], [17], [18]. Static approaches
are more scalable and provide better coverage than the
dynamic approaches. Dynamic approaches are more robust
against changes in syntax but less scalable. We identify
two problems which can be mitigated to boost the semantic
richness and robustness of static features. We show that by
considering these two factors, a static approach can even
achieve better performance than the state-of-the-art dynamic
approaches.
P1: Existing state-of-the-art static approaches fail to
consider the relationships among features. LSH-S [16], n-
gram [8], n-perm [8], BinClone [15] and Kam1n0 [17]
model assembly code fragments as frequency values of
operations and categorized operands. Tracelet [14] models
assembly code as the editing distance between instruction
sequences. Discovre [7] and Genius [6] construct descriptive
features, such as the ratio of arithmetic assembly instruc-
tions, the number of transfer instructions, the number of
basic blocks, among others. All these approaches assume
each feature or category is an independent dimension. How-
ever, a xmm0 Streaming SIMD Extensions (SSE) register is
related to SSE operations such as movaps. A fclose libc
function call is related to other ﬁle-related libc calls such
as fopen. A strcpy libc call can be replaced with memcpy.
These relationships provide more semantic information than
Authorized licensed use limited to: IEEE Xplore. Downloaded on April 01,2022 at 07:44:01 UTC from IEEE Xplore.  Restrictions apply. 
Related Work
• Asm2Vec: Boosting Static Representation Robustness for 
Binary Clone Search against Code Obfuscation and Compiler 
Optimization (S&P'19)
• Based on the Neural Network (NN) approach
•
Learn the instruction-level semantics of program binary effectively
•
Identify if an unknown binary is a variant of and similar to known programs
•
Even if OLLVM is fully enabled!
• Practical Issues
•
Non-explanatory: it is difficult to explain why this sample is identiﬁed as a 
known sample variant
•
Only works on classifying samples
•
Unable to precisely identify if binary has a specific malicious attack in a 
large number of behaviors
#BHUSA @BlackHatEvents
What is Symbolic Execution?
#BHUSA @BlackHatEvents
What is Symbolic Execution?
stmt: main() 
stmt: atoi()
assign
const: 4
stmt: WinExec()
cmp
var: x
op: and
branch
if
return
func
func
const: 0
const: 0
var: argv[3]
var: argv[1]
stmt: atoi()
assign
const: 8
cmp
var: y
func
var: argv[2]
#BHUSA @BlackHatEvents
What is Symbolic Execution?
stmt: main() 
stmt: atoi()
assign
const: 4
stmt: WinExec()
cmp
var: x
op: and
branch
if
return
func
func
const: 0
const: 0
var: argv[3]
var: argv[1]
stmt: atoi()
assign
const: 8
cmp
var: y
func
var: argv[2]
#BHUSA @BlackHatEvents
Why We Use Symbolic Execution to Solve 
Those Difficult Problem?
• Emulator: resource consumption, many problem about simulating environment, I/O, and 
can be bypassed
• Sandbox: Use real environment but also can be bypassed (Command line parameter, 
Anti-VM, Anti-sandbox, anti-debug…)
• Traditional Static analysis: can be bypassed easier. High false positives 
• Symbolic Execution based: we use the lightweight part – DefUse relationship
•
It is enough to solve the problem of malware analysis, strengthen contextual relevance, semantic-based 
analysis, reduce false positives, and furthermore, full static analysis will not have the risk of being 
compromised
•
Low development cost and high adjustment flexibility
#BHUSA @BlackHatEvents
Our Practical Symbolic Engine
• Engine Architecture
Vivisect as 
Decompiler Module 
Taint Analysis 
Module via DefUse 
Emulation Monitor 
Module
(Static emulate win32 
environment)
Control Flow 
Graph Analysis
Module
Obfuscated API
Identifier Module
Detection 
Signature
Suspicious Target
Malicious
Benign
Attack Techniques
Ransomware
Behivor
…
Few Seconds to 1.5 Minutes in average
#BHUSA @BlackHatEvents
Traditional vs. Lightweight Symbolic Execution 
Angr
TCSA
AST Expression
PyVex
X
CFG Emulation
Full CFG / Fast CFG
Coverage based
Solver
Claripy
X
Taint Analysis
V
V
Malware Signature Support
X
TCSA rule, Yara rule, Capa 
rule
Solve the problem of obfuscated API
X
V
Finished in limited time
X
V
#BHUSA @BlackHatEvents
CFG Analysis Module
• Control Flow Graph (CFG) Analyze Module
Parse function block based on our engine
#BHUSA @BlackHatEvents
Taint Analysis Module
• Taint Analysis Module via DefUse
Part of Taint Analysis Example: all called APIs of static code, their return values are given by an assumed symbolic 
value, which can be used later to track the use of the situation.
Taint Analysis demo context result
#BHUSA @BlackHatEvents
Unknown API Recognition
• NDSS’18: Obfuscated API Identifier Module
•
Real samples often have symbols removed or obfuscated, so fuzzy identification can help to identify 
what kind of API(s) it is, and thus determine what function it performs
#BHUSA @BlackHatEvents
Prototype
#BHUSA @BlackHatEvents
Obfuscated Samples
• Obfuscated API Identifier Module