nodes, before issuing the ﬁnal stable phase. This results in a
slow decision, with a latency of four communication delays.
In this section we describe CAESAR by detailing the re-
quired data structures in Section V-A, the procedure for a fast
decision in Section V-B, the procedure for a slow decision
in Section V-C, and the behavior of the protocol in case of
failures in Section V-E. We also explain how CAESAR behaves
in case a leader is not able to contact a fast quorum of nodes
during the execution of the fast proposal phase for a command,
as long as no more than f nodes crash. This case entails
the execution of an additional slow proposal phase after the
fast proposal phase and before the remaining retry and stable
phases. This part is overviewed in Section V-D and detailed
in the technical report [23].
In Figure 4 we provide the main pseudocode of CAESAR
for the decision of a command c. Each horizontal block of
the ﬁgure is a phase, and phases are linked through arrows to
indicate the transition from one phase to another. For instance,
in case of fast decision, we have a transition from the fast
proposal phase to the stable phase; on the other hand all the
other transitions are part of a slow decision. Moreover, the
pseudocode is vertically partitioned in order to distinguish the
part that is executed by the command c’s leader and the part
that can be executed by any node (including the leader); it
is also named as acceptor for historical reasons. Finally, the
pseudocodes of auxiliary functions and the recovery from a
failure are provided in Figures 3 and 5, respectively.
A. Data Structures per node pi
T S i. It is a logical clock with monotonically increasing
values in a totally ordered set of elements, and it is used to
It
generate timestamps for the commands that are proposed by
pi. Its value at a certain time is greater than the timestamp of
any command that has been handled by pi before that time.
We assume that whenever pi sends a command, T S i is
updated with a greater value and used as timestamp T for the
command. Also, whenever pi receives a command with times-
tamp T , it updates its T S i with a value that is greater than T ,
if T ≥ T S i. We also assume that for any two T S i and T S j,
of pi and pj respectively, the value of T S i is different from the
value of T S j at any time. This is guaranteed by choosing the
values of T S i (T S j, respectively) in the set {(cid:4)k, i(cid:5) : k ∈ N}
({(cid:4)k, j(cid:5) : k ∈ N}, respectively). The total order relation on
those values is deﬁned as follows: for any two (cid:4)k1, i(cid:5), (cid:4)k2, j(cid:5),
we have that (cid:4)k1, i(cid:5)  T do
Hj.UPDATE(c, T , Pred, stable, B, ⊥)
return (c ∪ Hj .GETPREDECESSORS(c)) ⊆ Decidedj
Hj.UPDATE(¯c, ¯T , Pred \ {c}, stable, B, ⊥)
Pred ← Pred \ {¯c}
function Boolean DELIVERABLE(c)
Fig. 3. Auxiliary functions - node pj
in Hj in order to be included in Predj.
In case of a fast decision (see FastDecision transition in
Figure 4), the command leader pi is able to collect a fast
quorum of FQ replies that do not reject T ime for c (line
P5). It then submits c with the conﬁrmed T ime and the union
of the received predecessor sets, i.e., Pred, to the next stable
phase (lines P3–P4 and P6).
Note that unlike other multi-leader consensus protocols [13],
[10], a fast decision in CAESAR is guaranteed in case a fast
quorum conﬁrms the timestamp for a command, although
those nodes can reply with non-equal predecessors sets. In the
correctness proof of CAESAR (see Section V-F), we show that
such a condition is sufﬁcient to guarantee the recoverability of
the fast decision for c even in case the command leader and
at most other f − 1 nodes crash.
Stable phase. The purpose of the stable phase for a command
c with a timestamp T ime and predecessor set Pred is to
communicate to all the nodes, via a STABLE message, that c
has to be decided at timestamp T ime after all the commands
in Pred have been decided (line S1). In particular, whenever
a node pj receives a STABLE message for c, with T ime and
set Pred (lines S2–S7), it updates the tuple for c in Hj with
the new values and marks the tuple as stable (line S3).
Whenever each command in Pred has been decided (lines
16–17 of Figure 3), pj can decide c by triggering DECIDE(c)
(lines S5–S7). This is correct because, as we prove in Sec-
tion V-F, the phases executed before the stable phase guarantee
that for any pair of stable and non-commutative commands
c and ¯c, with timestamps T ime and T ime respectively, if
T ime < T ime then ¯c ∈ Pred, where Pred is the predecessor
set of c. Therefore, the decision order of non-commutative
commands is guaranteed to follow the increasing order of the
commands’ timestamps. However, this does not mean that if
¯c ∈ Pred, then T ime < T ime. Hence the stable phase has to
54
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:16 UTC from IEEE Xplore.  Restrictions apply. 
(cid:3)(cid:18)(cid:16)(cid:16)(cid:9)(cid:17)(cid:12)(cid:1)(cid:5)(cid:13)(cid:9)(cid:12)(cid:13)(cid:20)
(cid:3)(cid:18)(cid:16)(cid:16)(cid:9)(cid:17)(cid:12)(cid:1)(cid:5)(cid:13)(cid:9)(cid:12)(cid:13)(cid:20)
(cid:2)(cid:11)(cid:11)(cid:13)(cid:19)(cid:22)(cid:18)(cid:20)(cid:21)
(cid:2)(cid:11)(cid:11)(cid:13)(cid:19)(cid:22)(cid:18)(cid:20)(cid:21)
I1:
I1:
I2:
I2:
TT
TT
TT
P3:
P3:
P4:
P4:
← M AX j{T ime
(cid:4)(cid:9)(cid:21)(cid:22)(cid:1)(cid:6)(cid:20)(cid:18)(cid:19)(cid:18)(cid:21)(cid:9)(cid:15)(cid:1)(cid:6)(cid:14)(cid:9)(cid:21)(cid:13)
(cid:4)(cid:9)(cid:21)(cid:22)(cid:1)(cid:6)(cid:20)(cid:18)(cid:19)(cid:18)(cid:21)(cid:9)(cid:15)(cid:1)(cid:6)(cid:14)(cid:9)(cid:21)(cid:13)
FastProposalPhase(c, Ballot, T ime
, Whitelist)
FastProposalPhase(c, Ballot, T ime, Whitelist)
, Whitelist] to all pj ∈ Π
send FastPropose[c, Ballot, T ime
send FastPropose[c, Ballot, T ime, Whitelist] to all pj ∈ Π
P1:
P1:
j, Predj, OK/NACK]
receive FastProposeR[c, Ballot, T ime
receive FastProposeR[c, Ballot, T imej, Predj, OK/NACK]
P2:
P2:
from all pj ∈ S ⊆ Π : |S| = FQ ∨ (timeout ∧ |S| = CQ)
from all pj ∈ S ⊆ Π : |S| = FQ ∨ (timeout ∧ |S| = CQ)
TT
T ime
T ime ← M AX j{T imej : pi received
j : pi received
j, Predj, OK/NACK] from pj}
FastProposeR[c, Ballot, T ime
FastProposeR[c, Ballot, T imej, Predj, OK/NACK] from pj}
TT
Pred ← (cid:2)
Pred ← (cid:2)
j Predj : pi received
j Predj : pi received
j, Predj, OK/NACK] from pj
FastProposeR[c, Ballot, T ime
FastProposeR[c, Ballot, T imej, Predj, OK/NACK] from pj
if |S| = FQ ∧ (cid:2)j : pi received
if |S| = FQ ∧ (cid:2)j : pi received
j, Predj, NACK] from pj then
FastProposeR[c, Ballot, T ime
FastProposeR[c, Ballot, T imej, Predj, NACK] from pj then
StablePhase(c, Ballot, T ime
, Pred)
StablePhase(c, Ballot, T ime, Pred)
j, Predj, NACK] from pj then
FastProposeR[c, Ballot, T ime
FastProposeR[c, Ballot, T imej, Predj, NACK] from pj then
RetryPhase(c, Ballot, T ime
, Pred)
RetryPhase(c, Ballot, T ime, Pred)
SlowProposalPhase(c, Ballot, T ime