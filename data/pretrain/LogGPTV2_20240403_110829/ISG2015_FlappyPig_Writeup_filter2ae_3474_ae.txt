    #########################################################
    def print_test_map():
        """
        打印搜索后的地图
        """
        for line in test_map:
            print ''.join(line)
    def get_start_XY():
        return get_symbol_XY('S')
    def get_end_XY():
        return get_symbol_XY('E')
    def get_symbol_XY(s):
        for y, line in enumerate(test_map):
            try:
                x = line.index(s)
            except:
                continue
            else:
                break
        #print x, y
        #raw_input(":")
        return x, y
    #########################################################
    def mark_path(l):
        mark_symbol(l, '*')
    def mark_searched(l):
        mark_symbol(l, ' ')
    def mark_symbol(l, s):
        for x, y in l:
            test_map[y][x] = s
    def mark_start_end(s_x, s_y, e_x, e_y):
        test_map[s_y][s_x] = 'S'
        test_map[e_y][e_x] = 'E'
    def tm_to_test_map():
        print list("nihao")
        raw_input(":")
        for line in tm:
            test_map.append(list(line))
        #print test_map
        raw_input(":")
    step_map = {(-1, 0):"a", (1, 0):"d", (0,-1):"w", (0, 1):"s"}
    def getway(l, start, end):
        #print start
        #print end
        #print l
        begin = start
        way = []
        for x, y in l[1:]:
            diff = (end[0] - x, end[1] - y)
            end = (x, y)
            #print diff
            way.append(step_map[diff])
        way = way[::-1]
        print "".join(way)
    def find_path(s_x, s_y, e_x, e_y, w, h):
        #s_x, s_y = get_start_XY()
        #e_x, e_y = get_end_XY()
        a_star = A_Star(s_x, s_y, e_x, e_y, w, h)
        a_star.find_path()
        searched = a_star.get_searched()
        path = a_star.path
        #标记已搜索区域
        mark_searched(searched)
        #标记路径
        mark_path(path)
        print "path length is %d"%(len(path))
        print "searched squares count is %d"%(len(searched))
        #标记开始、结束点
        mark_start_end(s_x, s_y, e_x, e_y)
        return getway(path, (s_x, s_y), (e_x, e_y))
    def build_my_map():
        file_r = open("path.info", 'r')
        data = file_r.read()
        file_r.close()
        map_info = []
        map_info.append(['#' for i in xrange(499)])
        index = 0
        for i in xrange(497):
            item = ['#']
            for j in xrange(497):
                #item.append(ord(data[index]))
                #"""
                if ord(data[index]) & 0xf == 0:
                    item.append('#')
                else:
                    item.append('.')
                #"""
                index += 1
            item.append('#')
            map_info.append(item)
        map_info.append(['#' for i in xrange(499)])
        """
        little_map = []
        for item in map_info[:30+2]:
            little_map.append(item[:25+2])
        map_info = little_map
        #print len(map_info)
        """
        global test_map
        test_map = map_info
    if __name__ == "__main__":
        #把字符串转成列表
        build_my_map()
        s_x, s_y = 1,1
        e_x, e_y = 497,497
        w, h = e_x + 2, e_y + 2
        find_path(s_x, s_y, e_x, e_y, w, h)
        #print_test_map()
得到路径如下:
通过抓包发现,游戏将运行的路径按aswd发送给了服务器,最后到达终点时发送一个flag。如果作弊到达的,会发回no cheat。
    path = """
    ddddddddddddssddddssssssssassdddddddddsddwwwddddwwwwwwwwwddsssssssdddssasssssssaawaaaassaassssddddssssdssaassddsssassssaawaaawwdwwwaaaawwaasssssddsssssssssddwww
    dddssassssassdssssssaaassdddssddddssddddssdssaaaaassssssssssssaasaawwwwwaaassssssaaaaasaaaasaassssaaaawwaaaaaaassddddssssdddsddsssddddssdssaassdssssssddssddddssssdddssssdsssddwwwdwwawwwddsddddwwddwwddddwwdddwwawwaaawwdddwwdddssssdddssdddddwwaawwdddwddsssssddssssssaaaawwaaassdssddsddwddddssssssssssaaawwwwwawaaaaawaaasaassaassaaaawwaaaassssssssddddddwwwddsssddssssssddsssssssdddddsdddwwddddddddddsssdddwwwdddwwddwwwwddwddddddsssddddwwwwddwwwwwwddddssddssdssddssasssssddwwddsdssassaasssddwddddssssssddddwwwwwddsssssddddssddsddwwwawwwawaaawwdwwdddddddssssdddwwdddwwaaawwwwawwdddddwwddwwddwddssssssaaaasaaassdddddddddddssddsddwddddddddwddddwwddsssddddsssaaaasassssdsddwwwdddddssssdsddwwwdddsssdsssaassssaaassdddssddddddssssddddssssddsddddsddssssssssaaaaaawaasssddssdssssdsdddsdsssddddddwdwwaaaawwwwdddddwwddwwddwddsssaasssddwddwdwwwwwwwdwwwddsddddwdwwwwwaawwwwwwdddsssddwwwdddddwwwwdwwwddsssssddsssddwddddwwddddwwwwdddssssdddwwwddsssdddddssssssasaawwwwaasssaaassddssaaaassssaaaaassssdsssdsssssasssaaawaaaaassdddssddsssaawaaaaaaaassssddssddddddwddsssdssaaaawwaaasaaaasssdddddddsssaaasssddssdssaaawwaaaaassdddssssdssssdddddwwwwwddsssssssaaassdddddwwdwwwwdddddssddddddwwdddwwwwdddddwwwwaawwwwddwwdddsddddddddwdddwwdddssassassasssssddwwwddwwdddssssaassdddddddsddwdwwwwdwwwwddddwddsssssaassassdddddsssssssddwdddddwwwwdwddssdddddwdddssddddddddsddssddwwwwddsdddssasssssddwwddssddwwddwwwwddssssssddwwwwwwwddwwdddssassssssdddsdddsddddddddssssdssssaaaaassssssssassdddssssdssssdssssddsssssddwwddssddwddwddsddddsssssaawwaasaaaasaaaasssdddssssddddwwwwdddssssdssssdddwddsdssasaaaasaaaaaaassdddddddddsddwddwddddddsdddddddddwwaaaawwaaaaaaaawwdddwwwddssddwwwwddsdssssdddwwddwdwwwwwaawwaaaawwdddddddddddwwwddsssssaaassdsddddsddddddddddsddwwwaaaaaaawwdddddwddsddssssssddddwwwwwwddwwdddddddssassssdsssdsssssassdssssssassdddssdddssaaaaaaawaasssssssddddddwddsssddddddwddsdssssdddsssddwwwdddssssddddddwwdwwwwddddsddddsssssddddssddssdssassssdssaaasssssssddsdddwwwwdddssssssssaaaaaaaawwaawwwwwwwwaawwwwwaassssaaaasaassssdddddwwdddssssssaaaassssdssassaasssaaaawwwaaassdssssddddsssddwwddsssddddddssdssaaawaaaawaaaaaasaawwaasssssssdsssdddddsddssdssdddssssaassssaassaasaaawaaassssdssddssaaaaaaaawwddwwaaaaasssssaawaaaaaaaasssssddwddddssssssaassssssdddsssdddsddssssssssssssdddsssdsddddwwddwwwddssddddwdddssassaaaasssaawaaaaaaaasssddwdddssasssddddsddddssddddsddssddwwwwwwaaaawwwwddddwwwddwddsssssssssassssdddddddddsssaawaaaaassssaaawaassssddddddddddsssssassdddssssssssssssaasssddddsssssaasssddwdddssassssddddsddddddsssssssaassaaaaaassaaaaaaawwwawaawwaaassdssssssddddddsddwddddsddwwddssdddds"""
    path = path.replace("n", "")
    from zio import *
    target = ('202.120.7.132', 9999)
    #target = './test'
    def exp(target):
        #io = zio(target, timeout=10000, print_read=COLORED(REPR, 'red'), print_write=COLORED(REPR, 'green'))
        io = zio(target, timeout=10000, print_read=COLORED(RAW, 'red'), print_write=COLORED(RAW, 'green'))
        for ch_t in path:
            io.writeline(ch_t)
        io.writeline('flag')
        io.interact()
    exp(target)
得到flag:
## Mobile
### Forest (150)
首先观察这个函数:
在判断相等的时候使用的长度实际上是nj和v1中较短的一个长度。而nj即为字符串” VFT}E7gy4yfE7tuG6{”。
那么在:
这里对输入进行了cc,ca,cb三种不同变换方式后进行了拼接,其中ca和cc在变化后的长度是保持不变的。
这里猜测如果输入的长度和”VFT}E7gy4yfE7tuG6{“长度相等的话。那么ca和cb两种加密方式实际上是没有任何用处的。cc的加密方式是逐位的,这里直接逐位爆破了,得到flag。
    __author__ = 'bibi'
       target='VFT}E7gy4yfE7tuG6{'
       for i in range(len(target)):
           rr=""
           print "n",
           for j in range(0xff):
               temp=0
               if j 109:
                   if j >=65 and j=110 and j   =78 and j   =48 and j ord('Z'):
                                         if sign == 1:
                                                   v13 = (v30[index] & 0x26 | ~v30[index] & 0xD9) ^ 0xDE;
                                         else:
                                                   v13 = (v30[index] & 0xF6) | ~v30[index] & 9;
                       #print v13
                       if v13 == aNzRol68hviis8q[index]:
                                print index, "find one:",chr(v30[index])
                                if sign == 0:
                                         sign = 1
                                else:
                                         sign = 0
                                break
                                #value
    print v30
    v30 = [chr(c) for c in v30]
    print "".join(v30)
flag: