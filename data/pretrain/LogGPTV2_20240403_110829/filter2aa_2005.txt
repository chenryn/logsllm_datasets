# ModScan: A SCADA MODBUS Network Scanner

## Presenter
Mark Bristow  
Email: [PI:EMAIL]

## Agenda
- Brief Introduction to SCADA Systems
- The MODBUS Protocol
- MODBUS TCP
- ModScan Demonstration
- ModScan Project Information
- Q&A

## Disclaimer
- The material in this presentation is intended for authorized security scanning and auditing.
- The presenter is not responsible for any misuse of the information provided.

## What is SCADA?
- **Supervisory Control And Data Acquisition (SCADA)** is a system that centrally gathers data in real time from local and remote locations to control equipment and conditions.
- SCADA systems are often referred to as Industrial Control Systems (ICS), though this term is not entirely accurate.

## Where is SCADA Used?
- Power Generation and Transmission
- Water Treatment and Distribution
- Pipelines
- Traffic Control Systems
- Manufacturing Facilities
- National Infrastructure
- Communications

## SCADA Architecture
(Include a diagram or brief description of the typical SCADA architecture)

## What is ModScan?
- **ModScan** is a tool designed to detect open MODBUS/TCP ports and identify device Slave IDs associated with IP addresses.
- It is intended for administrators and security auditors to accurately reconnoiter a MODBUS/TCP network.

## The MODBUS Protocol
### Overview
- Developed in 1979 by Modicon
- Free and open-source
- The most common protocol found in SCADA and ICS networks
- Default port: 502 (not 503, which is for Modbus RTU over TCP)

### Variants
- **MODBUS RTU**: Compact binary format
- **MODBUS ASCII**: Human-readable format

### Packet Construction
- **Valid Function Codes**: 1-127
- **Maximum Packet Size**: 256 bytes
- **Encoding**: Big-Endian
- **Error Check**: CRC/LRC

#### Application Data Unit (ADU) and Protocol Data Unit (PDU)
- **ADU**: 256 bytes max
  - **Slave ID**: 1 byte
  - **Function Code**: 1 byte
  - **Data**: Up to 252 bytes
  - **Error Check**: 2 bytes
- **PDU**: Same as ADU, excluding the Error Check

## Typical Communication
- **Master/Slave Serial Protocol**
- Only Masters can initiate communication

### Example
- **Master** initiates a request
- **Slave** executes the command
- **Slave** initiates a response
- **Master** receives the response

## Error Communication
- **Error Function Code**: 0x80 + Function Code
- **Error Codes**: Defined in the specification

### Example
- **Master** initiates a request
- **Slave** detects an error
- **Slave** reports the error
- **Master** receives the error

## Function Codes
| Function Code | Description |
|---------------|-------------|
| 01            | Read Coils  |
| 02            | Read Discretes |
| 03            | Read Holding Registers |
| 04            | Read Input Registers |
| 05            | Write Coil |
| 06            | Write Register |
| 07            | Read Exception Status |
| 08            | Diagnostics |
| 0B            | Get Comm Event Counter |
| 0C            | Get Comm Event Log |
| 0F            | Write Multiple Coils |
| 10            | Write Multiple Registers |
| 11            | Report Slave ID |
| 14            | Read File Record |
| 15            | Write File Record |
| 16            | Mask Write Register |
| 17            | Read/Write Multiple Registers |
| 18            | Read FIFO Queue |

## Diagnostic Codes
| Function Code | Description |
|---------------|-------------|
| 00            | Return Query Data |
| 01            | Restart Communication |
| 02            | Return Diagnostic Register |
| 03            | Change ASCII Input Delimiter |
| 04            | Force Listen Only Mode |
| 0A            | Clear Counters and Diagnostic Registers |
| 0B            | Return Bus Message Count |
| 0C            | Return Bus Communication Error Count |
| 0D            | Return Bus Exception Error Count |
| 0E            | Return Slave Message Count |
| 0F            | Return Slave No Response Count |
| 10            | Return Slave NAK Count |
| 11            | Return Slave Busy Count |
| 12            | Return Bus Character Overrun Count |
| 14            | Clear Overrun Counter and Flag |

## MODBUS Notes
### Addressing
- **Valid Slave IDs**: 1-247
- **Unique Slave IDs per bus**
- **Masters do not require an address**
- **Slaves will error if improperly addressed**

### Communication
- **One request at a time**
- **Masters must wait for responses**

## MODBUS/TCP
- **MODBUS protocol wrapped in TCP**
- **Checksum dropped**
- **Introduces Gateway device to MODBUS**
- **Port 502 reserved for MODBUS/TCP**
- **No additional inherent security measures**

### Packet Structure
- **MBAP (MODBUS Application Protocol Header)**
- **PDU remains the same from the MODBUS spec**
- **Protocol ID is always 0x0000**
- **Big-Endian encoding**

### Example Request
- **Transaction ID, Protocol ID, Length, Slave ID, Function Code, Diagnostic Code, Data**

### Example Response
- **Transaction ID, Protocol ID, Length, Slave ID, Function Code, Diagnostic Code, Data**

### Error Request
- **Transaction ID, Protocol ID, Length, Slave ID, Function Code, Bad Diagnostic Code**

### Error Response
- **Transaction ID, Protocol ID, Length, Slave ID, Function Code, Error Code (data)**

## Errors and Key Points
- **Improper SID**: Slave does not respond
- **Proper SID**: Slave responds with a valid response
- **Mapping Basis**: Responses and errors

## ModScan
- **Scans IP range for open 502 ports**
- **Finds SIDs via brute force**
- **Stops after first discovered SID by default**
- **Output format: "IP:Port\tSID"**

### Options
- `-p PORT (502)`
- `-t TIMEOUT socket timeout (100 ms)`
- `-a --aggressive Aggressive Mode`
- `-f FUNCTION MODBUS Function Code (17)`
- `--data Data for use with -f`
- `-v, -d Verbose, Debug`

## ModScan Demonstration
- **Scanning a sample network**
- **Analyzing a pcap file**
- **Demo of additional options**

## ModScan Project
- **Project Website**: http://modscan.googlecode.com
- **Uses**
  - Security Network Enumeration
  - IDS/Network Monitoring Test
  - Asset Management
  - Bulk Commands

### Known Issues
- **Very noisy**
- **Inefficient brute-forcing of all ports**
- **Does not interpret Error Codes**
- **Can generate false negatives**
- **Does not calculate Length**
- **TCP Checksum not properly calculated**

### Planned Enhancements
- **Interpret Error Codes**
- **Implement with SCAPY**
- **Additional Protocol Support**
- **Device Fingerprinting**
- **Any other cool suggestions**

## Questions?

## References
- [Wikipedia: SCADA](http://en.wikipedia.org/wiki/SCADA)
- [MODBUS Organization: Specifications](http://www.modbus.org/specs.php)
- [Wingpath: MODBUS Tools](http://www.wingpath.co.uk)

## Contact Information
- **Mark Bristow**
- **Email**: [PI:EMAIL]
- **Project Website**: modscan.googlecode.com