important differences.
The first departure from BSD sockets is in how data is sent. To
send data, the experiment controller uses the nsend command with
a time parameter that tells the endpoint when it should send the
data. This allows the experiment controller to schedule data to be
sent at some future time, rather than immediately. (To send immedi-
ately, the controller specifies a time in the past.) The endpoint then
attempts to send the data at the specified time, recording the time
it was actually sent; an endpoint can retrieve this timestamp using
the mread command described below. Delaying packets is useful
when precise packet timing is necessary. For example, to measure
bandwidth to a particular host, the experiment controller would
schedule a sequence of packets to be sent a short time in the future.
This avoids contention for the access link, since in most cases the
same access link carries both PacketLab control and measurement
traffic. By scheduling data to be sent later, rather than sending it im-
mediately, traffic between the endpoint and experiment controller
does not affect the bandwidth measurement.
The second difference between PacketLab and BSD socket inter-
faces is in how data is received. When an endpoint receives network
data, it does not forward it to the experiment controller immediately,
but buffers it internally until the experiment controller issues the
nopen(sktid,proto)
nopen(sktid,proto,locport,remaddr,remport)
The first form opens a raw IP socket on the endpoint. The second
form opens a TCP or UDP socket with the specified local port to the
specified remote address and port.
nclose(sktid)
Closes the specified socket.
nsend(sktid,time,data)
Queues data to be sent on a socket at a particular time.
ncap(sktid,time,filt)
Installs a packet filter on a raw socket. Packets matched by filter
will be captured until the specified time.
npoll(time)
Polls endpoint for received network data, sending it to experiment
controller. Waits until time if no data is available.
mread(memaddr,bytecnt)
Reads bytecnt bytes starting from memaddr in endpoint virtual
address space.
mwrite(memaddr,data)
Writes data to location memaddr in endpoint virtual address space.
Table 1: Operations supported by PacketLab endpoints.
npoll command. Only then does the endpoint sends all received
data to the experiment controller. Buffering received data keeps the
access link free of control traffic during a measurement, ensuring
that PacketLab control traffic does not interfere with the experi-
ment. If an experiment controller does not poll an endpoint quickly
enough, an endpoint may run out of space to store all received data.
When this happens, the endpoint simply stops reading (and buffer-
ing) experiment data. For TCP sockets, this will create flow control
back pressure, while for UDP and raw IP sockets, the endpoint’s
host OS will simply drop packets. In addition to the received data,
the npoll command also returns the number of packets and bytes
dropped due to buffer exhaustion.
Opening a raw socket exposes the endpoint to all network traf-
fic arriving on the endpoint’s network interface. To limit which
packets are returned, the experiment controller can install a packet
filter using the ncap command. The filt parameter specifies the
packet filter to use for filtering packets (see Section 3.4). The de-
fault behavior is to drop all packets, so an endpoint does not start
capturing packets on a raw socket until the experiment controller
installs a filter. The ncap command also takes a time parameter,
which tells the endpoint when to stop capturing packets. This time
can be arbitrarily far in the future, resulting in the filter remaining
in place for the remainder of the experiment.
In raw mode, some incoming packets induced by the experiment
may generate a response from the endpoint’s host operating sys-
tem. For example, an incoming TCP packet normally causes the
operating system to send a RST packet if there is no matching TCP
session. This can interfere with measurement experiments that
create TCP sessions using the raw interface. To handle this, the
packet filter installed by ncap specifies whether a packet should be
ignored, consumed or mirrored to the experiment controller. (The
mirror option is useful because it allows PacketLab to be used as a
passive packet capture interface, for example, to capture packets at
a network telescope [24].)
IMC ’17, November 1–3, 2017, London, United Kingdom
Levchenko et al.
Not all endpoints may be able to support raw sockets. Many
operating systems require superuser privileges to use raw sockets.
If a PacketLab endpoint is a software agent running without root
privileges, it will be unable to open a raw socket. (An experiment
controller can determine if this is the case using the endpoint infor-
mation commands, described next.) Endpoints that do not support
the raw interface are still useful for experiments that only need a
TCP or UDP socket, but not for experiments that need to create
raw IP packets.
Endpoint Information and Configuration. An experiment con-
troller may need additional information from the endpoint to carry
out an experiment. For example, to craft a valid IP packet in raw
mode, a controller needs to know the endpoint’s internal IP address.
(For endpoints behind a NAT, this address will be different from its
external address.) A PacketLab endpoint makes this information
such as its IP address, DHCP parameters, and the current socket
state available to the controller via a structured block of memory
that is accessed using the mread and mwrite commands listed in
Table 1. The contents of this block of memory are also accessible to
monitor programs (Section 3.4).
Timekeeping. The time parameter used in the nsend command
and the timestamps on received packets are measured with respect
to the endpoint’s local clock. To keep endpoints as simple as pos-
sible, PacketLab does not require endpoints to keep accurate time.
Instead, an endpoint makes its clock available as a read-only 64-bit
value via the memory accessed using mread and mwrite commands.
If an experiment requires accurate timing, the experiment controller
should start by determine its clock offset with respect to the end-
point using a clock synchronization algorithm such as NTP [22].
By determining the clock offset of each endpoint, an experiment
controller can then coordinate a multi-endpoint experiment that
requires exact timing.
3.2 Rendezvous
Experiment controllers and measurement endpoints find each other
with the help of a rendezvous server, which provides a publish-
subscribe facility for experiment dissemination. Experimenters
publish their experiments to a rendezvous server by sending the
rendezvous server an experiment descriptor, which contains the
address of the experiment controller, the experiment name, and a
URL describing the experiment. When a PacketLab measurement
endpoint starts up, it tries to find an experiment to run by con-
tacting a rendezvous server and subscribing to a set of experiment
channels. The rendezvous server sends the endpoint all experiment
descriptors published to these channels. (We explain channels in
Section 3.3). For each experiment descriptor it receives from the
rendezvous server, an endpoint contacts the experiment controller
given in the descriptor. The experiment controller can interact with
the endpoint to determine whether it is suitable for a particular
experiment based on its IP address and other information made
available by the endpoint as described earlier.
An experiment descriptor does not contain the set of commands
issued by the experiment controller, because experiments execute
in an interactive fashion. An experiment controller is free to issue
any commands during an experiment; the endpoint will use the
monitor mechanism, described next, to determine whether it should
execute each command.
Unlike experiment controllers, rendezvous servers are persistent.
They constitute the only permanent infrastructure required by
PacketLab. Their addresses may be hard-coded into the endpoint
software like the names of DNS root servers. Rendezvous servers
provide a simple service and are not themselves directly involved
in experiments. We believe that two or three rendezvous servers
can be maintained by the measurement community, just as NTP
and PGP servers are managed by their respective communities.
3.3 Access Control
Access to rendezvous servers and measurement endpoints in Packet-
Lab is controlled using cryptographic certificates similar to X.509
certificates used in the SSL/TLS ecosystem. Like X.509 certificates,
PacketLab certificates may be chained to support hierarchical dele-
gation. A certificate consists of a cryptographic hash of the signer
public key, a cryptographic hash of the signed object, an optional
list of restrictions, and a digital signature of the above.
There are two functionally different kinds of certificates: exper-
iment certificates and delegation certificates. Both use the same
format and differ only in the object being signed. In an exper-
iment certificate, the object signed is an experiment descriptor
(Section 3.2). In a delegation certificate, the object signed is another
public key. A certificate may contain an optional list of restrictions
on certificate applicability: validity period, experiment monitor
(Section 3.4), buffer space limits, and priority (described later). The
optional restrictions may apply to both kinds of certificates to limit
the kinds of experiments an experimenter can run under those
certificates.
Rendezvous Server Certificate Checking. The first use of certifi-
cates is to grant experimenters permission to publish experiments
on a rendezvous server. To publish an experiment, an experimenter
must first have a public/private key pair. The experimenter requests
permission to publish her experiments from the rendezvous server
operator. It is not the responsibility of the rendezvous server oper-
ator to act as an experiment gatekeeper, so permission to publish
should be granted liberally. In practice, we expect the rendezvous
server operator to delegate this task to a set of respected mem-
bers of the community who can grant experimenters permission
to publish experiments. The reason a certificate is required at all
is to protect the rendezvous server against anonymous abuse by
tying experiments to an individual or organization. The rendezvous
server operator (or a delegate) grants a request to publish by sign-
ing a certificate where the subject is the hash of the public key of
the experimenter. (Public keys are identified by their hash value.)
An experimenter can then publish experiments on the rendezvous
server by signing them with this key and providing the certificate
issued by the rendezvous server operator to the rendezvous server.
Each rendezvous server has a list of public keys whose signatures
it accepts. An experiment descriptor must be signed (either directly
or through delegation) by one of these keys for it to be accepted by
the rendezvous server.
Measurement Endpoint Certificate Checking. Measurement
endpoints follow a similar pattern. Each measurement endpoint
has a set of public keys whose signatures it will accept. This set of
trusted keys is installed and managed out-of-band by the endpoint
operator. To run an experiment on an endpoint, an experiment
controller must present the endpoint with an experiment descriptor
PacketLab: A Universal Measurement Endpoint Interface
IMC ’17, November 1–3, 2017, London, United Kingdom
Contention. Access to endpoints is time-shared by multiple con-
trollers. An endpoint can be involved in multiple concurrent experi-
ments; however, at any given time, no more than one controller has
control of an endpoint. If more than one controller wants to run an
experiment on an endpoint, the endpoint decides which experiment
to run based on its priority. When an experiment controller starts an
experiment, it tells the endpoint at what priority it wants the exper-
iment to run; this priority must not exceed the maximum priority
specified in any certificate in the certificate chain used to authorize
the experiment (see Section 3.3). If an experiment controller asks
an endpoint to run a higher-priority experiment than what it is
currently running, the endpoint notifies the experiment controller
of the current experiment that its experiment has been interrupted,
and then transfers control to the controller with the higher-priority
experiment. The interrupted experiment is suspended until the
higher-priority experiment completes or its controller suspends
it by yielding control of the endpoint. The endpoint then returns
control to the controller with the next highest priority suspended
experiment. The ability to interrupt experiments ensures that low-
priority experiments do not block high-priority ones. An endpoint
operator can use this mechanism to grant outside researchers ac-
cess to its endpoints with the understanding that their experiments
may be interrupted at any time for the operator’s own experiments.
As noted, unless interrupted by a higher-priority experiment,
controllers have exclusive control of an endpoint during their ex-
periment. This is necessary to prevent experiments from interfering
with each other by competing for the same access link or endpoint
buffers.
3.4 Experiment Monitor
In addition to the coarse certificate-based access control system
described above, PacketLab experiment descriptors and certificates
include a monitor. Monitors provide the mechanism by which an
operator restricts what an experiment can do on an endpoint. An
endpoint uses the monitor during the experiment to ensure that
the experiment does not stray outside the behavior allowed by the
endpoint operator.
Conceptually, a monitor is a black box that says whether an
operation is allowed. Practically, a monitor is a program executing
in a specialized virtual machine, a design borrowed from the BSD
Packet Filter (BPF) [21], itself an evolution of earlier designs [10,
23]. In fact, BPF already nearly satisfies our requirements for a
monitor mechanism. BPF has limitations, however. In particular,
many implementations of BPF have a limited scratch memory of 16
32-bit words that does not persist across packets, making stateful
filtering impossible. BPF programs must also be acyclic, a design
that ensures that they execute in linear time (in the size of the
program). Several packet filtering schemes attempt to overcome the
limitations of BPF [7, 8, 15, 18, 28, 32, 33]; additional investigation is
necessary to determine whether these, or a completely new scheme,
would be most appropriate for PacketLab.
Recall that the ncap command included a packet filter argument
that specifies which packets the controller wants the endpoint to
capture. This packet filter is expressed as a program using the same
mechanism as the monitor. Thus, both packet filters used with ncap
and monitors attached to certificates determine which packets will
be returned to the controller.
Figure 1: Authorization relationships in a PacketLab experiment.
An experimenter obtains an experimenter certificate signed by a
rendezvous server operator (➊). The experimenter then creates and
signs a delegation certificate (➋) and has it signed by an endpoint
operator whose endpoints she wants to use (➌). The delegation cer-
tificate allows the experimenter to create certificates for specific ex-
periments (➍). Each experiment is published to a rendezvous server
(➎), which accepts the experiment because the certificate chain es-
tablishes that the rendezvous server operator authorized the exper-
imenter to publish experiments on the rendezvous server (➏). The
experiment controller presents the certificate to each measurement
endpoint (➐), which accepts the experiment because the certificate
chain establishes that the endpoint operator authorized the experi-
ment to run on the endpoint (➑).
that is directly or indirectly (via a chain of certificates) signed by
one of its trusted keys. While an experimenter can ask the endpoint
operator to sign an experiment descriptor for each experiment, it
is more convenient to use delegation certificates. A delegation cer-
tificate signed by the endpoint operator authorizes a public-private
key pair (controlled by an experimenter) to be used to sign experi-
ment descriptors that will be accepted by the operator’s endpoints.
The experimenter must also sign the key pair corresponding to