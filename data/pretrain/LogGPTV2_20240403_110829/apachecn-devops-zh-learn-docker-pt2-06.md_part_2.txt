ubuntu 16.04 f753707788c5 3 weeks ago 127.2 MB 
```
构建了 HTTP 服务器映像后，现在让我们进入下一个会话，学习如何运行 HTTP 服务。
### 将 HTTP 服务器映像作为服务运行
在本节中，我们将使用我们在上一节中创建的 Apache HTTP 服务器映像启动一个容器。这里，我们使用`docker run`子命令的`-d`选项以分离模式(类似于 UNIX 守护进程)启动容器:
```
$ sudo docker run -d apache2
9d4d3566e55c0b8829086e9be2040751017989a47b5411c9c4f170ab865afcef  
```
启动容器后，让我们运行`docker logs`子命令，看看我们的 Docker 容器是否在其 stdin(标准输入)或 stderr(标准错误)上生成任何输出:
```
$ sudo docker logs \
9d4d3566e55c0b8829086e9be2040751017989a47b5411c9c4f170ab865afcef 
```
由于我们没有完全配置 Apache HTTP 服务器，您会发现以下警告，作为`docker logs`子命令的输出:
```
AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.17.0.13\. Set the 'ServerName' directive globally to suppress this message
```
从前面的警告消息中，很明显分配给这个容器的 IP 地址是`172.17.0.13`。
### 连接到 HTTP 服务
在前一节中，不光彩的是，从警告信息中，我们发现容器的 IP 地址是`172.17.0.13`。在完全配置的 HTTP 服务器容器上，没有这样的警告，所以我们仍然运行`docker inspect`子命令来使用容器标识检索 IP 地址:
```
$ sudo docker inspect \
--format='{{.NetworkSettings.IPAddress}}' 
9d4d3566e55c0b8829086e9be2040751017989a47b5411c9c4f170ab865afcef
172.17.0.13
```
找到了作为`172.17.0.13`的容器的 IP 地址后，让我们使用`wget`命令，从 Docker 主机的 shell 提示符中快速运行一个关于这个 IP 地址的 web 请求。在这里，我们选择用`-qO -`运行`wget`命令，以便在安静模式下运行，并在屏幕上显示检索到的 HTML 文件:
```
$ wget -qO - 172.17.0.13
```
在这里，我们只展示了检索到的 HTML 文件的前五行:
```
  :`
*   ``
*   `::`
*   `::`
这里，``是 Docker 主机的 IP 地址，``是 Docker 主机端口号，``是容器的端口号。在本节中，我们向您展示`-p :`格式，并在后续章节中介绍其他格式。
为了更好地理解端口绑定过程，让我们重用之前创建的`apache2` HTTP 服务器映像，并使用`docker run`子命令的`-p`选项旋转容器。`80`端口是 HTTP 服务的发布端口，作为默认行为，我们的`apache2` HTTP 服务器也可以在端口`80`上使用。这里，为了展示这种能力，我们将使用`docker run`子命令的`-p :`选项，将容器的端口`80`绑定到 Docker 主机的端口`80`，如下命令所示:
```
$ sudo docker run -d -p 80:80 apache2
baddba8afa98725ec85ad953557cd0614b4d0254f45436f9cb440f3f9eeae134
```
现在我们已经成功启动了容器，我们可以使用任何外部系统的任何网络浏览器连接到我们的 HTTP 服务器(前提是它具有网络连接性)来访问我们的 Docker 主机。
到目前为止，我们还没有向我们的`apache2` HTTP 服务器映像添加任何网页。因此，当我们从网络浏览器连接时，我们会看到下面的屏幕，它只是 Ubuntu Apache2 包附带的默认页面:
![](img/image_06_006.png)
### 容器的网络地址转换
在前一节中，我们看到了`-p 80:80`选项是如何发挥魔力的，不是吗？嗯，实际上，在引擎盖下，Docker Engine 通过在 Linux `iptables`配置文件中自动配置**网络地址转换** ( **NAT** )规则来实现这种无缝连接。
为了说明在 Linux `iptables`中 NAT 规则的自动配置，让我们查询 Docker 主机`iptables`的 NAT 条目，如下所示:
```
$ sudo iptables -t nat -L -n  
```
接下来的文本是从`iptables` NAT 条目中摘录的，它是由 Docker 引擎自动添加的:
```
Chain DOCKER (2 references)
target prot opt source destination
DNAT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:80 to:172.17.0.14:80
```
从前面的摘录中，很明显 Docker 引擎有效地增加了一个`DNAT`规则。以下是`DNAT`规则的细节:
*   `tcp`关键字表示此`DNAT`规则仅适用于 TCP 传输协议。
*   第一个`0.0.0.0/0`地址是源地址的元 IP 地址。该地址表示连接可以来自任何 IP 地址。
*   第二个`0.0.0.0/0`地址是 Docker 主机上目的地址的元 IP 地址。该地址表示可以连接到 Docker 主机中的任何有效 IP 地址。
*   最后，`dpt:80 to:172.17.0.14:80`是转发指令，用于将 Docker 主机的端口`80`上的任何 TCP 活动转发到`172.17.0.17` IP 地址，即我们的容器和端口`80`的 IP 地址。
Therefore, any TCP packet that the Docker host receives on port `80` will be forwarded to port `80` of the container.
### 正在检索容器端口
Docker 引擎至少提供了三种不同的选项来检索容器的端口绑定详细信息。在这里，让我们首先探索选项，然后，继续剖析检索到的信息。选项如下:
*   `docker ps`子命令始终显示容器的端口绑定详细信息，如下所示:
```
 $ sudo docker ps
 CONTAINER ID IMAGE COMMAND 
 CREATED STATUS PORTS 
 NAMES
 baddba8afa98 apache2:latest 
 "/usr/sbin/apache2ct 
 26 seconds ago Up 25 seconds 
 0.0.0.0:80->80/tcp 
 furious_carson
```
*   `docker inspect`子命令是另一种选择；然而，你必须浏览相当多的细节。运行以下命令:
```
      $ sudo docker inspect baddba8afa98
```
*   `docker inspect`子命令显示三个 JSON 对象中的端口绑定相关信息，如下图所示:
*   `ExposedPorts`对象枚举通过`Dockerfile`中的`EXPOSE`指令暴露的所有端口，以及使用`docker run`子命令中的`-p`选项映射的容器端口。由于我们没有在`Dockerfile`中添加`EXPOSE`指令，我们所拥有的只是使用`-p 80:80`作为参数映射到`docker run`子命令的容器端口:
```
             "ExposedPorts": {
 "80/tcp": {}
 },
```
*   `PortBindings`对象是`HostConfig`对象的一部分，该对象列出了通过`docker run`子命令中的`-p`选项完成的所有端口绑定。该对象不会列出通过`Dockerfile`中的`EXPOSE`指令暴露的端口:
```
 "PortBindings": {
 "80/tcp": [
 {
 "HostIp": "",
 "HostPort": "80"
 }
 ]
 },
```
*   `NetworkSettings`对象的`Ports`对象具有与前面的`PortBindings`对象相同的细节级别。但是，该对象包括通过`Dockerfile`中的`EXPOSE`指令显示的所有端口，以及使用`docker run`子命令中的`-p`选项映射的容器端口:
```
 "NetworkSettings": {
 "Bridge": "",
 "SandboxID":"ID removed for readability",
 "HairpinMode": false,
 "LinkLocalIPv6Address": "",
 "LinkLocalIPv6PrefixLen": 0,
 "Ports": {
 "80/tcp": [
 {
 "HostIp": "0.0.0.0",
 "HostPort": "80"
 }
 ]
 },