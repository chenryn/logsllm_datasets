●
https://www.exploit-db.com/  
For   instance,   if  I   discover   a   CMS   named    “Magento”   I   would   perform   the   following   search   
on   exploit-db:  
In   addition   to   finding   single   exploits   you   want   to   search   GitHub   to   see   if  there   is   a   tool   
that   can   scan   for   all   the   possible   vulnerabilities   and   misconfigurations.   Like   the   tools   for   
wordpress,drupal,   joomla,   and   adobe   aem   there   are   scanners   that   target   other   
platforms.  
As   it  turns   out   there   is   a   Magento   vulnerability   scanner   called   magescan   so   we   can   just   
use   that:  
●
https://github.com/steverobbins/magescan  
Make   sure   to   use   this   process   whenever   you   come   across   a   CMS   framework   you   don’t   
recognize.  
Conclusion  
Over   half   of   the   internet   is   being   run   by   a   CMS   framework.   So,   you   are   almost   
guaranteed   to   run   into   a   CMS   at   one   point   or   another.   When   you   do   find   a   CMS,  you   
don’t   want   to   waste   time   manually   testing   the   endpoint,   you   want   to   test   for   known   
CVEs   and   misconfigurations.   The   best   way   to   do   this   is   to   find   some   sort   of   CMS   
specific   vulnerability   scanner.   If   you   can   find   that   you   can   try   searching   exploit-db   and   
google   for   known   CVEs.   If   you   still   come   up   empty   handed   it’s  probably   best   to   move   on   
unless   you're   hunting   for   zero   days.  
Basic  Hacking  Github  
Introduction  
GitHub   is   a   web-based   version-control   and   collaboration   platform   for   software   
developers   and   as   of   right   now   it’s  one   of   the   easiest   ways   to   compromise   an   
organization.   This   is   one   of   my   go   to   techniques   when   I   want   an   easy   high   impact   
finding.  
Finding  Sensitive  Information  
Pilliging   github   for   sensitive   information   disclosures   is   one   of   the   easiest   ways   to   
compromise   an   organization.   It   doesn’t   matter   how   hardened   your   external   perimeter   is   
if  your   developers   are   hard   coding   credentials   and   posting   them   online   you’re   going   to   
get   compromised.   
It's   fairly   common   for   developers   to   hard   code   test   accounts,   API   keys,   or   whatever   
when   they   are   writing   a   piece   of   software.   This   makes   things   easy   for   the   developer   as   
they   won’t   have   to   enter   their   credentials   every   time   they   go   to   run/test   their   program.   
However,   more   times   than   not   these   credentials   remain   in   the   source   code   when   they   
push   it  to   Github,   if  this   repository   is   public   everyone   can   view   it.  
The   first   thing   you   need   is   a   list   of   sensitive   words   to   search   on.   This   can   be   a   file   name,   
file   extension,   variable   name,   or   anything   else.   A   good   list   can   be   found   below   thanks   to   
“@obheda12”:  
Once   you   have   a   list   of   sensitive   things   to   search   for   your   ready   to   hunt!   I   normally   just   
type   in   the   domain   of   the   target   followed   by   the   Github   Dork   as   shown   below:  
●
Domain.com   “password”  
As   you   can   see   above,   searching   for   the   domain   “hackerone.com”   and   the   term   
“password”   gave   us   7,390   results.   In   a   typical   scenario   I   would   end   up   going   through   
90%   of   these   results   by   hand   for   a   few   hours   before   I   find   something   juicy.   Having   to   
spend   hours   sorting   through   a   bunch   of   trash   is   really   the   only   downside   to   this   
technique.   However,   when   you   do   find   something   it  typically   leads   to   an   insta   high   or   
critical   finding.  
Conclusion  
As   of   right   now   Github   is   one   of   the   easiest   ways   to   get   a   high   or   critical   vulnerability.   
Almost   every   developer   uses   Github   and   these   same   developers   also   like   hard   coding   
passwords   in   their   source   code.   As   long   as   you're   willing   to   spend   a   few   hours   
searching   through   thousands   of   repos   you’re   almost   guaranteed   to   find   something   
good.  
Basic  Hacking  Subdomain  Takeover  
Introduction  
Another   extremely   popular   vulnerability   is   subdomain   takeover.   Though   this   vulnerability   
has   died   down   significantly   it  is   still   very   common   in   the   wild.   If   you   are   unfamiliar   with   
this   type   of   vulnerability   according   to   Google   “Subdomain   takeover   attacks   are   a   class   
of   security   issues   where   an   attacker   is   able   to   seize   control   of   an   organization's   
subdomain   via   cloud   services   like   AWS   or   Azure”.  
Subdomain  Takeover  
A   subdomain   takeover   occurs   when   a   subdomain   is   pointing   to   another   domain   
(CNAME)   that   no   longer   exists.    If   an   attacker   were   to   register   the   non   existing   domain   
then   the   target   subdomain   would   now   point   to   your   domain   effectively   giving   you   full   
control   over   the   target’s  subdomain.   What   makes   this   vulnerability   so   interesting   is   that   
you   can   be   safe   one   minute   and   a   single   DNS   change   can   make   you   vulnerable   the   
next   minute.  
The   vulnerability   here   is   that   the   target   subdomain   points   to   a   domain   that   does   not   
exist.   An   attacker   can   then   register   the   non   existing   domain.   Now   the   target   subdomain   
will   point   to   a   domain   the   attacker   controls.   
If   you’re   planning   on   hunting   for   this   vulnerability   you   are   definitely   going   to   be   
referencing   the   following   github   page   as   it  contains   a   bunch   of   examples   and   
walkthroughs   on   exploiting   different   providers:  
●
https://github.com/EdOverflow/can-i-take-over-xyz  
As   you   can   see   above   this   page   contains   a   large   list   of   engines   who   can   be   exploited   by   
this   vulnerability.   If   you   click   on   the   issue   number   it  will   give   you   a   walk   through   
exploiting   that   particular   engine.   Because   every   provider   has   its  own   way   of   registering   
domains   you   will   need   to   learn   the   process   of   registering   a   domain   on   the   engine   that   
impacts   your   target.  
Github  Takeover  
One   of   the   easiest   ways   to   spot   a   subdomain   takeover   vulnerability   is   by   the   error   
message   it  throws   as   shown   below:  
As   you   can   see   above   when   we   visit   our   target   site   it  throws   a   404   status   code   and   
gives   us   the   error   message   “There   isn’t   a   Github   Pages   Site   here”.    If   we   go   to   the   
subdomain   takeover   wiki   we   can   confirm   that   this   error   message   indicates   the   possibility   
of   subdomain   takeover.  
Now   that   we   have   an   indicator   this   site   is   vulnerable   we   need   to   get   the   github   page   the   
vulnerable   subdomain   is   pointing   to.   We   need   this   information   so   we   can   register   the   
domain   through   github.   
As   shown   above   a   “dig”   command   can   be   used   to   gather   the   DNS   records   of   the   
vulnerable   domain.   We   can   also   see   that   the   domain   points   to   the   github   page   
“ghostlulzvulntakeover.github.io”,   if  we   can   register   this   domain   we   win.   To   figure   out   the   
process   of   registering   a   domain   on   Github   you   can   Google   it  or   you   can   follow   the   
tutorial   in   the   subdomain   takeover   github   page   as   shown   below:  
Now   that   we   know   the   steps   to   register   a   domain   on   Github   we   just   need   to   do   it.   First   I   
created   a   Github   repo   with   the   same   name   as   the   CNAME   record:  
After   that   create   an   “index.html”   file   in   the   repo   as   shown   below:  
The   next   step   is   to   set   the   repo   as   the   main   branch.  
Finally   specify   the   target   domain   you   are   going   after.  
That's   it!   Now   when   you   visit   the   target   domain   you   should   see   the   page   you   set   up.  
We   WIN!   As   you   can   see   above   we   successfully   exploited   the   subdomain   takeover   
vulnerable   and   got   our   page   to   appear   on   the   targets   subdomain.   Note   that   this   is   the   
process   for   Github,   if  your   target   is   vulnerable   to   something   else   you   will   have   to   follow   
the   steps   for   that   provider.   Lucky   for   us   all   this   is   documented   on   the   subdomain   
takeover   github   wiki.  
Conclusion  
A   few   years   ago   subdomain   takeover   was   all   over   the   place   but   it  has   started   to   die   
down   recently.   However,   you   will   still   find   plenty   of   organizations   vulnerable   to   this   type   
of   attack.   It   is   extremely   easy   to   pull   off   and   it  allows   attackers   to   completely   take   over   
the   target   subdomain.   If   you’re   looking   for   an   easy   high   security   finding   this   is   it.   
Basic  Hacking  Databases  
Introduction  
A   database   is   an   organized   collection   of   data,   generally   stored   and   accessed   
electronically   from  a   computer   system.   If   you’re   attacking   a   web   application   a   lot   of   the   
time   one   of   the   main   goals   is   to   compromise   the   back   end   database   as   it's   where   all   the   
sensitive   user   data   is   stored.  
Compromising   these   databases   normally   involves   exploiting   an   sql   injection   vulnerability   
but   sometimes   it  can   be   much   easier.   These   databases   are   often   exposed   to   the   
internet   without   authentication   leaving   them   open   to   hackers   for   pilliging   as   discussed   in   
the   following   sections.  
Google  Firebase  
Introduction  
According   to   Google   “The   Firebase   Realtime   Database   is   a   cloud-hosted   database   
stored   as   JSON   and   synchronized   in   realtime   to   every   connected   client”.   An   issue   can   
arise   in   firebase   when   developers   fail   to   enable   authentication.   This   vulnerability   is   very   
similar   to   every   other   database   misconfiguration,   there's   no   authentication.   Leaving   a   
database   exposed   to   the   world   unauthenticated   is   an   open   invite   for   malicious   hackers.  
Misconfigured  Firebase  Database  
When   i'm   hunting   for   this   I'll   try   to   keep   an   eye   out   for   the   “*.firebaseio.com”   url,   if  you   
see   this   then   you   know   your   target   is   utilizing   Google's   firebase   DB.   An   example   domain   
can   be   found   below:  
●
Vuln-domain.firebaseio.com  
If   the   developer   forgot   to   enable   authentication   the   database   will   be   exposed   to   the   
word.   You   can   easily   view   the   database   by   appending   a   “/.json”   to   the   url   as   shown  
below:  
●
vuln-domain.firebaseio.com/.json  
As   you   can   see   above   we   were   able   to   dump   a   bunch   of   passwords   belonging   to   an   
organization.   An   attacker   could   then   leverage   these   credentials   to   perform   additional   
attacks   on   the   application.  
Summary  
Finding   and   exploiting   this   misconfiguration   is   extremely   easy   and   requires   zero   
technical   skills   to   pull   off.   All   you   need   to   do   is   find   an   application   using   firebase,   
append   “/.json”   to   the   url,   and   if  there   isn't   authentication   you   can   export   the   entire   DB!  
ElasticSearch  DB   
Introduction  
You   have   probably   heard   of   the   popular   relational   database   called   MySQL.   Elastic   
search   like   MySQL   is   a   database   used   to   hold   and   query   information.   However,   elastic   
search   is   typically   used   to   perform   full   text   searches   on   very   large   datasets.   Another   
thing   to   note   is   that   ElasticSearch   is   unauthenticated   by   default   which   can   cause   a   lot   of   
security   problems   as   described   in   the   following   sections.  
ElasticSearch  Basics  
According   to   Google   “ElasticSearch   is   a   document-   oriented   database   designed   to   
store,   retrieve,   and   manage   document-oriented   or   semi-structured   data.   When   you   use   
Elasticsearch,   you   store   data   in   JSON   document   form.   Then,   you   query   them   for   
retrieval.”   Unlike   MySQL   which   stores   its  information   in   tables,   elastic   search   uses   
something   called   types.   Each   type   can   have   several   rows   which   are   called   documents.   
Documents   are   basically   a   json   blob   that   hold   your   data   as   shown   in   the   example   
below:   
●
{"id":1,   "name":"ghostlulz",   "password":"SuperSecureP@ssword"}  
In   MySQL   we   use   column   names   but   in   Elasticsearch   we   use   field   names.   The   field   
names   in   the   above   json   blob   would   be   id,   name,   and   password.   In   MySQL   we   would   
store   all   of   our   tables   in   a   database.  
In   Elastic   Search   we   store   our   documents   in   something   called   an   index.   An   index   is   
basically   a   collection   of   documents.  
Unauthenticated  ElasticSearch  DB  
Elastic   search   has   an   http   server   running   on   port   9200   that   can   be   used   to   query   the   
database.   The   major   issue   here   is   that   a   lot   of   people   expose   this   port   to   the   public   
internet   without   any   kind   of   authentication.   This   means   anyone   can   query   the   database   
and   extract   information.   A   quick   Shodan   search   will   produce   a   tun   of   results   as   shown  
below:  
Once   you   have   identified   that   your   target   has   port   9200   open   you   can   easily   check   if  it  is   
an   ElasticSearch   database   by   hitting   the   root   directory   with   a   GET   request.   The   
response   should   look   something   like   the   following:  
Once   you   know   an   endpoint   has   an   exposed   Elastic   Search   db   try   to   find   all   the   
indexes(Databases)   that   are   available.   This   can   be   done   by   hitting   the    “/_cat/indices?v”   
endpoint   with   a   GET   request.   This   will   list   out   all   of   the   indexes   as   shown   below:  
This   information   along   with   other   details   about   the   service   can   also   be   found   by   
querying   the    “/_stats/?pretty=1”   endpoint.  
To   perform   a   full   text   search   on   the   database   you   can   use   the   following   command   
“/_all/_search?q=email” .   This   will   query   every   index   for   the   word   “email”.   There   are   a   
few   words   that   I   like   to   search   for   which   include:  
●
Username  
●
Email  
●
Password  
●
Token  
●
Secret  
●
Key  
If   you   want   to   query   a   specific   index   you   can   replace   the   word    “_all”   with   the   name   of   
the   index   you   want   to   search   against.  
Another   useful   technique   is   to   list   all   of   the   field   names   by   making   a   GET   request   to   the   
“/INDEX_NAME_HERE/_mapping?pretty=1”   endpoint.   I   typically   search   for   interesting   
field   names   such   as:  
●
Username  
●