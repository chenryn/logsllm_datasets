    - protocol: TCP
      port: 443
```
一个`NetworkPolicy`对象是另一个可以用来保护集群的对象。它们应该在所有生产集群中使用，但是在多租户集群中，它们应该被视为**必备的**来保护集群中的每个命名空间。
### 公共安全策略
`PodSecurityPolicies`(**PSP**)是集群保护节点免受容器攻击的方式。它们允许你限制吊舱在集群中可以执行的动作。一些示例包括拒绝对主机 IPC 和主机路径的访问，以及以特权模式运行容器。
我们将在 [*第 10 章*](10.html#_idTextAnchor260)*创建吊舱安全策略*中详细介绍 PSP。关于 PSP 要记住的关键点是，没有它们，你的容器几乎可以在你的节点上做任何事情。
### 集群角色绑定
一旦你定义了一个`ClusterRole`，你通过`ClusterRoleBinding`将其绑定到一个主体。`ClusterRole`可以绑定到用户、组或服务帐户。
我们将在第 8 章[](08.html#_idTextAnchor228)**【RBAC 策略与审计】*中详细探讨`ClusterRoleBinding`。*
 *### 集群角色
一个`ClusterRole`结合了一组与集群的应用编程接口交互的权限。一个`ClusterRole`将一个动词或动作与一个应用编程接口组结合起来定义一个权限。例如，如果您只希望您的**持续集成/持续交付** ( **CI/CD** )管道能够修补您的部署，以便它能够更新您的映像标签，您可以使用这样的`ClusterRole`:
```
apiVersion: rbac.authorization.k8s.io/v1
KinD: ClusterRole
metadata:
  name: patch-deployment
rules:
- apiGroups: ["apps/v1"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch"]
```
A `ClusterRole`可以应用于集群和命名空间级别的 API。
### 角色绑定
`RoleBinding`对象是如何将角色或`ClusterRole`与主题和名称空间相关联。例如，以下`RoleBinding`对象将允许`aws-codebuild`用户将`patch-openunison`集群角色应用于`openunison`命名空间:
```
apiVersion: rbac.authorization.k8s.io/v1
KinD: RoleBinding
metadata:
  name: patch-openunison
  namespace: openunison
subjects:
- KinD: User
  name: aws-codebuild
  apiGroup: rbac.authorization.k8s.io
roleRef:
  KinD: ClusterRole
  name: patch-deployment
  apiGroup: rbac.authorization.k8s.io
```
即使这引用了一个`ClusterRole`，它也只适用于`openunison`命名空间。如果`aws-codebuild`用户试图在另一个名称空间中修补部署，应用编程接口服务器将停止它。
### 角色
与`ClusterRole`一样，角色结合应用编程接口组和动作来定义一组可以分配给主题的权限。`ClusterRole`和`Role`的区别在于`Role`只能在名称空间级别定义资源，并且只适用于特定的名称空间。
### CsiDrivers
Kubernetes 使用`CsiDriver`对象将节点连接到存储系统。
通过执行`kubectl get csidriver`命令，您可以列出集群上可用的所有 CSI 驱动程序。在我们的一个集群中，我们使用 Netapp 的 SolidFire 进行存储，因此我们的集群安装了 Trident CSI 驱动程序，如下所示:
```
NAME                    	CREATED AT
csi.trident.netapp.io   	2019-09-04T19:10:47Z
```
### CsiNodes
为了避免在节点应用编程接口对象中存储存储信息，将`CSINode`对象添加到应用编程接口服务器中以存储由 CSI 驱动程序生成的信息。存储的信息包括将 Kubernetes 节点名映射到 CSI 节点名、CSI 驱动程序可用性和卷拓扑。
### 存储评估
存储类用于定义存储端点。每个存储类都可以分配标签和策略，允许开发人员为他们的持久数据选择最佳存储位置。您可以为具有所有**非易失性内存快速通道** ( **NVMe** )驱动器的后端系统创建一个存储类，为其分配名称`fast`，同时为运行标准驱动器的 Netapp **网络文件系统** ( **NFS** )卷分配一个不同的类，使用名称`standard`。
当请求一个聚氯乙烯时，用户可以分配一个他们希望使用的`StorageClass`。当应用编程接口服务器收到请求时，它会找到匹配的名称，并使用`StorageClass`配置使用资源调配器在存储系统上创建卷。
在很高的层次上，一份`StorageClass`清单不需要很多信息。下面是一个存储类示例，该存储类使用 Kubernetes 孵化器项目中的置备程序来提供 NFS 自动置备卷，命名为`nfs`:
```
apiVersion: storage.k8s.io/v1 KinD: StorageClass
metadata:
  name: nfs
provisioner: nfs 
```
存储类允许您为用户提供多种存储解决方案。您可以为更便宜、更慢的存储创建一个类别，同时为高数据要求提供支持高吞吐量的第二个类别。通过为每个产品提供不同的类，您允许开发人员为他们的应用选择最佳选择。
# 总结
在这一章中，你被扔进了一个 Kubernetes 训练营，在短时间内展示了大量的技术材料。试着记住，当你更深入地进入 Kubernetes 世界时，这一切都会变得更容易。我们意识到这一章有很多关于很多物体的信息。许多对象将在后面的章节中使用，它们将被更详细地解释。
您了解了每个 Kubernetes 组件以及它们如何交互来创建集群。有了这些知识，您就具备了查看集群中的错误并确定哪个组件可能导致错误或问题所需的技能。我们介绍了运行`api-server`、`kube-scheduler`、Etcd 和控制管理器的集群的控制平面。控制平面是用户和服务如何与集群交互；使用`api-server`和`kube-scheduler`将决定在哪个工作节点上调度您的 Pod。您还了解了运行`kubelet`和`kube-proxy`组件的 Kubernetes 节点，以及一个容器运行时。
我们介绍了用于与集群交互的`kubectl`实用程序。您还学习了一些日常使用的常用命令，包括`logs`和`describe`。
在下一章中，我们将创建一个开发 Kubernetes 集群，我们将把它用作其余章节的基础集群。在本书的剩余部分，我们将参考本章中介绍的许多对象，通过在现实世界的例子中使用它们来帮助解释它们。
# 问题
1.  A Kubernetes control plane does not include which of the following components?
    A.`api-server`
    B.`kube-scheduler`
    C.和 cd
    D.入口控制器
2.  What is the name of the component that keeps all of the cluster information?
    A.`api-server`
    B.主控制器
    C.`kubelet`
    D.和 cd
3.  Which component is responsible for selecting the node that will run a workload?
    A.`kubelet`
    B.`api-server`
    C.`kube-scheduler`
    D.`Pod-scheduler`
4.  Which option would you add to a `kubectl` command to see additional output from a command?
    A.`Verbose`
    B.`-v`
    C.`–verbose`
    D.`-log`
5.  Which service type creates a randomly generated port, allowing incoming traffic to any worker node on the assigned port to access the service?
    A.`LoadBalancer`
    B.`ClusterIP`
    C.无—这是所有服务的默认值
    D.`NodePort`
6.  If you need to deploy an application on a Kubernetes cluster that requires known node names and a controlled startup of each Pod, which object would you create?
    A.`StatefulSet`
    B.`Deployment`
    C.`ReplicaSet`
    D.`ReplicationController`*