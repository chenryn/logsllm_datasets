    4.  }
    5.  //================================分隔线=========================
    6.    interpreter::Interpreter* interpreter() const {
    7.      return interpreter_;
    8.    }
    9.  //================================分隔线=========================
    10.   Address dispatch_table_address() {
    11.      return reinterpret_cast(&dispatch_table_[0]);
    12.    }
上述代码，可以看到`dispatch_table_`是数组，基址是`&dispatch_table_[0]`,它的位置是`isolate->interpreter_->dispatch_table_`。
**（2）** 代码39行从堆栈中获取bytecode array的基址。
**（3）** 代码51行获取目标bytecode的偏移量（offset）。
**（4）** 代码56、58行，计算目标bytecode地址，存入`kJavaScriptCallCodeStartRegister`。
**（5）** 代码61行，跳转到`kJavaScriptCallCodeStartRegister`，调度完毕，图1为函数调用堆栈。
## 3 Dispatch()方法
`Dispatch()`是字节码处理程序最后调用的方法，故称之为尾部调用（TailCall）方法，下面给出几条字节码处理程序源码：
    1.  // StaGlobal  
    2.  //
    3.  // Store the value in the accumulator into the global with name in constant pool
    4.  // entry  using FeedBackVector slot .
    5.  IGNITION_HANDLER(StaGlobal, InterpreterAssembler) {
    6.    TNode context = GetContext();
    7.    // Store the global via the StoreGlobalIC.
    8.    TNode name = CAST(LoadConstantPoolEntryAtOperandIndex(0));
    9.    TNode value = GetAccumulator();
    10.   TNode raw_slot = Signed(BytecodeOperandIdx(1));
    11.    TNode smi_slot = SmiTag(raw_slot);
    12.    TNode maybe_vector = LoadFeedbackVector();
    13.    Label no_feedback(this, Label::kDeferred), end(this);
    14.    GotoIf(IsUndefined(maybe_vector), &no_feedback);
    15.    CallBuiltin(Builtins::kStoreGlobalIC, context, name, value, smi_slot,
    16.                maybe_vector);
    17.    Goto(&end);
    18.    Bind(&no_feedback);
    19.    CallRuntime(Runtime::kStoreGlobalICNoFeedback_Miss, context, value, name);
    20.    Goto(&end);
    21.    Bind(&end);
    22.    Dispatch();
    23.  }
    24.  // LdaContextSlot   
    25.  //
    26.  // Load the object in |slot_index| of the context at |depth| in the context
    27.  // chain starting at |context| into the accumulator.
    28.  IGNITION_HANDLER(LdaContextSlot, InterpreterAssembler) {
    29.    TNode context = CAST(LoadRegisterAtOperandIndex(0));
    30.    TNode slot_index = Signed(BytecodeOperandIdx(1));
    31.    TNode depth = BytecodeOperandUImm(2);
    32.    TNode slot_context = GetContextAtDepth(context, depth);
    33.    TNode result = LoadContextElement(slot_context, slot_index);
    34.    SetAccumulator(result);
    35.    Dispatch();
    36.  }
    37.  // LdaImmutableContextSlot   
    38.  //
    39.  // Load the object in |slot_index| of the context at |depth| in the context
    40.  // chain starting at |context| into the accumulator.
    41.  IGNITION_HANDLER(LdaImmutableContextSlot, InterpreterAssembler) {
    42.    TNode context = CAST(LoadRegisterAtOperandIndex(0));
    43.    TNode slot_index = Signed(BytecodeOperandIdx(1));
    44.    TNode depth = BytecodeOperandUImm(2);
    45.    TNode slot_context = GetContextAtDepth(context, depth);
    46.    TNode result = LoadContextElement(slot_context, slot_index);
    47.    SetAccumulator(result);
    48.    Dispatch();
    49.  }
上述代码给出了三条字节码处理程序，它们的尾部都调用了`Dispatch()`方法。下面给出`Dispatch()`源码，并解释重要语句。
    1.  void InterpreterAssembler::Dispatch() {
    2.    Comment("========= Dispatch");
    3.    DCHECK_IMPLIES(Bytecodes::MakesCallAlongCriticalPath(bytecode_), made_call_);
    4.    TNode target_offset = Advance();
    5.    TNode target_bytecode = LoadBytecode(target_offset);
    6.    if (Bytecodes::IsStarLookahead(bytecode_, operand_scale_)) {
    7.      target_bytecode = StarDispatchLookahead(target_bytecode);
    8.    }
    9.    DispatchToBytecode(target_bytecode, BytecodeOffset());
    10. }
第2行代码是注释功能，调试代码时很有用；第4行`Advance()`是获取目标字节码在`bytecode
array`中的偏移量，请读者自行分析；第5行读取目标字节码；第9行进入`DispatchToBytecode()`，该方法又进入`DispatchToBytecodeHandlerEntry()`，代码如下：
    void InterpreterAssembler::DispatchToBytecodeHandlerEntry(
        TNode handler_entry, TNode bytecode_offset) {
      // Propagate speculation poisoning.
      TNode poisoned_handler_entry =
          UncheckedCast(WordPoisonOnSpeculation(handler_entry));
      TailCallBytecodeDispatch(InterpreterDispatchDescriptor{},
                               poisoned_handler_entry, GetAccumulatorUnchecked(),
                               bytecode_offset, BytecodeArrayTaggedPointer(),
                               DispatchTablePointer());
    }
该方法的参数1是目标字节码，它的作用是从`dispatch
table`中索引对应的字节码处理程序；参数2是目标字节码的偏移量，它的作用是从`bytecode
array`中读取操作数，下面进入`TailCallBytecodeDispatch()`:
    0.  template 
    1.  void CodeAssembler::TailCallBytecodeDispatch(
    2.      const CallInterfaceDescriptor& descriptor, TNode target,
    3.      TArgs... args) {
    4.    DCHECK_EQ(descriptor.GetParameterCount(), sizeof...(args));
    5.    auto call_descriptor = Linkage::GetBytecodeDispatchCallDescriptor(
    6.        zone(), descriptor, descriptor.GetStackParameterCount());
    7.    Node* nodes[] = {target, args...};
    8.    CHECK_EQ(descriptor.GetParameterCount() + 1, arraysize(nodes));
    9.    raw_assembler()->TailCallN(call_descriptor, arraysize(nodes), nodes);
    10.  }
代码第5行建立目标字节码的`call discriptor`，见下面代码：
    0.  CallDescriptor* Linkage::GetBytecodeDispatchCallDescriptor(
    1.      Zone* zone, const CallInterfaceDescriptor& descriptor,
    2.      int stack_parameter_count) {
    3.    const int register_parameter_count = descriptor.GetRegisterParameterCount();
    4.    const int parameter_count = register_parameter_count + stack_parameter_count;
    5.    DCHECK_EQ(descriptor.GetReturnCount(), 1);
    6.    LocationSignature::Builder locations(zone, 1, parameter_count);
    7.    locations.AddReturn(regloc(kReturnRegister0, descriptor.GetReturnType(0)));
    8.    for (int i = 0; i TailCallN()`的第一个参数是`CallDescriptor`，源码下如:
    1.  void RawMachineAssembler::TailCallN(CallDescriptor* call_descriptor,
    2.                                      int input_count, Node* const* inputs) {
    3.    // +1 is for target.
    4.    DCHECK_EQ(input_count, call_descriptor->ParameterCount() + 1);
    5.    Node* tail_call =
    6.        MakeNode(common()->TailCall(call_descriptor), input_count, inputs);
    7.    schedule()->AddTailCall(CurrentBlock(), tail_call);
    8.    current_block_ = nullptr;
    9.  }
第5行生成`Node`节点，第7行由`AddTailCall()`把节点加到当前基本块（Basic
Block）的尾部，完成字节码调度，`AddTailCall()`源码请读者自行分析，图2给出了上述过程的调用堆栈。
学习过程中，需要分析和调试汇编码，思路一旦中断就可能得从头再来，一定要多做笔记。
好了，今天到这里，下次见。
**恳请读者批评指正、提出宝贵意见**  
 **微信：qq9123013 备注：v8交流 邮箱：[PI:EMAIL](mailto:PI:EMAIL)**