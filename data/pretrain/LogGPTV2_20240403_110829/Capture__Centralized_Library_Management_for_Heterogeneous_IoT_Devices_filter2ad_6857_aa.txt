title:Capture: Centralized Library Management for Heterogeneous IoT Devices
author:Han Zhang and
Abhijith Anilkumar and
Matt Fredrikson and
Yuvraj Agarwal
Capture: Centralized Library Management 
for Heterogeneous IoT Devices
Han Zhang, Abhijith Anilkumar, Matt Fredrikson, and 
Yuvraj Agarwal, Carnegie Mellon University
https://www.usenix.org/conference/usenixsecurity21/presentation/zhang-han
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Capture: Centralized Library Management for Heterogeneous IoT Devices
Han Zhang
Abhijith Anilkumar
Matt Fredrikson
Carnegie Mellon University
Carnegie Mellon University
Carnegie Mellon University
Yuvraj Agarwal
Carnegie Mellon University
Abstract
With their growing popularity, Internet-of-Things (IoT) de-
vices have become attractive targets for attack. Like most
modern software systems, IoT device ﬁrmware depends on
external third-party libraries extensively, increasing the at-
tack surface of IoT devices. Furthermore, we ﬁnd that the
risk is compounded by inconsistent library management prac-
tices and delays in applying security updates—sometimes
hundreds of days behind the public availability of critical
patches—by device vendors. Worse yet, because these depen-
dencies are “baked into” the vendor-controlled ﬁrmware, even
security-conscious users are unable to take matters into their
own hands when it comes to good security hygiene.
We present Capture, a novel architecture for deploying IoT
device ﬁrmware that addresses this problem by allowing de-
vices on a local network to leverage a centralized hub with
third-party libraries that are managed and kept up-to-date by
a single trusted entity. An IoT device supporting Capture
comprises of two components: Capture-enabled ﬁrmware on
the device and a remote driver that uses third-party libraries
on the Capture hub in the local network. To ensure isolation,
we introduce a novel Virtual Device Entity (VDE) interface
that facilitates access control between mutually-distrustful
devices that reside on the same hub. Our evaluation on a pro-
totype implementation of Capture, along with 9 devices and
3 automation applets ported to our framework, shows that our
approach incurs low overhead in most cases (<15% increased
latency, <10% additional resources). We show that a single
Capture Hub with modest hardware can support hundreds of
devices, keeping their shared libraries up-to-date.
1 Introduction
With their growing popularity, in-home Internet-of-Things
(IoT) devices are becoming ripe victims for remote attacks,
leading to high-proﬁle incidents such as the Mirai botnet [5].
Compared to traditional network hosts, IoT devices are often
more vulnerable due to weak credentials [40, 60, 83], insecure
protocols [43], and outdated software [57,61]. Making matters
worse, despite their deployment in homes, these devices may
connect directly to public Internet hosts to send data and even
listen for incoming connections [30, 64]. If any of them are
compromised, attackers can easily wreak further havoc by
moving on to other devices on the same network [5, 80].
Although many current IoT exploits originate from miscon-
ﬁgurations, weak credentials, and insecure applications [3,40],
the extensive use of third-party libraries in IoT devices may
have security implications but remains overlooked. Vulnera-
bilities in common libraries, when left unpatched, can affect
a massive number of devices (e.g., CallStrager [82] and Rip-
ple20 [84]). The security impact of vulnerable libraries in
traditional software systems is well-known [12, 14], with
slow rollout of security-critical patches exacerbating the is-
sue [21,41,49]. To understand whether this situation is as com-
mon in IoT, we conducted a study of 122 IoT ﬁrmware (Sec-
tion 3), ﬁnding widespread use of common libraries. Match-
ing ﬁrmware release dates to CVE disclosures, we observed
signiﬁcant delays in patching critical vulnerabilities (up to
1454 days), and inconsistent patch rollout even across the
same vendor. As end-users are usually unable to address these
vulnerabilities themselves, our ﬁndings call for better ways
of managing third-party IoT libraries, mitigating potential
threats arising from vulnerable libraries in the future.
Recent works in IoT security may partially alleviate this
challenge, but each has its limitations (Table 1). Commer-
cial IoT frameworks and operating systems (e.g., Microsoft
Azure Sphere [48], AWS Greengrass [4], and Particle Device
OS [53]) all assume the burden of managing a limited set
of shared libraries provided by the OS. However, develop-
ers may use a variety of IoT libraries for functionality [54].
These OSes provide little protection for those custom libraries
imported by developers. Alternatively, several proposals at-
tempt to isolate vulnerable devices on the network [22,36,70].
Network isolation offers limited ﬂexibility when it comes
to mitigating the effects of compromised devices, so these
approaches present an inherent security tradeoff whenever
devices need Internet access.
USENIX Association
30th USENIX Security Symposium    4187
Automated Library
Updates
Prevent Malicious
Network Access
Secure Custom
No Firmware
Libraries
Changes
No Application
Code Changes
Commercial IoT OS [4, 48, 53]
Network Isolation [22, 36, 70]
Capture
✓
✗
✓
✗
✓
✓
✗
Partial
✓
✗
✓
✗
✗
✓
Optional
Table 1: Comparing Capture with other IoT security approaches. Commercial IoT OSes offer centralized management for a
limited set of libraries. Network isolation blocks unnecessary network communications, limiting exposure of vulnerable libraries.
Unless developed natively, existing IoT devices need to modify ﬁrmware to include either commercial OSes or Capture runtime.
Application code built with existing OS APIs also needs to change accordingly for the new OS’s APIs; for Capture, some
integration approaches provide backward-compatible API interfaces, avoiding changes to app-level code.
We present Capture, an approach that aims to reduce the
IoT attack surface stemming from vulnerable third-party li-
braries without compromising functionality. Capture is a
novel software architecture for writing IoT ﬁrmware, which
enables centralized management of third-party libraries, thus
simplifying the deployment of security-critical patches to
home IoT devices. Rather than a monolithic ﬁrmware run-
ning on an IoT device, Capture partitions ﬁrmware across the
device and its driver on a central hub. The hub is a trusted
entity under users’ direct control and maintains libraries up-
dated. When developing Capture-enabled devices, vendors
can implement the remote driver to use libraries maintained
by the hub rather than managing updates individually for
each version of their ﬁrmware. To provide ﬂexibility and
backwards-compatibility, Capture still allows developers to
deploy custom, “unsupported” libraries directly on the device
ﬁrmware, but leverages isolation to reduce the attack surface
and limit damages to others in case they become compro-
mised.
To realize this vision, we must address several challenges.
First, since Capture splits devices into local ﬁrmware and
drivers, traditional device network identiﬁers such as MAC
and IP addresses are too coarse. Instead, we propose a novel
abstraction, Virtual Device Entitys (VDE) — a combination
of device, driver, and associated accounts and network con-
ﬁgurations on the hub — as the basis for managing devices
across hardware and facilitating access control.
Second, since we move part of the ﬁrmware functionality
from device hardware onto a shared, centralized hub, we must
ensure that drivers running on the hub are properly isolated
from each other such that they function the same way as they
did on the dedicated hardware. This is especially important so
that even if a device is compromised it cannot affect the other
devices on the hub. We place every VDE into its own subnet
attached to a unique virtual network interface (vNIC). By
blocking inter-vNIC trafﬁc, we prevent devices from sending
network packets to each other. We also assign unique user
accounts and utilize Linux security primitives to isolate shared
resources on the hub.
Finally, as Capture represents a signiﬁcant shift in the con-
ventional IoT architecture for developers, we take steps to
simplify the migration of existing IoT devices to our frame-
work. We design and evaluate three integration approaches
based on how current IoT devices are implemented — OS
Default Library Replacement, Existing IoT Framework Exten-
sion, and Native Driver Development — showing that Capture
can be adopted by developers by changing a few lines of code
in their existing ﬁrmware.
We developed a prototype Capture Hub on a Raspberry Pi 3
(RPi 3), and migrated 9 open-source IoT applications ranging
from streaming cameras to extensible “smart” mirror displays
into the framework. These applications cover a variety of hard-
ware platforms, from embedded real-time micro-controllers
to fully-provisioned Linux installations. In addition, we im-
plemented 3 home automation applets on IFTTT [38], which
provide additional macro-benchmarking data. Our evaluation
shows that porting an application is often straightforward,
while using Capture introduces a modest latency increase
(15% on average, <23 ms in most cases). We believe this
is imperceptible from a typical user’s perspective, although
it may vary depending on the set of applications that are in-
stalled. In particular, for IoT automation platforms such as
IFTTT, the overhead of Capture is negligible compared to the
time needed to communicate with the cloud backend. Appli-
cations that rely on throughput also fare well, experiencing
34% overhead on average, which we found preserves qual-
itative functionality. Importantly, our results show that the
hub itself scales well to many devices: the inexpensive RPi
3 prototype can easily accommodate on the order of 50 de-
vices without over-subscription, with more capable hardware
allowing hundreds of independent devices.
In summary, we make the following contributions:
• We present Capture, a novel architecture for deploying
IoT ﬁrmware in a way that supports centralized manage-
ment of third-party libraries, thus eliminating the need
for timely updates from individual vendors.
• We introduce Virtual Device Entities (VDEs) to securely
manage devices in Capture, and isolate untrusted com-
ponents running on shared hardware from each other.
• We propose three integration approaches for migrating
existing IoT devices to Capture. Our evaluation on 9
open-source IoT devices shows that these apps can be
4188    30th USENIX Security Symposium
USENIX Association
Vendor Cloud
IFTTT
Public Cloud
Internet
App A
OpenSSL
v1.1.0a
Linux
Device A
Cortex-M Device B
App B
OpenSSL
v1.1.0c
Linux
Cortex-M
App C
WolfSSL
FreeRTOS
ESP32
Device C
LAN
Figure 1: Current IoT device software stacks and network
communication. Devices have a variety of platforms (ARM
Cortex-M, ESP32) but utilize similar third-party libraries.
migrated to Capture with minimal changes.
• We implement a prototype of Capture on a RPi 3
and evaluate its performance for 9 IoT apps and 3
IFTTT applets. We show that Capture incurs low per-
formance overhead (<15% latency increases and <10%
extra on-device resources on average) and a single Cap-
ture Hub can support dozens to hundreds of local de-
vices. The code is available at https://github.com/
synergylabs/iot-capture.
2 Background and Setting
In this section, we provide essential background on the IoT
setting that we assume for the rest of the paper. Interested
readers are encouraged to read the comprehensive SoK paper
by Alrawi et al. [3] for additional details on IoT deployments
and security considerations.
IoT Device Software Stack. Figure 1 illustrates three rep-
resentative IoT devices and their software architecture based
on teardown blogs [1, 18]. IoT devices use a variety of micro-
controllers (MCUs) with different capabilities. For example,
devices using ARM Cortex-M MCU can run a version of
Linux, supporting numerous Linux libraries (e.g., OpenSSL).
Meanwhile, more inexpensive devices often use less capable
MCUs, such as Espressif ESP-32 with 520 KB RAM [26].
They also use light-weighted RTOSes and libraries (e.g., wolf-
SSL) to reduce resource use. Given that IoT developers often
focus their effort on building compelling application soft-
ware (e.g. App A, B, C in the ﬁgure), alternative IoT plat-
form designs have been proposed (e.g., HomeOS [19], Azure
Sphere [48], Particle OS [53]) which offer low-level OS and
library security updates as a service, enabling developers to
focus on applications using a limited set of APIs.
Home IoT Networking. During the installation of a device
in their home, users typically connect IoT devices to the In-
ternet either directly by associating them with their home
WiFi router, or through a vendor-provided hub (e.g. Sam-
sung’s SmartThings hub or the Philips Hue bridge) which
is then cloud-connected. Internet-connected devices can be
publicly accessible (via Network Address Translation (NAT)
from routers) due to functionality requirements, but may be
reachable from Internet attackers as well [11, 81]. Although
sometimes devices can be restricted to not access the Internet,
they can still communicate with other devices on the LAN
without users’ involvement using, for example, the UPnP pro-
tocol [40, 42]. This can lead to cross-device exploits and
escalation attacks [5, 82].
Figure 1 shows an example IoT home deployment with
three devices that communicate with external hosts, including
the vendor’s proprietary cloud, the IFTTT automation service,
and possibly generic cloud service providers such as AWS or
Azure. In this example, however, not all devices are equally
secure. Device A and Device B both use OpenSSL, but Device
A uses an outdated version (1.1.0a) as compared to Device B
(1.1.0c). Device C, which runs on limited hardware, makes
use of a lighter-weight SSL library (WolfSSL). Even in a
small deployment, it may be common to see a wide range of
security-critical third-party libraries in use, becoming even
more of an issue in realistic settings.
3 Third-Party Libraries in IoT
In this section, we seek to address two key questions which
are largely unanswered. Namely, how prevalent is third-party
library usage among existing IoT devices, and how diligent are
device vendors when it comes to releasing ﬁrmware updates
that patch critical security vulnerabilities?
Previous studies [10, 49, 86] that focus mainly on network
equipment report widespread vulnerabilities, some of which
can be attributed to unpatched third-party libraries. A recent
study focusing on smart appliances reports similar ﬁndings [3].
However, these studies do not address the state of affairs on
current IoT devices, and in particular on how frequently li-
braries are used and updated. To ﬁll this gap in our knowledge,
we conducted a measurement study on 122 ﬁrmware releases
from 26 devices and 5 popular vendors. We ﬁnd that third-
party library use is prevalent, and even more concerning, that
security-essential libraries like OpenSSL often remain un-
patched for hundreds of days.
3.1 Data Collection
Retrieving Library Information. A potential approach is
to analyze the binary images of publicly available ﬁrmware
images. However, despite the availability of analysis tools [20,
33], validating the resulting information would be time-
consuming and error-prone, and the number of devices with
easily obtainable ﬁrmware images is limited. Instead, we
collect vendor-reported information about the use of GPL
open-source libraries in ﬁrmware release notes, as this disclo-
sure is required by the license terms. While our results may
thus exclude information about closed-source and non-GPL
USENIX Association
30th USENIX Security Symposium    4189
Vendor
Devices
Firmware
Libraries
Lib. versions
BLK TP Ring Nest D-Link
12
12
80
103
7
74
290
400
3
32
93
114
3
3
5
5
1
1
53
55
Total
26
122
441
654
Table 2: Summary of devices and vendors included in the
measurement. We skip ﬁrmware for network equipment since
our focus is on smart devices. BLK — Belkin, TP — TP-Link.
third-party libraries, we note that this will, if anything, under-
represent the true prevalence of third-party library use in IoT
devices. We used this approach to collect all available data
for 441 unique libraries across 122 ﬁrmware releases from
5 IoT vendors, dating back to 2011. We manually collected
library names and version numbers for 122 ﬁrmware releases.
Firmware Selection. We selected 5 popular device vendors
(Belkin, TP-Link, Ring, Nest, and D-Link) since we were able
to ﬁnd consistent, detailed information about their ﬁrmware
releases with the required third-party library information. Ta-
ble 2 summarizes 122 ﬁrmware releases we collected data
about. Nest and D-Link provide the most comprehensive in-
formation about their ﬁrmware release history, dating back to
2011. We use these historical releases to analyze longitudinal
patching behaviors. Belkin and TP-Link maintain public in-
formation for a single ﬁrmware version for each device still
under support. Ring releases one summary for all open-source
libraries used in their devices, which we categorize as a sin-
gle generic device with a single ﬁrmware release. Table 3
includes individual device details.
3.2 Results
From the collected data, we aim to characterize two main
statistics: the prevalence of third-party library usage in IoT
ﬁrmware images across vendors, and the characteristics of
patch release over time. In particular, our goal for the latter
statistic is to understand how quickly a new ﬁrmware image is
released after a third-party library is updated in response to a
known CVE with a corresponding moderate or high severity.
Prevalence. As expected, we found that IoT devices use
third-party libraries extensively. Table 2 shows that the 122