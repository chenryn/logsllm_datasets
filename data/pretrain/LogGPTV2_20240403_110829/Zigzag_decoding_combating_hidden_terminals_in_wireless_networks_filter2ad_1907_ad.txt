&
Phase Tracking
ISI Filter
False Positives
False Negatives
Pkt size(Bytes)
Success With
Success Without
SNR
Success With
Success Without
3.1%
1.9%
1500
800
99.6% 98.2%
89%
0%
10dB
20dB
99.6% 100%
47%
96%
every run, two (or three) senders transmit 500 packets to an access
point. The AP (i.e., the receiver) logs the received signal and the logs
are processed ofﬂine with the evaluated receiver designs.
Software radios are incapable of accurately timing their carrier
sense activity (CSMA) because they perform all signal processing in
user mode on the PC. To approximate CSMA, we take the following
measures. First, we setup an 802.11a node next to each of our USRP
nodes. The objective is to create an 802.11a testbed that matches the
topology in our USRP testbed but uses standard 802.11a cards, and
copy the results of carrier sense from it to our USRP testbed.
For each USRP experiment, we check whether the corresponding
802.11a nodes can carrier sense each other. Speciﬁcally, we make
each pair of the 802.11 nodes transmit at full speed to a third node
considered as an AP, log the packets, and measure the percentage of
packets each of them delivers to the AP. Next, we try to mimic the
same behavior using the USRP nodes, where each packet that was
delivered in the 802.11 experiments results in a packet delivery in
the USRP experiments between the corresponding sender-receiver
USRP pairs. Lost 802.11 packets are divided into two categories:
collisions and errors. Speciﬁcally, a lost 802.11 packet that we can
match with a loss from the concurrent sender is considered a collision
loss. Other losses are considered as medium errors and ignored. We
try to make each USRP experiment match the collisions that occurred
in the corresponding 802.11a experiment by triggering as many colli-
sions as observed in the 802.11a traces. The USRP experiments are
run without CSMA. Each run matches an 802.11 run between the
corresponding nodes. Each sender ﬁrst transmits the same number
of packets that the corresponding 802.11 correctly delivered in the
matching 802.11 run. Then both senders transmit together as many
packets as there were collision packets in the matching 802.11 run.
Software radios also cannot time 802.11 synchronous acks. Given
the 802.11a traces, we know when a collision occurs, and that the
sender should retry the packet, in which case the sender transmits
each packet twice. However, if the ZigZag AP manages to decode
using a single collision, we ignore the retransmission and do not
count it against the throughput. This prototype implementation does
not include the acking scheme described in §7.
10.2 Micro-Evaluation
We examine the role of various components of ZigZag.
(a) Correlation as a Collision Detector: We estimate the effec-
tiveness of the correlation-based algorithm (§5.1) in detecting the
occurrence of collisions. Our implementation sets the threshold to
Γ′(Delta) > β × L × SNR, where β is a constant, L is the length of
the preamble and SNR is a coarse estimate of the SNR of the collid-
ing sender, which could be obtained from any previously decoded
packets or from one of the sender’s interference free chunks. For
our testbed, β = 0.6-0.7 balances false positives with false negatives.
Higher values eliminate false positives but make ZigZag miss some
 1
?
r
o
r
r
E
 0
 0
 2000
 4000
 6000
 8000  10000  12000
Bit #
(a) Error Distribution due to Residual δ f .
1
0.8
0.6
0.4
0.2
0
-0.2
-0.4
-0.6
-0.8
-1
1   1    1  1  1   0  1   0   1   0  1   1   1   0  0  0  0    0   1  0
1
6
11
16
l
e
u
a
v
t
f
o
S
Bit #
(b) ISI Prone Symbols
Figure 13: Effects of Residual Frequency Offset and ISI.
collisions, whereas lower values trigger collision-detection on clean
packets. Note that neither false positives nor false negatives produce
end-to-end errors. The harm of false positive is limited to computa-
tional resources, because in ZigZag marking a packet as a collision
does not prevent correct decoding of that packet. The algorithm be-
haves as if the packet suffered capture effect and hence is decodable
despite being marred by collision. False negatives, on the other hand,
make ZigZag miss opportunities for decoding collisions but do not
produce incorrect decoding. Our evaluation sets β = 0.65.
For SNRs in [6-20]dB, we run the collision detector on sets of
500 non-collision packets and 500 collisions, and report the results
in Table 10.1. The average false positive rate (packets mistaken
as collisions) is 3.1% and the average false negative rate (missing
collisions) is 1.9%. Thus, the collision detector is pretty accurate for
our purpose.
(b) Frequency and Phase Tracking: We evaluate the need for the
frequency and phase tracking described in §5.4b. We disable our
tracking algorithm (but leave the decoder unchanged) and provide
the encoder with an initially accurate estimate of the frequency offset
(as estimated by the decoder). We run ZigZag with and without track-
ing on 500 collision-pairs of 1500B packets. We ﬁnd that without
tracking none of the colliding packets is decodable (BER > 10−3),
whereas with tracking enabled, 98.2% of the colliding packets are
decodable.
Fig. 13(a) explains this behavior. It plots the error as a function
of the bit index in one of the colliding packets (black shades refer to
errors). It shows that the ﬁrst 6000 bits are decoded correctly, but as
we go further the bits start getting ﬂipped, and eventually most of the
bits are in error. This is expected since even a small residual error in
the frequency offset causes a phase rotation that increases linearly
with time. Hence after some time the phase becomes completely
wrong causing high decoding error rates. This effect is particularly
bad for long packets since the errors accumulate over time. Table 10.1
shows that while ZigZag can decode 89% of the 800Byte packets
without phase tracking, none of the 1500Byte packets is successfully
decoded unless we enable phase tracking.
(c) Effect of ISI: Fig. 13(b), shows a snapshot of the ISI-affected
received bits in our testbed. Recall that BPSK represents a “0” bit
with -1 and a “1” bit with +1. The ﬁgure shows that the value of a
received bit depends on the value of its neighboring bits. For example,
a “1” bit tends to take a higher positive value if it is preceded by
another “1”, than if the preceding bit is a “0” bit.
We evaluate the importance of compensating for these distortions
t
u
p
h
g
u
o
r
h
T
s
e
c
’
i
l
A
t
u
p
h
g
u
o
r
h
T
s
b
o
B
’
t
u
p
h
g
u
o
r
h
T
l
t
a
o
T
 1
 0.8
 0.6
 0.4
 0.2
 0
 1
 0.8
 0.6
 0.4
 0.2
 0
 2
 1.5
 1
 0.5
 0
ZigZag
802.11
Collision-Free Scheduler
 0
 2
 4
 6
 8
 10
 12
 14
 16
Signal to Interference Ratio (SNR a - SNR b) (dB)
(a) Alice’s Throughput
ZigZag
802.11
Collision-Free Scheduler
 0
 2
 4
 6
 8
 10
 12
 14
 16
Signal to Interference Ratio (SNR a - SNR b) (dB)
(b) Bob’s Throughput
ZigZag
802.11
Collision-Free Scheduler
 0
 2
 4
 6
 8
 10
 12
 14
 16
Signal to Interference Ratio (SNR a - SNR b) (dB)
(c) Total Throughput
Figure 14: Impact of SINR. The ﬁgure plots the throughput of the
hidden terminals Alice and Bob, as Alice moves closer to the AP, i.e., as
SINR ≈ SNRA − SNRB increases. It shows that ZigZag achieves higher
throughput than both 802.11 and the Collision-Free Scheduler. ZigZag
is also fairer than 802.11, where Bob cannot get any packets through.
using the inverse ﬁlter described in §5.4d. We try to decode 500
collision pairs at different SNRs, with the ﬁlter on and off. Table 10.1
shows that, while the ﬁlter is not important at high SNRs, i.e., 20dB,
it is necessary at low SNRs. This is expected as at low SNRs, the
decoder has to combat both higher noise and ISI distortions.
10.3 Does ZigZag Work?
We would like to understand the impact of the signal-to-interference
ratio (SINR) on ZigZag’s performance. We want to check that ZigZag
does not suffer from the same restrictions as traditional interference
cancellation, i.e., it works even when the colliding senders have
comparable SNRs. We also want to check that ZigZag continues to
work as the SNR difference becomes large, i.e., in scenarios that may
cause capture effects [23, 18].
We consider the hidden terminal scenario in Fig. 1, where Alice
and Bob cannot sense each other and hence transmit simultaneously
to the AP. We start from a setting where both senders are at equal
distance from the AP, i.e., SNRA = SNRB, and hence SINR = 0.
Gradually, we move Alice closer to the AP. As Alice moves closer, her
SNR at the AP increases with respect to Bob’s, making it easier for
the AP to capture Alice’s signal. We plot the results of this experiment
in Fig. 14, for when the nodes use a Collision-Free Scheduler, 802.11,
and ZigZag.
Fig. 14 shows that ZigZag improves both throughput and fairness.
In 802.11, when Alice and Bob are equal distance from the AP, their
Collision-Free Scheduler
One Pass ZigZag
ZigZag
 5
 6
 7
 8
 9
 10
 11
 12
Signal to Noise Ratio (dB)
(a) Testbed Results
Collision-Free Scheduler
One Pass ZigZag
ZigZag
BPSK
4QAM
16QAM
e
t
a
R
r
o
r
r
E
t
i
B
e
t
a
R
r
o
r
r
E
t
i
B
 0.01
 0.001
 1e-04
 1e-05
 1
 0.1
 0.01
 0.001
 1e-04
 1e-05
 1e-06
 1e-07
 1e-08
 2
 4
 6
 8
 10
 12
 14
 16
 18
 20
Signal to Noise Ratio (dB)
(b) Simulation Results
Figure 15: Comparison of Bit Error Rate (BER). For all modulation
schemes, ZigZag and the Collision-Free Scheduler achieve the same
BER for comparable SNRs (+/- 1 dB of each other).
signals collide, and neither can be received. As Alice moves closer,
her signal improves with respect to Bob’s. When Alice’s signal is 4-6
dB higher than Bob’s, the capture effect starts, and we see a slight
increase in Alice’s throughput. As Alice gets even closer, Bob’s
signal becomes irrelevant. Note, however, that at all times Bob is
never received at the AP with 802.11. In contrast, with the Collision-
Free Scheduler, both Alice and Bob get a fair chance at accessing
the AP. But the scheduler cannot exploit that as Alice gets closer, the
capacity increases [29], making it possible to decode both Alice and
Bob.
ZigZag outperforms both current 802.11 and the Collision-Free
Scheduler. When Alice and Bob are equal distance from the AP, it
ensures that they are both received, as if they were allocated different
time slots. As Alice moves closer to the AP, the capture effect starts
kicking off. As a result, the AP can decode Alice’s signal without the
need for a second collision. The AP then subtracts Alice’s signal from
the collision and decode Bob’s packet, and thus the total throughput
becomes twice as much as the radio transmission rate. As Alice