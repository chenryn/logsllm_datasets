event message. The local event message can contain the following event data:
• Alias Base Queue Type Error
• Unknown Alias Base Queue
• Unknown Object Name
Remote
When an application or the queue manager cannot access a remote queue on another queue manager,
for example, the transmission queue is not correctly defined, the queue manager can generate a
remote event message. The remote event message can contain the following event data:
• Default Transmission Queue Type Error
• Default Transmission Queue Usage Error
• Queue Type Error
• Remote Queue Name Error
• Transmission Queue Type Error
• Transmission Queue Usage Error
• Unknown Default Transmission Queue
• Unknown Remote Queue Manager
• Unknown Transmission Queue
IBM MQ Monitoring and performance 13
Start and stop
Start and stop events indicate that a queue manager has been started or has been requested to stop
or quiesce.
z/OS supports only start events.
Stop events are not recorded unless the default message-persistence of the
SYSTEM.ADMIN.QMGR.EVENT queue is defined as persistent. The start and stop event message can
contain the following event data:
• Queue Manager Active
• Queue Manager Not Active
For each event type in this list, you can set a queue manager attribute to enable or disable the event type.
Channel and bridge events
Channels report these events as a result of conditions detected during their operation. For example, when
a channel instance is stopped.
Channel events are generated in the following circumstances:
• When a command starts or stops a channel.
• When a channel instance starts or stops.
• When a channel receives a conversion error warning when getting a message.
• When an attempt is made to create a channel automatically; the event is generated whether the attempt
succeeds or fails.
Note: Client connections do not cause Channel Started or Channel Stopped events.
When a command is used to start a channel, an event is generated. Another event is generated when the
channel instance starts. However, starting a channel by a listener, the runmqchl command, or a queue
manager trigger message does not generate an event. In these cases, an event is generated only when the
channel instance starts.
A successful start or stop channel command generates at least two events. These events are generated
for both queue managers connected by the channel (providing they support events).
If a channel event is put on an event queue, an error condition causes the queue manager to create an
event.
The event messages for channel and bridge events are put on the SYSTEM.ADMIN.CHANNEL.EVENT
queue.
The channel event messages can contain the following event data:
• Channel Activated
• Channel Auto-definition Error
• Channel Auto-definition OK
• Channel Conversion Error
• Channel Not Activated
• Channel Started
• Channel Stopped
• Channel Stopped By User
• Channel Blocked
IMS bridge events ( z/OS only)
These events are reported when an IMS bridge starts or stops.
14 Monitoring and Performance for IBM MQ
The IMS bridge event messages can contain the following event data:
• Bridge Started
• Bridge Stopped
SSL events
The only TLS event is the Channel SSL Error event. This event is reported when a channel using TLS fails to
establish a TLS connection.
The SSL event messages can contain the following event data:
• Channel SSL Error
• Channel SSL Warning
Performance events
Performance events are notifications that a resource has reached a threshold condition. For example, a
queue depth limit has been reached.
Performance events relate to conditions that can affect the performance of applications that use a
specified queue. They are not generated for the event queues themselves.
The event type is returned in the command identifier field in the message data.
If a queue manager tries to put a queue manager event or performance event message on an event queue
and an error that would typically create an event is detected, another event is not created and no action is
taken.
MQGET and MQPUT calls within a unit of work can generate performance events regardless of whether
the unit of work is committed or backed out.
The event messages for performance events are put on the SYSTEM.ADMIN.PERFM.EVENT queue.
There are two types of performance event:
Queue depth events
Queue depth events relate to the number of messages on a queue; that is, how full or empty the
queue is. These events are supported for shared queues. The queue depth event messages can
contain the following event data:
• Queue Depth High
• Queue Depth Low
• Queue Full
Queue service interval events
Queue service interval events relate to whether messages are processed within a user-specified time
interval. These events are not supported for shared queues.
IBM MQ for z/OS supports queue depth events for QSGDISP (SHARED) queues, but not
service interval events. Queue manager and channel events remain unaffected by shared queues. The
queue service event messages can contain the following event data:
• Queue Service Interval High
• Queue Service Interval OK
Configuration events
Configuration events are generated when a configuration event is requested explicitly, or automatically
when an object is created, modified, or deleted.
A configuration event message contains information about the attributes of an object. For example, a
configuration event message is generated if a namelist object is created, and contains information about
the attributes of the namelist object.
The event messages for configuration events are put on the SYSTEM.ADMIN.CONFIG.EVENT queue.
IBM MQ Monitoring and performance 15
Configuration events work in the following way:
• An audit trail of changes to the queue manager configuration is kept by means of event messages, which
are written to the SYSTEM.ADMIN.CONFIG.EVENT queue. You can enable these events to be written by
means of the CONFIGEV parameter on the ALTER QMGR command.
• These events are generated when a DEFINE, ALTER or DELETE command acts upon an object, or an
MQSET call is used.
• You can create a base-line picture of the current queue manager configuration by using the REFRESH
QMGR TYPE(CONFIGEV) command, which will create an event message for every object in the queue
manager. Note that since this could be a time consuming operation, if you have many objects, you
can break the task down into smaller sets of objects using the NAME and OBJECT qualifiers on the
command.
• The event message records one of four possible Reasons:
– MQRC_CONFIG_CHANGE_OBJECT
– MQRC_CONFIG_CREATE_OBJECT
– MQRC_CONFIG_DELETE_OBJECT
– MQRC_CONFIG_REFRESH_OBJECT
MQRC_CONFIG_CHANGE_OBJECT, MQRC_CONFIG_CREATE_OBJECT or
MQRC_CONFIG_DELETE_OBJECT occur for the respective MQSC or PCF commands that you might issue
upon an object.
MQRC_CONFIG_REFRESH_OBJECT occurs for those event messages written, when creating the base-
line picture.
There are four types of configuration event:
Create object events
Create object events are generated when an object is created. The event message contains the
following event data: Create object.
Change object events
Change object events are generated when an object is changed. The event message contains the
following event data: Change object.
Delete object events
Delete object events are generated when an object is deleted. The event message contains the
following event data: Delete object.
Refresh object events
Refresh object events are generated by an explicit request to refresh. The event message contains the
following event data: Refresh object.
Command events
Command events are reported when an MQSC or PCF command runs successfully.
A command event message contains information about the origin, context, and content of a command.
For example, a command event message is generated with such information if the MQSC command,
ALTER QLOCAL, runs successfully.
The event messages for command events are put on the SYSTEM.ADMIN.COMMAND.EVENT queue.
Command events contain the following event data: Command.
Logger events
Logger events are reported when a queue manager that uses linear logging starts writing log records to
a new log extent or, on IBM i, to a new journal receiver. Logger events are not
available with IBM MQ for z/OS.
A logger event message contains information specifying the log extents required by the queue manager to
restart the queue manager, or for media recovery.
16 Monitoring and Performance for IBM MQ
The event messages for logger events are put on the SYSTEM.ADMIN.LOGGER.EVENT queue.
The logger event message contains the following event data: Logger.
Event message data summary
Use this summary to obtain information about the event data that each type of event message can
contain.
Event type See these topics
Authority events Not Authorized (type 1)
Not Authorized (type 2)
Not Authorized (type 3)
Not Authorized (type 4)
Not Authorized (type 5)
Not Authorized (type 6)
Channel events Channel Activated
Channel Auto-definition Error
Channel Auto-definition OK
Channel Blocked
Channel Conversion Error
Channel Not Activated
Channel Started
Channel Stopped
Channel Stopped By User
Command events Command
Configuration events Create object
Change object
Delete object
Refresh object
IMS bridge events Bridge Started
Bridge Stopped
Inhibit events Get Inhibited
Put Inhibited
Local events Alias Base Queue Type Error
Unknown Alias Base Queue
Unknown Object Name
Logger events Logger
IBM MQ Monitoring and performance 17
Event type See these topics
Performance events Queue Depth High
Queue Depth Low
Queue Full
Queue Service Interval High
Queue Service Interval OK
Remote events Default Transmission Queue Type Error
Default Transmission Queue Usage Error
Queue Type Error
Remote Queue Name Error
Transmission Queue Type Error
Transmission Queue Usage Error
Unknown Default Transmission Queue
Unknown Remote Queue Manager
Unknown Transmission Queue
SSL events Channel SSL Error
Start and stop events Queue Manager Active
Queue Manager Not Active
Controlling events
You enable and disable events by specifying the appropriate values for queue manager, queue attributes,
or both, depending on the type of event.
You must enable each instrumentation event that you want to be generated. For example, the conditions
causing a Queue Full event are:
• Queue Full events are enabled for a specified queue, and
• An application issues an MQPUT request to put a message on that queue, but the request fails because
the queue is full.
Enable and disable events by using any of the following techniques:
• IBM MQ script commands (MQSC).
• The corresponding IBM MQ PCF commands.
• The operations and control panels for queue managers on z/OS.
• IBM MQ Explorer.
Note: You can set attributes related to events for both queues and queue managers only by command.
The MQI call MQSET does not support attributes related to events.
Related concepts
“Instrumentation events” on page 9
An instrumentation event is a logical combination of conditions that a queue manager or channel instance
detects and puts a special message, called an event message, on an event queue.
Introducing the operations and control panels
Related tasks
Automating administration tasks
18 Monitoring and Performance for IBM MQ
Using Programmable Command Formats
Related reference
“Event types” on page 11
Use this page to view the types of instrumentation event that a queue manager or channel instance can
report
The MQSC commands
Controlling queue manager events
You control queue manager events by using queue manager attributes. To enable queue manager events,
set the appropriate queue manager attribute to ENABLED. To disable queue manager events, set the
appropriate queue manager attribute to DISABLED.
To enable or disable queue manager events, use the MQSC command ALTER QMGR, specifying the
appropriate queue manager attribute. Table 1 on page 19 summarizes how to enable queue manager
events. To disable a queue manager event, set the appropriate parameter to DISABLED.
Table 1. Enabling queue manager events using MQSC commands
Event ALTER QMGR parameter
Authority AUTHOREV (ENABLED)
Inhibit INHIBTEV (ENABLED)
Local LOCALEV (ENABLED)
Remote REMOTEEV (ENABLED)
Start and Stop STRSTPEV (ENABLED)
Controlling channel and bridge events
You control channel events by using queue manager attributes. To enable channel events, set the
appropriate queue manager attribute to ENABLED. To disable channel events, set the appropriate queue
manager attribute to DISABLED.
To enable or disable channels events use the MQSC command ALTER QMGR, specifying the appropriate
queue manager attribute. Table 2 on page 19 summarizes how you enable channel and bridge events. To
disable a queue manager event, set the appropriate parameter to DISABLED.
Restriction: Channel auto-definition events are not available on IBM MQ for z/OS.
Table 2. Enabling channel and bridge events using MQSC commands
Event ALTER QMGR parameter
Channel CHLEV (ENABLED)
Related to channel errors only CHLEV (EXCEPTION)
IMS bridge BRIDGEEV (ENABLED)
SSL SSLEV (ENABLED)
Channel auto-definition CHADEV(ENABLED)
With CHLEV set to exception, the following return codes, and corresponding reason qualifiers are
generated:
• MQRC_CHANNEL_ACTIVATED
• MQRC_CHANNEL_CONV_ERROR
• MQRC_CHANNEL_NOT_ACTIVATED
• MQRC_CHANNEL_STOPPED
– with the following ReasonQualifiers:
- MQRQ_CHANNEL_STOPPED_ERROR
IBM MQ Monitoring and performance 19
- MQRQ_CHANNEL_STOPPED_RETRY
- MQRQ_CHANNEL_STOPPED_DISABLED
• MQRC_CHANNEL_STOPPED_BY_USER
• MQRC_CHANNEL_BLOCKED
– with the following ReasonQualifiers:
- MQRQ_CHANNEL_BLOCKED_NOACCESS
- MQRQ_CHANNEL_BLOCKED_USERID
- MQRQ_CHANNEL_BLOCKED_ADDRESS
Controlling performance events
You control performance events using the PERFMEV queue manager attribute. To enable performance
events, set PERFMEV to ENABLED. To disable performance events, set the PERFMEV queue manager
attribute to DISABLED.
To set the PERFMEV queue manager attribute to ENABLED, use the following MQSC command:
ALTER QMGR PERFMEV (ENABLED)
To enable specific performance events, set the appropriate queue attribute. Also, specify the conditions
that cause the event.
Queue depth events
By default, all queue depth events are disabled. To configure a queue for any of the queue depth
events:
1.Enable performance events on the queue manager.
2.Enable the event on the required queue.
3.Set the limits, if required, to the appropriate levels, expressed as a percentage of the maximum
queue depth.
Queue service interval events
To configure a queue for queue service interval events you must:
1.Enable performance events on the queue manager.
2.Set the control attribute for a Queue Service Interval High or OK event on the queue as required.
3.Specify the service interval time by setting the QSVCINT attribute for the queue to the appropriate
length of time.
Note: When enabled, a queue service interval event can be generated at any appropriate time, not
necessarily waiting until an MQI call for the queue is issued. However, if an MQI call is used on a
queue to put or remove a message, any applicable performance event is generated at that time. The
event is not generated when the elapsed time becomes equal to the service interval time.
Controlling configuration, command, and logger events
You control configuration, command, and logger events by using the queue manager attributes
CONFIGEV, CMDEV, and LOGGEREV. To enable these events, set the appropriate queue manager attribute
to ENABLED. To disable these events, set the appropriate queue manager attribute to DISABLED.
Configuration events
To enable configuration events, set CONFIGEV to ENABLED. To disable configuration events, set
CONFIGEV to DISABLED. For example, you can enable configuration events by using the following
MQSC command:
ALTER QMGR CONFIGEV (ENABLED)
20 Monitoring and Performance for IBM MQ
Command events
To enable command events, set CMDEV to ENABLED. To enable command events for commands
except DISPLAY MQSC commands and Inquire PCF commands, set the CMDEV to NODISPLAY. To
disable command events, set CMDEV to DISABLED. For example, you can enable command events by
using the following MQSC command:
ALTER QMGR CMDEV (ENABLED)
Logger events
To enable logger events, set LOGGEREV to ENABLED. To disable logger events, set LOGGEREV to
DISABLED. For example, you can enable logger events by using the following MQSC command:
ALTER QMGR LOGGEREV(ENABLED)
Event queues
When an event occurs, the queue manager puts an event message on the defined event queue. The event
message contains information about the event.
You can define event queues, either as:
• Local queues
• Alias queues
• Local definitions of remote queues, or as
• Remote cluster queues
If you define all your event queues as local definitions of the same remote queue on one queue manager,
you can centralize your monitoring activities.
You must not define event queues as transmission queues, because event messages have formats that
are incompatible with the message format that is required for transmission queues.
Shared event queues are local queues defined with the QSGDISP(SHARED) value.
For more information about defining shared queues on z/OS, see Application programming with shared
queues.
When an event queue is unavailable
If an event occurs when the event queue is not available, the event message is lost. For example, if you do
not define an event queue for a category of event, all event messages for that category are lost. The event
messages are not, for example, saved on the dead-letter (undelivered-message) queue.
However, you can define the event queue as a remote queue. Then, if there is a problem on the remote
system putting messages to the resolved queue, the event message arrives on the dead-letter queue of
the remote system.
An event queue might be unavailable for many different reasons including:
• The queue has not been defined.
• The queue has been deleted.
• The queue is full.
• The queue has been put-inhibited.
The absence of an event queue does not prevent the event from occurring. For example, after a
performance event, the queue manager changes the queue attributes and resets the queue statistics.
This change happens whether the event message is put on the performance event queue or not. The same
is true in the case of configuration and command events.
IBM MQ Monitoring and performance 21