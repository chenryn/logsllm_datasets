以下是优化后的文本，使其更加清晰、连贯和专业：

---

### RTL_USER_PROCESS_PARAMETERS 结构

```c
typedef struct _RTL_USER_PROCESS_PARAMETERS {
    DWORD                   Flags;                         // 0x08
    DWORD                   DebugFlags;                    // 0x0C
    void*                   ConsoleHandle;                 // 0x10
    DWORD                   ConsoleFlags;                  // 0x14
    HANDLE                  StdInputHandle;                // 0x18
    HANDLE                  StdOutputHandle;               // 0x1C
    HANDLE                  StdErrorHandle;                // 0x20
    UNICODE_STRING          CurrentDirectoryPath;          // 0x24
    HANDLE                  CurrentDirectoryHandle;        // 0x2C
    UNICODE_STRING          DllPath;                       // 0x30
    UNICODE_STRING          ImagePathName;                 // 0x38
    UNICODE_STRING          CommandLine;                   // 0x40
    void*                   Environment;                   // 0x48
    DWORD                   StartingPositionLeft;          // 0x4C
    DWORD                   StartingPositionTop;           // 0x50
    DWORD                   Width;                         // 0x54
    DWORD                   Height;                        // 0x58
    DWORD                   CharWidth;                     // 0x5C
    DWORD                   CharHeight;                    // 0x60
    DWORD                   ConsoleTextAttributes;         // 0x64
    DWORD                   WindowFlags;                   // 0x68
    DWORD                   ShowWindowFlags;               // 0x6C
    UNICODE_STRING          WindowTitle;                   // 0x70
    UNICODE_STRING          DesktopName;                   // 0x78
    UNICODE_STRING          ShellInfo;                     // 0x80
    UNICODE_STRING          RuntimeData;                   // 0x88
    RTL_DRIVE_LETTER_CURDIR DLCurrentDirectory[0x20];     // 0x90
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;
```

### PEB 结构

```c
#include <windows.h>
#include <winternl.h>

typedef struct _UNICODE_STRING {
    USHORT Length;
    USHORT MaximumLength;
    PWSTR  Buffer;
} UNICODE_STRING, *PUNICODE_STRING;

typedef struct _PEB_LDR_DATA {
    BYTE       Reserved1[8];
    PVOID      Reserved2[3];
    LIST_ENTRY InMemoryOrderModuleList;
} PEB_LDR_DATA, *PPEB_LDR_DATA;

typedef struct _RTL_USER_PROCESS_PARAMETERS {
    BYTE           Reserved1[16];
    PVOID          Reserved2[10];
    UNICODE_STRING ImagePathName;
    UNICODE_STRING CommandLine;
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS;

typedef struct _PEB {
    BYTE                          Reserved1[2];
    BYTE                          BeingDebugged;
    BYTE                          Reserved2[1];
    PVOID                         Reserved3[2];
    PPEB_LDR_DATA                 Ldr;
    PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;
    PVOID                         Reserved4[3];
    PVOID                         AtlThunkSListPtr;
    PVOID                         Reserved5;
    ULONG                         Reserved6;
    PVOID                         Reserved7;
    ULONG                         Reserved8;
    ULONG                         AtlThunkSListPtr32;
    PVOID                         Reserved9[45];
    BYTE                          Reserved10[96];
    BYTE                          Reserved11[128];
    PVOID                         Reserved12[1];
    ULONG                         SessionId;
} PEB, *PPEB;
```

### 获取 PEB 指针

```c
#ifndef _WIN64
PPEB pPeb = (PPEB)__readfsdword(0x30);
#else
PPEB pPeb = (PPEB)__readgsqword(0x60);
#endif // _WIN64
```

### 反调试技术

#### IsDebuggerPresent 函数

`IsDebuggerPresent` 是检测调试器的经典函数。它通过返回 PEB 结构中的 `BeingDebugged` 位来判断是否被调试。当有调试器附加时，`BeingDebugged` 位会被置为 1。

#### NtGlobalFlag 标志位

PEB 结构中的 `NtGlobalFlag` 字段（32 位 Windows 的偏移为 0x68，64 位 Windows 的偏移为 0xBC）默认为 0。反调试代码如下：

```c
#define FLG_HEAP_ENABLE_TAIL_CHECK   0x10
#define FLG_HEAP_ENABLE_FREE_CHECK   0x20
#define FLG_HEAP_VALIDATE_PARAMETERS 0x40
#define NT_GLOBAL_FLAG_DEBUGGED (FLG_HEAP_ENABLE_TAIL_CHECK | \
                                 FLG_HEAP_ENABLE_FREE_CHECK | \
                                 FLG_HEAP_VALIDATE_PARAMETERS)

#ifndef _WIN64
PPEB pPeb = (PPEB)__readfsdword(0x30);
DWORD dwNtGlobalFlag = *(PDWORD)((PBYTE)pPeb + 0x68);
#else
PPEB pPeb = (PPEB)__readgsqword(0x60);
DWORD dwNtGlobalFlag = *(PDWORD)((PBYTE)pPeb + 0xBC);
#endif // _WIN64

if (dwNtGlobalFlag & NT_GLOBAL_FLAG_DEBUGGED) {
    // 调试器已附加
}
```

#### 堆 Magic 标志

当进程被调试器调试时，该进程的堆会被一些特殊的标志填充，如 `0xABABABAB` 和 `0xFEEEFEEE`。检测代码如下：

```c
BOOL CheckHeapMagic() {
    PROCESS_HEAP_ENTRY HeapEntry = { 0 };
    do {
        if (!HeapWalk(GetProcessHeap(), &HeapEntry)) {
            return false;
        }
    } while (HeapEntry.wFlags != PROCESS_HEAP_ENTRY_BUSY);

    PVOID pOverlapped = (PBYTE)HeapEntry.lpData + HeapEntry.cbData;
    return ((DWORD)(*(PDWORD)pOverlapped) == 0xABABABAB);
}
```

### TEB 结构

TEB（Thread Environment Block）是线程环境块。以下是一个简化的 TEB 结构示例：

```c
typedef struct _ETHREAD {
    KTHREAD Tcb;
    LARGE_INTEGER CreateTime;
    LARGE_INTEGER ExitTime;
    LIST_ENTRY KeyedWaitChain;
    LIST_ENTRY PostBlockList;
    PVOID StartAddress;
    CLIENT_ID Cid;
    LIST_ENTRY IrpList;
    ULONG TopLevelIrp;
    PVOID Win32StartAddress;
    ULONG CrossThreadFlags;
    ULONG SameThreadPassiveFlags;
    ULONG SameThreadApcFlags;
    UCHAR CacheManagerActive;
    UCHAR DisablePageFaultClustering;
    UCHAR ActiveFaultCount;
    UCHAR LockOrderState;
    ULONG PerformanceCountLowReserved;
    LONG PerformanceCountHighReserved;
    ULONGLONG AlpcMessageId;
    PVOID AlpcMessage;
    LIST_ENTRY AlpcWaitListEntry;
    LONG ExitStatus;
    ULONG CacheManagerCount;
    ULONG IoBoostCount;
    ULONG IoQoSBoostCount;
    ULONG IoQoSThrottleCount;
} ETHREAD, *PETHREAD;
```

### 参考资料

- [Debugging Techniques](https://jev0n.com/2021/11/18/debug-1.html)
- [API Call Example](https://gist.github.com/christophetd/37141ba273b447ff885c323c0a7aff93)

---