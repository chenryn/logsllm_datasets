As you can see, for each employee this file contains name and title on
two consecutive lines.
## Swap Pattern Space with Hold Space (x command)
The sed Exchange (x) command swaps pattern space with hold space. This
command in itself is not that helpful, unless it is combined with other
sed commands; however, in conjunction with other commands, it is quite
powerful.
Suppose that pattern space contains \"line 1\" and hold space contains
\"line 2\". After the x command is executed, pattern space will have
\"line 2\", and hold space will have \"line 1\".
The following example prints the names of the managers. It looks for the
keyword \'Manager\' and prints the previous line.
> **Print manager names from empnametitle.txt:**
\$ sed -n -e \'x;n\' -e \'/Manager/{x;p}\' empnametitle.txt Jason Smith
Jane Miller
In the above example:
-   **{x;n}** - x swaps pattern space to the hold space; n reads the
    > next line into the pattern space. So, this command saves the
    > current line in hold space and reads the next line into pattern
    > space. For the example file, it is saving employee name to hold
    > space and fetching employee title into pattern space.
-   **/Manager/{x;p}** - If the content of the pattern space contains
    > the keyword \'Manager\', this command swaps pattern space with
    > hold space and then prints pattern space. This means that if the
    > employee title contains \'Manager\' the employee name will be
    > printed.
You can also save this in a sed script file and execute it as shown
below.
\$ vi x.sed
#!/bin/sed -nf
x;n
/Manager/{x;p}
\$ chmod u+x empnametitle.txt
\$ ./x.sed empnametitle.txt Jason Smith
Jane Miller
## Copy Pattern Space to Hold Space (h command)
The hold command (h) copies pattern space to hold space. Unlike the x
command, the h command does not change the content of pattern space. The
previous content of the hold space is overwritten with the content from
the pattern space.
Suppose pattern space contains \"line 1\" and hold space contains \"line
2\"; after the h command is executed, pattern space is not changed and
will still have \"line 1\", but hold space will also have \"line 1\".
**Print the names of the managers:**
\$ sed -n -e \'/Manager/!h\' -e \'/Manager/{x;p}\' empnametitle.txt
Jason Smith Jane Miller
The above command should be executed in a single line as shown below.
sed -n -e \'/Manager/!h\' -e \'/Manager/{x;p}\' empnametitle.txt
In the above example:
-   **/Manager/!h** - If the content of the pattern space doesn\'t
    > contain Manager (the ! after the pattern means \"not equal to\"
    > the pattern), copy the content of the pattern space to the hold
    > space. (In this case, this might be employee name (or) a title
    > that is not \"Manager\".) Note that, unlike the previous example,
> this one does not use the \'n\' command to get the next line; instead,
> the next line is fetched via normal execution flow.
-   **/Manager/{x;p}** - If the content of the pattern space contains
    > the keyword \'Manager\', this command swaps pattern space with
    > hold space and prints. This is identical to the command we used
    > for printing in the example for the x command.
You can also save this in a sed script file and execute it as shown
below.
\$ vi h.sed
#!/bin/sed -nf
/Manager/!h
/Manager/{x;p}
\$ chmod u+x empnametitle.txt
\$ ./h.sed empnametitle.txt Jason Smith
Jane Miller
## Append Pattern Space to Hold Space (H command)
Capital H is the command to append pattern space to hold space with a
new line. The previous content of hold space is not overwritten; instead
the content of pattern space is appended to the existing content of hold
space by adding a new line at the end.
Suppose pattern space contains \"line 1\" and hold space contains \"line
2\"; after the H command is executed, pattern space is not changed and
will still have \"line 1\", but hold space will have \"line 2\\nline
1\".
> **Print the name and title (in separate lines) of the managers:**
\$ sed -n -e \'/Manager/!h\' -e \'/Manager/{H;x;p}\' empnametitle.txt
Jason Smith
IT Manager Jane Miller Sales Manager
The above command should be executed in a single line as shown below.
sed -n -e \'/Manager/!h\' -e \'/Manager/{H;x;p}\' empnametitle.txt
In the above example:
-   **/Manager/!h** - If the content of the pattern space doesn\'t
    > contain Manager (the ! after the pattern means \"not equal to\"
    > the pattern), copy the content of the pattern space to the hold
    > space. (In this case, this might employee name (or) a title that
    > is not \"Manager\".) This is the same command we used in the h
    > command example.
-   **/Manager/{H;x;p}** - If the content of the pattern space contains
    > the keyword \'Manager\', the H command appends pattern space
    > (which is Manager) to hold space with a new line. So, the hold
    > space at this stage will have \"Employee Name\\nTitle\" (which
    > contains the keyword manager). The x command swaps hold space back
    > into pattern space, and p prints the pattern space.
You can also save this in a sed script file and execute it as shown
below.
\$ vi H-upper.sed
#!/bin/sed -nf
/Manager/!h
/Manager/{H;x;p}
\$ chmod u+x H-upper.sed
\$ ./H-upper.sed empnametitle.txt Jason Smith
IT Manager Jane Miller
Sales Manager
The above example can be slightly modified, if you want the employee
name and title to be printed on the same line with colon : as a
delimiter:
\$ sed -n -e \'/Manager/!h\' -e \'/Manager/{H;x;s/\\n/:/;p}\'
empnametitle.txt
Jason Smith:IT Manager Jane Miller:Sales Manager
The above command should be executed in a single line as shown below.
sed -n -e \'/Manager/!h\' -e \'/Manager/{H;x;s/\\n/:/;p}\'
empnametitle.txt
In the second example everything is same as the previous example except
for the substitute command added to the 2nd -e option. The H, x, and p
commands do the same thing as before; the s command replaces \\n with :
after swapping but before printing. Therefore the name and title are
printed on one line, separated by a colon.
You can also save this in a sed script file and execute it as shown
below.
\$ vi H1-upper.sed
#!/bin/sed -nf
/Manager/!h
/Manager/{H;x;s/\\n/:/;p}
\$ chmod u+x H1-upper.sed
\$ ./H1-upper.sed empnametitle.txt Jason Smith:IT Manager
Jane Miller:Sales Manager
## Copy Hold Space to Pattern Space (g command)
The sed get (g) command copies the content of hold space to pattern
space.
Think of it this way: h command \"holds\" it in the hold space, g
command \"gets\" it from the hold space.
Suppose pattern space contains \"line 1\" and hold space contains \"line
2\"; after the g command is executed, pattern space is changed and now
contains \"line 2\", while hold space is not changed and still contains
\"line 2\".
> **Print the names of the managers:**
\$ sed -n -e \'/Manager/!h\' -e \'/Manager/{g;p}\' empnametitle.txt
Jason Smith Jane Miller
The above command should be executed in a single line as shown below.
sed -n -e \'/Manager/!h\' -e \'/Manager/{g;p}\' empnametitle.txt
In the above example:
-   **/Manager/!h** -- we\'ve been using this one for the last few
    > examples. If the content of the pattern space doesn\'t contain
    > Manager, copy the content of pattern space to hold space.
-   **/Manager/{g;p}** -- g gets the line from hold space and puts it in
    > pattern space, then prints it.
You can also save this in a sed script file and execute it as shown
below.
\$ vi g.sed
#!/bin/sed -nf
/Manager/!h
/Manager/{g;p}
\$ chmod u+x g.sed
\$ ./g.sed empnametitle.txt Jason Smith
Jane Miller
## Append Hold Space to Pattern Space (G command)
Upper case G appends the content of hold space to pattern space with a
new line. The previous content in the pattern space is not overwritten;
instead the content from hold space is appended to the existing content
in pattern space by adding a new line at the end.
G and g are related in the same way as H and h; the lower case version
replaces the content while the upper case one appends to it.
Suppose pattern space contains \"line 1\" and hold space contains \"line
2\"; after the G command is executed, pattern space is changed to
contain \"line 1\\nline 2\" while hold space is not changed and still
contains \"line 2\".
> **Prints the employee name and title of the managers separated by
> colon.**
\$ sed -n -e \'/Manager/!h\' -e \'/Manager/{x;G;s/\\n/:/;p}\'
empnametitle.txt
Jason Smith:IT Manager Jane Miller:Sales Manager
The above command should be executed in a single line as shown below.
sed -n -e \'/Manager/!h\' -e \'/Manager/{x;G;s/\\n/:/;p}\'
empnametitle.txt In the above example:
-   **/Manager/!h** -- As in previous examples, if the content of
    > pattern space doesn\'t contain Manager, copy pattern space to hold
    > space.
-   **/Manager/{x;G;s/\\n/:/;p}** - If the content of the pattern space
    > contains Manager, do the following:
    -   **x** - Swap the content of pattern space with hold space. So,
        > the employee name stored in hold space will now be in pattern
        > space, while the title will be in hold space.
    -   **G** - Appends the content of hold space (title) to pattern
        > space (employee name). So, the pattern space at this stage
        > will have \"Employee Name\\nTitle\"
    -   **s/\\n/:/** This replaces the \\n that separates the \"Employee
        > Name\\nTitle\" with a colon :
    -   **p** prints the result (i.e. the content of pattern space).
    -   Note that if we left out the x command, i.e. if we used
        > /Manager/{G;s/\\n/:/;p}, we would print the title:name instead
        > of name:title for each manager.
You can also save this in a sed script file and execute it as shown
below.
> \$ vi G-upper.sed
>
> #!/bin/sed -nf
>
> /Manager/!h
>
> /Manager/{x;G;s/\\n/:/;p}
>
> \$ chmod u+x G-upper.sed
>
> \$ ./G-upper.sed empnametitle.txt Jason Smith:IT Manager
>
> Jane Miller:Sales Manager
# Chapter 7. Sed Multi-Line Commands and loops
Sed by default always handles one line at a time, unless we use the H,
G, or N command to create multiple lines separated by new line.
This chapter will describe sed commands applicable to such multi-line
buffers.
Note: When we have multiple lines, please keep in mind that \^ matches
only the 1st character of the buffer, i.e. of all the multiple lines
combined together, and \$ matches only the last character in the buffer,
i.e. the newline of the last line.
## Append Next Line to Pattern Space (N command)
Just as upper case H and G append rather than replacing, the N command
appends the next line from input-file to the pattern buffer, rather than
replacing the current line.
As we discussed earlier the lower case n command prints the current
pattern space, clears the pattern space, reads the next line from the
input-file into pattern space and resumes command execution where it
left off.
The upper case N command does not print the current pattern space and
does not clear the pattern space. Instead, it adds a newline (\\n) at
the end of the current pattern space, appends the next line from the
input-file to the current pattern space, and continues with the sed
standard flow by executing the rest of the sed commands.
> **Print employee names and titles separated by colon:**
\$ sed -e \'{N;s/\\n/:/}\' empnametitle.txt John Doe:CEO
Jason Smith:IT Manager
Raj Reddy:Sysadmin Anand Ram:Developer
Jane Miller:Sales Manager
In the above example:
-   **N** appends new line to current pattern space (which has employee
    > name) and appends the next line from input-file to the current
    > pattern space. So, the pattern space will contain (employee
    > name\\ntitle).
-   **s/\\n/:/** This replaces the \\n that separates the \"Employee
    > Name\\nTitle\" with a colon :
> ![](media/image3.jpeg)
>
> **Fig**: Illustration of the above example
The following example demonstrates the use of the N command to print the
line number on the same line as the text, while printing each line from
employee.txt.
> **Print line numbers:**
\$ sed -e \'=\' employee.txt \| sed -e \'{N;s/\\n/ /}\'
1.  101,John Doe,CEO
2.  102,Jason Smith,IT Manager
3.  103,Raj Reddy,Sysadmin
4.  104,Anand Ram,Developer
5.  105,Jane Miller,Sales Manager
As we saw in our previous examples, the sed = command prints the line
number first, and the original line next.
In this example, the N command adds \\n to the current pattern space
(which contains the line number), then reads the next line and appends
it. So, the pattern space will contain \"line-number\\nOriginal-
line-content\". Then we execute s/\\n/ / to change the newline (\\n) to
a space.
## Print 1st Line in MultiLine (P command)
We have seen three upper case commands so far, each of which appended to
rather than replacing the content of a buffer. We will now see that
upper case P and D operate in a fashion similar to their lower case
equivalents, but that they also do something special related to
MultiLine buffers.
As we discussed earlier the lower case p command prints the pattern
space. Upper case P command also prints the pattern space, but only
until it encounters a new line (\\n). The following example prints all
the managers names from the empnametitle.txt file
> \$ sed -n -e \'N\' -e \'/Manager/P\' empnametitle.txt Jason Smith
>
> Jane Miller
## Delete 1st Line in MultiLine (D command)
As we discussed earlier the lower case d command deletes the current
pattern space, reads the next line from the input-file to the pattern
space, aborts the rest of the sed commands and starts the loop again.
The upper case D command does not read the next line to the pattern
space after deleting it, nor does it completely clear the pattern buffer
(unless it only has one line). Instead, it does the following:
-   Deletes part of the pattern space until it encounters new line
    > (\\n).
-   Aborts the rest of the sed commands and starts command execution
    > from the beginning on the remaining content in the pattern buffer.
Consider the following file, which has comments enclosed between @ and @
for every title. Note that this comment also spans across the lines in
some cases. For example \@Information Technology officer@ spans across
two rows. Create the following sample file.
\$ vi empnametitle-with-comment.txt John Doe
CEO \@Chief Executive Officer@ Jason Smith
IT Manager \@Information Technology Officer@
Raj Reddy
Sysadmin \@System Administrator@ Anand Ram
Developer \@Senior Programmer@
Jane Miller
Sales Manager \@Sales Manager@
Our goal is to remove these comments from this file. This can be done as
shown below.
\$ sed -e \'/@/{N;/@.\*@/{s/@.\*@//;P;D}}\' empnametitle-
with-comment.txt
John Doe CEO
Jason Smith IT Manager Raj Reddy Sysadmin Anand Ram Developer Jane
Miller Sales Manager
The above command should be executed in a single line as shown below.
> sed -e \'/@/{N;/@.\*@/{s/@.\*@//;P;D}}\' empnametitle-with-comment.txt
You can also save this in a sed script file and execute it as shown
below.
\$ vi D-upper.sed
#!/bin/sed -f
/@/ { N
/@.\*@/ {s/@.\*@//;P;D }
}
\$ chmod u+x D-upper.sed
\$ ./D-upper.sed empnametitle-with-comment.txt
In the above example:
-   **/@/ {** - This is the outer loop. Sed looks for any line that
    > contains @ symbol. If it finds one, it executes the rest of the
    > logic. If not, it reads the next line. For example, let us take
    > line 4, which is \"@Information Technology\" (the comment spans to
    > multiple column and goes to line 5 also). There is an @ symbol on
    > line 4, so the rest of the commands are executed.
-   **N** - Get the next line from the input file and append it to the
    > pattern space. For example, this will read line 5 \"Officer@\",
    > and append it to pattern space. So, pattern space will contain
    > \"@Information Technology\\nOfficer@\".
-   **/@.\*@/** - Searches whether pattern space has the pattern
    > \"@.\*@\", which means anything enclosed between @ and @. The
    > expression is true for the current pattern space, so, it goes to
    > the next step.
-   **s/@.\*@//;P;D** - This substitutes the whole text \"@Information
    > Technology\\nOfficer@\" with nothing (basically it deletes the
    > text). P prints the 1st portion of the line. D deletes the rest of
    > the content of pattern space. And the logic continues from the top
    > again.
## Loop and Branch (b command and :label)
You can change the execution flow of the sed commands by using label and
branch (b command).
-   **:label** defines the label.
-   **b label** branches the execution flow to the label. Sed jumps to
    > the line marked by the label and continues executing the rest of
    > the commands from there.