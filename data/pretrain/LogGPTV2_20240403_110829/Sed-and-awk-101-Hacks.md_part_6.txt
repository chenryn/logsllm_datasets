### File Structure
The file `empnametitle.txt` contains employee names and titles on two consecutive lines. For example:
```
Jason Smith
IT Manager
Jane Miller
Sales Manager
```

### Swap Pattern Space with Hold Space (x command)
The `sed` Exchange (`x`) command swaps the content of the pattern space with the hold space. This command is more powerful when used in conjunction with other `sed` commands.

#### Example: Print Manager Names
Suppose the pattern space contains "line 1" and the hold space contains "line 2". After executing the `x` command, the pattern space will have "line 2", and the hold space will have "line 1".

To print the names of managers from `empnametitle.txt`:
```sh
sed -n -e 'x;n' -e '/Manager/{x;p}' empnametitle.txt
```
Output:
```
Jason Smith
Jane Miller
```

**Explanation:**
- **`x;n`**: Swaps the pattern space with the hold space and reads the next line into the pattern space. This saves the employee name in the hold space and fetches the employee title into the pattern space.
- **`/Manager/{x;p}`**: If the pattern space contains the keyword "Manager", it swaps the pattern space with the hold space and prints the pattern space. This means if the employee title contains "Manager", the employee name will be printed.

You can also save this in a `sed` script file and execute it:
```sh
$ vi x.sed
#!/bin/sed -nf
x;n
/Manager/{x;p}
$ chmod u+x x.sed
$ ./x.sed empnametitle.txt
```

### Copy Pattern Space to Hold Space (h command)
The `h` command copies the content of the pattern space to the hold space without changing the pattern space. The previous content of the hold space is overwritten.

#### Example: Print Manager Names
```sh
sed -n -e '/Manager/!h' -e '/Manager/{x;p}' empnametitle.txt
```
Output:
```
Jason Smith
Jane Miller
```

**Explanation:**
- **`/Manager/!h`**: If the pattern space does not contain "Manager", copy the content of the pattern space to the hold space. This might be an employee name or a title that is not "Manager".
- **`/Manager/{x;p}`**: If the pattern space contains "Manager", swap the pattern space with the hold space and print the pattern space.

You can also save this in a `sed` script file and execute it:
```sh
$ vi h.sed
#!/bin/sed -nf
/Manager/!h
/Manager/{x;p}
$ chmod u+x h.sed
$ ./h.sed empnametitle.txt
```

### Append Pattern Space to Hold Space (H command)
The `H` command appends the content of the pattern space to the hold space with a newline. The previous content of the hold space is not overwritten; instead, the content of the pattern space is appended.

#### Example: Print Name and Title of Managers
```sh
sed -n -e '/Manager/!h' -e '/Manager/{H;x;p}' empnametitle.txt
```
Output:
```
Jason Smith
IT Manager
Jane Miller
Sales Manager
```

**Explanation:**
- **`/Manager/!h`**: If the pattern space does not contain "Manager", copy the content of the pattern space to the hold space.
- **`/Manager/{H;x;p}`**: If the pattern space contains "Manager", append the pattern space to the hold space with a newline, swap the hold space back into the pattern space, and print the pattern space.

You can also save this in a `sed` script file and execute it:
```sh
$ vi H-upper.sed
#!/bin/sed -nf
/Manager/!h
/Manager/{H;x;p}
$ chmod u+x H-upper.sed
$ ./H-upper.sed empnametitle.txt
```

### Copy Hold Space to Pattern Space (g command)
The `g` command copies the content of the hold space to the pattern space.

#### Example: Print Manager Names
```sh
sed -n -e '/Manager/!h' -e '/Manager/{g;p}' empnametitle.txt
```
Output:
```
Jason Smith
Jane Miller
```

**Explanation:**
- **`/Manager/!h`**: If the pattern space does not contain "Manager", copy the content of the pattern space to the hold space.
- **`/Manager/{g;p}`**: If the pattern space contains "Manager", copy the content of the hold space to the pattern space and print it.

You can also save this in a `sed` script file and execute it:
```sh
$ vi g.sed
#!/bin/sed -nf
/Manager/!h
/Manager/{g;p}
$ chmod u+x g.sed
$ ./g.sed empnametitle.txt
```

### Append Hold Space to Pattern Space (G command)
The `G` command appends the content of the hold space to the pattern space with a newline. The previous content of the pattern space is not overwritten; instead, the content of the hold space is appended.

#### Example: Print Employee Name and Title Separated by Colon
```sh
sed -n -e '/Manager/!h' -e '/Manager/{x;G;s/\n/:/;p}' empnametitle.txt
```
Output:
```
Jason Smith:IT Manager
Jane Miller:Sales Manager
```

**Explanation:**
- **`/Manager/!h`**: If the pattern space does not contain "Manager", copy the content of the pattern space to the hold space.
- **`/Manager/{x;G;s/\n/:/;p}`**: If the pattern space contains "Manager", swap the content of the pattern space with the hold space, append the hold space to the pattern space with a newline, replace the newline with a colon, and print the pattern space.

You can also save this in a `sed` script file and execute it:
```sh
$ vi G-upper.sed
#!/bin/sed -nf
/Manager/!h
/Manager/{x;G;s/\n/:/;p}
$ chmod u+x G-upper.sed
$ ./G-upper.sed empnametitle.txt
```

### Chapter 7: Sed Multi-Line Commands and Loops
Sed by default handles one line at a time, but you can use the `H`, `G`, or `N` commands to create multi-line buffers.

#### Append Next Line to Pattern Space (N command)
The `N` command appends the next line from the input file to the pattern space with a newline.

#### Example: Print Employee Names and Titles Separated by Colon
```sh
sed -e '{N;s/\n/:/}' empnametitle.txt
```
Output:
```
John Doe:CEO
Jason Smith:IT Manager
Raj Reddy:Sysadmin
Anand Ram:Developer
Jane Miller:Sales Manager
```

**Explanation:**
- **`N`**: Appends the next line from the input file to the current pattern space with a newline.
- **`s/\n/:/`**: Replaces the newline with a colon.

#### Print 1st Line in MultiLine (P command)
The `P` command prints the pattern space up to the first newline.

#### Example: Print All Manager Names
```sh
sed -n -e 'N' -e '/Manager/P' empnametitle.txt
```
Output:
```
Jason Smith
Jane Miller
```

#### Delete 1st Line in MultiLine (D command)
The `D` command deletes the part of the pattern space up to the first newline and starts the loop again.

#### Example: Remove Comments
Consider a file `empnametitle-with-comment.txt` with comments enclosed between `@` and `@`:
```sh
$ sed -e '/@/{N;/@.*@/{s/@.*@//;P;D}}' empnametitle-with-comment.txt
```
Output:
```
John Doe CEO
Jason Smith IT Manager
Raj Reddy Sysadmin
Anand Ram Developer
Jane Miller Sales Manager
```

**Explanation:**
- **`/@/ {`**: Outer loop that looks for any line containing `@`.
- **`N`**: Appends the next line to the pattern space.
- **`/@.*@/`**: Searches for anything enclosed between `@` and `@`.
- **`s/@.*@//;P;D`**: Substitutes the comment with nothing, prints the first part of the line, and deletes the rest of the pattern space.

You can also save this in a `sed` script file and execute it:
```sh
$ vi D-upper.sed
#!/bin/sed -f
/@/ {
  N
  /@.*@/ {
    s/@.*@//
    P
    D
  }
}
$ chmod u+x D-upper.sed
$ ./D-upper.sed empnametitle-with-comment.txt
```

### Loop and Branch (b command and :label)
You can change the execution flow of `sed` commands using labels and branches.

- **`:label`**: Defines a label.
- **`b label`**: Branches the execution flow to the label.

This allows for more complex and flexible scripting in `sed`.