图 3-1  go 命令输出的帮助文本
使用空白标识符导入
包，避免编译错误。 
调用 sql 包提供的 Open 方法。该方法能
工作的关键在于 postgres 驱动通过自
己的 init 函数将自身注册到了 sql 包。
通过输出的列表可以看到，这个命令包含一个编译器，这个编译器可以通过 build 命令启
动。正如预料的那样，build 和 clean 命令会执行编译和清理的工作。现在使用代码清单 3-2
里的源代码，尝试执行这些命令： 
go build hello.go 
当用户将代码签入源码库里的时候，开发人员可能并不想签入编译生成的文件。可以用
clean 命令解决这个问题：
go clean hello.go 
调用 clean 后会删除编译生成的可执行文件。让我们看看 go 工具的其他一些特性，以
及使用这些命令时可以节省时间的方法。接下来的例子中，我们会使用代码清单 3-7 中的样
例代码。 
代码清单 3-7 使用 io 包的工作
01 package main 
02 
03 import ( 
04 
 "fmt" 
05 
 "io/ioutil" 
06 
 "os" 
07 
08 
 "github.com/goinaction/code/chapter3/words" 
09 ) 
10 
11 // main 是应用程序的入口 
12 func main() { 
13 
 filename := os.Args[1] 
14 
15 
 contents, err := ioutil.ReadFile(filename) 
16 
 if err != nil { 
17 
 fmt.Println(err) 
18 
 return 
19 
 } 
20 
21 
 text := string(contents) 
22 
23 
 count := words.CountWords(text) 
24 
 fmt.Printf("There are %d words in your text．\n", count) 
25 } 
如果已经下载了本书的源代码，应该可以在$GOPATH/src/github.com/goinaction/code/chapter3/words
找到这个包。确保已经有了这段代码再进行后面的内容。 
大部分 Go 工具的命令都会接受一个包名作为参数。回顾一下已经用过的命令，会想起 build
命令可以简写。在不包含文件名时，go 工具会默认使用当前目录来编译。
go build 
因为构建包是很常用的动作，所以也可以直接指定包： 
go build github.com/goinaction/code/chapter3/wordcount 
也可以在指定包的时候使用通配符。3 个点表示匹配所有的字符串。例如，下面的命令会编译
chapter3 目录下的所有包：
go build github.com/goinaction/code/chapter3/... 
除了指定包，大部分 Go 命令使用短路径作为参数。例如，下面两条命令的效果相同： 
go build wordcount.go 
go build . 
要执行程序，需要首先编译，然后执行编译创建的 wordcount 或者 wordcount.exe 程
序。不过这里有一个命令可以在一次调用中完成这两个操作： 
go run wordcount.go 
go run 命令会先构建 wordcount.go 里包含的程序，然后执行构建后的程序。这样可以节省
好多录入工作量。 
做开发会经常使用 go build 和 go run 命令。让我们看另外几个可用的命令，以及这些
命令可以做什么。 
3.5  进一步介绍 Go 开发工具 
我们已经学到如何用 go 这个通用工具进行编译和执行。但这个好用的工具还有很多其他没
有介绍的诀窍。 
3.5.1  go vet
这个命令不会帮开发人员写代码，但如果开发人员已经写了一些代码，vet 命令会帮开发人
员检测代码的常见错误。让我们看看 vet 捕获哪些类型的错误。
Printf 类函数调用时，类型匹配错误的参数。
定义常用的方法时，方法签名的错误。
错误的结构标签。
没有指定字段名的结构字面量。
让我们看看许多 Go 开发新手经常犯的一个错误。fmt.Printf 函数常用来产生格式化输出，
不过这个函数要求开发人员记住所有不同的格式化说明符。代码清单 3-8 中给出的就是一个例子。 
代码清单 3-8 使用 go vet
01 package main 
02 
03 import "fmt" 
04 
05 func main() { 
06 
 fmt.Printf("The quick brown fox jumped over lazy dogs", 3.14) 
07 } 
这个程序要输出一个浮点数 3.14，但是在格式化字符串里并没有对应的格式化参数。如果对
这段代码执行 go vet，会得到如下消息：
go vet main.go 
main.go:6: no formatting directive in Printf call 
go vet 工具不能让开发者避免严重的逻辑错误，或者避免编写充满小错的代码。不过，正
像刚才的实例中展示的那样，这个工具可以很好地捕获一部分常见错误。每次对代码先执行 go 
vet 再将其签入源代码库是一个很好的习惯。
3.5.2  Go 代码格式化 
fmt 是 Go 语言社区很喜欢的一个命令。fmt 工具会将开发人员的代码布局成和 Go 源代码
类似的风格，不用再为了大括号是不是要放到行尾，或者用 tab（制表符）还是空格来做缩进而
争论不休。使用 go fmt 后面跟文件名或者包名，就可以调用这个代码格式化工具。fmt 命令会
自动格式化开发人员指定的源代码文件并保存。下面是一个代码执行 go fmt 前和执行 go fmt
后几行代码的对比： 
if err != nil { return err } 
在对这段代码执行 go fmt 后，会得到：
if err != nil { 
 return err 
} 
很多 Go 开发人员会配置他们的开发环境，在保存文件或者提交到代码库前执行 go fmt。
如果读者喜欢这个命令，也可以这样做。 
3.5.3  Go 语言的文档 
还有另外一个工具能让 Go 开发过程变简单。Go 语言有两种方法为开发者生成文档。如果
开发人员使用命令行提示符工作，可以在终端上直接使用 go doc 命令来打印文档。无需离开终
端，即可快速浏览命令或者包的帮助。不过，如果开发人员认为一个浏览器界面会更有效率，可
以使用 godoc 程序来启动一个 Web 服务器，通过点击的方式来查看 Go 语言的包的文档。Web
服务器 godoc 能让开发人员以网页的方式浏览自己的系统里的所有 Go 语言源代码的文档。
1．从命令行获取文档 
对那种总会打开一个终端和一个文本编辑器（或者在终端内打开文本编辑器）的开发人员来
说，go doc 是很好的选择。假设要用 Go 语言第一次开发读取 UNIX tar 文件的应用程序，想
要看看 archive/tar 包的相关文档，就可以输入：
go doc tar 
执行这个命令会直接在终端产生如下输出： 
PACKAGE DOCUMENTATION 
package tar // import "archive/tar" 
Package tar implements access to tar archives．It aims to cover most of the 
variations, including those produced by GNU and BSD tars. 
References: 
 http://www.freebsd.org/cgi/man.cgi?query=tar&sektion=5 
 http://www.gnu.org/software/tar/manual/html_node/Standard.html 
 http://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html 
var ErrWriteTooLong = errors.New("archive/tar: write too long") ... 
var ErrHeader = errors.New("archive/tar: invalid tar header") 
func FileInfoHeader(fi os.FileInfo, link string) (*Header, error) 
func NewReader(r io.Reader) *Reader 
func NewWriter(w io.Writer) *Writer 
type Header struct { ..．} 
type Reader struct { ..．} 
type Writer struct { ..．} 
开发人员无需离开终端即可直接翻看文档，找到自己需要的部分。 
2．浏览文档 
Go 语言的文档也提供了浏览器版本。有时候，通过跳转到文档，查阅相关的细节，能更容
易理解整个包或者某个函数。在这种情况下，会想使用 godoc 作为 Web 服务器。如果想通过 Web
浏览器查看可以点击跳转的文档，下面就是得到这种文档的好方式。 
开发人员启动自己的文档服务器，只需要在终端会话中输入如下命令： 
godoc -http=:6060 
这个命令通知 godoc 在端口 6060 启动 Web 服务器。如果浏览器已经打开，导航到
http://localhost:6060 可以看到一个页面，包含所有 Go 标准库和你的 GOPATH 下的 Go 源代码的文档。 
如果图 3-2 显示的文档对开发人员来说很熟悉，并不奇怪，因为 Go 官网就是通过一个略
微修改过的 godoc 来提供文档服务的。要进入某个特定包的文档，只需要点击页面顶端的
Packages。 
Go 文档工具最棒的地方在于，它也支持开发人员自己写的代码。如果开发人员遵从一个简
单的规则来写代码，这些代码就会自动包含在 godoc 生成的文档里。
为了在 godoc 生成的文档里包含自己的代码文档，开发人员需要用下面的规则来写代码和
注释。我们不会在本章介绍所有的规则，只会提一些重要的规则。 
3.5  进一步介绍 Go 开发工具
47 
图 3-2  本地 Go 文档 
用户需要在标识符之前，把自己想要的文档作为注释加入到代码中。这个规则对包、函数、
类型和全局变量都适用。注释可以以双斜线开头，也可以用斜线和星号风格。 
// Retrieve 连接到配置库，收集各种链接设置、用户名和密码。这个函数在成功时
// 返回 config 结构，否则返回一个错误。
func Retrieve() (config, error) { 
// ..．省略
} 
在这个例子里，我们展示了在 Go 语言里为一个函数写文档的惯用方法。函数的文档直接写
在函数声明之前，使用人类可读的句子编写。如果想给包写一段文字量比较大的文档，可以在工
程里包含一个叫作 doc.go 的文件，使用同样的包名，并把包的介绍使用注释加在包名声明之前。 
/* 
包 usb 提供了用于调用 USB 设备的类型和函数。想要与 USB 设备创建一个新链接，使用 NewConnection
 ... 
*/ 
package usb 
这段关于包的文档会显示在所有类型和函数文档之前。这个例子也展示了如何使用斜线和星
号做注释。可以在 Google 上搜索 golang documentation 来查找更多关于如何给代码创建一个好文
档的内容。 
3.6  与其他 Go 开发者合作 
现代开发者不会一个人单打独斗，而 Go 工具也认可这个趋势，并为合作提供了支持。多亏
了 go 工具链，包的概念没有被限制在本地开发环境中，而是做了扩展，从而支持现代合作方式。
让我们看看在分布式开发环境里，想要良好合作，需要遵守的一些惯例。 
以分享为目的创建代码库 
开发人员一旦写了些非常棒的 Go 代码，就会很想把这些代码与 Go 社区的其他人分享。这
其实很容易，只需要执行下面的步骤就可以。 
1．包应该在代码库的根目录中 
使用 go get 的时候，开发人员指定了要导入包的全路径。这意味着在创建想要分享的代码
库的时候，包名应该就是代码库的名字，而且包的源代码应该位于代码库目录结构的根目录。 
Go 语言新手常犯的一个错误是，在公用代码库里创建一个名为 code 或者 src 的目录。如
果这么做，会让导入公用库的语句变得很长。为了避免过长的语句，只需要把包的源文件放在公
用代码库的根目录就好。 
2．包可以非常小 
与其他语言相比，Go 语言的包一般相对较小。不要在意包只支持几个 API，或者只完成一
项任务。在 Go 语言里，这样的包很常见，而且很受欢迎。 
3．对代码执行 go fmt
和其他开源代码库一样，人们在试用代码前会通过源代码来判断代码的质量。开发人员需要
在签入代码前执行 go fmt，这样能让自己的代码可读性更好，而且不会由于一些字符的干扰（如
制表符），在不同人的计算机上代码显示的效果不一样。 
4．给代码写文档 
Go 开发者用 godoc 来阅读文档，并且会用 http://godoc.org 这个网站来阅读开源包的文档。如果
按照 go doc 的最佳实践来给代码写文档，包的文档在本地和线上都会很好看，更容易被别人发现。 
3.7  依赖管理 
从 Go 1.0 发布那天起，社区做了很多努力，提供各种 Go 工具，以便开发人员的工作更轻松。
有很多工具专注在如何管理包的依赖关系。现在最流行的依赖管理工具是 Keith Rarik 写的 godep、
Daniel Theophanes 写的 vender 和 Gustavo Niemeyer 开发的 gopkg.in 工具。gopkg.in 能帮助开发人
员发布自己的包的多个版本。 
作为对社区的回应，Go 语言在 1.5 版本开始试验性提供一组新的构建选项和功能，来为依
赖管理提供更好的工具支持。尽管我们还需要等一段时间才能确认这些新特性是否能达成目的，
但毕竟现在已经有一些工具以可重复使用的方式提供了管理、构建和测试 Go 代码的能力。 
3.7.1  第三方依赖 
像 godep 和 vender 这种社区工具已经使用第三方（verdoring）导入路径重写这种特性解决了
依赖问题。其思想是把所有的依赖包复制到工程代码库中的目录里，然后使用工程内部的依赖包
所在目录来重写所有的导入路径。 
代码清单 3-9 展示的是使用 godep 来管理工程里第三方依赖时的一个典型的源代码树。 
代码清单 3-9 使用 godep 的工程 
$GOPATH/src/github.com/ardanstudios/myproject 
 |-- Godeps 
 |   |-- Godeps.json 
 |   |-- Readme 
 |   |-- _workspace 
 | 
 |-- src 
 | 
 |-- bitbucket.org 
 | 
 |-- ww 
 | 
 |   |-- goautoneg 
 | 
 | 
 |-- Makefile 
 | 
 | 
 |-- README.txt 
 | 
 | 
 |-- autoneg.go 
 | 
 | 
 |-- autoneg_test.go 
 | 
 |-- github.com 
 | 
 |-- beorn7 
 | 
 |-- perks 
 | 
 |-- README.md 
 | 
 |-- quantile 
 | 
 |-- bench_test.go 
 | 
 |-- example_test.go 
 | 
 |-- exampledata.txt 
 | 
 |-- stream.go 
|
 |-- examples 
 |-- model 
 |-- README.md 
 |-- main.go 
可以看到 godep 创建了一个叫作 Godeps 的目录。由这个工具管理的依赖的源代码被放在
一个叫作_workspace/src 的目录里。
接下来，如果看一下在 main.go 里声明这些依赖的 import 语句（如代码清单 3-9 和代码清
单 3-10 所示），就能发现需要改动的地方。 
代码清单 3-10 在路径重写之前 
01 package main 
02 
03 import ( 
04 
 "bitbucket.org/ww/goautoneg" 
05 
 "github.com/beorn7/perks" 
06 ) 
代码清单 3-11 在路径重写之后 
01 package main 
02 
03 import ( 
04 