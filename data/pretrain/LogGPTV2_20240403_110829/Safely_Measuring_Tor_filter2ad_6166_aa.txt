title:Safely Measuring Tor
author:Rob Jansen and
Aaron Johnson
Safely Measuring Tor
Rob Jansen and Aaron Johnson
U.S. Naval Research Laboratory
Washington, D.C.
{rob.g.jansen, aaron.m.johnson}@nrl.navy.mil
ABSTRACT
Tor is a popular network for anonymous communication.
The usage and operation of Tor is not well-understood, how-
ever, because its privacy goals make common measurement
approaches ineffective or risky. We present PrivCount, a sys-
tem for measuring the Tor network designed with user pri-
vacy as a primary goal. PrivCount securely aggregates mea-
surements across Tor relays and over time to produce differ-
entially private outputs. PrivCount improves on prior ap-
proaches by enabling ﬂexible exploration of many diverse
kinds of Tor measurements while maintaining accuracy and
privacy for each. We use PrivCount to perform a measure-
ment study of Tor of sufﬁcient breadth and depth to inform
accurate models of Tor users and trafﬁc. Our results indi-
cate that Tor has 710,000 users connected but only 550,000
active at a given time, that Web trafﬁc now constitutes 91%
of data bytes on Tor, and that the strictness of relays’ connec-
tion policies signiﬁcantly affects the type of application data
they forward.
1.
INTRODUCTION
The Tor network [10] is among the most popular tools for
digital privacy. Users such as journalists, activists, and law
enforcement use its onion-routing protocol to keep private
what Web sites they are visiting, media they are watching,
and emails they are sending. As of May 2016, the network
consists of around 7000 volunteer-run relays that forward user
trafﬁc to its destination, the network collectively forwards
nearly 75 Gbps of trafﬁc, and an estimated 1.75 million users
connect every day [4].
Statistics such as these are critical to understand the impact
Tor is currently having and how it can be improved. How-
ever, typical methods for network monitoring cannot be di-
rectly applied to Tor because of its strong privacy goals. For
example, simply measuring the number of users is very dif-
ﬁcult as Tor is designed to keep users anonymous, and in-
formation about their identities should not be collected even
when available to protect against legal or technical compro-
This paper is authored by an employee(s) of the United States Government and is in the
public domain. Non-exclusive copying or redistribution is allowed, provided that the
article citation is given and the authors and agency are clearly identiﬁed as its source.
CCS’16, October 24 - 28, 2016, Vienna, Austria
ACM ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978310
mise of the data. Tor itself currently gathers few measure-
ments and many of these using heuristic techniques of un-
known accuracy (including its number of users).
The research community has largely left this problem alone
due to the privacy risks involved. McCoy et al. [23] in 2008
performed some of the ﬁrst research measuring Tor by run-
ning a relay and examining the types of trafﬁc observed ex-
iting Tor. However, this approach was widely debated [28]
due to the risks that collecting such data poses to user pri-
vacy. Some studies in 2010 [8, 22] performed measurement
of Tor’s users and trafﬁc, but there has otherwise been rela-
tively little follow-up. Over the same time great advances in
privacy-preserving data publishing have developed, includ-
ing differential privacy [11] and practical privacy-preserving
aggregation [6].
We build on this recent work to develop PrivCount, an ef-
ﬁcient and ﬂexible system for privacy-preserving measure-
ment on Tor. PrivCount extends the PrivEx system of Elahi
et al. [14], designed speciﬁcally for private Tor measurement,
by making it suitable for the kinds of exploratory measure-
ments used during research. To PrivEx, PrivCount adds re-
peatable measurement phases in order to make iterative mea-
surements feasible. It also provides a comprehensive method
to apply differential privacy to multiple and diverse Tor statis-
tics while maintaining high accuracy for each. We develop
an open-source tool implementing PrivCount that is robust,
secure, and particularly convenient to use for research on
Tor [1].
We use the PrivCount tool to perform a measurement study
of Tor users and trafﬁc with a scope similar to past work but
with user privacy as a foremost consideration. Our research
deployment of PrivCount involves 6 independent contribu-
tors in 4 different countries of which all would need to be
compromised in order to violate the security properties of
the system. We perform aggregation of measurements across
7 Tor relays, which prevents any one from being identiﬁed as
the source of a particular trafﬁc characteristic.
We collect client and destination statistics with the particu-
lar goal of informing future models of Tor trafﬁc and network
improvement. Our results on exit trafﬁc indicate that trafﬁc
to Web ports now constitutes 91% of data bytes on Tor, up
from 42% in 2010 [8]. We also provide a ﬁrst estimate of the
number of Tor users outside of Tor’s own measurement us-
ing an entirely different method. Our data indicate that in
any given 10 minutes an average of 710 thousand users are
connected to Tor, of which just over 550 thousand (77%) are
active. We also look at the effect of exit policies, which relays
use to limit which ports and IPs they will connect to, and
we provide evidence that exit policies signiﬁcantly affect the
type of trafﬁc exiting a relay, a factor that previous studies
did not consider.
Our results show that many of the Tor measurements of
most interest can be done privately and practically. Low-cost
research efforts can productively use PrivCount, while the
Tor Project itself could beneﬁt from its security and privacy
properties that exceed in many ways the security of Tor’s
own measurement methods.
2. PRIVATE COUNTING WITH PrivCount
In order to safely gather statistics from the Tor network, we
designed and implemented a privacy-preserving data collec-
tion and aggregation system called PrivCount that expands
upon the secret-sharing variant of PrivEx [14] (i.e. PrivEx-S2).
This section provides a self-contained description of Priv-
Count, noting throughout how it differs from PrivEx (see
Section 6 for a summary of these differences).
2.1 Overview of Roles and Architecture
PrivCount is a distributed counting system which relies on
multiple nodes and entities to achieve privacy and security.
A PrivCount deployment contains a tally server (TS) node,
one or more data collector (DC) nodes, and one or more share
keeper (SK) nodes.
Tally Server. The PrivCount TS is the central point of the
system. The TS authenticates the DC and SK nodes before
admitting them, tracks their availability and status, and syn-
chronizes system operations. In order to minimize the attack
surface of a PrivCount deployment, the TS acts as a central
proxy for all communication between the other nodes. The
TS server port is the only port that is required to be open and
Internet-accessible in the entire PrivCount system; the DCs
and SKs only make outgoing connections to the TS. This cen-
tralized control is in contrast to PrivEx, where SKs and DCs
run autonomously and communicate directly. However, de-
spite its more central position, the TS is still untrusted, and
all communication between DCs and SKs is encrypted and
authenticated.
Data Collectors. PrivCount DCs are the main nodes for pro-
cessing measurements. DCs are responsible for collecting
events from a locally running Tor process, computing statis-
tics from those events, and maintaining counts for each statis-
tic over time. Each counter is initialized with the sum of
normally-distributed random noise and uniformly-random
numbers shared pairwise with each SK in the system. The
noise serves to provide differential privacy [11] of the ﬁnal,
aggregated value. The shared numbers serve to “blind” the
counter; the numbers are encrypted, one for each SK, and
then each is sent to the corresponding SKs (through the TS
proxy) before being securely erased at the DC. This process
ensures forward privacy: any compromise of a DC will not
leak past local counter values (the counters will appear uni-
formly random). The DCs increment the counters during the
collection period, and then send the ﬁnal counts (the sum of
the true counts, noise, and shared numbers) to the TS during
aggregation.
Share Keepers. PrivCount SKs are responsible for storing the
shared numbers assigned to it by the DCs; for each counter,
each SK will have received one shared value from each DC.
During aggregation, each SK for each counter sums the shared
values they received from the DCs and sends the sum to
the TS. Once the TS receives all counts from the DCs and
all summed shared values from the SKs, the TS sums the
counts from all DCs for each counter and then “de-blinds”
each counter by subtracting the summed shared values. The
ﬁnal aggregated count for each counter is only meaningful
after all summed secrets from all SKs are removed. As long
as at least one SK acts honestly in summing the secret num-
bers, the TS cannot learn individual DC counts, and nothing
is revealed but the ﬁnal aggregated count, which is protected
under differential privacy.
2.2 Protocol Speciﬁcation
Consider a PrivCount deployment with one tally server
T , n data collectors Di, i ∈ {1, ..., n}, and m share keepers
Sj, j ∈ {1, ..., m}. Further, suppose that l statistics are be-
ing collected; let sk be the value computed for the kth statis-
tic, k ∈ {1, ..., l}. As in PrivEx, the value of a statistic can
be a single integer, but PrivCount also allows the value of a
statistic to be a vector of integers representing a histogram.
Single numbers are implemented with one counter, which
is an integer and is the fundamental data structure in Priv-
Count. Histograms are implemented with ck counters sk =
(sk,1, . . . , sk,ck ), where each counter represents a bin in the
histogram. The range of each bin sk,b is [Lk,b, Rk,b), where
Lk,b < Rk,b ≤ Lk,b+1 for all b. When a measurement is made
for sk with value x, the bin sk,b for which Lk,b ≤ x < Rk,b
is incremented by one. We extend some of this notation to
those sk that are single numbers by letting ck = 1 and letting
sk = sk,1. The counters are kept at all DCs, and we denote
by si
k,b the counter stored at Di for sk,b. Addition at a counter
is performed modulo q, where q is a number large enough
that the aggregated noisy value is almost certainly within
(−q/2, q/2). Output values in [q/2, q) are interpreted as neg-
ative values, which can occur even for non-negative statistics
due to the random noise added.
i=1 si
The goal of PrivCount is to privately measure all statistics
locally and then reveal only the differentially-private counts
aggregated across all DCs, i.e., to compute ∑n
k,b + Ni
k,b,
where Ni
k,b is Di’s component of the random noise that pro-
vides (, δ)-differential privacy [12]. PrivCount divides the
steps accomplishing this aggregation into phases that permit
an iterative collection process in which initial results can be
used to inform later rounds of data collection.
In contrast
to PrivEx, which assumes continuous and static data collec-
tion, this design enables ﬂexibility in measurement type and
length with minimal coordination among the independent
parties running the protocol, while still maintaining its se-
curity properties. Because human operators facilitating the
data exploration are a key component of this process, we in-
clude in our description how these operators interact with
the automated system. The phases of operation for Priv-
Count are as follows:
Initialization
2.2.1
The initialization phase contains all actions that require
the participation of the DC and SK operators. Coordination
among multiple operators is difﬁcult and time-consuming,
and so PrivCount concentrates their involvement at the be-
ginning phase, which allows later phases to be performed
multiple times at the discretion of just the TS operator. Thus
the TS operator is able to quickly and conveniently explore
interesting phenomena in the Tor network without becom-
ing a single point of compromise for the system.
We assume that a public-key infrastructure (PKI) securely
provides signing and encryption keys to all PrivCount par-
ticipants. These keys are used implicitly throughout the pro-
tocol when a message is encrypted to or signed by a party,
and all messages are sent on secure channels implemented
via these keys. Moreover, we assume that code correctly
implementing PrivCount has already been installed on each
protocol entity. Note that at several points individual opera-
tors are required to verify that certain settings provide “ad-
equate” privacy and security. This determination would be
made in accordance with an out-of-band discussion among
all participants in the speciﬁc PrivCount deployment.
During this phase, the TS operator should conﬁgure the
TS with a deployment document that will be shared among all
protocol participants. The deployment document includes
the public keys of the desired DCs and SKs. It also includes
the following parameters governing the amount of privacy-
preserving noise to add to the statistics: the differential pri-
vacy parameters  and δ, the sensitivity of each statistic (i.e.
the maximum amount the statistic can change given a certain
limited amount of change in a user’s activities), the reconﬁg-
uration time that must pass between collection periods with
different conﬁgurations, and the noise weight wi (i.e. the rela-
tive amount of noise provided by DC Di). These parameters
are described fully in Section 2.3. The deployment document
also includes the minimal subsets of DCs that must provide
measurements for the SKs to allow an aggregate output to be
produced. The TS then sends the deployment document to
each DC and SK in the document.
After receiving the deployment document, to ensure con-
sistency each party sends the deployment document (with
the TS signature) to the other parties and waits until it has
received an identical copy of the document from them. The
operators should then verify that the participants, noise pa-
rameters, and the minimal required DC subsets provide ade-
quate privacy. The acceptance or rejection is then sent to the
TS.
The keys and parameters conﬁgured during the initializa-
tion phase will not be modiﬁed in later phases, and doing
so requires re-initializing the system. We note that, to make
larger deployments efﬁcient, consistency of the deployment
document could instead be achieved by obtaining signatures
from a small set of ﬁxed authorities (e.g. the Tor Directory
Authorities).
2.2.2 Conﬁguration
The TS should only proceed to the conﬁguration phase if
all DCs and SKs accepted the deployment document. Dur-
ing the conﬁguration phase, the TS sets features of data col-
lection to which the DCs and SKs automatically adjust in
order to maintain PrivCount’s privacy guarantees. There-
fore, the TS operator can unilaterally and repeatedly con-
ﬁgure new measurements without the TS becoming a single
point of compromise, which signiﬁcantly improves the speed
and convenience of using PrivCount compared to PrivEx.
The following features are set at the TS during this phase:
(i) the start and end time of the collection, (ii) the statistics sk
that will be collected (iii) the number ck of counters used to
count each statistic, (iv) the range [Lk,b, Rk,b) of each bin, and
(v) an estimated value vk for each statistic that will guide Priv-
Count in determining how to add noise such that relative
accuracy per-statistic is maximized while providing (, δ)-
differential privacy across all statistics (see Section 2.3).
These conﬁguration features are collected in a conﬁgura-
tion document, which is sent to each DC and SK. To ensure
consistency, each SK sends a copy of the signed document to
each other SK and each DC. Each SK and each DC waits until
it has received an identical copy of the conﬁguration docu-
ment from each SK. Once received, each DC then determines
the noise magnitude σk for each statistic sk. This calculation
is based on the noise parameters set during initialization as
well as the statistics selected and estimated by T during con-
ﬁguration (see Section 2.3 for details on computing the σk).
2.2.3 Execution
The execution phase is divided into setup, collection, and
aggregation processes.
Setup. During the setup process, each DC Di produces noise
for each counter si
k,b by sampling from the normal distribu-
tion with mean 0 and standard deviation wiσk to produce a
noise value Ni
k,b ∼ Round(Normal(0, wiσk)).1 Then Di ini-
tializes the counter as si
k,b mod q. The noise val-
ues, when aggregated across all DCs, implement the Gaus-
sian mechanism [12] and thus provide differential privacy
for the ﬁnal output (see Section 3 for a privacy analysis of
PrivCount).
k,b = Ni
k,b ← si
Each Di then, for each counter, generates m uniformly ran-
dom integers to produce for each SK Sj a value
Bi,j
k,b ∼ Uniform({0, . . . , q − 1})2 that will be shared with Sj,
and Di increments the counter by these values: si
k,b +
j=1 Bi,j
∑m
k,b mod q. Each counter now has m + 1 values added
to it: the noise and the m shared values. The shared values
Bi,j
k,b serve to blind counter si
k,b to provide forward privacy
and will be removed later during the aggregation process.