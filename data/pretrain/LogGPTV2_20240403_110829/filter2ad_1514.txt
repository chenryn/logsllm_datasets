title:Blare Tools: A Policy-Based Intrusion Detection System Automatically
Set by the Security Policy
author:Laurent George and
Val&apos;erie Viet Triem Tong and
Ludovic M&apos;e
Blare Tools: A Policy-Based Intrusion Detection
System Automatically Set by the Security Policy
Laurent George, Val´erie Viet Triem Tong, and Ludovic M´e
SUPELEC, SSIR Group (EA 4039), Rennes, France
PI:EMAIL
Abstract. We present here an intrusion detection system automatically
parameterized by the security policy. The main idea consists in monitor-
ing information ﬂows in an operating system in order to detect those not
allowed by the security policy. In previous works ([1,2] and [3]), the se-
curity policy set at the initialization of the IDS and can not be updated.
We focus here on the dynamism of the security policy monitored.
A security policy deﬁnes the authorized behavior of users and applications in
a system, generally in terms of access rights (read/write). We use such a pol-
icy to infer a speciﬁcation of the reference behavior
for our IDS. The access
control policy is translated into an information ﬂow policy in which a piece of
information i is allowed to ﬂow into an information container c if there exists
at least one user allowed to read i and to write into c. Pieces of information
(or atomic information) in the system are characterized by the name of their
original container and the information ﬂow policy is a relation between atomic
information and containers of information. Once the information ﬂow policy P
is deﬁned, containers of information are tagged with three tags T I, T R and T W .
For a given container of information c, the ﬁrst tag T I lists atomic information
that are origins of the current content of c (1). T R is the set of elements in P
related to information listed in T I (2), the last tag T W lists all elements in P
related to c (3). At each observation of an information ﬂow, tags T I and T R are
updated to keep properties (1) and (2), the last tag never changes. An object
with disjoints tags T R and T W is a witness of an illegal information ﬂow and
generates an alert. Indeed, in this case, the pair (information, container) is not
in the deﬁned ﬂow policy. Consider now that the security policy is modiﬁed, for
instance a user u gaining a read access to an object o. In terms of information
ﬂows two interpretations are possible: u may now legally access to the original
contains of o or u may now legally access to information currently contained by
o. The two interpretations can be expressed as new element(s) added to P. The
IDS has to be updated since u can now legally access new atomic information
wherever these information are located. For that purpose, tags of relevant ob-
jects are updated. We have formally deﬁned an update mechanism and proved
that properties (1) and (2) still hold.
E. Kirda, S. Jha, and D. Balzarotti (Eds.): RAID 2009, LNCS 5758, pp. 355–356, 2009.
c(cid:2) Springer-Verlag Berlin Heidelberg 2009
356
L. George, V. Viet Triem Tong, and L. M´e
In our current implementation, objects are all ﬁles, sockets and memory ﬁles
of an operating system. Our IDS is composed of two consoles and a policy con-
troller. The read and write tags are implemented with a binary vector linked to
each object. The information tag is implemented with a sorted list of integers,
each integer being associated to an atomic information. The ﬁrst console, Blare,
observes information ﬂows between objects at the system level. Blare is a patch
for standard Linux kernel where any system call that engender information ﬂows
call our functions flow in and flow out. This two functions update the tags of
concerned objects and computes intersection of the tags T R and T W . An alert
is raised when empty. Blare provides tools in userspace: lsinfo (resp. setinfo)
to list (resp. to set) T I and findinfo to ﬁnd all the objects of the system con-
taining a subset of a list of atomic information. The second console JBlare is a
patch for the Java Virtual Machine and reﬁnes the view of Blare by observing
information ﬂow through method calls in Java programs. JBlare is responsible
of tags T R for objects output by a java program. The policy controller waits for
any access control changes. It translates these changes in terms of information
ﬂow policy and uses findinfo and setref to update the relevant tags. The
administrator uses the controller to declassify information if needed. In this case
the controller calls setinfo to rename informations and setref to attribute new
rights to these information.
With the Blare project and the Blare tools, we aim at proposing a set of col-
laborative tools able to monitor information ﬂows at several level of granularity.
Beside this practical objective, we also aims at building this tools upon a formal
intrusion detection model allowing to prove the completeness and soundness (for
information ﬂow observable at a given level) of the detection. We now envision
other tools to complete the set. For example, we aim at applying our model for
the monitoring of web services. Such services typically consist of an operating
system, a programming language runtime system (e.g. the JVM), an application
framework and the application software itself. We already have applied our ap-
proach to the ﬁrst two components. Now, we aims at studying its application
to the application framework. However, Since Web-services- based applications
are by nature distributed systems, it is necessary to analyse potential threats as
multi-step attack scenarios across multiple nodes and to adapt the model and
its implementation to such a context.
References
1. Zimmermann, J., M´e, L., Bidan, C.: Introducing reference ﬂow control for detecting
intrusion symptoms at the OS level. In: Wespi, A., Vigna, G., Deri, L. (eds.) RAID
2002. LNCS, vol. 2516, p. 292. Springer, Heidelberg (2002)
2. Zimmermann, J., M´e, L., Bidan, C.: An improved reference ﬂow control model for
policy-based intrusion detection. In: Snekkenes, E., Gollmann, D. (eds.) ESORICS
2003. LNCS, vol. 2808, pp. 291–308. Springer, Heidelberg (2003)
3. Hiet, G., Viet Triem Tong, V., M´e, L., Morin, B.: Policy-based intrusion detection
in web applications by monitoring java information ﬂows. In: 3nd International
Conference on Risks and Security of Internet and Systems (2008)