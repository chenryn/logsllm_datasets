# Title: Blare Tools: A Policy-Based Intrusion Detection System Automatically Set by the Security Policy

**Authors:**  
Laurent George, Valérie Viet Triem Tong, and Ludovic Mé  
SUPELEC, SSIR Group (EA 4039), Rennes, France  
Email: [PI:EMAIL]

## Abstract
This paper introduces an intrusion detection system (IDS) that is automatically parameterized by the security policy. The core idea is to monitor information flows within an operating system to detect any that are not permitted by the security policy. In previous work ([1,2] and [3]), the security policy was set at the initialization of the IDS and could not be updated. Our focus here is on the dynamic updating of the security policy.

A security policy defines the authorized behavior of users and applications in a system, typically in terms of access rights (read/write). We use this policy to infer a specification of the reference behavior for our IDS. The access control policy is translated into an information flow policy, where a piece of information \(i\) is allowed to flow into an information container \(c\) if there exists at least one user who is allowed to read \(i\) and write into \(c\). Information pieces (or atomic information) in the system are characterized by the name of their original container, and the information flow policy is a relation between atomic information and containers of information.

Once the information flow policy \(P\) is defined, information containers are tagged with three tags: \(T_I\), \(T_R\), and \(T_W\). For a given container \(c\), the first tag \(T_I\) lists the atomic information that are the origins of the current content of \(c\). The second tag \(T_R\) is the set of elements in \(P\) related to the information listed in \(T_I\), and the third tag \(T_W\) lists all elements in \(P\) related to \(c\). At each observation of an information flow, tags \(T_I\) and \(T_R\) are updated to maintain their properties, while \(T_W\) remains unchanged. An object with disjoint tags \(T_R\) and \(T_W\) indicates an illegal information flow and triggers an alert, as the pair (information, container) is not in the defined flow policy.

Consider a scenario where the security policy is modified, such as a user \(u\) gaining read access to an object \(o\). This can be interpreted in two ways: \(u\) may now legally access the original contents of \(o\) or the current contents of \(o\). Both interpretations can be expressed as new elements added to \(P\). The IDS must be updated since \(u\) can now legally access new atomic information wherever it is located. We have formally defined an update mechanism and proven that the properties of \(T_I\) and \(T_R\) still hold.

## Implementation
In our current implementation, objects include all files, sockets, and memory files of an operating system. The IDS consists of two consoles and a policy controller. The read and write tags are implemented using binary vectors linked to each object, while the information tag is implemented with a sorted list of integers, each associated with an atomic information.

The first console, Blare, monitors information flows between objects at the system level. Blare is a patch for the standard Linux kernel, where any system call that generates information flows calls our functions `flow_in` and `flow_out`. These functions update the tags of the concerned objects and compute the intersection of the tags \(T_R\) and \(T_W\). An alert is raised if the intersection is empty. Blare also provides user-space tools: `lsinfo` (to list \(T_I\)), `setinfo` (to set \(T_I\)), and `findinfo` (to find all objects containing a subset of a list of atomic information).

The second console, JBlare, is a patch for the Java Virtual Machine and refines the view of Blare by observing information flows through method calls in Java programs. JBlare is responsible for updating the \(T_R\) tags for objects output by a Java program. The policy controller waits for any access control changes, translates these changes into information flow policy updates, and uses `findinfo` and `setref` to update the relevant tags. The administrator can use the controller to declassify information, in which case the controller calls `setinfo` to rename information and `setref` to attribute new rights to this information.

## Future Work
With the Blare project and Blare tools, we aim to provide a set of collaborative tools capable of monitoring information flows at various levels of granularity. In addition to this practical objective, we also aim to build these tools upon a formal intrusion detection model, allowing us to prove the completeness and soundness of the detection for information flows observable at a given level. We envision other tools to complete the set, such as applying our model to the monitoring of web services. Such services typically consist of an operating system, a programming language runtime system (e.g., the JVM), an application framework, and the application software itself. We have already applied our approach to the first two components and now aim to study its application to the application framework. Since web service-based applications are inherently distributed systems, it is necessary to analyze potential threats as multi-step attack scenarios across multiple nodes and adapt the model and its implementation to such a context.

## References
1. Zimmermann, J., Mé, L., Bidan, C.: Introducing reference flow control for detecting intrusion symptoms at the OS level. In: Wespi, A., Vigna, G., Deri, L. (eds.) RAID 2002. LNCS, vol. 2516, p. 292. Springer, Heidelberg (2002)
2. Zimmermann, J., Mé, L., Bidan, C.: An improved reference flow control model for policy-based intrusion detection. In: Snekkenes, E., Gollmann, D. (eds.) ESORICS 2003. LNCS, vol. 2808, pp. 291–308. Springer, Heidelberg (2003)
3. Hiet, G., Viet Triem Tong, V., Mé, L., Morin, B.: Policy-based intrusion detection in web applications by monitoring Java information flows. In: 3rd International Conference on Risks and Security of Internet and Systems (2008)