Firefox
Apache
Lighttpd
nginx
CUPS
vim
elinks
alpine
zip
transmission
proftpd/
lftp/yafc
wget
ping
procps
raft [49]
Model Description
Tab Open/Switch/Close
Load a URI
Download (Save)
Click a link
HTTP(S) resp.
CGI resp.
HTTP(S) resp.
CGI resp.
HTTP(S) resp.
CGI resp.
Add printers
Remove printers
Modify printers
Print a doc.
Open
Edit
Save
Save As
Copy and Paste
Copy
Plug-in (gpg)
Browse
Save
Upload
Send emails
Send ﬁles
Download emails
Download ﬁles
Open a link
Compress ﬁle(s)
Use encryption
Download
Add a torrent ﬁle
Add a magnet
Login
Create directory
Delete directory
List directory
Upload
Download
Download (HTTP(S))
Option -f
Option -r
Get ﬁle system info.
Voting
Leader Election
-
Size1
7/9/5
12
15
9
17 (21)5
26 (33)5
8 (11)5
16 (19)5
14 (17)5
21 (24)5
6
5
6
7
8
10
13
15
14
11
21
11
6
7
10
13
9
11
8
16
6
17
6
12
5/4/6
4/4/4
3/4/4
3/3/3
7/8/18
6/7/16
7 (15)5
6
5
6
5
7
1/1/2
2/2/2
1/2/2
1/1/1
2/2/3
2/2/4
2 (4)5
2
2
3
2
2
2.4
4/3/4
3/3/3
3/3/3
3/3/3
5/5/9
5/6/9
5 (8)5
5
5
4
6
7
5.4
-
10.2
Average
1: # of nodes in a model. 2: # of explicit dependencies (edges) in a model.
3: # of implicit dependencies (edges) in a model. 4: Language Class of a model.
5: for HTTPS.
We have the following observations from the results. First,
the size of model is relatively small (on average 10.2 nodes)
and there are on average 2.4 explicit dependencies (more than
4 nodes) for each model. The strong presence of explicit
dependencies allows MCI to perform segmented parsing effec-
tively. Second, we observe three language complexity classes
and most models fall into the regular class. It supports our
design choice of integrating regular parsers (i.e., automata)
with explicit dependency tracking.
1) # of Models Required: The constructed models listed in
Table II are sufﬁcient to infer causality for logs from realistic
scenarios described in Sec. V-C including the motivation
example in Sec. II. The number of models for each program
ranges from 3 to 12 which is fairly small and not difﬁcult
to obtain in practice. We observe that the primary reason
why MCI
is effective with a small number of models is
model composibility, namely, primitive models can be used to
compose complex behaviors. For instance, models for “Edit”
and “Save” can compose a new model “Edit and Save”.
2) Efforts on Model Construction: To construct models,
a program is executed repeatedly on LDX. The number of
runs required to construct a model depends on the number
of events in the model. Speciﬁcally, we ﬁrst run a program
with a workload on LDX to identify all the events causally
11
2
Dexp
2/2/1
3
Dimp
3/4/3
3 (4)5
4 (5)5
2 (3)5
3 (4)5
3 (4)5
4 (5)5
8 (11)5
11 (14)5
4 (6)5
7 (9)5
6 (9)5
8 (11)5
2
3
2
1
1
1
2
1
1
2
3
3
1
2
3
2
2
2
3
2
2
2
8
4
4
3
3
4
5
3
3
3
3
4
5
4
4
6
6
5
6
6
5
5
6
7
6
5
4
5
3
8
3
7
Lang.4
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
C.F.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
Reg.
C.F.
C.S.
Reg.
dependent on the workload. Note that the detected events
constitute the bulk of the model. Assume there are n such
events (nodes). For each node in the model, MCI mutates the
value of the corresponding syscall to determine dependencies
on the node inside the model. To ﬁgure out the repetition
factors of the node (Sec. IV), MCI runs k times for the node,
each execution repeats the workload for different times. In
total, we run a program (k∗ n) + 1 times to construct a model.
In our experiments, k = 10. On average, the machine time to
construct a model, including LDX execution time and model
extraction time, takes 4 minutes (253 seconds).
B. System-wide Causality Inference
In this experiment, we apply MCI to infer causality on a
system wide syscall trace collected for the system execution of
a week, to demonstrate the effectiveness of causality inference
for realistic programs with production runs. The trace includes
syscall logs from multiple programs including those in Table II.
Speciﬁcally, we enable Linux Audit and use the programs in
Table II with typical workloads for a week. Given the collected
trace, we identify all
the inputs that appear in the trace