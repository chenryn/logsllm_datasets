from continuous data traces collected from physical ICS
testbeds.
D. Example of Event Sequence & Implementation
Motivating Example Figure 9 depicts how we apply a
generated event sequence to exercising PLC code of the
motivating example. In this chart, the x-axis represents time
(in seconds), which is ranging from Begin-of-Test (BOT) to
End-of-Test (EOT), and the y-axis denotes the list of events.
The effective duration of each event is illustrated as a thick
horizontal line, which begins with an empty circle and ends
with a Ô¨Ålled circle or a cross. The Ô¨Ålled circle means the event
is terminated by its sender, and the cross indicates it is disabled
due to PLC logic. The dotted part on a thick line represents the
possible range of starting point of an event. For instance, the
(cid:22)(cid:20)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
i } ‚Üê DIVIDEBYVAR(DTi)
, ..., DT vk
, DT v1
m} ‚Üê DT vp
i } do
, ..., DT vk
i
i
i
, timed(cid:2)
)
l+1
i
i
ET ‚Üê ‚àÖ
for ‚àÄDTi ‚àà DT do
ETi ‚Üê ‚àÖ
{DT v0
, DT v1
i ‚àà {DT v0
for ‚àÄDT vp
{d(cid:2)
1, ...d(cid:2)
0, d(cid:2)
l ‚Üê 0
for l  , ‚â•,
true, ¬¨, ‚àß, and ‚à® are deÔ¨Åned as usual.
The Temporal Operators can be either 1) next formula (cid:8)p
that asserts about a timed state sequence that the second state
in the sequence satisÔ¨Åes the proposition p, or 2) until formula
p1U p2 that asserts about a timed state sequence that there is a
state satisfying the proposition p2, and all states before this p2-
state satisfy the proposition p1. Additional temporal operators
are deÔ¨Åned as usual. In particular, the eventually operator ‚ô¶œÜ
stands for trueU œÜ, and the always operator (cid:3)œÜ stands for
¬¨‚ô¶¬¨œÜ.
The Freeze QuantiÔ¨Åer can be associated to a variable x as
‚Äúx.‚Äù and it freezes x to the time of the local temporal context.
F. Fischertechnik Testbed
This testbed is divided into four cells (Cell 1 to Cell 4),
each of which is equipped with a conveyor belt and one or two
IR sensors that detect the presence of parts and is controlled
by a PLC. The testbed contains two CNC machines (CNC
1 and CNC 2) located in Cell 2 and Cell 3 respectively.
Two rams (Ram 1 and Ram 2) are deployed to move parts
from Cell 1 to Cell 2 and from Cell 3 to Cell 4 respectively.
These CNC machines and rams are also controlled by separate
PLCs. In this testbed, a PLC is emulated by a Raspberry Pi
board running an OpenPLC server to execute PLC code. All
Raspberry Pi boards are connected together via Ethernet and
linked via Modbus.
The system starts when a part enters the manufacturing line
from Cell 1 and is passed to Cell 2 by Ram 1 for the operation
processed by CNC 1. The part is then moved to Cell 3 for the
operation processed by CNC 2. When both CNC operations
(cid:22)(cid:20)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
inter-device communication help reduce the number of possi-
ble permutations from 13700 to 898 (without taking time into
account). Then, we proceed to the temporal property mining
process that produces time correlation and temporal invariants
for the events. In this case, process times, TCN C1 P rocess and
TCN C2 P rocess, from both CNC machines are obtained, which
are associated to the time durations for Process Start ‚Üí
Process End of both CNCs. With these time invariants being
considered, the number of permutations becomes 6442, 24358
and 79818 for VETPLC-TSEQS-2, VETPLC-TSEQS-5 and
VETPLC-TSEQS-10, respectively.
In this case, CNC 1 process time, TCN C1 P rocess, ranges
from 3 to 8 seconds and CNC 2 process time, TCN C2 P rocess,
ranges from 2 to 7 seconds. As mentioned above, anomalies
may occur when either CNC 2 takes longer to Ô¨Ånish its task
or CNC 1 discharges a part earlier. Under either circumstance,
it is possible that the part discharged from CNC 1 arrives in
CNC 2 before the precedent part originally in CNC 2 fully
leaves the cell. As a result, the successive part may collide
with the preceding part as well as CNC 2 and cause safety
issues. This violates the safety speciÔ¨Åcation, (cid:3)(CNC Busy ‚Üí
¬¨‚ô¶Part Arrival), that indicates that a part must not arrive
at a CNC when it is in a busy state. Through VETPLC-TSEQS
test processes, the system determines that this violation may
occur when CNC 1 is running at a speed from 3273 rpm
to 6000 rpm and CNC 2 is running at a speed from 1714
rpm to 2667 rpm with VETPLC-TSEQS-2. The same violation
can also be captured using VETPLC-TSEQS-5 and VETPLC-
TSEQS-10 with higher precision with respect to the error-
triggering speed ranges (see Table IV for details).
	
 

	
 


	
 

	


	
 

	


	
 

	
 


	


	

	
 






	


	


	

	
 


	


	



	
 

	
Fig. 11: A TECG of Case #7 (CNC-Part Collision)
are complete, the part is transferred to the conveyor in Cell 4
by Ram 2 and leaves the testbed.
It is possible to place multiple parts on the testbed at the
same time and process the parts sequentially. However, due
to physical limitations in the testbed (e.g., limited length for
the conveyor belt, long operation time for the rams and CNC
machines), restrictions should be taken into account when
developing the control logic.
G. Case Study on Scenario #7 CNC-Part Collision
Description. This case focuses on the section where a part
is processed by CNC 1 and to be transferred to CNC 2. Since
the testbed has a linear setup, the design and deployment of
the CNC machines are based upon an assumption: when a
CNC Ô¨Ånishes an operation and is ready to discharge a part, its
successive CNC should also be ready to receive the part ‚Äì this
avoids a downgrade in system throughput due to congestion in
the linear model. That is, in this case, CNC 2 is expected to be
ready (i.e., the preceding part has been discharged from CNC
2) when CNC 1 Ô¨Ånishes a process and discharges a part. In a
normal manufacturing run, CNC 2 sends a signal to PLC when
a part is processed. PLC then activates Conveyor 3 to transfer
the part from CNC 2 to the next cell (Ram 2). Similarly, when
a part is processed by CNC 1, Conveyor 2 and 3 are activated
by PLC to transfer the part from CNC 1 to CNC 2.
A potential issue may occur in this linear setup when the
aforementioned assumption no longer holds due to changes in
time correlation between CNC machines. This could happen
either because of a worn-out component in a CNC that leads to
a longer CNC cycle time or a careless change in manufacturing
plan (e.g., an operator speeds up the conveyor with a desire
for higher production performance).
Safety Vetting. Using the proposed analysis method, we
Ô¨Årst construct the TECG (as shown in Figure 11) by analyzing
the PLC and CNC code. In this case, the correlation between
the two CNC machines and PLC can be revealed in this step.
From this TECG, we can determine that the event CNC2 -
Process is followed by the event CNC2 Finished and
the event CNC1 Process is followed by the event CNC1 -
Finished. These event dependencies discovered from the
(cid:22)(cid:20)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply.