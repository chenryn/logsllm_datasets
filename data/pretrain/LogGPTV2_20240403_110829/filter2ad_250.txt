title:Remotely Gauging Upstream Bufferbloat Delays
author:Chiara Chirichella and
Dario Rossi and
Claudio Testa and
Timur Friedman and
Antonio Pescapè
Remotely Gauging Upstream Bufferbloat Delays
C. Chirichella1, D. Rossi1, C. Testa1, T. Friedman2, and Antonio Pescapé3
1 Telecom ParisTech.
PI:EMAIL
2 UPMC Sorbonne Universites
PI:EMAIL
3 Univ. Federico II
PI:EMAIL
Abstract. “Bufferbloat” is the growth in buffer size that has led Internet delays
to occasionally exceed the light propagation delay from the Earth to the Moon.
Manufacturers have built in large buffers to prevent losses on Wi-Fi, cable and
ADSL links. But the combination of some links’ limited bandwidth with TCP’s
tendency to saturate that bandwidth results in excessive queuing delays. In re-
sponse, new congestion control protocols such as BitTorrent’s uTP/LEDBAT aim
at explicitly limiting the delay that they add over the bottleneck link. This work
proposes and validate a methodology to monitor the upstream queuing delay ex-
perienced by remote hosts, both those using LEDBAT, through LEDBAT’s native
one-way delay measurements, and those using TCP (via the Timestamp Option).
1 Problem Statement
As a recent CACM article points out, “Internet delays now are as common as they are
maddening” [3]. Currently, the combination of excessive buffer sizes (aka bufferbloat),
with TCP’s congestion control mechanism (which forces a bottleneck buffer to ﬁll and
generate a loss before the sender reduces its rate), queuing delays can potentially reach
a few seconds [8]. This is conﬁrmed by recent studies such as [5], showing that most
home gateways have a ﬁxed buffer size, irrespective of the uplink capacity. With ca-
ble and ADSL modem buffers ranging from, on average, 120 KB to a maximum of
365 KB [5], and common uplink rates of 1 Mbps, worst case queuing delays can range
from 1 second on average to a maximum of 3 seconds.
To counter this problem, BitTorrent developers have proposed IETF LEDBAT [9] as
a TCP replacement for data transfer. Like TCP, LEDBAT maintains a congestion win-
dow – but whereas mainstream TCP variants use loss-based congestion control (grow-
ing with ACKs and shrinking with losses), LEDBAT estimates the queuing delay on the
bottleneck link and tunes the window size in an effort to achieve a target level of queu-
ing delay (100ms by default). By explicitly capping the queuing delay, LEDBAT aims
at protecting VoIP [2] and other interactive trafﬁc (e.g., Web, Gaming) by congestion
self-induced by other trafﬁc of the same user.
Although TCP’s loss-based congestion control, coupled with large buffers, can clearly
cause signiﬁcant bufferbloat delays, it is unclear how often this happens in practice, and
how badly it hurts user performance. Indeed, active approaches such as Netalyzer [8],
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 250–252, 2013.
c(cid:2) Springer-Verlag Berlin Heidelberg 2013
Remotely Gauging Upstream Bufferbloat Delays
251
A
ttx,i-1
trx,i
ttx,i+1
i:
ttx,i
trx,i-1
 - 
ttx,i-1
i+1:
ttx,i+1
 - 
trx,i
ttx,i
(a)
B
trx,i-1
ttx,i
trx,i+1
Inferred
Expected (kernel)
Expected (UDPing)
 150
 100
 50
 0
]
s
m
[
y
a
l
e
d
g
n
i
u
e
u
Q
 6000
 4000
 2000
 0
 6000
 4000
 2000
 0
 6000
 4000
 2000
 0
 0
 20
 80
 100
 40
 60
time [s]
(b)
,
T
A
B
D
E
L
(
)
d
e
g
g
o
l
k
c
a
B
,
P
C
T
(
)
p
r
i
h
C
,
P
C
T
(
)
d
e
g
g
o
l
k
c
a
B
Fig. 1. Bufferbloat measurement methodology: illustration (left) and validation (right)
likely overestimate bufferbloat delay – by purposely ﬁlling the pipe, Netalyzer learns
the maximum bufferbloat delay, but not its typical range. To counter this limitation, we
design and validate a passive methodology for inferring the queuing delays encountered
by remote LEDBAT and TCP hosts.
2 Methodology
We estimate queuing delay by collecting one-way delay (OWD) samples, establishing
the minimum as a baseline delay, and then measuring the degree to which a sample
differs from the baseline. This is a classic approach used in congestion control to drive
congestion window dynamics since the late 1980s [7]. Our innovation is to demonstrate
how a passive observer of LEDBAT or TCP trafﬁc can use this approach to estimate the
uplink delays experienced by a remote host.
To infer B queues, in our methodology an observer close to A sniffs the packets
and performs the same state updates as does the LEDBAT congestion control protocol
running on A. Our methodology is to sniff and inspect LEDBAT and TCP packets, and
mimick the way the LEDBAT sender computes queuing delay based on header ﬁelds.
Fig. 1(a) illustrates the methodology. On reception of a new packet, the receiver cal-
culates the OWD as the difference between its own local clock and the sender “times-
tamp” (the latter extracted from packet header1), and sends this “ack.delay” value back
to the sender (using another header ﬁeld). At each packet reception, the observer up-
dates the base delay βBA as the minimum over all OWD B → A samples:
βBA = min(βBA, tA
qB
i = (tA
rx,i − tB
rx,i − tB
tx,i) − βBA
tx,i),
(1)
(2)
Then, the queuing delay qB
i
from the timestamp difference carried in packet i+1.
incurred by packet i can be inferred by subtracting βBA
Omitted here for lack of space but reported in [4], the methodology also applies to
TCP trafﬁc provided that the ﬂow has the Timestamps Option [6] enabled. This means
1 In the absence of a ﬁnalized LEDBAT standard, our protocol parser is based on BitTorrent’s
currently implemented BEP-29 deﬁnition [1].
252
C. Chirichella et al.
the observer must either be one of the hosts, work in cooperation with one of the hosts,
or opportunistically measure only those ﬂows that have this option enabled.
3 Validation
We validate our methodology in Fig. 1(b), reporting testbed results with two ground
truths: (i) kernel level queue logs (hacking the sch_print function of the netem
emulator) and (ii) UDP ping-like measurements (as queuing occurs only at B, we have
i = RT Ti − minj(cid:2)iRT Tj).
qB
Host B has an ongoing backlogged LEDBAT ﬂow to A (top plot), with possibly in-
terfering on/off TCP (middle) or backlogged-TCP (bottom) trafﬁc models. As expected,
in the LEDBAT case queuing reaches the 100 ms target speciﬁed in the draft (top). In
the on/off case, queuing can possibly grow very large depending on the amount of
cross TCP trafﬁc (middle). Finally, queuing delay attains the maximum value, that Ne-
talyzer [8] would report, under backlogged TCP (bottom). In all cases, we see that our
methodology is very reliable agains both ground truths (differences are on the order of
1 packet worth of queuing delay for LEDBAT).
In a typical scenario, however, the observer O will be able to observe only part of the
trafﬁc generated by the host of interest B (say, the trafﬁc B → A), but will miss another
part (say, B → C). Omitted here for lack of space but reported in [4], our validation
shows the methodology to be accurate even in case the observer O has only a partial
view of B trafﬁc: the error in the inferred measure is negligible in cases where a sizable
amount of trafﬁc makes it to the observer, but is still robust and reliable even when the
observer is able to sniff only very few samples.
Acknowledgement. This work has been carried out at LINCS http://www.lincs.
fr and funded by the FP7 mPlane project (grant agreement no. 318627).
References
1. http://bittorrent.org/beps/bep_0029.html
2. ITU Recommendation G.114, One Way Transmission Time.
3. Cerf, V., Jacobson, V., Weaver, N., Gettys, J.: Bufferbloat: what’s wrong with the internet?
Communications of the ACM 55(2), 40–47 (2012)
4. Chirichella, C., Rossi, D., Testa, C., Friedman, T., Pescape, A.: Passive bufferbloat measure-
ment exploiting transport layer information (2012),
http://www.enst.fr/ drossi/dataset/
bufferbloat-methodology/techrep.pdf
5. DiCioccio, L., Teixeira, R., May, M., Kreibich, C.: Probe and Pray: Using UPnP for Home
Network Measurements. In: Taft, N., Ricciato, F. (eds.) PAM 2012. LNCS, vol. 7192, pp.
96–105. Springer, Heidelberg (2012)
6. Jacobson, V., et al.: TCP Extensions for High Performance. IETF RFC 1323 (1992)
7. Jain, R.: A delay-based approach for congestion avoidance in interconnected heterogeneous
computer networks. ACM SIGCOMM CCR 19(5), 56–71 (1989)
8. Kreibich, C., Weaver, N., Nechaev, B., Paxson, V.: Netalyzr: Illuminating the edge network.
In: ACM Internet Measurement Conference, ACM IMC 2010 (2010)
9. Shalunov, S., et al.: Low Extra Delay Background Transport (LEDBAT). IETF draft (2010)