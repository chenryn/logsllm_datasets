First, their availability is much lower compared to servers, since client
machines are under the control of users, which can turn their machines oﬀ
frequently, reboot them or take them to a diﬀerent place with a diﬀerent
or with no network connection. As a consequence, a much higher level of
redundancy is required compared to servers. For example, three redundant
servers can be suﬃcient to increase the availability of a system since the
probability of a simultaneous failure of all three servers is rather low.
In
contrast to this, distributing a critical service over three peers is completely
unacceptable, since the chance of three peers being oﬄine simultaneously
is too high. In addition to the higher chance of a peer being unavailable,
peers also enter and leave the system in a much higher frequency compared
to servers, which only crash with a rather low probability. The reduced
availability and the higher frequency of entering and leaving leads to much
higher eﬀort in keeping distributed data in a consistent state. In addition to
78
CHAPTER 5. SYSTEM ARCHITECTURE
this, the risk of having outdated data is much higher in a peer-to-peer system,
due to the higher frequency of peers entering and leaving the system. The
last aspect is very critical for our system, since access control decisions must
not be performed based on outdated data.
The second and more critical drawback for our regards is the much lower
level of trust of peers, which are under the control of a user. In our system
architecture, we have a lot of sensitive information and critical services, which
should not be executed on a machine with a low level of trust. Although, the
reduced level of trust can be compensated to some degree with additional
security mechanisms, e.g., encryption and integrity measurement, the risk of
data or services being manipulated by the user of a peer is still much higher
compared to a server.
Choosing One Approach
Having the previous discussion in mind, we decide to design our system using
the client-server approach, which has two advantages compared to the peer-
to-peer approach. The ﬁrst advantage is, that the complexity is much lower,
since we need no mechanisms to secure the distributed storage of data, which
otherwise could be easily manipulated by the user of a peer. Moreover, we do
not need mechanisms to prevent the manipulation of computations performed
on a peer. The second advantage is, that performing security relevant services
on a dedicated server leads to a higher level of security, because servers have
better properties in terms of security, e.g., servers must not be physically
exposed to users, which might have an interest to manipulate that machine.
Moreover, servers typically use a smaller set of software compared to client
machines which are often used for a variety of diﬀerent tasks. A smaller set
of software usually has less vulnerabilities. Nevertheless, we are conﬁdent
that our architecture can be implemented using the peer-to-peer approach.
5.3.2 Client-Server Approach
After we have decided that we want to use the client-server approach to
design our architecture as a distributed system, there are still some open
design decisions concerning the resulting architecture. For every component
we must decide whether we want to implement it on the client side or on the
server side. Obviously, we achieve the highest level of security if we imple-
ment all these components on the server. Nevertheless, we want to discuss
the alternative combinations to show their individual beneﬁts. Table 5.1
summarizes the components of our architecture and describes their function.
5.3. DISTRIBUTED SYSTEM ARCHITECTURE
79
Component
User Database
Document Database
Copy Database
Rule Database
User Interface
Document Processor
Policy Enforcement Point
Policy Decisions Point
Description
Stores user credentials and role hierarchy
Stores documents
Stores is-copy-of relation between documents
Stores the access control rules
Presents document and oﬀer commands
Executes commands for editing a document
Interrupts commands and queries PDP
Evaluates access control rules
Table 5.1: Components of our system architecture
As discussed above, we consider the client to be less secure than the
server. Moreover, implementing one or more of the database on the client
side, would give the system the character of a peer-to-peer system. As we
discussed above, we do not want this. As a consequence, the four databases
of our system should be implemented on the server side. The user interface
must be implemented on the client side, since it is used to communicate with
the user. The document processor can be implemented either on the client
side or on the server side. If the document processor runs on the client, we
must deﬁne that the document processor only operates on the documents
of the corresponding user, to eliminate the risk of lost conﬁdentiality. Since
the policy enforcement point is tightly bound to the document processor it
should be implemented on the same side as the document processor. The
policy decision point can be implemented on the client side, too. In that case,
we must deﬁne that it evaluates only rules concerning the corresponding user.
Alternatively, the policy decision point can also be implemented on the server
side. We summarize these options in Table 5.2.
If several components are implemented on the server side, it is not re-
quired that these components share one physical machine.
Instead each
component can be installed on a diﬀerent machine and communicate with
the other components using a communication network. Distributing compo-
nents over several physical machines can help to improve the performance of
the system.
Finally, we must decide on which side the document processor, the pol-
icy enforcement point and the policy decision point should be implemented.
These decisions cannot be made independent of each other. Instead, we have
to examine the dependencies between these components. For instance, the
policy enforcement point is not a component itself, instead it is only a com-
ponent in an abstract view of the system. In fact, the policy enforcement
point is an an irremovable aspect of the document processor. As a conse-
80
CHAPTER 5. SYSTEM ARCHITECTURE
Side
Component
Server
User Database
Server
Document Database
Server
Copy Database
Server
Rule Database
Client
User Interface
Document Processor
Server or Client
Policy Enforcement Point Server or Client
Server or Client
Policy Decisions Point
Table 5.2: Possible sides to implement the components
quence, the policy enforcement point and the document processor are always
implemented on the same side.
Combination 1: DP and PDP on the client
The ﬁrst combination is to implement both document processor and policy
decision point on the client side. This combination requires a trustworthy
client, because the client calculates policy decisions for documents that the
user of the platform wants to access. As a result, the interest to perform
a manipulation is high. Moreover, the access control rules must be trans-
ferred to the client, because they are required to evaluate the rules. This
requirement has two disadvantages. First, the rules can contain conﬁden-
tial information, which should not be exposed to the user of the client. For
example, rules which deny the viewing of some top secret information can
reveal the existence of that information, which might not be acceptable. To
solve this problem, the rules can be sent encrypted to the client, but they
must be decrypted to process them. While the rules are decrypted, the risk
of information leakage is high. Second, this approach is not eﬃcient in terms
of storage and memory consumption. When the rules are transferred to the
client, we cannot decide easily which rules might aﬀect the documents of
the client. As a consequence, we must send all rules to every client. As a
result, the storage and memory requirement of the rules is multiplied by the
number of clients of the system. In this combination, the client needs the
computational resources to evaluate the rules. This increases the demand of
resources on the client side, but reduces the requirements of the server.
5.3. DISTRIBUTED SYSTEM ARCHITECTURE
81
Combination 2: DP on the client and PDP on the server
The second combination is to implement the document processor on the client
and the policy decision point of the server. In this combination, the rules
are not sent to the client, which removes two of the disadvantages discussed
above.
In this case, secret information in the rules is not revealed to the
client and the clients do not need additional resources to store and process
the rules. This combination has still a drawback concerning eﬃciency. The
document processor and the policy decision point need access to the cur-
rent document. The policy decision point requires access to the complete
document to evaluate the rules, whereas the document processor only needs
that part of the document that is accessible for the current user. The disad-
vantage of this approach is that these two version of the document must be
synchronized over a communication network, because both versions reside on
a diﬀerent machine. As a result, a lot of the eﬃciency of this combination is
lost, because the latency of the communication network seriously degrades
performance. We illustrate the steps for performing an operation in Figure
5.2, where “S” is the abbreviation for the server and “C” is short for the
client. The direction of the communication is indicated by an arrow.
S : Evaluate rules
1. C → S : Request to perform operation
2.
3. C ← S : Send “allow” to client
4. C
5. C → S : Send censored document to server
6.
7.
8.
9. C ← S : Send new censored version to client
10. C
12. C
: Calculate new view of censored version
: Present view to user
: Perform operation on censored document
S : Check whether client performed valid operation
S : Merge censored version with the uncensored version
S : Evaluate rules to calculate new censored version
Figure 5.2: Protocol steps for performing an operation in Combination 2
In step one, the client requests to perform a speciﬁc operation on the
document. Then, the server evaluates the rules to answer the request. In
this example, we assume that the operation is allowed. Consequently, the
server sends “allow” to the client. The client performs the operation on
the document, which leads to a new version of his censored version of the
document. We refer to the version of the document on the client as censored
version, because some nodes might be removed due to missing permissions to
view them. In contrast to the client, the server keeps the full version of the
82
CHAPTER 5. SYSTEM ARCHITECTURE
document, which includes the nodes the client is not allowed to see. Next,
the client sends the updated censored version to the server. The server checks
whether the client performed a valid operation. Next, the server merges the
censored version of the document with the full version of the document and
then evaluates the rules to calculate a new view for the client. After that,
the server sends the new censored version to the client. The client calculates
a view of the censored version, which can have a diﬀerent representation as
the internal one, e.g., a graphical representation or a text representation.
Finally, the UI on the client side presents the view to the user.
We have described this process to illustrate that the implementation of
document processor and policy decision point on diﬀerent side leads to a
signiﬁcant overhead. We will show that these disadvantages can be avoided
by using Combination 4, which implements both components on the server.
But ﬁrst, for the sake of completeness, we will discuss Combination 3, which
is the least favorable one.
Combination 3: DP on server and PDP on the client
The third combination is to implement the document processor on the server
and the policy decision point on the client. This combination combines the
disadvantages of having the policy decision point on the client side with
the disadvantages of implementing document processor and policy decision
point on diﬀerent machines. As a consequence, this combination is the least
preferable one.
Combination 4: DP and PDP on the server
In Combination 4, we implement both document processor and policy deci-
sion point on the server, which has two advantages. First, it removes the
overhead of performing the communication between document processor and
policy decision point over a communication network as we illustrated in Com-
bination 2. Second, having both components on the server side, leads to the
highest level of security, since all security relevant components are imple-
mented on the server. As we argued above, we consider that the server has
a much higher protection level than the client. To illustrate the beneﬁts of
avoiding the overhead of Combination 2 and to describe the ﬁnal protocol,
we depict the protocol steps to perform an operation in Combination 4 in
Figure 5.3.
The ﬁrst two steps in this combination are identical to the protocol steps
of the protocol of Combination 2. In step three, we can avoid communication
overhead by not having to send the result of the rule evaluation back to the
5.3. DISTRIBUTED SYSTEM ARCHITECTURE
1. C → S : Request to perform operation
2.
3.
4.
5.
6. C ← S : Send view to client
: Present view to user
7. C
S : Evaluate rules
S : Perform operation on uncensored version
S : Evaluate rules to calculate new censored version
S : Calculate new view of censored version
83
Figure 5.3: Protocol steps for performing an operation in Combination 4
client. As above, we assume that the result is to allow the requested opera-
tion. In step three, we can avoid to perform the operation on the censored
version and to merge this version with the uncensored version, because the
server is allowed to operate on the uncensored version. After this, we evaluate
the rules to retrieve a censored version of the document and to create a view
for the current user for it. If we do this on the server, we can also perform
the view creation directly in one step. Finally, the view is sent to the client
and presented to the user. In total, we have saved communication overhead
by reducing the communication steps by half and to avoid at least 4 steps in
the protocol. On the downside, this combination leads to a high amount of
computations on the server. We will show in the performance evaluation in
Chapter 7 that the resource requirements for the server are acceptable.
Comparison of the combinations
It depends on the requirements of the scenario to choose one of the four
combinations. We have summarized the properties of these combinations
in Table 5.3. In this table, we have listed each combination in a diﬀerent
row and have rated its level of security and its eﬃciency. The second and
third column indicate on which side the document processor and the policy
decision point is implemented. Additionally, we have listed the requirements
on the server and on the client. These requirements include both the level of
security as well as the amount of resources the corresponding machine should
have, e.g., high requirements on the client mean that the client should have
a high amount of resources and a high level of security.
Implementing the policy decision point on the client introduces high risks
of compromising the conﬁdentiality of documents of the system and the rules.
To evaluate the rules for one document the policy decision point must also
access the documents which contain nodes that are in is-copy-relation with
node of the currently processed document. As a consequence, a successful at-
tack on the policy decision point on the client can lead to unlimited access to
84
CHAPTER 5. SYSTEM ARCHITECTURE
DP PDP Security Eﬃciency Requ. Client Requ. Server
C1 C
C2 C
C3
S
S
C4