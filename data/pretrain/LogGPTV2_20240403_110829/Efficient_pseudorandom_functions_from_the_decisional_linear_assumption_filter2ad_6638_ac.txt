follows. We let x = x1x2 . . . xn denote the input bit string.
Evaluation(x, SK) → f (x)
Initialize variables a and b in Zp as a = y0, b = z0.
For i from 1 to n do:
If xi = 0, set a = a and b = b.
If xi = 1, set a = ayi + bzi and b = awi + bvi.
Output f(x) = ga.
For the step when xi = 1, the new values of a and b are both deﬁned in terms of
the old values of a and b, i.e. we do not ﬁrst update a and then use the updated value
of a in updating b. Technically, our pseudorandom functions deviate slightly from
deﬁnition 1, since diﬀerent functions in Fn will have diﬀerent groups as their ranges.
As Naor and Reingold note, this does not pose a problem in many applications.
Alternatively, one can get all of the functions in Fn to have the same range by using
suitable families of hash functions [23].
We note that our Evaluation algorithm is very eﬃcient:
it performs at most
4n multiplications in Zp, 2n additions in Zp, and one exponentiation in G. This
construction is a generalization of the construction in [23], which was proven to
be pseudorandom under the DDH Assumption. In the next section, we will further
generalize the construction to be pseudorandom under the k-Linear Assumption for
each k ≥ 1. But ﬁrst, we give a proof for this special case of k = 2.
3.2 Security
Theorem 8 Under the Linear Assumption, this function ensemble is pseudoran-
dom.
Proof. We ﬁrst note that f can be equivalently deﬁned by the following (less
eﬃcient) algorithm:
Ineﬃcient Evaluation(x, SK) → f (x)
Initialize variables A and B in G as A = gy0, B = gz0.
For i from 1 to n do:
If xi = 0, set A = A and B = B.
If xi = 1, set A = AyiBzi and B = AwiBvi.
Output f(x) = A.
8
We note that one would not actually compute f this way in practice, but using
this algorithm yields the same function values as the more eﬃcient algorithm we
gave above. (To see this, note that A has replaced ga and B has replaced gb. We
are simply performing exponentiations now as we go along instead of waiting until
the end.) We describe f in this alternative way because it is more convenient for
our proof, and it also reveals the relationship between our construction and the
GGM construction.
We recall that we deﬁned our pseudorandom generator G as:
Gg0,gc,gd,ge,gf (A, B) = (A, B, AcBd, AeBf ).
We can now see that our construction is formed by using G in the GGM construc-
tion, where at each level we use a new c, d, e, f:
f(x) = G
xn
g,gyn ,gzn ,gwn ,gvn
(··· (G
x1
g,gy1 ,gz1 ,gw1 ,gvn
(gy0, gz0))··· ).
We prove this is a pseudorandom function family using the hybrid technique.
We begin by deﬁning a sequence of games: Game 0, Game 1, . . . , Game n. Each
game consists of a challenger and an attacker. The attacker can query the challenger
for values of a function on inputs x = x1 . . . xn that it chooses.
Game j The challenger ﬁxes random values
yj+1, zj+1, wj+1, vj+1, . . . , yn, zn, wn, vn ∈ Zp.
The challenger answers queries for input x’s by setting A and B to be random
functions of the ﬁrst j bits of the input and then following the iterative procedure
above for i from j + 1 to n. It then outputs the ﬁnal value of A as the answer to
the query. The attacker must output either 0 or 1.
We note that in Game 0, the challenger is implementing a function from our
function family and in Game n, the challenger is implementing a truly random
function. Thus, our function family is pseudorandom if and only if Game 0 cannot
be distinguished from Game n (with non-negligible advantage) by any polynomial
time attacker.
So if our functions are not pseudorandom, then there exists a probabilistic
In other words, we
algorithm D which can distinguish Game 0 from Game n.
suppose
|P r[D = 1|Game n] − P r[D = 1|Game 0]| = ,
where  > 0 is non-negligible. We then observe:
 =
P r[D = 1|Game j + 1] − P r[D = 1|Game j]
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)n−1(cid:88)
j=0
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) .
By the triangle inequality, this implies that there exists j such that:
|P r[D = 1|Game j + 1] − P r[D = 1|Game j]| ≥ 
n
.
Since  is non-negligible, 
guishes some pair of adjacent games j and j + 1.
n is non-negligible. So we can assume that D also distin-
9
The heart of our construction is the pseudorandom generator which takes input
A, B and expands it to 4 elements: A, B, AyiBzi, AwiBvi. We will ﬁrst show that
if our construction is not pseudorandom, then this generator is not pseudorandom
either. More precisely, we will show that if there is a probabilistic algorithm D able
to distinguish Game j from Game j+1 for some j, then there is another probabilistic
algorithm M which can distinguish samples of the form (A, B, AyiBzi, AwiBvi) from
uniformly random 4-tuples. To state this formally, we deﬁne two additional games.
We call them Game 1 and Game 3 because they will later appear as parts of a three
game hybrid.
Game 1 An attacker queries the challenger for 4-tuples in G. Each time the
challenger responds by sending a new 4-tuple (A, B, C, D) uniformly chosen in G4.
Game 3 An attacker queries the challenger for 4-tuples in G. The challenger
chooses elements y, z, w, v uniformly from Zp and keeps these ﬁxed. For each
query, the challenger chooses elements A, B uniformly from G and responds with
(A, B, AyBz, AwBv).
Lemma 9 Suppose there is an algorithm D such that
|P r[D = 1|Game j + 1] − P r[D = 1|Game j]| ≥ .
Then there exists an algorithm M such that
|P r[M = 1|Game 1] − P r[M = 1|Game 3]| ≥ .
i Bv
i
i , Di = Aw
Proof. Suppose that M receives t 4-tuples (A1, B1, C1, D1), . . . , (At, Bt, Ct, Dt),
where t is an upper bound on the number of queries that D makes. These 4-tuples
are either all uniformly random in G × G × G × G, or Ai, Bi are uniformly random
and Ci = Ay
for all i. (Note that y, z, w, v are ﬁxed and do not
i Bz
It is M’s task to distinguish between these two cases. M will
change with i.)
accomplish this task by simulating the challenger in Game j or Game j + 1 and
calling on D.
M starts the simulation by choosing yj+2, zj+2, wj+2, vj+2, . . . , yn, zn, wn, vn ∈
Zp randomly. When D queries M with input x = x1 . . . xn, M deﬁnes (cid:96)(x) :
{0, 1}j → [t] to be an injective function of the ﬁrst j bits of x. If xj+1 = 0, M sets
A = A(cid:96)(x) and B = B(cid:96)(x) (these values are taken from the 4-tuples M has been
given). If xj+1 = 1, M sets A = C(cid:96)(x) and B = D(cid:96)(x). M then follows the iterative
procedure from our construction for steps j + 2 to n and outputs the ﬁnal value of
A.
We note that if the 4-tuples M has received are uniformly random, then M has
simulated game j + 1. If instead Ci = Ay
for all i, then M has
simulated game j with yj+1 = y, zj+1 = z, wj+1 = w, and vj+1 = v. So if M
outputs 1 when D outputs 1, we have:
i , Di = Aw
i Bv
i
i Bz
|P r[M = 1|Game 1] − P r[M = 1|Game 3]|
= |P r[D = 1|Game j + 1] − P r[D = 1|Game j]| = .
(cid:3)
10
To complete our proof of Theorem 8, we show that the existence of such an M
violates the Linear Assumption. To do this, we once again use the hybrid technique.
This time, we only need 3 games. Games 1 and 3 are deﬁned as before, but we
include them below for completeness.
Game 1 M is given samples of the form (A, B, C, D) which are uniformly random
in G4.
Game 2 M is given samples of the form (A, B, AyBz, D), where A, B, D are
uniformly random in G and y, z are ﬁxed.
Game 3 M is given samples of the form (A, B, AyBz, AwBv) where A, B are
uniformly random in G and y, z, w, v are ﬁxed.
We suppose that
|P r[M = 1|Game 1] − P r[M = 1|Game 3]| = .
This means that at least one of the following must hold:
(1)
(2)
|P r[M = 1|Game 1] − P r[M = 1|Game 2]| ≥ 
2 ,
|P r[M = 1|Game 2] − P r[M = 1|Game 3]| ≥ 
2 .
2 in deciding the Linear problem.
Lemma 10 If either (1) or (2) holds, then there exists an algorithm N with
AdvN ≥ 
Proof. We suppose that (1) holds (i.e. M can distinguish between Game 1 and
Game 2). We will show how to deﬁne the algorithm N to break the Linear As-
0 ∈ G
sumption. The Linear challenger gives N an instance g0, g1, g2, gr1
of the Linear problem. N calls M. Each time M requests a 4-tuple, N uses
Lemma 1 to generate a new instance of its Linear problem. From this instance,
0 ∈ G, N creates a 4-tuple (A, B, C, D) by setting A = gr(cid:48)
2 , gr(cid:48)
g0, g1, g2, gr(cid:48)
1 ,
B = gr(cid:48)
0 , and setting D randomly. If the original r0 is uniformly random,
then the Linear attacker has simulated Game 1. If r0 = r1 + r2, then the Linear
attacker has simulated Game 2 with y and z such that gy
2 = g0. (Note
that these values of y and z are uniformly random in Zp because g0, g1, g2 were
chosen uniformly randomly from G.) Hence, if N outputs “yes” when M outputs
1 , gr(cid:48)
2 , C = gr(cid:48)
1 = g0 and gz
1 , gr2
2 , gr0
1
1
2
2
0
0
1, we will have:(cid:12)(cid:12)(cid:12)P r[N = “yes”|r0
R←− Zp] − P r[N = “yes”|r0 = r1 + r2]
= |P r[M = 1|Game 1] − P r[M = 1|Game 2]| ≥ 
2 .
(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12) ≥ 
2 .
Similarly, if (2) holds (i.e. M can distinguish between Game 2 and Game 3),
then N sets y and z randomly and generates 4-tuples (A, B, C, D) by setting A =
gr(cid:48)
1 , B = gr(cid:48)
0 . If r0 is random, this is Game 2. If r0 = r1 + r2,
this is Game 3. In both cases, we have shown that we obtain an N such that
2 , C = AyBz, D = gr(cid:48)
1
2
0
(cid:12)(cid:12)(cid:12)P r[N = “yes”|r0
R←− Zp] − P r[N = “yes”|r0 = r1 + r2]
11
(cid:3)
Putting it all together, we have shown that if our function ensemble is not pseu-
dorandom, then there exists a probabilistic algorithm N which has non-negligible
advantage in deciding the Linear problem. Hence, if the Linear Assumption holds,
our function ensemble is pseudorandom. This completes our proof of Theorem 8.
(cid:3)
4 Our Generalized Construction
4.1 Construction
We now generalize the construction of the previous section to create a function
ensemble which is pseudorandom under the k-Linear Assumption, for each k ≥ 1.
We note that for k = 1, this is precisely the construction of
[23] which was proven
under the DDH Assumption (a.k.a. the 1-Linear Assumption). We will denote our
function ensemble by Fk = {Fn}. Each function in Fn is a function from {0, 1}n to
a group G of prime order p generated by g. The key specifying a function f ∈ Fn
consists of G, p, g and k2n + k elements of Zp:
Setup(λ) → SK Our Setup algorithm takes in a security parameter λ and
chooses a group G of prime order p which is large with respect to λ.
It then
chooses a generator g of G and k2n + k uniformly random elements of Zp, denoted
by cm, bi
m,(cid:96) where 1 ≤ m, (cid:96) ≤ k, and 1 ≤ i ≤ n. It outputs:
SK = {G, p, g, cm, bi
m,(cid:96) : i ∈ [n], (m, (cid:96)) ∈ [k] × [k]}.
Here, [n] denotes the set {1, 2, . . . , n} and [k] denotes the set {1, 2, . . . , k}. (The
i’s are superscripts, and do not denote exponentiations.) To deﬁne and compute
f(x) for the function f corresponding to SK, we use the following Evaluation
algorithm:
Evaluation(x, SK) → f (x)
Initialize variables a1 = c1, . . . , ak = ck in Zp.
For i from 1 to n do:
If xi = 0, set am = am for each m ∈ [k].
If xi = 1, set am =(cid:80)k
(cid:96)=1 a(cid:96)bi
m,(cid:96) for each m ∈ [k].
Output f(x) = ga1.
We note that the output is always one group element while the key size grows
quadratically in k. To compute the a value f(x), we only need to do one exponen-
tiation in G, perform ≤ k2n multiplications in Zp, and ≤ (k − 1)kn additions in