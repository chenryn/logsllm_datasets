```  
2、多级分区  
例如按时间，再按GEOHASH进行范围分区。  
```  
create table test_201701 PARTITION OF test for values FROM ('2017-01-01') TO ('2017-02-01') partition by range(st_geohash(pos,15));  
...  
create table test_201701_prefix1 PARTITION OF test for values FROM ('xxxx1') TO ('xxxx2');  -- 在地图上生成BOX（GRID），找到对应的边界，用边界作为分区条件  
```  
使用分区后，查询条件带有分区键（例如时间、空间范围）时可以落到对应分区，从而减少数据扫描。  
再针对对象属性建立GIN索引，可以实现极端高效的查询。  
### 6、索引分级、分区  
与数据类似，在不使用分区表的情况下，索引也是支持分区逻辑的，例如  
[《分区索引的应用和实践 - 阿里云RDS PostgreSQL最佳实践》](../201707/20170721_01.md)    
例子  
空间索引 + 时间分区  
```  
create index idx_20170101 on tbl using gist (pos) where crt_time between '2017-01-01' and '2017-01-02';  
...  
create index idx_20170102 on tbl using gist (pos) where crt_time between '2017-01-02' and '2017-01-03';  
...  
```  
使用以上分区索引，在输入时间段进行空间搜索时，可以快速定位数据。  
```  
select * from tbl   
  where crt_time between '2017-01-01' and '2017-01-02'  -- 时间条件  
  and (pos  ?)  ?    -- 按距离远近排序  
  limit ?;              -- 输出若干条  
```  
甚至可以加入更多层级的索引分区，比如某个维度（对象属性）是常用搜索条件，例如店铺类别（假设可枚举，或是一个较小范围的数量）。  
```  
create index idx_20170101_mod0 on tbl using gist (pos) where crt_time between '2017-01-01' and '2017-01-02' and dtype=0;  
...  
create index idx_20170101_mod1 on tbl using gist (pos) where crt_time between '2017-01-01' and '2017-01-02' and dtype=1;  
...  
```  
使用以上分区索引，在输入时间段以及某些特定条件进行空间搜索时，可以快速定位数据。  
```  
select * from tbl   
  where crt_time between '2017-01-01' and '2017-01-02'  -- 时间条件  
  and (pos  ?)  ?    -- 按距离远近排序  
  limit ?;              -- 输出若干条  
```  
注意，以上SQL可以有极端性能优化的方法，参见：  
[《GIS附近查找性能优化 - PostGIS long lat geometry distance search tuning using gist knn function》](../201308/20130806_01.md)    
索引本身的组织形式，或者说索引结构，可以按逻辑分区进行重构，类似以上创建索引的方法，覆盖所有的条件。  
### 7、CTID intersect array JOIN SCAN  
前面说了多个索引，或者GIN索引的内部会自动进行BitmapAnd，BitmapOr合并扫描，实际上我们在SQL中，也可以明确进行这类扫描。  
每个条件筛选出对应的CTID  
使用intersect，UNION生成最终复合条件的CTID。（intersect对应and条件, union对应or条件。）     
生成ctid的array, 使用ctid扫描用法如下  
[《在PostgreSQL中实现update | delete limit》](../201608/20160827_01.md)    
#### 例子  
#### 1、创建对象FEED数据表  
```  
postgres=# create table tbl (id int, info text, crt_time timestamp, pos point, c1 int , c2 int, c3 int );  
CREATE TABLE  
```  
#### 2、写入5000万测试数据  
```  
postgres=# insert into tbl select generate_series(1,50000000), md5(random()::text), clock_timestamp(), point(180-random()*180, 90-random()*90), random()*10000, random()*5000, random()*1000;   
INSERT 0 50000000  
```  
#### 3、创建对象索引  
```  
postgres=# create index idx_tbl_1 on tbl using gin (info, c1, c2, c3);  
CREATE INDEX  
```  
#### 4、创建时间索引  
```  
postgres=# create index idx_tbl_2 on tbl using btree (crt_time);  
CREATE INDEX  
```  
#### 5、创建空间索引  
```  
postgres=# create index idx_tbl_3 on tbl using gist (pos);  
CREATE INDEX  
```  
#### 6、生成数据layout，方便后面的查询  
```  
postgres=# select min(crt_time),max(crt_time),count(*) from tbl;  
            min             |            max             |  count     
----------------------------+----------------------------+----------  
 2017-07-22 17:59:34.136497 | 2017-07-22 18:01:27.233688 | 50000000  
(1 row)  
```  
#### 7、创建KNN极端查询函数  
```  
create or replace function ff(point, float8, int) returns setof tid as $$                                                          
declare  
  v_rec record;  
  v_limit int := $3;  
begin  
  set local enable_seqscan=off;   -- 强制索引, 扫描行数够就退出.  
  for v_rec in   
    select *,  
    (pos  $1) as dist,  
    ctid  
    from tbl   
    order by pos  $1  
  loop  
    if v_limit  $2 then  
      -- raise notice '满足条件的点已输出完毕';  
      return;  
    else  
      return next v_rec.ctid;  
    end if;  
    v_limit := v_limit -1;  
  end loop;  
end;  
$$ language plpgsql strict volatile;  
postgres=# select * from ff(point '(100,100)',100,100) ;  
     ff        
-------------  
 (407383,11)  
 (640740,9)  
 (26073,51)  
 (642750,34)  
...  
(100 rows)  
Time: 1.061 ms  
```  
#### 8、ctid合并检索  
输出满足以下条件的记录  
```  
(  
c1 in (1,2,3,4,100,200,99,88,77,66,55)  
  or  
c2  point '(0,0)'   Bitmap Index Scan on idx_tbl_1  (cost=0.00..806.54 rows=54151 width=0) (actual time=14.264..14.264 rows=54907 loops=1)  
         Index Cond: (tbl.c1 = ANY ('{1,2,3,4,100,200,99,88,77,66,55}'::integer[]))  
         Buffers: shared hit=88  
 Planning time: 0.105 ms  
 Execution time: 94.606 ms  
(10 rows)  
```  
2、95147条。  
```  
postgres=# explain (analyze,verbose,timing,costs,buffers) select * from tbl where c2  Bitmap Index Scan on idx_tbl_1  (cost=0.00..810.79 rows=99785 width=0) (actual time=53.612..53.612 rows=95147 loops=1)  
         Index Cond: (tbl.c2   BitmapOr  (cost=1694.23..1694.23 rows=153936 width=0) (actual time=73.763..73.763 rows=0 loops=1)  
         Buffers: shared hit=141  
         ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..806.54 rows=54151 width=0) (actual time=16.733..16.733 rows=54907 loops=1)  
               Index Cond: (tbl.c1 = ANY ('{1,2,3,4,100,200,99,88,77,66,55}'::integer[]))  
               Buffers: shared hit=88  
         ->  Bitmap Index Scan on idx_tbl_1  (cost=0.00..810.79 rows=99785 width=0) (actual time=57.029..57.029 rows=95147 loops=1)  
               Index Cond: (tbl.c2 < 10)  