### Other Messages and Public Values

Certain messages, represented by the single public value `exts`, are part of the handshake transcript. To ensure that both the client and server agree on these values, we use the transcript integrity property, which is verified by the end of the handshake.

### Alert Messages

We do not explicitly model the TLS alert protocol in our analysis. This means that our model does not account for errors that would result in the immediate termination of a connection (fatal alerts) or acknowledgments of a graceful shutdown (closure alerts). From the perspective of our model and the security properties we are capturing, an alert and subsequent connection closure is equivalent to a trace that simply does not have any subsequent rules for that state.

### Over-approximations

In certain situations, we assume that the client and server will send the maximal message load. For example, we assume the client will always send 0-RTT data. Similarly, we model the server as always including a `CertificateRequest` message in the first flight. However, the client does not always send authentication parameters, and the server does not necessarily accept them if they are sent. Therefore, the possible traces we observe are equivalent to those in which the server optionally sends the request.

### Encoding the Abstract Model in the Tamarin Framework

The second step in our modeling involves encoding the constructed abstract model as Tamarin rules. At a high level, these rules capture actions by both honest parties and adversaries. For legitimate clients and servers, our model rules correspond to all processing actions associated with respective flights of messages.

For instance, our first client rule captures a client generating and sending all necessary parameters as part of the first flight of an (EC)DHE handshake, as well as transitioning to the next client state within the model. In Figure 5, the `let...in` block allows us to perform basic variable substitutions, which is useful for enforcing variable types and keeping the rule computations logically separated. We use the variable `tid` to name the newly created client thread. The action `DH(C, ˜a)` maps the private DH exponent `˜a` to the client `C`. The `Start(tid, C, 'client')` action signifies the instantiation of the client `C` in the role of 'client', and the `Running(C, S, 'client', nc)` action indicates that the client `C` has initiated a run of the protocol with the server `S`, using the fresh value `nc` as the `client_random` value in TLS. The `C1` action marks the occurrence of the `C_1` rule with its associated `tid`. The `St_C_1_init` fact encodes the local state of thread `tid`, which doubles as a program counter by allowing the client to recall sending the first message in thread `tid`. The `Out` fact represents sending the first client message to the network, whereafter it becomes adversarial knowledge.

### Overview of Client Handshake Rules

Figures 6 and 7 capture all relevant model rules and represent the union of all options that a client and a server have in a single execution. We explain the client-side behavior and map it to the corresponding transitions, briefly mentioning the intended server interaction. The client can initiate three types of handshakes: an (EC)DHE handshake (`C_1`), a PSK handshake (`C_1_PSK`), and a 0-RTT handshake (`C_1_KC`). We use `KC` (an abbreviation for Known Configuration) to denote 0-RTT handshakes. In the (EC)DHE handshake, the server may reject the client parameters due to a possible mismatch, whereafter the client needs to provide new parameters (`C_1_retry`). Additionally, the client may optionally authenticate in the 0-RTT case (`C_1_KC_Auth`). While the (EC)DHE and 0-RTT handshakes only have a single continuation (respectively `C_2` and `C_2_KC`), the PSK handshake has two different modes: plain PSK (`C_2_PSK`) and PSK with DHE (`C_2_PSK_DHE`). The latter is used to obtain PFS guarantees by adding an ephemeral (EC)DH value to the applicable key derivations.

We model the server as always requesting client authentication but allow traces to capture when the server accepts or does not accept authentication. If the client decides to authenticate, it sends the authentication messages along with the client `Finished` message (`C_2_Auth`). Otherwise, only the `Finished` message is transmitted (`C_2_NoAuth`). The handshake concludes with the client either receiving a new session ticket (`C_3_NST`), which can be used for resumption in a later PSK handshake, or doing nothing (`C_3`). The client can then proceed to send (`C_Send`) and receive (`C_Recv`) any finite number of application data messages.

### Managing Model Complexity

The complexity of TLS 1.3 presents an interesting challenge for automated symbolic analysis. As Figures 6 and 7 demonstrate, the introduction of new handshake modes has dramatically increased the number of state transitions compared to TLS 1.2. In software engineering, conditional branches are a common part of code. For example, the code might perform the check: "if received client authentication, then verify signature and set client status to authenticated; else do nothing." However, in Tamarin, we require two distinct state transitions representing these possibilities.

The TLS handshake exhibits such conditional branching. Ideally, branches would be represented by as few rules as possible, which can be done by merging some of the resulting states into one. For example, by the end of the server’s first phase, the state needs to contain a transcript of the received messages, the computed values of `ss` and `es`, and the authentication status of the client. While all four handshake modes will compute these values differently, from the point of computation onwards, the server’s behavior does not depend on the handshake mode. Therefore, these can be merged into the resulting `s1` state.

With this approach, we can create simple rules that ensure the composability of the various protocol modes and closely follow the original specification. For example, the numbering of states (c1, c2, etc.) corresponds to message flights. In some cases, we require two rules to construct a single message flight, e.g., `C_2` and `C_2_Auth`, wherein a client optionally adds a signature to its final handshake message.

### Examples of Complex Interactions

By defining the client and server rules as outlined above, we now have the ability to model the interaction of an unbounded number of interleaved handshakes. That is, while we express properties in terms of a client and a server, there may exist an unbounded number of other interacting agents, which the adversary may additionally compromise through revealing their long-term keys. The adversary can then impersonate these agents, leading to an increase in the number of possible interactions.

Consider the following scenario: a client and a server have derived session keys after agreeing to use a PSK. We know that at some point, the client must have authenticated the server (assuming the PSK is not from the out-of-band mechanism). However, we potentially need to resolve an unbounded number of handshakes before we arrive at the initial handshake in which the client verified the server’s signature. The Tamarin prover allows us to reason inductively about such scenarios, facilitating the verification of important security properties that are typically out of reach of backwards unfolding.

Our Tamarin model is available for inspection at [1].

### Formal Analysis of the Model

In this section, we provide the details of our analysis. Specifically, we describe our threat model, the required security properties, and how we formally model them in Tamarin. We then give our analysis results, reflect on our findings, and provide recommendations for the TLS Working Group.

#### General Approach and Threat Model

Our aim is to analyze the core security properties of the TLS 1.3 protocol. The work on TLS 1.3 to date generally considers subprotocols in isolation. Our work, as explained in the previous section, also considers all the possible complex interactions between the various subprotocols. For these interactions, we prove both secrecy and authentication properties.

The threat model we consider in our analysis is an active network adversary that can compromise the long-term keys of agents. Specifically, we consider adversaries that can compromise the long-term keys of all agents after the thread under attack ends (to capture PFS) as well as the long-term keys of agents that are not the actor or the intended peer of the attacked thread, at any time (to capture Lowe-style MITM attacks and to contain the consequences of long-term key compromise). Moreover, we include limited support for Actor Key Compromise [8] by allowing the adversary to reveal the long-term keys of the client when verifying the unilateral authentication properties and the secrecy of early data keys.

Similarly to standard AKE models, our threat model has two components: the Tamarin rule that encodes the full capability (i.e., the ability to compromise an agent’s long-term private key) and a restriction on the security notion that prevents the adversary from compromising all the keys (corresponding to the fresh/clean predicates in AKE models). We give the rule here, and return to the restrictions when we describe the specific properties.

```tamarin
rule Reveal_Ltk:
[ !Ltk($A, ˜ltkA) ] --[ RevLtk($A) ]-> [ Out(˜ltkA) ]
```

This rule can be triggered if a long-term private key `˜ltkA` was previously generated for the agent `$A`. The right-hand side of the rule indicates that the key is revealed to the adversary.