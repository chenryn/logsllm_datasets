### Title: µSCOPE: A Methodology for Analyzing Least-Privilege Compartmentalization in Large Software Artifacts

### Authors:
- Nick Roessler, University of Pennsylvania
- Lucas Atayde, Rice University
- Imani Palmer, Null Hat Security
- Derrick Paul McKee, Purdue University
- Jai Pandey, Nvidia
- Vasileios P. Kemerlis, Brown University
- Mathias Payer, EPFL
- Adam Bates, University of Illinois
- Jonathan M. Smith, University of Pennsylvania
- André DeHon, University of Pennsylvania
- Nathan Dautenhahn, Rice University

### Abstract
Least-privilege engineering has often been an afterthought in operating system (OS) design, prioritizing simplicity and portability over security. This has led to monolithic kernels where a single exploit can compromise the entire system. µSCOPE ("microscope") addresses this issue by automatically identifying opportunities for least-privilege separation. By adopting a quantitative and systematic approach, µSCOPE replaces expert-driven, semi-automated analysis with a general methodology for exploring the trade-off between security and performance. We apply µSCOPE to the Linux kernel by instrumenting the entire kernel to gather comprehensive, fine-grained memory access and call activity data, mapping these accesses to semantic information, and conducting separability analysis using both privilege and overhead metrics. Our results show that it is feasible to achieve significant privilege reduction with relatively low overheads. For example, at 15% mediation overhead, overprivilege in Linux can be reduced by up to 99.8%, suggesting that fine-grained privilege separation is both feasible and practical.

### ACM Reference Format:
Nick Roessler, Lucas Atayde, Imani Palmer, Derrick McKee, Jai Pandey, Vasileios P. Kemerlis, Mathias Payer, Adam Bates, André DeHon, Jonathan M. Smith, and Nathan Dautenhahn. 2021. µSCOPE: A Methodology for Analyzing Least-Privilege Compartmentalization in Large Software Artifacts. In 24th International Symposium on Research in Attacks, Intrusions and Defenses (RAID '21), October 6–8, 2021, San Sebastian, Spain. ACM, New York, NY, USA, 16 pages. https://doi.org/10.1145/3471621.3471839

### 1. Introduction
The Principle of Least Privilege is a fundamental tenet of secure system design [41, 62]. Despite decades of research, over-privileged software remains prevalent across all layers of the software stack. Composing systems while minimizing privilege is challenging due to the complexity of defining privilege compartments and the performance overhead they introduce [50]. Developers often simplify this process by building software with large, single trust domains, which creates an environment where a single vulnerability can lead to a complete system compromise. For example, Project Zero's recent iOS exploit [10] was built from a single memory error in the kernel, resulting in a zero-click, radio-transmitted, and wormable device compromise.

Addressing overprivilege in OS design involves both mechanisms and policies. Privilege separation requires a self-protecting mechanism to enforce privilege boundaries and mediate necessary boundary crossings, such as a reference monitor [8]. Surprisingly, achieving this does not require abandoning existing OS architectures in favor of microkernels. Mechanisms for retrofitting privilege compartmentalization into monolithic kernels [18, 19, 52, 56, 72] and userspace applications [14, 22, 33, 34, 42, 46, 68, 71] have already been demonstrated. For instance, Dautenhahn et al. [19] showed that by trapping all updates to virtual memory, it is possible to embed an intra-kernel reference monitor (or "Nested Kernel") within an existing monolithic OS to mediate accesses to physical memory or other system resources.

While these works demonstrate feasible mechanisms, their focus on coarse-grained compartmentalizations only partially addresses the Principle of Least Privilege. Manually defining policies and privilege boundaries for tens of millions of lines of code is infeasible. Recent attempts at privilege reduction [6, 12, 23, 29, 35, 45, 47] have improved upon early, labor-intensive work [13, 37, 58, 72], but still fall short in terms of automation and whole-system privilege reduction. These approaches rely on experts to label sensitive data or low-integrity components, and then perform a semi-automated compartmentalization routine. However, even state-of-the-art metric-based techniques [47] protect only a few critical compartments, as they depend on the availability and omniscience of experts.

To address these challenges, we present µSCOPE ("Systematizing Compartmentalization Opportunities for Privilege Encapsulation"), a methodology that enables the identification of whole-system privilege reduction opportunities without requiring manual analysis by experts. µSCOPE instruments and profiles software activity at the instruction level, encoding each reference in a novel low-level access control matrix, the CAPMAP (Context-Aware Privilege Memory Access Pattern). It then uses the CAPMAP to compare competing compartmentalization hypotheses, either drawn from syntactic code structure or identified through data-driven clustering algorithms. µSCOPE introduces a metric to evaluate the level of privilege separation for a given strategy compared to monolithic and least-privilege baselines, and uses a performance model to estimate the cost of enforcement for various isolation mechanisms.

We apply µSCOPE to the Linux kernel, demonstrating its ability to identify privilege separability, show the range of achievable compartmentalizations, and automatically identify important candidates for refactoring. Figure 1 illustrates our results under a directory-based compartmentalization process, indicating significant privilege separation opportunities for Linux. Our performance analysis suggests that enforcing such separation may be practical and eliminates costly manual efforts.

### Summary of Contributions:
- **µSCOPE Framework**: A comprehensive, automated framework for privilege analysis (Section 5). It includes:
  1. A novel low-level privilege representation, the CAPMAP.
  2. A compartmentalization model that relaxes the standard object ownership model.
  3. Quantitative metrics for characterizing both privilege and performance.
  4. Separability analysis, a systematic exploration of entire compartmentalization spaces.
- **Linux Kernel Implementation**: An implementation of µSCOPE for the Linux kernel, binding C language abstractions to the CAPMAP model (Section 6). The analysis code and datasets are available at https://fierce-lab.gitlab.io/uscope.
- **Characterization of Linux Privilege Separability**: A detailed characterization of the degree to which Linux is privilege-separable, including automated identification of potential refactorings (Section 8). We uncover opportunities for orders of magnitude in privilege separation, up to a 500x reduction (99.8%) in overprivilege, with a predicted overhead of approximately 15%. This suggests that fine-grained privilege separation may be possible with low overhead in monolithic kernels. We have also released a browsable explorer to help researchers understand the interactions between Linux objects observed by µSCOPE.

### 2. Motivation
To illustrate our concerns and motivate our approach, consider the credential structure (struct cred) in the Linux kernel (Figure 2). This data structure controls user permissions and is accessed by numerous kernel functions. A true least-privilege policy would remove unnecessary privileges, reducing the attack surface. Similar analyses can be performed on other security-critical objects like page table entries and secret keys to quantify minimum necessary privileges, overprivilege in the monolithic design, and the implications of specific compartmentalizations. We provide a web-based object explorer generated from our tool to show usage patterns of other kernel objects: µSCOPE Object Explorer.

### 3. Security Model
**Threat Model**: This work considers a realistic and powerful attacker who has discovered an exploitable software vulnerability (e.g., memory corruption, disclosure, or code execution) in a monolithic software artifact, such as an OS kernel. The attacker can trigger the exploit through low-integrity components like user-space processes, network communications, or peripheral devices. Leveraging this exploit, the attacker aims to take control of the system or gain access to confidential data. We make no assumptions about the specific system objects the adversary seeks to access or corrupt; any object could be relevant to the attacker's objectives.

**System Model**: The target system is equipped with a state-of-the-art reference monitor [8], as instantiated in recent work [14, 18, 19, 22, 27, 33, 34, 42, 46, 52, 56, 68, 71, 72]. This monitor enforces privilege boundaries and mediates necessary boundary crossings.