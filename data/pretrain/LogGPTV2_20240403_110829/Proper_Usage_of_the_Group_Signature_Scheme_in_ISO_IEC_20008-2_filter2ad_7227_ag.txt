(cid:3)
(cid:3)
(cid:3)
(cid:3)
k. When the conditions e(cid:27)y = (cid:27)
(cid:0)e(cid:27)q = e(K; Y )
(cid:0)kwe(cid:27)q = e(G1; G2)
q holds. However, since this contradictse(cid:27)q ̸= (cid:27)
q , e(G1; G2)
Type (c): Let K = G1
(cid:0)(cid:27)
e(K; Y )
(cid:3)
e(cid:27)q = (cid:27)
(cid:3)
y and e(cid:27)(cid:14) = (cid:27)
(cid:3)
q , kwe(cid:27)q = kw(cid:27)
(cid:3)
(cid:14) are put in Equation (2), we get
q . If k ̸= 0 and w ̸= 0,
(cid:3)
(cid:3)
q that is the condition of Type (c), a related query
(cid:0)kw(cid:27)
(cid:3)
15
in Type (c) does not exist if k ̸= 0 and w ̸= 0. On the other hand, the probability that k = 0 or w = 0
satis(cid:12)es Pr[k = 0 _ w = 0] (cid:20) Pr[k = 0] + Pr[w = 0] = 2=p since K 2 G1 and w 2 Zp are chosen uniform
randomly. Therefore, the probability that A generates a related query in Type (c) is at most 2=p which
is negligible.
Therefore, we see that the probability that A generates the related queries in Type (a), (b), and (c) is
negligible if the DL assumption holds in G1.
query satis(cid:12)ese(cid:27)y = (cid:27)
On the other hand, we cannot rule out the possibility that the adversary generates a related query
in Type (⋆) since our attack is in this type. Now, we further analyze this type of query. This type of
(cid:3)
y. When this equation is put in Equation (2), we get
(cid:0)e(cid:27)q = e(K; G2)(cid:27)
e(cid:27)(cid:14) (cid:1) e(K; Y )
(cid:14) (cid:1) e(K; Y )
(cid:0)kwe(cid:27)q = e(G1; G2)k(cid:27)
, e(G1; G2)ke(cid:27)(cid:14) (cid:1) e(G1; G2)
, k(e(cid:27)(cid:14) (cid:0) we(cid:27)q) = k((cid:27)
(cid:0) w(cid:27)
(cid:14) )=(e(cid:27)q (cid:0) (cid:27)
, w = (e(cid:27)(cid:14) (cid:0) (cid:27)
and the valuese(cid:27)(cid:14) ande(cid:27)q in the related query. Therefore,
Since the probability that k = 0 holds is 1=p, it holds that k ̸= 0 with high probability. If k ̸= 0, we get
(cid:3)
q ): That is, the issuing key w can be computed from the
values (cid:27)
this indicates that the adversary who can generate a related query in Type (⋆) knows the issuing key.
(cid:0) w(cid:27)
(cid:3)
q in the challenge signature (cid:6)
e(cid:27)(cid:14) (cid:0) we(cid:27)q = (cid:27)
(cid:14) (cid:1) e(G1; G2)
(cid:0)kw(cid:27)
(cid:3)
q
(cid:3)
(cid:14)
(cid:3)
(cid:14) and (cid:27)
(cid:3)
(cid:14)
(cid:3)
q ):
(cid:3)
(cid:3)
(cid:3)
(cid:0)(cid:27)
(cid:3)
q
(cid:3)
e(K; G2)
(cid:3)
q
From the above observations, we see that only a related query in Type (⋆) might be generated by the
adversary. Furthermore, the adversary generating this type of query knows the issuing key. Therefore,
the minimum condition of breaking the anonymity of Mechanism 6 seems to be that the adversary knows
the issuing key. Thus, we can expect that if the adversary does not possess the issuing key, Mechanism
6 satis(cid:12)es anonymity.
4.3 Security of Mechanism 6
In this section, we formally prove the expectation given in the previous section. Concretely, we introduce
a new security de(cid:12)nition of anonymity called \weak anonymity", where the adversary is not allowed to
corrupt the issuer. Then, we prove that Mechanism 6 satis(cid:12)es this security notion.
Now, we de(cid:12)ne a new security notion called weak anonymity. We (cid:12)rstly de(cid:12)ne some oracles for the
adversary who cannot corrupt the issuer. The de(cid:12)nitions of these oracles are followed by Bellare et
al. [11]. The SndToI oracle is an interactive oracle. Also, HU and CU are the set of honest users and
corrupted users, respectively.
AddU((cid:1)): The add-user oracle takes as input a user identity i, and runs UKg and Join/Issue protocol to
add an honest user i to the group. The oracle returns upki and adds i to HU.
SndToI((cid:1);(cid:1)): The send-to-issuer oracle takes as input a user identity i and a initial message Mint, and
interacts with the adversary who corrupts the user i by running Issue(gpk; upki; ik). The user i needs to
be in the set CU. If i ̸2 CU, the oracle outputs ?.
RReg((cid:1)): The read-registration-table oracle takes as input i, and returns reg[i].
Then, we give the de(cid:12)nition of weak anonymity by using the above oracles.
Intuitively, weak
anonymity ensures that the adversary who corrupts all users but not the issuer cannot extract the
signer’s information from a signature. Formally, it is de(cid:12)ned as follows.
De(cid:12)nition 4.1 (Weak Anonymity). Let A be an adversary for weak anonymity. We de(cid:12)ne the experi-
ment Expw-anon
(cid:5)GS;A ((cid:21)) as follows.
Expw-anon
(cid:5)GS;A ((cid:21)) : b   f0; 1g; (gpk; ik; ok)   GKg(1k); CU   ∅; HU   ∅
eb   AAddU((cid:1));CrptU((cid:1);(cid:1));SndToI((cid:1);(cid:1));USK((cid:1));RReg((cid:1));Ch(b;(cid:1);(cid:1);(cid:1));Open((cid:1);(cid:1))(gpk)
Return 1 ifeb = b; otherwise return 0
We say that (cid:5)GS satis(cid:12)es weak anonymity if the advantage
is negligible for any PPT adversary A.
Advw-anon
(cid:5)GS;A :=
(cid:12)(cid:12)(cid:12)Pr[Expw-anon
(cid:5)GS;A ((cid:21)) = 1] (cid:0) 1
2
(cid:12)(cid:12)(cid:12)
16
Mechanism 6 satis(cid:12)es weak anonymity as shown in Theorem 4.2. This theorem implies that Mech-
anism 6 is still secure under the condition that the issuer does not join the attack. Such a condition is
reasonable if a single authority plays roles of both the opener and the issuer.
We note that most of the proof is the same as that of the anonymity under the restricted condition
(given in Section 4.1) since anonymity in De(cid:12)nition 2.6 implies weak anonymity. However, since it is
not assumed that the adversary does not generate a related query in the proof of the weak anonymity,
we cannot straightforwardly prove the part corresponding with Game 5 (cid:25) Game 6 in the proof of the
anonymity.
In the proof of the weak anonymity, we rule out the possibility that the adversary generates a related
query by the computational assumptions. As we observe in Section 4.2, the adversary cannot generate
related queries in Type (a), (b), and (c) under the DL assumption. Also in the proof, we prove that the
adversary who does not possess the issuing key cannot generate related queries in Type (⋆) under the
q-SDH assumption. This part is the most diﬃcult in this proof since the reduction algorithm needs to
deal with generating user signing keys without the issuing key. To overcome this problem, we apply the
rewinding technique as in the forking lemma [26] in our security proof.
Theorem 4.2. Mechanism 6 satis(cid:12)es weak anonymity under the DL assumption in the group G1, the
DDH assumption in the group G, and the q-SDH assumption in the groups (G1; G2) in the random oracle
model.
Proof. Let A be an adversary that attacks the weak anonymity of Mechanism 6. We consider the
following sequence of games. Let b be the challenge bit, m
be the challenge message, i0; i1 be the
(cid:3)
(cid:3)
r ) be the challenge signature. Let Sℓ denote
(cid:14) ; (cid:27)
challenge users, and (cid:6)
the event that A succeeds in guessing the challenge bit b in Game ℓ. Also, we specify the random tape
of A in the proof when we use the rewinding technique.
[Game 0]: This is the experiment Expw-anon
(cid:5)FI;A ((cid:21)) itself. As in Game 0 of Theorem 4.1, The challenger
manages an inout/output pair of the random oracle in the list L, and we assume that the adversary
generates the involved random oracle query before he queries to the Open oracle.
(cid:3)
1 ; T
(cid:3)
2 ; T
(cid:3)
3 ; T
(cid:3)
x; (cid:27)
(cid:3)
q ; (cid:27)
(cid:3)
y; (cid:27)
(cid:3)
4 ; c
= (T
; (cid:27)
(cid:3)
(cid:3)
(cid:3)
; (T
(cid:3)
; (T
(cid:3)
; (cid:27)
(cid:3)
(cid:3)
4 ; c
(cid:3)
4 ; c
(cid:3)
x; (cid:27)
(cid:3)
1 ; T
(cid:3)
3 ; T
(cid:3)
y; (cid:27)(cid:14);
(cid:3)
x; (cid:27)y; (cid:27)(cid:14);
[Game 1 - Game 5]: The modi(cid:12)cation of each game is the same as that of the game in Theorem 4.1.
h; K   G1
(cid:3)
(cid:3)
1 ; T
3 ; T
(cid:3)
2 ; T
y, the challenger returns ? where (cid:27)y and (cid:27)q are arbitrary.
r )) such that (cid:27)y ̸= (cid:27)
(cid:3)
(cid:3)
(cid:3)
2 ; T
(cid:14) , the challenger returns ?.
r )) such that (cid:27)(cid:14) ̸= (cid:27)
(cid:3)
(cid:3)
q , the challenger returns ?.
r )) such that (cid:27)q ̸= (cid:27)
(cid:3)
(cid:3)
[Game 6]: We change the way to generate H; K 2 G1 in the group public key gpk. More precisely, in
Game 6, the challenger samples h; k 2 Zp uniform randomly and sets H   G1
k by comparing
Game 5 in which H; K are chosen uniform randomly in G1.
(cid:3)
[Game 7]: In Game 7, if the adversary generates the opening query (m
(cid:27)q; (cid:27)
[Game 8]: In Game 8, if the adversary generates the opening query (m
(cid:3)
q ; (cid:27)
(cid:27)
(cid:3)
[Game 9]: In Game 9, if the adversary generates the opening query (m
(cid:27)q; (cid:27)
[Game 10]: We modify the way to reply queries for the SndToI oracle. More precisely, the challenger
replies the ℓ-th query (i; (R1; R2)) for the SndToI oracle as follows. Let N be a constant number.
Step 1 (Practice Phase). Execute other N anonymity games with the adversaries Aj who are the
same as the original A in parallel where 1 (cid:20) j (cid:20) N . Speci(cid:12)cally, for 1 (cid:20) j (cid:20) N , perform the following
1. Sample bci
operations.
2. Execute Aj(gpk; (cid:26)) where (cid:26) is the random tape of the original A. Then, the challenger makes
exactly the same replies as those for the original A until the ℓ-th query (i; (R1; R2)) is generated.
We note that the query is also the same as that of the original A since the challenger makes the
same replies those for the original A until the ℓ-th query is generated.
3. Send bci
Step 2 (First Reply in the Original Game with A). If i =2 CU, return ?. If i 2 CU, sample ci
and return ci as the (cid:12)rst reply of the send-to-issuer query (i; (R1; R2)). Then, obtain ((cid:27)xi; (cid:27)z
(j) to Aj as the (cid:12)rst reply of the ℓ-th query (i; (R1; R2)), and obtain (b(cid:27)(j)
xi ;b(cid:27)(j)
r (cid:0) Zp
) from A.
(j) r (cid:0) Zp.
(cid:3)
1 ; T
(cid:3)
2 ; T
(cid:3)
3 ; T
(cid:3)
x; (cid:27)
(cid:3)
y; (cid:27)
(cid:3)
(cid:14) ;
(cid:3)
4 ; c
).
′
i
z
(cid:3)
; (cid:27)
; (T
; (cid:27)
′
i
17
)
′
i
′
i
)
(cid:3)
(cid:3)
(j
(cid:3)
)
′
z
i
(cid:3)
xi
;b(cid:27)(j
andez
) is valid and ci ̸= bci
Step 3 (Second Reply in the Original Game with A). If ((cid:27)xi; (cid:27)z
(b(cid:27)(j
second reply. If ((cid:27)xi; (cid:27)z
, and ∆ci  bc(j
). If there is no such index j
) is valid, (cid:12)nd the index j
 b(cid:27)(j
exists such index j
) is invalid, return ? as the
(cid:3) 2 [1; N ] in the replies from Aj in Step 1 such that
, return ?. On the other hand if there
(cid:0) (cid:27)xi; ∆(cid:27)z
, compute the second reply as follows.
 b(cid:27)(j
=∆ci.
2 Zp uniform randomly and compute Ci   G1
w+yi .
i ). Then, set certi   (Ai; yi; z
′′
i ) and reply certi as the second reply.
(cid:0) ci, and set exi   ∆(cid:27)xi=∆ci
1(cid:0)hexi(cid:0)k(ez
1. Compute ∆(cid:27)xi
  ∆(cid:27)z
′
i
′′
i
2. Sample yi; z
3. Compute Ai   Ci
(cid:0) (cid:27)z
(cid:3)
xi
′
i+z
′
z
i
′
i
(cid:3)
(cid:3)
)
(cid:3)
)
′′
i
1
′
i
′
i
Register reg[i]   Qi.
[Game 11]: We modify the way to compute the element Ai in the simulation of the AddU oracle. In
Game 11, Ai is computed as follows. The challenger chooses a random value yi and sets Ci   G1
w+yi
1(cid:0)hxi(cid:0)k(z
′
′′
i+z
i )
where w is the issuing key. Then, he also samples a random value z
where uski = (xi; z
(cid:3)
[Game 12]: In Game 12, if the adversary generates the opening query (m
q , the challenger returns ?.
(cid:3)
(cid:27)q; (cid:27)
[Game 13, Game 14]: The modi(cid:12)cation of each game is the same as that of Game 6 and Game 7 in
Theorem 4.1, respectively.
i and sets Ai   Ci
′′
(cid:3)
4 ; c
′
i), h = logG1 H, and k = logG1 K.
(cid:3)
r )) such that (cid:27)y = (cid:27)
(cid:14) , and (cid:27)q ̸= (cid:27)
(cid:3)