### Permission Labels and Middleware Enforcement

Permission labels, as referenced in the middleware, are unique text strings that can be defined by both the operating system (OS) and third-party developers. Android, for instance, defines many base permission labels. From an OS-centric perspective, applications are statically assigned permission labels that indicate the sensitive interfaces and resources they can access at runtime. These permissions cannot be expanded after installation. Application developers specify a list of required permission labels in their package manifest, but not all requested permissions are granted.

#### Definition and Distribution of Permission Labels
Permission label definitions are distributed across framework and package manifest files. Each definition includes a "protection level," which can be one of the following: "normal," "dangerous," "signature," or "signature or system."

- **Normal**: Permissions with this protection level are always granted.
- **Dangerous**: These permissions are granted if the application is installed, but the user must confirm all dangerous permissions together.
- **Signature**: This protection level influences permission granting without user input. A permission is only granted if the requesting application is signed by the same developer key that signed the package defining the permission label.
- **Signature or System**: Similar to the signature level, but the permission is also granted to applications signed by the key used for the system image.

Many OS-defined permissions use the "signature" protection level to ensure that only applications distributed by the OS vendor are granted access.

#### Security Policy Model
The permission label policy model is also used to protect applications from each other. Most of the security policy is defined in the application's package manifest, which specifies the permission labels corresponding to the application's functional requirements. The manifest also assigns a permission label to protect each application component (e.g., Activity, Service). An application can initiate inter-process communication (IPC) with a component in another (or the same) application if it has been assigned the permission label specified to restrict access to the target component.

### Policy Types
The security policies can be categorized into two main types:

1. **Permission Granting Policy (Install-time)**
   - **Protection-level based Policy**: Grants or denies permissions based on the protection level.
   - **Signature-based Policy**: Controls permission assignment based on the signatures of the requesting application.
   - **Application Configuration-based Policy**: Controls permission assignment based on the configuration parameters of the requesting application, such as the set of requested permissions and application version.

2. **Interaction Policy (Run-time)**
   - **Permission-based Access Control Policy**: Provides static policy protection.
   - **Signature-based Policy**: Restricts the set of opponent applications based on their signatures.
   - **Application Configuration-based Policy**: Defines the desirable configurations of the opponent applications, such as minimum version and allowed/disallowed permissions.
   - **Context-based Policy**: Regulates interactions based on the transient state of the phone, such as location, time, Bluetooth connection, and battery level.

### Example Policies
#### Install-time Policy Example
Consider the PersonalShopper application, which interacts with various other applications like checkout applications, password vaults, and location-based search applications. In this example, the location-based search application (com.abc.lbs) wants to protect its "QueryByLocation" service from unauthorized access. The permission com.abc.perm.getloc is used to protect this service. The application requires a configuration-based policy to specify that the requester must also have the "ACCESS LOCATION" permission to be granted com.abc.perm.getloc.

#### Run-time Policy Example
To ensure that the checkout application used for payment is trusted, the PersonalShopper needs a signature-based policy. This policy ensures that when the source "PersonalShopper" (com.ok.shopper) starts an activity with the action "ACTION PAY," the resolved applications are signed by keys in a given set.

### SAINT Policy
SAINT enhances the application installation process and enforces interaction policies specified by both the caller and callee applications.

#### Install-Time Policy Enforcement
SAINT's install-time policy regulates the granting of application-defined permissions. An application declaring a permission P defines the conditions under which P is granted to other applications at install-time. The Saint installer enforces these policies by querying the AppPolicy provider, which maintains a database of all install and run-time policies. If the policy conditions hold, the installation proceeds; otherwise, it is aborted.

#### Run-Time Policy Enforcement
SAINT's runtime policy regulates the interaction of software components within Android's middleware framework. The IPC is allowed to continue only if all policies supplied by both the caller and callee are satisfied. The Saint policy enforcement code intercepts the IPC before any Android permission checks, queries the AppPolicy provider, and blocks the IPC if the conditions are not satisfied. Otherwise, the IPC is directed to the existing Android permission check enforcement software.

### Conclusion
By using permission labels and the associated protection levels, application developers can specify how other applications access their components. However, the limitations of Android's security framework highlight the need for more granular and flexible policies, such as those provided by SAINT.