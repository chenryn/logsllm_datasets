.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" this replaces an earlier man page written by walter harms
.\" .
.\"
.th ttyslot 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
ttyslot \- find the slot of the current user's terminal in some file
.sh synopsis
.nf
.br "#include " "       /* see notes */"
.pp
.b "int ttyslot(void);"
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br ttyslot ():
.nf
    since glibc 2.24:
        _default_source
    from glibc 2.20 to 2.23:
        _default_source || (_xopen_source && _xopen_source 
as "/etc/ttys".
it returns 0 on error.
since linux systems do not usually have "/etc/ttys", it will
always return 0.
.pp
on bsd-like systems and linux, the declaration of
.br ttyslot ()
is provided by
.ir  .
on system v-like systems, the declaration is provided by
.ir  .
since glibc 2.24,
.i 
also provides the declaration with the following
feature test macro definitions:
.pp
.in +4n
.ex
(_xopen_source >= 500 ||
        (_xopen_source && _xopen_source_extended))
    && ! (_posix_c_source >= 200112l || _xopen_source >= 600)
.ee
.in
.pp
minix also has
.ir fttyslot ( fd ).
.\" .sh history
.\" .br ttyslot ()
.\" appeared in unix v7.
.sh see also
.br getttyent (3),
.br ttyname (3),
.br utmp (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/posix_fadvise.2
.\" this manpage is copyright (c) 2004, michael kerrisk
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" 2004-05-40 created by michael kerrisk 
.\" 2004-10-05 aeb, minor correction
.\"
.th readahead 2 2021-03-22 "linux" "linux programmer's manual"
.sh name
readahead \- initiate file readahead into page cache
.sh synopsis
.nf
.br "#define _gnu_source" "             /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "ssize_t readahead(int " fd ", off64_t " offset ", size_t " count );
.fi
.sh description
.br readahead ()
initiates readahead on a file so that subsequent reads from that file will
be satisfied from the cache, and not block on disk i/o
(assuming the readahead was initiated early enough and that other activity
on the system did not in the meantime flush pages from the cache).
.pp
the
.i fd
argument is a file descriptor identifying the file which is
to be read.
the
.i offset
argument specifies the starting point from which data is to be read
and
.i count
specifies the number of bytes to be read.
i/o is performed in whole pages, so that
.i offset
is effectively rounded down to a page boundary
and bytes are read up to the next page boundary greater than or
equal to
.ir "(offset+count)" .
.br readahead ()
does not read beyond the end of the file.
the file offset of the open file description referred to by the file descriptor
.i fd
is left unchanged.
.sh return value
on success,
.br readahead ()
returns 0; on failure, \-1 is returned, with
.i errno
set to indicate the error.
.sh errors
.tp
.b ebadf
.i fd
is not a valid file descriptor or is not open for reading.
.tp
.b einval
.i fd
does not refer to a file type to which
.br readahead ()
can be applied.
.sh versions
the
.br readahead ()
system call appeared in linux 2.4.13;
glibc support has been provided since version 2.3.
.sh conforming to
the
.br readahead ()
system call is linux-specific, and its use should be avoided
in portable applications.
.sh notes
on some 32-bit architectures,
the calling signature for this system call differs,
for the reasons described in
.br syscall (2).
.sh bugs
.br readahead ()
attempts to schedule the reads in the background and return immediately.
however, it may block while it reads the filesystem metadata needed
to locate the requested blocks.
this occurs frequently with ext[234] on large files
using indirect blocks instead of extents,
giving the appearance that the call blocks until the requested data has
been read.
.sh see also
.br lseek (2),
.br madvise (2),
.br mmap (2),
.br posix_fadvise (2),
.br read (2)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/cexp.3
.so man3/strsignal.3
.so man2/fchown.2
.so man2/unimplemented.2
.\" copyright 1993 ulrich drepper (PI:EMAIL)
.\" and copyright 2008, linux foundation, written by michael kerrisk
.\"     
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" references consulted:
.\"     sunos 4.1.1 man pages
.\" modified sat sep 30 21:52:01 1995 by jim van zandt 
.\" remarks from PI:EMAIL fri jun 19 06:46:31 1998
.\" modified 2001-12-26, 2003-11-28, 2004-05-20, aeb
.\" 2008-09-02, mtk: various additions and rewrites
.\" 2008-09-03, mtk, restructured somewhat, in part after suggestions from
.\"     timothy s. nelson 
.\"
.th hsearch 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
hcreate, hdestroy, hsearch, hcreate_r, hdestroy_r,
hsearch_r \- hash table management
.sh synopsis
.nf
.b #include 
.pp
.bi "int hcreate(size_t " nel );
.b "void hdestroy(void);"
.pp
.bi "entry *hsearch(entry " item ", action " action );
.pp
.br "#define _gnu_source" "         /* see feature_test_macros(7) */"
.b #include 
.pp
.bi "int hcreate_r(size_t " nel ", struct hsearch_data *" htab );
.bi "void hdestroy_r(struct hsearch_data *" htab );
.pp
.bi "int hsearch_r(entry " item ", action " action ", entry **" retval ,
.bi "              struct hsearch_data *" htab );
.fi
.sh description
the three functions
.br hcreate (),
.br hsearch (),
and
.br hdestroy ()
allow the caller to create and manage a hash search table
containing entries consisting of a key (a string) and associated data.
using these functions, only one hash table can be used at a time.
.pp
the three functions
.br hcreate_r (),
.br hsearch_r (),
.br hdestroy_r ()
are reentrant versions that allow a program to use
more than one hash search table at the same time.
the last argument,
.ir htab ,
points to a structure that describes the table
on which the function is to operate.
the programmer should treat this structure as opaque
(i.e., do not attempt to directly access or modify
the fields in this structure).
.pp
first a hash table must be created using
.br hcreate ().
the argument \finel\fp specifies the maximum number of entries
in the table.
(this maximum cannot be changed later, so choose it wisely.)
the implementation may adjust this value upward to improve the
performance of the resulting hash table.
.\" e.g., in glibc it is raised to the next higher prime number
.pp
the
.br hcreate_r ()
function performs the same task as
.br hcreate (),
but for the table described by the structure
.ir *htab .
the structure pointed to by
.i htab
must be zeroed before the first call to
.br hcreate_r ().
.pp
the function
.br hdestroy ()
frees the memory occupied by the hash table that was created by
.br hcreate ().
after calling
.br hdestroy (),
a new hash table can be created using
.br hcreate ().
the
.br hdestroy_r ()
function performs the analogous task for a hash table described by
.ir *htab ,
which was previously created using
.br hcreate_r ().
.pp
the
.br hsearch ()
function searches the hash table for an
item with the same key as \fiitem\fp (where "the same" is determined using
.br strcmp (3)),
and if successful returns a pointer to it.
.pp
the argument \fiitem\fp is of type \fientry\fp, which is defined in
\fi\fp as follows:
.pp
.in +4n
.ex
typedef struct entry {
    char *key;
    void *data;
} entry;
.ee
.in
.pp
the field \fikey\fp points to a null-terminated string which is the
search key.
the field \fidata\fp points to data that is associated with that key.
.pp
the argument \fiaction\fp determines what
.br hsearch ()
does after an unsuccessful search.
this argument must either have the value
.br enter ,
meaning insert a copy of
.ir item
(and return a pointer to the new hash table entry as the function result),
or the value
.br find ,
meaning that null should be returned.
(if
.i action
is
.br find ,
then
.i data
is ignored.)
.pp
the
.br hsearch_r ()
function is like
.br hsearch ()
but operates on the hash table described by
.ir *htab .
the
.br hsearch_r ()
function differs from
.br hsearch ()
in that a pointer to the found item is returned in
.ir *retval ,
rather than as the function result.
.sh return value
.br hcreate ()
and
.br hcreate_r ()
return nonzero on success.
they return 0 on error, with
.i errno
set to indicate the error.
.pp
on success,
.br hsearch ()
returns a pointer to an entry in the hash table.
.br hsearch ()
returns null on error, that is,
if \fiaction\fp is \fbenter\fp and
the hash table is full, or \fiaction\fp is \fbfind\fp and \fiitem\fp
cannot be found in the hash table.
.br hsearch_r ()
returns nonzero on success, and 0 on error.
in the event of an error, these two functions set
.i errno
to indicate the error.
.sh errors
.br hcreate_r ()
and
.br hdestroy_r ()
can fail for the following reasons:
.tp
.b einval
.i htab
is null.
.pp
.br hsearch ()
and
.br hsearch_r ()
can fail for the following reasons:
.tp
.b enomem
.i action
was
.br enter ,
.i key
was not found in the table,
and there was no room in the table to add a new entry.
.tp
.b esrch
.i action
was
.br find ,
and
.i key
was not found in the table.
.pp
posix.1 specifies only the
.\" prox.1-2001, posix.1-2008
.b enomem
error.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br hcreate (),
.br hsearch (),
.br hdestroy ()
t}	thread safety	mt-unsafe race:hsearch