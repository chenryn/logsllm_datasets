的本地镜像（mirror）。利用这些镜像调试器可以像访问本地那样
访问目标进程内的数据、类型和虚拟机状态 
com.sun.jdi.connect 
调试器进程的 JVM 与目标进程的 JVM 之间的连接 
com.sun.jdi.connect.spi 
包含了一系列接口和类，用于开发新的传输服务（TransportService） 
com.sun.jdi.event 
JDI 事件和事件处理 
com.sun.jdi.request 
向调试器后端发送请求，请求的种类见下文 
通过 com.sun.jdi.request 包中的类，调试器可以向目标进程中的调试器后端发出请求
来订阅调试事件，表 28-8 列出了发送请求的接口名称和所对应的事件通知。 
表 28-8  JDI 中用于发送调试请求的接口 
接口 
请求 
AccessWatchpointRequest 
当目标进程中的指定字段被访问时得到通知 
BreakpointRequest 
当目标虚拟机执行到指定位置时得到通知 
ClassPrepareRequest 
当目标虚拟机准备指定的类时得到通知 
《软件调试》补编 
- 57 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
续表 
接口 
请求 
ClassUnloadRequest 
当指定的类被从目标虚拟机中卸载时得到通知 
ExceptionRequest 
当目标虚拟机中发生异常时得到通知 
MethodEntryRequest 
当目标虚拟机中的方法被调用（进入方法）时得到通知 
MethodExitRequest 
当目标虚拟机中的方法返回（从方法中出来）时得到通知 
ModificationWatchpointRequest 
当一个字段被设置时得到通知 
MonitorContendedEnteredRequest 
当目标进程中的线程等待到了存在竞争的监视对象
（monitor object）后得到通知 
MonitorContendedEnterRequest 
当目标进程中的线程开始等待一个已经被其他线程得到
的监视对象时得到通知 
MonitorWaitedRequest 
当目标进程中的线程结束等待监视对象时得到通知 
MonitorWaitRequest 
当目标进程中的线程即将等待监视对象时得到通知 
StepRequest 
当目标虚拟机中发生单步执行时得到通知 
ThreadDeathRequest 
当目标虚拟机中的线程终止时得到通知 
ThreadStartRequest 
当目标虚拟机中的线程启动时得到通知 
VMDeathRequest 
当目标虚拟机终止时得到通知 
WatchpointRequest 
定义一个被监视的字段 
以上接口均派生自 EventRequest 接口，因此可以使用 EventRequestManager 类来统一
管理和发送，当请求所对应的条件满足时，一个对应的 Event 对象会被放入到事件队列
（EventQueue）中，然后调试器可以从队列中取出这个事件。 
28.9.3  JVM TI 
与 JDI 是一个 100%使用 Java 语言开发的 Java 库不同，Java 虚拟机工具接口（JVM Tool 
Interface，简称 JVM TI）是一个本地的（native）编程接口。通过这个接口，工具软件可
以观察 Java 虚拟机（JVM）中所执行程序的状态并控制它的执行，以实现调试、Profiling、
监控、线程分析、覆盖率分析（Coverage Analysis）等目标。 
JVM TI 是 JDK 5.0 所引入的，它取代了本来用于 Profiling 的 JVMPI（Java Virutal 
Machine Profiler Interface）接口和用于调试的 JVMDI（Java Virtual Machine Debug Interface）
接口。 
从架构角度来看，JVM TI 是 JVM 为工具程序所提供的一个本地接口。使用这个接口
的客户模块被称为主体（Agent）。主体可以在进程内，也可以在进程外。进程内主体通常
是以动态链接库的形式存在的。可以使用任何支持 C 语言调用规范的本地语言开发主体，
JVM TI 的数据结构和函数定义在 jvmti.h 文件中。在图 28-13 所示的架构中，调试器使用
的是 JVM TI 的进程外接口（Out-of-process Interface）。 
JVM TI 共提供了几十个函数，分为 21 个组，表 28-9 列出了这些函数的名称和功能。
为了节约篇幅，除了组名占一整行外，表格的每一行列出了两个函数。 
表 28-9  JVM TI 的函数 
函数名称 
功能 
函数名称 
功能 
内存管理（Memory Management） 
Allocate  
分配内存 
Deallocate  
释放内存 
线程（Thread） 
GetThreadState 
取线程状态 
GetCurrentThread 
取当前线程的结构 
GetAllThreads 
取所有线程 
SuspendThread 
挂起线程 
SuspendThreadList 
挂起列表中的线程 
ResumeThread 
恢复线程 
《软件调试》补编 
- 58 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
ResumeThreadList 
恢复列表中的线程 
StopThread 
停止线程 
InterruptThread 
中断线程 
GetThreadInfo 
读取线程信息 
GetOwnedMonitorInfo  
取当线程所拥有的监
视对象信息 
GetOwnedMonitorStack
DepthInfo 
取线程所拥有的监视
对象信息和锁定这些
对象的栈帧深度 
GetCurrentContendedMo
nitor 
取指定线程等待进入
的竞争性监视对象 
RunAgentThread 
启动主体线程 
SetThreadLocalStorage 
设置线程局部存储的
指针 
GetThreadLocalStorage 读取线程局部存储的
指针 
线程组（Thread Group） 
GetTopThreadGroups 
读取 VM 中的顶层线
程组 
GetThreadGroupInfo 
取线程组的信息 
GetThreadGroupChildren 取线程组的活动线程
和子组 
栈帧（Stack Frame） 
GetStackTrace 
读取指定线程的栈帧
信息 
GetAllStackTraces 
读取所有存活线程的
栈帧信息 
GetThreadListStack- 
Traces 
读取指定线程列表中
各个线程栈帧信息 
GetFrameCount 
读取指定线程栈的栈
帧数 
PopFrame 
弹出指定线程的当前
栈帧 
GetFrameLocation 
读取当前执行位置 
NotifyFramePop 
当指定栈帧弹出时产
生 FramePop 事件 
强制提前返回（Force Early Return） 
ForceEarlyReturnObject 
强制返回结果为指定
对象或派生对象的方
法提早返回 
ForceEarlyReturnInt 
强制返回结果为整数
的方法提早返回 
ForceEarlyReturnLong 
强制返回结果为长整
数的方法提早返回 
ForceEarlyReturnFloat 
强制返回结果为浮点
数的方法提早返回 
ForceEarlyReturnDouble 
强制返回结果为双精
度浮点数的方法提早
返回 
ForceEarlyReturnVoid 
强制无返回结果的方
法提早返回 
堆（Heap） 
FollowReferences 
遍历对象引用 
IterateThroughHeap 
发起遍历堆中的所有
对象 
GetTag 
读取与指定对象关联
的 Tag 
SetTag 
设置与指定对象关联
的 Tag 
GetObjectsWithTags 
读取与指定 Tag 关联
的所有对象 
ForceGarbageCollection 强制内存回收（GC） 
1.0 堆（Heap 1.0） 
IterateOverObjectsReach
ableFromObject 
从指定对象遍历可到
达的对象 
IterateOverReachable- 
Objects 
从根遍历对象 
IterateOverHeap 
遍历堆 
IterateOverInstancesOf
Class 
遍历类的实例 
局部变量（Local Variable） 
GetLocalVariableObject 
读取指定对象类型的
局部变量的取值 
GetLocalVariableInt 
读取 int/short/ 
char/byte/boolean 型
局部变量的值 
GetLocalVariableLong 
读 Long 型局部变量
的值 
GetLocalVariableFloat 
读取浮点类型局部变
量的值 
GetLocalVariableDouble 读取双精度类型局部
变量的值 
SetLocalVariableObject 设置指定对象类型的
局部变量的取值 
SetLocalVariableInt 
读取 int 等类型局部
变量的值 
SetLocalVariableLong 
设置 Long 型局部变
量的值 
SetLocalVariableFloat 
设置浮点类型局部变