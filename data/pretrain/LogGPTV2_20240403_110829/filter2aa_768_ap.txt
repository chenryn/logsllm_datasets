### 本地镜像（Mirror）

利用这些镜像，调试器可以像访问本地资源一样访问目标进程内的数据、类型和虚拟机状态。

### com.sun.jdi.connect

该包提供了调试器进程的 JVM 与目标进程的 JVM 之间的连接功能。

### com.sun.jdi.connect.spi

此包包含了一系列接口和类，用于开发新的传输服务（TransportService）。

### com.sun.jdi.event

处理 JDI 事件及其相关操作。

### com.sun.jdi.request

通过 `com.sun.jdi.request` 包中的类，调试器可以向目标进程中的调试器后端发出请求，以订阅特定的调试事件。表 28-8 列出了发送请求的接口名称及对应的事件通知。

#### 表 28-8: JDI 中用于发送调试请求的接口

| 接口 | 请求 |
| --- | --- |
| AccessWatchpointRequest | 当目标进程中指定字段被访问时得到通知 |
| BreakpointRequest | 当目标虚拟机执行到指定位置时得到通知 |
| ClassPrepareRequest | 当目标虚拟机准备指定的类时得到通知 |
| ClassUnloadRequest | 当指定的类从目标虚拟机中卸载时得到通知 |
| ExceptionRequest | 当目标虚拟机中发生异常时得到通知 |
| MethodEntryRequest | 当目标虚拟机中的方法被调用（进入方法）时得到通知 |
| MethodExitRequest | 当目标虚拟机中的方法返回（从方法中出来）时得到通知 |
| ModificationWatchpointRequest | 当一个字段被设置时得到通知 |
| MonitorContendedEnteredRequest | 当目标进程中的线程等待到了存在竞争的监视对象后得到通知 |
| MonitorContendedEnterRequest | 当目标进程中的线程开始等待一个已经被其他线程持有的监视对象时得到通知 |
| MonitorWaitedRequest | 当目标进程中的线程结束等待监视对象时得到通知 |
| MonitorWaitRequest | 当目标进程中的线程即将等待监视对象时得到通知 |
| StepRequest | 当目标虚拟机中发生单步执行时得到通知 |
| ThreadDeathRequest | 当目标虚拟机中的线程终止时得到通知 |
| ThreadStartRequest | 当目标虚拟机中的线程启动时得到通知 |
| VMDeathRequest | 当目标虚拟机终止时得到通知 |
| WatchpointRequest | 定义一个被监视的字段 |

以上接口均派生自 `EventRequest` 接口，因此可以使用 `EventRequestManager` 类来统一管理和发送。当请求所对应的条件满足时，一个相应的 `Event` 对象会被放入到事件队列（`EventQueue`）中，然后调试器可以从队列中取出这个事件。

### 28.9.3 JVM TI

与完全使用 Java 语言开发的 JDI 不同，Java 虚拟机工具接口（JVM Tool Interface，简称 JVM TI）是一个本地编程接口。通过这个接口，工具软件可以观察 Java 虚拟机（JVM）中所执行程序的状态并控制其执行，从而实现调试、性能分析、监控、线程分析、覆盖率分析等目标。

JVM TI 是在 JDK 5.0 中引入的，它取代了原本用于性能分析的 JVMPI（Java Virtual Machine Profiler Interface）接口和用于调试的 JVMDI（Java Virtual Machine Debug Interface）接口。

从架构角度来看，JVM TI 是 JVM 为工具程序提供的一个本地接口。使用该接口的客户模块被称为代理（Agent）。代理可以在进程内也可以在进程外。进程内代理通常是以动态链接库的形式存在。可以用任何支持 C 语言调用规范的本地语言开发代理，JVM TI 的数据结构和函数定义在 `jvmti.h` 文件中。图 28-13 所示的架构中，调试器使用的是 JVM TI 的进程外接口（Out-of-process Interface）。

JVM TI 提供了数十个函数，分为 21 个组。表 28-9 列出了这些函数的名称和功能。

#### 表 28-9: JVM TI 的函数

| 函数名称 | 功能 | 函数名称 | 功能 |
| --- | --- | --- | --- |
| **内存管理** | | Allocate | 分配内存 | Deallocate | 释放内存 |
| **线程** | | GetThreadState | 获取线程状态 | GetCurrentThread | 获取当前线程的结构 |
| GetAllThreads | 获取所有线程 | SuspendThread | 挂起线程 | SuspendThreadList | 挂起列表中的线程 |
| ResumeThread | 恢复线程 | ResumeThreadList | 恢复列表中的线程 | StopThread | 停止线程 |
| InterruptThread | 中断线程 | GetThreadInfo | 读取线程信息 | GetOwnedMonitorInfo | 获取线程拥有的监视对象信息 |
| GetOwnedMonitorStackDepthInfo | 获取线程拥有的监视对象信息及锁定这些对象的栈帧深度 | GetCurrentContendedMonitor | 获取指定线程等待进入的竞争性监视对象 | RunAgentThread | 启动代理线程 |
| SetThreadLocalStorage | 设置线程局部存储的指针 | GetThreadLocalStorage | 读取线程局部存储的指针 |
| **线程组** | | GetTopThreadGroups | 读取 VM 中的顶层线程组 | GetThreadGroupInfo | 获取线程组的信息 |
| GetThreadGroupChildren | 获取线程组的活动线程和子组 |
| **栈帧** | | GetStackTrace | 读取指定线程的栈帧信息 | GetAllStackTraces | 读取所有存活线程的栈帧信息 |
| GetThreadListStackTraces | 读取指定线程列表中各个线程的栈帧信息 | GetFrameCount | 读取指定线程栈的栈帧数 |
| PopFrame | 弹出指定线程的当前栈帧 | GetFrameLocation | 读取当前执行位置 | NotifyFramePop | 当指定栈帧弹出时产生 FramePop 事件 |
| **强制提前返回** | | ForceEarlyReturnObject | 强制返回结果为指定对象或派生对象的方法提早返回 | ForceEarlyReturnInt | 强制返回结果为整数的方法提早返回 |
| ForceEarlyReturnLong | 强制返回结果为长整数的方法提早返回 | ForceEarlyReturnFloat | 强制返回结果为浮点数的方法提早返回 |
| ForceEarlyReturnDouble | 强制返回结果为双精度浮点数的方法提早返回 | ForceEarlyReturnVoid | 强制无返回结果的方法提早返回 |
| **堆** | | FollowReferences | 遍历对象引用 | IterateThroughHeap | 发起遍历堆中的所有对象 |
| GetTag | 读取与指定对象关联的 Tag | SetTag | 设置与指定对象关联的 Tag | GetObjectsWithTags | 读取与指定 Tag 关联的所有对象 |
| ForceGarbageCollection | 强制内存回收（GC） |
| **堆 1.0** | | IterateOverObjectsReachableFromObject | 从指定对象遍历可达的对象 | IterateOverReachableObject | 从根遍历对象 |
| IterateOverHeap | 遍历堆 | IterateOverInstancesOfClass | 遍历类的实例 |
| **局部变量** | | GetLocalVariableObject | 读取指定对象类型的局部变量的值 | GetLocalVariableInt | 读取 int/short/char/byte/boolean 型局部变量的值 |
| GetLocalVariableLong | 读 Long 型局部变量的值 | GetLocalVariableFloat | 读取浮点类型局部变量的值 | GetLocalVariableDouble | 读取双精度类型局部变量的值 |
| SetLocalVariableObject | 设置指定对象类型的局部变量的值 | SetLocalVariableInt | 设置 int 等类型局部变量的值 | SetLocalVariableLong | 设置 Long 型局部变量的值 |
| SetLocalVariableFloat | 设置浮点类型局部变量的值 | SetLocalVariableDouble | 设置双精度类型局部变量的值 |

《软件调试》补编  
- 57 –  
Copyright © 2009 ADVDBG.ORG All Rights Reserved