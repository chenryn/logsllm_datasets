HTML文件是以包含一个HEAD与一个BODY的HTML对象构建而成。
在HEAD里，TITLE对象定义的是文件标题，也就是显示在浏览器窗口标题栏上的
那个，也是书签列表的默认名称。再者，HEAD里，还有一个LINK对象，这多半
是用来给出网页维护者的相关信息。
这个文件里，浏览器显示可看得见的范围则是BODY的内容。
引号括起来字符串以外的空格不重要，所以我们可以自由地使用垂直与水平的空格
以完整地呈现所要强调的结构，就像HTML的prettyprinter所做的那样。
所有其他内容都是可打印的ASCII文字，只有三个例外。字面上的尖括号必须以特
殊编码体现，叫做实体（entities），它包括&符号、标识符（identifier）以及分号，
例如：&lt；与&gt：。因为&已用来作为实体的起始字母，所以它自身有字面上的
实体名称：&amp1.针对重音字符，HTML支持一个具有最现代的所有功能的实体，
摘盖了大部分我们可以书写的西欧语言，例如，caf&eacute;dubongo&ucirc;t
会得到 café du bon gout.
www.TopSage.com
---
## Page 123
管道的神奇魔力
I11
虽然我们的小型范例里未提及，字体的修改也是可以在HTML里做到，可使用B
（粗体）、EM（音节强调）、I（斜体）、STRONG（特粗）以及TT（打字机字体（固
定宽度字符））环境，当你写boldphrase，会得到boldphrase。
要将我们的办公室名录转换成正式的HTML，只需要再知道一件事：如何格式化表格，
因为那才是其正的办公室名录，且我们不想使用打字机字体，强制每一行在润览器上显
示时排列一数完全对齐。
在HTML3.0及之后的版本上，表格包括一个TABLE环境，其内有行，每行是一个表
格行（TR）环境。在每一行里是单元格（cell），叫做表格数据，每个单元格是一个TD
环境。特别值得一提的是，每列（垂直）数据不接收任何特殊标记：一个数据列是一组
单元格，取自表格里所有行（水平）中相同的行位置。幸好，我们无须预先声明行与列
的数目。浏览器与格式化程序的工作便是收集所有的单元格，知道在每一列内的最宽单
元格，再将表格格式化，使其列宽够大，足以能够容纳那些最宽的单元格。
在我们的办公室名录范例中，只需要三列，所以标记范例如下：
Jones, Adrian W.
7D>
555-0123
0SD211
另一种等效的但较复杂也较难阅读的方式为：
Jones, Adrian , 555-01230SD211
因为我们选择保留办公室名录纯文本版里的特殊字段分隔字符，所以有足够的信息可以
识别每列中的单元格。而且，因为HTML文件里，空白多半不带特殊含义，我们就不需
要特别注意标签是否完好排列。如果之后有需要，htnl-pretty还是可以做得很完美。
我们的转换过滤器有三个步骤：
www.TopSage.com
---
## Page 124
112
1.
输出前置的样板文件（boilerplate）直到内文开始处。
com
2.
将名录里的每一行包括在表格标记里。
3.
输出结尾的样板文件（boilerplate）。
我们得在这个小范例里作点小变动：将DOCTYPE命令更新为近期版本的语法层级，看
起来就像这样：
你无须记住这个，因为html-Dretty有选项可产生任何标准HTML语法层级的输出，
所以你只要从它的输出中，复制适用的DOCTYPE命令即可。
至此，显然大部分的工作只是在编写样板文件（boilerplate），不过这很简单，因为我们
可以从小HTML范例中复制文字，唯一比较侧重编程的步骤是在中间部分，这部分只需
几行awk就可以办到。不过，使用sed流编辑程序的替换功能，可以更简化工作，需要
两个编辑命令：一个是以取代嵌人的制表符定界符，另一个是将整行包括
在...中。我们先临时假设名录里没有重音字符，不过就算要将
尖括号与&符号加到输人流里也不难，只要增加三个初始的sed步骤即可。我们将完整
的程序集放在例5-2中。
例5-2：将办公室名录转换为HTML格式
#1/bin/sh
将制表符（Tab）所分隔的文件，转换为遵循语法的HTML
用法：
tav-to-hitml  outfi1e
cat 
office directory
BOPIL8
\6=:d\==s,-pas
将特殊字符转换为实体（entities）
1.0=1[9\=>=g，a-
\.5=<>=\=8,0-
.5m1\=＜，0-
提供表格标记（markup）
-e 's=^,*$=
&=
www.TopSage.com
---
## Page 125
管道的神奇魔力
113
cat 
BOPILE
outfi1e
sed \
- *§= =\nbap;=g′\
\b=1[ox\=1=s,a-
www.TopSage.com
---
## Page 126
第5章
-e 's==\&cent;=g′\
-e 8=f=\&pound;=g′\
.0=umn\=,9-
- s=y=\yacute;=g'\
e's=p=\&thorn;=g′\
-e *s==\&yum1 /=g*\
-8$
这个过滤器的使用方式如下：
$ cat danish
显示IS0 8859-1输码的Danish范例文字
鲁en med 4en 1a i 1& af én halvp,
og én storo, langs den graske kyst,
$ ieo8859-1-to-btml danleh
将文字转换为HTNL实体
Cen ned aen la 1 l& af en halvp,
og én stor o, langs den graske kyst.
5.3文字解谜好帮手
字谜游戏会给你一些单词的线案，但大部分时候我们还是被困住，例如：具有10个字母
的单词，以ab起始，且第七个字不是x就是z。
用awk或grep进行正则表达式模式匹配是必需的，问题是：要查找什么文件呢？使用
UNIx拼写字典是不错的选择，大部分系统的/usr/dict/words下都应该找得到它（还
有像/usr/share/@ict/words与/usr/share/lib/dict/words 也是可能出现的地
方）。这是一个简单的文本文件，每行一个单词，以字典顺序排列。我们可以轻松地从
任何的文本文件集合建立另一个具相似外表的文件，如下所示：
第二个管道步骤是将大写字母转换成小写，第三个则是以换行字符取代非字母字符，最
后为结果进行排序，并去除重复部分，让每行都为唯一值。在第三步里，视搬号（）为
字母，因为它们在缩写里会用到。每个UNIX系统都具有可以此方式处理的整组文字一
例如格式化后的手册页在/usr/man/cat*/*与/usr/local/man/cat*/*内，我们的
Internet上你也可以找到很多种语言的单词列表（注4）。
运 4 :
& ftp:/ftp.ox.ac.wk/pub/wordlists/, ftp://qiclab.scn.rain.com/pwb/wordlists/、 ftp://
ibiblio.org/pub/docs/books/gutenberg/etexr96/pgw*, v 及, hrrp://www.phreak.org/humi/
wordlists.shrmi中取得，也可以直接在Internet上垂我°word list”，一样能我到很多相
英信息。
www.TopSage.com
---
## Page 127
管道的神奇魔力
75
我们假设已经以此方式建立了单词列表的集合，并将它们存储在十个标准的地方，以便COIm
可以从脚本中参考到它。我们编写的程序如例5-4所示。
例5-4：文字解谜的好帮手
通过一堆单词列表，进行类似egrep（1）的模式匹配
#1/bin/sh
 word lists
语法：
puzzle-help egrep-pattern [word-1ist-files]
FIL&S=*
/usr/dict/words
/usr/share/dict/words
/usr/local/share/dict/words.biology
/usr/share/1ib/dict/words
/usr/local/share/dict/words.chemistry
/usr/local/share/dict/words,general
/usr/1ocal/share/dict/words.knuth
/usr/1oca1/share/dict/words.manpages
/usr/local/share/dict/worda.latin
/usr/1oca1/share/dict/words.mathematics
/usr/1ocal/share/dict/words.physics
/usr/1ocal/share/dict/words.roget
/usr/loca1/share/dict/words,sciences
/usr/loca1/share/dict/words,webster
/usr/local/share/dict/words,UNIX
patterns*$1"
egrep -h -1 *Spattern* sPILEs 2> /dev/nu11 1 sort -u -f
FILES变量保存了单词列表文件的内建列表，可供各个本地站点定制。grep的-h选项
指示最后结果不要显示文件名，-i选项为忽略字母大小写，我们还用了2>/dev/nul1
丢弃标准错误信息的输出，这是用于单词列表文件不存在或是在它们缺乏必需的读取权
限的情况（这种重定向在7.3.2节里有详尽的介绍）。最后的sort步骤则可以简化最后
的结果，让列表里没有重复单词，并忽略字母大小写。
现在就可以找到我们要寻找的单词了：
Spuzzle-help.^b.....[xz]...$1 fmt
banboozled Bamboozler bamboozles bdDenizens bdwheezing Belshazzar
botanizing Brontozoum Bucholzite bulldozing
能找出每行有6个辅音字母的英文单词吗？你可以这么做：
Knightsbridge
mightn't
oughtn't
www.TopSage.com
---
## Page 128
116
第5章
若你觉得y不算是元音，那就会显示更多的单词，例如encryption、klystron、porphyry、
syzygy都是。
只要在最后加上过滤步骤：egrep-i·^[a-z]+S'，我们可以迅速排除列表里有缩写
的那些，不过它们出现在单词列表里无伤大雅。
5.4单词列表
在1983年到1987年之间，贝尔实验室的研究人员JonBentley在《Communicationsof
the ACM》写了篇有趣的专栏《Programming Pearls》。专栏的部分文章集结之后，作
了相当程度的变动，作为两本书出版一见本书后参考书目列表，专栏中有篇文章是
Bentley下的战帖：写一个文字处理程序，找出n个出现最频繁的单词，并在输出结采的
列表上加人它们出现的次数，接照次数由大至小排序。著名计算机科学家DonaldKnuth
与DavidHanson分别回应了两个聪明有趣的程序（注5），每个程序都是花上数小时编
写出来的。Bentley最初的定义井不精准，因而Hanson再次给出一个解释：在给定的文
本文件以及整数=下，必须将单词显示出来（还要加上它们出现频率），按照这些单词出
现的频率，从出现最多的n次，依次往下排列。
针对Bentley的第一篇文章，贝尔实验室的研究人员DougMcllroy回头检查Knuth的程
序，提供一个6个步骤UNIX解决方案，仅需几分钟便能开发完成，且第一次就运行无
误。此外，不同于其他两个程序的地方是：Mcllroy的程序并未指定限制性的常量，包
括单词长度、唯一单词的数目以及输人文件大小。也就是说，它的想法是：一个单词的
构建完全是由一个简单的模式所定义，这在他程序最前面的两行可执行语句里给定，这
使得单词识别算法的更改变得容易了。