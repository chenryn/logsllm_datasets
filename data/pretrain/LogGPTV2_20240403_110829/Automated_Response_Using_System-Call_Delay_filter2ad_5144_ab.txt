compared against those in the normal proﬁle. Any sys-
tem call pair (the current call and a preceding call within
the current window) not present in the normal proﬁle is
called a mismatch. Any individual mismatch could indi-
cate anomalous behavior (a true positive), or it could be
a sequence that was not included in the normal training
data (a false positive). The current system call is deﬁned
as anomalous if there are any mismatches within its win-
dow.
To date, all of the intrusions we have studied produce
anomalous sequences in temporally local clusters. To fa-
cilitate the detection of these clusters, we record recent
anomalous system calls in a ﬁxed-size circular array,
which we refer to as a locality frame. More precisely,
let n be the size of our locality frame, and let A i be the
i-th entry of the locality frame array, with 0 ≤ i  0, and is 0 other-
wise. Thus, the locality frame implicitly stores the num-
ber of the past n system calls which were anomalous.
Ai, the local-
We call this total of recent anomalies,
ity frame count (LFC).2 For the experiments described
below, we used a locality frame of size 128.
(cid:1)
3 pH Design
pH performs two important functions: It monitors indi-
vidual processes at the system-call level, and it automat-
ically responds to anomalous behavior by either slowing
down or aborting system calls. Normal behavior is de-
termined by the currently running binary program; re-
sponse, however, is determined on a per-process basis.
To minimize I/O requirements and maximize efﬁciency,
stability, and security, we have implemented most of pH
in kernel space. We considered several alternative ap-
proaches, including audit packages, system-call tracing
utilities (such as strace), and instrumented libraries.
However, each of these other approaches has serious
drawbacks. Audit packages generate voluminous log-
ﬁles, which are expensive to create and even more ex-
pensive to analyze. Additionally, they do not routinely
record every system call. User-space tracing utilities are
too slow for our application, and in some cases, they in-
terfere with privileged daemons to the extent that they
behave incorrectly. Instrumented libraries cannot detect
every system call, because not every system call comes
through a library function (e.g., buffer overﬂow attacks).
In addition, a kernel implementation allows us to put
our monitoring and response mechanisms exactly where
they are needed, in the system call dispatcher, and allows
the implementation to be as secure as the kernel.
For each running executable, pH maintains two arrays
of pair data: A training array and a testing array. The
training array is continuously updated with new pairs as
they appear; the testing array is used to detect anomalies,
and is never modiﬁed except by replacing it with a copy
of the training array. Put another way, the testing array
is the current normal proﬁle for a program, while the
training array is a candidate future normal proﬁle.
A new “normal” is installed by replacing the testing ar-
ray with the current state of the training array. The re-
placement occurs under three conditions: (1) the user ex-
2A somewhat different approach was taken in Hofmeyr [20], where
the measure of anomalous behavior was based on Hamming distances
between unknown sequences and their closest match in the normal
database.
plicitly signals via a special system call (sys pH) that a
proﬁle’s training data is valid; (2) the proﬁle anomaly
count exceeds the parameter anomaly limit; (3) the
training formula is satisﬁed. When an anomaly is de-
tected, the current system call is delayed according to a
simple formula. Details of these conditions and actions
are given in the next several paragraphs.
The training to testing copy can occur automatically
based on the state of the following training statistics:
train count : # calls since array initialization
last mod count : # calls since array was last
normal count = train count − last mod count
modiﬁed
When the training array meets all of the following con-
ditions, it is copied onto the testing array (note: this is
the normal mechanism for initiating anomaly detection
in the system):
last mod count > mod minimum
normal count > normal minimum
train count
normal count > normal ratio
The three parameters on the right are user deﬁned, and
can be set at runtime.
As we mentioned earlier, pH responds to anomalies by
delaying system call execution. The amount of delay is
an exponential function of the current LFC, regardless
of whether the current call is anomalous or not. The
unscaled delay for a system call is d = 2LFC. The effec-
tive delay for a system call is d × delay f actor, where
delay f actor is another user-deﬁned parameter. Note
that delays may be disabled by setting delay f actor to
0. If the LFC ever exceeds the tolerization limit pa-
rameter (which is 12 for the experiments described be-
low), the training array is reset, preventing truly anoma-
lous behavior from being incorporated into the testing
array.
Because pH monitors process behavior based on the exe-
cutable that is currently running, the execve system call
causes a new proﬁle to be loaded. Thus, if an attacker
were able to subvert a process and cause it to make an
execve call, pH might be tricked into treating the cur-
rent process as normal, based on the data for the newly-
loaded executable. To avoid this possibility the maxi-
mum LFC count (maxLFC) for a process is recorded. If
maxLFC exceeds the abort execve threshold, then all
execve’s are aborted for the anomalous process.
pH also keeps a count of the raw number of anoma-
lies each proﬁle has seen. This count can be seen as a
measure of ongoing, non-clustered abnormal behavior.
If this number exceeds the parameter anomaly limit,
pH automatically copies the training array to the test-
ing array, causing pH to treat similar future behavior as
normal. Borrowing from immunology, we refer to this
process as tolerization. Low values of anomaly limit
allow pH to automatically tolerize most novel behavior,
while higher values inhibit tolerization. When a system
is initially set up, automatically-created normal proﬁles
may contain too little normal behavior. To reduce the
number of reported anomalies, anomaly limit should
be set to a small value (less than 10). Then, once the
system has stabilized, anomaly limit should be set to
at least 20 to prevent pH from automatically learning the
behavior of attacks.
4 Implementation
The pH prototype is implemented as a patch for the
Linux 2.2 kernel, and was developed and tested on sys-
tems running a pre-release of the Debian/GNU Linux
2.2 distribution [35]. The modiﬁed kernel is capable of
monitoring every executed system call, recording pro-
ﬁles for every executable. An overview of the system is
shown in Figure 1.
Program proﬁles for each executable are stored on disk.
Each proﬁle contains both a training and testing array,
and so is actually two “proﬁles” by the terminology in
Section 2. The kernel loads the current proﬁle when
a new program begins executing (on execve), and then
writes it out again when the process terminates. When
a new executable is loaded via the execve system call,
the kernel attempts to load the appropriate proﬁle from
disk; if it is not present, a new proﬁle is created.
If
another process runs the same executable, the proﬁle
is shared between both processes. To prevent consis-
tency problems due to interleaving, each executing pro-
cess maintains its own record of recent system calls (its
current sequence). When all processes using a given pro-
ﬁle terminate, the updated proﬁle is saved to disk. A
loaded proﬁle consumes approximately 80K of kernel
(non-swappable) memory.
We modiﬁed the system call dispatcher so that it calls
a pH function (pH process syscall) prior to dis-
patching the system call. pH process syscall im-
plements the monitoring, response, and training logic.
pH is controlled through its own system call, sys pH,
which allows the superuser (root) to take the following
actions:
• Start, stop monitoring processes.
• Set system parameters (see Section 3 for descrip-
tions):
– delay f actor
– abort execve
– mod minimum
– normal minimum
– normal ratio
– tolerization limit
– anomaly limit
• Turn on/off logging of system calls to disk (expen-
sive, used for debugging).
• Turn on/off logging novel sequences to disk.
• Status (prints out current values of system parame-
ters to the kernel log).
• Write all proﬁles to disk.
• Reset : Resets the proﬁle to be empty.
• Start normal : Copies the training array for
pid’s executable to its testing array, and marks the
proﬁle as normal.
• Tolerize : Change the normal ﬂag for pid’s
proﬁle to 0, reset its locality frame, and cancel any
current delay for it.
• Sensitize : Clears the training array. This
mechanism is used to prevent known true positives
from being incorporated into the training data.
• Turn on/off debugging messages sent to kernel log-
ging facility.
More speciﬁcally, we extended the Linux task structure
(the kernel data structure used to represent processes and
kernel-level threads) with a new structure which con-
tains the following ﬁelds: the current window of system
calls for the task, a locality frame, and a pointer to the
current proﬁle. A proﬁle is a structure containing two
byte-arrays for storing pairs (the training and testing ar-
rays) and some additional training statistics described in
Section 3.
kernel data
task_struct:
pH: profile
sequence
LFC
profile:
test
train
system
call
user code
and data
system call
dispatcher
delay
pH
testing
delay
training
scheduler
system call
implementations
Figure 1: Basic ﬂow of control and data in a pH-modiﬁed Linux kernel.
5 Experimental Results
In this section, we report on some early experiments test-
ing out pH in a live environment. We are interested in
three aspects of the system: Its effectiveness in intrusion
response (can it really detect and stop an attack before
the system is compromised?), performance impact (what
is the overhead of the installed system?), and usability
(what is it like to live with pH on your own computer?).
5.1 Can pH detect and stop attacks in time to
prevent system compromise?
To test how pH could respond to security violations, we
tested its behavior by seeing how it could detect and re-
spond to a Secure Shell (SSH) daemon [29] backdoor,
an SSH daemon buffer overﬂow, and a sendmail [13]
attack that exploits a bug in the Linux kernel’s capabili-
ties code. These three violations all allow an attacker to
obtain root privileges, using different techniques to gain
access. Delays alone are signiﬁcant inhibitors of these
attacks; with execve aborts, pH can effectively stop all
of them.
To test the SSH attacks, the sshd program in Debian
2.2’s packaged version of Secure Shell (ssh-nonfree),
version 1.2.27-6 was modiﬁed in two basic ways. First,
it was made to link against the RSAREF2 library, to
make it vulnerable to a buffer overﬂow attack script pub-
lished on the BUGTRAQ mailing list [2]. Second, the
source was modiﬁed using the rkssh5 trojan patch [37],
and was built using the “global password” ﬂag. This op-
tion allows an attacker to access to any account on the
system using a compiled in, MD5-encoded password.
In addition, use of this password disables most logging,
minimizing the evidence of the intrusion.
A normal proﬁle for this modiﬁed sshd binary was cre-
ated by exercising the program on a personal worksta-
tion. Normal logins via root and a regular user were
tested, using the password, RSA-secured rhosts, and
pure RSA methods of authentication. Also, failed lo-
gins were tested, using nonexistent users and incorrect
passwords. Together these produced 687 sequences, and
a proﬁle with 1725 pairs, over 47756 system calls.
Relative to this synthetic normal proﬁle, we ﬁrst tested
whether pH could detect the use of the global password
to gain access to the root account. With all responses
disabled, the backdoor produced 5 anomalies, 3 in the
child (which exec’s the remote user’s shell), and 2 in the
50
40
30
20
10
)
s
e
i
f
f
i
j
(
y
a
l
e
D
0
0
50
100
150
System Call Count
200
Figure 2: A graph showing the pH-induced system-call
delay during the sshd backdoor intrusion. Note the ex-
ponential increase (from 0 to 8, 16, then 32) and de-
crease, with a constant delay for most calls within the
locality frame. The process shown is the child process,
and it terminates with a shell being exec’d. The pair
window size is 6, the locality frame size is 128, and the
delay f actor is set to 4. Time is measured in jifﬁes,
which are 1/100 of a second on Linux running on i386-
compatible machines.
parent (which maintains the network connection). Set-
ting delay f actor to 4 produced the same anomaly pro-
ﬁle, but did not prevent the remote user from logging
in; however, the resulting connection was slowed down
signiﬁcantly, as shown in Figure 2. With abort execve
set to 1, the backdoor was closed, whether delays were
enabled or not.
With all responses disabled, the buffer overﬂow attacked
produced 4 clustered anomalies in the parent SSH pro-
cess. Setting delay f actor to 4 produced the same