提示：
你从坐标方格的左上平台(0，0)出发。最少耗时多久你才能到达坐标方格的右下平台 (N-1,N-1)?
认在方格内部游动是不耗时的。当然，在你游泳的时候你必须待在坐标方格里面。
意一个平台，但是前提是此时水位必须同时淹没这两个平台。假定你可以瞬间移动无限距离，也就是默
雨了。当时间为t时，此时雨水导致水池中任意位置的水位为t。你可以从一个平台游向四周相邻的任
在一个 N×N 的坐标方格 grid 中，每一个方格的值 grid[ijjl 表示在位置(iji) 的平台高度。现在开始下
题目大意
Note:
Example 2: 
·给出一个 grid[ijj 方格，每个格子里面表示游泳池里面平台的高度。t时刻，游泳池中的水的高度
●grid[ij]j] 位于区间[0,., N*N -1] 内。
●2= len(grid) ll col >= len(grid[o]) {
"github.com/halfrost/LeetCode-Go/template"
return minwait
for minwait  maxwait {
flags[i][j] = -1 
maxwait = row[j] 
---
## Page 753
Examples:
Return the minimum number of rabbits that could be in the forest.
many other rabbits have the same color as them. Those answers are placed in an array.
In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how
题目
781. Rabbits in Forest
Explanation:
Output:5 
Input: answers = [1, 1, 2] 
func swimInwaterl(grid [][]int) int {
//解法二 并查集(并不是此题的最优解)
return res - 1 
for uf.Find(O) != uf.Find(n*n-1) {
n, uf, res := len(grid), template.UnionFind{}, 0 
uf.Init(n * n) 
addFlags(grid, flags, flag, row, col+l)
addFlags(grid, flags, flag, row, col-1)
addFlags(grid, flags, flag, row+l, col)
addFlags(grid, flags, flag, row-l, col)
flags[row] [col] = flag 
if grid[row][col] > flag ll flags[row] [col] == flag {
 return
res++
for i := O; i res {
uf.Union(i*n+j，i*n+j+1)
uf.Union(i*n+j，i*n+j+n) 
 continue
---
## Page 754
代码
解题思路
说明：
颜色。我们将这些回答放在 answers 数组里。返回森林中兔子的最少数量。
森林中，每个兔子都有颜色。其中一些兔子（可能是全部）告诉你还有多少其他的兔子和自己有相同的
题目大意
Note:
·给出一个数组，数组里面代表的是每个兔子说自己同类还有多少个。要求输出总共有多少只兔子。
·answers 的长度最大为1000。
 2. Each answers[i] will be an integer in the range [0, 999].
1. answers will have length at most 1000.
func numRabbits(ans []int) int {
package leetcode
·answers[i] 是在 [0,999] 范围内的整数。
Output: 0
Input: answers = [] 
Output: 11 
Input: answers = [10, 10, 10]
answered plus 2 that didn't.
The smallest possible number of rabbits in the forest is therefore 5: 3 that
Say the rabbit that answered "2" was blue.
The rabbit than answered "2" can't be red or the answers would be 
The two rabbits that answered "1" could both be the same color, say red.
into the array.
Then there should be 2 other blue rabbits in the forest that didn't answer
inconsistent.
for -, v := range ans { 
total,m := O,make(map[int]int)
少，当有种类的兔子为〇以后，还有该种类的兔子报数，
这一题关键在于如何划分不同种类的兔子，
数字中可能兔子汇报的人数小于总兔子数。
[2,2,2,2,2,2]，这其实是 3 个种类，总共6 只兔子。用 map 去重相同种类的兔子，不断的减
if m[v] == 0 {
m[v] += v 
total += v + 1
，有可能相同种类的兔子的个数是一样的，比如
需要当做另外一个种类的兔子来看待。
---
## Page 755
代码
解题思路
有可能得到的字符串集合。
给定一个字符串 S，通过将字符串S 中的每个字母转变大小写，我们可以获得一个新的字符串。返回所
题目大意
Note:
Examples:
 another string. Return a list of all possible strings we could create.
 Given a string S, we can transform every letter individually to be lowercase or uppercase to create
·输出一个字符串中字母变大写，小写的所有组合。
题目
784. Letter Case Permutation
·DFS 深搜或者 BFS 广搜都可以。
●S will consist only of letters or digits.
●S will be a string with length between 1 and 12 .
package leetcode
[.stez.] :andano
Input: S = "12345"
[.tze. ‘.+ze.] :andano
Input: S = "3z4"
Output: ["alb2", "a1B2", "Alb2", "A1B2"]
Input: S = "alb2"
import （
"strings'
return total
}else {
m[v]--
---
## Page 756
// [mqe Mqe mQe MQe] -> [mqe Mqe mQe MQe mqE MqE mQE MQE]
//第二步：
//解法二，先讲第一个字母变大写，然后依次把后面的字母变大写。最终的解数组中答案是翻倍增长的
[]int, res *[]string) 
func lettercasePermutation(s string) []string {
// [mqe,Mqe］ -> [mqe Mqe mQe MQe]
三
//解法一，DFS 深搜
二
/
for k, v := range S { 
S = strings.ToLower(s) 
res := make([]string, 0, l [mqe, Mqe]
第一步：
b := []byte(s) 
 findLettercasePermutation(ss, pos, i, O, C, &res)
 return []string{}
C = c[:len(c)-1]
findLettercasePermutation(s, pos, target, i+l, C, res)
C = append(c，i)
return
*res = append(*res, string(b))
 pos = append(pos,i)
---
## Page 757
Examples:
answer[0] = p and answer[1] = q.
What is the K-th smallest fraction considered? Return your answer as an array of ints, where 
consider the fraction p/q.
A sorted list A contains 1, plus some number of primes. Then, for every p = 'a' && c= 'A' &&c  p*A[j] {
for j  float64(mid)*float64(A[j]) {
count += n - j 
b
p = A[i]
j++
=A[j]
---
## Page 760
注意：
出多少个非负整数x，有 f(x)=K的性质。
例如，f(3)=0，因为3!=6的末尾没有0；而f(11)=2，因为11!= 39916800末端有2个0。给定K，找
f(x)是 x!末尾是0的数量。
题目大意
Example 2: 
Example 1: 
property that f(x) = K.
39916800 has 2 zeroes at the end. Given K, find how many non-negative integers × have the 
and by convention, 0! = 1.) 
Let f(x) be the number of zeroes at the end of ×!. (Recall that ×x! = 1 * 2 * 3 * ... * x,
题目
793. Preimage Size of Factorial Zeroes Function
Note:
For example, f(3) = 0 because 3!= 6 has no zeroes at the end, while f(11) = 2 because 11!=
●K will be an integer in the range [0, 10^9]
Explanation: There is no x such that x! ends in K = 5 zeroes.
output:0
Input: K = 5
Explanation: 0!, 1!, 2!, 3!, and 4! end with K = 0 zeroes.
Output:5 
Input: K = 0 
func (a SortByFraction) Less(i, 
Func (a SortByFraction) Swap(i，j int) { a[i]，a[j] = a[j]，a[i] }
func (a SortByFraction) Len() int 
type SortByFraction []Fraction
// SortByFraction define
denominator int
molecule 
int
 jint） bool {
return len(a)}
---
## Page 761
解题思路
·给出一个数K，要求有多少个 n 能使得n！末尾O的个数等于K。
·K是范围在[0,10~9]的整数。
由上面这个递推还能推出通项公式(不过这题不适用通项公式，是用递推公式更方便)：
这个总数就即是 K。针对不同的 n，an 的通项公式不同，所以表示的 K 的系数也不同。cn 的通项公式
上面式子中，所有有因子5的个数为：
论以后，就可以用数学的方法推导了。首先n 可以表示为 5 进制的形式
所有数的因子 5 的个数总和。其次此题的结果一定只有 0 和 5 (分析见上一种解法)。有了这两个结
这一题也可以用数学的方法解题。见解法二。这个解法的灵感来自于：n！末尾〇的个数等于[1,n]
6，因为 25 提供了 2个 5，
*K，在[0，5＊K］区间内二分搜索，判断 mid 末尾〇的个数，如果能找到K，那么就范围
这一题是基于第172 题的逆过程加强版。第172 题是给出，求得末尾0的个数。由第172 题可
找不到任何的 n 与之对应。
在 [15,20〕 内取值，K = 3；n在 ［20,25） 内取值，K = 4；n在 ［25,30〕 内取值，K =
[0,5〕 内取值，K= 0；n在 [5,10〕 内取值，K = 1；n在 [10,15〕 内取值，K= 2；
K 值对应的 n 是 0。 在 5^n 的分界线处会发生跳变，所有有些值取不到。例如，n 在 
125，就有可能末尾增加多个 0)。所以有效的  值对应的 n 的范围区间就是 5。反过来，无效的
的个数又加一了，末尾又可以多1个或者多个0(如果加5 以后，有多个5的因子，例如 25，
5，如果找不到这个，返回0。为什么答案取值只有0 和5 呢？因为当  增加 5 以后，因子 5
以知道，n！末尾0的个数取决于因子 5 的个数。末尾可能有 个 0，那么 最多可以等于 5
，也就提供了 2个0，所以 永远无法取值等于5，即当=5 时,
K=
=Y
i
an*Cn
an*Cn
---
## Page 762
代码