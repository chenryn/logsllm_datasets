  * Electron version: 1.7.x
  * Operating system: Windows 10 (1703 OS Build 15063.540)
### Expected behavior
Setting a windows position and asking for it should return the same value.
### Actual behavior
The Y-Position is always wrong when the window is on a secondary monitor.
### How to reproduce
  * connect a secondary monitor that is larger to the right of the primary monitor
  * run below code
  * notice how the Y-Position as returned by `win.getPosition()` is not the same that was set when creating the window
My monitor setup is like the following (secondary monitor is larger):
![image](https://user-images.githubusercontent.com/900690/31489848-5df835da-
af42-11e7-96ac-0a2a353f5f5e.png)
Code:
    const { app, BrowserWindow } = require('electron')
    const path = require('path')
    const url = require('url')
    // Keep a global reference of the window object, if you don't, the window will
    // be closed automatically when the JavaScript object is garbage collected.
    let win
    function createWindow() {
        // Create the browser window.
        let y = 184;
        console.log("Setting Y: " + y)
        win = new BrowserWindow({ width: 800, height: 600, x: 1600, y: y })
        setInterval(function () {
            console.log("Y is: " + win.getPosition()[1])
        }, 2000);
        // and load the index.html of the app.
        win.loadURL(url.format({
            pathname: path.join(__dirname, 'index.html'),
            protocol: 'file:',
            slashes: true
        }))
        // Open the DevTools.
        win.webContents.openDevTools()
        // Emitted when the window is closed.
        win.on('closed', () => {
            // Dereference the window object, usually you would store windows
            // in an array if your app supports multi windows, this is the time
            // when you should delete the corresponding element.
            win = null
        })
    }
    // This method will be called when Electron has finished
    // initialization and is ready to create browser windows.
    // Some APIs can only be used after this event occurs.
    app.on('ready', createWindow)
    // Quit when all windows are closed.
    app.on('window-all-closed', () => {
        // On macOS it is common for applications and their menu bar
        // to stay active until the user quits explicitly with Cmd + Q
        if (process.platform !== 'darwin') {
            app.quit()
        }
    })
    app.on('activate', () => {
        // On macOS it's common to re-create a window in the app when the
        // dock icon is clicked and there are no other windows open.
        if (win === null) {
            createWindow()
        }
    })
    // In this file you can include the rest of your app's specific main process
    // code. You can also put them in separate files and require them here.
Note: in this example I am setting `Y` to `184` and the output I get is `146`.
Maybe related to #10768