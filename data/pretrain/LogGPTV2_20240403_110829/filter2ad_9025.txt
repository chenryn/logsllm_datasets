### Trickbot恶意软件分析

#### 概述
Trickbot是一款专门针对银行客户的多模块恶意软件，自2016年以来不断更新，引入了新的技术和模块。该恶意软件能够从浏览器和Outlook中窃取数据、锁定用户计算机、收集系统和网络信息以及窃取域凭证。

Cyberbit恶意软件研究团队对最新版本的Trickbot进行了详细分析，并与之前的变种进行了对比。最新的Trickbot变种采用了隐身代码注入技术，包括直接系统调用、反分析技术以及关闭安全工具来执行进程空洞化（process hollowing）。新变种的行为模式与Flokibot银行木马非常相似。

#### 感染向量
最新的Trickbot变种通过一个包含宏代码的Word文档进行传播（SHA256: aef2020534f81bbebec6c9b842b3de6fd4f5b55fe5aeb3d9e79e16c0a3ff37ab）。当用户启用宏并调整文档大小时，宏才会执行，这可能是为了绕过沙箱检测。

**图1** - 放大/缩小栏高亮显示  
**图2** - 仅在窗口大小变化后宏才执行，`InkPicture1_Resize`方法触发放大/缩小操作

与其他恶意宏类似，Trickbot的宏经过混淆处理，最终会执行一个下载并运行Trickbot的PowerShell脚本。解混淆后的PowerShell脚本如下所示：

**图3** - 下载并执行Trickbot的PowerShell脚本

#### 负载分析
负载文件的SHA256哈希值为：1c81272ffc28b29a82d8313bd74d1c6030c2af1ba4b165c44dc8ea6376679d9f。初步分析显示调试路径为：`c:\users\exploitdb\desktop\esetfuck\release\esetfuck.pdb`

##### 反分析、资源解密和执行
恶意软件启动后首先休眠30秒以绕过沙箱监测，随后使用RSA算法解密资源：

**图4** - 休眠30秒（红色标注），调用资源解密函数（紫色标注）

##### 解密过程
1. 函数`0x405680`接收私钥（private_key）和密钥大小（16），指向解密缓冲区及其大小。
2. 使用`CryptAcquireContextW`和`PROV_RSA_FULL`获取加密服务提供商的句柄。
3. 公钥从嵌入在可执行文件中的key BLOB中提取。
4. 从内存中的BLOB头开始复制私钥以形成key BLOB。
5. 使用第4步形成的key BLOB和第3步形成的公钥调用`CryptImportKey`，输出解密密钥保存为`output_decryption_key`。
6. 使用`output_decryption_key`调用`CryptEncrypt`进行资源解密。
7. 使用`CryptDestroyKey`清除公钥和`output_decryption_key`。

解密后的资源是一个DLL文件（SHA256: 31A4065460CEF51C8B4495EFC9827926A789F602F5AD5C735EA1D88CAFAC135A）和一个名为`shellcode_main`的导出函数。

**图5** - 资源解密函数内部

接下来，恶意软件进行一系列调用：
- 创建看似无用的类名和窗口名称的`CreateWindowEx`
- 发送未定义的消息代码（0x64/0xfa）给不存在的窗口
- 调用`GetLastError`和`InSendMessage`

这些调用中，`CreateWindowEx`不执行实际操作，而是导致对`SendMessageW`的27次调用，`InSendMessage`也不执行任何操作。

**图6** - 部分调用示例

恶意软件将解密的DLL映射到地址`0x10000000`的缓冲区，并调用`Sleep(3)`共33890次，造成大约11秒的延迟。这种短暂休眠加多次调用的方式可能有助于绕过沙箱检测。最后，执行位于`0x10001900`的`shellcode_main`函数。

**图7** - 每隔三秒钟休眠和唤醒一次

#### Trickbot的进程空洞化
新变种继续使用进程空洞化技术，并通过直接系统调用来实现。这种方法与Flokibot恶意软件类似，表明两者之间可能存在代码共享。

在Flokibot中，并非所有用于进程空洞化的函数都直接使用系统调用，部分函数从之前保存在栈中的地址调用。正常情况下，暂停进程是通过`CreateProcessW`创建的，选择的进程即为恶意软件进程。主线程的线程上下文结构通过`GetThreadContext`保存。

**图8** - 创建暂停进程

然后，恶意软件使用`CreateFileW`获取`ntdll.dll`的句柄，并将其内容读取到`VirtualAlloc`分配的缓冲区中，再分配另一个缓冲区将内存与原始副本进行映射：

**图9** - 从硬盘上读取`ntdll.dll`  
**图10** - 手动映射`ntdll.dll`

最后一个调用指令是指向一个可以接收映射的`ntdll.dll`缓冲区和函数名CRC32值的指针。该函数会对映射的`ntdll.dll`的所有函数名进行CRC32运算，并与输入的CRC32值比较。如果匹配，则返回目标函数的缓冲区偏移量。

**图11** - 指向映射的`ntdll.dll`（0x1cd0000）和CRC32(NtUnmapViewOfSection)的缓冲区指针

代码中使用CRC32算法的证据是使用的常量`0xedb88320`，这是逆向CRC32多项式的十六进制表示。

**图12** - 计算字符串NtAllocateVirtualMemory的CRC32值

接着，提取系统调用号并将参数压入栈中，通过将系统调用号放在EAX寄存器上并使用`sysenter`指令传递给内核来完成适当的函数调用。

**图13** - 系统调用号提取  
**图14** - `sysenter`指令，EAX寄存器含有系统调用号，栈中有适当参数

上述步骤用于完成以下功能：
- `NtUnmapViewOfSection` - 删除与原恶意软件模块的映射
- `NtCreateSection` - 创建写入恶意代码的节
- `NtMapViewOfSection` - 将上面的节映射到hollowed process
- `NtWriteVirtualMemory` - 将当前进程的ImageBaseAddress写入hollowed process的ImageBaseAddress
- `NtResumeThread` - 重新开始暂停的进程并开始执行

并非所有函数都通过直接系统调用，一些函数从之前保存在栈中的地址调用。完整的hollowing顺序如下：
- 直接系统调用的函数用蓝色表示
- 从之前栈中保存的地址调用的函数用红色表示

与之前的变种类似，运行恶意软件后，它会将自身及加密的模块复制到`C:\Users\%USERNAME%\AppData\Roaming\msnet`。

**图15** - Trickbot (1c9_patched.exe) 和其模块

此外，该变种还通过以下命令关闭和删除Windows Defender服务：
- `cmd.exe /c sc stop WinDefend`
- `cmd.exe /c sc delete WinDefend`
- `cmd.exe /c powershell Set-MpPreference -DisableRealtimeMonitoring $true`

最后一行命令用于关闭Windows Defender实时监控。

#### 对比Flokibot
Trickbot通过直接系统调用调用了两个其他函数，但并未直接调用上述三个函数。有趣的是，某些函数在Flokibot中也未实现。

另一个共同点是使用CRC32算法对函数名进行哈希。在Flokibot中，CRC32与2字节值的XOR一起使用，而在Trickbot中，CRC33单独使用。

#### 总结
Trickbot不断发展，引入了新的技术和更隐蔽的手段。尽管它并未完全通过直接系统调用来实现所有的进程空洞化函数调用，但仍采用了一些简单的技术如休眠和无用函数调用来避免被分析。此外，Trickbot还会关闭和删除Windows Defender服务以避免被检测。