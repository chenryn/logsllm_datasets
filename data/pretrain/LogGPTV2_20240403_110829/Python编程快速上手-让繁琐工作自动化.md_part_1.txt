### 资深Python程序员力作：快速掌握Python高效编程

**《Python编程快速上手》**
—— 让繁琐工作自动化

如果你曾经花几个小时重命名文件或更新数百个电子表格的单元格，就知道这样的任务有多繁琐。但是，如果可以让计算机替你完成呢？

在本书中，你将学习如何利用Python编程，在几分钟内完成手工需要几小时的工作，而无需事先具备编程经验。一旦掌握了编程的基础知识，你就可以毫不费力地创建Python程序，完成高效的自动化工作，包括：

- 在一个或多个文件中搜索文本；
- 创建、更新、移动和重命名文件和文件夹；
- 搜索网页并下载在线内容；
- 在任意大小的Excel电子表格中更新和格式化数据；
- 拆分、合并PDF文件，并添加水印和加密；
- 发送提醒邮件和短信通知；
- 填写在线表单。

本书一步一步地引导你完成每个程序，每章末尾的实践项目启发你改进这些程序，并用你的新技能来自动化类似的任务。你不用再浪费时间去做任何可以自动化的工作。即使你从未写过一行代码，也可以让计算机来做繁重的工作，本书告诉你如何做。

#### 作者简介
Al Sweigart是一名软件开发者和技术图书作者，居住在旧金山。Python是他最喜欢的编程语言，他开发了几个开源模块。他的其他著作可以在他的网站http://www.inventwithpython.com/上找到。

#### 技术评审者简介
Ari Lacenski是一位Android应用程序和Python软件开发者。她住在旧金山，撰写了一些关于Android编程的文章，发布在http://gradlewhy.ghost.io/上，并与Women Who Code合作提供指导。她还是一位民谣吉他手。

#### 致谢
没有许多人的帮助，我不可能写出这样一本书。感谢Bill Pollock、我的编辑Laurel Chun、Leslie Shen、Greg Poulos和Jennifer Griffith-Delgado，以及No Starch Press的其他工作人员，他们提供了非常宝贵的帮助。特别感谢技术评审Ari Lacenski，她提供了极好的建议、编辑和支持。

非常感谢Guido van Rossum和Python软件基金会的所有成员，感谢他们的杰出工作。Python社区是我所见过的最佳社区之一。

最后，我要感谢我的家人和朋友，以及在Shotwell的伙伴们，他们在我写作这本书时给予了极大的支持。干杯！

#### 译者序
这是机器代替人的时代，也是人控制机器的时代。这是程序员的时代，也是非程序员学编程的时代。这是算法的时代，也是编程语言的时代。翻译本书期间，深度学习的人工智能程序AlphaGo以4:1击败了李世石九段。

每一个不会编程的年轻人都应该认真考虑：是不是应该开始学习编程？

学习一门新的语言总是让人感到畏缩。这让我想起大学时英语老师教的学习方法：听说领先，读写跟上。确实，学语言效果最好的方法就是“用”。本书就遵循了这一宗旨。本书面向编程初学者，假定读者没有任何编程知识。在简单介绍Python编程语言的基本知识后，就开始用一个接一个的例子，教我们如何用Python来完成一些日常工作，利用计算机这个强大的工具，节省工作时间，提高工作效率，避免手工操作容易带来的错误。

真正的程序员，用编程来解决自己和别人的问题。俄罗斯有一个程序员编写了一个程序，会给老婆发加班短信，会在宿醉不醒时给自己请假，会自动根据邮件恢复客户的数据库，还可以一键远程煮咖啡。加拿大一名零编程基础的农场主，在学习了一门编程课后，开发了一个程序，自动控制拖拉机，配合联合收割机收割谷物。

若已经掌握了其他编程语言，想学习Python，本书也是不错的参考。每一种编程语言都会提供一种独特的视角，让你对编程有新的认识。我非常喜欢Python没有花括号和分号，程序很“清爽”，符合奥卡姆剃刀原理：如无必要，勿增实体。

在本书的翻译过程中，我自己也在项目中使用Python编程，从中得到许多启发。因此，郑重向大家推荐。翻译中的错误，请不吝指出。

王海鹏  
2016年春于上海

#### 前言
“你在2个小时里完成的事，我们3个人要做两天。”21世纪早期，我的大学室友在一个电子产品零售商店工作。商店偶尔会收到一份包含竞争对手数千种产品价格的电子表格。由3个员工组成的团队会将这个电子表格打印出来，然后分工处理。针对每个产品价格，他们会查看自己商店的价格，并记录竞争对手价格较低的所有产品。这通常会花费几天的时间。

“如果你有打印件的原始文件，我会写一个程序来做这件事。”我的室友告诉他们，当时他看到他们坐在地板上，周围都是散落堆叠的纸张。几个小时后，他写了一个简短的程序，从文件读取竞争对手的价格，在商店的数据库中找到该产品，并记录竞争对手是否更便宜。他当时还是编程新手，花了大量时间查阅编程书籍。实际上程序只运行了几秒钟。我的室友和他的同事们那天享受了超长的午餐。

这就是计算机编程的威力。计算机就像瑞士军刀，可以用来完成数不清的任务。许多人花上数小时点击鼠标和敲打键盘，执行重复的任务，却没有意识到，如果他们给机器正确的指令，机器就能在几秒钟内完成他们的工作。

#### 本书的读者对象
软件是我们今天使用的许多工具的核心：几乎每个人都使用社交网络来进行交流，许多人的手机中都有连接因特网的计算机，大多数办公室工作都涉及操作计算机来完成工作。因此，对编程人才的需求暴涨。无数的图书、交互式网络教程和开发者新兵训练营承诺将有雄心壮志的初学者变成软件工程师，获得6位数的薪水。

本书不是针对这些人的。它是针对所有其他的人。就其本身而言，这本书不会让你变成一个职业软件开发者，就像几节吉他课程不会让你变成一名摇滚巨星。但如果你是办公室职员、管理者、学术研究者，或使用计算机来工作或娱乐的任何人，你将学到编程的基本知识，这样就能将下面一些简单的任务自动化：

- 移动并重命名几千个文件，将它们分类，放入文件夹；
- 填写在线表单，不需要打字；
- 在网站更新时，从网站下载文件或复制文本；
- 让计算机向客户发出短信通知；
- 更新或格式化Excel电子表格；
- 检查电子邮件并发出预先写好的回复。

对人来说，这些任务简单但很花时间。它们通常很琐碎、很特殊，没有现成的软件可以完成。有一点编程知识，就可以让计算机为你完成这些任务。

#### 编码规范
本书没有设计成参考手册，而是初学者指南。编码风格有时违反最佳实践（例如，有些程序使用全局变量），但这是一种折中，使代码更简单，便于学习。本书的目的是让人们编写用完即抛弃的代码，所以没有太多时间关注风格和优雅。复杂的编程概念（如面向对象编程、列表推导和生成器）在本书中也没有介绍，因为它们增加了复杂性。编程老手可能会指出，本书中的代码可以修改得更有效率，但本书主要考虑的是用最少的工作量得到能工作的程序。

#### 什么是编程
在电视剧和电影中，常常看到程序员在闪光的屏幕上迅速输入密码般的一串1和0，但现代编程并没有这么神秘。编程只是输入指令让计算机来执行。这些指令可能运算一些数字，修改文本，在文件中查找信息，或通过因特网与其他计算机通信。所有程序都使用基本指令作为构建块。下面是一些常用的指令，用自然语言的形式表示：

- “做这个，然后做那个。”
- “如果这个条件为真，执行这个动作，否则，执行那个动作。”
- “按照指定次数执行这个动作。”
- “一直做这个，直到条件为真。”

这些构建块可以组合起来实现更复杂的决定。例如，这里有一些用Python编程语言编写的简单程序。从头开始，Python软件执行每行代码（有些代码只有在特定条件为真时执行，否则Python会执行另外一些代码），直到到达底部。

```python
passwordFile = open('SecretPasswordFile.txt')
secretPassword = passwordFile.read()
print('Enter your password.')
typedPassword = input()
if typedPassword == secretPassword:
    print('Access granted')
if typedPassword == '12345':
    print('That password is one that an idiot puts on their luggage.')
else:
    print('Access denied')
```

你可能对编程一无所知，但读了上面的代码，也许能够合理地猜测它做的事情。首先，打开了文件`SecretPasswordFile.txt`，读取了其中的密码。然后，提示用户（通过键盘）输入一个密码。比较这两个密码，如果它们一样，程序就在屏幕上打印“Access granted”。接下来，程序检查密码是否为`12345`，提示说这可能并不是最好的密码。如果密码不一样，程序就在屏幕上打印“Access denied”。

#### 什么是Python
Python指的是Python编程语言（包括语法规则，用于编写被认为是有效的Python代码），以及Python解释器软件，它读取源代码（用Python语言编写），并执行其中的指令。Python解释器可以从http://python.org/免费下载，有针对Linux、OS X和Windows的版本。

Python的名字来自于英国超现实主义喜剧团体Monty Python，而不是蛇。Python程序员被亲切地称为Pythonistas。Monty Python和与蛇相关的引用经常出现在Python的指南和文档中。

#### 程序员不需要知道太多数学
我听到的关于学习编程最常见的顾虑是人们认为这需要很多数学知识。其实，大多数编程需要的数学知识不超过基本算术。实际上，善于编程与善于解决数独问题没有太大差别。

要解决数独问题，数字1到9必须填入9×9的棋盘上每一行、每一列，以及每个3×3的内部方块。通过推导和起始数字的逻辑，你会找到一个答案。例如，在图1的数独问题中，既然5出现在了左上角，它就不能出现在顶行、最左列，或左上角3×3方块中的其他位置。每次解决一行、一列或一个方块，将为剩下的部分提供更多线索。