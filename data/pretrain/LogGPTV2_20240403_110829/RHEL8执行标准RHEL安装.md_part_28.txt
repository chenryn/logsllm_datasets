grub_arg --unrestricted
grub_class kernel
```
在带有设备总线 ID `0.0.202b`{.literal} 的第三个 DASD
分区中添加另一个物理卷。为此，请在
`/boot/loader/entries/4ab74e52867 b4f998e73e06cf23fd761-4.18.0-32.el8.s390x.conf 中引导内核的参数行中添加rd.dasd=0.`{.literal}
0.202``{=html} b：
``` literallayout
title Red Hat Enterprise Linux (4.18.0-80.el8.s390x) 8.0 (Ootpa)
version 4.18.0-80.el8.s390x
linux /boot/vmlinuz-4.18.0-80.el8.s390x
initrd /boot/initramfs-4.18.0-80.el8.s390x.img
options root=/dev/mapper/vg_devel1-lv_root crashkernel=auto rd.dasd=0.0.0200 rd.dasd=0.0.0207 rd.dasd=0.0.202b rd.lvm.lv=vg_devel1/lv_root rd.lvm.lv=vg_devel1/lv_swap cio_ignore=all,!condev rd.znet=qeth,0.0.0a00,0.0.0a01,0.0.0a02,layer2=1,portno=0
id rhel-20181027190514-4.18.0-80.el8.s390x
grub_users $grub_users
grub_arg --unrestricted
grub_class kernel
```
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
请确定配置文件中的内核命令行长度不超过 896
字节。否则引导装载程序无法被保存，安装将失败。
:::
运行 `zipl`{.literal} 来对下一个 IPL 应用配置文件的更改：
``` literallayout
# zipl -V
Using config file '/etc/zipl.conf'
Using BLS config file '/boot/loader/entries/4ab74e52867b4f998e73e06cf23fd761-4.18.0-80.el8.s390x.conf'
Target device information
  Device..........................: 5e:00
  Partition.......................: 5e:01
  Device name.....................: dasda
  Device driver name..............: dasd
  DASD device number..............: 0201
  Type............................: disk partition
  Disk layout.....................: ECKD/compatible disk layout
  Geometry - heads................: 15
  Geometry - sectors..............: 12
  Geometry - cylinders............: 13356
  Geometry - start................: 24
  File system block size..........: 4096
  Physical block size.............: 4096
  Device size in physical blocks..: 262152
Building bootmap in '/boot'
Building menu 'zipl-automatic-menu'
Adding #1: IPL section '4.18.0-80.el8.s390x' (default)
  initial ramdisk...: /boot/initramfs-4.18.0-80.el8.s390x.img
  kernel image......: /boot/vmlinuz-4.18.0-80.el8.s390x
  kernel parmline...: 'root=/dev/mapper/vg_devel1-lv_root crashkernel=auto rd.dasd=0.0.0200 rd.dasd=0.0.0207 rd.dasd=0.0.202b rd.lvm.lv=vg_devel1/lv_root rd.lvm.lv=vg_devel1/lv_swap cio_ignore=all,!condev rd.znet=qeth,0.0.0a00,0.0.0a01,0.0.0a02,layer2=1,portno=0'
  component address:
    kernel image....: 0x00010000-0x0049afff
    parmline........: 0x0049b000-0x0049bfff
    initial ramdisk.: 0x004a0000-0x01a26fff
    internal loader.: 0x0000a000-0x0000cfff
Preparing boot menu
  Interactive prompt......: enabled
  Menu timeout............: 5 seconds
  Default configuration...: '4.18.0-80.el8.s390x'
Preparing boot device: dasda (0201).
Syncing disks...
Done.
```
:::
::: section
::: titlepage
# []{#configuring-a-linux-instance-on-ibm-z_installing-RHEL.html#dasds-not-part-of-root-filesystem_configuring-a-linux-instance-on-ibm-z}DASD 不是 root 文件系统的一部分 {.title}
:::
不属于 root 文件系统（即 [*数据磁盘*]{.emphasis}
）的直接访问存储设备(DASD)会在 `/etc/dasd.conf`{.literal}
文件中永久配置。这个文件每行包含一个 DASD，每行都以 DASD 的总线 ID
开头。
在 `/etc/dasd.conf`{.literal} 文件中添加 DASD
时，使用键值对来指定每个条目的选项。使用等号(=)分隔键及其值。添加多个选项时，请使用空格或标签页来分隔各个选项。
::: title
**`/etc/dasd.conf`{.literal} 文件示例**
:::
``` screen
0.0.0207
0.0.0200 use_diag=1 readonly=1
```
对 `/etc/dasd.conf`{.literal} 文件的更改在系统重启后或通过更改系统的 I/O
配置动态添加 DASD 后生效（即，DASD 在 z/VM 下附加）。
另外，要激活添加到 `/etc/dasd.conf`{.literal} 文件中的
DASD，请完成以下步骤：
::: orderedlist
1.  从忽略的设备列表中删除 DASD，并使用 `cio_ignore`{.literal}
    工具使其可见：
    ``` screen
    # cio_ignore -r device_number
    ```
    其中 `device_number`{.literal} 是 DASD 设备号。
    例如，如果设备号是 `021a`{.literal}，请运行：
    ``` screen
    # cio_ignore -r 021a
    ```
2.  通过写入设备的 `uevent`{.literal} 属性激活 DASD：
    ``` screen
    # echo add > /sys/bus/ccw/devices/dasd-bus-ID/uevent
    ```
    其中 `dasd-bus-ID`{.literal} 是 DASD 的总线 ID。
    例如，如果总线 ID 是 `0.0.021a`{.literal}，请运行：
    ``` screen
    # echo add > /sys/bus/ccw/devices/0.0.021a/uevent
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-a-linux-instance-on-ibm-z_installing-RHEL.html#fcp-luns-that-are-part-of-the-root-file-system_configuring-a-linux-instance-on-ibm-z}FCP LUN 是 root 文件系统的一部分 {.title}
:::
在 Red Hat Enterprise Linux 8 中更改了添加作为 root 文件系统一部分的 FCP
LUN 的唯一文件。运行以下命令可以找到要编辑的新文件，而不编辑
`/etc/zipl.conf`{.literal} 文件：
``` literallayout
# machine_id=$(cat /etc/machine-id)
# kernel_version=$(uname -r)
# ls /boot/loader/entries/$machine_id-$kernel_version.conf
```
Red Hat Enterprise Linux 提供在引导过程早期激活 FCP LUN 的参数：
`rd.zfcp=`{.literal}。该值是一个用逗号分开的设备总线 ID 列表，前缀为
`0x`{.literal} 的 16 位十六进制 WWPN，以及前缀为 `0x`{.literal} 的 FCP
LUN 16 位十六进制数字（需要时在右面使用 0 填充）。
以下是一个系统的
`/boot/loader/entries/4ab74e52867b4f998e73e06cf23fd761-4.18.0-80.el8.s390x.conf`{.literal}
文件示例。它使用两个 FCP LUN 分区中的物理卷用于一个 LVM 卷组
`vg_devel1`{.literal}，其中包括一个逻辑卷 `lv_root`{.literal} 用于 root
文件系统。为方便起见，该示例显示没有多路径的配置。
``` literallayout
title Red Hat Enterprise Linux (4.18.0-32.el8.s390x) 8.0 (Ootpa)
version 4.18.0-32.el8.s390x
linux /boot/vmlinuz-4.18.0-32.el8.s390x
initrd /boot/initramfs-4.18.0-32.el8.s390x.img
options root=/dev/mapper/vg_devel1-lv_root crashkernel=auto rd.zfcp=0.0.fc00,0x5105074308c212e9,0x401040a000000000 rd.zfcp=0.0.fc00,0x5105074308c212e9,0x401040a100000000 rd.lvm.lv=vg_devel1/lv_root rd.lvm.lv=vg_devel1/lv_swap cio_ignore=all,!condev rd.znet=qeth,0.0.0a00,0.0.0a01,0.0.0a02,layer2=1,portno=0
id rhel-20181027190514-4.18.0-32.el8.s390x
grub_users $grub_users
grub_arg --unrestricted
grub_class kernel
```
要在第三个 FCP LUN 分区上添加另一个物理卷，并带有设备总线 ID 0.0.fc00,
WWPN 0x5105074308c212e9 和 FCP LUN 0x401040a300000000，add
`rd.zfcp=0.0.fc00,0x5105074308c212e9, 0x401040a300000000 到 /boot/loader/entries/4ab74e52867b4f998e73e06cf23fd761-4.18.0-32.el8.s390x.conf`{.literal}
中的引导内核的参数行。``{=html}例如：
``` literallayout
title Red Hat Enterprise Linux (4.18.0-32.el8.s390x) 8.0 (Ootpa)
version 4.18.0-32.el8.s390x
linux /boot/vmlinuz-4.18.0-32.el8.s390x
initrd /boot/initramfs-4.18.0-32.el8.s390x.img
options root=/dev/mapper/vg_devel1-lv_root crashkernel=auto rd.zfcp=0.0.fc00,0x5105074308c212e9,0x401040a000000000 rd.zfcp=0.0.fc00,0x5105074308c212e9,0x401040a100000000 rd.zfcp=0.0.fc00,0x5105074308c212e9,0x401040a300000000 rd.lvm.lv=vg_devel1/lv_root rd.lvm.lv=vg_devel1/lv_swap cio_ignore=all,!condev rd.znet=qeth,0.0.0a00,0.0.0a01,0.0.0a02,layer2=1,portno=0
id rhel-20181027190514-4.18.0-32.el8.s390x
grub_users $grub_users
grub_arg --unrestricted
grub_class kernel
```
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
请确定配置文件中的内核命令行长度不超过 896
字节。否则引导装载程序无法被保存，安装将失败。
:::
运行 `zipl`{.literal} 来对下一个 IPL 应用配置文件的更改：
``` literallayout
# zipl -V
Using config file '/etc/zipl.conf'
Using BLS config file '/boot/loader/entries/4ab74e52867b4f998e73e06cf23fd761-4.18.0-32.el8.s390x.conf'
Target device information
Device..........................: 08:00
Partition.......................: 08:01
Device name.....................: sda
Device driver name..............: sd
Type............................: disk partition
Disk layout.....................: SCSI disk layout
Geometry - start................: 2048
File system block size..........: 4096
Physical block size.............: 512
Device size in physical blocks..: 10074112
Building bootmap in '/boot/'
Building menu 'rh-automatic-menu'
Adding #1: IPL section '4.18.0-32.el8.s390x' (default)
kernel image......: /boot/vmlinuz-4.18.0-32.el8.s390x
kernel parmline...: 'root=/dev/mapper/vg_devel1-lv_root crashkernel=auto rd.zfcp=0.0.fc00,0x5105074308c212e9,0x401040a000000000 rd.zfcp=0.0.fc00,0x5105074308c212e9,0x401040a100000000 rd.zfcp=0.0.fc00,0x5105074308c212e9,0x401040a300000000 rd.lvm.lv=vg_devel1/lv_root rd.lvm.lv=vg_devel1/lv_swap cio_ignore=all,!condev rd.znet=qeth,0.0.0a00,0.0.0a01,0.0.0a02,layer2=1,portno=0'
initial ramdisk...: /boot/initramfs-4.18.0-32.el8.s390x.img
component address:
kernel image....: 0x00010000-0x007a21ff
parmline........: 0x00001000-0x000011ff
initial ramdisk.: 0x02000000-0x028f63ff
internal loader.: 0x0000a000-0x0000a3ff
Preparing boot device: sda.
Detected SCSI PCBIOS disk layout.
Writing SCSI master boot record.
Syncing disks...
Done.
```
:::
::: section
::: titlepage
# []{#configuring-a-linux-instance-on-ibm-z_installing-RHEL.html#fcp-luns-that-are-not-part-of-the-root-file-system_configuring-a-linux-instance-on-ibm-z}FCP LUN 不是 root 文件系统的一部分 {.title}
:::
不是 root 文件系统一部分的 FCP LUN，比如数据磁盘，会在
`/etc/zfcp.conf`{.literal} 中永久配置。每行包含一个 FCP LUN。每行都包含
FCP 适配器的设备总线 ID、前缀为 `0x`{.literal} 的 16 位十六进制数字的
WWPN，以及前缀为 `0x`{.literal} 的 FCP LUN 16
位十六进制数（需要时在右面使用 0 填充）。在系统中添加 FCP
适配器时，`/etc/zfcp.conf`{.literal} 中的条目会被激活并由 udev
配置。在引导时，会添加系统可见的所有 FCP 适配器并触发
[**[udev]{.application}**]{.strong}。
`/etc/zfcp.conf`{.literal} 内容示例：
``` literallayout
0.0.fc00 0x5105074308c212e9 0x401040a000000000
0.0.fc00 0x5105074308c212e9 0x401040a100000000
0.0.fc00 0x5105074308c212e9 0x401040a300000000
0.0.fcd0 0x5105074308c2aee9 0x401040a000000000
0.0.fcd0 0x5105074308c2aee9 0x401040a100000000
0.0.fcd0 0x5105074308c2aee9 0x401040a300000000
```
只有重启系统后或通过更改系统的 I
`/O 配置（例如，某个频道在 z/VM 下附加）来动态添加新 FCP 频道后，/etc/zfcp.conf`{.literal}
的修改才会生效。另外，可以执行以下命令为之前没有激活的 FCP 适配器激活
`/etc/zfcp.conf`{.literal} 中的新条目：
::: orderedlist
1.  使用 `cio_ignore`{.literal} 程序从忽略的设备列表中删除 FCP
    适配器，并使其出现在 Linux 中：
    ``` literallayout
    # cio_ignore -r device_number
    ```
    使用 FCP 适配器的设备号替换 [*device_number*]{.emphasis}。例如：
    ``` literallayout
    # cio_ignore -r fcfc
    ```
2.  要触发激活更改的 uevent，请发出：
    ``` literallayout
    # echo add > /sys/bus/ccw/devices/device-bus-ID/uevent
    ```
    例如：
    ``` literallayout
    # echo add > /sys/bus/ccw/devices/0.0.fcfc/uevent
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-a-linux-instance-on-ibm-z_installing-RHEL.html#adding-a-qeth-device_configuring-a-linux-instance-on-ibm-z}添加 qeth 设备 {.title}
:::
`qeth 网络设备`{.literal} 驱动程序在 QDIO 模式、HiperSockets、z/VM guest
LAN 和 z/VM VSWITCH 中支持 IBM Z OSA-Express 功能。
有关 qeth
设备驱动程序命名方案的更多信息，[请参阅自定义引导参数](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/performing_a_standard_rhel_installation/index#customizing-boot-parameters_installing-RHEL){.link}。
:::
::: section
::: titlepage
# []{#configuring-a-linux-instance-on-ibm-z_installing-RHEL.html#dynamically-adding-a-qeth-device_configuring-a-linux-instance-on-ibm-z}动态添加 qeth 设备 {.title}
:::
本节介绍如何动态添加 `qeth`{.literal} 设备。
::: orderedlist
**流程**
1.  决定是否载入 `qeth`{.literal} 设备驱动程序模块。以下示例显示了载入的
    `qeth`{.literal} 模块：
    ``` literallayout
    # lsmod | grep qeth
    qeth_l3                69632  0
    qeth_l2                49152  1
    qeth                  131072  2 qeth_l3,qeth_l2