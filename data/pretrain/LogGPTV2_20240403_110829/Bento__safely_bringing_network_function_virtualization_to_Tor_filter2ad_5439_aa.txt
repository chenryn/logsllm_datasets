# Bento: Safely Bringing Network Function Virtualization to Tor

**Authors:**
- Michael Reininger, University of Maryland
- Arushi Arora, Purdue University
- Stephen Herwig, University of Maryland
- Nicholas Francino, University of Maryland
- Jayson Hurst, University of Maryland
- Christina Garman, Purdue University
- Dave Levin, University of Maryland

## Abstract
Tor is a powerful and essential tool for providing anonymity and censorship resistance to users worldwide. However, deploying new services in Tor is challenging, and it is difficult to respond nimbly to new forms of attack. In contrast, non-anonymous Internet services have thrived due to recent advances in programmable networks, such as Network Function Virtualization (NFV), which provides programmable in-network middleboxes.

This paper introduces Bento, an architecture that integrates programmable middleboxes into the Tor network. Bento allows users to install and run sophisticated functions on willing Tor routers. We demonstrate a wide range of functions that enhance anonymity, resilience to attacks, and performance of hidden services. Bento's design and implementation protect both the middlebox nodes and the functions they run. Importantly, Bento does not require modifications to Tor and can be evaluated by running it on the live Tor network. With just a few lines of Python, Bento significantly extends Tor's capabilities, meeting users' anonymity needs and enabling rapid responses to new threats.

**CCS Concepts:**
- Networks → Middle boxes / network appliances; Network privacy and anonymity; Programmable networks.

**Keywords:**
- Tor, Network Function Virtualization (NFV), Intel SGX

**ACM Reference Format:**
Michael Reininger, Arushi Arora, Stephen Herwig, Nicholas Francino, Jayson Hurst, Christina Garman, and Dave Levin. 2021. Bento: Safely Bringing Network Function Virtualization to Tor. In ACM SIGCOMM 2021 Conference (SIGCOMM '21), August 23–28, 2021, Virtual Event, USA. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3452296.3472919

## 1 Introduction
Anonymity systems are crucial for ensuring free and open communication on the internet. Tor, in particular, has become a key tool for resisting censorship and enabling secure communication between journalists and their sources [65].

Das et al. [22] introduced the "anonymity trilemma," which states that no single system can simultaneously achieve strong anonymity, low latency, and high bandwidth. Tor prioritizes performance over strong anonymity, while DCNets [19] prioritize strong anonymity at the cost of performance. The trilemma suggests that each anonymity system must balance these trade-offs, and users must choose the system that best meets their needs.

In this paper, we propose a new approach to address the trilemma. While all three properties may not be simultaneously achievable for all users, a more programmable anonymity network can allow users to select the specific trade-offs they need, when they need them.

We introduce Bento, an architecture that enhances Tor by enabling relays to act as user-programmable "middleboxes." Bento allows clients to write sophisticated middlebox functions in a high-level language (Python, in our implementation) and run them on willing Tor relays. For example, we present a basic network function that adds bidirectional cover traffic to a circuit, temporarily enhancing anonymity for a subset of users at the cost of increased bandwidth consumption.

Bento builds on recent innovations in Network Function Virtualization (NFV), which provides programmable in-network middleboxes. Bento extends prior NFV work by demonstrating safe deployment of functions in adversarial settings, using trusted execution environments (TEE) like Intel SGX to ensure mutual protection between the client and the middlebox.

We demonstrate a variety of functions that significantly improve various aspects of Tor, including:
1. **Browse:** A function that offloads a client’s web browser to avoid website fingerprinting attacks.
2. **LoadBalance:** A function that automatically scales hidden service replicas up and down to handle varying load.
3. **Dropbox:** A function that allows Tor to be used as an anonymous file store.

Bento extends Tor's capabilities without requiring modifications. It runs on top of Tor, and users terminate circuits at Bento middleboxes to deploy and execute functions. Our code is publicly available at https://bento.cs.umd.edu.

### Contributions
- **Architecture:** We introduce the first architecture to safely bring the power of NFV to anonymity networks like Tor, leveraging recent developments in TEEs.
- **Components:** We identify, design, and implement critical components necessary for the expressiveness and safety of an anonymous middlebox architecture, which are broadly applicable.
- **Functions:** We present middlebox functions that address long-standing issues in the Tor network, such as website fingerprinting defenses and more robust hidden services.
- **Evaluation:** We evaluate our prototype architecture and functions on the live Tor network, showing that Bento extends Tor's capabilities and defenses with minimal performance overhead.

### Roadmap
- **Background and Related Work (§2):** We provide an overview of Tor, our threat model, and related work on programmable middleboxes and Tor extensions.
- **Overview (§3):** We present a high-level overview of Bento.
- **Goals (§4) and Design (§5):** We detail Bento's goals and design.
- **Security Analysis (§6):** We analyze Bento's security properties.
- **Function Examples (§7-§9):** We delve into two Bento functions—Browser and a hidden service load balancer—and briefly describe a wider range of functions.
- **Ethical Concerns (§10):** We discuss ethical considerations.
- **Limitations and Future Work (§11):** We summarize Bento's current limitations and potential future directions.
- **Conclusion (§12):** We conclude the paper.

## 2 Background and Related Work
### 2.1 Tor Background
Tor [24] is a peer-to-peer overlay routing system that achieves unlinkability: an adversary can identify at most one of a source/destination pair, but not both. Tor routes traffic through a circuit of overlay hosts known as Tor relays, typically consisting of an entry node, a middle node, and an exit node. The source node chooses the relays and constructs the circuit.

**Proxied Communication:** To communicate with a server outside the Tor network, a Tor client creates a circuit to an exit node, which then opens a traditional network connection to the destination. Exit nodes specify their policies for connecting to external hosts and ports.

**Hidden Services:** Tor also supports hidden services [50, 78], allowing users to host services anonymously. A hidden service selects a pseudonymous identifier and a set of introduction points. Clients connect to the hidden service via a rendezvous point, creating circuits to both the introduction point and the rendezvous point. This process ensures that the hidden service and the client remain anonymous.

### 2.2 Threat Model
Bento operates within the existing Tor network, adopting its network-level threat model. A common assumption is a powerful routing-capable adversary, such as a nation-state, which can control a large network and influence nearby routes but lacks a global view of internet traffic. Adversaries can also participate in the Tor network [3].

Additionally, Bento considers the risks of loading and running code on other users' machines. We assume that users have physical access to their machines but that some Bento middleboxes use secure, trusted execution environments (TEEs) like Intel SGX. We assume these TEEs are secure, protecting code and data from introspection despite physical access. While recent attacks have questioned TEE security [81], many vulnerabilities have been patched [68]. Bento uses conclaves [34], which work with any TEE with similar properties to SGX.

**Attacks:** Tor has faced both academic and real-world attacks [3, 10, 17, 27, 30, 33, 36, 41, 46, 50, 55, 56, 61, 69, 77, 86]. We consider two main types:
- **Deanonymization Attacks:** These aim to infer the endpoints of a Tor circuit through passive or active traffic analysis. Routing-capable adversaries can perform traffic correlation attacks [41].
- **Fingerprinting Attacks:** These observe traffic patterns from the source and use deterministic patterns to identify websites. Defenses include reordering or batching requests and sending junk control packets to mask traffic patterns.

### 2.3 Programmable Middleboxes
Middleboxes are network devices that process packets as they traverse the network. Historically, middleboxes were monolithic and not reprogrammable. Recent advancements in Network Function Virtualization (NFV) [7, 8, 16, 38, 39, 43, 47, 72, 74, 85] allow network operators to instantiate middleboxes in virtual machines, placing them at arbitrary network locations. Some approaches make NFV more programmable by constructing modular, composable functions.

Many network services now rely on programmable middleboxes, creating a gap between the capabilities of the non-anonymous internet and the Tor anonymity network. Bento aims to modernize Tor by incorporating programmable middlebox functionality, enabling the deployment of more sophisticated anonymous services.

### 2.4 Extensions to Tor
The closest related work to Bento is FAN (Flexible Anonymous Network) [66], which makes the Tor protocol more programmable through Protocol Plugins. Bento, however, sits atop Tor, making it complementary to FAN.

Prior work has also explored improving Tor's security and privacy using TEEs. SGX-Tor [48] combines SGX and Tor, reducing the attacker to a network-level adversary with no insight into Tor's internal state. Bento expands on this by allowing users to safely deploy new, tailored functions beyond the existing Tor codebase.

## 3 Overview of Bento
Before detailing Bento's goals (§4) and design (§5), we provide a high-level overview of how Bento enables users to extend Tor with programmable functions.

In Bento, a client can offload processing to another node in the Tor network. Figure 1 illustrates this, and we describe each step with a motivating example.

### Motivating Example
Alice wants to browse a website anonymously over Tor but fears a website fingerprinting attack [12, 13, 82–84]. Traditional solutions would require Alice to alter her traffic patterns, often needing assistance from the website or modifications to Tor.

**Writing a Function:** Alice writes or downloads a Bento function, a program intended to run on other Tor nodes. These functions are powerful but constrained to a limited API and run in a restricted sandbox. They operate outside of unmodified Tor, acting like small servlets running on Tor relays.

Alice's function, **Browser**, takes a URL as input, downloads the content, and delivers it, padded to a threshold number of bytes. To an attacker, it appears that Alice uploads a small amount and then downloads a large amount, masking her actual activity.

Figure 1: Overview of installing and executing a Browser function that runs on an exit node, downloads a given URL, and delivers it, padded to a certain number of bytes. To an attacker monitoring the client’s link, it appears the client uploads a small amount and then downloads a large amount.