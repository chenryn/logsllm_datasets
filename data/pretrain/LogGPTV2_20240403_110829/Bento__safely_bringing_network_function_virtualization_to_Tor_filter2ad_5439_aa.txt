title:Bento: safely bringing network function virtualization to Tor
author:Michael Reininger and
Arushi Arora and
Stephen Herwig and
Nicholas Francino and
Jayson Hurst and
Christina Garman and
Dave Levin
Bento: Safely Bringing
Network Function Virtualization to Tor
Michael Reininger
University of Maryland
Nicholas Francino
University of Maryland
Arushi Arora
Purdue University
Jayson Hurst
University of Maryland
Dave Levin
University of Maryland
Stephen Herwig
University of Maryland
Christina Garman
Purdue University
ABSTRACT
Tor is a powerful and important tool for providing anonymity and
censorship resistance to users around the world. Yet it is surprisingly
difficult to deploy new services in Tor‚Äîit is largely relegated to
proxies and hidden services‚Äîor to nimbly react to new forms of
attack. Conversely, ‚Äúnon-anonymous‚Äù Internet services are thriving
like never before because of recent advances in programmable
networks, such as Network Function Virtualization (NFV) which
provides programmable in-network middleboxes.
This paper seeks to close this gap by introducing programmable
middleboxes into the Tor network. In this architecture, users can
install and run sophisticated ‚Äúfunctions‚Äù on willing Tor routers. We
demonstrate a wide range of functions that improve anonymity,
resilience to attack, performance of hidden services, and more. We
present the design and implementation of an architecture, Bento,
that protects middlebox nodes from the functions they run‚Äîand
protects the functions from the middleboxes they run on.
Bento does not require modifications to Tor, and we evaluate it
by running it on the live Tor network. We show that, with just a
few lines of Python, we can significantly extend the capabilities
of Tor to meet users‚Äô anonymity needs and nimbly react to new
threats.
CCS CONCEPTS
‚Ä¢ Networks ‚Üí Middle boxes / network appliances; Network
privacy and anonymity; Programmable networks.
KEYWORDS
Tor, Network Function Virtualization (NFV), Intel SGX
ACM Reference Format:
Michael Reininger, Arushi Arora, Stephen Herwig, Nicholas Francino, Jayson
Hurst, Christina Garman, and Dave Levin. 2021. Bento: Safely Bringing Net-
work Function Virtualization to Tor. In ACM SIGCOMM 2021 Conference
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
SIGCOMM ‚Äô21, August 23‚Äì28, 2021, Virtual Event, USA
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8383-7/21/08...$15.00
https://doi.org/10.1145/3452296.3472919
821
(SIGCOMM ‚Äô21), August 23‚Äì28, 2021, Virtual Event, USA. ACM, New York,
NY, USA, 15 pages. https://doi.org/10.1145/3452296.3472919
1 INTRODUCTION
Anonymity systems are critical in achieving free, open commu-
nication on today‚Äôs Internet. Tor [24] in particular has become a
staple in resisting censorship and allowing journalists to safely
communicate with their sources [65].
Das et al. [22] described the fundamental trade-offs that anon-
ymity systems must make as an ‚Äúanonymity trilemma‚Äù: no one
system can simultaneously achieve strong anonymity, low latency,
and high bandwidth. Tor trades off strong anonymity in favor of
greater performance; DCNets [19] trades off performance for strong
anonymity. The anonymity trilemma tells us that each anonymity
system must cement its place in this design space, and users in turn
must choose the system that suits their anonymity goals.
In this paper, we show that there may be another way to over-
come this trilemma. While all three properties may not be simulta-
neously achievable for all users, we argue that a more programmable
anonymity network can let users choose the precise set of trade-offs
they want, when they want them.
We present Bento, a novel architecture that augments Tor by
allowing relays to act as user-programmable ‚Äúmiddleboxes.‚Äù Bento
allows clients to write sophisticated middlebox ‚Äúfunctions‚Äù in a
high-level language (Python, in our implementation) and run them
on willing Tor relays. For example, we present a basic network
function that adds bidirectional cover traffic to a circuit, thereby
temporarily achieving stronger anonymity for a subset of the users
at the cost of increased bandwidth consumption.
Bento is inspired by recent impressive innovations in network
function virtualization (NFV). NFV provides programmable in-
network middleboxes [7, 8, 16, 38, 43, 47, 72, 74] that can be used
to construct more robust, scalable and resilient network services.
Bento extends prior work in NFV by demonstrating that it is possi-
ble to safely deploy functions on middleboxes in adversarial settings.
More specifically, we operate within a threat model that prior NFV
work has not explored: one in which the client and middlebox (Tor
relay) are mutually distrusting. By using recent advances in trusted
execution environments [34], Bento ensures that the client is pro-
tected from the middlebox, and the middlebox is protected from
the client.
We demonstrate a wide diversity of functions that significantly
improve various aspects of Tor, including: (1) Browse: a function
that offloads a client‚Äôs web browser to avoid website fingerprint-
ing attacks, (2) LoadBalance: a function that automatically scales
hidden service replicas up and down to handle varying load, and
(3) Dropbox: a function that allows Tor to be used as an anonymous
file store.
Bento safely extends Tor without requiring modifications. Rather,
it runs on top of Tor; users terminate circuits at Bento middleboxes
to deploy and execute functions. As a result, it is incrementally
and immediately deployable‚Äîto this end, we have made our code
publicly available at https://bento.cs.umd.edu.
Contributions We make the following contributions:
‚Ä¢ We introduce the first architecture to safely bring the power of
NFV to anonymity networks like Tor. Critical to many of the
security guarantees of our architecture are recent developments
in trusted execution environments.
‚Ä¢ We identify, design, and implement critical components that are
necessary to ensure expressiveness and safety of an anonymous
middlebox architecture. Although we focus on Tor, many of
these components are broadly applicable.
‚Ä¢ We present middlebox functions that solve a wide diversity of
problems that have long plagued the Tor network, including
website fingerprinting defenses and more robust hidden services.
‚Ä¢ We evaluate our prototype architecture and functions on the
live Tor network and show that it extends Tor‚Äôs capabilities and
defenses while adding nominal performance overhead.
Roadmap We present background and related work in ¬ß2. We
then present Bento‚Äôs overview (¬ß3), goals (¬ß4) and design (¬ß5). We
analyze Bento‚Äôs security properties in ¬ß6. We present two Bento
functions in depth‚ÄîBrowser in ¬ß7 and a hidden service load bal-
ancer in ¬ß8‚Äîand then briefly describe a wider range of functions
in ¬ß9. We discuss ethical concerns in ¬ß10. We summarize both the
current limitations of Bento and avenues for future work in ¬ß11
and conclude in ¬ß12.
2 BACKGROUND AND RELATED WORK
In this section, we provide a broad overview of Tor and a description
of our threat model. We also review related work on programmable
middleboxes and on extending Tor‚Äôs features, ultimately showing
that there is a surprisingly large gap between the two. One of the
goals of this paper is to bridge this gap by securely bringing NFV
to anonymity systems.
2.1 Tor Background
Tor [24] is a peer-to-peer overlay routing system that achieves a
particular type of anonymity known as unlinkability: an adversary
can identify at most one of a source/destination pair, but not both.
Tor achieves unlinkable communication by routing traffic through
a circuit: a sequence of overlay hosts known as Tor relays. There
are typically three relays in a circuit: an entry node (who commu-
nicates with the source), a middle node, and an exit node (who
communicates with the destination). The source node is responsi-
ble for choosing which Tor relays to include in a circuit, and for
constructing the circuit.
Proxied communication To anonymously communicate with a
server that is not in the Tor network, a Tor client creates a circuit to
an exit node, and then instructs the exit node to open a traditional
network connection to the desired destination. Tor relays specify in
their exit node policy which hosts and which ports they are willing
to connect to (and whether they prefer not to be exit nodes at all).
Hidden services In addition to connecting to external servers, Tor
supports hidden services1 [50, 78], which allow users to host services
anonymously. Briefly, hidden services operate as follows: To host a
hidden service, one chooses a pseudonymous identifier and a set
ùêº of Tor relays to serve as introduction points. The hidden service
creates Tor circuits to each ùëñ ‚àà ùêº and (anonymously) publishes the
mapping between its identifier and ùêº. To connect to the hidden
service, a client chooses a Tor relay ùëü to serve as a rendezvous point,
and creates a Tor circuit to it. The client then chooses an ùëñ ‚àà ùêº,
creates a circuit to it, and requests that it forward ùëü (and some
additional information) to the hidden service. In turn, the hidden
service creates its own circuit to ùëü. After this process, ùëü serves as
a bridge between the client and hidden service circuits, providing
connectivity between the two.
2.2 Threat model
Bento runs on top of the existing Tor network, and as a result we
adopt the same network-level threat model. This can vary by user
and application, but a common assumption is that of a powerful
routing-capable adversary [67], such as a nation-state. Such an
adversary often controls a large network‚Äîand can even influence
nearby routes to go through its network‚Äîbut cannot have a global
view of Internet traffic. Adversaries can also actively participate in
the Tor network [3].
In addition to these routing-capable, network-based adversaries,
our architecture requires us to consider the threats that can arise
from an altogether new mode of interaction: loading and running
code on other users‚Äô machines. We assume that users naturally
have physical access to their machines, and can thus introspect on
running processes. However, we also assume that some Bento mid-
dleboxes will have secure, trusted execution environments (TEEs),
such as Intel SGX. We explicitly assume that these environments are
safe; that is, for any code or data being executed or stored inside of
a secure enclave, we assume that the attacker cannot introspect on
either, despite having physical access to the machine. This assump-
tion has been drawn into question by recent attack discoveries [81],
but we do not believe these vulnerabilities are fundamental to TEEs
(and many have been patched [68]). Nonetheless, we note that we
are not strictly bound to SGX; Bento uses conclaves [34] (‚Äúcontain-
ers of enclaves‚Äù), a system designed to work with any TEE with
similar properties to SGX.
Attacks Tor has been targeted by both academics and real-world
attackers [3, 10, 17, 27, 30, 33, 36, 41, 46, 50, 55, 56, 61, 69, 77, 86].
To show some of the potential benefits of Bento, we consider two
broad classes:
First, deanonymization attacks [3, 15, 27, 36, 56] seek to infer
the two endpoints of a Tor circuit through passive or active traffic
analysis. Routing-capable adversaries are very well-suited for these
kinds of attacks, as they can influence traffic on the entry leg and
1These are sometimes also referred to as ‚Äúonion services‚Äù; Tor developers use the terms
interchangeably [58].
822
the exit leg to go through networks they control‚Äîat that point, they
can perform straightforward traffic correlation attacks [41].
Second, fingerprinting attacks [12, 13, 50, 82‚Äì84] observe only
the traffic from the source, and use deterministic traffic patterns
from web servers to act as fingerprints. Typical defenses involve
reordering or batching requests and sending junk control packets to
make websites appear indistinguishable from traffic patterns alone.
We describe state of the art website fingerprinting attacks in ¬ß7
and deanonymization attacks in ¬ß9.1.
2.3 Programmable Middleboxes
Middleboxes are network devices that sit on the traffic path (often
between two routers or switches) and perform processing on pack-
ets as they traverse the network. Historically, middleboxes were
monolithic (a single box served a single purpose, such as a firewall
or load balancer) [28, 32, 39, 44, 70, 85]. Moreover, unlike typical
computers, traditional middleboxes were not re-programmable: of-
ten, simply getting a new version required getting an entire new
physical device.
Recent innovations in network function virtualization (NFV) [7, 8,
16, 38, 39, 43, 47, 72, 74, 85] allow network operators to instantiate
middleboxes in virtual machines and place those VMs at arbitrary
locations in the network [29]. Some approaches have explored how
to make NFV more easily programmable by means of constructing
modular, composable functions that can be deployed onto middle-
boxes [8].
Many network services today depend on a variety of middleboxes‚Äî
including firewalls, load balancers, traffic shapers, or intrusion de-
tection systems‚Äîand increasingly many are relying on programmable
middleboxes with NFV. As a result, there is a significant gap be-
tween the capabilities of the ‚Äúnon-anonymous‚Äù Internet and the Tor
anonymity network. Bento seeks, in effect, to ‚Äúmodernize Tor‚Äù by
incorporating programmable middlebox functionality. We demon-
strate that this will make it feasible to deploy a far more sophisti-
cated set of anonymous services than is possible today.
2.4 Extensions to Tor
The closest piece of related work to our programmable middleboxes
is FAN (Flexible Anonymous Network) [66]. FAN seeks to make
the Tor protocol itself more programmable, allowing for custom
Internet privacy and lightweight updates through the use of Pro-
tocol Plugins, which are pieces of code that are merged into the
Tor codebase and executed inside a userland virtual machine. In
contrast, Bento sits atop Tor, and as a result, is complementary to
FAN.
Prior work has also looked to improve the security and privacy of
Tor using TEEs. SGX-Tor [48] combines SGX and Tor, reducing the
Tor attacker down to a network-level adversary with no insight into
the internal state of Tor components. Large parts of the Tor code
and data are placed into an enclave to both protect sensitive data
and leverage the correctness of execution and integrity guarantees
of SGX. This prevents a number of well-known attacks, including
low resource attacks to demultiplex circuits, and also allows nodes
to protect the list of relays used. Bento expands on this considerably,
by allowing users to safely deploy new, tailored functions (not just
the existing Tor codebase).
823
Figure 1: Overview of installing, and executing a Browser
‚Äúfunction‚Äù that runs on an exit node, downloads a given URL,
and delivers it, padded to some threshold number of bytes. To an
attacker sniffing the client‚Äôs link, it appears the client uploads a
small amount and then downloads a large amount.
3 OVERVIEW OF BENTO
Before describing its goals (¬ß4) and design (¬ß5), we first present a
high-level overview of how Bento enables users to extend Tor with
programmable functions.
In Bento, a client can offload processing that would have hap-
pened on their own machine to another node in the Tor network
altogether. We depict this in Figure 1, and describe each step with
a motivating example.
Motivating Example A user, Alice, wishes to anonymously
browse a website over Tor, but fears that an adversary has the
ability to observe traffic entering and leaving her machine. Such an
adversary could launch a website fingerprinting attack [12, 13, 82‚Äì
84] by correlating traffic patterns with known websites. Typical
solutions to this problem would have Alice alter her traffic patterns
while visiting the website, requiring assistance from the website or
modifications to Tor itself.
Writing a Function First, Alice writes or downloads a Bento
function: a program that is intended to be run on other Tor nodes.
These functions can be powerful, but they are constrained to a
limited API (¬ß5), and run in a restricted sandbox. Critically, they run
outside of unmodified Tor‚Äîin essence, they are like small servlets
running on Tor relays.
Alice‚Äôs function, Browser, is a program that takes as input a