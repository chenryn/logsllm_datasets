HTML5 introduced multithreading to JavaScript, in the form
of worker threads (web workers), allowing real parallelism for
JavaScript code. With web workers, every worker has its own
(synchronous) event queue. The synchronization is handled via
messages, which are again events. Thus, JavaScript does not
require explicit synchronization primitives.
The support for true parallelism allows to mount new side-
channel attacks. Vila et al. [47] exploited web workers to spy
on different browser windows by measuring the dispatch time
of the event queue. This timing side-channel attack allows to
detect user inputs and identify pages which are loaded in a
different browser window. A similar attack using web workers
was shown by Lipp et al. [20]. However, this attack does not
exploit timing differences in the browser engine, but on the
underlying microarchitecture. An endless loop running within
a web worker detects CPU interrupts, which can then be used
to deduce keystroke information.
d) Shared Data: To synchronize and exchange data,
web workers have to rely on message passing. Message passing
has the advantage over unrestricted memory sharing as there
is no requirement for synchronization primitives. Sending an
object to a different worker transfers the ownership of the
object as well. Thus, objects can never be changed by multiple
workers in parallel.
JavaScript
transferring the ownership of objects
can be
As
slow,
introduced SharedArrayBuffers. A
SharedArrayBuffer is a special object which behaves the
same as a normal ArrayBuffer, but it can be simultaneously
accessed by multiple workers. Inherently, this can reintroduce
synchronization problems.
Schwarz et al. [40] and Gras et al. [13] showed that this
shared data can be exploited to build timing primitives with
a nanosecond resolution. Their timing primitive requires only
one worker running in an endless loop and incrementing the
value in a SharedArrayBuffer. The main thread can
simply use the value inside this shared buffer as a timestamp.
Using this method, it is possible to get a timestamp resolution
of 2 ns, which is almost as high as Intel’s native timestamp
counter, and thus sufﬁcient to mount DRAM- and cache-based
side-channel attacks.
e) Sensor API: As JavaScript is also used on mobile
devices, HTML5 introduced interfaces to interact with device
sensors. Some sensors are already restricted by the existing
permission system in the browser, such as the geolocation
API. This permission system uses callback functions to deliver
results. Hence,
is inherently incompatible with existing
synchronous APIs and cannot be instrumented to protect
arbitrary JavaScript functions. As these sensors can affect the
user’s privacy, the user has to explicitly permit usage of these
interfaces on a per-page basis. However, several other sensors
are not considered invasive in terms of security or privacy.
it
Mehrnezhad et al. [23] showed that access to the motion
and orientation sensor can compromise security. By recording
the data from these sensors, they were able to infer PINs
and touch gestures (e.g., zoom) of the user. Although not
implemented in JavaScript, Spreitzer [42] showed that access
to the ambient light sensor (as speciﬁed by the W3C [50]) can
also be exploited to infer user PINs. Similarly, Olejnik [31]
utilized the Ambient Light Sensor API to recover information
on the user’s browsing history,
to violate the same-origin
policy, and to steal cross-origin data.
C. JavaScript Exploits
In addition to microarchitectural and side-channel attacks,
there are also JavaScript-based attacks exploiting vulnerabili-
ties in the JavaScript engine. An exploit triggers an implemen-
tation error in the engine to divert the control ﬂow of native
browser code. These implementation errors can—and should—
be ﬁxed by browser vendors. Side-channel attacks, however,
often arise from the hardware design. In contrast to software,
the hardware and hardware design cannot be easily changed.
As exploits are based on implementation errors and not
design issues, we cannot identify general requirements for
such attacks. Every JavaScript function and each interface
can be potentially abused if there is a vulnerability in the
engine. Thus, we cannot provide a general protection against
exploits, and exploits are therefore not in the scope of this
paper. However, we can still reduce the attack surface of the
browser, and we provide practical protection against 50 % of
the published JavaScript 0-day exploits since Chrome 49.
Exploits often rely on arrays to craft their payload. More-
over, bugs are often triggered by errors in functions re-
sponsible for parsing complex data (e.g., JSON). As some
of the functions used in exploits are also requirements for
microarchitectural and side-channel attacks, we also evaluate
exploits in this paper to conﬁrm that our permission system
is also applicable to reduce the general attack surface of the
browser, i.e., hardening browsers against 0-day exploits until
they are ﬁxed by the browser vendors.
III. THREAT MODEL
In our threat model, we assume that the attacker is capable
of performing state-of-the-art microarchitectural and software-
based side-channel attacks in JavaScript. This is a reasonable
assumption, as we found most published attacks to be ac-
companied with proof-of-concept source code allowing us to
reproduce the attacks.
We assume that the victim actively uses a browser, either
natively, or in a virtual machine. The attacker resides either
in a different, co-located virtual machine [14], [40] or—for
most attacks—somewhere else on the internet. In all state-
of-the-art microarchitectural and software-based side-channel
attacks, the attacker has some form of remote code execution.
In line with these works, we assume that the attacker was
able to maliciously place the attack code in a benign website.
This can be achieved if the benign website either includes
content from a (malicious) third party, such as advertisements
or libraries, or if an attacker has compromised the benign site
in some way. Another possibility is that the victim navigated
to a malicious website controlled by the attacker. Hence, in
all cases, the attacker-controlled JavaScript code is executed
in the victim’s browser.
The browser contains a JavaScript engine that executes
code embedded in a website inside the browser sandbox.
The sandbox ensures that JavaScript code cannot access any
system resources not intended to be accessed. Furthermore,
every page has its own execution context protected by the
sandbox, i.e., code on different pages cannot inﬂuence each
other. We assume that an attacker is not aware of exploitable
bugs in the JavaScript engine, and hence, can only use legit-
imate JavaScript features. Exploiting bugs in the interpreter,
4
Fig. 1: The permission system acts as an abstraction layer
between the JavaScript engine and the interfaces provided to
a JavaScript developer.
1 function : {
2
3
4
5
6
7
8
9
return: "Math.floor(window.performance.now()
/ 1000.0) * 1000.0" },
"window.performance.now":
{ action: "modify",
"history.back":
{ action: "block" },
"navigator.getBattery":
{ action: "ask", default: "null" }
Listing 1: Excerpt of a protection policy. The function
performance.now is modiﬁed to return timestamps with
a lower resolution, the function history.back is blocked.
sandbox, or other execution environments, is out of scope for
this paper.
IV. DESIGN OF JavaScript Zero
In this section, we present the design of our JavaScript
permission system, JavaScript Zero. We propose a ﬁne-grained
policy-based system which allows to change the behavior of
standard JavaScript interfaces and functions. Policies enforce
certain restrictions to a website to protect users from malicious
JavaScript. They allow to quickly adapt the permission system
to protect against newly discovered attacks. Furthermore, dif-
ferent policies can be combined by the user, depending on the
desired level of protection.
The idea of JavaScript Zero is to introduce an abstraction
layer between the JavaScript engine and the interface provided
to a (malicious) JavaScript developer. The basic idea of this
layer is to protect functions, interfaces, and object properties,
as shown in Figure 1. The abstraction layer can block, modify,
or simply forward every interaction of the code with the
JavaScript engine. The layer is completely transparent to the
web application and, thus, no modiﬁcation of any existing
source code is required to deploy JavaScript Zero. JavaScript
Zero can intercept all calls to functions provided by the
language, which also includes constructors of objects and
getters of object properties. However, it does not interfere with
the constructs of the language itself, i.e., loops and primitive
data types bypass the abstraction layer. In the remainder of
this paper, we use the term “functions” to refer to general
functions, object constructors, and getters of object properties
for the sake of brevity.
The exact behavior of JavaScript Zero is deﬁned by a
protection policy. A protection policy is a machine-readable
description which contains a policy for every function, prop-
erty, or object that should be handled by the permission system.
Listing 1 shows an excerpt of such a policy. In this sample
policy, the function to go back to the last website is completely
blocked, i.e., if a script calls this function, it does nothing.
Furthermore,
the resolution of the high-resolution timer is
reduced from several microseconds to one second. Finally, the
battery API requires permission from the user, and if the user
denies access to the function, it simply returns no information.
The policies can be designed by any user and shared
with other users. Thus, as soon as a new exploit, side-
channel attack, or microarchitectural attack emerges, a new
policy preventing it can be created and shared with all users.
We propose a community-maintained policy repository where
users can subscribe to certain kinds of policies, e.g., more or
less strict policies for their speciﬁc hardware and software.
The functionality of JavaScript Zero does not fundamentally
rely on the community, and every user can also write their
own policies, or thoroughly inspect third-party policies before
applying them. Hence, a careful user can avoid the inherent
limitations of a community-maintained policy, e.g., adversarial
modiﬁcations, which can happen in any open-source project.
For every policy, there are four different possibilities how
it affects a function used on a website:
1) Allow. The function is explicitly allowed or not speciﬁed
in the policy. In this case, no action is performed and the
function can be used normally.
2) Block. The function is blocked. In this case, JavaScript
Zero replaces the function by a stub that only returns a
given default value.
3) Modify. The function is modiﬁed. In this case, JavaScript
Zero replaces the original function with a policy-deﬁned
function. This function can still call the original function
if necessary.
4) User permission. The function requires the permission
of the user. In this case, JavaScript Zero has to pause
execution of the current function, display a notiﬁcation
to the user, and wait for the response of the user.
In the fourth case, the user has to explicitly grant permis-
sion. The user can opt to save the decision, to not be bothered
again, and, thus, user interruptions are kept to a minimum.
We opted for a browser extension, as it can be easily
installed in a user’s browser and neither relies on modiﬁcation
of the source code of the website or the browser, nor any
external service, e.g., a web proxy. Thus, there is no constant
maintenance of a forked browser source base necessary. More-
over, by designing JavaScript Zero as a browser extension,
it can easily be implemented for any browser supporting
extensions (e.g., Chrome, Firefox, Edge) as the design of
JavaScript Zero is independent of the browser.
Figure 2 shows the general design of this approach. Func-
tions are replaced by wrapper functions which can either
immediately return a result or divert the control ﬂow to the
browser extension. The browser extension can then ask the
user whether to allow the function call or block it.
To allow regular users to use such a browser extension on
a day-to-day basis, we propose a simple interface for handling
protection policies. This interface deﬁnes so-called protection
levels, each grouping one or more protection policies. Thus, a
user only chooses a protection level out of a predeﬁned set
of levels, e.g., one of none, low, medium, high, paranoid.
Although this simpliﬁcation reduces the ﬂexibility of the
5
(Malicious)JavaScriptCodeJavaScriptEnginePermissionSystemLoops,Conditions,Arithmetic,···Functions,Objects,···1 var original_reference = window.performance.now;
2 window.performance.now = function() { return 0; };
3 // call the new function (via function name)
4 alert(window.performance.now()); // == alert(0)
5 // call the original function (only via reference)
6 alert(original_reference.call(window.performance));
Listing 2: Virtual machine layering applied to the function
performance.now. The function name points to the new
function, the original function can only be called using the
reference.
over state-of-the-art source rewriting techniques [38], [56],
[36], where functions are replaced directly in the source code.
Ensuring that source rewriting cannot be circumvented is a
hard problem, as function calls can be generated dynamically
and are thus not always visible in the source code [1]. Support
for such higher-order scripts is strictly necessary for full
protection, as failing to apply a policy to only one function
breaks the security guarantees of the security policies. How-
ever, higher-order scripts are often out-of-scope or not fully
supported [24]. In contrast, virtual machine layering ensures
that functions are replaced at the lowest level, right before they
are executed by the JavaScript engine.
Listing 2 shows an example of virtual machine layering.
As JavaScript allows to dynamically extend and modify pro-
totypes, existing functions can be changed, and new functions
can be added to every object. Virtual machine layering takes
advantage of this language property. Chrome Zero saves a
reference to the original function of an object and replaces
the original function with a wrapper function. The original
function can only be called using the saved reference. Calling
the function by using the function name will automatically
call the wrapper function. As Chrome Zero has full access to
the website, it can use virtual machine layering to replace any
original function. We can ensure that the code of Chrome Zero
is executed before the page is rendered, and thus, that no other
code can save a reference to the original function.
Additionally, virtual machine layering covers higher-order
scripts without any additional costs. Higher-order scripts are
scripts which are dynamically created (or loaded) and executed
by existing scripts. There are multiple ways of creating higher-
order scripts, including eval, script injection, function con-
structors, event handlers, and setTimeout. As any higher-
order script automatically uses the re-deﬁned function without
further changes, policies are automatically applied to higher-
order scripts as well, and there is no possibility for obfuscated
code to circumvent the function replacement.
As JavaScript Zero supports policies not only for functions
but also for properties and objects, we have to extend virtual
machine layering, which was originally only intended for
functions.
1) Properties: Typically, a property of a prototype is not a
function, but a simple data value. JavaScript allows to replace
all properties by special functions called accessor properties.
Accessor properties are a special kind of property, where every
access to the property triggers a user-deﬁned function. In case
the property was already an accessor property, Chrome Zero
simply replaces the original function. Thus, regardless of the
Fig. 2: A policy replaces a function by a wrapper. The
extension implements the logic to ask the user whether the
function shall be blocked or the original function is executed.
extension, we chose this approach as for a regular user it is
clearly not feasible to choose from protection policies or even
deﬁne custom protection policies.
V.
IMPLEMENTATION OF Chrome Zero
In this section, we describe Chrome Zero, our open-
source1 proof-of-concept implementation of JavaScript Zero
for Google Chrome 49 and newer. Implementing Chrome Zero
faces certain challenges:
C1 Restrictions must not be circumventable using self-
modifying code, such as higher-order scripts.
C2 Restricting access to potentially dangerous features must
be irreversible for a website.
C3 Restrictions must not have a signiﬁcant impact on com-
patibility and user experience.
In addition to the aforementioned challenges, implementing
JavaScript Zero as a browser extension results in a trade-off
between compatibility with up-to-date browsers and function-
ality we can use, i.e., we cannot change the browser and thus
have to rely on functions provided by the extension API.
First, we describe in Section V-A how to retroﬁt virtual ma-
chine layering for security and extend it for objects using proxy
objects [28]. Virtual machine layering was originally developed
for low-overhead run-time monitoring of functions [19]. We
use it to guarantee that a policy is always applied to a function
(Challenge C1). In Section V-B, we show that JavaScript
closures in combination with object freezing can be utilized
to secure the virtual machine layering approach to guarantee
irreversibility of policies (Challenge C2). This combination