lenge phase. If in addition forge does not occur, Sim has the
same advantage as Adv .
P[Sim → “DBDH”|Z = e(g, g)abc]
= P[µ
= µ|Z = e(g, g)abc] − P[forge, µ
0
= µ|Z = e(g, g)abc]
0
+ P[forge, Sim → “DBDH”|Z = e(g, g)abc]
0
= µ|Z = e(g, g)abc] − P[forge|Z = e(g, g)abc]
≥ P[µ
=
+  − P[forge|Z = e(g, g)abc]
1
2
If Z = e(g, g)z, then ˜C is completely random from the
6= µ holds with
In that case, µ0
view of the adversary.
probability exactly 1
2 .
P[Sim → “random”|Z = e(g, g)z]
= P[µ
0 6= µ|Z = e(g, g)z]
0 6= µ|Z = e(g, g)z] − P[forge, µ
+ P[forge, Sim → “random”|Z = e(g, g)z]
0 6= µ|Z = e(g, g)z] − P[forge|Z = e(g, g)z]
− P[forge|Z = e(g, g)z]
≥ P[µ
=
1
2
2 − P[forge].
Instead of running SigKeyGen to obtain hK∗
Putting the two pieces together, we know that Sim’s ad-
vantage is at least 
It remains to prove that
P[forge] is negligible. To do so, we construct Sim0 that can
win the SEU game with probability at least P[forge].
v , K∗si, Sim0
v from the SEU challenger. Then Sim0 proceeds
obtains K∗
as Sim. During the challenge phase of the CCA game, Sim0
obtains the signature σ from the SEU challenger (whereas
Sim obtains σ by running Sign). If forge occurs, Sim0 sub-
mits the forgery to the SEU challenger and wins. Note that
Sim0 makes at most one signature query. Thus Sim0 wins
the SEU game with probability at least P[forge]. By the
SEU assumption, P[forge] must be negligible.
5. HIERARCHICAL ATTRIBUTES
Recall the basic structure of our CP-ABE schemes. Dur-
ing KeyGen, we associate a random exponent ri to each
element gy−r = gy−Pn
i ∈ N . These exponents are “tied together” using the group
i=1 ri , where y is a system master se-
those that do not appear in the AND gate W =V
cret. During decryption, the proper matching of attributes
allows us to recover e(g, g)ri·s for every attribute i, including
i∈I i. This
allows us to recover e(g, g)r·s and subsequently e(g, g)y·s.
Clearly, the complexity of encryption/decryption is linear
in n, because we must handle every ri in order to recover r.
The same holds for ciphertext size. This is unsatisfactory for
small AND gates: if the number of literals appearing in W
is small, then most of our work involves don’t care elements.
In this section, we show that don’t care elements can be
handled more eﬃciently. The main idea is to arrange at-
tributes into a logical hierarchy, such that a single don’t care
can replace all of those represented in a subtree. This is illus-
trated in Figure 3, where the system in question has n = 8
attributes.
In this example, we augment the public key with randomly
chosen group elements T[1..2], . . . , T[7..8], T[1..4], T[5..8], T[1..8].
If, for example, the encryptor cares only about attributes
1 and 4, then he provides three don’t care elements in the
T[1..8]
xqqqqqqqq
;;;;;

----
T[3..4]
&MMMMMMMM

----
T[5..6]


----
T[1..2]

T[1..4]
T[5..8]
;;;;;

T[7..8]
----
T2n+1 T2n+2 T2n+3 T2n+4 T2n+5 T2n+6 T2n+7 T2n+8
Figure 3: Public Key Elements for Attribute Tree.
2n+2, T s
ciphertext: T s
[5..8]. In contrast, he would
have to provide six don’t care elements under the original
scheme: T s
2n+3 and T s
2n+2, T s
2n+3, T s
2n+8.
2n+5, T s
2n+6, T s
2n+7, T s
Essentially, the hierarchy allows us to cover the comple-
ment of I with fewer group elements. This reduces not only
the ciphertext size, but also the number of exponentiations
in encryption and the number of pairings in decryption. For
small AND gates, these costs are brought down from n to
log(n). For large AND gates, the costs will be dominated by
operations on attributes that actually appear in the AND
gate. In the worst case, every other attribute is included in
|I|
the AND gate, requiring
2 matching don’t care elements.
The price we pay for this optimization is an increase of
roughly n group elements in public/secret key size and an
increase of roughly n exponentiations in Setup and KeyGen.
Given the storage capacity of modern devices, the larger
key size is typically not an issue. The added computations
are also not prohibitive, because both Setup and KeyGen
are one-time operations whose costs are amortized over the
system lifetime.
We now describe in detail the optimized scheme.
Setup. Setup deﬁnes a binary tree with one leaf for each
attribute i ∈ N . Assume that attributes are assigned to
leaves in ascending order from left to right. Each non-leaf
x is associated with the integer range [i..j], where i is the
leftmost leaf descended from x and j is the rightmost leaf
descended from x. We call this structure the attribute tree.
In addition to the public key elements described in Sec-
tion 3, Setup generates one public key element for every
non-leaf node in the attribute tree.3 This is done as follows:
for each internal node x = [i..j], Setup chooses tx ∈ Zp at
random and deﬁnes Tx := gtx .
Since there are roughly n internal nodes in the attribute
tree, the number of group elements in the public key grows
from 3n + 1 to roughly 4n, and the same is true for the
number of exponentiations performed by Setup.
non-leaf node x = [i..j], KeyGen deﬁnes rx :=Pj
KeyGen. In addition to the secret key elements described in
Section 3, KeyGen generates one secret key element for every
non-leaf node in the attribute tree. Speciﬁcally, for each
k=i rk and
rx
tx . (Recall that KeyGen chooses random exponent
Fx := g
ri for every attribute i.)
3The root node can be used to encrypt to every user in the
system, regardless of his attributes.
x
&










The number of group elements in the secret key grows
from 2n + 1 to roughly 3n, and the same is true for the
number of exponentiations performed by KeyGen.
Encrypt. Given message M and AND gate W =V
i∈I i, En-
crypt selects a random s ∈ Zp and deﬁnes ˜C and ˆC as in
Section 3. To construct the Ci components, Encrypt runs
the following recursive procedure (called Traverse) on the
root of the access tree. For simplicity of presentation, as-
sume that n is a power of 2.
Traverse returns either 1 or 0 on a given internal node in
the access tree. Let the current node be x0 and let x1 and
x2 denote its children. We have two cases.
• x1 and x2 are leaves. Let i and i + 1 be the attributes
– i ∈ I or i + 1 ∈ I. Deﬁne Ci and Ci+1 as in Sec-
tion 3 and include them in the ciphertext. Return
1.
associate with x1 and x2, respectively.
– Neither i nor i + 1 is in I. Return 0.
• x1 and x2 are internal nodes. Run Traverse on both.
– If Traverse returns 1 on both x1 and x2, return 1.
– If Traverse returns 0 on both x1 and x2, return 0.
– Otherwise, assume without loss of generality that
Traverse returns 0 on x1 and 1 on x2. Deﬁne
Cx1 := T s
x1 and include it in the ciphertext. Re-
turn 1.
Finally, Encrypt adds to the ciphertext the necessary in-
dexing information, linking each Cx to the node x.
pairs Cx with Di to obtain e(g, g)rx·s.
Then Decrypt computes e(g, g)r·s asQ
Decrypt. Let x be a node such that Cx appears in the ci-
phertext.
• If x is a leaf representing i and i ∈ I, then Decrypt
• Otherwise, Decrypt pairs Cx with Fx to get e(g, g)rx·s.
x e(g, g)rx·s. This is
correct because rx is the sum of all ri’s in the subtree below
x in the attribute tree.
5.1 Discussions
We remark that binary trees are chosen simply for nota-
tional convenience. Depending on the particular application,
attributes can be arranged into semantic categories (cf. the
selective data sharing example of Section 7).
In general,
there is a trade-oﬀ between public/secret key size and ci-
phertext size: if we include more don’t care elements in the
system, corresponding to diﬀerent subsets of N , we are more
likely to be able to represent the whole set N with fewer
group elements. However, encryption time will increase due
to the complexity of ﬁnding a minimal covering. This trade-
oﬀ may be valuable in low-bandwidth applications.
We also believe that a similar optimization can be ob-
tained for our CCA scheme. Details are left as future work.
5.2 CPA Security Proof
We modify the CPA proof of Section 3 to accommodate
the new changes. The following portions of the proof are
aﬀected by the optimization.
Setup. For i ∈ N , Sim calculates the elements Ti, Tn+1 and
T2n+i as in Section 3. Then it calculates Tx for non-leaf node
x = [i..j] in the attribute tree. First it chooses δx at random
from Zp. If there exists i0 ∈ [i..j] such that i0 appears in the
challenge gate W , then Setup deﬁnes tx := b· δx. Otherwise,
in the attribute tree. We have three cases.
i, ri, ˆD, Di and Fi for every i ∈ N .
δx , where rx =Pi0
tx := δx. Then Tx is computed by raising either B or g to
δx.
Phase 1. Adv submits an attribute set S ⊆ N such that
S 6|= W . As in Section 3, Sim choose an appropriate j and
deﬁnes r0
Sim must also deﬁne Fx for each non-leaf node x = [i..i0]
• No k ∈ [i..i0] appears W . In this case, Tx = gδx and
k=i rk. Since j appears in W ,
Fx = g
we know that j 6∈ [i..i0]. Therefore rk = b· r0
k for every
k=i Br0
k )
• Some k ∈ [i..i0] appears W but j 6∈ [i..i0]. In this case,
Tx = gb·δx and Fx = g
k=i rk. Since
k for every k ∈ [i..i0].
j 6∈ [i..i0], we know that rk = b · r0
k=i gr0
1
k )
δx .
• j ∈ [i..i0]. Since j appears in W , we know that Tx =
k=i rk. Since
k. Sim computes
k ∈ [i..i0] and Sim computes Fx as (Qi0
b·δx , where rx =Pi0
Sim computes Fx as (Qi0
b·δx , where rx = Pi0
j ∈ [i..i0], we have rx = ab +Pi0
Fx as (A ·Qi0
k=i b· r0
1
δx .
gb·δx and Fx = g
rx
k=i gr0
k )
1
δx .
rx
rx
Challenge. Sim chooses random bit µ and deﬁnes ˜C as in
Section 3. Then it runs Traverse on the attribute tree. Let
the current node be x0 and let x1 and x2 denote its children.
We have three cases.
• x1 and x2 are leaves, and Ci and Ci+1 are included
in the ciphertext. Sim computes Ci as in Section 3.
More precisely, there are three cases.
– i ∈ I ∧ i = i. Compute Ci as C αi .
– i ∈ I ∧ i = ¬i. Compute Ci as C βi .
– i 6∈ I. Compute Ci as C γi .
Similarly for Ci+1.
• x1 and x2 are internal nodes, and Cx1 is included in
the ciphertext. Using the deﬁnition of Traverse, it is
easy to check that no attribute i in the subtree below
x1 appears in W . Sim sets Cx1 := C δx1 .
• x1 and x2 are internal nodes, and Cx2 is included in
the ciphertext. Similar to the previous case.
The rest of the proof proceeds as in Section 3.
6. THRESHOLD ACCESS TREES
Ideally, we would like the ability to encrypt to arbitrary
threshold access trees similar to those in [1]. Speciﬁcally,
consider the following deﬁnition of access trees4: each inter-
nal node in an access tree corresponds to a threshold gate,
while all leaf nodes are AND gates. The basic scheme of
Section 3 can be extended naturally as follows. To encrypt,
the secret exponent s used to mask the message M (in the
ciphertext component ˜C = M · Y s) is placed at the root
node of the access tree. Based on the threshold gate at the
root, shares of s are constructed and placed on the root’s
children. This is repeated until all nodes in the tree are
ﬁlled, including the leaves. Then the shares at the leaves
are used to produce ciphertext components as in the basic
scheme. We illustrate this procedure with an example.
Consider the access tree in Figure 4 and a CP-ABE in-
stance with ﬁve attributes {1, . . . , 5}. The threshold gate at
4Access Trees are access structures that control the ability
to decrypt. They are not to be confused with the attribute
trees of Section 5.
2-of-3
vmmmmmmmmmmm
7777777
s1
AND

mmmmm