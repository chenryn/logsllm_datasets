revocation status to each client during TLS handshakes. This
improvement eliminates both the page load delay and the
privacy concerns of traditional OCSP. However, OCSP Stapling
is still vulnerable to impersonation and man-in-the-middle
attacks since an attacker can simply choose not to include the
OCSP Staple in their handshake with the client.
OCSP Must-Staple [25] was proposed in 2015 to remedy
this issue. An X.509 certiﬁcate extension signals the browser
to block the connection if the OCSP Staple is missing.
The certiﬁcate extension corrects the attack vulnerabilities in
standard OCSP Stapling but requires server administrators to
commit to always giving an updated OCSP Staple. Failure to
do so results in their website becoming inaccessible to clients.
3We used source code as provided by the authors. CRLite’s full Bloom
ﬁlter cascade size is strongly dependent on the number of revoked certiﬁcates
(19.1 M) and the number of total certiﬁcates (86.2 M). Including revocations
only from publicly used certiﬁcates (1.1 M) reduces the size is to 1.93 MB.
3
Full adoption of OCSP Must-Staple also opens the Internet to
new attack vectors if proper infrastructure is not in place ahead
of time. An OCSP responder hit with an extended Denial of
Service (DoS) attack could block access to a large portion of the
Internet since server administrators would not be able to acquire
the requisite OCSP Staple. Due to these concerns, Google
Chrome currently does not support the certiﬁcate extension for
OCSP Must-Staple [9], [26]. While others [10] have suggested
the potential for a DOS attack is not a fundamental problem
as a CDN could distribute static revocation information, OCSP
Must-Staple has also suffered other problems. These include
CA inconsistencies and bugs in server implementations, both
of which have slowed adoption [27], [28] shown by the fact
that only 0.032% of live certiﬁcates use OCSP Must-Staple
[29].
Lastly, using short-lived certiﬁcates [30] is a strategy that
eschews revocation checking. Instead, certiﬁcates expire shortly
after issuance, generally ranging from a matter of hours [31]
to just a few days [32]. This strategy requires the server to
renew its certiﬁcate regularly. While it was previously not
practical to change public keys on renewal [32], the emergence
of new technology such as the ACME protocol [33] and
the EFF’s CertBot4 enables automatic public key rotation
on renewal. If a private key compromise occurs, the server
administrator does not renew the certiﬁcate. This strategy is
similar to OCSP Must-Staple except that the certiﬁcate is
regularly renewed instead of the OCSP Staple. Removing the
need for revocation checks, however, does place additional
strain on other elements of the certiﬁcate ecosystem, including
the issuing systems of CAs and other certiﬁcate monitors like
certiﬁcate transparency logs that must ingest more records
as more certiﬁcates are issued. More-frequent renewal of
certiﬁcates also places increased demands on organizations
in which any part of the certiﬁcate-issuing process is not fully
automated, requiring additional human effort to handle.
III. LET’S REVOKE SYSTEM DESIGN
As stated above, Let’s Revoke is designed to address the
concerns raised by previous revocation strategies and fulﬁll the
six criteria of a global revocation strategy. To accomplish these
goals, Let’s Revoke uses a push-based model and focuses on
minimizing the required computational resources, particularly
network bandwidth consumption.
Throughout this section, we use the following deﬁnitions
for the two entities involved in Let’s Revoke:
• CA - the entity that issues certiﬁcates and tracks revocation
statuses, including CAs that issue website certiﬁcates,
email certiﬁcates, code signing certiﬁcates, etc.
• Client - the entity that needs to verify the revocation status
of a particular certiﬁcate.
A. Design Description
Let’s Revoke utilizes dynamically-sized bit vectors, known
as Certiﬁcate Revocation Vectors (CRVs), to accomplish its
4https://certbot.eff.org/about/
4
efﬁciency goals. CRVs are simple data structures that use a
single bit to represent the revocation status of a certiﬁcate (0-no,
1-yes). To efﬁciently map certiﬁcates to their corresponding
revocation bits, Let’s Revoke uses new unique identiﬁers called
Revocation IDs (RIDs). RIDs consist of three parts. The ﬁrst
two parts are ﬁelds already present in all certiﬁcates, namely
the issuing CA and the expiration date. The third part is a new
X.509 extension ﬁeld called a revocation number (e.g., RID =
Let’s Encrypt : March 1, 2018 : 24561).
1) Revocation Numbers: Revocation numbers (RN) are
non-negative integers that represent the index to a revocation
bit within a particular CRV. The issuing CA assigns each RN
sequentially and includes it in the certiﬁcate as a new X.509
extension ﬁeld (e.g., Revocation Number: 37892). Including
the issuing CA and expiration date in an RID means that RNs
must be unique only among the certiﬁcates issued by the same
CA that expire on the same date, thereby reducing the required
magnitude of RNs.
To assign RNs, each CA uses a counter, beginning at 0, for
each possible expiration date. When issuing a certiﬁcate with a
given expiration date, the CA assigns an RN with the counter’s
current value and increments the counter. This process ensures
that given n certiﬁcates that expire on the same day, each
receives a unique RN [0..n − 1]. Thus, an issuing CA and
expiration date uniquely identify a CRV, and a certiﬁcate’s
RN provides the index of its revocation bit within that CRV.
In cases where a CA issues relatively few certiﬁcates that
expire each day, a unique counter can be used for a group of
consecutive days to track all certiﬁcates issued within that time
frame in a single larger CRV.
2) Certiﬁcate Revocation Vectors: Let’s Revoke maintains a
database of CRVs: one for each expiration date per CA. Every
CRV is initialized as an empty bit vector. When revoking a
certiﬁcate associated with a given CRV, the CA updates the
CRV as follows:
1) If the newly revoked certiﬁcate’s RN is larger than or
equal to the number of bits in the CRV, then append
enough 0-bytes to the CRV so the RN is less than the
number of bits in the CRV.
2) Set the bit at the index of the RN to 1.
For example, suppose a CA issues 100,000 certiﬁcates that
expire on a speciﬁc day. The CRV for that day is initially
an empty bit vector. When the ﬁrst certiﬁcate with RN = i
is revoked, the bit vector expands with enough zero bytes so
that bit i can be set to 1. For example, if RN=10 is revoked,
then the empty bit vector is replaced with a two-byte vector
that has bit 10 set. Suppose the next revoked certiﬁcate on the
same expiration date for this CA has RN = j. If i > j, then
bit j is set to 1. For instance, if RN=4 is revoked, then bit 4
in the ﬁrst byte of the two-byte vector is set to 1. If j > i and
bit j is not in the same byte as bit i, then the bit vector is
expanded again with enough bytes so that bit j can be set to 1.
For example, if RN=30 is revoked, the bit vector is expanded
to four bytes and bit 30 is set. The bit vector in each CRV has
just enough bytes to mark the highest RN that is revoked.
The CA aggregates these individual CRV updates to generate
a batch update for end clients using one of the following three
methods:
• ADD Method - the CA generates a list of all the newly
added RNs and the client iteratively adds each item in
the list to the corresponding CRV as described above.
• OR Method - the CA creates a delta CRV that includes
only the newly added RNs for the client to bitwise OR
with the client’s current CRV, yielding a fully updated
CRV.
• NEW Method - the CA generates a complete copy of
the current CRV that the client will bitwise OR with its
previous CRV.
The batch update is compressed, timestamped, and signed by
the CA before being sent to clients upon request.
To check the revocation status of a certiﬁcate, the client
ﬁrst accesses the correct CRV indicated by the certiﬁcate’s
issuing CA and expiration date. The client then determines the
revocation status of the certiﬁcate by verifying the value of
the bit at index RN.
3) Example: To illustrate the usage of Let’s Revoke, we
provide the following hypothetical example shown in Figure 1.
The example begins with the Example CA (ECA) that issues
16 certiﬁcates on January 1, 2019, that all expire on January 1,
2020. The CA assigns a revocation number to each certiﬁcate
between 0 to 15 inclusive. On February 2, 2019, the owner
of the certiﬁcate with the RN of 7 sends a signed request for
ECA to revoke that certiﬁcate. ECA revokes the certiﬁcate
and sets the appropriate bit in the ECA CRV corresponding
with the expiration date January 1, 2020. ECA then provides
clients, upon request, with either the single element list ({7})
or the current ECA CRV for January 1, 2020 (“0000 0001”).
Applying these updates, clients now have version 1 of the
January 1, 2020 ECA CRV.
A client, upon receiving a certiﬁcate with an RID
corresponding to the January 1, 2020 ECA CRV and an RN
of 2, checks the corresponding bit in the CRV, determines that
it is unset, and proceeds to use the certiﬁcate.
A short time later, on February 22, 2019, the two certiﬁcates
with the RNs of 2 and 4 are submitted for revocation. ECA
again revokes the certiﬁcates and updates the January 1, 2020
ECA CRV. When a client requests updates to this CRV,
indicating it already has version 1, ECA can send the list
of newly added elements ({2,4}), an updating CRV (“0010
1000”), or the current CRV for January 1, 2020 (“0010 1001”).
These updates produce version 3 of the CRV. Once updated, if
the client again receives the certiﬁcate with an RID for January
1, 2020, ECA, and RN 2, it ﬁnds the bit in the corresponding
CRV is now set and rejects the revoked certiﬁcate.
On January 2, 2020, ECA and all clients purge the January
1, 2020 CRV from their data stores since all 16 certiﬁcates that
expired on January 1, 2020 are no longer valid, irrespective of
their revocation status.
5
B. Design Analysis
1) Revocation IDs and Revocation Numbers:
Including
the expiration date in a certiﬁcate’s identiﬁcation provides
two advantages to RIDs compared to the identiﬁers in other
revocation approaches.5
First,
the RNs
in RIDs are efﬁciently small and
unique. Current certiﬁcate revocation tracking utilizes large
pseudo-random numbers as unique identiﬁers, including serial
numbers (≈128 bits) and SHA256 ﬁngerprints (256 bits).
These large numbers are necessary to avoid misidentifying one
certiﬁcate as another. However, due to their sequential issuance,
RNs ensure uniqueness and can use a smaller ﬁxed-length
encoding for improved storage and communication efﬁciency.
The design in this paper speciﬁes encoding RNs as 32-bit
integers, enabling the representation of over 4 billion certiﬁcates
per CA per day, while also requiring signiﬁcantly less space
than traditional identiﬁers.
Second, the expiration date enables the efﬁcient removal of
revocation information for already expired certiﬁcates. Once a
speciﬁed expiration date has passed, CRVs labeled with earlier
dates are safely removed since all associated certiﬁcates have
expired. This approach does not waste any storage on obsolete
information and requires no additional network connections to
complete these removals.
2) Certiﬁcate Revocation Vectors: CRVs effectively utilize
the efﬁciency improvements offered by RNs and RIDs to
reduce the computational, storage, and network requirements
of revocation checking.
Computationally, nearly all operations occur in constant
time. To check a revocation status, accessing a speciﬁed bit
has constant time complexity as the certiﬁcate’s RN speciﬁes
the index.
When updating CRVs, there are two operations to consider:
appending additional zero bytes and setting the appropriate bit.
Appending additional bytes when necessary is also a constant
time operation since the number of required additional bytes
is given as the difference between the total number of bytes
currently in the CRV and the byte where the new RN is set.
Setting a bit within the CRV is likewise done in constant time
since the index of the bit is given by the certiﬁcate’s RN.
Batch updates to CRVs are linear operations according to
the number of new RNs since every new RN added causes a
constant time update operation.
Storage requirements for CRVs also remain very low,
since every certiﬁcate is represented using only a single bit
As an example, a certiﬁcate space of 100M certiﬁcates6 is
represented in at most 12.5 MB (100 million bits) without any
compression. Since CRVs generally contain long sequences
of unset bits, compression algorithms are highly effective at
further decreasing storage requirements.
5It is worth noting that RNs and RIDs offer efﬁciency gains to many other
revocation strategies independent of CRVs and Let’s Revoke.
6We chose 100M certiﬁcates as a representative number similar to the total
number of certiﬁcates we found during our Internet scan, which we discuss in
section V.
Fig. 1: Sequence Diagram for Let’s Revoke showing the processes of certiﬁcate issuance to web servers and revocation as well
as the update process of CRVs for both the CA and client.
The communication of revocation updates between CAs and
clients requires network resources. Let’s Revoke supports three
methods for communicating batch updates, and it selects the
method that minimizes bandwidth costs.
The most efﬁcient update method depends on the total
number of certiﬁcates represented in a CRV, previously revoked
certiﬁcates, and newly revoked certiﬁcates. The following is a
general approximation to determine which update method is
most efﬁcient. If fewer than 0.1% of all represented certiﬁcates
are newly revoked, the CA sends a list of the 32-bit RNs to
add to the CRV (ADD method). In the rare case of revoking
more than half of the current active certiﬁcates since the last
update, the CA generates and sends an entirely new CRV (NEW
method). For all other updates, it is usually most efﬁcient to
create and send a CRV containing only the new additions
(OR method). Figure 2 illustrates more exact results for which
update method minimizes bandwidth requirements and the level
of those requirements at differing revocation percentages for a
CRV representing 1M certiﬁcates. Most updates are relatively
small and therefore use the ADD method for batch updates,
typically requiring less than 3 KB for every 1M certiﬁcates
covered to update daily. The OR method allows for efﬁcient
distribution of large updates during mass revocation events or
when the client’s CRV is sufﬁciently outdated.
Selecting the minimally-sized update method ensures that
the data structure can be communicated using minimal
network bandwidth. Assuming a certiﬁcate space of 100M
certiﬁcates and a total revocation rate of 2% distributed as
100 date-separated CRVs (1M certiﬁcates issued per day), then
each CRV receives an additional 0.04% of new revocations
every day. Each update for a single CRV requires 1.14 KB of
network bandwidth using the ADD method. In total, a client
downloads just 114 KB per day from 100 CRVs to receive
complete revocation coverage for 100M certiﬁcates.
Since the design calls for individual CAs to generate CRVs, it
is important to show that distributing the revocation information
across multiple CRVs does not drastically affect the other
desired attributes. Since distributed CRVs are smaller than an
equivalent monolithic CRV, all computational requirements
should decrease (e.g., look-up times, memory requirements).
Table I shows a comparison of two different distribution
strategies. The ﬁrst represents a single large CA that issues 30M
certiﬁcates per month and stores three monthly-generated CRVs.
The second shows the corresponding values for 5 smaller CAs
that issue 200K certiﬁcates per day and store 90 daily-generated
CRVs (450 total CRVs). The calculation of the daily update
bandwidth assumes a constant daily revocation percentage.
These results show that while there is storage overhead
associated with the meta-data required for distributing CRVs,
this overhead is minimal compared to the size of the CRVs
themselves.
6
(a) Update Method for All Percentages
(b) Update Size for All Percentages
(c) Update Method for Low Percentages
(d) Update Size for Low Percentages
Fig. 2: Details of update methods and efﬁciency levels for a CRV representing one million certiﬁcates shown as follows:
(a) The optimal update method for the CRV depending on the beginning and ending revocation percentages.
(b) The compressed update size for the optimal update method.
(c) A zoomed in region of (a), showing the update method for normal low revocation percentages.
(d) A similarly zoomed in region of (b), showing the update size for normal low revocation percentages.
C. Distribution Methods
While CRVs are an efﬁcient representation of revocation
information, CAs must still distribute this data to potentially
every client on the Internet. Currently, both CRLs and OCSP
reponses are frequently uploaded to Content Delivery Networks
(CDNs) to disseminate revocation information from CAs to
clients more efﬁciently. CAs can similarly utilize CDNs to
distribute CRVs by uploading, at regular intervals, the signed
latest version of each CRV. For improved bandwidth efﬁciency,
the CA also generates the most efﬁcient CRV update from the