simple as searching the kernel symbol table. There are
a number of challenges. First, function Ft might have
different semantics than Fr even though their names are
the same. Accordingly, the patch cannot be applied to
Kt. KARMA addresses this problem by further match-
ing their semantics. Second, Ft may have a (slightly)
different name than Fr even though their semantics is the
same. For example, CVE-2015-3636 [30], exploited by
PingPong root, exists in function ping_unhash in the
Google Nexus 5 kernel but ping_v4_unhash in some
other kernels. Third, Ft could have been inlined in the
target kernel and thus does not exist in the symbol ta-
ble. To address these challenges, we assume that most
(other) functions are not changed or renamed across dif-
ferent kernels. This assumption is backed by our ﬁrst
observation (Section 2.1).
To ﬁnd matches of function Fr in target kernel Kt,
we ﬁrst extract the symbol table from Kt’s binary 3 and
search in it for the name of Fr.
If an exact match is
found, we consider this function to be the only candi-
date. Otherwise, we try to identify candidate functions
by call relations. Speciﬁcally, we ﬁrst extract the call
graphs from the target and the reference kernels. We col-
lect callers and callees of function Fr in the reference
3The kernel binary often contains the symbol table so that kernel
modules can be linked to the kernel. This table may or may not be
exported through the /proc/kallsym ﬁle at runtime.
kernel’s graph, and try to locate nodes in the target ker-
nel’s graph that have similar call relations to these two
sets of functions. We may ﬁnd a unique matching node if
the function has been simply renamed. If the function has
been inlined, the target kernel’s call graph contains direct
edges from the caller set to the callee set (instead of con-
nected through Fr). Accordingly, we use the containing
function as the candidate. Multiple candidate functions
may be identiﬁed using this approach. The semantics
of these candidate functions is then compared to that of
function Fr to ensure that the patch is applied to correct
functions.
2.5.2 Semantic Matching
In this step, KARMA uses semantic matching to de-
cide whether a function should be patched and whether
a given reference patch can be adapted to it. For two
Android kernels, the same source code could be com-
piled into different binaries – they may vary in regis-
ter allocation, instruction selection, and instruction lay-
out. In addition, the positions of structure members may
have shifted, and the stack may contain different tempo-
rary variables (e.g., because of differences in the regis-
ter spilling). Therefore, simple syntactic comparison of
functions is too restrictive and may reject functions that
could otherwise be patched. To this end, we leverage
symbolic execution to compare semantics of the candi-
date function (Ft) and the reference function (Fr).
Path explosion is a signiﬁcant obstacle in symbolic ex-
ecution. The situation is even more serious in the Linux
kernel because many kernel functions are highly com-
plicated. Even if the vulnerable function looks simple, it
may call complex other functions. This can quickly over-
whelm the symbolic execution engine. In KARMA, we
assume that functions called by Ft and Fr have the same
semantics if they share the same signature (i.e., function
name and arguments). Therefore, we can use non-local
memory writes (i.e., writes to the heap or global vari-
ables), function calls, and function returns as checkpoints
for semantic comparison. Non-local memory writes,
function calls, and returns make up the function’s impacts
to the external environment. We consider two functions
having the same semantics if their impacts to the envi-
ronment are the same. We do not take stack writes into
consideration because the same function may have dif-
ferent stack layouts in two kernels.
To compare their semantics, we symbolically execute
the basic blocks of Fr and Ft and generate constraints
for memory writes and function calls. For each memory
write, we ﬁrst check whether it is a local write or not (we
consider it a local write if its address is calculated related
to the stack/base pointer). If it is a non-local write, we
add two constraints that the memory addresses and the
USENIX Association
26th USENIX Security Symposium    1259
content-to-write should be equal. For function calls, we
ﬁrst check that these functions have the same name (and
arguments if the kernel source is available).
If so, we
add constraints that the arguments to these two functions
should be equal. We handle function returns similarly
by adding constraints for register r at the function exits.
External inputs to these two functions, such as initial reg-
ister values, non-local memory reads, and sub-function
returns, are symbolized.
KARMA supports two modes of operation:
in the
strict mode, we require that two matching constraints are
exactly the same, except for constants. Constants are
often used as offsets into structures or the code (e.g.,
to read embedded constants in the code). These offsets
could be different even for the same source code because
of different hardware/software settings (e.g., conditional
compiling). We ignore these constants to accommodate
these differences. In a relaxed mode, we use a constraint
solver to ﬁnd a solution that can fulﬁll all the constraints
at the same time. We consider two functions to be se-
mantically equivalent if there exist at least one such so-
lution. Moreover, to avoid patching an already-patched
function, we compare path constraints for the variables
accessed by reference patch Pr in function Fr and Ft.
If they are more restrictive in Ft than in Fr (i.e., con-
ditional checks are added in Ft), the function may have
already been patched. Note that since KARMA’s patches
cannot modify the kernel memory, reapplying a patch is
likely safe. If a semantic match is found, the symbolic
formulas provide useful information for adapting patch
Pr for the target kernel. For example, we can adjust Pr’s
registers and ﬁeld offsets by comparing formulas of the
function arguments. We evaluate the effectiveness of se-
mantic matching in Section 3.2.
2.6 Live Patching
To enable its protection, KARMA needs to run its client
in the user device. The client consists of a regular app and
a kernel module. The app contacts the KARMA servers
to retrieve patches for the device, while the kernel module
veriﬁes the integrity of these patches and applies ones
that pass the veriﬁcation.
2.6.1 Integration of Lua Engine
Patches in KARMA are written in the Lua language.
They are executed by a Lua engine embedded in the
kernel. KARMA extends the Lua language by provid-
ing a number of APIs for accessing kernel data struc-
tures. Normally, extending Lua with unsafe C functions
forgoes Lua’s memory safety. KARMA provides two
groups of APIs to Lua scripts. The ﬁrst group is used
exclusively for applying patches, and the other group is
API
Functionality
Hook a function for live patching
hook
Hook the calls to sub-functions for live patching
subhook
Allocate memory for live patching
alloc_mem
Free the allocated memory for live patching
free_mem
Locate a callee that can be hooked
get_callee
Get the kernel symbol address
search_symbol
current_thread Get the current thread context
read_buf
read_int_8
read_int_16
read_int_32
read_int_64
Read raw bytes from memory with the given size
Read 8 bits from memory as an integer
Read 16 bits from memory as an integer
Read 32 bits from memory as an integer
Read 64 bits from memory as an integer
Table 4: The extension to Lua. The ﬁrst ﬁve functions
can only be used by the live patcher, not by patches.
used by patches to read kernel data. Our vetting process
automatically ensures that patches can only use the sec-
ond group of APIs. As such, the memory safety of Lua
is retained because all the APIs that a patch can access
are read-only. Table 4 lists these APIs, which provide
the following functionalities: 1) symbol searching: re-
turn the run-time address of a symbol; 2) function hook-
ing: hook a given function/sub-function in order to exe-
cute the patch before/after the function is called; 3) typed
read: given an address, validate whether the address is
readable and return the (typed) data if so; 4) thread-info
fetching: return the current thread information, such as
its thread ID, kernel stack, etc. The ﬁrst two function-
alities belong to the ﬁrst group, and the rest belongs to
the second group. Again, the live patcher can use both
groups of the APIs, but patches can only use the second
one.
2.6.2
Patch Application
To apply a patch, KARMA hooks the target function
to interpose the patch in the regular execution ﬂow, as
shown in Fig. 8. Speciﬁcally, for each hooking point, we
create a piece of the trampoline code and overwrite the
ﬁrst few instructions at the hooking point with a jump to
the trampoline. At run-time, the trampoline saves the cur-
rent context by pushing all the registers to the stack and
invokes the Lua engine to execute the associated patch.
The saved context is passed to the patch as arguments so
that the patch can access these registers. Before installing
the hook, the live patcher calls the stop_machine func-
tion and checks whether there are any existing invoca-
tions of the target function in the kernel stacks. If so, it is
unsafe to immediately patch the function because other-
wise the existing invocations will return to the patched
version, potentially causing inconsistent kernel states.
When this happens, we return an error code to the client
which will retry later. As soon as the patch is applied, the
vulnerable function is protected from attacks. If no ma-
licious inputs are detected, the patch returns zero to the
trampoline, which in turn restores the context, executes
1260    26th USENIX Security Symposium
USENIX Association
executions to make a decision. A number of patches
we tested require this capability. In the thread context,
we can also support multiple Lua engines to improve
the throughput of patch execution. Speciﬁcally, we can
spawn multiple kernel threads to run several instances of
the Lua engine. A dispatch algorithm decides which Lua
engine a request should be scheduled to. The algorithm
must be deterministic so that requests in the same name
space will always be scheduled to the same engine, al-
lowing them to access states from previous invocations.
When a thread ends, its associated states are cleared from
all the Lua engines.
Lua is a garbage-collected language. Patches thus do
not need to explicitly manage memory allocation and re-
lease. The Lua engine uses a simple mark-and-sweep
garbage collector [35]. Kernel patches usually do not
need to allocate many memory blocks. The default
garbage collector works well for our purpose without
slowing down the system.
2.7 Prototype of KARMA
We have implemented a prototype of KARMA. We wrote
a number of ofﬂine tools for patch adaptation and sign-
ing. Our symbolic execution engine was based on the
angr framework [6, 44]. We implemented the syntactic
and semantic matching by ourselves. Our Lua engine in
the kernel is similar to the lunatik-ng project [26]. For
example, the Linux kernel does not use ﬂoating-point
arithmetic. We therefore changed Lua’s internal number
representation from ﬂoating-points to integers. We also
removed the unnecessary Lua libraries such as ﬁle opera-
tions. Furthermore, we added the support to name spaces
in our Lua engine and extended the Lua language with
the APIs speciﬁed in Table 4. We added roughly about
11K lines of source code in total to the Android ker-
nel. The added code was compiled as an 800KB kernel
module. This kernel module can be pre-installed on An-
droid devices through collaboration with vendors or in-
stalled afterwards through rooting, the only choice avail-
able. KARMA can support all the known Android kernel
versions (from 2.6.x to 3.18.x) and different vendors.
3 Evaluation
The effectiveness of KARMA can be evaluated by its ap-
plicability, adaptability, and performance. Applicability
quantiﬁes how many existing kernel vulnerabilities can
be patched by KARMA, and adaptability quantiﬁes how
many devices that KARMA can adapt a reference patch
for. In the following, we describe these three aspects of
the evaluation in detail.
Figure 8: Live patching through function hooking
the overwritten instructions, and jumps back to the orig-
inal function; If malicious inputs are detected, the patch
returns an error code to the trampoline, which ends the
execution of the hooked function by jumping to a return
instruction.
2.6.3 Patch Dispatching
KARMA supports two methods to dispatch a patch, one
for each of the two execution contexts: the interrupt con-
text or the thread (or process) context. In the interrupt
context, the Lua engine is directly invoked through the
engine’s C interface, similar to a regular function call.
However, it is expensive to launch a new Lua engine each
time a patch is executed. In the thread context, we instead
schedule patches to a standalone Lua engine (through a
workqueue) and wait for the results. The Lua engine ex-
ecutes in a self-contained kernel thread and processes in-
coming requests from the workqueue. Each request is
identiﬁed by the thread ID and the patch ID. This dis-
patching method cannot be used in the interrupt context
because blocking functions (e.g., to acquire a lock) can-
not be called in that context. If a vulnerable function is
called in both contexts, we dispatch the patch according
to the active context (we have not found such cases in
practice). Patch dispatching in the thread context is more
complex. In the following we give more details about it.
The kernel is a concurrent execution environment, es-
pecially with multi-core CPUs, which most Android de-
vices have. A patch accordingly can be executed simulta-
neous by multiple threads on different CPU cores. These
invocations are grouped by their thread ID and patch ID.
Speciﬁcally, for each distinct combination of thread ID
and patch ID, a separate name space is created. Each
Lua variable is saved to its associated name space. A
name space is not destroyed until the associated thread
ends. Therefore, variables of the previous invocations re-
main available to the subsequent invocations in the same
name space 4. By keeping the states across invocations,
KARMA can support multi-invocation patches, i.e., com-
plex patches that need to combine the results of several
4If the vulnerable function is recursively called, some variable states
might be lost. To retain the whole history, we can tag variables with the
thread ID, patch ID, and the stack top. However, we have not found any
of such cases in practice.
USENIX Association
26th USENIX Security Symposium    1261
Instruction AInstruction BInstruction C...Exploit CheckInstruction AReturn StatusOriginal FunctionPatched FunctionLua EngineJump to TrampolineInstruction C...Save ContextInvoke PatchRestore ContextInstruction AInstruction BJump Back3.1 Evaluation of Applicability
We tested KARMA with all the critical kernel vulnera-
bilities from Android Security Bulletin and ones used to
root Android devices. There are 76 such vulnerabilities
in total in the last three years. Remarkably, KARMA
can ﬁx 71 of them (93.4%) with level-1 and level-2
patches; i.e., we can create an adaptable KARMA patch
for them. Table 6 in Appendix A gives a more complete
list of the results.
In the following, we describe how
KARMA can prevent some interesting kernel vulnerabil-
ities used in one-click rooting apps and recent malware
incidents [5,17,18,21]. Appendix A contains a couple of
more examples.
CVE-2013-6282 (VROOT): this was one of the most
popular vulnerabilities used in the wild to root An-
droid devices, publicly known as “VROOT”. It ex-
ists in the get/put_user macros. They both fail to
check that user-provided addresses are in the valid range.
The original patches add the necessary checks to these
macros and return -EFAULT if invalid addresses are de-
tected [12]. However, KARMA cannot patch these
two macros because they are expanded by the com-
piler and thus do not exist in the kernel binary.
In-
stead, KARMA patches their expanded functions (i.e.,
__get_user_1/2/4 and __put_user_1/2/4/8) with
checks of whether user-provided addresses are less than
current_thread_info()->addr_limit-1. Note that
these patches can access the current thread_info struc-
ture by using the current_thread API provided by
KARMA. These patches simply return -EFAULT if the
address is out of the range.
CVE-2013-2595 (Framaroot): this vulnerability was
a part of the infamous Framaroot app (the “Gandalf” pay-
load). It exists in the camera driver for the Qualcomm
MSM devices [10]. The driver provides an uncontrolled
mmap interface, allowing the attacker to map sensitive
kernel memory into the user space. KARMA can patch
this vulnerability by validating whether the memory to be
mapped is within the user space.
CVE-2013-2596 (MotoChopper): an integer over-
ﬂow in the fb_mmap function allows a local user to cre-
ate a read-write mapping of the entire kernel memory and
consequently gain the kernel privileges. Speciﬁcally, the
function has a faulty conditional check:
if((vma->vm_end - vma->vm_start + off)>len)
return -EINVAL;
Because off is a user-controlled variable, an at-
tacker can pass in a really large number to overﬂow
(vma->vm_end - vma->vm_start + off) (the result
is interpreted as a negative number) and bypass the
validation. Here the original patch adds more checks
to prevent
To patch this vul-
nerability in KARMA, we hook the fb_mmap func-
this situation [11].
tion and extract the needed variables from its argu-
ment vma.
For example, we can calculate off as
(vma->vm_pgoff vm_end - vma->vm_start +
off) is negative or not, and return -EINVAL if so.
3.2 Evaluation of Adaptability
KARMA is an adaptive kernel live patching system for
Android.
Its ability to automatically adapt a reference
patch is the key to protect a wide variety of devices and
reduce the window of vulnerability. In this experiment,
we evaluate KARMA’s adaptability with 1,139 Android
kernels collected from Internet.
Semantic matching is the key to KARMA’s adaptabil-
ity. It uses symbolic execution to abstract away syntactic
differences in function binaries, such as register alloca-
tion, instruction selection, and data offset. To evaluate
its effectiveness, we cluster the collected 1,139 Android
kernels 5 by syntactic and semantic features for 13 pop-
ular vulnerabilities. Speciﬁcally, the opcode-based clus-