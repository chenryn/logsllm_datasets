require 'open-uri'
str = open("http://www.example.jp/").read
p str.encoding    #=> #
```
即使是编码为 ASCII-8BIT 的字符串，实际上也还是正常的字符串，只要知道字符编码，就可以使用 `force_encoding` 方法。这个方法并不会改变字符串的值（二进制数据），而只是改变编码信息。
```ruby
# encoding: utf-8
require 'open-uri'
str = open("http://www.example.jp/").read
str.force_encoding("Windows-31J")
p str.encoding    #=> #
```
这样一来，我们就可以把 ASCII-8BIT 的字符串当作 Windows-31J 字符串来处理了。
使用 `force_encoding` 方法时，即使指定了不正确的编码，也不会马上产生错误，而是在对该字符串进行操作的时候才会产生错误。检查编码是否正确，可以用 `valid_encoding?` 方法，不正确时则返回 `false`。
```ruby
str = "こんにちは"
str.force_encoding("US-ASCII")    #=> 不会产生错误
str.valid_encoding?               #=> false
str + "みなさん"                  #=> Encoding::CompatibilityError
```
# 正则表达式与编码
与字符串同样，正则表达式也有编码信息。
正则表达式的编码即其匹配字符串的编码。例如，用 EUC-JP 的正则表达式对象去匹配 UTF-8 字符串时就会产生错误，反之亦然。
```ruby
# encoding: EUC-JP
a = "\u3042\u3044"
p /あ/ =~ a    #=> incompatible encoding regexp match
               #=> (EUC-JP regexp with UTF-8 string)
               #=> (Encoding::CompatibilityError)
```
通常情况下，正则表达式字面量的编码与代码的编码是一样的。指定其他编码的时候，可使用 `Regexp` 类的 `new` 方法。在这个方法中，表示模式第 1 个参数的字符串编码，就是该正则表达式的编码。
```ruby
str = "模式".encode("EUC-JP")
re = Regexp.new(str)
p re.encoding    # => #
```
# IO 类与编码
使用 `IO` 类进行输入 / 输出操作时编码也非常重要。接下来，我们就向大家介绍一下 `IO` 与编码的相关内容。
**外部编码与内部编码**
每个 `IO` 对象都包含有外部编码与内部编码两种编码信息。外部编码指的是作为输入 / 输出对象的文件、控制台等的编码，内部编码指的是 Ruby 脚本中的编码。`IO` 对象的编码的相关方法如表所示。
方法名	                | 意义
- | -
IO#external_encoding	| 返回 IO 的外部编码
IO#internal_encoding	| 返回 IO 的内部编码
IO#set_encoding	        | 设定 IO 的编码
没有明确指定编码时，`IO` 对象的外部编码与内部编码各自使用其默认值 `Encoding.default_external`、`Encoding.default_internal`。默认情况下，外部编码会基于各个系统的本地信息设定，内部编码不设定。Windows 环境下的编码信息如下所示。
```ruby
p Encoding.default_external    #=> #
p Encoding.default_internal    #=> nil
File.open("foo.txt") do |f|
  p f.external_encoding        #=> #
  p f.internal_encoding        #=> nil
end
```
**编码的设定**
在刚才的例子中我们打开了文本文件（foo.txt），但 `IO` 对象（File 对象）的编码与文件的实际内容其实是没关系的。因为编码原本就只是用来说明如何处理字符的信息，因此对文本文件以外的文件并没有多大作用。
`IO.seek` 方法与 `IO.read（size）`方法，都不受编码影响，对任何数据都可以进行读写操作。`IO.read（size）`方法读取的字符串的编码为表示二进制数据的 ASCII-8BIT。
设定 `IO` 对象的编码信息，可以通过使用 `IO.set_encoding` 方法，或者在 `File.open` 方法的参数中指定编码来进行。
- `io.set_encoding(encoding)`
    `IO.set_encoding` 方法以 " 外部编码名 : 内部编码名 " 的形式指定字符串 `encoding`。把外部编码设置为 Shift_JIS，内部编码设置为 UTF-8 的时候，可以像下面那样设定。
    ```ruby
    $stdin.set_encoding("Shift_JIS:UTF-8")
    p $stdin.external_encoding    #=> #
    p $stdin.internal_encoding    #=> #
    ```
- `File.open(file, "mode:encoding")`
    为了在打开文件 file 时通过 `File.open` 方法指定编码 `encoding`，可以在第二个参数中指定 mode 的后面用冒号（:）分割，并按顺序指定外部编码以及内部编码（内部编码可省略）。
    ```ruby
    # 指定外部编码为UTF-8
    File.open("foo.txt", "w:UTF-8")
    # 指定外部编码为Shift_JIS
    # 指定内部编码为UTF-8
    File.open("foo.txt", "r:Shift_JIS:UTF-8")
    ```
**编码的作用**
- 输出时编码的作用
    外部编码影响 `IO` 的写入（输出）。在输出的时候，会基于每个字符串的原有编码和 `IO` 对象的外部编码进行编码的转换（因此输出用的 `IO` 对象不需要指定内部编码）。
    如果没有设置外部编码，或者字符串的编码与外部编码一致，则不会进行编码的转换。在需要进行转换的时候，如果输出的字符串的编码不正确（比如实际上是日语字符串，但编码却是中文），或者是无法互相转换的编码组合（例如用于日语与中文的编码），这时程序就会抛出异常。
- 输入时编码的作用
    `IO` 的读取（输入）会稍微复杂一点。首先，如果外部编码没有设置，则会使用 `Encoding.default_external` 的值作为外部编码。
    设定了外部编码，但内部编码没设定的时候，则会将读取的字符串的编码设置为 `IO` 对象的外部编码。这种情况下并不会进行编码的转换，而是将文件、控制台输入的数据原封不动地保存为 `String` 对象。
    最后，外部编码和内部编码都设定的时候，则会执行由外部编码转换为内部编码的处理。输入与输出的情况一样，在编码转换的过程中如果数据格式或者编码组合不正确，程序都会抛出异常。
    大家或许会感觉有点复杂，其实只要使用的环境与实际使用的数据的编码一致，我们就不需要考虑编码的转换。另外一方面，如果执行环境与数据的编码不一致，那么我们就需要在程序里有意识地处理编码问题。
**UTF8-MAC 编码**
在 Mac OS X 中，文件名中如果使用了浊点或者半浊点字符，有时候就会产生一些奇怪的现象。
例如，创建文件 `ルビー.txt` 并执行下面的程序，可以发现，预计执行结果应该为 `found.`，但实际结果却是 `not found.`。
```ruby
# encoding: utf-8
Dir.glob("*.txt") do |filename|
  if filename == "ルビー.txt"
    puts "found."; exit
  end
end
puts "not found."
```
执行示例
```
> touch ルビー.txt
> ruby utf8mac.rb
not found.
```
另一方面，执行以下脚本，这次会输出 `found.`。
```ruby
# encoding: utf-8
Dir.glob("*.txt") do |filename|
  if filename.encode("UTF8-MAC") == "ルビー.txt".encode("UTF8-MAC")
    puts "found."; exit
  end
end
puts "not found."
```
执行示例
```
> touch ルビー.txt
> ruby utf8mac_fix.rb
found.
```
这是由于 Mac OS X 中的文件系统使用的编码不是 UTF-8，而是一种名为 UTF8-MAC（或者叫 UTF-8-MAC）的编码的缘故。
那么，UTF8-MAC 是什么样的编码呢。我们通过下面的例子来看一下。
```ruby
# encoding: utf-8
str = "ビ"
puts "size: #{str.size}"
p str.each_byte.map{|b| b.to_s(16)}
puts "size: #{str.encode("UTF8-MAC").size}"
p str.encode("UTF8-MAC").each_byte.map{|b| b.to_s(16)}
```
执行示例
```
> ruby utf8mac_str.rb
size: 1
["e3", "83", "93"]
size: 2
["e3", "83", "92", "e3", "82", "99"]
```
本例表示的是在 UTF-8 和 UTF8-MAC 这两种编码方式的情况下，分别以 16 进制的形式输出字符串 " ビ " 的长度以及各个字节的值。从结果中我们可以看出，UTF-8 时的值为“`ec,83,93`”，UTF8-MAC 时则是“`e3,83,92,e3,82,99`”。而转换为 UTF8-MAC 后，字符串的长度也变为了两个字符。
在 UTF8-MAC 中，字符ビ（Unicode 中为 U+30D3）会分解为字符匕（U+30D2）与浊点字符（U+3099）两个字符。用 UTF-8 表示则为 `8392E3` 与 `8299E3` 两个字节串，因此就得到了之前的结果。
像这样，如果把 Mac OS X 的文件系统当作是普通的 UTF-8 看待，往往就会有意料之外的事情发生。在操作日语文件、目录时务必注意这个问题 。