#BHUSA @BlackHatEvents

### Stalloris: RPKI Downgrade Attack
**Presenters:**
- Tomas Hlavacek
- Philipp Jeitner
- Donika Mirdita
- Haya Shulman
- Michael Waidner

**Information Classification: General**

### Team
- **Tomas Hlavacek**
- **Donika Mirdita**
- **Haya Shulman**
- **Michael Waidner**
- **Philipp Jeitner** (Network Security Researcher, recently completed PhD)

**Cybersecurity Analytics and Defenses Department:**
- Network Security
- Routing and DNS Security

### Outline
1. BGP & BGP Security
2. Resource Public Key Infrastructure (RPKI)
3. Downgrade attack against RPKI
4. Feasibility
5. Mitigations

### BGP
- **Routing system of the Internet:**
  - Networks (Autonomous Systems, ASes) announce the IP prefixes they own.
  - Neighbors forward these announcements.
  - Everyone knows where to send traffic.

  **Example:**
  - AS 64511 and AS 64496 both announce `198.51.100.0/23`.
  - Traffic is routed accordingly.

### BGP Hijacks
- **No built-in security:**
  - An attacker can announce a prefix they do not own, becoming a Man-in-the-Middle (MitM), and profit from it.

  **Example:**
  - AS 666 announces `198.51.100.0/24`, which is actually owned by AS 64496.
  - Traffic intended for AS 64496 is now directed to AS 666.

### RPKI
- **Systematic approach to BGP Security:**
  - Certificates: Address block -> ASN (Route Origin Authorization, ROA).
  - Root of Trust: Regional Internet Registries (RIRs).
  - Similar to obtaining a TLS certificate from a registry.

  **Example ROA:**
  ```json
  {
    "asn": "AS64496",
    "prefix": "198.51.100.0/24",
    "maxLength": 24,
    "ta": "RIPE"
  }
  ```

### Route Origin Validation
- **Current adoption:**
  - Only 34.2% of networks have ROAs.
- **Validation process:**
  - Third-party systems check ROAs.
  - Example: If AS 666 announces `198.51.100.0/24`, but the ROA states AS 64496 owns it, the announcement is invalid.

### RPKI Works!
- RPKI effectively prevents unauthorized prefix announcements.

### Attacking RPKI
- **Integrity:**
  - Creating a malicious ROA is difficult due to strong cryptography.
  - Fooling CAs (run by RIRs) is also challenging.
- **Availability:**
  - RPKI is a third-party system to BGP.
  - What if RPKI stops working?

### Making RPKI Stop Working
- **Relying Parties (RPs) need to download ROAs from Publication Points (PPs):**
  - If downloads fail, RPs assume RPKI is not deployed.
  - **Plan:**
    - Break communication with PPs.
    - RPs cannot fetch information.
    - RPKI is effectively turned off.
    - Start BGP hijack.

### RP Cache and Manifests
- **Caching:**
  - RPs cache old data until expiry (ROAs expire in 1 year).
- **Manifests:**
  - Signed index to prevent replay attacks.
  - ROAs not listed in manifest are removed.
  - Short expiry time (1 day, effectively 6 hours).

### Breaking Communication
- **Low-rate attack:**
  - Exploit rate-limiting on PPs/Name Servers.
  - Send spoofed requests.
  - Victim gets blocked.
  - After 6 hours, ROAs are removed from cache due to expired manifest.

  **Diagram:**
  - Attacker sends spoofed TCP SYNs and DNS queries to the Name Server and Publication Point.
  - The victim (Relying Party) is blocked.

### Rate-Limiting in RPKI
- **Testing:**
  - DNS Response Rate Limiting (RRL) & TCP SYN rate-limiting.
  - Typically implemented to prevent DoS.
- **Results:**
  - 47% of PPs have rate-limits (< 10,000 pkt/s).
  - Affects 60% of RPKI-protected IPv4 space.
  - 3% of IPv4 are protected by PPs with very low rate-limits (< 60 pkt/s).

### Feasibility
- **Attack on 60% of IPv4:**
  - Example: Rate-limit is 1,000 pkt/s, attacker sends 10,000 pkt/s.
  - Connection success is ~10%, but RPs will retry.
- **Simulation:**
  - Feasible for low rate-limits (< 60 pkt/s), higher ones are challenging due to retries within 6 hours.

### We Have to Try Harder
- **RPKI allows delegation:**
  - Local Internet Registries (LIRs) can run their own PPs.
  - Attackers can run their own PPs.
  - RPs must contact these PPs.
- **Exploitation:**
  - Can we exploit this to break the RP?

### Stalloris
- **Attacker becomes a malicious PP:**
  - Sends responses as slowly as possible.
  - Hinders RPs from doing many retries.
- **Simulation:**
  - Makes the attack feasible for high rate-limits and less-favorable scenarios.
  - Becoming a PP helps time the attack with spoofed queries.

### Wrapping Up
- **Third-party system vulnerabilities:**
  - Allow attacks on availability.
  - Rate-limiting can be exploited to block legitimate requests.
  - Short manifest validity makes attacks feasible.
  - Attackers can become PPs and prevent RPs from functioning.

### Recommendations
- **Publication Points:**
  - Avoid low rate limits (e.g., 60 pkt/s/IP is easy to spoof).
  - Longer manifest validities (e.g., 1 week).
  - Randomize manifest re-generation times.
  - Implement more robust deployment and redundancy.
- **Relying Parties:**
  - Monitor connection failures.
  - Limit processing time per PP and limit tree size under one PP.

### Thank You!
**Stalloris: RPKI Downgrade Attack**
- **Presenters:**
  - Tomas Hlavacek
  - Philipp Jeitner
  - Donika Mirdita
  - Haya Shulman
  - Michael Waidner
- **Contact:**
  - Philipp Jeitner
  - Email: [Your Email Address]