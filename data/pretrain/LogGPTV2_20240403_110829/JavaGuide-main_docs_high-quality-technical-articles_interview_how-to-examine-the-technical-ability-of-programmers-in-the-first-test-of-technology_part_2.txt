**学习或工作中遇到的**
有时，在学习和工作中遇到的问题，也可以作为面试题。
比如，最近在学习《操作系统导论》并发部分，有一章节是如何使数据结构成为线程安全的。这里就有一些可以提问的地方：如何实现一个锁？如何实现一个线程安全的计数器？如何实现一个线程安全的链表？如何实现一个线程安全的 Map ？如何提升并发的性能？
工作中遇到的问题，也可以抽象提炼出来，作为技术基础面试题。
**技术栈适配度发问**
如果候选人（简历上所写的）使用的某些技术与本公司的技术栈比较契合，则可以针对这些技术点进行深入提问，考察候选人在这些技术点的掌握程度。如果掌握程度比较好，则技术适配度相对更高一些。
当然，这一点并不能作为筛掉那些没有使用该技术栈的候选人的依据。比如本公司使用 MongoDB 和 MySQL， 而一个候选人没有用过 Mongodb， 但使用过 MySQL, Redis, ES, HBase 等多种存储系统，那么适配度并不比仅使用过 MySQL 和 Mongodb 的候选人逊色，因为他所涉及的技术广度更大，可以推断出他有足够能力掌握 Mongodb。
**应对背题式面试**
首先，背题式面试，说明候选人至少是有做准备的。当然，对于招聘的一方来说，更希望找到有能力而不是仅记忆了知识的候选人。
应对背题式面试，可以通过 “引导-横向发问-深入发问” 的方式，先对候选人关于某个知识点的深度和广度做一个了解，然后出一道实际应用题来考察他是否能灵活使用知识。
比如 Java 线程同步机制，可以出一道题：线程 A 执行了一段代码，然后创建了一个异步任务在线程 B 中执行，线程 A 需要等待线程 B 执行完成后才能继续执行，请问怎么实现？
”理论 + 应用题“的模式。敌知我之变，而不知我变之形。变之形，不计其数。
**实用不生僻**
考察工作中频繁用到的知识、技能和能力，不考察冷僻的知识。
比如我偏向考察数据结构与算法、并发、设计 这三类。因为这三类非常基础非常核心。
**综合串联式发问**
知识之间总是相互联系着的，不要单独考察一个知识点。
设计一个初始问题，比如说查找算法，然后从这个初始问题出发，串联起各个知识点。比如：
![](https://oss.javaguide.cn/github/javaguide/open-source-project/502996-20220211115505399-72788909.png)
在每一个技术点上，都可以应用以上发问技巧，导向不同的问题分支。同时考察面试者的深度、广度和应用能力。
**创造有个性的面试题库**
每个技术面试官都会有一个面试题库。持续积累面试题库，日常中突然想到的问题，就随手记录下来。
### 解决问题能力考察
仅仅只是技术基础还不够，通常最好结合实际业务，针对他项目里的业务，抽象出技术问题进行考察。
解决思路重在层层递进。这一点对于面试官的要求也比较高，兼具良好的倾听能力、技术深度和业务经验。首先要仔细倾听候选人的阐述，找到适当的技术切入点，然后进行发问。如果进不去，那就容易考察失败。
常见问题：
- 性能方面，qps, tps 多少？采用了什么优化措施，达成了什么效果？
- 如果有大数据量，如何处理？如何保证稳定性？
- 你觉得这个功能/模块/系统的关键点在哪里？有什么解决方案？
- 为什么使用 XXX 而不是 YYY ？
- 长字段如何做索引？
- 还有哪些方案或思路？各自的利弊？
- 第三方对接，如何应对外部接口的不稳定性？
- 第三方对接，对接大量外部系统，代码可维护性？
- 资损场景？严重故障场景？
- 线上出现了 CPU 飙高，如何处理？ OOM 如何处理？ IO 读写尖刺，如何排查？
- 线上运行过程中，出现过哪些问题？如何解决的？
- 多个子系统之间的数据一致性问题？
- 如果需要新增一个 XXX 需求，如何扩展？
- 重来一遍，你觉得可以在哪些方面改进？
系统可问的关联问题：
- 绝大多数系统都有性能相关问题。如果没有性能问题，则说明是小系统，小系统就不值得考察了；
- 中大型系统通常有技术选型问题；
- 绝大多数系统都有改进空间；
- 大多数业务系统都涉及可扩展性问题和可维护性问题；
- 大多数重要业务系统都经历过比较惨重的线上教训；
- 大数据量系统必定有稳定性问题；
- 消费系统必定有时延和堆积问题；
- 第三方系统对接必定涉及可靠性问题；
- 分布式系统必定涉及可用性问题；
- 多个子系统协同必定涉及数据一致性问题；
- 交易系统有资损和故障场景；
**设计问题**
- 比如多个机器间共享大量业务对象，这些业务对象之间有些联合字段是重复的，如何去重？ 如果字段比较长，怎么处理？
- 如果瞬时有大量请求涌入，如何保证服务器的稳定性？
- 组件级别：设计一个本地缓存？ 设计一个分布式缓存？
- 模块级别：设计一个任务调度模块？需要考虑什么因素？
- 系统级别：设计一个内部系统，从各个部门获取销售数据然后统计出报表。复杂性体现在哪里？关键质量属性是哪些？模块划分，模块之间的关联关系？技术选型？
**项目经历**
项目经历考察不宜超过两个。因为要深入考察一个项目的详情，所占用的时间还是比较大的。
一般来说，会让候选人挑选一个他或她觉得最有收获的/最有挑战的/印象最深刻的/自己觉得特有意思/感受到挫折的项目。然后围绕这个项目进行发问。通常是从项目背景出发，考察项目的技术栈、项目模块及交互的整体理解、项目中遇到的有挑战性的技术问题及解决方案、排查和解决问题、代码可维护性问题、工程质量保障、重来一遍可以改进哪些等。
## 面试过程
### 预先准备
面试官也需要做一些准备。比如熟悉候选者的技能优势、工作经历等，做一个面试设计。
在面试将要开始时，做好面试准备。此外，面试官也需要对公司的一些基本情况有所了解，尤其是公司所使用技术栈、业务全景及方向、工作内容、晋升制度等，这一点技术型候选人问得比较多。
### 面试启动
一般以候选人自我介绍启动，不过候选人往往会谈得比较散，因此，我会直接提问：谈谈你有哪些优势以及自己觉得可以改进的地方？
然后以一个相对简单的基础题作为技术提问的开始：你熟悉哪些查找算法？大多数人是能答上顺序查找、二分查找、哈希查找的。
### 问题设计
提前阅读候选人简历，从简历中筛选出关键词，根据这些关键词进行有针对性地问题设计。
比如候选人简历里提到 MVVM ，可以问 MVVM 与 MVC 的区别； 提到了观察者模式，可以谈谈观察者模式，顺便问问他还熟悉哪些设计模式。