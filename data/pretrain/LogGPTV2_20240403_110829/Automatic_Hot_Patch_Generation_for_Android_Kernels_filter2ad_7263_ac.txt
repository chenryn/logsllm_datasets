such as memory allocation. However, if the function is killed
in the middle, it may not ﬁnish the proper clean up process,
such as freeing the allocated memory. This may introduce new
program ﬂaws and make the patched function unsafe. Instead,
if the hot patch is applied at line 1 and kills the function,
then the instructions with side eﬀects will not be executed.
Therefore, patching at line 1 is relatively safer than patching
at line 7. Vulmet is designed to select the best point among
the candidates.
We deﬁne this problem as an insertion location optimiza-
tion problem. The goal is to ﬁnd an insertion point, which
has adequate information to calculate the semantic equivalent
constraints and has the least side eﬀects on the program. The
reason for choosing the point which incurs least side eﬀects is
that patching at this point will have the most similar semantics
to the original patches. It is inevitable that, in some cases, the
side eﬀects will result in the function working diﬀerently than
the original target function. In this case, Vulmet chooses to
sacriﬁce the normal functionalities to make sure the patch can
block the vulnerabilities since the ﬁrst priority is to protect
the system. Therefore, by choosing the point with least side
eﬀects, Vulmet tries to patch the vulnerabilities while keeping
as many normal functionalities as possible.
4.3.2 Demonstration Example
The workﬂow of the algorithm is as the following.
First, all the possible insertion points are listed. (In the
running example of Fig. 3, the beginning of function
q6lsm_snd_model_buf_allo() and the call to function
cal_utils_get_only_cal_block().) Since the hot patch
works on the binary level, there may be inlined functions,
which have been merged into their caller functions. Those
inlined functions will not be considered as a proper insertion
point. The detailed method to handle the inlined function
will be given in Section 4.4.3. (After the compilation, the
functions at line 1 and line 7 are not inlined in the resulted
binary.)
Second, the algorithm will try to build two program paths.
The ﬁrst one (path I) starts from the function beginning and
ends at the patch insertion point. The second path (path II)
starts from the insertion point and ends the oﬃcial patch
location. To build the two paths, Vulmet will remove the
branches in the code and ﬂatten the loops by unrolling them
once. The resulted path is a sequential program slice. (In
Fig. 3, the paths for insertion point at line 1 is path I: 1-1 and
path II: 1-15 and the path for insert point at line 7 is path I:
1-7 and path II: 7-15.)
Third, to ensure, at the insertion point, there is enough in-
formation to build the semantic equivalent constraints, the
Table 6: Relationship between the Semantics Calculation and
the Weakest Precondition Reasoning
Semantics Calculation
Oﬃcial Patch Semantics
Precondition Reasoning
Postconditions
Instructions and Statements
↓
Predicate Transformers
↓
Hot Patch Constraints
Weakest Preconditions
algorithm will try to back-propagate the variables in the of-
ﬁcial patches through the path II. If all the variables can be
traced back through the path, the insertion point will contain
adequate information to build the hot patch. (As discussed in
Section 2.4, the two insertion points have enough informa-
tion.)
Fourth, the algorithm will check whether there is any side
eﬀect introduced if the patch is applied. If the patch insertion
point is at the beginning of the vulnerable function, there will
be no side eﬀect generated. Otherwise, Vulmet will examine
the path I to obtain the statement which can lead to side
eﬀects. The side eﬀects include the change of the global
variables, the assignment of pointers, the allocation of a piece
of memory without freeing it, as well as any of the calling to
the system functions. The algorithm will choose the insertion
point, whose path to the oﬃcial patch has least side eﬀects.
(Since line 1 of the function in Fig. 3 is the beginning of the
vulnerable function, patching at it has no side eﬀects on the
function. Line 1 will be selected as the optimal patch insertion
point.)
4.4 Weakest Precondition Reasoning
After selecting the patch insertion point, the next step is to
produce the hot patch at that point by calculating the seman-
tic equivalence of the oﬃcial patch. In Vulmet, this process
is reformed into a weakest precondition reasoning task. In
programming, a precondition is a statement that should be
true before the function is called. While, a postcondition is a
statement that will be true if the function ﬁnishes and all the
preconditions are met. Table 6 demonstrates the relationship
between the semantics calculation and the weakest precondi-
tion reasoning. Given an oﬃcial patch, its semantics can be
converted into one or more postconditions. The statements
in the vulnerable functions will deﬁne the transformers in
solving the weakest precondition. The process of getting the
hot patch constraints is equivalent as calculating the weak-
est preconditions. The resulted weakest preconditions are the
semantic equivalent hot patch of the oﬃcial patch.
4.4.1 Determined Statement Transformation
To solve the weakest precondition problem, Vulmet takes
an input postcondition P and a statement s in the original
USENIX Association
29th USENIX Security Symposium    2403
vulnerable function. It solves the condition via the calcula-
tion of the predicate transformers [17]. Then, it outputs the
weakest precondition of s with respect to P, which is denoted
by wp(s, P). The rules of the calculations for the determined
statement transformation are listed:
wp(skip, P) ⇔ P
wp(x := e, P) ⇔ P[x (cid:55)−→ e]
wp(s1 : s2, P) ⇔ wp(s1,wp(s2, P))
wp(if b then s1 else s2 end, P) ⇔
(b∧ wp(s1, P))∨ (¬b∧ (s2, P))
(1)
(2)
(3)
(4)
Rule 1: When the statement has no eﬀects on the post-
condition P, the statement is skipped. The precondition is
the same as the postcondition. Rule 2: When there is an
assignment statement, the corresponding variable x inside the
postcondition is transformed into e. The resulted precondition
will be expressed in term of e. Rule 3: If the statements are
sequential, the weakest precondition is calculated backward.
The precondition of the second statement will be the post-
condition for the ﬁrst statement. Rule 4: If there is a branch
statement, the precondition will be depending on the branch
conditions. The branch conditions will be aggregated as part
of the precondition.
The four rules will specify the determined statement trans-
formation to get the weakest precondition. All the values in
the transformation will be calculated precisely. Therefore, this
process guarantees the equivalence between the post- and pre-
conditions so that the generated hot patch will be semantically
equal to the oﬃcial patch.
4.4.2 Demonstration Example
The basic workﬂow of weakest precondition reasoning is
demonstrated with a real-world example. For the simplic-
ity, the demo is shown with C language, whereas the actual
reasoning is based on LLVM. Fig 5 has shown the oﬃcial
patch for CVE-2014-9873 [5]. The oﬃcial patch tries to add
a sanity check for variable write_len at line 11 and 12. To
generate the hot patch, the patch semantic will be converted
into a weakest precondition reasoning problem.
The postcondition P is write_len =0
(1)
(2)
(3)
Table 7: Variable Reasoning
Precondition
*(buf + 2) - cmd_code_len >= 0 (1)
2)
-
>=
==
cmd_code_len
recv_pkt_cmd_code
*(buf + 2) - 4 >= 0 and recv_pkt_cmd_code !=
DCI_PKT_RSP_CODE
*(buf +
0
and
DCI_PKT_RSP_CODE (2)
*(buf + 2) - 4 >= 0 and *(buf + 4) !=
DCI_PKT_RSP_CODE
buf + 2 - cmd_code_len >= 0 and *(buf + 4)
== DCI_PKT_RSP_CODE (3)
*(buf + 2) - 4 >= 0 and *(buf + 4) !=
DCI_PKT_RSP_CODE
*(buf + 2) - 1 >= 0 and *(buf + 4) ==
DCI_PKT_RSP_CODE (4)
of variable recv_pkt_cmd_code is changed into the value
of buf. Line 4 to 6 only contain the assignment statements
with constant values at the right-hand side. There, the post-
condition will be transformed into precondition by replacing
the variable values with their corresponding constants.
Table 7 has summarized the steps of the transformation
from postcondition to the precondition. The original seman-
tics will be changed into the precondition by the transformer
rules. The ﬁnal precondition Equation (4) in Table 7 will
be the hot patch semantics.
4.4.3 Function Calls
For the non-determined statements, such as function calls and
loops, Vulmet uses algorithms to summarize the semantics.
The detail explanation for handling the function calls and the
loops will be given in the following sections.
Handling function call is a major task in program analysis.
In this work, by Operation Rule 1 in Sec. 2.3, a function
call can be regarded as a hooking point, whose input param-
eters and return value can be obtained. Therefore, Vulmet
will use function calls to extract variable values for the hot
2404    29th USENIX Security Symposium
USENIX Association
1voidextract_dci_pkt_rsp(structdiag_smd_info2*smd_info,unsignedchar*buf)3{4intcmd_code_len=1;5intwrite_len=NULL;6uint8_trecv_pkt_cmd_code=0;7recv_pkt_cmd_code=*(uint8_t*)(buf+4);8if(recv_pkt_cmd_code!=DCI_PKT_RSP_CODE)9cmd_code_len=4;10write_len=(int)(*(uint16_t*)(buf+2))-cmd_code_len;11+if(write_len<=0)12+return;13...14}patch generation. However, there are some cases where the
functions are not suitable to be used as the hooking points.
Therefore, Vulmet need to handle those cases to generate
accurate patches.
Inlined function The ﬁrst case is where the function is in-
lined during the compilation process. The inlining process
will merge the binary instructions of the function into its
caller’s instructions. The start of the inlined function will be
in the middle of another function. Therefore, it is diﬃcult
to ﬁnd a precise location to hook those functions. Vulmet
handle the inlined function in a diﬀerent way.
Before the function analysis start, Vulmet will perform a
check to ﬁgure out the inlined function in the target program.
Then, it will import the contents of the inlined functions into
their caller functions. The framework will treat the inlined
function as a part of the target function’s code when analyzing
it. In general, the inlined function has two attributes. First, it
only contains a small piece of code to perform simple tasks.
Second, it hardly ever calls other functions. The two attributes
make the function easy to be inlined. Also, they allow Vulmet
to import the code to do the analysis.
Value modiﬁcation function There are function calls in the
middle of the original function. The callee function may mod-
ify the values, which are used in the calculation of the weak-
est precondition. In order to have an accurate result, Vulmet
needs to analyze the callee functions to understand how the
values are changed inside them. After that, Vulmet can use
the modiﬁcation as the determined statement transformation
to calculate the precondition. Vulmet uses SVF [49,50], a tool
that provides inter-function analysis to determine whether a
particular variable has been changed inside the function. Vul-
met will skip all the irrelevant functions without any value
changes. Next, for the functions with value changes, Vulmet
will go inside the callee function and calculate the changes
made by the function. The changed semantics are summarized
and used to represent the functions. After that, Vulmet will
start to perform the weakest precondition reasoning to get the
hot patches.
Algorithm 1 describes the workﬂow for the function han-
dling process. The functions in the algorithm refer to the
callee functions inside the target vulnerable function. First,
all the functions on the analysis path will be input into the
algorithm. Next, Vulmet will try to look up the function label
in binary to check whether it has been inlined. If it is inline,
Vulmet will import the function into its caller for analysis.
If the function is not inlined, it will continue to determine
whether the point is the ideal insertion point. If the point is
selected as the insertion point, it will extract the function input
variable information and continue to weakest precondition
solving. If the function is not the insertion point, it will check
whether the function modiﬁes the variable with the help of
SVF. If the function modiﬁes the relevant variable, Vulmet
needs to go deep into the function and performs further anal-
ysis to summarize the changes. If the function modiﬁes an
Lookup f in binary
if f ’s name is found (not inlined) then
Check f for insertion point
if f is insertion point candidate then
Add f to insertion point analysis process
else
Algorithm 1 Function Handling
1: function handle_func(func f )
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end function
end if
end if
else
end if
Check whether f modiﬁes relevant variables
if f modiﬁes relevant variables then
Analyze the code in f
else if f dose not modify then
Skip f and return
else if f is too complex then
Skip f with red ﬂag
Import the source code of the inlined function f
irrelevant variable or does not modify any variable, Vulmet
will skip it. If the callee function calls another function, which