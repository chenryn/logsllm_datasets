    因为pics.example.com被看作URL的目录部分，所以以下请求也会重定向到127.0.0.1：
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://127.0.0.1/pics.example.com
    You can test whether a site is using an overly flexible regex allowlist by trying URLs like these and seeing if the filter allows it. Note that a regex-based allowlist can be secure if the regex is well constructed. And these URLs won’t always succeed!
    如果尝试这些URL并且过滤器允许，请验证该站点是否使用过度灵活的正则表达式白名单。请注意，如果正则表达式良好构造，则基于正则表达式的白名单可以安全使用。但这些URL并非总是能够成功！
    Bypass Blocklists
    Since applications often need to fetch resources from a variety of internet sources, most SSRF protection mechanisms come in the form of a blocklist. If you’re faced with a blocklist, there are many ways of tricking the server.
    由于应用程序经常需要从各种互联网来源获取资源，大多数SSRF保护机制以屏蔽列表的形式出现。如果您面临屏蔽列表，有许多欺骗服务器的方法。
    Fooling It with Redirects
    First, you can make the server request a URL that you control and that redirects to the blocklisted address. For example, you can ask the target server to send a request to your server:
    首先，您可以让服务器请求您控制并重定向到已加入阻止列表的地址的URL。例如，您可以要求目标服务器向您的服务器发送请求：
https://public.example.com/proxy?url=https://attacker.com/ssrf
    Then, on your server at
     https://attacker.com/ssrf
    , you can host a file with the following content:
    那么，在您的服务器上的 https://attacker.com/ssrf，您可以托管一个具有以下内容的文件：
    This is a piece of PHP code that redirects the request by setting the document’s location to 127.0.0.1. When you make the target server request
     https://attacker.com/ssrf,
    the target server is redirected to
     http://127.0.0.1
    , a restricted internal address. This attack will bypass blocklists because the URL submitted to the application does not itself contain any blocklisted addresses.
    这是一段PHP代码，通过将文档位置设置为127.0.0.1来重定向请求。当您发起指向目标服务器的请求https://attacker.com/ssrf时，目标服务器将被重定向到http://127.0.0.1，这是一种受限的内部地址。这种攻击将绕过阻止列表，因为提交给应用程序的URL本身不包含任何被阻止的地址。
    Using IPv6 Addresses
    I mentioned in
     Chapter 3
    that IPv6 addresses are a newer alternative to the more commonly used IPv4 addresses. The Internet Engineering Task Force (IETF) created IPv6 addresses as the world began running out of available IPv4 addresses and needed a format that provided a larger number of possible addresses. IPv6 addresses are 128-bit values represented in hexadecimal notation, and they look like this: 64:ff9b::255.255.255.255.
    我在第三章中提到，IPv6地址是更常用的IPv4地址的一种新型替代品。当世界开始用尽可用的IPv4地址并需要一个提供更多可能地址的格式时，互联网工程任务组(IETF)创建了IPv6地址。IPv6地址是用十六进制表示的128位值，长这个样子：64:ff9b::255.255.255.255。
    Sometimes the SSRF protection mechanisms a site has implemented for IPv4 might not have been implemented for IPv6. That means you can try to submit IPv6 addresses that point to the local network. For example, the IPv6 address
     ::1
    points to the localhost, and
     fc00::
    is the first address on the private network.
    有时，网站为IPv4实施的SSRF保护机制可能并未针对IPv6实施。这意味着您可以尝试提交指向本地网络的IPv6地址。例如，IPv6地址::1指向本地主机，fc00::是私有网络上的第一个地址。
    For more information about how IPv6 works, and about other reserved IPv6 addresses, visit Wikipedia:
     https://en.wikipedia.org/wiki/IPv6_address
    .
    获取有关IPv6如何工作以及其他保留IPv6地址的更多信息，请访问维基百科：https://en.wikipedia.org/wiki/IPv6_address。
    Tricking the Server with DNS
    You can also try confusing the server with DNS records, which computers use to translate hostnames into IP addresses. DNS records come in various types, but the ones you’ll hear about most often are A and AAAA records.
     A records
    point a hostname to an IPv4 address, whereas
     AAAA records
    translate hostnames to an IPv6 address.
    你也可以尝试使用 DNS 记录混淆服务器，计算机将使用它来将主机名转换为 IP 地址。DNS 记录有多种类型，但你最常听到的是 A 记录和 AAAA 记录。A 记录将主机名指向 IPv4 地址，而 AAAA 记录将主机名转换为 IPv6 地址。
    Modify the A/AAAA record of a domain you control and make it point to the internal addresses on the victim’s network. You can check the current A/AAAA records of your domain by running these commands:
    修改你控制的域名的A/AAAA记录并将其指向受害者网络上的内部地址。您可以通过运行以下命令来检查您域的当前A/AAAA记录：
nslookup DOMAIN
nslookup DOMAIN -type=AAAA
    You can usually configure the DNS records of your domain name by using your domain registrar or web-hosting service’s settings page. For instance, I use Namecheap as my domain service. In Namecheap, you can configure your DNS records by going to your account and choosing Domain List
     ▶
    Manage Domain
     ▶
    Advanced DNS
     ▶
    Add New Record. Create a custom mapping of hostname to IP address and make your domain resolve to 127.0.0.1. You can do this by creating a new A record for your domain that points to 127.0.0.1.
    通常，您可以通过使用您的域名注册服务商或网站托管服务的设置页面来配置您的域名的DNS记录。例如，我使用Namecheap作为我的域名服务。在Namecheap中，您可以通过进入您的帐户并选择域名列表▶管理域名▶高级DNS▶添加新记录来配置您的DNS记录。创建一个自定义的主机名到IP地址的映射，让您的域名解析到127.0.0.1。您可以通过为您的域名创建一个指向127.0.0.1的新A记录来实现这一点。
    Then you can ask the target server to send a request to your server, like:
    然后你可以让目标服务器向你的服务器发送一个请求，例如：
https://public.example.com/proxy?url=https://attacker.com
    Now when the target server requests your domain, it will think your domain is located at 127.0.0.1 and request data from that address.
    现在当目标服务器请求您的域名时，它会认为您的域名位于127.0.0.1，并从该地址请求数据。
    Switching Out the Encoding
    There are many ways of encoding a URL or an address. Character encodings are different ways of representing the same character while preserving its meaning. They are often used to make data transportation or storage more efficient. These encoding methods don’t change how a server interprets the location of the address, but they might allow the input to slip under the radar of a blocklist if it bans only addresses that are encoded a certain way.
    有许多方法可以编码URL或地址。字符编码是表示相同字符并保留其含义的不同方式。它们经常用于使数据传输或存储更有效。这些编码方法不会改变服务器解释地址位置的方式，但如果禁止某种编码方式的地址，它们可能允许输入逃过阻止列表的屏障。
    Possible encoding methods include hex encoding, octal encoding, dword encoding, URL encoding, and mixed encoding. If the URL parser of the target server does not process these encoding methods appropriately, you might be able to bypass SSRF protection. So far, the addresses provided as examples in this book have used
     decimal encoding
    , the base-10 format that uses characters ranging from 0 to 9. To translate a decimal-formatted IP address to hex, calculate each dot-delineated section of the IP address into its hex equivalent. You could use a decimal-to-hex calculator to do this, and then put together the entire address. For example, 127.0.0.1 in decimal translates to 0x7f.0x0.0x0.0x1 in hex. The 0x at the beginning of each section designates it as a hex number. You can then use the hex address in the potential SSRF endpoint:
    可能的编码方法包括十六进制编码、八进制编码、双字编码、URL编码和混合编码。如果目标服务器的URL解析器不能正确处理这些编码方法，则可能会绕过SSRF保护。迄今为止，本书中提供的实例地址使用了十进制编码，这是一种使用从0到9的字符的十进制格式。要将十进制格式的IP地址转换为十六进制格式，可将IP地址的每个点划分部分计算为其十六进制等效部分。您可以使用十进制与十六进制转换计算器来完成此操作，然后将整个地址组合在一起。例如，十进制中的127.0.0.1在十六进制中将转换为0x7f.0x0.0x0.0x1。每个部分前面的0x表示它是十六进制数。然后可以在潜在的SSRF终端中使用十六进制地址。
https://public.example.com/proxy?url=https://0x7f.0x0.0x0.0x1
     Octal encoding
    is a way of representing characters in a base-8 format by using characters ranging from 0 to 7. As with hex, you can translate an IP address to octal form by recalculating each section. You can utilize an online calculator for this too; just search for
     decimal to octal calculator
    to find one. For example, 127.0.0.1 translates to 0177.0.0.01. In this case, the leading zeros are necessary to convey that that section is an octal number. Then use it in the potential SSRF endpoint:
    八进制编码是一种使用从0到7范围的字符以八进制格式表示字符的方式。与十六进制一样，您可以通过重新计算每个部分将IP地址转换为八进制形式。您也可以使用在线计算器来完成这个过程；只需搜索“十进制到八进制计算器”来找到一个。例如，127.0.0.1转换为0177.0.0.01。在这种情况下，前导零是必要的，以传达该部分是八进制数字。然后将其用于潜在的SSRF端点。
https://public.example.com/proxy?url=https://0177.0.0.01
    The
     dword
    , or
     double word
    , encoding scheme represents an IP address as a single 32-bit integer (called a dword). To translate an address into a dword, split the address into four octets (groups of 8 bits), and write out its binary representation. For example, 127.0.0.1 is the decimal representation of 01111111.00000000.00000000.00000001. When we translate the entire number, 01111111000000000000000000000001, into one single decimal number, we get the IP address in dword format.
    双字(或双字节)编码方案表示一个IP地址为一个32位整数(称为双字)。要将地址转换为双字，请将地址分为四个八位组，并编写其二进制表示。例如，127.0.0.1是01111111.00000000.00000000.00000001的十进制表示。当我们将整个数字01111111000000000000000000000001转换为一个单独的十进制数字时，我们得到了以双字格式表示的IP地址。
    What is 127.0.0.1 in dword format? It’s the answer for 127 × 256
     3
    + 0 × 256
     2
    + 0 × 256
     1
    + 1 × 256
     0
    , which is 2130706433. You could use a binary-to-decimal calculator to calculate this. If you type
     https://2130706433
    instead of
     https://127.0.0.1
    in your browser, it would still be understood, and you could use it in the potential SSRF endpoint:
    127.0.0.1 在 dword 格式下是什么？答案是 127 × 2563 + 0 × 2562 + 0 × 2561 + 1 × 2560，即 2130706433。你可以使用二进制转十进制计算器来计算。如果在浏览器中输入 https://2130706433 而不是 https://127.0.0.1，它仍然可以被理解，并且可以在 SSRF 潜在终端点中使用。
https://public.example.com/proxy?url=https://2130706433
    When a server blocks requests to internal hostnames like https://localhost, try its URL-encoded equivalent:
    当服务器阻止对内部主机名（例如https://localhost）的请求时，请尝试使用其URL编码的等效形式。
https://public.example.com/proxy?url=https://%6c%6f%63%61%6c%68%6f%73%74
    Finally, you could use a combination of encoding techniques to try to fool the blocklist. For example, in the address 0177.0.0.0x1, the first section uses octal encoding, the next two use decimal encoding, and the last section uses hex encoding.
    最后，你可以使用编码技术的组合来尝试欺骗阻止列表。例如，在地址0177.0.0.0x1中，第一节使用八进制编码，接下来的两节使用十进制编码，最后一节使用十六进制编码。
    This is just a small portion of bypasses you can try. You can use many more creative ways to defeat protection and achieve SSRF. When you can’t find a bypass that works, switch your perspective by asking yourself, how would I implement a protection mechanism for this feature? Design what you think the protection logic would look like. Then try to bypass the mechanism you’ve designed. Is it possible? Did you miss anything when implementing the protection? Could the developer of the application have missed something too?
    这只是你可以尝试的一小部分绕过方法。你可以使用许多更有创意的方式来打败保护并实现SSRF。当你找不到有效的绕过方法时，试着换个角度思考，问问自己，我会如何为这个功能实现保护机制呢？ 设计出你认为的保护逻辑。然后试着绕过你所设计的机制。是否可能？在实施保护时，是否遗漏了什么？应用程序的开发人员也可能会遗漏一些东西吗？
    Escalating the Attack
    SSRFs can vary in impact, but they have a lot of potential if you know how to escalate them by chaining them with different bugs. Now that you have the basics of SSRFs down, let’s learn to exploit them most effectively.
    如果你知道如何将它们与不同的漏洞链接起来，SSRF可能会产生不同的影响，但它们有很大的潜力。现在你已经掌握了 SSRF 的基础知识，让我们学习如何最有效地利用它们。
    What you can achieve with an SSRF usually depends on the internal services found on the network. Depending on the situation, you could use SSRF to scan the network for reachable hosts, port-scan internal machines to fingerprint internal services, collect instance metadata, bypass access controls, leak confidential data, and even execute code on reachable machines.
    通过 SSRF ，您可以实现的通常取决于网络上发现的内部服务。根据情况，您可以使用 SSRF 扫描可访问主机的网络，对内部机器进行端口扫描以指纹内部服务，收集实例元数据，绕过访问控制，泄漏机密数据，甚至在可访问机器上执行代码。
    Perform Network Scanning
    You may sometimes want to scan the network for other reachable machines.
     Reachable machines
    are other network hosts that can be connected to via the current machine. These internal machines might host databases, internal websites, and otherwise sensitive functionalities that an attacker can exploit
    to their advantage. To perform the scan, feed the vulnerable endpoint a range of internal IP addresses and see if the server responds differently to each address. For example, when you request the address 10.0.0.1
    有时候，你可能想要扫描网络中其他可达的机器。可达机器指的是可以通过当前机器连接到的其他网络主机。这些内部机器可能托管数据库、内部网站和其他敏感功能，黑客可以利用它们来攻击。为了进行扫描，需要将一个范围的内部IP地址输入到易受攻击的终端，看看服务器是否对每个地址有不同的响应。例如，当你请求地址10.0.0.1时。
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://10.0.0.1
    the server may respond with this message:
    服务器可能会响应此消息：
Error: cannot upload image: http-server-header: Apache/2.2.8 (Ubuntu) DAV/2
    But when you request the address 10.0.0.2
    当你请求地址10.0.0.2时。
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://10.0.0.2
    the server may respond with this message:
    服务器可能会响应此消息：
Error: cannot upload image: Connection Failed
    You can deduce that 10.0.0.1 is the address of a valid host on the network, while 10.0.0.2 is not. Using the differences in server behavior, you can gather info about the network structure, like the number of reachable hosts and their IP addresses.
    您可以推断出10.0.0.1是网络上有效主机的地址，而10.0.0.2不是。利用服务器行为的差异，您可以收集有关网络结构的信息，例如可达主机的数量和它们的IP地址。
    You can also use SSRF to port-scan network machines and reveal services running on those machines. Open ports provide a good indicator of the services running on the machine, because services often run on certain ports by default. For example, by default, SSH runs on port 22, HTTP runs on port 80, and HTTPS runs on port 443. Port-scan results often point you to the ports that you should inspect manually, and they can help you plan further attacks tailored to the services found.
    您也可以使用SSRF来扫描网络设备的端口，并揭示这些设备上运行的服务。开放的端口可以很好地指示设备上运行的服务，因为服务通常默认运行在某些端口上。例如，SSH默认运行在22号端口上，HTTP运行在80号端口上，而HTTPS运行在443号端口上。端口扫描结果通常指向您应该手动检查的端口，并且它们可以帮助您计划更多针对发现的服务的攻击。
    Provide the vulnerable endpoint with different port numbers, and then determine if the server behavior differs between ports. It’s the same process as scanning for hosts, except this time, switch out port numbers rather than hosts. Port numbers range from 0 to 65,535.
    提供不安全的终端点不同的端口号，然后确定服务器在端口之间的行为是否有所不同。这与扫描主机的过程相同，只不过这一次需要更改端口号而不是主机。端口号范围从0到65,535。
    Let’s say you want to find out which ports are open on an internal machine. When you send a request to port 80 on an internal machine, the server responds with this message:
    假设您想找出内部计算机开放的端口。当您向内部计算机上的端口80发送请求时，服务器会以以下消息进行响应：
Error: cannot upload image: http-server-header: Apache/2.2.8 (Ubuntu) DAV/2
    And when you send a request to port 11 on the same machine, the machine responds with this message:
    当您向同一台机器的11号端口发送请求时，该机器将以此消息作出回应：
Error: cannot upload image: Connection Failed
    We can deduce that port 80 is open on the machine, while port 11 is not. You can also figure out from the response that the machine is running an Apache web server and the Ubuntu Linux distribution. You can use the software information revealed here to construct further attacks against the system.
    我们可以推断出在这台机器上，80端口是开放的，而11端口则不是。从响应可以推断出，这台机器运行的是Apache Web服务器和Ubuntu Linux发行版。您可以使用在此处揭示的软件信息，构建进一步的攻击来攻击该系统。
    Pull Instance Metadata
    Cloud computing services allow businesses to run their applications on other people’s servers. One such service, Amazon Elastic Compute Cloud (EC2), offers an instance metadata tool that enables EC2 instances to access data about themselves by querying the API endpoint at 169.254.169.254.
     Instances
    are virtual servers used for running applications on a cloud provider’s infrastructure. Google Cloud offers a similar instance metadata API service.
    云计算服务允许企业在其他人的服务器上运行其应用程序。 Amazon Elastic Compute Cloud（EC2）是这样一项服务，它提供了实例元数据工具，使EC2实例能够通过在API端点上查询169.254.169.254来访问有关自身的数据。实例是用于在云提供商基础架构上运行应用程序的虚拟服务器。谷歌云提供类似的实例元数据API服务。
    These API endpoints are accessible by default unless network admins specifically block or disable them. The information these services reveal is often extremely sensitive and could allow attackers to escalate SSRFs to serious information leaks and even RCE.
    这些API端点默认情况下是可访问的，除非网络管理员特别阻止或禁用它们。这些所提供的服务信息通常非常敏感，可能会让攻击者将SSRF升级成严重的信息泄漏、甚至RCE。
    Querying EC2 Metadata
    If a company hosts its infrastructure on Amazon EC2, try querying various instance metadata about the host using this endpoint. For example, this API request fetches all instance metadata from the running instance:
    如果公司将其基础设施托管在Amazon EC2上，请尝试使用此端点查询有关主机的各种实例元数据。例如，此API请求从正在运行的实例中提取所有实例元数据：
http://169.254.169.254/latest/meta-data/
    Use this URL in an endpoint vulnerable to SSRF:
    在易受SSRF攻击的终端点中使用该URL：
https://public.example.com/proxy?url=http://169.254.169.254/latest/meta-data/
    These endpoints reveal information such as API keys, Amazon S3 tokens (tokens used to access Amazon S3 buckets), and passwords. Try requesting these especially useful API endpoints:
    这些终端节点揭示了诸如API密钥、Amazon S3令牌（用于访问Amazon S3桶的令牌）和密码等信息。尝试请求这些特别有用的API终端节点：
      http://169.254.169.254/latest/meta-data/
     returns the list of available metadata that you can query.
      http://169.254.169.254/latest/meta-data/local-hostname/
     returns the internal hostname used by the host.
      http://169.254.169.254/latest/meta-data/iam/security-credentials/ROLE_NAME
     returns the security credentials of that role.
      http://169.254.169.254/latest/dynamic/instance-identity/document/
     reveals the private IP address of the current instance.
      http://169.254.169.254/latest/user-data/
     returns user data on the current instance.
    You can find the complete documentation for the API endpoint at
     https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html
    .
    你可以在https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html找到完整的API端点文档。
    Querying Google Cloud Metadata
    If the company uses Google Cloud, query the Google Instance Metadata API instead. Google implements additional security measures for its API endpoints, so querying Google Cloud Metadata APIv1 requires one of these special headers:
    如果公司使用Google Cloud，请查询Google Instance Metadata API。Google为其API端点实施了额外的安全措施，因此查询Google Cloud Metadata APIv1需要其中的特殊标头之一：
Metadata-Flavor: Google
X-Google-Metadata-Request: True
    These headers offer protection against SSRFs because most often during an SSRF, you cannot specify special headers for the forged request. But you can easily bypass this protection, because most endpoints accessible through APIv1 can be accessed via the API v1beta1 endpoints instead.
     API v1beta1
    is an older version of the metadata API that doesn’t have the same header requirements. Begin by targeting these critical endpoints:
    由于在SSRF期间，您通常无法为伪造的请求指定特殊标头，因此这些标头提供对抗SSRF的保护。但是，您可以轻松绕过此保护，因为大多数通过APIv1可访问的终端点可以通过API v1beta1终端点访问。 API v1beta1是元数据API的较旧版本，不具有相同的标头要求。首先针对这些关键终端点开始：
由于SSRF的影响，这些标头提供保护。但可以轻松规避此保护，因为可以通过API v1beta1接口访问API v1的大多数端点。 API v1beta1是元数据API的旧版，不具有相同的标头要求。从攻击这些关键端点开始：
      http://metadata.google.internal/computeMetadata/v1beta1/instance/service-accounts/default/token
     returns the access token of the default account on the instance.
      http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/ssh-keys
     returns SSH keys that can connect to other instances in this project.
    Read the full API documentation at
     https://cloud.google.com/compute/docs/storing-retrieving-metadata/