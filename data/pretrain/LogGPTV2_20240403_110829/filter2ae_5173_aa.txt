0x00 前言  
在之前的文章中，分别向大家介绍了Windows访问控制模型中的SID和Access Token，本篇文章中将为大家介绍最后一个概念——特权
Windows操作系统中许多操作都需要有对应的特权，特权也是一种非常隐蔽的留后门的方式。在AD域中，一些特权在Default Domain
Controller Policy组策略中被授予给一些特殊的组，这些组的成员虽然不是域管，但如果被攻ji者控制同样能给AD域带来巨大的风险
因此对防御者来讲，排查用户的特权配置也是重中之重，本文将对一些比较敏感的特权进行介绍，便于防御者更好的理解特权的概念以及进行排查
0x01 令牌中的Privilege  
特权是一个用户或组在本地计算机执行各种系统相关操作（关闭系统、装载设备驱动程序、改变系统时间）的权限，特权与访问权限的区别如下：
特权控制账户对系统资源和系统相关任务的访问，而访问权限控制对安全对象（可以具有安全描述符的对象）的访问  
系统管理员为用户或组指派特权，而系统根据对象的DACL中的ACE授予或拒绝对安全对象的访问，有时拥有特权可以忽略ACL的检查  
在之前介绍Access Token的文章中我们已经了解过了token的基本结构，其中有一部分表示了该用户及该用户所属组所拥有的特权，如下图所示：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全
通常我们会使用whoami /priv命令查看当前用户所拥有的特权，默认情况下大部分特权是禁用状态，在使用时需要启用
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_02
0x02 mimikatz的privilege模块  
mimikatz中的privilege模块主要有以下功能，下图中第一个红框中的部分是为当前进程启用一些指定的特权，第二个红框中的id和name分别支持指定特权的id和名称，并为当前进程启用id和名称对应的特权
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_03
通常我们比较通用的启用进程特权的方法是这样的，代码如下：
BOOL GetDebugPrivilege()  
{  
BOOL status = FALSE;  
HANDLE hToken;
    if (OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &hToken))
    {
        TOKEN_PRIVILEGES tokenPrivs;
        tokenPrivs.PrivilegeCount = 1;
        if (LookupPrivilegeValueW(NULL, SE_DEBUG_NAME, &tokenPrivs.Privileges[0].Luid))
        {
            tokenPrivs.Privileges[0].Attributes = TRUE ? SE_PRIVILEGE_ENABLED : 0;
            if (AdjustTokenPrivileges(hToken, FALSE, &tokenPrivs, sizeof(tokenPrivs), NULL, NULL))
            {
                status = TRUE;
            }
        }
        else wprintf(L"[!] LookupPrivilegeValueW error: %u when get debug privilege.\n", GetLastError());
        CloseHandle(hToken);
    }
    else wprintf(L"[!] OpenProcessToken error: %u when get debug privilege.\n", GetLastError());
    return status;
}  
1.  
2.  
3.  
4.  
5.  
6.  
7.  
8.  
9.  
10.  
11.  
12.  
13.  
14.  
15.  
16.  
17.  
18.  
19.  
20.  
21.  
22.  
23.  
24.  
25.  
而mimikatz是通过调用一个未文档化的APIRtlAdjustPrivilege()，该API的功能是对当前进程或线程启用/禁用指定的特权，共有四个参数：
ULONG Privilege：需要操作的特权的ID  
BOOLEAN Enable：启用或禁用的标志，1为启用，0为禁用  
BOOLEAN CurrentThread：指定是否为当前线程，1则设置线程令牌，0则设置进程令牌  
PBOOLEAN Enabled：该特权修改之前是禁用的还是启用的  
NTSTATUS RtlAdjustPrivilege  
(  
ULONG Privilege, // [In]  
BOOLEAN Enable, // [In]  
BOOLEAN CurrentThread, // [In]  
PBOOLEAN Enabled // [Out]  
)  
1.  
2.  
3.  
4.  
5.  
6.  
7.  
如果参数指定的是特权的名称，则会先调用LookupPrivilegeValue()拿到特权名称对应的特权ID，然后再调用RtlAdjustPrivilege()来启用特权
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_04
前面提到的是将禁用的特权启用，而如果想给一个账户赋予特权，则可以通过本地策略/组策略来设置，也可以通过LsaAddAccountRights()这个API，这里不再赘述
0x03 危险的特权  
这里主要介绍11个危险的特权，在检查域内安全时要格外注意
  1. SeDebugPrivilege  
通常情况下，用户只对属于自己的进程有调试的权限，但如果该用户Token中被赋予SeDebugPrivilege并启用时，该用户就拥有了调试其他用户进程的权限，此时就可以对一些高权限进程执行操作以获取对应的权限，以进程注入为例：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_05
  1. SeBackupPrivilege  
该特权代表需要执行备份操作的权限，授予当前用户对所有文件的读取权限，不受文件原本的ACL限制，主要有以下利用思路：
备份SAM数据库  
备份磁盘上高权限用户的敏感文件  
域内在域控上备份ntds.dit  
下图以导出注册表中的SAM和SYSTEM为例
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_06
观察上图可能有师傅会问：为什么前面显示SeBackupPrivilege是Disable状态，却能成功执行reg
save呢？一开始我猜测可能是reg.exe在执行操作前默认会启用一些特权，随后通过对reg.exe的逆向也印证了这点：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_07
在域环境中，Backup Operators和Server
Operators组成员允许在域控进行本地登录，并在域控上拥有SeBackupPrivilege特权，所以也可以对ntds.dit进行备份操作，再备份注册表中的SYSTEM和SECURITY，进而解密ntds.dit
需要注意的是在调用CreateFile()时，需要指定FILE_FLAG_BACKUP_SEMANTICS标志来表示正在为备份或恢复操作打开或创建文件，从而覆盖文件的ACL检查
HANDLE hFile = CreateFileW(  
L"C:\Windows\System32\1.txt",  
GENERIC_READ,  
0,  
NULL,  
OPEN_EXISTING,  
FILE_FLAG_BACKUP_SEMANTICS,  
NULL);  
1.  
2.  
3.  
4.  
5.  
6.  
7.  
8.
  1. SeRestorePrivilege  
该特权是执行还原操作所需的权限，拥有此特权的用户对所有文件拥有写权限，不受文件原本的ACL限制，主要利用思路如下：
修改注册表，实现修改服务、修改启动项等操作  
写文件进行DLL劫持  
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_08
域环境中，Backup Operators和Server
Operators组成员同样在域控上也有SeRestorePrivilege，因此也可以利用上述操作在域控上完成提权和维权等操作
需要注意的仍是调用API时，需要指定对应的标志，如CreateFile()需要指定FILE_FLAG_BACKUP_SEMANTICS，RegCreateKeyEx()需要指定REG_OPTION_BACKUP_RESTORE
  1. SeTakeOwnershipPrivilege  
该特权用来修改目标对象的所有权，也就是说拥有该特权的用户可以修改任意对象的所有者（Owner），而所有者对该对象是有WriteDACL的权限的，可以任意修改对象的ACL
所以如果拥有了SeTakeOwnershipPrivilege，就相当于对任意对象有读写的权限，利用方式和SeRestorePrivilege、SeBackupPrivilege基本相同
GetTakeOwnershipPriv();  
...  
status = SetNamedSecurityInfo(  
L"C:\Windows\System32\localspl.dll",  
SE_FILE_OBJECT,  
OWNER_SECURITY_INFORMATION,  
user->User.Sid,  
NULL,  
NULL,  
NULL);  
1.  
2.  
3.  
4.  
5.  
6.  
7.  
8.  
9.  
10.  
如下图所示，可以将对象的Owner从TrustedInstaller修改为当前用户：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_mimikatz_09
  1. SeImpersonatePrivilege  
当SeImpersonatePrivilege特权分配给用户时，表示允许该用户运行的程序模拟客户端，默认Service账户（如MSSQL、IIS的服务账户）和管理员账户会拥有该权限
该权限也是一些potato提权的重要条件，可以通过printbug+ImpersonateNamedPipeClient()等等许多方式获取到高权限令牌，进而执行模拟，此处以pipepotato为例：
【安全研究】从mimikatz学习Windows安全之访问控制模型（三）_Windows安全_10
  1. SeAssignPrimaryTokenPrivilege  