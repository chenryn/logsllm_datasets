 179      '{=}',  
 180      '{02:28:57}',  
 181      '{1}'),  
 182     ('timestampcol', 'timestamp',  
 183      '{=}',  
 184      '{1964-03-24 19:26:45}',  
 185      '{1}'),  
 186     ('timestamptzcol', 'timestamptz',  
 187      '{=}',  
 188      '{1972-10-19 09:00:00-07}',  
 189      '{1}'),  
 190     ('intervalcol', 'interval',  
 191      '{=}',  
 192      '{1 mons 13 days 12:24}',  
 193      '{1}'),  
 194     ('timetzcol', 'timetz',  
 195      '{=}',  
 196      '{01:35:50+02}',  
 197      '{2}'),  
 198     ('numericcol', 'numeric',  
 199      '{=}',  
 200      '{2268164.347826086956521739130434782609}',  
 201      '{1}'),  
 202     ('uuidcol', 'uuid',  
 203      '{=}',  
 204      '{52225222-5222-5222-5222-522252225222}',  
 205      '{1}'),  
 206     ('lsncol', 'pg_lsn',  
 207      '{=, IS, IS NOT}',  
 208      '{44/455222, NULL, NULL}',  
 209      '{1, 25, 100}');  
 210 DO $x$  
 211 DECLARE  
 212     r record;  
 213     r2 record;  
 214     cond text;  
 215     idx_ctids tid[];  
 216     ss_ctids tid[];  
 217     count int;  
 218     plan_ok bool;  
 219     plan_line text;  
 220 BEGIN  
 221     FOR r IN SELECT colname, oper, typ, value[ordinality], matches[ordinality] FROM brinopers_bloom, unnest(op) WITH ORDINALITY AS oper LOOP  
 222   
 223         -- prepare the condition  
 224         IF r.value IS NULL THEN  
 225             cond := format('%I %s %L', r.colname, r.oper, r.value);  
 226         ELSE  
 227             cond := format('%I %s %L::%s', r.colname, r.oper, r.value, r.typ);  
 228         END IF;  
 229   
 230         -- run the query using the brin index  
 231         SET enable_seqscan = 0;  
 232         SET enable_bitmapscan = 1;  
 233   
 234         plan_ok := false;  
 235         FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond) LOOP  
 236             IF plan_line LIKE '%Bitmap Heap Scan on brintest_bloom%' THEN  
 237                 plan_ok := true;  
 238             END IF;  
 239         END LOOP;  
 240         IF NOT plan_ok THEN  
 241             RAISE WARNING 'did not get bitmap indexscan plan for %', r;  
 242         END IF;  
 243   
 244         EXECUTE format($y$SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond)  
 245             INTO idx_ctids;  
 246   
 247         -- run the query using a seqscan  
 248         SET enable_seqscan = 1;  
 249         SET enable_bitmapscan = 0;  
 250   
 251         plan_ok := false;  
 252         FOR plan_line IN EXECUTE format($y$EXPLAIN SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond) LOOP  
 253             IF plan_line LIKE '%Seq Scan on brintest_bloom%' THEN  
 254                 plan_ok := true;  
 255             END IF;  
 256         END LOOP;  
 257         IF NOT plan_ok THEN  
 258             RAISE WARNING 'did not get seqscan plan for %', r;  
 259         END IF;  
 260   
 261         EXECUTE format($y$SELECT array_agg(ctid) FROM brintest_bloom WHERE %s $y$, cond)  
 262             INTO ss_ctids;  
 263   
 264         -- make sure both return the same results  
 265         count := array_length(idx_ctids, 1);  
 266   
 267         IF NOT (count = array_length(ss_ctids, 1) AND  
 268                 idx_ctids @> ss_ctids AND  
 269                 idx_ctids  tid '(2, 0)';  
 369   END LOOP;  
 370 END;  
 371 $$;  
 372 -- summarize one range  
 373 SELECT brin_summarize_range('brin_summarize_bloom_idx', 0);  
 374  brin_summarize_range   
 375 ----------------------  
 376                     0  
 377 (1 row)  
 378   
 379 -- nothing: already summarized  
 380 SELECT brin_summarize_range('brin_summarize_bloom_idx', 1);  
 381  brin_summarize_range   
 382 ----------------------  
 383                     0  
 384 (1 row)  
 385   
 386 -- summarize one range  
 387 SELECT brin_summarize_range('brin_summarize_bloom_idx', 2);  
 388  brin_summarize_range   
 389 ----------------------  
 390                     1  
 391 (1 row)  
 392   
 393 -- nothing: page doesn't exist in table  
 394 SELECT brin_summarize_range('brin_summarize_bloom_idx', 4294967295);  
 395  brin_summarize_range   
 396 ----------------------  
 397                     0  
 398 (1 row)  
 399   
 400 -- invalid block number values  
 401 SELECT brin_summarize_range('brin_summarize_bloom_idx', -1);  
 402 ERROR:  block number out of range: -1  
 403 SELECT brin_summarize_range('brin_summarize_bloom_idx', 4294967296);  
 404 ERROR:  block number out of range: 4294967296  
 405 -- test brin cost estimates behave sanely based on correlation of values  
 406 CREATE TABLE brin_test_bloom (a INT, b INT);  
 407 INSERT INTO brin_test_bloom SELECT x/100,x%100 FROM generate_series(1,10000) x(x);  
 408 CREATE INDEX brin_test_bloom_a_idx ON brin_test_bloom USING brin (a) WITH (pages_per_range = 2);  
 409 CREATE INDEX brin_test_bloom_b_idx ON brin_test_bloom USING brin (b) WITH (pages_per_range = 2);  
 410 VACUUM ANALYZE brin_test_bloom;  
 411 -- Ensure brin index is used when columns are perfectly correlated  
 412 EXPLAIN (COSTS OFF) SELECT * FROM brin_test_bloom WHERE a = 1;  
 413                     QUERY PLAN                      
 414 --------------------------------------------------  
 415  Bitmap Heap Scan on brin_test_bloom  
 416    Recheck Cond: (a = 1)  
 417    ->  Bitmap Index Scan on brin_test_bloom_a_idx  
 418          Index Cond: (a = 1)  
 419 (4 rows)  
 420   
 421 -- Ensure brin index is not used when values are not correlated  
 422 EXPLAIN (COSTS OFF) SELECT * FROM brin_test_bloom WHERE b = 1;  
 423          QUERY PLAN            
 424 -----------------------------  
 425  Seq Scan on brin_test_bloom  
 426    Filter: (b = 1)  
 427 (2 rows)  
```  
原理:  
```  
   1 /*  
   2  * brin_bloom.c  
   3  *      Implementation of Bloom opclass for BRIN  
   4  *  
   5  * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group  
   6  * Portions Copyright (c) 1994, Regents of the University of California  
   7  *  
   8  *  
   9  * A BRIN opclass summarizing page range into a bloom filter.  
  10  *  