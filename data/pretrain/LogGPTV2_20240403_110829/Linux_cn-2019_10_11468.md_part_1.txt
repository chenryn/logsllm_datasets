---
author: Alex Bunardzic
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5096
date: '2019-10-17 09:44:35'
editorchoice: false
excerpt: 测试驱动开发技术是根据大自然的运作规律创建的，变异测试自然成为 DevOps 演变的下一步。
fromurl: https://opensource.com/article/19/8/mutation-testing-evolution-tdd
id: 11468
islctt: true
largepic: /data/attachment/album/201910/17/094428dhrrjgbm2pmhpj4j.jpg
permalink: /article-11468-1.html
pic: /data/attachment/album/201910/17/094428dhrrjgbm2pmhpj4j.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 11483
reviewer: wxy
selector: lujun9972
summary: 测试驱动开发技术是根据大自然的运作规律创建的，变异测试自然成为 DevOps 演变的下一步。
tags:
- TDD
- DevOps
thumb: false
title: 变异测试是测试驱动开发（TDD）的演变
titlepic: true
translator: Morisun029
updated: '2019-10-17 09:44:35'
---
> 
> 测试驱动开发技术是根据大自然的运作规律创建的，变异测试自然成为 DevOps 演变的下一步。
> 
> 
> 
![](/data/attachment/album/201910/17/094428dhrrjgbm2pmhpj4j.jpg)
在 “[故障是无懈可击的开发运维中的一个特点](https://opensource.com/article/19/7/failure-feature-blameless-devops)”，我讨论了故障在通过征求反馈来交付优质产品的过程中所起到的重要作用。敏捷 DevOps 团队就是用故障来指导他们并推动开发进程的。   测试驱动开发    Test-driven development （TDD）是任何敏捷 DevOps 团队评估产品交付的[必要条件](https://www.merriam-webster.com/dictionary/conditio%20sine%20qua%20non)。以故障为中心的 TDD 方法仅在与可量化的测试配合使用时才有效。
TDD 方法仿照大自然是如何运作的以及自然界在进化博弈中是如何产生赢家和输家为模型而建立的。
### 自然选择
![查尔斯·达尔文](/data/attachment/album/201910/17/094438gjezm25m6f2rgb25.png "Charles Darwin")
1859 年，   查尔斯·达尔文    Charles Darwin 在他的《   物种起源    On the Origin of Species 》一书中提出了进化论学说。达尔文的论点是，自然变异是由生物个体的自发突变和环境压力共同造成的。环境压力淘汰了适应性较差的生物体，而有利于其他适应性强的生物的发展。每个生物体的染色体都会发生变异，而这些自发的变异会携带给下一代（后代）。然后在自然选择下测试新出现的变异性 —— 当下存在的环境压力是由变异性的环境条件所导致的。
这张简图说明了调整适应环境条件的过程。
![环境压力对鱼类的影响](/data/attachment/album/201910/17/094440q0ohrzho59x4oh15.png "Environmental pressures on fish")
*图1. 不同的环境压力导致自然选择下的不同结果。图片截图来源于[理查德·道金斯的一个视频](https://www.youtube.com/watch?v=MgK5Rf7qFaU)。*
该图显示了一群生活在自己栖息地的鱼。栖息地各不相同（海底或河床底部的砾石颜色有深有浅），每条鱼长的也各不相同（鱼身图案和颜色也有深有浅）。
这张图还显示了两种情况（即环境压力的两种变化）：
1. 捕食者在场
2. 捕食者不在场
在第一种情况下，在砾石颜色衬托下容易凸显出来的鱼被捕食者捕获的风险更高。当砾石颜色较深时，浅色鱼的数量会更少一些。反之亦然，当砾石颜色较浅时，深色鱼的数量会更少。
在第二种情况下，鱼完全放松下来进行交配。在没有捕食者和没有交配仪式的情况下，可以预料到相反的结果：在砾石背景下显眼的鱼会有更大的机会被选来交配并将其特性传递给后代。
### 选择标准
变异性在进行选择时，绝不是任意的、反复无常的、异想天开的或随机的。选择过程中的决定性因素通常是可以度量的。该决定性因素通常称为测试或目标。
一个简单的数学例子可以说明这一决策过程。（在该示例中，这种选择不是由自然选择决定的，而是由人为选择决定。）假设有人要求你构建一个小函数，该函数将接受一个正数，然后计算该数的平方根。你将怎么做？
敏捷 DevOps 团队的方法是快速验证失败。谦虚一点，先承认自己并不真的知道如何开发该函数。这时，你所知道的就是如何描述你想做的事情。从技术上讲，你已准备好进行单元测试。
“ 单元测试   unit test ”描述了你的具体期望结果是什么。它可以简单地表述为“给定数字 16，我希望平方根函数返回数字 4”。你可能知道 16 的平方根是 4。但是，你不知道一些较大数字（例如 533）的平方根。
但至少，你已经制定了选择标准，即你的测试或你的期望值。
### 进行故障测试
[.NET Core](https://dotnet.microsoft.com/) 平台可以演示该测试。.NET 通常使用 xUnit.net 作为单元测试框架。（要跟随进行这个代码示例，请安装 .NET Core 和 xUnit.net。）
打开命令行并创建一个文件夹，在该文件夹实现平方根解决方案。例如，输入：
```
mkdir square_root
```
再输入：
```
cd square_root
```
为单元测试创建一个单独的文件夹：
```
mkdir unit_tests
```
进入 `unit_tests` 文件夹下（`cd unit_tests`），初始化 xUnit 框架：
```
dotnet new xunit
```
现在，转到 `square_root` 下, 创建 `app` 文件夹:
```
mkdir app
cd app
```
如果有必要的话，为你的代码创建一个脚手架：
```
dotnet new classlib
```
现在打开你最喜欢的编辑器开始编码！
在你的代码编辑器中，导航到 `unit_tests` 文件夹，打开 `UnitTest1.cs`。
将 `UnitTest1.cs` 中自动生成的代码替换为：
```
using System;
using Xunit;
using app;
namespace unit_tests{
   public class UnitTest1{
       Calculator calculator = new Calculator();
       [Fact]
       public void GivenPositiveNumberCalculateSquareRoot(){
           var expected = 4;
           var actual = calculator.CalculateSquareRoot(16);
           Assert.Equal(expected, actual);