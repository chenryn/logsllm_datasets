hidden behind a CDN, a direct DoS attack on the origin is
impossible. We assume that an attacker (e.g., state-sponsored)
Fig. 11: Accessing ratios when the most assigned egress IPs
are blocked.
Fig. 12: GFW collateral blocking attack.
can cut off one or a small set of CDN–origin connections,
either by invading an on-path network infrastructure (e.g.,
router or ﬁrewall) or launching a crossﬁre attack to block the
Internet access of the egress nodes. Here, we further reveal how
a normal attacker can easily gain the power to cut off CDN–
origin connections in a certain network scenario that makes
the attack more practical.
It is well known that the on-path Great Fire Wall (GFW)
will inspect the HTTP connections that may pass through
it. Upon the detection of any sensitive banned words (e.g.,
ultrasurf) within an HTTP connection, the GFW will inject
TCP RST packets to shut down the connection, and the pair
of IPs in this HTTP connection will be blacklisted for nearly
90 s by the GFW [59]. In this paper, we present how a
normal attacker can abuse the power of the GFW to launch
an availability degradation attack.
CDNs still support the plain text HTTP protocol in CDN–
origin connections, which can be intercepted by on-path net-
work infrastructures [41]. When the GFW is already located
on-path between the CDN and the origin, as in Fig. 12,
an attacker can deliberately send HTTP GET requests with
GFW-banned bad words to activate the connection resetting
mechanism of the GFW.
This mechanism leads to the pair of the CDN egress IP
and origin IP being blocked for 90 s by the GFW. Within
these 90 s, when normal clients try to access the website, and
if the same CDN egress IP is assigned to access the origin,
then the GFW will continue to reset the new TCP connections
that follow, even when there are no GFW-banned bad words
in these connections. Consequently, normal clients will be
blocked from accessing the website, leading to a degradation
of the availability of the origin.
10
 Request 1IngressIP1IngressIP2...IngressIPnEgressIP1 Request 2 Request nEgressIP2...EgressIPmBlock Egress IP1Origin ServerAttackerHTTP Get /badwordBlocked by TCP RST from GFWCollateral block by TCP RST from GFWHTTP Get /normal1HTTP Get /normal2HTTP Get /normal3GFWCDNOrigin ServerThe severity of such a degradation depends on how many
CDN egress IPs can be added into the blacklist of the GFW.
As we have illustrated, an attacker can easily harvest CDN
ingress IPs and continually send GFW-banned requests to each
of these ingress IPs. Depending on the egress IP assignment
policy of the CDN, increasingly more CDN egress IPs will be
added into the GFW blacklist. Note that the CDN assigning
a small set of egress IPs further lowers the bar of such an
attack, because adding these fewer egress IPs into the GFW
blacklist consumes much less time. Consequently, when all of
the egress IPs have been blacklisted, no clients will be able to
access the target website, resulting in the service unavailability
of the origin.
For simplicity and ethical concerns, we further evaluate the
attack against our website located in China, which is hosted
behind MaxCDN. Because the GFW resets TCP connections
sent into or out of China, and the egress IPs are all located
outside China, we set up a website in Beijing that is deployed
behind MaxCDN. Later, from the vantage point of Singa-
pore as the attacker, we continually send GET /ultrasurf
HTTP requests directly to the MaxCDN ingress IPs we ﬁnd
earlier. Meanwhile, from another vantage point of Singapore
acting like normal clients, we send GET /normal HTTP
requests to verify whether the website is still accessible. As
illustrated in Table IX, to access our website origin, MaxCDN
assigns less than 12 egress IPs, which can be collaterally
blocked by the GFW and, in that event, render our website
totally inaccessible.
We admit that, as the GFW is abused, the attack can affect
only the origins located in China, when they are being accessed
through CDNs outside of China. However, we can see that
the lower egress IP-churning rate of the CDN does lower the
difﬁculty of the attack. As state-level Internet censorship sys-
tems and middle boxes become widespread on the Internet [4],
[16], [32], [45], [61], the threat becomes applicable to more
situations and will become more severe as time goes on.
Summary. First, we can see that, compared with the tens of
thousands of ingress IPs that a CDN normally works with,
the egress IP address space is much smaller, which helps
an attacker to narrow down the attack targets. Second, the
lower IP-churning rate lowers the difﬁculty of attacks on
the CDN–origin connections, e.g., access blocking (on-path
blocking or off-path DoS attack, such as the “CrossFire”
attack), trafﬁc eavesdropping, or ﬁnding origin server IP via
historical network trafﬁc. Therefore, we believe that this threat
may be more severe than one might suppose at ﬁrst glance.
VI. DISCUSSION
A. Severity Analysis
In this paper, we reveal, using real-world measurements
across six CDNs, that the operational and architectural weak-
nesses of these CDNs can be exploited to break the DoS
protection provided by these CDNs.
For a CDN-powered website, the CDN recommends that
the origin enforce a ﬁrewall white-list to allow CDN-initiated
connections only. Because the origin has to communicate only
with the more trustworthy CDN, the origin may totally entrust
the CDN for DoS protection without enforcing any local anti-
DoS mechanisms. Thus, when the DoS protection provided
by the CDN is bypassed, it can lead to more severe damage
against the origin.
Because the CDN vendors do not validate the ownership
of the origins, a malicious CDN customer can conﬁgure any
other website as an origin behind the CDN [26]. Therefore,
the threats in this paper can also be abused to attack not only
the websites already hosted in the CDN, but also unwitting
websites not hosted in the CDN. Fastly security team has
expressed the same concern in their response to our responsible
disclosure.
B. Causes and Mitigation
Generally, the threats exist, in part, because of market
competition; the CDN vendors naturally want to provide more
functionality and achieve maximum compatibility with cus-
tomer websites of different conﬁgurations. However, the World
Wide Web ecosystem is threatened by both network and ap-
plication layer threats, and thus the full-featured functionality
offered by these CDNs, with protocol ﬂaws or implementation
weaknesses, could be exploited to break CDN security.
HTTP/2 Bandwidth Ampliﬁcation Attack. The threat arises
from the half-done HTTP/2 support of CDNs. The fact that
HTTP/2 is turned on by default for many CDNs makes
this threat more severe. We assume the reason behind this
vulnerability is that CDN vendors lack the motivation to enable
HTTP/2 in CDN–origin connections. For example, Cloudﬂare
states that, “The HTTP/2 protocol is focused on improving
the browser behavior now, it’s not necessary to make any
modiﬁcation to the origin for enabling HTTP/2.” [25]. Another
reason may be that HTTP/2 is still not widely deployed
by websites on the Internet. According to CloudFront, “The
connection from CloudFront back to your origin server is still
made using HTTP/1. You don’t need to make any server-
side changes in order to make your static or dynamic content
accessible via HTTP/2.” [5].
Fundamentally, HTTP/2 speciﬁcations lack sufﬁcient se-
curity consideration on HTTP/1.1-and-HTTP/2 coexistence
environments [8], [49]. Meanwhile, when CDN vendors rush
to support HTTP/2 to obtain efﬁciency-centered features, these
CDN vendors support HTTP/2 only in the client–CDN connec-
tions, resulting in an HTTP/2–HTTP/1.1 conversion environ-
ment not clearly deﬁned in the related speciﬁcations. These
two factors contribute to the HTTP/2 threat. Thus, we think
CDN vendors should be conservative in supporting this new
protocol and make it as an “opt-in” option instead. Moreover, if
HTTP/2 is turned on, CDN vendors should also further restrict
the converted CDN–origin HTTP/1.1 connections.
Pre-POST Slow HTTP Attack. In general, a CDN decou-
ples traditional client–website connections into client–CDN
and CDN–origin connections, a set-up that naturally defends
against slow HTTP attacks from the client side. However,
the pre-POST-forwarding behaviors of some CDNs empower
attackers to control back-end CDN–origin connections.
The pre-POST threat takes advantage of the intention of
some CDN vendors to speed up POST forwarding, while
introducing a new attacking vector. Our study shows that three
out of the six CDNs that have been examined are vulnerable to
the threat. The most obvious mitigation is for website admin-
istrators to implement a timeout on the origin side, although
11
this workaround requires conﬁguration on every CDN-powered
website. We suggest that CDN vendors implement a stricter
POST-forwarding mechanism, such as the store-then-forward,
which has already been applied by Cloudﬂare.
Degradation-of-Global-Availability Attack. The egress IP
assignment strategy of a CDN is deﬁnitely implementation-
dependent. Based on our measurements, the egress IP as-
signment strategies of some CDN vendors are predictable.
MaxCDN, especially, assigns most global requests through the
same egress IP even when the origin is located in a different
region. Thus, degradation-of-global-availability attack is made
more practical for an attacker, requiring the cutting off or
blocking of fewer CDN–origin connections.
The threat exploits the emphasis of CDNs to access web
resources efﬁciently with fewer IP resources, i.e., to access
and cache more efﬁciently [40], [52]), making degradation-
of-global-availability attacks easier to perform. Therefore, to
provide more robust network services, we suggest that CDN
vendors adjust
their egress IP assignment strategies to be
more unpredictable, such as by assigning more egress IPs and
churning them frequently.
Summary. The existence of these three threats unveil the pur-
suit by CDNs toward usability and efﬁciency, while apparently
neglecting security. Overall, we suggest the following CDN-
side mitigation, listed in Table X.
TABLE X: Recommended mitigation.
Threat
HTTP/2 Attack
Pre-POST Attack
Global Availability Attack
Recommendation
opt out of the CDN HTTP/2 support,
limit the CDN back-to-origin network trafﬁc.
limit the number of CDN back-to-origin connections,
enforce strict store-then-forward mechanism.
apply unpredictable IP churning strategy.
Furthermore, as we show that CDN-forwarded requests
can be abused to attack website servers, we also recommend
that website servers enforce local DoS defenses, e.g., requests
ﬁltering or bandwidth limiting, even if these website servers
are deployed behind trustworthy CDNs.
C. Ethics and Responsible Disclosure
Throughout this study, we aim to achieve a balance be-
tween real-world severity evaluations and risks of impacting
the CDN vendors, such as consuming too much bandwidth
during our experiments, which may cause bilateral damage
to the other CDN-powered websites and will introduce an
ethical problem to our academic study. Thus, we take utmost
care to prevent ethics problems in our experiments. First, our
experiments are conducted with free trial CDN accounts and
default conﬁgurations. Second, in exploring the various behav-
iors of the CDNs, we carefully use limited network resources
to generate legal HTTP requests. Third, the origin website is
implemented by ourselves. Through illustrated approaches in
our experiments, we believe we have minimized the security
risks of our experiments on the CDNs and other co-hosting
websites, and results have shown that our experiments did not
trigger any CDN anti-DoS mechanisms.
Meanwhile, we have already reported all our ﬁndings to
these CDN vendors months ago. The responses are summa-
rized in the following.
Fastly: Fastly conﬁrms the HTTP/2 threat; they have analyzed
the report and are working with our various internal teams to
understand how they might address this issue. They conﬁrm
that slow POST issues are problems on their infrastructure
and suggest the origin administrators implement a timeout
ﬁrst, which may also be followed by the addition of a CDN
conﬁguration option to implement a timeout on processing
the entire request body. Furthermore, they express concerns
regarding two attack scenarios: 1. Existing customers using
Fastly; 2. Unwitting victims (origins that have been conﬁgured
on a service by a malicious CDN customer). Fastly also offered
us T-shirts for thanks.
Cloudﬂare: Cloudﬂare reproduced the HTTP/2 issue with a
126× bandwidth ampliﬁcation ratio, which is smaller than
our resulting 132.6×. We believe this difference is due to the
header difference with Huffman encoding and :path ﬁeld.
Their newest response demonstrates that their team has been
trying to ﬁx the threat by putting an upper bound limit on the
size of the HTTP/2 dynamic table. This vendor also rewarded
us with $200 for our efforts.
CloudFront: CloudFront have said that
the
HTTP/2 issue is a product of the HTTP/2 standard, and
when an origin believes that they are the target of abusive
behavior, they can engage via the AWS Abuse process. Given
that CloudFront will pass along all trafﬁc (including POST
requests), the origins could also make use of rate-based AWS
WAF rules to specify the number of web requests that are
allowed by a client IP to mitigate the attack. However, the WAF
rules require being speciﬁcally conﬁgured by their customer
websites according to their respective website needs, which is
not a general solution.
MaxCDN: Months after we submitted our report, MaxCDN
has responded that POST requests are not forwarded to the
origin until the full payload data is received. We re-do the
experiments and observe that the slow POST issue has been
mitigated. Meanwhile, we ﬁnd that the MaxCDN web user-
interface has changed, and thus we believe that the threat is
collaterally mitigated because of other upgrades. Later, they
respond that the HTTP/2 threat is already known, although
they did not respond further when we submitted the actual
GFW-based proof of concept.
CDNSun and KeyCDN: These vendors thanked us for the
messages and forwarded the issues to their CDN developers.
However, we have received no further response.
they thought
VII. RELATED WORK
CDN Security. By rerouting trafﬁc to its globally distributed
network infrastructures with higher bandwidths, a CDN offers
a dedicated DDoS protection service to the websites that
it supports [24]. Methods and mechanisms of breaking or
bypassing CDNs are therefore a hot topic in the network
security research area. A previous study reported on CDN
forwarding-loop attacks, causing the request to be processed
repeatedly and resulting in a DoS attack between CDNs [13].
Because the CDN-decoupled frontend connection and backend
12
connection can have asymmetrical bandwidths, an attacker can
abort the frontend connection to exhaust the bandwidth of the
backend connection [57].
Attackers have also been conﬁrmed to be able to maneuver
the mappings of CDNs between clients and surrogates via
crafted DNS records [28]. With the high IP reputation and
co-hosting of popular websites given consideration, the infras-
tructure of the CDN has also been leveraged to circumvent
Internet censorship [30], [63]. Furthermore, a malicious CDN
customer can conﬁgure a target website server as an unwitting
origin behind a CDN, abusing the CDN resources to attack
target servers [26]. Therefore, as Fastly conﬁrmed, the vulner-
abilities reported in this paper not only affect existing customer
websites using the CDN, but can also affect other non-CDN-
powered websites.
From the perspective of the CDN origin, prior works are
focused mainly on sensitive information disclosure and mis-
conﬁguration. Attackers are highly interested in determining
the IP addresses of CDN-powered website origins to directly
bypass CDN protection [58]. Furthermore, the DNS resolution
ﬂaw of CDNs could also possibly leak the IP addresses of the
origins [35].
Because of the conﬂict between the man-in-the-middle
nature of CDN and the end-to-end encryption nature of HTTPs,
prior researchers have explored the TLS key management
problems, such as private key sharing and inefﬁcient revo-
cation, in CDN platforms
[10], [41]. Further, by exploiting
inconsistent interpretations of HTTP header ﬁelds between the
CDN and origin, CDN caching mechanism can be abused to
launch cache poisoning attacks [12], DoS attacks [46], and