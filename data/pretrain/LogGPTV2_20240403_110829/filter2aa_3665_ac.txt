    p str.slice!(0, 5)  #=> "Hello"
    p str               #=> "Ruby"
    ```
**返回 Enumerator 对象的方法**
在处理字符串的方法中，有以行为单位进行循环处理的 `each_line` 方法、以字节为单位进行循环处理的 `each_byte` 方法、以及以字符为单位进行循环处理的 `each_char` 方法。调用这些方法时若不带块，则会直接返回 `Enumerator` 对象，因此，通过使用这些方法，我们就可以像下面的例子那样使用 `Enumerable` 模块的方法了。
```ruby
# 用 collect 方法处理用 each_line 方法获取的行
str = "壹\n 贰\n 叁\n"
tmp = str.each_line.collect do |line|
  line.chomp  3
end
p tmp    #=> ["壹壹壹", "贰贰贰", "叁叁叁"]
# 用 collect 方法处理用 each_byte 方法获取的数值
str = "abcde"
tmp = str.each_byte.collect do |byte|
  -byte
end
p tmp    #=> [-97, -98, -99, -100, -101]
```
**Enumerator 类**
虽然 `Enumerable` 模块定义了很多方便的方法，但是作为模块中其他方法的基础，将遍历元素的方法限定为 `each` 方法，这一点有些不太灵活。
`String` 对象有` each_byte`、`each_line`、`each_char` 等用于循环的方法，如果这些方法都能使用 `each_with_index`、`collect` 等 `Enumerable` 模块的方法的话，那就方便多了。而 `Enumerator` 类就是为了解决这个问题而诞生的。
`Enumerator` 类能以 `each` 方法以外的方法为基础，执行 `Enumerable` 模块定义的方法。使用 `Enumerator` 类后，我们就可以用 `String.each_line` 方法替代 `each` 方法，从而来执行 `Enumerable` 模块的方法了。
另外，不带块的情况下，大部分 Ruby 原生的迭代器在调用时都会返回 `Enumerator` 对象。因此，我们就可以对 `each_line`、`each_byte` 等方法的返回结果继续使用 `map` 等方法。
```ruby
str = "AA\nBB\nCC\n"
p str.each_line.class    #=> Enumerator
p str.each_line.map{|line| line.chop }
#=> ["AA", "BB", "CC"]
p str.each_byte.reject{|c| c == 0x0a }
#=> [65, 65, 66, 66, 67, 67]
```
**与连接、反转（reverse）相关的方法**
除了与 `Enumerable` 模块、索引等相关的方法外，字符串中还有一些与数组共同的方法。
- `s.concat(s2)`
- `s+s2`
    与数组一样，字符串也能使用 `concat` 方法和 `+` 连接字符串。
    ```ruby
    s = "欢迎"
    s.concat("光临")
    p s    #=> "欢迎光临"
    ```
- `s.delete(str)`
- `s.delete!(str)`
    从字符串 s 中删除字符串 str。
    ```ruby
    s = "防/ 止/ 检/ 索"
    p s.delete("/")    #=> "防止检索"
    ```
- `s.reverse`
- `s.reverse!`
    反转字符串 s。
    ```ruby
    s = "晚上好"
    p s.reverse    #=> "好上晚"
    ```
# 其他方法
- `s.strip`
- `s.strip!`
这是删除字符串 s 开头和末尾的空白字符的方法。在不需要字符串开头和末尾的空白时，用这个方法非常方便。
```ruby
p " Thank you. ".strip    #=> "Thank you."
```
- `s.upcase`
- `s.upcase!`
- `s.downcase`
- `s.downcase!`
- `s.swapcase`
- `s.swapcase!`
- `s.capitalize`
- `s.capitalize!`
    所谓 case 在这里就是指英文字母的大、小写字母的意思。`~case` 方法就是转换字母大小写的方法。
    `upcase` 方法会将小写字母转换为大写，大写字母保持不变。
    ```ruby
    p "Object-Oriented Language".upcase
    #=> "OBJECT-ORIENTED LANGUAGE"
    ```
    `downcase` 方法则刚好相反，将大写字母转换小写。
    ```ruby
    p "Object-Oriented Language".downcase
    #=> "object-oriented language"
    ```
    `swapcase` 方法会将大写字母转换为小写，将小写字母转换为大写。
    ```ruby
    p "Object-Oriented Language".swapcase
    #=> "oBJECT-oRIENTED lANGUAGE"
    ```
    `capitalize` 方法会将首字母转换为大写，将其余的字母转换为小写。
    ```ruby
    p "Object-Oriented Language".capitalize
    #=> "Object-oriented language"
    ```
- `s.tr`
- `s.tr!`
    源自于 Unix 的 tr 命令的方法，用于置换字符。
    该方法与 `gsub` 方法有点相似，不同点在于 `tr` 方法可以像 `s.tr("a-z", "A-Z")` 这样一次置换多个字符。
    ```ruby
    p "ABCDE".tr("B", "b")        #=> "AbCDE"
    p "ABCDE".tr("BD", "bd")      #=> "AbCdE"
    p "ABCDE".tr("A-E", "a-e")    #=> "abcde"
    ```
    相反，`tr` 方法不能使用正则表达式，也不能指定两个字符以上的字符串。
# 日语字符编码的转换
字符编码转换有两种方法，分别是使用 `encode` 方法和使用 `nkf` 库的方法。
**encode 方法**
`encode` 方法是 Ruby 中基本的字符编码转换的方法。将字符编码由 EUC-JP 转换为 UTF-8，程序可以像下面这样写：
```ruby
# encoding: EUC-JP
euc_str = "日语EUC 编码的字符串"
utf8_str = euc_str.encode("utf-8")
```
另外，Ruby 中还定义了具有破坏性的 `encode!` 方法。
```ruby
# encodng: EUC-JP
str = "日语EUC 编码的字符串"
str.encode!("utf-8")    # 将str 转换为UTF-8
```
`encode` 方法支持的字符编码，可通过 `Encoding.name_list` 方法获得。
**nkf 库**
使用 `encode` 方法可以进行字符编码的转换，但却不能进行半角假名与全角假名之间的转换。全半角假名的转换我们需要使用 `nkf` 库。
`nkf` 库由 `NKF` 模块提供。`NKF` 模块是 Unix 的 nkf（Network Kanji code conversion Filter）过滤命令在 Ruby 中的实现。
NKF 模块用类似于命令行选项的字符串指定字符编码等。
```ruby
NKF.nkf( 选项字符串, 转换的字符串)
```
nkf 的主要参数
选项	| 意义
- | -
-d	    | 从换行符中删除 CR
-c	    | 往换行符中添加 CR
-x	    | 不把半角假名转换为全角假名
-m0	    | 抑制 MIME 处理
-h1	    | 把片假名转换为平假名
-h2	    | 把平假名转换为片假名
-h3	    | 互换平假名与片假名
-Z0	    | 把 JIS X 0208 的数字转换为 ASCII
-Z1	    | 加上 -Z0，把全角空格转换为半角空格
-Z2	    | 加上 -Z0，把全角空格转换为两个半角空格
-e	    | 输出的字符编码为 EUC-JP
-s	    | 输出的字符编码为 Shift-JIS
-j	    | 输出的字符编码为 ISO-2022-JP
-w	    | 输出的字符编码为 UTF-8（无 BOM）
-w8	    | 输出的字符编码为 UTF-8（有 BOM）
-w80	| 输出的字符编码为 UTF-8（无 BOM）
-w16	| 输出的字符编码为 UTF-16（Big Endian/ 无 BOM）
-w16B	| 输出的字符编码为 UTF-16（Big Endian/ 有 BOM）
-w16B0	| 输出的字符编码为 UTF-16（Big Endian/ 无 BOM）
-w16L	| 输出的字符编码为 UTF-16（Little Endian/ 有 BOM）
-w16L0	| 输出的字符编码为 UTF-16（Little Endian/ 无 BOM）
-E	    | 输入字符编码为 EUC-JP-S	输入字符编码为 Shift-JIS-J	输入字符编码为 ISO-2022-JP
-W	    | 输入的字符编码为 UTF-8（无 BOM）
-W8	    | 输入的字符编码为 UTF-8（有 BOM）
-W80	| 输入的字符编码为 UTF-8（无 BOM）
-W16	| 输入的字符编码为 UTF-16（Big Endian/ 无 BOM）
-W16B	| 输入的字符编码为 UTF-16（Big Endian/ 有 BOM）
-W16B0	| 输入的字符编码为 UTF-16（Big Endian/ 无 BOM）
-W16L	| 输入的字符编码为 UTF-16（Little Endian/ 有 BOM）
-W16L0	| 输入的字符编码为 UTF-16（Little Endian/ 无 BOM）
为了避免半角假名转换为全角假名，或者因电子邮件的特殊字符处理而产生问题，如果只是单纯对字符进行编码转换的话，一般使用选项 `-x` 和 `-m0`（可以合并书写 `-xm0`）就足够了。
下面是把 EUC-JP 字符串转换为 UTF-8 的例子：
```ruby
# encoding: EUC-JP
require "nkf"
euc_str = "日语EUC 编码的字符串"
utf8_str = NKF.nkf("-E -w -xm0", euc_str)
```
不指定输入字符编码时，`nkf` 库会自动判断其编码，基本上都可以按如下方式书写：
```ruby
# encoding: EUC-JP
require "nkf"
euc_str = "日语EUC 编码的字符串"
utf8_str = NKF.nkf("-w -xm0", euc_str)
```
NKF 模块在 Ruby 字符串还未支持 encoding 功能以前就已经开始被使用了。大家可能会感觉选项的指定方法等与现在 Ruby 的风格有点格格不入，这是因为 nkf 库把其他命令的功能硬搬了过来的缘故。如果不涉及一些太特殊的处理，一般使用 `encode` 就足够了。