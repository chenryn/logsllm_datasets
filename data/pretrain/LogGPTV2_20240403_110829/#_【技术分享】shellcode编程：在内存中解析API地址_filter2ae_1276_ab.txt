来自OriginalFirstThunk的AddressOfData字段是指向IMPORT_BY_NAME结构的RVA。
FirstThunk的Function字段指向我们要搜索的API的真实地址。
**  
**
**0x08 Image By Name**  
因为我们不处理从序号导入的情况，所以我们不关心hint字段，只需要非0结尾字符串表示的API名。
**Hint**
包含索引到DLL函数导出表的位置。这个字段被PE加载器使用，因此它能够在DLL导出表中快速的查找函数。这个值不是必须的，有些链接器将这个字段设置为0。
**Name**
包含导入函数的名字。是一个ASCIIZ字符串。注意Name字段的大小是可变的。提供的结构方便使您可以使用描述性名称引用数据结构。
下面的代码使用DLL和API名字的CRC-32C哈希值，从导出表中获取API的地址。
    LPVOID search_imp(LPVOID base, DWORD hash)
    {
      DWORD                    dll_h, i, rva;
      PIMAGE_IMPORT_DESCRIPTOR imp;
      PIMAGE_THUNK_DATA        oft, ft;
      PIMAGE_IMPORT_BY_NAME    ibn;
      PIMAGE_DOS_HEADER        dos;
      PIMAGE_NT_HEADERS        nt;
      PIMAGE_DATA_DIRECTORY    dir;
      PCHAR                    dll;
      LPVOID                   api_adr=NULL;
      dos = (PIMAGE_DOS_HEADER)base;
      nt  = RVA2VA(PIMAGE_NT_HEADERS, base, dos->e_lfanew);
      dir = (PIMAGE_DATA_DIRECTORY)nt->OptionalHeader.DataDirectory;
      rva = dir[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress;
      // if no import table, return
      if (rva==0) return NULL;
      imp  = (PIMAGE_IMPORT_DESCRIPTOR) RVA2VA(ULONG_PTR, base, rva);
      for (i=0; api_adr==NULL; i++) 
      {
        if (imp[i].Name == 0) return NULL;
        dll   = RVA2VA(PCHAR, base, imp[i].Name);
        dll_h = crc32c(dll); 
        rva   = imp[i].OriginalFirstThunk;
        oft   = (PIMAGE_THUNK_DATA)RVA2VA(ULONG_PTR, base, rva);
        rva   = imp[i].FirstThunk;
        ft    = (PIMAGE_THUNK_DATA)RVA2VA(ULONG_PTR, base, rva);
        for (;; oft++, ft++) 
        {
          if (oft->u1.Ordinal == 0) break;
          // skip import by ordinal
          if (IMAGE_SNAP_BY_ORDINAL(oft->u1.Ordinal)) continue;
          rva = oft->u1.AddressOfData;
          ibn = (PIMAGE_IMPORT_BY_NAME)RVA2VA(ULONG_PTR, base, rva);
          if ((crc32c(ibn->Name) + dll_h) == hash) {
            api_adr = (LPVOID)ft->u1.Function;
            break;
          }
        }
      }
      return api_adr;
    }
相同功能的汇编代码如下，但是有了些优化。  
    in: ebx = base of module to search
    ;     ecx = hash to find
    ;
    ; out: eax = api address resolved in IAT
    ;
    search_impx:
        xor    eax, eax    ; api_adr = NULL
        pushad
        ; eax = IMAGE_DOS_HEADER.e_lfanew
        mov    eax, [ebx+3ch]
        add    eax, 8     ; add 8 for import directory
        ; eax = IMAGE_DATA_DIRECTORY.VirtualAddress
        mov    eax, [ebx+eax+78h]
        test   eax, eax
        jz     imp_l2
        lea    ebp, [eax+ebx]
    imp_l0:
        mov    esi, ebp      ; esi = current descriptor
        lodsd                ; OriginalFirstThunk +00h
        xchg   eax, edx      ; temporarily store in edx
        lodsd                ; TimeDateStamp      +04h
        lodsd                ; ForwarderChain     +08h
        lodsd                ; Name_              +0Ch
        test   eax, eax
        jz     imp_l2        ; if (Name_ == 0) goto imp_l2;
        add    eax, ebx
        call   crc32c
        mov    [esp+_edx], eax
        lodsd                 ; FirstThunk
        mov    ebp, esi       ; ebp = next descriptor
        lea    esi, [edx+ebx] ; esi = OriginalFirstThunk + base
        lea    edi, [eax+ebx] ; edi = FirstThunk + base
    imp_l1:
        lodsd                 ; eax = oft->u1.Function, oft++;
        scasd                 ; ft++;
        test   eax, eax       ; if (oft->u1.Function == 0)
        jz     imp_l0         ; goto imp_l0
        cdq
        inc    edx         ; will be zero if eax >= 0x80000000
        jz     imp_l1      ; oft->u1.Ordinal & IMAGE_ORDINAL_FLAG
        lea    eax, [eax+ebx+2] ; oft->Name_
        call   crc32c           ; get crc of API string
        add    eax, [esp+_edx] ; eax = api_h + dll_h
        cmp    [esp+_ecx], eax ; found match?
        jne    imp_l1
        mov    eax, [edi-4]    ; ft->u1.Function
    imp_l2:
        mov    [esp+_eax], eax
        popad
        ret
**0x09 Process Environment Block**  
也许这个部分应该放在所有的内容之前？
另一个“进步”是在2002年由Ratter /
29A公布的[在NT下从PEB获得重要数据](http://vxheaven.org/29a/29a-6/29a-6.224)的方法。有一个更简单的方法从PEB中获取kernel32.dll的模块基址。
在这里我使用来自[Matt Graeber’s
PIC_Bindshell](https://github.com/mattifestation/PIC_Bindshell)的结构。
    LPVOID getapi (DWORD dwHash)
    {
      PPEB                     peb;
      PMY_PEB_LDR_DATA         ldr;
      PMY_LDR_DATA_TABLE_ENTRY dte;
      LPVOID                   api_adr=NULL;
    #if defined(_WIN64)
      peb = (PPEB) __readgsqword(0x60);
    #else
      peb = (PPEB) __readfsdword(0x30);
    #endif
      ldr = (PMY_PEB_LDR_DATA)peb->Ldr;
      // for each DLL loaded
      for (dte=(PMY_LDR_DATA_TABLE_ENTRY)ldr->InLoadOrderModuleList.Flink;
           dte->DllBase != NULL && api_adr == NULL; 
           dte=(PMY_LDR_DATA_TABLE_ENTRY)dte->InLoadOrderLinks.Flink)
      {
        api_adr=search_imp(dte->DllBase, dwHash);
      }
      return api_adr;
    }
下面是相同算法的汇编，做了一些优化。
    ; LPVOID getapix(DWORD hash);
    getapix:
    _getapix:
        pushad
        mov    ecx, [esp+32+4] ; ecx = hash
        push   30h
        pop    eax
        mov    eax, [fs:eax] ; eax = (PPEB) __readfsdword(0x30);
        mov    eax, [eax+12] ; eax = (PMY_PEB_LDR_DATA)peb->Ldr
        mov    edi, [eax+12] ; edi = ldr->InLoadOrderModuleList.Flink
        jmp    gapi_l1
    gapi_l0:
        call   search_expx
        test   eax, eax
        jnz    gapi_l2
        mov    edi, [edi]    ; edi = dte->InMemoryOrderLinks.Flink
    gapi_l1:
        mov    ebx, [edi+24] ; ebx = dte->DllBase
        test   ebx, ebx
        jnz    gapi_l0
    gapi_l2:
        mov    [esp+_eax], eax
        popad
        ret
**  
**
**0xA hash算法**  
上述所有的例子，我都是用CRC-32C。C代表使用的Castagnoli多项式。用这个的原因是测试的80000个API都不会有冲突。一些其他的hash算法也提供了足够好的结果，但是使用CRC-32C的优势是INTEL处理器发布的SSE4.2的支持。
然而与0x20做或操作不是CRC-32C特有的。在这里仅仅是在哈希前将字符串转为小写。有时kernel32.dll也会出现大写的情况。
    uint32_t crc32c(const char *s)
    {
      int i;
      uint32_t crc=0;
      do {
        crc ^= (uint8_t)(*s++ | 0x20);
        for (i=0; i> 1) ^ (0x82F63B78 * (crc & 1));
        }
      } while (*(s - 1) != 0);
      return crc;
    }
这是使用内置指令的代码。
    ;
        xor    eax, eax
        cdq
    crc_l0:
        lodsb
        or     al, 0x20
        crc32  edx, al
        cmp    al, 0x20
        jns    crc_l0
下面是CPU不支持SSE4.2的代码。
    ; in: eax = s
    ; out: crc-32c(s)
    ;
    crc32c:    
        pushad
        xchg   eax, esi          ; esi = s
        xor    eax, eax          ; eax = 0
        cdq                      ; edx = 0
    crc_l0:
        lodsb                    ; al = *s++ | 0x20
        or     al, 0x20
        xor    dl, al            ; crc ^= c
        push   8
        pop    ecx    
    crc_l1:
        shr    edx, 1            ; crc >>= 1
        jnc    crc_l2
        xor    edx, 0x82F63B78
    crc_l2:
        loop   crc_l1
        sub    al, 0x20          ; until al==0
        jnz    crc_l0    
        mov    [esp+_eax], edx
        popad
        ret
当然，CRC-32C不是绝对没冲突的。有时需要考虑使用加密哈希算法。最简单的是有Daniel
Bernstein的[CubeHash](http://cubehash.cr.yp.to/)。
也可以使用一个小块或流密码加密字符串和截断密文为32或64位。解决冲突是值得探索的。
**0xB 总结**  
解析导入和导出表不是困难的任务。所有的文档和代码将被提供，就没了不使用PIC技术的解析API的方法。使用硬编码API地址或者通过序号查找是个灾难。
[Getapi.c](https://github.com/odzhan/shellcode/blob/master/win/getapi.c)包含了通过CRC-32C定位API的C代码。[X86.asm](https://github.com/odzhan/shellcode/blob/master/win/x86.asm)和[x64.asm](https://github.com/odzhan/shellcode/blob/master/win/x64.asm)包含了通过CRC-32C定位API的汇编代码。