title:Securing internet coordinate embedding systems
author:Mohamed Ali Kâafar and
Laurent Mathy and
Chadi Barakat and
Kav&apos;e Salamatian and
Thierry Turletti and
Walid Dabbous
Securing Internet Coordinate Embedding Systems
Mohamed Ali Kaafar
INRIA Sophia Antipolis, FR
PI:EMAIL
Kave Salamatian
LIP6, FR and EPFL, CH
PI:EMAIL
Laurent Mathy
∗
Lancaster University, UK
PI:EMAIL
Thierry Turletti
INRIA Sophia Antipolis, FR
PI:EMAIL
Chadi Barakat
INRIA Sophia Antipolis, FR
PI:EMAIL
Walid Dabbous
INRIA Sophia Antipolis, FR
PI:EMAIL
ABSTRACT
This paper addresses the issue of the security of Internet Coordinate
Systems, by proposing a general method for malicious behavior
detection during coordinate computations. We ﬁrst show that the
dynamics of a node, in a coordinate system without abnormal or
malicious behavior, can be modeled by a Linear State Space model
and tracked by a Kalman ﬁlter. Then we show that the obtained
model can be generalized in the sense that the parameters of a ﬁlter
calibrated at a node can be used effectively to model and predict
the dynamic behavior at another node, as long as the two nodes are
not too far apart in the network. This leads to the proposal of a Sur-
veyor infrastructure: Surveyor nodes are trusted, honest nodes that
use each other exclusively to position themselves in the coordinate
space, and are therefore immune to malicious behavior in the sys-
tem. During their own coordinate embedding, other nodes can then
use the ﬁlter parameters of a nearby Surveyor as a representation
of normal, clean system behavior to detect and ﬁlter out abnormal
or malicious activity. A combination of simulations and Planet-
Lab experiments are used to demonstrate the validity, generality,
and effectiveness of the proposed approach for two representative
coordinate embedding systems, namely Vivaldi and NPS.
Categories and Subject Descriptors
C.2 [Computer-Communications Networks]: Security and pro-
tection; C.2.1 [Network Architecture and Design]: Network
topology
General Terms
Security, Performance, Experimentation
Keywords
Network positioning systems,
systems, security, malicious behavior detection, Kalman ﬁlter
∗
L. Mathy was also partly supported by LAAS-CNRS, France and
the University of Li`ege, Belgium.
Internet Coordinates-embedding
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’07, August 27–31, 2007, Kyoto, Japan.
Copyright 2007 ACM 978-1-59593-713-1/07/0008 ...$5.00.
1.
INTRODUCTION
Internet coordinate systems (e.g., [1, 2, 3, 4, 5, 6], etc.) embed
latency measurements amongst samples of a node population into
a geometric space and associate a network coordinate vector (or
coordinate in short) in this geometric space to each node, with a
view to enable accurate and cheap distance (i.e.
latency) predic-
tions amongst any pair of nodes in the population. Extensive mea-
surements and analysis from a live, large-scale deployment have
shown network coordinate systems to be ﬁt for purpose [7], mak-
ing them a valuable tool to support distributed applications, systems
and overlays (e.g., [8, 9, 10]) that rely on, and beneﬁt from, the no-
tion of network topology-awareness. However, it should also be
noted that coordinate-based positioning systems only achieve de-
sirable accuracy, robustness, stability and scalability properties at
the expense of rather slow convergence times – in other words, a
new node joining the coordinate system may not reach an accurate
value for its own coordinate before several tens of seconds or even
several minutes. Such convergence properties would argue in favor
of a deployment of Internet coordinate systems as an always-on,
large-scale service.
Unfortunately, such coordinate services have been shown to be
vulnerable to malicious attacks, providing a potentially attractive
fertile ground for the disruption or collapse of the many applica-
tions and overlays that would use these services [11]. There are
actually two obvious ways to disrupt the operation of a coordinate
based system. First when requested to give its coordinate for a dis-
tance estimation at the application-level, a malicious node could
simply and blatantly lie. Second, a malicious node, or even a col-
luding group, may aim at disrupting the embedding process itself.
This latter strategy is very insidious and effective as it can result
in important distortions of the coordinate space which then spoils
the coordinate computations of many nodes (malicious and honest
alike) [11]. This paper focuses on developing and studying generic
methods to secure the coordinate embedding process (the problem
of nodes lying about their coordinate during distance estimation at
the application-level is not addressed).
More precisely, the embedding process, regardless of the actual
coordinate-based positioning system, works on the premise that
nodes adjust their coordinate based on some comparison between
measured and estimated distances to some other nodes. Malicious
nodes can interfere with this embedding process by, amongst other
things, lying about their real coordinate and/or tampering with mea-
surement probes, to create a discrepancy between measured and es-
timated latencies, so that unsuspecting nodes would wrongly adjust
their own coordinate in a bid to reduce the difference [12]. Because
the load on the network naturally varies in time, so does latency be-
tween a pair of nodes, and as a result, the embedding process must
be run periodically by all nodes to track changes in network condi-
tions. This “continuous” adjustment of nodes’ coordinates can not
only result in a drift of the coordinate space [7] but also gives plenty
of scope and opportunities for malicious activity. We therefore seek
to equip (honest) nodes with a means to detect, with low overhead,
malicious activities they may encounter during embedding.
Noting that, in the absence of malicious nodes, a node’s coor-
dinate depends on the combination of network conditions and the
speciﬁcities of the embedding process itself (e.g. which coordi-
nate protocol is in use, the chosen dimensionality of the geometric
space, etc), we therefore introduce the concept of Surveyor nodes
(or Surveyors in short). Surveyors form a group of trusted (honest)
nodes, scattered across the network, which use each other exclu-
sively to position themselves in the coordinate space. Of course,
Surveyors do assist other nodes in their positioning (as prescribed
by the embedding protocol), but we stress that Surveyors never
rely on non-Surveyor nodes to compute their own coordinate. This
strategy thus allows Surveyors to experience and learn the natu-
ral evolution of the coordinate space, as observed by the evolution
of their own coordinate, in the absence of malicious activities. In
essence, Surveyor nodes are thus vantage points guaranteed to be
immune from malicious activities. The idea is that Surveyors can
then share a “representation” of normal behavior in the system with
other nodes to enable them to detect and ﬁlter out abnormal behav-
ior.
We postulate and verify that, in the absence of malicious activ-
ity, a node’s coordinate can be viewed as a stochastic process with
linear dependencies whose evolution can be tracked by a Kalman
ﬁlter [13, 14]. Each Surveyor then computes and calibrates the pa-
rameters of a linear state space model and shares the parameters of
this model with other nodes. These nodes can then use these pa-
rameters, to run locally and in a “stand-alone” fashion a Kalman
ﬁlter tracking the coordinate adjustments. These nodes can then
use the Kalman ﬁlter output (the innovation process), to compare
their observed coordinate adjustments with the one predicted by the
Kalman ﬁlter, and ﬂag as “suspicious” embedding steps where the
difference would be too high.
In section 2, we present a general model of coordinate embed-
ding, in the absence of malicious nodes, that naturally leads to the
Kalman ﬁlter framework. In section 3, we validate the model, with
both simulations and PlanetLab experiments, in the case of both
Vivaldi [5] and NPS [4]. This section also studies the viability of
the idea of using Surveyor nodes in secure coordinate embedding.
We then describe and evaluate, in sections 4 and 5, how Surveyors
can effectively be used for malicious node detection in the speciﬁc
embedding process of Vivaldi and NPS. We conclude with perspec-
tives on our contributions in section 6.
2. COORDINATE EMBEDDING MODEL
The goal of embedding systems, regardless of the embedding
method and geometric space used, is to assign a coordinate to ev-
ery node in the system so that, at any time, the distance between any
two points in the geometric space should provide a good estimate
of the network distance, measured as an RTT (Round Trip Time),
between the corresponding nodes. Obviously, because at any in-
stant in time, the RTT that can be measured between two nodes de-
pends on the state of the network (e.g. trafﬁc load, state of queues
in routers, etc) as well as the state of the operating system in nodes
(e.g. scheduling state generating measurement noise, etc), the exact
value of the RTT varies continuously. However, it has been shown
that RTT values in the Internet exhibit some stability in a statistical
sense [15], with the statistical properties of RTTs exhibiting no sig-
niﬁcant change at timescales of several minutes. It is that property
that embedding systems exploit to provide good distance estimates
while only needing to have nodes adjust (recalculate) their coordi-
nate on a periodic basis. Consequently, the coordinate of a node
can be viewed as a discrete stochastic process, and we will use X n
i
to represent the coordinate of node i at “discrete time” n.
Without loss of generality, consider that a node (called the em-
bedding node) computes its coordinate through a series of embed-
ding steps, where each embedding step represents a coordinate
adjustment based on a one-to-one interaction with another node,
called a peer node (e.g. peer nodes are called neighbors in Vi-
valdi, and landmarks or reference points in NPS). Note that when
the embedding protocol requires that a node uses several peer nodes
simultaneously for repositioning, for the purpose of our modeliza-
tion, we simply consider that each peer node corresponds to a dis-
tinct embedding step, each taking place at “successive” discrete
times.
At every embedding step, the “ﬁtness” (or “correctness”) of the
embedding node coordinate is assessed by computing the deviation
between the measured RTT towards the corresponding peer node
and the one estimated in the coordinate system. More precisely,
suppose that at its nth embedding step, embedding node i has cur-
rent coordinate X n
i and uses peer node j with current coordinate
X n
j . Suppose that the RTT between these nodes, measured during
this embedding step, is RT T n
ij. The ﬁtness of the embedding node
coordinate can then be computed as the measured relative error
Dn =
. The goal of any embedding system,
regardless of the embedding method proposed and/or the geomet-
ric space structure, is to minimize a “cost” indicator (e.g. mean
square error) that captures the measured relative error that could be
observed between any node and any other node in the system, at
any time.
j ||−RT T n
ij|
RT T n
ij
|||Xn
i −Xn
As the measured relative errors are fundamental performance in-
dicators to all embedding systems, it seems natural to develop a
model that captures their dynamic characteristics, although we note
that relative errors often have complex behavior (and may thus not
be a natural choice from a modeling perspective).
Measured relative errors are subject to ﬂuctuations of the RTT
for the reasons mentioned above, namely transient network conges-
tion and operating system scheduling issues. To isolate the impact
of these RTT ﬂuctuations on anomaly detection, we introduce Δn,
the nominal relative error that our node under consideration would
have obtained at its nth embedding step if the RTTs in the network
had not ﬂuctuated. An anomaly becomes simply a large deviation
of measured relative error Dn from its nominal value deﬁned by
Δn.
Because many sources contribute to the deviation of Dn from its
nominal value (RTT measurement error, RTT ﬂuctuations, errors
in node coordinates), it is reasonable to suppose that they relate to
each other as follows,
Dn = Δn + Un
(1)
where Un is a Gaussian random variable with mean zero and vari-
ance vU .
We now focus on the dynamics of the system in its nominal
regime where RTTs do not ﬂuctuate. In the absence of complete
and accurate knowledge of the system, nodes keep on adapting the
nominal relative error on a pairwise basis with their peer nodes,
aiming to optimize the cost indicator. This adaptation is subject to
an error caused by the other nodes in the system adapting their coor-
dinate (and corresponding relative error) in a completely distributed
way. We thus deﬁne the system error Wn which represents the im-
pact of other nodes on the positioning of a node at embedding step
n. Since the system error at a node results from many contributing
sources, it is also reasonable to assume that it is a white gaussian
process (with mean ¯w and variance vW )1.
Because of the nature of large-scale embedding processes, the
nominal relative error Δn can be deemed to follow a stochastic
process that converges to some stationary regime characterized by
a positive average. As a ﬁrst approximation, the process Δn could
be modeled as a ﬁrst order Auto Regressive (AR) model:
Δn+1 = βΔn + Wn.
(2)
where β is a constant factor strictly less than one otherwise the rel-
ative error does not converge to a stationary regime independently
of the initial condition. This equation captures the dynamic evo-
lution of the nominal relative error of a node through successive
embedding steps.
Equations 2 and 1 deﬁne a linear state space model for the rela-
tive error of a node. Our goal is to devise a way to obtain relative
error predictions from this model. Because of the linear properties
of the model, a Kalman ﬁlter can be used to track the evolution
of the nominal relative error and obtain a predicted relative error
ˆΔn|n−1 (see section 2.1).
The idea behind this strategy is that if the stochastic space model,
and especially its associated Kalman ﬁlter, are calibrated within a
clean embedding system, then a simple hypothesis test can be used
to assess whether the deviation between the measured relative error
and the predicted relative error, observed at a given embedding step,
is normal or is the fruit of anomalous or malicious activity from the
peer node. From this perspective, even if the state space model
considered is crude, its quality should be evaluated based on the
ﬁnal outcome in terms of probability of detection and false positive
rate. We will see in the evaluation section (section 5) that this model
achieves very good performance.
2.1 Kalman Filter Equations
The Kalman ﬁlter is used here to estimate Δn given the set of
0 = {D0, . . . , Dn}. Un-
previously measured relative errors Dn
der the hypothesis of a gaussian noise process in the underlying
state space model, the Kalman ﬁlter gives the Least Mean Squared
estimates of Δn, ˆΔn. Moreover, it gives the quality of these
estimates through an evaluation of the mean squared error i.e.,
E[( ˆΔn − Δn)2]. This last value could be used to detect anoma-
lies through large deviations of the measured relative error from its
mean.
We will assume here that all the parameters of the space model
given in Eq. (1) and Eq. (2) are known and given. In the next
section we will describe how to derive these parameters.
Let us denote by ˆΔi|i−1 the estimation of Δi knowing the obser-
vations of network delay up to time i−1, and ˆΔi|i the estimate after
the measurement Di is done. Similarly, let Pi|i−1 be the estimated
a posteriori error variance at time i knowing the observations up to
time i − 1, and let Pi|i be the estimation of the a posteriori error
variance after Di is known. The Kalman Filter is composed of two
steps that are iterated. The ﬁrst step is called the prediction step
and the second one the update step.
In the prediction step, the value of ˆΔi|i−1 is calculated based on
ˆΔi−1|i−1 as :
ˆΔi|i−1 = β ˆΔi−1|i−1 + ¯w.
The a posteriori error variance of this estimate is :
Pi|i−1 = β2Pi−1|i−1 + vW .
1The value ¯w accounts for the drift that has been observed in posi-
tioning systems [7].
In the update step, ˆΔi|i−1 is updated to integrate the observed mea-
surement Di :
ˆΔi|i = ˆΔi|i−1 + Ki(Di − ˆΔi|i−1)
where Ki denotes the updated gain and is obtained as :
Ki =
Pi|i−1
Pi|i−1 + vU
.
The a posteriori error variance of this estimate is :
Pi|i =
vU
Pi|i−1 + vU
Pi|i−1.
The value ηi = Di − ˆΔi|i−1 is called the innovation process and
is the main process to observe for anomalous behavior detection
(see section 4.1). The innovation process is a white (meaning that
it is an independent process) gaussian process with a mean 0 and a
variance equal to vη,i = vU +Pi|i−1. Abnormality simply amounts
to a signiﬁcant deviation from the nominal values of the innovation
process characterized by the Kalman ﬁlter.
To run the Kalman estimation, we need as initial values the sys-
tem state value w0 and the a priori state variance P0|0 = p0. These
two values are estimated during the parameters calibration step.
2.2 Calibration of the Kalman ﬁlter
Before running the estimation using the Kalman ﬁlter, the values
of the ﬁlter parameters θ = (β, vW , vU , w0, p0) have to be com-
puted. For this purpose we need to calibrate these parameters over
coordinate measurements collected during a stationary and cheater-
free period. The calibration can be done using a maximum likeli-
hood criteria (choosing parameter values such that the likelihood of
observing the measurements is maximized) by applying the Expec-
tation Maximization (EM) method. We follow the approach pre-
sented in [16] for the EM derivation.
Calibration by EM method.
Let’s assume that DN
0 = {D0, . . . , DN} and let ΔN
DN
of nominal relative errors.
As all the noise processes are assumed to be gaussian, DN
0 and
0 will jointly follow a gaussian distribution. The log-likelihood
0 is the set of all measured prediction errors,
0 = {Δ0, . . . , ΔN} be the set
0 and ΔN
0 can therefore be written as follows: