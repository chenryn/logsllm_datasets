title:Simulatable Security and Polynomially Bounded Concurrent Composability
author:Dennis Hofheinz and
Dominique Unruh
Simulatable Security and
Polynomially Bounded Concurrent Composability
Dennis Hofheinz
Dominique Unruh
CWI, Cryptology and Information Security Group
IAKS, Arbeitsgruppe Systemsicherheit
Amsterdam, The Netherlands
PI:EMAIL
Universität Karlsruhe, Germany
PI:EMAIL
Abstract
Simulatable security is a security notion for multi-party
protocols that implies strong composability features. The
main deﬁnitional ﬂavours of simulatable security are stan-
dard simulatability, universal simulatability, and black-box
simulatability. All three come in “computational,” “statis-
tical” and “perfect” subﬂavours indicating the considered
adversarial power. Universal and black-box simulatability,
in all of their subﬂavours, are already known to guarantee
that the concurrent composition even of a polynomial num-
ber of secure protocols stays secure.
We show that computational standard simulatability
does not allow for secure concurrent composition of poly-
nomially many protocols, but we also show that statisti-
cal standard simulatability does. The ﬁrst result assumes
the existence of an interesting cryptographic tool (namely
time-lock puzzles), and its proof employs a cryptographic
multi-party computation in an interesting and unconven-
tional way.
Keywords: Reactive Simulatability, Universal Composabil-
ity, concurrent composition.
1 Introduction
There are several ways to deﬁne what it means for a
multi-party protocol to be secure. A very elegant and gen-
eral way is the concept of simulatable security. With simu-
latable security, one ﬁrst states what the protocol should do
by specifying a single trusted host that completes the proto-
col task ideally and securely by construction. For instance,
a trusted host for tossing a common coin for a set of parties
would simply uniformly and randomly sample a bit b and
then send b to each party. A simulatably secure protocol for
coin toss must now be indistinguishable (in a well-deﬁned
sense) from this ideal setting. More speciﬁcally, no proto-
col environment must be able to detect differences between
executions with the real protocol and executions with the
trusted host in feasible time.
Thus, simulatable security actually establishes a secu-
rity relation that considers a protocol secure relative to a
suitable idealisation. However, when the idealisation for
the considered protocol class is obvious, then a protocol
is simply called secure, implicitly meaning security rela-
tive to that idealisation. Consequently, simulatable secu-
rity captures the notion of a secure reﬁnement of one sys-
tem by another. In particular, it proved useful as a platform
to show that a cryptographic implementation of a symbolic
protocol is secure against cryptoanalytic attacks (see, e.g.,
[9, 5, 1, 20]). But simulatable security also helps to analyse
the information-theoretic security guarantees of a one-time
pad in a nice and convenient manner, cf. [38].
For deﬁning and analysing a large protocol, a divide-
and-conquer approach is generally helpful and sometimes
even necessary. However, to allow for a modular protocol
analysis, it is crucial that the composition of secure proto-
cols stays secure. Secure composition of security properties
should not be taken for granted: E.g., [33, 34] shows that
several notions of non-interference are not preserved un-
der composition. (This can be rectiﬁed, e.g., by deriving
properties sufﬁcient for non-interference-preserving com-
position [42] or adjusting the non-interference notion [31].)
Similarly, most deﬁnitions of the cryptographic tool of
Zero-Knowledge proof systems do not allow for securely
composing even only two systems [25]. Since it is a difﬁ-
cult and laborious task to prove the different composability
properties anew for each and every security property, it can
be of great advantage to simply show that a protocol is sim-
ulatably secure. From this, many different security proper-
ties can be derived: e.g., preservation of integrity proper-
ties [36, 3], non-interference [4, 6], liveness properties [8],
or key and message secrecy [7]. One can then make use of
the composability guarantees simulatable security gives.
As just hinted, all ﬂavours of simulatable security give
certain composition guarantees. Namely, all ﬂavours guar-
antee that a constant number of secure protocols can be
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:50:34 UTC from IEEE Xplore.  Restrictions apply. 
composed in an arbitrary, concurrent manner without loss
of security. Due to these composability guarantees, simulat-
able security could be used for deﬁning and analysing pro-
tocol constructions for a very large class of protocol tasks in
a modular way. Examples include a computationally sound
analysis of the Needham-Schroeder-Lowe protocol [5], an
electronic payment system [2], and a cryptographic con-
struction for realizing a large class of protocol tasks [21].
However, in some scenarios, it might be desirable to
compose more protocols at once. In fact, many commonly
deployed cryptographic protocol constructions use a poly-
nomial number of instances of primitives (i.e., subproto-
cols), e.g. [41, 26, 22]. The analysis of such constructions
is generally reduced to analysing only one instance of each
used primitive type at once. For deriving security of the
whole construction, of course secure composability of a
polynomial number of instances of each primitive type is
needed.
So in this contribution, we investigate how simulatable
security behaves under composition of a polynomial num-
ber of secure protocols. The ﬂavours “universal simulata-
bility” and “black-box simulatability” of simulatable secu-
rity are already known to allow for this type of composition
(see [15, 10]). However, whether this also holds for the
other main ﬂavour “standard simulatability”, which is the
default security notion in the Reactive Simulatability frame-
work [37, 11], was explicitly posted as an open question
in [10].
We show that computational standard simulatability (in
which adversaries are computationally bounded) does not
allow for secure composition of a polynomial number of
protocols. We also show that statistical and perfect standard
simulatability (which capture information-theoretic security
and in which adversaries are unbounded) do allow for this
type of composition, and we give a general composition the-
orem for that case. Below, we give a more detailed expla-
nation.
Note that although this shows that the default notion of
security in the Reactive Simulatability framework does not
imply polynomially bounded concurrent composability, this
has no impact on existing security proofs in that framework.
These all show black-box simulatability, which is known to
imply polynomially bounded concurrent composability.
Related Work/Technical Overview.
The concept of
simulatability has a long history (see, e.g., [40, 27, 26, 12,
35, 13, 36, 14, 37, 15, 11, 18]). In recent years, in partic-
ular the simulatability frameworks of Reactive Simulatabil-
ity [37, 11] and Universal Composability [15, 18] proved
useful for analysing security properties of protocols in dis-
tributed systems.
In both frameworks, a protocol ˆM1 is considered as se-
cure as another protocol ˆM2 (usually an idealisation of the
respective protocol task), if ˆM1 is indistinguishable from
ˆM2 in every protocol context. This should hold also in the
presence of attacks, i.e., we should have that every attack on
ˆM1 can be simulated by an attack on ˆM2. (So every weak-
ness of ˆM1 must be already present in the ideal speciﬁcation
ˆM2.)
A little more formally, this means that for every adver-
sary A attacking ˆM1, there is an adversary S (usually re-
ferred to as the simulator) that attacks ˆM2, such that from
an outside view, both attacks and protocols “look the same.”
For capturing what “looking the same” means, a designated
entity called the honest user H is run with protocol ˆM1 (to-
gether with adversary A) and protocol ˆM2 (with simulator
S). The honest user H represents a protocol context and
may interact with protocol participants and even with the
adversary. For security, every possible H must experience
indistinguishable views with ˆM1 and with ˆM2.
One might now choose S in dependence of H; this leads
to the standard simulatability deﬁnition, which is the de-
fault in the Reactive Simulatability framework. Alterna-
tively, the user H may be allowed to depend on the respec-
tive simulator S; this is called universal simulatability and
is the default security notion in the Universal Composability
model.
Both simulatability variants allow for some form of se-
cure composition of protocols. We can distinguish two im-
portant types of composition. First, simple composability
guarantees that if a protocol ˆM1 is as secure as another pro-
tocol ˆM2, then a protocol ˆN ˆM1 that uses a single instance
of ˆM1 is as secure as the protocol ˆN ˆM2 which uses ˆM2
instead. Further, we have polynomially bounded concur-
rent composability which guarantees for every polynomial
p, that ˆM p
2 denote
the concurrent execution of p instances of ˆM1 and ˆM2, re-
spectively. One can show that if simple and polynomially
bounded concurrent composability hold, one can securely
substitute a polynomial number of subprotocols at a time in
a larger protocol.
1 is as secure as ˆM p
2 , where ˆM p
1 and ˆM p
It is known that standard simulatability implies simple
composability, cf. [36, 37]. Also known is that universal and
black-box simulatability additionally allow polynomially
bounded concurrent composability, see [15, 10]. Further-
more, [32] investigated which further relationships between
the notions of standard/universal simulatability and simple
composability/polynomially bounded concurrent compos-
ability hold and found the interesting fact that simple com-
posability and standard simulatability are equivalent. How-
ever, the following was given as open questions in [32]:
Does standard simulatability imply polynomially bounded
concurrent composability, and do simple and polynomially
bounded concurrent composability together already imply
universal simulatability? Or do even standard and universal
simulatability coincide?
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:50:34 UTC from IEEE Xplore.  Restrictions apply. 
For a modiﬁed deﬁnition of standard simulatability, this
question was answered in [17, 19]. In this deﬁnition, the
runtime of the honest user H may depend on the length of
its non-uniform input, which again may depend on the sim-
ulator. They showed that using this modiﬁcation, standard,
universal, and black-box simulatability all coincide. How-
ever, this modiﬁcation of standard simulatability breaks the
proof of [32] that standard simulatability and simple com-
posability coincide. So even the modiﬁed deﬁnition of stan-
dard simulatability left open whether simple composability
implies universal simulatability.
Further progress was then made by [29] who showed
that computational standard simulatability (in the original
formulation) does not imply computational universal sim-
ulatability. However, their separating counterexample is
not only secure w.r.t. standard simulatability, but also com-
poses concurrently even a polynomial number of times, so
simple and polynomially bounded concurrent composabil-
ity together do not already imply universal simulatability.
Also, [29] show that their result depends on the computa-
tional model: while they give separating examples in case
of computational and statistical security, they show that
in case of perfect security, standard/universal simulatabil-
ity (and thus also simple/polynomially bounded concurrent
composability) coincide. However, the open question of
[32] whether standard simulatability is sufﬁcient for poly-
nomially bounded concurrent composability was still left
unanswered.
A note concerning the nomenclature: Universal simu-
latability is also often called UC security [15], standard sim-
ulatability is called specialised-simulator UC in [32], the
honest user is also known as the environment [15], sim-
ple composability as 1-bounded general composability [32],
and simple and polynomially bounded concurrent compos-
ability together are also called polynomially-bounded gen-
eral composability [32].
Our Work.
In this work, we answer the remaining open
questions and provide the missing implications and sepa-
rations among standard/universal simulatability and the dif-
ferent notions of composability. More speciﬁcally, we show
that computational standard simulatability does not imply
polynomially bounded concurrent composability. Further,
we show that in contrast, statistical standard simulatability
does imply polynomially bounded concurrent composabil-
ity. An overview over the implications and separations is
given in Figure 1.
Our results hold both in the Reactive Simulatability and
the Universal Composability framework (as in [15]). The
main difference between these security notions is that Reac-
tive Simulatability considers uniform machines, while with
Universal Composability, the honest user has access to a
non-uniform input that is chosen after honest user and sim-
ulator. We prove the results using the Reactive Simulatabil-
ity formalism, but additionally cover the case that the hon-
est user gets such a non-uniform input, so that it is easy to
reformulate the proof using Universal Composability.
Finally, we discuss the impact of recent developments
in simulatability-based security deﬁnitions on our work.
Namely, in [19] and in [28], (different) alternative deﬁ-
nitions of polynomial-time adversarial entities were intro-
duced. We point out why our separating example does not
work with these deﬁnitions.
Organization. After
recalling the Reactive Security
framework in Section 2, we show in Section 3 that computa-
tional standard simulatability does not imply polynomially
bounded concurrent composability. In Section 4, we prove
polynomially bounded concurrent composability for the sta-
tistical and perfect case. Section 5 concludes this work.
2 Reactive Simulatability
Here we review the notion of Reactive Simulatability
(RS). This introduction only sketches the deﬁnitions, and
the reader is encouraged to read [11] for more detailed in-
formation and formal deﬁnitions.
Reactive simulatability (in the “standard” ﬂavour) is a
deﬁnition of security which deﬁnes a protocol ˆM1 (the real
protocol) to be as secure as another protocol ˆM2 (the ideal
protocol, the trusted host, the ideal functionality), iff the
following holds: for any adversary A (also called the real
adversary), and any honest user H (that represents a pos-
sible protocol environment), there is an adversary S (also
called simulator or ideal adversary), s.t. the view of H is
indistinguishable in the following two scenarios:
• The honest user H runs together with the real adversary
A and the real protocol ˆM1
• The honest user H runs together with the simulator S
and the ideal protocol ˆM2.
Note that there is a security parameter k common to all
machines, so that the notion of indistinguishability makes
sense.
This deﬁnition allows to specify some trusted host—
which by deﬁnition is a secure formalisation of some cryp-
tographic task—as the ideal protocol, and then to consider
the question whether a real protocol is as secure as the
trusted host (and thus also a secure implementation of that
task).
In order to understand the above deﬁnitions in more de-
tail, we have to specify what is meant by machines “running
together”. Consider a set of machines that may send mes-