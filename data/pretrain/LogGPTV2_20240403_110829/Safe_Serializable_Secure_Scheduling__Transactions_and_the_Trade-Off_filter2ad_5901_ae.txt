conﬂicting events have the same label, these aborts cannot
affect events on unpermitted locations.
When a stage’s 2PC completes, the events in the stage are
scheduled, and considered precommitted.
• Each transaction precommits its stages as they occur. To
avoid deadlock, we must ensure that whenever two transac-
tions feature stages with equal conﬂict labels, they precom-
mit those stages in the same order. Therefore, the staged
commit protocol assumes an ordering of conﬂict labels. This
can be any arbitrary ordering, so long as (1) it totally orders
the conﬂict labels appearing in each transaction, and (2) all
transactions agree on the ordering.
• When all stages are precommitted, all events in the trans-
action can be committed. Commit messages to this effect
are sent between locations, backwards through the stages.
Whenever an event in one stage triggers an event in the next,
the locations involved can be sure a commit message will take
the reverse path. The only information conveyed is timing.
Because events in a precommitted stage cannot be un-scheduled
or “rolled back”, a participant that is involved only in an earlier
stage is prevented from gleaning any information about later stages.
The participant will only learn, eventually, that it can commit.
Patsy’s transaction in Fig. 4c has at least two stages when the
patient has HIV:
1. Patsy begins the transaction (Patsy start), and reads the ad-
dress (Read Address). This stage will be atomically precom-
mitted, and this precommit process will determine the rela-
tive ordering of Patsy’s transaction and Mallory’s, indepen-
dent of more secret events.
2. Patsy ﬁnds that the patient has HIV (Read HIV), and prints
the patient’s address (Print address).
THEOREM 4
(SECURITY OF SC). Any set of transactions sat-
isfying relaxed monotonicity are serialized by SC securely without
deadlock.
PROOF SKETCH. Security. SC preserves relaxed observational
determinism. Intuitively, any information ﬂows that it adds are al-
ready included in the transaction.
SC adds no communication affecting security:
• Communication within each stage is strictly about events that
all participants can both observe.
• For each pair of consecutive stages, at least one participant
from the ﬁrst stage can notify a participant in the second
stage securely, when it is time for the second stage to be-
gin. Relaxed monotonicity ensures the second stage contains
an event that happens after an event in the ﬁrst stage, repre-
senting a line of communication.
• Communication for commits can safely proceed in reverse
order of stages. Each participant knows when it precommits
exactly which commit messages it will receive.
Serializability. Our proof is built around the following lemma:
any execution in which an event in a transaction is committed fea-
tures a system state in which all events in the transaction are pre-
committed. This lemma is used to show that SC guarantees a strict
partial order of transactions, and therefore serializability.
Deadlock Freedom. Deadlock cannot form within any stage,
since stages use 2PC, which preserves deadlock freedom. The
stages themselves, like locks in our proof of Thm. 2, are precom-
mitted in a consistent order, guaranteeing deadlock freedom.
The Importance of Optimism
SC speciﬁes only a commit protocol. Actual computation (which
generates the set of events) for each transaction can be done in
advance, optimistically. If one stage precommits and the next is
blocked by a conﬂicting transaction, optimistically precomputed
events would have to be rolled back. However, no precommit-
ted event need be rolled back. In fact, it would be insecure to do
so. Thus SC allows for partially optimistic transactions with partial
rollback.
Our model requires only that a transaction be a set of events. In
many cases, however, it is not possible to know which transaction
will run when a start event is scheduled. For example, a transaction
might read a customer’s banking information from a database and
contact the appropriate bank.
It would not be possible to know
which bank should have an event in the transaction beforehand. If
a system attempted to read the banking information prior to the
transaction, then serializability is lost: the customer might change
banks in between the read and the transaction, and so one might
contact the wrong bank.
Optimism solves this problem: events are precomputed, and when
an entire stage is completed, that stage’s 2PC begins. This means
that optimism is not just an optimization; it is required for secure
scheduling in cases where the transactions’ events are not known
in advance.
7.
IMPLEMENTATION
We extended the Fabric language and compiler to check that
transactions can be securely scheduled, and we extended the Fabric
runtime system to use SC. Fabric and IFDB [33] are the two open-
source systems we are aware of that support distributed transac-
tions on persistent, labeled data with information ﬂow control. Of
these, we chose Fabric for its static reasoning capabilities. IFDB
checks labels entirely dynamically, so it cannot tell if a transaction
is schedulable until after it has begun.
7.1 The Fabric Language
The Fabric language is designed for writing distributed programs
using atomic transactions that operate on persistent, Java-like ob-
jects [24]. It has types that label each object ﬁeld with information
ﬂow policies for conﬁdentiality and integrity. The compiler uses
these labels to check that Fabric programs enforce a noninterfer-
ence property. However, like all modern systems built using 2PC,
Fabric does not require that transactions be securely scheduled ac-
cording to the policies in the program. Consequently, until now,
abort channels have existed in Fabric.
PC Possible conﬂictors
String{(cid:96)} p = post.read(); ⊥ {Alice, Bob, Carol}
⊥
Comments{(cid:96)(cid:48)} c;
if (p.contains("fizz")) { ⊥
(cid:96)
if (p.contains("buzz")) { ⊥
(cid:96)
{Alice, Carol}
{Alice, Carol}
c.write("buzz");
c.write("fizz");
-
-
-
1 atomic {
2
3
4
5
6
7
8
9 }
}
Figure 10: Carol’s program in our Blog example: Carol reads a
post with label (cid:96), and depending on what she reads, writes a com-
ment with label (cid:96)(cid:48). Label (cid:96) permits Alice, Bob, and Carol to read
the post, while (cid:96)(cid:48) keeps the Comments more private and allows only
Alice and Carol to view or edit.
We leverage these security labels and extend the compiler to ad-
ditionally check that transactions in a Fabric program are mono-
tonic (§ 5). This implementation prevents conﬁdentiality breaches
via abort channels. Preventing integrity breaches would require
further dynamic checks, which we leave to future work.
7.2 Checking Monotonicity
Our modiﬁcation to the Fabric compiler enforces relaxed mono-
tonicity (Def. 6). Our evaluation (§ 8) shows that enforcing this
condition does not exclude realistic and desirable programs. Our
changes to the Fabric compiler and related ﬁles include 4.1k lines
of code (out of roughly 59k lines).
7.2.1 Events and Conﬂict Labels in Fabric
The events in the system model (§ 3) are represented in our im-
plementation by read and writes on ﬁelds of persistent Fabric ob-
jects. The label of the ﬁeld being read or written corresponds to the
event labels in our model.
SC (§6) divides events into stages based on conﬂict labels (cl).
In our implementation, we deﬁne the cl of an event e to correspond
to the set of principals authorized to read or write the ﬁeld that is
being accessed by e.
If e is a write event, this set contains ex-
actly those principals that can perform a conﬂicting operation (and
thereby receive an abort); if e is a read event, the set is a conserva-
tive over-approximation, since only the writers can conﬂict.
Fig. 10 presents a program in which Carol schedules two events
within a single transaction. First, she reads a blog post with security
label (cid:96). Second, she writes a comment (whose content depends
on that of the post) with label (cid:96)(cid:48). Since (cid:96) permits Alice, Bob, or
Carol to read the post, the cl of the ﬁrst event includes all three
principals. However, only Alice and Carol can read or write the
comment, so when Carol goes to write it, only Alice or another
transaction acting on behalf of Carol could cause conﬂicts. The cl
of the write therefore includes only Alice and Carol.
7.2.2 Program Counter Label
The program counter label (pc) [13] labels the program context.
For any given point in the code, the pc represents the join (least
upper bound) of the labels of events that determine whether or not
execution reaches that point in the code. These events include those
occurring in if-statement and loop conditionals. For instance, in
Fig. 10, whether line 5 runs depends on the value of p, which has
label (cid:96). Therefore, the fact that line 5 is executing is as secret as p,
and the pc at line 5 is (cid:96).
SC requires that when events with the same cl are aborted, those
aborts can securely ﬂow to the same set of locations. When an
event causes an abort, the resulting abort messages carry informa-
tion about the context in which the event occurs. Therefore, we
enforce the requirement by introducing a constraint on the program
context in which events may occur: the pc must ﬂow to the princi-
pals in the conﬂict label.
pc (cid:118) cl
(1)
Eliding the details of how Fabric’s labels are structured, in Fig. 10,
⊥ ﬂows to everything, and (cid:96), the label of the blog post, does ﬂow
to the conﬂict label, indicating that both Alice and Carol can cause
a conﬂict. Therefore, Eqn. (1) holds on lines 2, 5, and 7.
7.2.3 Ordering Stages
Each stage consists of operations with the same cl. To ensure
all transactions precommit conﬂicting stages in the same order, we
adopt a universal stage ordering:
principals(cli) (cid:41) principals(cli+1)
(2)
The set of principals in each stage must be a strict superset of the
principals in the next one. This ensures that unrestricted infor-
mation can be read in one stage and sensitive information can be
modiﬁed in a later stage in the same transaction. In the hospital
example (Fig. 4), Read HIV has a conﬂict label that only includes
trusted personnel, while Read address has a conﬂict label that in-
cludes more hospital staff. As a result, our implementation requires
that Read address be staged before Read HIV in Patsy’s transaction.
In Fig. 10, our stage ordering means that the read on line 2, with
a cl of {Alice, Bob, Carol} belongs in an earlier stage than the
write, which features a cl of only {Alice, Carol}.
7.2.4 Method Annotations
To ensure modular program analysis and compilation, each method
is analyzed independently. Fabric is an object-oriented language
with dynamic dispatch, so it is not always possible to know in
advance which method implementation a program will execute.
Therefore, the exact conﬂict labels for events within a method call
are not known at compile time. In order to ensure each atomic pro-
gram can divide into monotonic stages, we annotate each method
with bounds on the conﬂict labels of operations within the method.
These annotations are the security analogue of argument and return
types for methods.
7.3 Implementing SC
We extended the Fabric runtime system to use SC instead of tra-
ditional 2PC, modifying 2.4k lines of code out of a total of 24k lines
of code in the original implementation. Speciﬁcally, we changed
Fabric’s 2PC-based transaction protocol so that it leaves each stage
prepared until all stages are ready, and then commits.
Since Fabric labels can be dynamic, the compiler statically deter-
mines potential stagepoints—points in the program that may begin
a new stage—along with the conﬂict labels of the stages immedi-
ately surrounding the potential stagepoint. If the compiler cannot
statically determine whether the conﬂict labels before and after a
stagepoint will be different, it inserts a dynamic equivalence check
for the two labels. At run time, if the two labels are not equivalent,
then a stage is ending, and the system precommits all operations
made thus far. To precommit a stage, we run the ﬁrst (“prepare”)
phase of 2PC. If there is an abort, the stage is re-executed until it
eventually precommits.
In Fig. 10, there is a potential stagepoint before lines 4 and 6,
where the next operation in each case will not include Bob as a
possible conﬂictor. The conﬂict labels surrounding the potential
stagepoint are {Alice, Bob, Carol} (from reading the post on line
2) and {Alice, Carol} (from writing the comment on either line
4 or 6). If another transaction caused the ﬁrst stage to abort, then
Data item
Readers
Gloria’s account balance Bank, Gloria
Item price
Inventory
(public)
Outel
Writers
Bank
Outel
Outel
Figure 11: Example policies for the Rainforest application.
Carol’s code would rerun up to line 4 or 6 until it could precommit,
and then the remainder of the transaction would run.
8. EVALUATION
To evaluate our implementation, we built three example Fabric
applications, and tested them using our modiﬁed Fabric compiler:
• an implementation of the hospital example from §2;
• a primitive blog application (from which Fig. 10 was taken),
in which participants write and comment on posts with pri-
vacy policies; and
• an implementation of the Rainforest example from §2.
8.1 Hospital
We implemented the programs described in our hospital example
(Fig. 3). In the implementation, Patsy’s code additionally appends
the addresses of HIV-positive patients to a secure log. In a third
program, another trusted participant reads the secure log.
With our changes, the compiler correctly rejects Patsy’s code.
We amended her code to reﬂect Fig. 4. Of the 350 lines of code,
we had to change a total of 113 to satisfy relaxed monotonicity and
compile. Of these 113 lines, 23 were additional method annotations
and the remaining 90 were the result of refactoring the transaction
that retrieves the addresses of HIV-positive patients. SC scheduled
the transactions without leaking information. The patient’s HIV
status made Mallory neither more nor less likely to receive aborts.
8.2 Blog
In our primitive blog application, a store holds API objects, each
of which features blog posts (represented as strings) with some se-
curity label, and comments with another security label. These la-