`StatefulSet`和`DaemonSet`的更新几乎是一样的——它们在更新过程中不会创建冗余的 Pod ，它们的更新策略也是类似的。在`7-1_updates/ex-statefulset.yml`也有一个模板文件可以练习。更新策略的选项设置在路径`.spec.` `updateStrategy` `.type`:
*   `OnDelete` : Pods 只有手动删除后才会更新。
*   `rollingUpdate`:像每一次滚动更新一样，Kubernetes 以可控的方式删除和创建 PODS。但是 Kubernetes 知道`StatefulSet`中的顺序很重要，所以它会以相反的顺序替换 PODS。假设我们一个`StatefulSet`有三个 Pod ，分别是`my-ss-0`、`my-ss-1`、`my-ss-2`。更新顺序从`my-ss-2`到`my-ss-0`开始。删除过程不尊重 pod 管理策略，也就是说，即使我们将 pod 管理策略设置为`Parallel`，更新仍然会一个接一个地进行。
类型`rollingUpdate`的唯一参数是分区(`.spec.updateStrategy.rollingUpdate.partition`)。如果指定了它，任何序号小于分区号的 pod 都会保持当前版本，不会被更新。例如，如果我们在一个有 3 个 Pod 的`StatefulSet`中将其设置为 1，那么在首次展示后只有 Pod -1 和 Pod -2 会被更新。这个参数允许我们在一定程度上控制进度，对于等待数据同步、用金丝雀测试版本或者我们只想进行更新等场景来说，它特别方便。
Pod management policies and rolling updates are two features implemented in Kubernetes 1.7 and later.
# 建立输送管道
为容器化应用实现连续交付管道非常简单。让我们记住到目前为止我们对 Docker 和 Kubernetes 的了解，并将它们组织到 CD 管道中。假设我们已经完成了代码、Dockerfile 和相应的 Kubernetes 模板。要将它们部署到我们的集群，我们需要完成以下步骤:
1.  `docker build`:产生一个可执行的不可变工件。
2.  `docker run`:通过一些简单的测试来验证构建是否有效。
3.  `docker tag`:如果好的话，用有意义的版本标记构建。
4.  `docker push`:将构建移动到工件仓库进行分发。
5.  `kubectl apply`:将构建部署到所需的环境中。
6.  `kubectl rollout status`:跟踪部署任务的进度。
这就是一个简单但可行的交付管道的全部内容。
# 选择工具
为了使管道持续构建，我们至少需要三种工具，即版本控制系统、构建服务器和用于存储容器工件的存储库。在本节中，我们将基于我们在前面章节中介绍的 SaaS 工具设置一个参考光盘管道。分别是*GitHub*([https://github.com](https://github.com))*Travis CI*([https://Travis-ci.org](https://travis-ci.org))和*Docker Hub*([https://hub.docker.com](https://hub.docker.com))，都是免费开源项目。我们在这里使用的每一种工具都有许多替代方案，比如 VCS 的 GitLab，或者 CI 的 Jenkins。下图是我们基于前面三项服务的光盘流程:
>![](img/00107.jpeg)
工作流从将代码提交到 GitHub 上的存储库中开始，提交将调用 Travis CI 上的构建作业。我们的 Docker 形象就是在这个阶段建立起来的。同时，我们经常在配置项服务器上运行不同级别的测试，以确保构建的质量是可靠的。此外，由于通过 Docker Compose 或 Kubernetes 运行应用栈比以往任何时候都更容易，我们能够在构建作业中运行涉及许多组件的测试。之后，验证过的映像被标记上标识符，并被推送到公共 Docker 注册表服务 Docker Hub。
我们的管道中没有专用于部署任务的块。相反，我们依赖特拉维斯 CI 来部署我们的构建。事实上，部署任务只是在推送映像后，在某些构建上应用 Kubernetes 模板。最后，在 Kubernetes 的滚动更新过程结束后，交付就完成了。
# 步骤已解释
我们的例子`my-app`是一个不断回应`OK`的 web 服务，部署的代码和文件都提交到我们在 GitHub 的存储库中:([https://github.com/DevOps-with-Kubernetes/my-app](https://github.com/DevOps-with-Kubernetes/my-app))。
在 Travis CI 上配置我们的构建之前，让我们先在 Docker Hub 上创建一个映像存储库，以备后用。登录 Docker Hub 后，按下右上角巨大的“创建存储库”，然后按照屏幕上的步骤创建一个。推拉`my-app`的映像注册在`devopswithkubernetes/my-app`([https://hub.docker.com/r/devopswithkubernetes/my-app/](https://hub.docker.com/r/devopswithkubernetes/my-app/))。
将 Travis CI 与 GitHub 存储库连接起来非常简单，我们只需要授权 Travis CI 访问我们的 GitHub 存储库，并使 Travis CI 能够在配置文件页面([https://travis-ci.org/profile](https://travis-ci.org/profile))构建存储库。
Travis CI 中作业的定义配置在同一个存储库下的文件`.travis.yml`中。这是一个 YAML 格式的模板，由 shell 脚本块组成，告诉 Travis CI 在构建期间应该做什么。我们的`.travis.yml`([https://github . com/DevOps-wit-Kubernetes/my-app/blob/master/. Travis . yml](https://github.com/DevOps-with-Kubernetes/my-app/blob/master/.travis.yml))的区块说明如下:
# 包封/包围（动词 envelop 的简写）
本节定义了在整个构建过程中可见的环境变量:
```
DOCKER_REPO=devopswithkubernetes/my-app     BUILD_IMAGE_PATH=${DOCKER_REPO}:b${TRAVIS_BUILD_NUMBER}
RELEASE_IMAGE_PATH=${DOCKER_REPO}:${TRAVIS_TAG}
RELEASE_TARGET_NAMESPACE=default  
```
在这里，我们设置了一些可能会被更改的变量，如名称空间和构建映像的 docker 注册表路径。此外，还有以环境变量形式从 Travis CI 传递的关于构建的元数据，它们记录在这里:[https://docs . Travis-CI . com/user/Environment-Variables/# Default-Environment-Variables](https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables)。例如，`TRAVIS_BUILD_NUMBER`代表当前构建的编号，我们用它作为一个标识符来区分我们跨构建的映像。
环境变量的另一个来源是在 Travis CI 上手动配置的。因为在那里配置的变量会被公开隐藏，所以我们在那里存储了一些敏感数据，比如 Docker Hub 和 Kubernetes 的凭证:
![](img/00108.jpeg)
每个 CI 工具都有自己处理机密的最佳实践。例如，一些配置项工具也允许我们将变量保存在配置项服务器中，但它们仍然会打印在构建日志中，因此在这种情况下，我们不太可能将机密保存在配置项服务器中。
# 脚本
这一部分是我们运行构建和测试的地方:
```
docker build -t my-app .
docker run --rm --name app -dp 5000:5000 my-app
sleep 10
CODE=$(curl -IXGET -so /dev/null -w "%{http_code}" localhost:5000)
'[ ${CODE} -eq 200 ] && echo "Image is OK"'
docker stop app  
```
当我们在 Docker 上时，构建只是一行脚本。我们的测试也很简单——用构建的映像启动一个容器，并对它提出一些请求，以确定它的正确性和完整性。当然，我们可以做任何事情，比如添加单元测试，进行多阶段构建，或者运行自动化集成测试，以便在这个阶段更好地生成工件。
# 成功后
只有在前一阶段结束时没有任何错误，才会执行该块。一旦它来到这里，我们就好发布我们的形象:
```
docker login -u ${CI_ENV_REGISTRY_USER} -p "${CI_ENV_REGISTRY_PASS}"
docker tag my-app ${BUILD_IMAGE_PATH}
docker push ${BUILD_IMAGE_PATH}
if [[ ${TRAVIS_TAG} =~ ^rel.*$ ]]; then
 docker tag my-app ${RELEASE_IMAGE_PATH}
 docker push ${RELEASE_IMAGE_PATH}
fi
```
我们的映像标签通常使用 Travis CI 上的内部版本号，但是使用提交的散列或版本号来标记映像也很常见。但是，强烈建议不要使用默认标签`latest`，因为这可能会导致版本混乱，例如运行两个不同的映像，但它们具有相同的名称。最后一个条件块是在特定的分支标签上发布映像，实际上并不需要，因为我们只想在单独的轨道上继续构建和发布。在推送映像之前，请记住向 Docker Hub 进行身份验证。
Kubernetes decides whether the image should be pulled by the `imagePullPolicy`: [https://kubernetes.io/docs/concepts/containeimg/#updating-images](https://kubernetes.io/docs/concepts/containeimg/#updating-images).
因为我们只在发布时将项目部署到实际的机器上，所以构建可能会在那个时候停止并返回。让我们看看这个构建的日志:[https://Travis-ci.org/DevOps-with-Kubernetes/my-app/builds/268053332](https://travis-ci.org/DevOps-with-Kubernetes/my-app/builds/268053332)。该日志保留了 Travis CI 执行的脚本和脚本每一行的输出:
![](img/00109.jpeg)
正如我们所看到的，我们的构建是成功的，因此映像在这里发布:
[https://hub . docker . com/r/devpswithinhabits/my-app/tags/](https://hub.docker.com/r/devopswithkubernetes/my-app/tags/)。
构建引用标记`b1`，我们现在可以在 CI 服务器之外运行它:
```
$ docker run --name test -dp 5000:5000 devopswithkubernetes/my-app:b1
72f0ef501dc4c86786a81363e278973295a1f67555eeba102a8d25e488831813
$ curl localhost:5000
OK
```
# 部署
尽管我们可以实现端到端的全自动管道，但由于业务原因，我们经常会遇到阻碍部署构建的情况。因此，我们告诉 Travis CI 仅在发布新版本时运行部署脚本。
要从 Travis CI 操作 Kubernetes 集群中的资源，我们需要授予 Travis CI 足够的权限。我们的示例使用 RBAC 模式下的服务帐户`cd-agent`代表我们创建和更新部署。后面的章节会有更多关于 RBAC 的描述。创建帐户和权限的模板位于:[https://github . com/DevOps-wit-Kubernetes/examples/tree/master/chapter 7/7-2 _ service-account-for-ci-tool](https://github.com/DevOps-with-Kubernetes/examples/tree/master/chapter7/7-2_service-account-for-ci-tool)。该帐户在名称空间`cd`下创建，并被授权跨名称空间创建和修改大多数类型的资源。
Here we use a service account that is able to read and modify most resources across namespaces, including secrets of the whole cluster. Due to security concerns, its always encouraged to restrict permissions of a service account to resources the account actually used, or it could be a potential vulnerability.
因为 Travis CI 位于我们的集群之外，所以我们必须从 Kubernetes 导出凭据，以便我们可以配置 CI 作业来使用它们。在这里，我们提供了一个简单的脚本来帮助导出这些凭据。脚本位于:[https://github.com/DevOps-with-·Kubernetes/示例/blob/master/chapter 7/get-sa-token . sh](https://github.com/DevOps-with-Kubernetes/examples/blob/master/chapter7/get-sa-token.sh)。
```
$ ./get-sa-token.sh --namespace cd --account cd-agent
API endpoint:
https://35.184.53.170
ca.crt and sa.token exported
$ cat ca.crt | base64
LS0tLS1C...
$ cat sa.token
eyJhbGci...
```
导出的 API 端点、`ca.crt`、`sa.token`对应的变量分别为`CI_ENV_K8S_MASTER`、`CI_ENV_K8S_CA`、`CI_ENV_K8S_SA_TOKEN`。客户端证书(`ca.crt`)被编码为 base64 以便移植，它将在我们的部署脚本中被解码。
部署脚本([https://github.com/DevOps-with-Kubernetes/my- app/blob/master/deployment/deploy . sh](https://github.com/DevOps-with-Kubernetes/my-app/blob/master/deployment/deploy.sh))首先下载`kubectl`，并对`kubectl`进行相应的环境变量配置。然后，在部署模板中填充当前版本的映像路径，并应用模板。最后，在部署完成后，我们的部署就完成了。
让我们看看整个流程的运行情况。
一旦我们在 GitHub 发布了一个版本:
[https://github . com/devps-with-kublets/my-app/releases/tag/rel . 0.3](https://github.com/DevOps-with-Kubernetes/my-app/releases/tag/rel.0.3)
![](img/00110.jpeg)
特拉维斯 CI 在那之后开始建立我们的工作:
![](img/00111.jpeg)
一段时间后，构建的映像被推送到 Docker Hub 上:
![](img/00112.jpeg)
此时，Travis CI 应该开始运行部署任务，让我们查看构建日志以了解我们部署的状态:
[https://Travis-ci . org/devo PS-wit-Kubernetes/my-app/builds/268107714](https://travis-ci.org/DevOps-with-Kubernetes/my-app/builds/268107714)
![](img/00113.jpeg)
可以看到，我们的应用已经成功铺开，应该开始用`OK`欢迎大家了:
```
$ kubectl get deployment
NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
my-app    3         3         3            3           30s