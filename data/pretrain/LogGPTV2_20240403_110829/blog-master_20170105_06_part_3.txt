        0.066413        begin;  
        0.163332        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.159310        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.086508        end;  
        0.063532        begin;  
        0.163740        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.159271        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.086722        rollback;  
        0.177647        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
        0.177949        insert into log (c1,c2,c3,c4) values(round(random()*10),1,2,3);  
```  
压力测试的同时执行analyze_log. 确保pgbench同时执行analyze_log.  
```  
pg92@digoal-PowerEdge-R610-> cat analyze.sh   
#!/bin/bash  
for ((i=0;i493263112 and xid) union all select unnest()).  
 analyze_log   
-------------  
(1 row)  
Time: 1.169 ms  
digoal=# select * from log_read;  
 tablename |    xid    | xip |          mod_time            
-----------+-----------+-----+----------------------------  
 log       | 493263112 |     | 2013-04-22 15:51:00.450235  
(1 row)  
Time: 0.566 ms  
digoal=# select * from log_read_func;  
 tablename |       func       | init_xid  |       init_xip        | isinit | info   
-----------+------------------+-----------+-----------------------+--------+------  
 log       | stat_log_c1      |         0 |                       | f      |   
 log       | stat_log_c1_week | 491803059 | {492492724,492492725} | f      |   
(2 rows)  
Time: 0.349 ms  
```  
数据校验  
log_c1_cnt_day (取>0 or 包含init_xip)  
```  
digoal=# select c1,count(*),to_char(crt_time,'yyyymmdd') from log where xid>0 group by c1,to_char(crt_time,'yyyymmdd') order by c1;  
 c1 | count  | to_char    
----+--------+----------  
  0 | 278990 | 20130422  
  1 | 559150 | 20130422  
  2 | 557552 | 20130422  
  3 | 555797 | 20130422  
  4 | 557475 | 20130422  
  5 | 558780 | 20130422  
  6 | 556803 | 20130422  
  7 | 557337 | 20130422  
  8 | 557065 | 20130422  
  9 | 557328 | 20130422  
 10 | 277775 | 20130422  
(11 rows)  
Time: 15838.259 ms  
digoal=# select * from log_c1_cnt_day where cnt<>0 order by c1;  
 c1 |  cnt   | stat_time   
----+--------+-----------  
  0 | 278990 | 20130422  
  1 | 559150 | 20130422  
  2 | 557552 | 20130422  
  3 | 555797 | 20130422  
  4 | 557475 | 20130422  
  5 | 558780 | 20130422  
  6 | 556803 | 20130422  
  7 | 557337 | 20130422  
  8 | 557065 | 20130422  
  9 | 557328 | 20130422  
 10 | 277775 | 20130422  
(11 rows)  
Time: 0.668 ms  
```  
log_c1_cnt_week (取>491803059 or 包含init_xip)  
```  
digoal=# select c1,count(*),to_char(date(crt_time)-(EXTRACT(ISODOW FROM date(crt_time)))::int+1,'yyyymmdd') from log where xid>491803059 or xid in (492492724,492492725) group by c1,to_char(date(crt_time)-(EXTRACT(ISODOW FROM date(crt_time)))::int+1,'yyyymmdd') order by c1;  
 c1 | count  | to_char    
----+--------+----------  
  0 |  72929 | 20130422  
  1 | 146351 | 20130422  
  2 | 145705 | 20130422  
  3 | 146001 | 20130422  
  4 | 145831 | 20130422  
  5 | 146610 | 20130422  
  6 | 145946 | 20130422  
  7 | 146209 | 20130422  
  8 | 145556 | 20130422  
  9 | 146188 | 20130422  
 10 |  72722 | 20130422  
(11 rows)  
Time: 5415.514 ms  
digoal=# select * from log_c1_cnt_week where cnt<>0 order by c1;  
 c1 |  cnt   | stat_time   
----+--------+-----------  
  0 |  72929 | 20130422  
  1 | 146351 | 20130422  
  2 | 145705 | 20130422  
  3 | 146001 | 20130422  
  4 | 145831 | 20130422  
  5 | 146610 | 20130422  
  6 | 145946 | 20130422  
  7 | 146209 | 20130422  
  8 | 145556 | 20130422  
  9 | 146188 | 20130422  
 10 |  72722 | 20130422  
(11 rows)  
Time: 0.658 ms  
```  
历史数据分析  
```  
digoal=# select * from log_read_func;  
 tablename |       func       | init_xid  |       init_xip        | isinit | info   
-----------+------------------+-----------+-----------------------+--------+------  
 log       | stat_log_c1      |         0 |                       | f      |   
 log       | stat_log_c1_week | 491803059 | {492492724,492492725} | f      |   
(2 rows)  
Time: 0.349 ms  
```  
stat_log_c1 历史数据分析条件(xid<=0)  
stat_log_c1_week 历史数据分析条件(xid<=491803059 and xid not in (492492724,492492725))  
## 特别注意      
由于本例采用了PostgreSQL系统xid来解决气泡问题, 所以特别需要注意以下问题 :       
xid的问题, 当使用pg_resetxlog修改xid时(如果xid改小)将打破使用该方法的统计. 所以安全的做法是xid改大可以, 改小不行.      
当使用pg_dump导出明细数据到另一个库后, 记得先使用pg_resetxlog将新集群的xid调整到大于明细表的max(xid)      
为方便大家查询, 汇总PostgreSQL实时和非实时数据统计的案例分析文章系列 - 如下 :             
1\. http://blog.163.com/digoal@126/blog/static/163877040201331252945440/            
2\. http://blog.163.com/digoal@126/blog/static/16387704020133151402415/            
3\. http://blog.163.com/digoal@126/blog/static/16387704020133155179877/            
4\. http://blog.163.com/digoal@126/blog/static/16387704020133156636579/            
5\. http://blog.163.com/digoal@126/blog/static/16387704020133218305242/            
6\. http://blog.163.com/digoal@126/blog/static/16387704020133224161563/            
7\. http://blog.163.com/digoal@126/blog/static/16387704020133271134563/            
8\. http://blog.163.com/digoal@126/blog/static/16387704020134311144755/            
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")