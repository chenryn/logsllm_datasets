ming. Instead of copying the DNS query in memory, it is rewritten,
in place, just as it arrived over the wire. I.e., the authority servers
ﬂip source port and IP ﬁelds, change ﬂags, checksums, and adjust a
few parameters (e.g., authority and answer sections) in place. Thus,
answer messages contain the query ﬁeld in the same case pattern
as originally offered by the DNS initiator.
(a) RTT Density
(b) ECDF of RTT
Figure 4: (a) Distribution of RTT times in OR-SOA experiment. (b) Cumulative density of RTT times.
Figure 3: Probability of DNS poisoning attack success, for ﬁxed
and randomized ports.
This provides an opportunity to use the 0x20 bit of any ASCII
letter (in the ranges 0x41 . . . 0x5A and 0x61 . . . 0x7A, e.g.,
A . . . Z and a . . . z) in the question name, to encode transac-
tional state information. The mixed pattern of upper and lower case
letters constitutes a channel–one that can be used to improve DNS
security.
An example shows how this encoding can trivially correspond to
a unique query. The following question names will be treated as
equal by a responder (for purposes of cache matching), but can be
treated as unique by a DNS initiator:
Domain Name
Field Value
www.example.com 1111111111111
WWW.EXAMPLE.COM 0000000000000
WwW.eXaMpLe.CoM 0101010101010
wWw.ExAmPlE.cOm 1010101010101
In the second column, we can indicate a numerical value that
represents the encoding, where lowercase == 1, and uppercase ==
Figure 5: A proposed algorithm for encoding DNS-0x20 bits
into queries. While other techniques are possible, this approach
is stateless, and allows for simple veriﬁcation of the answers
with constant memory overhead.
0. The DNS initiator can use this encoding as an additional means
of verifying message integrity.
To efﬁciently encode a query, we propose a simple algorithm.
Figure 5 illustrates the following steps:
1. As an input, a domain name input arrives: either an answer
from a server, or a query from a stub resolver. Figure 5 shows
the arrival of IBM.com as a query string.
2. First, one transforms the query ﬁeld into a canonical format,
e.g., all lowercase.
3. Second, one uses a chosen encryption scheme to encrypt
the canonical query, e.g., perhaps with AES [23], and a key
shared by all queries on the recursive server. This is illus-
trated as step A in Figure 5. This step could equivalently
use a small number of keys, one for a given time epoch.
(Key management is beyond the scope of this algorithm, but
brieﬂy noted below.)
4. Since the resulting cipher block is longer than the original
query in terms of bytes, bits are read in sequential fashion
from the cipher block. The query ﬁeld, called buff is read
one byte at a time. Step B in Figure 5 shows the encoding of
all “0x20 capable” characters (i.e., A-Za-z.) In such a case,
one reads the next bit j from the ciphered block, and:
(a) if the jth bit is 0, make the i query character upper case
(i.e., buff[i] |= 0x20).
(b) if the jth bit is 1, make the i query character lower case
(i.e., buff[i] &= 0x20).
5. This produces a 0x20-encoded domain name, as shown in
the ﬁnal segment of Figure 5. This can be sent to an author-
ity server. Likewise, it can be used to verify the query ﬁeld
returned by an authority server.
The mathematical operations used to change case (∧ = 0x20
and ∨ = 0x20, above) suggested the name for the “DNS-0x20
encoding” scheme. I.e., upper and lower case characters are 0x20
bits apart in the ASCII table, and the 0x20th bit in a query becomes
a channel.
Since the encoding bits are derived from the domain name, the
system is stateless. That is, the DNS server does not have to re-
member that a query has been sent, and how it encoded the 0x20-
capable characters.
If one were to include such state in a DNS
server, it would likely be a DDoS target (at worst), or introduce
performance overheads in accessing main memory (at best). Ob-
viously, other implementations are possible, and we suggest this
merely as an engineering efﬁciency, not as a requirement.
A secure encoding scheme, such as AES, can be used to make
sure that attackers do not guess the encoding key. We do not con-
sider issues of key management in our proposal. However, we note
that, if a weak encoding system is used, attackers may interact with
an 0x20-encoding DNS server repeatedly, asking for labels in a
zone the attacker controls, in an attempt to mount a plain text at-
tack.
We see this attack as orthogonal. To prevent such attacks on an
0x20-enabled server, the key can be changed out frequently, based
on use or time. Thus, ﬁgure 5 shows one of several keys being
selected to encode a query. Keys can be retired after repeated use
to minimize the risk of such attacks. Other implementations are
also possible.
5. ANALYSIS
Our proposed criteria in Section 1 requires that DNS-based anti-
poisoning measures result in improved security. DNS-0x20 en-
coding improves the forgery resistance of DNS messages only in
proportion to the number of upper or lower case characters in a
given query. For example, the domain cia.gov has only 26 addi-
tional combinations for the attacker to guess in a poisoning attack,
while licensing.disney.com has 218. In the pathological
case, queries for a ccTLD (country code top-level domains, e.g.,
“.cx”), would enjoy just two additional bits.
To see if DNS-0x20 improves the average case, we gathered
DNS traces (using passive DNS [35]) from a university network
for several months, and examined the query ﬁelds extracted answer
packets. We selected only packets that had AA-bit ﬂags enabled,
indicating they contained authority responses. In total, the trafﬁc
amounted to 5.6 million packets.
Figure 7(a) shows a correlation between the number of 0x20-
capable characters, and the overall length of the query (excluding
the “.” characters between labels). The vast majority of do-
mains were under 50 characters. For this grouping, over 2/3 of
the characters were 0x20 capable. Some clusters of longer pack-
ets occur at 100, 150 and about 200 character intervals, and have
decidedly fewer 0x20-capable characters. An inspection of these
packets shows them to be DNSBL and sensor-related trafﬁc. For
example, some mail servers encode state information in lengthy al-
phanumeric labels, which are then checked against centrally run
DNSBLs.
Figure 7(b) also illustrates how domain depth relates to the num-
ber of available DNS-0x20 characters.
In the far corner of Fig-
ure 7(b), when one encounters domains with ≈ 34 labels (i.e. sep-
arated by nearly many periods), the number of usable DNS-x20
characters is small. Domains with such a depth correspond to re-
verse IPv6 lookups, where only the A ...F hex characters (or
dot-separated nibble bits) in IPv6 address can be case ﬂipped.
For the most part, however, Figure 7(b) shows that with increased
domain depth, the number of DNS-0x20 capable characters in-
creases slightly. This is conﬁrmed in Figure 7(d) which compares
domain depth to all non-0x20 characters. Figure 7(c) gives some
further insights into the variance of DNS-0x20 characters. This
plots the number of digits, in proportion to the length of the domain
name. There is an obvious linear correlation, where some domain
names are nearly entirely composed of digits. The diagram thus
shows “stair cases” of clusters, with approximately 50, 70, and 90
digits.) This group corresponds to reverse DNS lookups, and other
customized DNSBL formats that use numerical encodings. The
bulk of the observations made in Figure 7(c), however, appear in
the lower corner of the plot, below 50 characters in length. Since,
on average, domain names with ≤ 50 characters total have only
≤ 10 characters devoted to numbers, there are many characters
available for DNS-0x20 encoding.
As a whole, Figure 7 shows there is variation in the number of
DNS-0x20 characters in DNS lookups. The Figure also illustrates
interesting types of lookups (e.g., reverse DNS) that tend to be poor
in DNS-0x20 lookups. While such queries could be poisoned, we
suspect that attackers are more likely to target “high value” do-
mains, such as banks, social networking sites, and auction sites.
These domains are composed almost of entirely of 0x20-capable
characters, and would beneﬁt even more from mixed-case encod-
ing. Figure 8(a)-(b) presents a CDF and histogram of the 0x20
characters in all domain queries. It demonstrates that overall, 25%
of domain queries provide approximately 20 0x20-capable charac-
ters; about 80% had at least 12 available 0x20 characters.
To express the average security improvements of DNS-0x20, we
therefore deﬁne a convenience function ℓ, which returns the num-
ber of 0x20 characters in a domain name. A DNS server that per-
forms both ID ﬁeld and port-encoding will have, on average, ¯ℓ ad-
ditional bits of entropy, or 232+¯ℓ possible values. As shown above,
for many types of queries, ¯ℓ ≈ 12. Note that each additional bit
doubles the number of combinations that an attacker must guess
correctly. Exponential growth is punishing, particularly for larger
exponents. Figure 6(a) shows the search space an attacker must
guess against, for a simple encoding of ibm.com. The x-axis is the
total number of bits available to encode transaction identities. The
y-axis indicates the number of possible combinations (or the de-
nominator in any probability model for successful guessing). If the
DNS initiator merely used the ID ﬁeld, and a single (non-variable)
source port, the additional beneﬁts of 0x20-encoding are shown in
the line labeled “a” in Figure 6(a). Note that by adding port ran-
domization, the DNS server enjoys the growth curve found in lines
“b” and “c”. This plot also shows that excluding well known ports
(e.g., ≤ 1024) is just a linear reduction of an exponential term, does
not signiﬁcantly affect outcomes. (I.e., 216 ≫ 1024).
Using DNS-0x20, we can restate our simple model of DNS poi-
(a) Comparison of DNS Transaction Protection Techniques
(b) Improved Resistance
Figure 6: (a) A comparison of various DNS anti-forgery techniques shows the improvements due to DNS-0x20 encoding. (b) Effect
of 0x20-Encoding on attack success probabilities, for various character counts. The 0x20 encoding particularly helps DNS servers
that cannot implement port randomization schemes, because of platform resource limitations.
soning. The chance that the nth packet would successfully poison a
DNS server, for the domains, d, usually handled by the DNS server:
PCumulativeSuc(n) = 1−
n−1
Yi=0
„1 −
2 ¯ℓ(d) ∗ α ∗ θ ∗ (β − γ) − i«
1
Figure 6(b) plots the resulting probability of success for an at-
tacker. Unlike the plot in Figure 3, we ﬁx the number of additional
authority servers to 3 (a conservatively high number usually seen
in enterprise networks; most networks tend to have just two). The
¯ℓ(d),
average number of 0x20 characters handled by the server,
is represented on the y-axis. Figure 6(b) shows how DNS-0x20
has the most improvement for DNS servers using only the random-
ized ID ﬁeld and a single port. The chance of success dips with
more 0x20 characters in each query. (As noted, the average num-
ber of such characters was 12 in our sample study, with a median
of 16.) While not as dramatic a reduction as the use of randomized
ports (which provide at least 14 bits on average), 0x20 encoding re-
duces the attacker’s chance of success. Recall that above a certain
threshold, exponential growth becomes quite punishing. Each bit
of DNS-0x20 encoding doubles the work an attacker must perform
to achieve similar poisoning results.
NS Vendor
Pct. Population
JHSOFT simple DNS plus
incognito DNS commander
v2.3.1.1 – 4.0.5.1
DJ Bernstein TinyDNS 1.05
ISC BIND 8.3.0-RC1 - 9.4.0a0
menandmice QuickDNS
Sourceforge JDNSS
Timeout and no matches
39%
1.9%
0.5%
7%
1.5%
0.1%
50%
Table 1: DNS Servers Reporting 0x20 mismatches.
5.1 0x20 probing
Our criteria for a practical DNS-based protection system also re-
quires that it be widely deployable. To evaluate this, we checked
which authority servers supported and preserved DNS-0x20 encod-
ings. Conceptually, this can be done by posing a mixed-case query
to authority servers regarding labels within their delegation zone.
For example, one might ask ns1.google.com (one of the listed
authorities for the google.com zone) the following:
dig
@ns1.google.com wWW.GooGle.COm
The returned answer should repeat the query, bit for bit, includ-
ing the chosen case variation. One must also check this behavior
under relatively high volumes, over time, and from different loca-
tions.
Unfortunately, there is no available academic testbed of all known
DNS authority servers. So, to evaluate if DNS servers could handle
our encoding schema gracefully, we scanned the Internet non-stop
for 3 weeks, targeting the authority servers listed in the .com and
.net zone ﬁles. These zone ﬁles list some 75 million name servers
(in aggregate), on average; our probes amounted to some 7 million
queries, spread across every DNS server listed in these TLD zones.
The results of our scans are shown in two matrices, in Table 2.
There appear to be just a few DNS servers that do not perform
proper DNS-0x20 encoding, under certain circumstances. Alto-
gether, they amount to ≈ 0.3% of the servers we contacted. We
tended to observe a failure to preserve DNS-0x20 encodings un-
der very high query volumes, e.g., dozens of identical queries per
second, for the same domain.
Table 1 shows the results of DNS ﬁngerprinting scans of these
servers. A few of these authority servers, e.g., BIND, are known
(because of source code) to DNS-0x20 compliant. Although DNS
ﬁngerprinting is approximate, we surmise that some networks (and
not the DNS servers) have server load balancers or hardware accel-
erators for their DNS farm. We are continuing our efforts to iden-
tify and contact the operators of these networks. Notably, google
recently changed the behavior of its l.google.com host, to be
DNS-0x20 compliant. It appears, however, that less than 0.28% of
the servers behave this way.
(a) Query Length vs. 0x20 Chars
(b) Domain Depths vs. 0x20 Chars
(c) Query Length vs. Digits