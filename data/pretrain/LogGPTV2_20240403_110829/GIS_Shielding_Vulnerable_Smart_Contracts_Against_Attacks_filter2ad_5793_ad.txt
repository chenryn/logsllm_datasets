we argue that the situation here is more akin to boardroom voting
than to general elections, because it should be possible to hold vot-
ers accountable. (cid:140)is means that privacy must be maintained only
until the election is over. Finally, the voting system must not be
favorable to any voters – e.g., it should not confer an advantage to
voters that cast their vote late. (cid:140)is (cid:128)nal property is called fairness.
It is worth noting that fairness requires privacy during the voting
phase. (cid:140)is leads to the following three requirements:
(1) Veri(cid:128)ability: (cid:140)e outcome of the vote must be veri(cid:128)ably
related to the votes as cast by the voters;
(2) Accountability: Voters can be held accountable for how
they voted;
(3) Fairness: No intermediate information must be leaked.
5 IMPLEMENTATION
In this section, we provide the implementation details of our solu-
tion called ÆGIS. (cid:140)e code is publicly available3. Figure 7, provides
an overview of the architecture of ÆGIS and highlights its main
components. ÆGIS is implemented on top of Trinity4, an Ethereum
client implemented in Python.
5.1 Ethereum Client
EVM. We modi(cid:128)ed the EVM of Trinity such that it keeps track
of all the executed instructions and their states at runtime, in the
form of an ordered list. We refer to this list as the execution trace.
3h(cid:138)ps://github.com/christo(cid:137)orres/Aegis
4h(cid:138)ps://trinity.ethereum.org/
EVMInterpreterData Flow ExtractorPattern ParserExecution traceRevertÆGISEthereum ClientÆGIS Smart ContractControl Flow Extractorare illustrated in Figure 8. In the (cid:128)gure, tp represents the point in
time when a pa(cid:138)ern is proposed and marks the start of the commit
window. tc marks the end of the commit window and the start of
the reveal window. Lastly, tr marks the end of the reveal window
and the time when the pa(cid:138)ern list is updated in case of a positive
vote outcome. A commitment is a hash of the vote ID, the voter’s
vote and a nonce. (cid:140)e vote ID is a hash of the proposed pa(cid:138)ern
and identi(cid:128)es the pa(cid:138)ern that is being voted on. (cid:140)e voter’s vote is
encoded as a boolean. (cid:140)e nonce ensures that commitments cannot
be replayed. (cid:140)e smart contract records these commitments, which
must be sent with the prede(cid:128)ned deposit and within the prede(cid:128)ned
time window. During the commitment phase no one knows how
anyone else has voted on a given pa(cid:138)ern, and so cannot be swayed
by the decisions of others. However, the process should ultimately
be transparent to both voters and non-voters to foster trust in the
system. As such, during the second window, the reveal window, all
voters reveal how they have voted. (cid:140)ey must reveal their vote in
order to get their deposit back. No commits may be made once the
reveal period has started.
commit window
reveal window
tp
tc
tr
time
Figure 8: Timeline of the two voting stages.
Tallying. (cid:140)e voting ends either when more than 50% (50%+1 vote)
of the total number of votes reaches either accept or reject, or when
the time window for revealing expires with less than 50% having
been reached. In case the voting has ended but the reveal window
has not yet passed, any remaining voters are still eligible to reveal
their vote, such that their deposit can be returned. (cid:140)e reveal period
is bounded so that pa(cid:138)erns are accepted or rejected in a practical
amount of time. In the event of a successful vote, the pa(cid:138)ern to
which the vote pertains is added to or removed from the record held
by the contract, according to the proposal. If a vote is unsuccessful,
i.e. no majority voted for the proposal, the record of pa(cid:138)erns is not
changed.
Actors. (cid:140)ere are three types of actors: the proposers that submit
proposals to add or remove pa(cid:138)erns, the voters that vote on pro-
posals, and the admins that govern the list of eligible voters as well
as the parameters of the smart contract (e.g. deposit, commit and
reveal windows, etc.). (cid:140)e ÆGIS smart contract allows every user
on the blockchain to become a proposer by submi(cid:138)ing a proposal.
Voters then vote on the proposals by (cid:128)rst commi(cid:138)ing their vote
and at a later stage revealing it. Not every user is an eligible voter.
Voters are only those users whose account address is stored in the
list of eligible voters maintained by the smart contract. Admins may
update the list of eligible voters. (cid:140)ey oversee the proper curation
of the smart contract and act as a governing body. Admins are
agreed upon o(cid:130)-chain and are represented by a multi-signature
wallet. A multi-signature wallet is an account address which only
performs actions if a group of users give their consent in form of a
signature.
Data Structures. (cid:140)e smart contract consists of several functions
and data structures that allow for the voting process to take place.
We make use of a number of modi(cid:128)ers, which act as checks carried
out before speci(cid:128)c functions are executed. We use these to check
that: 1) a voter is eligible, 2) a vote is in progress, 3) a reveal is
in progress and 4) the associated vote has ended. We use a struct
to hold the details of each vote, these include the patternID, the
proposed pattern and the startBlock. (cid:140)ese values enable us to
record the details needed to check when a vote ends, check that the
same pa(cid:138)ern has not already been proposed, and count the number
of votes. (cid:140)e struct is used in conjunction with a mapping, which
maps a 32 bytes value to the details of each vote. (cid:140)e 32 bytes value
represents the voteID of each vote, created by hashing unique vote
information. A constructor is used to de(cid:128)ne, at contract launch, the
value of the necessary deposit and the time windows during which
voters can commit or reveal. (cid:140)e former is given in ether, while the
la(cid:138)er are given in number of blocks. (cid:140)e deposit is used to ensure
that those who commi(cid:138)ed a vote also reveal their vote. (cid:140)ese values
can be changed later using the contract’s admin functions.
Functionality. (cid:140)e public functions for the voting process are:
addProposal, removeProposal, commitToVote and revealVote.
Both proposal functions (cid:128)rst check if a vote with the same ID al-
ready exists, and if not create a new instance of voting details via
the mapping. Next, the commitToVote function can be used inside
the de(cid:128)ned number of blocks to submit a unique hash of an eligible
voter’s vote. (cid:140)is function makes use of the canVote modi(cid:128)er to
protect access. (cid:140)e voter’s commitment and vote hash are stored
only if the correct deposit amount was sent to the function. Once
the vote stage has ended the reveal stage begins. During this win-
dow the revealVote function, protected by the canVote modi(cid:128)er,
processes vote revelations and returns deposits. (cid:140)e function checks
that the stored hash matches the hash calculated from the parame-
ters passed to it, and if so, returns the voter’s deposit and records
the vote. Lastly, it calls an internal function which tallies the votes
and adds or removes the pa(cid:138)ern if either the for or against vote has
reached over 50%. In this way the vote is self tallying. (cid:140)e pa(cid:138)erns
are ultimately stored in an array that can be iterated over to ensure
each node has the full set. Finally, the contract also has two admin
functions: transferOwnership, changeVotingWindows. Both of
these are protected by the isOwner modi(cid:128)er. (cid:140)e former allows the
current owning address to transfer control of the contract to a new
address. (cid:140)e la(cid:138)er allows the commit and reveal windows to be
changed as well as the amount required as a voting deposit.
6 EVALUATION
In this section, we evaluate the e(cid:130)ectiveness and correctness of
ÆGIS, by conducting two experiments. In the (cid:128)rst experiment we
compare the e(cid:130)ectiveness of ÆGIS to two state-of-the-art reen-
trancy detection tools: ECFChecker [12] and Sereum [31]. In the
second experiment we perform a large-scale analysis and measure
the correctness as well as the performance of ÆGIS across the (cid:128)rst
4.5 million blocks of the Ethereum blockchain.
9
B
R
C
C
Sereum FP
ÆGIS
TN
O
A
D
TP
TP
1
a
4
8
4
7
x
0
C
C
y
x
o
r
p
C
A
D
FP
FP
TN TN TN
FP
n
e
k
o
T
h
t
E
S
D
TP
TP
3
7
d
5
9
6
x
0
C
Z
E
6
A
8
D
8
9
x
0
I
E
W
FP
c
i
g
o
L
e
m
a
G
y
r
e
(cid:138)
o
L
0
0
5
1
7
7
x
0
C
T
B
s
s
i
K
C
e
C
7
D
b
x
0
3
9
e
e
4
F
x
0
FP
FP
m
r
a
l
A
FP
FP
FP
FP
TN TN TN TN TN TN TN TN TN TN
FP
FP
FP
Table 1: Comparison between Sereum and ÆGIS on the e(cid:130)ectiveness of detecting reentrancy attacks.
r
e
k
c
e
h
C
F
C
Reentrancy Type E
Same-Function
TP
FN
Cross-Function
TN
Same-Function
Cross-Function
FN
TN
Same-Function
Cross-Function
TN
m