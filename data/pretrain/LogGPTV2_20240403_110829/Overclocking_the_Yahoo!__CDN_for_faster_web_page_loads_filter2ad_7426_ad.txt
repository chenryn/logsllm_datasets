# 3.2.2 TCP Connection Characterization

In this section, we analyze the characteristics of users' TCP connections to the Yahoo! CDN.

**Figure 8: Bytes Transferred per TCP Connection**

Figure 8 illustrates the distribution of the total number of bytes transferred to the user per connection. Approximately 90% of the connections download less than 64KB of data. This is significant because TCP Reno, the default TCP flavor in many operating systems, including Linux, has a default initial ssthresh (Slow Start Threshold) of 64KB. Consequently, 90% of the connections, barring loss, will not enter the congestion avoidance phase and will complete their transfers entirely in the slow-start phase.

**Figure 9: TCP Connection Duration**

Figure 9 shows the distribution of connection durations at the four servers. The different "knees" in the graphs correspond to the server's connection timeout settings, reflecting differences in local server configurations. It is important to note that these durations do not represent active transfer times; due to the typical size of requested objects and the small number of objects in a persistent connection, as discussed in Section 3.2.3, most connections are idle for a significant portion of their duration.

To study packet loss, we use retransmission rate as a metric, which is measurable from the packet traces we collected. This retransmission rate provides an upper bound on the packet loss rate. Since most users use selective acknowledgments, retransmissions establish a tight upper bound. **Figure 10: Packet Retransmission Rate** shows the distribution of packet retransmission rates per connection. For example, in India, over 70% of the connections experience no retransmissions, but more than 17% have retransmit rates above 10%. Similarly, Figures 4 and 5 show that some subnets experience very little retransmission, while others have substantial retransmission rates, sometimes reaching 50%.

Overall page load time is extremely sensitive to the packet-loss rate, especially during connection setup, where a SYN timeout can be on the order of seconds. This is particularly problematic in networks with high round-trip times (RTTs), leading to total page load times in the range of 10-120 seconds for the Yahoo! frontpage.

# 3.2.3 HTTP Workload Characterization

In this section, we examine the properties of downloaded web objects at the Yahoo! CDN.

**Figure 11: HTTP Object Size Distribution**

Figure 11 shows the distribution of requested object sizes, with around 90% of objects being smaller than 25KB (17 segments). 

**Figure 12: HTTP Requests per Connection**

Figure 12 displays the distribution of the number of HTTP requests per connection, highlighting the effect of persistent connections. The mean is approximately 2.4 requests per connection, with the majority of connections requesting only one object. Despite typical web pages containing tens of objects, web browsers often use multiple concurrent TCP connections per domain per web page. Combining Figures 11 and 12, we see that even when requesting multiple objects back-to-back, the objects are so small and few that a typical connection does not have enough time to fully open the congestion window. Thus, most of the time is spent in the slow-start phase.

**Figure 13: Inter-request Time and RTO**

Figure 13 shows the distribution of the time between HTTP requests within the same connection (think-time). We observe that about 80% of back-to-back requests occur in under one second, indicating they are likely browser fetches rather than user clicks. Additionally, we plot the distribution of the difference between the inter-request time and our estimate of the RTO, calculated using the standard Jacobson estimator: \( \text{RTO} = \text{RTT}_{\text{average}} + 4 \times \text{RTT}_{\text{variance}} \). We find that approximately 10% of back-to-back object requests are separated by more than one RTO, requiring the connection to go through slow start again.

**Figure 14: Fraction of Total Bytes Downloaded by Object Size**

Figure 14 shows the distribution of the fraction of the total number of bytes downloaded via objects of certain sizes. For example, 50% of the total bytes downloaded come from objects 60KB or larger, while less than 5% of the web objects downloaded are 60KB or more. This indicates that a small percentage of large objects account for a significant portion of the total bytes downloaded.

# 4. Impact of Different Optimizations on Web Page Load Time

In Section 3, we observed that RTTs are generally high, especially for mobile users. For CDN operators, reducing RTTs is challenging, so the focus shifts to reducing the RTT multiplier. In this section, we study different optimizations to achieve this.

## 4.1 Initial Congestion Window (ICW)

We have seen that the vast majority of Yahoo! CDN connections transfer very few, small objects, meaning TCP spends most of its time in the slow-start phase. Improving the efficiency of this phase is crucial. When a new TCP connection starts, the Linux TCP implementation follows RFC 3390, specifying an ICW of 3 segments for networks with an MSS of 1460 bytes, the most common MSS. By increasing this ICW, small objects can be transferred in fewer RTTs, significantly reducing total page load time.

### 4.1.1 Evaluation Using Live Traffic

To test the effects of increasing the ICW size, we conducted experiments at our Singapore CDN site, chosen for its diverse connection qualities. We varied the ICW setting and captured traces for each size.

**Figure 15: Normalized Object Transfer Time**

Figure 15 shows the distribution of object transfer time normalized by the connectionâ€™s average RTT. We observe a 32% reduction in object transfer time at the 80th percentile when increasing the ICW from 3 to 16. However, increasing the ICW beyond 16 yields diminishing returns.

**Figure 16: First HTTP Request Transfer Time**

Figure 16 shows the same metric for the first HTTP request, where the improvement is a 38% reduction in transfer time. Subsequent HTTP requests benefit less as the TCP window is usually opened up after the first request.

**Figure 17: Retransmission Rates**

A potential side effect of increasing the ICW is an increase in retransmission rates, as shown in Figure 17. While over 70% of connections see no retransmissions, increasing the ICW from 3 to 16 increases the retransmit rate from 17% to 25% for about 10% of connections. This will have a significant impact on overall page load time, which is highly sensitive to packet loss.

**Figure 18: 80th Percentile of Average Object Transfer Times per Network Prefix**

Figure 18 shows the 80th percentile of the average object transfer times per network prefix. For each subnet, 7 data points corresponding to 7 different ICW sizes are presented. Most subnets benefit from increasing the ICW, with maximum benefit achieved at an ICW of 16. After that, for an ICW of 32, object transfer time increases. We chose the 80th percentile to highlight that a significant portion of connections in the tail of the distribution can suffer from using larger ICW sizes.

### 4.1.2 Studying Page Load Time

While the previous section focused on individual HTTP requests, we also wanted to capture the effects of tuning the TCP ICW size on overall page load time. A full web page encompasses many objects, and any straggling object download can delay the overall web page download, especially if it is the HTML file. Studying whole page load times in the wild is difficult due to the complexity of tying together multiple connections and servers.