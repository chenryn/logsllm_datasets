setpgrp ( );
if ( ( slave_fd =pty_slave(master_fd)) 
int ioctl (int fd,TIOCGWINSZ,struct winsize * winptr);
int ioctl (int fd,TIOCSWINSZ,struct winsize * winptr);
struct winsize
{
  unsigned short    ws_row;
/*每行字符树*/
  unsigned short    ws_col;
/*每列字符数*/
  unsigned short    ws_xpixel;
/*水平，象素*/
  unsigned short    ws_ypixel;
/*垂直，象素*/
}
内核为每个终端和伪终端维护一 winsize 结构，但不用它来做任何的事情，内核所要做
的是为激活进程提供一个跟踪窗口大小的途径。当一个窗口大小改变的时候，内核产生一
个 SIGWINCH 信号，该信号被发送给与此终端相关的终端进程组。如 4.3 BSD 的 vi 捕获
了信号 SIGWINCH，那么 vi 便应该知道该终端窗口的大小以便把较长的行分成两行并应该
第十一章 远程注册
- 243 -
知道窗口的底行在哪里。不管窗口的大小什么时候改变，vi 都会捕获到该信号以便重画屏
幕。当使用窗口环境的时候，一般都是用伪终端为每个激活的窗口提供一个注册 shell。
现在来考虑改变窗口大小对远程登录的影响，主要问题在于客户系统上改变窗口大下
必须通过服务员系统。客户和服务员应采取以下步骤：
当用户改变窗口大小的时候，将一个特殊字节串传送给 layers 进程，该进程用于
处理终端的多路复用，通过一个 RS—232 与终端通信，它也与使用伪终端在窗口下运行的
进程进行通信，该进程与住 pty 相连。
layers 进程接收到该字节串的时候就对从 pty 调用 ioctl，这样信号 SIGWINCH 便
发送给了从 pty 进程组中的进程以及 rlogin 父进程。
rlogin 父进程捕获到 SIGWINCH 信号，便调用 ioctl 得到新的窗口的尺寸，这个新
的窗口尺寸又通过网络发送给 rlogin 服务员进程。
rlogin 接收到新的窗口尺寸便对其主 pty 调用 ioctl，内核便把信号 SIGWINCH 发
送给从 pty 进程组中的进程。
该进程捕获到信号 SIGWINCH，然后重画屏幕。
    这样，本地系统和远程系统的窗口大小都改变了。
11.6  流控制与伪终端方式字
大多数终端行律都用于交互式环境，两个方向都没有字符缓冲，这样做使得进程能够
成块的读写数据，而设备驱动程序则尽量的接收并尽快的把数据发送给终端。终端输出的
速度通常受到连接设备速度的限制，如果显示在终端上的输出太快而无法看清，为暂停输
出，拥护可以按称为暂停键的特殊字符键，需要继续读下去的时候，键下一开始键，于是
终端行律便恢复输出。暂停键一般都是 CTL—S，而开始键一般都是 CTL—Q。除了输出放
在缓冲区外，终端输入也由行律放在一个缓冲区中，这样在进程准备读字符前便可键入字
符。
每个终端和伪终端都有一个输入队列和一个输出队列，如果行律想回显输入字符，只
需要把输入字符传到输出队列。
一般来说，键入中断键和停止键都会清除输入队列和输出队列，并终止当前运行的进
程。当终端行律处于 raw 方式的时候，这两个键不再特殊，也就是说，键入它们不会清除
队列。
在一个远程登录系统下，远程系统的行律处理中断键：
远程行律把字符放在其输出队列上等着 rlogin 通过伪终端来读取它们。
远程系统把准备发送本地系统的数据放在缓冲区中。
本地系统的网络缓冲区也包含字符，等待着被 rlogin 客户进程取走。
本地系统的终端行律也包含要在终端上显示的字符，这个时候因为终端一般慢于
网络或者产生输出的远程进程。
再者，用户在本地系统上键入中断键的时候，远程行律便进行中断处理，而用户当然
希望来不及输出的东西被清除掉，而不愿意坐在终端前等着一行行的输出。
流控制最好由客户系统来处理。若是由远程系统处理的话，该字符将被传到远程系统，
由远程系统的行律模块来禁止输出，但是在此之前，已经传回本地系统的字符还是会依次
显示在屏幕上。在客户系统上完成流控制的问题在于无论远程系统什么时候处于 raw 方式，
暂停和开始字符都得不到解释。远程系统处于 raw 方式的时候，客户还要把开始和暂停字
符送给远程系统去解释，但如果远程系统不处于 raw 方式，我们就可以让本地系统去处理
流控制，远程系统的行律应以某种方式通知 rlogind 开始和暂停符何时被禁止何时被允许。
如一个进程设置 TIOCFLUSH 调用 ioctl ,便会把终端行律中的输入和输出列消除光。如
- 244 -
Linux网络编程
果远程系统上的一个进程调用 ioctl，除了让远程系统的行律模块清除其输出缓冲外，我们
还希望把网络上用于输出到本地终端上的缓冲清除掉，这是远程系统行律模块应该知道的
情况，也就是 rlogind 应该知道的情况。
为了处理这些情况，4.3 BSD 伪终端设备驱动程序支持一个可选的包方式，该方式对
伪终端主设备调用 ioctl，在 ioctl 中需要设置 TIOCPKT 并带一个非零参数。由伪终端从设
备上的行律模块通知伪终端主设备，在它的行律模块中出现了某一事件。在该方式秒，主
pty 的每个 read 调用返回如下字节：
单字节 0 后面跟来自从 pty 的实际数据，0 是一个标志字节，用于指示缓冲区的剩
余部分是一般的数据。
单字节非零值，该字节是一个控制字节，用于表明从 pty 上出现了某一事件，文
件包含了该字节的常数定义。
TIOCPKT_FLUSHREAD  表明终端输入队列被清除
TIOCPKT_FLUSHWRITE  表明终端输出队列别清除
TIOCPKT_STOP  表明终端输出被终止了
TIOCPKT_START  表明终端输出重新开始
TIOCPKT_DOSTOP  表明从 pty 已经发生了变化以致于终端停止符是 CTL—S，开始
符是 CTL—Q，且终端不处于 raw 方式。
TIOCPKT_NOSTOP  表明从 pty 已经发生了变化以至于终端停止键不 CTL—S 或者开
始符不是 CTL—Q，或者终端处于 raw 方式。
在这种方式下，从主 pty 读的进程便能够在调用 read 之前区分一般的数据和控制信息。
rlogind 服务员只对以下的三个控制信息感兴趣：
TIOCPKT_FLUSHWRITE
TIOCPKT_NOSTOP
TIOCPKT_DOSTOP
当服务员从主 pty 中读到以上三个字节中的任意一个的时候，就把带外信号（out-of-
band）发送给 rlogin。rlogin 子进程从网络中读数据，它准备接收带外信号（信号 SIGURG）
并执行相应的动作。
1．TIOCPKT_FLUSHWRITE
由于服务员终端输出队列被清除，客户也应该尽量把来不及输出的清除掉。它先
为标准输出（本地终端）设置 TIOCFLUSH 调用 ioctl 清除终端行律中的输出缓冲，然后从
网络中读，直到读到带外字节并把数据丢掉。以这种方式，网络缓冲中的任何数据也被丢
掉了。只要接收者读到了带外数据，它便扔掉所有的带内数据并把带带数据先发送过来。
2．TIOCPKT_NOSTOP
在这种情况下，从 pty 不再把 CTL—S 和 CTL—Q 作为停止符和开始符，或者从 pty
处于 raw 方式。在任何一种情况下，rlogin 不再完成流控制并且把所有的字符传给服务员
进程，在远程系统上启动 vi 便属于这种情况。
3．TIOCPKT_DOSTOP
这种情况下，从 pty 不属于 raw 方式并停止开始符为 CTL—S 和 CTL—Q，这样就允
许 rlogin 处理流控制。为此客户把本地终端的行律模块置为 cbreak 方式（而非 raw 方式）
以使客户能进行流控制。用户终止 vi 时就是如此。
综上所述，远程登录系统实际上是一个远程回显，本地流控制且带有输出清除的设施。
远程回显是因为客户要求服务员完成回显工作。
终端输出的流控制是在客户系统上完成的，只要远程系统上的停止和开始符为 CTL
—S 和 CTL—Q。
第十一章 远程注册
- 245 -
需要清除的时候，客户把来不及输出的东西清除掉。除此之外，我们还加入了把
窗口变化传给服务员这一远程登录设施。
11.7  rlogin 客户程序
前面介绍了登程登录的客户，下面是其主要执行函数的框架：
struct tchars notc = {-1,-1,-1,.-1,-1,-1};
struct lchars noltc = {-1,-1,-1,.-1,-1,-1};
do (oldsigmask)
int oldsigmask;
{
struct sgtyb sb;
ioctl(0,TIOGETP,(char * )&sb);
defflags = sb.sg_flags;
tabflag =defflags & TBDELAY;
defflags =ECHO|CRMOD;
deferase =sb.sg_erase;
defkill =sb.sg_kill;
ioctl (0,TIOCLGET, (char * )*deflflags);
ioctl (0,TIOCGETC,(char * )&deftc);
notc.t_startc =deftc.t_startc;
notc.t_stopc =deftc.f_stopc;
ioctl (0,TIOCGETC,(char *)&defltc);
signal (SIGINT,SIG_IGN);
setsignal (SIGHUP,exit);
setsignal (SIGQUIT,exit);
if ( ( childpid = fork() ) sin_port=ntohs( (u_short)cli_addrp->sin_port);
hp=gethostbynaddr (&cli_addrp->sin_addr,
sizeof(struct in_addr),cli_addrp->sin_family);
if ( hp = = NULL )
      {
hp = &hostent;
hp->h_name –inet_ntoa(cli_addrp->sin_addr);
}
if (cli_addrp->sin_family !=AF_INET
||
          cli_addrp->sin_port  >=IPPORT_RESERVED ||
cli_addrp->sin_port  0)
goto gotpty;
第十一章 远程注册
- 247 -
            }
  )
gotpty:
ioctl (masterfd,TIOCSWISZ,&swin);
line[5]=‘t’;
if ((slavefd =open (line ,O_RDWR))<0)
fatalperror (o,line);
if (fchmod (slavefd,0))
fatalperror(0,line);
signal (SIGHUP,SIG_IGN);
vhangup( );