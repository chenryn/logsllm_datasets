the CR3 that contains the address of the relocated PGD will
be replaced with the unmodiﬁed saved-CR3 value (on mem-
ory that can be protected by monitor). This makes Register-
bound ATRA eﬀect disappear before the target kernel object
PA of A’s PGDPA Copy of A’s PGDProcess AProcess BProcess AProcess BTimePA of B’s PGDPA Copy of B’s PGDContext SwitchCR3 Value*Entering Kernel ModePA: Physical Address***inspection routines. Hypercheck also described the ATRA-
like issue as copy-and-change attack and showed how the
well-known IDTR hooking attacks can be detected.
Some of the prior works on hypervisor-based VMI were
aware of the possibilities of ATRA-like monitoring evasion
attacks. Sharif et al. [19] mentioned that any code with ker-
nel privilege could relocate a page table by modifying CR3
register value. Also, Payne et al. [2] claimed that the reloca-
tion attack on the dispatcher component of their monitoring
scheme would require a considerable, if not impossible eﬀort
since the dispatcher is in a 4MB page with the Windows XP
kernel components. Although the possibility of attacks like
ATRA has been mentioned in the previous studies [2, 19],
there has not been a practical implementation and evalua-
tion on the eﬀectiveness of ATRA. We point out that ATRA
might also aﬀect hypervisor-based VMI tools, hoping that
the mitigation of ATRA (described in Section 4) is consid-
ered in the design of future VMI tools. Further discussion
is in Appendix A.2.
9. CONCLUSION
We presented Address Translation Redirection Attack
(ATRA), which exploits the limitation in the existing
hardware-based external monitors to completely circumvent
all existing monitoring schemes. We showed the implemen-
tation of two types of ATRA called:
(i) Memory-bound
ATRA, (ii) Register-bound ATRA. We illustrated the grav-
ity of the attack by ﬁrst providing a set of possible ATRA
mitigations, and then proving that ATRA foils all such coun-
termeasures including even theoretical one.
In our imple-
mentation, we successfully manipulated the address transla-
tion mechanism in Linux kernel without touching the mem-
ory regions monitored by hardware-based external moni-
tors. Our evaluation with benchmarks showed that ATRA
does not induce any noticeable performance degradation of
OS. As long as this limitation of the hardware-based exter-
nal monitors remains unresolved, any future advancement
in their monitoring capability will be fruitless.
It is our
hope that this work will spur researchers to design a more
trustworthy hardware-based external monitor, addressing
the ATRA mitigation challenges presented in the paper.
Acknowledgements
This research was supported by MOTIE (The Minister of
Trade, Industry and Energy), Korea, under the Brain Scout-
ing Program (HB609-12-3002) by the NIPA (National IT
Promotion Agency). This research is also based on work
supported by the Software R&D Center, Samsung Electron-
ics.
10. REFERENCES
[1] Z. Wang, X. Jiang, W. Cui, and P. Ning, “Countering kernel
rootkits with lightweight hook protection,” in Proceedings of
the 16th ACM conference on Computer and communications
security, ser. CCS ’09, 2009, pp. 545–554.
[2] B. D. Payne, M. Carbone, M. Sharif, and W. Lee, “Lares: An
architecture for secure active monitoring using virtualization,”
in Proceedings of the 2008 IEEE Symposium on Security and
Privacy, ser. SP ’08. Washington, DC, USA: IEEE Computer
Society, pp. 233–247.
[3] O. S. Hofmann, A. M. Dunn, S. Kim, I. Roy, and E. Witchel,
“Ensuring operating system kernel integrity with osck,” in
Proceedings of the sixteenth international conference on
Architectural support for programming languages and
operating systems, ser. ASPLOS ’11. New York, NY, USA:
ACM, pp. 279–290.
[4] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: a tiny
hypervisor to provide lifetime kernel code integrity for
commodity oses,” in Proceedings of twenty-ﬁrst ACM SIGOPS
symposium on Operating systems principles, ser. SOSP ’07.
New York, NY, USA: ACM, pp. 335–350.
[5] N. L. Petroni, Jr. and M. Hicks, “Automated detection of
persistent kernel control-ﬂow attacks,” in Proceedings of the
14th ACM conference on Computer and communications
security, ser. CCS ’07. New York, NY, USA: ACM, pp.
103–115.
[6] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection
through vmm-based ”out-of-the-box” semantic view
reconstruction,” in Proceedings of the 14th ACM conference
on Computer and communications security, ser. CCS ’07,
2007, pp. 128–138.
[7] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh,
“Copilot - a coprocessor-based kernel runtime integrity
monitor,” in Proceedings of the 13th conference on USENIX
Security Symposium - Volume 13, ser. SSYM’04. Berkeley,
CA, USA: USENIX Association, pp. 13–13.
[8] H. Moon, H. Lee, J. Lee, K. Kim, Y. Paek, and B. B. Kang,
“Vigilare: toward snoop-based kernel integrity monitor,” in
Proceedings of the 2012 ACM conference on Computer and
communications security, ser. CCS ’12. New York, NY, USA:
ACM, pp. 28–37.
[9] H. Lee, H. Moon, D. Jang, K. Kim, J. Lee, Y. Paek, and B. B.
Kang, “Ki-mon: a hardware-assisted event-triggered monitoring
platform for mutable kernel object,” in Proceedings of the 22nd
USENIX conference on Security, ser. SEC’13, 2013, pp.
511–526.
[10] Z. Liu, J. Lee, J. Zeng, Y. Wen, Z. Lin, and W. Shi, “Cpu
transparent protection of os kernel and hypervisor integrity
with programmable dram,” in Proceedings of the 40th Annual
International Symposium on Computer Architecture, ser.
ISCA ’13, 2013, pp. 392–403.
[11] Y. Kinebuchi, S. Butt, V. Ganapathy, L. Iftode, and
T. Nakajima, “Monitoring integrity using limited local
memory,” Information Forensics and Security, IEEE
Transactions on, vol. 8, no. 7, pp. 1230–1242, 2013.
[12] A. T. Rafal Wojtczuk, Joanna Rutkowska. Xen 0wning trilogy.
[13] Xen: Security vulnerabilities. [Online]. Available: http://www.
cvedetails.com/vulnerability-list/vendor\ id-6276/XEN.html
[14] Vmware: Vulnerability statistics. [Online]. Available:
http://www.cvedetails.com/vendor/252/Vmware.html
[15] Vulnerability report: Xen 3.x. [Online]. Available:
http://secunia.com/advisories/product/15863
[16] Vulnerability report: Vmware esx server 3.x.
[17] J. Wang, A. Stavrou, and A. Ghosh, “Hypercheck: A
hardware-assisted integrity monitor,” in Recent Advances in
Intrusion Detection, ser. Lecture Notes in Computer Science,
S. Jha, R. Sommer, and C. Kreibich, Eds. Springer Berlin /
Heidelberg, pp. 158–177, 10.1007/978-3-642-15512-3-9.
[18] S. Jin and J. Huh, “Secure mmu: Architectural support for
memory isolation among virtual machines,” in Dependable
Systems and Networks Workshops (DSN-W), 2011
IEEE/IFIP 41st International Conference on, 2011, pp.
217–222.
[19] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi, “Secure in-vm
monitoring using hardware virtualization,” in Proceedings of
the 16th ACM conference on Computer and communications
security, ser. CCS ’09, 2009, pp. 477–487.
[20] J. D. McCalpin, “Memory bandwidth and machine balance in
current high performance computers,” IEEE Computer Society
Technical Committee on Computer Architecture (TCCA)
Newsletter, pp. 19–25, Dec. 1995.
[21] Byte-unixbench: A unix benchmark suite. [Online]. Available:
http://code.google.com/p/byte-unixbench/
[22] Intel 64 and IA-32 Architectures Software Developer’s
Manual, INTEL, Aug 2012.
[23] D. P. Bovet and M. Cesati, Understanding the Linux Kernel,
2nd ed. O’Reilly and Associates, Dec. 2002.
[24] Idt hooking. [Online]. Available:
http://resources.infosecinstitute.com/hooking-idt/
[25] The lxr project. [Online]. Available:
http://lxr.sourceforge.net/en/index.shtml
[26] Stealth. the adore rootkit version 0.42. [Online]. Available:
http://teso.scene.at/releases.php
[27] System calls and rootkits. [Online]. Available:
http://lwn.net/Articles/297500/
tack by observing the linked list in memory page. However,
by launching LKM hiding with ATRA, this event becomes
invisible from the monitor. We implemented an LKM hid-
ing rootkit with ATRA, which manipulates the linked list of
struct module kernel data structure containing metadata of
inserted kernel modules. In our implementation, the rootkit
launches ATRA for the targeted struct module kernel data
structure object, which leads the subsequent LKM hiding
attack to occur outside the view of the monitor.
A.2 Hypervisor-based Virtual Machine Intro-
spection
There have been a few studies on hypervisor-based vir-
tual machine introspection (VMI) for protecting OS kernels
from untrusted codes such as rootkits. Such hypervisor-
based VMI schemes can be classiﬁed into two approaches by
their objectives. First, prior works on detecting and analyz-
ing behaviors of rootkits by extracting semantics of kernel
objects [3,6,28–32] emulate the MMU for the virtual address
translation. Such MMU emulations use the page table of ei-
ther guest OS or hypervisor to retrieve the corresponding
host-physical address of the object. Second, prior studies on
protecting the code and data of OS kernel [1, 2, 4, 19, 33, 34]
utilize the hypervisor’s page protection mechanism.
Meanwhile, we surmise that ATRA can aﬀect some of the
hypervisor-based VMIs under certain circumstances. For
instance, ATRA might be able to evade the monitoring of
VMI tools that depend on the guest page table for virtual
to physical translation of the monitored objects, given that
they do not monitor CR3 [6, 30]. The monitor would not be
aware of the relocated page tables and will be referencing
the unused old page tables. However, if the guest page table
walking is implemented such that the walking starts from the
monitored context’s CR3 value, ATRA might be detected.
VMI tools built on a hypervisor that employs Shadow
Page Table (SPT) have the necessary capabilities to im-
plement countermeasures for ATRA. More speciﬁcally, the
hypervisors are capable of trapping register changes, and
SPT operates by write-protecting the guest page tables and
trapping all modiﬁcation attempts. However, we accentuate
that VMI tools should consider a countermeasure against
ATRA for reliable introspection. On the other hand, a new
memory virtualization technology often referred to as Nested
Paging has arisen to ameliorate the performance overhead
of SPT. Nested Paging, also known as Extended Page Ta-
bles (EPT) in Intel’s terminology and Nested Page Tables
(NPT) in AMD’s, allows guest kernel to modify its page
tables. While we conjecture that the removal of the write-
protection in guest page tables would make the mitigation
of ATRA more diﬃcult, further investigation of the issue
seems necessary.
[28] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Giﬃn, and W. Lee,
“Virtuoso: Narrowing the semantic gap in virtual machine
introspection,” in Security and Privacy (SP), 2011 IEEE
Symposium on, 2011, pp. 297–312.
[29] J. Rhee, R. Riley, D. Xu, and X. Jiang, “Kernel malware
analysis with un-tampered and temporal views of dynamic
kernel memory,” in Proceedings of the 13th international
conference on Recent advances in intrusion detection, ser.
RAID’10, 2010, pp. 178–197.
[30] B. Payne, M. de Carbone, and W. Lee, “Secure and ﬂexible
monitoring of virtual machines,” in Computer Security
Applications Conference, 2007. ACSAC 2007. Twenty-Third
Annual, 2007, pp. 385–397.
[31] A. Lanzi, M. I. Sharif, and W. Lee, “K-tracer: A system for
extracting kernel malware behavior.” in 16th Symposium on
Network and Distributed System Security, ser. NDSS ’09, 2009.
[32] Y. Fu and Z. Lin, “Space traveling across vm: Automatically
bridging the semantic gap in virtual machine introspection via
online kernel data redirection,” in Security and Privacy (SP),
2012 IEEE Symposium on, 2012, pp. 586–600.
[33] A. Srivastava and J. Giﬃn, “Eﬃcient protection of kernel data
structures via object partitioning,” in Proceedings of the 28th
Annual Computer Security Applications Conference, ser.
ACSAC ’12, 2012, pp. 429–438.
[34] M. Grace, Z. Wang, D. Srinivasan, J. Li, X. Jiang, Z. Liang,
and S. Liakh, “Transparent protection of commodity os kernels
using hardware virtualization,” in Security and Privacy in
Communication Networks. Springer, 2010, pp. 162–180.
APPENDIX
A. APPENDIX
A.1 ATRA Enabled Rootkit Examples
System Call Table (SCT) hooking rootkit: System
call table hooking is a common type of rootkit attack in the
wild [27]. If a rootkit manipulates the system call table, it
can achieve various types of malicious activities such as by-
passing an anti-virus software and hiding its existence from
the process list of the system. Speciﬁcally, to hide its own
process information, it needs to manipulate related system
calls that are used for retrieving the process information.
The process status reporting tool such as ps reads /proc
directory to retrieve PIDs of all processes running in the
system. By hijacking read system call, the attacker is able
to hide information of its own process by deleting its PID
from the retrieved result.
One may think that system call table manipulation attack
can be easily mitigated by making the system call table im-
mutable after the system’s boot process, and this immutable
memory region can be simply protected by hardware-based
external monitors. However, we implemented the rootkit
with ATRA that successfully manipulates the system call
table without involving any changes in protected memory
regions and subverts the naive defense mechanism. In our
implementation, it ﬁrst launches ATRA on the system call
table and then hooks the sys getuid and sys geteuid system
call entries into its internal function. Similarly, the rootkit
can also manipulate other kernel status information such as
network connection and ﬁle system information.
Loadable Kernel Module (LKM) hiding rootkit: The
LKM hiding technique shown in adore-ng [26] is another
typical type of real-world rootkit example. A rootkit can
achieve this attack by removing metadata from doubly
linked list of kernel modules, while keeping the actual data
to reside in memory. The LKM hiding rootkit can hide a
kernel module from reporting tools such as lsmod.
Hardware-based external monitors which is capable of
tracing dynamic kernel data structure can detect this at-