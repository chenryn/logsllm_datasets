    ```
-   要将数据库加载到远程 [**MySQL**]{.strong} 服务器，请运行：
    ``` screen
    # mysql --host=remote_host  backup-file.sql
    ```
-   要载入从一个数据库转储的表的子集，请运行：
    ``` screen
    # mysql db_name 
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#performing-file-system-backup-mysql_backing-up-mysql-data}执行文件系统备份 {.title}
:::
要创建 [**MySQL**]{.strong} 数据文件的文件系统备份，请将
[**MySQL**]{.strong} 数据目录的内容复制到您的备份位置。
要同时备份当前的配置或日志文件，请使用以下流程的可选步骤：
::: orderedlist
**流程**
1.  停止 `mysqld`{.literal} 服务：
    ``` screen
    # systemctl stop mysqld.service
    ```
2.  将数据文件复制到所需位置：
    ``` screen
    # cp -r /var/lib/mysql /backup-location
    ```
3.  （可选）将配置文件复制到所需位置：
    ``` screen
    # cp -r /etc/my.cnf /etc/my.cnf.d /backup-location/configuration
    ```
4.  （可选）将日志文件复制到所需位置：
    ``` screen
    # cp /var/log/mysql/* /backup-location/logs
    ```
5.  启动 `mysqld`{.literal} 服务：
    ``` screen
    # systemctl start mysqld.service
    ```
6.  将备份位置的备份数据加载到 `/var/lib/mysql`{.literal} 目录时，请确保
    `mysql:mysql`{.literal} 是 `/var/lib/mysql`{.literal}
    中所有数据的所有者：
    ``` screen
    # chown -R mysql:mysql /var/lib/mysql
    ```
:::
:::
::: section
::: titlepage
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#introduction-to-replication-as-a-backup-solution-mysql_backing-up-mysql-data}作为备份解决方案复制 {.title}
:::
复制是源服务器的一个替代的备份解决方案。如果源服务器复制到副本服务器，备份可以在副本上运行，而不会对源造成任何影响。当您关闭副本，并从副本备份数据时，源仍然可以运行。
有关如何复制 [**MySQL**]{.strong} 数据库的说明，请参阅 [复制
MySQL](#assembly_using-mysql_configuring-and-using-database-servers.html#replicating-mysql_assembly_using-mysql "复制 MySQL"){.link}。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
复制本身并不是一个足够的备份解决方案。复制可以防止源服务器出现硬件故障，但它不能确保防止数据的丢失。建议您将对副本的任何其他备份解决方案与此方法一起使用。
:::
::: itemizedlist
**其他资源**
-   [MySQL
    复制文档](https://dev.mysql.com/doc/refman/8.0/en/replication.html){.link}
:::
:::
:::
::: section
::: titlepage
# []{#assembly_using-mysql_configuring-and-using-database-servers.html#proc_proc_migrating-to-a-rhel-9-version-of-mysql-8-0_assembly_using-mysql}迁移到 RHEL 9 版本的 MySQL 8.0 {.title}
:::
RHEL 8 包含 [**MySQL 8.0**]{.strong}、[**MariaDB
10.3**]{.strong}，以及来自 MySQL 数据库系列服务器的 [**MariaDB
10.5**]{.strong} 实施。RHEL 9 提供 [**MySQL 8.0**]{.strong} 和
[**MariaDB 10.5**]{.strong}。
此流程描述了使用 `mysql_upgrade`{.literal} 程序从 RHEL 8 的 [**MySQL
8.0**]{.strong} 版本迁移到 [**MySQL 8.0**]{.strong} 的 RHEL 9
版本。`mysql_upgrade`{.literal} 工具由 `mysql-server`{.literal}
软件包提供。
::: itemizedlist
**先决条件**
-   在进行升级前，请备份存储在 [**MySQL**]{.strong}
    数据库中的所有数据。请参阅[备份 MySQL
    数据](#assembly_using-mysql_configuring-and-using-database-servers.html#backing-up-mysql-data_assembly_using-mysql "备份 MySQL 数据"){.link}。
:::
::: orderedlist
**流程**
1.  确定在 RHEL 9 系统中安装了 `mysql-server`{.literal} 软件包：
    ``` screen
    # dnf install mysql-server
    ```
2.  确保在复制数据时 `mysqld`{.literal} 服务不在源或目标系统上运行：
    ``` screen
    # systemctl stop mysqld.service
    ```
3.  将源位置的数据复制到 RHEL 9 目标系统的 `/var/lib/mysql/`{.literal}
    目录中。
4.  对目标系统上复制的文件设置适当的权限和 SELinux 上下文：
    ``` screen
    # restorecon -vr /var/lib/mysql
    ```
5.  确保 `mysql:mysql`{.literal} 是 `/var/lib/mysql`{.literal}
    目录中所有数据的所有者：
    ``` screen
    # chown -R mysql:mysql /var/lib/mysql
    ```
6.  在目标系统上启动 [**MySQL**]{.strong} 服务器：
    ``` screen
    # systemctl start mysqld.service
    ```
    备注：在较早版本的 [**MySQL**]{.strong} 中，需要
    `mysql_upgrade`{.literal}
    命令来检查和修复内部表。现在，当您启动服务器时会自动完成此操作。
:::
:::
::: section
::: titlepage
# []{#assembly_using-mysql_configuring-and-using-database-servers.html#replicating-mysql_assembly_using-mysql}复制 MySQL {.title}
:::
[**MySQL**]{.strong}
为复制提供各种配置选项，范围从基本到高级。这部分论述了使用全局事务标识符(GTID)在新安装的
[**MySQL**]{.strong} 上复制 MySQL 的事务方式。使用 GTID
简化了事务识别和一致性验证。
要在 [**MySQL**]{.strong} 中设置复制，您必须：
::: itemizedlist
-   [配置源服务器](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_configuring-a-mysql-source-server_replicating-mysql "配置 MySQL 源服务器"){.link}
-   [配置副本服务器](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_configuring-a-mysql-replica-server_replicating-mysql "配置 MySQL 副本服务器"){.link}
-   [在源服务器上创建复制用户](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_creating-a-replication-user-on-the-mysql-source-server_replicating-mysql "在 MySQL 源服务器上创建复制用户"){.link}
-   [将副本服务器连接到源服务器](#assembly_using-mysql_configuring-and-using-database-servers.html#proc_connecting-the-replica-server-to-the-source-server_replicating-mysql "将副本服务器连接到源服务器"){.link}
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
如果要使用现有的 [**MySQL**]{.strong}
服务器进行复制，您必须首先同步数据。如需更多信息，请参阅
[上游文档](https://dev.mysql.com/doc/mysql-replication-excerpt/8.0/en/replication-howto.html){.link}。
:::
::: section
::: titlepage
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#proc_configuring-a-mysql-source-server_replicating-mysql}配置 MySQL 源服务器 {.title}
:::
这部分描述了 [**MySQL**]{.strong}
源服务器正确运行并复制数据库服务器上所做的所有更改所需的配置选项。
::: itemizedlist
**先决条件**
-   源服务器已安装。
:::
::: orderedlist
**流程**
1.  包括 `/etc/my.cnf.d/mysql-server.cnf`{.literal} 文件中
    `[mysqld]`{.literal} 部分下的以下选项：
    ::: itemizedlist
    -   `bind-address=source_ip_adress`{.literal}
        从副本到源的连接需要这个选项。
    -   `server-id=id`{.literal}
        [*id*]{.emphasis} 必须是唯一的。
    -   `log_bin=path_to_source_server_log`{.literal}
        此选项定义 [**MySQL**]{.strong}
        源服务器的二进制日志文件的路径。例如：`log_bin=/var/log/mysql/mysql-bin.log`{.literal}。
    -   `gtid_mode=ON`{.literal}
        此选项在服务器上启用全局事务标识符(GTID)。
    -   `enforce-gtid-consistency=ON`{.literal}
        服务器通过仅允许执行可使用 GTID 进行安全记录的语句来强制实施
        GTID 一致性。
    -   [*可选:*]{.emphasis} `binlog_do_db=db_name`{.literal}
        如果您只想复制所选的数据库，则使用这个选项。要复制多个所选的数据库，请分别指定每个数据库：
        ``` screen
        binlog_do_db=db_name1
        binlog_do_db=db_name2
        binlog_do_db=db_name3
        ```
    -   [*可选:*]{.emphasis} `binlog_ignore_db=db_name`{.literal}
        使用此选项从复制中排除特定的数据库。
    :::
2.  重启 `mysqld`{.literal} 服务：
    ``` screen
    # systemctl restart mysqld.service
    ```
:::
:::
::: section
::: titlepage
## []{#assembly_using-mysql_configuring-and-using-database-servers.html#proc_configuring-a-mysql-replica-server_replicating-mysql}配置 MySQL 副本服务器 {.title}
:::
本节介绍了 [**MySQL**]{.strong}
副本服务器所需的配置选项，以确保成功复制。
::: itemizedlist
**先决条件**
-   副本服务器已安装。
:::
::: orderedlist
**流程**
1.  包括 `/etc/my.cnf.d/mysql-server.cnf`{.literal} 文件中
    `[mysqld]`{.literal} 部分下的以下选项：
    ::: itemizedlist
    -   `server-id=id`{.literal}
        [*id*]{.emphasis} 必须是唯一的。
    -   `relay-log=path_to_replica_server_log`{.literal}
        中继日志是在复制过程中由 [**MySQL**]{.strong}
        副本服务器创建的一组日志文件。
    -   `log_bin=path_to_replica_sever_log`{.literal}
        此选项定义了 [**MySQL**]{.strong}
        副本服务器的二进制日志文件的路径。例如：`log_bin=/var/log/mysql/mysql-bin.log`{.literal}。
        副本中不需要这个选项，但强烈建议使用。
    -   `gtid_mode=ON`{.literal}
        此选项在服务器上启用全局事务标识符(GTID)。
    -   `enforce-gtid-consistency=ON`{.literal}
        服务器通过仅允许执行可使用 GTID 进行安全记录的语句来强制实施
        GTID 一致性。
    -   `log-replica-updates=ON`{.literal}
        这个选项可确保从源服务器接收的更新记录在副本的二进制日志中。
    -   `skip-replica-start=ON`{.literal}
        此选项可确保在副本服务器启动时不启动复制线程。
    -   [*可选:*]{.emphasis} `binlog_do_db=db_name`{.literal}
        如果您只想复制某些数据库，则使用这个选项。要复制多个数据库，请分别指定每个数据库：
        ``` screen
        binlog_do_db=db_name1
        binlog_do_db=db_name2
        binlog_do_db=db_name3
        ```
    -   [*可选:*]{.emphasis} `binlog_ignore_db=db_name`{.literal}
        使用此选项从复制中排除特定的数据库。
    :::
2.  重启 `mysqld`{.literal} 服务：
    ``` screen
    # systemctl restart mysqld.service
    ```
:::
:::