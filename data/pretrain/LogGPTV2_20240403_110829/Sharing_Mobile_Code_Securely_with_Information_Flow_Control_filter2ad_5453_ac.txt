cation and endorsement in provided code directly; it also
prevents the adversary from indirectly inﬂuencing declassiﬁ-
cation and endorsement occurring in other code in the system
not provided by the adversary.
Provider-bounded label checking would prevent an adver-
sary from changing the password by providing the code,
because an adversarial provider can only provide code that
operates in a low-integrity context, and the high-integrity
assignment to password cannot occur in such a context.
As an additional beneﬁt, the provider label makes a new
feature possible using the same mechanism: conﬁdential code.
By creating code with a high-conﬁdentiality provider label,
code publishers can safely put code into Fabric that contains
sensitive information such as proprietary algorithms.
The high-conﬁdentiality label on the class object prevents
untrusted nodes from viewing that code directly. Provider-
bounded label checking enforces a stronger notion of security,
however: it prevents any data affected by the code from
ﬂowing to untrusted nodes. If providers of conﬁdential code
wish to make its results public, the results must be explicitly
declassiﬁed.
5.3. Provider-bounded authority
Another curb on the misuse of declassiﬁcation and integrity
is the requirement that code possess the authority to perform
these operations. Code cannot weaken a conﬁdentiality or in-
tegrity policy through declassiﬁcation or endorsement, unless
the principal whose policy is being weakened grants the code
that authority.
Authority placed in mobile code cannot exceed the author-
ity of the code developer. This is expressed using a check on
integrity: for code that claims the authority of the principal
p, we ensure that I(provider) (cid:118) {(cid:62) ← p}.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:49 UTC from IEEE Xplore.  Restrictions apply. 
5.4. Fingerprint checking for remote calls
The security of both Fabric and Mobile Fabric relies on
the assumption that trustworthy nodes agree on the types of
classes. When classes are distributed and stored by trusted
system administrators, as all classes in Fabric are,
is
reasonable to assume that nodes agree on types. But this
assumption is no longer safe when class objects can be
provided by untrusted nodes.
it
To see how this could lead to an attack, consider the
scenario where a user operates two trusted nodes, u1 and u2,
and u1 wishes to make a remote call to execute the attacker-
provided method harmless method at u2.
Assume that the attacker provides two different implemen-
tations of harmless method to the two nodes. Suppose that
u1 sees the following:
1 void harmless_method() {user→user} {
2 }
whereas u2 receives
3 void harmless_method() {user→public} {
4
5 }
public_data = true;
Both of these methods type-check. u1 is willing to make this
remote call in a context that would reveal conﬁdential data,
because the begin label of harmless method prevents it
from having any public side effects. On the other hand, u2 is
willing to execute the method even though it has public side
effects, because its begin label requires it to be called in a
context that does not reveal any sensitive information.
However, when these two are combined, the type mismatch
allows the provider to trick the trusted worker into revealing
the user’s conﬁdential information. It is not enough that the
methods both type-check in isolation; they must agree on the
types.
To ensure that the caller and the receiver of a remote call
agree on the types appearing in remotely-called methods,
a ﬁngerprint [5] is sent along with each remote call. The
receiver checks that
the invoked method has a matching
ﬁngerprint. The ﬁngerprint is computed as a secure hash
over the entire source code of the method’s class, including
the source code of any superclasses. This ensures more type
agreement than strictly necessary, but the same ﬁngerprint has
other uses, so there is no harm in it.
A similar vulnerability can occur if a worker ﬂushes the
cache of compiled classes: the adversary could make the type
of a method appear to change. To prevent this, the ﬁngerprint
of a class must be preserved across cache ﬂushes and checked
against the class when it is reloaded.
5.5. Fingerprint checking for object loading
An attacker who can change the class associated with an
object can cause nodes to disagree about the labels on the
object’s ﬁelds and methods. To prevent this attack, each object
stores its class ﬁngerprint along with the pointer to its class
object. The ﬁngerprint is checked against the class actually
loaded to ensure that the class accurately describes the object,
including security policies on its ﬁelds.
5.6. Access labels
When an object
is accessed during computation on a
worker, but is not yet cached at the worker, the worker must
fetch the object data from the node where it is stored. Thus,
the contacted node learns that an access to the object has
occurred. When the access is a read, we call this side channel
a read channel.
In the original Fabric system, objects are placed onto stores
that can enforce their labels, including their conﬁdentiality.
However, this does not prevent read channels. According to
this rule, public data can be stored on a low (adversary-
controlled) node. But then accesses to the object from a high
context would violate conﬁdentiality.
Read channels are not controlled in the original Fabric
system, but they become easy to exploit once the adversary
can provide mobile code that generates such accesses. Read
channels are not a Fabric-speciﬁc problem, either—holes in
the same-origin policy also permit read channels: for example,
via images fetched from ad servers.
We control read channels by extending the programming
language. We add to each object a second label called the
access label. It is a conﬁdentiality-only label that bounds what
can be learned from the fact that the object has been accessed.
The access label ensures that the object is stored on a node
that is trusted to learn about all the accesses to it, and it
prevents the object from being accessed from a context that is
too high. The access label has no integrity component because
there is no integrity dual to read channels.
The access label of an object is declared as part of the label
of its ﬁelds. Given object label (cid:96)u and access label (cid:96)a, a label
annotation (cid:96)u@(cid:96)a means that the ﬁeld, and by extension the
object, has the corresponding labels.
For example, to declare an object containing public infor-
mation (in ﬁeld data) that can be accessed without leaking
information (according to any principal that trusts node n to
enforce its conﬁdentiality), we can write code like this:
1 class Public {
2
3 }
int {} @ {(cid:62)→n} data;
Even though the information is public and untrusted (label
{}), objects of this class can be stored only on nodes that are
at least as trusted as node n. Conversely, if we had given the
ﬁeld data the annotation {}@{}, the object could be stored
on any node, but the type system would prevent accesses from
non-public contexts.
Access labels require two new static checks in Fabric code:
1) The access label on ﬁelds allows the compiler to check
all reads from and writes to ﬁelds to ensure that they occur in
a low context. The program-counter label pc must be lower
than the access label (i.e., pc (cid:118) (cid:96)a) at each ﬁeld access (read
or update). This is in addition to the existing check, inherited
from Jif [23], that requires pc (cid:118) (cid:96)u at each update.
2) At the point where an object is constructed using new,
198
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:49 UTC from IEEE Xplore.  Restrictions apply. 
the node at which the object is created must be able to enforce
the access label. In Fabric, an object of class C is explicitly
allocated at a node n using the syntax new C@n(...). We
require pc (cid:118) (cid:96)a and n (cid:60) (cid:96)a at this point in the code, because
node n learns about the future accesses to the object.
Access labels also interact with provider-bounded label
checking. Recall that the compiler ensures the initial pc of
methods contain at least as much conﬁdentiality as the label
of the code. Therefore, the access label of objects used by
conﬁdential code must be at least as high as the conﬁdentiality
of the code.
Access labels also introduce a new dynamic check. When a
worker fetches an object, the access label bounds how much
information is leaked to the object’s store. However, if the
reference to the object is provided by an adversary, there is
no guarantee that the store is trusted to learn that information.
Therefore, before the fetch is performed, the worker must
check dynamically that the store can enforce the access label.
Mobile Fabric also encounters a new kind of read channel
that did not exist in the original Fabric system: class object
read channels. Fetching an object may require fetching its
class, so the class object must be stored on a node that
is trusted to enforce the object’s access label. To satisfy
this requirement without unnecessary restrictiveness, we can
ensure that when an object is created on a node, its class
object is stored at a suitably trusted node. Since the node
storing the object
the class
object can be replicated onto the same node as the object if
necessary. Since class objects are immutable, their replication
is harmless in Fabric.
itself must be such a node,
5.7. Other covert channels
Read channels are an example of channels that might
be exploited as covert channels [18]. The ability to control
mobile code clearly increases the power of the adversary to
exploit covert channels.
Covert channels fall into two categories: storage channels,
in which information is learned by observing the state of the
system independent of time, and timing channels, in which
information is learned from the time at which event occurs.
Many systems, especially those that support mobile code,
have both kinds of channels.
Fabric controls storage channels that are visible at the
language level, such as implicit ﬂows [9] that arise from the
control ﬂow of programs. Other storage channels exist below
the language level of abstraction and are blocked or mitigated
by a variety of mechanisms. For example, updates to objects
shared across a distributed computation are propagated among
worker nodes, but the information channel is mitigated cryp-
tographically.
6. Software reuse and evolution
Reusable software components help programmers develop
complex applications from smaller, modular fragments of
code. Using expressive component architectures comes at a
price, however. Many frameworks require complex interface
deﬁnitions or linkage speciﬁcations [29, 26, 10, 28], and
conﬂicting dependencies can result in dynamic linking errors
that are difﬁcult to resolve.
is not modular:
The most common mobile code in use today, JavaScript
code distributed on the web,
it provides
no isolation between scripts loaded by the same webpage
so developers must resolve namespace collisions themselves.
Loading components into a single global namespace is overly
restrictive [3] and tends to make code unnecessarily bound
to speciﬁc versions of dependencies
[28]. For instance, a
JavaScript program that
imports one version of a library
may be difﬁcult to compose with another program using
a different version. Yet version conﬂicts do not necessarily
represent fundamental incompatibilities—the choice of URL
may be arbitrary. Software that is compatible with multiple
conﬁgurations is easier to reuse and compose.
Modularity becomes more complicated in distributed set-
tings where nodes access and update persistent data. Here, a
schema deﬁnes the structure of persistent data and may evolve
over time. Likewise, programs interacting with the data may
expect it to be structured according to a speciﬁc version of
the schema. To ensure persistent data remains accessible, the
distributed system (or the programs themselves) must either
migrate the data to new schemas or handle it in a backward-
compatible way. Modularization helps isolate changes so that
more code and data remain compatible with each other.
The root of the problems caused by a lack of modularity
is that the meaning of code changes in different contexts.
Problems such as namespace collisions, dependency conﬂicts,
and data corruption are difﬁcult to avoid without modularity
since the assumptions made by each context are often subtle.
We argue that the meaning of mobile code should be ﬁxed
at publication. In Mobile Fabric, publishers distribute auto-
matically generated linkage speciﬁcations called codebases
along with published code. Codebases support decentralized
namespaces; a class’s own codebase deﬁnes the resolution of
its dependencies. This mechanism enables independent nodes
to resolve dependencies consistently without resorting to a
global namespace.
Importantly, name resolution and namespace isolation in
Mobile Fabric are orthogonal to security enforcement, un-
like in systems such as Java, JavaScript and SPIN [3].
Information-ﬂow control restricts the use of resources rather
than the ability to name them. Linking against high-integrity,
high-authority code requires no special privilege;
instead,
label checking ensures the end-to-end security of linked code.
6.1. Codebases
As described in Section 4.3, we ignore some information
channels related to network trafﬁc analysis.
All class objects published in Mobile Fabric are associated
with a codebase. A codebase maps from class names to
199
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:46:49 UTC from IEEE Xplore.  Restrictions apply. 
published class objects, specifying a linkage for the static
types used in published components. Since linkage of a
component’s dependencies is ﬁxed at publication, nodes that
download and compile mobile code independently can inter-
act with persistent data and each other robustly.
Loading components dynamically but linking them stati-
cally seems crucial for security. It also distinguishes Mobile
Fabric from other systems, such as Java, where there is no
guarantee that the class linked by the JVM at run time is the
same that was compiled against. By associating a codebase
with published classes, we make it possible for nodes to agree
about types in a decentralized way.
Figure 7 depicts two published classes, pkg.B and pkg.C,
and their respective codebases. To compile and run code
stored in the class pkg.B with dependency pkg.C, the follow-
ing steps occur. During compilation, the compiler consults the
entry for “pkg.C” in pkg.B’s codebase. This entry contains
a reference to the speciﬁc class object used to resolve the
dependency. Likewise, when compiling pkg.C the compiler
uses its codebase to resolve dependencies. If C was published
alongside B, the codebase will be the same one as before.
On the other hand, if C was published separately, then C’s
codebase will be different and may contain entries not present
in B’s codebase. Figure 7c shows the latter case. Solid arrows
indicate the class object a particular class name resolves to,
and dotted lines indicate the home codebase of a class. pkg.B
uses the codebase CB2 to resolve its dependencies while
pkg.C uses CB1. CB1 has a local reference to pkg.C while
CB2 contains a remote reference to the same object. Using this
process to resolve dependencies, nodes are able to compile
compatible versions of pkg.B independently.
Rather than forcing developers to create codebases by hand,
the Mobile Fabric compiler generates a codebase automati-
cally from the classpath and sourcepath speciﬁed during pub-
lication. This feature makes the potentially complex process
of linking and publishing reusable mobile components similar
to compiling programs with a traditional Java compiler and
linking with local libraries. Usually, classpath entries refer to
the codebases of dependencies already published in Fabric,
while sourcepath entries refer to local directories containing
source that will be published with the new codebase.
To protect the linkage of classes resolved by a codebase,
codebases have integrity labels that are at least as high as the
provider labels of the classes they are published with. To
prevent the adversary from exploiting codebases that violate
this constraint, the compiler checks that it holds at link time.
6.2. Namespace consistency
The independent components making up a complete pro-
gram often share common dependencies. In typical use, these
dependencies must resolve identically for all components. For
instance, the dependency might deﬁne an interface through
which components interact. In some cases, though, a compo-
nent’s use of a dependency is isolated from other components.
Consider a component that uses a regular expression library
to manipulate strings internally. If this component requires a
different version of the library than another component does,
it should in principle be safe to load both versions since the
usage of each library is isolated. Unfortunately, identifying
whether two conﬂicting dependencies are truly isolated from
each other is difﬁcult.
Consider the code fragments shown in Figures 7a and 7b.
Imagine pkg.B extends a previously published class pkg.C.
Whether the method in B overrides C.m(A) depends on how A
is resolved. If A resolves to the same class used by C, then B’s
method overrides m, otherwise it doesn’t. Interestingly, both
cases result in fully type-checked code. Figure 7c shows the
latter case, where A is resolved differently by B’s codebase,
CB2, and Figure 7d shows the dependency graph induced by
the two class deﬁnitions.
Allowing programs with dependency graphs such as Fig-
in subtle and surprising behavior. For
ure 7d can result
instance, calling the method m on an object of type B and
passing in a parameter of type pkg.A from CB2 will be
dispatched differently depending on the type of the reference
to the object receiving the call. For instance, if the reference
has type C, then C.m(Object) will be called since C.m(A)
uses the version of pkg.A from CB1. While it is possible the
code’s author intended this behavior, it is far more likely that
this behavior is unintentional.
Since errors related to inconsistent linkage are difﬁcult
to detect and debug, we enforce a constraint on the static
dependencies of mobile code. The constraint is most easily
expressed in terms of a dependency graph such as the one
shown in Figure 7d. Nodes in the graph are published class
objects, and each edge is the resolution of a dependency using