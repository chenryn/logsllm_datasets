and possibly Af b+cy (in case the authentication device has learnt the peer identity ˆA), and then forwards
Y and possibly Af b+cy to the computation device. (2) After getting X from the computation device,
the authentication device computes s = db + ey, and then forwards s to the computation device. (3)
After getting s from the authentication device, the computation device computes K ^B = Af b+cyX s and
the session-key, and then communicates with ˆA with the session-key. Note that y; Y; c; d; Af b+cy; db can
be oﬄine pre-computed by the authentication device, and the authentication device needs only online
computing ey and s. Also, the computation device essentially needs to compute only one exponentiation
X s. More details are referred to Appendix H.1.
Ease deployment with lower-power devices. Online optimal eﬃciency and supporting public
computation, as clariﬁed above, make (s,r)OAKE more desirable for being deployed with devices of
limited computational ability in hostile computing environments. Also, (s,r)OAKE allows smaller pa-
rameter |q| than HMQV in resistance to collision attacks against h, which is important for deployment
with memory-restricted devices (like smart-cards or other portable electronic tokens).
Minimal setup. (s,r)OAKE does not mandate proof of possession/knowledge (POP/K) of secret-
key during public-key registration, while POP/K is now commonly assumed for MQV. POP/K is
explicitly abandoned in HMQV, however as we shall see, there exists a way to maliciously asymmetrically
compute the session-key of HMQV without knowing either static secret-key or ephemeral DH-exponent.
Security in the CK-framework. For the security of (s,r)OAKE in the CK-framework, we have
the following theorems:
Theorem 4.1 The OAKE and sOAKE (resp., rOAKE) protocols, with the exposed values of oﬄine
pre-computed DH-components, DH-exponents and the DH-secrets of one’s DH-component and its peer’s
public-key, say Acy and Bdx (resp., only oﬄine pre-computed DH-components, DH-exponents), are
secure in the CK-framework under the following assumptions:
Case-1. The GDH assumption, w.r.t. any test-session ( ˆA; ˆB; X0; Y0) where ˆA ̸= ˆB.
Case-2. Both the GDH assumption and the KEA assumption (resp., merely the GDH assumption),
w.r.t. any test-session ( ˆA; ˆB; X0; Y0) where ˆA = ˆB but X0 ̸= Y0.
Case-3. The CDH assumption, w.r.t. any test-session ( ˆA; ˆB; X0; Y0) where ˆA = ˆB and X0 = Y0.
Note that the security of rOAKE does not rely on the non-standard KEA assumption, but allows
more limited secrecy exposure. Speciﬁcally, for provable security of rOAKE, the values Ab+cy and Ba+dx
should be well protected and should not be exposed in case they are oﬄine pre-computed. The actual
security proofs are quite lengthy and technical. As we focus on conveying conceptual messages with the
main text, proof details are referred to Appendix G. In comparison, with exposed DH-components and
DH-exponents, the security of HMQV relies on both the GDH assumption and the KEA assumption
for both Case-1 and Case-2. More discussions on the security of (s,r)OAKE vs. HMQV are given
in Appendix F. Due to space limitation, more discussions on security of (s,r)OAKE beyond the CK-
framework are also referred to Appendix H.
5 Computational Fairness: A New Perspective to Cryptographic
Protocols
In this work, we identify some asymmetry or unfairness in session-key computation of (H)MQV be-
tween a malicious player and an honest player. Speciﬁcally, a malicious player can pay much lesser
8
computational resource in computing the session-key, and can even set the session-key to be some pre-
determined or publicly-computable values. This is demonstrated by a new kind of attacks, referred to
as exponent-dependent attacks (EDA). We then discuss the implications and damages of this vulnera-
bility, and then introduce a new concept called “(session-key) computational fairness” for (implicitly
authenticated) DHKE protocols.
−d
−d
−1 · gt)d = XX
5.1 Exponent Dependent Attack
Given a value X ∈ G for which the malicious player ˆA (e.g., a client) does not necessarily know the
−1 · gt where t ∈ Zq and d = h(X; ˆB) for
discrete logarithm of X, ˆA computes d and sets A = X
−1gtd = gtd, and
HMQV or d = 2l + (X mod 2l) for MQV. Note that XAd = X(X
the shared DH-secret now is K ^A = (XAd)y+eb = gtdygtdeb = Y tdBtde. We call such an attack exponent
dependent attack. If A sets t = 0 then the shared DH-secret K ^A is always 1G. If A sets t = d
−1, then
K ^A = Y Be. For all these two speciﬁc cases, the value K ^A can be publicly computed (without involving
any secret values).
In any case, the computational complexity in computing the shared DH-secret
by the malicious ˆA is much less than that by its peer ˆB, which clearly indicates some unfairness. In
general, the malicious ˆA can honestly generate its public-key A = ga and compute the session-keys, thus
explicitly requiring POP/K of secret-key during public-key registration and explicit key-conﬁrmation
and mutual authentication (as required by the 3-round (H)MQV) do not prevent the above attacks. As
there are many choices of the value t by the adversary in diﬀerent sessions, explicitly checking whether
the shared DH-secret is Y Be also does not work. The above attacks can also be trivially modiﬁed
(actually simpliﬁed) to be against the one-round HMQV variant. We stress that such attacks do not
violate the security analysis of HMQV in [42], as they are beyond the CK framework.
We note that MQV (with embedded subgroup membership test of peer’s DH-component) explicitly
checks the shared DH-secret is not 1G, and thus the attack with t = 0 does not work against MQV.
But, for (H)MQV with explicit subgroup tests of peer’s public-key and DH-component, whether still
checking the shared DH-secret is 1G is however unspeciﬁed. In particular, the basic version of HMQV
[42] does not check whether the shared DH-secret is 1G or not, and POP/K of secret-keys is explicitly
abandoned in HMQV. We also note the version of HMQV proposed in [43] does check and ensures the
shared DH-secret is not 1G. But, (H)MQV does not resist the above attacks with t ̸= 0.
Besides asymmetric computation, such a vulnerability also allows more eﬀective DoS attacks. Though
an adversary can send arbitrary messages to an honest party (say, player ˆB in the above attacks) to issue
DoS attacks, which however can be easily detected by the authentication mechanism of (the 3-round
version of) (H)MQV. But, with our above attacks, the honest player ˆB is hard to distinguish and detect
an attack from an honest execution of (H)MQV.
5.2 Formulating Computational Fairness
This motivates us to introduce a new notion for DHKE, called session-key computational fairness. For
any complete session-tag T ag of a key-exchange protocol among n users {U1;··· ; Un} where n ≥ 2, we
m) ∈ G1×···×Gm; m ≥
ﬁrst identify dominant-operation values w.r.t. T ag and each user Ui, (V i
2, which are speciﬁed to compute the session-key K by the honest player Ui for a complete session
speciﬁed by the complete session-tag T ag, where Gk, 1 ≤ k ≤ m is the range of V i
k . Speciﬁcally,
K = FK(V i
m; T ag), where K is the session-key output by user Ui, FK is some polynomial-time
computable function (that is deﬁned by the session-key computation speciﬁed for honest players). We
remark that dominant operations are speciﬁc to protocols, where for diﬀerent key-exchange protocols
the dominant operations can also be diﬀerent.
1 ;··· ; V i
1 ;··· ; V i
m) ∈
Deﬁnition 5.1 (non-malleable independence) For the dominant-operation values, (V i
G1×···× Gm, m ≥ 2 and 1 ≤ i ≤ n, w.r.t. a complete session-tag T ag on any suﬃciently large security
parameter l, we say V i
m are computationally (resp., statistically) non-malleably independent, if
for any polynomial-time computable (resp., any power unlimited) relation/algorithm R (with components
drawn from G1 × ··· × Gm × {0; 1}∗
) it holds that the following quantity is negligible in l:
1 ;··· ; V i
1 ;··· ; V i
9
(cid:12)(cid:12)Pr[R(V i
(cid:12)(cid:12) ;
1 ;··· ; V i
m; T ag) = 1] − Pr[R(R1;··· ; Rm; T ag) = 1]
where Ri; 1 ≤ i ≤ m is taken uniformly and independently from Gi, and the probability is taken over
the random coins of R (as well as the choice of the random function in the random oracle model [10]).
Deﬁnition 5.2 ((session-key) computational fairness ) We say a key-exchange protocol enjoys
session-key computational fairness w.r.t. some pre-determined dominant operations, if for any complete
session-tag T ag on any suﬃciently large security parameter l, the session-key computation involves the
same number of (statistically or computationally) non-malleably independent dominant-operation values
for any (whether honest or malicious) user Ui, 1 ≤ i ≤ n.
Note that the notion of “(session-key) computational fairness” is deﬁned w.r.t. some predetermined
dominant operations that are uniquely determined by the protocol speciﬁcation. We remark that it is the
task of the protocol designer to specify the dominant operations, with respect to which computational
fairness will be provably proved. Some comments and clariﬁcations about the above formulation of
computational fairness are in place (more details are referred to Appendix I):
Implication against malicious players. Though session-key computational fairness, as well as
non-malleable independence, is deﬁned w.r.t. any complete session tag, it actually ensures that: for
any subset of malicious polynomial-time players, no matter how they do, by the birthday paradox it is
infeasible from them to make the values V i
m (involved in session-key computation) correlated
under any predetermined polynomial-time computable relation for any i; 1 ≤ i ≤ n.
In particular,
the non-malleable independence deﬁnition ensures that, by the birthday paradox, for any successfully
ﬁnished session among a set of (malicious and honest) players, no matter how the malicious players
collude, it holds that:
probability that Pr[V i
for any i; 1 ≤ i ≤ n and for any values ((cid:11)1;··· ; (cid:11)m) ∈ G1 × ··· × Gm, the
k = (cid:11)i] is negligible for any k; 1 ≤ k ≤ m and any i; 1 ≤ i ≤ n.
1 ;··· ; V i
Why require dominant-operation values to be “non-malleably independent”? The reason
is that, without such a requirement, as shown by our concrete EDA attacks, an adversary can potentially
set these values maliciously correlated such that the session-key can be computed in a much easier way
(than the way speciﬁed for honest players) even without knowing any secrecy corresponding to the
dominant-operation values.
Why only require “involved” dominant-operation values? The reason we only require the
dominant-operation values involved (rather than computed) in session-key computation is that, there
can be multiple diﬀerent ways to compute the session-key from dominant-operation values. With the
function FK(X = gx; Y = gy) = X · Y as an example, one can compute two separate exponentiations
X and Y and then compute the session-key, but one can also use the simultaneous exponentiations
technique to compute X · Y with only about 1.3 exponentiations. Furthermore, there are a number of
diﬀerent methods for simultaneous exponentiations with (slightly) varying computational complexities
[49, 33, 24].
Session-key computational fairness vs. non-malleable joint proof-of-knowledge. For
key-exchange protocols enjoying session-key computational fairness, if we view each non-malleably in-
dependent value as a proof-of-knowledge of the corresponding secrecy, the successful generation and use
of session-key can be viewed as a non-malleable join proof-of-knowledge of secret values related to the
non-malleable independent values. This further implies that a malicious player is infeasible to set the
session-key to some values that can be publicly computed from the session transcript. In a sense, the
notion of “self-sealed computational independence” in accordance with Deﬁnition C.1 (which is deﬁned
for NMJPOK) can be viewed as a special and weaker form of non-malleable independence deﬁned here.
Computational fairness vs. complete fairness. The notion of “fairness” was intensively studied
in the literature of secure multi-party computation (SMC) (see [31] for an overview of the various fairness
notions considered in SMC). Informally speaking, a protocol is fair if either all the parties learn the
output of the function, or no party learns anything (about the output). This property is also referred
to as “complete fairness” (along with many variants), which mainly deals with prematurely adversarial
aborting. To bypass some impossibility results on achieving fair SMC protocols with a majority of
corrupted players, the work [29] introduced the notion of “resource fair SMC”, which is still a variant
of “complete fairness”. Speciﬁcally, the “resource fairness” [29] captures “fairness through gradual
10
release”, which, roughly speaking, requires that the honest players and the adversary run essentially
the same number of steps in order to obtain protocol output.
Casting “fairness through gradual release” into DHKE, it means that: players ˆA and ˆB gradually
release their DH-components X and Y in sequential steps, so that both parties can output the session-
key or both cannot. Clearly, the notions of “complete fairness” and “resource fairness” considered in
the literature of SMC are signiﬁcantly diﬀerent from the session-key computational fairness considered
in this work. Speciﬁcally, we assume both parties honestly send their DH-exponents, and computational
fairness says that they then should invest essentially the same computational resources, i.e., no shortcut,
in computing the session-key output. That is, our computational fairness is to capture the fairness
between non-aborting players on the amount of computational resources invested for fulﬁlling some
designated computing task, while “complete fairness” and its variant in the literature of SMC mainly
deal with prematurely adversarial aborting.
On computational fairness of OAKE vs. (H)MQV.
It is easy to check that, in the random
oracle model, OAKE satisﬁes session-key computational fairness (w.r.t.
statistically non-malleably
independent dominant operation values), while (H)MQV does not as shown by the above concrete EDA
attacks. We also observe that sOAKE and rOAKE also lose session-key computational fairness. More
details are given in Appendix I.
6 Conclusion and Future Investigations
We conclude this work with a brief comparison between (s,r)OAKE and HMQV, and some suggestions
for future investigations.
Total eﬃciency
Online eﬃciency
Parallel subgroup test
with pre-computation
Allowed secrecy exposure
ˆA ̸= ˆB
Assumption
ˆA = ˆB; X ̸= Y
ˆA = ˆB; X = Y
Support public computation
Computationally fair
Robust embedded subgroup
test with pre-computation
Reasonable deniability
Post-ID computability
Need change to resist
collision attack on h?
OAKE
sOAKE