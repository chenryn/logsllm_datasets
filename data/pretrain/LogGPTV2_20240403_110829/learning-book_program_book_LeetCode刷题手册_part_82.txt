[0,1]
[1,3]
[1,2]
[2,3]
---
## Page 807
Sweep line = [0,1] +1
[0,3]
[0,1]
[1,3]
[1,2]
[2,3]
Sweep line = [0,2] -1
[0,3]
[0,1]
[1,3]
[1,2]
[2,3]
Sweepline=[0,3]-1
[2'0]
[0,1]
[1,3]
[1,2]
[2,3]
Bhalfre
·遍历到倒数第2根扫描线的时候就能得到结果了。因为最后一根扫描线update以后，整个线段树
全部都归为初始化状态了。
---
## Page 808
Sweep line =[0,1] -1
[0,3]
[0,1]
[1,3]
[1,2]
[2,3]
·这一题是线段树扫面线解法的经典题
代码
package leetcode
import（
"sort"
func rectangleArea(rectang]es [][]int) int {
sat, res := SegmentAreaTree{},0
posXMap, posX, posYMap, posY, lines
discretization850(rectangles)
tmp := make([]int, 1en(posYMap))
for i := 0; i 0{
sat.buildSegmentTree(0, 0, 1en(nums)-1)
//在treeIndex的位置创建[left....right]区间的线段树
func (sat *SegmentAreaTree) buildSegmentTree(treeIndex, 1eft, right int) {
if left == right-1 {
sat.tree[treeIndex] = SegmentItem{count: 0, val: sat.data[left]}
return
midTreeIndex, 1eftTreeIndex, rightTreeIndex := left+(right-left)>>1,
sat.leftchild(treeIndex), sat.rightchild(treeIndex)
sat.buildSegmentTree(leftTreeIndex, 1eft, midTreeIndex)
sat.buildSegmentTree(rightTreeIndex, midTreeIndex, right)
sat.pushup(treeIndex, leftTreeIndex, rightTreeIndex)
}
func (sat *SegmentAreaTree) pushup(treeIndex, leftTreeIndex, rightTreeIndex
int){
newCount, newValue := sat.merge(sat.tree[leftTreeIndex] .count,
sat.tree[rightTreeIndex].count), 0
if sat.tree[leftTreeIndex].count > 0 && sat.tree[rightTreeIndex].count > 0 {
newValue = sat.merge(sat.tree[leftTreeIndex] .val,
sat.tree[rightTreeIndex] .val)
} else if sat.tree[leftTreeIndex].count > 0 &&
sat.tree[rightTreeIndex].count == 0 {
newValue = sat.tree[leftTreeIndex] .va]
3 else if sat.tree[leftTreeIndex].count == 0 &&
sat.tree[rightTreeIndex].count > 0 {
newValue = sat.tree[rightTreeIndex].va]
sat.tree[treeIndex] = SegmentItem{count: newCount, val: newvalue]
---
## Page 811
func (sat *SegmentAreaTree) 1eftchild(index int) int {
return 2*index + 1
func (sat *SegmentAreaTree) rightchild(index int) int {
return 2*index + 2
}
//查询[left....right]区间内的值
// Query define
func (sat *SegmentAreaTree) Query(left, right int) int {
if len(sat.data) >0{
return sat.queryInTree(0, 0, 1en(sat.data)-1, 1eft, right)
return 0
func (sat *SegmentAreaTree) queryInTree(treeIndex, 1eft, right， queryLeft,
queryRight int) int {
midTreeIndex, 1eftTreeIndex, rightTreeIndex := left+(right-left)>>1,
sat.leftchild(treeIndex), sat.rightchild(treeIndex)
if left > queryRight 1l right = right { // segment completely inside
range
if sat.tree[treeIndex].count >0{
return sat.tree[treeIndex]-va]
return 0
if queryLeft > midTreeIndex {
return sat.queryInTree(rightTreeIndex, midTreeIndex, right, queryLeft,
queryRight)
} else if queryRight  0{
sat.updateInTree(0, 0, 1en(sat.data)-1, updateLeft, updateRight, val)
func (sat *SegmentAreaTree) updateInTree(treeIndex, left, right, updateLeft,
updateRight,valint){
midTreeIndex, 1eftTreeIndex, rightTreeIndex := left+(right-left)>>1,
sat.1eftchi1d(treeIndex), sat.rightChild(treeIndex)
if left > right 11 1eft >= updateRight 11 right y，则x指向
y。将quiet看成权值。用一个数组记录答案，初始时ans[i]=i。然后对原图做拓扑排序，
对于每一条边，如果发现quiet[ans[v]]>quiet[ans[u]]，则ans[v]的答案为
ans[u]。时间复杂度即为拓扑排序的时间复杂度为o（m+n)。空间复杂度需要o（m）的数组建
图，需要o（n）的数组记录入度以及存储队列，所以空间复杂度为o（m+n）。
代码
func loudAndRich(richer [][]int, quiet []int) []int {
edges := make([][]int,len(quiet))
for i := range edges {
edges[i] = []int{}
indegrees := make([]int, len(quiet))
for _, edge := range richer {
nl, n2 := edge[0], edge[1]
edges[n1] = append(edges[n1] , n2)
indegrees[n2]++
res := make([]int, len(quiet))
for i := range res {
res[i] = i
{}u[] =: ananb
for i, v := range indegrees {
if v == 0 {
queue = append(queue, i)
for len(queue)>0{
nexts = []int{}
for _, nl := range queue {
---
## Page 815
for _, n2 := range edges[n1] {
indegrees [n2]--
if quiet[res[n2]] > quiet[res[n1]] {
res[n2]  =  res[n1]
if indegrees[n2] == 0 {
nexts = append(nexts, n2)
1
queue = nexts
return res
852.PeakIndexinaMountainArray
题目
Let's call an array A a mountoin if the following properties hold:
●A.1ength >= 3
●There exists some 0 A[i+1] > ... > A[A.length - 1]
Given an array that is definitely a mountain, return any  such that A[0]  A[i+1] >...  >A[A. length -1]
Example 1:
Input: [0,1,0]
output: 1
Example 2:
Input: [0,2,1,0]
output: 1
Note:
1.3 = 3
-[->[> ->1>0 
给定—个确定为山脉的数组，返回任何满足A[0]A[i+1] >.>A[A.length
-1]的i的值。
提示：
●3 >1
if A[mid]  >A[mid+1]&&A[mid] >A[mid-1]{
return mid
if A[mid]> A[mid+1] && A[mid] A[mid-1]{
1ow = mid + 1
}
return 0
//解法二二分
func peakIndexInMountainArrayl(A []int) int {
1ow, high := 0, 1en(A) -1
for low >1
---