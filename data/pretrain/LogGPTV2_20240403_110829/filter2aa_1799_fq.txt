If someone is logged on and a process initiates a shutdown by calling the Windows ns 
function, a message is sent to that session’s Csrss instructing it to perform the shutdown. Csrss in turn 
impersonates the caller and sends an RPC message to Winlogon, telling it to perform a system shut-
down. Winlogon checks whether the system is in the middle of a hybrid boot transition (for further 
details about hybrid boot, see the ybernation and Fast Startup section later in this chapter), then 
impersonates the currently logged-on user (who might or might not have the same security context as 
838 
CHAPTER 12 Startup and shutdown
the user who initiated the system shutdown), asks LogonUI to fade out the screen (configurable  
through the registry value KLMSoftwareMicrosoftWindows NCurrentVersionWinlogon 
FadePeriodConfiguration), and calls ns with special internal flags. Again, this call causes a 
message to be sent to the Csrss process inside that session, requesting a system shutdown.
This time, Csrss sees that the request is from Winlogon and loops through all the processes in the 
logon session of the interactive user (again, not the user who reuested a shutdown) in reverse order 
of their sunleel. A process can specify a shutdown level, which indicates to the system when it 
wants to exit with respect to other processes, by calling eressunreers. Valid shut-
down levels are in the range 0 through 1023, and the default level is 640. Explorer, for example, sets 
its shutdown level to 2, and Task Manager specifies 1. For each active process that owns a top-level 
window, Csrss sends the O message to each thread in the process that has 
a Windows message loop. If the thread returns TRUE, the system shutdown can proceed. Csrss then 
sends the O Windows message to the thread to request it to exit. Csrss waits the num-
ber of seconds defined in KCUControl PanelDesktopungAppTimeout for the thread to exit. (The 
default is 5000 milliseconds.)
If the thread doesn’t exit before the timeout, Csrss fades out the screen and displays the hung-
program screen shown in Figure 12-14. (ou can disable this screen by creating the registry value KCU
Control PanelDesktopAutoEndTasks and setting it to 1.) This screen indicates which programs are 
currently running and, if available, their current state. Windows indicates which program isn’t shut-
ting down in a timely manner and gives the user a choice of either killing the process or aborting the 
shutdown. (There is no timeout on this screen, which means that a shutdown reuest could wait forever 
at this point.) Additionally, third-party applications can add their own specific information regarding 
statefor example, a virtualization product could display the number of actively running virtual ma-
chines (using the unlesnree API).
FIGURE 12-14 ung-program screen.
CHAPTER 12 Startup and shutdown
839
EXPERIMENT: Witnessing the HungAppTimeout
ou can see the use of the ungAppTimeout registry value by running Notepad, entering text 
into its editor, and then logging off. After the amount of time specified by the ungAppTimeout 
registry value has expired, Csrss.exe presents a prompt that asks you whether you want to end 
the Notepad process, which has not exited because it’s waiting for you to tell it whether to save 
the entered text to a file. If you select Cancel, Csrss.exe aborts the shutdown.
As a second experiment, if you try shutting down again (with Notepad’s query dialog box still 
open), Notepad displays its own message box to inform you that shutdown cannot cleanly proceed. 
owever, this dialog box is merely an informational message to help usersCsrss.exe will still con-
sider that Notepad is hung and display the user interface to terminate unresponsive processes.
If the thread does exit before the timeout, Csrss continues sending the O/
O message pairs to the other threads in the process that own windows. Once all the 
threads that own windows in the process have exited, Csrss terminates the process and goes on to the 
next process in the interactive session.
If Csrss finds a console application, it invokes the console control handler by sending the 
OO event. (Only service processes receive the O event on 
shutdown.) If the handler returns , Csrss kills the process. If the handler returns  or doesn’t 
respond by the number of seconds defined by KCUControl PanelDesktopWaitToKillTimeout (the 
default is 5,000 milliseconds), Csrss displays the hung-program screen shown in Figure 12-14.
Next, the Winlogon state machine calls ns to have Csrss terminate any COM processes 
that are part of the interactive user’s session.
At this point, all the processes in the interactive user’s session have been terminated. Wininit next 
calls ns, which this time executes within the system process context. This causes Wininit 
to send a message to the Csrss part of session 0, where the services live. Csrss then looks at all the pro-
cesses belonging to the system context and performs and sends the O/
O messages to GUI threads (as before). Instead of sending OO, 
however, it sends O to console applications that have registered control 
handlers. Note that the SCM is a console program that registers a control handler. When it receives the 
shutdown reuest, it in turn sends the service shutdown control message to all services that registered 
EXPERIMENT: Witnessing the HungAppTimeout
ou can see the use of the ungAppTimeout registry value by running Notepad, entering text 
into its editor, and then logging off. After the amount of time specified by the ungAppTimeout 
registry value has expired, Csrss.exe presents a prompt that asks you whether you want to end 
the Notepad process, which has not exited because it’s waiting for you to tell it whether to save 
the entered text to a file. If you select Cancel, Csrss.exe aborts the shutdown.
As a second experiment, if you try shutting down again (with Notepad’s query dialog box still
open), Notepad displays its own message box to inform you that shutdown cannot cleanly proceed.
owever, this dialog box is merely an informational message to help usersCsrss.exe will still con-
sider that Notepad is hung and display the user interface to terminate unresponsive processes.
840 
CHAPTER 12 Startup and shutdown
for shutdown notification. For more details on service shutdown (such as the shutdown timeout Csrss 
uses for the SCM), see the Services section in Chapter 10.
Although Csrss performs the same timeouts as when it was terminating the user processes, it 
doesn’t display any dialog boxes and doesn’t kill any processes. (The registry values for the system pro-
cess timeouts are taken from the default user profile.) These timeouts simply allow system processes 
a chance to clean up and exit before the system shuts down. Therefore, many system processes are in 
fact still running when the system shuts down, such as Smss, Wininit, Services, and LSASS.
Once Csrss has finished its pass notifying system processes that the system is shutting down, 
Wininit wakes up, waits 60 seconds for all sessions to be destroyed, and then, if needed, invokes System 
Restore (at this stage no user process is active in the system, so the restore application can process all 
the needed files that may have been in use before). Wininit finishes the shutdown process by shutting 
down LogonUi and calling the executive subsystem function unyse. This function calls the 
function eyseere to orchestrate the shutdown of drivers and the rest of the executive 
subsystems (Plug and Play manager, power manager, executive, I/O manager, configuration manager, 
and memory manager).
For example, eyseere calls the I/O manager to send shutdown I/O packets to all 
device drivers that have reuested shutdown notification. This action gives device drivers a chance to 
perform any special processing their device might reuire before Windows exits. The stacks of worker 
threads are swapped in, the configuration manager flushes any modified registry data to disk, and the 
memory manager writes all modified pages containing file data back to their respective files. If the 
option to clear the paging file at shutdown is enabled, the memory manager clears the paging file at 
this time. The I/O manager is called a second time to inform the file system drivers that the system is 
shutting down. System shutdown ends in the power manager. The action the power manager takes 
depends on whether the user specified a shutdown, a reboot, or a power down.
Modern apps all rely on the Windows Shutdown Interface (WSI) to properly shut down the sys-
tem. The WSI API still uses RPC to communicate between processes and supports the grace period. 
The grace period is a mechanism by which the user is informed of an incoming shutdown, before the 
shutdown actually begins. This mechanism is used even in case the system needs to install updates. 
Advapi32 uses WSI to communicate with Wininit. Wininit ueues a timer, which fires at the end of the 
grace period and calls Winlogon to initialize the shutdown request. Winlogon calls ns, and 
the rest of the procedure is identical to the previous one. All the UWP applications (and even the new 
Start menu) use the ShutdownUX module to switch off the system. ShutdownUX manages the power 
transitions for UWP applications and is linked against Advapi32.dll.
Hibernation and Fast Startup
To improve the system startup time, Windows 8 introduced a new feature called Fast Startup (also 
known as hybrid boot). In previous Windows editions, if the hardware supported the S4 system power-
state (see Chapter 6  of Part 1 for further details about the power manager), Windows allowed the user 
to put the system in ibernation mode. To properly understand Fast Startup, a complete description of 
the ibernation process is needed.
CHAPTER 12 Startup and shutdown
841
When a user or an application calls euspene API, a worker item is sent to the power man-
ager. The worker item contains all the information needed by the kernel to initialize the power state 
transition. The power manager informs the prefetcher of the outstanding hibernation request and 
waits for all its pending I/Os to complete. It then calls the eyseere kernel API. 
eyseere is the key function that orchestrates the entire hibernation process. The 
routine checks that the caller token includes the Shutdown privilege, synchronizes with the Plug and 
Play manager, Registry, and power manager (in this way there is no risk that any other transactions 
could interfere in the meantime), and cycles against all the loaded drivers, sending an 
O Irp to each of them. In this way the power manager informs each driver that a power operation
is started, so the driver’s devices must not start any more I/O operations or take any other action that
would prevent the successful completion of the hibernation process. If one of the reuests fails (per-
haps a driver is in the middle of an important I/O), the procedure is aborted.
The power manager uses an internal routine that modifies the system boot configuration data (BCD) 
to enable the Windows Resume boot application, which, as the name implies, attempts to resume the 
system after the hibernation. (For further details, see the section “The Windows Boot Manager” earlier 
in this chapter). The power manager
I 
Opens the BCD object used to boot the system and reads the associated Windows Resume
application GUID (stored in a special unnamed BCD element that has the value 0x23000003).
I 
Searches the Resume object in the BCD store, opens it, and checks its description. Writes the
device and path BCD elements, linking them to the WindowsSystem32winresume.efi file lo-
cated in the boot disk, and propagates the boot settings from the main system BCD object (like
the boot debugger options). Finally, it adds the hibernation file path and device descriptor into
filep and fileee BCD elements.
I 
Updates the root Boot Manager BCD object writes the resumeobject BCD element with the
GUID of the discovered Windows Resume boot application, sets the resume element to 1, and, in
case the hibernation is used for Fast Startup, sets the hiberboot element to 1.
Next, the power manager flushes the BCD data to disk, calculates all the physical memory ranges 
that need to be written into the hibernation file (a complex operation not described here), and sends a 
new power IRP to each driver (O function). This time the drivers must put their de-
vice to sleep and don’t have the chance to fail the reuest and stop the hibernation process. The system 
is now ready to hibernate, so the power manager starts a “sleeper” thread that has the sole purpose of 
powering the machine down. It then waits for an event that will be signaled only when the resume is 
completed (and the system is restarted by the user). 
The sleeper thread halts all the CPUs (through DPC routines) except its own, captures the system 
time, disables interrupts, and saves the CPU state. It finally invokes the power state handler routine 
(implemented in the AL), which executes the ACPI machine code needed to put the entire system to 
sleep and calls the routine that actually writes all the physical memory pages to disk. The sleeper thread 
uses the crash dump storage driver to emit the needed low-level disk I/Os for writing the data in the 
hibernation file.
842 
CHAPTER 12 Startup and shutdown
The Windows Boot Manager, in its earlier boot stages, recognizes the resume BCD element (stored 
in the Boot Manager BCD descriptor), opens the Windows Resume boot application BCD object, and 
reads the saved hibernation data. Finally, it transfers the execution to the Windows Resume boot ap-
plication (Winresume.efi). n, the entry point routine of Winresume, reinitializes the boot library 
and performs different checks on the hibernation file
I 
Verifies that the file has been written by the same executing processor architecture
I 
Checks whether a valid page file exists and has the correct size
I 
Checks whether the firmware has reported some hardware configuration changes (through the
FADT and FACS ACPI tables)
I 
Checks the hibernation file integrity
If one of these checks fails, Winresume ends the execution and returns control to the Boot Manager, 
which discards the hibernation file and restarts a standard cold boot. On the other hand, if all the previ-
ous checks pass, Winresume reads the hibernation file (using the UEFI boot library) and restores all the 
saved physical pages contents. Next, it rebuilds the needed page tables and memory data structures, 
copies the needed information to the OS context, and finally transfers the execution to the Windows ker-
nel, restoring the original CPU context. The Windows kernel code restarts from the same power manager 
sleeper thread that originally hibernated the system. The power manager reenables interrupts and thaws 
all the other system CPUs. It then updates the system time, reading it from the CMOS, rebases all the 
system timers (and watchdogs), and sends another O Irp to each system driver, asking 
them to restart their devices. It finally restarts the prefetcher and sends it the boot loader log for further 
processing. The system is now fully functional the system power state is S0 (fully on).
Fast Startup is a technology that’s implemented using hibernation. When an application passes 
the O flag to the ns API or when a user clicks the Shutdown 
start menu button, if the system supports the S4 (hibernation) power state and has a hibernation file 
enabled, it starts a hybrid shutdown. After Csrss has switched off all the interactive session processes, 
session 0 services, and COM servers (see the Shutdown section for all the details about the actual 
shutdown process), Winlogon detects that the shutdown request has the Hybrid flag set, and, instead 
of waking up the shutdown code of Winint, it goes into a different route. The new Winlogon state 
uses the ernrn system API to switch off the monitor it next informs LogonUI about the 
outstanding hybrid shutdown, and finally calls the nleern API, asking for a system 
hibernation. The procedure from now on is the same as the system hibernation. 
CHAPTER 12 Startup and shutdown
843
EXPERIMENT: Understanding hybrid shutdown
ou can see the effects of a hybrid shutdown by manually mounting the BCD store after the system 
has been switched off, using an external OS. First, make sure that your system has Fast Startup 
enabled. To do this, type Control Panel in the Start menu search box, select System and Security, 
and then select Power Options. After clicking Choose What The Power Button does, located in 
the upper-left side of the Power Options window, the following screen should appear
As shown in the figure, make sure that the Turn On Fast Startup option is selected. 
Otherwise, your system will perform a standard shutdown. You can shut down your workstation 
using the power button located in the left side of the Start menu. Before the computer shuts 
down, you should insert a DVD or USB flash drive that contains the external OS (a copy of a live 
Linux should work well). For this experiment, you can’t use the Windows Setup Program (or any 
WinRE based environments) because the setup procedure clears all the hibernation data before 
mounting the system volume. 
EXPERIMENT: Understanding hybrid shutdown
ou can see the effects of a hybrid shutdown by manually mounting the BCD store after the system
has been switched off, using an external OS. First, make sure that your system has Fast Startup
enabled. To do this, type Control Panel in the Start menu search box, select System and Security, 
System and Security, 
System and Security
and then select Power Options. After clicking Choose What The Power Button does, located in 
the upper-left side of the Power Options window, the following screen should appear
As shown in the figure, make sure that the Turn On Fast Startup option is selected. 
Otherwise, your system will perform a standard shutdown. You can shut down your workstation 
using the power button located in the left side of the Start menu. Before the computer shuts 
down, you should insert a DVD or USB flash drive that contains the external OS (a copy of a live 
Linux should work well). For this experiment, you can’t use the Windows Setup Program (or any 
WinRE based environments) because the setup procedure clears all the hibernation data before 
mounting the system volume. 
844 
CHAPTER 12 Startup and shutdown
When you switch on the workstation, perform the boot from an external DVD or USB drive. 
This procedure varies between different PC manufacturers and usually reuires accessing the 
BIOS interface. For instructions on accessing the BIOS and performing the boot from an external 
drive, check your workstation’s user manual. (For example, in the Surface Pro and Surface Book 
laptops, usually it’s sufficient to press and hold the Volume Up button before pushing and releas-
ing the Power button for entering the BIOS configuration.) When the new OS is ready, mount 
the main UEFI system partition with a partitioning tool (depending on the OS type). We don’t 
describe this procedure. After the system partition has been correctly mounted, copy the system 
Boot Configuration Data file, located in EFIMicrosoft BootBCD, to an external drive (or in the 
same USB flash drive used for booting). Then you can restart your PC and wait for Windows to 
resume from hibernation.
After your PC restarts, run the Registry Editor and open the root O 
registry key. Then from the File menu, select Load Hive. Browse for your saved BCD file, select 
Open, and assign the BCD key name for the new loaded hive. Now you should identify the main 
Boot Manager BCD object. In all Windows systems, this root BCD object has the 9DEA862C-
5CDD-4E70-ACC1-F32B344D4795 GUID. Open the relative key and its leens subkey. If the 
system has been correctly switched off with a hybrid shutdown, you should see the resume and 
hiberboot BCD elements (the corresponding keys names are 26000005 and 26000025 see Table 
12-2 for further details) with their leen registry value set to 1. 
To properly locate the BCD element that corresponds to your Windows Installation, use the 
displayorder element (key named 24000001), which lists all the installed OS boot entries. In 
the leen registry value, there is a list of all the GUIDs of the BCD objects that describe the 
installed operating systems loaders. Check the BCD object that describes the Windows Resume 
application, reading the GUID value of the resumeobject BCD element (which corresponds to the 
23000006 key). The BCD object with this GUID includes the hibernation file path into the filepath 
element, which corresponds to the key named 22000002.
When you switch on the workstation, perform the boot from an external DVD or USB drive. 
This procedure varies between different PC manufacturers and usually reuires accessing the 
BIOS interface. For instructions on accessing the BIOS and performing the boot from an external 
drive, check your workstation’s user manual. (For example, in the Surface Pro and Surface Book 
laptops, usually it’s sufficient to press and hold the Volume Up button before pushing and releas-
ing the Power button for entering the BIOS configuration.) When the new OS is ready, mount 
the main UEFI system partition with a partitioning tool (depending on the OS type). We don’t 
describe this procedure. After the system partition has been correctly mounted, copy the system 
Boot Configuration Data file, located in EFIMicrosoftBootBCD, to an external drive (or in the 
same USB flash drive used for booting). Then you can restart your PC and wait for Windows to 
resume from hibernation.
After your PC restarts, run the Registry Editor and open the root O
registry key. Then from the File menu, select Load Hive. Browse for your saved BCD file, select 
Open, and assign the BCD key name for the new loaded hive. Now you should identify the main 
Boot Manager BCD object. In all Windows systems, this root BCD object has the 9DEA862C-
5CDD-4E70-ACC1-F32B344D4795 GUID. Open the relative key and its leens subkey. If the 
system has been correctly switched off with a hybrid shutdown, you should see the resume and 
hiberboot BCD elements (the corresponding keys names are 26000005 and 26000025 see Table 
hiberboot BCD elements (the corresponding keys names are 26000005 and 26000025 see Table 
hiberboot
12-2 for further details) with their leen registry value set to 1. 
leen registry value set to 1. 
leen
To properly locate the BCD element that corresponds to your Windows Installation, use the 
displayorder element (key named 24000001), which lists all the installed OS boot entries. In 
displayorder element (key named 24000001), which lists all the installed OS boot entries. In 
displayorder
the leen registry value, there is a list of all the GUIDs of the BCD objects that describe the 
leen registry value, there is a list of all the GUIDs of the BCD objects that describe the 
leen
installed operating systems loaders. Check the BCD object that describes the Windows Resume 
application, reading the GUID value of the resumeobject BCD element (which corresponds to the 
resumeobject BCD element (which corresponds to the 
resumeobject
23000006 key). The BCD object with this GUID includes the hibernation file path into the filepath 
element, which corresponds to the key named 22000002.
CHAPTER 12 Startup and shutdown
845
Windows Recovery Environment (WinRE)
The Windows Recovery Environment provides an assortment of tools and automated repair technolo-
gies to fix the most common startup problems. It includes six main tools
I 
System Restore Allows restoring to a previous restore point in cases in which you can’t boot