[tool.poetry.dependencies]
# Get the latest revision on the branch named "next"
requests = { git = "https://github.com/kennethreitz/requests.git", branch = "next" }
# Get a revision by its commit hash
flask = { git = "https://github.com/pallets/flask.git", rev = "38eb5d3b" }
# Get a revision by its tag
numpy = { git = "https://github.com/numpy/numpy.git", tag = "v0.13.2" }
```
When using `poetry add` you can add:
* A https cloned repo: `poetry add
    git+https://github.com/sdispater/pendulum.git`
* A ssh cloned repo: `poetry add
    git+ssh://PI:EMAIL/sdispater/pendulum.git`
If you need to checkout a specific branch, tag or revision, you can specify it
when using add:
```bash
poetry add git+https://github.com/sdispater/pendulum.git#develop
poetry add git+https://github.com/sdispater/pendulum.git#2.0.5
```
### [path dependencies](https://python-poetry.org/docs/dependency-specification/#path-dependencies)
To depend on a library located in a local directory or file, you can use the path property:
```toml
[tool.poetry.dependencies]
# directory
my-package = { path = "../my-package/", develop = false }
# file
my-package = { path = "../my-package/dist/my-package-0.1.0.tar.gz" }
```
When using `poetry add`, you can point them directly to the package or the file:
```bash
poetry add ./my-package/
poetry add ../my-package/dist/my-package-0.1.0.tar.gz
poetry add ../my-package/dist/my_package-0.1.0.whl
```
If you want the dependency to be installed in editable mode you can specify it
in the `pyproject.toml` file. It means that changes in the local directory will be
reflected directly in environment.
```toml
[tool.poetry.dependencies]
my-package = {path = "../my/path", develop = true}
```
### [url dependencies](https://python-poetry.org/docs/dependency-specification/#url-dependencies)
To depend on a library located on a remote archive, you can use the url property:
```toml
[tool.poetry.dependencies]
# directory
my-package = { url = "https://example.com/my-package-0.1.0.tar.gz" }
```
With the corresponding add call:
```bash
poetry add https://example.com/my-package-0.1.0.tar.gz
```
### [Python restricted dependencies](https://python-poetry.org/docs/dependency-specification/#python-restricted-dependencies)
You can also specify that a dependency should be installed only for specific
Python versions:
```toml
[tool.poetry.dependencies]
pathlib2 = { version = "^2.2", python = "~2.7" }
[tool.poetry.dependencies]
pathlib2 = { version = "^2.2", python = "~2.7 || ^3.2" }
```
### [Multiple constraints dependencies](https://python-poetry.org/docs/dependency-specification/#multiple-constraints-dependencies)
Sometimes, one of your dependency may have different version ranges depending on
the target Python versions.
Let’s say you have a dependency on the package `foo` which is only compatible with
Python `=2.6.1
 - tzlocal >=1.4
 - pytzdata >=2017.2.2
```
By default it will print all the dependencies, if you pass `--no-dev` it will
only show your package's ones.
With the `-l` or `--latest` it will show the latest version of the packages, and
with `-o` or `--outdated` it will show the latest version but only for packages
that are outdated.
## [Search for dependencies](https://python-poetry.org/docs/cli/#search)
This command searches for packages on a remote index.
```bash
poetry search requests pendulum
```
## [Export requirements to
requirements.txt](https://python-poetry.org/docs/cli/#export)
```bash
poetry export -f requirements.txt --output requirements.txt
```
## [Project setup](https://python-poetry.org/docs/basic-usage/#project-setup)
If you don't already have a [cookiecutter](cookiecutter.md) for your python
projects, you can use `poetry new poetry-demo`, and it will create the
`poetry-demo` directory with the following content:
```
poetry-demo
├── pyproject.toml
├── README.rst
├── poetry_demo
│   └── __init__.py
└── tests
    ├── __init__.py
    └── test_poetry_demo.py
```
If you want to use the `src` project structure, pass the `--src` flag.
## [Checking what package is using a dependency](https://github.com/python-poetry/poetry/pull/2086)
Even though `poetry` [is supposed to
show](https://github.com/python-poetry/poetry/issues/1906) the information of
which packages depend on a specific package with `poetry show package`, I don't
see it.
Luckily [snejus made a small script that shows the
information](https://github.com/python-poetry/poetry/pull/2086). Save it
somewhere in your `PATH`.
```bash
_RED='\\\\e[1;31m&\\\\e[0m'
_GREEN='\\\\e[1;32m&\\\\e[0m'
_YELLOW='\\\\e[1;33m&\\\\e[0m'
_format () {
    tr -d '"' |
        sed "s/ \+>[^ ]* \+= ~ a window
        sed "s/ \+>[^ ]* *$/$_GREEN/" |     # >= no upper limit
        sed "/>/ !s/\| None
```
The keyring was configured with:
```bash
poetry config pypi-token.pypi internet/pypi.token
```
And I'm sure that the keyring works because `python -m keyring get internet
pypi.token` works.
I've also tried with the environmental variable `POETRY_PYPI_TOKEN_PYPI` but [it
didn't work either](https://github.com/python-poetry/poetry/issues/2359). And
setting the configuration as `poetry config http-basic.pypi __token__
internet/pypi.token`.
Finally I had to hardcode the token with `poetry config pypi-token.pypi "$(pass
show internet/pypi.token)`. Although I can't find where it's storing the value
:S.
# References
* [Git](https://github.com/python-poetry/poetry)
* [Docs](https://python-poetry.org/docs/)