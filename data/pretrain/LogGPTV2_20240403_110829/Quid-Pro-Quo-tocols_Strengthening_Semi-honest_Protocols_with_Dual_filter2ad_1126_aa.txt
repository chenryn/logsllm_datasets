title:Quid-Pro-Quo-tocols: Strengthening Semi-honest Protocols with Dual
Execution
author:Yan Huang and
Jonathan Katz and
David Evans
2012 IEEE Symposium on Security and Privacy
Quid-Pro-Quo-tocols: Strengthening Semi-Honest Protocols with Dual Execution
Yan Huang
University of Virginia
PI:EMAIL
Jonathan Katz
University of Maryland
PI:EMAIL
David Evans
University of Virginia
PI:EMAIL
Abstract—Known protocols for secure two-party computa-
tion that are designed to provide full security against malicious
behavior are signiﬁcantly less efﬁcient than protocols intended
only to thwart semi-honest adversaries. We present a concrete
design and implementation of protocols achieving security
guarantees that are much stronger than are possible with
semi-honest protocols, at minimal extra cost. Speciﬁcally, we
consider protocols in which a malicious adversary may learn a
single (arbitrary) bit of additional information about the honest
party’s input. Correctness of the honest party’s output is still
guaranteed. Adapting prior work of Mohassel and Franklin,
the basic idea in our protocols is to conduct two separate
runs of a (speciﬁc) semi-honest, garbled-circuit protocol, with
the parties swapping roles, followed by an inexpensive secure
equality test. We provide a rigorous deﬁnition and prove that
this protocol leaks no more than one additional bit against a
malicious adversary. In addition, we propose some heuristic
enhancements to reduce the overall
information a cheating
adversary learns. Our experiments show that protocols meeting
this security level can be implemented at cost very close to
that of protocols that only achieve semi-honest security. Our
results indicate that this model enables the large-scale, practical
applications possible within the semi-honest security model,
while providing stronger security guarantees.
Keywords-secure two-party computation, privacy-preserving
protocols.
I. INTRODUCTION
Protocols for secure two-party computation allow two
mutually distrusting parties to compute a function that
depends on both their inputs while ensuring correctness,
privacy, and more, without relying on a trusted third party.
Recent results [29, 28, 34, 14, 16] have shown that it is
feasible to implement generic protocols for secure two-party
computation (where by “generic” we mean protocols that can
compute arbitrary functions speciﬁed as a boolean or arith-
metic circuit) based on Yao’s garbled-circuit approach [36],
in some cases quite efﬁciently [17, 15]. To obtain reasonable
performance, however, many of these works [29, 14, 16]
and others that rely on them [17, 15] assume the semi-
honest (or honest-but-curious) model in which the adversary
is assumed to always follow the protocol but may try to
learn information from the protocol transcript beyond what
is allowed.
Several generic approaches are known for achieving secu-
rity against malicious adversaries (i.e., adversaries who may
arbitrarily deviate from the protocol speciﬁcation). Some
approaches rely on zero-knowledge proofs of correct be-
havior [11, 22]. Others rely on “cut-and-choose” techniques
to detect dishonesty [25, 33, 35, 27, 24]. Another recent
approach uses message-authentication techniques to ensure
that parties use correct values throughout
the computa-
tion [32]. Protocols produced by any of these approaches
exhibit a slowdown of several orders of magnitude compared
to protocols with semi-honest security. The slowdown is
not only due to increased computation and communication;
a (potentially) more signiﬁcant issue is the memory usage
required by some of the known protocols. As an example,
the Lindell-Pinkas protocol [25] requires hundreds of copies
of the garbled circuits to be transmitted before veriﬁcation
and evaluation, and so does not appear to be compatible
with pipelined circuit execution (a technique that makes
secure computation memory efﬁcient [16]), at
least not
without introducing additional overhead. As one data point
supporting this claim, a recent implementation of secure
two-party computation of AES [35] (with security against
malicious adversaries) required one of the parties to use
about 190 MB of storage. This suggests that the resources
required in order to achieve (full) security against malicious
adversaries can be prohibitive, even for many small-scale
computations.
Mohassel and Franklin [30] proposed a relaxed deﬁnition
of security in which,
informally, a malicious adversary
may be able to learn a small number of additional bits of
information about the honest party’s input, beyond what is
implied by the output (a formal deﬁnition is in Section V).
This deﬁnition may sufﬁce for many realistic scenarios in
which secure computation would be used. Note that even
fully secure protocols leak information about the honest
party’s input
in the function output. Depending on the
speciﬁc function and the control the adversary has over its
own input this information leakage may be substantial and
hard to characterize.
In addition to proposing the new security notion discussed
above, Mohassel and Franklin also present a general ap-
proach to realizing that notion. At a high level, the idea
is to run two independent executions of a (speciﬁc) semi-
honest protocol, with the parties swapping roles in the two
executions. This is followed by an equality test on particular
values held by the two parties. See Section III for details.
Additional related work is discussed in Section II-C.
A. Contributions
In this work we ﬂesh out and implement an optimized
version of the Mohassel-Franklin protocol. We describe a
speciﬁc, highly efﬁcient mechanism for carrying out the
equality test (Section III-B) in their approach, and implement
© 2012, Yan Huang. Under license to IEEE.
DOI 10.1109/SP.2012.43
272
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
their protocol, incorporating pipelined execution and other
efﬁciency optimizations (Section VI). We provide a precise
deﬁnition of their security notion (specialized for the case of
1-bit leakage), formally specify the details of the Mohassel-
Franklin protocol, and give a rigorous proof that
their
“dual-execution” approach satisﬁes the given deﬁnition (Sec-
tion V). Our experimental results (Section VI-C) show that
it is possible to obtain performance competitive with state-
of-the-art semi-honest protocols, while achieving meaningful
(though not complete) protection against malicious behavior.
In Section VII we present two heuristic strategies for
further limiting what an adversary can learn. In our ﬁrst
approach, the actual function output is revealed only after
the equality test is completed successfully. This means the
adversary may learn an unallowed bit of information, but
only at the expense of failing to learn the actual output some
of the time. The second approach ensures that the attacker
learns at most one more bit of the output than the honest
party. Both these enhancements are inexpensive, and their
complexity depends only on the length of the output.
II. BACKGROUND
The main cryptographic tools we use are garbled circuits
and oblivious transfer, which we brieﬂy introduce next.
Section II-C summarizes previous work towards secure
computation against stronger classes of adversaries.
A. Garbled Circuits
Garbled circuits [36] allow two semi-honest parties to
compute an arbitrary function f (x0, x1) that depends on
their respective private inputs, x0 and x1, without leaking
any information about their inputs beyond what is revealed
by the function output itself. One party, acting as the circuit
generator, produces a garbled circuit that is evaluated by the
other party, known as the circuit evaluator. The result is an
“encrypted” output, which can then be mapped to its actual
value and revealed to either or both parties. We provide an
overview here; for technical details and a proof of security,
see Lindell and Pinkas [26].
The basic idea is to transform a boolean circuit into a
garbled circuit that operates on labels (i.e., cryptographic
keys) instead of bits. Any binary gate, g, which has two
input wires W0, W1 and output wire W2, can be converted
into a garbled gate. First, generate random labels w0
i and
i to represent 0 and 1 on each wire Wi. Then, generate a
w1
truth table containing the four entries
Encws0
(wg(s0,s1)
2
)
0 ,ws1
1
for each s0, s1 ∈ {0, 1} (where s0, s1 denote the 1-bit
signals on wires W0, W1, respectively), and randomly per-
mute the table. This truth table is called a garbled gate.
Observe that given the garbled gate and labels ws0
0 and ws1
1 ,
it is possible to recover wg(s0,s1)
. Thus, given the labels
that correspond to some set of input values for the entire
circuit, it is possible for the circuit evaluator to recover labels
corresponding to the output of the circuit on those inputs. If
2
the circuit generator provides a way to map those labels back
to bits, the circuit evaluator can recover the actual output.
The only thing that remains is to provide a mechanism that
allows the circuit evaluator to obtain input-wire labels for
the bits corresponding to the inputs of the two parties. The
circuit generator can simply send the appropriate labels for
its own input to the circuit evaluator since these labels reveal
nothing about the circuit generator’s input but are merely
randomly chosen labels. The circuit evaluator obtains the
input-wire labels for its own input using oblivious transfer,
described in Section II-B.
In summary, a garbled-circuit protocol involves parties
agreeing to a circuit that computes the desired function, and
then following these steps: (1) the circuit generator garbles
each gate in the circuit; (2) the circuit generator sends the
garbled gates, along with the wire labels corresponding to
its own inputs; (3) the circuit evaluator obtains the wire
labels corresponding to its inputs from the generator using an
oblivious transfer protocol; (4) the circuit evaluator evaluates
the circuit by successively decrypting entries of each garbled
gate until reaching the output wires; and (5) the generator
provides a way to map output-wire labels to bits,
thus
allowing the evaluator to compute the actual output.
The main bottleneck in garbled-circuit protocols is gen-
erating and evaluating each gate, since this requires four
encryptions for the circuit generator and (as described) four
decryptions for the circuit evaluator. Many techniques have
been developed to reduce the costs of executing garbled
circuits, including the point-and-permute technique that al-
lows the circuit evaluator to decrypt only a single entry
the free-
(rather than all four) in a garbled gate [29];
XOR technique [23] that allows XOR gates to be executed
without any encryption operations; Garbled Row Reduction
(GRR) [34] that reduces the size of a garbled gate to
three ciphertexts (thus saving 25% of network bandwidth);
and pipelined execution that parallelizes circuit generation
and evaluation [16]. Our implementation uses all of these
techniques.
B. Oblivious Transfer
An oblivious-transfer (OT) protocol allows a sender to
send one of a possible set of values to a receiver. The
receiver selects and learns only one of the values, and the
sender cannot learn which value the receiver selected. In
particular, a 1-out-of-2 OT protocol [8] allows the sender,
who has two strings b0 and b1, to transfer bσ to the receiver,
who holds a private bit σ. Oblivious-transfer extension [19]
allows the realization of an unbounded number of oblivious
transfers with minimal marginal cost per OT, starting from
a small number of (expensive) “base” OTs.
In our implementation we use the OT-extension protocol
of Ishai et al. [19] with security against malicious adver-
saries, that uses O(k2) “base” OTs for k a statistical security
parameter. More efﬁcient approaches, requiring only O(k)
base OTs, are known [12, 32], but are not used in our
implementation. For the “base” OTs we use the Naor-Pinkas
protocol [31], whose security is based on the computational
273
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
Difﬁe-Hellman assumption in the random-oracle model. This
protocol achieves privacy against malicious adversaries, but
not full (simulation-based) security against malicious adver-
saries (as required by our proof of security in Section V).
Nevertheless, because we use oblivious-transfer extension,
OT is a small fraction of the overall execution time, and
changing the OT protocol used would not substantially
impact our experimental results. The Naor-Pinkas protocol
could easily be adapted to provide (simulation-based) se-
curity against malicious adversaries in the random-oracle
model, with relatively little additional cost.
C. Threat Models
Most previous work in secure computation has assumed
either a semi-honest or malicious threat model [10]. In the
semi-honest (also known as honest-but-curious) model, the
adversary is assumed to follow the protocol as speciﬁed, but
may attempt to learn extra information from the protocol
transcript. In contrast, a malicious adversary may arbitrarily
deviate from the speciﬁed protocol as it attempts to compro-
mise the privacy of the other party’s inputs or correctness
of the obtained result.
Most implementations of generic secure two-party com-
putation have targeted the semi-honest threat model [29, 14,
16], and have used protocols based on Yao’s garbled-circuit
approach. The scalability and efﬁciency of garbled-circuit
protocols have been improved by a series of optimizations
including point-and-permute [29], free-XOR [23], garbled-
row reduction [34], pipelining [16], and library-based mod-
ular circuit construction [16].
Several approaches have been proposed for achieving
security against malicious adversaries [11, 22, 25, 33, 35,
27, 24, 32], some of which have been implemented [28, 34,
35, 32]. However, even the best known protocols are orders-
of-magnitude slower than the best semi-honest protocols.
Aumann and Lindell et al. introduced the covert threat
model [1]. In this model, a cheating adversary is “caught”
with some constant probability, but with the remaining
probability can (potentially) learn the honest party’s entire
input and arbitrarily bias the honest party’s output. If an
adversary is unwilling to take the risk of being caught, then
such protocols will deter cheating altogether. Aumann and
Lindell also show a two-party protocol with covert security
that is only a small constant factor less efﬁcient than the
basic (semi-honest) garbled-circuit protocol.
The single-bit leakage model we consider here is incom-
parable to the covert model. On the one hand, the single-
bit leakage model allows the adversary to always learn one
additional bit about the honest user’s input, without any risk
of being caught. (See Sections IV-A and VII, however, for
some discussion about mitigating what the adversary learns.)
On the other hand, the covert model allows the adversary
to learn the entire input of the honest party with constant
probability. The covert model also allows the adversary to
affect the correctness of the honest party’s output (with
constant probability), something prevented in the single-bit
leakage model.