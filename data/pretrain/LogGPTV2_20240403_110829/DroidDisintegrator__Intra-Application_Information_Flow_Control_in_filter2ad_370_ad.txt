### 4.8 Repackaging

We unpack the application binary (a signed ZIP file with the `.apk` extension, or an APK) and modify the app manifest. Specifically, we add a "process" attribute to each component tag in the manifest, specifying the process under which it runs. Additionally, we include further tags in the manifest to encode allowed inter-process communication (IPC) and process permissions. The modified app is then repackaged into an APK.

### 4.9 Enforcement

#### Package Installation
During the installation of a repackaged app on our modified Android platform, users are prompted to approve app permissions. They are also informed about information flows that are guaranteed not to occur within the app (see Figure 4). These guarantees, derived from the embedded policy, are presented in a simple, user-friendly manner, avoiding the need for users to understand the technical details of decomposition, components, and processes.

**Figure 4:** Scrolling down the app permission view, presented during app installation for user approval and accessible from the "Application Management" menu.

#### App Runtime
To run components in different processes, we utilize the optional and rarely used "process" attribute in the standard Android API, added to component declarations in the repackaged app's manifest. This allows us to run a component or a set of components in a separate, uniquely named process. To enforce the Information Flow Control (IFC) policy, we modify Android's `ActivityManager` service to monitor all cross-process IPC and resource use at the process level (rather than the app level). The monitor allows or denies events based on the policy in the app’s `Manifest.xml` file, the operation initiator’s process UID, and its PID (which identifies the process within the app). Operations requiring permissions are permitted if the policy grants the process those permissions. Components are protected with an extra permission to send IPC to their containing process, granted to the appropriate processes.

The monitor does not handle information flow between processes via Linux system calls; this challenge is well-studied and addressed in prior systems such as Flume [KYB+07], ASM’s Aquifer hooks [HNES14, NE13], and others [XSA12, BDD+12]. Thus, we have reduced the complex intra-app IFC problem to the well-studied inter-process IFC problem.

### 4.10 Implications of Analysis Error

As previously discussed, the dynamic analysis guiding the policy generation is imperfect and relies on heuristics for handling corner cases or critical performance issues. It is essential to understand the implications of these imperfections. Missed flows (false negatives) can result in overly restrictive generated policies, potentially breaking app functionality. Conversely, reported flows that do not actually occur (false positives) can lead to overly permissive policies, which may not be approved by app curators, reviewers, or users. However, neither scenario compromises security: if a policy is approved, the specified information flows will be enforced.

Thus, we err on the side of caution. Impaired functionality, especially at the whole-component level, can be detected through manual or automated testing, such as re-running the app analysis and acceptance tests after decomposition. Unsound policy enforcement would be much less noticeable and harder to analyze.

Notably, we aim to capture only those flows that represent intentional inter-component communication or are important for the app's legitimate operation. Tracking implicit flows would be of little benefit, as they are rarely used for intentional communication and most tracking techniques would generate a high number of false positives [KHHJ08], leading to trivially permissive policies. Not tracking implicit flows does not make DroidDisintegrator more vulnerable; in fact, it enhances security. If an app developer uses implicit flows to smuggle information and circumvent vetting techniques, DroidDisintegrator will not report these flows in the analysis stage but will prevent them during the enforcement stage.

### 5 Empirical Results

We evaluated DroidDisintegrator on third-party apps from the Android app market. We used a snapshot of the Android app market from 2011 (for compatibility with Appsplayground) and selected the 100 apps that use the largest number of permissions. These apps had 20–48 permissions each, typical for popular apps (e.g., the average number of permissions requested across the 10 most popular free non-game apps as of November 2014 was approximately 34). We ran DroidDisintegrator on these apps. In 84 cases, our fuzzer successfully completed the experiment. Some of the remaining 16 apps crashed multiple times, suggesting issues more serious than unwanted information flows; in a few cases, the fuzzer itself malfunctioned. For the 84 successful apps, we generated policies and repackaged them.

Most (43) of the successfully fuzzed apps utilized more than 5 permissions, as detected by fuzzing. DroidDisintegrator identified and enforced preventable information flows in 20 of these apps (approximately 46%). We re-ran these apps under the fuzzer after repackaging, and there was no change in app behavior as far as fuzzing could tell. Manual and heuristic testing also did not reveal any broken functionality. The remaining cases were detected to have information flows from all sources to all sinks used; in these cases, DroidDisintegrator's policy still revoked unused permissions.

The remaining (41) successfully fuzzed apps utilized very few permissions (5 or fewer), as detected by fuzzing, so there were few potential information flows to block. Nonetheless, DroidDisintegrator identified and enforced preventable information flows in 6 of them.

On average, the apps used 15.2 permissions, and after decomposition, each component process used only 4.2 permissions. Thus, we significantly reduced the number of permissions in decomposed apps (to less than a third of their original number).

The most commonly observed type of preventable flow was from the `RECEIVE SMS` source to various sinks (internet, storage, etc.). Inspecting these apps, we found that the entry points and control flow handling incoming SMSs had minimal interaction with the rest of the app. This means the app could, under Android’s normal permission semantics, forward users’ SMS messages to unauthorized parties, but DroidDisintegrator enforces that this capability is not exploited and conveys this to the user. This is demonstrated in Figure 5.

**Figure 5:** Inter-component communication and component resource use graph for "Executive Assist" ("com.appventive.ActiveLock"), a productivity utility. See Figure 3 for notation.

#### Policy Learning Performance
Generating the policy, including fuzzing and dynamic analysis, took an average of 43 minutes over 100 apps, running inside a Ubuntu 11.10 VM with 4 cores and 8 GB of RAM on an Intel Core i7-3720QM 2.6GHz CPU with 32GB of RAM. This process is trivially parallelizable and seems quite practical for developers, app stores, or CISOs.

#### Enforcement Performance
The enforcement itself, performed on the decomposed version of apps, has negligible overhead (merely checking membership of a permission in a set, in a code path that already contains heavyweight RPC). The app decomposition does add some overhead, as it increases the number of app processes (repackaged apps define, on average, 3.8 processes instead of the typical single process) and causes Android to use serialization for some IPC that originally passed arguments as pointers. Systematic evaluation of these overheads is difficult due to the interactive nature of apps, but we provide anecdotal evidence that the overhead is low.

We performed quantitative comparisons between two environments: one with 10 decomposed apps installed (the decomposed environment) and another with the original (non-decomposed) packages installed (non-decomposed environment). In terms of process count, when exercising 3 of the installed apps in sequence under the fuzzer, we observed an average of 51.1 active processes in the decomposed environment versus 50.0 in the non-decomposed environment. Device and app responsiveness: 8 of the installed apps are registered to the "boot complete" broadcast event, and 6 are registered to the "SMS received" broadcast event. Handling of these events is sequential: one app must finish before the next begins. Averaged over 10 reboots, the handling time for the "boot complete" event (time from event dispatch until the last app finishes) was 309 seconds in both environments. Averaged over 100 received SMSs, the handling time for the "SMS received" event was 0.57 seconds for the non-decomposed environment and 0.61 seconds for the decomposed environment (a 6.5% increase).

### 6 Conclusions and Future Directions

In this work, we demonstrated how to constrain the behavior and reduce the risk of Android apps by leveraging the modular, component-centered design of apps to apply Information Flow Control (IFC). Our workflow involves dynamically analyzing apps to deduce a policy about their internal information flows, embedding this policy in the app installation package, and enforcing it after installation. We implemented the required analysis tools, building and improving upon prior research efforts. We applied our analysis to real-world apps and produced useful enforcement policies, reducing both the number of possible information flows within the app and the privileges under which each component runs.

Our approach and findings open up numerous research directions for extensions to new applications and platforms.

#### Fuzzing
Policy generation uses dynamic analysis, which relies on exploring the app's behavior using fuzzing. Code coverage and performance can be improved using state-of-the-art fuzzing mechanisms such as PUMA [HLN+14] and Brahmastra [BHJ+14], once adapted to triggering information flows.

#### Taint Tracking
Better heuristics and taint-tracking would reduce falsely-reported flows and detect decomposable flows, thus tightening the generated policies. Static analysis can also be used. Our system is based on the Android 2.1 branch of TaintDroid, and adapting it to the latest TaintDroid will improve app compatibility and taint accuracy. Analysis support for Android’s ART runtime is desirable and feasible [Gro].

#### Beyond Android
Our approach may be applicable to other platforms, especially modern mobile device platforms that use event-driven frameworks. While Android’s explicit "component" abstraction is particularly convenient, units of similar granularity can be defined by the programmer or synthesized by analyzing data flow from the app’s entry points.

#### Decentralized Information Flow Control (DIFC)
Our approach can be extended to DIFC, allowing discretionary access controls and finer-grained, application-dependent labeling of components and data [KYB+07, KNK+12, JAF+].

#### Side Channels and Covert Channels
As in most works on information flow control and mandatory access controls, our system does not address the risk of covert platform channels [Hu92] or side channels such as cache attacks [OST06, Per05]. We note that covert exploitation of such channels is harder in the context of curated app stores.

#### Enhanced Enforcement Capabilities
It is natural to consider building an Android Security Module (ASM [HNES14]) to enhance DroidDisintegrator’s enforcement abilities. Alternatively, Aura-sium [XSA12] can be used to embed policy enforcement in the app bundle itself.

#### Android M Dynamic Permissions
In upcoming Android Version 6 (Marshmallow), some app permissions are granted at runtime and on-demand. Component process separation can be extended to leverage such a dynamic security label model, where dangerous information flows are reported at runtime and approved by the user on-demand.

#### Declassifiers
Declassifiers are a powerful feature in IFC, allowing otherwise forbidden information flows to occur under specific, explicit, and carefully-reviewed conditions. For example, the constraint that "information must not flow from the contact list into outgoing SMS messages" is desirable but often too restrictive (e.g., it might forbid the application from auto-completing a contact’s phone number when the user composes an SMS). This can be relaxed to the constraint "contact information flowing into outgoing SMS messages must be approved by the user before sending." The relaxation requires a piece of trusted code (e.g., an Activity) that presents to the user whatever the application wants to send in an SMS and (upon user approval) invokes the SMS-sending API. The declassifier’s simple, trusted code can be explicitly designated as such and bundled in source form with the app (along with requisite evidence of consistency with the binary) for inspection by users and app curators.

### Acknowledgments

This work was supported by the Check Point Institute for Information Security; by a Google Faculty Research Award; by the Israeli Ministry of Science and Technology; by the Israeli Centers of Research Excellence I-CORE program (center 4/11); and by the Leona M. & Harry B. Helmsley Charitable Trust.

### References

[AGL+12] Owen Arden, Michael D George, Jed Liu, K Vikram, Aslan Askarov, and Andrew C Myers. Sharing mobile code securely with information flow control. In IEEE Symposium on Security and Privacy 2012. IEEE, 2012.

[ARB13] Steven Arzt, Siegfried Rasthofer, and Eric Bodden. SuSi: A tool for the fully automated classification and categorization of Android sources and sinks. Technical Report TUD-CS-2013-0114, EC SPRIDE, 2013.

[ARF+14] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. In Programming Language Design and Implementation (PLDI) 2014. ACM, 2014.

[AZHL12] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. Pscout: Analyzing the Android permission specification. In ACM Conference on Computer and Communications Security (CCS) 2012. ACM, 2012.

[BBC+13] Aline Bousquet, Jérémie Briffaut, Laurent Clévy, Christian Toinard, Benjamin Venelle, et al. Mandatory access control for the Android Dalvik virtual machine. In ESOS 2013, 2013.

[BDD+12] Sven Bugiel, Lucas Davi, Alexandra Dmitrienko, Thomas Fischer, Ahmad-Reza Sadeghi, and Bhargava Shastry. Towards taming privilege-escalation attacks on Android. In Network and Distributed System Security Symposium (NDSS) 2012, 2012.

[BHJ+14] Ravi Bhoraskar, Seungyeop Han, Jinseong Jeon, Tanzirul Azim, Shuo Chen, Jaeyeon Jung, Suman Nath, Rui Wang, and David Wetherall. Brahmastra: Driving apps to test the security of third-party components. In USENIX Security Symposium 2014. USENIX Association, 2014.

[BJM+15] Paulo Barros, René Just, Suzanne Millstein, Paul Vines, Werner Dietl, Marcelo d’Amorim, and Michael D Ernst. Static analysis of implicit control flow: Resolving Java reflection and Android intents. In IEEE/ACM International Conference on Automated Software Engineering (ASE 2015) 2015, 2015.

[CFB+15] Yinzhi Cao, Yanick Fratantonio, Antonio Bianchi, Manuel Egele, Christopher Kruegel, Giovanni Vigna, and Yan Chen. Edgeminer: Automatically detecting implicit control flow transitions through the Android framework. In Network and Distributed System Security Symposium (NDSS) 2015, 2015.

[CFGW11] Erika Chin, Adrienne Porter Felt, Kate Greenwood, and David Wagner. Analyzing inter-application communication in Android. In International Conference on Mobile Systems, Applications, and Services (MobiSys) 2011. ACM, 2011.

[CGL+14] Landon P Cox, Peter Gilbert, Geoffrey Lawler, Valentin Pistol, Ali Razeen, Bi Wu, and Sai Cheemalapati. Spandex: Secure password tracking for Android. In USENIX Security Symposium 2014, 2014.

[CLM+07] Stephen Chong, Jed Liu, Andrew C Myers, Xin Qi, Krishnaprasad Vikram, Lantian