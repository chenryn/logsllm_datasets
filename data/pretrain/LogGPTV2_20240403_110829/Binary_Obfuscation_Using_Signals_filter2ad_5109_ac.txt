due to poorer cache utilization.
Control Flow Obfuscation
Figure 4(b) shows the effect of our transformations in ob-
fuscating the control ﬂow graph of the program. The sec-
ond column gives, for each program, the actual number
of control ﬂow edges in the original program. These are
counted as follows: each conditional branch gives rise to
two control ﬂow edges; each unconditional branch (di-
rect or indirect) gives rise to a single edge; and each func-
tion call gives two control ﬂow edges—one correspond-
ing to a “call edge” to the callee’s entry point, the other
to a “return edge” from the callee back to the caller. Col-
umn 3 gives the number of control ﬂow edges removed
due to the conversion of control ﬂow instructions to traps,
while column 4 gives the number of bogus control ﬂow
edges added by the obfuscator. Columns 5 and 6 give,
respectively, an upper bound on the overestimation error
and a lower bound on the underestimation error. The re-
maining columns give, for each attack disassembler, the
extent to which it incurs errors in constructing the control
ﬂow graph of the program, as discussed in Section 4.2.
It can be seen from Figure 4(b) that none of the three
attack disassemblers tested fares very well at construct-
ing the control ﬂow graph of the program. Objdump
fails to ﬁnd over 63% of the control ﬂow edges in the
PROGRAM Original Obfuscated Slowdown
)
)
)
(T
1
(T
0
EXECUTION TIME (SECS)
/T
(T
1
0
1.334
1.584
1.043
1.633
0.997
1.003
1.003
2.091
1.030
1.021
1.028
1.210
377.620
1222.992
152.673
247.552
209.502
427.132
302.040
461.828
586.259
240.648
328.563
283.011
140.741
146.367
151.624
210.036
425.971
301.079
220.851
569.163
235.649
319.475
bzip2
crafty
gap
gcc
gzip
mcf
parser
perlbmk
twolf
vortex
vpr
GEOM. MEAN
Figure 5: Effect of Obfuscation on Execution Speed
original program; at the same time, it reports over 71%
spurious edges (relative to the number of original edges
in the program) that are not actually present in the pro-
gram. The exhaustive disassembler fails to ﬁnd over 60%
of the edges in the original program, and reports over
27% spurious edges. IDA Pro fails to ﬁnd over 63% of
the control ﬂow edges in the original program and reports
over 41% spurious edges. Again the results for each dis-
assembler are very consistent across the benchmark pro-
grams.
Also signiﬁcant are the error bounds reported in
columns 5 and 6 of Figure 4(b). These numbers indi-
cate that, even if we suppose perfect disassembly, the re-
sult would incur up to 85.5% overestimation error and at
least 28.93% underestimation error.
Execution Speed
Figure 5 shows the effect of obfuscation on execution
speed. For some programs—such as gap, gzip, mcf,
parser, twolf, vortex, and vpr—the execution characteris-
tics on proﬁling input(s) closely match those on the refer-
ence input, so there is essentially no slowdown. (In fact,
gzip ran faster after obfuscation; we believe this is due to
a combination of cache effects and experimental errors
resulting from clock granularity.) For other programs—
such as crafty, gcc and perlbmk—the proﬁling inputs are
not as good predictors of the runtime characteristics of
the program on the reference inputs, and this results in
signiﬁcant slowdowns: a factor of 1.6 for crafty and gcc
and 2.1 for perlbmk. The mean slowdown seen for all
eleven benchmarks is 21%.
We also measured the effect on execution speed of ob-
fuscating a portion of the hot code blocks. Let θ spec-
ify the fraction of the total number of instructions ex-
USENIX Association
16th USENIX Security Symposium
283
PROGRAM
bzip2
crafty
gap
gcc
gzip
mcf
parser
perlbmk
twolf
vortex
vpr
GEOM. MEAN:
Instrs
44.19
41.09
42.98
46.32
44.26
44.85
44.28
45.34
41.90
39.80
42.31
43.35
OBJDUMP
Blocks
Func
Instrs
EXHAUSTIVE
Blocks
Funcs
69.62
68.70
66.78
68.67
69.56
69.91
68.83
69.08
68.32
69.40
68.19
68.82
89.59
90.26
90.19
89.26
90.25
89.20
91.70
89.80
89.03
93.28
86.67
89.92
89.33
87.92
87.04
87.58
87.13
87.80
88.87
90.09
88.80
93.10
87.49
88.63
(a) Disassembly Errors (Confusion Factor, %)
55.57
55.94
52.64
55.89
53.61
57.32
55.19
55.62
56.29
58.05
54.20
55.46
Instrs
59.88
54.22
55.70
54.67
61.65
58.68
57.85
55.16
57.77
55.96
59.01
57.28
IDA PRO
Blocks
62.94
59.26
57.92
55.49
63.45
61.27
61.27
56.14
61.74
64.04
63.27
60.55
Funcs
85.99
84.71
83.77
82.28
85.18
84.85
85.06
85.89
84.77
90.98
82.16
85.03
60.29
61.04
56.13
58.24
58.91
60.53
59.40
58.82
61.63
65.77
59.91
60.02
∆over
72.60
72.26
69.94
67.18
72.56
72.57
70.65
70.67
71.90
72.37
71.76
71.30
PROGRAM
Eorig
ntrap
nbogus
bzip2
crafty
gap
gcc
gzip
mcf
parser
perlbmk
twolf
vortex
vpr
47933
59507
98793
237491
48467
43376
59823
116711
62210
97242
55187
13933
17243
26603
67818
13931
12329
16688
33748
18061
32507
15811
42236
50868
82374
193570
42722
38220
50858
100298
52916
81734
47414
GEOM. MEAN:
max
∆over
88.11
85.48
83.38
81.51
88.15
88.11
85.01
85.94
85.06
84.05
85.92
85.50
min
∆under
29.07
28.98
26.93
28.56
28.74
28.42
27.90
28.92
29.03
33.43
28.65
28.93
OBJDUMP
IDA PRO
∆under
64.82
62.17
60.90
63.98
64.56
65.32
63.94
64.75
62.27
63.29
61.92
63.43
EXHAUSTIVE
∆over
∆under
61.40
28.31
60.71
25.28
57.20
25.35
25.41
58.36
59.64
29.64
61.46
26.13
59.78
27.77
26.99
59.31
61.48
28.55
65.25
30.28
59.76
27.92
27.37
60.36
∆over
40.44
43.12
41.49
41.93
38.34
42.79
40.87
43.27
40.85
41.62
38.60
41.18
∆under
65.66
62.20
60.84
59.32
66.09
63.74
63.46
59.66
63.94
66.18
65.56
63.28
Key:
Eorig:
ntrap:
nbogus:
(b) Control Flow Errors (%)