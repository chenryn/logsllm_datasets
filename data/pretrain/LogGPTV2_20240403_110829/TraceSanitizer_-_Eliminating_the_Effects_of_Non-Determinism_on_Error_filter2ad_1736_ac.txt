// Get the spawned threads in their order of creation.
foreach t ∈ tc.getOrderedChildren() do
M [t] ← M [tc]“ ”i;
push t to Q;
i ← i + 1;
6
7
12
13
14
15
16
17
Algorithm 1: Memory abstraction algorithm.
input
output : Set O of symbolic memory objects, such that each
: Execution trace σ
concrete memory object referenced in σ is mapped to
exactly one symbolic memory object
1 O ← ∅;
2 foreach e ∈ σ do
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
g idx ← e.getGlobalIndex();
t ← e.getThread();
if e.isAllocation() then
size ← e.getSize();
bAddr ← e.getBaseAddr();
val ← [g idx,
];
l idx ← e.getLocalIndex();
s ← e.isStackAllocation();
o ← (bAddr, t, l idx, size, val, s);
append o to O;
o ← getObject(e.getBaseAddr());
o.updateValidity(g idx);
sp[t] ← g idx;
foreach o ∈ O s.t. o.getThread()
= t ∧ o.s ∧ o.getValidityStart() > sp[t] do
o.updateEndValidity(g idx);
sp[t] ← restoreStackPointer();
if e.isDeAlloaction() then // for heap objects
if e.isExitScope() then // for stack objects
if e.isNewScope() then
object abstraction algorithm that deals with memory alloca-
tion non-determinism by tracking the order in which memory
addresses are allocated to achieve a canonical naming where ev-
ery object is uniquely identiﬁed by its position in the sequence
of allocated objects (Section IV-C1), and 2) a thread identity
abstraction algorithm that handles non-deterministic scheduling
by tracking the order in which threads are spawned relatively to
their spawning thread and naming them accordingly to achieve
consistent IDs across multiple executions (Section IV-C2).
1) Memory Object Abstraction: Algorithm 1 outlines the
pseudo-code for the memory object abstraction algorithm.
Given an execution trace σ, the program outputs a set of
symbolic memory objects O that can be used to replace the
concrete addresses in the original execution trace.
For every event e ∈ σ, the algorithm ﬁrst stores a global
index (its position in the trace sequence) as well as the executing
thread t (lines 3-4). If e is a memory allocation event, a
memory object o = (bAddr, t, l idx, size, val, s) is created
where bAddr is its concrete base address, l idx is a thread local
index that is incremented with every new instruction executed
by t, size is the size of the object, val is its initial validity
range starting from g idx, and s is a Boolean value indicating
whether the allocation is a stack allocation (as opposed to
heap) (lines 6-11). The object o is then added to O (line 12).
The initial validity range of every added object has to be
updated according to the scope where it was deﬁned. If e is a
memory de-allocation event, e.g., a call to the free function,
the algorithm updates the validity range of the object o ∈ O
with the same base address (lines 14-15). Note that in this
case o must be a heap object, and if it is never de-allocated
the default range is still valid and also covers, for instance,
global variables. In this case, the object is accessible from its
creation until the end of the trace.
Memory objects on the stack are handled separately. If a
new scope event for thread t is encountered, e.g., entering a
function, the current global index is stored in sp[t] for later
use (line 17). In case e is an exit scope event, the algorithm
updates the validity of all objects that were added after sp[t]
and restores the previous stack pointer (lines 19-21). Objects
that were added after sp[t] represent the objects that have to be
de-allocated because the program is leaving the scope where
they were deﬁned. The restored stack pointer is assigned the
global index of the last new scope event by thread t so that
once that scope is exited, the validity range of the objects
deﬁned within it can be accordingly updated.
Once the set of objects O is generated, TraceSanitizer re-
places each reference to a concrete memory address by a
corresponding object eliminating trace deviations due to mem-
ory locations. An address is replaced by an object if it lies
within its allocated space speciﬁed by its base address and size.
If a memory address matches more than one memory object,
we use the validity range to identify the correct object.
2) Thread Identity Abstraction: Algorithm 2 provides the
pseudo-code for the thread identity abstraction that enables
the matching of threads in different execution traces. The
algorithm’s goal is to achieve canonical thread IDs such that
for every two executions of the same programs with the same
input it is guaranteed that the same threads will receive the
same id. Given a sequence of events σ, the algorithm builds a
mapping function M that maps each thread ID to a canonical
ID. The algorithm works by building a thread tree G where the
nodes represent the spawned threads and the edges a spawning
relation. If a thread t1 ∈ T spawns a thread t2, we add a
directed edge (t1, t2) between these two nodes (lines 5-7). The
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:30:10 UTC from IEEE Xplore.  Restrictions apply. 
56
next step consists of breadth-ﬁrst traversing the tree G, starting
from the root node such that for every node the children are
visited in their order of creation (lines 11-17). The canonical
thread IDs are then recursively generated as follows:
• The root node is the main thread and is assigned the ID
“T 0” (lines 9-10).
• Every node is assigned an ID that consists of its parent
node’s ID as a preﬁx and its position in the list of children
(lines 15-17).
After running the thread identity abstraction algorithm, we
use the mapping function M to rename the threads by their
canonical names, and replace every reference to a thread
ID in the execution trace. If a program satisﬁes the pseudo-
deterministic condition, it is guaranteed that the canonical
thread IDs match exactly, enabling the matching of all spawned
threads across multiple traces in the trace comparison phase.
3) Reversibility Check: We developed an automated re-
versibility check to test whether an execution trace σ satisﬁes
the pseudo-deterministic condition. The automated check fo-
cuses on the reversibility condition from Deﬁnition 1. While
we manually checked the local determinism condition, the pro-
cess can easily be automated using a black-listing approach to
such external libraries or functions.
The reversibility check is based on the maximal causality
technique which has been used for race detection in prior
work [7]. A maximal causality formula encodes the maximal
number of interleavings of a given trace that are guaranteed to
be feasible, i.e., that are valid executions of the same program
with the same input. Our reversibility check uses a modiﬁed
version of the maximal causality formula that omits the con-
straints that ensure that only valid executions are encoded.
We utilize a reversibility formula Φσ whose satisfying solu-
tions encode executions that are not necessarily valid, while
preserving the soundness and completeness of the check. The
formula deﬁnes integer variables xi for every event ei ∈ σ.
The variables are then constrained in their order such that only
the set of interleavings that are guaranteed to be feasible are
allowed. For instance, if ei is an event spawning a new thread,
the formula adds a constraint xi < xj for the ﬁrst event ej
executed by the spawned thread. To guarantee the sequential-
ity of every thread t, a condition xi < xj is added for every
successive event by t. To prevent an overlap of two critical
sections in the trace that are guarded by the same mutex, the
(cid:2)
j < xi where ei and
formula adds a constraint xj < x
(cid:2)
(cid:2)
j are the two
i are two mutex acquiring events and ej and e
e
corresponding mutex release events.
i ∨ x
(cid:2)
Finally, we add additional constraints to encode our pseudo-
deterministic condition:
R :=
(ei,ej )∈D∧ei≺σej
(cid:2)
xj ≤ xi
Intuitively, the constraint encodes the fact that any two depen-
dent events in the trace occur in a reversed order.
In the last step, we check the satisﬁability of formula Φσ∧R
using an SMT solver. If the solver does not return a solution,
we have a proof that there cannot be any two dependent events
57
that can occur in a reversed order and therefore the trace
satisﬁes the pseudo-deterministic condition. If, however, the
formula has been proven satisﬁable, the solver returns a solution
that encodes an execution trace where at least two dependent
events are reversed. In this case, the trace does not satisfy the
pseudo-deterministic condition.
Correctness. In our check, we omit the constraints that reduce
the set of allowed interleavings to only those that are guaranteed
to be feasible (i.e., the read conditions in [7]). Furthermore, the
maximal causality model, upon which the reversibility formula
is based, does not cover all feasible interleavings since it does
not include executions that take new control ﬂow paths [20].
These limitations, however, affect neither the soundness nor
the completeness of the reversibility check as outlined next1.
The soundness of the check is based on the fact that our
reversibility formula can only contain infeasible interleavings
if the execution is reversible. Let us assume that the check is
unsound, i.e., for a trace σ that does not satisfy the reversibility
condition, the reversibility formula is wrongly satisﬁable. This
means that the event order encoded by the reversibility formula
(cid:2) due to the missing read
describes an infeasible execution σ
(cid:2) that is
conditions from [7]. Let e
(cid:2)
not feasible and e the last event in the feasible preﬁx of σ
(cid:2)). Because of local determinism we
such that T id(e) = T id(e
have σe (cid:4)= σ
(cid:2) (the next event by the same
(cid:2). This would mean that σ
(cid:2)
thread) would be executable in σ
e,
(cid:2), contains at least a
and therefore also the feasible preﬁx of σ
set of reversed dependent events. But this contradicts our initial
assumption that σ does not satisfy the reversibility condition
since the preﬁx of σ up to event e
(cid:2) be the ﬁrst event in σ
(cid:2)
e since otherwise e
(cid:2) is feasible.
Similarly, the completeness of the check follows from the
fact that the set of interleavings covered by the formula is
not complete only if the considered trace is reversible. Let us
assume the check is incomplete, i.e., for a trace σ that satisﬁes
the reversibility condition, the reversibility formula is wrongly
(cid:2)
unsatisﬁable. This means that there is a feasible interleaving σ
of execution σ where two dependent events occur in reversed
order and that is not covered by the reversibility formula. These
two events cannot both be included in σ because otherwise
the reversibility formula would be satisﬁable. If at least one
of the events, e, is not included in σ, its determining events
(cid:2)
e must include two events that occur in reversed order and
σ
(cid:2).
are in σ, assuming that e is the ﬁrst such an event in σ
This means, however, that the reversibility formula will be
satisﬁable, contradicting our initial assumption.
4) An Example Trace Comparison: We use the example
from Figure 1 to illustrate the working of TraceSanitizer. Given
the execution trace from Figure 4 (upper right), the sanitizing
algorithms produce a sanitized trace (upper left) and a memory
object set and thread identity mapping (bottom left).
5) Memory Object Abstraction: Initially, the set of identiﬁed
memory objects is empty. The algorithm starts by iterating
over all events in the execution trace σ. After reaching an
allocation instruction (line 1), a new object o4 is created and
1We refer the reader to [21] for a fuller discourse
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:30:10 UTC from IEEE Xplore.  Restrictions apply. 
call-main 0 1 o0
alloca o4
alloca o5
0 call-main 0 1 7ffcfe3287e8
0 alloca 7ffcfe3282e8 8
0 alloca 7ffcfe3282e0 8
0 T_0
...
1 T_0
2 T_0
...
3 T_0
4 T_0
5 T_0
6 T_0
call-pthread_create-u 0 o5
store 3 g0
store 6 g0+4
call-pthread_create-u 0 o4
(cid:2)→ 0 400ae0 0
(cid:2)→ 0 4012c0 0
7 T_0_0 call-inc 0
8 T_0_0 alloca o6 1 8
load T_0_0 o4
9 T_0
10 T_0_0 alloca o7 1 8
11 T_0_0 store 0 o7