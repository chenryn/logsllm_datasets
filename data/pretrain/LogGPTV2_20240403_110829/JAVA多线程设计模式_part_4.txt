的线程。
的线程都已经结束，程序即已结束。
括 daemon thiread。换句话说，即使 daemon thread 还在，但只要非daemon thread
继续说明利用实现了Runnable 接口的类的实例以启动线程的方法。Runnable
建立 Thread 类的子类、建立其实例、调川 start 方法……·，这是利用 Thread类
daemon thrcad是指在产生线程时，以 setDaemon方法设置其为 daemon thread
当所有线程都结束时，程序也就结束了。不过，在判断是否结束时，并不包
Printer 类（LIst11-6）是表示一个连续输出10000 次指定字符中的线程。欲输
已实现Rummable接口的类必须实现run方法”2。
Public interface Runnablel
笔者再叮一次，：“PrintThread的实例”和“线程本身”是两个不同的部分
t.start();
Thread t =
Public abstract. void run(l;
已经启动的2个线程都还活着，
hew PrintThread("Good!");
：·直要等到所有线程都已经结束，程序才
Introduction 1
Java语言的线程
6
---
## Page 37
例的run方法。最后就变成是新启动的线程去进行连续输出10000次“Good!”的.！.
的参数：然后才利用 start 方法启动线程。也就是：
作。
类的实例，将该实例的 start 方法调用出来的语句。
启动2个线程。
调用出 start方法后，就会启动新的线程，然后，这个线程再调用 Printer 类的实
上面的语句也可以写成3个，即：
这里是先重新建立 Printer 类的实例，把它传出去作为参数后，再建立 Thread
Main类（List Il-7）这个程序则是先建立2个 Printer 类的实例，再利用它们来
t.start();
Thread t = new Thread(r);
Runnable r = new Printer("Good!");
new Thread(new Printer("Good!")).start();
一
public class Main !
public class Printer implements Runnable 
List 11-7
 public static void main(Stringi] args) {
List 1-6
public void run() f
public Printer(string message)
private String message;
new Thread (new Printer("Nice!")),start();
new Thread(new Printer{"Good!")).start();
for （int i= 0; i >>>
《>>>
线程B
图1-7线程B夹在线程A所执行的2个处理之间
→可用余额变口元。
→是，
“可用余额大于欲提领金额？”
“从可用余额减掉欲提领金额”
Introduction 1
Java 语言的线程
8
---
## Page 41
的方法就没有这个限制，同时可供2个以上的线程执行，如图11-8所示。这个图是
程是否正在执行 deposit 或 withdraw，getName 方法随时都能执行3。
例的deposit方法或withdraw方法。欲执行的线程必须排队等候。
24
2个线程同时执行getName方法的情况。
注3：getName 没有成为 synchronized 方法的原因，是因为此方法未使用可同时读写的字段，
一个实例的synchronized方法只能允许1次1个线程执行。但是，非synchronized
当1个线程正在执行Bank 实例的 deposit方法时，其他线程就不能执行同-
public class Bank ↑
List I1-9
public String getName()
public synchronized boolean withdraw(int m)
private String name;
 private int money;
/！取款
public synchrorized vcid deposit(int m) f
！存款
return namer
if (money >= m)
=+au
this.money
 else {
 return false;
return true;
money -= mF
Bank 类 ( Bank.java)
具有
deposit和 withdraw两个 synchronized 方法的
money;
程序收录在下载文件夹Introcuctionl/Others/Sync 内
//余额不足
！已取款
实
---
## Page 42
影响。即使线程没有获取锁定，多个线程仍可自由进入非 synchronized 的方法。
锁定的长方形被涂灰是衣示已经获取锁定。
定，因此其他线程就不能再执行同一实例的 synchronized 方法。在图 I1-9 里，表示
（acquire）时，这里就会像筑起防护罩－样防止其他线程进入。
当执行 synchronized方法的线程结束执行该方法后，锁定即被释放（release）。
请注意：在图 11-9 当中，有无锁定对非 synchromized的 getName 方法完全没有
图11-9 则是表示1个线程执行deposit 方法的情形。H于这个线程已经获取锁
另一方面，synchromized 方法不允许同时有1个以上的线程执行。图Ⅱ1-8 以在
己获取锁仕的线程
图I1-8多个线程可同时执行非 synchronized方法的getName 方法
图 11-9
synehronized 方法只允许1次有1个线程执行
锁住
synchronized
getName ()
WithdrawQ.
synchrozied
deposit()
:Bank
.deposit)
synchronized
getNarmeO
WithdrawO
synchrozied
:Bank
Introduction 1
Java语言的线程
---
## Page 43
和 bank2 两个实例，而由其他线程同时执行 synchronized 方法的情况。
的线程不只1个，没抢到的线程就得继续等候。图I1-11是表示重新获取锁定的另
一定会有1个线程获取锁定。在同一时间点能获取锁定的也只有1个线程，若等待
图Ⅱ1-10用锁定的长方形变白来表示释放锁定。
补充说明：锁定和监视
法正在执行中，导致无法执行其他实例的 synchronized 方法。图 I1-12 是假设有 bank1
一个线程开始执行 synchronized方法的情况。
监视”。
线程共享互斥的架构称为监视( monitor),而获取锁定有时也称为“持有（own）
只要有实例就会相对有1个锁定。因此不是说因为某个实例的 synchronized 方
当锁定被释放后，刚才因为锁定而不得其门而入的多个线程便开始抢夺锁定，
重新获取锁住的线程
图11-10线程结束执行 synchronized方法deposit，释放锁定
图I1-1l另一个线程获取锁定开始执行synchronized 方法
getName ()
synehronized
WithdrawO
deposit()
:Bank
Withdraw!
synchrozied
_depositO
synchronized
getName()
已释放锁住的线程
---
## Page 44
围，则需使用 synchronized 阻挡，具体范例请见第6章的说明。
synchronized阻挡，其格式如下：
synchronized 阻挡
如果只想启动方法里一部分的线程，而非启动整个方法时，则可使用
synchronized （表达式）{
换句话说，synchronized 实例方法是使用 this 锁定去做线程的共亨互斥。
void method() (
在功能上，它跟下面这个以 synchronized 阻挡为主的方法有异曲同“之妙。
synchronized void method() (
假设现在有--个类型如下的 synchronized 实例方法：
则可把获取锁定的实例传给“表达式”这部分。如欲更精密控制共享互斥的范
synchronized (this)
synchronized
bank1:Bank
WithdrawO...
synchrozied
getName()
deposit(
图11-12
只要有实例就会相对有1个锁定
Introduction 1
bank2:Bank
getName()
WithdrawO
synchrozied
deposit()
Java语言的线程
---
## Page 45
notifyAll则是启动等候中线程的方法。
和notifyAll三个方法可进行这个处理。wait 是让线程乖乖等候的方法，而 notify 和
时只能让丨个线程执行。这个部分跟 synchronized 实例方法一样。但是，利用
型而已，例如：
该方法。这是简单型的共享互斥。
补充说明：synchronized语句
假设我们现在想做更进一步的处理，不只是有线程再执行就得乖乖等候的简单
线程的协调
如前节所述，当有1个线程正在执行 synchronized 方法时，其他线程无法执行
这是根据“空间是否有空闲”为条件所进行的线程处理。Java里有wait、notify
·若该空间有空闲则写入数据，若非空闲则等候直到空出为止（等候)；
有关线程共享互斥的部分，在Single Threaded Execution（第1章）也有详细说
（[sIa ）c( uoneoads snuT r a）  8r,
换刊话说，synchromized 类方法是使用该类的类对象的锁定去做线程的共享互
class Somethingi
在功能上，它跟下面这个以 synchronized 阻挡为主的方法有异曲同工之妙。
class Somethingi
static void methodl) l
 static synchronized void methos() {
synchronized (Something.class) f
---
## Page 46
wait.
语付：
wait方法一
请参见第4章的进阶说明。
部分，则请参见第5章“wait 方法与interrupt 方法”的解说；wait方法的到期，则
情况时，线程便会退出wait set。
发生下列其中·种情况，
它有点类似线程的休息室，而且每个实例都会有。
wait set--
补充说明：wait set
一个wait set，wait set是一个在执行该实例的 wait 方法时、操作停止的线程的集合。
wait 中线程的列表的方法。
，已经释放了该实例的锁定。整个过程的图示如图11-13～11-15所示，
使用 wait（等候）方法时，线程便进入 wait set。假设现在已经执行一个如下的
wait set是一个虚拟的概念。它既不是实例的字段，也不是可以获取在实例上
如欲执行 wait)方法，线程需获取锁定（这是规则）。但是当线程进入wait set
故执行 wait()的线程就会进入 this 的 wait sel。此时，就变成了线程在 this 上
－·执行 wait 方法时，线程便会暂时停比操作，进入 wait set这个休息室。除非
在开始学习 wait、notify 和 notifyAll 之前，
this.wait();
则其意义同：
如果实例方法里还有如下的语句时：
线程在 obj上 wait
则目前的线程会暂时停止执行，进入实例obji的 wait set。这个操作称为：
obj.wait();
以下依次用图示说明 wait、notify 和 notifyAll三种方法。至于 interrupt 方法的
●wait方法已经到期。
·有其他线程以notiry方法唤醒该线程：
wait{);
有其他线程以interrupt方法唤醒该线程；
有其他线程以 notifyAll方法唤醒该线程
—把线程放入wait set
线程的休息室
否则线程会永远被留在这个 wait set 里。当发生卜列任
先稍微讲讲 wait set。所有实例都有
Introduction
Java 语言的线程
---
## Page 47
.
线程A
线程B
图I1-13
图Il-14线程 A进入 wait set，并释放锁定
图11-15于是线程B便可获取锁定
获取锁定的线程A开始执行 wait 方法