>>> reverse_sorted_a
>>> [Number(val=10), Number(val=10), Number(val=9), Number(val=7), Number(val=7), Number(val=6), Number(val=5), Number(val=2), Number(val=1), Number(val=1)]
```
### `dataclass` 作为一个可调用的装饰器
定义所有的 `dunder`（LCTT 译注：这是指双下划线方法，即魔法方法）方法并不总是值得的。你的用例可能只包括存储值和检查相等性。因此，你只需定义 `__init__` 和 `__eq__` 方法。如果我们可以告诉装饰器不生成其他方法，那么它会减少一些开销，并且我们将在数据对象上有正确的操作。
幸运的是，这可以通过将 `dataclass` 装饰器作为可调用对象来实现。
从官方[文档](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass)来看，装饰器可以用作具有如下参数的可调用对象：
```
@dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)
class C:
 …
```
1. `init`：默认将生成 `__init__` 方法。如果传入 `False`，那么该类将不会有 `__init__` 方法。
2. `repr`：`__repr__` 方法默认生成。如果传入 `False`，那么该类将不会有 `__repr__` 方法。
3. `eq`：默认将生成 `__eq__` 方法。如果传入 `False`，那么 `__eq__` 方法将不会被 `dataclass` 添加，但默认为 `object.__eq__`。
4. `order`：默认将生成 `__gt__`、`__ge__`、`__lt__`、`__le__` 方法。如果传入 `False`，则省略它们。
我们在接下来会讨论 `frozen`。由于 `unsafe_hash` 参数复杂的用例，它值得单独发布一篇文章。
现在回到我们的用例，以下是我们需要的：
1. `__init__`  
 2. `__eq__`
默认会生成这些函数，因此我们需要的是不生成其他函数。那么我们该怎么做呢？很简单，只需将相关参数作为 false 传入给生成器即可。
```
@dataclass(repr = False) # order, unsafe_hash and frozen are False
class Number:
    val: int = 0
>>> a = Number(1)
>>> a
>>> 
>>> b = Number(2)
>>> c = Number(1)
>>> a == b
>>> False
>>> a >> Traceback (most recent call last):
 File “”, line 1, in 
TypeError: ‘ 
> 无法创建真正不可变的 Python 对象
> 
> 
> 
在 Python 中创建对象的不可变属性是一项艰巨的任务，我将不会在本篇文章中深入探讨。
以下是我们期望不可变对象能够做到的：
```
>>> a = Number(10) #Assuming Number class is immutable
>>> a.val = 10 # Raises Error
```
有了 `dataclass`，就可以通过使用 `dataclass` 装饰器作为可调用对象配合参数 `frozen=True` 来定义一个 `frozen` 对象。
当实例化一个 `frozen` 对象时，任何企图修改对象属性的行为都会引发 `FrozenInstanceError`。
```
@dataclass(frozen = True)
class Number:
    val: int = 0
>>> a = Number(1)
>>> a.val
>>> 1
>>> a.val = 2
>>> Traceback (most recent call last):
 File “”, line 1, in 
 File “”, line 3, in __setattr__
dataclasses.FrozenInstanceError: cannot assign to field ‘val’
```
因此，一个 `frozen` 实例是一种很好方式来存储：
* 常数
* 设置
这些通常不会在应用程序的生命周期内发生变化，任何企图修改它们的行为都应该被禁止。
### 后期初始化处理
有了 `dataclass`，需要定义一个 `__init__` 方法来将变量赋给 `self` 这种初始化操作已经得到了处理。但是我们失去了在变量被赋值之后立即需要的函数调用或处理的灵活性。
让我们来讨论一个用例，在这个用例中，我们定义一个 `Float` 类来包含浮点数，然后在初始化之后立即计算整数和小数部分。
通常是这样：
```
import math
class Float:
    def __init__(self, val = 0):
        self.val = val
        self.process()
    def process(self):
        self.decimal, self.integer = math.modf(self.val)
>>> a = Float( 2.2)
>>> a.decimal
>>> 0.2000
>>> a.integer
>>> 2.0
```
幸运的是，使用 [**post\_init**](https://docs.python.org/3/library/dataclasses.html#post-init-processing) 方法已经能够处理后期初始化操作。
生成的 `__init__` 方法在返回之前调用 `__post_init__` 返回。因此，可以在函数中进行任何处理。
```
import math
@dataclass
class FloatNumber:
    val: float = 0.0
    def __post_init__(self):
        self.decimal, self.integer = math.modf(self.val)
>>> a = Number(2.2)
>>> a.val
>>> 2.2
>>> a.integer
>>> 2.0
>>> a.decimal
>>> 0.2
```
多么方便！
### 继承
`Dataclasses` 支持继承，就像普通的 Python 类一样。
因此，父类中定义的属性将在子类中可用。
```
@dataclass
class Person:
    age: int = 0
    name: str
@dataclass
class Student(Person):
    grade: int
>>> s = Student(20, "John Doe", 12)
>>> s.age
>>> 20
>>> s.name
>>> "John Doe"
>>> s.grade
>>> 12
```
请注意，`Student` 的参数是在类中定义的字段的顺序。
继承过程中 `__post_init__` 的行为是怎样的？
由于 `__post_init__` 只是另一个函数，因此必须以传统方式调用它：
```
@dataclass
class A:
    a: int
    def __post_init__(self):
        print("A")
@dataclass
class B(A):
    b: int
    def __post_init__(self):
        print("B")
>>> a = B(1,2)
>>> B
```
在上面的例子中，只有 `B` 的 `__post_init__` 被调用，那么我们如何调用 `A` 的 `__post_init__` 呢？
因为它是父类的函数，所以可以用 `super` 来调用它。
```
@dataclass
class B(A):
    b: int
    def __post_init__(self):
        super().__post_init__() # 调用 A 的 post init
        print("B")
>>> a = B(1,2)
>>> A
    B
```
### 结论
因此，以上是 `dataclass` 使 Python 开发人员变得更轻松的几种方法。
我试着彻底覆盖大部分的用例，但是，没有人是完美的。如果你发现了错误，或者想让我注意相关的用例，请联系我。
我将在另一篇文章中介绍 [dataclasses.field](https://docs.python.org/3/library/dataclasses.html#dataclasses.field) 和 `unsafe_hash`。
在 [Github](http://github.com/xssChauhan/) 和 [Twitter](https://twitter.com/xssChauhan) 关注我。
更新：`dataclasses.field` 的文章可以在[这里](https://medium.com/@xsschauhan/understanding-python-dataclasses-part-2-660ecc11c9b8)找到。
---
via: 
作者：[Shikhar Chauhan](https://medium.com/@xsschauhan?source=post_header_lockup) 译者：[MjSeven](https://github.com/MjSeven) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出