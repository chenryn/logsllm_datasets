### 1. Reconnaissance and Implantation Phases

**Reconnaissance (R):**
- **IO:** Identification of the host Operating System
- **CI:** Collection of additional Information about the network
- **RE:** Shared Resource Enumeration
- **UE:** Users and Groups Enumeration
- **ABE:** Applications and Banners Enumeration

**Implantation and Threat Realization (I):**
- **GAR:** Gaining Access to Resources of the host
- **EP:** Escalating Privileges with regard to the host resources
- **GAD:** Gaining Additional Data needed for further threat realization
- **TR:** Threat Realization, which can be detailed as:
  - **CVR:** Confidentiality Violation Realization (e.g., through file reading)
  - **IVR:** Integrity Violation Realization (e.g., attacks against the integrity of host resources)
  - **AVR:** Availability Violation Realization (e.g., Denial of Service)
  - **CT:** Covering Tracks to avoid detection
  - **CBD:** Creating Back Doors

### 2. Attack Task Specification

An attack task specification (or a top-level attack goal) is defined by the following quad:
1. **Class of Scenarios:** Determines the class of scenarios that lead to the intended result.
2. **Known Data:** Specifies the information about the attacked computer network (host) known to the attacker.
3. **Attack Object:** Corresponds to the optional variable in the attack goal specification and can be specified as:
   - **"":** The attack object is not specified for the intention "Reconnaissance" (R).
   - **[Account,] [Process {/},] [File {/},] [Data in transit {/}]:** If the intention corresponds to CVR or IVR, the attack object is specified as follows:
     - **Account:** Object's account
     - **Process:** Running process(es)
     - **File:** File(s) that are the target(s) to get
     - **Data in transit:** Data being transmitted
     - **Optional variables:** Variables in [ ] are optional, repeatable variables are placed in {}, and the symbol “/” is interpreted as “OR”.
   - **"All":** All resources of the host (network).
   - **"Anyone":** At least one of the resources of the host (network).

### 3. "Computer Network Attacks" Ontology

The development of an information system model must start with the creation of a domain ontology. The ontology is a structured set of concepts and their relationships, abstracted from specific implementation details. While there is ongoing work on developing ontologies, there is a gap in the domain of network attacks.

**Ontology Structure:**
- **Hierarchy of Notions:** Specifies activities of attackers directed at implementing various classes of attacks in different levels of detail.
- **Macro- and Micro-Level Specifications:**
  - **Macro-Level:** High-level notions interconnected by "Part of" and "Kind of" relationships.
  - **Micro-Level:** Detailed specifications of the bottom-level ("terminal") notions in terms of network packets, OS calls, and audit data.

**Relationships:**
- **"Part of":** Decomposition relationship ("Whole"–"Part").
- **"Kind of":** Specialization relationship ("Notion"–"Particular kind of notion").
- **"Seq of":** Sequence of operation relationship ("Whole operation"–"Sub-operation").

**Example:**
- **High-Level Fragment:**
  - **Network Attack (A):** In "Part of" relationship with "Reconnaissance" (R) and "Implantation and Threat Realization" (I).
  - **Reconnaissance (R):** In "Part of" relationship with IH, IS, IO, CI, RE, UE, and ABE.
  - **Implantation and Threat Realization (I):** In "Part of" relationship with GAR, EP, GAD, TR, CT, and CBD.
  - **IH (Host Identification):** In "Kind of" relationship with "Network Ping Sweeps" (DC) and "Port Scanning" (SP IH).
  - **"Network Ping Sweeps" (DC):** Terminal notion at the macro-level.
  - **"Port Scanning" (SP IH):** Detailed through "Kind of" relationship by a set of terminal notions.

**Micro-Specifications:**
- **"Terminal" Notions:** Further detailed at the micro-level using the "Kind of," "Seq of," and "Example of" relationships.
- **Example:**
  - **"Network Ping Sweeps with Ping Sweep" (P SW):** In "Seq of" relationship with "ICMP ECHO REQUEST" (IER).
  - **"ICMP ECHO REQUEST" (IER):** Corresponds to network packets directed at the target host or network.

### 4. Formal Framework for Attack Specification

**Basic Assumptions and Statements:**
1. **Sequence of Symbols:** Each attack intention can be considered as a sequence of symbols in terms of lower-level intentions, forming "words" of a language generated by a formal grammar.
2. **LL(2) Context-Free Grammar:** Attack intentions can be adequately specified using LL(2) context-free grammars.
3. **Stochastic Attribute Grammar:** Uncertainties in attack development can be specified probabilistically through attributes and functions.
4. **Grammar Substitution:** Nodes (grammars) of the ontology are interconnected through "grammar substitution" operations.
5. **Attacked Network Response:** Each attacker's action is followed by a response from the attacked network.

**Formal Model:**
- **Mathematical Model:** Defined in terms of a set of formal grammars specifying particular intentions interconnected through "substitution" operations.
- **Formal Grammar:** Specified by quintuple \( G = (V_N, V_T, S, P, A) \), where:
  - \( V_N \): Set of non-terminal symbols (upper and intermediate levels of an attack scenario).
  - \( V_T \): Set of terminal symbols (steps of a lower-level attack scenario).
  - \( S \in V_N \): Grammar axiom (initial symbol of an attack scenario).
  - \( P \): Set of productions specifying specialization operations.
  - \( A \): Set of attributes and algorithms for their computation.

**Attribute Component:**
- **Randomized Choice:** Specifies the probability of choosing a production at the current inference step.
- **Condition Checking:** Ensures the admissibility of using a production based on attack task specification, network response, and previous actions.

**Example:**
- **Grammar Production:** \([(U)]X \rightarrow \alpha (\text{Prob})\), where \( U \) is the condition, \( X \) is the non-terminal symbol, \( \alpha \) is a string of terminal and non-terminal symbols, and \(\text{Prob}\) is the initial probability of the rule.
- **Substitution Operation:** \( Su(a) : \{a \rightarrow G(a)\} \), where \( a \) is a terminal symbol of the grammar \( G_i \), and \( G(a) \) is the grammar generating variants of \( a \)'s implementation.

**Ping Attack Example:**
- **Grammar for P SW:**
  - \( V_N = \{P SW, P SW 1\} \)
  - \( V_T = \{IER\} \)
  - \( S = \{P SW\} \)
  - \( P = \{P SW \rightarrow IER P SW 1 (1), P SW 1 \rightarrow IER P SW 1 (0.2), P SW 1 \rightarrow IER (0.8)\} \)

- **Implementation:**
  - **Ping Attack with "Ping Sweep":** From host 244.146.4.20 on the hosts of the network 198.24.15.0 in the time interval [0:43:10.094644, 00:43:16.036735].
  - **Generated Messages:**
    - \( 00:43:10.094644 244.146.4.20 > 198.24.15.255: icmp: echo request \)
    - \( 00:43:16.036735 244.146.4.20 > 198.24.15.255: icmp: echo request \)

**Grammar Development:**
1. **Construction of Families:** For each basic attacker's intention, a family of enclosed attributed stochastic context-free grammars is constructed.
2. **Interconnection:** Grammars are interconnected through "substitution" operations to form a comprehensive model of attack scenarios.