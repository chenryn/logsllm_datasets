间，减少找不到的可能。
但是，这些主机名扩展技巧可能会为其他一些HTTP应用程序带来问题，比如代
理。第6章将详细讨论这些问题。
• 历史扩展
浏览器用来节省用户输入URL时间的另一种技巧是，将以前用户访问过的URL
历史存储起来。当你输入URL时，它们就可以将你输入的URL与历史记录中
URL的前缀进行匹配，并提供一些完整的选项供你选择。因此，如果你输入了
一个以前访问过的URL的开始部分，比如http://www.joes-，浏览器就可能会建
议使用http://www.joes-hardware.com。然后你就可以选择这个地址，不用输入完
整的URL了。 34
注意，与代理共同使用时，URL自动扩展的行为可能会有所不同。6.5.6节将对此
进行进一步讨论。
URL与资源 ｜ 37
2.4 各种令人头疼的字符
URL是可移植的（portable）。它要统一地命名因特网上所有的资源，这也就意味着
要通过各种不同的协议来传送这些资源。这些协议在传输数据时都会使用不同的机
制，所以，设计URL，使其可以通过任意因特网协议安全地传输是很重要的。
安全传输意味着URL的传输不能丢失信息。有些协议，比如传输电子邮件的简单邮
件传输协议（Simple Mail Transfer Protocol，SMTP），所使用的传输方法就会剥去
一些特定的字符。4为了避开这些问题，URL只能使用一些相对较小的、通用的安
全字母表中的字符。
除了希望URL可以被所有因特网协议进行传送之外，设计者们还希望URL也可供
人类阅读。因此，即使不可见、不可打印的字符能够穿过邮件程序，从而成为可移
植的，也不能在URL中使用。5
URL还得是完整的，这就使问题变得更加复杂了。URL的设计者们认识到有时人们
可能会希望URL中包含除通用的安全字母表之外的二进制数据或字符。因此，需要
有一种转义机制，能够将不安全的字符编码为安全字符，再进行传输。
本节总结了URL的通用字母表和编码规则。
2.4.1 URL字符集
默认的计算机系统字符集通常都倾向于以英语为中心。从历史上来看，很多计算机
应用程序使用的都是US-ASCII字符集。US-ASCII使用7位二进制码来表示英文打
字机提供的大多数按键和少数用于文本格式和硬件通知的不可打印控制字符。
由于US-ASCII的历史悠久，所以其可移植性很好。但是，虽然美国用户使用起来
很便捷，它却并不支持在各种欧洲语言或全世界数十亿人使用的数百种非罗马语言
35 中很常见的变体字符。
而且，有些URL中还会包含任意的二进制数据。认识到对完整性的需求之后，URL
的设计者就将转义序列集成了进去。通过转义序列，就可以用US-ASCII字符集的
有限子集对任意字符值或数据进行编码了，这样就实现了可移植性和完整性。
2.4.2 编码机制
为了避开安全字符集表示法带来的限制，人们设计了一种编码机制，用来在URL中
表示各种不安全的字符。这种编码机制就是通过一种“转义”表示法来表示不安全
注4： 这是由报文的7位二进制码编码造成的。如果源端是以8位或更多位编码的，就会有部分信息被剥离。
注5： 不可打印字符中包括空格符（注意，RFC 2396建议应用程序忽略空格符）。
38 ｜ 第2章
字符的，这种转义表示法包含一个百分号（%），后面跟着两个表示字符ASCII码的
十六进制数。
表2-2中列出了几个例子。
表2-2 一些编码字符示例
字 符 ASCII码 示例URL
~ 126(0x7E) http://www.joes-hardware.com/%7Ejoe
空格 32(0x20) http://www.joes-hardware.com/more%20tools.html
% 37(0x25) http://www.joes-hardware.com/100%25satisfaction.html
2.4.3 字符限制
在URL中，有几个字符被保留起来，有着特殊的含义。有些字符不在定义的US-
ASCII可打印字符集中。还有些字符会与某些因特网网关和协议产生混淆，因此不
赞成使用。
表2-3列出了一些字符，在将其用于保留用途之外的场合时，要在URL中对其进行
编码。
表2-3 保留及受限的字符
字 符 保留/受限
% 保留作为编码字符的转义标志
/ 保留作为路径组件中分隔路径段的定界符
. 保留在路径组件中使用
.. 保留在路径组件中使用
# 保留作为分段定界符使用
? 保留作为查询字符串定界符使用
; 保留作为参数定界符使用
: 保留作为方案、用户/口令，以及主机/端口组件的定界符使用
$, + 保留
@ & = 在某些方案的上下文中有特殊的含义，保留
36
{ } | \ ^ ~ [ ] ' 由于各种传输Agent代理，比如各种网关的不安全处理，使用受限
 " 不安全；这些字符在URL范围之外通常是有意义的，比如在文档中对URL自身
进行定界（比如http://www.joes-hardware.com），所以应该对其进行编码
0x00-0x1F, 0x7F 受限，这些十六进制范围内的字符都在US-ASCII字符集的不可打印区间内
>0x7F 受限，十六进制值在此范围内的字符都不在US-ASCII字符集的7比特范围内
URL与资源 ｜ 39
2.4.4 另外一点说明
你可能会感到奇怪，为什么使用一些不安全字符的时候并没有发生什么不好的事情。
比如，你可以访问http://www.joes-hardware.com/~joe上的Joe主页，而无需对“~”
字符进行编码。对某些传输协议来说，这并不是什么问题，但对应用程序开发人员
来说，对非安全字符进行编码仍然是明智的。
应用程序要按照一定规范工作。客户端应用程序在向其他应用程序发送任意URL之
前，最好把所有不安全或受限字符都进行转换6。只要对所有不安全字符都进行了编
码，这个URL就是可在各应用程序之间共享的规范形式；也就无需操心其他应用程
序会被字符的任何特殊含义所迷惑了。
最适合判断是否需要对字符进行编码的程序就是从用户处获取URL的源端应用程
序。URL的每个组件都会有自己的安全/不安全字符，哪些字符是安全/不安全的
与方案有关，因此只有从用户那里接收URL的应用程序才能够判断需要对哪些字符
进行编码。
当然，另一种极端的做法就是应用程序对所有字符都进行编码。尽管并不建议这么
做，但也没有什么强硬且严格的规则规定不能对那些安全字符进行编码；但在实际
应用中，有些应用程序可能会假定不对安全字符进行编码，这么做的话可能会产生
一些奇怪的破坏性行为。
有时，有些人会恶意地对额外的字符进行编码，以绕过那些对URL进行模式匹配的
应用程序——比如，Web过滤程序。对安全的URL组件进行编码会使模式匹配程
序无法识别出它们所要搜寻的模式。总之，解释URL的应用程序必须在处理URL
37 之前对其进行解码。
有些URL组件要便于识别，并且必须由字母开头，比如URL的方案。更多关于不
同URL组件中保留字符和不安全字符的使用指南请回顾2.2节7。
2.5 方案的世界
本节将介绍更多Web常用方案格式。附录A给出了一个相当完整的方案列表，及
各种方案文档的参考文献。
注6： 这里我们特指的是客户端应用程序，而不是其他的HTTP中间点，比如代理。6.5.5节探讨了代理和
其他中间HTTP应用程序试图代表客户端修改（比如编码）URL时可能产生的一些问题。
注7： 表2-3列出了各种URL组件的保留字符。总之，只应该对这些在传输过程中不安全的字符进行编码。
40 ｜ 第2章
表2-4总结了最常见的一些方案。回顾一下2.2节有助于理解表格中的语法部分。
表2-4 常见的方案格式
方 案 描 述
http 超文本传输协议方案，除了没有用户名和密码之外，与通用的URL格式相符。如果省略
了端口，就默认为80。
基本格式：
http://:/?#
示例：
http://www.joes-hardware.com/index.html
http://www.joes-hardware.com:80/index.html
https 方案https与方案http是一对。唯一的区别在于方案https使用了网景的SSL，SSL为
HTTP连接提供了端到端的加密机制。其语法与HTTP的语法相同，默认端口为443。
基本格式：
https://:/?#
示例：
https://www.joes-hardware.com/secure.html
mailto Mailto URL指向的是E-mail地址。由于E-mail的行为与其他方案都有所不同（它并不指
向任何可以直接访问的对象），所以mailto URL的格式与标准URL的格式也有所不同。
因特网E-mail地址的语法记录在RFC 822中。
基本格式：
mailto:
示例：
mailto:PI:EMAIL 38
ftp 文件传输协议URL可以用来从FTP服务器上下载或向其上载文件，并获取FTP服务器
上的目录结构内容的列表。
在Web和URL出现之前FTP就已经存在了。Web应用程序将FTP作为一种数据访问方
案使用。URL语法遵循下列通用格式。
基本格式：
ftp://:@:/;
示例：
ftp://anonymous:joe%PI:EMAIL:21/pub/gnu/
rtsp，rtspu RTSP URL是可以通过实时流传输协议（Real Time Streaming Protocol）解析的音/视频
媒体资源的标识符。
方案rtspu中的u表示它是使用UDP协议来获取资源的。
基本格式：
rtsp://:@:/
rtspu://:@:/
示例：
rtsp://www.joes-hardware.com:554/interview/cto_video
URL与资源 ｜ 41
（续）
方 案 描 述
file 方案file表示一台指定主机（通过本地磁盘、网络文件系统或其他一些文件共享系统）
上可直接访问的文件。各字段都遵循通用格式。如果省略了主机名，就默认为正在使用
URL的本地主机。
基本格式：
file:///
示例：
file://OFFICE-FS/policies/casual-fridays.doc
news 根据RFC 1036的定义，方案news用来访问一些特定的文章或新闻组。它有一个很独特
的性质：news URL自身包含的信息不足以对资源进行定位。
news URL中缺乏到何处获取资源的信息——没有提供主机名或机器名称。从用户那里获
取此类信息是解释程序的工作。比如，在网景浏览器的“选项”（Options）菜单中，就可
以指定自己的NNTP（news）服务器。这样，浏览器有了news URL的时候就知道应该使
用哪个服务器了。
新闻资源可以从多台服务器中获得。它们被称为位置无关的，因为对它们的访问不依赖
于任何一个源服务器。
news URL中保留了字符“@”，用来区分指向新闻组的news URL和指向特定新闻文章的
news URL。
基本格式：
news:
news:
示例：
39 news:rec.arts.startrek
telnet 方案telnet用于访问交互式业务。它表示的并不是对象自身，而是可通过telnet协议访问
的交互式应用程序（资源）。
基本格式：
telnet://:@:/
示例：
telnet://slurp:PI:EMAIL:23/
2.6 未来展望
URL是一种强有力的工具。它可以用来命名所有现存对象，而且可以很方便地包含
一些新格式。URL还提供了一种可以在各种因特网协议间共享的统一命名机制。
但URL并不完美。它们表示的是实际的地址，而不是准确的名字。这就意味着
URL会告诉你资源此时处于什么位置。它会为你提供特定端口上特定服务器的名
字，告诉你在何处可以找到这个资源。这种方案的缺点在于如果资源被移走了，
URL也就不再有效了。那时，它就无法对对象进行定位了。
42 ｜ 第2章
如果有了对象的准确名称，则不论其位于何处都可以找到这个对象，那该多完美啊。
就像人一样，只要给定了资源的名称和其他一些情况，无论资源移到何处，你都能
够追踪到它。
为了应对这个问题，因特网工程任务组（Internet Engineering Task Force，IETF）
已经对一种名为统一资源名（uniform resource name，URN）的新标准做了一段时
间的研究了。无论对象搬移到什么地方（在一个Web服务器内或是在不同的Web
服务器间），URN都能为对象提供一个稳定的名称。
永久统一资源定位符（persistent uniform resource locators，PURL）是用URL来实
现URN功能的一个例子。其基本思想是在搜索资源的过程中引入另一个中间层，
通过一个中间资源定位符（resource locator）服务器对资源的实际URL进行登记和
跟踪。客户端可以向定位符请求一个永久URL，定位符可以以一个资源作为响应，
将客户端重定向到资源当前实际的URL上去（参见图2-6）。更多有关PURL的信
息，请访问http://purl.oclc.org。
获取 http://purl.oclc.org/jhardware/
第一步：询问资源解析程序Joe五金
商店的URL是什么。从解析程序接
因特网
收资源的当前位置。
客户端 purl.oclc.org
实际的http://www.joes-hardware.com/