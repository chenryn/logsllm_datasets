pearing in a binary as well as the likelihood of two in-
structions occurring as a consecutive pair. The tables
were built by disassembling a large set of common exe-
cutables and tabulating counts for the occurrence of each
individual instruction as well as counts for each occur-
rence of a pair of instructions. These counts were sub-
sequently stored for later use during the disassembly of
an obfuscated binary. It is important to note that only in-
struction opcodes are taken into account with this tech-
nique; operands are not considered. The basic score
for a particular instruction is calculated as the sum of
the probability of occurrence of this instruction and the
probability of occurrence of this instruction followed by
the next instruction in the sequence.
In addition to the statistical technique, a set of heuris-
tics are used to identify improbable instructions. This
analysis focuses on instruction arguments and observed
notions of the validity of certain combinations of opera-
tions, registers, and accessing modes. Each heuristic is
applied to an individual instruction and can modify the
basic score calculated by the statistical technique. In our
current implementation, the score of the corresponding
instruction is set to zero whenever a rule matches. Ex-
amples of these rules include the following:
• operand size mismatches;
• certain arithmetic on special-purpose registers;
• unexpected register-to-register moves (e.g., moving
• moves of a register value into memory referenced
from a register other than %ebp into %esp);
by the same register.
8048000
8048001
8048003
55
89 e5
e8 00 00 74 11
55
89 e5
e8 00 00 74 11
push
mov
call
%ebp
%esp, %ebp
19788008
p
a
G
8048008
8048009
804800a
804800b
0a
05
3c
00
804800c
75 06
804800e
b0 00
8048010
eb 07
p
a
G
8048012
8048013
0a
05
8048014
a1 00 00 74 01
8048019
89 ec
804801b
804801c
804801d
5d
c3
90
r
o
0a
05
3c
00     
75
06
d
d
a
05
3c
00     
75
06
p
m
c
3c
00     
d
d
a
00     
75
06
r
o
0a
05
a1    
00 
00 
74
d
d
a
05
a1    
00 
00 
74
3c 00
75 06
b0 00
eb 07
cmp
0, %eax
jne
8048014
mov
0, %eax
jmp
8048019
a1 00 00 74 01
mov
(1740000), %eax
89 ec
mov
%ebp, %esp
5d
c3
90
%ebp
pop
ret
nop
Gap Sequences
Disassembler Output
Figure 6: Gap completion and disassembler output.
When all possible instruction sequences are determined,
the one with the highest sequence score is selected as the
valid instruction sequence between b 1 and b2.
The instructions that make up the control ﬂow graph
of our example function and the intermediate gaps are
shown in the left part of Figure 6. It can be seen that
only a single instruction sequence is valid in the ﬁrst gap,
while there is none in the second gap. The right part of
Figure 6 shows the output of our disassembler. All valid
instructions of the example function have been correctly
identiﬁed.
5 Tool-Speciﬁc Techniques
The techniques discussed in the previous section can dis-
assemble any binary that satisﬁes our assumptions with
reasonable accuracy (see Section 6 for detailed results).
As mentioned previously, however, the results can be im-
proved when taking advantage of available tool-speciﬁc
knowledge. This section introduces a modiﬁcation to
our general techniques that can be applied when disas-
sembling binaries transformed with Linn and Debray’s
obfuscator.
A signiﬁcant problem for the disassembler is the fact that
it cannot continue disassembling at the address follow-
ing a call instruction. As discussed in Section 2, Linn
and Debray’s obfuscator replaces regular calls with calls
to a branch function. The branch function is responsible
for determining the real call target, that is, the function
that is invoked in the original program. This is done us-
ing a perfect hash function, using the location of the call
instruction as input. During run-time, the location of the
call instruction can be conveniently determined from the
top of the stack. The reason is that the address following
the call instruction is pushed on the stack by the proces-
sor as part of the x86 call operation.
Besides ﬁnding the real target of the call and jumping to
the appropriate address, the branch function is also re-
sponsible for adjusting the return address such that con-
trol ﬂow does not return directly to the address after the
call instruction. This is achieved by having the branch
function add a certain offset to the return address on the
stack. This offset is constant (but possibly different) for
each call instruction and obtained in a way similar to the
target address by performing a table lookup based on the
location of the caller. When the target function eventu-
ally returns using the modiﬁed address on the stack, the
control ﬂow is transfered to an instruction located at off-
set bytes after the original return address. This allows
the obfuscator to ﬁll these bytes with junk.
By reverse engineering the branch function, the offset
can be statically determined for each call instruction.
This allows the disassembler to skip the junk bytes and
continue at the correct instruction. One possibility is to
manually reverse engineer the branch function for each
obfuscated binary. However, the process is cumbersome
and error prone. A preferred alternative is to automati-
cally extract the desired information.
We observe that the branch function is essentially a pro-
cedure that takes one input parameter, which is the ad-
dress after the call instruction that is passed on the top
of the stack. The procedure then returns an output value
by adjusting this address on the stack. The difference
between the initial value on the stack and the modiﬁed
value is the offset that we are interested in. It is easy
to simulate the branch function because its output only
depends on the single input parameter and several static
lookup tables that are all present in the binary’s initial-
ized data segment. As the output does not depend on
any input the program receives during run-time, it can
be calculated statically.
To this end, we have implemented a simple virtual pro-
cessor as part of the disassembler that simulates the in-
structions of the branch function. Because the branch
function does not depend on dynamic input, all memory
accesses refer to addresses in the initialized data segment
and can be satisﬁed statically. The execution environ-
ment is set up such that the stack pointer of the virtual
processor points to an address value for which we want
to determine the offset. Then, the simulator executes in-
structions until the input address value on the stack is
changed. At this point, the offset for a call is calculated
by subtracting the old address value from the new one.
Whenever the disassembler encounters a call instruction,
the value of the address following the call is used to in-
voke our branch function simulator. The simulator cal-
culates the corresponding offset, and the disassembler
can then skip the appropriate number of junk bytes to
continue at the next valid instruction.
6 Evaluation
Linn and Debray evaluated their obfuscation tool using
the SPECint 95 benchmark suite, a set of eight bench-
mark applications written in C. These programs were
compiled with gcc version egcs-2.91.66 at opti-
mization level -O3 and then obfuscated.
To measure the efﬁcacy of the obfuscation process, the
confusion factor for instructions was introduced. This
metric measures how many program instructions were
incorrectly disassembled. More formally, let V be the
set of valid program instructions and O the set of instruc-
tions that a disassembler outputs. Then, the confusion
factor CF is deﬁned as CF = |V −O|
. Because our work
focuses on the efﬁcacy of the disassembler in identifying
valid instructions, we deﬁne the disassembler accuracy
DA as DA = 1 − CF.
V
Linn and Debray used three different disassemblers to
evaluate the quality of their obfuscator. The ﬁrst one was
the GNU objdump utility, which implements a stan-
dard linear sweep algorithm. The second disassembler
was implemented by Linn and Debray themselves. It is a
recursive disassembler that uses speculative linear disas-
sembly (comparable to our gap completion) for regions
that are not reachable by the recursive part. This disas-
sembler was also provided with additional information
about the start and end addresses of all program func-
tions. The purpose of this disassembler was to serve as
an upper bound estimator for the disassembler accuracy
and to avoid reporting “unduly optimistic results” [13].
The third disassembler was IDA Pro 4.3x, a commer-
cial disassembler that is often considered to be among
the best commercially available disassemblers. This be-
lief is also reﬂected in the fact that IDA Pro is used
to provide disassembly as input for static analysis tools
such as [3].
We developed a disassembler that implements the gen-
eral techniques and the tool-speciﬁc modiﬁcation pre-
sented in the two previous sections. Our tool was then
run on the eight obfuscated SPECint 95 applications.
The results for our tool and a comparison to the three
disassemblers used by Linn and Debray are shown in
Table 1. Note that we report two results for our dis-
assembler. One shows the disassembler accuracy when
only general techniques are utilized. The second result
shows the disassembler accuracy when the tool-speciﬁc
modiﬁcation is also enabled.
These results demonstrate that our disassembler pro-
vides a signiﬁcant improvement over the best disassem-
bler used in the evaluation by Linn and Debray. Even
without using tool-speciﬁc knowledge, the disassembler
accuracy is higher than their recursive disassembler used
to estimate the upper bound for the disassembler accu-
racy. When the tool-speciﬁc modiﬁcation is enabled, the
binary is disassembled almost completely. The poor re-
sults for IDA Pro can be explained with the fact that the
program only disassembles addresses that can be guar-
anteed (according to the tool) to be instructions. As
a result, many functions that are invoked through the
branch function are not disassembled at all. In addition,
IDA Pro continues directly after call instructions and is
frequently mislead by junk bytes there.
Given the satisfying results of our disassembler, the dis-
assembly process was analyzed in more detail. It is in-
teresting to ﬁnd the ratio between the number of valid
instructions identiﬁed by the control ﬂow graph and the
number of valid instructions identiﬁed by the gap com-
pletion phase. Although the gap completion phase is im-
portant in ﬁlling regions not covered by the CFG, our
key observation is the fact that the control transfer in-
structions and the resulting control ﬂow graph consti-
tute the skeleton of an analyzed function. Therefore, one
Program
Objdump
Linn/Debray
IDA Pro
compress95
gcc
go
ijpeg
li
m88ksim
perl
vortex
Mean
56.07
65.54
66.08
60.82
56.65
58.42
57.66
66.02
60.91
69.96
82.18
78.12
74.23
72.78
75.66
72.01
76.97
75.24
24.19
45.09
43.01
31.46
29.07
29.56
31.36
42.65
34.55
Our tool
general
91.04
88.45
91.81
91.60
89.86
90.39
86.93
90.71
90.10
tool-speciﬁc
98.07
95.17
96.80
97.53
97.35
97.49
96.28
96.65
96.92
Table 1: Disassembler accuracy.
would expect that most valid instructions can be derived
from the control ﬂow graph, and only small gaps (e.g.,
caused by indirect calls or unconditional jumps) need to
be completed later. Table 2 shows the fraction (in per-
cent) of correctly identiﬁed, valid instructions that were
obtained using the control ﬂow graph and the fraction
obtained in the gap completion phase. Because the num-
bers refer to correctly identiﬁed instructions only, the
two fractions sum up to unity. Both the results with tool-
speciﬁc support and the results with the general tech-
niques alone are provided. When tool speciﬁc support is
available, the control ﬂow graph contributes noticeable
more to the output. In this case, the disassembler can
include all regions following call instructions into the
CFG. However, in both experiments, a clear majority of
the output was derived from the control ﬂow graph, con-
ﬁrming our key observation.
Program
compress95
gcc
go
ijpeg
li