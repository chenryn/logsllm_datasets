שראשית מוגרל מפתח של ארבעה בתים, ולאחר מכן הקוד עובר על תוכן התמונה ומבצע XOR עם המפתח, מבצע
מניפולציה על המפתח וחוזר על הפעולה.
התמונה עצמה נקראת encrypted.png וכאשר מנסים לפתוח
אותה, מקבלים שגיאה שהקובץ אינו בפורמט המתאים.
למזלנו, פורמט PNG מכיל Header ידוע מראש,
שבאמצעותו ניתן לנחש מהו מפתח ההצפנה.
לפי האתר הזה:
  A PNG file consists of a PNG signature
  followed by a series of chunks. 
  … 
  The first eight bytes of a PNG file always
  contain the following (decimal) values: 
     137 80 78 71 13 10 26 10
  &nbsp;
 נבדוק
את הקובץ שקיבלנו בעורך Hex:
על מנת לקבל את
המפתח המקורי, נבצע XOR שוב מול
הערך שאמור להיות שם לפי התקן:
נראה שהמפתח הוא NLET (0x4e 0x4c 0x45
0x54). אנחנו רואים גם שב-Chunk הבא, המפתח הפך להיות “0x4f 0x4d 0x46 0x55”, כלומר קידמנו כל ערך ב-1. 
נבצע מספר שינויים
קלים בקוד ההצפנה על מנת לבצע פענוח:
```python
# (Using original functions)
def transform(key):
    return "".join(map(lambda x: chr((ord(x)+1) % 256), key))
with open('encrypted.png', 'rb') as f:
    img = f.read()
key = "NLET"
dec_data = ''
for i in range(0, len(img), key_length):
    dec = xor(img[i:i+key_length], key)
    key = transform(key)
    dec_data += dec
with open('flag.png', 'wb') as f:
    f.write(dec_data)
```
והתוצאה:
&nbsp;
אתגר 7 – Test
my Patience (קטגוריית Surprise, 50 נקודות)
&nbsp;
הוראות האתגר:
```
Hi there,
We found This executable on the local watchmaker's computer.
It is rumored that somehow the watchmaker was the only person who succeeded to crack it.
Think you're as good as the watchmaker?
Note: This file is not malicious in any way
```
קודם כל, תמיד מרגיע
לראות הצהרה בסגנון &quot;קובץ זה אינו נוזקה&quot;. נשמע אמין. זה זמן טוב להזכיר
שבמסגרת אתגרים יוצא לא פעם להוריד קבצי הרצה, כלים, ספריות וכד' ומומלץ מאוד
להפעיל הכל בתוך מכונה וירטואלית, על כל צרה שלא תבוא.
נריץ את הקובץ ונראה:
&nbsp;
מדובר במשחק
ניחושים, התוכנה חושבת על מספר כלשהו ואנחנו צריכים לנחש מהו. אחרי מספר ניחושים
(ארוכים, קצרים, שליליים, לא חוקיים וכד') אפשר לראות שלעיתים לוקח לתוכנה יחסית
הרבה זמן להחזיר תשובה. יחד עם השם של האתגר, נראה שמדובר ב-Timing Attack.
הסבר קצר: כאשר
התוכנה בודקת את הניחוש, היא משווה אותו מול המספר הנבחר. אם הספרה הראשונה של
הניחוש שווה לספרה הראשונה של התשובה הנכונה, ההשוואה תקח קצת יותר זמן. כמובן
שבאתגרים מהסוג הזה, לעיתים מוסיפים השהייה מלאכותית כל מנת להקל על המדידה.
נכתוב סקריפט שינסה
את כל הספרות 0-9, יבדוק מתי התוצאה חזרה הכי לאט, וימשיך לספרה הבאה.
נריץ את הסקריפט
(הקוד המלא בדף הבא) ונקבל:
&nbsp;
הקוד:
```python
from subprocess import Popen, PIPE
import time
p = Popen(['tmp.exe'], stdout=PIPE, stderr=PIPE, stdin=PIPE, shell=True)
print p.stdout.readline()
print p.stdout.readline()
answer = ""
searching = True
while searching:
    time_arr = []
    for i in xrange(10):
        start = time.time()
        p.stdin.write(answer + str(i))
        p.stdin.write("\n")
        line = p.stdout.readline()
        end = time.time()
        print line.rstrip()
        if not "Wrong" in line:
            answer += str(i)
            searching = False
            break
        time_arr.append(end-start)
    print time_arr
    if searching:
        answer += str(time_arr.index(max(time_arr)))
        print "WIP answer: {}".format(answer)
print answer
```
&nbsp;
אתגר 8 – 0120343536
(קטגוריית Logic, 60 נקודות)
&nbsp;
הוראות האתגר:
```
flag{IAAAA_$AYP_%CP_C_WIIX_BYWAOX}
Not so fast...
They say the only place where flags come before work is the dictionary, ours is no different
Note: flag letters are all capital
```
&nbsp;
המילון מכיל רשימה
של כמעט 40,000 מילים. ננסה להשתמש במילון על מנת לפצח את הדגל.
ראשית נמיין את
המילים במילון לפי אורך (אפשר להתעלם ממילים באורך גדול מ-6 כי אין כאלה בדגל):
```python
msg = "IAAAA_$AYP_%CP_C_WIIX_BYWAOX"
d = defaultdict(list)
with open("dictionary.txt") as f:
    for line in f:
        line = line.rstrip()