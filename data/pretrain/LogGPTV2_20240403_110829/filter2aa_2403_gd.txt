cat     "disp+work.pdb.d" | grep FUNCTION | grep -i password 
上述指令的返回结果是： 
FUNCTION rcui::AgiPassword::DiagISelection 
FUNCTION ssf_password_encrypt 
FUNCTION ssf_password_decrypt 
FUNCTION password_logon_disabled 
FUNCTION dySignSkipUserPassword 
FUNCTION migrate_password_history 
FUNCTION password_is_initial 
FUNCTION rcui::AgiPassword::IsVisible 
FUNCTION password_distance_ok 
FUNCTION get_password_downwards_compatibility 
FUNCTION dySignUnSkipUserPassword 
FUNCTION rcui::AgiPassword::GetTypeName 
FUNCTION 'rcui::AgiPassword::AgiPassword'::'1'::dtor$2 
FUNCTION 'rcui::AgiPassword::AgiPassword'::'1'::dtor$0 
FUNCTION 'rcui::AgiPassword::AgiPassword'::'1'::dtor$1 
FUNCTION usm_set_password 
FUNCTION rcui::AgiPassword::TraceTo 
FUNCTION days_since_last_password_change 
FUNCTION rsecgrp_generate_random_password 
FUNCTION rcui::AgiPassword::`scalar deleting destructor' 
FUNCTION password_attempt_limit_exceeded 
FUNCTION handle_incorrect_password 
FUNCTION 'rcui::AgiPassword::`scalar deleting destructor''::'1'::dtor$1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 80 章  SAP 
795 
FUNCTION calculate_new_password_hash 
FUNCTION shift_password_to_history 
FUNCTION rcui::AgiPassword::GetType 
FUNCTION found_password_in_history 
FUNCTION `rcui::AgiPassword::`scalar deleting destructor''::'1'::dtor$0 
FUNCTION rcui::AgiObj::IsaPassword 
FUNCTION password_idle_check 
FUNCTION SlicHwPasswordForDay 
FUNCTION rcui::AgiPassword::IsaPassword 
FUNCTION rcui::AgiPassword::AgiPassword 
FUNCTION delete_user_password 
FUNCTION usm_set_user_password 
FUNCTION Password_API 
FUNCTION get_password_change_for_SSO 
FUNCTION password_in_USR40 
FUNCTION rsec_agrp_abap_generate_random_password 
根据提示信息，接下来我们在调试信息里搜索关键词“password”和“locked”。略加分析之后，笔者
发现 password_attempt_limit_exceeded()函数会调用关键字符串“user was locked by subsequently failed 
password logon attempts”。 
这个函数还会在日志文件里记录“password logon attempt will be rejected immediately (preventing 
dictionary attacks)”“failed-logon lock: expired (but not removed due to ‘read-only’ operation)”以及“failed-logon lock: 
expired => removed”。 
进一步的研究表明，这个函数就是登录保护函数。它会被密码验证函数——chckpass()函数调用。 
首先要验证上述推测是否正确。使用笔者开发的 tracer 程序进行分析： 
tracer64.exe -a:disp+work.exe bpf=disp+work.exe!chckpass,args:3,unicode 
PID=2236|TID=2248|(0) disp+work.exe!chckpass (0x202c770, L"Brewered1 ", 0x41) (called from  
     0x1402f1060 (disp+work.exe!usrexist+0x3c0)) 
PID=2236|TID=2248|(0) disp+work.exe!chckpass -> 0x35 
调用逻辑是 syssigni()→DyISigni()→dychkusr()→usrexist()→chckpass()。 
数字 0x35 是 chckpass()函数返回的错误信息编号： 
.text:00000001402ED567 loc_1402ED567:  
    ; CODE XREF: chckpass+B4 
.text:00000001402ED567  
mov     rcx, rbx  
    ; usr02 
.text:00000001402ED56A  
call    password_idle_check 
.text:00000001402ED56F  
cmp    eax, 33h 
.text:00000001402ED572  
jz 
   loc_1402EDB4E 
.text:00000001402ED578  
cmp    eax, 36h 
.text:00000001402ED57B  
jz 
   loc_1402EDB3D 
.text:00000001402ED581  
xor    edx, edx  
    ; usr02_readonly 
.text:00000001402ED583  
mov    rcx, rbx  
    ; usr02 
.text:00000001402ED586  
call    password_attempt_limit_exceeded 
.text:00000001402ED58B  
test    al, al 
.text:00000001402ED58D  
jz 
   short loc_1402ED5A0 
.text:00000001402ED58F  
mov    eax, 35h 
.text:00000001402ED594  
add    rsp, 60h 
.text:00000001402ED598  
pop    r14 
.text:00000001402ED59A  
pop    r12 
.text:00000001402ED59C  
pop    rdi 
.text:00000001402ED59D  
pop    rsi 
.text:00000001402ED59E  
pop    rbx 
.text:00000001402ED59F  
retn 
然后进行试验： 
tracer64.exe -a:disp+work.exe bpf=disp+work.exe!password_attempt_limit_exceeded,args:4,unicode, rt:0 
PID=2744|TID=360|(0) disp+work.exe!password_attempt_limit_exceeded (0x202c770, 0, 0x257758, 0)  
     (called from 0x1402ed58b (disp+work.exe!chckpass+0xeb)) 
PID=2744|TID=360|(0) disp+work.exe!password_attempt_limit_exceeded -> 1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
796 
逆向工程权威指南（下册） 
PID=2744|TID=360|We modify return value (EAX/RAX) of this function to 0 
PID=2744|TID=360|(0) disp+work.exe!password_attempt_limit_exceeded (0x202c770, 0, 0, 0) (called  
     from 0x1402e9794 (disp+work.exe!chngpass+0xe4)) 
PID=2744|TID=360|(0) disp+work.exe!password_attempt_limit_exceeded -> 1 
PID=2744|TID=360|We modify return value (EAX/RAX) of this function to 0 
此后我们就可以进行登录了。 
顺便提一下，如果忘记密码的话，可以把 chckpass()函数的返回值强制改为 0，那样它就不会进行密码
验证了： 
tracer64.exe -a:disp+work.exe bpf=disp+work.exe!chckpass,args:3,unicode,rt:0 
PID=2744|TID=360|(0) disp+work.exe!chckpass (0x202c770, L"bogus ", 0x41) (called from 0x1402f1060  
     (disp+work.exe!usrexist+0x3c0)) 
PID=2744|TID=360|(0) disp+work.exe!chckpass -> 0x35 
PID=2744|TID=360|We modify return value (EAX/RAX) of this function to 0 
在分析 password_attemp_limit_exceeded()函数时，我们可以看到函数的前几行指令是： 
lea    rcx, aLoginFailed_us ; "login/failed_user_auto_unlock" 
call    sapgparam 
test    rax, rax 
jz  
  short loc_1402E19DE 
movzx    eax, word ptr [rax] 
cmp    ax, 'N' 
jz  
  short loc_1402E19D4 
cmp    ax, 'n' 
jz  
  short loc_1402E19D4 
cmp    ax, '0' 
jnz    short loc_1402E19DE 
很显然，sapgparam()函数的作用是获取配置参数。整个程序有 1768 处指令调用这个函数。据此推测，
只要追踪这个函数的调用关系，就可以分析特定参数对整个程序的影响。 
不得不说，SAP 要比 Oracle RDBMS 亲切得多。前者提供的函数名等信息远比后者清晰。不过 disp+work
程序具有 C++程序的特征，莫非官方最近重新编写了它的源程序？ 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 8811 章
章    O
Orraaccllee  RRDDBBM
MSS  
81.1  V$VERSION 表 
Oracle RDBMS 11.2 是个规模庞大的数据库系统。其主程序 oracle.exe 包含近 124000 个函数。相比之
下，Windows 7 x86 的内核 ntoskrnl.exe 只有近 11000 函数；Linux 3.9.8 的内核（默认编译/带有默认驱动程
序）包含的函数也不过 31000 个左右。 
本章首先演示一个最简单的 Oracle 查询指令。我们可通过下述指令查询 Oracle RDBMS 数据库的版本信息： 
SQL> select * from V$VERSION; 
上述指令的返回结果如下： 
BANNER 
-------------------------------------------------------------------------------- 
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - Production 
PL/SQL Release 11.2.0.1.0 - Production 
CORE     11.2.0.1.0       Production 
TNS for 32-bit Windows: Version 11.2.0.1.0 - Production 
NLSRTL Version 11.2.0.1.0 - Production 
第一个问题就来了：字符串“V$VERSION”存储在 Oracle RDBMS 的什么地方？ 
在 Win32 版本的 oracle.exe 程序里不难发现这个字符串。但是在 Linux 平台的文件里，函数名称和全
局变量名都会走样。因此，即使在 Linux 版的 Oracle RDBMS 里找到了正确的对象（.o）文件，挖掘相应
的处理函数也会花费更多的时间。 
在 Linux 版程序的文件里，包含字符串“V$VERSION”的文件是 kqf.o。这个文件在 Oracle 的库文件目录
lib/libserver11.a 之中。 
kqf.o 文件在定义数据表 kqfviw 的时候，调用了字符串“V$VERSION”。 
指令清单 81.1  kqf.o 
.rodata:0800C4A0 kqfviw 
       dd  0Bh                      ; DATA XREF: kqfchk:loc_8003A6D 
.rodata:0800C4A0                                                  ; kqfgbn+34 
.rodata:0800C4A4         
       dd  offset _2__STRING_10102_0 ; "GV$WAITSTAT" 
.rodata:0800C4A8         
       dd  4 
.rodata:0800C4AC         
       dd  offset _2__STRING_10103_0 ; "NULL" 
.rodata:0800C4B0         
       dd  3 
.rodata:0800C4B4         
       dd  0 
.rodata:0800C4B8         
       dd  195h 
.rodata:0800C4BC         
       dd  4 
.rodata:0800C4C0         
       dd  0 
.rodata:0800C4C4         
       dd 0FFFFC1CBh 
.rodata:0800C4C8         
       dd  3 
.rodata:0800C4CC         
       dd  0 
.rodata:0800C4D0         
       dd  0Ah 
.rodata:0800C4D4         
       dd  offset _2__STRING_10104_0 ; "V$WAITSTAT" 
.rodata:0800C4D8         
       dd  4 
.rodata:0800C4DC         
       dd  offset _2__STRING_10103_0 ; "NULL" 
.rodata:0800C4E0         
       dd  3 
.rodata:0800C4E4         
       dd  0 
.rodata:0800C4E8         
       dd  4Eh 
.rodata:0800C4EC         
       dd  3 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
798 
逆向工程权威指南（下册） 
.rodata:0800C4F0         
       dd  0 
.rodata:0800C4F4         
       dd  0FFFFC003h 
.rodata:0800C4F8         
       dd  4 
.rodata:0800C4FC         
       dd  0 
.rodata:0800C500         
       dd  5 
.rodata:0800C504         
       dd  offset _2__STRING_10105_0 ; "GV$BH" 
.rodata:0800C508         
       dd  4 
.rodata:0800C50C         
       dd  offset _2__STRING_10103_0 ; "NULL" 
.rodata:0800C510         
       dd  3 
.rodata:0800C514         
       dd  0 
.rodata:0800C518         
       dd  269h 
.rodata:0800C51C         
       dd  15h 
.rodata:0800C520         
       dd  0 
.rodata:0800C524         
       dd  0FFFFC1EDh 
.rodata:0800C528         
       dd  8 
.rodata:0800C52C         
       dd  0 
.rodata:0800C530         
       dd  4 
.rodata:0800C534         
       dd  offset _2__STRING_10106_0 ; "V$BH" 
.rodata:0800C538         
       dd  4 
.rodata:0800C53C         
       dd  offset _2__STRING_10103_0 ; "NULL" 
.rodata:0800C540         
       dd  3 
.rodata:0800C544         
       dd  0 
.rodata:0800C548         
       dd  0F5h 
.rodata:0800C54C         
       dd  14h 
.rodata:0800C550         
       dd  0 
.rodata:0800C554         
       dd  0FFFFC1EEh 
.rodata:0800C558         
       dd  5 
.rodata:0800C55C         
       dd  0 
在分析Oracle RDBMS的内部文件时，很多人都会奇怪“为什么函数名称和全局变量名称都那么诡异？”这大
概是因为Oracle是 20 世纪 80 年代的古典作品吧。那个时代C语言编译器都遵循的ANSI标准：函数名称和
变量名称不得超出 6 个字符（linker的局限），即“外部标识符以前 6 个字符为准”的规则。
①
我们还查到了一个叫作“V$FIXED_VIEW_DEFINITION”的固定视图
名字以 V$-开头的数据视图，多数（很有可能是全部）都由这个文件的 kqfviw 表定义。这些 V$视图
都是内容固定视图（fixed Views）。从表面看来，这些数据具有显著的循环周期。因此，我们可以初步判断，
kqfviw 表的每个元素都由 12 个 32 位字段构成。借助 IDA 程序，我们可以轻易地再现出这种 12 字段的数
据结构，套用到整个数据表。在 Oracle RDBMS v11.2 里，总共有 1023 个固定视图。即，这个文件可能描述
了 1023 个预定义的视图。本章稍后讨论这个数字。 
关于视图中的各字段、及各字段对应的数据，并没有多少资料可寻。虽然我们发现第一个数字就是数
据库图的名称（没有最末的那个零字节）、而且这个规律适用于全部的数据元素，但是这种信息的作用不大。 
②
① 1988 年的 ANSI 标准请可参见笔者的摘录：http://yurichev.com/ref/Draft%20ANSI%20C%20Standard%20(ANSI%20X3J11-88-090)%20 
(May%2013,%201988).txt。作为对比，微软的标识符标准可参阅 https://msdn.microsoft.com/en-us/library/e7f8y25b.aspx。 
② 笔者通过挖掘 kqfviw 和 kqfvip 表里的数据，最终发现了这个视图的信息。 
，它能够检索所有固定视图的
信息。顺便提一下，这个表有 1023 个元素，正好对应预定义视图的总数。 
SQL> select * from V$FIXED_VIEW_DEFINITION where view_name='V$VERSION'; 
VIEW_NAME 
------------------------------ 
VIEW_DEFINITION 
-------------------------------------------------------------------------------- 
V$VERSION 
select  BANNER from GV$VERSION where inst_id = USERENV('Instance') 
可见，对于 GV$VERSION 而言，V$VERSION 是 thunk view（形实转换视图）： 
SQL> select * from V$FIXED_VIEW_DEFINITION where view_name='GV$VERSION'; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 81 章 Oracle RDBMS 
799 
VIEW_NAME 
------------------------------ 
VIEW_DEFINITION 
-------------------------------------------------------------------------------- 
GV$VERSION 
select inst_id, banner from x$version 
另外，在 Oracle 数据库里，那些官方文档没有介绍的、以 X$开头的数据表同样是记载系统信息的服
务表。因为这些以 X$开头的表由 Oracle 程序控制并动态更新的数据表，所以数据库用户不能修改它们。 
如果我们在文件 kqf.o 里搜索文本“select BANNER from GV$VERSION where inst_id = USERENV('Instance')”，
那么就会发现它在 kqfvip 表里。 
指令清单 81.2  kqf.o 
.rodata:080185A0 kqfvip            dd  offset _2__STRING_11126_0 ; DATA XREF: kqfgvcn+18 
.rodata:080185A0                                                    ; kqfgvt+F 
.rodata:080185A0                                                    ; "select inst_id, decode(indx,1,'data  
      bloc" ... 
.rodata:080185A4                     dd  offset kqfv459_c_0 
.rodata:080185A8                     dd  0 