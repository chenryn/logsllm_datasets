404.5 m
33.0 m
>6000.0 m
>6000.0 m
379.5 m
58.8 m
*
*
218.2 m
53.3 m
>2000.0 m
-
-
-
-
-
-
-
-
-
-
-
1T
15.2 m
27.0 m
17.3 m
12.7 m
>6000.0 m
>6000.0 m
1642.3 m
31.1 m
774.2 m
7176.1 m
120.2 m
130.1 m
1064.2 m
3.2 m
30.0 m
6.1 m
1990.1 m
220.1 m
15.4 m
165.3 m
4.5 m
2.6 m
2.7 m
>9000.0 m
CAFL
nT
7.2 m
18.4 m
8.6 m
14.8 m
1593.5 m
2887.0 m
825.3 m
24.2 m
65.2 m
>12000.0 m
32.3 m
56.0 m
710.3 m
-
-
-
-
-
-
-
-
-
-
-
nT+D
-
-
-
-
-
-
-
-
-
-
-
-
-
1.2 m
15.7 m
9.9 m
281.8 m
122.4 m
31.9 m
24.4 m
1.9 m
1.4 m
1.5 m
2046.0 m
Speedup
1.0x
0.8x
20.9x
2.6x
3.8x
2.1x
0.5x
1.3x
-
-
6.8x
1.0x
2.8x
2.0x
8.7x
2.7x
7.1x
1.1x
-
2.4x
-
0.7x
2.3x
4.4x
nT: 2.12x / 1T+D: 2.63x
Table 3: Crash reproduction time comparison with nT and 1T+D. All reproduction times are cut off at 2000 minutes, except libtiff use-after-free
(6000 minuntes) and divide-by-zero (9000 minutes), and nasm 2.14rc16 use-after-free (12000 minutes) due to the long reproduction time.
Speedup is between the shortest times of AFLGo and CAFL. Underlined times are the shortest. -: Not applicable. *: AFLGo fails to launch.
Table 2 shows the crash reproduction time in AFLGo and
CAFL with two different constraint settings. The crashes are
sorted in the order of the buggy range size, the higher the
wider. AFLGo and CAFL with 2T all fails to reproduce the
crashes until the timeout when the buggy data range is nar-
rower than 0x10000000 = 227, but CAFL with 2T+D success-
fully reproduces the crashes in less than 2 minutes, except the
crash 13796 where reaching the crash location takes most of
the fuzzing time. It is worth noting that AFLGo and CAFL
with 2T cannot reproduce the crash 4961 and 7002 respec-
tively, even if the crashes have the widest buggy data range.
This is because both do not recognize the buggy data condi-
tion and ignore the seeds that are in a close condition, letting
them hidden among the irrelevant seeds.
7.2 Crash Reproduction
We compare the crash reproduction time with 47 crashes
from various real-world programs by measuring the time
taken to generate the same kind of crash at the same crash site.
We set the timeout to 2000 minutes, except four crashes that
require a longer timeout due to the long reproduction time. All
constraints are automatically generated with AddressSanitizer
[39] and MemorySanitizer [41] crash dumps.
To demonstrate the effect of the ordered target sites and
the data conditions, we measure the crash reproduction time
with various constraint settings. In 1T, we only set the crash
location to a target site. In nT, we set all available target
sites without data conditions. This setting corresponds to the
nT template, and the 1T+D and 2T+D templates without data
conditions. In nT+D, we set all available target sites with data
conditions. This setting corresponds to the 1T+D and 2T+D
templates. We set the same target sites for AFLGo.
Table 3 shows the crash reproduction times with the nT and
1T+D templates. With the nT template, CAFL outperforms
AFLGo by 2.12x on average. CAFL with nT generally per-
forms better for most crashes, but is merely effective when
the crash is relatively common (gifsicle 1.90 and mJS 1.21)
or the cause site always comes with the crash site (libzip
1.20 and jbig2dec 0.16). The crash in nasm 2.14rc16 requires
some grammar knowledge, which can be easily supported in
cooperation with grammar fuzzing [19, 20] in the future.
With the 1T+D template, CAFL outperforms AFLGo by
2.63x on average. Notice that the data-condition-enabled
nT+D setting constantly shows superior performance over
AFLGo in most crashes, and even when the data conditions
are not effective, CAFL with nT+D shows at least tentative
performance compared to AFLGo.
Table 4 shows the crash reproduction times with the 2T+D
template, where CAFL outperforms AFLGo by 3.65x on aver-
age. Notice that the data-condition-free nT setting sometimes
takes longer reproduction time than 1T in both AFLGo and
CAFL. This is mainly because the allocation site is commonly
reached regardless of it is targeted or not, causing nothing but
additional overheads in seed scheduling. However in CAFL,
this performance degradation is constantly compensated by
the data conditions represented by nT+D. Overall, CAFL out-
performs AFLGo by 2.88x on average. See Appendix D for
the detailed analysis on the minimum distance change during
the fuzzing session on various constraint settings.
USENIX Association
30th USENIX Security Symposium    3569
Program
Bug Location
Bug Type
Template
AFLGo
nT
1T
jasper 1.900.22
lame 3.99.5
libsixel 1.8.1
fig2dev 3.2.7b
fig2dev 3.2.7b
GraphicsM 1.4
GraphicsM 1.4
GraphicsM 1.4
ImageM 7.0.3-6
jbig2dec 0.16
jasper 1.900.3
libming 0.4.7
libsixel 1.8.2
libsixel 1.8.4
libarchive 3.1.2
libtiff 4.0.6
libtiff 4.0.7
libtiff 4.0.7
libtiff 4.0.7
libtiff 4.0.7
libtiff 4.0.9
libtiff 4.0.10
mJS 1.21
Average
jpc_tsfb.c:225
get_audio.c:1205
frompnm.c:144
gensvg.c:1005
read.c:1532
pict.c:1114
sun.c:223
miff.c:428
pixel-accessor.h:507
jbig2_generic.c:356
jpc_dec.c:1668
parser.c:66
frompnm.c:289
fromgif.c:278
format_zip.c:694
tif_packbits.c:85
tif_swab.c:291
tif_unix.c:115
tiffcrop.c:3911
tiff2ps.c:2487
pal2rgb.c:196
tiff2ps.c:2479
mjs_string.c:58
Stack buffer overflow
Stack buffer overflow
Stack buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
Heap buffer overflow
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
2T+D
116.3 m
142.1 m
*
56.2 m
180.9 m
>2000.0 m
36.1 m
*
*
19.1 m
61.9 m
81.8 m
*
*
>2000.0 m
2.2 m
>2000.0 m
74.3 m
7.8 m
2.0 m
5.3 m
283.0 m
229.8 m
†
†
*
37.7 m
151.5 m
>2000.0 m
19.1 m
*
*
20.9 m
79.9 m
620.4 m
*
*
>2000.0 m
1.9 m
>2000.0 m
154.4 m
22.8 m
1.6 m
37.0 m
65.5 m
39.5 m
1T
98.0 m
33.8 m
33.3 m
31.0 m
16.4 m
>2000.0 m
77.4 m
2.4 m
22.5 m
9.0 m
2.2 m
124.1 m
40.5 m
63.6 m
1002.3 m
5.0 m
645.6 m
280.8 m
8.6 m
4.5 m
3.7 m
50.7 m
86.2 m
CAFL
nT
†
†
†
22.7 m
11.0 m
>2000.0 m
148.5 m
1.6 m
25.0 m
8.0 m
3.1 m
27.3 m
202.0 m
81.2 m
‡
0.8 m
1560.3 m
137.2 m
35.3 m
2.5 m
11.2 m
10.8 m
31.0 m
nT+D
Speedup
34.2 m
34.2 m
34.0 m
35.0 m
14.9 m
198.6 m