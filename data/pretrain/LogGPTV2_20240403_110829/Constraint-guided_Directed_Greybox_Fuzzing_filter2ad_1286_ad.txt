### 优化后的文本

#### 表3: 使用nT和1T+D模板的崩溃复现时间对比
所有复现时间在2000分钟时被截断，除了libtiff use-after-free（6000分钟）、divide-by-zero（9000分钟）和nasm 2.14rc16 use-after-free（12000分钟），这些由于复现时间较长而设置了更长的超时时间。加速比是AFLGo和CAFL最短时间之间的比较。下划线表示最短时间。- 表示不适用。* 表示AFLGo无法启动。

| 崩溃编号 | AFLGo (分钟) | nT (分钟) | 1T+D (分钟) | 加速比 |
| --- | --- | --- | --- | --- |
| 1 | 404.5 | 33.0 | >6000.0 | 1.0x |
| 2 | 379.5 | 58.8 | >6000.0 | 0.8x |
| 3 | * | * | 218.2 | 20.9x |
| 4 | 53.3 | * | >2000.0 | 2.6x |
| ... | ... | ... | ... | ... |
| 47 | 12.7 | >6000.0 | 7176.1 | 8.7x |

**注释:**
- **nT:** 设置所有可用的目标站点但没有数据条件。
- **1T+D:** 设置所有可用的目标站点并包含数据条件。

#### 表2: 在不同约束设置下AFLGo和CAFL的崩溃复现时间
崩溃按错误范围大小排序，较高的表示较宽的范围。当错误数据范围小于0x10000000 = 2^27时，AFLGo和使用2T的CAFL都无法在超时前复现崩溃，但使用2T+D的CAFL在不到2分钟内成功复现了崩溃，除了崩溃13796，其中大部分模糊测试时间用于到达崩溃位置。值得注意的是，即使崩溃具有最宽的数据范围，AFLGo和使用2T的CAFL也无法分别复现崩溃4961和7002。这是因为两者都没有识别出错误数据条件，忽略了接近条件的种子，使它们隐藏在无关的种子中。

#### 7.2 崩溃复现
我们通过测量在相同崩溃位置生成相同类型崩溃所需的时间，比较了来自各种实际程序的47个崩溃的复现时间。我们将超时设置为2000分钟，除了一些需要更长时间超时的情况。所有约束都是用AddressSanitizer [39] 和 MemorySanitizer [41] 的崩溃转储自动生成的。

为了展示有序目标站点和数据条件的效果，我们在不同的约束设置下测量了崩溃复现时间：
- **1T:** 仅将崩溃位置设为目标站点。
- **nT:** 设置所有可用的目标站点但没有数据条件。
- **nT+D:** 设置所有可用的目标站点并包含数据条件。

表3展示了使用nT和1T+D模板的崩溃复现时间。使用nT模板时，CAFL平均性能优于AFLGo 2.12倍。对于大多数崩溃，CAFL使用nT通常表现更好，但在崩溃相对常见（如gifsicle 1.90 和 mJS 1.21）或导致站点总是伴随崩溃站点（如libzip 1.20 和 jbig2dec 0.16）的情况下效果较差。nasm 2.14rc16 的崩溃需要一些语法知识，这在未来可以通过与语法模糊测试 [19, 20] 的结合来支持。

使用1T+D模板时，CAFL平均性能优于AFLGo 2.63倍。注意，启用数据条件的nT+D设置在大多数崩溃中持续表现出优于AFLGo的性能，即使数据条件无效，CAFL使用nT+D也至少显示出初步的性能优势。

表4展示了使用2T+D模板的崩溃复现时间，其中CAFL平均性能优于AFLGo 3.65倍。注意，在AFLGo和CAFL中，无数据条件的nT设置有时会比1T花费更长的复现时间。这主要是因为分配站点无论是否被定位都会经常被访问，从而增加了额外的调度开销。然而，在CAFL中，这种性能下降通过nT+D中的数据条件得到了补偿。总体而言，CAFL平均性能优于AFLGo 2.88倍。详细分析见附录D。

#### 程序
| 程序 | 错误位置 | 错误类型 | 模板 | AFLGo (分钟) | CAFL (分钟) |
| --- | --- | --- | --- | --- | --- |
| jasper 1.900.22 | jpc_tsfb.c:225 | 栈缓冲区溢出 | 2T+D | 116.3 | 34.2 |
| lame 3.99.5 | get_audio.c:1205 | 栈缓冲区溢出 | 2T+D | 142.1 | 34.2 |
| libsixel 1.8.1 | frompnm.c:144 | 栈缓冲区溢出 | 2T+D | * | 34.0 |
| fig2dev 3.2.7b | gensvg.c:1005 | 堆缓冲区溢出 | 2T+D | 56.2 | 35.0 |
| fig2dev 3.2.7b | read.c:1532 | 堆缓冲区溢出 | 2T+D | 180.9 | 14.9 |
| GraphicsM 1.4 | pict.c:1114 | 堆缓冲区溢出 | 2T+D | >2000.0 | 198.6 |
| ... | ... | ... | ... | ... | ... |

**注释:**
- **2T+D:** 设置所有可用的目标站点并包含数据条件。

---

希望这个优化后的版本更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！