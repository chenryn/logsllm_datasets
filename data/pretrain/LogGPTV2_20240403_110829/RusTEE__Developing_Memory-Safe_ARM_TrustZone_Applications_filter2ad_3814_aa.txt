title:RusTEE: Developing Memory-Safe ARM TrustZone Applications
author:Shengye Wan and
Mingshen Sun and
Kun Sun and
Ning Zhang and
Xu He
RusTEE: Developing Memory-Safe ARM
TrustZone Applications
Shengye Wan
The College of William & Mary
George Mason University
PI:EMAIL
Mingshen Sun
Baidu Security
PI:EMAIL
Kun Sun
George Mason University
PI:EMAIL
Ning Zhang
Washington University in St. Louis
PI:EMAIL
Xu He
George Mason University
PI:EMAIL
ABSTRACT
In the past decade, Trusted Execution Environment (TEE) provided
by ARM TrustZone is becoming one of the primary techniques for
enhancing the security of mobile devices. The isolation enforced
by TrustZone can protect the trusted applications running in the
TEE against malicious software in the untrusted rich execution en-
vironment (REE). However, TrustZone cannot completely prevent
vulnerabilities in trusted applications residing in the TEE, which
can then be used to attack other trusted applications or even the
trusted OS. Previously, a number of memory corruption vulnera-
bilities have been reported on different TAs, which are written in
memory-unsafe languages like C.
Recently, various memory-safe programming languages have
emerged to mitigate the prevalent memory corruption bugs. In
this paper, we propose RusTEE, a trusted application mechanism
that leverages Rust, a newly emerged memory-safe language, to
enhance the security of TAs. Though the high-level idea is quite
straight-forwarding, we resolve several challenges on adopting
Rust in mobile TEEs. Specifically, since Rust currently does not
support any TrustZone-assisted TEE systems, we extend the ex-
isting Rust compiler for providing such support. Also, we apply
comprehensive security mechanisms to resolve two security issues
of trusted applications, namely, securely invoking high-privileged
system services and securely communicating with untrusted REE.
We implement a prototype of RusTEE as the trusted applications’
SDK, which supports both emulator and real hardware devices.
The experiment shows that RusTEE can compile applications with
close-to-C performance on the evaluated platforms.
CCS CONCEPTS
• Security and privacy → Software security engineering; Mo-
bile platform security.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC ’20, December 07–11, 2020, Online
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427262
KEYWORDS
TrustZone, Rust, Trusted Applications, Memory-safety
ACM Reference Format:
Shengye Wan, Mingshen Sun, Kun Sun, Ning Zhang, and Xu He. 2020.
RusTEE: Developing Memory-Safe ARM TrustZone Applications. In ACSAC
’20: Annual Computer Security Applications Conference, December 07–11, 2020,
Online. ACM, New York, NY, USA, 12 pages. https://doi.org/10.1145/3427228.
3427262
1 INTRODUCTION
In recent years, TrustZone has been leveraged extensively to pro-
vide security protection on the ARM platforms [4, 8, 26, 43, 52].
It enables system-wide isolation by creating a Trusted Execution
Environment (TEE) for security-sensitive code and data protection
and therefore protects the TEE’s software from the untrusted Rich
Execution Environment (REE). The isolation is enforced via the
hardware features built in the processor as well as the system bus
interconnect. Due to the protection of hardware-assisted isolation,
it becomes common for TrustZone-based systems [4, 8, 47] to as-
sume the trust of entire TEE, including the trusted applications
(TAs) running in the TEE. Also, the functionalities of TEE systems
are extended dramatically by installing various TAs in the trusted
isolated environment.
Though TrustZone technology can assure isolation between
TEE and REE, dozens of software-based vulnerabilities have been
reported to compromise the entire TEE system [13, 22, 51]. Among
the reported vulnerabilities, most of them are caused by memory
corruption of the memory-unsafe TAs [9]. The risk of TEE systems
being compromised will increase along with the number of TAs
installed. Under the latest ARM TrustZone architecture, the term
"Trusted Application" only refers to an application that should be
trusted to run in TEE, but it does not mean the application is bug-
free. Due to two architectural features of TAs, namely, conducting
the cross-world communication with the REE and invoking kernel-
privileged system-service APIs, TAs could be manipulated by REE-
side attackers to compromise the entire TEE system. Researchers
propose to move the execution of TAs from the TEE to the REE
and thus prevent one vulnerable TA from corrupting other TAs or
the Trusted OS [8, 10, 43]. Though these solutions can effectively
mitigate the risk of vulnerable TAs, they will inevitably introduce
non-negligible overhead over the system.
442ACSAC ’20, December 07–11, 2020, Online
Shengye Wan, Mingshen Sun, Kun Sun, Ning Zhang, and Xu He
Recently, many programming languages focus effort on enhanc-
ing their memory-safety, and several new languages are proposed
with memory-safety as one of the goals, such as Rust and Go. Mean-
while, researchers have applied the memory-safe languages from
upper application layer (e.g., Intel SGX Enclave programs [48]) to
lower system layer (e.g., embedded system OSes [30, 31]). One pre-
condition to the engineering effort to rewrite the code base in these
memory-safe languages is relatively small, so that developers can
afford to convert the existing software into the memory-safe style.
Meanwhile, since ARM TrustZone is proposed to protect a limited
number of small security tasks, TAs become another ideal target to
be rewritten in the memory-safe language.
In this paper, we propose a mechanism called RusTEE to build
TrustZone-assisted applications in the memory-safe style, using
Rust [35] as the programming language. The basic idea is to leverage
newly emerging memory-safe languages and provide a Rust-based
Software Development Kit (SDK) on compiling memory-safe TAs to
prevent against memory-corruption vulnerabilities. Specifically, we
resolve several challenges to develop a TA with Rust. The first chal-
lenge is that none of TrustZone-assisted TEE system and associated
ARM platform has been recognized as the official support target to
the Rust. Therefore, we need to integrate all the Rust fundamen-
tal support such as the standard library into the TA development.
Second, TAs are required to invoke the APIs of different system
services, which are typically implemented as the kernel-privileged
libraries. Since some low-level libraries require specific ARM as-
sembly instructions that are not supported in Rust, it is impractical
to rewrite all the libraries in Rust. Inspired by a recent work Rust-
SGX [48], we solve this challenge by providing a binding layer
between the Rust application and C system. The binding provides
all the necessary interfaces for the TA dependent libraries while
also enforcing the Rust’s memory-safe standard on the bounded
interfaces. Third, we resolve a TA-specific challenge, i.e., providing
a secure cross-world communication channel for the TA in the TEE
world to communicate with the software in the REE world. The
security of the cross-world communication is ensured by regulating
the TA’s usage on any shared parameters between the two worlds.
After systematically studying the architectural specification of
TrustZone-assisted systems, we successfully import Rust into TA
development environment, and further apply multiple security
enhancements to reliably invoke system-service APIs and securely
conduct the cross-world communication. We develop a prototype
of RusTEE based on an open-source project OP-TEE OS [34] and
provide a variety of examples to demonstrate the functionalities and
efficiency of RusTEE. We have open sourced the RusTEE prototype
along with the memory-safe TA examples. The system evaluation
has been conducted on multiple ARM platforms, including the
AArch64 simulation and a real-world development board Juno r1 [3].
According to our experimental results, RusTEE only introduces
1% performance overhead on average on the evaluated examples.
Moreover, RusTEE enables the TAs to be integrated with millions
of existing Rust libraries, noticeably extending the functionalities
of the TAs in the TEE.
In summary, we make the following contributions.
(1) We propose RusTEE, the first memory-safe trusted applica-
tion development environment with comprehensive func-
tionalities for TrustZone-assisted systems. By utilizing the
built-in security properties and benefits of the Rust pro-
gramming language, our trusted application environment
removes most known memory-unsafe implementation bugs
in trusted applications and thus enhance the security of TEE.
(2) We address two security concerns of the TrustZone-assisted
TEE systems, namely, the widely exposed system-service
APIs and cross-world communication channels, to enhance
the security of Rust-based trusted applications.
(3) We implement a prototype of RusTEE and evaluate its per-
formance in both a simulation environment and a real de-
velopment board. Our experimental results show that our
system can comply with strictly safe Rust, and it only in-
curs a minimal overhead. We will open source the system
prototype.
The rest of the paper is organized as follows. Section 2 provides
the background of ARM TrustZone architecture and programming
language Rust. Section 3 presents the motivation associated with the
specific challenges of this work. Section 4 describes the overview
and detailed design of RusTEE, and the implementation of RusTEE’s
prototype is presented in Section 5. Section 6 first evaluates the
efficiency of Rust on the ARM platform, and then compares the per-
formance of Rust-based TAs with the traditional C-based versions.
Section 7 discusses the future directions of our work. Section 8
surveys the related works. Finally, Section 9 concludes the paper.
2 BACKGROUND
2.1 TrustZone Architecture
Adapting Trusted Execution Environment (TEE) has become a popu-
lar method for system developers to protect their security-sensitive
software. To provide a reliable hardware-assisted TEE, ARM deploys
TrustZone technology on its most recent application processors.
TrustZone creates the TEE as an isolated environment that runs op-
posite to the vulnerable and untrusted Rich Execution Environment
(REE). From the hardware perspective, ARM relies on its AMBA
BUS feature [2] to divide the entire System-on-Chip resources into
two worlds, where the normal world serves as the REE, and the
secure world serves as the TEE.
From the software perspective, ARM website [2] recognizes Glob-
alPlatform TEE Specification (aka, GPD specification) [20] as a widely
used TEE architecture on the latest ARM processors. The GPD spec-
ification defines a clear security boundary for TrustZone-assisted
TEE systems by providing a completed set of software definitions
between REE and TEE. Currently, multiple real-world TEE systems,
such as Linaro OP-TEE [34] and Trustonic Application Protection
Solution [45], apply the design of GPD specification into their im-
plementations.
2.2 GlobalPlatform TEE Specification
According to the GPD specification, an REE hosts the rich OS (e.g.,
Android, Linux) in association with the user-privileged applica-
tions. While most applications are deployed and used entirely in
REE as normal applications, some security-sensitive applications
can enable the TrustZone protection on their sensitive operations.
443RusTEE: Developing Memory-Safe ARM TrustZone Applications
ACSAC ’20, December 07–11, 2020, Online
A security-sensitive application divides itself into two components,
an REE-side component called Client Application (CA) and a TEE-
side component called Trusted Application (TA). The CA supports
most non-sensitive functionalities like user interactions; however,
neither the counterpart TA nor the TEE trusts the CA. Meanwhile,
all sensitive operations are isolated as the TA, which usually runs
on a Trusted OS inside the TEE. By leveraging TrustZone hardware-
assisted isolation, the confidentiality and integrity of TAs are pro-
tected from the untrusted REE. The entire GlobalPlatform Archi-
tecture for a TrustZone-assisted device is shown in Figure 1.
Figure 1: GlobalPlatform TEE Architecture
Since the CA and the TA run in two isolated environments, they
perform cross-world communication in reliance upon an REE Agent
and a TEE Agent for passing a command or exchanging the data.
To request the trusted execution of a TA, the CA calls the TEE