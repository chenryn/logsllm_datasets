o
13.19. symbol 模块
o
13.20. token 模块
o
14.其他模块
14.1. 概览
o
14.2. pyclbr 模块
o
14.3. filecmp 模块
o
14.4. cmd 模块
o
14.5. rexec 模块
o
14.6. Bastion 模块
o
14.7. readline 模块
o
14.8. rlcompleter 模块
o
14.9. statvfs 模块
o
14.10. calendar 模块
o
14.11. sched 模块
o
14.12. statcache 模块
o
14.13. grep 模块
o
14.14. dircache 模块
o
14.15. dircmp 模块
o
14.16. cmp 模块
o
14.17. cmpcache 模块
o
14.18. util 模块
o
14.19. soundex 模块
o
14.20. timing 模块
o
14.21. posixfile 模块
o
14.22. bisect 模块
o
14.23. knee 模块
o
14.24. tzparse 模块
o
14.25. regex 模块
o
14.26. regsub 模块
o
14.27. reconvert 模块
o
14.28. regex_syntax 模块
o
14.29. find 模块
o
15.Py 2.0 后新增模块
16.后记
"We'd like to pretend that 'Fredrik' is a role, but even hundreds of
volunteers couldn't possibly keep up. No, 'Fredrik' is the result of
crossing an http server with a spam filter with an emacs whatsit and some
other stuff besides."
-Gordon McMillan, June 1998
Python 2.0发布附带了一个包含200个以上模块的可扩展的标准库. 本书简要
地介绍每个模块并提供至少一个例子来说明如何使用它. 本书一共包含360个
例子.
0.1. 关于本书
"Those people who have nothing better to do than post on the Internet all
day long are rarely the ones who have the most insights."
- Jakob Nielsen, December 1998
五年前我偶然遇到了 Python, 开始了我的 Python 之旅, 我花费了大量的时间
在 comp.lang.python 新闻组里回答问题. 也许某个人发现一个模块正是他想
要的, 但是却不知道如何使用它. 也许某个人为他的任务挑选的不合适的模块.
也许某个人已经厌倦了发明新轮子. 大多时候, 一个简短的例子要比一份手册
文档更有帮助.
本书是超过3,000个新闻组讨论的精华部分, 当然也有很多的新脚本, 为了涵
盖标准库的每个角落.
我尽力使得每个脚本都易于理解, 易于重用代码. 我有意缩短注释的长度, 如
果你想更深入地了解背景, 那么你可以参阅每个 Python 发布中的参考手册.
本书的重要之处在于范例代码.
我们欢迎任何评论, 建议, 以及 bug 报告, 请将它们发送到
PI:EMAIL . 我将阅读尽我所能阅读所有的邮件, 但可能回复不
是那么及时.
本书的相关更新内容以及其他信息请访问
http://www.pythonware.com/people/fredrik/librarybook.htm
为什么没有 Tkinter?
本书涵盖了整个标准库, 除了(可选的)Tkinter ui(user-interface : 用户界面)
库. 有很多原因, 更多是因为时间, 本书的空间, 以及我正在写另一本关于
Tkinter 的书.
关于这些书的信息, 请访问
http://www.pythonware.com/people/fredrik/tkinterbook.htm . (不用看了,
又一404)
产品细节
本书使用DocBook SGML编写, 我使用了一系列的工具, 包括Secret Labs'
PythonWorks, Excosoft Documentor, James Clark's Jade DSSSL processor,
Norm Walsh's DocBook stylesheets, 当然,还有一些 Python 脚本.
感谢帮忙校对的人们: Tim Peters, Guido van Rossum, David Ascher, Mark Lutz,
和 Rael Dornfest, 以及 PythonWare 成员: Matthew Ellis, H?kan Karlsson,
和 Rune Uhlin.
感谢 Lenny Muellner, 他帮助我把SGML文件转变为你们现在所看到的这本书,
以及Christien Shangraw, 他将那些代码文件集合起来做成了随书CD (可以在
http://examples.oreilly.com/pythonsl 找到, 竟然没有404, 奇迹).
0.2. 代码约定
本书使用以下习惯用法:
斜体
用于文件名和命令. 还用于定义术语.
等宽字体 e.g. Python
用于代码以及方法,模块,操作符,函数,语句,属性等的名称.
等宽粗体
用于代码执行结果.
0.3. 关于例子
除非提到,所有例子都可以在 Python 1.5.2 和 Python 2.0 下运行. 能不能在
Python 2.4/2.5 下执行.....看参与翻译各位的了.
除了一些平台相关模块的脚本, 所有例子都可以在 Windows, Solaris, 以及
Linux 下正常执行.
所有代码都是有版权的. 当然,你可以自由地使用这些这些模块,别忘记你是从
哪得到(?学会)这些的.
大多例子的文件名都包含它所使用的模块名称,后边是 "-example- " 以及一个
唯一的"序号". 注意有些例子并不是按顺序出现的, 这是为了匹配本书的较早
版本 - (the eff-bot guide to) The Standard Python Library .
你可以在网上找到本书附带CD的内容 (参阅
http://examples.oreilly.com/pythonsl ). 更多信息以及更新内容参阅
http://www.pythonware.com/people/fredrik/librarybook.htm . (ft, 又一
404. 大家一定不要看~)
0.4. 如何联系我们
Python 江湖 QQ 群: 43680167
Feather (校对) QQ: 85660100
1. 核心模块
"Since the functions in the C runtime library are not part of the Win32
API, we believe the number of applications that will be affected by this
bug to be very limited."
- Microsoft, January 1999
1.1. 介绍
Python 的标准库包括了很多的模块, 从 Python 语言自身特定的类型和声明,
到一些只用于少数程序的不著名的模块.
本章描述了一些基本的标准库模块. 任何大型 Python 程序都有可能直接或间
接地使用到这类模块的大部分.
1.1.1. 内建函数和异常
下面的这两个模块比其他模块加在一起还要重要: 定义内建函数(例如 len,
int, range ...)的 _ _builtin_ _ 模块, 以及定义所有内建异常的 exceptions
模块.
Python 在启动时导入这两个模块, 使任何程序都能够使用它们.
1.1.2. 操作系统接口模块
Python 有许多使用了 POSIX 标准 API 和标准 C 语言库的模块. 它们为底层
操作系统提供了平台独立的接口.
这类的模块包括: 提供文件和进程处理功能的 os 模块; 提供平台独立的文件
名处理 (分拆目录名, 文件名, 后缀等)的 os.path 模块; 以及时间日期处理
相关的 time/datetime 模块.
[!Feather注: datetime 为 Py2.3 新增模块, 提供增强的时间处理方法 ]
延伸一点说, 网络和线程模块同样也可以归为这一个类型. 不过 Python 并没
有在所有的平台/版本实现这些.
1.1.3. 类型支持模块
标准库里有许多用于支持内建类型操作的库. string 模块实现了常用的字符串
处理. math 模块提供了数学计算操作和常量(pi, e都属于这类常量), cmath 模
块为复数提供了和 math 一样的功能.
1.1.4. 正则表达式
re 模块为 Python 提供了正则表达式支持. 正则表达式是用于匹配字符串或特
定子字符串的有特定语法的字符串模式.
1.1.5. 语言支持模块
sys 模块可以让你访问解释器相关参数,比如模块搜索路径,解释器版本号等.
operator 模块提供了和内建操作符作用相同的函数. copy 模块允许你复制对
象, Python 2.0 新加入的 gc 模块提供了对垃圾收集的相关控制功能.
1.2. _ _builtin_ _ 模块
这个模块包含 Python 中使用的内建函数. 一般不用手动导入这个模块;
Python会帮你做好一切.
1.2.1. 使用元组或字典中的参数调用函数
Python允许你实时地创建函数参数列表. 只要把所有的参数放入一个元组中，
然后通过内建的 apply 函数调用函数. 如 Example 1-1 .
1.2.1.1. Example 1-1. 使用 apply 函数
File: builtin-apply-example-1.py
def function(a, b):
print a, b
apply(function, ("whither", "canada?"))
apply(function, (1, 2 + 3))
whither canada?
1 5
要想把关键字参数传递给一个函数, 你可以将一个字典作为 apply 函数的第 3
个参数, 参考 Example 1-2 .
1.2.1.2. Example 1-2. 使用 apply 函数传递关键字参数
File: builtin-apply-example-2.py
def function(a, b):
print a, b
apply(function, ("crunchy", "frog"))
apply(function, ("crunchy",), {"b": "frog"})
apply(function, (), {"a": "crunchy", "b": "frog"})
crunchy frog
crunchy frog
crunchy frog
apply 函数的一个常见用法是把构造函数参数从子类传递到基类, 尤其是构造
函数需要接受很多参数的时候. 如 Example 1-3 所示.
1.2.1.3. Example 1-3. 使用 apply 函数调用基类的构造函数
File: builtin-apply-example-3.py
class Rectangle:
def _ _init_ _(self, color="white", width=10, height=10):
print "create a", color, self, "sized", width, "x", height
class RoundedRectangle(Rectangle):
def _ _init_ _(self, **kw):
apply(Rectangle._ _init_ _, (self,), kw)
rect = Rectangle(color="green", height=
100, width=100) rect= RoundedRectangle(color=
"blue",
height = 20) 
create a green  sized 100 x 100
create a blue  sized 10 x 20
Python 2.0 提供了另个方法来做相同的事. 你只需要使用一个传统的函数调
用 , 使用 * 来标记元组, ** 来标记字典.
下面两个语句是等价的:
result = function(*args, **kwargs)
result =
apply(function, args, kwargs) 
1.2.2. 加载和重载模块
如果你写过较庞大的 Python 程序, 那么你就应该知道 import 语句是用来导
入外部模块的 (当然也可以使用 from-import 版本). 不过你可能不知道
import 其实是靠调用内建函数 _ _import_ _ 来工作的.
通过这个戏法你可以动态地调用函数. 当你只知道模块名称(字符串)的时候,
这将很方便. Example 1-4 展示了这种用法, 动态地导入所有以 "-plugin " 结
尾的模块.
1.2.2.1. Example 1-4. 使用 _ _import_ _ 函数加载模块
File: builtin-import-example-1.py
import glob, os
modules = []
for module_file in glob.glob("*-plugin.py"):
try:
module_name, ext =
os.path.splitext(os.path.basename(module_file))
module = _ _import_ _(module_name)
modules.append(module)
except ImportError:
pass # ignore broken modules
# say hello to all modules
for module in modules:
module.hello()
example-plugin says hello
注意这个 plug-in 模块文件名中有个 "-" (hyphens). 这意味着你不能使用普
通的 import 命令, 因为 Python 的辨识符不允许有 "-" .
Example 1-5 展示了 Example 1-4 中使用的 plug-in .
1.2.2.2. Example 1-5. Plug-in 例子
File: example-plugin.py
def hello():
print "example-plugin says hello"
Example 1-6 展示了如何根据给定模块名和函数名获得想要的函数对象.
1.2.2.3. Example 1-6. 使用 _ _import_ _ 函数获得特定函数
File: builtin-import-example-2.py
def getfunctionbyname(module_name, function_name):
module = _ _import_ _(module_name)
return getattr(module, function_name)
print repr(getfunctionbyname("dumbdbm", "open"))
你也可以使用这个函数实现延迟化的模块导入 (lazy module loading). 例如在
Example 1-7 中的 string 模块只在第一次使用的时候导入.
1.2.2.4. Example 1-7. 使用 _ _import_ _ 函数实现 延迟导入
File: builtin-import-example-3.py
class LazyImport:
def _ _init_ _(self, module_name):
self.module_name = module_name
self.module = None
def _ _getattr_ _(self, name):
if self.module is None:
self.module = _ _import_ _(self.module_name)
return getattr(self.module, name)
string = LazyImport("string")
print string.lowercase
abcdefghijklmnopqrstuvwxyz
Python 也提供了重新加载已加载模块的基本支持. [Example 1-8 #eg-1-8 会加
载 3 次 hello.py 文件.
1.2.2.5. Example 1-8. 使用 reload 函数
File: builtin-reload-example-1.py
import hello
reload(hello)
reload(hello)
hello again, and welcome to the show
hello again, and welcome to the show
hello again, and welcome to the show
reload 直接接受模块作为参数.
[!Feather 注: ^ 原句无法理解, 稍后讨论.]
注意，当你重加载模块时, 它会被重新编译, 新的模块会代替模块字典里的老模
块. 但是, 已经用原模块里的类建立的实例仍然使用的是老模块(不会被更新).
同样地, 使用 from-import 直接创建的到模块内容的引用也是不会被更新的.
1.2.3. 关于名称空间
dir 返回由给定模块, 类, 实例, 或其他类型的所有成员组成的列表. 这可能
在交互式 Python 解释器下很有用, 也可以用在其他地方. Example 1-9 展示了
dir 函数的用法.
1.2.3.1. Example 1-9. 使用 dir 函数
File: builtin-dir-example-1.py
def dump(value):
print value, "=>", dir(value)
import sys
dump(0)
dump(1.0)
dump(0.0j) # complex number
dump([]) # list
dump({}) # dictionary
dump("string")
dump(len) # function
dump(sys) # module
0 => []
1.0 => []
0j => ['conjugate', 'imag', 'real']
[] => ['append', 'count', 'extend', 'index', 'insert',
'pop', 'remove', 'reverse', 'sort']
{} => ['clear', 'copy',
'get', 'has_key',
'items', 'keys', 'update', 'values']
string =
> []  = > ['_ _doc_ _', '_
_name_ _', '_
_self_ _']
 =
> ['_ _doc_ _', '_ _name_ _',
'_ _stderr_ _', '_ _stdin_ _', '_ _stdout_ _', 'argv',
'builtin_module_names', 'copyright', 'dllhandle',
'exc_info', 'exc_type', 'exec_prefix', 'executable',
...
在例子 Example 1-10 中定义的 getmember 函数返回给定类定义的所有类级别
的属性和方法.
1.2.3.2. Example 1-10. 使用 dir 函数查找类的所有成员
File: builtin-dir-example-2.py
class A:
def a(self):
pass
def b(self):
pass
class B(A):
def c(self):
pass
def d(self):
pass
def getmembers(klass, members=None):
# get a list of all class members, ordered by class
if members is None:
members = []
for k in klass._ _bases_ _:
getmembers(k, members)
for m in dir(klass):
if m not in members:
members.append(m)
return members