        Style="{StaticResource FancyButtonStyle}"
 Margin="3" />
样式提供了一种继承方式。一个样式可以基于另一个样式。下面的
AnotherButtonStyle样式基于FancyButtonStyle样式。它使用该样式定义的所有设置，且通
过BasedOn属性引用，但Foreground属性除外，它设置为LinearGradientBrush：
最后一个按钮应用了AnotherButtonStyle：
图30-13
图30-13显示了所有这些按钮的效果。
30.6.2 资源
从样式示例可以看出，样式通常存储在资源中。可以
在资源中定义任意可冻结（WPF）或可共享（UWP）的元
素。例如，前面为按钮的背景样式创建了画笔，它本身就
可以定义为一个资源，这样就可以在需要画笔的地方使用它。
下面的示例在StackPanel资源中定义一个LinearGradientBrush，它的键名是
MyGradientBrush。button1使用StaticResource标记扩展将Background属性赋予
MyGradientBrush资源（代码文件StylesAndResources[WPF | UWP]/ ResourceDemo[Page |
Window].xaml）。
这里，资源用StackPanel定义。在上面的例子中，资源用Page或Window元素定义。基
类FrameworkElement定义ResourceDictionary类型的Resources属性。这就是资源可以用派
生自FrameworkElement的所有类（任意XAML元素）来定义的原因。
资源按层次结构来搜索。如果用根元素定义资源，它就会应用于所有子元素。如果根
元素包含一个Grid，该Grid包含一个StackPanel，且资源是用StackPanel定义的，该资源就
会应用于StackPanel中的所有控件。如果StackPanel包含一个按钮，但只用该按钮定义资
源，这个样式就只对该按钮有效。
  注意： 对于层次结构，需要注意是否为样式使用了没有Key的TargetType。
如果用Canvas元素定义一个资源，并把样式的TargetType设置为应用于TextBox元素，
该样式就会应用于Canvas中的所有TextBox元素。如果Canvas中有一个ListBox，该样式
甚至会应用于ListBox包含的TextBox元素。
如果需要将同一个样式应用于多个窗口，就可以用应用程序定义样式。在用Visual
Studio创建的WPF和UWP应用程序中，创建App.xaml文件，以定义应用程序的全局资源。
应用程序样式对其中的每个页面或窗口都有效。每个元素都可以访问用应用程序定义的资
源。如果通过父窗口找不到资源，就可以通过Application继续搜索资源（代码文件
StylesAndResourcesUWP/App.xaml）。
30.6.3 从代码中访问资源
要从代码隐藏中访问资源，基类FrameworkElement的Resources属性返回
ResourceDictionary。该字典使用索引器和资源名称提供对资源的访问。可以使用
ContainsKey方法检查资源是否可用。
下面看一个例子。按钮控件button1没有指定背景，但将Click事件动态赋予
OnApplyResource（）方法，以动态修改它（代码文件StylesAndResources[WPF 
|
UWP]/ResourceDemo[Page | Window].xaml）。
现在在WPF和UWP应用程序中，可以用一个稍微不同的实现方式在层次结构中查找
资源。在WPF中，ResourceDictionary提供了方法FindResource和TryFindResource，从层次
结构中获得资源。资源没有找到时，FindResource会抛出一个异常；而TryFindResource只
是返回null（代码文件StylesAndResources[WPF | UWP]/ ResourceDemo.xaml.cs）：
    private void OnApplyResources(object sender, RoutedEventArgs e)
    {
      Control ctrl = sender as Control;
      ctrl.Background = ctrl.TryFindResource("MyGradientBrush") as Brush;
    }
对于UWP应用程序，TryFindResource不可用于ResourceDictionary。然而，使用扩展
方法很容易实现这个方法，因此OnApplyResources的实现代码可以保持不变。
方法TryFindResource使用ContainsKey检查请求的资源是否可用，它会递归地调用方
法，以免资源还没有找到（代码文件StylesAndResourcesUWP 
/
FrameworkElementExtensions.cs）：
    public static class FrameworkElementExtensions
    {
      public static object TryFindResource(this FrameworkElement e, string key)
      {
        if (e == null) throw new ArgumentNullException(nameof(e));
        if (key == null) throw new ArgumentNullException(nameof(key));
        if (e.Resources.ContainsKey(key))
        {
        return e.Resources[key];
        }
        else
        {
        var parent = e.Parent as FrameworkElement;
        if (parent == null) return null;
        return TryFindResource(parent, key);
        }
      }
    }
30.6.4 动态资源（WPF）
通过StaticResource标记扩展，在加载期间搜索资源。如果在运行程序的过程中改变了
资源，就应给WPF使用DynamicResource标记扩展。UWP不支持DynamicResource标记扩
展。
下面的例子使用与前面定义的相同资源。前面的示例使用StaticResource，而这个按钮
通过DynamicResource标记扩展使用DynamicResource。这个按钮的事件处理程序以编程方
式改变资源。把处理程序方法OnChangeDynamicResource赋予Click事件处理程序（代码文
件StylesAndResourcesWPF/ResourceDemo.xaml）。
OnChangeDynamicResource方法的实现代码清除了StackPanel的资源，并用相同的名
称MyGradientBrush添加了一个新资源。这个新资源非常类似于在XAML代码中定义的资
源，它只定义了不同的颜色（代码文件
StylesAndResourcesWPF/ResourceDemo.xaml.cs）。
    private void OnChangeDynamicResource(object sender, RoutedEventArgs e)
    {
      myContainer.Resources.Clear();
      var brush = new LinearGradientBrush
      {
        StartPoint = new Point(0, 0),
        EndPoint = new Point(0, 1)
      };
      brush.GradientStops = new GradientStopCollection()
      {
        new GradientStop(Colors.White, 0.0),
        new GradientStop(Colors.Yellow, 0.14),
        new GradientStop(Colors.YellowGreen, 0.7)
      };
      myContainer.Resources.Add("MyGradientBrush", brush);
    }
运行应用程序时，单击Change 
Resource按钮，可以动态地更改资源。使用通过动态
资源定义的按钮会获得动态创建的资源，而用静态资源定义的按钮看起来与以前一样。
30.6.5 资源字典
如果相同的资源可用于不同的页面甚至不同的应用程序，把资源放在一个资源字典中
就比较有效。使用资源字典，可以在多个应用程序之间共享文件，也可以把资源字典放在
一个程序集中，供应用程序共享。
要共享程序集中的资源字典，应创建一个库。可以把资源字典文件（这里是
Dictionary1.xaml）添加到程序集中。在WPF中，这个文件的构建动作必须设置为
Resource，从而把它作为资源添加到程序集中。
Dictionary1.xaml定义了两个资源：一个是包含CyanGradientBrush键的
LinearGradientBrush；另一个是用于按钮的样式，它可以通过PinkButtonStyle键来引用
（代码文件ResourcesLib [WPF | UWP]/Dictionary1.xaml）：
对于目标项目，需要引用这个库，并把资源字典添加到这个字典中。通过
ResourceDictionary的MergedDictionaries属性，可以使用添加进来的多个资源字典文件。可
以把一个资源字典列表添加到合并的字典中。
引用库的方式在WPF和UWP应用程序中是不同的。在WPF中，使用包URI语法。包
URI语法可以指定为绝对的，其中URI以pack://开头，也可以指定为相对的，如本例所
示。使用相对语法，包含字典的引用程序集ResourceLibWPF跟在“/”的后面，其后是“;
component”。Component表示，该字典包含为程序集中的一个资源。之后添加字典文件的
名称Dictionary1.xaml。如果把字典添加到子文件夹中，则必须声明子文件夹名（代码文
件StylesAndResourcesWPF/App.xaml）。
对于UWP应用程序，引用略有区别。在这里，必须给要引用的资源字典加上ms-
appx:/ / /模式的前缀（代码文件StylesAndResourcesUWP / App. xaml）：
现在可以像本地资源那样使用引用程序集中的资源了（代码文件
StylesAndResources[WPF | UWP]/Resource Demo[Window | Page].xaml）：
30.6.6 主题资源（UWP）
尽管UWP应用程序不支持DynamicResource标记扩展，但这些应用程序也能动态改变
样式。这个功能是基于主题的。通过主题，可以允许用户在光明与黑暗主题之间切换（类
似于可以用Visual Studio改变的主题）。
1．定义主题资源
主题资源可以在ThemeDictionaries集合的资源字典中定义。在ThemeDictionaries集合
中定义的ResourceDictionary对象需要分配一个包含主题名称（Light或Dark）的键。示例
代码为浅色背景和暗色前景的Light主题定义了一个按钮，为浅色前景和暗色背景的dark主
题定义了一个按钮。用于样式的键在这两个字典中是一样的：SampleButtonStyle（代码文
件StylesAndResourcesUWP / Styles /SampleThemes.xaml）：
使用ThemeResource标记扩展可以指定样式。除了使用另一个标记扩展之外，其他的
都与StaticResource标记扩展相同（代码文件StylesAndResourcesUWP 
/
ThemeDemoPage.xaml）：
根据选择的主题，使用相应的样式。
2．选择主题
有不同的方式来选择主题。首先，应用程序本身有一个默认的主题。Application类的
RequestedTheme属性定义了应用程序的默认主题。这在App.xaml内定义，在其中还引用了
主题字典文件（代码文件StylesAndResourcesUWP / App.xaml）：
RequestedTheme属性在XAML元素的层次结构中定义。每个元素可以覆盖用于它本身
及其子元素的主题。下面的Grid元素改变了Dark主题的默认主题。现在它用于Grid元素及
其所有子元素（代码文件StylesAndResourcesUWP / ThemeDemoPage.xaml）：
      <Button Style="{ThemeResource SampleButtonStyle}"
 Click="OnChangeTheme"