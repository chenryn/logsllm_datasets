```
var dinner = Mapper.Map(eventMessage.Dinner);
using (var db = new NerdDinnerContext())
{
  dinner.RSVPs = new List
  {
    new RSVP
    {
      AttendeeName = dinner.HostedBy
    }
  };
  db.Dinners.Add(dinner);
  db.SaveChanges();
}
```
现在，消息处理程序可以打包到自己的 Docker 映像中，并在网站容器旁边的容器中运行。
# 包装。包装。Docker 中的网络控制台应用
作为 Docker 的好公民，控制台应用很容易构建。为应用编译的可执行文件将是 Docker 启动和监控的主要进程，因此您只需要使用控制台进行日志记录，并且可以使用文件和环境变量进行配置。
对于我的消息处理程序，我使用了一个模式略有不同的 Dockerfile。我有一个单独的构建器阶段的映像，用来编译整个解决方案——包括 web 项目和我添加的新项目。一旦您看到了所有的新组件，我将在本章的稍后部分详细介绍构建器映像。
构建器编译解决方案，控制台应用的 Dockerfile 引用`dockeronwindows/ch05-nerd-dinner-builder:2e`映像来复制出编译后的二进制文件。整个 Dockerfile 非常简单:
```
# escape=`
FROM mcr.microsoft.com/windows/servercore:ltsc2019
CMD ["NerdDinner.MessageHandlers.SaveDinner.exe"]
WORKDIR C:\save-handler
COPY --from=dockeronwindows/ch05-nerd-dinner-builder:2e `
     C:\src\NerdDinner.MessageHandlers.SaveDinner\obj\Release\ . 
```
The `from` argument in the `COPY` instruction specifies the source of the files. It can be another stage in a multistage build, or—as in this example—an existing image on the local machine or a registry.
新的消息处理程序需要访问消息队列和数据库，每个消息的连接字符串都捕获在项目的`appsettings.json`文件中。控制台应用使用与 NerdDinner web 应用相同的`Config`类，后者从 JSON 文件中加载默认值，并可以从环境变量中覆盖它们。
在 Dockerfile 中，`CMD`指令中的入口点是控制台可执行文件，所以只要控制台应用在运行，容器就会一直运行。消息队列的侦听器在主应用的独立线程上异步运行。当收到消息时，处理程序代码将会触发，因此不会对队列进行轮询，应用运行非常高效。
使用`ManualResetEvent`对象，让控制台应用无限期运行是很简单的。在`Main`方法中，我等待一个从未发生过的复位事件，所以程序一直运行:
```
class Program
{
  private static ManualResetEvent _ResetEvent = new ManualResetEvent(false);
  static void Main(string[] args)
  {
    // set up message listener
    _ResetEvent.WaitOne();
  }
}
```
这是保持. NET Framework 或. NET Core 控制台应用活动的一种简单有效的方法。当我启动一个消息处理程序容器时，它将继续在后台运行并监听消息，直到容器停止。
# 在 Docker 中运行消息队列
web 应用现在发布消息，一个处理程序监听它们，所以我需要的最后一个组件是一个消息队列来连接两者。队列需要与解决方案的其余部分相同的可用性级别，因此它们很适合在 Docker 容器中运行。在部署在许多服务器上的分布式解决方案中，队列可以跨多个容器进行集群，以获得性能和冗余。
您对消息传递技术的选择取决于您需要的功能，但是有很多选择.NET 客户端库。**微软消息队列** ( **MSMQ** )是原生 Windows 队列，**rabbtmq**是一个流行的开源队列，支持持久消息传递， **NATS** 是一个开源内存队列，性能非常出色。
NATS 消息传递的高吞吐量和低延迟使其成为容器之间通信的好选择，Docker Hub 上有 NATS 的官方映像。NATS 是一个跨平台运行的 Go 应用，Docker 映像有 Linux、Windows Server Core 和 Nano Server 变体。
At the time of writing, the NATS team only had images for Windows Server 2016 published on Docker Hub. There will be a Windows Server 2019 image soon, but I've built my own for this chapter. Look at the Dockerfile for `dockeronwindows/ch05-nats:2e` and you'll see how easy it is to use the content from an official image in one of your own images.
您可以像运行任何其他容器一样运行 NATS 消息队列。Docker 映像公开了端口`4222`，这是客户端用来连接到队列的端口，但是您不需要发布该端口，除非您想要在 Docker 容器之外向 NATS 发送消息。同一个网络中的容器总是可以访问彼此的端口，它们只需要发布就可以在 Docker 之外使用。NerdDinner web 应用和消息处理程序正在使用服务器名`message-queue`连接到 NATS，因此它需要是容器名:
```
docker container run --detach `
 --name message-queue `
 dockeronwindows/ch05-nats:2e
```
NATS 服务器应用将消息记录到控制台，以便 Docker 收集日志条目。当容器正在运行时，您可以使用`docker container logs`验证队列正在侦听:
```
> docker container logs message-queue
[7996] 2019/02/09 15:40:05.857320 [INF] Starting nats-server version 1.4.1
[7996] 2019/02/09 15:40:05.858318 [INF] Git commit [3e64f0b]
[7996] 2019/02/09 15:40:05.859317 [INF] Starting http monitor on 0.0.0.0:8222
[7996] 2019/02/09 15:40:05.859317 [INF] Listening for client connections on 0.0.0.0:4222
[7996] 2019/02/09 15:40:05.859317 [INF] Server is ready
[7996] 2019/02/09 15:40:05.948151 [INF] Listening for route connections on 0.0.0.0:6222
```
消息队列是一个基础结构级别的组件，不依赖于其他组件。它可以在其他容器之前启动，并在应用容器停止或升级时保持运行。
# 启动多容器解决方案
随着您更多地使用 Docker，您的解决方案将分布在更多的容器中——要么运行从单块中分离出来的自定义代码，要么运行 Docker Hub 或第三方注册表中经过测试和信任的第三方软件。
NerdDinner 现在跨五个容器运行——SQL Server、原始 web 应用、新主页、NATS 消息队列和消息处理程序。容器之间存在依赖关系，它们需要以正确的顺序启动，并用正确的名称创建，以便可以使用 Docker 的服务发现找到组件。
在下一章中，我将使用 Docker Compose 来声明性地映射这些依赖关系。目前，我有一个名为`ch05-run-nerd-dinner_part-1.ps1`的 PowerShell 脚本，它以正确的配置显式启动容器:
```
docker container run -d `
 --name message-queue `
 dockeronwindows/ch05-nats:2e;
docker container run -d -p 1433 `
 --name nerd-dinner-db `
 -v C:\databases\nd:C:\data `
 dockeronwindows/ch03-nerd-dinner-db:2e;
docker container run -d `
 --name nerd-dinner-save-handler `
 dockeronwindows/ch05-nerd-dinner-save-handler:2e;
docker container run -d `
 --name nerd-dinner-homepage `
 dockeronwindows/ch03-nerd-dinner-homepage:2e;
docker container run -d -p 80 `
 --name nerd-dinner-web `
 --env-file api-keys.env `
 dockeronwindows/ch05-nerd-dinner-web:2e;
```
In this script I'm using the SQL database and home page images from [Chapter 3](03.html), *Developing Dockerized .NET Framework and .NET Core Applications*—these components haven't changed, so they can be run alongside the new components. If you want to run this yourself with full functionality, you will need to populate your own API keys in the file `api-keys.env`. You'll need to sign up to the Bing Maps API and the IP information database. You can run the app without those keys, but not all features will work correctly.
当我用自己设置的 API 键运行脚本并检查 web 容器以获取端口时，我可以浏览到应用。现在是 NerdDinner 的全功能版本。我可以登录并完成创建晚餐表单，完成地图集成:
![](img/68a1f0a6-8a3f-42ff-b0e0-aeb43fe1b36e.png)
当我提交表单时，web 应用会向队列发布一条事件消息。这是一个非常便宜的操作，所以网络应用几乎立即返回给用户。监听消息是控制台应用，运行在不同的容器中，可能在不同的主机上。它接收信息并进行处理。处理程序将活动记录到控制台，以便管理员用户可以使用`docker container logs`进行监控:
```
> docker container logs nerd-dinner-save-handler
Connecting to message queue url: nats://message-queue:4222
Listening on subject: events.dinner.created, queue: save-dinner-handler
Received message, subject: events.dinner.created
Saving new dinner, created at: 2/10/2019 8:22:16 PM; event ID: a6340c95-3629-4c0c-9a11-8a0bce8e6d91
Dinner saved. Dinner ID: 1; event ID: a6340c95-3629-4c0c-9a11-8a0bce8e6d91
```
创建晚餐功能的功能是相同的—用户输入的数据保存到 SQL Server—用户体验也是相同的，但是该功能的可扩展性得到了极大的提高。设计容器让我可以将持久性代码提取到一个新组件中，知道该组件可以部署在与现有解决方案相同的基础架构上，并且如果应用部署在集群上，它将继承现有的可伸缩性和故障转移级别。