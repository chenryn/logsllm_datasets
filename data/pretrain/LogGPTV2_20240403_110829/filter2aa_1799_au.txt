to be used by a driver to indicate that even though it is using the Zw API, which sets the previ-
ous mode to KernelMode, the Object Manager should still treat the request as if coming from
UserMode.
I 
IO_FORCE_ACCESS_CHECKING
ZwCreateFile
would change the previous mode to KernelMode and bypass access checks. Potentially, a driver
I 
redirection attacks, where privileged kernel-mode code might be incorrectly using various
100 
CHAPTER 8 System mechanisms
I 
with the Zw interface, must keep in mind that this will reset the previous mode to KernelMode
and respond accordingly.
Service descriptor tables
We previously mentioned that before performing a system call, the user-mode or kernel-mode tram-
the bottom 12 bits, represents the system call index. The second, which uses the next higher 2 bits (12-
13), is the table identifier
types of system services, each stored in a table that can house up to 4096 system calls.
Table Index
Index into table
System service number
0
0
Native API
Unused
KeServiceDescriptorTable
KeServiceDescriptorTableShadow
1
0
Native API
Win32k.sys API
1
13 11
31
FIGURE 8-27 System service number to system service translation.
The kernel keeps track of the system service tables using three possible arrays—KeServiceDescriptor 
Table, KeServiceDescriptorTableShadow, and KeServiceDescriptorTableFilter. Each of these arrays can 
have up to two entries, which store the following three pieces of data:
I 
A pointer to the array of system calls implemented by this service table
I 
The number of system calls present in this service table, called the limit
I 
A pointer to the array of argument bytes for each of the system calls in this service table
KiServiceTable and KiArgumentTable, with a 
little over 450 system calls (the precise number depends on your version of Windows). All threads, by 
default, issue system calls that only access this table. On x86, this is enforced by the ServiceTable pointer 
in the thread object, while all other platforms hardcode the symbol KeServiceDescriptorTable in the 
system call dispatcher. 
CHAPTER 8 System mechanisms
101
PsConvertTo 
GuiThread
GuiThreadRestrictedGuiThread
one is used depends on whether the EnableFilteredWin32kSystemCalls process mitigation option is 
enabled, which we described in the “Process-mitigation policies” section of Chapter 7, Part 1. On x86 
ServiceTable pointer now changes to KeServiceDescriptorTableShadow or 
KeServiceDescriptorTableFilter
hardcoded symbol chosen at each system call. (Although less performant, the latter avoids an obvious 
hooking point for malicious software to abuse.)
As you can probably guess, these other arrays include a second entry, which represents the 
Windows USER and GDI services implemented in the kernel-mode part of the Windows subsystem, 
albeit these still transit through Win32k.sys initially. This second entry points to W32pServiceTable or 
W32pServiceTableFilter and W32pArgumentTable or W32pArgumentTableFilter, respectively, and has 
about 1250 system calls or more, depending on your version of Windows.
Note Because the kernel does not link against Win32k.sys, it exports a 
KeAddSystemServiceTable function that allows the addition of an additional entry into 
the KeServiceDescriptorTableShadow and the KeServiceDescriptorTableFilter table if it has 
and PatchGuard protects the arrays once this function has been called, so that the structures 
effectively become read only.
The only material difference between the Filter entries is that they point to system calls in Win32k.sys 
with names like stub_UserGetThreadState, while the real array points to NtUserGetThreadState. The for-
STATUS_INVALID_SYSTEM_SERVICE
(such as NtUserGetThreadState), with potential telemetry if auditing is enabled.
The argument tables, on the other hand, are what help the kernel to know how many stack bytes need 
to be copied from the user stack into the kernel stack, as explained in the dispatching section earlier. 
Each entry in the argument table corresponds to the matching system call with that index and stores 
the count of bytes to copy (up to 255). However, kernels for platforms other than x86 employ a mecha-
nism called system call table compaction, which combines the system call pointer from the call table 
with the byte count from the argument table into a single value. The feature works as follows:
1.
Take the system call function pointer and compute the 32-bit difference from the beginning of
the system call table itself. Because the tables are global variables inside of the same module
that contains the functions, this range of ±2 GB should be more than enough.
102 
CHAPTER 8 System mechanisms
2.
Take the stack byte count from the argument table and divide it by 4, converting it into an
argument count
simply be considered as two “arguments”).
3.
bit-
wise or operation to add the argument count from the second step.
4.
Override the system call function pointer with the value obtained in step 3.
-
pointer dereferences, and it acts as a layer of obfuscation, which makes it harder to hook or patch the 
system call table while making it easier for PatchGuard to defend it.
EXPERIMENT: Mapping system call numbers to functions and arguments
You can duplicate the same lookup performed by the kernel when dealing with a system call 
On an x86 system, you can just ask the debugger to dump each system call table, such as 
KiServiceTable with the dps command, which stands for dump pointer symbol, which will actu-
ally perform a lookup for you. You can then similarly dump the KiArgumentTable (or any of the 
Win32k.sys ones) with the db command or dump bytes.
A more interesting exercise, however, is dumping this data on an ARM64 or x64 system, due 
to the encoding we described earlier. The following steps will help you do that.
1.
NtMapUserPhysicalPagesScatter:
lkd> ?? ((ULONG)(nt!KiServiceTable[3]) >> 4) + (int64)nt!KiServiceTable
unsigned int64 0xfffff803`1213e030
lkd> ln 0xfffff803`1213e030  
(fffff803`1213e030)   nt!NtMapUserPhysicalPagesScatter 
2.
You can see the number of stack-based 4-byte arguments this system call takes by
taking the 4-bit argument count:
lkd> dx (((int*)&(nt!KiServiceTable))[3] & 0xF)
(((int*)&(nt!KiServiceTable))[3] & 0xF) : 0
3.
system, the call could take anywhere between 0 and 4 arguments, all of which are in
registers (RCX, RDX, R8, and R9).
EXPERIMENT: Mapping system call numbers to functions and arguments
You can duplicate the same lookup performed by the kernel when dealing with a system call 
On an x86 system, you can just ask the debugger to dump each system call table, such as 
KiServiceTable with the dps command, which stands for dump pointer symbol, which will actu
dump pointer symbol, which will actu
dump pointer symbol
-
ally perform a lookup for you. You can then similarly dump the KiArgumentTable (or any of the 
Win32k.sys ones) with the db command or dump bytes.
A more interesting exercise, however, is dumping this data on an ARM64 or x64 system, due 
to the encoding we described earlier. The following steps will help you do that.
1.
NtMapUserPhysicalPagesScatter:
lkd> ?? ((ULONG)(nt!KiServiceTable[3]) >> 4) + (int64)nt!KiServiceTable
unsigned int64 0xfffff803`1213e030 
lkd> ln 0xfffff803`1213e030 
(fffff803`1213e030)   nt!NtMapUserPhysicalPagesScatter 
2.
You can see the number of stack-based 4-byte arguments this system call takes by 
taking the 4-bit argument count:
lkd> dx (((int*)&(nt!KiServiceTable))[3] & 0xF)
(((int*)&(nt!KiServiceTable))[3] & 0xF) : 0
3.
system, the call could take anywhere between 0 and 4 arguments, all of which are in 
registers (RCX, RDX, R8, and R9).
CHAPTER 8 System mechanisms
103
4. 
You could also use the debugger data model to create a LINQ predicate using projection,
dumping the entire table, leveraging the fact that the KiServiceLimit variable corresponds
W32pServiceLimit for the
Win32k.sys entries in the shadow descriptor table). The output would look like this:
lkd> dx @$table = &nt!KiServiceTable
@$table = &nt!KiServiceTable : 0xfffff8047ee24800 [Type: void *]
lkd> dx (((int(*)[90000])&(nt!KiServiceTable)))->Take(*(int*)&nt!KiServiceLimit)-> 
     Select(x => (x >> 4) + @$table) 
(((int(*)[90000])&(nt!KiServiceTable)))->Take(*(int*)&nt!KiServiceLimit)->Select 
     (x => (x >> 4) + @$table) 
   [0]
: 0xfffff8047eb081d0 [Type: void *] 
   [1]
: 0xfffff8047eb10940 [Type: void *] 
   [2]
: 0xfffff8047f0b7800 [Type: void *] 
   [3]
: 0xfffff8047f299f50 [Type: void *] 
   [4]
: 0xfffff8047f012450 [Type: void *] 
   [5]
: 0xfffff8047ebc5cc0 [Type: void *] 
   [6]
: 0xfffff8047f003b20 [Type: void *]
5.
You could use a more complex version of this command that would also allow you to
convert the pointers into their symbolic forms, essentially reimplementing the dps
command that works on x86 Windows:
lkd> dx @$symPrint = (x => Debugger.Utility.Control.ExecuteCommand(".printf \"%y\\n\"," + 
     ((unsigned __int64)x).ToDisplayString("x")).First()) 
@$symPrint = (x => Debugger.Utility.Control.ExecuteCommand(".printf \"%y\\n\"," + 
((unsigned __int64)x).ToDisplayString("x")).First()) 
lkd> dx (((int(*)[90000])&(nt!KiServiceTable)))->Take(*(int*)&nt!KiServiceLimit)->Select 
     (x => @$symPrint((x >> 4) + @$table)) 
(((int(*)[90000])&(nt!KiServiceTable)))->Take(*(int*)&nt!KiServiceLimit)->Select(x => 
@$symPrint((x >> 4) + @$table))
    [0]
: nt!NtAccessCheck (fffff804`7eb081d0) 
    [1]
: nt!NtWorkerFactoryWorkerReady (fffff804`7eb10940) 
    [2]
: nt!NtAcceptConnectPort (fffff804`7f0b7800) 
    [3]
: nt!NtMapUserPhysicalPagesScatter (fffff804`7f299f50) 
    [4]
: nt!NtWaitForSingleObject (fffff804`7f012450) 
    [5]
: nt!NtCallbackReturn (fffff804`7ebc5cc0)
6.
Win32k.sys entries, you can also use the !chksvctbl -v command in the debugger,
whose output will include all of this data while also checking for inline hooks that a
rootkit may have attached:
lkd> !chksvctbl -v 
#    ServiceTableEntry           DecodedEntryTarget(Address)               CompactedOffset 
========================================================================================== 
0    0xfffff8047ee24800                   nt!NtAccessCheck(0xfffff8047eb081d0) 0n-52191996 
1    0xfffff8047ee24804      nt!NtWorkerFactoryWorkerReady(0xfffff8047eb10940) 0n-51637248 
2    0xfffff8047ee24808             nt!NtAcceptConnectPort(0xfffff8047f0b7800) 0n43188226  
3    0xfffff8047ee2480c   nt!NtMapUserPhysicalPagesScatter(0xfffff8047f299f50) 0n74806528  
4    0xfffff8047ee24810           nt!NtWaitForSingleObject(0xfffff8047f012450) 0n32359680   
4.
You could also use the debugger data model to create a LINQ predicate using projection,
dumping the entire table, leveraging the fact that the KiServiceLimit variable corresponds
KiServiceLimit variable corresponds 
KiServiceLimit
W32pServiceLimit for the 
Win32k.sys entries in the shadow descriptor table). The output would look like this:
lkd> dx @$table = &nt!KiServiceTable
@$table = &nt!KiServiceTable : 0xfffff8047ee24800 [Type: void *]
lkd> dx (((int(*)[90000])&(nt!KiServiceTable)))->Take(*(int*)&nt!KiServiceLimit)->
     Select(x => (x >> 4) + @$table)
(((int(*)[90000])&(nt!KiServiceTable)))->Take(*(int*)&nt!KiServiceLimit)->Select
     (x => (x >> 4) + @$table)
   [0]
: 0xfffff8047eb081d0 [Type: void *]
   [1]
: 0xfffff8047eb10940 [Type: void *]
   [2]
: 0xfffff8047f0b7800 [Type: void *]
   [3]
: 0xfffff8047f299f50 [Type: void *]
   [4]
: 0xfffff8047f012450 [Type: void *]
   [5]
: 0xfffff8047ebc5cc0 [Type: void *]
   [6]
: 0xfffff8047f003b20 [Type: void *]
5.
You could use a more complex version of this command that would also allow you to 
convert the pointers into their symbolic forms, essentially reimplementing the dps
command that works on x86 Windows:
lkd> dx @$symPrint = (x => Debugger.Utility.Control.ExecuteCommand(".printf \"%y\\n\"," + 
     ((unsigned __int64)x).ToDisplayString("x")).First())
@$symPrint = (x => Debugger.Utility.Control.ExecuteCommand(".printf \"%y\\n\"," + 
((unsigned __int64)x).ToDisplayString("x")).First())
lkd> dx (((int(*)[90000])&(nt!KiServiceTable)))->Take(*(int*)&nt!KiServiceLimit)->Select
     (x => @$symPrint((x >> 4) + @$table))
(((int(*)[90000])&(nt!KiServiceTable)))->Take(*(int*)&nt!KiServiceLimit)->Select(x => 
@$symPrint((x >> 4) + @$table))
    [0]
: nt!NtAccessCheck (fffff804`7eb081d0)
    [1]
: nt!NtWorkerFactoryWorkerReady (fffff804`7eb10940)
    [2]
: nt!NtAcceptConnectPort (fffff804`7f0b7800)
    [3]
: nt!NtMapUserPhysicalPagesScatter (fffff804`7f299f50)
    [4]
: nt!NtWaitForSingleObject (fffff804`7f012450)
    [5]
: nt!NtCallbackReturn (fffff804`7ebc5cc0)
6.
Win32k.sys entries, you can also use the !chksvctbl -v command in the debugger, 
whose output will include all of this data while also checking for inline hooks that a 
rootkit may have attached:
lkd> !chksvctbl -v
#    ServiceTableEntry           DecodedEntryTarget(Address)               CompactedOffset
==========================================================================================
0    0xfffff8047ee24800                   nt!NtAccessCheck(0xfffff8047eb081d0) 0n-52191996
1    0xfffff8047ee24804      nt!NtWorkerFactoryWorkerReady(0xfffff8047eb10940) 0n-51637248
2    0xfffff8047ee24808             nt!NtAcceptConnectPort(0xfffff8047f0b7800) 0n43188226  
3    0xfffff8047ee2480c   nt!NtMapUserPhysicalPagesScatter(0xfffff8047f299f50) 0n74806528  
4    0xfffff8047ee24810           nt!NtWaitForSingleObject(0xfffff8047f012450) 0n32359680   
104 
CHAPTER 8 System mechanisms
EXPERIMENT: Viewing system service activity
You can monitor system service activity by watching the System Calls/Sec performance counter in 
the System object. Run the Performance Monitor, click Performance Monitor under Monitoring 
Tools, and click the Add button to add a counter to the chart. Select the System object, select the 
System Calls/Sec counter, and then click the Add button to add the counter to the chart.
to have hundreds of thousands of system calls a second, especially the more processors the system 
WoW64 (Windows-on-Windows)
WoW64 (Win32 emulation on 64-bit Windows) refers to the software that permits the execution of 
32-bit applications on 64-bit platforms (which can also belong to a different architecture). WoW64 was
originally a research project for running x86 code in old alpha and MIPS version of Windows NT 3.51. It
has drastically evolved since then (that was around the year 1995). When Microsoft released Windows
XP 64-bit edition in 2001, WoW64 was included in the OS for running old x86 32-bit applications in
the new 64-bit OS. In modern Windows releases, WoW64 has been expanded to support also running
ARM32 applications and x86 applications on ARM64 systems.
WoW64 core is implemented as a set of user-mode DLLs, with some support from the kernel for cre-
such as the process environment block (PEB) and thread environment block (TEB). Changing WoW64 
contexts through Get/SetThreadContext is also implemented by the kernel. Here are the core user-
mode DLLs responsible for WoW64:
EXPERIMENT: Viewing system service activity
You can monitor system service activity by watching the System Calls/Sec performance counter in
the System object. Run the Performance Monitor, click Performance Monitor under 
Performance Monitor under 
Performance Monitor