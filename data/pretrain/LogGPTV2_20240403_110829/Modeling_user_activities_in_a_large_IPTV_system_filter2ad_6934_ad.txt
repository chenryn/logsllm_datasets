and in our data, 28% of STBs are heavy-watchers (12 hours or
longer average daily watching time), 36% of them light-watchers
(1 hour or shorter average daily watching time), and the remaining
36% medium-watchers. We ﬁnd that the channel preference among
STBs in a particular subgroup stays stable (e.g., throughout a day),
and the overall channel popularity dynamics is largely due to the
change in the population mix of those groups [15].
We thus extend the model to a multiple-class population model.
We ﬁrst deﬁne the membership ratio for different subgroups using
the numbers above. Next, we identify the channel preference within
a subgroup (which is stable and follows Zipf-like distribution) and
characterize the session lengths and moderating functions for each
subgroup separately. This would capture the change of population
mix over time. As demonstrated in [15], this method leads to a
highly accurate model of channel popularity dynamics. We present
more details and evaluations of this method in the next section.
5.
SIMULWATCH: A WORKLOAD GENERA-
TOR
Thus far we have constructed several models to characterize var-
ious aspects of IPTV user activities.
In this section, we present
our design of SIMULWATCH – user TV watching activity genera-
tor. We validate our tool by comparing its output with the real data
traces. We also demonstrate how to use this tool to drive the net-
work performance study in an IPTV system (e.g., estimate unicast
and multicast trafﬁc rates given the number of subscribers).
5.1
For simplicity, we ﬁrst describe the design of SIMULWATCH
based on the single-class population model. Then we present the
extension using the multi-class population model if the dynamics
of channel popularity is of interest.
In the single-class population model, we ﬁrst focus on generating
switching-on and switching-off events matching both on- and off-
session length distributions and the aggregate event rates. We de-
ﬁne a closed-population ON-OFF model where both ON and OFF
SIMULWATCH Design
states comprise several sub-states, each of which corresponds to
one of the mixture exponential distributions in Section 4.1. Fig-
ure 13 illustrates the structure of the ON-OFF model with 2 sub-
states in each of the ON and OFF states. The transition rate be-
tween sub-states are constructed using the parameters in Sections
4.1 and 4.2. For example, the transition rate from ONi to OFFj
state is
aOFF,j × λON,i × gON(t)
and similarly the reverse direction rate from OFFj to ONi is
aON,i × λOFF,j × gOFF(t)
To drive the event simulation, assuming a STB arrives at state ONi
at time t, we can easily determine the edge of the next transition
using the branching probabilities aOFF,j, and we can also determine
the time of the next transition, t+x, using the following probability
density function
−λON,i
φON,i(x; t) = λON, i × gON(t + x) × e
We next focus on generating channel-switch events. It is not hard
to see that the timing of channel-switch events can be determined in
the same fashion as those of switching-on or switching-off events.
There are two subtle details worth noting. First, we need to trig-
ger the event generation for a next channel-switch event not only
at the time of the previous channel-switch, but also when a new
switching-on event takes place. Second, we need to cancel a pend-
ing channel-switch event if a switching-off event from the same
STB takes place ﬁrst.
In order to determine which channel to switch to, we keep track
of, for each STB, the last channel watched. At the time of a sched-
uled channel-switch event, assuming the last channel watched is i
with popularity rank ri, we compute the probability that the next
channel is j with rank rj as follows.
R t+x
t
gON(y)dy
8>:(1 − pt)pu + ptf0(rj)
(1 − pt)(1 − pu) + ptf0(rj)
ptf0(rj)
j = i + 1,
j = i − 1,
|i − j| > 1.
Probability =
N
P
The initial rank ri is randomly assigned as described in Section 4.3.
The deﬁnition of f0 and all other parameters involved are deﬁned
in Section 4.3.
Now we have described the design of SIMULWATCH using the
single-class population model. We will show that the above pro-
cedure simulating the channel switches cannot precisely generate
the dynamics of channel popularity. To equip SIMULWATCH with
this functionality, we add an extension of the multi-class population
model as follows. Assume that we obtain N classes/groups, each
of which consists of a ﬁxed proportion, pi, i = 1, 2, ..., N, of all
STBs, where
i=1 pi = 1. Then for each STB, we ﬁrst determi-
nate which group it belongs to based on the probabilities pi’s. Then
in each group, the workload is generated using the same method as
we described above using the single-class population model with
the proper parameters. To generate the synthetic trafﬁc to mimic
the dynamics of channel popularity, we can determine the mapping
between channel ID and its popularity rank within each group and
then the channel popularity can be calculated by combining the re-
sults from all the groups.
5.2 Evaluation
In this subsection, we will evaluate whether the synthetic traces
generated by our SIMULWATCH mimic the real user activities very
well.
437100
10−2
10−4
)
)
x
(
F
−
1
(
0
1
g
o
l
10−6
1 sec
Real trace
Synthetic trace
1 hour
1 min
Session length (log scale)
(a) On-session
100
10−2
10−4
)
)
x
(
F
−
1
(
0
1
g
o
l
1 day
10−6
1 sec
Real trace
Synthetic trace
1 hour
1 min
Session length (log scale)
(b) Off-session
100
10−2
10−4
10−6
)
)
x
(
F
−
1
(
0
1
g
o
l
1 day
10−8
1 sec
Real trace
Synthetic trace
1 min
1 hour
Session length (log scale)
(c) Channel-session
1 day
Figure 14: Comparison of the session-length distribution. CCDFs for the real trace and generated workload closely match in all
cases.
0.1
e
t
a
R
0.05
0
0:00
0.1
e
t
a
R
0.05
0
0:00
Real trace
8:00
16:00
Local time
Synthetic trace
8:00
Local time
16:00
(a) Switching-on
e
t
a
R
24:00
e
t
a
R
24:00
0.1
0.05
0
0:00
0.1
0.05
0
0:00
Real trace
8:00
16:00
Local time
Synthetic trace
8:00
Local time
16:00
(b) Switching-off
e
t
a
R
24:00
e
t
a
R
24:00
0.4
0.2
0
0:00
0.4
0.2
0
0:00
Real trace
8:00
16:00
Local time
Synthetic trace
8:00
16:00
(c) Channel-switch
Local time
24:00
24:00
Figure 15: Comparison of the aggregate event rate. The real-trace results are on the top, and the workload results are on the bottom.
We do so by comparing the synthetic traces and real traces from
three aspects – (i) properties that we explicitly model such as ses-
sion length distribution, aggregate event rate, and channel popular-
ity distribution, (ii) properties we do not explicitly model like chan-
nel popularity dynamics and numbers of on-line STBs, and (iii) a
case study on estimating the bandwidth consumed by simultane-
ous unicast streams, and concurrent multicast channels at different
time.
In our experiments, we generate synthetic user activities for two
millions STBs and 700 channels based on model parameters listed
in Section 4. Each STB starts from a random state at time 0 and
we discard the initial part of the output until the system reaches a
steady state. On a PC with 2.4GHz CPU and 4GB memory, it takes
about 5 hours for our implementation of SIMULWATCH to gener-
ate one-day worth of data. We compare the synthetic trace against
the real trace collected on a different date (April 8, 2009) than the
dates from which we derive the model parameters. Since the single-
class population based workload generator works reasonably well
for many properties, we use the single-class population model un-
less speciﬁed otherwise for the interest of simplicity. We also use
the multi-class population model when illustrating its capability in
capturing the dynamics of channel popularity.
5.2.1 Properties explicitly modeled
Session-length distribution: Figures 14 shows the session-
length distribution of different types of sessions, where we observe
an exceptionally good match between the real trace and the syn-
thetic trace from SIMULWATCH by visual inspection. In order to
qualitatively measure the closeness of two distributions, we fur-
ther compute the goodness-of-ﬁt. In the chi-square goodness-of-ﬁt
Table 3: Goodness-of-ﬁt scores for session length and channel
popularity distributions
Model
Single-class
Multi-class
ON
0.147
0.099
Session length
OFF
0.132
0.089
Channel
0.132
0.091
Channel
popularity
0.083
0.067
computation, we divide the data into m bins and test
mX
(Oi − Ei)2
/Ei
2 =
χ
i=1
where Oi is the observed frequency for bin i (generated by model)
and Ei is the expected frequency for bin i (collected from the real
trace). The smaller the value is, the better the model and trace
match. First, we want to test whether observation O can be con-
sidered as arising from the same distribution as E. We represent
it through associated one-sided chi-square P-value P (χ2), i.e., the
proportion of the time that a value of χ2 or greater would be ob-
tained if O and E were drawn from the same distribution. For a
hypothesis testing at signiﬁcant level P0, we reject the null hypoth-
esis (O and E are from the same distribution) if P (χ2) < P0.
Table 3 shows the goodness-of-ﬁt for session length distribu-
tion (the bin size is 1 minute). Using a common signiﬁcant level
P0 = 5%, we see that in all cases the two session length distri-
butions (synthetic trace and real trace) are statistically the same.
In addition, multi-class population model yields smaller goodness-
of-ﬁt score, indicating that it can ﬁt the real trace better than the
single-class population model.
438Table 4: RMSE when modeling the time-varying rate
Switch-off Channel-switch
Model
Single-class
Multi-class
Switch-on
2.3e-3
1.8e-4
2.4e-3
1.9e-4
2.5e-3
2.4e-4
)
e
l
a
c
s
g
o
l
(
y
c
n
e
u
q
e
r
f
s
s
e
c
c
A
108
106
104
102
100
0
Real trace
Synthetic trace
100
600
Chanel index sorted by popularity (linear scale)
200
300
400
500
700
Figure 16: Channel popularity distributions for the real trace
and the generated workload.
Aggregate event rate: Figure 15 shows the aggregate event rate
of different types of events. Again, we observe a reasonably good
match between the model and real trace from visual inspection.
Table 4 shows the root mean square error (RMSE) between the
model and real trace when modeling the time-varying rate. We
ﬁnd that the RMSE of multi-class population model is an order of
magnitude smaller that that of single-class population model. For
example, the RMSE of modeling switch-on events by using single-
class population model is 2.3e-3 where the corresponding ﬁgure
by using multi-class population model is 1.8e-4. The reduction in
RMSE is due to the fact that much more (triple) parameters are
used in the multi-class population model (i.e., more details have
been modeled). Depending on the applications of SIMULWATCH,
this may or may not be a desirable property.
Channel popularity distribution: Figure 16 shows the chan-
nel popularity distributions for both the real trace and synthetic
trace. As expected, the popularity of top 600 channels matches
very well. Table 3 shows the goodness-of-ﬁt for channel popularity
distribution (the bin size is 1 channel). Again, we observe that the
multi-class population model yields smaller goodness-of-ﬁt score,
indicating that it can ﬁt the real trace better than the single-class
population model.
5.2.2 Properties not explicitly modeled
Number of on-line STBs: Figure 17 shows the average number
of on-line STBs as a function of the time-of-day. We normalize
both synthetic trace and real trace such that the value at their peak
time is 1. This is a property that we do not model directly, however,
we still ﬁnd a decent match in their shape.
Channel popularity dynamics: Recall that in Section 3 we
showed that the channel popularity distribution changes over time
within a single day. Taking a kids channel as an example, we show
the change of channel popularity in Figure 18. The change is nor-
malized such that the maximum value is 1. We observe that the
strength of using multi-class population model is that this model
can capture the dynamics of channel popularity very well, while
single-class population model fails. Note that the curve for the
single-class population model is actually similar to the curve of
)