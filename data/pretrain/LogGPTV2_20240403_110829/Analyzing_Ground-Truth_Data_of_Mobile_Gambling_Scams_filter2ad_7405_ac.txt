Driven (41.2%) means that a victim proactively requests a
gambling app after being baited, e.g., scammers continuously
discuss and show gambling proﬁt gains in group channels or
posting their gambling income on social media. As an instance,
ID-192 said:
“ He (the scammer) invited me into a group channel. In
that channel, I observed how the gambling tutor taught us
gambling, how group members bet and won. They claimed
they all made a successful payout. Afterward, the scammer
said that winning in a new lottery app is very easy. I
witnessed that the group members expressed their intention
to participate. So I could not wait anymore and proactively
contacted the scammer to download the gambling scam
app. ”
Interestingly, when comparing the scam losses between the
cases coded as Scammer Driven and Victim Driven, we found
that scam losses of Victim Driven are signiﬁcantly higher than
Scammer Driven, with the average scam losses of Scammer
Driven of $30,648.8 (the median of $11,938.0) and the average
of Victim Driven of $47,302.7 (the median of $20,045.9). This
difference indicates that social engineering tricks, which lure
victims to request scam gambling apps proactively, are more
effective at tricking victims out of money.
Finding III: Social engineering tricks, which lure victims
to request scam gambling apps proactively, are more
effective to trick victims out of money.
D. Deposits
After delivering scam gambling apps, scammers start to en-
force victims to deposit money continually (coded as Enforce
Deposit, as shown in Table II). This step can be categorized
into two sub-types based on our codebook: the “Incentive” and
the “Pressure”. In “Incentive” strategy (44.2%), a scammer
will show incentives for continually depositing money, such
Although scammers prefer to use incentives to lure vic-
tims (44.2% vs. 11.0%), we found that these two strategies
pose similar success rates. Here, we deﬁne the success rate
as the number of victims who made deposits following social
engineering tricks (instead of cheat awareness) over the total
cases with the code of the “Incentive” or the “Pressure”. We
observe that these two strategies have similar success rates:
almost half of the victims were encouraged to make deposits
through social engineering tricks. For “Incentive” strategy,
its success rate is 47.1%. The “Pressure” strategy features a
48.1% success rate.
Finding IV: To ensure victims make deposits, scammers
tend to leverage incentive strategies instead of imposing
psychological pressures, even though similar success rates
are achieved with either strategy.
E. Scamming Logic
All incident reports in our study are associated with the
cash out scam, i.e., scammers prevent victims from cashing out
gambling incomes. As shown in Table II, we categorize their
scamming logic into two sub-types: Disable App Functionality
and Modify Account. Most scammers deploy their scamming
logic by disabling scam apps’ functionalities, which means
that victims’ accounts are frozen, or the cash out function
is disabled. Meanwhile, 22 scammers directly wiped out the
victims’ balance, which was coded as Modify Account.
In some cases, we observe scammers make up excuses to
delay being aware. The ID-138 expressed his experience:
“ ... On someday, the gambling tutor sent me a message:
‘the company’s manager has been arrested for illegally
opening an enterprise account, and his communication
account has been taken down. Please do not contact the
manager or tutor in the short term. Your gambling account
balance will be refunded in one month. Don’t contact us,
or you will be at your own risk.’ As a result, at the end of
the month, I found that I didn’t receive any payout, and
couldn’t open the gambling app either. Only then did I
realize that I was cheated and turned to the police. ”
Finding V: Unlike traditional online gambling frauds,
which trick victims by charging additional fees or selling
bet cheating software, the scamming logic of the online
gambling scams in our study is mainly to disable scam
apps’ functionalities.
F. Discussion
Some of the social engineering tricks used to establish
connections have also been discussed in other fraud research,
e.g., connect victims as an authority or intimate in the “419
scams” [20] and the online dating fraud [21], as shown in
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:17 UTC from IEEE Xplore.  Restrictions apply. 
52180
Table II. In our research, we present the ﬁrst systematic study
based on a unique and valuable scam incident report dataset,
which are associated with a larger size of victims and a longer
time-span, compared with previous work. Our study reports
that mobile gambling scammers contact victims for more
diverse reasons (e.g., house renting and job hunting) through
various approaches (e.g., Local forums or Online Q&A plat-
forms). In addition, for the ﬁrst time, our research revealed the
social engineering tricks used to deliver scam gambling apps,
enforce deposits, and show scamming logic. Note that some
high-level psychological tricks, such as showing incentive or
pressure, have been mentioned in previous fraud research [22],
[23], but those studies did not focus on gambling-speciﬁc
tricks.
VI. GAMBLING SCAM APP ANALYSIS
In this section, we study app behaviors of scam gambling
apps, including their development frameworks, permissions,
the compatibility, and the network infrastructure.
Genuine gambling apps. We collect a set of genuine gam-
bling apps for behavior comparison. The genuine gambling
apps refer to the reputable and legitimate gambling apps.
Speciﬁcally, we ﬁrst fetch popular gambling websites from
SimilarWeb [27],
then ﬁlter top-ranked gambling websites
based on Tranco Top-1M Ranking List [28]. Afterwards, we
validate these websites and associate apps through certiﬁcates
(e.g., removing any certiﬁcate with nonsense string) and
VirusTotal labels. To further validate the legitimacy of apps,
we also check whether the app is published on Google Play
or App Store. We conﬁrm 156 websites and download apps
associated with these sites. Finally, we successfully collected
182 genuine Android gambling apps and 134 genuine iOS
gambling apps through the above methods.
A. Public and Non-public Apps
We identify how many of the scam apps in our study are
available to the public. This analysis took place on January 4,
2021, and we used all 1,487 scam apps for app matching. First,
as for iOS apps, we extract each scam app’s name and unique
bundle identiﬁer by inspecting the CFBundleDisplayName
and CFBundleIdentifier ﬁled in the Info.plist ﬁle. Then,
we search app names through utilizing the iTunes Search
API [29]. For each app in the search results, we extract the
bundleId from its meta-information for app matching. Our
result shows that none of the iOS scam apps in our dataset
are indexed in the App Store.
As for Android apps, we ﬁrst leverage Androguard [30] to
extract the package name from each APK ﬁle in our dataset.
We then use the package name for app searching in Google
Play [31], Androzoo [32], and other third-party app markets,
such as MyApp [33], Xiaomi App Store [34],
iuuu9 [35],
and anxz [36]. After retrieving apps in the search result, we
use apktool [37] to ﬁnd the signing key of each app for
app matching. However, none of the package names matched
successfully in Google Play, Androzoo, MyApp, or Xiaomi
App Store; only ﬁve scam apps with package name exactly
EXAMPLES OF APP DEVELOPMENT FRAMEWORKS FINGERPRINTS.
Table IV
Framework
React Native
DCloud
Cocos2dx
Unity3D
Cordova
APICloud
Namespace / Header
com.facebook.react.*
ReactNativeHelper.h
io.dcloud.*
-
org.cocos2dx.*
cocos2d.h
com.unity3d.player.*
UnityFramework.h
org.apache.cordova.*
CDV.h
com.uzmap.pkg.*
UZModule.h
File
assets/index.android.bundle
main.jsbundle
io/dcloud/all.js
PandoraApi.bundle/all.js
lib/*/libcocos2djs.so
-
lib/*/libunity.so
*/mscorlib.dll-resources.dat
assets/www/cordova.js
www/cordova.js
assets/uzmap/module.json
uz/module.json
Android
iOS
Android
iOS
Android
iOS
Android
iOS
Android
iOS
Android
iOS
the same were found in iuuu9 and anxz. Interestingly, those
apps were updated with innocent-looking app descriptions
and screenshots. When launching those apps, users will be
redirected to a scam gateway to download scam apps.
Apps sideloading. We ﬁnd that none of the gambling scam
apps in our dataset reside in reputable App markets. However,
sideloading apps on Android and iOS requires conﬁguration
changes in the respective system settings. We try our best to
ﬁgure out how typical, non-technical victims manage to carry
out a series of actions to sideload apps. On the one hand, by
visiting scam app download links recorded in the reports, we
learned that scammers typically provide step-by-step tutorials
for sideloading apps on app download pages. Victims only
need about 4-5 clicks to sideload an app following these tuto-
rials. An example of the tutorial can be found in Appendix A.
On the other hand, although the incident reports do not provide
the details about whether or how scammers instruct victims to
sideload scam apps, the Anonymous Authority has conﬁrmed
that some scammers did provide detailed technical support for
doing so.
Note that scam apps leverage the Apple Developer En-
terprise Program, originally designed to create and distribute
proprietary enterprise iOS apps for internal uses, to distribute
gambling scam apps on iOS [38], [39]. In this way, there
is no need for victims to have a jailbroken phone to install
iOS scam apps. We have reported our ﬁndings to the owners
of those enterprise certiﬁcates, but we have not received any
response yet. In addition, we had already reported these abused
enterprise certiﬁcates to Apple, and they acknowledged our
report.
Finding VI: None of
the gambling scam apps in our
dataset can be found through reputable App markets.
Instead, scammers usually launch attacks with the side-
loaded app through step-by-step instructions and technical
support.
B. Development Framework Identiﬁcation
In our study, we investigate the development framework
used by scammers for generating scam apps. To ﬁngerprint
the development frameworks of scam apps, we ﬁrst determine
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:17 UTC from IEEE Xplore.  Restrictions apply. 
62181
Table V
APP DEVELOPMENT FRAMEWORKS.
Framework
React Native [40]
DCloud [41]
Cocos2dx [42]
Unity3D [43]
Cordova [44]
APICloud [45]
Others
Genuine Gambling
Gambling Scam
# Android App
# iOS App
# Android App
# iOS App
8
0
19
24
19
0
12
4
0
11
27
5
0
8
70
59
9
8
7
4
4
17
7
0
0
0
0
1
35 popular mobile app development frameworks (e.g., React
Native, Cocos2dx, Cordova, see the full list in Table VII in
Appendix B) and then extract unique features from them, such
as namespace in Java and Kotlin, the Objective-C header ﬁle,
and the dynamic link library (.so), image, or script. Table IV
shows examples of ﬁngerprints adopted in our study.
We identiﬁed eight development frameworks used by scam
apps. The results are listed in Table V. Interestingly, we
observe scammers abused public app generators (OAGs) [46],
i.e., DCloud and APICloud (Row 2 and Row 6 of Table V),
for the scam app generation. Particularly, 63 Android apps
and seven iOS apps in our study were generated by DCloud
and APICloud, which account for 4.7% of scam gambling
apps in our study. Note that this percentage is slightly lower
than that of OAG-generated unwanted apps as reported in
[47] (4.7% vs. 12.1% 2). Surprisingly, when investigating app
certiﬁcates of OAG-generated scam apps, we also found that
137 scam apps were signed by Digital Heaven, the company
of the DCloud framework. When generating apps, the DCloud
framework will automatically sign OAG-generated apps using
its own certiﬁcate. Even worse, DCloud’s certiﬁcate has been
abused by scammers to sign gambling scam apps. In our study,
we observe that 71 scam apps are signed by DCloud but not
generated by DCloud. We have reported this issue to DCloud.
Finding VII: Scammers abuse Online App Genera-
tor (OAG) to automatically generate scam apps, as well
as signing those apps.
Scam app clustering. As apps with similar ﬁle structures and
high code similarity suggest a high possibility of belonging
to the same gambling scam campaign [9], we conduct a
clustering analysis of gambling apps leveraging their ﬁle
structure similarity and code similarity. For ﬁle similarity,
given two APKs/IPAs, we calculate their Jaccard distance of
resource ﬁles. More speciﬁcally, we ﬁrst calculate the SHA256
hash of each resource ﬁle, then combine the hash values into
a set for each APK/IPA. Afterwards, we compare two hash
sets regarding their Jaccard distance. For code similarity, we
calculate the similarity of dex ﬁles and so ﬁles, or executable
ﬁles and dylib ﬁles, respectively, on Android and iOS. Then,
we apply DBSCAN [48], a density-based cluster algorithm,
on the similarity matrix to cluster the apps. Note that iOS
certiﬁcates are generally abused, and thus, we do not utilize
2Here we divided the sum of OAG unwanted packages (rank 2, 5, 10 of
Table V = 40,693) by the sum of all unwanted packages (335,471) in [47] to
get this result.
this feature to cluster iOS scam apps. We only merge Android
gambling apps signed with the same developer signature, as
they belong to the same gambling scam campaign. Moreover,
if there are overlapping domains of apps’ backend servers
in any clusters, we also merge them as they share the same
infrastructure.
To this end, 1,068 Android gambling apps and 419 iOS
gambling apps were clustered into 134 and 11 groups, re-
spectively. Note that for Android apps, 49 groups have their
sizes larger than 1 while the number for iOS apps is six.