your
ﬁles
on
Google
Drive?
http://news.cnet.com/8301-1023_3-57420551-93/
who-owns-your-files-on-google-drive/.
[11] Joan Daemen and Vincent Rijmen. The Design of Rijndael: AES - The Advanced
Encryption Standard. 2002.
[12] Ernesto Damiani, S. De Capitani di Vimercati, Sara Foresti, Sushil Jajodia,
Stefano Paraboschi, and Pierangela Samarati. Key management for multi-user
In StorageSS ’05: Proceedings of ACM workshop on
encrypted databases.
Storage security and survivability, pages 74–83, 2005.
[13] Yevgeniy Dodis, Rafail Ostrovsky, Leonid Reyzin, and Adam Smith. Fuzzy
Extractors: How to Generate Strong Keys from Biometrics and Other Noisy Data.
SIAM J. Comput., 38(1):97–139, 2008.
[14] John Douceur, Atul Adya, William Bolosky, Dan Simon, , and Marvin Theimer.
Reclaiming space from duplicate ﬁles in a serverless distributed ﬁle system. In
ICDCS ’02: International Conference on Distributed Computing Systems, 2002.
[15] John Douceur, William Bolosky, and Marvin Theimer. US Patent 7266689:
Encryption systems and methods for identifying and coalescing identical objects
encrypted with different keys, 2007.
[16] Dropbox. Dropbox Privacy Policy. https://www.dropbox.com/privacy.
[17] Dropship.
Dropbox api utilities, April 2011.
https://github.com/
driverdan/dropship.
[18] Oded Goldreich. Foundations of Cryptography: Volume 2, Basic Applications.
2004.
[19] Google. Google Terms of Service. http://www.google.com/policies/
terms/.
[20] Shai Halevi, Danny Harnik, Benny Pinkas, and Alexandra Shulman-Peleg.
In CCS ’11: ACM confer-
Proofs of ownership in remote storage systems.
ence on Computer and communications security, pages 491–500, 2011. http:
//eprint.iacr.org/2011/207.
[21] Shulman-Peleg A. Harnik D., Pinkas B. Side Channels in Cloud Services:
Deduplication in Cloud Storage. IEEE Security and Privacy Magazine, special
issue of Cloud Security, 8(6), 2010.
[22] Apple Inc. Apple Privacy Policy (Covering iCloud). http://www.apple.com/
privacy/.
[23] Ari Juels and Burton S. Kaliski, Jr. Pors: proofs of retrievability for large ﬁles.
In CCS ’07: ACM conference on Computer and communications security, pages
584–597, 2007.
[24] Luis Marques and Carlos Costa. Secure deduplication on mobile devices.
In
OSDOC ’11: Workshop on Open Source and Design of Communication, pages
19–26, 2011.
[25] Microsoft. Microsoft Services Agreement. http://windows.microsoft.
com/en-US/windows-live/microsoft-service-agreement.
[26] Ilya Mironov, Omkant Pandey, Omer Reingold, and Gil Segev. Incremental de-
terministic public-key encryption. In EUROCRYPT ’12: Proceedings of the 31st
Annual international conference on Theory and Applications of Cryptographic
Techniques, pages 628–644, 2012.
[27] Wim Nevelsteen and Bart Preneel. Software Performance of Universal Hash
In EUROCRYPT ’99, International Conference on the Theory and
Functions.
Application of Cryptographic Techniques, pages 24–41.
[28] Wee Keong Ng, Yonggang Wen, and Huafei Zhu. Private data deduplication
protocols in cloud storage. In SAC ’12: Proceedings of the 27th Annual ACM
Symposium on Applied Computing, pages 441–446, 2012.
[29] NIST. National Institute of Standards and Technology. Secure hash standard
(SHS). FIPS 180-2, August 2002.
[30] Tatsuaki Okamoto. Provably Secure and Practical Identiﬁcation Schemes and
Corresponding Signature Schemes. In CRYPTO ’92: Annual International Cryp-
tology Conference on Advances in Cryptology, pages 31–53, 1993.
[31] OpenSSL. OpenSSL Project. http://www.openssl.org/.
[32] Roberto Di Pietro and Alessandro Sorniotti. Boosting Efciency and Security in
Proof of Ownership for Deduplication. In ASIACCS ’12: ACM Symposium on
Information, Computer and Communications Security (Full Paper), 2012.
[33] Hovav Shacham and Brent Waters. Compact Proofs of Retrievability.
ASIACRYPT ’08, pages 90–107, 2008.
In
[34] SNIA. Understanding Data De-duplication Ratios. white paper.
[35] SpiderOak-Blog. Why SpiderOak doesn’t de-duplicate data across users.
[36] Mark Storer, Kevin Greenan, Darrell Long, and Ethan Miller. Secure Data
In StorageSS ’08: ACM international workshop on Storage
Deduplication.
security and survivability, pages 1–10, 2008.
[37] Twitter. Tweetdeck. http://money.cnn.com/2012/03/30/technology/
tweetdeck-bug-twitter/.
[38] Mark Wegman and Larry Carter. New Hash Functions and Their Use in Authen-
tication and Set Equality. J. Comput. Syst. Sci., pages 265–279, 1981.
[39] Wikipedia. Comparison of online backup services. http://en.wikipedia.
org/wiki/Comparison_of_online_backup_services.
[40] wired.com.
Dropbox Left User Accounts Unlocked for 4 Hours Sun-
day. http://www.wired.com/threatlevel/2011/06/dropbox/; http:
//blog.dropbox.com/?p=821.
[41] Jia Xu and Ee-Chien Chang. Towards efﬁcient proof of retrievability in cloud
storage. In ASIACCS ’12: Proceedings of the 7th ACM Symposium on Informa-
tion, Computer and Communications Security (Full Paper), 2011.
[42] Jia Xu, Ee-Chien Chang, and Jianying Zhou. Leakage-resilient client-side dedu-
plication of encrypted data in cloud storage. Cryptology ePrint Archive, Report
2011/538, 2011. http://eprint.iacr.org/.
[43] Qingji Zheng and Shouhuai Xu. Secure and efﬁcient proof of storage with
In CODASPY ’12: ACM conference on Data and Application
deduplication.
Security and Privacy, pages 1–12, 2012.
A. Proof of Theorem 1
Proof. For any PPT adversary ACSD against the UH-CSD
scheme in Figure 2, we construct a PPT adversary AE
against the underlying private-key semantic secure encryp-
tion scheme E. We emphasize that we adopt the equivalent
alternative deﬁnition of “private-key semantic secure en-
cryption” given by Goldreich [18].
Construction of AE: The adversary AE is given a cipher-
text CF = E.Encτ (F ) where the encryption key τ and the
input ﬁle F are unknown and F has at least ξ0 bits min-
entropy. AE is allowed to learn any output of Func(F ) from
the oracle OF , where the PPT-computable function Func is
chosen by AE.
AE can simulate a security game GSim as below, where
AE plays the role of challenger and ACSD plays the role of
adversary:
Setup. AE learns the hash value hash(F ) from the oracle
OF and sends hash(F ) to ACSD.
Learning-I. AE simply forwards LEAKQUERY made by
ACSD to the oracle OF and forwards the response given by
the oracle to ACSD.
Commit. AE learns the value of the challenged subsequence
α = F [i1](cid:107) . . .(cid:107)F [iv] from the oracle OF and then exactly
follows the rest part of Commit phase in the real game
GCSD
A .
Guess-I. Denote the output of the extractor A∗
CSD ∈
{0, 1}.
Learning-II. Challenger AE answers the following queries
made by ACSD:
• ENCODE-QUERY:
In response to the encode query,
the challenger AE independently and randomly chooses
$←− {0, 1}λ, and set
ˆτ
Cˆτ := (s1, s2, hash(F )). Let (C0, C1) = (Cˆτ , CF ) and
sends (C0, C1) to ACSD. Recall that AE is given the ci-
phertext CF , and hash(F ) is obtained from the oracle
OF in the Setup phase.
$←− KeyGen(1λ) and s1, s2
CSD as bSimA∗
• VERIFY-QUERY: AE runs the prover algorithm and
ACSD replaces the veriﬁer algorithm. Denote with (u1, u2)
the message received from ACSD. If (u1, u2) = (s1, s2),
then send hash(CF ) to ACSD; otherwise, send a random
value H
• PROVE-QUERY: AE runs V(C0) to interact with adver-
sary ACSD which replaces the prover algorithm, follow-
ing the description in game GCSD
$←− {0, 1}λ to ACSD.
exactly.
A
At the end, AE outputs αbSimACSD
= α = F [i1](cid:107) . . .(cid:107)F [iv].
Guess-II. The adversary ACSD outputs a guess bSimACSD ∈
{0, 1} of b. The game GSim simulated by AE completes.
∈ {α0, α1} and wins
the semantic-security game w.r.t. encryption scheme E if
αbSimACSD
So far, AE has received at most (λ + ξ0− ξ1) bits (in term
of length) message about the unknown ﬁle F from the oracle
OF . Thus, after leakage from the oracle, the unknown ﬁle F
should have at least (ξ1 − λ) = λ + Ω(λ) bits min-entropy,
according to Lemma 2.2 in Dodis et al. [13].
Claim 1. Suppose E is private key ciphertext-indistinguishable
and {hk(·)} be a universal hash family. The simulated game
GSim is computationally indistinguishable with the real game
GReal = GCSD
Proof of Claim 1. In game GReal all messages that the ad-
versary ACSD obtain from the challenger are (derived from)
ACSD (ξ0, ξ1), to the view of adversary ACSD.
and y is the output of LEAK-QUERY and α is computed in
Commit phase. Similarly, in game GSim, the counterpart is
(cid:0)SReal, hash(F ), s, hs(F ) ⊕ τ, CF(cid:1), where SReal = (y, α)
(cid:0)SSim, hash(F ), s1, s2, CF(cid:1). For the same adversary ACSD
with the same random coin, SReal = SSim. So we just write
them as S for simplicity.
Sample a ﬁle F (cid:48) from {0, 1}|F| following the same dis-
tribution from which F is sampled. Generate a key τ(cid:48) =
E.KeyGen(1λ) and encrypt F (cid:48) with key τ(cid:48) to obtain cipher-
text CF (cid:48) = E.Encτ(cid:48)(F (cid:48)). Let X ≈c Y denote that random
variable X and Y are computationally-indistinguishable. We
have
(cid:0)S, hash(F ), s, hs(F ) ⊕ τ, CF(cid:1)
≈c(cid:0)S, hash(F ), s, hs(F ) ⊕ τ, CF (cid:48)(cid:1)
≈c(cid:0)S, hash(F ), s1, s2, CF (cid:48)(cid:1)
≈c(cid:0)S, hash(F ), s1, s2, CF(cid:1).
(3)
(4)
(5)
(6)
We explain the above equations as below. Eq (3) ≈c
Eq (4) is because E is private key ciphertext-indistinguishable:
Given information (S, hash(F ), s, hs(F ) ⊕ τ ) about F , the
unknown ﬁle F still has at least Ω(λ) entropy, hence its en-
cryption CF is computationally indistinguishable from an
encryption CF (cid:48) of a random ﬁle F (cid:48) ∈ {0, 1}|F| under a ran-
dom encryption key τ(cid:48), where F (cid:48) is sampled following the
same distribution from which F is sampled.
Eq (4) ≈c Eq (5) is followed directly from the leftover
hash lemma [5] which applies to the universal hash {hk}.
Note that CF (cid:48) is independent on other terms in these two
equations.
Eq (5) ≈c Eq (6) is again implied by the ciphertext-
indistinguishability property of the encryption scheme E.
Note that s1, s2 are independent on the other terms in these
two equations.
Therefore, Claim 1 is proved.
CSD, such that
CSD = bSim] + negl(λ).
Claim 2. There exists some PPT extractor A∗
Pr[bSimACSD = bSim] ≤ Pr[bSimA∗
Proof. In Learning-II phase of GSim, the challenger AE does
not make any new queries to OF , and all responses that AE
provided to ACSD are computed from randomly sampled
values and information that ACSD has already known be-
fore Learning-II (i.e. the hash value hash(F )), except the
ciphertext CF .
It is straightforward that
Pr[AOF
E (CF ,|F|) = α] = Pr[bSimACSD = bSim].
Since the underlying encryption scheme E is semantic
secure (See the deﬁnition in Exercise 18 of Chapter 5 in
Goldreich [18]), there exists a PPT algorithm B, such that
Pr[AOF
E (CF ,|F|) = α] ≤ Pr[BOF
(|F|) = α] + negl(λ).
CSD based on algorithm B:
We construct the extractor A∗
Let αB be the output of B. If αB = αˆb ∈ {α0, α1} for some
CSD := ˆb; otherwise A∗
ˆb ∈ {0, 1}, then A∗
CSD
outputs a random bit bSimA∗
CSD outputs bSimA∗
CSD
Pr[bSimACSD = bSim] =Pr[AOF
≤Pr[BOF
≤Pr[bSimA∗
$←− {0, 1}. We have
E (CF ,|F|) = α]
(|F|) = α] + negl(λ)
CSD = bSim] + negl(λ).
Therefore, there exists some PPT extractor A∗
CSD, such
that Pr[bSimACSD = bSim] ≤ Pr[bSimA∗
CSD = bSim] + negl(λ).
CSD = bSim] − Pr[bRealA∗
Furthermore, Claim 1 implies that
|Pr[bSimACSD = bSim] − Pr[bRealACSD = bReal]| ≤ negl(λ)
|Pr[bSimA∗
CSD = bReal]| ≤ negl(λ).
Combine Eq (7), Eq (8) and Eq (9), we have
Pr[bRealACSD = bReal] ≤ Pr[bRealA∗
CSD = bReal] + negl(λ).
(7)
(8)
(9)
Therefore, the client-side deduplication scheme UH-CSD
is (ξ0, ξ1)-secure according to Deﬁnition 2.