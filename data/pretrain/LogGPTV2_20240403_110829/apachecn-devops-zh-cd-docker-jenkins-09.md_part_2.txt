}
```
实体类表示 Java 代码中的数据库映射。表表示为一个类，每列表示为一个字段。下一步是创建用于加载和存储`Calculation`实体的存储库。
让我们创建`src/main/java/com/leszko/calculator/CalculationRepository.java`文件:
```
package com.leszko.calculator;
import org.springframework.data.repository.CrudRepository;
public interface CalculationRepository extends CrudRepository {}
```
最后，我们可以使用`Calculation`和`CalculationRepository`类来存储计算历史。让我们将以下代码添加到`src/main/java/com/leszko/calculator/CalculatorController.java `文件中:
```
...
class CalculatorController {
   ...
   @Autowired
   private CalculationRepository calculationRepository;
   @RequestMapping("/sum")
   String sum(@RequestParam("a") Integer a, @RequestParam("b") Integer b) {
       String result = String.valueOf(calculator.sum(a, b));
       calculationRepository.save(new Calculation(a.toString(), b.toString(), result));
       return result;
   }
}
```
现在，当我们启动服务并执行`/sum`端点时，每个求和操作都被记录到数据库中。
If you would like to browse the database content, then you can add `spring.h2.console.enabled=true` to the `application.properties` file, and then browse the database via the `/h2-console` endpoint.
我们解释了数据库模式迁移是如何工作的，以及如何在用 Gradle 构建的 Spring 项目中使用它。现在，让我们看看它是如何集成到持续交付流程中的。
# 在持续交付中更改数据库
在持续交付管道中使用数据库更新的第一种方法是在迁移命令执行中添加一个阶段。这个简单的解决方案在许多情况下都可以正常工作；然而，它有两个明显的缺点:
*   **回滚**:如前所述，不可能总是回滚数据库变更(Flyway 根本不支持降级)。因此，在服务回滚的情况下，数据库变得不兼容。
*   **宕机**:服务更新和数据库更新不完全同时执行，导致宕机。
这导致我们需要解决两个制约因素:
*   数据库版本需要始终与服务版本兼容
*   数据库模式迁移是不可逆的
我们将针对两种不同的情况来解决这些限制:向后兼容的更新和不向后兼容的更新。
# 向后兼容的更改
向后兼容的更改更简单。让我们看看下图，看看它们是如何工作的:
![](img/32844c8c-5496-4c95-b02a-11a8e511ebd5.png)
假设模式迁移`Database v10`是向后兼容的。如果我们需要回滚`Service v1.2.8`版本，那么我们部署`Service v1.2.7`，不需要对数据库做任何事情(数据库迁移是不可逆的，所以我们保留`Database v11`)。由于模式更新是向后兼容的，`Service v.1.2.7`与`Database v11`配合使用非常好。如果我们需要回滚到`Service v1.2.6`等等，同样适用。现在，假设`Database v10`和所有其他迁移是向后兼容的，那么我们可以回滚到任何服务版本，一切都将正常工作。
停机时间也没有问题。如果数据库迁移本身是零宕机，那么我们可以先执行它，然后对服务使用滚动更新。
让我们看一个向后兼容变化的例子。我们将创建一个模式更新，向计算表中添加一个`created_at`列。迁移文件`src/main/resources/db/migration/V2__Add_created_at_column.sql`如下所示:
```
alter table CALCULATION
add CREATED_AT timestamp;
```
除了迁移脚本，计算器服务还需要`Calculation`类中的一个新字段:
```
...
private Timestamp createdAt;
...
```
我们还需要调整它的构造函数，然后调整它在`CalculatorController`类中的用法:
```
calculationRepository.save(new Calculation(a.toString(), b.toString(), result, Timestamp.from(Instant.now())));
```
运行服务后，计算历史将与`created_at`列一起存储。请注意，该更改是向后兼容的，因为即使我们恢复 Java 代码并将`created_at`列留在数据库中，一切都将完美运行(恢复的代码根本不处理新列)。
# 不向后兼容的更改
不向后兼容的变化要困难得多。查看上图，如果数据库变更 v11 向后不兼容，就不可能将服务回滚到 1.2.7。在这种情况下，我们如何处理不向后兼容的数据库迁移，从而实现回滚和零宕机部署？
长话短说，我们可以通过将一个不向后兼容的变更转换为在一定时间内向后兼容的变更来解决这个问题。换句话说，我们需要付出额外的努力，将模式迁移分成两部分:
*   现在执行向后兼容的更新，这通常意味着保留一些冗余数据
*   不向后兼容的更新在定义我们可以将代码恢复到多远的回滚时间段后执行
为了更好地说明这一点，让我们看看下图:
![](img/91d810e9-805d-403b-a399-d45e6b3b2fe3.png)
让我们考虑一个删除列的例子。提议的方法包括两个步骤:
1.  停止使用源代码中的列(v1.2.5，向后兼容的更新，首先执行)。
2.  从数据库中删除该列(v11，不向后兼容的更新，在回滚期后执行)。
直到`Database v11`的所有服务版本都可以回滚到任何以前的版本，从`Service v1.2.8`开始的服务只能在回滚期内回滚。这种方法听起来可能微不足道，因为我们所做的只是延迟从数据库中删除列。但是，它同时解决了回滚问题和零宕机部署问题。因此，它降低了与发布相关的风险。如果我们将回滚周期调整到合理的时间量，例如，在每天多次发布的情况下调整到两周，那么风险可以忽略不计。我们通常不会回滚很多版本。
删除一列是一个非常简单的例子。让我们看看一个更困难的场景，并在我们的计算器服务中重命名结果列。我们分几个步骤介绍如何做到这一点:
1.  向数据库添加新列。
2.  更改代码以使用两列。
3.  合并两列中的数据。
4.  从代码中移除旧列。
5.  从数据库中删除旧列。
# 向数据库添加新列
假设我们需要将`result`列重命名为`sum`。第一步是添加一个重复的新列。我们必须创建一个`src/main/resources/db/migration/V3__Add_sum_column.sql`迁移文件:
```
alter table CALCULATION
add SUM varchar(100);
```
因此，在执行迁移之后，我们有两列:`result`和`sum`。
# 更改代码以使用两列
下一步是重命名源代码模型中的列，并将这两个数据库列用于 set 和 get 操作。我们可以在`Calculation`类中更改它:
```
public class Calculation {
    ...
    private String sum;
    ...
    public Calculation(String a, String b, String sum, Timestamp createdAt) {
        this.a = a;
        this.b = b;
        this.sum = sum;
        this.result = sum;
        this.createdAt = createdAt;
    }
    public String getSum() {
        return sum != null ? sum : result;
    }
}
```
To be 100% accurate, in the `getSum()` method, we should compare something like the last modification column date (not exactly necessary to always take the new column first).
从现在开始，每次我们向数据库中添加一行，相同的值都会写入`result`和`sum`列。在阅读`sum`时，我们首先检查它是否存在于新的栏目中，如果不存在，我们从旧的栏目中阅读它。
The same result can be achieved with the use of database triggers that would automatically write the same values into both columns.
到目前为止，我们所做的所有更改都是向后兼容的，因此我们可以随时将服务回滚到我们想要的任何版本。
# 合并两列中的数据
这一步通常在发布稳定一段时间后进行。我们需要将数据从旧的`result`列复制到新的`sum`列。让我们创建一个名为`V4__Copy_result_into_sum_column.sql`的迁移文件:
```
update CALCULATION
set CALCULATION.sum = CALCULATION.result
where CALCULATION.sum is null;
```
我们仍然没有回滚的限制；但是，如果我们需要在步骤 2 中的更改之前部署版本，那么需要重复这个数据库迁移。
# 从代码中移除旧列
此时，我们已经有了新列中的所有数据，因此我们可以开始使用它，而不用数据模型中的旧列。为此，我们需要移除`Calculation`类中与`result`相关的所有代码，这样看起来如下:
```
public class Calculation {
    ...
    private String sum;
    ...
    public Calculation(String a, String b, String sum, Timestamp createdAt) {
        this.a = a;