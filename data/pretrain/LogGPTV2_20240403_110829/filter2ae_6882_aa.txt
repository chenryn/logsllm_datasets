author:藏青@雁行安全团队
## 前言
分析漏洞的本质是为了能让我们从中学习漏洞挖掘者的思路以及挖掘到新的漏洞，而CodeQL就是一款可以将我们对漏洞的理解快速转化为可实现的规则并挖掘漏洞的利器。根据网上的传言Log4j2的RCE漏洞就是作者通过CodeQL挖掘出的。虽然如何挖掘的我们不得而知，但我们现在站在事后的角度再去想想，可以推测一下作者如何通过CodeQL挖掘到漏洞的,并尝试基于作者的思路挖掘新漏洞。
## 分析过程
首先我们要构建Log4j的数据库，由于`lgtm.com`中构建的是新版本的Log4j数据库，所以只能手动构建数据库了。首先从github获取源码并切换到2.14.1版本。
    git clone https://github.com/apache/logging-log4j2.git
    git checkout be881e5
由于我们这次分析的主要是`log4j-core`和`log4j-api`中的内容，所以打开根目录的Pom.xml注释下面的内容。
        log4j-api-java9
        log4j-api
        log4j-core-java9
        log4j-core
        log4j-layout-template-json
        log4j-core-its
        log4j-1.2-api
        log4j-slf4j-impl
        log4j-slf4j18-impl
        log4j-to-slf4j
        log4j-jcl
        log4j-flume-ng
        log4j-taglib
        log4j-jmx-gui
        log4j-samples
        log4j-bom
        log4j-jdbc-dbcp2
        log4j-jpa
        log4j-couchdb
        log4j-mongodb3
        log4j-mongodb4
        log4j-cassandra
        log4j-web
        log4j-perf
        log4j-iostreams
        log4j-jul
        log4j-jpl
        log4j-liquibase
        log4j-appserver
        log4j-osgi
        log4j-docker
        log4j-kubernetes
        log4j-spring-boot
        log4j-spring-cloud-config -->
由于`log4j-api-java9`和`log4j-core-java9`需要依赖JDK9，所以要先下载JDK9并且在`C:\Users\用户名\.m2\toolchains.xml`中加上下面的内容。
      jdk  
        9  
        sun  
        C:\Program Files\Java\jdk-9.0.4  
通过下面的命令完成数据库构建
    CodeQL database create Log4jDB --language=java --overwrite --command="mvn clean install -Dmaven.test.skip=true"
构建好数据库后，我们要找JNDI注入的漏洞，首先要确定在这套系统中调用了InitialContext#lookup方法。在[LookupInterface](https://github.dev/SummerSec/LookupInterface)项目中已经集成了常见的发起JNDI请求的类,只要稍微改一下即可。
首先定义Context类型，这个类中综合了可能发起JNDI请求的类。
    class Context extends  RefType{
        Context(){
            this.hasQualifiedName("javax.naming", "Context")
            or
            this.hasQualifiedName("javax.naming", "InitialContext")
            or
            this.hasQualifiedName("org.springframework.jndi", "JndiCallback")
            or 
            this.hasQualifiedName("org.springframework.jndi", "JndiTemplate")
            or
            this.hasQualifiedName("org.springframework.jndi", "JndiLocatorDelegate")
            or
            this.hasQualifiedName("org.apache.shiro.jndi", "JndiCallback")
            or
            this.getQualifiedName().matches("%JndiCallback")
            or
            this.getQualifiedName().matches("%JndiLocatorDelegate")
            or
            this.getQualifiedName().matches("%JndiTemplate")
        }
    }
下面寻找那里调用了`Context`的lookup方法。
    from Call call,Callable parseExpression
    where
        call.getCallee() = parseExpression and 
        parseExpression.getDeclaringType() instanceof Context and
        parseExpression.hasName("lookup")
    select call
  * `DataSourceConnectionSource#createConnectionSource`
    @PluginFactory
        public static DataSourceConnectionSource createConnectionSource(@PluginAttribute("jndiName") final String jndiName) {
            if (Strings.isEmpty(jndiName)) {
                LOGGER.error("No JNDI name provided.");
                return null;
            }
            try {
                final InitialContext context = new InitialContext();
                final DataSource dataSource = (DataSource) context.lookup(jndiName);
                if (dataSource == null) {
                    LOGGER.error("No data source found with JNDI name [" + jndiName + "].");
                    return null;
                }
                return new DataSourceConnectionSource(jndiName, dataSource);
            } catch (final NamingException e) {
                LOGGER.error(e.getMessage(), e);
                return null;
            }
        }
  * `JndiManager#lookup`
    @SuppressWarnings("unchecked")
        public  T lookup(final String name) throws NamingException {
            return (T) this.context.lookup(name);
        }
找到sink后我们还需要找到source，虽然Codeql定义了`RemoteFlowSource`支持多种source，但是我们还是要根据实际的代码业务来分析可能作为source的点。
在Log4j作为日志记录的工具，除了从HTTP请求中获取输入点外，还可以在记录日志请求或者解析配置文件中来获取source。先不看解析配置文件获取source的点了，因为这需要分析Log4j解析配置文件的流程比较复杂。所以目前我们只考虑通过日志记录作为source的情况。稍微了解Log4j的同学都知道，Log4j会通过`error/fatal/info/debug/trace`等方法对不同级别的日志进行记录。通过分析我们可以看到我们输入的message都调用了`logIfEnabled`方法并作为第四个参数输入，所以可以将这里定义为source。
下面使用全局污点追踪分析JNDI漏洞，还是套用[LookupInterface](https://github.dev/SummerSec/LookupInterface)项目中的代码，修改source部分即可。
    /**
     *@name Tainttrack Context lookup
     *@kind path-problem
     */
    import java
    import semmle.code.java.dataflow.FlowSources
    import DataFlow::PathGraph
    class Context extends  RefType{
        Context(){
            this.hasQualifiedName("javax.naming", "Context")
            or
            this.hasQualifiedName("javax.naming", "InitialContext")
            or
            this.hasQualifiedName("org.springframework.jndi", "JndiCallback")
            or 
            this.hasQualifiedName("org.springframework.jndi", "JndiTemplate")
            or
            this.hasQualifiedName("org.springframework.jndi", "JndiLocatorDelegate")
            or
            this.hasQualifiedName("org.apache.shiro.jndi", "JndiCallback")
            or
            this.getQualifiedName().matches("%JndiCallback")
            or
            this.getQualifiedName().matches("%JndiLocatorDelegate")
            or
            this.getQualifiedName().matches("%JndiTemplate")
        }
    }
    class Logger extends  RefType{
        Logger(){
            this.hasQualifiedName("org.apache.logging.log4j.spi", "AbstractLogger")
        }
    }
    predicate isLookup(Expr arg) {
        exists(MethodAccess ma |
            ma.getMethod().getName() = "lookup"
            and
            ma.getMethod().getDeclaringType() instanceof Context
            and
            arg = ma.getArgument(0)
        )
    }
    predicate isLogging(Expr arg) {
        exists(MethodAccess ma |
            ma.getMethod().getName() = "logIfEnabled"
            and
            ma.getMethod().getDeclaringType() instanceof Logger
            and
            arg = ma.getArgument(3)
        )
    }
    class TainttrackLookup  extends TaintTracking::Configuration {
        TainttrackLookup() { 
            this = "TainttrackLookup" 
        }
        override predicate isSource(DataFlow::Node source) {
            exists(Expr exp |
                isLogging(exp)
                and
                source.asExpr() = exp
            )
        }
        override predicate isSink(DataFlow::Node sink) {
            exists(Expr arg |
                isLookup(arg)
                and
                sink.asExpr() = arg
            )
        }
    } 
    from TainttrackLookup config , DataFlow::PathNode source, DataFlow::PathNode sink
    where
        config.hasFlowPath(source, sink)
    select sink.getNode(), source, sink, "unsafe lookup", source.getNode(), "this is user input"
虽然这些也得到了很多查询结果，但是在实际使用Log4j打印日志时可能不会带上Marker参数而是直接写入messge的内容。
所以我们现在要追踪的source应该是带有一个参数的`error/fatal/info/debug/trace`等方法。我这里以error方法为例对source部分进行修改。
    class LoggerInput extends  Method {
        LoggerInput(){
            //限定调用的类名、方法名、以及方法只有一个参数
            this.getDeclaringType() instanceof Logger and
            this.hasName("error") and this.getNumberOfParameters() = 1
        }
        //将第一个参数作为source
        Parameter getAnUntrustedParameter() { result = this.getParameter(0) }
    }
    override predicate isSource(DataFlow::Node source) {
            exists(LoggerInput LoggerMethod |
                source.asParameter() = LoggerMethod.getAnUntrustedParameter())
        }
这样我们就得到了多条链,现在我们要写个Demo验证这个链是否可行，比如最简单的`logger.error("xxxxx");`
    1   message : Message   AbstractLogger.java:709:23
    2   message : Message   AbstractLogger.java:710:47
    3   message : Message   AbstractLogger.java:1833:89
    4   message : Message   AbstractLogger.java:1835:38
    5   message : Message   Logger.java:262:70
    6   message : Message   Logger.java:263:52
    7   msg : Message   Logger.java:617:64
    8   msg : Message   Logger.java:620:78
    9   msg : Message   RegexFilter.java:73:87
    10  msg : Message   RegexFilter.java:78:63
    ...
    64  convertJndiName(...) : String   JndiLookup.java:54:33
    65  jndiName : String   JndiLookup.java:56:56
    66  name : String   JndiManager.java:171:25
    67  name    JndiManager.java:172:40
    Path
但是这条链只有配置了Filter为`RegexFilter`才会继续执行，而默认没有配置则为空。
所以这种方式就稍微有些限制，所以我们再去看看其他链。这条链似乎不用配置Filter。
    1   message : Message   AbstractLogger.java:709:23
    2   message : Message   AbstractLogger.java:710:47
    3   message : Message   AbstractLogger.java:1833:89
    4   message : Message   AbstractLogger.java:1836:51
    5   message : Message   AbstractLogger.java:2139:94
    6   message : Message   AbstractLogger.java:2142:59
    7   message : Message   AbstractLogger.java:2155:43
    8   message : Message   AbstractLogger.java:2159:67
    9   message : Message   AbstractLogger.java:2202:32
    10  message : Message   AbstractLogger.java:2205:48
    11  message : Message   AbstractLogger.java:2116:9
    12  message : Message   AbstractLogger.java:2117:41
    ...
    78  var : String    Interpolator.java:230:92
    79  key : String    JndiLookup.java:50:48
    80  key : String    JndiLookup.java:54:49
    81  jndiName : String   JndiLookup.java:70:36
    82  jndiName : String   JndiLookup.java:74:16
    83  convertJndiName(...) : String   JndiLookup.java:54:33
    84  jndiName : String   JndiLookup.java:56:56
    85  name : String   JndiManager.java:171:25
    86  name    JndiManager.java:172:40
但是在`AbstractLogger#tryLogMessage`中Codeql会直接分析到`AbstractLogger#log`而实际请求时会解析到`Logger#log`方法。这是因为`Logger`是`AbstractLogger`的子类并且也实现了log方法，而且我们实例化的也是Logger对象，所以这里会调用到`Logger#log`。
**实际请求**
**CodeQL分析**
再看看下面这条链
    1   message : Message   AbstractLogger.java:709:23
    2   message : Message   AbstractLogger.java:710:47
    3   message : Message   AbstractLogger.java:1833:89