# Linux系统调用机制浅析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
本文不会介绍CPU特权级别，中断，MSR，段机制及页机制等相关前置知识，如果读者此前未接触过这些，建议阅读Intel
SDM对应篇章或者[参阅链接](https://blog.packagecloud.io/eng/2016/04/05/the-definitive-guide-to-linux-system-calls/#prerequisite-information)之后再继续下面篇幅。本文基于如下环境：
  * CPU：Intel
  * Kernel Version：4.15.0
  * Debugging Env：Ubuntu 20.04.02 x64(Kernel Version—5.11.0)
## 0x01 INT $0x80
###  a. 源码分析
首先从源码角度分析传统系统调用，即int 0x80。IDT(Interrupt Descriptor
Table)建立位于`arch/x86/kernel/traps.c`中：
    void __init trap_init(void)
    {
        /* Init cpu_entry_area before IST entries are set up */
        setup_cpu_entry_areas();
        idt_setup_traps();
        /*
         * Set the IDT descriptor to a fixed read-only location, so that the
         * "sidt" instruction will not leak the location of the kernel, and
         * to defend the IDT against arbitrary memory write vulnerabilities.
         * It will be reloaded in cpu_init() */
        cea_set_pte(CPU_ENTRY_AREA_RO_IDT_VADDR, __pa_symbol(idt_table),
                PAGE_KERNEL_RO);
        idt_descr.address = CPU_ENTRY_AREA_RO_IDT;
        /*
         * Should be a barrier for any external CPU state:
         */
        cpu_init();
        idt_setup_ist_traps();
        x86_init.irqs.trap_init();
        idt_setup_debugidt_traps();
    }
`idt_setup_traps()`函数定义在`arch/x86/kernel/idt.c`中：
    /**
     * idt_setup_traps - Initialize the idt table with default traps
     */
    void __init idt_setup_traps(void)
    {
        idt_setup_from_table(idt_table, def_idts, ARRAY_SIZE(def_idts), true);
    }
其调用`idt_setup_from_table`函数同样位于该文件：
    static void
    idt_setup_from_table(gate_desc *idt, const struct idt_data *t, int size, bool sys)
    {
        gate_desc desc;
        for (; size > 0; t++, size--) {
            idt_init_desc(&desc, t);
            write_idt_entry(idt, t->vector, &desc);
            if (sys)
                set_bit(t->vector, system_vectors);
        }
    }
`def_idts`存储了IDT各项默认值，其定义如下：
    /*
     * The default IDT entries which are set up in trap_init() before
     * cpu_init() is invoked. Interrupt stacks cannot be used at that point and
     * the traps which use them are reinitialized with IST after cpu_init() has
     * set up TSS.
     */
    static const __initconst struct idt_data def_idts[] = {
        INTG(X86_TRAP_DE,        divide_error),
        INTG(X86_TRAP_NMI,        nmi),
        INTG(X86_TRAP_BR,        bounds),
        INTG(X86_TRAP_UD,        invalid_op),
        INTG(X86_TRAP_NM,        device_not_available),
        INTG(X86_TRAP_OLD_MF,        coprocessor_segment_overrun),
        INTG(X86_TRAP_TS,        invalid_TSS),
        INTG(X86_TRAP_NP,        segment_not_present),
        INTG(X86_TRAP_SS,        stack_segment),
        INTG(X86_TRAP_GP,        general_protection),
        INTG(X86_TRAP_SPURIOUS,        spurious_interrupt_bug),
        INTG(X86_TRAP_MF,        coprocessor_error),
        INTG(X86_TRAP_AC,        alignment_check),
        INTG(X86_TRAP_XF,        simd_coprocessor_error),
    #ifdef CONFIG_X86_32
        TSKG(X86_TRAP_DF,        GDT_ENTRY_DOUBLEFAULT_TSS),
    #else
        INTG(X86_TRAP_DF,        double_fault),
    #endif
        INTG(X86_TRAP_DB,        debug),
    #ifdef CONFIG_X86_MCE
        INTG(X86_TRAP_MC,        &machine_check),
    #endif
        SYSG(X86_TRAP_OF,        overflow),
    #if defined(CONFIG_IA32_EMULATION)
        SYSG(IA32_SYSCALL_VECTOR,    entry_INT80_compat),
    #elif defined(CONFIG_X86_32)
        SYSG(IA32_SYSCALL_VECTOR,    entry_INT80_32),
    #endif
    };
根据配置选项不同，`IA32_SYSCALL_VECTOR`项值不同——若启用`CONFIG_IA32_EMULATION`，则以64位兼容模式运行32位程序；否则是32位。`IA32_SYSCALL_VECTOR`定义如下：
    #define IA32_SYSCALL_VECTOR        0x80
`INTG`与`SYSG`定义不同之处在于DPL：
    /* Interrupt gate */
    #define INTG(_vector, _addr)                \
        G(_vector, _addr, DEFAULT_STACK, GATE_INTERRUPT, DPL0, __KERNEL_CS)
    /* System interrupt gate */
    #define SYSG(_vector, _addr)                \
        G(_vector, _addr, DEFAULT_STACK, GATE_INTERRUPT, DPL3, __KERNEL_CS)
相关定义如下：
    #define DPL0        0x0
    #define DPL3        0x3
    #define DEFAULT_STACK    0
    #define G(_vector, _addr, _ist, _type, _dpl, _segment)    \
        {                        \
            .vector        = _vector,        \
            .bits.ist    = _ist,            \
            .bits.type    = _type,        \
            .bits.dpl    = _dpl,            \
            .bits.p        = 1,            \
            .addr        = _addr,        \
            .segment    = _segment,        \
        }
门描述符及类型定义如下(位于`/arch/x86/include/asm/desc_defs.h`)：
    struct gate_struct {
        u16        offset_low;
        u16        segment;
        struct idt_bits    bits;
        u16        offset_middle;
    #ifdef CONFIG_X86_64
        u32        offset_high;
        u32        reserved;
    #endif
    } __attribute__((packed));
    enum {
        GATE_INTERRUPT = 0xE,
        GATE_TRAP = 0xF,
        GATE_CALL = 0xC,
        GATE_TASK = 0x5,
    };
对应于Intel SDM中：
`idt_init_desc`函数定义如下：
    static inline void idt_init_desc(gate_desc *gate, const struct idt_data *d)
    {
        unsigned long addr = (unsigned long) d->addr;
        gate->offset_low    = (u16) addr;
        gate->segment        = (u16) d->segment;
        gate->bits        = d->bits;
        gate->offset_middle    = (u16) (addr >> 16);
    #ifdef CONFIG_X86_64
        gate->offset_high    = (u32) (addr >> 32);
        gate->reserved        = 0;
    #endif
    }
`write_idt_entry`是`memcpy`函数的简单包装：
    #define write_idt_entry(dt, entry, g)        native_write_idt_entry(dt, entry, g)
    ......
    static inline void native_write_idt_entry(gate_desc *idt, int entry, const gate_desc *gate)
    {
        memcpy(&idt[entry], gate, sizeof(*gate));
    }
如此一来，便在IDT 0x80项写入了系统调用函数地址。上述函数调用关系为：
* * *
`entry_INT80_32`定义位于`arch/x86/entry/entry_32.S`文件中：
    ENTRY(entry_INT80_32)
        ASM_CLAC
        pushl    %eax            /* pt_regs->orig_ax */
        SAVE_ALL pt_regs_ax=$-ENOSYS    /* save rest */
        /*
         * User mode is traced as though IRQs are on, and the interrupt gate
         * turned them off.
         */
        TRACE_IRQS_OFF
        movl    %esp, %eax
        call    do_int80_syscall_32
    .Lsyscall_32_done:
    restore_all:
        TRACE_IRQS_IRET
    .Lrestore_all_notrace:
    #ifdef CONFIG_X86_ESPFIX32
        ALTERNATIVE    "jmp .Lrestore_nocheck", "", X86_BUG_ESPFIX
        movl    PT_EFLAGS(%esp), %eax        # mix EFLAGS, SS and CS
        /*
         * Warning: PT_OLDSS(%esp) contains the wrong/random values if we
         * are returning to the kernel.
         * See comments in process.c:copy_thread() for details.
         */
        movb    PT_OLDSS(%esp), %ah
        movb    PT_CS(%esp), %al
        andl    $(X86_EFLAGS_VM | (SEGMENT_TI_MASK orig_ax;
    #ifdef CONFIG_IA32_EMULATION
        current->thread.status |= TS_COMPAT;
    #endif
        if (READ_ONCE(ti->flags) & _TIF_WORK_SYSCALL_ENTRY) {
            /*
             * Subtlety here: if ptrace pokes something larger than
             * 2^32-1 into orig_ax, this truncates it.  This may or
             * may not be necessary, but it matches the old asm
             * behavior.
             */
            nr = syscall_trace_enter(regs);
        }
        if (likely(nr < IA32_NR_syscalls)) {
            /*
             * It's possible that a 32-bit syscall implementation
             * takes a 64-bit parameter but nonetheless assumes that
             * the high bits are zero.  Make sure we zero-extend all