### 使用 Docker Swarm 管理容器集群

#### 1. 启动 Swarm 节点
首先，使用以下命令启动一个 Swarm 节点，并将其加入到集群中：
```bash
rio@083:~$ sudo docker run -d swarm join --addr=192.168.1.83:2375 token://b7625e5a7a2dc7f8c4faacf2b510078e3b3d9da603d7c121588f796eab723458af5938606282787fcbb03b6f1ac2000b
```
这条命令通过 `-d` 参数在后台运行一个容器，使 IP 地址为 `192.168.1.83` 的机器加入到 Swarm 集群。如果该容器停止或被删除，这台机器将从集群中移除。

#### 2. 启动 Swarm Manager
为了使 `192.168.1.83` 这台机器作为 Swarm 管理节点，执行以下命令：
```bash
sudo docker run -d -p 2376:2375 swarm manage token://b7625e5a7a2dc7f8c4faacf2b510078e
```
执行成功后，会返回已启动的 Swarm 容器的 ID。此时，整个集群已经启动。可以通过 `docker ps` 命令确认是否启动成功：
```bash
rio@083:~$ sudo docker ps
CONTAINER ID   IMAGE          COMMAND                  CREATED        STATUS        PORTS                      NAMES
83de3e9149b7   swarm:latest   "/swarm manage token"   4 minutes ago  Up 4 minutes  0.0.0.0:2376->2375/tcp    stupefied_stallman
```

#### 3. 注意事项
- 此命令必须在充当 Swarm 管理者的机器上执行。
- Swarm 应以守护进程的形式运行。
- 映射的端口可以是任意未被占用的端口（除了 2375，因为它已被 Docker 占用）。

#### 4. 查看集群中的节点
在任何一台节点上使用 `swarm list` 命令查看集群中的节点。例如，在 `192.168.1.124` 这台机器上执行：
```bash
rio@124:~$ sudo docker run --rm swarm list token://b7625e5a7a2dc7f8c4faacf2b510078e
192.168.1.84:2375
192.168.1.124:2375
192.168.1.83:2375
```

#### 5. 在集群中运行容器
可以在任何安装了 Docker 的机器上通过指定 Swarm Manager 的 IP 地址来在集群中运行容器。例如，在 `192.168.1.85` 这台机器上执行：
```bash
rio@085:~$ sudo docker -H 192.168.1.83:2376 info
Containers: 8
Strategy: spread
Filters: affinity, health, constraint, port, dependency
Nodes: 2
sclu083: 192.168.1.83:2375
└ Containers: 1
└ Reserved CPUs: 0 / 2
└ Reserved Memory: 0 B / 4.054 GiB
sclu084: 192.168.1.84:2375
└ Containers: 7
└ Reserved CPUs: 0 / 2
└ Reserved Memory: 0 B / 4.053 GiB
```

#### 6. 解决问题
如果发现某些节点未出现在集群中，可能是因为这些节点上的 Docker 守护进程配置不正确。确保每个节点上的 Docker 守护进程都正确配置并监听相应的端口。

#### 7. 使用文件管理集群
另一种方法是使用文件来管理集群。首先，在 Swarm 管理节点上创建一个包含所有节点 IP 和端口的文件：
```bash
rio@083:~$ echo 192.168.1.83:2375 >> cluster
rio@083:~$ echo 192.168.1.84:2375 >> cluster
rio@083:~$ echo 192.168.1.124:2375 >> cluster
```
然后，使用该文件启动 Swarm Manager：
```bash
rio@083:~$ sudo docker run -d -p 2376:2375 -v $(pwd)/cluster:/tmp/cluster swarm manage file:///tmp/cluster
```

#### 8. 调度策略
Swarm 支持多种调度策略，包括 `spread`, `binpack` 和 `random`。默认策略是 `spread`，可以在启动 Swarm Manager 时通过 `--strategy` 参数指定。

- **Spread**：选择正在运行容器数量最少的节点来运行新容器。
- **Binpack**：尽可能地将所有容器放在同一台节点上运行，以避免资源碎片化。
- **Random**：随机选择一个节点来运行容器，通常用于调试。

#### 9. 过滤器
Swarm 调度器支持几种过滤器，如 `Constraint`, `Affinity`, `Port`, `Dependency`, `Health`。可以在启动 Swarm Manager 时通过 `--filter` 选项设置。

- **Constraint Filter**：可以在启动 Docker 守护进程时指定标签。例如：
  ```bash
  sudo docker -d --label label_name=label01
  ```
  在运行容器时，可以通过 `-e constraint:key=value` 指定容器运行的节点。例如：
  ```bash
  rio@085:~$ sudo docker -H 192.168.1.83:2376 run --name redis_1 -d -e constraint:label_name==084 redis
  ```

通过以上步骤，您可以成功管理和操作 Docker Swarm 集群。