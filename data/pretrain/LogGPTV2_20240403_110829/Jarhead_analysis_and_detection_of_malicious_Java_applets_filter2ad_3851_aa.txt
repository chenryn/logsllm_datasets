title:Jarhead analysis and detection of malicious Java applets
author:Johannes Schlumberger and
Christopher Kruegel and
Giovanni Vigna
Analysis and Detection of Malicious Java Applets
Jarhead
Johannes Schlumberger
University of California, Santa
Barbara
PI:EMAIL
Christopher Kruegel
University of California, Santa
Barbara
PI:EMAIL
Giovanni Vigna
University of California, Santa
Barbara
PI:EMAIL
ABSTRACT
Java applets have increasingly been used as a vector to de-
liver drive-by download attacks that bypass the sandbox-
ing mechanisms of the browser’s Java Virtual Machine and
compromise the user’s environment. Unfortunately, the re-
search community has not given to this problem the atten-
tion it deserves, and, as a consequence, the state-of-the-art
approaches to the detection of malicious Java applets are
based either on simple signatures or on the use of honey-
clients, which are both easily evaded. Therefore, we propose
a novel approach to the detection of malicious Java applets
based on static code analysis. Our approach extracts a num-
ber of features from Java applets, and then uses supervised
machine learning to produce a classiﬁer. We implemented
our approach in a tool, called Jarhead, and we tested its
eﬀectiveness on a large, real-world dataset. The results of
the evaluation show that, given a suﬃciently large training
dataset, this approach is able to reliably detect both known
and previously-unseen real-world malicious applets.
1.
INTRODUCTION
Malicious web content is a major attack vector on the In-
ternet [32]. Typically, the attacker’s goal is to install and run
a piece of malware on the victim’s computer, turning it into
a member of a botnet. To this end, attackers try to lure users
onto malicious web pages that contain malicious code [31].
This code might trick the victim into downloading and run-
ning a malware program (through social engineering). Alter-
natively, the malicious code might try to exploit a vulnerable
part of the victim’s browser, such as an ActiveX control, the
JavaScript engine, or the Java plugin. Attacks that exploit
(browser or plugin) vulnerabilities when users visit malicious
web pages are called drive-by download attacks. During the
last two years, there has been a tremendous increase in Java-
applet-based attacks - more than 300% in the ﬁrst half of
2010 [15] alone. Interestingly, these exploits are widely ig-
nored by security researchers so far [22]. This is despite the
fact that commercial exploit toolkits such as “Blackhole” or
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACASC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
“Bleeding Life” are using Java-based attacks to compromise
large numbers of computers [22, 23].
A Java applet is a piece of software designed to be exe-
cuted in a user’s browser by a Java virtual machine (JVM [24]).
Applets are embedded into web pages. They are automati-
cally loaded and executed if the browser has a Java plugin
installed (once the page has loaded), and graphical content
is appropriately displayed by the browser. Applets predate
cascading style sheets (CSS), and have typically been used
for formatting and navigation purposes before more modern
mechanisms became available (e.g., Flash, JavaScript, and
HTML5). However, an applet can be any program and is
not bound to a speciﬁc purpose.
Internet users are often not aware of the existence of ap-
plets and the Java plugin. Thus, they are not careful about
keeping the plugin up to date, or care to disable it when vis-
iting untrusted sites, even though multiple vulnerabilities
exist and keep emerging with diﬀerent versions of Java plu-
gins [3, 4, 5, 6, 7]. As a result of this lack of awareness, Java
plugins are still widely deployed, and about 85% [22] of all
browsers today have the Java plugin installed and enabled.
In addition, 42% of all browsers running with Java plugins
have known vulnerabilities [21] and are thus susceptible to
attacks [19, 22].
Traditionally, malicious content is recognized by matching
programs (or data) against known malicious patterns, called
signatures [2, 33]. Unfortunately, this approach is suscepti-
ble to obfuscation techniques that make malicious content
look diﬀerent and not match an existing signature [25]. Ad-
ditionally, this approach can only detect already-known at-
tacks, and new signatures need to be added to recognize new
variations of an exploit.
Another approach to detect malicious web content is to
use low interaction honeyclients [10, 30]. Honeyclients are
built as instrumented, automated browsers that visit web
pages and monitor changes to the system [1, 32].
If ab-
normal behavior, such as creation of ﬁles or processes, is
detected, the page is deemed malicious. This approach can
only detect malicious behavior that the system was explic-
itly set up to detect. In particular, if the software targeted
by an exploit is not running on the honeyclient, it cannot
be exploited, and as a result, no malicious intent can be de-
tected. It is a very tedious, human-intensive task to keep a
honeyclient running with all the diﬀerent versions and com-
binations of software packages to ensure that no exploits are
missed. Thus, honeyclients can have high numbers of false
negatives [34]. Moreover, malware authors attempt to ﬁn-
gerprint honeyclients, by testing for speciﬁc features in the
249
environment it provides. When such mechanisms detect a
honeyclient, the code will not behave maliciously, and there-
fore, evade detection.
To address the growing problem of malicious Java-applets,
we have developed a system, called Jarhead, that statically
analyzes Java applets. This system uses a set of features and
machine learning techniques [17] to build a classiﬁer that
can decide whether an applet is malicious or benign. Our
approach works independently of the attacked Java version
and without recreating a realistic runtime environment. It
allows us to analyze applets fast and eﬃciently and to cate-
gorize them as benign or malicious.
We have tested our system on real world data sets with
more than 3,300 applets (collected both manually and from
the public submission interface of Wepawet, a popular and
publicly-available system for the analysis of web threats [8]).
Our evaluation shows that Jarhead works with high accuracy
and produces very low false positives.
The main contributions in this paper are:
• We address the problem of malicious Java applets, a
problem on the rise that is currently not well addressed
by existing work. To this end, we have developed a
reliable detector for malicious Java applets, which we
call Jarhead.
• Jarhead uses static analysis and machine learning tech-
niques to identify malicious Java applets with high
accuracy. Our detection is fast and robust to obfus-
cation.
It also requires little maintenance compared
to signature-based detection systems and honeyclients;
we do not need to collect signatures or maintain a re-
alistic and complete runtime environment.
• We executed Jarhead on a large collection of malicious
Java applets collected in the wild. We found that our
system detected malicious programs with high accu-
racy, and we were able to identify a new (zero-day)
exploit against a previously unknown vulnerability.
2. BACKGROUND
Before we describe our system, this section provides some
brief background on applets and the Java sandboxing mech-
anism [16].
Applets usually come packaged as archives (called Jar
ﬁles), which consist of individual class ﬁles containing Java
bytecode (for brevity’s sake, we refer to both individual class
ﬁles and archives of class ﬁles as Jar ﬁles or Jars throughout
the paper). In addition to the Java class ﬁles, a Jar archive
can contain arbitrary additional ﬁles.
If the Jar contains
an applet, it has to hold at least the ﬁles containing the
applet’s code. Additional contents typically include a man-
ifest ﬁle, describing the starting point for execution of this
applet, version information, or other package-related data
in name-value format. Additionally, Jars often contain ad-
ditional data needed by the applet, such as media ﬁles or
copyright information.
To protect against malicious applets, the JVM contains
(sandboxes) an applet and heavily restricts its permissible
operations when it is not loaded from disk. Applets loaded
over the network can, for example, only access resources on
the remote host they were loaded from, and they cannot
read certain system properties on the client side (such as
usernames or the current working directory). These protec-
tion mechanisms are part of the same-origin policy [9] of the
browser, designed to prevent untrusted sites from interfering
with the user’s communication to trusted sites. Moreover,
a sandboxed applet cannot access client resources, such as
the ﬁle system. By restricting the abilities of untrusted mo-
bile code, its abilities to infect an end user’s machine or to
tamper with her data are severely limited. Furthermore, by
preventing the applet from loading native code that is not
veriﬁable by the JVM, creating a class loader, or changing
the Java security manager, the JVM provides a safe execu-
tion environment. In the absence of bugs in the described
sandbox implementation, this enables end users to safely
browse the web even in the presence of sites that serve ma-
licious Java code.
Applets that are digitally signed with a certiﬁcate (that is,
certiﬁcates trusted by the user) run eﬀectively outside the
sandbox. In such cases, the previously-described restrictions
do not apply. The browser, encountering an applet with a
signature, will usually display a dialog window asking the
user if he trusts the applet’s certiﬁcate or not. If the user
accepts the certiﬁcate, the applet runs with full privileges,
otherwise, it is sandboxed. An applet that is started from
JavaScript remains always sandboxed.
Malicious applets try to escape the sandbox and install
malware on a victim’s computer. To achieve this, some ap-
plets try to trick careless users into trusting their certiﬁcates.
Others target the JVM itself by trying to exploit a vulner-
ability in the Java plugin [3, 5, 6, 7], eﬀectively disabling
the sandbox and turning the applet into a full-ﬂedged, non-
restricted program with permissions equal to that of the user
running the browser.
In this paper, we address the problem of malicious Java
applets trying to exploit the Java virtual machine. Even
though Jarhead does not defend against social engineering
techniques, our system is able to identify applets used as a
necessary part of these attacks as malicious.
3. JARHEAD SYSTEM OVERVIEW
This section introduces our analysis system, called Jar-
head. We will describe design choices and provide a high-
level overview of its operation.
Jarhead relies on static analysis and machine learning to
detect malicious Java applets. Jarhead operates at the Java
bytecode level. That is, Jarhead analyzes the bytecode that
is part of a class ﬁle. Java bytecode is the encoding of the
machine instructions for the JVM, similar to binary code
for “bare metal” machines. In addition to the bytecode, we
collect strings from the constant pool. The constant pool
holds strings and other data values, and it is also part of a
Java class ﬁle. Usually, there is one class ﬁle per class of the
program. Java class ﬁles can be seen as the equivalent of
binaries in a speciﬁc format (such as ELF on Linux or PE
on Windows).
To analyze a Jar ﬁle, we extract its contents and then
disassemble all class ﬁles contained in the Jar into a single
(disassembled) ﬁle. Furthermore, we collect certain statis-
tics about the applet: The number and type of ﬁles con-
tained, its total size, and the total number of class ﬁles. We
pass these statistics and the disassembled ﬁle to our feature
extraction tool, which derives concrete values for a total of
42 features. Our full set of features will be discussed in more
detail in the next section.
250
Jarhead operates in two steps: First, we use a training set
of applets - each applet known to be benign or malicious -
to train a classiﬁer based on the features Jarhead extracts
from applets. After the training phase, we use this classiﬁer
in a second step to perform detection of malicious applets.
Our analysis system has to be robust to obfuscation, so
that attackers cannot easily evade detection by small changes
to their exploits. It should ideally also not require reconﬁg-
uration or retraining when new vulnerabilities are exploited,
to avoid the window of “blindness” when a new exploit sur-
faces. Furthermore, the system should be fast and not re-
quire human interaction.
Jarhead’s analysis focuses only on the Jar ﬁle (and the
Java classes within), without looking at the surrounding web
page or the interaction between the applet and its environ-
ment (and the browser). Thus, Jarhead does not require
access to the parameters stored in the web page contain-
ing the applet, nor to other parts of the environment in
which the Jar was deployed. This enables Jarhead to work
with in-vitro samples, similar to anti-virus software. The
main advantage of this approach is that we do not require
parts of the applet that are sometimes hidden by the at-
tacker through obfuscation. In fact, often, parameters are
used to provide shellcode (or a key used to decipher shell-
code strings) to the applet. When these parts are missing
for an oﬄine sample, or they are successfully hidden from
a dynamic analysis system during online processing, detec-
tion fails. We found that, very often, malicious Java applets
require input from the surrounding environment. Unfortu-
nately, this information is often missing from samples shared
between security analysts and anti-virus companies. In these
cases, a dynamic analysis approach (which is often used for
analyzing web and script content) simply fails. More pre-
cisely, dynamic analysis systems are unable to start or even
load the code successfully and cannot gain information from
a program run.
Malicious code also uses ﬁngerprinting to evade dynamic
analysis, by not displaying malicious behavior while ana-
lyzed. Additionally, dynamic analysis through emulation
works at a slower speed than execution on real hardware.
Therefore, a malicious program can be written in such a way
that it delays dynamic analysis by executing slowly within
the analysis system. When an analysis run is terminated be-
fore the malicious activity starts, the malware will be falsely
deemed benign. The same program can execute quickly on
real hardware, successfully infecting the users browser. By
using static analysis, Jarhead is able to analyze malware
samples that resist dynamic analysis systems in an eﬃcient
way, while being robust to ﬁngerprinting.