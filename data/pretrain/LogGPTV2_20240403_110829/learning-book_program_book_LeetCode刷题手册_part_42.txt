// since we are checking if a num appears more than 1/3 of the time
// it is only possible to have at most 2 nums (>1/3 + >l/3 = >2/3)
countl, count2, candidatel, candidate2 := 0, 0,0,1
// Select Candidates
for _, num := range nums {
if num == candidatel {
count1++
}else if num
== candidate2 {
count2++
}else if countl  1ength/3 && count2 > 1ength/3 {
return []int{candidatel, candidate2}
if countl > 1ength/3{
return []int{candidatel}
if count2 > 1ength/3 {
return []int{candidate2}
return []int{}
//解法二时间复杂度o（n）空间复杂度0（n）
func majorityElement229_1(nums []int) []int {
result, m := make([]int, 0), make(map[int]int)
---
## Page 377
for _, val := range nums {
if v, ok := m[val]; ok {
m[va1] = V + 1
}else{
m[va] = 1
}
for k,v := range m {
if v > 1en(nums)/3 {
result = append(result, k)
return result
230.KthSmallestElementinaBST
题目
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
Note: You may assume k is always valid, 1 ≤ k ≤ BST's total elements.
Example 1:
Input: root =[3,1,4,nu11,2], k = 1
3
/
4
Output: 1
Example 2:
Input: root = [5,3,6,2,4,nu11,nu11,1],k = 3
5
/
6
Output: 3
Follow up:What if the BST is modlified (insert/delete operations) often and you need to find the
kth smallest frequently? How would you optimize the kthSmallest routine?
---
## Page 378
给定一个二叉搜索树，编写一个函数kthSmallest来查找其中第k个最小的元素。你可以假设k总是有
效的，1≤ks二叉搜索树元素个数。
解题思路
·由于二叉搜索树有序的特性，所以中根遍历它，遍历到第K个数的时候就是结果
代码
package leetcode
* Definition for a binary tree node.
* type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func kthsmallest(root
*TreeNode，k int） int {
res, count := 0,0
inorder230(root，k，&count,&res)
return res
func inorder230(node *TreeNode，k int,count *int， ans *int) {
if node != nil{
inorder230(node.Left,k, count, ans)
*count++
if count ==k{
*ans = node.val
return
inorder230(node.Right, k, count, ans)
231.PowerofTwo
题目
Given an integer, write a function to determine if it is a power of two.
---
## Page 379
Example 1:
Input: 1
Output: true
Explanation: 2^0 = 1
Example 2:
Input: 16
output: true
Exp1anation: 2∧4 = 16
Example 3:
Input: 218
output: false
题目大意
给定一个整数，编写一个函数来判断它是否是2的幂次方。
解题思路
·判断一个数是不是2的n次方。
·这一题最简单的思路是循环，可以通过。但是题目要求不循环就要判断，这就需要用到数论的知识
了。这一题和第326题是一样的思路。
代码
package leetcode
//解法
二进制位操作法
func isPowerofTwo(num int) bool {
return（num>0 &&（(num &（num -1))==0))
//解法二数论
func isPowerofTwol(num int) bool {
return num > 0 && (1073741824%num == 0)
}
//解法三打表法
func isPowerofTwo2(num int) boo1{
---
## Page 380
allpowerofTwoMap = map[int]int{1: 1, 2:2, 4: 4, 8: 8, 16: 16, 32: 32, 64:
64, 128: 128, 256: 256, 512: 512, 1024: 1024, 2048: 2048, 4096: 4096, 8192:
8192, 16384: 16384, 32768: 32768, 65536: 65536, 131072: 131072, 262144:
262144, 524288: 524288, 1048576: 1048576, 2097152: 2097152, 4194304: 4194304,
8388608: 8388608, 16777216: 16777216, 33554432: 33554432, 67108864: 67108864,
134217728: 134217728, 268435456: 268435456, 536870912: 536870912, 1073741824:
1073741824}
-, ok := allpowerofTwoMap[num]
return ok
//解法四循环
func isPowerofTwo3(num int) boo1 {
for num >= 2 {
if num%2 == 0{
num = num / 2
}else{
return false
return num == 1
232.lmplementQueueusingStacks
题目
Implement the following operations of a queue using stacks.
● push(x) - Push element x to the back of queue.
● pop() -- Removes the element from in front of queue.
● peek() - Get the front element.
● empty() -- Return whether the queue is empty.
Example:
MyQueue queue = new MyQueue();
queue . push(1) ;
queue . push(2) ;
queue. peek() ;
//returns 1
queue. pop () ;
// returns 1
queue.empty();// returns false
Note:
---
## Page 381
● You must use only standard operations of a stack - which means only push to top,
peek/pop from top, size, and is empty operations are valid.
e ajejnwis Kew no, fjaapeu pajoddns aq jou Kew xpejs 'agenguel anof uo Supuadaa  ●
stack by using a list or dleque (double-ended queue), as long as you use only standard
 operations of a stack.
● You may assume that all operations are valid (for example, no pop or peek operations will
be called on an empty queue).
题目大意
题目要求用栈实现一个队列的基本操作：push(x)、pop(、peek0、empty()。
解题思路
按照题目要求实现即可。
代码
package leetcode
type MyQueue struct{
Stack *[]int
Queue *[]int
}
/* Initialize your data structure here.*/
func Constructor232() MyQueue {
tmpl， tmp2 :=[]int{}， []int{}
return MyQueue{Stack: &tmpl,Queue:&tmp2}
/t Push element x to the back of queue.*/
func (this *MyQueue) Push(x int) {
*this.Stack = append(*this.Stack, x)
/* Removes the element from in front of queue and returns that element. */
func （this *MyQueue) Pop（) int {
if 1en(*this.Queue) == 0{
this.fromStackToQueue(this.Stack, this.Queue)
popped := (*this.Queue) [1en(*this.Queue)-1]
this.Queue = (*this.Queue) [: 1en(*this.Queue) -1]
return popped
---
## Page 382
/** Get the front element. */
func (this *MyQueue) Peek() int {
if len(*this.Queue) == 0 {
this.fromStackToQueue(this.Stack, this.Queue)
3
return (*this.Queue)[1en(*this.Queue)-1]
/*# Returns whether the queue is empty.*/
func (this *MyQueue) EmptyO bool{
return len(*this.Stack)+len(*this.Queue) ==
L
func （this *MyQueue) fromStackToQueue(s，q *[]int) {
for len（*s）>0{
popped := (*s)[1en(*s)-1]
*s =(*s）[:1en(*s）-1]
*q = append(*q，popped)
234.PalindromeLinkedList
题目
Given a singly linked list, determine if it is a palindrome.
Example 1:
Input: 1->2
output: false
Example 2:
Input: 1->2->2->1
output: true
Follow up:
Could you do it in O(n) time and O(1) space?
---
## Page 383
题目大意
判断一个链表是否是回文链表。要求时间复杂度O（n)，空间复杂度O（1）。
解题思路
这道题只需要在第143题上面改改就可以了。思路是完全一致的。先找到中间结点，然后反转中间结点
后面到结尾的所有结点。最后一一判断头结点开始的结点和中间结点往后开始的结点是否相等。如果一
直相等，就是回文键表，如果有不相等的，直接返回不是回文链表。
代码
package leetcode
/
* Definition for singly-linked list.
* type ListNode struct {
valint
Next *ListNode
*/
//此题和143题ReorderList思路基本一致
func isPalindrome234(head *ListNode) bool {
if head == nil l1 head.Next == nil {
return true
res := true
//寻找中间结点
p1 := head
p2 := head
for p2.Next != nil && p2.Next.Next != nil {
pl = pl.Next
p2 = p2.Next.Next
//反转链表后半部分
1->2->3=>4=>5->6 t0 1->2->3->6->5=>4
preMiddle := pl
preCurrent := pl.Next
for preCurrent.Next != nil {
current := preCurrent.Next
preCurrent.Next = current.Next
current.Next = preMiddle.Next
preMiddle.Next = current
//扫描表，判断是否是回文
pl = head
---
## Page 384
p2 = preMiddle.Next
// fmt.Printf("pl = %v p2 = %v preMiddle = %v head = %v\n", pl.val, p2.val,
premiddle.Val, L2ss(head))
for pl != preMiddle {
// fmt.Printf("☆☆**pl = %v p2 = %v preMiddle = %v head = %v\n"， pl，p2,
preMiddle, L2ss(head))
if p1.val == p2.val {
pl = pl.Next
p2 = p2.Next
// fmt.Printf("
p1
=%v p2 =%v preMiddle = %v head = %v\n"， pl,
p2, preMiddle, L2ss(head))
}else{
res = false
break
F
if pl == preMiddle {
if p2 != nil && pl.val != p2.val {
return false
return res
// L2ss define
func L2ss(head *ListNode) []int {
res = []int{}]
for head != nil {
res = append(res, head.val)
head = head.Next
return res
235.LowestCommonAncestorofaBinarySearch
Iree
题目
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in
the BST.
---
## Page 385
According to the definition of LCA on Wikipedlia: *The lowest common ancestor is defined
between two nodes p and q as the lowest node in T that has both p and q as descendants (where
we allow a node to be a descendant of itself).*
Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5]
Example 1:
Input: root = [6,2,8,0,4,7,9,nu11,nu11,3,5], p = 2, q = 8
Output:6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:
Input: root = [6,2,8,0,4,7,9,nu11,nu11,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant
of itself according to the LCA definition.
Note:
● All of the nodes' values will be unique.
● p and q are different and both values will exist in the BST.
题目大意
给定一个二叉搜索树，找到该树中两个指定节点的最近公共祖先。
百度百科中最近公共祖先的定义为：“对于有根树T的两个结点p、9，最近公共祖先表示为一个结点
x，满足×是p、q的祖先且×的深度尽可能大（一个节点也可以是它自己的祖先）。
解题思路
·在二叉搜索树中求两个节点的最近公共祖先，由于二叉搜索树的特殊性质，所以找任意两个节点的
最近公共祖先非常简单。
---
## Page 386
代码
package leetcode
☆
Definition for TreeNode.
type TreeNode struct {
valint
Left *ListNode
Right *ListNode
*/
func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
if p == nil 11 q == nil 11 root == nil {
return ni1
if p.val  root.val && q.val > root.val {
return lowestCommonAncestor(root.Right，p,q)
return root
236.LowestCommonAncestorofaBinaryTree
题目
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the dlefinition_of LCA on_Wikipedlia: *The lowest common ancestor is dlefined
between two nodes p and q as the lowest node in T that has both p and q as dlescendants (where
we allow a node to be a descendant of itself)."
Given the following binary tree: root = [3,5,1,6,2,0,8,null,null,7,4]
---
## Page 387
Example 1:
Input: root = [3,5,1,6,2,0,8,nu11,nu11,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:
Input: root = [3,5,1,6,2,0,8,nu11,nu11,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant