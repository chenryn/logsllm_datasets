For defenses targeting the human layer, we divide solutions
into those that impact the capabilities of human stakeholders,
mechanisms that operate on the device (such as encryption and
authentication), and auditing mechanisms either on the host or
the device itself.
1) Security Training: Perhaps the most difﬁcult challenge
to USB-based attacks is mitigating attempts to “hack the
human.” A necessary ﬁrst step to prevent peripheral attacks
in security-sensitive organizations is extensive and frequent
security training. In 2012, NIST set out standards for using
portable devices including USB [131], and these standards
are also making their way into many organizations’ security
education programs. Increasingly, employees are made aware
of the dangers of social engineering [7]. After security training
sessions, lessons are commonly reinforced through mounting
informational security posters around the workplace that warn
of social engineering tactics, e.g., [29]. Still, in a survey done
by CompTIA, 45% of employees have received no corporate
security training whatsoever [34]. To make matters worse,
empirical evaluation has shown that security training is not
a panacea for security illiteracy [70], [105], and anecdotal
evidence indicates that skilled social engineers are capable of
assuaging the reservations of their targets even after security
training [42].
these devices prevent
2) On-Device Data Encryption: Encrypted USB devices
(e.g., IronKey [59] and Kanguru [66]) provide data conﬁden-
tiality through on-device encryption and user authentication,
and employ tamper-resistant hardware to prevent physical
extraction of data or keys. By encrypting data stored on
removable media,
the loss of data
through physical theft of the device. While relatively costly in
comparison to standard USB storage devices, these have seen
considerable industry adoption, at the price of complicated
device enrolling and key management processes. Even when
encrypted, however, on-device encryption can not prevent
data loss due to insider attacks. Diwan et al. [40] achieve
functionally equivalent properties to on-device encryption by
instrumenting the Windows USB subsystem to perform on-the-
ﬂy encryption of outbound I/O request packets. This approach
requires invasive modiﬁcations to the host operating system
and lacks the portability of secure ﬂash drives, but can prevent
data exﬁltration via USB as hosts outside of the organizational
boundary will be unable to read the device.
3) On-Device Host Authentication: In response to emerging
peripheral attack vectors, recent proposals have sought to bind
device functionality to particular machines rather than speciﬁc
users. The Kells system [25] extends USB enumeration to
support host identiﬁcation via trusted hardware. Kells assumes
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
1037
6
the presence of a TPM on the host as well as a custom TPM
daemon, and introduces a custom smart USB device. Follow-
ing the end of standard enumeration, a full TPM attestation
is performed over the USB interface using Acceptance Device
Speciﬁc Command (ADSC). If the device successfully veriﬁes
the host TPM’s quote result then all partitions are mounted,
otherwise only a public partition is mounted. This approach to
host identiﬁcation is also used in the ProvUSB system [117].
Host-identifying smart devices can therefore prevent data loss
due to both device theft and insider attacks, as in either case
the attacker will be unable to access the data partition on an
unauthorized host. However, these systems require a number
of extensions to the standard connectivity model including
modiﬁcations to both the host and the device, trusted hardware,
and a security policy for whitelisting host access.1
4) Host- or Device-Based Auditing: In the absence of a
foolproof method for securing the human layer, a viable alter-
native is auditing peripheral usage. Auditing provides system
administrators an opportunity to reason about how peripherals
are being used within the organization, e.g., allowing them to
monitor the ﬂow of data via ﬂash storage drives in much the
same way that network monitoring software grants the ability
to track data entering and exiting the organization over the In-
ternet. Techniques have been demonstrated to recover evidence
of portable media usage from the host in spite of the anti-
forensic properties of USB ﬂash drives [22], [74], although
these approaches are susceptible to false evidence presented
by malicious peripherals [97]. Extending the host operating
system with provenance-based auditing capabilities [17], [64]
has been shown to be useful when attempting to identify the
root cause of data exﬁltration attacks. By recording when data
is written to a storage device, data provenance can narrow
the list of suspects if sensitive data is discovered in a public
forum. The ProvUSB system permits ﬁne-grained audit data
to be collected on board [117].
5) Physically Disabling of Functionality: One extreme way
of defenses is to prevent users from using USB devices by
physically disabling USB ports. When the USB functionality
is implemented as an extended PCI card, admins can remove
the card from the motherboard. For USB ports within the
motherboard, IT managers can glue them [83]. A less brutal
solution is USB condom [58], which sits between a host
machine and a USB device. It shuts down all USB data trafﬁc,
and only provides basic charging functionality. Note that we
will not include these defenses in our further discussion, since
they break the basic usage for USB.
B. Defense of Application Layer
Defenses targeting attacks at the application layer focus
primarily on the host, and include modiﬁcations to the OS
and its drivers.
1 From the device side, TCG also proposed to embed TPMs inside periph-
erals [78], such as leveraging TPM to implement trusted SCSI commands
for storage devices. OPAL [114] ﬁnalized how a storage device provide
authorization and data encryption by leveraging the trusted platform from
within the target system. Note that OPAL does not require a TPM inside the
storage device.
1) System Hardening: Host systems can be hardened
through enabling safer default behaviors. Pham et al. [92]
inspect Windows OS families and reconﬁgure the system to
disable auto-run-like functionality and block the execution of
unsigned executables or drivers carried on portable media.
Antivirus software can also be used to prevent application
layer attacks over USB storage. Composite anti-virus sys-
tems such as Metascan [88] and OLEA [86] not only offer
standard malware scans for host machines, but also sell
scanning kiosks in which sacriﬁcial VMs are used to ensure
containment of any malware. These kiosks are commonly
deployed near the entrances of security-sensitive organizations
to prevent infected peripherals from entering the facility. The
Windows Embedded platform [80], TMSUI [133] and USB
Unix Smart Blocker [40] attempt to mediate USB connectivity
for Windows CE, Industrial Control and GNU/Linux Systems
respectively, but all base their device recognition mechanism
on potentially unreliable information reported by the device
during enumeration. USBFILTER [116] instruments the upper
layers of the USB stack, modifying device drivers in order to
identify the processes interactive with the device. USBFILTER
can thereby pin devices to speciﬁc process ID’s, creating
a novel defense against application-layer attacks in which
malware eavesdrops on USB device trafﬁc to obtain sensitive
information (e.g., keystrokes, webcam images).
2) Driver-Based Access Controls: Treating USB drivers as
“capabilities”, GoodUSB [116] attempts to constrain malicious
peripherals through incorporating elements of user-driven ac-
cess control [98] for driver loading. Prior to the completion of
enumeration, GoodUSB reports the device’s claimed identity
to the user via a pop-up notiﬁcation. Based on the user’s
expectations of device functionality, GoodUSB then permits
all or some of the requested driver’s to be loaded on behalf
of the device; for example, when the user expects a peripheral
to be a ﬂash drive, the peripheral will not be able to request
the Human Interface Device driver during enumeration. Be-
cause authorization is based on requested behaviors instead
of reported identity, GoodUSB cannot be circumvented by a
malicious device, thus defeating BadUSB attacks. However, it
cannot prevent peripherals from making malicious use of their
natural drivers (e.g., a malicious keyboard injects keystrokes).
3) Device-Emulating Honeypots: Various strains of ad-
vanced malware are now known to attempt to propagate to
and from hosts and storage devices. Frequently, the malware
will wait for a peripheral connection and then attempt to
propagate to the other end of the connection shortly thereafter.
As a result, honeypots have been demonstrated to be an
effective means of detecting the presence of an infection. Host-
emulating honeypots such as Ghost can detect the propagation
of malicious USB storage payloads [93], by emulating a
storage device that periodically connects to potentially infected
machines. If the host initiates any ﬁle I/O with the emulated
device,
this is likely evidence of malicious activity, since
under benign circumstances the host will not interact with the
dummy device after SCSI scanning.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
1038
7
Layer
Human Layer
Application Layer
Transport Layer
Physical Layer
Defensive Primitive
Security Education
On-Device Data Encryption
On-Device Host Authentication
Host- or Device-Based Auditing
System Hardening
Device-Emulating Honeypots
Driver-Based Access Controls
Firmware Veriﬁcation
USB Stack Fuzzing
USB Packet Firewall
Host-Emulating Honeypots
Anti Fingerprinting
Secure Channel
Defense
NIST Standards [131], Education Materials [7]
IronKey [59], Kanguru [66]
Kells [25], ProvUSB [117]
System Provenance [17], Transient Provenance [64], ProvUSB [117]
Disabling Autorun [92], Metascan [88], OLEA [86], WindowsCE [80], TMSUI [133], Smart Blocker [40], USBFILTER [118]
Ghost [93]
GoodUSB [116]
IronKey [57], FirmUSB [52], VIPER [73]
USB Fuzzing [81], [128], Hardware-based Fuzzing [61], vUSBf [102], Syzkaller [48], POTUS [90]
USBFILTER [118], USBFirewall [62]
GoodUSB [116], Cinch [12]
USB Host Fingerprinting [16]
Cinch [12], UscramBle [82]
Table II: Proposed defenses for the peripheral ecosystem, grouped by the layer at which they defend and the primitive of which
they are an instance. Note that many solutions employ multiple defensive primitives.
C. Defense of Transport Layer
Defenses against attacks in the transport layer are broken
down by ﬁrmware veriﬁcation, USB stack fuzzing, USB
packet ﬁrewall, and host-emulating honeypots.
1) Firmware Veriﬁcation: Secure USB devices such as
IronKey purport to prevent BadUSB attacks [57] by using
signed ﬁrmware, provided that
the device manufacturer is
trusted and the signing key is kept safe. While signed ﬁrmware
is a sound practice, the introduction of a trusted third party
expands the attack surface of the system. When the device
ﬁrmware is accessible, e.g., via Device Firmware Update
(DFU), FirmUSB [52] applies symbolic execution to ﬁnd
hidden and malicious functionalities inside the ﬁrmware. How-
ever, ﬁrmware is often not available, even in binary format. In
attestation-based approaches, the host veriﬁes the correctness
of device ﬁrmware by establishing tight timing bounds on
its response to a series of challenges. VIPER [73] presents
a software-based timed challenge-response protocol for veri-
fying peripheral ﬁrmware over the system bus that precludes
the possibility of proxy attacks by leveraging the asymmetry of
the latencies from CPU-to-peripheral and from peripheral-to-
proxy. In spite of the known difﬁculty of performing software-
based attestation on embedded devices [26], this approach
requires manufacturer support since the device ﬁrmware needs
to support the attestation.
2) USB Stack Fuzzing: USB fuzzing has long been incorpo-
rated into security consultants’ threat assessments [81], [128].
Jodiet et al. present a mutation-based USB fuzzing approach
that is conducted on hardware using a PCI evaluation board
and the Linux USB Gadget API [61]. Schumilo et al. present
a QEMU-based, parallizable virtual USB fuzzer (vUSBf) that
makes use of USB redirection to inject arbitrary noise into dif-
ferent GetDescriptor requests [102]. Leveraging KCOV
feature within the Linux kernel and QEMU, Syzkaller [48]
is a coverage-guided syscall fuzzer that has found bugs in
the USB subsystem. POTUS [90] combines fault injection,
fuzzing, and symbolic execution to detect bugs in USB kernel
drivers. While fuzzing can improve the code quality and raise
the bar for attackers, it cannot defend against attacks abusing
the USB protocol itself, such as BadUSB attacks.
3) USB Packet Firewall: As network ﬁrewalls are a pow-
erful primitive for minimizing the potential actions of would-
be attackers on the Internet, ﬁrewall-driven protocol access
controls for USB peripherals intuitively provide similar pro-
tections. Tian et al. present USBFILTER/usbtables [118], a
netﬁlter/iptables-like stack for ﬁltering USB trafﬁc. Where
iptables enforces rules by pattern matching over IP addresses
and port numbers, usbtables can pattern matches USB buses
and ports, among other ﬁelds; these correspond to physical
locations on the host machine that cannot be spoofed by
a malicious peripheral. USBFILTER can then apply rules
that constrain permissible protocol activities in much the
same way as GoodUSB. USBFirewall [62] is another USB
packet ﬁrewall implementation upon FreeBSD. Unlike US-
BFILTER, USBFirewall focuses on protecting the host USB
stack by detecting malformed USB packets, e.g., generated by
FaceDancer, based on a formal model of the protocol syntax.
4) Host-Emulating Honeypots: In contrast with device hon-
eypots, which can only detect malware propagating from
a host to portable storage, emulating the host machine al-
lows detection of malicious peripheral activity at both the
application and transport
layers. To examine a suspicious
device, GoodUSB [116] redirects it to a QEMU-KVM virtual
machine using USB pass-through. The VM completes the
USB enumeration and then monitors the device for evidence
of malicious activity. The Cinch system [12] also leverages
virtualization to decrease the host’s attack surface – the host
operating system is hoisted into a VM to isolate it from the
USB host controller, and then all USB trafﬁc is tunneled
via IOMMU through a sacriﬁcial gateway VM. Within the
sacriﬁcial VM, a variety of the application and transport layer
defense techniques can be deployed including signature-based
antivirus, protocol compliance, and user-driven access control.
While host honeypots are able to detect both application
and transport layer attacks, the VM dependency and device
operation interruption make them impractical for normal users.
D. Defense of Physical Layer
Solutions for physical
layer attacks have received only
limited consideration within the literature. Defenses against
physical layer attacks consider anti-ﬁngerprinting as well as
implementing conﬁdential communication over the USB bus.
1) Anti-Fingerprinting: The most straightforward way to
mitigate inferences from ﬁngerprinting attacks is to further
randomize the USB stack behavior in hardware and soft-
ware. A technique for defeating message-based ﬁngerprinting
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:33:49 UTC from IEEE Xplore.  Restrictions apply. 
1039
8
demonstrated in [16] introduces additional GetDescriptor
requests to confuse the attacker; generalized,