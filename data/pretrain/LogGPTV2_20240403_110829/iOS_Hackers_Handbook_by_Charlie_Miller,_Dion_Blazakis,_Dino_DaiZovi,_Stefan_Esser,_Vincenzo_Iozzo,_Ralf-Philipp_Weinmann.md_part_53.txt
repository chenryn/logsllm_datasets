iOS calling convention, 220–221
L
kernel stack buffer overfl ows, 283
Lamie, Edwards C., 337
paniclog, 252
Lamie, William, 337
LTE (Long Term Evolution), 328
LAPDm, 330
large object allocation and deallocation, M
201 M2Crypto, 57
large regions, 188 MAC (Mandatory Access Control)
launchd, 133 AMFI binary trust cache, 319–320
LC_CODE_SIGNATURE, 80–81 defi ned, 70
ldid kernel patching, 312–313
iPhone Data Protection Tools sandboxing, 108
prerequisites, 55 TrustedBSD. see TrustedBSD
listing entitlements, 79 understanding, 70–73
libdyld The Mac Hackers Handbook (Zovi and
dyld location, 96–97 Miller), 188, 191
function pointers, 98 Mac OS X
libkern, 257 allocator, 188
libMatch, 132 compile, 119
libmich, 357 detecting kernel heap state, 293–294
libmis, 77 fuzzing Safari, 144
libraries iPhone Data Protection Tools
altering iOS shellcode, 96–101 prerequisites, 55
fuzzing with simulator, 157 kernel debugging, 255
installing base utilities, 306 PDF fuzzing, 149–152
libsandbox.dylib, 108–109 Profi le Manager, 37
SMS iOS injection, 176 sandboxing, 109–110
testing ROP payloads, 235 testing infrastructure, 217–218
user space library implementation, tools for debugging heap manipulation
117–121 code, 204–206
bbiinnddeexx..iinndddd 337799 44//1166//22001122 55::4400::5588 PPMM
380 Index n M–M
understanding security threats, 5 overview, 26–27
MAC_CHECK, 72–73 warning screen, 43
mac_policy_ops, 123, 125 memory
mac_policy.h, 121–123 arbitrary memory overwrite, 269–274
mac_proc_enforce, 319–320 exploiting object lifetime issues, 198
mac_roman_to_unicode(), 279–280 kernel heap zone allocator, 292–293
mac_syscall regions, 188
handling confi guration from user space, memory corruption
123–124 cellular stack, 346–347
sandboxing, 108 fi nding with fuzzing, 140
user space library implementation, 119, local vulnerabilities, 327
121 SMS bugs, 183
MacFUSE, 56 static analysis of binary code, 347
mach, 250 memory protections. see code signing and
Mach RPC, 84 memory protections
Mach server, 108–109 memory sections, 338
mach trap memsection_create(), 338
defi ned, 293–294 Mercurial, 58
task_for_pid, 320–321 messages. see SMS (Short Message Service)
mach_trap_table, 320–321 metaclass, 259
mag_last_free, 189 metaclasses, 257–261
magazine malloc, 188. see also iOS system Metasploit framework, 101
allocator meterpeter, 101–103
Mail, 68 Method, 142–143
mailboxes, 337 methods, external, 266–268
malformed data, 140 methodtable, 259
Malik, Pavel, 104 Miller, Charlie
_MALLOC(), 288. see also iOS system desktop fuzzing, 149–150
allocator gaining App Store approval, 103–104
MallocPreScribble, 191 iOS system allocator, 188
MallocScribble, 191 kernel patching, 317
MallocStackLogging, 191 SMS bugs, 182
malware SMS iOS injection, 175
iOS 1 and, 10 SMS message attacks, 10
protecting App Store, 3 understanding application signing, 78
understanding threats, 3–5 min_alloc, 339
Mandatory Access Control (MAC). see MM (Mobility Management), 330, 356
MAC (Mandatory Access Control) mmap
Mandatory Code-Signing, 3, 69–70. see also allocation, 189
code signing and memory protections altering iOS shellcode, 100
manually constructing ROP payload, breaking code signing, 95
225–230 dynamic code signing, 91
MAP_JIT exfi ltrate fi le content payload, 236
breaking code signing, 95 how kernel handles JIT, 91–94
how kernel handles JIT, 92–94 uninitialized kernel variables, 278
math, 171–172 vm_map_enter, 316–317
MDM (Mobile Device Management) mobile
Lion Server Profi le Manager. see Profi le fuzzing MobileSafari, 158
Manager privilege separation, 6
MDM network communication, 27–28 userland jailbreaks, 301
mobile confi guration profi les, 16 mobile confi guration profi les, 16–17
bbiinnddeexx..iinndddd 338800 44//1166//22001122 55::4400::5588 PPMM
Index n M–O 381
Mobile Device Management (MDM). see kernel Heap Feng Shui, 291–293
MDM (Mobile Device Management) ndrv_setspec(), 285
Mobile Station Modem (MSM), 337–338 nemo, 311
Mobile Station (MS), 329–330 net_add_proto(), 262
MobileKeyBag, 52 NetDriver (ndrv) protocol, 263
MobileMail, 133, 136 network lock
MobileSafari defi ned, 327
attacking inside, 94 ultrasn0w unlock, 350–356
desktop fuzzing and, 149–150 networks
dynamic code signing, 89–91 communication, 27–28
enrolling devices in Profi le Manager, network layer, 346–347
38–39 SMS, 163
fuzzing, 158–160 new, 263–264
fuzzing Safari, 144 nibble, 166
fuzzing with simulator, 156 Nitro, 202–204
how sandboxing impact platform apps, NMI (nonmaskable interrupt), 253
133 node-Spray(), 214
Pwn2Own 2010, 13, 213–217 nodev, 304
Quick Look fuzzing, 153–154 nointernet, 111
ROP on, 232 noir, 311
submitting test cases, 143 nonmaskable interrupt (NMI), 253
vm_map_enter and, 317 nosuid, 304
Mobility Management (MM), 330, 356 NSFileProtectionKey, 49–50
modem heap, 341–342 NSFileProtectionNone, 67–68
monitoring nsysent, 272–273
fuzzing MobileSafari, 158–160 NU_Create_Memory_Pool(), 338–339
fuzzing Safari, 145–148 NU_Deallocate_Memory(blk), 339–340
fuzzing test cases, 143–144 Nucleus PLUS
SMS fuzzing, 177–181 dynamic memory, 338–340
.mov fi les, 6 overview, 336–337
mpo_policy_syscall, 124 numeric passcodes, 54–55
mprotect(), 318–319
O
MS (Mobile Station), 329–330
MSM (Mobile Station Modem), 337–338 Oberheide, Jon, 104
Mulliner, Collin object lifetime issues
iOS injection, 175–176 bug classes, 186–188
SMS bugs, 182 exploiting system allocator, 198–200
SMS message attacks, 10 exploiting TCMalloc, 211
multiplexing, 345 object tree, IOKit drivers, 257–261
mutation-based fuzzing object type confusion, 264
defi ned, 141–142 OKL4, 337–338
fuzzing Safari, 144–145 op_table, 127
open
My Devices, 38–44
myDyldSection, 96–97 fuzzing Safari, 147
replacement in MobileSafari, 158, 160
N SMS iOS injection, 176
name, 339 Open Directory
navigating Profi le Manager, 35–36 creating master, 30
ndrv (NetDriver) protocol, 263 Profi le Manager, 28–29
ndrv vulnerability Profi le Manager login page, 40
exploiting, 294–295 OpenBSC, 331
bbiinnddeexx..iinndddd 338811 44//1166//22001122 55::4400::5588 PPMM
382 Index n O–P
OpenBTS confi guration profi le, 17
exploitation, 358 creating confi guration profi le, 18–20
setting up, 331–335 exfi ltrate fi le content, 235–242
OSMetaClass, 258–259 manually constructing ROP, 225–230
OSXFuse, 56 Profi le Manager settings, 37–38
output, fuzzer, 174–175 redsn0w, 61
ovbcopy(), 270 testing ROP, 232–235
overfl ow vulnerabilities, 187–188. see also using meterpeter on iOS, 101–103
buffer overfl ows writing shellcode, 96
overload_tbl, 275–276 PBKDF2 algorithm, 51
overwrite PC (program counter)
arbitrary memory overwrite, 269–274 ARM basics, 220
uninitialized kernel variables, 278 kernel stack buffer overfl ows, 283
pcb, 339
P
PDF (Portable Document Format)
Pageheap
fuzzing, 148–153
large object allocation and deallocation,
fuzzing Safari, 144–145
201
JailBreakMe v3, 242
TCMalloc and, 200
reduced attack surface and, 6
paniclog
PDU (Protocol Data Unit)
arbitrary memory overwrite, 274
converting fuzzer, 175
kernel debugging, 251–252
fuzzing focusing on PDU mode,
parameters
165–166
attacking IOKit drivers through external
fuzzing using PDUspy, 167
traps and methods, 266–268
generation-based fuzzing, 172
clearing the cache, 324
PE_i_can_has_debugger, 315–316
handling confi guration from user space,
permissions
124
how iOS ensures no changes are made to
JailBreakMe v3, 245
signed pages, 88–89
OSMetaClass, 258
privilege separation, 6
sandboxing initialization, 113
sandboxing, 8
parse_callback, 213
SpyPhone and, 12–13
partition memory, 336
persistent jailbreaking, 298–299
partitions, fi lesystem, 303–304
pf_rm_rule(), 275–276
passcodes
Photoshop (.psd) fi les, 6
attacking user, 51–55
ping, 110
brute-force attacks, 62–63
pipes, 337
confi guration profi le installation, 22–24
platform apps, 133–137
creating confi guration profi le, 18–20
plist
data protection, 48
defi ned, 16
data protection key hierarchy, 49
installing base utilities, 306
Profi le Manager settings, 37–38
linking to redsn0w, 59
password fuzzing, 177
provisioning profi les, 74
patches
redsn0w, 59
altering iOS shellcode, 98–101
pod2g, 279
kernel. see kernel patching
policies
patching vulnerability into kernel,
implementing TrustedBSD, 121–123
270–271
sandboxing, 125–126
payloads
understanding sandboxing, 108–109
ARM calling convention, 221
Portable Document Format (PDF). see PDF
attacking inside MobileSafari, 94
(Portable Document Format)
automated ROP construction, 230–232
bbiinnddeexx..iinndddd 338822 44//1166//22001122 55::4400::5588 PPMM
Index n P–R 383
PPT (PowerPoint) public key authentication, 177–178
fuzzing fun, 160–162 push notifi cations, 27–28
Quick Look fuzzing, 153–154 pwn()
pr_ctloutput, 263 case study: Pwn2Own, 213–217
predictable heap layout, 202–204 uninitialized kernel variables, 276–277
prelinked kernel extensions, 256–257 Pwn2Own
PRIVATE | ANON mappings, 91–94 exfi ltrate fi le content payload, 235
privilege escalation, 310–312 exploitation case study, 213–217
privilege separation, 6 Pwn2Own 2010, 13
proc_enforce, 315 PyCrypto (Python Cryptography Toolkit),
proc_t structure, 310–311 56–57
processors Python
application and baseband, 163 monitoring SMS, 178–179
baseband, 328–329 SMS iOS injection, 176
taming iOS allocator, 190 Python Cryptography Toolkit (PyCrypto),
Profi le Manager 56–57
creating settings, 35–38
Q
enrolling devices, 38–44
overview, 28–29 QEMU emulator, 344
setting up, 29–35 qlmanage, 154
profi les, confi guration Qualcomm
iPhone Confi guration Utility, 18–26 CDMA stack, 328
mobile, 16–17 ELF, 345
profi les, provisioning, 74–77 modem heap, 341–342
profi les, sandbox REX, 337
how bytecode works, 126–133 Qualcomm MSM Interface (QMI), 343
how sandboxing impacts App Store vs. quanta, 188
platform apps, 133–137 queues, 337
sandboxing apps, 111–112 Quick Look fuzzing, 153–154
testing ROP payloads, 234 QuickTime, 141
understanding sandboxing, 110–111
R
program counter (PC)
Radio Resource Management (RR), 330
ARM basics, 220
ramdisk
kernel stack buffer overfl ows, 283
booting, 61–62, 303
ProgressBar installation, 57
building, 58–61
properties, 265–266
randnum, 179
protecting data. see data protection
read
protection class, 48–51
altering iOS shellcode, 100
protection domain, 338
ARM conventions, 221–222
Protocol Data Unit (PDU). see PDU
SMS iOS injection, 176
(Protocol Data Unit)
read_and_exec, 234
protocol identifi er (TP-PID), 166
read_next_byte, 183
protocols
readable, writeable, and executable (RWX)
generation-based fuzzing, 142–143