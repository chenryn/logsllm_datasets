clauses  to  describe  assumptions  about  buffers  that  are 
passed  to  functions  and  constrain  the  state  of  buffers 
when  functions  return.    For  the  analyses  described  in 
2 The original Larch C interface language LCL [GH93], on 
which  LCLint’s  annotation  language  was  based,  did 
include  a  notion  of  general  preconditions  and  post-
conditions specified by requires and ensures clauses. 
the 
since 
this  paper,  four  kinds  of  assumptions  and  constraints 
are used: minSet, maxSet, minRead and maxRead.3  
When used in a requires clause, the minSet and maxSet 
annotations describe assumptions about the lowest and 
highest indices of a buffer that may be safely used as an 
lvalue  (e.g.,  on  the  left-hand  side  of  an  assignment).  
For  example,  consider  a  function  with  an  array 
parameter  a and an integer parameter  i that has a pre-
condition  requires  maxSet(a)  >=  i.    The  analysis 
assumes  that  at  the  beginning  of  the  function  body, 
a[i] may be used as an lvalue.  If  a[i+1] were used 
before any modifications to the value of a or i, LCLint 
would  generate  a  warning 
function 
preconditions  are  not  sufficient  to  guarantee  that 
a[i+1]  can  be  used  safely  as  an  lvalue.    Arrays in C 
start with index 0, so the declaration  
         char buf[MAXSIZE]  
generates the constraints  
         maxSet(buf) = MAXSIZE – 1 and  
         minSet(buf) = 0. 
Similarly, 
the  minRead  and  maxRead  constraints 
indicate the minimum and maximum indices of a buffer 
that may be read safely.  The value of maxRead for a 
given buffer is always less than or equal to the value of 
maxSet.  In cases where there are elements of the buffer 
have  not  yet  been  initialized,  the  value  of  maxRead 
may be lower than the value of maxSet. 
At  a  call  site,  LCLint  checks  that  the  preconditions 
implied by the requires clause of the called function are 
satisfied  before  the  call.    Hence,  for  the  requires 
maxSet(a) >= i example, it would issue a warning if it 
cannot determine that the array passed as a is allocated 
to hold at least as many elements as the value passed as 
i.  If minSet or maxSet is used in an ensures clause, it 
indicates the state of a buffer after the function returns.  
Checking  at  the  call  site  proceeds  by  assuming  the 
postconditions are true after the call returns.   
For  checking,  we  use  an  annotated  version  of  the 
standard  library  headers.    For  example,  the  function 
strcpy is annotated as4:  
3 LCLint also supports a nullterminated annotation that 
denotes storage that is terminated by the null character.  Many 
C library functions require null-terminated strings, and can 
produce buffer overflow vulnerabilities if they are passed a 
string that is not properly null-terminated.  We do not cover 
the nullterminated annotation and related checking in this 
paper.  For information on it, see [LHSS00]. 
4 The standard library specification of strcpy also includes 
other LCLint annotations: a modifies clause that indicates that 
the only thing that may be modified by strcpy is the storage 
referenced by s1, an out annotation on s1 to indicate that it 
char *strcpy (char *s1, const char *s2)
/*@requires maxSet(s1) >= maxRead(s2)@*/
/*@ensures maxRead(s1) == maxRead(s2)
/\ result == s1@*/;
The  requires  clause  specifies  the  precondition  that  the 
buffer  s1  is  allocated  to  hold  at  least  as  many  char-
acters  as  are  readable  in  the  buffer  s2  (that  is,  the 
number  of  characters  up  to  and  including  its  null 
terminator).  The postcondition reflects the behavior of 
strcpy – it copies the string pointed to by s2 into the 
buffer  s1, and returns that buffer.  In ensures clauses, 
we use the result keyword to denote the value returned 
by the function. 
library 
Many  buffer  overflows  result  from  using 
functions  such  as  strcpy  in  unsafe  ways. 
  By 
annotating  the  standard  library,  many  buffer  overflow 
vulnerabilities can be detected even before adding any 
annotations  to  the  target  program.    Selected  annotated 
standard library functions are shown in Appendix A.    
4.  Experience 
In order to test our approach, we used our tool on wu-
ftpd,  a  popular  open  source  ftp  server,  and  BIND 
(Berkeley  Internet  Name  Domain),  a  set  of  domain 
name tools and libraries that is considered the reference 
implementation  of  DNS.    This  section  describes  the 
process  of  running  LCLint  on  these  applications,  and 
illustrates  how  our  checking  detected  both  known  and 
unknown buffer overflow vulnerabilities in each  appli-
cation. 
4.1 wu-ftpd 
We analyzed wu-ftp-2.5.05, a version with known secur-
ity vulnerabilities.   
Running LCLint is similar to running a compiler.  It is 
typically  run  from  the  command  line  by  listing  the 
need not point to defined storage when strcpy is called, a 
unique annotation on s1 to indicate that it may not alias the 
same storage as s2, and a returned annotation on s1 to 
indicate that the returned pointer references the same storage 
as s1.  For clarity, the examples in this paper show only the 
annotations directly relevant to detecting buffer overflow 
vulnerabilities.  For more information on other LCLint 
annotations, see [Evans96, Evans00c]. 
5 The source code for wu-ftpd is available from 
http://www.wu-ftpd.org.  We analyzed the version in 
ftp://ftp.wu-ftpd.org/pub/wu-ftpd-attic/wu-ftpd-2.5.0.tar.gz.    
We configured wu-ftpd using the default configuration for 
FreeBSD systems.  Since LCLint performs most of its 
analyses on code that has been pre-processed, our analysis did 
not examine platform-specific code in wu-ftpd for platforms 
other than FreeBSD. 
source  code  files  to  check,  along  with  flags  that  set 
checking  parameters  and  control  which  classes  of 
warnings  are  reported.    It  takes  just  over  a  minute  for 
LCLint to analyze all 17 000 lines of wu-ftpd.  Running 
LCLint  on  the  entire  unmodified  source  code  for  wu-
ftpd  without  adding  any  annotations  resulted  in  243 
warnings related to buffer overflow checking. 
Consider a representative message6: 
ftpd.c:1112:2: Possible out-of-bounds store.  Unable to  
   resolve constraint:  
      maxRead ((entry->arg[0] @ ftpd.c:1112:23)) = maxRead ((entry->arg[0] @ ftpd.c:1112:23)) 
   derived from strcpy precondition: 
      requires maxSet () >= maxRead ()  
Relevant  code  fragments  are  shown  below  with  line 
1112 in bold:   
char
…
extern struct aclmember *
getaclentry(char *keyword,
ls_short[1024];
struct aclmember **next);
…
int main(int argc, char **argv,
char **envp)
{
…
entry = (struct aclmember *) NULL;
if (getaclentry("ls_short", &entry)
&& entry->arg[0]
&& (int)strlen(entry->arg[0]) > 0)
{
strcpy(ls_short,entry->arg[0]);
…
This  code  is  part  of  the  initialization  code  that  reads 
configuration files.  Several buffer overflow vulnerabil-
ities  were  found  in  the  wu-ftpd  initialization  code.  
Although this vulnerability is not likely to be exploited, 
it  can  cause  security  holes  if  an  untrustworthy  user  is 
able to alter configuration files. 
The  warning  message  indicates  that  a  possible  out-of-
bounds  store  was  detected  on  line  1112  and  contains 
information about the constraint LCLint was unable to 
resolve.  The warning results from the function call to 
strcpy.    LCLint  generates  a  precondition  constraint 
corresponding 
clause 
the  strcpy 
to 
requires 
6 For our prototype implementation, we have not yet 
attempted to produce messages that can easily be interpreted 
by typical programmers.  Instead, we generate error messages 
that reveal information useful to the LCLint developers.  
Generating good error messages is a challenging problem; we 
plan to devote more effort to this before publicly releasing our 
tool. 
maxSet(s1)  >=  maxRead(s2) by substituting the actual 
parameters:  
   maxSet (ls_short @ ftpd.c:1112:14)  
    >= maxRead (entry->arg[0] @ ftpd.c:1112:23).   
Note  that  the  locations  of  the  expressions  passed  as 
actual parameters are recorded in the constraint.  Since 
values  of  expressions  may change through the code, it 
is important that constraints identify values at particular 
program points.   
The global variable ls_short was declared as an array 
of 1024 characters.  Hence, LCLint determines maxSet 
(ls_short) is 1023.  After the call to getaclentry, the 
local  entry->arg[0]  points  to  a  string  of  arbitrary 
length read from the configuration file.  Because there 
are  no  annotations  on  the  getaclentry  function, 
LCLint does not assume anything about its behavior.  In 
particular,  the  value  of  maxRead  (entry->arg[0])  is 
unknown.  LCLint  reports  a  possible  buffer  misuse, 
since  the  constraint  derived  from  the  strcpy  requires 
clause  may  not  be  satisfied  if  the  value  of  maxRead 
(entry->arg[0]) is greater than 1023. 
To  fix  this  problem,  we  modified  the  code  to  handle 
these  values  safely  by  using
  Since 
ls_short is a fixed size buffer, a simple change to use 
strncpy  and  store  a  null  character  at  the  end  of  the 
buffer is sufficient to ensure that the code is safe.7   
In other cases, eliminating a vulnerability involved both 
changing  the  code  and  adding  annotations. 
  For 
example,  LCLint  generated  a  warning  for  a  call  to 
strcpy in the function acl_getlimit:  
int acl_getlimit(char *class,
strncpy. 
char *msgpathbuf) {
int limit;
struct aclmember *entry = NULL;
if (msgpathbuf) *msgpathbuf = '\0';
while (getaclentry("limit", &entry)) {
…
if (!strcasecmp(class, entry->arg[0]))
{
…
if (entry->arg[3]
&& msgpathbuf != NULL)
strcpy(msgpathbuf, entry->arg[3]);
…
If the size of msgputhbuf is less than the length of the 
string  in  entry->arg[3],  there  is  a  buffer  overflow.  
To fix this we replaced the strcpy call with a safe call 
to strncpy: 
7 Because strncpy does not guarantee null termination, it is 
necessary to explicitly put a null character at the end of the 
buffer. 
strncpy(msgpathbuf, entry->arg[3], 199);
msgpathbuf[199] = '\0';          
and added a requires clause to the function declaration: 
/*@requires maxSet(msgpathbuf) >= 199@*/
The requires clause documents an assumption (that may 
be  incorrect)  about  the  size  of  the  buffer  passed  to 
acl_getlimit.  Because of the constraints denoted by 
the requires clauses, LCLint does not report a warning 
for the call to strncpy.  
When call sites are checked, LCLint produces a warn-
ing if it is unable to determine that this requires clause 
is  satisfied.    Originally,  we  had  modified  the  function 
acl_getlimit  by  adding  the  precondition  maxSet 
(msgpathbuf) >= 1023.  After adding this precondition, 
LCLint produced a warning for a call site that passed a 
200-byte  buffer  to  acl_getlimit.    Hence,  we  re-
placed  the  requires  clause  with  the  stronger  constraint 
and used 199 as the parameter to strncpy. 
This  vulnerability  was  still  present  in  the  current  ver-
sion  of  wu-ftpd.    We  contacted  the  wu-ftpd  developers 
who  acknowledged  the  bug  but  did  not  consider  it 
security critical since the string in question is read from 
a local file not user input [Luckin01, Lundberg01]. 
In  addition 
the  previously  unreported  buffer 
overflows  in  the  initialization  code,  LCLint  detected  a 
known buffer overflow in wu-ftpd.  The buffer overflow 
occurs  in  the  function  do_elem  shown  below,  which 
passes a global buffer and its parameters to the library 
function strcat.  The function mapping_chdir calls 
do_elem with a value entered by the remote user as its 
parameter.  Because  wu-ftpd fails to perform sufficient 
bounds  checking,  a  remote  user  is  able  to  exploit  this 
vulnerability 
the  buffer  by  carefully 
creating  a  series  of  directories  and  executing  the  cd 
command.8 
char mapped_path [200];
…
void do_elem(char *dir) {
to  overflow 
to 
…
if (!(mapped_path[0] == '/'