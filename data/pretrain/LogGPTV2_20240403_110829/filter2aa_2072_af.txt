Configuration file for a namespace: 
apiVersion: v1 
kind: ResourceQuota 
metadata: 
    name: example-cpu-mem-resourcequota 
spec: 
    hard: 
        requests.cpu: “1” 
        requests.memory: 1Gi 
        limits.cpu: “2” 
        limits.memory: 2Gi 
This ResourceQuota can be applied with:  
kubectl apply -f example-cpu-mem-resourcequota.yaml --
namespace= 
This ResourceQuota places the following constraints on the chosen namespace: 
 Every container must have a memory request, memory limit, CPU request, and 
CPU limit 
 Aggregate memory request for all containers should not exceed 1 GiB 
 Total memory limit for all containers should not exceed 2 GiB 
 Aggregate CPU request for all containers should not exceed 1 CPU 
 Total CPU limit for all containers should not exceed 2 CPUs 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
42 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix H: Example encryption 
To encrypt Secret data at rest, the following encryption configuration file provides an 
example to specify the type of encryption desired and the encryption key. Storing the 
encryption key in the encryption file only slightly improves security. The Secrets will be 
encrypted, but the key will be accessible in the EncryptionConfiguration file. This 
example is based on official Kubernetes documentation: 
https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/. 
apiVersion: apiserver.config.k8s.io/v1 
kind: EncryptionConfiguration 
resources:  
   -  resources: 
      -  secrets 
      providers:  
      -  aescbc: 
            keys: 
            -  name: key1 
               secret:  
      -  identity: {}  
To enable encryption at rest with this encryption file, restart the API server with the --encryption-
provider-config flag set with the location to the configuration file. 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
43 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix I: Example KMS configuration 
To encrypt Secrets with a Key Management Service (KMS) provider plugin, the 
following example encryption configuration YAML file can be used to set the properties 
for the provider. This example is based on official Kubernetes documentation: 
https://kubernetes.io/docs/tasks/administer-cluster/kms-provider/.  
apiVersion: apiserver.config.k8s.io/v1 
kind: EncryptionConfiguration 
resources: 
  -  resources: 
       -  secrets 
     providers: 
       -  kms: 
             name: myKMSPlugin 
             endpoint: unix://tmp/socketfile.sock 
             cachesize: 100 
             timeout: 3s 
       -  identity: {} 
To configure the API server to use the KMS provider, set the --encryption-
provider-config flag with the location of the configuration file and restart the API 
server.  
To switch from a local encryption provider to KMS, add the KMS provider section of the 
EncryptionConfiguration file above the current encryption method, as shown below. 
apiVersion: apiserver.config.k8s.io/v1 
kind: EncryptionConfiguration 
resources: 
  -  resources: 
       -  secrets 
     providers: 
       -  kms: 
             name: myKMSPlugin 
             endpoint: unix://tmp/socketfile.sock 
             cachesize: 100 
             timeout: 3s 
       -  aescbc: 
             keys: 
                -  name: key1 
                   secret:  
Restart the API server and run the command below to re-encrypt all Secrets with the 
KMS provider. 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
44 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
kubectl get secrets --all-namespaces -o json | kubectl replace -f - 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
45 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix J: Example pod-reader RBAC Role 
To create a pod-reader Role, create a YAML file with the following contents: 
apiVersion: rbac.authorization.k8s.io/v1 
kind: Role 
metadata: 
 namespace: your-namespace-name 
 name: pod-reader 
rules: 
-  apiGroups: [“”]   # “” indicates the core API group 
   resources: [“pods”] 
   verbs: [“get”, “watch”, “list”] 
Apply the Role using: 
kubectl apply --f role.yaml 
To create a global-pod-reader ClusterRole: 
apiVersion: rbac.authorization.k8s.io/v1 
kind: ClusterRole 
metadata: default 
 # “namespace” omitted since ClusterRoles are not bound to a 
namespace 
 name: global-pod-reader 
rules: 
-  apiGroups: [“”] # “” indicates the core API group 
   resources: [“pods”] 
   verbs: [“get”, “watch”, “list”] 
Apply the Role using: 
kubectl apply --f clusterrole.yaml 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
46 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix K: Example RBAC RoleBinding and 
ClusterRoleBinding 
To create a RoleBinding, create a YAML file with the following contents: 
apiVersion: rbac.authorization.k8s.io/v1 
# This role binding allows “jane” to read Pods in the “your-
namespace-name”  
# namespace. 
# You need to already have a Role names “pod-reader” in that 
namespace. 
kind: RoleBinding 
metadata: 
    name: read-pods 
    namespace: your-namespace-name 
subjects: 
# You can specify more than one “subject” 
-  kind: User 
   name: jane # “name” is case sensitive 
   apiGroup: rbac.authorization.k8s.io 
roleRef: 
   # “roleRef” specifies the binding to a Role/ClusterRole 
   # kind: Role # this must be a Role or ClusterRole 
 # this must match the name of the Role or ClusterRole you wish to 
bind  
 # to 
   name: pod-reader  
   apiGroup: rbac.authorization.k8s.io 
Apply the RoleBinding using: 
kubectl apply --f rolebinding.yaml 
To create a ClusterRoleBinding, create a YAML file with the following contents: 
apiVersion: rbac.authorization.k8s.io/v1 
# This cluster role binging allows anyone in the “manager” group to 
read  
# Pod information in any namespace. 
kind: ClusterRoleBinding 
metadata: 
    name: global-pod-reader 
subjects: 
# You can specify more than one “subject” 
-  kind: Group 
   name: manager # Name is case sensitive 
   apiGroup: rbac.authorization.k8s.io 
roleRef: 
   # “roleRef” specifies the binding to a Role/ClusterRole 
   kind: ClusterRole # this must be a Role or ClusterRole 
   name: global-pod-reader # this must match the name of the Role or 
ClusterRole you wish to bind to 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
47 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
   apiGroup: rbac.authorization.k8s.io 
Apply the RoleBinding using: 
kubectl apply --f clusterrolebinding.yaml 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
48 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix L: Audit Policy 
The following is an Audit Policy that logs all audit events at the highest level: 
apiVersion: audit.k8s.io/v1  
kind: Policy 
rules: 
    -  level: RequestResponse 
  # This audit policy logs all audit events at the RequestResponse 
level 
This audit policy logs all events at the highest level. If an organization has the resources 
available to store, parse, and examine a large number of logs, then logging all events at 
the highest level is a good way of ensuring that, when an event occurs, all necessary 
contextual information is present in the logs. If resource consumption and availability is 
a concern, then more logging rules can be established to lower the logging level of non-
critical components and routine non-privileged actions, as long as audit requirements for 
the system are being met. An example of how to establish these rules can be found in 
the official Kubernetes documentation: https://kubernetes.io/docs/tasks/debug-
application-cluster/audit/. 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
49 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix M: Example flags with which to submit Audit Policy 
file to kube-apiserver 
In the control plane, open the kube-apiserver.yaml file in a text editor. Editing the 
kube-apiserver configuration requires administrator privileges.  
sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml     
Add the following text to the kube-apiserver.yaml file: 
    --audit-policy-file=/etc/kubernetes/policy/audit-policy.yaml 
    --audit-log-path=/var/log/audit.log 
    --audit-log-maxage=1825 
The audit-policy-file flag should be set with the path to the audit policy, and the 
audit-log-path flag should be set with the desired secure location for the audit logs 
to be written to. Other additional flags exist, such as the audit-log-maxage flag 
shown here, which stipulates the maximum number of days the logs should be kept, 
and flags for specifying the maximum number of audit log files to retain, max log file size 
in megabytes, etc. The only flags necessary to enable logging are the audit-policy-
file and audit-log-path flags. The other flags can be used to configure logging to 
match the organization’s policies.  
If a user’s kube-apiserver is run as a Pod, then it is necessary to mount the volume 
and configure hostPath of the policy and log file locations for audit records to be 
retained. This can be done by adding the following sections to the kube-
apiserver.yaml file as noted in the Kubernetes documentation: 
https://kubernetes.io/docs/tasks/debug-application-cluster/audit/  
volumeMounts: 
 -mountPath: /etc/kubernetes/audit-policy.yaml 
  name: audit 
  readOnly: true 
 -mountPath: /var/log/audit.log 
  name: audit-log 
  readOnly: false 
volumes: 
- hostPath: 
   path: /etc/kubernetes/audit-policy.yaml 
   type: File 
name: audit 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
50 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
 - hostPath: 
   path: /var/log/audit.log 
   type: FileOrCreate 
name: audit-log 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
51 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix N: Webhook configuration  
YAML file example: 
apiVersion: v1  
kind: Config 
preferences: {} 
clusters: 
- 
name: example-cluster 
cluster: 
        server: http://127.0.0.1:8080  
#web endpoint address for the log files to be sent to 
       name: audit-webhook-service 
   users: 
- 
name: example-users 
user: 
        username: example-user 
        password: example-password 
   contexts: 
- 
name: example-context 
context: 
        cluster: example-cluster 
        user: example-user 
   current-context: example-context 
#source: https://dev.bitolog.com/implement-audits-webhook/  
The audit events sent by the webhook are sent as HTTP POST requests with the JSON 
audit events in the request body. The address specified should point to an endpoint 
capable of accepting and parsing these audit events, whether it is a third-party service 
or an in-house configured endpoint. 
Example flags that submit webhook configuration file to kube-apiserver: 
In the control plane edit the kube-apiserver.yaml file  
sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml 
add the following text to the kube-apiserver.yaml file 
--audit-webhook-config-file=/etc/kubernetes/policies/webhook-
policy.yaml 
--audit-webhook-initial-backoff=5 
--audit-webhook-mode=batch 
--audit-webhook-batch-buffer-size=5 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
52 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
The audit-webhook-initial-backoff flag determines how long to wait after an 
initial failed request before retrying. The available webhook modes are batch, 
blocking, and blocking-strict. When using batch mode, it is possible to 
configure the maximum wait, buffer size, and more. The official Kubernetes 
documentation contains more details on the other configuration options: 
https://kubernetes.io/docs/tasks/debug-application-cluster/audit/ and 
https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/