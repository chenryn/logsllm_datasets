title:Instrumenting AUTOSAR for dependability assessment: A guidance
framework
author:Thorsten Piper and
Stefan Winter and
Paul Manns and
Neeraj Suri
Instrumenting AUTOSAR for Dependability
Assessment: A Guidance Framework
Thorsten Piper, Stefan Winter, Paul Manns and Neeraj Suri
Technische Universit¨at Darmstadt, Germany
{piper,sw,manns,suri}@cs.tu-darmstadt.de
Abstract—The AUTOSAR standard guides the development of
component-based automotive software. As automotive software
typically implements safety-critical functions, it needs to fulﬁll
high dependability requirements, and the effort put into the
quality assurance of
these systems is correspondingly high.
Testing, fault injection (FI), and other techniques are employed
for the experimental dependability assessment of these increas-
ingly software-intensive systems. Having ﬂexible and automated
support for instrumentation is key in making these assessment
techniques efﬁcient. However, providing a usable, customizable
and performant instrumentation for AUTOSAR is non-trivial due
to the varied abstractions and high complexity of these systems.
This paper develops a dependability assessment guidance
framework tailored towards AUTOSAR that helps identify the
applicability and effectiveness of instrumentation techniques at
(a) varied levels of software abstraction and granularity, (b) at
varied software access levels - black-box, grey-box, white-box,
and (c) the application of interface wrappers for conducting FI.
interface wrappers;
Keywords-AUTOSAR;
instrumentation;
fault injection; run-time monitoring
I. INTRODUCTION
AUTOSAR (AUTomotive Open System ARchitecture) [9]
is an emerging open industry standard for automotive software
systems. Its development is driven by the need to address
the growing complexity of modern vehicular systems and to
reduce development costs when introducing new software-
based features. AUTOSAR is organized as a layered, mod-
ular architecture, and is based on a component/composition-
centric development process that standardizes the modeling
and naming schemes within the system, including components,
interfaces, data types and runnables. The standard promotes
the integration of white-box and black-box components into
a grey-box system, allowing for the integration and reuse of
intellectual property of different suppliers.
Automobiles are safety-critical systems with increasing soft-
ware based functionality. In order to maintain safety, often
deﬁned as the “absence of catastrophic consequences on the
user(s) and the environment” [4], manufacturers comply to
industry-wide safety standards and functional safety speciﬁca-
tions, such as IEC 61508 [12] and in particular the recently
released ISO 26262 ([13], [5]),
in their design, develop-
ment and production processes for the underlying software.
This covers rigorous software design processes along with
analytical and test techniques at the static software levels.
Moreover, experimental methods for dependability assessment
(e.g. testing, fault injection, error propagation analysis) are
978-1-4673-1625-5/12/$31.00 ©2012 IEEE
employed during development to analyze the system’s behav-
ior before its deployment and to ensure the fault tolerance
of critical components [21]. Similarly, an equally widespread
adoption of experimental security analyses is advisable. It
has repeatedly been shown that current implementations of
automotive software have severe security issues ([14], [20],
[10]), which can also be attributed to insufﬁcient testing.
In practice, instrumentation1 is one way to enable depend-
ability assessment techniques within a system. To make the
assessment efﬁcient, a ﬂexible and automatic instrumentation
of the test system at different
locations and varied levels
of granularity is highly desirable. To systematically address
the aforementioned requirements, we propose an automated
process for the instrumentation of AUTOSAR systems by a
framework, which provides the key features usability, cus-
tomizability and efﬁciency. The implementation of such a
framework for AUTOSAR is hard, mainly due to these factors:
F1) AUTOSAR systems are developed in a model based pro-
cess that introduces a high degree of abstraction between
the model and the implementation. As consequence,
instrumentation at the model level has no access to im-
plementation details (limiting customizability), while in-
strumenting the implementation, i.e., machine generated
code, is a tedious process (limiting usability). Also, due
to the degree of abstraction, elements of the model often
have no singular representation in the implementation.
F2) AUTOSAR systems are composed of white-box and
black-box software components as provided by various
suppliers. A customizable and usable instrumentation
should also be applicable to these systems, to not impact
the overall efﬁciency of instrumentation, for instance,
if an approach requires the re-compilation of the entire
system. To keep the effectiveness and implications on the
overall system composition and performance in mind is
key.
Paper Contributions
Facing these challenges, we aim to develop an instrumen-
tation framework for AUTOSAR systems that is usable, cus-
tomizable and efﬁcient. At the same time, we aim to establish
a guidance framework on how to develop and implement
1Throughout this paper, we use the word instrumentation to express a
modiﬁcation of a program with the intent to enable an interception of data
and control ﬂow for analysis or alteration, aiming to implement the major
dependability-related applications fault injection and monitoring.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:13 UTC from IEEE Xplore.  Restrictions apply. 
a systematic instrumentation schema within the AUTOSAR
environment. The key idea to address factor (F1) is to leverage
collective information from the system model, provided during
the development process in standardized AUTOSAR XML
(ARXML) format, and the system implementation, to drive
the conﬁguration and instrumentation process.
Addressing factor (F2), we develop and advocate an inter-
face wrapper based approach for the instrumentation realiza-
tion. Wrappers are a well established concept [22], that can
be used to intercept inter-component communication. They
are applicable to white-box, grey-box, and black-box com-
ponents, all of which can be present simultaneously within an
AUTOSAR system and are, as such, also explicitly promoted
by the standard. Moreover, wrappers can implement add-on
functionality and thus enable a variety of run-time testing
and analysis methods, such as fault
injection (FI), failure
propagation analysis, and control-/ data-ﬂow monitoring.
Having said that, our approach is the ﬁrst to investigate how
to systematically and automatically instrument a given system.
Our contribution is to provide a guidance framework for
the systematic and automated instrumentation of AUTOSAR
systems that enables:
Usability Instead of requiring the user to instrument code at a
low level, e.g., at the output of code generators, we enable
instrumentation via high-level models. Building models
is an essential abstraction step in the AUTOSAR devel-
opment process to specify modular and interconnected
systems. Such models are widely-used and supported by
AUTOSAR design tools.
Customizability In addition, expert users of the proposed
instrumentation framework are given a highly customiz-
able interface to specify instrumentation locations that
are not part of the model abstraction. We achieve this
by exploiting semantic information of high-level models,
e.g., the logic of generating source code from models.
Furthermore, our customizable framework allows instru-
mentation at different software access levels, e.g., binaries
(black-box) or C code (white-box).
Efﬁciency The proposed framework is also efﬁcient in terms
of user effort, compilation resources, execution time, and
memory consumption. We implement efﬁciency through
adaption of established SW engineering techniques such
as wrappers and XML meta data. We evaluate this
efﬁciency by conducting fault-injection of an anti-lock
braking system, which we implemented with two differ-
ent AUTOSAR design tools to demonstrate efﬁciency and
applicability across multiple vendors.
We structure the paper as follows. We introduce the system
model in Section II and review related work in Section III. In
Section IV we investigate the development of a systematic, au-
tomated process for instrumentation. We evaluate our approach
in Section V and discuss its characteristics and limitations in
Section VI.
Fig. 1. Model of two software components (SW-Cs) communicating via a
sender-receiver interface.
II. THE AUTOSAR DEVELOPMENT PROCESS AND
SYSTEM MODEL
Many techniques for component level dependability assess-
ment (e.g. fault injection) or reliability enhancement (e.g. run-
time monitors), rely on accessing or modifying the actual data
ﬂow between the components ([6],[18]). This section provides
the foundations to understand key aspects of the AUTOSAR
development process/architecture, which is essential to ap-
preciating the difﬁcult challenge of instrumentation and its
effective usage.
AUTOSAR’s focus is to provide the software architecture
for distributed automotive systems. In these systems, elec-
tronic control units (ECUs) constitute nodes that implement
dedicated functionality and that communicate via bus systems
such as CAN, LIN and FlexRay. AUTOSAR systems are
created in a model driven development process, in which the
developer composes the system model typically via a graphical
user interface. This model provides an abstract view on the
system, making no assumptions on the distribution or mapping
of resources in a later development stage. Large parts of the
overall software code base are generated from this model and
only a fraction of the system development is done on the actual
implementation level. This approach provides the developer
great usability and ﬂexibility in terms of evolving system
conﬁguration, as the assignment of resources (i.e., mapping
components to ECUs) and low level implementation become
decoupled processes. On the other hand, this approach also
entails a high degree of abstraction between the model and
the actual implementation.
We use the example model in Figure 1 to introduce some
of the key concepts of AUTOSAR, and to show the ambiguity
of the model concepts in the implementation domain later
on. The top-level element in any AUTOSAR system is a
composition (depicted by the dashed box), which can be
thought of as a container that contains other compositions or
software components (SW-Cs). The standard deﬁnes several
types of SW-Cs, such as application SW-C or sensor-actuator
SW-C, and SW-Cs provide functionality to the system through
runnables, which are timer or event (e.g. message arrival)
triggered functions that are implemented in C or C++. SW-Cs
communicate with each other via standardized port interfaces
(or simply interfaces, in our example Interface AB), which
specify the communication method and provide a link between
components. Interfaces are accessed through ports, serving as
communication endpoints. As such, ports provide access to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:13 UTC from IEEE Xplore.  Restrictions apply. 
Data flowInterface ABABExample CompositionSendportRecvportSW-CSW-CFig. 2. The AUTOSAR layered software architecture [1].
Fig. 3.
implementation level.
Possible data ﬂow paths of two communicating SW-Cs at the
a named point-to-point connection between components that
uses standard communication patterns, such as client-server or
sender-receiver, to exchange data or invoke server operations.
Spotting and identifying points for communication intercep-
tion seems trivial in the model, but becomes non-intuitive in
the implementation mostly due to the high abstraction degree
of the model. In fact, after reviewing the AUTOSAR architec-
ture and the data ﬂow between components within, we show
that, for example, the modeling concept port has no singular
representation within the implementation. It is important to
understand that the view on the system that the model provides
is inherently different from the implementation’s view of
the system. In the model, SW-Cs are directly connected to
each other via their respective ports and port interface. But,
unlike as the model suggests, there is no direct communication
between SW-Cs in the implementation. Instead, each SW-C in-
vokes the API of a runtime environment (RTE), which abstracts
the services/primitives for inter-component communication.
The RTE is a layer of the AUTOSAR software architecture,
as shown in Figure 2. To understand how connections (and
eventually communication) between components in the model
manifest in the implementation, we have to understand further
details of the architecture.
At the implementation level, AUTOSAR is organized as a
layered, modular software architecture in which each layer
provides an abstraction of the underlying layer and a set
of services to the overlying layer. As mentioned, the RTE
implements communication services for the SW-Cs and trans-
parently abstracts from the actual communication medium
or channel. In order to dispatch communication and route
messages, the RTE uses the services provided by the basic
software (BSW) layer, which itself is composed of several sub-
layers and modules, and provides the hardware abstraction.
Recalling the example model of Figure 1,
the commu-
nication between components A and B can result in three
distinct communication paths in the implementation, as shown
in Figure 3. In the case where component A and B reside
on the same ECU (as in the left part of the picture) the
communication can either involve only the RTE or the RTE
and the BSW. In the distributed case, where component A
and B reside on different ECUs,
the communication also
involves a network, such as CAN. The direct communication
between components that the model view suggests, obviously
gets split into several phases within the implementation. To
give an example, the communication process and data ﬂow
for the most simple case of communication is as follows.
In phase one, SW-C A invokes an API call of the RTE to
send a message to SW-C B. The interface handler of the RTE
processes the call and stores the message until delivery. Phase
two starts when SW-C B invokes an API call of the RTE to
read the message. The interface handler of the RTE loads the
stored message and delivers it to SW-C B. So, the message
ﬁrst passes the interface between SW-C A and the RTE, and
then the interface between the RTE and SW-C B. As each of
these interfaces has two communication endpoints, one within
the SW-C and one within the RTE, we have the choice of four
distinct locations to intercept the dataﬂow between component
A and B – for the simplest case.
Another factor that adds to the complexity of the scenario,
is the distributed development of AUTOSAR systems. AU-
TOSAR advocates a component-based design with standard-
ized interfaces to support the integration of application com-
ponents that are supplied by third party manufacturers, into the
overall system. Third party suppliers receive, alongside with
the SW-C’s functional requirement speciﬁcation, an interface
speciﬁcation that results from the code generation process.
They have the option to deliver the implemented functionality
either as source-code (white-box) or binary object-code (black-
box). Both options are explicitly supported by the AUTOSAR
standard, whereas delivering the implementation in binary
form aids in protecting the intellectual property of the external
supplier.
In addition to the different instrumentation locations (SW-C
and RTE), an instrumentation approach therefore has to factor
the different code access levels that might be present in the
system.
We address this scenario as follows. To bridge the gap
between the model and the implementation, we propose to
leverage information from the model and the implementation
to create a collective view of the system. After a review
of related work in the following section, we explain the
technical details of extracting the necessary information from
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:19:13 UTC from IEEE Xplore.  Restrictions apply. 
SW-CASW-CBRTEBSWNetwork (e.g. CAN)ECU 1SW-CBRTEBSWECU 2the model and the implementation in Section IV. Furthermore,
we show how to technically drive wrapper-based interface
instrumentation on the access levels of source code and binary
object, and provide suggestions on how to use this information
to develop an instrumentation framework.
systematically and automatically instrument a given system
is not investigated. Also, none of the publications provides
an (experimental) evaluation of the overhead incurred by the
instrumentation. Our publication is the ﬁrst to address these