### Appendix: Supplementary Material for Section IV

#### A. Security Definitions

We revisit the security definitions for ring signatures, following the framework established by Bender, Katz, and Morselli [18].

**Definition C.1 (Bender–Katz–Morselli [18, Def. 7])**:
The unforgeability with respect to insider corruption experiment, denoted as \( \text{UnforgeICN}(\cdot)_{A, \Pi}(\lambda) \), is defined as follows:

1. **Setup**: Parameters \(\sigma \leftarrow \text{Setup}(1^\lambda)\) are generated and given to the adversary \(A\).
2. **Key Generation**: Keypairs \((y_i, s_k^i)_{i=0}^{N(\lambda)-1}\) and the list of public keys \(S := (y_i)_{i=0}^{N(\lambda)-1}\) are generated using \(\text{Gen}(1^\lambda)\). The list \(S\) is given to \(A\).
3. **Signing Oracle Access**: \(A\) is given access to a signing oracle \(O_{\text{sign}}(i, m, R)\) that returns \(\text{Sign}_{s_k^i}(m, R)\), where it is required that \(y_i \in R\).
4. **Corruption Oracle Access**: \(A\) is also given access to a corrupt oracle \(\text{Corrupt}(i)\) that outputs \(s_k^i\).

**Proof Sketch of Theorem IV.1**:
The reduction \(A'\) simulates an execution of [18, Def. 7] on \(A\) in the spirit of [18, §C.1]. Specifically, \(A'\) overwrites the discrete logarithm challenge \(h\) with a randomly chosen key \(y_{i^*}\) from the initial ring \(S\), Schnorr-simulating each \(O_{\text{sign}}(i, m, R)\) query and aborting if \(\text{Corrupt}(i^*)\) is called. If \(A\) succeeds in forging a \((2m + 1, 2)\)-tree of signatures on the correct key, then \(A'\) extracts the discrete logarithm \(\log(y_{i^*})\) with probability 1. We outline the details.

- \(A'\) first extracts openings \((b_k, a_k)_{k=0}^{N(\lambda)-1}\) of \(B\) and \(A\), and if the bits \(b_k\) recover the correct key \(y_{i^*}\), reconstructs the prover’s polynomials \(P_i(X)\) as in Section III.
- Using these, \(A'\) expresses:
  \[
  \left( g^{x_m} \cdot \prod_{k=0}^{m-1} G^{-x_k}, \prod_{k=0}^{m-1} \hat{Y}_k^{-x_k} \right),
  \]
  for easily computable elements \(\hat{Y}_k\) independent of \(x\).

- The Schnorr extractor yields, for each among the \(2m + 1\) challenges \(x\), some quantity \(\tilde{s}_k\) (a priori unequal to \(s_k\)) for which \(g^{\tilde{s}_k} = y\), and hence:
  \[
  \left( g^{x_m} \cdot \prod_{k=0}^{m-1} G^{-x_k} \right)^{\tilde{s}_k} = \left( \prod_{k=0}^{m-1} \hat{Y}_k^{-x_k} \right)^{\tilde{s}_k}.
  \]

- Taking discrete logarithms with respect to \(g\), this relationship implicitly defines an algebraic equation in two variables—with unknown coefficients—which the pairs \((x, \tilde{s}_k)\) simultaneously satisfy. This problem is essentially that of rational function interpolation, as described in von zur Gathen and Gerhard [25, §5.8]. The techniques of that work readily yield the desired leading coefficient \(\log(y_{i^*}) = s_k\), as we argue in the full version of this paper.

**Proof Sketch of Theorem IV.2**:
The primary difficulty is that both the "messages" of \((Y_k, G_k)\) and the key under which they are encrypted depend on the witness. The reduction must therefore proceed in "two parts."

- **Step 1**: We assert that, for the purposes of Definition C.2, our signature scheme \(\Pi\) may be replaced by a variant in which a freshly sampled key \(y_{i^*}\) is used in place of \(y_{i_b}\) in the construction of the blinding terms \((Y_k, G_k)\) (where \(b\) is the experimenter's hidden bit). Any adversary who performs materially worse in the latter game can be used to break DDH, as we show by a direct reduction. Specifically, the reduction \(A'\), upon receiving \(g, h_1, h_2,\) and \(h'\), generates random scalars \((\psi_i)_{i=0}^{N(\lambda)-1}\) and gives \(S := (h_1^{\psi_i})_{i=0}^{N-1}\) to \(A\). Finally, \(A'\) sets:
  \[
  (Y_k, G_k) := \left( \prod_{i=0}^{N-1} y_i^{P_{i,k}} \cdot (h')^{\psi_i b \rho_k}, (h_2)^{\rho_k} \right)
  \]
  during the construction of the challenge signature \(\pi\). This reduction exactly interpolates between the standard scheme and the fresh-key variant.

- **Step 2**: We conclude the proof by reducing the fresh-key variant to the security of El Gamal encryption, as expressed in [19, Def. 11.5]. Essentially, the pairs \((Y_k, G_k)\) are ciphertexts under \(y_{i^*}\), which depend on \(b\) only in virtue of their messages. Given an adversary \(A\) targeting the fresh-key variant, \(A''\) simulates the quantities \(A, B, C, D, x, (f_k)_{k=0}^{m-1}, z_A, z_C\), and, for each \(b \in \{0, 1\}\), engineers polynomials \(P_{b,i}(X)\) (for \(i \in \{0, \ldots, N-1\}\)) distributed as in an honest signature under \(y_{i_b}\). Finally, \(A''\) submits the pairs:
  \[
  \left( \prod_{i=0}^{N-1} y_i^{P_{1,i,k}}, \prod_{i=0}^{N-1} y_i^{P_{0,i,k}} \right)
  \]
  to the oracle \(\text{LR}_{y^*, b''}\) so as to obtain the terms \((Y_k, G_k)\). \(A''\) returns whatever \(A\) returns and wins whenever \(A\) wins.

### Appendix D: Anonymous Zether Protocol

In this appendix, we sketch the full Anonymous Zether protocol. A comprehensive, detailed description of the protocol is given in Appendix A of the full version of this paper.

**Protocol: Anonymous Zether**

1. **Initialization**:
   - \(A, S \leftarrow\) initial Bulletproofs commitments, using \(b^*\) and \(b'\).
   - \(B \leftarrow\) commitment to bits \(((l_\iota)_0, \ldots, (l_\iota)_{m-1})_{\iota \in \{0, 1\}}\).
   - \((A, C, D, E, F) \leftarrow P_1(B; ((l_\iota)_0, \ldots, (l_\iota)_{m-1})_{\iota \in \{0, 1\}})\).

2. **Prover to Verifier**:
   - \(P \rightarrow V: A, S, A, B, C, D, E, F\).

3. **Prover Computations**:
   - \(P\) computes...
   - \(P\) computes...
   - \(P\) computes...

4. **Verifier to Prover**:
   - \(V: v \leftarrow \mathbb{F}_q\).
   - \(V \rightarrow P: v\).

5. **Prover Computations**:
   - \(P\) computes...
   - \(P\) computes...
   - \(P\) computes...

6. **Prover to Verifier**:
   - \(P \rightarrow V: (f_{\iota, k})_{\iota, k=0}^{1, m-1}, z_A, z_C, z_E\).

7. **Verifier to Prover**:
   - \(V: w \leftarrow \mathbb{F}_q\).
   - \(V \rightarrow P: w\).

8. **Prover Computations**:
   - \(P\) computes...
   - \(P\) computes...
   - \(P\) computes...

9. **Verifier to Prover**:
   - \(V: y, z \leftarrow \mathbb{F}_q\).
   - \(V \rightarrow P: y, z\).

10. **Prover Computations**:
    - \(P\) computes...
    - \(P\) computes...
    - \(P\) computes...

11. **Prover to Verifier**:
    - \(P \rightarrow V: T_1, T_2, (f_{\iota, k})_{\iota, k=0}^{1, m-1}, z_A, z_C, z_E\).

12. **Verifier to Prover**:
    - \(V: x \leftarrow \mathbb{F}_q\).
    - \(V \rightarrow P: x\).

13. **Prover Computations**:
    - \(P\) computes...
    - \(P\) computes...
    - \(P\) computes...

14. **Prover to Verifier**:
    - \(P \rightarrow V: \hat{t}, \mu, A_y, A_D, A_X, A_t\).

15. **Verifier Computations**:
    - \(V: c \leftarrow \mathbb{F}_q\).
    - \(V \rightarrow P: c\).

16. **Prover Computations**:
    - \(P\) computes...
    - \(P\) computes...
    - \(P\) computes...

17. **Prover to Verifier**:
    - \(P \rightarrow V: s_{sk}, s_r, s_b, s_\tau\).

18. **Verifier Verification**:
    - \(V\) requires...
    - \(V\) requires...
    - \(V\) requires...

19. **Inner Product Verification**:
    - \(P\) and \(V\) engage in [12, Prot. 1] for the inner product \(\hat{t}\).

This completes the Anonymous Zether protocol. For a detailed and comprehensive description, refer to Appendix A of the full version of this paper.