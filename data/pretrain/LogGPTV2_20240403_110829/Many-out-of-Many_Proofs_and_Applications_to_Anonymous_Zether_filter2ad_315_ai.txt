proofs are given in the full version of this paper.
This appendix contains supplementary material for Section
IV above.
A. Security Deﬁnitions
We recall security deﬁnitions for ring signatures, following
the article of Bender, Katz and Morselli [18].
Deﬁnition C.1 (Bender–Katz–Morselli [18, Def. 7]). The
unforgeability with respect to insider corruption experiment
UnforgeICN (·)A,Π (λ) is deﬁned as:
1) Parameters σ ← Setup(1λ) are generated and given to
2) Keypairs (yi, ski)N (λ)−1
A.
and the list of public keys S := (yi)N (λ)−1
A.
are generated using Gen(1λ),
is given to
3) A is given access to a signing oracle Osign(·,·,·) such
that Osign(i, m, R) returns Signski(m, R), where we re-
quire yi ∈ R.
4) A is also given access to a corrupt oracle Corrupt(·),
i=0
i=0
where Corrupt(i) outputs ski.
Proof sketch of Theorem IV.1. The reduction A(cid:48) simulates an
execution of [18, Def. 7] on A, in the spirit of [18, §C.1].
In particular, A(cid:48) overwrites the discrete logarithm challenge h
in place of a randomly chosen key yi∗ among the initial ring
S, Schnorr-simulating each Osign(i, m, R) query and aborting
if Corrupt(i∗) is called. If A succeeds in forging a (2m +
1, 2)-tree of signatures on “the right” key, then A extracts the
discrete logarithm log(yi∗ ) with probability 1. We outline the
details.
A(cid:48) ﬁrst extracts as in [10, Lem. 1] openings (bk, ak)N (λ)−1
of B and A, and (if the bits bk recover the correct key yi∗)
reconstructs the prover’s polynomials Pi(X) as in III. Using
these, A(cid:48) expresses:
k=0
(cid:32)
· m−1(cid:89)
(cid:99)Yk
−xk
, gxm · m−1(cid:89)
(cid:33)
G−xk
k
,
for easily computable elements (cid:99)Yk independent of x. The
Schnorr extractor meanwhile yields, for each among the
k=0
k=0
(y, g) =
yxm
i∗
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply. 
1816
2m + 1 challenges x, some quantity (cid:98)sk (a priori unequal to
sk) for which g(cid:98)sk = y, and hence:
(cid:32)
gxm · m−1(cid:89)
· m−1(cid:89)
(cid:33)(cid:98)sk
G−xk
−xk
=
.
(cid:99)Yk
yxm
i∗
k
k=0
k=0
Taking discrete logarithms with respect to g, this relationship
implicitly deﬁnes an algebraic equation in two variables—with
unknown coefﬁcients—which the pairs (x,(cid:98)sk) simultaneously
satisfy. Our problem is that of determining one among these
unknown coefﬁcients, given our supply of satisfying points.
This problem is essentially that of rational function inter-
polation, as described e.g. in von zur Gathen and Gerhard [25,
§5.8]. The techniques of that work readily yield the desired
leading coefﬁcient log(yi∗ ) = sk, as we argue in the full
version of this paper.
Proof sketch of Theorem IV.2. The primary difﬁculty is that
both the “messages” of (Yk, Gk) and the key under which
they’re encrypted depend on the witness. The reduction must
therefore proceed in “two parts”.
We ﬁrst assert that, for the purposes of Deﬁnition C.2,
our signature scheme Π may be replaced by a variant in
which a freshly sampled key yi∗ is used in place of yib in
the construction of the blinding terms (Yk, Gk) (b here is
the experimenter’s hidden bit). Indeed, any adversary who
performs materially worse in the latter game can be used to
break DDH, as we show by a direct reduction. Speciﬁcally,
the reduction A(cid:48), upon receiving g, h1, h2, and h(cid:48), generates
random scalars (ψi)N (λ)−1
to
A. Finally, A(cid:48) sets
, and gives S :=(cid:0)(h1)ψi(cid:1)N−1
(cid:33)
i=0
i=0
(cid:32)N−1(cid:89)
yPi,k
i
· (h(cid:48))ψib·ρk , (h2)ρk
(Yk, Gk) :=
i=0
during the construction of the challenge signature π. This
reduction exactly interpolates between the standard scheme
and the fresh-key variant (i.e., depending on the DDH exper-
imenter’s hidden bit).
We conclude the proof by reducing the fresh-key variant
to the security of El Gamal encryption, as expressed in [19,
Def. 11.5]. Essentially, the pairs (Yk, Gk) are ciphertexts under
yi∗, which depend on b only in virtue of their messages.
Given an adversary A targeting the fresh-key variant, A(cid:48)(cid:48)
simulates the quantities A, B, C, D, x, (fk)m−1
k=0 , zA, zC, and,
(cid:17)
for each b ∈ {0, 1}, engineers polynomials Pb,i(X) (for i ∈
{0, . . . , N−1}) distributed as in an honest signature under yib.
Finally, A(cid:48)(cid:48) submits the pairs
i=0 yP1,i,k
to the oracle LRy∗,b(cid:48)(cid:48), so as to obtain the terms (Yk, Gk). A(cid:48)(cid:48)
returns whatever A returns, and wins whenever A wins.
(cid:16)(cid:81)N−1
,(cid:81)N−1
i=0 yP0,i,k
i
i
APPENDIX D
ANONYMOUS ZETHER PROTOCOL
In this appendix, we sketch the full Anonymous Zether pro-
tocol. A comprehensive, detailed description of the protocol is
given in Appendix A of the full version of this paper.
1817
A, S ← initial Bulletproofs commitments, using b∗ and b(cid:48)
B ← commitment to bits ((lι)0, . . . , (lι)m−1)ι∈{0,1}
(A, C, D, E, F ) ← P1(B; ((lι)0, . . . , (lι)m−1)ι∈{0,1})
P → V : A, S, A, B, C, D, E, F
i=0 , κ, Ξ; l0, l1)
i=0 ; l0, sk)
k=0 ← P2(v, (Ci, yi)N−1
k=0 ← P3((yi)N−1
k=0 ← P3((Ci)N−1
((cid:103)y0,k,(cid:102)gk)m−1
((cid:94)CX,k, (cid:93)yX,k)m−1
((cid:93)C0,k,(cid:102)Dk)m−1
(cid:17)m−1
(cid:16)(cid:94)CX,k, (cid:93)yX,k
k=0 ← P3((CLn,i, CRn,i)N−1
( (cid:94)CLn,k, (cid:94)CRn,k)m−1
(cid:17)m−1
(cid:16) (cid:94)CLn,k, (cid:94)CRn,k, (cid:93)C0,k,(cid:102)Dk,(cid:103)y0,k,(cid:102)gk
i=0 ; l0, sk)
k=0
k=0
i=0 ; l0, sk)
Protocol Anonymous Zether
1: P computes...
2:
3:
4:
5:
6: end P
7: V : v ←$ Fq
8: V → P : v
9: P computes...
10:
11:
12:
13:
14: end P
15: P → V :
16: P → V :
17: V : w ←$ Fq
18: V → P : w
19: P computes...
20:
21: end P
23: V : y, z ←$ Fq
24: V → P : y, z
25: P computes...
26:
27: end P
28: P → V : T1, T2,
29: V : x ←$ Fq
30: V → P : x
31: P computes...
32:
33:
34:
35:
36:
37:
38:
22: P → V :(cid:0)fι,k
(cid:1)1,m−1
kr
(f0,0, . . . , f1,m−1, zA, zC , zE ) ← P1(x)
(cid:46) zE for parity
ι,k=0 , zA, zC , zE
l(X), r(X), t(X), T1, T2 ← as in Bulletproofs
(cid:46) Σ-Bullets randomnesses
(cid:46) g as in the protocol of Section IV
ˆt, τx, µ ← as in Bulletproofs / Σ-Bullets
ksk, kr, kb, kτ ←$ Fq
Ay := gksk
AD := gr
At := g−kb hkτ
(CX , yX ) ← V2((Ci, yi)N−1
AX := yX
Ab := gkb ·
(cid:18)
D
(cid:46) exactly as in Σ-Bullets [6, §G]
i=0 , v, w, ((cid:94)CX,k, (cid:93)yX,k)m−1
z3(cid:19)ksk
k=0 )
(cid:46) D and CRn as in IV
ssk := ksk + c · sk
sr := kr + c · r
sb := kb + c · wm · (b∗z2 + b(cid:48)z3)
sτ := kτ + c · wm · τx
−z2 · CRn
39:
40: end P
41: P → V : ˆt, µ, Ay, AD, AX , At
42: V : c ←$ Fq
43: V → P : c
44: P computes...
45:
46:
47:
48:
49: end P
50: P → V : ssk, sr, sb, sτ
51: V requires...
52:
53:
54:
55:
56:
57:
58:
59:
60:
= gsr · D−c
sr · CX
?
= yX
?
= 1
−c
?
?
?
= 1
(cid:46) many-out-of-many veriﬁcation
V1(B, w, A, C, D, (fι,k)1,m−1
F wE
(CX , yX ) ← V2((Ci, yi)N−1
AD
AX
(y0, g) ← V3((yi, g)N−1
(C0, D) ← V3((Ci, D)N−1
(CLn, CRn) ← V3(w, (f0,k)m−1
V3(c, ssk, Ay, y0, g)
g−sb · Ab
?
=
gwm·c·ˆt · hsτ
ι,k=0 , zA, zC )
= Com ((f0,0 · f1,0, (w − f0,0)(w − f1,0)); zE )
i=0 , v, w, ((cid:94)CX,k, (cid:93)yX,k)m−1
k=0 )
i=0 , w, (f0,k,(cid:103)y0,k,(cid:102)gk)m−1
i=0 , w, (f0,k, (cid:93)C0,k,(cid:102)Dk)m−1
k=0 )
k=0 , ( (cid:94)CLn,k, (cid:94)CRn,k)m−1
z3(cid:19)ssk ·
z3(cid:19)−c
k=0 )
= gssk · y0
−c
(cid:17)wm·c
(cid:18)
(cid:18)
= gwm·c·δ(y,z) · gsb · At ·(cid:16)
−z2 · CLn
1 · T x2
62:
T x
63: end V
64: P and V engage in [12, Prot. 1] for the inner product ˆt
−z2 · CRn
(cid:46) i.e., Ay
k=0 )
61:
C0
D
2
?
?
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:14:00 UTC from IEEE Xplore.  Restrictions apply.