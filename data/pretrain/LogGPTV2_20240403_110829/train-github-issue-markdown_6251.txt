### Issue Description

Consider the following subroutine in a `test.f90` file, which declares an automatic array using two input variables:

```fortran
subroutine test (nx, ny, arr)
  implicit none
  integer, intent(in) :: nx
  integer, intent(in) :: ny
  integer, dimension(nx*ny) :: arr
end subroutine test
```

This code used to work with NumPy 1.22.0 or earlier, despite the warning: "cross-dependence between variables 'ny' and 'nx'". The generated `test.pyf` signature file contained the following content:

```fortran
!    -*- f90 -*-
! Note: the context of this file is case sensitive.
python module test
    interface
        subroutine test(nx,ny,arr)
            integer, optional, intent(in), check(shape(arr, 0) == nx * ny), depend(ny, arr) :: nx=shape(arr, 0) / nx
            integer, optional, intent(in), check(shape(arr, 0) == nx * ny), depend(nx, arr) :: ny=shape(arr, 0) / nx
            integer, dimension(nx * ny) :: arr
        end subroutine test
    end interface
end python module test
! This file was auto-generated with f2py (version:1.22.0).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
```

However, with NumPy 1.22.1 or later, the generated `test.pyf` file has "swapped" `nx` and `ny`:

```fortran
!    -*- f90 -*-
! Note: the context of this file is case sensitive.
python module test
    interface
        subroutine test(nx,ny,arr)
            integer, optional, intent(in), check(shape(arr, 0) == nx * ny), depend(ny, arr) :: nx=shape(arr, 0) / ny
            integer, optional, intent(in), check(shape(arr, 0) == nx * ny), depend(arr, nx) :: ny=shape(arr, 0) / nx
            integer, dimension(nx * ny) :: arr
        end subroutine test
    end interface
end python module test
! This file was auto-generated with f2py (version:1.22.1).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
```

This change causes a recursion error when attempting to generate the Python extension from the signature file:

```
Reading fortran codes...
    Reading file 'test.pyf' (format:free)
Post-processing...
    Block: test
                Block: test
Traceback (most recent call last):
  File "/Users/me/env/bin/f2py", line 8, in <module>
    sys.exit(main())
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/f2py2e.py", line 693, in main
    run_main(sys.argv[1:])
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/f2py2e.py", line 430, in run_main
    postlist = callcrackfortran(files, options)
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/f2py2e.py", line 333, in callcrackfortran
    postlist = crackfortran.crackfortran(files)
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 3209, in crackfortran
    postlist = postcrack(grouplist[0])
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 1926, in postcrack
    g = postcrack(g, tab=tab + '\t')
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 1945, in postcrack
    block['body'] = analyzebody(block, args, tab=tab)
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2107, in analyzebody
    b = postcrack(b, as_, tab=tab + '\t')
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 1945, in postcrack
    block['body'] = analyzebody(block, args, tab=tab)
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2107, in analyzebody
    b = postcrack(b, as_, tab=tab + '\t')
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 1941, in postcrack
    block['vars'] = analyzevars(block)
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2458, in analyzevars
    params = get_parameters(vars, get_useparameters(block))
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2329, in get_parameters
    for n in get_sorted_names(vars):
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2257, in get_sorted_names
    depend_dict = _calc_depend_dict(vars)
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2250, in _calc_depend_dict
    _get_depend_dict(n, vars, depend_dict)
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2236, in _get_depend_dict
    or _get_depend_dict(word, vars, deps):
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2236, in _get_depend_dict
    or _get_depend_dict(word, vars, deps):
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2236, in _get_depend_dict
    or _get_depend_dict(word, vars, deps):
  [Previous line repeated 979 more times]
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/crackfortran.py", line 2228, in _get_depend_dict
    if '=' in vars[name] and not isstring(vars[name]):
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/auxfuncs.py", line 77, in isstring
    return _isstring(var) and not isarray(var)
  File "/Users/me/env/lib/python3.9/site-packages/numpy/f2py/auxfuncs.py", line 72, in _isstring
    return 'typespec' in var and var['typespec'] == 'character' and \
RecursionError: maximum recursion depth exceeded in comparison
```

The difference in the generated signature files appears to be related to issue #20721.

### Question
Is this issue a regression, or is the example incorrect? Should we avoid declaring dimensions of automatic arrays using two or more variables? I am not a Fortran expert, but it seems unusual that compilers would allow this if it were invalid.

### Code Example
See the `test.f90` and `test.pyf` source code provided above.

### Error Message
See the recursion error message provided above.

### NumPy/Python Version Information
- NumPy: 1.22.0 / 1.22.1
- Python: 3.9