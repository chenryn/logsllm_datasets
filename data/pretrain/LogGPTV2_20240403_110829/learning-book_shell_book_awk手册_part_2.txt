Actions部分为$3*=1.05
$3*=1.05与S3=S3*1.05意义相同.运算子"*-"之用法则与C语言中一样.此后与C语
言中用法相同的运算子或语法将不予赞述，
第二个Patterm{Actions}是：$3
[7.2]将today_rpt1上的数据按员工代号排序，并加注执行当日日期；产生文件
today_rpt2
[7.3]将awk程序包含在一个shell script文件中
[7.4]于today_rpt2每日报表上，迟到者之前加上"*",并加注当日平均到班时间；
产生文件 today_rpt3
[7.5]从文件中读取当月迟到次数，并根据当日出勤状况更新迟到累计数，
某公司其员工到勤时间档如下，取名为ar.dat.文件中第一栏为员工代号，第二栏为到达时
间.本范例中，将使用该文件为数据文件，
1034 7:26
1025 7:27
1101 7:32
1006 7:45
1012 7:46
1028 7:49
1051 7:51
1029 7:57
1042 7:59
1008 8:01
1052 8:05
1005 8: 12
重定向输出到文件
awk中并未提供如C语言中之fopenO指令，也未有fprintf0文件输出这样的指令.但awk中
任何输出函数之后皆可借助使用与UNIX中类似的I/O重定向符，将输出的数据重定向到
指定的文件；其符号仍为>（输出到一个新产生的文件）或>>（添加输出的数据到文件末尾
).
[例：]在到班数据文件arr.dat之前增加一行抬头如下：
"ID NumberArrivalTime",并产生报表输出到文件 today_rpil中
建立如下文件并取名为reformatl.awk
print “=ss=
Id"today_rpt1" }
执行：
$awk f reformat1,awk arr, dat
执行后将产生文件today_rptl,其内容如下：
---
## Page 12
ID Number Arriva1 Time
1034 7:26
1025 7:27
1101 7:32
1006 7:45
1012 7:46
1028 7:49
1051 7:51
1029 7:57
1042 7:59
1008 8:01
1052 8:05
1005 8:12
[说明：]
awk程序中，文件名称today_rptl的前后须以"(双引号）括住，表示today_rptl为一字符串常
量.若未以"括住，则today_rptl将被awk解释为一个变量名称.
在awk中任何变量使用之前，并不须事先声明.其初始值为空字符串(Nullstring)或0.因此程
序中若未以“将today_rptl括住，则today_rptl将是一变量，其值将是空字符串，这会在执
行时造成错误（Unix无法帮您开启一个以空字符串为文件名的文件）
因此在编辑awk程序时，须格外留心.因为若敲错变量名称，awk在编译程序时会认为是一新
的变量，并不会察觉.因此往往会造成运行时错误
BEGIN为awk的保留字，是Patterm的一种
以BEGIN为Patterm的Actions于awk程序刚被执行尚未读取数据文件时被执行一次，此
后便不再被执行
本程序中若使用">"将数据重导到today_rptl,awk第一次执行该指令时会产生一个新档
today_rptl,其后再执行该指令时则把数据追加到today_rptl文件末，并非每执行一次就重开
一个新文件.
若采用">>"其差异仅在第一次执行该指令时，若已存在today_rptl则awk将直接把数据
append在原文件之末尾.这一点，与UNIX中的用法不同.
awk中如何利用系统资源
awk程序中很容易使用系统资源.这包括在程序中途调用Shell命令来处理程序中的部分数
据；或在调用Shell命令后将其产生的结果交回awk程序（不需将结果暂存于某个文件）.这
一过程是借助awk所提供的管道（虽然有些类似Unix中的管道，但特性有些不同）及一个
从awk中呼叫Unix的Shell命令的语法来达成的
[例：]承上题，将数据按员工ID排序后再输出到文件today_rp2，并于表头附加执行时的日
期.
[分析：]
awk提供与UNIx用法近似的pipe,其记号亦为".其用法及含意如下：
awk程序中可接受下列两种语法：
---
## Page 13
[a.语法]awk output 指令|"Shell接受的命令"
(如 : print S1,S2 |"sort -k 1")
[b.语法]"Shell接受的命令"|awkinput 指令
)
注：awk input指令只有getline一个.
awk output 指令有print,printfO二个.
在a语法中,awk所输出的数据将转送往Shell，由Shell的命令进行处理.以上例而言，print
所输出的数据将经由Shell命令"sort-k1"排序后再送往屏幕（stdout).
上列awk程序中，"print$1,S2"可能反复执行很多次，其输出的结果将先暂存于pipe中，等到
该程序结束时，才会一并进行"sort-k1"
须注意二点：不论print$1，S2被执行几次，"sort-k1"的执行时间是"awk程序结束时"，
"sort-k1"的执行次数是"一次”
在b语法中，awk将先调用Shell命令.其执行结果将通过pipe送入awk程序，以上例而言，
awk先让Shell执行"ls"Shell执行后将结果存于pipe,awk指令getline再从pipe中读取数
据
使用本语法时应留心：以上例而言，awk"立刻"调用Shell来执行"ls"，执行次数是一次
getline则可能执行多次（若pipe中存在多行数据).
除上列a,b二中语法外，awk程序中其它地方如出现像"date"，"cls"，"ls".这样的字符串，
awk只把它当成一般字符串处理
建立如下文件并取名为reformat2.awk
#程序reformat2.awk
#这程序用以练习ak中的pipe
BEGIN{
“date”|getline#Shell执行“date".getline取得结果并以$0记录
print " Today is ", $2, $3 >"today_rpt2”
print “==s=ss
dKpo>today_rpt2")
执行如下命令：
awk -f refommat2.awk arr.dat
执行后，系统会自动将sort后的数据追加(Append因为使用">")到文件today_rpt2末端.
today_rpt2内容如下：
Todayis09月21日
ID Number Arrival Time
1005 8:12
1006 7:45
1008 8:01
---
## Page 14