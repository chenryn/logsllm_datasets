community为“public”
的版本2（据我们所知道的，我们的数据中心目前仅使用版本2）。例如，设置字符串
建具有默认参数的选项，且默认参数会匹配需要。例如，设置SNMP版本选项为默认
这段脚本大约二十行，但是却能让我们的工作变得简单。通过使用optparse，可以创
def main():
from subprocess import call
import optparse
#!/usr/bin/env python
例13-10：使用Python封装SNMPDF
注意：
且仅将一台主机作为参数。确实是可以这样做，例13-10演示了它的样子。
于使用。坦率地讲，创建的工具必须能与SNMP版本1、2和3相兼容。如果不考虑这个,
中的磁盘部分。通常，处理SNMP协议的命令行工具有许多选项，这些选项使得它们难
或许你还不熟悉snmpdf，这表示在允许SNMP的远端系统中运行，并且允许访问MIB树
p.add_option("-v",
p.add_option("-c",
p = optparse.optionParser(description="Python wrapped snmpdf command",
else:
/boot
/sys
p.print_help()
相同的方法对代码进行测试，往往额外多出的代码正是优势所在。
允许你使用更丰富的Python工具集来扩展这个工具。另外，你可以按测试你写的其他工具
进行修改所需的代码行还要多。我们感觉到这是一个成功之处，因为正如你所看到的，它
通常，当你在Python中封装一个Unix工具来修改工具的行为时，它会变得比你使用Bash来
call([SNMPDF,
"-c", options.community, "-v",options.Version, machinel)
"--Version",
""community"
，因为这是在我们的研究和开发实验中所设置的。一个使用
74594112
101086
version="o.1a",
www.TopSage.com
help="snmp version to use")
,help="snmp community string")
17420740
20041
57173372
81045
Y
命令行丨393
---
## Page 408
混合Kudzu设计模式：封装一个Python工具，并修改其行为
具并进行修改，以满足需要。
options.community。这一技术强调了Python中“Kudzu”的强大作用，可以融合其他工
项，例如“-c”，并且封装新的值来满足需要。在这个示例中该值来自opt parse或是
具的所有参数设置默认值。同时需要注意subproce s s.call的使用。我们嵌入旧的选
值得注意的是，默认参数的设置使用set_defaults方法，这允许我们同时对命令行工
#!/usr/bin/env python
例13-11：使用generator修改SNMPDF命令
急信息的结果，然后附加“CRITICAL”标志。例13-11演示了这一过程。
在接下来的示例中，我们在函数中使用Python生成器，来过滤我们的snmpdf命令搜索紧
使用Python修改工具的基本行为。
这两个工具的输出是相同的。另一个我们可以使用的方法是不仅包含一个Unix工具，并
在最后的示例中，snmpdf使用起来变得非常容易，但是我们没有修改工具的基本行为。
def main():
importre
import optparse
394
options, arguments = p.parse_args()
p.set_defaults(community="public",Version="2c")
p.add_option("-c",
SNMPDF
#Real Memory 2067636 1974120 93516 95% CRITICAL
#Sample Return Value
outline = (line.split() for line in parse()) #remove carriage returns
#Generator Pipeline To Search For Critical Items
#We create.a nested generator function
machine = arguments[o]
第13章
return ps.stdout
"snmpdf"
""-community"
stdout=PIPE,stderr=PIPE)
version="o.1a",
H_c"
help="snmp version to use")
www.TopSage.com
,options.community,
 help="snmp community string")
%line
machine],
动
ODG
---
## Page 409
一个新的文件服务器，可以进行一些操作来缩短磁盘I/O时间。参见例13-12。
采用这一思想并运行它，创建一个永久的可以多次复用的命令行工具。最后，我们检测
在数据一章，我们创建了一个检测脚本，该脚本并行使用dd命令创建映像文件。让我们
决产品化中的问题。
满想象力和创造性。这是系统管理中非常有趣的一部分，你必须做一些疯狂的事情来解
有Unix工具行为的方法。确实，这似乎有点令人捉摸不透。然而，有时你需要对工作充
混合Kudzu设计模式：封装Python中的Unix工具来产生进程
注意：这个工具比起你希望实现的一个产品化工具或许更复杂。一个较好的想法或许是将其分解
值在70%与80%之间的结果。
置的标准匹配。正如我们之前所说的，我们可以很容易地添加一些generator，以取得阈
在generator管道一节，我们将传送generator对象到两个表达式，来查找一个符合我们设
generator表达式进行传输时，这是非常重要的。
readlines()，它返回一个列表而不是一个字符串。当我们取得输出并通过一系列的
具的输出，那么subprocess.Popen是你需要的。值得注意的是，我们使用了stdout.
查看一下代码，有一些与之前的示例不一样之处需要指出。第一处不同是使用
GoogleAppEngine也是一件容易的事情，例如我们可以创建一个web应用程序监测基础
设定搜索使用等级为80%、70%，并在达到这些等级时产生警告。将这一技术整合到
有一个来自该脚本的返回值则发送电子邮件。另外，我们可以进一步扩展这个脚本，
或更高将产生输出。我们可以在晚间在数百台主机上在cron作业中运行这个脚本，如果
我们现在具有一个完全不同的脚本，如果在snmpdf中的某个值是90%（标识为临界区)
如果运行新的snmpdf“修改”版，会在测试机上看到这样的结果：
上一个示例非常棒，但以一种高效的模式创建多个副本，是另一个非常有意义的改变现
subprocess.Popen而不是使用subprocess.call。如果希望解析-个Unix命令行工
结构中的磁盘使用情况。
else:
为多个小一些的一系列可以加载的小块。
p.print_help()
__main_
www.TopSage.com
命令行丨395
---
## Page 410
396
以下是其运行的结果：
现在，如果运行多个dd命令，可以设置文件的字节数、路径和总的文件或总的进程数。
def main():
import optparse
from subprocess import Popen, PIPE
例13-12：多dd命令
import sys
start.controller()
def
 ./subprocess_dd.py /tmp/
def
第13章
options, arguments = p.parse_args()
p.set _defaults(number=10,
p.add_option(
p.add_option('-n',
p = optparse.optionParser(description="Launches Many dd",
createImage(self)
self.dest = dest
self.size = size
'creates N 10mb
self.createImage()
except Exception, err:
try:
sys.stderr.write(err)
(self, num=None, size=None, dest=None):
Cmd = "d if=/dev/zero of=%s/file.%s bs=1024 count=%s"\
type=int)
% (self.dest,i,self.size)
type=int)
-s'
size=10240)
%str(self.size/1024)
identical image files"
--size', help='size of image in bytes'
www.TopSage.com
1801d%=a8esn
version="0.1",
[options] dest")
我
PDG
---
## Page 411
名文件名为hello_config.ini并粘贴下面的内容：
在开始整合配置文件到命令行工具的时，我们将创建一个“hello world”配置文件。命
注意：确信你不必养成依赖配置文件中的条目顺序的习惯。ConfigParser模块使用字典，你需要以
用ConfigParser模块的细节信息。
XML，不需要限制编辑该文件的人必须懂得Python语言。请参阅前一章以获得更多的使
ConfigParser。ini格式是一个好的媒介，用于读取和写入简单的配置数据，不必使用
对于使用.ini语法读取和编写配置文件，Python标准库有一个非常不错的模块
置文件。
取这个配置文件。另外，或许有一些类型的配置管理系统，可以给你创建的工具发布配
可以通过加载NFS实现共享，然后数百台主机可以通过创建的一个普通的命令行工具读
配置文件对于中心化在多主机上运行的命令行工具，可以说是非常有帮助的。配置文件
工具才被提及。就像一个命令行工具与一个GUI工具引起了同样的注意，这是令人遗憾
不同。将可用性与命令行放在一起谈论似乎有点奇怪，因为它们经常仅因为GUI或web
整合一个配置文件到一个命令行工具，或许在可用性以及未来的自定义方面导致些许
整合配置文件
程看起来适合你需要解决的问题，那么相同的事情也可以通过线程来成功实现。
需一点工作量，你可以添加hook以产生PDF报告并邮寄结果。有一点需要指出，如果线
的。
这一混合工具的快速使用，将检测磁盘的IO性能，包括高速光纤SAN或是NAS设备。只
phrase=Config
[Section A]
10485760 bytes transferred in 2.664616 secs (3935186 bytes/sec)
10485760 bytes transferred in 1.793615 secs (5846160 bytes/sec)
10240+0records
10240+0recordsout
10240+0recordsin
10240+0recordsout
正确获得映射的方式引用它。
out
www.TopSage.com
命令行丨397
---
## Page 412
如果这是一个大一些的，并且实际上非常实用的程序，可以将它传给不懂Python的人。
注意：大多数情况下，你可能希望为--config选项设置一个默认路径，允许自定义读取文件的位
如果选择“--configfile”，解析配置文件并得到如下响应：
world”程序一样：
如果不带任何选项运行这个工具，我们获得一个默认值BOFH，就像原始的“hello
def main():
def readConfig(file="hello_config.ini"):
import ConfigParser
#!/usr/bin/env python
例13-13：Hello 配置文件命令行工具
中，如例13-13所示。
398
print
p.add_option(
p = optparse.optionParser()
options,arguments =p.parse_args()
sections = Config.sections()
Config.read(file)
Config=ConfigParser.ConfigParser()
置。你可以根据以下操作进行设置，而不是直接将选项设置为default_true：
第13章
#print Config.items(section)
#uncomment line below to see how this config file is parsed
return phrase
-C'
'-s')
action="store_true")
'-c'
www.TopSage.com
PDG
---
## Page 413
org/pypilConfigObj）。
optparse本身进行扩展。你或许会对查看一些没有出现在标准库中的相关模块感兴趣,
具，那么自己进一步尝试optparse的高级特征也是值得的，例如，使用回调函数，对
们在大多数你接触到的操作系统中都是可用的。如果你发现自己需要写一些命令行工
标准库Optparse和configParser模块很容易使用，并且已经流行了一段时间，因此它
本章小结
错的，这保持了工具的灵活性。
使如果他们有一些Python知识，不必一次又一次地在命令行输入相同的选项也是非常不
它会允许人们通过修改“parser=Config”
www.TopSage.com
的值来重新设定，而不必实际接触代码。即
命令行丨399
---
## Page 414
接下来，我们介绍IPython的模块，就像介绍这本书中的许多其他事情一样。在这个示例
中已被列出。
为了开始使用dnspython，需要通过easy_install进行安装，因为该包在Python包索引
的说明：http://vallista.idyll.org/~grig/articles/。
可以参考官方文档：http://www.dnspython.org/。此外，还有一个使用dnspython的更详细
DNS模块，但是我们将重点介绍dnspython。
常好的工作，有一个称为dnspython的模块。值得注意的是，还有另一个称为PyDNS的
机提供者的实际的问题是，如何实现可编程的大规模DNS修改。Python在这方面做了非
相比Apache配置文件，管理DNS服务器是一个非常简单的任务。困扰数据中心与web主
使用Python管理DNS
中，
第14章
，我们获得oreilly.com的A和Mx记录：
20smtp1.oreilly.com.20smtp2.oreilly.com.
In[i]:import dns.resolver
Searchingfordnspython
Password:
ngift@Macintosh-8][H:10048][J:0]# sudo easy_install dnspython
u
output supressed]
Reading http://pypi.python.org/simple/dnspython/
[3]:mail=dns.resolver.query("oreilly.com","Mx")
208.201.239.36
www.TopSage.com
---
## Page 415
importdns.resolver
们在这里描述的。如果你对查看一些更复杂的示例有兴趣，请参阅之前提到的URL地
dnspython还可以做其他一些事情：可以管理DNS分区并执行更复杂的查询，而不是我
这里解决的一个明显的问题是程序化检测，检测是否所有的主机在文件中都有正确的A
如果运行这个脚本，获得这些主机的所有的A记录，看起来类似下面这样：
if
hosts = ["oreilly.com", "yahoo.com", "google.com", "microsoft.com", "cnn.com"]
现在我们有了一些它是如何工作的初步感受，让我们写一个脚本，收集所有主机的A记
址
def query(host_list=hosts):
例14-1：查询一组主机
在例14-1中，我们指定了A记录到ip，并且MX记录到mail。A在上部，MX记录在下部。
记录。
64.236.24.12
64.236.16.52
64.236.16.20
64.236.29.120
207.46.232.182
72.14.207.99
64.233.187.99
64.233.167.99
66.94.234.13
216.109.112.135
208.201.239.36.
208.201.239.37