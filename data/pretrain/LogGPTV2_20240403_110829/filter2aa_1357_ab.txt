### NtQueryInformationProcess Function Overview

The `NtQueryInformationProcess` function is a Windows Native API (NTAPI) that retrieves information about a specified process. The function signature is as follows:

```c
NTSTATUS NtQueryInformationProcess(
    IN HANDLE ProcessHandle,
    IN PROCESSINFOCLASS ProcessInformationClass,
    OUT PVOID ProcessInformation,
    IN ULONG ProcessInformationLength,
    OUT PULONG ReturnLength
);
```

#### Parameters
- **ProcessHandle**: A handle to the process from which information is to be retrieved.
- **ProcessInformationClass**: Specifies the type of information to be retrieved. This is an enumeration of the `PROCESSINFOCLASS` type.
- **ProcessInformation**: A pointer to a buffer that receives the requested information.
- **ProcessInformationLength**: The size, in bytes, of the buffer pointed to by `ProcessInformation`.
- **ReturnLength**: A pointer to a variable that receives the number of bytes written to the buffer.

#### Handling and Arguments
- **Request Message**:
  - **ProcessHandle**: The handle to the target process.
  - **ProcessInformationClass**: The class of information to be queried.
  - **ProcessInformationLength**: The length of the buffer to store the information.

- **Response Message**:
  - **ProcessInformation**: The buffer containing the requested information.
  - **ReturnLength**: The number of bytes written to the buffer.
  - **Return value**: The status of the function call, typically an `NTSTATUS` value.

### Attack Scenario

In an attack scenario, the attacker might use the `NtQueryInformationProcess` function to gather sensitive information from a target process. Here’s a breakdown of the interaction:

- **Attacker Side**:
  - Sends a request message with the necessary parameters (`ProcessHandle`, `ProcessInformationClass`, `ProcessInformationLength`).
  - Receives the response message containing the `ProcessInformation` and `ReturnLength`.

- **Target Side**:
  - Receives the request message.
  - Handles the arguments and calls the `NtQueryInformationProcess` function.
  - Sends the response message back to the attacker.

### Malproxy Implementation

Malproxy is a technique used to bypass security measures by proxying system calls. Here’s how it works:

- **Attacker OS**:
  - Runs malicious code that hooks into system API functions.
  - Serializes the request, sends it to the target, and waits for the response.

- **Target OS**:
  - Runs innocent code that is hooked to intercept system calls.
  - Deserializes the request, executes the system call, serializes the response, and sends it back to the attacker.

### Execution Flow

1. **Hook**: Hook the system API functions.
2. **Serialize**: Serialize the request.
3. **Send**: Send the serialized request to the target.
4. **Execute**: Execute the system call on the target.
5. **Serialize**: Serialize the response.
6. **Send**: Send the serialized response back to the attacker.
7. **Return**: Repeat the process for subsequent requests.

### Import Address Table (IAT)

The Import Address Table (IAT) is modified to redirect system calls to the Malproxy stubs. Here are some examples of the IAT modifications:

- **Target Side**:
  - `NtQuerySystemInformation` -> `Ntdll.dll`
  - `OpenProcess` -> `Kernel32.dll`
  - `ReadProcessMemory` -> `Ntdll.dll`
  - `BCryptGenerateSymmetricKey` -> `Bcrypt.dll`
  - `ConvertSidToStringSidW` -> `Advapi32.dll`
  - `RtlAdjustPrivilege` -> `Ntdll.dll`
  - `NtQueryInformationProcess` -> `Ntdll.dll`
  - `RtlEqualUnicodeString` -> `Ntdll.dll`

- **Attacker Side**:
  - `NtQuerySystemInformation` -> `Malproxy`
  - `OpenProcess` -> `Malproxy`
  - `ReadProcessMemory` -> `Malproxy`
  - `BCryptGenerateSymmetricKey` -> `Bcrypt.dll`
  - `ConvertSidToStringSidW` -> `Advapi32.dll`
  - `RtlAdjustPrivilege` -> `Malproxy`
  - `NtQueryInformationProcess` -> `Malproxy`
  - `RtlEqualUnicodeString` -> `Ntdll.dll`

### Bypassing Security Solutions

Malproxy can bypass various endpoint protection mechanisms by using the following techniques:

- **Behavioral Signatures**: Bypasses behavioral detection by mimicking legitimate behavior.
- **Heuristic Rules**: Bypasses heuristic analysis by avoiding suspicious patterns.
- **Static Signatures**: Bypasses static signatures by modifying the binary or using obfuscation.

### Example Bypasses

- **Microsoft Defender**: Malproxied!
- **Symantec Norton Security**: Malproxied!
- **Kaspersky Internet Security**: Blocks `ReadProcessMemory` without a verdict.
- **ESET Smart Security**: Malproxied!
- **Avast Free Antivirus**: Blocks `OpenProcess` on `lsass.exe` without a verdict.
- **Bitdefender Total Security**: Malproxied!
- **McAfee Total Protection**: Malproxied!

### Mitigations

- **Hunt and Sign the Target-Side Proxy Stub**: Identify and block the proxy stubs on the target side.
- **Improve Behavioral Signature Engines**: Enhance the detection capabilities of behavioral signature engines to handle known weaknesses.

### Credits

- **The Crazy Ideas Section - Remote Syscalls by Yaron Shani**: [Link](http://breaking-the-system.blogspot.com/2016/06/the-crazy-ideas-section-remote-syscalls.html)
- **Syscall Proxying - Simulating remote execution by Maximiliano Caceres**: [Link](http://www.vodun.org/papers/exploits/SyscallProxying.pdf)
- **Syscall Proxying || Pivoting Systems by Filipe Balestra and Rodrigo Rubira Branco**: [Link](https://www.kernelhacking.com/rodrigo/docs/H2HCIII.pdf)

### Questions?

Feel free to ask any questions or provide feedback.