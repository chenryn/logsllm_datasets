## 前言
早前写过一个基于代理的模式的自动化的安全扫描器。  
当初是用python来写的一个代理，但是可能我实际安全测试的时候用burpsuite比较多一点，所以写个burpsuite的插件来被动的存储http请求到数据库里。  
这个也比较简单，所以大概跟同学们说下，代码会开源。
## 插件基础
基础环境的搭建可参考上篇文章，一些API的基础可参考官方文档。  
还是同之前的插件一样，所有的burpsuite插件都必须实现IBurpExtender这个接口。由于我们需要被动的收集http的请求，所以还要实现IScannerCheck。
为了界面客观性，加了个UI面板，所以需要实现ITab接口。
## 代码实现
burpsuite插件的注册声明
    public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.callbacks = callbacks;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.helpers = callbacks.getHelpers();
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stdout = new PrintWriter(callbacks.getStdout(),true);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;db = jdbcUtils.getInitJDBCUtil();
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bpGui(callbacks);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callbacks.setExtensionName(&quot;NST Proxy&quot;);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callbacks.registerScannerCheck(this);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stdout.println(&quot;NST Proxy V1.1 load Success &quot;);
    }
这个方法每个插件都要实现，基本操作都是类似的。初始化一些变量并注册插件。
为了避免一些静态资源js和css之类的存到数据库，所以进行了后缀的检测。
同样的，避免一些不需要检测的请求入库，还进行了域名的黑名单过滤。预定义如下
    &nbsp;&nbsp;&nbsp;&nbsp;public static String[] blackExt = {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;.ico&quot;,&quot;.woff&quot;,&quot;.flv&quot;,&quot;.js&quot;,&quot;.css&quot;,&quot;.jpg&quot;,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;.png&quot;,&quot;.jpeg&quot;,&quot;.gif&quot;,&quot;.pdf&quot;,&quot;.txt&quot;,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;.rar&quot;,&quot;.zip&quot;,&quot;.mp4&quot;,&quot;.svg&quot;,&quot;woff2&quot;,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;.swf&quot;,&quot;.wmi&quot;,&quot;.exe&quot;,&quot;.mpeg&quot;,&quot;.htm&quot;
    &nbsp;&nbsp;&nbsp;&nbsp;};
    &nbsp;&nbsp;&nbsp;&nbsp;public static String[] url_black_hosts = {&quot;.gov&quot;,&quot;qq.com&quot;,&quot;so.com&quot;,&quot;12306.cn&quot;,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;itwzw.cn&quot;,&quot;google&quot;,&quot;gstatic&quot;,&quot;cnzz.com&quot;,&quot;doubleclick&quot;,&quot;bootcss.com&quot;,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;360safe.com&quot;,&quot;mil.cn&quot;,&quot;gov.cn&quot;,&quot;gov.com&quot;,&quot;cnblogs.com&quot;,&quot;box3.cn&quot;,&quot;bdimg.com&quot;,&quot;360.cn&quot;,
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;baidu.com&quot;,&quot;csdn.com&quot;,&quot;github.com&quot;,&quot;127.0.0.1&quot;,&quot;localhost&quot;,&quot;googleadsserving.cn&quot;,&quot;.csdn.net&quot;
     };
可以根据需求来进行具体的修改。
检测方法如下
    public static boolean isblackext(String url) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (String ext : blackExt) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//such as : a.js
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(url.endsWith(ext)) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//such as : as.js?ver=20170101
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(url.contains(&quot;?&quot;)){
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[] urls = url.split(&quot;?&quot;);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isblackext(urls[0]);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
    &nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;public static boolean isblackdomain(String url) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (String string : url_black_hosts) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(url.contains(string)) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
    &nbsp;&nbsp;&nbsp;&nbsp;}
重复的URL地址将不会再次存储，每次入库前会进行查重，具体为
    public int queryrepeat(String url,String body,Connection conn) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String sql_exec = &quot;SELECT COUNT(*) as count FROM httplog WHERE url=? AND body = ?&quot;;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int flag = 0;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PreparedStatement ps = conn.prepareStatement(sql_exec);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ps.setString(1, url);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ps.setString(2, body);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResultSet rs = ps.executeQuery();
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (rs.next()) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag = rs.getInt(&quot;count&quot;);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return flag;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (SQLException e) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
    &nbsp;&nbsp;&nbsp;&nbsp; }
然后就是根据被动的请求，来拿到http请求，进行拆分组装后存到MySQL数据库里。
    String url = this.helpers.analyzeRequest(baseRequestResponse).getUrl().toString();
helpers是burpsuite提供的一个帮助类的插件，可由他来获取到http请求的URL，method，body参数等信息。
封装后入库。
    public int insert(Map&lt;String,String&gt; sql,Connection conn,PrintWriter stdout) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String sql_exec = &quot;INSERT INTO httplog(url,method,header,body) VALUE(?,?,?,?)&quot;;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PreparedStatement ps = conn.prepareStatement(sql_exec);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ps.setString(1, sql.get(&quot;url&quot;));
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ps.setString(2, sql.get(&quot;method&quot;));
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ps.setString(3, sql.get(&quot;headers&quot;));
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ps.setString(4, sql.get(&quot;body&quot;));
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = ps.executeUpdate();
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stdout.println(&quot;[+] insert [&quot;+i+&quot;] row &quot;);
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return i;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (SQLException e) {
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;
    &nbsp;&nbsp;&nbsp;&nbsp; }
httplog表结构如下，需要先创建表
    USE `scan`;
    /*Table structure for table `httplog` */
    DROP TABLE IF EXISTS `httplog`;
    CREATE TABLE `httplog` (
    &nbsp;&nbsp;`id` int(10) NOT NULL AUTO_INCREMENT,
    &nbsp;&nbsp;`url` varchar(255) DEFAULT NULL,
    &nbsp;&nbsp;`method` varchar(50) DEFAULT NULL,
    &nbsp;&nbsp;`header` text,
    &nbsp;&nbsp;`body` text,
    &nbsp;&nbsp;PRIMARY KEY (`id`)
    ) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8;
## 使用
直接导入插件后
修改响应的MySQL连接字符串，当Proxy被选中则存储到数据库，否则将不会处理。方便手工测试一些东西时，所以加个是否开启的开关。
控制台输出
然后浏览器开启burpsuite代理即可自动的存储到数据库中。
然后就可以根据具体的需要来进行检测漏洞了。
## 开源
项目地址  