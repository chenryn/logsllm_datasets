    }
    return 0;
}
```
### GDB的使用
首先最重要的，你需要使用编译器的 “-g“选项来编译程序，这样可执行程序才能通过GDB来运行。通过下列语句开始调试：
```
$ gdb -tui [可执行程序名]
```
使用”-tui“选项可以将代码显示在一个漂亮的交互式窗口内（所以被称为“文本用户界面 TUI”），在这个窗口内可以使用光标来操控，同时在下面的GDB shell中输入命令。
![](/data/attachment/album/201411/25/214816o1bzk8n34yz44uk4.jpg)
现在我们可以在程序的任何地方设置断点。你可以通过下列命令来为当前源文件的某一行设置断点。
```
break [行号]
```
或者为一个特定的函数设置断点：
```
break [函数名]
```
甚至可以设置条件断点
```
break [行号] if [条件]
```
例如，在我们的示例代码中，可以设置如下：
```
break 11 if i > 97
```
![](/data/attachment/album/201411/25/214819u358dd35vxdvrhsr.png)
这样，程序循环97次之后停留在“a++”语句上。这样是非常方便的，避免了我们需要手动循环97次。
最后但也是很重要的是，我们可以设置一个“观察断点”，当这个被观察的变量发生变化时，程序会被停止。
```
watch [变量]
```
这里我们可以设置如下：
```
watch d
```
当d的值发生变化时程序会停止运行（例如，当i>97为真时）。
当设置断点后，使用"run"命令开始运行程序，或按如下所示：
```
r [程序的输入参数（如果有的话）]
```
gdb中，大多数的命令单词都可以简写为一个字母。
不出意外，程序会停留在11行。这里，我们可以做些有趣的事情。下列命令：
```
bt
```
回溯功能（backtrace）可以让我们知道程序如何到达这条语句的。
![](/data/attachment/album/201411/25/214820d2evv028v0lkvpko.jpg)
```
info locals
```
这条语句会显示所有的局部变量以及它们的值（你可以看到，我没有为ｄ设置初始值，所以它现在的值是任意值）。
当然：
![](/data/attachment/album/201411/25/214827aijcxqxcuibi0mm8.jpg)
```
p [变量]
```
这个命令可以显示特定变量的值，而更进一步：
```
ptype [变量]
```
可以显示变量的类型。所以这里可以确定d是double型。
![](/data/attachment/album/201411/25/214829h8gk9g1t47mm758t.jpg)
既然已经到这一步了，我么不妨这么做：
```
set var [变量] = [新的值]
```
这样会覆盖变量的值。不过需要注意，你不能创建一个新的变量或改变变量的类型。我们可以这样做：
```
set var a = 0
```
![](/data/attachment/album/201411/25/214831ilo303cqk7ql7ka3.png)
如其他优秀的调试器一样，我们可以单步调试：
```
step
```
使用如上命令，运行到下一条语句，有可能进入到一个函数里面。或者使用：
```
next
```
这可以直接运行下一条语句，而不进入子函数内部。
![](/data/attachment/album/201411/25/214832kr5yyxuxksfz5c2b.jpg)
结束测试后，删除断点：
```
delete [行号]
```
从当前断点继续运行程序：
```
continue
```
退出GDB：
```
quit
```
总之，有了GDB，编译时不用祈祷上帝了，运行时不用血祭了，再也不用printf(“test“）了。当然，这里所讲的并不完整，而且GDB的功能远远不止于此。所以我强烈建议你自己更加深入的学习它。我现在感兴趣的是将GDB整合到Vim中。同时，这里有一个[备忘录](http://users.ece.utexas.edu/%7Eadnan/gdb-refcard.pdf)记录了GDB所有的命令行，以供查阅。
你对GDB有什么看法？你会将它与图形调试器对比吗，它有什么优势呢？对于将GDB集成到Vim有什么看法呢？将你的想法写到评论里。
---
via: 
作者：[Adrien Brochard](http://xmodulo.com/author/adrien) 译者：[SPccman](https://github.com/SPccman) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出