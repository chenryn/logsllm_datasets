些页面之间导航。在MainPage上，可以导航到SecondPage，通过传递一些数据可以从
SecondPage导航到ThirdPage。
因为有这些页面之间的通用功能，所以创建一个基类BasePage，所有这些页面都派生
自它。BasePage类派生自基类Page，实现了接口INotifyPropertyChanged，用于更新用户界
面。
    public abstract class BasePage : Page, INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      private string _navigationMode;
      public string NavigationMode
      {
        get { return _navigationMode; }
        set
        {
        _navigationMode = value;
        OnPropertyChanged();
        }
      }
      protected virtual void OnPropertyChanged(
        [CallerMemberName] string propertyName = null)
      {
        PropertyChanged? .Invoke(this, new PropertyChangedEventArgs(propertyName)
);
      }
      // etc.
    }
  注意： 接口INotifyPropertyChanged参见第31章，它用于实现变更通知。
32.2.2 重写Page类的导航
Page类是BasePage的基类（也是XAML页的基类），该类定义了用于导航的方法。当
导航到相应的页面时，会调用OnNavigatedTo方法。在这个页面中，可以看到导航是怎样
操作的（NavigationMode属性）和导航参数。OnNavigatingFrom方法是从页面中退出时调
用的第一个方法。在这里，导航可以取消。从这个页面中退出时，最终调用的是
OnNavigatedFrom方法。在这里，应该清理OnNavigatedTo方法分配的资源（代码文件
PageNavigation / App.xaml.cs）：
    public abstract class BasePage : Page, INotifyPropertyChanged
    {
      // etc.
      protected override void OnNavigatedTo(NavigationEventArgs e)
      {
        base.OnNavigatedTo(e);
        NavigationMode = $"Navigation Mode: {e.NavigationMode}";
        // etc.
      }
      protected override void OnNavigatingFrom(NavigatingCancelEventArgs e)
      {
        base.OnNavigatingFrom(e);
      }
      protected override void OnNavigatedFrom(NavigationEventArgs e)
      {
        base.OnNavigatedFrom(e);
        // etc.
      }
    }
32.2.3 在页面之间导航
下面实现3个页面。为了使用BasePage类，后台代码文件需要修改，以使用BasePage
作为基类（代码文件PageNavigation / MainPage.xaml.cs）：
    public sealed partial class MainPage : BasePage
    {
      // etc.
    }
基类的变化也需要反映在XAML文件中：使用BasePage元素代替Page 
（代码文件
PageNavigation/ MainPage.xaml）：
MainPage包含一个TextBlock元素和一个Button控件，TextBlock元素绑定到BasePage
中声明的NavigationMode属性上，按钮的Click事件绑定到OnNavigateToSecondPage方法上
（代码文件PageNavigation / MainPage.xaml）：
        Main Page
处理程序方法OnNavigateToSecondPage使用Frame.Navigate导航到SecondPage。Frame
是Page类上返回Frame实例的一个属性（代码文件PageNavigation / MainPage.xaml.cs）：
    public void OnNavigateToSecondPage()
    {
      Frame.Navigate(typeof(SecondPage));
    }
当从SecondPage导航到ThirdPage时，把一个参数传递给目标页面。参数可以在绑定
到Data属性的文本框中输入（代码文件PageNavigation /SecondPage.xaml）：
        Second Page
在后台代码文件中，Data属性传递给Navigate方法（代码文件PageNavigation
/SecondPage.xaml.cs）：
    public string Data { get; set; }
    public void OnNavigateToThirdPage()
    {
      Frame.Navigate(typeof(ThirdPage), Data);
    }
接收到的参数在ThirdPage中检索。在OnNavigatedTo方法中，NavigationEventArgs用
Parameter属性接收参数。Parameter属性是object类型，可以给页面导航传递任何数据（代
码文件PageNavigation/ ThirdPage.xaml.cs）：
    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
      base.OnNavigatedTo(e);
      Data = e.Parameter as string;
    }
    private string _data;
    public string Data
    {
      get { return _data; }
      set
      {
        _data = value;
        OnPropertyChanged();
      }
    }
32.2.4 后退按钮
当应用程序中有导航要求时，必须包括返回的方式。在Windows 8中，定制的后退按
钮位于页面的左上角。在Windows 
10中仍然可以这样做。的确，一些微软应用程序包括
这样一个按钮，Microsoft Edge在左上角放置了后退和前进按钮。应在前进按钮的附近放
置后退按钮。在Windows10中，可以利用系统的后退按钮。
根据应用程序运行在桌面模式还是平板电脑模式，后退按钮位于不同的地方。要启用
这个后退按钮，需要把SystemNavigationManager的AppViewBackButtonVisibility设置为
AppViewBackButton-Visibility，在下面的代码中，Frame.CanGoBack属性返回true时，就
是这种情况（代码文件PageNavigation / BasePage.cs）：
    protected override void OnNavigatedTo(NavigationEventArgs e)
    {
      NavigationMode = $"Navigation Mode: {e.NavigationMode}";
      SystemNavigationManager.GetForCurrentView().AppViewBackButtonVisibility =
        Frame.CanGoBack ? AppViewBackButtonVisibility.Visible :
        AppViewBackButtonVisibility.Collapsed;
      base.OnNavigatedTo(e);
    }
接下来，使用SystemNavigationManager类的BackRequested事件。对
BackRequestedEvent的响应可以用于完整的应用程序，如这里所示。如果只在几页上需要
这个功能，还可以把这段代码放在页面的OnNavigatedTo方法中（代码文件PageNavigation
/ App.xaml.cs）：
    protected override void OnLaunched(LaunchActivatedEventArgs e)
    {
      // etc.
      SystemNavigationManager.GetForCurrentView().BackRequested +=
        App_BackRequested;
      Window.Current.Activate();
    }
处理程序方法App_BackRequested在frame对象上调用GoBack方法（代码文件
PageNavigation /App.xaml.cs）：
    private void App_BackRequested(object sender, BackRequestedEventArgs e)
    {
      Frame rootFrame = Window.Current.Content as Frame;
      if (rootFrame == null) return;
      if (rootFrame.CanGoBack && e.Handled == false)
      {
        e.Handled = true;
        rootFrame.GoBack();
      }
    }
当在桌面模式中运行这个应用程序时，可以看到后退按钮位于上边界的左边角落里
（见图32-1）。如果应用程序在平板模式下运行，边界是不可见的，但后退按钮显示在底
部边界Windows按钮的旁边（见图32-2）。这是应用程序的新后退按钮。如果应用程序不
能导航，用户按下后退按钮，就导航回以前的应用程序。
图32-1
图32-2
在Windows Phone上运行应用程序时，就可以使用实际电话的按钮来返回（参见图32-
3）。
图32-3
32.2.5 Hub
也可以让用户使用Hub控件在单个页面的内容之间导航。这里可以使用的一个例子
是，希望显示一个图像，作为应用程序的入口点，用户滚动时显示更多的信息（参见图
32-4的照片搜索应用程序）。
图32-4
使用Hub控件，可以定义多个部分。每个部分有标题和内容。也可以让标题可以单
击，例如，导航到详细信息页面上。以下代码示例定义了一个Hub控件，在其中可以单击
部分2和3的标题。单击某部分的标题时，就调用Hub控件的SectionHeaderClick事件指定的
方法。每个部分都包括一个标题和一些内容。部分的内容由DataTemplate定义（代码文件
NavigationControls / HubPage.xaml）：
          Hub Header
          Section 1 Header
          Section 1
          Section 2 Header
          Section 2
          Section 3 Header
          Section 3
单击标题部分时，Info依赖属性就指定Tag属性的值。Info属性绑定在Hub控件的标题
上（代码文件NavigationControls /HubPage.xaml.cs）：
    public void OnHeaderClick(object sender, HubSectionHeaderClickEventArgs e)
    {
      Info = e.Section.Tag as string;
    }
    public string Info
    {
      get { return (string)GetValue(InfoProperty); }
      set { SetValue(InfoProperty, value); }
    }
    public static readonly DependencyProperty InfoProperty =
      DependencyProperty.Register("Info", typeof(string), typeof(HubPage),
        new PropertyMetadata(string.Empty));
  注意： 依赖属性参见第29章。
运行这个应用程序时，可以看到多个hub部分（参见图32-5），在部分2和3上有See
More链接，因为在这些部分中，IsHeaderInteractive设置为true。当然，可以创建一个定制
的标题模板，给标题指定不同的外观。
图32-5
  注意： 创建自定义模板参见第30章。
32.2.6 Pivot
使用Pivot控件可以为导航创建类似枢轴的外观。在Windows 8中，这个控件只用于手
机，但是现在它也可用于UWP。
Pivot控件可以包含多个PivotItem控件。每个PivotItem控件都有一个标题和内容。
Pivot本身包含左、右标题。示例代码填充了右标题（代码文件NavigationControls 
/
PivotPage.xaml）：
        Right Header
        Header Pivot 1
        Pivot 1 Content
        Header Pivot 2
        Pivot 2 Content
        Header Pivot 3
        Pivot 3 Content
        Header Pivot 4
        Pivot 4 Content
运行应用程序时，可以看到Pivot控件（参见图32-6）。右标题在右边总是可见。单击
一个标题，可以查看项的内容。
图32-6
如果所有标题不符合屏幕的大小，用户就可以滚动。使用鼠标进行导航，可以看到左
右边的箭头，如图32-7所示。
图32-7
32.2.7 应用程序shell
Windows 
10应用程序经常使用SplitView控件。这个控件通常用于在左边显示导航菜
单（由图像和/或文本组成），在右边显示选择的内容。使用汉堡按钮，可以显示或隐藏
菜单。例如，Groove Music应用程序的外观取决于可用的宽度。图32-8中的应用程序在左
边的SplitView窗格中显示使用文本和图标的菜单。当显示宽度降低时，SplitView窗格显
示只有图标的收缩视图，如图32-9所示。当宽度减少了更多时，就完全删除菜单，如图
32-10所示。
图32-8
图32-9
图32-10
示例应用程序使用SplitView和汉堡按钮，添加了更多的功能。当使用菜单在多个页
面之间导航时，最好使菜单可用于所有页面。导航使用Frame类的方法工作，如本章前面