title:CrossTalk: Speculative Data Leaks Across Cores Are Real
author:Hany Ragab and
Alyssa Milburn and
Kaveh Razavi and
Herbert Bos and
Cristiano Giuffrida
0
2
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
CROSSTALK: Speculative Data Leaks
Across Cores Are Real
Hany Ragab∗†, Alyssa Milburn∗†, Kaveh Razavi§, Herbert Bos∗, and Cristiano Giuffrida∗
Vrije Universiteit Amsterdam, The Netherlands
∗Department of Computer Science
{hany.ragab, a.a.milburn}@vu.nl
{herbertb, giuffrida}@cs.vu.nl
§D-ITET
ETH Zurich, Switzerland
PI:EMAIL
†Equal contribution joint ﬁrst authors
Abstract—Recent
transient execution attacks have demon-
strated that attackers may leak sensitive information across
security boundaries on a shared CPU core. Up until now, it
seemed possible to prevent this by isolating potential victims and
attackers on separate cores. In this paper, we show that the
situation is more serious, as transient execution attacks can leak
data across different cores on many modern Intel CPUs.
We do so by investigating the behavior of x86 instructions,
and in particular, we focus on complex microcoded instructions
which perform offcore requests. Combined with transient execu-
tion vulnerabilities such as Micro-architectural Data Sampling
(MDS), these operations can reveal internal CPU state. Using
performance counters, we build a proﬁler, CROSSTALK,
to
examine the number and nature of such operations for many
x86 instructions, and ﬁnd that some instructions read data from
a staging buffer which is shared between all CPU cores.
To demonstrate the security impact of this behavior, we present
the ﬁrst cross-core attack using transient execution, showing that
even the seemingly-innocuous CPUID instruction can be used by
attackers to sample the entire staging buffer containing sensitive
data – most importantly, output from the hardware random
number generator (RNG) – across cores. We show that this
can be exploited in practice to attack SGX enclaves running
on a completely different core, where an attacker can control
leakage using practical performance degradation attacks, and
demonstrate that we can successfully determine enclave private
keys. Since existing mitigations which rely on spatial or temporal
partitioning are largely ineffective to prevent our proposed
attack, we also discuss potential new mitigation techniques.
Index Terms—transient execution attacks, side channels
I. INTRODUCTION
Recent research into transient execution vulnerabilities1
has shown that more attention should be paid to the in-
ternal details of CPU pipelines. Meltdown [1], Spectre [2],
Foreshadow [3], ZombieLoad [4] and RIDL [5] collectively
demonstrated direct information leakage across any and all
security domains supported by modern CPU cores. This is
due to the transient execution performed by modern CPU
pipelines, which allows an attacker to observe side-effects
of transiently executed code. Mitigations include hardware
updates, microcode updates, operating system updates, and
user-level defenses but they have been costly [6], [7] and
1also known as speculative execution vulnerabilities
incomplete [2], [5]. So far these attacks have required the
attacker and victim to share the same core, fueling the belief
that isolating different security domains on their own cores
would prevent these transient execution attacks – leaving us
only with well-understood timing attacks on shared resources
such as caches. Various scheduling mechanisms in operating
systems and hypervisors follow this belief and isolate different
security contexts on their own cores [8]–[10]. In this paper,
we challenge this belief and show that sensitive information
leaks across cores in modern Intel CPUs, via a staging buffer
that is shared across cores.
To investigate the leakage surface of transient execution
across cores, we build CROSSTALK, a framework for identify-
ing and proﬁling x86 instructions in different contexts. Unlike
previous work [11] which characterizes the performance of
instructions, CROSSTALK executes instructions in a variety of
different contexts (most importantly, with different operands),
which allows us to investigate a wider range of instruction
behavior, and collects data from a wider range of performance
counters. This led us to a number of interesting observations:
most importantly, the existence of a global (cross-core) shared
staging buffer in a variety of Intel processors that retains
information from previously executed instructions. We explore
this using the second phase of CROSSTALK, which uses the re-
cently discovered MDS transient execution vulnerabilities [4],
[5] to further investigate the nature of these instructions by
observing which instructions modify the buffer, and leaking
the data they leave behind in this buffer.
In more detail, the CROSSTALK analysis focuses on x86
instructions with non-trivial behavior, which we found to be
decoded to multiple micro-ops. Micro-ops for Intel processors
are undocumented and have, as of yet, received relatively
little scrutiny from the security community. The number and
nature of these micro-ops depend on the context of the
instruction (such as the operands provided), and in some of
these situations, they perform offcore reads and writes using
internal CPU interconnects. Two examples are the RDMSR
and WRMSR instructions, which allow privileged code to read
from and write to model-speciﬁc registers. We also found this
behavior in instructions typically available to userspace —
© 2021, Hany Ragab. Under license to IEEE.
DOI 10.1109/SP40001.2021.00020
1852
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
such as CPUID, RDRAND and RDSEED. Most crucially, we
observed that Intel CPUs perform reads from certain CPU-
internal sources using a shared ‘staging’ buffer. The contents
of this buffer are visible to any core on the system that can
execute these instructions—including non-privileged userspace
applications within a virtual machine.
The security implications of this behavior are serious, as it
allows attackers to mount transient execution attacks across
CPU cores, which implies that mitigations separating security
domains at the granularity of cores are insufﬁcient. Although
our attacks do not expose the contents of memory or registers,
we exemplify the threat posed by this shared staging buffer by
implementing a cross-core attack for leaking random numbers
generated via the RDRAND and RDSEED instructions. We show
that we can exploit this in practice against SGX enclaves,
which are amenable to practical performance degradation
attacks. The leak allows attackers to observe the output of the
hardware random number generator (RNG) in other virtual
machines or even SGX enclaves on the same machine, even
when hyperthreading (SMT) has been disabled and all other
standard mitigations have been applied. Furthermore, given
that RDRAND and RDSEED are the only local sources of
randomness inside SGX, the attack compromises currently-
deployed SGX enclaves which rely on randomness for their
cryptographic operations. Finally, we show that even recent
Intel CPUs – including those used by public cloud providers
to support SGX enclaves – are vulnerable to these attacks.
To summarize, our contributions are:
• We
the
and
design
present
implementation
of
for analyzing the behavior
CROSSTALK, a proﬁler
of instructions on Intel CPUs in different contexts. We
use CROSSTALK to perform an analysis of the behavior
of instructions on Intel CPUs, with a focus on complex
instructions
undocumented
“offcore” accesses on internal CPU buses.
performing
those
and
• We show that some of these offcore reads can leak
information across cores on modern Intel CPUs, due to
their use of a globally shared buffer (which we refer to
as the staging buffer). Using CROSSTALK, we analyze
the way in which instructions use this buffer, show that
it can contain sensitive information, and demonstrate that
this mechanism can be (ab)used as a stealthy cross-core
covert channel.
• To demonstrate the security impact of our ﬁndings,
the ﬁrst cross-core attack using transient
we present
execution. By leaking RDRAND output, we obtain an
ECDSA private key from an SGX enclave running on
a separate physical core after just a single signature
operation. More details about CROSSTALK and our at-
tack, including proof-of-concepts (PoCs) are available at
https://www.vusec.net/projects/crosstalk.
• We discuss existing mitigations and argue that they are
largely ineffective against our attack, and present results
for Intel’s new in-microcode mitigation.
II. BACKGROUND
Ever since the public disclosure of Meltdown [1] and Spec-
tre [2], transient/speculative and out-of-order execution attacks
have stormed onto the security stage with new and often
devastating vulnerabilities appearing constantly [1]–[5], [12],
[13]. They leak information from a wide variety of sources,
including data caches and CPU buffers such as (line) ﬁll
buffers, load ports and store buffers. What these vulnerabilities
have in common is that ﬁxing them is typically expensive [6],
[7],
[5], or even impossible for existing hardware [14]. In
this paper, we make use of the MDS vulnerabilities [4], [5],
[13] as a vehicle for ﬁnding information leakage beyond what
happens inside a single core.
A. Microarchitectural Data Sampling (MDS)
The vulnerability which Intel calls Microarchitectural Data
Sampling (MDS), also referred to as RIDL [5], Zom-
bieLoad [4] and Fallout [13], allows attackers to leak sen-
sitive data across arbitrary security boundaries on Intel CPUs.
Speciﬁcally, they can obtain arbitrary in-ﬂight data from inter-
nal buffers (Line Fill Buffers, Load Ports, and Store Buffers)—
including data that was never stored in CPU caches. We brieﬂy
discuss these three buffers.
Line Fill Buffers (LFBs) are internal buffers that the CPU
uses to keep track of outstanding memory requests. For
instance, if a load misses the cache, rather than blocking
further use of the cache, the load is placed in the LFB and
handled asynchronously. This allows the cache to serve other
requests in the meantime. As an optimization, when a load
is executed and the data happens to be already available in
the LFB, the CPU may supply this data directly. Intel CPUs
also transiently supply this data when a load is aborted, due
to an exception or microcode assist (e.g., setting dirty bits
in a page table). An attacker who can observe side-effects
from transiently executed code can take advantage of this to
obtain data in LFB entries containing memory belonging to a
different security domain, such as another thread on the same
CPU core, or a kernel/hypervisor. This vulnerability is known
as Microarchitectural Fill Buffer Data Sampling (MFBDS).
Store Buffers (SBs) track pending stores. In addition, they
play a role in optimizations such as store-to-load forwarding
where the CPU optimistically provides data in the store buffer
to a load operation if it accesses the same memory as a prior
store. Again, this transiently forwarded data may belong to
another security domain, allowing an attacker to leak it.
Finally, load ports are used by the CPU pipeline when
loading data from memory or I/O. When a load micro-op
is executed, data from memory or I/O is ﬁrst stored in the
load ports before it gets transferred to the register ﬁle and or
younger operations that depend on it. When load instructions
are aborted during execution, they may transiently forward the
stale data from previous loads, which attackers can leak using
transient execution.
As an example, we consider a ‘RIDL-style’ MDS attack
– using LFBs – performed with four steps. First, the attacker
creates a FLUSH + RELOAD array, with one cache line for each
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:49 UTC from IEEE Xplore.  Restrictions apply. 
1853
TABLE I: Examples of relevant CPU (Skylake) performance counters.
Name
UOPS EXECUTED
UOPS DISPATCHED
IDQ
OTHER ASSISTS
MEM INST RETIRED
OFFCORE REQUESTS
OFF CORE RESPONSE