Watcher to control access to a new content type, Private Groups,
provided by the Organic Groups module. By tracking unpublished
content and Private Group data, FlowWatcher can prevent the data
disclosure caused by the two above bugs.
OwnCloud [40] is a cloud hosting software that allows users to
store ﬁles, contacts and calendars, and share these with other users
611or groups. In versions before 4.5.11 and 5.0.6, the ﬁle apps/cal-
endar/ajax/events.php lacked a correct ownership check for calen-
dars, enabling users to download any calendar by manually setting
the calendar_id parameter in the request URL (CVE-2013-2043).
In versions before 6.0.3, a missing access check revealed contacts
from the address book of one user to others (CVE-2014-3834).
The UDA policy for OwnCloud encodes the group membership
policy and the data sharing behaviour with respect to calendar and
contact information with 7 rules in 21 lines. Since the rules stip-
ulate that calendars and contacts must only be visible to users and
groups that they are shared with, FlowWatcher prevents the data
leakage caused by both reported bugs.
DokuWiki [12] is a Wiki application that does not require a database.
It has built-in support for user groups, and an access control model
that restricts access to Wiki entries (including page titles) for users
and groups. In CVE-2010-0287, a directory traversal vulnerabil-
ity was introduced due to a missing check, allowing any user to
view the titles of pages by navigating to a specially-crafted URL.
DokuWiki stores user data as ﬁles, and if ﬁles have insufﬁcient
access control, data from one user can ﬂow to another. A ﬁle inclu-
sion bug (CVE-2009-1960) allowed unauthorised users to access
text of any page. DokuWiki’s policy has 7 rules (26 lines), and
FlowWatcher prevents the disclosure from both vulnerabilities.
phpMyAdmin [44] is a PHP tool for the administration of databases
over the web. It provides a user interface for managing databases,
users and permissions and supports user groups. User information
is considered private, and users should not be able to see informa-
tion about other users, unless they are part of the same group. A
missing access control check in the application permitted users to
see members of all groups (CVE-2014-4987).
We create a UDA policy with 3 rules (9 lines) that models the
group membership, while tracking user names and other details,
such as passwords. Using this policy, FlowWatcher can identify
and prevent unauthorised leaks of user information between users,
including the above bug. Note that this does not constitute a com-
plete access control policy for phpMyAdmin—extra rules would be
required to control access to other data objects such as databases.
WordPress [54] is a content management system for weblogs and
websites. WordPress allows users to create posts and determine
who to share them with (i.e. public, private or password-protected).
Private posts should only be visible to the creator of the post. Posts
that are moved to the trash folder should not be visible to anyone. A
bug in WordPress versions prior to 2.9.2 (CVE-2010-0682) allowed
any user to view a trashed post by changing the value of the post
identiﬁer (p=) in the request URL.
The UDA policy for WordPress consists of 8 rules written in
23 lines—we give the complete policy in Appendix A. It expresses
access semantics to posts in the trash through a special Null group
without users. When a post is moved to the trash, FlowWatcher
assigns the data object to the Null group, which speciﬁes that no
other users should be able to view the post. This prevents the data
disclosure described in CVE-2010-0682. When a trashed post is
restored, it is removed from the Null group.
Another feature of WordPress are password-protected posts, which
should only be accessible to users with the correct password. In
CVE-2014-5337, a missing access check permitted a user to view
password-protected posts by navigating to export/content.php,
without entering the password. FlowWatcher is unable to defend
against this bug because the UDA policy cannot express the dy-
namic change to the access control list after the password was shared
out-of-band (i.e. without a request by a user that can be observed
by FlowWatcher).
Characteristic
HTTP requests
HTTP POST requests
Distinct POST URLs
Users
Groups
Form ﬁelds
Total form ﬁeld values submitted
Value
85,309
461
59
48
10
363
1271
Table 3: Summary of HTTP trace dataset for GitLab
phpBB [43] is a forum application. Forum access can be restricted
to speciﬁc groups of users. Each forum contains topics, and topics
can contain replies. Versions of phpBB prior to 3.0.7-PL1 had a
vulnerability caused by an improper permissions check for feeds,
enabling any user to access data from a private forum by requesting
its RSS feed (CVE-2010-1627).
We model the policy of phpBB with 6 rules (18 lines). A Forum-
Data data object has three data items, namely the forum name, top-
ics created under the forum, and replies on a topic. Since the cre-
ation of each data item entails a visit to a different URL, the UDA
policy has multiple data deﬁnition rules for ForumData based on the
request URL. It also has two rules to update group membership
and group access to ForumData. By tracking forum data and group
access to forums, FlowWatcher can prevent the data leak through
RSS feeds.
Dropbox [14] is a popular cloud-based ﬁle storage application that
we use to illustrate a key advantage of FlowWatcher—its ability
to prevent data disclosure for large complex, closed-source appli-
cations. In this scenario, we assume that FlowWatcher is deployed
by Dropbox as part of its back-end service.
Dropbox has several mechanisms for sharing data, one of which
is to create private links with which any user can access the asso-
ciated content. Dropbox allows to restrict access to private links
by setting an expiry date. However, inadvertent sharing of a pri-
vate link can lead to unwanted data disclosure—in particular, a bug
was reported whereby any Dropbox document shared using a pri-
vate link could leak the link through the HTTP referer header if the
document itself contained a link to a third-party website [15].
By examining Dropbox’s web interface, we create a UDA pol-
icy that enforces the expiry of private links. The policy contains
3 rules (14 lines): user and data deﬁnition rules for adding a new
user and a ﬁle, and a group update rule for tracking the creation of
a private link to a ﬁle. The group update rule uses a special any
group in combination with an expiry statement in the rule body to
allow public access to the linked content until the link expiry time
is reached.
5.3 How effective is FlowWatcher’s tracking?
Next we explore our hypothesis that it is possible to track most
of a typical application’s user data, with low false positive and neg-
ative rates, by only considering data items with a length above the
minimum uniqueness length α (see §4.3). For this, we employ a
complete HTTP request and response trace from a deployment of
GitLab [23], a web application for project and repository manage-
ment, collected at our university over a period of two months.
Table 3 summarises the properties of the trace. Most of the
HTTP POST request URLs are for group wikis and issue track-
ing, with the remainder involving user proﬁles and admin pages.
The number of form ﬁelds in the trace corresponds to the number
of potential data objects (assuming a single data item per object);
the number of form ﬁeld values corresponds to the number of po-
tentially trackable data object instances.
612Figure 3: Impact of minimum uniqueness length α on data
tracking for form ﬁeld values submitted to GitLab
Figure 4: Request throughput with and without FlowWatcher
under an increasing client workload
We associate each form ﬁeld in an HTTP POST request with a
user session, and consider the percentage of useful-to-track form
ﬁeld values, i.e. ones that are only observed in the requests of a
single user (or group). A high percentage of useful-to-track values
means that tracking them through a UDA policy should lead to few
false negatives, i.e. cases in which FlowWatcher misses unautho-
rised data disclosure because it did not track the involved user data.
We ignore form ﬁelds that are part of a static_data whitelist for
GitLab and cannot be modiﬁed by the user.
Figure 3 shows the percentage of useful-to-track form ﬁeld val-
ues as we increase the minimum uniqueness length α. It also shows
the percentage of form ﬁeld values with lengths of more than α. We
can see that, as α increases, the form ﬁeld values become useful-to-
track quickly: over 99% of values with lengths greater than 4 char-
acters are speciﬁc to a given user or group; all form ﬁeld values
with more than 7 characters are useful-to-track. With α = 4, over
90% of all form ﬁeld values remain trackable by FlowWatcher;
even with α = 7, over 85% of form ﬁeld values are included.
This analysis shows that, even when a UDA policy includes all
form ﬁelds used by GitLab as tracked data items, FlowWatcher can
achieve a substantial coverage of form ﬁeld values for a short min-
imum uniqueness length α. In addition, since tracked data items
quickly become unique, FlowWatcher does not exhibit false pos-
itives when it does not track all user-generated data due to an in-
complete UDA policy.
The data stored by FlowWatcher is enumerated at the beginning
of §4.1. Assuming that the number of groups remains largely un-
changed over the application’s lifetime, the user_auth map and the
group_member map grow linearly with the number of users of the
application. As described at the end of §4.3, the object_acl and
data_items maps, which are conﬂated into a single data structure
for the implementation, grow linearly with the number of unique
data items added to the application, but are independent of the size
of the data items. For our two-month deployment of GitLab, Flow-
Watcher requires less than 100 KB of memory.
5.4 What is the performance impact?
We explore the performance impact that FlowWatcher has on
request throughput and response latency in a realistic web appli-
cation deployment. We use Drupal [16] (version 6.31) with an
Apache HTTP server and a MySQL database, which are both de-
ployed on a server with an Intel Xeon E5-2690 CPU with 32 GB of
RAM. FlowWatcher runs with Nginx as a reverse proxy, forward-
ing requests and responses from and to clients. The Nginx proxy
executes on a machine with an Intel Xeon E5-4620 with 64 GB of
RAM. FlowWatcher uses the Drupal UDA policy from Listing 1,
tracking article titles and bodies for access control enforcement.
We preload the Drupal installation with 6000 users and 60 user
groups, with each user assigned to one group. For a realistic work-
load, we use Apache JMeter [1] to generate HTTP requests based
Figure 5: Latency with and without FlowWatcher under an
increasing client workload
on the following workﬂow: each client (1) visits the main page and
goes to the log-in page; (2) logs in and is redirected to the main
page with a list of recent posts; (3) accesses the “Add post” page
and creates a new post; (4) visits the new post; and (5) logs out.
We evaluate the performance of FlowWatcher with 1 to 60 con-
current clients. Each time a client performs the above workﬂow, it
logs in as a different user. A fraction of the posts (5%) are assigned
to the access-restricted group of the user making that request. This
is below the read/write ratio of the GitLab trace described in §5.3,
reﬂecting the nature of real-world deployments. Access-restricting
some of the posts ensures that FlowWatcher must redact the re-
sponse to a subset of all read requests. As for a production en-
vironment, we enable both PHP intermediate code caching and
Drupal’s page cache for improved performance. We execute ﬁve
runs for two experiments—one with FlowWatcher and one with-
out. Throughout the experiments, the CPU utilisation on the proxy
machine never exceeds 10%.
Figure 4 shows the measured throughput with and without Flow-
Watcher. As can be seen, FlowWatcher has no discernible impact
on throughput.
In both deployments, the throughput ﬂattens out
after 20 concurrent clients when the web server becomes saturated.
As all responses contain dynamic content, the reported throughput
represents a worst case scenario for Drupal because it cannot serve
cached content. Figure 5 shows the average response latency with
an increasing client workload. Even with 60 clients, there is no
statistically signiﬁcant latency increase due to FlowWatcher. The
high latency variance for both deployments is due to the different
costs of requests in the executed workﬂow.
6. RELATED WORK
In addition to the related approaches discussed in §2.2, we dis-
cuss further related work, contrasting with FlowWatcher in terms
of scope and effect.
Data ﬂow tracking enforces access control throughout an appli-
cation by associating access control state with data ﬂows [10, 55].
CloudFence [41] uses binary rewriting and byte-level taint tracking
 20 30 40 50 60 70 80 90 100 0 10 20 30 40 50 60 70 80% of form field valuesMinimum length (characters)Useful to trackLength > Min. length 0 20 40 60 80 100 120 0 10 20 30 40 50 60Requests per secondNumber of concurrent clientsDrupalDrupal + FlowWatcher 0 200 400 600 800 1000 0 10 20 30 40 50 60Latency (in ms)Number of concurrent clientsDrupalDrupal + FlowWatcher613to give data ﬂow guarantees. SilverLine [33] provides even stronger
containment using Information Flow Control to guarantee isolation
of both data and control ﬂows. It propagates taint information into
the application database, but cannot effectively support valid infor-
mation ﬂows between users. However, the signiﬁcant performance
overheads and tight language binding limit the broad adoption of
data ﬂow tracking approaches. In contrast, FlowWatcher protects
unmodiﬁed applications with low overhead but, as a black-box ap-
proach, it does not detect data disclosure when the application mod-
iﬁes the data.
Web application ﬁrewalls (WAFs) monitor and potentially block
data passed to/from web applications. ModSecurity [31] acts as a
reverse proxy and has rules to detect certain classes of data, such
as credit card number patterns. However, this approach is prone to
false positives, and, unlike FlowWatcher, cannot detect leakage of
speciﬁc user data. WAFs also support other types of data disclosure
protection [27], such as trafﬁc anomaly detection, and HTTP re-
quest sanitising techniques to prevent injection attacks. We regard
this as complementary to FlowWatcher, which could be integrated
with existing proxy-based WAFs.
Secure web frameworks aim to offer comprehensive enforcement
of access control policies. They are typically tied to a particular de-
velopment framework, such as the model-policy-view-controller of
the Hails architecture [22]. The Passe framework [5] executes iso-
lated server processes in sandboxes, ensuring that each web page
view runs with the minimum required privileges. Here again, a
learning phase is needed to identify the associations between views,
database queries, and data ﬂow. Similarly, GuardRails [6] modiﬁes
an annotated Ruby-on-Rails web application, to add secondary ac-
cess control checks on sensitive data. Unlike FlowWatcher, all of
these approaches require speciﬁcally written or annotated applica-
tion code within a given framework.
Policy languages. A large number of policy languages exist for dif-
ferent access control models [36, 11]. Existing policy languages fo-