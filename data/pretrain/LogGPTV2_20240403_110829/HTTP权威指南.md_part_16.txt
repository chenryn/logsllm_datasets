### 实体缓存相关信息

实体相关的信息包括验证已缓存资源副本是否仍然有效所需的数据，以及用于更准确估计已缓存资源何时失效的线索。第七章将深入探讨HTTP请求与响应的缓存机制，并在此过程中再次提及这些头部字段。表3-23列出了几种常见的实体缓存头部。

**表3-23 实体缓存头部**

| 首部 | 描述 |
| --- | --- |
| ETag | 该实体的唯一标识符，用于版本控制。 |
| Expires | 指定一个日期/时间，在此之后，认为该实体过期，需要从源服务器重新获取。 |
| Last-Modified | 记录该实体最后一次被修改的时间戳。 |

**注释：**
- RFC 2616中并未定义Content-Base头部。
- ETag本质上是特定资源版本的一个标识符。

---

### 更多信息资源

对于进一步了解，请参考以下资料：
- [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616.txt) - 由R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach 和 T. Berners-Lee共同编写的“超文本传输协议”规范。
- 《HTTP口袋书》- 作者Clintin Wong，O’Reilly & Associates出版。
- [W3C HTTP架构页面](http://www.w3.org/Protocols/) - 提供关于HTTP的更多信息和资源。

---

### 第四章 连接管理

虽然HTTP规范详细描述了报文结构，但对于连接管理方面的内容则相对较少涉及。理解HTTP连接的工作原理及其使用方法对于开发HTTP应用至关重要。本章旨在介绍：

- HTTP如何利用TCP连接；
- TCP连接中存在的延迟、瓶颈及障碍；
- HTTP性能优化技术，如并行连接、持久连接（keep-alive）和管道化连接；
- 管理连接时的最佳实践与应避免的行为。

#### 4.1 TCP连接

几乎所有的HTTP通信都是基于TCP/IP协议进行的，这是一种广泛应用于全球计算机网络的标准分组交换协议集。客户端可以建立一条TCP/IP连接至任何地方运行的服务器应用程序上。一旦连接建立成功，通过这条连接发送的消息保证不会丢失、损坏或乱序。

例如，访问Joe五金店最新的电动工具价格列表URL: `http://www.joes-hardware.com:80/power-tools.html`，浏览器会执行如下步骤（图4-1所示）来处理这个请求，包括解析主机名、DNS查询IP地址、确定端口号、发起TCP连接等过程。

**图4-1 Web浏览器与Web服务器间基于TCP连接的交互流程**

![图4-1](http://example.com/image_url)

#### 4.1.1 可靠的数据传输管道

TCP为HTTP提供了一个可靠的数据传输通道，确保数据能够以正确的顺序无损地到达目的地。然而，若遇到网络故障或系统崩溃等情况，尽管单个数据包不会受损，但整个通信链路可能会中断。

#### 4.1.2 数据分割与传输

TCP数据流会被分割成小段并通过IP数据包形式在网络中传递。这意味着HTTP实际上是构建于TCP之上，而后者又依赖于IP层的支持。对于安全需求较高的应用场景，HTTPS会在HTTP和TCP之间增加一层加密协议（TLS或SSL），以保护数据的安全性（见图4-3）。

**图4-3 HTTP与HTTPS协议栈对比**

![图4-3](http://example.com/image_url)

当HTTP需要发送消息时，它会通过已打开的TCP连接按序发送数据流。TCP负责将这些数据流切割成段，并封装进IP数据包中进行传输。每个IP数据包包含头部信息（通常为20字节）、TCP段头部（同样通常是20字节）以及实际的数据块。

#### 4.1.3 维持TCP连接

一台计算机在同一时刻可能拥有多个处于活动状态的TCP连接。TCP通过端口号来区分这些不同的连接。端口号类似于电话系统的分机号，使得即使在同一个IP地址下也能准确地定位到相应的服务或进程。

#### 4.1.4 使用套接字API编程

操作系统提供了多种工具来管理和操作TCP连接。其中最常用的就是套接字API，它允许开发者创建、绑定、监听和关闭TCP端点，并且隐藏了底层网络协议的具体实现细节。表4-2列举了一些常用的套接字接口函数。

**表4-2 常用套接字接口函数**

| 函数 | 功能说明 |
| --- | --- |
| socket() | 创建一个新的未命名、未关联的套接字。 |
| bind() | 将套接字绑定到本地端口和接口。 |
| connect() | 连接到远程主机上的指定端口。 |
| listen() | 标记套接字以便接受传入连接。 |
| accept() | 接受一个即将建立的新连接。 |
| read() | 从套接字读取数据到缓冲区。 |
| write() | 从缓冲区向套接字写入数据。 |
| close() | 完全关闭TCP连接。 |
| shutdown() | 单方面关闭TCP连接的输入或输出方向。 |
| getsockopt(), setsockopt() | 读取或设置内部套接字配置选项。 |

通过上述接口，我们可以编写出能够处理HTTP事务的简单客户端和服务端程序。图4-6展示了这样一个例子，演示了如何使用套接字API完成一次完整的HTTP请求-响应周期。

**图4-6 通过套接字API实现HTTP事务**

![图4-6](http://example.com/image_url)

以上就是关于HTTP连接管理和相关编程接口的基本介绍。希望这能帮助你更好地理解和应用这些知识。