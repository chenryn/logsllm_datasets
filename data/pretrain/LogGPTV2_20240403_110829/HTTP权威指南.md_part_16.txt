实体有关的信息——比如，验证已缓存的资源副本是否仍然有效所需的信息，以及
更好地估计已缓存资源何时失效所需的线索。
第7章深入讨论了HTTP请求和响应的缓存。在那里我们会再次看到这些首部。表
3-23列出了一些实体缓存首部。
表3-23 实体缓存首部
首 部 描 述
ETag 与此实体相关的实体标记21
Expires 实体不再有效，要从原始的源端再次获取此实体的日期和时间
Last-Modified 这个实体最后一次被修改的日期和时间
注20： RFC 2616中没有定义Content-Base首部。
注21： 实体标记本质上来说就是某个特定资源版本的标识符。
76 ｜ 第3章
3.6 更多信息
更多信息请参见下列资源。
• http://www.w3.org/Protocols/rfc2616/rfc2616.txt
RFC 2616，“Hypertext Transfer Protocol”，由R. Fielding、J. Gettys、J. Mogul、
H. Frystyk、L. Mastinter、P. Leach和T. Berners-Lee编写。
• HTTP Pocket Reference（《HTTP口袋书》）
Clintin Wong编写，O’Reilly & Associates公司出版。
• http://www.w3.org/Protocols/
HTTP的W3C架构页面。 73
HTTP报文 ｜ 77
第4章
连接管理
79
HTTP规范对HTTP报文解释得很清楚，但对HTTP连接介绍的并不多，HTTP连
接是HTTP报文传输的关键通道。编写HTTP应用程序的程序员需要理解HTTP连
接的来龙去脉以及如何使用这些连接。
HTTP连接管理有点像魔术，应当从经验与实践，而不仅仅是出版的文献中学习。
通过本章，可以了解到：
• HTTP是如何使用TCP连接的；
• TCP连接的时延、瓶颈以及存在的障碍；
• HTTP的优化，包括并行连接、keep-alive（持久连接）和管道化连接；
• 管理连接时应该以及不应该做的事情。
4.1 TCP连接
世界上几乎所有的HTTP通信都是由TCP/IP承载的，TCP/IP是全球计算机及网络
设备都在使用的一种常用的分组交换网络分层协议集。客户端应用程序可以打开一
条TCP/IP连接，连接到可能运行在世界任何地方的服务器应用程序。一旦连接建
立起来了，在客户端和服务器的计算机之间交换的报文就永远不会丢失、受损或
失序。1
比如，你想获取Joe的五金商店最新的电动工具价目表：
http://www.joes-hardware.com:80/power-tools.html
浏览器收到这个URL时，会执行图4-1所示的步骤。第(1)～(3)步会将服务器的
74 IP地址和端口号从URL中分离出来。在第(4)步中建立到Web服务器的TCP连
接，并在第(5)步通过这条连接发送一条请求报文。在第(6)步读取响应，并在第
(7)步关闭连接。
4.1.1 TCP的可靠数据管道
HTTP连接实际上就是TCP连接及其使用规则。TCP连接是因特网上的可靠连接。
要想正确、快速地发送数据，就需要了解TCP的一些基本知识。2
注1： 尽管报文不会丢失或受损，但如果计算机或网络崩溃了，客户端和服务器之间的通信仍然会被断开。
在这种情况下，会通知客户端和服务器通信中断了。
注2： 如果要编写复杂的HTTP应用程序，尤其是，希望程序能够快速运行的话，所需学习的、与TCP内
部原理及性能有关的知识就要比本章所讨论的内容多得多。我们推荐W. Richard Stevens编写的TCP/
IP Illustrated（《TCP/IP详解》）系列图书（Addison Wesley公司出版）。
80 ｜ 第4章
TCP为HTTP提供了一条可靠的比特传输管道。从TCP连接一端填入的字节会从另
一端以原有的顺序、正确地传送出来（参见图4-2）。 75
http://www.joes-hardware.com:80/power-tools.html
（1）浏览器解析出主机名 www.joes-hardware.com
（2）浏览器查询这个主机名的IP地址（DNS）
202.43.78.3
（3）浏览器获得端口号（80） 80
（4）浏览器发起到202.43.78.3端口80的连接 80
因特网
客户端 服务器
（202.43.78.3）
（5）浏览器向服务器发送一条HTTP GET报文
因特网
客户端 服务器
（6）浏览器从服务器读取HTTP响应报文
因特网
客户端 服务器
（7）浏览器关闭连接
因特网
客户端 服务器
图4-1 Web浏览器通过TCP连接与Web服务器进行交互
因特网
. . . T H l m t h . x e d n i / T E G
客户端 服务器
图4-2 TCP会按序、无差错地承载HTTP数据
4.1.2 TCP流是分段的、由IP分组传送
TCP的数据是通过名为IP分组（或IP数据报）的小数据块来发送的。这样的话，
如图4-3a所示，HTTP就是“HTTP over TCP over IP”这个“协议栈”中的最顶层
了。其安全版本HTTPS就是在HTTP和TCP之间插入了一个（称为TLS或SSL
的）密码加密层（图4-3b）。
连接管理 ｜ 81
HTTP 应用层
HTTP 应用层 TSL or SSL 安全层
TCP 传输层 TCP 传输层
IP 网络层 IP 网络层
网络接口 数据链路层 网络接口 数据链路层
(a) HTTP (b) HTTPS
图4-3 HTTP和HTTPS网络协议栈
HTTP要传送一条报文时，会以流的形式将报文数据的内容通过一条打开的TCP连
接按序传输。TCP收到数据流之后，会将数据流砍成被称作段的小数据块，并将段
封装在IP分组中，通过因特网进行传输（参见图4-4）。所有这些工作都是由TCP/
IP软件来处理的，HTTP程序员什么都看不到。
每个TCP段都是由IP分组承载，从一个IP地址发送到另一个IP地址的。每个IP
分组中都包括：
• 一个IP分组首部（通常为20字节）；
• 一个TCP段首部（通常为20字节）；
• 一个TCP数据块（0个或多个字节）。
IP首部包含了源和目的IP地址、长度和其他一些标记。TCP段的首部包含了TCP
76 端口号、TCP控制标记，以及用于数据排序和完整性检查的一些数字值。
4.1.3 保持TCP连接持续不断地运行
在任意时刻计算机都可以有几条TCP连接处于打开状态。TCP是通过端口号来保持
所有这些连接持续不断地运行。
端口号和雇员使用的电话分机号很类似。就像公司的总机号码能将你接到前台，而
分机号可以将你接到正确的雇员位置一样，IP地址可以将你连接到正确的计算机，
而端口号则可以将你连接到正确的应用程序上去。TCP连接是通过4个值来识别的：
77 这4个值一起唯一地定义了一条连接。两条不同的TCP连接不能拥有4个完全相同
的地址组件值（但不同连接的部分组件可以拥有相同的值）。
82 ｜ 第4章
TCP TCP TCP
段#1 段#2 段#3
客户端 服务器
版本 首部长度[以字 服务类型 数据报总长
（word）为单位] （TOS） （以字节为单位）
分组ID（16位的数字） 标记 段偏移量
生存时间（TTL） 高层协议 首部校验和
源IP地址
目的IP地址
组分PI
源端口 目的端口
TCP段序号
捎带的确认
段PCT
首部长度 保留 窗口尺寸 块据数的中流据数PCT GRU KCA HSP TSR NYS NIF
（以字为单位）
TCP校验和 紧急指针
GET /index.html HTTP/1.1
Host: www.joes-hardware.c
图4-4 承载TCP段的IP分组，它承载了TCP数据流中的小块数据
在图4-5中，有4条连接：A、B、C和D。表4-1列出了每个端口的相关信息。
表4-1 TCP连接值
连 接 源IP地址 源 端 口 目的IP地址 目的端口
A 209.1.32.34 2034 204.62.128.58 4133
B 209.1.32.35 3227 204.62.128.58 4140
C 209.1.32.35 3105 207.25.71.25 80
D 209.1.33.89 5100 207.25.71.25 80
连接管理 ｜ 83
204.62.128.58 207.25.71.25
4133 4140
80
A B C D
5100
2034 3227 3105
209.1.32.34 209.1.32.35 209.1.33.89
图4-5 4个不同的TCP连接
注意，有些连接共享了相同的目的端口号（C和D都使用目的端口号80）。有些连
接使用了相同的源IP地址（B和C）。有些使用了相同的目的IP地址（A和B，C
和D）。但没有两个不同连接所有的4个值都一样。
4.1.4 用TCP套接字编程
操作系统提供了一些操纵其TCP连接的工具。为了更具体地说明问题，我们来看一
个TCP编程接口。表4-2显示了套接字API提供的一些主要接口。这个套接字API
向HTTP程序员隐藏了TCP和IP的所有细节。套接字API最初是为Unix操作系统
开发的，但现在几乎所有的操作系统和语言中都有其变体存在。
表4-2 对TCP连接进行编程所需的常见套接字接口函数
套接字API调用 描 述
s = socket() 创建一个新的、未命名、未关联的套接字
78 bind(s,) 向套接字赋一个本地端口号和接口
connect(s, ) 创建一条连接本地套接字与远程主机及端口的连接
listen(s,...) 标识一个本地套接字，使其可以合法接受连接
s2 = accept(s) 等待某人建立一条到本地端口的连接
n = read(s, buffer, n) 尝试从套接字向缓冲区读取n个字节
n = write(s, buffer, n) 尝试从缓冲区中向套接字写入n个字节
close(s) 完全关闭TCP连接
shutdown(s,) 只关闭TCP连接的输入或输出端
getsockopt(s,...) 读取某个内部套接字配置选项的值
setsockopt(s,...) 修改某个内部套接字配置选项的值
套接字API允许用户创建TCP的端点数据结构，将这些端点与远程服务器的TCP
端点进行连接，并对数据流进行读写。TCP API隐藏了所有底层网络协议的握手细
节，以及TCP数据流与IP分组之间的分段和重装细节。
84 ｜ 第4章
图4-1显示了Web浏览器是如何用HTTP从Joe的五金商店下载power-tools.html
页面的。图4-6中的伪代码说明了可以怎样通过套接字API来凸显客户端和服务器
在实现HTTP事务时所应执行的步骤。
客户端 服务器
（S1）创建新的套接字（socket）
（S2）将套接字绑定到端口80上去（bind）
（S3）允许套接字进行连接（listen）
（S4）等待连接（accept）
（C1）获取IP地址和端口号
（C2）创建新的套接字（socket）
（C3）连接到服务器IP:port上去（connect）
（S5）通知应用程序有连接到来
（C4）连接成功 （S6）开始读取请求（read）
（C5）发送HTTP请求（write）
（C6）等待HTTP响应（read）
（S7）处理HTTP请求报文
（S8）回送HTTP响应（write）
（C7）处理HTTP响应
（S9）关闭连接（close）
（C8）关闭连接（close）
图4-6 TCP客户端和服务器是如何通过TCP套接字接口进行通信的 79
我们从Web服务器等待连接（参见图4-6，S4）开始。客户端根据URL判定出IP
地址和端口号，并建立一条到服务器的TCP连接（参见图4-6，C3）。建立连接可
能要花费一些时间，时间长短取决于服务器距离的远近、服务器的负载情况，以及
因特网的拥挤程度。
一旦建立了连接，客户端就会发送HTTP请求（参见图4-6，C5），服务器则会读取
请求（参见图4-6，S6）。一旦服务器获取了整条请求报文，就会对请求进行处理，
执行所请求的动作（参见图4-6，S7），并将数据写回客户端。客户端读取数据（参