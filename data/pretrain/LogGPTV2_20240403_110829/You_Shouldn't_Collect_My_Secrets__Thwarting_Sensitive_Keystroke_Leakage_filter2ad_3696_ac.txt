Control
I-Box
Daemon
USER Level
KERNEL Level
Checkpoint 
/ Rollback
Kernel
Module
PI:EMAIL
PI:EMAIL
ssn:642-38-1689
...
Figure 3: An Architectural Overview of I-BOX
Challenges. To realize I-BOX, we are facing several
challenges. In particular:
• How to express and enforce security policies? As
users’ privacy policies are usually vague, it is criti-
cal to efﬁciently represent users’ policies such that
there won’t be a state explosion problem. This is
especially challenging to handle for non-Latin lan-
guages as they usually require an additional layer
of translation to represent them. Further, once the
policies are represented, it should also be relatively
easy to check the current input against the policies,
which is critical to the latency of the checking.
• How to efﬁciently perform the checkpoint and
rollback? As checkpoint and rollback are triggered
during input, lengthy checkpoint and rollback may
extend the latency of users’ input. However, tradi-
tional checkpoint and rollback usually require either
expensive copying of applications’ states, or heavy-
weight recording of applications’ execution. For
example, prior checkpointing on server platforms
takes around 600ms without copying ﬁles [28].
• How to ensure consistency upon rollback? By
considering the user’s input process as a transac-
tion, I-BOX can ignore the implementation details
of different IME apps and take them as normal pro-
cesses from the kernel’s viewpoint. However, there
also intensive cross-layer and cross-component in-
teractions between an IME app and the rest of the
environment, like the Dalvik VM, the application
framework and the client app. Further, the IME app
is essentially multi-threaded. Hence, consistently
checkpointing and rolling back an IME app’s states
while preserving the states of other components is
another key technical challenge for I-BOX.
Threat model and assumptions. As third-party IME
apps have the incentive to collect and send out users’ data
Step 
1
Step 
2
Step 
3
Checkpoint IME
App state
Invoke IME App
Start
Input
Data
Analyze
Input Data
Close 
Network
Notify 
rollback
Rollback IME 
App state
Figure 4: I-BOX work ﬂow.
and some IME apps are even malicious (repackaged or
even faked), I-BOX considers all third-party IME apps as
untrusted. However, I-BOX trusts the underlying smart-
phone OS, including the OS kernel, system services and
any process with root or system privileges. Also, we as-
sume the user’s smartphone has not been rooted such that
the untrusted IME app cannot break the default security
isolation between different apps, especially for system
and user-level apps.
I-BOX relies on input contexts and a user’s policy to
distinguish private data from normal input data. It is pos-
sible that I-BOX may leak sensitive user input if the pol-
icy is incomplete or inaccurate, or the user’s intent has
changed after specifying the policy. Further, depending
on the state machine, I-BOX may leak a preﬁx of some
sensitive input.
I-BOX also trusts the end user and rely on her as a
witness to prevent a malicious IME app from tampering
with the user’s input during typing. This should be easy
as she can tell the difference between what she typed and
what she observed from the input screen.
We consider the client app that uses the services from
an IME app as trusted. While a rogue or malicious client
app may also steal users’ sensitive input, a malicious
IME app causes more security impact than a malicious
client app as it leaks all user input to all client apps (in-
cluding system apps) in contrast to only input to a spe-
ciﬁc (third-party) client app. How to protect third-party
client apps is out of the scope of this work and many
prior efforts have intensively studied solutions to prevent
information leakage from apps [24, 51, 34].
680  24th USENIX Security Symposium 
USENIX Association
4 DESIGN AND IMPLEMENTATION
The work ﬂow of how I-BOX works is illustrated in
Figure 4. Speciﬁcally, I-BOX intercepts a user’s input
data by placing hooks into Android Input Method Ser-
vice (IMS) and detects the sensitive data from the in-
put stream based on the policy engine.
I-BOX uses
both context-based and preﬁx-matching policies (§4.1)
and enforces them using transactional execution (§4.2)
to protect sensitive data such as passwords. Before div-
ing into the details how we design and implement I-BOX,
we ﬁrst use a running example to illustrate how it really
works.
A running example. Assuming a sensitive string “Is-
UsenixSec2015” is being typed by a user through an IME
app, I-BOX ﬁrst makes a checkpoint of the IME app as a
clean snapshot before input. If this string is being typed
to a password textbox (context-based policy), I-BOX im-
mediately knows that the string to type is sensitive and
will restrict the IME app’s behavior (such as stopping
network connections). Otherwise, I-BOX intercepts the
characters and runs the analysis through the policy en-
gine. After getting the characters ‘I‘, ‘s‘, ‘U‘, and ‘s‘,
I-BOX predicts that the user may be typing the sensitive
string “IsUsenixSec2015” and I-BOX restricts the IME
app’s behavior immediately to prevent it from sending
further keystrokes out (preﬁx-matching policy). After-
wards, the IME app continues to accept input from users’
typing and I-BOX monitors the ﬁle operations of the IME
app to record the ﬁles that may log the input data. After
the user ﬁnishes typing, I-BOX conﬁrms that a sensitive
string was typed into the IME app and restores the states
of the IME app with the checkpoint to clean the sensitive
string out.
4.1 Policy Engine
The policy engine of I-BOX separates sensitive input
from normal input such that different policies can be ap-
plied to different types of data. I-BOX uses both context-
based and preﬁx matching strategies to derive policies,
with the ﬁrst strategy having higher priority.
Context-based policy. We ﬁrst provide an automated
approach to deriving which input would be sensitive
based on the type of the input and execution context of
an app. Speciﬁcally, Android uses text ﬁelds to help the
user type text into client apps. Text ﬁelds can have dif-
ferent input types, such as numbers, dates, passwords,
or email addresses. In fact, the type information of text
ﬁelds in the client app has been used to help an IME app
to optimize its layout for frequently used characters. I-
BOX also leverages the type information of the text ﬁelds
to decide whether the input is sensitive or not, and pass-
words and email addresses are by default sensitive. In
addition, based on the user deﬁned per-client app pol-
icy (e.g., an IME app is providing services to a banking
application), I-BOX will automatically treat all the input
consumed by a sensitive app according to context [44] as
sensitive.
Preﬁx-matching policy. For general input streams, I-
BOX leverages preﬁx matching to distinguish which in-
put stream is sensitive or not. One challenge for deﬁning
policies for I-BOX is that IME apps may need to handle
multiple languages, including both Latin languages and
non-Latin languages. For non-Latin languages, I-BOX
can only get the text in the target languages after an IME
app has translated the keystrokes for the corresponding
text. Hence, it is not viable to simply use keystrokes
to represent the current input. To address this problem,
I-BOX instead uses the UTF-8 (8-bit Unicode Transfor-
mation Format) of the translated keystrokes to represent
current keystrokes as well as those in the policy engine.
As there may eventually be multiple data instances
that should be considered as sensitive, I-BOX uses a trie-
like structure to maintain which data should be consid-
ered as sensitive. A trie-like structure is very space-
efﬁcient for data with a common preﬁx and is very ef-
ﬁcient for look-up. I-BOX maintains a global trie struc-
ture to represent the global policy.
I-BOX may also
provide an application-speciﬁc trie structure if an end
user demands more strict policy. During a query, I-BOX
queries the global and application-speciﬁc trie structures
in parallel but prefers application-speciﬁc policies over
the global one.
While much of the sensitive data like contacts and
cookies can be automatically translated to the trie struc-
ture as the default policies, I-BOX also allows end users
to use regular-expressions when they manually specify
the policy. For example, user may deﬁne “abc*” to in-
dicate any word starting with “abc” as sensitive input.
Associated with the regular expression, there is also an
acceptable disclosure rate (ADR), which deﬁnes how
many characters can be exposed in an input stream. The
larger the ADR, the more information may be leaked but
the more chances are allowed for cloud assistance. Using
regular expression is easy for experienced users to spec-
ify sensitive input, as it does not require them to fully
remember all such sensitive data and thus matches users’
ambiguous and incomplete memory. This also avoids
asking users to input full secrets to I-BOX. Alternatively,
average users may also specify full secret names (i.e., a
special case of regular expression) to I-BOX.
I-BOX provides a simple script to add such regular-
expressions to the trie-like structure and report any con-
ﬂicts if they occur. For example, for a sensitive string of
15 characters (such as ‘IsUsenixSec2015’) and an ADR
of 0.2, I-BOX will restrict an IME app’s behavior when
USENIX Association  
24th USENIX Security Symposium  681
I-BOX runs
the ﬁrst three characters (‘IsU’) are typed.
the trie-structure as a state machine to predict the in-
put stream by matching the typed characters with the trie
structures. Since any substring in the input data may be
sensitive, I-BOX needs to check all of them. To speed
up this process, I-BOX searches all possible substrings
when a new character is typed. Intermediate states are
maintained so that only new characters need to be han-
dled instead of new substrings constructed by the char-
acter.
Note that currently I-BOX directly searches over the
plain text of the policy ﬁle and relies on the Android per-
mission system to protect it for simplicity. This can be
further enhanced by encrypting the policy ﬁle and us-
ing regular expressions to search over the encrypted ﬁle,
which was shown to have small runtime and space over-
head [36].
Preﬁx-substitution attacks. At ﬁrst glance, the preﬁx-
matching policy used by I-BOX would appear to be vul-
nerable to a preﬁx-substitution attack by a malicious IME
App. Speciﬁcally, a malicious IME app might ﬁrst re-
place the preﬁx of a typed string with a non-sensitive one
so that I-BOX wouldn’t recognize this preﬁx and thus no
oblivious sandbox would be applied for this input ses-
sion. Fortunately, we note that users, the ultimate wit-
ness, would immediately notice this by observing the dif-
ference between what they typed and what was displayed
on the screen.
Note that as I-BOX monitors all keystrokes sent from
IME apps to user apps, I-BOX will adjust the state ma-
chine accordingly for any cursor movement and special
characters like deletion. This can detect the case where a
malicious IME app stealthily moves the cursor to deceive
I-BOX on the input sensitivity.
Overall, I-BOX requires users’ awareness of what she
types from what she observes to detect malicious behav-
ior from an IME app. If a user does not pay enough at-
tention to the input process, a malicious IME app may
still have the chance to fool I-BOX about the sensitivity
of the input streams.
munication among isolated apps. Such hybrid execution
and complex communication make it hard to efﬁciently
and consistently checkpoint the states of an IME app.
I-BOX addresses the above challenges by leveraging
a set of quiescent points. A quiescent point is a point
such that all threads of an application have stopped ex-
ecution and there are no pending states and requests to
be processed. Doing checkpointing at quiescent points
frees I-BOX from handling a number of subtle states like
residual states in stack or other communication peers.
Further, it also requires less states to be checkpointed.
Finally, when I-BOX rolls back the states of an IME app,
the states can be restored consistently without having to
deal with some subtle residual states in other apps.
In the following, we describe in greater detail how
we choose the quiescent points (§4.2.1), how I-BOX per-
forms the checkpoint and restore of the local states of an
IME app (§4.2.2), and how I-BOX handles interactions
of an IME app with others through IPCs (§4.2.3).
4.2.1 Quiescent Points
Our key observation is that an IME app is essentially
an event-driven app that provides services to the client
app. Consequently, it shall be usually in a quiescent point
when a user is not typing, as no event will be delivered
to the IME app at that time. At this state, the IME app’s
states are stable and consistent. Thus, I-BOX can be re-
laxed from handling a lot of complex and subtle local
states. To achieve this, I-BOX ﬁrst checks if an IME app
is in a quiescent point by checking the process and thread
states (sleeping or not) and the IPC states. The checking
result is very likely to be true for most cases. Even if
the IME app refuses to cooperate with I-BOX and keeps
itself busy, I-BOX can ﬁrst wait a short time and then
enforce a quiescent point by blocking new requests and
then forcing the IME app to sleep to do the checkpoint.
Here, a non-cooperative IME app could also be a sign
of being malicious. However, we never encountered this
case as the IME apps we tested always conform to An-
droid IME architecture. Even if so, I-BOX may always
roll back the IME app to a clean state checkpointed early.
4.2 Enabling Transactional Execution
4.2.2 Checkpointing and Restoring Local States
To enable transactional execution of an IME app,
I-
BOX needs to provide a checkpoint and rollback mech-
anism. The key challenges here lie in how to provide
low-latency and ensure consistency, which are made es-
pecially difﬁcult by Android’s unique design. For exam-
ple, Android uses a Dalvik virtual machine (VM) to run
the Java code of the IME app, which interacts intensively
with the application framework. Further, the native code
of an IME app also interacts with the Dalvik VM through
the Java Native Interface (JNI). Finally, Android inten-
sively uses Binder, a complex IPC mechanism for com-
Since data typed by a user can be stored into any place of
the IME app in any form, it requires that all process states
restore in order to wipe out any sensitive data. The tra-
ditional way of doing checkpoints is copying all related
process states into storages, which is very heavyweight
and would incur long latency. As the main purpose of
I-BOX’s checkpoint is to either rollback or discard later,
I-BOX chooses a lightweight approach to checkpointing,
which creates a shadow process and then tracks all later
changes by using copy-on-write (COW) features pro-
vided by Linux.
682  24th USENIX Security Symposium 
USENIX Association
Saving and restoring ﬁle states. As typical IME apps
usually only modify a small amount of ﬁles during one
input transaction, I-BOX currently records and copies
such ﬁles during checkpointing and restores them during
rollback for simplicity. Another option is using a COW
ﬁle system like Btrfs or ext3cow to avoid copying. This
requires replacing Android’s ﬁle system with one with a
COW feature, which will be our future work.
Android provides several options to save persistent ap-
plication data. Based on the position where the data is
stored, we can divide these options into two categories:
internal and external storage. Every Android app will be
assigned with a private directory in the internal storage