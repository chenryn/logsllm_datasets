or non-terminal symbol.
One can build a PCFG by the assignment of probabilities
to such CFG rules. Due to the need to be able to encode
every occurring password, there is a special catch-all rule
with a very low probability. For a given PCFG, a password
may be speciﬁed by a sequence of probabilities. Based on
the ﬁrst probability in the sequence, a rule from the set is
selected for the start symbol S producing the children of S in
a parse tree. Via recursion, the complete parse tree is built.
They showed that a rule set probability can be represented
as an integer. By this, given a PCFG, one can represent a
password by a non-unique vector of integers.
In the encoding step of the NoCrack NLE, the vector of
probabilities that deﬁne a parse tree, is uniformly selected
from all such producing the given password. During decod-
ing the given vector of probabilities, thus the parse tree, is
used to rebuild the encoded password.
The authors proposed an SG (sub-grammar) NLE that
is used to build a vault from the described single pass-
word NLE (MPW). Applying a single password NLE mul-
tiple times produces a vault of unrelated passwords that is
rather insecure.
Instead, the SG approach tries to build
related passwords, to simulate normal user behavior more
accurately. For this, all passwords stored in the real vault
are parsed using the trained PCFG model. After this, a
new sub-grammar PCFG that consists of the cumulative set
of rules used during the parsing is built. Finally, the rule
probabilities are copied from the original PCFG and renor-
malized over the sub-grammar PCFG. Please note that some
special rules, like the aforementioned catch-all rule is always
part of the used grammar. To be able to decode the SG en-
coded passwords, the SG is encoded as well and always the
ﬁrst part of the NLE’s output. For full details, we refer the
interested reader to the original paper [9].
The NoCrack Implementation.
The authors of NoCrack implemented a full version of a
Honey Encryption-based password vault. The implementa-
tion must be considered a prototype which does not always
Key Derivation FunctionSHA-256Encryption / DecryptionAES-CTRCiphertextcBit StringSNatural Language EncoderDomain PasswordpwdEncode(pwd) -> S pwd <— Decode(S)SaltsaltMaster PasswordmpwHoney Encryption (HE)Password-based Encryption (PBE)correctly decrypt a vault and occasionally crashes. However,
we did not focus on the manager software itself, like the im-
plemented client–server model and encryption, but rather on
the concept of the actual PCFG model-based NLE. While
the software [8] is still evolving, we used the version as of
September 24th, 2015 for our experiments.
NoCrack, as implemented currently, does not store user-
names, so technically we have to assume that usernames are
known. Usernames are typically not considered secret, so we
expect them to be easily retrievable, with the email address,
or it may be even publicly known.
However, we would expect that any practical implementa-
tion would also store the usernames in plaintext to be able
to ﬁll out forms automatically.
2.4 Attacker Model
While cracking-resistant vaults, of course, are subject to
all the normal attacks that can be launched against vaults,
here we concentrate on so-called online-veriﬁcation attacks,
where an attacker performs online queries to verify which
vault (resulting from an oﬄine guessing attack) is the correct
one.
1. Trial-Decryption: The attacker trial-decrypts the given
encoded vault with N master password candidates ac-
cording to a password distribution that is believed to
be suitable for the task. This yields a number of can-
didate vaults cv1, . . . , cvN .
2. Ranking of Vault Candidates: The attacker ranks the
vault candidates such that the “more likely correct”
vaults are (hopefully) ranked near the top. The origi-
nal paper uses machine learning to rank the more likely
candidate vaults to the top.
3. Online Veriﬁcation: Finally, the attacker uses online
guessing to verify the correctness of the vaults, start-
ing with the highly ranked vaults. The number of on-
line veriﬁcation attempts the attacker is to perform
depends on the countermeasures implemented by the
service and can vary wildly. Note that even a single
service with very weak defenses has a great impact on
the security of the complete vault.
The security of a vault scheme against this type of attack
is best measured by the distribution of ranks of the real
vault. To this end, it is not necessary to create millions of
decoy passwords; as those are chosen uniformly by the NLE
anyway it is good enough to observe the ranking of the real
vault in a much smaller set of decoy vaults. The average rank
of the real vault among the decoy vaults is a good measure
for the average defense against online-veriﬁcation attacks.
2.5 Further Related Work
Besides cracking-resistance, other security and usability
aspects of password vaults were studied. Especially, the se-
curity of web-based password managers was examined by Li
et al. [20]. They found ﬂaws in the function for generating
one-time passwords, the use of bookmarklets, and a pass-
word sharing feature. An attack that abuses the autoﬁll
functionality was described by Silver et al. [29]. They de-
scribed multiple ways to execute their so-called Sweep Attack ,
by injecting JavaScript on the ﬂy into the victim’s browser.
The potential threat by cross-site scripting (XSS) attacks
was analyzed by Stock et al. [31]. McCarney et al. [22]
investigated the usability of a dual-possession-based vault
alternative. Their solution leverages a desktop computer
and a smartphone to build a theft-resistance system with-
out the use of a master password. Further, Gasti and Ras-
mussen [13] analyzed the formal security of encrypted vault
storage formats. They provided two realistic security models
and evaluated a number of popular password managers.
3. STATIC AND ADAPTIVE NLES
A central aspect of an NLE used in a password vault is the
distribution of its generated decoy vaults. It needs to gen-
erate decoy vaults that cannot be easily distinguished from
the real vault. Technically, for a traditional vault software,
this distribution exists as well, with two vaults, the “error
vault” ⊥ and the correct vault, having a non-zero probabil-
ity. For Kamouﬂage this distribution has a limited number
of vaults with non-zero probability. To decrypt the vault,
the NLE construction, as used in NoCrack, gets a bit string
as input. This bit string is generated by applying a KDF to
the used master password. Thus, the input distribution for
the NLE is (close to) a uniform distribution, and (practi-
cally) independent of the distribution of the guessed master
passwords. We distinguish two variants of NLEs:
(i) Static NLEs: an NLE where the generated distribu-
tion of decoy vaults is independent of the actual values
stored in the vault.
(ii) Adaptive NLEs: an NLE where the generated distri-
bution of decoy vaults depends on the actual values
stored in the vault.
Of course, the decoy vaults always depend on the master
password.
3.1 Static Distribution NLEs
NoCrack and all NLEs that follow the schematics in Fig-
ure 1 are necessarily static, as no information about the
stored vault is available to the NLE. Thus, the distribution
of decoy vaults is necessarily independent of the passwords
stored in the vault.
Static NLEs seem to be a logical and conservative choice
for password vaults. In fact, an attacker can easily approxi-
mate the generated distribution and if the distribution trans-
ports information about the passwords stored in the vault,
an attacker might be able to extract information about the
vault from this easily accessible distribution.
However, as we will show in the following section, static
NLEs have one major drawback and are susceptible to online-
veriﬁcation attacks. In brief, the problem is that the distri-
bution of decoy vaults needs to be ﬁxed at one point before
the actual passwords are stored. But password distributions
diﬀer substantially from one service to another, where rea-
sons include a diﬀerent password policy (which may vary
over time), a diﬀerent user-base, diﬀerent (perceived) secu-
rity requirements, and much more. A previously ﬁxed dis-
tribution will not be able to handle these vast diﬀerences
that even change over time. Furthermore, storing a strong
password in such a vault will make breaking the vault easier;
a counter-intuitive behavior that we should avoid at all cost.
3.2 Adaptive Distribution NLEs
A potential solution to the problem described in Section 3.1
is oﬀered by adaptive NLEs, where the chosen distribution
of decoy vaults depends on the passwords stored in the vault.
This makes it unnecessary to “predict” the changes in pass-
word distributions over time at creation time of the soft-
ware, as the distribution can adapt to relevant changes from
the stored passwords. Obviously, this raises another secu-
rity concern: When the distribution depends on the stored
passwords, will knowledge of the distribution help in recov-
ering the stored passwords? In Section 6 we will show an
adaptive NLE based on Markov models, which resists online-
veriﬁcation attacks much better than a static NLE, and ad-
ditionally, the adaptive property does not undermine the
security of the scheme.
4. THE (IN-)SECURITY OF STATIC NLES
Our ﬁrst main contribution shows that static NLEs and
especially NoCrack suﬀer from a severe weakness that sub-
stantially limits their security.
In brief, we show how an
attacker can eﬃciently distinguish the distribution of pass-
words generated by NoCrack from real vaults, and we argue
that this is at least partially a fundamental limitation of
static NLEs.
4.1 Distinguishing Real from Decoy Vaults
In the attack scenario described in Section 2.4 and intro-
duced by Chatterjee et al., the adversary has created a list
of candidate vaults by decrypting the encrypted vault with
a number of candidate master passwords. We can assume
that the correct master password is in the list of candidate
passwords and thus the correct vault is among the list of
candidate vaults. Then an attacker wants to rank the avail-
able candidate vaults so that the average position of the true
vault in the list of candidate vaults is near the top of the list.
A “perfect” NLE would lead to an average rank of 50 %, as
there was no way to distinguish real from decoy vaults and
thus the ranking cannot do better than guessing. Chatter-
jee et al. tested attacks based on generic ML algorithms.
We devise an alternative attack targeting the similarity of
the observed distributions, based on the Kullback–Leibler
divergence.
Kullback–Leibler Divergence.
The Kullback–Leibler divergence (KL divergence) is a mea-
sure of the diﬀerence between two probability distributions.
Given two probability distributions P and Q, the KL diver-
gence is deﬁned as
(cid:88)
DKL(P (cid:107) Q) =
P [z] · log
P [z]
Q[z]
,
z∈supp(P )
provided that supp(P ) ⊂ supp(Q), and ∞ otherwise. We
use logarithms to base 2 throughout this work. The measure
is not symmetric in P and Q.
Setup.
The setup follows the attack model described in Section 2.4.
We highlight the deviations from there in the following.
1. Determining Distribution Pdecoy of Decoy Vaults: Stat-
ic NLEs have the (deﬁning) property that the distribu-
tion of decoy vaults is constant. This distribution can
be obtained in two ways: Either, it can be approxi-
mated by repeatedly sampling passwords from the dis-
tribution by evaluating the KDF and trial-decrypting
the vault (similar, but less computationally expensive,
one can choose and decode a bit string from uniform
random). We use this method in the current section
and we determine the inﬂuence of the sample size on
the accuracy of the attack in Section 4.3. Or, for some
NLEs it is possible to use a theoretical argument to
derive a mathematical description for the distribution
via the source code. We use this method in Section 6.1
for Markov model-based NLEs.
2. Trial-Decryption: The attacker trial-decrypts the given
encoded vault with master password candidates, yield-
ing candidate vaults cv1, . . . , cvN .
3. Ranking of Vault Candidates: For the ranking in this
experiment we use the similarity of distributions of
passwords measured by the KL divergence.
We compute the similarity scores
si := DKL( ˆPcvi (cid:107) ˆPdecoy )
for i = 1, . . . , N
for each candidate vault cvi. Here, ˆPcvi is the distri-
bution derived from the vault cvi based on relative fre-
quencies and ˆPdecoy is the distribution derived from the
empirical measurements in the ﬁrst step, again based
on relative frequencies. We rank the candidate vaults
based on the score si, where higher si means a larger
distance from the decoy distribution and thus likely
the real vault.
4. Online Veriﬁcation: Finally, the attacker uses online
guessing to verify the correctness of the vaults, starting
with the higher ranked vaults.
4.2 Datasets
For completeness, we give a brief description of the data-
sets used in the following evaluations.
The PBVault leak is likely from before June 2011 and has
a substantial overlap with credentials that were obtained via
keystroke logging and HTML form injection by the ZEUS
Trojan. Chatterjee et al. used this list to evaluate their NLE
approach and made the ﬁle available along with the NoCrack
source code. The ﬁle contains username and password pairs.
To the best of our knowledge, PBVault is the only publicly
available list of password vaults. Detailed statistics on the
ﬁle, called Pastebin, can be found in the NoCrack paper [9].
The RockYou list contains 32 million plaintext passwords.
It was leaked in December 2009 through an SQL injection
attack. The Gmail list contains over 5 million Google Mail
credentials and was posted in September 2014 in a Russian
Bitcoin forum. The Yahoo leak is from July 2012 and was
obtained by attacking the Yahoo! Voices publishing service;
it contains around 450 thousand passwords. The MySpace
list contains around 55,000 passwords that were posted in
October 2006. The passwords in the list were obtained via
a phishing attack.
4.3 Experiments for Entire Vaults:
NoCrack SG vs. PBVault
First, we present results using the KL divergence on full
vaults. To keep the results comparable with previous work,
we use the same set of password vaults used in the evaluation
of NoCrack.
Setup.
This experiment follows the description in Section 4.1.
1. The decoy distribution ˆPdecoy is approximated by the
relative frequencies using 30 million samples of entire
vaults from the NoCrack distribution, obtained by re-
peatedly decrypting a vault using a wrong master pass-
word and querying it for the passwords for 50 well-
known login domains.
Table 1: Rank results based on a KL divergence attack of entire vaults, where smaller numbers mean a more eﬃcient attack.
Decoy vaults are chosen from the NoCrack distribution. Real vaults are chosen from the PBVault distribution. For better
comparability to previous work [9], we list results for varying classes of vault sizes (left), and results for varying numbers of
samples for the reference distribution (right).
KL Div.: NoCrack vs. PBVault
NoCrack Sample Size: 30 × 106
Vault Size 2-3
Vault Size 4-8
Vault Size 9-50
Mean
9.56 %
5.97 %