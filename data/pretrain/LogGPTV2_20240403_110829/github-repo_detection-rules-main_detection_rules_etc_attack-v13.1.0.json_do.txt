### VBA Stomping
**Created:** 2020-09-17T12:51:40.845Z  
**Description:**
Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data. (Citation: FireEye VBA stomp Feb 2020)

MS Office documents with embedded VBA content store the source code inside module streams. Each module stream has a PerformanceCache that stores a separate compiled version of the VBA source code, known as p-code. The p-code is executed when the MS Office version specified in the _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application. (Citation: Evil Clippy May 2019) (Citation: Microsoft _VBA_PROJECT Stream)

An adversary may hide malicious VBA code by overwriting the VBA source code location with zeros, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the _VBA_PROJECT stream and the host MS Office application, the p-code will be executed; otherwise, the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis. (Citation: Walmart Roberts Oct 2018) (Citation: FireEye VBA stomp Feb 2020) (Citation: pcodedmp Bontchev)

**External References:**
- [FireEye VBA stomp Feb 2020](https://www.fireeye.com/blog/threat-research/2020/01/stomp-2-dis-brilliance-in-the-visual-basics.html)
- [Evil Clippy May 2019](https://outflank.nl/blog/2019/05/05/evil-clippy-ms-office-maldoc-assistant/)
- [Microsoft _VBA_PROJECT Stream](https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/ef7087ac-3974-4452-aab2-7dba2214d239)
- [Walmart Roberts Oct 2018](https://medium.com/walmartglobaltech/vba-stomping-advanced-maldoc-techniques-612c484ab278)
- [pcodedmp Bontchev](https://github.com/bontchev/pcodedmp)
- [oletools toolkit](https://github.com/decalage2/oletools)

**Kill Chain Phases:**
- Defense Evasion

**Modified:** 2021-10-15T14:02:07.944Z  
**Name:** VBA Stomping  
**Type:** Attack Pattern  
**x_mitre_contributors:**
- Rick Cole, Mandiant

**x_mitre_data_sources:**
- Script: Script Execution
- File: File Metadata

**x_mitre_detection:**
Detection efforts should focus on finding differences between VBA source code and p-code. (Citation: Walmart Roberts Oct 2018) VBA code can be extracted from p-code before execution with tools such as the pcodedmp disassembler. The oletools toolkit leverages the pcodedmp disassembler to detect VBA stomping by comparing keywords present in the VBA source code and p-code. (Citation: pcodedmp Bontchev) (Citation: oletools toolkit)

If the document is opened with a Graphical User Interface (GUI), the malicious p-code is decompiled and may be viewed. However, if the PROJECT stream, which specifies the project properties, is modified in a specific way, the decompiled VBA code will not be displayed. For example, adding a module name that is undefined to the PROJECT stream will inhibit attempts to read the VBA source code through the GUI. (Citation: FireEye VBA stomp Feb 2020)

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_is_subtechnique:**
- True

**x_mitre_permissions_required:**
- User

**x_mitre_platforms:**
- Linux
- Windows
- macOS

**x_mitre_system_requirements:**
- MS Office version specified in _VBA_PROJECT stream must match host

**x_mitre_version:**
- 1.1

---

### BITS Jobs
**Created:** 2018-04-18T17:59:24.739Z  
**Description:**
Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through the Component Object Model (COM). (Citation: Microsoft COM) (Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications that prefer to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.

The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool. (Citation: Microsoft BITS) (Citation: Microsoft BITSAdmin)

Adversaries may abuse BITS to download (e.g., Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g., Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. (Citation: CTU BITS Malware June 2016) (Citation: Mondok Windows PiggyBack BITS May 2007) (Citation: Symantec BITS May 2007) BITS-enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots). (Citation: PaloAlto UBoatRAT Nov 2017) (Citation: CTU BITS Malware June 2016)

BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol. (Citation: CTU BITS Malware June 2016)

**External References:**
- [CTU BITS Malware June 2016](https://www.secureworks.com/blog/malware-lingers-with-bits)
- [Symantec BITS May 2007](https://www.symantec.com/connect/blogs/malware-update-windows-update)
- [Elastic - Hunting for Persistence Part 1](https://www.elastic.co/blog/hunting-for-persistence-using-elastic-security-part-1)
- [PaloAlto UBoatRAT Nov 2017](https://researchcenter.paloaltonetworks.com/2017/11/unit42-uboatrat-navigates-east-asia/)
- [Microsoft Issues with BITS July 2011](https://technet.microsoft.com/library/dd939934.aspx)
- [Microsoft BITS](https://msdn.microsoft.com/library/windows/desktop/bb968799.aspx)
- [Microsoft BITSAdmin](https://msdn.microsoft.com/library/aa362813.aspx)
- [Microsoft COM](https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx)
- [Mondok Windows PiggyBack BITS May 2007](https://arstechnica.com/information-technology/2007/05/malware-piggybacks-on-windows-background-intelligent-transfer-service/)

**Kill Chain Phases:**
- Defense Evasion
- Persistence

**Modified:** 2023-04-21T12:21:40.927Z  
**Name:** BITS Jobs  
**Type:** Attack Pattern  
**x_mitre_attack_spec_version:**
- 3.1.0

**x_mitre_contributors:**
- Brent Murphy, Elastic
- David French, Elastic
- Ricardo Dias
- Red Canary

**x_mitre_data_sources:**
- Command: Command Execution
- Service: Service Metadata
- Process: Process Creation
- Network Traffic: Network Connection Creation

**x_mitre_defense_bypassed:**
- Firewall
- Host forensic analysis

**x_mitre_deprecated:**
- False

**x_mitre_detection:**
BITS runs as a service, and its status can be checked with the Sc query utility (sc query bits). (Citation: Microsoft Issues with BITS July 2011) Active BITS tasks can be enumerated using the BITSAdmin tool (bitsadmin /list /allusers /verbose). (Citation: Microsoft BITS)

Monitor usage of the BITSAdmin tool (especially the 'Transfer', 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options). (Citation: Microsoft BITS) Admin logs, PowerShell logs, and the Windows Event log for BITS activity. (Citation: Elastic - Hunting for Persistence Part 1) Also, consider investigating more detailed information about jobs by parsing the BITS job database. (Citation: CTU BITS Malware June 2016)

Monitor and analyze network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account). (Citation: Microsoft BITS)

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_is_subtechnique:**
- False

**x_mitre_platforms:**
- Windows

**x_mitre_version:**
- 1.4

---

### MSBuild
**Created:** 2020-03-27T21:50:26.042Z  
**Description:**
Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations. (Citation: MSDN MSBuild)

Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild, introduced in .NET version 4, allows for C# or Visual Basic code to be inserted into an XML project file. (Citation: MSDN MSBuild) (Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way, it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution. (Citation: LOLBAS Msbuild)

**External References:**
- [MSDN MSBuild](https://msdn.microsoft.com/library/dd393574.aspx)
- [Microsoft MSBuild Inline Tasks 2017](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-inline-tasks?view=vs-2019#code-element)
- [LOLBAS Msbuild](https://lolbas-project.github.io/lolbas/Binaries/Msbuild/)

**Kill Chain Phases:**
- Defense Evasion

**Modified:** 2021-10-15T23:57:07.973Z  
**Name:** MSBuild  
**Type:** Attack Pattern  
**x_mitre_contributors:**
- @ionstorm
- Carrie Roberts, @OrOneEqualsOne

**x_mitre_data_sources:**
- Process: Process Creation
- Command: Command Execution

**x_mitre_detection:**
Use process monitoring to monitor the execution and arguments of MSBuild.exe. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_is_subtechnique:**
- True

**x_mitre_platforms:**
- Windows

**x_mitre_system_requirements:**
- .NET Framework version 4 or higher

**x_mitre_version:**
- 1.2

---

### Bypass User Account Control
**Created:** 2017-05-31T21:31:07.462Z  
**Description:**
Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)

If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is the use of rundll32.exe to load a specifically crafted DLL that loads an auto-elevated COM object and performs a file operation in a protected directory, which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. (Citation: Davidson Windows) Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.

Many methods have been discovered to bypass UAC. The GitHub readme page for UACMe contains an extensive list of methods (Citation: Github UACMe) that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:
- eventvwr.exe can auto-elevate and execute a specified binary or script. (Citation: enigma0x3 Fileless UAC Bypass) (Citation: Fortinet Fareit)

Another bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity. (Citation: SANS UAC Bypass)

**External References:**
- [TechNet How UAC Works](https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works)
- [TechNet Inside UAC](https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx)
- [MSDN COM Elevation](https://msdn.microsoft.com/en-us/library/ms679687.aspx)
- [Davidson Windows](http://www.pretentiousname.com/misc/win7_uac_whitelist2.html)
- [Github UACMe](https://github.com/hfiref0x/UACME)
- [enigma0x3 Fileless UAC Bypass](https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/)
- [Fortinet Fareit](https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware)
- [SANS UAC Bypass](http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass)
- [enigma0x3 sdclt app paths](https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/)
- [enigma0x3 sdclt bypass](https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/)

**Kill Chain Phases:**
- Defense Evasion
- Privilege Escalation

**Modified:** 2020-02-05T20:08:32.863Z  
**Name:** Bypass User Account Control  
**Type:** Attack Pattern  
**x_mitre_contributors:**
- Stefan Kanthak
- Casey Smith

**x_mitre_defense_bypassed:**
- Windows User Account Control

**x_mitre_detection:**
There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.

Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example:
- The eventvwr.exe bypass uses the HKEY_CURRENT_USER\\Software\\Classes\\mscfile\\shell\\open\\command Registry key. (Citation: enigma0x3 Fileless UAC Bypass)
- The sdclt.exe bypass uses the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe and HKEY_CURRENT_USER\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand Registry keys. (Citation: enigma0x3 sdclt app paths) (Citation: enigma0x3 sdclt bypass)

Analysts should monitor these Registry settings for unauthorized changes.

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_effective_permissions:**
- Administrator

**x_mitre_is_subtechnique:**
- False

**x_mitre_permissions_required:**
- User
- Administrator

**x_mitre_platforms:**
- Windows

**x_mitre_version:**
- 1.0

---

### Runtime Data Manipulation
**Created:** 2019-04-09T16:09:22.173Z  
**Description:**
Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user. (Citation: FireEye APT38 Oct 2018) (Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.

Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct Change Default File Association and Masquerading to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.

**External References:**
- [FireEye APT38 Oct 2018](https://content.fireeye.com/apt/rpt-apt38)
- [DOJ Lazarus Sony 2018](https://www.justice.gov/opa/press-release/file/1092091/download)

**Kill Chain Phases:**
- Impact

**Modified:** 2020-03-02T14:30:49.400Z  
**Name:** Runtime Data Manipulation  
**Type:** Attack Pattern  
**x_mitre_attack_spec_version:**
- 3.1.0

**x_mitre_contributors:**
- Syed Ummar Farooqh, McAfee
- Prasad Somasamudram, McAfee
- Sekhar Sarukkai, McAfee
- Ibrahim Ali Khan
- Alex Soler, AttackIQ
- Janantha Marasinghe
- Matt Snyder, VMware
- Joe Gumke, U.S. Bank

**x_mitre_data_sources:**
- Cloud Service: Cloud Service Modification
- User Account: User Account Modification
- Cloud Service: Cloud Service Disable

**x_mitre_deprecated:**
- False

**x_mitre_detection:**
Inspect important application binary file hashes, locations, and modifications for suspicious/unexpected values.

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_impact_type:**
- Integrity

**x_mitre_is_subtechnique:**
- False

**x_mitre_permissions_required:**
- User
- Administrator
- root
- SYSTEM

**x_mitre_platforms:**
- Linux
- macOS
- Windows

**x_mitre_version:**
- 1.0

---

### Domain Fronting
**Created:** 2020-03-14T23:29:19.581Z  
**Description:**
Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services that host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the technique, "domainless" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).

For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however, the CDN may route it to domain-y.

**External References:**
- [Fifield Blocking Resistent Communication through domain fronting 2015](http://www.icir.org/vern/papers/meek-PETS-2015.pdf)

**Kill Chain Phases:**
- Command and Control

**Modified:** 2023-03-30T21:01:52.356Z  
**Name:** Domain Fronting  
**Type:** Attack Pattern  
**x_mitre_attack_spec_version:**
- 3.1.0

**x_mitre_contributors:**
- Matt Kelly, @breakersall

**x_mitre_data_sources:**
- Network Traffic: Network Traffic Content

**x_mitre_detection:**
If SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015)

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_is_subtechnique:**
- True

**x_mitre_platforms:**
- Linux
- macOS
- Windows

**x_mitre_version:**
- 1.1

---

### ARP Cache Poisoning
**Created:** 2020-10-15T12:05:58.755Z  
**Description:**
Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation.

The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. (Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use and store that information in its ARP cache.

An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.

The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache. (Citation: Sans ARP Spoofing Aug 2003) (Citation: Cylance Cleaver)

Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol. (Citation: Sans ARP Spoofing Aug 2003)

**External References:**
- [Cylance Cleaver](https://web.archive.org/web/20200302085133/https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf)
- [RFC826 ARP](https://tools.ietf.org/html/rfc826)
- [Sans ARP Spoofing Aug 2003](https://pen-testing.sans.org/resources/papers/gcih/real-world-arp-spoofing-105411)

**Kill Chain Phases:**
- Credential Access
- Collection

**Modified:** 2022-07-22T18:37:22.176Z  
**Name:** ARP Cache Poisoning  
**Type:** Attack Pattern  
**x_mitre_attack_spec_version:**
- 2.1.0

**x_mitre_contributors:**
- Jon Sternstein, Stern Security

**x_mitre_data_sources:**
- Network Traffic: Network Traffic Content
- Network Traffic: Network Traffic Flow

**x_mitre_deprecated:**
- False

**x_mitre_detection:**
Monitor network traffic for unusual ARP traffic; gratuitous ARP replies may be suspicious.

Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_is_subtechnique:**
- True

**x_mitre_platforms:**
- Linux
- Windows
- macOS

**x_mitre_version:**
- 1.1

---

### Disable Cloud Logs
**Created:** 2020-10-12T13:52:32.846Z  
**Description:**
An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable logging to avoid detection of their activities.

For example, in AWS, an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity. (Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic) In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user’s license from an Enterprise E5 to an Enterprise E3 license. (Citation: Dark Reading Microsoft 365 Attacks 2021)

**External References:**
- [Stopping CloudTrail from Sending Events to CloudWatch Logs](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/stop-cloudtrail-from-sending-events-to-cloudwatch-logs.html)
- [Following the CloudTrail: Generating strong AWS security signals with Sumo Logic](https://expel.io/blog/following-cloudtrail-generating-aws-security-signals-sumo-logic/)
- [Configuring Data Access audit logs](https://cloud.google.com/logging/docs/audit/configure-data-access)
- [Dark Reading Microsoft 365 Attacks 2021](https://www.darkreading.com/threat-intelligence/incident-responders-explore-microsoft-365-attacks-in-the-wild/d/d-id/1341591)
- [az monitor diagnostic-settings](https://docs.microsoft.com/en-us/cli/azure/monitor/diagnostic-settings?view=azure-cli-latest#az_monitor_diagnostic_settings_delete)

**Kill Chain Phases:**
- Defense Evasion

**Modified:** 2023-04-20T18:13:50.277Z  
**Name:** Disable Cloud Logs  
**Type:** Attack Pattern  
**x_mitre_attack_spec_version:**
- 3.1.0

**x_mitre_contributors:**
- Syed Ummar Farooqh, McAfee
- Prasad Somasamudram, McAfee
- Sekhar Sarukkai, McAfee
- Ibrahim Ali Khan
- Alex Soler, AttackIQ
- Janantha Marasinghe
- Matt Snyder, VMware
- Joe Gumke, U.S. Bank

**x_mitre_data_sources:**
- Cloud Service: Cloud Service Modification
- User Account: User Account Modification
- Cloud Service: Cloud Service Disable

**x_mitre_deprecated:**
- False

**x_mitre_detection:**
Monitor logs for API calls to disable logging. In AWS, monitor for: StopLogging and DeleteTrail. (Citation: Stopping CloudTrail from Sending Events to CloudWatch Logs) In GCP, monitor for: google.logging.v2.ConfigServiceV2.UpdateSink. (Citation: Configuring Data Access audit logs) In Azure, monitor for az monitor diagnostic-settings delete. (Citation: az monitor diagnostic-settings) Additionally, a sudden loss of a log source may indicate that it has been disabled.

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_is_subtechnique:**
- True

**x_mitre_platforms:**
- IaaS
- SaaS
- Google Workspace
- Azure AD
- Office 365

**x_mitre_version:**
- 1.3

---

### Security Software Discovery
**Created:** 2020-02-21T21:16:18.066Z  
**Description:**
Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.

Example commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.

Adversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. (Citation: Expel IO Evil in AWS) For example, the permitted IP ranges, ports, or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. (Citation: DescribeSecurityGroups - Amazon Elastic Compute Cloud)

**External References:**
- [Expel IO Evil in AWS](https://expel.io/blog/finding-evil-in-aws/)
- [DescribeSecurityGroups - Amazon Elastic Compute Cloud](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html)

**Kill Chain Phases:**
- Discovery

**Modified:** 2023-04-21T12:30:00.939Z  
**Name:** Security Software Discovery  
**Type:** Attack Pattern  
**x_mitre_attack_spec_version:**
- 3.1.0

**x_mitre_contributors:**
- Isif Ibrahima, Mandiant

**x_mitre_data_sources:**
- Firewall: Firewall Metadata
- Process: OS API Execution
- Command: Command Execution
- Process: Process Creation
- Firewall: Firewall Enumeration

**x_mitre_deprecated:**
- False

**x_mitre_detection:**
System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

In cloud environments, additionally monitor logs for the usage of APIs that may be used to gather information about security software configurations within the environment.

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_is_subtechnique:**
- True

**x_mitre_platforms:**
- Windows
- Azure AD
- Office 365
- SaaS
- IaaS
- Linux
- macOS
- Google Workspace

**x_mitre_version:**
- 1.4

---

### Hidden Window
**Created:** 2020-03-13T20:26:49.433Z  
**Description:**
Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks.

On Windows, there are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and Visual Basic, to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden. (Citation: PowerShell About 2019)

Similarly, on macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock.

Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system. (Citation: Antiquated Mac Malware)

**External References:**
- [PowerShell About 2019](https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/About/about_PowerShell_exe?view=powershell-5.1)
- [Antiquated Mac Malware](https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/)

**Kill Chain Phases:**
- Defense Evasion

**Modified:** 2022-03-15T21:09:43.489Z  
**Name:** Hidden Window  
**Type:** Attack Pattern  
**x_mitre_contributors:**
- Travis Smith, Tripwire

**x_mitre_data_sources:**
- File: File Modification
- Script: Script Execution
- Process: Process Creation
- Command: Command Execution

**x_mitre_detection:**
Monitor processes and command-line arguments for actions indicative of hidden windows. In Windows, enable and configure event logging and PowerShell logging to check for the hidden window style. In macOS, plist files are ASCII text files with a specific format, so they're relatively easy to parse. File monitoring can check for the apple.awt.UIElement or any other suspicious plist tag in plist files and flag them.

**x_mitre_domains:**
- Enterprise Attack

**x_mitre_is_subtechnique:**
- True

**x_mitre_permissions_required:**
- User

**x_mitre_platforms:**
- macOS
- Windows
- Linux

**x_mitre_version:**
- 1.1

---

### Transmitted Data Manipulation
**Created:** 2019-04-09T16:08:20.824Z  
**Description:**
Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. (Citation: FireEye APT38 Oct 2018) (Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to