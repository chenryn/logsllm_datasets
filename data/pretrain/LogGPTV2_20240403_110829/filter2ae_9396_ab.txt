        }
    }
例子中 `test()` 函数仅接收一个 `uint256` 的参数，但在 `callFunc()` 中传入了三个参数，由于 `call`
自动忽略多余参数，所以成功调用了 `test()` 函数。
#### call 注入模型
`call` 注入引起的最根本的原因就是 `call` 在调用过程中，会将 `msg.sender` 的值转换为发起调用方的地址，下面的例子描述了
`call` 注入的攻击模型。
    contract B {
        function info(bytes data){
            this.call(data);
            //this.call(bytes4(keccak256("secret()"))); //利用代码示意
        }
        function secret() public{
            require(this == msg.sender);
            // secret operations
        }
    }
在合约 B 中存在 `info()` 和 `secret()` 函数，其中 `secret()` 函数只能由合约自己调用，在 `info()`
中有用户可以控制的 `call` 调用，用户精心构造传入的数据(将注释转为字节序列)，即可绕过 `require()` 的限制，成功执行下面的代码。
对于 `call` 注入的问题，实际造成的漏洞影响取决于被调用的函数，那么可能的安全问题包括：
**1.权限绕过**  
如同上面的例子，合约将合约本身的地址作为权限认证的条件之一，但由于 `call` 的调用会导致 `msg.sender`
变量值更新为调用方的值，所以就会引起权限绕过的问题。
    function callFunc(bytes data) public {
        this.call(data);
        //this.call(bytes4(keccak256("withdraw(address)")), target); //利用代码示意
    }
    function withdraw(address addr) public {
        require(isAuth(msg.sender));
        addr.transfer(this.balance);
    }
    function isAuth(address src) internal view returns (bool) {
        if (src == address(this)) {
            return true;
        }
        else if (src == owner) {
            return true;
        }
        else {
            return false;
        }
    }
上述例子表示了权限绕过导致的任意用户提取货币。，`withdraw()` 函数设计的初衷为只能有合约拥有者和合约本身可以发起取款的操作；但由于 `call`
的问题，只要用户精心拼接字符序列调用 `call`，从而调用 `withdraw()` 函数，就可以绕过 `isAuth()` 并取款。
**2.窃取代币**  
在代币合约中，往往会加入一个 `call` 回调函数，用于通知接收方以完成后续的操作。但由于 `call` 调用的特性，用户可以向 `call` 传入
`transfer()` 函数调用，即可窃取合约地址下代币。
下面的例子表示了用户传入 `transfer()` 函数导致窃取代币。
    function transfer(address _to, uint256 _value) public {
        require(_value )
a. `ERC223` 标准中的自定义回调函数：  
(Github/ERC223: )
    function transferFrom(address _from, address _to, uint256 _amount, bytes _data, string _custom_fallback) public returns (bool success) {
        ...
        if (isContract(_to)) {
            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
            receiver.call.value(0)(bytes4(keccak256(_custom_fallback)), _from, _amount, _data);
        }
        ...
    }
b. `ds-auth` 权限认证和更新合约拥有者函数：  
(Github/ds-auth: )
    ...
    function setOwner(address owner_) public auth {
        owner = owner_;
        emit LogSetOwner(owner);
    }
    ...
    modifier auth {
        require(isAuthorized(msg.sender, msg.sig));
        _;
    }
    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {
        if (src == address(this)) {
            return true;
        } else if (src == owner) {
            return true;
        } else if (authority == DSAuthority(0)) {
            return false;
        } else {
            return authority.canCall(src, this, sig);
        }
    }
黑客通过调用 `transferFrom()` 函数，并传入黑客自己的地址作为 `_from` 参数， ATN 合约的地址作为 `_to` 参数，并传入
`setOwner()` 作为回调函数；在执行过程中，由于 `call` 调用自动忽略多余的参数，黑客的地址将作为 `setOwner()`
的参数成功执行到函数内部，与此同时，`call` 调用已经将 `msg.sender` 转换为了合约本身的地址，也就绕过了 `isAuthorized()`
的权限认证，黑客成功将合约的拥有者改为了自己；随后调用 `Mint()` 函数为自己发行代币，最后黑客再次调用 `setOwner()`
将权限还原，企图销毁作案现场。
黑客攻击链：
得力于 ATN 代币团队及时发现问题，并高效的解决问题，此次事件并未对 ATN 代币造成较大的波动；ATN 代币团队封锁了黑客账户，也销毁了由黑客发行的
1100W 个代币，最后在交易所的配合下追踪黑客。
**2.大量代币使用不安全代码**
对于第二种利用模型，在目前公开的智能合约中，仍有不少合约使用这种不安全的代码，为了实现通知接收方以完成后续的操作，加入了一个高度自由的回调函数方法。以下是存在安全隐患的代码片段：
(etherscan:
)
    ...
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(_to != address(0));
        require(_value  balances[_to]);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }
    ...
    function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        if(!_spender.call(_extraData)) { revert(); }
        return true;
    }
    ...
黑客通过调用 `approveAndCallcode()` 函数，将合约地址作为 `_spender` 参数，并将 `transfer()`
的调用转换为字节序列作为 `_extraData` 参数，最终调用 `transfer()` 函数。在 `transfer()` 函数中，`_to`
参数为黑客的地址，而此时 `msg.sender` 的值已经是合约本身的地址了，黑客通过这种方式，成功窃取了合约地址中的代币。
黑客攻击链：
**对于上述所描述的安全问题目前还不能造成直接的经济损失。在对这类智能合约的审计过程中，发现目前大量的代币合约不会使用到合约本身的地址作为存储单元，也就是说
合约地址所对应的代币量为 0 (`balances[address(this)] ==
0`)。但这种不安全的代码很难猜测到在后续的发展中，会引起什么样的问题，应该保持关注并避免这种不安全的代码。**
### 0x04 callcode 安全问题
> callcode: 调用后内置变量 `msg` 的值 **会修改** 为调用者，但执行环境为 **调用者** 的运行环境。
由于 `callcode` 同时包含了 `call` 和 `delegatecall` 的特性，通过上文对 `call` 和 `delegatecall`
的安全问题进行了分析和举例，可以得出的结论是 `call` 和 `delegatecall` 存在的安全问题将同时存在于 `callcode`
中，这里不再进行详细的分析。
### 0x05 总结
目前，区块链技术极高的热度促使该技术不断的投入到了生产环境中，但还没有完整的技术流水线，也没有统一的行业规范，同时 Solidity 语言现在版本为
`0.4.25`，还没有发布第一个正式版本，导致基于区块链技术的产品出现各种安全漏洞，部分漏洞可以直接造成经济损失。
针对文中所提到的安全隐患，这里给开发者几个建议：
  1. `call`、`callcode`、`delegatecall`调用的自由度极大，并且 `call` 会发生 `msg` 值的改变，需要谨慎的使用这些底层的函数；同时在使用时，需要对调用的合约地址、可调用的函数做严格的限制。
  2. `call` 与 `callcode` 调用会改变 `msg` 的值，会修改 `msg.sender` 为调用者合约的地址，所以在合约中不能轻易将合约本身的地址作为可信地址。
  3. `delegatecall` 与 `callcode` 会拷贝目标代码到自己的环境中执行，所以调用的函数应该做严格的限制，避开调用任意函数的隐患。
  4. 智能合约在部署前必须通过严格的审计和测试。
针对目前主流的以太坊应用，知道创宇提供专业权威的智能合约审计服务，规避因合约安全问题导致的财产损失，为各类以太坊应用安全保驾护航。
知道创宇404智能合约安全审计团队：   
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
* * *
References:  
[1] Solidity:   
[2] zeppelin:   
[3] seebug.“智能合约消息调用攻防”:   
[4] ATN.IO:   
[5] seebug.DAO攻击事件解析:   
[6] seebug.智能合约call注入攻击:   
[7] Github.ATN:   
[8] Github.ERC223:   
[9] Github.ds-auth:   
[10]The Parity Wallet Hack Explained:   
[11]Github.OpenZeppelin:   
[12]ethereum.call/callcode/delegatecall:
[13]Github.parity:
[14]《以太坊技术详解与实战》
* * *