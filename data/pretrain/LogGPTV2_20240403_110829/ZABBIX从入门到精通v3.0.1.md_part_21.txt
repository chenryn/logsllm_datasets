搜索：zabbix如何优化之类的文章，你在浪费时间。
 操作系统
使用最新的操作系统，优化、定制化操作系统内核。应该会有些作用，但是肯定不大。
 数据库优化
DBsock优化
如果MySQL和zabbix server在同一台服务器上，socket连接要比tcp连接要更快。
 数据库分离
将数据库服务器独立，数据库和zabbix资源互相独立，例如：可以购买一台RDS
 数据库引擎
使用MySQL5.6或者更高版本，自从MySQL被Oracle收购了，它的性能确实有不少的提升。请一定选择innodb，
别选择myisam，因为zabbix在innodb的性能比在myisam快1.5倍，而且myisam不安全，zabbix监控数据量很大，
一旦表坏了，那就是一个悲剧。
mysql分区，history等等表数据量较大，可以试着分区替身性能。
 其他优化
a) 减少history保存时间
b) 减少item获取间隔时间
c) 减少不必要的监控项
在条件不允许或者以上方法都无效的情况下，请一定考虑以上建议。在监控环境中，以上三点是大家都在犯的错误，
大部分 item 是不需要保存太长的数据，有些监控项根本无意义，有些监控项的间隔时间太短。一直以来我都在犯
这个错，但是因为zabbix性能一直不错，暂时不纠正，数据多点总比少点好，是不是~
第十七章 Zabbix 实战
Zabbix API 开发实战：创建维护模式
前言
前段时间，运维生存时间群里有一位兄弟咨询 API 操作，由于时间忙，给了一份写好的 zabbix 维护脚本给他参考，
脚本里面包含用户登录或者token、获取主机信息、创建维护模式。有python脚本功力的同学直接看脚本。
脚本功能
zabbix_maintenance.py 执行本脚本，zabbix将此服务器置为维护状态，周期为10分钟。本脚本只需要修改 zabbix
用户ID、用户名、密码、网址即可
备注：zabbix中的hostname必须与当前主机名一致
API 脚本
#!/usr/bin/env python
# -*-coding:utf-8-*-
import urllib
import urllib2
import json
import sys
import platform
import time
def auth(uid, username, password, api_url):
"""
zabbix认证
:param uid:
:param username:
:param password:
:return:
"""
dict_data = {}
dict_data['method'] = 'user.login' # 方法
dict_data['id'] = uid # 用户id
dict_data['jsonrpc'] = "2.0" # api版本
dict_data['params'] = {"user": username, "password": password} # 用户账号密码
jdata = json.dumps(dict_data) # 格式化json数据
content = post_data(jdata, api_url) # post json到接口
return content # 返回信息
def post_data(jdata, url):
"""
POST方法
:param jdata:
:param url:
:return:
"""
req = urllib2.Request(url, jdata, {'Content-Type': 'application/json'})
response = urllib2.urlopen(req)
# content = response.read()
content = json.load(response)
return content
def create_maintenance(name, hostid, active_since, active_till, period, auth_code, api_url):
"""
create maintenance
:return:
"""
dict_data = {}
dict_data['method'] = 'maintenance.create' # 方法
dict_data['id'] = uid # 用户id
dict_data['jsonrpc'] = "2.0" # api版本
dict_data['auth'] = auth_code # api版本
dict_data['description'] = "UPDATE" + hostid # api版本
# host
hostids = [hostid]
# timeperiods
timeperiods = [{"timeperiod_type": 0, "start_time": 64800, "period": period}]
dict_data['params'] = {"name": name, "active_since": active_since, "timeperiods": timeperiods,
"active_till": active_till, "hostids": hostids} # 用户账号密码
jdata = json.dumps(dict_data) # 格式化json数据
content = post_data(jdata, api_url) # post json到接口
return content # 返回信息
def get_hostid(hostname, auth_code, uid, api_url):
"""
use hostname get hostid
:param hostname:
:param auth:
:param uid:
:return:
"""
dict_data = {}
dict_data['method'] = 'host.getobjects' # 方法
dict_data['id'] = uid # 用户id
dict_data['jsonrpc'] = "2.0" # api版本
dict_data['params'] = {"name": hostname} # 主机名
dict_data['auth'] = auth_code # auth串
jdata = json.dumps(dict_data) # 格式化json数据
content = post_data(jdata, api_url) # post json到接口
return content # 返回信息
def logout(uid, auth_code, api_url):
"""
退出
:param uid:
:param auth_code:
:return:
"""
dict_data = {}
dict_data['method'] = 'user.logout' # 方法
dict_data['id'] = uid # 用户id
dict_data['jsonrpc'] = "2.0" # api版本
dict_data['params'] = []
dict_data['auth'] = auth_code # auth串
jdata = json.dumps(dict_data) # 格式化json数据
content = post_data(jdata, api_url) # post json到接口
return content # 返回信息
if __name__ == '__main__':
# user info
uid = 5 # 用户ID
username = 'zabbix用户名'
password = 'zabbix密码'
api_url = "http://zabbix网址/zabbix/api_jsonrpc.php"
res = auth(5, username, password, api_url) # 认证
if res['result']:
auth_code = res['result'] # 认证串
hostname = platform.node() # 主机名
res = get_hostid(hostname, auth_code, uid, api_url)
if res['result']:
period = 600 # 维护时长
active_since = int(time.time()) # 开始时间
active_till = int(time.time()) + period # 结束时间
hostid = res['result'][0]['hostid'] # 主机
res = create_maintenance('AutoMaintenance_' + hostname + '_' + str(active_since), hostid, active_since,
active_till, period,
auth_code, api_url) # 创建维护
logout(uid, auth_code, api_url) # 退出登录
print res
else:
pass
备注：以上脚本适用于zabbix2.4及以下版本
如有相关问题，大家有如下问题可以咨询凉白开或者SA们：加入QQ群（看网站底部）、关注微信公众号ttlsacom
提问、发送邮件至PI:EMAIL、在本文里留言！
Zabbix 监控 nginx 性能
需要使用zabbix监控nginx，首先nginx需要配置ngx_status，如果开启请看凉白开之前的文章《启用nginx status
状态详解》
nginx status 信息
# curl http://127.0.0.1/ngx_status
Active connections: 11921
server accepts handled requests
11989 11989 11991
Reading: 0 Writing: 7 Waiting: 42
以上为nginx性能计数，我们除了监控以上数据，还需要监控nginx进程状态，并且配置触发器！
zabbix 客户端配置
 编写客户端脚本ngx_status.sh
#!/bin/bash
# DateTime: 2015-10-25
# AUTHOR：凉白开
# WEBSITE: http://www.ttlsa.com
# Description：zabbix监控nginx性能以及进程状态
# Note：此脚本需要配置在被监控端，否则ping检测将会得到不符合预期的结果
# 文章地址：http://www.ttlsa.com/zabbix/zabbix-monitor-nginx-performance/
HOST="127.0.0.1"
PORT="80"
# 检测nginx进程是否存在
function ping {
/sbin/pidof nginx | wc -l
}
# 检测nginx性能
function active {
/usr/bin/curl "http://$HOST:$PORT/ngx_status/" 2>/dev/null| grep 'Active' | awk '{print $NF}'
}
function reading {
/usr/bin/curl "http://$HOST:$PORT/ngx_status/" 2>/dev/null| grep 'Reading' | awk '{print $2}'
}
function writing {
/usr/bin/curl "http://$HOST:$PORT/ngx_status/" 2>/dev/null| grep 'Writing' | awk '{print $4}'
}
function waiting {
/usr/bin/curl "http://$HOST:$PORT/ngx_status/" 2>/dev/null| grep 'Waiting' | awk '{print $6}'
}
function accepts {
/usr/bin/curl "http://$HOST:$PORT/ngx_status/" 2>/dev/null| awk NR==3 | awk '{print $1}'
}
function handled {
/usr/bin/curl "http://$HOST:$PORT/ngx_status/" 2>/dev/null| awk NR==3 | awk '{print $2}'
}
function requests {
/usr/bin/curl "http://$HOST:$PORT/ngx_status/" 2>/dev/null| awk NR==3 | awk '{print $3}'
}
# 执行function
$1
 zabbix客户端文件配置
将自定义的UserParameter加入配置文件，然后重启agentd，如下：
#cat /usr/local/zabbix-3.0.0/etc/zabbix_agentd.conf | grep nginx
UserParameter=nginx.status[*],/usr/local/zabbix-3.0.0/scripts/ngx-status.sh $1
# killall zabbix_agentd
# /usr/local/zabbix-3.0.0/sbin/zabbix_agentd
 zabbix_get获取数据
此步骤可以跳过，但是最好是测试一下，因为通过此命令我们可以检测配置是否正确
# /usr/local/zabbix-3.0.0/bin/zabbix_get -s 10.10.1.121 -k 'nginx.status[accepts]'
9570756
# /usr/local/zabbix-3.0.0/bin/zabbix_get -s 10.10.1.121 -k 'nginx.status[ping]'
1
在zabbix server服务器上执行如上命令, 10.10.1.121为agentd机器
zabbix web 端配置
 导入Template App NGINX模板
模板我已经写好了，将会放到附件中。具体导入方式请看前面的文章《zabbix链接及解除模板链接（76）》
 Link NGINX模板
到了最后一个阶段，登陆zabbix管理端，link模板到nginx服务器：configuration->hosts->点击nginx所在服务器->
点击template->Link new templates输入"Template App NGINX"->Add->最后点击update。
监控效果
模板附件下载：zabbix_monitor_nginx_template_ttlsa_com
模板请到ttlsa官方网站下载
zabbix 监控 php-fpm 性能状态
不多说，首先你需要开启 php-fpm 的状态页，请参考凉白开前面写的文章《启用 php-fpm 状态详解》,然后更我一
步一步来完成zabbix对php-fpm的监控。
zabbix 客户端配置
 增加自定义key
# cat zabbix_agentd.conf | grep 'php-fpm'
UserParameter=php-fpm.status[*],/usr/bin/curl -s "http://127.0.0.1/status?xml" | grep "" | awk -F'>|configuration->templates->import（右侧）->选择在ttlsa下载的模板->最后点击import。至此php-fpm模
板已经导入到zabbix中。
 Link/关联模板