例如:
.RS
.nf
.sp .5
\f(CW
sushi.1372a > wrl.nfs:
        148 read fh 21,11/12.195 8192 bytes @ 24576
wrl.nfs > sushi.1372a:
        reply ok 1472 read REG 100664 ids 417/0 sz 29388
\fP
.sp .5
.fi
.RE
(\-v 同时 使它 显示 IP 报头的 TTL, ID, 和 分片域, 在 这个例子里 把它们
省略了.)  在第一行, \fIsushi\fP 请求 \fIwrl\fP 从 文件 21,11/12.195
的 偏移位置 24576 开始, 读取 8192 字节. \fIWrl\fP 回答 `ok'; 第二行 显示的 
报文 是 应答的 第一个 分片, 因此 只有 1472 字节 (其余数据 在 后续的 分片中
传过来, 但由于 这些分片里 没有 NFS 甚至 UDP 报头, 因此 根据 所使用的 
过滤器表达式, 有可能 不再显示). \-v 选项 还会 显示 一些 文件属性 (它们 作为 
文件数据 的 附带部分 传回来): 文件类型 (普通文件 ``REG''), 存取模式
(八进制数), uid 和 gid, 以及 文件大小.
.LP
如果再给一个 \-v 选项 (\-vv), 还能 显示 更多的细节.
.LP
注意 NFS 请求 的 数据量 非常大, 除非 增加 \fIsnaplen\fP, 否则 很多细节 
无法显示. 试一试 `\fB\-s 192\fP' 选项.
.LP
NFS 应答报文 没有明确 标明 RPC 操作.  因此 \fItcpdump\fP 保留有 ``近来的'' 
请求 记录, 根据 交互号 匹配 应答报文. 如果 应答报文 没有 相应的 请求报文,
它 就 无法分析.
.HD
KIP Appletalk (UDP 上的 DDP)
.LP
Appletalk DDP 报文 封装在 UDP 数据报 中, 解包后 按 DDP 报文 转储 
(也就是说, 忽略 所有的 UDP 报头 信息). 文件
.I /etc/atalk.names
用来 把 appletalk 网络和节点号 翻译成 名字. 这个文件 的 行格式 是
.RS
.nf
.sp .5
\fInumber       name\fP
\f(CW1.254              ether
16.1            icsd-net
1.254.110       ace\fP
.sp .5
.fi
.RE
前两行 给出了 appletalk 的 网络名称. 第三行 给出 某个主机 的 名字
(主机和网络 依据 第三组 数字 区分 \- 网络号 \fI一定\fP 是 两组数字,
主机号 \fI一定\fP 是 三组 数字.)  号码 和 名字 用 空白符(空格或tab) 隔开.
.I /etc/atalk.names
文件 可以 包含 空行 或 注释行(以`#'开始的行).
.LP
Appletalk 地址 按 这个格式 显示
.RS
.nf
.sp .5
\fInet.host.port\fP
\f(CW144.1.209.2 > icsd-net.112.220
office.2 > icsd-net.112.220
jssmag.149.235 > icsd-net.2\fP
.sp .5
.fi
.RE
(如果 不存在
.I /etc/atalk.names ,
或者 里面 缺少 有效项目, 就以 数字形式 显示 地址.)
第一个例子里, 网络 144.1 的 209 节点的 NBP (DDP 端口 2) 向 网络 icsd 的 
112 节点 的 220 端口 发送数据.
第二行 和 上面 一样, 只是 知道了 源节点 的 全称 (`office').  
第三行 是从 网络 jssmag 的 149 节点 的 235 端口 向 icsd-net 的 NBP 端口
广播 (注意 广播地址 (255) 隐含在 无主机号的 网络名字 中 \- 所以 在
/etc/atalk.names 中 区分 节点名 和 网络名 是个 好主意).
.LP
Tcpdump 可以 翻译 NBP (名字联结协议) 和 ATP (Appletalk 交互协议) 的 报文
内容. 其他协议 只转储 协议名称 (或号码, 如果 还 没给 这个协议 注册 名称) 
和 报文大小.
\fBNBP 报文\fP 的 输出格式 就象 下面的 例子:
.RS
.nf
.sp .5
\s-2\f(CWicsd-net.112.220 > jssmag.2: nbp-lkup 190: "=:LaserWriter@*"
jssmag.209.2 > icsd-net.112.220: nbp-reply 190: "RM1140:LaserWriter@*" 250
techpit.2 > icsd-net.112.220: nbp-reply 190: "techpit:LaserWriter@*" 186\fP\s+2
.sp .5
.fi
.RE
第一行 是 网络 icsd 的 112 主机 在 网络 jssmag 上的 广播, 对 名字 
laserwriter 做 名字查询请求. 名字查询请求 的 nbp 标识号 是 190.
第二行 显示的是 对 这个请求 的 回答 (注意 它们 有 同样的 标识号),
主机 jssmag.209 表示 在它的 250 端口 注册了 一个 laserwriter 的 资源,
名字是 "RM1140". 第三行 是 这个请求 的 其他回答, 主机 techpit 的
186 端口 有 laserwriter 注册的 "techpit".
\fBATP 报文\fP 格式 如 下例 所示:
.RS
.nf
.sp .5
\s-2\f(CWjssmag.209.165 > helios.132: atp-req  12266 0xae030001
helios.132 > jssmag.209.165: atp-resp 12266:0 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:1 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:2 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:4 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:6 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp*12266:7 (512) 0xae040000
jssmag.209.165 > helios.132: atp-req  12266 0xae030001
helios.132 > jssmag.209.165: atp-resp 12266:3 (512) 0xae040000
helios.132 > jssmag.209.165: atp-resp 12266:5 (512) 0xae040000
jssmag.209.165 > helios.132: atp-rel  12266 0xae030001
jssmag.209.133 > helios.132: atp-req* 12267 0xae030002\fP\s+2
.sp .5
.fi
.RE
Jssmag.209 向 主机 helios 发起 12266 号 交互操作, 请求 8 个 报文(`'). 
行尾的 十六进制数 是 请求中 `userdata' 域 的 值.
.LP
Helios 用 8 个 512字节 的 报文 应答.  跟在 交互号 后面的 `:digit' 
给出了 交互过程中 报文的 序列号, 括弧内的 数字 是 报文的 数据量,
不包括 atp 报头.  报文 7 的 `*' 表明 设置了 EOM 位.
.LP
然后 Jssmag.209 请求 重传 第 3 & 5 报文.  Helios 做了 重传后 jssmag.209 
结束 这次 交互操作. 最后, jssmag.209 发起 下一次 交互请求.  请求中的 `*' 
表明 \fI没有\fP 设置 XO (exactly once) 位.
.HD
IP 分片
.LP
分片的 Internet 数据报 显示为
.RS
.nf
.sp .5
\fB(frag \fIid\fB:\fIsize\fB@\fIoffset\fB+)\fR
\fB(frag \fIid\fB:\fIsize\fB@\fIoffset\fB)\fR
.sp .5
.fi
.RE
(第一种 形式 表明 还有 更多的 分片. 第二种 形式 表明 这是 最后 一片.)
.LP
\fIId\fP 是 分片 标识号.  \fISize\fP 是 分片 大小 (字节), 不包括 IP 报头.
\fIOffset\fP 是 该分片 在 原数据报 中 的 偏移 (单位是字节).
.LP
每一个 分片 的 信息 都可以 打印出来.  第一个 分片 包含了 高层 协议 报头,
显示 协议信息 后 显示 分片 的 信息. 第一个 分片 以后的 分片 不再 含有
高层协议 报头, 所以 在 源目地址 后面 只显示 分片 信息.
例如, 下面是 从 arizona.edu 到 lbl-rtsg.arpa 的 一部分 ftp 传输, 途经的
CSNET 看上去 处理不了 576 字节的 数据报:
.RS
.nf
.sp .5
\s-2\f(CWarizona.ftp-data > rtsg.1170: . 1024:1332(308) ack 1 win 4096 (frag 595a:328@0+)
arizona > rtsg: (frag 595a:204@328)
rtsg.1170 > arizona.ftp-data: . ack 1536 win 2560\fP\s+2
.sp .5
.fi
.RE
这里 有几点 需要注意:  首先, 第二行的 地址 不包括 端口号.  这是因为 TCP
协议 信息 全部 装到了 第一个 分片内, 所以 显示 后续分片的 时候 不可能 知道
端口 或 流序号. 其次, 第一行的 tcp 流序号部分 看上去有 308 字节的 用户数据, 
实际上 是 512 字节 (第一个 分片的 308 和 第二个 分片的 204 字节).  如果
你 正在 寻找 流序号中 的 空洞, 或者 试图 匹配 报文 的 确认(ack), 那你上当了.
.LP
如果 报文的 IP 标有 \fI不要分片\fP 标志, 那么 在尾部 显示 \fB(DF)\fP.
.HD
时戳
.LP
缺省情况下, 所有 输出行 的 前面 都有 时戳. 时戳 就是 当前时间, 显示格式为
.RS
.nf
\fIhh:mm:ss.frac\fP
.fi
.RE
精度 和 内核时钟 一样. 时戳 反映了 内核 收到 报文 的 时间. 从 以太接口 
收到 报文 到 内核 响应 '报文就绪' 中断 有一个 滞后, 该 滞后 不被考虑.
.SH "另见 (SEE ALSO)"
traffic(1C), nit(4P), bpf(4), pcap(3)
.SH 作者 (AUTHORS)
Van Jacobson,
Craig Leres and
Steven McCanne, all of the
Lawrence Berkeley National Laboratory, University of California, Berkeley, CA.
.LP
当前 版本 可以 从 匿名ftp 获得:
.LP
.RS
.I ftp://ftp.ee.lbl.gov/tcpdump.tar.Z
.RE
.SH BUGS
请把 臭虫 报告 传往 tcpdump@ee.lbl.gov.
.LP
NIT 不允许 监视 你自己的 传出数据, BPF 可以. 我们 建议 你 使用 后者.
.LP
应该 试着 重组 IP 分片, 至少可以 为 更高层的 协议 计算出 正确的 长度.
.LP
名字服务逆向询问 转储的 不正确: 打印出 (空的)问题部分, 而实际上 询问 放在了
回答部分. 有人 认为 这种 逆向询问 本身就是 bug, 应该 修改 产生问题 的 程序, 
而非 tcpdump.
.LP
苹果 Ethertalk DDP 的 报文 应该 象 KIP DDP 的 报文 一样 容易 转储, 事实
却 不是 这样. 即使 我们 有意 作点什么 来 促销 Ethertalk (我们没有), 
LBL 也不允许 Ethertalk 出现在 它的 任何网络上, 所以 我们 没办法 测试 
这些代码.
.LP
如果 报文的 路径上 出现 夏时制时间 变化, 可能 导致 时戳 混乱.
(这个时间变化将忽略)
.LP
操作 FDDI 报头的 过滤器表达式 假设 所有的 FDDI 报文 被封装在 以太报文 中.
这对 IP, ARP 和 DECNET Phase IV 无疑是 正确的, 但对 某些 协议 如 ISO CLNS
不正确. 因此, 过滤器 有可能会 糊里糊涂的 的 接收 一些 并不真正 匹配
过滤器表达式 的 报文.
.SH "[中文版维护人]"
.B 徐明 
.SH "[中文版最新更新]"
.BR 2003/05/13
.SH "《中国Linux论坛man手册页翻译计划》"
.BI http://cmpp.linuxforum.net