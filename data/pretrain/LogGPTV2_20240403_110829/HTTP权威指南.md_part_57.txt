查这个校验和来捕获所有意外的实体修改了。５
服务器使用Content-MD5首部发送对实体主体运行MD5算法的结果。只有产生响
应的原始服务器可以计算并发送Content-MD5首部。中间代理和缓存不应当修改或
添加这个首部，否则就会与验证端到端完整性的这个最终目的相冲突。Content-MD5
首部是在对内容做了所有需要的内容编码之后，还没有做任何传输编码之前，计算出
来的。为了验证报文的完整性，客户端必须先进行传输编码的解码，然后计算所得到
的未进行传输编码的实体主体的MD5。举个例子吧，如果一份文档使用gzip算法进
347 行压缩，然后用分块编码发送，那么就对整个经gzip压缩的主体进行MD5计算。
除了检查报文的完整性之外，MD5还可以当作散列表的关键字，用来快速定位文档
并消除不必要的重复内容存储。除了这些可能的用法，一般不常用到Content-MD5
首部。
作为对HTTP的扩展，在IETF的草案中提出了其他一些摘要算法。这些扩展建议
增加新的Want-Digest首部，它允许客户端说明期望响应中使用的摘要类型，并
使用质量值来建议多种摘要算法并说明优先顺序。
15.4 媒体类型和字符集
Content-Type首部字段说明了实体主体的MIME类型。6MIME类型是标准化的
名字，用以说明作为货物运载实体的基本媒体类型（比如：HTML文件、Microsoft
Word文档或是MPEG视频等）。客户端应用程序使用MIME类型来解释和处理其
内容。
注5： 当然，这种方法对同时替换报文主体和摘要首部的恶意攻击无效。这只是为了检测不经意的修改。对
付恶意篡改，需要使用别的机制，比如摘要认证。
注6：在HEAD请求中，Content-Type 说明如果请求是GET时，将要发送的主体的类型。
364 ｜ 第15章
Content-Type的值是标准化的MIME类型，都在互联网号码分配机构（Internet
Assigned Numbers Authority，简称 IANA）中注册。MIME 类型由一个主媒体类
型（比如：text、image或audio等）后面跟一条斜线以及一个子类型组成，子类
型用于进一步描述媒体类型。表15-1中列出了一些Content-Type首部中常用的
MIME类型。附录D中列出了更多的MIME类型。
表15-1 常用媒体类型
媒体类型 描 述
text/html 实体主体是HTML文档
text/plain 实体主体是纯文本文档
image/gif 实体主体是GIF格式的图像
image/jpeg 实体主体是JPEG格式的图像
audio/x-wav 实体主体包含WAV格式声音数据
model/vrml 实体主体是三维的VRML模型
application/vnd.ms-powerpoint 实体主体是Microsoft PowerPoint演示文档
multipart/byteranges 实体主体有若干部分，每个部分都包含了完整文档中不同的字节范围
message/http 实体主体包含完整的HTTP报文（参见TRACE）
要着重注意的是，Content-Type首部说明的是原始实体主体的媒体类型。例如，
如果实体经过内容编码的话，Content-Type首部说明的仍是编码之前的实体主体
的类型。 348
15.4.1 文本的字符编码
Content-Type首部还支持可选的参数来进一步说明内容的类型。charset（字符
集）参数就是个例子，它说明把实体中的比特转换为文本文件中的字符的方法：
Content-Type: text/html; charset=iso-8859-4
我们将在第16章详细讨论字符集。
15.4.2 多部分媒体类型
MIME中的multipart（多部分）电子邮件报文中包含多个报文，它们合在一起作
为单一的复杂报文发送。每一部分都是独立的，有各自的描述其内容的集；不同的
部分之间用分界字符串连接在一起。
HTTP也支持多部分主体。不过，通常只用在下列两种情形之一：提交填写好的表
格，或是作为承载若干文档片段的范围响应。
实体和编码 ｜ 365
15.4.3 多部分表格提交
当提交填写的HTTP表格时，变长的文本字段和上传的对象都作为多部分主体里面
独立的部分发送，这样表格中就可以填写各种不同类型和长度的值。比如，你可能
选择用昵称和小照片来填写询问你的名字和介绍信息的表格，而你的朋友可能填了
她的全名并在介绍信息表内抱怨了一堆大众汽车的修理问题。
HTTP使用Content-Type:multipart/form-data或Content-Type:multipart/
mixed这样的首部以及多部分主体来发送这种请求，举例如下：
Content-Type: multipart/form-data; boundary=[abcdefghijklmnopqrstuvwxyz]
其中的boundary参数说明了分割主体中不同部分所用的字符串。
349 下面的例子展示了multipart/form-data编码。假设我们有这样的表格：
What is your name? 
What files are you sending? 
如果用户在文本输入字段中键入Sally，并选择了文本文件essayfile.txt，用户Agent
代理可能会发回下面这样的数据：
Content-Type: multipart/form-data; boundary=AaB03x
--AaB03x
Content-Disposition: form-data; name="submit-name"
Sally
--AaB03x
Content-Disposition: form-data; name="files"; filename="essayfile.txt"
Content-Type: text/plain
...contents of essayfile.txt...
--AaB03x--
如果用户还选了另一个（图像）文件imagefile.gif，用户Agent代理可能像下面这样
构造这个部分：
Content-Type: multipart/form-data; boundary=AaB03x
--AaB03x
Content-Disposition: form-data; name="submit-name"
Sally
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y
366 ｜ 第15章
--BbC04y
Content-Disposition: file; filename="essayfile.txt"
Content-Type: text/plain
...contents of essayfile.txt...
--BbC04y
Content-Disposition: file; filename="imagefile.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary
...contents of imagefile.gif...
--BbC04y--
--AaB03x--
15.4.4 多部分范围响应
HTTP对范围请求的响应也可以是多部分的。这样的响应中有 Content-Type:
multipart/byteranges首部和带有不同范围的多部分主体。下面是一个例子，展
示了对文档不同范围的请求产生的响应：
HTTP/1.0 206 Partial content
Server: Microsoft-IIS/5.0
Date: Sun, 10 Dec 2000 19:11:20 GMT
Content-Location: http://www.joes-hardware.com/gettysburg.txt
Content-Type: multipart/x-byteranges; boundary=--[abcdefghijklmnopqrstu
vwxyz]--
Last-Modified: Sat, 09 Dec 2000 00:38:47 GMT
--[abcdefghijklmnopqrstuvwxyz]--
Content-Type: text/plain
Content-Range: bytes 0-174/1441
Fourscore and seven years ago our fathers brought forth on this
continent a new nation, conceived in liberty and dedicated to the
proposition that all men are created equal.
--[abcdefghijklmnopqrstuvwxyz]--
Content-Type: text/plain
Content-Range: bytes 552-761/1441 350
But in a larger sense, we can not dedicate, we can not consecrate,
we can not hallow this ground. The brave men, living and dead who
struggled here have consecrated it far above our poor power to add
or detract.
--[abcdefghijklmnopqrstuvwxyz]--
Content-Type: text/plain
Content-Range: bytes 1344-1441/1441
and that government of the people, by the people, for the people shall
not perish from the earth.
--[abcdefghijklmnopqrstuvwxyz]--
本章后面将详细讨论范围请求。
实体和编码 ｜ 367
15.5 内容编码
HTTP应用程序有时在发送之前需要对内容进行编码。例如，在把很大的HTML文
档发送给通过慢速连接连上来的客户端之前, 服务器可能会对它进行压缩，这样有
助于减少传输实体的时间。服务器还可以把内容搅乱或加密，以此来防止未经授权
的第三方看到文档的内容。
这种类型的编码是在发送方应用到内容之上的。当内容经过内容编码之后，编好码
的数据就放在实体主体中，像往常一样发送给接收方。
15.5.1 内容编码过程
内容编码的过程如下所述。
（1） 网站服务器生成原始响应报文，其中有原始的 Content-Type和Content-
Length首部。
（2） 内容编码服务器（也可能就是原始的服务器或下行的代理）创建编码后的报文。
编码后的报文有同样的Content-Type但Content-Length可能不同（比如
主体被压缩了）。内容编码服务器在编码后的报文中增加Content-Encoding
首部，这样接收的应用程序就可以进行解码了。
351 （3） 接收程序得到编码后的报文，进行解码，获得原始报文。
图15-3给出了内容编码的梗概示例。
原始内容 内容编码之后的内容 原始内容
Content-type: text/html Content-type: text/html Content-type: text/html
Content-length: 12480 Content-length: 3907 Content-length: 12480
Content-encoding: gzip
01001011
11000101
gzip内容解码器 gzip内容编码器
图15-3 内容编码示例
在这个例子中，通过gzip内容编码函数对HTML页面处理之后，得到一个更小的、
压缩的主体。经过网络发送的是压缩的主体，并打上了gzip压缩的标志。接收的客
368 ｜ 第15章
户端使用gzip解码器对实体进行解压缩。
下面给出的响应片段是另一个编码响应的例子（一个压缩的图像）：
HTTP/1.1 200 OK
Date: Fri, 05 Nov 1999 22:35:15 GMT
Server: Apache/1.2.4
Content-Length: 6096
Content-Type: image/gif
Content-Encoding: gzip
[...]
注意，Content-Type首部可以且还应当出现在报文中。它说明了实体的原始格式，
一旦实体被解码，要显示的时候，可能还是需要该信息才行的。记住，Content-
Length首部现在代表的是编码之后的主体长度。
15.5.2 内容编码类型
HTTP定义了一些标准的内容编码类型，并允许用扩展编码的形式增添更多的编码。
由互联网号码分配机构（IANA）对各种编码进行标准化，它给每个内容编码算法分
配了唯一的代号。Content-Encoding首部就用这些标准化的代号来说明编码时使
用的算法。
表15-2列出了一些常用的内容编码代号。 352
表15-2 内容编码代号
Content-Encoding值 描 述
gzip 表明实体采用GNU zip编码a
compress 表明实体采用Unix的文件压缩程序
deflate 表明实体是用zlib的格式压缩的b
identity 表明没有对实体进行编码。当没有Content-Encoding首部时，就默认
为这种情况
a：RFC 1952 中说明了gzip编码。
b：RFC 1950 和 1951 中讲解了zlib格式和deflate压缩算法。
gzip、compress以及deflate编码都是无损压缩算法，用于减少传输报文的大小，不
会导致信息损失。这些算法中，gzip通常是效率最高的，使用最为广泛。
15.5.3 Accept-Encoding首部
毫无疑问，我们不希望服务器用客户端无法解码的方式来对内容进行编码。为了
避免服务器使用客户端不支持的编码方式，客户端就把自己支持的内容编码方式
实体和编码 ｜ 369
列表放在请求的Accept-Encoding首部里发出去。如果HTTP请求中没有包含
Accept-Encoding首部，服务器就可以假设客户端能够接受任何编码方式（等价
于发送Accept-Encoding: *）。
图15-4展示了HTTP事务中的Accept-Encoding首部。
请求报文
GET /logo.gif HTTP/1.1
Accept-encoding: gzip
[...]