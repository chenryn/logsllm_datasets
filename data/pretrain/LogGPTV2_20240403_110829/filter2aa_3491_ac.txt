### CRC Storage and Behavior

- The first 2 symbols store 4 bits of CRC data.
- The next 2 symbols store 3 bits.
- The following 2 symbols store 2 bits, but only in the odd positions.
- The subsequent 2 symbols also store 2 bits, again only in the odd positions.
- The next 2 symbols store 1 bit, only in the odd position.
- Only the first 4 symbols can cause a tail of 6 symbol changes.
- Odd bits change only 1 symbol.
- The CRC is stored in 10 symbols total, including the 6-symbol tail of changes from convolution.
- This complexity made it difficult for tools like CRC Reveng to decode the CRC. Rearranging the bits allowed CRC Reveng to work.

### CRC Reverse Engineering, Continued

- I can now compute a CRC for the 16 data bytes, but I need the mask.
- Initially, I guessed the mask randomly and based all the math on that.
- This worked because the CRC is built using XOR with a non-zero base value for an empty packet, and my mask effectively XORed that base value.
- 9 of the bits change one symbol by 4, which functions like XOR.
- 3 bits can cause a trail of 6 changed symbols, making some packets with those CRC values unreliable.
- I believe the CRC does not protect the Preamble.
- I tried creating packets with various Preamble variations, but none worked.
- I assumed that 16 zeros in the data would have a CRC of 0 based on the mask, and it worked reliably.

### Crafting Packets

- With the CRC and mask, I can now craft my own 16-byte packet.
- I will release my tools on GitHub.
- However, I need a 36-byte packet to overflow the badge.
- I knew this from the start and hoped to figure it out along the way.
- There is no field for a 36-byte packet in the current format.
- Preamble tinkering was unsuccessful.
- It's time to reverse engineer the NFMI firmware.

### Extracting the NFMI Firmware

- To use SWD on the NFMI chip, I first needed to find the reset line, which was on a middle layer.
- I identified the correct ball and used slides to find the line to that ball, confirmed by Joe Grand.
- I scratched off a layer of the badge circuit board to expose the reset line, cut it, and soldered a wire.
- The trace is about the size of a hair, and I used a stereo microscope at Artisan’s Asylum.
- I connected SWD to the undocumented chip, added pull-ups and pull-downs, and resoldered everything.
- After trying settings for random chips, I successfully extracted the NFMI memory space 0-0x18000, excluding the NFMI protocol code.

### Reversing the NFMI Firmware

- I extracted the NFMI protocol code from a section of the badge’s firmware, assembled the pieces, and analyzed it in IDA Pro.
- The code did not indicate a packet length field and was coded to drop packets with more than 11 bytes.
- I removed this restriction, but still don't know how to craft longer packets. Faking the length resulted in uninitialized data.
- I observed and logged oversize packets occurring spontaneously and crashing the badge.

### Off By One Bug to the Rescue

- The NFMI sends packets to the badge via UART.
- The badge checks for 2 bytes of space before copying 1 byte at a time to the ring buffer.
- One-by-one copying allows partial packets, and an off-by-one error allows odd-sized packets.
- By sending the right pattern of packets, I can leave a buffer with 18 free bytes.
- The NFMI chip sends ‘B’, 16 padded bytes, and ‘E’ to the badge MCU via UART.
- The badge writes ‘B’ and 16 bytes of padded data, sees only 1 byte free, and drops the ‘E’.

### Buffer Manipulation

- The badge reads packets from the beginning of the ring buffer, freeing more space.
- Writing a second packet before the badge empties the ring buffer causes the badge to read the first ‘B’ and copy the next 33 bytes before finding ‘E’.
- B16B16E ≈ B33E
- By continuously sending the largest size packet, B22E (11 user bytes), I can fill the ring buffer so the last entry is B22.
- 24 bytes read from the front allows 24 added to the end: B22B22.
- The badge reads faster than we can transmit, so there is lots of space when the next packet arrives: B22B22B22E.
- The badge reads that “B”, then copies 68 bytes to the dataBlog buffer before finding the ‘E’. The dataBlog buffer is only 18 bytes long.

### Demo: Crash a DEF CON 27 Badge via NFMI

- Now we can crash a stock badge at will, though it takes a while with a 2048-byte buffer.
- For a more engaging demo, I set the buffer to 72 bytes.
- The process involves initializing the buffer, completely filling it by blasting it, stopping transmission, having the badge read and drain the buffer, and then attacking the buffer.

### Can We Do Something More Interesting?

- The dataBlob is 18 bytes but takes up 20 bytes of the stack, plus 3 registers on the stack for 12 more bytes, and the LR register.
- We need to overwrite 32 bytes of junk, then up to 4 bytes of the LR.
- The LR can only contain specific values when the ring buffer is full or after certain operations.
- Little-endian format lets us recycle the top bytes, but all data is padded with Dx.
- Sending different lengths of data results in different LR values, some of which may return to waiting for a packet or display ASCII art.
- I can crash a stock badge but not run arbitrary code.

### Fixing the NFMI Protocol

- To overcome this, I modified the victim badge’s firmware to remove the padding code and the ‘B’ and ‘E’ markers.
- The original game still works, and I can use 10 user data bytes to send “B”, data, and “E”.

### NFMI Proprietary Firmware Format

- The NFMI firmware format consists of three sections, each with a Data Segment, CAFEBABE (like Java), Length, Base address, CRC-32/POSIX of the header, Data, Padding, and Checksum/mixed-up-CRC.
- Additional data segments are optional.
- I integrated this into the original firmware for further testing.

### Live Demos

- I can write an arbitrary string to the debug console, such as “Seth was here!!”.
- I can also write a string from the badge memory to the console, like “Goon” or “Speaker”.
- Ongoing demos include playing RickRoll music, arbitrary sounds, manipulating LEDs, and triggering the ASCII art function.

### Oddities and Remaining Mysteries

- The first packet data always contains the ASCII “0403E045”.
- 0x45E00304 is stored in NXH memory but not referenced by code, possibly an output buffer address.
- Error packets contain “0D047039”.
- NFMI firmware entries suggest possible frequency values.
- Preamble bytes 0-4 suggest a DD8PSK (DD9PSK?) signal, with specific differences between the first 20 symbols.
- Preamble bytes 5-7 and their meanings are still unknown.
- The mask's origin and the method to stream or send longer packets remain mysteries.
- Throughput is currently about 22 bytes per second.
- The nature of the convolution is unclear.