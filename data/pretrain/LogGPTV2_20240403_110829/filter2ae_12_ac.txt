在开发时，我列举了前端检测后缀、后端检测MIME
Type、后端检测后缀黑名单的情况。Tomcat10版本已经不使用`ServletFileUpload`而是使用`request.getPart`即可根据
name 获取文件。  
代码来源：`com/pika/electricrat/unsafeupload/dto/UploadServlet.java`
    // 后端检测MIME Type
    @Api({RequestMethodType.POST})
    public Map imageMIME(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Part file = request.getPart("image_file");
        for(String i : FileServerImpl.IMAGE_FILE_TYPE){
            if (file.getContentType().equals("image/"+i)){
                return uploadFile(file, uploadPath(request));
            }
        }
        HashMap data= new HashMap<>();
        data.put("uploadStatus", false);
        return data;
    }
    // 后端检测后缀黑名单
    @Api({RequestMethodType.POST})
    public Map imageBlackList(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Part file = request.getPart("image_file");
        String fileName = file.getSubmittedFileName();
    //        String suffixName = fileName.substring(fileName.lastIndexOf(".")).toLowerCase();
        String suffixName = fileName.substring(fileName.lastIndexOf("."));
        System.out.println(suffixName);
        for(String i : FileServerImpl.BLACK_FILE_TYPE) {
            if (suffixName.equals(i)){
                HashMap data= new HashMap<>();
                data.put("uploadStatus", false);
                return data;
            }
        }
        return uploadFile(file, uploadPath(request));
    }
    // 上传文件
    private HashMap uploadFile(Part imageFile,String filePath){
        HashMap data= new HashMap<>();
        try {
            String fileName = imageFile.getSubmittedFileName();
            long fileSize = imageFile.getSize();
            if(fileSize > FileServerImpl.MAX_FILE_SIZE){data.put("uploadStatus", false);return data;}
            String fileType = imageFile.getContentType();
            File file = new File(filePath);
            if (!file.exists() && !file.isDirectory()){
                file.mkdir();
            }
            imageFile.write(filePath+"\\"+fileName);
            HashMap fileObject = fsi.uploadFile(new FileEntity(fileName, fileType, (filePath+"\\"+fileName),
                    System.currentTimeMillis(), fileSize, (new ImageVerificationCode()).GetRandom(8)));
            if (fileObject.isEmpty()){
                data.put("uploadStatus", false);
                return data;
            }
            data.put("file", fileObject);
            data.put("uploadStatus", true);
        } catch (Exception e){
            data.put("uploadStatus", false);
            data.put("msg", e.getMessage());
        }
        return data;
    }
后端检测MIME Type，可以抓包轻松修改。后端检测后缀黑名单出问题的是忽略了大小写。  
`String suffixName = fileName.substring(fileName.lastIndexOf("."));`  
这句话本身是获取后缀，但对比时没有考虑到大小写。从下方的`BLACK_FILE_TYPE`可以看出，我们只需要修改后缀为`.jSp`就能绕过。  
代码来源：`com/pika/electricrat/unsafeupload/bo/Impl/FileServerImpl.java`
    public static final String[] IMAGE_FILE_TYPE = {"png", "jpg", "gif"};
    public static final String[] BLACK_FILE_TYPE = {".html", ".htm", ".phtml", ".jsp", ".jspa", ".jspx", ".jsw", ".jsv", ".jspf", ".jtml"};
还有一种经典的文件上传后缀黑名单检测不严格造成的任意文件上传。它的代码和上面的很相似，只是将`lastIndexOf`换成了`IndexOf`  
`String suffixName = fileName.substring(fileName.IndexOf("."));`  
也就是说我们只需要将后缀改成`.jpg.jsp`即可绕过黑名单的检测。
## 目录遍历（穿越）
目录遍历漏洞，也称为目录穿越漏洞，是一种常见的Web应用程序安全漏洞，攻击者可以利用此漏洞获取目标服务器上的敏感信息或者执行任意代码。目录遍历漏洞的原理是，攻击者通过修改Web应用程序中的URL，来访问Web服务器上的非授权目录。  
攻击者通常通过在URL中添加"../"等目录遍历符号，来访问目标服务器上的上层目录，从而绕过Web应用程序的访问控制，访问Web服务器上的敏感文件和目录，例如/etc/passwd、/etc/shadow等系统文件，以及Web应用程序的配置文件、数据库文件、源代码等敏感信息。
### 开发思路
为了充分的演示，我编写了一个经典的业务逻辑代码——任意文件下载。造成这个漏洞的根本原因是对用户输入的`fileName`没有充分的过滤，直接进行路径拼接。我们除了修改成任意文件名之外，还可以使用`../`访问上层目录文件。  
`FileInputStream in = new FileInputStream(uploadPath(request) + "\\" +
fileName);`  
代码来源：`com/pika/electricrat/dir/FileActionServlet.java`
    public void getFile(HttpServletRequest request, HttpServletResponse response){
        String fileName = request.getParameter("fileName");
        String suffix = fileName.substring(fileName.lastIndexOf('.'));
        response.setHeader("content-disposition", "attachment;filename=" + ((new ImageVerificationCode()).GetRandom(10) + suffix));
        try {
            FileInputStream in = new FileInputStream(uploadPath(request) + "\\" + fileName);
            ServletOutputStream out = response.getOutputStream();
            byte[] buffer = new byte[1024];
            int length=-1;
            while((length=in.read(buffer))!=-1) {
                out.write(buffer, 0, length);
            }
            in.close();
            out.close();
        } catch (Exception e){
            e.printStackTrace();
        }
    }
为了防范目录遍历漏洞，我们可以做以下几点：
  1. 过滤`./`和`../`这些特殊符号。
  2. 采用随机字符串ID方式下载文件。
  3. 对目录进行最小权限配置。
  4. 路径后拼接后缀，比如说知道下载的一定是图片，那么就在路径后缀添加`.jpg`防止逃逸。（高效）
## XXE（XML实体注入）
XXE漏洞是指XML外部实体注入漏洞（XML External Entity
Injection），它是一种Web应用程序安全漏洞，可以让攻击者利用XML解析器漏洞，读取服务器上的任意文件，执行远程请求等恶意操作。  
通常，攻击者会在XML文档中注入恶意的外部实体引用，这些实体引用包含了恶意代码，一旦被服务器解析执行，就会执行相应的操作，例如访问敏感数据、上传恶意文件等。攻击者可以通过修改HTTP请求中的XML数据来触发XXE漏洞。  
防范XXE漏洞的措施包括：
  1. 不要信任来自外部的XML数据，对用户输入的XML数据进行严格的输入验证和过滤，包括对实体引用进行白名单或黑名单限制。
  2. 禁用或限制XML解析器中的外部实体功能，例如限制实体的解析范围，禁用或限制DTD解析等。
  3. 采用安全编码实践，例如使用SAX解析器，对解析器进行安全配置等。
  4. 对Web应用程序进行安全漏洞扫描和渗透测试，及时发现和修复漏洞。
### 开发思路
解析XML有很多方法，比较常见的有XMLReader、SAXBuilder、SAXReader、SAXParserFactory、Digester、DocumentBuilderFactory等。这些方法默认的解析都存在XXE漏洞。  
我使用了常见的DocumentBuilderFactory。直接解析请求，并从中根据TagName获取两个标签内容的Text内容。最后还返回了username数据。这就是有回显的XXE漏洞，我们可以用来获取敏感信息。  
获取 payload 也很简单，我们可以从GitHub获取。
     ]>
     &ent;
     John
代码来源：`com/pika/electricrat/xxe/XXEServlet.java`
    public void readXML(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String result="";
        try {
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            InputStream ist = request.getInputStream();
            Document doc = db.parse(ist);
            String username = doc.getElementsByTagName("username").item(0).getTextContent();
            String password = doc.getElementsByTagName("password").item(0).getTextContent();
            int isLogin = username.equals("admin") && password.equals("123456") ? 1 : 0;
            result = String.format("%d%s",isLogin,username);
        } catch (Exception e) {
            e.printStackTrace();
            result = String.format("%d%s",3,e.getMessage());
        }
        response.setContentType("text/xml;charset=UTF-8");
        response.getWriter().append(result);
    }
## SSRF（服务器端请求伪造）
SSRF漏洞（Server-Side Request
Forgery）指的是攻击者在Web应用程序中发起恶意请求，让服务器端向指定的地址发送网络请求，而这个地址是由攻击者控制的，攻击者可以通过该漏洞访问到应用程序无权访问的资源，比如内部网络中的其他服务、系统文件等。SSRF漏洞很危险，因为攻击者可以利用它来窃取敏感数据、发起攻击、甚至直接获取服务器的控制权。  
SSRF漏洞通常是由于Web应用程序在处理输入时，没有对用户输入进行充分的验证和过滤，导致攻击者可以构造恶意的请求。攻击者可以通过修改HTTP请求中的URL参数或POST请求中的数据来触发SSRF漏洞，例如修改请求中的域名或IP地址，或者使用URL编码、IP地址转换等技术来绕过过滤。  
防范SSRF漏洞的措施包括：
  1. 对用户输入的URL参数或POST数据进行严格的验证和过滤，包括对协议、域名、IP地址等进行白名单限制。
  2. 对Web应用程序中发起的网络请求进行安全配置，例如限制请求的目标范围、禁用危险的协议等。
  3. 对Web应用程序进行安全漏洞扫描和渗透测试，及时发现和修复漏洞。
  4. 在服务器端进行安全配置，例如限制网络端口、禁用危险的系统命令等。
### 开发思路
SSRF漏洞主要有以下几个危害：
  1. 获取内网主机、端口和banner信息。
  2. 对内网的应用程序进行攻击，例如 Redis、jboss 等。
  3. 利用 file 协议读取文件。
  4. 可以攻击内网程序造成溢出。
Java 中我们不能像 PHP 那样使用 gopher 协议来拓展攻击面。我们可以从`sun.net.www.protocol`下看到支持的协议。
我们可以通过 file 进行文件读取操作，对于无回显的文件也可以通过利用 FTP
协议进行外带攻击。一般来说，我们想要使用以上所有的协议，我们需要用到`URLConnection`和`URL`方法。  
SSRF漏洞通常出现在社交分享、远程图片加载或下载、图片或文章收藏、转码、通过网址在线翻译、网站采集、从远程服务器请求资源等功能点。  
我这里实现了远程图片采集的功能，将获取到的数据进行base64编码并返回，没有限制请求的URL，从而导致SSRF漏洞的产生。  
代码来源：`com/pika/electricrat/ssrf/SSRFServlet.java`