identifies a RAW type.
storage_clause
Use the storage_clause parameter to specify attributes for the queue table.
Please note that only the TABLESPACE option is enforced; all others are accepted
for compatibility and ignored. Use the TABLESPACE clause to specify the name
of a tablespace in which the table will be created.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 55
Database Compatibility for Oracle® Developers
Built-in Package Guide
storage_clause may be one or more of the following:
TABLESPACE tablespace_name, PCTFREE integer, PCTUSED integer,
INITRANS integer, MAXTRANS integer or STORAGE storage_option.
storage_option may be one or more of the following:
MINEXTENTS integer, MAXEXTENTS integer, PCTINCREASE integer,
INITIAL size_clause, NEXT, FREELISTS integer, OPTIMAL
size_clause, BUFFER_POOL {KEEP|RECYCLE|DEFAULT}.
sort_list
sort_list controls the dequeueing order of the queue; specify the names of the
column(s) that will be used to sort the queue (in ascending order). The currently
accepted values are the following combinations of enq_time and priority:
enq_time, priority
priority, enq_time
priority
enq_time
multiple_consumers
If specified, multiple_consumers must be FALSE.
message_grouping
If specified, message_grouping must be NONE.
comment
Use the comment parameter to provide a comment about the queue table.
auto_commit
auto_commit is accepted for compatibility, but is ignored.
primary_instance
primary_instance is accepted for compatibility and stored, but is ignored.
secondary_instance
secondary_instance is accepted for compatibility, but is ignored.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 56
Database Compatibility for Oracle® Developers
Built-in Package Guide
compatible
compatible is accepted for compatibility, but is ignored.
secure
secure is accepted for compatibility, but is ignored.
Example
The following anonymous block first creates a type (work_order) with attributes that
hold a name (a VARCHAR2), and a project description (a TEXT). The block then uses that
type to create a queue table:
BEGIN
CREATE TYPE work_order AS (name VARCHAR2, project TEXT, completed BOOLEAN);
EXEC DBMS_AQADM.CREATE_QUEUE_TABLE
(queue_table => 'work_order_table',
queue_payload_type => 'work_order',
comment => 'Work order message queue table');
END;
The queue table is named work_order_table, and contains a payload of a type
work_order. A comment notes that this is the Work order message queue table.
3.3.5 DROP_QUEUE
Use the DROP_QUEUE procedure to delete a queue. The signature is:
DROP_QUEUE(
queue_name IN VARCHAR2,
auto_commit IN BOOLEAN DEFAULT TRUE)
Parameters
queue_name
The name of the queue that you wish to drop.
auto_commit
auto_commit is accepted for compatibility, but is ignored.
Example
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 57
Database Compatibility for Oracle® Developers
Built-in Package Guide
The following anonymous block drops the queue named work_order:
BEGIN
DBMS_AQADM.DROP_QUEUE(queue_name => 'work_order');
END;
3.3.6 DROP_QUEUE_TABLE
Use the DROP_QUEUE_TABLE procedure to delete a queue table. The signature is:
DROP_QUEUE_TABLE(
queue_table IN VARCHAR2,
force IN BOOLEAN default FALSE,
auto_commit IN BOOLEAN default TRUE)
Parameters
queue_table
The (optionally schema-qualified) name of the queue table.
force
The force keyword determines the behavior of the DROP_QUEUE_TABLE
command when dropping a table that contain entries:
If the target table contains entries and force is FALSE, the command will
fail, and the server will issue an error.
If the target table contains entries and force is TRUE, the command will
drop the table and any dependent objects.
auto_commit
auto_commit is accepted for compatibility, but is ignored.
Example
The following anonymous block drops a table named work_order_table:
BEGIN
DBMS_AQADM.DROP_QUEUE_TABLE ('work_order_table', force => TRUE);
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 58
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.3.7 PURGE_QUEUE_TABLE
Use the PURGE_QUEUE_TABLE procedure to delete messages from a queue table. The
signature is:
PURGE_QUEUE_TABLE(
queue_table IN VARCHAR2,
purge_condition IN VARCHAR2,
purge_options IN aq$_purge_options_t)
Parameters
queue_table
queue_table specifies the name of the queue table from which you are deleting
a message.
purge_condition
Use purge_condition to specify a condition (a SQL WHERE clause) that the
server will evaluate when deciding which messages to purge.
purge_options
purge_options is an object of the type aq$_purge_options_t. An
aq$_purge_options_t object contains:
Attribute Type Description
Block Boolean Specify TRUE if an exclusive lock should be held
on all queues within the table; the default is
FALSE.
delivery_mode INTEGER delivery_mode specifies the type of message
that will be purged. The only accepted value is
DBMS_AQ.PERSISTENT.
Example
The following anonymous block removes any messages from the work_order_table
with a value in the completed column of YES:
DECLARE
purge_options dbms_aqadm.aq$_purge_options_t;
BEGIN
dbms_aqadm.purge_queue_table('work_order_table', 'completed = YES',
purge_options);
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 59
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.3.8 START_QUEUE
Use the START_QUEUE procedure to make a queue available for enqueuing and
dequeueing. The signature is:
START_QUEUE(
queue_name IN VARCHAR2,
enqueue IN BOOLEAN DEFAULT TRUE,
dequeue IN BOOLEAN DEFAULT TRUE)
Parameters
queue_name
queue_name specifies the name of the queue that you are starting.
enqueue
Specify TRUE to enable enqueueing (the default), or FALSE to leave the current
setting unchanged.
dequeue
Specify TRUE to enable dequeueing (the default), or FALSE to leave the current
setting unchanged.
Example
The following anonymous block makes a queue named work_order available for
enqueueing:
BEGIN
DBMS_AQADM.START_QUEUE
(queue_name => 'work_order);
END;
3.3.9 STOP_QUEUE
Use the STOP_QUEUE procedure to disable enqueuing or dequeueing on a specified
queue. The signature is:
STOP_QUEUE(
queue_name IN VARCHAR2,
enqueue IN BOOLEAN DEFAULT TRUE,
dequeue IN BOOLEAN DEFAULT TRUE,
wait IN BOOLEAN DEFAULT TRUE)
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 60
Database Compatibility for Oracle® Developers
Built-in Package Guide
Parameters
queue_name
queue_name specifies the name of the queue that you are stopping.
enqueue
Specify TRUE to disable enqueueing (the default), or FALSE to leave the current
setting unchanged.
dequeue
Specify TRUE to disable dequeueing (the default), or FALSE to leave the current
setting unchanged.
wait
Specify TRUE to instruct the server to wait for any uncompleted transactions to
complete before applying the specified changes; while waiting to stop the queue,
no transactions are allowed to enqueue or dequeue from the specified queue.
Specify FALSE to stop the queue immediately.
Example
The following anonymous block disables enqueueing and dequeueing from the queue
named work_order:
BEGIN
DBMS_AQADM.STOP_QUEUE(queue_name =>'work_order', enqueue=>TRUE,
dequeue=>TRUE, wait=>TRUE);
END;
Enqueueing and dequeueing will stop after any outstanding transactions complete.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 61
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.4 DBMS_CRYPTO
The DBMS_CRYPTO package provides functions and procedures that allow you to encrypt
or decrypt RAW, BLOB or CLOB data. You can also use DBMS_CRYPTO functions to
generate cryptographically strong random values.
The following table lists the DBMS_CRYPTO Functions and Procedures.
Function/Procedure Return Type Description
DECRYPT(src, typ, key, iv) RAW Decrypts RAW data.
DECRYPT(dst INOUT, src, typ, key, N/A Decrypts BLOB data.
iv)
DECRYPT(dst INOUT, src, typ, key, N/A Decrypts CLOB data.
iv)
ENCRYPT(src, typ, key, iv) RAW Encrypts RAW data.
ENCRYPT(dst INOUT, src, typ, key, N/A Encrypts BLOB data.
iv)
ENCRYPT(dst INOUT, src, typ, key, N/A Encrypts CLOB data.
iv)
HASH(src, typ) RAW Applies a hash algorithm to RAW data.
HASH(src) RAW Applies a hash algorithm to CLOB data.
MAC(src, typ, key) RAW Returns the hashed MAC value of the given
RAW data using the specified hash algorithm
and key.
MAC(src, typ, key) RAW Returns the hashed MAC value of the given
CLOB data using the specified hash algorithm
and key.
RANDOMBYTES(number_bytes) RAW Returns a specified number of
cryptographically strong random bytes.
RANDOMINTEGER() INTEGER Returns a random INTEGER.
RANDOMNUMBER() NUMBER Returns a random NUMBER.
DBMS_CRYPTO functions and procedures support the following error messages:
ORA-28239 - DBMS_CRYPTO.KeyNull
ORA-28829 - DBMS_CRYPTO.CipherSuiteNull
ORA-28827 - DBMS_CRYPTO.CipherSuiteInvalid
Unlike Oracle, Advanced Server will not return error ORA-28233 if you re-encrypt
previously encrypted information.
Please note that RAW and BLOB are synonyms for the PostgreSQL BYTEA data type, and
CLOB is a synonym for TEXT.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 62
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.4.1 DECRYPT
The DECRYPT function or procedure decrypts data using a user-specified cipher
algorithm, key and optional initialization vector. The signature of the DECRYPT function
is:
DECRYPT
(src IN RAW, typ IN INTEGER, key IN RAW, iv IN RAW
DEFAULT NULL) RETURN RAW
The signature of the DECRYPT procedure is:
DECRYPT
(dst INOUT BLOB, src IN BLOB, typ IN INTEGER, key IN RAW,
iv IN RAW DEFAULT NULL)
or
DECRYPT
(dst INOUT CLOB, src IN CLOB, typ IN INTEGER, key IN RAW,
iv IN RAW DEFAULT NULL)
When invoked as a procedure, DECRYPT returns BLOB or CLOB data to a user-specified
BLOB.
Parameters
dst
dst specifies the name of a BLOB to which the output of the DECRYPT procedure
will be written. The DECRYPT procedure will overwrite any existing data
currently in dst.
src
src specifies the source data that will be decrypted. If you are invoking
DECRYPT as a function, specify RAW data; if invoking DECRYPT as a procedure,
specify BLOB or CLOB data.
typ
typ specifies the block cipher type and any modifiers. This should match the
type specified when the src was encrypted. Advanced Server supports the
following block cipher algorithms, modifiers and cipher suites:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 63
Database Compatibility for Oracle® Developers
Built-in Package Guide
Block Cipher Algorithms
ENCRYPT_DES CONSTANT INTEGER := 1;
ENCRYPT_3DES CONSTANT INTEGER := 3;
ENCRYPT_AES CONSTANT INTEGER := 4;
ENCRYPT_AES128 CONSTANT INTEGER := 6;
Block Cipher Modifiers
CHAIN_CBC CONSTANT INTEGER := 256;
CHAIN_ECB CONSTANT INTEGER := 768;
Block Cipher Padding Modifiers
PAD_PKCS5 CONSTANT INTEGER := 4096;
PAD_NONE CONSTANT INTEGER := 8192;
Block Cipher Suites
DES_CBC_PKCS5 CONSTANT INTEGER := ENCRYPT_DES + CHAIN_CBC +
PAD_PKCS5;
DES3_CBC_PKCS5 CONSTANT INTEGER := ENCRYPT_3DES + CHAIN_CBC
+ PAD_PKCS5;
AES_CBC_PKCS5 CONSTANT INTEGER := ENCRYPT_AES + CHAIN_CBC +
PAD_PKCS5;
key
key specifies the user-defined decryption key. This should match the key
specified when the src was encrypted.
iv
iv (optional) specifies an initialization vector. If an initialization vector was
specified when the src was encrypted, you must specify an initialization vector
when decrypting the src. The default is NULL.
Examples
The following example uses the DBMS_CRYPTO.DECRYPT function to decrypt an
encrypted password retrieved from the passwords table:
CREATE TABLE passwords
(
principal VARCHAR2(90) PRIMARY KEY, -- username
ciphertext RAW(9) -- encrypted password
);
CREATE FUNCTION get_password(username VARCHAR2) RETURN RAW AS
typ INTEGER := DBMS_CRYPTO.DES_CBC_PKCS5;
key RAW(128) := 'my secret key';
iv RAW(100) := 'my initialization vector';
password RAW(2048);
BEGIN
SELECT ciphertext INTO password FROM passwords WHERE principal = username;
RETURN dbms_crypto.decrypt(password, typ, key, iv);
END;
Note that when calling DECRYPT, you must pass the same cipher type, key value and
initialization vector that was used when ENCRYPTING the target.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 64
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.4.2 ENCRYPT
The ENCRYPT function or procedure uses a user-specified algorithm, key, and optional
initialization vector to encrypt RAW, BLOB or CLOB data. The signature of the ENCRYPT
function is:
ENCRYPT
(src IN RAW, typ IN INTEGER, key IN RAW,
iv IN RAW DEFAULT NULL) RETURN RAW
The signature of the ENCRYPT procedure is:
ENCRYPT
(dst INOUT BLOB, src IN BLOB, typ IN INTEGER, key IN RAW,
iv IN RAW DEFAULT NULL)
or
ENCRYPT
(dst INOUT BLOB, src IN CLOB, typ IN INTEGER, key IN RAW,
iv IN RAW DEFAULT NULL)
When invoked as a procedure, ENCRYPT returns BLOB or CLOB data to a user-specified
BLOB.
Parameters
dst
dst specifies the name of a BLOB to which the output of the ENCRYPT procedure
will be written. The ENCRYPT procedure will overwrite any existing data
currently in dst.
src
src specifies the source data that will be encrypted. If you are invoking
ENCRYPT as a function, specify RAW data; if invoking ENCRYPT as a procedure,
specify BLOB or CLOB data.
typ
typ specifies the block cipher type that will be used by ENCRYPT, and any
modifiers. Advanced Server supports the block cipher algorithms, modifiers and
cipher suites listed below:
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 65
Database Compatibility for Oracle® Developers
Built-in Package Guide
Block Cipher Algorithms
ENCRYPT_DES CONSTANT INTEGER := 1;
ENCRYPT_3DES CONSTANT INTEGER := 3;
ENCRYPT_AES CONSTANT INTEGER := 4;
ENCRYPT_AES128 CONSTANT INTEGER := 6;
Block Cipher Modifiers
CHAIN_CBC CONSTANT INTEGER := 256;
CHAIN_ECB CONSTANT INTEGER := 768;
Block Cipher Padding Modifiers
PAD_PKCS5 CONSTANT INTEGER := 4096;
PAD_NONE CONSTANT INTEGER := 8192;
Block Cipher Suites
DES_CBC_PKCS5 CONSTANT INTEGER := ENCRYPT_DES + CHAIN_CBC +
PAD_PKCS5;
DES3_CBC_PKCS5 CONSTANT INTEGER := ENCRYPT_3DES + CHAIN_CBC
+ PAD_PKCS5;
AES_CBC_PKCS5 CONSTANT INTEGER := ENCRYPT_AES + CHAIN_CBC +
PAD_PKCS5;
key
key specifies the encryption key.
iv
iv (optional) specifies an initialization vector. By default, iv is NULL.
Examples
The following example uses the DBMS_CRYPTO.DES_CBC_PKCS5 Block Cipher Suite (a
pre-defined set of algorithms and modifiers) to encrypt a value retrieved from the
passwords table:
CREATE TABLE passwords
(
principal VARCHAR2(90) PRIMARY KEY, -- username
ciphertext RAW(9) -- encrypted password
);
CREATE PROCEDURE set_password(username VARCHAR2, cleartext RAW) AS
typ INTEGER := DBMS_CRYPTO.DES_CBC_PKCS5;
key RAW(128) := 'my secret key';
iv RAW(100) := 'my initialization vector';
encrypted RAW(2048);
BEGIN
encrypted := dbms_crypto.encrypt(cleartext, typ, key, iv);
UPDATE passwords SET ciphertext = encrypted WHERE principal = username;
END;
ENCRYPT uses a key value of my secret key and an initialization vector of my
initialization vector when encrypting the password; specify the same key and
initialization vector when decrypting the password.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 66
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.4.3 HASH
The HASH function uses a user-specified algorithm to return the hash value of a RAW or
CLOB value. The HASH function is available in three forms:
HASH
(src IN RAW, typ IN INTEGER) RETURN RAW
HASH
(src IN CLOB, typ IN INTEGER) RETURN RAW
Parameters
src