C#代码。
3.2 类和结构
类和结构实际上都是创建对象的模板，每个对象都包含数据，并提供了处理和访问数
据的方法。类定义了类的每个对象（称为实例）可以包含什么数据和功能。例如，如果一
个类表示一个顾客，就可以定义字段CustomerID、FirstName、LastName和Address，以包
含该顾客的信息。还可以定义处理在这些字段中存储的数据的功能。接着，就可以实例化
类的一个对象，来表示某个顾客，为这个实例设置相关字段的值，并使用其功能。
    class PhoneCustomer
    {
      public const string DayOfSendingBill = "Monday";
      public int CustomerID;
      public string FirstName;
      public string LastName;
    }
结构不同于类，因为它们不需要在堆上分配空间（类是引用类型，总是存储在堆
（heap）上），而结构是值类型，通常存储在栈（stack）上，另外，结构不支持继承。
较小的数据类型使用结构可提高性能。但在语法上，结构与类非常相似，主要的区别
是使用关键字struct代替class来声明结构。例如，如果希望所有的PhoneCustomer实例都分
布在栈上，而不是分布在托管堆上，就可以编写下面的语句：
    struct PhoneCustomerStruct
    {
      public const string DayOfSendingBill = "Monday";
      public int CustomerID;
      public string FirstName;
      public string LastName;
    }
对于类和结构，都使用关键字new来声明实例：这个关键字创建对象并对其进行初始
化。在下面的例子中，类和结构的字段值都默认为0：
    var myCustomer = new PhoneCustomer();      // works for a class
    var myCustomer2 = new PhoneCustomerStruct(); // works for a struct
在大多数情况下，类要比结构常用得多。因此，我们先讨论类，然后指出类和结构的
区别，以及选择使用结构而不使用类的特殊原因。但除非特别说明，否则就可以假定用于
类的代码也适用于结构。
  注意： 类和结构的一个重要区别是，类类型的对象通过引用传递，结构类型
的对象按值传递。
3.3 类
类包含成员，成员可以是静态或实例成员。静态成员属于类；实例成员属于对象。静
态字段的值对每个对象都是相同的。而每个对象的实例字段都可以有不同的值。静态成员
关联了static修饰符。成员的种类见表3-1。
表3-1
成员
说明
字段
字段是类的数据成员，它是类型的一个变量，该类型是类的一个成
员
常量
常量与类相关（尽管它们没有static修饰符）。编译器使用真实值代
替常量
方法
方法是与特定类相关联的函数
属性
属性是可以从客户端访问的函数组，其访问方式与访问类的公共字
段类似。C#为读写类中的属性提供了专用语法，所以不必使用那些
名称中嵌有Get或Set的方法。因为属性的这种语法不同于一般函数的
语法，所有在客户端代码中，虚拟的对象被当作实际的东西
构造函数
构造函数是在实例化对象时自动调用的特殊函数。它们必须与所属
的类同名，且不能有返回类型。构造函数用于初始化字段的值
索引器
索引器允许对象用访问数组的方式访问。索引器参见第8章
运算符
运算符执行的最简单的操作就是加法和减法。在两个整数相加时，
严格地说，就是对整数使用“+”运算符。C#还允许指定把已有的运算
符应用于自己的类（运算符重载）。第8章将详细论述运算符
事件
事件是类的成员，在发生某些行为（如修改类的字段或属性，或者
进行了某种形式的用户交互操作）时，它可以让对象通知调用方。
客户可以包含所谓“事件处理程序”的代码来响应该事件。第9章将详
细介绍事件
析构函数
析构函数或终结器的语法类似于构造函数的语法，但是在CLR检测
到不再需要某个对象时调用它。它们的名称与类相同，但前面有一
个“～”符号。不可能预测什么时候调用终结器。终结器详见第5章
类型
类可以包含内部类。如果内部类型只和外部类型结合使用，就很有
趣
下面详细介绍类成员。
3.3.1 字段
字段是与类相关的变量。前面的例子已经使用了PhoneCustomer类中的字段。
一旦实例化PhoneCustomer对象，就可以使用语法Object.FieldName来访问这些字段，
如下例所示：
    var customer1 = new PhoneCustomer();
    customer1.FirstName = "Simon";
常量与类的关联方式和变量与类的关联方式相同。使用const关键字来声明常量。如
果把它声明为public，就可以在类的外部访问它。
    class PhoneCustomer
    {
      public const string DayOfSendingBill = "Monday";
      public int CustomerID;
      public string FirstName;
      public string LastName;
    }
最好不把字段声明为public。如果修改类的公共成员，使用这个公共成员的每个调用
程序也需要更改。例如，如果希望在下一个版本中检查最大的字符串长度，公共字段就需
要更改为一个属性。使用公共字段的现有代码，必须重新编译，才能使用这个属性（尽管
在调用程序看来，语法与属性相同）。如果只在现有的属性中改变检查，那么调用程序不
需要重新编译就能使用新版本。
最好把字段声明为private，使用属性来访问字段，如下一节所述。
3.3.2 属性
属性（property）的概念是：它是一个方法或一对方法，在客户端代码看来，它
（们）是一个字段。
下面把前面示例中变量名为_firstName的名字字段改为私有。FirstName属性包含get和
set访问器，来检索和设置支持字段的值：
    class PhoneCustomer
    {
      private string _firstName;
      public string FirstName
      {
        get { return _firstName; }
        set { firstName = value; }
      }
      // etc.
    }
get访问器不带任何参数，且必须返回属性声明的类型。也不应为set访问器指定任何
显式参数，但编译器假定它带一个参数，其类型也与属性相同，并表示为value。
下面的示例使用另一个命名约定。下面的代码包含一个属性Age，它设置了一个字段
age。在这个例子中，age表示属性Age的后备变量。
    private int age;
    public int Age
    {
      get { return age; }
      set { age = value; }
    }
注意这里所用的命名约定。我们采用C#的区分大小写模式，使用相同的名称，但公
有属性采用Pascal大小写形式命名，如果存在一个等价的私有字段，则它采用camel大小写
形式命名。在早期.NET版本中，此命名约定由微软的C#团队优先使用。最近他们使用的
命名约定是给字段名加上下划线作为前缀。这会为识别字段而不是局部变量提供极大的便
利。
  注意： 微软团队使用一种或另一种命名约定。使用类型的私有成员时，.NET
没有严格的命名约定。然而，在团队里应该使用相同的约定。.NET Core 团队转向使用
下划线作为字段的前缀，这是本书大多数地方使用的约定（参见
https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-
style.md）。
1．自动实现的属性
如果属性的set和get访问器中没有任何逻辑，就可以使用自动实现的属性。这种属性
会自动实现后备成员变量。前面Age示例的代码如下：
    public int Age { get; set; }
不需要声明私有字段。编译器会自动创建它。使用自动实现的属性，就不能直接访问
字段，因为不知道编译器生成的名称。
使用自动实现的属性，就不能在属性设置中验证属性的有效性。所以在上面的例子
中，不能检查是否设置了无效的年龄。
自动实现的属性可以使用属性初始化器来初始化：
    public int Age { get; set; } = 42;
2．属性的访问修饰符
C#允许给属性的get和set访问器设置不同的访问修饰符，所以属性可以有公有的get访
问器和私有或受保护的set访问器。这有助于控制属性的设置方式或时间。在下面的代码
示例中，注意set访问器有一个私有访问修饰符，而get访问器没有任何访问修饰符。这表
示get访问器具有属性的访问级别。在get和set访问器中，必须有一个具备属性的访问级
别。如果get访问器的访问级别是protected，就会产生一个编译错误，因为这会使两个访问
器的访问级别都不是属性。
    public string Name
    {
      get
      {
        return _name;
      }
      private set
      {
        _name = value;
      }
    }
通过自动实现的属性，也可以设置不同的访问级别：
    public int Age { get; private set; }
  注意： 也可以定义只有get或set访问器的属性。在创建只有set访问器的属性
之前，最好创建一个方法来代替。可以将只有get访问器的属性用于只读访问。自动实
现的、只有get访问器的属性是C# 6新增的，参见“只读成员”一节。
  注意： 一些开发人员可能会担心，前面我们列举了许多情况，其中标准C#编
码方式导致了大材小用，例如，通过属性访问字段，而不是直接访问字段。这些额外
的函数调用是否会增加系统开销，导致性能下降？其实，不需要担心这种编程方式会
在C#中带来性能损失。C#代码会编译为IL，然后在运行时JIT编译为本地可执行代码。
JIT编译器可生成高度优化的代码，并在适当的时候随意地内联代码（即，用内联代码
来替代函数调用）。如果实现某个方法或属性仅是调用另一个方法，或返回一个字
段，则该方法或属性肯定是内联的。
通常不需要改变内联的行为，但在通知编译器有关内联的情况时有一些控制。使
用属性MethodImpl可以定义不应用内联的方法（MethodImplOptions.NoInlining），或内
联应该由编译器主动完成（MethodImplOptions.AggressiveInlining）。对于属性，需要
直接将这个属性应用于get和set访问器。
3.3.3 方法
注意，正式的C#术语区分函数和方法。在C#术语中，“函数成员”不仅包含方法，也
包含类或结构的一些非数据成员，如索引器、运算符、构造函数和析构函数等，甚至还有
属性。这些都不是数据成员，字段、常量和事件才是数据成员。
1．方法的声明
在C#中，方法的定义包括任意方法修饰符（如方法的可访问性）、返回值的类型，
然后依次是方法名、输入参数的列表（用圆括号括起来）和方法体（用花括号括起来）。
    [modifiers] return_type MethodName([parameters])
    {
      // Method body
    }
每个参数都包括参数的类型名和在方法体中的引用名称。但如果方法有返回值，则
return语句就必须与返回值一起使用，以指定出口点，例如：
    public bool IsSquare(Rectangle rect)
    {
      return (rect.Height == rect.Width);
    }
如果方法没有返回值，就把返回类型指定为void，因为不能省略返回类型。如果方法
不带参数，仍需要在方法名的后面包含一对空的圆括号（）。此时return语句就是可选的
——当到达右花括号时，方法会自动返回。
2．表达式体方法
如果方法的实现只有一个语句，C# 6为方法定义提供了一个简化的语法：表达式体方
法。使用新的语法，不需要编写花括号和return关键字，而使用运算符= 
>（lambda操作
符）区分操作符左边的声明和操作符右边的实现代码。
下面的例子与前面的方法IsSquare相同，但使用表达式体方法语法实现。lambda操作
符的右侧定义了方法的实现代码。不需要花括号和返回语句。返回的是语句的结果，该结
果的类型必须与左边方法声明的类型相同，在下面的代码片段中，该类型是bool：
    public bool IsSquare(Rectangle rect) => rect.Height == rect.Width;
3．调用方法
在下面的例子中，说明了类的定义和实例化、方法的定义和调用的语法。类Math定
义了静态成员和实例成员（代码文件MathSample/Math.cs）：
    public class Math
    {
      public int Value { get; set; }
      public int GetSquare() => Value ＊ Value;
      public static int GetSquareOf(int x) => x ＊ x;
      public static double GetPi() => 3.14159;
    }
Program类利用Math类，调用静态方法，实例化一个对象，来调用实例成员（代码文
件MathSample/ Program.cs）：
    using static System.Console;
    namespace MathSample
    {
      class Program
      {
        static void Main()
        {
        // Try calling some static functions.
        WriteLine($"Pi is {Math.GetPi()}");
        int x = Math.GetSquareOf(5);
        WriteLine($"Square of 5 is {x}");
        // Instantiate a Math object
        var math = new Math();  // instantiate a reference type
        // Call instance members
        math.Value = 30;
        WriteLine($"Value field of math variable contains {math.Value}");
        WriteLine($"Square of 30 is {math.GetSquare()}");
        }
      }
运行MathSample示例，会得到如下结果：
    Pi is 3.14159
    Square of 5 is 25
    Value field of math variable contains 30
    Square of 30 is 900
从代码中可以看出，Math类包含一个属性和一个方法，该属性包含一个数字，该方
法计算该数字的平方。这个类还包含两个静态方法，一个返回pi的值，另一个计算作为参
数传入的数字的平方。
这个类有一些功能并不是设计C#程序的好例子。例如，GetPi（）通常作为const字段
来执行，而好的设计应使用目前还没有介绍的概念。
4．方法的重载
C#支持方法的重载——方法的几个版本有不同的签名（即，方法名相同，但参数的
个数和/或数据类型不同）。为了重载方法，只需要声明同名但参数个数或类型不同的方
法即可：
    class ResultDisplayer
    {
      public void DisplayResult(string result)
      {
        // implementation
      }
      public void DisplayResult(int result)
      {
      // implementation
      }
    }
不仅参数类型可以不同，参数的数量也可以不同，如下一个示例所示。一个重载的方
法可以调用另一个重载的方法：
    class MyClass
    {
      public int DoSomething(int x)
      {
        return DoSomething(x, 10); // invoke DoSomething with two parameters
      }
      public int DoSomething(int x, int y)
      {
        // implementation
      }
    }
  注意： 对于方法重载，仅通过返回类型不足以区分重载的版本。仅通过参数
名称也不足以区分它们。需要区分参数的数量和/或类型。
5．命名的参数
调用方法时，变量名不需要添加到调用中。然而，如果有如下的方法签名，用于移动
矩形：
    public void MoveAndResize(int x, int y, int width, int height)
用下面的代码片段调用它，就不能从调用中看出使用了什么数字，这些数字用于哪
里：
    r.MoveAndResize(30, 40, 20, 40);
可以改变调用，明确数字的含义：
    r.MoveAndResize(x:
 30, y: