S∈C2
S(s1 · s2) = S(e1 · e2) = S(ebad).
23
Again, since ebad is a sub-element of e, using Claim 13, there exists a collection C such that
S(ebad) and C form a cover for S(e). This implies that there is an exact cover of U using both
k(cid:48),1 for some k, k(cid:48) ∈ ind(j), j ∈ [(cid:96)]. This is a contradiction to Claim 4 for straddling
Sj
k,0 and Sj
set system Sj for Uj.
Finally, we prove the main claim of this section that D runs in polynomial time. First observe
that only multiplication can create new input proﬁles. We show that if e is an element of the
form e1 · e2 and D(e) contains a new input-proﬁle then e must itself be a single-input element
(that is, D(e) will be the singleton set {e}). This means that the number of elements in the
decomposition of e is bounded by the number of sub-elements of e, and therefore is polynomial.
To prove the above we ﬁrst observe that if D(e) is not a singleton, then either D(e1) or D(e2)
are also not singletons. Then we show that if D(e1) contains more than one input-proﬁle then
all input-proﬁles in D(e1) must be complete. Here again we use the structure of the straddling
set system and therefore the multiplication e1 · e2 cannot contain any new proﬁles.
Claim 8. D(e) runs in polynomial time, i.e. number of elements in D(e) is polynomial.
Proof. Observe that the running time of D on e is polynomial in the number of the single-input
elements in D(e). Hence, to show that D runs in polynomial time, we will show that the size of
the set D(e) is bounded by the number of sub-elements of e. More precisely, for each s ∈ D(e),
we show a single-input sub-element e(cid:48) of e such that Prof(e(cid:48)) = Prof(s). Since D(e) has single
input elements with distinct proﬁles, we get that |D(e)| is polynomial since e has a polynomial
number of sub-elements.
For each s ∈ D(e), let e(cid:48) be the ﬁrst sub-element of e such that D(e(cid:48)) contains a single
input element with input-proﬁle Prof(s) and decomposition of no sub-element of e(cid:48) contains a
single-input element with input-proﬁle Prof(s). Then we claim that e(cid:48) is a single input element,
i.e. D(e(cid:48)) = {e(cid:48)}. We have the following cases.
e(cid:48) is a basic sub-element of e, then by deﬁnition, D(e(cid:48)) = {e(cid:48)}. Next, if e(cid:48) = e1 + e2, then
all the input-proﬁles in D(e(cid:48)) are either in e1 or e2. That is, e(cid:48) cannot be the ﬁrst sub-element
of e which contains the input proﬁle Prof(s). Finally, let e(cid:48) = e1 · e2. We need to show that
D(e(cid:48)) = {e(cid:48)}. Suppose not, that is |D(e(cid:48))| > 1. In this case, we will show that D(e(cid:48)) cannot
contain any new input proﬁles. Let s(cid:48) ∈ D(e(cid:48)) such that Prof(s) = Prof(s(cid:48)).
By the deﬁnition of D, either |D(e1)| > 1 or D(e2) > 1. Wlog, let us assume that D(e1) > 1,
that is there exists s11, s12 ∈ D(e1) and s2 ∈ D(e2) such that s(cid:48) = s11 · s2. By the deﬁnition
of D, it holds that S(s11) = S(s12) and since the all the input-proﬁles in the decompisition
are distinct Prof(s11) (cid:54)= Prof(s12). Wlog, there exists a j ∈ [(cid:96)] such that Prof(s11)j = 0 and
Prof(s12)j ∈ {1,∗}.
First, we claim that if S(s11) = S(s12) and Prof(s11)j = 0 then Prof(s12)j (cid:54)= ∗. By the
deﬁnition of input-proﬁles, S(x) ∩ Uj = ∅ if and only if Prof(x)j = ∗. Hence, if Prof(s11)j = 0
and Prof(s12)j = ∗ then S(s11) ∩ Uj (cid:54)= ∅ and S(s12) ∩ Uj = ∅. Then, S(s11) (cid:54)= S(s12), which is
a contradiction.
11) ∩ Uj = Sj
11 of s11 such that S(s(cid:48)
The remaining case is Prof(s11)j = 0 and Prof(s12)j = 1. We claim that there is no basic
If this not true, then Prof(s11) = ⊥.
sub-element s(cid:48)
Similarly, for s12, there is no basic sub-element s(cid:48)
k,0. This means
that s11 and s12 have consistently used xj = 0 and xj = 1 in their evaluation. Now, by Claim 5,
for S(s11) = S(s12) it has to be the case that Uj ⊆ S(s11) = S(s12). By Claim 16, Prof(s11) is
complete. But, multiplying an element with complete proﬁle to another element cannot lead to
any new valid proﬁle. Hence, we get a contradiction to the assumption on e(cid:48).
Claim 9. If s is a single-input element such that Uj ⊆ S(s) for some j ∈ [(cid:96)], then Prof(s) is
complete.
k,1.
12 such that S(s(cid:48)
12) ∩ Uj = Sj
24
Proof. Since s is a single input element, Prof(s)j (cid:54)= ⊥. Also, Prof(s)j (cid:54)= ∗ because S(s)∩Uj (cid:54)= ∅.
Let Prof(s) = b for some b ∈ {0, 1}. Also, since Uj ⊆ S(s), for every i ∈ ind(j) there exists a
basic sub-element si of s such that S(si) ∩ Uj = Sj
i,b. Moreover, S(si) = S(i, b1, b2) such that
Prof(s)inp1(i) = b1 and Prof(s)inp2(i) = b2.
We will show that for any k ∈ [(cid:96)], Prof(s)k (cid:54)= ∗. By the property of dual input relaxed
matrix branching program, there exists i∗ ∈ [n] such that wlog, (inp1(i∗), inp2(i∗)) = (j, k).
Since Uj ⊆ S(s), there exists a basic sub-element si∗ of s such that S(si∗ ) = S(i∗, b1, b2). Since
inp2(i) = k, Prof(s)k (cid:54)= ∗.
7.1 Simulation of Zero-testing
We ﬁrst describe the simulation of the zero-testing at a high level and then will formally describe
the simulation. The simulator uses the decomposition algorithm deﬁned in the previous section
to decompose the element e, that is to be zero tested, into single-input elements. Zero-testing of
e essentially involves zero-testing every element in its decomposition. Then we establish that if
e corresponds to a zero polynomial then indeed every element in the decomposition of e should
correspond to a zero polynomial. The intuition is that every element in its decomposition has
product of α’s which is diﬀerent for every in its decomposition. And hence, with negligible
probability it happens that the α’s cancel out and yield a zero-polynomial. The only part left is
to show that indeed we can perform zero-testing on every element in decomposition individually.
To perform this we use the simulation algorithm deﬁned in Section 4. We evaluate the polyno-
mial corresponding to the single-input element on the output of the simulation algorithm. We
then argue that the probability that if the single-input element was indeed a non-zero polyno-
mial then with negligible probability the polynomial evaluates to 0. This establishes that if the
polynomial is a non-zero polynomial then we can indeed detect some single-input element in its
decomposition to be non-zero with overwhelming probability.
We now describe zero testing performed by the simulator Sim. Denote the element to be zero
tested to be e and denote the polynomial computed by the circuit α(e) by pe.
1. Sim ﬁrst executes the decomposition algorithm D described before on e. Denote the set of
resulting single-input elements by D(e). The output of Sim is either “Zero” or “Non-zero”
depending on whether the element is zero or not.
2. For every s ∈ D(e) execute the following steps:
(a) Find the input x that corresponds to the element s. More formally, denote x by
(b) Execute SimBP on input (1s, F(x)), where s is the size of the formula F to obtain the
Prof(s). It then queries the F oracle on x to obtain F(x).
following distribution represented by the random variable V Sim
.
s
(cid:111)
(cid:110)
˜s, ˜Bi,bi
1,bi
2
, ˜t : i ∈ [n], bi
1 = xinp1(i), bi
2 = xinp2(i)
(c) We evaluate the polynomial ps, which is the polynomial computed by the circuit α(s),
. If the evaluation yields a non-zero result then Sim outputs “Non-zero”.
on V Sim
s
3. For all s ∈ D(e), if ps(V Sim
s
) = 0 then Sim outputs “Zero”.
This completes the description of the zero-testing as performed by the simulator. We now argue
that the simulator runs in polynomial time.
Running time. From Claim 15 it follows that the ﬁrst step, which is the execution of the decom-
position algorithm, takes polynomial time. We now analyse the running time of the steps (a), (b)
25
and (c). Step (a) takes linear time. The running time of Step (b) is essentially the running time
of SimBP which is again polynomial. Finally, Step (c) is executed in time which is proportional
to the number of queries made by the adversary to the oracle O(M) which are simulated by the
simulator. Since the number of queries is polynomial, even Step (c) is executed in polynomial
time. Finally we argue that the Steps (a), (b) and (c) are executed polynomially many times.
This follows from Claim 15 which shows that the number of elements in the decomposition is
polynomial and hence the number of iterations is polynomial. Hence, our simulator runs in
polynomial time.
We prove the following two claims about the structure of the polynomial representing the element
to be zero tested that establishes the correctness of simulation. This will be useful when we will
show later that element is zero iﬀ all the elements obtained by its decomposition are zero.
Claim 10. Consider an element e such that U ⊆ S(e). The polynomial computed by the circuit
α(e), denoted by pe, can be written as follows.
(cid:88)
(cid:88)
pe =
ps =
s∈D(e)
s∈D(e)
qProf(s) · ˜αProf(s)
where for every s ∈ D(e) the following holds.
1. The value ˜αProf(s) denotes the product (cid:81)
αi,bi
1,bi
2
where (bi
1, bi
2) = (Prof(s)inp1(i), Prof(s)inp2(i)).
i∈[n]
2. qProf(s) is a polynomial in ˜s, ˜t and in the entries of ˜Bi,bi
1,bi
2
variable in qProf(s) is 1.
. Further the degree of every
Proof. Consider an element s ∈ D(e). As before denote the circuit representing s by α(s).
Alternately, we view α(s) as a polynomial with the kth monomial being represented by sk.
Moreover, the value sk satisﬁes the following three properties.
• For every sk we have that S(sk) = S(s) and therefore Uj ⊆ S(sk) for every j ∈ [l].
• The circuit α(sk) contains only multiplication gates.
• The basic sub-elements of each sk are a subset of the basic sub-elements of some s
From the ﬁrst property and Claim 16, we have that Prof(sk) is complete. Since every basic sub-
element of sk is a also a sub-element of s and also because s is a sinlge-input element we have
that Prof(sk) = Prof(s). Further for every i ∈ [l], there exists a basic sub-element e(cid:48) of sk such
that S(e(cid:48)) = S(i, bi
2 = Prof(sk)inp2(i). There can be many such
basic sub-elements but the second property ensures that there is a unique such element. The
only basic elements given to the adversary as part of the obfuscation with index set S(i, bi
1, bi
2)
are the elements αi,bi
. From this it follows that we can write the polynomial ps as
qProf(s) · ˜αProf(s) where qProf(s) and ˜αProf(s) are described in the claim statement.
1 = Prof(sk)inp1(i) and bi
· ˜Bi,bi
1, bi
2) for bi
1,bi
2
1,bi
2
Before we describe the next claim we will introduce some notation. Consider a random variable
X. Let g be a polynomial. We say that g(X) ≡ 0 if g is 0 on all the support of X. We deﬁne
V real
C to be the distribution of the assignment of the values to pe.
Claim 11. Consider an element e. Let pe be a polynomial of degree poly(n) represented by
α(C). If pe (cid:54)≡ 0 then the following holds.
[pe(V real
C ) = 0] = negl(n)
PrV real
C
corresponding to the random variable V real
Proof. The claim would directly follow from Schwartz-Zippel lemma if the distribution
C is a uniform distribution or even if the distribution
26
could be computed by a low degree polynomial over values uniformly distributed over Zp. But
this is not true since the entries in R−1 cannot be expressed as a polynomial in the entries of
R. To this end, we do the following. We transform pe into another polynomial p(cid:48)
e and further
transform V real
[pe(V real
C into another distribution ˜V real
C ) = 0] = Pr
˜V real
C such that the following holds:
e( ˜V real
[p(cid:48)
C ) = 0]
C
- PrV real
- The degree of p(cid:48)
- The distribution corresponding to V real
e = poly(n).
C
are uniform over Zp.
C can be computed by a polynomial over values that
In order to obtain p(cid:48)
e from pe we essentially replace the matrices R−1
det(Rj) where adj(Ri) = R−1
i
· det(Ri). In a similar way we obtain ˜V real
in pe with adjugate matrices
C by
C from V real
i
replacing all the assignment values corresponding to R−1
by assignment values corresponding
i
adj(Ri)(cid:81)
to adj(Ri)(cid:81)
j(cid:54)=i
det(Rj).
We now argue p(cid:48)
j(cid:54)=i
e satisﬁes all the three properties stated above. The following shows that