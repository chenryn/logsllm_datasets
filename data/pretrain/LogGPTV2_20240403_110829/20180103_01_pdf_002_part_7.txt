String lineGeom = null;
String polyGeom = null;
try {
spatialQuery = connection.prepareStatement(Queries.GET_IDS);
int srid = dbSrs.getSrid();
lineGeom = "SRID=" + srid + ";LINESTRING(" +
tile.getLowerLeftCorner().getX() + " " +
tile.getUpperRightCorner().getY() + "," +
tile.getLowerLeftCorner().getX() + " " +
tile.getLowerLeftCorner().getY() + "," +
tile.getUpperRightCorner().getX() + " " +
tile.getLowerLeftCorner().getY() + ")";
polyGeom = "SRID=" + srid + ";POLYGON((" +
tile.getLowerLeftCorner().getX() + " " +
tile.getLowerLeftCorner().getY() + "," +
tile.getLowerLeftCorner().getX() + " " +
tile.getUpperRightCorner().getY() + "," +
tile.getUpperRightCorner().getX() + " " +
tile.getUpperRightCorner().getY() + "," +
tile.getUpperRightCorner().getX() + " " +
tile.getLowerLeftCorner().getY() + "," +
tile.getLowerLeftCorner().getX() + " " +
tile.getLowerLeftCorner().getY() + "))";
spatialQuery.setString(1, lineGeom);
spatialQuery.setString(2, polyGeom);
rs = spatialQuery.executeQuery();
50
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
The BallonTemplateHandlerImpl class builds up a queries for the KML balloon content.
Most of them are aggregated queries. If multiple rows are fetched by the ResultSet and no
aggregation was used one row has to be picked. Therefore the window function
ROW_NUMBER() was used. As PostgreSQL does not allow the usage of window function inside
of a WHERE clause the queries have to be re-written in a more nested way (except for the first
example, that did not need a range condition for rnum like in Oracle).
de.tub.citydb.modules.kml.database.BalloonTemplateHandlerImpl
1477 // if (rownum > 0) {
// sqlStatement = "SELECT * FROM (SELECT a.*, ROWNUM rnum FROM (" +
// sqlStatement + " ORDER by " + tableShortId + "." +
// columns.get(0) + " ASC) a WHERE ROWNUM = " + rownum;
// }
// else if (FIRST.equalsIgnoreCase(aggregateFunction)) {
// sqlStatement = "SELECT * FROM (" + sqlStatement + " ORDER by " +
// tableShortId + "." + columns.get(0) + "
// ASC) WHERE ROWNUM = 1";
// }
// else if (LAST.equalsIgnoreCase(aggregateFunction)) {
// sqlStatement = "SELECT * FROM (" + sqlStatement + " ORDER by " +
// tableShortId + "." + columns.get(0) +
// " DESC) WHERE ROWNUM = 1";
// }
if (rownum > 0) {
sqlStatement = "SELECT * FROM " +
"(SELECT sqlstat.*, ROW_NUMBER() OVER(
ORDER BY sqlstat.* ASC) AS rnum FROM " +
"(" + sqlStatement + " ORDER BY " + tableShortId +"."+
columns.get(0) + " ASC) sqlstat) AS subq" +
" WHERE rnum = " + rownum;
}
else if (FIRST.equalsIgnoreCase(aggregateFunction)) {
sqlStatement = "SELECT * FROM " +
"(SELECT sqlstat.*, ROW_NUMBER() OVER(
ORDER BY sqlstat.* ASC) AS rnum FROM " +
"(" + sqlStatement + " ORDER BY " + tableShortId +"."+
columns.get(0) + " ASC) sqlstat) AS subq" +
" WHERE rnum = 1";
}
else if (LAST.equalsIgnoreCase(aggregateFunction)) {
sqlStatement = "SELECT * FROM " +
"(SELECT sqlstat.*, ROW_NUMBER() OVER(
ORDER BY sqlstat.* ASC) AS rnum FROM " +
"(" + sqlStatement + " ORDER BY " + tableShortId +"."+
columns.get(0) + " DESC) sqlstat) AS subq" +
" WHERE rnum = 1";
}
51
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
9.2 Geometries for KML placemarks
Most of the changes were similar to examples in chapter 5 and more or less self-explaining.
The JGeometry.getOrdinatesArray() method is substituted with a simple iteration to fill
the array. Some extra variables and PostGIS JDBC classes (and their methods) are used to
port Oracle's ELEM_INFO_ARRAY methods properly. KMLGenericObject.java is the super
class to the export classes covering the thematic modules of CityGML.
de.tub.citydb.modules.kml.database.KmlGenericObject
1469 // PolygonType polygon = null;
rep+ // while (rs.next()) {
// STRUCT buildingGeometryObj = (STRUCT)rs.getObject(1);
// if (!rs.wasNull() && buildingGeometryObj != null) {
// eventDispatcher.triggerEvent(new GeometryCounterEvent(null, this));
//
// polygon = kmlFactory.createPolygonType();
// polygon.setTessellate(true);
// polygon.setExtrude(false);
// polygon.setAltitudeModeGroup(
// kmlFactory.createAltitudeMode(
// AltitudeModeEnumType.CLAMP_TO_GROUND));
//
// JGeometry groundSurface = convertToWGS84(JGeometry.load
// (buildingGeometryObj));
// int dim = groundSurface.getDimensions();
// for (int i = 0; i = 0;
j--, k+=2){
ordinatesArray[k] = polyGeom.getRing(ring).getPoint(j).x;
ordinatesArray[k+1] = polyGeom.getRing(ring).getPoint(j).y;
}
...
case Geometry.MULTIPOLYGON:
MultiPolygon multiPolyGeom = (MultiPolygon) groundSurface;
multiPolygon = new PolygonType[multiPolyGeom.numPolygons()];
for (int p = 0; p = 0;
j--, k+=2){
ordinatesArray[k] = subPolyGeom.getRing(ring).getPoint(j).x;
ordinatesArray[k+1] = subPolyGeom.getRing(ring).getPoint(j).y;
}
// the first ring usually is the outer ring in a PostGIS-
// Polygon e.g. POLYGON((outerBoundary),(innerBoundary),etc.)
if (ring == 0){
multiPolygon[p].setOuterBoundaryIs(boundary);
for (int j = 0; j = 0; j-=2) {
linearRing.getCoordinates().add(
String.valueOf(ordinatesArray[j] + "," +
ordinatesArray[j+1] + ",0"));
}
}
}
}
case Geometry.POINT:
case Geometry.LINESTRING:
case Geometry.MULTIPOINT:
case Geometry.MULTILINESTRING:
case Geometry.GEOMETRYCOLLECTION:
continue;
default:
Logger.getInstance().warn("Unknown geometry for "+ work.getGmlId());
continue;
}
if (polygon != null){
multiGeometry.getAbstractGeometryGroup().
add(kmlFactory.createPolygon(polygon));
}
if (multiPolygon != null){
for (int p = 0; p 0);
// // not touching the ground
//
// if (currentLod == 1) { // calculate normal
// int current = j;
// int next = j+3;
// if (next >= startNextRing) next = surface.getElemInfo()[i] - 1;
// nx = nx + ((ordinatesArray[current+1]-ordinatesArray[next+1])
// * (ordinatesArray[current+2] + ordinatesArray[next+2]));
// ny = ny + ((ordinatesArray[current+2]-ordinatesArray[next+2])
// * (ordinatesArray[current] + ordinatesArray[next]));
// nz = nz + ((ordinatesArray[current] - ordinatesArray[next])
// * (ordinatesArray[current+1] + ordinatesArray[next+1]));
// }
// }}
int cellCount = 0;
for (int i = 0; i  0);
// not touching the ground
if (currentLod == 1) { // calculate normal
int current = j;
int next = j+3;
if (next >= ordinatesArray.length) next = 0;
nx = nx + ((ordinatesArray[current+1] - ordinatesArray[next+1]) *
(ordinatesArray[current+2] + ordinatesArray[next+2]));
ny = ny + ((ordinatesArray[current+2] - ordinatesArray[next+2]) *
(ordinatesArray[current] + ordinatesArray[next]));
nz = nz + ((ordinatesArray[current] - ordinatesArray[next]) *
(ordinatesArray[current+1] + ordinatesArray[next+1]));
}
}
cellCount += (surface.getRing(i).numPoints()*3);
55
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
9.3 Textures for COLLADA export
The database can store texture formats that are unknown to ORDImage. Therefore two
methodologies were implemented in the KML-Exporter. One to deal with ORDImages and
another to process all the unknown formats as BLOBs. Fortunately the last one could be used
for the PostGIS port. All the TexOrdImage methods had to be uncommented from the following
classes and the texture export for COLLADA exports was slightly changed.
de.tub.citydb.modules.kml.database.KmlGenericObject
1930 // OrdImage texImage = null;
InputStream texImage = null;
1954 addTexImageUri(surfaceId, texImageUri);
// if (getTexOrdImage(texImageUri) == null) { // not already marked as
wrapping texture
Additional query to get textures:
1960 psQuery3 = connection.prepareStatement(Queries.
GET_TEXIMAGE_FROM_SURFACE_DATA_ID);
psQuery3.setLong(1, rs2.getLong("surface_data_id"));
rs3 = psQuery3.executeQuery();
while (rs3.next()) {
/*
// read large object (OID) data type from database
// Get the Large Object Manager to perform operations with
LargeObjectManager lobj = ((org.postgresql.PGConnection)connection).
getLargeObjectAPI();
// Open the large object for reading
long oid = rs3.getLong("tex_image");
if (oid == 0) {
Logger.getInstance().error(
"Database error while reading library object: " + texImageUri);
}
LargeObject obj = lobj.open(oid, LargeObjectManager.READ);
// Read the data
buf = new byte[obj.size()];
obj.read(buf, 0, obj.size());
*/
// read bytea data type from database
texImage = rs3.getBinaryStream("tex_image");
}
1996 //bufferedImage = ImageIO.read(texImage.getDataInStream());
bufferedImage = ImageIO.read(texImage);
2003 // else {
// addTexOrdImage(texImageUri, texImage);
// }
// }
2064 /* if (s > 1.1 || s  1.1) {
// texture wrapping -- it conflicts with texture atlas
56
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
removeTexImage(texImageUri);
BufferedImage bufferedImage = null;
try {
bufferedImage = ImageIO.read(texImage);
} catch (IOException e) {}
addTexImage(texImageUri, bufferedImage);
// addTexOrdImage(texImageUri, texImage);
}
*/
de.tub.citydb.modules.kml.concurrent.KmlExportWorker
de.tub.citydb.modules.kml.controller.KmlExporter
de.tub.citydb.modules.kml.database.CityFurniture
de.tub.citydb.modules.kml.database.ColladaBundle
de.tub.citydb.modules.kml.database.GenericCityObject
de.tub.citydb.modules.kml.database.SolitaryVegetationObject
de.tub.citydb.modules.kml.database.KmlExporterManager
rep+ // uncommented TexOrdImage-methods
57
Port documentation for Java classes of the Importer/Exporter v1.5.0-postgis
10. References
Documents:
[1] KUNDE, F. ; ASCHE, H. ; KOLBE, T.H. ; NAGEL, C. ; HERRERUELA, J. ; KÖNIG, G. (2013): 3D City
Database for CityGML: Port documentation: PL/SQL to PL/pgSQL.
Accessible under:
http://opportunity.bv.tu-berlin.de/software/projects/3dcitydb-imp-exp/documents
[2] KUNDE, F. (2012): CityGML in PostGIS – Portierung, Anwendung und Performanz-Analyse am
Beispiel der 3D City Database von Berlin. Master Thesis (in german only).
Accessible under: Link following soon at www.3dcitydb.net.
Links:
www1 http://docs.oracle.com/cd/E14072_01/java.112/e12826/toc.htm
www2 http://commons.apache.org/dbcp/api-1.4/index.html
www3 http://tomcat.apache.org/tomcat-7.0-doc/api/index.html
www4 http://www.mchange.com/projects/c3p0/apidocs/index.html
www5 http://spatialreference.org
List of figures:
Figure 1: Import of geometries in Java (Kunde 2012 [2])..............................................................17
Figure 2: Import of geometries in Java (Kunde 2012 [2])..............................................................17
Figure 3: Im- and export of textures (Kunde 2012 [2])..................................................................42
58