i=1
∞(cid:2)
i × δHW × Failnum
i=k
(13)
LW-fraction
HW-fraction
(14)
(15)
i,i+1(OCIHW + δHW)
T HW
io-shiraz =
lost-shiraz =  × (OCILW + δLW) × Failnum
T LW
lost-shiraz =  × (OCIHW + δHW) × Failnum
T HW
We note that the failure can still occur before k check-
points of the light-weight application. Our model is prob-
abilistic and hence, sums up the probabilities over all the
segments. Failnum
LW-fraction refers to the number of failures ob-
served during the time light-weight application runs (i.e., af-
ter a failure until k checkpoints, summed over all such peri-
ods). Similarly, Failnum
HW-fraction refers to the number of failures
observed during the time heavy-weight application gets to
runs (i.e., after k checkpoints of the light-weight application
until the next failure, summed over all such periods).
Where is optimal point (optimal value of k)?: If the
goal is to simply maximize the system throughput (useful
work done per unit time), one can simply set k to ∞ . How-
ever, this results in starvation of the heavy-weight applica-
tion. In this approach, the system throughput improvement
comes from favoring the light-weight application over the
Failure
Switch Point
Failure
Shiraz
Shiraz+
x
2x
App 1 Useful Work
App 1 Checkpoint
App 1 Lost Work
App 2 Useful Work
App 2 Checkpoint
App 2 Lost Work
Figure 8: Shiraz+: Reducing the checkpointing overhead.
heavy-weight application at all times. The key constraint is
that both applications should not see any performance degra-
dation compared to the baseline. That is,
(16)
useful-base
useful-base
and T HW
useful-shiraz ≥ T HW
useful-shiraz ≥ T LW
T LW
Note that a range of values for k will satisfy Eq. 16. The
highest of the values of k in this range will be the theoretical
optimal switching point. It will result in the maximum use-
ful work done per unit time for the whole system. However,
it will not necessarily be fair to both the applications. Re-
call that increasing k improves the light-weight application’s
performance (useful work done per unit time), however, it
also decreases the heavy-weight application’s performance.
Therefore, choosing the highest such value of k that satis-
ﬁes Eq. 16 will result in zero improvement for heavy-weight
application. To address this issue, Shiraz choose a subopti-
mal value of k that provides fairness, i.e., equal beneﬁts to
both the applications. Therefore, Shiraz uses the following
constraints to derive optimal value of k:
useful-shiraz − T LW
T LW
useful-shiraz − T LW
(T LW
useful-shiraz − T HW
(T HW
useful-base = T HW
useful-base) ≥ 0
useful-base) ≥ 0
useful-shiraz − T HW
useful-base
s.t.
and
Shiraz solves this optimization problem numerically to
determine the optimal switching point (k) such that the
system throughput is maximized but both applications are
treated fairly. Shiraz will return k = ∞ if no system through-
put improvement can be achieved in the above equation.
Shiraz+ for reducing I/O overhead: Shiraz model
demonstrates that choosing optimal switching point can lead
to an improvement in system throughput without perfor-
mance degradation for individual applications, but it does
not speciﬁcally address the problem of high data movement
caused by checkpointing. Checkpointing causes excessive
pressure and contention on the I/O subsystem. Therefore, re-
ducing checkpointing overhead leads to alleviating the I/O
pressure, reduction in data movement (i.e., higher energy ef-
ﬁciency), and potentially better performance for other appli-
cations too. Shiraz+ works on top of Shiraz and trades the
additional performance gain obtained by Shiraz to reduce
the checkpointing overhead.
The key idea is to increase the checkpointing interval of
heavy-weight application (Fig 8). The intuition behind this
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:30:14 UTC from IEEE Xplore.  Restrictions apply. 
87
MTBF: 5 hours; δ: 30 seconds
Useful Work
1st App (Sim)
2nd App (Sim)
1st App (Model)
2nd App (Model)
Ckpt Ovhd
)
s
r
u
o
h
(
e
m
T
i
1.0
500
400
300
0.8
200
100
0
0.6
0.4
15
10
0.2
5
)
s
r
u
o
h
(
e
m
T
i
0.0
0
0
0.0
20
0.2
40
0.4
60
0.6
80
0.8
100
1.0
Fraction of MTBF
1.0
500
400
300
0.8
200
100
0
0.6
0.4
50
40
30
0.2
20
10
0.0
0
0
0.0
Ckpt Ovhd
)
s
r
u
o
h
(
e
m
T
i
1.0
500
400
300
0.8
200
100
0
0.6
0.4
8
6
0.2
4
2
0.0
0
0
0.0
)
s
r
u
o
h
(
e
m
T
i
1.0
500
400
300
0.8
200
100
0
0.6
0.4
25
20
15
0.2
10
5
0.0
0
0
0.0
MTBF: 5 hours; δ: 300 seconds
Useful Work
MTBF: 20 hours; δ: 30 seconds
Useful Work
MTBF: 20 hours; δ: 300 seconds
Useful Work
1st App (Sim)
2nd App (Sim)
1st App (Model)
2nd App (Model)
1st App (Sim)
2nd App (Sim)
1st App (Model)
2nd App (Model)
1st App (Sim)
2nd App (Sim)
1st App (Model)
2nd App (Model)
Ckpt Ovhd
Ckpt Ovhd
20
0.2
40
0.4
60
0.6
80
0.8
100
1.0
Fraction of MTBF
20
0.2
40
0.4
60
0.6
80
0.8
100
1.0
Fraction of MTBF
20
0.2
40
0.4
60
0.6
80
0.8
100
1.0
Fraction of MTBF
Figure 9: Shiraz model matches with the discrete-event based simulator for a wide range of parameters and scenarios.
idea is simple: heavy-weight application observes effectively
higher MTBF and hence, can afford to run at a checkpointing
interval that is larger than its OCI (and thus, reduce the I/O
cost), though at the risk of losing performance.
Determining the new checkpointing interval for heavy-
weight application is a new optimization problem that Shi-
raz and Shiraz+ open up. But, for this work, Shiraz+ takes
a relatively simpler approach and explores increasing the
OCIHW by an integer factor (2×, 3×, . . . ) and evaluating
its impact on performance and checkpointing overhead (Sec-
tion 5). We also note that this is a more practical approach
since it does not require the application programmers to
change the checkpointing interval to some new value (e.g.,
2× stretch in OCI can be emulated at the system level).
Interestingly, Shiraz’s choice of a suboptimal value of
k helps Shiraz+. The suboptimal value of k ensures that
the heavy-weight application’s performance also improves.
This allows Shiraz+ to trade this performance improvement
for a lower checkpointing overhead. If theoretically optimal
value of k was chosen, no such opportunity would exist, and
increasing OCI for the heavy-weight application will lead to
performance degradation.
Shiraz+ does not alter the checkpointing interval of light-
weight application for two reasons: (1) it has a lower impact
on the overall checkpointing overhead (due to the lower cost
of taking one checkpoint); and (2) it requires a re-adjustment
to the the optimal switch point, which would further compli-
cate the determination of optimal switching point. Note that
Shiraz+ has no impact on the performance or checkpointing
overhead of light-weight application. We evaluate Shiraz+
thoroughly under different scenarios, and analyze its impact
on I/O overhead and performance in Section 5.
4. Shiraz Model Validation
In this section, we validate the Shiraz model with a discrete-
event simulator that simulates multiple applications with
different characteristics running on an HPC system.
The goal of the validation is demonstrate that our prob-
ability theory based model has accurate estimations when
compared to the discrete event simulation. This validation
exercise will also form the basis for demonstrating that the
optimal switch point predicted by Shiraz model matches
with the optimal switch point obtained via extensive simu-
lation (Section 5).
88
Our discrete-event simulator executes an application with
a given checkpointing overhead on a system with a given
MTBF. The application takes periodic checkpoints at opti-
mal checkpointing interval. The application restarts from the
latest checkpoint when a failure strikes. The failures are gen-
erated from a Weibull distribution. Since we are interested in
analyzing the switching points between two different types
of applications, we simulate two scenarios: (1) ﬁrst applica-
tion: an application is executed ﬁrst and after some speciﬁed
time, it is switched out. From the validation perspective, it
is irrelevant what happens after the application of interest
is switched out. We need to validate the application char-
acteristics for the time frame for which the application of
interest was run; and (2) second application: in this case, af-
ter some speciﬁed time, the application of interest is sched-
uled and run. From the validation perspective, it is irrelevant
what happens before the application of interest is scheduled.
Essentially, the goal is to not make any assumptions about
relationship between the two applications being run (for ex-
ample, one light-weight and other heavy-weight).
We simulated a wide range of scenarios and validated
our model against the simulation. For brevity, we show val-
idation results only for representative parameters (Fig. 9).
We ran both the cases described earlier. An application is
switched out or started at different times (expressed as frac-
tion of MTBF for easy interpretation; results were similar
for longer time periods.). We simulated an application for a
total of 1000 hours under different scenarios: MTBF of 20
hours and 5 hours (representative of peta- and exa-scale sys-
tems, respectively), and 30 seconds and 300 seconds check-
pointing overhead. Failure events were generated from the
Weibull distribution using the shape parameter β of 0.6. The
scale parameter is determined by the MTBF and the shape
parameter. We only show the useful work and the check-
pointing overhead here, since the lost work, by deﬁnition,
will be validated, if these other two components match. The
average fraction of lost work  parameter was estimated to be
0.45. These parameter values match with other studies and
are true for many systems [9, 13, 35, 38, 40]. We obtained
similar results with other values in the range.
From Fig. 9, we make several observations. First, Shiraz
model matches closely with the simulation across a number
of parameters and scenarios. We observed similar results for
the time longer than the MTBF and other parameters. For
example, in the case of the second application, the average
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:30:14 UTC from IEEE Xplore.  Restrictions apply. 
)
s
r
u
o
h
(
k
r
o
W
l
u
f
e
s
U
1.0
40
20
0.8
0
50
0.6
25
0
0.4
40
0.2
20
0
0.0
23
0.0
MTBF: 5 hrs; δ−factor: 100
Total Useful Work
LW Useful Work
HW Useful Work
24
0.2
25
0.4
26
0.6
27
0.8
28
29
1.0
Switching Point
Figure 10: Shiraz identiﬁes optimal switching point and re-
gion of interest. Switching point k varies from 24 to 28 –
region of interest (no performance degradation). Shiraz’s op-
timal k = 26. The total runtime is 1000 hours; the δ-factor is
100×; the MTBF is 5 hours.
difference in the checkpointing overhead between the model
and the simulation for petascale and exascale systems is 0.06
hours and 0.14 hours, respectively.
Second, Shiraz model matches the simulation for both the
application execution cases. For example, the average differ-
ence in the useful work between model and simulation for
ﬁrst and second applications is 2.1 and 2.2 hours, respec-
tively. One can note the lack of data points in the case of
the ﬁrst application in Fig. 9. This is because the data points
are limited to integer multiples of application’s OCI. Recall
that when an application is executed ﬁrst, it can be switched
out only after a checkpoint, and it can invoke a maximum of
MTBF
OCI checkpoints before getting switched out. However, for
second application case, we can assume any arbitrarily small
OCI for the application that ran ﬁrst and was switched out.
This implies that we can switch in the second application at
any point resulting in a smoother validation curve.
Finally, the model matches well for both applications for
both useful work and checkpoint overhead. For example, ap-
plication with 300 sec checkpointing overhead for petascale
system observes less than 3 hours and 0.5 hours of average
difference between model and simulation. This is critical as
the choice of an optimal switching point relies on accurate
estimation of both components.
5. Evaluation
In this section, we answer the following questions:
Q1. Does an optimal switching point between two applica-
tions with different checkpointing overheads exist?
Q2. Can Shiraz determine optimal switching point accu-
rately and improve the overall system throughput?
Q3. Is Shiraz effective with real-world applications and pro-
duce signiﬁcant energy savings?
Q4. Can Shiraz+ reduce the data movement caused by
checkpointing under different scenarios? If so, what is the
impact on system throughput and application performance?
Q5. Are Shiraz and Shiraz+ effective in improving
throughput and reducing I/O overhead for representative
applications on a real-system?
Optimal Switching Point: First, we show that an optimal
switching point exists, given two applications with different
checkpointing overhead, such that the overall useful work is
89
Table 2: Shiraz model predicts the optimal switching point
correctly across scenarios.
δ-factor Model Optimal
Switch Point
System
Type
Exascale
Exascale
Exascale
Exascale
Petascale
Petascale
Petascale
Petascale
5×
25×
100×
1000×
5×
25×
100×
1000×
Sim Optimal
Switch Point
6
13
26
79
11
24