bowknot. In cases that the bug is in core kernel, for example,
inside an inline function that manipulates kernel objects, it is
2388    30th USENIX Security Symposium
USENIX Association
less likely that Hecaton could generate complete bowknots.
The second feature is the presence of missing undo state-
ments. As we discuss in §5.2, Hecaton currently cannot gener-
ate undo statements from scratch. We decrease the conﬁdence
score when Hecaton does not ﬁnd an undo match for a state-
mutating function found in its knowledge database.
The third feature is the method of error handling block
detection used in a function. As we discuss in §5.2 and §5.1,
Hecaton uses different patterns to identify error handling
blocks. Some of these patterns are used both in error handling
and non-error handling blocks and hence might produce false
undo statements. Therefore, we decrease the conﬁdence score
if such patterns are used.
The fourth feature is the presence of function pointers.
As Hecaton currently cannot pair the state-mutating function
pointers with its correct undo statement using its knowledge
database, it solely relies on the string matching heuristic to
pair them. As a result, we decrease the conﬁdence score in
the presence of such statements.
The ﬁfth feature is the presence of multi-statement undo
code, where multiple statements are used to undo one or more
state-mutating statements. One important example is when
a loop is used to undo the effects of another loop. Another
important example is when a critical section is used in the
error handling block. Hecaton assumes a one-to-one mapping
between state-mutating and undo statements, and hence does
not currently automatically handle such cases.
Finally, to take the miscellaneous unknown sources of in-
accuracy in Hecaton’s static analysis into account, we de-
crease the conﬁdence score as the number of state-mutating
statements in a function increases since having more state-
mutating statements to pair increases the error probability.
6 Implementation
Static analysis tool. We implement Hecaton in C++ and
Python with about 4,550 LoC. We use Clang for static analy-
sis in Hecaton as it allows us to perform the analysis at the
source code level. While we mainly test our solutions with
the Linux kernel of Android devices and upstream x86 Linux
kernels, we note that they are applicable to other OSes as well.
Our static analysis tool is implemented as a plug-in for the
Clang compiler. We use our plug-in alongside Android Clang
version 5.0.1 for our Android devices, and we use the same
plug-in (with a small modiﬁcation to make it compatible with
the newer version of Clang) alongside Clang version 11.0.0
for our upstream x86 Linux kernels.
We perform our analysis on the Abstract Syntax Tree
(AST). When using the AST, we do not need to worry about
parsing and lexing the source code. Moreover, we have high-
level information of the source code needed for our analy-
sis, such as functions and variables names. In addition, the
organized structure of the AST facilitates ﬁnding the error
handling blocks. In AST, all the statements and expressions
are organized in a hierarchical structure as nodes of a tree, and
Clang provides many helper functions to traverse the AST in
an efﬁcient way. There are also many helper functions to ob-
tain attributes of each node of the AST. To obtain the AST of
the source code, we use ASTFrontendAction with a custom
ASTConsumer. We override the VisitFunctionDecl func-
tion of our custom ASTConsumer to obtain all the function
declaration nodes in the AST. All the statements in the body
of each function appear as children nodes of the function dec-
laration node. To perform our analysis, we recursively visit
all the children nodes in several passes. In these passes, using
AST, ﬁrst, we identify and pair undo nodes and state-mutating
nodes to generate a bowknot for each function. As discussed
in §4.1, a bowknot includes a generic undo block, several con-
ditional goto statements, and several mask update statements.
Then, using the AST helper function, getSourceRange, we
identify the locations of these nodes in the source ﬁles. Finally,
using Clang’s Rewriter tool, we directly inject the generated
bowknot into the source code.
Exception handler. We have implemented Hecaton with
automatically-triggered bowknots for two Android devices
naming Pixel3 and Nexus 5X and various versions of three
x86 kernel branches naming upstream Linux kernel, Google’s
KMSAN kernel, and Linux-Next kernel. Nexus 5X runs
CyanogenMod-13 Android OS with Linux kernel 3.10.73,
Pixel3 runs Android-9.0.0 r0.43 with Linux kernel 4.9.96,
and the x86 Linux versions vary between 5.5.0 and 5.8.0.
As discussed in §4.1, to support automatically-triggered
bowknots, we need to instrument the kernel’s exception han-
dler. First, we need to distinguish between bowknot-supported
faults and normal faults. To achieve this goal, we statically dis-
assemble and parse the kernel image and extract the address
ranges of bowknot-supported functions and save them into a
header ﬁle. When any exception occurs, we use this header
ﬁle to execute our modiﬁed exception handler for bowknot-
supported faults and execute the unmodiﬁed exception han-
dler otherwise. In our modiﬁed exception handler, after setting
bowknot_flag, before returning to the buggy function, we
advance the Program Counter (PC) register to skip the crash-
ing instruction. In ARM architecture, all instructions have the
same length, and we simply advanced the PC register by four.
However, x86 instructions have variable lengths. As a result,
we need to decode the current instruction’s length to advance
the PC to the next instruction. We use Zydis for this purpose,
which is a lightweight open-source disassembler library for
x86 and x86-64 instructions implemented in C [4]. Since Zy-
dis is implemented with no third-party dependency (not even
libC), we can build Zydis as a part of the Linux kernel. To
minimize code added to the kernel, we only port parts of the
Zydis necessary to decode the instructions’ length.
For ARM, we add 72 lines of C code and 42 lines of as-
sembly code to the kernel exception handler. For x86, we add
136 lines of C code to the kernel exception handler and port
4677 lines of C code from the Zydis library.
USENIX Association
30th USENIX Security Symposium    2389
7 Evaluation
7.1 Effectiveness
7.1.1 Effectiveness in Bug Mitigation
Methodology. To test the effectiveness of Hecaton and
bowknots, we test our bug workaround against 113 bugs in
Android and x86 Linux kernel consisting of real CVEs, un-
patched real bugs, and injected bugs. Using a combination of
real and synthesized bugs to evaluate the effectiveness of fault-
tolerant systems is a common practice [18] [21]. However,
previous similar work, Talos [18], only used 11 real-world
vulnerabilities and FGFT [21] tested no real-world bugs. In
contrast, we use 39 real-world bugs. Similar to Talos and
FGFT, to evaluate the effectiveness of bowknots, we measure
two factors for each bug. First, whether the bug is success-
fully mitigated, and second, whether the system including the
buggy module remains functional after the undo.
In our experiments, we use PoCs to trigger the bugs. In a
successful mitigation, we make sure that the PoC still triggers
the bug after bowknots insertion but that the execution of
bowknots neutralizes the syscall that triggers the bug in a way
that prevents the system from crashing, freezing, or generating
further warnings by kernel sanitizers.
In addition, we test the functionality of the buggy module
after the execution of bowknots as a result of triggering each
bug. For our functionality test, we use standard benchmarking
and self-test programs when they are available for a kernel
module (e.g., GPU benchmarking application or Linux self-
tests for a ﬁle system). Self-tests are small test programs that
kernel developers have designed to exercise individual code
paths in the kernel and report whether or not they achieve
the expected outcomes. If no standard benchmark or self-test
is available for a module, we manually test the underlying
device of the buggy device driver in different conﬁgurations
(e.g., taking pictures and videos in different settings to make
sure the camera is functional.)
For comparison, we also test and report mitigation and
functionality preserving for each bug using Talos [18], which
uses code disabling (§2.3). Since Talos disables parts of the
code, it might seem unnecessary to test Talos workarounds for
functionality. However, in some cases, the disabled function
does not play a crucial role in the functionality of the device,
for example, when the bug is located in a function that logs the
device driver’s events. In these cases, code disabling (Talos)
might preserve the functionality of the device.
As we discuss in §9, bowknots cannot be used for the bugs
located in the kernel’s clean-up paths. Hence, we only mea-
sure and report (in §9) how common this limitation is, and we
do not consider them in our effectiveness evaluations.
We also evaluate the effectiveness of Hecaton in generating
complete bowknots. First, we report whether the bowknots
get executed automatically or if we manually encode the con-
dition for its execution. Second, we report whether the auto-
matically generated bowknots are complete or if we manually
add statements to complete them. For each bug, we limit the
amount of manual effort to complete its bowknots to 2 hours.
If we could not ﬁx a bowknot manually in 2 hours, we record
it as unsuccessful.
CVEs and Real Bugs in Android To evaluate the effec-
tiveness of bowknots and Hecaton in mitigating real bugs
and vulnerabilities of Android devices, we use 9 real bugs
and reported CVEs in four kernel components of the Pixel3
smartphone: binder IPC, camera driver, GPU driver, and the
TCP layer in the network stack (used with WiFi).
Table 1 shows the result. It shows that bowknots are ef-
fective in mitigating the bugs and vulnerabilities in 100% of
cases and maintain the system functionality in 100% of these
cases. 88.9 % of bowknots use automatic triggers and only
one case uses manual triggers. Moreover, Hecaton is capa-
ble of generating complete bowknots in 55.6% of cases. In
contrast, Talos can only mitigate the bugs in 66.7% of cases
and preserve the functionality in 22.2% of these cases. We
discuss ﬁve of these vulnerabilities in Appendix.
Unpatched Real Bugs in x86 Linux kernel To further eval-
uate the applicability of bowknots and Hecaton to different
targets and unpatched bugs, we use 30 real bugs in x86 Linux
kernels reported by Syzbot [12]. We choose the 30 latest un-
patched bugs (as of July 2020), which have reproducer PoC
programs. The 30 bugs we test are located in various parts of
the Linux kernel such as network stack, ﬁle system, memory
management, HCI Bluetooth driver, and TTY driver.
Table 2 shows the results. It shows that bowknots are ef-
fective in mitigating the bugs and vulnerabilities in 90% of
cases and maintain the system functionality in 90% of these
cases. Moreover, Hecaton is capable of generating complete
bowknots in 60% of cases. In contrast, Talos can only miti-
gate the bugs in 66.7% of cases and preserve the functionality
in 26.7% of these cases.
Injected Bugs in Android To further test the ability of
bowknots in maintaining the system functionality, and test
the robustness of Hecaton against the location of the bugs in
the kernel functions, we use bug injection. More speciﬁcally,
we inject 41 bugs in the camera driver of Pixel3 and 33 bugs
in its binder IPC subsystem. To avoid any bias in favor of
or against Hecaton, we randomly choose the bug injection
location. To do so, ﬁrst, we fuzz each module using Syzkaller
to identify all lines of code reachable through the syscall in-
terface. Next, after excluding the locations in the kernel’s
clean-up paths (see §9), we randomly choose one of the reach-
able lines and insert an explicit BUG() function there. Since
the inserted BUG()’s location is random, an arbitrary number
of state-mutating statements might get executed prior to the
bug, which needs to be undone by a bowknot. As a result,
this evaluates the ability of Hecaton in generating effective
bowknots in various cases. We then generate bowknots using
Hecaton and apply them for each bug. Table 3 shows the re-
sults. It shows that bowknots are effective in mitigating the
2390    30th USENIX Security Symposium
USENIX Association
Kernel
Modules
Binder
IPC
Camera
Driver
GPU
Driver
Network (TCP)
Bug/
Vulnerability
Talos
Mitigate?
CVE-2019-2215
CVE-2019-1999
CVE-2019-2000
CVE-2019-2284
bug: msm_camera_power_down
CVE-2019-2293
CVE-2019-10529
CVE-2018-5831
CVE-2019-18805









Talos
Preserve
Function?

*




*


Bowknot
Mitigate?









Bowknot
Preserve
Function?









Hecaton’s
Generated
Bowknots
Not-Complete
Complete