[6] S. Bhat, D. Lu, A. Kwon, and S. Devadas, “Var-CNN: A data-efﬁcient
website ﬁngerprinting attack based on deep learning,” Proceedings on
Privacy Enhancing Technologies, vol. 2019, no. 4, pp. 292–310, 2019.
[7] M. S. Rahman, P. Sirinam, N. Mathews, K. G. Gangadhara, and
M. Wright, “Tik-Tok: The utility of packet timing in website ﬁnger-
printing attacks,” Proceedings on Privacy Enhancing Technologies, vol.
2020, no. 3, pp. 5–24, 2020.
[8] M. Ju´arez, M. Imani, M. Perry, C. D´ıaz, and M. Wright, “Toward an
efﬁcient website ﬁngerprinting defense,” in European Symposium on
Research in Computer Security, vol. 9878. Springer, 2016, pp. 27–46.
[9] J. GONG and T. Wang, “Zero-delay lightweight defenses against website
ﬁngerprinting,” in Proceedings of the 29th USENIX Security Symposium.
USENIX Association, 2020, pp. 717–734.
[10] T. Wang and I. Goldberg, “Walkie-Talkie: An efﬁcient defense against
passive website ﬁngerprinting attacks,” in Proceedings of
the 26th
USENIX Security Symposium. USENIX Association, 2017, pp. 1375–
1390.
[11] K. P. Dyer, S. E. Coull, T. Ristenpart, and T. Shrimpton, “Peek-a-boo,
I still see you: Why efﬁcient trafﬁc analysis countermeasures fail,” in
IEEE Symposium on Security and Privacy.
IEEE Computer Society,
2012, pp. 332–346.
[12] X. Cai, R. Nithyanand, and R. Johnson, “CS-BuFLO: A congestion
sensitive website ﬁngerprinting defense,” in Proceedings of the 13th
Workshop on Privacy in the Electronic Society. ACM, 2014, pp. 121–
130.
[13] X. Cai, R. Nithyanand, T. Wang, R. Johnson, and I. Goldberg, “A
systematic approach to developing and evaluating website ﬁngerprinting
defenses,” in Proceedings of the 21st ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2014, pp. 227–238.
[14] W. D. la Cadena, A. Mitseva, J. Hiller, J. Pennekamp, S. Reuter, J. Filter,
T. Engel, K. Wehrle, and A. Panchenko, “TrafﬁcSliver: Fighting website
ﬁngerprinting attacks with trafﬁc splitting,” in Proceedings of the 27th
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2020, pp. 1971–1985.
[15] T. Wang and I. Goldberg, “On realistically attacking tor with website
ﬁngerprinting,” Proceedings on Privacy Enhancing Technologies, vol.
2016, no. 4, pp. 21–36, 2016.
[16] A. Panchenko, L. Niessen, A. Zinnen, and T. Engel, “Website ﬁnger-
printing in onion routing based anonymization networks,” in Proceedings
of the 10th Workshop on Privacy in the Electronic Society. ACM, 2011,
pp. 103–114.
[17] X. Cai, X. C. Zhang, B. Joshi, and R. Johnson, “Touching from a
distance: Website ﬁngerprinting attacks and defenses,” in Proceedings of
the 19th ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2012, pp. 605–616.
[18] T. Wang and I. Goldberg, “Improved website ﬁngerprinting on tor,” in
Proceedings of the 12th Workshop on Privacy in the Electronic Society.
ACM, 2013, pp. 201–212.
[19] K. Abe and S. Goto, “Fingerprinting attack on tor anonymity using deep
learning,” Proceedings of the Asia-Paciﬁc Advanced Network, vol. 42,
pp. 15–20, 2016.
[20] V. Rimmer, D. Preuveneers, M. Ju´arez, T. V. Goethem, and W. Joosen,
“Automated website ﬁngerprinting through deep learning,” in Proceed-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:20 UTC from IEEE Xplore.  Restrictions apply. 
1571
ings of the 25th Network and Distributed System Security Symposium.
The Internet Society, 2018.
defenses,” CoRR, vol. abs/2111.12629, 2021.
https://arxiv.org/abs/2111.12629
[Online]. Available:
recipes/quantization.html.
dirbytes.html.
[46] The Tor Project. (2021, Oct.) Tor metrics. https://metrics.torproject.org/
[47] D. Goulet and M. Perry. (2020, Nov.) Overcoming Tor’s bottlenecks
with trafﬁc splitting. https://gitlab.torproject.org/mikeperry/torspec/-/
blob/ticket40202 01/proposals/329-trafﬁc-splitting.txt.
[48] N. Mathewson, M. Perry, and D. Goulet.
(2019, Dec.) Circuit
padding developer documentation. https://github.com/torproject/tor/blob/
main/doc/HACKING/CircuitPaddingDevelopment.md.
[21] M.
Perry.
(2011,
website
org/experimental-defense-website-trafﬁc-ﬁngerprinting.
trafﬁc
Oct.)
ﬁngerprinting.
Experimental
defense
for
https://blog.torproject.
[22] X. Luo, P. Zhou, E. W. W. Chan, W. Lee, R. K. C. Chang, and
R. Perdisci, “HTTPOS: Sealing information leaks with browser-side
obfuscation of encrypted ﬂows,” in Proceedings of the 18th Network
and Distributed System Security Symposium.
The Internet Society,
2011.
[23] G. Cherubin, J. Hayes, and M. Ju´arez, “Website ﬁngerprinting defenses
at the application layer,” Proceedings on Privacy Enhancing Technolo-
gies, vol. 2017, no. 2, pp. 186–203, 2017.
[24] R. Nithyanand, X. Cai, and R. Johnson, “Glove: A bespoke website
ﬁngerprinting defense,” in Proceedings of the 13th Workshop on Privacy
in the Electronic Society. ACM, 2014, pp. 131–134.
[25] C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan, I. J.
Goodfellow, and R. Fergus, “Intriguing properties of neural networks,”
in Proceedings of the 2nd International Conference on Learning Rep-
resentations, 2014.
[26] I. J. Goodfellow, J. Shlens, and C. Szegedy, “Explaining and harnessing
adversarial examples,” in Proceedings of the 3rd International Confer-
ence on Learning Representations, 2015.
[27] N. Carlini and D. Wagner, “Towards evaluating the robustness of neural
IEEE
networks,” in IEEE Symposium on Security and Privacy.
Computer Society, 2017, pp. 39–57.
[28] M. S. Rahman, M. Imani, N. Mathews, and M. Wright, “Mockingbird:
Defending against deep-learning-based website ﬁngerprinting attacks
with adversarial traces,” IEEE Transactions on Information Forensics
and Security, vol. 16, pp. 1594–1609, 2021.
[29] C. Hou, G. Gou, J. Shi, P. Fu, and G. Xiong, “WF-GAN: Fighting
back against website ﬁngerprinting attack using adversarial learning,” in
Proceedings of the 25th IEEE Symposium on Computers and Commu-
nications.
IEEE, 2020, pp. 1–7.
[30] M. Nasr, A. Bahramali, and A. Houmansadr, “Defeating DNN-based
trafﬁc analysis systems in real-time with blind adversarial perturbations,”
in Proceedings of the 30th USENIX Security Symposium. USENIX
Association, 2021, pp. 2705–2722.
[31] T. Wang, “The one-page setting: A higher standard for evaluating web-
site ﬁngerprinting defenses,” in Proceedings of the 28th ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2021,
pp. 2794–2806.
[32] M. Rigaki and S. Garcia, “Bringing a GAN to a knife-ﬁght: Adapting
malware communication to avoid detection,” in Proceedings of the 39th
IEEE Security and Privacy Workshops.
IEEE Computer Society, 2018,
pp. 70–75.
[33] J. Li, L. Zhou, H. Li, L. Yan, and H. Zhu, “Dynamic trafﬁc feature
camouﬂaging via generative adversarial networks,” in Proceedings of
the 7th IEEE Conference on Communications and Network Security.
IEEE, 2019, pp. 268–276.
[34] S. F. Kazerooni and R. Rojas-Cessa, “GAN tunnel: Network trafﬁc
steganography by using GANs to counter internet trafﬁc classiﬁers,”
IEEE Access, vol. 8, pp. 125 345–125 359, 2020.
[35] I. J. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley,
S. Ozair, A. C. Courville, and Y. Bengio, “Generative adversarial nets,”
in Advances in Neural Information Processing Systems, 2014, pp. 2672–
2680.
[36] M. Arjovsky and L. Bottou, “Towards principled methods for training
generative adversarial networks,” in Proceedings of the 5th International
Conference on Learning Representations, 2017.
[37] M. Arjovsky, S. Chintala, and L. Bottou, “Wasserstein generative adver-
sarial networks,” in Proceedings of the 34th International Conference
on Machine Learning, vol. 70. PMLR, 2017, pp. 214–223.
[38] I. Gulrajani, F. Ahmed, M. Arjovsky, V. Dumoulin, and A. C. Courville,
“Improved training of wasserstein GANs,” in Advances in Neural
Information Processing Systems, 2017, pp. 5767–5777.
[39] J. Wu, Z. Huang, J. Thoma, D. Acharya, and L. V. Gool, “Wasserstein
divergence for GANs,” in Proceedings of the 15th European Conference
on Computer Vision, vol. 11209. Springer, 2018, pp. 673–688.
[40] M. Mirza and S. Osindero, “Conditional generative adversarial
nets,” CoRR, vol. abs/1411.1784, 2014. [Online]. Available: https:
//arxiv.org/abs/1411.1784
[41] J. Gong, W. Zhang, C. Zhang, and T. Wang, “Wfdefproxy: Modularly
implementing and empirically evaluating website ﬁngerprinting
[42] Speedtest Intelligence. (2021, Jul.) Speedtest global index. https://www.
speedtest.net/global-index.
[43] V. L. Pochat, T. V. Goethem, S. Tajalizadehkhoob, M. Korczy´nski, and
W. Joosen, “Tranco: A research-oriented top sites ranking hardened
against manipulation,” in Proceedings of the 26th Annual Network and
Distributed System Security Symposium. The Internet Society, 2019.
[44] S. Li, H. Guo, and N. Hopper, “Measuring information leakage in
website ﬁngerprinting attacks and defenses,” in Proceedings of the 25th
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2018, pp. 1977–1992.
[45] Pytorch. (2021, Nov.) Quantization recipe. https://pytorch.org/tutorials/
APPENDIX A
DESIGN DETAILS FOR OUR GAN
In this section, we present
the detailed design for the
generator and the discriminator in our generative adversarial
network.
Generator. The generator is a Multilayer Perception (MLP)
that takes in the random noise and the label of the webpage
we want to generate. It outputs a fake burst sequence together
with (cid:96), the real trace length used for truncating the output
trace. It has four blocks, as shown in Figure 11a. The ﬁrst
block consists of a fully-connected layer and an activation
function to transform the input into a hidden space whose
dimension is 512. The activation function we use for the
generator is the ReLU function since it yields the best results in
our parameter tuning process. The second and the third block
consist of a fully-connected layer, a batch normalization layer,
and an activation function. The dimension of the feature vector
doubles each time it is fed into a block. After the third block,
the dimension of the feature is 2048. The last block transforms
the feature vector into the ﬁnal output with a fully-connected
layer. To ensure the ﬁnal output values are within the range of
(0,1), we use a Sigmoid function as the activation function.
Discriminator. The discriminator is an MLP that takes in
a trace together with its label and outputs one single value as
the logit of its conﬁdence that the input trace is real. It has
four blocks, as shown in Figure 11b. The ﬁrst three blocks all
consist of three layers: a fully-connected layer, an activation
function layer, and a dropout layer to avoid the overﬁtting
problem. Each block halves the dimension of the feature vector
except the ﬁrst block which transforms the input of size 1500
into a feature vector of size 2048. The activation function we
use for each block is LeakyReLU, which outperforms ReLU
in our experiments. After the fourth block, we get a single
value that is the logit of predicting the input as a real trace.
Note that WGANs are different from vanilla GANs here since
they directly use this value to compute the discriminator loss
without adding another Sigmoid layer.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:20 UTC from IEEE Xplore.  Restrictions apply. 
1572
(a) Generator
(b) Discriminator
Fig. 11: The architecture of our generator and discriminator. (FC: fully-connected layer, BN: batch normalization, c: class
label, (cid:96): trace length, z:sampled noise vector.)
classes (webpages indexing 80, 84, 33, and 81 in the dataset)
and plot the center traces for real and fake data as described
in Section IV-E. As shown in Figure 12, the center traces for
each class are close to each other, showing that our generator
learns the patterns of these webpages well.
e
z
i
S
t
s
r
u
B
n
a
e
M
e
z
i
S
t
s
r
u
B
n
a
e
M
10
0
−10
−20
−30
10
0
-10
-20
-30
real
fake
0
100 200 300 400 0
100 200 300 400
Burst Index
Burst Index
Fig. 12: Visualization of real and fake center traces. We only
show the ﬁrst 400 outgoing and incoming bursts since the sizes
of the last 300 bursts are all close to 0. Incoming bursts are
represented in negative values.
APPENDIX B
TRACE VISUALIZATION
In this section, we visualize the generated traces from G
trained on Sirinam’s dataset DS95. We randomly sample four
1573
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:35:20 UTC from IEEE Xplore.  Restrictions apply. 
+FCBNFCSigmoidTrace+AAAB63icbVBNS8NAEJ3Ur1q/qh69LBbBU0lE1GPRi8cK9gPaUDbbSbt0dxN2N0IJ/QtePCji1T/kzX9j0uagrQ8GHu/NMDMviAU31nW/ndLa+sbmVnm7srO7t39QPTxqmyjRDFssEpHuBtSg4ApblluB3VgjlYHATjC5y/3OE2rDI/VopzH6ko4UDzmjNpf6KMSgWnPr7hxklXgFqUGB5qD61R9GLJGoLBPUmJ7nxtZPqbacCZxV+onBmLIJHWEvo4pKNH46v3VGzjJlSMJIZ6Usmau/J1IqjZnKIOuU1I7NspeL/3m9xIY3fspVnFhUbLEoTASxEckfJ0OukVkxzQhlmme3EjammjKbxVPJQvCWX14l7Yu6d1W/fLisNW6LOMpwAqdwDh5cQwPuoQktYDCGZ3iFN0c6L86787FoLTnFzDH8gfP5AxBUjkQ=`AAAB6HicbVDLTgJBEOzFF+IL9ehlIjHxRHYNUY9ELx4hkUcCGzI79MLI7OxmZtYECV/gxYPGePWTvPk3DrAHBSvppFLVne6uIBFcG9f9dnJr6xubW/ntws7u3v5B8fCoqeNUMWywWMSqHVCNgktsGG4EthOFNAoEtoLR7cxvPaLSPJb3ZpygH9GB5CFn1Fip/tQrltyyOwdZJV5GSpCh1it+dfsxSyOUhgmqdcdzE+NPqDKcCZwWuqnGhLIRHWDHUkkj1P5kfuiUnFmlT8JY2ZKGzNXfExMaaT2OAtsZUTPUy95M/M/rpCa89idcJqlByRaLwlQQE5PZ16TPFTIjxpZQpri9lbAhVZQZm03BhuAtv7xKmhdl77JcqVdK1ZssjjycwCmcgwdXUIU7qEEDGCA8wyu8OQ/Oi/PufCxac042cwx/4Hz+AOwvjQc=zAAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBU0mkqMeiF48t2FpoQ9lsJ+3azSbsboQS+gu8eFDEqz/Jm//GbZuDtj4YeLw3w8y8IBFcG9f9dgpr6xubW8Xt0s7u3v5B+fCoreNUMWyxWMSqE1CNgktsGW4EdhKFNAoEPgTj25n/8IRK81jem0mCfkSHkoecUWOlJuuXK27VnYOsEi8nFcjR6Je/eoOYpRFKwwTVuuu5ifEzqgxnAqelXqoxoWxMh9i1VNIItZ/ND52SM6sMSBgrW9KQufp7IqOR1pMosJ0RNSO97M3E/7xuasJrP+MySQ1KtlgUpoKYmMy+JgOukBkxsYQyxe2thI2ooszYbEo2BG/55VXSvqh6l9Vas1ap3+RxFOEETuEcPLiCOtxBA1rAAOEZXuHNeXRenHfnY9FacPKZY/gD5/MHyVOM8A==cInput dim: 100 + 500In_features: 600 Out_features: 512FCIn_features: 512 Out_features: 1024In_features: 2048 Out_features: 1+1400Output dim: 1+1400ActivationReLUActivationReLUBNFCIn_features: 1024 Out_features: 2048ActivationReLUInputBlock 1Block 2Block 3Block 4OutputTrace+AAAB6HicbVBNS8NAEJ3Ur1q/qh69LBbBU0mkqMeiF48t2FpoQ9lsJ+3azSbsboQS+gu8eFDEqz/Jm//GbZuDtj4YeLw3w8y8IBFcG9f9dgpr6xubW8Xt0s7u3v5B+fCoreNUMWyxWMSqE1CNgktsGW4EdhKFNAoEPgTj25n/8IRK81jem0mCfkSHkoecUWOlJuuXK27VnYOsEi8nFcjR6Je/eoOYpRFKwwTVuuu5ifEzqgxnAqelXqoxoWxMh9i1VNIItZ/ND52SM6sMSBgrW9KQufp7IqOR1pMosJ0RNSO97M3E/7xuasJrP+MySQ1KtlgUpoKYmMy+JgOukBkxsYQyxe2thI2ooszYbEo2BG/55VXSvqh6l9Vas1ap3+RxFOEETuEcPLiCOtxBA1rAAOEZXuHNeXRenHfnY9FacPKZY/gD5/MHyVOM8A==cInputInput dim: 100 + 1400FCIn_features: 1500 Out_features: 2048ActivationBlock 1DropoutLeakyReLU:     = 0.2 AAAB7nicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE1GPRi8cK9gPaUCbbTbt0swm7G6GE/ggvHhTx6u/x5r9x0+agrQ8GHu/NMDMvSATXxnW/ndLa+sbmVnm7srO7t39QPTxq6zhVlLVoLGLVDVAzwSVrGW4E6yaKYRQI1gkmd7nfeWJK81g+mmnC/AhHkoecorFSp48iGWNlUK25dXcOskq8gtSgQHNQ/eoPY5pGTBoqUOue5ybGz1AZTgWbVfqpZgnSCY5Yz1KJEdN+Nj93Rs6sMiRhrGxJQ+bq74kMI62nUWA7IzRjvezl4n9eLzXhjZ9xmaSGSbpYFKaCmJjkv5MhV4waMbUEqeL2VkLHqJAam1Aegrf88ippX9S9q/rlw2WtcVvEUYYTOIVz8OAaGnAPTWgBhQk8wyu8OYnz4rw7H4vWklPMHMMfOJ8/xOePNQ==↵Rate = 0.2 FCIn_features: 2048 Out_features: 1024ActivationBlock 2DropoutLeakyReLU:     = 0.2 AAAB7nicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE1GPRi8cK9gPaUCbbTbt0swm7G6GE/ggvHhTx6u/x5r9x0+agrQ8GHu/NMDMvSATXxnW/ndLa+sbmVnm7srO7t39QPTxq6zhVlLVoLGLVDVAzwSVrGW4E6yaKYRQI1gkmd7nfeWJK81g+mmnC/AhHkoecorFSp48iGWNlUK25dXcOskq8gtSgQHNQ/eoPY5pGTBoqUOue5ybGz1AZTgWbVfqpZgnSCY5Yz1KJEdN+Nj93Rs6sMiRhrGxJQ+bq74kMI62nUWA7IzRjvezl4n9eLzXhjZ9xmaSGSbpYFKaCmJjkv5MhV4waMbUEqeL2VkLHqJAam1Aegrf88ippX9S9q/rlw2WtcVvEUYYTOIVz8OAaGnAPTWgBhQk8wyu8OYnz4rw7H4vWklPMHMMfOJ8/xOePNQ==↵Rate = 0.2 FCIn_features: 1024 Out_features: 512ActivationBlock 3DropoutLeakyReLU:     = 0.2 AAAB7nicbVBNS8NAEJ3Ur1q/qh69LBbBU0lE1GPRi8cK9gPaUCbbTbt0swm7G6GE/ggvHhTx6u/x5r9x0+agrQ8GHu/NMDMvSATXxnW/ndLa+sbmVnm7srO7t39QPTxq6zhVlLVoLGLVDVAzwSVrGW4E6yaKYRQI1gkmd7nfeWJK81g+mmnC/AhHkoecorFSp48iGWNlUK25dXcOskq8gtSgQHNQ/eoPY5pGTBoqUOue5ybGz1AZTgWbVfqpZgnSCY5Yz1KJEdN+Nj93Rs6sMiRhrGxJQ+bq74kMI62nUWA7IzRjvezl4n9eLzXhjZ9xmaSGSbpYFKaCmJjkv5MhV4waMbUEqeL2VkLHqJAam1Aegrf88ippX9S9q/rlw2WtcVvEUYYTOIVz8OAaGnAPTWgBhQk8wyu8OYnz4rw7H4vWklPMHMMfOJ8/xOePNQ==↵Rate = 0.2 FCIn_features: 512 Out_features: 1Block 4LogitOutput dim: 1Output