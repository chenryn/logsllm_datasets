types of data are obtained, pre-processed and then combined.
a) Preparing the Historical Alarm Log. The alarm log format considered
in this study is presented in Table1, and is more or less the same as in prior
studies [3]. Each alarm has a name, a source (the device where the alarm was
triggered),thedomainofthedevice,anoccurrencetimeandacleartime.Forthis
study, five days of data was obtained from a large telecommunication network
inIndonesia,fromthe12th to16th April,2019.Thisdatasetcontainsmorethan
six million alarms, categorized into 300 types, triggered by different devices. To
ensure privacy, alarm names and sources are not shown in Table1.
Table 1. Part of an alarm log from an Indonesian telecommunication network
Alarm name Domain Alarm source Occurrence time Clear time
Alarm 1 ran-4g Source 1 2019-04-12 10:40:23 2019-04-12 10:40:29
Alarm 2 Microwave Source 2 2019-04-12 10:40:24 2019-04-12 11:30:44
Alarm 3 ran-2g Source 3 2019-04-12 10:40:26 2019-04-12 10:40:36
... ... ... ... ...
Afterobtainingthealarmlog,theproposedframeworkpre-processesthedata
to filter out some spurious alarms. This is done based on the recommendation
of telecommunication network experts and allows to perform a more precise
232 P. Fournier-Viger et al.
analysis of alarm correlation and to reduce the time required for calculations.
First, all alarms that repeatedly appear in a device during a short period of
time(fiveminutesaspertherecommendationofdomainexperts)arecombined.
Second, some repeatedly occurring alarms whose duration time is very short
are filtered out as they are considered uninteresting. Third, alarms that have
incomplete information (e.g. an empty alarm source field) are discarded.
b) Building a Static Heterogeneous Graph.Afterpreparingthealarmlog,
theframeworkobtainsdataaboutthenetworktopology.Thisdataisrepresented
as a connected directed graph where devices are vertices and edges indicate the
directions that information flows between devices.
In this study, the network topology was unavailable. Hence, a procedure was
designed to extract the topology from logs indicating how information transited
throughthenetwork.Table2depictspartofsuchlog,wherethebasiccomponent
is paths. A path is an ordered list of devices through which some messages have
transited. Note that a device may appear in multiple paths.
Table 2. Part of an information flow log
Path Id Device name Device type Path Hop
1 Device 1 Router 0
1 Device 2 Microwave 1
1 Device 3 RAN 2
2 Device 1 Router 0
2 Device 4 Microwave 1
2 Device 5 RAN 2
... ... ... ...
By combining paths, a static heterogeneous graph is obtained representing
the network topology such as the one shown in Fig.2 (left). The constructed
graph is hierarchical where each node represents a network device. Three types
of devices are considered, namely routers, microwave devices and RAN (Radio
Access Network) devices (also called NodeB). The information generally flows
from routers to microwave devices, and then to RAN devices. The graph gen-
erated using the collected data contains 41,143 distinct vertices (devices) and
nodes appears to be hierarchically organized into three layers (called domains)
asatree-likestructure.However,itshouldbenotedthatsomenodesareintercon-
nectedwithothersintheMicrowavelayer.Hence,therearesomecyclesbetween
microwave nodes and the network must be represented as a graph rather than a
tree.
c)Mapping AlarmstotheNetwork.Afterobtainingthegraphrepresenting
the network topology, the proposed framework maps each alarm from the alarm
log to devices of the graph. This is done by matching values for the Device
Discovering Alarm Correlation Rules 233
Router
Node attribute dictionary:
Microwave
Node type : Router/Microwave/NodeB
NodeB
Historical Alarm data:
(Alarm type: appear time)
Alarm A: [t1, t2, t3…]
… Alarm B: [t3, t4, t5…]
…
Fig.2. The recovered network topology (left) with alarm attributes (right)
Name field from information flow paths (as in Table2) to values in the Alarm
Source field of the alarm log (as in Table1). The result is a graph-based data
representation where all triggered alarms are encoded in vertex attributes on
thetopologyandwherethetopologyremainsfixed.Suchstructureisdepictedin
Fig.2.Foragivennode,eachattributerepresentsanalarmtypeandcontainsthe
listofalarmoccurrencesofthattype,sortedbytime.Thisgraph-basedstructure
indicates how alarms change over time and is a type of dynamic attributed
graph. Note that during the mapping process, alarms that are not mapped to
any device of the topology are discarded. The next paragraphs explains how
interesting correlation patterns are extracted from this data representation.
Step 2. Extracting Alarm Correlation Rules. After the data has been
prepared, the proposed framework extracts patterns indicating strong temporal
relationships between pairs of alarm types. A natural representation for such
relationships is rules of the form A → B indicating that if some alarm of type
A appears, an alarm of type B is also likely to appear. But finding interesting
rules requires to define a measure of the correlation of A and B.
In association rule mining [11,14], several measures have been proposed to
find strong rules such as the support (occurrence count of A with B) and the
confidence (occurrence count of A with B divided by the occurrence count of
A). But the support measure is not very suitable for alarm correlation analysis
becauseveryfrequentalarmsaregenerallyunimportantandmayevenbeconsid-
ered as noise. The confidence measure has the drawback that it is very sensitive
to the frequency of a rule’s consequent (B) in the database. Another traditional
measure is the Lift measure [14], which is less influenced by the presence of rare
itemsbutitissymmetric.Inthisstudy,wewantanasymmetricmeasuretohelp
usjudgehowanalarminfluencestheother.Theliftdoesnotallowtodistinguish
between the correlation of A with B and that of B with A.
To address the above limitations of the above measures, this paper presents
a novel correlation measure named ACOR (Alarm CORrelation) specifically
designed for evaluating the correlation between two alarms A and B. Some
advantages are that it consider the occurrence frequencies of A and B so
that it can minimize the impact of noisy data (some alarms always appear or
only appear once or twice). And ACOR amplifies the difference between the
234 P. Fournier-Viger et al.
associated values. It is worth noticing that it is an asymmetric measure, i.e.,
acor A2B does not equal acor B2A. The measure is given as:
ABcount
)
acor A2B =( 2−Ac Ao Bun ct ount), (1)
Bcount
whereABcountisthenumberoftimewindowswhereAandBappearedtogether
(e.g. within 5min) which can be interpreted as indicating that A and B may
have the same cause and Acount (resp. Bcount) is the number of occurrences
of alarm A (resp. alarm B) in the log data. The closer a acor A2B value is to the
maximum of 1, the higher the correlation between the two alarms is.
Besides, it can be observed that the correlation measure is designed to not
bestrictabouttheorderofoccurrencesbetweentwoalarmsAandB,aslongas
theyoccurtogethercloselyenough(whithinatimewindow).Thereasonfornot
requiring a strict order between A and B is that clocks of network devices are
not perfectly synchronized. As a result, some event may appear before another
event in the alarm log although it actually appeared after.
Another contribution of this work is to not only find rules about alarms
within a single device (single device rules) but also between devices from the
samedomain(crossdevicerules)andbetweendevicesofdifferentdomains(cross
domain rules). This is useful because a telecommunication network is typically
hierarchical, and devices within each layer (domain) behave quite differently.
Nodesfromdifferentdomainsalsohavecompletelydifferenttypesofalarmsand
communicationlinkbetweennodesarealsodeterminedbythedomainscontain-
ing these nodes. Discovering cross device and cross domain rules allows to go
beyondsimplecorrelationsoccurringwithinasingledevicetofindpatternsappli-
cable in other scenarios. This was not done in previous studies as the network
topology was ignored.
To find correlation rules between alarms, a data mining algorithm is applied
to the previous graph structure. As mentioned, this paper considers three sce-
narios for alarm correlation analysis: single device rules, cross device rules and
crossdomainrules.Tofindtheserules,thecorrelationbetweenallpairsofalarms
is calculated according to the acor A2B formula. Algorithm 1 shows the pseudo
code for calculating the correlation of a single device rule. It takes as input the
graph data structure previously built, two alarm types A and B, and returns
the correlation of A → B. In the pseudocode, the notation len(node.alarm A)
represents the number of alarms of type A that have occurred in a given device
called node, and node.alarm A[i] refers to the i-th alarm occurrence of type
A occurring in the device node. The algorithm can be easily extended to iden-
tify strongly correlated cross device and cross domain rules. The only difference
between these different scenarios is that alarms must be in different positions
in the network when calculating the correlation. Finally, the rules are ranked
by decreasing order of correlation. The assumption is that rules having a high
correlationaremoreinteresting.Therulescanbeanalyzedbyanexpertorused
for alarm compression as it will be explained in the next subsection.
Discovering Alarm Correlation Rules 235
Algorithm 1: Calculating the correlation of a single device rule
input : a dynamic attributed graph G,
two alarm types A and B
output: Correlation value of A to B
1 Initialize A count←0,B count←0,AB count←0
2 foreach node∈G do
3 A count←A count+len(node.alarm A)
4 B count←B count+len(node.alarm B)
5 Initialize i←0,j ←0
6 while i<len(node.alarm A) and j <len(node.alarm B do
7 if node.alarm A[i],node.alarm B[j] appear together then
8 AB count←AB count+1
9 i←i+1
10 j ←j+1
11 end
12 if node.alarm A[i] appears before node.alarm B[j] then
13 i←i+1
14 end
15 if node.alarm B[j] appears before node.alarm A[i] then
16 j ←j+1
17 end
18 end
19 end
20 acor←(AB count/A count)/(2−(AB count/B count))
21 return cor
Step 3. Compressing Alarms Using the Alarm Correlation Rules.After
extracting alarm correlation rules, the framework utilizes the discovered alarm
correlation rules for alarm compression. This is done in two steps.
a) Aggregating Rules and Inferring the Cause of an Alarm. First, the
top-k alarm correlation rules are selected where k is a parameter that is set by
the user. This is to avoid having to process a very large number of rules in the
subsequent step.
For single device correlation analysis, if a more compact representation is
required,aninferencegraphcanbecreatedbetweenalarmsofdifferentdomains.
There will be a small connected subgraph in the inference graph where vertices
arealarmsandedgesaretherelationsbetweenalarms.Thenwecangetanumber
of connected subgraphs that is independent alarm sets. Note that the proposed
method uses the property that the value of the correlation is not symmetric to
deleteedgesintheinferencegraph,andsimplyobtaineachP alarmthroughthe
inference graph. For cross device and domain correlation analysis, we directly
infer the direction of the information flow in the network to get P alarms.
b) Filtering Alarms in Real-Time. Then, the framework applies alarm cor-
relation rules selected in the previous step to filter alarms. But a challenge is
236 P. Fournier-Viger et al.
that the network center in charge of the telecommunication network receive a
constant flow of alarms. To be able to filter alarms in real-time, the proposed
frameworkisadaptedtousesaslidingwindow.Foreachwindow,alarmsofthat
window are mapped to the graph representing the network topology to create
an attributed graph. Then, the framework respectively performs pre-processing
filtering, cross domain compression, cross device compression and single device
compressionusingtherulesobtainedbytheknowledgediscoveryprocess.Lastly,
the remaining alarms from the network are reported to the network manage-
ment center and some technicians will be dispatched to check and fix the nodes
(devices) having alarms.
4 Experimental Evaluation
To evaluate the proposed framework, two experiments were done using real
alarm data collected from an Indonesian telecommunication network (described
in Sect.3). Results where compared with rules found by the state-of-the-art
AABD [3] system, obtained from its authors.
Rule Quality. The first experiment was carried out to verify the quality of the
alarm correlation rules extracted by the proposed framework. For this purpose
a comparison was made with the 135 rules found by the AABD system [3] to
see if rules found by AABD could be rediscovered and if many other rules with
a similar or higher correlation could be found. The rules found by AABD are
used as baseline as they have been verified as valid by domain experts. Both
approaches were applied using the same time window of 5min, suggested by
domain experts. Let A and B denote the sets of rules found by AABD and the
proposed framework, respectively. The coverage ratio was calculated, which is
defined as coverage = |A∩B|/|B|. A high coverage ratio indicates that many
rulesoftheproposedframeworkarevalid(asAwasvalidatedbyexperts).How-
ever, it should be noted that this measure does not give a full picture as there
may exist valid rules not found by AABD.
Toselectgoodrules,aminimumcorrelationthresholdwasappliedinthepro-
posed framework. As this parameter is set lower, more rules may be found, and
thenthecoverageratiomayincreasebuttheaccuracyofrulesmaydecrease.Itis
thus important to choose a suitable value for this parameter that is not too low
to avoid finding many spurious rules. To choose a suitable value, we applied the
empirical“elbowmethod”approachforsettingaparameter,whichiscommonly
used in data mining and machine learning [15]. It consists of drawing a chart
representing the impact of a parameter on a measure to find the point where
further increasing or decreasing the parameter would result in a huge change
for that measure. In this study, we varied the minimum correlation threshold
andnotedthenumberofrulesfoundforeachvaluetodrawachartrepresenting
the frequency distribution of rules w.r.t correlation (shown in Fig.3). We then
observedthatalargeincreaseinthenumberofrulesoccursforcorrelationvalues
below 0.135. Assuming that those could be spurious rules, we set the minimum
correlationto0.135.Forthisparametervalue,about500alarmcorrelationrules
Discovering Alarm Correlation Rules 237
were discovered including 113 found by AABD. Thus, in this case, the coverage
ratiois113/135=84%.ItwasobservedthatmanyrulesnotfoundbytheAABD
system were discovered that have similar or higher correlation values than rules
found by AABD. This is interesting as they are new rules exclusively discovered
by the proposed framework that may be valid rules. Rules were presented to
a domain expert who found that the majority of the new rules are interesting
(Fig.3).
Fig.3. The correlation distribution of rules
Alarm Compression Rate. The second experiment aimed at evaluating the
numberofalarmsthatcouldbecompressed(removed)usingthediscoveredalarm
correlation rules. The original number of alarms and the number of remaining
alarms after applying each compression procedure is shown in Table3. After
keeping only the alarms triggered by devices from the reconstructed topology,
4,481,273alarmswerekeptfromtheoriginal6,199,650ones.Then,preprocessing
was applied, which further reduced that number to 992,966. Then, alarms were
compressedusingcrossdomain,crossdevice,andsingledevicealarmcorrelation
rules, respectively. In the end, 590,307 alarms remained, that is 9.5% of the