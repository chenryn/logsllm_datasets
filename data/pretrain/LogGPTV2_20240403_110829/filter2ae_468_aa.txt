原文：
在本文中，我们为读者介绍套接字在准备接受连接之前，系统在幕后做了哪些工作，以及“准备好接受连接”倒底意味着什么
。由于篇幅较长，本文分为上下两篇进行翻译，这里为下篇。
**检查listen函数的backlog参数是否受具体域名空间所限**
* * *
如果该参数确实由具体网络命名空间决定的话，那么，我们可以设法进入某个命名空间，设置某个限值，然后，让外部看到的却是另一个限值：
    # Check the somaxconn limit as set in the
    # default network namespace
    cat /proc/sys/net/core/somaxconn
    128
    # Create a new network namespace
    ip netns add mynamespace
    # Join the network namespace and then
    # check the value set for `somaxconn`
    # within it
    ip netns mynamespace exec \
            cat /proc/sys/net/core/somaxconn
    128
    # Modify the limit set from within the 
    # network namespace
    ip netns mynamespace exec \
            /bin/sh -c "echo 1024 > /proc/sys/net/core/somaxconn"
    # Check whether the limit is in place there
    ip netns mynamespace exec \
            cat /proc/sys/net/core/somaxconn
    1024
    # Check that the host's limit is still the
    # same as before (128), meaning that the change
    # took effect only within the namespace
    cat /proc/sys/net/core/somaxconn
    128
所以，通过/proc，我们可以看到相关的[sysctl](https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt "sysctl")参数的情况，但是，它们真的就位了吗?
要解决这个问题，我们首先需要了解如何收集为给定套接字设置的backlog参数的限值。
**利用procfs收集TCP套接字的相关信息**
* * *
通过[/proc/net/tcp](https://www.kernel.org/doc/Documentation/networking/proc_net_tcp.txt
"/proc/net/tcp")，我们可以看到当前名称空间中所有的套接字。
通常，我们可以利用这个文件找到所需的大部分信息。
该文件包含了一些非常有用的信息，比如:
  * 连接状态;
  * 远程地址和端口;
  * 本地地址和端口;
  * 接收队列的大小;
  * 传输队列的大小。
例如，在我们让套接字进入监听状态之后，就可以通过它来查看相关信息了：
    # Retrieve a list of all of the TCP sockets that
    # are either listening of that have had or has a
    # established connection.    
            hexadecimal representation  Local address in the format    *-.
            :, where numbers are   |
            represented in the hexadecimal   |
            format.                          |
                        .--------------------*
                        |
            The states here correspond to the
            ones in include/net/tcp_states.h:
    enum {
        TCP_ESTABLISHED = 1,
        TCP_SYN_SENT,
        TCP_SYN_RECV,
        TCP_FIN_WAIT1,
        TCP_FIN_WAIT2,
        TCP_TIME_WAIT,     .-> 0A = 10 --> LISTEN
        TCP_CLOSE,         |
        TCP_CLOSE_WAIT,    |
        TCP_LAST_ACK,      |
        TCP_LISTEN,  ------*
        TCP_CLOSING,
            TCP_NEW_SYN_RECV,
        TCP_MAX_STATES,
    };
当然，这里并没有看到为侦听套接字配置的backlog参数，这是因为该信息与处于LISTEN状态的套接字密切相关，当然，目前来说，这只是一个猜测。
那么，我们该如何进行检测呢？
**检查侦听套接字的backlog参数的大小**
* * *
为了完成这项任务，最简便的方法是使用[iproute2](https://wiki.linuxfoundation.org/networking/iproute2
"iproute2")中的[ss](https://linux.die.net/man/8/ss "ss")命令。
现在，请考虑以下用户空间代码：
    int main (int argc, char** argv) {
            // Create a socket for the AF_INET
            // communication domain, of type SOCK_STREAM
            // without a protocol specified.
            int sock_fd = socket(AF_INET, SOCK_STREAM, 0);
            if (sock_fd == -1) {
                    perror("socket");
                    return 1;
            }
            // Mark the socket as passive with a backlog
            // size of 128.
            int err = listen(sockfd, 128);
            if (err == -1) {
                    perror("listen");
                    return 1;
            }
            // Sleep
            sleep(3000);
    }
运行上面的代码后，执行ss命令：
    # Display a list of passive tcp sockets, showing
    # as much info as possible.
    ss \
      --info \     .------> Number of connections waiting
      --tcp \      |        to be accepted.
      --listen \   |    .-> Maximum size of the backlog.
      --extended   |    |
            .--------..--------.
    State   | Recv-Q || Send-Q | ...
    LISTEN  | 0      || 128    | ...
            *--------**--------*
在这里，我们之所以使用的是ss，而非/proc/net/TCP，主要是因为后者的最新版本没有提供套接字的backlog方面的信息，而ss却提供了。
实际上，ss之所以能够提供这方面的信息，是因为它使用了不同的API从内核中检索信息，即它没有从procfs中读取信息，而是使用了[netlink](http://man7.org/linux/man-pages/man7/netlink.7.html "netlink")：
    Netlink是一种面向数据报的服务。[...]用于在内核和用户空间进程之间传输信息。
鉴于netlink可以与许多不同内核子系统的通信，因此，ss需要指定它打算与哪个子系统通信——就套接字来说，将选择[sock_diag](http://man7.org/linux/man-pages/man7/sock_diag.7.html "sock_diag")：
    sock_diag netlink子系统提供了一种机制，用于从内核获取有关各种地址族套接字的信息。
         该子系统可用于获取各个套接字的信息或请求套接字列表。
更具体地说，允许我们收集backlog信息的是UDIAG_SHOW_RQLEN标志：
    UDIAG_SHOW_RQLEN
           ...
           udiag_rqueue
                  For listening sockets: the number of pending
                  connections. [ ... ] 
           udiag_wqueue
                  For listening sockets: the backlog length which
                  equals to the value passed as the second argu‐
                  ment to listen(2). [...]
现在，再次运行上一节中的代码，我们可以看到，这里的限制确实视每个命名空间而定。
好了，我们已经介绍了这个backlog队列的大小问题，但是，它是如何初始化的呢？
**ipv4协议族中listen函数的内部运行机制**
* * *
利用sysctl值（SOMAXCONN）限制backlog大小之后，下一步是将侦听任务交给协议族的相关函数（[inet_listen](https://elixir.bootlin.com/linux/v4.15/source/net/ipv4/af_inet.c#L194
"inet_listen")）来完成。
这一过程，具体如下图所示。
为了提高可读性，这里已经对[TCP Fast Open](https://en.wikipedia.org/wiki/TCP_Fast_Open "TCP
Fast
Open")的代码进行了相应的处理，下面是[inet_listen](https://elixir.bootlin.com/linux/v4.15/source/net/ipv4/af_inet.c#L194
"inet_listen")函数的实现代码：
    int
    inet_listen(struct socket* sock, int backlog)
    {
        struct sock*  sk = sock->sk;
        unsigned char old_state;
        int           err, tcp_fastopen;
        // Ensure that we have a fresh socket that has
        // not been put into `LISTEN` state before, and
        // is not connected.
        //
        // Also, ensure that it's of the TCP type (otherwise