To formally define the notion, we introduce a distinguishing game, denoted as \( \text{FIN}_{b}^{M(\nu), I(\nu), I'(\nu), A(\eta)} \), where an adversary \( A \) tries to distinguish between interacting with the real implementation and an alternative implementation that is oblivious with respect to all forgetful arguments. An implementation is considered forgetful if there exists an oblivious implementation such that no adversary can succeed in this task. Due to space constraints, the formal definition of FIN is provided in the Appendix.

**Definition 4 (Forgetful Implementation)**: An implementation \( I = (M, [[\cdot]], \text{len}, \text{open}, \text{valid}) \) is a forgetful implementation of a forgetful symbolic model \( M \) if there exists an oblivious implementation \( I' = (M', [[\cdot]], \text{len}, \text{open}, \text{valid}) \) such that for all parametrized transparent symbolic models \( M_{\text{tran}}(\nu) \) and for all parametrized transparent implementations \( I_{\text{tran}}(\nu) \) of \( M_{\text{tran}}(\nu) \) compatible with \( (M, I) \), the following holds:
\[ \left| \Pr[\text{FIN}_{0}^{M \cup M_{\text{tran}}(\nu), I \cup I_{\text{tran}}(\nu), I' \cup I_{\text{tran}}(\nu), A(\eta)}] - \Pr[\text{FIN}_{1}^{M \cup M_{\text{tran}}(\nu), I \cup I_{\text{tran}}(\nu), I' \cup I_{\text{tran}}(\nu), A(\eta)}] \right| \]
is negligible for every probabilistic polynomial-time (p.p.t.) adversary \( A \).

The intuition that encryption schemes are forgetful with respect to their plaintexts is captured by the following lemma. Consider the forgetful symbolic model \( M_{\text{PKE}} \) as the symbolic model from Section 7.4, where we mark the message \( m \) for honest encryptions \( \text{enc}_h(e_k, m) \) as forgetful.

**Lemma 1**: The implementation \( I_{\text{PKE}} \) from Section 7.4 is a forgetful implementation of \( M_{\text{PKE}} \).

**Sending Keys Around**: To consider the case when symmetric keys are sent encrypted, we introduce an extension of the model for symmetric key encryption from Section 7.2. The extension allows the validity predicate, which controls the valid queries by the adversary, to depend on a signature \( \Sigma \) containing functions with forgetful positions. The new validity predicate, denoted as \( \text{valid}_{\text{SKE}}[\Sigma] \), permits standard key generation for symmetric encryption (with the same restrictions as in Section 7.2) and also allows generate requests that include occurrences of symmetric keys under functions from \( \Sigma \), provided these occurrences are on forgetful positions.

The composition theorem we prove in this case states that any deduction sound implementation of \( \Sigma \) that is forgetful can be extended with symmetric key encryption. The added value over the results in Section 7.2 is that the validity predicate is more relaxed, allowing keys to occur in non-key positions. We prove the following theorem:

**Theorem 7**: Let \( M \) be a forgetful symbolic model and \( I \) be a forgetful deduction sound implementation of \( M \). Let \( \Sigma \) be the signature of \( M \), and let \( \text{valid}_{\text{SKE}}[\Sigma] \) be the validity predicate for \( I_{\text{SKE}} \). If \( (M_{\text{SKE}}, I_{\text{SKE}}) \) and \( (M, I) \) are compatible and the valid predicate of \( I \) does not depend on function symbols from \( \Sigma_{\text{SKE}} \), then \( I \cup I_{\text{SKE}} \) is a deduction sound implementation of \( M \cup M_{\text{SKE}} \).

As an application of Theorem 7, since the implementation for public key encryption \( I_{\text{PKE}} \) from Section 7.4 is a forgetful deduction sound implementation for the forgetful symbolic model \( M_{\text{PKE}} \) (by Lemma 1), \( (M_{\text{PKE}}, I_{\text{PKE}}) \) can be composed with \( (M_{\text{SKE}}, I_{\text{SKE}}) \). The resulting validity predicate allows adversary queries of the form "generate \( \text{enc}_h(ek, k) \)", which intuitively corresponds to sending symmetric keys encrypted under asymmetric keys in a protocol.

Next, we show that the composition of a forgetful deduction sound implementation with a secret-key encryption preserves forgetfulness (Theorem 8). Let \( M_{\text{SKE}} \) be the forgetful symbolic model based on \( M_{\text{SKE}} \) when we mark the message \( m \) for honestly generated encryptions under honest keys \( \text{enc}_h(k, m) \) as a forgetful position, and let \( I_{\text{SKE}}[\Sigma] \) be an implementation of \( M_{\text{SKE}} \). Then the following holds:

**Theorem 8**: Let \( M \) be a forgetful symbolic model and \( I \) be a forgetful deduction sound implementation of \( M \). Let \( \Sigma \) be the signature of \( M \) and \( \text{valid}_{\text{SKE}}[\Sigma] \) be the predicate for \( (M_{\text{SKE}}, I_{\text{SKE}}) \). If \( (M_{\text{SKE}}, I_{\text{SKE}}) \) and \( (M, I) \) are compatible, then \( I \cup I_{\text{SKE}} \) is a forgetful implementation of \( M \cup M_{\text{SKE}} \).

Since Theorems 7 and 8 hold for the particular case when \( (M, I) = (M_{\text{SKE}}, I_{\text{SKE}}) \), by successive applications, we obtain a framework in which we can incrementally include multiple encryption schemes. In the resulting framework, symmetric keys can be encrypted under other symmetric keys in a hierarchical fashion, with the hierarchy imposed by the order in which schemes are added (the keys of the latter can be encrypted under the keys of the former, but not vice versa).

A related important observation is that it seems difficult to consider more flexible predicates that allow for the occurrence of keys on arbitrary forgetful positions. The reason is that if we do not make the predicate for the symmetric encryption scheme depend on the signature of the model to which we add symmetric encryption, it would be impossible to detect the occurrence of encryption cycles. For instance, assume that \( \Sigma \) contains a function symbol \( f \) with a forgetful second position. Do the terms \( f(\text{enc}_h(k, t)) \) and \( \text{enc}_h(t, k) \) contain a key cycle? We cannot tell without knowing the implementation of \( f \) and \( t \).

**Acknowledgements**: The research leading to these results has received funding from the European Research Council under the European Union’s Seventh Framework Programme (FP7/2007-2013) / ERC grant agreement number 258865 (ERC ProSecure project). This work was additionally supported in part by ERC Advanced Grant ERC-2010-AdG-267188-CRIPTO. Florian Böhl was supported by MWK grant “MoSeS”.

**References**:
[1] M. Abadi and P. Rogaway. Reconciling two views of cryptography (the computational soundness of formal encryption). In Proc. 1st IFIP International Conference on Theoretical Computer Science (IFIP–TCS’00), volume 1872 of LNCS, pages 3–22, 2000.
[2] M. Backes and B. Pfitzmann. Symmetric encryption in a simulatable Dolev-Yao style cryptographic library. In Proc. 17th IEEE Computer Science Foundations Workshop (CSFW’04), pages 204–218, 2004.
[3] M. Backes, B. Pfitzmann, and M. Waidner. A composable cryptographic library with nested operations (extended abstract). In Proc. of 10th ACM Conference on Computer and Communications Security (CCS’05), pages 220 – 230, 2003.
[4] M. Backes, B. Pfitzmann, and M. Waidner. Symmetric authentication within simulatable cryptographic library. In Proc. 8th European Symposium on Research in Computer Security (ESORICS’03), Lecture Notes in Computer Science, pages 271–290, 2003.
[5] M. Bellare, O. Goldreich, and A. Mityagin. The power of verification queries in message authentication and authenticated encryption. IACR Cryptology ePrint Archive, 2004:309, 2004.
[6] M. Bellare and C. Namprempre. Authenticated encryption: Relations among notions and analysis of the generic composition paradigm. J. Cryptology, 21(4):469–491, 2008.
[7] M. Bellare and P. Rogaway. Random oracles are practical: A paradigm for designing efficient protocols. In D. E. Denning, R. Pyle, R. Ganesan, R. S. Sandhu, and V. Ashby, editors, ACM Conference on Computer and Communications Security, pages 62–73. ACM, 1993.
[8] F. Böhl, V. Cortier, and B. Warinschi. Deduction soundness: Prove one, get five for free. Cryptology ePrint Archive, Report 2013/457, 2013. Full version of this paper. http://eprint.iacr.org/.
[9] H. Comon-Lundh and V. Cortier. Computational soundness of observational equivalence. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS’08), Alexandria, Virginia, USA, Oct. 2008. ACM Press.
[10] V. Cortier, S. Kremer, R. Küsters, and B. Warinschi. Computationally sound symbolic secrecy in the presence of hash functions. In Proceedings of the 26th Conference on Fundations of Software Technology and Theoretical Computer Science (FSTTCS’06), volume 4337 of LNCS, pages 176–187, Kolkata, India, 2006. Springer.
[11] V. Cortier, S. Kremer, and B. Warinschi. A survey of symbolic methods in computational analysis of cryptographic systems. J. Autom. Reasoning, 46(3-4):225–259, 2011.
[12] V. Cortier and B. Warinschi. Computationally sound, automated proofs for security protocols. In European Symposium on Programming (ESOP’05), volume 3444 of LNCS, pages 157–171, Edinburgh, UK, 2005. Springer.
[13] V. Cortier and B. Warinschi. A composable computational soundness notion. In 18th ACM Conference on Computer and Communications Security (CCS’11), pages 63–74, Chicago, USA, October 2011. ACM.
[14] A. Datta, A. Derek, J. C. Mitchell, V. Shmatikov, and M. Turuani. Probabilistic Polynomial-time Semantics for a Protocol Security Logic. In Proc. of 32nd International Colloquium on Automata, Languages and Programming, ICALP, volume 3580 of LNCS, pages 16–29. Springer, 2005. Lisboa, Portugal.
[15] Y. Dodis, S. Goldwasser, Y. T. Kalai, C. Peikert, and V. Vaikuntanathan. Public-key encryption schemes with auxiliary inputs. In D. Micciancio, editor, TCC, volume 5978 of Lecture Notes in Computer Science, pages 361–381. Springer, 2010.
[16] F. D. Garcia and P. van Rossum. Sound and complete computational interpretation of symbolic hashes in the standard model. Theoretical Computer Science, 394:112–133, 2008.
[17] R. Janvier, Y. Lakhnech, and L. Mazaré. Completing the picture: Soundness of formal encryption in the presence of active adversaries. In European Symposium on Programming (ESOP’05), volume 3444 of LNCS, pages 172–185. Springer, 2005.
[18] M. Naor and G. Segev. Public-key cryptosystems resilient to key leakage. SIAM J. Comput., 41(4):772–814, 2012.
[19] C. Rackoff and D. R. Simon. Non-interactive zero-knowledge proof of knowledge and chosen ciphertext attack. In J. Feigenbaum, editor, CRYPTO, volume 576 of Lecture Notes in Computer Science, pages 433–444. Springer, 1991.

**Appendix**:
- **Open Function for Hash Functions**:
  ```plaintext
  openHASH(c, L)
  if c ∈ [[THASH]] ∩ dom(L) then
    return (c, L(c))
  else if c = (cid:14)h, τHASH(cid:15) then
    return (c, L(c))
  else
    return (c, gl(c)τHASH)
  ```

- **Open Function for Secret Key Encryption**:
  ```plaintext
  openSKE(c, L)
  if c ∈ [[TSKE]] ∩ dom(L) then
    return (c, L(c))
  else if c = (cid:14)k, τ kx SKE(cid:15) then
    return (c, gl(c)τ kx SKE)
  else if c = (cid:14)c SKE (cid:2) for each (ˆk, k h x ()) ∈ L do
    parse ˆk as (cid:14)k, τ kx SKE
    let m := SKE.Dec(k, c SKE (cid:2))
    if m (cid:8)= ⊥ then
      return (c, E l(c)(ˆk, m))
    else
      return (c, gl(c)τ ciphertext SKE)
  else
    return (c, gl(c)(cid:3))
  ```

- **Generate Function for Oblivious Implementation**:
  ```plaintext
  generateFIN M,R(t, L):
  if for some c ∈ dom(L) we have L[[c]] = t then
    return c
  else
    for i ∈ {1, n} do
      if i is a forgetful argument then
        let ci := len(ti)
        let ai := ti
      else
        let (ci, L) := generate M,R(ti, L)
        let ai := ci
      let r := R(t)
      let c := (M f )(c1, . . . , cn; r)
      let L(c) := f l(a1, . . . , an)) (l ∈ labelsH)
      return (c, L)
  ```

- **Indistinguishability Game for Forgetful Implementations**:
  ```plaintext
  FINbM(ν),I(ν),I'(ν),A(η):
  let S := ∅
  let L := ∅
  let T := ∅
  R ← {0, 1}∗
  (set of requested terms)
  (library)
  (trace of queries)
  (random tape)
  if b = 0 then
    let generate := generateFIN M ,R
  else
    let generate := generateM,R
  Receive parameter ν from A
  on request “init T, H” do
    add “init T” to T
    if valid(T) then
      let S := S ∪ T
      let C := ∅
      for each t ∈ T do
        let (c, L) := generate(t, L)
        let C := C ∪ {c}
      send C to A
    else
      return 0 (A is invalid)
  on request “sgenerate t” do
    if valid(T+“sgenerate t”) then
      let (c, L) := generate(t, L)
      send c to A
    else
      return 0 (A is invalid)
  on request “parse c” do
    let (t, L) := parse(c, L)
    if S (cid:10)D t then
      send t to A
      return 1 (A produced non-Dolev-Yao term)
    else
      return 0 (A is valid)
  on request “guess b” do
    if b = b then
      return 1 (A wins)
    else
      return 0 (A loses)
  ```
This optimized text provides a clearer and more professional presentation of the concepts and definitions, with improved readability and structure.