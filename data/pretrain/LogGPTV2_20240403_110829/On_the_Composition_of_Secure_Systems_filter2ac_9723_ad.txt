McCullough’s  definition  derives  from  the  work  on  modeling  concurrency  of  Hoare
[Hoare85].  We will define a discrete event system as follows:
Definition 3.3: Event Systems.
An event trace system is a 4-tuple:
S = 
where
E is the set of events
I, the input events, I ˝
 E
O, the output events, O ˝
T ˝
 is the set of traces
 E*
 E  and I ˙
 O = ˘
The set of events corresponds to the primitive actions done to or by the  system.
The set of traces of an event system must satisfy the following property.  It must always
be possible for the system to accept an input event.  This condition is called input totality
- 16 -
L
[McCullough87a] [Johnson & Thayer88].  This modeling abstraction simplifies the proof
of the theorems.  The need for input totality is examined in section 5.3.2.
In this work we draw no inference from the likelihood that certain members of T
are more probable than others; we are interested only in possible traces.  The definition of
an  event  system  does  not  include  a  means  to  generate  the  set  T.    In  this  work  it  is  not
important  to  have  a  means  to  generate  T.    However,  it  must  be  remembered  that  the
sequences in T do have some order.  There are conditions for when events can occur and
what conditions are effected after the occurrence of an event.
Since  we  have  augmented  all  quantification  with  a  bunch  to  quantify  over  we
define the following:
Definition 3.4: Bunch Notation For the Set of Traces
For a system S the function traces(S) returns a bunch such that exactly all
traces of S are elements of the bunch.
Definition 3.5: Verifying a trace of a System
The predicate traces(t ) is true if and only if t  is a trace of system S.
The  standard  set  operators  of  union,  ¨
,  and  intersection,  ˙
,  will  be  used  to
combine  the  various  sets  of  the  event  trace  system.    The  set  difference  operator,  \,  will
also be used.  The set A\B, for example, contains all elements in the set A that are not in
the set B.
The specification of security properties usually requires a distinction between high
level (trusted) and low-level (untrusted1) users.  We will refer to these categories as HLU
and LLU respectively.  This division is accomplished by dividing E into the disjoint subset
L and H, such that every event is in exactly one of L or H.  These are, respectively, the
sets  of  low-  and  high-level  events.    Assuming  two  comparable  levels  simplifies  the
presentation of  the  results  without  altering  the  results;  the generalization  to  an  arbitrary
lattice of levels is straightforward but notationaly cumbersome.
1 
Or less trusted.
- 17 -
 The following definition gives some notation for commonly used classes of events.
Definition 3.6:  Event Classes.
The following notation will be useful in specifying security properties:
= H ˙
HI
LI  = L ˙
HO = H ˙
LO = L ˙
high level input events,
low level input events,
high level output events and
low level output events.
 I 
 I
 O
 O
Throughout  this  document  component  and  system  will  be  used  interchangeably.
The following convention will be used when discussing composition.  Components will be
interconnected to yield systems.  It is equally valid to interconnect systems to yield larger
systems.    However,  we  feel  that  by  explicitly  referring  to  the  sub  parts  of  a  system  as
components emphasizes that they are part of a larger system.
3.4.  Composition
It is considered good engineering practice to build large and complex systems from
smaller  independently  verified  components.    This  leads  to  cheaper  and  better  designed
systems.  Figure 3.2 demonstrates a model of a system consisting of two CPUs and a bus
arbitrator  controlling  access  to  shared  memory.    It  is  easier  for  each  component  to  be
independently designed and verified then interconnected, rather than attempting to design
it as one monolithic system.
- 18 -
CPU 1
CPU 2
Grant
Request
Bus Arbiter
Memory
Write to Bus
Read from Bus
Read from Bus
Write to Bus
Read from Memory
Write to Memory
Figure 3.2: An Example of a Composed System.
An example of how components are composed to form a complex system.
This  system  is  modeling  the  interactions  between  two  CPU’s  and  a  bus
arbiter to access shared memory.
The  definition  of  an  event  system  presented  above  does  not  require  E  =  I  ¨
  O.
The  events  E ˙
These events arise in one of two ways.  The system designer could explicitly use such an
  O)  are  internal  events.  That  is,  neither  input  nor  output  events.
 (I  ¨
event  for  some  internal  purpose  or  through  the  interconnection  of  components  (see
below).  Since the users of a component are only interested in the external behaviour of
the  component  we  assume  internal  events  are  caused  by  the  interconnection  of
components.    To  simplify  the  identification  of  internal  events  we  will  use  the  following
notation:
Definition 3.7: Communication Events.
The  set  of 
interconnection  of 
C=(O1˙ 
I1)
(O2 ˙
I2)¨
in  an
is  defined  as
internal  events 
(communication  events)  C 
two 
systems  S1  and  S2 
If  the  system  designer  wants  to  be  able  to  specify  internal  events  that  are  not
communication events  then  another  class  of  events  can  be  added  to  the  definition  of  an
event  system.    Extending  the  definition  of  an  event  system  to  include  another  class  of
events has no effect on any of the results presented in this work.
- 19 -
start_clock
Component 1
clock_tick
clock_tick
start_clock
Component 1
Component 2
value_reached
count
Component 2
value_reached
(a)
(b)
Figure 3.3:
Interconnecting Components
(a) Two components that will be interconnected.  (b) the input event of the
second component is renamed which indicates that the output of the first is
to be connected to it.
The composition of two components can be thought of as directing output events
from  one  component  to  become  input  events  at  the  other.    For  example,  Figure  3.3(a)
demonstrates  two  components.    Component  1  is  a  clock  component  that  produces
clock_tick  events  once  a  second.    Component  2  is  a  counter  that  produces  a
value_reached event after receiving ten inputs.  If a system designer wanted a component
that  caused  something  to  happen  every  10  seconds,  he  could  interconnect  these  two
components  by  joining  the  output  of  the  clock  component  to  the  input  of  the  counter
(Figure  3.3(b)).    This  combined  system  accomplishes  the  desired  behaviour.  Examining
how the above composition accomplished the desired behaviour will be used to motivate
our composition operation.
Notice that the communication event (clock_tick) is an output of component 1 and
an input to component 2.  This differs from Figure 3.3(a) where clock_tick was only an
output of component 1 while component 2’s input was called  count.  Therefore, the first
step in any composition is to rename the events that will be connected to have the same
name.
After this renaming has occurred the events of the composed system are a union of
the events of each individual component.  Also, the inputs to the system are all the inputs
to  each  component  except  those  connected  to  the  outputs  of  the  other  component.
Similarly,  for  the  output  events.    The  only  remaining  aspect  of  the  event  system  to
consider,  are  the  traces  of  the  system.    Clearly,  a  trace  of  the  system  restricted  to  the
events of a component must be a trace of that component.  We have considered all effects
- 20 -
of  composition  on  an  event  system  and  can  now  define  the  composition  of  two
components.    Before  we  present  the  definition  we  will  present  some  additional
requirements that simplify the notation.
To simplify the notation and presentation of the theorems some requirements are
required  on  the  interconnection  of  components.    The  only  valid  connection  is  from  an
output of one component to the input of another.  To achieve another type of connection
the  event  may  be  routed  through  a  splitter  or  a  merger  component.    Figure  3.4
demonstrates these components.  If a component contains internal event these events may
not be used in further interconnections.  This requirement makes sense because in a real
system only the externally visible behaviour is known to the designer.
in
Out1
Out2
Out3
In1
In2
In3
Out
Figure 3.4: Splitting or Merging Event Sequences
(a)
(b)
(a)  The  occurrence  of  the  in  event  causes  three  output  events  to  occur.
These events can be used in further connections to simulate connecting the
in event to three components.  (b)  After all three in events have occurred
an out event is emitted.  This component can be used to merge events.
In  the  definition  of  composition  we  assume  that  the  event  renaming  mentioned
above has already been done.
Definition 3.8: Composition of Components
Given S1= and S2= that satisfy
I1 ˙
O1 ˙
 O1)) ˙
 O2)) ˙
 I2 = ˘
 O2 = ˘
 E2 = ˘
 E1 = ˘
(E1 \ ( I1 ¨
(E2 \ ( I2 ¨
then  the  compostion  of  S1  and  S2  produces  a  new  component
S= such that:
E = E1 ¨  E2
I =  (I1 \ O2) ¨
 (I2 \ O1)
- 21 -
O =  (O1 \ I2) ¨
and T = { a˛ E* such that a|E1˛ T1 (cid:217)  a|E2 ˛ T2}
 (O2 \ I1)
The  definition  of  composition  implies  that  the  outputs  from  one  component
immediately become inputs at the other component.  It can be argued that in real systems
there always exists some propagation delay and hence our requirement is too strong.  It
would seem that a better approach would be to allow some time between the occurrence
of an output event and its receipt as an input at the other component.
This analysis, though correct, is overly simplistic.  The difference between the two
is  better  characterized  as  synchronized  versus  non-synchronized  communication.    An
example of synchronized communication might occur in the Request event in Figure  3.2
(page 19).  In this case it would not be unrealistic that when the CPU generates this event
it  immediately  appears  at  the  bus  arbiter.    This  exchange  happens  so  quickly  it  can  be
though of as an atomic event.  The  Write_to_Bus event, however, is a good example of
where  non-synchronized  behaviour  is  desirable.    In  this  case  it  is  not  unreasonable  to
assume 
that 
the  Write_to_Bus  and 
the  Write_to_Memory  event  do  not  occur
simultaneously.  In this case other system events may occur between the occurrence of the
two events.
Section  5.5  will  examine  the  effects  of  synchronized  communication  on
composability.    It  will  be  shown  that  the  type  of  synchronization  is  a  factor  when  the
composition  of  two  components  fails  to  preserve  a  property.    In  section  5.5.3  we
introduce a delay component that can be used to model non-synchronized communication.
We defer the introduction until then because the delay component has implications on the
composability of properties.
Typical research on composability has proceeded on the basis that a system can be
constructed two components at a time.  First, two components are interconnected.  These
are then considered one new component and another component is added.  This procedure
is repeated until the desired system has been constructed.  In this work, however, we will
show that the structure of the system is an important consideration for composition.  We
therefore require a way of expressing this structure.  This will be done through the use of
a system graph.
- 22 -
Definition 3.9: System Graph.
For a system composed of k components construct the following digraph
G=.  Let the set of vertices V be the set of numbers 1 to k.  An
edge (i,j)˛ D iff there exists an a
Ij.  The above
graph is called the system graph.
˛ Oi and a
 such that a
Figure  3.5(b)  is  an  example  of  a  system  graph  for  the  system  in  Figure  3.5(a).
Observe that the system graph captures the possible flow of events.  The system graph has
a cycle if and only if the system involves feedback.
4
4
1
1
2
3
(a)
2
3
(b)
Figure 3.5: An Example of a System Graph
Figure (b) is the system graph for the system in part (a).
Definition 3.10: Feedback Path.
The feedback path from component i is a path that starts at vertex i and
ends  at  vertex  i.    It  is  possible  that  a  component  is  not  part  of  any
feedback path.
Definition 3.11: Number of Components in the Feedback Path.
The number of components in the feedback path is defined as the smallest
number of vertices visited in the path that starts at vertex i and ends at
vertex i.
- 23 -
˛
For  example,  in  Figure  3.5(b)  it  can  be  seen  that  the  path  1-2-4-1  is  a  feedback
path and the number of components in that path is 3.
3.5.  Summary
In  this  chapter  we  presented  the  event  system  formalism  that  will  be  used
throughout this work.  In the next chapter we introduce security properties.
- 24 -
4.  Security Properties
The vanity of being known to be trusted with a secret is generally one
of the chief motives to disclose it.
Dr. Samuel Johnson (1709-1784)
English author, lexicographer
4.1. 