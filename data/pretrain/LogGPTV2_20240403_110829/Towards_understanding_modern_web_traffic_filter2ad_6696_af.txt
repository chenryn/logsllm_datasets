d
n
u
d
e
R
f
o
s
n
g
i
r
i
O
 100
 75
 50
 25
 0
all
ht
ja
v
m
l
x
c
i
m
s
s
o
a
a
ctet
g
e
u
vid
dio
e
o
a
m
l
s
c
ript
inter-URL
aliasing
intra-URL
object-hit
ht
ja
v
m
l
x
c
i
m
s
s
o
a
a
ctet
g
e
u
vid
dio
e
o
a
m
l
s
c
ript
(a) US
(b) BR
Figure 17: Origins of redundancy with 128-bytes chunks: Most of the additional savings from the content-based caching approaches
come from partial content overlap – the redundancy across different versions of an object as well as redundancy across different
objects.
MRC
128-B
1-KB
8-KB
64-KB
HTTP
)
%
(
e
t
a
R
t
i
H
e
t
y
B
 50
 40
 30
 20
 10
 0
1
0
0
2
0
0
5
0
0
1
2
5
G
G
G
1
0
2
0
5
0
1
0
G
G
G
0
)
%
(
e
t
a
R
t
i
H
e
t
y
B
 50
 40
 30
 20
 10
 0
I
N
F
2
0
0
1
0
0
2
0
0
MRC
128-B
1-KB
8-KB
64-KB
HTTP
5
0
0
1
2
5
G
G
G
1
0
2
0
5
0
1
0
G
G
G
0
2
0
0
I
N
F
M
M
M
G
G
M
M
M
G
G
Cache Storage Size (Byte)
(a) US
Cache Storage Size (Byte)
(b) CN
Figure 18: Cache size vs. byte hit rate: A large cache with MRC provides 2x the byte hit rate than the object-based caching.
Request (K)
265 (3.1%)
377 (3.1%)
38 (1.8%)
85 (2.1%)
Byte (GB) GB if fully downloaded
712 (83.8%)
61 (30.8%)
444 (69.9%)
27 (12.4%)
10 (23.6%)
258 (88.8%)
216 (79.3%)
22 (28.3%)
US
CN
FR
BR
Table 3: Aborted transfers
our simulation. Note that one might want to reduce the storage
requirement by storing only unique content and metadata such as
offset for different chunk sizes. However, it complicates the cache
index management and increases memory pressure, as pointed out
by Ihm et al. [28].
5.6 Aborted Transfers
In Table 3, we ﬁnd a small number of requests (1.8-3.1%) are
aborted before they are fully downloaded, but their volume is quite
signiﬁcant. These events occur when users cancel ongoing trans-
fers by clicking the stop button of the browser, or move to another
Web page. We detect the aborted transfer if the downloaded length
is less than the given content-length in the response header. The to-
tal volume of the downloaded bytes until aborted is 12.4-30.8%. If
they were fully downloaded, it would take 69.9-88.8% of the entire
trafﬁc. The investigation of the content type distribution of these
transfers reveals that most of the bytes are from the video transfers,
presumably previewing the ﬁrst part of the video clips. In particu-
lar, Flash video comprises roughly 40-70% of all aborted transfers,
and we also observe users canceling ﬁle downloads.
The large volume of aborted transfers could negatively impact
the performance of object-based caching proxies. Such systems
have roughly four options to deal with the aborted transfers. The
ﬁrst option is to discard and do not cache them, but it just wastes the
bandwidth and reduces cache hit rate. The second option is to fully
download and cache them (of course, for those cacheable objects
only), but it consumes signiﬁcant bandwidth for downloading ob-
jects that might not be referenced in the future. The third option lies
in between the ﬁrst and second, and decides whether to discard or
fully download depending on the number of bytes remaining [58].
The ﬁnal option is to cache the downloaded portion and do a range
request on a cache hit, but it is effective only for cacheable objects.
In comparison, content-based caching could cache data from only
the downloaded content without any conﬁguration, thus any data
received over network, even uncacheable, is useful. As evidence,
content-based caching’s byte hit rate of video trafﬁc is much higher
than object- based caching’s byte hit rate in Figure 15.
6. RELATED WORK
Our work is related to previous work in the areas of Internet mon-
itoring, trafﬁc characterization, and caching behavior. We describe
our relation to this previous work below.
Internet Monitoring There is a great deal of previous work ana-
lyzing trafﬁc behavior. For example, Akamai analyzes data gath-
ered from its global server network, and reports the Internet pen-
etration rate and connection speeds for each country [10]. Also,
ipoque examines trafﬁc from its customer ISPs and universities [29],
and they ﬁnd the increase of Web trafﬁc as well as the decrease of
P2P trafﬁc due to the popularity of ﬁle hosting, social networking,
and video streaming sites. Several other studies commonly observe
the same trend of increasing Web and video trafﬁc [21, 34, 36].
While all of these previous studies primarily focus on the anal-
306ysis of overall usage of Internet trafﬁc, our focus is to investigate
various aspects of Web trafﬁc changes in great detail. A few other
studies also have conducted long-term characterizations of Web
trafﬁc [14, 26], but their analyses on the data set from speciﬁc or-
ganizations, such as universities or research institutes, are tied to
their host institutes.
Instead, our large-scale data set spanning a
multi-year period covers a world-wide user population.
Web Trafﬁc Characterization A very widely used Web trafﬁc
model was ﬁrst proposed by Mah, in which he introduces the idle
time based page detection algorithm [35]. Since then, this model
has been widely adopted by many researchers for characterizing
Web trafﬁc [9, 56]. Later, Choi and Limb developed a method that
simply regards every HTML object as a Web page [17]. More re-
cently, several studies have investigated a small number of popular
Ajax Web applications such as maps and Web mails, and streaming
services [16, 53].
However, all of the previous studies have limitations in that they
either assume the simple/static Web pages ignoring client-side in-
teractions, or rely on application/site-speciﬁc knowledge. Instead,
our page detection algorithm is able to identify initial pages and
client-side interactions, and also does not require application/site-
speciﬁc knowledge. Furthermore, we demonstrate that our algo-
rithm is more accurate than the previous approaches via careful
validation.
A contemporary work by Butkiewicz et al. [12] investigates the
complexity of Web sites with browser-based active measurements
from four vantage points. While their use of HTTP archive record
(HAR) format [25] allows a precise detection of page load events,
their data set consists of only the top-level pages of randomly cho-
sen 2,000 Web sites, also ignoring client-side interactions. Analyz-
ing real users’ browsing behaviors with detailed HAR logs would
be an interesting future work.
Redundancy and Caching Traditional object-level Web caching
works by storing previously seen objects and serving them locally
for future requests. However, the beneﬁt of object-based caching
is limited only to the cacheable objects such as static text and im-
age ﬁles – the typical cache hit rates reported in the previous work
range from 35% to 50% in much earlier work, and have dropped
over time [3, 13, 24, 30, 40, 63]. The byte hit rate is even worse as a
cache hit is biased towards smaller popular objects. Most recently,
Ager et al. examined potential for HTTP caching in various sce-
narios by controlling the strictness of object cacheability [3]. More
advanced object-based caching techniques include delta-encoding
that reduces trafﬁc for object updates [39], and duplicate transfer
detection (DTD) that avoids downloading of aliased objects [40].
Spring and Wetherall further extend object-based caching to sub-
packet granularity, and develop a protocol independent content-
based caching technique [57]. Since then, it has been adapted in
many applications – network ﬁle systems [7, 42], WAN acceler-
ation [28, 50], Web caching [43, 49], and storage systems [20].
Recently, Anand et al. analyzed university and enterprise network
traces, and show that 15-60% of the entire trafﬁc is redundant,
while the redundancy of Web trafﬁc is only 16-32% [6].
While both the object-based and content-based caching schemes
have been studied heavily, the focus of our work is to perform a
head-to-head comparison between them on real Web trafﬁc. Our
analysis result shows that content-based caching achieves byte hit
rates of 42-51%, almost twice that of object-based caching’s byte
hit rates. Furthermore, we evaluate the effectiveness of MRC [28],
and ﬁnd increasing cache storage size is highly beneﬁcial.
In-
deed, the redundancy we ﬁnd (42-51%) is much higher than what
Anand et al. report (16-32%), and it is partly because we assume a
large disk-based cache while they use in-memory cache only.
7. CONCLUSIONS
For a better understanding of modern Web trafﬁc, we analyze
ﬁve years of real Web trafﬁc from a globally distributed proxy
system that captures the browsing behavior of over 70,000 daily
users from 187 countries. Among our major ﬁndings is that Flash
video and Ajax trafﬁc is consistently increasing, and search en-
gine/analytics sites are tracking an increasingly large fraction of
users. Our StreamStructure algorithm reveals that almost half the
trafﬁc now occurs not as a result of initial page loads, but as a result
of client-side interactions after the initial load. Also, while pages
have grown in terms of both the number of objects and size, page
loading latency has dropped due to the increased number of concur-
rent connections and improved caching behavior. Finally, multi-
resolution chunking (MRC) with large cache storage provides al-
most twice the byte hit rate of traditional object-based caching, and
it is also effective for aborted transfers. Most of the additional sav-
ings of content-based caching are due to the partial content over-
laps.
8. ACKNOWLEDGMENTS
We would like to thank our shepherd, Steve Uhlig, as well as the
anonymous IMC reviewers. We are grateful to KyoungSoo Park for
keeping CoDeeN running all these years and for providing us with
the logs. We also thank Eric Keller, Wonho Kim, and Siddhartha
Sen for their helpful comments on an earlier version of this paper.
This research was partially supported by the NSF Awards CNS-
0615237 and CNS-0916204.
References
[1] Adobe HTTP Dynamic Streaming. http://www.adobe.com/
products/httpdynamicstreaming/.
[2] B. Ager, W. Mühlbauer, G. Smaragdakis, and S. Uhlig. Comparing
DNS resolvers in the wild. In Proc. Internet Measurement Conference,
Melbourne, Australia, Nov. 2010.
[3] B. Ager, F. Schneider, J. Kim, and A. Feldmann. Revisiting cacheabil-
In Proc. 13th IEEE Global
ity in times of user generated content.
Internet Symposium, San Diego, CA, Mar. 2010.
[4] AJAX - Connectivity Enhancements in Internet Explorer 8.
http://msdn.microsoft.com/en-us/library/
cc304129(v=vs.85).aspx.
[5] Alexa the Web Information Company.
http://www.alexa.
com/.
[6] A. Anand, C. Muthukrishnan, A. Akella, and R. Ramjee. Redundancy
in network trafﬁc: Findings and implications. In Proc. ACM SIGMET-
RICS, Seattle, WA, June 2009.
[7] S. Annapureddy, M. J. Freedman, and D. Mazières. Shark: Scaling ﬁle
servers via cooperative caching. In Proc. 2nd USENIX NSDI, Boston,
MA, May 2005.
[8] Apple HTTP Live Streaming.
http://developer.apple.
com/resources/http-streaming/.
[9] P. Barford and M. Crovella. Generating Representative Web Work-
loads for Network and Server Performance Evaluation. In Proc. ACM
SIGMETRICS, Madison, WI, June 1998.
[10] D. Belson. Akamai state of the Internet report, q4 2009. SIGOPS
Oper. Syst. Rev., 44(3):27–37, 2010.
[11] L. Breslau, P. Cao, L. Fan, G. Phillips, and S. Shenker. Web caching
and zipf-like distributions: Evidence and implications. In Proc. IEEE
INFOCOM, New York, NY, Mar. 1999.
[12] M. Butkiewicz, H. V. Madhyastha, and V. Sekar. Understanding web-
site complexity: Measurements, metrics, and implications. In Proc.
Internet Measurement Conference, Berlin, Germany, Nov. 2011.
307[13] R. Cáceres, F. Douglis, A. Feldmann, G. Glass, and M. Rabinovich.
Web proxy caching:
In Proc. 1st ACM
Workshop on Internet Server Performance, Madison, WI, June 1998.
[14] T. Callahan, M. Allman, and V. Paxson. A longitudinal view of HTTP
trafﬁc. In Passive & Active Measurement (PAM), Zurich, Switzerland,
Apr. 2010.
the devil is in the details.
[15] M. Casado and M. J. Freedman. Peering through the shroud: the effect
of edge opacity on IP-based client identiﬁcation. In Proc. 4th USENIX
NSDI, Cambridge, MA, Apr. 2007.
[16] M. Cha, H. Kwak, P. Rodriguez, Y.-Y. Ahn, and S. Moon.
I Tube,
You Tube, Everybody Tubes: Analyzing the World’s Largest User
Generated Content Video System. In Proc. ACM SIGCOMM Internet
Measurement Conference, San Diego, CA, USA, Oct. 2007.
[17] H.-K. Choi and J. O. Limb. A behavioral model of Web trafﬁc.
In IEEE International Conference on Network Protocols (ICNP),
Toronto, Canada, Oct. 1999.
[18] D. Crane, E. Pascarello, and D. James. Ajax in Action. Manning
Publications Co., Greenwich, CT, USA, 2005.
[19] Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Speciﬁcation.
http://www.w3.org/TR/CSS2/.
[20] Data Domain. http://www.datadomain.com/.
[21] J. Erman, A. Gerber, M. T. Hajiaghayi, D. Pei, and O. Spatscheck.
In Proc. 18th International World
Network-aware forward caching.
Wide Web Conference, Madrid, Spain, May 2009.
[22] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and
T. Berners-Lee. Hyptertext Transfer Protocol – HTTP/1.1. Internet
Engineering Task Force, June 1999. RFC 2616.
[23] Top 7 Firefox Proxy Addons. http://www.techiezine.com/
top-7-firefox-proxy-addons/.
[24] S. Gribble and E. Brewer. System Design Issues for Internet Middle-
ware Services: Deductions from a Large Client Trace. In Proc. 1st
USENIX Symposium on Internet Technologies and Systems (USITS),
Monterey, CA, Dec. 1997.
[25] HTTP Archive Speciﬁcation.
http://groups.google.
com/group/http-archive-specification/web/
har-1-2-spec.
[26] F. Hernandez-Campos, K. Jeffay, and F. Smith. Tracking the evolu-
tion of Web trafﬁc: 1995-2003. In Proc. IEEE/ACM MASCOTS, Oct.
2003.
[27] S. Ihm, K. Park, and V. S. Pai. Towards Understanding Developing
World Trafﬁc. In Proc. 4th ACM Workshop on Networked Systems for
Developing Regions (NSDR), San Francisco, CA, June 2010.
[28] S. Ihm, K. Park, and V. S. Pai. Wide-area Network Acceleration for the
Developing World. In Proc. USENIX Annual Technical Conference,
Boston, MA, June 2010.
[29] ipoque.
Internet
Study
2008/2009.