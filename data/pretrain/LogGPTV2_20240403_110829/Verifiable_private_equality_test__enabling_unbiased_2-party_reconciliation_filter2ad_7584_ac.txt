then computes Yσ and constructs a proof πσ,1 which ensures
that the discrete logarithms of X(cid:48)
σ, Xσ, Yσ with respect to
the used bases are equal to Rσ. Finally, Pσ computes Zσ
and constructs proof πσ,2 which shows that the used rσ,jσ
is equal to the randomness used during the Pedersen com-
mitment. It then sends all values and the proofs to Pσ.
σ
and X(cid:48)
and X(cid:48)
−Rσ·rσ,jσ
−Rσ
by Z
·Rσ·Rσ and X(cid:48)(cid:48)
σ
If all proofs verify, Pσ adds its own blinding Rσ to Xσ.
It then removes the h-part of X Rσ
σ by multiply-
σ
ing X Rσ
. This yields
σ by Y
X(cid:48)
σ
σ = gvσ,jσ
σ and
X(cid:48)(cid:48)
σ contain the respective values to be compared blinded
with both Rσ and Rσ. Thus, equality holds if vσ,jσ equals
vσ,jσ .
3.4 Protocol Correctness
σ = gvσ,jσ ·Rσ·Rσ , i.e., both X(cid:48)
In the following we show that if the zero-knowledge proof
systems are sound, the messages received by Pσ have been
computed correctly and the values X(cid:48)(cid:48)
σ allow the deter-
mining of whether vσ,jσ and vσ,jσ are equal.
σ , X(cid:48)
σ
X
σ · Y
(cid:48)
(cid:48)(cid:48)
σ = X
σ and X(cid:48)
= C Rσ·Rσ
Theorem 1. vσ,jσ = vσ,jσ ⇒ X(cid:48)(cid:48)
Proof. The values X(cid:48)(cid:48)
−Rσ·rσ,jσ
σ = X(cid:48)
σ.
σ yield:
· h
−Rσ·Rσ·rσ,jσ
= gvσ,jσ ·Rσ·Rσ · hrσ,jσ ·Rσ·Rσ · h
−Rσ·Rσ·rσ,jσ
= gvσ,jσ ·Rσ·Rσ
(cid:48)
σ = X Rσ
= gvσ,jσ
= gvσ,jσ
· Z
·Rσ·Rσ · hrσ,jσ
·Rσ·Rσ
−Rσ = C Rσ·Rσ
−Rσ·Rσ·rσ,jσ
−Rσ·Rσ·rσ,jσ
·Rσ·Rσ · h
· h
σ,jσ
σ,jσ
X
σ
σ = X(cid:48)
Theorem 2. Let Γ be the event that X(cid:48)(cid:48)
σ but
vσ,jσ (cid:54)= vσ,jσ . The event Γ occurs with negligible probability.
Proof. Let vσ,jσ (cid:54)= vσ,jσ . Since Rσ and Rσ are chosen
uniformly at random from Z∗
σ are dis-
q . Let |q| = log2 q. Then
tributed uniformly at random in Z∗
the probability of event Γ occurring is prob(Γ) ≈ 2−|q| which
is negligible for suﬃciently large q.
q , both X(cid:48)(cid:48)
σ and X(cid:48)
It should be noted that the probability prob(Γ) remains
negligible even if a polynomial number of comparisons are
carried out.
3.5 Security Proof for VPET
In order to prove our VPET protocol secure, we follow the
ideal-/real-world simulation paradigm which was reviewed in
Section 2.2.1. In the following, we describe the construction
of two ideal-world simulators SIM0 and SIM1, i.e., one sim-
ulator for each party. For the simulation of the comparison
phase there are two choices: σ = 0 or σ = 1. However, ex-
cept for the switched roles, the simulation for both choices is
identical. Therefore, without loss of generality we ﬁx σ = 0.
0 as P1 and
0 (cid:29) SIM0 (cid:29)
acts as ideal world P0 towards a TTP (P ∗
T T P (cid:29) P1). SIM1 interacts with a potentially corrupted
1 as P0 and acts as ideal world P1 towards TTP (P0 (cid:29)
P ∗
T T P (cid:29) SIM1 (cid:29) P ∗
1 ).
3.5.1 Construction of Ideal-World Simulator SIM0
SIM0 interacts with a potentially corrupted P ∗
Commitment Phase.
1. SIM0 receives
(cid:68)(cid:16)
(cid:16)
k0,j0 ,
C0,j0 , α0,j0 , πC0,j0
from P ∗
0 .
(cid:17)(cid:17)(cid:69)
(1)
(2)
2. SIM0 acts as veriﬁer for proofs πC0,j0
If any proof
does not verify, abort. Else, extract (r0,j0 , v0,j0 )
πC0,j0
from the interaction with P ∗
0 .
.
3. SIM0 chooses random C1,j1 , α1,j1 ,
πC1,j1
and sends
k1,j1 ,
C1,j1 , α1,j1 , πC1,j1
(cid:68)(cid:16)
(cid:16)
(cid:17)(cid:17)(cid:69)
simulates proofs
to P ∗
0 .
4. SIM0 interacts with the TTP and commits to the ex-
(commit, (k0,j0 , v0,j0 )) →
tracted inputs (k0,j0 , v0,j0 ):
FV P ET ∀j0.
Comparison Phase for Values v0,j0 and v1,j1.
1. SIM0 interacts with the TTP to perform the compari-
son: out ← (compare, (v0,j0 , k0,j0 , k1,j1 , P0))
• If out = 1, the values compared are equal and
SIM0’s input has to be ﬁxed as follows: Rewind P ∗
0
(using the same random tape) to the point just be-
fore SIM0 sent its commitment vector. SIM0 then
q and ﬁxes C1,j1 = gv0,j0 · hr1,j1 .
chooses r1,j1 ←r Z∗
SIM0 remembers that the value corresponding to
k1,j1 has been ﬁxed and uses it.
• If out = 0, the values compared are not equal and
SIM0 continues using the random dummy input
chosen in step 3 of the commitment phase.
2. SIM0 receives X0 and interacts with P ∗
0 as veriﬁer in
proof π0.
3. If π0 does not verify, abort. Else, extract R0 from the
interaction with P ∗
0 .
4. SIM0 then follows the remainder of the protocol speci-
ﬁcation and ﬁnally outputs ⊥.
Note that rewinding is required at most n1 + 1 times, since
the initial input map requires at most n1 +1 ﬁxes. The simu-
lator therefore runs in expected polynomial time. Since the
distribution of all messages exchanged during the interac-
tion with the simulator is identical to the distribution in the
real protocol, the steps above describe a perfect simulation.
3.5.2 Construction of Ideal-World Simulator SIM1
Commitment Phase.
1. SIM1 chooses random C0,j0 , α0,j0 ,
πC0,j0
and sends
k0,j0 ,
C0,j0 , α0,j0 , πC0,j0
2. SIM1 receives
k1,j1 ,
C1,j1 , α1,j1 , πC1,j1
(cid:68)(cid:16)
(cid:68)(cid:16)
(cid:16)
(cid:16)
simulates proofs
to P ∗
1 .
(cid:17)(cid:17)(cid:69)
(cid:17)(cid:17)(cid:69)
from P ∗
1 .
3. SIM1 acts as veriﬁer for proofs πC1,j1
If any proof
does not verify, abort. Else, extract (r1,j1 , v1,j1 )
πC1,j1
from the interaction with P ∗
1 .
.
4. SIM1 interacts with the TTP and commits to the ex-
(commit, (k1,j1 , v1,j1 )) →
tracted inputs (k1,j1 , v1,j1 ):
FV P ET ∀j1.
Comparison Phase for Values v0,j0 and v1,j1.
1. SIM1 interacts with the TTP to perform the compari-
son: out ← (compare, (v1,j1 , k1,j1 , k0,j0 , P0))
2. Since out = ⊥, P ∗
1 will receive no output and no rewind-
ing is required to ﬁx SIM1’s input.
3. SIM1 picks random R0 ←r Z∗
q , computes X0 according
to the protocol and sends it together with a simulated
proof π0 to P ∗
1 .
4. SIM1 receives X(cid:48)
1, X1, Y1, Z1, π1,1, π1,2.
Since the distribution of all messages exchanged during the
interaction with the simulator is identical to the distribu-
tion in the real protocol, the steps above describe a perfect
simulation.
4. PROS PROTOCOL WITH SECURITY IN
THE MALICIOUS MODEL
In this section we demonstrate how VPET can be used as
a building block to construct higher-level protocols. In par-
ticular, we introduce a new protocol for PROS that exhibits
security in the malicious model.
4.1 Related Work on PROS
In [38], Meyer et al. extend on the concept of PSI by
allowing parties to associate preferences with their set ele-
ments. In the following, such sets will be referred to as or-
dered sets and the position of an element within the ordered
set is its preference or rank. Based on the additional infor-
mation represented by an element’s preference, Meyer et al.
introduced protocols for privacy-preserving reconciliation of
ordered sets (PROS) in the semi-honest model. PROS en-
ables both parties to jointly compute one common set ele-
ment which maximizes the parties’ combined preferences in
a privacy-preserving and unbiased manner. In this context,
unbiasedness means that each party’s preferences are taken
into consideration when computing the result.
PROS protocols can be used in the context of various ap-
plications, including voting, auctions, and scheduling [35].
However, PROS protocols known to date (both in the two-
party and in the multi-party setting) only provide weak se-
curity guarantees, i.e., are secure in the presence of semi-
honest adversaries [38, 39, 44]. While this is suﬃcient in
scenarios where the parties have some degree of trust, ar-
bitrary settings pose the challenge that parties may behave
maliciously.
4.1.1 Preference Order Composition Schemes
In the following we assume party P0 (resp. P1) holding an
ordered set S0 = (cid:104)v0,1, . . . , v0,n(cid:105) (S1 = (cid:104)v1,1, . . . , v1,n(cid:105)) with
|S0| = |S1| = n as its input. The set elements are assumed
to be sorted in decreasing order of the party’s preference.
Given S0 and S1, PROS allows the parties to determine
one common set element such that it maximizes a combined
preference order ≤0,1 under a Preference Order Composition
Scheme (POCS). Meyer et al. introduce two POCS: Sum of
Ranks and Minimum of Ranks [38, 39].
Definition 1. Preference Order Composition Schemes
x ≤0,1 y :⇔ rank0(x)+
Sum of Ranks: ∀x, y ∈ S0∩S1 :
rank1(x) ≤ rank0(y) + rank1(y)
Minimum of Ranks: ∀x, y ∈ S0 ∩ S1 :
min (rank0(x), rank1(x)) ≤ min (rank0(y), rank1(y))
where rank0(x) and rank0(y) (rank1(x) and rank1(y)) cor-
respond to the preference of x and y in set S0 (S1).
x ≤0,1 y :⇔
Given a POCS, the PROS protocols in [38] proceed by
pairwise comparing elements in decreasing order as dictated
by the POCS. Each comparison is carried out using Freed-
man’s PSI protocol [23]. When two elements are found to
be equal, the protocol terminates and both parties learn the
resulting set element.
Notation: To denote a speciﬁc pair of elements
(v0,i, v1,j) to be compared in step k of a speciﬁc POCS C,
we deﬁne a function which returns the corresponding
indices (i, j) for a given step 1 ≤ k ≤ n2:
pair of
(i, j) ← get_pocs_pairC (k). This function allows the de-
vising of PROS protocols independently of a speciﬁc POCS.
Party P0 with Input:
Party P1 with Input:
S0 = (cid:104)v0,1, . . . , v0,n(cid:105)
S1 = (cid:104)v1,1, . . . , v1,n(cid:105)
Commitment to Ordered Input Sets
for all v0,i ∈ S0:
for all v1,i ∈ S1:
(commit, (i, v0,i)) → FVPET