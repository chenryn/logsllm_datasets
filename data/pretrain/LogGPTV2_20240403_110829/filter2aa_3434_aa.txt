Advanced Inter-Process
Desynchronization in SAP’s HTTP
Server
Martin Doyhenard
Onapsis
PI:EMAIL
Abstract
This paper will demonstrate how to leverage two memory corruption vulnerabilities found in
SAP's proprietary HTTP Server, using high level protocol exploitation techniques. Both,
CVE-2022-22536 and CVE-2022-22532, were remotely exploitable and could be used by
unauthenticated attackers to completely compromise any SAP installation on the planet.
By escalating an error in the HTTP request handling process, it was possible to
Desynchronize ICM data buffers and hijack every user’s account with advanced HTTP
Smuggling.
Next, this paper will examine a Use After Free in the shared memory buffers used for
Inter-Process Communication. By exploiting an incorrect deallocation, it was possible to
tamper messages belonging to other TCP connections and take control of all responses
using Cache Poisoning and Response Splitting theory.
Finally, as the affected buffers are also used to contain Out Of Bounds data, a method to
corrupt address pointers and obtain Remote Code Execution will be explained.
The “ICMAD” vulnerabilities were addressed by the US Cybersecurity and Infrastructure
Security Agency as well as CERTs from all over the world, proving the tremendous impact
they had on enterprise security.
Outline
Abstract
1
Outline
2
Introduction
3
ICM Architecture
3
Overview
3
Internal Handlers
4
Memory Pipes
5
MPI Handler
5
MPI Buffers
5
HTTP WorkFlow
6
Step 1: Init/recover Connection
6
Step 2: Receive the Request
7
Step 3: Parse Request Headers
7
Step 4: ICM SubHandlers
8
Step 5: Communicate Response
9
Step 6: Dispatch Response
10
Step 7: Clean MPI Buffers
10
MPI Desynchronization
10
CVE-2022-22536
10
ICM Response Smuggling
11
Browser-Backend Desync
13
MPI Use-After-Free
14
CVE-2022-22532
14
Buffer Hijacking
15
HTTP Message Tampering
16
OOB Buffer Tampering
17
Conclusion
18
Introduction
The SAP Internet Communication Manager (ICM) is one of the most important components
of an SAP NetWeaver Application server, as it allows for the communication of the SAP
system with the outside world (i.e., the Internet). Even though the ICM can understand and
handle different protocols such as P4, IIOP, SMTP, and others, one of its core purposes is to
work as the SAP HTTP(S) server.
This service is always present and exposed by default in an SAP Java stack and is required
to run web applications in SAP ABAP (Web Dynpro) and S/4HANA systems. Additionally, the
SAP ICM is part of the SAP Web Dispatcher, which means that it typically sits between most
SAP application servers and the clients (with the clients potentially being the Internet).
For the purposes of this research, the ICM can be seen as an HTTP Server included and
available in all SAP products.
ICM Architecture
Overview
SAP provides an architecture overview of the Internet Communication Manager architecture.
As most HTTP Servers, the ICM uses multiple threads to handle TCP connections. When a
client opens a new connection with the HTTP port, the Thread Control will assign a new
Worker Thread from the Pool to handle the incoming data.
The ICM is designed to work with different language dependent stacks like Java and ABAP.
For this reason, all business logic, including the engines in charge of processing the
requests, is separated from the HTTP service process. As a result, the ICM and Java/ABAP
need to communicate with each other to exchange requests and responses, as well as
information about the connection.
To support this multi-tier architecture, each connection is assigned a Memory Pipe Handler,
which will be in charge of managing the request/response pipes and the out of bounds
communication between processes.
Internal Handlers
Java and ABAP processes are in charge of receiving client requests and generating
responses based on the business logic. As previously explained, the ICM parses HTTP
messages and forwards this data to the corresponding application.
However, the ICM is also capable of generating responses to specific requests using internal
handler functions coded inside the binary.
Depending on the URI prefix, The local handlers are called in the order described. All these
will work using just the Headers data structure created by the ICM when the request was
parsed.
The list of subhandlers documented by SAP is:
1.
Logging Handler: HttpLogHandler
This handler records HTTP requests.
2.
Authentication Handler: HttpAuthHandler
The authorization check for the requested page is carried out here.
3.
Server Cache Handler: HttpCacheHandler
This handler is used to read from and write to the ICM server cache and works as
follows:
a.
Reads the request
b.
If the requested object is in the cache, it delivers the cache entry to the caller.
c.
If it isn't (access error, cache miss), it passes the request to the next handler.
d.
Stores the entry in the cache before sending the HTTP response to the client
4.
Admin Handler: HttpAdmHandler
The admin handler processes administration requests.
5.
Modification Handler: HttpModHandler
The modification handler can change the http request (header fields, URL values,
and so on).
6.
File Access Handler: HttpFileAccessHandler
This handler returns a file from the file system (suitable for static files as well as
images and HTML pages). The URL prefixes the static file access is to be carried out
for are determined in the i icm/HTTP/file_access_ parameter.
7.
Redirect Handler: HttpRedirectHandler
This handler simply forwards the HTTP request to another HTTP server (HTTP
redirect). The URL prefixes the ICM is to carry out the redirect for are determined in
the icm/HTTP/redirect_ parameter.
8.
ABAP Handler
This handler forwards the request to the AS ABAP and waits for a response. A user
context is created in the work process only if this handler is being used.
9.
Java Handler: HttpJ2EE2Handler
This handler forwards the request to the integrated Application Server Java.
When reversing the ICM binary, it was possible to identify 4 extra sub handlers. As the ICM
is also used to handle HTTP traffic in SAP Web Dispatcher (Web Proxy), it is possible that
these handlers are related to it:
●
HttpPublicHandler
●
HttpFilterHandler
●
HttpTestHandler
Memory Pipes
MPI Handler
As mentioned above, the Internet Communication Manager dispatches HTTP messages to
Worker Processes (Java/ABAP) using Inter-Process Communication. For this, data is written
and read from the shared memory which will be accessible from different processes.
Memory Pipes and MPI Buffers are actually part of what is known as the Fast Channel
Architecture. This is nothing more than a set of data structures that represent the shared
memory as a Queue of MPI Buffers and the associated Pipes (Handlers) pointing at them.
These are all created at ICM startup using shmget and other SHM C functions.
MPI Objects could be seen as the equivalent of an ICM API for Shared Memory handling,
just like the glibc malloc/free API would work to handle Heap memory regions.
To efficiently work with shared memory, each thread is assigned an MPI (Memory Pipe)
handler which will be in charge of allocating and deallocating buffers. This handler must not
be confused with internal handlers or with classic IPC pipes. The name only indicates the
proprietary API used by SAP.
MPI Buffers
MPI Buffers are fixed size (2^16 Bytes) shared memory regions which can contain either
control data or HTTP messages.
An 80 Byte Header is set for the request/response MPI Buffers, and a null byte indicates the
end of the message body. This means that each MPI Buffer can store up to 2^16 - Headers
(80) - Null (1) = 65455 Bytes of actual HTTP data.
80 bytes
65456 bytes
HEADER
HTTP DATA
0x00
As an HTTP message can be bigger than 65455 bytes, multiple buffers might be required for
a single request or response. To indicate this, the MPI handler stores the amount of buffers
and the address pointer of each in an Out Of Bounds (OOB) extra buffer that will be also
sent to the corresponding process through the shared memory.
The ICM max HTTP header’s length is 65455 Bytes, which is the same size as the MPI
Buffers. This is so that the entire headers can fit in a single Buffer and any extra one will
contain HTTP body data not required by the HTTP Parser and Handlers.
It is important to note that MPI buffers are multipurpose, and the same memory space can
be used either for requests, responses or OOB data. The difference will be found in the data
written by the handler. OOB buffers do not have headers and contain information used to
recover HTTP data.
HTTP WorkFlow
The main purpose of the ICM is to handle data from the internet and eventually forward it to
the corresponding process (Java / ABAP). This is achieved using an HTTP parser, a number
of HTTP handlers and finally a shared memory region to send data through the different
components.
To better understand the different handlers, functions and data structures involved in the ICM
HTTP service, let's consider the entire process of receiving and resolving an HTTP request.
Step 1: Init/recover Connection
When a client message is received through the HTTP/S port, a Worker Thread is woken up
from the thread pool and assigned to the new connection. If the TCP connection already
existed, then the previously assigned Worker Thread is retrieved.
If the connection is new, four memory pipes (MPI) will be obtained from the MPI queue and
stored for the connection in the thread.
Once the Worker Thread has the Memory Pipes ready, the ICM will be able to obtain
memory buffers to place the incoming (and eventually outgoing) HTTP message.
These Object instances also contain pointers to the different MPI Buffers (shared memory)
used in the connection and information about them (type, in use/freed, empty, last written
position, next buffer, and others).
Step 2: Receive the Request
The first thing the Worker Thread will do when a new HTTP request arrives is to obtain a
new MPI Buffer to place the message. This is done using the function IcmMpiGetOutbuf
which will return among others the pointer to the beginning of the buffer.
After the get buffer function is called, the ICM will know the address of the buffer (in shared
memory) and the ID reference to it.
Once the MPI Buffer is obtained from the Queue by the Request Pipe Handler (Req. MPI),
the MPI Header is set, which contains information such as the header size, buffer type,
associated Memory Pipe and other control flags. This is done using the function
IcmMpiSetHeaderData, and in the case of a request buffer, the type is always 1 and the
length is 80 bytes.
Next, the Worker Thread will call the function IcmReadFromConn which reads the HTTP
request from the TCP connection. If the request’s length is greater than the buffer size
(minus the 80 header bytes and the null terminator), only the first 65455 bytes will be copied
in the MPI Buffer. The rest will be placed later in another MPI buffer.
Even though the next step is to parse the HTTP request headers, the first function called will
verify that the end of the headers (the sequence “ 0x0d 0x0a 0x0d 0x0a”) is found.
If the sequence is not found two things can happen:
➢ If the amount of bytes received are greater or equal to 65455 and no termination
sequence (\r\n\r\n) is found in the first MPI Buffer, the ICM will discard the request
and respond with an error message.
➢ If the amount of bytes are less than 65455 and no termination sequence is found, the
Worker Thread will wait (sleep until recv in the same connection) for more HTTP data
to arrive, as it is required that the HTTP headers are complete before actually parsing
them.
Step 3: Parse Request Headers
Once the HTTP Headers are completely written in the MPI Buffer, the ICM will use it to parse
the different header names and values. This is done using the function
HttpParseRequestHeader which will not only create a Headers data structure, but also
recognize the following header names:
●
Host
●
Content-Length
●
Transfer-Encoding
●
HTTP Version (from first request line, is treated as a header)
●
Connection (keep-alive/close)
●
Sap-cancel-on-close
The URI and HTTP Method are parsed as well but stored differently (as they are not
headers).
Once the headers are parsed, the ICM will use them to perform some other operations such
as determining if the entire request is in the buffer and if there are pipelined requests, if the
transfer encoding is chunked, if the virtual host exists, and others.
After headers are used to give context to the request, the HttpSrvHdlRequest function is
called. This is the main HTTP handler function in the ICM and its purpose is to determine
which HTTP Handlers should be called (ordered) to try to resolve the request. For this, the
server handler will use the HTTP Method and URI from the parsed request. Depending on
these values, different sub handlers will be chosen.
The purpose of the ICM is to produce a response for the incoming request.This can be
achieved either by using a local (sub)handler or by asking the Java Server / Work Process to
resolve it.
It is important to notice that, after the headers are parsed, the name-value pairs are stored in
a dictionary data structure that will be used by the ICM and the subhandlers. This means
that the actual request stored in the MPI Buffer is not used again by the ICM. Instead, it will
be used by the Java/ABAP process once, and if, is called by the appropriate process
handler.
Step 4: ICM SubHandlers
As explained before, each handler will be called depending on the URI prefix and the HTTP
method of the request. Some handlers, such as the HttpModHandler, HttpCacheHandler and
Java/ABA Handler are always included in the subhandlers hierarchy
If a subhandler has created the HTTP response, the following subhandlers are no longer
included in the hierarchy and the response is returned back to the client. The exception is
the logging handler. This carries out the HTTP logging and forwards it to the next
subhandler.
It is important to understand that even if a sub handler is included in the handling hierarchy
and called by the ICM, this does not mean that it will be able to produce a response. In many
cases, the sub handler will check if the request fits some requirements and if not, the next
sub handler will be called.
What makes the sub handling of HTTP messages interesting is that request’s data is
retrieved on demand by the handler.
By default only the first bytes of a request corresponding to the headers are placed in the
MPI Buffer. This means that when the first sub handler is called, the rest of the HTTP
request will not be in the Buffer. Instead, it will be waiting for the ICM to retrieve it from the
TCP connection and use it.
Only when a handler requires the body of the HTTP request (for example the
HttpJ2EE2Handler) the rest of the request will be read and copied in the MPI Buffer (multiple
buffers could be used in this step). Is the job of the ICM Worker Thread to discard the rest of
the request if a handler resolves it before all the data is retrieved from the network.
As an example, consider a request to a Java dynamic servlet: