Computes:
hs = kdfhs (es, gx(cid:2)y)
s , km
c , km
s = kdfms (hs, log 1)
ms, kh
c , kh
Computes:
hs = kdfhs (es, gx(cid:2)y)
s , km
c , km
s = kdf ms (hs, log 1)
ms, kh
c , kh
s (Extensions(. . .))
s (CertRequest(. . .))
s (Certificate(pk S))
enckh
enckh
enckh
s (CertVerify(sign
s (Finished(mackm
sk S (H(log 2))))
s (H(log 3))))
enckh
enckh
log 2
log 3
log 4
log 2
log 3
log 4
Computes:
kc, ks, ems = kdf k(ms, log 4)
Computes:
kc, ks, ems = kdf k(ms, log 4)
log 5
log 6
log 7
c (Certificate(pk C))
enckh
c (CertVerify(sign
c (Finished(mackm
enckh
enckh
sk C (H(log 5))))
c (H(log 6))))
log 5
log 6
log 7
Computes:
(cid:2) = kdfpsk (ms, log 7)
psk
(cid:2)
cid = ems or psk
or H(log 7)
Computes:
(cid:2) = kdf psk (ms, log 7)
psk
(cid:2)
cid = ems or psk
or H(log 7)
New client session:
C = C (cid:2) cid (cid:3)→ (oﬀer C, mode S,
pk C, pk S,
kc, ks, ems, psk
(cid:2))
New server session:
S = S (cid:2) cid (cid:3)→ (oﬀer C, mode S,
pk C, pk S,
kc, ks, ems, psk
(cid:2))
enckc (Data(m1))
encks (Data(m2))
Application Data Stream:
cid←→ S : m1, m2, . . .
C
Application Data Stream:
cid←→ S : m1, m2, . . .
C
Key Derivation Functions:
hkdf-extract(k, s) = HMAC-Hk(s)
hkdf-expand-label1(s, l, h) =
HMAC-Hs(len H()(cid:2)“TLS 1.3, ”(cid:2)l(cid:2)h(cid:2)0x01)
derive-secret(s, l, m) = hkdf-expand-label1(s, l, H(m))
1-RTT Key Schedule:
kdf 0 = hkdf-extract(0len H() , 0len H() )
kdf hs (es, e) = hkdf-extract(es, e)
c , kh
kdf ms (hs, log 1) = ms, kh
c , km
s where
s , km
ms = hkdf-extract(hs, 0len H() )
hts c = derive-secret(hs, htsc, log 1)
hts s = derive-secret(hs, htss, log 1)
kh
c = hkdf-expand-label(hts c, key, “”)
km
c = hkdf-expand-label(hts c, ﬁnished, “”)
kh
s = hkdf-expand-label(hts s, key, “”)
km
s = hkdf-expand-label(hts s, ﬁnished, “”)
kdf k(ms, log 4) = kc, ks, ems where
ats c = derive-secret(ms, atsc, log 4)
ats s = derive-secret(ms, atss, log 4)
ems = derive-secret(ms, ems, log 4)
kc = hkdf-expand-label(ats c, key, “”)
ks = hkdf-expand-label(ats s, key, “”)
kdf psk (ms, log 7) = psk
where
(cid:2) = derive-secret(ms, rms, log 7)
psk
(cid:2)
PSK-based Key Schedule:
kdf es (psk ) = es, kb where
es = hkdf-extract(0len H() , psk )
kb = derive-secret(es, pbk, “”)
kdf 0RTT (es, log 1) = kc where
ets c = derive-secret(es, etsc, log 1)
kc = hkdf-expand-label(ets c, key, “”)
Figure 2: TLS 1.3 Draft-18 1-RTT Protocol (left) and Key Schedule (right). The protocol uses an (EC)DHE key exchange
with server certiﬁcate authentication: client authentication and the RetryRequest negotiation steps are optional. The hash
function H() used in the key schedule is typically SHA-256, which has length len H() = 32 bytes. The PSK-based key
derivations in the key schedule are not used in the 1-RTT protocol here; they will be used later in Figure 4.
III. TLS 1.3 1-RTT: SIMPLER, FASTER HANDSHAKES
In its simplest form, TLS 1.3 consists of a Difﬁe-Hellman
handshake, typically using an elliptic curve, followed by
application data encryption using an AEAD scheme like
AES-GCM. The essential structure of 1-RTT has remained
stable since early drafts of TLS 1.3. It departs from the
TLS 1.2 handshake in two ways. First, the key exchange is
executed alongside the negotiation protocol so the client can
start sending application data along with its second ﬂight
of messages (after one round-trip, hence 1-RTT), unlike
TLS 1.2 where the client had to wait for two message
ﬂights from the server. Second, TLS 1.3 eliminates a number
of problematic features in TLS 1.2; it removes RSA key
transport, weak encryption schemes (RC4, TripleDES, AES-
CBC), and renegotiation; it requires group negotiation with
strong standardized Difﬁe-Hellman groups, and it system-
atically binds session keys to the handshake log to prevent
attacks like the Triple Handshake. In this section, we detail
the protocol ﬂow, we model it in ProVerif, and we analyze
it alongside TLS 1.2 in the security model of §II.
488
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:27 UTC from IEEE Xplore.  Restrictions apply. 
1-RTT Protocol Flow. A typical 1-RTT connection in
Draft 18 proceeds as shown in Figure 2. The ﬁrst four
messages form the negotiation phase. The client sends a
ClientHello message containing a nonce nC and an
oﬀer C that lists the versions, groups, hash functions, and
authenticated encryption algorithms that
it supports. For
each group G that the client supports, it may include a
Difﬁe-Hellman key share gx. On receiving this message, the
server chooses a mode S that ﬁxes the version, group, and
all other session parameters. Typically, the server chooses
a group G for which the client already provided a public
value, and so it can send its ServerHello containing
a nonce nS, mode S and gy to the client. If none of the
client’s groups are acceptable, the server may ask the client
(via RetryRequest) to resend the client hello with a key
(cid:2). (In this case,
share gx(cid:2)
the handshake requires two round trips.)
for the server’s preferred group G
c , km
Once the client receives the ServerHello,
the ne-
gotiation is complete and both participants derive hand-
shake encryption keys from gx(cid:2)y, one in each direction
(kh
c , kh
s ), with which they encrypt all subsequent handshake
messages. The client and server also generate two MAC
keys (km
s ) for use in the Finished messages de-
scribed below. The server then sends a ﬂight of up to
5 encrypted messages: Extensions contains any proto-
col extensions that were not sent in the ServerHello;
CertRequest contains an optional request for a client cer-
tiﬁcate; Certificate contains the server’s X.509 public-
key certiﬁcate; CertVerify contains a signature with
server’s private key sk S over the log of the transcript so
far (log 2); Finished contains a MAC with km
s over the
current log (log 3). Then the server computes the 1-RTT
trafﬁc keys kc, ks and may immediately start using ks to
encrypt application data to the client.
Upon receiving the server’s encrypted handshake ﬂight,
the signature, and the
the client veriﬁes the certiﬁcate,
MAC, and if all veriﬁcations succeed,
the client sends
its own second ﬂight consisting of an optional certiﬁcate
Certificate and signature CertVerify, followed by a
mandatory Finished with a MAC over the full handshake
log. Then the client starts sending its own application data
encrypted under kc. Once the server receives the client’s
second ﬂight, we consider the handshake complete and put
all the session parameters into the local session databases at
both client and server (C, S).
In addition to the trafﬁc keys for the current session,
the 1-RTT handshake generates two extra keys: ems is an
exporter master secret that may be used by the application to
is
bind authentication credentials to the TLS channel; psk
a resumption master secret that may be used as a pre-shared
key in future TLS connections between C and S.
(cid:2)
The derivation of keys in the protocol follows a linear
key schedule, as depicted on the right of Figure 2. The ﬁrst
version of this key schedule was inspired by OPTLS [52]
and introduced into TLS 1.3 in Draft-7. The key idea in this
design is to accumulate key material and handshake context
into the derived keys using a series of HKDF invocations
as the protocol progresses. For example, in connections that
489
use pre-shared keys (see §V), the key schedule begins by
deriving es from psk, but after the ServerHello, we add
in gx(cid:2)y to obtain the handshake secret hs. Whenever we
extract encryption keys, we mix in the current handshake
log, in order to avoid key synchronization attacks like the
Triple Handshake.
Since its introduction in Draft-7, the key schedule has
undergone many changes, with a signiﬁcant round of simpli-
ﬁcations in Draft-13. Since all previously published analyses
of 1-RTT predate Draft-13, this leaves open the question
whether the current Draft-18 1-RTT protocol is still secure.
Modeling 1-RTT in ProVerif. We write client and server
processes in ProVerif that implement the message sequence
and key schedule of Figure 2.
Our models are abstract with respect
to the message
treating each message (e.g. ClientHello(··· ))
formats,
as a symbolic constructor, with message parsing modeled
as a pattern-match with this constructor. This means that
our analysis assumes that message serialization and parsing
is correct; it won’t ﬁnd any attacks that rely on parsing
ambiguities or bugs. This abstract
treatment of protocol
messages is typical of symbolic models; the same approach
is taken by Tamarin [35]. In contrast, miTLS [21] includes
a fully veriﬁed parser for TLS messages.
The key schedule is written as a sequence of ProVerif
functions built using an HMAC function, hmac(H, m), which
takes a hash function H as argument and is assumed to be
a one-way function as long as H = StrongHash. All other
cryptographic functions are modeled as described in §II, with
both strong and weak variants.
Persistent state is encoded using tables. To model prin-
cipals and their long-term keys, we use a global pri-
vate table that maps principals (A) to their key pairs
((sk A, pk A)). To begin with, the adversary does not know
any of the private keys in this table, but it can compromise
any principal and obtain her private key. As described in
§II, this compromise is recorded in ProVerif by an event
WeakOrCompromised(pk A).
As the client and server proceed through the handshake
they record security events indicating their progress. We
treat the negotiation logic abstractly; the adversary gets to
choose oﬀer C and mode S, and we record these choices
as events (ClientOffers, ServerChooses) at the client
and server. When the handshake is complete, the client and
server issue events ServerFinished, ClientFinished,
and store their newly established sessions in two private ta-
bles clientSession and serverSession (corresponding
to C and S). These tables are used by the record layer to
retrieve the trafﬁc keys kc, ks for authenticated encryption.
Whenever the client or server sends or receives an applica-
tion data message, it issues further events (ClientSends,
ServerReceives, etc.) We use all these events along with
the client and server session tables to state our security goals.
1-RTT Security Goals. We encode our security goals as
ProVerif queries as follows:
• Secrecy for a message, such as m1, is encoded using
an auxiliary process that asks the adversary to guess the
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:27 UTC from IEEE Xplore.  Restrictions apply. 
value of m1; if the adversary succeeds, the process issues
an event MessageLeaked(cid , m1). We then write a query
to ask ProVerif whether this event is reachable.
• Forward Secrecy is encoded using the same query,
but we explicitly leak the client and server’s long-term
keys (sk C, sk S) at the end of the session cid. ProVerif
separately analyzes pre-compromise and post-compromise
sessions as different phases; the forward secrecy query
asks that messages sent in the ﬁrst phase are kept secret
even from attackers who learn the long-term keys in the
second phase.
• Authentication for a message m1 received by the server
is written as a query that states that whenever the event
ServerReceives(cid , m1) occurs, it must be preceded
by three matching events: ServerFinished(cid , . . .),
ClientFinished(cid , . . .), and ClientSends(cid , m1),
which means that some honest client must have sent
m1 on a matching session. The authentication query for
messages received by clients is similar.
• Replay protection is written as a stronger variant of
the authentication query that requires injectivity: each
ServerReceives event must correspond to a unique,
matching, preceding ClientSends event.
• Unique Channel
Identiﬁers are veriﬁed using an-
other auxiliary process that looks up sessions from the
clientSession and serverSession tables and checks
that if the cid in both is the same, then all other parameters
match. Otherwise it raises an event, and we ask ProVerif
to prove that this event is not reachable.
When we ﬁrst ask ProVerif to verify these queries, it fails
and provides counterexamples; for example, client message
authentication does not hold if the client is compromised
Compromised(pk C) or unauthenticated in the session. We
then reﬁne the query by adding this failure condition as
a disjunct, and run ProVerif again and repeat the process
until the query is proved. Consequently, our ﬁnal veriﬁcation
results are often stated as a long series of disjuncts listing
the cases where the desired security goal does not hold.
Verifying 1-RTT in Isolation. For our model of Draft-18 1-
RTT, ProVerif can prove the following secrecy query about
all messages (m0.5, m1, m2):
• 1-RTT (Forward) Secrecy: Messages m sent in a session
between C and S are secret as long as the private keys of
C and S are not revealed before the end of the session, and
the server chooses a mode S with a strong Difﬁe-Hellman