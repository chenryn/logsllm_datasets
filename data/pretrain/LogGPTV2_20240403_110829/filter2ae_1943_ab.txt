        if (!"cdn".equals(var4) && !"api".equals(var4) && !"www6".equals(var4)) {
           if (!"www".equals(var4) && !"post".equals(var4)) {
                             ...
            } else {
                             ...
            }
         } else {//当请求域名的第一个子域是cdn、api、www6的时候
            var3 = new StringStack(var1.toLowerCase(), ".");
            var5 = var3.shift();
            var6 = var3.shift();
            var4 = CommonUtils.toNumberFromHex(var3.shift(), 0) + "";
            if (this.cache.contains(var4, var6)) {
              return this.cache.get(var4, var6);
            } else {
               SendConversation var7 = null;
               if ("cdn".equals(var5)) {
                  var7 = this.conversations.getSendConversationA(var4, var5, var6);
                } else if ("api".equals(var5)) {
                  var7 = this.conversations.getSendConversationTXT(var4, var5, var6);
                } else if ("www6".equals(var5)) {
                  var7 = this.conversations.getSendConversationAAAA(var4, var5, var6);
                }
               DNSServer.Response var8 = null;
               if (!var7.started() && var2 == 16) {
                  var8 = DNSServer.TXT(new byte[0]);//返回text=“”
               } else if (!var7.started()) {
                   byte[] var9 = this.controller.dump(var4, 72000, 1048576);
                   if (var9.length > 0) {
                      var9 = this.controller.getSymmetricCrypto().encrypt(var4, var9);
                      var8 = var7.start(var9);
                   } else if (var2 == 28 && "www6".equals(var5)) {
                      var8 = DNSServer.AAAA(new byte[16]);//返回::
                   } else {
                      var8 = DNSServer.A(0L);//返回0.0.0.0
                   }
               } else {
                  var8 = var7.next();
               }
               if (var7.isComplete()) {
                  this.conversations.removeConversation(var4, var5, var6);
               }
               this.cache.add(var4, var6, var8);
               return var8;
          }
     }
当域名为cdn，www6， api作为第一个子域的时候，Cobalt
Strike服务器会对不同的情况作处理。可以看到，当请求的类型是A记录的时候，Cobalt Strike服务器会返回固定的IP值为0.0.0.0。
![
](https://images.seebug.org/content/images/2021/04/b05f4fa4-73fc-4536-9173-558fdc0219a2.png-w331s)
当请求的类型是TXT记录的收获，返回的结果中text字段为空。
![
](https://images.seebug.org/content/images/2021/04/d7787294-30e0-401a-bddc-e6d26dde7988.png-w331s)
对于AAAA记录，Cobalt Strike服务器也会返回固定的地址::，只不过只能抓包看到。
![
](https://images.seebug.org/content/images/2021/04/afc33e23-cb9a-48b7-924d-f731bc548b6a.png-w331s)
由于返回的值都是固定的，同样没有判断域名后缀，所以完全可以拿来作为检测Cobalt Strike服务器的方法。以下是以api关键字作为检测的参考代码:
    def checkA(host):
        resolver = dns.resolver.Resolver()
        resolver.nameservers = [host]
        try:
            #请求的xxxx.xxx最好是随机的，并多次尝试
            ip = resolver.resolve("api.xxxx.xxx", 'A')[0].to_text()
        except:
            return False
        if ip == "0.0.0.0":
            return True
        return False
当第一个子域为www，post的时候，处理情况又不相同，限于篇幅这里就不分析了，有兴趣的朋友可以自行研究。
### 03 检 测
本地验证没问题后，我们将目标转移到了公网上。为了快速地筛选出潜在的并且开启了DNS Server的Cobalt
Strike服务器，我们可以通过一些关键字在网络空间探测平台中获取初定的目标。
通过分析发现Cobalt Strike返回的A记录中除返回的IP和域名外基本上数据是固定的。从Type字段开始到Data Length字段，Cobalt
Strike每次响应都会返回\x00\x01\x00\x01\x00\x00\x00\x01\x00\x04，后面再接4个字节的IP，这里是0.0.0.0，也就是\x00\x00\x00\x00。如下图：
![
](https://images.seebug.org/content/images/2021/04/7b354f5e-9350-46a4-ac90-297ec324e9ce.png-w331s)
所以利用这样的特征，在FOFA或ZoomEye上可以很容易地就能找到潜在的开启了DNS 服务的Cobalt
Strike服务器。因为有不少渗透测试人员喜欢把dns_idle设置为8.8.8.8。所以我们将0.0.0.0的IP地址替换为常用的8.8.8.8也就是\x08\x08\x08\x08作为查询关键字，便可以快速地找到潜在的监听了DNS服务的Cobalt
Strike服务器。
![
](https://images.seebug.org/content/images/2021/04/68048f1a-e576-49c1-afa0-4ca4cd0111f5.png-w331s)
导出了IP地址后，并用脚本进行了探测，探测的部分结果如下：
![
](https://images.seebug.org/content/images/2021/04/9869f64f-bed7-4532-bd13-c722fc014aa8.png-w331s)
同时也发现了一些开启host_stage的IP，直接下载了DNS Beacon的Shellcode，下面是某IP的检测结果。
![
](https://images.seebug.org/content/images/2021/04/48a9f783-d965-4cf8-b034-e74fca3cd8b7.png-w331s)
### 04 防 御
针对上面提到的特征，可以通过修改beacon/beaconDns.java中的代码，改变respond_nosync()处理请求的流程，增加判断，修改默认的返回值。可参考如下代码(注：该代码是4.2版本的代码，不过笔者本地测过CS最低版本是3.8，最高版本是4.2，代码可能会有差异，但是可以采取同样的方式):
    public DNSServer.Response respond_nosync(String var1, int var2) {
        StringStack var3 = new StringStack(var1.toLowerCase(), ".");
        String dname = var1.toLowerCase().trim().substring(0, var1.length() - 1);
        if (var3.isEmpty()) {
           return this.idlemsg;
        } else {
           String var4 = var3.shift();
           boolean CheckDname = false;
           //增加了判断请求的类型是否为TXT同时验证了域名后缀是否为Listener配置的字符
           if (var4.length() == 3 && var2 == 16 &&  dname.substring(3).startsWith(this.stager_subhost) && dname.endsWith(this.listener.getStagerHost().toLowerCase())) {
              return this.serveStage(var4);
           } else {
              String var5;
              String var6;
              String[] dnameArray = dname.split("\\.");
              String[] dC2Array = this.listener.getCallbackHosts().split(", ");
              for (int i=0; i 4 && var1.toLowerCase().substring(3).startsWith(this.stager_subhost)) {
                         return this.serveStage(var1.substring(0, 3));
                      } else if (CommonUtils.isHexNumber(var4) && CommonUtils.isDNSBeacon(var4)) {
                         var4 = CommonUtils.toNumberFromHex(var4, 0) + "";                
                              ...
                              ...
                      }
                  }
              }else {//当请求域名的第一个子域是cdn、api、www6的时候
                var3 = new StringStack(var1.toLowerCase(), ".");
                var5 = var3.shift();
                var6 = var3.shift();
                var4 = CommonUtils.toNumberFromHex(var3.shift(), 0) + "";
                if (this.cache.contains(var4, var6)) {
                    return this.cache.get(var4, var6);
                } else {
                   SendConversation var7 = null;
                   if ("cdn".equals(var5)) {
                   var7 = this.conversations.getSendConversationA(var4, var5, var6);
                } else if ("api".equals(var5)) {
                   var7 = this.conversations.getSendConversationTXT(var4, var5, var6);
                } else if ("www6".equals(var5)) {
                   var7 = this.conversations.getSendConversationAAAA(var4, var5, var6);
                }
               DNSServer.Response var8 = null;
               if (!var7.started() && var2 == 16) {
                  var8 = this.idlemsg;
                  //var8 = DNSServer.TXT(new byte[0]);返回text=“”
               } else if (!var7.started()) {
                   byte[] var9 = this.controller.dump(var4, 72000, 1048576);
                   if (var9.length > 0) {
                      var9 = this.controller.getSymmetricCrypto().encrypt(var4, var9);
                      var8 = var7.start(var9);
                   } else if (var2 == 28 && "www6".equals(var5)) {
                      var8 = this.idlemsg;
                      //var8 = DNSServer.AAAA(new byte[16]);返回::
                   } else {
                      var8 = this.idlemsg;
                      //var8 = DNSServer.A(0L);返回0.0.0.0
                   }
               } else {
                  var8 = var7.next();
               }
               if (var7.isComplete()) {
                  this.conversations.removeConversation(var4, var5, var6);
               }
               this.cache.add(var4, var6, var8);
               return var8;
          }
     }
需要注意的是，上面的代码并没有修复域名请求返回的A记录IP固定为dns_idle值的特征。但是我们可以在Cobalt
Strike服务器前面再部署一台正常的DNS服务，如下图，根据请求的域名进行转发，并利用Iptable设置白名单来绕过检测，这里就不详细介绍了。具体可以参考F-Secure发布的文章末尾提到的方法。
![
](https://images.seebug.org/content/images/2021/04/92d4a6c6-2267-4c19-8554-d82b3b2eeb7b.png-w331s)
### 05 总 结
本篇文章简单分析了Cobalt Strike DNS Beacon与Cobalt Strike 服务之间的通信，并在分析Cobalt Strike DNS
服务的代码中找到了以下的特征：
  1. 当Cobalt Strike服务器的profile配置stage_host为true的时候，可以使用带有stage关键字的域名模拟stager下载DNS Beacon的Shellcode。
  2. 使用api、cdn、www6作为第一个子域的域名如api.ns.dns.com向Cobalt Strike DNS服务查询A记录时将返回固定ip地址0.0.0.0，查询TXT记录是返回的text字段为空。
  3. 当查询时用目标Cobalt Strike的作为名称解析服务器的时候，上述请求可以忽略域名后缀，比如查询api.xxx.xxxx和查询api.ns.dns.com都会返回0.0.0.0。
结合以上特征，可以精确地检测出监听了DNS的Cobalt Strike服务器，并在公网上得到了验证，同时也给出了防御的参考代码和思路。
参考链接：
**扫码关注公众号：非攻安全**
* * *