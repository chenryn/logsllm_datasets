### Attack Traces and Simulation Framework

Our simulation framework incorporates three attack traces: two of which are real-world, and one is a synthetic trace based on a real-world attack. To construct the real-world AS-level Internet topology, we use the complete routing table dump obtained from all RouteViews [8] collectors on July 16, 2019. Each collector provides routing tables containing AS-level paths to all reachable IP prefixes (i.e., destination prefixes). In our simulation, we treat a collector as the DDoS victim and certain destinations as attack sources. To replay the attack traces on this AS-level topology, we assume that the AS-level paths are symmetric. This means that traffic flows along the same path from the attack sources to the victim as it does from the victim to its destinations. While this assumption simplifies the simulation, it may not always hold in the real world. Therefore, although our simulation framework is based on real-world data, it cannot be claimed to be entirely faithful to the actual Internet topology.

### Real-World and Synthetic Attack Traces

We use the CAIDA 2007 DDoS attack trace [7], which includes approximately 4,700 attack sources and 1,400 source ASes, and the Meritâ€™s RADb DDoS attack trace [4], which includes approximately 2,300 attack sources and 1,300 source ASes. Additionally, we create a synthetic trace that mimics the attack distribution of the September 2016 DDoS attack launched by the Mirai botnet on Krebs on Security, as detailed by Antonakakis et al. [11]. For each of the three traces, we run the simulation 100 times for each collector as the victim, and average the results across all runs. Before each new run, we randomly select 100 ASes as filtering ASes (or DDoS-filtering networks). Future work will analyze how the selection of filtering networks based on their tier affects the evaluation results. The simulation framework, coded in Java, was executed on a personal computer with a quad-core 4.0 GHz Intel Core i7 processor and 16 GB of RAM.

### Evaluation Methodology

The primary goal of our evaluation is to demonstrate the effectiveness of our ACO-based rule selection algorithm in filtering attack traffic compared to other rule selection strategies, including the optimal solution. We also study the runtimes of these strategies to determine their responsiveness to DDoS attacks.

### Efficacy of Defense Strategies

We evaluate the performance of five selection algorithms in terms of efficacy, defined as the percentage of total DDoS traffic filtered, relative to the victim's budget, represented by the maximum number of offers that can be selected. Typically, the victim's collateral damage threshold is met before the maximum number of offers can be selected.

Figure 7 shows the efficacy achieved by each of the five defense strategies during replays of the CAIDA 2007 (Fig. 7a), RADb 2016 (Fig. 7b), and Mirai 2016 (Fig. 7c) traffic traces. The first and most obvious trend is that as the maximum number of rules increases, the efficacy increases. However, this increase is logarithmic and becomes very slight after about 90 offers. The lines are not smooth due to the randomness in selecting defending ASes after each run of the simulation. Most importantly, our ACO-based algorithm performs only slightly worse than the optimal solution (on average, ~10% less effective) but consistently outperforms the dynamic programming, naive, and greedy algorithms.

The greedy and naive defenses perform poorly in all three attacks because of the uneven distribution of attack sources and the prioritization methods used by these algorithms. If the victim prioritizes offers based on the amount of attack traffic filtered, only a few offers may be deployed before the collateral damage threshold is exceeded. Similarly, if the victim prioritizes offers based on their value-to-weight ratio, the same problem may occur. For example, if the victim's weight threshold is \( W = x \) and the rule selection algorithm has two offers, where offer \( a \) has a weight of \( w_a = x \) and a value of \( v_a = x - 1 \), and offer \( b \) has a weight of \( w_b = 1 \) and a value of \( v_b = 1 \), the algorithm will select offer \( b \) first. If \( x > 2 \), the optimal solution would be to choose offer \( a \). This situation is common in DDoS attacks due to the uneven distribution of traffic.

While the dynamic programming algorithm achieves better results than the greedy and naive algorithms, it performs worse than the ACO-based algorithm. This is because the dynamic programming algorithm struggles with overlapping offers, which must be handled in the pre-processing step. This step potentially prevents the dynamic programming algorithm from obtaining an optimal solution. However, in the case of the Mirai 2016 attack (Fig. 7c), the dynamic programming algorithm achieves efficacy close to, and at one point, better than the ACO-based algorithm, likely due to the small number of overlapping candidate offers.

In conclusion, the ACO-based algorithm achieves the best results among the sub-optimal algorithms and is relatively close to the optimal solution, regardless of the attack. On average, there is a ~10% difference between the efficacy of the ACO-based algorithm and the optimal solution. At its best, the ACO-based algorithm can improve efficacy by more than 20% and 30% over the dynamic programming and greedy/naive algorithms, respectively.

### Runtime Analysis

Table 2 shows the runtimes for each algorithm when selecting a maximum of 100 offers. The optimal branch-and-bound-based algorithm (exponential time) takes around 9 hours to find the optimal solution, while the ACO-based algorithm (polynomial time) takes around 11 seconds to find a near-optimal solution, making it almost 3,000 times faster. The dynamic programming algorithm (pseudo-polynomial time) takes about half the time of the ACO-based algorithm. The greedy and naive algorithms (both linear time) take less than one second to execute. Although we have not further optimized the ACO-based algorithm, the runtime table shows that it is significantly faster than the optimal algorithm and more effective than the dynamic programming, naive, and greedy algorithms.

### Conclusion

Given the increasing size and frequency of DDoS attacks, effective in-network DDoS defense systems are essential. The fundamental challenge is generating, selecting, and placing rules in a network to effectively mitigate attacks. In this paper, we address the problem of rule selection for in-network DDoS defense. We formalize the NP-hard rule selection problem for offer-based in-network filtering and transform the ACO framework to create an algorithm that finds a near-optimal solution. This is, to our knowledge, the first work to apply the ACO framework to optimize the selection of filtering rules for DDoS defense. Using a real-world Internet topology and both real-world and synthetic DDoS traces, we thoroughly evaluate the ACO-based algorithm on a large scale by comparing it to different rule selection algorithms. Our results show that the ACO-based algorithm outperforms other rule selection algorithms under real-world attacks and performs only slightly worse than the optimal solution even at a large scale.

### Acknowledgments

This project is partially funded by the Science and Technology Directorate of the United States Department of Homeland Security under contract number D15PC00204. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Department of Homeland Security or the US Government.

### References

[References listed here, formatted as per the original text.]