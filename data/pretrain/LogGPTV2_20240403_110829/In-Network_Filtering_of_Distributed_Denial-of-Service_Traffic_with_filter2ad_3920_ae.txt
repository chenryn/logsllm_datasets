attack traces (two of which are real-world traces, while one is a
synthetic trace based on a real-world attack).
To construct our real-world AS-level Internet topology, we use
the complete routing table dump obtained from all RouteViews [8]
collectors on July 16, 2019. Specifically, for each collector, Route-
Views provides routing tables containing AS-level paths towards all
reachable IP prefixes (i.e., destination prefixes). We treat a collector
as the DDoS victim and certain destinations as attack sources, and
in order to replay attack traces on this AS-level topology, we must
assume that the AS-level paths are symmetric. In other words, we
assume that traffic flows along the same path from destinations
(i.e., attack sources) to the collector (i.e., victim) as it does from the
collector to its destinations. This assumption does not always hold
in the real-world, and therefore, while our simulation framework
derives from the real-world AS-level Internet topology, we cannot
claim that it is completely faithful to the real Internet topology.
We use the CAIDA 2007 DDoS attack trace [7], which includes
~4,700 attack sources and ~1,400 source ASes, and Merit’s RADb
DDoS attack trace [4], which includes ~2,300 attack sources and
~1,300 source ASes. We also create a synthetic trace that follows the
attack distribution of the September 2016 DDoS attack launched by
the Mirai botnet on Krebs on Security, as detailed by Antonakakis et
al. [11]. For each of the three traces, we run the simulation 100 times
for each collector as the victim, and average all of the runs together.
Before the start of a new run, we randomly choose 100 ASes as
filtering ASes (or DDoS-filtering networks). In future work, we plan
on analyzing how choosing filtering networks based on their tier
affects the evaluation results. We ran the simulation framework
(coded in Java) on a personal computer with a quad-core 4.0 GHz
Intel Core i7 processor with 16 GB of RAM.
6 EVALUATION
6.1 Evaluation Methodology
The main goal of our evaluation is to show the efficacy of our ACO-
based rule selection algorithm at filtering attack traffic as compared
to other rule selection strategies, including the optimal solution. We
also study the runtimes of the strategies to determine how quickly
each would respond to a DDoS attack. To make our evaluation as
6.3 Efficacy
We evaluate the performance of the five selection algorithms in
terms of efficacy, or the percentage of total DDoS traffic filtered,
with respect to the victim’s budget which is represented by the
maximum number of offers that can be selected. Note that in most
cases, the victim’s collateral damage threshold will be met before
the maximum number of offers can be selected.
In-Network Filtering of Distributed Denial-of-Service Traffic with Near-Optimal Rule Selection
ASIA CCS ’20, June 1ś5, 2020, Taipei, Taiwan
Fig. 7 shows the efficacy achieved by each of the five defense
strategies during replays of the CAIDA 2007 (Fig. 7a), RADb 2016
(Fig. 7b), and Mirai 2016 (Fig. 7c) traffic traces, respectively. The
first and most obvious trend observed from these graphs is that
as the maximum number of rules increases, the efficacy increases.
However, this trend seems to be logarithmic and tends to increase
only very slightly after about a maximum of 90 offers. Second, the
lines are not smooth, which is due to the randomness in selecting
the defending ASes after each run of the simulation. Lastly, and
most importantly, we can see that our ACO-based algorithm per-
forms only slightly worse than the optimal solution (on average,
the ACO-based algorithm ~10% less effective than the optimal), and
consistently outperforms the dynamic programming, naive, and
greedy algorithms.
The greedy and naive defenses perform underwhelmingly in
all three attacks because of how unevenly the attack sources are
distributed in the attacks and how the two algorithms prioritize the
offers. If the victim prioritizes offers based on the amount of attack
traffic that is filtered, then offers that filter the most traffic will be
deployed first, regardless of how much collateral damage is incurred
or the price of the offer. Therefore, only a few number of offers may
be deployed before the collateral damage threshold is surpassed and
the victim’s budget is met. If the victim instead prioritizes offers
based on their value-to-weight ratio, the same problem may occur.
Let’s take a look at a simple example. For simplicity, let’s combine
collateral damage and price as one weight so we are dealing with a
one-dimensional problem. Let’s say our victim’s weight threshold
is W = x and the rule selection algorithm has two offers to deploy,
where offer a has a weight of wa = x and a value of va = x − 1,
and offer b has a weight of wb = 1 and a value of vb = 1. In this
simple example, the rule selection algorithm will only select offer b
(it will select offer b first because it is of higher priority and not be
able to select offer a due to the weight threshold). If x > 2, then the
optimal solution would be to choose offer a. This situation occurs
more frequently when the distribution of traffic is uneven, which
is the case in most DDoS attacks.
While the dynamic programming algorithm achieves signifi-
cantly better results than the greedy and naive algorithms, it per-
forms worse than the ACO-based algorithm. This is due to the fact
that the dynamic programming algorithm cannot handle overlap-
ping offers as effectively as the ACO-based algorithm. In order for
the dynamic programming algorithm to run in pseudo-polynomial
time, it must deal with overlapping offers in the pre-processing
step. This step potentially prevents the dynamic programming al-
gorithm from obtaining an optimal solution. However, in the case
of the Mirai 2016 attack (Fig. 7c), the dynamic programming al-
gorithm achieves efficacy close to (and at one point, better than)
the ACO-based algorithm, essentially as the maximum number
of offers increase. This is most likely because the distribution of
attack sources in the Mirai 2016 attack leads to a small number
of overlapping candidate offers to select from, and as a result, the
pre-processing step does not significantly degrade the quality of
the solution.
In conclusion, the ACO-based algorithm achieves the best results
among the sub-optimal algorithms, and is relatively close to the
optimal solution, regardless of the attack. On average, there is ~10%
difference between the efficacy of the ACO-based algorithm and the
Algorithms CAIDA 2007 RADb 2016 Mirai 2016
optimal
ACO
dynamic
naive
greedy
~9hrs
11.33s
5.79s
0.37s
0.42s
~9hrs
10.72s
5.75s
0.71s
0.55s
~9hrs
12.20s
4.32s
0.60s
0.43s
Table 2: The runtimes for each algorithm when selecting a
maximum of 100 offers.
optimal solution. At its best, the ACO-based algorithm can improve
efficacy by more than 20% and 30% over the dynamic programming
and greedy/naive algorithms, respectively.
6.4 Runtime
The runtimes for all rule selection algorithms compared in this pa-
per, as shown in Table 2, are dependent on the number of offers to
select from. To put this in perspective, in order to find the optimal
solution for a maximum of 100 offers, the optimal branch-and-
bound-based algorithm (exponential time) takes around 9 hours to
find the optimal solution, while the ACO-based algorithm (polyno-
mial time) takes around 11 seconds to find a near optimal solution,
making it almost 3,000 times as fast as the optimal algorithm. The
dynamic programming algorithm (pseudo-polynomial time) takes
about half the time of the ACO-based algorithm. The greedy (linear
time) and naive (linear time) algorithms take less than one second
to finish executing. Note that we have not looked into further op-
timizing the ACO-based algorithm and it may be very possible to
reduce the runtimes seen in the table. Nonetheless, the runtime
table shows that the ACO-algorithm, while only being slightly less
effective, is significantly faster than the optimal branch-and-bound-
based algorithm, and while being relatively slower, is significantly
more effective than the dynamic programming, naive, and greedy
algorithms.
7 CONCLUSION
Due to the ever-growing size and frequency of DDoS attacks, effec-
tive in-network DDoS defense systems are increasingly necessary.
However, the fundamental dilemma for most in-network DDoS
defense solutions is generating, selecting, and placing rules in a
network so that an attack can be effectively mitigated. In this pa-
per, we tackle the problem of rule selection for in-network DDoS
defense.
We make several contributions in this paper. We formalize the
N P -hard rule selection problem for offer-based in-network filtering,
and transform the ACO framework to create an algorithm that
attempts to find a near-optimal solution to the problem. From our
understanding, this is the first work to apply the ACO framework
to optimize the selection of filtering rules for the purposes of DDoS
defense. We use a real-world Internet topology, along with real-
world and synthetic DDoS traces to thoroughly evaluate the ACO-
based algorithm on a large scale by comparing it to different rule
selection algorithms based on other classical algorithms. Our results
show that the ACO-based algorithm outperforms the other rule
selection algorithms under real-world attacks, and performs only
slightly worse than the optimal solution even at large-scale.
ASIA CCS ’20, June 1ś5, 2020, Taipei, Taiwan
Devkishen Sisodia, Jun Li, and Lei Jiao
ACKNOWLEDGMENTS
This project is in part the result of funding provided by the Sci-
ence and Technology Directorate of the United States Department
of Homeland Security under contract number D15PC00204. The
views and conclusions contained herein are those of the authors
and should not be interpreted necessarily representing the offi-
cial policies or endorsements, either expressed or implied, of the
Department of Homeland Security or the US Government.
REFERENCES
[1] 2005. Implementing BGP Flowspec. https://www.cisco.com/c/en/us/td/docs/
routers/asr9000/software/asr9k_r5-2/routing/configuration/guide/b_routing_
cg52xasr9k/b_routing_cg52xasr9k_chapter_011.html.
[2] 2005. Remotely Triggered Black Hole Filtering ś Destination Based and
Source Based. https://www.cisco.com/c/dam/en_us/about/security/intelligence/
blackhole.pdf.
[3] 2014. CAT 6500 and 7600 Series Routers and Switches TCAM Allocation Adjust-
ment Procedures. http://www.cisco.com/c/en/us/support/docs/switches/catalyst-
6500-series-switches/117712-problemsolution-cat6500-00.html.
[4] 2016. A DDoS Event Against the RADb Service. https://www.impactcybertrust.
org/dataset_view?idDataset=576.
[5] 2018. Configure Commonly Used IP ACLs. https://www.cisco.com/c/en/us/
support/docs/ip/access-lists/26448-ACLsamples.html.
[6] 2019. Cisco Systems and Arbor: Effective DDoS Mitigation in Distributed Peering
Environments. https://www.cisco.com/c/m/en_us/network-intelligence/service-
provider/digital-transformation/distributed-peering-architecture.html.
[7] 2019. The CAIDA UCSD DDoS Attack 2007 Dataset. https://www.caida.org/data/
passive/ddos-20070804_dataset.xml.
[8] 2019. University of Oregon Route Views Project. http://archive.routeviews.org.
[9] Inès Alaya, Christine Solnon, and Khaled Ghédira. 2004. Ant algorithm for the
multi-dimensional knapsack problem. In International Conference on Bioinspired
Optimization Methods and their Applications (BIOMA).
[10] David G Andersen. 2003. Mayday: Distributed Filtering for Internet Services. In
USENIX Symposium on Internet Technologies and Systems (USITS).
[11] Manos Antonakakis, Tim April, Michael Bailey, Matt Bernhard, Elie Bursztein,
Jaime Cochran, Zakir Durumeric, J Alex Halderman, Luca Invernizzi, Michalis
Kallitsis, et al. 2017. Understanding the Mirai Botnet. In USENIX Security Sympo-
sium.
[12] Katerina J Argyraki and David R Cheriton. 2005. Active Internet Traffic Filtering:
Real-Time Response to Denial-of-Service Attacks. In USENIX Annual Technical
Conference (ATC).
[13] Benjamin Armbruster, J Cole Smith, and Kihong Park. 2007. A Packet Filter
Placement Problem with Application to Defense Against Spoofed Denial of
Service Attacks. In European Journal of Operational Research (EJOR).
[14] Tim Battles, Danny McPherson, and Chris Morrow. 2004. Customer-Triggered
Real-Time Blackholes. In North American Network Operators’ Group (NANOG).
[15] Evan Cooke, Michael Bailey, Z Morley Mao, David Watson, Farnam Jahanian,
and Danny McPherson. 2004. Toward Understanding Distributed Blackhole
Placement. In ACM Workshop on Rapid Malcode (WORM).
[16] Christoph Dietzel, Georgios Smaragdakis, Matthias Wichtlhuber, and Anja Feld-
mann. 2018. Stellar: Network Attack Mitigation Using Advanced Blackholing.
In ACM International Conference on emerging Networking EXperiments and Tech-
nologies (CoNEXT).
[17] Marco Dorigo and Christian Blum. 2005. Ant Colony Optimization Theory: A
Survey. In Theoretical Computer Science.
[18] Karim El Defrawy, Athina Markopoulou, and Katerina Argyraki. 2007. Optimal
Allocation of Filters Against DDoS Attacks. In Information Theory and Applica-
tions Workshop (ITA).
[19] Stefka Fidanova. 2007. Ant Colony Optimization and Multiple Knapsack Prob-
lem. In Handbook of Research on Nature-Inspired Computing for Economics and
Management.
[20] Franklin Djeumou Fomeni and Adam N Letchford. 2013. A Dynamic Program-
ming Heuristic for the Quadratic Knapsack Problem. In INFORMS Journal on
Computing (JOC).
[21] Deli Gong, Muoi Tran, Shweta Shinde, Hao Jin, Vyas Sekar, Prateek Saxena, and
Min Suk Kang. 2019. Practical Verifiable In-network Filtering for DDoS Defense.
In IEEE International Conference on Distributed Computing Systems (ICDCS).
[22] Arpit Gupta, Laurent Vanbever, Muhammad Shahbaz, Sean P Donovan, Bran-
don Schlinker, Nick Feamster, Jennifer Rexford, Scott Shenker, Russ Clark, and
Ethan Katz-Bassett. 2014. SDX: A Software Defined Internet Exchange. In ACM
SIGCOMM Computer Communication Review (CCR).
[23] Felipe Huici and Mark Handley. 2007. An Edge-to-Edge Filtering Architecture
Against DoS. In ACM SIGCOMM Computer Communication Review (CCR).
[24] Shahrear Iqbal, Md Faizul Bari, and M Sohel Rahman. 2010. Solving the Multi-
Dimensional Multi-Choice Knapsack Problem with the Help of Ants. In Interna-
tional Conference on Swarm Intelligence (ICSI).
[25] Lei Jiao, Ruiting Zhou, Xiaojun Lin, and Xu Chen. 2019. Online Scheduling of
Traffic Diversion and Cloud Scrubbing with Uncertainty in Current Inputs. In
ACM International Symposium on Mobile Ad Hoc Networking and Computing
(MobiHoc).
[26] Aapo Kalliola, Kiryong Lee, Heejo Lee, and Tuomas Aura. 2015. Flooding DDoS
Mitigation and Traffic Management with Software Defined Networking. In IEEE
International Conference on Cloud Networking (CloudNet).
[27] Min Suk Kang, Soo Bum Lee, and Virgil D Gligor. 2013. The Crossfire Attack. In
IEEE Symposium on Security and Privacy (S&P).
[28] Angelos D Keromytis, Vishal Misra, and Dan Rubenstein. 2004. SOS: An Ar-
chitecture for Mitigating DDoS Attacks. In IEEE Journal on Selected Areas in
Communications (J-SAC).
[29] Min Kong, Peng Tian, and Yucheng Kao. 2008. A New Ant Colony Optimiza-
tion Algorithm for the Multidimensional Knapsack Problem. In Computers &
Operations Research.
[30] Bernhard Korte and Rainer Schrader. [n.d.]. On the Existence of Fast Approxima-
tion Schemes. In Nonlinear Programming.
[31] Soo Bum Lee, Min Suk Kang, and Virgil D Gligor. 2013. CoDef: Collaborative De-
fense Against Large-scale Link-flooding Attacks. In ACM International Conference
on emerging Networking EXperiments and Technologies (CoNEXT).
[32] Jun Li, Skyler Berg, Mingwei Zhang, Peter Reiher, and Tao Wei. 2014. Draw-
bridge: Software-Defined DDoS-Resistant Traffic Engineering. In ACM SIGCOMM
Computer Communication Review (CCR).
[33] VC Li and Guy L Curry. 2005. Solving Multidimensional Knapsack Problems
with Generalized Upper Bound Constraints using Critical Event Tabu Search. In
Computers & Operations Research.
[34] Xin Liu, Xiaowei Yang, and Yanbin Lu. 2008. To Filter or to Authorize: Network-
Layer DoS Defense Against Multimillion-Node Botnets. In ACM SIGCOMM Com-
puter Communication Review (CCR).
[35] Zhuotao Liu, Hao Jin, Yih-Chun Hu, and Michael Bailey. 2016. MiddlePolice:
Toward enforcing destination-defined policies in the middle of the Internet. In
ACM Special Interest Group on Security, Audit and Control (SIGSAC).
[36] Michael J Magazine and Maw-Sheng Chern. 1984. A Note on Approximation
Schemes for Multidimensional Knapsack Problems. In Mathematics of Operations
Research.
[37] Nick McKeown, Tom Anderson, Hari Balakrishnan, Guru Parulkar, Larry Pe-
terson, Jennifer Rexford, Scott Shenker, and Jonathan Turner. 2008. OpenFlow:
Enabling Innovation in Campus Networks. In ACM SIGCOMM Computer Com-
munication Review (CCR).
[38] A. Mortensen, T. Reddy, F. Andreasen, N. Teague, and R. Compton. 2019.
Distributed-Denial-of-Service Open Threat Signaling (DOTS) Architecture. In-
ternet Engineering Task Force (2019).
[39] George Oikonomou, Jelena Mirkovic, Peter Reiher, and Max Robinson. 2006.
A Framework for a Collaborative DDoS Defense. In Annual Computer Security
Applications Conference (ACSAC).
[40] Kostas Pagiamtzis and Ali Sheikholeslami. 2006. Content-Addressable Memory
(CAM) Circuits and Architectures: A Tutorial and Survey. In IEEE Journal of
Solid-State Circuits.
[41] David Pisinger. 2005. Where are the Hard Knapsack Problems?. In Computers &
Operations Research.
[42] Sivaramakrishnan Ramanathan, Jelena Mirkovic, Minlan Yu, and Ying Zhang.
2018. SENSS Against Volumetric DDoS Attacks. In Annual Computer Security
Applications Conference (ACSAC).
[43] Lumin Shi, Devkishen Sisodia, Mingwei Zhang, Jun Li, Alberto Dainotti, and Peter
Reiher. 2019. The Catch-22 Attack. In Annual Computer Security Applications
Conference (ACSAC).
[44] Fabio Soldo, Katerina Argyraki, and Athina Markopoulou. 2012. Optimal Source-
based Filtering of Malicious Traffic. In IEEE/ACM Transactions on Networking
(TON).
[45] Ahren Studer and Adrian Perrig. 2009. The Coremelt Attack. In European Sym-
posium on Research in Computer Security (ESORICS).
[46] Dirk Sudholt and Christian Thyssen. 2012. Running Time Analysis of Ant Colony
Optimization for Shortest Path Problems. In Journal of Discrete Algorithms.
[47] Yang Xu and Yong Liu. 2016. DDoS Attack Detection under SDN Context. In
IEEE International Conference on Computer Communications (INFOCOM).
[48] Wencong You, Lei Jiao, Jun Li, and Ruiting Zhou. 2020. Scheduling DDoS Cloud
Scrubbing in ISP Networks via Randomized Online Auctions. In IEEE International
Conference on Computer Communications (INFOCOM).
[49] Mingwei Zhang, Lumin Shi, Devkishen Sisodia, Jun Li, and Peter Reiher. 2019.
On Multi-Point, In-Network Filtering of Distributed Denial-of-Service Traffic. In
IFIP/IEEE Symposium on Integrated Network and Service Management (IM).
[50] Shuyuan Zhang, Franjo Ivancic, Cristian Lumezanu, Yifei Yuan, Aarti Gupta, and
Sharad Malik. 2014. An Adaptable Rule Placement for Software-Defined Networks.
In IEEE/IFIP International Conference on Dependable Systems and Networks (DSN).