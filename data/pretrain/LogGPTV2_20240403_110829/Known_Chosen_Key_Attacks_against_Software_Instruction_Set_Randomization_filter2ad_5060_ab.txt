and overwrite it with the address of buf[ ]. As before, this
will not work with RISE because the shellcode would be
scrambled upon fetch, and a random sequence of instruc-
tions would be executed. A RISE-aware attacker can use
(*p), which is stored in the stack and points to a string that
will eventually be sent back to the user. Instead of overwrit-
ing the return address, the strategy would be to overwrite *p
with the address of the mask we are interested in, and then
wait for the function to send the mask data back. This ex-
ample is oversimpliﬁed but any pointer (even on a different
frame) up the stack, would work. Appendix B in [20] con-
tains the exploit we used to successfully defeat RISE using
this strategy.
The main problem with this approach is that there is no
guarantee that the stack will contain a useful pointer in all
cases, or the attacker might not want to damage other frames
in the stack (which is unavoidable during the overﬂow that
overwrites the pointer). There is an alternative way of ex-
ploiting a stack vulnerability in these cases. We use the
following code to exemplify the point:
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006int f(char *buf1, int len) {
char buf2[100];
int c = read(0,buf2,200);
if (c == -1) return -1;
if (buf1) return memcmp(buf1,buf2,len);
else return f(buf2,c);
}
main() {
}
printf("Comparing input pair:\n");
exit(f(0,0) != 0);
This program never sends any non-constant data to the
user, and never sends anything to the user after the over-
run occurs. Therefore, it is not vulnerable to the previous
attack. However, the attacker can still use Durden’s tech-
nique [6], which is explained using the example given. The
printf() (in main()) is close enough to the buffer over-
run (in f()), so overwriting the lowest byte of the return
address with the offset of the call to printf() can make
the program send mask data back to the attacker, and fall-
through to the f(0,0) call, allowing the attacker to over-
ﬂow the stack again and utilize the stolen mask.
Here is a snippet of assembler code from main() of the
above program:
# printf("Comparing input pair:\n");
8048498:
804849f:
movl $0x8048604,(%esp,1)
call 804830c 
# exit(f(0,0) != 0);
80484a4:
movl $0x0,0x4(%esp,1)
# ...
80484b3:
80484b8:
call 8048414 
test %eax,%eax
Note that the return address of f(0,0) is 0x080484b8,
which happens to be in the same page of the call to
printf(), in 0x0804849f. An attacker can exploit this
as follows:
1. Send a ﬁrst input which does not overﬂow the stack
but is a format string (this will be used later to extract
mask bytes). For example, "\x61\x46\x13\x40%8s"
(extract a string from 0x40134661, where some mask
bytes reside).
2. Send a second input which overﬂows the stack, over-
writing the low byte of the return address with 0x9f
(the offset where printf is called): "\x9f"*125.
3. At this point, the program leaks mask bytes and falls
back into f( ), so instead of calling exit( ), it reads
a third input. Send as third input the shellcode pre-
scrambled with the stolen mask.
Mask-leaking techniques work against heap overruns [8]
as well, by exploiting the unlink() macro in dlmalloc()
to overwrite a pointer of some data sent to the user. An
additional attack method can be based on cache attacks [14],
but we intentionally left it out as the original RISE threat
model does not include local attackers.
3.1.3 Testing Tiled-Mode key stealing
The feasibility of leak attacks was veriﬁed using the syn-
thetic vulnerabilities shown, the classical Site Exec Com-
mand format string vulnerability [4], and two current pro-
prietary applications, one for a stack overﬂow, and one for
a heap overrun vulnerability. As part of the test, two such
exploits were modiﬁed to work against a RISE-protected
system, using methods similar to the ones discussed in pre-
vious sections the above. We conclude that real-life exploits
can often be improved to work against RISE.
3.1.4 Stealing the key in OTP mode
The attacks discussed above are useful against RISE run-
ning in tiled mode. Variants of these attacks can also be
used against RISE in OTP mode, but with a lower probabil-
ity of success. In OTP mode, the mask is generated lazily,
but always for an entire page. This means that an attack
must be done in two stages. First, we need to cause RISE
to generate a mask for a writable page, then, after stealing
the mask, we need to inject the (masked) shellcode into the
target page.
One possible strategy to trigger mask generation without
crashing the process is to cause a single instruction to exe-
cute in the target page, and then returning, without causing
a crash or otherwise damaging the process. A clear candi-
date is the RET instruction (0xc3 for the IA-32 processor
family) which is one byte in length, and exits back to the ap-
plication. The process can be altered to call the beginning
of the desired (data) page by altering some function pointer
(such as a GOT entry) or by overwriting a return address
on the stack and the word above it on the stack to point to
an appropriate location in the code. After being redirected,
RISE will start to execute whatever random instructions are
created by xor-ing the newly created mask bytes with the
data on that page. To succeed, the attack needs to hit a
sequence of zero or more non-destructive random instruc-
tions, followed by a randomly generated RET.
1
The worst case for the defender is that RET executes as
the ﬁrst random instruction of that page. The probability
256, which will require to repeat the attack
of this event is
about 256 times, well inside the acceptable range for brute-
forcing without raising alarms in the target system. How-
ever, the overall probability of hitting a RET after some
non-destructive instructions is even higher, as attested by
the Markov-Chain analysis in [2]. After success, a new
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006mask that is not covering real code is created, and the tar-
get process continues running, which allows the attacker to
steal the mask for this (data) page using the techniques de-
scribed in section 3.1.2 for tiled mode.
3.1.5 Portability of key-stealing attacks and possible
solutions
The key stealing attacks described are ISR-implementation
speciﬁc. It is likely that they would be feasible against any
user-mode pure-software implementation of ISR, where the
mask has to be kept in the same memory space used by
the program. Hardware implementations are likely to be
immune against direct key-stealing because there is no need
for the key to be accessible to the process. For software
implementations of ISR, some solutions are offered:
1. Make the key unreadable during the execution of non-
RISE code. We were able to easily harden RISE
against this speciﬁc attack (direct key-stealing) by
changing the access rights of the memory addresses
containing the mask to PROT NONE, making it read-
able only when it is actually needed. This solu-
tion slows down the program during the warm-up pe-
riod but once most of the used code is in the (plain-
text) cache, performance is no longer affected. Note
that this ﬁx is not thread-safe and can only protect a
single-threaded server, but could be solved by appro-
priate locking at an additional performance cost during
warm-up.
2. Randomize the location of the key. This solution, men-
tioned in [2], in reality requires the randomization of
the position of any component that could indirectly
lead to the mask address. That includes the table that
contains the pointers to the masks, and anything that
points to it from stack or heap, so it requires full ad-
dress space layout randomization (ASLR) rather than
just randomizing the key location. Otherwise, an at-
tacker could steal the non-randomized component and
traverse from there until mask is found. Bhatkar et
al. [3] have recently published a tool that thoroughly
randomizes the internal layout of a program by recom-
piling it. It could be possible to randomize just the lay-
out of the emulator, which would possibly make these
key-stealing attacks less likely.
3. Separate the memory space between emulator and em-
ulated processes. However, this option is extremely
expensive and is seldom used for emulation.
Even if stealing the key directly is made very difﬁcult,
there is an alternative method of obtaining the key, which
is through the scrambled code itself. This approach will be
discussed in the next section.
3.2. Known-Plaintext key extraction
A software ISR has to use a stream-cipher in order to al-
low efﬁcient byte-level access to the scrambled memory
space. RISE uses XOR with a mask originating from
/dev/urandom. As with any such stream-cipher, the ISR is
therefore vulnerable to known-plaintext attacks if keys are
reused. In the case of RISE, tiled-mode reuses keys, so this
attack becomes feasible.
An attacker with knowledge of the binary executable (or
one of the shared objects used, such as libc.so) can dump
a piece of code encrypted by the global key, using one of the
methods described earlier, xor it with the known plaintext,
and get the key. In particular, any user in possession of a
binary (be it open-source or not) can examine the machine
code of the program, and use it to launch this attack against
a system using the same program.
System-level ASLR solutions such as PaX [13] cannot
make this attack any less reliable since they randomize ar-
eas such as stack, heap and mmap base, but leave the main
process executable in its original location. The attacker
can still dump pieces of the scrambled executable without
any guess-work. Even in the unlikely event that the exe-
cutable is unknown, the attacker can reliably walk through
it, ﬁnd a known structure, such as the Global Offset Table
(GOT) [19], and get addresses of library functions, can-
celing the effect of mmap randomization and gaining ac-
cess to xor-encoded libc code -an almost universal known-
plaintext.
Existing implementations that randomize addresses in
the executable itself are seldom used because they require
relinking the application. Examples of such implemen-
tations are PaX [13] with ET DYN-linked binaries and
Exec-Shield [12] with PIE position-independent executa-
bles. Currently, there is no reliable way to fully randomize
addresses without relinking, and most Linux distributions
are not ET DYN-ed.
A full ASLR (with relinking) makes this attack some-
what harder, but not infeasible, because
XOR(XOR(a,m),XOR(b,m)) = XOR(a,b),
so even if the mask (m) is not known, we know a and b
(pieces of the code). Unlike ret-to-libc exploits, this attack
does not require an exact location in the code. Any known-
plaintext encrypted code is usable. The steps for executing
such an attack are the following:
1. Gather all known-plaintext code (libraries and the ex-
ecutable if known).
2. For each page of code P, make
X=XOR(P, P+)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:28:39 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 20063. Create a dictionary D with X as keys and P as corre-
sponding values.
4. Dump a random page R (iteratively if required), and
page R’ which is  bytes
above R.
5. If D(XOR(R,R’)) exists, then
key =XOR(start from R, start from P)
6. If not, goto 4
The probability of success is derived from the density of
code (the percentage of pages populated by code) in mem-
ory space. As found in [2], the code density of most pro-
cesses is below 5%. At a 5% density, each iteration has
≈ 1
20 probability of ﬁnding the key. An iteration that fails
might crash the process if it hits unmapped memory, but
will fail silently if it hits heap, stack, bss, data, or any other
non-code item. Therefore, the probability of successfully
acquiring the key using this algorithm is bound to be better
20 in this case, which is rather feasible in real world
than 1
situations.
If the vulnerability is a format-string one, or a stack over-
run that can be converted to a format string attack (as de-
scribed in section 3.1.2), this algorithm can be improved
signiﬁcantly. The attacker can dump a piece of the stack
to ﬁnd return-addresses on the stack, which point directly
to code. Feeding such addresses into the algorithm above,
instead of using a random R perform close to 100% reliabil-
ity. Other derandomization attacks against full ASLR may
be used to improve the reliability of this method [17].
3.2.1 Portability of known-plaintext attacks and possi-
ble solutions
Unlike the key-stealing attack, the known plaintext attack
does not rely on the speciﬁc implementation of RISE. Any
software ISR implementation that reuses keys can be at-
tacked this way with high probability of success. Further-
more, if a hardware implementation uses a simple stream
cipher such as XOR with pseudo-random keys, and reuses
key bytes, then it will not be immune to this attack.
We propose the following solutions to direct key stealing
attacks: