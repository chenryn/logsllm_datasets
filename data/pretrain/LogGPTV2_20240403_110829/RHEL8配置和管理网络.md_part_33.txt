                gateway6: 2001:db8:1::fffe
                dns:
                  - 198.51.100.200
                  - 2001:db8:1::ffbb
                dns_search:
                  - example.com
              ethtool:
                coalesce:
                  rx_frames: 128
                  tx_frames: 128
              state: up
    ```
3.  运行 playbook：
    ::: itemizedlist
    -   以 `root`{.literal} 用户身份连接到受管主机，输入：
        ``` literallayout
        # ansible-playbook -u root ~/configure-ethernet-device-with-ethtoolcoalesce-settings.yml
        ```
    -   以用户身份连接到受管主机，请输入：
        ``` literallayout
        # ansible-playbook -u user_name --ask-become-pass ~/configure-ethernet-device-with-ethtoolcoalesce-settings.yml
        ```
        `--ask-become-pass`{.literal} 选项确定
        `ansible-playbook`{.literal} 命令提示输入
        `-u user_name`{.literal} 选项中定义的用户 `sudo`{.literal}
        密码。
    :::
    如果没有指定 `-u user_name`{.literal}
    选项，请以当前登录到控制节点的用户 `ansible-playbook`{.literal}
    连接到受管主机。
:::
::: itemizedlist
**其它资源**
-   有关 `ethtool`{.literal} 功能的完整列表以及
    `network_connections`{.literal} 中使用的参数的详情，以及
    `network`{.literal} 系统角色的更多信息，请参阅
    `/usr/share/ansible/roles/rhel-system-roles.network/README.md`{.literal}
    文件。
-   有关 `ansible-playbook`{.literal} 命令的详情，请参考
    `ansible-playbook(1)`{.literal} man page。
:::
:::
:::
[]{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_configuring-and-managing-networking.html#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_configuring-and-managing-networking}第 35 章 使用 MACsec 加密同一物理网络中的第 2 层流量 {.title}
:::
这部分论述了如何为以太网链路中的所有流量配置 MACsec 以安全通信。
介质访问控制安全(MACsec)是一个第 2
层协议，可通过以太网链接保护不同类型的流量类型，包括：
::: itemizedlist
-   动态主机配置协议(DHCP)
-   地址解析协议(ARP)
-   互联网协议版本 4 / 6(`IPv4`{.literal} / `IPv6`{.literal})和
-   任何使用 IP的流量（如 TCP 或 UDP）
:::
MACsec 默认使用 GCM-AES-128 算法加密并验证 LAN
中的所有流量，并使用预共享密钥在参与者主机之间建立连接。如果要更改预共享密钥，您需要更新网络中使用
MACsec 的所有主机上的 NM 配置。
MACsec 连接将以太网设备（如以太网网卡、VLAN
或隧道设备）用作父设备。您只能在 MACsec 设备上设置 IP
配置，以仅使用加密连接与其他主机通信，也可以在父设备中设置 IP
配置。在后者的情况下，您可以使用父设备使用未加密连接和 MACsec
设备加密连接与其他主机通信。
macsec
不需要任何特殊硬件。例如，您可以使用任何交换机，除非您只想加密主机和交换机之间的流量。在这种情况下，交换机还必须支持
MACsec。
换句话说，有两种常用方法来配置 MACsec：
::: itemizedlist
-   主机到主机，和
-   主机到交换机，然后交换机到其他主机
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
您只能在相同（物理或虚拟）LAN 的主机间使用 MACsec。
:::
下例演示了如何使用预共享密钥在 2 个主机之间配置 MACsec。
::: section
::: titlepage
# []{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_configuring-and-managing-networking.html#proc_configuring-a-macsec-connection-using-nmcli_assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network}使用 nmcli 配置 MACsec 连接 {.title}
:::
您可以使用 nmcli 工具将以太网接口配置为使用
MACsec。这个步骤描述了如何创建使用以太网接口加密网络流量的 MACsec 连接。
在所有应在此 MACsec 保护的网络中进行通信的所有主机上运行此步骤。
::: title
**流程**
:::
在主机 A 中：
::: itemizedlist
-   在您配置 MACsec
    的第一个主机上，为预共享密钥创建连接关联密钥(CAK)和连接关联密钥名称(CKN)：
    ::: orderedlist
    1.  创建 16 字节十六进制 CAK：
        ``` literallayout
        dd if=/dev/urandom count=16 bs=1 2> /dev/null | hexdump -e '1/2 "%04x"'
        50b71a8ef0bd5751ea76de6d6c98c03a
        ```
    2.  创建 32 字节十六进制 CKN：
        ``` literallayout
        dd if=/dev/urandom count=32 bs=1 2> /dev/null | hexdump -e '1/2 "%04x"'
        f2b4297d39da7330910a74abc0449feb45b5c0b9fc23df1430e1898fcf1c4550
        ```
    :::
:::
在主机 A 和 B 中：
::: orderedlist
1.  创建 MACsec 连接：
    ``` literallayout
    # nmcli connection add type macsec con-name macsec0 ifname macsec0 connection.autoconnect yes macsec.parent enp1s0 macsec.mode psk macsec.mka-cak 50b71a8ef0bd5751ea76de6d6c98c03a  macsec.mka-ckn f2b4297d39da7330910a7abc0449feb45b5c0b9fc23df1430e1898fcf1c4550
    ```
    使用 `macsec.mka-cak`{.literal} 和 `macsec.mka-ckn`{.literal}
    参数中前面的步骤中生成的 CAK 和 CKN。在 MACsec-protected
    网络的每个主机上，这些值必须相同。
2.  配置 MACsec 连接中的 IP 设置。
    ::: orderedlist
    1.  配置 `IPv4`{.literal} 设置。例如：要为 `macsec0`{.literal}
        连接设置静态 `IPv4`{.literal} 地址、网络掩码、默认网关和 DNS
        服务器设置，请输入：
        ``` literallayout
        # nmcli connection modify macsec0 ipv4.method manual ipv4.addresses '192.0.2.1/24' ipv4.gateway '192.0.2.254' ipv4.dns '192.0.2.253'
        ```
    2.  配置 `IPv6`{.literal} 设置。例如：要为 `macsec0`{.literal}
        连接设置静态 `IPv6`{.literal} 地址、网络掩码、默认网关和 DNS
        服务器设置，请输入：
        ``` literallayout
        # nmcli connection modify macsec0 ipv6.method manual ipv6.addresses '2001:db8:1::1/32' ipv6.gateway '2001:db8:1::fffe' ipv6.dns '2001:db8:1::fffd'
        ```
    :::
3.  激活连接：
    ``` literallayout
    # nmcli connection up macsec0
    ```
:::
::: orderedlist
**验证步骤**
1.  要验证流量是否已加密，请输入：
    ``` literallayout
    tcpdump -nn -i enp1s0
    ```
2.  要查看未加密的流量，请输入：
    ``` literallayout
    tcpdump -nn -i macsec0
    ```
3.  显示 MACsec 统计数据：
    ``` literallayout
    # ip macsec show
    ```
4.  针对每种保护类型显示单个计数器：仅完整性（加密关闭）和加密（加密）
    ``` literallayout
    # ip -s macsec show
    ```
:::
::: itemizedlist
**其它资源**
-   有关 MACsec
    [及其架构的更多信息，请参阅[*MACsec：加密网络流量博客的不同解决方案*]{.emphasis}](https://developers.redhat.com/blog/2016/10/14/macsec-a-different-solution-to-encrypt-network-traffic/){.link}。
:::
:::
:::
[]{#using-different-dns-servers-for-different-domains_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#using-different-dns-servers-for-different-domains_configuring-and-managing-networking.html#using-different-dns-servers-for-different-domains_configuring-and-managing-networking}第 36 章 在不同域中使用不同的 DNS 服务器 {.title}
:::
默认情况下，Red Hat Enterprise Linux（RHEL）会将所有 DNS 请求发送到
`/etc/resolv.conf`{.literal} 文件中指定的第一个 DNS
服务器。如果这个服务器没有回复，RHEL 会使用这个文件中的下一个服务器。
在一个 DNS 服务器无法解析所有域的环境中，管理员可将 RHEL
配置为将特定域的 DNS 请求发送到所选 DNS 服务器。例如：您可以配置一个 DNS
服务器来解析 `example.com`{.literal} 查询，另一个 DNS 服务器解析
`example.net`{.literal} 查询。对于所有其他 DNS 请求，RHEL
使用与默认网关连接中配置的 DNS 服务器。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`systemd-resolved`{.literal}
服务仅作为技术预览提供。红帽产品服务级别协议（SLA）不支持技术预览功能，且其功能可能并不完善，因此红帽不建议在生产环境中使用它们。这些预览可让用户早期访问将来的产品功能，让用户在开发过程中测试并提供反馈意见。
如需有关
[技术预览功能支持范围](https://access.redhat.com/support/offerings/techpreview){.link}
的信息，请参阅红帽客户门户网站中的技术预览功能支持范围。
:::
::: section
::: titlepage
# []{#using-different-dns-servers-for-different-domains_configuring-and-managing-networking.html#sending-dns-requests-for-a-specific-domain-to-a-selected-dns-servers_using-different-dns-servers-for-different-domains}将特定域的 DNS 请求发送到所选 DNS 服务器 {.title}
:::
本节配置 `systemd-resolved`{.literal} 服务和 NetworkManager，将特定域的
DNS 查询发送到所选 DNS 服务器。
如果您完成本节中的步骤，RHEL 将使用 `/etc/resolv.conf`{.literal}
文件中的 `systemd-resolved`{.literal} 提供的 DNS
服务。`systemd-resolved`{.literal} 服务启动一个 DNS 服务，它侦听端口
`53`{.literal}，IP 地址 `127.0.0.53`{.literal}。该服务会动态将 DNS
请求路由到 NetworkManager 中指定的对应 DNS 服务器。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`127.0.0.53`{.literal} 地址只能从本地系统访问，而无法从网络访问。
:::
::: itemizedlist
**先决条件**
-   系统配置了多个网络管理器连接。
-   在负责解析特定域的 NetworkManager 连接中配置 DNS 服务器和搜索域
    例如，如果 VPN 连接中指定的 DNS 服务器应该解析
    `example.com`{.literal} 域的查询，VPN 连接配置集必须具有：
    ::: itemizedlist
    -   配置可解析 `example.com`{.literal} 的 DNS 服务器
    -   在 `ipv4.dns-search`{.literal} 和 `ipv6.dns-search`{.literal}
        参数中将搜索域配置为 `example.com`{.literal}
    :::
:::
::: orderedlist
**流程**
1.  启动并启用 `systemd-resolved`{.literal} 服务：
    ``` literallayout
    # systemctl --now enable systemd-resolved
    ```
2.  编辑 `/etc/NetworkManager/NetworkManager.conf`{.literal} 文件，在
    `[main]`{.literal} 部分设置以下条目：
    ``` literallayout
    dns=systemd-resolved
    ```
3.  重新载入 `NetworkManager`{.literal} 服务：
    ``` literallayout
    # systemctl reload NetworkManager
    ```
:::
::: orderedlist
**验证步骤**
1.  验证 `nameserver`{.literal} 文件中的 `/etc/resolv.conf`{.literal}
    条目是否指向 `127.0.0.53`{.literal}:
    ``` literallayout
    # cat /etc/resolv.conf
    nameserver 127.0.0.53
    ```
2.  验证 `systemd-resolved`{.literal} 服务是否监听本地 IP 地址
    `127.0.0.53`{.literal} 的端口 `53`{.literal} :
    ``` literallayout
    # netstat -tulpn | grep "127.0.0.53:53"
    tcp   0   0 127.0.0.53:53   0.0.0.0:*   LISTEN   1050/systemd-resolv
    udp   0   0 127.0.0.53:53   0.0.0.0:*            1050/systemd-resolv
    ```
:::
::: itemizedlist
**其它资源**
-   详情请查看 `dns`{.literal} man page 中的
    `NetworkManager.conf(5)`{.literal} 参数描述。
:::
:::
:::
[]{#getting-started-with-ipvlan_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#getting-started-with-ipvlan_configuring-and-managing-networking.html#getting-started-with-ipvlan_configuring-and-managing-networking}第 37 章 开始使用 IPVLAN {.title}
:::
本文档描述了 IPVLAN 驱动程序。
::: section
::: titlepage
# []{#getting-started-with-ipvlan_configuring-and-managing-networking.html#ipvlan-overview_getting-started-with-ipvlan}IPVLAN 概述 {.title}
:::
IPVLAN 是虚拟网络设备的驱动程序，可在容器环境中用于访问主机网络。IPVLAN
会将单个 MAC 地址公开给外部网络，无论主机网络中创建的 IPVLAN
设备数量如何。这意味着，用户可以在多个容器中有多个 IPVLAN
设备，相应的交换机会读取单个 MAC 地址。当本地交换机对它可管理的 MAC
地址总数施加限制时，IPVLAN 驱动程序很有用。
:::