| 选项                             | 始终为这个节点上的指定资源执行   |
|                                  | 资源发现。这是资源位置约束的默认 |
|                                  | `resource-discovery`{.literal}   |
|                                  | 值。                             |
|                                  |                                  |
|                                  | \* `never`{.literal} -           |
|                                  | 不为这                           |
|                                  | 个节点上的指定资源执行资源发现。 |
|                                  |                                  |
|                                  | \* `专用 -`{.literal}            |
|                                  | 仅在此节点上为指                 |
|                                  | 定资源执行资源发现（及其他标记为 |
|                                  | `专用`{.literal}节               |
|                                  | 点）。对跨不同节点的同一资源使用 |
|                                  | `exclusive`{.literal}            |
|                                  | 进行多次位置约束，会创建         |
|                                  | `resource-discovery`{.literal}   |
|                                  | 独占的节点子集。如果             |
|                                  | 某个资源在一个或多个节点上标记为 |
|                                  | `exclusive`{.literal}            |
|                                  | 发现，则该资                     |
|                                  | 源仅被允许放在那个节点的子集中。 |
+----------------------------------+----------------------------------+
:::
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
将 `resource-discovery`{.literal} 设置为 `never`{.literal} 或
`专用`{.literal} 地删除 Pacemaker
检测和停止在不应该运行的位置中运行的不需要的服务实例的能力。系统管理员可以确保该服务永远无法在没有资源发现的情况下在节点上活跃（比如卸载相关的软件）。
:::
:::
::: section
::: titlepage
# []{#assembly_determining-which-node-a-resource-runs-on-configuring-and-managing-high-availability-clusters.html#proc_configuring-location-constraint-strategy-determining-which-node-a-resource-runs-on}配置位置约束策略 {.title}
:::
在使用位置限制时，您可以配置常规策略来指定资源可在哪些节点上运行：
::: itemizedlist
-   Opt-in 集群 -
    配置一个集群，默认情况下没有资源可在任何位置运行，然后有选择地为特定资源启用允许的节点。
-   opt-out 集群 -
    配置一个集群，默认情况下，所有资源都可以在任何位置运行，然后为不允许在特定节点上运行的资源创建位置限制。
:::
根据您的需要以及集群的组成，把集群设置为 opt-in 集群还是 opt-out
集群。如果大多数资源可以在大多数节点上运行，那么如果没有选择的协议则可能会导致配置更简单。另一方面，如果大多数资源只能在一小部分节点中运行，那么选择的配置可能比较简单。
::: section
::: titlepage
## []{#assembly_determining-which-node-a-resource-runs-on-configuring-and-managing-high-availability-clusters.html#s3-optin-clusters-HAAR}配置 \"Opt-In\" 集群 {.title}
:::
要创建一个 opt-in 集群，请将 `symmetric-cluster`{.literal}
集群属性设置为 `false`{.literal}，以防止资源默认在任何地方运行。
``` literallayout
# pcs property set symmetric-cluster=false
```
为单个资源启用节点。以下命令配置位置约束，以便资源 `Webserver`{.literal}
首选节点 `example-1`{.literal} ，资源 `Database`{.literal} 首选节点
`example-2`{.literal}，如果它们的首选节点都出现故障，则这两个资源都可以切换到节点
`example-3`{.literal}。当为 opt-in
集群配置位置限制时，设置零分数可允许资源在节点上运行，而不表示首选或避免该节点。
``` literallayout
# pcs constraint location Webserver prefers example-1=200
# pcs constraint location Webserver prefers example-3=0
# pcs constraint location Database prefers example-2=200
# pcs constraint location Database prefers example-3=0
```
:::
::: section
::: titlepage
## []{#assembly_determining-which-node-a-resource-runs-on-configuring-and-managing-high-availability-clusters.html#s3-optout-clusters-HAAR}配置 \"Opt-Out\" 集群 {.title}
:::
要创建一个 opt-out 集群，请将 `symmetric-cluster`{.literal}
集群属性设置为
`true`{.literal}，以允许资源默认可在任何地方运行。如果没有显式设置
`symmetric-cluster`{.literal}，则这是默认配置。
``` literallayout
# pcs property set symmetric-cluster=true
```
以下命令将生成一个与\"配置\"集群\"配置\"中的示例相当的配置。如果它们的首选节点出现故障，这两个资源都可以切换到节点
`example-3`{.literal}，因为每个节点都有一个隐含的为 0 的 score 。
``` literallayout
# pcs constraint location Webserver prefers example-1=200
# pcs constraint location Webserver avoids example-2=INFINITY
# pcs constraint location Database avoids example-1=INFINITY
# pcs constraint location Database prefers example-2=200
```
请注意，不需要在这些命令中指定 INFINITY 分数，因为这是分数的默认值。
:::
:::
::: section
::: titlepage
# []{#assembly_determining-which-node-a-resource-runs-on-configuring-and-managing-high-availability-clusters.html#proc_setting-resource-stickiness-determining-which-node-a-resource-runs-on}配置资源以首选其当前节点 {.title}
:::
`资源具有资源粘性`{.literal} 值，您可以在创建资源时设置为 meta
属性，如配置资源 [meta
选项](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_configuring-cluster-resources-configuring-and-managing-high-availability-clusters#proc_configuring-resource-meta-options-configuring-cluster-resources){.link}
中所述。`resource-stickiness`{.literal}
值决定资源要在当前运行的节点上保留多少。Pacemaker 会将
`resource-stickiness`{.literal} 值与其他设置（例如，位置约束的 score
值）一起考虑，以确定是否将资源移至其它节点还是将其留在原地。
`资源粘性`{.literal} 值为 0
时，群集可以根据需要移动资源，以在节点之间平衡资源。这可能会导致资源在不相关的资源启动或停止时移动。由于粘性积极，资源更倾向于保持原处，只有在其他情况超出粘性时才会移动。这可能会导致新添加的节点在没有管理员干预的情况下无法获取分配给它们的任何资源。
默认情况下，创建的资源 `resource-stickiness`{.literal} 值为 0。当
`resource-stickiness`{.literal} 设置为 0 ，且没有位置约束时，Pacemaker
的默认行为是移动资源，以便在集群节点中平均分配这些资源。这可能导致健康的资源变化频率超过您的要求。要防止这种行为，您可以将
`resource-stickiness`{.literal} 的默认值设为
1。此默认值将应用到集群中的所有资源。这个小值可以被您创建的其他限制轻松覆盖，但可以防止
Pacemaker 在集群中无用地移动处于健康状态的资源。
以下命令将默认 `资源粘性`{.literal} 值设置为 1。
``` literallayout
# pcs resource defaults update resource-stickiness=1
```
由于 `资源粘性`{.literal}
值正，任何资源都不会移至新添加的节点。如果此时需要资源平衡，您可以临时将资源
`粘性值设置为`{.literal} 0。
请注意，如果位置约束分数高于 `资源粘性`{.literal}
值，集群仍然可以将健康资源移至位置约束点的节点。
如需有关 Pacemaker
如何确定资源的放置位置的更多信息，[请参阅配置节点放置策略](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_configuring-node-placement-strategy-configuring-and-managing-high-availability-clusters){.link}。
:::
:::
[]{#assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters.html}
::: chapter
::: titlepage
# []{#assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters.html#assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters}第 12 章 确定运行集群资源的顺序 {.title}
:::
要确定资源运行的顺序，您需要配置一个顺序约束。
以下显示了命令配置排序约束的格式。
``` literallayout
pcs constraint order [action] resource_id then [action] resource_id [options]
```
下表总结了配置排序限制的属性和选项。
::: table
[]{#assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters.html#idm140696036554656}
**表 12.1. 顺序约束的属性**
::: table-contents
+------------------------------+--------------------------------------+
| 项                           | 描述                                 |
+:=============================+:=====================================+
| resource_id                  | 执行某个操作的资源的名称。           |
+------------------------------+--------------------------------------+
| action                       | 对资                                 |
|                              | 源排序的操作。[*action*]{.emphasis}  |
|                              | 属性的可能值如下：                   |
|                              |                                      |
|                              | \* `start`{.literal} - Order start   |
|                              | 操作资源。                           |
|                              |                                      |
|                              | \* `stop`{.literal} -                |
|                              | 顺序停止资源操作。                   |
|                              |                                      |
|                              | \* Promote `-`{.literal}             |
|                              | 将资源从从设备（未升级）资源提升到   |
|                              | master（升级）资源。                 |
|                              |                                      |
|                              | \* `demote`{.literal} -              |
|                              | 将资源从主资源                       |
|                              | （升级）资源复制到从（未升级）资源。 |
|                              |                                      |
|                              | 如果没有指定操作，则                 |
|                              | `start`{.literal} 为默认操作。       |
+------------------------------+--------------------------------------+
| `kind`{.literal} 选项        | 如何强制实施约束。`kind`{.literal}   |
|                              | 选项可能的值如下：                   |
|                              |                                      |
|                              | \* `Optional`{.literal} -            |
|                              | 仅在                                 |
|                              | 两个资源都执行指定操作时才适用。有关 |
|                              | 可选排序的详情，[请参阅配置公告排序  |
|                              | ](https://access.redhat.com/document |
|                              | ation/en-us/red_hat_enterprise_linux |
|                              | /8/html-single/configuring_and_manag |
|                              | ing_high_availability_clusters/index |
|                              | #proc_configuring-advisory-ordering- |
|                              | determining-resource-order){.link}。 |
|                              |                                      |
|                              | \* `强制`{.literal} -                |
|                              | 始终强制实施约束（默认值）。如       |
|                              | 果您指定的第一个资源是停止或无法启动 |
|                              | ，则您指定的第二个资源必须停止。有关 |
|                              | 强制排序的信息，[请参阅配置强制排序  |
|                              | ](https://access.redhat.com/document |
|                              | ation/en-us/red_hat_enterprise_linux |
|                              | /8/html-single/configuring_and_manag |
|                              | ing_high_availability_clusters/index |
|                              | #con_configuring-mandatory-ordering- |
|                              | determining-resource-order){.link}。 |
|                              |                                      |
|                              | \* `serialize`{.literal} -           |
|                              | 确保您指定的资源不会同时发生两个     |
|                              | stop/start                           |
|                              | 操作。您指定的第一                   |
|                              | 个和第二个资源可以按其中顺序启动，但 |
|                              | 必须在启动另一个资源前完成。一个典型 |
|                              | 的用例是资源启动在主机上造成高负载。 |
+------------------------------+--------------------------------------+
| `symmetrical`{.literal} 选项 | 如果为                               |
|                              | true，则                             |
|                              | 约束的反向适用于相反动作（例如，如果 |
|                              | B 在 A 启动后启动，则 B 在 A         |
|                              | 停止前停止）。`Serial`{.literal}     |
|                              | `ize`{.literal}                      |
|                              | 不能对称的排序限制。`对于`{.literal} |
|                              | `Mandatory`{.literal} 和             |
|                              | `Optional`{.literal}                 |
|                              | kind，`Serialize`{.literal}          |
|                              | 的默认值为 `false`{.literal}。       |
+------------------------------+--------------------------------------+
:::
:::
使用以下命令从任何排序约束中删除资源。
``` literallayout
pcs constraint order remove resource1 [resourceN]...
```
::: section
::: titlepage
# []{#assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters.html#con_configuring-mandatory-ordering-determining-resource-order}配置必须的排序 {.title}
:::
一个强制的顺序约束表示，在第一次操作成功完成了第一个资源之前，不应该对第二个资源启动第二个操作。可以排序的操作是
`stop`{.literal}、`start`{.literal}，对于可升级克隆，还有
`demote`{.literal} 和 `promote`{.literal}。例如：\"A then B\"（相当于
\"start A then start B\"）表示 B 不会被启动，直到 A
成功启动为止。如果约束的 `kind`{.literal} 选项设置为
`Mandatory`{.literal}，或保留默认值，则必须排序约束。
如果 `对称`{.literal} 选项设为 `true`{.literal}，或保留为
default，则反向操作将按相反顺序排序。`start`{.literal} 和
`stop`{.literal} 操作是相反的，`降级`{.literal} `和提升`{.literal}
则相反。例如：一个对称 \"promote A\" 排序意味着 \"stop B then demote A\"
表示 A 不能被降级，直到 B 成功停止。对称排序表示 A
状态的改变可能会导致操作调度到 B。例如，给定为 \"A then
B\"，如果出现故障，B 将首先停止，A 将被停止，A 将启动，然后启动 A，那么
B 将启动。
请注意，集群会响应每个状态的更改。如果第一个资源在第二个资源启动停止操作前再次处于启动状态，则不需要重启第二个资源。
:::
::: section
::: titlepage
# []{#assembly_determining-resource-order.adoc-configuring-and-managing-high-availability-clusters.html#proc_configuring-advisory-ordering-determining-resource-order}配置公告顺序 {.title}
:::
当为排序约束指定 `kind=Optional`{.literal}