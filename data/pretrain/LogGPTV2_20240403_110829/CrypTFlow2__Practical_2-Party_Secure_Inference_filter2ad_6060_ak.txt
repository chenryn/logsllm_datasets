𝑏 to learn
0 ⊕ 𝑗0 ⊕ 𝑗1) s.t.
1
end if
15: 𝑃0 & 𝑃1 invoke an instance of(cid:0)4
(cid:1)-OT𝜂+𝛿 where 𝑃0 is the sender
1 ||𝑥1.
𝑏 = ⟨𝐴⟩Δ
𝑏 ,
and ⟨𝐴2⟩Δ
with inputs {𝑠 𝑗||𝑟 𝑗} 𝑗 and 𝑃1 is the receiver with input ⟨𝑚⟩𝐵
𝑃1 sets its output as ⟨corr⟩𝑛
16: For 𝑏 ∈ {0, 1}, 𝑃𝑏 sets ⟨𝐴⟩Δ
𝑏 ) · 𝑛0.
17: For 𝑏 ∈ {0, 1}, 𝑃𝑏 sets ⟨𝐴0⟩Δ
𝑏 − 𝑏 · 𝑑, ⟨𝐴1⟩Δ
𝑏 =Δ ⟨𝐴⟩Δ
𝑏 + 𝑏 · 𝑑.
18: for 𝑗 = {0, 1, 2} do
19:
1 ||⟨corr⟩Δ
1 .
𝑏 − (𝑥𝑏 − ⟨corr⟩Δ
𝑏 =Δ 𝑎0
𝑏 =Δ ⟨𝐴⟩Δ
For 𝑏 ∈ {0, 1}, 𝑃𝑏 invokes F int,𝛿
DReLU with input ⟨𝐴𝑗⟩Δ
𝑏 . Party 𝑃𝑏 sets ⟨𝐶′
𝑏 ⊕ 𝑏.
𝑗⟩𝐵
𝑏 = ⟨𝛾 𝑗⟩𝐵
output ⟨𝛾 𝑗⟩𝐵
For 𝑏 ∈ {0, 1}, 𝑃𝑏 invokes an instance of F 𝑛
⟨𝐶′
𝑏 and learns ⟨𝐶 𝑗⟩𝑛
𝑗⟩𝐵
𝑏 .
21: end for
𝑏 = ⟨𝐶0⟩𝑛
22: For 𝑏 ∈ {0, 1}, 𝑃𝑏 sets ⟨𝐶⟩𝑛
23: For 𝑏 ∈ {0, 1}, 𝑃𝑏 sets 𝐵𝑏 = idiv(𝑎0
24: 𝑃𝑏 sets ⟨𝑧⟩𝑛
𝑏 =𝑛 rdiv(⟨𝑎⟩𝑛
, 𝑑) + ⟨corr⟩𝑛
𝑏 ∈ {0, 1}.
𝑏 + ⟨𝐶1⟩𝑛
𝑏 + ⟨𝐶2⟩𝑛
𝑏 .
𝑏 − 𝑥𝑏 · 𝑛0, 𝑑).
𝑏 · 𝑛1 + 𝑏 − ⟨𝐶⟩𝑛
𝑏 − 𝐵𝑏, for
B2A with input
𝑏 to learn
20:
𝑏
DIV
2𝛿 − 4 1
2 𝜆 − 119 1
of communication. Thus, the overall communication of Πring,𝑛,𝑑
is
2 𝜆𝜂 + 34𝜂 + 3𝜆𝛿 + 44 1
3
2, which can be rewritten as
 𝑐𝑜, where 𝑓 2 is the
filter size, which is usually the case.
G COMPLEXITY OF OUR BENCHMARKS
marized as follows:
The complexity of the benchmarks we use in Section 7 is sum-
• SqueezeNet: There are 26 convolution layers of maximum
filter size 3 × 3 and up to 1000 output channels. The activa-
tions after linear layers are ReLUs with size of up to 200,704
12Note that this includes the case of ℓ-bit integers when 𝑛 = 2ℓ .
13The number of homomorphic additions also differ, but they are relatively very cheap.
17
• DenseNet121: There are 121 convolution layers with maxi-
mum filter dimension of 7 × 7 and up to 1000 output chan-
nels. Similar to ResNet50, between 2 convolution layers,
there is batch normalization followed by ReLU. The biggest
ReLU layer in DenseNet121 has 802,816 elements and the
combined size of all ReLU layers is 15,065,344. In addition,
DenseNet121 consists of a Maxpool, an Avgpool49 and 3
Avgpool4 layers.
H GARBLED CIRCUITS VS OUR PROTOCOLS
FOR Avgpool
In this section, we compare our protocols with garbled circuits
for evaluating the Avgpool layers of our benchmarks, and the
corresponding performance numbers are given in Table 9. On
DenseNet121, where a total of 176, 640 divisions are performed,
we have improvements over GC of more than 32× and 45× in the
LAN and the WAN setting, respectively, for both our protocols.
However, on SqueezeNet and ResNet50, the improvements are
smaller (2× to 7×) because these DNNs only require 1000 and 2048
divisions, respectively, which are not enough for the costs in our
protocols to amortize well. On the other hand, the communication
difference between our protocols and GC is huge for all three DNNs.
Specifically, we have an improvement of more than 19×, 27×, and
31× on SqueezeNet, ResNet50, and DenseNet121 respectively, for
both our protocols.
I FIXED-POINT ACCURACY OF OUR
BENCHMARKS
In this section, we show that the accuracy achieved by the fixed-
point code matches the accuracy of the input TensorFlow code. Ta-
ble 10 summarizes the bitwidths, the scales, and the corresponding
TensorFlow (TF) and fixed-point accuracy for each of our bench-
marks. Since our truncation and division protocols lead to faithful
implementation of fixed-point arithmetic, accuracy of secure infer-
ence is the same as the fixed-point accuracy.
Benchmark
Bitwidth
Scale
SqueezeNet
ResNet50
32
37
32
9
12
11
TF
Fixed
TF
Fixed
Top 1 Top 1 Top 5 Top 5
79.22
55.86
93.23
76.47
74.25
91.90
55.90
76.45
74.35
79.18
93.21
91.88
DenseNet121
Table 10: Summary of the accuracy achieved by fixed-point
code vs input TensorFlow (TF) code.
Benchmark
SqueezeNet
ResNet50
DenseNet121
Benchmark
SqueezeNet
ResNet50
DenseNet121
Garbled Circuits
Our Protocol
LAN WAN Comm LAN WAN Comm
1.84
0.2
2.35
0.4
17.2
158.83
36.02
96.97
6017.94
2.0
3.9
179.4
0.8
0.8
3.5
0.1
0.1
0.5
(a) over Z2ℓ
Garbled Circuits
Our Protocol
LAN WAN Comm LAN WAN Comm
0.2
1.92
3.82
0.4
19.2
214.94
39.93
106.22
6707.94
2.2
4.2
198.2
0.9
1.0
4.4
0.1
0.1
0.6
(b) over Z𝑛
Table 9: Performance comparison of Garbled Circuits with
our protocols for computing Avgpool layers. Runtimes are in
seconds and communication numbers are in MiB.
elements per layer. All ReLU layers combined have a size of
2,033,480. Additionally, there are 3 Maxpool layers and an
Avgpool169 layer (Avgpool with pool size 169).
• ResNet50: There are 53 convolution layers of maximum filter
size 7 × 7 and a peak output channel count of 2048. Convo-
lution layers are followed by batch normalization and then
ReLUs. There are 49 ReLU layers totaling 9,006,592 ReLUs,
where the biggest one consists of 802,816 elements. More-
over, ResNet50 also has Maxpool layers and an Avgpool49.
18