Interested readers can view the IANA IP Options List at 
www.iana.org/assignments/ip-parameters. 
To understand why this is a problem, consider a scenario where this code is in a 
firewall that is attempting to strip out source routing options (LSRR and SSRR). The 
code iterates through each option looking for the LSRR or SSRR option and then 
terminates when it sees the EOL option (0x00). However, only the bottom 5 bits are 
checked. This contrasts with how end hosts process the same optionsthey will also 
continue processing until encountering what they think is an EOL option, but end 
hosts define an EOL as an option with all 8 bits set to 0. So if the option value 0x80 is 
present in the packet, the firewall would interpret it as an EOL option, and the end 
host just assumes it's some unknown option and continues processing more option 
bytes. The result is that you could supply an IP option with the option value 0x80 with 
a valid source routing option following it, and the firewall wouldn't catch it. 
Now consider this code in a client host with the same requirementsa firewall having to 
strip out source routing options. In this case, the firewall is looking for an 8-bit source 
routing option, such as 0x89. If the value 0x09 is sent, the firewall treats it as an 
unknown option, and the end host sees it as a source route because it has masked off 
the top three bits. 
Unique Problems 
As always, lists of typical errors aren't exhaustive, as unique implementations can 
bring about unique problems. To illustrate, this section presents an example that was 
present in the Solaris 8 IP stack. 
The Solaris code for processing IP options for datagrams destined for a local interface 
had an interesting problem in the way it calculated the options length. A code snippet 
is shown: 
#define IP_VERSION 4    /* edited for brevity */ 
#define IP_SIMPLE_HDR_LENGTH_IN_WORDS 5 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
859 
uint8_t 
ipoptp_first(ipoptp_t *optp, ipha_t *ipha) 
    { 
    uint32_t totallen; /* total length of all options */ 
    totallen = ipha->ipha_version_and_hdr_length - 
     (uint8_t)((IP_VERSION ipoptp_next = (uint8_t *)(&ipha[1]); 
    optp->ipoptp_end = optp->ipoptp_next + totallen; 
    optp->ipoptp_flags = 0; 
    return (ipoptp_next(optp)); 
} 
This code treats the first two fields of the IP header as a single field with two 
components, which isn't uncommon, as both fields occupy four bits in the same byte. 
However, when the code obtains the IP header length from this byte, it does so by 
subtracting the standard IP version value (which is 4, and because it occupies the 
high four bits in this byte, 0x40) from the byte, as well as the static value 
IP_SIMPLE_HDR_LENGTH_IN_WORDS, defined elsewhere as 5. In essence, the developer 
assumes that subtracting the static value 0x45 from the first byte of the IP header will 
leave you with the size of the IP options trailing the basic header. Not masking off the 
version field is a dangerous practice though; what if the IP version is 15 (0xF)? The 
code's calculation could erroneously conclude that 744 bytes worth of IP options are 
appended to the IP header! Of course, a sanity check earlier in the code ensures that 
the size of the packet received is at least the size specified in the total length and 
header length fields. However, this other sanity check is done differentlyit does mask 
off the header length field correctly, so this mistake can lead to processing random 
bytes of kernel memory (and certain IP options can be used to corrupt kernel 
memory). Alternatively, setting the IP version to 0 (or any value less than 4), causes 
the option length calculation to yield a negative result! This result causes a kernel 
crash because the IP checksum is validated before IP options are processed, so the 
code checksums a large amount of memory and eventually tries to access a location 
out of bounds. 
Note 
Actually, an examination of the code shows that an IP version of 0 causes an 
underflow but does not result in a large checksum. However, the code shown is from 
an updated version of Solaris. Earlier versions performed a very large checksum if the 
IP version was 0, 1, 2, or 3. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
860 
IP packets with an incorrect version probably aren't routed. Even if they are, they 
wouldn't make it through some earlier processing code in the Solaris IP stack. 
However, Solaris by default processes IP packets encapsulated in IP packets if the 
inner IP packet has the same source and destination as the outer IP packet. In this 
case, the inner packet is delivered locally, and the version is never verified on the 
inner IP packet. Again, earlier versions of Solaris were vulnerable to this attack but 
sanity checks are now performed on the version of encapsulated IP packets. 
Source Routing 
IP is a connectionless protocoldatagrams can be routed to a destination in any way 
that intermediate routing devices see fit. The source routing options give the sender 
some control over the path a packet takes. There are two kinds of options: loose 
source and record route (LSRR) and strict source and record route (SSRR). Both 
contain a list of IP addresses the packet should travel through on its way to the 
destination. 
The SSRR option provides the exact list of routers the packet should traverse when it 
makes its way from the source to the destination. These routers have to be directly 
connected to each other, and the path can't omit any steps. This option is fairly 
impractical because of the maximum size of the IP header; a packet could specify only 
nine steps in a path, which isn't many. 
The LSRR option, however, simply lists the routers the packet should pass through on 
its way to the destination. These routers don't have to be directly connected, and the 
packet can pass through other routers as it follows the path outlined in the option. 
This option is more flexible because it allows the intermediate routers to figure out the 
path to the each subsequent hop on the list. 
Processing 
Both source routing options contain the list of IP addresses and a pointer byte, which 
specifies the offset in the option where the next intermediate hop is. Here's how 
source routing options work: 
1.  The destination IP address of the IP header is set to be the first intermediate hop. 
2.  When that destination is reached, the next intermediate hop is taken out of the IP 
option and copied over the destination address, and the pointer byte is advanced 
to point to the next hop in the option 
3.  Step 2 is repeated until the final destination is reached. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
861 
The pointer byte is related to the option length (and to the IP header length and total 
length) because it's supposed to point inside the option, not before or after. When 
auditing code that processes source routes, you should ensure that the pointer byte 
is within the specified bounds, especially because during processing, an IP option 
often modifies bytes the pointer is pointing at. Also, like the IP option length, the 
pointer is a single-byte field, which means type conversions such as the following 
could be performed on it: 
char *optionbytes; 
int offset; 
offset = optionbytes[2]; 
Code auditors need to be aware of possible sign extensions that could cause the offset 
integer to take on a negative value and have the offset point into a previous option, 
the IP header itself, or before it somewhere in memory. Such an invalid access can 
have serious consequences, including memory corruption, unexpected packet 
rerouting, or invalid memory access. 
Additionally, it is quite easy for developers to forget to adequately validate the length 
of routing options when constructing code designed to handle them, which can lead to 
accessing memory out of bounds. This error is especially significant for source routing 
options because the offset byte is often modified during options processing, when it's 
updated to point to the next element in the list. 
To give you an idea of some of the options processing bugs that have occurred in 
real-world applications in the past, consider this. Several years ago, a contumacious 
researcher working at NAI named Anthony Osborne discovered a vulnerability in the 
Windows IP stack related to an invalid source routing pointer. Windows hosts with 
multiple interfaces are normally configured to reject source routed packets. It turned 
out, however, that setting the pointer past the option allowed the source route to be 
processed. With a carefully crafted packet, an attacker could leverage multihomed 
Windows systems to participate in source routing attacks on firewalls. (Details of this 
bug are available at www.securityfocus.com/bid/646/info.) You will see in Chapter 
15(? [????.]) that source routing is especially significant for attacking firewalls, 
primarily because source routed packets have one of their most basic attributes 
altered at each IP address in the option listthe destination address. 
Fragmentation 
As you have seen, IP datagrams can have a maximum size of 64KB. (The total length 
field is 16 bits, so the maximum size it can specify is 65535 bytes.) In practice, 
however, physical interfaces attached to routers and endpoints often impose much 
more limited size restrictions because they can send only fairly small frames across 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
862 
the network. This size restriction is dictated by what type of physical interface is 
sending the frame. The consequence of physical interface size restrictions is that IP 
datagrams can be generated for transmissions that are too large to be sent across the 
physical network, or IP datagrams can arrive on one interface of a router that are too 
large to pass across to another interface. To help deal with this problem, the IP 
protocol allows fragmenting large datagrams into smaller pieces so that they can be 
sent across any medium, regardless of its maximum transmission unit (MTU). This 
mechanism is called IP fragmentation. 
Fragmenting an IP datagram involves dividing a large datagram into smaller chunks 
(fragments) that are suitable for transmission. Each fragment contains a payload that 
constitutes some portion of the original datagram, and all fragments are transmitted 
separately. They are then combined (reassembled) at the destination host to 
re-create the original datagram. In addition to the sending host fragmenting a 
datagram, any intermediate routing hop can fragment a datagram (or fragment a 
fragment of a datagram) to be able to send it on to the destination host. No 
intermediate hops perform reassembly, however; that task is left up to the 
destination host. 
Note 
Actually, arbitrary routers that IP packets are traversing are unable to perform 
reassembly because IP packets aren't required to arrive at a destination via the same 
route. Therefore, there's no guarantee that each fragment will pass through a certain 
router. The exception, of course, is when fragments arrive at the network the 
destination host is a part of, where it's quite common to have firewalls and IPSs or 
IDSs perform a virtual reassembly of the received fragments to ensure that someone 
isn't using fragmentation to try to sneak illegal traffic through the firewall. 
Basic IP Fragment Processing 
Fragmenting an IP packet is fairly straightforward. You split the data in a large IP 
packet into several smaller fragments. Each fragment is sent in a separate IP packet 
with its own IP header. This fragment looks the same as the original IP header, except 
for a few variables that tell the end host how to reassemble the fragment. The end 
host can tell which incoming fragments belong to the same original datagram because 
they all share the same IP ID (among other attributes). 
Specifically, each fragment for a datagram has the following fields in common: IP ID, 
source IP address, destination IP address, and IP protocol. A few fields are used to 
track how to put the fragments back together. First, if the MF ("more fragments") flag 
in the fragment offset field is set, the end host should expect more fragments to 
arrive for the datagram that have data beyond the end of the current fragment. To 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
863 
put it another way, if a received fragment has data starting at offset 128 from the 
original datagram and finishing at offset 256 and the MF bit is set for the fragment, 
then another fragment should arrive containing data at an offset of 256 or higher. The 
last fragment doesn't have the MF flag set, which tells the end host the fragment 
represents the end of the original IP datagram. 
Each fragment sets the fragment offset field to indicate where in the reassembled 
datagram the data from this fragment should appear. The offset field is multiplied by 
8 to find out where in the completed datagram this fragment's payload should appear. 
So if the offset field is set to 1, the payload should appear 8 bytes into the completed 
datagram when it's reassembled. If the offset field is 2, the payload appears 16 bytes 
into the completed datagram, and so on. 
Finally, the total length field in the IP header is changed to represent the fragment's 
length. The end host determines the real total length of the original datagram by 
waiting until it's seen all the fragments and pieced them all together. 
To better understand where fragmentation might be used, consider the case where a 
router needs to fragment an IP datagram to send it over one of the networks it's part 
of, because the datagram is larger than the outgoing interface's MTU. The datagram 
is 3,500 bytes and the outgoing interface's MTU is 1,500 bytes, so the maximum 
amount of data that can be transmitted in each packet is 1,480 bytes (because the IP 
header is a minimum of 20 bytes). This datagram is split up into four smaller IP 
fragments, and they are sent over the network separately, as shown in Figure 14-2. 
Figure 14-2. IP fragmentation 
[View full size image] 
If all the fragments arrive at the destination IP address, the end host reassembles 
them into the original datagram. If any fragment doesn't make it, the whole datagram 
is discarded, and the source host is free to try to send the datagram again. 
Pathological Fragment Sets 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
864 
A normal set of fragments generally looks like Figure 14-2. All fragments except for 
the final one have the MF flag set. The IP offsets are laid out contiguously so that 
every value from 0 to the end of the final fragment is assigned data. A few subtle 
attacks can be performed against IP fragment reassembly code by deviating from the 
expected layout. The following sections describe these attacks. 
Data Beyond the End of the Final Fragment 
The final fragment of a datagram queue has a nonzero offset, and the MF bit is clear. 
This fragment is supposed to contain data located at the end of the datagram, so it 
should have the highest IP offset of all the fragments. 
Attackers could send fragments in an order that puts the final fragment in the middle 
or beginning of the set of fragments. If the reassembly code takes certain shortcuts in 
calculating the datagram's total length, this reordering can lead to incomplete sets of 
fragments being reassembled in ways advantageous to the attackers. Consider the 
following reassembly code: 
/*     Add a fragment to the queue 
    Returns: 
         0: added successfully, queue incomplete 
         1: added successfully, queue complete 
*/ 
int fragment_add(struct fragment_chain *chain, 
    struct packet *pkt) 
{ 
    struct iphdr *iph = pkt->ip_header; 
    int offset, end, length; 
    offset = ntohs(iph->frag_offset) * 8; 
    end = offset + ntohs(iph->tot_len)  iph->hl data, offset, end); 
    chain->datalength += length; 
    if(!(iph->flags & IP_MF))      /* Final Fragment  
                                     MF bit clear */ 
        return chain->datalength == end; 
    return 0; 
} 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
865 
For this example, assume that the add_to_chain() function returns the amount of 
data that was added to the queue, not including overlapped sections (discussed in 
"Overlapping Fragments" later in this chapter). When a final fragment is received, its 
end (offset + length) is compared with the total amount of bytes received for the 
datagram. If the final fragment is received last, these numbers should be equal, and 
the reassembly code knows it has completed reassembly of this datagram. To see 
how this code is intended to function, look at this valid normal set of fragments. Say 
you send this fragment first: 
Offset: 0 | MF: Set | Len: 16 
The data is added to the chain, and chain->datalength is incremented to 16. MF is set, 
indicating more fragments, so the function returns 0 to indicate that reassembly isn't 
finished. Say you send this fragment next: 
Offset: 16 | MF: Set | Len: 16 
This data is added to the chain, and chain->datalength is incremented to 16. Again, 
reassembly isn't complete because there are more fragments to come. Now say you 
send the final fragment: 
Offset: 32 | MF: Clear | Len: 16 
When the preceding code processes this fragment, it calculates an offset of 32, an 
end of 48, and a length of 16. chain->datalength is incremented to 48, which is equal 
to end. It's the final fragment because IP_MF is clear, and chain-> datalength is equal 
to end. The IP stack knows it has finished reassembly, so it returns a 1. Figure 14-3 
shows the set of fragments. 
Figure 14-3. IP fragmentation reassembly 
Now walk through a malicious set of fragments. This is the first fragment: 
Offset: 32 | MF: Set | Len: 16 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
866 
The data is added to the chain, and chain->datalength is incremented to 16. MF is set, 
indicating there are more fragments. Next, the final fragment is sent but placed 
before the first fragment: 
Offset: 16 | MF: Clear | Len: 16 
The data is added to the chain, and chain->datalength is incremented to 32. MF is 
clear, indicating it's the last fragment, and end is 32, which is equivalent to 
chain->datalength. Therefore, the IP stack believes that reassembly is complete, 
even though no data for offsets 0 to 16 has been sent in the set of fragments. The 
malicious set of fragments looks like Figure 14-4. 
Figure 14-4. Malicious IP fragments 
The result of this reassembly depends on the implementation of the rest of the IP 
stack. Some consequences could include the following: 
Including uninitialized kernel memory in the reassembled packet 
Interpreting protocol headers incorrectly (because the fragment containing 
the next protocol header is missing) 
Integer miscalculations based on attributes of the fragments that lead to 
memory corruption or reading uninitialized kernel memory 
Most important, any firewall or IDS/IPS this fragment chain traversed would interpret 
the fragments completely differently and make incorrect decisions about whether to 
allow or deny it (unless these devices had the same bug). 
Multiple Final Fragments 
Another mistake fragmentation reassembly applications make is that they don't deal 
with multiple final fragments correctly. Applications often assume that only one 
fragment of a fragment queue appears with the MF bit clear. This assumption can lead 
to broken logic for deciding when a fragment queue is complete and can be passed up 
to the next layer (usually TCP or UDP). Usually, the result of a bug like this is a 
fragment queue being deemed complete when it has gaps from the datagram that still 
haven't arrived. The advantage this type of bug gives an attacker depends on the 
application. For OS protocol stacks, being able to assemble a datagram with holes in 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
867 
it is quite useful to attackers because any firewall or IDS performing virtual 
reassembly interprets the datagram differently to the end host. 
For example, an IP datagram containing a TCP segment is fragmented and sent to a 
host through a firewall. Imagine that a bug exists whereby it can be marked as being 
complete when it's missing data at offset 0 (the beginning of the TCP header). With 
this knowledge, attackers could send fragments that exploit the bug as well as a 
trailing bogus fragment at offset 0. This bogus fragment which can be set with 
different TCP ports to pass a firewall's rule set. Because the firewall in front of the end 
host evaluates whether the fragment set is allowed based on the 0-offset fragment, it 
will make a policy decision based on the one part of the fragment queue that the 
destination host is going to completely ignore. As a resut, an unauthorized connection 
or block of data could be sent through the firewall. If the application containing a 
reassembly bug is a firewall or other security product instead of a host OS IP stack, 
the implications can be much worse, as this bug allows attackers to bypass firewall 
rules to reach any destination host that the firewall is supposed to protect (depending 
on the constraints of the vulnerability). 
Overlapping Fragments 
As you know, each IP fragment provides a portion of a complete datagram, but how 
to handle overlapping fragments hasn't been mentioned yet. The IP specification 
vaguely says that fragments can contain overlapping data ranges, which in retrospect, 