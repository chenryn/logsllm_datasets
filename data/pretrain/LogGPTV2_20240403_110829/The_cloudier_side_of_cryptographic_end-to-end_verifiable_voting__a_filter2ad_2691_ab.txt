β = gmyr. As a downside, m must be recovered from gm by
computing the discrete logarithm, although this reasonably
eﬃcient when m is small. This provides us with the following
additive homomorphism:
Enc(a) · Enc(b) =⟨
gra grb , ga+xra gb+xrb⟩
= ⟨gr′ , ga+b+xr′⟩
= Enc(a + b).
Helios uses this additive property to implement a homomor-
phic counter construction in which encrypted ballots can be
homomorphically tallied by computing the product of their
respective ciphertexts. Observe Enc(0) = ⟨gr, grx⟩, taken
along with public key gx form a DH tuple. Similarly if
one were to claim ⟨α, β⟩ = Enc(m), then ⟨α, β/gm⟩ likewise
forms a DH tuple. Helios makes extensive use of proofs of
DH tuples due to Chaum and Pedersen [14], which use the
standard three move commit-challenge-response ﬂow. The
proof is made non-interactive by the heuristic due to Fiat
and Shamir [23]. To provide soundness, the Fiat-Shamir
heuristic generates the challenge value by hashing a context,
which typically would include the proof’s inputs, and ideally
information about the statement being proven. Bernhard et
al. [8] suggest how best to select an appropriate context for
Helios. Given two Boolean statements S1, S2 a logical dis-
junction of the form S1 ∨ S2 is accomplished following the
326
strategy of Cramer et al. [17] in which one proof is real, and
the other is simulated, where the proof is executed out of
the usual order, allowing the prover to pick the challenge
before making the commitment, thereby allowing them fake
the proof.
The Fiat-Shamir heuristic is used to generate an overall
challenge coverall, and prover can be forced to produce at least
one real challenge creal by the veriﬁer enforcing:
creal + csim = coverall.
The Helios Ballot.
Without loss of generality consider a contest between two
candidates, Alice and Bob. The voter is allowed to vote for
up to one candidate i.e., may vote for either Alice, Bob, or
neither (i.e., abstain). Helios uses a homomorphic counter
approach in which the voting preference, v ∈{ 0, 1}, is en-
crypted separately for each candidate. To indicate a vote
for Alice, the voter set EncAlice = Enc(1), otherwise the voter
would set EncAlice = Enc(0). Let EncAlice and EncBob be en-
cryptions of votes for Alice and Bob respectively. The voter
then issues three disjunctive non-interactive proofs that the
encryptions are well formed, i.e.,
• π1 =-EncAlice = Enc(0). ∨-EncAlice = Enc(1).
• π2 =-EncBob = Enc(0). ∨-EncBob = Enc(1).
• π3 =-EncAlice · EncBob = Enc(0). ∨
-EncAlice · EncBob = Enc(1).
The Helios ballot is the tuple ⟨EncAlice, EncBob,π 1,π 2,π 3⟩.
To homomorphically tally the votes for each candidate,
the election oﬃcials multiply the respective ciphertests. Sup-
pose Enci
Alice = Enc(vn) are all the
encrypted Alice votes received during the election. Alice’s
vote total is homomorphically tallied as:
Alice = Enc(v1), . . . ,Enc n
n$i=1
Enci
Alice = Enc: n)i=1
vi;.
The same process is used to homomorphcally tally Bob’s
votes. Each counter is decrypted and, of course, the candi-
date with the greatest number of votes wins.
4. CRYPTOGRAPHIC ATTACKS
Recall that Helios works in the cyclic group Gq and as-
sumes the discrete logarithm problem is hard. This assump-
tion not only typically requires q to be large and prime, but
that any group elements are in Gq. Unlike a safe prime
group in which almost exactly half the values in the range
2 . . . p − 1 are in a group of orderq , Helios uses a 256-bit
subgroup of a 2048-bit group Z∗p. The probability a random
element is in Gq, therefore, is:
P (x ∈ Gq|x ∈$ Z∗p) =
1
21792
This would seem to provide a lot of opportunity for a klepto-
graphic channel, such as a voter trying to encode additional
information into another subgroup of their ballot ciphertext.
This is where the correctness proofs come into play. All
things considered, they do a good job of detecting problems
within the conﬁnes of Gq.
327
As we discovered, however, Helios does not check the un-
derlying assumptions about the group, or element member-
ship in the group, which allowed us to construct the following
attacks.
4.1 Poison Ballot Attack
In this attack a disgruntled voter wishes to disrupt the
election by preventing the tally from being computed by
submitting a maliciously formed “poison” ballot. Normally
a voter encrypts their preference for each candidate and con-
structs the associated proofs. Suppose the voter wishes to
vote for Alice. An honest voting client would compute the
following encryption:
EncAlice(1) = ⟨gr, g1+rx⟩
(1)
Suppose the homomorphic tally of votes for Alice is a cipher-
text ⟨αs,β s⟩. As the ﬁrst step of decryption, the election
s = (grs )x, and prove the correct-
oﬃcial would compute αx
ness by proving ⟨g, αs, y,α x
s⟩ forms a DH tuple. An attacker,
however, could cause this proof to fail by intentionally forc-
ing the tuple to not be a DH tuple. The only degree of
freedom the voter has is their encrypted ballot, which is
protected by the proof of correctness.
Exploit. The idea here is to select a generator h of a sub-
group of order k such that k|p − 1. The Helios prime p pro-
vides us with with a number of subgroups to choose from,
but for eﬃciency we selected h to have order k = 2. The
malicious voter then computes the encryption:
EncAlice′(1) = ⟨hgr, g1+rx⟩
(2)
The next problem to malicious voter must overcome is the
proof of correctness. As shown in Figure 1 it must be the
case that
but instead we have
grreal ?= (gr)creal A
grreal ?= (hgr)creal A
But if we were to have a situation in which creal ≡ 0 modk ,
then hcreal ≡ 1 modp , meaning the h term eﬀectively dis-
appears.
In the simulated proof the attacker can directly
cause csim to have this property. The attacker then checks
if creal ≡ 0 modk . If so they proceed, otherwise they rewind
the proof and try again. Following the same strategy they
must also ensure that the h term disappears in the sum-
mation proof. With a valid-looking proof complete, the
voter submits the poisoned ballot and waits. Once again
let the homomorphic sum be ⟨αs,β s⟩. The election oﬃcial
now computes αx
s = (hgrs )x. If x ̸≡ 0 modk then it is easy
to see
⟨g, αs, y,α x
s⟩ = ⟨g, hgrs , hgxrs gx⟩,
which is clearly not a DH tuple, meaning the veriﬁcation of
the decryption proof will fail. If x ≡ 0 modk , however, then
the h term will disappear as it did in the proofs, and the de-
cryption will verify. This happens with probability 1/k, and
thus k can be adjusted to make the desired outcome as likely
as possible depending on the subgroup options of p.
Impact and Mitigation. We implemented the attack and
conﬁrmed it would prevent the tally from being decrypted.
The impact is high since any eligible voter can perform this
Simulated proof of DH tuple for ⟨g, gr, gx, grx⟩
Prover
csim, rsim, w ←$ Zq
A = grsim (gr)−w
B = (gx)rsim (grx)−w
Veriﬁer
csim, rsim, A, B
grsim ?= (gr)csim A
(gx)rsim ?= (grx)csim B
Real proof of DH tuple for ⟨g, gr, gx, grx⟩
Prover
w ←$ Zq
A = gw
B = (gr)w
creal = coverall − csim mod q
rreal = crealr + w mod q
Veriﬁer
creal, rreal, A, B
grreal ?= (gr)creal A
(gx)rreal ?= (grx)creal B
Figure 1: Disjunctive non-interactive proofs of DH tuple.
attack from the voting client. We worked with the Helios
designers to ensure that the server checks all relevant pa-
rameters are in Gq before checking the proof.
4.2 Rigging an Election & Proving You Didn’t
In this attack a malicious election authority seeks to rig
an election, i.e., alter the vote totals to an arbitrary re-
sult.Nominally Helios prevents this by requiring (a) all bal-
lots included in the homomorphic tally have accepting proofs
of correctness, and (b) the decryption of the homomorphic
tally has an accepting proof of correctness. Universal veri-
ﬁability arises from the fact that anyone in the public can
run the proof veriﬁcation and re-compute the homomorphic
tally. Although we assume the election trustee has the abil-
ity to decrypt any individual ballot, they nominally do not
have the ability to break the soundness of the proofs.
This attack is stronger than the conventional notion of
ballot stuﬃng since in the case it is possible not only to add
spurious votes, but subtract them as well!
Exploit. Initially we considered attacking the decryption
proof, but in our single-trustee model, decryption occurs
on the Helios server itself. As an alternative to maliciously
modifying server code (which is outside our threat model),
we considered the possibility of the election oﬃcial submit-
ting a maliciously constructed ballot instead. We believe
this is a plausible scenario since often election oﬃcials are
themselves voters in an election.
First the malicious trustee begins by creating a set of cus-
tom domain parameters ⟨p, q, g, y, x⟩ in which the expected
properties still apply |p| = 2048, q|p − 1, g, y ∈ Gq and
y = gx. The only exception is we select q, and hence |Gq| to
be as small as possible while still being able to accommodate
the ballots of all potential voters. The default choice of p
could be used to create a homomorphic counters that could
accommodate up to around 16-million votes since,
p − 1 = 2 · 32 · 5 · 13 · 23 · 647 ·-256-bit factor. · . . .
This would be large enough to conduct an election in all but
the largest cities on Earth, and even then we could reason-
ably expect homomorphic counters would be divided into
smaller regions. The malicious election trustee constructs
these purposefully weak parameters and uploads in a JSON
ﬁle to the Helios server using built-in parameter upload page.
Similar to the poison ballot attack, the trustee will at-
tempt to cherry-pick challenge values to achieve their goal
of submitting an arbitrary ballot with a valid proof. As an
added bonus, because we’re working in a small group, the
trustee can decrypt the intermediate homomorphic sum of
the other ballots in order to know what to encrypt to achieve
the desired election result. Suppose we have an election with
two voters: a honest voter, and the malicious trustee. Sup-
pose the honest voter casts a vote for Alice:
⟨EncAlice = Enc(1), EncBob = Enc(0)⟩.
But suppose the trustee wants Bob to win. If the trustee
simply casts a vote for Bob, then the result will be a tie.
Instead the trustee will cast two votes for Bob, and minus
one vote for Alice:
⟨EncAlice = Enc(−1), EncBob = Enc(2)⟩
328
such that the homomorphic tally will have the desired out-
come of a landslide victory for Bob:
⟨EncAlice = Enc(1 − 1 = 0), EncBob = Enc(0 + 2 = 2)⟩.
But the trustee is on the hook now to produce accepting
proofs of correctness. Recall for each candidate, as well as
the combined sum, this involves proving a ciphertext is ei-
If Enc(m) for m ̸= 0 and m ̸= 1
ther Enc(0) or Enc(1).
the proof will nominally fail. Recall from Figure 1 that the
veriﬁer conﬁrms a DH tuple by checking
Instead we have
(gx)r ?= (grx)cB.
(gx)r ?= (gm+rx)cB.
and the equality does not hold.
could select a challenge c ≡ 0 modq then we have
If, however, the trustee
and therefore
resp = cr + w mod q
= w mod q
(gx)resp ?= (gm+rx)cB
(gx)w ?= (gcm+crx)(gx)w
gxw = gxw.
Thus veriﬁcation success, independent of the value of the
homomorphic counter Enc(m). The trustee must then en-
sure that all 6 real and simulated challenges are 0 mod q.
Once again the simulated challenges can be directly chosen
to have this property. The real challenges, being essentially
a random value in Zq, will have this property with proba-
bility P = 1
q . All 3 real challenges (Alice, Bob, Sum) will
simultaneously have this property with probability P = 1
q3 .
Once again the trustee attempts to generate such challenges,
rewinding if any real challenge does not meet the criteria and
trying again until successful. Figure 2 shows a screenshot of
our ballot stealing attack.
Impact and Mitigation. We implemented the attack and
conﬁrmed we could produce arbitrary election tallies with
accepting proofs. The impact is severe since a malicious
election oﬃcial can not only (a) completely bypass the cryp-
tographic protections of the cryptographic audit to produce
whatever result they wish, but can also (b) produce an ac-
cepting proof that the tally was correct. It might rightly be
pointed that this could be mitigated by independent parties
writing their own implementations of the veriﬁcation proto-
col. We are presently aware of only one such independent
implementation for Helios veriﬁcation, and did not ﬁnd ev-
idence that it would catch this attack.6 Again we worked
with the Helios designers to ensure that the domain param-
eters p, q implement a cyclic group Gq of large prime order,
and that g, y ∈ Gq.
5. ATTACKS ON BALLOT SECRECY
We demonstrate the random number generator (RNG)
used in the Helios client-side voting booth exhibits a bias,
allowing an attacker to distinguish between real and simu-
lated votes with non-negligible advantage. This breaks the
6https://github.com/google/pyrios
329
Figure 2: Screen capture of a rigged Helios election.
One ballot contained a vote for Option A. Another
ballot contained two votes for Option B, and -1 votes
for Option A.
formal security notion of ciphertext indistinguishably in He-
lios, and appears to aﬀect all past elections. Based on the
particular group parameters chosen by the Helios designers,
an attacker observing only the public cryptographic audit
trail can correctly guess how a voter voted approximately
53% of the time in a two-candidate race. Depending on the
group parameters used, we show the attacker can be suc-
cessful up to 67% of the time. We show the attacker has
negligible advantage when safe-prime groups are used. In-
terestingly, however, we discovered that if safe-prime groups
were used in Helios, a separate implementation ﬂaw in the
RNG would reveal ballot selections with overwhelming prob-
ability.
5.1 Helios RNG Bias
Like other cryptographic implementations (such as TLS),
random-number generators (RNGs) and pseudo-random num-
ber generators (PRNGs) are critical components not only for
privacy, but also integrity and authenticity. Although RNGs
and PRNGs are fundamentally diﬀerent beasts, in practice
RNGs are often implemented as a hybrid: entropy is col-
lected, extracted, and run through a PRNG to boost the
output length, and clean up any unanticipated deviations
from the intended output distribution. For simplicity we
simply refer to the hybrid case as an RNG. Helios uses ran-
dom number generation for a variety of cryptographic pur-
poses: random factors for Elgamal encryption, trustee pri-
vate keys, commitment exponents, and as a challenge value
in the proof of DH tuple.
Let R be an RNG that accepts a value q and returns a
random value in the range [0, q − 1]. We deﬁne the bias