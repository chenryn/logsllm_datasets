to participate in order to sign a message. On the other
hand, the design that each node u simply give a copy of sku
to all the other nodes (cf. the red-color solid lines in Figure
326
liberately normalized so that 0 ≤ AR(G, D, A) ≤ 1.
In-
deed, the benchmark scheme corresponds to AR(G, D∗, A) =
0, and the aforementioned design that each node u shares
sku using a (|V |,|V |) secret sharing method corresponds to
AR(G, D∗, A) = 1. Given the above deﬁnition, it is natu-
ral to say that a design D is “good” if AR(G, D, A) > 0 and
“bad” otherwise. It is also instrumental that a larger positive
AR(G, D, A) means a better attack-resilience.
Deﬁnition 2. (availability) As before, denote by G
the set of all possible social networks, and by D the set of
possible designs on how the users hold private key shares of
each other. Denote by L the set of possible node uptime and
downtime distributions, and by R+ the system time (with
system initialization time being zero). The availability of
design D ∈ D with respect to social network G ∈ G and node
uptime and downtime distribution L ∈ L at time t > 0 is
deﬁned to be a function AV : G × D × L × R+ → [0, 1] such
that
(cid:80)
AV(G, D, L, t) =
u∈V Ru(G, D, L, t)
,
|V |
where Ru(G, D, L, t) is the probability that private key sku
is available at time t.
In the special case Ru(G, D, L, t) = 1 for any u ∈ V
and any t, namely that every node is always “up,” we have
AV(G, D, L, t) = 1. In general, however, 0 < Ru(G, D, L, t) <
1 due to the peer-to-peer nature of social networks.
3.1 Security Design
Suppose 0 ≤ α ≤ 1 is a system-wide parameter. It would
be natural for a user u to share her private key sku via a
((cid:100)α · (deg(u, G) + 1)(cid:101), deg(u, G) + 1) secret sharing, namely
to distribute her key shares to her trusted ones and her-
self. However, this design may not always be desirable.
To see this, let us consider the simple case of |V | = 3 and
α = 0.5, where each node trusts the others, and thus shares
her private key to all the three nodes using a (2, 3) secret
sharing. In this case, compromising any two nodes immedi-
ately causes the compromise of all three private keys (i.e.,
the resulting security is worse than the one oﬀered by the
benchmark scheme). To avoid this drawback, we recommend
the following design D based on a two-tier secret sharing
method.
* Initialization: A (2, 2) threshold secret sharing method
is used to split private key sku into two shares sku1 and
sku2. Then, a ((cid:100)α· deg(u, G)(cid:101), deg(u, G)) threshold se-
cret sharing method is used to split sku2 into deg(u, G)
shares (sku2,1, . . . , sku2,deg(u,G)). As a result, u holds
sku1 and erases sku as well as sku2, and the ith neigh-
bor of u holds sku2,i (which is received from u over a
private channel).
* Operation: The private signing function corresponding
to sku is fulﬁlled via the participation of u as well as
at least (cid:100)α · deg(u, G)(cid:101) of her friends. This is done
without recovering sku.
Note that many threshold signature schemes can be adapted
to accommodate the above two-tier secret sharing method.
Indeed, such two-tier design has been utilized in some previ-
ous study (e.g., [36]). For completeness, we mention that an
eﬃcient construction can be based on DSS [23] by combining
Figure 1: Attack-resilience vs. availability
1) leads to the best availability because any single node
alone is able to sign a message. However, this design oﬀers
the worst attack-resilience because compromise of any
single node causes the compromise of all the private keys.
In summary, the above discussion suggests the following:
The measures should be deﬁned in a way such that a good
design should lead to attack-resilience that is better than
the one oﬀered by the benchmark scheme (e.g., the green-
color curves in Figure 1), and a bad design should lead to
attack-resilience corresponding to the red-color dashed
curve in Figure 1. Now we present the formal deﬁnitions.
Deﬁnition 1. (attack-resilience) Denote by G the set
of all possible social networks. For a given social network
G = (V, E), each node u ∈ V has a pair of public and private
keys (pku, sku) corresponding to some secure digital signa-
ture scheme. Denote by D the set of possible designs (which
are speciﬁed by conﬁguration parameters) on how the users
hold private key shares of each other, and by A the set of
all possible attacks (e.g., the strategies of choosing nodes to
compromise). Let S(G, D, A, T ) : G × D × A × N → N be
the function that returns the number of compromised pri-
vate keys when 0 ≤ T ≤ |V | nodes are compromised accord-
ing to A ∈ A. Denote by D∗ the benchmark design men-
tioned above (i.e., nodes do not hold any private key shares
of each other), then it is clear that S(G, D∗, A, T ) = T for
any A ∈ A. For any design D ∈ D, its attack-resilience
under attack A is deﬁned to be
0<T≤|V |(S(G, D∗, A, T ) − S(G, D, A, T ))
(cid:88)
(|V | − 1)/2
2
|V |(|V | − 1)
0<T≤|V |
(T − S(G, D, A, T ))
(cid:80)
AR(G, D, A)
1|V |
=
=
Now some issues deserve a special mention. Strictly speak-
ing, the deﬁnition captures the average distance between
the line S(G, D∗, A, T ) = T and the curve S(G, D, A, T ).
The “average” is motivated to accommodate the following:
Since the defender never knows in advance the number of
nodes that will get compromised, it makes sense in prac-
tice to consider the average consequences caused by the
compromise of nodes. Moreover, attack-resilience is de-
327
S: # of compromised private keysT: # compromised usersS = T: no threshold crypto (benchmark)best attack-resilience but worst availability (corresponding to complete graph, namely each user shares it key to all the other users)bad attack-resiliencegood attack-resilienceworst attack-resilience but best availability (each user gives a copy of its private key to all other users)better attack-resiliencethe schemes in [21, 12], or be based on Schnorr signatures
[32] by combing the schemes in [25, 16], or be based on RSA
[30] by combining the schemes presented in [20, 29].
4. UNDERSTANDING
ATTACK-RESILIENCE
In this section we investigate the power of attack strate-
gies, and the impact of social network topology and security
design on attack-resilience.
4.1 Identifying the Optimal Attack Strategy
To accommodate the worst-case scenario, we need to iden-
tify the most powerful attack strategy, which intuitively
should allow the adversary to compromise as many private
keys as possible by compromising as few nodes as possible.
This is relevant because compromising more computer may
increase the probability the adversary being caught, and
may cause the adversary more resources. It turns out that
a special case of this optimization problem, namely when
α = 1, can be modeled as follows:
Let G = (V, E) be an undirected graph and 1 ≤
s ≤ |V | be a parameter. We want to ﬁnd V1, V2 ⊆
V , where |V1| = s and V2 is the neighbor ver-
tices of V1, namely V2 = {v ∈ V − V1 : (u, v) ∈
E for some u ∈ V1}, such that |V2| is minimized.
This problem turns out to be NP-hard because solving a
special case of it, namely when s ≤ |V |/2, already suﬃces
to solve the NP-hard problem known as vertex expansion:
Let G = (V, E) be an undirected graph. The
vertex expansion cV (G) of a graph G = (V, E)
on n vertices is
cV (G) =
min
X⊂V,|X|≤n/2
|N (X) − X|
|X|
,
where N (X) = {y ∈ V : (x, y) ∈ E for some x ∈
X}.
Note that there is no known polynomial-time algorithm that
approximates this quantity up to a constant factor [3].
Given that the problem of identifying the optimal attack
strategy is NP-hard, we aim to heuristically identify the rel-
atively powerful attack. For this purpose, we introduce the
concept of “remainder graphs,” which serves as a heuristic
tool for adaptively selecting nodes to compromise.
Recall that the two-tier secret sharing method indicates
that sku is compromised if and only if (i) node u is com-
promised, and (ii) at least K(u) = (cid:100)α · deg(u, G)(cid:101) neigh-
bors of u are compromised. Intuitively, the ith remainder
graph of G, denoted by Gi = (Vi, Ei), reﬂects the state
of G0 = G = (V, E) after i nodes have been compromised,
where i = 1, 2, . . .. The trick is that Vi diﬀers from Vi−1 only
when the compromise of the ith node causes the compromise
of some private key sku, as in that case node u and its as-
sociated edges are eliminated from Gi−1 = (Vi−1, Ei−1).
Figure 2 gives a precise description of the evolution of
remainder graphs in relation to two of the following ﬁve
natural attack strategies (i.e., only the two strategies are
based on remainder graphs), from which are hope to identify
a relatively more powerful attack. The ﬁve strategies diﬀer
in their criteria of selecting nodes to compromise.
328
A1: The adversary always picks the highest degree node in
remainder graphs to compromise, namely that the ith
compromised node vi has the property that vi ∈ Vi−C
and deg(vi, Gi−1) = maxu∈Vi−1−C{deg(u, Gi−1)}. In
the case that there are multiple nodes with the high-
est degree, a random one is chosen.
(For a set Z,
“z ←R Z” means z is drawn from Z uniformly at ran-
dom. When |Z| = 1, the only element in Z is drawn
with probability 1.) The intuition behind this attack is
that compromising the highest degree nodes in remain-
der graphs causes the compromise of many private key
shares, and thus may cause the compromise of many
private keys that have yet to be compromised. This
also justiﬁes why we eliminate in remainder graphs
the nodes whose private keys have been compromised,
namely that compromising more private key shares of
already compromised private keys does not beneﬁt the
attacker at all.
A2: This is the same as in A1, except that we always
consider the original graph G (rather than remainder
graphs). Speciﬁcally, the ith compromised node vi has
the property that deg(vi, G) = maxu∈V −C{deg(u, G)}
and vi ∈ Vi − C. This serves as a basis for evaluating
the gain in power of attack A1 due to the adoption of
remainder graphs.
A3: The adversary always picks the lowest degree nodes in
remainder graphs to compromise, namely that the ith
compromised node vi has the property that vi ∈ Vi−C
and deg(vi, Gi−1) = minu∈Vi−1−C{deg(u, Gi−1)}.
If
there are multiple nodes with the lowest degree, a ran-
dom one is chosen. The intuition is that compromising
such a node may cause the compromise of more private
keys, because they have a small number of private key
shares.
A4: This is the same as in A3, except that we always
consider the original graph G (rather than remainder
graphs). Speciﬁcally, the ith compromised node vi has
the property that deg(vi, G) = minu∈V −C{deg(u, G)}
and vi ∈ Vi − C. This serves as a basis for evaluating
the gain in power of attack A3 due to the adoption of
remainder graphs.
A5: The adversary always randomly picks a non-compromised
node in G = (V, E) to compromise. Note that this is
equivalent to always picking a random node from Vi−C
with respect to the remainder graph Gi = (Vi, Ei).
In order to identify the often, if not always, more power-
ful attack, we conducted a simulation study. We considered
G = (V, E) with |V | = 100 but three possible social net-
work topologies, namely regular graph, random graph, and
powerlaw graph (both random graph and powerlaw graph
topologies may exhibit the small-world phenomenon [24, 8]).
The node degree for the regular graph is 4, and the average