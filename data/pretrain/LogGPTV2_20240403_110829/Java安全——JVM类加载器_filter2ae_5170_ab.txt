        private static String derectory ;
        private  static String key = "aaaabbbbccccdddd";
        private  static String ivParameter = "AAAABBBBCCCCDDDD";
        public FileUtils (String path){
            derectory = path;
        }
        public static byte[] doFile(int code, File file, String key, String ivParameterm, String filename) throws Exception {
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(
                    file));
            byte[] bytIn = new byte[(int) file.length()];
            bis.read(bytIn);
            bis.close();
            byte[] raw = key.getBytes("ASCII");
            SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            IvParameterSpec iv = new IvParameterSpec(ivParameterm.getBytes());
            if (0 == code) {
                cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);
            } else if (1 == code) {
                cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);
            }
            byte[] bytOut = cipher.doFinal(bytIn);
            File outfile = new File(derectory + "/" + filename);
            BufferedOutputStream bos = new BufferedOutputStream(
                    new FileOutputStream(outfile));
            bos.write(bytOut);
            bos.close();
            return bytOut;
        }
        public static void encryptfile(File file, String key, String ivParameter, String filename) throws Exception {
            doFile(ZERO, file, key, ivParameter, filename);
        }
        public static byte[] decryptfile(File file, String key, String ivParameter, String filename) throws Exception {
            return  doFile(ONE, file, key, ivParameter, filename);
        }
        public static byte[] loadfile(String name) throws Exception {
            File file = new File(derectory + name.replace('.', '/') + ".class");
            return decryptfile(file, key, ivParameter, "decrypt_tmp_file");
        }
        public static void main(String[] args) {
            try {
                File file = new File(derectory + "myclassloadertest/Test.class");
                String fileName = "myclassloadertest/TestCrypt.class";
                encryptfile(file, key, ivParameter, fileName);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
自己编写的classloader只需要使用其中loadfile函数就可以找到文件并自动解密。自定义ClassLoader代码如下
    package myclassloadertest;
    public class MyClassLoader extends ClassLoader{
        private FileUtils fu;
        public static void main(String[] args) throws ClassNotFoundException {
            ClassLoader classloader=new MyClassLoader("mypath");
            Class classx =  classloader.loadClass("myclassloadertest.Test");
            System.out.println(classx);
        }
        public  MyClassLoader(String path){
            fu = new FileUtils(path);
        }
        @Override
        public Class loadClass(String name) throws ClassNotFoundException {
            Class c = findLoadedClass(name);
            if (c != null) {
                return c;
            } else {
                ClassLoader parent = this.getParent();//获取父装载器
                if (parent != null){
                    try {
                        c = parent.loadClass(name);//实现双亲委派机制
                    }catch (ClassNotFoundException x){}
                }
                if(c == null){
                    try {
                         byte[] classData = fu.loadfile(name);//获取字节码
                        c = defineClass(name,classData,0,classData.length);//加载类
                        return c;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                  }
            }
            return c;
        }
    }
在实验的过程中要将原来的Test.java删除，这样JDK
AppClassLoader就找不到Test类，从而使用FileUtils加载密文件。自定义的ClassLoader也有parent节点，这是因为在初始化加载器的时候会调用父类ClassLoader中的构造方法，该方法中包含着parent属性赋值等操作，如下图所示
那么定义过自己的类加载器后，加载器之间的关系如下所示，MyClassLoader指定了自己的父加载器为当前类的加载器。
## 0x05 类加载器在冰蝎、 蚁剑木马中的应用
在网络安全领域中类加载器也发挥着重要的作用，ClassLoader加载字节码的功能可以有效的绕过静态查杀和流量查杀。
由于一句话木马的历史悠久，对一句话木马的防护也多种多样。市面上也出现了很多安全防护机制，一类基于文件特征码检测；另外一类基于网络流量特征检测。
如果单纯的依靠一句话木马进行控守和命令执行，流量特征较为单一，比较容易识别。流量加密虽然能够绕过网络流量监测，但是木马目标上落地后因其代码特征很容易被查杀软件杀掉。
因此可以使用ClassLoader的动态加载字节码的功能，让无害功能落地，动态的加载来自网络中的加密字节码。既能绕过流量监测，也能绕过杀软查杀。其中用到的类加载器功能较为简单，只需调用defineClass加载解析字节码即可。
上述代码定义了U类加载器，收到来自http协议中backdoor参数数据后使用g方法加载，并通过newInstance的方式创建对象后调用equals方法。关于木马如何使用相对来说更简单了，只需要编写一个恶意类，实现equals方法，该方法中包含要执行的代码。具体可参考
## 总结
通过系统的学习ClassLoader源码及应用，解决了之前在分析Shiro等反序列化漏洞以及木马编写中遇到的一些问题。自己编写过自定义类加载器，使得笔者对双亲委派机制有了更深刻的理解。写到这里之前挖的类加载器的坑就这么给填平了，如有问题多多指正。
## 参考文章