context                |   
query                  |   
query_pos              |   
location               | LogCheckpointStart, xlog.c:8340  
application_name       |   
-[ RECORD 2 ]----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
-----------------------------------------------------  
log_time               | 2019-07-20 14:02:27.258+08  
user_name              |   
database_name          |   
process_id             | 10766  
connection_from        |   
session_id             | 5d2aea65.2a0e  
session_line_num       | 20  
command_tag            |   
session_start_time     | 2019-07-15 06:40:05+08  
virtual_transaction_id |   
transaction_id         | 0  
error_severity         | LOG  
sql_state_code         | 00000  
message                | checkpoint complete: wrote 124 buffers (0.0%); 0 WAL file(s) added, 0 removed, 0 recycled; write=12.484 s, sync=0.000 s, total=12.487 s; sync files=48, longest=0.000 s,   
average=0.000 s; distance=218 kB, estimate=1753715 kB  
detail                 |   
hint                   |   
internal_query         |   
internal_query_pos     |   
context                |   
query                  |   
query_pos              |   
location               | LogCheckpointEnd, xlog.c:8422  
application_name       |   
```  
## 使用plpgsql创建file_fdw表，更加简便  
```  
do language plpgsql $$  
declare  
  v_datadir text;  
  v_logdir text;  
begin  
  select setting into v_datadir from pg_settings where name='data_directory';  
  select setting into v_logdir  from pg_settings where name='log_directory';  
  create schema IF NOT EXISTS _sys ;  
  set search_path=_sys,public,"$user";  
  create extension IF NOT EXISTS file_fdw with schema _sys;  
  CREATE SERVER IF NOT EXISTS pglog FOREIGN DATA WRAPPER file_fdw;    
  execute format('CREATE FOREIGN TABLE IF NOT EXISTS pglog (    
    log_time timestamp(3) with time zone,    
    user_name text,    
    database_name text,    
    process_id integer,    
    connection_from text,    
    session_id text,    
    session_line_num bigint,    
    command_tag text,    
    session_start_time timestamp with time zone,    
    virtual_transaction_id text,    
    transaction_id bigint,    
    error_severity text,    
    sql_state_code text,    
    message text,    
    detail text,    
    hint text,    
    internal_query text,    
    internal_query_pos integer,    
    context text,    
    query text,    
    query_pos integer,    
    location text,    
    application_name text    
    ) SERVER pglog    
    OPTIONS ( program %L , format ''csv'')' ,  
  format('find %s/%s -type f -name "*.csv" -exec cat {} \;', v_datadir, v_logdir)   
  );   
end;  
$$;  
```  
是不是很方便呢？以上执行完，自动创建pglog外部表，查询它，可以看到日志的内容。换行没有问题。  
```  
-[ RECORD 15 ]---------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
-----------------------------------------------------  
log_time               | 2019-07-20 14:47:35.418+08  
user_name              | postgres  
database_name          | postgres  
process_id             | 65215  
connection_from        | [local]  
session_id             | 5d31f011.febf  
session_line_num       | 11  
command_tag            | idle  
session_start_time     | 2019-07-20 14:30:09+08  
virtual_transaction_id | 3/20443  
transaction_id         | 0  
error_severity         | LOG  
sql_state_code         | 00000  
message                | statement: SELECT n.nspname as "Schema",                                                                                                                                   
                                                     +  
                       |   p.proname as "Name",                                                                                                                                                     
                                                     +  
                       |   pg_catalog.pg_get_function_result(p.oid) as "Result data type",                                                                                                          
                                                     +  
                       |   pg_catalog.pg_get_function_arguments(p.oid) as "Argument data types",                                                                                                    
                                                     +  
                       |  CASE p.prokind                                                                                                                                                            
                                                     +  
                       |   WHEN 'a' THEN 'agg'                                                                                                                                                      
                                                     +  
                       |   WHEN 'w' THEN 'window'                                                                                                                                                   
                                                     +  
                       |   WHEN 'p' THEN 'proc'                                                                                                                                                     
                                                     +  
                       |   ELSE 'func'                                                                                                                                                              
                                                     +  
                       |  END as "Type"                                                                                                                                                             
                                                     +  
                       | FROM pg_catalog.pg_proc p                                                                                                                                                  
                                                     +  
                       |      LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace                                                                                                         
                                                     +  
                       | WHERE p.proname OPERATOR(pg_catalog.~) '^(.*ordi.*)$' COLLATE pg_catalog.default                                                                                           
                                                     +  
                       | ORDER BY 1, 2, 4;  
detail                 |   
hint                   |   
internal_query         |   
internal_query_pos     |   
context                |   
query                  |   
query_pos              |   
location               | exec_simple_query, postgres.c:1045  
application_name       | psql  
```  
## 参考  
man find  
man psql  
[《PostgreSQL Oracle 兼容性之 psql sqlplus 变量 & set variable》](../201907/20190718_01.md)    
[《使用SQL查询数据库日志 - file_fdw , csvlog , program , find》](../201904/20190418_01.md)    
https://www.postgresql.org/docs/12/runtime-config-logging.html#RUNTIME-CONFIG-LOGGING-CSVLOG  
https://www.postgresql.org/docs/12/file-fdw.html  
https://www.postgresql.org/docs/12/functions-matching.html#POSIX-EMBEDDED-OPTIONS-TABLE  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")