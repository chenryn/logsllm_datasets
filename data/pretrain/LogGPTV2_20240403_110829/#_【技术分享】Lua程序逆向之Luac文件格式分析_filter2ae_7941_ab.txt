        end
        local function foo2() 
            n = n + 10 
        end
        return foo1,foo2
    end
**Create()** 函数包含了foo1()与foo2()两个子函数，因此，这里sizep的值为2。 **proto**
表示子函数信息，它与父函数使用一样的结构体信息。因此，可见Lua的函数部分使用了一种树式的数据结构进行数据存储。
**Upvaldescs** 与 **UpValueNames**
共同描述了Lua中的UpValue信息。当函数中包含子函数或团包，并且访问了函数的参数或局部变量时，就会产生UpValue。如上面的
**Create()** 函数，foo1()与foo2()两个子函数都访问了参数n，因此，这里会产生一个UpValue，它的名称为“n”。
**Upvaldesc** 的定义如下：
    typedef struct {
        uchar instack;
        uchar idx;
    } Upvaldesc;
**instack** 字段表示UpValue是否在栈上创建的，是的话取值为1，反之为0。 **idx**
字段表示UpValue在UpValue数据列表中的索引，取值从0开始。
**UpValueNames** 存放了当前函数中所有UpValue的名称信息，它的定义如下：
    typedef struct {
        uint32 size_upvalue_names;
        UpValueName upvalue_name[];
    } UpValueNames;
size_upvalue_names字段表示 **UpValueName** 条目的数目，每一条 **UpValueName**
存放了一个UpValue的名称，它的定义如下：
    typedef struct {
        uint64 name_size;
        char var_str[];
    } UpValueName;
**name_size** 字段是符号串的长度， **var_str** 为具体的字符串内容。
**SourceName** 存放了当前Luac编译前存放的完整文件名路径。它的定义如下：
    typedef struct {
        uint64 src_string_size;
        char str[];
    } SourceName
**SourceName** 的定义与 **UpValueName** 一样，两个字段分别存放了字符串的长度与内容。
**Lines** 存放了所有的行号信息。它的定义如下：
    typedef struct {
        uint32 sizelineinfo;
        uint32 line[];
    } Lines;
**sizelineinfo** 字段表示当前函数所有的行总数目。 **line** 字段存放了具体的行号。
**LocVars** 存放了当前函数所有的局部变量信息，它的定义如下：
    typedef struct {
        uint32 sizelocvars;
        LocVar local_var[];
    } LocVars;
**sizelocvars** 字段表示局部变量的个数。local_var字段是一个个的局部变量，它的类型LocVar定义如下：
    typedef struct {
        uint64 varname_size;
        char varname[];
        uint32 startpc;
        uint32 endpc;
    } LocVar;
**varname_size**
字段是变量的名称长度大小。varname字段存放了变量的名称字符串内容。startpc与endpc是两个指针指，存储了局部变量的作用域信息，即它的起始与结束的地方。
到此，一个Luac的文件格式就讲完了。
**010 Editor模板语法**
****
为了方便分析与修改Luac二进制文件，有时候使用 **010 Editor** 编辑器配合它的文件模板，可以达到很直观的查看与修改效果，但 **010
Editor** 官方并没有提供Luac的格式模板，因此，决定自己动手编写一个模板文件。
**010 Editor** 支持模板与脚本功能，两者使用的语法与C语言几乎一样，只是有着细微的差别与限制，我们看看如何编写010 Editor模板文件。
点击 **010 Editor** 菜单Templates->New Template，新建一个模板，会自动生成如下内容：
    //------------------------------------------------    //--- 010 Editor v8.0 Binary Template
    //
    //      File: 
    //   Authors: 
    //   Version: 
    //   Purpose: 
    //  Category: 
    // File Mask: 
    //  ID Bytes: 
    //   History: 
    //------------------------------------------------
**File** 是文件名， **010 Editor** 使用.bt作为模柏树的后缀，这里取名为luac.bt即可。
**Authors** 是作者信息。
**Version** 是当前模板的版本，如果将最终的模板文件上传到 **010 Editor** 的官方模板仓库， **010 Editor**
会以此字段来判断模板文件的版本信息。
**Purpose** 是编写本模板的意图，内容上可以留空。
**Category** 是模板的分类， **010 Editor** 中自带了一些内置的分类，这里选择 **Programming** 分类。
**File Mask**
是文件扩展名掩码，表示当前模板支持处理哪种文件类型的数据，支持通配符，如果支持多种文件格式，可以将所有的文件扩展名写在一行，中间使用逗号分开，这里设置它的值为“*.luac,
*.lua”。
**ID Bytes** 是文件开头的Magic Number，用来通过文件的开头来判断是否为支持处理的文件，这里的取值为“1B 4c 75 61”。
**History** 中可以留空，也可以编写模板的更新历史信息。
最终，Luac.bt的开头内容如下：
    //------------------------------------------------    //--- 010 Editor v8.0 Binary Template
    //
    //      File: luac.bt
    //   Authors: fei_cong(PI:EMAIL)
    //   Version: 1.0
    //   Purpose: 
    //  Category: Programming
    // File Mask: *.luac, *.lua
    //  ID Bytes: 1B 4c 75 61
    //   History: 
    //      1.0   fei_cong: Initial version, support lua 5.2.
    //
    // License: This file is released into the public domain. People may 
    //          use it for any purpose, commercial or otherwise. 
    //------------------------------------------------
**010 Editor** 模板与C语言一样，支持C语言的宏、数据类型、变量、函数、代码语句、控制流程等，还支持调用常见的C语言函数。
数据类型上，支持的非常丰富，官方列出BS的支持的数据类型如下：
    - 8-Bit Signed Integer - char, byte, CHAR, BYTE
    - 8-Bit Unsigned Integer - uchar, ubyte, UCHAR, UBYTE
    - 16-Bit Signed Integer - short, int16, SHORT, INT16
    - 16-Bit Unsigned Integer - ushort, uint16, USHORT, UINT16, WORD
    - 32-Bit Signed Integer - int, int32, long, INT, INT32, LONG
    - 32-Bit Unsigned Integer - uint, uint32, ulong, UINT, UINT32, ULONG, DWORD
    - 64-Bit Signed Integer - int64, quad, QUAD, INT64, __int64
    - 64-Bit Unsigned Integer - uint64, uquad, UQUAD, UINT64, QWORD, __uint64
    - 32-Bit Floating Point Number - float, FLOAT 
    - 64-Bit Floating Point Number - double, DOUBLE 
    - 16-Bit Floating Point Number - hfloat, HFLOAT 
    - Date Types - DOSDATE, DOSTIME, FILETIME, OLETIME, time_t (for more information on date types see Using the Inspector)
在编写模板时，同一数据类型中列出的类型，使用上是一样，如下面的代码片断：
    local int a;
    local int32 a;
    local long a;
表示的都是一个32位的整型变量，这三种声明方式表达的含义是相同的。声明变量时，需要在前面跟上local关键字，如果没有跟上local，则表明是在声明一个占位的数据字段。所谓占位的数据字段，指的
**010 Editor** 在解析模板中的变量时，会对占位的数据部分使用指定的数据类型进行解析，如下面的代码：
    typedef struct {
        GlobalHeader header;
        Proto proto;
    } Luac;
    Luac luac;
**010 Editor**
在解析这段代码时，会按照Luac中所有的占位数据字段信息解析当前的二进制文件。GlobalHeader与Proto的声明也中如此，没有加上local的数据字段，都会被0
**10 Editor** 解析并显示。
除了支持基本的C语言格式结构体struct外， **010 Editor**
模板语法还加入了一些特性，比如字段注释与格式、结构体压缩与处理函数。看如下的结构体信息：
    typedef struct {
        uint64 varname_size ;
        char varname[varname_size];
        uint32 startpc ;
        uint32 endpc ;
    } LocVar ;
这是按照前面介绍的 **LocVar** 结构体信息，按照 **010 Editor**
模板语法处理过后的效果。为字段后添加format可以指定它的输出格式为十六进制hex，默认是10进制；为字段后添加comment可以指定它的注释信息，这两个字段可以同时存在，在中间加入一个逗号即可；可以为结构体指定read来指定它的类型读取函数，也可以指定write来指定它的类型写入函数，read与write有着自己的格式，如下所示：
    string LocVarRead(LocVar &val) {
        return val.varname;
    }
所有的read与write返回值必须为string，参数必须为要处理的结构体类型的引用。注意： **010 Editor**
模板语法不支持指针，但支持引用类型，但引用类型不能作为变量与函数的返回值，只能作为参数进行传递，在编写模板代码时需要注意。
除了以上的基础类型外， **010 Editor**
模板还支持字符串类型string，这在C语言中是不存在的！它与char[]代表的含义是相同的，而且它支持的操作比较多，如以下字符串相加等操作：