# IOT安全（二）——再探stm32
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
上一篇文章中我们实现了stm32的gpio操作，这次我们将更进一步，继续完成对题目的复现。
通过之前的学习相信大家都掌握了学习阅读官方手册的能力，在本篇中为了节约篇幅不再进行对寄存器的位、寄存器代码编写的详细说明，而是着重讲解原理和背后的知识。
## 简单的时钟树
对于任何的计算机来说，时钟都是其至关重要的一环，在任何stm32的程序启动前，都必须要进行时钟的初始化操作，好在stm32的时钟较为简单，这次我们的目标就是编写我们自己的时钟初始化函数，来替换掉stm32cube为我们生成的代码。我们先来看一下手册中给出的时钟树图：
可以看到时钟树整体并不复杂，但是因为stm32提供了包括usb、dma在内的多种功能，所以会用到多种频率不同的时钟信号，因此图中有很多涉及到时钟频率缩放的部件，这是我们要关注的一个点，此外，可以看到外设部分几乎都是有sysclk进行简单变化后得到的，所以sysclk也是我们关注的重点。
从最左边开始，首先是osc_in、osc_out、osc32_in、osc32_out、mco五部分引脚，其中带osc的我们在上一篇文章中利用stm32cube自动生成过，osc代表是来自外部的晶振，晶振通过高频震荡来提供有规律的信号，也就形成了时钟信号。实际上，在芯片内部也有晶振来提供时钟信号，但由于复杂原因，芯片内部往往难以集成高频率、高精度的晶振，无法发挥芯片的全部性能，这就需要我们在外部添加高频高精度的晶振来提供时钟信号。
mco是时钟输出引脚，可以将时钟信号输出，通过配置相应的寄存器即可实现对不同时钟信号的输出。我们暂时用不到这个功能。
从osc接入就是真正的时钟源了，外部晶振带来的时钟有两种：
  * HSE是高速外部时钟的简写，晶振频率可取范围为4~16MHz
  * LSE是低速外部时钟的简写，一般采用32.768KHz
上面我们也说了，除了外部接入的，还有内部集成的，也是两种：
  * HSI是高速内部时钟的简写，由内部RC振荡器产生，频率为8MHz，非常非常的不稳定。
  * LSI是低速内部时钟的简写，同样由内部RC振荡器产生，频率大约为40KHz
首先来看下半部分，对于LSI来说，它分了两条线
  * IWDG（独立看门狗）的时钟源。
  * 用来作为RTC（即实时时钟）的可选项，在时钟树中，梯形表示可选项，上图中可以看到RTC有三个可选项。
这里简单说一下实时时钟是个啥，它“实时”的意思是它掉电后还继续运行，不受限制，除此之外，他就是个普通的计时器。功能很简单，但它的电路很巧妙，有兴趣的同学可以查查看看，它经常被用来实现时间戳、记录当地时间等功能。
对于LSE来说，它只是作为RTC的一个可选项，除此之外，HSE也作为RTC其中一个选项，不过其频率需要除以128，将原来高频的信号，通过电气元件，成倍的降低它们的频率，最终将原来的频率降低到我们想要的大小，也就是”分频“的意思，这是整个时钟树中最常出现的部件，图中的prescaler是“预分频”的意思，就是在某个需要的信号前对其输入信号进行“分频”。
再来看上半部分，首先就是pll这个概念，它的全称是锁相环倍频输出，所谓”锁相“即保持处理后的信号与原来的基准信号的相位一致，而”倍频“就是说要提高频率。从图中可以看到，HSE经过处理后到PLLXTPRE部件，然后和HSI共同组成pllsrc的候选，最终经过PLLMUL放大频率（最高可达16倍），输出pll时钟，在别的资料中往往把pll时钟和上面提到的四种时钟共同作为stm32的时钟源，但是我们可以看到，实际上pll时钟最终还是来自HSE和HSI，pll在整个时钟树中最大的作用就是拉高了信号的频率，HSE虽然名字中带有高速，但对于某些设备（比如USB）来说还是远远不够用的，所以需要pll来倍频。
再往后就是sysclk，即系统时钟，听这名字就知道它的地位，基本上所有的外设的时钟信号，都是通过sysclk的分频得到的。它同样有三个候选人，分别是HSI、pll时钟、HSE，从图中可以看到它最高可以达到72MHZ。
而下面的css是系统时钟的监视器，因为系统时钟和外设息息相关，一旦发生问题将导致整个系统的奔溃，所以设置了css，当HSE失效时（HSE毕竟是来自外部的晶振，失效的可能性要远大于HSI），它会自动让系统时钟的来源切换为HSI，从而保证系统的稳定。
再向左看就到了外设部分的，usb很简单，只是经过了分频就得到了最终的信号，其余的主要有两条“线”
  * AHB，全称是Advanced High performance Bus，是一种总线，有别的部件挂载在上面，它频率高速度快，因此是“高性能”的总线，有点类似计算机的北桥，主要连接高速设备，比如内存、dma等。它是支持多主设备的总线，可以有多个主模块，信息由主模块流向从模块。
  * ABP，全称是Advanced Peripheral Bus，它类似计算机的南桥，性能、频率较低，连接的都是SPI，I2C等设备，可以看到，APB分为了ABP1、ABP2两个设备，这是因为它不像AHB那样支持多主模块，它的主模块就是ABP，ABP再有两个从模块ABP1、ABP2，这两个从模块分别负责不同的设备挂载。
最后来看看mco，可以看到它来源自HSE、HSI、PLL、SYSCLK，我们可以通过设置寄存器，来让它输出这四种时钟信号。
到此为止我们就梳理完了整个stm32的时钟树，千万不要忘了上一篇文章中我们说过的重要的一点：stm32的一切都离不开寄存器，时钟也是如此，查阅手册我们可以看到时钟相关的寄存器。
RCC_CR、RCC_CFGR是其中的关键，它们是所有部件的“头头”，它们来控制诸如HSE、PLL等设备的启动与否，分频、倍频的大小，此外，APB、AHB等等都有相应的寄存器，我们需要按照前一篇文章的办法，把他们统统写出来。这里因为代码是在是太多了，所以我只放出我写的一小部分
    #ifndef __SysInt
    #define __SysInt
    #define PERIPHY_BASE ((uint32_t)0x40000000)
    #define ABP1PERIPHY PERIPHY_BASE
    #define ABP2PERIPHY (PERIPHY_BASE + 0x10000)
    #define AHBPERIPHY_BASE (PERIPHY_BASE + 0x20000)
    #define RCC_BASE (AHBPERIPHY_BASE + 0x1000)
    #define __IO volatile
    typedef unsigned int uint32_t;
    void SetClockConfig(void);
    typedef struct 
    {
        uint32_t HSION     :1;
        uint32_t HSIRDY    :1;
        uint32_t Reserved0 :1;
        uint32_t HSITRIM   :5;
        uint32_t HSICAL    :8;
        uint32_t HSEON     :1;
        uint32_t HSERDY    :1;
        uint32_t HSEBYP    :1;
        uint32_t CSSON     :1;
        uint32_t Reserved1 :4;
        uint32_t PLLON     :1;
        uint32_t PLLRDY    :1;
        uint32_t Reserved2 :6;
    }CR_Bit;
    typedef struct 
    {
        uint32_t SW       :2;
        uint32_t SWS      :2;
        uint32_t HPRE     :4;
        uint32_t PPRE1    :3;
        uint32_t PPRE2    :3;
        uint32_t ADCPRE   :2;
        uint32_t PLLSRC   :1;
        uint32_t PLLXTPRE :1;
        uint32_t PLLMUL   :4;
        uint32_t USBPRE   :1;
        uint32_t Reverse0 :1;
        uint32_t MCO      :3;
        uint32_t Reverse1 :5;
    }CFGR_Bit;
    typedef struct 
    {
        uint32_t LSIRDYF   : 1;
        uint32_t LSERDYF   : 1;
        uint32_t HSIRDYF   : 1;
        uint32_t HSERDYF   : 1;
        uint32_t PLLRDYF   : 1;
        uint32_t Reverse0  : 2;
        uint32_t CSSF      : 1;
        uint32_t LSIRDYIE  : 1;
        uint32_t LSERDYIE  : 1;
        uint32_t HSIRDYIE  : 1;
        uint32_t HSERDYIE  : 1;
        uint32_t PLLRDYIE  : 1;
        uint32_t Reverse1  : 3;
        uint32_t LSIRDYC   : 1;
        uint32_t LSERDYC   : 1;
        uint32_t HSIRDYC   : 1;
        uint32_t HSERDYC   : 1;
        uint32_t PLLRDYC   : 1;
        uint32_t Reverse2  : 2;
        uint32_t CSSC      : 1;
        uint32_t Reverse3  : 8;
    }CIR_Bit;
    typedef struct 
    {
        uint32_t LSION : 1;
        uint32_t LSIRDY : 1;
        uint32_t Reverse0 : 14;    
        uint32_t Reverse1 : 8;
        uint32_t RMVF : 1;
        uint32_t Reverse2 : 1;
        uint32_t PINRSTF : 1;
        uint32_t PORRSTF : 1;