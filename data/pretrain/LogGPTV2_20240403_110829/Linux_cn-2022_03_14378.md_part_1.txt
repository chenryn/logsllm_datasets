---
author: Chris Hermansen
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2722
date: '2022-03-21 09:25:38'
editorchoice: false
excerpt: Java 和 Groovy 中的映射都是非常通用的，它允许关键字和值为任意类型，只要继承了 Object 类即可。
fromurl: https://opensource.com/article/22/3/maps-groovy-vs-java
id: 14378
islctt: true
largepic: /data/attachment/album/202203/21/092532ykbhkq36vbr3bpzg.jpg
permalink: /article-14378-1.html
pic: /data/attachment/album/202203/21/092532ykbhkq36vbr3bpzg.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 14411
reviewer: wxy
selector: lujun9972
summary: Java 和 Groovy 中的映射都是非常通用的，它允许关键字和值为任意类型，只要继承了 Object 类即可。
tags:
- Groovy
- 映射
thumb: false
title: 在 Groovy 和 Java 中创建并初始化映射的不同
titlepic: true
translator: lkxed
updated: '2022-03-21 09:25:38'
---
> 
> Java 和 Groovy 中的 映射   map 都是非常通用的，它允许 关键字   key 和 值   value 为任意类型，只要继承了 `Object` 类即可。
> 
> 
> 
![](/data/attachment/album/202203/21/092532ykbhkq36vbr3bpzg.jpg "Woman using laptop concentrating")
我最近在探索 Java 与 Groovy 在 [创建并初始化 列表   List ](https://opensource.com/article/22/1/creating-lists-groovy-java) 和 [在运行时构建 列表   List ](https://opensource.com/article/22/2/accumulating-lists-groovy-vs-java) 方面的一些差异。我观察到，就实现这些功能而言，Groovy 的简洁和 Java 的繁复形成了鲜明对比。
在这篇文章中，我将实现在 Java 和 Groovy 中创建并初始化 映射   Map 。映射为开发支持根据  关键字   key  检索的结构提供了可能，如果找到了这样一个关键字，它就会返回对应的  值   value 。今天，很多编程语言都实现了映射，其中包括 Java 和 Groovy，也包括了 Python（它将映射称为  字典   dict ）、Perl、awk 以及许多其他语言。另一个经常被用来描述映射的术语是  关联数组   associative array ，你可以在 [这篇维基百科文章](https://en.wikipedia.org/wiki/Associative_array) 中了解更多。Java 和 Groovy 中的映射都是非常通用的，它允许关键字和值为任意类型，只要继承了 `Object` 类即可。
### 安装 Java 和 Groovy
Groovy 基于 Java，因此你需要先安装 Java。你的 Linux 发行版的仓库中可能有最近的比较好的 Java 和 Groovy 版本。或者，你也可以在根据上面链接中的指示来安装 Groovy。对于 Linux 用户来说，[SDKMan](https://sdkman.io/) 是一个不错的代替选项，你可以使用它来获取多个 Java 和 Groovy 版本，以及许多其他的相关工具。在这篇文章中，我使用的 SDK 发行版是：
* Java: version 11.0.12-open of OpenJDK 11;
* Groovy: version 3.0.8.
### 言归正传
Java 提供了非常多的方式来实例化和初始化映射，并且从 Java 9 之后，添加了一些新的方式。其中最明显的方式就是使用 `java.util.Map.of()` 这个静态方法，下面介绍如何使用它：
```
var m1 = Map.of(
    "AF", "Afghanistan",
    "AX", "Åland Islands",
    "AL", "Albania",
    "DZ", "Algeria",
    "AS", "American Samoa",
    "AD", "Andorra",
    "AO", "Angola",
    "AI", "Anguilla",
    "AQ", "Antarctica");
System.out.println("m1 = " + m1);
System.out.println("m1 is an instance of " + m1.getClass());
```
事实证明，在此种情况下，`Map.of()` 有两个重要的限制。其一，这样创建出来的映射实例是 不可变的   immutable 。其二，你最多只能提供 20 个参数，用来表示 10 个 键值对   key-value pair 。
你可以尝试着添加第 10 对和第 11 对，比方说 "AG", "Antigua and Barbuda" 和 "AR", "Argentina"，然后观察会发生什么。你将发现 Java 编译器尝试寻找一个支持 11 个键值对的 `Map.of()` 方法而遭遇失败。
快速查看 [java.util.Map 类的文档](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.html)，你就会找到上述第二个限制的原因，以及解决这个难题的一种方式：
```
var m2 = Map.ofEntries(
    Map.entry("AF", "Afghanistan"),
    Map.entry("AX", "Åland Islands"),
    Map.entry("AL", "Albania"),
    Map.entry("DZ", "Algeria"),
    Map.entry("AS", "American Samoa"),
    Map.entry("AD", "Andorra"),
    Map.entry("AO", "Angola"),
    Map.entry("AI", "Anguilla"),
    Map.entry("AQ", "Antarctica"),
    Map.entry("AG", "Antigua and Barbuda"),
    Map.entry("AR", "Argentina"),
    Map.entry("AM", "Armenia"),
    Map.entry("AW", "Aruba"),
    Map.entry("AU", "Australia"),
    Map.entry("AT", "Austria"),
    Map.entry("AZ", "Azerbaijan"),
    Map.entry("BS", "Bahamas"),
    Map.entry("BH", "Bahrain"),
    Map.entry("BD", "Bangladesh"),
    Map.entry("BB", "Barbados")
);
System.out.println("m2 = " + m2);
System.out.println("m2 is an instance of " + m2.getClass());
```
这就是一个比较好的解决方式，前提是我不在随后的代码里改变使用 `Map.ofEntries()` 创建并初始化的映射内容。注意，我在上面使用了 `Map.ofEntries()` 来代替 `Map.of()`。
然而，假设我想要创建并初始化一个非空的映射，随后往这个映射中添加数据，我需要这样做：
```
var m3 = new HashMap(Map.ofEntries(
    Map.entry("AF", "Afghanistan"),
    Map.entry("AX", "Åland Islands"),
    Map.entry("AL", "Albania"),
    Map.entry("DZ", "Algeria"),
    Map.entry("AS", "American Samoa"),
    Map.entry("AD", "Andorra"),
    Map.entry("AO", "Angola"),
    Map.entry("AI", "Anguilla"),
    Map.entry("AQ", "Antarctica"),
    Map.entry("AG", "Antigua and Barbuda"),
    Map.entry("AR", "Argentina"),
    Map.entry("AM", "Armenia"),
    Map.entry("AW", "Aruba"),
    Map.entry("AU", "Australia"),
    Map.entry("AT", "Austria"),
    Map.entry("AZ", "Azerbaijan"),
    Map.entry("BS", "Bahamas"),
    Map.entry("BH", "Bahrain"),
    Map.entry("BD", "Bangladesh"),
    Map.entry("BB", "Barbados")
));
System.out.println("m3 = " + m3);