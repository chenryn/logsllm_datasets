Python源码剖析
15.3Python线程的创建
一深度探索动态语言核心技术
405
---
## Page 436
Python源码剖析
15.3.2.2
406
程所独有的一些信息。实际上，在剖析Python的初始化过程时，我们曾经见过这个对象。
个Py山on线程都会有一个线程状态对象与之关联，在线程状态对象中，记录了每一个线
PyThreadState_New。这个机制对于理解Python中线程的创建和维护是非常关键的。
有一个非常重要的机制—
[pystate.h]
PyEval_AcquireThreade中到底做了什么。
多线程机制。当然，这一点我们将在后面详细剖析。现在我们感兴趣的是子线程在
断会不断地激活线程的调度机制，在子线程和主线程之间不断地进行切换，从而真正实现
实际上在PyEvalEvalFrameEx中，图15-2中显示的Pyton内部维护的那个模拟时钟中
直都会处于等待GIL的状态？如果真是这样，那Pyhon显然就不可能支持多线程机制了
PyThreadstate *Pymhreadstate_Swap(PyThreadstate *newts)
[pystate.c]
void PyEval_AcquireThread(PyThreadstate:*tstate)
[ceval.c]
PyThreadstate;
要剖析线程状态的保护机制，我们首先需要回顾一下线程状态。在Pyhon中，每一
到这里，了解了PyEval_AcquireThread，似乎创建线程的机制都清晰了。但实际上，
第15章Python多线程机制
int recursion_depth;
struet
PyInterpreterState *interp:
struct
线程状态保护机制
return oldts;
PyTnreadstate olats=
//获得GL
assert(interpreter_lock);
if(tstate
线程状态对象指针_PyThreadstate_Current
By_FatalError("PyEval_AcguireThread:non-NULL old thread state"):
深度探索动态语言核心技术
frame
tS
*frame;
Thread ia where thls tstate was created 
—线程状态保护机制——隐藏在了一个毫不起眼的地方：
Swap(tstate)
_PyThreadstate_Current:
确保已经训用 PyEval_InitThreaais并创建了GIL
Acquirethread:NuLLnew thread state）
1
---
## Page 437
中，我们将这个链表称为“状态对象链表”。
找一个线程对应的状态对象时，就遍历这个链表，搜索其对应的状态对象。在此后的描述
对象？Python内部会通过一个单向链表来管理所有的Pyhon线程的状态对象，当需要寻
使其始终保存着活动线程的状态对象。
调度线程时，会将被激活的线程所对应的线程状态对象赋给_pyThreadStateLCurent，
state_current。当前活动线程所对应的线程状态对象就保存在这个变量里，当Pyhon
态对象的机制。同时，在Python内部，维护着一个全局变量：PyThreadState*_PyThread-
样就保证了进程A始终是在属于白已的上下文环境中运行。
下文环境，再进行切换；当从进程B切换回进程A时，又会恢复进程A的上下文环境，这
机制非常类似。我们知道，在操作系统从进程A切换到进程B时，首先会保存进程A的上
那就坏菜了。这就意味着Py山on内部必须有一套机制，这套机制与操作系统管理进程的
程A获得的应该是A的threadid，线程B亦然。倘若线程A获得的是B的thread_id
的创建是在Python进行初始化的时候完成的。
在某种情况下，每个线程都需要访问线程状态对象中所保存的thread_ia信息，显然，线
程的id这样一些信息。有时候，线程是需要访问这些信息的。比如考虑一个最简单的情形，
这个状态对象链表，Pyhon会创建一个独立的锁，
static struet key *keyhead =NULLi
struct key
[thread.c]
这就引出了这样的一个问题：Pyuon如何在调度进程时，获得被激活线程对应的状态
这里的线程状态对象就等同于进程的上下文，Pyhon同样会有一套存储、恢复线程状
下面我们来看一看实现这个机制的关键数据结构。
每一个线程对应的线程状态对象都保存着这个线程当前的PyFrameObject对象，线
在Python中，对于这个状态对象链表的访问，不必在GIL的保护下进行。因为对于
图15-6展示了在运行时这个状态对象链表的示意图。
void *value;
int key:
struct
Key *next;
Python源码剖析
专职对状态对象链表进行保护。这个锁
15.3Python线程的创建407
一深度探索动态语言核心技术
---
## Page 438
Python源码剖析
408
个Win32下的Event内核对象。这个keymutex的功能就是用来互斥对状态对象链表的访问。
keymutex实际上和GIL一样，都是一个PNRMUTEX结构体，而在这个结构体中，维护着一
调用），会通过PyThreadallcate_lock创建一个keymutex。根据我们前面的分析，这个
当RyThread_create_key第一次被调用时（在_PyGILState_IniE中的调用正是第一次
int PyThread_ereate_key (vola)
staticPyThread_type_lock keymutex=NULb;
static void _PyGILState_NoteThreadstate(PyThreadstate.tstate)
[thread.c]
void _PyeiLState_Init(PyInterpreterState *i
[pystate.c]
PyThread_create_key将创建一个新的key。注意，这里的key都是一个整数，而且，
return ++nkeys;
tstate->gilstate_counter=l:
(lautoTLSkey)
autolnterpreterState =
autoTLSkey=PyThread_oreate_key(）
第15章Python多线程机制
keymutex
一深度探索动态语言核心技术
return;
PyThreadState
threadA
value
key
static struct key'keyhead
id
PyThread_allocate_lock():
图15-6线程状态对象链表
PyThreadState
threadB
value
kcey
(void *)tstate);
Pythreadstate *t)
三NUL）：
PyThreadState
threadN
value
key
next
---
## Page 439
代码清单15-3
描述中还是将图15-6中的链表称为线程状态对象链表。
就是autoTLSkey。同样，由于我们这里仅仅关注Pyton的线程机制，所以我们在后面的
将会被所有的线程在存储这种对象时共享。对于我们这里关注的线程状态对象，其key值
中，与每个线程相关的对象可能有多种，而每一种对象都会对应一个key值，这个key值
取出对象o，而并非s时，该用什么来区分o和s呢？正是这个key值。所以实际上在Python
体。显然，对于这两个key结构体，ia域是完全一致的，那么当我们需要从这个链表中
而另一种对象设为o，在图15-6所示的链表中，存在着两个与某个线程A相关的key结构
而是与线程相关的其他对象时，这个key值就有意义了。假如我们将一种状态对象设为s，
并非是纯的状态对象链表，当在一个key结构体的value域存储的不是线程的状态对象
中的主a存储的正是各个线程的id，根据这个id，显然可以区分不同的线程了。
static struct key*find_key(int key,void *value)
15-3
境初始化时调用一次。
能说所有的key都是一样的呢？事实上，在整个Pyhon的源码中，PyThread_create_key
返回的是nkeys的递增后的值啊，就是说每create一次，得到的结果都是不同的，怎么
的状态对象的一个参数，即是图15-6中的key值。也就是说，状态对象列表中所有key
其中的TLS是ThreadLocal Store的缩写，这个autoLSkey将用作Pyhon保存所有线程
[thread.c]
Python提供了一些列操作状态对象链表的接口，其中核心是Eina_key，见代码清单
那么如何区分哪个线程对应哪个状态对象呢，别忘了，我们还有线程主a呢。图15-6
（/131：如果[2]处的搜索失败，则创建新的元素，并加入线程状态对象链表
PyTiread_acquine
//1]：获得当前线程的线程id，并锁住线程状态对象链表
struat key
那么图15-6中的key看上去就有点多此一举了，实际上，图15-6中所示的链表结构
//12]：遍历线程状态对象链表，寻找key和d都匹配的元素
在_ryGILState_Init中，创建的新key被Python维护的全局变量autoTLSkey接收，
Eor
long id=PyThread get_thread_ident():
p->idi=id;
(struct
goto Done;
NULL
keyhead;
key
*)malloc(sizeof(struct key)):
lock(keymutex,)
keyi
Python源码剖析
>next)
15.3Python线程的创建
深度探索动态语言核心技术
409
---
## Page 440
Python源码剖析
410
其实，就是简单的链表的插入、删除和查询操作。
建的keymutex来互斥对状态对象列表的访问。
find key会在代码清单15-3的[3]处创建一个新的key结构体，并设置其中的id，key
搜索key和id都匹配的key结构体，如果搜索成功，
和value,
void PyThread_delete_key（int key)
int PyThreadset_key_value(int key.void *value)
void*PyThmead_get_key_value(int key)
[thread.c]
索，
期除操作
/插入操作
7/查询操作
Done:
，而且还包含了创建的动作。在代码清单15-3的[2]处，find_key会遍历状态对象列表，
在了解了这个核心函数之后，Python为状态对象列表所提供的接口就显得非常清晰了。
在代码清单15-3的[1]和[4]处我们看到了Python确实通过在_pyGILState_Init中创
第15章Python多线程机制
=&keyhead;
PyThread_accufre_lock(keymutex,
struct key*p,**qi
return
struct key p=find_key(key,value);
return
struct keyp=find_key(key,NoLn;
虽然这个核心函数的名字叫Eind_key，
returnpi
//[4]：释放锁住的线程状态对象链表
keyhead
最后将其插入到状态对象列表的头部。
深度探索动态语言核心技术
g=&p->next
free(（void)p）i
0
p->value;
>key"
（N=（
>next;
value;
然而我们可以看到，
则直接返回：而当搜索失败时，
它的作用并不仅仅是搜
---
## Page 441
15.3.2.3
static void t_bootstrap(void boot_raw)
子线程开始争夺话语权了。
级线程调度与操作系统级线程调度之间所起的桥梁作用。
线程调度和操作系统线程调度之间并没有这样的因果关系。图15-7中显示了GIL在Pyton
[threadmodule.c]
象，这个触发又进而触发操作系统的线程调度。而在线程的初始化完成之前，在Pyhon
的线程调度会迫使当前活动线程释放GIL，而这一操作会触发GIL中维护的Event内核对
成了初始化动作之后，操作系统的线程调度和Python的线程调度才会同一：那时，Python
拥有权的易手，而操作系统级的线程调度并不一定意味着GL的易手，当所有的线程都完
统级的线程调度和Pyhon级的线程调度是不同的。Python级的线程调度一定意味着GIL
原生线程，所以操作系统可能在主线程和子线程之间切换。我们在这里要着重指出操作系
线程到现在还没有申请GIL，自然也不会将自身挂起。由于主线程和子线程都是Win32的
线程。正如我们在这里所展示的，在threadl.py中，主线程现在是获得了GIL的，但是子
这个对象放入到线程状态对象链表中去。
PyThreadState_New(PyInterpreterState *Interp)
[pystate.o]
很显然，对于这个例子，子线程还没有获得GIL。所以在PyThreadstate_New之后，
这里有一个需要特别注意的地方，即当前活动的Python线程不一定是获得了GIL的
子线程在创建了自身的线程状态对象后，会通过_PyGILState_NoteThreadstate将
现在，回过头来看一看刚才提到的ryThreadState_New：
PyThreadstate*tstate=(PyThreadState *)malloc(sizeof(PyThreadState)）
PyThread release_lock(keymutex);
从GIL到字节码解释器
图15-7Python级的线程调度与操作系统级的线程调度
Python
GIL
Python源码剖析
15.3Python线程的创建
一深度探索动态语言核心技术
411
---
## Page 442
Python源码剖析
412
大量调用，有兴趣的读者可以自行深入探索一下。
PyGTLState_Ensure等等中，都会涉及这个链表，这些API在C与Python交互时可能被
id从线程状态对象链表中获取线程对象了。事实上，在Pyhon内部的许多API中，比如
前剖析过的EyTrheaastateSwap函数切换当前的线程状态对象，这时候就需要根据线程
没有什么用啊。其实不然，试想一下，当线程调度发生时，在Python一级，需要通过之
DeleteCurrent等，将在后续的部分剖析。
开始，则是在子线程中执行的。其中涉及线程销毁的动作，如PyThreaastate_
全被Python线程调度机制所控制了。
将调用PyEval_EvalFrameEx，进入解释器。到了那个时候，子线程和主线程一样，就完
到t_bootstrap中，并进入pyEval_callobjectWithkeywords，从这里一直往前，最终
线程还没有顺利进入字节码解释器。当Pyhon线程调度将子线程唤醒之后，子线程将回
操作系统的进程上下文环境恢复一样。
PyThreadState_Swap将Python维护的当前线程状态对象设置为其自身的状态对象，一如
Python强迫子线程放弃GIL的那一刻。
会被唤醒：而子线程被唤醒之后，主线程却又陷入了苦苦地等待中，同样苦苦地守望着
身的力量将其唤醒，只有等待Pyton的线程调度机制强迫主线程放弃GIL后，子线程才
1ock争取GIL。到了这一步，子线程将自己挂起，操作系统的线程调度机制再也不能靠自
中，子线程进行了最后的冲刺，它要生存，要执行，于是它开始通过PyThreadacquire
boot->keyw):
到了这里，读者可能有些疑惑了，我们花费了大量篇幅剖析的线程状态对象链表似乎
需要注意的是，pyThread_start_new_thread是在主线程中执行的，而从bootstrap
现在我们的子线程开始等待GIL，但是注意，线程的初始化还没有真正完成，因为子
第15章
图15-8展示了从主线程开始创建子线程，到子线程进入Python解释器的所有函数调
当子线程被Python的线程调度机制唤醒之后，它所作的第一件事就是通过
前面我们已经剖析过PyEval_AcquireThread的代码，在PyEval_AcquireThread
tstate =PyThreadState_New(boot->interp）;
PyEval
Pyobiect
深度探索动态语言核心技术
Python多线程机制
*reS:
*tstate,
boot->args,
---