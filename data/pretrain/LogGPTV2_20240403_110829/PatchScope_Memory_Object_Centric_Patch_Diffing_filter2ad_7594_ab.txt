belongs to the .RODATA section of a binary, this fix will induce no
instruction differences.
2.3 Limitations of Existing Work
In the binary diffing literature, there are four types of problem
scopes: literally identical, syntactically equivalent, semantically
similar, and slightly modified [18]. Code representations used for
measure similarity or identify differences, ranging from syntactic
(e.g., control flow/call graph [7, 25, 29]) to semantics-aware features
(e.g., dynamic behaviors [20] and system call sequences [5, 64]),
are specific to different problem scopes and vary a lot. Considering
sophisticated types of patch patterns and their impact on code
changes, we will discuss limitations in existing techniques in the
following sections.
Syntax-based binary diffing. BinDiff [27], Diaphora [34], and
DarunGrim [49] are three industry-standard binary diffing tools
with wide applications [31, 47, 48, 55, 62]. These techniques com-
pute the similarity with a set of heuristics on CFG/CG structures,
basic blocks, and instructions.
However, these binary diffing tools may not be robust or accu-
rate. The small degree of code changes, such as resizing a buffer,
updating the variable type, changing function parameters, may
exhibit no difference in assembly code. On the opposite side, some
patches involve a large degree of code changes such as overwriting
a function. Then, they will generate a large number of low-level
code differences that plague security experts [40]. Besides, recent
studies also show that binary diffing techniques may raise many
false positives [40].
Taking advantage of run-time information, dynamic execution
comparison [30] can filter irrelative code changes that are not tra-
versed along with the execution, which is more robust than static
binary diffing. The main limitation is execution comparison may
result in a large number of different instructions, and such low-level
differences in instructions or operand values cannot deliver rich
semantics for understanding patch details and fixed vulnerabilities.
For the example in Figure 1, BinDiff reports up to 30 differences
in terms of the instructions removed or added. Due to the page
limit, we list a snippet of the instruction alignment sequence in
Appendix A. We can observe that it is far from meeting the goal
of patch analysis. First, BinDiff did an inaccurate trace alignment.
Second, low-level differences cannot avail security experts much
regarding how to trigger this vulnerability. We will continue to
elaborate on this example in the later sections, but for now, we
remind the reader that Figure 1 (b) is a “buggy patch”. With the
help of PatchScope, we find this patch induces a new attack vector
by overrunning the objects in the heap.
Symbolic execution for binary diffing. Another line of research
employs symbolic execution for binary diffing, either at the source
code level [35, 51, 52] or the binary level [15, 25, 40, 70]. These tech-
niques perform symbolic execution to represent the code snippets
as formulas and then detect differences using a theorem prover.
There are several challenges when applying symbolic-execution-
based binary diffing for patch analysis. For one thing, most of
these techniques rely on static analysis to locate code differences.
DSE [51] and DiSE [52] leverage static analysis techniques to iden-
tify differences, and then perform symbolic execution to charac-
terize different program behaviors or effects. As we demonstrate
above, binary diffing tools may not be robust or accurate to locate
patch-relevant changes. Second, the output of symbolic execution—
symbolic formulas, especially formulas generated from instructions,
is difficult to understand the effects of patches. At last, symbolic
execution is typically performed within a basic block [15, 25, 40]
or a loop body [70] at the binary level, which may not be scalable
to deal with complicated patches involving library function calls
(e.g., No. 6, 7, 8, and 9 in Table 1).
Semantics-aware binary diffing. Semantics-aware binary diffing
techniques leverage system calls, or library API functions to rep-
resent program semantics, which are commonly adopted by clone
detection [20, 64] and malware variant comparison [5, 23, 33, 44].
However, such code representations are often too coarse-grained
to be sensitive for patch differences, or because many security
patches only induce a small degree of code changes. Another type
of semantics-aware technique treats a pair of binary code snip-
pets [20, 63] as a BlackBox and perform dynamic testing to compare
their behaviors for similarity measurement. For example, BLEX [20]
collects dynamic memory accesses for similarity measurement.
However, dynamic memory accesses are too fine-grained to pre-
cisely identify patch differences, as BLEX [20] reports 32 differences
for the example in Figure 1 (as shown in Appendix B).
1 int main() { …;   serveconnection(sockfd);  …;  } 2 int serveconnection(int sockfd) {   3 char tempstring[8192]; // tempstring is allocated to store program inputs.  4 Log("Connection from %s, request = \"GET %s\"", inet_ntoa(sa.sin_addr), ptr); // ptr is a pointer to tempstring …; } 5 void Log(char *format, … ){ void Log(char *format, … ){ 6  char temp[200], temp2[200]; char *temp, *temp2;  7  temp=malloc(strlen(format)); 8  vsprintf(temp, format, ap1);   vsprintf(temp, format, ap1); 9  temp2=malloc((strlen(temp)+strlen(datetime_final)+5)); 10  sprintf(temp2, "%s - %s\n", datetime_final, temp); sprintf(temp2, "%s - %s\n", datetime_final, temp);   (a) ghttpd-1.4.3 (b) ghttpd-1.4.4  1 ap in Line 8 is the type of va_list, which stores a variable arguments list from program inputs. AI-powered binary diffing. Taking advantages of AI techniques
(e.g., deep learning and neural networks), AI-powered binary diffing
techniques [18, 19, 26, 38, 42, 43, 71, 76] first translate binary code
snippets into a set of feature vectors, and then they apply machine
learning algorithms to the similarity calculation. When handling
security patches, this new trend encounters similar problems with
the above semantics-aware binary diffing: insensitive to a small
degree of code changes.
2.4 Design Principles
To overcome limitations in existing patch analysis techniques, we
design patch diffing to satisfy three unique principles.
• For types of patch patterns, patch diffing should be robust in
locating patch differences beyond assembly code. Otherwise,
it either falls short of capturing small patch differences or
suffers from too many code differences.
• Patch diffing should output interpretable results by providing
• Patch diffing should deliver rich semantics, especially high-
level program representations, for understanding patch de-
tails and fixed vulnerabilities.
detailed patch relevant differences.
3 MEMORY OBJECT ACCESS SEQUENCE
In this study, we design a new code representation, memory ob-
ject access sequence (MOAS), to represent program semantics and
compare MOAS for patch diffing. MOAS is motivated by two key
observations.
3.1 Key Observations
First, the way that a program references data structures to ma-
nipulate inputs can be regarded as a “side effect” of the program
semantics. To process a received input, a program typically man-
ages multiple data structures (e.g., variable, array, and struct) to
manipulate these fields. For example, “temp[200]” and “*temp” in
Figure 1 are defined to store a string that contains two fields: an
Internet host address and an HTTP request URL. Therefore, input
manipulations via various data structures reflect a wealth of pro-
gram semantics information. At the binary level, compilers allocate
various memory objects to represent high-level program data struc-
tures. Then, referencing a data structure to manipulate an input
field becomes a memory object access (MOA). The formal definition
of MOA is given next.
Second, to fix memory corruption vulnerabilities, most of the
security patches add new or update operations on input manipula-
tions for handling bad inputs. Then, security patches will introduce
different memory object access between the dynamic executions
on P and P′. For example, the patches related to input sanitiza-
tion checks add or update path conditions to block unsafe inputs,
and thus they will introduce subtraction or a bit-wise logical and
operations to certain memory objects.
3.2 Semantics-aware Program Representation
Definition 1: Memory Object. At the binary level, we use a mem-
ory object to represent a reverse-engineered data structure along
an execution trace. A memory object is denoted as mobj = (alloc,
size, type). alloc refers to the context information when allocating
the memory object, size indicates the size (in byte) of the memory
object, and type means its type. In our study, type includes static
variables, dynamically allocated variables in the heap, and local vari-
ables in the stack. As memory object allocations vary from different
types of data structures, the definition of alloc has to be considered
together with the program context where mobj is allocated.
its memory address can exclusively represent alloc.
• For a static variable, as its memory slot will not be reused,
• For a local variable in the stack, a function frame generally
holds the set of local variables. Thus, we represent alloc as a
pointer addressed by the frame pointer, as well as the calling
context of this function. An exception is register allocation
optimization, which assigns local variables into registers to
reduce the number of stack memory accesses. Our solution
is to use registers to represent such special local variables.
• For a dynamic variable in the heap, we hook the invocation
of memory-allocation functions, and then we use the calling
site and its return value (the pointer to the allocated heap
object) to represent alloc.
We illustrate alloc using our running example from Figure 1. The
function Log defines a local variable temp with 200-bytes length.
For the dynamic execution on ghttpd-1.4.3, the alloc for temp will
include the calling context, main-serveconnection-Log, and the offset
from the frame pointer of Log. As ghttpd-1.4.4 defines temp as a
heap variable, the alloc for temp includes the calling context, main-
serveconnection-Log, the malloc call, and the returned pointer to
temp. We will discuss how to identify size in §4.4.
Definition 2: Memory Object Access. A memory object access
is denoted as A(mobj) = (mobj, cc, op, optype, α), where:
• mobj is a memory object as defined by Definition 1.
• cc records the context in which mobj is used. As mobj can be
accessed by other functions through pointers, cc includes the
function that references mobj as well as the calling context
of this function.
• The element op refers to the data-flow-related operations
on mobj. We consider three main kinds of instructions that
participate in input propagation: data movement instruc-
tions, arithmetic instructions, and calling instructions to
library/system calls. We denote op as the opcodes of these
instructions as well as their addresses.
• The element optype contains two access types of mobj: read
• The element α refers to the consecutive bytes of an input
that is correlated with mobj during an execution. Please note
that α may not be persistent with an input field defined by
syntactical formats, because a program subsequently parses
and manipulates inputs step by step.
and write.
3.3 MOAS Comparison
The temporal order of memory object accesses (MOA) along an
execution trace forms a memory object access sequence (MOAS).
With the above definitions, we monitor the execution of P and P′
on the same PoC. Then we dynamically collect two memory object
Figure 2: MOAS comparison result for the patch differences shown in Figure 1. We highlight the misalignment places. “0x65”
in b1 indicates that the value of size is tainted.
access sequences from P and P′, respectively. At last, we detect
their differences for patch analysis.
According to our observations in Section 3.1, a security patch
can leave a fingerprint on one of the following features of MOAS:
memory object allocations, memory object operations, or the corre-
lations between memory objects and input fields. Thus, MOAS com-
parison is able to interpret identified differences with the context
information represented by MOAS. Compared to existing tools [27,
34, 49] that highlight differences in assembly instructions, the pro-
gram representation by MOAS enables us to deliver comparison
results more concisely.
Figure 2 illustrates the MOAS comparison result for our run-
ning example, which only has six misalignment places. Recall that
BinDiff reports 30 misalignment differences. Figure 2(a1) and (b1)
present the allocated memory objects, and Figure 2(a2) and (b2)
show how these memory objects are referenced during runtime
execution. For the second memory object access in Figure 2(a2) and
(b2), we observe that their contexts, operations (call vsprintf ), op-
eration types (both are W), and correlated inputs (with the interval
[0x4, 0x15d]) are identical. However, as shown in Figure 2(a1) and
(b1), the allocations of L2 and R2 are different, as L2 is on the stack
whereas R2 on the heap. As L2 and R2 are different, the follow-on
accesses to L2 and R2 will be different as well. Similarly, L3 and R3
are different, which leads to the difference between the accesses to
L3 and R3. In addition to inferring that the patch fixes the vulner-
ability by updating data structures, Figure 2 also shows a telling
clue that cannot be obtained from Figure 5.
Note that both R2 and R3 are two dynamically allocated memory
objects in the heap to store the input. However, if we zoom in on
their memory object representations shown in Figure 2(b1), we
notice only R3’s malloc size is tainted—that means the size of R3
depends upon the input. This discrepancy motivates us to inves-
tigate why R2’s malloc size is not tainted. We perform backward
slicing from R2’s malloc size and find that the source is a const
string located in the read-only data section. That means the size of
mobj alloc size type   mobj alloc size type L1 :ebp-0x4151 0x2000 stack   R1 :ebp-0x4151 0x2000 stack L2 : ebp-0x172 0xc8 stack   R2 :0x804ac08: call malloc 0x26 heap L3 : ebp-0x23a 0xc8 stack   R3 :0x804aca5: call malloc 0x65  heap    R4 :eax 0x4 reg (a1) Memory object representation for ghttpd-1.4.3   (b1) Memory object representation for ghttpd-1.4.4 L1    R1  0x804a35c: call vsprintf R [0x4,0x01d]   0x804ac29:call vsprintf R [0x4,0x01d]     L2    R2  0x804a35c: call vsprintf W [0x4,0x01d]   0x804ac29:call vsprintf W [0x4,0x01d]        R2    0x804ac83:call strlen R [0x4,0x01d]      R4    0x804ac83:call strlen W [0x4,0x01d]      R4    0x804aca5: call malloc R [0x4,0x01d]    L2    R2  0x804a3cb:call sprintf R [0x4,0x01d]   0x804acd5: call sprintf R [0x4,0x01d]        L3    R3  0x804a3cb: call sprintf W [0x4,0x01d]   0x804acd5: call sprintf W [0x4,0x01d] (a2) Memory object access sequence for ghttpd-1.4.3   (b2) Memory object access sequence for ghttpd-1.4.4 We take the top left item in (a2) as an example to interpret memory object access (mobj, cc, op, optype, α).  “L1” (mobj) represents a memory object defined in (a1); “” (cc) is the function that references “L1”; “0x804a35c:call vsprintf” (op) refers to the instruction operating on “L1”; “R” (optype) means the access type of read; “[0x4,0x01d]” (α) indicates the input field that is correlated with “L1”.                                      R2 is fixed and decided by this const string. We have verified that
an unsafe input can still overflow R2 to crash ghttpd-1.4.4 if the
number of input bytes exceeds the const string length. Our CVE ID
request for this “buggy patch” is under review.
4 PATCHSCOPE SYSTEM DESIGN
The section presents our design details to unleash the power of
MOAS comparison for security patch analysis.
4.1 System Overview
Figure 3 shows the overview of PatchScope. It contains four main
components: dynamic taint and execution monitoring, memory
object excavation, memory object access construction, and MOAS
alignment.
First, we leverage a fine-grained dynamic tainting technique to
monitor dynamic executions for both P and P′ on the same PoC.
The fine-grained dynamic tainting component gives each input byte
a unique taint tag, and records the propagations of all tainted bytes.
Meanwhile, the execution trace records all executed instructions,
all operand values as well as their taint tags.
Second, we dynamically excavate memory objects from execu-
tion traces. The basic insight is that memory access patterns reflect
the types of program data structures. Moreover, our approach estab-
lishes the correlations between reverse-engineered memory objects
and input fields, for identifying memory objects that are used to
manipulate program inputs.
and P′, according to Definition 1 and Definition 2.
Third, we construct memory object access sequences for both P
Finally, we leverage a sequence alignment algorithm to identify
differences by comparing memory object access sequences for both
P and P′. To reason differences, we further use semantics reflected
on MOAS to identify vulnerable program data structures, invalid
inputs to trigger the vulnerability, as well as the context.
4.2 Dynamic Taint and Execution Monitoring
The component of dynamic taint and execution monitoring in
PatchScope is built on top of DECAF [28], which is a QEMU-
based whole-system dynamic binary analysis platform. We adapt
DECAF to our needs in supporting multi-tag taint propagation and
recording all necessary runtime information used in the follow-up
analysis.
Multi-tag taint analysis is indispensable to the correlations be-
tween memory objects and input fields. Our taint analysis begins
with labeling each input byte as a unique taint tag. During taint
propagation, if the multiple source operands of one instruction are
tainted, we will set the taint tags of the destination operand as the
union of all source operands’ taint tags.
DECAF also records fine-grained runtime information such as
concrete execution states (e.g., instructions and operand values),
which enables us to recover function call stacks and excavate mem-
ory objects. To track dynamically allocated memory objects in heap
and stack, we have to intercept related memory allocation system/li-
brary calls (e.g., mmap, malloc, and alloca).
4.3 Function Call Stack Identification
The allocations and accesses to memory objects bind with their
calling contexts. Therefore, our first step is to recover function call
stacks. For tracking function call stack, the most straightforward
way is to match the call/ret pairs and the balance of stack pointers. A
main challenge is security patches may trigger some latent compiler
optimization options that can mislead stack frame identification.
Common optimizations include tail call optimization [11] and
function inline. The tail call optimization avoids the overhead of
frequent stack frame set-up and tear-down. It switches to a jmp
instruction at the end of the caller function to enter the callee
function, instead of the general call instruction. GCC/Clang -O2
and -O3 enable this optimization. Appendix C shows a tail call
optimization example. In Apache-1.3.35—one of our tested programs,
the proportion of jmp-based calls encountered at run time is about
12%.
We leverage the recent progress in dynamic function call detec-
tion work, iCi [17], to detect jmp-based inter-procedural calls. iCi
proposes a set of heuristics to filter out intra-procedural jumps (e.g.,
the jump target is within a function scope) and jmp-based calls (e.g.,
the jump target is a known function entry point). In this study, we
perform the iCi analysis at the end of execution so that we have
sufficient knowledge about function entry and exit information.
With the impact of function inline, there is no explicit control
flow transition between an inlined function and its caller. For this
problem, we just treat them as an extended function frame. If the
function inline only exists in one of the unpatched and patched
programs, the contexts for allocating memory objects will be dif-
ferent. Then the MOAS comparison will identify more differences.
We leave such misleading differences to analysts for further inspec-
tion. It is practical and not difficult, because all elements except the
contexts in two corresponding memory object accesses will be the
same, if and only if the differences are caused by function inline.
4.4 Excavating Data Structures & Input Fields
All types of data structures in source code are compiled into mem-
ory objects in binary code. Our approach of excavating memory
objects is inspired by previous work, Howard [57]. The basic in-
sight is that memory access patterns reflect the types of program
data structures. Therefore, we recover memory objects by tracing
pointer propagations, as memory accesses in binary code are im-
plemented via pointers, either using direct addressing or indirectly
via registers. Our differential with Howard [57] is we need to estab-
lish the correlations between reverse-engineered memory objects
and input fields. Following this requirement, our approach aims to
identify only memory objects that are used to manipulate program
inputs, instead of all the memory objects that are referenced during
execution.
Root Pointer Extraction. The allocation of a memory object typ-
ically returns a pointer for further access and reference. We denote
this pointer as a root pointer. In general, root pointers are unique
for different memory objects, and they are not derived from any
other root pointers. Following this definition, we identify memory
objects by extracting their root pointers.
For the three types of memory objects (see Definition 1), ex-
tracting the root pointer for a static variable or a dynamic variable
Figure 3: PatchScope system overview.
our root pointer identification for local variables. To address this
problem, we represent the stack frame pointer with esp’s offset if
we detect the non-existence of stack balance instructions.
Memory Object Size Inference For a dynamically allocated mem-
ory object, the allocation function’s parameter explicitly indicates
the size. The obstacle is to infer the size for local variables and
static variables, because their types are invisible in binary code. We
approximate their size by calculating the offset interval between
two contiguous root pointers. For the example in Figure 4(a), the
size of two memory objects (200) is just the offset interval between
adjacent root pointers. The inferred size for a memory object may
not be accurate, which could be larger than its definition if the ad-
jacent memory object is not referenced during execution. However,
we argue that the comparison between two memory object access
sequences can counteract this inaccuracy.
Tracking Pointer Propagation. Through recognizing root point-
ers, we can identify the definition and allocation of memory objects.
The next step is to extract the references to these memory ob-
jects, which is more challenging because programs generally define
memory alias or transfer pointers to registers as de-references. Fur-
thermore, without context information, the usage of a register is
very similar when it is used as an address or a scalar. To solve
this problem, we also adopt similar heuristics in Howard [57] by
analyzing the context and tracking the movement of root pointers.
We first identify all root pointers. Second, we identify alias point-
ers by tracking the data movement of root pointers. Further, we
track all arithmetic calculations on root pointers, because the mem-
ory address for an internal item of a data structure is typically
calculated by adding an offset on the root pointer. Finally, for a
memory load/store, we identify its root pointer by checking the
data dependency of its memory address. Take the addressing mode
of x86 instructions as an illustration. An address is computed as