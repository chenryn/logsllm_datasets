region to the right side of each line in Fig. 7 represents the winning
range of Pool1 in terms of c. (cid:140)e ten lines represent borderlines at
which Pool1 can earn the same reward as an honest miner when
values of c vary from 1 to 0.1. When c is 1, the borderline is exactly
the line α1 = α2. In other words, the larger pool always earns
the extra reward, and the smaller pool takes a loss. (cid:140)erefore, the
result becomes dependent on pool size, even in the region where
the miner’s dilemma holds in the BWH a(cid:138)ack game. Furthermore,
the region in which the miner’s dilemma does not hold exists even
if c is less than 1. In summary, under reasonable conditions for two
pools’ computational power and network capabilities, the largest
pool earns the extra reward. (cid:140)is makes the FAW a(cid:138)ack a dominant
strategy for any large pool to launch against smaller pools.
(cid:19)
i
i
i
(cid:18)
oi
1 −
oi
(1 − α)
2
i
o
2
i .
o
(1 − α)
the honest network that selects an a(cid:138)acker’s block as the main
chain in a fork in sel(cid:128)sh mining. (cid:140)e value of γ cannot be 1 because
when the intentional fork occurs, the honest miner who generated
a block will select his block, not that of the sel(cid:128)sh miner. (cid:140)erefore,
the value of γ is upper bounded as follows if α is the a(cid:138)acker’s
computational power and oi is the computational power of the
honest node i:
γ ≤ 1 −
Note that the total power of honest nodes is 1−α (i.e.,
≤ 1 −
(1 − α)2 < 1 −
i oi = 1−α).
(cid:140)erefore, if a sel(cid:128)sh miner belongs to the Unknown group in
Table 2 (i.e., is a solo miner or a closed pool), the value of γ is
loosely upper bounded by 0.89 according to Table 2. Eyal et al. [18]
stated that an a(cid:138)acker needs at least 1−γ
computational power
3−2γ
for sel(cid:128)sh mining to be pro(cid:128)table. As a result, the a(cid:138)acker needs
computing power of at least 0.09 even when her network capability
is optimal. However, this power is too high for most solo miners or
closed pools. For them, sel(cid:128)sh mining is not pro(cid:128)table. In contrast,
the FAW a(cid:138)ack is always pro(cid:128)table regardless of an a(cid:138)acker’s
computational power (see Sections 5 and 6). (cid:140)is makes the FAW
a(cid:138)ack more practical for a solo miner or a closed pool.
Next, we consider a case in which a sel(cid:128)sh miner is an open
pool manager. Here, the cost for sel(cid:128)sh mining may not be very
high for the a(cid:138)acker. However, the sel(cid:128)sh open pool manager must
be concerned about whether honest miners will leave her pool
by disclosing direct evidence before she earns the extra reward,
because honest miners do not want to destabilize Bitcoin. Indeed,
honest miners belonging to the a(cid:138)acker’s pool can easily detect
that their pool manager is a sel(cid:128)sh mining a(cid:138)acker in two ways.
First, if the manager does not propagate blocks immediately when
honest miners generate FPoWs, the honest miners will know that
their pool manager is an a(cid:138)acker. Second, the blockchain has an
abnormal shape when a sel(cid:128)sh miner exists; Bitcoin miners can
determine which open pool has caused the abnormal shape because
which open pool has found each block is public information. (cid:140)is
information is provided by several services [4, 32]. For example,
when one branch of a fork contains consecutive blocks generated
by the a(cid:138)acker’s pool in a short time period, the pool may be sus-
pect. Even if the a(cid:138)acker tweaks her strategy to evade detection
by releasing her blocks gradually, one branch of the fork will still
contain consecutive blocks generated by the a(cid:138)acker’s pool. (cid:140)ere-
fore, all participants in Bitcoin including honest miners in the pool
can detect that the pool is a sel(cid:128)sh miner before she earns the extra
reward. As a result, open pool managers are unlikely to execute
sel(cid:128)sh mining.
When the FAW a(cid:138)ack occurs and the a(cid:138)acker is an open pool
manager, the fork rate may increase; therefore, detecting the exis-
tence of the FAW a(cid:138)ack may not be di(cid:129)cult. However, identifying
the a(cid:138)acker is more challenging than with sel(cid:128)sh mining because
if an honest miner in her pool generates an FPoW, the FAW at-
tacker propagates the block immediately, which di(cid:130)ers from sel(cid:128)sh
mining. In addition, since the in(cid:128)ltration miner in the target pool
generates forks intentionally by propagating FPoWs to the target
pool, the identity of the target but not the a(cid:138)acker is disclosed. In
(a)
(c)
(b)
(d)
Figure 6: Results of the FAW attack game with varying
Pool2’s size α2 and network capability c where Pool1’s size α1
is 0.2. (a) and (b) show the in(cid:128)ltration mining power of Pool1
and Pool2 as f1 and f2 in the Nash equilibrium point, respec-
(cid:48)
2 for Pool1 and
tively. (c) and (d) represent RERs (%) R
Pool2 in the Nash equilibrium point according to α2 and c,
respectively. Also, the black lines in (c) and (d) are the bor-
derlines at which Pool1 and Pool2 earn the same RER as an
honest miner, respectively. Above the lines, each pool earns
the extra reward, so the prisoner’s dilemma does not hold.
(cid:48)
1 and R
Figure 7: Winning conditions for Pool1 with respect to c. (cid:135)e
ten lines represent borderlines at which Pool1 can earn the
same reward as an honest miner according to c. (cid:135)e region
to the right side of each line represents the winning range of
Pool1 in terms of c. Winning conditions for Pool2 are found
by swapping the x- and y-axes.
8 FAW ATTACK VS. SELFISH MINING
In this section, we discuss the practicality of the FAW a(cid:138)ack in
comparison with sel(cid:128)sh mining, given that both require intentional
forks. Eyal et al. [18] used the term γ to represent the fraction of
other words, the a(cid:138)acker’s pool looks innocent, and meanwhile the
target pool looks strange due to its high rate of forks.
9 NETWORK CAPABILITY C
For an a(cid:138)acker to execute an FAW a(cid:138)ack, she needs to know some
information in advance. First, an a(cid:138)acker’s optimal τ depends
not only on the a(cid:138)acker’s computation power, but also on that
of the target pool. (cid:140)erefore, she must know the target pool’s
computational power. Its approximate value can be obtained from
the current computational power distribution [4], which is public
information.
However, she also needs to know the value of network capabil-
ity c in order to adopt an optimal τ in Eq. (2). (cid:140)e term c is the
probability that an a(cid:138)acker’s FPoW from in(cid:128)ltration mining will
be selected as the main chain. In this section, a possible range
of c is (cid:128)rst given, and then a(cid:138)acker behavior for a constant yet
unknown c is discussed. We extend this discussion to the case in
which c changes frequently. (cid:140)e results are promising. We show
that the FAW a(cid:138)ack still improves upon the BWH a(cid:138)ack, even if
c is unknown. Furthermore, interestingly, the range to which the
miner’s dilemma applies decreases compared to when c is known
in the FAW a(cid:138)ack game.
(cid:135)e Possible Range of c: (cid:140)e value of network capability c is
greater than or equal to 0 by de(cid:128)nition. In practice, the value of c is
positive, because it is possible for an a(cid:136)acker to listen to external block
propagation faster than the manager using Sybil nodes. Moreover, if
the target pool’s manager behaves rationally, the minimum value of
c (in Section 5) is the sum of the computational power of the a(cid:138)acker
and the target pool because the a(cid:138)acker and target pool select
her FPoW found through in(cid:128)ltration mining. Here, the manager’s
rational behavior is to select the block found by in(cid:128)ltration miner in
his pool as the main chain even if the in(cid:128)ltration miner propagates
this FPoW to the manager right a(cid:135)er he notices that an external
miner has found a block. In the same manner, since two players in
the FAW a(cid:138)ack game are rational, the value of c in the FAW a(cid:138)ack
game between two pools is lower bounded by α1+α2. (cid:140)e maximum
value of c also depends on computational power distribution in the
Bitcoin network because an honest miner (neither belonging to
the target pool nor representing the a(cid:138)acker) who generates an
FPoW selects his own block, not the block from the a(cid:138)acker’s FPoW
from in(cid:128)ltration mining. (cid:140)erefore, even if an a(cid:138)acker has optimal
network capability, the maximum value of c in Sections 5 and 6 is
upper bounded by
c =
j
oj
1 − α − β
(1 − oj) = 1 −

j o
2
j
1 − α − β
 o
1 −
2
j

when oj is the computational power of an external honest miner
node j. Note that the total computational power of honest miners
j oj is 1− α − β. Also, the value of c in Section 7 is upper bounded
by
oj
i =1∼n αi
(1 − oj) = 1 −
i =1∼n αi
c =
1 −
j oj = 1 −
condition
j
when the game participants are n open pools. In this case, this
For example, if two pools, F2Pool and BitFury, with computa-
tional powers of 20% and 10%, respectively, as in Table 2, participate
i =1∼n αi is satis(cid:128)ed.
in the FAW a(cid:138)ack game, the maximum value of c is about 0.914.
Note that this case does not fall into the miner’s dilemma, and,
therefore, the game becomes the pool size game. Moreover, when
the power of honest miners (oj) is evenly distributed among many
nodes, c may be closer to 1. (cid:140)us, if an a(cid:138)acker executes the FAW
a(cid:138)ack against all open pools, or if all open pools participate in the
FAW a(cid:138)ack game, the maximum value of c may be close to 1.
In addition, network capability c can be expressed as γ(1 − α −
β) + α + β when the target is one pool, and the target manager
behaves rationally in order to reduce loss (applying the network
capability term γ used in prior research [18, 30]).
Constant c: We (cid:128)rst assume that the value of c is constant but
unknown to the FAW a(cid:138)acker against one pool. Under such condi-
tions, she cannot apply Eq. (2) directly because optimal τ depends
on the value of c. However, she knows that the value of c is greater
than or equal to 0 if the target pools’ managers are honest. (cid:140)us,
she can choose τ0, obtained from Eq. (2) substituting c with 0. In
such a case, the a(cid:138)acker can still earn a greater reward than the
BWH a(cid:138)acker. (cid:140)e FAW a(cid:138)acker’s reward Ra(τ0) is
τ0α
(RBW H) + cτ0α · 1 − α − β
1 − τ0α
max
τ
which is lower bounded by the BWH a(cid:138)acker’s reward RBW H .
If the target pool’s manager is rational, the a(cid:138)acker repeats the
above process, substituting c with α + β, the minimum value of c
in Eq. (2). (cid:140)us, she uses τα +β as the value of τ. (cid:140)en, the FAW
a(cid:138)acker earns extra reward that is certainly more than that for
the BWH a(cid:138)acker. Note that the a(cid:138)acker can test whether the
manager is rational by submi(cid:138)ing a stale FPoW. (cid:140)e a(cid:138)acker can
also learn about c, investigating the relationship between long-
term and theoretical rewards for the minimum value of c, when we
assume that c is constant. As a result, she can (cid:128)nd an optimal τ
(Eq. (2)), and her reward converges to the maximum value of Ra.
,
β + τ0α
·
Figure 8: (cid:135)e winning condition of Pool1 versus c. Ten lines
represent borderlines at which Pool1 can earn the same re-
ward as an honest miner according to c. (cid:135)e region to the
right side of each line represents the winning range of Pool1
in terms of c. Pool2’s winning conditions are found by swap-
ping the x- and y-axes.
Frequently Changing c: (cid:140)e Bitcoin network o(cid:137)en changes, with
the power distribution and number of nodes shi(cid:137)ing as well [4, 6].
(cid:140)us, the value of c may also change. When an a(cid:138)acker executes the
FAW a(cid:138)ack against one pool and the pool manager is honest, as in
the above case, she must use τ0 as the value of τ. In fact, the a(cid:138)acker
may ignore the fact that c changes. For example, she may assume
c = 0 and choose an optimal strategy. Applying this strategy to the
FAW a(cid:138)ack against the four open pools in Table 2, she can earn an
RER of up to 3.99%. (cid:140)erefore, the FAW a(cid:138)ack improves her RER by
up to 34.62% of that for the BWH a(cid:138)ack even if the a(cid:138)acker knows
nothing about c. Moreover, in the FAW a(cid:138)ack game between two
pools, two pools may assume c = α1 + α2, which is the minimum
value of c, in practice. Using the FAW game between F2Pool (Pool1)
and BTCC Pool (Pool2) in Table 2 as an example, both managers
may assume c = 0.3. (cid:140)en, the winning conditions for F2Pool
(Pool1) are shown in Fig. 8. Furthermore, compared to Fig. 7, Fig. 8
shows how the region a(cid:130)ected by the miner’s dilemma decreases.
Indeed, when the assumed value of c decreases, the region a(cid:130)ected
by the miner’s dilemma decreases as well.
10 DISCUSSION
10.1 Rational Manager
In the FAW a(cid:138)ack, an a(cid:138)acker submits an FPoW to a manager to
generate a fork when an external miner broadcasts a block. For
her block to be selected, she must quickly notice the external block
propagation using Sybil nodes. If she detects the propagation be-
fore the pool manager, a fork can be caused naturally, from the
manager’s perspective. When she learns of the propagation from
the manager (instead of detecting it (cid:128)rst), she submits her FPoW
immediately. In this case, an honest manager regards the a(cid:138)acker’s
FPoW as stale and invalidates it because he knows a new round
has already started. However, a rational manager may not act in
accordance with the protocol, since it would always be bene(cid:128)cial for
him to submit a local FPoW. We already proved that the manager’s
behavior can decrease his pool’s loss, as in Section 5. (cid:140)is behavior
decreases the manager’s loss and increases the a(cid:138)acker’s reward as
a side-e(cid:130)ect. Note that in the FAW a(cid:138)ack game in Section 7, since
two pools are a(cid:138)acking each other, both managers are rational.
(cid:140)erefore, they always propagate a block found by the opponent’s