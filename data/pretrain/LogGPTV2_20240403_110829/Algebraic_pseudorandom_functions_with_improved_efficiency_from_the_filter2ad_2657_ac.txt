let u ← T [x1 . . . xt] ∈ {1, . . . , q}
B queries its F (q) challenger at (xt+1, u) and
obtains some kt+1 ∈ K
note: kt+1 is either random in K or is equal to
u), xt+1) for some random key (s, k∗
u)
F ((s, k∗
chosen by B’s challenger.
for j = t + 2, . . . , n do:
kj ← F ( (sj, kj−1), xj)
(ﬁnish the cascade)
send kn to A
eventually A outputs a bit b(cid:48) ∈ {0, 1}.
B outputs the same bit and terminates.
Since A makes at most q queries the variable u is always
in the range [1, q] and therefore all of B’s queries to its chal-
lenger are in the proper range.
When B’s challenger emulates a random function then B
emulates a Pt+1 challenger to adversary A. When B’s chal-
lenger emulates F (q) then B emulates a Pt challenger to
adversary A. Therefore (4) holds which completes the proof
of the theorem.
queries: to respond to a query (x1, . . . , xn) ∈ X n
4. EXISTING ALGEBRAIC PRFS
We brieﬂy review two existing algebraic PRFs in the lit-
erature and explain how their security neatly follows from
the security of the augmented cascade construction.
4.1 The Naor-Reingold PRF
We start with the Naor-Reingold PRF [28]. Let G be a
group of order p and let f : (Zp × G) × {0, 1} → G be the
function
(cid:26) h
hx
f(cid:0)(x, h), b(cid:1) := h(xb) =
∗n(cid:0) (x1, . . . , xn, h)
(cid:124)
(cid:125)
(cid:123)(cid:122)
(cid:124)
, (b1 . . . bn)
(cid:123)(cid:122)
(cid:125)
key
input
if b = 0
if b = 1
(5)
(cid:1) = h
(cid:16)
(cid:17)
1 ···xbn
b1
n
x
Plugging f into the augmented cascade we obtain the fol-
lowing PRF whose domain is {0, 1}n and range is G:
FNR := ˆf
To show that FNR is a secure PRF it suﬃces to show that f
is parallel secure. Naor and Reingold do so implicitly in
their proof. We state this in the following lemma.
Lemma 4. If the DDH assumption holds for the group G
then the function f deﬁned in (5) is q-parallel secure for all
q polynomial in the security parameter.
Proof. To prove that f is q-parallel secure we need to show
that f (q) is a secure PRF. The function f (q) has domain
{0, 1} × [q] which is a set of size 2q. Hence, it suﬃces to
show that enumerating the 2q outputs of f (q) gives a secure
pseudorandom generator. In particular, all we need to show
is that
G(x, h1, . . . , hq) := (h1, hx
1 , . . . , hq, hx
q )
is a secure PRG, assuming DDH holds in G. This is a direct
application of the random self reduction of DDH [28]. For
completeness, we brieﬂy review the reduction.
Let A be an algorithm that distinguishes the output of
G on a random seed from a random tuple in G2q. We
build an algorithm B that breaks DDH in G. Given a tuple
(g, h, u, v) as input, algorithm B chooses random a1, . . . , aq
and b1, . . . , bq in Zp and computes
(cid:0)ga1 ub1 , ha1 vb1 , . . . , gaq ubq , haq vbq(cid:1) ∈ G2q
(6)
Naor and Reingold show that if (g, h, u, v) is a DDH tuple
then (6) is distributed as the output of G on a random seed.
If (g, h, u, v) is a random tuple then (6) is random in G2q.
Algorithm B runs A on the tuple (6) and outputs whatever A
outputs. Then DDHadv[B, G] = PRFadv[A, f (q)] as required.
The running time overhead of B is polynomial in q.
Combining Theorem 3 with Lemma 4 proves that the func-
tion FNR is a secure PRF whenever DDH holds in G.
4.2 The Lewko-Waters PRF
Lewko and Waters construct a PRF from the k-linear as-
sumption [24]. While their PRF is not as eﬃcient as the
PRF of Naor and Reingold, their construction can remain
secure in groups where DDH is false.
and deﬁne f : (Zk×k
Let G be a group of order p. Let k > 0 be a parameter
p × Gk) × {0, 1} → Gk as the function
f(cid:0)(A, h), b(cid:1) := Ab · h =
(cid:26) h
A · h
if b = 0
if b = 1
(7)
135Recall that the notation A· h is deﬁned in Section 2.2. Plug-
ging f into the augmented cascade we obtain the following
PRF whose domain is {0, 1}n:
∗n(cid:0)(A1, . . . , An, h), (b1 . . . bn)(cid:1)
FLW := ˆf
= (Ab1
1 ··· Abn
n ) · h ∈ Gk
To show that FLW is a secure PRF it suﬃces to show that f
is parallel secure. Lewko-Waters do so implicitly in their
proof. We state this in the following lemma.
Lemma 5. If the k-linear assumption holds for the group G,
then the function f with parameter k deﬁned in (7) is q-
parallel secure for all q polynomial in the security parameter.
Proof sketch. As in the proof of Lemma 4, it suﬃces to
show that
G(A, h1, . . . , hq) := (h1, A · h1, . . . , hn, A · hn)
is a secure pseudorandom generator, assuming k-linear holds
in G. To prove this, one ﬁrst shows that this G is a se-
cure PRG when A is a random row vector in Zk
p. This uses
the random self reduction of the k-linear problem described
in [24]. Then one extends this to a k × k matrix using a hy-
brid argument over the k rows of the matrix A. Both ingre-
dients are given in the Lewko-Waters proof of security.
Combining Theorem 3 with Lemma 5 proves that the func-
tion FLW with parameter k is a secure PRF whenever the
k-linear assumption holds in G.
5. A NEW ALGEBRAIC PRF
Our starting point is a secure PRF due to Dodis and Yam-
polskiy [18] with a domain of size (cid:96) for some small (cid:96). The
PRF is proven secure under the (cid:96)-DDH assumption. Recall
that we use [(cid:96)] to denote the set {1, . . . , (cid:96)} and consider the
PRF f : (Zp × G) × [(cid:96)] → G deﬁned as follows:
f ( (s, h)
, x ) := h1/(s+x)
(8)
(cid:124)(cid:123)(cid:122)(cid:125)
key
As before we deﬁne h1/0 = 1. Dodis and Yampolskiy prove
the following theorem.
Theorem 6 ([18]). Suppose the (cid:96)-DDH assumption holds
in G. Then f is a secure PRF provided the domain size (cid:96) is
polynomial in the security parameter.
In particular, for every PRF adversary A there is an (cid:96)-DDH
algorithm B such that
PRFadv[A, f ] = DDH((cid:96))
time(B) = time(A) + O((cid:96) · T )
adv[B, G] and
where T is the maximum time for exponentiation in G.
Plugging f into the augmented cascade we obtain a PRF
whose domain [(cid:96)]n has exponential size. The resulting PRF
is deﬁned as follows:
F := ˆf
) := h[1/(cid:81)n
∗n( (s1, . . . , sn, h)
, (x1, . . . , xn)
i=1(si+xi)]
(cid:124)
(cid:123)(cid:122)
key
(cid:125)
(cid:124)
(cid:123)(cid:122)
input
(cid:125)
(9)
As discussed in the introduction, this PRF is more eﬃcient
than the Naor-Reingold PRF since it processes log2 (cid:96) bits
per block rather than just one bit per block. The cost of
this increased eﬃciency is reliance on a stronger assumption,
namely (cid:96)-DDH.
Theorem 7. The PRF deﬁned in (9) is secure assuming
the (cid:96)-DDH assumption holds in G.
To prove the theorem it suﬃces to show that f deﬁned
in (8) is parallel secure; namely that f (q) is a secure PRF
for all polynomial q. We state this in the following lemma.
Lemma 8. If the function f deﬁned in (8) is a secure PRF
and the DDH assumption holds in G then f is q-parallel se-
cure for all q polynomial in the security parameter.
In particular, for every PRF adversary A there are adver-
saries B1 and B2, whose running time is about the same as
A’s, such that
PRFadv[A, f (q)] ≤ PRFadv[B1, f ] + q · DDHadv[B2, G]
Note that the DDH assumption is implied by the k-DDH
assumption and hence the DDH assumption used in Lemma 8
does not add an assumption beyond the one already used to
prove that the underlying f is a secure PRF.
Proof of Lemma 8. Our goal is to show that f (q) is a
secure PRF. We present the proof as a sequence of three
games between a challenger and a PRF adversary A that
attacks f (q). For i = 0, 1, 2, let Wi be the probability that
A outputs 1 at the end of Game i.
Game 0. The challenger in this game behaves as a standard
challenger presenting the adversary with an oracle for the
pseudorandom function f (q) with a random key (s, h1, . . . , hq).
Game 1. The challenger in this game starts by choosing
a random function u : [(cid:96)] → G.
It also chooses random
r1, . . . , rq in Zp. Now, given a query (x, i) ∈ [(cid:96)] × [q] from
the adversary, the challenger responds with u(x)ri .
We show that Games 0 and 1 are indistinguishable, as-
suming f is a secure PRF. In particular, there is a PRF
adversary B1, whose running time is about the same as A’s,
such that
|W0 − W1| = PRFadv[B1, f ]
(10)
Adversary B1 interacts with a PRF challenger for f and
plays the role of an f (q) PRF challenger for A. Adversary
B1 works as follows:
choose random r1, . . . , rq in Zp.
given a query (x, i) ∈ [(cid:96)] × [q] from A do:
issue a query to B1’s challenger with input x and
obtain y in response.
respond on A with yri .
ﬁnally, output whatever A outputs.
When B1’s challenger emulates an oracle for the func-
tion f with random key (s, h) it responds to query x with
y = h1/(s+x). For i = 1, . . . , q deﬁne hi := hri . Then B1’s
response to A’s query for (x, i) is simply h1/(s+x)
which is
precisely f (q)( (s, h1, . . . , hq), (x, i) ). Hence, in this case B1
emulates a Game 0 challenger for A.
When B1’s challenger emulates a random function u :
[(cid:96)] → G then B1’s response to A’s query for (x, i) is simply
i
136u(x)ri which is precisely how a Game 1 challenger would
respond. These two arguments prove (10), as required.
Game 2. The challenger in this game presents the adver-
sary with an oracle for a random function w : [(cid:96)] × [q] → G.
We use Lemma 1 to argue that Games 1 and 2 are indis-
tinguishable assuming the DDH assumption holds in G. In
particular, there is a DDH algorithm B2 such that
|W1 − W2| ≤ q · DDHadv[B2, G]
(11)
Let (x1, i1), . . . , (xq, iq) be A’s queries to its challenger. Re-
call that in Game 1 the challenger responds to A’s queries
using a random function u : X → G and random r1, . . . , rq ∈
Zp. Let A ∈ Zq×q
be the matrix A := (risj)1≤i,j≤q. Clearly
A has rank 1.
In Game 1 the adversary is given q entries in the matrix
gA ∈ Gq×q.
In Game 2 the adversary is given q random
values in G which we treat as q entries in a random q × q
matrix in G. By Lemma 1 there is an algorithm B2 that
satisﬁes (11), as required.
p
Summary. Combining (10) and (11) shows that
PRFadv[A, f (q)] = |W0 − W2| ≤ |W0 − W1| + |W1 − W2|
≤ PRFadv[B1, f ] + q · DDHadv[B2, G]
as required.
The proof of Theorem 7 follows by combining Theorem 3