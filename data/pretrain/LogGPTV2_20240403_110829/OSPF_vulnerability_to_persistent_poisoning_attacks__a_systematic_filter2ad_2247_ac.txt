### Attack Comparison and Analysis

#### Table 2: Comparative Analysis of Attack Techniques
In Table 2, we compare the attack techniques presented in [11] and [16] with the new attack technique we have uncovered. All three attacks involve the persistent falsification of a Link State Advertisement (LSA) for a victim router that is not controlled by the attacker. However, our attack appears to be more potent:

- **Persistence**: Our attack does not trigger the victim router to originate a fight-back LSA during the attack.
- **Efficiency**: It requires only a single malicious packet to execute the attack.
- **Scope**: It can be used to poison the entire topology.

**Note**: For Router-LSAs, the Advertising Router field must match the Link State ID field, and both must be known.

### Experimental Results

#### GNS3 Simulation
We tested the attack using the GNS3 software, which simulates network topologies. The attack was successful, and our main findings are as follows:

1. **False LSA Installation**: The false LSA replaces the valid LSA in the LSA databases of all routers, including the victim router. Consequently, all routers use the false LSA for routing table calculations.
2. **Routing Table Poisoning**: All routers, except the victim, build their routing tables based on the false LSA. For example, the route to R2 in R1’s routing table is removed.
3. **Victim Routing Table Erasure**: The victim's routing table is erased due to the invalid value in the Advertising Router field of the false LSA. This erasure is permanent, and the victim cannot recover without reinitializing the OSPF process.
4. **Attack Reversal**: The attacker can reverse the effects by sending another false LSA on behalf of the victim, this time with an Advertising Router field equal to the victim’s ID and a higher sequence number. This triggers a fight-back from the victim, reinstating the valid LSA and normalizing the routing tables.

#### RouterOS Testing
RouterOS is a software router that can run on an x86 PC. We tested the latest version (6.2) using four virtual machines running Ubuntu 10.4 Desktop. Each VM ran a single instance of RouterOS, configured in the same topology. Our main findings were:

1. **False LSA Installation**: The false LSA is installed in the LSA databases of all routers, but unlike the Cisco case, the valid LSA remains in the databases.
2. **Routing Table Calculation**: All routers, except the victim, consider the false LSA during routing table calculations, leading to poisoned routing tables.
3. **Victim Routing Table Erasure**: The victim's routing table is erased, similar to the Cisco case.
4. **Attack Reversal Failure**: Attempting to trigger a fight-back with a second false LSA does not reverse the attack's effects.

### Topology and Setup
The topology used for the experiments is depicted in Figure 3. The routers are labeled as follows:
- **Victim**: The router on whose behalf a false LSA is advertised.
- **Attacker**: The compromised router that originates the false LSA.
- **R1**: A router co-located on the same local network as the attacker and victim.
- **R2**: A router connected to the victim.

The false LSA has the following fields:
- **Link State ID**: Victim’s ID
- **Advertising Router**: Not equal to the victim’s ID (an arbitrary value)
- **LS Sequence Number**: Higher than the valid LSA’s sequence number

The attacker advertises an LSA on behalf of the victim, indicating that the victim has only a single link to Net1, thereby poisoning R1’s LSA database and removing the route to R2.

### Mitigation Measures
Our attack exploits the following vulnerabilities in the OSPF standard:

1. **No Sanity Check**: There is no verification that the Link State ID field equals the Advertising Router field.
2. **Fight-Back Triggering**: A fight-back is triggered only if the Advertising Router field matches the current router’s ID.
3. **Routing Table Calculation**: Router-LSAs are looked up in the LSA database using only the Link State ID field.

Possible mitigation measures include:

1. **Sanity Check**: Implement a check to ensure the Link State ID field equals the Advertising Router field; discard the LSA otherwise.
2. **Enhanced Fight-Back**: Trigger a fight-back if either the Advertising Router or Link State ID matches the current router’s ID.
3. **Full Identifier Lookup**: Use the full identifier for Router-LSA lookups during routing table calculation.

### Formal Verification
Model checking is a formal verification method used to determine if a system satisfies a desired specification. Previous works have analyzed OSPF security using model checking, but they abstracted many details. In this work, we extend a previous formal model of OSPF to include the fight-back mechanism and routing table calculation, allowing for a more detailed search for potential attacks.

#### Model Overview
- **Network Topology**: Fixed topology with legitimate OSPF routers and a single malicious router.
- **Modeled Functionality**: LSA message structure, LSA flooding, fight-back mechanism, and routing table calculation.

#### Pseudo-Code
- **Main Function**: A loop where each router, including the attacker, can run their procedure once per cycle. Flooding timers are decremented in each cycle.
- **Attacker Procedure**: Generates and floods an arbitrary LSA.
- **Router Procedure**: Checks and processes incoming LSAs, triggering a fight-back if necessary.

For a detailed implementation, refer to the full model code available at [2].

### Conclusion
Our analysis and experiments demonstrate the effectiveness and potential impact of the new attack technique. By implementing the proposed mitigation measures, vendors can significantly reduce the vulnerability of their OSPF implementations.