this does not affect the subsequent updatability check.
3. Library updatability: Finally, we combine these two data sets
to determine whether and to which extent libraries in apps can be
updated. While libraries can, by definition, be replaced by patch
and minor releases, this large-scale analysis investigates whether
libraries can be replaced by subsequent major versions that account
for 44% of all library releases. Furthermore, this allows us to identify
hotspot-APIs, i.e., APIs of the libraries that are most/least frequently
used, and to determine their stability.
4.2 Updatability Statistics
We conduct a large-scale evaluation in which we analyzed 98 dis-
tinct libraries and scanned 1,264,118 apps from Google Play. The
results are summarized in Figure 13. LibScout successfully identifies
2,028,260 libraries (exact matches only). In 239,019 cases (11.8%),
we could not detect any library APIs that are actively used, i.e.,
those libraries are dead code. For the remaining 1,789,241 libraries,
we can determine the set of used APIs and correlate it with the
API robustness data. The results suggest that in 85.6% of the cases
the identified library can be upgraded by at least one version (Up-
grade1+) without any code adaption, simply by replacing the old
library. Even more surprising, a subset of 861,852 libraries (48.2%)
can be upgraded to the most current library version (Upgrade2Max).
Only in 14.4% of the cases the library can not be upgraded by a
single version without additional effort (non-upgradable), i.e., the
next version changed or removed used APIs. One major reason for
this high updatability rate is that although the majority of libraries
offer hundreds or even thousands of different API functions, the
Table 5: Updatability to the most current version by sum of
libraries and library matches grouped into 20% bins. How
to read: Between 80–99% of all identified versions of 10 dis-
tinct libraries can be upgraded to the latest version. These
10 libraries account for 579,294 library matches.
Percentage
100%
80–99%
60–79%
40–69%
20–39%
0–19%
Total
by # of libs
5 (13.5%)
10
(27%)
5 (13.5%)
5 (13.5%)
4 (10.8%)
8 (21.6%)
37
by # of lib matches
(1%)
11,346
579,294
(51%)
139,189 (12.3%)
121,671 (10.7%)
228,393 (20.1%)
55,690 (4.9%)
1,135,583
typical app developer only uses a small subset thereof. Our results
indicate that the average number of APIs used across libs is 18.
In the following, we analyzed the extent to which libraries in
apps could be upgraded to the latest version. In contrast to the
SemVer analysis in the previous section, this puts a higher focus
on the robustness of more popular APIs. Libraries that are stable in
their most frequently used APIs, even across major versions, are
assumed to have a high-updatability rate. To verify this assumption,
we grouped 37 libraries for which we have more than 10 versions
and more than 50 matches in our large-scale analysis according to
updatability to the newest version. Table 5 shows the fraction of
library matches that can be updated to the latest version, bucketed
into 20% bins. The column on the right aggregates the absolute
numbers of matches for those libraries.
We could not find a correlation between the absolute number
of used APIs and library updatability. While the libraries in the
top bucket on average use 11.9 APIs (with a standard deviation
of σ = 7.8), the libraries in the last bucket only have a slightly
higher API usage (mean = 14.7, σ = 8.4). However, aggregating
the top ten most frequently used library functions and correlating
them with their stability across library versions revealed the root
cause. Libraries with a high updatability to the most current version
are stable for the most popular APIs (even across major versions),
while libraries with a very low updatability showed a completely
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2194Figure 13: Library updatability of current apps on Google Play
different picture. In these cases, either (parts of) the most popular
APIs have been completely replaced by a new APIs or existing ones
have been modified or renamed. In our data set, Google’s Gson
library was a positive example with a 99.91% updatability to the
most current version in 315,079/315,371 library matches. On the
other hand, Retrofit could have been upgraded to the latest version
only in 0.07% (20/30,568) cases due to major API changes in recent
versions.
4.3 Security Vulnerability Fixing
Besides general library updatability, we are particularly interested
in how easy vulnerable library versions can be patched. To this end,
we investigate the eight publicly known vulnerabilities described
in Section 3. We could not easily increase the set of libraries since
it is not trivial to find reports on SDK vulnerabilities (see Table 4).
However, the affected libraries are commonly used by many ap-
plications (14.4% of 1,264,118) and thus any vulnerability in these
libraries does affect thousands or even millions of users.
Table 6 shows the libraries with the range of vulnerable versions.
After scanning the app repository, we found 18,397 apps that in-
clude one of the vulnerable library versions. This is particularly
surprising for the vulnerabilities reported by ASI, since the remedi-
ation deadline for those libraries has already expired4, i.e., many
app developers either have not reacted to Google’s reporting or
did not receive a notification in the first place. The subsequent API
usage analysis revealed that 91.5% of these libraries are actively
used by applications, i.e., at least one API call to the library was
found in the non-library code. In the remaining 8.5% of cases the
library is included in the app but is not in use, i.e., it is considered
dead code. This number is slightly lower than the 11.8% reported
for all libraries. For the advertising library MoPub we were not able
to find apps with one of the vulnerable library versions from the
year 2015. Note that using some of these libraries is already suffi-
cient to be vulnerable. This includes all advertisement libraries and
Dropbox. There is no need to explicitly invoke specific APIs, since
the library’s core functionality (Dropbox authentication or showing
ads in a WebView) is triggered upon initialization without further
interaction. For the remaining libraries the vulnerable functionality
has to be triggered by the application such as login at Facebook or
certificate pinning from OkHttp.
4Apps are not deleted from Google Play after the remediation phase but further app
updates are rejected as long as the vulnerability remains unfixed.
Out of the 16,837 actively used libraries, 97.8% could be patched
through a simple drop-in replacement of the vulnerable version
with the fixed one. In 57.3% of the cases, the library could even be
replaced by the most current version available. The perfect updata-
bility result for Airpush is due to the fact, that the patched version
is the most current version to date and includes code changes only.
Therefore, all versions of the second-to-last version 8.0 could be
upgraded to the latest version. Dropbox achieved the lowest auto-fix
rate since there were some changes to the most frequently used
APIs between 1.5.4 and the fixed version 1.6.2. Note, that the actual
numbers for Airpush and Vungle could even be higher, since we
were only able to retrieve between 1–3 versions prior to the fixed
version.
5 DISCUSSION
In the Android app ecosystem the majority of developers makes an
increasing use of third-party libraries to enhance usability and func-
tionality of their apps. However, those components are a double-
edged sword. While alleviating development through code reuse,
they have been found to be a major source of bugs and security vul-
nerabilities [17, 38, 40, 42]. To provide end-users reliable software,
it is therefore of outmost importance to keep third-party libraries
up-to-date. However, recent studies [4, 9, 23, 31] have demonstrated
that in reality, we are far from having up-to-date third-party com-
ponents and as a consequence this ultimately puts the end-user’s
privacy and security at risk.
Our app developer survey (see Section 2) was a first step towards
identifying the root causes why developers do not update libraries.
A valuable insight is that while about 60% of app developers regu-
larly update their application (at least once per quarter), mainly for
new functionality, the motivation to update the included libraries
is quite low (only 33% considers updating libraries as part of the
app update). Contrary to the motivation to update apps for new
functionality, the main incentive to update libraries is primarily
bugfixes and security fixes. However, this is impeded by the fact
that 63% of all library releases mix code fixes with new content
and/or non-compatible API changes (cf. Figure 12).
5.1 The Role of the Library Developer
Our survey suggests that many developers abstain from updating
dependent libraries due to an expected high integration effort and
to prevent incompatibilities. Our library API analysis in Section 3
supports this assumption. There is consistently a mismatch between
2,028,260239,0191,789,241257,1171,532,124670,272861,852All matchesUsed/Unused librariesUpgrade possibleUpgradability0500,0001,000,0001,500,0002,000,000Number of library matchesLibrary matchesLibraries unusedLibraries usedNon−UpgradableUpgradeableUpgrade1+Upgrade2MaxSession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2195Table 6: Number of apps found with a vulnerable library version, number of apps that actively use this library, number of apps
that could be patched to the first non-vulnerable version without code adaptation (update2Fix), to the most current version
available (update2Max), or not updated to a fixed version without code modification (non-fixable). Unused libraries are not
considered in the last three columns.
Library
Airpush
Apache CC 3.2.1 / 4.0.0
Dropbox
1.5.4 - 1.6.1
3.15
Facebook
2.1.0 - 2.7.4
OkHttp
3.0.0 - 3.1.2
3.10 - 4.3
5.14 - 6.3.4
3.0.6 - 3.2.2
Vuln. Versions Matches Libs in use
4,545
8.0
749
682
1,808
7,179
237
—
905
732
16,837
4,746
1,199
710
1,839
7,319
500
—
1,198
886
18,397
MoPub
Supersonic
Vungle
Total
expected changes, i.e., conveyed through the version number, and
the actual changes based on code/API changes (the semantic version
was correct only in 42% of all cases). One problem is that some of the
library developers are too conservative in that they never increase
the major number, e.g., Digits (29 versions), FasterXML-Jackson-
Core (61 versions), or vkontakte (29 versions), making the three
number versioning scheme an effective two number versioning
scheme. Another problem is when different libraries from the same
developer, e.g. Android support libraries or Google Play Service
libraries, have the same release cycle and different libraries receive
the same new version number independent from the actual changes.
The main reason for the mismatch between expected and actual
semantic version, however, is probably the wrong assessment of
changes by the lib developer. This means, that the specification of
the patch, minor, or major version is determined by the amount of
code changes and effort spent for this update rather than whether
the new release is API compatible to the current version.
Another aspect is that 44% of all library updates comprise major
versions. This implies that many library developers too frequently
release versions that might potentially break application code. This
is also backed by survey responses highlighting library update
problems like “It often impacts the rest of the code. Backwards com-
patibility isn’t ensured and that leads to a big effort in updating the
libs.” or “Sometimes library updates break existing features, due to
methods changes”. A more careful API design and aggregating un-
forced changes like API renaming to fewer major versions would
remedy this situation. As highlighted in Section 4, keeping the
most frequently used APIs stable, even across major versions, also
has a considerable effect on the overall updatability. In particular,
library developers should spend more effort in providing dedicated
releases for critical bugfixes and security fixes. In six out of ten
cases (cf. Table 4), security fixes were even bundled as major release,
which severely impedes widespread adoption.
As there is no widely accepted library market place or package
manager for Android, changelogs are typically the main means to
communicate changes to the application developer. Since about
80% of app developers read changelogs at least from time to time,
this is a good way to provide detailed information on bugfixes and
update2Fix
4,545 (100%)
749 (100%)
410 (60.1%)
1,792 (99.1%)
7,169 (99.9%)
237 (100%)
—
905 (100%)
653 (89.2%)
16,460 (97.8%)
update2Max
4,545 (100%)
(67%)
502
6 (0.01%)