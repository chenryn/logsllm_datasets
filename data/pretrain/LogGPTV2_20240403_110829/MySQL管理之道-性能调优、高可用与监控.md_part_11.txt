接收确认信号，此时看下面的程序：
到 slave 从库的接收确认信号，那么就会自动转换为传统的异步复制模式。
master主库一个确认，如果rpl_semi_sync_master_timeout=10 000（10秒）超过10秒未收
2.4.2
bin.000002'at position107
ON，表示半同步复制模式已经开始工作。
该操作会将IO_Thread线程关闭，等待10秒后，如果master主库未收到 slave从库的
它的工作原理就是当slave从库的IO_Thread线程将binlog日志接收完毕时，要给
可以发现，此时已经转换为异步复制模式。
在 slave从库上，停止I/O接收binlog线程，执行以下操作：
场景一：stop slave
是否开启半同步复制模式，在日志里也有显示，如下所示：
Rpl_semi_sync_slave_status：指示从服务器是否启动半同步复制模式，如果状态值为
口Rpl_semi_sync_master_clients：显示有多少个从服务器配置成了半同步复制模式。
口Rpl_semi_sync_master_status：指示主服务器使用的是异步复制模式，还是半同步复
MySQL>showstatuslike'%semi%';
QueryOK,0rowsaffected(0.04sec)
MySQL>stop slaveio_thread;
在上面的状态信息中，有以下参数值得关注：
1rows in set(0.00 sec)
1rows in set (0.00 sec)
在 slave从库上查看状态，如下：
Variable_name
MySQL>showstatuslike'%semi%';
Rpl_semi_sync_master_no_tx:
Rpl_semi_sync_slave_status
Rpl_semi_sync_slave_status
Variable_name
制模式。
半同步复制与异步复制的切换
|ON1
|Value
：显示从服务器确认的不成功提交数量。
IOFF
IValue
第2章半同步复制·65
---
## Page 80
66·第一部分MySQL5.5新特性篇
'sdf.Query:'drop database sd
如下所示。
master主机上再次执行 drop database test，删除一个 test库，这时主从同步复制就会报错，
我们来试着这样操作：先在 slave从机上drop database test 删除一个test库；然后到
场景二：模拟同步报错
可以看到，此时已经由原先的异步复制模式转换为半同步复制模式。
MySQL>showslavestatus\G;
然后查看以下程序：
Query OK,0rows affected(0.01 sec)
再次到 slave从库上执行以下操作：
1 rows in set(0.00 sec)
Rpl_semi_sync_slave_status
MySQL>startslave;
Variable_name
Replicate_Wild_Ignore_Table:
Replicate_Wild_Do_Table:
Replicate_lgnore_Table:
Relay_master_Log_File:MySQL-bin.000003
Exec_master_Log_Pos:299
Replicate_Ignore_DB:
Replicate_Do_Table:
Relay_Log_Space:1016
slave_IO_Running:Yes
Relay_Log_File:vm02-relay-bin.000020
master_Log_File:MySQL-bin.000003
Skip_Counter:0
Replicate_Do_DB:
slave_lo_State:Waitingformastertosendevent
Until_Log_File:
Until_Condition:None
LastError:Error'Can't drop database'sdf';database doesn't exist'onquery.Default database:
Relay_Log_Pos:445
Connect_Retry:6
Last_Errno:1008
master_Port:3306
master_User:repl
master_Host:192.168.8.22
|ON
|Value
---
## Page 81
的接收确认信号。
timeout=200000毫秒，约等于3分钟。
是否执行完。
slave 从库接收完二进制日志后会给 master主库一个确认，但它并不会管relay-log 中继日志
见半同步复制跟IO_THREAD是有直接关系的，但跟SQL_THREAD 没关系。也就是说，
'sdf.Query:'drop database sdf”
rpl_semi_sync_master_wait_no_slave=on，表示允许master每个事务提交后等待 slave
2）master主库上，执行下面的操作：
1）在 slave从库，停止同步复制，执行命令：“Stop slave;”。
下面是操作步骤：
我们先在 slave从机上关闭主从复制，为了方便看出效果，调整rpl_semi_sync_master.
场景三：commit提交等待
从上面的状态信息可以看出，没有转化为异步复制模式，仍然是半同步复制模式，可
MysQL>updatetsetname='ccd’whereid=3;
QueryOK,0rowsaffected(0.00sec)
MySQL> show statuslike'%semi%;
查看半同步复制状态：
1 row in set (0.00 sec)
master_SSL_Verify_Server_Cert:No
MySQL>begin;
Databasechanged
MySQL>usetest;
1 rows in set (0.00 sec)
Variable_name
Replicate_lgnore_Server_Ids:
Rpl_semi_sync_slave_status
Seconds_Behind_master:NULL
master_Server_Id:22
master_SSL_Cipher:
master_SSL_Cert:
master_SSL_CA_Path:
master_SSL_CA_File:
master_SSL_Allowed:No
Last_SQL_Error:Error'Can'tdrop database'sdf';database doesn'texist'onquery.Default database
Last_SQL_Errno:1008
Last_IO_Errno:0
Until_Log_Pos:0
Last_io_Error:
ION
Value
第2章半同步复制·67
---
## Page 82
68·第一部分MySQL5.5新特性篇
可以应用半同步复制。先来看一下测试环境，如下所示：
3分钟，所以提交就变慢了。
slave 从库的接收确认，因为rpl_semi_sync_master_timeout 设置的是 200 000 毫秒，约等于
2.5
性能测试的目的是对比半同步复制和异步复制在性能上哪个较好，在生产环境中是否
半同步复制和异步复制的性能对比
可以看到，一个简单的update需要耗时3分20秒，原因就是半同步复制需要等待
这里采用的是Sysbench压力测试，并发100个连接，1万个请求，表2-1是测试结果。
Sysbench 192.168.110.19（虚拟机，内存1GB）
MySQL>select*fromt;
Rowsmatched:2Changed:2Warnings:0
Query OK,2rows affected (0.07 sec)
--MySQL-socket=/tmp/MySQL.sockrun
--num-threads=100
--max-requests=10000
/usr/local/bin/sysbench--test=oltp
MySQLslave192.168.110.141（虚拟机，内存1GB）
MySQLmaster192.168.110.140（虚拟机，内存1GB）
QueryOK,0rows affected(3min20.00 sec)
MySQL>commit;
6 rows in set (0.01 sec)
-MySQL-db=test
-MySQL-port=3306
-oltp-table-size=9000000
-MySQL-table-engine=innodb
id|name|
-MySQL-password=123456
MySQL-user=admin
-MySQL-host=192.168.110.140
3|ccd
1la
1la
性能测试
2|b
2|b
---
## Page 83
模式进行了压力测试，从结果表现上来看，异步复制的性能（吞吐率）要稍好于半同步复制。
other operations:
read/write requests:
OLTP test statistics:
rpl_semi_sync_master_wait_no_slave =ON
rpl_semi_sync_master_timeout =1000
deadlocks:
参数：
transactions:
由于上面用的是虚拟机，压力测试参数没有调得太高，就是在这种情况下，对两种复制
这表示 slave机器在等待接收binlog日志。
在半同步复制中，用命令showprocesslist可以看到：
queries performed:
total:
write:
read:
other:
103
SELECTcfromsbtestwhereid=?
COMMIT
105 | admin  192.168.110.19:44350
COMMIT
COMMIT
1102 |admin | 192.168.110.19:44347
|100|admin|192.168.110.19:44345|test |Execute
104admin 192.168.110.19:44349
101admin192.168.110.19:44346
COMMIT
106
103
rOWWS
admin
10000（50.38per sec.)
inset
20000 (100.75 per sec.)
半同步复制
(0.00 per sec.)
190000 (957.16 per sec.)
210000
3
20000
50000
140000
.05
192.168.110.19:44351
sec)
192.168.110.19:44348
表2-1
半同步复制与异步复制性能对比
from
test|Execute
test|Execute
|test|Execute
test|Execute
Itest
test
sbtest
other operations:
read/write requests:
deadlocks:
transactions:
OLTP test statistics:
rpl_semi_sync_slave_enabled = OFF
rpl_semi_sync_master_wait_no_slave =OFF
rpl_semi_sync_master_enabied= OFF
Execute
参数：
Execute
queries performed:
1 |Waiting for semi-syncACK from slave
1Waitingfor semi-sync ACK from slave
1 Waiting for semi-sync ACK from slave
1Waiting for semi-syncACK from slave
1 Waiting for semi-sync ACK from slave
total:
write:
read:
other:
where
10000 (65.22 per sec.)
20000 (130.45 per sec.)
异步复制
190000 (1239.26 per sec.)
210000
(0.00 per sec.)
20000
50000
140000
Bunepdn|I
id=4497173
第2章
半同步复制·69
---
## Page 84
70·第一部分MySQL5.5新特性篇
ping 延时、半同步复制和异步复制就会切来切去，这会使主库的更新、插人、删除操作受
到影响。
复制稍慢一些，因为多了一个回馈确认步骤。尤其是在网络受到波动的情况下，这时丢包、
速度。有利也有弊，利在于数据一致性，在于更新、插人、删除的速度要比传统的异步
2.6小结
半同步复制目的是保证主从数据的一致性，等待返回的时间长短决定了数据库的更新
---
## Page 85
第6章
第5章
第4章
第3章
备份与恢复
性能调优
同步复制报错故障处理
故障诊断
故障诊断与性能优化篇
第二部分
---
## Page 86
坏。它在内存中开辟一个Buffer_Pool缓冲池，然后把数据页和索引页都放在内存缓冲池中
考虑用于大型、高负荷、高并发生产环境的，因此内存的大小直接反映了数据库的性能好
库，可以适当采用将数据分级存储在SSD固态电子硬盘中的方式，速度会得到较大提升！
很昂贵。目前在生产环境中主要采用RAID10、RAID5，对于数据读写操作频繁的表或数据
特点是：不用磁头读取数据，寻道时间几乎为0，快速的随机读写，延迟极小，当然价格也
遇到了VO瓶颈时，可以把磁盘升级为RAID或SSD固体硬盘来提升性能，SSD固态硬盘的
展开的，例如，innodb_io_capacity参数，可以加大每秒刷新脏页的数量。因此在单块磁盘
I/O 性能急剧下降。
况下，每次执行读写操作，磁道可能存在较大的偏移，磁道寻址时间加大，将会导致磁盘
方式，决定了其随机读写速度将明显低于顺序读写。在多进程或多线程并发读取磁盘的情
速度至关重要。读写速度快的磁盘，通常都带有较大的读写缓存。磁盘的寻道过程是机械
作的，主要体现在读写前寻找磁道的过程中。磁盘自带的读写缓存大小，对于磁盘的读写
3.1
阀值时，
了网站、修复的时间太慢，类似的问题总出现等。所以应该有一套监控流程，当出现报警
到服务器宕机后，再充当“救火队员”，虽然故障解决了，但投诉量也更多了：用户访问不
用。作为故障预警，应该尽量做到把问题扼杀在摇篮中，当出现问题时及时处理，不要等
影响MySQLInnoDB引擎性能的另一个因素就是内存，InnoDB引擎在设计之初就是
在第1章介绍的新特性来看，几乎都是围绕着如何充分利用内存，如何减少磁盘I/0来
，同时还会针对这些故障提供一些分析思路和解决方案，希望能对大家有一定的借鉴作
影响MySQLInnoDB引擎性能的最主要因素就是磁盘I/O，目前磁盘都是机械方式运
在这一章里，将会针对笔者在MySQL服务器管理工作中所遇到的一些常见故障进行汇
影响MySQL性能的因素
，马上去解决问题，把风险降到最低。
故障诊断
第3章
---
## Page 87
3.2.1影响Linux服务器性能的因素
由第三方开发并开源的工具来进行介绍，书中所有的操作环境都是CenOS(RHEL)平台。
这些工具能让你清楚当前系统的运行情况，帮助你找出影响系统性能的原因。本书主要针对
top、mpstat以及第三方开发的工具，如dstat、collectl及淘宝的开源监控项目Tsar等。熟悉
知识进行比较全面的介绍。
统的运行状态是否健康等，对于数据库服务器而言这些工作非常重要。本节将对这方面的
长期面对的问题，包括上线前各方面的性能测试及上线后整体性能评估，以及随时掌握系
和应用有非常深人的了解。对于MySQLDBA来说，系统性能的实时检测和评估是其需要
3.2系统性能评估标准
可以用系统命令来分析，关于分析细节将会在后面章节中具体介绍。
很快就得到了执行结果，那么就不是SQL的问题，而是业务增长造成的硬件瓶颈。进一步
较为熟悉，再对比最近二到三天内邮件上的慢SQL，这样很容易找出存在的问题。假设某
控来确定了，比如，每天早上发一封慢日志邮件来查看SQL的情况，自然就对业务的SQL
不能使用索引。可见，审核SQL语句是个很重要的工作。
个SQL在昨天慢日志里没有出现，而在今天却出现了，那么尝试着在备机上运行下，如果
心的读者可能会发现id是int数值整型，由于加上了引号（")，转化为字符型，于是造成了
例如：
核，可避免线上遇到问题。优化一条SQL语句在某种情况下，比增添1条内存管用得多。
而另一种常见的情况是，大量的慢SQL是导致性能低下的首要“元凶”，在这种情况下，优
部放人内存，这时才能达到最佳性能。
服务器上面，可以将其设置为60%～80%的内存。如果你有足够的内存，可以将数据量全
认值时InnoDB的性能很差，远远不能满足生产的需求。在只有InnoDB存储引擎的数据库
中最重要的参数之一，对InnoDB的性能有决定性的影响。默认的设置只有8MB，使用默
读写，因为在内存中的读写要比在磁盘里快得多，InnoDB设计之初就考虑到了这个问题。
慢SQL是关键，在上线前，应有专门的DBA来审核开发写的SQL语句，通过这样的审
在运维工作中常用到的性能分析工具包括：vmstat、sar、iostat、netstat、free、ps、
在服务器运维工作中，性能调优是一项富有挑战性的工作，它需要对硬件、操作系统
而如何分辨是硬件性能上遇到了瓶颈，还是SQL自身的问题？这个就要通过日常的监
上面两个因素是从硬件角度上看的，也就是说因为业务的增长，致使硬件遇到了瓶颈
在Buffer_Pool缓冲池中，涉及的参数为 innodb_buffer_pool_size，它是InnoDB引擎
这条语句乍一看没什么问题，可运行后马上就记录在慢日志里了，这是怎么回事？细
在操作系统层面影响Linux服务器性能的因素主要就是服务器CPU、内存、磁盘 I/O、
SELECT*FROMtWHEREid>='10'andid<='30';
第3章故障诊断·73
---
## Page 88
74·第二部分故障诊断与性能优化篇
系统性能的各种可用指标和它们的意义。由于Linux是一个开源的操作系统，因此有很多