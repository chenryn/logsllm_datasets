    order by tbl.c3,tbl.c1 limit 10     -- 每个品牌最多返回10个商品  
  )  
  union all  
  (  
    -- 递归查询  
    select tbl.*,   
           t_max.c1 as t_max_c1   -- 下一个品牌  
    from   
    (select t_max_c1 from skip limit 1) s,  -- 得到上次计算的这次递归查询的品牌  
    LATERAL (select c1 from tbl   
             where c3=1     -- 计算符合条件的  
	     and c1 > s.t_max_c1          -- 下一个品牌  
	     order by c3,c1 limit 1  
	    ) t_max,    
    LATERAL (select * from tbl         -- 当前计算品牌的10个商品  
             where tbl.c3=1   
	     and tbl.c1=s.t_max_c1     -- 当前品牌由上次的worker table. t_max_c1得到  
	     and tbl.* is not null   
	     order by tbl.c3,tbl.c1 limit 10  -- 每个品牌10个商品  
	    ) tbl  
  )  
)  
select count(*) from skip;  
 count    
--------  
 100000  
(1 row)  
Time: 417.975 ms  
```  
执行计划  
```  
                                                        QUERY PLAN                                                           
---------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=142.06..142.07 rows=1 width=8)  
   CTE tmp  
     ->  Limit  (cost=0.44..1.31 rows=1 width=8)  
           ->  Index Only Scan using idx_tbl_1 on tbl  (cost=0.44..39795.81 rows=45681 width=8)  
                 Index Cond: ((c3 = 1) AND (c1   Recursive Union  (cost=0.92..138.27 rows=110 width=24)  
           ->  Limit  (cost=0.92..12.17 rows=10 width=24)  
                 InitPlan 2 (returns $2)  
                   ->  CTE Scan on tmp  (cost=0.00..0.02 rows=1 width=4)  
                 ->  Nested Loop  (cost=0.90..567.65 rows=504 width=24)  
                       ->  Limit  (cost=0.46..0.53 rows=1 width=8)  
                             InitPlan 3 (returns $3)  
                               ->  CTE Scan on tmp tmp_1  (cost=0.00..0.02 rows=1 width=4)  
                             ->  Index Only Scan using idx_tbl_1 on tbl tbl_2  (cost=0.44..122423.77 rows=1682778 width=8)  
                                   Index Cond: ((c3 = 1) AND (c1 > $3))  
                       ->  Index Scan using idx_tbl_1 on tbl tbl_1  (cost=0.44..562.07 rows=504 width=20)  
                             Index Cond: ((c3 = 1) AND (c1 = $2))  
           ->  Nested Loop  (cost=0.88..12.39 rows=10 width=24)  
                 ->  Nested Loop  (cost=0.44..0.56 rows=1 width=8)  
                       ->  Limit  (cost=0.00..0.02 rows=1 width=4)  
                             ->  WorkTable Scan on skip skip_1  (cost=0.00..2.00 rows=100 width=4)  
                       ->  Limit  (cost=0.44..0.51 rows=1 width=8)  
                             ->  Index Only Scan using idx_tbl_1 on tbl tbl_3  (cost=0.44..122423.77 rows=1682778 width=8)  
                                   Index Cond: ((c3 = 1) AND (c1 > skip_1.t_max_c1))  
                 ->  Limit  (cost=0.44..11.63 rows=10 width=20)  
                       ->  Index Scan using idx_tbl_1 on tbl tbl_4  (cost=0.44..562.07 rows=502 width=20)  
                             Index Cond: ((c3 = 1) AND (c1 = skip_1.t_max_c1))  
                             Filter: (tbl_4.* IS NOT NULL)  
   ->  CTE Scan on skip  (cost=0.00..2.20 rows=110 width=0)  
(30 rows)  
```  
### 使用UDF  
```  
create or replace function get_res() returns setof tbl as $$  
declare  
  v_c1 int;  
begin  
  -- 初始递归条件  
  select c1 into v_c1 from tbl where c3=1 and c1v_c1 order by c1 limit 1;  
    if not found then  
      return;  
    end if;  
    -- 返回加入递归条件后的结果  
    return query select * from tbl where c3=1 and c1v_c1 order by c1 limit 1;  
    if not found then  
      return;  
    end if;  
    -- 返回加入递归条件后的结果  
    return query select * from tbl where c3=1 and c1=v_c1 order by c1 limit 10;  
  end loop;  
end;  
$$ language plpgsql strict;  
```  
返回10001个品牌的100010个商品，耗时502毫秒。  
```  
postgres=# select count(*) from get_res();  
 count    
--------  
 100010  
(1 row)  
Time: 502.320 ms  
```  
### 使用窗口函数  
```  
select c1,c2,c3,c4 from   
  (select c1,c2,c3,c4,row_number() over (partition by c1) as rn from tbl where c3=1 and c1  WindowAgg  (cost=0.44..42410.51 rows=48571 width=28) (actual time=0.052..62.473 rows=49739 loops=1)  
         Output: tbl.c1, tbl.c2, tbl.c3, tbl.c4, row_number() OVER (?)  
         Buffers: shared hit=49617  
         ->  Index Scan using idx_tbl_1 on public.tbl  (cost=0.44..41681.95 rows=48571 width=20) (actual time=0.045..43.892 rows=49739 loops=1)  
               Output: tbl.c1, tbl.c2, tbl.c3, tbl.c4  
               Index Cond: ((tbl.c3 = 1) AND (tbl.c1 < 100))  
               Buffers: shared hit=49617  
 Planning Time: 0.194 ms  
 Execution Time: 67.857 ms  
(14 rows)  
```  
响应耗时：返回100个品牌的1000个商品，68毫秒。  
返回10001个品牌的100010个商品，耗时4473毫秒。  
```  
select count(*) from   
  (select c1,c2,c3,c4,row_number() over (partition by c1) as rn from tbl where c3=1) t  
where t.rn<=10 ;  
 count    
--------  
 100010  
(1 row)  
Time: 4473.348 ms (00:04.473)  
```  
## 例子2 - 品牌+商品 不唯一  
1、建表，品牌+商品字段唯一，也就是说不需要考虑去重。  
```  
create table tbl(  
  c1 int,   -- 品牌ID  
  c2 int,   -- 商品ID  
  c3 int,   -- 其他条件，本例用来做过滤的条件  
  c4 timestamp   -- 时间  
);  
```  
2、写入5000万测试数据  
```  
insert into tbl   
  select random()*10000,   
         random()*100,   -- 为了模拟重复，使用少量的商品ID  
	 random()*10,   
	 clock_timestamp()  
  from generate_series(1,50000000);  
```  
3、创建加速索引，过滤条件放在前面，品牌C1字段在最后（用于类似SKIP INDEX SCAN类似的排序加速）。  
```  
create index idx_tbl_1 on tbl(c3,c1,c2);  
```  
### 递归  
```  
with recursive   
-- 符合条件的第一个品牌  
tmp as (select c1 from tbl where c3=1 order by c3,c1 limit 1),  
skip as (  
  (  
    -- 初始查询, 同时计算并输出下一个品牌ID  
    select distinct on (tbl.c3,tbl.c1,tbl.c2) tbl.*,   -- 同一品牌的商品ID去重  
           t_max.c1 as t_max_c1   -- 下一个品牌  
    from tbl ,   
    (select c1 from tbl   