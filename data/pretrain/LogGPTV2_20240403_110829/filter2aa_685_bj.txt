full-stack applications 6
future module 38
Future type 84–85
G
garbage-collected memory 154
GC (garbage collector) safety, 
with threads 153–156
GCC compiler 284
generics 250–254
concepts 253–254
constraining 252–253
in type definitions 252
procedures 251
get procedure 75
getAppFilename procedure 64
getCurrentDir procedure 165
getElementById 
procedure 244
getHomeDir procedure 118
getStr procedure 75
git tool 134
Gitter 280
global variables 173, 262
Go programming language, 
features of 19
group communication 58
guarded variables 174
guards, preventing race condi-
tions with 174–176
GUIs (graphical user 
interfaces) 181
gzipped archives 160
H
handling exceptions 47–48
hash character 25
hash procedure 113–114
hashes module 114
HashSet[string] variable 115
Haskell 36
header pragma 230
help
community page 281
forums 281
real-time communication
280
--help flag 64
hexadecimal notation 27
hg tool 134
hidden fields 204
home directory 118
Homebrew 283
homogeneous arrays 267
Host header 184
HT (Hyper-Threading) 
Technology 152
HTML templates 7
htmlgen module 202
httpclient module 126–127
hygiene, of templates 259–260
hyphens 139
I
I/O (input/output)
asynchronous 83–91
await keyword 88–91
difference between syn-
chronous and asynchro-
nous execution 85–86
event loops 87–88
Licensed to   
296
INDEX
I/O (input/output), asynchro-
nous (continued)
example using callbacks
86–87
Future type 84–85
reading data from input 
streams 66–68
retrieving input in client 
components 63–70
reading data from stan-
dard input streams
66–68
retrieving command-line 
parameters supplied by 
users 63–65
using spawn to avoid block-
ing input/output
68–70
using spawn to avoid 
blocking 68–70
ident argument 274
Ident node 264
identifiers, comparing 8
IDEs (integrated development 
environments)
Aporia, installing 287
testing new 287–289
if statement 24, 43
immutable variables 30, 53
import keyword 26, 71, 103, 
106
import statement 96
importc pragma 230, 234, 248
importcpp pragma 245, 248
impure modules 108
in keyword 43
increment procedure 174, 178
indentation 23–24, 53
IndexError exception 64
indexing operator 51
index-out-of-bounds exception
41
Infix node 264
init command 139, 187
init type 9
initTable procedure 113
injected variables 259
input streams 63
input/output. See I/O
instability, of newer features 20
install command
understanding 136–139
using 135
installing
Aporia IDE 287
compiler 282–286
building from C sources
283–286
getting up-to-date installa-
tion info 282–283
verifying installation 286
Nim, troubleshooting
289–290
Nimble package manager
130
Nimble packages 135–139
int type 250
int64 type 27
int8 type 27
integer type 26–27
integrated development envi-
ronments. See IDEs
interfaces. See Canvas API; for-
eign function interface
interfacing with OSs
executing external processes
120–121
generic operating system 
services 122
with other programming lan-
guages
JavaScript backend
242–247
through foreign function 
interface 226–234
wrapping external C pro-
gramming language 
libraries 234–242
working with filesystems
118–120
internet, networking and
126–127
interpreter 11
IntLit node 264
intsets module 111
IoT (Internet of Things) 5
IRC (Internet Relay Chat) 58, 
280
is operator 254
isMainModule constant 76
isReady procedure 69, 158
isRootDir procedure 119
items iterator 46, 110
__iter__ method 46
iterators, reading file fragments 
with 164–165
J
Java programming language, 
features of 19
JavaScript, backend 242–247
using Canvas API wrapper
246–247
wrapping canvas elements
243–246
Jester 183–184, 188, 219
js command 287
JSON (JavaScript Object Nota-
tion)
generating 78–79
parsing 72–78
json module 73, 122
JsonNode type 73–74
JsonNodeKind type 73
K
KeyError exception 75
keywords 23, 33, 88–91
L
lazy evaluation 250
len procedure 110
let keyword 30–31
libName 237
libraries
external C programming 
language 234–242
SDL (Simple DirectMedia 
Layer)
creating wrappers for
235–236
downloading 235
libvlc 130
LIMIT keyword 198
line feed 28
lineFlowVar variable 158
lines iterator 164
lineTo procedure 244
linking
dynamic 236–237
static 227–228
list variable 18
listen procedure 83, 91
lists module 111
load procedures
generating 275–277
overview 105, 269
localhost 83
Licensed to   
297
INDEX
localtime procedure 231–233
lock mechanism 174
locks
overview 179
preventing race conditions 
with 174–176
logging module 250
/login routes, implementing
212–213
loop procedure 91
Lua programming language, 
features of 19
M
macro_rules 19
macros 260–267
abstract syntax trees 262–265
arguments in 266–267
compile-time function 
execution 261–262
defining 265–266
macros module 264–265
main function 14, 288
main thread 68
many-to-many communication
58
map procedure 18
mapIt procedural 259
math module 141, 144
Measure-Command 168
memory errors 9
memory management 11
Message type 72, 191
messageFlowVar 97
messages
client, processing 92–95
sending and receiving 
between threads
176–178
sending to clients 95
metaprogramming
creating configuration 
DSLs 267–278
generating constructor 
procedures 274–275
generating load 
procedures 275–277
generating object 
types 270–274
starting configurator 
project 268–270
testing configurators 278
generics 250–254
concepts 253–254
constraining 252–253
in type definitions 252
procedures 251
macros 260–267
abstract syntax trees
262–265
arguments in 266–267
compile-time function 
execution 261–262
defining 265–266
templates 254–260
hygiene 259–260
parameter substitution in
257–258
passing code blocks to
256–257
microframeworks
Jester, configuring 219
routing in 183–184
MinGW package 283
modules
core 110–111
for threads 153, 155–156
impure 108
namespacing 105–107
pure 107–108
sets 114–115
tables 112–114
threadpool 156–159
defined 157
executing 155–156
retrieving return values 
from FlowVar 
types 158–159
using spawn with 157–158
moduleVersion variable 103, 
106
MongoDB 190
mostPopular variable 172
moveTo procedure 244
mult procedure 140
multiline comment, creating
25
multiLine variable 30
multitasking 151
mutable variables 53
MyAppConfig object 269
myMax procedure 251, 253
MyPkg.nimble file 133
myProc procedure 34
myUndeclaredVar 258
N
name variable 216
namespacing 105–107
net module 82, 126
netAddr field 80
network architectures 59–60
network functionality, adding 
to clients 95–98
networking, internet and
126–127
New Repository button, GitHub
145
newException procedure 47
newIdentNode procedure 272
newline escape sequence 28, 
168
newSeq procedure 41–42
newServer procedure 81–82
newSocket constructor 82
Nim programming language
adding to PATH 286
advantages of 12–20
catches errors ahead of 
time 18
efficient 13
flexible 16–18
readable 13–14
stands on its own 14–15
command not found 289
compiler
C compiler disagrees on 
target architecture 289
compiling 285
downloading archives 284
extracting archives
284–285
installing 282–286
moving archive to safe 
location 284–285
defined 4–12
features of 6–11, 19
compilation 9–11
memory management 11
metaprogramming 6–7
powerful type system 8–9
style insensitivity 8
implementation of 11–12
installing
Aporia IDE 287
testing new IDE 287–289
troubleshooting 289–290
shortcomings of 20
use cases 4–6
.nimble files, writing 141–144
Licensed to   
298
INDEX
nimble init command 149, 268
nimble install command 148
Nimble package manager
command-line tool 131
creating packages in
139–144
choosing names 139
Nimble package directory 
layout 140–141
specifying dependencies
141–144
writing .nimble files
141–144
developing packages in
147–148
giving meaning to version 
numbers 147
storing different versions 
of single package
147–148
installing 130
installing packages 135–139
understanding install 
command 136–139
using install command
135
package directory layout
140–141
packages, defined 131–134
publishing packages
145–146
nimble publish command 149
NimKernel 5
NimNode 266
nnk prefix 272
nnkEmpty node 272
nnkIdent node 272
nominative typing 50
nonblocking behavior 177
non-ref types 50
NoSQL database 190
NOT NULL key constraint 194