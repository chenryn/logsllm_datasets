        size_t size_of_the_chunk;
        size_t size_of_the_previous_chunk;
        void *chunks[10];
        char prev_used;
        for (i = 0; i 
    #include 
    #include 
    /**
     * main - moving the program break
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(void)
    {
        int i;
        write(1, "START\n", 6);
        malloc(1);
        getchar();
        write(1, "LOOP\n", 5);
        for (i = 0; i 0x1ff9000）。第二次brk系统调用发生于堆上的空间太小而无法承载所有malloc调用时。
让我们用/proc再次确认。
    julien@holberton:~/holberton/w/hackthevm3$ gcc -Wall -Wextra -pedantic -Werror 9-main.c -o 9
    julien@holberton:~/holberton/w/hackthevm3$ ./9
    START
    julien@holberton:/proc/7855$ ps aux | grep \ \./9$
    julien     7972  0.0  0.0   4332   684 pts/9    S+   19:08   0:00 ./9
    julien@holberton:/proc/7855$ cd /proc/7972
    julien@holberton:/proc/7972$ cat maps
    ...
    00901000-00922000 rw-p 00000000 00:00 0                                  [heap]
    ...
    julien@holberton:/proc/7972$
-> **00901000-00922000 rw-p 00000000 00:00 0 [heap]**  
点击回车并再次查看[heap]：
    LOOP
    END
    julien@holberton:/proc/7972$ cat maps
    ...
    00901000-00943000 rw-p 00000000 00:00 0                                  [heap]
    ...
    julien@holberton:/proc/7972$
-> **00901000-00943000 rw-p 00000000 00:00 0 [heap]**  
堆的起始地址仍然相同，但是大小从0x00922000向上增加到0x00943000。
## 地址空间布局随机化（ASLR）
你可能已经注意到上面/proc/pid/maps中的一些我们想要研究的“奇怪”的东西：
程序间断点是超出数据段当前末尾的第一个位置的地址 ——
也就是虚拟内存中可执行文件之外的第一个位置的地址。因此，堆的起始处应该紧挨着内存中可执行文件的末尾。但正如你在上面所看到的那样，情况并非如此。唯一正确的是，堆始终是可执行文件之后的下一个内存区域，这是有道理的，因为堆实际上是可执行文件本身的数据段的一部分。此外，如果我们看得更仔细，会发现可执行文件和堆之间的内存间隙大小并不相同：
*下面几行的格式：[maps文件的PID]：[heap]开头的地址 - 可执行文件结束的地址=内存间隙大小
  * [3718]: 01195000 – 00602000 = b93000
  * [3834]: 024d6000 – 00602000 = 1ed4000
  * [4014]: 00e70000 – 00602000 = 86e000
  * [4172]: 01314000 – 00602000 = d12000
  * [7972]: 00901000 – 00602000 = 2ff000
似乎这个间隙大小是随机的，事实上，确实如此。如果我们查看ELF二进制加载器源代码（fs/binfmt_elf.c），我们可以找到这个：
    if ((current->flags & PF_RANDOMIZE) && (randomize_va_space > 1)) {
                    current->mm->brk = current->mm->start_brk =
                            arch_randomize_brk(current->mm);
    #ifdef compat_brk_randomized
                    current->brk_randomized = 1;
    #endif
            }
其中current->mm->brk是程序间断点的地址。arch_randomize_brk函数可以在arch/x86/kernel/process.c文件中找到：
    unsigned long arch_randomize_brk(struct mm_struct *mm)
    {
            unsigned long range_end = mm->brk + 0x02000000;
            return randomize_range(mm->brk, range_end, 0) ? : mm->brk;
    }
randomize_range返回一个起始地址，像这样：
    [......  .....]
      start                  end
randomize_range函数的源代码（drivers/char/random.c）：
    /*
     * randomize_range() returns a start address such that
     *
     *    [......  .....]
     *  start                  end
     *
     * a  with size "len" starting at the return value is inside in the
     * area defined by [start, end], but is otherwise randomized.
     */
    unsigned long
    randomize_range(unsigned long start, unsigned long end, unsigned long len)
    {
            unsigned long range = end - len - start;
            if (end 
    #include 
    #include 
    /**                                                                                            
     * pmem - print mem                                                                            
     * @p: memory address to start printing from                                                   
     * @bytes: number of bytes to print                                                            
     *                                                                                             
     * Return: nothing                                                                             
     */
    void pmem(void *p, unsigned int bytes)
    {
        unsigned char *ptr;
        unsigned int i;
        ptr = (unsigned char *)p;
        for (i = 0; i  malloc(0)实际上分配32个字节，包括之前的0x10字节。  
注意，情况并非总是如此。来自手册页（man malloc）：
    NULL may also be returned by a successful call to malloc() with a size of zero