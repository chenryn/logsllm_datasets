//restarting Pod
$ kubectl get pods
NAME            READY     STATUS      RESTARTS   AGE
burstable-pod   0/1       CrashLoopBackOff   0   11m 
//restarted
$ kubectl get pods
NAME            READY     STATUS    RESTARTS   AGE
burstable-pod   1/1       Running   1          12m  
```
# 配置最佳工作窗格
最佳工作窗格在资源服务质量配置中具有最低优先级。因此，在资源短缺的情况下，该 pod 将是第一个被终止的 pod。使用 BestEffort 的用例是一个无状态且可恢复的应用，例如:
*   工人流程
*   代理或缓存节点
在资源短缺的情况下，这个 pod 应该将 CPU 和内存资源让给其他优先级更高的 pod。为了将窗格配置为最佳工作窗格，您需要将资源限制设置为 0，或者不指定资源限制。例如:
```
//no resource setting
$ cat besteffort-implicit.yml 
apiVersion: v1
kind: Pod
metadata:
 name: besteffort
spec:
 containers:
 - name: nginx
 image: nginx
//resource limit setting as 0
$ cat besteffort-explicit.yml 
apiVersion: v1
kind: Pod
metadata:
 name: besteffort
spec:
 containers:
 - name: nginx
 image: nginx
 resources:
 limits:
      cpu: 0
      memory: 0
```
请注意，资源设置由`namespace default`设置继承。因此，如果您打算使用隐式设置将容器配置为最佳工作容器，那么如果命名空间具有如下默认资源设置，则可能不会将其配置为最佳工作:
![](img/00082.jpeg)
在这种情况下，如果您使用隐式设置部署到默认命名空间，它会应用一个默认的 CPU 请求作为`request.cpu: 0.1`，然后它会变成可突发的。另一方面，如果部署到`blank-namespace`，应用`request.cpu: 0`，那么就会变成 BestEffort。
# 配置为保证 pod
保证是资源服务质量的最高优先级。在资源短缺的情况下，Kubernetes 调度程序会尝试将“保证”pod 保留到最后。
因此，保证 pod 的使用将是一个关键任务节点，例如:
*   具有持久卷的后端数据库
*   主节点(如弹性搜索主节点和 HDFS 名称节点)
为了配置为保证 pod，请将资源限制和资源请求显式设置为相同的值，或者仅设置资源限制。但是，同样，如果命名空间具有默认资源设置，可能会导致不同的结果:
```
$ cat guaranteed.yml 
apiVersion: v1
kind: Pod
metadata:
 name: guaranteed-pod
spec:
 containers:
   - name: nginx
     image: nginx
     resources:
      limits:
       cpu: 0.3
       memory: 350Mi
      requests:
       cpu: 0.3
       memory: 350Mi
$ kubectl get pods
NAME             READY     STATUS    RESTARTS   AGE
guaranteed-pod   1/1       Running   0          52s
$ kubectl describe pod guaranteed-pod | grep -i qos
QoS Class:  Guaranteed
```
因为保证 pod 必须设置资源限制，如果您不能 100%确定应用所需的 CPU/内存资源，尤其是最大内存使用量；您应该使用 Burstable 设置来监控一段时间的应用行为。否则，即使节点有足够的内存，Kubernetes 调度程序也可能终止 pod ( `OOMKilled`)。
# 配置为可突发 pod
可爆裂 Pod 的优先级高于最佳努力，但低于保证。与保证 pod 不同，资源限制设置不是强制性的；因此，当节点资源可用时，pod 可以尽可能多地消耗 CPU 和内存。因此，它可以被任何类型的应用使用。
如果您已经知道应用的最小内存大小，您应该指定请求资源，这有助于 Kubernetes 调度程序分配给正确的节点。例如，有两个节点各有 1 GB 内存。节点 1 已经分配了 600 兆内存，节点 2 分配了 200 兆内存给其他 Pod 。
如果我们再创建一个资源请求内存为 500 MB 的 pod，那么 Kubernetes 调度程序会将这个 pod 分配给节点 2。但是，如果 pod 没有资源请求，结果将会因节点 1 或节点 2 而异。因为 Kubernetes 不知道这个 PODS 会消耗多少内存:
![](img/00083.jpeg)
还有资源服务质量的重要行为需要讨论。资源服务质量单元的粒度是容器级别，而不是容器级别。这意味着，如果您配置一个包含两个容器的 pod，您打算将容器 A 设置为保证(请求/限制值相同)，容器 B 为可突发(仅设置请求)。不幸的是，Kubernetes 将这个 pod 配置为 Burstable，因为 Kubernetes 不知道容器 B 的限制是什么。
以下示例演示了未能配置为保证 pod，但最终配置为可突发:
```
// supposed nginx is Guaranteed, tomcat as Burstable...
$ cat guaranteed-fail.yml 
apiVersion: v1
kind: Pod
metadata:
 name: burstable-pod
spec:
  containers:
  - name: nginx
    image: nginx
    resources:
     limits:
       cpu: 0.3
       memory: 350Mi
     requests:
       cpu: 0.3
       memory: 350Mi
  - name: tomcat
    image: tomcat
    resources:
      requests:
       cpu: 0.2
       memory: 100Mi
$ kubectl create -f guaranteed-fail.yml 
pod "guaranteed-fail" created
//at the result, Pod is configured as Burstable
$ kubectl describe pod guaranteed-fail | grep -i qos
QoS Class:  Burstable
```
即使更改为仅配置资源限制，但如果容器 A 仅具有 CPU 限制，则容器 B 仅具有内存限制，那么结果也将再次是可突发的，因为 Kubernetes 只知道其中一个限制:
```
//nginx set only cpu limit, tomcat set only memory limit
$ cat guaranteed-fail2.yml 
apiVersion: v1
kind: Pod
metadata:
 name: guaranteed-fail2
spec:
 containers:
  - name: nginx
    image: nginx
    resources:
      limits:
       cpu: 0.3
  - name: tomcat
    image: tomcat
    resources:
      requests:
       memory: 100Mi
$ kubectl create -f guaranteed-fail2.yml 
pod "guaranteed-fail2" created
//result is Burstable again
$ kubectl describe pod |grep -i qos
QoS Class:  Burstable
```
因此，如果您打算将 pod 配置为保证，则必须将所有容器设置为保证。
# 监控资源使用情况
当您开始配置以设置资源请求和/或限制时，由于资源不足，Kubernetes 计划程序可能无法计划部署您的 pod。为了了解可分配资源和可用资源，使用`kubectl describe nodes`命令查看状态。
以下示例显示了一个具有 600 兆内存和一个核心中央处理器的节点。因此，可分配的资源如下:
![](img/00084.jpeg)
但是，该节点已经运行了一些可突发的 pod(使用资源请求)，如下所示:
![](img/00085.jpeg)
可用内存被限制为大约 20 MB。因此，如果您提交请求超过 20 MB 的可突发 pod，它将永远不会被调度，如下图所示:
![](img/00086.jpeg)
错误事件可以通过`kubectl describe pod`命令捕获:
![](img/00087.jpeg)
在这种情况下，您需要添加更多的 Kubernetes 节点来支持更多的资源。
# 摘要
在本章中，我们介绍了使用临时卷或永久卷的无状态和有状态应用。当应用重启或 pod 扩展时，两者都有缺陷。此外，Kubernetes 上的持久卷管理得到了增强，使其变得更加容易，这可以从 StatefulSet 和动态资源调配等工具中看到。
此外，资源服务质量帮助 Kubernetes 调度程序根据请求将 pod 分配给正确的节点，并根据优先级进行限制。
下一章将介绍 Kubernetes 的网络和安全性，它可以更容易地配置 pod 和服务，并使它们具有可扩展性和安全性。