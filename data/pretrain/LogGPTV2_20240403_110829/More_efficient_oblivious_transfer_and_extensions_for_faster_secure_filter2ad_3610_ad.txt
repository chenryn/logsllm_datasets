i ). (Note that qi =
(si · r) ⊕ ti.)
3. Let Q = [q1| . . .|qκ] denote the m × κ bit matrix where the i-th column is
qi. Let qj denote the j-th row of the matrix Q. (Note that qj = (rj·s)⊕tj.)
i ) ⊕ r, and sends ui to S for
4. S sends (y0
j ) for every 1 ≤ j ≤ m, where:
j , y1
y0
j = x0
and y1
j ⊕ H(j, qj)
5. For 1 ≤ j ≤ m, R computes xrj
Output: R outputs (xr1
1 , . . . , xrn
j = x1
j ⊕ H(j, tj).
j = yrj
n ); S has no output.
j ⊕ H(j, qj ⊕ s)
a This phase can be iterated. Speciﬁcally, R can compute the next κ bits of ti
and ui (by applying G to get the next κ bits from the PRG for each of the
seeds and using the next κ bits of its input in r) and send the block of κ × κ
bits to S (κ bits from each of u1, . . . , uκ).
Proof: We ﬁrst show that the protocol implements the m×OT(cid:96)-functionality.
Then, we prove that the protocol is secure where the sender is corrupted, and
ﬁnally that it is secure when the receiver is corrupted.
Correctness. We show that the output of the receiver is (xr1
m ) in an exe-
cution of the protocol where the inputs of the sender are ((x0
m))
and the input of the receiver is r = (r1, . . . , rm). Let 1 ≤ j ≤ m, we show that
zj = xrj
1. rj = 0: Recall that qj = (rj · s) ⊕ tj, and so qj = tj. Thus:
j ⊕ H(qj) ⊕ H(tj)
j . We have two cases:
1 , . . . , xrm
1), . . . , (x0
m, x1
1, x1
zj = y0
= x0
j ⊕ H(tj) = x0
j ⊕ H(tj) ⊕ H(tj) = x0
j
2. rj = 1: In this case qj = s ⊕ tj, and so:
j ⊕ H(tj) = x1
j ⊕ H(tj) ⊕ H(tj) = x1
zj = y1
= x1
j
j ⊕ H(qj ⊕ s) ⊕ H(tj)
16
Corrupted Sender. The view of the sender during the protocol contains the
output from the κ×OTκ invocation and the messages u1, . . . , uκ. The simulator
S0 simply outputs a uniform string s ∈ {0, 1}κ (which is the only randomness
that S chooses in the protocol, and therefore w.l.o.g. can be interpreted as the
random tape of the adversary), κ random seeds ks1
κ , which are chosen
uniformly from {0, 1}κ, and κ random strings u1, . . . , uκ, chosen uniformly from
{0, 1}m. In the real execution, (s, ks1
κ ) are chosen in exactly the same
way. Each value ui for 1 ≤ i ≤ κ is deﬁned as G(k0
i ) ⊕ r. Since k1−si
is unknown to S (by the security of the κ× OTκ functionality), we have that
G(k1−si
) is indistinguishable from uniform, and so each ui is indistinguishable
from uniform. Therefore, the view of the corrupted sender in the simulation is
indistinguishable from its view in a real execution.
i ) ⊕ G(k1
1 , . . . , ksκ
1 , . . . , ksκ
i
i
1, y1
1), . . . , (y0
m, y1
j = xrj
i values), deﬁnes the matrix T , and computes yrj
Corrupted Receiver. The view of the corrupted receiver consists of its ran-
m)) only. The simulator S1 is
dom tape and the messages ((y0
invoked with the inputs and outputs of the receiver, i.e., r = (r1, . . . , rm) and
m ). S1 then chooses a random tape ρ for the adversary (which deter-
(xr1
1 , . . . , xrm
j ⊕ H(tj)
mines the k0
i , k1
for 1 ≤ j ≤ m. Then, it chooses each y1−rj
uniformly and independently at
random from {0, 1}(cid:96). Finally, it outputs (ρ, (y0
m)) as the view of
the corrupted receiver.
We now show that the output of the simulator is indistinguishable from the
view of the receiver in a real execution. If rj = 0, then qj = tj and thus
j ⊕ H(tj ⊕ s)). If rj = 1, qj = tj ⊕ s and therefore
j ⊕ H(tj), x1
(y0
j ⊕ H(tj ⊕ s), x1
(y0
j are
j ⊕ H(tj) and therefore are identical to the real execution. It
computed as xrj
therefore remains to show that the values (y1−r1
, . . . , y1−rm
) as computed in
the real execution are indistinguishable from random strings as output in the
simulation. As we have seen, in the real execution each y1−rj
is computed as
x1−rj
⊕ H(tj ⊕ s). Since H is a correlation robust function, it holds that:
j ⊕ H(tj)). In the simulation, the values yrj
j ) = (x0
j ) = (x0
1), . . . , (y0
j , y1
j , y1
1
m
j
j
1, y1
m, y1
j
{t1, . . . , tm, H(t1 ⊕ s), . . . , H(tm ⊕ s)} c≡ {Um·κ+m·(cid:96)}
for random s, t1, . . . , tm ∈ {0, 1}κ, where Ua deﬁnes the uniform distribution
over {0, 1}a (see Deﬁnition A2). In the protocol we derive the values t1, . . . , tm
by applying a pseudorandom generator G to the seeds k0
κ and transposing
the resulting matrix. We need to show that the values H(t1 ⊕ s), . . . , H(tm ⊕ s)
are still indistinguishable from uniform in this case. However, this follows from a
straightforward hybrid argument (namely, that replacing truly random ti values
in the input to H with pseudorandom values preserves the correlation robustness
of H). We conclude that the ideal and real distributions are computationally
indistinguishable.
1, . . . , k0
17
5.4 Optimized OT Extension in Yao & GMW
The protocol described in §5.3 implements the m× OT(cid:96) functionality. In the
following, we present further optimizations that are speciﬁcally tailored to the
use of OT extensions in the secure computation protocols of Yao and GMW.
w = k0
j = k0
j⊕H(qj) and y1
j = k1
w = k0
w ⊕ ∆. Since k0
j = x1
w is just a random value, S can set k0
j⊕H(qj⊕s). In the case of Yao, we have that x0
Correlated OT (C-OT) for Yao. Before proceeding to the optimization, let us
focus for a moment on Yao’s protocol [58] with the free-XOR [38] and point-
and-permute [43] techniques.6 Using this techniques, the sender does not choose
all keys for all wires independently. Rather, it chooses a global random value
δ ∈R {0, 1}κ−1, sets ∆ = δ||1, and for every wire w it chooses a random key
w ∈R {0, 1}κ and sets k1
w ⊕ ∆. Later in the protocol, the parties invoke
k0
OT extension to let the receiver obliviously obtain the keys associated with its
inputs. This eﬀectively means that, instead of having to obliviously transfer two
ﬁxed independent bit strings, the sender needs to transfer two random bit strings
with a ﬁxed correlation. We can utilize this constraint on the inputs in order
to save additional bandwidth in the OT extension protocol. Recall that in the
last step of Protocol 52 for OT extension, S computes and sends the messages
y0
j = k0
j = x0
w
and x1
w = H(qj)
and can send the single value yj = ∆ ⊕ H(qj) ⊕ H(qj ⊕ s). R deﬁnes its output
as H(tj) if rj = 0 or as yj ⊕ H(tj) if rj = 1. Observe that if rj = 0, then tj = qj
and R outputs H(qj) = x0
w, as required. In contrast, when rj = 1, it holds
that tj = qj⊕s and thus yj⊕H(qj⊕s) = ∆⊕H(qj) = ∆⊕k0
w, as required.
Thus, in the setting of Yao’s protocol when using the free-XOR technique, it is
possible to save bandwidth. As the keys k0
w used in Yao are also of length κ,
the bandwidth is reduced from 3κ bits that are transmitted in every iteration
of the extension phase to 2κ bits, eﬀectively reducing the bandwidth by one
third. Proving the security of this optimization requires assuming that H is a
random oracle, in order to “program” the output to be as derived from the OT
extension. In addition, we deﬁne a diﬀerent OT functionality, called correlated
OT (C-OT), that receives ∆ and chooses the sender’s inputs uniformly under
the constraint that their XOR equals ∆. Since Yao’s protocol uses random keys
under the same constraint, the security of Yao’s protocol remains unchanged
when using this optimized OT extension. Note that by using the correlated input
OT extension protocol, the server needs to garble the circuit after performing the
OT extension; this order is also needed for the pipelining approach used in many
implementations, e.g., [28,40,42]. We remark that this optimization can be used
in the more general case where in each pair one of the inputs is chosen uniformly
at random and the other input is computed as a function of the ﬁrst. Speciﬁcally,
the sender has diﬀerent functions fj for every 1 ≤ j ≤ m, and receives random
values x0
j ). E.g.,
for Yao’s garbled circuits protocol, we have x1
j as output from the extension protocol, which deﬁnes x1
j = fj(x0
j ) = ∆ ⊕ x0
j .
j = fj(x0
w = k1
w, k1
6 Our optimization is also compatible with the garbled row reduction technique of [53].
18
Random-OT (R-OT) for GMW. When using OT extensions for implementing
the GMW protocol, the eﬃciency can be improved even further. In this case,
the inputs for S in every OT are independent random bits b0 and b1 (see §5.1 for
how to evaluate AND gates using two random OTs). Thus, the sender can allow
the random OT extension protocol (functionality) R-OT to determine both of
its inputs randomly. This is achieved in the OT extension protocol by having S
deﬁne b0 = H(qj) and b1 = H(qj ⊕ s). Then, R computes brj just as H(tj). The
receiver’s output is correct because qj = (rj · s) ⊕ tj, and thus H(tj) = H(qj)
when rj = 0, and H(tj) = H(qj ⊕ s) when rj = 1. With this optimization, we
obtain that the entire communication in the OT extension protocol consists only
of the initial base OTs, together with the messages u1, . . . , uκ, and there are no
yj messages. This is a dramatic improvement of bandwidth. As above, proving
the security of this optimization requires assuming that H is a random oracle,
in order to “program” the output to be as derived from the OT extension. In
addition, the OT functionality is changed such that the sender receives both of
its inputs from the functionality, and the receiver just inputs r (see [49, Fig. 26]).
Summary. The original OT extension protocol of [32] and our proposed improve-
ments for m×OT(cid:96) are summarized in Tab. 2. We compare the communication
complexity of R and S for m parallel 1-out-of-2 OT extensions of (cid:96)-bit strings,
with security parameter κ (we omit the cost of the initial κ× OTκ). We also
compare the assumption on the function H needed in each protocol, where CR
denotes Correlation Robustness and RO denotes Random Oracle.
Protocol
Original [32] All applications 2mκ
G-OT §5.3 All applications mκ
C-OT §5.4
j random mκ
R-OT §5.4
j random mκ
Applicability R → S S → R H
2m(cid:96) CR
2m(cid:96) CR
m(cid:96) RO
0
RO
only x0
x0
j , x1
Table 2. Sent bits for sender S and receiver R for m 1-out-of-2 OT extensions of (cid:96)-bit
strings and security parameter κ.
6 Experimental Evaluation
In the following, we evaluate the performance of our proposed optimizations. In
§6.1 we compare our base OT protocol (§5.2) to the protocols of [46] and in §6.2
we evalute the performance of our algorithmic (§4) and protocol optimizations
(§5.3 and §5.4) for OT extension.
Benchmarking Environment. We build upon the C++ OT extension implemen-
tation of [56] which implements the OT extension protocol of [32] and is based on
the implementation of [10]. We use SHA-1 to instantiate the random oracle and
19