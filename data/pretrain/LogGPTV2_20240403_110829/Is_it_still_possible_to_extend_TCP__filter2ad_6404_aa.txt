title:Is it still possible to extend TCP?
author:Michio Honda and
Yoshifumi Nishida and
Costin Raiciu and
Adam Greenhalgh and
Mark Handley and
Hideyuki Tokuda
Is it Still Possible to Extend TCP?
Michio Honda∗, Yoshifumi Nishida∗, Costin Raiciu†, Adam Greenhalgh‡,
Keio University∗, Universitatea Politehnica Bucuresti†, University College London‡
Mark Handley‡, Hideyuki Tokuda∗
{micchie,nishida}@sfc.wide.ad.jp, PI:EMAIL
{a.greenhalgh,m.handley}@cs.ucl.ac.uk, PI:EMAIL
ABSTRACT
We’ve known for a while that the Internet has ossiﬁed as a result
of the race to optimize existing applications or enhance security.
NATs, performance-enhancing-proxies, ﬁrewalls and trafﬁc nor-
malizers are only a few of the middleboxes that are deployed in
the network and look beyond the IP header to do their job. IP itself
can’t be extended because “IP options are not an option” [10]. Is
the same true for TCP?
In this paper we develop a measurement methodology for eval-
uating middlebox behavior relating to TCP extensions and present
the results of measurements conducted from multiple vantage points.
The short answer is that we can still extend TCP, but extensions’ de-
sign is very constrained as it needs to take into account prevalent
middlebox behaviors. For instance, absolute sequence numbers
cannot be embedded in options, as middleboxes can rewrite ISN
and preserve undeﬁned options. Sequence numbering also must be
consistent for a TCP connection, because many middleboxes only
allow through contiguous ﬂows.
We used these ﬁndings to analyze three proposed extensions to
TCP. We ﬁnd that MPTCP is likely to work correctly in the Internet
or fallback to regular TCP. TcpCrypt seems ready to be deployed,
however it is fragile if resegmentation does happen—for instance
with hardware ofﬂoad. Finally, TCP extended options in its current
form is not safe to deploy.
Categories and Subject Descriptors
C.2.2 [Computer-communication Networks]: Network Protocols;
C.2.6 [Computer-communication Networks]: Internetworking
General Terms
Measurement, Design, Experimentation, Standardization
Keywords
Middleboxes, Measurements, TCP, Protocol design
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’11, November 2–4, 2011, Berlin, Germany.
Copyright 2011 ACM 978-1-4503-1013-0/11/11 ...$10.00.
1.
INTRODUCTION
The Internet was designed to be extensible; routers only care
about IP headers, not what the packets contain, and protocols such
as IP and TCP were designed with options ﬁelds that could be used
to add additional functionality. The great virtue of the Internet was
always that it was stupid; it did no task especially well, but it was
extremely ﬂexible and general, allowing a proliferation of proto-
cols and applications that the original designers could never have
foreseen.
Unfortunately the Internet, as it is deployed, is no longer the In-
ternet as it was designed. IP options have been unusable for twenty
years[10] as they cause routers to process packets on their slow
path. Above IP, the Internet has beneﬁted (or suffered, depending
on your viewpoint) from decades of optimizations and security en-
hancements. To improve performance [2, 7, 18, 3], reduce security
exposure [15, 29], enhance control, and work around address space
shortages [22], the Internet has experienced an invasion of mid-
dleboxes that do care about what the packets contain, and perform
processing at layer 4 or higher within the network.
The problem now faced by designers of new protocols is that
there is no longer a well deﬁned or understood way to extend net-
work functionality, short of implementing everything over HTTP[25].
Recently we have been working on adding both multipath sup-
port[11] and native encryption[5] to TCP. The obvious way to do
this, in both cases, is to use TCP options. In the case of multipath,
we would also like to stripe data across more than one path. At the
end systems, the protocol design issues were mostly conventional.
However, it became increasingly clear that no one, not the IETF, not
the network operators, and not the OS vendors, knew what will and
what will not pass through all the middleboxes as they are currently
deployed and conﬁgured. Will TCP options pass unchanged? If the
sequence space has holes, what happens? If a retransmission has
different data than the original, which arrives? Are TCP segments
coalesced or split? These and many more questions are crucial to
answer if protocol designers are to extend TCP in a deployable way.
Or have we already lost the ability to extend TCP, just like we did
two decades ago for IP?
In this paper we present the results from a measurement study
conducted from 142 networks in 24 countries, including cellular,
WiFi and wired networks, public and private networks, residen-
tial, commercial and academic networks. We actively probe the
network to elicit middlebox responses that violate the end-to-end
transparency of the original Internet architecture. We focus on TCP,
not only because it is by far the most widely used transport pro-
tocol, but also because while it is known that many middleboxes
modify TCP behavior [6], it is not known how prevalent such mid-
dleboxes are, nor precisely what the emergent behavior is with TCP
extensions that were unforeseen by the middlebox designers.
181We make three main contributions. The ﬁrst is a snapshot of the
Internet, as of early 2011, in terms of its transparency to extensions
to the TCP protocol. We examine the effects of middleboxes on
TCP options, sequency numbering, data acknowledgment, retrans-
mission and segmentation.
The second contribution is our measurement methodology and
tools that allow us to infer what middleboxes are doing to trafﬁc.
Some of these tests are simple and obvious; for example, whether
a TCP option arrives or is removed is easy to measure, so long as
the raw packet data is monitored at both ends. However, some tests
are more subtle; to test if a middlebox coalesces segments it is not
sufﬁcient to just send many segments—unless the middlebox has a
reason to queue segments it will likely pass them on soon as they
arrive, even if it has the capability to coalesce. We need to force it
to have the opportunity to coalesce.
Finally we examine the implications of our measurement study
for protocol designers that wish to extend TCP’s functionality. In
particular, we look at proposals for Multipath TCP[11], TcpCrypt[5],
and TCP Extended Option Space[9], and consider what our ﬁnd-
ings mean for the design of these protocols and their deployability.
The remainder of this paper is organized as follows: Sec. 2 de-
scribes related work; in Sec. 3 we describe our methodology and
introduce the TCPExposure tool, our tool to inspect middlebox be-
havior; in Sec. 4 we examine middlebox behavior on each protocol
component in more detail, show how to detect this behavior, then
present our measurement results from running TCPExposure in 142
networks; in Sec. 5 we examine the impact on TCP extensions as
case-study. We summarize our conclusions in Sec. 6.
2. RELATED WORK
There exists a large body of work related to the measurement,
analysis and identiﬁcation of different deployed TCP implemen-
tations, but none of it has speciﬁcally focused on analyzing TCP
middlebox behavior.
Padhye and Floyd perform a client-side analysis of numerous
public web servers to test their congestion control behavior and
ECN and SACK capabilities [23]. The client-only methodology
leverages existing public web servers to give great coverage, al-
lowing the authors to examine the behavior of many different TCP
implementations.
The study focuses on remote TCP implementations rather than
middlebox interactions; the same methodology is not applicable
for this middlebox study for three reasons. First, most users access
the Internet through home and cellular networks, yet few public
servers exist in these networks that could be used for tests. Fur-
ther, it is not possible to test qualitative middlebox behavior with-
out co-ordination of both end systems. Finally, the Padhye and
Floyd techniques cannot distinguish the effects due to middleboxes
from the particularities of remote TCP implementations and remote
hardware (such as segmentation ofﬂoad).
Medina et al. measure in their 2005 study the impact of network
middleboxes on path MTU discovery transparency, sequence num-
ber shifting, as well as their effect on IP and TCP options [21]. This
study undertakes similar client-only measurements as in [23], and
suffers from the same limitations.
Allman [1] and Hätönen et al. [16] both examine the quantitative
application-level performance of various middleboxes in testbeds
where the box being tested is known and under their control. All-
man measures transaction delay, throughput and connection per-
sistence over the middleboxes he evaluated. Hätönen et al. mea-
sure NAT binding timeouts, queueing delays, throughput and sup-
port of new transport protocols over their testbed which includes a
large number of home-gateway devices. We adopt the end-to-end
methodology of these papers and extend it further to examine the
qualitative middlebox behavior in the wild that we are interested in.
Paxson measures end-to-end packet dynamics such as out-of-
order delivery, packet corruption and retransmission on TCP bulk
transfers [24]. The author operates both end systems of each end-
to-end measurement by remote login; this limits the applicability of
the study to networks where the authors have (or are given tempo-
rary) direct access to hosts. This poses two challenges: ﬁrst, obtain-
ing shell access to users’ machines to run privileged commands is
really difﬁcult; second, even if permitted, accessing NATed boxes
is not possible unless users speciﬁcally open up NAT ports. To
avoid these issues we adopted the alternative approach of asking
contributors to run a single, self-contained, shell script and to post
the results.
Ford et al. [13] test hole punching availability of NAT boxes for
TCP and UDP. Tests are performed with a portable client tool run-
ning behind NATs and two public servers that accompany test traf-
ﬁc. This work does not measure middlebox behavior that we are
interested in. However, its methodology is similar to our work in
terms of real Internet path measurement, study of qualitative mid-
dlebox behavior, and control of both ends of measuring paths with
distributing a tool to contributors.
3. METHODOLOGY AND DATASETS
We use regular end-hosts to actively measure paths in the Inter-
net. Our aim is to test relevant properties that could impact yet-to-
be-deployed TCP extensions. We have resorted to active measure-
ment for a number of reasons:
• We need to generate trafﬁc that mimics new TCP extensions.
• We generate artiﬁcial trafﬁc patterns such as contiguous small
segments or gaps in the sequence space. It is difﬁcult to use
passive measurements for this purpose.
• Packets need to be inspected at both sender and receiver for
tests detecting TCP option removal, sequence number shift-
ing, re-segmentation, etc.
• We need to test different destination ports including ports not
normally in use, as middlebox behavior depends on the des-
tination port.
3.1 Testing Tool
Our middlebox inspection tool is called TCPExposure and con-
sists of a client and a server tool. The client acts as an initiator
of a TCP connection (the end that sends the SYN), and the server
acts as a responder. These are a 3000-line program and a 500-line
program both written in Python. The initiator and the responder
run tests aiming to trigger on-path middlebox actions. The tools
send and receive TCP segments in user space via a raw IP socket or
using the Pcap library similarly to Sting [26].
The client tool was built to be easy to use, as most of our tests
are run by contributors. To maximize reach, the client tool is cross-
platform running on Mac OS, Linux and FreeBSD. It is self-contained
and only requires Python and libpcap on the host; these come pre-
installed on most systems. The client is straightforward to run: all
users need to do is to download it, launch a single shell script and
post the results.
The responder tool runs on Linux. It does not maintain state for
the TCP connections it is emulating; its replies depend solely on
the received TCP segments. For example, the responding segment
contains SYN/ACK if the responder has received SYN, acknowl-
edges the end of the sequence number, and has the sequence num-
ber based on the received acknowledgement (ACK) number. This
182Table 1: Default TCP Parameters
Parameter
Initial Sequence Num (ISN)
Window Size
MSS
Window Scale
SACKOK
Timestamp (TS_val)
Initiator Responder
11259375
252001
8064
512
-
-
-
32768
512
6
1
12345678
Figure 1: Echo Headers Command
stateless behavior makes it relatively easy to reason about observed
behavior because there is no hidden server state.
3.2 Common Procedures
Table 1 lists the ﬁxed TCP parameters at the initiator and the
responder. These values are used in all our measurements unless
stated otherwise.
We use a 512 byte MSS at both ends, less than what most TCP
implementations advertise. This value is smaller than the MTU of
most Internet paths, and was chosen to avoid unexpected fragmen-
tation during tests.
We expect middleboxes to behave differently depending on the
application type, and so our responder emulates TCP servers on
ports 80, 443, and 34343. Ports 80 and 443 are assigned by IANA
for http and https trafﬁc; port 34343 is unassigned. The client port
is randomly chosen at connection setup.
Segments sent from the initiator include commands to operate
the responder. The default command is “just ack”, and the respon-
der sends back a pure ACK (no data). Another command is “echo
headers”. Fig. 1 illustrates how this command works.
The initiator transmits a crafted segment that includes bytes in-
dicating this command in its payload. The responder replies with a
segment that contains in its payload both the received headers and
the headers of the reply. The client then compares the sent and re-
ceived headers for both segments to detect middlebox interference.
The last command is “don’t advance ack”. The responder does not
advance the ACK number when it receives this command; instead
it sends back an ACK with the ﬁrst sequence number of the receiv-
ing segment. This command is used in only the retransmission test
in Sec. 4.5.
3.3 Measurement Data
Our measurements target access networks, where ISPs deploy
middleboxes to optimize various applications with the goal of im-
proving the experience of the majority their customers. The core
is mostly just doing “dumb” packet forwarding. Many contributors
and we ran the TCPExposure client in a variety of access networks
detailed below. Contributors are mainly from IETF community, re-
Country
Australia
Austria
Belgium
Canada
Chile
China
Czech
Denmark
Finland
Germany
Greece
Indonesia
Ireland
Italy
Japan
Romania
Russia
Spain
Sweden
Vietnam
Total
Switzerland
Thailand
U.K.
U.S.
Table 2: Experiment Venues
Home HotspotCellularUniv Ent Hosting Total
0
0
4
1
0
0
0
0
1
3
2
0
0
1
19
1
0
0
1
2
0
10