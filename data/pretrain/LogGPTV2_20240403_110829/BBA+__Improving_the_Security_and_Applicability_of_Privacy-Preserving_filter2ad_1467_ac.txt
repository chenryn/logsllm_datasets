protect system security.
To obtain a working system, the Issuer I also needs to generate
a key pair consisting of a public and a secret key (pkI, skI ). The
secret key is shared with the Accumulator and Verifier, and can be
used to create BBA+ tokens and update their balance. The public
key is used to verify the authenticity of such a token.
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA1929System operation. In order to participate in the system, a user
first needs to generate a key pair. The public key is used to identify
the user in the system and is assumed to be bound to a physical ID
such as a passport number, social security number, etc. Of course,
for this purpose the public key needs to be unique. We assume that
ensuring the uniqueness of user public keys as well as verifying
and binding a physical ID to them is done “out-of-band” before
calling the BBA+ protocols (in particular the Issue protocol). A
simple way to realize the latter could be to make use of external
trusted certification authorities.
Issuing tokens. To generate a BBA+ token, a user and the issuer
execute the Issue protocol. In this protocol the user uses skU to
prove that he is the owner of the claimed public key pkU for which a
token should be generated. As already explained, when this protocol
is executed it has been ensured that pkU is unique, bound to a
physical ID, and no token has been generated before under pkU.2
This information can be stored in a database, e. g., maintained by
the issuer or a separate system operator. The user’s protocol output
is a BBA+ token with balance 0.
Collecting points. To add a (positive or negative) value v to the
current balance3
w of a token, the user and the accumulator in-
teract in the scope of the Accum protocol. As these protocol runs
should be anonymous and unlinkable, the accumulator is only given
the secret key it shares with the issuer and the value v. It is not
given and may not derive any information about the user it in-
teracts with, provided that this user behaves honestly. The user’s
output is the updated token with balance w + v. The accumulator’s
output is some double-spending tag, enabling the identification
of the user if he uses the old version of the token with balance
w in another transaction. To this end, double-spending tags are
periodically transmitted to a central database which is regularly
checked for two double-spending tags associated with the same
token version number. If the DB contains two such records, then
the algorithm IdentDS can be used to extract the public key of the
user this token belongs to as well as a proof (such as his secret key)
that the user is guilty. The latter can be verified using the algorithm
VerifyGuilt. The DB is typically maintained by a system operator
who coincides with the issuer in many scenarios. Also, IdentDS is
run by this party. VerifyGuilt may be run by anyone, in particular
by justice.
Claiming a balance and redeeming points. A user who wants to
prove to some verifier that he has a valid token with balance w and
who possibly wants to redeem v points, interacts with the verifier
in the scope of the Vfy protocol. Similar to the Accum protocol, also
Vfy protocol runs should be anonymous and unlinkable. This is the
reason why the verifier does only receive minimal input such as
the issuer’s secret key and w.4 The outcome for the user is again
an updated token of balance w + v (note that v might be a negative
2It is possible for a user to have more than one token by allowing him to have more
than one public key bound to his name.
3The semantics of w is not necessarily fixed to be simply the sum of collected points.
For instance, one could also encode two counters into w, one for positive points and
one for negative points.
4In certain scenarios revealing w may significantly help to link transactions. For such
applications, the framework can be extended to only show a bound on the balance (cf.
Section 8.1). Due to efficiency reasons, we omit this feature in our basic system.
value) which is ready to be used in the next transaction. The veri-
fier’s output is a double-spending tag just as before. This data must
eventually be transferred to the database already mentioned.
3.2 Formal System Definition
The following definition formalizes our notion of extended black-
box accumulation systems that are interactive, offline, and enforce
the use of fresh tokens.
Definition 3.1 (BBA+ Scheme). An extended black-box accumula-
tion (BBA+) scheme BBAP = (Setup, IGen, UGen, Issue, Accum,
Vfy, UVer, IdentDS, VerifyGuilt) with balance and accumulation
value space Zp (where p may depend on CRS and, in particular, n)
consists of the following PPT algorithms and interactive protocols:
(CRS, td) ← Setup(1n ). The setup algorithm takes the security
parameter as input and returns a public common reference string
CRS and a trapdoor td.5
(pkI, skI ) ← IGen(CRS). The issuer’s key generation algorithm
takes CRS as input and returns a public and private key pair (pkI,
skI ), where skI is shared with accumulator and verifier. We assume
for convenience that CRS is part of pkI.
(pkU , skU ) ← UGen(CRS). The user’s key generation algorithm
takes CRS as input and returns a public-private key pair (pkU , skU )
which is used for authentication during token issuance.
((τ , bU ), bI ) ← Issue⟨U (pkI, pkU , skU ),I (pkI, skI, pkU )⟩.
The interactive token issuing protocol is executed between a user
U, given pkI and his own public and private key pkU , skU as
input, and an issuer I, whose input is pkI, skI and the public-key
pkU of the user U. At the end of the protocol, the user outputs a
token τ (with balance 0) along with a bit bU. The issuer’s output is
a bit bI. The bit bU (resp. bI) indicate whether U (resp. I) accepts
the protocol run.
((τ∗, bU ), (dstag, hid, bAC )) ← Accum⟨U (pkI, pkU , skU , τ , w,
v), AC(pkI, skI, v)⟩. The interactive accumulation protocol is ex-
ecuted between a user U and an accumulator AC. The user’s input
is pkI, his own public and private key pkU , skU, a token τ with
balance w, and the value v. The accumulator’s input is pkI, skI,
and the value v. At the end of the protocol, the user outputs an
updated token τ∗ (with balance w + v) and a bit bU. The issuer’s
output consists of some double spending tag dstag = (s, z) with
token version number s and data z, a hidden user ID hid,6 as well as
a bit bAC. The bit bU (resp. bAC) indicate whether U (resp. AC)
accepts the protocol run.
((τ∗, bU ), (dstag, hid, bV )) ← Vfy⟨U (pkI, pkU , skU , τ , w, v),
V (pkI, skI, w, v)⟩. The interactive verification and redeeming pro-
tocol is run between a user U and a verifier V. The inputs and
outputs are analogous to those of the Accum protocol, except that
V receives the current token balance w as an additional input.
b ← UVer(pkI, pkU , skU , τ , w ). The token verification algorithm
is a deterministic polynomial-time algorithm run by U which,
given pkI, the user’s public and secret key pkU , skU, a token τ,
5The trapdoor is needed in the security definition to define the legitimate balance of a
token although token transactions are unlinkable.
6hid is used for definitorial purposes only. In our instantiation, hid is an encryption
of pkU .
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA1930and balance w, outputs a bit b. This bit is 1 if τ is a valid token with
a balance w owned by the user with public key pkU.
(pkU , Π) ← IdentDS(pkI, dstag1, dstag2). The double-spender de-
tection algorithm is a deterministic polynomial-time algorithm
which is given pkI and two double-spending tags dstag1 = (s1, z1)
and dstag2 = (s2, z2). It returns the public key pkU of a user and a
proof of guilt Π, or it returns an error ⊥.
b ← VerifyGuilt(pkI, pkU , Π). The guilt verification algorithm is
a deterministic polynomial-time algorithm which is given pkI, a
user public key pkU and a proof of guilt Π. It returns 1 if the user
with public key pkU is considered guilty of double-spending and 0
otherwise.
Correctness for BBA+ schemes is fairly straightforward:
Definition 3.2 (BBA+ Correctness). A BBA+ scheme BBAP is called
correct if all of the following properties hold for all n ∈ N, (CRS, td)
← Setup(1n ), issuer key-pairs (pkI, skI ) ← IGen(CRS), user key-
pairs (pkU , skU ) ← UGen(CRS), and parties U, I, AC, and V
honestly following the protocols.
Correctness of issuing. For all outputs of the issue protocol ((τ , bU ),
(bI )) ← Issue⟨U (pkI, pkU , skU ),I (pkI, skI, pkU )⟩, it holds
that bU = bI = 1 and UVer(pkI, pkU , skU , τ , 0) = 1.
Correctness of accumulation. For all tokens τ, balances w ∈ Zp
with UVer(pkI, pkU , skU , τ , w ) = 1 and all values v ∈ Zp, we
have that ((τ∗, 1), (s, z, hid, 1)) ← Accum⟨U (pkI, pkU , skU , τ , w,
v), AC(pkI, skI, v)⟩ and UVer(pkI, pkU , skU , τ∗, w + v) = 1.7
Correctness of token verification. For all tokens τ, balances w ∈ Zp
with UVer(pkI, pkU , skU , τ , w ) = 1 and all values v ∈ Zp, we
have that ((τ∗, 1), (s, z, hid, 1)) ← Vfy⟨U (pkI, pkU , skU , τ , w, v),
I (pkI, skI, w, v)⟩ and UVer(pkI, pkU , skU , τ∗, w + v) = 1.
3.3 Definition of System Security
For security we distinguish between a reduced, simplified model
and a more natural, full-fledged model that is given in the full ver-
sion of the paper [22]. In the full-fledged model, the adversary can
be a collusion of malicious users who additionally may command,
eavesdrop on, and adaptively corrupt honest users. In the reduced
model, introduced in the following, no interactions with honest
users are considered. Fortunately, we can show in a black-box fash-
ion that any scheme secure in the reduced model is also secure
in the full-fledged model if all protocol messages are additionally
encrypted with an IND-CCA secure encryption scheme. Note that
privacy is not affected by extending the protocols with encryption.
With our security definition, we essentially capture three prop-
erties:
(1) A token may only be created in the name of and used by its
legitimate owner (owner-binding).
(2) For a token one may only claim exactly the amount of points
that have legitimately been collected with this token up to
this point unless an old version of the token is presented
(balance-binding).
(3) Users presenting old tokens can be identified after the fact.
7To simplify definitions, subtraction by v is not handled as a separate operation but by
adding v′ := p −v mod p. In an implementation, one may prefer having a subtraction
operation though.
Formalizing the notion above raises a major problem: It requires
to link each transaction with a user and token. However, on the
other hand, we demand that transactions are anonymous and un-
linkable. To resolve this issue, we only consider systems where
privacy can be abolished given a trapdoor td (which is kept secret
by the TTP) to the CRS. We call such schemes trapdoor-linkable
and formalize them in the following.
When we talk about a successful protocol run in the following,
we always mean that this run has been accepted by the issuer,
accumulator, or verifier. Let AC’s view of a run of the Accum
protocol consist of all its inputs, outputs, and messages sent and
received, i. e., (pkI, skI, v, msgs, dstag, hid, bAC ), where msgs ∈
{0, 1}∗ is the bit string of messages sent during the protocol run.
Similarly, let V’s view of a run of the Vfy protocol be represented
by a tuple (pkI, skI, w, v, msgs, dstag, hid, bV ). For some fixed
security parameter n ∈ N and CRS ← Setup(1n ), let us consider
the set of views of AC, denoted by VAccum
, resulting from any
n,CRS
Accum protocol run accepted by AC with any (possibly malicious)
party and any (pkI, skI ) ← IGen(CRS), v ∈ Zp as input to AC.
We define VVfy
analogously with respect to executions of the
n,CRS
Vfy protocol accepted by V.
with respect to Vfy.
called trapdoor-linkable if it satisfies the following conditions:
Definition 3.3 (Trapdoor-Linkability). A BBA+ scheme BBAP is
(1) Completeness. Let n ∈ N, (CRS, td) ← Setup(1n ), and view ∈
VAccum
. Let hid denote the hidden user ID contained in view.
n,CRS
Then there exist inputs pkU , skU , τ , w, and random choices
for an honest user U and honest accumulator AC such
that an Accum protocol run between U and AC with these
inputs and random choices leads to a view view′ ∈ VAccum
n,CRS
containing the same hidden user ID hid as view. The same
holds for all view ∈ VVfy
n,CRS
(2) Extractability. There exists a PPT algorithm ExtractUID such
that for any n ∈ N, (CRS, td) ← Setup(1n ) and view =
(pkI, skI, v, msgs, dstaghid, 1) ∈ VAccum
resulting from
an Accum protocol run with an honest user on input pkU,
ExtractUID outputs pkU on input (td, hid). The same needs
to hold for ExtractUID with respect to views view ∈ VVfy
.
n,CRS
Remark 1. Note that extractability as defined above implies that
any fixed view view cannot result from interactions with different
users, but is uniquely associated with a single user. Furthermore, by
demanding completeness we prevent the use of some odd extraction
algorithms that output some special user public key on input of a
specifically crafted hid that only an adversary is able to generate
but not an honest user. Such extraction algorithms may lead to some
issues when used in our security definition.
n,CRS
In the security experiments we are going to formalize, an adver-
sary A may concurrently interact with an honest issuer, accumula-
tor, and verifier an arbitrary number of times. Clearly, the adversary
playing the role of the user may behave dishonestly and not follow
the corresponding protocols. In order to formalize this adversarial
setting, we define a couple of oracles the adversary may query.
• MalIssue(pkU ) lets the adversary initiate the Issue protocol
with an honest issuer I provided that there is no pending
Session I3:  Personal PrivacyCCS’17, October 30-November 3, 2017, Dallas, TX, USA1931Experiment Expob-issue
BBAP,A (n)
(CRS, td) ← Setup(1n )
(pkI, skI ) ← IGen(CRS)
(pkU , skU ) ← UGen(CRS)
b ← AMalIssue,MalAcc,MalVer (pkI, pkU )
The experiment returns 1 iff A did a successful call to MalIssue on input of the given
public-key pkU .
Figure 1: Owner-binding experiment for Issue.
Experiment Expob-acc-ver
BBAP,A (n)
(CRS, td) ← Setup(1n )
(pkI, skI ) ← IGen(CRS)
b ← AMalIssue,MalAcc,MalVer (pkI )
The experiment returns 1 iff A did a successful call to MalAcc or MalVer such that
ExtractUID applied to hid being part of the view of this call outputs a public-key pkU
for which there has been no successful execution of MalIssue up to this call.
Figure 2: Owner-binding experiment for Accum/Vfy.
MalIssue call for pkU and pkU has also not been used in a
successful call to MalIssue before.
• MalAcc(v) is used by the adversary to initiate the Accum
protocol with AC for input v ∈ Zp.
• MalVer(w, v) is used by the adversary to initiate the Vfy
protocol with V for input w ∈ Zp and v ∈ Zp.
In the setting described above, we consider several adversarial
goals. The first two goals formalized in Definitions 3.4 and 3.5 cover
the owner-binding property with respect to the different proto-
cols Issue, Accum, and Vfy. Definition 3.6 formalizes the balance-
binding property assuming that no double-spending took place.
Consequently, Definition 3.7 ensures that such double-spendings
are indeed hard to accomplish without being identified.
In Definition 3.4, we consider the probability that an adversary
may succeed in receiving a token in the name of an honest, uncor-
rupted user (i. e., using the user’s public-key). It demands that an
adversary may only create tokens in his own name.
Definition 3.4. A trapdoor-linkable BBA+ scheme BBAP is called
owner-binding with respect to Issue if for any PPT adversary A
BBAP,A (n) from Fig. 1 the advantage of A
in the experiment Expob-issue
defined by
(1)
BBAP,A (n) := Pr[Expob-issue
BBAP,A (n) = 1]