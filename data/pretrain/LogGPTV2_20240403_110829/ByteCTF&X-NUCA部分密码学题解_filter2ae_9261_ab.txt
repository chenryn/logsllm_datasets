            self.pks = pow((self.sk + 1) * self.sks, self.n - 2, self.n) % self.n
        def send_p1(self, data, k1_str):
            e = int(data, 16)
            k1 = int(k1_str, 16)
            k1 = k1 % self.n
            R1 = self._kg(k1, self.ecc_table['g']) 
            return '%064x%0128s' % (e, R1) 
        def output_p1(self, k1_str, r_s2_s3):
            r = int(r_s2_s3[0:self.para_len], 16)
            s2 = int(r_s2_s3[self.para_len:2 * self.para_len], 16)
            s3 = int(r_s2_s3[2 * self.para_len:], 16)
            k1 = int(k1_str, 16)
            d1 = self.sks、
            s = (d1 * k1 * s2 + d1 * s3 - r) % self.n 
            if s == 0 or s == (self.n - r):
                return None
            return '%064x%064x' % (r, s)  
        def verify(self, Sign, data):
            r = int(Sign[0:self.para_len], 16)
            s = int(Sign[self.para_len:2 * self.para_len], 16)
            e = int(data.hex(), 16)
            t = (r + s) % self.n
            if t == 0:
                return 0
            P1 = self._kg(s, self.ecc_table['g'])
            P2 = self._kg(t, self.pk)、
            if P1 == P2:
                P1 = '%s%s' % (P1, 1)
                P1 = self._double_point(P1)
            else:
                P1 = '%s%s' % (P1, 1)
                P1 = self._add_point(P1, P2)
                P1 = self._convert_jacb_to_nor(P1)
            x = int(P1[0:self.para_len], 16)
            return r == ((e + x) % self.n)
        def _kg(self, k, Point): 
            if (k % self.n) == 0:
                return '0' * 128
            Point = '%s%s' % (Point, '1')
            mask_str = '8'
            for i in range(self.para_len - 1):
                mask_str += '0'
            mask = int(mask_str, 16)
            Temp = Point
            flag = False
            for n in range(self.para_len * 4):
                if flag:
                    Temp = self._double_point(Temp)
                if (k & mask) != 0:
                    if flag:
                        Temp = self._add_point(Temp, Point)
                    else:
                        flag = True
                        Temp = Point
                k = k > 1) - T3) % int(self.ecc_table['p'], base=16)
                else:
                    T4 = (T5 + (T5 >> 1) - T3) % int(self.ecc_table['p'], base=16)
                T1 = (T1 * T4) % int(self.ecc_table['p'], base=16)
                y3 = (T1 - T2) % int(self.ecc_table['p'], base=16)
                form = '%%0%dx' % self.para_len
                form = form * 3
                return form % (x3, y3, z3)
        def _add_point(self, P1, P2): 
            if P1 == '0' * 128:
                return '%s%s' % (P2, '1')
            if P2 == '0' * 128:
                return '%s%s' % (P1, '1')
            len_2 = 2 * self.para_len
            l1 = len(P1)
            l2 = len(P2)
            if (l1 < len_2) or (l2 < len_2):
                return None
            else:
                X1 = int(P1[0:self.para_len], 16)
                Y1 = int(P1[self.para_len:len_2], 16)
                if l1 == len_2:
                    Z1 = 1
                else:
                    Z1 = int(P1[len_2:], 16)
                x2 = int(P2[0:self.para_len], 16)
                y2 = int(P2[self.para_len:len_2], 16)
                T1 = (Z1 * Z1) % int(self.ecc_table['p'], base=16)
                T2 = (y2 * Z1) % int(self.ecc_table['p'], base=16)
                T3 = (x2 * T1) % int(self.ecc_table['p'], base=16)
                T1 = (T1 * T2) % int(self.ecc_table['p'], base=16)
                T2 = (T3 - X1) % int(self.ecc_table['p'], base=16)
                T3 = (T3 + X1) % int(self.ecc_table['p'], base=16)
                T4 = (T2 * T2) % int(self.ecc_table['p'], base=16)
                T1 = (T1 - Y1) % int(self.ecc_table['p'], base=16)
                Z3 = (Z1 * T2) % int(self.ecc_table['p'], base=16)
                T2 = (T2 * T4) % int(self.ecc_table['p'], base=16)
                T3 = (T3 * T4) % int(self.ecc_table['p'], base=16)
                T5 = (T1 * T1) % int(self.ecc_table['p'], base=16)
                T4 = (X1 * T4) % int(self.ecc_table['p'], base=16)
                X3 = (T5 - T3) % int(self.ecc_table['p'], base=16)
                T2 = (Y1 * T2) % int(self.ecc_table['p'], base=16)
                T3 = (T4 - X3) % int(self.ecc_table['p'], base=16)
                T1 = (T1 * T3) % int(self.ecc_table['p'], base=16)
                Y3 = (T1 - T2) % int(self.ecc_table['p'], base=16)
                form = '%%0%dx' % self.para_len
                form = form * 3
                return form % (X3, Y3, Z3)
        def _convert_jacb_to_nor(self, Point): 
            len_2 = 2 * self.para_len
            x = int(Point[0:self.para_len], 16)
            y = int(Point[self.para_len:len_2], 16)
            z = int(Point[len_2:], 16)
            z_inv = pow(z, int(self.ecc_table['p'], base=16) - 2, int(self.ecc_table['p'], base=16))
            z_invSquar = (z_inv * z_inv) % int(self.ecc_table['p'], base=16)
            z_invQube = (z_invSquar * z_inv) % int(self.ecc_table['p'], base=16)
            x_new = (x * z_invSquar) % int(self.ecc_table['p'], base=16)
            y_new = (y * z_invQube) % int(self.ecc_table['p'], base=16)
            z_new = (z * z_inv) % int(self.ecc_table['p'], base=16)
            if z_new == 1:
                form = '%%0%dx' % self.para_len
                form = form * 2
                return form % (x_new, y_new)
            else:
                return None
    if __name__ == '__main__':
        sk = func.random_hex(len(sm2p256v1_ecc_table['n']))
        tsm2 = TSM2(sk)
        print('pk:%s'   %tsm2.pk)
        print('pks:%064x'%tsm2.pks)
        for i in range(10):
            op = input('op: ').strip()
            if op == 'sign':
                sign(tsm2)
            elif op == 'verify':
                verify(tsm2)
            else:
                print("""sign: sign message
    verify: verify message""")
啊，这第二题画风就突变，好长的代码，让人失去欲望。但其实呢，大部分都是对sm2的一个实现，其实不用细究。这里我们就直接先提取关键部分，一步一步来啦。
首先最上面的
    def sign(tsm2):
        data = func.random_hex(len(n)) 
        k1_str = func.random_hex(len(n))
        print(tsm2.send_p1(data, k1_str))
        backdoor = input('backdoor:').strip()
        result = tsm2.output_p1(k1_str, backdoor)
        print(result)
    def verify(tsm2):
        message = input('msg:').strip().encode().strip(b'\x00')
        sign = input('sign:').strip().encode().strip(b'\x00')
        check = tsm2.verify(sign, message)
        if check is True and message == b'Hello, Welcome to ByteCTF2020!':
            print(FLAG)
        else:
            print(check)
俩功能，一个是注册，一个是验证，获取flag的地方就是这个验证，他要求你对message进行一个签名，而message要求是b’Hello, Welcome
to ByteCTF2020!’
好的，那我们看看咋样才能给这个message签上名，去找找签名的验证函数。
        def verify(self, Sign, data):
            r = int(Sign[0:self.para_len], 16)
            s = int(Sign[self.para_len:2 * self.para_len], 16)
            e = int(data.hex(), 16)
            t = (r + s) % self.n
            if t == 0:
                return 0
            P1 = self._kg(s, self.ecc_table['g'])
            P2 = self._kg(t, self.pk)
            if P1 == P2: