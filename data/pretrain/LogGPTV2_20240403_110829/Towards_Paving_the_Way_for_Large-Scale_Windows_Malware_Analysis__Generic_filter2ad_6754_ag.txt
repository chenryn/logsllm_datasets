[48] John Leitch. 2011. Process Hollowing. https://www.autosectools.com/Process-
Hollowing.pdf. (2011).
[49] Julien Lenoir. 2015. Implementing your own generic unpacker. HITB Singapore
2015. (2015).
[50] Martina Lindorfer, Alessandro Di Federico, Federico Maggi, Paolo Milani Com-
paretti, and Stefano Zanero. 2012. Lines of Malicious Code: Insights into the
Malicious Software Industry. In Proceedings of the 28th Annual Computer Security
Applications Conference (ACSAC’12).
[51] Limin Liu, Jiang Ming, Zhi Wang, Debin Gao, and Chunfu Jia. 2009. Denial-of-
Service Attacks on Host-Based Generic Unpackers. In Proceedings of the 11th
International Conference on Information and Communications Security (ICICS’09).
[52] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
building customized program analysis tools with dynamic instrumentation. In
Proceedings of the 2005 ACM SIGPLAN conference on Programming language design
and implementation(PLDI’05).
[53] Gustav Lundsgård and Victor Nedström. 2016. Bypassing modern sandbox techno-
logies. Master’s thesis. Lund University.
[54] Robert Lyda and James Hamrock. 2007. Using Entropy Analysis to Find Encrypted
and Packed Malware. IEEE Security and Privacy 5, 2 (2007).
[55] Sebastiano Mariani, Lorenzo Fontana, Fabio Gritti, and Stefano D’Alessio. 2016.
PinDemonium: a DBI-based generic unpacker for Windows executables. Black
Hat USA. (2016).
[56] Lorenzo Martignoni, Mihai Christodorescu, and Somesh Jha. 2007. OmniUnpack:
Fast, generic, and safe unpacking of malware. In Proceedings of the 23nd Annual
Computer Security Applications Conference (ACSAC’07).
[57] Aldo Mazzeo. 2016. Custom LoadLibrary implementation. https://github.com/
gbmaster/loadLibrary. (2016).
[58] Microsoft. last reviewed, 05/08/2018. Linking Explicit. https://msdn.microsoft.
com/en-us/library/784bt7z7.aspx. (last reviewed, 05/08/2018).
[59] Microsoft. last reviewed, 05/08/2018. Linking Implicitly. https://msdn.microsoft.
com/en-us/library/d14wsce5.aspx/. (last reviewed, 05/08/2018).
[60] Matt Miller. 2008. Using dual-mappings to evade automated unpackers. http:
//www.uninformed.org/?v=10&a=1. (2008).
[61] Byungho Min and Vijay Varadharajan. 2015. Secure Dynamic Software Loading
and Execution Using Cross Component Verification. In Proceedings of the 45th
Annual IEEE/IFIP International Conference on Dependable Systems and Networks
(DSN’15).
[62] Byungho Min and Vijay Varadharajan. 2016. Rethinking Software Component
Security: Software Component Level Integrity and Cross Verification. Comput. J.
59, 11 (2016), 1735–1748.
[63] Jiang Ming, Dongpeng Xu, Yufei Jiang, and Dinghao Wu. 2017. BinSim: Trace-
based Semantic Binary Diffing via System Call Sliced Segment Equivalence
Checking. In Proceedings of the 26th USENIX Conference on Security Symposium
(USENIX Security’17).
[64] M. Morgenstern and A. Marx. 2008. Runtime Packer Testing Experiences. 2nd
International CARO Workshop. (2008).
[65] Maik Morgenstern and Hendrik Pilz. 2010. Useful and useless statistics about
viruses and anti-virus programs. 4th International CARO Workshop. (2010).
[66] Ellen Nakashima and Philip Rucker. 2017. U.S. declares North Korea carried out
massive WannaCry cyberattack. The Washington Post. (December 19 2017).
[67] Lakshman Nataraj. 2013. Nearly 70% of Packed Windows System files are labeled
as Malware. UCSB Sarvam Blog. (2013).
[68] NO-MERCY. 2015. Top Maliciously Used APIs. https://rstforums.com/forum/
topic/95273-top-maliciously-used-apis/. (2015).
[69] Jon Oberheide, Michael Bailey, and Farnam Jahanian. 2009. PolyPack: An Auto-
mated Online Packing Service for Optimal Antivirus Evasion. In Proceedings of
the 3rd USENIX Conference on Offensive Technologies (WOOT’09).
[70] Philip OKane, Sakir Sezer, and Kieran McLaughlin. 2011. Obfuscation: The Hidden
Malware. IEEE Security and Privacy 9, 5 (2011).
[71] Digit Oktavianto and Iqbal Muhardianto. 2013. Cuckoo Malware Analysis: Analyze
malware using Cuckoo Sandbox. Packt Publishing Ltd.
[72] Oreans Technologies. last reviewed, 05/08/2018. Themida: Advanced Windows
Software Protection System. https://www.oreans.com/themida.php. (last revie-
wed, 05/08/2018).
[73] Panda Security. 2017. PandaLabs Annual Report 2017. https://www.pandasecurity.
com/mediacenter/src/uploads/2017/11/PandaLabs_Annual_Report_2017.pdf.
(2017).
[74] Roberto Perdisci, Andrea Lanzi, and Wenke Lee. 2008. Classification of Packed
Executables for Accurate Computer Virus Detection. Pattern Recognition Letters
29, 14 (Oct. 2008).
[75] I Phillips. 2006. Windows Vista security: first impressions. information security
technical report 11, 4 (2006), 176–185.
[76] Mario Polino, Andrea Continella, Sebastiano Mariani, Stefano D’Alessio, Lorenzo
Fontata, Fabio Gritti, and Stefano Zanero. 2017. Measuring and Defeating Anti-
Instrumentation-Equipped Malware. In Proceedings of the 14th Conference on
Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA’17).
[77] Danny Quist and Valsmith. 2007. Covert Debuging: Circumventing Software
Armoring Techniques. Black Hat USA. (2007).
Session 3A: Binary Analysis CCS’18, October 15-19, 2018, Toronto, ON, Canada409[78] Jason Raber and Brian Krumheuer. 2009. QuietRIATT: Rebuilding the Import
Address Table Using Hooked DLL Calls. Black Hat DC. (2009).
[79] Max Rival. last reviewed, 05/08/2018. Dynamic-Link Library Hijacking. https:
//www.exploit-db.com/docs/31687.pdf. (last reviewed, 05/08/2018).
[80] J Robbins. 1999. Debugging Windows based applications using WinDbg. Miscro-
soft Systems Journal (1999).
[81] Kevin A. Roundy and Barton P. Miller. 2010. Hybrid Analysis and Control of
Malware. In Proceedings of the 13th International Conference on Recent Advances
in Intrusion Detection (RAID’10).
[82] Kevin A. Roundy and Barton P. Miller. 2013. Binary-code Obfuscations in Preva-
lent Packer Tools. Comput. Surveys 46, 1 (2013).
[83] Paul Royal, Mitch Halpin, David Dagon, Robert Edmonds, and Wenke Lee. 2006.
PolyUnpack: Automating the hidden-code extraction of unpack-executing mal-
ware. In Proceedings of the 22nd Annual Computer Security Applications Conference
(ACSAC’06).
[84] Mark E Russinovich, David A Solomon, and Alex Ionescu. 2012. Windows Internals
(6th Edition). Microsoft Press.
[85] Monirul Sharif, Andrea Lanzi, Jonathon Giffin, and Wenke Lee. 2009. Automa-
tic reverse engineering of malware emulators. In Proceedings of the 30th IEEE
Symposium on Security and Privacy (S&P’09).
[86] Monirul Sharif, Vinod Yegneswaran, Hassen Saidi, Phillip Porras, and Wenke Lee.
2008. Eureka: A framework for enabling static malware analysis. In Proceedings
of the 13th European Symposium on Research in Computer Security (ESORICS’08).
[87] Paria Shirani, Lingyu Wang, and Mourad Debbabi. 2017. BinShape: Scalable
and Robust Binary Library Function Identification Using Function Shape. In
Proceedings of the 14th Conference on Detection of Intrusions and Malware &
Vulnerability Assessment (DIMVA’17).
[88] Michael Sikorski and Andrew Honig. 2012. Practical Malware Analysis: The
Hands-On Guide to Dissecting Malicious Software. No Starch Press.
[89] Alexey Sintsov. 2010. Writing JIT-spray shellcode for fun and profit. DigitÐřl
Security Research Group (DSecRG). (2010).
[90] Sherri Sparks and Jamie Butler. 2005. Shadow Walker: Raising The Bar For
Windows Rootkit Detection. Black Hat Japan. (2005).
[91] Joe Stewart. 2007. Unpacking with OllyBonE. http://www.joestewart.org/
ollybone/. (2007).
[92] Hung Min Sun, Yue Hsun Lin, and Ming Fung Wu. 2006. API Monitoring System
for Defeating Worms and Exploits in MS-Windows System. In Proceedings of the
11th Australasian Conference on Information Security and Privacy (ACISP’06).
[93] Gabor Szappanos. 2007. Exepacker blacklisting. Virus Bulletin. (2007).
[94] Brad Taylor. 2017.
Extortion-based cyber attacks: The next evolution in
profit-motivated attack strategies. https://www.helpnetsecurity.com/2017/11/09/
extortion-based-cyber-attacks/. (2017).
[95] Check Point Research Team. 2017. May’s Most Wanted Malware: Fi-
reball and Wannacry Impact More Than 1 in 4 Organizations Glo-
bally. https://blog.checkpoint.com/2017/06/20/mays-wanted-malware-fireball-
wannacry-impact-1-4-organizations-globally. (2017).
[96] Check Point Research Team. 2018.
March’s Most Wanted Malware:
Cryptomining Malware That Works Even Outside the Web Browser on
the Rise. https://blog.checkpoint.com/2018/04/13/marchs-wanted-malware-
cryptomining-malware-works-even-outside-web-browser-rise. (2018).
[97] Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pablo G Bringas. 2015.
SoK: Deep packer inspection: A longitudinal study of the complexity of run-
time packers. In Proceedings of the 36th IEEE Symposium on Security & Privacy
(S&P’15).
[98] Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pablo G. Bringas.
2016. RAMBO: Run-time packer Analysis with Multiple Branch Observation.
In Proceedings of the 13th International Conference on Detection of Intrusions and
Malware, and Vulnerability Assessment (DIMVA’16).
[99] Xabier Ugarte-Pedrero, Igor Santos, Borja Sanz, Carlos Laorden, and Pablo Garcia
Bringas. 2012. Countering entropy measure attacks on packed software detection.
In Proceedings of the 2012 IEEE Consumer Communications and Networking Confe-
rence (CCNC’12).
[100] Giovanni Vigna and Davide Balzarotti. 2018. When Malware is Packing Heat.
In USENIX Enigma 2018.
[101] Carsten Willems, Thorsten Holz, and Felix Freiling. 2007. Toward Automated
Dynamic Malware Analysis Using CWSandbox. IEEE Security & Privacy 5, 2
(2007).
[102] Babak Yadegari, Brian Johannesmeyer, Ben Whitely, and Saumya Debray. 2015.
A generic approach to automatic deobfuscation of executable code. In Proceedings
of the 36th IEEE Symposium on Security & Privacy (S&P’15).
[103] Lok-Kwong Yan, Manjukumar Jayachandra, Mu Zhang, and Heng Yin. 2012. V2E:
Combining Hardware Virtualization and Softwareemulation for Transparent and
Extensible Malware Analysis. In Proceedings of the 8th ACM SIGPLAN/SIGOPS
Conference on Virtual Execution Environments (VEE’12).
[104] Wei Yan, Zheng Zhang, and Nirwan Ansari. 2008. Revealing Packed Malware.
IEEE Security and Privacy 6, 5 (Sept. 2008).
Mitigations. Black Hat USA. (2016).
Buzzword. https://zeltser.com/fileless-malware-beyond-buzzword/. (2017).
[105] Udi Yavo and Tomer Bitton. 2016. Captain Hook: Pirating AVS to Bypass Exploit
[106] Lenny Zeltser. 2017. The History of Fileless Malware – Looking Beyond the
Session 3A: Binary Analysis CCS’18, October 15-19, 2018, Toronto, ON, Canada410Algorithm 2 Algorithm of MyNtMapViewOfSection.
SectionHandle: a handle to a section object which will be map-
ped into memory.
∗BaseAddress: a pointer to a base address where the section
will be mapped to.
1: function MyNtMapViewOfSection(SectionHandle, ... ∗
BaseAddress, ...)
/* Resolve the FileN ame from SectionHandle */
FileN ame ← ResolveFileName(SectionHandle)
if FileN ame = “c:\windows\system32\kernel32.dll” then
/* Map the home-made DLL "MyKernel32.dll"
into memory address of mapped_address */
mapped_address ← MapFile(MyKernel32.dll)
/* set “∗BaseAddress” to “mapped_address” */
*BaseAddress ← mapped_address
/* Let “LdrpMapDll” function to reload the
home-made kernel32.dll */
return STATUS_IMAGE_NOT_AT_BASE
2:
3:
4:
5:
6:
7:
8:
else
return NtMapViewOfSection(SectionHandle,...
∗BaseAddress,...)
end if
9:
10: end function
Figure 11: The typical attacking procedure of NSIS packed
ransomware.
Table 7: The results of hook-evasion resistance evaluation.
“(cid:88)” indicates the API monitor/sandbox is resilient to that
evasion type.
Packers
Armadillo
Pespin
Asprotect
Pelock
Yoda’s Protector
Yoda’s Crypter
PEP
Enigma
Themida
Cerber’s packer
Cerber’s packer
Custom UPX
Custom UPX
Custom UPX
Evasion Type
Child process
Child process
Stolen code
Stolen code
Stolen code
Stolen code
Stolen code
Stolen code
Stolen code
Process hollowing
Crash hooking module
Custom loader [57]
Stealth loader [39]
DLL integrity check
Detours CWSandbox Cuckoo BinUnpack
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
Table 5: Standard path search order.
Order
The directory of the application loaded
The system directory
The 16-bit system directory
The Windows directory
The current directory
The PATH environment variable
APPENDIX
Figure 9: Hijacking Windows network management DLL,
wsock32.dll, with a custom-made DLL.
Figure 10: The call chain of LoadLibrary. LoadLibrary first
resolves the loading DLL’s absolute path, including reading
core DLL’s path from the particular Registry key. Then, Lo-
adLibrary forwards the loading DLL’s full path to the next
level of API, and it finally invokes NtMapViewOfSection.
Table 6: The overhead BinUnpack introduces when working
with benign programs.
Sample
tasklist
winrar
WinPcap
IE
FireFox
Chrome
Benign (ms)
109
10624
3620
254
231
161
BinUnpack (ms)
IATComparison OEPSearch Dump
0
0
0
0
0
0
0.24
30.57
0.45
0.65
1.97
2.39
0
0
0
0
0
0
Relative Slowdown
0.22%
0.29%
0.01%
0.26%
0.85%
1.48%
Drop the file of DLL and encrypted payload Load  DLL into memoryDLL decrypts payload into MemoryRun the decrypted payload  c:\windows\system32\wsock32.dlld:\wsock32.dll Monitor this API?Malicious codeYesForwardNod:\Custom-made DLLTarget DLL NtMapViewOfSection in ntoskrnl.exeLoadLibrary in kernel32.dllLdrLoadDll in ntdll.dllLdrpLoadDll in ntdll.dllUser-LevelKernel-LevelWrapperLoad a DLL (private function)Map a DLL to the address spaceMap a view of a section into the address space Resolve the loading DLL’s  absolute path NtMapViewOfSection in ntdll.dllForword all the parameters to the   “NtMapViewOfSection” in ntoskrnl.exeLdrpMapDll  in ntdll.dllSession 3A: Binary Analysis CCS’18, October 15-19, 2018, Toronto, ON, Canada411