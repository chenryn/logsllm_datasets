# Windows下Shellcode开发
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 平台
**vc6.0 vs2005 vs2008 vs2010 vs2012 vs2013 vs2015 vs2017**
> 创建
**Win32程序控制台**
## 一、shellcode编写原则
###  1.修改程序入口
编译时编译器会自动生成的代码，对编写shellcode产生干扰，所以需要清除
  * **1.** 修改程序入口点（VS位例子）程序员源代码如下： 
        #include 
    #pragma comment(linker, "/ENTRY:EntryMain")
    int EntryMain()
    {
        return 0;
    }
在 **Release** 模式下
  * **工程属性(右键项目)- >配置属性->链接器->高级->入口点 处设置入口函数名称**
  * 添加如下代码 
        #pragma comment(linker, "/ENTRY:EntryName")
在 **Debug**
模式下几乎不可能改变，因为MSVCRT.lib中某些对象文件的唯一链接器引用。链接器定义的实际入口点名称不是main，而是mainCRTStartup。不过方法如下，
**缺点就是要保留main函数** ，这样就无法达到自定义程序入口的目的
  * **工程属性(右键项目)- >配置属性->链接器->高级->入口点** 处设置入口函数名称，然后在 **工程属性(右键项目)- >配置属性->链接器->输入->强制符号引用** 将值设置为：`_mainCRTStartup`（x86）或 `mainCRTStartup`（x64）
  * 也可以添加如下代码 
        #pragma comment(linker, "/ENTRY:wmainCRTStartup ") // wmain will be called
    #pragma comment(linker, "/ENTRY:mainCRTStartup  ") // main will be called
但是这样只能调用`wmain`和`main`
这样ida反汇编：
  * **2.** 关闭缓冲区安全检查（GS检查） **依旧是在release下进行** **工程属性(右键项目) - >c/c++->代码生成->安全检查，设置为禁用安全检查**
这个时候就只有一个函数了
这样将shellcode写入到函数中就不会因为其他函数造成干扰
### ~~2.设置工程兼容WindowsXP~~
我也很想设置好这个但是：配置完了过后，再切换到原来的工具集将丢失头文件的路径，要重新导入，修复的话很麻烦，尽量不要选择这个
  * 在visual studio installer 里面添加对 c++的WindowsXP支持
  * **工程属性(右键项目) - >常规->平台工具集->设置为含有当前vs年份+WindowsXP**，如：
  * **工程属性(右键项目) - >c/c++->代码生成->运行库：多线程调试MTD(Debug) 或 MT(Release)**这样就能保证程序能在windowsxp下运行
###  3.关闭生成清单
程序使用PEid之类的工具的话会发现EP段有三个段
理想情况下应该只保留代码段，这样便于直接提取代码段得到shellcode，其中.rsrc就是vs默认的生成清单段
清楚过程如下：
**工程属性(右键项目) - >链接器->清单文件->生成清单：否**
###  4.函数动态调用
> 这里以弹出MessageBox位例子
    #pragma comment(linker, "/ENTRY:EntryName")//手动设置了入口点就不需要加这句 
    #include 
    int EntryName()
    {
        MessageBox(NULL, NULL, NULL, NULL);
        return 0;
    }
编译前执行操作 **工程属性(右键项目) - >C/C++->语言->符合模式：否**
对CTF中二进制的朋友应该明白：类似在Linux上的`plt`和`got`的转换，在windows下，函数调用是通过`user32.dll`或者`kernel32.dll`来实现的，中间存在一个寻找地址的操作，而这个操作又是通过编译器实现的，这样程序员只需要记住名字就可以调用库中的函数了。
在ida中通过汇编就可以说明这一点：
但是shellcode的编写选用调用函数的话，就必须知道相对偏移才能正确获得函数的内存地址，所以shellcode要杜绝绝对地址的直接调用，如将上面的程序变为shellcode时，在汇编中直接`call
call dword ptr ds:[0x00E02000]`(x32dbg调试中的语句) **是要避免的** ，所以函数要先获得的动态地址，然后再调用。
**GetProcAddress函数**
[官方文档](https://docs.microsoft.com/en-us/cpp/build/getprocaddress?view=msvc-160)
作用：在指定动态连接库中获得指定的要导出函数地址
实例：
    #pragma comment(linker, "/ENTRY:EntryName") 
    #include 
    int EntryName()
    {
        //MessageBox(NULL, NULL, NULL, NULL);
        GetProcAddress(LoadLibraryA("user32.dll"), "MessageBoxA");
        return 0;
    }
之前的程序经过调试，确定`MessageBox`是在`user32.dll`中，所以在第一个参数加载`user32.dll`，第二个参数填写函数名称，但是`MessageBox`有两种重载`MessageBoxA`（Ascii）和`MessageBoxW`（Wchar?），这里选择Ascii的版本(`MessageBoxA`)
dll导出表也可以使用 **PEid** 查看
在 **子系统- >输出表** 中
那么可以通过内嵌汇编来调用函数
    #pragma comment(linker, "/ENTRY:EntryName") 
    #include 
    int EntryName()
    {
        //MessageBox(NULL, NULL, NULL, NULL);
        LPVOID lp = GetProcAddress(LoadLibraryA("user32.dll"), "MessageBoxA");
        char *ptrData = "Hello Shellcode";
        __asm
        {
            push 0
            push 0
            mov ebx,ptrData
            push ebx
            push 0
            mov eax,lp
            call eax
        }
        return 0;
    }
这样提取出来的shellcode就不含编译器参杂的动态调用偏移
现在规范化
可以将鼠标移到函数上，ctrl+鼠标左键进入函数定义，然后自定义一个函数指针，格式如下：
    int EntryName()
    {    
        typedef HANDLE (WINAPI *FN_CreateFileA)
            (
                __in     LPCSTR lpFileName,
                __in     DWORD dwDesiredAccess,
                __in     DWORD dwShareMode,
                __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,
                __in     DWORD dwCreationDisposition,
                __in     DWORD dwFlagsAndAttributes,
                __in_opt HANDLE hTemplateFile
            );
        FN_CreateFileA fn_CreateFileA;
        fn_CreateFileA = (FN_CreateFileA)GetProcAddress(LoadLibraryA("kernel32.dll"), "CreateFileA");
        fn_CreateFileA("Shellcode.txt", GENERIC_WRITE, 0, NULL, CREATE_ALWAYS, 0, NULL);
        return 0;
    }
同理也可以这样设置`printf`
        typedef  int (__CRTDECL *FN_printf)
            (char const* const _Format, ...);
        FN_printf fn_printf;
        fn_printf = (FN_printf)GetProcAddress(LoadLibraryA("msvcrt.dll"), "printf");
        fn_printf("%s\n", "hello shellcode");
我们在编写shellcode使用`GetProcAddress`和`LoadLibraryA`两个函数时，怎么找到这两个函数的地址呢？
### 5.获得`GetProcAddress`地址和`LoadLibraryA("kerner32.dll")`结果
**获得`LoadLibraryA("kerner32.dll")`结果**
**PEB**
进程环境信息块，全称：Process Envirorment Block
Structure。MSDN:[https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb，包含了一写进程的信息。](https://docs.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb%EF%BC%8C%E5%8C%85%E5%90%AB%E4%BA%86%E4%B8%80%E5%86%99%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82)
    typedef struct _PEB {
      BYTE                          Reserved1[2];    /*0x00*/
      BYTE                          BeingDebugged;    /*0x02*/
      BYTE                          Reserved2[1];    /*0x03*/
      PVOID                         Reserved3[2];    /*0x04*/
      PPEB_LDR_DATA                 Ldr;            /*0x0c*/
      PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;
      PVOID                         Reserved4[3];
      PVOID                         AtlThunkSListPtr;
      PVOID                         Reserved5;
      ULONG                         Reserved6;
      PVOID                         Reserved7;
      ULONG                         Reserved8;
      ULONG                         AtlThunkSListPtr32;
      PVOID                         Reserved9[45];
      BYTE                          Reserved10[96];
      PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;
      BYTE                          Reserved11[128];
      PVOID                         Reserved12[1];
      ULONG                         SessionId;
    } PEB, *PPEB;
**fs寄存器**
在80386及之后的处理器 又增加了两个寄存器 **FS 寄存器** 和 GS寄存器
其中FS寄存器的作用是：
偏移 | 说明  
---|---  
000 | 指向SEH链指针  
004 | 线程堆栈顶部  
008 | 线程堆栈底部  
00C | SubSystemTib  
010 | FiberData  
014 | ArbitraryUserPointer  
018 | FS段寄存器在内存中的镜像地址  
020 | 进程PID  
024 | 线程ID  
02C | 指向线程局部存储指针  
030 | PEB结构地址（进程结构）  
034 | 上个错误号  
所以获得fs:[0x30]就可以获得PEB的信息
得到PEB信息后，在使用 **PEB- >Ldr**来获取其他信息
**PEB- >Ldr**
msdn：
    typedef struct _PEB_LDR_DATA {
      BYTE       Reserved1[8];    /*0x00*/
      PVOID      Reserved2[3];    /*0x08*/
      LIST_ENTRY InMemoryOrderModuleList;    /*0x14*/
    } PEB_LDR_DATA, *PPEB_LDR_DATA;
注意 **InMemoryOrderModuleList**
> The head of a doubly-linked list that contains the loaded modules for the
> process. Each item in the list is a pointer to an **LDR_DATA_TABLE_ENTRY**
> structure. For more information, see Remarks.
双向链接列表的头部，该列表包含该进程已加载的模块。列表中的每个项目都是指向 **LDR_DATA_TABLE_ENTRY**
结构的指针。有关更多信息，请参见备注。
备注
    /*LIST_ENTRY*/
    typedef struct _LIST_ENTRY {
       struct _LIST_ENTRY *Flink;
       struct _LIST_ENTRY *Blink;
    } LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;
    /*LDR_DATA_TABLE_ENTRY*/
    typedef struct _LDR_DATA_TABLE_ENTRY {
        PVOID Reserved1[2];                /*0x00*/
        LIST_ENTRY InMemoryOrderLinks;    /*0x08*/
        PVOID Reserved2[2];                /*0x10*/
        PVOID DllBase;                    /*0x14*/
        PVOID EntryPoint;
        PVOID Reserved3;
        UNICODE_STRING FullDllName;
        BYTE Reserved4[8];
        PVOID Reserved5[3];
        union {
            ULONG CheckSum;
            PVOID Reserved6;
        };
        ULONG TimeDateStamp;
    } LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;
**_LDR_DATA_TABLE_ENTRY** 中我们就可以得到DLL文件的基址（DllBase），从而得到偏移。
那么以上代码可为
    xor eax,eax            ;清空eax
    mov eax,fs:[0x30]    ;eax = PEB
    mov eax,[eax+0xc]    ;eax = PEB->Ldr
    ;一个BYTE：1字节，一个PVOID：4字节
    ;所以Ldr的偏移位=2*1+1+1+2*4=12=0xc
    mov eax,[eax+0x14]    ;eax = PEB->Ldr.InMemoryOrderModuleList
    mov eax,[eax]        ;·struct _LIST_ENTRY *Flink;·访问的
    ;将eax=下一个模块的地址，从而切换模块
    ;1. .exe程序 -> 2.ntdll.dlls
    mov eax,[eax]        ;2.ntdll.dll->3.kernel32.dll
    mov eax,[eax+0x10]    ;kernel32.dll->DllBase
    ret                    ;返回eax寄存器
到这里我们就可以成功获得DLL文件的基址，也就是实现了 **获得`LoadLibraryA("kerner32.dll")`结果**
**获得`GetProcAddress`地址**
**预备知识**
这里简单说下PE文件头，msdn：
    typedef struct IMAGE_DOS_HEADER{
          WORD e_magic;            //DOS头的标识，为4Dh和5Ah。分别为字母MZ
          WORD e_cblp;
          WORD e_cp;
          WORD e_crlc;
          WORD e_cparhdr;
          WORD e_minalloc;
          WORD e_maxalloc;
          WORD e_ss;
          WORD e_sp;
          WORD e_csum;
          WORD e_ip;
          WORD e_cs;
          WORD e_lfarlc;
          WORD e_ovno;
          WORD e_res[4];
          WORD e_oemid;
          WORD e_oeminfo;
          WORD e_res2[10];
          DWORD e_lfanew;             //指向IMAGE_NT_HEADERS的所在
    }IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;
其中 **e_lfanew** 指向 **IMAGE_NT_HEADERS** 的所在
**IMAGE_NT_HEADERS**
分为32位和64位两个版本，这里讲32位，
    typedef struct _IMAGE_NT_HEADERS {
      DWORD                   Signature;
      IMAGE_FILE_HEADER       FileHeader;
      IMAGE_OPTIONAL_HEADER32 OptionalHeader;
    } IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;
  * Signature四字节大小的签名去定义PE文件，标志为：”PE\x00\x00”
  * FileHeaderIMAGE_FILE_HEADER结构体来说e明文件头
  * OptionalHeader文件的可选头
这里用的到的是 **OptionalHeader** ，因为它定义了很多程序的基础数据
    typedef struct _IMAGE_OPTIONAL_HEADER {
      WORD                 Magic;
      BYTE                 MajorLinkerVersion;
      BYTE                 MinorLinkerVersion;
      DWORD                SizeOfCode;