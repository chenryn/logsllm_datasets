            }
        }
        public static void main(String[] var0) throws Exception {
            do_exec("cmd /c dir");
        }
    }
写入文件，在调用文件，通过报错信息传递命令执行结果，也算是一种思路。
### JEP290修复
在JEP290规范之后，即JAVA版本6u141, 7u131, 8u121之后，以上攻击就不奏效了。
在8u112，使用cc链5打一波，可以正常攻击
在8u161，使用cc链5攻击，就不可以了:`REJECTED`
在`sun.rmi.registry.RegistryImpl#registryFilter`处下断点，然后开始调试，往回看，可以发现过滤器是在`obj.readObject()`语句中的JDK底层进入的，这是JEP在底层实现过滤机制导致的。反序列化动作和过滤器机制都在readObject语句中，这样就不存在逻辑上的跳过、绕过过滤器。
看`sun.rmi.registry.RegistryImpl#registryFilter`：
    private static Status registryFilter(FilterInfo var0) {
        //这里registryFilter为空跳过该判断
        if (registryFilter != null) {
            Status var1 = registryFilter.checkInput(var0);
            if (var1 != Status.UNDECIDED) {
                return var1;
            }
        }
        //不允许输入流的递归层数超过20层，超过就报错
        if (var0.depth() > 20L) {
            return Status.REJECTED;
        } else {
            //获取输入流序列化class类型到var2
            Class var2 = var0.serialClass();
            //判断是否为null，null就报错
            if (var2 == null) {
                return Status.UNDECIDED;
            } else {
                //判断是否为数组类型
                if (var2.isArray()) {
                    //数组长度大于10000就报错
                    if (var0.arrayLength() >= 0L && var0.arrayLength() > 10000L) {
                        return Status.REJECTED;
                    }
                    //获取到数组中的成分类，假如是还是数组嵌套，继续获取
                    do {
                        var2 = var2.getComponentType();
                    } while(var2.isArray());
                }
                //判断是不是JAVA基元类型，就是 绕过Object类型参数 小章中的那些基本类
                //是基本类就允许
                if (var2.isPrimitive()) {
                    return Status.ALLOWED;
                } else {
                    //判断我们的输入的序列化类型是否为以下的几类class白名单之中
                    //如果我们输入的类属于下面这些白名单的类或超类，就返回ALLOWED
                    //不然就返回REJECTED报错。
                    return String.class != var2 && 
                        !Number.class.isAssignableFrom(var2) && 
                        !Remote.class.isAssignableFrom(var2) && 
                        !Proxy.class.isAssignableFrom(var2) && 
                        !UnicastRef.class.isAssignableFrom(var2) && 
                        !RMIClientSocketFactory.class.isAssignableFrom(var2) && 
                        !RMIServerSocketFactory.class.isAssignableFrom(var2) && 
                        !ActivationID.class.isAssignableFrom(var2) && 
                        !UID.class.isAssignableFrom(var2) ? 
                        Status.REJECTED : Status.ALLOWED;
                }
            }
        }
        }
但是我们发现我们传入的payload object是一个Remote.class接口呀，这样不是就是在白名单了么。
实际上一开始是可以通过过滤器检测，但是readobject会把对象一层层递归拆开一个个经过过滤器检查，最后在`AnnotationInvocationHandler`处就被白名单拦下来了。
也没有说有哪个链的payload刚好可以通过白名单，所以在JEP290之后对于注册端的攻击就被拦截了。
### 注册端对于服务端地址校验的变动
在 RMI 反序列化一文中，我们有实验过：在默认情况下，服务端向注册端进行bind等操作，是会验证服务端地址是否被注册端允许的（默认是只信任本机地址）。
但是我们在上面利用过程中， **攻击者（服务端）都不是受害者（注册端）的信任地址，为何没有被这个验证机制所拦截呢？**
原因是因为，这个 **注册端对于服务端的验证在反序列化操作之后** ：
我们以8u112为例来看代码：
`sun.rmi.registry.RegistryImpl#bind`：
    public void bind(String name, Remote obj)
        throws RemoteException, AlreadyBoundException, AccessException
    {
        //此处验证
        checkAccess("Registry.bind");
        synchronized (bindings) {
            Remote curr = bindings.get(name);
            if (curr != null)
                throw new AlreadyBoundException(name);
            bindings.put(name, obj);
        }
    }
在8u141之后，JDK代码对于此处验证逻辑发生了变化：变成 **先验证再反序列化操作** 了，等于服务端攻击注册端变为不可用。
我们来看161与112的对比情况
那么单单从验证服务端逻辑来说，8u141之后，服务端bind之类的打注册端变得不可利用。但是客户端lookup打注册端因为不需要验证，不受这个变动影响。
但是对比上面的版本JEP290的封堵，自从8u121，客户端lookup打，服务单bind打就都不可利用了。这边的改动其实意义不大，但是还是之前注意到过，领出来提一下。
> 但是假如可以JEP290绕过了，这里就变得非常有意思了，8u141之后lookup可以利用，bind不能利用。
## RMI DGC层反序列化
> 网上的文章讲到RMI的DGC层，经常总结说到：是为了绕过RMI注册端jdk8u121后出现的白名单限制才出现的。
>
> 这也是对的，但是也不是完全对。一开始我也是因为ysoserial中的exploit模块和payload模块弄混了搞不清楚。在开始前我们需要区分：
>
> ysoserial的payload JRMPClient 是为了绕过jdk8u121后出现的白名单限制。这利用到了DGC层，所以上面句话也是对的。
>
> ysoserial的exploit JRMPClient 是可以直接利用DGC层攻击RMI注册端的，其基础原理跟ysoserial-> RMIRegistryExploit几乎是一样的。同时这种攻击方式是绕过不过jdk8u121的。
>
> 我们接下来讲到的是 ysoserial的exploit JRMPClient。而payload JRMPClient与绕过jdk8u121将在下篇说到。
### DGC客户端打DGC服务端
我们先来看与Bind攻击类似的另外一条更为底层的攻击路径：ysoserial的exploit JRMPClient 。
先来演示下攻击效果：依旧是8u111的ServerAndRegister起服务端 ，客户端使用yso的exploit JRMPClient 模块
可以攻击成功。
那么回过头来看看原理：[DGC（Distributed Garbage
Collection）——分布式垃圾回收机制](https://www.apiref.com/java11-zh/java.rmi/java/rmi/dgc/DGC.html)。
这个DGC是用于 **维护服务端中被客户端使用的远程引用才存在的** 。其中包括两个方法 **dirty** 和 **clean** ，简单来说：
  * 客户端想要使用服务端上的远程引用，使用dirty方法来注册一个。同时这还跟租房子一样，过段时间继续用的话还要再调用一次来续租。
  * 客户端不使用的时候，需要调用clean方法来清楚这个远程引用。
由于我们的RMI服务就是基于远程引用的，其底层的远程引用维护就是就是使用DGC，起一个RMI服务必有DGC层。于是我们就打这个DGC服务。
> 相对于RMIRegistryExploit模块，这个模块攻击范围更广因为RMI服务端或者RMI注册端都会开启DGC服务端。
看看DGC服务端最后是哪里触发了反序列化执行：`sun.rmi.transport.DGCImpl_Skel#dispatch`
（跟`sun.rmi.registry.RegistryImpl_Skel#dispatch`）极其类似
    public void dispatch(Remote var1, RemoteCall var2, int var3, long var4) throws Exception {
        //一样是一个dispatch用于分发作用的方法
        //固定接口hash校验
        if (var4 != -669196253586618813L) {
            throw new SkeletonMismatchException("interface hash mismatch");
        } else {
            DGCImpl var6 = (DGCImpl)var1;
            ObjID[] var7;
            long var8;
            //判断dirty和clean分支流
            switch(var3) {
                //clean分支流
                case 0:
                    VMID var39;
                    boolean var40;
                    try {
                        //从客户端提供的输入流取值
                        ObjectInput var14 = var2.getInputStream();
                        //对于取值进行反序列化，***漏洞触发点***
                        var7 = (ObjID[])var14.readObject();
                        var8 = var14.readLong();
                        var39 = (VMID)var14.readObject();
                        var40 = var14.readBoolean();
                    } catch (IOException var36) {
                        throw new UnmarshalException("error unmarshalling arguments", var36);
                    } catch (ClassNotFoundException var37) {
                        throw new UnmarshalException("error unmarshalling arguments", var37);
                    } finally {
                        var2.releaseInputStream();
                    }
                  //进行clean操作，已经完成了攻击，之后操作已经不重要了。
                    var6.clean(var7, var8, var39, var40);
                    //..省略部分无关操作
                //dirty方法分支流，跟clean在漏洞触发点上是一样没差的
                case 1:
                    Lease var10;
                    try {
                        //从客户端提供的输入流取值
                        ObjectInput var13 = var2.getInputStream();
                        //对于取值进行反序列化，***漏洞触发点***
                        var7 = (ObjID[])var13.readObject();
                        var8 = var13.readLong();
                        var10 = (Lease)var13.readObject();
                    } catch (IOException var32) {
                        throw new UnmarshalException("error unmarshalling arguments", var32);
                    } catch (ClassNotFoundException var33) {
                        throw new UnmarshalException("error unmarshalling arguments", var33);
                    } finally {
                        var2.releaseInputStream();
                    }
                    Lease var11 = var6.dirty(var7, var8, var10);
                   //..省略无关操作
                default:
                    throw new UnmarshalException("invalid method number");
            }
        }