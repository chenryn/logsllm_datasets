r
e
v
r
e
s
]
%
[
0.2
0.0
0.2.0.34
0.1.2.19
0.2.1.26
0.2.1.29 0.2.1.30
0.2.4.23
0.2.2.35
0.2.3.25
0.1.2.18
0.1.2.17
0.2.0.31
0.2.0.32
0.2.0.30
0.2.1.19
0.2.1.20
0.2.1.25
0.2.1.22
0.2.0.35
0.2.0.33
0.2.1.21
0.2.1.23
0.2.1.24
0.2.1.27
0.2.1.28
0.2.2.32
0.2.2.33
0.2.2.37
0.2.3.20−rc
0.2.3.19−rc
0.2.3.22−rc0.2.3.24−rc
0.2.2.36
0.2.2.38
0.2.2.34
0.2.2.39
0.2.4.210.2.4.22
0.2.5.10
0.2.4.20
0.2.4.17−rc
0.2.4.19
0.2.6.10
0.2.5.12
0.2.4.24
0.2.6.9
0.2.5.11
0.2.5.8−rc
0.2.4.27
2008−02−01
2008−08−01
2009−02−01
2009−08−01
2010−02−01
2010−08−01
2011−02−01
2011−08−01
2012−02−01
2012−08−01
2013−02−01
2013−08−01
2014−02−01
2014−08−01
2015−02−01
2015−08−01
Fig. 4. Tor versions used by relay nodes, according to CollecTor network status con-
sensus information. Does not include versions with peak usage < 10 %.
Considering this, we deem the update rate surprisingly good, suggesting a high
level of motivation among server operators to update the software diligently,
likely due to their interest to protect Tor users’ privacy as much as possible.
Furthermore, it certainly helps that Tor’s developers tend to be well-connected
within the OS community, with some of them being, e.g., also Debian developers.
Inspecting the data in more detail reveals that a large number of Tor versions
never see widespread adoption. In total, we observe 325 diﬀerent versions in the
consensus data set. Of these, only 48 versions ever reach a usage level of more
than 10 % of all relays. Of the 277 versions with a maximum usage level below
10 %, 257 are alpha or release candidate versions. As Fig. 4 shows, there are
only 6 versions of Tor that exhibit a combined use of more than 60 % of all
relay nodes. There is a repeating pattern of speciﬁc versions like, e.g., 0.2.2.36 to
0.2.2.38, do not see any widespread use, while their parent version keeps enjoying
popularity (which however then ends rapidly eventually). This kind of behavior
suggests that OS distributions may not include certain versions of the software,
preventing it from seeing widespread adoption.
6.2 Server Cipher Suites
With this knowledge, we take a deeper look at the Notary data set. Another
piece of information present in our data is the cipher suite that a server chooses
in its TLS server hello message, which represents the encryption algorithm used
for the remainder of the TLS session.
Figure 5 shows the main cipher suites that the outgoing connections at site
N1 selected. It suggests a number of encouraging conclusions. Tor, in general,
chooses secure cipher suites that use ephemeral keys and are thus perfectly for-
ward secure. This indeed matches one of the original design goals of Tor, which
also contributed to its choice to avoid session resumptions (see Sect. 4).
h
t
n
o
m
/
r
e
h
p
i
c
h
t
i
w
s
n
o
i
t
c
e
n
n
o
c
]
%
[
1.00
0.75
0.50
0.25
0.00
Cipher suites
a: DHE_AES_256_CBC_SHA
b: ECDHE_AES_256_CBC_SHA
c: ECDHE_AES_128_GCM_SHA256
d: ECDHE_AES_128_CBC_SHA
e: DHE_AES_128_CBC_SHA
Exploring Tor’s Activity
13
a
b
c
d
e
2012−11−01
2013−02−01
2013−05−01
2013−08−01
2013−11−01
2014−02−01
2014−05−01
2014−08−01
2014−11−01
2015−02−01
2015−05−01
2015−08−01
Fig. 5. TLS connection ciphers at site N1.
The plot also shows that Tor connections started to switch from Diﬃe-
Hellman (DH) key exchange to Elliptic Curve Diﬃe-Hellman (ECDH) in Decem-
ber 2012. The process has proceeded only slowly and is still ongoing: more
than 50 % of the connections still use DH. Examining the DH key exchange
in more detail reveals that its parameter size is always 1024 bits; Tor apparently
never uses larger parameters. We assume that the reason for the continuing use
of DH key exchanges lies in the OpenSSL versions that are installed on Tor
servers. Some operating system providers have excluded ECDH support from
their OpenSSL libraries for a long time due to fears of patent claims [9], making
DH key exchanges the only viable alternative for perfect forward secrecy. While
1024 bit keys are not yet considered insecure, their use is discouraged. Since a
sizeable percentage of connections is still using DH key exchanges, Tor should
consider switching the parameter size to 2048 bits.
For ECDH connections, we at ﬁrst see an uptake of connections using AES-
128 with SHA1 in cipher block chaining (CBC) mode, which in 2014 rapidly
switches to either AES-256 with SHA1 and CBC, or AES-128 using Galois/
Counter-Mode (GCM) and SHA-256. The reason for this is probably that
OpenSSL only supports GCM starting with OpenSSL 1.0.1. Version 1.0.0, which
is still maintained, cannot use this cipher mode. Since GCM is the preferential
choice of cipher suites, we assume that Tor falls back to CBC if not available.
EC connections almost exclusively use the secp256r1 curve, which also is the
most commonly supported curve on web servers [3].
Taking a look at all other cipher suites that we observe, only a few thousand
connections (<0.1 %) use non perfectly forward ciphers. We assume these are
the result of non-Tor software trying to contact Tor servers.
7 Discussion and Conclusion
This paper presents a longitudinal measurement study of Tor’s network-level
activity, derived from passively collected TLS connection information at four
14
J. Amann and R. Sommer
large-scale network sites over the course of more than 3 years. Generally, our
study conﬁrms that Tor pays attention to choosing TLS security parameters
carefully, including ensuring forward secrecy, avoiding broken ciphers and pick-
ing modern cryptographic primitives. However, we also notice that a signiﬁcant
number of servers keep using a Diﬃe-Hellman key exchange with a parameter
size of 1024, which could become a security risk soon. Our analysis also shows
that while server operators tend to update their software quickly, a signiﬁcant
long-tail of systems keep using outdated versions for signiﬁcant periods of time.
For the reader not intricately familiar with Tor, one surprising result might
be the ease with which one can identify Tor connections on the network by
their characteristic use of X.509 certiﬁcates. For environments aiming to block
Tor traﬃc—common not only from a censorship perspective, but also inside
many enterprise environments—this suggests an alternative route to the stan-
dard approach of tracking Tor relays through blacklists, which need frequent
updates. Interestingly, Tor switched to the current certiﬁcate scheme precisely
to avoid such detection. As [21] discusses, earlier versions used “funny-looking
certs [that] made Tor pretty easy to proﬁle”. With Tor 0.2.0.20, they switched
to the current scheme to better blend in. However, as our study shows, detection
remains an arms race, and an attacker with the ability to match regular expres-
sions against certiﬁcates on the wire can easily identify Tor traﬃc today. Going
forward, Tor could raise the bar further by avoiding the tell-tale signs that our
detector picks up on. However, longer term, their strategy to rely on pluggable
transports promises a better chance to render their users invisible again.
Acknowledgments. We thank Phillip Winter and David Fiﬁeld for their feedback
during the writing of this paper. This work was supported by the National Science
Foundation under grant numbers CNS-1528156 and ACI-1348077. Any opinions, ﬁnd-
ings, and conclusions or recommendations expressed in this material are those of the
author(s) and do not necessarily reﬂect the views of the NSF.
References
1. Amann, J., Vallentin, M., Hall, S., Sommer, R.: Extracting Certiﬁcates from Live
Traﬃc: A Near Real-Time SSL Notary Service. Technical report TR-12-014, Inter-
national Computer Science Institute, November 2012
2. Biryukov, A., Pustogarov, I., Weinmann, R.-P.: TorScan: Tracing long-lived con-
nections and diﬀerential scanning attacks. In: Foresti, S., Yung, M., Martinelli, F.
(eds.) ESORICS 2012. LNCS, vol. 7459, pp. 469–486. Springer, Heidelberg (2012)
3. Bos, J.W., Halderman, J.A., Heninger, N., Moore, J., Naehrig, M., Wustrow, E.:
Elliptic curve cryptography in practice. In: Christin, N., Safavi-Naini, R. (eds.) FC
2014. LNCS, vol. 8437, pp. 156–174. Springer, Heidelberg (2014)
4. Bro Network Monitoring System. https://www.bro.org
5. Chaabane, A., Manils, P., Kaafar, M.A.: Digging into anonymous traﬃc: a deep
analysis of the tor anonymizing network. In: Proceedings of NSS (2010)
6. Christin, N.: Traveling the silk road: a measurement analysis of a large anonymous
online marketplace. In: Proceedings of WWW (2013)
Exploring Tor’s Activity
15
7. Dhungel, P., Steiner, M., Rimac, I., Hilt, V., Ross, K.: Waiting for anonymity:
understanding delays in the tor overlay. In: Proceedings of P2P (2010)
8. Dingledine, R., Mathewson, N.: Tor Protocol Speciﬁcation. https://gitweb.
torproject.org/torspec.git/tree/tor-spec.txt
9. Enable Elliptical Curve Diﬃe-Hellman (ECDHE) in Linux, July 2013. https://
www.internetstaﬀ.com/enable-elliptical-curve-diﬃe-hellman-ecdhe-linux/
10. Hopper, N.: Challenges in protecting tor hidden services from botnet abuse. In:
Christin, N., Safavi-Naini, R. (eds.) FC 2014. LNCS, vol. 8437, pp. 312–321.
Springer, Heidelberg (2014)
11. Hopper, N., Vasserman, E.Y., Chan-TIN, E.: How much anonymity does network
latency leak? ACM Trans. Inf. Syst. Secur. 13(2), 13: 1–13: 28 (2010)
12. Hurley, R., Prusty, S., Soroush, H., Walls, R.J., Albrecht, J., Cecchet, E., Levine,
B.N., Liberatore, M., Lynn, B., Wolak, J.: Measurement and analysis of child
pornography traﬃcking on P2P networks. In: Proceedings of WWW (2013)
13. Le Blond, S., Manils, P., Chaabane, A., Kaafar, M.A., Castelluccia, C., Legout,
A., Dabbous, W.: One bad apple spoils the bunch: exploiting P2P applications to
trace and proﬁle tor users. In: Proceedings of LEET (2011)
14. Loesing, K.: Measuring the Tor Network, Evaluation of Client Requests to the
Directories to Determine total Numbers and Countries of Users. Technical report
2009–06-002, The Tor Project, June 2009
15. Loesing, K.: Measuring the Tor Network from Public Directory Information. Tech-
nical report 2009–08-002, The Tor Project, August 2009
16. Manils, P., Abdelberi, C., Blond, S.L., Kˆaafar, M.A., Castelluccia, C., Legout, A.,
Dabbous, W.: Compromising Tor Anonymity Exploiting P2PInformation Leakage.
CoRR abs/1004.1461 (2010). http://arxiv.org/abs/1004.1461
17. McCoy, D., Bauer, K., Grunwald, D., Kohno, T., Sicker, D.C.: Shining light in dark
places: understanding the tor network. In: Borisov, N., Goldberg, I. (eds.) PETS
2008. LNCS, vol. 5134, pp. 63–76. Springer, Heidelberg (2008)
18. Overlier, L., Syverson, P.: Locating hidden servers. In: Proceedings of IEEE S&P
(2006)
19. Paxson, V.: Bro: a system for detecting network intruders in real-time. Comput.
Netw. 31(23–24), 2435–2463 (1999)
20. Tang, C., Goldberg, I.: An improved algorithm for tor circuit scheduling. In: Pro-
ceedings of CCS (2010)
21. Tor Wiki – TLS History. https://trac.torproject.org/projects/tor/wiki/org/
projects/Tor/TLSHistory
22. Tor Directory Protocol, Version 3. https://gitweb.torproject.org/torspec.git/tree/
dir-spec.txt