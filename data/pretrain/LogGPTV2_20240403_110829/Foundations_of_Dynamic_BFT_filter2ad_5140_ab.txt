requests, each submitted by a client. A request may include
one or more operations. A replica executes the operations in
the request and sends a reply to the corresponding client. The
client computes a final response based on the reply messages.
3 ⌋
In a system with n replicas, BFT tolerates f ≤ ⌊ n−1
Byzantine failures, which is optimal. Correctness for BFT is
specified as follows:
• Agreement: If a correct replica delivers a request m, then
every correct replica eventually delivers m.
• Total order: If a correct replica delivers a message m
before delivering m′, then another correct replica delivers
a message m′ only after it has delivered m.
correct replica eventually delivers m.
• Liveness: If a correct client submits a request m, then a
• Integrity: No correct replica delivers the same message
m more than once; if a correct replica delivers a message
m and the client that submits m is correct, then m was
previously submitted by the client.
Total order and integrity are safety properties, while the
other two are liveness properties. Agreement and liveness
together imply a client eventually receives a valid response.
A BFT formalization may explicitly assign sequence numbers
to client requests and ask correct replicas to execute requests
according to the order.
Generally speaking, partially synchronous BFT protocols
rely on view changes (with a form of leader rotations) for
liveness and therefore proceed in views. A view change is
triggered when a leader appears to be faulty (e.g., PBFT [10]),
or triggered periodically according to some strategy (e.g.,
Spinning [53], HotStuff [55]). Asynchronous BFT protocols,
however, do not have the view change mechanism.
B. Dynamic BFT
We consider a BFT system with replicas taken from a
finite set Π = {p1, p2,···} (also called the universe). Each
replica pi ∈ Π has a public/private key pair (pki, ski) and
we assume for simplicity its public key is known by all
processes in the set and serves as a unique identifier for
pi. A dynamic BFT group consists of a subset of Π. The
replicas in a BFT group are members of the group. We
use the notion of configuration to represent the successive
membership of a BFT group. Let Mc be the membership (the
group of replicas) of a configuration numbered by an integer c,
initialized as 0 (the initial configuration). A replica changes
its configuration via configuration installation. We introduce
the following definitions:
Definition III.1. A replica p is in configuration c, if p ∈ Mc.
Definition III.2. The (current) configuration of p is c if p
has installed configuration c but has not installed another
configuration after c.
Definition III.3. The latest configuration of the system is c,
if at least one correct replica installs c and no correct replica
has installed c′ where c′ > c.
Definition III.4. A replica p is correct in configuration c, if
p installs configuration c, and p is correct (not faulty) in c.
(Note p might or might not be faulty in configuration c + 1,
but is not faulty in c.)
Definition III.5. A replica p is c-correct, if 1) p is correct in
configuration c, and 2) no correct replicas in c install any
configuration greater than c, or some correct replica in c
installs configuration c + 1 after c and p ∈ Mc+1. (p is c-
correct if c is the latest configuration for all correct replicas
in c, or p is in the next configuration of c.)
Definition III.6. A replica p is c-faulty if p ∈ Mc and p is not
c-correct. (A replica p can be correct in configuration c but
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
31319
c-faulty, as, for instance, p may be removed from the group
precisely after configuration c but before configuration c + 1
and is never in configuration c + 1.)
Definition III.7. A replica p is g-correct, if 1) p is 0-correct
(where 0 is the initial configuration of the system), and 2)
there does not exist a c > 0 such that p is not c-correct. (A
g-correct replica is correct in all its configurations.)
Definition III.8. A replica p is gc-correct for c ≥ 0, if 1) p is
c-correct, and 2) there does not exist a c′ such that c′ > c
and p is not c′-correct. (A gc-correct replica is correct in
configurations c′ ≥ c. A g0-correct replica is g-correct.)
Our notion of configurations (dealing with membership)
is independent of views (in the sense of view changes for
partially synchronous BFT). A dynamic partially synchronous
BFT can have both the notion of configurations and the notion
of views. Note a static BFT group is a special case of the
dynamic BFT model with a fixed number of replicas and a
single configuration.
C. Group Membership Change for Dynamic BFT
We consider two membership requests that can modify
the membership: the join request that adds a new replica
to the group and the leave request that removes a replica
from the group. The membership requests are different from
regular BFT requests (write and read requests) that do not
change the membership. We assume without loss of generality
that membership requests are the only method of modifying
the membership. We levy no restrictions on who may issue
membership requests. They may be invoked by any authorized
clients (e.g., replicas joining or leaving the system, system
administrators, trusted CAs, high-level programs). We also
do not discuss why a replica is included or excluded but
only present how we do so. In practice, as illustrated in the
examples in Sec. I, there is typically no ambiguity in agreeing
on who will join or leave the group and why and when the
group membership needs to change.
Upon execution of a join request for pi at a replica pj in
configuration c, the membership for pj becomes Mc ∪ {pi}
(and correspondingly pj installs the new configuration). Upon
execution of a leave request for pi at a replica pj in configu-
ration c, its membership becomes Mc − {pi}.
For two configuration memberships Mi and Mj with i < j,
we use Mj/Mi to represent the replicas that exist in Mj but
do not exist in Mi. For instance, if Mi = {p2, p3, p4} and
Mj = {p3, p4, p5, p6}, then Mj/Mi = {p5, p6}. Let nc and tc
be the number of replicas and c-faulty replicas in configuration
c, respectively. In configuration c, we have nc = |Mc|.
D. Assumptions
We now specify the system assumptions.
Standard quorum assumption. We assume the optimal re-
silience model in this work. Namely, the maximum number
of failures the system can tolerate in configuration c is fc ≤
3 ⌋. A quorum of replicas consists of at least ⌈ nc+fc+1
⌉
⌊ nc−1
2
replicas. We use Qc to represent the quorum size in config-
uration c. This is a standard and optimal assumption. Unless
mentioned otherwise, we consider the default assumption.
G-correct assumption. We also consider a stronger assump-
tion which is not essential but may yield some (much) simpler
protocols for some cases. Let F = max({fc}) + 1 for all
c ≥ 0. G-correct assumption requires there exist at least F
replicas that are correct across all configurations. In other
words, “enough” correct replicas never leave the system.
In addition, we make two standard assumptions for dynamic
the
membership (used in all other such scenarios): first,
number of replicas that join or leave the system is bounded
(a natural assumption is that from configuration c to c + 1, at
least Qc c-correct replicas are still in c + 1); second, the initial
configuration is known by all replicas in the universe Π.
E. Property Specification
In our formalization, membership requests and regular BFT
requests may be collectively called requests. We treat member-
ship requests in the same way as regular requests. Thus, when
specifying the correctness of dynamic BFT below, a request
m may be either a membership request or a regular request.
In particular, an invocation of a join or leave request is just
an invocation of a special client request. An execution of a
join (resp. leave) request corresponds to the delivery of the
request and installation of a new configuration via the add
(resp. remove) operation in the request.
• Agreement: If a correct replica in configuration c delivers
a request m, then every correct replica in configuration c
eventually delivers m.
• Same configuration delivery: If a correct replica pi (resp.
pj) delivers m in configuration ci (resp. cj), then ci = cj.
• Total order: If a correct replica in configuration c delivers
a message m before delivering m′, then another correct
replica in configuration c delivers a message m′ only after
it has delivered m.
• Liveness: If a correct client submits a request m, then even-
tually a correct replica in some configuration c delivers m.
• Integrity: No correct replica delivers the same message
m more than once; if a correct replica delivers a message
m in some configuration and the client that submits m is
correct, then m was previously submitted by the client.
The same configuration delivery property is a natural re-
quirement for the membership service and is defined pre-
viously (e.g., [11, 46]). A BFT system may assign increas-
ing sequence numbers to different client requests to order
transactions. Under such a syntax, we may unify the same
configuration delivery property and total order property:
• Enhanced total order: If a correct replica in configuration
c delivers a request m with a sequence number, and another
correct replica in configuration c′ delivers a request m′ with
the same sequence number, then m = m′ and c = c′.
A practical, durable BFT system relies on a state transfer
protocol to bring recovering replicas or replicas that have
fallen behind its peers up to date [6, 10]. In dynamic BFT,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
41320
new replicas joining the group also need the state transfer
mechanism to catch up with other replicas. New replicas or
recovering replicas may be deemed as being faulty before they
obtain the system state.
is not at all
Some, but not all, existing BFT protocols are specified
without explicit agreement property, but these protocols can
easily satisfy it. This is, however, not the case for dynamic
BFT, as achieving agreement
trivial; hence,
we explicitly consider agreement in all our dynamic BFT
constructions.
The need for additional properties. Having discussed dy-
namic BFT properties naturally mirroring properties from
static BFT, let us now motivate the need of additional proper-
ties. In static BFT settings, agreement, total order, and our
liveness definition imply that a correct client will receive
replies to its requests. More concretely, for a client request m,
agreement and liveness guarantee that all correct replicas will
eventually deliver m. Since there are n ≥ 3f + 1 replicas, a
client can safely deliver a response through the majority voting
approach, computing a response after receiving f +1 matching
replies. In fact, a typical definition of liveness in static BFT
already requires that a client will eventually receive replies to
its request so the agreement property is not “needed”.
The classic definitions do not immediately work for dy-
namic groups. First, not knowing the membership of the
system or the total number of replicas in some configuration,
the client may never be certain when to deliver the replies to
the requests. Second, even if the client knows the membership
information, the membership may have changed by the time
a message is processed. These two factors motivate the need
of defining additional properties.
Attempt-1. A “natural” enhancement to liveness that could
circumvent the membership issue may be defined as follows:
• If a correct client submits a request m, then the client
eventually delivers a response from replicas.
Unfortunately, the definition does not capture any meaning-
ful correctness guarantees in the dynamic BFT setting. One
may easily design a trivial protocol satisfying the above defi-
nition, where a correct client receives an irrelevant response.
Attempt-2. Another choice is to define the following property:
• Membership discovery: A correct client having submitted
the membership of the
m can eventually learn about
configurations for which m is delivered.
The membership discovery property requires the client
eventually knows the membership information (the identities
of replicas) for the configuration where its message is deliv-
ered. It does not say if a client can or need to learn the latest
(current) membership, which is challenging in asynchronous
environments (even if we assume a partially synchronous
model for liveness). Indeed, even if a client obtains the
latest membership information,
the membership may have
been changed when the client submits the request or when
the request is being processed. The membership discovery
property appears general to encompass many scenarios we
could envision, whether the client obtains the membership
information via a standalone subprotocol (either before or
after its requests are processed), or obtains the membership
information during the protocol runtime.
Intuitively,
the membership discovery property,
together
with agreement, liveness, and total order, would imply that
a client knows when it receives enough matching replies from
the same configuration and can safely deliver a response based
on majority voting. More precisely, with a client request m,
agreement and liveness guarantee that all correct replicas in
some configuration will eventually deliver a client message m;
total order guarantees that m has to be delivered within the
same configuration, say, c; knowing the precise membership
of the configuration c that delivers m and the total number of
members in the configuration c, a client can safely deliver a
response through the conventional majority voting approach,
computing a response after receiving fc + 1 matching replies
in the configuration c.
Unfortunately, the above argument has a major flaw. Even
if the client learns the information of the configuration c for
which the request m is delivered and even if we assume
perfect channels, the reply messages sent by correct replicas
in configuration c may not be able to reach the client. This is
because the perfect channel guarantees message delivery only
when the sender is—all the time—correct, but the sender may
leave the system in some future configurations; indeed, due
to network asynchrony, a reply message from some replica pi
may not reach the client before pi leaves the system.
We comment that while we do not adopt the definition of
membership discovery, our constructions are indeed motivated
by the idea.
Final attempt. Finally, we define the following property:
• Consistent delivery: A correct client submitting m will
deliver a correct response which is consistent with the state
in some configuration where m is delivered.
The property is slightly unconventional, encompassing both
liveness and safety. One can, however, easily divide the prop-
erty into a liveness one (a correct client eventually receives a
reply to its request) and a safety one (the delivered request by a
correct client is consistent with the state of some configuration
where the request is delivered).
To formally define consistent delivery, we use the state
machine replication notation [29, 48]. A deterministic state
machine consists of the following tuple of values: a set
of states, a set of requests, a set of replies, a transition function
that takes as input a request and a state and outputs an updated
state, and an output function that takes as input a request and
a state and outputs a reply. Requests are submitted by clients
and replies are sent to clients. The states encode the system
state (including configurations and various variables kept).
We say a reply re is consistent with a state st for a correct
state machine, if the reply re was generated by the output
function for some request and the state st. As we consider
deterministic state machines, and as total order is achieved
by all correct replicas, the same request and the same state
determines the same reply for correct replicas.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:42 UTC from IEEE Xplore.  Restrictions apply. 
51321
V
V1
V2
V ′
V ′
V ′
1
2
correct in c
c-correct
correct in c
c-correct
c-correct
c-correct
correct in c
gc-correct
c-correct
correct in c
Dyno-S
Dyno
Dyno
Dyno-A
Dyno-C
Dyno-AC
G-correct
standard quorum
G-correct
standard quorum
same as V
same as V1
same as V2
if clause
main clause
assumption
constructions
correct in c
gc-correct
standard quorum
TABLE I: Overview of agreement definitions and construc-
tions. The definition variants can also be applied to other
dynamic BFT properties, but they do not (seem to) lead to
interesting efficiency trade-offs.
Note that correct replicas may generate a reply (and a
corresponding state) in some configuration, but as some replies
may never reach the client in this configuration, the client will
not deliver the replies in this configuration. (Recall that correct
replicas may have left the system before the reply can reach
the client.) We, however, do want to ensure that the client will
eventually deliver a reply that is consistent with the state that
the system maintains.
Also note in a conventional, static state machine replication
setting, a reply is always delivered in the same configuration,
as there are enough correct replicas. In this setting, one does
not have to define this additional “consistent delivery.”
F. Variants of Definitions
for
There are a number of variants
the definitions
in Sec. III-E. For instance, for agreement, both if-clauses and
main-clauses discuss “correct replicas in c.” We summarize
in Table I these variants, with definitions described above
in detail being V2, the strongest one we can envision. We
illustrate their differences using the agreement property1, and
different agreement properties lead to different constructions
with interesting efficiency trade-offs.
One can similarly describe definitions alike for other proper-
ties. The definition variants for these properties do not (seem
to) lead to more efficient constructions. So this paper only
provide constructions with different agreement definitions.
after configuration 1. For agreement definition V , if the correct
replica p1 in configuration 1 delivers a message m2, any other
g1-correct replicas, including p2 to p5, will eventually deliver
m2. Replicas p6 and p7, however, may or may not deliver m2.
For agreement definition V1, if a 1-correct replica p1 delivers
m1, any other 1-correct replicas, including p2 to p6, have to
deliver m1. For V2, an example is m3. In particular, if a correct
replica in configuration 1 p1 delivers m3, any other correct
replicas in configuration 1, including p2 to p7, will deliver
m3. The properties for V ′, V ′
1, and V ′
2 are similar, except that