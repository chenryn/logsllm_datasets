problems. Use normal z/OS tuning techniques to resolve them.
290 Troubleshooting and Support for IBM MQ
Is a batch or TSO program waiting?
Consider the following points:
Your program might be waiting on another resource
For example, a VSAM control interval (CI) that another program is holding for update.
Your program might be waiting for a message that has not yet arrived
This condition might be normal behavior if, for example, it is a server program that constantly
monitors a queue.
Alternatively, your program might be waiting for a message that has arrived, but has not yet been
committed.
Issue the DIS CONN(*) TYPE(HANDLE) command and examine the queues in use by your program.
If you suspect that your program has issued an MQI call that did not involve an MQGET WAIT, and
control has not returned from IBM MQ, take an SVC dump of both the batch or TSO job, and the IBM MQ
subsystem before canceling the batch or TSO program.
Also consider that the wait state might be the result of a problem with another program, such as an
abnormal termination (see “Messages do not arrive when expected on z/OS” on page 295), or in IBM MQ
itself (see “Is IBM MQ waiting for z/OS ?” on page 292). See “IBM MQ for z/OS dumps” on page 267
(specifically Figure 44 on page 269 ) for information about obtaining a dump.
If the problem persists, see “Contacting IBM Support” on page 301 for information about reporting the
problem to IBM.
Is a CICS transaction waiting?
Consider the following points:
CICS might be under stress
This might indicate that the maximum number of tasks allowed (MAXTASK) has been reached, or a
short on storage (SOS) condition exists. Check the console log for messages that might explain this
(for example, SOS messages), or see the CICS Problem Determination Guide.
The transaction might be waiting for another resource
For example, this might be file I/O. You can use CEMT INQ TASK to see what the task is waiting for.
If the resource type is MQSERIES your transaction is waiting on IBM MQ (either in an MQGET WAIT or
a task switch). Otherwise see the CICS Problem Determination Guide to determine the reason for the
wait.
The transaction might be waiting for IBM MQ for z/OS
This might be normal, for example, if your program is a server program that waits for messages
to arrive on a queue. Otherwise it might be the result of a transaction abend, for example (see
“Messages do not arrive when expected on z/OS” on page 295). If so, the abend is reported in the
CSMT log.
The transaction might be waiting for a remote message
If you are using distributed queuing, the program might be waiting for a message that has not
yet been delivered from a remote system (for further information, refer to “Problems with missing
messages when using distributed queuing on z/OS” on page 296 ).
If you suspect that your program has issued an MQI call that did not involve an MQGET WAIT (that is, it is
in a task switch), and control has not returned from IBM MQ, take an SVC dump of both the CICS region,
and the IBM MQ subsystem before canceling the CICS transaction. See “Dealing with loops on z/OS” on
page 292 for information about waits. Refer to “IBM MQ for z/OS dumps” on page 267 (specifically Figure
44 on page 269) for information about obtaining a dump.
If the problem persists, refer to “Contacting IBM Support” on page 301 for information about reporting
the problem to IBM.
IBM MQ troubleshooting and support 291
Is Db2 waiting?
If your investigations indicate that Db2 is waiting, check the following:
1.Use the Db2 -DISPLAY THREAD(*) command to determine if any activity is taking place between the
queue manager and the Db2 subsystem.
2.Try and determine whether any waits are local to the queue manager subsystems or are across the
Db2 subsystems.
Is RRS active?
• Use the D RRS command to determine if RRS is active.
Is IBM MQ waiting for z/OS ?
If your investigations indicate that IBM MQ itself is waiting, check the following:
1.Use the DISPLAY THREAD(*) command to check if anything is connected to IBM MQ.
2.Use SDSF DA, or the z/OS command DISPLAY A,xxxxMSTR to determine whether there is any
processor usage as shown in Has your application or IBM MQ for z/OS stopped processing work? in
“Examining the problem in greater depth on z/OS” on page 57.
• If IBM MQ is using some processor time, reconsider other reasons why IBM MQ might be waiting, or
consider whether this is actually a performance problem.
• If there is no processor activity, check whether IBM MQ responds to commands. If you can get a
response, reconsider other reasons why IBM MQ might be waiting.
• If you cannot get a response, check the console log for messages that might explain the wait (for
example, IBM MQ might have run out of active log data sets, and be waiting for offload processing).
If you are satisfied that IBM MQ has stalled, use the STOP QMGR command in both QUIESCE and FORCE
mode to terminate any programs currently being executed.
If the STOP QMGR command fails to respond, cancel the queue manager with a dump, and restart. If the
problem recurs, see “Contacting IBM Support” on page 301 for further guidance.
Related concepts
“Distinguishing between waits and loops on z/OS” on page 289
Waits and loops on IBM MQ for z/OS can present similar symptoms. Use this topic to help determine if you
are experiencing a wait or a loop.
“Dealing with loops on z/OS” on page 292
Loops can occur in different areas of a z/OS system. Use this topic to help determine where a loop is
occurring.
Dealing with loops on z/OS
Loops can occur in different areas of a z/OS system. Use this topic to help determine where a loop is
occurring.
The following sections describe the various types of loop that you might encounter, and suggest some
responses.
Is a batch application looping?
If you suspect that a batch or TSO application is looping, use the console to issue the z/OS command
DISPLAY JOBS,A (for a batch application) or DISPLAY TS,A (for a TSO application). Note the CT values
from the data displayed, and repeat the command.
If any task shows a significant increase in the CT value, it might be that the task is looping. You could also
use SDSF DA, which shows you the percentage of processor that each address space is using.
292 Troubleshooting and Support for IBM MQ
Is a batch job producing a large amount of output?
An example of this behavior might be an application that browses a queue and prints the messages. If
the browse operation has been started with BROWSE FIRST, and subsequent calls have not been reset to
BROWSE NEXT, the application browses, and prints the first message on the queue repeatedly.
You can use SDSF DA to look at the output of running jobs if you suspect that it might be causing a
problem.
Does a CICS region show heavy processor activity?
It might be that a CICS application is looping, or that the CICS region itself is in a loop. You might see
AICA abends if a transaction goes into a tight (unyielding) loop.
If you suspect that CICS, or a CICS application is looping, see the CICS Problem Determination Guide.
Does an IMS region show heavy processor activity?
It might be that an IMS application is looping. If you suspect this behavior, see IMS Diagnosis Guide and
Reference l.
Is the queue manager showing heavy processor activity?
Try to enter an MQSC DISPLAY command from the console. If you get no response, it is possible that
the queue manager is looping. Follow the procedure shown in Has your application or IBM MQ for z/OS
stopped processing work? in “Examining the problem in greater depth on z/OS” on page 57 to display
information about the processor time being used by the queue manager. If this command indicates that
the queue manager is in a loop, take a memory dump, cancel the queue manager and restart.
If the problem persists, see “Contacting IBM Support” on page 301 for information about reporting the
problem to IBM.
Is a queue, page set, or Coupling Facility structure filling up unexpectedly?
If so, it might indicate that an application is looping, and putting messages on to a queue. (It might be a
batch, CICS, or TSO application.)
Identifying a looping application
In a busy system, it might be difficult to identify which application is causing the problem. If you
keep a cross-reference of applications to queues, terminate any programs or transactions that might
be putting messages on to the queue. Investigate these programs or transactions before using them
again. (The most likely culprits are new, or changed applications; check your change log to identify
them.)
Try issuing a DISPLAY QSTATUS command on the queue. This command returns information about
the queue that might help to identify which application is looping.
Incorrect triggering definitions
It might be that a getting application has not been triggered because of incorrect object definitions,
for example, the queue might be set to NOTRIGGER.
Distributed queuing
Using distributed queuing, a symptom of this problem might be a message in the receiving system
indicating that MQPUT calls to the dead-letter queue are failing. This problem might be caused
because the dead-letter queue has also filled up. The dead-letter queue message header (dead-letter
header structure) contains a reason or feedback code explaining why the message might not be put
on to the target queue. See MQDLH - Dead-letter header for information about the dead-letter header
structure.
IBM MQ troubleshooting and support 293
Allocation of queues to page sets
If a particular page set frequently fills up, there might be a problem with the allocation of queues to
page sets. See IBM MQ for z/OS performance constraints for more information.
Shared queues
Is the Coupling Facility structure full? The z/OS command DISPLAY CF displays information about
Coupling Facility storage including the total amount, the total in use, and the total free control and
non-control storage. The RMF Coupling Facility Usage Summary Report provides a more permanent
copy of this information.
Are a task, and IBM MQ for z/OS, showing heavy processor activity?
In this case, a task might be looping on MQI calls (for example, browsing the same message repeatedly).
Related concepts
“Distinguishing between waits and loops on z/OS” on page 289
Waits and loops on IBM MQ for z/OS can present similar symptoms. Use this topic to help determine if you
are experiencing a wait or a loop.
“Dealing with waits on z/OS” on page 290
Waits can occur in batch or TSO applications, CICS transactions, and other components on IBM MQ for
z/OS. Use this topic to determine where waits can occur.
Dealing with incorrect output on z/OS
Incorrect output can be missing, unexpected, or corrupted information.
The term "incorrect output᾿ can be interpreted in many different ways. Points to consider if you have
obtained what you believe to be some incorrect output are:
• When to classify output as incorrect
"Incorrect output᾿ might be regarded as any output that you were not expecting. However, use this term
with care in the context of problem determination because it might be a secondary effect of some other
type of error. For example, looping could be occurring if you get any repetitive output, even though that
output is what you expected.
• Error messages
IBM MQ also responds to many errors it detects by sending error messages. You might regard these
messages as "incorrect output᾿, but they are only symptoms of another type of problem. If you have
received an error message from IBM MQ that you were not expecting, see Are there any error messages,
return codes or other error conditions? in “Identifying characteristics of the problem on z/OS” on page
52.
• Unexpected messages
Your application might not have received a message that it was expecting, or has received a message
containing unexpected or corrupted information, or has received a message that it was not expecting
(for example, one that was destined for a different application).
The subtopics contain information about the problems that you could encounter with your system and
classify as incorrect output:
• Application messages that do not arrive when you are expecting them
• Application messages that contain the wrong information, or information that has been corrupted
Additional problems that you might encounter if your application uses distributed queues are also
described.
• “Messages do not arrive when expected on z/OS” on page 295
• “Problems with missing messages when using distributed queuing on z/OS” on page 296
• “Problems with getting messages when using message grouping on z/OS” on page 298
• “Finding messages sent to a cluster queue on z/OS” on page 298
294 Troubleshooting and Support for IBM MQ
• “Finding messages sent to the IBM MQ - IMS bridge” on page 298
• “Messages contain unexpected or corrupted information on z/OS” on page 299
Related concepts
“Dealing with performance problems on z/OS” on page 288
Use this topic to investigate IBM MQ for z/OS performance problems in more detail.
Related tasks
“Making initial checks” on page 6
There are some initial checks that you can make that may provide answers to common problems that you
might have.
Messages do not arrive when expected on z/OS
Missing messages can have different causes. Use this topic to investigate the causes further.
If messages do not arrive on the queue when you are expecting them, check for the following:
Has the message been put onto the queue successfully?
Did IBM MQ issue a return and reason code for the MQPUT, for example:
• Has the queue been defined correctly, for example is MAXMSGL large enough? (reason code 2030).
• Can applications put messages on to the queue (is the queue enabled for MQPUT calls)? (reason
code 2051).
• Is the queue already full? This could mean that an application could not put the required message
on to the queue (reason code 2053).
Is the queue a shared queue?
• Have Coupling Facility structures been defined successfully in the CFRM policy data set? Messages
held on shared queues are stored inside a Coupling Facility.
• Have you activated the CFRM policy?
Is the queue a cluster queue?
If it is, there might be multiple instances of the queue on different queue managers. This means that
the messages could be on a different queue manager.
• Did you want the message to go to a cluster queue?
• Is your application designed to work with cluster queues?
• Did the message get put to a different instance of the queue from that expected?
Check any cluster-workload exit programs to see that they are processing messages as intended.
Do your gets fail?
• Does the application need to take a syncpoint?
If messages are being put or got within syncpoint, they are not available to other tasks until the unit
of recovery has been committed.
• Is the time interval on the MQGET long enough?
If you are using distributed processing, you should allow for reasonable network delays, or
problems at the remote end.
• Was the message you are expecting defined as persistent?
If not, and the queue manager has been restarted, the message will have been deleted. Shared
queues are an exception because nonpersistent messages survive a queue manager restart.
• Are you waiting for a specific message that is identified by a message or correlation identifier
(MsgId or CorrelId)?
IBM MQ troubleshooting and support 295
Check that you are waiting for a message with the correct MsgId or CorrelId. A successful MQGET
call sets both these values to that of the message got, so you might need to reset these values to get
another message successfully.
Also check if you can get other messages from the queue.
• Can other applications get messages from the queue?
If so, has another application already retrieved the message?
If the queue is a shared queue, check that applications on other queue managers are not getting the
messages.
If you cannot find anything wrong with the queue, and the queue manager itself is running, make the
following checks on the process that you expected to put the message on to the queue:
• Did the application get started?
If it should have been triggered, check that the correct trigger options were specified.
• Is a trigger monitor running?
• Was the trigger process defined correctly (both to IBM MQ for z/OS and CICS or IMS )?
• Did it complete correctly?
Look for evidence of an abend, for example, in the CICS log.
• Did the application commit its changes, or were they backed out?
Look for messages in the CICS log indicating this.
If multiple transactions are serving the queue, they might occasionally conflict with one another. For
example, one transaction might issue an MQGET call with a buffer length of zero to find out the length
of the message, and then issue a specific MQGET call specifying the MsgId of that message. However,
while this is happening, another transaction might have issued a successful MQGET call for that message,
so the first application receives a completion code of MQRC_NO_MSG_AVAILABLE. Applications that are
expected to run in a multi-server environment must be designed to cope with this situation.
Have any of your systems suffered an outage? For example, if the message you were expecting should
have been put on to the queue by a CICS application, and the CICS system went down, the message
might be in doubt. This means that the queue manager does not know whether the message should be
committed or backed out, and so has locked it until this is resolved when resynchronization takes place.
Note: The message is deleted after resynchronization if CICS decides to back it out.
Also consider that the message could have been received, but that your application failed to process it in
some way. For example, did an error in the expected format of the message cause your program to reject
it? If so, refer to “Messages contain unexpected or corrupted information on z/OS” on page 299.
Problems with missing messages when using distributed queuing on z/OS
Use this topic to understand possible causes of missing messages when using distributed queuing on IBM
MQ for z/OS.
If your application uses distributed queuing, consider the following points:
Has distributed queuing been correctly installed on both the sending and receiving systems?
Ensure that the instructions about installing the distributed queue management facility in Configuring
z/OS have been followed correctly.
Are the links available between the two systems?
Check that both systems are available, and connected to IBM MQ for z/OS. Check that the LU 6.2 or
TCP/IP connection between the two systems is active or check the connection definitions on any other
systems that you are communicating with.
See Monitoring and performance for more information about trace-route messaging in a network.
Is the channel running?
296 Troubleshooting and Support for IBM MQ
• Issue the following command for the transmission queue:
DISPLAY QUEUE (qname) IPPROCS
If the value for IPPROCS is 0, this means that the channel serving this transmission queue is not
running.
• Issue the following command for the channel:
DISPLAY CHSTATUS (channel-name) STATUS MSGS
Use the output produced by this command to check that the channel is serving the correct
transmission queue and that it is connected to the correct target machine and port. You can
determine whether the channel is running from the STATUS field. You can also see if any messages
have been sent on the channel by examining the MSGS field.
If the channel is in RETRYING state, this is probably caused by a problem at the other end. Check
that the channel initiator and listener have been started, and that the channel has not been stopped.
If somebody has stopped the channel, you need to start it manually.
Is triggering set on in the sending system?
Check that the channel initiator is running.
Does the transmission queue have triggering set on?
If a channel is stopped under specific circumstances, triggering can be set off for the transmission
queue.
Is the message you are waiting for a reply message from a remote system?