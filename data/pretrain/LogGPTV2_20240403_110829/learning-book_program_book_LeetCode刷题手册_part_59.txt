numsMap[nums[o]] = nums[0]
for _, num := range nums {
numsMap[num] = num
 + wnuZ = [+wnus]dewswnu
//numsArray是prefixSum去重之后的版本，利用numsMap去重
for _, V := range numsMap {
numsArray = append(numsArray, v)
//排序是为了使得线段树中的区间1eft=1en(nums)11i buf[j]{
nums[k] = buf[i]
i++
}else{
nums[k]  =  buf[j]
j++
k++
return cnt
---
## Page 565
494.TargetSum
题目
You are given a list of non-negative integers, a1, a2, , an, and a target, S. Now you have 2
symbols + and . For each integer, you should choose one from + and  as its new symbol.
S 1aje on jenba siagaqul jo wuns axew oi sjoqu/s uglsse o sem Auew mou ano pui
Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3.
Output: 5
Explanation:
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
Note:
1. The length of the given array is positive and will not exceed 20.
2. The sum of elements in the given array will not exceed 1000.
3. Your output answer is guaranteed to be fitted in a 32-bit integer.
题目大意
给定一个非负整数数组，a1，a2,,an，和一个目标数，S。现在有两个符号+和-。对于数组中的任意
一个整数，可以从+或-中选择一个符号添加在前面。返回可以使最终数组和为目标数S的所有添加符
号的方法数。
提示：
·数组非空，且长度不会超过20。
●初始的数组的和不会超过1000。
·保证返回的最终结果能被32位整数存下。
解题思路
·给出一个数组，要求在这个数组里面的每个元素前面加上+或者-号，最终总和等于S。问有多少
种不同的方法。
---
## Page 566
·这一题可以用DP和DFS解答。DFS方法就不比较暴力简单了。见代码。这里分析一下DP的做
法。题目要求在数组元素前加上+或者-号，其实相当于把数组分成了2组，一组全部都加+
号，一组都加-号。记+号的一组P，记-号的一组N，那么可以推出以下的关系。
sum(P) - sum(N) = target
Sum(P) + sum(N) + sum(P) - Sum(N) = target + sum(P) + sum(N)
2 * sum(P) = target + sum(nums)
等号两边都加上sum（N）+sum（P)，于是可以得到结果2sum（P）=target+
sum（nums），那么这道题就转换成了，能否在数组中找到这样一个集合，和等于（target+
sum（nums））/2。那么这题就转化为了第416题了。dp[i]中存储的是能使和为i的方法个
数。
·如果和不是偶数，即不能被2整除，那说明找不到满足题目要求的解了，直接输出0。
代码
func findTargetSumways(nums []int, S int) int {
total := 0
for _, n := range nums {
total += n
if S > total 11(S+total)%2 == 1 {
return 0
target :=(S +total)/ 2
dp := make([]int, target+l)
dp[0] = 1
for _, n := range nums {
for i = target; i >= n; i-- {
dp[i]  += dp[1i-n]
return dp[target]
//解法二DFS
func findTargetSumwaysl(nums []int, S int) int {
//sums[i]存储的是后缀和nums[i：]，即从i到结尾的和
sums := make([]int, len(nums))
sums[1en(nums) -1] = nums[1en(nums)-1]
for i := len(nums) - 2; i > -1; i-- {
sums[1]  =  sums[i+1] + nums[1]
res := 0
dfsFindTargetSumways(nums, 0, 0, S, &res, sums)
return res
---
## Page 567
func dfsFindTargetSumways(nums []int, index int, curSum int, S int, res *int,
sums []int) {
if index == len(nums) {
if curSum == S {
*(res) = *(res) + 1
return
//剪枝优化：如果sums[index]值小于剩下需要正数的值，那么右边就算都是+号也无能为力
了，所以这里可以剪枝了
if S-curSum > sums[index]{
return
dfsFindTargetSumways(nums, index+l, curSum+nums [index], S, res, sums)
dfsFindTargetSumways(nums, index+l, curSum-nums[index], S, res, sums)
496.NextGreaterElement
题目
You are given two arrays (without duplicates) nums1 and nums2 where nums1's elements are
subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding
places of nums2.
 ug si o aqnu aea ssy au sl tswnu ui x aqn e jo aqnn aea xa a
nums2. If it does not exist, output -1 for this number.
Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2].
Output: [-1,3,-1]
Explanation:
For number 4 in the first array, you cannot find the next greater number
for it in the second array, so output -1.
For number 1 in the first array, the next greater number for it in the
second array is 3.
For number 2 in the first array, there is no next greater number for it in
the second array, so output -1.
Example 2:
---
## Page 568
Input: nums] = [2,4], nums2 = [1,2,3,4]
output: [3,-1]
Explanation:
For number 2 in the first array, the next greater number for it in the
second array is 3.
For number 4 in the first array, there is no next greater number for it in
the second array, so output -1.
Note:
●All elements in nums1 and nums2 are unique.
● The length of both nums1 and nums2 would not exceed 1000.
题目大意
这道题也是简单题。题目给出2个数组A和B，针对A中的每个数组中的元素，要求在B数组中找出
比A数组中元素大的数，B中元素之间的顺序保持不变。如果找到了就输出这个值，如果找不到就输出
-1。
解题思路
简单题，依题意做即可。
代码
package leetcode
func nextGreaterElement(nums1 []int, nums2 []int) []int {
if 1en(nums1) == 0 11 1en(nums2) == 0 {
return []int{}
res, reocrd, flag := []int{}, map[int]int{}, false
for i, v := range nums2 {
reocrd[v]= i
for i := 0; i  nums1[i]{
res = append(res, nums2[j])
flag = true
break
if flag == false {
res = append(res, -1)
---
## Page 569
return res
497.RandomPointinNon-overlappingRectangles
题目
Given a list of non-overlapping axis-aligned rectangles rects, write a function pick which
Note:
1. An integer point is a point that has integer coordinates.
3. i th rectangle = rects[i] = [xl, yl,x2,y2] , where [×1, y1] are the integer coordinates
of the bottom-left corner, and [x2, y2] are the integer coordinates of the top-right corner.
 paaxa sou saop aueas ppea jo yim pue yual 
5.1 >1
if so.arr[mid]>r{
if mid == 0 11 so.arr[mid-1]  0{
=r - so.arr[index-1]
length := so.rects[index][2]
- so.rects[index][o]
return []int{so.rects[index][o] + r%(length+l), so.rects[index][1] +
r/(1ength+1)}
}
/★
* Your Solution object will be instantiated and called as such:
obj := Constructor(rects);
*param_1:= obj.Pick(）;
498.DiagonalTraverse
题目
---
## Page 572
Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in
dliagonal order as shown in the below image.
Example:
Input:
[ 1, 2, 3 ],
[4, 5, 6 ]，
[7,8, 9]
Output:[1,2,4,7,5,3,6,8,9]
Explanation:
Note:
The total number of elements of the given matrix will not exceed 10,000.
题目大意
给定一个含有M×N个元素的矩阵（M行，N列），请以对角线遍历的顺序返回这个矩阵中的所有元
素，对角线遍历如下图所示。
---
## Page 573
说明：给定矩阵中的元素总数不会超过100000。
解题思路
·给出一个二维数组，要求按照如图的方式遍历整个数组。
·这一题用模拟的方式就可以解出来。需要注意的是边界条件：比如二维数组为空，二维数组退化为
一行或者一列，退化为一个元素。具体例子见测试用例。
代码
package leetcode
//解法一
func findpiagonalorderl(matrix [][]int) []int {
if matrix == ni1 111en(matrix) == 0 11 1en（matrix[0]） == 0 {
return nil
row, col, dir,i， x, y， d :=len(matrix)，len(matrix[o])，[2][2]int{
{-1, 1},
{1, -1},
3,0,0,0,0
total:= row * col
res := make([]int, total)
for i=0&&x= 0&& yo {
j--