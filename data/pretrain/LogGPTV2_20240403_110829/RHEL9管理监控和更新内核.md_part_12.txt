# []{#configuring-kdump-on-the-command-line_managing-monitoring-and-updating-the-kernel.html#running-kdump-on-systems-with-encrypted-disk_configuring-kdump-on-the-command-line}在使用加密磁盘的系统中运行 kdump {.title}
:::
当您运行 Linux
统一密钥设置(LUKS)加密分区时，系统需要特定的可用内存。如果系统可用内存量小于所需的可用内存量，则
`cryptsetup`{.literal}
实用程序无法挂载分区。因此，在第二个内核（捕获内核）中将
`vmcore`{.literal} 文件捕获到加密的目标位置会失败。
`kdumpctl 估算`{.literal} 命令可帮助您估算 `kdump`{.literal}
所需的内存量。它输出推荐的 `crashkernel`{.literal} 值，这是
`kdump`{.literal} 所需的最合适的内存大小。
建议的 `crashkernel`{.literal}
值根据当前的内核大小、内核模块、`initramfs`{.literal} 和 LUKS
加密的目标内存要求计算。
如果您使用自定义 `crashkernel`{.literal}
选项，`kdumpctl 估算会显示`{.literal} `LUKS 所需的大小`{.literal}
值。值是 LUKS 加密目标所需的内存大小。
::: orderedlist
**步骤**
1.  输出估计 `crashkernel`{.literal} 值：
    ``` screen
    # kdumpctl estimate
    Encrypted kdump target requires extra memory, assuming using the keyslot with minimum memory requirement
       Reserved crashkernel:    256M
       Recommended crashkernel: 652M
       Kernel image size:   47M
       Kernel modules size: 8M
       Initramfs size:      20M
       Runtime reservation: 64M
       LUKS required size:  512M
       Large modules: none
       WARNING: Current crashkernel size is lower than recommended size 652M.
    ```
2.  通过将 `crashkernel`{.literal} 增加到所需的值来配置所需的内存量。
    ``` screen
    # grubby –args=”crashkernel=652M” --update-kernel=ALL
    ```
3.  重启以使更改生效。
    ``` screen
    # reboot
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果 `kdump`{.literal} 服务仍无法将转储文件保存到加密目标，请逐渐增加
`crashkernel`{.literal} 值以配置适当数量的内存。
:::
:::
:::
[]{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html}
::: chapter
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel}第 12 章 支持的 kdump 配置和目标 {.title}
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#memory-requirements-for-kdump_supported-kdump-configurations-and-targets}kdump 的内存要求 {.title}
:::
为了使 `kdump`{.literal}
能够捕获内核崩溃转储并保存以便进一步分析，系统内存部分必须永久保留给捕获内核。保留时，主内核无法使用系统内存的这一部分。
内存要求因某些系统参数而异。主要因素之一就是系统的硬件构架。要找出确切的机器架构（如
Intel 64 和 AMD64，也称为 x86_64）并将其输出到标准输出，请使用以下命令：
``` screen
$ uname -m
```
下表列出了在最新可用版本中自动为 `kdump`{.literal}
保留内存大小的最低内存要求。根据系统构架和可用物理内存的大小更改。
::: table
[]{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#idm140150723263072}
**表 12.1. `kdump`{.literal}所需的最小保留内存量**
::: table-contents
  构架                                     可用内存          最小保留内存
  ---------------------------------------- ----------------- --------------
  AMD64 和 Intel 64 (`x86_64`{.literal})   1 GB 到 4 GB      160 MB RAM。
                                           4 GB 到 64 GB     192 MB RAM。
                                           64 GB 到 1 TB     256 MB RAM。
                                           1TB 及更多        512 MB RAM。
  64 位 ARM 架构 （`arm64`{.literal}）     2 GB 及更多       448 MB RAM。
  IBM Power 系统 (`ppc64le`{.literal})     2 GB 到 4 GB      384 MB RAM。
                                           4 GB 到 16 GB     512 MB RAM。
                                           16 GB 到 64 GB    1 GB RAM。
                                           64 GB 到 128 GB   2 GB RAM。
                                           128 GB 及更多     4 GB RAM。
  IBM Z (`s390x`{.literal})                1 GB 到 4 GB      160 MB RAM。
                                           4 GB 到 64 GB     192 MB RAM。
                                           64 GB 到 1 TB     256 MB RAM。
                                           1TB 及更多        512 MB RAM。
:::
:::
在很多系统中，`kdump`{.literal}
可以估算所需内存量并自动保留。默认情况下，此行为是启用的，但仅适用于内存总量超过特定数量的系统，这些内存因系统架构而异。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
根据系统中内存量保留的内存配置是最佳估算。实际需要的内存可能因其它因素（如
I/O 设备）而有所不同。使用内存不足将导致 debug 内核无法在内核 panic
的情况下作为捕获内核引导。要避免这个问题，请足够增大崩溃内核内存。
:::
::: itemizedlist
**其他资源**
-   [RHEL8 次要版本间 crashkernel
    参数有什么变化？](https://access.redhat.com/solutions/5907911){.link}
-   [技术能力和限制表](https://access.redhat.com/articles/rhel-limits++){.link}
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#minimum-threshold-for-memory-reservation_supported-kdump-configurations-and-targets}内存保留的最小阈值 {.title}
:::
`kexec-tools`{.literal} 程序默认配置 `crashkernel`{.literal}
命令行参数，并为 `kdump`{.literal}
保留特定内存量。要使默认内存保留正常工作，系统中必须有特定内存量。所需的内存量因系统架构而异。
下表列出了内存分配的最小阈值值。如果系统内存小于指定阈值，则必须手动配置内存。
::: table
[]{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#idm140150706594528}
**表 12.2. 内存保留所需的最小内存量**
::: table-contents
  构架                                     所需的内存
  ---------------------------------------- --------------------------------
  AMD64 和 Intel 64 (`x86_64`{.literal})   1 GB
  IBM Power 系统 (`ppc64le`{.literal})     2 GB
  IBM  Z (`s390x`{.literal})               1 GB ARM (`aarch64`{.literal})
:::
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#supported-kdump-targets_supported-kdump-configurations-and-targets}支持的 kdump 目标 {.title}
:::
当捕获内核崩溃时，vmcore
转储文件可以直接写入到设备中，作为文件存储在本地文件系统中，或者通过网络发送。下表包含
`kdump`{.literal} 支持或者明确不支持的转储目标的完整列表。
::: informaltable
  类型                                                              支持的目标                                                                                                                                                                不支持的目标
  ----------------------------------------------------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ----------------------------------------------------------------------------------------
  原始设备                                                          所有本地附加的原始磁盘和分区。                                                                                                                                             
  本地文件系统                                                      直接附加的磁盘驱动器、硬件 RAID 逻辑驱动器、LVM 设备以及 `mdraid`{.literal} 阵列中的 `ext2`{.literal}、`ext3`{.literal}、`ext4`{.literal} 和 `xfs`{.literal} 文件系统。   在此表中未明确列出的任何本地文件系统，包括 `auto`{.literal} 类型（自动文件系统检测）。
  远程目录                                                          使用 `NFS`{.literal} 或 `SSH`{.literal} 协议通过 `IPv4`{.literal} 访问的远程目录。                                                                                        使用 `NFS`{.literal} 协议访问的 `rootfs`{.literal} 文件系统上的远程目录。
  通过硬件和软件启动器使用 `iSCSI`{.literal} 协议访问的远程目录。   使用 `be2iscsi`{.literal} 硬件上的 `iSCSI`{.literal} 协议访问的远程目录.                                                                                                  基于多路径的存储。
                                                                                                                                                                                                                                              通过 `IPv6`{.literal} 访问的远程目录.
                                                                                                                                                                                                                                              使用 `SMB`{.literal} 或 `CIFS`{.literal} 协议访问的远程目录.
                                                                                                                                                                                                                                              使用 `FCoE`{.literal} （[*以太网光纤通道*]{.emphasis}）协议访问的远程目录。
                                                                                                                                                                                                                                              使用无线网络接口访问的远程目录。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
利用固件支持的转储 (`fadump`{.literal}) 捕获 vmcore，并使用 SSH 或 NFS
协议将其保存到远程机器中，这会导致网络接口重命名为
`kdump-`{.literal}。如果 ``{.literal}
是通用的，则会发生重命名，如 `*eth#`{.literal}、`net#`{.literal}
等。这是因为初始 RAM 磁盘 (`initrd`{.literal}) 中的 vmcore
捕获脚本在网络接口名称中添加 [*kdump-*]{.emphasis}
前缀来保护持久性命名。由于同一 `initrd`{.literal}
也用于常规启动，因此生产内核的接口名称也会更改。
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#supported-kdump-filtering-levels_supported-kdump-configurations-and-targets}支持的 kdump 过滤等级 {.title}
:::
要缩小转储文件的大小，`kdump`{.literal} 使用 `makedumpfile`{.literal}
内核收集器压缩数据，并选择性地省略不需要的信息。下表包含
`makedumpfile`{.literal} 实用程序目前支持的过滤级别的完整列表。
::: informaltable
  选项             描述
  ---------------- ----------
  `1`{.literal}    零页
  `2`{.literal}    缓存页
  `4`{.literal}    缓存私有
  `8`{.literal}    用户页
  `16`{.literal}   可用页
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`makedumpfile`{.literal} 命令支持删除透明大内存页和 hugetlbfs
页面。考虑这两种类型的大页用户页面，并使用 `-8`{.literal} 级别将其删除。
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#supported-default-failure-responses_supported-kdump-configurations-and-targets}支持的默认故障响应 {.title}
:::
默认情况下，当 `kdump`{.literal}
创建内核转储失败时，操作系统会重启。但是，您可以将 `kdump`{.literal}
配置为在将内核转储保存到主目标时执行不同的操作。下表列出了目前支持的所有默认操作。
::: informaltable
  选项                         描述
  ---------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `dump_to_rootfs`{.literal}   尝试将内核转储保存到 root 文件系统。这个选项在与网络目标合并时特别有用：如果网络目标无法访问，这个选项配置 kdump 以在本地保存内核转储。之后会重启该系统。
  `reboot`{.literal}           重启系统，这个过程会丢失 core 转储文件。
  `halt`{.literal}             关闭系统，这个过程会丢失 core 转储文件。
  `poweroff`{.literal}         关闭系统，这个此过程会丢失 core 转储。
  `shell`{.literal}            从 initramfs 内运行 shell 会话，允许用户手动记录核心转储。
  `final_action`{.literal}     在 `kdump`{.literal} 成功，或 `shell`{.literal} 或 `dump_to_rootfs`{.literal} 失败操作完成后，启用额外的操作，如 `reboot`{.literal}、`halt`{.literal} 和 `poweroff`{.literal} 操作。默认的 `final_action`{.literal} 选项为 `reboot`{.literal}。
  `failure_action`{.literal}   指定在内核崩溃时转储可能会失败时要执行的操作。默认 `failure_action`{.literal} 选项是 `重启`{.literal}。
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#using-final_action-parameter_supported-kdump-configurations-and-targets}使用 final_action 参数 {.title}
:::
`final_action`{.literal} 参数允许您在成功 `kdump`{.literal}
后使用某些额外的操作，如 `reboot`{.literal}、`停止`{.literal}，以及使用
`shell`{.literal} 或 `dump_to_rootfs`{.literal} 完成调用的
`failure_action`{.literal} 机制时关闭操作。``{.literal}如果未指定
`final_action`{.literal} 选项，则默认为 `reboot`{.literal}。
::: orderedlist
**步骤**
1.  要配置 `最终_action`{.literal}，请编辑 `/etc/kdump.conf`{.literal}
    文件并添加以下选项之一：
    ``` literallayout
    final_action 
    ```
2.  重启 `kdump`{.literal} 服务以使更改生效：
    ``` literallayout
    kdumpctl restart
    ```
:::
:::
::: section
::: titlepage
# []{#supported-kdump-configurations-and-targets_managing-monitoring-and-updating-the-kernel.html#proc_using-failure_action-parameter_supported-kdump-configurations-and-targets}使用 failure_action 参数 {.title}
:::
`failure_action`{.literal}
参数指定在内核崩溃时转储失败时要执行的操作。`failure_action`{.literal}
的默认操作是 `重启`{.literal}，这会重启系统。
`failure_action`{.literal} 指定执行以下操作之一：