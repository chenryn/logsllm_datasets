Stamp Out Hash Corruption, 
Crack All the Things! 
RyanReynolds,Manager,CroweHorwath,LLP
JonathanClaudius,SpiderLabsSecurityResearcher,Trustwave
July2012
Abstract 
ThiswhitepaperistoserveasasupportingreferencetotheDEFCON20talk,“Stamp
OutHashCorruption,CrackAlltheThings!”.Thefocusofboththepaperand
presentationistoshowhowanumberofWindowspasswordextractiontools–
CainandAble,Metasploit,Creddumpandmanyothers–yieldcorruptdatawhen
extractingpasswordhashesfromtheWindowsRegistry.Boththepaperandthe
presentationincludethediscoveryprocessandadetaileddescriptionofthe
problem,aswellasasolutionforobtainingthecorrecthashes.
Content Primer 
ThemotivationbehindobtainingpasswordhashesfromWindows‐basedsystemsis
verysimilartoobtainingpasswordhashesfromanyotheroperatingsystem,service
orapplication.Generallyspeaking,thefocusofthisprocessiseithertotransforma
hashintotheoriginalclear‐textversionofthepasswordortobeabletousethat
hashdirectly(perhapsviathepass‐the‐hashtechniqueinWindows)toeither
validatethesecurityofthepassworditselfortoescalateprivilegesinthecontextof
amalicioususer.
WhenreferringtoWindows‐basedpasswordhashes,therearetwodifferenthash
typesthatthispaperwillfocuson;LANManager(LM)‐stylehashesandNTLAN
Manager(NTLM)‐stylehashes.LMhashingistheolderofthetwohashing
algorithmsandcomeswithanumberofsecurityflaws:
 Passwordsarenotcase‐sensitive
 Passwordshaveamaximumlengthof14characters
 Passwordsaresplitintotwo7‐characterportions,eachofwhichishashed
separately,drasticallyreducingthenumberofpotentialhashkeys
 Hashesarenotindividuallysalted
NTLMhashing,beingthenewerofthetwoalgorithms,isstrongerthanLMhashing.
Iteliminatesthefirstthreeshortcomings,butitisstillnotindividuallysalted,
leavingbothalgorithmssusceptibletopre‐computeddictionaryattacks.
Twomethodsforextractingpasswordhasheswillbediscussed:memoryinjection
intotheLSASSprocessspace(“memoryinjection”)andreadingoftheSAMfromthe
WindowsRegistry(“registryreading”).
LSASSinjectionislikelythemostpopularmethodforobtainingWindowspassword
hashes,usingtoolssuchaspwdump6andfgdump2.1,andisgenerallyacceptedas
thetraditionalmethodofobtaininghashes.However,LSASSinjectiondoescome
withitsshareofshortcomings:
 Modernanti‐virus(AV)controlscommonlypreventthismethod
 PotentialtocauseacrashintheLSASSprocess
Registryreadingishistoricallylesspopularbuthasrecentlybeenconsidereda
preferredapproach,despitehavingbeenaroundforquitesometime
(approximately18years),becauseitovercomesanumberofissuespresentedby
thememoryinjectionmethod:
 ItistypicallynotobstructedbyAV,asregistryaccessisallowedaspartof
normalactivityonaWindowssystem
 ItdoesnotpresentthesystemstabilityconcernsofloadingforeignDLLsinto
thememoryofcriticalsystemprocesses
 Hashescanbeextractedfromsystemsthatarenotrunningbycopyingthe
appropriatehivefiles
Research Motivations 
Themotivationbehindthisresearchwastoidentifyandeliminatethesourceof
inconsistenciesinWindowshashesretrievedduringreal‐worldpenetration
assessments.
Duringassessments,passwordhasheswhereoftenobtainedbyusingtheregistry
readingmethod.Occasionally,though,extractedhasheswouldappearcorrupted–
theydidnotworkinpass‐the‐hashtechniquesandtheycouldnotbecracked,even
whenusingrainbowtables.However,whenrevertingtousingthememory
injectionmethod,asasanitycheck,entirelydifferenthasheswouldbereceivedfor
thesameaccounts.LMandNTLMhashesfromanexampleuserareprovidedbelow,
usingbothmethods.
4500a2115ce8e23a99303f760ba6cc96 (BAD LM HASH) 
  5c0bd165cea577e98fa92308f996cf45 (BAD NTLM HASH) 
Figure:1A(viaRegistryReadingMethod)
aad3b435b51404eeaad3b435b51404ee (LM HASH) 
  5f1bec25dd42d41183d0f450bf9b1d6b (NTLM HASH) 
Figure:1B(viaMemoryInjectionMethod)
Attemptstocrackthehashesextractedusingthememoryinjectionmethodwere
successfulinobtainingtheclear‐textpassword(“bananas”intheaboveexample).
Additionally,attemptstousethepass‐the‐hashtechniquetogainaccesstoother
systemswerealsosuccessful.Withthisunderstanding,itwasclearthatsomething
waswrongwiththeregistryreadingmethoddeployedbymanytools,causingthem
toyieldincorrecthashes.
Aspartofthisresearch,attemptsweremadetoidentifyotherindividualswhohad
experiencedsimilarissues.Thisledtothediscoveryofseveralpeoplewhohad
experiencedthisissuebeforeandtheidentificationofapre‐existingMetasploitBug
#4404,whichdescribesthesymptomsoftheissuedescribedabove.Thegoalofthis
researchwastocorrectthisproblemandpatchthetoolsthatareaffectedsothatthe
informationsecuritycommunitycanmorereliablyobtaincorrectpasswordhashes
inordertoassessthetruestateofagivensystem.
Detailed Technical Description 
Tounderstandthisissue,itisimportanttounderstandwherehashdataisstored,
howitisextractedandhowitisconvertedintousableLMandNTLMhashesthat
canbeprocessedbycrackingtoolssuchasJohntheRipper(JtR).
Theregistry’sSAMkey(areferencetotheSecurityAccountsManager)isthe
permanentstoragelocationofsecurityinformationforeachlocaluseronthe
system.
IntakingacloserlookattheSAMkey,akeyexistsforeachindividualuserunder
HKLM\SAM\SAM\Domains\Account\Users\.Undereachuser’skeyaretwo
registryvalues,“F”and“V”,eachcontainingbinarydatathatrepresentinformation
abouttheuser.The“F”keycontainsprimarilypolicyandauditinformation,suchas
lastlogon,passwordlastset,accountexpires,lastincorrectpassword,andpassword
expiration.
The“V”key–theoneofparticularinterest–containstheusername,fullname,
comments,homedirectory,hoursallowedandmostimportantlytheLMandNTLM
hashdatafortheuser.ItisimportanttonoteherethattheLMandNTLMhashdata
presentinthe“V”keyisnottheactualLMandNTLMhashes.Thisdataneedstobe
translatedintotheLMandNTLMhashformatsthroughaseriesofcryptographic
algorithms,whichareoutsidethescopeofthispaper,butareexplainedinmore
detailinBrendanDolan‐Gavitt’s2008blogposton“SysKeyandtheSAM”(See
References).
Hereisanexampleofthebinarydatastoredinboththe“F”and“V”keysforauser
thatisstoringLMandNTLMhashdata:
HKEY_LOCAL_MACHINE\sam\sam\domains\account\users\000003ED 
    F   REG_BINARY      020001000000000000000000000000000000000000000000998762B9 
F859CD010000000000000000A7BAABA7F859CD01ED03000001020000100200000000000002000000 
000000000000000000844400 
    V   REG_BINARY      00000000D400000002000100D40000000A00000000000000E0000000 
0A00000000000000EC0000000000000000000000EC0000000000000000000000EC00000000000000 
00000000EC0000000000000000000000EC0000000000000000000000EC0000000000000000000000 
EC0000000000000000000000EC0000000000000000000000EC00000015000000A800000004010000 
08000000010000000C01000014000000000000002001000014000000000000003401000004000000 
0000000038010000040000000000000001001480B4000000C4000000140000004400000002003000 
0200000002C014004400050101010000000000010000000002C01400FFFF1F000101000000000005 
070000000200700004000000000014005B03020001010000000000010000000000001800FF070F00 
0102000000000005200000002002000000001800FF070F0001020000000000052000000024020000 
00002400440002000105000000000005150000003FAD1462235F636B07E53B2BED03000001020000 
00000005200000002002000001020000000000052000000020020000740065007300740032000000 
740065007300740032000100FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5B3E6801020000 
07000000010001009AC412C7DA10C788963DF9DF7E6B5EF401000100B0FD8B04845B3E6836EC62ED 
D3EC84CA0100010001000100 
Figure:2A(LMandNTLMHashDataStored)
Asseeninfigure2A,thetexthighlightedinyellowistheLMandNTLMhashdata
thatatoolwouldneedtoreadandextractforthisuser.Hereisanotherexampleof
theexactsameuser,butwithLMstoragedisabled.
HKEY_LOCAL_MACHINE\sam\sam\domains\account\users\000003ED 
    F   REG_BINARY      020001000000000000000000000000000000000000000000D3680214 
F959CD010000000000000000A7BAABA7F859CD01ED03000001020000100200000000000002000000 
000000000000000000844400 
    V   REG_BINARY      00000000D400000002000100D40000000A00000000000000E0000000 
0A00000000000000EC0000000000000000000000EC0000000000000000000000EC00000000000000 
00000000EC0000000000000000000000EC0000000000000000000000EC0000000000000000000000 
EC0000000000000000000000EC0000000000000000000000EC00000015000000A800000004010000 
08000000010000000C01000004000000000000001001000014000000000000002401000004000000 
0000000028010000040000000000000001001480B4000000C4000000140000004400000002003000 
0200000002C014004400050101010000000000010000000002C01400FFFF1F000101000000000005 
070000000200700004000000000014005B03020001010000000000010000000000001800FF070F00 
0102000000000005200000002002000000001800FF070F0001020000000000052000000024020000 
00002400440002000105000000000005150000003FAD1462235F636B07E53B2BED03000001020000 
00000005200000002002000001020000000000052000000020020000740065007300740032000000 
740065007300740032000100FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5B3E6801020000 
070000000100010001000100B0FD8B04845B3E6836EC62EDD3EC84CA0100010001000100 
Figure:2B(OnlyNTLMHashDataStored)
AsseeninFigures2Aand2B,thecontentsstoredwithinVchanges,dependingon
whetheranLMhashispresentornot.
Whilethehashdatainfigures2Aand2Bhasbeenmanuallyfoundandhighlighted
fordemonstrationpurposes,toolsmustfollowamorerigorousprocesstoknow
whatsourcedatatotranslateintoactualhashes.
Anextractiontoolstartsbydeterminingthereadoffsetwithin”V”tofindthestartof
thehashdatasection.Thefollowingpseudo‐codeisusedtoreliablyfindthe
beginningofhashdatasection,alsoknownashashdataoffset:
1. Read156bytes(0x9c)intothedatastructure
2. Thenparsethenext4bytesasaninteger(X)
3. HashDataOffset=X+204bytes(0xCC)
Nowthatthehashdataoffsetisknownforaparticularuser,theremainderofthe
datain”V”,startingattheoffset,isconsideredthehashdatasection.Usingthe
aboveexamples(Figure2Aand2B),atoolreadsfromthehashdataoffsettotheend
ofthedatastructuresandisleftwiththefollowinghashdatasectionsrespectively:
010001009AC412C7DA10C788963DF9DF7E6B5EF401000100B0FD8B04845B3E6836EC62EDD3EC84CA010001
0001000100 (hash data section) 
Figure:3A(LMandNTLMHashDataStored)
0100010001000100B0FD8B04845B3E6836EC62EDD3EC84CA0100010001000100 (hash data section) 
Figure:3B(OnlyNTLMHashDataStored)
Theremainingdata(hashdatasection)forbothdatastructureschangewhenLM
hashdataisnotpresent.Asseeninfigures3Aand3B,thehashdataissimply
strippedawayandthestartandenddelineators(“01000100”)arestillpresent.
Thismeansthatinorderfortoolstoproperlyparsehashdatainbothscenarios,an
extractiontoolneedstomakeadecisionaboutwhetherornottheLMhashdatais
presentornot.Mostregistryextractiontools,inusetodayandincludedwithin
scopeofthisresearch,usethefollowingparsinglogic:
1. IfHashDataSection>40bytes(0x28)then
 lmoffset=HashDataOffset+4bytes(0x04)
 ntoffset=HashDataOffset+20bytes(0x14)
 ParseasifLMandNTLMhashdataarepresent
2. ElseIfHashDataSection>20bytes(0x14)then