-+--
---
## Page 208
194·第二部分故障诊断与性能优化篇
explain update/delete了，如图5-86所示。
新的名词Multi-Range Read出现了，优化器会先扫描索引，然后收集每行的主键，并对主
说，随机I/O的性能很差，很产生瓶颈，在MySQL5.6里，对这种情况进行了优化，一个
次在InnoDB引擎上支持全文索引，而且中文支持的还可以。图5-87是相应的截图。
键排序，此时就可以用主键顺序访问基表，即用顺序I/O代替了随机I/O。
在未开启MBR时，在explain中看到的情况是这样（如图5-88所示)。
在MySQL以前的版本，只有MyISAM引擎有全文索引fulltext，而在5.6版本里，首
mysql> explain urdate user set age=ll where name='h'.
在MySQL之前的版本中，explain只支持select，但在最新的5.6版本中，它支持
针对这两种情况，我们进行一下对比测试，如图5-90和图5-91所示。
开启MBR后，在explain中看到的情况是这样（如图5-89所示）。
对大表（基于辅助索引）做范围扫描时，会导致产生许多随机IO，而对于普通磁盘来
8.MySQL5.6InnoDB引擎支持全文索引
1 row in set (0.02 sec)
7.MySQL5.6支持explainupdate
9.
id|select_type | table | type | possible_keys
5.6. 5-m8
ysql>select seversion:
row in set (0.03 sec)
Qversion
1∣SIMPLE
MySQL5.6支持Multi-RangeRead索引优化
|user | range | PRIMARY, name, age
RROR:
ENGINE=
eate
query
title
tent
Iable:
show
specified
nt
品
图5-87ImnoDB支持全文索引
图5-86explain支持update
id
NULL
table
NCREMENT,
key
|key_len |ref |rows | Extra
1NULL|
1|Using where
---
## Page 209
可以明显地看到未开启MBR耗时1分47秒，开启MBR耗时0.34秒。
exnlain select * from t_06 where i2 >2000 and i2seleetversion()
row
versian()
type
range
select versionO
table
06
fron
tvpe
图5-90未使用MBR执行时间
图5-89
图5-88未使用MBR
图5-91开启MBR
possible
12>2000and i2
key
已使用MBR
key_len
4000
ref
len
1997
Using
index
Extrs
第5章性能调优·195
---
## Page 210
196·第二部分故障诊断与性能优化篇
所示)。
所示)。
这个特性是MySQL5.6新引进的，在解释该特性之前，先看下面的一个例子（如图5-97
rows in set (0.01 sec)
但是，如果是三个字段索引，则用不上索引合并（如图5-96所示）。
可以看到，在MySQL5.5中无法用到索引，优化后，仍旧只能用到一条索引（如图5-94
11.MySQL5.6支持IndexConditionPushdown索引优化
可以看到，两个索引一起用到了，这是因为采用了索引合并的方式。
再来看一下在MySQL5.6中的表现（如图5-95所示）。
先来看一下在MySQL5.5中索引的表现（如图5-92和图5-93所示）。
在MySQL5.6中，优化了合并索引，也就是说，
10.MySQL5.6优化了IndexMerge合并索引
select_type
INION
UNION RESULT
xplain
lect
（0.00sec）
.tvpe
table
table
rew in set 10.00 sec！
5.20-enterprise-eon
tvpe
type
图5-94or改为union优化
AL
图5-93执行计划全表扫描
possible_kevs
possible_keys
i_t_a,i_t_b
图5-92表结构
mmereial-advanced-1og
1**************************
NULL
key
key
，一条SQL可以用上两个索引了。
NULL
key_len
key_len
NULL
NULL
ref
const
ref
NULI
NULI
Isinz
t10
Lsing here
whe
---
## Page 211
row in set (0.04 sec)
这里class和score为联合索引。在MySQL5.5中的表现如图5-98所示。
ql> explain select * from t where a=1 or b=4 or c=18:
row inset [0.00 zec)
5.5.20-enterprise
ersion(）
SIMPLE
select_type
inaet (0.00 sec)
explain seleet*from student where class=1 and score
SIMPLE
seleet_type
0.03
table
table
student
type
ALL
l-advanced-log
range
ada1
heste
图5-96三个字段不能索引合并
possible_keys
OM
HG
class
in set (8.68 sec)
possible_keya
图5-98未使用ICP
图5-95索引合并
图5-97表结构
DEF
38 1389498 1
AULT
DEFAUL
Key
key
NULL
HULL
60,
NULL
kev_len
ref
NULL
YOW
第5章性能调优·197
Extra
Lsing whe
---
## Page 212
198·第二部分故障诊断与性能优化篇
描时，MySQL会按照数据的存储顺序依次读取数据块，每次读取的数据块首先会暂存在
户进程分配的内存。其包含如下几个参数：
5.6.1per_thread_buffers 优化
5.6my.cnf配置文件调优
库的整体性能。
以这里看到的是Using index condition，ICP减少了存储引擎访问表的次数，从而提高数据
的同时，会根据score>60进行过滤，然后检索的结果指向聚集索引，最后返回给用户，所
结果返回给用户。所以这里看到的是Using where。
class=1来查找记录，检索的结果将指向聚集索引，最后根据score>60进行过滤，把最终的
部数据读取结束后，再将buffer中的数据返回给上层调用者，以提高效率。
数据块，每次读取的数据块首先会暂存在read_buffer_size中，当buffer空间被写满或者全
况下进行全表扫描、全索引扫描等。在这种时候，MySQL会按照数据的存储顺序依次读取
的作用，不能在生产环境中运行，因此要对一些参数进行调整。比如，无法使用索引的情
最后要考虑的就是参数优化，MySQL数据库的默认设置性能非常差，仅仅起一个功能测试
Schema相似，查询语句的设计也会影响MySQL的性能，应该避免写出低效的SQL查询。
个糟糕的 Schema设计即使是在性能强劲的服务器上运行，也会表现出很差的性能。和
对于 per_thread_buffers，可以将其理解为 Oracle的PGA，为每个连接到 MySQL 的用
在MySQL数据库性能调优中，首先要考虑的就是Schema设计，这一点非常重要，
在MySQL5.6中，开启了IndexConditionPushdown（简称ICP），在class=1查找记录
在MySQL5.6中的表现如图5-99所示。
该参数用于表的顺序扫描，表示每个线程分配的缓冲区大小。比如，在进行全表扫
在MySQL5.5中，未开启IndexCondition Pushdown（简称ICP），所以首先会根据
1.read_buffer_size
x=lsin
leet._
(0.01
Fyi
see)
able
range
Lypt
IXSC
pussible_keys
图5-99已使用ICP
Csing index conditien. Esine MRR
---
## Page 213
是一个合适的选择。如果有很大的事务，可以适当增加这个缓存值，以获得更好的性能。
解决。比如，图5-101所示的这个例子：
过大，一般在128～256 KB 即可。一般出现Using join buffer的时候，要通过增加索引来
高性能，可用此参数增加每个线程分配的缓冲区大小。默认为128KB。这个参数不要设置
即可，这个参数不要设置过大。
要通过增加索引来解决。比如，图5-100所示的这个例子：
个参数不要设置过大，一般在128～256KB即可。另外，
filesort，为了提高性能，可用此参数增加每个线程分配的缓冲区大小。默认为2MB。这
个参数不要设置过大，一般在128～256KB即可。
字段做orderby排序操作时，就会利用这个缓冲区来暂存读取的数据。默认为256KB。这
256KB即可。
返回给上层调用者，以提高效率。默认为128KB。这个参数不要设置过大，一般在128～
read_buffer_size 中，
一般来说，如果数据库中没有什么大事务，写入也不是特别频繁，将其设置为1～2MB
表进行join连接操作时，如果关联的字段没有索引，会出现Using join buffer，为了提
该参数表示每个线程的堆栈大小。默认为192KB。如果是64位操作系统，设置为256KB
在表进行order by和group by排序操作时，由于排序的字段没有索引，会出现Using
5.join_buffer_size
3.sort_buffer_size
2. read_rnd_buffer_size
4.thread_stack
该参数用于表的随机读取，
row in set (0.02 sec)
nysql> explain select fron aa order by nane;
rowinset（0.03sec)
id
11SIMPLE
1|SIMPLE
select_type|
，当 buffer空间被写满或者全部数据读取结束后，再将 buffer中的数据
Iaa
table
table
IALL
index
，表示每个线程分配的缓冲区大小。比如，按照一个非索引
1NULL
图5-100排序执行计划
HULL
key
key
Ix name
key_len
，一般出现Usingfilesort的时候
ref
NULL
rows1
9|Using filesort
Extra
第5章性能调优·199
---
## Page 214
200
）·第二部分故障诊断与性能优化篇
buffer_size参数设置其可以使用的最大内存空间。默认为8MB，一般设置为16～64MB
者日志缓冲区写满）时，再将日志写到文件（或者同步到磁盘）中。可以通过innodb_log.
人 InnodbLog Buffer中，当满足innodb_flush_log_trx_commit 参数所设置的相应条件（或
息时，就应该适当地增加该参数的大小。一般设置为16MB即可。
MySQL错误日志中写警告信息，默认值是8MB，当发现错误日志中已经有相关的警告信
越多。如果InnoDB用光了这个池内的内存，InnoDB开始从操作系统分配内存，并且往
存的60%～70%。
出来的数据块，可以大大提高查询和更新数据的性能。它主要由以下几个参数组成：
5.6.2
connections
a
2rows in set(B.B3sec)
mysql> explain select aa. fron aa join bb on aa.name=bb.nane;
对于global_buffers，可以理解为Oracle 的 SGA，用于在内存中缓存从数据文件中检索
11 SIMNPLE
11 SIMPLE
事务日志所使用的缓冲区。InnoDB在写事务日志的时候，为了提高性能，先将信息写
该参数用来存储数据字典信息和其他内部数据结构。表越多，需要在这里分配的内存
(read_buffer_size+read_rnd_buffer_size+sort_buffer_size+thread_stack+join_buffer_size+binlog_cache_size)*max
3.innodb_log_buffer_size
2.innodb_additional_mem_pool_size
这个参数是InnoDB存储引擎的核心参数，默认为128MB，这个参数要设置为物理内
1.innodb_buffer_pool_size
上面介绍了各个参数的含义，再来看看per_thread_buffers 内存的计算公式，如下所示：
该参数用来设置最大连接数，默认为100。一般设置为512～1000即可。
7.max_connections
global_buffers 优化
select_type
 AL
I index I I8 name
25
图5-101表连接执行计划
keys|key
1 1Xx nane  33
11
key_len
|rous|Extra
9ing tae ustng idx
rows
Exte
---
## Page 215
size=0，下面是一个性能测试对比：
情况下，就要关闭它（query_cache_type=0），同时设置query_cache_size=0，query_cache_
QueryCache缓存的结果集就要随之刷新，频繁的刷新操作反而会使性能降低很多，在这种
有明显提升。
均会被转储清除。如果有某些表并不经常更改，而你又要对它执行大量的相同查询时，查
缓存中检索结果，而不是再次分析和执行这个同样的查询。
5.6.3QueryCache在不同环境下的使用
量很高时会造成内存溢出，系统死机。
注意
询缓存将是非常有用的。
文本与被传送到客户端的相应结果。如果之后接收到一个同样的查询，服务器将会从查询