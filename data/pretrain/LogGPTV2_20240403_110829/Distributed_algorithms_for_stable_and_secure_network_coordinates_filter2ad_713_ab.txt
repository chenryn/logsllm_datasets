errors, it does not stop updating its coordinates. The node still ob-
serves the errors of other nodes and reacts to the coordinates up-
dates of other nodes. Finally when all the nodes remove their error,
their coordinates will be stabilized. Therefore this model does not
require all the nodes to eliminate error simultaneously. It provides a
much more promising way for stabilizing network coordinates in a
distributed fashion while preserving overall coordinates accuracy.
The obvious remaining question is whether the idealized system
can be closely approximated in practice.
3.4 A Novel Algorithm for Coordinates
Stability
In this section, we introduce a novel algorithm that applies the
error elimination model to achieve coordinates stability.
3.4.1 The Algorithm
Overview - The idea of the algorithm is, during the embedding
procedure, each node monitors the local errors to its neighbors to
decide whether coordinates computation has converged. When the
node decides its coordinates has converged, the node starts to sta-
bilize its coordinates. At this stage, the node knows the remaining
errors for all its neighbor edges. When the node tries to stabilize its
coordinates, it does not stop the coordinates computation. Rather,
the node gradually drives out the remaining errors in the embed-
ding procedure by artiﬁcially adjusting the target delays to com-
pensate for the errors. During this procedure, a node still observes
the errors to its neighbors. If some of its neighbors have not con-
verged in their coordinates computations, the node can still adapt
to the neighbors’ coordinates updates and reduce the errors to these
neighbors. After all the nodes have eliminated the remaining er-
rors, all the coordinates can be stabilized naturally. Generally, this
algorithm can be applied to any decentralized network coordinates
systems. In this section, we speciﬁcally show how this algorithm
can be applied to the Vivaldi system.
Local error monitoring - The purpose of local error monitor-
ing is for each node to learn when its coordinates computation has
converged, and what is the remaining errors on its neighbor edges.
From this information, the node can decide when to stabilize its
coordinates and how much error should be eliminated in the sta-
bilizing procedure. For an arbitrary node A in the Vivaldi system,
A has N neighbors. During each round of its embedding proce-
dure, node A records four data items to monitor the status of its
embedding procedure: (1) The prediction error of the ith neighbor
i = predict_delay(A, i) − measured_delay(A, i)
(2) The weighted average error of the ith neighbor, which is deﬁned
to be
¯i = α ¯i + (1 − α)i
where α is the weight in computing the weighted average value,
which is set to 0.9. The ﬁrst two data items can be used to learn the
current remaining errors for all the neighbor edges in the embed-
ding procedure;
(3) The average error of all the neighbors
i=1 |i|
PN
 =
N
(4) The weighted average of the average neighbor error, which is
deﬁned to be
¯ = α¯ + (1 − α)
These two data items are used to monitor the convergence proce-
dure of A’s coordinates.
Stabilizing coordinates - To stabilize the network coordinates,
we deﬁne two states in the spring algorithm of the Vivaldi system:
)
s
m
(
s
n
b
s
0
1
n
i
i
t
n
e
m
e
v
o
m
s
e
t
a
n
d
r
o
o
c
i
50
40
30
20
10
Vivaldi
Stabilized Vivaldi
1
0.8
0.6
0.4
0.2
n
o
i
t
u
b
i
r
t
s
i
d
e
v
i
t
a
l
u
m
u
C
Vivaldi
Stabilized Vivaldi
e
g
a
r
e
v
A
0
500
1000
1500
Execution time(s)
2000
2500
0
0
1
2
3
Relative error
4
5
Figure 2: Performance of Stabilized Vivaldi in a PlanetLab experiment (a) Stability (b) Accuracy
(a)
(b)
i
)
s
m
(
s
n
b
s
0
1
n
i
t
n
e
m
e
v
o
m
e
t
a
n
d
r
o
o
c
e
g
a
r
e
v
A
i
140
120
100
80
60
40
20
0
0
Vivaldi
Stabilized Vivaldi
Vivaldi
Stabilized Vivaldi
1
0.8
0.6
0.4
0.2
n
o
i
t
u
b
i
r
t
s
i
d
e
v
i
t
a
u
m
u
C
l
200
400
800
Simulation time(s)
600
1000
1200
0
0
1
2
3
Relative error
4
5
Figure 3: Performance of Stabilized Vivaldi in a simulation experiment on p2psim data (a) Stability (b) Accuracy
(a)
(b)
the normal state and the stabilizing state. In the normal state, node
A just computes its coordinates normally as the original spring al-
gorithm. A needs to check its observation data items {i, ¯i, , ¯}
to decide whether its coordinates have converged. Many strategies
can be used to make the decision. Here, we just use a simple strat-
egy: if A ﬁnds ¯ cannot be decreased for L rounds, it decides the
coordinates have converged and enters the stabilizing state to stabi-
lize the coordinates.
In the stabilizing state, node A still updates its coordinates. How-
ever, A will compensate for the remaining error of each neighbor
edge to compute the coordinates. More speciﬁcally, in the stabi-
lizing state, A uses the compensated delay of all the neighbors to
compute the coordinates. For the ith neighbor,
compensated_delay(A, i) = measured_delay(A, i) + ¯i
Since node A only eliminates the weighted average error of its
neighbor edges, if one of its neighbor’s error changes rapidly, A
can still adapt to the changes. When all its neighbors’ errors are
stabilized, A will eliminate all these errors and stabilize its coordi-
nates.
3.4.2 Evaluation
We use both PlanetLab and simulation experiments to evaluate
the coordinates stability and accuracy after we apply the stabiliz-
ing algorithm to the Vivaldi system. The PlanetLab experiment
runs on 306 PlanetLab nodes, all nodes join simultaneously. To
avoid overloading the PlanetLab by continuous probings, the steps
of coordinates update are separated by a random delay of up to 5
seconds. Figure 2 shows the results for the PlanetLab experiment.
Figure 2 (a) shows that our stabilizing algorithm can completely
stabilize the coordinates within 1500 seconds. This translates to,
on average, it takes 154 steps for a node to stabilize its coordinates.
The result in Figure 2(b) shows that the stabilized coordinates have
the same accuracy as a snapshot of the Vivaldi coordinates in the
PlanetLab experiment. To show how the algorithm performs with
a larger number of nodes, we run a simulation experiment on the
p2psim data, which is a relatively large delay matrix with 1740
nodes. Again, all nodes join simultaneously. To make a compar-
ison possible, we keep the same methodology that adds a random
delay of up to 5 seconds between coordinates update steps. Fig-
ure 3 shows the coordinates stability and accuracy of the stabilized
Vivaldi system in the simulation experiment. From Figure 3(a), we
can see that, our stabilizing algorithm can completely stabilize the
network coordinates within 600 seconds. On average, it takes 126
steps for a node to stabilize its coordinates. The accuracy of the
stabilized coordinates is also the same as that of a snapshot of the
Vivaldi coordinates.
Note that the long 600 seconds and 1500 seconds stabilizing
times are mostly caused by the random delay (up to 5 seconds)
between coordinates update steps.
In practice, the update steps
can have smaller gaps, and nodes can stabilize their coordinates
much faster. Also, in PlanetLab, it takes longer to stabilize the co-
ordinates because some PlanetLab nodes are occasionally unreach-
able during our experiment (possibly due to high load). Our sys-
tem reacts to these failures automatically by updating affected Vi-
valdi nodes’ neighbor sets. These changes in neighbor sets lead to
changes in prediction errors, resulting in a longer stabilization time.
This experiment unexpectedly allows us to show that the stabiliz-
ing algorithm is able to maintain strong stability even with some
neighbor sets churn.
3.4.3 Adapting to Delay Changes
Two types of delay changes occur in practice:
the short-term
delay changes caused by queuing delays and the long-term delay
changes caused by network routing changes. Network coordinates
cannot adapt to the short-term delay changes because they can ex-
Median absolute error 
50
40
30
20
10
0
)
s
m
(
r
o
r
r
e
l
e
t
u
o
s
b
A
−10
0
20
40
60
Time (Hour)
80
100
Figure 4: The accuracy of Stabilized Vivaldi coordinates in
predicting dynamic delays among PlanetLab nodes. Error bar
shows 10%, median and 90% values.
pire quickly even before the network coordinates can converge in
adapting to them. Therefore, the strategy to deal with them is taking
the minimum RTT from multiple probes to ﬁlter out the short-term
ﬂuctuations in delay measurements.
Network coordinates should be able to adapt to long-term delay
changes caused by network routing changes. The original Vivaldi
system can adapt to network changes easily because coordinates are
recomputed and changed perpetually, but the coordinates instability
brings serious problems to applications. For stabilized Vivaldi sys-
tem, although the pattern of Internet delay changes is still unclear,
our PlanetLab experiment shows that the stabilized network coor-
dinates do not have to adapt to delay changes very frequently. In
our experiment, we deploy the stabilized Vivaldi system over Plan-
etLab nodes, and get a set of stabilized Vivaldi coordinates {Ci}.
After that, we continuously measure the delays among these Plan-
etLab nodes for 100 hours. Each edge is measured once per hour.
Figure 4 shows the 10 percentile, median, and 90 percentile abso-
lute error of {Ci} in predicting the dynamic delays among Plan-
etLab nodes at different time. The absolute error is deﬁned to be
|measured_delay − predicted_delay|. From this graph, we can
see that, the stabilized coordinates {Ci} have almost the same accu-
racy in predict dynamic delays within 100 hours. This result shows
that, after network coordinates are stabilized, they can be used for
a long time to predict dynamic delays accurately. Therefore, stabi-
lized network coordinates do not need to keep updating to adapt to
network changes. Different strategies can be used to adapt to delay
changes. One simple strategy is to adapt to delay changes by peri-
odical recomputation. The PlanetLab experiment result shows that,
the recomputation period can be set to a long time (in the magnitude
of days). Stabilized coordinates can also adapt to the delay changes
by on-demand triggered re-computation. After the coordinates are
stabilized, nodes can continue to observe its delays and errors to
other nodes. The system can trigger coordinates recomputation if
signiﬁcant error changes are detected.
However, the coordinates recomputation must be managed as a
system level behavior. Nodes cannot trigger the coordinates recom-
putation independently. The reason is that, different nodes may
have different clocks and observe different delay changes. If every
node handles coordinates recomputation independently, there will
always be some nodes recomputing their coordinates, which will
cause inherent instability in the system. A strategy is to use one
membership server to manage the members in the system, and con-
trol the coordinates recomputation. Since the membership server
only handle the registration messages from nodes and maintain a
member list, it will not have high overhead. The membership server
does not need to trigger the coordinates recomputation on all the
)
s
m
(
t
n
e
m
e
v
o
m
d
r
o
o
c
g
v
A
)
s
m
(
r
o
r
r
e
l
e
t
u
o
s
b
a
n
a
d
e
M
i
80
60
40
20
0
0
50
40
30
20
10
0
0
500
1000
1500
2000
2500
3000
3500
500
1000
1500
2500
Simulation time(s)
2000
3000
3500
Figure 5: Coordinates stability and accuracy of stabilized Vi-
valdi under network changes
nodes. It only need to trigger the recomputation on one or a small
number nodes. These small number of nodes can trigger the re-
computation of their neighbors, and the neighbors trigger the next
hop neighbors. The recomputation triggering can be piggybacked
on neighbor probing packets. Since each node typically has tens of
neighbors, the recomputation can be ﬂooded throughout the whole
system in very short time.
We set up a simulation experiment to demonstrate the coordi-
nates recomputation. We run stabilized Vivaldi system on 500
nodes that are randomly sampled from p2psim data. Each node
has 32 neighbors. Simple strategies are used for triggering coor-
dinates recomputation. If there is no dramatic delay changes, the
coordinates will be recomputed every 1000s. In this experiment, we
use small recomputation period in order to shorten the simulation