s y s c a l l ( open ,
. . . ) ;
L03 :
i f ( bit )
L04 :
s y s c a l l ( read ,
. . . ) ;
L05 :
else
L06 :
s y s c a l l ( write ,
. . . ) ;
L07 :
s y s c a l l ( close ,
. . . ) ;
L08 :
}
Pillar I: State Transitions
” Transitions ” :
{
”open” :
[ read ,
write ] ,
” read ” :
[ c l o s e ] ,
” write ” :
[ c l o s e ]
}
Pillar II: Origins
” Origins ” :
{
”open” :
[ L02 ] ,
” read ” :
[ L04 ] ,
” write ” :
[ L06 ] ,
” c l o s e ” :
[ L07 ]
}
Pillar III: Kernel Enforcement
i f
( ! t r a n s i t i o n p o s s i b l e ()
| |
! v a l i d o r i g i n ( ) )
terminate app ( ) ;
else
// execute
s y s c a l l
extract
install
1
Figure 1: The three pillars of SFIP on the example of a
function. The ﬁrst pillar models possible syscall transi-
tions, the second maps syscalls to their origin, and the
third enforces them.
For our ﬁrst pillar, we rely on the idea of a digraph
model from Wagner and Dean [65]. For our sycall-ﬂow-
integrity protection, we rely on a more efﬁcient construc-
tion and in-memory representation. In contrast to their
approach, we express the set of possible transitions not
as individual k-sequences, but as a global syscall ma-
trix of size N ×N, with N being the number of available
syscalls. We refer to the matrix as our syscall state ma-
chine. With this representation, verifying whether a tran-
sition is possible is a simple lookup in the row indicated
by the previous syscall and the column indicated by the
currently executing syscall. Even though the representa-
tion of the sequences differs, the set of valid transitions
remains the same: every transition that is marked as valid
in our syscall state machine must also be a valid transition
if expressed in the way discussed by Wagner and Dean.
Our representation has several advantages though, that
we explore in this paper, namely faster lookups (O(1)),
less memory overhead, and easier construction.
Our syscall state machine can already be used for
coarse-grained SFIP to improve the system’s security (cf.
Section 5.2). However, the second pillar, the validation
of the origin of a speciﬁc syscall, further improves the
provided security guarantees by adding additional, en-
forceable information. The basis for this augmentation is
the ability to map syscalls to the location at which they
can be invoked, independent of whether it is a bijective or
non-bijective mapping. We refer to the resulting mapping
as our syscall-origin mapping. For instance, our mapping
might contain the information that the syscall instruction
1 void foo(int bit, int nr) {
2
syscall(open, ...);
3
if(bit)
4
syscall(read, ...);
5
else
6
syscall(nr, ...);
7
bar(...);
8
syscall(close, ...);
9 }
10
Listing 1: Example of a dummy program with multiple
syscall-ﬂow paths.
located at address 0x7ffff7ecbc10 can only execute
the syscalls write and read. Neither unaligned execution
(e.g., in a ROP chain) nor code inserted at runtime is in
our syscall-origin mapping. Thus, syscalls can only be
executed at already existing syscall instructions.
The third pillar is the enforcement of the syscall state
machine and the syscall-origin mapping. Wagner and
Dean [65] proposed their runtime monitoring as a concept
for intrusion detection systems. There is still a domain
expert involved to decide on any further action [39]. In
contrast to monitoring, enforcement cannot afford false
positives as this immediately leads to the termination of
the application in benign scenarios. However, enforce-
ment provides better security than monitoring as immedi-
ate action is undertaken, completely eliminating the time
window for a possible exploit. Thus, by the use case of
SFIP, namely enforcement of syscall-ﬂow integrity, our
concept is more closely related to seccomp but harder to
realize than seccomp-based enforcement of syscalls.
3.3. Challenges
Previous automation work for seccomp ﬁlters outlined
several challenges for automatically detecting an appli-
cation’s syscalls [10]. While several works [10, 16, 24]
solve these challenges, none provides the full information
required for SFIP. The challenges of getting this miss-
ing information focus on precise syscall information and
inter- and intra-procedural control-ﬂow transfer informa-
tion. We illustrate the challenges using a simple dummy
program in Listing 1.
C1: Precise Per-Function Syscall Information
The
ﬁrst challenge focuses on precise per-function syscall
information.
This challenge must be solved for the
generation of the syscall state machine as well as the
sycall-origin map. For seccomp-based approaches, i.e., k-
sequence of length 1, an automatic approach only needs to
identify the set of syscalls within a function, i.e., the exact
location of the syscalls is irrelevant. This does not hold
for SFIP, which requires precise information at which
location a speciﬁc syscall is executed. Thus, we have to
detect that the ﬁrst syscall instruction always executes
the open syscall, the second executes read, and the third
syscall instruction can execute any syscall that can be
speciﬁed via nr. For the state machine generation, the pre-
cise information of syscall locations provides parts of the
information required to correctly generate the sequence of
syscalls. For the syscall-origin map, the precise informa-
tion allows generating the mapping of syscall instructions
to actual syscalls in the case where syscall numbers are
speciﬁed as a constant at the time of invocation.
C2: Argument-based Syscall Invocations
The second
challenge extends upon C1 as it concerns syscall loca-
tions where the actual syscall executed cannot be easily
determined at the time of compilation. When parsing the
function foo, we can identify the syscall number for all
invocations of the syscall function where the number is
speciﬁed as a constant. The exception is the third invoca-
tion, as the number is provided by the caller of the foo
function. As the call to the function, and hence the ac-
tual syscall number, is in a different translation unit than
the actual syscall invocation, the possibility for a non-
bijective mapping exists. Still, an automated approach
must determine all possible syscalls that can be invoked
at each syscall instruction.
C3: Correct Inter- and Intra-Procedural Control-Flow
Graph
Precise per-function syscall information on its
own is not sufﬁcient to generate syscall state machines due
to the non-linearity of typical code. Solving C1 and C2
provides the information which syscalls occur at which
syscall location, but does not provide the information on
the execution order. A trivial construction algorithm can
assume that each syscall within a function can follow
each other syscall, but this overapproximation leads to
imprecise state machines. Such an approach accepts a
transition from read to the syscall identiﬁed by nr as valid,
even though it cannot occur within our example function.
Therefore, we need to determine the correct inter- and
intra-procedural control-ﬂow transfers in an application.
The correct intra-procedural control-ﬂow graph allows
determining the possible sequences within a function. In
our example, and if function bar does not contain any
syscalls, it provides the information that the sequence of
syscalls open → read → close is valid, while open → nr
→ close (where nr ̸= read) is not.
Even in the presence of a correct intra-procedural
control-ﬂow graph, we cannot reconstruct the syscall state
machine of an application as information is missing on
the sequence of syscalls from other called functions. For
instance, if function bar contains at least one syscall, the
sequence of open → read → close is no longer valid.
Hence, we additionally need to recover the precise loca-
tion where control ﬂow is transferred to another function
Source Code
L01 :
void foo ( int
t e s t ) {
L02 :
scanf ( . . . ) ;
L03 :
i f ( t e s t )
L04 :
p r i n t f ( . . . )
L05 :
else
L06 :
s y s c a l l ( read ,
. . . ) ;
L07 :
int
ret = bar ( . . . ) ;
L08 :
i f ( ! ret )
L09 :
e x i t ( 0 ) ;
L10 :
return
ret ;
L11 :
}
Extracted Function Info
{
” Transitions ” :
{
”L03” :
[ L04 , L06 ] ,
”L04” :
[ L07 ] ,
”L06” :
[ L07 ]
”L08” :
[ L09 , L10 ]
}
” Call
Targets ” :
{
”L02” :
[ ” scanf ” ] ,
”L04” :
[ ” p r i n t f ” ] ,
”L07” :
[ ”bar” ] ,
”L09” :
[ ” e x i t ” ] ,
}
” S y s c a l l s ” :
{
”L06”
:
[ read ]
}
}
extract
1
Figure 2: A simpliﬁed example of the information that is ex-
tracted from a function. Transitions identiﬁes control-ﬂow
transfers between basic blocks, Call Targets the location
of a call to another function and the targets name, Syscalls
the location of the syscall and the corresponding syscall
number.
and the target of this control-ﬂow transfer. By combining
the inter- and intra-procedural control-ﬂow graph, the cor-
rect syscall sequences of an application can be modeled.
Constructing a precise control-ﬂow graph is known to
be a challenging task to solve efﬁciently [2, 31], espe-
cially in the presence of indirect control-ﬂow transfers.
These algorithms are often cubic in the size of the ap-
plication, which makes them infeasible for large-scale
applications. In the construction of the control-ﬂow graph
and, by extension, the generation of the syscall state ma-
chine and syscall-origin mapping, other factors, such as
aliased and referenced functions, must be considered as
well as functions that are passed as arguments to other
functions, e.g., the entry function for a new thread created
with pthread_create. Any form of imprecision can
lead to the termination of the application by the runtime
enforcement.
4. Implementation
In this section, we discuss our proof-of-concept imple-
mentation SysFlow and how we systematically solve
the challenges outlined in Section 3.3 to provide fully-
automated SFIP.
SysFlow
SysFlow automatically generates the state ma-
chine and the syscall-origin mapping while compiling an
application. As the basis of SysFlow we considered the
works by Ghavamnia et al. [24] and Canella et al. [10].
4.1. State-Machine Extraction
In SysFlow, the linker is responsible for creating the ﬁnal
state machine. The construction works as follows: The
linker starts at the main function, i.e., the user-deﬁned
entry point of an application, and recursively follows the
ordered set of control-ﬂow transfers. Upon encountering a
syscall location, the linker adds a transition from the previ-
ous syscall(s) to the newly encountered syscall. If control
ﬂow continues at a different function, the set of last valid
syscall states is passed to the recursive visit of the en-
countered function. Upon returning from a recursive visit,
the linker updates the set of last valid syscall states and
continues processing the function. During the recursive
processing, it also considers aliased and referenced func-
tions. A special case, and source of overapproximation,
are indirect calls, which we address with appropriate tech-
niques from previous works [10, 16, 23]. The resulting
syscall state machine and our support libarary are embed-
ded in the static binary. We discuss the support library in
more detail in Section 4.3.
Building the state machine requires that precise infor-
mation of the syscalls a function executes (C1) and a
control-ﬂow graph of the application (C3) is available
to the linker. Both the front- and backend are involved
in collecting this information. The frontend extracts the
information from the LLVM IR generated from C source
code, while the backend extracts the information from
assembly ﬁles. Figure 2 illustrates the information that is
extracted from a function.
Extracting Precise Syscall Information
In the fron-
tend, we iterate over every IR instruction of a function and
determine the used syscalls. In the backend, we iterate
over every assembly instruction to extract the syscalls.
Extracting the information in the front- and backend suc-
cessfully solves C1.
Extracting Precise Control-Flow Information
Recov-
ering the control-ﬂow graph (C3) in the frontend requires
two different sources of information: IR call instructions
and successors of basic blocks. The former allows track-
ing inter-procedural control-ﬂow transfers while the lat-
ter allows tracking intra-procedural transfers. For inter-
procedural transfers, we iterate over every IR instruction
and determine whether it is a call to an external function.
For direct calls, we store the target of the call; for indirect
calls, we store the function signature of the target function.
In addition, we also gather information on referenced and
aliased functions, as well as functions that are passed as
arguments to other functions. For the intra-procedural
transfers, we track the successors of each basic block.
In the backend, we perform similar steps, although on
a platform-speciﬁc assembly level. Extracting this in-
formation in the front- and backend successfully solves
C3.
4.2. Syscall-Origin Extraction
In SysFlow, the linker also generates the ﬁnal syscall-
origin mapping. The mapping maps all reachable syscalls
to the locations where they can occur. We extract the
information as an offset instead of an absolute position to
facilitate compatibility with ASLR. The linker requires
precise information of syscalls, i.e., their offset relative
to the start of the encapsulating function, and a precise
call graph of the application. Both the front- and backend
are responsible for providing this information. Figure 3
illustrates the extraction. From the frontend, the syscall
information generated by the state machine extraction