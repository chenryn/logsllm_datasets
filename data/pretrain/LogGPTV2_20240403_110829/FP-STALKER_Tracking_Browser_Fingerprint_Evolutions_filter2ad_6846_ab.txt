98, 598 ﬁngerprints from 1, 905 browser instances. All fol-
lowing graphs and statistics are based on this ﬁnal dataset.
Figure 1 presents the number of ﬁngerprints and distinct
browser instances per month over the two year period.
Most users heard of our extensions through posts published
on popular tech websites, such as Reddit, Hackernews or
Slashdot. Users install the extension to visualize the evolution
Fig. 1: Number of ﬁngerprints and distinct browser instances
per month
Fig. 2: Browser ﬁngerprint anonymity set sizes
of their browser ﬁngerprints over a long period of time, and
also to help researchers understand browser ﬁngerprinting in
order to design better countermeasures. We explicitly state
the purpose of the extension and the fact it collects their
browser ﬁngerprints. Moreover, we received an approval from
the Institutional Review Board (IRB) of our research center
for the collection as well as the storage of these browser ﬁn-
gerprints. As a ground truth, the extension generates a unique
identiﬁer per browser instance. The identiﬁer is attached to all
ﬁngerprints, which are automatically sent every 4 hours. In
this study, the browser ﬁngerprints we consider are composed
of the standard attributes described in Table I.
Figure 2 illustrates the anonymity set sizes against the
number of participants involved in this study. The long tail
reﬂects that 99 % of the browser ﬁngerprints are unique among
all the participants and belong to a single browser instance,
while only 10 browser ﬁngerprints are shared by more than 5
browser instances.
b) Evolution triggers: Browser ﬁngerprints naturally
evolve for several reasons. We identiﬁed the following cat-
egories of changes:
Automatic evolutions happen automatically and without di-
rect user intervention. This is mostly due to automatic
software upgrades, such as the upgrade of a browser or a
plugin that may impact the user agent or the list of
plugins;
Context-dependent evolutions being caused by changes in
the user’s context. Some attributes, such as resolution
or timezone, are indirectly impacted by a contextual
change , such as connecting a computer to an external
screen or traveling to a different timezone; and
730
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: Durations the attributes remained constant for the
median, the 90th and the 95th percentiles.
Attribute
Resolution
User agent
Plugins
Fonts
Headers
Canvas
Major
browser version
Timezone
Renderer
Vendor
Language
Dnt
Encoding
Accept
Local storage
Platform
Cookies
Automatic/User
Trigger
Context
Automatic
Automatic
Automatic
Automatic
Automatic
Context
Automatic
Automatic
User
User
Automatic
Automatic
Automatic
User
User
Percentile (days)
95th
90th
50th
1.8
3.1
Never
8.4
13.0
39.7
8.7
12.2
44.1
5.4
11.8
Never
14.9
34.1
308.0
17.2
35.3
290.0
23.5
33.3
52.2
26.8
53.8
206.3
30.3
81.2
Never
48.6
107.9
Never
56.7
215.1
Never
57.0
171.4
Never
60.5
106.1
Never
109.5
163.8
Never
320.2
Never Never
Never Never Never
Never Never Never
User-triggered evolutions that require an action from the
user. They concern conﬁguration-speciﬁc attributes, such
as cookies, do not track or local storage.
To know how long attributes remain constant and if their
stability depends on the browser instance, we compute the
average time, per browser instance, that each attribute does
not change. Table II presents the median, the 90th and 95th
percentiles of the duration each attribute remains constant, on
average, in browser instances. In particular, we observe that the
User agent is rather unstable in most browser instances as
its value is systematically impacted by software updates. In
comparison, attributes such as cookies, local storage
and do not track rarely change if ever. Moreover, we
observe that attributes evolve at different rates depending on
the browser instance. For example, canvas remains stable for
290 days in 50% of the browser instances, whereas it changes
every 17.2 days for 10% of them. The same phenomena can
be observed for the screen resolution where more than
50% of the browser instances never see a change, while 10%
change every 3.1 days on average. More generally this points
to some browser instances being quite stable, and thus, more
trackable, while others aren’t.
c) Evolution frequency: Another key indicator to ob-
serve is the elapsed time (Et) before a change occurs in
a browser ﬁngerprint. Figure 3 depicts the cumulative dis-
tribution function of Et for all ﬁngerprints (blue), or aver-
aged per browser instance (orange). After one day, at least
one transition occurs in 45.2 % of the observed ﬁngerprints.
The 90th percentile is observed after 13 days and the 95th
percentile after 17.3 days. This means the probability that
least one transition occurs in 13 days is 0.9 (blue). It
at
is important to point out that changes occur more or less
frequently depending on the browser instance (orange). While
some browser instances change often (20% change in less
than two days) others, on the contrary, are much more stable
(23% have no changes after 10 days). In this context, keeping
pace with the frequency of change is likely a challenge for
browser ﬁngerprint linking algorithms and, to the best of our
knowledge, has not been explored in the state of the art.
d) Evolution rules: While it is difﬁcult to anticipate
browser ﬁngerprint evolutions, we can observe how individual
Fig. 3: CDF of the elapsed time before a ﬁngerprint evolution
for all the ﬁngerprints, and averaged per browser instance.
attributes evolve. In particular, evolutions of the User agent
attribute are often tied to browser upgrades, while evolutions
of the Plugins attribute refers to the addition, deletion or
upgrade of a plugin (upgrades change its version). Neverthe-
less, not all attribute changes can be explained in this manner,
some values are difﬁcult to anticipate. For example, the value
of the canvas attribute is the result of an image rendered by
the browser instance and depends on many different software
and hardware layers. The same applies, although to a lesser
extent, to screen resolution, which can take unexpected
values depending on the connected screen. Based on these
observations, the accuracy of linking browser ﬁngerprint evo-
lutions depends on the inference of such evolution rules. The
following section introduces the evolution rules we ﬁrst iden-
tiﬁed empirically, and then learned automatically, to achieve
an efﬁcient algorithm to track browser ﬁngerprints over time.
IV. LINKING BROWSER FINGERPRINTS
FP-STALKER’s goal
is to determine if a browser ﬁn-
gerprint comes from a known browser instance—i.e., it is
an evolution—or if it should be considered as from a new
browser instance. Because ﬁngerprints change frequently, and
for different reasons (see section III), a simple direct equality
comparison is not enough to track browsers over long periods
of time.
In FP-STALKER, we have implemented two variant al-
gorithms with the purpose of linking browser ﬁngerprints,
as depicted in Figure 4. The ﬁrst variant
is a rule-based
algorithm that uses a static ruleset, and the second variant is
an hybrid algorithm that combines both rules and machine
learning. We explain the details and the tradeoffs of both
algorithms in this section. Our results show that the rule-based
algorithm is faster but the hybrid algorithm is more precise
while still maintaining acceptable execution times. We have
also implemented a fully random forest-based algorithm, but
the small increase in precision did not outweigh the large
execution penalty, so we do not present it further in this paper.
A. Browser ﬁngerprint linking
When collecting browser ﬁngerprints, it is possible that
a ﬁngerprint comes from a previous visitor—i.e., a known
browser instance—or from a new visitor—i.e., an unknown
browser instance. The objective of ﬁngerprint linking is to
731
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
match ﬁngerprints to their browser instance and follow the
browser instance as long as possible by linking all of its
ﬁngerprint evolutions. In the case of a match, linked browser
ﬁngerprints are given the same identiﬁer, which means the
linking algorithm considers they originate from the same
browser instance. If the browser ﬁngerprint cannot be linked,
the algorithm assigns a new identiﬁer to the ﬁngerprint.
More formally, given a set of known browser ﬁngerprints
F , each f ∈ F has an identiﬁer f.id that links to the browser
instance it belongs to. Given an unknown ﬁngerprint fu /∈ F
for whom we ignore the real id, a linking algorithm returns
the browser instance identiﬁer fk.id of the ﬁngerprint fk that
maximizes the probability that fk and fu belong to the same
browser instance. This computation can be done either by
applying rules, or by training an algorithm to predict this
probability. If no known ﬁngerprint can be found, it assigns
a new id to fu. For optimization purposes, we only hold and
compare the last ν ﬁngerprints of each browser instance bi in
F . The reason is because if we linked, for example, 3 browser
ﬁngerprints fA, fB and fC to a browser instance bi then,
when trying to link an unknown ﬁngerprint fu, it is rarely
useful to compare fu to the oldest browser ﬁngerprints of bi.
That is, newer ﬁngerprints are more likely to produce a match,
hence we avoid comparing old ﬁngerprints in order to improve
execution times. In our case we set the value of ν to 2.
B. Rule-based Linking Algorithm
The ﬁrst variant of FP-STALKER is a rule-based algorithm
that uses static rules obtained from statistical analyses per-
formed in section III. The algorithm relies on rules designed
from attribute stability presented in Table II to determine if an
unknown ﬁngerprint fu belongs to the same browser instance
as a known ﬁngerprint fk. We also deﬁne rules based on
constraints that we would not expect to be violated, such as,
a browser’s family should be constant (e.g., the same browser
instance cannot be Firefox one moment and Chrome at a
later time), the Operating System is constant, and the browser
version is either constant or increases over time. The full list
of rules are as follow:
1) The OS, platform and browser family must be
identical for any given browser instance. Even if this
may not always be true (e.g. when a user updates from
Windows 8 to 10), we consider it reasonable for our
algorithm to lose track of a browser when such a large
change occurs since it is not frequent.
2) The browser version remains constant or increases
over time. This would not be true in the case of a
downgrade, but this is also, not a common event.
3) Due to the results from our statistical analyses, we have
deﬁned a set of attributes that must not differ between two
ﬁngerprints from the same browser instance. We consider
that local storage, Dnt, cookies and canvas
should be constant for any given browser instance. As
observed in Table II, these attributes do not change often,
if at all, for a given browser instance. In the case of
canvas, even if it seldomly changes for most users (see
Table II , the changes are unpredictable making them
hard to model. Since canvas are quite unique among
browser instances [14], and don’t change too frequently, it
(a) Rule-based variant of FP-STALKER. Uses a set of
static rules to determine if ﬁngerprints should be linked
to the same browser instance or not.
(b) Hybrid variant of FP-STALKER. The training phase is used to learn the
probability that two ﬁngerprints belong to the same browser instance, and the
testing phase uses the random forest-based algorithm to link ﬁngerprints.
Fig. 4: FP-STALKER: Overview of both algorithm variants.
The rule-based algorithm is simpler and faster but the hybrid
algorithm leads to better ﬁngerprint linking.
is still interesting to consider that it must remain identical
between two ﬁngerprints of the same browser instance.
4) We impose a constraint on fonts: if both ﬁngerprints have
Flash activated—i.e. we have a list of fonts available—
then the fonts of fu must either be a subset or a superset
of the fonts of fk, but not a disjoint set. That means that
between two ﬁngerprints of a browser instance, it will
allow deletions or additions of fonts, but not both.
5) We deﬁne a set of attributes that are allowed to
change, but only within a certain similarity. That
means that
their values must have a similarity ra-
tio > 0.75, as deﬁned in the Python library func-
tion difflib.SequenceMatcher().ratio. These
attributes are user agent, vendor, renderer,
plugins, language, accept, headers. We allow
at most two changes of this kind.
6) We also deﬁne a set of attributes that are allowed to
change, no matter their value. This set is composed of
resolution, timezone and encoding. However,
we only allow one change at the same time among these
three attributes.
7) Finally, the total number of changes from rules 5 and 6
must be less than 2.
732
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:32:59 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1 Rule-based matching algorithm
function FINGERPRINTMATCHING(F, fu)
rules = {rule1, ..., rule6}
candidates ← ∅
exact ← ∅
for fk ∈ F do
if VERIFYRULES(fk, fu, rules) then
if nbDif f = 0 then
exact ← exact ∪ (cid:6)fk(cid:7)
candidates ← candidates ∪ (cid:6)fk(cid:7)
else
end if
end if
return exact[0].id
end for