表12-3
数绑定100次
for
class A:
bound_1.py
a.f()
def f(self):
AO
in range(100):
不同函数调用方式对应的绑定次数
pass
(staticmethod)
(g)
函数绑定1次
a=A()
class A:
func(10)
for i in range(100)
bound_2.py
def f(self);
pass
---
## Page 341
descr_get.
NAME2”将符号“g”和这个staticmethod对象关联了起来。
也是一
statieInt sm_init(Pyobject *self. Pyobject *args
[funcobject.c]
为sm_init：
[funcobject.c]
始化过程将在后面的章节中详细剖析），从图12-30可以看到，它其实是一个class对
象
个与符号“staticmethoa”对应的对象，这个对象在Python启动并进行初始化时设置（初
[funcobject.a]
type)
staticmethod;
再仔细地考察PyStaticMethod_Type，发现这里创建的 staticmethoa对象实际上
非常清晰，
在申请完内存之后，Python虚拟机还会调用_init_进行初始化的动作，:
PyObject
，在初始化时，作为参数的原来“g”对应的那个PyFunctionobject被赋
*sm_eallable;
smadescr_getIPyobject *self,Pyobjeet *obj,PyObject
*sm=(staticmethod *)self;
图12-30
buitin名字空间中的“staticmethod”
tstaticmethodt>
"ataticmethod,l,,&callable))
Python源码剖析
12.6
千变万化的descriptor
一深度探索动态语言核心技术
Pyobject*kwds)
311
---
## Page 342
Python源码剖析
312
剖析初识descriptor时遇见的那个pywrapperDescrobject，有兴趣的读者可以自行分析
如classmethod、property都是应用descriptor的例子，而且，到目前为止，我们也没有再
对应的那个PyFunctionobject对象。
所以会调用其_get操作（sm_descr_get），直截了当地返回其中保存的最开始与“g”
象访问（A.g），由于“g”是一个位于class对象的tp_dict中的descriptor：
一下。
第12章Python虚拟机中的类机制
一深度探索动态语言核心技术
---
## Page 343
Python高级话题
第3部分
---
## Page 344
高no
---
## Page 345
13.1.1
13.1
出两个关键的数据结果以及对Python运行模型的图示。
型，或者说线程模型，在第8章中，我们曾详细地介绍了这个线程模型。在此，我们仅列
当然还有其他许多工作，在本章以后的描述中我们将深入考察这些工作。
如_builtin_
有太多的意义，所以我们对Python运行时环境初始化的剖析也从py_InitializeEx开始。
之前，Python已经做了很多繁琐的工作，但是这些工作对于理解Pyhon的运行环境并没
Initialize中，仅有一个函数被调用，即函数py_InitializeEx。尽管在ry_Initialize
作之后，也就能对Pyhon执行引擎执行字节码指令时的整个运行环境了如指掌了。
迹，完整地展示Pyhon在启动之初的所有动作。当我们跟随Pyhon完成所有的初始化动
我们将回到时间的起点，从Pyton应用程序被执行开始，一步一步紧紧跟随Pyhon的踪
[pystate.h]
完整地理解Pyton运行时的行为还不够，还有一部分内容被遮在了大幕后边。在这一章，
typedet
但是在进入对Pyon初始化流程的跟踪之前，我们需要先复习一下Python的运行模
在Py_InitializeEx中，所完成的一个重要的工作就是加载多个基础的module，比
Pyhon 启动之后，真正有意义的初始化动作是从py_Initialize开始的。在Py
线程模型回顾
线程环境初始化
我们现在已经完成了对Python的核心一
strucb
，sys等，同时也会完成Python类型系统的初始化和异常系统的初始化，
18
Python运行环境初始化
Python源码剖析
一字节码虚拟机一
一深度探索动态语言核心技术
一的剖析工作，然而对于
第
CHAPTER
3
---
## Page 346
316
Python源码剖析
13.1.2
图13-1则展示了Python虚拟机运行期间某个时刻整个的运行环境。
PyInterpreterState_New创建一个崭新的 PyInterpreterState对象。
同样，在Python 中也是如此，在Py_InitializeEx的开始处，Python会首先调用
typedef struet
PyInterpreterStatePyInterpreterstate_New(void)
static PyinterpreterState interp_head =NULL;
[pystate.c]
for(n)
PyThreadstate;
PyInterpreterState:
第13章
在Win32平台上，当执行一个可执行文件时，操作系统首先会创建一个进程内核对象。
PyFrameObject（栈帜）
PyThreadState(线程）
Pylnterpreter(进程）
执行引擎（CPU）
longthread Id;
PyInterpreterstate *interp;
struct
Pyobject
Pyobject
Pyobiect
struet
int recursion_depth:
StRuet
初始化线程环境
一深度探索动态语言核心技术
_ts *tatate_head;
Python运行环境初始化
wbuiltinsi
*modules;
图13-1
fback
f_back
frame
tstate_head
1/模拟线程中的函数调用堆栈
某个时刻Python运行时的整个环境
//模拟进程环境中的线程集合
8
next
next
---
## Page 347
代码清单13-1
13-1)
用PyThreadState_New创建一个全新的ryThreaaState（线程状态）对象（见代码清单
[pystate.c]
态对象
对操作系统上多进程的模拟，对于多进程，这里我们不过多深入。
形成一个链表结构，而这个表头就是interp_head。这其实就是如图13-1所示的Python
可以断定在Python运行的时候，可能会有一组PyInterpreterState对象通过next指针
在创建了PyInterpreterState（进程状态）对象之后，Python会立即再接再厉，调
在pyInterpreterstate_New函数完成之后，我们得到了如图13-2所示的解释器状
在Python的运行时环境中，有一个全局的管理PyInterpreterState对象链表的东
return interp;
PyInterpreterstate *interp =malloc(sizeof(PyInterpreterState)):
HEAD_UNILOCK(）
interp->modules=
HEAD_INIE()
(interp
interg
interp-
interp->codee_search_path
interp->tstate_head
interp.
>codec_
codeo_error_zegistry
NULL
图13-2
interp;
search_cache=NUuL;
NULL:
NULL:
新建的PylnterpreterState对象
NLILL
errorregistry
Python源码剖析
search_cache
tstate_head
interp_head
=NULL;
searchupath
modules
bulltins
next
13.1
一深度探索动态语言核心技术
线程环境初始化
317
---
## Page 348
Python源码剖析
318
数调用栈也就是pyFrameobject对象链表。
State对象，并对其中各个域进行初始化。我们注意到，在pyThreaastate结构体中，
起了联系，
现有关。
一个PyThreadState对象的列表，用脚趾头我们也能想到这肯定和Python中多线程的实
也存在着一个next指针，肯定在Pyton运行的某个时刻，会如图13-1所示的那样，存在
在代码清单13-1的[1]处，Pyhon设置了从线程中获得函数调用栈的方法，所谓的函
注意，
第13章
zeturm tstate;
(tstateI=NULE）(
1/[1]：设置获得线程中函数调用栈的操作
HEAD UNLOCK()
tstate->next= interp->tstate_head;
tstate->interp =interp;
（PyThreadstate_GetFrame = NULL)
，对应到Win32上，我们可以说，在[2]和[3]处，进程和线程之间建立起了联系。
tstate->threaa_id=PyThread_get_thread_ident();
在代码清单13-1的[21和[3]处，Python到目前为止创建的仅有的两个对象建立
深度探索动态语言核心技术
图13-3在PylnterpreterState与PyThreadState之间建立联系
ULL
Python运行环境初始化
Srane
Finterp
error_registry
search.cache
search_path
Istate_hesdi
interphead
buittins
modules
sysdict
next
NUL
=threadstate_getframe:
PyThreadState_Curenti=NULl
tstate
threadid
interp
pyhon.exa的线程d
---
## Page 349
建立了联系。接下来，Py_InitializeEx将进入另一个相对独立的环节：设置系统module。
进程和线程概念的 PyInterpreterState对象和 pyThreadstate对象，并且在它们之间
就不去深究这些初始化了，有兴趣的读者可以收拾兵马，杀将进去
New创建一个新的pyFrameobject对象时将发挥作用，这里我们暂时不去管它。
化我们在剖析Pyihon中的整数对象时看到的那个庞大的整数对象系统。当然，这里我们
的动作，在介绍Python的类机制时，我们已经详细剖析了。
Py_InitializeEx中调用_Py_ReadyTypes时开始的。类型系统的初始化是一套相当繁复
会以该PyThreadstate对象调用PyThreadState_Swap函数来设置这个全局变量：
量为NULL，如图13-3所示在创建了Python启动后的第一个Pyhreadstate对象之后，
前活动的线程，更准确地说是当前活动线程对应的pymreadstate对象，初始时，该变
Python的运行时环境中，有一个全局变量_pyThreadstate_Current，这个变量维护着当
就能够很容易地在PyInterpreterState对象和PyThreadState对象之间穿梭往返。在
static Pyohiect *builtin_object,
两个变量所指向的对象。
[frameobject.c]
PyThreaastate* PyThreadstate_Swap(PyThreadstate *new)
nt
[pyatate.c]
在PyInterpreterState对象和PyThreaaState对象建立了这样的联系之后，我们
好了，到这里，我们的 Py_InitializeEx有了一个阶段性的成果。我们创建了代表
这个内容为“_builtins_的PyStringobject对象bui1tin_object在pyFrame
_PyFrameInit(）
随后，在Py_InitializeEx中，接下来的动作是调用_pyFrame_Init来设置全局变
在此之后，Python还会初始化一些其他边边角角的东西，比如在_PyInt_Init中初始
retuzn (builtin_objectt= NuLL)
builtin_object=Pystring_InternFromString(*bufltIns)
接着，Python的初始化动作开始转向Python类型系统的初始化，这个转折是在
return old;
注意，在图13-3中，虚线箭头表示在函数PyThreadState_New中nterp和tstate
PyThreadstate
PyThreadState_Current