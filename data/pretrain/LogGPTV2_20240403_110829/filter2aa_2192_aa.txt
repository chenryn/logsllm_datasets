# Under the iHood
## DEFCON 16
### Cameron Hotchkies (PI:EMAIL)

---

## About Me
- **Current Role:** Work at TippingPoint’s Digital Vaccine Labs
- **Responsibilities:**
  - Vulnerability discovery
  - Patch analysis
  - Product security
- **Stay Updated:** [http://dvlabs.tippingpoint.com](http://dvlabs.tippingpoint.com)
- **Author and Contributor to:**
  - PaiMei Reverse Engineering Framework
  - Absinthe SQL Injection tool
- **Side Projects:**
  - XSO - OS X Reversers: [http://0x90.org/mailman/listinfo/xso](http://0x90.org/mailman/listinfo/xso)

---

## Talk Outline
1. File Formats
2. Tools
3. Common Disassembly Patterns
4. Carbon
5. Objective-C
6. Case Study (Mac vs. Windows)

---

## Applications in macOS
- **Storage Structure:** Applications in macOS are stored in a directory structure known as bundles or packages.
- **Finder Behavior:** The Finder treats any directory ending in `.app` as a single entity, containing the binary and all necessary resources.

---

## Application Directory Structure
- **Info.plist:**
  - **Format:** XML or binary-based list of application properties.
  - **Contents:** Major and minor version numbers, icon names, etc.
  - **Documentation:** Well-documented by Apple.
  - **Tool:** Use `plutil` to convert between XML and binary formats.
  - **Note:** "The plutil command obeys no one’s rules but its own."

- **PkgInfo:**
  - **Indicator:** APPL indicates an Apple application bundle.
  - **Content:** No relevant information in the file.
  - **Structure:** 4-byte package type followed by a 4-byte signature.

- **Mach-O:**
  - **Description:** The standard binary format on macOS.
  - **Magic Numbers:**
    - 0xFEEDFACE (32-bit)
    - 0xFEEDFACF (64-bit)
  - **Fat/Universal Binaries:**
    - Include code for multiple architectures.
    - Identified by 0xCAFEBABE.
  - **Trivia:** Googling "mach-o" is a fun game on its own. For example, "Can black-hole MACHO binaries be detected by the Brazilian spherical antenna?"

- **Mach-O Text Segment:**
  - **Sections:**
    - `.text` (Code)
    - `.const` (Initialized constants)
    - `.static const` (Not defined*)
    - `.cstring` (Null-terminated byte strings)
    - `.literal4` (4-byte literals)
    - `.literal8` (8-byte literals)
    - `.constructor` (C++ constructors*)
    - `.destructor` (C++ destructors*)
    - `.fvmlib init0` (Fixed virtual memory shared library initialization*)
    - `.fvmlib init1` (Fixed virtual memory shared library initialization*)
    - `.symbol stub` (Indirect symbol stubs)
    - `.picsymbol stub` (Position-independent indirect symbol stubs)
    - `.mod init func` (C++ constructor pointers*)

- **Mach-O Data Segment:**
  - **Sections:**
    - `.data` (Initialized variables)
    - `.static data` (Unused*)
    - `.non lazy symbol pointer` (Non-lazy symbol pointers)
    - `.lazy symbol pointer` (Lazy symbol pointers)
    - `.dyld` (Placeholder for dynamic linker)
    - `.const` (Initialized relocatable constant variables)
    - `.mod init func` (C++ constructor pointers)
    - `.mod term func` (Module termination functions)
    - `.bss` (Data for uninitialized static variables)
    - `.common` (Uninitialized imported symbol definitions)

- **Objective-C Segment:**
  - **Sections:**
    - `.objc class`
    - `.objc meta class`
    - `.objc cat cls meth`
    - `.objc cat inst meth`
    - `.objc protocol`
    - `.objc string object`
    - `.objc cls meth`
    - `.objc inst meth`
    - `.objc cls refs`
    - `.objc message refs`
    - `.objc symbols`
    - `.objc category`
    - `.objc class vars`
    - `.objc instance vars`
    - `.objc module info`
    - `.objc class names`
    - `.objc meth var names`
    - `.objc meth var types`
    - `.objc selector strs`

  - **Note:** "All sections in the OBJC segment, including old sections that are no longer used and future sections that may be added, are exclusively reserved for the Objective-C compiler’s use."
  - **Interpretation:** "No docs 4 u LOL kthxbai!"

- **vmmap:**
  - **Availability:** Standard on macOS.
  - **Functionality:** Lists memory mapping for a binary at runtime, including segment partitions.
  - **Use Case:** Quick way to track down heap, stack, and library addresses without a debugger.

- **Hex Editors:**
  - **Hex Fiend:**
    - Open-source hex editor, easy to modify.
    - [http://ridiculousfish.com/hexfiend/](http://ridiculousfish.com/hexfiend/)
  - **0xED:**
    - Another hex editor with plugins to display/edit custom data types.
    - [http://www.suavetech.com/0xed/0xed.html](http://www.suavetech.com/0xed/0xed.html)

- **otool:**
  - **Description:** macOS equivalent of `objdump`, available in a default install.
  - **Usage:**
    - `otool -otV` to resolve symbols.
    - `otool -L` to list required libraries.
  - **Example:**
    ```sh
    Camtronic-2:MacOS cameron$ otool -L iChat
    iChat:
    /System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth
    (compatibility version 1.0.0, current version 1.0.0)
    ...
    ```

- **otx:**
  - **Description:** Tool to clean up output from `otool`.
  - **Website:** [http://otx.osxninja.com/](http://otx.osxninja.com/)

- **classdump:**
  - **Description:** Similar to `otool -ov` but represents code as Objective-C declarations.
  - **Website:** [http://www.codethecode.com/projects/class-dump/](http://www.codethecode.com/projects/class-dump/)
  - **Example:**
    ```sh
    Camtronic-2:MacOS cameron$ class-dump iChat
    /*
    * Generated by class-dump 3.1.2.
    *
    * class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2007 by Steve Nygard.
    */
    ...
    @interface SmileyCell : NSButtonCell
    {
    NSString * axDescription;
    }
    - (void)dealloc;
    - (id)accessibilityAttributeNames;
    - (void)accessibilitySetValue:(id)fp8 forAttribute:(id)fp12;
    - (id)accessibilityAttributeValue:(id)fp8;
    - (void)drawInteriorWithFrame:(struct NSRect)fp8 inView:(id)fp24;
    @end
    ```

- **IDA Pro:**
  - **Windows Version:** Works fine with Parallels.
  - **macOS Version:** Runs on the console.
  - **Websites:**
    - [http://hex-rays.com/idapro/](http://hex-rays.com/idapro/)
    - [http://www.parallels.com/](http://www.parallels.com/)
  - **Note:** Both IDA and Parallels are commercial (not free).

- **Debuggers:**
  - **pyDBG:** Ported to macOS by Charlie Miller.
  - **gdb:** Available in stock installs.
  - **pygdb:** [http://code.google.com/p/pygdb/](http://code.google.com/p/pygdb/)
  - **vtrace:** [https://www.kenshoto.com/vtrace/](https://www.kenshoto.com/vtrace/)
  - **reDBG:** A Ruby debugger by Weston & Beauchamp, soon to be released.

- **RE:Trace:**
  - **Introduction:** Introduced at Black Hat DC 2008.
  - **Description:** A Ruby framework to interact with DTrace.
  - **Website:** [http://www.poppopret.org/](http://www.poppopret.org/)

- **Calling Conventions:**
  - **Convention:** On macOS, the stdcall convention is used.
  - **Stack Allocation:** Stack space is allocated at the function start when compiled with GCC.
  - **Variable Handling:** Variables are moved in, not pushed onto the stack.
  - **Note:** Check the stack delta before renaming variables.

- **Local Addressing:**
  - **Behavior:** Functions frequently refer to an address that is not the base of the function, just an anchor point.
  - **Usage:** Used in data references and jump tables.
  - **Example:**
    ```asm
    text:000E63CF mov eax, [ebx+eax*4+300h]
    text:000E63D6 add eax, ebx
    text:000E63D8 jmp eax
    text:000E63D8 ;
    text:000E63DA align 4 ; Jump table
    text:000E63DC dd 2 dup( 0A80h), 7AAh, 7B9h, 3A4h, 716h,3 dup( 0A80h), 94Ch, 9E0h
    text:000E63DC dd 3FAh, 0A80h, 0A24h,4 dup( 0A80h), 998h,2 dup( 0A80h), 435h, 7C8h
    text:000E63DC dd 3 dup( 7E7h),0Ch dup( 0A80h), 7F6h, 0A80h, 905h, 6AF48D8Bh, 758BFFFBh, 8418B08h
    ```

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.