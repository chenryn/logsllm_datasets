    io.recvuntil('decrypted message is')
    res = io.recvline()
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
    if 'odd' in res:
        return 1
    return 0
def lsb_decryption_oracle(c, e, n, decrypt_lsb):
    bounds = [0, Fraction(n)]
    i = 0
    while True:
        i += 1
        print i
        c2 = (c * pow(2, e, n)) % n
        lsb = decrypt_lsb(c2)
        if lsb == 1:
            bounds[0] = sum(bounds) / 2
        else:
            bounds[1] = sum(bounds) / 2
        diff = bounds[1] - bounds[0]
        diff = diff.numerator / diff.denominator
        if diff == 0:
            m = bounds[1].numerator / bounds[1].denominator
            return m
        c = c2
io = remote('47.111.59.243', 9421)
salt, part = io.recvline().split(')[0:5] == ')
salt = salt.split(' ')[-1]
part = part.strip()
io.sendlineafter(">", solve_pow(salt, part))
io.recvuntil('n = ')
n = int(io.recvline())
io.recvuntil('e = ')
e = int(io.recvline())
io.recvuntil('c = ')
c = int(io.recvline())
print n, e, c
m = lsb_decryption_oracle(c, e, n, decrypt_lsb)
io.sendlineafter("option:", 'G')
io.sendlineafter("secret:", str(m))
io.recvuntil('n = ')
n = int(io.recvline())
io.recvuntil('e = ')
e = int(io.recvline())
io.recvuntil('c = ')
c = int(io.recvline())
print n, e, c
m = lsb_decryption_oracle(c, e, n, decrypt_lsb)
io.sendlineafter("option:", 'G')
io.sendlineafter("secret:", str(m))
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
MT
Status: solved
Tags: Crypto
block 2byte c
babyunic
Status: solved
Tags: Reverse
io.recvuntil('n = ')
n = int(io.recvline())
io.recvuntil('e = ')
e = int(io.recvline())
io.recvuntil('c = ')
c = int(io.recvline())
print n, e, c
m = lsb_decryption_oracle(c, e, n, decrypt_lsb)
io.sendlineafter("option:", 'G')
io.sendlineafter("secret:", str(m))
io.interactive()
66
67
68
69
70
71
72
73
74
75
76
from z3 import *
import ctypes
ys = [0xFFFFFF94, 0xFFFFFF38, 0x00000126, 0xFFFFFF28, 0xFFFFFC10, 
0x00000294, 0xFFFFFC9E, 0x000006EA, 0x000000DC, 0x00000006, 0xFFFFFF0C, 
0xFFFFFDF6, 0xFFFFFA82, 0xFFFFFCD0, 0x00000182, 0x000003DE, 0x0000014E, 
0x000002B2, 0xFFFFF8D8, 0x00000174, 0xFFFFFAA6,
      0xFFFFF9D4, 0x000001C2, 0xFFFFF97C, 0x0000035A, 0x00000146, 
0xFFFFFF3C, 0xFFFFFA14, 0x000001CE, 0x000007DC, 0xFFFFFD48, 0x00000098, 
0x0000085E, 0xFFFFFDB0, 0xFFFFFFBC, 0x0000036E, 0xFFFFFF4E, 0xFFFFF836, 
0x000005C0, 0x000006AE, 0x00000694, 0x00000022]
ys = map(lambda x: ctypes.c_int32(x).value, ys)
print ys
a2 = [IntVal(i) for i in ys]
a1 = [Int('m%d' % i) for i in range(42)]
solver = Solver()
for _,v in enumerate(a1):
    solver.add(v>=0)
    solver.add(v<=0xff)
v2 = a1[0] + a1[1] + a1[2] - a1[3] + a1[4] - a1[5] - a1[6] - a1[7] - 
a1[8] + a1[9] + a1[10] - a1[11] + a1[12] - a1[13] - a1[14] + a1[15] - 
a1[16] - a1[17] + a1[18] + a1[19] - a1[20]
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
solver.add(a2[0] == v2 + a1[21] + a1[22] + a1[23] + a1[24] - a1[25] + 
a1[26] - a1[27] + a1[28] + a1[29] - a1[30] - a1[31] + a1[32] - a1[33] + 
a1[34] + a1[35] - a1[36] - a1[37] + a1[38] - a1[39] + a1[40] + a1[41])
v3 = a1[0] - a1[1] + a1[2] - a1[3] - a1[4] + a1[5] - a1[6] - a1[7] - 
a1[8] - a1[9] + a1[10] - a1[11] + a1[12] - a1[13] - a1[14] + a1[15] - 
a1[16] - a1[17] + a1[18] - a1[19] + a1[20]
solver.add(a2[1] == v3 + a1[21] - a1[22] - a1[23] - a1[24] + a1[25] - 
a1[26] + a1[27] - a1[28] - a1[29] + a1[30] + a1[31] + a1[32] + a1[33] + 
a1[34] + a1[35] - a1[36] - a1[37] - a1[38] - a1[39] - a1[40] + a1[41])
v4 = a1[0] - a1[1] + a1[2] + a1[3] - a1[4] + a1[5] - a1[6] - a1[7] + 
a1[8] - a1[9] - a1[10] - a1[11] - a1[12] - a1[13] + a1[14] - a1[15] - 
a1[16] + a1[17] + a1[18] + a1[19] + a1[20]
solver.add(a2[2] == v4 + a1[21] - a1[22] + a1[23] + a1[24] + a1[25] + 
a1[26] - a1[27] + a1[28] - a1[29] + a1[30] - a1[31] + a1[32] + a1[33] - 
a1[34] - a1[35] + a1[36] + a1[37] + a1[38] - a1[39] + a1[40] - a1[41])
v5 = a1[0] - a1[1] - a1[2] - a1[3] - a1[4] - a1[5] + a1[6] + a1[7] - 
a1[8] - a1[9] - a1[10] - a1[11] + a1[12] - a1[13] + a1[14] - a1[15] + 
a1[16] - a1[17] + a1[18] + a1[19] + a1[20]
solver.add(a2[3] == v5 - a1[21] + a1[22] + a1[23] + a1[24] - a1[25] - 
a1[26] + a1[27] - a1[28] + a1[29] + a1[30] - a1[31] - a1[32] - a1[33] + 
a1[34] - a1[35] + a1[36] + a1[37] + a1[38] - a1[39] + a1[40] + a1[41])
v6 = a1[0] - a1[1] - a1[2] + a1[3] - a1[4] - a1[5] + a1[6] + a1[7] + 
a1[8] + a1[9] - a1[10] + a1[11] + a1[12] - a1[13] + a1[14] - a1[15] + 
a1[16] + a1[17] - a1[18] + a1[19] - a1[20]
solver.add(a2[4] == v6 + a1[21] - a1[22] - a1[23] - a1[24] + a1[25] - 
a1[26] - a1[27] - a1[28] + a1[29] + a1[30] + a1[31] - a1[32] + a1[33] - 
a1[34] - a1[35] + a1[36] - a1[37] + a1[38] - a1[39] - a1[40] - a1[41])
v7 = a1[0] + a1[1] + a1[2] + a1[3] + a1[4] + a1[5] + a1[6] + a1[7] + 
a1[8] - a1[9] - a1[10] - a1[11] - a1[12] - a1[13] - a1[14] + a1[15] - 
a1[16] + a1[17] - a1[18] + a1[19] + a1[20]
solver.add(a2[5] == v7 - a1[21] + a1[22] - a1[23] + a1[24] - a1[25] + 
a1[26] + a1[27] - a1[28] + a1[29] - a1[30] + a1[31] + a1[32] + a1[33] - 
a1[34] - a1[35] - a1[36] + a1[37] - a1[38] - a1[39] + a1[40] + a1[41])
v8 = a1[0] - a1[1] + a1[2] + a1[3] + a1[4] - a1[5] + a1[6] + a1[7] + 
a1[8] + a1[9] - a1[10] + a1[11] + a1[12] - a1[13] + a1[14] + a1[15] + 
a1[16] + a1[17] - a1[18] - a1[19] - a1[20]
solver.add(a2[6] == v8 - a1[21] - a1[22] - a1[23] + a1[24] + a1[25] - 
a1[26] + a1[27] + a1[28] + a1[29] - a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] - a1[35] + a1[36] + a1[37] - a1[38] - a1[39] + a1[40] - a1[41])
v9 = a1[0] + a1[1] - a1[2] - a1[3] - a1[4] + a1[5] + a1[6] - a1[7] + 
a1[8] + a1[9] - a1[10] + a1[11] - a1[12] + a1[13] - a1[14] + a1[15] - 
a1[16] + a1[17] - a1[18] - a1[19] + a1[20]
solver.add(a2[7] == v9 - a1[21] + a1[22] - a1[23] - a1[24] + a1[25] - 
a1[26] + a1[27] + a1[28] + a1[29] + a1[30] + a1[31] + a1[32] - a1[33] + 
a1[34] - a1[35] + a1[36] + a1[37] + a1[38] + a1[39] - a1[40] - a1[41])
v10 = a1[0] - a1[1] - a1[2] + a1[3] + a1[4] - a1[5] + a1[6] + a1[7] + 
a1[8] + a1[9] + a1[10] - a1[11] - a1[12] + a1[13] - a1[14] + a1[15] + 
a1[16] + a1[17] + a1[18] - a1[19] + a1[20]
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
solver.add(a2[8] == v10 + a1[21] - a1[22] - a1[23] + a1[24] + a1[25] + 
a1[26] - a1[27] + a1[28] - a1[29] - a1[30] - a1[31] - a1[32] - a1[33] + 
a1[34] - a1[35] - a1[36] + a1[37] - a1[38] - a1[39] + a1[40] - a1[41])
v11 = a1[0] + a1[1] + a1[2] - a1[3] + a1[4] + a1[5] + a1[6] - a1[7] - 
a1[8] - a1[9] - a1[10] + a1[11] + a1[12] + a1[13] - a1[14] + a1[15] + 
a1[16] - a1[17] - a1[18] + a1[19] + a1[20]
solver.add(a2[9] == v11 - a1[21] - a1[22] - a1[23] + a1[24] - a1[25] - 
a1[26] - a1[27] + a1[28] + a1[29] + a1[30] - a1[31] + a1[32] + a1[33] - 
a1[34] - a1[35] - a1[36] - a1[37] + a1[38] - a1[39] + a1[40] + a1[41])
v12 = a1[0] - a1[1] + a1[2] + a1[3] - a1[4] - a1[5] + a1[6] + a1[7] - 
a1[8] - a1[9] - a1[10] - a1[11] + a1[12] + a1[13] + a1[14] - a1[15] + 
a1[16] - a1[17] + a1[18] + a1[19] + a1[20]
solver.add(a2[10] == v12 - a1[21] + a1[22] - a1[23] - a1[24] - a1[25] + 
a1[26] - a1[27] - a1[28] + a1[29] - a1[30] + a1[31] + a1[32] - a1[33] - 
a1[34] + a1[35] - a1[36] - a1[37] + a1[38] - a1[39] + a1[40] + a1[41])
v13 = a1[0] - a1[1] + a1[2] + a1[3] + a1[4] - a1[5] + a1[6] + a1[7] - 
a1[8] + a1[9] + a1[10] - a1[11] - a1[12] - a1[13] - a1[14] + a1[15] - 
a1[16] - a1[17] - a1[18] + a1[19] + a1[20]
solver.add(a2[11] == v13 - a1[21] + a1[22] - a1[23] + a1[24] + a1[25] + 
a1[26] + a1[27] - a1[28] + a1[29] + a1[30] - a1[31] - a1[32] - a1[33] - 
a1[34] - a1[35] + a1[36] + a1[37] - a1[38] - a1[39] - a1[40] - a1[41])
v14 = a1[0] - a1[1] - a1[2] - a1[3] + a1[4] - a1[5] - a1[6] + a1[7] + 
a1[8] - a1[9] + a1[10] - a1[11] - a1[12] - a1[13] + a1[14] - a1[15] + 
a1[16] - a1[17] + a1[18] - a1[19] - a1[20]
solver.add(a2[12] == v14 - a1[21] - a1[22] + a1[23] - a1[24] + a1[25] - 
a1[26] + a1[27] - a1[28] + a1[29] - a1[30] - a1[31] + a1[32] + a1[33] + 
a1[34] - a1[35] - a1[36] - a1[37] - a1[38] + a1[39] - a1[40] - a1[41])
v15 = a1[0] - a1[1] + a1[2] - a1[3] + a1[4] - a1[5] + a1[6] - a1[7] + 
a1[8] - a1[9] + a1[10] - a1[11] + a1[12] + a1[13] + a1[14] + a1[15] - 
a1[16] - a1[17] - a1[18] + a1[19] + a1[20]
solver.add(a2[13] == v15 + a1[21] - a1[22] - a1[23] + a1[24] + a1[25] - 
a1[26] - a1[27] + a1[28] + a1[29] - a1[30] - a1[31] - a1[32] + a1[33] - 
a1[34] - a1[35] + a1[36] - a1[37] - a1[38] - a1[39] + a1[40] - a1[41])
v16 = a1[0] + a1[1] + a1[2] - a1[3] - a1[4] - a1[5] + a1[6] - a1[7] + 
a1[8] + a1[9] + a1[10] - a1[11] + a1[12] - a1[13] - a1[14] + a1[15] + 
a1[16] + a1[17] - a1[18] - a1[19] - a1[20]
solver.add(a2[14] == v16 - a1[21] + a1[22] + a1[23] + a1[24] - a1[25] + 
a1[26] + a1[27] + a1[28] - a1[29] - a1[30] - a1[31] + a1[32] + a1[33] + 
a1[34] + a1[35] + a1[36] + a1[37] + a1[38] - a1[39] - a1[40] - a1[41])
v17 = a1[0] - a1[1] + a1[2] + a1[3] + a1[4] + a1[5] - a1[6] + a1[7] - 
a1[8] - a1[9] - a1[10] + a1[11] + a1[12] + a1[13] - a1[14] - a1[15] - 
a1[16] + a1[17] - a1[18] - a1[19] - a1[20]
solver.add(a2[15] == v17 - a1[21] + a1[22] + a1[23] + a1[24] + a1[25] + 
a1[26] + a1[27] - a1[28] - a1[29] - a1[30] - a1[31] + a1[32] - a1[33] + 
a1[34] + a1[35] + a1[36] + a1[37] - a1[38] + a1[39] + a1[40] - a1[41])
v18 = a1[0] - a1[1] + a1[2] + a1[3] - a1[4] - a1[5] + a1[6] + a1[7] + 
a1[8] + a1[9] + a1[10] - a1[11] + a1[12] - a1[13] + a1[14] + a1[15] + 
a1[16] - a1[17] + a1[18] - a1[19] + a1[20]
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
solver.add(a2[16] == v18 - a1[21] - a1[22] - a1[23] - a1[24] - a1[25] + 
a1[26] + a1[27] + a1[28] + a1[29] - a1[30] - a1[31] + a1[32] - a1[33] - 
a1[34] + a1[35] - a1[36] + a1[37] - a1[38] + a1[39] - a1[40] + a1[41])
v19 = a1[0] + a1[1] + a1[2] + a1[3] + a1[4] - a1[5] + a1[6] + a1[7] + 
a1[8] - a1[9] - a1[10] + a1[11] - a1[12] + a1[13] + a1[14] + a1[15] - 
a1[16] + a1[17] - a1[18] - a1[19] + a1[20]
solver.add(a2[17] == v19 - a1[21] + a1[22] - a1[23] - a1[24] + a1[25] - 
a1[26] + a1[27] - a1[28] + a1[29] - a1[30] - a1[31] + a1[32] - a1[33] - 
a1[34] + a1[35] - a1[36] + a1[37] - a1[38] + a1[39] + a1[40] - a1[41])
v20 = a1[0] - a1[1] - a1[2] - a1[3] + a1[4] + a1[5] - a1[6] + a1[7] - 
a1[8] + a1[9] + a1[10] - a1[11] - a1[12] - a1[13] + a1[14] - a1[15] - 
a1[16] + a1[17] + a1[18] + a1[19] - a1[20]
solver.add(a2[18] == v20 - a1[21] - a1[22] - a1[23] - a1[24] - a1[25] - 