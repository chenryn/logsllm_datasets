B. The Importance of Read-Only Data
It
is now widely accepted that code sections must be
read-only and executable while data sections must be non-
executable to prevent attacks. Solutions like PaX [32] and
DEP [5] prevent the execution of writable memory to prevent
code injection attacks. If adversaries ﬁnd a way to modify
executable code, then they can attack the process by injecting
and executing code of their choosing. PaX and DEP aim
to partition the process into immutable and executable code
sections and mutable but non-executable data sections to
prevent such attacks. Researchers even argue that code sections
should be execute-only [7], [15].
In addition, processes often include a variety of data
that must be read-only. To enable the memory protection,
the compiler toolchain produces the information necessary to
inform the dynamic loader that certain program data should
be restricted to read-only memory. Typically, an ELF ﬁle
often includes a section for read-only data, namely .rodata.
When the compiler detects constant variables in the program
source, it adds those variables to the .rodata section of
the generated object ﬁles. The linker then combines individ-
ual .rodata sections of the object ﬁles to form a single
3
a.cb.cx.cy.ca.ob.ox.oy.oa.outlibtest.soa.outlibtest.sold.sosource ﬁleobject ﬁleexecutable/libraryrunning processcompilelinkingloading.rodata section for the executable or library binary. Finally,
the dynamic loader maps the ELF ﬁle’s .rodata section into
read-only memory to enable memory protection.
The security of the processes often depend on the read-
only memory protection. The read-only data section in an
ELF ﬁle consists of static constants and variables that are
used by the program. Note that the compiler may also choose
to place such read-only data in the code section to reduce
the number of required memory pages. Such constants may
include ﬁxed strings (e.g., format strings or ﬁlenames), ﬁxed
data values (e.g., structured data, arrays, or IP addresses), and
ﬁxed code information (e.g., arrays of function pointers, C++
virtual tables, or jump tables). Programmers assume the values
of static constant variables are stored in read-only memory and
remain immutable after initialization. Failing to adhere to the
assumption can lead to security breaches [42].
Program security often leverages read-only data. While
normal program data may be maliciously modiﬁed when a
memory corruption error is exploited by an adversary, read-
only data cannot be modiﬁed. As a result, security experts
encourage the use of read-only data to prevent attacks and
sometimes apply read-only data in their defenses. For example,
researchers have proposed that a solution to format string
vulnerabilities is to hard-code format strings [14], [27]. If printf
invocations leverage adversary-controlled format strings, then
the call can be used to create a Turing-complete exploit envi-
ronment [12]. As another example, some control-ﬂow defenses
for C++ programs depend on an adversary not being capable
of modifying virtual tables [41]. These defenses assume the
integrity of virtual tables and simply check if an intended
virtual table is used during a virtual method invocation to
restrict the possible targets and prevent code reuse attacks.
While using the C++ virtual table to identify targets is not the
only way to restrict control ﬂow targets for C++ virtual method
invocations, it presents performance advantages, as discussed
in Section IV-A.
Programs may also leverage read-only data to prevent
attacks on system calls. One problem is that adversary input
may be used to construct resources names, such as ﬁle names
and IP addresses. However, if such resource names are hard-
coded in the program, then the program cannot be tricked into
serving as a confused deputy [24]. Further, even if there is a
memory corruption error in the program, as described above,
adversaries cannot maliciously modify such resource names
when they are read-only data.
III. PROBLEM DEFINITION
The loader may fail to maintain the implicit requirement
that data in the .rodata section of an ELF ﬁle must always
be protected read-only. When a program references read-
only data that is deﬁned in a library, the loader moves the
data into a data section of the program that
is writeable,
enabling adversaries to modify such data. Since programmers
and defense mechanisms depend on such data being read-
only, this loader behavior introduces a new attack vector for
adversaries to exploit. We call the new attack vector COREV
for Copy Relocation Violation. Next, we describe how and why
current loaders enable COREV.
Fig. 2: An example program for problem demonstration.
Fig. 3: Copy relocation for the example program. The dotted
arrow shows the variable copy, and the dashed arrow indicates
the points-to relationship. Solid arrows indicate data accesses
in the program.
A. Example Scenario
Consider an example program in Figure 2. In this example,
the main executable references a constant variable foo deﬁned
in a library and tries to change its value. Presumably, this will
trigger a page fault because the constant variable foo resides
in the library’s read-only data section.
Counterintuitively,
this access does not
trigger a page
fault in practice (the example program was tested on Ubuntu
16.04). When an executable references a constant variable
deﬁned in a library, the dynamic loader “relocates” (moves)
the constant variable from the library’s read-only data section
to the executable’s writable .bss section (which typically
contains uninitialized data of a program). This action removes
the read-only memory protection of the variable foo, allowing
the variable to be written in the example program. Other
types of read-only variables deﬁned in a library, but used by
an executable, are relocated in a similar way. As described
in Section VII, 6,339 out of 34,291 programs exhibit this
behavior, making them vulnerable to unexpected exploits.
Such variable movement is initiated by a special reloca-
tion type called copy relocation applied to variables in the
executable. We show its effects in Figure 3. Basically, a copy
relocation instructs the dynamic loader to move a variable to
4
extern const int foo;int main() {  int *p = (int *)&foo;  *p = 100; // page fault!  return 0;}const int foo = 10;all: main.c test.c  gcc -fPIC -shared test.c \      -o libtest.so  gcc main.c -L. -ltestrun: a.out libtest.so  LD_LIBRARY_PATH=. ./a.outmain.ctest.cMakeﬁlecodedataGOTcodedataGOTfoo = 10rodataaddress of foofoo = 10executablelibrarythe address speciﬁed by the relocation entry. The dynamic
loader not only copies the variable value (shown as the dotted
arrow), but also redirects the references in other libraries
(including the one which actually deﬁnes the variable, e.g.,
libtest.so in our example) to the new location by set-
ting up the variable’s corresponding GOT entries accordingly
(shown as dashed arrow). This ensures the old copy in the
library can be safely discarded.
B. The Purpose of Copy Relocation
Copy relocations are an artifact of the process imple-
mented by the compiler toolchain to unify how references
to external variables are resolved between static and dynamic
linking. Modern compiler toolchains split the build process
into multiple stages as shown in Figure 1. In particular, the
separation between the compilation and linking steps makes
separate compilation possible, enabling program modules to
be produced independently and linked either with other object
ﬁles or libraries to run the executable. This feature improves
build efﬁciency, encourages collaborations on the same project,
and simpliﬁes code management. However, such a design
limits the information available at each stage. As we will
show, the current practice of separate compilation for read-
only variables is the root cause of COREV.
As shown in Figure 1, the compiler takes a source ﬁle and
generates an object ﬁle. When the source code references an
external symbol (e.g., a variable or a function), the compiler
creates a placeholder for its address in the emitted instruction
and allocates a relocation entry for the placeholder. Conse-
quently, the generated instructions do not go through GOT
by default. The implicit assumption made by the compiler
here is that the placeholder can always be updated with the
actual address by resolving the relocation entry when the
program is eventually linked. While this assumption may hold
for statically-linked programs, it is not always the case for
dynamically-linked programs where the referenced symbol
may be externally deﬁned in a library (e.g., the variable foo
in Figure 2) and hence its address is not known until runtime.
There are two kinds of external references, and the linker
handles them in different ways. In the ﬁrst case, the exe-
cutable references external code by calling library functions.
To resolve the relocation statically and hence satisfy the
compiler’s assumption, the linker can relay the control transfer.
Speciﬁcally, it updates the placeholder (e.g., a call operand)
to point to a linker-generated trampoline in the Procedure
Linkage Table (PLT), and makes the trampoline perform a
GOT-based indirect jump to redirect the control to the actual
library function.
In the second case, the executable references external data
by using library variables. Unlike external code references,
the linker cannot effectively relay data accesses. Thus, the
linker has two choices. First, it can leave the placeholder
to the dynamic loader and let it resolve the relocation entry
at runtime. Unfortunately, since the placeholder resides in
the program’s code section, this implies that the loader has
to modify the program’s instructions at runtime. Thus, the
same binary cannot be shared among concurrent processes.
Furthermore, on x86-64 Linux,
the placeholder generated
by the compiler only has four bytes by default, which is
insufﬁcient to encode an eight-byte address of an arbitrary
library variable. Second, the linker can collude with the loader
by allocating a local copy within the executable as if it were
locally deﬁned. Speciﬁcally, the linker allocates zero-initialized
space for the external variable in the .bss section of the
executable, and updates the placeholder to reference the local
copy when linking. The dynamic loader then copies the value
of the originally referenced library variable to the local copy at
runtime as shown in Figure 3. After moving the variable from
the library to the executable, all libraries that are using this
variable must update their references from the original location
in the library to the location in the executable by updating
their GOT sections. The library that hosts the original copy
of the variable must update its location to the executable as
well. This ensures a consistent program state for all libraries.
Therefore, the linker is able to resolve the relocation entry
for the placeholder statically. As a result, the current compiler
toolchain adopts the second solution by using copy relocations.
However, as shown in the example in Figure 2, copy relo-
cations move an external variable to the executable’s writable
data section regardless of its original memory protection. There
are two reasons for this design. First, the linker cannot reliably
determine the original memory protection set on the moved
library variable. This is because dynamic linking allows the
overriding of symbols based on the order in which libraries
are loaded, while the actual loading order may not be statically
known. Second, making a read-only variable writable does not
break program functionality, while the opposite assumption
could trigger page faults and crash the program. Compatibility
is of paramount priority in software engineering practice and
the current design of the dynamic loader favors compatibility
over security.
How the change of memory protection affects security
depends on the availability of memory corruption vulnera-
bilities and the type of the copied variables. Intuitively, if a
program’s security relies on the read-only protection of the
moved variables, then copy relocations will increase the attack
surface and/or even negate existing defenses. Copy relocations
increase the program’s attack surface because the adversary
could potentially modify more program data than without copy
relocation through memory corruption. As program defenses
depend on the immutability of such data, adversaries may
be able to circumvent defenses like control-ﬂow integrity
(e.g., based on vtables [41]), format string protection [14], or
confused deputy mitigation [42].
IV. COREV IMPLICATIONS
Unintended copy relocations that change memory protec-
tion are a new attack vector that enables several classes of
attacks. Code pointers, format strings, and other static data
assumed to be read-only by a defense or the program may
suddenly be writable. We discuss these classes by examples.
A. Virtual Method Tables
C++ programs use a special data structure called virtual
method tables (or vtables) to dispatch virtual functions for
polymorphism. We show the conceptual memory layout of
vtable data structures and the assembly code that makes virtual
method calls in Figure 4. An object with virtual methods
stores the pointer to the vtable at its beginning. The vtable is
5
Fig. 4: vtable memory layout and virtual call sites.
In Figure 5, we show two types of instrumentations for virtual
call sites shown in Figure 4 (e). Both types of instrumentations
aim to ensure that only valid methods can be targeted at
each virtual call site. The ﬁrst type of instrumentation directly
checks the target function address obtained from the vtable.
Alternatively,
the second type of instrumentation assumes
vtables are write protected, and checks if the referenced vtable
is legitimate based on the object’s static type.
There are two advantages of the second-type instrumen-
tation compared to the ﬁrst type. First, given that a vtable
commonly contains multiple function pointers, there are fewer
vtables than actual
targets, making checking vtables more
efﬁcient. Second, if a program continuously makes virtual
method calls on the same object and the compiler keeps the
vtable pointer in a callee-saved register (e.g., %rbx), only one
check is necessary when checking the vtable, while the ﬁrst
type of instrumentation needs to check on every virtual method
call. As a result, researchers propose to check the vtable pointer
to achieve better performance [41], [10]. Note that mechanisms
using the second type of instrumentation must consider the
security implications of spilling the register to the stack where
it could potentially be overwritten [4].
However, vtables are not always read-only because of
unintended copy relocations. This will render the defenses that
are based on the second type of instrumentation ineffective,
such as [41]. For instance, if an adversary corrupts the function
pointers in the vtable but leaves the vtable pointer untouched,
she can potentially redirect control ﬂow to arbitrary code
locations without detection.
To trigger vtables being moved to writable memory, a
program must satisfy the following two invariants:
•
•
A class having virtual methods is implemented in a
dynamic library and its vtable is in the library’s read-
only region.
The constructor of the same class is implemented in
the executable. This is possible when a class does
not have an explicit constructor or its constructor is
deﬁned in a header ﬁle.
Fig. 5: Two types of instrumentations for protecting virtual
method calls.
essentially an array of function pointers to the implementations
of the virtual functions declared by its class (or its ancestor
classes). Objects of different classes along the inheritance
chain can have different implementations of the same virtual
method (e.g., A::a1 vs B::a1). Therefore, by embedding
the vtable pointer into every object, the vtable can dispatch
the virtual method calls based on the object’s runtime type.
Vtables are not supposed to change at runtime, thus they are
statically initialized at compile time and allocated from read-
only memory.
Attackers have demonstrated successful exploits by hi-
jacking virtual method calls [38]. Broadly speaking, these
attacks either corrupt the vtable in place or overwrite the vtable
pointer stored in some object so that it points to something
under the attacker’s control. Current defenses [41] focus on the
latter because the defenses (wrongly) assume that the vtable
is allocated in a read-only section and cannot be modiﬁed by
the attacker.
Furthermore, current defenses leverage the read-only nature
of vtables to optimize their checks for better performance [41].
6
class	A	{				int	m_a;				virtual	int	a1(void);				…				virtual	int	aN(void);};class	B:	public	A	{				int	m_b;				virtual	int	b1(void);				…				virtual	int	bN(void);};void	main()	{				A	*obj_a	=	new	A;				B	*obj_b	=	new	B;				obj_b->a1();				obj_b->a2();}vtable_ptrvtable_ptrA::a1A::a2…A::aNB::a1B::a2…B::aNB::b1B::b2…B::bNobj_aobj_bint	A::a1(void)	{				return	m_a;}int	B::a1(void)	{				return	m_a	+	m_b;}m_am_am_b(a) source code(b) object memory layout(c) vtables(d) methodsmain:		...		//	NOW	obj_b	is	in	%rdi		//	load	vtable	ptr	in	%rbx		movq		(%rdi),%rbx		//	load	a1	to	%rax		movq		(%rbx),%rax		//	obj_b->a1()		callq	*%rax		//	vtable	ptr	remains	in	%rbx		//	load	a2	to	%rax		movq		0x8(%rbx),%rax		//	obj_b->a2()		callq	*%rax		(e) assembly of virtual method callsmain:		...		//	NOW	obj_b	is	in	%rdi		//	load	vtable	ptr	to	%rbx		movq		(%rdi),%rbx		//	load	a1	to	%rax		movq		(%rbx),%rax		//	obj_b->a1()		assert	%rax	is	valid	target		callq	*%rax		//	vtable	ptr	remains	in	%rbx		//	load	a2	to	%rax		movq		0x8(%rbx),%rax		//	obj_b->a2()		assert	%rax	is	valid	target		callq	*%rax		main:		...		//	NOW	obj_b	is	in	%rdi		//	load	vtable	ptr	to	%rbx		movq		(%rdi),%rbx		//	load	a1	to	%rax		assert	%rbx	is	a	valid	vtable		movq		(%rbx),%rax		//	obj_b->a1()		callq	*%rax		//	vtable	ptr	remains	in	%rbx		//	load	a2	to	%rax		movq		0x8(%rbx),%rax		//	obj_b->a2()		callq	*%rax		We revisit the cause of copy relocations to illustrate why
the two invariants lead to writable vtables. A copy relocation