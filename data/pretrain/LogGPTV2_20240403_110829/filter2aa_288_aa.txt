IPv666 
Address of the Beast 
Chris Grayson 
@_lavalamp 
Marc Newlin 
@marcnewlin 
CHRIS 
MARC 
MY NAME IS 
IT’S THE FUTURE BAYBEEEEEE 
Where to From Here Cap’n? 
●  Background 
●  The Scanning Problem 
●  Honeypotting for PSLAAC 
●  Modeling for non-PSLAAC 
●  Being Less Dumb 
●  To The Cloud 
●  Results 
●  IPv666 
●  Conclusion 
A Bit o’ Background 
IPv6 - So Hot Right Now 
A Tale of Gateways and Set Top Boxes 
●  DEFCON 25 
●  26 CVEs 
●  All in consumer premise equipment (CPE) 
●  Ie: Comcast gateways and set top boxes 
●  IPv6 was a big part 
●  https://github.com/BastilleResearch/CableTap 
Send-to-TV / Remote Web UI 
●  Gateway web UI accepts remote 
requests from ISP infrastructure  
●  IPv6 address of target gateway 
provides remote web UI access via 
set-top box 
Seems Kinda Spooky 
● 
IPv6 works out of the box without manual configuration 
● 
All your devices and networking equipment prefer it 
● 
There’s no such thing as private address space (for the most part) 
● 
Your IPv4 firewall rules don’t apply 
● 
ICMPv6 is a critical protocol 
● 
Single packets can be relayed to lots and lots of hosts 
Let’s Go Hunting 
The Problem of Scale 
●  IPv4 
32 bit addresses 
2^32 possible addresses 
4,294,967,296 addresses 
●  IPv6 
128 bit 
2^128 possible addresses 
340,282,366,920,938,463,463,374,607,431,768,211,456 addresses 
PSLAAC Makes Things Harder 
●  Addresses have host and network bits 
●  Network is site prefix and subnet ID 
●  Host is interface ID 
●  PSLAAC means interface ID is 
pseudorandom 
●  Even “small” networks (/96) have 32 
bits of randomness 
Breaking Down the Problem 
●  Modeling for cryptographic entropy is 
no bueno 
●  Two independent problems instead 
○ 
Identifying PSLAAC hosts 
○ 
Identifying non-PSLAAC hosts 
Honeypotting for PSLAAC 
Why Honeypotting? 
●  Search space too massive 
●  Instead of finding them, have them find us 
●  Took multiple approaches 
○ 
DNS Server 
○ 
SMTP Server 
○ 
Web Server 
● 
Popads! 
Honey DNS Server 
● 
Set up Bind server 
● 
Glue records point to IPv6 
● 
Zones delegated to IPv4 then IPv6 
● 
Post links all over social media 
● 
Popads! 
A Quick Note on PopAds 
Honey Web Server 
●  Set up best site ever at 
http://ipv6.exposed/ 
●  Available over IPv6, some other 
shenanigans for forcing IPv6 
●  WebRTC for IP address enumeration 
●  Post all over social media 
●  Popads! 
Honey Web Server (cont’d) 
Honey SMTP Server 
●  Set up SMTP server 
●  Have our DNS honeypot point to it 
●  Sign up for ALL THE THINGS 
●  Use MailBait to sign up for spam 
●  Mega womp womp 
Sweet(?) Honey Results 
●  92,609 unique IP addresses over ~10 months 
●  Cost $500+ 
●  Lost focus, but still suboptimal 
AND THEN... 
Lol... 
Modeling for Non-PSLAAC 
Structure in IPv6 Addresses 
2001:1284:f01c:2c0a:8238:bcff:fed3:4e03 
2001:1498:1::32:48 
2001:16b8:101:3175:a96:d7ff:fe7e:c4aa 
2001:16b8:6100:0:3631:c4ff:fe14:3d72 
2001:1890:1f8:46::1:6 
2001:1bc8:1004::2:0:99 
2001:260:450:7b::4 
2001:41d0:2:275b::182 
2001:41d0:2:3d77:: 
2001:4998:44:6027::2005 
2001:4b78:2::f06b 
2001:558:370:ba::1 
2001:579:6f03:600:c0b3:b230:5c3:df35 
2001:610:1a0:30::2 
2001:638:708:30da:ea11:32ff:fe70:8ae6 
2001:8d8:921:c500::70:18e1 
2001:980:6972::1 
2001:bc8:2800:36dd:87f9:1ef0:8a7a:c21f 
2001:e42:102:1819:160:16:234:111 
2001:ee0:4041:37a5:8acf:98ff:fee7:fec 
2001:ee0:4140::1230:2502:7004 
2001:ee0:4501:5062:1894:5a03:9cc3:216f 
2001:ee0:5500:8b5a:585d:c41a:7a09:f73a 
2003:0:2e02:1050::1 
2003:5a:4049::1 
2400:6180:100:d0::34:8001 
2400:8500:1302:803:133:130:127:180 
2400:b800:1:1::18 
2400:cb00:2048:1::6810:7166 
2400:cb00:2048:1::6818:d3a 
2404:6800:4007:801::2003 
2406:da00:ff00::1715:7892 
2406:e00:120:391c:0:30:ab4:4f40 
2407:500::2:5a9:b7bf 
2600:0:2:1239:144:232:2:85 
2600:3c00::f03c:91ff:feae:ee1c 
2600:3c00::f03c:91ff:fedf:426 
2600:3c03::f03c:91ff:fe79:e1a4 
2600:3c03::f03c:91ff:fea1:4761 
2600:3c03::f03c:91ff:fea2:42c7 
2603:3006:103c:b000::17f6 
2604:2d80:4030:0:91c2:c016:2329:7219 
2605:de00:1:1:4a:32:0:23 
2606:b400:8808:f000::a022:fa6d 
2620:11:0:c2b4:749a:46bf:291:38cf 
2620:8d:0:7f47::d827:7f47 
2800:370:2:418a:b8d3:ddc8:13a8:8768 
2800:370:2:972d:dd4a:a203:9d92:3353 
2800:370:44:256d:5950:afb3:7627:10f4 
2800:370:55:3c60:404a:d212:49dd:4477 
2800:370:55:b9c6:70b1:9c61:69e:2b02 
2800:370:61:11dc:e57f:1804:a456:eddc 
2800:370:84:0:d0bd:6968:d1ae:d26f 
2800:370:84:bba1:857c:f02d:cd6c:cd51 
2800:370:a:ae43:79b9:348b:3c0:8c7b 
2800:4f0:1:ecd5:dd66:8006:1203:be04 
2800:4f0:62:850c:92d:85a1:3431:a7b8 
2803:c300::2 
2804:14d:1a87:0:7815:7414:e01:dd02 
2804:14d:8e8c:1000:b42f:9577:7fbb:778b 
2804:292c:1::5 
2804:a8:2:c8::12a 
2806:102e:9:5055:272:63ff:fe83:e620 
2806:108e:c:2e3:7279:90ff:fe9c:2a07 
2a00:d0c0:200:0:b9:1a:9c36:20c 
2a01:488:42:1000:50ed:8479:33:339a 
2a01:488:42:1000:50ed:84f5:1c:ff1f 
2a01:5a60:3::92 
2a01:7c8:d002:1c::1 
2a01:a8:dc0:330:1::1c5d 
2a02:2028:80c:e900::1 
2a02:26f0:df:202:e3cc:80db:ebaa:3e93 
2a02:6b8:0:161b:ec4:7aff:fe18:c48 
2a02:6b8:b000:63a:96de:80ff:fe81:1258 
2a02:6b8:b000:6509:215:b2ff:fea9:66fa 
2a02:8108:0:12:587b:b48e:e629:436b 
2a02:8108:8000:21:2864:5009:d4d2:36f0 
2a02:810d:8000:29:e8b0:6937:7ddd:e597 
MACHINE LEARNING BAYBEEEE 
●  Model is a compact representation of 
data set 
●  Projection through model creates new 
data set with error % 
●  Errors are representative of structure in 
IPv6 addresses 
●  Hopefully find new addresses 
lol jk 
●  All attempts resulted in over-
fitting 
●  Projected addresses were the 
same as our input addresses 
●  We’re not ML experts sooooo…. 
The Entropy/IP Paper 
●  http://www.entropy-ip.com/ 
●  Really interesting paper from Akamai 
●  Maps entropy of different segments of IPv6 
addresses 
●  Big takeaways: 
○ 
Not THAT much entropy in non-PSLAAC IPs 
○ 
Simpler modeling might work better 
Dumbing Things Down (Modeling) 
2800:4f0:80:f662:880b:6c2f:cf59:662b 
0x2, 0x8, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, ... 
Break down into 32 nybbles 
Count occurences by position and nybble  
... 
Dumbing Things Down (Prediction) 
0x2 
Position 0 
probabilities[0][0x2] 
p(0x0) => 0.05 
p(0x1) => 0.05 
p(0x2) => 0.01 
p(0x3) => 0.09 
p(0x4) => 0.00 
p(0x5) => 0.15 
p(0x6) => 0.05 
p(0x7) => 0.09 
p(0x8) => 0.00 
p(0x9) => 0.06 
p(0xa) => 0.15 
p(0xb) => 0.09 
p(0xc) => 0.06 
p(0xd) => 0.10 
p(0xe) => 0.03 
p(0xf) => 0.02 
0xa 
Position 1 
Looks Promising… TOO PROMISING 
●  Generated 10mm addresses 
●  After scanning, over 50k responded 
to ICMP probes 
●  WOW WE TOTES SOLVED THE 
PROBLEM!!! ZOMG CELEBRATION 
TIME!!!! 
Enter Aliased (ie: Jerk) Networks 
●  Network ranges where every IP address 
responds to ICMP pings 
●  Why?? Because they’re jerks 
●  Not great for scanning 
●  Even worse for statistical modeling 
Identifying Aliased Networks (Initial) 
2800:4f0:80:f662:880b:6c2f:cf59:662b 
Wrap in /96 network 
2800:4f0:80:f662:880b:6c2f:cf59:662b/96 
Generate eight addresses in network 
2800:4f0:80:f662:880b:6c2f:fed3:4e03 
2800:4f0:80:f662:880b:6c2f:eb83:9376 
2800:4f0:80:f662:880b:6c2f:8924:f2f6 
2800:4f0:80:f662:880b:6c2f:7949:7d8e 
2800:4f0:80:f662:880b:6c2f:5676:f7bb 
2800:4f0:80:f662:880b:6c2f:a286:ad59 
2800:4f0:80:f662:880b:6c2f:bb7d:6d0a 
2800:4f0:80:f662:880b:6c2f:8e3e:4fd4 
ICMP scan 
If 50% of addresses respond, net is aliased 
2800:4f0:80:f662:880b:6c2f:cf59:662b/96 
Identifying Aliased Networks (Network Size) 
2800:4f0:80:f662:880b:6c2f:cf59:662b 
Map to bits 
0010100000000000:0000010011110000:0000000010000000:1111011001100010:1000100000001011:0110110000101111:1100111101011001:0110011000101011 
Aliased 
Unknown 
Flip right half of unknown bits 
0010100000000000:0000010011110000:0000000010000000:0000100110011101:0111011111110100:1001001111010000:1100111101011001:0110011000101011 
ICMP scan 
... 
Identifying Aliased Networks (Network Size cont’d) 
ICMP scan 
Flipped bits are aliased, 
left bits are unknown 
Response received 
No response received 
Left bits are not aliased, 
flipped bits are unknown 
Rinse and repeat 
0010100000000000:0000010011110000:0000000010000000:1111011001100010:1000100000001011:0110110000101111:1100111101011001:0110011000101011 
Aliased 
Unknown 
Not Aliased 
0010100000000000:0000010011110000:0000000010000000:1111011001100010:1000100000001011:0110110000101111:1100111101011001:0110011000101011 
Aliased 
Unknown 
Getting Less Dumber 
6gen 
●  Published in 2017 out of UC 
Berkeley 
●  Improves upon the Entropy/
IP paper with a new 
clustering algorithm 
IPv6 Address Clusters 
●  An IPv6 address cluster is defined as an IP address and a set of wild card 
nybble indices 
●  A cluster’s utility is based on its… 
○  Capacity - How many possible addresses are in the cluster? 
○  Density - How many of the cluster’s IPs are in the input data set? 
IPv6 Address Clusters (Example) 
2800:4f0:80:f662:880b:6c2f:cf59:662b 
0x2, 0x8, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, ... 
0x2, 0x2, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, ... 
0x2, ???, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, ... 
Capacity 
16 
Captured 
2 
Density 
12.5% 
IPv6 Address Clusters (Example) 
0x2, ???, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x0, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x1, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x2, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x3, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x4, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x5, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x6, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x7, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x8, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0x9, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0xa, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0xb, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0xc, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0xd, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0xe, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
0x2, 0xf, 0x0, 0x0, 0x0, 0x4, 0xf, 0x0, 0x0, 0x0, 0x8, 0x0, 0xf, 0x6, … 
●  For every IPv6 address 
○  Create a cluster of size 1 
○  For every IPv6 address 
■  Evaluate density of cluster with adding address 
○  Pick the best upgrade candidate 
●  Sort all upgrades by density 
●  While scanning budget not exhausted 
○  Pick the best density upgrade 
○  Evaluate best upgrade candidates from it 
○  Add upgraded cluster to cluster set 
Original Algorithm 