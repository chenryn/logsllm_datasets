(1𝜆, 𝑛, 𝑖), 𝑟(cid:1). Note that
in Definition A.1.
𝑏 = 2. Sample 𝑟
this distribution is the same as the right side of Eq. (3). There-
fore, any distinguisher of the two sides of Eq. (1) could be
used to distinguish the distributions in Eq. (3) by choosing a
𝛽 ← G and replacing 𝑣1
𝑖 in Eq. (3) by 𝛽 − 𝑣1
𝑖 .
Theorem A.6. Steps (1)–(6) in Protocol 3 together implement
SPFSS.Gen(1𝜆, 𝑓𝑖,𝛽) from Functionality 8 with security against semi-
honest adversaries, where 𝑖 is input by P2 and 𝛽 is secret-shared
between the two parties.
Proof. We first prove that Protocol 3 is secure in the (𝑛 −
1)-out-of-𝑛-ROT-hybrid model when all calls to ROT.Gen are per-
formed by the ideal Functionality 7. We construct simulators Sim𝑏
for 𝑏 ∈ {1, 2} for the views of both parties in the ideal model.
𝑏 = 1. The only messages received by P1 come from the execution
𝑏 = 2. Here, in addition to the output of ROT.Gen, P2 receives 𝑅𝛽.
In the (𝑛 − 1)-out-of-𝑛-ROT-hybrid model, this simulated
view is distributed identically to the real view.
Simulate this with 𝛽2 − ˜𝑟 +𝑗 ∈[𝑛]\{𝑖} SPFSS.Eval(2, 𝐾2, 𝑗).
of ROT.Gen, and thus Sim1 is the identity function.
To prove security in the plain model, we again use the modular com-
position theorem for semi-honest security together with a secure
protocol for ROT.Gen, as proven in Theorem A.3
□
A.3 Known-Indices MPFSS
We will now prove security of our batched FSS implementation.
However, as discussed in Section 5, there is a small probability that
the batching fails (note that this is also the case for the heuristic
batch code construction suggested by Boyle et al. [9]). Here we
have two options if batching fails: We could abort the key genera-
tion, sacrificing security as this leaks some information about the
non-zero indices that failed to be batched; or we could sacrifice
correctness by returning keys that will result in shares of zeros for
some indices that should be non-zero. Both are valid approaches
depending on the concrete application, as also discussed in [1, 15].
For our VOLE construction, we will opt for the second choice, since
this will allow us to achieve the same security guarantee as Boyle
et al. [9], i.e., our scheme is either secure under standard LPN (if
batching succeeds), or under a slightly stronger variant of LPN (if
batching fails). See also the discussion in Section 6. We will not
mention this explicitly in the following definitions and proofs, but
whenever cuckoo hashing is performed, we assume that failures are
handled by dropping indices that would result in a hashing failure.
Definition A.7 (Known-Indices MPFSS). For any 𝑡, 𝑛 ∈ N, let F =
(cid:8)𝑓i,𝜷 : [𝑛] → G(cid:9) be a class of multi-point functions, where i ∈ [𝑛]𝑡,
𝜷 ∈ G𝑡, and
(cid:26) 𝛽 𝑗
0
𝑓i,𝜷 (𝑥) =
if 𝑥 = 𝑖 𝑗 for some 𝑗 ∈ [𝑡],
otherwise.
Let further 𝜂, 𝜆 ∈ N denote statistical and computational security pa-
rameters, respectively. A Known-Indices Multi-Point Function Secret
Sharing (Known-Indices MPFSS) scheme consists of the following
two algorithms:
• (𝐾1, 𝐾2) ← MPFSS.Gen(1𝜆, 𝜂, 𝑓 ) – given a description of
• 𝑓𝑏(𝑥) ← MPFSS.Eval(𝑏, 𝐾𝑏, 𝑥) – given a key for party 𝑏 ∈
𝑓 ∈ F , outputs two keys.
{1, 2} and an input 𝑥 ∈ [𝑛], return a share of 𝑓 (𝑥).
□
Where the following properties have to be satisfied:
17
Functionality 9: Known-Indices MPFSS
Key Generation (MPFSS.Gen(1𝜆, 𝜂, 𝑓i,𝜷)):
Let [𝑛] denote the domain of 𝑓i,𝜷, and 𝑡 the number of
non-zero points.
(1) Choose parameters (𝜅, 𝑚) ← ParamGen(𝑛, 𝑡, 𝜂) for a
𝑗 ∈[𝑡], where 𝑙 𝑗 is the location of 𝑖 𝑗 in 𝑇 .
cuckoo hashing scheme such that hashing any 𝑡 indices
from [𝑛] fails with probability at most 2−𝜂.
(2) Perform Steps (1) and (2) from Protocol 4, i.e., choose 𝜅
random hash functions and use them to insert (𝑖1, . . . , 𝑖𝑡)
into a cuckoo hash table 𝑇 , and simple-hash the
domain [𝑛]. Let pos𝑙 be defined as in Protocol 4.
Compute v ∈ G𝑚, where
(3) Let u =(cid:0)(𝛽 𝑗 , 𝑙 𝑗)(cid:1)
(cid:26) 𝑎
2(cid:1)(cid:17)
obtain 𝑚 sets of keys(cid:16)(cid:0)𝐾𝑙
(cid:17) for 𝑏 ∈ {1, 2}.
(cid:16)(cid:0)ℎ𝑝(cid:1)
(cid:1)
𝑝∈[𝜅],(cid:0)𝐾𝑙
(cid:17) and output
Parse 𝐾𝑏 as(cid:16)(cid:0)ℎ𝑝(cid:1)
𝑝∈[𝜅],(cid:0)𝐾𝑙
(cid:1)
𝑝=1 SPFSS.Eval(cid:0)𝑏, 𝐾
, posℎ𝑝 (𝑥)(𝑥)(cid:1).
𝜅
(5) Output 𝐾𝑏 =
Expansion (MPFSS.Eval(𝑏, 𝐾𝑏, 𝑥)):
𝑙∈[𝑚]
(4) Call SPFSS.Gen 𝑚 times as in Step (4) from Protocol 4 to
if (𝑎, 𝑗) ∈ u,
otherwise.
𝑏
ℎ𝑝 (𝑥)
𝑏
𝑙∈[𝑚]
𝑙∈[𝑚]
1, 𝐾𝑙
𝑣 𝑗 =
0
𝑏
Correctness. For any 𝑓 ∈ F , and any 𝑥 ∈ 𝐼, when (𝐾1, 𝐾2) ←
MPFSS.Gen(1𝜆, 𝜂, 𝑓 ), we have
(cid:35)
MPFSS.Eval(𝑏, 𝐾𝑏, 𝑥) = 𝑓 (𝑥)
≥ 1 − 2−𝜂 .
(cid:34) 
𝑏∈{1,2}
Pr
(cid:110)𝐾𝑏
Security. For any 𝑏 ∈ {1, 2}, there exists a ppt simulator Sim𝑏 such
that for any polynomial-size function sequence 𝑓𝜆 ∈ F ,
(cid:12)(cid:12)(cid:12) (𝐾1, 𝐾2) ← MPFSS.Gen(1𝜆, 𝜂, 𝑓𝜆)(cid:111) 𝑐≈
(cid:110)𝐾𝑏 ← Sim𝑏(1𝜆, 𝜂, Leak𝑏(𝑓𝜆))(cid:111) ,
(4)
where Leak1(𝑓i,𝜷) = ([𝑛], G) and Leak2(𝑓i,𝜷) = ([𝑛, G], i).
Note that the security guarantee of Definition A.7 is the same as
in Definition 2.2. The main difference is in the correctness guarantee,
where we allow the output to be incorrect with a small probability
depending on the statistical security parameter 𝜂.
Functionality 9 describes our MPFSS procedure. We will now
prove its correctness and security guarantees according to Defini-
tion A.7.
Theorem A.8. Functionality 9 is a Known-Index MPFSS scheme.
Proof. Correctness. First, observe that the parameters for cuckoo
hashing are chosen in Step (1) such that insertion fails with prob-
ability of at most 2−𝜂. Thus, it remains to show in the case that
18
𝜅
MPFSS.Eval(𝑏, 𝐾𝑏, 𝑥)
SPFSS.Eval(cid:0)𝑏, 𝐾
ℎ𝑝 (𝑥)
𝑏
, posℎ𝑝 (𝑥)(𝑥)(cid:1)
𝑔ℎ𝑝 (𝑥)(posℎ𝑝 (𝑥)(𝑥))
cuckoo hashing succeeds,
𝑏∈{1,2}


𝜅
𝑝=1
𝑏∈{1,2}
𝑝=1
𝑓i,𝜷 (𝑥) =
=
=
where 𝑔𝑙 (𝑥) is defined as in Step (4) of Protocol 4. There are two
cases.
(1) 𝑥 = 𝑖 𝑗 for some 𝑗 ∈ [𝑡]. Then, since cuckoo hashing was
𝑙∗ = ℎ𝑝∗ be the location of 𝑥 in 𝑇 . Then 𝑔𝑙∗(pos𝑙∗(𝑥)) = 𝛽 𝑗,
successful, for exactly one 𝑝∗ ∈ [𝜅], 𝑇(cid:2)ℎ𝑝∗(𝑥)(cid:3) = 𝑥. Let
while 𝑔𝑙 (pos𝑙 (𝑥)) = 0 for all 𝑙 ∈(cid:8)ℎ𝑝(𝑥)(cid:12)(cid:12) 𝑝 ∈ [𝜅] \ {𝑝∗}(cid:9).
(2) 𝑥 ∉ i. Then for all possible locations 𝑙 ∈(cid:8)ℎ𝑝(𝑥)(cid:12)(cid:12) 𝑝 ∈ [𝜅](cid:9),
𝑇 [𝑙] ≠ 𝑥 and thus 𝑔𝑙 (pos𝑙 (𝑥)) = 0.
𝑏
1
Security. We construct simulators Sim𝑏 for 𝑏 ∈ {1, 2} by calling
for the SPFSS key generation algorithm
simulators SimSPFSS.Gen
used in Step (4) of Functionality 9.
Both simulators start by computing (𝜅, 𝑚) ← ParamGen(𝑛, 𝑡, 𝜂)
and sampling 𝜅 random hash functions (ℎ𝑝)𝑝∈[𝜅]. They then simple-
hash the domain [𝑛], resulting in 𝑚 buckets of sizes (𝐼𝑙)𝑙∈[𝑚].
𝑏 = 1. For each bucket 𝑙 ∈ [𝑚], call SimSPFSS.Gen
𝑙∈[𝑚]
1(cid:1). Output(cid:16)(cid:0)ℎ𝑝(cid:1)
(cid:17). Indistinguisha-
tain keys(cid:0)𝐾𝑙
𝑝∈[𝜅],(cid:0)𝐾𝑙
1(cid:1)
(1𝜆, 𝐼𝑙 , G) to ob-
bility of the distributions in Eq. (4) follows from the fact
that the ℎ𝑝 (and therefore the bucket sizes 𝐼𝑙) are identically
distributed, and for each bucket the simulated keys are in-
distinguishable from the real ones due to the security of the
SPFSS.Gen procedure (Eq. (1)).
𝑏 = 2. Construct a cuckoo hash table 𝑇 of size 𝑚 using the hash
functions (ℎ𝑝)𝑝∈[𝜅] and 𝑖1, . . . , 𝑖𝑡 as in Step (2) of Func-
tionality 9. Now for each bucket 𝑙 ∈ [𝑚], compute 𝐾𝑙
2 ←
SimSPFSS.Gen
𝑝∈[𝜅],
(cid:0)1𝜆, 𝐼𝑙 , G, pos𝑙 (𝑇 [𝑙])(cid:1) and output (cid:16)(cid:0)ℎ𝑝(cid:1)
(cid:17). Again, indistinguishability follows from the fact
(cid:0)𝐾𝑙
2(cid:1)
1
𝑙∈[𝑚]
that both views are identically distributed up to and includ-
ing the creation of 𝑇 , and then from the fact that the simu-
lated and real keys for each bucket are indistinguishable by
Eq. (1).
□
Theorem A.9. Protocol 4 implements MPFSS.Gen(1𝜆, 𝜂, 𝑓i,𝜷) from
Functionality 9 with security against semi-honest adversaries, where i
is input by P2 and 𝜷 is secret-shared element-wise between the parties.
Proof. We will first prove security assuming an ideal func-
tionalities SPFSS.Gen (Functionality 8) for SPFSS key generation,
and F 2PC for generic two-party computation. Then we again rely
on modular composition to obtain a protocol in the plain model.
We construct simulators Sim𝑏 for the the views of both parties
𝑏 ∈ {1, 2}. Both simulators perform simple hashing to obtain bucket
sizes consistent with the keys from the ideal output. Then, the sim-
ulation depends on 𝑏:
𝑏 = 1. The only messages Sim1 needs to simulate are the outputs
of F 2PC, which by construction are equal to the inputs to
the calls to SPFSS.Gen, since all other messages received by
P1 are part of the output. Since by definition, v1 in Step (3)
of Protocol 4 is a random share, this can be simulated by
sampling v1 𝑅← G. The resulting view is identical to the one
in the (SPFSS.Gen, F 2PC)-hybrid model.
𝑏 = 2. Sim2 needs to first perform cuckoo hashing to generate a
hash table 𝑇 consistent with the input indices i and hash
functions from the ideal output. It can then call F 2PC with
a uniform vector v1 𝑅← G as above. The inputs to each
SPFSS.Gen call are computed from 𝑇 as in Step (4) of Proto-
col 4. The resulting view is again identical to the one in the
(SPFSS.Gen, F 2PC)-hybrid model.
□
19