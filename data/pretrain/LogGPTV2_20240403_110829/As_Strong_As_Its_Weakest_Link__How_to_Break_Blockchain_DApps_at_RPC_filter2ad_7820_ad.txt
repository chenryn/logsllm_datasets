### E. Measurement Results: Gas & Rate Limits

To measure the gas limits of backend peers, we utilized the `rpc_gasLimit` program (refer to Figure A.15). We assumed that all nodes within the same RPC service share the same gas limit. The results, summarized in Table 5, indicate that out of nine services, four have configured gas limits: ServiceX3, ServiceX6, ServiceX9, and ServiceX8, with gas limits set at 50, 10, 5, and 1.5 block gas, respectively. Services without gas limits are particularly vulnerable to DoERS attacks.

In our extended study, we also measured the rate limits implemented by many services' frontends. These rate limits are intended to protect against distributed denial-of-service (DDoS) attacks. However, without real-world identity verification, these limits can be easily bypassed by a Sybil attacker who registers multiple service accounts, thereby accumulating higher rate limits. Requiring DApp clients (e.g., web browsers accessing a DApp page) to expose real-world identities is impractical. Therefore, we do not consider rate limiting as an effective protection against DoERS. An attacker can essentially bypass all RPC services' rate limits by using as many API keys or IPs as needed. Additionally, we observed that the measured rate limits often differ from the published limits on the services' websites. The detailed measurement results are provided in Appendix B.

### F. Attack Strategies Evading Gas Limit

For RPC nodes without a gas limit, we designed a single-request DoERS attack that can evade other protective measures, including rate limiting and load balancing. This attack involves sending a single request with a very large payload size (e.g., \(10^9\)) to execute the `exhaustMem` function in the DoERS-C smart contract. The key observation is that `exhaustMem` runs a single EVM instruction, `CODECOPY`, to allocate a large memory. Since running a single EVM instruction is atomic and not interrupted, even by a timeout, the DoERS attacker can increase the payload size to evade the 5-second timeout, leading to higher resource consumption and more severe service damage, as evaluated in § V-B.

For RPC nodes with a gas limit, the attacker can send multiple DoERS requests, each with a medium payload size under the gas limit. If the requests are sent at a sufficiently high rate, they will cause visible service interference, as evaluated in § V-A and § V-B.

### G. Summary of Attack Strategies

We summarize the potential actions of a DoERS attacker based on different real-world scenarios, with the goal of causing maximal damage to the DApp ecosystem while minimizing costs.

**C1: Nodes or Services Without Gas Limit**
- **Strategy:** Send a single request invoking `exhaustMem` with a large payload size (e.g., \(2^{64}\)). If this crashes the EVM on the victim node, the attacker waits for 30 seconds and pings the node before sending the request again. This strategy also applies to any services without gas limits, as the single-request attack evades the protection of a load balancer.

**C2: Nodes With Gas Limit**
- **Strategy:** Set the payload size of an individual request under the gas limit and send multiple such requests at a certain rate. For very low gas limits, the attacker can increase the request rate. Due to the inherent asymmetry between the service and the DoERS attacker, significant damage can be caused at a low cost (as evaluated in § V). This strategy applies to public RPC peers and Type-i services without load balancers.

**C3: Type-iii Services With Gas Limit**
- **Strategies:**
  - **C3a:** Follow the C2 strategy and increase the rate as necessary to DoS all backend peers in the service. Given the small service scale (tens of peers), the DoERS asymmetry helps keep the attacker's cost low (see § VI-A1 for an analysis).
  - **C3b:** Predict load-balancing behaviors and design specific attacks, as demonstrated in ServiceX6.

**C4: Type-ii Services With Gas Limit**
- **Strategy:** Mount targeted attacks. As described in § IV-C, the target can be a specific DApp client, a DApp, or a web3 library. Targeted attacks can evade the deterministic load-balancing behaviors in Type-ii services.

### V. Evaluation of DoERS Attacks

This section evaluates the effectiveness and cost of DoERS attacks. The attack effectiveness is measured by service performance degradation in terms of latency increase, block synchronization slowdown, and other metrics. The attack cost is measured by the attack rate. Note that DoERS attacks are designed to cost zero Ether, as described in § VI-A2. Specifically, the evaluation aims to answer the following questions:

- Are real-world RPC services and peers exploitable under DoERS attacks? How much increase in response time will be caused by DoERS with "minimal" payload and rate (i.e., without causing any exception) on real services? (§ V-A)
- On a local Ethereum node, how much damage can DoERS cause with payload and rate large enough to trigger and bypass exceptions? The damage is measured not only in response-time increase but also in block synchronization slowdown, mining rate slowdown, etc. (§ V-B)

#### A. Evaluation on Deployed Services

1. **Ethics-Driven Evaluation: Methodology**
   - **Goal:** Verify whether a deployed RPC service is exploitable under DoERS attacks.
   - **Challenge:** Design an effective test on the target services without attacking them. The test needs to be intense enough to cause observable effects but not so intense as to cause significant performance degradation.
   - **Key Idea:** Discover "minimally effective" parameters for the DoERS test. A DoERS test is minimally effective if:
     - The difference in response time of regular RPC requests under the test and without the test is statistically significant.
     - The response time of regular RPCs increases with the payload size and request rate.
   - **Setup:** We used a virtual machine (VM) instance in Google Cloud Platform (GCP) for probing and another VM instance in Amazon EC2 for measurement. This setup ensures that the two nodes do not share paths to the RPC service, minimizing performance interference.
   - **Experiment:** We warmed up the measurement node by sending three regular RPC requests (e.g., `eth_getBlockNumber`) to the target service. The measurement node then sent regular RPC requests at a rate of one request every two seconds. From the 30th second, the probing node sent DoERS requests with minimally effective parameters. The probing node lasted for \(t_a\) seconds, and the measurement node continued for another 60 seconds after that.
   - **Pre-Tests:** We conducted pre-tests on a local Ethereum node to find DoERS parameters that cause a 5x increase in response time. We varied the attack parameters in payload size, probe rate, and contract type. The local pre-tests produced several sets of candidate DoERS parameters, each a triplet \((type, p, r_x)\) where \(type/p/r_x\) is the contract type, payload size, and attack rate, respectively.
   - **Attack Duration:** We set the attack duration \(t_a\) such that the number of DoERS requests could be upper-bounded before the test.
   - **Trend Analysis:** We tested each service with a sequence of smaller, gradually increasing parameters to discover the trend in server response time growth. This allowed us to predict service response time under large parameters without causing actual damage.

2. **Evaluation Results**
   - **ServiceX2 Example:** We ran a series of tests with different minimally-effective parameters. Each test produced a timeline of RPC response times. For example, Figure 8a shows a 5x slowdown on ServiceX2 under DoERS attacks exploiting `exhaustCPU` with a 30,000 payload and a rate of 30 requests per second.
   - **Varying Parameters:** We varied the attack rate with a fixed payload size of 0.07M and vice versa. The results, shown in Figure 8b, clearly indicate that the response time grows with increasing payload size and attack rates.
   - **Ethical Considerations:** We stopped our tests at a maximum payload size of 0.15M or a maximum rate of 30 per second, resulting in a maximum response time of about 100 milliseconds. No timeouts or exceptions were observed.
   - **Type-iii Services:** For ServiceX6, DoERS requests were sent to `exhaustCPU` with a 1.5M payload at a rate of 200 requests per second. The attack lasted for 20 seconds, and we observed a protective measure taken by ServiceX6—15 seconds after the attack started, the DoERS requests were returned with null. The response time increased from 40 milliseconds to 160 milliseconds, leading to a 5x increase.
   - **Type-ii Services:** For ServiceX5, we conducted two tests differing only by the IP from which the DoERS requests were sent. If the DoERS requests were sent from a different IP, no increase in response time was observed. However, if sent from the same IP, the response time increased significantly, as shown in Figure 9a. Similar experiments on ServiceX4 showed similar results, with a 6x slowdown when using the same API key.
   - **Single-Request Memory DoERS:** For RPC services with no gas limits, a single RPC request to execute `exhaustMem` can bypass any load balancing. On ServiceX2, a single request with parameters `eth_call(exhaustMem(5 * 10^7))` resulted in a 20x increase in response time. On ServiceX5, a single request with parameters `eth_call(exhaustMem(1 * 10^9))` increased the response time by 150x.

#### B. Evaluation on a Local Full Node

To evaluate the damage caused by DoERS more extensively, we conducted experiments on a local machine under our control. The machine was a blade server with a 32-core 2.60GHz Intel(R) Xeon(R) CPU (E5-2640 v3), 256 GB RAM, and 4 TB SSD disk. We set up a Geth v1.99 client and fully synchronized it with the Ethereum mainnet. We turned on the RPC on this full node with default settings.

**First Experiment: Block Synchronization Slowdown**
- **Methodology:** We measured the local victim node's current block height, denoted by \(B_v\), and the block height of a regular mainnet node, denoted by \(B_r\). We recorded the initial block height before the attack, \(B_0\). We reported the block synchronization slowdown as \(\frac{B_r(10) - B_v(10)}{B_r(10) - B_0}\), where \(B_r(10)/B_v(10)\) is the block height 10 minutes after the attack starts.
- **Results:** The block synchronization slowdown reached as high as 96% with attack parameters \((CPU, 1M, 100)\). When the payload size was 0.1M, the slowdown was significant.

**Summary of Attack Parameters:**
- Table I summarizes the effective attack parameters found on these services. Most existing services, with or without gas limits, can be successfully attacked, causing an observable response-time increase by at least 3.8x. For example, on ServiceX2, the parameters to cause a 3.8x increase are \((CPU, 0.15M, 30)\); note that a payload size of 0.15M amounts to 0.2 block gas. Currently, ServiceX2 does not set gas limits, but our results imply that a gas limit of 10 block gas would cause a 5x response-time increase. We observed that the minimally effective payload sizes differ across services, likely due to varying hardware specifications.