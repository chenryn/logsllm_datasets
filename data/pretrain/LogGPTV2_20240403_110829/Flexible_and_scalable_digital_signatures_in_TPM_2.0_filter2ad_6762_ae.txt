1 ··· gxn
n gxt
t gxd
d )α.
n gxt
1 ··· gxn
1 ··· gxn
t hd) = (g0gx1
The issuing token protocol requires no additional computa-
tion from the device as long as the device outputs the device
public key hd to the prover. The prover and the issuer can
run the issuing token protocol based on the following agreed
value: γ = (g0gx1
d ).
The presenting token protocol requires interaction of the
device as follows: The device optionally computes gs =
HG(str) whereH G : {0, 1}∗ → G is a collision-resistent hash
function outputting elements in G and Ps = gxd
s . The value
Ps is a pseudonym of the U-Prove token with regard to a
speciﬁc scope str. The purpose of the (gs, Ps) pair is similar
to (J, K) pair in DAA: used for checking linkability between
diﬀerent U-Prove tokens. For a veriﬁer with a speciﬁc scope
str, she can link two presenting token protocols from a de-
vice, even if two diﬀerent tokens are used. The device and
t gxd
n gxt
46the prover then jointly compute the signature of knowledge:
SPK{(α, xd,{xi}i∈U ,{oi}i∈C ) : {ci = gxi goi
d )α ∧ Ps = gxd
∧ h = (g0gx1
1 ··· gxn
1 }i∈C
s }(m, md).
t gxd
n gxt
The device and the prover can compute the presenting token
protocol as follows:
1. The prover computes xi from Ai for i ∈ {1, . . . , n},
and generates w0, wd ← Zp at random and wi ← Zp
at random for i ∈ U .
2. The prover sends str to the device.
3. The device computes w
s (cid:10)= ∅, the device computes gs := HG(str), a
(cid:3)
p := gw
and Ps := gxd
s . The device returns ad, a
(cid:3)
p, and Ps.
If
(cid:2)
d
s ,
(cid:3)
d
(cid:2)
← Zp and ad := gw
d
d .
4. The prover computes
SPK{(α,{xi}i∈U ,{oi}i∈C ) :{c i = gxi goi
1 }i∈C
t hd)α}(m, md).
i∈U gwi
1 ··· gxn
∧ h = (g0gx1
n gxt
Q
i )gwd
as follows: Compute a = H(hw0 (
d ad) and
i ← Zp
p). For each i ∈ C, choose oi, w
(cid:3)
(cid:3)
ap = H(gwd
(cid:2)
1 and ai := H(gwi gw
and compute ci := gxi goi
i
1 ). Com-
d := H(a, D,{xi}i∈D, C,{c i, ai}i∈C , ap, Ps, m),
(cid:3)
pute m
−1 mod p. For each
c := H(md, m
i ∈ U , compute ri := wi − cxi mod p. For each i ∈ C,
compute r
(cid:3)
d) and r0 := w0 + cα
i − coi mod p.
(cid:3)
(cid:3)
i := w
a
s
5. The prover sends md, m
(cid:3)
d to the device.
6. The device computes c := H(md, m
cxd mod p, and then outputs r
(cid:3)
d + wd mod p.
7. The prover computes rd := r
(cid:3)
d), and r
(cid:3)
d to the prover.
d := wd −
(cid:3)
The signature of the presenting token protocol is: ({Ai}i∈D, a,
(ap, Ps), r0,{ri}i∈U , rd,{ci, ai, r
i}i∈C ). In the next subsec-
(cid:3)
tion, we will discuss how to make use of a TPM implement-
ing the TPM 2.0 speciﬁcation as such a device.
5.3 Using TPM 2.0 as Protected Device
To enable TPM 2.0 as protected device for U-Prove, the
prover can compute the presenting token protocol as follows:
1. The prover runs the ﬁrst step of the presenting token
protocol in Section 5.2.
2. The prover loads the device key blob into the TPM and
calls the TPM2 Commit() command with (gd, ˆs, ˆy) as
input where HG(str) = (H(ˆs), ˆy). The prover obtains
(ad = R1, a
(cid:3)
p = R2, Ps = K2).
3. The prover runs Step 4 of the presenting token protocol
in Section 5.2.
m
4. The prover calls the TPM2 Sign() command with (md,
(cid:3)
d) as input and obtains (c, r
(cid:3)
d + wd mod p and outputs
the signature of the protocol ({Ai}i∈D, a,(a p, Ps), r0,
{ri}i∈U , rd,{ci, ai, r
5. The prover computes rd := r
i}i∈C ).
(cid:3)
(cid:3)
d = s).
Since both the TPM2 Commit() and TPM2 Sign() com-
mands have already been used to implement the two DAA
schemes as described in Section 4, the implementation of
U-Prove in TPM 2.0 does not require any extra TPM re-
sources.
6. CONCLUSION AND FUTURE WORK
We have presented a new digital signature primitive in
TPM 2.0 with provable security. The interesting and unique
property of this TPM signature primitive is that it can be
called by diﬀerent software programmes, in order to imple-
ment diﬀerent cryptographic schemes and protocols, such as
DAA, U-Prove, and Schnorr signatures.
Future work includes: (1) Explore other usages of this
TPM signature primitive. (2) Provide a more tight secu-
rity proof of the TPM signature primitive. In particular we
would like to see an answer of the question whether secu-
rity of this primitive can be proved without the static DH
assumption or without the random oracle model. (3) Con-
struct a new tpm.sign scheme which can be proved secure
under a weaker assumption but without adding much cost.
Acknowledgement
We thank Ernie Brickell, Chris Newton, Graeme Proudler,
Claire Vishik, Monty Wiseman and David Wooten for their
useful inputs and discussions. We also thank the TCG TPM
working group for their support to this work. We thank Fan
Qin and Liu Xin from Nationz Technologies for providing
the TPM 2.0 performance data. We appreciate Kevin Butler
and anonymous CCS reviewers for their helpful comments.
7. REFERENCES
[1] ISO/IEC 11889:2009 Information technology –
Security techniques – Trusted platform module.
[2] Michael Backes, Matteo Maﬀei, and Dominique
Unruh. Zero-knowledge in the applied pi-calculus and
automated veriﬁcation of the direct anonymous
attestation protocol. In Proceedings of IEEE
Symposium on Security and Privacy, pages 202–215.
IEEE Computer Society, 2008.
[3] D. Bernhard, G. Fuchsbauer, E. Ghadaﬁ, N. P. Smart,
and B. Warinschi. Anonymous attestation with
user-controlled linkability. International Journal of
Information Security, 12(3):219–249, 2013.
[4] Stefan A. Brands. Rethinking Public Key
Infrastructures and Digital Certiﬁcates: Building in
Privacy. MIT Press, August 2000.
[5] Ernie Brickell, Jan Camenisch, and Liqun Chen.
Direct anonymous attestation. In Proceedings of the
11th ACM Conference on Computer and
Communications Security, pages 132–145. ACM Press,
2004.
[6] Ernie Brickell, Liqun Chen, and Jiangtao Li. A new
direct anonymous attestation scheme from bilinear
maps. In Proceedings of 1st International Conference
on Trusted Computing, volume 4968 of LNCS, pages
166–178. Springer, 2008.
[7] Ernie Brickell, Liqun Chen, and Jiangtao Li.
Simpliﬁed security notions of direct anonymous
attestation and a concrete scheme from pairings.
International Journal of Information Security,
8(5):315–330, 2009.
[8] Ernie Brickell, Liqun Chen, and Jiangtao Li. A
(corrected) DAA scheme using batch proof and
veriﬁcation. In Proceedings of 3rd International
Conference on Trusted Systems, volume 7222 of
LNCS, pages 304–337. Springer, 2011.
47[9] Ernie Brickell and Jiangtao Li. Enhanced Privacy ID:
A direct anonymous attestation scheme with enhanced
revocation capabilities. In Proceedings of the 6th ACM
Workshop on Privacy in the Electronic Society, pages
21–30, October 2007.
[10] Ernie Brickell and Jiangtao Li. A pairing-based DAA
scheme further reducing TPM resources. In
Proceedings of 3rd International Conference on Trust
and Trustworthy Computing, volume 6101 of LNCS,
pages 181–195. Springer, 2010.
[11] Jan Camenisch and Anna Lysyanskaya. Signature
schemes and anonymous credentials from bilinear
maps. In Advances in Cryptology — CRYPTO ’04,
volume 3152 of LNCS, pages 56–72. Springer, 2004.
[12] David Chaum and Hans Van Antwerpen. Undeniable
signatures. In Advances in Cryptology — CRYPTO
’89, volume 435 of LNCS, pages 212–216. Springer,
1989.
[13] Liqun Chen. A DAA scheme using batch proof and
veriﬁcation. In Proceedings of the 3rd International
Conference on Trust and Trustworthy Computing,
volume 6101 of LNCS, pages 166–180. Springer, 2010.
[14] Liqun Chen, Paul Morrissey, and Nigel P. Smart.
Pairings in trusted computing. In Proceedings of the
2nd International Conference on Pairing-Based
Cryptography, volume 5209 of LNCS, pages 1–17.
Springer, 2008.
[15] Liqun Chen, Siaw-Lynn Ng, and Guilin Wang.
Threshold anonymous announcement in VANETs.
IEEE Journal on Selected Areas in Communications,
Special Issue on Vehicular Communications and
Networks, 2010.
[16] Liqun Chen, Dan Page, and Nigel P. Smart. On the
design and implementation of an eﬃcient DAA
scheme. In Proceedings of the 9th Smart Card
Research and Advanced Application IFIP Conference.
Springer, 2010.
[17] Xiaofeng Chen and Dengguo Feng. Direct anonymous
attestation for next generation TPM. Journal of
Computers, 3(12):43–50, 2008.
[18] Kurt Dietrich. Anonymous client authentication for
transport layer security. In Communications and
Multimedia Security, volume 6109 of LNCS, pages
268–280, 2010.
[19] Taher El Gamal. A public key cryptosystem and a
signature scheme based on discrete logarithms. In
Advances in Cryptology — CRYPTO ’84, volume 196
of LNCS, pages 10–18. Springer, 1985.
[20] Amos Fiat and Adi Shamir. How to prove yourself:
Practical solutions to identiﬁcation and signature
problems. In Advances in Cryptology — CRYPTO ’86,
volume 263 of LNCS, pages 186–194. Springer, 1987.
[21] Warwick Ford and Burton S. Kaliski. Server-assisted
generation of a strong secret from a password. In
Proceedings of the IEEE 9th International Workshops
on Enabling Technologies: Infrastructure for
Collaborative Enterprises, pages 176–180, 2000.
[22] He Ge and Stephen R. Tate. A direct anonymous
attestation scheme for embedded devices. In
Proceeding of 10th International Conference on
Practice and Theory in Public Key Cryptography,
volume 4450 of LNCS, pages 16–30. Springer, 2007.
[23] Adrian Leung and Chris J. Mitchell. Ninja: Non
identity based, privacy preserving authentication for
ubiquitous environments. In Proceedings of 9th
International Conference on Ubiquitous Computing,
volume 4717 of LNCS, pages 73–90. Springer, 2007.
[24] Microsoft U-Prove Community Technology. U-Prove
cryptographic speciﬁcation version 1.1, 2013.
http://www.microsoft.com/u-prove.
[25] Torben P. Pedersen. Non-interactive and
information-theoretic secure veriﬁable secret sharing.
In Advances in Cryptology — CRYPTO ’91, volume
576 of LNCS, pages 129–140. Springer, 1991.
[26] David Pointcheval and Jacques Stern. Security
arguments for digital signatures and blind signatures.
Journal of Cryptology, 13(3):361–396, 2000.
[27] Carsten Rudolph. Covert identity information in direct
anonymous attestation (DAA). In Proceedings of the
IFIP TC-11 22nd International Information Security
Conference (SEC), pages 443–448. Springer, 2007.
[28] Claus P. Schnorr. Eﬃcient identiﬁcation and
signatures for smart cards. Journal of Cryptology,
4(3):161–174, 1991.
[29] Ben Smyth, Mark Ryan, and Liqun Chen. Direct
anonymous attestation (DAA): Ensuring privacy with
corrupt administrators. In Proceedings of 4th European
Workshop on Security and Privacy in Ad-hoc and
Sensor Networks, volume 4572 of LNCS, pages
218–231. Springer, 2007.
[30] Trusted Computing Group. TCG TPM speciﬁcation
1.2, 2003. http://www.trustedcomputinggroup.org.
[31] Trusted Computing Group. TCG TPM speciﬁcation
2.0, 2013. http://www.trustedcomputinggroup.org/
resources/trusted_platform_module_
specifications_in_public_review.
[32] David Wooten. Private communications.
APPENDIX
A. COMPUTATION OF HG
We ﬁrst describe a method of constructing HG : {0, 1}∗ →
G, where G is an elliptic curve group E : y2 = x3 + ax + b
over Fq with cofactor = 1. Given a message m ∈ {0, 1}∗
,
HG(m) can be computed as follows:
1. Set i := 0 be a 32-bit unsigned integer.
√
2. Compute x := H(i, m).
3. Compute z := x3 + ax + b mod q.
4. Compute y :=
5. Set y := min(y, q − y).
6. Output the result as (x, y).
z mod q. If y does not exist, set i :=
i + 1, repeat step 2 if i < 232, otherwise, report failure.
The host platform can help the TPM compute HG(m),
yet the TPM can verify the computation as follows. Given
m, the host runs the above algorithm. For a successful exe-
cution, let ˆs := (i, m) and ˆy be the y value in the last step.
The host sends ˆs and ˆy to the TPM. The TPM computes
HG(m) := (H(ˆs), ˆy). This is the ﬁrst step of the TPM 2.0
commit command.
48