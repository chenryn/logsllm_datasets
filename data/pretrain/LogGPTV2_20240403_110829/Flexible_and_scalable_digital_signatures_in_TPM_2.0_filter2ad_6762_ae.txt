# 优化后的文本

## 1. 发行令牌协议
发行令牌协议不需要设备进行额外的计算，只要设备向验证者输出其公钥 \( h_d \)。验证者和发行者可以根据以下约定值运行发行令牌协议：\(\gamma = (g_0 g_{x_1}^d)\)。

## 2. 呈现令牌协议
呈现令牌协议需要设备参与如下：
- 设备可选地计算 \( g_s = H_G(str) \)，其中 \( H_G: \{0, 1\}^* \to G \) 是一个抗碰撞哈希函数，输出在群 \( G \) 中的元素。令 \( P_s = g_s^{xd} \)。
- \( P_s \) 是 U-Prove 令牌针对特定范围 \( str \) 的假名。\( (g_s, P_s) \) 对的作用类似于 DAA 中的 \( (J, K) \) 对，用于检查不同 U-Prove 令牌之间的链接性。
- 验证者可以使用特定范围 \( str \) 来链接来自同一设备的两个呈现令牌协议，即使使用了不同的令牌。

设备和验证者共同计算知识签名：
\[ SPK\{(α, x_d, \{x_i\}_{i \in U}, \{o_i\}_{i \in C}) : \{c_i = g^{x_i} g_d^{o_i}\} \land P_s = g_s^{x_d} \land h = (g_0 g_{x_1}^d)^α \}(m, m_d) \]

### 协议步骤
1. **验证者** 计算从 \( A_i \) 得到的 \( x_i \)（对于 \( i \in \{1, \ldots, n\} \)），并随机生成 \( w_0, w_d \leftarrow Z_p \) 和 \( w_i \leftarrow Z_p \)（对于 \( i \in U \)）。
2. **验证者** 将 \( str \) 发送给设备。
3. **设备** 计算 \( w_s \leftarrow Z_p \) 和 \( P_s := g_s^{x_d} \)。如果 \( s \neq \emptyset \)，则设备计算 \( g_s := H_G(str) \) 并返回 \( a_d, a_p \) 和 \( P_s \)。
4. **验证者** 计算
   \[ SPK\{(α, \{x_i\}_{i \in U}, \{o_i\}_{i \in C}) : \{c_i = g^{x_i} g_d^{o_i}\} \land h = (g_0 g_{x_1}^d)^α \}(m, m_d) \]
5. **验证者** 将 \( m_d, m, a_d, a_p \) 发送给设备。
6. **设备** 计算 \( c := H(m_d, m) \)，然后输出 \( r_d := w_d - c x_d \mod p \)。
7. **验证者** 计算 \( r_d := w_d - c x_d \mod p \) 并将 \( r_d \) 发送给验证者。

签名结果为：\(({A_i}_{i \in D}, a, (a_p, P_s), r_0, {r_i}_{i \in U}, r_d, {c_i, a_i, r_i}_{i \in C})\)。

## 3. 使用 TPM 2.0 作为受保护设备
为了使 TPM 2.0 成为 U-Prove 的受保护设备，验证者可以按照以下步骤计算呈现令牌协议：

1. **验证者** 运行第 5.2 节中的呈现令牌协议的第一步。
2. **验证者** 将设备密钥 blob 加载到 TPM，并调用 TPM2 Commit() 命令，输入为 \( (g_d, \hat{s}, \hat{y}) \)，其中 \( H_G(str) = (H(\hat{s}), \hat{y}) \)。验证者获得 \( (a_d = R1, a_p = R2, P_s = K2) \)。
3. **验证者** 运行第 5.2 节中的呈现令牌协议的第四步。
4. **验证者** 调用 TPM2 Sign() 命令，输入为 \( (m_d, \hat{m}) \)，并获得 \( (c, r_d + w_d \mod p) \)，输出协议签名。
5. **验证者** 计算 \( r_d := r_d + w_d \mod p \) 并输出签名。

由于 TPM2 Commit() 和 TPM2 Sign() 命令已经在第 4 节中用于实现两种 DAA 方案，因此在 TPM 2.0 中实现 U-Prove 不需要额外的 TPM 资源。

## 4. 结论与未来工作
我们提出了一种新的 TPM 2.0 数字签名原语，并证明了其安全性。该 TPM 签名原语的独特之处在于它可以被不同的软件程序调用，以实现不同的密码方案和协议，如 DAA、U-Prove 和 Schnorr 签名。

未来的工作包括：
1. 探索这种 TPM 签名原语的其他用途。
2. 提供更严格的 TPM 签名原语的安全证明，特别是是否可以在不依赖静态 DH 假设或随机预言机模型的情况下证明其安全性。
3. 构建一个新的 tpm.sign 方案，可以在较弱的假设下证明安全，且不会增加太多成本。

## 5. 致谢
感谢 Ernie Brickell、Chris Newton、Graeme Proudler、Claire Vishik、Monty Wiseman 和 David Wooten 提供的有用输入和讨论。感谢 TCG TPM 工作组对此工作的支持。感谢 Nationz Technologies 的 Fan Qin 和 Liu Xin 提供的 TPM 2.0 性能数据。感谢 Kevin Butler 和匿名 CCS 审稿人的宝贵意见。

## 6. 参考文献
[1] ISO/IEC 11889:2009 信息技术——安全技术——可信平台模块。
[2] Michael Backes, Matteo Maffei, and Dominique Unruh. 应用 π-演算中的零知识及直接匿名认证协议的自动验证。IEEE 安全与隐私研讨会论文集，2008 年。
[3] D. Bernhard, G. Fuchsbauer, E. Ghadafi, N. P. Smart, and B. Warinschi. 用户控制链接性的匿名认证。国际信息安全杂志，2013 年。
[4] Stefan A. Brands. 重新思考公钥基础设施和数字证书：构建隐私。MIT 出版社，2000 年 8 月。
[5] Ernie Brickell, Jan Camenisch, and Liqun Chen. 直接匿名认证。ACM 计算机与通信安全会议论文集，2004 年。
[6] Ernie Brickell, Liqun Chen, and Jiangtao Li. 基于双线性映射的新直接匿名认证方案。国际可信计算会议论文集，2008 年。
[7] Ernie Brickell, Liqun Chen, and Jiangtao Li. 简化的直接匿名认证安全概念及基于配对的具体方案。国际信息安全杂志，2009 年。
[8] Ernie Brickell, Liqun Chen, and Jiangtao Li. 使用批量证明和验证的 DAA 方案。国际可信系统会议论文集，2011 年。
[9] Ernie Brickell and Jiangtao Li. 增强隐私 ID：具有增强撤销功能的直接匿名认证方案。ACM 电子社会隐私研讨会论文集，2007 年。
[10] Ernie Brickell and Jiangtao Li. 进一步减少 TPM 资源的基于配对的 DAA 方案。国际可信计算会议论文集，2010 年。
[11] Jan Camenisch and Anna Lysyanskaya. 基于双线性映射的签名方案和匿名凭证。CRYPTO '04 会议论文集，2004 年。
[12] David Chaum and Hans Van Antwerpen. 不可否认签名。CRYPTO '89 会议论文集，1989 年。
[13] Liqun Chen. 使用批量证明和验证的 DAA 方案。国际可信计算会议论文集，2010 年。
[14] Liqun Chen, Paul Morrissey, and Nigel P. Smart. 可信计算中的配对。国际配对密码学会议论文集，2008 年。
[15] Liqun Chen, Siaw-Lynn Ng, and Guilin Wang. VANETs 中的门限匿名公告。IEEE 选定区域通信期刊，2010 年。
[16] Liqun Chen, Dan Page, and Nigel P. Smart. 高效 DAA 方案的设计与实现。智能卡研究与高级应用 IFIP 会议论文集，2010 年。
[17] Xiaofeng Chen and Dengguo Feng. 下一代 TPM 的直接匿名认证。计算机期刊，2008 年。
[18] Kurt Dietrich. 传输层安全的匿名客户端认证。通信和多媒体安全会议论文集，2010 年。
[19] Taher El Gamal. 基于离散对数的公钥密码系统和签名方案。CRYPTO '84 会议论文集，1985 年。
[20] Amos Fiat and Adi Shamir. 如何证明自己：身份识别和签名问题的实际解决方案。CRYPTO '86 会议论文集，1987 年。
[21] Warwick Ford and Burton S. Kaliski. 服务器辅助的强秘密生成。IEEE 第九届启用技术国际研讨会论文集，2000 年。
[22] He Ge and Stephen R. Tate. 嵌入式设备的直接匿名认证方案。公钥密码学实践与理论国际会议论文集，2007 年。
[23] Adrian Leung and Chris J. Mitchell. Ninja：非基于身份的、保护隐私的无处不在环境认证。无处不在计算国际会议论文集，2007 年。
[24] Microsoft U-Prove 社区技术。U-Prove 密码规范版本 1.1，2013 年。http://www.microsoft.com/u-prove。
[25] Torben P. Pedersen. 非交互式和信息论安全的可验证秘密共享。CRYPTO '91 会议论文集，1991 年。
[26] David Pointcheval and Jacques Stern. 数字签名和盲签名的安全论证。密码学期刊，2000 年。
[27] Carsten Rudolph. 直接匿名认证 (DAA) 中的隐蔽身份信息。IFIP TC-11 第二十二届国际信息安全会议论文集，2007 年。
[28] Claus P. Schnorr. 智能卡的有效识别和签名。密码学期刊，1991 年。
[29] Ben Smyth, Mark Ryan, and Liqun Chen. 直接匿名认证 (DAA)：确保隐私与腐败管理员。欧洲无线传感器网络安全与隐私研讨会论文集，2007 年。
[30] 可信计算组织。TCG TPM 规范 1.2，2003 年。http://www.trustedcomputinggroup.org。
[31] 可信计算组织。TCG TPM 规范 2.0，2013 年。http://www.trustedcomputinggroup.org/resources/trusted_platform_module_specifications_in_public_review。
[32] David Wooten. 私人通信。

## 附录
### A. \( H_G \) 的计算
我们首先描述一种构造 \( H_G: \{0, 1\}^* \to G \) 的方法，其中 \( G \) 是椭圆曲线群 \( E: y^2 = x^3 + ax + b \) 在有限域 \( F_q \) 上的子群，且共因子为 1。给定消息 \( m \in \{0, 1\}^* \)，\( H_G(m) \) 可以按以下步骤计算：

1. 将 \( i := 0 \) 设置为 32 位无符号整数。
2. 计算 \( x := H(i, m) \)。
3. 计算 \( z := x^3 + ax + b \mod q \)。
4. 计算 \( y := \sqrt{z} \mod q \)。如果 \( y \) 不存在，则设置 \( i := i + 1 \)，重复步骤 2，直到 \( i < 2^{32} \)，否则报告失败。
5. 设置 \( y := \min(y, q - y) \)。
6. 输出结果为 \( (x, y) \)。

主机平台可以帮助 TPM 计算 \( H_G(m) \)，但 TPM 可以通过以下方式验证计算结果。给定 \( m \)，主机运行上述算法。对于成功的执行，令 \( \hat{s} := (i, m) \) 和 \( \hat{y} \) 为最后一步中的 \( y \) 值。主机将 \( \hat{s} \) 和 \( \hat{y} \) 发送到 TPM。TPM 计算 \( H_G(m) := (H(\hat{s}), \hat{y}) \)。这是 TPM 2.0 commit 命令的第一步。