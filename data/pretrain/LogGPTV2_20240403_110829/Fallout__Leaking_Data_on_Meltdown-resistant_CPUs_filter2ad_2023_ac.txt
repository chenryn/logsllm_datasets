recover the value written by this store. Finally, the kernel module
returns to user space.
We evaluate the accuracy of our attack in Figure 6. The horizontal
axis indicates the number of stores performed in the kernel module
]
%
[
y
c
a
r
u
c
c
A
d
a
e
R
100
80
60
40
20
0
0
Coffee Lake R
Kaby Lake
Skylake
10
20
30
40
50
Number of Stores in the Kernel
Figure 6: The success rate when recovering kernel values
from user space as a function of the number of kernel stores.
(including the last targeted store), and the vertical axis is the success
rate. For each data point, we tested the attack on all possible page
offsets for the last kernel write, 100 times for each offset, reporting
the success rate.
For our evaluation, we use three Intel machines with Skylake (i7-
6700), Kaby Lake (i7-7600) and Coffee Lake R (i9-9900K) processors,
each running a fully updated Ubuntu 16.04. As Figure 6 shows, the
kernel module needs to perform 10 or more writes (to different
addresses) before returning to the user for the attack to succeed at
recovering the last kernel store with 50–80% success rate. Finally,
recovering values from a kernel performing a single write before
returning can be done with a success rate of 0.05%.
On processors vulnerable to Meltdown, disabling the KAISER
patch exposes the machine to Meltdown attacks on the kernel.
However, on the Coffee Lake R processor, which includes hardware
countermeasures for Meltdown, KAISER is disabled by default. In
particular, the experiments for this processor in Figure 6 are with
the default Ubuntu configuration. This means that the presence of
the hardware countermeasures in Intel’s latest CPU generations led
to software behavior that is more vulnerable to our attack compared
to systems with older CPUs.
4.2 Attacking the AES-NI Key Schedule
We now proceed to a more realistic scenario. Specifically, we show
how the WTF shortcut can leak to a user the secret encryption keys
processed by the kernel.
The Linux kernel cryptography API supports several standard
cryptographic schemes that are available to third-party kernel mod-
ules and device drivers which need cryptography. For example, the
Linux key management facility and disk encryption services, such
as eCryptfs [32], heavily rely on this cryptographic library.
To show leakage from the standard cryptographic API, we im-
plemented a kernel module that uses the library to provide user
applications with an encryption oracle. We further implemented a
user application that uses the kernel module. The AES keys that
the kernel module uses are only stored in the kernel and are never
shared with the user. However, our application exploits the WTF
shortcut to leak these keys from the kernel. We now describe the
attack in further details.
AES and AES-NI. A 128-bit AES encryption or decryption opera-
tion consists of 10 rounds. The AES key schedule algorithm expands
the AES master key to generate a separate 128-bit subkey for each
of these rounds. An important property of the key scheduling algo-
rithm is that it is reversible. Thus, given a subkey, we can reverse
the key scheduling algorithm to recover the master key. For further
information on AES, we refer to FIPS [59].
Since encryption is a performance-critical operation and to pro-
tect against side-channel attacks [62], recent Intel processors imple-
ment the AES-NI instruction set [31], which provides instructions
that perform parts of the AES operations. In particular, the aeskey-
genassist instruction performs part of the key schedule algorithm.
Key Scheduling in Linux. The Linux implementation stores the
master key and the 10 subkeys in consecutive memory locations.
With each subkey occupying 16 bytes, the total size of the expanded
key is 176 bytes. Where available, the Linux kernel cryptography
API uses AES-NI for implementing the AES functionality. Part of
1 aeskeygenassist $0x1, %xmm0, %xmm1
2 callq
3 aeskeygenassist $0x2, %xmm0, %xmm1
4 callq
5 ...
6 :
7 pshufd $0xff,%xmm1,%xmm1
8 shufps $0x10,%xmm0,%xmm4
9 pxor
10 shufps $0x8c,%xmm0,%xmm4
11 pxor
%xmm4,%xmm0
12 pxor
%xmm1,%xmm0
13 movaps %xmm0,(%r10)
14 add
15 retq
%xmm4,%xmm0
$0x10,%r10
Listing 2: AES-NI key schedule.
the code that performs key scheduling for 128-bit AES appears
in Listing 2. Lines 1 and 3 invoke aeskeygenassist to perform a
step of generating a subkey for a round. The code then calls the
function _key_expansion_128, which completes the generation of
the subkey. The process repeats ten times, once for each round. (To
save space we only show two rounds.)
_key_expansion_128 starts at Line 6. It performs the operations
needed to complete the generation of a 128-bit AES subkey. It then
writes the subkey to memory (Line 13) before advancing the pointer
to prepare for storing the next subkey (Line 14) and returning.
Finding the Page Offset. We aim to capture the key by leaking
the values stored in Line 13. For that, the user application repeat-
edly invokes the kernel interface that performs the key expansion
as part of setting up an AES context. Because the AES context is
allocated dynamically, its address depends on the state of the ker-
nel’s memory allocator at the time the context is allocated. This
prevents immediate use of our attack because the attacker does not
know where the subkeys are stored.
We use the WTF shortcut to recover the page offset of the AES
context. Specifically, the user application scans page offsets. For
each offset, it asks the kernel module to initialize the AES context.
It then performs a faulty load from a protected page at the scanned
offset and checks if any data leaked. To reduce the number of
scanned offsets, we observe that, as described above, the size of the
expanded key is 176 bytes. Hence, we can scan at offsets that are
y
c
n
e
u
q
e
r
F
15
10
5
0
0
1
0
x
0
0
9
0
x
0
0
1
1
x
0
0
9
1
x
0
0
1
2
x
0
0
9
2
x
0
0
1
3
x
0
0
9
3
x
0
0
1
4
x
0
0
9
4
x
0
0
1
5
x
0
0
9
5
x
0
0
1
6
x
0
0
9
6
x
0
0
9
7
x
0
0
1
8
x
0
0
9
A
x
0
0
1
B
x
0
0
9
B
x
0
0
1
C
x
0
0
1
D
x
0
0
9
D
x
0
0
9
E
x
0
0
9
F
x
0
Offset
Figure 7: Frequency of observed leaked values. We note that
offset 0x110 shows more leakage than others. Confirming
against the ground truth, we find that all the leaked values
at that offset match the subkey byte.
128 bytes apart and have the confidence that at least one of these
offsets falls within the expanded key. Indeed, running the attack
for five minutes, we get Figure 7. The figure shows the number of
leaked values at each offset over the full five minutes. We note the
spike at offset 0x110. We compare the result to the ground truth and
find that the expanded key indeed falls at offset 0x110. We further
find that the leaked byte matches the value at page offset 0x110.
Key Recovery. Once we find one offset within the expanded key,
we know that neighboring offsets also fall within the expanded key,
and we can use the WTF shortcut to recover the other key bytes. We
experiment with 10 different randomly selected keys and find that
we can recover the 32 bytes of the subkeys of the two final rounds
(rounds 9 and 10) without errors within two minutes. Reversing
the key schedule on the recovered data gives us the master key.
4.3 Reading Data from TSX Transactions
Intel TSX guarantees that computation inside a transaction is either
fully completed, having its outputs committed to memory or fully
reverted if the transaction fails for any reason. In either case, TSX
guarantees that intermediate computation values (which are not
part of the final output) never appear in process memory. Building
on this property, Guan et al. [30] suggest using TSX to protect
cryptographic keys against memory disclosure attacks by keeping
the keys encrypted, decrypting them inside a transaction, and fi-
nally zeroing them out before finishing the transaction. This way,
Guan et al. [30] ensure that the decrypted keys never appear in the
process’ main memory, making them safe from disclosure.
Exploiting the WTF shortcut and Data Bounce against TSX trans-
actions, we are able to successfully recover intermediate values,
and hidden control flow from within completed or aborted TSX
transactions.
5 INVESTIGATING STORE BUFFER LEAKAGE
In this section, we form a foundation for understanding the under-
lying mechanisms involved in WTF and Data Bounce. We start with
a discussion of microcode assists, a hitherto uninvestigated cause
for transient execution that extends the Meltdown vs. Spectre clas-
sification of Canella et al. [10]. We continue with the investigation
of the underlying conditions for both WTF and Data Bounce. We
conclude by testing our attacks in multiple processor generations.
5.1 Microcode Assists
µOPs are typically implemented in hardware. However, when com-
plex processing is required for rare corner cases, a hardware imple-
mentation may not be cost-effective. Instead, if such a case occurs
during the execution of a µOP, the µOP is re-dispatched, i.e., sent
back to the dispatch queue for execution, together with a microcode
assist, a microcode procedure that handles the more complex sce-
nario. Cases in which microcode assists can occur include handling
of subnormal floating point numbers, the use of REP MOV instruc-
tion to copy large arrays, and others [14, 42].
Microcode-Assisted Memory Accesses. According to an Intel
patent [20], when the processor handles a memory access (load or
store) it needs to translate the virtual address specified by the pro-
gram to the corresponding physical address. For that, the processor
first consults the Data Translation Look-aside Buffer (dTLB), which
1 char* victim_page = mmap(..., PAGE_SIZE, ...);
2 char* attacker_page = mmap(..., PAGE_SIZE, ...);
3
4 offset = 7;
5 victim_page[offset] = 42;
6
7 clear_access_bit(attacker_page);
8 memory_access(lut + 4096 * attacker_page[offset]);
9
10 for (i = 0; i < 256; i++) {
11
12
13
14 }
Listing 3: Exploiting the WTF Shortcut with microcode
assists. Note that no fault suppressison is required.