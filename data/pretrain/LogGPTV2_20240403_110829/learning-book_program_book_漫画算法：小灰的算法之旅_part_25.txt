h00
005
1
用户1
用户3
用户4
用户5
信息
信息
信息
信息
002
用户2
信息
001
003
004
005
002
用户1
用户3
用户
用户2
信息
信息
信息
信息
信息
4.接下来，如果业务方请求修改用户4的信息。同样的道理，我们会把
用户4从原来的位置移动到链表的最右侧，并把用户信息的值更新。这
时，链表的最右端是最新被访问的用户4，最左端仍然是最近最少被访
问的用户1。
001
003
005
002
用户1
用户3
用户5
用户2
信息
信息
004
用户4
新信息
001
003
005
002
00
用户1
用户3
用户5
信息
用户2
用户4
信息
信息
信息
新信息
5.后来业务方又要访问用户6，用户6在缓存里没有，需要插入哈希链表
中。假设这时缓存容量已经达到上限，必须先删除最近最少被访问的数
据，那么位于哈希链表最左端的用户1就会被删除，然后再把用户6插入
最右端的位置。
---
## Page 467
001
003
900
002
t00
用户1
用户3
用户5
1
信息
信息
信息
用户
用户4
新信息
003
005
002
004
006
用户3
用户2
前户
用户6
信息
信息
新信息
信息
以上，就是LRU算法的基本思路。
明白了，这真是个巧妙的算法！那么
LRU算法怎么用代码来实现呢？
虽然Java中的LinkedHashMap已经对
哈希链表做了很好的实现，但为了加深印象，我们还是自己写代码
来简单实现一下吧。
1. private Node head;
2.private Node end;
3.//缓存存储上限
4. private int limit;
---
## Page 468
5.
6. private HashMap hashMap;
7.
8.public LRUCache(int limit) {
9.
this.limit = limit;
10.
hashMap = new HashMap();
11.}
12.
13. public String get(String key）{
14.
Node node = hashMap.get(key);
15.
if (node == null){
16.
return null;
17.
18.
refreshNode(node);
19.
return node.value;
20.}
21.
22. public void put(String key, String value) {
23.
Node node = hashMap.get(key);
24.
if (node == null) {
25.
//如果Key不存在，则插入Key-Value
26.
if (hashMap.size() >= limit){
27.
String oldKey = removeNode(head);
28.
hashMap.remove(oldKey);
---
## Page 469
29.
30.
node = new Node(key, value);
31.
addNode(node);
32.
hashMap.put(key, node);
33.
}else{
34.
//如果Key存在，则刷新Key-Value
35.
node.value = value;
36.
refreshNode(node);
37.
38.}
39.
40. public void remove(String key){
41.
Node node = hashMap.get(key);
42.
removeNode(node);
43.
hashMap.remove(key);
44.}
45.
46.
/ **
47.
刷新被访问的节点位置
48.
*
@paramnode被访问的节点
49.
*/
50.
private void refreshNode(Node node）{
51.
//如果访问的是尾节点，则无须移动节点
52.
if (node == end）{
---
## Page 470
53.
return;
54.
55.
//移除节点
56.
removeNode(node);
57.
//重新插入节点
58.
addNode(node);
59.}
60.
61.
/ **
62.
*
删除节点
63.
@paramnode要删除的节点
64.
*/
65.
private String removeNode(Node node) {
66.
if(node == head && node == end){
67.
//移除唯一的节点
68.
head = null;
69.
end = null;
70.
}else if(node == end){
71.
//移除尾节点
72.
end = end.pre;
73.
end.next = null;
74. }else if(node == head){
75.
//移除头节点
76.
head = head.next;
---
## Page 471
77. head.pre = null;
78.
}else{
79.
//移除中间节点
80.
node.pre.next = node.next;
81.
node.next.pre = node.pre;
82.
83.
return node.key;
84.}
85.
86.
/ **
87.
*
尾部插入节点
88.
@param
node要插入的节点
89.
*/
90.
private void addNode(Node node）{
91.
if(end != null) {
92.
end.next = node;
93.
node.pre = end;
94.
node.next = null;
95.
96.
end = node;
97.
if(head == null){
98.
head = node;
99.
100.}
---
## Page 472
101.
102.class Node {
103.
Node(String key, String value){
104.
this.key = key;
105.
this.value = value;
106.
107.
public Node pre;
108.
public Node next;
109.
public String key;
110.
public String value;
111.}
112.
113.public static void main(String[] args) {
114.
LRUCache 1ruCache = new LRUCache(5);
115.
lrucache.put（"o01"，”用户1信息"）;
116.
lrucache.put("oo2"，"用户1信息"）;
117.
lruCache.put（"003"，"用户1信息"）;
118.
lruCache.put（"o04"，"用户1信息"）;
119.
lruCache.put（"005"，"用户1信息"）;
120.
lruCache.get("oo2");
121.
lruCache.put（"o04"，"用户2信息更新"）;
122.
lruCache.put（"oo6"，“用户6信息"）;
123.
System.out.println(1rucache.get("oo1"));;
124.
System.out.println(1rucache.get("oo6"));;
---
## Page 473
125.}
需要注意的是，这段代码不是线程安全的代码，要想做到线程安全，需
要加上synchronized修饰符。
小灰，对于用户系统的需求，你也可
以使用缓存数据库Redis来实现，Redis底层也实现了类似LRU的回
收算法。
啊，你怎么不早说？我直接用
Redis就好了，省得费这么大劲去研究LRU算法。
千万不能这么想，底层原理和算法还
是需要学习的，这样才能让我们更好地去选择技术方案，排查疑难
问题。
---
## Page 474
好了，关于LRU算法就介绍到这里，
咱们下一节再会！
6.4什么是A星寻路算法
6.4.1
一个关于迷宫寻路的需求
小灰，我今天有一
很有意思的需求。
.是什么需求，
说束听听？
---
## Page 475
公司开发了一款“迷宫寻路"的益智游戏。现在
大体上开发得差不多了，但为了让游戏更加刺激，还需要加上一点
新内容。
回
LEVEL
品
TNE
?
008
CHIPS
LEFT
888
LESSON1
Password:BDHP
我的天，咱们公司怎么什么都做
呀？不过看起来很有意思呢！
---
## Page 476
在这个迷宫游戏中，有一些小怪物会攻击主
角，现在希望你给这些小怪物加上聪明的AI（Artificial
Intellingence，人工智能），让它们可以自动绕过迷宫中的障碍
物，寻找到主角的所在。
例如像下面这样。
放心吧，交给我妥妥的！
三天之后.
---
## Page 477
这个需求看起来简单，但是要做出聪明
有效的寻路AI，绕过迷宫所有障碍，还真的不是一件容易的事情
呢！
天响，这可怎么办？
6.4.2
用算法解决问题
喉，还不是被一个需求折腾的！
---
## Page 478
小灰，你怎么最近下班这么晚啊？
事情是这样子的.....（小灰把工
作中的难题告诉了大黄）
小灰，你听说过A星寻路算法吗？
A什么算法？那是什么鬼？
---
## Page 479
是A星寻路算法！它的英文名字叫作
A*searchalgorithm，是一种用于寻找有效路径的算法。
哇，有这么实用的算法？给我科
普一下呗？
好吧，我用一个简单的场景来举例，
咱们看一看A星寻路算法的工作过程。
---
## Page 480
迷宫游戏的场景通常都是由小方格组
成的。假设我们有一个7×5大小的迷宫，上图中绿色的格子是起
点，红色的格子是终点，中间的3个蓝色格子是一堵墙。
AI角色从起点开始，每一步只能向上
下/左右移动1格，且不能穿越墙壁。那么如何让AI角色用最少的步
数到达终点呢？
---
## Page 481
哎呀，这正是我们开发的游戏所
需要的效果，怎么做到呢？
在解决这个问题之前，我们先引入2