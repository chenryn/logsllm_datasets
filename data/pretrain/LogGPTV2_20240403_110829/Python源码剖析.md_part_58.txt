Py_None,&name,
*next,
*fromlist,int level)
fromlisE,
tail,
Pyobject *globals,
*name,
Pyobject_IsTrue(fromlist))
*.t.*.
&name,
*，返回hea
"tail:
返回tail
Pyobject *globals,
bouf
buf
buf,&buflen);
buflen,
level);
&buflen):
locals,fmomlist,level）
Pyobject locals,
01)
Pyobject
---
## Page 395
14.3.1
们可以将x.y.2看作是对一个二元树的遍历的轨迹，其中在遍历的过程中，我们对每个节
结构一层一层地展开的，也就是说，可以看作是对树状结构的遍历操作。更形象一些，我
Object对象。这个fromlist将如何影响import的行为，在以后的章节中将详细剖析。
b，c”这样的动作时，fromlist就不再无效了，而是成为一个诸如（b，c）这样的ryTuple-
fromlist这个参数，那么这个参数代表的是什么东西呢？
动作（见代码清单14-4）。
来越清晰地看到这一点。首先我们来看看import_module_level中get_parent完成的
leve1的主要动作正是实现了对x.y.z这样的树状结构的遍历。在后面的描述中我们会越
应该是滚瓜烂熟了，如下面的伪代码所示：
点都只访问其右子树。对于这样的一个从根到叶节点的遍历操作，在学习数据结构时，就
[import.c]
代码清单14-4
Void travel_tree(tree)
[IMPORT NAME]
*p_buflenl,
在第2节的分析中我们已经发现，Python对x.y，z的主mport动作实际上是沿着树状
最终获得x就是这里import_module_level的返回值，可以看到，返回值依赖于
我们回忆一下本章第1节中列出的IMPORTNAME指令的实现代码。
一般情况下，这个fromlist都是py_None，但是当Python虚拟机进行froma import
whi1e(cai1!=NULL)
head
Pyobject
head get_rightchila(tail);
tail
get
SET_TOP(X)
*pathser
head;
PyEval_Cal10bject(x,W）;
right_child(parent);
level)
get_parent(Pyobject
NULL;
Python源码剖析
*globals,
14.3import机制的实现
char.*buf,Py_ssizet
一深度探索动态语言核心技术
365
---
## Page 396
Python源码剖析
366
行的环境。
以我们这里不考虑level这个参数。
现在有一个packageA，在A中，有名为modi和mod2的两个module。当Python虚
else
其中的函数level
第14章Python模块的动态加载机制
whille
if
*pbuflen
*buf=
naltlestr
7/[1]:获得当前modue的名字
return parent;
sLrncry(buf,
char
(modpath
importmod
parernt
modules
713】
p_buflen=len;
We\PythonBoolt\Srcimport\A
举个例子吧，
深度探索动态语言核心技术
doti
char:
*start
0
-level>o)
*lastdot
/[2]
1
=RyDict_GetItemString(modules
PyDict_GetItem(globals,
PyString_InternFromString(
在package的moaule 中进行import动作
1=NULL）(
0:
一般情况下都为-1，这时，level不对get_parent产生影响，所
假设我们在如图14-25所示的目录结构中考察import动作。
start, len);
=st nchr（start,
PyString_AS_STRING(modname);
strrchr(bue,
图14-25packageA的目录布局
len
PyString_As STRING(modname));
Pystring
个package，这个package是当前的import动作执
inib_
nodl
pathstrY;
GET_sIZE(modname);
namestrl;
path
name.
buf);
mod2
---
## Page 397
空罢了，对于我们的例子，A对应的module对象中的属性集合为“name”：“A”
对象，同时也会设置name属性，但是这时就不设置_path属性了。
会在该module维护的aict中添加两个表示元信息的属性：name_和_path_而
package是import 的边界，import动作不能跨越package进行，所以在package中进行
A和B中也同时有mod1，那么Python究竟该选择哪一个作为mport的对象呢？显然，
中，或Python的标准搜索路径中，这样实际上也才能将package作为module的管理机制。
就是packageA的元信息：path_，即目录A的路径信息。因为一般来说，在A/_init_py
的impor动作是发生在packageA的环境中的。这个所谓的环境，实际上最重要的一点
的module对象，将搜索得到的对象返回。注意[4]处的pyImport_GetMoauleDict即是获
处处理import动作在mod1.py中发生的情况。不管是代码清单14-4的[2]还是代码清单
单14-4的[2]处处理import动作发生在_init_py中发生的情况：而代码清单14-4的[3]
区分目前处理的imoort动作是在_init_py中发生的还是在modl.py中发生的。代码清
中获得_narme_属性，即A或A.modl。随后，再根据globals名字空间中的_path_属性
和modl.py就足够了）中执行Python代码时，这时的global名字空间（globals）就将是
为（name_：“A.mod1”]
import动作时，我们需要package的_path_元信息，以限制对module的搜索范围。
得全局module集合
14-4的[3]，其目的都是获得packageA的名字“A”，并将其拷贝到buf中。
initpy或mod1.py对应的module对象所维护的aict。代码清单14-4的[1]处从globals
“path：“F:PythonBook\Srclimpor\A”；而modi对应的module对象中的属性集合
一个module对象，并且设置其_name_和path
Python虚拟机在执行“importA”时，会为packageA创建一个module对象，同时
假如在packageA中的mport动作能影响到packageB中的mod1，那么如果package
正是因为代码清单14-4的[3]将module的名字“A.mod1”退化为了package的名字“A”，
最后在代码清单14-4的[4]处，根据buE在Pyton的全局module集合中查找名为“”
当在packageA的环境（包括_initpy、mod1.py和mod2.py，但仅考虑_imitpy
统一
一下，我们说，当Python虚拟机import一个package或module时，都会创建
sysjmodules-
一的操作。
Python源码剖析
只不过module对应的path_为
14.3import机制的实现
深度探索动态语言核心技术
367
---
## Page 398
Python源码剖析
368
代码清单14-5
开始了在package环境中对module的import动作见代码清单145。
对应的module对象：Py_Nonea
构，从图14-11中可以看到，在这个树状结构中，module的父节点只能是package，而不
不能说，module1属于module2。我们前面已经看到，module的路径实际上是一种树状结
的。这个约束是由我们在前面所剖析的代码清单14-4的[3]处所完成的动作保证的。
动作都是发生在_main_package环境下的，尽管importmod2这个动作是由moa1触发
下，在这里，区分package和module十分重要。假如Python在_mainpackage下进行
动作都是发生在某一个package的环境中。
可能是另一个module。
径成为这个_main_package的_path_元信息吧。
的path元信息呢，显然Py_None中没有这个信息，那么，就让Python默认的搜索路
package，所以我们强制与它对应的module对象是Py_None，那么我们所需要的pakcage
staticPyobfect
任何一个package中。
么来完善我们的抽象呢？就像我们在交互式环境下进行import动作时，我们并没有处于
个package的环境下。那么如果import动作并不是真的发生在一个package中时，我们怎
径才能找到mod2，因为它的路径为：“Amod2.py”。
的环境下，寻找的module的路径应该基于packageA的路径，只有基于package A的路
对应的module对象，接下来Python虚拟机才知道后续的imoort动作是发生在packageA
[import.c]
main_package，get_parent也需要返回一个与其对应的module对象。然而这个所谓
在获得了import动作执行的package环境之后，Python虚拟机立即通过1oadnext
这样的区别看上去好像有些人工雕凿的痕迹，实际上，它源自Py山on中一个本质的
到此，我们将所有的import动作都归一到同一个抽象原则下：Python中的import
我们假设最初Python执行时，就是在一个系统默认的package
注意我们说import动作是发生在一个package的环境中，而并非一个module的环境
到了现在，我们可以进行这样的一种抽象：Python中的import动作都是发生在某一
第14章Python模块的动态加载机制
一深度探索动态语言核心技术
---
## Page 399
会按照import的进行次序出现如下4种（*p_name，buf）组合：（“xml.sax.xmlreader
的树状结构，比如对于importxml.sax.xmlreader，在整个逐次import的过程中，将
*p_name中存储当前还剩下的module的数状结构，而bu中将存储已经完成import动作
载，前面我们说了，Python还维护着一个modulepool呢。
中，Python首先将获得下一个需要动态加载的package或module，这一部分在代码清单
虚拟的起始节点，但在Python中，这个名为_main_的package实际上是有意义的，它
module的位置结构最终被抽象成了_main_.x.y.z的形势。虽然我们说_main_是一个
import_submodule对m进行import动作，注意这里的mport并不一定就意味着动态加
14-5的[1]1处完成，由于这部分代码比较繁琐，所以这里没有详细列出。
是next函数的结果。为了从next函数得到x，我们需要有一个虚拟的起始节点，这样，
么以x为参数，next函数的结果是y，以y为参数，next函数的结果是z，而x同样也
节点才能是modulea
后加载modulez。从图14-11就可以看出，在x.y.z这样的树状结构中，只有最后一个
种逐次加载的方法，也就是说，Python将首先加载packagex，然后加载packagey，最
p_buflen)
path_元信息就是Python默认的搜索路径。
这样的算法定义出一种序结构，假如在这个序结构上定义一个名为next的函数，那
在第2节的分析中我们已经看到，对于importx.y.z这样的形式，Python采用了一
在load_next函数的参数中，p_name和buf都是由import_module_level中传入，
在获得了需要加载的package或module的名字一
在Pyhon的import 机制中，load_next正是next函数的实现，在load_next函数
return result;
//[]：获得下一个需要加载的package或module的名字
Eyobject
char
ehar
*dot
*nesult;
import_submodule(mod,
=strchr（name)
Py_None && altmod =mod)
后
Python源码剖析
buE):
14.3impor机制的实现
一设为m
一深度操索动态语言核心技术
一之后，load_next调用
369
---
## Page 400
370
14.3.2
Python源码剖析
import的过程被清晰地展示了出来。
这时buf中将存储整个module路径的树形结构。在import_module_level中，整个逐次
只有名为“xml.sax.xmlreader”的module，这就是fullname的作用。
subrnoaule完成了动态加载，需要将新创建的module加入到Python的modulepool中时，
息提供的路径中搜索module，需要搜索的是名为subname的文件：而当import
合sys.modules当import_submoule执行时，Python虚拟机在mod的_path_元信
xmlreader。这涉及import_submodule的两个任务：搜索module和维护全局module集
最终import xmlreader 时，subname 就是xmlreader，而fullname为xmi.sax
的执行环境，import_submoduie需要其中的_path_元信息来完成搜索module的任务，
作，其原形如下：
个逐次import的动作。
static Pyobject*
PyObject
[import.c]
*fullname)
第14章Python模块的动态加载机制
其中，第一个参数mod就是我们在讨论函数get_parent时提到的那个import动作
每一次调用调用1oadnext之后，完成一个部分（package或module）的import，
在1oad_next中调用的import_submodule完成了搜索module并加载module的工
加载module/pakcage
tallE
tail
next
l/altmod
fnomlist)
深度探索动态语言核心技术
1next
head;
loadnext（tail.tail,kname,buf,&buflen）
level(char *name,PyObject *globals,Pyobject *locals,
---
## Page 401
中失败后，会转而尝试在环境altmod中进行impor_submodule的动作。这个altmod究
环境。在1oad_next的代码清单145的[2]处我们看到，当import_submodule在环境mod
submodule中，在这里，我们将发现之前关于mport动作的文字描述将清晰地以代码的
实际上，终Python的一生，altmoa只能有两种选择：1.altmod==mod：2.altmod=
为Py_Nore，这使得Python能够在默认搜索路径下寻找在当前package中不存在的module。
Py_Nore，而其_path_元信息就是Python的默认搜索路径，所以在这种情况下，altmod
中竞然不能进行import sys这样的动作，那Pyhon也只好找块豆腐一头撞死了。Python提
一个名为sys.py）的文件，sysmodule是在Python的默认搜索路径之下的，倘若在modl.py
在packageA中进行的，但是packageA的环境中没有sysmodule（即，该目录下没有
又进行了importsys的动作。根据前面的结论我们知道，当importsys发生时，它是
竟会是什么呢？
个奇怪的altmod，看上去它和第一个参数的作用是一样的：作为import执行的package
代码清单14-6
形式展现出来，
[import.c]
Py_None,
fullname)
还是考虑如图14-25所示的例子，在packageA中有modulemod1，在modl.py中