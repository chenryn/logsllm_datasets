1
0
both ID
i,j are authorized to participate in
i,j and ID
survey sidi. Finally, of course, we do not permit the
attacker to query the Submit oracle for submissions by
idi,j in survey sidi). We call this notion multi-survey
unlinkability. We note that this is a form of concurrent
security as it guarantees unlinkability no matter how
the adversary generates multiple surveys and schedules
the registration of individuals. In the full version of this
paper, we formally deﬁne this notion and show that it
is implied by Deﬁnition 3.
2) Security: Let us now turn to deﬁne security.
The following deﬁnition stipulates that only authorized
users may complete surveys, and only one of their
submissions is counted. We require that this holds even
if the user attacker may register multiple identities, and
see submissions of the attacker’s choice for any other
user of its choice and in any survey (this one, or any
other survey).
if
to
access
oracles
attacker
submission
To begin, we formalize what
it means to give
for
the
users of its choice by deﬁning the stateful oracle
(cid:2)
(1n, sid, pksid, m, id, pkRA, skRA) that operates
Submit
as follows:
the oracle has not previously been
let (outRA, credid) ←
queried on the identity id,
(1n, pkRA, id));
next
(Reg
output Submit(1n, sid, pksid, m, credid). If the oracle
has previously been queried on the identity id, recover
the previously computed credential credid, and directly
output Submit(1n, sid, pksid, m, credid).
(skRA, 1n, pkRA, id), Reg
RA
U
Deﬁnition 4: An ad-hoc survey scheme Γ is secure
against malicious users if for every non-uniform PPT A,
every polynomial p(·), there exists a negligible function
μ(·), such that the following experiment outputs success
with probability at most μ(n) for every n ∈ N,
MU(A, n)
– (vkRA, skRA) ← GenRA(1n)
SA) ← GenSA(1n)
i
– For i = 1 to p(n), let (vk
SA, sk
– Throughout the rest of the experiment, A has access
to oracle GenSurvey(1n,·,·, sk
i
SA) for any i, and
(1n,·,·,·, vkRA, skRA).
Submit
– Let adversary A(1n) concurrently interact with
(skRA, 1n) with adaptively chosen, but unique,
Reg
user identities id ∈ {0, 1}n of its choice. (That is,
A can only use each user identity id in a single
(cid:2) denote the list of user
interaction with Reg
identities selected by A, and let z denote the output
of A after this interaction ﬁnishes.
RA.) Let L
RA
(cid:2)
i
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
(cid:2)
i
SA)
, L, sid, i ← A(1n, z)
– z
– vksid ← GenSurvey(1n, sid, L, sk
– S ← A(1n, z
, vksid)
– Output success if
• |S| > |L ∩ L
(cid:2)| and
• Check(pkSA, pkRA, sid, pksid, Sub) accepts for all
Sub ∈ S,
) ∈ S2,
• For (tok, m, tokauth), (tok
tok (cid:5)= tok
• For all (tok, m, tokauth) ∈ S, (tok, m, tokauth
(cid:2)
)
(cid:2)
was never received as an output from A’s Submit
oracle (where tokauth
is an arbitrary string) when
queried with sid as second input.
These four conditions roughly correspond to the
determining whether A produced more submissions than
allowed, all submissions are valid, all submissions have
different token-numbers, all token-numbers are new, and
no submissions have been modiﬁed.
, tokauth
(cid:2)
, m
.
(cid:2)
(cid:2)
(cid:2)
(cid:2)
Remark: Note that in the above deﬁnition, A is
allowed to talk to p(n) different SAs. It is without loss
of generality to assume that A talks to just a single
SA (that is p(n) = 1). This follows from standard
technique, and is omitted for space reasons.
III. AN AD-HOC SURVEY SCHEME BASED ON
GENERAL ASSUMPTIONS
We assume the reader is familiar with signature
schemes secure against adaptive-chosen message at-
tacks [26], non-interactive commitment schemes [27],
and pseudorandom functions [28]; see [29].
A. Concurrent simulation extractable NIZK
We introduce the new notion of tag-based concurrent
simulation-extractable (cSE) NIZK (a non-interactive
version of tag-based concurrent simulation-extractable
zero-knowledge from [14], [15]); this notion is closely
related to the notion of non-malleability in the explicit
witnesses sense of [30] (which in turn relies on the
notion of simulation-soundness of [13]), and universally
composable UC NIZK of [9]. The former is (a-priori)
weaker than ours in that it only requires extraction from
a single protocol (this notion is referred to as “many-
one” simulation-extractability in [14], [15]) whereas the
latter is stronger in that
it requires extractability to
be done “on-line”. Relying on this new intermediate
notion allows us to strike the right balance between
security and efﬁcient implementability: in particular, we
will present simple and extremely efﬁcient concurrent
simulation-extractable NIZKs in the Random Oracle
model, whereas UC NIZK incurs more overhead.
We ﬁrst start by deﬁning concurrent simulation ex-
tractability. Imagine an attacker A playing man-in-the-
middle between a legitimate prover on the left interac-
381
tion, and a legitimate veriﬁer on the right. More specif-
ically, in the left interaction, attacker A can request
proofs of any true statement x of its choice using any
tag tag of its choice. In the right interaction, A outputs a
list of tags, statements and proofs ( (cid:3)tag, (cid:3)x, (cid:3)π) as well as a
string aux. For every such A, we require the existence
of a simulator-extractor SE that must reconstruct the
view of A and additionally produce witnesses for all
accepting statement-proofs (x, π) ∈ ((cid:3)x, (cid:3)π) on the right
that use a new tag.
(cid:2)
Below, we assume a proof system (D, P, V ) where D
generates a CRS, P is a prover, and V is a veriﬁer. The
function W provides witnesses to theorem statements.
Let real(1n, A, W, z) denote the output of the following
experiment: Run ρ ← D(1n); next give A(1n, z, ρ)
(·,·,·) where P
(cid:2)
(tag, x, ρ) runs
oracle access to P
(cid:2)
(cid:2)
), ρ) where view
is A’s view up
P (tag, x, W (x, view
until this query; ﬁnally, outputs the view of A (that is
a sequence of tag-statement-proof tuples
(tag, x, π) and
the CRS ρ. Given a view view of A, we interpret the
output of A as a sequence of tag-statement-proof tuples
) and some additional output aux. Deﬁne
(tag
the predicate fail(view, (cid:3)w) = 1 if and only if A, when
given the view view, containing the CRS ρ, outputs a
proof π of some statement x with respect to tag tag
such that a) none of the proofs received by A in the
view view use tag tag, b) V accepts the proof π—that
is, V (tag, x, ρ, π) = 1, and c) (cid:3)w does not contain a
witness for x.
, x
, π
(cid:3)
(cid:2)
(cid:2)
(cid:2)
Deﬁnition 5 (Concurrent Simulation-Extractability):
Let (D, P, V ) be a non-interactive proof system for
the language L. We say that (D, P, V ) is concurrently
simulation extractable (cSE) if for every PPT A, there
exists an expected PPT simulator-extractor SE such
that the following two conditions hold:
(Simulatability) For every witness function W (·, view
(cid:2)
)
) ∈ RL(x) for all x ∈ L and
such that W (x, view
, the following ensembles are computationally
all view
indistinguishable
• {real(1n, A, S, W, z)}n∈N,z∈{0,1}∗
• {(view, (cid:3)w) ← SE(1n, z) : view}n,z∈{0,1}∗
(cid:2)
(cid:2)
n
(Extractability) There exists a negligible function μ such
that for every n ∈ N,
Pr[(view, (cid:3)w) ← SE(1
, z) : fail(view, (cid:3)w) = 1] ≤ μ(n)
Additionally, we say that (D, P, V ) is black-box concur-
rently simulation extractable if there exists an expected
˜SE such that for every A, the
PPT oracle-machine
above two conditions hold with respect to SE(1n, z) =
˜SE
A(1n,z,·)
(1n).
1) Simulation extractability in the ROM: The def-
inition of tag-based non-interactive arguments in the
ROM is identical
there
to Deﬁnition 5 except
that
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:56 UTC from IEEE Xplore.  Restrictions apply. 
is no need for procedure D;
instead of sampling
ρ ← D(1n), we sample ρ as random function from
{0, 1}poly(n) → {0, 1}poly(n)
for some appropriate
polynomial; furthermore, instead of providing ρ as input
to P and V , both algorithms have oracle access to ρ. We
make the analogous change in the deﬁnition of the real
experiment in the deﬁnition of simulation extractability
(now additionally, A gets oracle access to ρ instead of
getting it as input). Also, the view of A contains all of
the answers to oracle calls to ρ made by A, and thus
the simulator-extractor SE needs to reconstruct those
(as opposed to reconstructing the whole of ρ).
Simulation-extractability from HVZK:
In this
section we show how to transform any 3-round
special-sound special Honest-veriﬁer Zero-knowledge
(HVZK) [31] proof/argument into a black-box concur-
rently simulation-extractable NIZK in the ROM.
Deﬁnition 6 ([31]): A proof system (P, V ) is a
3 round special-sound Honest-veriﬁer Zero-knowledge
(HVZK) proof/argument for binary relation R if:
1) (three-move form) Let α be the common input to
P and V , and β such that (α, β) ∈ R is private
input to P . (P, V ) has the following three-move
form:
a) P sends a message a to V .
b) V sends a random t-bit challenge string c.
c) P replies z, and V accepts if φ(α, a, c, z) = 1
for some polynomial-time predicate φ.
(cid:2)
2) (special soundness) Given accepting transcripts
) for the instance α such that
(cid:2), there exists a polynomial-time algorithm
(a, c, z) and (a, c
c (cid:5)= c
computing β such that (α, β) ∈ R.
, z
(cid:2)
3) (special honest-veriﬁer ZK) There exists a poly-
nomial time simulator Sim, which on input α and
a random challenge c, outputs an accepting con-
versation of the form (a, c, z), which is identically
distributed to transcript generated by P (α, β) and
V (α) for any (α, β) ∈ R.
Given a protocol Π that
is a 3-round special-
sound Honest-veriﬁer
(HVZK)
proof/argument for binary relation R, we obtain the
tag-based NIZK ˜Π for R by applying the Fiat-Shamir
heuristic to Π and additionally requiring that the tag
tag is hashed—that is, the second-message challenge
c is generated by applying the random oracle ρ to the
ﬁrst message a and the tag tag (i.e., b = ρ(a, tag)).
Zero-knowledge
Theorem 1: Let Π be a special-sound special HVZK
argument for L, where the ﬁrst message a of Π has
ω(log n) min-entropy 8 and the second message b is
8Every special-sound special HVZK argument for a hard-on-the-
average language must have this property: if not, with polynomial
probability two honest executions would have the same ﬁrst message,
but different second messages and thus a witness can be extracted
out.
382
of length ω(log n). Then ˜Π is a tag-based black-box
concurrently simulation-extractable argument.
Proof: (Omitted for space.)
B. The construction
Assuming familiarity with basic cryptographic primi-
tives discussed in the previous section, the construction
is easy to understand at a high-level. We assume that all
users have unique string identiﬁers, e.g. email addresses,
to identify them in the protocol. The RA and SA are
each have keys for digital signatures which are consid-
ered the output of GenRA and GenSA respectively.
the RA veriﬁes that
A user’s secret credential is a random string s. The
user generates the credential by generating a commit-
ment to the random string s and proving the correct-
ness of the commitment to the RA in zero-knowledge.
During registration,
this proof
corresponds to the correct identity of the user and then
authorizes the credential by signing the commitment
and the user id with its signing key. The security of
the signature scheme ensures that only the RA can
authorize legitimate credentials. The signature on the
commitment can be interpreted as a very weak form of
blind-signature in which the RA does not learn anything
about the values being signed, but can verify that the
user has knowledge of the underlying secret.
To generate a survey, an SA generates a unique sid
and individually signs the pair (id, sid) for each user
id that can participate in the survey. We call the list
of all generated signatures L. Only those IDs which
are signed by the SA will be able to complete the given
survey, and the unforgeability properties of the signature
scheme ensure that only the SA can modify the list.
Beneﬁcially, SAs do not need to interact with any other