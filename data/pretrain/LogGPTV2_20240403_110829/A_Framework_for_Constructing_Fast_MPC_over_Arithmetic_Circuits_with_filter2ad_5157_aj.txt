where the parties generate a random key kA for each subset A ⊂
{P1, . . . , Pn} of n−t parties (known only to the parties in the subset).
In addition, for each such subset there is a polynomial fA of degree
t + 1 de(cid:27)ned by the points: (1) fA(0) = 1; (2) fA(i) = 0 for all i such
that Pi ∈ {P1, . . . , Pn} \ A. Then, each party uses the keys it holds
to generate random shares without any interaction. The protocol
is described in Protocol B.1.
PROTOCOL B.1 (The PRSS Protocol for Generating Random
Shares).
Let Fk() be a pseudo-random function with security parameter κ.
• Set-up step: For each A ⊂ {P1, . . . , Pn }, such that |A| = n−t,
the party with the smallest lexicographic index chooses a random
key kA and sends it to all the other parties in A.
• Upon request: For each A ⊂ {P1, . . . , Pn }, such that |A| =
n−t, let fA be a t +1-degree polynomial de(cid:27)ned by the points: (1)
fA(0) = 1; (2) fA(i) = 0 for all i such that Pi ∈ {P1, . . . , Pn }\A.
Then, each party Pi computes

si =
A⊂{P1, . . .,Pn}:|A|=n−t ,Pi ∈A
FkA(id) · fA(i)
where id is public counter that is incremented for each new
request, and de(cid:27)ne si as its share.
Batch generation of random shares using Vandermonde matrices.
The previous protocol is communication free, but its computational
cost grows exponentially with the number of parties, as the number
(cid:1). The next protocol has linear communication
of random keys is(cid:0)n
and computational cost. The idea behind the protocol is to use
the Vandermonde matrix to extract randomness from n random
sharings into n−t random sharings. Let γ1, . . . , γn ∈ F be n distinct
non-zero elements. The Vandermonde matrix (cid:174)V(cid:96) ∈ F(n,(cid:96)) is a matrix
t
def
=
(cid:174)V(cid:96)
(cid:169)(cid:173)(cid:173)(cid:173)(cid:173)(cid:173)(cid:171)
(cid:170)(cid:174)(cid:174)(cid:174)(cid:174)(cid:174)(cid:172)
γ (cid:96)1
γ (cid:96)2
...
γ (cid:96)
n
of n rows and (cid:96) columns de(cid:27)ned by
· · ·
· · ·
. . .
· · ·
1
γ1
1
γ2
...
...
1
γn
We use the notation (cid:174)V −1
to denote the inverse of the Vander-
monde matrix. Likewise, the transpose of the matrix is denoted by
(cid:174)V T
. The Vandermonde matrix has the property that if we take a
(cid:96)
subset of (cid:96) rows to form a square matrix of (cid:96) rows and (cid:96) columns,
then the obtained matrix is guaranteed to be invertible. A conse-
quence of this property is that the Vandermonde matrix can be
used to extract randomness in the following way. First, each party
chooses a random element and shares it to the other parties. Then,
holding a vector of n shares, the parties generate “new” random
shares by multiplying this vector with the Vandermonde matrix. It
can be shown that the obtained shares are sharings of a random
elements in F [6]. The protocol is described in Protocol B.2.
(cid:96)
PROTOCOL B.2 (Batch Generation of random shares using
Vandermonde matrix).
Let (cid:174)Vn−t be the Vandermonde matrix de(cid:27)ned above.
(1) Each party Pi chooses a random element ui ∈ F and run
(2) Holding n shares ([u1], . . . , [un]), each party Pi computes
n−t · ([u1], . . . , [un]), and de(cid:27)nes
share(ui).
([r1], . . . , [rn−t]) = (cid:174)V T
([r1], . . . , [rn−t]) as its output of the protocol.
Note that each party sends n−1 elements to generate n−t shares.
Thus, the amortized communication complexity per generated share
is roughly 2, since t < n2 .
B.2 Protocols For Semi-Honest Multiplication
The GRR protocol. This protocol works by having each party
locally multiply its shares of the inputs, and share the result to all
the other parties. Then, upon holding n shares, each party locally
computes a linear combination of the shares, and de(cid:27)ne the result
as its share on the output wire. The coe(cid:28)cients used for the linear
combination are taken from the (cid:27)rst row of (cid:174)V −1
n , which is the
inverse of the square n × n Vandermonde matrix de(cid:27)ned above. To
understand why the protocol is correct see [25]. The protocol is
described in Protocol B.3.
PROTOCOL B.3 (The GRR Semi-Honest Multiplication Proto-
col).
Let (cid:174)Vn be the Vandermonde matrix de(cid:27)ned above, and let
λ1, . . . , λn be the values in the (cid:27)rst row of (cid:174)V −1
n .
• inputs: The parties hold sharings [x] and [y].
• The protocol:
x , f i
y be the shares held by party Pi . Then, each party
(1) Let f i
Pi computes vi = f i
x · f i
y and run share(vi).
(2) Let h j
i
be the share sent from Pi to Pj in the previous step.
Upon receiving shares from all the other parties, each party
Pi sets its share of x · y to be the result of the linear combi-
nationn
j =1 λj · hi
j
.
PROTOCOL C.1 (Triple Verification - Three-Parties and Repli-
cated Secret Sharing).
• Inputs: The parties hold a triple ([x], [y], [z]) to verify and an
additional random triple ([a], [b], [c]).
• The protocol:
(1) The parties call Fcoin to receive a random element α ∈
F \ {0}.
(2) Each party locally computes [ρ] = α · [x] + [a] and [σ] =
[y] + [b].
(3) The parties run open([ρ]) and open([σ]) as de(cid:27)ned in Sec-
tion 6.2, to receive ρ and σ . If any of the parties received
⊥ in one of the executions, then it sends ⊥ to the other
parties and aborts.
(4) Each party locally computes
[v] = α[z] − [c] + σ · [a] + ρ · [b] − ρ · σ .
Denote by (rj , sj) the share of v held by party Pj .
(5) The parties run the compareview(rj + sj) by having each
Pj sending rj + sj to Pj +1. Upon receiving rj−1 + sj−1 from
Pj−1, party Pj checks that rj = −(rj−1 + sj−1). If yes, it
outputs accept. Else, it sends ⊥ to all the other parties and
outputs ⊥.
If no abort messages are received, then output accept.
(6)
t and s parts of [v] that were viewed in all the executions of the
veri(cid:27)cation protocol in the way described at the end of Section 6.2
(to replace the last call of the open in the veri(cid:27)cation protocol).
At the end of the entire execution, each party Pj computes hj =
HASH(Hj), hj,j+1 = HASH(Hj,j+1) and hj,j−1 = HASH(Hj,j−1)
where HASH() is collision-resistant hash function. Then, each party
Pj sends hj and hj,j+1 to Pj+1. Upon receiving hj−1 and hj−1,j from
Pj, party Pj checks that hj = hj−1 and that hj,j−1 = hj−1,j. If not,
party Pj sends ⊥ to the other parties and aborts. A remark of high
importance is that it is required that the comparisons of hj will
be completed before sending hj,j +1 to Pj+1. This is explained by
observing that in the proof of the veri(cid:27)cation protocol, we rely on
the fact that cheating in the (cid:27)rst two openings was detected before
running the last opening. Thus, in order to maintain this property,
it is necessary to complete the comparison of the view from the
(cid:27)rst openings before sending any data viewed in the last opening.
In the protocol, each party sends exactly n−1 elements, and thus
the overall communication complexity is quadratic in the number
of parties.
The DN protocol. This next protocol, which is an optimized ver-
sion of [17], requires each party to send few (cid:27)eld elements regard-
less of the number of parties. The protocol has a set-up step where
the parties generate two random sharings [r]t and [r]2t of the same
value r, using t-degree and 2t-degree polynomials in respectively.
These shares are then used to multiply x and y which are shared
among the parties. A full description appears in Protocol B.4.
PROTOCOL B.4 (The DN Semi-Honest Multiplication Proto-
col).
Let (cid:174)Vn−t be the Vandermonde matrix de(cid:27)ned above.
• Inputs: The parties hold sharings [x] and [y].
• Setup phase: The parties generate a list of n − t double random
shares {[rk]t , [rk]2t }n−t
k =1 where [rk]t is a sharing of rk using
a t-degree polynomial and [rk]2t is a sharing of rk using a 2t-
degree polynomial. This generation works as follows:
Each party chooses a random element u and shares it twice,
using a t-degree polynomial and a 2t-degree polynomial.
Then, upon holding two vectors of random shares, the parties
multiply each of them with (cid:174)Vn−t as described in Protocol B.2.
(1) The parties locally compute [x] · [y] − [r]2t and send the
result to party P1 ([x] ·[y] is locally computed by each party
multiplying its own shares together).
(2) Party P1 use the (cid:27)rst 2t shares it received from the parties
and its own share to reconstruct x · y − r, and then send it
to all the other parties (Note that this is not the same as in
the reconstruct procedure, as here there is no correctness
check of the shares!).
(3) The parties locally compute [r]t + (xy − r). Each party sets
its result to be its share of x · y.
• The protocol:
C PROTOCOLS FOR THREE-PARTY
COMPUTATION BASED ON REPLICATED
SECRET SHARING
Protocol C.1 is the optimized veri(cid:27)cation of a multiplication triple
using another, for the three-party setting. The di(cid:29)erence between
this protocol and the general veri(cid:27)cation based on opening protocol
presented in Section 3.3 is the replacement of the last opening with
a comparing of views which is su(cid:28)cient in this case to ensure that
the sharing held by the parties is a sharing of 0.
The main protocol for the three-party setting is described in
Protocol C.2. Recall that in this protocol, there is no need for the
correctness check step after the input are shared, as the share pro-
cedure outputs correct shares.
Deferring compareview. In each execution of the open procedure
in the veri(cid:27)cation protocol, the parties are required to compare their
views. Instead of comparing the views each time a sub-protocol is
executed, we can save communication by having the parties storing
their views and comparing them at the end of the entire execution.
Speci(cid:27)cally, each party Pj will need to hold three strings, denoted by
Hj , Hj,j+1 and Hj,j−1. The string Hj will be used to store the views
in the open procedure. The strings Hj,j+1 and Hj,j−1 will store the
PROTOCOL C.2 (Computing an Arithmetic Circuit- Three–
Parties).
• Inputs: Each party Pj where j ∈ {1, 2, 3} holds an input xj ∈
• Auxiliary Input: Same as in Protocol 4.2.
• The protocol – o(cid:29)line phase: Same as in Protocol 4.2.
• The protocol – online phase:
F(cid:96).
(1) Sharing the inputs: For each input wire with an input v,
the parties run share(v) as speci(cid:27)ed in Section 6.2 with the
dealer being the party whose input is associated with that
wire.
k], [bi
k], [ci
(cid:110)([ai
k])(cid:111)N
be the triples generated
k =1 be the triples generated by com-
(2) Circuit emulation: Same as in Protocol 4.2.
(3) Veri(cid:27)cation stage: Before the secrets on the output wires are
reconstructed, the parties verify that all the multiplications
were carried out correctly, as follows.
Let {([xk], [yk], [zk])}N
puting multiplication gates.
For i = 1 to δ:
Let (cid:174)di =
k =1
in ith iteration of the o(cid:31)ine step.
For k = 1, . . . , N : The parties run Protocol C.1 on
input ([xk], [yk], [zk]) and ([ai
k]) to verify
([xk], [yk], [zk]).
(Observe that all executions of Protocol C.1 can be run in
parallel).
If a party did not output accept in every execution, it sends
⊥ to the other parties and outputs ⊥.
If any party received ⊥ in any of the previous steps, then it
outputs ⊥ and halts.
(5) Output reconstruction: For each output wire of the cir-
cuit, the parties run reconstruct([v], j) as speci(cid:27)ed in Sec-
tion 6.2, where [v] is the sharing of the value on the output
wire, and Pj is the party whose output is on the wire.
If a party received ⊥ in any call to the reconstruct proce-
dure, then it sends ⊥ to the other parties, outputs ⊥ and
halts.
k], [bi
k], [ci
(4)
(6)
• Output: Same as in Protocol 4.2.