title:Targeted Attacks on Teleoperated Surgical Robots: Dynamic Model-Based
Detection and Mitigation
author:Homa Alemzadeh and
Daniel Chen and
Xiao Li and
Thenkurussi Kesavadas and
Zbigniew T. Kalbarczyk and
Ravishankar K. Iyer
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Targeted Attacks on Teleoperated Surgical Robots: 
Dynamic Model-based Detection and Mitigation 
Homa Alemzadeh, Daniel Chen, Xiao Li*, Thenkurussi Kesavadas*, Zbigniew T. Kalbarczyk, Ravishankar K. Iyer 
Coordinated Science Laboratory, University of Illinois at Urbana-Champaign, Urbana, IL 61801, USA  
*Health Care Engineering Systems Center, University of Illinois at Urbana-Champaign, Urbana, IL 61801, USA  
{alemzad1, dchen8, kalbarcz, rkiyer}@illinois.edu 
{xiaoli16, kesh}@illinois.edu 
Abstract—This  paper  demonstrates  targeted  cyber-physical 
attacks  on  teleoperated  surgical  robots.  These  attacks  exploit 
vulnerabilities in the robot’s control system to infer a critical time 
during surgery to drive injection of malicious control commands 
to  the  robot.  We  show  that  these  attacks  can  evade  the  safety 
checks  of  the  robot,  lead  to  catastrophic  consequences  in  the 
physical system (e.g., sudden jumps of robotic arms or system’s 
transition  to  an  unwanted  halt  state),  and  cause  patient  injury, 
robot damage, or system unavailability in the middle of a surgery. 
We present a model-based analysis framework that can estimate 
the  consequences  of  control  commands  through  real-time 
computation  of  robot’s  dynamics.  Our  experiments  on  the 
RAVEN II robot demonstrate that this framework can detect and 
mitigate  the  malicious  commands  before  they  manifest  in  the 
physical system with an average accuracy of 90%. 
Keywords—Targeted  Attacks,  Malware,  Telerobotics,  Robotic 
Surgery, RAVEN II robot, Cyber-physical systems 
I.  INTRODUCTION 
Robotic  surgical  systems  are  among  the  most  complex 
medical  cyber-physical  systems.  They  enable  performing 
minimally  invasive  procedures  with  better  visualization  and 
increased precision using 3D magnified views of the surgical 
field  and  tele-manipulated  arms  and  instruments  that  mimic 
human hand movements. During 2007-2013, over 1.74 million 
robotic procedures were performed in the U.S. across various 
surgical  specialties,  including  gynecology,  urology,  general 
surgery, cardiothoracic, and head and neck surgery [1]. The next 
generation of surgical systems are envisioned to be teleoperated 
robots  that  can  operate  in  remote  and  extreme  environments 
such as disaster-stricken areas, battlefields, and outer space [2].  
Past  studies  have  emphasized  the  importance  of  security 
attacks  that  compromise  the  communication  channels  in 
medical devices such as implantable cardiac defibrillators [3], 
wearable  insulin  pumps  [4],  and  teleoperated  surgical  robots 
[5]-[8]. For example, studies [7] and [8] demonstrated denial of 
service (DOS) and man-in-the-middle (MITM) attacks on the 
network communication between the teleoperation console and 
the  control  system  of  a  surgical  robot.  To  the  best  of  our 
knowledge, no previous work has discussed the possibility of 
directly compromising the control systems of surgical robots. It 
is  usually  assumed  that  getting  access  to  the  robot  control 
system is unlikely.  
In this paper, we demonstrate cyber-physical attacks on the 
control system of surgical robots in the event when the attacker 
is able to install a malware to strategically inject faults into the 
control system at critical junctures during surgery. In order to 
install the malware, we assume that the attacker has access to the 
system  as  an  insider  or  through  remote  code  execution.  The 
malware modifies the control commands while preserving their 
legitimate format, making this type of attacks difficult to detect 
without understanding the dynamics of the robot’s manipulators.  
To detect and mitigate such attacks, we have developed a 
model-based analysis framework based on the dynamics of the 
surgical  robot  and  use  it  to  preemptively  determine  if  a 
command  is  malicious  before  the  actual  execution  of  the 
command can progress in the physical robot. We validated the 
detection  experimentally  using  two  real  attack  scenarios 
involving  injection  of  unintended  user  inputs  and  unintended 
motor torque commands. 
The attacks are deployed via a self-triggered malware with 
embedded: (i) logging mechanisms for collecting and analyzing 
measurements from the surgical robot in order to identify the 
critical states and (ii) fault-injection mechanisms for inserting 
malicious  commands  into  the  robot  control  system.  The 
deployment  of  the  malware  presumes  that  the  attacker  has 
penetrated the hospital network by exploiting vulnerabilities in 
the underlying hospital network and has obtained access to the 
robot  control  system  by  exploiting  a  zero-day  remote  code 
execution vulnerability (similar to the ones listed in Table III). 
This is a credible threat as recent reports indicate the existence 
of many vulnerabilities in hospital networks [9], in commonly 
used hospital medical devices [10], and in the software firewall 
of  surgical  robots  [11],  that  allow  attackers  to  gain  access  to 
critical medical devices. 
The cyber-physical attack scenarios presented in this paper 
have  the  following  important  characteristics  that  complicate 
their detection and diagnosis: 
1)  Attacks exploit the TOCTOU (time of check-time of use) 
vulnerability  between  the  safety  checks  on  the  commands 
and the actual execution of the commands. 
2)  Attacks are initiated in the cyber domain by modifying the 
control commands while preserving their legitimate format 
and syntax, i.e., no change to the control flow (in terms of 
the  sequence  of  the  functional  blocks  invoked)  and  no 
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.43
395
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1. (a) Typical control structure in surgical robots, (b) Software and hardware control loops in the RAVEN II robot, (c) Operational state machine of the
RAVEN II robot, d) RAVEN II surgical platform [12]. 
(d) 
(a) 
(b) 
(c) 
change to the performance of the target program (preserving 
the real-time constrains of the robot control software).  
3)  Attacks directly result in catastrophic consequences in the 
physical  domain  (e.g.,  abrupt  jump  of  the  robotic  arms), 
causing damage to the robot or harm to the patient. They are 
hard  to  distinguish  from  incidents  caused  by  system  or 
human  induced  accidental  failures  and  therein  lies  the 
importance  of  these  attacks–answering  the  question  why 
attacker does not simply kill the robot. If deployed on wide 
scale, such attacks could cause major disruption and damage 
to surgical facilities and cause financial or legal impacts. 
  We illustrate the attacks by implementing a prototype of the 
malware  targeting  the  RAVEN  II  robot,  an  open-source 
platform for research in teleoperated robotic surgery [12]. We 
use the RAVEN robot as our experimental platform for several 
reasons: (i) it contains the typical control and safety mechanisms 
used in the state-of-the-art robotic surgical systems, (ii) it is a 
platform indicative of the next-generation teleoperated surgical 
robots  with  both  remote  operability  and  networking  features, 
and (iii) it is accessible for demonstrating security attacks and 
studying their impact without the need to interrupt real surgical 
procedures or risk of harming patients. 
Our experiments on the RAVEN II robot demonstrate that: 
a) injecting malicious commands to motor controllers can lead 
to abrupt jumps of a few millimeters in the robot manipulators 
within only a few milliseconds and b) our dynamic model-based 
analysis  framework  can  detect  malicious  commands  and 
mitigate  their  impact  before  they  manifest  in  the  physical 
system, with an average accuracy of 90%. 
II.  BACKGROUND 
A.  Robotic Surgical Systems 
Surgical robots are designed as human-operated robotically-
controlled  systems,  consisting  of  a  teleoperation  console,  a 
robot control system, and a patient-side cart (which hosts the 
robotic arms, holding the surgical endoscope and instruments). 
The most critical component of the robot control is the electronic 
control system, which is responsible for the following:  
•  Receiving  the  surgeon’s  commands  issued  using  master 
manipulators and foot pedals on the teleoperation console. 
the 
•  Translating 
commands 
surgeon’s 
into 
the 
corresponding surgical robot movements. 
•  Providing  video  feedback  of  the  surgical  field  (inside 
patient’s body) to the surgeon through 3D vision on the 
teleoperation console. 
•  Performing safety checks on to ensure the safe operation 
of the surgical robot.  
Figure 1(a) shows the typical control system structure of a 
surgical  robot  based  on  our  review  of  publicly  available 
documents  on  commercial  and  open-source  robotic  surgical 
platforms including da Vinci Surgical System [13][14], the da 
Vinci Research Kit [15], and the RAVEN II robot [12][16]. In 
this  paper  we  use  the  RAVEN  II  robot  as  an  experimental 
platform 
scenarios  and 
characterizing the robot’s resiliency to those attacks. We treat 
the RAVEN robot as a grey box system. (i.e., we do not have 
any access to the robot’s source code.)  
B.  RAVEN II Robotic Surgical Platform 
implementing 
the  attack 
for 
Figure  1(d)  depicts  the  configuration  of  the  RAVEN  II 
system. The desired position and orientation of robotic arms, 
foot  pedal  status,  and  robot  control  mode  are  sent  from  the 
teleoperation or master console (not shown in the figure) to the 
robotic  control  software  over 
the 
Interoperable Teleoperation Protocol (ITP), a protocol based on 
the UDP packet protocol. The control software receives the user 
packets, translates them into motor commands, and sends them 
to the control hardware, which enables the movement of robotic 
arms and surgical instruments. The robot consists of two cable-
driven surgical manipulators attached with tool interfaces and 
the instruments. Each surgical manipulator is operated by DC 
motors and has seven degrees of freedom [12]. 
the  network  using 
As shown in Figure 1(b), the control software runs as a node 
(process) on the Robotic Operating System (ROS) middleware 
[17]  on  top  of  a  real-time  (RT-Preempt)  Linux  kernel.  It 
communicates with the motor controllers and a Programmable 
Logic  Controller  (PLC)  through  two  custom  8-channel  USB 
interface  boards.  The  interface  boards  include  commodity 
programmable  devices,  digital  to  analog  converters,  and 
encoder  readers.  The  motor  controllers  send  movement 
commands (torque values calculated based on the desired joint 
positions) to the DC motors and read back the encoder values 
from the motors (to estimate the current joint positions). The 
PLC  controls  the  fail-safe  brakes  on  the  robotic  joints  and 
monitors the system state by communicating with the robotic 
software.  
396
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:21:31 UTC from IEEE Xplore.  Restrictions apply. 
As shown in Figure 1(c), the RAVEN control system goes 
through  an  initialization  phase  before  getting  ready  for  the 
operation. During the initialization phase, the mechanical and 
electronic components of the system are tested to detect any 
faults  or  problems.  After  successful  initialization,  the  robot 
enters  the  “Pedal  Up”  state,  in  which  the  robot  is  ready  for 
teleoperation but the brakes are engaged. When the foot pedal 
is pressed by the human operator, the robot moves to the “Pedal 
Down” state. In this state the brakes are released, allowing the 
teleoperation console to control the robot [12][16].  
Figure 2 shows the kinematic chain of the RAVEN control 
software.  The  operator  commands  are  sent  to  the  control 
software as incremental motions (desired end-effector positions 
(pos_d)  and  orientations  (ori_d)).  The  current  end-effector’s 
configurations  (pos  and  ori)  are  calculated  based  on  motor 
encoder  feedback  using  forward  kinematics  function.  The 
inverse  kinematics  calculates  the  joint  (jpos_d)  and  motor 
(mpos_d) positions that are required to obtain the desired end-
effector  configurations  and  positions.  Finally,  the  amount  of 
torque  needed  for  each  motor  to  reach  its  new  position  is 
obtained 
(PID) 
controller. The motor torques are then transferred in the form of 
DAC commands (DAC_value) to the motor controllers on the 
USB boards, to be executed on the motors [18]. 
a  Proportional-Interal-Derivitive 
from 
with a set of pre-defined thresholds to ensure the motors 
and arm joints do not move beyond their safety limits.  
•  The control software sends a periodic (I’m alive) square-
wave watchdog signal to the PLC through the USB boards. 
Upon detecting any unsafe motor commands, the control 
software  stops  sending  the  watchdog  signal.  The  PLC 
safety  processor  monitors  the  watchdog  signal  and  in 
absence  of  the  watchdog  signal  puts  the  system  in  the 
Emergency-Stop (“E-STOP”) state. 
III. CYBER-PHYSICAL ATTACKS ON THE RAVEN II ROBOT 
Previous studies on fault-injection based safety assessment 
of RAVEN II system have shown several vulnerabilities in the 
safety mechanisms of the robot [19][20]. In this paper, we show 
that malicious parties can exploit such vulnerabilities to perform 
TABLE I. VARIANTS OF ATTACKS ON ROBOT CONTROL STRUCTURE 
Observed 
Target 
Impact 
Layer 
Malicious 
Action 
Change  
-port number 
-packet content 
Add drift to 
-output 
-input 
Change  
-robot state in PLC 
Change  
-motor commands 
-encoder feedback 
Hijack trajectory 
Unwanted state (E-
STOP) 
Unwanted state 
(IK-fail) 
Homing Failure 
Abrupt Jump/  
Unwanted state (E-
STOP) 
Target 
System 
Library 
Socket comm. 
(bind, 
received_from) 
Math  
(sin, cos)  
Interface  
(read, write) 
Master Console 
and Control 
Software 
Control 