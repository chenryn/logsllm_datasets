4.2.6
Forward secrecy with respect to long-term keys. The PFS
property was briefly mentioned in the context of the long-term sign-
ing keys and the secrecy of session keys. However, in those cases, we
did not cover the requirement for forward secrecy with regards to
the PSK. We have an additional lemma secret_session_keys_pfs
which captures that, in either a full DHE or PSK-DHE handshake,
the secrecy of the session keys does not depend on the PSK remain-
ing secret after the session is concluded.
To achieve this, we modify secret_session_keys as depicted
in Figure 5, by adding a condition for the key-exchange mode,
not psk_ke_mode = psk_ke, and loosening the restrictions on
the attacker such that the RevealPSK action is only forbidden for
any time point #r < #i. In proving this lemma, we show that the
session keys are forward secure after a DHE.
4.2.7 Key Compromise Impersonation (KCI) resistance. Obser-
vant readers will notice that the only restriction on compromising
long-term keys is that the peer’s LTK must not be compromised.
None of our security properties rely on the actor’s LTK being hid-
den from the attacker3. Applying this fact to the authentication
properties, therefore, additionally shows that the protocol, as given
in the draft specification, achieves KCI resistance.
3A minor exception to this is that the attacker cannot use the actor’s long-term key to
impersonate the actor to themselves since in this case, the actor is also the peer.
4.3 Parameter Negotiation
The security of a TLS session critically depends on the integrity
of the parameters negotiated during the corresponding TLS hand-
shakes, in the initial and subsequent connections in the session. In
TLS these parameters include the protocol version, the cipher suite,
and the signature algorithm. Depending on the negotiated protocol
version, additional values may or must be negotiated, such as the
handshake mode, the DH group, and/or the PSK to be used.
For DH group negotiation, we model the client sending a list
of two symbolic groups that the server can choose between. This
feature allows us to provide a limited coverage of the HelloRetryRe-
quest functionality of the protocol, which we address in more detail
in Section 3.4. We also provide support for PSKs but limit the num-
ber of PSKs offered to one per handshake.
By using Tamarin, we prove that the client and the server agree
on the transcript of the protocol, and thus on the values selected
during negotiation. This means that an attacker cannot force the
client or the server to accept a value that they did not initially offer.
There are two main classes of parameter negotiation attacks:
forcing the use of bad cipher suites [1, 16] or bad signature al-
gorithms [9], and forcing the use of older and insecure versions
of SSL/TLS [5, 44]. Because we model perfect cryptography and
cover TLS 1.3 only, we consider these attacks to be out of scope (cf.
Section 4.2.5).
5 ANALYSIS AND RESULTS
In this section we provide a detailed description of our analysis,
including a discussion of our results and an exploration of an au-
thentication anomaly uncovered by our work.
In general we find that TLS 1.3 meets the properties outlined in
the specification that our modelling process was able to capture. We
show that TLS 1.3 enables a client and a server to agree on secret
session keys and that these session keys are unique across, as well
as within, handshake instances. Our analysis shows that PFS of
session keys holds in the expected situations, i.e., in the (EC)DHE
and PSK+(EC)DHE handshake modes. We also show that TLS 1.3,
by and large, provides the desired authentication guarantees in
both the unilateral and mutual authentication cases. The situation
in which this is not the case is covered in the section to follow.
We remind the reader that our model does not truly cover down-
grade protection, or the protection of endpoint identities at this
time. A treatment of downgrade protection across TLS protocol
versions would require modelling the earlier versions of TLS in a
way that is consistent with the TLS 1.3 model as developed here. To
consider the downgrade protection of cipher suites, we would need
to relax our current assumption of perfect cryptography through
rules that, for instance, allow for an attacker to learn the payload of
a particular kind of encrypted messages without knowing the key.
In spite of the fact that these additional considerations would sub-
stantially complicate the model and the proof process, our model
is perfectly suited to their inclusion and could form the basis of
future work.
5.1 Positive results
We now present our results for TLS 1.3, commenting on our proof
methods and findings.
5.1.1 Proof strategies. For models as complex as TLS 1.3, prov-
ing lemmas in Tamarin is a multi-stage process, and proving com-
plex lemmas directly is often infeasible. For protocol models of this
size the proof trees can become very large. Tamarin provides a
number of features that allow complex proofs to be broken down
into more manageable sections. Writing sublemmas provides hints
to the Tamarin constraint solving algorithm, allowing it to solve
complex sections of a larger proof directly, making the overall proof
more manageable. For the TLS 1.3 model, we used several types
of lemmas. Helper lemmas can be used to quickly solve repetitive
sections of a larger proof without repeatedly unrolling the entire
subtree. Typing lemmas provide hints to the Tamarin engine about
the potential sources of messages, reducing the branching of a
proof tree. Inductive lemmas instruct Tamarin to prove the lem-
mas inductively, allowing us to break out of loops in the protocol,
which otherwise can produce infinite proof trees. Proving the main
properties of TLS 1.3 required many helper lemmas, of all of these
types.
The Tamarin engine can also use heuristics to auto-prove lemmas,
which proved invaluable in quickly re-proving large sections of
properties after making changes to the model. By investing time
in writing auto-provable sublemmas, we could flexibly incorporate
changes made to the specification without having to restart our
analysis from scratch.
The more complex lemmas used in our analysis of TLS 1.3, how-
ever, required manual proving in the Tamarin interactive prover.
We note that by manual proving in this context we mean manually
guiding the Tamarin prover through a proof by using the Tamarin
graphical user interface.
Using the m4 preprocessor to generate restricted subsets of the
model we were able to prototype lemmas in a simpler environment
without expending unnecessary effort. To give an indication of the
number of helper lemmas required, and the relationship between
all of our lemmas, we have constructed a ‘lemma map’, displayed in
Figure 7. The map also indicates which lemmas were auto-proved
by Tamarin, and which ones needed manual guidance for Tamarin
to prove them.
In total, the modelling effort represents approximately 3 months
worth of work. However, the vast majority of that is the process
of writing lemmas to break down the overall proving effort into
smaller, autoprovable chunks. With these lemmas in place, proving
the entire model takes about a week of work, and significant com-
puting resources. The model itself takes over 10GB RAM just to
load, and can easily consume 100GB RAM in the course of a proof.
In one instance, an automatically-computed proof was almost 1
million lines long. Once the proofs have been produced, they can
be verified in the space of about a day, although still requiring a
vast amount of RAM.
5.1.2
Findings. We summarise our results in Table 1. For each
property discussed in Sections 2 and 4, we indicate our findings. We
use ∗ to indicate that the property holds in most situations. Cases
in which the property does not hold to the expected degree, are
covered in sections to follow. We also list the applicable Tamarin
lemma(s).
Properties
secret_session_keys
secret_session_keys_pfs
unique_session_keys
session_key_agreement
entity_authentication(i)
transcript_agreement
mut_entity_authentication(i)
mut_transcript_agreement
injective_mut_entity_auth
auth_helpers
matching_nonces
consistent_nonces
invariant_nonces
matching_rms_nonces
secret_helpers
ku_extract(i)
ku_expand(i)
ku_hs
ku_ltk
ku_fresh_psk
hsms_derive
posths_rms_weak(i)
posths_rms(i)
matching_transcripts_posths
matching_rms_posths
matching_rms_actors
sig_origin
invariant_post_hs
matching_sessions(i)
auth_psk
matching_hsms
post_master_secret
invariant_post_hs(i)
handshake_secret(i)
handshake_secret_pfs(i)
uniqueness
one_s_per_tid
*s in {ALL STATES}
S1_vs_S1_PSK_DHE
S1_PSK_vs_S1_PSK_DHE
S1_PSK_vs_S1
C1_vs_C1_PSK_DHE
C1_PSK_vs_C1
C1_PSK_vs_C1_PSK_DHE
s_vs_s_cert
*s in {C3,S3}
s_vs_s_PSK
*s in {C2a,S2a,C2d,S2d}
invariants
tid_invariant(i)
one_start_per_tid(i)
cert_req_origin(t)
nst_source(t)
DH_injectivity
dh_exp_invariant(i)
one_dh_per_x
rev_dh_ordering(i)
rev_dh_before_hs
DH_chal
dh_chal_dual
Figure 7: Lemma Map. Bold lemma names with a purple background indicate where manual interaction via the Tamarin visual
interface was required. The remaining lemmas were automatically proven by Tamarin, without manual interaction. An arrow
from one category to another implies that the proof of the latter depends on the former. The Properties box contains the main
TLS 1.3 properties.
Property proven
(1) Same session keys
(2) Secret session keys
(3) Peer authentication∗
(4) Unique session keys
(6) Perfect forward secrecy
(7) Key compromise
impersonation
Lemma(s)
session_key_agreement
secret_session_keys
entity_authentication
mutual_entity_authentication
unique_session_keys
secret_session_keys_pfs
entity_authentication
mutual_entity_authentication
Table 1: TLS 1.3 Tamarin results
5.2 Possible mismatch between client and
server view
During the development of our model, and in particular the analysis
of the post-handshake client authentication, we encountered a
possible behaviour that suggested that TLS 1.3 fails to meet certain
strong authentication guarantees.
While there are many definitions of authentication, the common
thread among strong authentication guarantees is that both parties
share a common view of the session, i.e. that they agree on ex-
changed data, keys, etc. During our analysis of the post-handshake
client authentication, it became apparent that the client does not
receive any explicit confirmation that the server has successfully
received the client’s response. Due to the asynchronous nature of
the post-handshake client authentication, the client may keep re-
ceiving data from the server, and will not be able to determine if the
server has received its authentication message. As a consequence,
the client cannot be sure whether the server sent the data under
the assumption that the client is authenticated.
We formally modelled this property by adding a variable to
the client and the server that records the current status of the
connection, and in particular, if the connection is unilaterally or
mutually authenticated. We discovered that even when the server
asks for a post-handshake client authentication, and the client
responds, the client cannot be sure that the server considers the
channel to be mutually authenticated.
In concurrent work by Bhargavan et al. [10], a similar issue was
uncovered for the 0.5-round trip time (RTT) case. A discussion with
the TLS 1.3 working group revealed that an equivalent problem also
exists within the main handshake. During the main handshake, the
server can request a client certificate, and may decide to reject the
certificate (for example because it violates certain domain-specific
policies), but still continue with the connection as if the certificate
were accepted. Therefore, the client cannot be sure (after what ap-
pears to be a main handshake with mutual authentication) that the
server considers the client to be authenticated. Thus, this phenom-
enon leaves the client in the dark about whether or not the server
considers it to be authenticated, even though the server asked for a
certificate and the client supplied it.
To see why this may become a problem at the application level,
consider the following application. Imagine a client and a server
that implement TLS 1.3, where the server has the following policy:
any data received over a mutually authenticated connection are
stored in a secure database; all data received over connections where
the client is not authenticated are stored in an insecure log. The
client connects, the server requests a certificate, which the client
duly provides, but the server rejects and continues regardless. Since
the server rejected the certificate, it continues to store incoming
messages in the insecure log. However, the client may assume it has
been authenticated, and start sending sensitive data, which ends
up in the insecure log.
The TLS working group has decided not to fix this behaviour
for TLS 1.3, and has not introduced any mechanism that informs
the client of the server’s view of the client’s authentication status.
If a client wants to be sure that the server considers it to be au-
thenticated, this needs to be dealt with at the application layer. We
anticipate that some client applications will incorrectly assume that
sending a client certificate and obtaining further server messages
indeed guarantees that the server considers the connection to be
mutually authenticated. As we have shown, this is not the case in
general, and may lead to serious security issues despite there being
no direct violation of the specified TLS 1.3 security requirements.
6 THE RELATION BETWEEN OUR MODEL
AND THE TLS 1.3 SPECIFICATION
While there have been many academic analyses of various drafts
of TLS 1.3 [4, 10, 22, 24, 25, 28, 30, 33, 35, 38], they all (explicitly or
implicitly) consider only part of the specification. Most analyses,
even those that claim to be “complete” do not consider all possible
modes, and many manual cryptographic analyses consider modes
only in isolation (and not their interaction). This is caused by the
inherent complexity of analysing TLS 1.3 and is not a problem in
itself; rather, it justifies the need for multiple approaches.
However, we are of the opinion that readers, regardless of whether
or not they are experts in the field, should be able to easily deduce
the exact coverage of a given analysis. To ensure this, we provide
an unprecedented level of transparency concerning the relation-
ship between our model and the RFC (the draft specification) by
creating a website [21] that contains an annotated version of the
RFC. Consider the following excerpt:
In the above excerpt, the left-hand side is a direct copy from the
RFC, and the right-hand side contains our annotations. For example,
they show how the concrete data structures of TLS 1.3 are mapped
into abstract term structures. Additionally, we annotate the prose,
describing the possible behaviours so as to indicate which Tamarin