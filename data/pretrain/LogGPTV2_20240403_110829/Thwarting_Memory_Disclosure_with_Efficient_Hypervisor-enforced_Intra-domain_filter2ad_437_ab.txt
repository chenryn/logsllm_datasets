compartment, and to guarantee that the secrets can only
be accessed by the functions in the corresponding compart-
ment. During runtime, secret compartments are conﬁned to
interact with the main compartment through a trampoline
mechanism (step 3(cid:13)) without trapping to the hypervisor.
Only when a function outside of a secret compartment, e.g.,
the main compartment, tries to access the secrets, the hy-
pervisor will be notiﬁed to handle such a violation.
2.2 Threat Model and Assumptions
SeCage aims at protecting critical secrets from both vul-
nerable applications and malicious operating systems (which
may also collude).
For vulnerable applications, we consider an adversary with
the ability to block, inject, or modify network traﬃc, so that
she can conduct all of the well-known attacks in order to il-
legally access any data located in memory space of the vul-
nerable application. Speciﬁcally, the adversary can exploit
buﬀer over-read attack as in HeartBleed bug [3], or try to use
sophisticated control ﬂow hijacking attacks [40, 11, 12], to
invalidate access-control policy or bypass permission check,
and read sensitive secrets located in the same address space.
The underlying system software (e.g., OS) is untrusted
that they can behave in arbitrarily malicious ways to sub-
vert application into disclosing its secrets. We share this
kind of attacker model with other related systems [18, 17,
28]. Additionally, SeCage also considers the Iago attack [15],
where the malicious OS can cause application to harm itself
by manipulating return value of system services (e.g., system
call), as well as rollback attack [51, 41, 52], where the priv-
ileged software can rollback the applications’ critical states
by forcing memory snapshot rollback.
SeCage assumes that the protected secrets should only
be used within an application, the functions inside the se-
cret compartment won’t voluntarily send them out. This is
usually true for commodity software like OpenSSL as the
software itself is designed to keep such secrets. Even if not,
this can be detected during the static and dynamic phase
of SeCage when generating secret compartments. Further,
SeCage makes no attempt to prevent against DoS attack
which is not aimed at disclosing data.
It does not try to
protect against side-channel attacks [38, 55], as well as the
implicit ﬂow[39] attack which consists in leakage of informa-
tion through the program control ﬂow, since they are typ-
ically hard to deploy and have very limited bandwidth to
leak secrets in our case. Finally, SeCage does not consider
the availability of application in the face of a hostile OS.
3. RUNTIME ISOLATION ENFORCEMENT
In this section, we will introduce how to enforce SeCage
protection during application runtime,
including memory
protection, mechanisms of runtime execution ﬂow and other
aspects.
16093.1 Memory Protection
In SeCage, compartment isolation is guaranteed by two-
dimensional paging2 mechanism. In general, a guest VM can
only see the mapping of guest virtual address (GVA) to guest
physical address (GPA), while the hypervisor maintains one
lower-level extended page table (EPT) for each guest, the
EPT maps GPA to the host physical address (HPA).
EPT-N
EPT-S
Data 
Section
Code 
Section
Data 
Memory 
Mapping 
Code 
Memory 
Mapping
Trampoline
Secret
Mapping
Sensitive
Functions
Mapping
Figure 2: EPT layout of SeCage-enabled application
and one of its secret compartments
In the initialization phase of SeCage, besides the original
EPT called EPT-N for the entire guest VM, the hypervisor
initializes another EPT, called EPT-S , for each protected se-
cret compartment. As shown in Figure 2, SeCage classiﬁes
the memory into two parts: data and code. For the data
section, EPT-S maps all data including the secrets, while
EPT-N has data other than the secrets. For the code sec-
tion, the trampoline code is mapped into these two EPTs as
read-only. Besides, EPT-S only contains the sensitive func-
tions code in the secret compartment, while EPT-N maps
code other than the sensitive functions.
Through the above EPT conﬁguration, SeCage ensures
that secrets will never exist in EPT-N , only code in sensi-
tive functions can access the corresponding secrets. These
code pages are veriﬁed in the setup phase, and the EPT en-
tries are set as executable and read-only. Meanwhile, the
data pages in EPT-S are set to non-executable so that they
cannot be used to inject code by attackers. Therefore, both a
vulnerable application and the malicious OS have no means
to access the secrets.
It should be noted that if we only
put secrets in the secret compartment, there may be exces-
sive context switches since the sensitive functions may access
other data memory besides secrets. For simplicity, since the
code pieces of sensitive functions are very small and consid-
ered to be trusted in our threat model, SeCage maps the
whole data sections into the secret compartment.
EPTP switching. SeCage leverages the Intel hardware
virtualization extension called VMFUNC, which provides
VM Functions for non-root guest VMs to directly invoke
without VMExit. EPTP switching is one of these VM func-
tions, which allows software (in both kernel and user mode)
in guest VM to directly load a new EPT pointer (EPTP),
thereby establishing a diﬀerent EPT paging-structure hier-
archy. The EPTP can only be selected from a list of poten-
tial EPTP values conﬁgured in advance by the hypervisor,
which acts as the control plane deﬁning the rules that a
2called EPT in Intel, and NPT in AMD; we use EPT in
this paper.
guest VM should comply with. During runtime, the hyper-
visor will not disturb the execution ﬂow within a guest VM.
0: Alternate-EPTP
1: Alternate-EPTP
Secondary processor-based 
VM-execution controls
(cid:256)Enable VM functions(cid:257) 
VM-execution control (bit 13)
VMFunction Control 
(cid:256)EPTP switching(cid:257)(bit 0)
Set
Set
511: Alternate-EPTP
EPTP_LIST_ADDR
Configure
Memory
Selected VMCS Fields
EPTP Switching invocation: VMFUNC opcode (EAX=0, ECX=EPTP_index)
Figure 3: Description of EPTP switching VMFUNC
Figure 3 shows an example conﬁguration that a hypervisor
needs to set in order to use EPTP switching VM function:
besides some function-enable bits, the hypervisor needs to
set bit 0 (EPTP switching bit) in the VM Function Con-
trol VMCS ﬁeld, and store the conﬁgured EPT pointers
to the memory pointed by the EPTP LIST ADDR VMCS
ﬁeld. During runtime, the non-root software invokes the
VMFUNC instruction with EAX setting to 0 to trigger the
EPTP switching VM function and ECX to select an entry
from the EPTP list. Currently, EPTP switching supports at
most 512 EPTP entries, which means SeCage can support
up to 512 compartments for each guest VM.
3.2 Securing Execution Flow
SeCage divides the logic into sensitive functions, tram-
poline and other code (including application code and sys-
tem software code). Only sensitive functions in the secret
compartment can access secrets, and the trampoline code is
used to switch between the secret and the main compart-
ment. During runtime, functions in the main compartment
may invoke sensitive functions, while sensitive functions may
also call functions outside of the secret compartment.
Figure 4 shows possible execution ﬂow during runtime.
For clarity, we classify trampoline code into trampoline and
springboard, according to the calling direction. trampoline
invocation is illustrated in the top half of Figure 4: when
code in the main compartment invokes a function in a secret
compartment, instead of directly calling the sensitive func-
tion, it calls into the corresponding trampoline code, which
at ﬁrst executes the VMFUNC instruction to load memory
of the secret compartment, then the stack pointer is mod-
iﬁed to point to the secure stack page.
If the number of
parameters is larger than six, which is the maximum num-
ber of parameters passing supported using register, the rest
of parameters should be copied to the secure stack. When
everything is ready, it calls the real sensitive function. Once
this function returns, the trampoline code wipes out the con-
tent of secure stack, restores the ESP to the previous stack
frame location, reversely executes the VMFUNC instruction
and returns the result back to the caller.
During the execution of sensitive functions, it may call
functions in the main compartment, e.g., library calls, sys-
tem calls, and other non-sensitive functions in the applica-
tion. SeCage classiﬁes these calls into two categories: the
calls without secrets involved, and the calls which may ac-
cess the secrets. SeCage instruments the ﬁrst category of
calls with springboard code, as shown in the bottom half of
Figure 4, which just reverses the operations as trampoline
code. For the second kind of calls, if the callee function
does not exist in sensitive functions like some library calls
(e.g., memcpy, strlen, etc.), SeCage creates its own version
1610Trampoline:
Non-Secure -> Secure -> Non-Secure
Code
EPT-N
Data
Code
EPT-S
Data
Code
EPT-N
Data
VMFUNC 
(EAX=0 ECX=1)
VMFUNC 
(EAX=0 ECX=0)
Springboard:
Secure -> Non-Secure -> Secure
Code
EPT-S
Data
Code
EPT-N
Data
Code
EPT-S
Data
VMFUNC 
(EAX=0 ECX=0)
VMFUNC 
(EAX=0 ECX=1)
Trampoline
func_in_trampoline() {
switch_to_ept_s;
install_secure_stack;
ret = secure_func();
clear_secure_stack;
install_normal_stack;
switch_to_ept_n;
return ret;
}
Springboard
func_out_springboard() {
switch_to_ept_n;
install_normal_stack;
ret = nonsecure_func();
install_secure_stack;
switch_to_ept_s;
return ret;
}
EPT-N
EPT-S
EPT-N
EPT-S
EPT-N
EPT-S
Figure 4: Execution ﬂow through trampoline and springboard mechanisms
of these functions during creating a compartment. There is
another situation that the reference to the secrets may be
passed to the main compartment. However, since the callee
function is not able to dereference the reference (otherwise,
it should be added to the secret compartment), the secrets
will not be leaked out.
3.3 Miscellaneous
Storage. In the initialization phase, secrets may be read
from a standalone conﬁguration ﬁle, executable binary, or
DB schema. Such storages can always be accessed by sys-
tem software, that there is no eﬀective way to protect them.
SeCage solves this problem through another approach by
ensuring no secret in these storages. The secrets in the stor-
age are replaced with some dummy data, during application
launching, the dummy data will be restored to the real se-
crets.
In the runtime, SeCage ensures no I/O write may
happen in the sensitive functions so that secrets will not be
leaked to the storages.
Interrupt handling. During execution in a secret com-
partment, there is no operating system support within the
EPT-S context, thus no interrupt is allowed to be injected
to the guest VM. When a non-root guest VM traps to the
hypervisor due to an interrupt, the corresponding handler
in SeCage checks whether it is in the context of EPT-S , and
what kind of interrupt it is. If the interrupt happens dur-
ing sensitive functions execution, it simply drops some kinds
of interrupts (e.g., timer interrupt), and delays others (e.g,
NMI, IPI) until EPT-N context.
Multi-threading. SeCage supports multi-threading pro-
grams. If there is only one VCPU running all the threads,
since we drop timer interrupts to the EPT-S VCPU, the
EPT-S context will not be preempted by other threads un-
til it returning back to the EPT-N environment. If there
are more than one VCPUs, since every VCPU has its own
EPT, if one VCPU is in EPT-S context, other VCPUs can
still run in EPT-N context and they are not allowed to read
secrets in EPT-S .
3.4 Lifecycle Protection of secret Compartment
Figure 5 shows the lifecycle protection of a secret compart-
ment. SeCage adds three hypercalls 3 as shown in Table 2.
Guest VM in EPT-N
Guest VM in EPT-S
No Secret
No Secret
Pre-LOAD
App-LOAD
Secage_INIT
RUNTIME
Secage_RESTORE
Creation
Deployment
Execution
Termination
Time
SECAGE_INIT
SECRET_LOAD
SECAGE_RESTORE
secure_malloc
Figure 5: Life-cycle protection of secrets
Table 2: Descriptions of SeCage related hypercalls
Hypercall
SECAGE INIT
SECRET LOAD
Description
Called in EPT-N , triggers initializing.
Called in EPT-S , triggers secret loading.
SECAGE RESTORE Called in EPT-N , triggers restoration
Creation. Before an application is loaded into guest VM,
SeCage utilizes the application decomposition framework to
analyze the application and decompose it into a main com-
partment and several secret compartments. According to
how the secrets are loaded, the secrets are replaced with
dummy data in persistent storages like conﬁguration ﬁle,
executable binary or database. For example, if the secrets
are loaded from the ﬁles (e.g., OpenSSL) or database during
runtime, the secrets in the storage are replaced. Otherwise,
the application is compiled after replacing the secrets in the
source code with dummy data. Meanwhile, the developer is
required to provide the mapping of secrets and the dummy
3Hypercall (or vmcall) is similar to syscall but is used to
request the hypervisor’s services
1611data (e.g.,  → secret binding), to the hyper-
visor through predeﬁned secure oﬄine channels. By this
means, the hypervisor can load the real secrets into secure
memory in the deployment phase.
Deployment. The process of application deployment in-
cludes following steps:
hypervisor helps to remove the EPT-S of secret compart-
ment. Even if the application exits abnormally or the ap-
plication or OS refuses to inform the hypervisor, the secrets
still only exist in EPT-S and thus will not be disclosed.
4. APPLICATION DECOMPOSITION
1. When launching an application, the instrumented code
issues the SECAGE INIT hypercall, which passes the
start virtual addresses and the number of pages of sen-
sitive functions and trampoline code as parameters.
The hypervisor ﬁrst checks the integrity of sensitive
functions and trampoline code, and setups the EPT-
N and EPT-S as described in section 3.1. It should
be noted that EPT-S maps several reserved pages that
are invisible from EPT-N , which will be used as secure
heap and stack later.
2. The hypervisor invokes VMENTER to restore untrusted
application execution. When the untrusted code in-
vokes memory allocation function for secrets dummy
counterpart, it is redirected to the secure malloc in
sensitive functions to allocate pages from the secure
heap.
3. After the dummy secrets being copied to the secure
heap in sensitive functions, the SECRET LOAD hy-
percall is issued. The hypervisor then scans the secure
heap memory, and replaces the dummy secrets with
the real ones, according to the dummy to secrets map-
ping provided by the user.
Through the above protocol of application deployment,
SeCage ensures that before SECRET LOAD, there is no se-
cret existing in the memory, thus even the execution en-
vironment is untrusted, no secret will be exposed. After
SECRET LOAD, secrets can only be accessed in the secret
compartment, and thus code in the main compartment can
never disclose it. Although the untrusted code may violate
the protocol, by either skipping the invoking of hypercall, or
not obeying rules of secure malloc, the hypervisor can de-
tect such a violation and the secrets will not be loaded into
memory in such cases.
Runtime. At runtime, code in the main and the secret
compartments execute concurrently. The SeCage mecha-
nisms ensure that: (1) the secrets and their copies only exist
in EPT-S mapping, (2) the secrets and their copies can only
be used during sensitive functions execution. If the code in
the main compartment attempts to access the secrets mem-