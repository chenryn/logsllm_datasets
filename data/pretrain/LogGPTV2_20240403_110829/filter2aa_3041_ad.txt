### 代码清单 2-10 search/search.go：第 8 行到第 9 行

```go
// 注册用于搜索的匹配器的映射
var matchers = make(map[string]Matcher)
```

这个变量 `matchers` 声明在任何函数作用域之外，因此它是一个包级变量。该变量通过关键字 `var` 声明，并被定义为一个 `map` 类型，其键为 `string` 类型，值为 `Matcher` 类型。`Matcher` 类型的具体用途将在后续章节中详细介绍。值得注意的是，`matchers` 变量名以小写字母开头，在 Go 语言中，这样的标识符是不公开的（即私有的），意味着它们不能直接从其他包访问。

在 Go 中，标识符的可见性由其首字母的大小写决定。大写字母开头的标识符是公开的，可以被导入该包的任何代码访问；而小写字母开头的标识符则仅限于当前包内使用。尽管如此，未公开的标识符仍可以通过函数返回值等方式间接访问。

这行声明还利用了赋值操作符和内置的 `make` 函数来初始化 `matchers` 变量，如下面的代码所示：

```go
make(map[string]Matcher)
```

`map` 是 Go 中的一种引用类型，需要通过 `make` 函数创建实例。如果尝试在没有正确初始化的情况下使用 `map` 变量，程序将抛出错误，因为默认情况下 `map` 的零值是 `nil`。更多关于 `map` 的详细信息将在第四章中讨论。

在 Go 中，所有类型的变量都有一个预设的零值。例如，整数类型的零值是 `0`，字符串类型的零值是空字符串 `""`，布尔类型的零值是 `false`，指针类型的零值是 `nil`。对于引用类型而言，其零值同样为 `nil`，但其所指向的数据结构会被初始化为其类型的零值。

接下来，我们将分析在 `main` 函数中调用的 `Run` 函数，具体见代码清单 2-12。

### 代码清单 2-12 search/search.go：第 11 行到第 57 行

```go
// Run 执行搜索逻辑
func Run(searchTerm string) {
    // 获取需要搜索的数据源列表
    feeds, err := RetrieveFeeds()
    if err != nil {
        log.Fatal(err)
    }

    // 创建一个无缓冲的通道，接收匹配后的结果
    results := make(chan *Result)

    // 构造一个 waitGroup，以便处理所有的数据源
    var waitGroup sync.WaitGroup

    // 设置需要等待处理的 goroutine 数量
    waitGroup.Add(len(feeds))

    // 为每个数据源启动一个 goroutine 来查找结果
    for _, feed := range feeds {
        matcher, exists := matchers[feed.Type]
        if !exists {
            matcher = matchers["default"]
        }

        // 启动一个 goroutine 来执行搜索
        go func(matcher Matcher, feed *Feed) {
            Match(matcher, feed, searchTerm, results)
            waitGroup.Done()
        }(matcher, feed)
    }

    // 启动一个 goroutine 来监控是否所有的工作都已完成
    go func() {
        waitGroup.Wait()
        close(results)
    }()

    // 显示返回的结果，并在最后一个结果显示完后返回
    Display(results)
}
```

`Run` 函数实现了程序的核心控制逻辑，展示了如何有效地并发启动并同步多个 goroutine。首先，我们来看 `Run` 函数是如何定义的。

### 代码清单 2-13 search/search.go：第 11 行到第 12 行

```go
// Run 执行搜索逻辑
func Run(searchTerm string) {
```

Go 语言使用 `func` 关键字定义函数，后面紧跟函数名、参数列表及返回值。在这个例子中，`Run` 函数接受一个 `string` 类型的参数 `searchTerm`，表示要搜索的关键字。有关此参数如何传递的示例，请参见代码清单 2-14。

### 代码清单 2-14 main.go：第 17 行到第 21 行

```go
// main 是整个程序的入口
func main() {
    // 使用特定的项做搜索
    search.Run("president")
}
```

`Run` 函数首先获取数据源 `feeds` 列表，这些数据源从互联网上抓取数据，并对其进行特定的搜索项匹配，详见代码清单 2-15。

### 代码清单 2-15 search/search.go：第 13 行到第 17 行

```go
// 获取需要搜索的数据源列表
feeds, err := RetrieveFeeds()
if err != nil {
    log.Fatal(err)
}
```

这里有几个关键点需要注意。`RetrieveFeeds` 函数返回两个值：一个 `Feed` 类型的切片（一种动态数组）和一个错误值。如果发生错误，会调用 `log.Fatal` 函数输出错误信息并终止程序。此外，这里使用了简化的变量声明运算符 `:=`，它允许同时声明并初始化变量。编译器根据函数返回值的类型自动推断变量类型。

接下来，我们创建了一个无缓冲通道 `results` 用于接收匹配结果，并初始化了一个 `sync.WaitGroup` 以跟踪所有启动的 goroutine，确保它们全部完成后再关闭程序，如代码清单 2-16 和 2-17 所示。

### 代码清单 2-16 search/search.go：第 19 行到第 20 行

```go
// 创建一个无缓冲的通道，接收匹配后的结果
results := make(chan *Result)
```

### 代码清单 2-17 search/search.go：第 22 行到第 27 行

```go
// 构造一个 wait group，以便处理所有的数据源
var waitGroup sync.WaitGroup

// 设置需要等待处理的 goroutine 数量
waitGroup.Add(len(feeds))
```

随后，我们遍历 `feeds` 切片，为每个数据源启动一个 goroutine 进行搜索，如代码清单 2-18 所示。

### 代码清单 2-18 search/search.go：第 29 行到第 42 行

```go
// 为每个数据源启动一个 goroutine 来查找结果
for _, feed := range feeds {
    matcher, exists := matchers[feed.Type]
    if !exists {
        matcher = matchers["default"]
    }

    // 启动一个 goroutine 来执行搜索
    go func(matcher Matcher, feed *Feed) {
        Match(matcher, feed, searchTerm, results)
        waitGroup.Done()
    }(matcher, feed)
}
```

在循环中，我们使用 `range` 关键字迭代 `feeds` 切片，并为每个数据源启动一个 goroutine。`range` 返回两个值：索引和元素值。由于我们不需要索引，因此使用下划线 `_` 忽略它。接着，我们通过 `matchers` 映射查找合适的 `Matcher` 对象，如果找不到，则使用默认匹配器。最后，启动一个新的 goroutine 来执行实际的搜索任务，并在完成后调用 `waitGroup.Done()` 通知等待组。

此外，我们还启动了一个额外的 goroutine 来监控所有工作的完成情况，并在所有工作完成后关闭 `results` 通道，如代码清单 2-19 所示。

### 代码清单 2-19 search/search.go：第 45 行到第 51 行

```go
// 启动一个 goroutine 来监控是否所有的工作都已完成
go func() {
    waitGroup.Wait()
    close(results)
}()
```

最终，`Display` 函数负责显示搜索结果，并在所有结果显示完毕后返回，从而结束整个搜索过程。