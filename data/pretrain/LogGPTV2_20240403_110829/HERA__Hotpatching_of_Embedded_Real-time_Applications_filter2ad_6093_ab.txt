have a few timely temperature measurements. The value of
past measurements decreases as the system operates on the
most current measurements [29].
Real-time Operating System. Real-time capability is often
ensured by the use of a real-time operating system (RTOS).
The RTOS schedules tasks according to a given priority to meet
hard and soft deadlines. It provides the capability to handle
multiple threads and ensures given deadlines are met through
a real-time scheduling algorithm, e.g., Rate Monotonic [30].
The RTOS is crucial to manage complex embedded applica-
tions and multiple tasks bounded by real-time requirements.
Lightweight RTOS are a popular method to abstract from the
bare-metal hardware while maintaining hard real-time capa-
bility. Although embedded devices are resource-constrained,
Figure 1: Example of a RTOS schedule.
there exists a wide variety of suitable operating systems [31].
RTOS exist in a variety of architectures, implementations and
categories depending on the target system and its real-time
properties,
i.e., hard, soft or ﬁrm system [32]. The main
component of any RTOS is a scheduler in control of the
underlying hardware responsible to execute tasks with respect
to their deadlines. Figure 1 shows a typical schedule of a
RTOS. Tasks have different deadlines, thus different priorities.
A lower priority task can be interrupted in favor of tasks with
higher priority. This ensures that urgent tasks are not blocked
by less important ones. High priority tasks are usually short
and frequent, low priority tasks are usually long and infrequent.
A system with enough available resources will complete all
tasks before their respective deadlines [30].
One of the most popular embedded systems is FreeR-
TOS [33], and is suited for real-time purposes. We use
FreeRTOS to implement and evaluate HERA in the case study
described in Section VII-A.
Hotpatching. Hotpatching means patching a program while
it executes, thus without restarting or rebooting the patched
system or service. This requires to consider the current state of
the program to circumvent negative side-effects. Hotpatching
can be categorized by its changes, e.g., single code snippets,
protocol changes, or larger changes in data structures [34].
Update Services. Updating and patching are commonly used
to ﬁx program errors and security vulnerabilities. In order to
apply these patches, special applications are developed, which
allow to manually or automatically install patches. These
programs have the task to fetch the update, check the integrity,
install, and verify the installation. IoT devices typically come
with such update methods [1]. The FreeRTOS operating system
features a module for over-the-air (OTA) updates [35]. With
OTA updates, the device is able to download and apply the
update by itself via the Internet without external interaction.
III. PROBLEM STATEMENT & CHALLENGES
In this paper, we present and evaluate a hotpatching ap-
proach that allows to patch resource-constrained embedded
devices without violating real-time constraints. Such resource-
constrained devices, which are interacting with the physical
world, are a worthwhile target for adversaries with malicious
intent. Those devices can cause potential harm to humans
(safety) and even society (critical infrastructure), thus requiring
regular updates to accurately respond to newly discovered
vulnerabilities and novel attack techniques. Consider a modern
automobile which includes a network of integrated electronic
components and systems with different attack surfaces that
can be targeted by an adversary. In an experimental analysis
of a modern automotive, Koscher, Czeskis, Roesner, et al.
demonstrate potential attacks and the large attack surface of
3
Task 1Task 2IDLEt1t2t3t4t5t6t0Timet7t8current cars, which will likely increase in upcoming years [36].
The medical sector moves into a similar direction. The health
industry slowly shifts towards real-time disease monitoring for
personalized healthcare, which can be seen by the evolution of
wearable devices and their increasing application [37]. These
wearable devices continuously measure physical signals like
blood pressure or skin temperature and communicate with each
other. Often, they are integrated into a so-called Body Area
Network (BAN) [38], with vast communication mechanisms
like Bluetooth, infrared, radio-frequency identiﬁcation (RFID),
and near-ﬁeld communication (NFC) [37]. As any embedded
device is powered by software, which may suffer from errors
and vulnerabilities, security and privacy concerns arise. The
current state of knowledge regarding such systems shows three
major threats to medical devices: telemetry (wireless interface),
software threats (alternating logic through vulnerabilities) and
hardware/sensor interface threats (alter sensor signals) [38].
As a result, these devices require security updates in order to
mitigate vulnerabilities. However, applying security updates is
not always possible, if these devices may not be interrupted, or
applying patches comes with side-effects [4]. In these cases,
hotpatching is a viable solution to ﬁx security vulnerabilities.
Challenges arise from the fact that these embedded devices
must operate continuously and may not experience any inter-
ruption. The patching may not have any side-effects and the
whole patching process has to be completely deterministic.
This is especially important for highly-critical devices, e.g.,
manufacturing plants, but also for unattended patching pro-
cesses, e.g., in the case of pacemakers. The patch itself must
be validated to ensure correctness. As patches inﬂuence the
execution of the system, this also changes the time required
for the execution. While this is no problem for commodity
systems, in case of systems with real-time capabilities changes
in the timing can have severe consequences. Therefore, a
predictable timing of the execution is mandatory for such
systems. Furthermore, the patching process must work with
minimal hardware requirements. Built-in embedded devices
are manufactured and used in huge quantities. Hence, they are
heavily optimized to minimize the needed hardware, in order
to lower energy consumption as well as costs. As a result, these
devices come with little resources, especially regarding spare
hardware and memory. This makes standard A/B patching
schemes or methods using a complete hardware switchover no
practical solution. The hotpatching approach has to work using
standard off-the-shelf hardware, so that it can be implemented
into existing devices without hardware changes, as changes
in the hardware usually require larger redesign and extensive
development process.
Current research focus on correctness of patch application
or minimizing resource consumption and downtime. Mugarza,
Parra, and Jacob propose a “Quarantine-mode” to setup and
monitor a live patch [39]. Zhang, Ahn, Zhang, et al. describe a
software-based trampoline approach for hotpatching that min-
imizes the resource and energy use of embedded devices [40].
Real-Time Patch capabilities have been considered in [41],
[42] and in [43], though the focus are the requirements and
solutions for a full real-time patching process including state
transfer and atomic switching. Frameworks for hotpatching
such as Katana [16] or Kitsune [17] successfully showed
the applicability of hotpatching and simpliﬁed development
efforts for generation of hotpatches and applications. However,
both require dynamic linking of application code. Embedded
devices on the other hand often do not provide any means of
run-time linking and use a static linking approach. No focus
has been laid yet at hotpatching vulnerabilities in resource-
constrained devices subjected to real-time constraints. Sum-
ming up, we identiﬁed several challenges that arise when hot-
patching embedded real-time systems: (1) preserving hard real-
time requirements, (2) compatibility with existing hardware,
(3) memory architecture of embedded devices, (4) concurrency
issues when applying patches.
The HERA framework we introduce in this paper addresses
all
these challenges. It works on standard Cortex-M3/M4
processors and relies on built-in debugging features. The
memory overhead is minimal, as only the patch itself and
a list of several memory addresses have to be stored. The
actual switching process to enable the hotpatch is an atomic
instruction on processor level. Using the built-in FPB unit, a
processor instruction is replaced on-the-ﬂy. This instruction is
executed atomically, i.e., in one step and cannot be interrupted.
As a result, no unexpected side-effects can occur. Since this
is all done within a single instruction, the execution time is
completely deterministic, which is mandatory for real-time
systems with hard deadlines.
IV. ASSUMPTIONS AND ATTACKER MODEL
Assumptions. We assume a real-time system that features all
types of deadlines, i.e., hard, ﬁrm, and soft deadlines. Further-
more, we assume a real-time operating system (RTOS) archi-
tecture. The RTOS itself ensures proper real-time operation.
That is, it runs all tasks correctly with respect to deadlines.
An update is available, either as source code or binary. The
system is equipped with sufﬁcient resources allowing to run
the update within its real-time requirements as well as a low
priority or idle-time task to download the patch to the system
writable memory, i.e., RAM. Thus, no deadlines are missed.
An updater service, that is able to download the patch as well
as a secure update mechanism are assumed to be in place.
The updater then triggers an atomic (hardware) switchover to
enable the patch. The concrete implementation of the updater
service is out of scope as this is heavily dependent on the target
use-case. For example, the updater service should regularly
check for updates and download these via an external interface.
Before applying the patch, the integrity and authenticity has to
be checked, as well as the transmission and the source of the
patch has to be veriﬁed. Thus, the update mechanism itself
is secure. As elaborated in Section II, software updates and
corresponding updaters are commonly used in practice. Note
that the real-time operating system FreeRTOS already includes
an updater service that can be adapted to speciﬁc needs [35].
Attacker Model. We assume a remote attacker who is able
to exploit an arbitrary vulnerability due to a programming
mistake. A typical error is a buffer overﬂow error due to
a missing bounds check. An attacker is able to exploit the
vulnerability to overwrite parts of the memory and launch a
run-time attack. We assume the root cause can be mitigated
by introducing or replacing a code block, e.g., by introducing
further checks or validating inputs. The attacker does not
have physical access and can only attack the device remotely.
Furthermore, we assume there is a secure updater available,
that the attacker cannot manipulate or sabotage.
4
V. OVERVIEW OF HERA
In this section, we introduce the design of HERA, the ﬁrst
hotpatching framework for embedded systems with real-time
constraints. First, we analyze existing hotpatching strategies
and present the high-level approach of our hotpatching strategy
(cf. Section V-A). Thereafter, we present in detail the different
components of HERA (cf. Section V-B).
A. On Hotpatching Strategy
There exist
three main hotpatching strategies, namely
(1) relocation of linked binaries, (2) instrumentation of the
binary, and (3) A/B update schemes.
Hotpatching Relocatable Executables. This approach re-
quires modiﬁcation of the binary linking data structures. Dy-
namically linked binaries reference code that is not part of the
compiled library and is loaded during run-time. This is often
the case for libraries which are shared among different appli-
cations and common practice in modern operating systems like
Windows or Linux without strict real-time requirements. The
operating system holds a data structure with symbolic links to
this shared code piece and resolves those links during run-time.
The implementation of hotpatching with relocatable executa-
bles is straightforward in case dynamic linking is supported
by the underlying operating system. With dynamic linking
only a symbolic link needs to be adjusted during run-time to
apply a hotpatch. Thus, whole components can be exchanged
and the number of total active patches is unlimited. However,
in embedded systems, due to real-time constraints, binaries
are often linked statically and the operating system does
not support dynamic linking [44]. This is because run-time
linking creates overhead and may deteriorate predictability,
i.e., a key property of a real-time system. In fact, the popular
FreeRTOS real-time operating system is linked statically [45].
As such, popular patching frameworks such as Katana [16] and
Kitsune [17] are not applicable as they both require dynamic
linking.
Instrumentation-Based Hotpatching. This approach requires
modiﬁcation of the program execution. The most common
technique is a direct rewrite of the ﬁrmware image (i.e., the
running executable) by redirecting the execution through a so-
called trampoline. A trampoline is a single instruction, e.g.,
a branch or jump instruction, inserted at an arbitrary point
redirecting the original control-ﬂow of an application. Another
technique is dynamic binary translation. This approach is based
on executing the application inside of a translator component
enabling exchange and instrumentation of instructions on-the-
ﬂy [46]. However, this approach induces a high overhead and
requires high computing resources which resource-constrained
embedded devices, especially in a real-time context, do not
provide.
A/B schemes. Another hotpatching method is the concept
of a so-called A/B update scheme [39], [47]. This scheme
consists of two instances: one instance is actively running; the
other instance can be updated. At a dedicated point in time,
a switchover from the active to the newly updated instance
is performed. The main advantage of this strategy is that
the update can take place completely independent from the
active instance. A/B updated schemes are widely used in
practice, e.g., over-the-air updates for Android devices [48]
and Espressif ESP32 microcontrollers [49]. However, on the
downside, this approach requires doubling the memory to hold
both instances, and a dedicated management unit that allows
the update of the inactive instance and performs the switchover.
The real-time capability of a A/B scheme depends on the
management unit. Common A/B solutions like in Android [48]
require a full device reboot. As embedded systems are often
equipped with minimal hardware and memory and in addition
bound to real-time constraints, this is not a viable hotpatching
strategy for these devices. An even more sophisticated method
is to use a so-called complete switchover: multiple instances
are executed in parallel and a single instance can be taken
ofﬂine and patched, while the other instances continue to run.
Again, this results in a large overhead as two instances have
to be executed and managed by a dedicated unit at the same
time [50].
HERA Hotpatching. Our hotpatching strategy is speciﬁcally
tailored towards embedded systems with minimal comput-
ing power and memory. We introduce a hardware-assisted
hotpatching strategy which allows arbitrary code insertions
through so-called trampolines dynamically inserted into the
program binary. Our system is based on a standard real-time
operating system (RTOS) which ensures that all deadlines
are met through proper scheduling. The activation of a patch
usually requires a so-called atomic patch activation, i.e., the
activation process must not be interrupted to preserve consis-
tency of the system. Leveraging hardware allows us to perform