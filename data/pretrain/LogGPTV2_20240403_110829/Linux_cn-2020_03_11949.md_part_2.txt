```
*** Welcome to IELM ***  Type (describe-mode) for help.
ELISP> (rot13 "Hello, World")
"Uryyb, Jbeyq"
ELISP> (rot13 "Uryyb, Jbeyq")
"Hello, World"
ELISP>
```
简而言之，你将明文旋转了 13 个位置，就得到了密文。你又旋转了一次 13 个位置，就返回了最初的明文。 这就是这个包可以帮助你解决的问题。
那么，decipher 模块又是如何帮助我们的呢？让我们创建一个新的缓冲区 `test-cipher` 并输入你的密文（在我的例子中是 `Uryyb，Jbeyq`）。
你现在面对的是一个相当复杂的界面。现在把光标放在紫色行的密文的任意字符上，并猜测这个字符可能是什么：Emacs 将根据你的选择更新其他明文的猜测结果，并告诉你目前为止字母表中的字符是如何分配的。
你现在可以用下面各种助手命令来关闭选项，以帮助推断密码字符可能对应的明文字符：
* `D`： 列出示意图（该加密算法中双字符对）及其频率
* `F`： 表示每个密文字母的频率
* `N`： 显示字符的邻近信息。我不确定这是干啥的。
* `M` 和 `R`： 保存和恢复一个检查点，允许你对工作进行分支以探索破解密码的不同方法。
总而言之，对于这样一个深奥的任务，这个包是相当令人印象深刻的！如果你经常破解密码，也许这个程序包能帮上忙？
### 医生
![doctor](/data/attachment/album/202003/02/093715rb35134vcaaaovar.png)
啊，Emacs 医生。其基于最初的 [ELIZA](https://en.wikipedia.org/wiki/ELIZA)，“医生”试图对你说的话进行心理分析，并试图把问题复述给你。体验几分钟，相当有趣，它也是 Emacs 中最著名的古怪玩意之一。你可以使用 `M-x doctor` 来运行它。
### Dunnet
Emacs 自己特有的类 Zork 文字冒险游戏。输入 `M-x dunnet` 就能玩了。这是一款相当不错的游戏，简单的说，它是另一款非常著名的 Emacs 游戏，很少有人真正玩到通关。
如果你发现自己能在无聊的文档工作之间空出时间来，那么这是一个超级棒的游戏，内置“老板屏幕”，因为它是纯文本的。
哦，还有，不要想着吃掉那块 CPU 卡 :)
### 五子棋
![gomoku](/data/attachment/album/202003/02/093718fq4lqug4kgcgqbo4.png)
另一款写于 20 世纪 80 年代的游戏。你必须将 5 个方块连成一条线，井字棋风格。你可以运行 `M-x gomoku` 来与 Emacs 对抗。游戏还支持鼠标，非常方便。你也可以自定义 `gomoku` 组来调整网格的大小。
### 生命游戏
[康威的生命游戏](https://en.wikipedia.org/wiki/Conway's_Game_of_Life) 是细胞自动机的一个著名例子。Emacs 版本提供了一些启动模式，你可以（通过 elisp 编程）调整 `life-patterns` 变量来更改这些模式。
你可以用 `M-x life` 触发生命游戏。事实上，所有的东西，包括显示代码、注释等等一切，总共不到 300 行，这也让人印象深刻。
### 乒乓，贪吃蛇和俄罗斯方块
![tetris](/data/attachment/album/202003/02/093720a068no8lpj6x0znn.png)
这些经典游戏都是使用 Emacs 包 `gamegrid` 实现的，这是一个用于构建网格游戏（如俄罗斯方块和贪吃蛇）的通用框架。gamegrid 包的伟大之处在于它同时兼容图形化和终端 Emacs：如果你在 GUI 中运行 Emacs，你会得到精美的图形；如果你没有，你看到简单的 ASCII 艺术。
你可以通过输入 `M-x pong`、`M-x snake`、`M-x tetris` 来运行这些游戏。
特别是俄罗斯方块游戏实现的非常到位，会逐渐增加速度并且能够滑块。而且既然你已经有了源代码，你完全可以移除那个讨厌的 Z 形块，没人喜欢它！
### Solitaire
![solitaire image](/data/attachment/album/202003/02/093721wjb3hhoht2t527bg.png)
可惜，这不是纸牌游戏，而是一个基于“钉子”的游戏，你可以选择一块石头（`o`）并“跳过”相邻的石头进入洞中（`.`），并在这个过程中去掉你跳过的石头，最终只能在棋盘上留下一块石头，重复该过程直到棋盘被请空（只保留一个石头）。
如果你卡住了，有一个内置的解题器名为 `M-x solitire-solve`。
### Zone
我的另一个最爱。这是一个屏幕保护程序——或者更确切地说，是一系列的屏幕保护程序。
输入 `M-x zone`，然后看看屏幕上发生了什么！
你可以通过运行 `M-x zone-when-idle`（或从 elisp 调用它）来配置屏幕保护程序的空闲时间，时间以秒为单位。你也可以通过 `M-x zone-leave-me-alone` 来关闭它。
如果在你的同事看着的时候启动它，你的同事肯定会抓狂的。
### 乘法解谜
![mpuz](/data/attachment/album/202003/02/093723j7b7p52bbx0mbp0o.png)
这是另一个脑筋急转弯的益智游戏。当你运行 `M-x mpuz` 时，将看到一个乘法解谜题，你必须将字母替换为对应的数字，并确保数字相加（相乘？）符合结果。
如果遇到难题，可以运行 `M-x mpuz-show-solution` 来解决。
### 杂项
还有更多好玩的东西，但它们就不如刚才那些那么好玩好用了：
* 你可以通过 `M-x morse-region` 和 `M-x unmorse-region` 将一个区域翻译成莫尔斯电码。
* Dissociated Press 是一个非常简单的命令，它将一个类似随机穿行的马尔可夫链生成器应用到缓冲区中的文本中，并以此生成无意义的文本。试一下 `M-x dissociated-press`。
* `gametree` 软件包是一个通过电子邮件记录和跟踪国际象棋游戏的复杂方法。
* `M-x spook` 命令插入随机单词（通常是到电子邮件中），目的是混淆/超载 “NSA 拖网渔船” —— 记住，这个模块可以追溯到 20 世纪 80 年代和 90 年代，那时应该有间谍们在监听各种单词。当然，即使是在十年前，这样做也会显得非常偏执和古怪，不过现在看来已经不那么奇怪了……
### 总结
我喜欢 Emacs 附带的游戏和玩具。它们大多来自于，嗯，我们姑且称之为一个不同的时代：一个允许或甚至鼓励奇思妙想的时代。有些玩意非常经典（如俄罗斯方块和汉诺塔），有些对经典游戏进行了有趣的变种（如黑盒）——但我很高兴这么多年后它们依然存在于 Emacs 中。我想知道时至今日，类似这些的玩意是否还会再纳入 Emacs 的代码库中；嗯，它们很可能不会——它们将被归入包管理仓库中，而在这个干净而无菌的世界中，它们无疑属于包管理仓库。
Emacs 要求将对 Emacs 体验不重要的内容转移到包管理仓库 ELPA 中。我的意思是，作为一个开发者，这是有道理的，但是……对于每一个被移出并流放到 ELPA 的包，我们是不是在蚕食 Emacs 的精髓？
---
via: 
作者：[Mickey Petersen](https://www.masteringemacs.org/about) 选题：[lujun9972](https://github.com/lujun9972) 译者：[lujun9972](https://github.com/lujun9972) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出