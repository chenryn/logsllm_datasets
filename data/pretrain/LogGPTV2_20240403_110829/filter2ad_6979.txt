title:Building Application-Aware Network Environments using SDN for Optimizing
Hadoop Applications
author:Shuai Zhao and
Ali Sydney and
Deep Medhi
Building Application-Aware Network Environments
Using SDN for Optimizing Hadoop Applications
Shuai Zhao1, Ali Sydney2, Deep Medhi1
1University of Missouri-Kansas City, 2Raytheon BBN Technologies
(shuai.zhao, dmedhi)@umkc.edu, PI:EMAIL
ABSTRACT
Hadoop has become the de facto standard for Big
Data analytics, especially for workloads that use the
MapReduce (M/R) framework. However, the lack of
network awareness of the default MapReduce resource
manager in Hadoop can cause unbalanced job schedul-
ing, network bottleneck, and eventually increase the
Hadoop run time if Hadoop nodes are clustered in sev-
eral geographically distributed locations. In this paper,
we present an application-aware network approach us-
ing software-deﬁned networking (SDN) for distributed
Hadoop clusters. We develop the SDN applications for
this environment that consider network topology dis-
covery, traﬃc monitoring, and ﬂow rerouting in addi-
tion to loop avoidance mechanisms.
Keywords
Application-Aware Networking; Hadoop; Software-
Deﬁned Networking
1.
INTRODUCTION
Hadoop M/R is a scalable framework that allows ded-
icated, seemingly unbound number of servers to par-
ticipate in big and complex data analytics’ processes.
Consider the scenario where a site does not have suﬃ-
cient Hadoop nodes and resources to run a large appli-
cation. This could be due to a private cloud that may
not have enough resources that may use a public cloud
as a supplement for Hadoop computation. Generaliz-
ing this further, we consider running Hadoop applica-
tions that need to be run on Hadoop nodes distributed
ACM acknowledges that this contribution was authored or co-authored by an
employee, or contractor of the national government. As such, the Government
retains a nonexclusive, royalty-free right to publish or reproduce this article, or
to allow others to do so, for Government purposes only. Permission to make
digital or hard copies for personal or classroom use is granted. Copies must bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. To copy otherwise,
distribute, republish, or post, requires prior speciﬁc permission and/or a fee. Re-
quest permissions from permissions@acm.org.
SIGCOMM ’16, August 22–26, 2016, Florianopolis, Brazil
c(cid:13) 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2959059
over multiple geographic locations. Hadoop’s lack of
network awareness becomes an issue. While the com-
pute and disk I/O requirements can be scaled with the
number of servers, a distributed environment leads to
increased network traﬃc between Hadoop nodes. The
bandwidth-intensive shuﬄe phase of M/R contributes
signiﬁcantly to the overall response time. Furthermore,
the response time is exacerbated if communication pat-
terns are heavily skewed, as is very common in many
M/R workloads when Hadoop nodes are distributed in
multiple geographic locations. These issues associated
with the M/R program exist as the default Hadoop re-
source manager only considers compute resources such
as CPU, disk, and memory, but is unaware of the un-
derlying network that connects multiple locations.
We propose an application-aware networking (AAN)
approach to manage such distributed Hadoop network
traﬃc. AAN provides the ability for an intelligent net-
work to maintain current information about applica-
tions that connect to it and as a result, optimize the
operation of these applications. The information main-
tained includes the application state and resource re-
quirements. We use SDN to provide a software-based
implementation of AAN for Hadoop distributed clus-
ters, which enables a ﬁne-grained way of controlling
individual applications and network devices. SDN re-
moves the control plane from the network hardware and
implements it in software instead. AAN beneﬁts from
SDN in three ways: (1) by enabling dynamic control,
conﬁguration, and allocation of resources; (2) by run-
ning network control in a separate server from the traf-
ﬁc forwarding device; and (3) by enabling innovation of
experimenting new network protocol implementations
and tests. We have now prototyped SDN applications
for AAN that include network topology discovery, traf-
ﬁc monitoring, and ﬂow rerouting in addition to loop
avoidance mechanisms.
Heuristic task schedule algorithms were proposed to
achieve data locality and increase network bandwidth
utilization [4, 5, 7]. However, these approaches can be
improved if we consider the integration of applications
(a)
(b)
Figure 1: (a) Architecture, (b) Topology
with the network. Other research has considered a run-
time job scheduling platform but simulations were not
conducted to validate this approach [6]. A well-deﬁned
control API for SDN was introduced in [2]. This re-
search was leveraged in the design of our SDN applica-
tion framework. Corral [3] proposed an oﬄine Network-
Aware scheduling framework using SDN.
Subsequent sections of the paper are organized as fol-
lows. Section 2 describes our proposed AAN architec-
ture. In Section 3, preliminary experimentation results
are presented. We conclude with a summary and future
work in Section 4.
2. AAN ARCHITECTURE
Figure. 1(a) shows our proposed architecture. This
has two components:
(1) an SDN environment that
includes packet forwarding devices, an SDN controller
that provides SDN applications such as topology dis-
covery, traﬃc monitoring, shortest path, and ﬂow
rerouting,
in addition to an ARP solver mechanism
for network-loop avoidance; (2) a Hadoop Application
Manager that includes three components: a Hadoop
File System (HDFS), JobTracker, and TaskTracker
Controller.
The Hadoop application manager controls any traf-
ﬁc movement inside of the Hadoop cluster. Three main
components are implemented using a default Hadoop
conﬁguration port number. The HDFS controller en-
ables SSH access among clusters, and it also supports
Hadoop ﬁle operations such as read and write functions.
The JobTracker Controller and TaskTracker Controller
support the allocation of Hadoop resources and com-
munications between master and data nodes as well as
the data nodes themselves.
3. PRELIMINARY EXPERIMENTATION
The testbed is created using virtual machines (VMs)
in the Global Environment for Network Innovations
(GENI) [1] platform. Fig. 1(b) shows our topology
setup. We created a ring topology using ﬁve Open-
VSwitches (OVSs) as forwarding devices. To illustrate
the impact, we consider a Hadoop cluster with one
Hadoop master and two data nodes (DN) at two dif-
ferent locations, along with two iPerf traﬃc generators
Figure 2: Hadoop M/R Run Time Comparison
for background traﬃc. All of the VMs have one core
PI:EMAIL, 880MB memory. The bandwidth be-
tween the OVSs and host was set to 100 Mbps. The
link threshold was set to 50 Mbps between OVS1 and
OVS5.
In this environment, we tested Hadoop M/R perfor-
mance by running the WordCount program with the fol-
lowing ﬁle sizes: 200 MB, 300 MB, and 400 MB. Fig. 2
shows that Hadoop WordCount run time decreases by
an average of 23% when using our AAN platform.
4. CONCLUSION AND FUTURE WORK
In this paper, we presented an application-aware net-
working environment using SDN for Hadoop M/R ap-
plications running in a distributed environment. We
conducted a proof-of-concept experiment to show that
the AAN approach reduces the compute time. The ﬂow
re-route results show that the SDN controller is CPU
intensive. Rigorous load testing, using a high-end SDN
controller in a complex topology and M/R scheduler op-
timizations are planned in our future work. Our goal is
to schedule M/R jobs in a more eﬃcient and manage-
able way using our AAN environment.
5. REFERENCES
[1] C. Elliott. Geni-global environment for network
innovations. In LCN, 2008.
[2] Ferguson et al. Participatory networking: An API
for application control of SDNs. In ACM
SIGCOMM, 2013.
[3] Jalaparti et al. Network-aware scheduling for
data-parallel jobs: plan when you can. In ACM
SIGCOMM Comp. Comm. Rev. ACM, 2015.
[4] Jin et al. Bar: An eﬃcient data locality driven task
scheduling algorithm for cloud computing. In
Proc. 11th IEEE/ACM CCGrid, 2011.
[5] Tan et al. Coupling task progress for mapreduce
resource-aware scheduling. In INFOCOM, 2013.
[6] Wang et al. Programming your network at
run-time for big data applications. In SDN Hot
Topics. ACM, 2012.
[7] Zaharia et al. Delay scheduling: a simple technique
for achieving locality and fairness in cluster
scheduling. In Proc. of 5th Euro. Conf. on
Comp. Systems, 2010.