00000050: 1f50 e04f d020 ea3a 6910 a2d8 0800 2b30 .P.O. .:i.....+0
00000060: 309d 1400 2e80 2020 ec21 ea3a 6910 a2dd 0..... .!.:i...
00000070: 0800 2b30 309d 3e00 0000 0000 0000 0000 ..+00.>.........
00000080: 0000 006a 0000 0000 0000 0800 0a00 6500 ...j..........e.
00000090: 7800 7000 2e00 6400 6c00 6c00 0000 4d00 x.p...d.l.l...M.
000000a0: 6900 6300 7200 6f00 7300 6f00 6600 7400 i.c.r.o.s.o.f.t.
000000b0: 0000 0000 0000 1000 0000 0500 00a0 0300 ................
000000c0: 0000 2800 0000 0000 0000                ..(.......
CVE-2017-8464 - Stuxnet 3.0
• HasLinkTargetIDList flag  is set
• Contains a LinkTargetIDList
00000000: 4c00 0000 0114 0200 0000 0000 c000 0000 L...............
00000010: 0000 0046 8100 0000 0000 0000 0000 0000 ...F............
00000020: 0000 0000 0000 0000 0000 0000 0000 0000 ................
00000030: 0000 0000 0000 0000 0000 0000 0000 0000 ................
00000040: 0000 0000 0000 0000 0000 0000 
LinkFlags = HasLinkTargetIDList |
IsUnicode 
CVE-2017-8464 - Stuxnet 3.0
• LinkTargetIDList Contains 3 ItemIDs
00000040:
6800 1400
h...
00000050: 1f50 e04f d020 ea3a 6910 a2d8 0800 2b30 .P.O. .:i.....+0
00000060: 309d 1400 2e80 2020 ec21 ea3a 6910 a2dd 0..... .!.:i...
00000070: 0800 2b30 309d 3e00 0000 0000 0000 0000 ..+00.>.........
00000080: 0000 006a 0000 0000 0000 0800 0a00 6500 ...j..........e.
00000090: 7800 7000 2e00 6400 6c00 6c00 0000 4d00 x.p...d.l.l...M.
000000a0: 6900 6300 7200 6f00 7300 6f00 6600 7400 i.c.r.o.s.o.f.t.
000000b0: 0000 0000 0000
......
IDList[0] = Root Folder
-> CLSID of MY Computer
IDList[1] =
Root Folder
-> CLSID of Control Panel
IDList[2] = Malformed IDList to load exp.dll
CVE-2017-8464 - Stuxnet 3.0
• Contains a SpecialFolderDataBlock
• SpecialFolderID = 3 ( CSIDL_CONTROLS )
000000b0:
1000 0000 0500 00a0 0300
..........
000000c0: 0000 2800 0000 0000 0000                ..(.......
BlockSize       = 0x10
BlockSignature  = 0xA0000005 (SpecialFolderDataBlock)
SpecialFolderID = 0x3 (CSIDL_CONTROLS)
Offset
= 0x28
TerminalBlock
Fuzzing
• Use CVE-2017-8464 as Corpus
• Try to focused on LinkFlags / LinkTargetIDList / SpecialFolderDataBlock mutation
00000010:
8100 0000
....
00000040:
6800 1400
h...
00000050: 1f50 e04f d020 ea3a 6910 a2d8 0800 2b30 .P.O. .:i.....+0
00000060: 309d 1400 2e80 2020 ec21 ea3a 6910 a2dd 0..... .!.:i...
00000070: 0800 2b30 309d 3e00 0000 0000 0000 0000 ..+00.>.........
00000080: 0000 006a 0000 0000 0000 0800 0a00 6500 ...j..........e.
00000090: 7800 7000 2e00 6400 6c00 6c00 0000 4d00 x.p...d.l.l...M.
000000a0: 6900 6300 7200 6f00 7300 6f00 6600 7400 i.c.r.o.s.o.f.t.
000000b0: 0000 0000 0000 1000 0000 0500 00a0 0300 ................
000000c0: 0000 2800 0000 0000 0000 
..(.......
Fuzzing
• Write the Harness 
• Prepare Corpus
• Collect different LNK files
• Create manually 
• Testcases from GitHub
• Old CVE PoC
• …
• Run the Fuzzer
• Check code coverage with drcov and lighthouse + IDA Pro
• Use interesting testcases as new seed
• Reversing the target to help Fuzzer
Fuzzing
• Found first crash after only few hours of fuzzing
CVE-2019-1188
• Found a Heap Overflow in CInternetFolder::ParseDisplayName
1400 1200
....
00000050: 3200 0000 0000 0000 0000 0000 417c 0000 2...........A|..
00000060: 0000 1000 0000 0500 00a0 0100 0000 0000 ................
00000070: 0000
..
LinkTargetIDList
IDList[0]       = File -> “A|”
ExtraData
BlockSignature
= 0xA0000005 (SpecialFolderDataBlock) 
SpecialFolderID = 0x1 (CSIDL_INTERNET)
CVE-2019-1188
• CInternetFolder::ParseDisplayName will be called 
• Try to convert our URI “A|” into item identifier list
• Validate URI with _EnsureIUri
HRESULT CInternetFolder::ParseDisplayName(...) // pszDisplayName = “A|” 
{
IUri* uri = NULL;
HRESULT hres = E_FAIL;
if ( !BindCtx_ContainsObject(pbc, L"Validate URL") || IsPlugableProtocol(pszDisplayName) ) {
hres = _EnsureIUri(pszDisplayName, pbc, &uri);
if ( hres >= 0 ) {
...
CVE-2019-1188
• _EnsureIURi will fail if URI is a file path
• We set wsURI[1] to ‘|’ to bypass this check
HRESULT _EnsureIUri(WCHAR *wsURI, IBindCtx *pbc, IUri **ppURI)
{
...
if ( PathIsFilePath(wsURI) ) // passed by set wsURI[1] to '|'
return E_FAIL;
...
CVE-2019-1188
• If URI is not a file path, allocate a buffer and validate it with _ValidateURL
• Only allocated with size of provided URI “A|”
• wcslen(“AI”) * 2 + 2 = 6 bytes
HRESULT _EnsureIUri(WCHAR *wsURI, IBindCtx *pbc, IUri **ppURI)
{
// small buffer allocated
wil::make_unique_string_nothrow(
&pszUrl,
// output
wsURI,
// src
-1);
//  file:///C:/Windows/System32/A%7c
• Remember the small buffer? Heap Overflow!
HRESULT IURLQualifyWithContext(LPWSTR *url, LPWSTR *out_url)
{
...
if ( url[1] == ':' || url[1] == '|' || url[0] == '\\' )
{
...
// Combine URL with current directory
SHGetCurrentDirectory(current_dir);
PathCchCombine(str.pszStr, pcchUrl, current_dir, url);
...
// Convert to URL -> file:///C:/Windows/System32/A%7c
UrlCreateFromPathW(str.pszStr, str.pszStr, &pcchUrl, 0);
}
StringCchCopyW(out_url, 2084, str.pszStr);
// Overflow
CVE-2019-1188
• It’s actually an ancient bug (?)
• At least exists since Windows 2000
• Caller must provide a buffer larger than 2084 bytes
SHDOCAPI IURLQualify(...)
{
...
if (SUCCEEDED(hres)) {
StrCpyN(pszTranslatedURL, (LPTSTR) strOut, MAX_URL_STRING);
}
// Special cases: URLs of the form :
//
URLs of the form \
// we'll assume that if the second character is a : or |, this is an url of
// that form, and we will guess "file://" for the prefix.
// we'll assume any url that begins with a single \ is a file: url
SpecialFolderDataBlock
• Back to our PoC
• What is CSIDL?
1000 0000 0500 00a0 0100 0000 0000 ................
00000070: 0000
..
ExtraData
BlockSignature
= 0xA0000005 (SpecialFolderDataBlock) 
SpecialFolderID = 0x1 (CSIDL_INTERNET)
SpecialFolderDataBlock
• Back to our PoC
• What is CSIDL?
• CSIDL (Constant Special Item ID List) 
• System-independent way to identify special folders
• System folder may be "C:\Windows" or "C:\Winnt" on different Windows
• Use CSIDL_WINDOWS instead
SpecialFolderDataBlock
• CSIDL_CONTROLS -> CControlPanelFolder::ParseDisplayName
• CSIDL_INTERNET -> CInternetFolder::ParseDisplayName
SpecialFolderDataBlock
• By assigning different CSIDL in SpecialFolderID
• We can call ParseDisplayName method of many different interfaces!
#define CSIDL_DESKTOP
0x0000
// 
#define CSIDL_INTERNET
0x0001
// Internet Explorer (icon on desktop)
#define CSIDL_PROGRAMS
0x0002
// Start Menu\Programs
#define CSIDL_CONTROLS
0x0003
// My Computer\Control Panel
#define CSIDL_PRINTERS
0x0004
// My Computer\Printers
#define CSIDL_PERSONAL
0x0005
// My Documents
#define CSIDL_FAVORITES
0x0006
// \Favorites
#define CSIDL_STARTUP
0x0007
// Start Menu\Programs\Startup
#define CSIDL_RECENT
0x0008
// \Recent
#define CSIDL_SENDTO
0x0009
// \SendTo
#define CSIDL_BITBUCKET
0x000a
// \Recycle Bin
#define CSIDL_STARTMENU
0x000b
// \Start Menu
#define CSIDL_MYDOCUMENTS
CSIDL_PERSONAL //
Personal was just a silly name for My Documents
#define CSIDL_MYMUSIC
0x000d
// "My Music" folder
#define CSIDL_MYVIDEO
0x000e
// "My Videos" folder
#define CSIDL_DESKTOPDIRECTORY
0x0010
// \Desktop
#define CSIDL_DRIVES
0x0011
// My Computer
#define CSIDL_NETWORK
0x0012
// Network Neighborhood (My Network Places)
#define CSIDL_NETHOOD
0x0013
// \nethood
#define CSIDL_FONTS
0x0014
// windows\fonts
#define CSIDL_TEMPLATES
0x0015
#define CSIDL_COMMON_STARTMENU
0x0016
// All Users\Start Menu
#define CSIDL_COMMON_PROGRAMS
0X0017
// All Users\Start Menu\Programs
#define CSIDL_COMMON_STARTUP
0x0018
// All Users\Startup
#define CSIDL_COMMON_DESKTOPDIRECTORY
0x0019
// All Users\Desktop
#define CSIDL_APPDATA
0x001a
// \Application Data
#define CSIDL_PRINTHOOD
0x001b
// \PrintHood
#define CSIDL_LOCAL_APPDATA
0x001c
// 
#define CSIDL_ALTSTARTUP
0x001d
// non localiz
#define CSIDL_COMMON_ALTSTARTUP
0x001e
// non localiz
#define CSIDL_COMMON_FAVORITES
0x001f
#define CSIDL_INTERNET_CACHE
0x0020
#define CSIDL_COOKIES
0x0021
#define CSIDL_HISTORY
0x0022
#define CSIDL_COMMON_APPDATA
0x0023
// All Users\A
#define CSIDL_WINDOWS
0x0024
// GetWindowsD
#define CSIDL_SYSTEM
0x0025
// GetSystemDi
#define CSIDL_PROGRAM_FILES
0x0026
// C:\Program
#define CSIDL_MYPICTURES
0x0027
// C:\Program
#define CSIDL_PROFILE
0x0028
// USERPROFILE
#define CSIDL_SYSTEMX86
0x0029
// x86 system
#define CSIDL_PROGRAM_FILESX86
0x002a
// x86 C:\Prog
#define CSIDL_PROGRAM_FILES_COMMON
0x002b
// C:\Program
#define CSIDL_PROGRAM_FILES_COMMONX86
0x002c
// x86 Program
#define CSIDL_COMMON_TEMPLATES
0x002d
// All Users\T
#define CSIDL_COMMON_DOCUMENTS
0x002e
// All Users\D
#define CSIDL_COMMON_ADMINTOOLS
0x002f
// All Users\S
#define CSIDL_ADMINTOOLS
0x0030
// 
#define CSIDL_CONNECTIONS
0x0031
// Network and
#define CSIDL_COMMON_MUSIC
0x0035
// All Users\M
#define CSIDL_COMMON_PICTURES
0x0036
// All Users\M
#define CSIDL_COMMON_VIDEO
0x0037
// All Users\M
#define CSIDL_RESOURCES
0x0038