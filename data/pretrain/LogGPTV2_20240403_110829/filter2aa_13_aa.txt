版权信息
书名：Android应用安全防护和逆向分析
作者：姜维
排版：KK
出版社：机械工业出版社
出版时间：2017-11-01
ISBN：9787111584452
— · 版权所有 侵权必究 · —
对本书的赞誉
移动应用安全已经是个不可忽视的问题，本书结合多个案例进行实际操作讲解，介绍很多实用工具和命令，是一本非常好的安全逆向工具书籍。姜维研究安全逆向这么久，将自身多年的丰富经验用书本的形式展现给读者也是非常不易。我仔细看过这本书，感觉真的很不错，对学习安全逆向的同学很有帮助，值得购买。
——周鸿祎，360公司创始人、董事长兼CEO，知名天使投资人
本书作者的技术搏客在CSDN上有超过500万人次的总访问量！
为什么这么多人会关注Android安全技术？因为不仅Android安全技术越来越重要，而且要成为真正的开发高手需要从正反两个方面来学习：从正面学习Android编程类别API，逐层学习App开发，从反面（逆向研究APK代码）学习Android系统如何运行的，其他软件是如何实现特定功能的，这样获得的Android知识更加系统全面。作者在书中有非常详细的案例讲解，也提供了大量的工具源码，是Android开发人员逆向学习研究的极好工具手册，可以帮助Android开发者成为更全面的Android高手。
——蒋涛，CSDN创始人，极客帮基金创始人
Android系统应用面越来越广，从移动手机到智能硬件，都有很高的覆盖率，其引发的安全问题危害也越来越大。作者以实际操作讲解的同时，还特别重视一些原理的介绍，可以帮助读者快速提升Android安全技术水平。
——段钢，看雪学院创始人
安全领域是一个冒险的世界，作者结合自己在这个领域的丰富经验，用生动的案例带领读者在这个世界中探险。本书章节安排精心合理，技术点循序渐进，使用了大量带有标注的配图，清晰且直观，属于难得一见的用心之作。
——泮晓波，顶象技术移动安全实验室负责人、合伙人
本书的作者在信息安全领域的多年经验，加上纯粹的技术分享精神，注定了这是一本值得广大安全爱好者期待的好书，本书完整地向你诠释——掌握了安全技术的底层原理，你就掌握了安全的一切。
——丰生强（网名：非虫），国内知名安全专家
随着移动应用的普及，移动应用的安全也随之成为一个严肃而重要的问题。要解决该问题所需要学习的内容非常多，对初学者而言，一本合适的入门书籍将起到承前启后的重要作用。而本书就恰恰是这样的一本书籍，它既涵盖了入门者所必须掌握的基础知识，又精选了许多安全领域中的典型实例并对它们开展了详细讲解。最后，希望作者能再接再厉，对本书内容进行持续更新。
——邓凡平
前言
随着移动应用的广泛使用，不可忽视的一个问题就是信息安全。本书从Android应用安全和逆向两个方面来介绍移动开发中如何做好安全。
我本来不是从事安全逆向工作的，但是一个偶然的机会使我发现逆向研究非常有趣，因为在逆向出别人的App那一刻会觉得无比自豪。
第一次逆向是因为遇到一个问题需要去解决，记得当时想查看一个App的内部资源信息，尝试使用apktool反编译程序，惊奇地发现原来别人的App反编译之后会有这么多东西，逆向真的很有趣。而后在开发中无法实现或者没有相应的资源时就去反编译别人的App，查看对应的代码怎么实现。后来就反编译那些有阻碍的应用，慢慢摸索，克服困难，每研究成功一个案例，便是对自身技能的一次提高。从第一次使用apktool工具，到使用Jadx可视化工具，再到用IDA工具调试，一步一个脚印走过来，经验逐渐丰富，技能也慢慢提升了。
逆向研究需要一种逆向思维，我没有接受过专业训练，只是在业余时间看相关书籍，找几个样本研究，从简单到难，在这个过程中慢慢学到很多技术。本书就是我这几年学习与探索的总结。
本书涉及内容有点多，但是没有一章是多余的，每章内容都是干货。本书包括26章，分为四篇。
基础篇
基础篇包括第1～7章，主要介绍Android技术中与逆向相关的基础知识，为后续章节的学习做准备。
第1章通过对Android中锁屏密码加密算法的分析，带领读者进入安全世界，这方面内容不算复杂，但是需要阅读Android源码来得到算法分析，其中一个知识点是如何通过查看Android源码来帮助解决开发过程中遇到的问题，这是所有Android开发人员必备的技能。通过找到锁屏密码入口，一步一步跟踪最终得到密码加密算法，以及加密之后的内容存放在哪里。这是进入安全逆向分析世界的大门。
第2章主要介绍Android中NDK开发知识。为了安全考虑，现在很多应用把一部分功能做到了Native层，所以如果不知道NDK开发技巧，就无法进行后续的逆向操作。这一章从搭建环境到每个方法的使用，详细讲解了Android中NDK开发的技巧。
第3章主要介绍Android中开发以及逆向需要用到的命令，每个命令都有特定的案例和用法，这些命令不仅仅用于逆向，也能够帮助开发人员提升开发效率，所以了解和掌握这些命令是至关重要的。
第4～7章主要剖析Android中编译之后的apk包含的四类主要文件格式，这部分内容可能有点枯燥，但是至关重要，因为在安全防护或者逆向分析中都有很重要的意义。
防护篇
防护篇包括第8～14章，主要介绍安全防护的相关内容，是本书的核心内容之一。
第8章介绍现在一些应用主要用到的安全防护策略，如混淆、签名校验、反调试检测等，每个安全策略都给出了详细介绍。
第9章介绍Android开发中经常用到的一些权限，介绍如果对这些特殊权限操作不当会带来什么样的安全问题，以及如何预防。
第10章介绍Android中的run-as命令以及如何分析系统安全策略，详细介绍了App、shell、system这三种身份，并介绍了一些技巧，比如如何对应用进行升级权限、降低权限等操作。
第11章讲解Android配置文件中的allowBackup属性引发的安全问题，以及如何应对。本章用一个案例来分析如何导出沙盒数据查看应用中的密码信息，修改密码信息然后再进行还原，全程无需root权限即可完成。
第12章介绍Android中的应用签名机制，讲解应用的签名信息是如何保存的、如何验证的，签名机制的流程，以及如何预防安全问题。
第13章介绍在Android中对apk进行加固的策略，以及如何对恶意者分析apk文件的操作进行防护，还涉及Android中的动态加载机制，并通过动态加载技术实现apk文件的解密功能。
第14章介绍在Android中如何对so文件加固，如何做到安全防护功能。
工具篇
工具篇包括第15～19章，主要介绍逆向分析需要用到的几个工具，本书从实际应用出发，详细介绍每个工具的具体用法，特别是在使用的过程中遇到问题时的处理方法。
第15章介绍逆向工作中用到的工具，以及如何开启设备的调试总开关，这个技能在逆向调试的时候非常重要。
第16章主要介绍Android中反编译神器apktool和Jadx，详细介绍了这两个工具如何使用，以及使用过程中遇到问题时的处理方法。
第17章主要介绍Android中一款Hook神器Xposed，详细介绍这个工具的用法，以及遇到问题时的处理方法。
第18章主要介绍一款脱壳工具，它是基于Xposed工具编写的，可以自动脱壳。
第19章主要介绍Android中另外一款Hook神器Cydia Substrate，详细介绍了这个工具的用法以及遇到问题时的处理方法。
操作篇
操作篇包括第20～26章，主要介绍Android中的逆向操作技巧，包括静态方式和动态方式逆向，用一个经典的加固应用作为逆向案例分析了现阶段脱壳的大致流程，还介绍了Android开发中会遇到的系统漏洞，并分析了一个经典的病毒样本。
第20章主要介绍如何利用静态方式逆向应用，用一个案例讲解了静态防护逆向应用的流程。
第21章主要介绍如何使用Eclipse动态调试smali代码来逆向应用，用一个案例分析整个操作流程。
第22章主要介绍使用IDA工具动态调试so源码，同时也介绍了一些应对反调试检测的方法。
第23章主要介绍如何逆向那些经过加固的应用，用一个案例详细介绍了每一步操作，最后总结了现在脱壳操作的大致流程。
第24章主要总结之前介绍的逆向知识，用一个经典案例作为收尾，讲解了现阶段逆向应用的大体流程和思路。
第25章介绍Android开发中会遇到的系统漏洞——一个是解压文件漏洞，一个是录屏授权漏洞。如果这两个漏洞不做修复，会导致应用沙盒数据篡改以及用户隐私数据的丢失等。该章详细介绍了漏洞的产生原因以及如何进行修复。
第26章介绍Android中一个非常经典的文件加密病毒样本，通过静态方式分析了该病毒样本的工作原理，总结了处理该类病毒的方法。
什么人适合阅读本书
阅读本书需要有一定的Android开发基础。有的读者可能会觉得第1章内容就有点深，本书第1章的目的在于把读者带入安全世界，看不懂没关系，可以从第2章开始看下去，毕竟应用开发领域和安全逆向领域有很多不一样的地方。本书最大的特点在于非常实用，用案例讲解详细操作步骤，跟着每一步具体操作，才能真正看明白。可以把本书作为一本参考书，没看懂不要急，多操作几遍试试。
欢迎联系我
本书用到了很多工具和案例样本、代码，几乎所有代码都给出了具体下载地址，如果在操作过程中发现下载失败或者链接失效，请联系我，可以加我的微信peter_jw212，也可以关注微信公众号“编码美丽”进行留言，或者访问我的博客http://blog.csdn.net/jiangwei0910410003，以及我的个人网站http://www.wjdiankong.cn。有任何问题都可以通过这些渠道联系我，我将尽力给出详细解答。
有的读者读完这本书之后，可能发现有些内容对新技术不再生效了，比如加固和脱壳技术。我在此要说明一下，这些技术是时刻都在变的，所谓道高一尺，魔高一丈，攻防技术每一天都可能改变。所以本书选择了最基本的入门技术进行讲解，因为只有掌握了这些技术，才能继续学习并产生灵感来应对日后变化的技术。我认为最基本的入门技术也是最重要的技术。
致谢
这本书的写作历时一年多，真心觉得很不容易。如果觉得本书写得好，就请推广点赞；如果发现本书有错误的地方，还请批评指正。毕竟第一次写书没有那么完美，期待读者的指正和批评。最后想感谢一些人，他们在我写书过程中给予了技术和精神上的支持。非常感谢非虫大神（《Android软件安全和逆向分析》等书作者）对本书第4章、第7章的so和dex文件格式解析技术的支持；感谢看雪论坛的MindMac大神对第5章的arsc文件格式解析技术的支持；感谢看雪论坛的ThomasKing大神对第14章加固技术的支持；感谢我的同学汪恒和殷传宝对我从开始写作到出版这一路上的陪伴和鼓励。
基础篇
第1章 Android中锁屏密码加密算法分析
第2章 Android中NDK开发
第3章 Android中开发与逆向常用命令总结
第4章 so文件格式解析
第5章 AndroidManifest.xml文件格式解析
第6章 resource.arsc文件格式解析
第7章 dex文件格式解析
第1章 Android中锁屏密码加密算法分析
为了安全，Android设备在解锁屏幕时会有密码输入，那么这个密码存放在哪里？是否为明文存储？如果是加密存储，那么加密算法是什么？这就是本章要介绍的内容。本章的目的是带领读者踏入移动安全的大门。
1.1 锁屏密码方式
Android中现在支持的锁屏密码主要有两种：一种是手势密码，也就是常见的九宫格密码图；一种是输入密码，分为PIN密码和复杂字符密码，而PIN密码就是数字密码，比较简单。当然现在也有一个高级的指纹密码，这不是本章分析的范围，本章只分析手势密码和输入密码。
1.2 密码算法分析
在设置锁屏密码界面，用工具获取当前的View类，然后一步一步跟入，最终会跟到一个锁屏密码工具类：LockPatternUtils.java。每个版本可能实现逻辑不一样，这里用5.1版本的源码进行分析。
1.2.1 输入密码算法分析
找到源码之后，首先来分析一下输入密码算法：
可以看到有一个方法passwordToHash，参数为用户输入的密码和当前用户对应的id，一般设备不会有多个用户，所以这里的userId是默认值0。下面就是最为核心的加密算法了：原文密码+设备的salt值，然后分别进行MD5和SHA-1操作，转化成hex值再次拼接，得到的就是最终保存到本地的加密密码内容。而这里最重要的是如何获取设备对应的salt值，这可以一步一步跟踪代码：
查看getSalt方法，首先根据字段key为lockscreen.password_salt从一个地方获取salt值，如果发现这个值为0，就随机生成一个，然后将其保存到那个地方，最后将salt转化成hex值即可。现在需要找到这个地方，继续跟踪代码：
猜想应该是保存到一个数据库中了，继续跟踪代码：
通过在ServiceManager中获取一个服务来进行操作，在Android中，像这种获取服务的方式最终实现逻辑都是在XXXService类中，这里是LockSettingsService.java类，找到这个类，查看它的getLong方法：
其实到这里就可以看出，非常肯定是数据库中保存的，继续跟踪代码：
果然发现是保存到一个数据库中，继续查看LockSettingsStorage.java类：
看到了，数据库名字叫作locksettings.db，那么它保存在哪里呢？继续看这个类：
可以看到有两个key文件，它们就是用来保存加密之后的手势密码和输入密码的，将信息保存到本地，下次开机解锁需要读取这个文件内容进行密码比对。看到一个目录是system，所以数据库和这两个key文件很可能保存到目录/data/system/下了，为了再证实一下，直接用find命令去根目录下搜索这个数据库文件也是可以的。最终确定是该目录：
这里可能会提示找不到find命令，这时需要安装busybox工具，才能使用这个命令。找到这个数据库文件就好办了，直接取出来，然后用SQLite工具进行查看即可，当然也可以直接在手机中查看。为了方便还是取出来看，如图1-1所示。
图1-1 数据库信息
这里看到了表格字段，并且获取到这个值了，那么下面就要用这个值来验证上面的分析是否正确。首先给设备设置一个简单的输入密码，这里直接输入简单的“1234”，然后会在/data/system目录下生成一个密码加密key文件/data/system/password.key，将该文件导出来，如图1-2所示。
图1-2 加密文件
下面就用简单的Java代码手动实现这个算法，看看分析是否正确。加密算法不用自己写，直接从上面的源码中拷贝出来就可以了。代码如下：
这里的salt值是我们从数据库中得到的，不过要记得进行hex转化：
然后用“1234”原文密码去生成加密之后的信息：
运行结果如图1-3所示。
图1-3 运行结果
可以发现内容和上面的password.key内容完全一致，也就验证了上面的分析完全正确。到这里就分析完了输入密码的加密算法，总结一点就是：MD5（输入明文密码+设备的salt）.Hex+SHA1（输入明文密码+设备的salt）.Hex就是最终的加密内容。而这里最重要的是如何获取设备的salt值，可以用反射机制进行获取，新建一个简单的Android项目：
这样就不用去查看数据库获取salt值了，方便快捷，打印的日志信息如下：
这是数据库中的long类型值转化成hex之后的值。
1.2.2 手势密码算法分析
下面来分析手势密码，代码依然在LockPatternUtils.java中：
这个算法比较简单，就是九宫格图案转化成字节数组，然后用SHA1加密即可。关于九宫格不再多说了，从0开始顺时针计数到8，类似图1-4所示。