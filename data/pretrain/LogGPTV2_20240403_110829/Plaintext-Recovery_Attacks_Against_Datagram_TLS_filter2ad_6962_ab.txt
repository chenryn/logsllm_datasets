patterns “0x00”, “0x01, 0x01”, etc. Vaudenay showed that,
for certain padding schemes, repeated access to a padding
oracle can be used to decrypt arbitrary target ciphertext
blocks (and indeed complete ciphertexts in a block-by-
block manner). His techniques apply to the TLS/DTLS
padding scheme and, for completeness, we show in Algo-
rithm 1 how to decrypt a complete block from a target ci-
phertext C∗, given access to a padding oracle. In this al-
gorithm, for ease of presentation, we number the bytes of
t from 0 to b − 1 starting with
the target ciphertext block C∗
the rightmost byte; we also use C∗
t−1 to denote the cipher-
text block preceding the target block in the ciphertext C∗.
For any block B, we write B[i], 0 ≤ i < b to denote its
bytes. The attack requires on average 128 and at most 256
queries to the padding oracle to decrypt each byte of the tar-
get block. The attack as presented uses 2-block ciphertexts,
but is easily adapted to use longer ciphertexts simply by en-
suring that blocks R, C∗
t are always placed at the end of the
ciphertext.
In practice, to mount a padding oracle attack, an adver-
sary must ﬁnd some way of actually realizing a padding or-
acle for a speciﬁc implementation. In the original presenta-
tion for TLS in [15], Vaudenay posited that such an oracle
could be built by sending a message to a TLS server and
then waiting for a reply in the form of an error message. In
TLSv1.0, a decryption failed message would indi-
cate a padding error, while a bad record mac message
would indicate that padding was correct, but that MAC ver-
iﬁcation had failed. There are (at least) two challenges to
building a TLS padding oracle in this way:
1. The two TLS errors, decryption failed and
bad record mac, are classiﬁed as fatal, causing the
immediate termination of the TLS connection after ev-
ery query to the padding oracle.
Informally, we say
Algorithm 1: Decrypting a block using a padding ora-
cle PO for TLS/DTLS.
t−1, C∗
Data: C∗
Result: P ∗
t = Dk(C∗
Let R be a random b-byte block.;
for i = 0 to b − 1 do
t ) ⊕ C∗
t−1
t
for byte = 0 to 255 do
R[i] = byte;
C = R||C∗
t ;
if PO(C) = VALID then
P [i] = R[i] ⊕ C∗
Break;
t−1[i] ⊕ i;
for j = 0 to i do
R[j] = R[j] ⊕ (i) ⊕ (i + 1);
Output P ;
that the padding oracle behaves as a bomb oracle.
The adversary must wait for a new TLS connection to
be established before making another query, but each
new connection will have fresh keying material. This
makes the attack impractical unless connections are re-
established quickly. Moreover, unless the same plain-
text is repeated in a known ciphertext block across
many connections, the adversary can only efﬁciently
recover the last byte of each block in the bomb oracle
case.
2. The two error messages are encrypted, making it more
difﬁcult for the adversary to distinguish them.
The work of Canvel et al. [2] addressed the second issue
here, by developing a different realization for the padding
oracle. Their realization relies on the fact that, for a TLS
implementation, the processing of a message with valid
padding may take longer than the processing of a message
with invalid padding. The reason for this is that the padding
is checked for validity before the MAC veriﬁcation is per-
formed, and so a TLS implementation that aborts process-
ing immediately after detecting an error (of any kind) will
exhibit a timing difference in message processing for pack-
ets with valid and invalid padding: in the former case, the
MAC veriﬁcation will take place, while in the latter it will
not. The timing difference would then show up as a differ-
ence in the time at which the error messages appear on the
network. As observed in [2], this is exactly how TLS was
implemented in OpenSSL.
In the attack in [2], the timing difference was ampliﬁed
by working with long messages, since these take longer to
pass through MAC veriﬁcation. Canvel et al. reported tim-
ing differences of as much as 2 milliseconds for these long
messages7. Because of noise introduced by various sources,
the padding oracle so obtained is not fully reliable, so the
server had to be queried a number of times for every mes-
sage and a statistical model used to analyse the observed
timings. Moreover, the oracle is still a bomb oracle, so
only one query per TLS connection can be made. Even so,
Canvel et al. [2] were able to use this approach to extract
TLS-encrypted passwords for an IMAP e-mail server run-
ning stunnel, an application using the OpenSSL implemen-
tation of TLS. The attack was perceived as serious enough
that the OpenSSL code for TLS was updated from releases
0.9.6i and 0.9.7a, to ensure that the processing time for TLS
messages is essentially the same, whether or not the padding
is correct, and to send the same encrypted error message,
bad record mac, in both cases. Eventually, the same
countermeasures appeared in the speciﬁcation for TLSv1.1
[6], with the requirement that they must be implemented.
3 Building A Padding Oracle
for
the
OpenSSL Implementation of DTLS
3.1 Assumptions on the Adversary
The objective of the attack is to recover DTLS-protected
plaintext. We assume that the adversary:
• Has access to the ciphertext. This can be achieved by
the adversary gaining access to a network device like
a switch or a router, or by ARP spooﬁng, or by eaves-
dropping in a wireless environment.
• Can send arbitrary DTLS messages to the original re-
cipient. This can be achieved by injecting packets into
the network while spooﬁng the IP and UDP headers.
• Is aware of the encryption algorithm’s block size, b.
The adversary can infer this by either monitoring the
connection’s handshake messages, or the size of the
encrypted messages over time.
• Can detect and record a number of Heartbeat request
packets.
The above assumptions apply when anti-replay is deac-
tivated. We note that anti-replay is enabled by default for
both the OpenSSL and GnuTLS implementations of DTLS,
and we had to modify the server source code to disable it
in our experiments. When anti-replay is activated, then we
also need to assume that the adversary can stop messages of
his choice from reaching their ﬁnal destination. For exam-
ple, the adversary may achieve this by exploiting his control
7We measured the MAC veriﬁcation time for DTLS messages with pay-
load sizes of up to 1456 bytes and found the time to be in the tens of µs
instead.
over a router or a ﬁrewall in the data path. In presenting our
attack below, we assume that anti-replay is disabled, i.e. we
assume that the targeted system does not perform sequence
number checking for incoming DTLS messages. We ex-
plain how to modify the attack to handle the case where
anti-replay is enabled in Section 4.5.
3.2 A Padding Oracle for the OpenSSL Imple-
mentation of DTLS
In this section, we explain how to construct a padding
oracle for the OpenSSL implementation of DTLS. This or-
acle can then be used in the standard way to decrypt ar-
bitrary ciphertext blocks and thence arbitrary amounts of
plaintext data, as described in Section 2.4. The key obser-
vation we use is that, in the current OpenSSL implemen-
tation of DTLS, if the padding underlying a ciphertext is
valid, then the MAC on the message is checked, whereas
if the padding is invalid, then the MAC is not checked and
the ciphertext is rejected immediately. This contravenes the
requirement for equal processing times in TLSv1.1 that is
inherited by reference in the DTLS speciﬁcation. As a con-
sequence of this deviation, we would expect the processing
time for a DTLS packet with invalid padding to be slightly
less than that of a DTLS packet with valid padding. The
actual time difference depends on a number of factors in-
cluding the algorithms used, the clock-speed of the target
system, the size of the DTLS packet, other processes run-
ning on the target system, and the network conditions. For
example, we measured the MAC veriﬁcation time on our
testing machine running OpenSSL with HMAC-SHA-1 and
found it to be in in the order of tens of µs – see Figure 1.
So far, this is identical to the timing side channel ex-
ploited in [2]. However, DTLS does not have any error
messages, so we cannot use existing methods to observe
the difference in processing times. This may explain why
the implementors of DTLS in OpenSSL chose not to imple-
ment the required countermeasures. Instead, we introduce
an alternative means to detect the timing difference, by ex-
ploiting Heartbeat messages. The basic idea is quite simple.
Suppose we send to the target system a packet train consist-
ing of a DTLS packet PC carrying the ciphertext C (whose
padding validity we wish to test) immediately followed by
a Heartbeat request message. Then this train will result in a
detectable Heartbeat response message being sent back on
the network, and, assuming orderly processing on the tar-
get system, the total amount of time needed to process PC
and to produce the Heartbeat response message will reﬂect
whether or not MAC veriﬁcation was carried out when pro-
cessing C. From an adversary’s perspective, only send and
receive times of packets can be captured, so the adversary
will measure the time difference between sending the initial
packet train and receiving the Heartbeat response packet,
which we refer to as the round trip time (RTT). If this time
difference is larger than some threshold T , the adversary
will assume the padding was valid (and so the MAC veriﬁ-
cation was carried out), while if it is lower than this thresh-
old, the adversary will assume the padding was invalid. The
threshold can be set by doing some initial system proﬁling
to measure the typical timing difference between packets
carrying ciphertexts having valid and invalid padding. No-
tice also that DTLS Heartbeat packets are not essential to
building the oracle: any upper layer protocol having suit-
ably predictable and detectable response messages can be
used.
In reality,
the timing of packets is inﬂuenced by
many factors beyond just DTLS’s cryptographic process-
ing. Moreover, as we noted above, the timing difference
will be rather small for normal-sized packets. So the DTLS
padding oracle as presented would be much too error-prone.
To enhance the accuracy of the oracle, the adversary can:
• Choose a speciﬁc, favourable DTLS packet payload
length, l.
• Send n copies of packet PC in a train followed by a
Heartbeat request instead of just one copy of PC. Here,
the idea is that each copy of PC will be processed in
the same way, so the larger the accumulated time dif-
ference will become and the easier it will become to
distinguish between valid and invalid padding. This
exploits the fact that DTLS does not tear-down DTLS
connections in the event of errors (recall that when the
padding oracle is used in a plaintext recovery attack,
all the ciphertexts sent in the attack will be invalid in
some way – they will either have invalid padding or in-
valid MACs). It also assumes that all the packets in the
train can be made to arrive at the target system in such
a way that no adverse delays are introduced during the
processing of these packets.
• Send m packet trains (each containing n copies of PC),
and use an applicable statistical model to analyse the
observed RTTs.
Algorithm 2 describes our basic DTLS padding oracle
for a ciphertext C. In the algorithm, RT Tq denotes the re-
sponse time in the q-th trial, T denotes the threshold for de-
ciding on whether C has valid or invalid padding, and sim-
ple averaging is used to process the gathered RTTs. Other
statistical measures could be used in place of averaging
here, an idea that we discuss in more detail in the next sec-
tion. There we also explore the many practical issues that
arise in building this padding oracle, addressing issues such
as packet timing, system proﬁling, parameter selection to
tune the attack, and dealing with anti-replay.
Algorithm 2: Padding Oracle for OpenSSL implemen-
tation of DTLS
Data: C
Result: VALID or INVALID
for q = 1 to m do
RT Tq = Timer(C);
RT T =Mean(RT T1, RT T2, ..., RT Tm);
if RT T ≥ T then
return VALID;
else
return INVALID;
Timer(C)
Set Ts = current time;
Send n copies of PC, a DTLS packet containing C, to
the targeted system;
Send a Heartbeat request packet to the targeted system;
Set Te = time when Heartbeat response packet is seen;
return (Te − Ts)
4 Practical Considerations
In this section, we discuss a number of practical issues
that arise in implementing our attack. All of our remarks
are speciﬁc to the OpenSSL implementation of DTLS.
4.1 Timing and OpenSSL Cryptographic Opera-
tions
Our attack relies on detecting the time difference in-
troduced by MAC veriﬁcation that is performed for pack-
ets having valid padding but not for packets having invalid
padding. Failure to detect this time difference would result
in the padding oracle providing an incorrect answer. Fig-
ure 1 shows, for a variety of DTLS payload sizes, the time
taken by OpenSSL in our set-up to perform decryption with
3DES or AES-256 alongside the time taken for MAC veri-
ﬁcation using HMAC-SHA-1. The hardware speciﬁcations
of our set-up are listed in Section 5. We note the following
features evident from this ﬁgure:
• In general, decryption is slower than MAC veriﬁcation,
especially in the case of 3DES.
• The MAC processing time for a single packet is on the
order of a few tens of µs, which is well below that
reported in [2] and below the level of jitter expected in
a typical network.
• 3DES is much slower than AES-256:
for a packet
size of 1456 bytes, the factor is about 4. For reasons
that will be explained below, using a slower decryp-
tion algorithm increases the effectiveness of the attack.
Hence the attack parameters (l, m, n) may need to be
tuned depending on which block cipher is in use.
• With AES-256, the processing time rapidly drops from
about 50 µs to about 20 µs when the DTLS payload
size reaches 512 bytes. We do not know the reason
for this behaviour, but the adversary also needs to be
aware of it when selecting attack parameters.
Although we have targeted HMAC-SHA-1 in our attack,
the fundamentals of the attack still apply when other MAC
algorithms are in use. At the time of writing, OpenSSL
only supports HMAC-MD5 and HMAC-SHA-1. More de-
tail about how packets are processed and the source of the
timing difference is provided in Appendix A.
4.2 System Proﬁling
System proﬁling refers to the process by which the ad-
versary collects information about the targeted system prior
to carrying out an attack. This provides the adversary with
the expected values for the RTTs (for valid and invalid
padding) under some conditions such as system load, the
DTLS payload length, l, and the number of packets in the
train, n. This proﬁling in turn allows the threshold value T
for the attack to be set.
Given a captured ciphertext, it is easy to construct cipher-
texts having any desired length l and having either invalid
or valid padding, simply by manipulating the last 2 blocks
of the captured ciphertext and prepending random blocks
(or truncating it if a shorter ciphertext is needed). Given
such pairs of ciphertexts and a Heartbeat request message,
the adversary can then construct packet trains containing
the required number of packets n. These trains can then
be repeatedly sent to the target system and the RTTs mea-
sured, to obtain two empirical PDFs, one for trains with
validly padded packets and the other for trains with invalid
padding. From these PDFs, the threshold T can be set by,
for example, calculating the mean of each distribution and
setting T to be the mid-point between the means. In prac-
tice, we tend to obtain small numbers of extreme outliers
in such proﬁling experiments, and removing these before
calculating the means by using a simple cut-off generally
improves the performance of the attack. More sophisticated
statistical methods can of course be employed, but we have
found proﬁling followed by thresholding to be already ade-
quate for our attacks to be successful.
4.3 An Attack Without System Proﬁling
System proﬁling is not even strictly necessary – for a
given byte position i in the target block, an adversary can
simply measure the RTTs for a packet train (consisting of n
DTLS packets with the target ciphertext block being located
(a) 3DES and SHA-1
(b) AES-256 and SHA-1
Figure 1. Timing of cryptographic operations for DTLS payloads of sizes between 64 and 1456 bytes
at the end of each packet, followed by a Heartbeat request
packet), for each of the 256 possible byte values in position
i in the block preceding the target ciphertext block. Then
the adversary can select as the correct byte value (i.e. the
one giving valid padding) the one that maximises the RTT
across the 256 measured RTT values. Accuracy can be fur-
ther improved by repeating the trial for each byte m times,
removing outliers, and using the maximum of the average
RTTs. In fact, we have observed in our experiments that
repeating the trial for each byte value m times, removing
outliers, and then selecting the byte value that maximizes
the minimum of the m measured RTTs for each byte value
gives substantially higher success probabilities for the at-
tack. We will illustrate this in Section 5 where we discuss
our experimental results in more detail. This, then, is the