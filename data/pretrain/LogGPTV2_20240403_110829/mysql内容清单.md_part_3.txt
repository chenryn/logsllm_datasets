**Management\....(管理工具):**提供各种mysql 命令
**Connection
pool(连接池):**检查有无空闲线程、有无硬件支持线程、登录用户名和密码是否正确.三者满足,建立链接
**Sql interface (sql 接口):**接受执行命令
**Parser解析器(分析器):**分析命令格式是否正确.给错误的命令报错
**Optimizer(优化器):**当执行命令没有错误.调用优化器,进行命令优化,以最高效率处理命令
**Caches &
buffers(查询缓存):**提供存储空间,存储着曾经查找过的数据,从数据库服务器物理内存划分出来的存储空间给MY.提高查询速度:先检索查询缓存,然后在查询硬盘上的数据
**File system(文件系统):**存储数据,服务器磁盘硬件
**Pluggable storage
englnes(存储引擎):**当调用数据库文件系统中的数据,就会调用表使用的存储引擎处理数据.
## 存储引擎
**常用存储引擎的特点(只用innodb支持外键)**
**Mysiam:**支持表级锁以及独享表空间.不支持事务/不支持事务回滚,节省资源
对应有三个表文件
表名.frm:存的是表结构 desc 表名
表名.MYI:存的是索引 index(name)
表名.MYD:存的是表数据 select \* from 表名
**Innodb :**支持行级锁定,支持事务/事务回滚/外键
对应二个表文件
表名.frm:存表结构 desc 表名
表名.ibd:存既存索引,又存数据
**设置数据库服务默认使用的存储引擎**
修改/etc/my.cnf 主配置文件如下:
\[mysqld\]
default-storage-engine=存储引擎名 #新加
mysql\> show variables like \'%storage_engine%\';
#查看数据库默认使用的存储引擎
mysql\>show engines\\G; #查看本版本数据库软件支持的所有存储引擎信息,
mysql\> show create table t1; #查看已有表的存储引擎"ENGINE=MyISAM "
mysql\> create table t2(id int(4),name varchar(8))engine=innodb;
#建表时指定存储引擎
mysql\> alter table t2 engine=myisam; #修改已有表的存储引擎
**锁介绍(锁粒度):**
**为什么要加锁:**解决并发访问冲突问题,如多个客户端访问A表,有查询,插入,修改updete等操作,同时修改同一内容,造成写入冲突,第一个人访问之后,就将锁定内容.
**表级锁:**只要对表做访问,整张表被锁上
**行级锁:**只给访问的每一行记录分别加锁,
**页级锁:**对整个页面进行加锁,页面(MYSQL管理数据的基本存储单位)
**锁类型:** 读锁(共享锁):支持并发读
写锁(排他锁/互斥锁):独占锁,上锁期间,其他线程不能读表或写表
mysql\> show status like \'%table_lock%\'; #查看当前表锁状态信息
**事务介绍**
**事务:**对数据的一次访问,就是一次事务,只有innodb存储支持
**事务回滚介绍:**在事务执行过程中,任意一步执行失败,将回复之前所有操作,还原操作前
**如何回滚:**有事务日志文件.启动mysql服务,自动创建.记录对innodb存储引擎的表执行过
的操作,事务日志文件所在:/var/lib/mysql/ 目录下以下文件:
ib_logfile0 ib_logfile1 idbdata1
mysql\> show variables like \'%autocommit%\'; #查看自动提交开关状态
mysql\> set autocommit=off; #关闭自动提交
> #事务的持久性开启了自动提交:命令输入插入/修改等命令,一回车,就将数据修改永久生效
mysql\> set autocommit=off; #终端1关闭自动提交
mysql\> delete from t6; #终端1删除t6表
mysql\> select \* from t6; #终端1查看t6表,已无数据,终端1未提交
\[root@sql51 \~\]# mysql -uroot -p123456 #终端2登录mysql
mysql\> use db3 #终端2进入db3库
mysql\> select \* from t6; #终端2查看t6表还能看到数据
mysql\> rollback; #终端1提交前进行回滚
mysql\> select \* from t6; #终端1又能看到之前的数据
mysql\> insert into t6 values(666); #终端1修改
mysql\> select \* from t6; #终端1查看能看到新增数据
mysql\> select \* from t6; #终端2上查看还是看不到,终端1未提交
mysql\> commit ; #终端1提交修改
mysql\> select \* from t6; #终端2查看就能看到新增的数据了
**实际环境中如何决定一个表使用哪种存储引擎**
**查询表记录**:查询(select)操作多的表适合选用**myisam**存储引擎,节省系统资源
myisam**表级锁:**只要对表做访问,整张表被锁上
读锁(共享锁):支持并发读
**插入表记录**:写入(insert update
delete)操作多的表适合选用**innodb**存储引擎,并发访问量大
innodb**行级锁**:只给访问的每一行记录分别加锁,
写锁(排他锁/互斥锁):独占锁,上锁期间,其他线程不能读表或写表
## 数据导入导出:
**数据导入**
在MySQL 5.7.6版本之后，导入文件只能在secure_file_priv指定的文件夹下。
执行show variables like \'%secure%\'命令显示默认检索文件目录：
mysql\> show variables like \'%secure%\';
\[root@sql51 \~\]# vim /etc/my.cnf
\[mysqld\]
secure_file_priv=\"/mydatadir\"
#可修改默认检索目录,必须给新的目录设置数主为mysql用户
\[root@sql51 \~\]# mkdir /mydatadir
\[root@sql51 \~\]# chown mysql /mydatadir #赋予权限
#导入之前必须先建立对应的表结构.(如下)
mysql\> create table user(
-\> name char(35),
-\> password char(1),
-\> uid int,
-\> gid int,
-\> comment char(150),
-\> homedir char(100),
-\> shell varchar(100),
-\> index(name) );
mysql\> load data infile \"/mydatadir/passwd\" into table user fields
terminated by \":\" lines terminated by \"\\n\";
#导入passwd文件数据,以":"号为分隔符,指定换行符为"\\n",
mysql\> alter table user add id int primary key auto_increment first;
#插入id
**数据导出**
**导出作用:把表记录导出到文件**
命令格式:sql查询 into outfile "目录名/文件名"
Fields terminated by "分隔符" #分隔符,可单独指定
lines terminated by "\\n" #换行符,可单独指定
**注意事项:导出的内容由sql查询语句决定**
导出的文件路径必须是 secure_file_priv(默认搜索路径) 指定的目录里面
导出的是表中的记录,不包括字段名
导出的/目录/文件名 必须唯一,不能有重复
禁用SElinux
mysql\> select \* from user into outfile \"/mydatadir/a1.txt\";
#数据全部导出,
mysql\> select \* from user where id \ select name,uid,shell from user where id \ select name,uid,shell from user where id \ create table db4.userbak select \* from db3.user;
**1.2:将指定查询结果复制为新表zzz**
mysql\> create table user3 select name,uid,shell from db3.user order by
uid desc limit 5;
mysql\> select \* from user3;
**1.3:复制源表xxx的结构到新表vvv**
例如:将db3库的user表结构,复制到db4库的user1表,主键/索引等无法复制过来
mysql\> create table user1 select \* from db3.user where 1=2;
mysql\> select \* from user1;
Empty set (0.00 sec)
**1.4:复制部分字段到新表**
mysql\> create table user4 select name,uid,shell from db3.user where
1=2;
**1.5:将源表vvv 的名称改为www**
Alter table vvv rename to www;
## 用户授权与权限撤销
**授权命令格式**
grant 权限列表 on 数据库名 to 用户名@"客户端地址" identified by "密码"
grant 权限列表 on 数据库名.表名 to 用户名@"客户端地址" identified by
"密码"
grant 权限列表 on 数据库名 to 用户名@"客户端地址" identified by
"密码"With grant option;
> #给这个用户授权,这个用户也有授权权限
**权限列表**
all : #赋予所有权限 Select,update,insert #赋予权限操作(查询/修改/插入)
Select,update (字段1,\...,字段N) #赋予部分字段的查询与修改
**客户端地址**
%:匹配所有主机 192.168.1.% :匹配指定的一个网段
192.168.1.1:匹配指定IP地址的单个主机 %.tarena.com:匹配一个DNS区域
svr1.tarena.con:匹配指定域名的单个主机(需要DNS服务器解析)
**授权示例**
新建用户mydba,对所有库所有表(语句表示\*.\*)有完全权限
允许从任何地址访问,密码设为"123456" 允许该用户为其他用户授权
mysql\> grant all on \*.\* to mydba@\"%\" identified by \"123456\" with
grant option;
Query OK, 0 rows affected, 1 warning (0.00 sec)
**查看授权**
mysql\> select \* from mysql.user where user=\"mydba\" \\G;
#查看指定数据库系统用户访问的权限
mysql\> select host,user from mysql.user; #查看数据库系统用户访问的权限
mysql\> show grants for mydba@\"%\"; #查看mydba用户权限详情
mysql\> select user(); #查看登录的本机IP
mysql\> select @@hostname; #查看已连接的数据库服务器的主机名
mysql\> show grants; #查看当前登录本机的用户权限
mysql\> grant select,insert on db3.user to admin@\"localhost\"
identified by \"123456\";
#创建admin用户,授予只对db3.user
,有select与insert权限,只限于在数据库服务器本机上登录.登录密码是"123456"
**撤销权限命令格式**
revoke 权限列表 on 数据库名 from 用户名@"客户端地址";
mysql\> revoke grant option on \*.\* from mydba@\"%\"; #撤销授权权限
mysql\> revoke delete,update on \*.\* from mydba@\"%\";
#撤销删除与修改权限
mysql\> revoke select on db7.\* from yaya;
#删除yaya用户,在db7库里面对所有库的查询权限
mysql\> revoke all on \*.\* from mydba@\"%\"; #撤销所有权限
**删除授权用户**
Drop user 用户名@"客户端地址";
mysql\> drop user mydba@\"%\"; #删除mydba用户
mysql\> select host,user from mysql.user; #查看系统库的用户表
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
\| host \| user \|
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
\| localhost \| admin \|
\| localhost \| mysql.sys \|
\| localhost \| root \|
+\-\-\-\-\-\-\-\-\-\--+\-\-\-\-\-\-\-\-\-\--+
3 rows in set (0.00 sec)
mysql\> drop user admin@\"localhost\";
#注意:此处删除admin时.后面要填"localhost"
**授权库(mysql库)** ：记录授权信息的表