have committed in the development repository the following
changes that will appear in version 1.59:
conﬁdentiality and integrity;
• in BCFKS, the iteration count is raised to 51,200 for both
• in BCPKCS12, the iteration count is increased to 51,200
and 102,400 for conﬁdentiality and integrity, respectively.
Table II outlines the improved security guarantess offered by
keystore implemenations following the ﬁxes released by Oracle
and Bouncy Castle. Additionally, in Figure 4 we show the
updated results of the brute-force resistance benchmarks to
reﬂect the improved KDF parameters. JCEKS and BCFKS now
offer the best resistance to ofﬂine brute-force attacks of the
conﬁdentiality password. However, JCEKS still provides the
weakest integrity mechanism. Thus, if the same password is
used both for key encryption and for keystore integrity, then the
increased protection level can easily be voided by attacking the
latter mechanism. On the other hand, both the conﬁdentiality
and the integrity mechanisms have been updated in PKCS12.
This keystore, which is now the default in Java 9, offers a much
higher security level with respect to the previous release.
VIII. CONCLUSION
to evaluate the security level offered by each keystore. Thus,
developers cannot make a reasoned and informed choice
among the available alternatives.
In this paper we have thoroughly analyzed seven keystore
implementations from the Oracle JDK and the Bouncy Castle
library. We have described all the cryptographic mechanisms
used to guarantee standard security properties on keystores,
including ofﬂine attacks. We have pointed out that several
implementations adopt non-standard mechanisms and we have
shown how this can drastically speed-up the brute-forcing of
the keystore passwords. Additionally, we reported new and
unpublished attacks and deﬁned a precise threat model under
which they may occur. These attacks range from breaking the
conﬁdentiality of stored keys to arbitrary code execution on
remote systems and denial of service. We also showed how
a keystore can be potentially weaponized by an attacker to
spread malware.
We have reported the security ﬂaws to Oracle and Bouncy
Castle. Most of the issues in the Oracle JDK have been ﬁxed
in the October 2017 Critical Patch Update [44] following CVE
IDs [37], [38]. Similarly, Bouncy Castle developers committed
changes to address several problems discussed in this paper.
Following our analysis and succeeding ﬁxes, it appears
evident that the security offered by JKS, the default keystore in
Java 8 and previous releases, is totally inadequate. Its improved
version JCEKS still uses a broken integrity mechanism. For
these reasons, we favorably welcome the decision of Oracle
to switch to PKCS12 as the default keystore type in the
recent Java 9 release. After the previously discussed updates
this keystore results quite solid, although certiﬁcate protection
is bogus and key encryption relies on legacy cryptographic
primitives.
Keystores are the standard way to store and manage cryp-
tographic keys and certiﬁcates in Java applications. In the liter-
ature there is no in-depth analysis of keystore implementations
and the documentation does not provide enough information
Alternatives provided by Bouncy Castle have been found to
be less susceptible to attacks. Among the analyzed keystores,
the updated BCFKS version clearly sets the standard from
a security standpoint. Indeed, this keystore relies on mod-
13
(a) Speed comparison of password recovery attack for key encryption
(conﬁdentiality).
(b) Speed comparison of password recovery attack for keystore in-
tegrity, considering different keystore sizes.
Fig. 4: Revised password cracking benchmarks after library updates.
ern algorithms, uses adequate cryptographic parameters and
provides protection against introspection of keystore contents.
Moreover, the development version of Bouncy Castle includes
preliminary support for scrypt [45], [46] in BCFKS, a memory-
hard function that requires signiﬁcant amount of RAM. Con-
sidering the steady nature of keystore ﬁles, we argue that in
addition to approved standard functions, it would be advisable
to consider future-proof cryptographic primitives so to be more
resistant against parallelized attacks [18], [20].
ACKNOWLEDGMENTS
The authors would like to thank Stefano Calzavara and
the anonymous reviewers for their valuable comments and
suggestions to improve the quality of the paper.
This work has been partially supported by CINI Cyber-
security National Laboratory within the project FilieraSicura:
Securing the Supply Chain of Domestic Critical Infrastructures
from Cyber Attacks (www.ﬁlierasicura.it) funded by CISCO
Systems Inc. and Leonardo SpA.
REFERENCES
[1]
[2]
[3]
[4]
[5]
[6]
[7]
“Android Studio User Guide: Sign Your App.” [Online]. Available:
https://developer.android.com/studio/publish/app-signing.html
“WebLogic Integration 7.0: Conﬁguring the Keystore.” [Online].
http://docs.oracle.com/cd/E13214 01/wli/docs70/b2bsecur/
Available:
keystore.htm
“Vulnerability Note VU#576313,” 2015. [Online]. Available: https:
//www.kb.cert.org/vuls/id/576313
“Java Cryptography Architecture (JCA) Reference Guide,” 2016.
[Online]. Available:
https://docs.oracle.com/javase/8/docs/technotes/
guides/security/crypto/CryptoSpec.html
“JDK 7
able:
enhancements-7.html
“Apache Tomcat
SSL/TLS Conﬁguration,”
2017. [Online]. Available: https://tomcat.apache.org/tomcat-7.0-doc/ssl-
howto.html
“JDK 9 Early Access Release Notes,” 2017. [Online]. Available:
http://jdk.java.net/9/release-notes
[Online]. Avail-
https://docs.oracle.com/javase/8/docs/technotes/guides/security/
7 Documentation:
2016.
Security
Enhancements,”
[8]
[9]
“Spring Crypto Utils Documentation: Keystore,” 2017.
Available: http://springcryptoutils.com/keystore.html
“Update
and Deprecation of TDEA,” 2017.
[Online]. Available: https://beta.csrc.nist.gov/News/2017/Update-to-
Current-Use-and-Deprecation-of-TDEA
to Current Use
[Online].
[10] M. Abadi and B. Warinschi, “Password-Based Encryption Analyzed,”
in Proceedings of the 32nd International Colloquium on Automata,
Languages and Programming, ICALP 2005, 2005, pp. 664–676.
[11] Apple inc., “iOS Security Guide,” Tech. Rep., 03 2017. [Online]. Avail-
able: https://www.apple.com/business/docs/iOS Security Guide.pdf
[12] R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato, G. Steel, and
J. Tsay, “Efﬁcient Padding Oracle Attacks on Cryptographic Hardware,”
in Proceedings of the 32nd Annual Cryptology Conference on Advances
in Cryptology, CRYPTO 2012, 2012, pp. 608–625.
[13] E. Barker, “Guideline for Using Cryptographic Standards in the Fed-
eral Government: Cryptographic Mechanisms,” http://nvlpubs.nist.gov/
nistpubs/SpecialPublications/NIST.SP.800-175B.pdf, August 2016.
[14] E. Barker and A. Roginsky, “Transitions: Recommendation for Tran-
sitioning the Use of Cryptographic Algorithms and Key Lengths
(Rev. 1),” http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.
800-131Ar1.pdf, November 2015.
[15] M. Bellare, T. Ristenpart, and S. Tessaro, “Multi-instance Security and
Its Application to Password-Based Cryptography,” in Proceedings of
the 32nd Annual Cryptology Conference on Advances in Cryptology,
CRYPTO 2012, 2012, pp. 312–329.
[16] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P. Strub, and J. K. Zinzindohoue, “A Messy
State of the Union: Taming the Composite State Machines of TLS,”
in Proceedings of the 36th IEEE Symposium on Security and Privacy,
S&P 2015, 2015, pp. 535–552.
[17] K. Bhargavan and G. Leurent, “On the Practical (In-)Security of 64-bit
Block Ciphers: Collision Attacks on HTTP over TLS and OpenVPN,”
in Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security, CCS 2016, 2016, pp. 456–467. [Online].
Available: http://doi.acm.org/10.1145/2976749.2978423
[18] A. Biryukov, D. Dinu, and D. Khovratovich, “Argon2: New Generation
of Memory-Hard Functions for Password Hashing and Other Applica-
tions,” in Proceedings of the 1st IEEE European Symposium on Security
and Privacy, EuroS&P 2016, 2016.
[19] D. Bleichenbacher, “Chosen Ciphertext Attacks Against Protocols
Based on the RSA Encryption Standard PKCS #1,” in Proceedings of
the 18th Annual International Cryptology Conference on Advances in
Cryptology, CRYPTO ’98, 1998, pp. 1–12.
14
[20] D. Boneh, H. Corrigan-Gibbs, and S. Schechter, “Balloon Hashing: A
Memory-Hard Function Providing Provable Protection Against Sequen-
tial Attacks,” in Proceedings of the 22nd Annual International Confer-
ence on the Theory and Applications of Cryptology and Information
Security, ASIACRYPT 2016, 2016.
[21] W. E. Burr, D. F. Dodson, E. M. Newton, R. A. Perlner, W. T. Polk,
S. Gupta, E. A. Nabbus, U. D. of Commerce, N. I. of Standards, and
Technology, Electronic Authentication Guideline: Recommendations of
the National Institute of Standards and Technology - Special Publication
800-63-1, 2012.
[22] R. Clayton and M. Bond, “Experience Using a Low-Cost FPGA Design
to Crack DES Keys,” in Proceedings of the 4th International Workshop
on Cryptographic Hardware and Embedded Systems, CHES 2002, 2002,
pp. 579–592.
J. Clulow, “On the Security of PKCS#11,” in Proceedings of the 5th
International Workshop on Cryptographic Hardware and Embedded
Systems, CHES 2003, 2003, pp. 411–425.
[23]
[24] T. Cooijmans, J. de Ruiter, and E. Poll, “Analysis of Secure Key Storage
Solutions on Android,” in Proceedings of the 4th ACM Workshop on
Security and Privacy in Smartphones & Mobile Devices, SPSM 2014,
2014, pp. 11–20.
[25] Cryptosense S.A., “Mighty Aphrodite Dark Secrets of the Java
Keystore,” 2016. [Online]. Available: https://cryptosense.com/mighty-
aphrodite-dark-secrets-of-the-java-keystore/
[26] Y. Dodis, T. Ristenpart, and T. Shrimpton, “Salvaging Merkle-Damg˚ard
for Practical Applications,” in Proceedings of the 28th Annual Interna-
tional Conference on the Theory and Applications of Cryptographic
Techniques, EUROCRYPT 2009, 2009, pp. 371–388.
[27] P. Gasti and K. B. Rasmussen, “On the Security of Password Manager
Database Formats,” in Proceedings of the 17th European Symposium on
Research in Computer Security, ESORICS 2012, 2012, pp. 770–787.
[28] P. A. Grassi, J. L. Fenton, E. M. Newton, R. A. Perlner, A. R.
Regenscheid, W. E. Burr, J. P. Richer, N. B. Lefkovitz, J. M. Danker,
Y. Choong, K. K. Greene, and M. F. Theofanos, “Digital Identity
Guidelines: Authentication and Lifecycle Management,” https://pages.
nist.gov/800-63-3/sp800-63b.html#sec5, 2017.
[29] P. Gutmann, “Lessons Learned in Implementing and Deploying Crypto
Software,” in Proceedings of the 11th USENIX Security Symposium,
2002, pp. 315–325. [Online]. Available: http://dl.acm.org/citation.cfm?
id=647253.720291
J. P. Kaps and C. Paar, “Fast DES Implementations for FPGAs and Its
Application to a Universal Key-Search Machine,” in Proceedings of the
5th Annual International Workshop in Selected Areas in Cryptography,
SAC’98, 1999, pp. 234–247.
[30]
[31] P. G. Kelley, S. Komanduri, M. L. Mazurek, R. Shay, T. Vidas, L. Bauer,
N. Christin, L. F. Cranor, and J. Lopez, “Guess Again (and Again
and Again): Measuring Password Strength by Simulating Password-
Cracking Algorithms,” in Proceedings of the 33rd IEEE Symposium on
Security and Privacy, S&P 2012, 2012, pp. 523–537.
J. Kelsey, B. Schneier, C. Hall, and D. Wagner, “Secure Applications of
Low-Entropy Keys,” in Proceedings of the 1st International Workshop
on Information Security, ISW ’97, 1997, pp. 121–134.
[32]
[33] Z. Li, W. He, D. Akhawe, and D. Song, “The Emperor’s New Password
Manager: Security Analysis of Web-based Password Managers,” in
Proceedings of the 23rd USENIX Security Symposium, 2014, pp. 465–
479.
I. Magaki, M. Khazraee, L. V. Gutierrez, and M. B. Taylor, “ASIC
Clouds: Specializing the Datacenter,” in Proceedings of the 43rd Inter-
national Symposium on Computer Architecture, ISCA 2016, 2016, pp.
178–190.
[34]
[35] MITRE, “CVE-2012-4929: CRIME attack,” http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2012-4929, September 2012.
[36] MITRE, “CVE-2014-0160: Heartbleed bug,” http://cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2014-0160, December 2013.
[37] MITRE, “CVE-2017-10345,” http://cve.mitre.org/cgi-bin/cvename.cgi?
name=CVE-2017-10345, October 2017.
[38] MITRE, “CVE-2017-10356,” http://cve.mitre.org/cgi-bin/cvename.cgi?
name=CVE-2017-10356, October 2017.
[39] K. Moriarty, B. Kaliski, J. Jonsson, and A. Rusch, “PKCS#1: RSA
Cryptography Speciﬁcations (Version 2.2),” https://www.ietf.org/rfc/
rfc8017.txt, November 2016.
[40] K. Moriarty, B. Kaliski, and A. Rusch, “PKCS#5: Password-Based
Cryptography Speciﬁcation (Version 2.1),” https://www.ietf.org/rfc/
rfc8018.txt, January 2017.
[41] P. Oechslin, “Making a Faster Cryptanalytic Time-Memory Trade-Off,”
in Proceedings of the 23rd Annual International Cryptology Conference
on Advances in Cryptology, CRYPTO 2003, 2003, pp. 617–630.
[42] Oracle Corporation, “Java Cryptography Architecture, Standard Algo-
rithm Name Documentation for JDK 8,” http://docs.oracle.com/javase/
8/docs/technotes/guides/security/StandardNames.html#KeyStore, 2014.
[43] Oracle Corporation, Private communication, October 2017.
[44] Oracle Corporation, “Critical Patch Updates, Security Alerts and Third
Party Bulletin,” October 2017. [Online]. Available: http://www.oracle.
com/technetwork/security-advisory/cpuoct2017-3236626.html
[45] C. Percival, “Stronger Key Derivation via Sequential Memory-Hard
Functions,” May 2009.
[46] C. Percival and S. Josefsson, “The scrypt Password-Based Key Deriva-
tion Function,” https://tools.ietf.org/html/rfc7914, August 2016.
[47] RSA Laboratories, “PKCS#12: Personal Information Exchange Syntax
Standard (Version 1.0),” June 1999.
[48] RSA Laboratories, “PKCS#11 v2.30: Cryptographic Token Interface
Standard ,” April 2009.
[49] RSA Laboratories, “PKCS#12: Personal Information Exchange Syntax
Standard (Version 1.1),” October 2012.
[50] M. Sabt and J. Traor´e, “Breaking into the KeyStore: A Practical Forgery
Attack Against Android KeyStore,” in Proceedings of the 21st European
Symposium on Research in Computer Security (ESORICS 2016), Part
II, 2016, pp. 531–548.
[51] B. Schneier, Applied Cryptography (2nd Ed.): Protocols, Algorithms,
and Source Code in C.
John Wiley & Sons, Inc., 1995.
[52] M. S. Turan, E. Barker, W. Burr, and L. Chen, “Recommenda-
tion for Password-Based Key Derivation. Part 1: Storage Appli-
cations,” http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-
132.pdf, December 2010.
[53] A. Vassilev, “Annex A: Approved Security Functions for FIPS PUB
140-2, Security Requirements for Cryptographic Modules,” http://csrc.
nist.gov/publications/ﬁps/ﬁps140-2/ﬁps1402annexa.pdf, April 2016.
[54] S. Vaudenay, “Security Flaws Induced by CBC Padding - Applications
to SSL, IPSEC, WTLS ...” in Proceedings of the 21st International Con-
ference on the Theory and Applications of Cryptographic Techniques
Advances in Cryptology, EUROCRYPT 2002, 2002, pp. 534–546.
[55] M. Weir, S. Aggarwal, M. Collins, and H. Stern, “Testing Metrics
for Password Creation Policies by Attacking Large Sets of Revealed
Passwords,” in Proceedings of the 17th ACM Conference on Computer
and Communications Security, CCS 2010, 2010, pp. 162–175.
[56] F. F. Yao and Y. L. Yin, “Design and Analysis of Password-Based
Key Derivation Functions,” IEEE Transactions on Information Theory,
vol. 51, no. 9, pp. 3292–3297, 2005.
[57] Y. Zhang, F. Monrose, and M. K. Reiter, “The Security of Modern
Password Expiration: An Algorithmic Framework and Empirical Anal-
ysis,” in Proceedings of the 17th ACM Conference on Computer and
Communications Security, CCS 2010, 2010.
15