leakage of WFP-PAD. DynaFlow [29] morphs packets into fixed
bursts, pads the total number of bursts, and dynamically changes
packet inter-arrival times. In contrast to CS-BuFLO and Tamaraw,
DynaFlow tunes the amount of overhead introduced and, thus, pro-
vides a better trade-off between security and efficiency. FRONT and
GLUE have been recently suggested [18]. While FRONT creates
random noise at the beginning of a page load, GLUE adds dummy
packets between consecutive page loads to obscure separation of
different page loads. However, the accuracy of today‚Äôs WFP attacks
remains comparably high, even if both defenses are applied.
Based on traffic morphing, Glove [32] creates clusters of similar
web pages and inserts only a small amount of cover traffic to make
the pages within a cluster indistinguishable. Supersequence [47]
is a similar defense that clusters traces of different sites to cre-
ate a group of anonymity sets and extracts the shortest common
supersequence. Walkie Talkie [50] forces the browser to communi-
cate in a half-duplex mode. Thus, packets in one direction can be
buffered and sent in bursts, together with dummy traffic. This, in
turn, makes it easier and more efficient to create supersequences
based on burst sequences. However, the main limitation of these
methods remains their dependence on a priori knowledge about
each site. It is especially challenging for sites with dynamic content.
Recently, Henri et al. [20] have proposed splitting traffic ex-
changed between the user and its entry OR over two different,
unrelated network connections (e.g., DSL, Wi-Fi, or cellular net-
works) to protect against a malicious ISP. However, this design
decision fails to defend against a malicious entry OR ‚Äî a weaker
attacker (than an ISP) that is cheaper and easier for deployment.
Even if this defense notably reduces the accuracy of state-of-the-art
WFP attacks on a single network connection, a malicious entry OR
could still observe the user‚Äôs identity and the complete data flow
and, thus, perform WFP. In contrast, our defenses distribute the
user traffic over multiple entry ORs and limit the data a single OR
can observe. Also, the authors of [20] do not analyze the influence
of the number of used network connections on the accuracy of
WFP attacks ‚Äî one of the main contributions in our work.
Application-layer Defenses. Panchenko et al. [35] suggest a browser
plug-in that adds noise by loading another random page in par-
allel. However, this is not sufficient to defend against WFP if the
bandwidth overhead is to be kept reasonable [47]. The Tor project
Each sub-circuit constitutes one path of our multipath transmission
scheme. The user‚Äôs OP first establishes an initial three-hop sub-
circuit through one of the entry ORs by reusing the existing Tor
circuit creation concept [11] (step 1). Next, it creates ùëö ‚àí 1 two-hop
sub-circuits starting at one of the entry ORs, that has not been
selected yet, and ending at the same middle OR used in the initial
three-hop circuit (step 2). Once these sub-circuits are built, a joining
process informs the middle OR about the relationship between the
ùëö ‚àí 1 two-hop sub-circuits and the initial three-hop sub-circuit.
To this end, we employ a cookie-based authentication mechanism
whose operation is controlled and verified by the user (step 3).
The operation of our cookie mechanism is inspired by the ren-
dezvous cookie applied in Tor onion services to establish a connec-
tion between the user and an onion service [41]. Similarly to the
rendezvous cookie, the cookie in our defense consists of a 20-byte
cryptographic nonce chosen randomly by the user. To authenticate
the relationship between the individual sub-circuits, the user first
sends the generated cookie along the initially-created three-hop
sub-circuit to the middle OR. To do this, we introduce two new Tor
cells, SET_COOKIE and COOKIE_SET. While SET_COOKIE is utilized
by the user to initially send the newly-created cookie to the middle
OR, COOKIE_SET is transmitted by the middle OR to acknowledge
the (successful) receipt of the cookie. Then, the user joins the re-
maining two-hop sub-circuits by transmitting the same cookie in
another newly-introduced Tor cell, JOIN, through these sub-circuits
to the middle OR (step 4). Upon a successful match of the received
cookie with a stored cookie of an already-existing three-hop sub-
circuit, the middle OR acknowledges the joining process with a new
Tor cell, JOINED. This completes the connection establishment.
Splitting and Merging Traffic. We use a bidirectional circuit-
level cell splitting to achieve multipath user connections (step 6).
To execute the actual splitting, the user‚Äôs OP (or the middle OR,
depending on the direction) sends each cell containing user traffic
through an individually determined sub-circuit. Then, the respec-
tive merging point receives the cells on the separate sub-circuits
and reassembles them to a complete data flow for further forward-
ing or processing. Importantly, Tor can process cells only if they are
delivered in order. However, cells sent over different sub-circuits
might be delayed or received quicker due to network fluctuations.
Therefore, cell reordering at the merging point is necessary. As Tor
cells do not contain any sequencing information [11], we introduce
a new control cell INFO, in which the user periodically announces
the order of transmitted cells and their sub-circuit assignment to
the middle OR (step 5). If the delivery of a cell is delayed, the respec-
tive merging point buffers all subsequent cells until the missing
cell arrives. Then, all obtained cells are processed in order. Besides
enabling correct cell ordering, we also introduce the concept of
splitting instructions. Based on the chosen splitting scheme (see
Section 6), the user regularly sends Tor INSTRUCTION cells to the
middle OR to instruct it how to split backward-directed user traffic
to the sub-circuits. Thus, traffic splitting at the middle OR is under
the control of the user, who accepts backward-directed traffic only
in the expected order. To ensure correct decryption (or encryption,
depending on the direction) of cells at the exit OR, the user‚Äôs OP
reuses the cryptographic key negotiated with the exit OR (three-
hop sub-circuit setup, step 1) for all two-hop sub-circuits. Thus,
TrafficSliver-Net still encrypts all cells in three onion layers.
Figure 1: Design overview of our network-layer defense.
proposed to randomize the pipeline size (i.e., the number of re-
quests processed in parallel) and the order of requests for embedded
website content [38]. HTTP Obfuscation (HTTPOS) [30] modifies
packet sizes, web object sizes, and timing by manipulating HTTP
requests and basic TCP features. HTTPOS can also modify and
reorder HTTP headers and insert dummy HTTP requests, but still
sends them over one TCP connection in contrast to our defenses.
Neither randomized pipelining nor HTTPOS are as effective as
assumed against WFP [8, 47]. Even worse, randomized pipelining
might lead to improved classification accuracy in some scenarios.
Cherubin et al. [9] propose client- and server-side defenses, LLaMA
and ALPaCA. LLaMA reorders outgoing HTTP requests by ran-
domly delaying them and adds dummy HTTP requests. ALPaCA
applies morphing by padding the web objects of a page and insert-
ing invisible dummy web objects. Through they achieve similar
protection, they are applicable for Tor onion services only.
To sum up, none of the former WFP defenses is as effective as
assumed, which highlights the need for a new efficient defense.
4 TRAFFICSLIVER AT NETWORK LAYER
The core idea of our network-layer defense, TrafficSliver-Net, is
to distribute TCP traffic across multiple circuits built over several
unique entries but shared middle and exit ORs [37]. We implement
the concept of multipathing entirely within Tor. Thus, we achieve
transparency to user applications and independence from third par-
ties, e.g., web servers. Our main goal is to defend against a malicious
entry OR performing WFP. Therefore, the tasks of splitting and
merging are performed around (before and after) the entry OR in a
circuit. In particular, we deploy our defense on the user‚Äôs OP and
the middle OR, which, in turn, implement mechanisms to distribute
and reassemble user traffic from multiple entry ORs. We prefer to
merge and split traffic at middle ORs as exit ORs have the lowest
amount of bandwidth and quantity in Tor [21]. In contrast to the
resource-scarce and outnumbered exit ORs, Tor contains an exces-
sive number of middle ORs (i.e., each OR can act as a middle node
by default), and their position in the circuit is not sensitive (i.e.,
neither the origin nor the destination are visible by the middle OR).
By introducing new types of Tor cells, our defense ensures that the
construction of several circuits (consisting of distinct entry ORs
and common middle and exit ORs) and the splitting of traffic sent
back to the user are fully controlled by the user‚Äôs OP.
Multipath Tunnel Creation. Figure 1 illustrates the opera-
tion of our defense. To transmit data over a number ùëö of unique
entry ORs, the user‚Äôs OP creates multiple individual circuits, sub-
circuits, along each of these entry ORs to a common middle OR.
Tor UserWeb ServerEntry OR(2) Two-hop sub-circuit(4) JoinEntry OREntry OR(6) Split & Merge(5) InstructionExit ORMiddle ORTor  NetworkDeployment of TrafficSliver-Net (4) JoinThree-Hop CircuitTwo-Hop CircuitCell-Order Control(6) Split & Merge(1) Three-hop sub-circuit(3) Set cookieImplementation. We implemented TrafficSliver-Net in Tor ver-
sion 0.4.1.6. Our modifications primarily focus on the handling of
circuits and Tor cells. Moreover, we introduced a new split module
that maintains the sub-circuits and provides functionality for the
generation and management of authentication cookies, splitting
instructions, and splitting strategies.
5 TRAFFICSLIVER AT APPLICATION LAYER
Our application-layer defense, TrafficSliver-App, works completely
independently of the underlying anonymization network. Contrary
to TrafficSliver-Net, here, we do not require any modifications in
Tor and, thus, ensure ease of deployment in practice. TrafficSliver-
App acts as a local proxy between the user‚Äôs browser and the user‚Äôs
OP. It first creates a number ùëö of separate Tor circuits, each of
which contains a unique entry OR. To do this, we launch multiple
user‚Äôs OP instances, each maintaining a single three-hop circuit.
While these circuits are established using the existing Tor circuit
creation concept [11], we ensure that none of them employs the
same entry OR. Our proxy also uses multiple persistent connections
via each of the circuits to request different objects in parallel (similar
to ordinary browsers). It then accepts HTTP requests coming from
the user‚Äôs browser, modifies them as needed, and sends them over
one or more of the built circuits. In particular, our proxy supports
two modes of operation: (ùëñ) it sends separate full HTTP requests for
distinct web objects belonging to the same website over different
entry ORs, or (ùëñùëñ) it requests different fractions of a single web
object via different circuits. In Section 8.2, we show that sending
full HTTP requests over different entry ORs is already sufficient
to protect against today‚Äôs WFP attacks. However, we argue that
the support of the second mode of operation by TrafficSliver-App
might become an important strategy to enhance our defense in
view of attacker advancements. Therefore, we describe the second
mode of operation of our defense in more detail.
When browsing the Web, the user typically sends a sequence of
HTTP GET requests to fetch all web objects needed to display a
site. The HTTP/1.1 protocol provides an additional feature for GET
requests, the range option, which enables downloading a portion of
a web object (originally used, e.g., for resuming fetching of large
objects [14]). TrafficSliver-App exploits this range option to split
each outgoing GET request into several partial requests asking for
different fractions of a single web object. The splitting of every
request is based on a preselected splitting strategy (see Section 6).
Then, the proxy transmits each newly generated partial request to
the web server over one of the circuits already built by the user‚Äôs
OP. An important requirement to be fulfilled here is to ensure that
multiple fractions of partial requests belonging to a single full GET
request do not traverse the same circuit and, thus, reveal repeatable
traffic patterns. The web server, in turn, processes each partial
request separately and sends the corresponding fraction of a web
object back to our proxy. Finally, the proxy merges all obtained
portions of each resource and returns that resource in a single
HTTP response to the user‚Äôs browser.
Splitting and Merging HTTP Traffic. Figure 2 illustrates the
distribution of partial requests over multiple Tor paths, performed
by TrafficSliver-App. Every time the user‚Äôs browser sends a GET
request, our defense first determines whether this request can be
Figure 2: Distributing partial requests by TrafficSliver-App.
split into multiple partial requests. By default, an HTTP GET re-
quest contains neither the size of the requested web object nor
information as to whether the range option is supported for it.
Therefore, for each resource requested by the user, our proxy sends
an initial partial GET request asking for a small fraction of that
resource (step 1). The main goal is to determine whether the range
option is supported for that resource and to identify the size of the
resource. While a small content length given in the partial request
increases the number of resources that can be split (as, with a high
probability, only a part of an object is requested), it also increases
the number of packets transmitted via Tor and, thus, the bandwidth
overhead created by the defense. Based on empirical analysis, we
established a content length of an initial partial request for each
resource of 50 bytes as a reasonable trade-off between privacy and
performance. If the web server does not support the range option,
it directly returns the complete resource. In this case, no further
request is needed to be sent to fetch that resource. If the size of the
resource is not present in the header of the server response, i.e., it
remains unknown, only a single additional request is sent by our
defense to fetch the rest of the resource. Moreover, if the size of the
resource is smaller than the fraction requested in the initial request,
then the server sends the complete resource back and no further
request is required to be sent either. Please note that the inability
to split a web object will not endanger the user‚Äôs privacy as the
distribution of full HTTP requests and responses over distinct entry
ORs is already sufficient to protect against the today‚Äôs WFP attacks,
as shown in Section 8.2. Otherwise, our defense can create multiple
partial requests based on a preselected splitting strategy to fetch
the remaining portions of that resource (see Appendix B).
Implementation. TrafficSliver-App is developed as an HTTP(S)
proxy, written in the Node.js JavaScript framework [16]. We have
one instance of our defense that performs the splitting on non-
encrypted HTTP traffic. In the case of encrypted web traffic, our
proxy performs a man-in-the-middle attack to arbitrarily observe
and modify the HTTP traffic. It intercepts TLS handshakes initiated
by the user and performs them on behalf of the web browser (using
its certification authority list or pinning). After splitting the original
HTTP GET request, it again encrypts the traffic intended to the web
server using TLS. Our proxy can be easily integrated into the Tor
Browser and, thus, avoid any deployment overhead for the users.
6 OUR TRAFFIC SPLITTING STRATEGIES
Regardless of whether we implement multipathing at the network
or application layer, the main challenge for our TrafficSliver de-
fenses is to provide an efficient traffic-splitting strategy against
Tor UserWeb ServerEntry OR(1)Entry OREntry ORExit ORMiddle ORTor  NetworkDeployment of TrafficSliver-AppExit ORMiddle ORMiddle ORExit ORGET /hello.htm HTTP/1.1Host: www.example.comRange: bytes=0-49HTTP/1.1 206 Partial ContentContent-Range: bytes 0-49/200Content-Length: 50(2)GET /hello.htm HTTP/1.1Host: www.example.comRange: bytes=50-124(3)GET /hello.htm HTTP/1.1Host: www.example.comRange: bytes=125-200(4)WFP attacks. In other words, the target splitting scheme should
produce highly diverse traffic distributions among different loads of
the same page and, thus, hinders an adversarial entry OR in identi-
fying (repeatable) patterns. To find such a strategy, we analyze the
influence of (ùëñ) the number of distinct entry ORs used to establish
multiple paths through Tor, and (ùëñùëñ) the percentage and diversity of
traffic observed at each of the entry ORs.
Number of Entry ORs Used for Traffic Distribution. To use
our TrafficSliver defenses, we first need to define the number ùëö of
distinct entry ORs utilized by the Tor user for a multipath commu-
nication. While a large number of entry ORs decreases the amount
of information available to each entry OR, it also increases the
likelihood of selecting a malicious entry OR for a circuit belonging
to a single multipath user connection [10]. Thus, we explore how ùëö
influences the user‚Äôs protection against WFP attacks and propose a
trade-off between privacy protection and performance overhead.
Distribution of Traffic over Multiple Circuits. Once the num-
ber of entry ORs is selected, we need to define how to distribute
the web traffic via them. Here, we have to consider the individual
properties of our defenses due to the level of their implementation.
These properties, in turn, do not enable the deployment of every
splitting scheme in both defenses. While TrafficSliver-App relies on
knowledge about the size of each web object but can neither directly
manage the transmission of separate Tor cells nor directly influence
the selection of a circuit for incoming traffic, TrafficSliver-Net is
not aware of the web objects exchanged through it but can handle
every cell sent or received by the user. Thus, splitting schemes that
particularly aim to distribute separate Tor cells cannot be applied
at the application layer and, vice versa, splitting schemes operating
on GET requests cannot be used at the network layer.
Distribution of Traffic at Network Layer. Here, our most basic
splitting strategy is round robin. When applied in TrafficSliver-Net,
we switch to the next circuit for each Tor cell. Our goal is to analyze
the level of security provided by such a simple splitting scheme
and assess whether only the multipathing or the use of a sophisti-
cated splitting strategy is more important to build an efficient WFP
defense. We also analyze random splitting, in which we randomly
select a circuit for each Tor cell. We compare these strategies to
traffic splitting by direction, i.e., we use one circuit for incoming and
another circuit for outgoing Tor cells. To increase the diversity of
the traffic distribution for repeated page loads of a common website,
we also evaluate a weighted random (WR) scheme. In WR, for each
page load, we create a separate vector (cid:174)ùë§ consisting of ùëö probabili-
ties for each splitting point, which, in turn, are computed from a
ùëö-dimensional Dirichlet distribution. We use these probabilities
to weight the selection of an entry OR for each cell transmitted
between the user‚Äôs OP and the middle OR. The Dirichlet distribu-
tion is a common way to model random probability mass functions
for finite sets. As required by our strategies, it outputs directly ùëö
random positive values that add up to one. Finally, we consider a
batched weighted random (BWR) splitting strategy. Contrary to WR,
here, the vector (cid:174)ùë§ is utilized to weight the choice of an entry OR
for a batch of ùëõ Tor cells. As we do not insert any dummy traffic
and constant-size batches, traveling across distinct circuits may still
reveal useful traffic patterns for WFP. Thus, we update ùëõ constantly
during a single page load, i.e., after each batch. While a small ùëõ
converges BWR to the WR strategy, a large ùëõ may not produce a
sufficient level of traffic randomness, e.g., for small websites, as
the splitting of traffic will be limited or even may not occur at all.