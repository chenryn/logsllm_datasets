=== 多值字段处理
多值字段是指由简单类型数据组成的数组内容。由复杂类型嵌套组成的数组，则可以使用jpath指令先提取成多值字段再处理。
针对多值字段，日志易提供mvexpand和mvcombine指令，而在eval中还可以使用mvcount()、mvfilter()、mvindex()、mvsort()、mvjoin()、mvmap()、mvszip()等函数进行过滤、评估操作。
==== 多值字段操作指令
* 使用mvexpand生成多条事件
可以使用mvexpand指令，将一个含有多值字段的事件，遍历展开变成多条事件。比如如下日志：
[source,javascript]
{"a":["x1","y1","z1"],"b":"text"}
可以用如下命令展开：
[source,bash]
* | mvexpand a
得到结果日志为：
[source]
{"a":"x1","b":"text"}
{"a":"y1","b":"text"}
{"a":"z1","b":"text"}
[NOTE]
====
如果对非多值字段的复杂结构数组做mvexpand操作，也可以成功，但是展开后的Object并不能像普通事件字段一样操作。这类需求请使用jpath配合mvszip等函数完成。
====
* 使用mvcombine创建多值字段
和mvexpand相对的指令，是mvcombine。它可以将很类似的一些日志，合并成一个含有多值字段的事件。
[NOTE]
====
除了指定用来合并的字段以外，其他字段的内容必须完全一致。
====
我们将上一段展开的事件再合并回去：
[source,bash]
* | mvcombine a
==== 多值字段评估函数
* 使用split创建多值字段
和字段提取功能中的字段值切分规则类似，可以在SPL语句中，使用split函数创建多值字段：
[source,bash]
* | eval tmp="1,2,3,4" | eval tmp = split(tmp, ",")
最终得到一个多值字段：
[source,javascript]
{"tmp":["1","2","3","4"]}
* 统计多值字段长度
可以用mvcount函数，来统计一个多值字段中，到底有几个值：
[source,bash]
* | eval tmp="1,2,3,4" | eval tmp = split(tmp, ",") | eval len = mvcount(tmp)
结果为4。
* 遍历转换多值字段
我们注意到上面举例的多值字段中，所有的值都还是字符串，我们可以转换为数值：
[source,bash]
* | eval tmp="1,2,3,4" | eval tmp = split(tmp, ",") | eval tmp = mvmap(tmp, tolong(_x))
[NOTE]
====
_x是mvmap等多值字段操作函数中的特殊局部变量，用来指代迭代中的原值内容。
====
* 过滤多值字段中的部分值
可以用mvfilter来过滤部分数据，比如计算上面举例的多值字段中，大于2的值的个数：
[source,bash]
* | eval tmp="1,2,3,4" | eval tmp = split(tmp, ",") | eval tmp = mvfilter(tmp, tolong(_x)>2) | eval len = mvcount(tmp)
结果为2。
* 合并多值字段为普通字符串
可以对多值字段进行排序去重处理后，重新拼接回普通字符串。
比如DNS服务器的query.log中通常记录有多个域名解析A记录地址，不同时刻的解析结果会是乱序和随机出现的。我们可以通过多值字段函数简化这种复杂度：
[source,bash]
appname:bind9_query | eval iplist = split(ips, ",") | eval iplist = mvsort(iplist) | eval iplist = mvdedup(iplist) | eval ips = mvjoin(iplist, ",") | stats count() by ips
* 并行遍历两个多值字段
之前说到，可以利用jpath指令和多值字段函数，配合实现对嵌套结构的过滤统计。比如如下一段数据，记录了某手机应用，重试连接多个服务器的过程：
[source,javascript]
{"remote_addr":[{"geo":{"city":"beijing"},"status":200},{"geo":{"city":"tianjin"},"status":200},{"geo":{"city":"beijing"},"status":403}],"method":"POST"}
我们要统计连接北京的异常次数。可以使用如下指令：
[source,bash]
method:POST | jpath path="remote_addr[*].status" output=status | jpath path="remote_addr[*].geo.city" output=city | eval tmp = mvszip(city, status) | mvexpand tmp | parse field=tmp "(?\d+),(?\d+)" | where c=="beijing" && tolong(s)>399 | stats count() by s
结果如下：
image::images/search-example-mvszip.png[]
* 利用多值函数处理百分比数据的展示
日志易SPL提供了百分比统计功能，结果如下所示：
image::images/search-example-pct.png[]
但是这个表格看起来虽然清晰，终归不如图形的一目了然。而这种单行的表格，是无法直接绘制成柱状图的——因为没有展示字段和分组字段可选。
我们可以利用多值函数，来转换这行数据：
[source,bash]
logtype:apache | stats pct(apache.resp_len, 50, 95, 99) as p | eval xxx=mvappend(p.50, p.95, p.99) | eval yyy=mvappend("50%", "95%", "99%") | eval zzz=mvszip(xxx,yyy)| mvexpand zzz | parse field=zzz "(?\d+\.\d+),(?\S+)" | eval value=todouble(value) | fields key, value
我们利用mvappend函数，将多个单值结果，合并成一个多值字段；然后再利用mvexpand将合并的结果拆分成多行。就能得到我们平常最常见的表格了：
image::images/search-example-mvappend.png[]
这时候只要在选择一下X轴和Y轴字段，就能得到百分比统计的柱状图：
image::images/search-example-mvappend-pct.png[]
== 高级分析
之前章节中，我们讲解了一些常用的统计分析方法，本章中，我们将提出一些在IT运维工作中，比较有效的特殊分析方式。适当的使用这些高级分析方法，可以有效提高运维工作水平，大大减轻IT人员的工作量。
=== movingavg和rollingstd实现3σ告警
在统计学中，一般认为当数据量足够大的时候，数据分布总是趋近于正态分布的。所以正态分布常用于大数据时的异常值发现。正态分布示意如下图所示：
image::images/normal-dist.png[]
如上图所示，当我们计算得到数据集的平均值μ和标准差σ以后，1σ范围内的数据占整个数据集的百分比为68.27%。此外，另外几个已知且常用的点位是：1.96σ为95.00%，2.58σ为99.00%，3σ为99.74%。
可以说，当一个数据在3σ范围之外的概率极低，如果真的出现，是值得重点关注的异常数据。
基于这个假设固然可以找到一些异常点，但在数据量真的够大的时候，0.26%的数据也已经变成会常态性存在的部分。而且当一次故障恢复的过程中，如果静态计算3σ，报警也会持续进行。日志易对这种情况，采用滑动窗口技术，基于近期历史，对数据进行平滑处理。您可以采用movingavg和rollingstd指令，来获取平滑时间序列的3σ区间，SPL语句写作：
[source,bash]
logtype:apache | bucket timestamp span = 10m as ts | stats count() as _count by ts
  | movingavg _count,10 as ma | rollingstd _count,10 as rs
  | eval lower = ma - 3 * rs | eval upper = ma + 3 * rs
  | eval outlier = if( _count > upper || _count  upper, _max, _min < lower, _min, default, NULL)
IQR和3σ分析一样，您都可以根据实际数据分布情况，灵活调整区间大小系数。