条件三、以get字符串开头，且第四个字符需要是大写字母
条件四、方法不能有参数传入
条件五、继承自Collection || Map || AtomicBoolean || AtomicInteger || AtomicLong
条件六、此getter不能有setter方法（程序会先将目标类中所有的setter加入fieldList列表，因此可以通过读取fieldList列表来判断此类中的getter方法有没有setter）
#### 问题三解答
JSON.parseObject(jsonstr)为什么返回值为JSONObject类对象，且将FastJsonTest类中的所有getter与setter都被调用了
通过上文的分析可以发现，JSON.parse(jsonstr)与JSON.parseObject(jsonstr,FastJsonTest.class)两种方式从执行流程几乎一样，结果也完全相同；然而使用JSON.parseObject(jsonstr)这种方式，执行的结果与返回值却与前两者不同：JSON.parseObject(jsonstr)返回值为JSONObject类对象，且将FastJsonTest类中的所有getter与setter都被调用。
通过阅读源码可以发现`JSON.parseObject(String text)`实现如下
parseObject(String text)其实就是执行了parse(),随后将返回的Java对象通过JSON.toJSON（）转为
JSONObject对象。
JSON.toJSON（）方法会将目标类中所有getter方法记录下来，见下图
随后通过反射依次调用目标类中所有的getter方法
完整的调用链如下
总结：
上文例子中，`JSON.parse(jsonstr)`与`JSON.parseObject(jsonstr,
FastJsonTest.class)`可以认为是完全一样的，而parseObject(String
text)是在二者的基础上又执行了一次JSON.toJSON（）
parse(String text)、parseObject(String text)与parseObject(String text, Class\
clazz)目标类Setter\Getter调用情况
| parse(String text) | parseObject(String text) | parseObject(String text,
Class\ clazz)  
---|---|---|---  
Setter调用情况 | 全部 | 全部 | 全部  
Getter调用情况 | 部分 | 部分 | 全部  
此外，如果目标类中私有变量没有setter方法，但是在反序列化时仍想给这个变量赋值，则需要使用`Feature.SupportNonPublicField`参数。（在下文中，为TemplatesImpl类中无setter方法的私有变量`_tfactory`以及`_name`赋值运用到的就是这个知识点）
### TemplatesImpl攻击调用链路
针对于上文的分析可以发现，无论使用哪种方式处理JSON字符串，都会有机会调用目标类中符合要求的Getter方法
如果一个类中的Getter方法满足调用条件并且存在可利用点，那么这个攻击链就产生了。
TemplatesImpl类恰好满足这个要求：
`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`中存在一个名为`_outputPropertiesget`的私有变量，其getter方法中存在利用点，这个getter方法恰好满足了调用条件，在JSON字符串被解析时可以调用其在调用FastJson.parseObject()序列化为Java对象时会被调用，下面我们详细说明一下：
首先我们从漏洞点开始，一层层往入口分析：首先看一下TemplatesImpl类中的getTransletInstance方法
其中455行调用`_class[_transletIndex]`的newInstance( )方法来实例化对象的操作
我们看一下`_class[_transletIndex]`是如何获取的，是否可以控制
`_class`与`_transletIndex`值皆由451行处defineTransletClasses()方法中获取
我们跟入defineTransletClasses()方法中一探究竟
在defineTransletClasses()方法中，首先在393行判断`_bytecodes`值是否为空
值得注意的是，`_bytecodes`变量是TemplatesImpl类的成员变量
因此`_bytecodes`变量可以在构造json字符串时传入，在构造poc时属于可控变量
`_bytecodes`变量非空值时，程序将会继续执行至下图红框处
此时，需要满足`_tfactory`变量不为null，否则导致程序异常退出。这就是为什么公开的poc中需要设置设置`_tfactory`为{}的原因。因为`_tfactory`为私有变量，且无setter方法，这里需要指定`Feature.SupportNonPublicField`参数来为_tfactory赋值
接下来，程序将会把`_bytecodes`变量中的值循环取出并通过loader.defineClass处理后赋值给`_class[i]`
我们首先来看下loader.defineClass方法是什么
可见，loader.defineClass方法其实就是对ClassLoader.
defineClass的重写。defineClass方法可以从传入的字节码转化为Class
回头分析下上述流程
`_bytecodes`变量非空值时，程序将会把`_bytecodes`数组中的值循环取出，使用loader.defineClass方法从字节码转化为Class对象，随后后赋值给_class[i]。
如果此时的class为main class，`_transletIndex`变量值则会是此时`_bytecodes`数组中的下标值
因此当我们构造出`_bytecodes:[evilCode]`这样的json字符串（evilCode字符串为我们构造的恶意类的字节码）后，程序会将evilCode化为Class对象后赋值给_class[0]
现在回到getTransletInstance()方法中
此时的`_class[_transletIndex]`即为我们构造传入的evilCode类
程序通过调用evilCode类的newInstance()方法来实例化对象的操作，这将导致我们构造的evilCode类中的恶意代码被执行
但在此之前，需要在poc构造json字符串时使得成员变量`_name`不为空，否则程序还未执行到将evilCode类实例化就提前return
注意：由于私有变量`_name`没有setter方法，在反序列化时想给这个变量赋值则需要使用Feature.SupportNonPublicField参数。
在分析完存在漏洞的getTransletInstance方法，我们需要找到一条调用链，这条调用链需要在使用fastjson处理json字符串时成功串连到存在漏洞的getTransletInstance方法上。
我们继续向上跟踪代码
`com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.javanewTransformer()`方法中调用了getTransletInstance()
继续向上跟踪
`com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.javagetOutputProperties()`方法中调用了newTransformer()
getOutputProperties()方法为`_outputProperties`成员变量的getter方法
细心的读者可能会发现，成员变量`_outputProperties`与其getter方法getOutputProperties()方法名字并不完全一致，多了一个下划线，fastjson是如何将其对应的呢？
实际上，fastjson在解析的时候调用了一个smartMatch() 方法
在寻找`_outputProperties`的getter方法时，程序将下划线置空，从而产生了成员变量`_outputProperties`与getter方法getOutputProperties()对应的形式
### FastJson与TemplatesImpl的有趣结合
首先说TemplatesImpl类。经过上文分析可发现：TemplatesImpl中存在一个反序列化利用链，在反序列化过程中，如果该类的getOutputProperties()方法被调用，即可成功触发代码执行漏洞。
再来分析下FastJson：经过上文对FastJson三种不同途径处理JSON字符串时关于getter方法被调用的条件来看，TemplatesImpl类`_outputProperties`成员变量的getter方法满足被调用条件。无论通过fastjson哪种方式解析json字符串，都会触发getOutputProperties()方法。
二者放在一起一拍即合：FastJson在反序列化TemplatesImpl类时会恰好触发TemplatesImpl类的getOutputProperties()方法；TemplatesImpl类的getOutputProperties()方法被触发就会引起反序列化代码执行漏洞。所以说这个漏洞利用很是巧妙。
### 总结
针对Fastjson
1.2.24反序列化漏洞的利用方式有很多，本文由于篇幅有限仅对比较巧妙的TemplatesImpl攻击调用链路进行举例。后续将会对Fastjson历史漏洞进行详细的分析，希望大家喜欢。
* * *