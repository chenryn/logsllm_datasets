title:T/Key: Second-Factor Authentication From Secure Hash Chains
author:Dmitry Kogan and
Nathan Manohar and
Dan Boneh
T/Key: Second-Factor Authentication From Secure Hash Chains
Dmitry Kogan∗
Stanford University
PI:EMAIL
Nathan Manohar∗
Stanford University
PI:EMAIL
7
1
0
2
g
u
A
8
2
]
R
C
.
s
c
[
1
v
4
2
4
8
0
.
8
0
7
1
:
v
i
X
r
a
ABSTRACT
Time-based one-time password (TOTP) systems in use today re-
quire storing secrets on both the client and the server. As a result, an
attack on the server can expose all second factors for all users in the
system. We present T/Key, a time-based one-time password system
that requires no secrets on the server. Our work modernizes the
classic S/Key system and addresses the challenges in making such
a system secure and practical. At the heart of our construction is a
new lower bound analyzing the hardness of inverting hash chains
composed of independent random functions, which formalizes the
security of this widely used primitive. Additionally, we develop
a near-optimal algorithm for quickly generating the required ele-
ments in a hash chain with little memory on the client. We report on
our implementation of T/Key as an Android application. T/Key can
be used as a replacement for current TOTP systems, and it remains
secure in the event of a server-side compromise. The cost, as with
S/Key, is that one-time passwords are longer than the standard six
characters used in TOTP.
1 INTRODUCTION
Static passwords are notorious for their security weaknesses [11,
46, 64–66], driving commercial adoption of two-factor authenti-
cation schemes, such as Duo [55], Google authenticator [24], and
many others. Several hardware tokens provide challenge-response
authentication using a protocol standardized by the FIDO industry
alliance [59].
Nevertheless, for desktop and laptop authentication, there is
a strong desire to use the phone as a second factor instead of a
dedicated hardware token [41, 55, 56, 67]. Several systems support
phone-based challenge-response authentication (e.g., [55]), but they
all provide a fall back mode to a one-time password scheme. The
reason is that challenge-response requires two-way communication
with the phone: uploading the challenge to the phone and sending
the response from the phone to the server. However, one cannot
rely on the user’s phone to always be connected. When the user
is traveling, she may not have connectivity under the local cell
provider, but may still wish to use her laptop to log in at a hotel
or to log in using a workstation at an Internet Cafe. In this case,
authentication systems, such as Duo, fall back to a standard timed-
based one-time password (TOTP) scheme.
Standard TOTP schemes [48] operate using a shared key k stored
on both the phone and the authentication server. The phone dis-
plays a six digit code to the user, derived from evaluating hmac(k, t),
∗Both authors contributed equally to the paper
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
2017. This is the author’s version of the work. It is posted here for your personal use.
Not for redistribution. The definitive Version of Record was published in Proceedings
of CCS ’17, October 30-November 3, 2017, https://doi.org/10.1145/3133956.3133989.
1
Dan Boneh
Stanford University
PI:EMAIL
· · ·
h2
h1
Head
Head
hk
Tail
Sent to the server
at setup
to authenticate
Used to
at t =1
to authenticate
Used to
at t =k−1
Figure 1: Sketch of T/Key
where t is the current time, rounded to the current 30 second mul-
tiple. This way, the code changes every 30 seconds and can only
be used once, hence the name one-time password. The user enters
the code on her laptop, which sends it to the server, and the server
verifies the code using the same key k. The server accepts a window
of valid codes to account for clock-skew.
The benefit of TOTP schemes is that they only require one-way
communication from the phone to the laptop, so they can function
even if the phone is offline (challenge-response requires two-way
communication with the phone and is mostly used when the phone
is online). However, a difficulty with current TOTP is that the server
must store the user’s secret key k in the clear. Otherwise, the server
cannot validate the 6-digit code from the user. With this design, a
break-in at the server can expose the second factor secret for all
users in the system. A well-publicized event of this type is the attack
on RSA SecurID, which led to subsequent attacks on companies
that rely on SecurID [61].
Our work. We introduce a TOTP system called T/Key that re-
quires no secrets on the server. Our starting point is a classic one-
time password system called S/Key [27], which is not time-based
and suffers from a number of security weaknesses, discussed in
the next section. Our work modernizes S/Key, makes it time-based
(hence the name T/Key), and addresses the resulting security chal-
lenges.
In T/Key, the phone generates a hash chain seed and uses this
seed to construct a long hash chain, say of length two million, as
depicted in Figure 1. The phone encodes the tail of the chain T
in a QR code, which the user scans with her laptop and sends to
the authentication server for storage. The phone then starts at the
element immediately preceding T in the chain and walks one step
backwards along the chain once every 30 seconds. It does so until
it reaches the head of the chain, which is the seed. At every step,
the phone displays the current element in the chain, and the user
logs in by scanning the displayed code on her laptop. At the rate of
one step every 30 seconds, a single chain is good for approximately
two years, at which point the phone generates a new chain. The
details of the scheme are presented in Section 3. As in TOTP, there
is only one-way communication from the phone to the laptop, and
the phone can be offline. Moreover, a server compromise reveals
nothing of value to the attacker.
Such a TOTP scheme presents a number of challenges. First,
security is unclear. Imagine an attacker breaks into the server and
Table 1: A comparison of OTP schemes.
No server secrets Time-varying passwords
Password length in bits
(at 2128 security)
S/Key
TOTP (HMAC)
Digital Signatures (ECDSA/EdDSA)
T/Key
✓
✗
✓
✓
✗
✓
✓
✓
N/A
20
512
130
Note: S/Key does not support this level of security.
steals the top of the chain T . The attacker knows the exact time
when the millionth inverse of T will be used as the second factor.
That time is about a year from when the break-in occurs, which
means that the attacker can take a year to compute the millionth
inverse of T . This raises the following challenge: for a given k, how
difficult is it to compute the k-th inverse of T ?
If the same function is used throughout the entire hash chain, as
in S/Key, the scheme is vulnerable to “birthday attacks" [31] and
is easier to break than the original hash function [28]. A standard
solution is to use a different hash function at every step in the chain.
The question then is the following: if H is the composition of k
random hash functions, namely
H(x) := hk(hk−1(· · · (h2(h1(x))) · · · )),
how difficult is it to invert H given H(x) for a random x in the
domain? We prove a time lower bound for this problem in the
random oracle model. Additionally, given the possibility of making
time-space tradeoffs in attacks against cryptographic primitives [17,
29, 49], a natural follow up question is whether the scheme is still
secure against offline attackers. Building on the recent results of
Dodis, Guo and Katz [18], we prove a time-space lower bound for
this problem that bounds the time to invert H, given a bounded
amount of preprocessing space. As hash chains are a widely used
primitive, we believe that our lower bounds, both with and without
preprocessing, may be of independent interest.
From this security analysis, we derive concrete parameters for
T/Key. For 2128 security, every one-time password must be 130
bits. Since entering these one-time passwords manually would
be cumbersome, our phone implementation displays a QR code
containing the one-time password, which the user scans using her
laptop camera. We describe our implementation in Section 6 and
explain that T/Key can be used as a drop-in replacement for Google
Authenticator. The benefit is that T/Key remains secure in the event
of a server-side compromise.
We also note that USB-based one-time password tokens, such
as Yubikey [69], can be set up to emulate a USB keyboard. When
the user presses the device button, the token “types” the one-time
password into a browser field on the laptop. This one-way commu-
nication setup is well suited for T/Key: the token computes a T/Key
one-time password and enters it into a web page by emulating a
keyboard. Again, this TOTP system remains secure in the event of
a server-side compromise.
The second challenge we face is performance. Because the hash
chain is so long, it is unreasonable for the phone to recompute the
entire hash chain on every login attempt, since doing so would take
2
several seconds for every login. Several amortized algorithms have
been developed for quickly walking backwards on a hash chain,
while using little memory on the phone [13, 33]. The problem is
that these schemes are designed to walk backwards a single step
at a time. In our case, the authenticator app might not be used
for a month or, perhaps, even longer. Once the user activates the
app, the app must quickly calculate the point in the hash chain
corresponding to the current time. It would take too long to walk
backwards from the last login point, one step at a time, to reach the
required point.
Instead, we develop a new approach for pebbling a hash chain
that enables a quick calculation of the required hash chain elements.
We model the user’s login attempts as a Poisson process with pa-
rameter λ and work out a near-optimal method to quickly compute
the required points with little memory on the phone.
Other approaches. T/Key is not the only way to provide a TOTP
with no secrets on the server. An alternate approach is to use a
digital signature. The phone maintains the signing key, while the
server maintains the signature verification key. On every authenti-
cation attempt, the phone computes the signature on the current
time, rounded to a multiple of 30 seconds. This can be scanned into
the laptop and sent to the server to be verified using the verification
key.
While this signature-based scheme has similar security proper-
ties to T/Key, it has a significant limitation. Standard digital sig-
natures such as ECDSA [34] and EdDSA [5, 35] are 512 bits long
for 2128 security1. These are about four times as long as the tokens
used in T/Key. For example, when encoded as QR codes, the longer
tokens result in a denser QR code. To preserve the maximal scan-
ning distance, the denser QR code must be displayed in a larger
image [51]. (Alternatively, the signatures could be decomposed into
several QR codes of the original size, but scanning multiple images
introduces additional complexity for the user.) Short authentica-
tion tokens might also be desirable in other applications such as
Bluetooth Low Energy (which supports a 23-byte long MTU [58]).
Table 1 provides a comparison of the different TOTP mechanisms
and their properties. The last column shows the required length of
the one-time password.
Beyond authentication. Hash chains come up in a number of
other cryptographic settings, such as Winternitz one-time signa-
tures [12] and the Merkle-Damgard construction [44]. Existing
1BLS signatures [8] are shorter, but require a pairing operation on the server which
makes them less attractive in these settings.
security proofs for Winternitz signatures often only take into ac-
count the attacker’s online work. Our lower bound on inverting
hash chains is well suited for these settings and can be used to de-
rive time-space tradeoff proofs of security for these constructions.
This is especially relevant as these schemes are being standard-
ized [32, 36, 43].
2 OFFLINE 2ND FACTOR AUTHENTICATION
We begin by briefly reviewing several approaches to one-time pass-
words that are most relevant to our scheme.
S/Key. The idea of a one-time password authentication scheme
was first considered by Lamport [38]. Loosely speaking, in such
a scheme, following an initial setup phase, authentication is per-
formed by the client presenting the server with a password that is
hard for an attacker to guess, even given all previous communica-
tion between the server and the client. In particular, no password
is valid for more than one authentication. In his work, Lamport
proposed a concrete instantiation of this idea using hash chains,
and this idea has been subsequently developed and implemented
under the name S/Key [27]. The setup phase of S/Key consists of the
client choosing a secret passphrase2 x and sending the computed
value y0 = h(k)(x) (where h is some cryptographic hash function,
k is some integer, and h(k) denotes k successive iterations of h)
to the server, which the server then stores. Subsequently, to au-
thenticate for the ith time, the client must present the server with
yi = h(k−i)(x), which the server can verify by computing h(yi)
and comparing it to the stored value yi−1. If the authentication is
successful, the server updates its stored value to yi.
S/Key has a number of undesirable properties. First, one-time
passwords remain valid for an indefinite period of time unless used,
making them vulnerable to theft and abuse. This vulnerability is
magnified if the counter value for each authentication attempt is
communicated to the client by the server, as is the case in both
the original S/Key [27] and in the newer OPIE [42] (presumably to
allow for stateless clients). In this common setting, the scheme is
vulnerable to a so-called “small n" attack [45], where an attacker
impersonating the server can cause the client to reveal a future
one-time password. Second, the fact that S/Key utilizes the same
hash function at every iteration in the chain makes it easier to break
S/Key than to break a single hash function (see Theorem 4.1). This
also implies that any modification to the scheme that requires using
much longer hash chains (such as, for example, a naïve introduction
of time-based passwords) could lead to insecurity.
HOTP. In an HMAC-based one-time password scheme (HOTP) [47],
a secret and a counter, both shared between the server and the client,
are used in conjunction with a pseudorandom function (HMAC)
to generate one-time passwords. The setup phase consists of the
server and the client agreeing on a random shared secret k and
initializing a counter value c to 0. One-time passwords are then
generated as HMAC(k, c). The counter is incremented by the client
every time a password is generated and by the server after every
successful authentication.
2Usually, the client’s secret passphrase is concatenated with a random salt to prevent
dictionary attacks and reduce the risk of reusing the same passphrase on multiple
servers.
3
The most significant advantage of this scheme is that the num-
ber of authentications is unbounded. Moreover, it allows using
short one-time passwords without compromising security. How-
ever, HOTP still suffers from many of the weaknesses of S/Key,
namely that unused passwords remain valid for an indefinite pe-
riod of time. A bigger concern is that the secret key k must be stored
on the server, as discussed in the previous section.
TOTP. Time-based one-time password schemes (TOTP) [48] were
introduced to limit the validity period of one-time passwords. In
TOTP, the shared counter value used by HOTP is replaced by a
timestamp-based counter. Specifically, the setup phase consists of
the server and the client agreeing on the ‘initial time’ t0 (usually
the UNIX epoch) and a time slot size I (usually 30 seconds), as well