title:Be Selfish and Avoid Dilemmas: Fork After Withholding (FAW) Attacks
on Bitcoin
author:Yujin Kwon and
Dohyun Kim and
Yunmok Son and
Eugene Y. Vasserman and
Yongdae Kim
Be Selfish and Avoid Dilemmas:
Fork A(cid:129)er Withholding (FAW) A(cid:130)acks on Bitcoin
Yujin Kwon
Yunmok Son
Dohyun Kim
KAIST
PI:EMAIL
KAIST
PI:EMAIL
KAIST
PI:EMAIL
7
1
0
2
g
u
A
1
3
]
R
C
.
s
c
[
1
v
0
9
7
9
0
.
8
0
7
1
:
v
i
X
r
a
Eugene Vasserman
Kansas State University
PI:EMAIL
ABSTRACT
In the Bitcoin system, participants are rewarded for solving cryp-
tographic puzzles. In order to receive more consistent rewards
over time, some participants organize mining pools and split the
rewards from the pool in proportion to each participant’s contribu-
tion. However, several a(cid:138)acks threaten the ability to participate in
pools. (cid:140)e block withholding (BWH) a(cid:138)ack makes the pool reward
system unfair by le(cid:138)ing malicious participants receive unearned
wages while only pretending to contribute work. When two pools
launch BWH a(cid:138)acks against each other, they encounter the miner’s
dilemma: in a Nash equilibrium, the revenue of both pools is di-
minished. In another a(cid:138)ack called sel(cid:128)sh mining, an a(cid:138)acker can
unfairly earn extra rewards by deliberately generating forks.
In this paper, we propose a novel a(cid:138)ack called a fork a(cid:135)er with-
holding (FAW) a(cid:138)ack. FAW is not just another a(cid:138)ack. (cid:140)e reward
for an FAW a(cid:138)acker is always equal to or greater than that for a BWH
a(cid:136)acker, and it is usable up to four times more o(cid:137)en per pool than
in BWH a(cid:138)ack. When considering multiple pools — the current
state of the Bitcoin network – the extra reward for an FAW a(cid:138)ack
is about 56% more than that for a BWH a(cid:138)ack. Furthermore, when
two pools execute FAW a(cid:138)acks on each other, the miner’s dilemma
may not hold: under certain circumstances, the larger pool can
consistently win. More importantly, an FAW a(cid:138)ack, while using
intentional forks, does not su(cid:130)er from practicality issues, unlike
sel(cid:128)sh mining. We also discuss partial countermeasures against
the FAW a(cid:138)ack, but (cid:128)nding a cheap and e(cid:129)cient countermeasure
remains an open problem. As a result, we expect to see FAW a(cid:138)acks
among mining pools.
CCS CONCEPTS
•Security and privacy → Distributed systems security; Eco-
nomics of security and privacy;
KEYWORDS
Bitcoin; Mining; Sel(cid:128)sh Mining; Block Withholding A(cid:138)ack
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for pro(cid:128)t or commercial advantage and that copies bear this notice and the full citation
on the (cid:128)rst page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permi(cid:138)ed. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior speci(cid:128)c permission and/or a
fee. Request permissions from permissions@acm.org.
CCS’17, Oct. 30–Nov. 3, 2017, Dallas, TX, USA.
© 2017 ACM. ISBN 978-1-4503-4946-8/17/10...$15.00
DOI: h(cid:138)p://dx.doi.org/10.1145/3133956.3134019
Yongdae Kim
KAIST
PI:EMAIL
1 INTRODUCTION
Bitcoin is the (cid:128)rst fully decentralized cryptocurrency [29]. Its value
has increased signi(cid:128)cantly as has its rate of adoption since its
deployment in 2009 [7]. (cid:140)e security properties of Bitcoin rely
on blockchain technology [32], which is an open ledger containing
all current and historical transactions in the system. To prevent
alterations of previous transactions and maintain the integrity of the
ledger, the system requires participants to use their computational
power to generate proofs of work (PoWs) by solving cryptographic
puzzles. A PoW is required to generate a block and add transactions
to the blockchain. A(cid:137)er someone generates a block by solving the
puzzle, and this solution is propagated to the Bitcoin network, a
new round starts and all nodes begin solving a new cryptographic
puzzle. (cid:140)e process of block generation is called mining, and those
carrying out this activity are called miners.
As of May 2017, a miner who solves a puzzle is rewarded with
12.5 bitcoins (BTC). (cid:140)e average time for each round (time to solve
the puzzle) is intended to be constant (10 minutes), so mining
di(cid:129)culty is adjusted automatically about every two weeks. As
mining di(cid:129)culty increases, solo miners may have to wait for a
long time, on average, to receive any reward. To prevent this
reward “starvation,” some miners have organized mining pools that
engage in pro(cid:128)t sharing. Most pools consist of a pool manager and
worker miners. (cid:140)e manager runs the Bitcoin protocol, acting as
a single node, but miners join a pool by connecting to the pool’s
protocol [37] instead of directly joining Bitcoin. A pool manager
forwards unsolved work units to miners, who then generate partial
proofs of work (PPoWs) and full proofs of work (FPoWs), and submit
them to the manager as shares. If a miner generates an FPoW and
submits it to the manager, the manager broadcasts a block generated
from the FPoW to the Bitcoin system, receives the reward, and
distributes the reward to participating miners. Each miner is paid
based on the fraction of shares contributed relative to the other
miners in the pool. (cid:140)us, participants are rewarded based on PPoWs,
which have absolutely no value in the Bitcoin system. (cid:140)e Bitcoin
network currently consists of solo miners, open pools that allow
any miner to join, and closed (private) pools that require a private
relationship to join.
(cid:140)ere are several a(cid:138)acks on Bitcoin [18, 20, 34]; our work focuses
on two well-known mining a(cid:138)acks: sel(cid:128)sh mining and block with-
holding. Sel(cid:128)sh mining abuses Bitcoin’s forks mechanism to derive
an unfair reward. A fork can occur when at least two cryptographic
solutions (blocks) are propagated in a round. (cid:140)is may occur when
solutions are discovered almost simultaneously, and take time to
propagate through the Bitcoin network. Only one branch of a fork
can be valid (only one solution will be accepted); others are even-
tually invalidated. In sel(cid:128)sh mining, proposed by Eyal et al. in
2014 [18], an a(cid:138)acker does not propagate a block immediately, but
generates forks intentionally by propagating a block selectively
only when another honest miner generates a block. (cid:140)e a(cid:138)acker
can earn a greater reward by invalidating honest miners’ blocks if
she has enough computational power.
In a Block Withholding (BWH) a(cid:138)ack, a miner in a pool sub-
mits only PPoWs, but not FPoWs. When an a(cid:138)acker launches a
BWH a(cid:138)ack against a single pool and conducts honest mining with
the rest of her computational power, she earns an extra reward,
while the target pool takes a loss. All pools are still vulnerable to
this a(cid:138)ack because no e(cid:129)cient and cheap defense has emerged,
despite ongoing research. In 2015, Eyal [15] (cid:128)rst modeled a game
between two BWH a(cid:138)acking pools, and discovered the miner’s
dilemma: when two pools a(cid:138)ack each other, both will take a loss in
equilibrium. (cid:140)is is analogous to the classic “prisoners’ dilemma”.
Currently, pools implicitly agree not to launch BWH a(cid:138)acks against
each other because it would harm everyone. In other words, while
BWH a(cid:138)ack is always pro(cid:128)table, the BWH a(cid:138)ack game is not. We
describe these two a(cid:138)acks in more detail in Section 2.
In this paper, we describe a new a(cid:138)ack called a fork a(cid:135)er withhold-
ing (FAW) a(cid:138)ack, which combines a BWH a(cid:138)ack with intentional
forks. Like the BWH a(cid:138)ack, the FAW a(cid:138)ack is always pro(cid:128)table
regardless of an a(cid:138)acker’s computational power or network connec-
tion state. (cid:140)e FAW a(cid:138)ack also provides superior rewards compared
to the BWH a(cid:138)ack – in fact, the BWH a(cid:138)acker’s reward is the lower
bound of the FAW a(cid:138)acker’s. We analyze both the single- and multi-
pool FAW a(cid:138)ack variants in Sections 5 and 6, respectively. (cid:140)en,
in Section 7, we model the FAW a(cid:136)ack game between two FAW
a(cid:138)acking pools and discover that the a(cid:138)ack becomes a size game
between the two pools, breaking the miner’s dilemma stalemate.
Single-pool FAW attack. Like the BWH a(cid:138)acker, an FAW a(cid:138)acker
joins the target pool and executes an FAW a(cid:138)ack against it. (cid:140)e
node submits FPoWs to the pool manager only when another miner,
neither the a(cid:136)acker nor a miner in the target pool, generates a block.
If the pool manager accepts the submi(cid:138)ed FPoW, he propagates it,
and a fork will be generated. (cid:140)en, all Bitcoin network participants
must select one branch. If the a(cid:138)acker’s block is selected, the target
pool receives the reward, and she is also rewarded from the pool.
When a(cid:138)acking a single pool, an FAW a(cid:138)acker can earn extra
rewards in any case. (cid:140)e lower bound of the extra reward is that
for a BWH a(cid:138)acker. In Section 5, we show quantitatively that the
FAW a(cid:138)acker can earn extra rewards one to four times more than
that for the BWH a(cid:138)acker in a large pool (representing 20% of the
computational power of the entire Bitcoin network).
Multi-pool FAW attack. To increase her reward, she can simulta-
neously a(cid:138)ack multiple pools, so we expand our a(cid:138)ack to consider
the FAW a(cid:138)ack against n pools. As in the single pool case, our
analysis shows that the FAW a(cid:138)ack is always pro(cid:128)table, and that
the FAW a(cid:138)acker earns a greater reward than the BWH a(cid:138)acker.
If an a(cid:138)acker executes the FAW a(cid:138)ack against four pools that are
currently popular [4], her extra reward will be about 56% greater
than that for the BWH a(cid:138)acker. Note that the extra reward for
a(cid:138)acking multiple pools is more than that for a single pool a(cid:138)ack.
Details of the multi-pool a(cid:138)ack analysis are presented in Section 6.
FAW attack game. Section 7 considers a scenario in which two
pools execute FAW a(cid:138)acks against each other. (cid:140)ere is a Nash equi-
librium in the game; however, unlike in the BWH a(cid:138)ack game [15],
there exists a condition in which the larger pool always earns the
extra reward. (cid:140)at is, the miner’s dilemma may not hold. (cid:140)erefore,
the equilibrium for the FAW a(cid:138)ack game in which two pools decide
whether to a(cid:138)ack may be a Pareto optimal.
FAW attack vs. sel(cid:128)sh mining. We also compare the FAW a(cid:138)ack
to sel(cid:128)sh mining [18] in Section 8. Sel(cid:128)sh mining is not always
pro(cid:128)table, and the a(cid:138)acker is easily detectable. Moreover, sel(cid:128)sh
mining is known to be impractical [8, 10, 19]. Indeed, previous
a(cid:138)acks on mining that generate intentional forks share these prop-
erties, making them impractical. However, unlike sel(cid:128)sh mining,
the FAW a(cid:138)ack is always pro(cid:128)table, and detecting FAW a(cid:138)ackers
is harder than detecting sel(cid:128)sh mining a(cid:138)ackers even though the
FAW a(cid:138)ack does utilize intentional forks.
In Section 9, we discuss various parameters used throughout
the study, some of which can be computed in advance, making
FAW a(cid:138)acks feasible. One speci(cid:128)c parameter is hard to compute
in advance, but we show that the FAW a(cid:138)ack is still pro(cid:128)table
even without knowing it. Moreover, it is possible to identify Sybil
nodes, but not the a(cid:138)acker. (cid:140)ough we also propose several possible
countermeasures, including a method for detecting FAW a(cid:138)acks in
Section 10, we (cid:128)nd no practical defense for FAW a(cid:138)acks.
Contributions. (cid:140)is paper makes the following contributions:
(1) We propose the FAW a(cid:138)ack, which is always pro(cid:128)table
(unlike sel(cid:128)sh mining) regardless of the a(cid:138)acker’s compu-
tational power and network capability. (cid:140)e extra reward
for an FAW a(cid:138)ack is always at least as high as that for a
BWH a(cid:138)ack.
(2) We analyze the FAW a(cid:138)ack when the a(cid:138)ack target is one
pool and generalize to an a(cid:138)ack against n pools. Moreover,
we consider an FAW a(cid:138)ack pool game, in which two pools
execute FAW a(cid:138)acks against each other. We prove that
it can give rise to a pool size game, deviating from the
miner’s dilemma that exists in the BWH a(cid:138)ack.
(3) We discuss and propose partial countermeasures for pre-
venting an FAW a(cid:138)ack. However, these defenses are nei-
ther perfect nor practical, leaving an open problem.
2 PRELIMINARIES
Although built with security in mind, Bitcoin is vulnerable to several
a(cid:138)acks that allow an a(cid:138)acker to unfairly earn additional pro(cid:128)ts
at others’ expense. In this section, we describe Bitcoin and the
existing a(cid:138)acks against it that are related to our a(cid:138)ack.
2.1 Bitcoin Basics
Mining Process: (cid:140)e header of each block in a blockchain con-
tains a Merkle root [26] of the latest transactions, the hash value of
the previous block header, and a nonce. In the Bitcoin system, “min-
ing” is the process of generating nonces, which are PoWs derived
from solving cryptographic puzzles. (cid:140)is work is performed by
peers, known as “miners”. In short, a miner must (cid:128)nd a valid nonce
as a PoW satisfying sha256(sha256(blkhdr)) < t, where blkhdr
refers to all data in a block header, and t is a 256-bit number spec-
i(cid:128)ed by the Bitcoin protocol, so it is more di(cid:129)cult to (cid:128)nd a valid
nonce given a smaller t. (cid:140)e value of t is automatically adjusted by
the Bitcoin system to keep the average duration of each round 10
minutes. When a miner (cid:128)nds a valid nonce and generates a new
block, this block is broadcast to every node in the Bitcoin network.
When another node receives it, the node regards this block as the
new head of the blockchain. At the time of writing, a miner re-
ceives 12.5 BTC as a reward for solving the puzzle and extending
the blockchain at the expense of computational power.
Forks: If two miners independently build and broadcast two di(cid:130)er-
ent valid blocks, a node may consider the block (cid:128)rst received as the
new blockchain head. Because of di(cid:130)erent network latencies [13],
more than two heads can exist at the same time. (cid:140)is situation is
called a fork. By appending a subsequent block to only one branch
in the fork, the branch is de(cid:128)ned as valid, while all others are inval-
idated. Moreover, forks can also be intentionally generated. When