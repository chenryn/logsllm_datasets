For random routes in the honest region, these routing tables
give us the following properties. First, once two routes traverse
the same edge along the same direction, they will merge and stay
merged (called the convergence property). Furthermore, an out-
going edge uniquely determines an incoming edge as well; thus
the random routes can be back-traced (called the back-traceable
property). In other words, it is impossible for two routes to enter
the same node along different edges but exit along the same di-
rection.
traverses a certain edge
With these two properties, if we know that a random route
along a certain
of a certain length
direction in its th hop, the entire route is uniquely determined.
that
In other words, there can be only one route with length
traverses
along the given direction at its th hop. In addition,
if two random routes ever share an edge in the same direction,
then one of them must start in the middle of the other (Fig. 2).
Of course, these properties can be guaranteed only for the
portions of a route that do not contain sybil nodes. Sybil nodes
may deviate from any aspect of the protocol.
C. Route Intersection as the Basis for Acceptance
performs
In SybilGuard, a node with degree
random
routes (starting from itself) of a certain length
is
roughly 2000 for the one-million node network in our later
experiments), one along each of its edges. These random routes
form the basis of SybilGuard whereby an honest node (the
) decides whether or not to accept another node (the
veriﬁer
). In particular, a veriﬁer route accepts
if and only
suspect
if at least one route from intersects that route from (see
Fig. 3).
’s
routes accept
if and only if at least a threshold of
(e.g.,
accepts
.
Because of the limited number of attack edges, if one chooses
appropriately, most of the veriﬁer’s routes will remain en-
tirely within the honest region with high probability. To intersect
with a veriﬁer’s random route that remains entirely within the
YU et al.: SYBILGUARD: DEFENDING AGAINST SYBIL ATTACKS VIA SOCIAL NETWORKS
579
means that subsets of honest nodes have good connectivity to the
rest of the social network, (ii) too many sybil nodes (compared
to the number of attack edges) disrupts the fast mixing property,
and (iii) the veriﬁer is itself an honest node, which breaks sym-
metry. We will elaborate on these aspects later.
D. Secure and Decentralized Design for Random Routes and
Their Veriﬁcation
The previous sections explained the basics of random routes.
In the actual SybilGuard protocol, these routes are performed in
a completely decentralized way. The two local data structures
(registry tables and witness tables) described in this section are
the only data structures that each node needs to maintain. Also,
propagating these tables to direct neighbors is the only action
each node needs to take in order to determine random routes.
Edge keys. Each pair of friends in the social network shares a
unique symmetric secret key (e.g., a shared password) called the
edge key. The edge key is used to authenticate messages between
the two friends (e.g., with a Message Authentication Code). Be-
cause only the two friends need to know the edge key, key distri-
bution is easily done out-of-band (e.g., via phone calls). Because
of the nature of the social network and the strong trust associ-
ated with the notion of friends in SybilGuard, we expect node
degrees to be relatively small and will tend not to increase sig-
grows. As a result, a user only needs to invoke
niﬁcantly as
out-of-band communication a small number of times. In order
to prevent the adversary from increasing the number of attack
dramatically by compromising high-degree honest
edges
nodes, each honest node (before compromised) voluntarily con-
strains its degree within some constant (e.g., 30). Doing so will
not affect the guarantees of SybilGuard as long as the social net-
work remains fast mixing. On the other hand, researchers have
shown that even with rather small constant node degrees, social
networks (or more precisely, small-world topologies) are fast
mixing [10], [11].
A node informs its friends of its IP address whenever its IP
address changes, to allow continued communication via the In-
ternet. This IP address is used only as a hint. It does not result
in a vulnerability even if the IP address is wrong, because au-
thentication based on the edge key will always be performed.
If DNS and DNS names are available, nodes may also provide
DNS names and only update the DNS record when the IP ad-
dress changes.
Registration. In SybilGuard, each node with degree must
hops each and remember these
from “lying” about its routes, SybilGuard
nodes along each of its routes.
is one
hops “upstream” (details below).
will ask the inter-
is
perform random routes of
routes. To prevent
requires
A node
of the nodes that are within
When the veriﬁer
section point (between
indeed registered.
to register with all
along the route permits
to register only if
wants to verify
’s route and
,
’s route) whether
In this registration process, each node needs to use a “token”
that cannot be easily forged by other nodes. Note that the avail-
ability of such tokens does not solve the sybil attack problem by
itself, because a malicious user may have many such tokens. A
node will be accepted based on its token. The token must be
unforgeable to prevent the adversary from stealing the token
Fig. 3. The veriﬁer’s random route accepts the suspect because the random
routes intersect. SybilGuard leverages the facts that 1) the average honest node’s
random route is highly likely to stay within the honest region and 2) two random
routes from honest nodes are highly likely to intersect within w steps.
Fig. 4. All random routes traversing the same edge merge.
honest region, a sybil node’s random route must traverse one
of the attack edges (whether or not the sybil nodes follow the
protocol). Suppose there were only a single attack edge (as in
Fig. 4). Based on the convergence property, the random routes
from sybil nodes must merge completely once they traverse the
attack edge. Thus, all of these routes that intersect the veriﬁer’s
route will have the same intersection node; furthermore, they
in the
enter the intersection node along the same edge (edge
ﬁgure). The veriﬁer thus considers all of these nodes to be in the
same equivalence group, and hence there is only a single sybil
attack edges, the number
group. In the more general case of
of sybil groups is bounded by .
SybilGuard further bounds the size of the equivalence groups
, the length of
(and hence of the sybil groups) to be at most
the random routes. From the back-traceable property, we know
distinct routes that i) intersect with the
there can be at most
veriﬁer’s random route at a given node, and ii) enter the inter-
in Fig. 4).
section node along a given edge (e.g., along edge
Speciﬁcally, there is one such route that traverses the given edge
in its th hop, for
. Thus, the veriﬁer accepts exactly
one node for each of the
hop numbers at a given intersection
point and a given edge adjacent to the intersection point. In sum-
are sybil
mary, there are many equivalence groups, but only
and each has at most
nodes.
For honest nodes, we will show that with appropriate
, (i) an
honest node’s random route intersects with the veriﬁer’s route
with high probability, and (ii) such an honest node will never
compete for the same hop number with any other node (in-
cluding sybil nodes). Thus, the average honest node will be ac-
cepted with high probability.
Our SybilGuard design leverages the following three impor-
tant facts to bound the number of sybil nodes: (i) social networks
tend to be fast mixing (deﬁned in Section IV), which necessarily
580
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 16, NO. 3, JUNE 2008
As shown in Fig. 5, this simple design will ultimately register
random routes.
each node’s public key with all nodes on its
The protocol does not have to proceed in synchronous rounds,
and nodes in the system may start with empty registry tables.
The overhead of the protocol is small as well. Even with one
2000 (already pessimistic
million nodes, if we were to use
given our simulation results), then a registry table is roughly
256 KB when using 1024-bit public keys. For a node with ten
neighbors, the total data sent is 2.56 MB. A further optimiza-
tion is to store cryptographically secure hashes of the public
keys in the registry table instead of the actual public keys. With
each hashed key being 160-bit, the total data sent by each node
would be roughly 400 KB. Finally, it is important to notice that
registry table updates are needed only when social trust rela-
tionships change (Section V). Thus, we expect the bandwidth
consumption to be quite acceptable.
Witness tables. Registry tables ensure that each node reg-
isters with the nodes on its random routes. Each node, on the
other hand, also needs to know the set of nodes that are on its
random routes. This is achieved by each node maintaining a wit-
ness table for each of its edges. The th entry in the table con-
tains the public key (or its hash, if we use the above optimiza-
tion) and the IP address of the node encountered at the th hop
of the random route along the edge. The public key will later be
used for intersection and authentication purposes, while the IP
address will be used as a hint to ﬁnd the node. If the IP address
is stale or wrong, it will have the same effect as the intersection
node being ofﬂine. (Ofﬂine nodes are addressed in Section V-A.)
The witness table is propagated and updated in a similar
fashion as the registry table, except that it propagates “back-
ward” (using the reverse of the routing table). In this way, a
“downstream” nodes along the direction
node will know the
of each of its edges, which is exactly the set of nodes that are
on its random routes. Different from registry tables, witness
tables should be updated when a node’s IP address changes
(even with a static social network). But this updating can be
done lazily, given the optimizations described below in the
veriﬁcation process.
Veriﬁcation process. Fig. 6 depicts the process for a node
.
sends all of its witness tables to
needs to perform an intersection between
to verify a node
’s random routes. To do
each of its random routes and all of
’s
this,
public key. The communication overhead in this step can be
reduced using standard optimizations such as Bloom ﬁlters [9]
to summarize the nodes in witness tables.
, together with
’s route.
(if any) on
For each of
by requiring
authenticates
’s witness tables,
performs an intersection
’s tables, and determines the (hashed) public key
then
using the recorded IP address in the witness table as
to sign each message
also sends
hashes and compares with the stored
cannot be found using the
’s IP address from
’s
with all of
of the ﬁrst intersection point
contacts
a hint.
sent, using its private key. If hashed keys are used,
its public key, which
hash, before authenticating
recorded IP address, will try to obtain
nearby nodes in the witness table. They will likely have
more up-to-date IP address because they are near
will always authenticate
not introduce a vulnerability.
’s public key, this does
. Because
based on
. If
Fig. 5. Maintaining the registry tables. In order to simplify this example, w =
2, each node has exactly two edges, and the routing tables are carefully chosen.
The node names in the registry tables stand for the nodes’ public keys.
of an honest node (unless the node is compromised). If users
have static or slowly changing IP addresses, and there is no IP
spooﬁng, then a node’s IP address could be used as its token.
To address a more general scenario, including frequently
changing IP addresses and IP spooﬁng, we can instead use
public key cryptography for the tokens. Each honest node has
a locally generated public/private key pair. Notice that these
public and private keys have no connection with the edge
keys (which are secret symmetric keys). Malicious nodes may
create as many public/private key pairs as they wish. We use
the private key of each node as the unforgeable token, while
the public key is registered along the random routes as a proof
of owning the token. Note that we do not need to solve the
public key distribution problem, because we are not concerned
with associating public keys to, for example, human beings or
computers. The only property SybilGuard relies on is that the
private key is unforgeable and its possession can be veriﬁed.
To perform the registration in a secure and completely decen-
tralized manner, SybilGuard uses registry tables and witness
tables, as described next.
on
for edge
Registry tables. Each node maintains a registry table for
each of its edges (Fig. 5). The th entry in the registry table for
edge lists the public key of the node whose random route enters
along at its th hop. For example, consider the registry table
’s random routes is
. In other words, in
. Thus
’s public key. Similarly,
’s public key. As a result, the registry table
“upstream” nodes
the ﬁrst hop of this random route,
the ﬁrst entry in the registry table is
the second entry is
has
along the direction of edge
entries that are the public keys of the
in Fig. 5. Here, one of
via edge
via edge
via edge
enters
from .
’s routing table,
Suppose that according to
is the out-
(as in Fig. 5). will for-
, via an
going direction corresponding to
ward its registry table for
authenticated channel established using the edge key for
then populates its registry table for
table from downward by one entry and adding