40
104
OT cost
PSSZ our BaRK-OPRF
768
1792
3840
640
1664
3712
576
1536
3584
384
1408
3456
256
1280
3328
424
424
424
432
432
432
440
440
440
448
448
448
448
448
448
ratio
0.54
0.24
0.11
0.68
0.26
0.12
0.76
0.29
0.12
1.17
0.32
0.13
1.75
0.35
0.13
Table 1: Comparing the OT-cost of PSSZ-paradigm OPRF subprotocol and ours, for various parameters.
The entries in the table refer to the contribution (in bits) to the size of the OT-extension matrices. (cid:96) is the
item length (in bits), n is the total number of items in the parties’ sets, and (cid:96)∗ is the eﬀective item length
when using the optimizations of [PSSZ15].
6
Implementation & Performance
We implemented our PSI protocol and report on its performance in comparison with the state-of-the-art
PSI protocol of [PSSZ15]. Our complete implementation is available on GitHub: https://github.com/
osu-crypto/BaRK-OPRF.
In our implementation we used parameter settings consistent with PSSZ or stricter, and ran their and
our code on our system so as to obtain meaningful comparisons. As do PSSZ, we use matrix transposition
code from [ALSZ13] and several other optimizations.
6.1 Choosing Suitable Parameters
In this section we discuss concrete parameters used in our implementation. We use a computational security
parameter of κ = 128 and a statistical security parameter of σ = 40.
The other parameters are:
s: the maximum size of the stash for Cuckoo hashing, when hashing n items into 1.2n using 3 hash
functions.
k: length of the pseudorandom code (and hence the width of the OT extension matrix) in the BaRK-OPRF
protocol.
v: output length of the PRF realized by the BaRK-OPRF protocol.
A summary of our concrete parameter choices is given in Table 2. Below we describe how these parameters
were derived.
Hashing parameters. Bob uses Cuckoo hashing with 3 hash functions to assign his n items into 1.2n
bins (and a stash). For the appropriate choice of the stash size s, we use the numbers given in [PSSZ15],
which limit the probability of hashing failure to 2−40.
14
n
28
212
216
220
224
s
12
6
4
3
2
k
424
432
440
448
448
v
56
64
72
80
88
Table 2: Parameters used in our implementation. n is the size of the parties’ input sets; s is the maximum
stash size for Cuckoo hashing; k is the width of the pseudorandom code (in bits); v is the length of OPRF
output (in bits).
Setting
Protocol
(insecure) na¨ıve hashing
LAN
PSSZ
BaRK-OPRF-PSI
(insecure) na¨ıve hashing
WAN
PSSZ
BaRK-OPRF-PSI
Bit length (cid:96)
{32, 64, 128}
32
64
128
{32, 64, 128}
{32, 64, 128}
32
64
128
{32, 64, 128}
28
1
306
306
307
192
97
609
624
624
556
212
6
380
442
443
211
101
701
742
746
585
75
770
1,236
1,352
387
180
1,425
2,142
2,198
1,259
set size n
216
220
759
4,438
10,501
13,814
3,780
1,422
8,222
18,398
23,546
7,455
224
13,529
42,221
137,383
213,597
58,567
22,990
81,234
248,919
381,913
106,828
Table 3: Running time in ms for PSI protocols with n elements per party
Setting
LAN
WAN
Phase
Oﬄine
Online
Oﬄine
Online
28
171
21
291
265
212
171
40
313
272
set size n
216
216
171
316
943
220
601
3,179
758
6,697
224
7,615
50,952
7,482
99,346
Table 4: Running time of our BaRK-OPRF protocol in ms in oﬄine and online phases
Protocol
na¨ıve hashing
Bit length (cid:96)
{32, 64, 128}
PSSZ
BaRK-OPRF-PSI
32
64
128
{32, 64, 128}
28
0.01
0.06
0.09