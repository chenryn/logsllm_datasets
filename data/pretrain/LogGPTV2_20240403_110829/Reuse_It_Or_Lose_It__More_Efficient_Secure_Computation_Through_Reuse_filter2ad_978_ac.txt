universal hash is used to prove consistency of the generator’s
input across each evaluation circuit. Simply put, if the hash
is diﬀerent in any of the evaluation circuits, we know the
generator did not enter consistent input. More formally, a
hash of the generator’s input is taken for each circuit. For
0 < i < S where !isCheckCircuit(i),
ti = U HF (garbledGenInputi, Ci)
The results of these universal hashes are compared. If a sin-
gle hash is diﬀerent then the cloud knows the generator tried
to cheat and safely aborts.
correct = ((t0 == t1)&(t0 == t2)& . . . &(t0 == tN−1))
Phase 4: Partial Input Gate Generation, Check,
and Evaluation
Generation
For 0 ≤ i < S, for 0 ≤ j < len(savedW ires), the gener-
ator creates a partial input gate, which transforms a wire’s
saved values, P Out0i,j and P Out1i,j, into wire values that
can be used in the current garbled circuit execution, GIn0i,j
and GIn1i,j. For each circuit, Ci, the generator creates a
pseudorandom transformation value Ri, to assist with the
transformation.
For each set of P Out0i,j and P Out1i,j, the generator
XORs each value with Ri. Both results are then hashed, and
put through a function to determine the new permutation
bit, as hashing removes the old permutation bit.
t0 = hash(P Out0i,j ⊕ Ri)
t1 = hash(P Out1i,j ⊕ Ri)
P In0i,j, P In1i,j = setP P BitGen(t0, t1)
This function, setPPBitGen, pseudo-randomly ﬁnds a bit
that is diﬀerent between the two values of the wire and notes
that bit to be the permutation bit. setPPBitGen is seeded
from CSeedi, allowing the cloud to regenerate these values
for the check circuits.
For each P In0i,j, P In1i,j pair, a set of values, GIn0i,j and
GIn1i,j, are created under the master key of Ci, CKeyi, –
where CKeyi is the diﬀerence between 0 and 1 wire labels
for the circuit. In classic garbled gate style, two truth table
values, T T 0i,j and T T 1i,j, are created such that:
T T 0i,j ⊕ P In0i,j = GIn0i,j
T T 1i,j ⊕ P In1i,j = GIn1i,j
The truth table, T T 0i,j and T T 1i,j, is permuted so that
the permutation bits of P In0i,j and P In1i,j tell the cloud
which entry to select. Each partial input gate, consisting of
the permuted T T 0i,j, T T 1i,j values and the bit location
Algorithm 4: Partial Input
Input : Partial Output
Output: Partial Garbled Input
// Generation: the generator creates a partial input gate, which
transforms a wire’s saved values, P Out0i,j and P Out1i,j , into
values that can be used in the current garbled circuit execution,
GIn0i,j and GIn1i,j .
for i ← 0 to S do
Ri ← P RN G.random()
for j ← 0 to len(savedW ires) do
t0 ← hash(P Out0i,j ⊕ Ri)
t1 ← hash(P Out1i,j ⊕ Ri)
P In0i,j , P In1i,j ← setP P BitGen(t0, t1)
GIn0i,j ← T T 0i,j ⊕ P In0i,j
GIn1i,j ← T T 1i,j ⊕ P In1i,j
GenSendToCloud( Permute([T T 0i,j , T T 1i,j ]),
permute bit locations )
GenSendToCloud(Ri)
// Check: The cloud checks the gates to make sure the generator
didn’t cheat
for i ← 0 to S do
if isCheckCircuit(i) then
for j ← 0 to len(savedW ires) do
// the cloud has received the truth table
information, T T 0i,j , T T 1i,j , bit locations from
setP P BitGen, and Ri
correct ← (generateGateF romInf o() ==
receivedGateF romGen())
// If any gate does not match, the cloud knows the
generator tried to cheat.
if !correct then
abort();
// Evaluation
for i ← 0 to S do
if !isCheckCircuit(i) then
for j ← 0 to len(savedW ires) do
//The cloud, using the previously saved P Outxi,j
value, and the location (point and permute) bit sent
by the generator, creates P Inxi,j
P Inxi,j ←
setP P BitEval(hash(Ri ⊕ P Outxi,j ), location)
// Using P Inxi,j , the cloud selects the proper
truth table entry T T xi,j from either T T 0i,j or
T T 1i,j to decrypt
// Creates GInxi,j to enter into the garbled circuit
GInxi,j ← T T xi,j ⊕ P Outxi,j
return GIn;
from setP P BitGen is sent to the cloud. Each Ri is also sent
to the cloud.
Check
For 0 ≤ i < S where isCheckCircuit(i), for 0 ≤ j <
len(savedW ires), the cloud receives the truth table informa-
tion, T T 0i,j, T T 1i,j, and bit location from setP P BitGen,
and proceeds to regenerate the gates based on the check cir-
cuit information. The cloud uses Ri (sent by the generator),
P Out0i,j and P Out1i,j (saved during the previous execu-
tion), and CSeedi (recovered during the cut-and-choose) to
generate the partial input gates in the same manner as de-
scribed previously. The cloud then compares these gates to
those the generator sent. If any gate does not match, the
cloud knows the generator tried to cheat and safely aborts.
Evaluation
For 0 ≤ i < S where !isCheckCircuit(i), for 0 ≤ j <
len(savedW ires) the cloud receives the truth table informa-
tion, T T ai,j, T T bi,j and bit location from setP P BitGen. a
and b are used to denote the two permuted truth table val-
ues. The cloud, using the previously saved P Outxi,j value,
creates the P Inxi,j value:
P Inxi,j = setP P BitEval(hash(Ri ⊕ P Outxi,j), location)
location is the location of the point and permute bit sent by
the generator. Using the point and permute bit of P Inxi,j,
the cloud selects the proper truth table entry T T xi,j from
either T T ai,j or T T bi,j to decrypt, creates GInxi,j and then
enters GInxi,j into the garbled circuit.
GInxi,j = T T xi,j ⊕ P Outxi,j
Phase 5: Circuit Generation and Evaluation
Algorithm 5: Circuit Execution
Both the resulting garbled circuit output and the MAC are
encrypted under a one-time pad. The generator can also
have output veriﬁed in the same manner. The cloud sends
the corresponding encrypted output to each party.
The generator and evaluator then decrypt the received
ciphertext, perform a MAC over real output, and verify the
cloud did not modify the output by comparing the generated
MAC with the MAC calculated within the garbled circuit.
result = (outEvlM AC == M AC(outEvl))
Input : Generator Input, Evaluator Input, Partial Input
Output: Partial Output, Garbled Output
// The generator generates each garbled gate and sends it to the
cloud. Depending on whether the circuit is a check or evaluation
circuit, the cloud veriﬁes that the gate is correct or evaluates the
gate.
for i ← 0 to S do
for j ← 0 to len(circuit) do
g ← genGate(Ci, j)
send(g)
// the cloud receives all gates for all circuits, and then checks
OR evaluates each circuit
for i ← 0 to S do
for j ← 0 to len(circuit) do
g ← recvGate()
if isCheckCircuit(i) then
if
! verif yCorrect(g) then
abort()
else
eval(g)
return Partial Output, Garbled Output
Circuit Generation
The generator generates each garbled gate for each circuit
and sends them to the cloud. Since the generator does not
know the check and evaluation circuit split, nothing changes
for the generation for check and evaluation circuits. For 0 ≤
i < S, For 0 ≤ j < len(circuit),
g = genGate(Ci, j), send(g)
Circuit Evaluation and Check
The cloud receives each garbled gate for all circuits. For
evaluation circuits the cloud evaluates those garbled gates.
For check circuits the cloud generates the correct gate, based
on the circuit seed, and is able to verify it is correct.
For 0 ≤ i < S, For 0 ≤ j < len(circuit), g = recvGate(),
if (isCheckCircuit(j)) verif yCorrect(g) else eval(g)
If a garbled gate is found not to be correct, the cloud
informs the evaluator and generator of the incorrect gate
and safely aborts.
Phase 6: Output and Output Consistency Check
Algorithm 6: Circuit Output
Input : Garbled Output
// a MAC of the output is generated inside the garbled circuit,
and both the resulting garbled circuit output and the MAC are
encrypted under a one-time pad.
outEvlComplete = outEvl||M AC(outEvl)
result = (outEvlM AC == M AC(outEvl))
if !result then
abort() // output check fail
As the ﬁnal step of the garbled circuit execution, a MAC
of the output is generated inside the garbled circuit, based
on a k-bit secret key entered into the function.
outEvlComplete = outEvl||M AC(outEvl)
Phase 7: Partial Output
Algorithm 7: Partial Output
Input : Partial Output
for i ← 0 to S do
for j ← 0 to len(Partial Output) do
//The generator saves both possible wire values
GenSave(P artial Output0i,j )
GenSave(P artial Output1i,j )
for i ← 0 to S do
for j ← 0 to len(Partial Output) do
if
isCheckCircuit(i) then
EvlSave(P artial Output0i,j )
EvlSave(P artial Output1i,j )
else
// circuit is evaluation circuit
EvlSave(P artial OutputXi,j )
The generator saves both possible wire values for each
partial output wire. For each evaluation circuit the cloud
saves the partial output wire value. For check circuits the
cloud saves both possible output values.
4.3
Implementation
As with most garbled circuit systems there are two stages
to our implementation. The ﬁrst stage is a compiler for cre-
ating garbled circuits, while the second stage is an execution
system to evaluate the circuits.
We modiﬁed the KSS12 [27] compiler to allow for the sav-
ing of intermediate wire labels and loading wire labels from
a diﬀerent SFE computation. By using the KSS12 compiler,
we have an added beneﬁt of being able to compare circuits
of almost identical size and functionality between our sys-
tem and CMTB, whereas other protocols compare circuits
of sometimes vastly diﬀerent sizes.
For our execution system, we started with the CMTB sys-
tem and modiﬁed it according to our protocol requirements.
PartialGC automatically performs the output consistency
check, and we implemented this check at the circuit level.
We became aware and corrected issues with CMTB relat-
ing to too many primitive OT operations performed in the
outsourced oblivious transfer when using a high circuit pa-
rameter and too low a general security parameter in general.
The ﬁxes reduced the run-time of the OOT.
5. SECURITY OF PARTIALGC
In this section, we provide a basic proof sketch of the
PartialGC protocol, showing that our protocol preserves the
standard security guarantees provided by traditional garbled
circuits - that is, none of the parties learns anything about
the private inputs of the other parties that is not logically
implied by the output it receives. Since we borrow heavily
from [8] and [38], we focus on our additions, and defer to the
original papers for detailed proofs of those protocols. Due to
space constraints, we do not provide a formal proof here; a
complete proof will be provided in the technical report.
We know that the protocol described in [8] allows us to
garble individual circuits and securely outsource their eval-
uation. In this paper, we modify certain portions of the pro-
tocol to allow us to transform the output wire values from
a previous circuit execution into input wire values in a new
circuit execution. These transformed values, which can be
checked by the evaluator, are created by the generator using
circuit “seeds.”
We also use some aspects of [38], notably their novel cut-
and-choose technique which ensures that the generator does
not learn which circuits are used for evaluation and which
are used for checking - this means that the generator must
create the correct transformation values for all of the cut-
and-choose circuits.
Because we assume that the CMTB garbled circuit scheme
can securely garble any circuit, we can use it individually on
the circuit used in the ﬁrst execution and on the circuits used
in subsequent executions. We focus on the changes made at
the end of the ﬁrst execution and the beginning of subse-
quent executions which are introduced by PartialGC.
The only diﬀerence between the initial garbled circuit ex-
ecution and any other garbled circuit in CMTB is that the
output wires in an initial PartialGC circuit are stored by the
cloud, and are not delivered to the generator or the evalua-
tor. This prevents them from learning the output wire labels
of the initial circuit, but cannot be less secure than CMTB,
since no additional steps are taken here.
Subsequent circuits we wish to garble diﬀer from ordinary
CMTB garbled circuits only by the addition, before the ﬁrst
row of gates, of a set of partial input gates. These gates don’t
change the output along a wire, but diﬀer from normal gar-
bled gates in that the two possible labels for each input wire
are not chosen randomly by the generator, but are derived
by using the two labels along each output wire of the initial
garbled circuit.
This does not reduce security. In PartialGC, the input
labels for partial input gates have the same property as the
labels for ordinary garbled input gates: the generator knows
both labels, but does not know which one corresponds to the
evaluator’s input, and the evaluator knows only the label
corresponding to its input, but not the other label. This is
because the evaluator’s input is exactly the output of the
initial garbled circuit, the output labels of which were saved
by the evaluator. The evaluator does not learn the other
output label for any of the output gates because the output
of each garbled gate is encrypted. If the evaluator could learn
any output labels other than those which result from an
evaluation of the garbled circuit, the original garbled circuit
scheme itself would not be secure.
The generator, which also generated the initial garbled
circuit, knows both possible input labels for all partial eval-
uation gates, because it has saved both potential output
labels of the initial circuit’s output gates. Because of the
outsourced oblivious transfer used in CMTB, the generator
did not know which input labels to use for the initial garbled
circuit, and therefore will not have been able to determine
the output labels for that circuit. Therefore, the generator
will likewise not know which input labels are being used for
subsequent garbled circuits.
Generator’s Input Consistency Check
We use the generator’s input consistency check from sS13.
We note there is no problem with allowing the cloud to per-
form this check; for the generator’s inconsistent input to
pass the check, the cloud would have to see the malicious
input and ignore it, which would violate the non-collusion
assumption.