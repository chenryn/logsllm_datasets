cpuset, freezer, perf_event; 3 of them are for memory, including
memory, hugetlb, rdma; blkio is for storage; and 3 are for IO, in-
cluding devices, net_cls, net_prio. Only PIDs control group are
for the abstract resource of PID.
While limiting the usages of shared abstract resources in con-
tainer processes can mitigate DoS attacks, it is again impractical to
extend control groups to include all abstract resources. Accounting
resources and enforcing limits on so many types of resources will
introduce unacceptable overhead.
3 ABSTRACT RESOURCE ATTACKS
In this section, we first clarify the threat model and assumptions.
Next, we discuss weaknesses in the container isolation. Finally,
we show that abstract resource attacks also work on FreeBSD and
Fuchsia kernels.
Threat model and assumptions. In this paper, as we are target-
ing OS-level virtualization, we assume the containers are running
on the same shared kernel. Containers enforce state-of-the-art pro-
tection and follow the most security practices in deployment. More
specifically, containers are running as different non-root users with
all capabilities dropped. While the kernel is enforcing as many
namespaces and control groups as possible for the container. More-
over, the kernel is also using seccomp to block sensitive system
calls. We further assume that the kernel has no bugs and all security
mechanisms are working properly.
On the other side, the attacker controls one container and at-
tempts to disrupt other containers running on the same kernel. The
attacker can run any code within the container and call seccomp
allowed system calls. However, he/she is not allowed to exploit ker-
nel vulnerabilities. Furthermore, the attacker is in a non-privileged
container as a non-root user, with no capabilities at all. Finally,
the attacker is not allowed to escalate the privilege or regain any
capabilities. In the following, we show that due to shared abstract
resources in the kernel, even such an attacker still can launch DoS
attacks to other containers.
3.1 Weaknesses in OS-level Virtualization
In OS-level virtualization, containers are directly and indirectly
sharing thousands of kernel abstract resources, which makes them
vulnerable to resource-exhaustion attacks. We leverage an exam-
ple in the Linux kernel to illustrate the details. Figure 1 shows
the global variable nr_files and function alloc_empty_file in the
Linux kernel. alloc_empty_file allocates struct file (line 17). For
each allocated struct file, nr_files accounts it by increasing the
counter (line 19). In the host Linux kernel, the total number of
struct file is limited by files_stat.max_files (line 13). If the
limit is reached, the alloc_empty_file returns an error (line 23).
However, the Linux kernel does not provide any namespaces or
control groups to isolate or limit nr_files. As a result, nr_files
is directly controllable to all containers—any allocation of struct
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea766static struct percpu_counter nr_files __cacheline_aligned_in_smp;
static long get_nr_files(void)
{
return percpu_counter_read_positive(&nr_files);
struct file *alloc_empty_file(int flags, const struct cred *cred)
{
static long old_max;
struct file *f;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
}
}
if (get_nr_files() >= files_stat.max_files &&
↩→
!capable(CAP_SYS_ADMIN)) {
...
goto over;
}
f = __alloc_file(flags, cred);
if (!IS_ERR(f))
percpu_counter_inc(&nr_files);
...
over:
...
return ERR_PTR(-ENFILE);
Figure 1: Linux kernel source of nr_files. nr_files is a global
variable shared by all containers. For each allocated struct
file, nr_files increases by 1 (line 19).
file from any container increases the same shared global variable
nr_files.
Such a sharing of nr_files leads to a new attack. In Linux, ev-
erything is a file. So many operations, such as file open, process
creation, pipe creation, new network connection creation, even
the timer creation (timerfd_create) and event generation (eventfd),
increase nr_files. A malicious container can pop nr_files to its up-
per limit easily. Actually, in our experiment, the quota of nr_files
can be quickly exhausted in several seconds. Consequently, all op-
erations that consume struct file will fail. The impact is severe:
the victim-container cannot even run a command (as it needs to
open a command file) or exec a new binary, leading to program
crashes. From the above example, we find that even the container
has enough physical resources, such as CPU or memory, it still
cannot run any new programs without the quota in nr_files.
To demonstrate that abstract resource attacks affect all kernel
functionalities, we present one abstract resource attack for each as-
pect of the Linux kernel functionalities, including process, memory,
storage, and IO management [21]. In this section, we present the
attack results on the local test environments and defer the attack
results of the top 4 vendors to §5.
For the local test environment setup, the test machine has the
Intel Core i5 CPU, with 8 GB memory and 500 GB HDD, and it runs
Ubuntu 18.04 with Linux kernel v5.3.1. We refer to it as the host-
machine. On the host-machine, we set up two docker containers
using Docker 18.06.0-ce, and use them as attacker-container and
victim-container, respectively. We set up both containers following
the docker security best practices [9, 12, 30], which is running
them in different non-root users, dropping all capabilities, enabling
namespaces and control groups, and applying seccomp system call
blocking, as discussed in the threat model.
3.2 Attacks on Process Management
To implement process management, the Linux kernel has intro-
duced a series of abstract resources, such as process-control-block
1
2
3
4
5
6
7
8
9
10
11
12
struct pid *alloc_pid(struct pid_namespace *ns, pid_t *set_tid,
↩→
{
size_t set_tid_size)
...
nr = idr_alloc_cyclic(&tmp->idr, NULL, pid_min, pid_max,
↩→
...
if (nr numbers[i].nr = nr;
...
}
2: Linux kernel
Figure
allocation.
idr_alloc_cyclic checks the idr against pid_max, return-
ing a negative number idr if goes beyond.
source of
idr
struct task_struct, pid, state and various data structures to sup-
port the derived entities, such as struct thread_info for thread,
struct rq runqueues for scheduling, struct shm_info and struct
msginfo for inter-process communication (IPC), struct spinlock
and struct semaphores for synchronization. In fact, process man-
agement in Linux introduces thousands of abstract resources. In
the following, we introduce the attack against struct idr as an
example.
3.2.1 Attacking idr of PID. The Linux kernel introduces struct
idr for integer ID management. Process management also uses idr
for the pid allocation. Figure 2 shows the alloc_pid function, which
calls idr_alloc_cyclic to get a new pid. idr_alloc_cyclic, in turn,
checks pid_max during the idr allocation and return a negative error
code if the idr grows beyond pid_max. Later we will show that even
with PID namespace and PIDs control group enabled, idr can still
be regarded as a globally shared resource for all processes. Similar
to the fork bomb, a malicious container process can repeatedly fork
to exhaust all idr. As a result, all containers on the shared-kernel
cannot create any new processes or threads.
In our experiments, the attacker-container spawns processes
repeatedly by calling the fork system call. As a result, in the victim-
container, all operations related to new-process creation fail with
an error of “Resource temporarily unavailable”. Even root users on
the host-machine suffer from the same failure.
3.2.2 The effectiveness of the PID namespace. Linux v2.6.24 intro-
duces the PID namespace, which provides processes an independent
set of PIDs from other PID namespaces [47]. However, in the PID
namespace implementation, the Linux kernel allocates an extra PID
in the root PID namespace for any PID allocated in other PID names-
paces, so that all PIDs in the other PID namespaces can be mapped
to the root PID namespace. In other words, the root PID namespace
is still globally shared. As a result, even the attacker-container is in
a separated PID namespace, its PID allocation still exhausts the PID
in the root PID namespace, causing the new-process-create failures
on both the victim-container and host-machine. Therefore, even
with the PID namespace enabled, containers are still vulnerable to
the above idr-exhaustion attack.
3.2.3 The effectiveness of the PIDs control group. The PIDs con-
trol group was also introduced recently in Linux v4.3 [44]. It is
used to limit the total number of PIDs that are allocated in one
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea767control group. More specifically, the PIDs control group checks
against the process limit during the process forking, and returns
an error and aborts the forking if the total process number in the
PIDs control group (pids_cgroup->counter) reaches the upper limit
(pids_cgroup->limit). PIDs control group is effective in defending
against direct forking. However, it only charges the pid number to
the current process. Similar to the work-delegation approach in [23],
the attacker-container can trick the kernel to fork a large number
of kernel threads, such as frequent aborting to cause the kernel to
spawn interrupt-handling threads. In this way, the idr is exhausted
by kernel threads, which bypasses the restriction enforced by the
PIDs control group.
3.3 Attacks on Memory Management
The Linux kernel introduces various kernel data structures, such
as mm_struct for holding all the memory-related information of a
process, and vm_area_struct for representing the virtual memory
area. Moreover, to improve the reading and writing efficiency, the
Linux kernel also uses the memory as buffers to cache certain data.
Besides, it also introduces the write-back scheme, in which the
writing is done only to the memory. The dirty memory pages will
be written to the disk later by the kernel thread. Using the write-
back scheme, the caller only needs to write to the memory, and it
does not need to wait for the time-consuming disk-IO operations to
finish (i.e., write-through), which significantly improves the write
performance. However, we find that the kernel does not isolate or
restrict the dirty memory area usages, giving the attacker chances
to exhaust all dirty memory, which slows down other containers
significantly. Next, we discuss the attack on dirty memory.
3.3.1 Attacking dirty_throttle_control memory dirty ratio. The
Linux kernel introduces the dirty_throttle_control struct for dirty-
area control, which uses the dirty field to represent the whole
kernel-space dirty ratio. Whenever the dirty value is too high, the
kernel wakes up background threads to sync the dirty memory
to disk. However, in the meantime, as the dirty ratio is too high,
the kernel blocks the write-back and converts all writes to write-
through, which slows down the write performance dramatically.
Unfortunately, the kernel does not provide any isolation for
the memory dirty ratio. Any process can impact the global mem-
ory dirty ratio. In our attack, the attacker-container uses the dd
command to generate files, which quickly occupies all dirty mem-
ory, reaching the memory dirty ratio limit. As a result, all writes
from the host-machine or the victim-container are converted to
write-through, which dramatically downgrades the performance.
In our experiments, the performance of command dd if=/dev/zero
of=/mnt/test bs=1M count=1024 on the victim-container drops from
1.2 GB/s to 32.6 MB/s due to the attack, resulting in 97.3% slow down.
Besides, even the privileged root user on the host-machine also has
a 96.1% performance downgrade.
Note that the currently Linux kernel has no namespaces related
to memory management, and memory control groups are used to
limit the memory usage instead of the memory dirty ratio. There-
fore, it cannot defend against the attacks on memory dirty ratio.
3.4 Attacks on Storage Management
The operating system kernel abstracts the disk or other secondary
storage as the file and introduces various file-related abstract re-
sources. In fact, the storage management in the Linux kernel is
complicated, which involves thousands of functions and data struc-
tures. In our experiment, we find that 133 storage-related abstract
resources are reachable from container processes. Unfortunately,
the kernel does not provide any namespaces or control groups to
isolate or restrict the usage of these abstract resources. As a re-
sult, the attacker-container can exhaust these abstract resources to
launch DoS attacks against other containers on the shared kernel.
Next, we illustrate how a malicious container can exploit the file
limit variable nr_files for the DoS attacks.
3.4.1 Attacking nr_files. As mentioned in §3.1, nr_files is a global
variable in the Linux kernel, which counts the total number of
opened files in the kernel. More specifically, for each allocated
struct file, the kernel increases nr_files by one, as shown in
lines 17-19 of Figure 1. Unfortunately, nr_files is shared among all
processes. It is neither isolated by namespaces nor restricted by any
control groups. As a result, the attacker-container can easily exhaust
nr_files to achieve DoS attacks. To verify the feasibility of this
attack, our attack-container spawns hundreds of processes, each of
which opens 1,024 files. Consequently, nr_files reaches its limit.
As a result, on both the host-machine and the victim-container, all
file-open operations fail, and the kernel issues a warning of “Too