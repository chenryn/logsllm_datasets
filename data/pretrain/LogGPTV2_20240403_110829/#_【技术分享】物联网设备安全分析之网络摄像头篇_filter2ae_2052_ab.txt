### 文本优化

#### 登录凭证与用户权限
BusyBox v1.13.4 (2015-02-25 18:14:22 CST) 内置的shell（ash）显示了以下信息：
```
# cat /etc/passwd
admin:$1$yAn92Ld/$u5nHFH9nLds0naDaLuK1d/:0:0:System Administrator,,,:/:/bin/sh
```
Telnet登录凭证与Web界面的凭证相同，均为用户名 `admin` 和密码 `1234`。从 `/etc/passwd` 文件中可以看出，系统中只有一个用户 `admin`，其具有超级用户权限（UID和GID均为0）。因此，我们已经获得了root访问权限。

#### UART端口通信
值得注意的是，我们还可以通过UART端口获取系统的shell访问权限。下图展示了该端口的位置（引脚已移除并直接焊接在电路板上）。为了与UART端口进行通信，可以使用JTAGulator等独立设备。在获得系统访问权限后，我们可以部署相应的工具来分析摄像头。

#### 第三步：搭建安全测试环境
实际上，这个摄像头提供了一些有助于分析运行进程的工具，但遗憾的是，它没有提供调试器或编译器。我们的目标是在这台设备上运行调试器，具体来说，是希望在x86机器上本地运行gdb，并在摄像头设备上运行gdbserver。

在摄像头设备上运行gdbserver（而不是完整的gdb）有以下几个优点：
1. **资源占用**：gdbserver的二进制文件大小远小于完整的gdb，这对于磁盘空间有限的嵌入式设备尤为重要。
2. **依赖项较少**：gdbserver的依赖项比gdb少，更容易交叉编译。

当然，这种方法也存在一些缺点，例如如果主机系统和目标系统的寄存器大小不同，可能会出现兼容性问题。这也是为什么我选择在x86机器上运行gdb的原因。

要将二进制文件安装到摄像头上，我们需要能够在摄像头上轻松地写入和读取文件。为此，可以使用 `wget` 将文件写入 `/var` 目录（尽管squashfs文件系统是只读的，但 `/var` 是可写的），并通过启动另一个实例的lighttpd Web服务器从摄像头下载文件。

#### 处理器信息与交叉编译
接下来，我们需要了解摄像头所使用的处理器类型。通过查看 `/proc/cpuinfo` 文件，可以看到以下信息：
```
system type             : RTL819xD
processor               : 0
cpu model               : 56322
BogoMIPS                : 658.63
tlb_entries             : 32
mips16 implemented      : yes
```
由此可知，摄像头使用的是基于MIPS架构的RTL819xD处理器。因此，我们可以尝试使用标准的MIPS交叉编译器。然而，由于Realtek CPU使用了修改版的指令集，普通的MIPS二进制文件通常无法在该摄像头上运行。幸运的是，Edimax提供了针对其设备的工具链。借助CentOS 7.3和厂商提供的工具链，我们可以为该摄像头构建一个开发环境。具体的步骤如下：
1. 进入目标目录：`cd TARGET_DIR`
2. 解压工具链文件：`bzip2 -cd rsdk-{VERSION}-{LIBRARY}-{PLATFORM}.tar.bz2 | tar xvf –`
3. 创建符号链接：`ln -s rsdk-{VERSION}/{PLATFORM}/{LIBRARY} rsdk`
4. 设置环境变量：`export PATH=TARGET_DIR/rsdk/bin:$PATH`

使用CentOS系统，我们可以交叉编译适用于摄像头的二进制文件。例如，编译gdbserver的命令如下：
```bash
$ cd gdbserver_src
$ ./configure --host=mips-linux CC=rsdk-linux-gcc
$ ./make CC=rsdk-linux-gcc AS=rsdk-linux-as LD=rsdk-linux-ld
```
通过设置环境变量 `CC`、`AS` 和 `LD`，可以指定编译器、汇编器和加载器。最终，我们将得到一个可以在网络摄像头上运行的gdbserver二进制文件。

对于gdb，构建链中已经提供了预编译好的x86版本，可以直接使用。如果你需要从头开始创建gdb二进制文件，则需要指定不同的配置参数：
```bash
$ cd gdb_src
$ ./configure --target=mips-linux
$ ./make
```
在这个过程中，必须指定目标系统（即将运行gdbserver的系统）。经过测试，发现gdb-6.8版本能够用于该摄像头。

#### 使用gdb/gdbserver进行分析
最后，我们将介绍如何利用上述配置的gdb/gdbserver来分析摄像头上的二进制文件。首先，将gdbserver二进制文件复制到摄像头的 `/var` 目录，并使其可执行。然后，使用以下命令让gdbserver连接到进程：
```bash
# /var/gdbserver ip:port --attach pid
```
其中，`ip` 是运行gdb的主机系统的地址，`port` 是在目标系统上打开的端口，`pid` 是要连接的进程ID。也可以通过提供可执行文件路径而不是 `--attach` 参数，在摄像头设备上启动一个新的进程。

作为示例，我们将连接到正在运行的 `/bin/ipcam` 二进制文件：
```bash
# /var/gdbserver 192.168.2.10:1234 --attach 9266
Attached; pid = 9266
Listening on port 1234
```
执行该命令后，gdbserver将在指定的端口上等待传入连接。在x86主机上，启动gdb并连接到目标系统：
```bash
$ rsdk-mips-gdb -q
(gdb) target remote 192.168.2.3:1234 
Remote debugging using 192.168.2.3:1234
[New Thread 9266]
0x2ab6b89c in ?? ()
(gdb)
```
此时，gdb并没有函数上下文，因为它还没有加载目标二进制文件的符号表。我们需要在gdb中使用 `file` 命令加载符号表。此外，为了调试库调用，还需要在本地保存一份摄像头文件系统的副本，并从根目录运行gdb。
```bash
$ cd cam_root_dir
$ rsdk-mips-gdb -q
(gdb) file cam_root_dir/bin/ipcam
Reading symbols from cam_root_dir/bin/ipcam...(no debugging symbols found)...done.
(gdb) target remote 192.168.2.3:1234 
Remote debugging using 192.168.2.3:1234
[New Thread 9266]
0x2aaa8a40 in _start() from cam_root_dir/lib/ld-uClibc.so.0
(gdb)
```
现在，你可以像在摄像头上本地运行gdb一样进行调试（如设置断点、分析寄存器等）。我们现在已经拥有一个通用的环境，可以对摄像头设备上运行的各种服务进行深入分析。

#### 漏洞报告与防护措施
正如我在帖子开头提到的，这里发现的漏洞已经报告给供应商。然而，截至今天，固件仍未更新。因此，我们必须采取其他措施来防止潜在的攻击。例如，可以通过防火墙限制对 `anonymous.cgi`、`getSysteminfo.cgi` 和 `supportiPhoneAppVersion.cgi` 的访问，以防止信息泄露。当然，人们仍可以通过上述方法获得系统访问权限，并根据需要重新配置摄像头设备。

对于Web接口认证区域的远程代码执行问题，必须确保对该区域的访问进行严格限制。首先，应更改摄像头的默认凭证。此外，如果不需要通过互联网访问Web界面，应禁用该项功能。

#### 传送门
* * *
[【技术分享】智能家居设备安全分析手记](http://bobao.360.cn/learning/detail/3270.html)