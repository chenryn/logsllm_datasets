digoal=# select pg_terminate_backend(12396);  
 pg_terminate_backend   
----------------------  
 t  
(1 row)  
digoal=# select * from lockview1 where relname='test';  
  pid  |    vxid    | lock_type |    lock_mode     | granted | xid_lock | relname   
-------+------------+-----------+------------------+---------+----------+---------  
 21011 | 234/100082 | relation  | RowExclusiveLock | t       |          | test  
 21011 | 234/100082 | tuple     | ExclusiveLock    | t       |          | test  
 27207 | 236/256259 | relation  | RowExclusiveLock | t       |          | test  
(3 rows)  
```  
此时21011获得了tuple exclusivelock, 而27207还未获得, 它在等21011释放.  
KILL 21011即可.  
```  
digoal=# select pg_terminate_backend(21011);  
```  
## 小结  
1\. 程序BUG可能带来持有锁, 但是不释放的问题. 例如持有锁后啥都不干, 也不结束事务, 也就是pg_stat_activity.current_query看到的IDLE in transaction.  
\所以数据库的锁等待超时监控显得尤为重要.  
2\. 由于集中监控, 可能因为网络的延时导致执行时间过长, nagios有超时机制, 容易导致不稳定.  
可以考虑将监控放到crontab中, nagios调用的脚本通过检测输出日志. 分出如下两部分 :   
crontab执行脚本 :   
```  
#!/bin/bash  
# 环境变量  
export LANG=en_US.utf8  
export PGHOME=/opt/pgsql  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
export PGPASSFILE=/etc/.pgpass  
create_func() {  
VER=`psql -q -t $CONN_INFO -c "select '9' from (select substr(version(),12,1) as ver) t where ver::int>=9"|grep -c 9`  
if [ $VER -ge 1 ]; then  
  IS_STDBY=`psql -q -t $CONN_INFO -c "select 'this_is_standby' as a where pg_is_in_recovery();"|grep -c this_is_standby`  
  if [ $IS_STDBY -ge 1 ]; then  
    return 0  
  fi  
fi  
#DEBUG switch  
#echo $CONN_INFO  
psql -q -t $CONN_INFO = '9.2' then  
    for v_datname,v_usename,v_client_addr,v_client_port,v_query_start,v_current_query in   
      select datname,usename,client_addr,client_port,query_start,query from pg_stat_activity where waiting and now()-query_start > i_lockwait  
    loop  
      raise notice 'dbip:%, dbport:%, datname:%, usename:%, client_addr:%, client_port:%, query_start:%, current_query:%'  
      ,v_dbip,v_dbport,v_datname,v_usename,v_client_addr,v_client_port,v_query_start,v_current_query;  
    end loop;  
    return;  
  else  
    for v_datname,v_usename,v_client_addr,v_client_port,v_query_start,v_current_query in   
      select datname,usename,client_addr,client_port,query_start,current_query from pg_stat_activity where waiting and now()-query_start > i_lockwait  
    loop  
      raise notice 'dbip:%, dbport:%, datname:%, usename:%, client_addr:%, client_port:%, query_start:%, current_query:%'  
      ,v_dbip,v_dbport,v_datname,v_usename,v_client_addr,v_client_port,v_query_start,v_current_query;  
    end loop;  
    return;  
  end if;  
  return;  
end;  
\$\$ language plpgsql;  
EOF  
}  
mon() {  
VER=`psql -q -t $CONN_INFO -c "select '9' from (select substr(version(),12,1) as ver) t where ver::int>=9"|grep -c 9`  
if [ $VER -ge 1 ]; then  
  IS_STDBY=`psql -q -t $CONN_INFO -c "select 'this_is_standby' as a where pg_is_in_recovery();"|grep -c this_is_standby`  
  if [ $IS_STDBY -ge 1 ]; then  
    return 0  
  fi  
fi  
#DEBUG switch  
#echo $CONN_INFO  
psql -q -t $CONN_INFO -c "$SQL"  
}  
# global result  
result=0  
# set env  
. /usr/local/nagios/etc/check_pg_env.sh  
# monitor  
LOGFILE="/tmp/check_pg_lock.log"  
TMPLOGFILE="/tmp/check_pg_lock.log.tmp"  
SQL="select lock_wait(interval '5 second')"  
# 清除临时日志数据  
echo "" >$TMPLOGFILE  
for i in "HZ1_CHECK_PG_LOCK_DIGOAL" "HZ2_CHECK_PG_LOCK_DIGOAL"  
do  
  eval CONN_INFO="$"$i  
  create_func  
  cnt=`mon 2>&1|grep -c -E "NOTICE|ERROR"`  
  if [ $cnt -ge 1 ]; then  
    result=2  
    mon >>$TMPLOGFILE 2>&1  
  fi  
done  
echo -e "return 2" >>$TMPLOGFILE 2>&1  
# 替换数据  
cat $TMPLOGFILE >$LOGFILE  
# exit global proc  
exit $result  
```  
nagios脚本 :   
```  
#!/bin/bash  
# 环境变量  
export LANG=en_US.utf8  
export PGHOME=/opt/pgsql  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib  
export DATE=`date +"%Y%m%d%H%M"`  
export PATH=$PGHOME/bin:$PATH:.  
export MANPATH=$PGHOME/share/man:$MANPATH  
LOGFILE=/tmp/check_pg_lock.log  
CNT=`cat $LOGFILE|grep -c -E "NOTICE|ERROR"`  
if [ $CNT -ge 1 ]; then  
    # summary  
    echo -e "ERROR: SQL lock timeout."  
    cat $LOGFILE|grep -v "^\$"|awk '{print $2}'|uniq -c  
    # detail  
    echo -e "\nDETAIL:"  
    cat $LOGFILE|grep -v "^\$"  
    exit 2  
fi  
exit 0  
```  
## 其他  
1\. 现成的监控脚本可以参考bucardo的check_postgres.pl  
支持nagios, mrtg, cacti等  
http://bucardo.org/wiki/Check_postgres  
2\. csvlog监控  
http://blog.163.com/digoal@126/blog/static/163877040201312241028667/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")