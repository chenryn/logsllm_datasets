title:Privacy and robustness for data aggregation in wireless sensor networks
author:Marian Kamal Iskander and
Adam J. Lee and
Daniel Moss&apos;e
Privacy and Robustness for Data Aggregation in Wireless
Sensor Networks
Marian K. Iskander, Adam J. Lee and Daniel Mossé
Deptartment of Computer Science, University of Pittsburgh
{marianky,adamlee,mosse}@cs.pitt.edu
Categories and Subject Descriptors
C.2.4 [Distributed Systems]: Distributed applications
; K.6.5 [Management of Computing and Information
Systems]: Security and Protection
General Terms
Security
Keywords
Fault tolerance, privacy, wireless sensor networks, in-network
aggregation
1.
INTRODUCTION
Wireless Sensor Networks (WSNs) consist of small sens-
ing and computing devices that have limited power, storage,
computation, and network bandwidth capabilities. Queries
to the sensor nodes are injected into the network by a data
sink node. The simplest way to respond to a query is for each
sensor node to individually report back its reading to the
sink, at which point all of the readings are processed. This
unicast delivery requires that intermediate sensors route all
such packets to the sink, which can lead to excessive energy
consumption due to the large number of individual responses
that need to be transmitted.
In-network data aggregation improves the energy eﬃciency
of this process by allowing each node along the routing path
to aggregate all values received from its children into a sin-
gle response value. This avoids the excessive communication
required to route individual sensor readings to the data sink.
In-network aggregation paths can typically be classiﬁed into
one of two categories:
tree-based or multipath-based. The
tree-based approach provides the minimal communication
overhead by constructing a spanning tree across all sensor
nodes to facilitate routing. However, a single link failure
in this model leads to the loss of all data from the subtree
connected by that link. Given that WSNs are characterized
by high rates of communication failures, this approach can
lead to large errors in the average case. Multipath-based
approaches add robustness to the traditional tree structure
by taking advantage of the broadcast medium, but must be
carried out carefully to avoid overcounting when computing
the aggregate value.
In addition to considering the robustness of the aggrega-
tion process, many applications (e.g., battleﬁeld surveillance
Copyright is held by the author/owner(s).
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
ACM 978-1-4503-0244-9/10/10.
and tracking) require that the conﬁdentiality of individual
sensor readings be preserved. Without such a guarantee,
adversaries within the proximity of the network could inﬁl-
trate the network, eavesdrop, and gain useful information.
Unfortunately, existing mechanisms for carrying out conﬁ-
dential in-network aggregation either require the use of ex-
pensive cryptographic primitives that are unsuitable for use
in resource-limited sensor environments (e.g., [6, 7]), or as-
sume perfectly reliable communication links (e.g., [2, 5]).
In this poster, we develop a protocol for reliably carry-
ing out in-network aggregation in sensor networks exhibit-
ing link failures while also maintaining the end-to-end con-
ﬁdentiality of individual sensor readings. Our protocol uses
a lightweight homomorphic cryptosystem [3] to enable the
in-network aggregation of encrypted values while imposing
small computational overhead on individual sensors. This
aggregation takes place by extending the RideSharing multi-
path aggregation protocol [4] to maintain additional meta-
data that allows the sink node to recover the key needed to
decrypt the hidden aggregate value.
2. PRIVACY AND FAULT TOLERANCE PRO-
TOCOL
In this section, we ﬁrst describe the network and attacker
models assumed in this poster, then we brieﬂy discuss the
models and building blocks used. Finally we present our
new protocol.
2.1 Network and Attack Model
We assume a multi-hop network that consists of n sensor
nodes and a single trusted sink node. Each sensor node has a
unique identiﬁer ID and shares a unique symmetric key with
the sink. These keys are assumed to be pre-shared at deploy-
ment time. Sensor nodes are small, battery-operated devices
capable of performing simple computations and broadcast
communications. The data sink, on the other hand, is a
more capable node with higher computational and storage
capabilities.
In this poster, we are concerned mostly about the pri-
vacy of the sensor readings. We assume a network of two
types of attackers: (a) Honest but curious sensors that cor-
rectly perform the in-network aggregation process, but wish
to learn information about the readings of other sensors if
at all possible; this is representative of sensor deployments
in which individual sensors may become compromised, but
continue to function in a seemingly correct manner in order
to gather information about the state of the larger network.
(b) Quiet inﬁltrators that are able to stealthily inﬁltrate the
network, eavesdrop, and either accumulate the information
699gathered or send the information in an undetected way. We
assume that an adversary can control any arbitrary number
of (colluding) attacker sensor nodes, and can eavesdrop on
all communication channels. The sink node is assumed to
remain uncompromised.
2.2 Building Blocks
Our privacy preserving scheme makes use of the sym-
metric key, additively homomorphic stream cipher proposed
in [3]. In this cryptosystem, a keyed pseudo-random gener-
ator is used to eﬀectively generate per-user keystreams that
are used to encipher sensor readings stored as integer val-
ues. For example, a sensor node sharing a key k with the
sink and using pseudo-random generator g can encrypt its
jth reading, vj as follows:
cj = vj + gj(k) mod M
The sink can then recover the value vj as follows:
vj = cj − gj(k) mod M
A key feature of this cryptosystem is its ability to homomor-
phically combine values that are encrypted under the same
or diﬀerent keys.
As for our robustness model, we have adopted the Cas-
caded RideSharing [4] fault tolerance scheme for duplicate
sensitive functions. Cascaded RideSharing exploits the re-
dundancy in the wireless medium to detect and correct com-
munication link failures. To accomplish this, the sensor net-
work is organized into a track graph topology.
In such a
topology, sensor nodes are organized in tracks, with the sink
residing in track 0, sensors one hop away from the sink are
in track 1, and so forth. The aggregation path then forms
a DAG in which each node has access to multiple paths
through the track graph, rather than a simple spanning tree.
Each sensor node has one primary parent and one or more
backup parents in the adjacent track (towards the sink). Pri-
mary parents form a spanning tree that is used in case of
error-free operations, while backup parents help compensate
for errors in the primary links.
In the RideSharing model, every sensor node transmits
its reading to its primary parent according to a predeﬁned
TDMA schedule. If the primary parent does not receive any
data from a child node in its predetermined time slot, it
eventually raises a signal to its neighbors indicating that it
did not hear any values from a speciﬁc child. In that case,
backup parents take the responsibility of aggregating the
missing value. Cascaded RideSharing can be thought of as
token delegation in which the primary parent initially holds
the token and delegates the token in case it does not receive
data from a speciﬁc child to the next backup parent.
For error detection and correction purposes, each parent
maintains a small bit vector L that has two bits for each
child: r-bit (retransmitted bit) and e-bit (error bit). As long
as no error occurs on the primary edge, the primary parent
receives the values of its child, aggregates it, and sets the
corresponding r-bit in the L vector for this child to ‘1’. If an
error occurs on the primary edge, the primary parent sets the
e-bit to ‘1’ indicating a missing value from this child. Every
parent attaches its bit vector to each message it sends. Other
(backup) parents within the same track can overhear this L
vector and decide whether to take any corrective action by
examining the r- and e-bits.
2.3 Protocol Details
At a high level, our approach to providing fault-tolerant
and privacy-preserving in-network aggregation works by adding
the necessary elements to combine Cascaded RideSharing
with the additively-homomorphic stream cipher described
in [3].
In the event that the readings of all sensor nodes
are included in the ﬁnal aggregate value, combining these
algorithms is simple: (i) each sensor ni encrypts its value vi
as ci = vi + gi(ki) mod M ; (ii) the resulting ci values are
aggregated using the Cascaded RideSharing protocol, which
results in the sink receiving the value C =
i ci mod M ;
(iii) the sink then computes the aggregate key value K =
i gi(ki) mod M ; and (iv) the sink extracts the ﬁnal aggre-
P
P
P
gate value V =
i vi = C − K mod M .
Unfortunately, it is rarely the case that all sensor nodes
will contribute readings to an aggregate computation. This