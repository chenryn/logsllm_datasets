# 四、在 Kubernetes 中运用最小权限原则
最低权限原则规定，生态系统的每个组成部分都应该有最低限度的数据和资源访问权限，才能正常运行。在多租户环境中，不同的用户或对象可以访问多个资源。最小权限原则确保了如果用户或对象在这种环境中行为不检，对集群的损害最小。
在本章中，我们将首先介绍最小权限原则。鉴于 Kubernetes 的复杂性，我们将首先研究 Kubernetes 主题，然后研究主题可用的权限。然后，我们将讨论 Kubernetes 对象的权限以及限制它们的可能方法。本章的目标是帮助您理解几个关键概念，例如最小权限原则和**基于角色的访问控制** ( **RBAC** )。在本章中，我们将讨论不同的 Kubernetes 对象，例如名称空间、服务帐户、角色和角色绑定，以及 Kubernetes 安全特性，例如安全上下文、PodSecurityPolicy 和 NetworkPolicy，它们可以用来实现 Kubernetes 集群的最小权限原则。
在本章中，我们将涵盖以下主题:
*   最小权限原则
*   Kubernetes 臣民的最低权限
*   Kubernetes 工作负载的最低权限
# 最小权限原则
权限是执行某项操作的权限，如访问资源或处理某些数据。最小权限原则是指任何主体、用户、程序、进程等都应该只有执行其功能所需的最小权限。例如，爱丽丝，一个普通的 Linux 用户，能够在自己的主目录下创建一个文件。换句话说，Alice 至少有权限在自己的主目录下创建一个文件。但是，Alice 可能无法在另一个用户的目录下创建文件，因为她没有这样做的权限。如果 Alice 的日常任务实际上都没有在主目录中创建文件的权限，但是她确实有这样做的权限，那么机器的管理员就没有遵守最小权限原则。在本节中，我们将首先介绍授权模型的概念，最小权限的概念就是从该模型中衍生出来的，然后，我们将讨论实施最小权限原则的好处。
## 授权模型
当我们谈论最少权限的时候，大部分时间都是在授权的语境下谈论，在不同的环境下，会有不同的授权模型。以为例，**访问控制列表** ( **ACL** )被广泛用于 Linux 和网络防火墙，而 RBAC 则被用于数据库系统。环境管理员还需要定义授权策略，以确保基于系统中可用授权模型的最低权限。下面的列表定义了一些流行的授权模型:
*   **ACL**:ACL 定义了与对象相关联的权限列表。它规定了哪些主体被授予对对象的访问权限，以及在给定对象上允许哪些操作。例如，`-rw`文件权限是文件所有者的只读-写权限。
*   **RBAC** :授权决定基于主体的角色，其中包含一组权限或权限。例如，在 Linux 中，用户被添加到不同的组(如`staff`)中，以授予对某些文件夹的访问权限，而不是单独授予对文件系统上文件夹的访问权限。
*   **基于属性的访问控制(ABAC)** :授权决定基于主体的属性，例如标签或属性。基于属性的规则检查用户属性，如`user.id="12345"`、`user.project="project"`和`user.status="active"`，以决定用户是否能够执行任务。
Kubernetes 支持 ABAC 和 RBAC。虽然 ABAC 功能强大且灵活，但是在 Kubernetes 中的实现使得它很难管理和理解。因此，建议在 Kubernetes 启用 RBAC，而不是 ABAC。除了 RBAC，Kubernetes 还提供了多种限制资源访问的方法。在接下来的章节中，在我们研究 Kubernetes 的 RBAC 和 ABAC 之前，让我们讨论一下确保最低权限的好处。
## 最低权限原则的奖励
虽然理解受试者执行其功能的最低权限可能需要相当长的时间，但如果在您的环境中实施了最低权限原则，则回报也是显著的:
*   **更好的安全性**:内部威胁、恶意软件传播、横向移动等都可以通过实施最小权限原则来缓解。爱德华·斯诺登的泄密是因为缺乏最起码的权限。
*   **更好的稳定性**:鉴于的臣民只被适当地授予必要的权限，臣民的活动变得更加可预测。作为回报，系统的稳定性得到了加强。
*   **提高审核准备度**:如果只适当授予主体必要的权限，审核范围将大幅缩小。此外，许多共同法规要求实施最低权限原则作为合规要求。
既然您已经看到了实现最小权限原则的好处，我也想介绍一下挑战:Kubernetes 的开放性和可配置性使得实现最小权限原则变得很麻烦。让我们来看看如何将最小权限原则应用于 Kubernets 科目。
# Kubernetes 人的最低权限
Kubernetes 服务帐户、用户和组与`kube-apiserver`通信以管理 Kubernetes 对象。启用 RBAC 后，不同的用户或服务帐户可能拥有不同的权限来操作 Kubernetes 对象。例如，`system:master`组中的用户被授予了`cluster-admin`角色，这意味着他们可以管理整个 Kubernetes 集群，而`system:kube-proxy`组中的用户只能访问`kube-proxy`组件所需的资源。首先，让我们简单谈谈 RBAC 是什么。
## RBAC 简介
如前所述，RBAC 是一个基于授予用户或组的角色来管理资源访问的模型。从 1.6 版本开始，默认情况下在 Kubernetes 中启用 RBAC。在 1.6 版本之前，RBAC 可以通过运行带有`--authorization-mode=RBAC`标志的**应用编程接口** ( **应用编程接口**)服务器来启用。RBAC 使用 API 服务器简化了权限策略的动态配置。
RBAC 的核心要素包括以下内容:
1.  **主题**:服务请求访问 Kubernetes 应用编程接口的帐户、用户或组。
2.  **资源**:Kubernetes 需要被主体访问的对象。
3.  **动词**:主题需要对资源进行不同的类型的访问，例如，创建、更新、列出、删除。
Kubernetes·RBAC 定义了 Kubernetes 生态系统中的主体和他们对不同资源的访问类型。
## 服务帐户、用户和组
Kubernetes 支持三种类型的主题，如下所示:
*   **常规用户**:这些用户是集群管理员创建的。它们在 Kubernetes 生态系统中没有相应的对象。集群管理员通常使用**轻量级目录访问协议** ( **LDAP** )、**活动目录** ( **AD** )或私钥来创建用户。
*   **服务帐户** : Pods 使用服务帐户向`kube-apiserver`对象进行身份验证。使用应用编程接口调用创建服务帐户。它们仅限于名称空间，并且具有存储为`secrets`的相关凭证。默认情况下，pods 认证为`default`服务帐户。
*   **匿名用户**:任何不与常规或服务帐户相关联的 API 请求都与匿名用户相关联。
群集管理员可以通过运行以下命令来创建与 pods 关联的新服务帐户:
```
$ kubectl create serviceaccount new_account
```
将在默认命名空间中创建一个`new_account`服务帐户。为了确保最低权限，集群管理员应该将每个 Kubernetes 资源与具有最低操作权限的服务帐户相关联。
## 角色
角色是权限的集合——例如，名称空间 A 中的角色可以允许用户在名称空间 A 中创建 pods，并在名称空间 A 中列出机密。在 Kubernetes 中，没有拒绝权限。因此，角色是一组权限的添加。
角色仅限于命名空间。另一方面，集群角色在集群级别工作。用户可以创建一个跨整个集群的集群角色。集群角色可用于调解对跨集群的资源的访问，如节点、运行状况检查和命名空间对象，如跨多个命名空间的 pods。下面是一个角色定义的简单示例:
```
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: role-1
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]
```
这个简单的规则允许`get`操作在默认命名空间中过度使用`pods`。通过执行以下命令，可以使用`kubectl`创建该角色:
```
$ kubectl apply -f role.yaml
```
只有满足以下任一条件，用户才能创建或修改角色:
*   用户在同一范围内(命名空间或集群范围)拥有角色中包含的所有权限。
*   用户与给定范围内的升级角色相关联。
这可以防止用户通过修改用户角色和权限来执行权限提升攻击。
## 卷接