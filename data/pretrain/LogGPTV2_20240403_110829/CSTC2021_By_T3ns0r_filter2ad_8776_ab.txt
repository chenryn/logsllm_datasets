    print()
    print("     *************************************")
    print("     *    (1)encode         (2)decode    *")
    print("     *************************************")
    print()
    num = input("Please select the operation you want to perform:\n")
    if (num == "1"):
        input_str = input("Please enter a string that needs to be encrypted: \n")
        My_base64_encode(input_str)
    else:
        input_str = input("Please enter a string that needs to be decrypted: \n")
        My_base64_decode(input_str)
直接出了hh
###  free_flag
先看看主函数：ID直接给了，11337，然后需要一个Pin（就是flag），关键函数是checkpin
跟进看checkpin函数，就是个简单的异或0xC,密文也给出来了
####  exp
###  crackme
看到主要逻辑函数，静态分析：大概逻辑就是用`crackme`的前5位即`crack`做一下变换（如下注释），得到一个10字节的表，再利用这个表做一些加密变换得到最终的目标serial
    LRESULT __stdcall sub_401109(HWND hWndParent, UINT Msg, WPARAM wParam, LPARAM lParam)
    {
      int v4; // ebx
      int v5; // eax
      char v6; // al
      char v7; // al
      int v8; // edx
      char v9; // cl
      int v10; // edx
      char v11; // al
      char v12; // cl
      __int16 v13; // ax
      int i; // ecx
      CHAR serial_i; // bl
      char v16; // dl
      char v17; // dl
      switch ( Msg )
      {
        case 2u:
          PostQuitMessage(0);
          break;
        case 1u:
          CreateWindowExA(0x200u, aEdit, 0, 0x50800080u, 15, 15, 255, 25, hWndParent, (HMENU)2, hInstance, 0);
          dword_403134 = SetDlgItemTextA(hWndParent, 2, String);
          CreateWindowExA(0x200u, aEdit, 0, 0x50800080u, 15, 50, 255, 25, hWndParent, (HMENU)4, hInstance, 0);
          dword_403134 = SetDlgItemTextA(hWndParent, 4, aEnterSerial);
          dword_403138 = (int)CreateWindowExA(
                                0x200u,
                                aButton,
                                aTry,
                                0x50800000u,
                                15,
                                85,
                                255,
                                25,
                                hWndParent,
                                (HMENU)3,
                                hInstance,
                                0);
          v4 = (unsigned int)(GetSystemMetrics(0) - 290) >> 1;
          v5 = GetSystemMetrics(1);
          SetWindowPos(hWndParent, 0, v4, (unsigned int)(v5 - 150) >> 1, 290, 150, 0x40u);
          break;
        case 273u:
          if ( wParam == 3 )
          {
            v6 = GetDlgItemTextA(hWndParent, 2, table, 40);
            if ( v6 )
            {
              if ( v6 > 32 )
              {
                MessageBoxA(0, aNameCanBeMax32, aSorry, 0);
              }
              else if ( v6  90 )
                    v9 = v7 + 82;                   // 非大写字母 +82
                  name[v8] = v9;
                  byte_40313D[v8] = 0;
                  LOBYTE(v8) = v8 + 1;
                  --v7;
                }
                while ( v7 );
                v10 = 0;
                v11 = 5;
                do
                {
                  v12 = v11 + (table[v10] ^ 0x27) + 1;// (text[i] ^ 0x27) +1
                  if ( v12  90 )
                    v12 = v11 + 77;                 // 非大写字母 +77
                  byte_403141[v10] = v12;
                  byte_403142[v10] = 0;
                  LOBYTE(v10) = v10 + 1;
                  --v11;
                }
                while ( v11 );
                v13 = GetDlgItemTextA(hWndParent, 4, serial, 40);
                if ( v13 && v13 = 10 )
                {
                  i = 0;
                  while ( 1 )
                  {
                    serial_i = serial[i];
                    if ( !serial_i )
                      break;
                    v16 = name[i] + 5;
                    if ( v16 > 0x5A )
                      v16 = name[i] - 8;
                    v17 = v16 ^ 0xC;
                    if ( v17  0x5A )
                    {
                      v17 = 75 - i;
                    }
                    ++i;
                    if ( v17 != serial_i )
                      goto LABEL_35;
                  }
                  MessageBoxA(0, aSerialIsCorrec, aGoodCracker, 0);
                }
                else
                {
    LABEL_35:
                  MessageBoxA(0, Text, Caption, 0);
                }
              }
            }
            else
            {
              MessageBoxA(0, aEnterName_0, aSorry, 0);
            }
          }
          break;
        default:
          return DefWindowProcA(hWndParent, Msg, wParam, lParam);
      }
      return 0;
    }
####  exp
    name = 'crack'
    flag=''
    n=5
    for i in range(5):
        ch = n+ (ord(name[i]) ^ 0x29)
        if ch90:
            ch += 82
        flag += chr(ch)
        n -= 1
    n=5
    for i in range(5):
        ch = n + (ord(name[i]) ^ 0x27) + 1
        if ch90:
            ch += 77
        flag += chr(ch)
        n -= 1
    for i in flag:
        print(ord(i))
    for i in range(10):
        tmp=ord(flag[i]) +5
        if tmp > 90:
            tmp = ord(flag[i]) - 8
        tmp ^= 0xc
        if tmp 90:
            tmp = 75-i
        print(chr(tmp),end='')
    print()
输出结果为：
    79
    177
    75
    76
    67
    74
    90
    74
    71
    78
    XJIHDCECSB
得到的serial第2个字节很怪，XJIHDCECSB输入进去也不对，就动调得到第二位的结果 ’B‘
其他位都没错，所以最终结果是：`XBIHDCECSB`
###  Maze
迷宫题无疑，先看主函数
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      __int64 v3; // rax
      int v5[52]; // [rsp+0h] [rbp-270h] BYREF
      int v6[52]; // [rsp+D0h] [rbp-1A0h] BYREF
      int v7[7]; // [rsp+1A0h] [rbp-D0h] BYREF
      int v8; // [rsp+1BCh] [rbp-B4h]
      int v9; // [rsp+1C0h] [rbp-B0h]
      int v10; // [rsp+1C4h] [rbp-ACh]
      int v11; // [rsp+1C8h] [rbp-A8h]
      int v12; // [rsp+1CCh] [rbp-A4h]
      int v13; // [rsp+1D0h] [rbp-A0h]
      int v14; // [rsp+1D4h] [rbp-9Ch]
      int v15; // [rsp+1D8h] [rbp-98h]
      int v16; // [rsp+1DCh] [rbp-94h]
      int v17; // [rsp+1E0h] [rbp-90h]
      int v18; // [rsp+1E4h] [rbp-8Ch]
      int v19; // [rsp+1E8h] [rbp-88h]
      int v20; // [rsp+1ECh] [rbp-84h]
      int v21; // [rsp+1F0h] [rbp-80h]
      int v22; // [rsp+1F4h] [rbp-7Ch]
      int v23; // [rsp+1F8h] [rbp-78h]
      int v24; // [rsp+1FCh] [rbp-74h]
      int v25; // [rsp+200h] [rbp-70h]
      int v26; // [rsp+204h] [rbp-6Ch]
      int v27; // [rsp+208h] [rbp-68h]
      int v28; // [rsp+20Ch] [rbp-64h]
      int v29; // [rsp+210h] [rbp-60h]
      int v30; // [rsp+214h] [rbp-5Ch]
      int v31; // [rsp+218h] [rbp-58h]
      int v32; // [rsp+21Ch] [rbp-54h]
      int v33; // [rsp+220h] [rbp-50h]
      int v34; // [rsp+224h] [rbp-4Ch]
      int v35; // [rsp+228h] [rbp-48h]
      int v36; // [rsp+22Ch] [rbp-44h]
      int v37; // [rsp+230h] [rbp-40h]
      int v38; // [rsp+234h] [rbp-3Ch]
      int v39; // [rsp+238h] [rbp-38h]
      int v40; // [rsp+23Ch] [rbp-34h]
      int v41; // [rsp+240h] [rbp-30h]
      int v42; // [rsp+244h] [rbp-2Ch]
      int v43; // [rsp+248h] [rbp-28h]
      int v44; // [rsp+24Ch] [rbp-24h]
      int v45; // [rsp+250h] [rbp-20h]
      int v46; // [rsp+254h] [rbp-1Ch]
      int v47; // [rsp+258h] [rbp-18h]
      int v48; // [rsp+25Ch] [rbp-14h]
      int v49; // [rsp+260h] [rbp-10h]
      v7[0] = 1;
      v7[1] = 1;