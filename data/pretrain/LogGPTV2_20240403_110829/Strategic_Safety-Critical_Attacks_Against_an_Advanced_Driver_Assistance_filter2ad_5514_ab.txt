A. Advanced Driver Assistance Systems: OpenPilot
Fig. 1 presents the overall structure of an ADAS that
includes sensing, perception, prediction, planning, and control
units. ADAS features such as ALC and ACC rely on machine
learning (ML) to perceive the vehicle state and surrounding
environment using different sensors (e.g., camera, RADAR,
GPS) [32]. Planning and control algorithms are used to adjust
gas, brake, and steering to achieve target speed while keeping
a safe distance from other vehicles, road lanes, and objects on
the road.
OpenPilot is an alpha quality open-source ADAS that per-
forms the functions of ALC and ACC for over 150 supported
car makes and models, including Honda, Toyota, Hyundai,
Nissan, Kia, Chrysler, Lexus, Acura, Audi, and VW [13].
In the past six years, over 1,500 monthly active users have
collectively driven more than 40 million autonomous miles
using OpenPilot. User driving data (e.g., camera, CAN, GPS,
operating system logs) are collected by Comma.ai [33] and
are used to train and test machine learning models.
Safety Mechanisms: OpenPilot is designed as a fail-safe
passive system that requires the driver to be alert at all times.
To enforce driver alertness,
it also provides a monitoring
feature that warns (jolts) the driver when distracted.
The following safety principles (as required by international
standards, e.g., ISO 22179) are incorporated into the design of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:28:45 UTC from IEEE Xplore.  Restrictions apply. 
280
Fig. 2: Timeline of attack propagation. (ta: Attack activated; td:
Attack is detected by the ADAS or the anomaly is sensed by the
human driver; tex: Human driver starts to engage; tem: End of
mitigation; th: Hazard occurs.)
takes for any corrective actions (e.g., braking) to be completed.
This timing provides a window of opportunity for attackers to
cause hazards before being overruled by the human driver or
automated safety mechanisms. Fig. 2 shows an example where
mitigation successfully completed before the occurrence of the
hazard (tem  tsaf e ∧ RS (cid:54) 0 ∧ Speed > β1
HW T (cid:54) tsaf e ∧ RS > 0
dlef t (cid:54) 0.1m ∧ Speed > β2
dright (cid:54) 0.1m ∧ Speed > β2
u1
u2
u3
u4
* HWT: Headway Time = Relative Distance/Current Speed;
* RS: Relative Speed = Current Speed - Lead Speed;
* dlef t, dright: Distance to the left/right edge of current lane;
* u1,2,3,4: Acceleration, Deceleration, Steering Left, Steering Right.
* tsaf e ∈ [2, 3]s, β1, β2 ∈ [20, 35]mph
H1
H2
H3
H3
row 1 states that when the Headway Time is less than a safety
limit tsaf e (e.g., 2s), and the AV speed is faster than that of
the lead vehicle (RS > 0), an Acceleration control action is
unsafe as it will result in a forward collision with the lead
vehicle. This high-level
identiﬁcation of context-dependent
unsafe control actions can be done by an attacker based on
the knowledge of typical functionality of an ADAS and be
applied to any ADAS with the same functional speciﬁcation.
The unknown thresholds tsaf e, β1 and β2 can be speciﬁed
based on domain knowledge or past data [31].
Our proposed Context-Aware attack strategy uses the critical
system contexts described in Table I as the trigger for injecting
unsafe control commands [40]. To evade detection, the control
actions generated by the attack must be within the limits that
are not noticeable to a human operator and are checked by
the ADAS safety mechanisms, while minimizing the Time
to Hazard (TTH) (see Fig. 2) and maximizing the chance of
resulting in any hazards. To achieve these goals, the following
optimization problem is formulated:
minimizeT T H max{P r{xt+T T H ∈ Hazardous}}
s.t. brake ≥ limitbrake
accel (cid:54) limitaccel
∆steering  |limitbrake|), unexpected increase in acceleration
(Accel > limitaccel) or steering (Steering > limitsteer), or
the vehicle speed exceeding cruising speed by more than 10%
(Speed > 1.1vcruise). To make the attack more challenging,
anomalies that occur within one simulation time step (10ms)
attract the driver’s attention. The driver physically takes action
after 2.5 seconds (the average driver reaction time) to process
an alert or anomaly [39]).
Typically human drivers respond to sudden unintended ac-
celeration with a hard brake within 1.5 seconds. We model this
using an exponential function that approximates the general
brake curve as follows [52]:
brake = e10t−12/(1 + e10t−12)
(4)
We also apply the same reaction to sudden steering. The attack
engine stops the attack as soon as the driver engages.
C. Attack Types
For each driving scenario, we simulate six types of attacks
(see Table II) by injecting faults into each output variable as
well as their combinations. For example, for the Acceleration-
Steering attack, we inject faults to Gas and Steering Angle
(either left or right angle). We limit the injected values within
the acceptable ranges by the OpenPilot control software. Each
scenario is tested with three different initial positions for the
lead vehicle and is repeated 20 times to capture variations due
to changes in the simulated driving environment and attack
timings. This results in 60 (20 × 3) simulations per attack type
and a total number of 1,440 (60 × 6 × 4) for all simulated
attacks and driving scenarios.
D. Baselines
In addition to the Context-Aware strategy, we design three
baseline strategies to test the ADAS resilience to different at-
tacks (see Table III). The ﬁrst baseline (referred to as Random-
ST+DUR) uses a random start
time uniformly distributed
within [5, 40] seconds (5 seconds after the start of simulation
TABLE III: Overview of attack strategies
Attack Values
Fixed1
Fixed
Fixed
Strategic2
Attack Strategy
Random-ST+DUR
Random-ST
Random-DUR
Context-Aware
1 Fixed: use the maximum limit of each output command deﬁned in OpenPilot: limitsteer = 0.5◦,
limitbrake = −4m/s2, limitaccel = 2.4m/s2.
2 Strategic: dynamically choose the attack value according to Eq. 1-3 (limitsteer = 0.25◦,
limitbrake = −3.5m/s2, limitaccel = 2m/s2).
Duration
Uniform [0.5,2.5]s
2.5s
Uniform [0.5,2.5]s
Context-Aware
Start Time
Uniform [5,40]s
Uniform [5,40]s
Context-Aware
Context-Aware