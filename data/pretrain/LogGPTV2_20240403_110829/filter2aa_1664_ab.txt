5
6
4
7
Poll for
oauth tokens
client_id
device_code
User/device codes
{ "device_code": "AH-1NgM6boio...",
  "verification_url":
  "https://www.google.com/device",
  "user_code": "ZLGG-LQSP",
  "expires_in": 1800,
  "interval": 5
}
Phish
"Here's your promotional product code:
 1. Go to www.google.com/device
 2. Enter: ZLGG-LOSP"
Oauth tokens
{ "access_token": "ya29.a0ARrdaM9...",
  "refresh_token": "1//06S3lSKyEHY…",
}
Phishing Evolution: OAuth 2.0 device code authorization
+cloud app authorization protocol
Device
(client, app)
User
Azure AD
Google Identity
Identity Platform
Authenticate and Authorize
1. Goes to www.google.com/device
2. Enters: ZLGG-LOSP
3. Authenticates, including MFA
Login
1
Get user/device codes
POST 
https://login.microsoftonline.com/comm
on/oauth2/devicecode?api-version=1.0
client_id=d3590ed6-52b3-4102-aeff-aad22
92ab01c&
resource=https://outlook.office365.com
3
2
5
6
4
7
Poll for
oauth tokens
client_id
device_code
microsoft phish
XX
Use refresh token to get new access token 
for Azure
{  "refresh_token": "1//06S3lSKyEHY…",
  "scope": "openid",
  "grant_type": "refresh_token"
  "resource": "https://management.azure.com",
  "client_id": "d3590ed6-52b3-4102-aeff-aad2292ab01c",
}
Phishing Evolution: OAuth 2.0 device code authorization
+cloud app authorization protocol
Device
(client, app)
Azure AD
Google Identity
Identity Platform
9
8
microsoft phish
Access Token
{ "scope": "user_impersonation",
  "resource": "https://management.azure.com",
  "access_token": "eyJ0eXAiOiJKV1QiLCJhbG...",
  "refresh_token": "0.AUYAAknJ93kbWUyXs2…",
}
User/device codes
{ "device_code": "AH-1NgM6boio...",
  "verification_url":
  "https://www.google.com/device",
  "user_code": "ZLGG-LQSP",
  "expires_in": 1800,
  "interval": 5
}
Phish
"Here's your promotional product code:
 1. Go to www.google.com/device
 2. Enter: ZLGG-LOSP"
Oauth tokens
{ "access_token": "ya29.a0ARrdaM9...",
  "refresh_token": "1//06S3lSKyEHY…",
}
Phishing Evolution: OAuth 2.0 device code authorization
+cloud app authorization protocol
Device
(client, app)
User
Azure AD
Google Identity
Identity Platform
Authenticate and Authorize
1. Goes to www.google.com/device
2. Enters: ZLGG-LOSP
3. Authenticates, including MFA
Login
1
Get user/device codes
POST 
https://login.microsoftonline.com/comm
on/oauth2/devicecode?api-version=1.0
client_id=d3590ed6-52b3-4102-aeff-aad22
92ab01c&
resource=https://outlook.office365.com
3
2
5
6
4
7
Poll for
oauth tokens
client_id
device_code
XX
1. No server infrastructure
2. No registered application, use 
existing vendor client app
3. No consent screen
microsoft phish
User/device codes
{ "device_code": "AH-1NgM6boio...",
  "verification_url":
  "https://www.google.com/device",
  "user_code": "ZLGG-LQSP",
  "expires_in": 1800,
  "interval": 5
}
Phish
"Here's your promotional product code:
 1. Go to www.google.com/device
 2. Enter: ZLGG-LOSP"
Oauth tokens
{ "access_token": "ya29.a0ARrdaM9...",
  "refresh_token": "1//06S3lSKyEHY…",
}
Phishing Evolution: OAuth 2.0 device code authorization
+cloud app authorization protocol
Device
(client, app)
User
Azure AD
Google Identity
Identity Platform
Authenticate and Authorize
1. Goes to www.google.com/device
2. Enters: ZLGG-LOSP
3. Authenticates, including MFA
Login
1
Get user/device codes
POST 
https://login.microsoftonline.com/comm
on/oauth2/devicecode?api-version=1.0
client_id=d3590ed6-52b3-4102-aeff-aad22
92ab01c&
resource=https://outlook.office365.com
3
2
5
6
4
7
Poll for
oauth tokens
client_id
device_code
XX
1. No server infrastructure
2. No registered application, use 
existing vendor client app
3. No consent screen
4. Implicit, default scopes
microsoft phish
Phishing Evolution: OAuth 2.0 device code authorization
+cloud app authorization protocol
1. No server infrastructure
2. No registered application, use 
existing vendor client app
3. No consent screen
4. Implicit, default scopes
5. Move laterally to other services
6. Logging limited (initial token 
logged as sign-in, but lateral 
move is not)
microsoft phish
Phishing Evolution: OAuth 2.0 device code authorization
+cloud app authorization protocol
1. No server infrastructure
2. No registered application, use 
existing vendor client app
3. No consent screen
4. Implicit, default scopes
5. Move laterally to other services
6. Logging limited (initial token 
logged as sign-in, but lateral 
move is not)
microsoft phish
1. Prevent: block verification URIs, use conditional access policies
● https://oauth2.googleapis.com/device/code
● https://microsoft.com/devicelogin
● https://login.microsoftonline.com/common/oauth2/deviceauth
● block access based on IP, location, endpoint characteristics
2. Detect
● Difficult
3. Remediate
● API to revoke all oauth tokens for a user
Phishing Evolution: OAuth 2.0 device code authorization
controls
1. No server infrastructure
2. No registered application, use 
existing vendor client app
3. No consent screen
4. Implicit, default scopes
5. Move laterally to other services
6. Logging limited (initial token 
logged as sign-in, but lateral 
move is not)
microsoft phish
1. Prevent: block verification URIs, use conditional access policies
● https://oauth2.googleapis.com/device/code
● https://microsoft.com/devicelogin
● https://login.microsoftonline.com/common/oauth2/deviceauth
● block access based on IP, location, endpoint characteristics
2. Detect
● https://login.microsoftonline.com/common/oauth2/devi
3. Remediate
● API to revoke all oauth tokens for a user
Phishing Evolution: OAuth 2.0 device code authorization
controls
1. No server infrastructure
2. No registered application, use 
existing vendor client app
3. No consent screen
4. Implicit, default scopes
5. Move laterally to other services
6. Logging limited (initial token 
logged as sign-in, but lateral 
move is not)
microsoft phish
Short expiration of user/device codes (15-30mins)
● phishing numbers game
● incorporate hosted website, generate codes dynamically
● use images for user code (no javascript allowed in email clients)
practical considerations
OAuth 2.0 device code authorization
Microsoft
Google
Server infrastructure
None required
None required
Application 
registration
None needed, can use large # of existing 
apps
Some limited vendor apps e.g. Chrome
Consent screens
No
Partial (limited vendor apps)
Scopes
Implicit, default scopes, wide-range
Very limited (user profile, drive access to 
app files, youtube info)
Lateral movement
Easy to switch among large number of 
services
No: strict limited scopes for device code flow
Logging
Partial (initial token access)
Partial
Prevention
block URIs, cond access
block URIs, VPC perimeters
Detection
Difficult
Difficult
Remediation
API to revoke user tokens
Delete/recreate user
Ongoing Research Areas
●
Other flows[1]
●
Any usability "requirements"
●
Bypass consent e.g. implicit grants
●
Default scopes[2]
●
Consent[3]
●
Browser auto-login and scope 
expansion e.g. Google uberauth 
(2013)[4][5]
[1] https://datatracker.ietf.org/doc/html/rfc6749#page-23
[2] https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent
[3] https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent
[4] https://gist.github.com/arirubinstein/fd5453537436a8757266f908c3e41538
[5] https://duo.com/blog/beyond-the-vulnerabilities-of-the-application-specific-password-exploiting-google-chrome-s-oauth2-tokens
Questions
Open Source Tools
●
Repo: https://github.com/netskopeoss/phish_oauth
●
License: BSD-3-Clause
Contact
●
PI:EMAIL
●
@jenkohwong
Thank you
1.0 Evolving Phishing Attacks
1.1 A Big Catch: Cloud Phishing from Google App Engine and Azure App Service: 
https://www.netskope.com/blog/a-big-catch-cloud-phishing-from-google-app-engine-and-azure-app-service
1.2 Microsoft Seizes Malicious Domains Used in Mass Office 365 Attacks: https://threatpost.com/microsoft-seizes-domains-office-365-phishing-scam/157261/
1.3 Phishing Attack Hijacks Office 365 Accounts Using OAuth Apps: https://www.bleepingcomputer.com/news/security/phishing-attack-hijacks-office-365-accounts-using-oauth-apps/
1.4 Office 365 Phishing Attack Leverages Real-Time Active Directory Validation: 
https://threatpost.com/office-365-phishing-attack-leverages-real-time-active-directory-validation/159188/
1.5 Demonstration - Illicit Consent Grant Attack in Azure AD: https://www.nixu.com/blog/demonstration-illicit-consent-grant-attack-azure-ad-office-365
https://securecloud.blog/2018/10/02/demonstration-illicit-consent-grant-attack-in-azure-ad-office-365/
1.6 Detection and Mitigation of Illicit Consent Grant Attacks in Azure AD: https://www.cloud-architekt.net/detection-and-mitigation-consent-grant-attacks-azuread/
1.7 HelSec Azure AD write-up: Phishing on Steroids with Azure AD Consent Extractor: 
https://securecloud.blog/2019/12/17/helsec-azure-ad-write-up-phishing-on-steroids-with-azure-ad-consent-extractor/
1.8 Pawn Storm Abuses OAuth In Social Engineering Attack: 
https://www.trendmicro.com/en_us/research/17/d/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks.html
2.0 OAuth Device Code Flow
2.1 OAuth 2.0 RFC: https://tools.ietf.org/html/rfc6749
2.2 OAuth 2.0 Device Authorization Grant RFC: https://datatracker.ietf.org/doc/html/rfc8628
2.3 OAuth 2.0 for TV and Limited-Input Device Applications: https://developers.google.com/identity/protocols/oauth2/limited-input-device
2.4 OAuth 2.0 Scopes for Google APIs: https://developers.google.com/identity/protocols/oauth2/scopes
2.5 Introducing a new phishing technique for compromising Office 365 accounts: https://o365blog.com/post/phishing/#oauth-consent
2.6. Office Device Code Phishing: https://gist.github.com/Mr-Un1k0d3r/afef5a80cb72dfeaa78d14465fb0d333
3.0 Additional OAuth Research Areas
3.1 Poor OAuth implementation leaves millions at risk of stolen data: 
https://searchsecurity.techtarget.com/news/450402565/Poor-OAuth-implementation-leaves-millions-at-risk-of-stolen-data
3.2 How did a full access OAuth token get issued to the Pokémon GO app?: 
https://searchsecurity.techtarget.com/answer/How-did-a-full-access-OAuth-token-get-issued-to-the-Pokemon-GO-app
References
1
2
3
7
5
6
4
8
9