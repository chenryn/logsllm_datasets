top--
default:
stack[top],
= strconv.Atoi (op)
++do
points := 0
for i := 0; i 3
Example 2:
Input: [[1,2], [2,3], [3,4], [4,1], [1,5]]
output: [4,1]
Explanation: The given directed graph wi11 be 1ike this:
52
A
V
4> 1
01010101
[> 1)
return (n & (n + 1)) == 0
---
## Page 666
//解法二
func hasAlternatingBitsl(n int) bool {
last, current := 0,0
for n > 0{
last = n & 1
n = n / 2
current = n & 1
if last == current {
return false
return true
695.MaxAreaofIsland
题目
(puel uuasaudau) s, T jo dnou e sl puejsi ue *s,1 pue s,o jo p,ub Kee az Adwa-uou e uai
connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are
surrounded by water
Find the maximum area of an island in the given 2D array (If there is no island, the maximum
area is 0.)
Example 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
[0,0,0,0,0,0,0,1,1,1,0,0,0] ,
[0,1,1,0,1,0,0,0,0,0,0,0,0],
[0,1,0,0,1,1,0,0,1,0,1,0,0] ,
[0,1,0,0,1,1,0,0,1,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0],
[0,0,0,0,0,0,0,1,1,1,0,0,0],
[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return 6 . Note the answer is not 11, because the island must be connected
4-directionally.
Example 2:
[[0,0,0,0,0,0,0,0]]
---
## Page 667
Given the above grid, return 0
Note: The length of each dimension in the given grid does not exceed 50.
题目大意
给定一个包含了一些0和1的非空二维数组grid。一个岛屿是由一些相邻的1（代表土地）构成的组
合，这里的“相邻要求两个1必须在水平或者竖直方向上相邻。你可以假设grid的四个边缘都被
0（代表水）包围着。找到给定的二维数组中最大的岛屿面积。（如果没有岛屿，则返回面积为0。）
解题思路
·给出一个地图，要求计算上面岛屿的面积。注意岛屿的定义是四周都是海（为0的点），如果土地（为
1的点）靠在地图边缘，不能算是岛屿。
·这一题和第200题，第1254题解题思路是一致的。DPS深搜。这不过这一题需要多处理2件事
情，一个是注意靠边缘的岛屿不能计算在内，二是动态维护岛屿的最大面积。
代码
func maxAreaofIsland(grid [][]int) int {
res := 0
for i, row := range grid {
for j, col := range row {
if col == 0 {
continue
area := areaofIsland(grid, i, j)
if area > res {
res = area
return res
func areaofIsland(grid [][]int, x, y int) int {
if !isInGrid(grid, ×, y) 1l grid[x] [y] == 0 {
return 0
3
grid[x] [y] = 0
total := 1
for i := 0; i  indices[2]-indices[1]+1 {
smallest = indices[2] -  indices[1]  +  1
return smallest
699.FallingSquares
题目
uani aue Aau japuo au ul sauenbs uani doup am (sixe-x) aul jaqwnu anjuju ue uo
The i -th square dropped ( positions [i] = (left, side_length) ) is a square with the left-
most point being positions [i][o] and sidelength positions[i] [1] 
The square is dropped with the bottom edge parallel to the number line, and from a higher
a uddop aojag xps o anenbs ypea rog iem am sauenbs papue Ajuano lie ueu nuiau
next.
 The squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length
surface they touch (either the number line or another square). Squares dropped adjacent to each
other will not stick together prematurely.
---