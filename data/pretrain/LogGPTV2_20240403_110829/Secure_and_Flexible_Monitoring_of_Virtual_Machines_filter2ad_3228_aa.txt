# Secure and Flexible Monitoring of Virtual Machines

**Authors:**
- Bryan D. Payne
- Wenke Lee

**Conference:**
23rd Annual Computer Security Applications Conference

**Abstract:**
The monitoring of virtual machines (VMs) has numerous applications in areas such as security and systems management. A monitoring technique known as introspection has been extensively discussed in the research literature, but previous works have primarily focused on its applications rather than on the proper design of a monitoring architecture. In this paper, we propose a set of requirements that should guide the development of VM monitoring solutions. To demonstrate the feasibility of these requirements, we present the design of XenAccess, a monitoring library for operating systems running on Xen. XenAccess integrates virtual memory introspection and virtual disk monitoring capabilities, enabling monitor applications to safely and efficiently access the memory state and disk activity of a target OS. The efficiency and functionality of XenAccess are illustrated through performance tests and practical examples.

## 1. Introduction

With the renewed popularity of virtualization, researchers are identifying many new applications that leverage the abstractions and isolation provided by virtualization. One area that has received significant attention is security. Security applications benefit from virtualization by running in isolated VMs, thereby reducing the trusted computing base (TCB). This technique has been employed in various research projects [21, 9, 10, 18, 7, 15, 2].

Among the security research using virtualization, a common practice is to set up a secure VM to monitor other VMs running on the same virtual machine monitor (VMM). These monitors are used in intrusion detection systems (IDS), integrity checking, honeypot systems, and forensic analysis, among others. While this approach is sound, many previous efforts have focused more on the applications of introspection rather than on building a robust monitoring architecture.

In this paper, we introduce the XenAccess monitoring library and share our insights from the implementation process. XenAccess provides virtual memory introspection and virtual disk monitoring capabilities. Our experience in designing and implementing this library has shown that implementing introspection in a secure and efficient manner is non-trivial. However, our architecture demonstrates how to achieve these goals without compromising monitoring functionality. XenAccess requires no changes to the VMM or the VM being monitored. Additionally, no modifications are required to the OS being monitored, making XenAccess suitable for both open-source and proprietary OSes. Although our current implementation focuses on monitoring XenoLinux, the XenAccess Library can be extended to monitor any OS running on the VMM. XenAccess incurs a negligible performance penalty for typical monitor applications.

We designed the XenAccess architecture based on six high-level requirements. These requirements can be seen as general good programming and security guidelines. For example, some of our requirements align with Saltzer and Schroederâ€™s classic security design principles [28]. We identify the following six requirements for monitoring VMs:

1. **No superfluous modifications to the VMM:** The VMM should remain as small and simple as possible since it is part of the TCB. If the VMM includes the necessary primitives to support the monitoring architecture, it should not be modified. If the VMM lacks the necessary primitives, only minimal modifications should be made to support the monitoring architecture.

2. **No modifications to the VM or the target OS:** Modifying the target OS (i.e., the OS being monitored) is problematic because it can tamper with the code, and changes may require access to the target OS source code, which is not always available. Virtualization's key benefit is the isolation between VMs. Placing monitoring code within the same OS that is being monitored bypasses this isolation. Therefore, all monitoring code should remain in an isolated VM unless such a restriction makes it impossible to gather the necessary information.

3. **Small performance impact:** An excessive performance impact can render a monitoring architecture useless. This requirement ensures that the monitoring architecture does not prevent the target OS from performing its intended functions. The performance impact is measured as any reduction in the performance of an application caused by the monitoring software. Ideally, this impact should be both small and consistent, although some initialization costs may be necessary.

4. **Rapid development of new monitors:** New monitors may be needed to address new types of attacks. It is advantageous to keep the monitor code simple to limit the opportunity for introducing errors. The monitoring architecture should provide APIs for developing new monitors, simplifying the job of the monitor developer.

5. **Ability to monitor any data on the target OS:** Monitors should have a full view into the target OS. The monitoring architecture should not be limited to providing information about a small part of the target OS. An ideal memory monitor should be able to view all memory on the target OS, and an ideal disk monitor should be able to view all data going to and from the disk device. The more information a monitor can view, the harder it is for an attacker to evade detection.

6. **Target OS cannot tamper with monitors:** If the target OS can tamper with the monitors, malicious code could potentially tamper with them. All monitors should be isolated or protected from the target OS. If all monitor code is in an isolated VM, this is not difficult. If some monitor code must be placed outside the TCB, additional measures must be taken to protect that code, depending on its nature.

Our main contribution is the XenAccess monitoring architecture that satisfies the above requirements. This paper addresses the architecture for security, not specific security techniques (such as IDS algorithms), which are topics for future papers. The remainder of this paper focuses on the XenAccess architecture, its implementation, and some example applications that demonstrate its performance and flexibility. Section 2 discusses related work. Section 3 provides background information on the components in Xen used to build XenAccess. Section 4 presents the architecture and implementation details for XenAccess. Section 5 shows the results of our performance testing along with some example applications. Section 6 discusses future directions in this research space, and we conclude with Section 7.

## 2. Related Work

Virtual machine monitors (VMMs) have been in use for over 35 years [11]. While Madnick and Donovan identified the security benefits of VMMs in the early 1970s [20], research that explicitly leveraged these benefits did not take place until nearly 20 years later [17, 16]. More recently, virtualization has been used in various ways to address systems management and security problems. In the security space, innovative work has been done in intrusion detection systems [10, 18, 15], workload isolation [21, 9], attack investigation and debugging [7], and system monitoring [13, 2]. Each of these applications requires the ability to monitor data from a target OS. However, the mechanics of how to properly do such monitoring have not been adequately addressed in the literature. Through the details provided in this paper and by making XenAccess an open-source project, we are exposing these mechanics for the benefit of future work in this area.

The technique of virtual memory introspection was introduced by Garfinkel and Rosenblum [10]. While this work laid out how introspection could be used to build an intrusion detection system, the underlying mechanics were not discussed. Joshi et al. presented a system called IntroVirt [15] that uses introspection and replay to test if a system was previously attacked through a known vulnerability. Similar to the first effort, only limited details were given regarding the introspection mechanism. More recently, several projects have provided details about their introspection techniques, only to reveal suboptimal security decisions in their architecture. The Hyperspector project [18] is a virtual distributed monitoring environment used for intrusion detection. The Hyperspector approach to introspection is to provide access to a few specific pieces of information (processes, sockets, etc.). This limited view into the target OS violates property (5) of our requirements for a robust monitoring solution. Hyperspector also violates property (1) by extensively modifying the VMM and property (6) by sharing OS kernels between VMs. Asrigo et al. presented a system for monitoring honeypots [2], but they violate property (2) by requiring hooks in the target OS kernel, property (3) by causing a substantial performance impact, and property (4) by incorporating kernel code in new monitor hooks. Finally, the Antfarm system [13] tracks only OS-level processes, violating property (5), and performs the monitoring from within the VMM, violating property (1). None of these virtual memory introspection systems meet our six requirements for a monitoring solution, making it more likely for an intruder to compromise, evade, or disable the monitors.

Monitoring in a virtualized environment is not the only approach. Petroni et al. developed Copilot [23], a secure co-processor used to monitor the memory of a host. In practice, this approach is similar to virtual memory introspection from a VM but requires extra hardware and cannot be generalized to monitoring other data such as disk I/O. In the commercial world, many monitoring applications run within the target OS. For example, anti-virus software typically runs in the same OS that it is protecting. However, this architecture is flawed because malicious software can simply disable the anti-virus software [3].

Disk-level monitoring has traditionally been part of a research trend focused on creating smarter, more semantically-aware devices, with applications in both systems optimization and security. Sivathanu et al. have shown how smart disks can employ gray-boxing techniques [1] to infer the semantics of the underlying filesystem and use this knowledge to enable various performance improvements and features like secure file deletion [29]. Researchers at Carnegie-Mellon University have leveraged the physical isolation of such systems to enable intrusion detection [22, 12] and recovery capabilities [30]. These systems can perform their functions in a tamper-resistant manner, regardless of an OS compromise. However, this approach requires additional hardware support and a special infrastructure for communication between the management tools inside the OS and the disk IDS. XenAccess leverages virtualization to provide the same level of monitoring functionality without these limitations.

More recently, disk monitoring has started to receive attention in the context of virtual machines. Hyperspector's approach is to mount a shadow version of the monitored filesystem and execute integrity checkers (e.g., Tripwire). This not only requires significant modifications to the VMM, violating property (1) and increasing the chances of a VMM compromise, but also limits access to the disk data by providing an exclusively static and high-level view of it, violating property (5) and making it easy to evade the monitor. Elango et al. [8] and Jones et al. [14] have applied some of the principles of semantically-smart disk systems and gray-boxing [29, 1] to the performance improvement of Xen virtual machines. Their results show how monitoring and active control of virtual machines can have a wide variety of applications outside the security area.

XenAccess is designed to work with Xen [4], but the ideas of virtual memory introspection and disk monitoring are not unique to Xen. Our architecture could be ported to any of todayâ€™s virtualization solutions. In the past, many researchers chose to work with User Mode Linux (UML) [6], a virtualization solution that allows you to boot a Linux kernel as a process in a running version of Linux. The earliest work with introspection used VMware [31], a full-featured commercial virtualization product. Looking forward, interest is growing in the kernel-based virtualization driver (KVM) [24] built into the Linux kernel starting with version 2.6.20. While our techniques are viable on any of these platforms, a virtualization solution designed as an independent and lightweight software layer running directly on the hardware, such as Xen, offers a solid foundation for a security-oriented solution.

## 3. Xen Hypervisor Background

The XenAccess monitoring library is based on Xen [4], a popular open-source virtual machine monitor (VMM). This section provides an overview of Xenâ€™s architecture, followed by a discussion of its memory management and block device I/O subsystems. Understanding these subsystems is central to understanding XenAccess' monitoring components.

### 3.1 Overview

Xen has traditionally used a paravirtualized approach to implement virtualization. This technique involves altering the guest OSes by replacing sensitive instructions that cannot be virtualized with special hypercalls, which are calls made directly to the VMM. This approach provides good performance since no trapping is done and allows virtual machines to run on non-virtualizable architectures (such as x86) [25]. However, one drawback of paravirtualization is that the guest OSes must be modified. Recent versions of Xen have the capability to run unmodified OSes using the new Intel VT-x and AMD-V technologies. XenAccess uses paravirtualized domains without violating property (2) because the changes required for paravirtualization are not strictly part of the XenAccess architecture and do not make it easier for the target OS to tamper with the monitoring code.

Xen uses a split domain architecture, meaning that regular (unprivileged) domains (domU) run alongside a privileged domain (dom0). Dom0 manages the resources and interacts with the hardware, while domU runs the guest OSes. XenAccess operates in a separate, isolated domU, ensuring that the monitoring code is protected from the target OS.

### 3.2 Memory Management

Xen uses a two-level page table scheme to manage memory. Each domain has its own page table, and Xen maintains a global page table to map between machine frame numbers (MFNs) and physical frame numbers (PFNs). When a domain accesses a page of memory, Xen translates the virtual address to a PFN, and then to an MFN. Xen provides tables to convert from MFN to PFN and PFN to MFN, called M2P and P2M, respectively. Similarly, the running OSes use a page table (PT) to convert between virtual addresses and machine addresses. Xen protects these PTs to ensure memory isolation between VMs. A paravirtualized OS must invoke a hypercall to modify its PT.

### 3.3 Device I/O

Xenâ€™s device I/O architecture is based on a split driver model. In this model, there is a frontend driver inside the domUâ€™s kernel that communicates with a backend driver inside the dom0â€™s kernel. Inter-domain communication relies on shared asynchronous I/O rings, shared memory pages, and a control framework called XenBus. This architecture is currently used in Xen to handle device I/O, and XenAccess leverages this model to monitor disk activity.

By leveraging these components, XenAccess provides a robust and flexible monitoring solution for virtual machines, ensuring that the monitoring code remains isolated and secure while providing comprehensive access to the target OS's memory and disk activity.