new directions:
(1) Consider more expressive fields. One elegant direction views
a circuit as an object that operates over the Boolean field.
With this perspective, it is natural to consider whether larger
finite fields are also candidates for GC evaluation. [BMR16]
showed that they indeed are candidates, and gave construc-
tions that add/multiply in a small arithmetic field and even
that convert between different fields. Unfortunately, multi-
plication/conversion gates grow linearly in the size of the
considered fields, and so rapidly become impractical. Arith-
metic GCs are, unfortunately, only useful in specific settings.
(2) Consider more expressive functions. Since an improved AND
gate seems unlikely, it is natural to consider more complex
functions. However, such improvements are elusive in GC,
and, to our knowledge, only one has been made: stacked gar-
bling [HK20a, HK21] shows that GC communication can be
improved for functions with exclusive conditional behavior.
Our work falls into the second category.
Non-GC Expressive Functions. In other MPC protocols, it is possi-
ble to improve beyond considering simple XOR/AND or ADD/MUL
gates. For example, other protocols allow (1) efficient lookup-table-
based approaches [IKM+13, DKS+17, KKW17, DNNR17]2, (2) ef-
ficient linear algebra operations, e.g. [HKP20, ADI+17, PSSY20,
RWT+18], or (3) custom designed subprotocols, such as fast field
inverse computation [BIB89]. Our work brings a flavor of such
techniques to GC.
Puncturable PRFs and MPC. Our one-hot outer product construc-
tion uses a well-known puncturable PRF derived from the classic
GGM PRF [GGM84]. This same idea is often applied in MPC, for
example to help achieve efficient OT extension [BCG+19, YWL+20].
Our work shows that this primitive can be directly and elegantly
plugged into GC and that the resulting primitive is powerful.
GC frameworks. Part of our contribution is a framework for build-
ing new GC modules from one-hot outer products. The generally
accepted GC framework, specified by [BHR12], defines garbling
schemes. We clarify that our framework and [BHR12]’s framework
achieve different goals. The [BHR12] framework provides an ab-
straction barrier between high level protocols and garbling schemes.
Our framework instead supports new GC modules which are hosted
inside a specific garbling scheme. Indeed, our framework is proved
secure in the [BHR12] framework.
Previous work, e.g., [KNR+17, GLMY16] viewed their circuits as
modules. The similarity between these works and ours is superficial.
They build modular GC components that are individually garbled,
then dynamically stitched together into a full GC for improved
performance. In contrast, our modules enforce scope of private
variables, and facilitate clean security proofs of circuits composed
of our one-hot gates.
2Technically, large lookup tables can be implemented in GC by enumerating garbled
rows, but this is expensive.
3 NOTATION AND ASSUMPTIONS
We list some simple notation here. We elaborate on more involved
notation in the following subsections.
from 𝑦.
• 𝜅 is our computational security parameter, e.g. 128.
• 𝐺 is the GC generator. We refer to 𝐺 by he/him.
• 𝐸 is the GC evaluator. We refer to 𝐸 by she/her.
• 𝑥 ≜ 𝑦 denotes that 𝑥 is equal to 𝑦 by definition.
• 𝑥 𝑐
• We work with vectors and matrices:
= 𝑦 denotes that 𝑥 is computationally indistinguishable
– If 𝑣 is a vector, then 𝑣𝑖 denotes the 𝑖th entry in 𝑣. If 𝑚 is
a matrix, then 𝑚𝑖,𝑗, denotes the entry at the 𝑖th row and
𝑗th column. We use zero-based indexing.
drawn from D.
– 𝑚⊺ denotes the transpose of 𝑚.
– 𝑥 ⊗ 𝑦 denotes the outer product of vectors 𝑥 and 𝑦. The
outer product can be defined as follows: 𝑥 ⊗ 𝑦 ≜ 𝑥 · 𝑦⊺.
• Let D be a distribution. We write 𝑥 ← D to denote that 𝑥 is
• We overload the notion of a circuit wire to hold a matrix of
bits of arbitrary dimension. We sample wires in a natural
manner from general D. Namely, we sample D, encode the
result in binary, then store the result onto the wires.
• [𝑛] denotes the sequence of natural numbers 0, 1, ..., 𝑛 − 1.
3.1 One-Hot Encoding and Truth Tables
Recall from Section 1.2 that our central construction computes the
one-hot outer product H(𝑎) ⊗ 𝑏. Moreover, we apply functions to
one-hot encodings via truth tables. We define appropriate notation:
Definition 3.1 (One-hot encoding). Let 𝑎 ∈ {0, 1}𝑛 be a length-𝑛
bitstring. The one-hot encoding of 𝑎 is a length-2𝑛 bitstring denoted
H(𝑎) such that for all 𝑖 ∈ [𝑛]:
H(𝑎)𝑖 ≜
(cid:40)1
if i = 𝑎
0 otherwise
Definition 3.2 (Truth table). Let 𝑓 : {0, 1}𝑛 → {0, 1}𝑚 be a func-
tion. The truth table for 𝑓 , denoted T (𝑓 ), is a 2𝑛 × 𝑚 matrix of bits
such that:
That is, the 𝑖th row of T (𝑓 ) is the bitstring 𝑓 (𝑖).
T (𝑓 )𝑖,𝑗 ≜ 𝑓 (𝑖) 𝑗
We extensively use the following simple lemma that relates truth
tables and one-hot encodings:
Lemma 3.3 (Evaluation by truth table). Let 𝑓 : {0, 1}𝑛 →
{0, 1}𝑚 be an arbitrary function. Let 𝑎 ∈ {0, 1}𝑛 be a bitstring:
T (𝑓 )⊺ · H(𝑎) = 𝑓 (𝑎)
Proof. Straightforward from Definitions 3.1 and 3.2. Informally,
□
the one-hot vector “selects” row 𝑎 of the truth table.
3.2 GC Notation: Garbled Sharings
In this work, we forgo the standard GC notation of garbled labels in
favor of garbled sharings of cleartext values held by 𝐺 and 𝐸. This
will be convenient for handling vectors and matrices of bits. We
stress that the GC mechanism, including communication rounds,
remains completely unchanged.
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea576We use Free XOR style garbled circuit labels [KS08]. In the GC,
𝐺 and 𝐸 hold sharings of each circuit wire. Each sharing consists of
two shares, one held by 𝐺 and one by 𝐸. 𝐺 samples a uniform value
Δ ∈ {0, 1}𝜅; Δ is a value that is global to all wires in the circuit.
Then, for each wire value 𝑎 ∈ {0, 1}, 𝐺 samples a uniform value
𝐴 ∈ {0, 1}𝜅. 𝐴 is 𝐺’s share; 𝐸 holds 𝐴 ⊕ 𝑎Δ. Hence, the two parties
together hold an XOR share of 𝑎Δ. We will say that gates “output” a
sharing. This corresponds to the traditional notation of 𝐸 obtaining
a valid wire label which can be used in continued GC evaluation.
Definition 3.4 (Garbled sharing). Let 𝑎 ∈ {0, 1} be a bit. Let 𝐴, 𝐵 ∈
{0, 1}𝜅 be two bitstrings. We say that the pair (𝐴, 𝐵) is a garbled
sharing of 𝑎 over (usually implicit) Δ ∈ {0, 1}𝜅 if 𝐴 ⊕ 𝐵 = 𝑎Δ. We
denote a garbled sharing of 𝑎 by writing(cid:74)𝑎(cid:75):
such that 𝐴 ⊕ 𝐵 = 𝑎Δ
(cid:74)𝑎(cid:75) ≜ (𝐴, 𝐵)
Each of the two elements in the sharing are called shares. In the
GC, 𝐺 holds one share and 𝐸 holds the other. We say that a garbled
sharing is uniform if one share is drawn uniformly from {0, 1}𝜅.
We extend sharing notation to vectors/matrices: a sharing of a
matrix is a matrix of sharings. I.e., for a matrix 𝑎 ∈ {0, 1}𝑛×𝑚:
. . .
. . .
(cid:74)𝑎0,𝑚−1(cid:75)
(cid:74)𝑎𝑛−1,𝑚−1(cid:75)
𝑎0,𝑚−1
(cid:125)(cid:127)(cid:126) ≜
(cid:74)𝑎0,0(cid:75)
...
(cid:74)𝑎𝑛−1,0(cid:75)
(cid:74)𝑎(cid:75) ⊕(cid:74)𝑏(cid:75) =(cid:74)𝑎 ⊕ 𝑏(cid:75)
𝑎𝑛−1,𝑚−1
(cid:117)(cid:119)(cid:118) 𝑎0,0
...
𝑎𝑛−1,0
(cid:74)𝑎(cid:75) =
. . .
. . .
Note, XOR is homomorphic over garbled sharings [KS08]:
More generally, we can homomorphically apply arbitrary linear
functions to sharings. Specifically, if 𝑓 is a linear map, then we
overload function application syntax as follows:
𝑓 ((cid:74)𝑎(cid:75)) = 𝑓 ((𝐴, 𝐴 ⊕ 𝑎Δ)) ≜ (𝑓 (𝐴), 𝑓 (𝐴 ⊕ 𝑎Δ))
That is, the parties apply (linear) 𝑓 to a sharing by locally applying
𝑓 to their respective shares. This generates a correct output sharing:
Lemma 3.5. Let 𝑓 be a linear map and let(cid:74)𝑎(cid:75) be a sharing. Then
𝑓 ((cid:74)𝑎(cid:75)) =(cid:74)𝑓 (𝑎)(cid:75)
Proof.
𝑓 ((cid:74)𝑎(cid:75))
=(cid:74)𝑓 (𝑎)(cid:75)
= 𝑓 ((𝐴, 𝐴 ⊕ 𝑎Δ))
= (𝑓 (𝐴), 𝑓 (𝐴 ⊕ 𝑎Δ))
= (𝑓 (𝐴), 𝑓 (𝐴) ⊕ 𝑓 (𝑎)Δ)
Definition 3.4
function application to sharing
𝑓 is a linear map
Definition 3.4 □
We apply the above fact often, most notably when applying truth
tables to shared one-hot vectors. Specifically for arbitrary function
𝑓 , Lemma 3.3 and Lemma 3.5 together imply the following:
T (𝑓 )⊺ ·(cid:74)H(𝑎)(cid:75) =(cid:74)𝑓 (𝑎)(cid:75)
3.2.1 𝐺 constants. It is easy for 𝐺 to inject secret constants into
the GC. Specifically to input a constant 𝑐, 𝐸 takes as her share 0
and 𝐺 takes 𝑐Δ: note that this matches Definition 3.4. We use such
constants to help eliminate introduced masks.
Share colors. GC techniques use garbled shares to decrypt
3.2.2
ciphertexts arranged in tables. The classic point and permute tech-
nique [BMR90] shows that 𝐸 need not try to decrypt each row of a
table, but rather can use share “pointer bits” to directly decrypt the
appropriate row. Per [ZRE15], we refer to these pointers as colors.
Namely, each share has a single distinguished bit that we refer to
as the color. The key property is that on each wire, 𝐸’s two possible
shares have different colors, and the color of a share is independent
of the cleartext value that the share represents.
Formally, we ensure that the global value Δ has a one in its least
significant bit. We define a procedure Color that, when given a
bit sharing(cid:74)𝑎(cid:75), returns to 𝐺 and 𝐸 the least significant bit of their
respective shares. Note the following:
Color((cid:74)𝑎(cid:75)) = Color((𝐴, 𝐴 ⊕ 𝑎Δ))
= (Color(𝐴), Color(𝐴 ⊕ 𝑎Δ)) = (Color(𝐴), Color(𝐴) ⊕ 𝑎)
That is, if both parties compute the color of their respective shares,
the result is an XOR secret share of the cleartext value. We extend
the Color procedure over vectors and matrices: the color of a matrix
of sharings is the matrix of colors of its elements.
3.3 Model and Cryptographic Assumptions
We use the Free XOR technique [KS08] and so we assume a circular
correlation robust hash function 𝐻 [CKKZ12]. In practice, we can
instantiate 𝐻 using fixed-key AES [GKWY20, BHKR13].
Formally, we construct a garbling scheme [BHR12], which is a
tuple of algorithms that can be plugged into GC protocols. Thus
we do not need to formally consider a specific threat model, e.g.
semi-honest adversaries. Informally, 𝐸 and 𝐺 can be understood as
semi-honest. Our implementation (see Section 6) uses our garbling
scheme to instantiate a semi-honest protocol.
4 TECHNICAL OVERVIEW
In this section, we present our techniques with sufficient detail
to understand our contribution. Section 5 later presents our con-
structions in formal detail with appropriate theorems and proofs,
and Section 7 shows a number of interesting functions that can be
computed efficiently from our technique.
Let 𝑎 ∈ {0, 1}𝑛 and 𝑏 ∈ {0, 1}𝑚 be two strings. Recall from Sec-
tion 1.2 that our core primitive efficiently computes the following:
(cid:74)𝑎(cid:75),(cid:74)𝑏(cid:75) ↦→(cid:74)H(𝑎) ⊗ 𝑏(cid:75)
To use the primitive, 𝐸 must know in cleartext the value 𝑎. We first
sketch the construction, then show how it can be used.
4.1 Garbled One-Hot Encoding(cid:74)𝑎(cid:75) ↦→(cid:74)H(𝑎)(cid:75)
We first describe how to compute(cid:74)𝑎(cid:75) ↦→(cid:74)H(𝑎)(cid:75) when 𝐸 knows 𝑎.
The idea marries GC with a well-known puncturable PRF built from
the classic GGM PRF [GGM84]. Puncturable PRFs are useful in a
number of settings, see e.g. [BW13, KPTZ13, BGI14, Ds17, BCG+19,
SGRR19]. The technique is well known, but we nevertheless sketch
it here and emphasize its natural compatibility with GC sharings.
𝐺 first generates a full binary tree of PRG seeds with 2𝑛 leaves
in the natural manner. Namely, each node’s seed is derived by
evaluating a PRG on its parent’s seed. Let 𝑆𝑖,𝑗 denote the 𝑗th seed
Session 2D: Secure Multiparty ComputationCCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea577on level 𝑖. Let the root of the overall tree reside in level −1. Let 𝐿𝑗
be a pseudonym for the 𝑗th leaf seed: 𝐿𝑗 ≜ 𝑆𝑛−1,𝑗.
hold garbled shares of(cid:74)𝑎(cid:75). Let(cid:74)𝑎𝑖(cid:75) = (𝐴𝑖, 𝐴𝑖 ⊕ 𝑎𝑖 Δ) be the shares
Our goal is to deliver to 𝐸 all leaf seeds 𝐿𝑗≠𝑎. Recall that 𝐺 and 𝐸
of the individual bits in 𝑎. Recall, 𝐸 knows each 𝑎𝑖 in cleartext but
does not know Δ. We can use these shares to encrypt values that
help 𝐸 recover each seed in the binary tree, except the seeds along
the path to 𝐿𝑎.
As a base case, 𝐺 simply defines the seeds on level zero as follows:
𝑆0,0 ≜ 𝐴0 ⊕ Δ 𝑆0,1 ≜ 𝐴0
Thus, 𝐸 trivially obtains exactly one seed on level zero.
Now, consider arbitrary level 𝑖. Assume 𝐸 has all seeds on level 𝑖
except for one (along the path to 𝐿𝑎). By applying a PRG to these
seeds, 𝐸 can recover all seeds in level 𝑖 + 1 save two.
To deliver to 𝐸 the missing seed “just off” the path to 𝐿𝑎, 𝐺 sends