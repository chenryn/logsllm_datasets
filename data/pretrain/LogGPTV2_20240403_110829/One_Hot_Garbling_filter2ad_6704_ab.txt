### New Directions

1. **Consider More Expressive Fields:**
   One promising direction is to view a circuit as an object that operates over the Boolean field. This perspective naturally leads to the question of whether larger finite fields can also be candidates for Garbled Circuit (GC) evaluation. [BMR16] demonstrated that larger finite fields are indeed viable, and provided constructions that support addition and multiplication in small arithmetic fields, as well as conversions between different fields. However, the size of multiplication and conversion gates grows linearly with the size of the considered fields, making them impractical for large fields. Consequently, arithmetic GCs are only useful in specific settings.

2. **Consider More Expressive Functions:**
   Given that significant improvements to the AND gate seem unlikely, it is natural to explore more complex functions. However, such improvements have been elusive in GC. To our knowledge, the only notable advancement is stacked garbling [HK20a, HK21], which shows that GC communication can be improved for functions with exclusive conditional behavior. Our work falls into this category.

### Non-GC Expressive Functions

In other Multi-Party Computation (MPC) protocols, it is possible to go beyond simple XOR/AND or ADD/MUL gates. For example:
- **Efficient Lookup-Table-Based Approaches:** [IKM+13, DKS+17, KKW17, DNNR17]
- **Efficient Linear Algebra Operations:** [HKP20, ADI+17, PSSY20, RWT+18]
- **Custom Designed Subprotocols:** Such as fast field inverse computation [BIB89]

Our work introduces a flavor of these techniques to GC.

### Puncturable PRFs and MPC

Our one-hot outer product construction utilizes a well-known puncturable Pseudorandom Function (PRF) derived from the classic GGM PRF [GGM84]. This idea is often applied in MPC, for instance, to achieve efficient Oblivious Transfer (OT) extension [BCG+19, YWL+20]. Our work demonstrates that this primitive can be directly and elegantly integrated into GC, resulting in a powerful tool.

### GC Frameworks

Part of our contribution is a framework for building new GC modules from one-hot outer products. The generally accepted GC framework, as specified by [BHR12], defines garbling schemes. We clarify that our framework and [BHR12]'s framework serve different purposes. The [BHR12] framework provides an abstraction barrier between high-level protocols and garbling schemes. In contrast, our framework supports new GC modules within a specific garbling scheme. Our framework is proven secure within the [BHR12] framework.

Previous works, such as [KNR+17, GLMY16], viewed their circuits as modular components. While there are superficial similarities, these works build modular GC components that are individually garbled and then dynamically stitched together for improved performance. In contrast, our modules enforce the scope of private variables and facilitate clean security proofs for circuits composed of our one-hot gates.

### Notation and Assumptions

We list some simple notation here and elaborate on more involved notation in the following subsections.

- \(\kappa\): Computational security parameter, e.g., 128.
- \(G\): The GC generator, referred to as "he/him."
- \(E\): The GC evaluator, referred to as "she/her."
- \(x \triangleq y\): \(x\) is equal to \(y\) by definition.
- \(x \approx_c y\): \(x\) is computationally indistinguishable from \(y\).
- Vectors and Matrices:
  - If \(v\) is a vector, \(v_i\) denotes the \(i\)-th entry.
  - If \(m\) is a matrix, \(m_{i,j}\) denotes the entry at the \(i\)-th row and \(j\)-th column. We use zero-based indexing.
  - \(m^\top\) denotes the transpose of \(m\).
  - \(x \otimes y\) denotes the outer product of vectors \(x\) and \(y\), defined as \(x \otimes y \triangleq x \cdot y^\top\).
- Let \(D\) be a distribution. \(x \leftarrow D\) denotes that \(x\) is drawn from \(D\).
- We overload the notion of a circuit wire to hold a matrix of bits of arbitrary dimension. We sample wires in a natural manner from a general distribution \(D\). Specifically, we sample \(D\), encode the result in binary, and store it on the wires.
- \([n]\) denotes the sequence of natural numbers \(0, 1, \ldots, n-1\).

### 3.1 One-Hot Encoding and Truth Tables

Recall from Section 1.2 that our central construction computes the one-hot outer product \(H(a) \otimes b\). We apply functions to one-hot encodings via truth tables. We define the appropriate notation:

**Definition 3.1 (One-hot encoding):** Let \(a \in \{0, 1\}^n\) be a length-\(n\) bitstring. The one-hot encoding of \(a\) is a length-\(2^n\) bitstring denoted \(H(a)\) such that for all \(i \in [n]\):
\[ H(a)_i \triangleq \begin{cases} 
1 & \text{if } i = a \\
0 & \text{otherwise}
\end{cases} \]

**Definition 3.2 (Truth table):** Let \(f : \{0, 1\}^n \to \{0, 1\}^m\) be a function. The truth table for \(f\), denoted \(T(f)\), is a \(2^n \times m\) matrix of bits such that:
\[ T(f)_{i,j} \triangleq f(i)_j \]
That is, the \(i\)-th row of \(T(f)\) is the bitstring \(f(i)\).

We extensively use the following simple lemma that relates truth tables and one-hot encodings:

**Lemma 3.3 (Evaluation by truth table):** Let \(f : \{0, 1\}^n \to \{0, 1\}^m\) be an arbitrary function. Let \(a \in \{0, 1\}^n\) be a bitstring:
\[ T(f)^\top \cdot H(a) = f(a) \]
**Proof:** Straightforward from Definitions 3.1 and 3.2. Informally, the one-hot vector "selects" row \(a\) of the truth table. \(\Box\)

### 3.2 GC Notation: Garbled Sharings

In this work, we use Free XOR style garbled circuit labels [KS08]. In the GC, \(G\) and \(E\) hold sharings of each circuit wire. Each sharing consists of two shares, one held by \(G\) and one by \(E\). \(G\) samples a uniform value \(\Delta \in \{0, 1\}^\kappa\); \(\Delta\) is a global value for all wires in the circuit. For each wire value \(a \in \{0, 1\}\), \(G\) samples a uniform value \(A \in \{0, 1\}^\kappa\). \(A\) is \(G\)'s share; \(E\) holds \(A \oplus a\Delta\). Hence, the two parties together hold an XOR share of \(a\Delta\). We will say that gates "output" a sharing. This corresponds to the traditional notation of \(E\) obtaining a valid wire label which can be used in continued GC evaluation.

**Definition 3.4 (Garbled sharing):** Let \(a \in \{0, 1\}\) be a bit. Let \(A, B \in \{0, 1\}^\kappa\) be two bitstrings. We say that the pair \((A, B)\) is a garbled sharing of \(a\) over (usually implicit) \(\Delta \in \{0, 1\}^\kappa\) if \(A \oplus B = a\Delta\). We denote a garbled sharing of \(a\) by writing \(\langle a \rangle\):
\[ \langle a \rangle \triangleq (A, B) \]
such that \(A \oplus B = a\Delta\).

Each of the two elements in the sharing are called shares. In the GC, \(G\) holds one share and \(E\) holds the other. We say that a garbled sharing is uniform if one share is drawn uniformly from \(\{0, 1\}^\kappa\).

We extend sharing notation to vectors/matrices: a sharing of a matrix is a matrix of sharings. I.e., for a matrix \(a \in \{0, 1\}^{n \times m}\):
\[ \langle a \rangle = \begin{pmatrix}
\langle a_{0,0} \rangle & \cdots & \langle a_{0,m-1} \rangle \\
\vdots & \ddots & \vdots \\
\langle a_{n-1,0} \rangle & \cdots & \langle a_{n-1,m-1} \rangle
\end{pmatrix} \]

Note, XOR is homomorphic over garbled sharings [KS08]:
\[ \langle a \rangle \oplus \langle b \rangle = \langle a \oplus b \rangle \]

More generally, we can homomorphically apply arbitrary linear functions to sharings. Specifically, if \(f\) is a linear map, then we overload function application syntax as follows:
\[ f(\langle a \rangle) = f(A, A \oplus a\Delta) \triangleq (f(A), f(A \oplus a\Delta)) \]
That is, the parties apply (linear) \(f\) to a sharing by locally applying \(f\) to their respective shares. This generates a correct output sharing:

**Lemma 3.5:** Let \(f\) be a linear map and let \(\langle a \rangle\) be a sharing. Then:
\[ f(\langle a \rangle) = \langle f(a) \rangle \]
**Proof:**
\[ f(\langle a \rangle) = f(A, A \oplus a\Delta) = (f(A), f(A \oplus a\Delta)) = (f(A), f(A) \oplus f(a)\Delta) = \langle f(a) \rangle \]
by Definition 3.4, function application to sharing, and the fact that \(f\) is a linear map. \(\Box\)

We apply the above fact often, most notably when applying truth tables to shared one-hot vectors. Specifically for an arbitrary function \(f\), Lemma 3.3 and Lemma 3.5 together imply the following:
\[ T(f)^\top \cdot \langle H(a) \rangle = \langle f(a) \rangle \]

### 3.2.1 \(G\) Constants

It is easy for \(G\) to inject secret constants into the GC. Specifically, to input a constant \(c\), \(E\) takes as her share \(0\) and \(G\) takes \(c\Delta\). Note that this matches Definition 3.4. We use such constants to help eliminate introduced masks.

### 3.2.2 Share Colors

GC techniques use garbled shares to decrypt ciphertexts arranged in tables. The classic point and permute technique [BMR90] shows that \(E\) need not try to decrypt each row of a table but can use share "pointer bits" to directly decrypt the appropriate row. Per [ZRE15], we refer to these pointers as colors. Namely, each share has a single distinguished bit that we refer to as the color. The key property is that on each wire, \(E\)'s two possible shares have different colors, and the color of a share is independent of the cleartext value that the share represents.

Formally, we ensure that the global value \(\Delta\) has a one in its least significant bit. We define a procedure Color that, when given a bit sharing \(\langle a \rangle\), returns to \(G\) and \(E\) the least significant bit of their respective shares. Note the following:
\[ \text{Color}(\langle a \rangle) = \text{Color}(A, A \oplus a\Delta) = (\text{Color}(A), \text{Color}(A \oplus a\Delta)) = (\text{Color}(A), \text{Color}(A) \oplus a) \]
That is, if both parties compute the color of their respective shares, the result is an XOR secret share of the cleartext value. We extend the Color procedure over vectors and matrices: the color of a matrix of sharings is the matrix of colors of its elements.

### 3.3 Model and Cryptographic Assumptions

We use the Free XOR technique [KS08] and assume a circular correlation robust hash function \(H\) [CKKZ12]. In practice, we can instantiate \(H\) using fixed-key AES [GKWY20, BHKR13].

Formally, we construct a garbling scheme [BHR12], which is a tuple of algorithms that can be plugged into GC protocols. Thus, we do not need to formally consider a specific threat model, e.g., semi-honest adversaries. Informally, \(E\) and \(G\) can be understood as semi-honest. Our implementation (see Section 6) uses our garbling scheme to instantiate a semi-honest protocol.

### 4 Technical Overview

In this section, we present our techniques with sufficient detail to understand our contribution. Section 5 later presents our constructions in formal detail with appropriate theorems and proofs, and Section 7 shows a number of interesting functions that can be computed efficiently from our technique.

Let \(a \in \{0, 1\}^n\) and \(b \in \{0, 1\}^m\) be two strings. Recall from Section 1.2 that our core primitive efficiently computes the following:
\[ \langle a \rangle, \langle b \rangle \mapsto \langle H(a) \otimes b \rangle \]
To use the primitive, \(E\) must know in cleartext the value \(a\). We first sketch the construction, then show how it can be used.

### 4.1 Garbled One-Hot Encoding \(\langle a \rangle \mapsto \langle H(a) \rangle\)

We first describe how to compute \(\langle a \rangle \mapsto \langle H(a) \rangle\) when \(E\) knows \(a\). The idea marries GC with a well-known puncturable PRF built from the classic GGM PRF [GGM84]. Puncturable PRFs are useful in a number of settings, see e.g., [BW13, KPTZ13, BGI14, Ds17, BCG+19, SGRR19]. The technique is well known, but we nevertheless sketch it here and emphasize its natural compatibility with GC sharings.

\(G\) first generates a full binary tree of PRG seeds with \(2^n\) leaves in the natural manner. Namely, each node's seed is derived by evaluating a PRG on its parent's seed. Let \(S_{i,j}\) denote the \(j\)-th seed on level \(i\). Let the root of the overall tree reside in level \(-1\). Let \(L_j\) be a pseudonym for the \(j\)-th leaf seed: \(L_j \triangleq S_{n-1,j}\).

Our goal is to deliver to \(E\) all leaf seeds \(L_j \neq a\). Recall that \(G\) and \(E\) hold garbled shares of \(\langle a \rangle\). Let \(\langle a_i \rangle = (A_i, A_i \oplus a_i \Delta)\) be the shares of the individual bits in \(a\). Recall, \(E\) knows each \(a_i\) in cleartext but does not know \(\Delta\). We can use these shares to encrypt values that help \(E\) recover each seed in the binary tree, except the seeds along the path to \(L_a\).

As a base case, \(G\) simply defines the seeds on level zero as follows:
\[ S_{0,0} \triangleq A_0 \oplus \Delta \quad \text{and} \quad S_{0,1} \triangleq A_0 \]
Thus, \(E\) trivially obtains exactly one seed on level zero.

Now, consider arbitrary level \(i\). Assume \(E\) has all seeds on level \(i\) except for one (along the path to \(L_a\)). By applying a PRG to these seeds, \(E\) can recover all seeds in level \(i + 1\) save two.

To deliver to \(E\) the missing seed "just off" the path to \(L_a\), \(G\) sends the necessary encrypted values.