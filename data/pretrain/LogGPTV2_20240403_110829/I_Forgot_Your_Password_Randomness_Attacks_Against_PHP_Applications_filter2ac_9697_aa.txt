title:I Forgot Your Password: Randomness Attacks Against PHP Applications
author:George Argyros and
Aggelos Kiayias
I Forgot Your Password: Randomness Attacks Against PHP Applications∗
Dept. of Informatics & Telecom.,
Dept. of Informatics & Telecom.,
Aggelos Kiayias
University of Athens,
PI:EMAIL
& Computer Science and Engineering,
University of Connecticut, Storrs, USA.
PHP for example lacks a built-in cryptographically se-
cure PRNG in its core and until recently, version 5.3, it
tottaly lacked a cryptographically secure randomness
generation function.
This left PHP programmers with two options: They
will either implement their own PRNG from scratch
or they will employ whatever functions are offered by
the API in a “homebrew” and ad-hoc fashion. In ad-
dition, backwards compatibility and other issues (cf.
section 2), often push the developers away even from
the newly added randomness functions, making their
use very limited. As we will demonstrate and heavily
exploit in this work, this approach does not produce
secure web applications.
Observe that using a low entropy source or a crypto-
graphically weak PRNG to produce randomness does
not necessarily imply that an attack is feasible against
a system. Indeed, so far there have been a very limited
number of published attacks based on the insecure us-
age of PRNG functions in PHP, while popular exploit
databases1 contain nearly zero exploits for such vul-
nerabilities (and this may partially explain the delay in
the PHP community adopting secure randomness gen-
eration functions). Showing that such attacks are in
fact very practical is the objective of our work.
In this paper we develop generic techniques and al-
gorithms to exploit randomness vulnerabilities in PHP
applications. We describe implementation issues that
allow one to either predict or completely recover the
initial seed of the PRNGs used in most web applica-
tions. We also give algorithms for recovering the in-
ternal state of the PRNGs used by the PHP system, in-
cluding the Mersenne twister generator and the glibc
LFSR based generator, even when their output is trun-
cated. These algorithms could be used in order to
attack hardened PHP installations even when strong
seeding is employed, as it is done by the Suhosin ex-
tension for PHP and they may be of independent inter-
est.
We also conducted an extensive audit of several pop-
ular PHP applications. We focused on the security
of password reset implementations. Using our attack
George Argyros
University of Athens,
PI:EMAIL
Abstract
We provide a number of practical techniques and
algorithms for exploiting randomness vulnerabilities
in PHP applications.We focus on the predictability of
password reset tokens and demonstrate how an attacker
can take over user accounts in a web application via
predicting or algorithmically derandomizing the PHP
core randomness generators. While our techniques are
designed for the PHP language, the principles behind
our techniques and our algorithms are independent of
PHP and can readily apply to any system that utilizes
weak randomness generators or low entropy sources.
Our results include: algorithms that reduce the entropy
of time variables, identifying and exploiting vulnera-
bilities of the PHP system that enable the recovery or
reconstruction of PRNG seeds, an experimental analy-
sis of the H˚astad-Shamir framework for breaking trun-
cated linear variables, an optimized online Gaussian
solver for large sparse linear systems, and an algorithm
for recovering the state of the Mersenne twister gen-
erator from any level of truncation. We demonstrate
the gravity of our attacks via a number of case studies.
Speciﬁcally, we show that a number of current widely
used web applications can be broken using our tech-
niques including Mediawiki, Joomla, Gallery, osCom-
merce and others.
1
Introduction
Modern web applications employ a number of ways
for generating randomness, a feature which is critical
for their security. From session identiﬁers and pass-
word reset tokens, to random ﬁlenames and password
salts, almost every web application is relying on the
unpredictability of these values for ensuring secure op-
eration. However, usually programmers fail to under-
stand the importance of using cryptographically secure
pseudorandom number generators (PRNG) something
that opens the potential for attacks. Even worse, the
same trend holds for whole programming languages;
∗Research partly supported by ERC Project CODAMODA.
1e.g. http://www.exploit-db.com
1
framework we were able to mount attacks that take
over arbitrary user accounts with practical complex-
ity. A number of widely used PHP applications are
affected (see Figure 7), while we believe that the im-
pact is even larger in less known applications.
Our results suggest that randomness attacks should
be considered practical for PHP applications and ex-
isting systems should be audited for these vulnerabili-
ties. Weak randomness is a grave vulnerability in any
secure system as it was also recently demonstrated in
the widely publicized discovery of common primes in
RSA public-keys by Lenstra et al.
[14]. We ﬁnally
stress that our techniques apply in any setting beyond
PHP, whenever the same PRNG functions are used and
the attack vector relies on predicting a system deﬁned
random object.
This is only an extended abstract, a full version can
be found in [1].
1.1 Attack model
In Figure 1 we present our general attack template. An
attacker is trying to predict the password reset token in
order to gain another user’s privileges (say an admin-
istrator’s). Each time the attacker makes a request to
the web server, his request is handled by a web appli-
cation instance, usually represented by a speciﬁc op-
erating system process, which contains some process
speciﬁc state. The web application uses a number of
application objects with values depending on its in-
ternal state, with some of these objects leaking to the
attacker through the web server responses. Examples
of such objects are session identiﬁers and outputs of
PRNG functions. Although our focus is in password
reset functions, the principles that we use and the tech-
niques that we develop can be readily applied in other
contexts when the application relies on the generation
of random values for security applications. Examples
of such applications are CAPTCHA’s and the produc-
tion of random ﬁlenames.
Attack complexity. Since we present explicit practi-
cal attacks, we deﬁne next the complexity under which
an attack should be consider practical. There are two
measure of complexity of interest. The ﬁrst is the time
complexity and the second is the query or communi-
cation complexity. For some of our attacks the main
compuational operation is the calculation of an MD5
hash. With current GPU technologies an attacker can
perform up to 230 MD5 calculations per second with
a $250 GPU, while with an additional $500 can reach
up to 232 calculations [9]. These ﬁgures suggest that
attacks that require up to 240 MD5 calculations can
be easilty mounted. In terms of communication com-
plexity, most of our attacks have a query complexity
of a few thousand requests at most, while some have
as little as a few tens of requests. Our most commu-
nication intensive attacks (section 5) require less than
35K(≈ 215) requests. Sample benchmarks that we per-
formed in various applications and server installations
show that on average one can perform up to 222 re-
quests in the course of a day.
2 PHP System
We will now describe functionalities of the PHP sys-
tem that are relevant to our attacks. We ﬁrst describe
the different modes in which PHP might be running,
and then we will do a description of the randomness
generation functions in PHP. We focus our analysis in
the Apache web server, the most popular web server at
the time of this writing, however our attacks are easily
ported to any webserver that meets the conﬁguration
requirements that we describe for each attack.
2.1 Proccess management
There are different ways in which a PHP script is ex-
ecuted. These ways affect its internal states, and thus
the state of its PRNGs. We will focus on the case when
PHP is running as an Apache module, which is the de-
fault installation in most Linux distributions and is also
very popular in Windows installations.
mod php: Under this installation the Apache web
server is responsible for the process management.
When the server is started a number of child proccesses
are created and each time the number of occupied pro-
cesses passes a certain threshold a new process is cre-
ated. Conversely, if the idle proccesses are too many,
some processes are killed. One can specify a maxi-
mum number of requests for each process although this
is not enabled by default. Under this setting each PHP
script runs in the context of one of the child processes,
so its state is preserved under multiple connections un-
less the process is killed by the web server process
manager. The conﬁguration is similar in the case the
web server uses threads instead of processes.
Keep-Alive requests. The HTTP protocol offers a
request header, called Keep-Alive. When this header
is set in an HTTP request, the web server is instructed
to keep the connection alive after the request is served.
Under mod php installations this means that any sub-
sequent request will be handled from the same process.
This is a very important fact, that we will use in our
attacks. However in order to avoid having a process
hang from one connection for inﬁnite time, most web
servers specify an upper bound on the number of con-
sequent keep-alive requests. The default value for this
bound in the Apache web server is 100.
2.2 Randomness Generation
In order to satisfy the need for generating randomness
in a web application, PHP offers a number of different
2
Figure 1: Attack template.
randomness functions. We brieﬂy describe each func-
tion below.
the
php combined lcg()/lcg value():
php combined lcg() function is used internally
by the PHP system, while lcg value() is its
public interface. This function is used in order to
create sessions, as well as in the uniqid function
described below to add extra entropy. It uses two
linear congruential generators (LCGs) which it
combines in order to get better quality numbers.
The output of this function is 64 bits.
This
uniqid(prefix, extra entropy):
function returns a string concatenation of the
seconds and microseconds of the server time con-
verted in hexadecimal. When given an additional
argument it will preﬁx the output string with the
preﬁx given. If the second argument is set to true,
the function will sufﬁx the output string with an
output from the php combined lcg() function.
This makes the total output to have length up to
15 bytes without the preﬁx.
microtime(),
time():
function
microtime() returns a string concatenation
of the current microseconds divided by 106 with
the seconds obtained from the server clock. The
time() function returns the number of seconds
since Unix Epoch.
mt srand(seed)/mt rand(min, max):
mt rand is
the Mersenne
Twister (MT) generator [15] in the PHP system.
In order to be compatible with the 31 bit output of
rand(), the LSB of the MT function is discarded.
The function takes two optional arguments which
map the 31 bit number to the [min, max] range.
The mt srand() function is used to seed the MT
generator with the 32 bit value seed; if no seed
is provided then the seed is provided by the PHP
system.
srand(seed)/rand(min, max): rand is the in-
terface function of the PHP system to the rand()
function provided by libc.
In unix, rand() ad-
the interface for
The
ditive feedback generator (resembling a Linear
Feedback Shift Register (LFSR)), while in Win-
dows it is an LCG. The numbers generated by
rand() are in the range [0,231−1] but like before
the two optional arguments give the ability to map
the random number to the range [min, max]. Like
before the srand() function seeds the generator
similarly to the mt srand() function.
openssl random pseudo bytes(length,
strong): This function is the only function
available in order to obtain cryptographically
secure random bytes. It was introduced in version
5.3 of PHP and its availability depends on the
availability of the openssl library in the system.
In addition, until version 5.3.4 of PHP this
function had performance problems [2] running
The strong
in Windows operating systems.
parameter,
is set
to true if the
function returned cryptographically strong bytes
and false otherwise. For these reasons, and
for backward compatibility, its use is still very
limited in PHP applications.
if provided,
In addition the application can utilize an operating sys-
tem PRNG (such as /dev/urandom). However, this
does not produce portable code since /dev/urandom
is unavailable in Windows OS.
3 The entropy of time measurements
Although ill-advised (e.g., [5]) many web applica-
tions use time measurements as an entropy source.
In PHP, time is accessed through the time() and
microtime() functions. Consider the following prob-
lem. At some point a script executing a request made
by the attacker makes a time measurement and use the
results to, say, generate a password reset token. The
attacker’s goal it to predict the output of the measure-
ment made by the PHP script. The time() function
has no entropy at all from an attacker point of view,
since the server reveals its time in the HTTP response
header as dictated by the HTTP protocol. On the other
3
hand, microtime ranges from 0 to 106 giving a max-
imum entropy of about 20 bits. We develop two dis-
tinct attacks to reduce the entropy of microtime()
that have different advantages and mostly target two
different scenarios. The ﬁrst one, Adversial Time Syn-
chronization, aims to predict the output of a speciﬁc
time measurement when there is no access to other
such measurements. The second, Request Twins, ex-
ploits the fact that the script may enable the attacker to
generate a correlated leak to the target measurement.
Adversarial Time Synchronization (ATS). As we
mentioned above, in each HTTP response the web
server includes a header containing the full date of the
server including hour, minutes and seconds. The basic
observation is that although we get no leak regarding
the microseconds from the HTTP date header we know
that when a second changes the microseconds are ze-
roed. We use this observation to narrow down their
value.
The algorithm proceeds as follows: We connect to
the web server and issue pairs of HTTP requests R1
and R2 in corresponding times T 1 and T 2 until a pair
is found in which the date HTTP header of the cor-
responding responses is different. At that point we
know that between the processing of the two HTTP
requests the microseconds of the server were zeroed.
We proceed to approximate the time of this event S in
localtime, denoted by the timestamp D, by calculating
the average RTT of the two requests and offsetting the
middle point between T 2 and T 1 by this value divided
by two.
In the Apache web server the date HTTP header is
set after processing the request of the user. If the at-
tacker requests a non existent ﬁle, then the point the
header is set is approximatelly the point that a valid
request will start executing the PHP script.
It fol-
lows that if the attacker uses ATS with HTTP requests
to not existent ﬁles then he will synchronize approx-
imately with the beggining of the script’s execution.
Given a steady network where each request takes RT T
2
time to reach the target server, our algorithm devia-
tion depends only on the rate that the attacker can send
HTTP requests.
In practice, we ﬁnd that the algo-
rithm’s main source of error is the network distance
between the attacker’s system and the server cf. Fig-
ure 3. The above implementation we described is a
proof-of-concept and various optimizations can be ap-
plied to improve its accuracy.
Request Twins. Consider the following setting: an
application uses microtime() to generate a password
token for any user of the system. The attacker has ac-
cess to a user account of the application and tries to
take over the account of another user. This allows the
attacker to obtain password reset tokens for his account
and thus outputs of the microtime() function. The
key observation is that if the attacker performs in rapid
succession two password reset requests, one for his ac-
count and one for the target user’s account, then these
requests will be processed by the application with a