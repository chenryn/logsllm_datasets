258 patched bugs into four different categories: (1) “Removed
feature” means that an RV control program still can trigger a
deprecated behavior, although the documentation explicitly
mentions the behavior is prohibited. For instance, AUTO_-
DISARMING_DELAY conﬁguration parameter is deprecated based
on the ArduPilot documentation; however, the RV software
includes a code snippet for the parameter. This allows attackers
to exploit this parameter to disarm an RV’s motors (See
in Section II). (2) The “Misimplementation” bugs occur when
developers incorrectly implement features. For example, in
Listing 4, we show a bug that contains an incorrect condition
statement, which leads to an improper ﬂight mode change. (3)
The “Unimplemented” bugs refer to unimplemented features
in the RV software, although the documentation explicitly
mentions that the RV software supports the features. For
instance, developers forgot to check the validity of a wind
vane before the takeoff ﬂight stage (Listing 3), which makes
the RV fail to navigate into a waypoint. (4) The “Incorrect valid
range check” means that the RV software does not check valid
values of the conﬁguration parameters or incorrectly enforces
them. For example, in Listing 2, we show that PX4 does not
check the valid range of the parameter, which prevents the RV
from triggering the GPS fail-safe, and causing it to randomly
ﬂy in the air (Detailed in Section III-A).
As shown in Table VI, the root causes of bugs reported by
the fuzzing tools [41], [43] are mainly due to the “Incorrect
valid range check” (96.1%). This is because the RVs include
many conﬁguration parameters, and not properly checking their
valid ranges results in logic bugs. As shown in Table VII, 66
out of the 77 bugs (85.7%), which are obtained from GitHub
commit history, are due to root causes of “Misimplementation”
and “Unimplemented”.
Physical Effect of Bugs. We additionally categorize the
effects of bugs into four different types: (1) The “Crash on the
ground” means that the (simulated) RV loses attitude control
and crashes on the ground. (2) The “Unstable attitude/position”
refers to instability in either its attitude or position control. (3)
The “Performance degradation” represents degraded processing
time or wasted memory space. (4) The “Incorrect state” means
all other unexpected behaviors, including incorrectly triggered
ﬂight mode, failing to detect landing on the ground, and missed
warning messages on a ground control station.
We show in Table VI that 176 out of the 181 bugs (97.2%)
from PGFuzz directly lead to physical harm (i.e., either crashing
or instability), and 5 out of the 181 bugs (2.8%) cause incorrect
states. As shown in Table VII, 46 out of the 77 bugs (59.7%)
from Github repositories directly cause physical harm. 31
out of the 77 bugs (40.3%) (i) degrade ﬂight performance
due to increased processing time, wasted memory space, and
incorrectly measured states (e.g., incorrect land detection) or
(ii) lead to incorrect states.
D. Generality of PGPATCH
We randomly select private member variables and check
whether the RV software follows the naming conventions. We
consider a speciﬁc RV software package as complying with
the naming conventions if we could ﬁnd getters and setters for
the selected private variables.
The results of our analysis are shown in Table IV. PGPATCH
could be ported to the following eight RV control programs
with minor engineering effort: Paparazzi [59], PX4 [64],
ArduPilot [8], Betaﬂight [14], Cleanﬂight [18], LibrePilot [47],
Tau Labs [76], and dRonin [23]. We call these eight RV
control programs portable RV software packages. On the
contrary, PGPATCH cannot be easily applied to INAV [35] and
multiwii [55] because they are not supported by any simulators.
Further, we cannot deploy PGPATCH to Hackﬂight [29] because
its telemetry protocol [30] is mainly for viewers instead of
operating RVs. Particularly, Hackﬂight’s protocol only allows
PGPATCH to change roll, pitch, yaw, and throttle states of
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
171842
ID
Bug1
Bug2
Bug3
Bug4
Bug5
Bug6
Bug7
Bug8
Bug9
Bug10
Bug11
Vehicle
type
Mentor
Energy
Minion_Lia
Quad_Lisa_2
Quad_LisaMX
Bebop2
Bebop2
Ardron2
Ardron2
Formula
ID
Violated
formula
PP.FailSafe
If GPSloss is true and RCvalid is false, then mode
is FAILSAFE
PP.Hover
If Modet is Hover, then Post is Post−1 and Yawt is
Yawt
Quad_Elie0
Quad-Navstik
PP.TAKEOFF1
LadyLisa
PP.HoverZ
Bug12
Bebop2
PP.HOME1
If Commandt is takeoff, then ALTtarget is greater
than or equal to HOME_ALT + 5
If Modet is HoverZ and Throttlet is 1500, then
ALTt is ALTt−1
If Modet is HOME and Landt is not true, then ALTt
is not ALTt−1 and Post is not Post−1
Description
FAILSAFE mode is not triggered when the
vehicle loses GPS and RC signals.
FAILSAFE mode is not triggered when the
vehicle’s mode is HoverC.
FAILSAFE mode is not triggered when the
vehicle’s mode is NAV.
The vehicle fails to stay at a constant position
after conducting FLIP mode.
The vehicle fails to trigger Hover mode.
The vehicle crashes on the ground after
conducting FLIP mode.
The vehicle fails to take off from the ground.
When the vehicle’s ﬂight mode is HoverZ, it
fails to maintain a constant altitude.
When nav_desend_v conﬁguration param-
eter is 0, the vehicle fails to land on the
ground.
Patch
type
ADD
Other
DISABLE
CHECK
Fixable?












TABLE VIII: Summary of new logic bugs discovered by PGFuzz on Paparazzi.
RVs through a remote controller channel. Yet, to trigger buggy
behaviors, PGPATCH needs to fully manipulate inputs.
E. The Formulas’ Usability
We evaluate PGPATCH on Paparazzi to ﬁnd new logic bugs.
To run PGFuzz on Paparazzi, we reused the ﬁve formulas used
in PGFuzz for Paparazzi, and added a new formula to detect
possible logic bugs. The new formula is for a fail-safe mode
in Paparazzi: “If GPSloss is true and RCvalid is false, then
mode is FAILSAFE”. The reason is that PGFuzz deﬁnes the
fail-safe behavior of ArduPilot and PX4 in the form of LTL
formulas but does not create a formula for Paparazzi’s fail-safe
mode.
We discovered a total of 12 previously unknown logic
bugs by running PGFuzz on Paparazzi for a day (as shown
in Table VIII). To detail, the PP.FailSafe, PP.Hover, and
PP.TAKEOFF1 formulas discovered multiple logic bugs (10 out
of the 12 bugs). The PP.HoverZ and PP.HOME1 each detected
one bug (2 out of the 12 bugs). We have reported the discovered,
previously unknown 12 logic bugs to Paparazzi developers,
who acknowledged them.
By using the same formulas, PGPATCH ﬁxed 6 out of the 12
logic bugs. Speciﬁcally, PGPATCH ﬁxed 4 bugs of ADD type,
1 of DISABLE type, and 1 of CHECK type. PGPATCH failed
to ﬁx the other 6 logic bugs. The reason is that developers
do not implement (i) Hover ﬂight mode (Bug5-Bug8), and
(ii) Quad_Elie0 and Quad-Navstik vehicle types (Bug9 and
Bug10) although the documentation explicitly mentions that
Paparazzi supports these features. These require PGPATCH to
create the features from scratch.
F. Recruitment Details and Participant Demographics
We recruit from two different groups, RV developers and
experienced RV users. The RV developers actively ﬁx bugs
reported in their GitHub repositories [8], [59], [64], community
websites [9], [66], and live chat channels [10], [60], [67].
To recruit developers, we advertised our study in developer
community websites and live chat channels. Experienced RV
Min = 19 Mean = 27.1 Median = 24.5
Stddev = 6
(a) Age
China = 7
S. Korea = 2
(b) Country of origin
USA = 2
(c) Achieved level of education
Bachelor = 6
(d) Do you know LTL syntax?
Max = 40
Pakistan = 1
Graduate school = 4
No = 10
Highschool = 2
Yes = 2
ArduPilot = 5
Computer
science = 9
(e) Which RV software have you modiﬁed?
(f) How many years of RV software experience do you have?
Less than 1 year = 6
1 year = 3
2 years = 0 More than 3 years = 3
PX4 = 4
ArduPilot & PX4 = 3
(g) What is your major?
Electrical
Engineering = 2
Aerospace
Engineering = 1
(h) Do you primarily study/work in RVs?
Yes = 4
No = 8
(i) What level of RV software programming proﬁciency do you think you have?
Beginner = 7
Advanced = 1
TABLE IX: Detailed data about demographics of experienced
RV users (N = 12).
Intermediate = 4
Min = 22 Mean = 38.8 Median = 29.5
Stddev = 9.1
(a) Age
(b) Country of origin
Puerto Rico = 1
Turkey = 1
(c) Achieved level of education
Bachelor = 2
(d) Do you know LTL syntax?
Brazil = 2
France = 1
Highschool = 1
Yes = 0
ArduPilot = 6
Less than 1 year = 0
Computer
science = 2
Yes = 6
(e) Which RV software have you modiﬁed?
PX4 = 0
(f) How many years of RV software experience do you have?
1 year = 2
(g) What is your major?
Mechanical
Aerospace
2 years = 1
Engineering = 2
Engineering = 1
(h) Do you primarily study/work in RVs?
Max = 44
USA = 1
Graduate school = 3
No = 6
ArduPilot & PX4 = 0
More than 3 years = 3
N/A = 1
No = 0
(i) What level of RV software programming proﬁciency do you think you have?
Beginner = 1
TABLE X: Detailed data about demographics of experienced
RV developers (N = 6).
Intermediate = 3
Advanced = 2
users also create patches, which are then reviewed and approved
by developers before they are applied to the RV software. To
recruit experienced RV users, we advertised our study through
internal campus email listings and Slack channels to reach out
to engineering and CS students familiar with RV software.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
181843
ID
Formula
Description
PP.FailSafe
PP.HoverZ
RV.Safety
(generic formula)
RV.Check
(generic formula)
If GPSloss is true and RCvalid is false, then mode
is FAILSAFE
If Modet is HoverZ and Throttlet is 1500, then ALTt
is ALTt−1
If Parami_value is less than Mini or Parami_value is
more than Maxi, then Safety is error
If Parami_value is less than Mini or Parami_value is
more than Maxi, then Parami_value is Parami_default
FAILSAFE mode is triggered when the vehicle loses
GPS and RC signals.
The vehicle must maintain a constant altitude if its
ﬂight mode is HoverZ and the current throttle is 1500.
The vehicle returns a safety error if i-th conﬁguration
parameter has a value outside its valid range.
When i-th conﬁguration parameter have a value outside
its valid range, then a patch assigns a default value to
the parameter.
TABLE XI: Four PPL formulas ﬁxing multiple bugs.
# of
ﬁxed bugs
4
2
44
135
from the ofﬁcial documentation [7], [58], [65]. An example
of an entry of this list is: . In
this example, the RV.Safety formula will be instantiated to
“If (ANGLE_MAX is less than 1000) or (ANGLE_MAX is more than
8000), then (Safety is error)”.
In general, patches generated from the RV.Safety formula
verify whether parameters related to altitude/attitude of the RV
have a valid value. Using this formula, PGPATCH inserts a
patch verifying whether altitude/attitude-related parameters are
within proper ranges. In case they are not, the patch sends a
“Safety error” message to the GCS. Concretely, these patches
address a bug causing the RV software not to send error
messages to the GCS when in certain ﬂight stages (e.g., after
takeoff).
Similarly, patches generated using the RV.Check formula
check if a non-altitude/attitude-related parameter is within
a valid range. In the case of violations, the inserted patches
assign the violating parameter to a default value. The difference
between these two behaviors is justiﬁed by the fact that the
RV software is designed to deal with invalid altitude/attitude-
related parameters (although, in this case, it is supposed to
send a message to the GCS), while it assumes that all other
parameter values are always in valid ranges.
Our user study was approved by our institution’s IRB [74],
and considered exempt. We asked participants to ﬁll out
a consent form and answer demographic questions before
conducting the user study. We compensated all participants
with a $40 Amazon gift card.
22 participants (6 developers and 16 users) applied for our
study, and 18 (6 developers and 12 users) qualiﬁed based on
their experience in ﬁnding bugs in RVs and modifying RV
software. We present the demographic data of the participants
in Table IX and Table X. To the best of our knowledge, this is
the ﬁrst APR work that recruits experienced developers in the
RV industry and compares their performance to the APR tool’s
one. Mainly, 1 of the 6 RV developers is an ofﬁcial maintainer
of ArduPilot. He regularly contributes to the RV software and
is responsible for reviewing patches on ArduPilot. He has more
than 800 commit records dating back to the initial phases of
ArduPilot. The other ﬁve developers have at least one year of
experience in the RV industry.
G. Relationship between Formulas and Bugs
We used a total of 123 formulas to attempt to ﬁx the 297 bugs
in Section VII-A. 4 out of the 123 formulas (PP.FailSafe,
PP.HoverZ, RV.Check, RV.Safety) ﬁxed multiple bugs, as
shown in Table XI. The other 119 formulas could ﬁx one
bug each. We note that building formulas is still worthwhile
even when one formula can ﬁx only one logic bug. The reason
is that creating formulas is much faster and less error-prone
than manually patching bugs, as explained in Section VII-G.
the
PP.FailSafe formula ensures that
the fail-safe mode is
triggered when the RV loses GPS and RC signals. This formula
patches four bugs. In this case, multiple patches are placed in
separate locations in the code, depending on the RV’s ﬂight
mode (e.g., AUTO or MANUAL) that triggers the bug.
Regarding the formulas patching multiple bugs,
The PP.HoverZ formula ensures that the RV maintains a
constant altitude during the Hover_Z ﬂight mode. This formula
ﬁxes two bugs. In this case, two identical patch code snippets
are required in different functions according to vehicle types
(multi-copter and ﬁxed-wing).
Finally, RV.Safety and RV.Check are generic formulas,
which means that some of their terms assume multiple values
from a list. For instance, the RV.Safety formula uses different
Parami and corresponding Mini/Maxi values, from a list of pa-
rameters and corresponding minimum/maximum values. Users
can obtain a valid range for each of the conﬁguration parameters
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
191844