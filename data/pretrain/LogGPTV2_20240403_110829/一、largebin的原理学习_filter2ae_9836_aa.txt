# 一、largebin的原理学习
大于512（1024）字节(0x400)的chunk称之为large chunk，large bin就是用于管理这些large chunk的
Large bins 中一共包括 63 个 bin，index为64~126，每个 bin 中的 chunk 的大小不一致，而是处于一定区间范围内
largebin 的结构和其他链表都不相同，更加复杂
largebin里除了有fd、bk指针，另外还有fd_nextsize 和 bk_nextsize
这两个指针，因此是有横向链表和纵向链表2个链表，而纵向的链表目的在于加快寻找chunk的速度。
自己写个C语言学习下largebin的堆块分配方式：
    #include
    #include
    int main()
    {
        unsigned long *pa, *pb, *p1, *p2, *p3, *p4, *p5, *p6, *p7, *p8, *p9, *p10, *p11, *p12, *p13, *p14;
        unsigned long *p;
        pa = malloc(0xb0);
        pb = malloc(0x20);
        p1 = malloc(0x400);
        p2 = malloc(0x20);
        p3 = malloc(0x410);
        p4 = malloc(0x20);
        p5 = malloc(0x420);
        p6 = malloc(0x20);
        p7 = malloc(0x420);
        p8 = malloc(0x20);
        p9 = malloc(0x430);
        p10 = malloc(0x20);
        p11 = malloc(0x430);
        p12 = malloc(0x20);
        p13 = malloc(0x430);
        p14 = malloc(0x20);
        free(pa);
        free(p1);
        free(p3);
        free(p5);
        free(p7);
        free(p9);
        free(p11);
        free(p13);
        p = malloc(0x20);
        p = malloc(0x80);
        return 0;
    }
可以看到申请的堆块0x400到0x420放在larbin(index64),而3个0x430的堆块放在largebin(index65)，下面用图来解析：
这是largebin中的堆块的分配示意图，上方的是size有相同和不同，但处于同一largebin的chunk分布，下方是相同size处于同一largebin的chunk分布。
很清楚地可以看到fk和bk形成的横向链表，fd_nextsize和bk_nextsize形成的纵向链表（看不出可以将图顺时针旋转90度再看看）
这里通过fd指针和bk指针形成循环链表很好理解，和之前的small bin和unsorted
bin一样，但是不同的在于，largebin中的chunk是按照从大到小的顺序排列的(表头大，表尾小)，当有相同size的chunk时则按照free的时间顺序排序。
同时相同size的chunk，只有第一个chunk会有fd_nextsize和bk_nextsize，其他的都没有，fd_nextsize和bk_nextsize置为0。
一般的，bk_nextchunk指向前一个比它大的chunk(表头和表尾除外)。这样就很好理解，fd_nextsize指向下一个比它小的chunk。
表头chunk的bk_nextsize指向表尾chunk，表尾的fd_nextsize指向表头chunk，从而fd_nextsize指针形成一个循环链表，bk_nextsize指针也形成一个循环链表，所以largebin的链表结构也相对复杂一些，但是理清楚了就好了。
了解了布局后，让我们继续看看申请largebin时的源码是什么样的：
    if (!in_smallbin_range (nb))
            {
              bin = bin_at (av, idx);
    ​
              //如果对应的 bin 为空或者其中的chunk最大的也很小，那就跳过
              if ((victim = first (bin)) != bin &&
                  (unsigned long) (victim->size) >= (unsigned long) (nb))
                {
                  // 反向遍历链表，找到第一个比size大的chunk
                  victim = victim->bk_nextsize;
                  while (((unsigned long) (size = chunksize (victim)) bk_nextsize;
                  /* Avoid removing the first entry for a size so that the skip
                     list does not have to be rerouted.  */
                  //如果取出的chunk不是bin的最后一个chunk，同时该chunk有大小相同的chunk连接在一起
                  //它就会取它前面的那个chunk
                  //因为大小相同的chunk只有一个会被串在nextsize链上
                  //这可以避免额外的bk_nextsize和fd_nextsize的赋值
                  if (victim != last (bin) && victim->size == victim->fd->size)
                    victim = victim->fd;
                  //计算切割后的大小
                  remainder_size = size - nb;
                  unlink (av, victim, bck, fwd);//通过unlink将chunk从链表移除
    ​
                  /* Exhaust */
                  if (remainder_size size |= NON_MAIN_ARENA;
                    }
                  /* Split */
                  else
                    {
                      //如果剩余的大小可以作为一个chunk
                      //获得剩余部分的地址，放入unsorted bin中
                      remainder = chunk_at_offset (victim, nb);
                      /* We cannot assume the unsorted list is empty and therefore
                         have to perform a complete insert here.  */
                      bck = unsorted_chunks (av);
                      fwd = bck->fd;
          if (__glibc_unlikely (fwd->bk != bck))
                        {
                          errstr = "malloc(): corrupted unsorted chunks";
                          goto errout;
                        }
                      remainder->bk = bck;
                      remainder->fd = fwd;
                      bck->fd = remainder;
                      fwd->bk = remainder;
                      if (!in_smallbin_range (remainder_size))
                        {
                          remainder->fd_nextsize = NULL;
                          remainder->bk_nextsize = NULL;
                        }
                      set_head (victim, nb | PREV_INUSE |
                                (av != &main_arena ? NON_MAIN_ARENA : 0));
                      set_head (remainder, remainder_size | PREV_INUSE);
                      set_foot (remainder, remainder_size);
                    }
                  check_malloced_chunk (av, victim, nb);
                  void *p = chunk2mem (victim);
                  alloc_perturb (p, bytes);
                  return p;
                }
            }
源码中提到了unlink的操作，继续分析largebin的unlink操作： 结合着那个图就很好理解了
    #define unlink(AV, P, BK, FD) {                                            \
        FD = P->fd;                                   \
        BK = P->bk;                                   \
        if (__builtin_expect (FD->bk != P || BK->fd != P, 0))             \
          malloc_printerr (check_action, "corrupted double-linked list", P, AV);  \
        else {                                    \
            FD->bk = BK;                                  \
            BK->fd = FD;
    //实现第一重横向脱链，fd和bk层面的
            if (!in_smallbin_range (P->size)                      \
                && __builtin_expect (P->fd_nextsize != NULL, 0)) {            \
            if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)        \
            || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))    \
              malloc_printerr (check_action,                      \
                       "corrupted double-linked list (not small)",    \
                       P, AV);  
                //进行第二重纵向的脱链，fd_nextsize和bk_nextsize
                if (FD->fd_nextsize == NULL) {                    \
                    if (P->fd_nextsize == P)                      \
                    //第1种unlink情况，bin中的size都是相同的
                      FD->fd_nextsize = FD->bk_nextsize = FD;   
                    else {      
                    //第2种unlink情况，size有相同和不同的，但都在一个largebin中
                        FD->fd_nextsize = P->fd_nextsize;                 \
                        FD->bk_nextsize = P->bk_nextsize;                 \
                        P->fd_nextsize->bk_nextsize = FD;                 \
                        P->bk_nextsize->fd_nextsize = FD;                 \
                      }                               \
                  } else {      
                  //第3种unlink情况，bin中的size都是不相同的
                    P->fd_nextsize->bk_nextsize = P->bk_nextsize;             \
                    P->bk_nextsize->fd_nextsize = P->fd_nextsize;             \
                  }                                   \
              }                                   \
          }                                       \
    }
再来看看free状态的largebin的插入是怎么样的：victim就是想要插入的块
    while ((victim = unsorted_chunks (av)->bk) != unsorted_chunks (av))
    {
        bck = victim->bk;
        if (__builtin_expect (chunksize_nomask (victim)  av->system_mem, 0))
                malloc_printerr (check_action, "malloc(): memory corruption",
                                 chunk2mem (victim), av);
        size = chunksize (victim);
    ​
        /*
          If a small request, try to use last remainder if it is the
          only chunk in unsorted bin.  This helps promote locality for
          runs of consecutive small requests. This is the only
          exception to best-fit, and applies only when there is
          no exact fit for a small chunk.
        */
    //我们知道在对unsorted bin检索完毕后，会对里面其他堆块进行bins位置分配。如果堆块是unsorted bin中的最后一个chunk，检索到的chunk的大小适合所请求的chunk，检索到的块是last remainder并且请求的字节小于MIN_LARGE_SIZE，检索到的chunk将被分割成所请求大小的chunk和剩余chunk。请求大小的chunk将返回给用户，剩余的chunk将再次插入unsorted bin中；如果不是最后一个，处理就是，是smallbin大小的就放smallbin，largebin大小的就放largebin，重点看largebin的分配。
        if (in_smallbin_range (nb) &&
            bck == unsorted_chunks (av) &&
            victim == av->last_remainder &&
            (unsigned long) (size) > (unsigned long) (nb + MINSIZE))
        {
            /* split and reattach remainder */
            remainder_size = size - nb;
            remainder = chunk_at_offset (victim, nb);
            unsorted_chunks (av)->bk = unsorted_chunks (av)->fd = remainder;
            av->last_remainder = remainder;
            remainder->bk = remainder->fd = unsorted_chunks (av);
            if (!in_smallbin_range (remainder_size))
            {
                remainder->fd_nextsize = NULL;
                remainder->bk_nextsize = NULL;
            }
    ​
            set_head (victim, nb | PREV_INUSE |
                      (av != &main_arena ? NON_MAIN_ARENA : 0));
            set_head (remainder, remainder_size | PREV_INUSE);
            set_foot (remainder, remainder_size);
    ​
            check_malloced_chunk (av, victim, nb);
            void *p = chunk2mem (victim);
            alloc_perturb (p, bytes);
            return p;
        }
    ​
        /* remove from unsorted list */
        unsorted_chunks (av)->bk = bck;
        bck->fd = unsorted_chunks (av);
    ​
        /* Take now instead of binning if exact fit */
    ​
        if (size == nb)
        {
             set_inuse_bit_at_offset (victim, size);
             if (av != &main_arena)
                 set_non_main_arena (victim);
             check_malloced_chunk (av, victim, nb);
             void *p = chunk2mem (victim);
             alloc_perturb (p, bytes);
             return p;
        }
    ​
        /* place chunk in bin */
        if (in_smallbin_range (size))
        {
            victim_index = smallbin_index (size);
            bck = bin_at (av, victim_index);
            fwd = bck->fd;
        }
        else
        {//这里就是largebin了，分3种插入，如果是比链表中最小的还小，就直接插入末端，如果比最大的大，就插入头结点，如果是处于中间的，就先遍历链表，找到第一个比它大的chunk，然后再实现插入。
            victim_index = largebin_index (size);
            bck = bin_at (av, victim_index);
            fwd = bck->fd;
    ​
            /* maintain large bins in sorted order */
            if (fwd != bck)
            {
                 /* Or with inuse bit to speed comparisons */
                 size |= PREV_INUSE;
                 /* if smaller than smallest, bypass loop below */
                 assert (chunk_main_arena (bck->bk));
                 if ((unsigned long) (size) bk))
                 {
                     fwd = bck;
                     bck = bck->bk;
                     victim->fd_nextsize = fwd->fd;
                     victim->bk_nextsize = fwd->fd->bk_nextsize;
                     fwd->fd->bk_nextsize = victim->bk_nextsize->fd_nextsize = victim;
                  }
                  else
                  {
                      assert (chunk_main_arena (fwd));
                      while ((unsigned long) size fd_nextsize;
                          assert (chunk_main_arena (fwd));
                      }
    ​
                      if ((unsigned long) size == (unsigned long) chunksize_nomask (fwd))
                            /* Always insert in the second position.  */
                            fwd = fwd->fd;
                      else
                      { //重点看插入中间的，这是纵向列表的指针插入
                          victim->fd_nextsize = fwd;
                          victim->bk_nextsize = fwd->bk_nextsize;
                          fwd->bk_nextsize = victim;
                          victim->bk_nextsize->fd_nextsize = victim;
                      }
                      bck = fwd->bk;
                  }
              }
              else
                  victim->fd_nextsize = victim->bk_nextsize = victim;
        }
    //这是横向列表的指针插入
        mark_bin (av, victim_index);
        victim->bk = bck;
        victim->fd = fwd;
        fwd->bk = victim;
        bck->fd = victim;
这里没有什么检查，所以我们可以伪造一个largebin堆块的bk和bk_nextsize，然后在实现assert时，就会把我们伪造的地址看成堆块，并在fake_chunk的fd和fd_nextsize处写入堆地址。
# 二、largebin的攻击原理
这里讲的是先部署好bk和bk_nextsize，当发生assert时，就会产生任意地址写堆地址的漏洞。
核心代码就是之前我们说的这个：p是第一个小于victim的堆块，bck是p的bk，所以链表关系是：
bck--->victim--->fwd，原始的横向列表和纵向列表都是bck--->fwd，即：
bck = fwd-->bk , bck=fwd-->bk_nextsize
而我们要做的利用堆溢出或者UAF漏洞，修改fwd的bk和bk_nextsize为fake_chunk地址，看代码就可以知道：
    else
    {
         victim->fd_nextsize = fwd;
         victim->bk_nextsize = fwd->bk_nextsize;//往victim->bk_nextsize写入fake_chunk地址
         fwd->bk_nextsize = victim;
         victim->bk_nextsize->fd_nextsize = victim;//往fake_chunk的fd_nextsize写入assert的堆地址
    }
    ​
    victim->bk = bck;//往victim-bk写入fake_chunk地址
    victim->fd = fwd;
    fwd->bk = victim;
    bck->fd = victim;//往fake_chunk的fd写入assert的堆地址
所以就是通过修改fwd的bk和bk_nextsize，造成任意地址的fd和fd_nextsize写堆地址的漏洞。这个和unsortedbin
attack有点像，但是又不同。
用how2heap的那个例子看看：
一波伪造，使得0x602840的size为0x3f1，目的是让largebin插进来时，正好在0x602840和0x602840的bk之间，修改0x602840的bk为栈地址，0x602840的bk_nextsize也是栈地址，第一步修改成功了，接着让largebin进来：
可以看到fd的位置(0x7fffffffdcc0)写入了堆地址，fd_nextsize的位置(0x7fffffffdcd0)也写入了堆地址，验证完毕。
# 三、题目演示
LCTF - 2ez4u 2017
保护全开，习惯就好，ida继续分析：
    void sub_1232()
    {
      __int64 savedregs; // [rsp+10h] [rbp+0h]
    ​
      while ( 1 )
      {
        menu();
        read_0();
        switch ( &savedregs )
        {
          case 1u: