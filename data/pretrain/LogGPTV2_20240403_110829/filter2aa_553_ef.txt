else
1362
pq->rear->next = pnew; /* 链接到队列尾端    */
pq->rear = pnew;      /* 记录队列尾端的位置  */
pq->items++;        /* 队列项数加1     */
return true;
}
CopyToNode()函数是静态函数，用于把项拷贝到节点中：
static void CopyToNode(Item item, Node * pn)
{
pn->item = item;
}
从队列的首端删除项，涉及以下几个步骤：
（1）把项拷贝到给定的变量中；
（2）释放空出的节点使用的内存空间；
（3）重置首指针指向队列中的下一个项；
（4）如果删除最后一项，把首指针和尾指针都重置为NULL；
（5）项数减1。
下面的代码完成了这些步骤：
bool DeQueue(Item * pitem, Queue * pq)
{
1363
Node * pt;
if (QueueIsEmpty(pq))
return false;
CopyToItem(pq->front, pitem);
pt = pq->front;
pq->front = pq->front->next;
free(pt);
pq->items--;
if (pq->items == 0)
pq->rear = NULL;
return true;
}
关于指针要注意两点。第一，删除最后一项时，代码中并未显式设置
front指针为NULL，因为已经设置front指针指向被删除节点的next指针。如果
该节点不是最后一个节点，那么它的next指针就为NULL。第二，代码使用
临时指针（pt）储存待删除节点的位置。因为指向首节点的正式指针（pt-
>front）被重置为指向下一个节点，所以如果没有临时指针，程序就不知道
该释放哪块内存。
我们使用DeQueue()函数清空队列。循环调用DeQueue()函数直到队列为
空：
void EmptyTheQueue(Queue * pq)
1364
{
Item dummy;
while (!QueueIsEmpty(pq))
DeQueue(&dummy, pq);
}
注意 保持纯正的ADT
定义ADT接口后，应该只使用接口函数处理数据类型。例如，
Dequeue()依赖EnQueue()函数来正确设置指针和把rear节点的next指针设置为
NULL。如果在一个使用ADT的程序中，决定直接操控队列的某些部分，有
可能破坏接口包中函数之间的协作关系。
程序清单17.7演示了该接口中的所有函数，包括EnQueue()函数中用到的
CopyToItem()函数。
程序清单17.7 queue.c实现文件
/* queue.c -- Queue类型的实现 */
#include 
#include 
#include "queue.h"
/* 局部函数 */
static void CopyToNode(Item item, Node * pn);
static void CopyToItem(Node * pn, Item * pi);
1365
void InitializeQueue(Queue * pq)
{
pq->front = pq->rear = NULL;
pq->items = 0;
}
bool QueueIsFull(const Queue * pq)
{
return pq->items == MAXQUEUE;
}
bool QueueIsEmpty(const Queue * pq)
{
return pq->items == 0;
}
int QueueItemCount(const Queue * pq)
{
return pq->items;
}
bool EnQueue(Item item, Queue * pq)
{
1366
Node * pnew;
if (QueueIsFull(pq))
return false;
pnew = (Node *) malloc(sizeof(Node));
if (pnew == NULL)
{
fprintf(stderr, "Unable to allocate memory!\n");
exit(1);
}
CopyToNode(item, pnew);
pnew->next = NULL;
if (QueueIsEmpty(pq))
pq->front = pnew;     /* 项位于队列的首端   */
else
pq->rear->next = pnew;   /* 链接到队列的尾端   */
pq->rear = pnew;        /* 记录队列尾端的位置  */
pq->items++;          /* 队列项数加1     */
return true;
}
1367
bool DeQueue(Item * pitem, Queue * pq)
{
Node * pt;
if (QueueIsEmpty(pq))
return false;
CopyToItem(pq->front, pitem);
pt = pq->front;
pq->front = pq->front->next;
free(pt);
pq->items--;
if (pq->items == 0)
pq->rear = NULL;
return true;
}
/* 清空队列 */
void EmptyTheQueue(Queue * pq)
{
Item dummy;
while (!QueueIsEmpty(pq))
1368
DeQueue(&dummy, pq);
}
/* 局部函数 */
static void CopyToNode(Item item, Node * pn)
{
pn->item = item;
}
static void CopyToItem(Node * pn, Item * pi)
{
*pi = pn->item;
}
17.4.4 测试队列
在重要程序中使用一个新的设计（如，队列包）之前，应该先测试该设
计。测试的一种方法是，编写一个小程序。这样的程序称为驱动程序
（driver），其唯一的用途是进行测试。例如，程序清单17.8使用一个添加
和删除整数的队列。在运行该程序之前，要确保queue.h中包含下面这行代
码：
typedef int item;
记住，还必须链接queue.c和use_q.c。
程序清单17.8 use_q.c程序
1369
/* use_q.c -- 驱动程序测试 Queue 接口 */
/* 与 queue.c 一起编译          */
#include 
#include "queue.h" /* 定义Queue、Item  */
int main(void)
{
Queue line;
Item temp;
char ch;
InitializeQueue(&line);
puts("Testing the Queue interface. Type a to add a value,");
puts("type d to delete a value, and type q to quit.");
while ((ch = getchar()) != 'q')
{
if (ch != 'a' && ch != 'd') /* 忽略其他输出 */
continue;
if (ch == 'a')
{
printf("Integer to add: ");
1370
scanf("%d", &temp);
if (!QueueIsFull(&line))
{
printf("Putting %d into queue\n", temp);
EnQueue(temp, &line);
}
else
puts("Queue is full!");
}
else
{
if (QueueIsEmpty(&line))
puts("Nothing to delete!");
else
{
DeQueue(&temp, &line);
printf("Removing %d from queue\n", temp);
}
}
1371
printf("%d items in queue\n", QueueItemCount(&line));
puts("Type a to add, d to delete, q to quit:");
}
EmptyTheQueue(&line);
puts("Bye!");
return 0;
}
下面是一个运行示例。除了这样测试，还应该测试当队列已满后，实现
是否能正常运行。
Testing the Queue interface. Type a to add a value,
type d to delete a value, and type q to quit.
a
Integer to add: 40
Putting 40 into queue
1 items in queue
Type a to add, d to delete, q to quit:
a
Integer to add: 20
Putting 20 into queue
1372
2 items in queue
Type a to add, d to delete, q to quit:
a
Integer to add: 55
Putting 55 into queue
3 items in queue
Type a to add, d to delete, q to quit:
d
Removing 40 from queue
2 items in queue
Type a to add, d to delete, q to quit:
d
Removing 20 from queue
1 items in queue
Type a to add, d to delete, q to quit:
d
Removing 55 from queue
0 items in queue
Type a to add, d to delete, q to quit:
1373
d
Nothing to delete!
0 items in queue
Type a to add, d to delete, q to quit:
q
Bye!
1374
17.5 用队列进行模拟
经过测试，队列没问题。现在，我们用它来做一些有趣的事情。许多现
实生活的情形都涉及队列。例如，在银行或超市的顾客队列、机场的飞机队
列、多任务计算机系统中的任务队列等。我们可以用队列包来模拟这些情
形。
假设Sigmund Landers在商业街设置了一个提供建议的摊位。顾客可以购
买1分钟、2分钟或3分钟的建议。为确保交通畅通，商业街规定每个摊位前
排队等待的顾客最多为10人（相当于程序中的最大队列长度）。假设顾客都
是随机出现的，并且他们花在咨询上的时间也是随机选择的（1分钟、2分
钟、3分钟）。那么 Sigmund 平均每小时要接待多少名顾客？每位顾客平均
要花多长时间？排队等待的顾客平均有多少人？队列模拟能回答类似的问
题。
首先，要确定在队列中放什么。可以根据顾客加入队列的时间和顾客咨
询时花费的时间来描述每一位顾客。因此，可以这样定义Item类型。
typedef struct item
{
long arrive;   /* 一位顾客加入队列的时间 */
int processtime; /* 该顾客咨询时花费的时间 */
} Item;
要用队列包来处理这个结构，必须用typedef定义的Item替换上一个示例
的int类型。这样做就不用担心队列的具体工作机制，可以集中精力分析实际
问题，即模拟咨询Sigmund的顾客队列。