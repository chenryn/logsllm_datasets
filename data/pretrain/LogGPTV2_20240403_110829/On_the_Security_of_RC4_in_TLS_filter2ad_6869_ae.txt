creases steadily as the number of sessions S is in-
creased, with all but the last few bytes being reliably
recovered already for 231 trials.
Secondly, we executed the recovery attack in a setting
where plaintexts are encoded with a 4-bits-per-byte en-
coding scheme using the characters ‚Äò0‚Äô to ‚Äò9‚Äô and ‚Äòa‚Äô
to ‚Äòf‚Äô. Such restricted plaintext character sets are rou-
tinely used in different applications [4]; for instance,
in the popular PHP server-side scripting language, the
encoding of HTTP cookies can be limited to a repre-
sentation with 4 bits per character [20]. We reused
the probability estimates {pr,k}1‚â§r‚â§256,0x00‚â§k‚â§0xFF for
the RC4 keystream bytes generated for the simulation
above, and ran a modiÔ¨Åed version of Algorithm 4 which
takes into account the restricted plaintext space. The
modiÔ¨Åed algorithm was run 256 times for each of S =
224,225, . . . ,2 32 sessions. The results for S = 224, S = 226
and S = 228 are shown in Figures 8‚Äì10. For comparison,
the Ô¨Ågures include the success rate of the original attack
for an unrestricted plaintext space. We note:
‚Ä¢ With S = 226 sessions, the Ô¨Årst 112 plaintext bytes
are recovered with rate at least 50% per byte. This
represents a marked improvement over the case of
an unrestricted plaintext space, where only the Ô¨Årst
46 bytes were recovered with rate at least 50% per
byte.
‚Ä¢ With S = 224, . . . ,2 28 sessions, the recovery attack
for the restricted plaintext space has a better success
rate than the recovery attack for the unrestricted
plaintext space with twice the number of sessions
(i.e. S = 225, . . . ,2 29) for almost all positions.
5.2 Simulation of Double-byte Bias Attack
We simulated the second plaintext recovery attack based
on Algorithm 5.
In the simulation, we encrypted S =
1¬∑ 230, . . . ,13 ¬∑ 230 copies of the same 256-byte plaintext
USENIX Association  
22nd USENIX Security Symposium  315
11
1.2"
1"
0.8"
0.6"
0.4"
0.2"
0"
0"
10"
20"
30"
40"
50"
60"
70"
80"
90"
100"
110"
120"
130"
140"
150"
160"
170"
180"
190"
200"
210"
220"
230"
240"
250"
1.2"
1"
0.8"
0.6"
0.4"
0.2"
0"
0"
10"
20"
30"
40"
50"
60"
70"
80"
90"
100"
110"
120"
130"
140"
150"
160"
170"
180"
190"
200"
210"
220"
230"
240"
250"
Figure 8: Recovery rates for the restricted plaintext space
(red) and the original single-byte bias attack (blue) for
S = 224 sessions (based on 256 experiments).
Figure 10: Recovery rates for the restricted plaintext
space (red) and the original single-byte bias attack (blue)
for S = 228 sessions (based on 256 experiments).
1.2"
1"
0.8"
0.6"
0.4"
0.2"
0"
0"
10"
20"
30"
40"
50"
60"
70"
80"
90"
100"
110"
120"
130"
140"
150"
160"
170"
180"
190"
200"
210"
220"
230"
240"
250"
Figure 9: Recovery rates for the restricted plaintext space
(red) and the original single-byte bias attack (blue) for
S = 226 sessions (based on 256 experiments).
and attempted to recover 16 bytes located at a Ô¨Åxed po-
sition in the plaintext. More precisely, we simulated an
attack in which we assume the Ô¨Årst byte of the plaintext
is known, the following 16 bytes are the unknown bytes
targeted by the attack, and the byte immediately follow-
ing these is known. The remaining bytes are assumed
not to be of interest in the attack. This attack scenario is
very similar to the case in which an adversary attempts to
recover a cookie value from an HTTP request. Depend-
ing on the number of plaintext copies, we used between
one and Ô¨Åve 128-bit RC4 keys for the encryption10. As
highlighted in Section 4.2, we used the biases described
by Fluhrer-McGrew [12] to compute the probability esti-
mates {pr,k1,k2}1‚â§r‚â§255,0x00‚â§k1,k2‚â§0xFF required by Algo-
rithm 5.
The attack was run 128 times for each of S = 1 ¬∑
230, . . . ,13 ¬∑ 230 encrypted copies of the plaintext to esti-
mate the success rate of the attack. The results are shown
in Figure 11: the dashed line shows the average fraction
of successfully recovered plaintext bytes versus the num-
ber of encrypted plaintexts, whereas the solid line shows
the success rate of recovering the full 16-byte plaintext
versus the number of encrypted plaintexts. We note:
‚Ä¢ With S = 6 ¬∑ 230 encrypted copies of the plaintext,
more than 50% of the plaintext is correctly recov-
ered on average. Furthermore, in 19% of the 128
trials, the full 16-byte plaintext was recovered.
‚Ä¢ With S = 8 ¬∑ 230 encrypted copies of the plaintext,
the full plaintext is correctly recovered in signiÔ¨Å-
cantly more than 50% of the 128 trials (more pre-
cisely, the full plaintext was recovered in 72% of
the trials).
‚Ä¢ With S = 13¬∑ 230 the full plaintext was recovered in
all trials.
‚Ä¢ The rate at which the full plaintext is correctly re-
covered increases fairly rapidly after S = 5 ¬∑ 230
copies of the plaintext are encrypted, and with S =
11¬∑ 230, the full plaintext is correctly recovered in
nearly all trials (99%).
In addition, similar to Section 5.1, we simulated
the attack for plaintexts encoded with a 6-bits-per-byte
(base64) and a 4-bits-per-byte encoding scheme. Specif-
ically, we Ô¨Årstly ran a modiÔ¨Åed version of Algorithm 5
which takes into account the restricted plaintext space by
only considering candidate plaintext bytes which corre-
spond to byte-values used in a base64 encoding. Fur-
thermore, we used a plaintext where the 16 bytes tar-
geted by the attack consisted of bytes with a byte-value
corresponding to the character ‚Äòb‚Äô, which is a valid
base64 encoded message. As in the attack above for a
non-restricted plaintext space, the probability estimates
{pr,k1,k2}1‚â§r‚â§255,0x00‚â§k1,k2‚â§0xFF were based on the biases
from [12]. The attack was run 128 times for each of
316  22nd USENIX Security Symposium 
USENIX Association
12





	






	









	





	






	









	
Figure 11: Average fraction of successfully recovered
plaintext bytes (dashed line), and success rate for recov-
ering the full 16-byte plaintext (solid line) of the double-
byte bias attack based on 128 experiments. The unit of
the x-axis is 230 encrypted copies of the plaintext.
Figure 13: Average fraction of successfully recovered
plaintext bytes (dashed line), and success rate for re-
covering the full 16-byte plaintext (solid line) of the
double-byte bias attack for 4-bit-per-byte encoded plain-
texts (based on 128 experiments). The unit of the x-axis
is 230 encrypted copies of the plaintext.





	






	









	
Figure 12: Average fraction of successfully recovered
plaintext bytes (dashed line), and success rate for recov-
ering the full 16-byte plaintext (solid line) of the double-
byte bias attack for base64 encoded plaintexts (based on
128 experiments). The unit of the x-axis is 230 encrypted
copies of the plaintext.
S = 1¬∑ 230, . . . ,12¬∑ 230 encrypted copies of the plaintext,
and the results are shown in Figure 12. We note:
‚Ä¢ With S = 4 ¬∑ 230 encrypted copies of the plaintext,
more than 50% of the plaintext is correctly recov-
ered on average. Furthermore, in 4% of the 128 tri-
als, the full 16-byte plaintext is recovered.
‚Ä¢ With S = 6 ¬∑ 230 encrypted copies of the plaintext,
the full plaintext is correctly recovered in 50% of
the 128 trials.
‚Ä¢ With S = 10¬∑ 230 encrypted copies of the plaintext,
the full plaintext is correctly recovered in nearly all
trials (98%).
Regarding the 4-bit-per-byte encoding scheme, we
again assumed a plaintext character set consisting of
‚Äò0‚Äô to ‚Äò9‚Äô and ‚Äòa‚Äô to ‚Äòf‚Äô. The setup was similar to the
above experiment for base64 encoded messages: we ran
a modiÔ¨Åed version of Algorithm 5 which takes into ac-
count the restricted plaintext space, the probability esti-
mates {pr,k1,k2}1‚â§r‚â§255,0x00‚â§k1,k2‚â§0xFF was based on the
biases from [12], and we used a plaintext consisting
of bytes with a byte-value corresponding to the char-
acter ‚Äòb‚Äô. The attack was run 128 times for each of
S = 1¬∑ 230, . . . ,10¬∑ 230 encrypted copies of the plaintext,
and the results can be seen in Figure 13. We note:
‚Ä¢ With S = 3 ¬∑ 230 encrypted copies of the plaintext,
signiÔ¨Åcantly more than 50% of the plaintext is cor-
rectly recovered on average (more precisely, 72% is
recovered correctly on average).
‚Ä¢ With S = 5 ¬∑ 230 encrypted copies of the plaintext,
the full plaintext is recovered in more than 50% of
the 128 trials.
‚Ä¢ With S = 8 ¬∑ 230 encrypted copies of the plaintext,
the full plaintext is recovered in nearly all trials
(98%).
5.3 Practical Validation
We tested the success rates of our plaintext recovery al-
gorithms in realistic attack settings involving web servers
and browsers that are connected through TLS-secured
network links. Here, we report on the results.
5.3.1 Validating the operation of RC4 in TLS
We Ô¨Årst experimentally veriÔ¨Åed that the OpenSSL im-
plementation of TLS does indeed use RC4 in the way
USENIX Association  
22nd USENIX Security Symposium  317
13
explained in Section 2.2, in particular without discard-
ing any initial keystream bytes. We did this by setting
up an OpenSSL version 1.0.1c client and server running
in a virtualised environment, making use of s client
and s server, generic tools that are available as part
of the OpenSSL distribution package. The two virtual
machines were running Ubuntu 12.10 and kernel version
3.5.0-17.
5.3.2 Validating the single-byte bias attack