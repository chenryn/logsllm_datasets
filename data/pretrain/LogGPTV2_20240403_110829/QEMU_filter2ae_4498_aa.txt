# QEMU逃逸初探（一）
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 00 前言
在 HWS2021 入营选拔比赛的时候，遇到了一道 QEMU 逃逸的题目，那个时候就直接莽上去分析了一通，东拼西凑的把 EXP
写了出来。但实际上并没有怎么理解其具体是怎么实现的，有些操作这样做背后的原理是什么。而通常我对于比赛过程中学习到的内容，都会通过写详细的 Writeup
的这个过程来系统的学习。但是 QEMU 逃逸这部分的内容实在是比较复杂，而且涉及到了很多我完全没有了解过的知识，所以一直鸽到了现在。
里面的大多数内容和图片，都是我从看到的博客或者维基百科中整理收集的，具体链接可以看下文中的参考资料，非常感谢这些内容的制作者为我们初学者提供了学习的平台和资料。
## 01 基础知识
###  1.1 QEMU
简单的来说，QEMU 就是一个开源的模拟器和虚拟机，通过动态的二进制转换来模拟 CPU。
**1.1.1 QEMU 有多种运行的模式**
  * User mode：用户模式，在这种模式下，QEMU 运行某个单一的程序，并且适配其的系统调用。通常我们遇到的异构 PWN 题都会使用这种模式，这种模式可以简单轻便的模拟出其他架构程序的执行过程，使做题人的重心倾斜于分析异构的题目文件上，而不是转换过程中。
  * System mode：系统模式，在这种模式下，QEMU 可以模拟出一个完整的计算机系统。通常我们遇到的 QEMU 逃逸的题目都会使用这种模式，并且把漏洞点以有漏洞的设备的形式出现，通常漏洞会有数组越界、栈溢出、任意调用指针函数、函数重入等漏洞。
  * KVM Hosting
  * Xen Hosting
**1.1.2 QEMU 的内存结构**
qemu 使用 mmap 为虚拟机申请出相应大小的内存，当做虚拟机的物理内存，且这部分内存没有执行权限（PROT_EXEC）
**1.1.3 QEMU 的地址翻译**
在 QEMU 中存在两个转换层，分别是：
  * 从用户虚拟地址到用户物理地址：这一层转换是模拟真实设备中所需要的虚拟地址和物理地址而存在的，所以我们也可以通过分析转换规则，编写程序来模拟这一层转换。
  * 从用户物理地址到 QEMU 的虚拟地址空间：这一层是把用户的物理地址转换为 QEMU 上使用 mmap 申请出的地址空间，这部分空间的内容与用户的物理地址逐一对应，所以我们只需要知道 QEMU 上使用 mmap 申请出的地址空间的初始地址，再加上用户物理地址，就可以得到此地址对应的在 QEMU 中的虚拟地址。
在 x64 系统上，虚拟地址由 page offset (bits 0-11) 和 page number 组成，/proc/$pid/pagemap
这个文件中储存着此进程的页表，让用户空间进程可以找出每个虚拟页面映射到哪个物理帧（需要 CAP_SYS_ADMIN 权限），它包含一个 64
位的值，包含以下的数据。
  * Bits 0-54 page frame number (PFN) if present
  * Bits 0-4 swap type if swapped
  * Bits 5-54 swap offset if swapped
  * Bit 55 pte is soft-dirty (see Documentation/vm/soft-dirty.txt)
  * Bit 56 page exclusively mapped (since 4.2)
  * Bits 57-60 zero
  * Bit 61 page is file-page or shared-anon (since 3.5)
  * Bit 62 page swapped
  * Bit 63 page present
以下程序通过读取这个文件实现了一个转换过程
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define PAGE_SHIFT  12
    #define PAGE_SIZE   (1 > 9) & ~7;
        lseek(fd, offset, SEEK_SET);
        read(fd, &pme, 8);
        if (!(pme & PFN_PRESENT))
            return -1;
        gfn = pme & PFN_PFN;
        return gfn;
    }
    uint64_t gva_to_gpa(void *addr)
    {
        uint64_t gfn = gva_to_gfn(addr);
        assert(gfn != -1);
        return (gfn config_read 和 pci_dev->config_write ，如果在类构造函数中设置了则用设置的，否则使用默认函数 pci_default_read_config / pci_default_write_config
**pci_register_bar**
  * 将 BAR 中的 Base Address 设置为全 FF
**pci_do_device_reset**
  * 对设备进行清理和设置
**pci_default_read_config**
  * 读取 Config，从 cpu->kvm_run 中取出 io 信息
**pci_default_write_config**
  * 设置 Config，且设置的值通过以下变换
其中 wmask 取决于 size ，w1cmask 是保证对应位置为 1
    uint64_t wmask = ~(size - 1)
    pci_set_long(pci_dev->wmask + addr, wmask & 0xffffffff);
    for (i = 0; i >= 8, ++i) {
        uint8_t wmask = d->wmask[addr + i];   
        uint8_t w1cmask = d->w1cmask[addr + i];
        assert(!(wmask & w1cmask));
        d->config[addr + i] = (d->config[addr + i] & ~wmask) | (val & wmask);
        d->config[addr + i] &= ~(val & w1cmask); /* W1C: Write 1 to Clear */
    }
**pci_update_mappings**
遍历设备的 BAR，如果发现 BAR 中已经填写了不同于 r->addr 的地址，则说明新的地址已经更新，则会更新并重新注册地址。
**1.3.2 配置的读取和写入**
一般在软件实现上使用两种方法：一种是通过 I/O 地址 PCI CONFIG_ADDRESS（0xCF8）和 PCI
CONFIG_DATA（0xCFC）的传统方法，另一种是为 PCIe 创建的内存映射方法。
**传统方法想要写入配置需要分为两步**
  1. 通过 CONFIG_ADDRESS（0xCF8 端口） 设置目标设备地址：将要操作的设备寄存器的地址写入 CONFIG_ADDRESS
  2. 通过 CONFIG_DATA（0xCFC 端口） 来写值：将应该写入的数据放入 CONFIG_DATA 寄存器
由于此过程需要写入寄存器才能写入设备的寄存器，因此称为“间接写入”。
**传统方法想要读取配置也需要分为两步**
  1. 通过 CONFIG_ADDRESS（0xCF8 端口） 设置目标设备地址：将要操作的设备寄存器的地址写入 CONFIG_ADDRESS
  2. 通过 CONFIG_DATA（0xCFC 端口） 来读值
同时我们结合上面说明过的对 I/O 地址的操作方法，在这里我们就可以使用 outb, outw, outl 来对上述端口写值；用 inb，inw，inl
来读值。
可以参考以下操作系统中读取 PCI 设备的配置空间方法
    uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot, uint8_t func, uint8_t offset) {
        uint32_t address;
        uint32_t lbus  = (uint32_t)bus;
        uint32_t lslot = (uint32_t)slot;
        uint32_t lfunc = (uint32_t)func;
        uint16_t tmp = 0;
        /* create configuration address as per Figure 1 */
        address = (uint32_t)((lbus > ((offset & 2) * 8)) & 0xffff);
        return (tmp);
    }
**1.3.3 qtest 中的 PCI 设备初始化**
如果 QEMU 是使用 qtest 启动，而不是通过整个系统镜像，那么这时的 PCI 设备初始的并不完全，我们需要手动调用 qtest
中的指令对设备配置读写，来往 BAR 上写 MMIO 的地址。其中使用的方法是通过 I/O 地址 PCI CONFIG_ADDRESS（0xCF8）和
PCI CONFIG_DATA（0xCFC）来间接写入。
所以初始化的步骤应该是（以 MMIO 为例）：
  1. 将 MMIO 地址写入设备的 BAR0 地址
  2. 将命令写入设备的 COMMAND 地址，触发 pci_update_mappings 来重新注册 BAR0 地址
其中 COMMAND 的命令定义如下：
通常的设置都是选择 0x103，也就是设置 SERR#Enable，Memory space 和 IO space。如果要正确使用 DMA，则还需要设置
Bit 2 Bus Master，也就是写入 0x107。
最终需要执行的命令可以参考如下
    outl 0xcf8 0x80001010
    outl 0xcfc 0xfebc0000
    outl 0xcf8 0x80001004
    outw 0xcfc 0x107
其中 0x80001000 为设备配置的地址，可以根据上文中 **PCI 设备配置的地址** 所给出的结构计算得到，0x10 偏移处为 BAR0，0x4
偏移处为 COMMAND。
假设 MMIO 地址选择的是 0xfebc0000，那么最终 BAR0 基址会被设置为 0xfeb00000，以该地址为基址进行读写就能够触发 MMIO
函数。
**1.3.4 QEMU 中查看 PCI 设备**
查看设备的方法可以分为两种，lspci 命令和 info pci。