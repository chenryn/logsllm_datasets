          print("login failed!")
        end
      end
      function self.run()
        while true do
          io.write("$")
          local ops = io.read("*l")
          if ops == "login" then
            self.login()
          elseif ops == "info" then
            self.info()
          elseif ops == "add" then
            if self.is_login == 1 then
              print("size?")
              size = io.read("*number")
              idx = add_data(size)
              print("Data index: " .. idx)
            else
              print("login first...")
            end
          elseif ops == "del" then
            if self.is_login == 1 then
              print("index?")
              index = io.read("*number")
              delete_data(index)
            else
              print("login first...")
            end
          elseif ops == "get" then
            if self.is_login == 1 then
              print("index?")
              index = io.read("*number")
              get_data(index)
            else
              print("login first...")
            end
          elseif ops == "help" then
            print("commands:")
            print("login")
            print("info")
            print("add")
            print("del")
            print("get")
            print("exit")
          elseif ops == "exit" then
            print("exit")
            break
          end
        end
      end
      ServerInit()
      return self
    end
    function main()
      alarm(60)
      local pwn = Pwnsky("pwnsky cloud cache 1.0")
      pwn:print_logo()
      pwn:info()
      pwn:init()
      pwn:run()
    end
可以看到程序的主函数逻辑是用lua写的，调用的相关函数是在pwn程序实现的，pwn程序启动首先加载lua.bin解析lua程序，
    __int64 __fastcall sub_1DE9(__int64 a1, __int64 a2)
    {
      __int64 v3; // [rsp+0h] [rbp-10h]
      v3 = luaL_newstate(a1, a2);
      luaL_openlibs(v3);
      if ( (unsigned int)luaL_loadfilex(v3, "lua.bin", 0LL)
        || (unsigned int)lua_pcallk(v3, 0LL, 0xFFFFFFFFLL, 0LL, 0LL, 0LL) )
      {
        puts("n");
      }
      lua_pushcclosure(v3, sub_1C51, 0LL);
      lua_setglobal(v3, "print_logo");
      lua_pushcclosure(v3, init_0, 0LL);
      lua_setglobal(v3, "init");
      lua_pushcclosure(v3, login, 0LL);
      lua_setglobal(v3, "login");
      lua_pushcclosure(v3, alarm_0, 0LL);
      lua_setglobal(v3, "alarm");
      lua_pushcclosure(v3, add_data, 0LL);
      lua_setglobal(v3, "add_data");
      lua_pushcclosure(v3, delete, 0LL);
      lua_setglobal(v3, "delete_data");
      lua_pushcclosure(v3, get_data, 0LL);
      lua_setglobal(v3, "get_data");
      return v3;
###  解题准备(patchelf,去除chroot)
结合给出的start文件(hint是比赛过程中放的)：
    sudo chroot ./file/ ./pwn 
    hint1: 不要太依赖于F5哦。 hint2: 解密算法就是加密算法。
    hint3: 需要在sub_17BB和sub_143A函数去除花指令，使其F5能够正确反编译。
可以看到程序需要chroot到当前文件夹，那么问题来了，有chroot
怎么用gdb怎么调试呢？太菜的我选择了将程序`lua.bin`改成`./lua.bin`,然后把依赖库放到/lib相应目录下，其实就一个lua的依赖库。我本地也是2.31的，这样就不用chroot了，可以直接运行。如果有大佬知道怎么不用patchelf路径就能gdb调试，请分享一下偶。
###  去除花指令
根据提示知道sub_17BB和sub_143A存在花指令，我说半天找不到关键函数。sub_17BB在有漏洞的地方加了花指令，使得ida反编译找看不出漏洞代码；在sub_143A函数加了花指令，使得ida分析login函数逻辑失败，查看代码发现sub_17BB函数有一场数据块可能是关键代码：
    .text:00000000000019AC                 mov     eax, 0
    .text:00000000000019B1                 call    _printf
    .text:00000000000019B6                 lea     r8, loc_19BD                         
    .text:00000000000019BD
    .text:00000000000019BD loc_19BD:                               ; DATA XREF: sub_17BB+1FB↑o
    .text:00000000000019BD                 push    r8
    .text:00000000000019BF                 add     [rsp+38h+var_38], 0Dh
    .text:00000000000019C4                 retn
    .text:00000000000019C4 ; ---------------------------------------------------------------------------    .text:00000000000019C5                 db 0E9h, 23h, 0C5h
    .text:00000000000019C8                 dq 3DAF058D480000h, 48D26348E0558B00h, 0C08400B60FD0048Bh
    .text:00000000000019C8                 dq 3D97058D482A75h, 48D26348E0558B00h, 48F0458B48D0148Bh           
    .text:00000000000019C8                 dq 4800000001BAD001h, 0E800000000BFC689h, 1B8FFFFF724h
    .text:0000000000001A10                 db 0
    .text:0000000000001A11 ; ---------------------------------------------------------------------------    .text:0000000000001A11
    .text:0000000000001A11 loc_1A11:                               ; CODE XREF: sub_17BB+50↑j
可以看到异常数据块前有一些异常代码，将下一条命令地址赋给r8，然后入栈，rsp向下移动0xd，return，相当于啥没做，把0x19b6到0x19c4代码nop掉，还原逻辑如下：
    .text:000000000000199F 48 89 C6                                mov     rsi, rax
    .text:00000000000019A2 48 8D 05 03 17 00 00                    lea     rax, aGiftLlx   ; "gift: %llx\n"
    .text:00000000000019A9 48 89 C7                                mov     rdi, rax        ; format
    .text:00000000000019AC B8 00 00 00 00                          mov     eax, 0
    .text:00000000000019B1 E8 1A F7 FF FF                          call    _printf
    .text:00000000000019B6 90                                      nop                     ; Keypatch filled range [0x19B6:0x19C4] (15 bytes), replaced:
    .text:00000000000019B6                                                                 ;   lea r8, loc_19BD
    .text:00000000000019B6                                                                 ;   push r8
    .text:00000000000019B6                                                                 ;   add [rsp+38h+var_38], 0Dh
    .text:00000000000019B6                                                                 ;   retn
    .text:00000000000019B7 90                                      nop
    .text:00000000000019B8 90                                      nop
    .text:00000000000019B9 90                                      nop
    .text:00000000000019BA 90                                      nop
    .text:00000000000019BB 90                                      nop
    .text:00000000000019BC 90                                      nop
    .text:00000000000019BD 90                                      nop
    .text:00000000000019BE 90                                      nop
    .text:00000000000019BF 90                                      nop
    .text:00000000000019C0 90                                      nop
    .text:00000000000019C1 90                                      nop
    .text:00000000000019C2 90                                      nop
    .text:00000000000019C3 90                                      nop
    .text:00000000000019C4 90                                      nop
    .text:00000000000019C5 90                                      nop                     ; Keypatch modified this from:
    .text:00000000000019C5                                                                 ;   jmp near ptr 0DEEDh
    .text:00000000000019C5                                                                 ; Keypatch padded NOP to next boundary: 4 bytes
    .text:00000000000019C6 90                                      nop
    .text:00000000000019C7 90                                      nop
    .text:00000000000019C8 90                                      nop
    .text:00000000000019C9 90                                      nop
    .text:00000000000019CA 48 8D 05 AF 3D 00 00                    lea     rax, qword_5780
    .text:00000000000019D1 8B 55 E0                                mov     edx, [rbp+var_20]
    .text:00000000000019D4 48 63 D2                                movsxd  rdx, edx
    .text:00000000000019D7 48 8B 04 D0                             mov     rax, [rax+rdx*8]
    .text:00000000000019DB 0F B6 00                                movzx   eax, byte ptr [rax]
    .text:00000000000019DE 84 C0                                   test    al, al
另一个函数同样方法去花。
###  程序分析及功能
关键的功能有以下几个：
  1. login。用户名1000、密码为418894113通过验证；可还原异或加密（流加密）。
  2. add。申请一个chunk，个数0-100，有非空检查，size在0-4096之间会将chunk地址、size写到bss段，如果data[0]=0,则会多读一个字节，造成offbyone。
  3. get。输出非空chunk的context
  4. del。删除非空chunk。指针置零，不存在UAF。
init_0函数：
    unsigned __int64 sub_1617()
    {
      unsigned __int64 v1; // [rsp+8h] [rbp-8h]
      v1 = __readfsqword(0x28u);
      init_setvbuf();
      seccomp(); //沙箱seccomp_rule_add(v1, 0LL, 59LL, 0LL); 禁用59号中断，不能getshell
      init_key();//初始化key
      return v1 - __readfsqword(0x28u);
    }
login函数：
    __int64 __fastcall sub_1663(__int64 a1)
    {
      __int64 result; // rax
      __int64 pass[2]; // [rsp+10h] [rbp-10h] BYREF
      pass[1] = __readfsqword(0x28u);
      if ( (unsigned int)lua_isnumber(a1, 0xFFFFFFFFLL) )
      {
        LODWORD(pass[0]) = (int)lua_tonumberx(a1, 0xFFFFFFFFLL, 0LL);
        lua_settop(a1, 4294967294LL);
        if ( (unsigned int)lua_isnumber(a1, 0xFFFFFFFFLL) )
        {
          HIDWORD(pass[0]) = (int)lua_tonumberx(a1, 0xFFFFFFFFLL, 0LL);
          lua_settop(a1, 4294967294LL);
          encode(&key, pass, 4LL);                  // 0x6b8b4567327b23c6 key调试得到，真正生成的是在init函数中根据随机数生成的，不过是固定死的srand(0);
          if ( pass[0] == 0x3E8717E5E48LL )        //这里ida反编译有点问题，实际上是pass[0]==0x3e8&&pass[1]==0x717e5e48,可以看汇编看出
            lua_pushinteger(a1, 1LL);
          else
            lua_pushinteger(a1, 0LL);
          result = 1LL;
        }
        else
        {
          error(
            a1,
            (int)"In function: login, account argument must a number",
            "In function: login, account argument must a number");
          result = 0LL;
        }
      }
      else
      {
        error(
          a1,
          (int)"In function: login, password argument must a number",
          "In function: login, password argument must a number");
        result = 0LL;
      }
      return result;
    }
    unsigned __int64 __fastcall encode(__int64 *key, __int64 pass, unsigned __int64 len)
    {
      unsigned __int8 v5; // [rsp+23h] [rbp-1Dh]
      int i; // [rsp+24h] [rbp-1Ch]
      __int64 v7; // [rsp+30h] [rbp-10h] BYREF
      unsigned __int64 v8; // [rsp+38h] [rbp-8h]
      v8 = __readfsqword(0x28u);
      v7 = *key;
      for ( i = 0; len > i; ++i )
      {
        v5 = *((_BYTE *)&v7 + (((_BYTE)i + 2) & 7)) * (*((_BYTE *)&v7 + (i & 7)) + *((_BYTE *)&v7 + (((_BYTE)i + 1) & 7)))
           + *((_BYTE *)&v7 + (((_BYTE)i + 3) & 7));
        *(_BYTE *)(i + pass) ^= v5 ^ table[v5];
        *((_BYTE *)&v7 + (i & 7)) = 2 * v5 + 3;
        if ( (i & 0xF) == 0 )
          sub_143A(key, &v7, table[(unsigned __int8)i]);//反编译问题，v7是返回值，参数是key和table[i&0xff]
      }
      return v8 - __readfsqword(0x28u);
    }
    unsigned __int64 __fastcall sub_143A(__int64 a1, __int64 a2, char a3)
    {
      int i; // [rsp+24h] [rbp-Ch]
      unsigned __int64 v5; // [rsp+28h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      for ( i = 0; i  0 && size  0 )