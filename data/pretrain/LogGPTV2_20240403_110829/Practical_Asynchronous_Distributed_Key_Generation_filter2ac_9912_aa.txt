# Practical Asynchronous Distributed Key Generation

**Authors:**
- Sourav Das
- Thomas Yurek
- Zhuolun Xiang
- Andrew K. Miller
- Lefteris Kokoris-Kogias
- Ling Ren

**Affiliations:**
- University of Illinois at Urbana-Champaign
- IST Austria

**Contact:**
- {souravd2, yurek2, xiangzl, soc1024, renling}@illinois.edu
- PI:EMAIL

**Abstract:**
Distributed Key Generation (DKG) is a technique for bootstrapping threshold cryptosystems without relying on a trusted third party. It is a fundamental building block in decentralized protocols such as randomness beacons, threshold signatures, and general multiparty computation. Until recently, DKG protocols have assumed a synchronous model, making them vulnerable when network assumptions are not met. Recent advancements in asynchronous DKG (ADKG) protocols have been insufficient due to poor efficiency or limited functionality, leading to a lack of practical implementations.

In this paper, we present a simple and concretely efficient ADKG protocol. In a network of \( n \) nodes, our ADKG protocol can tolerate up to \( t < \frac{n}{3} \) malicious nodes and has an expected communication cost of \( O(\kappa n^3) \), where \( \kappa \) is the security parameter. Our ADKG protocol generates a field element as the secret, making it compatible with off-the-shelf threshold cryptosystems. We implement our ADKG protocol and evaluate it using a network of up to 128 geographically distributed AWS instances. Our evaluation shows that our protocol terminates in as little as 3 seconds for 32 nodes and 9.5 seconds for 64 nodes. Additionally, each node sends only 0.7 MB and 2.9 MB of data during the two experiments, respectively.

## I. Introduction

A Distributed Key Generation (DKG) protocol enables a set of mutually distrustful nodes to jointly generate a public/private key pair. The private key is secret-shared among the nodes via a threshold secret sharing scheme and is never reconstructed or stored at a single node. The secret-shared private keys can later be used in a threshold cryptosystem, e.g., to produce threshold signatures, decrypt ciphertexts of threshold encryption, or generate common coins for consensus.

The increasing demand for decentralized Byzantine Fault Tolerant (BFT) applications over the Internet has revived interest in DKG protocols. Many state-of-the-art BFT protocols use threshold signatures to improve communication efficiency and/or threshold encryptions to prevent censorship. For asynchronous BFT protocols, which assume no bounded message delay, shared randomness is required to circumvent the FLP impossibility. All these threshold cryptographic primitives require nodes to have secret shares of a private key. Relying on a trusted dealer for bootstrapping these systems is naive and can lead to a single point of failure. A DKG protocol is necessary to bootstrap these threshold cryptographic primitives while avoiding any central trust.

Numerous DKG protocols exist for synchronous networks, but only a few recent works have explored DKG for asynchronous networks, which we call asynchronous DKG (ADKG). Kokoris et al. [43] presented the first ADKG protocol, which uses \( n \) concurrent high-threshold asynchronous complete secret sharing (ACSS) schemes to construct an ADKG protocol with an expected total communication cost of \( O(\kappa n^4) \) and terminates in \( O(n) \) rounds. Recently, Abraham et al. [4] proposed a special-purpose ADKG protocol with an expected total communication cost of \( O(\kappa n^3 \log n) \), later improved to \( O(\kappa n^3) \) by Gao et al. [28] and Das et al. [19]. These ADKG schemes are considered special-purpose because the distributed secret key is a group element rather than a field element, limiting their compatibility with most off-the-shelf threshold encryption or signature protocols.

### Our Results

In this paper, we design a new, simple, and concretely efficient ADKG protocol for discrete logarithm-based threshold cryptosystems. In an asynchronous network of \( n \geq 3t + 1 \) nodes, where at most \( t \) nodes could be malicious, our ADKG protocol achieves an expected communication cost of \( O(\kappa n^3) \) and terminates in \( O(\log n) \) rounds. This improves upon the prior known general-purpose ADKG protocol of Kokoris-Kogias et al. [43] by a factor of \( n \) in communication and a factor of \( \frac{n}{\log n} \) in expected runtime. Our protocol assumes a Random Oracle (RO) and PKI (PKI needed only for our ACSS construction).

At the end of our protocol, each node receives a threshold secret share of a randomly chosen secret \( z \in \mathbb{Z}_q \), where \( \mathbb{Z}_q \) is a field of size \( q \). Thus, our protocol is compatible with off-the-shelf discrete-logarithm-based threshold cryptosystems. Our protocol also supports any reconstruction threshold \( \ell \in [t + 1, n - t] \), i.e., \( \ell \) nodes are required to use the secret key \( z \) (e.g., to produce a threshold signature or decrypt a threshold encryption). To achieve this property efficiently, we design a new additively homomorphic high-threshold scheme.

**Table I: Comparison of Existing DKG Protocols**

| Protocol | Network | Communication Cost | Round Complexity | Computation Cost (Group Exponentiations) |
|----------|---------|--------------------|------------------|------------------------------------------|
| Gennaro et al. [31] | Synchronous | \( B(L) \) | \( R \) | - |
| Canetti et al. [13] | Synchronous | \( B(L) \) | \( R \) | - |
| Fouque-Stern [26] | Synchronous | \( B(L) \) | \( R \) | - |
| Neji et al. [47] | Synchronous | \( B(L) \) | \( R \) | - |
| Gurkan et al. [37] | Synchronous | \( B(L) \) | \( R \) | - |
| Groth [35] | Synchronous | \( B(L) \) | \( R \) | - |
| Kokoris et al. [43] | Asynchronous | \( O(\kappa n^4) \) | \( O(n) \) | - |
| Abraham et al. [4] | Asynchronous | \( O(\kappa n^3 \log n) \) | - | - |
| Gao et al. [28] | Asynchronous | \( O(\kappa n^3) \) | - | - |
| Das et al. [19] | Asynchronous | \( O(\kappa n^3) \) | - | - |

**Note:**
- \( B(L) \): Communication cost of Byzantine broadcast of \( L \)-bit message.
- \( R \): Round complexity of Byzantine broadcast.
- Computation cost is measured in terms of the number of group exponentiations.

**Copyright Notice:**
Â© 2022, Sourav Das. Under license to IEEE.
DOI 10.1109/SP46214.2022.00120

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022, at 12:34:29 UTC from IEEE Xplore. Restrictions apply.**