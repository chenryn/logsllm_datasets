title:Practical Asynchronous Distributed Key Generation
author:Sourav Das and
Thomas Yurek and
Zhuolun Xiang and
Andrew K. Miller and
Lefteris Kokoris-Kogias and
Ling Ren
4
8
5
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Practical Asynchronous Distributed Key Generation
Sourav Das∗, Thomas Yurek∗, Zhuolun Xiang∗, Andrew Miller∗, Lefteris Kokoris-Kogias†, and Ling Ren∗
∗University of Illinois at Urbana-Champaign, †IST Austria
{souravd2, yurek2, xiangzl, soc1024, renling}@illinois.edu, PI:EMAIL
Abstract—Distributed Key Generation (DKG) is a technique
to bootstrap threshold cryptosystems without a trusted third
party and is a building block to decentralized protocols such
as randomness beacons, threshold signatures, and general
multiparty computation. Until recently, DKG protocols have
assumed the synchronous model and thus are vulnerable when
their underlying network assumptions do not hold. The recent
advancements in asynchronous DKG protocols are insufﬁcient
as they either have poor efﬁciency or limited functionality,
resulting in a lack of concrete implementations.
In this paper, we present a simple and concretely efﬁcient
asynchronous DKG (ADKG) protocol. In a network of n nodes,
our ADKG protocol can tolerate up to t < n/3 malicious nodes
and have an expected O(κn3) communication cost, where κ
is the security parameter. Our ADKG protocol produces a
ﬁeld element as the secret and is thus compatible with off-
the-shelf threshold cryptosystems. We implement our ADKG
protocol and evaluate it using a network of up to 128 nodes
in geographically distributed AWS instances. Our evaluation
shows that our protocol takes as low as 3 and 9.5 seconds to
terminate for 32 and 64 nodes, respectively. Also, each node
sends only 0.7 Megabytes and 2.9 Megabytes of data during
the two experiments, respectively.
I. INTRODUCTION
A Distributed Key Generation (DKG) protocol enables
a set of mutually distrustful nodes to jointly generate a
public/private key pair. The private key is secret-shared
among the nodes via a threshold secret sharing scheme
and is never reconstructed or stored at a single node. The
secret-shared private keys can later be used in a threshold
cryptosystem, e.g., to produce threshold signatures [9], [31],
to decrypt ciphertexts of threshold encryption [21], [42] or to
generate common coins [12] for consensus [41], [29], [30],
[18], [32].
The increasing demand for decentralized Byzantine Fault
Tolerant (BFT) applications over the Internet revived in-
terests in DKG protocols. Many state-of-the-art BFT pro-
tocols use threshold signatures to improve communication
efﬁciency [57], [5], [44], [29] and/or threshold encryptions
to prevent censorship [45], [22], [44], [36]. For asynchronous
BFT protocols [45], [22], [27], [44], [36], [41] that assume
no bounded message delay, shared randomness is required to
circumvent the FLP impossibility [25]. All of these threshold
cryptographic primitives require nodes to have secret shares
of a private key. The naïve way to bootstrap them is to
rely on a trusted dealer whose corruption will break the
entire system. A DKG protocol is necessary to bootstrap
the above threshold cryptographic primitives while avoiding
any central trust or single point of failure.
Numerous DKG protocols are known when the underlying
network is synchronous [50], [13], [26], [14], [31], [47],
[37], [53], [35] (see §IX). In contrast, only a handful of
recent works have looked into DKG for asynchronous net-
works, which we call asynchronous DKG (ADKG) [43], [4],
[28], [19]. Kokoris et al. [43] presented the ﬁrst ADKG pro-
tocol. Their construction uses n concurrent high-threshold
asynchronous complete secret sharing (ACSS) schemes to
construct an ADKG protocol
that has an expected total
communication cost of O(κn4) and terminates in expected
O(n) rounds. Here κ is the security parameter. Recently,
Abraham et al. [4] proposed a special-purpose of ADKG
protocol with an expected total communication cost of
O(κn3 log n), which is later improved to O(κn3) by Gao et
al. [28] and Das et al. [19]. We say these ADKG schemes
are special-purpose because the distributed secret key is a
group element rather than a ﬁeld element (i.e., gz rather than
z), so they cannot be used in most off-the-shelf threshold
encryption [21] or threshold signature protocols [9]. We
summarize existing works in Table I.
Our results. In this paper, we design a new simple and
concretely efﬁcient ADKG protocol for discrete logarithm
based threshold cryptosystems. In an asynchronous network
of n ≥ 3t + 1 nodes, where at most t nodes could
be malicious, our ADKG protocol achieves an expected
communication cost of O(κn3) and terminates in expected
O(log n) rounds. Hence, our protocol improves upon the
prior known general-purpose ADKG protocol of Kokoris-
Kogias et al. [43] by a factor of n in communication and a
factor of n/log n in expected runtime. For setup assumption,
Kokoris-Kogias et al. [43] assumes Random Oracle (RO),
and our protocol assumes RO and PKI (PKI needed only
for our ACSS construction).
At the end of our protocol, each node receives a threshold
secret share of a randomly chosen secret z ∈ Zq, where Zq
is a ﬁeld of size q. Thus, our protocol is compatible with
off-the-shelf discrete-logarithm based threshold cryptosys-
tems [21], [9], [31].
Our protocol also supports any reconstruction threshold
(cid:96) ∈ [t + 1, n − t], i.e., (cid:96) nodes are required to use the
secret key z (e.g., to produce a threshold signature or decrypt
a threshold encryption). To get
this property efﬁciently,
we design a new additively homomorphic high-threshold
© 2022, Sourav Das. Under license to IEEE.
DOI 10.1109/SP46214.2022.00120
2518
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:29 UTC from IEEE Xplore.  Restrictions apply. 
Table I: Comparison of existing DKG protocols. We use B(L) and R to denote the communication cost of Byzantine broadcast of L-bit
message and round complexity of Byzantine broadcast, respectively. We measure the computation cost in terms of number of group
exponentiations.
l
e
d
o
m
k
r
o
w
t
e
N
sync.
sync.
sync.
sync.
sync.
sync.
e
c
n
a
r
e
l
o
T
t
l
u
a
F
1/2
1/2
1/2
1/2
log n
1/2
e
v
i
t
p
a
d
A
y
r
a
s
r
e
v
d
A






Gennaro et al. [31]
Canneti et al. [13]
Fouque-Stern [26]
Neji et al. [47]
Gurkan et al. [37]
Groth [35]
y
e
k
t
e
r
c
e
S
?
d
l
e
i
F
a
m
o
r
f
d
l
o
h
s
e
r
h
T
h
g
i
H
y
l
c
i
l
b
u
P
e
l