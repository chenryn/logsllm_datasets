# Cisco Catalyst Exploitation

## Speaker
- **Artem Kondratenko**
- Penetration Tester at Kaspersky Lab
- Hacker
- OSC(P|E)
- Skydiver ;)
- Twitter: @artkond

## Overview
On March 23, 2017, Cisco announced a critical vulnerability in numerous switch models, allowing unauthenticated remote code execution. Despite no known public exploits or in-the-wild exploitation, the vulnerability is significant and requires attention.

### Vendor Advice
- **Disable Telnet**: Telnet is an old, insecure protocol. SSH has been a secure replacement for decades. According to the advisory, using Telnet on a Cisco Catalyst switch can provide an attacker with a straightforward path to fully compromise the switch.

### Public Sources for Researching the Vulnerability
- **Cisco Advisory**
- **Vault 7 Leak**: This leak included hacking techniques and potential exploit descriptions for multiple vendors, which Cisco used as a reference for their advisory.

## The Exploit: ROCEM
- **Codename**: ROCEM
- **Modes of Interaction**:
  - **Set**: Run the exploit to enable credential-less authentication.
  - **Unset**: Run the exploit to revert to normal credentials.
  - **Interactive Mode**: Exploit the system and present the attacker with a shell immediately.

### Clustering Cisco Switches
- **Clustering**: Control slave switches from a master switch.
- **Example**:
  ```bash
  $ telnet 192.168.88.10
  catalyst1#rcommand 1
  catalyst2#show priv
  Current privilege level is 15
  ```

### Magic Telnet Option
- **L2 Telnet**: A specific Telnet option used in clustering.
- **Telnet Debug Log**: Provided in the Vault 7 leak, showing ROCEM testing notes and Telnet commands.

### Firmware Analysis
- **Firmware Location**: Available in the flash partition of the switch.
  ```bash
  catalyst2#dir flash:
  Directory of flash:/
  2  -rwx
  9771282   Mar 1 1993 00:13:28 +00:00  c2960-lanbasek9-mz.122-55.SE1.bin
  3  -rwx
  2487   Mar 1 1993 00:01:53 +00:00  config.text
  4  -rwx
  3096   Mar 1 1993 00:09:27 +00:00  multiple-fs
  ```
- **Firmware Unpacking**:
  ```bash
  $ binwalk -e c2960-lanbasek9-mz.122-55.SE1.bin 
  DECIMAL       HEXADECIMAL     DESCRIPTION
  --------------------------------------------------------------------------------
  1120x70            bzip2 compressed data, block size = 900k
  Unpacked binary size is around 30 mb
  ```

### Static Analysis
- **CPU Architecture**: PowerPC 32-bit big-endian
- **Entry Point**: 0x3000
- **Function Discovery**: Using IDA Python script by Federico Muttis (aka @acid_).
  - **Result**: ~80k functions discovered.
- **Challenges**:
  - No symbols.
  - Single binary OS.
  - Indirect function calls via function call tables filled at runtime.

### Debugging Environment
- **No Public SDK**: Some firmware versions have a "gdb kernel" command.
- **Custom GDB Server Protocol**: Unsupported by modern GDB versions.
- **Options**:
  - Patch an old GDB version.
  - Use IODIDE (by nccgroup).

### Hunting for String XREFS
- **String Recognition**: After recognizing functions and strings with IDAPython, XREFs start to appear.
- **Cluster All Telnets**:
  - **Client Side**: Sends a string `«\x03CISCO_KITS\x012::1:»`.
  - **Server Side**: Parses the "CISCO_KITS" options further down the code.

### Buffer Overflow
- **Stack Frame**: Local arguments are placed above the return address.
- **Overflow Scenario**: If buffer boundaries are not checked, a typical overflow occurs.
- **Locating PC Overwrite Offset**:
  - **Cyclic Patterns**: Used to determine the exact location in the user-supplied buffer that overflows the return address.
  - **Tool**: [pwntools](https://github.com/Gallopsled/pwntools)
  - **Result**: Overwrite the return address at offset 115.

### Return-Oriented Programming (ROP)
- **Bypass DEP**: Use existing code in the binary to achieve goals.
- **Gadget Requirements**:
  - Execute payload (read/write memory).
  - Transfer execution flow to the next gadget.
- **Limitations**:
  - Limited set of gadgets.
  - Most gadgets modify the stack frame, making it tricky to return to the original path.

### Arbitrary Memory Writes via ROP
- **Steps**:
  - Find a gadget that loads values from the stack into registers.
  - Write value contained in one register to the address in another register.
- **Gadget Chaining**:
  - Move stack by 0x10.
  - Jump to the next gadget.
- **Tools**:
  - [Ropper](https://github.com/sashs/Ropper)

### Exploit Plan
- **Patch Execution Flow**: Responsible for credential checks.
- **Indirect Function Calls**: Modify pointers to control flow and inner data structures.
- **Final Steps**:
  - Overwrite the pointer to `is_cluster_mode` with a function that always returns 1.
  - Overwrite the pointer to `get_privilege_level` with a function that always returns 15.

### Demo
- **Exploit Script**:
  ```bash
  $ python c2960-lanbasek9-m-12.2.55.se11 192.168.88.10 --set
  [+] Connection OK
  [+] Received bytes from telnet service: '\xff\xfb\x01\xff\xfb\x03\xff\xfd\x18\xff\xfd\x1f'
  [+] Sending cluster option
  [+] Setting credless privilege 15 authentication
  [+] All done
  $ telnet 192.168.88.10
  Trying 192.168.88.10...
  Connected to 192.168.88.10.
  Escape character is '^]'.
  catalyst1#show priv
  Current privilege level is 15
  ```

### Real-World Application
- **Common in Pentests**: These switch models are frequently encountered.
- **Exploitation**:
  - Leak firmware version via SNMP or CDP.
  - Customize the exploit for the exact version.
  - Enjoy your shell.

### Further Research
- **Shellcode Reliability**: For multiple firmware versions.
- **Automate Gadget Search**: Simplify the process.
- **Execute PPC Instructions**: Instead of arbitrary memory writes.

### Future Considerations
- **CDP Protocol**: Switches use CDP to find neighbors suitable for clustering.
- **Potential Attack Vector**:
  - Craft CDP packets to be considered a candidate for clustering.
  - Make an L2 Telnet connection asking for a shell, simulating the cluster "rcommand".

### Conclusion
- **Check PoC Source**: [GitHub Repository](https://github.com/artkond/cisco-rce)
- **Contact**: @artkond, artkond.com

Thank you!